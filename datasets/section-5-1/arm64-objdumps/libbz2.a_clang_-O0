In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_clang_-O0:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_blockSort>:
       0:	sub	sp, sp, #0x70
       4:	stp	x29, x30, [sp, #96]
       8:	add	x29, sp, #0x60
       c:	mov	w8, #0x2710                	// #10000
      10:	stur	x0, [x29, #-8]
      14:	ldur	x9, [x29, #-8]
      18:	ldr	x9, [x9, #56]
      1c:	stur	x9, [x29, #-16]
      20:	ldur	x9, [x29, #-8]
      24:	ldr	x9, [x9, #64]
      28:	stur	x9, [x29, #-24]
      2c:	ldur	x9, [x29, #-8]
      30:	ldr	x9, [x9, #40]
      34:	stur	x9, [x29, #-32]
      38:	ldur	x9, [x29, #-8]
      3c:	ldr	w10, [x9, #108]
      40:	stur	w10, [x29, #-36]
      44:	ldur	x9, [x29, #-8]
      48:	ldr	w10, [x9, #656]
      4c:	stur	w10, [x29, #-40]
      50:	ldur	x9, [x29, #-8]
      54:	ldr	w10, [x9, #88]
      58:	stur	w10, [x29, #-44]
      5c:	ldur	w10, [x29, #-36]
      60:	cmp	w10, w8
      64:	b.ge	8c <BZ2_blockSort+0x8c>  // b.tcont
      68:	ldur	x8, [x29, #-8]
      6c:	ldr	x0, [x8, #24]
      70:	ldur	x8, [x29, #-8]
      74:	ldr	x1, [x8, #32]
      78:	ldur	x2, [x29, #-32]
      7c:	ldur	w3, [x29, #-36]
      80:	ldur	w4, [x29, #-40]
      84:	bl	28c <fallbackSort>
      88:	b	210 <BZ2_blockSort+0x210>
      8c:	ldur	w8, [x29, #-36]
      90:	add	w8, w8, #0x22
      94:	str	w8, [sp, #28]
      98:	ldr	w8, [sp, #28]
      9c:	and	w8, w8, #0x1
      a0:	cbz	w8, b0 <BZ2_blockSort+0xb0>
      a4:	ldr	w8, [sp, #28]
      a8:	add	w8, w8, #0x1
      ac:	str	w8, [sp, #28]
      b0:	ldur	x8, [x29, #-24]
      b4:	ldrsw	x9, [sp, #28]
      b8:	add	x8, x8, x9
      bc:	str	x8, [sp, #40]
      c0:	ldur	w10, [x29, #-44]
      c4:	cmp	w10, #0x1
      c8:	b.ge	d4 <BZ2_blockSort+0xd4>  // b.tcont
      cc:	mov	w8, #0x1                   	// #1
      d0:	stur	w8, [x29, #-44]
      d4:	ldur	w8, [x29, #-44]
      d8:	cmp	w8, #0x64
      dc:	b.le	e8 <BZ2_blockSort+0xe8>
      e0:	mov	w8, #0x64                  	// #100
      e4:	stur	w8, [x29, #-44]
      e8:	ldur	w8, [x29, #-36]
      ec:	ldur	w9, [x29, #-44]
      f0:	subs	w9, w9, #0x1
      f4:	mov	w10, #0x3                   	// #3
      f8:	sdiv	w9, w9, w10
      fc:	mul	w8, w8, w9
     100:	str	w8, [sp, #32]
     104:	ldr	w8, [sp, #32]
     108:	add	x6, sp, #0x24
     10c:	str	w8, [sp, #36]
     110:	ldur	x0, [x29, #-16]
     114:	ldur	x1, [x29, #-24]
     118:	ldr	x2, [sp, #40]
     11c:	ldur	x3, [x29, #-32]
     120:	ldur	w4, [x29, #-36]
     124:	ldur	w5, [x29, #-40]
     128:	bl	acc <mainSort>
     12c:	ldur	w8, [x29, #-40]
     130:	cmp	w8, #0x3
     134:	b.lt	1bc <BZ2_blockSort+0x1bc>  // b.tstop
     138:	adrp	x8, 0 <stderr>
     13c:	add	x8, x8, #0x0
     140:	ldr	x0, [x8]
     144:	ldr	w9, [sp, #32]
     148:	ldr	w10, [sp, #36]
     14c:	subs	w2, w9, w10
     150:	ldur	w3, [x29, #-36]
     154:	ldr	w9, [sp, #32]
     158:	ldr	w10, [sp, #36]
     15c:	subs	w9, w9, w10
     160:	scvtf	s0, w9
     164:	ldur	w9, [x29, #-36]
     168:	str	x0, [sp, #16]
     16c:	str	w2, [sp, #12]
     170:	str	w3, [sp, #8]
     174:	str	s0, [sp, #4]
     178:	cbnz	w9, 188 <BZ2_blockSort+0x188>
     17c:	mov	w8, #0x1                   	// #1
     180:	str	w8, [sp]
     184:	b	190 <BZ2_blockSort+0x190>
     188:	ldur	w8, [x29, #-36]
     18c:	str	w8, [sp]
     190:	ldr	w8, [sp]
     194:	scvtf	s0, w8
     198:	ldr	s1, [sp, #4]
     19c:	fdiv	s0, s1, s0
     1a0:	fcvt	d0, s0
     1a4:	ldr	x0, [sp, #16]
     1a8:	adrp	x1, 0 <BZ2_blockSort>
     1ac:	add	x1, x1, #0x0
     1b0:	ldr	w2, [sp, #12]
     1b4:	ldr	w3, [sp, #8]
     1b8:	bl	0 <fprintf>
     1bc:	ldr	w8, [sp, #36]
     1c0:	cmp	w8, #0x0
     1c4:	cset	w8, ge  // ge = tcont
     1c8:	tbnz	w8, #0, 210 <BZ2_blockSort+0x210>
     1cc:	ldur	w8, [x29, #-40]
     1d0:	cmp	w8, #0x2
     1d4:	b.lt	1f0 <BZ2_blockSort+0x1f0>  // b.tstop
     1d8:	adrp	x8, 0 <stderr>
     1dc:	add	x8, x8, #0x0
     1e0:	ldr	x0, [x8]
     1e4:	adrp	x1, 0 <BZ2_blockSort>
     1e8:	add	x1, x1, #0x0
     1ec:	bl	0 <fprintf>
     1f0:	ldur	x8, [x29, #-8]
     1f4:	ldr	x0, [x8, #24]
     1f8:	ldur	x8, [x29, #-8]
     1fc:	ldr	x1, [x8, #32]
     200:	ldur	x2, [x29, #-32]
     204:	ldur	w3, [x29, #-36]
     208:	ldur	w4, [x29, #-40]
     20c:	bl	28c <fallbackSort>
     210:	ldur	x8, [x29, #-8]
     214:	mov	w9, #0xffffffff            	// #-1
     218:	str	w9, [x8, #48]
     21c:	str	wzr, [sp, #28]
     220:	ldr	w8, [sp, #28]
     224:	ldur	x9, [x29, #-8]
     228:	ldr	w10, [x9, #108]
     22c:	cmp	w8, w10
     230:	b.ge	264 <BZ2_blockSort+0x264>  // b.tcont
     234:	ldur	x8, [x29, #-16]
     238:	ldrsw	x9, [sp, #28]
     23c:	ldr	w10, [x8, x9, lsl #2]
     240:	cbnz	w10, 254 <BZ2_blockSort+0x254>
     244:	ldr	w8, [sp, #28]
     248:	ldur	x9, [x29, #-8]
     24c:	str	w8, [x9, #48]
     250:	b	264 <BZ2_blockSort+0x264>
     254:	ldr	w8, [sp, #28]
     258:	add	w8, w8, #0x1
     25c:	str	w8, [sp, #28]
     260:	b	220 <BZ2_blockSort+0x220>
     264:	ldur	x8, [x29, #-8]
     268:	ldr	w9, [x8, #48]
     26c:	mov	w10, #0xffffffff            	// #-1
     270:	cmp	w9, w10
     274:	b.ne	280 <BZ2_blockSort+0x280>  // b.any
     278:	mov	w0, #0x3eb                 	// #1003
     27c:	bl	0 <BZ2_bz__AssertH__fail>
     280:	ldp	x29, x30, [sp, #96]
     284:	add	sp, sp, #0x70
     288:	ret

000000000000028c <fallbackSort>:
     28c:	stp	x29, x30, [sp, #-32]!
     290:	str	x28, [sp, #16]
     294:	mov	x29, sp
     298:	sub	sp, sp, #0x870
     29c:	adrp	x8, 0 <stderr>
     2a0:	add	x8, x8, #0x0
     2a4:	stur	x0, [x29, #-8]
     2a8:	stur	x1, [x29, #-16]
     2ac:	stur	x2, [x29, #-24]
     2b0:	stur	w3, [x29, #-28]
     2b4:	stur	w4, [x29, #-32]
     2b8:	ldur	x9, [x29, #-16]
     2bc:	str	x9, [sp, #24]
     2c0:	ldur	w10, [x29, #-32]
     2c4:	cmp	w10, #0x4
     2c8:	str	x8, [sp, #16]
     2cc:	b.lt	2e4 <fallbackSort+0x58>  // b.tstop
     2d0:	ldr	x8, [sp, #16]
     2d4:	ldr	x0, [x8]
     2d8:	adrp	x1, 0 <BZ2_blockSort>
     2dc:	add	x1, x1, #0x0
     2e0:	bl	0 <fprintf>
     2e4:	str	wzr, [sp, #68]
     2e8:	ldr	w8, [sp, #68]
     2ec:	cmp	w8, #0x101
     2f0:	b.ge	314 <fallbackSort+0x88>  // b.tcont
     2f4:	ldrsw	x8, [sp, #68]
     2f8:	add	x9, sp, #0x44c
     2fc:	mov	w10, wzr
     300:	str	w10, [x9, x8, lsl #2]
     304:	ldr	w8, [sp, #68]
     308:	add	w8, w8, #0x1
     30c:	str	w8, [sp, #68]
     310:	b	2e8 <fallbackSort+0x5c>
     314:	str	wzr, [sp, #68]
     318:	ldr	w8, [sp, #68]
     31c:	ldur	w9, [x29, #-28]
     320:	cmp	w8, w9
     324:	b.ge	364 <fallbackSort+0xd8>  // b.tcont
     328:	ldr	x8, [sp, #24]
     32c:	ldrsw	x9, [sp, #68]
     330:	ldrb	w10, [x8, x9]
     334:	mov	w8, w10
     338:	mov	x9, #0x4                   	// #4
     33c:	mul	x8, x9, x8
     340:	add	x9, sp, #0x44c
     344:	add	x8, x9, x8
     348:	ldr	w10, [x8]
     34c:	add	w10, w10, #0x1
     350:	str	w10, [x8]
     354:	ldr	w8, [sp, #68]
     358:	add	w8, w8, #0x1
     35c:	str	w8, [sp, #68]
     360:	b	318 <fallbackSort+0x8c>
     364:	str	wzr, [sp, #68]
     368:	ldr	w8, [sp, #68]
     36c:	cmp	w8, #0x100
     370:	b.ge	39c <fallbackSort+0x110>  // b.tcont
     374:	ldrsw	x8, [sp, #68]
     378:	add	x9, sp, #0x44c
     37c:	ldr	w10, [x9, x8, lsl #2]
     380:	ldrsw	x8, [sp, #68]
     384:	add	x9, sp, #0x4c
     388:	str	w10, [x9, x8, lsl #2]
     38c:	ldr	w8, [sp, #68]
     390:	add	w8, w8, #0x1
     394:	str	w8, [sp, #68]
     398:	b	368 <fallbackSort+0xdc>
     39c:	mov	w8, #0x1                   	// #1
     3a0:	str	w8, [sp, #68]
     3a4:	ldr	w8, [sp, #68]
     3a8:	cmp	w8, #0x101
     3ac:	b.ge	3ec <fallbackSort+0x160>  // b.tcont
     3b0:	ldr	w8, [sp, #68]
     3b4:	subs	w8, w8, #0x1
     3b8:	mov	x9, #0x4                   	// #4
     3bc:	add	x10, sp, #0x44c
     3c0:	ldr	w8, [x10, w8, sxtw #2]
     3c4:	ldrsw	x11, [sp, #68]
     3c8:	mul	x9, x9, x11
     3cc:	add	x9, x10, x9
     3d0:	ldr	w12, [x9]
     3d4:	add	w8, w12, w8
     3d8:	str	w8, [x9]
     3dc:	ldr	w8, [sp, #68]
     3e0:	add	w8, w8, #0x1
     3e4:	str	w8, [sp, #68]
     3e8:	b	3a4 <fallbackSort+0x118>
     3ec:	str	wzr, [sp, #68]
     3f0:	ldr	w8, [sp, #68]
     3f4:	ldur	w9, [x29, #-28]
     3f8:	cmp	w8, w9
     3fc:	b.ge	450 <fallbackSort+0x1c4>  // b.tcont
     400:	ldr	x8, [sp, #24]
     404:	ldrsw	x9, [sp, #68]
     408:	ldrb	w10, [x8, x9]
     40c:	str	w10, [sp, #64]
     410:	ldrsw	x8, [sp, #64]
     414:	add	x9, sp, #0x44c
     418:	ldr	w10, [x9, x8, lsl #2]
     41c:	subs	w10, w10, #0x1
     420:	str	w10, [sp, #60]
     424:	ldr	w10, [sp, #60]
     428:	ldrsw	x8, [sp, #64]
     42c:	str	w10, [x9, x8, lsl #2]
     430:	ldr	w10, [sp, #68]
     434:	ldur	x8, [x29, #-8]
     438:	ldrsw	x9, [sp, #60]
     43c:	str	w10, [x8, x9, lsl #2]
     440:	ldr	w8, [sp, #68]
     444:	add	w8, w8, #0x1
     448:	str	w8, [sp, #68]
     44c:	b	3f0 <fallbackSort+0x164>
     450:	ldur	w8, [x29, #-28]
     454:	mov	w9, #0x20                  	// #32
     458:	sdiv	w8, w8, w9
     45c:	add	w8, w8, #0x2
     460:	str	w8, [sp, #36]
     464:	str	wzr, [sp, #68]
     468:	ldr	w8, [sp, #68]
     46c:	ldr	w9, [sp, #36]
     470:	cmp	w8, w9
     474:	b.ge	498 <fallbackSort+0x20c>  // b.tcont
     478:	ldur	x8, [x29, #-24]
     47c:	ldrsw	x9, [sp, #68]
     480:	mov	w10, wzr
     484:	str	w10, [x8, x9, lsl #2]
     488:	ldr	w8, [sp, #68]
     48c:	add	w8, w8, #0x1
     490:	str	w8, [sp, #68]
     494:	b	468 <fallbackSort+0x1dc>
     498:	str	wzr, [sp, #68]
     49c:	ldr	w8, [sp, #68]
     4a0:	cmp	w8, #0x100
     4a4:	b.ge	500 <fallbackSort+0x274>  // b.tcont
     4a8:	ldrsw	x8, [sp, #68]
     4ac:	mov	x9, #0x4                   	// #4
     4b0:	add	x10, sp, #0x44c
     4b4:	ldr	w11, [x10, x8, lsl #2]
     4b8:	and	w11, w11, #0x1f
     4bc:	mov	w12, #0x1                   	// #1
     4c0:	lsl	w11, w12, w11
     4c4:	ldur	x8, [x29, #-24]
     4c8:	ldrsw	x13, [sp, #68]
     4cc:	ldr	w12, [x10, x13, lsl #2]
     4d0:	asr	w12, w12, #5
     4d4:	mov	w0, w12
     4d8:	sxtw	x10, w0
     4dc:	mul	x9, x9, x10
     4e0:	add	x8, x8, x9
     4e4:	ldr	w12, [x8]
     4e8:	orr	w11, w12, w11
     4ec:	str	w11, [x8]
     4f0:	ldr	w8, [sp, #68]
     4f4:	add	w8, w8, #0x1
     4f8:	str	w8, [sp, #68]
     4fc:	b	49c <fallbackSort+0x210>
     500:	str	wzr, [sp, #68]
     504:	ldr	w8, [sp, #68]
     508:	cmp	w8, #0x20
     50c:	b.ge	5d0 <fallbackSort+0x344>  // b.tcont
     510:	ldur	w8, [x29, #-28]
     514:	ldr	w9, [sp, #68]
     518:	mov	w10, #0x2                   	// #2
     51c:	mul	w9, w10, w9
     520:	add	w8, w8, w9
     524:	and	w8, w8, #0x1f
     528:	mov	w9, #0x1                   	// #1
     52c:	lsl	w8, w9, w8
     530:	ldur	x11, [x29, #-24]
     534:	ldur	w12, [x29, #-28]
     538:	ldr	w13, [sp, #68]
     53c:	mul	w13, w10, w13
     540:	add	w12, w12, w13
     544:	mov	x14, #0x5                   	// #5
     548:	asr	w12, w12, #5
     54c:	mov	w0, w12
     550:	sxtw	x15, w0
     554:	mov	x16, #0x4                   	// #4
     558:	mul	x15, x16, x15
     55c:	add	x11, x11, x15
     560:	ldr	w12, [x11]
     564:	orr	w8, w12, w8
     568:	str	w8, [x11]
     56c:	ldur	w8, [x29, #-28]
     570:	ldr	w12, [sp, #68]
     574:	mul	w12, w10, w12
     578:	add	w8, w8, w12
     57c:	add	w8, w8, #0x1
     580:	and	w8, w8, #0x1f
     584:	lsl	w8, w9, w8
     588:	ldur	x11, [x29, #-24]
     58c:	ldur	w9, [x29, #-28]
     590:	ldr	w12, [sp, #68]
     594:	mul	w10, w10, w12
     598:	add	w9, w9, w10
     59c:	add	w9, w9, #0x1
     5a0:	asr	w9, w9, w14
     5a4:	mov	w0, w9
     5a8:	sxtw	x15, w0
     5ac:	mul	x15, x16, x15
     5b0:	add	x11, x11, x15
     5b4:	ldr	w9, [x11]
     5b8:	bic	w8, w9, w8
     5bc:	str	w8, [x11]
     5c0:	ldr	w8, [sp, #68]
     5c4:	add	w8, w8, #0x1
     5c8:	str	w8, [sp, #68]
     5cc:	b	504 <fallbackSort+0x278>
     5d0:	mov	w8, #0x1                   	// #1
     5d4:	str	w8, [sp, #72]
     5d8:	ldur	w8, [x29, #-32]
     5dc:	cmp	w8, #0x4
     5e0:	b.lt	5fc <fallbackSort+0x370>  // b.tstop
     5e4:	ldr	x8, [sp, #16]
     5e8:	ldr	x0, [x8]
     5ec:	ldr	w2, [sp, #72]
     5f0:	adrp	x1, 0 <BZ2_blockSort>
     5f4:	add	x1, x1, #0x0
     5f8:	bl	0 <fprintf>
     5fc:	str	wzr, [sp, #64]
     600:	str	wzr, [sp, #68]
     604:	ldr	w8, [sp, #68]
     608:	ldur	w9, [x29, #-28]
     60c:	cmp	w8, w9
     610:	b.ge	69c <fallbackSort+0x410>  // b.tcont
     614:	ldur	x8, [x29, #-24]
     618:	ldr	w9, [sp, #68]
     61c:	asr	w9, w9, #5
     620:	ldr	w9, [x8, w9, sxtw #2]
     624:	ldr	w10, [sp, #68]
     628:	and	w10, w10, #0x1f
     62c:	mov	w11, #0x1                   	// #1
     630:	lsl	w10, w11, w10
     634:	and	w9, w9, w10
     638:	cbz	w9, 644 <fallbackSort+0x3b8>
     63c:	ldr	w8, [sp, #68]
     640:	str	w8, [sp, #64]
     644:	ldur	x8, [x29, #-8]
     648:	ldrsw	x9, [sp, #68]
     64c:	ldr	w10, [x8, x9, lsl #2]
     650:	ldr	w11, [sp, #72]
     654:	subs	w10, w10, w11
     658:	str	w10, [sp, #60]
     65c:	ldr	w10, [sp, #60]
     660:	cmp	w10, #0x0
     664:	cset	w10, ge  // ge = tcont
     668:	tbnz	w10, #0, 67c <fallbackSort+0x3f0>
     66c:	ldur	w8, [x29, #-28]
     670:	ldr	w9, [sp, #60]
     674:	add	w8, w9, w8
     678:	str	w8, [sp, #60]
     67c:	ldr	w8, [sp, #64]
     680:	ldur	x9, [x29, #-16]
     684:	ldrsw	x10, [sp, #60]
     688:	str	w8, [x9, x10, lsl #2]
     68c:	ldr	w8, [sp, #68]
     690:	add	w8, w8, #0x1
     694:	str	w8, [sp, #68]
     698:	b	604 <fallbackSort+0x378>
     69c:	str	wzr, [sp, #40]
     6a0:	mov	w8, #0xffffffff            	// #-1
     6a4:	str	w8, [sp, #52]
     6a8:	ldr	w8, [sp, #52]
     6ac:	add	w8, w8, #0x1
     6b0:	str	w8, [sp, #60]
     6b4:	ldur	x8, [x29, #-24]
     6b8:	ldr	w9, [sp, #60]
     6bc:	asr	w9, w9, #5
     6c0:	ldr	w9, [x8, w9, sxtw #2]
     6c4:	ldr	w10, [sp, #60]
     6c8:	and	w10, w10, #0x1f
     6cc:	mov	w11, #0x1                   	// #1
     6d0:	lsl	w10, w11, w10
     6d4:	and	w9, w9, w10
     6d8:	mov	w10, #0x0                   	// #0
     6dc:	str	w10, [sp, #12]
     6e0:	cbz	w9, 6f4 <fallbackSort+0x468>
     6e4:	ldr	w8, [sp, #60]
     6e8:	tst	w8, #0x1f
     6ec:	cset	w8, ne  // ne = any
     6f0:	str	w8, [sp, #12]
     6f4:	ldr	w8, [sp, #12]
     6f8:	tbnz	w8, #0, 700 <fallbackSort+0x474>
     6fc:	b	710 <fallbackSort+0x484>
     700:	ldr	w8, [sp, #60]
     704:	add	w8, w8, #0x1
     708:	str	w8, [sp, #60]
     70c:	b	6b4 <fallbackSort+0x428>
     710:	ldur	x8, [x29, #-24]
     714:	ldr	w9, [sp, #60]
     718:	asr	w9, w9, #5
     71c:	ldr	w9, [x8, w9, sxtw #2]
     720:	ldr	w10, [sp, #60]
     724:	and	w10, w10, #0x1f
     728:	mov	w11, #0x1                   	// #1
     72c:	lsl	w10, w11, w10
     730:	and	w9, w9, w10
     734:	cbz	w9, 79c <fallbackSort+0x510>
     738:	ldur	x8, [x29, #-24]
     73c:	ldr	w9, [sp, #60]
     740:	asr	w9, w9, #5
     744:	ldr	w9, [x8, w9, sxtw #2]
     748:	mov	w10, #0xffffffff            	// #-1
     74c:	cmp	w9, w10
     750:	b.ne	764 <fallbackSort+0x4d8>  // b.any
     754:	ldr	w8, [sp, #60]
     758:	add	w8, w8, #0x20
     75c:	str	w8, [sp, #60]
     760:	b	738 <fallbackSort+0x4ac>
     764:	ldur	x8, [x29, #-24]
     768:	ldr	w9, [sp, #60]
     76c:	asr	w9, w9, #5
     770:	ldr	w9, [x8, w9, sxtw #2]
     774:	ldr	w10, [sp, #60]
     778:	and	w10, w10, #0x1f
     77c:	mov	w11, #0x1                   	// #1
     780:	lsl	w10, w11, w10
     784:	and	w9, w9, w10
     788:	cbz	w9, 79c <fallbackSort+0x510>
     78c:	ldr	w8, [sp, #60]
     790:	add	w8, w8, #0x1
     794:	str	w8, [sp, #60]
     798:	b	764 <fallbackSort+0x4d8>
     79c:	ldr	w8, [sp, #60]
     7a0:	subs	w8, w8, #0x1
     7a4:	str	w8, [sp, #56]
     7a8:	ldr	w8, [sp, #56]
     7ac:	ldur	w9, [x29, #-28]
     7b0:	cmp	w8, w9
     7b4:	b.lt	7bc <fallbackSort+0x530>  // b.tstop
     7b8:	b	9ac <fallbackSort+0x720>
     7bc:	ldur	x8, [x29, #-24]
     7c0:	ldr	w9, [sp, #60]
     7c4:	asr	w9, w9, #5
     7c8:	ldr	w9, [x8, w9, sxtw #2]
     7cc:	ldr	w10, [sp, #60]
     7d0:	and	w10, w10, #0x1f
     7d4:	mov	w11, #0x1                   	// #1
     7d8:	lsl	w10, w11, w10
     7dc:	and	w9, w9, w10
     7e0:	mov	w10, #0x0                   	// #0
     7e4:	str	w10, [sp, #8]
     7e8:	cbnz	w9, 7fc <fallbackSort+0x570>
     7ec:	ldr	w8, [sp, #60]
     7f0:	tst	w8, #0x1f
     7f4:	cset	w8, ne  // ne = any
     7f8:	str	w8, [sp, #8]
     7fc:	ldr	w8, [sp, #8]
     800:	tbnz	w8, #0, 808 <fallbackSort+0x57c>
     804:	b	818 <fallbackSort+0x58c>
     808:	ldr	w8, [sp, #60]
     80c:	add	w8, w8, #0x1
     810:	str	w8, [sp, #60]
     814:	b	7bc <fallbackSort+0x530>
     818:	ldur	x8, [x29, #-24]
     81c:	ldr	w9, [sp, #60]
     820:	asr	w9, w9, #5
     824:	ldr	w9, [x8, w9, sxtw #2]
     828:	ldr	w10, [sp, #60]
     82c:	and	w10, w10, #0x1f
     830:	mov	w11, #0x1                   	// #1
     834:	lsl	w10, w11, w10
     838:	and	w9, w9, w10
     83c:	cbnz	w9, 8a8 <fallbackSort+0x61c>
     840:	ldur	x8, [x29, #-24]
     844:	ldr	w9, [sp, #60]
     848:	asr	w9, w9, #5
     84c:	ldr	w9, [x8, w9, sxtw #2]
     850:	cbnz	w9, 864 <fallbackSort+0x5d8>
     854:	ldr	w8, [sp, #60]
     858:	add	w8, w8, #0x20
     85c:	str	w8, [sp, #60]
     860:	b	840 <fallbackSort+0x5b4>
     864:	ldur	x8, [x29, #-24]
     868:	ldr	w9, [sp, #60]
     86c:	asr	w9, w9, #5
     870:	ldr	w9, [x8, w9, sxtw #2]
     874:	ldr	w10, [sp, #60]
     878:	and	w10, w10, #0x1f
     87c:	mov	w11, #0x1                   	// #1
     880:	lsl	w10, w11, w10
     884:	tst	w9, w10
     888:	cset	w9, ne  // ne = any
     88c:	eor	w9, w9, #0x1
     890:	tbnz	w9, #0, 898 <fallbackSort+0x60c>
     894:	b	8a8 <fallbackSort+0x61c>
     898:	ldr	w8, [sp, #60]
     89c:	add	w8, w8, #0x1
     8a0:	str	w8, [sp, #60]
     8a4:	b	864 <fallbackSort+0x5d8>
     8a8:	ldr	w8, [sp, #60]
     8ac:	subs	w8, w8, #0x1
     8b0:	str	w8, [sp, #52]
     8b4:	ldr	w8, [sp, #52]
     8b8:	ldur	w9, [x29, #-28]
     8bc:	cmp	w8, w9
     8c0:	b.lt	8c8 <fallbackSort+0x63c>  // b.tstop
     8c4:	b	9ac <fallbackSort+0x720>
     8c8:	ldr	w8, [sp, #52]
     8cc:	ldr	w9, [sp, #56]
     8d0:	cmp	w8, w9
     8d4:	b.le	9a8 <fallbackSort+0x71c>
     8d8:	ldr	w8, [sp, #52]
     8dc:	ldr	w9, [sp, #56]
     8e0:	subs	w8, w8, w9
     8e4:	add	w8, w8, #0x1
     8e8:	ldr	w9, [sp, #40]
     8ec:	add	w8, w9, w8
     8f0:	str	w8, [sp, #40]
     8f4:	ldur	x0, [x29, #-8]
     8f8:	ldur	x1, [x29, #-16]
     8fc:	ldr	w2, [sp, #56]
     900:	ldr	w3, [sp, #52]
     904:	bl	197c <fallbackQSort3>
     908:	mov	w8, #0xffffffff            	// #-1
     90c:	str	w8, [sp, #48]
     910:	ldr	w8, [sp, #56]
     914:	str	w8, [sp, #68]
     918:	ldr	w8, [sp, #68]
     91c:	ldr	w9, [sp, #52]
     920:	cmp	w8, w9
     924:	b.gt	9a8 <fallbackSort+0x71c>
     928:	ldur	x8, [x29, #-16]
     92c:	ldur	x9, [x29, #-8]
     930:	ldrsw	x10, [sp, #68]
     934:	ldr	w11, [x9, x10, lsl #2]
     938:	mov	w9, w11
     93c:	ldr	w11, [x8, x9, lsl #2]
     940:	str	w11, [sp, #44]
     944:	ldr	w11, [sp, #48]
     948:	ldr	w12, [sp, #44]
     94c:	cmp	w11, w12
     950:	b.eq	998 <fallbackSort+0x70c>  // b.none
     954:	ldr	w8, [sp, #68]
     958:	and	w8, w8, #0x1f
     95c:	mov	w9, #0x1                   	// #1
     960:	lsl	w8, w9, w8
     964:	ldur	x10, [x29, #-24]
     968:	ldr	w9, [sp, #68]
     96c:	asr	w9, w9, #5
     970:	mov	w0, w9
     974:	sxtw	x11, w0
     978:	mov	x12, #0x4                   	// #4
     97c:	mul	x11, x12, x11
     980:	add	x10, x10, x11
     984:	ldr	w9, [x10]
     988:	orr	w8, w9, w8
     98c:	str	w8, [x10]
     990:	ldr	w8, [sp, #44]
     994:	str	w8, [sp, #48]
     998:	ldr	w8, [sp, #68]
     99c:	add	w8, w8, #0x1
     9a0:	str	w8, [sp, #68]
     9a4:	b	918 <fallbackSort+0x68c>
     9a8:	b	6a8 <fallbackSort+0x41c>
     9ac:	ldur	w8, [x29, #-32]
     9b0:	cmp	w8, #0x4
     9b4:	b.lt	9d0 <fallbackSort+0x744>  // b.tstop
     9b8:	ldr	x8, [sp, #16]
     9bc:	ldr	x0, [x8]
     9c0:	ldr	w2, [sp, #40]
     9c4:	adrp	x1, 0 <BZ2_blockSort>
     9c8:	add	x1, x1, #0x0
     9cc:	bl	0 <fprintf>
     9d0:	ldr	w8, [sp, #72]
     9d4:	mov	w9, #0x2                   	// #2
     9d8:	mul	w8, w8, w9
     9dc:	str	w8, [sp, #72]
     9e0:	ldr	w8, [sp, #72]
     9e4:	ldur	w9, [x29, #-28]
     9e8:	cmp	w8, w9
     9ec:	b.gt	9f8 <fallbackSort+0x76c>
     9f0:	ldr	w8, [sp, #40]
     9f4:	cbnz	w8, 9fc <fallbackSort+0x770>
     9f8:	b	a00 <fallbackSort+0x774>
     9fc:	b	5d8 <fallbackSort+0x34c>
     a00:	ldur	w8, [x29, #-32]
     a04:	cmp	w8, #0x4
     a08:	b.lt	a20 <fallbackSort+0x794>  // b.tstop
     a0c:	ldr	x8, [sp, #16]
     a10:	ldr	x0, [x8]
     a14:	adrp	x1, 0 <BZ2_blockSort>
     a18:	add	x1, x1, #0x0
     a1c:	bl	0 <fprintf>
     a20:	str	wzr, [sp, #64]
     a24:	str	wzr, [sp, #68]
     a28:	ldr	w8, [sp, #68]
     a2c:	ldur	w9, [x29, #-28]
     a30:	cmp	w8, w9
     a34:	b.ge	aa8 <fallbackSort+0x81c>  // b.tcont
     a38:	ldrsw	x8, [sp, #64]
     a3c:	add	x9, sp, #0x4c
     a40:	ldr	w10, [x9, x8, lsl #2]
     a44:	cbnz	w10, a58 <fallbackSort+0x7cc>
     a48:	ldr	w8, [sp, #64]
     a4c:	add	w8, w8, #0x1
     a50:	str	w8, [sp, #64]
     a54:	b	a38 <fallbackSort+0x7ac>
     a58:	ldrsw	x8, [sp, #64]
     a5c:	mov	x9, #0x4                   	// #4
     a60:	mul	x8, x9, x8
     a64:	add	x9, sp, #0x4c
     a68:	add	x8, x9, x8
     a6c:	ldr	w10, [x8]
     a70:	subs	w10, w10, #0x1
     a74:	str	w10, [x8]
     a78:	ldr	w10, [sp, #64]
     a7c:	ldr	x8, [sp, #24]
     a80:	ldur	x9, [x29, #-8]
     a84:	ldrsw	x11, [sp, #68]
     a88:	ldr	w12, [x9, x11, lsl #2]
     a8c:	mov	w9, w12
     a90:	add	x8, x8, x9
     a94:	strb	w10, [x8]
     a98:	ldr	w8, [sp, #68]
     a9c:	add	w8, w8, #0x1
     aa0:	str	w8, [sp, #68]
     aa4:	b	a28 <fallbackSort+0x79c>
     aa8:	ldr	w8, [sp, #64]
     aac:	cmp	w8, #0x100
     ab0:	b.lt	abc <fallbackSort+0x830>  // b.tstop
     ab4:	mov	w0, #0x3ed                 	// #1005
     ab8:	bl	0 <BZ2_bz__AssertH__fail>
     abc:	add	sp, sp, #0x870
     ac0:	ldr	x28, [sp, #16]
     ac4:	ldp	x29, x30, [sp], #32
     ac8:	ret

0000000000000acc <mainSort>:
     acc:	stp	x29, x30, [sp, #-32]!
     ad0:	str	x28, [sp, #16]
     ad4:	mov	x29, sp
     ad8:	sub	sp, sp, #0xd90
     adc:	sub	x8, x29, #0x44
     ae0:	adrp	x9, 0 <stderr>
     ae4:	add	x9, x9, #0x0
     ae8:	stur	x0, [x8, #60]
     aec:	stur	x1, [x8, #52]
     af0:	stur	x2, [x8, #44]
     af4:	stur	x3, [x8, #36]
     af8:	str	w4, [x8, #32]
     afc:	str	w5, [x8, #28]
     b00:	stur	x6, [x8, #20]
     b04:	ldr	w10, [x8, #28]
     b08:	cmp	w10, #0x4
     b0c:	str	x8, [sp, #16]
     b10:	str	x9, [sp, #8]
     b14:	b.lt	b2c <mainSort+0x60>  // b.tstop
     b18:	ldr	x8, [sp, #8]
     b1c:	ldr	x0, [x8]
     b20:	adrp	x1, 0 <BZ2_blockSort>
     b24:	add	x1, x1, #0x0
     b28:	bl	0 <fprintf>
     b2c:	mov	w8, #0x10000               	// #65536
     b30:	ldr	x9, [sp, #16]
     b34:	str	w8, [x9, #16]
     b38:	ldr	x8, [sp, #16]
     b3c:	ldr	w9, [x8, #16]
     b40:	cmp	w9, #0x0
     b44:	cset	w9, lt  // lt = tstop
     b48:	tbnz	w9, #0, b74 <mainSort+0xa8>
     b4c:	ldr	x8, [sp, #16]
     b50:	ldur	x9, [x8, #36]
     b54:	ldrsw	x10, [x8, #16]
     b58:	mov	w11, wzr
     b5c:	str	w11, [x9, x10, lsl #2]
     b60:	ldr	x8, [sp, #16]
     b64:	ldr	w9, [x8, #16]
     b68:	subs	w9, w9, #0x1
     b6c:	str	w9, [x8, #16]
     b70:	b	b38 <mainSort+0x6c>
     b74:	ldr	x8, [sp, #16]
     b78:	ldur	x9, [x8, #52]
     b7c:	ldrb	w10, [x9]
     b80:	lsl	w10, w10, #8
     b84:	str	w10, [x8, #12]
     b88:	ldr	w10, [x8, #32]
     b8c:	subs	w10, w10, #0x1
     b90:	str	w10, [x8, #16]
     b94:	ldr	x8, [sp, #16]
     b98:	ldr	w9, [x8, #16]
     b9c:	cmp	w9, #0x3
     ba0:	b.lt	d28 <mainSort+0x25c>  // b.tstop
     ba4:	ldr	x8, [sp, #16]
     ba8:	ldur	x9, [x8, #44]
     bac:	ldrsw	x10, [x8, #16]
     bb0:	mov	x11, #0x2                   	// #2
     bb4:	mul	x10, x11, x10
     bb8:	add	x9, x9, x10
     bbc:	mov	w12, #0x0                   	// #0
     bc0:	strh	w12, [x9]
     bc4:	ldr	w13, [x8, #12]
     bc8:	ldur	x9, [x8, #52]
     bcc:	ldrsw	x10, [x8, #16]
     bd0:	ldrb	w14, [x9, x10]
     bd4:	lsl	w14, w14, #8
     bd8:	orr	w13, w14, w13, asr #8
     bdc:	str	w13, [x8, #12]
     be0:	ldur	x9, [x8, #36]
     be4:	ldrsw	x10, [x8, #12]
     be8:	mov	x15, #0x4                   	// #4
     bec:	mul	x10, x15, x10
     bf0:	add	x9, x9, x10
     bf4:	ldr	w13, [x9]
     bf8:	add	w13, w13, #0x1
     bfc:	str	w13, [x9]
     c00:	ldur	x9, [x8, #44]
     c04:	ldr	w13, [x8, #16]
     c08:	subs	w13, w13, #0x1
     c0c:	mov	w0, w13
     c10:	sxtw	x10, w0
     c14:	mul	x10, x11, x10
     c18:	add	x9, x9, x10
     c1c:	strh	w12, [x9]
     c20:	ldr	w13, [x8, #12]
     c24:	ldur	x9, [x8, #52]
     c28:	ldr	w14, [x8, #16]
     c2c:	subs	w14, w14, #0x1
     c30:	ldrb	w14, [x9, w14, sxtw]
     c34:	lsl	w14, w14, #8
     c38:	orr	w13, w14, w13, asr #8
     c3c:	str	w13, [x8, #12]
     c40:	ldur	x9, [x8, #36]
     c44:	ldrsw	x10, [x8, #12]
     c48:	mul	x10, x15, x10
     c4c:	add	x9, x9, x10
     c50:	ldr	w13, [x9]
     c54:	add	w13, w13, #0x1
     c58:	str	w13, [x9]
     c5c:	ldur	x9, [x8, #44]
     c60:	ldr	w13, [x8, #16]
     c64:	subs	w13, w13, #0x2
     c68:	mov	w0, w13
     c6c:	sxtw	x10, w0
     c70:	mul	x10, x11, x10
     c74:	add	x9, x9, x10
     c78:	strh	w12, [x9]
     c7c:	ldr	w13, [x8, #12]
     c80:	ldur	x9, [x8, #52]
     c84:	ldr	w14, [x8, #16]
     c88:	subs	w14, w14, #0x2
     c8c:	ldrb	w14, [x9, w14, sxtw]
     c90:	lsl	w14, w14, #8
     c94:	orr	w13, w14, w13, asr #8
     c98:	str	w13, [x8, #12]
     c9c:	ldur	x9, [x8, #36]
     ca0:	ldrsw	x10, [x8, #12]
     ca4:	mul	x10, x15, x10
     ca8:	add	x9, x9, x10
     cac:	ldr	w13, [x9]
     cb0:	add	w13, w13, #0x1
     cb4:	str	w13, [x9]
     cb8:	ldur	x9, [x8, #44]
     cbc:	ldr	w13, [x8, #16]
     cc0:	subs	w13, w13, #0x3
     cc4:	mov	w0, w13
     cc8:	sxtw	x10, w0
     ccc:	mul	x10, x11, x10
     cd0:	add	x9, x9, x10
     cd4:	strh	w12, [x9]
     cd8:	ldr	w12, [x8, #12]
     cdc:	ldur	x9, [x8, #52]
     ce0:	ldr	w13, [x8, #16]
     ce4:	subs	w13, w13, #0x3
     ce8:	ldrb	w13, [x9, w13, sxtw]
     cec:	lsl	w13, w13, #8
     cf0:	orr	w12, w13, w12, asr #8
     cf4:	str	w12, [x8, #12]
     cf8:	ldur	x9, [x8, #36]
     cfc:	ldrsw	x10, [x8, #12]
     d00:	mul	x10, x15, x10
     d04:	add	x9, x9, x10
     d08:	ldr	w12, [x9]
     d0c:	add	w12, w12, #0x1
     d10:	str	w12, [x9]
     d14:	ldr	x8, [sp, #16]
     d18:	ldr	w9, [x8, #16]
     d1c:	subs	w9, w9, #0x4
     d20:	str	w9, [x8, #16]
     d24:	b	b94 <mainSort+0xc8>
     d28:	ldr	x8, [sp, #16]
     d2c:	ldr	w9, [x8, #16]
     d30:	cmp	w9, #0x0
     d34:	cset	w9, lt  // lt = tstop
     d38:	tbnz	w9, #0, dac <mainSort+0x2e0>
     d3c:	ldr	x8, [sp, #16]
     d40:	ldur	x9, [x8, #44]
     d44:	ldrsw	x10, [x8, #16]
     d48:	mov	x11, #0x2                   	// #2
     d4c:	mul	x10, x11, x10
     d50:	add	x9, x9, x10
     d54:	mov	w12, #0x0                   	// #0
     d58:	strh	w12, [x9]
     d5c:	ldr	w12, [x8, #12]
     d60:	ldur	x9, [x8, #52]
     d64:	ldrsw	x10, [x8, #16]
     d68:	ldrb	w13, [x9, x10]
     d6c:	lsl	w13, w13, #8
     d70:	orr	w12, w13, w12, asr #8
     d74:	str	w12, [x8, #12]
     d78:	ldur	x9, [x8, #36]
     d7c:	ldrsw	x10, [x8, #12]
     d80:	mov	x11, #0x4                   	// #4
     d84:	mul	x10, x11, x10
     d88:	add	x9, x9, x10
     d8c:	ldr	w12, [x9]
     d90:	add	w12, w12, #0x1
     d94:	str	w12, [x9]
     d98:	ldr	x8, [sp, #16]
     d9c:	ldr	w9, [x8, #16]
     da0:	subs	w9, w9, #0x1
     da4:	str	w9, [x8, #16]
     da8:	b	d28 <mainSort+0x25c>
     dac:	ldr	x8, [sp, #16]
     db0:	str	wzr, [x8, #16]
     db4:	ldr	x8, [sp, #16]
     db8:	ldr	w9, [x8, #16]
     dbc:	cmp	w9, #0x22
     dc0:	b.ge	e38 <mainSort+0x36c>  // b.tcont
     dc4:	ldr	x8, [sp, #16]
     dc8:	ldur	x9, [x8, #52]
     dcc:	ldrsw	x10, [x8, #16]
     dd0:	add	x9, x9, x10
     dd4:	ldrb	w11, [x9]
     dd8:	ldur	x9, [x8, #52]
     ddc:	ldr	w12, [x8, #32]
     de0:	ldr	w13, [x8, #16]
     de4:	add	w12, w12, w13
     de8:	mov	w0, w12
     dec:	sxtw	x10, w0
     df0:	add	x9, x9, x10
     df4:	strb	w11, [x9]
     df8:	ldur	x9, [x8, #44]
     dfc:	ldr	w11, [x8, #32]
     e00:	ldr	w12, [x8, #16]
     e04:	add	w11, w11, w12
     e08:	mov	w0, w11
     e0c:	sxtw	x10, w0
     e10:	mov	x14, #0x2                   	// #2
     e14:	mul	x10, x14, x10
     e18:	add	x9, x9, x10
     e1c:	mov	w11, #0x0                   	// #0
     e20:	strh	w11, [x9]
     e24:	ldr	x8, [sp, #16]
     e28:	ldr	w9, [x8, #16]
     e2c:	add	w9, w9, #0x1
     e30:	str	w9, [x8, #16]
     e34:	b	db4 <mainSort+0x2e8>
     e38:	ldr	x8, [sp, #16]
     e3c:	ldr	w9, [x8, #28]
     e40:	cmp	w9, #0x4
     e44:	b.lt	e5c <mainSort+0x390>  // b.tstop
     e48:	ldr	x8, [sp, #8]
     e4c:	ldr	x0, [x8]
     e50:	adrp	x1, 0 <BZ2_blockSort>
     e54:	add	x1, x1, #0x0
     e58:	bl	0 <fprintf>
     e5c:	mov	w8, #0x1                   	// #1
     e60:	ldr	x9, [sp, #16]
     e64:	str	w8, [x9, #16]
     e68:	ldr	x8, [sp, #16]
     e6c:	ldr	w9, [x8, #16]
     e70:	cmp	w9, #0x10, lsl #12
     e74:	b.gt	ec0 <mainSort+0x3f4>
     e78:	ldr	x8, [sp, #16]
     e7c:	ldur	x9, [x8, #36]
     e80:	ldr	w10, [x8, #16]
     e84:	subs	w10, w10, #0x1
     e88:	mov	x11, #0x4                   	// #4
     e8c:	ldr	w10, [x9, w10, sxtw #2]
     e90:	ldur	x9, [x8, #36]
     e94:	ldrsw	x12, [x8, #16]
     e98:	mul	x11, x11, x12
     e9c:	add	x9, x9, x11
     ea0:	ldr	w13, [x9]
     ea4:	add	w10, w13, w10
     ea8:	str	w10, [x9]
     eac:	ldr	x8, [sp, #16]
     eb0:	ldr	w9, [x8, #16]
     eb4:	add	w9, w9, #0x1
     eb8:	str	w9, [x8, #16]
     ebc:	b	e68 <mainSort+0x39c>
     ec0:	ldr	x8, [sp, #16]
     ec4:	ldur	x9, [x8, #52]
     ec8:	ldrb	w10, [x9]
     ecc:	lsl	w10, w10, #8
     ed0:	strh	w10, [sp, #66]
     ed4:	ldr	w10, [x8, #32]
     ed8:	subs	w10, w10, #0x1
     edc:	str	w10, [x8, #16]
     ee0:	ldr	x8, [sp, #16]
     ee4:	ldr	w9, [x8, #16]
     ee8:	cmp	w9, #0x3
     eec:	b.lt	1080 <mainSort+0x5b4>  // b.tstop
     ef0:	ldrh	w8, [sp, #66]
     ef4:	ldr	x9, [sp, #16]
     ef8:	ldur	x10, [x9, #52]
     efc:	ldrsw	x11, [x9, #16]
     f00:	ldrb	w12, [x10, x11]
     f04:	lsl	w12, w12, #8
     f08:	orr	w8, w12, w8, asr #8
     f0c:	strh	w8, [sp, #66]
     f10:	ldur	x10, [x9, #36]
     f14:	ldrh	w8, [sp, #66]
     f18:	mov	w11, w8
     f1c:	ldr	w8, [x10, x11, lsl #2]
     f20:	subs	w8, w8, #0x1
     f24:	str	w8, [x9, #12]
     f28:	ldr	w8, [x9, #12]
     f2c:	ldur	x10, [x9, #36]
     f30:	ldrh	w12, [sp, #66]
     f34:	mov	w11, w12
     f38:	str	w8, [x10, x11, lsl #2]
     f3c:	ldr	w8, [x9, #16]
     f40:	ldur	x10, [x9, #60]
     f44:	ldrsw	x11, [x9, #12]
     f48:	str	w8, [x10, x11, lsl #2]
     f4c:	ldrh	w8, [sp, #66]
     f50:	ldur	x10, [x9, #52]
     f54:	ldr	w12, [x9, #16]
     f58:	subs	w12, w12, #0x1
     f5c:	ldrb	w12, [x10, w12, sxtw]
     f60:	lsl	w12, w12, #8
     f64:	orr	w8, w12, w8, asr #8
     f68:	strh	w8, [sp, #66]
     f6c:	ldur	x10, [x9, #36]
     f70:	ldrh	w8, [sp, #66]
     f74:	mov	w11, w8
     f78:	ldr	w8, [x10, x11, lsl #2]
     f7c:	subs	w8, w8, #0x1
     f80:	str	w8, [x9, #12]
     f84:	ldr	w8, [x9, #12]
     f88:	ldur	x10, [x9, #36]
     f8c:	ldrh	w12, [sp, #66]
     f90:	mov	w11, w12
     f94:	str	w8, [x10, x11, lsl #2]
     f98:	ldr	w8, [x9, #16]
     f9c:	subs	w8, w8, #0x1
     fa0:	ldur	x10, [x9, #60]
     fa4:	ldrsw	x11, [x9, #12]
     fa8:	str	w8, [x10, x11, lsl #2]
     fac:	ldrh	w8, [sp, #66]
     fb0:	ldur	x10, [x9, #52]
     fb4:	ldr	w12, [x9, #16]
     fb8:	subs	w12, w12, #0x2
     fbc:	ldrb	w12, [x10, w12, sxtw]
     fc0:	lsl	w12, w12, #8
     fc4:	orr	w8, w12, w8, asr #8
     fc8:	strh	w8, [sp, #66]
     fcc:	ldur	x10, [x9, #36]
     fd0:	ldrh	w8, [sp, #66]
     fd4:	mov	w11, w8
     fd8:	ldr	w8, [x10, x11, lsl #2]
     fdc:	subs	w8, w8, #0x1
     fe0:	str	w8, [x9, #12]
     fe4:	ldr	w8, [x9, #12]
     fe8:	ldur	x10, [x9, #36]
     fec:	ldrh	w12, [sp, #66]
     ff0:	mov	w11, w12
     ff4:	str	w8, [x10, x11, lsl #2]
     ff8:	ldr	w8, [x9, #16]
     ffc:	subs	w8, w8, #0x2
    1000:	ldur	x10, [x9, #60]
    1004:	ldrsw	x11, [x9, #12]
    1008:	str	w8, [x10, x11, lsl #2]
    100c:	ldrh	w8, [sp, #66]
    1010:	ldur	x10, [x9, #52]
    1014:	ldr	w12, [x9, #16]
    1018:	subs	w12, w12, #0x3
    101c:	ldrb	w12, [x10, w12, sxtw]
    1020:	lsl	w12, w12, #8
    1024:	orr	w8, w12, w8, asr #8
    1028:	strh	w8, [sp, #66]
    102c:	ldur	x10, [x9, #36]
    1030:	ldrh	w8, [sp, #66]
    1034:	mov	w11, w8
    1038:	ldr	w8, [x10, x11, lsl #2]
    103c:	subs	w8, w8, #0x1
    1040:	str	w8, [x9, #12]
    1044:	ldr	w8, [x9, #12]
    1048:	ldur	x10, [x9, #36]
    104c:	ldrh	w12, [sp, #66]
    1050:	mov	w11, w12
    1054:	str	w8, [x10, x11, lsl #2]
    1058:	ldr	w8, [x9, #16]
    105c:	subs	w8, w8, #0x3
    1060:	ldur	x10, [x9, #60]
    1064:	ldrsw	x11, [x9, #12]
    1068:	str	w8, [x10, x11, lsl #2]
    106c:	ldr	x8, [sp, #16]
    1070:	ldr	w9, [x8, #16]
    1074:	subs	w9, w9, #0x4
    1078:	str	w9, [x8, #16]
    107c:	b	ee0 <mainSort+0x414>
    1080:	ldr	x8, [sp, #16]
    1084:	ldr	w9, [x8, #16]
    1088:	cmp	w9, #0x0
    108c:	cset	w9, lt  // lt = tstop
    1090:	tbnz	w9, #0, 1104 <mainSort+0x638>
    1094:	ldrh	w8, [sp, #66]
    1098:	ldr	x9, [sp, #16]
    109c:	ldur	x10, [x9, #52]
    10a0:	ldrsw	x11, [x9, #16]
    10a4:	ldrb	w12, [x10, x11]
    10a8:	lsl	w12, w12, #8
    10ac:	orr	w8, w12, w8, asr #8
    10b0:	strh	w8, [sp, #66]
    10b4:	ldur	x10, [x9, #36]
    10b8:	ldrh	w8, [sp, #66]
    10bc:	mov	w11, w8
    10c0:	ldr	w8, [x10, x11, lsl #2]
    10c4:	subs	w8, w8, #0x1
    10c8:	str	w8, [x9, #12]
    10cc:	ldr	w8, [x9, #12]
    10d0:	ldur	x10, [x9, #36]
    10d4:	ldrh	w12, [sp, #66]
    10d8:	mov	w11, w12
    10dc:	str	w8, [x10, x11, lsl #2]
    10e0:	ldr	w8, [x9, #16]
    10e4:	ldur	x10, [x9, #60]
    10e8:	ldrsw	x11, [x9, #12]
    10ec:	str	w8, [x10, x11, lsl #2]
    10f0:	ldr	x8, [sp, #16]
    10f4:	ldr	w9, [x8, #16]
    10f8:	subs	w9, w9, #0x1
    10fc:	str	w9, [x8, #16]
    1100:	b	1080 <mainSort+0x5b4>
    1104:	ldr	x8, [sp, #16]
    1108:	str	wzr, [x8, #16]
    110c:	ldr	x8, [sp, #16]
    1110:	ldr	w9, [x8, #16]
    1114:	cmp	w9, #0xff
    1118:	b.gt	1158 <mainSort+0x68c>
    111c:	ldr	x8, [sp, #16]
    1120:	ldrsw	x9, [x8, #16]
    1124:	add	x10, sp, #0x84c
    1128:	add	x9, x10, x9
    112c:	mov	w11, #0x0                   	// #0
    1130:	strb	w11, [x9]
    1134:	ldr	w11, [x8, #16]
    1138:	ldrsw	x9, [x8, #16]
    113c:	add	x10, sp, #0x94c
    1140:	str	w11, [x10, x9, lsl #2]
    1144:	ldr	x8, [sp, #16]
    1148:	ldr	w9, [x8, #16]
    114c:	add	w9, w9, #0x1
    1150:	str	w9, [x8, #16]
    1154:	b	110c <mainSort+0x640>
    1158:	mov	w8, #0x1                   	// #1
    115c:	str	w8, [sp, #56]
    1160:	ldr	w8, [sp, #56]
    1164:	mov	w9, #0x3                   	// #3
    1168:	mul	w8, w9, w8
    116c:	add	w8, w8, #0x1
    1170:	str	w8, [sp, #56]
    1174:	ldr	w8, [sp, #56]
    1178:	cmp	w8, #0x100
    117c:	b.le	1160 <mainSort+0x694>
    1180:	ldr	w8, [sp, #56]
    1184:	mov	w9, #0x3                   	// #3
    1188:	sdiv	w8, w8, w9
    118c:	str	w8, [sp, #56]
    1190:	ldr	w8, [sp, #56]
    1194:	ldr	x10, [sp, #16]
    1198:	str	w8, [x10, #16]
    119c:	ldr	x8, [sp, #16]
    11a0:	ldr	w9, [x8, #16]
    11a4:	cmp	w9, #0xff
    11a8:	b.gt	12b4 <mainSort+0x7e8>
    11ac:	ldr	x8, [sp, #16]
    11b0:	ldrsw	x9, [x8, #16]
    11b4:	add	x10, sp, #0x94c
    11b8:	ldr	w11, [x10, x9, lsl #2]
    11bc:	str	w11, [sp, #60]
    11c0:	ldr	w11, [x8, #16]
    11c4:	str	w11, [x8, #12]
    11c8:	ldr	x8, [sp, #16]
    11cc:	ldur	x9, [x8, #36]
    11d0:	ldr	w10, [x8, #12]
    11d4:	ldr	w11, [sp, #56]
    11d8:	subs	w10, w10, w11
    11dc:	add	x12, sp, #0x94c
    11e0:	ldr	w10, [x12, w10, sxtw #2]
    11e4:	add	w10, w10, #0x1
    11e8:	lsl	w10, w10, #8
    11ec:	ldr	w10, [x9, w10, sxtw #2]
    11f0:	ldur	x9, [x8, #36]
    11f4:	ldr	w11, [x8, #12]
    11f8:	ldr	w13, [sp, #56]
    11fc:	subs	w11, w11, w13
    1200:	ldr	w11, [x12, w11, sxtw #2]
    1204:	lsl	w11, w11, #8
    1208:	ldr	w11, [x9, w11, sxtw #2]
    120c:	subs	w10, w10, w11
    1210:	ldur	x9, [x8, #36]
    1214:	ldr	w11, [sp, #60]
    1218:	add	w11, w11, #0x1
    121c:	lsl	w11, w11, #8
    1220:	ldr	w11, [x9, w11, sxtw #2]
    1224:	ldur	x9, [x8, #36]
    1228:	ldr	w13, [sp, #60]
    122c:	lsl	w13, w13, #8
    1230:	ldr	w13, [x9, w13, sxtw #2]
    1234:	subs	w11, w11, w13
    1238:	cmp	w10, w11
    123c:	b.ls	128c <mainSort+0x7c0>  // b.plast
    1240:	ldr	x8, [sp, #16]
    1244:	ldr	w9, [x8, #12]
    1248:	ldr	w10, [sp, #56]
    124c:	subs	w9, w9, w10
    1250:	add	x11, sp, #0x94c
    1254:	ldr	w9, [x11, w9, sxtw #2]
    1258:	ldrsw	x12, [x8, #12]
    125c:	str	w9, [x11, x12, lsl #2]
    1260:	ldr	w9, [x8, #12]
    1264:	ldr	w10, [sp, #56]
    1268:	subs	w9, w9, w10
    126c:	str	w9, [x8, #12]
    1270:	ldr	w9, [x8, #12]
    1274:	ldr	w10, [sp, #56]
    1278:	subs	w10, w10, #0x1
    127c:	cmp	w9, w10
    1280:	b.gt	1288 <mainSort+0x7bc>
    1284:	b	128c <mainSort+0x7c0>
    1288:	b	11c8 <mainSort+0x6fc>
    128c:	ldr	w8, [sp, #60]
    1290:	ldr	x9, [sp, #16]
    1294:	ldrsw	x10, [x9, #12]
    1298:	add	x11, sp, #0x94c
    129c:	str	w8, [x11, x10, lsl #2]
    12a0:	ldr	x8, [sp, #16]
    12a4:	ldr	w9, [x8, #16]
    12a8:	add	w9, w9, #0x1
    12ac:	str	w9, [x8, #16]
    12b0:	b	119c <mainSort+0x6d0>
    12b4:	ldr	w8, [sp, #56]
    12b8:	cmp	w8, #0x1
    12bc:	b.ne	1180 <mainSort+0x6b4>  // b.any
    12c0:	str	wzr, [sp, #68]
    12c4:	ldr	x8, [sp, #16]
    12c8:	str	wzr, [x8, #16]
    12cc:	ldr	x8, [sp, #16]
    12d0:	ldr	w9, [x8, #16]
    12d4:	cmp	w9, #0xff
    12d8:	b.gt	1930 <mainSort+0xe64>
    12dc:	ldr	x8, [sp, #16]
    12e0:	ldrsw	x9, [x8, #16]
    12e4:	add	x10, sp, #0x94c
    12e8:	ldr	w11, [x10, x9, lsl #2]
    12ec:	str	w11, [x8, #4]
    12f0:	str	wzr, [x8, #12]
    12f4:	ldr	x8, [sp, #16]
    12f8:	ldr	w9, [x8, #12]
    12fc:	cmp	w9, #0xff
    1300:	b.gt	1460 <mainSort+0x994>
    1304:	ldr	x8, [sp, #16]
    1308:	ldr	w9, [x8, #12]
    130c:	ldr	w10, [x8, #4]
    1310:	cmp	w9, w10
    1314:	b.eq	144c <mainSort+0x980>  // b.none
    1318:	ldr	x8, [sp, #16]
    131c:	ldr	w9, [x8, #4]
    1320:	ldr	w10, [x8, #12]
    1324:	add	w9, w10, w9, lsl #8
    1328:	str	w9, [x8]
    132c:	ldur	x11, [x8, #36]
    1330:	ldrsw	x12, [x8]
    1334:	ldr	w9, [x11, x12, lsl #2]
    1338:	and	w9, w9, #0x200000
    133c:	cbnz	w9, 1428 <mainSort+0x95c>
    1340:	ldr	x8, [sp, #16]
    1344:	ldur	x9, [x8, #36]
    1348:	ldrsw	x10, [x8]
    134c:	ldr	w11, [x9, x10, lsl #2]
    1350:	and	w11, w11, #0xffdfffff
    1354:	str	w11, [sp, #52]
    1358:	ldur	x9, [x8, #36]
    135c:	ldr	w11, [x8]
    1360:	add	w11, w11, #0x1
    1364:	ldr	w11, [x9, w11, sxtw #2]
    1368:	and	w11, w11, #0xffdfffff
    136c:	subs	w11, w11, #0x1
    1370:	str	w11, [sp, #48]
    1374:	ldr	w11, [sp, #48]
    1378:	ldr	w12, [sp, #52]
    137c:	cmp	w11, w12
    1380:	b.le	1428 <mainSort+0x95c>
    1384:	ldr	x8, [sp, #16]
    1388:	ldr	w9, [x8, #28]
    138c:	cmp	w9, #0x4
    1390:	b.lt	13c8 <mainSort+0x8fc>  // b.tstop
    1394:	ldr	x8, [sp, #8]
    1398:	ldr	x0, [x8]
    139c:	ldr	x9, [sp, #16]
    13a0:	ldr	w2, [x9, #4]
    13a4:	ldr	w3, [x9, #12]
    13a8:	ldr	w4, [sp, #68]
    13ac:	ldr	w10, [sp, #48]
    13b0:	ldr	w11, [sp, #52]
    13b4:	subs	w10, w10, w11
    13b8:	add	w5, w10, #0x1
    13bc:	adrp	x1, 0 <BZ2_blockSort>
    13c0:	add	x1, x1, #0x0
    13c4:	bl	0 <fprintf>
    13c8:	ldr	x8, [sp, #16]
    13cc:	ldur	x0, [x8, #60]
    13d0:	ldur	x1, [x8, #52]
    13d4:	ldur	x2, [x8, #44]
    13d8:	ldr	w3, [x8, #32]
    13dc:	ldr	w4, [sp, #52]
    13e0:	ldr	w5, [sp, #48]
    13e4:	ldur	x7, [x8, #20]
    13e8:	mov	w6, #0x2                   	// #2
    13ec:	bl	2214 <mainQSort3>
    13f0:	ldr	w9, [sp, #48]
    13f4:	ldr	w10, [sp, #52]
    13f8:	subs	w9, w9, w10
    13fc:	add	w9, w9, #0x1
    1400:	ldr	w10, [sp, #68]
    1404:	add	w9, w10, w9
    1408:	str	w9, [sp, #68]
    140c:	ldr	x8, [sp, #16]
    1410:	ldur	x11, [x8, #20]
    1414:	ldr	w9, [x11]
    1418:	cmp	w9, #0x0
    141c:	cset	w9, ge  // ge = tcont
    1420:	tbnz	w9, #0, 1428 <mainSort+0x95c>
    1424:	b	196c <mainSort+0xea0>
    1428:	ldr	x8, [sp, #16]
    142c:	ldur	x9, [x8, #36]
    1430:	ldrsw	x10, [x8]
    1434:	mov	x11, #0x4                   	// #4
    1438:	mul	x10, x11, x10
    143c:	add	x9, x9, x10
    1440:	ldr	w12, [x9]
    1444:	orr	w12, w12, #0x200000
    1448:	str	w12, [x9]
    144c:	ldr	x8, [sp, #16]
    1450:	ldr	w9, [x8, #12]
    1454:	add	w9, w9, #0x1
    1458:	str	w9, [x8, #12]
    145c:	b	12f4 <mainSort+0x828>
    1460:	ldr	x8, [sp, #16]
    1464:	ldrsw	x9, [x8, #4]
    1468:	add	x10, sp, #0x84c
    146c:	add	x9, x10, x9
    1470:	ldrb	w11, [x9]
    1474:	cbz	w11, 1480 <mainSort+0x9b4>
    1478:	mov	w0, #0x3ee                 	// #1006
    147c:	bl	0 <BZ2_bz__AssertH__fail>
    1480:	ldr	x8, [sp, #16]
    1484:	str	wzr, [x8, #12]
    1488:	ldr	x8, [sp, #16]
    148c:	ldr	w9, [x8, #12]
    1490:	cmp	w9, #0xff
    1494:	b.gt	1500 <mainSort+0xa34>
    1498:	ldr	x8, [sp, #16]
    149c:	ldur	x9, [x8, #36]
    14a0:	ldr	w10, [x8, #12]
    14a4:	ldr	w11, [x8, #4]
    14a8:	add	w10, w11, w10, lsl #8
    14ac:	ldr	w10, [x9, w10, sxtw #2]
    14b0:	and	w10, w10, #0xffdfffff
    14b4:	ldrsw	x9, [x8, #12]
    14b8:	add	x12, sp, #0x44c
    14bc:	str	w10, [x12, x9, lsl #2]
    14c0:	ldur	x9, [x8, #36]
    14c4:	ldr	w10, [x8, #12]
    14c8:	ldr	w11, [x8, #4]
    14cc:	add	w10, w11, w10, lsl #8
    14d0:	add	w10, w10, #0x1
    14d4:	ldr	w10, [x9, w10, sxtw #2]
    14d8:	and	w10, w10, #0xffdfffff
    14dc:	subs	w10, w10, #0x1
    14e0:	ldrsw	x9, [x8, #12]
    14e4:	add	x12, sp, #0x4c
    14e8:	str	w10, [x12, x9, lsl #2]
    14ec:	ldr	x8, [sp, #16]
    14f0:	ldr	w9, [x8, #12]
    14f4:	add	w9, w9, #0x1
    14f8:	str	w9, [x8, #12]
    14fc:	b	1488 <mainSort+0x9bc>
    1500:	ldr	x8, [sp, #16]
    1504:	ldur	x9, [x8, #36]
    1508:	ldr	w10, [x8, #4]
    150c:	lsl	w10, w10, #8
    1510:	ldr	w10, [x9, w10, sxtw #2]
    1514:	and	w10, w10, #0xffdfffff
    1518:	str	w10, [x8, #12]
    151c:	ldr	x8, [sp, #16]
    1520:	ldr	w9, [x8, #12]
    1524:	ldrsw	x10, [x8, #4]
    1528:	add	x11, sp, #0x44c
    152c:	ldr	w12, [x11, x10, lsl #2]
    1530:	cmp	w9, w12
    1534:	b.ge	15f0 <mainSort+0xb24>  // b.tcont
    1538:	ldr	x8, [sp, #16]
    153c:	ldur	x9, [x8, #60]
    1540:	ldrsw	x10, [x8, #12]
    1544:	ldr	w11, [x9, x10, lsl #2]
    1548:	subs	w11, w11, #0x1
    154c:	str	w11, [x8, #8]
    1550:	ldr	w11, [x8, #8]
    1554:	cmp	w11, #0x0
    1558:	cset	w11, ge  // ge = tcont
    155c:	tbnz	w11, #0, 1574 <mainSort+0xaa8>
    1560:	ldr	x8, [sp, #16]
    1564:	ldr	w9, [x8, #32]
    1568:	ldr	w10, [x8, #8]
    156c:	add	w9, w10, w9
    1570:	str	w9, [x8, #8]
    1574:	ldr	x8, [sp, #16]
    1578:	ldur	x9, [x8, #52]
    157c:	ldrsw	x10, [x8, #8]
    1580:	add	x9, x9, x10
    1584:	ldrb	w11, [x9]
    1588:	strb	w11, [sp, #75]
    158c:	ldrb	w11, [sp, #75]
    1590:	mov	w9, w11
    1594:	add	x10, sp, #0x84c
    1598:	add	x9, x10, x9
    159c:	ldrb	w11, [x9]
    15a0:	cbnz	w11, 15dc <mainSort+0xb10>
    15a4:	ldr	x8, [sp, #16]
    15a8:	ldr	w9, [x8, #8]
    15ac:	ldur	x10, [x8, #60]
    15b0:	ldrb	w11, [sp, #75]
    15b4:	mov	w12, w11
    15b8:	mov	x13, #0x4                   	// #4
    15bc:	mul	x12, x13, x12
    15c0:	add	x13, sp, #0x44c
    15c4:	add	x12, x13, x12
    15c8:	ldrsw	x13, [x12]
    15cc:	mov	w11, w13
    15d0:	add	w11, w11, #0x1
    15d4:	str	w11, [x12]
    15d8:	str	w9, [x10, x13, lsl #2]
    15dc:	ldr	x8, [sp, #16]
    15e0:	ldr	w9, [x8, #12]
    15e4:	add	w9, w9, #0x1
    15e8:	str	w9, [x8, #12]
    15ec:	b	151c <mainSort+0xa50>
    15f0:	ldr	x8, [sp, #16]
    15f4:	ldur	x9, [x8, #36]
    15f8:	ldr	w10, [x8, #4]
    15fc:	add	w10, w10, #0x1
    1600:	lsl	w10, w10, #8
    1604:	ldr	w10, [x9, w10, sxtw #2]
    1608:	and	w10, w10, #0xffdfffff
    160c:	subs	w10, w10, #0x1
    1610:	str	w10, [x8, #12]
    1614:	ldr	x8, [sp, #16]
    1618:	ldr	w9, [x8, #12]
    161c:	ldrsw	x10, [x8, #4]
    1620:	add	x11, sp, #0x4c
    1624:	ldr	w12, [x11, x10, lsl #2]
    1628:	cmp	w9, w12
    162c:	b.le	16e8 <mainSort+0xc1c>
    1630:	ldr	x8, [sp, #16]
    1634:	ldur	x9, [x8, #60]
    1638:	ldrsw	x10, [x8, #12]
    163c:	ldr	w11, [x9, x10, lsl #2]
    1640:	subs	w11, w11, #0x1
    1644:	str	w11, [x8, #8]
    1648:	ldr	w11, [x8, #8]
    164c:	cmp	w11, #0x0
    1650:	cset	w11, ge  // ge = tcont
    1654:	tbnz	w11, #0, 166c <mainSort+0xba0>
    1658:	ldr	x8, [sp, #16]
    165c:	ldr	w9, [x8, #32]
    1660:	ldr	w10, [x8, #8]
    1664:	add	w9, w10, w9
    1668:	str	w9, [x8, #8]
    166c:	ldr	x8, [sp, #16]
    1670:	ldur	x9, [x8, #52]
    1674:	ldrsw	x10, [x8, #8]
    1678:	add	x9, x9, x10
    167c:	ldrb	w11, [x9]
    1680:	strb	w11, [sp, #75]
    1684:	ldrb	w11, [sp, #75]
    1688:	mov	w9, w11
    168c:	add	x10, sp, #0x84c
    1690:	add	x9, x10, x9
    1694:	ldrb	w11, [x9]
    1698:	cbnz	w11, 16d4 <mainSort+0xc08>
    169c:	ldr	x8, [sp, #16]
    16a0:	ldr	w9, [x8, #8]
    16a4:	ldur	x10, [x8, #60]
    16a8:	ldrb	w11, [sp, #75]
    16ac:	mov	w12, w11
    16b0:	mov	x13, #0x4                   	// #4
    16b4:	mul	x12, x13, x12
    16b8:	add	x13, sp, #0x4c
    16bc:	add	x12, x13, x12
    16c0:	ldrsw	x13, [x12]
    16c4:	mov	w11, w13
    16c8:	subs	w11, w11, #0x1
    16cc:	str	w11, [x12]
    16d0:	str	w9, [x10, x13, lsl #2]
    16d4:	ldr	x8, [sp, #16]
    16d8:	ldr	w9, [x8, #12]
    16dc:	subs	w9, w9, #0x1
    16e0:	str	w9, [x8, #12]
    16e4:	b	1614 <mainSort+0xb48>
    16e8:	ldr	x8, [sp, #16]
    16ec:	ldrsw	x9, [x8, #4]
    16f0:	add	x10, sp, #0x44c
    16f4:	ldr	w11, [x10, x9, lsl #2]
    16f8:	subs	w11, w11, #0x1
    16fc:	ldrsw	x9, [x8, #4]
    1700:	add	x10, sp, #0x4c
    1704:	ldr	w12, [x10, x9, lsl #2]
    1708:	cmp	w11, w12
    170c:	b.eq	174c <mainSort+0xc80>  // b.none
    1710:	ldr	x8, [sp, #16]
    1714:	ldrsw	x9, [x8, #4]
    1718:	add	x10, sp, #0x44c
    171c:	ldr	w11, [x10, x9, lsl #2]
    1720:	cbnz	w11, 1744 <mainSort+0xc78>
    1724:	ldr	x8, [sp, #16]
    1728:	ldrsw	x9, [x8, #4]
    172c:	add	x10, sp, #0x4c
    1730:	ldr	w11, [x10, x9, lsl #2]
    1734:	ldr	w12, [x8, #32]
    1738:	subs	w12, w12, #0x1
    173c:	cmp	w11, w12
    1740:	b.eq	174c <mainSort+0xc80>  // b.none
    1744:	mov	w0, #0x3ef                 	// #1007
    1748:	bl	0 <BZ2_bz__AssertH__fail>
    174c:	ldr	x8, [sp, #16]
    1750:	str	wzr, [x8, #12]
    1754:	ldr	x8, [sp, #16]
    1758:	ldr	w9, [x8, #12]
    175c:	cmp	w9, #0xff
    1760:	b.gt	17ac <mainSort+0xce0>
    1764:	ldr	x8, [sp, #16]
    1768:	ldur	x9, [x8, #36]
    176c:	ldr	w10, [x8, #12]
    1770:	ldr	w11, [x8, #4]
    1774:	add	w10, w11, w10, lsl #8
    1778:	mov	w0, w10
    177c:	sxtw	x12, w0
    1780:	mov	x13, #0x4                   	// #4
    1784:	mul	x12, x13, x12
    1788:	add	x9, x9, x12
    178c:	ldr	w10, [x9]
    1790:	orr	w10, w10, #0x200000
    1794:	str	w10, [x9]
    1798:	ldr	x8, [sp, #16]
    179c:	ldr	w9, [x8, #12]
    17a0:	add	w9, w9, #0x1
    17a4:	str	w9, [x8, #12]
    17a8:	b	1754 <mainSort+0xc88>
    17ac:	ldr	x8, [sp, #16]
    17b0:	ldrsw	x9, [x8, #4]
    17b4:	add	x10, sp, #0x84c
    17b8:	add	x9, x10, x9
    17bc:	mov	w11, #0x1                   	// #1
    17c0:	strb	w11, [x9]
    17c4:	ldr	w11, [x8, #16]
    17c8:	cmp	w11, #0xff
    17cc:	b.ge	191c <mainSort+0xe50>  // b.tcont
    17d0:	ldr	x8, [sp, #16]
    17d4:	ldur	x9, [x8, #36]
    17d8:	ldr	w10, [x8, #4]
    17dc:	lsl	w10, w10, #8
    17e0:	ldr	w10, [x9, w10, sxtw #2]
    17e4:	and	w10, w10, #0xffdfffff
    17e8:	str	w10, [sp, #44]
    17ec:	ldur	x9, [x8, #36]
    17f0:	ldr	w10, [x8, #4]
    17f4:	add	w10, w10, #0x1
    17f8:	lsl	w10, w10, #8
    17fc:	ldr	w10, [x9, w10, sxtw #2]
    1800:	and	w10, w10, #0xffdfffff
    1804:	ldr	w11, [sp, #44]
    1808:	subs	w10, w10, w11
    180c:	str	w10, [sp, #40]
    1810:	str	wzr, [sp, #36]
    1814:	ldr	w8, [sp, #40]
    1818:	ldr	w9, [sp, #36]
    181c:	asr	w8, w8, w9
    1820:	mov	w9, #0xfffe                	// #65534
    1824:	cmp	w8, w9
    1828:	b.le	183c <mainSort+0xd70>
    182c:	ldr	w8, [sp, #36]
    1830:	add	w8, w8, #0x1
    1834:	str	w8, [sp, #36]
    1838:	b	1814 <mainSort+0xd48>
    183c:	ldr	w8, [sp, #40]
    1840:	subs	w8, w8, #0x1
    1844:	ldr	x9, [sp, #16]
    1848:	str	w8, [x9, #12]
    184c:	ldr	x8, [sp, #16]
    1850:	ldr	w9, [x8, #12]
    1854:	cmp	w9, #0x0
    1858:	cset	w9, lt  // lt = tstop
    185c:	tbnz	w9, #0, 18f8 <mainSort+0xe2c>
    1860:	ldr	x8, [sp, #16]
    1864:	ldur	x9, [x8, #60]
    1868:	ldr	w10, [sp, #44]
    186c:	ldr	w11, [x8, #12]
    1870:	add	w10, w10, w11
    1874:	ldr	w10, [x9, w10, sxtw #2]
    1878:	str	w10, [sp, #32]
    187c:	ldr	w10, [x8, #12]
    1880:	ldr	w11, [sp, #36]
    1884:	asr	w10, w10, w11
    1888:	strh	w10, [sp, #30]
    188c:	ldrh	w10, [sp, #30]
    1890:	ldur	x9, [x8, #44]
    1894:	ldrsw	x12, [sp, #32]
    1898:	mov	x13, #0x2                   	// #2
    189c:	mul	x12, x13, x12
    18a0:	add	x9, x9, x12
    18a4:	strh	w10, [x9]
    18a8:	ldr	w10, [sp, #32]
    18ac:	cmp	w10, #0x22
    18b0:	b.ge	18e4 <mainSort+0xe18>  // b.tcont
    18b4:	ldrh	w8, [sp, #30]
    18b8:	ldr	x9, [sp, #16]
    18bc:	ldur	x10, [x9, #44]
    18c0:	ldr	w11, [sp, #32]
    18c4:	ldr	w12, [x9, #32]
    18c8:	add	w11, w11, w12
    18cc:	mov	w0, w11
    18d0:	sxtw	x13, w0
    18d4:	mov	x14, #0x2                   	// #2
    18d8:	mul	x13, x14, x13
    18dc:	add	x10, x10, x13
    18e0:	strh	w8, [x10]
    18e4:	ldr	x8, [sp, #16]
    18e8:	ldr	w9, [x8, #12]
    18ec:	subs	w9, w9, #0x1
    18f0:	str	w9, [x8, #12]
    18f4:	b	184c <mainSort+0xd80>
    18f8:	ldr	w8, [sp, #40]
    18fc:	subs	w8, w8, #0x1
    1900:	ldr	w9, [sp, #36]
    1904:	asr	w8, w8, w9
    1908:	mov	w9, #0xffff                	// #65535
    190c:	cmp	w8, w9
    1910:	b.le	191c <mainSort+0xe50>
    1914:	mov	w0, #0x3ea                 	// #1002
    1918:	bl	0 <BZ2_bz__AssertH__fail>
    191c:	ldr	x8, [sp, #16]
    1920:	ldr	w9, [x8, #16]
    1924:	add	w9, w9, #0x1
    1928:	str	w9, [x8, #16]
    192c:	b	12cc <mainSort+0x800>
    1930:	ldr	x8, [sp, #16]
    1934:	ldr	w9, [x8, #28]
    1938:	cmp	w9, #0x4
    193c:	b.lt	196c <mainSort+0xea0>  // b.tstop
    1940:	ldr	x8, [sp, #8]
    1944:	ldr	x0, [x8]
    1948:	ldr	x9, [sp, #16]
    194c:	ldr	w2, [x9, #32]
    1950:	ldr	w3, [sp, #68]
    1954:	ldr	w10, [x9, #32]
    1958:	ldr	w11, [sp, #68]
    195c:	subs	w4, w10, w11
    1960:	adrp	x1, 0 <BZ2_blockSort>
    1964:	add	x1, x1, #0x0
    1968:	bl	0 <fprintf>
    196c:	add	sp, sp, #0xd90
    1970:	ldr	x28, [sp, #16]
    1974:	ldp	x29, x30, [sp], #32
    1978:	ret

000000000000197c <fallbackQSort3>:
    197c:	stp	x29, x30, [sp, #-32]!
    1980:	str	x28, [sp, #16]
    1984:	mov	x29, sp
    1988:	sub	sp, sp, #0x3b0
    198c:	sub	x8, x29, #0x10
    1990:	add	x9, sp, #0x1d8
    1994:	add	x10, sp, #0x48
    1998:	str	x0, [x8, #8]
    199c:	str	x1, [x8]
    19a0:	stur	w2, [x29, #-20]
    19a4:	stur	w3, [x29, #-24]
    19a8:	stur	wzr, [x29, #-68]
    19ac:	stur	wzr, [x29, #-52]
    19b0:	ldur	w11, [x29, #-20]
    19b4:	ldursw	x12, [x29, #-52]
    19b8:	str	w11, [x9, x12, lsl #2]
    19bc:	ldur	w11, [x29, #-24]
    19c0:	ldursw	x9, [x29, #-52]
    19c4:	str	w11, [x10, x9, lsl #2]
    19c8:	ldur	w11, [x29, #-52]
    19cc:	add	w11, w11, #0x1
    19d0:	stur	w11, [x29, #-52]
    19d4:	str	x8, [sp, #16]
    19d8:	ldur	w8, [x29, #-52]
    19dc:	cmp	w8, #0x0
    19e0:	cset	w8, le
    19e4:	tbnz	w8, #0, 1ff8 <fallbackQSort3+0x67c>
    19e8:	ldur	w8, [x29, #-52]
    19ec:	cmp	w8, #0x63
    19f0:	b.lt	19fc <fallbackQSort3+0x80>  // b.tstop
    19f4:	mov	w0, #0x3ec                 	// #1004
    19f8:	bl	0 <BZ2_bz__AssertH__fail>
    19fc:	ldur	w8, [x29, #-52]
    1a00:	subs	w8, w8, #0x1
    1a04:	stur	w8, [x29, #-52]
    1a08:	ldursw	x9, [x29, #-52]
    1a0c:	add	x10, sp, #0x1d8
    1a10:	ldr	w8, [x10, x9, lsl #2]
    1a14:	stur	w8, [x29, #-56]
    1a18:	ldursw	x9, [x29, #-52]
    1a1c:	add	x10, sp, #0x48
    1a20:	ldr	w8, [x10, x9, lsl #2]
    1a24:	stur	w8, [x29, #-60]
    1a28:	ldur	w8, [x29, #-60]
    1a2c:	ldur	w11, [x29, #-56]
    1a30:	subs	w8, w8, w11
    1a34:	cmp	w8, #0xa
    1a38:	b.ge	1a58 <fallbackQSort3+0xdc>  // b.tcont
    1a3c:	ldr	x8, [sp, #16]
    1a40:	ldr	x0, [x8, #8]
    1a44:	ldr	x1, [x8]
    1a48:	ldur	w2, [x29, #-56]
    1a4c:	ldur	w3, [x29, #-60]
    1a50:	bl	2008 <fallbackSimpleSort>
    1a54:	b	19d8 <fallbackQSort3+0x5c>
    1a58:	ldur	w8, [x29, #-68]
    1a5c:	mov	w9, #0x1dc5                	// #7621
    1a60:	mul	w8, w8, w9
    1a64:	add	w8, w8, #0x1
    1a68:	mov	w9, #0x8000                	// #32768
    1a6c:	udiv	w10, w8, w9
    1a70:	mul	w9, w10, w9
    1a74:	subs	w8, w8, w9
    1a78:	stur	w8, [x29, #-68]
    1a7c:	ldur	w8, [x29, #-68]
    1a80:	mov	w9, #0x3                   	// #3
    1a84:	udiv	w10, w8, w9
    1a88:	mul	w9, w10, w9
    1a8c:	subs	w8, w8, w9
    1a90:	stur	w8, [x29, #-72]
    1a94:	ldur	w8, [x29, #-72]
    1a98:	cbnz	w8, 1ac0 <fallbackQSort3+0x144>
    1a9c:	ldr	x8, [sp, #16]
    1aa0:	ldr	x9, [x8]
    1aa4:	ldr	x10, [x8, #8]
    1aa8:	ldursw	x11, [x29, #-56]
    1aac:	ldr	w12, [x10, x11, lsl #2]
    1ab0:	mov	w10, w12
    1ab4:	ldr	w12, [x9, x10, lsl #2]
    1ab8:	stur	w12, [x29, #-64]
    1abc:	b	1b1c <fallbackQSort3+0x1a0>
    1ac0:	ldur	w8, [x29, #-72]
    1ac4:	cmp	w8, #0x1
    1ac8:	b.ne	1afc <fallbackQSort3+0x180>  // b.any
    1acc:	ldr	x8, [sp, #16]
    1ad0:	ldr	x9, [x8]
    1ad4:	ldr	x10, [x8, #8]
    1ad8:	ldur	w11, [x29, #-56]
    1adc:	ldur	w12, [x29, #-60]
    1ae0:	add	w11, w11, w12
    1ae4:	asr	w11, w11, #1
    1ae8:	ldr	w11, [x10, w11, sxtw #2]
    1aec:	mov	w10, w11
    1af0:	ldr	w11, [x9, x10, lsl #2]
    1af4:	stur	w11, [x29, #-64]
    1af8:	b	1b1c <fallbackQSort3+0x1a0>
    1afc:	ldr	x8, [sp, #16]
    1b00:	ldr	x9, [x8]
    1b04:	ldr	x10, [x8, #8]
    1b08:	ldursw	x11, [x29, #-60]
    1b0c:	ldr	w12, [x10, x11, lsl #2]
    1b10:	mov	w10, w12
    1b14:	ldr	w12, [x9, x10, lsl #2]
    1b18:	stur	w12, [x29, #-64]
    1b1c:	ldur	w8, [x29, #-56]
    1b20:	stur	w8, [x29, #-36]
    1b24:	stur	w8, [x29, #-28]
    1b28:	ldur	w8, [x29, #-60]
    1b2c:	stur	w8, [x29, #-40]
    1b30:	stur	w8, [x29, #-32]
    1b34:	ldur	w8, [x29, #-28]
    1b38:	ldur	w9, [x29, #-32]
    1b3c:	cmp	w8, w9
    1b40:	b.le	1b48 <fallbackQSort3+0x1cc>
    1b44:	b	1bf4 <fallbackQSort3+0x278>
    1b48:	ldr	x8, [sp, #16]
    1b4c:	ldr	x9, [x8]
    1b50:	ldr	x10, [x8, #8]
    1b54:	ldursw	x11, [x29, #-28]
    1b58:	ldr	w12, [x10, x11, lsl #2]
    1b5c:	mov	w10, w12
    1b60:	ldr	w12, [x9, x10, lsl #2]
    1b64:	ldur	w13, [x29, #-64]
    1b68:	subs	w12, w12, w13
    1b6c:	stur	w12, [x29, #-44]
    1b70:	ldur	w12, [x29, #-44]
    1b74:	cbnz	w12, 1bd0 <fallbackQSort3+0x254>
    1b78:	ldr	x8, [sp, #16]
    1b7c:	ldr	x9, [x8, #8]
    1b80:	ldursw	x10, [x29, #-28]
    1b84:	ldr	w11, [x9, x10, lsl #2]
    1b88:	str	w11, [sp, #68]
    1b8c:	ldr	x9, [x8, #8]
    1b90:	ldursw	x10, [x29, #-36]
    1b94:	ldr	w11, [x9, x10, lsl #2]
    1b98:	ldr	x9, [x8, #8]
    1b9c:	ldursw	x10, [x29, #-28]
    1ba0:	str	w11, [x9, x10, lsl #2]
    1ba4:	ldr	w11, [sp, #68]
    1ba8:	ldr	x9, [x8, #8]
    1bac:	ldursw	x10, [x29, #-36]
    1bb0:	str	w11, [x9, x10, lsl #2]
    1bb4:	ldur	w11, [x29, #-36]
    1bb8:	add	w11, w11, #0x1
    1bbc:	stur	w11, [x29, #-36]
    1bc0:	ldur	w11, [x29, #-28]
    1bc4:	add	w11, w11, #0x1
    1bc8:	stur	w11, [x29, #-28]
    1bcc:	b	1b34 <fallbackQSort3+0x1b8>
    1bd0:	ldur	w8, [x29, #-44]
    1bd4:	cmp	w8, #0x0
    1bd8:	cset	w8, le
    1bdc:	tbnz	w8, #0, 1be4 <fallbackQSort3+0x268>
    1be0:	b	1bf4 <fallbackQSort3+0x278>
    1be4:	ldur	w8, [x29, #-28]
    1be8:	add	w8, w8, #0x1
    1bec:	stur	w8, [x29, #-28]
    1bf0:	b	1b34 <fallbackQSort3+0x1b8>
    1bf4:	ldur	w8, [x29, #-28]
    1bf8:	ldur	w9, [x29, #-32]
    1bfc:	cmp	w8, w9
    1c00:	b.le	1c08 <fallbackQSort3+0x28c>
    1c04:	b	1cb4 <fallbackQSort3+0x338>
    1c08:	ldr	x8, [sp, #16]
    1c0c:	ldr	x9, [x8]
    1c10:	ldr	x10, [x8, #8]
    1c14:	ldursw	x11, [x29, #-32]
    1c18:	ldr	w12, [x10, x11, lsl #2]
    1c1c:	mov	w10, w12
    1c20:	ldr	w12, [x9, x10, lsl #2]
    1c24:	ldur	w13, [x29, #-64]
    1c28:	subs	w12, w12, w13
    1c2c:	stur	w12, [x29, #-44]
    1c30:	ldur	w12, [x29, #-44]
    1c34:	cbnz	w12, 1c90 <fallbackQSort3+0x314>
    1c38:	ldr	x8, [sp, #16]
    1c3c:	ldr	x9, [x8, #8]
    1c40:	ldursw	x10, [x29, #-32]
    1c44:	ldr	w11, [x9, x10, lsl #2]
    1c48:	str	w11, [sp, #64]
    1c4c:	ldr	x9, [x8, #8]
    1c50:	ldursw	x10, [x29, #-40]
    1c54:	ldr	w11, [x9, x10, lsl #2]
    1c58:	ldr	x9, [x8, #8]
    1c5c:	ldursw	x10, [x29, #-32]
    1c60:	str	w11, [x9, x10, lsl #2]
    1c64:	ldr	w11, [sp, #64]
    1c68:	ldr	x9, [x8, #8]
    1c6c:	ldursw	x10, [x29, #-40]
    1c70:	str	w11, [x9, x10, lsl #2]
    1c74:	ldur	w11, [x29, #-40]
    1c78:	subs	w11, w11, #0x1
    1c7c:	stur	w11, [x29, #-40]
    1c80:	ldur	w11, [x29, #-32]
    1c84:	subs	w11, w11, #0x1
    1c88:	stur	w11, [x29, #-32]
    1c8c:	b	1bf4 <fallbackQSort3+0x278>
    1c90:	ldur	w8, [x29, #-44]
    1c94:	cmp	w8, #0x0
    1c98:	cset	w8, ge  // ge = tcont
    1c9c:	tbnz	w8, #0, 1ca4 <fallbackQSort3+0x328>
    1ca0:	b	1cb4 <fallbackQSort3+0x338>
    1ca4:	ldur	w8, [x29, #-32]
    1ca8:	subs	w8, w8, #0x1
    1cac:	stur	w8, [x29, #-32]
    1cb0:	b	1bf4 <fallbackQSort3+0x278>
    1cb4:	ldur	w8, [x29, #-28]
    1cb8:	ldur	w9, [x29, #-32]
    1cbc:	cmp	w8, w9
    1cc0:	b.le	1cc8 <fallbackQSort3+0x34c>
    1cc4:	b	1d20 <fallbackQSort3+0x3a4>
    1cc8:	ldr	x8, [sp, #16]
    1ccc:	ldr	x9, [x8, #8]
    1cd0:	ldursw	x10, [x29, #-28]
    1cd4:	ldr	w11, [x9, x10, lsl #2]
    1cd8:	str	w11, [sp, #60]
    1cdc:	ldr	x9, [x8, #8]
    1ce0:	ldursw	x10, [x29, #-32]
    1ce4:	ldr	w11, [x9, x10, lsl #2]
    1ce8:	ldr	x9, [x8, #8]
    1cec:	ldursw	x10, [x29, #-28]
    1cf0:	str	w11, [x9, x10, lsl #2]
    1cf4:	ldr	w11, [sp, #60]
    1cf8:	ldr	x9, [x8, #8]
    1cfc:	ldursw	x10, [x29, #-32]
    1d00:	str	w11, [x9, x10, lsl #2]
    1d04:	ldur	w11, [x29, #-28]
    1d08:	add	w11, w11, #0x1
    1d0c:	stur	w11, [x29, #-28]
    1d10:	ldur	w11, [x29, #-32]
    1d14:	subs	w11, w11, #0x1
    1d18:	stur	w11, [x29, #-32]
    1d1c:	b	1b34 <fallbackQSort3+0x1b8>
    1d20:	ldur	w8, [x29, #-40]
    1d24:	ldur	w9, [x29, #-36]
    1d28:	cmp	w8, w9
    1d2c:	b.ge	1d34 <fallbackQSort3+0x3b8>  // b.tcont
    1d30:	b	19d8 <fallbackQSort3+0x5c>
    1d34:	ldur	w8, [x29, #-36]
    1d38:	ldur	w9, [x29, #-56]
    1d3c:	subs	w8, w8, w9
    1d40:	ldur	w9, [x29, #-28]
    1d44:	ldur	w10, [x29, #-36]
    1d48:	subs	w9, w9, w10
    1d4c:	cmp	w8, w9
    1d50:	b.ge	1d68 <fallbackQSort3+0x3ec>  // b.tcont
    1d54:	ldur	w8, [x29, #-36]
    1d58:	ldur	w9, [x29, #-56]
    1d5c:	subs	w8, w8, w9
    1d60:	str	w8, [sp, #12]
    1d64:	b	1d78 <fallbackQSort3+0x3fc>
    1d68:	ldur	w8, [x29, #-28]
    1d6c:	ldur	w9, [x29, #-36]
    1d70:	subs	w8, w8, w9
    1d74:	str	w8, [sp, #12]
    1d78:	ldr	w8, [sp, #12]
    1d7c:	stur	w8, [x29, #-44]
    1d80:	ldur	w8, [x29, #-56]
    1d84:	str	w8, [sp, #56]
    1d88:	ldur	w8, [x29, #-28]
    1d8c:	ldur	w9, [x29, #-44]
    1d90:	subs	w8, w8, w9
    1d94:	str	w8, [sp, #52]
    1d98:	ldur	w8, [x29, #-44]
    1d9c:	str	w8, [sp, #48]
    1da0:	ldr	w8, [sp, #48]
    1da4:	cmp	w8, #0x0
    1da8:	cset	w8, le
    1dac:	tbnz	w8, #0, 1e14 <fallbackQSort3+0x498>
    1db0:	ldr	x8, [sp, #16]
    1db4:	ldr	x9, [x8, #8]
    1db8:	ldrsw	x10, [sp, #56]
    1dbc:	ldr	w11, [x9, x10, lsl #2]
    1dc0:	str	w11, [sp, #44]
    1dc4:	ldr	x9, [x8, #8]
    1dc8:	ldrsw	x10, [sp, #52]
    1dcc:	ldr	w11, [x9, x10, lsl #2]
    1dd0:	ldr	x9, [x8, #8]
    1dd4:	ldrsw	x10, [sp, #56]
    1dd8:	str	w11, [x9, x10, lsl #2]
    1ddc:	ldr	w11, [sp, #44]
    1de0:	ldr	x9, [x8, #8]
    1de4:	ldrsw	x10, [sp, #52]
    1de8:	str	w11, [x9, x10, lsl #2]
    1dec:	ldr	w11, [sp, #56]
    1df0:	add	w11, w11, #0x1
    1df4:	str	w11, [sp, #56]
    1df8:	ldr	w11, [sp, #52]
    1dfc:	add	w11, w11, #0x1
    1e00:	str	w11, [sp, #52]
    1e04:	ldr	w11, [sp, #48]
    1e08:	subs	w11, w11, #0x1
    1e0c:	str	w11, [sp, #48]
    1e10:	b	1da0 <fallbackQSort3+0x424>
    1e14:	ldur	w8, [x29, #-60]
    1e18:	ldur	w9, [x29, #-40]
    1e1c:	subs	w8, w8, w9
    1e20:	ldur	w9, [x29, #-40]
    1e24:	ldur	w10, [x29, #-32]
    1e28:	subs	w9, w9, w10
    1e2c:	cmp	w8, w9
    1e30:	b.ge	1e48 <fallbackQSort3+0x4cc>  // b.tcont
    1e34:	ldur	w8, [x29, #-60]
    1e38:	ldur	w9, [x29, #-40]
    1e3c:	subs	w8, w8, w9
    1e40:	str	w8, [sp, #8]
    1e44:	b	1e58 <fallbackQSort3+0x4dc>
    1e48:	ldur	w8, [x29, #-40]
    1e4c:	ldur	w9, [x29, #-32]
    1e50:	subs	w8, w8, w9
    1e54:	str	w8, [sp, #8]
    1e58:	ldr	w8, [sp, #8]
    1e5c:	stur	w8, [x29, #-48]
    1e60:	ldur	w8, [x29, #-28]
    1e64:	str	w8, [sp, #40]
    1e68:	ldur	w8, [x29, #-60]
    1e6c:	ldur	w9, [x29, #-48]
    1e70:	subs	w8, w8, w9
    1e74:	add	w8, w8, #0x1
    1e78:	str	w8, [sp, #36]
    1e7c:	ldur	w8, [x29, #-48]
    1e80:	str	w8, [sp, #32]
    1e84:	ldr	w8, [sp, #32]
    1e88:	cmp	w8, #0x0
    1e8c:	cset	w8, le
    1e90:	tbnz	w8, #0, 1ef8 <fallbackQSort3+0x57c>
    1e94:	ldr	x8, [sp, #16]
    1e98:	ldr	x9, [x8, #8]
    1e9c:	ldrsw	x10, [sp, #40]
    1ea0:	ldr	w11, [x9, x10, lsl #2]
    1ea4:	str	w11, [sp, #28]
    1ea8:	ldr	x9, [x8, #8]
    1eac:	ldrsw	x10, [sp, #36]
    1eb0:	ldr	w11, [x9, x10, lsl #2]
    1eb4:	ldr	x9, [x8, #8]
    1eb8:	ldrsw	x10, [sp, #40]
    1ebc:	str	w11, [x9, x10, lsl #2]
    1ec0:	ldr	w11, [sp, #28]
    1ec4:	ldr	x9, [x8, #8]
    1ec8:	ldrsw	x10, [sp, #36]
    1ecc:	str	w11, [x9, x10, lsl #2]
    1ed0:	ldr	w11, [sp, #40]
    1ed4:	add	w11, w11, #0x1
    1ed8:	str	w11, [sp, #40]
    1edc:	ldr	w11, [sp, #36]
    1ee0:	add	w11, w11, #0x1
    1ee4:	str	w11, [sp, #36]
    1ee8:	ldr	w11, [sp, #32]
    1eec:	subs	w11, w11, #0x1
    1ef0:	str	w11, [sp, #32]
    1ef4:	b	1e84 <fallbackQSort3+0x508>
    1ef8:	ldur	w8, [x29, #-56]
    1efc:	ldur	w9, [x29, #-28]
    1f00:	add	w8, w8, w9
    1f04:	ldur	w9, [x29, #-36]
    1f08:	subs	w8, w8, w9
    1f0c:	subs	w8, w8, #0x1
    1f10:	stur	w8, [x29, #-44]
    1f14:	ldur	w8, [x29, #-60]
    1f18:	ldur	w9, [x29, #-40]
    1f1c:	ldur	w10, [x29, #-32]
    1f20:	subs	w9, w9, w10
    1f24:	subs	w8, w8, w9
    1f28:	add	w8, w8, #0x1
    1f2c:	stur	w8, [x29, #-48]
    1f30:	ldur	w8, [x29, #-44]
    1f34:	ldur	w9, [x29, #-56]
    1f38:	subs	w8, w8, w9
    1f3c:	ldur	w9, [x29, #-60]
    1f40:	ldur	w10, [x29, #-48]
    1f44:	subs	w9, w9, w10
    1f48:	cmp	w8, w9
    1f4c:	b.le	1fa4 <fallbackQSort3+0x628>
    1f50:	ldur	w8, [x29, #-56]
    1f54:	ldursw	x9, [x29, #-52]
    1f58:	add	x10, sp, #0x1d8
    1f5c:	str	w8, [x10, x9, lsl #2]
    1f60:	ldur	w8, [x29, #-44]
    1f64:	ldursw	x9, [x29, #-52]
    1f68:	add	x11, sp, #0x48
    1f6c:	str	w8, [x11, x9, lsl #2]
    1f70:	ldur	w8, [x29, #-52]
    1f74:	add	w8, w8, #0x1
    1f78:	stur	w8, [x29, #-52]
    1f7c:	ldur	w8, [x29, #-48]
    1f80:	ldursw	x9, [x29, #-52]
    1f84:	str	w8, [x10, x9, lsl #2]
    1f88:	ldur	w8, [x29, #-60]
    1f8c:	ldursw	x9, [x29, #-52]
    1f90:	str	w8, [x11, x9, lsl #2]
    1f94:	ldur	w8, [x29, #-52]
    1f98:	add	w8, w8, #0x1
    1f9c:	stur	w8, [x29, #-52]
    1fa0:	b	1ff4 <fallbackQSort3+0x678>
    1fa4:	ldur	w8, [x29, #-48]
    1fa8:	ldursw	x9, [x29, #-52]
    1fac:	add	x10, sp, #0x1d8
    1fb0:	str	w8, [x10, x9, lsl #2]
    1fb4:	ldur	w8, [x29, #-60]
    1fb8:	ldursw	x9, [x29, #-52]
    1fbc:	add	x11, sp, #0x48
    1fc0:	str	w8, [x11, x9, lsl #2]
    1fc4:	ldur	w8, [x29, #-52]
    1fc8:	add	w8, w8, #0x1
    1fcc:	stur	w8, [x29, #-52]
    1fd0:	ldur	w8, [x29, #-56]
    1fd4:	ldursw	x9, [x29, #-52]
    1fd8:	str	w8, [x10, x9, lsl #2]
    1fdc:	ldur	w8, [x29, #-44]
    1fe0:	ldursw	x9, [x29, #-52]
    1fe4:	str	w8, [x11, x9, lsl #2]
    1fe8:	ldur	w8, [x29, #-52]
    1fec:	add	w8, w8, #0x1
    1ff0:	stur	w8, [x29, #-52]
    1ff4:	b	19d8 <fallbackQSort3+0x5c>
    1ff8:	add	sp, sp, #0x3b0
    1ffc:	ldr	x28, [sp, #16]
    2000:	ldp	x29, x30, [sp], #32
    2004:	ret

0000000000002008 <fallbackSimpleSort>:
    2008:	sub	sp, sp, #0x30
    200c:	str	x0, [sp, #40]
    2010:	str	x1, [sp, #32]
    2014:	str	w2, [sp, #28]
    2018:	str	w3, [sp, #24]
    201c:	ldr	w8, [sp, #28]
    2020:	ldr	w9, [sp, #24]
    2024:	cmp	w8, w9
    2028:	b.ne	2030 <fallbackSimpleSort+0x28>  // b.any
    202c:	b	220c <fallbackSimpleSort+0x204>
    2030:	ldr	w8, [sp, #24]
    2034:	ldr	w9, [sp, #28]
    2038:	subs	w8, w8, w9
    203c:	cmp	w8, #0x3
    2040:	b.le	2128 <fallbackSimpleSort+0x120>
    2044:	ldr	w8, [sp, #24]
    2048:	subs	w8, w8, #0x4
    204c:	str	w8, [sp, #20]
    2050:	ldr	w8, [sp, #20]
    2054:	ldr	w9, [sp, #28]
    2058:	cmp	w8, w9
    205c:	b.lt	2128 <fallbackSimpleSort+0x120>  // b.tstop
    2060:	ldr	x8, [sp, #40]
    2064:	ldrsw	x9, [sp, #20]
    2068:	ldr	w10, [x8, x9, lsl #2]
    206c:	str	w10, [sp, #12]
    2070:	ldr	x8, [sp, #32]
    2074:	ldrsw	x9, [sp, #12]
    2078:	ldr	w10, [x8, x9, lsl #2]
    207c:	str	w10, [sp, #8]
    2080:	ldr	w10, [sp, #20]
    2084:	add	w10, w10, #0x4
    2088:	str	w10, [sp, #16]
    208c:	ldr	w8, [sp, #16]
    2090:	ldr	w9, [sp, #24]
    2094:	mov	w10, #0x0                   	// #0
    2098:	cmp	w8, w9
    209c:	str	w10, [sp, #4]
    20a0:	b.gt	20cc <fallbackSimpleSort+0xc4>
    20a4:	ldr	w8, [sp, #8]
    20a8:	ldr	x9, [sp, #32]
    20ac:	ldr	x10, [sp, #40]
    20b0:	ldrsw	x11, [sp, #16]
    20b4:	ldr	w12, [x10, x11, lsl #2]
    20b8:	mov	w10, w12
    20bc:	ldr	w12, [x9, x10, lsl #2]
    20c0:	cmp	w8, w12
    20c4:	cset	w8, hi  // hi = pmore
    20c8:	str	w8, [sp, #4]
    20cc:	ldr	w8, [sp, #4]
    20d0:	tbnz	w8, #0, 20d8 <fallbackSimpleSort+0xd0>
    20d4:	b	2104 <fallbackSimpleSort+0xfc>
    20d8:	ldr	x8, [sp, #40]
    20dc:	ldrsw	x9, [sp, #16]
    20e0:	ldr	w10, [x8, x9, lsl #2]
    20e4:	ldr	x8, [sp, #40]
    20e8:	ldr	w11, [sp, #16]
    20ec:	subs	w11, w11, #0x4
    20f0:	str	w10, [x8, w11, sxtw #2]
    20f4:	ldr	w8, [sp, #16]
    20f8:	add	w8, w8, #0x4
    20fc:	str	w8, [sp, #16]
    2100:	b	208c <fallbackSimpleSort+0x84>
    2104:	ldr	w8, [sp, #12]
    2108:	ldr	x9, [sp, #40]
    210c:	ldr	w10, [sp, #16]
    2110:	subs	w10, w10, #0x4
    2114:	str	w8, [x9, w10, sxtw #2]
    2118:	ldr	w8, [sp, #20]
    211c:	subs	w8, w8, #0x1
    2120:	str	w8, [sp, #20]
    2124:	b	2050 <fallbackSimpleSort+0x48>
    2128:	ldr	w8, [sp, #24]
    212c:	subs	w8, w8, #0x1
    2130:	str	w8, [sp, #20]
    2134:	ldr	w8, [sp, #20]
    2138:	ldr	w9, [sp, #28]
    213c:	cmp	w8, w9
    2140:	b.lt	220c <fallbackSimpleSort+0x204>  // b.tstop
    2144:	ldr	x8, [sp, #40]
    2148:	ldrsw	x9, [sp, #20]
    214c:	ldr	w10, [x8, x9, lsl #2]
    2150:	str	w10, [sp, #12]
    2154:	ldr	x8, [sp, #32]
    2158:	ldrsw	x9, [sp, #12]
    215c:	ldr	w10, [x8, x9, lsl #2]
    2160:	str	w10, [sp, #8]
    2164:	ldr	w10, [sp, #20]
    2168:	add	w10, w10, #0x1
    216c:	str	w10, [sp, #16]
    2170:	ldr	w8, [sp, #16]
    2174:	ldr	w9, [sp, #24]
    2178:	mov	w10, #0x0                   	// #0
    217c:	cmp	w8, w9
    2180:	str	w10, [sp]
    2184:	b.gt	21b0 <fallbackSimpleSort+0x1a8>
    2188:	ldr	w8, [sp, #8]
    218c:	ldr	x9, [sp, #32]
    2190:	ldr	x10, [sp, #40]
    2194:	ldrsw	x11, [sp, #16]
    2198:	ldr	w12, [x10, x11, lsl #2]
    219c:	mov	w10, w12
    21a0:	ldr	w12, [x9, x10, lsl #2]
    21a4:	cmp	w8, w12
    21a8:	cset	w8, hi  // hi = pmore
    21ac:	str	w8, [sp]
    21b0:	ldr	w8, [sp]
    21b4:	tbnz	w8, #0, 21bc <fallbackSimpleSort+0x1b4>
    21b8:	b	21e8 <fallbackSimpleSort+0x1e0>
    21bc:	ldr	x8, [sp, #40]
    21c0:	ldrsw	x9, [sp, #16]
    21c4:	ldr	w10, [x8, x9, lsl #2]
    21c8:	ldr	x8, [sp, #40]
    21cc:	ldr	w11, [sp, #16]
    21d0:	subs	w11, w11, #0x1
    21d4:	str	w10, [x8, w11, sxtw #2]
    21d8:	ldr	w8, [sp, #16]
    21dc:	add	w8, w8, #0x1
    21e0:	str	w8, [sp, #16]
    21e4:	b	2170 <fallbackSimpleSort+0x168>
    21e8:	ldr	w8, [sp, #12]
    21ec:	ldr	x9, [sp, #40]
    21f0:	ldr	w10, [sp, #16]
    21f4:	subs	w10, w10, #0x1
    21f8:	str	w8, [x9, w10, sxtw #2]
    21fc:	ldr	w8, [sp, #20]
    2200:	subs	w8, w8, #0x1
    2204:	str	w8, [sp, #20]
    2208:	b	2134 <fallbackSimpleSort+0x12c>
    220c:	add	sp, sp, #0x30
    2210:	ret

0000000000002214 <mainQSort3>:
    2214:	stp	x29, x30, [sp, #-32]!
    2218:	str	x28, [sp, #16]
    221c:	mov	x29, sp
    2220:	sub	sp, sp, #0x570
    2224:	add	x8, sp, #0x384
    2228:	add	x9, sp, #0x1f4
    222c:	add	x10, sp, #0x64
    2230:	stur	x0, [x29, #-8]
    2234:	stur	x1, [x29, #-16]
    2238:	stur	x2, [x29, #-24]
    223c:	stur	w3, [x29, #-28]
    2240:	stur	w4, [x29, #-32]
    2244:	stur	w5, [x29, #-36]
    2248:	stur	w6, [x29, #-40]
    224c:	stur	x7, [x29, #-48]
    2250:	stur	wzr, [x29, #-80]
    2254:	ldur	w11, [x29, #-32]
    2258:	ldursw	x12, [x29, #-80]
    225c:	str	w11, [x8, x12, lsl #2]
    2260:	ldur	w11, [x29, #-36]
    2264:	ldursw	x8, [x29, #-80]
    2268:	str	w11, [x9, x8, lsl #2]
    226c:	ldur	w11, [x29, #-40]
    2270:	ldursw	x8, [x29, #-80]
    2274:	str	w11, [x10, x8, lsl #2]
    2278:	ldur	w11, [x29, #-80]
    227c:	add	w11, w11, #0x1
    2280:	stur	w11, [x29, #-80]
    2284:	ldur	w8, [x29, #-80]
    2288:	cmp	w8, #0x0
    228c:	cset	w8, le
    2290:	tbnz	w8, #0, 2a1c <mainQSort3+0x808>
    2294:	ldur	w8, [x29, #-80]
    2298:	cmp	w8, #0x62
    229c:	b.lt	22a8 <mainQSort3+0x94>  // b.tstop
    22a0:	mov	w0, #0x3e9                 	// #1001
    22a4:	bl	0 <BZ2_bz__AssertH__fail>
    22a8:	ldur	w8, [x29, #-80]
    22ac:	subs	w8, w8, #0x1
    22b0:	stur	w8, [x29, #-80]
    22b4:	ldursw	x9, [x29, #-80]
    22b8:	add	x10, sp, #0x384
    22bc:	ldr	w8, [x10, x9, lsl #2]
    22c0:	stur	w8, [x29, #-84]
    22c4:	ldursw	x9, [x29, #-80]
    22c8:	add	x10, sp, #0x1f4
    22cc:	ldr	w8, [x10, x9, lsl #2]
    22d0:	stur	w8, [x29, #-88]
    22d4:	ldursw	x9, [x29, #-80]
    22d8:	add	x10, sp, #0x64
    22dc:	ldr	w8, [x10, x9, lsl #2]
    22e0:	stur	w8, [x29, #-92]
    22e4:	ldur	w8, [x29, #-88]
    22e8:	ldur	w11, [x29, #-84]
    22ec:	subs	w8, w8, w11
    22f0:	cmp	w8, #0x14
    22f4:	b.lt	2304 <mainQSort3+0xf0>  // b.tstop
    22f8:	ldur	w8, [x29, #-92]
    22fc:	cmp	w8, #0xe
    2300:	b.le	2344 <mainQSort3+0x130>
    2304:	ldur	x0, [x29, #-8]
    2308:	ldur	x1, [x29, #-16]
    230c:	ldur	x2, [x29, #-24]
    2310:	ldur	w3, [x29, #-28]
    2314:	ldur	w4, [x29, #-84]
    2318:	ldur	w5, [x29, #-88]
    231c:	ldur	w6, [x29, #-92]
    2320:	ldur	x7, [x29, #-48]
    2324:	bl	2a2c <mainSimpleSort>
    2328:	ldur	x8, [x29, #-48]
    232c:	ldr	w9, [x8]
    2330:	cmp	w9, #0x0
    2334:	cset	w9, ge  // ge = tcont
    2338:	tbnz	w9, #0, 2340 <mainQSort3+0x12c>
    233c:	b	2a1c <mainQSort3+0x808>
    2340:	b	2284 <mainQSort3+0x70>
    2344:	ldur	x8, [x29, #-16]
    2348:	ldur	x9, [x29, #-8]
    234c:	ldursw	x10, [x29, #-84]
    2350:	ldr	w11, [x9, x10, lsl #2]
    2354:	ldur	w12, [x29, #-92]
    2358:	add	w11, w11, w12
    235c:	ldrb	w0, [x8, w11, uxtw]
    2360:	ldur	x8, [x29, #-16]
    2364:	ldur	x9, [x29, #-8]
    2368:	ldursw	x10, [x29, #-88]
    236c:	ldr	w11, [x9, x10, lsl #2]
    2370:	ldur	w12, [x29, #-92]
    2374:	add	w11, w11, w12
    2378:	ldrb	w1, [x8, w11, uxtw]
    237c:	ldur	x8, [x29, #-16]
    2380:	ldur	x9, [x29, #-8]
    2384:	ldur	w11, [x29, #-84]
    2388:	ldur	w12, [x29, #-88]
    238c:	add	w11, w11, w12
    2390:	asr	w11, w11, #1
    2394:	ldr	w11, [x9, w11, sxtw #2]
    2398:	ldur	w12, [x29, #-92]
    239c:	add	w11, w11, w12
    23a0:	ldrb	w2, [x8, w11, uxtw]
    23a4:	bl	2dc4 <mmed3>
    23a8:	and	w11, w0, #0xff
    23ac:	stur	w11, [x29, #-76]
    23b0:	ldur	w11, [x29, #-84]
    23b4:	stur	w11, [x29, #-60]
    23b8:	stur	w11, [x29, #-52]
    23bc:	ldur	w11, [x29, #-88]
    23c0:	stur	w11, [x29, #-64]
    23c4:	stur	w11, [x29, #-56]
    23c8:	ldur	w8, [x29, #-52]
    23cc:	ldur	w9, [x29, #-56]
    23d0:	cmp	w8, w9
    23d4:	b.le	23dc <mainQSort3+0x1c8>
    23d8:	b	2484 <mainQSort3+0x270>
    23dc:	ldur	x8, [x29, #-16]
    23e0:	ldur	x9, [x29, #-8]
    23e4:	ldursw	x10, [x29, #-52]
    23e8:	ldr	w11, [x9, x10, lsl #2]
    23ec:	ldur	w12, [x29, #-92]
    23f0:	add	w11, w11, w12
    23f4:	ldrb	w11, [x8, w11, uxtw]
    23f8:	ldur	w12, [x29, #-76]
    23fc:	subs	w11, w11, w12
    2400:	stur	w11, [x29, #-68]
    2404:	ldur	w11, [x29, #-68]
    2408:	cbnz	w11, 2460 <mainQSort3+0x24c>
    240c:	ldur	x8, [x29, #-8]
    2410:	ldursw	x9, [x29, #-52]
    2414:	ldr	w10, [x8, x9, lsl #2]
    2418:	str	w10, [sp, #60]
    241c:	ldur	x8, [x29, #-8]
    2420:	ldursw	x9, [x29, #-60]
    2424:	ldr	w10, [x8, x9, lsl #2]
    2428:	ldur	x8, [x29, #-8]
    242c:	ldursw	x9, [x29, #-52]
    2430:	str	w10, [x8, x9, lsl #2]
    2434:	ldr	w10, [sp, #60]
    2438:	ldur	x8, [x29, #-8]
    243c:	ldursw	x9, [x29, #-60]
    2440:	str	w10, [x8, x9, lsl #2]
    2444:	ldur	w10, [x29, #-60]
    2448:	add	w10, w10, #0x1
    244c:	stur	w10, [x29, #-60]
    2450:	ldur	w10, [x29, #-52]
    2454:	add	w10, w10, #0x1
    2458:	stur	w10, [x29, #-52]
    245c:	b	23c8 <mainQSort3+0x1b4>
    2460:	ldur	w8, [x29, #-68]
    2464:	cmp	w8, #0x0
    2468:	cset	w8, le
    246c:	tbnz	w8, #0, 2474 <mainQSort3+0x260>
    2470:	b	2484 <mainQSort3+0x270>
    2474:	ldur	w8, [x29, #-52]
    2478:	add	w8, w8, #0x1
    247c:	stur	w8, [x29, #-52]
    2480:	b	23c8 <mainQSort3+0x1b4>
    2484:	ldur	w8, [x29, #-52]
    2488:	ldur	w9, [x29, #-56]
    248c:	cmp	w8, w9
    2490:	b.le	2498 <mainQSort3+0x284>
    2494:	b	2540 <mainQSort3+0x32c>
    2498:	ldur	x8, [x29, #-16]
    249c:	ldur	x9, [x29, #-8]
    24a0:	ldursw	x10, [x29, #-56]
    24a4:	ldr	w11, [x9, x10, lsl #2]
    24a8:	ldur	w12, [x29, #-92]
    24ac:	add	w11, w11, w12
    24b0:	ldrb	w11, [x8, w11, uxtw]
    24b4:	ldur	w12, [x29, #-76]
    24b8:	subs	w11, w11, w12
    24bc:	stur	w11, [x29, #-68]
    24c0:	ldur	w11, [x29, #-68]
    24c4:	cbnz	w11, 251c <mainQSort3+0x308>
    24c8:	ldur	x8, [x29, #-8]
    24cc:	ldursw	x9, [x29, #-56]
    24d0:	ldr	w10, [x8, x9, lsl #2]
    24d4:	str	w10, [sp, #56]
    24d8:	ldur	x8, [x29, #-8]
    24dc:	ldursw	x9, [x29, #-64]
    24e0:	ldr	w10, [x8, x9, lsl #2]
    24e4:	ldur	x8, [x29, #-8]
    24e8:	ldursw	x9, [x29, #-56]
    24ec:	str	w10, [x8, x9, lsl #2]
    24f0:	ldr	w10, [sp, #56]
    24f4:	ldur	x8, [x29, #-8]
    24f8:	ldursw	x9, [x29, #-64]
    24fc:	str	w10, [x8, x9, lsl #2]
    2500:	ldur	w10, [x29, #-64]
    2504:	subs	w10, w10, #0x1
    2508:	stur	w10, [x29, #-64]
    250c:	ldur	w10, [x29, #-56]
    2510:	subs	w10, w10, #0x1
    2514:	stur	w10, [x29, #-56]
    2518:	b	2484 <mainQSort3+0x270>
    251c:	ldur	w8, [x29, #-68]
    2520:	cmp	w8, #0x0
    2524:	cset	w8, ge  // ge = tcont
    2528:	tbnz	w8, #0, 2530 <mainQSort3+0x31c>
    252c:	b	2540 <mainQSort3+0x32c>
    2530:	ldur	w8, [x29, #-56]
    2534:	subs	w8, w8, #0x1
    2538:	stur	w8, [x29, #-56]
    253c:	b	2484 <mainQSort3+0x270>
    2540:	ldur	w8, [x29, #-52]
    2544:	ldur	w9, [x29, #-56]
    2548:	cmp	w8, w9
    254c:	b.le	2554 <mainQSort3+0x340>
    2550:	b	25a8 <mainQSort3+0x394>
    2554:	ldur	x8, [x29, #-8]
    2558:	ldursw	x9, [x29, #-52]
    255c:	ldr	w10, [x8, x9, lsl #2]
    2560:	str	w10, [sp, #52]
    2564:	ldur	x8, [x29, #-8]
    2568:	ldursw	x9, [x29, #-56]
    256c:	ldr	w10, [x8, x9, lsl #2]
    2570:	ldur	x8, [x29, #-8]
    2574:	ldursw	x9, [x29, #-52]
    2578:	str	w10, [x8, x9, lsl #2]
    257c:	ldr	w10, [sp, #52]
    2580:	ldur	x8, [x29, #-8]
    2584:	ldursw	x9, [x29, #-56]
    2588:	str	w10, [x8, x9, lsl #2]
    258c:	ldur	w10, [x29, #-52]
    2590:	add	w10, w10, #0x1
    2594:	stur	w10, [x29, #-52]
    2598:	ldur	w10, [x29, #-56]
    259c:	subs	w10, w10, #0x1
    25a0:	stur	w10, [x29, #-56]
    25a4:	b	23c8 <mainQSort3+0x1b4>
    25a8:	ldur	w8, [x29, #-64]
    25ac:	ldur	w9, [x29, #-60]
    25b0:	cmp	w8, w9
    25b4:	b.ge	25fc <mainQSort3+0x3e8>  // b.tcont
    25b8:	ldur	w8, [x29, #-84]
    25bc:	ldursw	x9, [x29, #-80]
    25c0:	add	x10, sp, #0x384
    25c4:	str	w8, [x10, x9, lsl #2]
    25c8:	ldur	w8, [x29, #-88]
    25cc:	ldursw	x9, [x29, #-80]
    25d0:	add	x10, sp, #0x1f4
    25d4:	str	w8, [x10, x9, lsl #2]
    25d8:	ldur	w8, [x29, #-92]
    25dc:	add	w8, w8, #0x1
    25e0:	ldursw	x9, [x29, #-80]
    25e4:	add	x10, sp, #0x64
    25e8:	str	w8, [x10, x9, lsl #2]
    25ec:	ldur	w8, [x29, #-80]
    25f0:	add	w8, w8, #0x1
    25f4:	stur	w8, [x29, #-80]
    25f8:	b	2284 <mainQSort3+0x70>
    25fc:	ldur	w8, [x29, #-60]
    2600:	ldur	w9, [x29, #-84]
    2604:	subs	w8, w8, w9
    2608:	ldur	w9, [x29, #-52]
    260c:	ldur	w10, [x29, #-60]
    2610:	subs	w9, w9, w10
    2614:	cmp	w8, w9
    2618:	b.ge	2630 <mainQSort3+0x41c>  // b.tcont
    261c:	ldur	w8, [x29, #-60]
    2620:	ldur	w9, [x29, #-84]
    2624:	subs	w8, w8, w9
    2628:	str	w8, [sp, #4]
    262c:	b	2640 <mainQSort3+0x42c>
    2630:	ldur	w8, [x29, #-52]
    2634:	ldur	w9, [x29, #-60]
    2638:	subs	w8, w8, w9
    263c:	str	w8, [sp, #4]
    2640:	ldr	w8, [sp, #4]
    2644:	stur	w8, [x29, #-68]
    2648:	ldur	w8, [x29, #-84]
    264c:	str	w8, [sp, #48]
    2650:	ldur	w8, [x29, #-52]
    2654:	ldur	w9, [x29, #-68]
    2658:	subs	w8, w8, w9
    265c:	str	w8, [sp, #44]
    2660:	ldur	w8, [x29, #-68]
    2664:	str	w8, [sp, #40]
    2668:	ldr	w8, [sp, #40]
    266c:	cmp	w8, #0x0
    2670:	cset	w8, le
    2674:	tbnz	w8, #0, 26d8 <mainQSort3+0x4c4>
    2678:	ldur	x8, [x29, #-8]
    267c:	ldrsw	x9, [sp, #48]
    2680:	ldr	w10, [x8, x9, lsl #2]
    2684:	str	w10, [sp, #36]
    2688:	ldur	x8, [x29, #-8]
    268c:	ldrsw	x9, [sp, #44]
    2690:	ldr	w10, [x8, x9, lsl #2]
    2694:	ldur	x8, [x29, #-8]
    2698:	ldrsw	x9, [sp, #48]
    269c:	str	w10, [x8, x9, lsl #2]
    26a0:	ldr	w10, [sp, #36]
    26a4:	ldur	x8, [x29, #-8]
    26a8:	ldrsw	x9, [sp, #44]
    26ac:	str	w10, [x8, x9, lsl #2]
    26b0:	ldr	w10, [sp, #48]
    26b4:	add	w10, w10, #0x1
    26b8:	str	w10, [sp, #48]
    26bc:	ldr	w10, [sp, #44]
    26c0:	add	w10, w10, #0x1
    26c4:	str	w10, [sp, #44]
    26c8:	ldr	w10, [sp, #40]
    26cc:	subs	w10, w10, #0x1
    26d0:	str	w10, [sp, #40]
    26d4:	b	2668 <mainQSort3+0x454>
    26d8:	ldur	w8, [x29, #-88]
    26dc:	ldur	w9, [x29, #-64]
    26e0:	subs	w8, w8, w9
    26e4:	ldur	w9, [x29, #-64]
    26e8:	ldur	w10, [x29, #-56]
    26ec:	subs	w9, w9, w10
    26f0:	cmp	w8, w9
    26f4:	b.ge	270c <mainQSort3+0x4f8>  // b.tcont
    26f8:	ldur	w8, [x29, #-88]
    26fc:	ldur	w9, [x29, #-64]
    2700:	subs	w8, w8, w9
    2704:	str	w8, [sp]
    2708:	b	271c <mainQSort3+0x508>
    270c:	ldur	w8, [x29, #-64]
    2710:	ldur	w9, [x29, #-56]
    2714:	subs	w8, w8, w9
    2718:	str	w8, [sp]
    271c:	ldr	w8, [sp]
    2720:	stur	w8, [x29, #-72]
    2724:	ldur	w8, [x29, #-52]
    2728:	str	w8, [sp, #32]
    272c:	ldur	w8, [x29, #-88]
    2730:	ldur	w9, [x29, #-72]
    2734:	subs	w8, w8, w9
    2738:	add	w8, w8, #0x1
    273c:	str	w8, [sp, #28]
    2740:	ldur	w8, [x29, #-72]
    2744:	str	w8, [sp, #24]
    2748:	ldr	w8, [sp, #24]
    274c:	cmp	w8, #0x0
    2750:	cset	w8, le
    2754:	tbnz	w8, #0, 27b8 <mainQSort3+0x5a4>
    2758:	ldur	x8, [x29, #-8]
    275c:	ldrsw	x9, [sp, #32]
    2760:	ldr	w10, [x8, x9, lsl #2]
    2764:	str	w10, [sp, #20]
    2768:	ldur	x8, [x29, #-8]
    276c:	ldrsw	x9, [sp, #28]
    2770:	ldr	w10, [x8, x9, lsl #2]
    2774:	ldur	x8, [x29, #-8]
    2778:	ldrsw	x9, [sp, #32]
    277c:	str	w10, [x8, x9, lsl #2]
    2780:	ldr	w10, [sp, #20]
    2784:	ldur	x8, [x29, #-8]
    2788:	ldrsw	x9, [sp, #28]
    278c:	str	w10, [x8, x9, lsl #2]
    2790:	ldr	w10, [sp, #32]
    2794:	add	w10, w10, #0x1
    2798:	str	w10, [sp, #32]
    279c:	ldr	w10, [sp, #28]
    27a0:	add	w10, w10, #0x1
    27a4:	str	w10, [sp, #28]
    27a8:	ldr	w10, [sp, #24]
    27ac:	subs	w10, w10, #0x1
    27b0:	str	w10, [sp, #24]
    27b4:	b	2748 <mainQSort3+0x534>
    27b8:	ldur	w8, [x29, #-84]
    27bc:	ldur	w9, [x29, #-52]
    27c0:	add	w8, w8, w9
    27c4:	ldur	w9, [x29, #-60]
    27c8:	subs	w8, w8, w9
    27cc:	subs	w8, w8, #0x1
    27d0:	stur	w8, [x29, #-68]
    27d4:	ldur	w8, [x29, #-88]
    27d8:	ldur	w9, [x29, #-64]
    27dc:	ldur	w10, [x29, #-56]
    27e0:	subs	w9, w9, w10
    27e4:	subs	w8, w8, w9
    27e8:	add	w8, w8, #0x1
    27ec:	stur	w8, [x29, #-72]
    27f0:	ldur	w8, [x29, #-84]
    27f4:	str	w8, [sp, #88]
    27f8:	ldur	w8, [x29, #-68]
    27fc:	str	w8, [sp, #76]
    2800:	ldur	w8, [x29, #-92]
    2804:	str	w8, [sp, #64]
    2808:	ldur	w8, [x29, #-72]
    280c:	str	w8, [sp, #92]
    2810:	ldur	w8, [x29, #-88]
    2814:	str	w8, [sp, #80]
    2818:	ldur	w8, [x29, #-92]
    281c:	str	w8, [sp, #68]
    2820:	ldur	w8, [x29, #-68]
    2824:	add	w8, w8, #0x1
    2828:	str	w8, [sp, #96]
    282c:	ldur	w8, [x29, #-72]
    2830:	subs	w8, w8, #0x1
    2834:	str	w8, [sp, #84]
    2838:	ldur	w8, [x29, #-92]
    283c:	add	w8, w8, #0x1
    2840:	str	w8, [sp, #72]
    2844:	ldr	w8, [sp, #76]
    2848:	ldr	w9, [sp, #88]
    284c:	subs	w8, w8, w9
    2850:	ldr	w9, [sp, #80]
    2854:	ldr	w10, [sp, #92]
    2858:	subs	w9, w9, w10
    285c:	cmp	w8, w9
    2860:	b.ge	28ac <mainQSort3+0x698>  // b.tcont
    2864:	ldr	w8, [sp, #88]
    2868:	str	w8, [sp, #16]
    286c:	ldr	w8, [sp, #92]
    2870:	str	w8, [sp, #88]
    2874:	ldr	w8, [sp, #16]
    2878:	str	w8, [sp, #92]
    287c:	ldr	w8, [sp, #76]
    2880:	str	w8, [sp, #16]
    2884:	ldr	w8, [sp, #80]
    2888:	str	w8, [sp, #76]
    288c:	ldr	w8, [sp, #16]
    2890:	str	w8, [sp, #80]
    2894:	ldr	w8, [sp, #64]
    2898:	str	w8, [sp, #16]
    289c:	ldr	w8, [sp, #68]
    28a0:	str	w8, [sp, #64]
    28a4:	ldr	w8, [sp, #16]
    28a8:	str	w8, [sp, #68]
    28ac:	ldr	w8, [sp, #80]
    28b0:	ldr	w9, [sp, #92]
    28b4:	subs	w8, w8, w9
    28b8:	ldr	w9, [sp, #84]
    28bc:	ldr	w10, [sp, #96]
    28c0:	subs	w9, w9, w10
    28c4:	cmp	w8, w9
    28c8:	b.ge	2914 <mainQSort3+0x700>  // b.tcont
    28cc:	ldr	w8, [sp, #92]
    28d0:	str	w8, [sp, #12]
    28d4:	ldr	w8, [sp, #96]
    28d8:	str	w8, [sp, #92]
    28dc:	ldr	w8, [sp, #12]
    28e0:	str	w8, [sp, #96]
    28e4:	ldr	w8, [sp, #80]
    28e8:	str	w8, [sp, #12]
    28ec:	ldr	w8, [sp, #84]
    28f0:	str	w8, [sp, #80]
    28f4:	ldr	w8, [sp, #12]
    28f8:	str	w8, [sp, #84]
    28fc:	ldr	w8, [sp, #68]
    2900:	str	w8, [sp, #12]
    2904:	ldr	w8, [sp, #72]
    2908:	str	w8, [sp, #68]
    290c:	ldr	w8, [sp, #12]
    2910:	str	w8, [sp, #72]
    2914:	ldr	w8, [sp, #76]
    2918:	ldr	w9, [sp, #88]
    291c:	subs	w8, w8, w9
    2920:	ldr	w9, [sp, #80]
    2924:	ldr	w10, [sp, #92]
    2928:	subs	w9, w9, w10
    292c:	cmp	w8, w9
    2930:	b.ge	297c <mainQSort3+0x768>  // b.tcont
    2934:	ldr	w8, [sp, #88]
    2938:	str	w8, [sp, #8]
    293c:	ldr	w8, [sp, #92]
    2940:	str	w8, [sp, #88]
    2944:	ldr	w8, [sp, #8]
    2948:	str	w8, [sp, #92]
    294c:	ldr	w8, [sp, #76]
    2950:	str	w8, [sp, #8]
    2954:	ldr	w8, [sp, #80]
    2958:	str	w8, [sp, #76]
    295c:	ldr	w8, [sp, #8]
    2960:	str	w8, [sp, #80]
    2964:	ldr	w8, [sp, #64]
    2968:	str	w8, [sp, #8]
    296c:	ldr	w8, [sp, #68]
    2970:	str	w8, [sp, #64]
    2974:	ldr	w8, [sp, #8]
    2978:	str	w8, [sp, #68]
    297c:	ldr	w8, [sp, #88]
    2980:	ldursw	x9, [x29, #-80]
    2984:	add	x10, sp, #0x384
    2988:	str	w8, [x10, x9, lsl #2]
    298c:	ldr	w8, [sp, #76]
    2990:	ldursw	x9, [x29, #-80]
    2994:	add	x11, sp, #0x1f4
    2998:	str	w8, [x11, x9, lsl #2]
    299c:	ldr	w8, [sp, #64]
    29a0:	ldursw	x9, [x29, #-80]
    29a4:	add	x12, sp, #0x64
    29a8:	str	w8, [x12, x9, lsl #2]
    29ac:	ldur	w8, [x29, #-80]
    29b0:	add	w8, w8, #0x1
    29b4:	stur	w8, [x29, #-80]
    29b8:	ldr	w8, [sp, #92]
    29bc:	ldursw	x9, [x29, #-80]
    29c0:	str	w8, [x10, x9, lsl #2]
    29c4:	ldr	w8, [sp, #80]
    29c8:	ldursw	x9, [x29, #-80]
    29cc:	str	w8, [x11, x9, lsl #2]
    29d0:	ldr	w8, [sp, #68]
    29d4:	ldursw	x9, [x29, #-80]
    29d8:	str	w8, [x12, x9, lsl #2]
    29dc:	ldur	w8, [x29, #-80]
    29e0:	add	w8, w8, #0x1
    29e4:	stur	w8, [x29, #-80]
    29e8:	ldr	w8, [sp, #96]
    29ec:	ldursw	x9, [x29, #-80]
    29f0:	str	w8, [x10, x9, lsl #2]
    29f4:	ldr	w8, [sp, #84]
    29f8:	ldursw	x9, [x29, #-80]
    29fc:	str	w8, [x11, x9, lsl #2]
    2a00:	ldr	w8, [sp, #72]
    2a04:	ldursw	x9, [x29, #-80]
    2a08:	str	w8, [x12, x9, lsl #2]
    2a0c:	ldur	w8, [x29, #-80]
    2a10:	add	w8, w8, #0x1
    2a14:	stur	w8, [x29, #-80]
    2a18:	b	2284 <mainQSort3+0x70>
    2a1c:	add	sp, sp, #0x570
    2a20:	ldr	x28, [sp, #16]
    2a24:	ldp	x29, x30, [sp], #32
    2a28:	ret

0000000000002a2c <mainSimpleSort>:
    2a2c:	sub	sp, sp, #0x60
    2a30:	stp	x29, x30, [sp, #80]
    2a34:	add	x29, sp, #0x50
    2a38:	stur	x0, [x29, #-8]
    2a3c:	stur	x1, [x29, #-16]
    2a40:	stur	x2, [x29, #-24]
    2a44:	stur	w3, [x29, #-28]
    2a48:	stur	w4, [x29, #-32]
    2a4c:	stur	w5, [x29, #-36]
    2a50:	str	w6, [sp, #40]
    2a54:	str	x7, [sp, #32]
    2a58:	ldur	w8, [x29, #-36]
    2a5c:	ldur	w9, [x29, #-32]
    2a60:	subs	w8, w8, w9
    2a64:	add	w8, w8, #0x1
    2a68:	str	w8, [sp, #16]
    2a6c:	ldr	w8, [sp, #16]
    2a70:	cmp	w8, #0x2
    2a74:	b.ge	2a7c <mainSimpleSort+0x50>  // b.tcont
    2a78:	b	2db8 <mainSimpleSort+0x38c>
    2a7c:	str	wzr, [sp, #12]
    2a80:	ldrsw	x8, [sp, #12]
    2a84:	adrp	x9, 0 <BZ2_blockSort>
    2a88:	add	x9, x9, #0x0
    2a8c:	ldr	w10, [x9, x8, lsl #2]
    2a90:	ldr	w11, [sp, #16]
    2a94:	cmp	w10, w11
    2a98:	b.ge	2aac <mainSimpleSort+0x80>  // b.tcont
    2a9c:	ldr	w8, [sp, #12]
    2aa0:	add	w8, w8, #0x1
    2aa4:	str	w8, [sp, #12]
    2aa8:	b	2a80 <mainSimpleSort+0x54>
    2aac:	ldr	w8, [sp, #12]
    2ab0:	subs	w8, w8, #0x1
    2ab4:	str	w8, [sp, #12]
    2ab8:	ldr	w8, [sp, #12]
    2abc:	cmp	w8, #0x0
    2ac0:	cset	w8, lt  // lt = tstop
    2ac4:	tbnz	w8, #0, 2db8 <mainSimpleSort+0x38c>
    2ac8:	ldrsw	x8, [sp, #12]
    2acc:	adrp	x9, 0 <BZ2_blockSort>
    2ad0:	add	x9, x9, #0x0
    2ad4:	ldr	w10, [x9, x8, lsl #2]
    2ad8:	str	w10, [sp, #20]
    2adc:	ldur	w10, [x29, #-32]
    2ae0:	ldr	w11, [sp, #20]
    2ae4:	add	w10, w10, w11
    2ae8:	str	w10, [sp, #28]
    2aec:	ldr	w8, [sp, #28]
    2af0:	ldur	w9, [x29, #-36]
    2af4:	cmp	w8, w9
    2af8:	b.le	2b00 <mainSimpleSort+0xd4>
    2afc:	b	2da8 <mainSimpleSort+0x37c>
    2b00:	ldur	x8, [x29, #-8]
    2b04:	ldrsw	x9, [sp, #28]
    2b08:	ldr	w10, [x8, x9, lsl #2]
    2b0c:	str	w10, [sp, #8]
    2b10:	ldr	w10, [sp, #28]
    2b14:	str	w10, [sp, #24]
    2b18:	ldur	x8, [x29, #-8]
    2b1c:	ldr	w9, [sp, #24]
    2b20:	ldr	w10, [sp, #20]
    2b24:	subs	w9, w9, w10
    2b28:	ldr	w9, [x8, w9, sxtw #2]
    2b2c:	ldr	w10, [sp, #40]
    2b30:	add	w0, w9, w10
    2b34:	ldr	w9, [sp, #8]
    2b38:	ldr	w10, [sp, #40]
    2b3c:	add	w1, w9, w10
    2b40:	ldur	x2, [x29, #-16]
    2b44:	ldur	x3, [x29, #-24]
    2b48:	ldur	w4, [x29, #-28]
    2b4c:	ldr	x5, [sp, #32]
    2b50:	bl	2e38 <mainGtU>
    2b54:	and	w9, w0, #0xff
    2b58:	cbz	w9, 2bb0 <mainSimpleSort+0x184>
    2b5c:	ldur	x8, [x29, #-8]
    2b60:	ldr	w9, [sp, #24]
    2b64:	ldr	w10, [sp, #20]
    2b68:	subs	w9, w9, w10
    2b6c:	ldr	w9, [x8, w9, sxtw #2]
    2b70:	ldur	x8, [x29, #-8]
    2b74:	ldrsw	x11, [sp, #24]
    2b78:	str	w9, [x8, x11, lsl #2]
    2b7c:	ldr	w9, [sp, #24]
    2b80:	ldr	w10, [sp, #20]
    2b84:	subs	w9, w9, w10
    2b88:	str	w9, [sp, #24]
    2b8c:	ldr	w9, [sp, #24]
    2b90:	ldur	w10, [x29, #-32]
    2b94:	ldr	w12, [sp, #20]
    2b98:	add	w10, w10, w12
    2b9c:	subs	w10, w10, #0x1
    2ba0:	cmp	w9, w10
    2ba4:	b.gt	2bac <mainSimpleSort+0x180>
    2ba8:	b	2bb0 <mainSimpleSort+0x184>
    2bac:	b	2b18 <mainSimpleSort+0xec>
    2bb0:	ldr	w8, [sp, #8]
    2bb4:	ldur	x9, [x29, #-8]
    2bb8:	ldrsw	x10, [sp, #24]
    2bbc:	str	w8, [x9, x10, lsl #2]
    2bc0:	ldr	w8, [sp, #28]
    2bc4:	add	w8, w8, #0x1
    2bc8:	str	w8, [sp, #28]
    2bcc:	ldr	w8, [sp, #28]
    2bd0:	ldur	w11, [x29, #-36]
    2bd4:	cmp	w8, w11
    2bd8:	b.le	2be0 <mainSimpleSort+0x1b4>
    2bdc:	b	2da8 <mainSimpleSort+0x37c>
    2be0:	ldur	x8, [x29, #-8]
    2be4:	ldrsw	x9, [sp, #28]
    2be8:	ldr	w10, [x8, x9, lsl #2]
    2bec:	str	w10, [sp, #8]
    2bf0:	ldr	w10, [sp, #28]
    2bf4:	str	w10, [sp, #24]
    2bf8:	ldur	x8, [x29, #-8]
    2bfc:	ldr	w9, [sp, #24]
    2c00:	ldr	w10, [sp, #20]
    2c04:	subs	w9, w9, w10
    2c08:	ldr	w9, [x8, w9, sxtw #2]
    2c0c:	ldr	w10, [sp, #40]
    2c10:	add	w0, w9, w10
    2c14:	ldr	w9, [sp, #8]
    2c18:	ldr	w10, [sp, #40]
    2c1c:	add	w1, w9, w10
    2c20:	ldur	x2, [x29, #-16]
    2c24:	ldur	x3, [x29, #-24]
    2c28:	ldur	w4, [x29, #-28]
    2c2c:	ldr	x5, [sp, #32]
    2c30:	bl	2e38 <mainGtU>
    2c34:	and	w9, w0, #0xff
    2c38:	cbz	w9, 2c90 <mainSimpleSort+0x264>
    2c3c:	ldur	x8, [x29, #-8]
    2c40:	ldr	w9, [sp, #24]
    2c44:	ldr	w10, [sp, #20]
    2c48:	subs	w9, w9, w10
    2c4c:	ldr	w9, [x8, w9, sxtw #2]
    2c50:	ldur	x8, [x29, #-8]
    2c54:	ldrsw	x11, [sp, #24]
    2c58:	str	w9, [x8, x11, lsl #2]
    2c5c:	ldr	w9, [sp, #24]
    2c60:	ldr	w10, [sp, #20]
    2c64:	subs	w9, w9, w10
    2c68:	str	w9, [sp, #24]
    2c6c:	ldr	w9, [sp, #24]
    2c70:	ldur	w10, [x29, #-32]
    2c74:	ldr	w12, [sp, #20]
    2c78:	add	w10, w10, w12
    2c7c:	subs	w10, w10, #0x1
    2c80:	cmp	w9, w10
    2c84:	b.gt	2c8c <mainSimpleSort+0x260>
    2c88:	b	2c90 <mainSimpleSort+0x264>
    2c8c:	b	2bf8 <mainSimpleSort+0x1cc>
    2c90:	ldr	w8, [sp, #8]
    2c94:	ldur	x9, [x29, #-8]
    2c98:	ldrsw	x10, [sp, #24]
    2c9c:	str	w8, [x9, x10, lsl #2]
    2ca0:	ldr	w8, [sp, #28]
    2ca4:	add	w8, w8, #0x1
    2ca8:	str	w8, [sp, #28]
    2cac:	ldr	w8, [sp, #28]
    2cb0:	ldur	w11, [x29, #-36]
    2cb4:	cmp	w8, w11
    2cb8:	b.le	2cc0 <mainSimpleSort+0x294>
    2cbc:	b	2da8 <mainSimpleSort+0x37c>
    2cc0:	ldur	x8, [x29, #-8]
    2cc4:	ldrsw	x9, [sp, #28]
    2cc8:	ldr	w10, [x8, x9, lsl #2]
    2ccc:	str	w10, [sp, #8]
    2cd0:	ldr	w10, [sp, #28]
    2cd4:	str	w10, [sp, #24]
    2cd8:	ldur	x8, [x29, #-8]
    2cdc:	ldr	w9, [sp, #24]
    2ce0:	ldr	w10, [sp, #20]
    2ce4:	subs	w9, w9, w10
    2ce8:	ldr	w9, [x8, w9, sxtw #2]
    2cec:	ldr	w10, [sp, #40]
    2cf0:	add	w0, w9, w10
    2cf4:	ldr	w9, [sp, #8]
    2cf8:	ldr	w10, [sp, #40]
    2cfc:	add	w1, w9, w10
    2d00:	ldur	x2, [x29, #-16]
    2d04:	ldur	x3, [x29, #-24]
    2d08:	ldur	w4, [x29, #-28]
    2d0c:	ldr	x5, [sp, #32]
    2d10:	bl	2e38 <mainGtU>
    2d14:	and	w9, w0, #0xff
    2d18:	cbz	w9, 2d70 <mainSimpleSort+0x344>
    2d1c:	ldur	x8, [x29, #-8]
    2d20:	ldr	w9, [sp, #24]
    2d24:	ldr	w10, [sp, #20]
    2d28:	subs	w9, w9, w10
    2d2c:	ldr	w9, [x8, w9, sxtw #2]
    2d30:	ldur	x8, [x29, #-8]
    2d34:	ldrsw	x11, [sp, #24]
    2d38:	str	w9, [x8, x11, lsl #2]
    2d3c:	ldr	w9, [sp, #24]
    2d40:	ldr	w10, [sp, #20]
    2d44:	subs	w9, w9, w10
    2d48:	str	w9, [sp, #24]
    2d4c:	ldr	w9, [sp, #24]
    2d50:	ldur	w10, [x29, #-32]
    2d54:	ldr	w12, [sp, #20]
    2d58:	add	w10, w10, w12
    2d5c:	subs	w10, w10, #0x1
    2d60:	cmp	w9, w10
    2d64:	b.gt	2d6c <mainSimpleSort+0x340>
    2d68:	b	2d70 <mainSimpleSort+0x344>
    2d6c:	b	2cd8 <mainSimpleSort+0x2ac>
    2d70:	ldr	w8, [sp, #8]
    2d74:	ldur	x9, [x29, #-8]
    2d78:	ldrsw	x10, [sp, #24]
    2d7c:	str	w8, [x9, x10, lsl #2]
    2d80:	ldr	w8, [sp, #28]
    2d84:	add	w8, w8, #0x1
    2d88:	str	w8, [sp, #28]
    2d8c:	ldr	x9, [sp, #32]
    2d90:	ldr	w8, [x9]
    2d94:	cmp	w8, #0x0
    2d98:	cset	w8, ge  // ge = tcont
    2d9c:	tbnz	w8, #0, 2da4 <mainSimpleSort+0x378>
    2da0:	b	2db8 <mainSimpleSort+0x38c>
    2da4:	b	2aec <mainSimpleSort+0xc0>
    2da8:	ldr	w8, [sp, #12]
    2dac:	subs	w8, w8, #0x1
    2db0:	str	w8, [sp, #12]
    2db4:	b	2ab8 <mainSimpleSort+0x8c>
    2db8:	ldp	x29, x30, [sp, #80]
    2dbc:	add	sp, sp, #0x60
    2dc0:	ret

0000000000002dc4 <mmed3>:
    2dc4:	sub	sp, sp, #0x10
    2dc8:	strb	w0, [sp, #15]
    2dcc:	strb	w1, [sp, #14]
    2dd0:	strb	w2, [sp, #13]
    2dd4:	ldrb	w8, [sp, #15]
    2dd8:	ldrb	w9, [sp, #14]
    2ddc:	cmp	w8, w9
    2de0:	b.le	2dfc <mmed3+0x38>
    2de4:	ldrb	w8, [sp, #15]
    2de8:	strb	w8, [sp, #12]
    2dec:	ldrb	w8, [sp, #14]
    2df0:	strb	w8, [sp, #15]
    2df4:	ldrb	w8, [sp, #12]
    2df8:	strb	w8, [sp, #14]
    2dfc:	ldrb	w8, [sp, #14]
    2e00:	ldrb	w9, [sp, #13]
    2e04:	cmp	w8, w9
    2e08:	b.le	2e2c <mmed3+0x68>
    2e0c:	ldrb	w8, [sp, #13]
    2e10:	strb	w8, [sp, #14]
    2e14:	ldrb	w8, [sp, #15]
    2e18:	ldrb	w9, [sp, #14]
    2e1c:	cmp	w8, w9
    2e20:	b.le	2e2c <mmed3+0x68>
    2e24:	ldrb	w8, [sp, #15]
    2e28:	strb	w8, [sp, #14]
    2e2c:	ldrb	w0, [sp, #14]
    2e30:	add	sp, sp, #0x10
    2e34:	ret

0000000000002e38 <mainGtU>:
    2e38:	sub	sp, sp, #0x40
    2e3c:	str	w0, [sp, #56]
    2e40:	str	w1, [sp, #52]
    2e44:	str	x2, [sp, #40]
    2e48:	str	x3, [sp, #32]
    2e4c:	str	w4, [sp, #28]
    2e50:	str	x5, [sp, #16]
    2e54:	ldr	x8, [sp, #40]
    2e58:	ldr	w9, [sp, #56]
    2e5c:	mov	w10, w9
    2e60:	add	x8, x8, x10
    2e64:	ldrb	w9, [x8]
    2e68:	strb	w9, [sp, #11]
    2e6c:	ldr	x8, [sp, #40]
    2e70:	ldr	w9, [sp, #52]
    2e74:	mov	w10, w9
    2e78:	add	x8, x8, x10
    2e7c:	ldrb	w9, [x8]
    2e80:	strb	w9, [sp, #10]
    2e84:	ldrb	w9, [sp, #11]
    2e88:	ldrb	w11, [sp, #10]
    2e8c:	cmp	w9, w11
    2e90:	b.eq	2eb0 <mainGtU+0x78>  // b.none
    2e94:	ldrb	w8, [sp, #11]
    2e98:	ldrb	w9, [sp, #10]
    2e9c:	cmp	w8, w9
    2ea0:	cset	w8, gt
    2ea4:	and	w8, w8, #0x1
    2ea8:	strb	w8, [sp, #63]
    2eac:	b	3b24 <mainGtU+0xcec>
    2eb0:	ldr	w8, [sp, #56]
    2eb4:	add	w8, w8, #0x1
    2eb8:	str	w8, [sp, #56]
    2ebc:	ldr	w8, [sp, #52]
    2ec0:	add	w8, w8, #0x1
    2ec4:	str	w8, [sp, #52]
    2ec8:	ldr	x9, [sp, #40]
    2ecc:	ldr	w8, [sp, #56]
    2ed0:	mov	w10, w8
    2ed4:	add	x9, x9, x10
    2ed8:	ldrb	w8, [x9]
    2edc:	strb	w8, [sp, #11]
    2ee0:	ldr	x9, [sp, #40]
    2ee4:	ldr	w8, [sp, #52]
    2ee8:	mov	w10, w8
    2eec:	add	x9, x9, x10
    2ef0:	ldrb	w8, [x9]
    2ef4:	strb	w8, [sp, #10]
    2ef8:	ldrb	w8, [sp, #11]
    2efc:	ldrb	w11, [sp, #10]
    2f00:	cmp	w8, w11
    2f04:	b.eq	2f24 <mainGtU+0xec>  // b.none
    2f08:	ldrb	w8, [sp, #11]
    2f0c:	ldrb	w9, [sp, #10]
    2f10:	cmp	w8, w9
    2f14:	cset	w8, gt
    2f18:	and	w8, w8, #0x1
    2f1c:	strb	w8, [sp, #63]
    2f20:	b	3b24 <mainGtU+0xcec>
    2f24:	ldr	w8, [sp, #56]
    2f28:	add	w8, w8, #0x1
    2f2c:	str	w8, [sp, #56]
    2f30:	ldr	w8, [sp, #52]
    2f34:	add	w8, w8, #0x1
    2f38:	str	w8, [sp, #52]
    2f3c:	ldr	x9, [sp, #40]
    2f40:	ldr	w8, [sp, #56]
    2f44:	mov	w10, w8
    2f48:	add	x9, x9, x10
    2f4c:	ldrb	w8, [x9]
    2f50:	strb	w8, [sp, #11]
    2f54:	ldr	x9, [sp, #40]
    2f58:	ldr	w8, [sp, #52]
    2f5c:	mov	w10, w8
    2f60:	add	x9, x9, x10
    2f64:	ldrb	w8, [x9]
    2f68:	strb	w8, [sp, #10]
    2f6c:	ldrb	w8, [sp, #11]
    2f70:	ldrb	w11, [sp, #10]
    2f74:	cmp	w8, w11
    2f78:	b.eq	2f98 <mainGtU+0x160>  // b.none
    2f7c:	ldrb	w8, [sp, #11]
    2f80:	ldrb	w9, [sp, #10]
    2f84:	cmp	w8, w9
    2f88:	cset	w8, gt
    2f8c:	and	w8, w8, #0x1
    2f90:	strb	w8, [sp, #63]
    2f94:	b	3b24 <mainGtU+0xcec>
    2f98:	ldr	w8, [sp, #56]
    2f9c:	add	w8, w8, #0x1
    2fa0:	str	w8, [sp, #56]
    2fa4:	ldr	w8, [sp, #52]
    2fa8:	add	w8, w8, #0x1
    2fac:	str	w8, [sp, #52]
    2fb0:	ldr	x9, [sp, #40]
    2fb4:	ldr	w8, [sp, #56]
    2fb8:	mov	w10, w8
    2fbc:	add	x9, x9, x10
    2fc0:	ldrb	w8, [x9]
    2fc4:	strb	w8, [sp, #11]
    2fc8:	ldr	x9, [sp, #40]
    2fcc:	ldr	w8, [sp, #52]
    2fd0:	mov	w10, w8
    2fd4:	add	x9, x9, x10
    2fd8:	ldrb	w8, [x9]
    2fdc:	strb	w8, [sp, #10]
    2fe0:	ldrb	w8, [sp, #11]
    2fe4:	ldrb	w11, [sp, #10]
    2fe8:	cmp	w8, w11
    2fec:	b.eq	300c <mainGtU+0x1d4>  // b.none
    2ff0:	ldrb	w8, [sp, #11]
    2ff4:	ldrb	w9, [sp, #10]
    2ff8:	cmp	w8, w9
    2ffc:	cset	w8, gt
    3000:	and	w8, w8, #0x1
    3004:	strb	w8, [sp, #63]
    3008:	b	3b24 <mainGtU+0xcec>
    300c:	ldr	w8, [sp, #56]
    3010:	add	w8, w8, #0x1
    3014:	str	w8, [sp, #56]
    3018:	ldr	w8, [sp, #52]
    301c:	add	w8, w8, #0x1
    3020:	str	w8, [sp, #52]
    3024:	ldr	x9, [sp, #40]
    3028:	ldr	w8, [sp, #56]
    302c:	mov	w10, w8
    3030:	add	x9, x9, x10
    3034:	ldrb	w8, [x9]
    3038:	strb	w8, [sp, #11]
    303c:	ldr	x9, [sp, #40]
    3040:	ldr	w8, [sp, #52]
    3044:	mov	w10, w8
    3048:	add	x9, x9, x10
    304c:	ldrb	w8, [x9]
    3050:	strb	w8, [sp, #10]
    3054:	ldrb	w8, [sp, #11]
    3058:	ldrb	w11, [sp, #10]
    305c:	cmp	w8, w11
    3060:	b.eq	3080 <mainGtU+0x248>  // b.none
    3064:	ldrb	w8, [sp, #11]
    3068:	ldrb	w9, [sp, #10]
    306c:	cmp	w8, w9
    3070:	cset	w8, gt
    3074:	and	w8, w8, #0x1
    3078:	strb	w8, [sp, #63]
    307c:	b	3b24 <mainGtU+0xcec>
    3080:	ldr	w8, [sp, #56]
    3084:	add	w8, w8, #0x1
    3088:	str	w8, [sp, #56]
    308c:	ldr	w8, [sp, #52]
    3090:	add	w8, w8, #0x1
    3094:	str	w8, [sp, #52]
    3098:	ldr	x9, [sp, #40]
    309c:	ldr	w8, [sp, #56]
    30a0:	mov	w10, w8
    30a4:	add	x9, x9, x10
    30a8:	ldrb	w8, [x9]
    30ac:	strb	w8, [sp, #11]
    30b0:	ldr	x9, [sp, #40]
    30b4:	ldr	w8, [sp, #52]
    30b8:	mov	w10, w8
    30bc:	add	x9, x9, x10
    30c0:	ldrb	w8, [x9]
    30c4:	strb	w8, [sp, #10]
    30c8:	ldrb	w8, [sp, #11]
    30cc:	ldrb	w11, [sp, #10]
    30d0:	cmp	w8, w11
    30d4:	b.eq	30f4 <mainGtU+0x2bc>  // b.none
    30d8:	ldrb	w8, [sp, #11]
    30dc:	ldrb	w9, [sp, #10]
    30e0:	cmp	w8, w9
    30e4:	cset	w8, gt
    30e8:	and	w8, w8, #0x1
    30ec:	strb	w8, [sp, #63]
    30f0:	b	3b24 <mainGtU+0xcec>
    30f4:	ldr	w8, [sp, #56]
    30f8:	add	w8, w8, #0x1
    30fc:	str	w8, [sp, #56]
    3100:	ldr	w8, [sp, #52]
    3104:	add	w8, w8, #0x1
    3108:	str	w8, [sp, #52]
    310c:	ldr	x9, [sp, #40]
    3110:	ldr	w8, [sp, #56]
    3114:	mov	w10, w8
    3118:	add	x9, x9, x10
    311c:	ldrb	w8, [x9]
    3120:	strb	w8, [sp, #11]
    3124:	ldr	x9, [sp, #40]
    3128:	ldr	w8, [sp, #52]
    312c:	mov	w10, w8
    3130:	add	x9, x9, x10
    3134:	ldrb	w8, [x9]
    3138:	strb	w8, [sp, #10]
    313c:	ldrb	w8, [sp, #11]
    3140:	ldrb	w11, [sp, #10]
    3144:	cmp	w8, w11
    3148:	b.eq	3168 <mainGtU+0x330>  // b.none
    314c:	ldrb	w8, [sp, #11]
    3150:	ldrb	w9, [sp, #10]
    3154:	cmp	w8, w9
    3158:	cset	w8, gt
    315c:	and	w8, w8, #0x1
    3160:	strb	w8, [sp, #63]
    3164:	b	3b24 <mainGtU+0xcec>
    3168:	ldr	w8, [sp, #56]
    316c:	add	w8, w8, #0x1
    3170:	str	w8, [sp, #56]
    3174:	ldr	w8, [sp, #52]
    3178:	add	w8, w8, #0x1
    317c:	str	w8, [sp, #52]
    3180:	ldr	x9, [sp, #40]
    3184:	ldr	w8, [sp, #56]
    3188:	mov	w10, w8
    318c:	add	x9, x9, x10
    3190:	ldrb	w8, [x9]
    3194:	strb	w8, [sp, #11]
    3198:	ldr	x9, [sp, #40]
    319c:	ldr	w8, [sp, #52]
    31a0:	mov	w10, w8
    31a4:	add	x9, x9, x10
    31a8:	ldrb	w8, [x9]
    31ac:	strb	w8, [sp, #10]
    31b0:	ldrb	w8, [sp, #11]
    31b4:	ldrb	w11, [sp, #10]
    31b8:	cmp	w8, w11
    31bc:	b.eq	31dc <mainGtU+0x3a4>  // b.none
    31c0:	ldrb	w8, [sp, #11]
    31c4:	ldrb	w9, [sp, #10]
    31c8:	cmp	w8, w9
    31cc:	cset	w8, gt
    31d0:	and	w8, w8, #0x1
    31d4:	strb	w8, [sp, #63]
    31d8:	b	3b24 <mainGtU+0xcec>
    31dc:	ldr	w8, [sp, #56]
    31e0:	add	w8, w8, #0x1
    31e4:	str	w8, [sp, #56]
    31e8:	ldr	w8, [sp, #52]
    31ec:	add	w8, w8, #0x1
    31f0:	str	w8, [sp, #52]
    31f4:	ldr	x9, [sp, #40]
    31f8:	ldr	w8, [sp, #56]
    31fc:	mov	w10, w8
    3200:	add	x9, x9, x10
    3204:	ldrb	w8, [x9]
    3208:	strb	w8, [sp, #11]
    320c:	ldr	x9, [sp, #40]
    3210:	ldr	w8, [sp, #52]
    3214:	mov	w10, w8
    3218:	add	x9, x9, x10
    321c:	ldrb	w8, [x9]
    3220:	strb	w8, [sp, #10]
    3224:	ldrb	w8, [sp, #11]
    3228:	ldrb	w11, [sp, #10]
    322c:	cmp	w8, w11
    3230:	b.eq	3250 <mainGtU+0x418>  // b.none
    3234:	ldrb	w8, [sp, #11]
    3238:	ldrb	w9, [sp, #10]
    323c:	cmp	w8, w9
    3240:	cset	w8, gt
    3244:	and	w8, w8, #0x1
    3248:	strb	w8, [sp, #63]
    324c:	b	3b24 <mainGtU+0xcec>
    3250:	ldr	w8, [sp, #56]
    3254:	add	w8, w8, #0x1
    3258:	str	w8, [sp, #56]
    325c:	ldr	w8, [sp, #52]
    3260:	add	w8, w8, #0x1
    3264:	str	w8, [sp, #52]
    3268:	ldr	x9, [sp, #40]
    326c:	ldr	w8, [sp, #56]
    3270:	mov	w10, w8
    3274:	add	x9, x9, x10
    3278:	ldrb	w8, [x9]
    327c:	strb	w8, [sp, #11]
    3280:	ldr	x9, [sp, #40]
    3284:	ldr	w8, [sp, #52]
    3288:	mov	w10, w8
    328c:	add	x9, x9, x10
    3290:	ldrb	w8, [x9]
    3294:	strb	w8, [sp, #10]
    3298:	ldrb	w8, [sp, #11]
    329c:	ldrb	w11, [sp, #10]
    32a0:	cmp	w8, w11
    32a4:	b.eq	32c4 <mainGtU+0x48c>  // b.none
    32a8:	ldrb	w8, [sp, #11]
    32ac:	ldrb	w9, [sp, #10]
    32b0:	cmp	w8, w9
    32b4:	cset	w8, gt
    32b8:	and	w8, w8, #0x1
    32bc:	strb	w8, [sp, #63]
    32c0:	b	3b24 <mainGtU+0xcec>
    32c4:	ldr	w8, [sp, #56]
    32c8:	add	w8, w8, #0x1
    32cc:	str	w8, [sp, #56]
    32d0:	ldr	w8, [sp, #52]
    32d4:	add	w8, w8, #0x1
    32d8:	str	w8, [sp, #52]
    32dc:	ldr	x9, [sp, #40]
    32e0:	ldr	w8, [sp, #56]
    32e4:	mov	w10, w8
    32e8:	add	x9, x9, x10
    32ec:	ldrb	w8, [x9]
    32f0:	strb	w8, [sp, #11]
    32f4:	ldr	x9, [sp, #40]
    32f8:	ldr	w8, [sp, #52]
    32fc:	mov	w10, w8
    3300:	add	x9, x9, x10
    3304:	ldrb	w8, [x9]
    3308:	strb	w8, [sp, #10]
    330c:	ldrb	w8, [sp, #11]
    3310:	ldrb	w11, [sp, #10]
    3314:	cmp	w8, w11
    3318:	b.eq	3338 <mainGtU+0x500>  // b.none
    331c:	ldrb	w8, [sp, #11]
    3320:	ldrb	w9, [sp, #10]
    3324:	cmp	w8, w9
    3328:	cset	w8, gt
    332c:	and	w8, w8, #0x1
    3330:	strb	w8, [sp, #63]
    3334:	b	3b24 <mainGtU+0xcec>
    3338:	ldr	w8, [sp, #56]
    333c:	add	w8, w8, #0x1
    3340:	str	w8, [sp, #56]
    3344:	ldr	w8, [sp, #52]
    3348:	add	w8, w8, #0x1
    334c:	str	w8, [sp, #52]
    3350:	ldr	x9, [sp, #40]
    3354:	ldr	w8, [sp, #56]
    3358:	mov	w10, w8
    335c:	add	x9, x9, x10
    3360:	ldrb	w8, [x9]
    3364:	strb	w8, [sp, #11]
    3368:	ldr	x9, [sp, #40]
    336c:	ldr	w8, [sp, #52]
    3370:	mov	w10, w8
    3374:	add	x9, x9, x10
    3378:	ldrb	w8, [x9]
    337c:	strb	w8, [sp, #10]
    3380:	ldrb	w8, [sp, #11]
    3384:	ldrb	w11, [sp, #10]
    3388:	cmp	w8, w11
    338c:	b.eq	33ac <mainGtU+0x574>  // b.none
    3390:	ldrb	w8, [sp, #11]
    3394:	ldrb	w9, [sp, #10]
    3398:	cmp	w8, w9
    339c:	cset	w8, gt
    33a0:	and	w8, w8, #0x1
    33a4:	strb	w8, [sp, #63]
    33a8:	b	3b24 <mainGtU+0xcec>
    33ac:	ldr	w8, [sp, #56]
    33b0:	add	w8, w8, #0x1
    33b4:	str	w8, [sp, #56]
    33b8:	ldr	w8, [sp, #52]
    33bc:	add	w8, w8, #0x1
    33c0:	str	w8, [sp, #52]
    33c4:	ldr	w8, [sp, #28]
    33c8:	add	w8, w8, #0x8
    33cc:	str	w8, [sp, #12]
    33d0:	ldr	x8, [sp, #40]
    33d4:	ldr	w9, [sp, #56]
    33d8:	mov	w10, w9
    33dc:	add	x8, x8, x10
    33e0:	ldrb	w9, [x8]
    33e4:	strb	w9, [sp, #11]
    33e8:	ldr	x8, [sp, #40]
    33ec:	ldr	w9, [sp, #52]
    33f0:	mov	w10, w9
    33f4:	add	x8, x8, x10
    33f8:	ldrb	w9, [x8]
    33fc:	strb	w9, [sp, #10]
    3400:	ldrb	w9, [sp, #11]
    3404:	ldrb	w11, [sp, #10]
    3408:	cmp	w9, w11
    340c:	b.eq	342c <mainGtU+0x5f4>  // b.none
    3410:	ldrb	w8, [sp, #11]
    3414:	ldrb	w9, [sp, #10]
    3418:	cmp	w8, w9
    341c:	cset	w8, gt
    3420:	and	w8, w8, #0x1
    3424:	strb	w8, [sp, #63]
    3428:	b	3b24 <mainGtU+0xcec>
    342c:	ldr	x8, [sp, #32]
    3430:	ldr	w9, [sp, #56]
    3434:	mov	w10, w9
    3438:	mov	x11, #0x2                   	// #2
    343c:	mul	x10, x11, x10
    3440:	add	x8, x8, x10
    3444:	ldrh	w9, [x8]
    3448:	strh	w9, [sp, #8]
    344c:	ldr	x8, [sp, #32]
    3450:	ldr	w9, [sp, #52]
    3454:	mov	w10, w9
    3458:	mul	x10, x11, x10
    345c:	add	x8, x8, x10
    3460:	ldrh	w9, [x8]
    3464:	strh	w9, [sp, #6]
    3468:	ldrh	w9, [sp, #8]
    346c:	ldrh	w12, [sp, #6]
    3470:	cmp	w9, w12
    3474:	b.eq	3494 <mainGtU+0x65c>  // b.none
    3478:	ldrh	w8, [sp, #8]
    347c:	ldrh	w9, [sp, #6]
    3480:	cmp	w8, w9
    3484:	cset	w8, gt
    3488:	and	w8, w8, #0x1
    348c:	strb	w8, [sp, #63]
    3490:	b	3b24 <mainGtU+0xcec>
    3494:	ldr	w8, [sp, #56]
    3498:	add	w8, w8, #0x1
    349c:	str	w8, [sp, #56]
    34a0:	ldr	w8, [sp, #52]
    34a4:	add	w8, w8, #0x1
    34a8:	str	w8, [sp, #52]
    34ac:	ldr	x9, [sp, #40]
    34b0:	ldr	w8, [sp, #56]
    34b4:	mov	w10, w8
    34b8:	add	x9, x9, x10
    34bc:	ldrb	w8, [x9]
    34c0:	strb	w8, [sp, #11]
    34c4:	ldr	x9, [sp, #40]
    34c8:	ldr	w8, [sp, #52]
    34cc:	mov	w10, w8
    34d0:	add	x9, x9, x10
    34d4:	ldrb	w8, [x9]
    34d8:	strb	w8, [sp, #10]
    34dc:	ldrb	w8, [sp, #11]
    34e0:	ldrb	w11, [sp, #10]
    34e4:	cmp	w8, w11
    34e8:	b.eq	3508 <mainGtU+0x6d0>  // b.none
    34ec:	ldrb	w8, [sp, #11]
    34f0:	ldrb	w9, [sp, #10]
    34f4:	cmp	w8, w9
    34f8:	cset	w8, gt
    34fc:	and	w8, w8, #0x1
    3500:	strb	w8, [sp, #63]
    3504:	b	3b24 <mainGtU+0xcec>
    3508:	ldr	x8, [sp, #32]
    350c:	ldr	w9, [sp, #56]
    3510:	mov	w10, w9
    3514:	mov	x11, #0x2                   	// #2
    3518:	mul	x10, x11, x10
    351c:	add	x8, x8, x10
    3520:	ldrh	w9, [x8]
    3524:	strh	w9, [sp, #8]
    3528:	ldr	x8, [sp, #32]
    352c:	ldr	w9, [sp, #52]
    3530:	mov	w10, w9
    3534:	mul	x10, x11, x10
    3538:	add	x8, x8, x10
    353c:	ldrh	w9, [x8]
    3540:	strh	w9, [sp, #6]
    3544:	ldrh	w9, [sp, #8]
    3548:	ldrh	w12, [sp, #6]
    354c:	cmp	w9, w12
    3550:	b.eq	3570 <mainGtU+0x738>  // b.none
    3554:	ldrh	w8, [sp, #8]
    3558:	ldrh	w9, [sp, #6]
    355c:	cmp	w8, w9
    3560:	cset	w8, gt
    3564:	and	w8, w8, #0x1
    3568:	strb	w8, [sp, #63]
    356c:	b	3b24 <mainGtU+0xcec>
    3570:	ldr	w8, [sp, #56]
    3574:	add	w8, w8, #0x1
    3578:	str	w8, [sp, #56]
    357c:	ldr	w8, [sp, #52]
    3580:	add	w8, w8, #0x1
    3584:	str	w8, [sp, #52]
    3588:	ldr	x9, [sp, #40]
    358c:	ldr	w8, [sp, #56]
    3590:	mov	w10, w8
    3594:	add	x9, x9, x10
    3598:	ldrb	w8, [x9]
    359c:	strb	w8, [sp, #11]
    35a0:	ldr	x9, [sp, #40]
    35a4:	ldr	w8, [sp, #52]
    35a8:	mov	w10, w8
    35ac:	add	x9, x9, x10
    35b0:	ldrb	w8, [x9]
    35b4:	strb	w8, [sp, #10]
    35b8:	ldrb	w8, [sp, #11]
    35bc:	ldrb	w11, [sp, #10]
    35c0:	cmp	w8, w11
    35c4:	b.eq	35e4 <mainGtU+0x7ac>  // b.none
    35c8:	ldrb	w8, [sp, #11]
    35cc:	ldrb	w9, [sp, #10]
    35d0:	cmp	w8, w9
    35d4:	cset	w8, gt
    35d8:	and	w8, w8, #0x1
    35dc:	strb	w8, [sp, #63]
    35e0:	b	3b24 <mainGtU+0xcec>
    35e4:	ldr	x8, [sp, #32]
    35e8:	ldr	w9, [sp, #56]
    35ec:	mov	w10, w9
    35f0:	mov	x11, #0x2                   	// #2
    35f4:	mul	x10, x11, x10
    35f8:	add	x8, x8, x10
    35fc:	ldrh	w9, [x8]
    3600:	strh	w9, [sp, #8]
    3604:	ldr	x8, [sp, #32]
    3608:	ldr	w9, [sp, #52]
    360c:	mov	w10, w9
    3610:	mul	x10, x11, x10
    3614:	add	x8, x8, x10
    3618:	ldrh	w9, [x8]
    361c:	strh	w9, [sp, #6]
    3620:	ldrh	w9, [sp, #8]
    3624:	ldrh	w12, [sp, #6]
    3628:	cmp	w9, w12
    362c:	b.eq	364c <mainGtU+0x814>  // b.none
    3630:	ldrh	w8, [sp, #8]
    3634:	ldrh	w9, [sp, #6]
    3638:	cmp	w8, w9
    363c:	cset	w8, gt
    3640:	and	w8, w8, #0x1
    3644:	strb	w8, [sp, #63]
    3648:	b	3b24 <mainGtU+0xcec>
    364c:	ldr	w8, [sp, #56]
    3650:	add	w8, w8, #0x1
    3654:	str	w8, [sp, #56]
    3658:	ldr	w8, [sp, #52]
    365c:	add	w8, w8, #0x1
    3660:	str	w8, [sp, #52]
    3664:	ldr	x9, [sp, #40]
    3668:	ldr	w8, [sp, #56]
    366c:	mov	w10, w8
    3670:	add	x9, x9, x10
    3674:	ldrb	w8, [x9]
    3678:	strb	w8, [sp, #11]
    367c:	ldr	x9, [sp, #40]
    3680:	ldr	w8, [sp, #52]
    3684:	mov	w10, w8
    3688:	add	x9, x9, x10
    368c:	ldrb	w8, [x9]
    3690:	strb	w8, [sp, #10]
    3694:	ldrb	w8, [sp, #11]
    3698:	ldrb	w11, [sp, #10]
    369c:	cmp	w8, w11
    36a0:	b.eq	36c0 <mainGtU+0x888>  // b.none
    36a4:	ldrb	w8, [sp, #11]
    36a8:	ldrb	w9, [sp, #10]
    36ac:	cmp	w8, w9
    36b0:	cset	w8, gt
    36b4:	and	w8, w8, #0x1
    36b8:	strb	w8, [sp, #63]
    36bc:	b	3b24 <mainGtU+0xcec>
    36c0:	ldr	x8, [sp, #32]
    36c4:	ldr	w9, [sp, #56]
    36c8:	mov	w10, w9
    36cc:	mov	x11, #0x2                   	// #2
    36d0:	mul	x10, x11, x10
    36d4:	add	x8, x8, x10
    36d8:	ldrh	w9, [x8]
    36dc:	strh	w9, [sp, #8]
    36e0:	ldr	x8, [sp, #32]
    36e4:	ldr	w9, [sp, #52]
    36e8:	mov	w10, w9
    36ec:	mul	x10, x11, x10
    36f0:	add	x8, x8, x10
    36f4:	ldrh	w9, [x8]
    36f8:	strh	w9, [sp, #6]
    36fc:	ldrh	w9, [sp, #8]
    3700:	ldrh	w12, [sp, #6]
    3704:	cmp	w9, w12
    3708:	b.eq	3728 <mainGtU+0x8f0>  // b.none
    370c:	ldrh	w8, [sp, #8]
    3710:	ldrh	w9, [sp, #6]
    3714:	cmp	w8, w9
    3718:	cset	w8, gt
    371c:	and	w8, w8, #0x1
    3720:	strb	w8, [sp, #63]
    3724:	b	3b24 <mainGtU+0xcec>
    3728:	ldr	w8, [sp, #56]
    372c:	add	w8, w8, #0x1
    3730:	str	w8, [sp, #56]
    3734:	ldr	w8, [sp, #52]
    3738:	add	w8, w8, #0x1
    373c:	str	w8, [sp, #52]
    3740:	ldr	x9, [sp, #40]
    3744:	ldr	w8, [sp, #56]
    3748:	mov	w10, w8
    374c:	add	x9, x9, x10
    3750:	ldrb	w8, [x9]
    3754:	strb	w8, [sp, #11]
    3758:	ldr	x9, [sp, #40]
    375c:	ldr	w8, [sp, #52]
    3760:	mov	w10, w8
    3764:	add	x9, x9, x10
    3768:	ldrb	w8, [x9]
    376c:	strb	w8, [sp, #10]
    3770:	ldrb	w8, [sp, #11]
    3774:	ldrb	w11, [sp, #10]
    3778:	cmp	w8, w11
    377c:	b.eq	379c <mainGtU+0x964>  // b.none
    3780:	ldrb	w8, [sp, #11]
    3784:	ldrb	w9, [sp, #10]
    3788:	cmp	w8, w9
    378c:	cset	w8, gt
    3790:	and	w8, w8, #0x1
    3794:	strb	w8, [sp, #63]
    3798:	b	3b24 <mainGtU+0xcec>
    379c:	ldr	x8, [sp, #32]
    37a0:	ldr	w9, [sp, #56]
    37a4:	mov	w10, w9
    37a8:	mov	x11, #0x2                   	// #2
    37ac:	mul	x10, x11, x10
    37b0:	add	x8, x8, x10
    37b4:	ldrh	w9, [x8]
    37b8:	strh	w9, [sp, #8]
    37bc:	ldr	x8, [sp, #32]
    37c0:	ldr	w9, [sp, #52]
    37c4:	mov	w10, w9
    37c8:	mul	x10, x11, x10
    37cc:	add	x8, x8, x10
    37d0:	ldrh	w9, [x8]
    37d4:	strh	w9, [sp, #6]
    37d8:	ldrh	w9, [sp, #8]
    37dc:	ldrh	w12, [sp, #6]
    37e0:	cmp	w9, w12
    37e4:	b.eq	3804 <mainGtU+0x9cc>  // b.none
    37e8:	ldrh	w8, [sp, #8]
    37ec:	ldrh	w9, [sp, #6]
    37f0:	cmp	w8, w9
    37f4:	cset	w8, gt
    37f8:	and	w8, w8, #0x1
    37fc:	strb	w8, [sp, #63]
    3800:	b	3b24 <mainGtU+0xcec>
    3804:	ldr	w8, [sp, #56]
    3808:	add	w8, w8, #0x1
    380c:	str	w8, [sp, #56]
    3810:	ldr	w8, [sp, #52]
    3814:	add	w8, w8, #0x1
    3818:	str	w8, [sp, #52]
    381c:	ldr	x9, [sp, #40]
    3820:	ldr	w8, [sp, #56]
    3824:	mov	w10, w8
    3828:	add	x9, x9, x10
    382c:	ldrb	w8, [x9]
    3830:	strb	w8, [sp, #11]
    3834:	ldr	x9, [sp, #40]
    3838:	ldr	w8, [sp, #52]
    383c:	mov	w10, w8
    3840:	add	x9, x9, x10
    3844:	ldrb	w8, [x9]
    3848:	strb	w8, [sp, #10]
    384c:	ldrb	w8, [sp, #11]
    3850:	ldrb	w11, [sp, #10]
    3854:	cmp	w8, w11
    3858:	b.eq	3878 <mainGtU+0xa40>  // b.none
    385c:	ldrb	w8, [sp, #11]
    3860:	ldrb	w9, [sp, #10]
    3864:	cmp	w8, w9
    3868:	cset	w8, gt
    386c:	and	w8, w8, #0x1
    3870:	strb	w8, [sp, #63]
    3874:	b	3b24 <mainGtU+0xcec>
    3878:	ldr	x8, [sp, #32]
    387c:	ldr	w9, [sp, #56]
    3880:	mov	w10, w9
    3884:	mov	x11, #0x2                   	// #2
    3888:	mul	x10, x11, x10
    388c:	add	x8, x8, x10
    3890:	ldrh	w9, [x8]
    3894:	strh	w9, [sp, #8]
    3898:	ldr	x8, [sp, #32]
    389c:	ldr	w9, [sp, #52]
    38a0:	mov	w10, w9
    38a4:	mul	x10, x11, x10
    38a8:	add	x8, x8, x10
    38ac:	ldrh	w9, [x8]
    38b0:	strh	w9, [sp, #6]
    38b4:	ldrh	w9, [sp, #8]
    38b8:	ldrh	w12, [sp, #6]
    38bc:	cmp	w9, w12
    38c0:	b.eq	38e0 <mainGtU+0xaa8>  // b.none
    38c4:	ldrh	w8, [sp, #8]
    38c8:	ldrh	w9, [sp, #6]
    38cc:	cmp	w8, w9
    38d0:	cset	w8, gt
    38d4:	and	w8, w8, #0x1
    38d8:	strb	w8, [sp, #63]
    38dc:	b	3b24 <mainGtU+0xcec>
    38e0:	ldr	w8, [sp, #56]
    38e4:	add	w8, w8, #0x1
    38e8:	str	w8, [sp, #56]
    38ec:	ldr	w8, [sp, #52]
    38f0:	add	w8, w8, #0x1
    38f4:	str	w8, [sp, #52]
    38f8:	ldr	x9, [sp, #40]
    38fc:	ldr	w8, [sp, #56]
    3900:	mov	w10, w8
    3904:	add	x9, x9, x10
    3908:	ldrb	w8, [x9]
    390c:	strb	w8, [sp, #11]
    3910:	ldr	x9, [sp, #40]
    3914:	ldr	w8, [sp, #52]
    3918:	mov	w10, w8
    391c:	add	x9, x9, x10
    3920:	ldrb	w8, [x9]
    3924:	strb	w8, [sp, #10]
    3928:	ldrb	w8, [sp, #11]
    392c:	ldrb	w11, [sp, #10]
    3930:	cmp	w8, w11
    3934:	b.eq	3954 <mainGtU+0xb1c>  // b.none
    3938:	ldrb	w8, [sp, #11]
    393c:	ldrb	w9, [sp, #10]
    3940:	cmp	w8, w9
    3944:	cset	w8, gt
    3948:	and	w8, w8, #0x1
    394c:	strb	w8, [sp, #63]
    3950:	b	3b24 <mainGtU+0xcec>
    3954:	ldr	x8, [sp, #32]
    3958:	ldr	w9, [sp, #56]
    395c:	mov	w10, w9
    3960:	mov	x11, #0x2                   	// #2
    3964:	mul	x10, x11, x10
    3968:	add	x8, x8, x10
    396c:	ldrh	w9, [x8]
    3970:	strh	w9, [sp, #8]
    3974:	ldr	x8, [sp, #32]
    3978:	ldr	w9, [sp, #52]
    397c:	mov	w10, w9
    3980:	mul	x10, x11, x10
    3984:	add	x8, x8, x10
    3988:	ldrh	w9, [x8]
    398c:	strh	w9, [sp, #6]
    3990:	ldrh	w9, [sp, #8]
    3994:	ldrh	w12, [sp, #6]
    3998:	cmp	w9, w12
    399c:	b.eq	39bc <mainGtU+0xb84>  // b.none
    39a0:	ldrh	w8, [sp, #8]
    39a4:	ldrh	w9, [sp, #6]
    39a8:	cmp	w8, w9
    39ac:	cset	w8, gt
    39b0:	and	w8, w8, #0x1
    39b4:	strb	w8, [sp, #63]
    39b8:	b	3b24 <mainGtU+0xcec>
    39bc:	ldr	w8, [sp, #56]
    39c0:	add	w8, w8, #0x1
    39c4:	str	w8, [sp, #56]
    39c8:	ldr	w8, [sp, #52]
    39cc:	add	w8, w8, #0x1
    39d0:	str	w8, [sp, #52]
    39d4:	ldr	x9, [sp, #40]
    39d8:	ldr	w8, [sp, #56]
    39dc:	mov	w10, w8
    39e0:	add	x9, x9, x10
    39e4:	ldrb	w8, [x9]
    39e8:	strb	w8, [sp, #11]
    39ec:	ldr	x9, [sp, #40]
    39f0:	ldr	w8, [sp, #52]
    39f4:	mov	w10, w8
    39f8:	add	x9, x9, x10
    39fc:	ldrb	w8, [x9]
    3a00:	strb	w8, [sp, #10]
    3a04:	ldrb	w8, [sp, #11]
    3a08:	ldrb	w11, [sp, #10]
    3a0c:	cmp	w8, w11
    3a10:	b.eq	3a30 <mainGtU+0xbf8>  // b.none
    3a14:	ldrb	w8, [sp, #11]
    3a18:	ldrb	w9, [sp, #10]
    3a1c:	cmp	w8, w9
    3a20:	cset	w8, gt
    3a24:	and	w8, w8, #0x1
    3a28:	strb	w8, [sp, #63]
    3a2c:	b	3b24 <mainGtU+0xcec>
    3a30:	ldr	x8, [sp, #32]
    3a34:	ldr	w9, [sp, #56]
    3a38:	mov	w10, w9
    3a3c:	mov	x11, #0x2                   	// #2
    3a40:	mul	x10, x11, x10
    3a44:	add	x8, x8, x10
    3a48:	ldrh	w9, [x8]
    3a4c:	strh	w9, [sp, #8]
    3a50:	ldr	x8, [sp, #32]
    3a54:	ldr	w9, [sp, #52]
    3a58:	mov	w10, w9
    3a5c:	mul	x10, x11, x10
    3a60:	add	x8, x8, x10
    3a64:	ldrh	w9, [x8]
    3a68:	strh	w9, [sp, #6]
    3a6c:	ldrh	w9, [sp, #8]
    3a70:	ldrh	w12, [sp, #6]
    3a74:	cmp	w9, w12
    3a78:	b.eq	3a98 <mainGtU+0xc60>  // b.none
    3a7c:	ldrh	w8, [sp, #8]
    3a80:	ldrh	w9, [sp, #6]
    3a84:	cmp	w8, w9
    3a88:	cset	w8, gt
    3a8c:	and	w8, w8, #0x1
    3a90:	strb	w8, [sp, #63]
    3a94:	b	3b24 <mainGtU+0xcec>
    3a98:	ldr	w8, [sp, #56]
    3a9c:	add	w8, w8, #0x1
    3aa0:	str	w8, [sp, #56]
    3aa4:	ldr	w8, [sp, #52]
    3aa8:	add	w8, w8, #0x1
    3aac:	str	w8, [sp, #52]
    3ab0:	ldr	w8, [sp, #56]
    3ab4:	ldr	w9, [sp, #28]
    3ab8:	cmp	w8, w9
    3abc:	b.cc	3ad0 <mainGtU+0xc98>  // b.lo, b.ul, b.last
    3ac0:	ldr	w8, [sp, #28]
    3ac4:	ldr	w9, [sp, #56]
    3ac8:	subs	w8, w9, w8
    3acc:	str	w8, [sp, #56]
    3ad0:	ldr	w8, [sp, #52]
    3ad4:	ldr	w9, [sp, #28]
    3ad8:	cmp	w8, w9
    3adc:	b.cc	3af0 <mainGtU+0xcb8>  // b.lo, b.ul, b.last
    3ae0:	ldr	w8, [sp, #28]
    3ae4:	ldr	w9, [sp, #52]
    3ae8:	subs	w8, w9, w8
    3aec:	str	w8, [sp, #52]
    3af0:	ldr	w8, [sp, #12]
    3af4:	subs	w8, w8, #0x8
    3af8:	str	w8, [sp, #12]
    3afc:	ldr	x9, [sp, #16]
    3b00:	ldr	w8, [x9]
    3b04:	subs	w8, w8, #0x1
    3b08:	str	w8, [x9]
    3b0c:	ldr	w8, [sp, #12]
    3b10:	cmp	w8, #0x0
    3b14:	cset	w8, ge  // ge = tcont
    3b18:	tbnz	w8, #0, 33d0 <mainGtU+0x598>
    3b1c:	mov	w8, #0x0                   	// #0
    3b20:	strb	w8, [sp, #63]
    3b24:	ldrb	w0, [sp, #63]
    3b28:	add	sp, sp, #0x40
    3b2c:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x28, [sp, #16]
   8:	mov	x29, sp
   c:	sub	sp, sp, #0x1, lsl #12
  10:	sub	sp, sp, #0x4b0
  14:	sub	x8, x29, #0x35
  18:	stur	x0, [x29, #-8]
  1c:	stur	x1, [x29, #-16]
  20:	stur	w2, [x29, #-20]
  24:	stur	w3, [x29, #-24]
  28:	stur	wzr, [x29, #-44]
  2c:	str	x8, [sp, #24]
  30:	ldur	w8, [x29, #-44]
  34:	ldur	w9, [x29, #-20]
  38:	cmp	w8, w9
  3c:	b.ge	94 <BZ2_hbMakeCodeLengths+0x94>  // b.tcont
  40:	ldur	x8, [x29, #-16]
  44:	ldursw	x9, [x29, #-44]
  48:	ldr	w10, [x8, x9, lsl #2]
  4c:	cbnz	w10, 5c <BZ2_hbMakeCodeLengths+0x5c>
  50:	mov	w8, #0x1                   	// #1
  54:	str	w8, [sp, #20]
  58:	b	6c <BZ2_hbMakeCodeLengths+0x6c>
  5c:	ldur	x8, [x29, #-16]
  60:	ldursw	x9, [x29, #-44]
  64:	ldr	w10, [x8, x9, lsl #2]
  68:	str	w10, [sp, #20]
  6c:	ldr	w8, [sp, #20]
  70:	lsl	w8, w8, #8
  74:	ldur	w9, [x29, #-44]
  78:	add	w9, w9, #0x1
  7c:	add	x10, sp, #0x858
  80:	str	w8, [x10, w9, sxtw #2]
  84:	ldur	w8, [x29, #-44]
  88:	add	w8, w8, #0x1
  8c:	stur	w8, [x29, #-44]
  90:	b	30 <BZ2_hbMakeCodeLengths+0x30>
  94:	ldur	w8, [x29, #-20]
  98:	stur	w8, [x29, #-28]
  9c:	stur	wzr, [x29, #-32]
  a0:	str	wzr, [sp, #4200]
  a4:	str	wzr, [sp, #2136]
  a8:	mov	w8, #0xfffffffe            	// #-2
  ac:	str	w8, [sp, #72]
  b0:	mov	w8, #0x1                   	// #1
  b4:	stur	w8, [x29, #-44]
  b8:	ldur	w8, [x29, #-44]
  bc:	ldur	w9, [x29, #-20]
  c0:	cmp	w8, w9
  c4:	b.gt	18c <BZ2_hbMakeCodeLengths+0x18c>
  c8:	ldursw	x8, [x29, #-44]
  cc:	add	x9, sp, #0x48
  d0:	mov	w10, #0xffffffff            	// #-1
  d4:	str	w10, [x9, x8, lsl #2]
  d8:	ldur	w10, [x29, #-32]
  dc:	add	w10, w10, #0x1
  e0:	stur	w10, [x29, #-32]
  e4:	ldur	w10, [x29, #-44]
  e8:	ldursw	x8, [x29, #-32]
  ec:	add	x9, sp, #0x1, lsl #12
  f0:	add	x9, x9, #0x68
  f4:	str	w10, [x9, x8, lsl #2]
  f8:	ldur	w10, [x29, #-32]
  fc:	str	w10, [sp, #68]
 100:	ldrsw	x8, [sp, #68]
 104:	ldr	w10, [x9, x8, lsl #2]
 108:	str	w10, [sp, #64]
 10c:	ldrsw	x8, [sp, #64]
 110:	add	x9, sp, #0x858
 114:	ldr	w10, [x9, x8, lsl #2]
 118:	ldr	w11, [sp, #68]
 11c:	asr	w11, w11, #1
 120:	add	x8, sp, #0x1, lsl #12
 124:	add	x8, x8, #0x68
 128:	ldrsw	x8, [x8, w11, sxtw #2]
 12c:	ldr	w11, [x9, x8, lsl #2]
 130:	cmp	w10, w11
 134:	b.ge	168 <BZ2_hbMakeCodeLengths+0x168>  // b.tcont
 138:	ldr	w8, [sp, #68]
 13c:	mov	x9, #0x1                   	// #1
 140:	asr	w8, w8, #1
 144:	add	x10, sp, #0x1, lsl #12
 148:	add	x10, x10, #0x68
 14c:	ldr	w8, [x10, w8, sxtw #2]
 150:	ldrsw	x11, [sp, #68]
 154:	str	w8, [x10, x11, lsl #2]
 158:	ldr	w8, [sp, #68]
 15c:	asr	w8, w8, w9
 160:	str	w8, [sp, #68]
 164:	b	10c <BZ2_hbMakeCodeLengths+0x10c>
 168:	ldr	w8, [sp, #64]
 16c:	ldrsw	x9, [sp, #68]
 170:	add	x10, sp, #0x1, lsl #12
 174:	add	x10, x10, #0x68
 178:	str	w8, [x10, x9, lsl #2]
 17c:	ldur	w8, [x29, #-44]
 180:	add	w8, w8, #0x1
 184:	stur	w8, [x29, #-44]
 188:	b	b8 <BZ2_hbMakeCodeLengths+0xb8>
 18c:	ldur	w8, [x29, #-32]
 190:	cmp	w8, #0x104
 194:	b.lt	1a0 <BZ2_hbMakeCodeLengths+0x1a0>  // b.tstop
 198:	mov	w0, #0x7d1                 	// #2001
 19c:	bl	0 <BZ2_bz__AssertH__fail>
 1a0:	ldur	w8, [x29, #-32]
 1a4:	cmp	w8, #0x1
 1a8:	b.le	524 <BZ2_hbMakeCodeLengths+0x524>
 1ac:	add	x8, sp, #0x1, lsl #12
 1b0:	add	x8, x8, #0x68
 1b4:	ldr	w9, [sp, #4204]
 1b8:	stur	w9, [x29, #-36]
 1bc:	ldursw	x10, [x29, #-32]
 1c0:	ldr	w9, [x8, x10, lsl #2]
 1c4:	str	w9, [sp, #4204]
 1c8:	ldur	w9, [x29, #-32]
 1cc:	subs	w9, w9, #0x1
 1d0:	stur	w9, [x29, #-32]
 1d4:	mov	w9, #0x1                   	// #1
 1d8:	str	w9, [sp, #60]
 1dc:	ldrsw	x10, [sp, #60]
 1e0:	ldr	w9, [x8, x10, lsl #2]
 1e4:	str	w9, [sp, #52]
 1e8:	ldr	w8, [sp, #60]
 1ec:	lsl	w8, w8, #1
 1f0:	str	w8, [sp, #56]
 1f4:	ldr	w8, [sp, #56]
 1f8:	ldur	w9, [x29, #-32]
 1fc:	cmp	w8, w9
 200:	b.le	208 <BZ2_hbMakeCodeLengths+0x208>
 204:	b	2a4 <BZ2_hbMakeCodeLengths+0x2a4>
 208:	ldr	w8, [sp, #56]
 20c:	ldur	w9, [x29, #-32]
 210:	cmp	w8, w9
 214:	b.ge	254 <BZ2_hbMakeCodeLengths+0x254>  // b.tcont
 218:	ldr	w8, [sp, #56]
 21c:	add	w8, w8, #0x1
 220:	add	x9, sp, #0x1, lsl #12
 224:	add	x9, x9, #0x68
 228:	ldrsw	x10, [x9, w8, sxtw #2]
 22c:	add	x11, sp, #0x858
 230:	ldr	w8, [x11, x10, lsl #2]
 234:	ldrsw	x10, [sp, #56]
 238:	ldrsw	x9, [x9, x10, lsl #2]
 23c:	ldr	w12, [x11, x9, lsl #2]
 240:	cmp	w8, w12
 244:	b.ge	254 <BZ2_hbMakeCodeLengths+0x254>  // b.tcont
 248:	ldr	w8, [sp, #56]
 24c:	add	w8, w8, #0x1
 250:	str	w8, [sp, #56]
 254:	ldrsw	x8, [sp, #52]
 258:	add	x9, sp, #0x858
 25c:	ldr	w10, [x9, x8, lsl #2]
 260:	ldrsw	x8, [sp, #56]
 264:	add	x11, sp, #0x1, lsl #12
 268:	add	x11, x11, #0x68
 26c:	ldrsw	x8, [x11, x8, lsl #2]
 270:	ldr	w12, [x9, x8, lsl #2]
 274:	cmp	w10, w12
 278:	b.ge	280 <BZ2_hbMakeCodeLengths+0x280>  // b.tcont
 27c:	b	2a4 <BZ2_hbMakeCodeLengths+0x2a4>
 280:	ldrsw	x8, [sp, #56]
 284:	add	x9, sp, #0x1, lsl #12
 288:	add	x9, x9, #0x68
 28c:	ldr	w10, [x9, x8, lsl #2]
 290:	ldrsw	x8, [sp, #60]
 294:	str	w10, [x9, x8, lsl #2]
 298:	ldr	w10, [sp, #56]
 29c:	str	w10, [sp, #60]
 2a0:	b	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 2a4:	ldr	w8, [sp, #52]
 2a8:	ldrsw	x9, [sp, #60]
 2ac:	add	x10, sp, #0x1, lsl #12
 2b0:	add	x10, x10, #0x68
 2b4:	str	w8, [x10, x9, lsl #2]
 2b8:	ldr	w8, [sp, #4204]
 2bc:	stur	w8, [x29, #-40]
 2c0:	ldursw	x9, [x29, #-32]
 2c4:	ldr	w8, [x10, x9, lsl #2]
 2c8:	str	w8, [sp, #4204]
 2cc:	ldur	w8, [x29, #-32]
 2d0:	subs	w8, w8, #0x1
 2d4:	stur	w8, [x29, #-32]
 2d8:	mov	w8, #0x1                   	// #1
 2dc:	str	w8, [sp, #48]
 2e0:	ldrsw	x9, [sp, #48]
 2e4:	ldr	w8, [x10, x9, lsl #2]
 2e8:	str	w8, [sp, #40]
 2ec:	ldr	w8, [sp, #48]
 2f0:	lsl	w8, w8, #1
 2f4:	str	w8, [sp, #44]
 2f8:	ldr	w8, [sp, #44]
 2fc:	ldur	w9, [x29, #-32]
 300:	cmp	w8, w9
 304:	b.le	30c <BZ2_hbMakeCodeLengths+0x30c>
 308:	b	3a8 <BZ2_hbMakeCodeLengths+0x3a8>
 30c:	ldr	w8, [sp, #44]
 310:	ldur	w9, [x29, #-32]
 314:	cmp	w8, w9
 318:	b.ge	358 <BZ2_hbMakeCodeLengths+0x358>  // b.tcont
 31c:	ldr	w8, [sp, #44]
 320:	add	w8, w8, #0x1
 324:	add	x9, sp, #0x1, lsl #12
 328:	add	x9, x9, #0x68
 32c:	ldrsw	x10, [x9, w8, sxtw #2]
 330:	add	x11, sp, #0x858
 334:	ldr	w8, [x11, x10, lsl #2]
 338:	ldrsw	x10, [sp, #44]
 33c:	ldrsw	x9, [x9, x10, lsl #2]
 340:	ldr	w12, [x11, x9, lsl #2]
 344:	cmp	w8, w12
 348:	b.ge	358 <BZ2_hbMakeCodeLengths+0x358>  // b.tcont
 34c:	ldr	w8, [sp, #44]
 350:	add	w8, w8, #0x1
 354:	str	w8, [sp, #44]
 358:	ldrsw	x8, [sp, #40]
 35c:	add	x9, sp, #0x858
 360:	ldr	w10, [x9, x8, lsl #2]
 364:	ldrsw	x8, [sp, #44]
 368:	add	x11, sp, #0x1, lsl #12
 36c:	add	x11, x11, #0x68
 370:	ldrsw	x8, [x11, x8, lsl #2]
 374:	ldr	w12, [x9, x8, lsl #2]
 378:	cmp	w10, w12
 37c:	b.ge	384 <BZ2_hbMakeCodeLengths+0x384>  // b.tcont
 380:	b	3a8 <BZ2_hbMakeCodeLengths+0x3a8>
 384:	ldrsw	x8, [sp, #44]
 388:	add	x9, sp, #0x1, lsl #12
 38c:	add	x9, x9, #0x68
 390:	ldr	w10, [x9, x8, lsl #2]
 394:	ldrsw	x8, [sp, #48]
 398:	str	w10, [x9, x8, lsl #2]
 39c:	ldr	w10, [sp, #44]
 3a0:	str	w10, [sp, #48]
 3a4:	b	2ec <BZ2_hbMakeCodeLengths+0x2ec>
 3a8:	ldr	w8, [sp, #40]
 3ac:	ldrsw	x9, [sp, #48]
 3b0:	add	x10, sp, #0x1, lsl #12
 3b4:	add	x10, x10, #0x68
 3b8:	str	w8, [x10, x9, lsl #2]
 3bc:	ldur	w8, [x29, #-28]
 3c0:	add	w8, w8, #0x1
 3c4:	stur	w8, [x29, #-28]
 3c8:	ldur	w8, [x29, #-28]
 3cc:	ldursw	x9, [x29, #-40]
 3d0:	add	x10, sp, #0x48
 3d4:	str	w8, [x10, x9, lsl #2]
 3d8:	ldursw	x9, [x29, #-36]
 3dc:	str	w8, [x10, x9, lsl #2]
 3e0:	ldursw	x9, [x29, #-36]
 3e4:	add	x10, sp, #0x858
 3e8:	ldr	w8, [x10, x9, lsl #2]
 3ec:	and	w8, w8, #0xffffff00
 3f0:	ldursw	x9, [x29, #-40]
 3f4:	ldr	w11, [x10, x9, lsl #2]
 3f8:	and	w11, w11, #0xffffff00
 3fc:	add	w8, w8, w11
 400:	ldursw	x9, [x29, #-36]
 404:	ldr	w11, [x10, x9, lsl #2]
 408:	and	w11, w11, #0xff
 40c:	ldursw	x9, [x29, #-40]
 410:	ldr	w12, [x10, x9, lsl #2]
 414:	and	w12, w12, #0xff
 418:	cmp	w11, w12
 41c:	str	w8, [sp, #16]
 420:	b.le	43c <BZ2_hbMakeCodeLengths+0x43c>
 424:	ldursw	x8, [x29, #-36]
 428:	add	x9, sp, #0x858
 42c:	ldr	w10, [x9, x8, lsl #2]
 430:	and	w10, w10, #0xff
 434:	str	w10, [sp, #12]
 438:	b	450 <BZ2_hbMakeCodeLengths+0x450>
 43c:	ldursw	x8, [x29, #-40]
 440:	add	x9, sp, #0x858
 444:	ldr	w10, [x9, x8, lsl #2]
 448:	and	w10, w10, #0xff
 44c:	str	w10, [sp, #12]
 450:	ldr	w8, [sp, #12]
 454:	add	w8, w8, #0x1
 458:	ldr	w9, [sp, #16]
 45c:	orr	w8, w9, w8
 460:	ldursw	x10, [x29, #-28]
 464:	add	x11, sp, #0x858
 468:	str	w8, [x11, x10, lsl #2]
 46c:	ldursw	x10, [x29, #-28]
 470:	add	x11, sp, #0x48
 474:	mov	w8, #0xffffffff            	// #-1
 478:	str	w8, [x11, x10, lsl #2]
 47c:	ldur	w8, [x29, #-32]
 480:	add	w8, w8, #0x1
 484:	stur	w8, [x29, #-32]
 488:	ldur	w8, [x29, #-28]
 48c:	ldursw	x10, [x29, #-32]
 490:	add	x11, sp, #0x1, lsl #12
 494:	add	x11, x11, #0x68
 498:	str	w8, [x11, x10, lsl #2]
 49c:	ldur	w8, [x29, #-32]
 4a0:	str	w8, [sp, #36]
 4a4:	ldrsw	x10, [sp, #36]
 4a8:	ldr	w8, [x11, x10, lsl #2]
 4ac:	str	w8, [sp, #32]
 4b0:	ldrsw	x8, [sp, #32]
 4b4:	add	x9, sp, #0x858
 4b8:	ldr	w10, [x9, x8, lsl #2]
 4bc:	ldr	w11, [sp, #36]
 4c0:	asr	w11, w11, #1
 4c4:	add	x8, sp, #0x1, lsl #12
 4c8:	add	x8, x8, #0x68
 4cc:	ldrsw	x8, [x8, w11, sxtw #2]
 4d0:	ldr	w11, [x9, x8, lsl #2]
 4d4:	cmp	w10, w11
 4d8:	b.ge	50c <BZ2_hbMakeCodeLengths+0x50c>  // b.tcont
 4dc:	ldr	w8, [sp, #36]
 4e0:	mov	x9, #0x1                   	// #1
 4e4:	asr	w8, w8, #1
 4e8:	add	x10, sp, #0x1, lsl #12
 4ec:	add	x10, x10, #0x68
 4f0:	ldr	w8, [x10, w8, sxtw #2]
 4f4:	ldrsw	x11, [sp, #36]
 4f8:	str	w8, [x10, x11, lsl #2]
 4fc:	ldr	w8, [sp, #36]
 500:	asr	w8, w8, w9
 504:	str	w8, [sp, #36]
 508:	b	4b0 <BZ2_hbMakeCodeLengths+0x4b0>
 50c:	ldr	w8, [sp, #32]
 510:	ldrsw	x9, [sp, #36]
 514:	add	x10, sp, #0x1, lsl #12
 518:	add	x10, x10, #0x68
 51c:	str	w8, [x10, x9, lsl #2]
 520:	b	1a0 <BZ2_hbMakeCodeLengths+0x1a0>
 524:	ldur	w8, [x29, #-28]
 528:	cmp	w8, #0x204
 52c:	b.lt	538 <BZ2_hbMakeCodeLengths+0x538>  // b.tstop
 530:	mov	w0, #0x7d2                 	// #2002
 534:	bl	0 <BZ2_bz__AssertH__fail>
 538:	mov	w8, #0x0                   	// #0
 53c:	ldr	x9, [sp, #24]
 540:	strb	w8, [x9]
 544:	mov	w8, #0x1                   	// #1
 548:	stur	w8, [x29, #-44]
 54c:	ldur	w8, [x29, #-44]
 550:	ldur	w9, [x29, #-20]
 554:	cmp	w8, w9
 558:	b.gt	5ec <BZ2_hbMakeCodeLengths+0x5ec>
 55c:	stur	wzr, [x29, #-48]
 560:	ldur	w8, [x29, #-44]
 564:	stur	w8, [x29, #-52]
 568:	ldursw	x8, [x29, #-52]
 56c:	add	x9, sp, #0x48
 570:	ldr	w10, [x9, x8, lsl #2]
 574:	cmp	w10, #0x0
 578:	cset	w10, lt  // lt = tstop
 57c:	tbnz	w10, #0, 5a0 <BZ2_hbMakeCodeLengths+0x5a0>
 580:	ldursw	x8, [x29, #-52]
 584:	add	x9, sp, #0x48
 588:	ldr	w10, [x9, x8, lsl #2]
 58c:	stur	w10, [x29, #-52]
 590:	ldur	w10, [x29, #-48]
 594:	add	w10, w10, #0x1
 598:	stur	w10, [x29, #-48]
 59c:	b	568 <BZ2_hbMakeCodeLengths+0x568>
 5a0:	ldur	w8, [x29, #-48]
 5a4:	ldur	x9, [x29, #-8]
 5a8:	ldur	w10, [x29, #-44]
 5ac:	subs	w10, w10, #0x1
 5b0:	mov	w0, w10
 5b4:	sxtw	x11, w0
 5b8:	add	x9, x9, x11
 5bc:	strb	w8, [x9]
 5c0:	ldur	w8, [x29, #-48]
 5c4:	ldur	w10, [x29, #-24]
 5c8:	cmp	w8, w10
 5cc:	b.le	5dc <BZ2_hbMakeCodeLengths+0x5dc>
 5d0:	mov	w8, #0x1                   	// #1
 5d4:	ldr	x9, [sp, #24]
 5d8:	strb	w8, [x9]
 5dc:	ldur	w8, [x29, #-44]
 5e0:	add	w8, w8, #0x1
 5e4:	stur	w8, [x29, #-44]
 5e8:	b	54c <BZ2_hbMakeCodeLengths+0x54c>
 5ec:	ldr	x8, [sp, #24]
 5f0:	ldrb	w9, [x8]
 5f4:	cbnz	w9, 5fc <BZ2_hbMakeCodeLengths+0x5fc>
 5f8:	b	660 <BZ2_hbMakeCodeLengths+0x660>
 5fc:	mov	w8, #0x1                   	// #1
 600:	stur	w8, [x29, #-44]
 604:	ldur	w8, [x29, #-44]
 608:	ldur	w9, [x29, #-20]
 60c:	cmp	w8, w9
 610:	b.gt	65c <BZ2_hbMakeCodeLengths+0x65c>
 614:	ldursw	x8, [x29, #-44]
 618:	add	x9, sp, #0x858
 61c:	ldr	w10, [x9, x8, lsl #2]
 620:	asr	w10, w10, #8
 624:	stur	w10, [x29, #-48]
 628:	ldur	w10, [x29, #-48]
 62c:	mov	w11, #0x2                   	// #2
 630:	sdiv	w10, w10, w11
 634:	add	w10, w10, #0x1
 638:	stur	w10, [x29, #-48]
 63c:	ldur	w10, [x29, #-48]
 640:	lsl	w10, w10, #8
 644:	ldursw	x8, [x29, #-44]
 648:	str	w10, [x9, x8, lsl #2]
 64c:	ldur	w8, [x29, #-44]
 650:	add	w8, w8, #0x1
 654:	stur	w8, [x29, #-44]
 658:	b	604 <BZ2_hbMakeCodeLengths+0x604>
 65c:	b	94 <BZ2_hbMakeCodeLengths+0x94>
 660:	add	sp, sp, #0x1, lsl #12
 664:	add	sp, sp, #0x4b0
 668:	ldr	x28, [sp, #16]
 66c:	ldp	x29, x30, [sp], #32
 670:	ret

0000000000000674 <BZ2_hbAssignCodes>:
 674:	sub	sp, sp, #0x30
 678:	str	x0, [sp, #40]
 67c:	str	x1, [sp, #32]
 680:	str	w2, [sp, #28]
 684:	str	w3, [sp, #24]
 688:	str	w4, [sp, #20]
 68c:	str	wzr, [sp, #12]
 690:	ldr	w8, [sp, #28]
 694:	str	w8, [sp, #16]
 698:	ldr	w8, [sp, #16]
 69c:	ldr	w9, [sp, #24]
 6a0:	cmp	w8, w9
 6a4:	b.gt	71c <BZ2_hbAssignCodes+0xa8>
 6a8:	str	wzr, [sp, #8]
 6ac:	ldr	w8, [sp, #8]
 6b0:	ldr	w9, [sp, #20]
 6b4:	cmp	w8, w9
 6b8:	b.ge	700 <BZ2_hbAssignCodes+0x8c>  // b.tcont
 6bc:	ldr	x8, [sp, #32]
 6c0:	ldrsw	x9, [sp, #8]
 6c4:	ldrb	w10, [x8, x9]
 6c8:	ldr	w11, [sp, #16]
 6cc:	cmp	w10, w11
 6d0:	b.ne	6f0 <BZ2_hbAssignCodes+0x7c>  // b.any
 6d4:	ldr	w8, [sp, #12]
 6d8:	ldr	x9, [sp, #40]
 6dc:	ldrsw	x10, [sp, #8]
 6e0:	str	w8, [x9, x10, lsl #2]
 6e4:	ldr	w8, [sp, #12]
 6e8:	add	w8, w8, #0x1
 6ec:	str	w8, [sp, #12]
 6f0:	ldr	w8, [sp, #8]
 6f4:	add	w8, w8, #0x1
 6f8:	str	w8, [sp, #8]
 6fc:	b	6ac <BZ2_hbAssignCodes+0x38>
 700:	ldr	w8, [sp, #12]
 704:	lsl	w8, w8, #1
 708:	str	w8, [sp, #12]
 70c:	ldr	w8, [sp, #16]
 710:	add	w8, w8, #0x1
 714:	str	w8, [sp, #16]
 718:	b	698 <BZ2_hbAssignCodes+0x24>
 71c:	add	sp, sp, #0x30
 720:	ret

0000000000000724 <BZ2_hbCreateDecodeTables>:
 724:	sub	sp, sp, #0x40
 728:	str	x0, [sp, #56]
 72c:	str	x1, [sp, #48]
 730:	str	x2, [sp, #40]
 734:	str	x3, [sp, #32]
 738:	str	w4, [sp, #28]
 73c:	str	w5, [sp, #24]
 740:	str	w6, [sp, #20]
 744:	str	wzr, [sp, #16]
 748:	ldr	w8, [sp, #28]
 74c:	str	w8, [sp, #12]
 750:	ldr	w8, [sp, #12]
 754:	ldr	w9, [sp, #24]
 758:	cmp	w8, w9
 75c:	b.gt	7c8 <BZ2_hbCreateDecodeTables+0xa4>
 760:	str	wzr, [sp, #8]
 764:	ldr	w8, [sp, #8]
 768:	ldr	w9, [sp, #20]
 76c:	cmp	w8, w9
 770:	b.ge	7b8 <BZ2_hbCreateDecodeTables+0x94>  // b.tcont
 774:	ldr	x8, [sp, #32]
 778:	ldrsw	x9, [sp, #8]
 77c:	ldrb	w10, [x8, x9]
 780:	ldr	w11, [sp, #12]
 784:	cmp	w10, w11
 788:	b.ne	7a8 <BZ2_hbCreateDecodeTables+0x84>  // b.any
 78c:	ldr	w8, [sp, #8]
 790:	ldr	x9, [sp, #40]
 794:	ldrsw	x10, [sp, #16]
 798:	str	w8, [x9, x10, lsl #2]
 79c:	ldr	w8, [sp, #16]
 7a0:	add	w8, w8, #0x1
 7a4:	str	w8, [sp, #16]
 7a8:	ldr	w8, [sp, #8]
 7ac:	add	w8, w8, #0x1
 7b0:	str	w8, [sp, #8]
 7b4:	b	764 <BZ2_hbCreateDecodeTables+0x40>
 7b8:	ldr	w8, [sp, #12]
 7bc:	add	w8, w8, #0x1
 7c0:	str	w8, [sp, #12]
 7c4:	b	750 <BZ2_hbCreateDecodeTables+0x2c>
 7c8:	str	wzr, [sp, #12]
 7cc:	ldr	w8, [sp, #12]
 7d0:	cmp	w8, #0x17
 7d4:	b.ge	7f8 <BZ2_hbCreateDecodeTables+0xd4>  // b.tcont
 7d8:	ldr	x8, [sp, #48]
 7dc:	ldrsw	x9, [sp, #12]
 7e0:	mov	w10, wzr
 7e4:	str	w10, [x8, x9, lsl #2]
 7e8:	ldr	w8, [sp, #12]
 7ec:	add	w8, w8, #0x1
 7f0:	str	w8, [sp, #12]
 7f4:	b	7cc <BZ2_hbCreateDecodeTables+0xa8>
 7f8:	str	wzr, [sp, #12]
 7fc:	ldr	w8, [sp, #12]
 800:	ldr	w9, [sp, #20]
 804:	cmp	w8, w9
 808:	b.ge	850 <BZ2_hbCreateDecodeTables+0x12c>  // b.tcont
 80c:	ldr	x8, [sp, #48]
 810:	ldr	x9, [sp, #32]
 814:	ldrsw	x10, [sp, #12]
 818:	ldrb	w11, [x9, x10]
 81c:	add	w11, w11, #0x1
 820:	mov	w0, w11
 824:	sxtw	x9, w0
 828:	mov	x10, #0x4                   	// #4
 82c:	mul	x9, x10, x9
 830:	add	x8, x8, x9
 834:	ldr	w11, [x8]
 838:	add	w11, w11, #0x1
 83c:	str	w11, [x8]
 840:	ldr	w8, [sp, #12]
 844:	add	w8, w8, #0x1
 848:	str	w8, [sp, #12]
 84c:	b	7fc <BZ2_hbCreateDecodeTables+0xd8>
 850:	mov	w8, #0x1                   	// #1
 854:	str	w8, [sp, #12]
 858:	ldr	w8, [sp, #12]
 85c:	cmp	w8, #0x17
 860:	b.ge	8a4 <BZ2_hbCreateDecodeTables+0x180>  // b.tcont
 864:	ldr	x8, [sp, #48]
 868:	ldr	w9, [sp, #12]
 86c:	subs	w9, w9, #0x1
 870:	mov	x10, #0x4                   	// #4
 874:	ldr	w9, [x8, w9, sxtw #2]
 878:	ldr	x8, [sp, #48]
 87c:	ldrsw	x11, [sp, #12]
 880:	mul	x10, x10, x11
 884:	add	x8, x8, x10
 888:	ldr	w12, [x8]
 88c:	add	w9, w12, w9
 890:	str	w9, [x8]
 894:	ldr	w8, [sp, #12]
 898:	add	w8, w8, #0x1
 89c:	str	w8, [sp, #12]
 8a0:	b	858 <BZ2_hbCreateDecodeTables+0x134>
 8a4:	str	wzr, [sp, #12]
 8a8:	ldr	w8, [sp, #12]
 8ac:	cmp	w8, #0x17
 8b0:	b.ge	8d4 <BZ2_hbCreateDecodeTables+0x1b0>  // b.tcont
 8b4:	ldr	x8, [sp, #56]
 8b8:	ldrsw	x9, [sp, #12]
 8bc:	mov	w10, wzr
 8c0:	str	w10, [x8, x9, lsl #2]
 8c4:	ldr	w8, [sp, #12]
 8c8:	add	w8, w8, #0x1
 8cc:	str	w8, [sp, #12]
 8d0:	b	8a8 <BZ2_hbCreateDecodeTables+0x184>
 8d4:	str	wzr, [sp, #4]
 8d8:	ldr	w8, [sp, #28]
 8dc:	str	w8, [sp, #12]
 8e0:	ldr	w8, [sp, #12]
 8e4:	ldr	w9, [sp, #24]
 8e8:	cmp	w8, w9
 8ec:	b.gt	94c <BZ2_hbCreateDecodeTables+0x228>
 8f0:	ldr	x8, [sp, #48]
 8f4:	ldr	w9, [sp, #12]
 8f8:	add	w9, w9, #0x1
 8fc:	ldr	w9, [x8, w9, sxtw #2]
 900:	ldr	x8, [sp, #48]
 904:	ldrsw	x10, [sp, #12]
 908:	ldr	w11, [x8, x10, lsl #2]
 90c:	subs	w9, w9, w11
 910:	ldr	w11, [sp, #4]
 914:	add	w9, w11, w9
 918:	str	w9, [sp, #4]
 91c:	ldr	w9, [sp, #4]
 920:	subs	w9, w9, #0x1
 924:	ldr	x8, [sp, #56]
 928:	ldrsw	x10, [sp, #12]
 92c:	str	w9, [x8, x10, lsl #2]
 930:	ldr	w9, [sp, #4]
 934:	lsl	w9, w9, #1
 938:	str	w9, [sp, #4]
 93c:	ldr	w8, [sp, #12]
 940:	add	w8, w8, #0x1
 944:	str	w8, [sp, #12]
 948:	b	8e0 <BZ2_hbCreateDecodeTables+0x1bc>
 94c:	ldr	w8, [sp, #28]
 950:	add	w8, w8, #0x1
 954:	str	w8, [sp, #12]
 958:	ldr	w8, [sp, #12]
 95c:	ldr	w9, [sp, #24]
 960:	cmp	w8, w9
 964:	b.gt	9ac <BZ2_hbCreateDecodeTables+0x288>
 968:	ldr	x8, [sp, #56]
 96c:	ldr	w9, [sp, #12]
 970:	subs	w9, w9, #0x1
 974:	ldr	w9, [x8, w9, sxtw #2]
 978:	add	w9, w9, #0x1
 97c:	lsl	w9, w9, #1
 980:	ldr	x8, [sp, #48]
 984:	ldrsw	x10, [sp, #12]
 988:	ldr	w11, [x8, x10, lsl #2]
 98c:	subs	w9, w9, w11
 990:	ldr	x8, [sp, #48]
 994:	ldrsw	x10, [sp, #12]
 998:	str	w9, [x8, x10, lsl #2]
 99c:	ldr	w8, [sp, #12]
 9a0:	add	w8, w8, #0x1
 9a4:	str	w8, [sp, #12]
 9a8:	b	958 <BZ2_hbCreateDecodeTables+0x234>
 9ac:	add	sp, sp, #0x40
 9b0:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x8, [sp, #8]
       c:	str	wzr, [x8, #644]
      10:	ldr	x8, [sp, #8]
      14:	str	wzr, [x8, #640]
      18:	add	sp, sp, #0x10
      1c:	ret

0000000000000020 <BZ2_compressBlock>:
      20:	sub	sp, sp, #0x20
      24:	stp	x29, x30, [sp, #16]
      28:	add	x29, sp, #0x10
      2c:	str	x0, [sp, #8]
      30:	strb	w1, [sp, #7]
      34:	ldr	x8, [sp, #8]
      38:	ldr	w9, [x8, #108]
      3c:	cmp	w9, #0x0
      40:	cset	w9, le
      44:	tbnz	w9, #0, fc <BZ2_compressBlock+0xdc>
      48:	ldr	x8, [sp, #8]
      4c:	ldr	w9, [x8, #648]
      50:	mvn	w9, w9
      54:	ldr	x8, [sp, #8]
      58:	str	w9, [x8, #648]
      5c:	ldr	x8, [sp, #8]
      60:	ldr	w9, [x8, #652]
      64:	ldr	x8, [sp, #8]
      68:	ldr	w10, [x8, #652]
      6c:	lsr	w10, w10, #31
      70:	orr	w9, w10, w9, lsl #1
      74:	ldr	x8, [sp, #8]
      78:	str	w9, [x8, #652]
      7c:	ldr	x8, [sp, #8]
      80:	ldr	w9, [x8, #648]
      84:	ldr	x8, [sp, #8]
      88:	ldr	w10, [x8, #652]
      8c:	eor	w9, w10, w9
      90:	str	w9, [x8, #652]
      94:	ldr	x8, [sp, #8]
      98:	ldr	w9, [x8, #660]
      9c:	cmp	w9, #0x1
      a0:	b.le	ac <BZ2_compressBlock+0x8c>
      a4:	ldr	x8, [sp, #8]
      a8:	str	wzr, [x8, #116]
      ac:	ldr	x8, [sp, #8]
      b0:	ldr	w9, [x8, #656]
      b4:	cmp	w9, #0x2
      b8:	b.lt	f4 <BZ2_compressBlock+0xd4>  // b.tstop
      bc:	adrp	x8, 0 <stderr>
      c0:	add	x8, x8, #0x0
      c4:	ldr	x0, [x8]
      c8:	ldr	x8, [sp, #8]
      cc:	ldr	w2, [x8, #660]
      d0:	ldr	x8, [sp, #8]
      d4:	ldr	w3, [x8, #648]
      d8:	ldr	x8, [sp, #8]
      dc:	ldr	w4, [x8, #652]
      e0:	ldr	x8, [sp, #8]
      e4:	ldr	w5, [x8, #108]
      e8:	adrp	x1, 0 <BZ2_bsInitWrite>
      ec:	add	x1, x1, #0x0
      f0:	bl	0 <fprintf>
      f4:	ldr	x0, [sp, #8]
      f8:	bl	0 <BZ2_blockSort>
      fc:	ldr	x8, [sp, #8]
     100:	ldr	x8, [x8, #32]
     104:	ldr	x9, [sp, #8]
     108:	ldrsw	x9, [x9, #108]
     10c:	add	x8, x8, x9
     110:	ldr	x9, [sp, #8]
     114:	str	x8, [x9, #80]
     118:	ldr	x8, [sp, #8]
     11c:	ldr	w10, [x8, #660]
     120:	cmp	w10, #0x1
     124:	b.ne	16c <BZ2_compressBlock+0x14c>  // b.any
     128:	ldr	x0, [sp, #8]
     12c:	bl	0 <BZ2_bsInitWrite>
     130:	ldr	x0, [sp, #8]
     134:	mov	w1, #0x42                  	// #66
     138:	bl	2bc <bsPutUChar>
     13c:	ldr	x0, [sp, #8]
     140:	mov	w1, #0x5a                  	// #90
     144:	bl	2bc <bsPutUChar>
     148:	ldr	x0, [sp, #8]
     14c:	mov	w1, #0x68                  	// #104
     150:	bl	2bc <bsPutUChar>
     154:	ldr	x0, [sp, #8]
     158:	ldr	x8, [sp, #8]
     15c:	ldr	w9, [x8, #664]
     160:	add	w9, w9, #0x30
     164:	mov	w1, w9
     168:	bl	2bc <bsPutUChar>
     16c:	ldr	x8, [sp, #8]
     170:	ldr	w9, [x8, #108]
     174:	cmp	w9, #0x0
     178:	cset	w9, le
     17c:	tbnz	w9, #0, 218 <BZ2_compressBlock+0x1f8>
     180:	ldr	x0, [sp, #8]
     184:	mov	w1, #0x31                  	// #49
     188:	bl	2bc <bsPutUChar>
     18c:	ldr	x0, [sp, #8]
     190:	mov	w1, #0x41                  	// #65
     194:	bl	2bc <bsPutUChar>
     198:	ldr	x0, [sp, #8]
     19c:	mov	w8, #0x59                  	// #89
     1a0:	mov	w1, w8
     1a4:	str	w8, [sp]
     1a8:	bl	2bc <bsPutUChar>
     1ac:	ldr	x0, [sp, #8]
     1b0:	mov	w1, #0x26                  	// #38
     1b4:	bl	2bc <bsPutUChar>
     1b8:	ldr	x0, [sp, #8]
     1bc:	mov	w1, #0x53                  	// #83
     1c0:	bl	2bc <bsPutUChar>
     1c4:	ldr	x0, [sp, #8]
     1c8:	ldr	w1, [sp]
     1cc:	bl	2bc <bsPutUChar>
     1d0:	ldr	x0, [sp, #8]
     1d4:	ldr	x9, [sp, #8]
     1d8:	ldr	w1, [x9, #648]
     1dc:	bl	2f0 <bsPutUInt32>
     1e0:	ldr	x0, [sp, #8]
     1e4:	mov	w1, #0x1                   	// #1
     1e8:	mov	w8, wzr
     1ec:	mov	w2, w8
     1f0:	bl	3a0 <bsW>
     1f4:	ldr	x0, [sp, #8]
     1f8:	ldr	x9, [sp, #8]
     1fc:	ldr	w2, [x9, #48]
     200:	mov	w1, #0x18                  	// #24
     204:	bl	3a0 <bsW>
     208:	ldr	x0, [sp, #8]
     20c:	bl	464 <generateMTFValues>
     210:	ldr	x0, [sp, #8]
     214:	bl	8dc <sendMTFValues>
     218:	ldrb	w8, [sp, #7]
     21c:	cbz	w8, 2b0 <BZ2_compressBlock+0x290>
     220:	ldr	x0, [sp, #8]
     224:	mov	w1, #0x17                  	// #23
     228:	bl	2bc <bsPutUChar>
     22c:	ldr	x0, [sp, #8]
     230:	mov	w1, #0x72                  	// #114
     234:	bl	2bc <bsPutUChar>
     238:	ldr	x0, [sp, #8]
     23c:	mov	w1, #0x45                  	// #69
     240:	bl	2bc <bsPutUChar>
     244:	ldr	x0, [sp, #8]
     248:	mov	w1, #0x38                  	// #56
     24c:	bl	2bc <bsPutUChar>
     250:	ldr	x0, [sp, #8]
     254:	mov	w1, #0x50                  	// #80
     258:	bl	2bc <bsPutUChar>
     25c:	ldr	x0, [sp, #8]
     260:	mov	w1, #0xffffff90            	// #-112
     264:	bl	2bc <bsPutUChar>
     268:	ldr	x0, [sp, #8]
     26c:	ldr	x8, [sp, #8]
     270:	ldr	w1, [x8, #652]
     274:	bl	2f0 <bsPutUInt32>
     278:	ldr	x8, [sp, #8]
     27c:	ldr	w9, [x8, #656]
     280:	cmp	w9, #0x2
     284:	b.lt	2a8 <BZ2_compressBlock+0x288>  // b.tstop
     288:	adrp	x8, 0 <stderr>
     28c:	add	x8, x8, #0x0
     290:	ldr	x0, [x8]
     294:	ldr	x8, [sp, #8]
     298:	ldr	w2, [x8, #652]
     29c:	adrp	x1, 0 <BZ2_bsInitWrite>
     2a0:	add	x1, x1, #0x0
     2a4:	bl	0 <fprintf>
     2a8:	ldr	x0, [sp, #8]
     2ac:	bl	54ec <bsFinishWrite>
     2b0:	ldp	x29, x30, [sp, #16]
     2b4:	add	sp, sp, #0x20
     2b8:	ret

00000000000002bc <bsPutUChar>:
     2bc:	sub	sp, sp, #0x20
     2c0:	stp	x29, x30, [sp, #16]
     2c4:	add	x29, sp, #0x10
     2c8:	mov	w8, #0x8                   	// #8
     2cc:	str	x0, [sp, #8]
     2d0:	strb	w1, [sp, #7]
     2d4:	ldr	x0, [sp, #8]
     2d8:	ldrb	w2, [sp, #7]
     2dc:	mov	w1, w8
     2e0:	bl	3a0 <bsW>
     2e4:	ldp	x29, x30, [sp, #16]
     2e8:	add	sp, sp, #0x20
     2ec:	ret

00000000000002f0 <bsPutUInt32>:
     2f0:	sub	sp, sp, #0x20
     2f4:	stp	x29, x30, [sp, #16]
     2f8:	add	x29, sp, #0x10
     2fc:	mov	w8, #0x8                   	// #8
     300:	str	x0, [sp, #8]
     304:	str	w1, [sp, #4]
     308:	ldr	x0, [sp, #8]
     30c:	ldr	w9, [sp, #4]
     310:	lsr	w9, w9, #24
     314:	mov	w10, w9
     318:	ubfx	x10, x10, #0, #32
     31c:	and	x10, x10, #0xff
     320:	mov	w1, w8
     324:	mov	w2, w10
     328:	str	w8, [sp]
     32c:	bl	3a0 <bsW>
     330:	ldr	x0, [sp, #8]
     334:	ldr	w8, [sp, #4]
     338:	lsr	w8, w8, #16
     33c:	mov	w11, w8
     340:	ubfx	x11, x11, #0, #32
     344:	and	x11, x11, #0xff
     348:	ldr	w1, [sp]
     34c:	mov	w2, w11
     350:	bl	3a0 <bsW>
     354:	ldr	x0, [sp, #8]
     358:	ldr	w8, [sp, #4]
     35c:	lsr	w8, w8, #8
     360:	mov	w12, w8
     364:	ubfx	x12, x12, #0, #32
     368:	and	x12, x12, #0xff
     36c:	ldr	w1, [sp]
     370:	mov	w2, w12
     374:	bl	3a0 <bsW>
     378:	ldr	x0, [sp, #8]
     37c:	ldr	w8, [sp, #4]
     380:	mov	w13, w8
     384:	and	x13, x13, #0xff
     388:	ldr	w1, [sp]
     38c:	mov	w2, w13
     390:	bl	3a0 <bsW>
     394:	ldp	x29, x30, [sp, #16]
     398:	add	sp, sp, #0x20
     39c:	ret

00000000000003a0 <bsW>:
     3a0:	sub	sp, sp, #0x10
     3a4:	str	x0, [sp, #8]
     3a8:	str	w1, [sp, #4]
     3ac:	str	w2, [sp]
     3b0:	ldr	x8, [sp, #8]
     3b4:	ldr	w9, [x8, #644]
     3b8:	cmp	w9, #0x8
     3bc:	b.lt	418 <bsW+0x78>  // b.tstop
     3c0:	ldr	x8, [sp, #8]
     3c4:	ldr	w9, [x8, #640]
     3c8:	lsr	w9, w9, #24
     3cc:	ldr	x8, [sp, #8]
     3d0:	ldr	x8, [x8, #80]
     3d4:	ldr	x10, [sp, #8]
     3d8:	ldrsw	x10, [x10, #116]
     3dc:	add	x8, x8, x10
     3e0:	strb	w9, [x8]
     3e4:	ldr	x8, [sp, #8]
     3e8:	ldr	w9, [x8, #116]
     3ec:	add	w9, w9, #0x1
     3f0:	str	w9, [x8, #116]
     3f4:	ldr	x8, [sp, #8]
     3f8:	ldr	w9, [x8, #640]
     3fc:	lsl	w9, w9, #8
     400:	str	w9, [x8, #640]
     404:	ldr	x8, [sp, #8]
     408:	ldr	w9, [x8, #644]
     40c:	subs	w9, w9, #0x8
     410:	str	w9, [x8, #644]
     414:	b	3b0 <bsW+0x10>
     418:	ldr	w8, [sp]
     41c:	ldr	x9, [sp, #8]
     420:	ldr	w10, [x9, #644]
     424:	mov	w11, #0x20                  	// #32
     428:	subs	w10, w11, w10
     42c:	ldr	w11, [sp, #4]
     430:	subs	w10, w10, w11
     434:	lsl	w8, w8, w10
     438:	ldr	x9, [sp, #8]
     43c:	ldr	w10, [x9, #640]
     440:	orr	w8, w10, w8
     444:	str	w8, [x9, #640]
     448:	ldr	w8, [sp, #4]
     44c:	ldr	x9, [sp, #8]
     450:	ldr	w10, [x9, #644]
     454:	add	w8, w10, w8
     458:	str	w8, [x9, #644]
     45c:	add	sp, sp, #0x10
     460:	ret

0000000000000464 <generateMTFValues>:
     464:	sub	sp, sp, #0x180
     468:	stp	x29, x30, [sp, #352]
     46c:	str	x28, [sp, #368]
     470:	add	x29, sp, #0x160
     474:	sub	x8, x29, #0x8
     478:	str	x0, [x8]
     47c:	ldr	x9, [x8]
     480:	ldr	x9, [x9, #56]
     484:	str	x9, [sp, #56]
     488:	ldr	x9, [x8]
     48c:	ldr	x9, [x9, #64]
     490:	str	x9, [sp, #48]
     494:	ldr	x9, [x8]
     498:	ldr	x9, [x9, #72]
     49c:	str	x9, [sp, #40]
     4a0:	ldr	x0, [x8]
     4a4:	str	x8, [sp, #8]
     4a8:	bl	5568 <makeMaps_e>
     4ac:	ldr	x8, [sp, #8]
     4b0:	ldr	x9, [x8]
     4b4:	ldr	w10, [x9, #124]
     4b8:	add	w10, w10, #0x1
     4bc:	str	w10, [sp, #68]
     4c0:	str	wzr, [sp, #84]
     4c4:	ldr	w8, [sp, #84]
     4c8:	ldr	w9, [sp, #68]
     4cc:	cmp	w8, w9
     4d0:	b.gt	4fc <generateMTFValues+0x98>
     4d4:	ldr	x8, [sp, #8]
     4d8:	ldr	x9, [x8]
     4dc:	add	x9, x9, #0x2a0
     4e0:	ldrsw	x10, [sp, #84]
     4e4:	mov	w11, wzr
     4e8:	str	w11, [x9, x10, lsl #2]
     4ec:	ldr	w8, [sp, #84]
     4f0:	add	w8, w8, #0x1
     4f4:	str	w8, [sp, #84]
     4f8:	b	4c4 <generateMTFValues+0x60>
     4fc:	str	wzr, [sp, #72]
     500:	str	wzr, [sp, #76]
     504:	str	wzr, [sp, #84]
     508:	ldr	w8, [sp, #84]
     50c:	ldr	x9, [sp, #8]
     510:	ldr	x10, [x9]
     514:	ldr	w11, [x10, #124]
     518:	cmp	w8, w11
     51c:	b.ge	544 <generateMTFValues+0xe0>  // b.tcont
     520:	ldr	w8, [sp, #84]
     524:	ldrsw	x9, [sp, #84]
     528:	add	x10, sp, #0x58
     52c:	add	x9, x10, x9
     530:	strb	w8, [x9]
     534:	ldr	w8, [sp, #84]
     538:	add	w8, w8, #0x1
     53c:	str	w8, [sp, #84]
     540:	b	508 <generateMTFValues+0xa4>
     544:	str	wzr, [sp, #84]
     548:	ldr	w8, [sp, #84]
     54c:	ldr	x9, [sp, #8]
     550:	ldr	x10, [x9]
     554:	ldr	w11, [x10, #108]
     558:	cmp	w8, w11
     55c:	b.ge	7a0 <generateMTFValues+0x33c>  // b.tcont
     560:	ldr	x8, [sp, #56]
     564:	ldrsw	x9, [sp, #84]
     568:	ldr	w10, [x8, x9, lsl #2]
     56c:	subs	w10, w10, #0x1
     570:	str	w10, [sp, #80]
     574:	ldr	w10, [sp, #80]
     578:	cmp	w10, #0x0
     57c:	cset	w10, ge  // ge = tcont
     580:	tbnz	w10, #0, 59c <generateMTFValues+0x138>
     584:	ldr	x8, [sp, #8]
     588:	ldr	x9, [x8]
     58c:	ldr	w10, [x9, #108]
     590:	ldr	w11, [sp, #80]
     594:	add	w10, w11, w10
     598:	str	w10, [sp, #80]
     59c:	ldr	x8, [sp, #8]
     5a0:	ldr	x9, [x8]
     5a4:	add	x9, x9, #0x180
     5a8:	ldr	x10, [sp, #48]
     5ac:	ldrsw	x11, [sp, #80]
     5b0:	ldrb	w12, [x10, x11]
     5b4:	mov	w10, w12
     5b8:	add	x9, x9, x10
     5bc:	ldrb	w12, [x9]
     5c0:	strb	w12, [sp, #39]
     5c4:	ldrb	w12, [sp, #88]
     5c8:	ldrb	w13, [sp, #39]
     5cc:	cmp	w12, w13
     5d0:	b.ne	5e4 <generateMTFValues+0x180>  // b.any
     5d4:	ldr	w8, [sp, #76]
     5d8:	add	w8, w8, #0x1
     5dc:	str	w8, [sp, #76]
     5e0:	b	790 <generateMTFValues+0x32c>
     5e4:	ldr	w8, [sp, #76]
     5e8:	cmp	w8, #0x0
     5ec:	cset	w8, le
     5f0:	tbnz	w8, #0, 6b4 <generateMTFValues+0x250>
     5f4:	ldr	w8, [sp, #76]
     5f8:	subs	w8, w8, #0x1
     5fc:	str	w8, [sp, #76]
     600:	ldr	w8, [sp, #76]
     604:	and	w8, w8, #0x1
     608:	cbz	w8, 64c <generateMTFValues+0x1e8>
     60c:	ldr	x8, [sp, #40]
     610:	ldrsw	x9, [sp, #72]
     614:	mov	x10, #0x2                   	// #2
     618:	mul	x9, x10, x9
     61c:	add	x8, x8, x9
     620:	mov	w11, #0x1                   	// #1
     624:	strh	w11, [x8]
     628:	ldr	w11, [sp, #72]
     62c:	add	w11, w11, #0x1
     630:	str	w11, [sp, #72]
     634:	ldr	x8, [sp, #8]
     638:	ldr	x9, [x8]
     63c:	ldr	w11, [x9, #676]
     640:	add	w11, w11, #0x1
     644:	str	w11, [x9, #676]
     648:	b	688 <generateMTFValues+0x224>
     64c:	ldr	x8, [sp, #40]
     650:	ldrsw	x9, [sp, #72]
     654:	mov	x10, #0x2                   	// #2
     658:	mul	x9, x10, x9
     65c:	add	x8, x8, x9
     660:	mov	w11, #0x0                   	// #0
     664:	strh	w11, [x8]
     668:	ldr	w11, [sp, #72]
     66c:	add	w11, w11, #0x1
     670:	str	w11, [sp, #72]
     674:	ldr	x8, [sp, #8]
     678:	ldr	x9, [x8]
     67c:	ldr	w11, [x9, #672]
     680:	add	w11, w11, #0x1
     684:	str	w11, [x9, #672]
     688:	ldr	w8, [sp, #76]
     68c:	cmp	w8, #0x2
     690:	b.ge	698 <generateMTFValues+0x234>  // b.tcont
     694:	b	6b0 <generateMTFValues+0x24c>
     698:	ldr	w8, [sp, #76]
     69c:	mov	w9, #0x2                   	// #2
     6a0:	subs	w8, w8, #0x2
     6a4:	sdiv	w8, w8, w9
     6a8:	str	w8, [sp, #76]
     6ac:	b	600 <generateMTFValues+0x19c>
     6b0:	str	wzr, [sp, #76]
     6b4:	add	x8, sp, #0x58
     6b8:	ldrb	w9, [x8, #1]
     6bc:	strb	w9, [sp, #38]
     6c0:	ldrb	w9, [sp, #88]
     6c4:	strb	w9, [x8, #1]
     6c8:	add	x8, x8, #0x1
     6cc:	str	x8, [sp, #24]
     6d0:	ldrb	w9, [sp, #39]
     6d4:	strb	w9, [sp, #23]
     6d8:	ldrb	w8, [sp, #23]
     6dc:	ldrb	w9, [sp, #38]
     6e0:	cmp	w8, w9
     6e4:	b.eq	718 <generateMTFValues+0x2b4>  // b.none
     6e8:	ldr	x8, [sp, #24]
     6ec:	add	x8, x8, #0x1
     6f0:	str	x8, [sp, #24]
     6f4:	ldrb	w9, [sp, #38]
     6f8:	strb	w9, [sp, #22]
     6fc:	ldr	x8, [sp, #24]
     700:	ldrb	w9, [x8]
     704:	strb	w9, [sp, #38]
     708:	ldrb	w9, [sp, #22]
     70c:	ldr	x8, [sp, #24]
     710:	strb	w9, [x8]
     714:	b	6d8 <generateMTFValues+0x274>
     718:	ldrb	w8, [sp, #38]
     71c:	add	x9, sp, #0x58
     720:	strb	w8, [sp, #88]
     724:	ldr	x10, [sp, #24]
     728:	subs	x9, x10, x9
     72c:	str	w9, [sp, #80]
     730:	ldr	w8, [sp, #80]
     734:	add	w8, w8, #0x1
     738:	ldr	x10, [sp, #40]
     73c:	ldrsw	x11, [sp, #72]
     740:	mov	x12, #0x2                   	// #2
     744:	mul	x11, x12, x11
     748:	add	x10, x10, x11
     74c:	strh	w8, [x10]
     750:	ldr	w8, [sp, #72]
     754:	add	w8, w8, #0x1
     758:	str	w8, [sp, #72]
     75c:	ldr	x10, [sp, #8]
     760:	ldr	x11, [x10]
     764:	add	x11, x11, #0x2a0
     768:	ldr	w8, [sp, #80]
     76c:	add	w8, w8, #0x1
     770:	mov	w0, w8
     774:	sxtw	x12, w0
     778:	mov	x13, #0x4                   	// #4
     77c:	mul	x12, x13, x12
     780:	add	x11, x11, x12
     784:	ldr	w8, [x11]
     788:	add	w8, w8, #0x1
     78c:	str	w8, [x11]
     790:	ldr	w8, [sp, #84]
     794:	add	w8, w8, #0x1
     798:	str	w8, [sp, #84]
     79c:	b	548 <generateMTFValues+0xe4>
     7a0:	ldr	w8, [sp, #76]
     7a4:	cmp	w8, #0x0
     7a8:	cset	w8, le
     7ac:	tbnz	w8, #0, 870 <generateMTFValues+0x40c>
     7b0:	ldr	w8, [sp, #76]
     7b4:	subs	w8, w8, #0x1
     7b8:	str	w8, [sp, #76]
     7bc:	ldr	w8, [sp, #76]
     7c0:	and	w8, w8, #0x1
     7c4:	cbz	w8, 808 <generateMTFValues+0x3a4>
     7c8:	ldr	x8, [sp, #40]
     7cc:	ldrsw	x9, [sp, #72]
     7d0:	mov	x10, #0x2                   	// #2
     7d4:	mul	x9, x10, x9
     7d8:	add	x8, x8, x9
     7dc:	mov	w11, #0x1                   	// #1
     7e0:	strh	w11, [x8]
     7e4:	ldr	w11, [sp, #72]
     7e8:	add	w11, w11, #0x1
     7ec:	str	w11, [sp, #72]
     7f0:	ldr	x8, [sp, #8]
     7f4:	ldr	x9, [x8]
     7f8:	ldr	w11, [x9, #676]
     7fc:	add	w11, w11, #0x1
     800:	str	w11, [x9, #676]
     804:	b	844 <generateMTFValues+0x3e0>
     808:	ldr	x8, [sp, #40]
     80c:	ldrsw	x9, [sp, #72]
     810:	mov	x10, #0x2                   	// #2
     814:	mul	x9, x10, x9
     818:	add	x8, x8, x9
     81c:	mov	w11, #0x0                   	// #0
     820:	strh	w11, [x8]
     824:	ldr	w11, [sp, #72]
     828:	add	w11, w11, #0x1
     82c:	str	w11, [sp, #72]
     830:	ldr	x8, [sp, #8]
     834:	ldr	x9, [x8]
     838:	ldr	w11, [x9, #672]
     83c:	add	w11, w11, #0x1
     840:	str	w11, [x9, #672]
     844:	ldr	w8, [sp, #76]
     848:	cmp	w8, #0x2
     84c:	b.ge	854 <generateMTFValues+0x3f0>  // b.tcont
     850:	b	86c <generateMTFValues+0x408>
     854:	ldr	w8, [sp, #76]
     858:	mov	w9, #0x2                   	// #2
     85c:	subs	w8, w8, #0x2
     860:	sdiv	w8, w8, w9
     864:	str	w8, [sp, #76]
     868:	b	7bc <generateMTFValues+0x358>
     86c:	str	wzr, [sp, #76]
     870:	ldr	w8, [sp, #68]
     874:	ldr	x9, [sp, #40]
     878:	ldrsw	x10, [sp, #72]
     87c:	mov	x11, #0x2                   	// #2
     880:	mul	x10, x11, x10
     884:	add	x9, x9, x10
     888:	strh	w8, [x9]
     88c:	ldr	w8, [sp, #72]
     890:	add	w8, w8, #0x1
     894:	str	w8, [sp, #72]
     898:	ldr	x9, [sp, #8]
     89c:	ldr	x10, [x9]
     8a0:	add	x10, x10, #0x2a0
     8a4:	ldrsw	x11, [sp, #68]
     8a8:	mov	x12, #0x4                   	// #4
     8ac:	mul	x11, x12, x11
     8b0:	add	x10, x10, x11
     8b4:	ldr	w8, [x10]
     8b8:	add	w8, w8, #0x1
     8bc:	str	w8, [x10]
     8c0:	ldr	w8, [sp, #72]
     8c4:	ldr	x10, [x9]
     8c8:	str	w8, [x10, #668]
     8cc:	ldr	x28, [sp, #368]
     8d0:	ldp	x29, x30, [sp, #352]
     8d4:	add	sp, sp, #0x180
     8d8:	ret

00000000000008dc <sendMTFValues>:
     8dc:	sub	sp, sp, #0x100
     8e0:	stp	x29, x30, [sp, #240]
     8e4:	add	x29, sp, #0xf0
     8e8:	adrp	x8, 0 <stderr>
     8ec:	add	x8, x8, #0x0
     8f0:	stur	x0, [x29, #-8]
     8f4:	ldur	x9, [x29, #-8]
     8f8:	ldr	x9, [x9, #72]
     8fc:	str	x9, [sp, #120]
     900:	ldur	x9, [x29, #-8]
     904:	ldr	w10, [x9, #656]
     908:	cmp	w10, #0x3
     90c:	str	x8, [sp, #24]
     910:	b.lt	940 <sendMTFValues+0x64>  // b.tstop
     914:	ldr	x8, [sp, #24]
     918:	ldr	x0, [x8]
     91c:	ldur	x9, [x29, #-8]
     920:	ldr	w2, [x9, #108]
     924:	ldur	x9, [x29, #-8]
     928:	ldr	w3, [x9, #668]
     92c:	ldur	x9, [x29, #-8]
     930:	ldr	w4, [x9, #124]
     934:	adrp	x1, 0 <BZ2_bsInitWrite>
     938:	add	x1, x1, #0x0
     93c:	bl	0 <fprintf>
     940:	ldur	x8, [x29, #-8]
     944:	ldr	w9, [x8, #124]
     948:	add	w9, w9, #0x2
     94c:	stur	w9, [x29, #-56]
     950:	stur	wzr, [x29, #-16]
     954:	ldur	w8, [x29, #-16]
     958:	cmp	w8, #0x6
     95c:	b.ge	9c0 <sendMTFValues+0xe4>  // b.tcont
     960:	stur	wzr, [x29, #-12]
     964:	ldur	w8, [x29, #-12]
     968:	ldur	w9, [x29, #-56]
     96c:	cmp	w8, w9
     970:	b.ge	9b0 <sendMTFValues+0xd4>  // b.tcont
     974:	ldur	x8, [x29, #-8]
     978:	mov	x9, #0x934c                	// #37708
     97c:	add	x8, x8, x9
     980:	ldursw	x9, [x29, #-16]
     984:	mov	x10, #0x102                 	// #258
     988:	mul	x9, x10, x9
     98c:	add	x8, x8, x9
     990:	ldursw	x9, [x29, #-12]
     994:	add	x8, x8, x9
     998:	mov	w11, #0xf                   	// #15
     99c:	strb	w11, [x8]
     9a0:	ldur	w8, [x29, #-12]
     9a4:	add	w8, w8, #0x1
     9a8:	stur	w8, [x29, #-12]
     9ac:	b	964 <sendMTFValues+0x88>
     9b0:	ldur	w8, [x29, #-16]
     9b4:	add	w8, w8, #0x1
     9b8:	stur	w8, [x29, #-16]
     9bc:	b	954 <sendMTFValues+0x78>
     9c0:	ldur	x8, [x29, #-8]
     9c4:	ldr	w9, [x8, #668]
     9c8:	cmp	w9, #0x0
     9cc:	cset	w9, gt
     9d0:	tbnz	w9, #0, 9dc <sendMTFValues+0x100>
     9d4:	mov	w0, #0xbb9                 	// #3001
     9d8:	bl	0 <BZ2_bz__AssertH__fail>
     9dc:	ldur	x8, [x29, #-8]
     9e0:	ldr	w9, [x8, #668]
     9e4:	cmp	w9, #0xc8
     9e8:	b.ge	9f8 <sendMTFValues+0x11c>  // b.tcont
     9ec:	mov	w8, #0x2                   	// #2
     9f0:	stur	w8, [x29, #-72]
     9f4:	b	a54 <sendMTFValues+0x178>
     9f8:	ldur	x8, [x29, #-8]
     9fc:	ldr	w9, [x8, #668]
     a00:	cmp	w9, #0x258
     a04:	b.ge	a14 <sendMTFValues+0x138>  // b.tcont
     a08:	mov	w8, #0x3                   	// #3
     a0c:	stur	w8, [x29, #-72]
     a10:	b	a54 <sendMTFValues+0x178>
     a14:	ldur	x8, [x29, #-8]
     a18:	ldr	w9, [x8, #668]
     a1c:	cmp	w9, #0x4b0
     a20:	b.ge	a30 <sendMTFValues+0x154>  // b.tcont
     a24:	mov	w8, #0x4                   	// #4
     a28:	stur	w8, [x29, #-72]
     a2c:	b	a54 <sendMTFValues+0x178>
     a30:	ldur	x8, [x29, #-8]
     a34:	ldr	w9, [x8, #668]
     a38:	cmp	w9, #0x960
     a3c:	b.ge	a4c <sendMTFValues+0x170>  // b.tcont
     a40:	mov	w8, #0x5                   	// #5
     a44:	stur	w8, [x29, #-72]
     a48:	b	a54 <sendMTFValues+0x178>
     a4c:	mov	w8, #0x6                   	// #6
     a50:	stur	w8, [x29, #-72]
     a54:	ldur	w8, [x29, #-72]
     a58:	str	w8, [sp, #116]
     a5c:	ldur	x9, [x29, #-8]
     a60:	ldr	w8, [x9, #668]
     a64:	str	w8, [sp, #112]
     a68:	stur	wzr, [x29, #-28]
     a6c:	ldr	w8, [sp, #116]
     a70:	cmp	w8, #0x0
     a74:	cset	w8, le
     a78:	tbnz	w8, #0, cc0 <sendMTFValues+0x3e4>
     a7c:	ldr	w8, [sp, #112]
     a80:	ldr	w9, [sp, #116]
     a84:	sdiv	w8, w8, w9
     a88:	str	w8, [sp, #108]
     a8c:	ldur	w8, [x29, #-28]
     a90:	subs	w8, w8, #0x1
     a94:	stur	w8, [x29, #-32]
     a98:	str	wzr, [sp, #104]
     a9c:	ldr	w8, [sp, #104]
     aa0:	ldr	w9, [sp, #108]
     aa4:	mov	w10, #0x0                   	// #0
     aa8:	cmp	w8, w9
     aac:	str	w10, [sp, #20]
     ab0:	b.ge	acc <sendMTFValues+0x1f0>  // b.tcont
     ab4:	ldur	w8, [x29, #-32]
     ab8:	ldur	w9, [x29, #-56]
     abc:	subs	w9, w9, #0x1
     ac0:	cmp	w8, w9
     ac4:	cset	w8, lt  // lt = tstop
     ac8:	str	w8, [sp, #20]
     acc:	ldr	w8, [sp, #20]
     ad0:	tbnz	w8, #0, ad8 <sendMTFValues+0x1fc>
     ad4:	b	b04 <sendMTFValues+0x228>
     ad8:	ldur	w8, [x29, #-32]
     adc:	add	w8, w8, #0x1
     ae0:	stur	w8, [x29, #-32]
     ae4:	ldur	x9, [x29, #-8]
     ae8:	add	x9, x9, #0x2a0
     aec:	ldursw	x10, [x29, #-32]
     af0:	ldr	w8, [x9, x10, lsl #2]
     af4:	ldr	w11, [sp, #104]
     af8:	add	w8, w11, w8
     afc:	str	w8, [sp, #104]
     b00:	b	a9c <sendMTFValues+0x1c0>
     b04:	ldur	w8, [x29, #-32]
     b08:	ldur	w9, [x29, #-28]
     b0c:	cmp	w8, w9
     b10:	b.le	b7c <sendMTFValues+0x2a0>
     b14:	ldr	w8, [sp, #116]
     b18:	ldur	w9, [x29, #-72]
     b1c:	cmp	w8, w9
     b20:	b.eq	b7c <sendMTFValues+0x2a0>  // b.none
     b24:	ldr	w8, [sp, #116]
     b28:	cmp	w8, #0x1
     b2c:	b.eq	b7c <sendMTFValues+0x2a0>  // b.none
     b30:	ldur	w8, [x29, #-72]
     b34:	ldr	w9, [sp, #116]
     b38:	subs	w8, w8, w9
     b3c:	mov	w9, #0x2                   	// #2
     b40:	sdiv	w10, w8, w9
     b44:	mul	w9, w10, w9
     b48:	subs	w8, w8, w9
     b4c:	cmp	w8, #0x1
     b50:	b.ne	b7c <sendMTFValues+0x2a0>  // b.any
     b54:	ldur	x8, [x29, #-8]
     b58:	add	x8, x8, #0x2a0
     b5c:	ldursw	x9, [x29, #-32]
     b60:	ldr	w10, [x8, x9, lsl #2]
     b64:	ldr	w11, [sp, #104]
     b68:	subs	w10, w11, w10
     b6c:	str	w10, [sp, #104]
     b70:	ldur	w10, [x29, #-32]
     b74:	subs	w10, w10, #0x1
     b78:	stur	w10, [x29, #-32]
     b7c:	ldur	x8, [x29, #-8]
     b80:	ldr	w9, [x8, #656]
     b84:	cmp	w9, #0x3
     b88:	b.lt	bdc <sendMTFValues+0x300>  // b.tstop
     b8c:	ldr	x8, [sp, #24]
     b90:	ldr	x0, [x8]
     b94:	ldr	w2, [sp, #116]
     b98:	ldur	w3, [x29, #-28]
     b9c:	ldur	w4, [x29, #-32]
     ba0:	ldr	w5, [sp, #104]
     ba4:	ldr	w9, [sp, #104]
     ba8:	scvtf	s0, w9
     bac:	fcvt	d1, s0
     bb0:	mov	x10, #0x4059000000000000    	// #4636737291354636288
     bb4:	fmov	d2, x10
     bb8:	fmul	d1, d2, d1
     bbc:	ldur	x10, [x29, #-8]
     bc0:	ldr	w9, [x10, #668]
     bc4:	scvtf	s0, w9
     bc8:	fcvt	d2, s0
     bcc:	fdiv	d0, d1, d2
     bd0:	adrp	x1, 0 <BZ2_bsInitWrite>
     bd4:	add	x1, x1, #0x0
     bd8:	bl	0 <fprintf>
     bdc:	stur	wzr, [x29, #-12]
     be0:	ldur	w8, [x29, #-12]
     be4:	ldur	w9, [x29, #-56]
     be8:	cmp	w8, w9
     bec:	b.ge	c94 <sendMTFValues+0x3b8>  // b.tcont
     bf0:	ldur	w8, [x29, #-12]
     bf4:	ldur	w9, [x29, #-28]
     bf8:	cmp	w8, w9
     bfc:	b.lt	c4c <sendMTFValues+0x370>  // b.tstop
     c00:	ldur	w8, [x29, #-12]
     c04:	ldur	w9, [x29, #-32]
     c08:	cmp	w8, w9
     c0c:	b.gt	c4c <sendMTFValues+0x370>
     c10:	ldur	x8, [x29, #-8]
     c14:	mov	x9, #0x934c                	// #37708
     c18:	add	x8, x8, x9
     c1c:	ldr	w10, [sp, #116]
     c20:	subs	w10, w10, #0x1
     c24:	mov	w0, w10
     c28:	sxtw	x9, w0
     c2c:	mov	x11, #0x102                 	// #258
     c30:	mul	x9, x11, x9
     c34:	add	x8, x8, x9
     c38:	ldursw	x9, [x29, #-12]
     c3c:	add	x8, x8, x9
     c40:	mov	w10, #0x0                   	// #0
     c44:	strb	w10, [x8]
     c48:	b	c84 <sendMTFValues+0x3a8>
     c4c:	ldur	x8, [x29, #-8]
     c50:	mov	x9, #0x934c                	// #37708
     c54:	add	x8, x8, x9
     c58:	ldr	w10, [sp, #116]
     c5c:	subs	w10, w10, #0x1
     c60:	mov	w0, w10
     c64:	sxtw	x9, w0
     c68:	mov	x11, #0x102                 	// #258
     c6c:	mul	x9, x11, x9
     c70:	add	x8, x8, x9
     c74:	ldursw	x9, [x29, #-12]
     c78:	add	x8, x8, x9
     c7c:	mov	w10, #0xf                   	// #15
     c80:	strb	w10, [x8]
     c84:	ldur	w8, [x29, #-12]
     c88:	add	w8, w8, #0x1
     c8c:	stur	w8, [x29, #-12]
     c90:	b	be0 <sendMTFValues+0x304>
     c94:	ldr	w8, [sp, #116]
     c98:	subs	w8, w8, #0x1
     c9c:	str	w8, [sp, #116]
     ca0:	ldur	w8, [x29, #-32]
     ca4:	add	w8, w8, #0x1
     ca8:	stur	w8, [x29, #-28]
     cac:	ldr	w8, [sp, #104]
     cb0:	ldr	w9, [sp, #112]
     cb4:	subs	w8, w9, w8
     cb8:	str	w8, [sp, #112]
     cbc:	b	a6c <sendMTFValues+0x190>
     cc0:	stur	wzr, [x29, #-48]
     cc4:	ldur	w8, [x29, #-48]
     cc8:	cmp	w8, #0x4
     ccc:	b.ge	3c34 <sendMTFValues+0x3358>  // b.tcont
     cd0:	stur	wzr, [x29, #-16]
     cd4:	ldur	w8, [x29, #-16]
     cd8:	ldur	w9, [x29, #-72]
     cdc:	cmp	w8, w9
     ce0:	b.ge	d04 <sendMTFValues+0x428>  // b.tcont
     ce4:	ldursw	x8, [x29, #-16]
     ce8:	sub	x9, x29, #0x70
     cec:	mov	w10, wzr
     cf0:	str	w10, [x9, x8, lsl #2]
     cf4:	ldur	w8, [x29, #-16]
     cf8:	add	w8, w8, #0x1
     cfc:	stur	w8, [x29, #-16]
     d00:	b	cd4 <sendMTFValues+0x3f8>
     d04:	stur	wzr, [x29, #-16]
     d08:	ldur	w8, [x29, #-16]
     d0c:	ldur	w9, [x29, #-72]
     d10:	cmp	w8, w9
     d14:	b.ge	d74 <sendMTFValues+0x498>  // b.tcont
     d18:	stur	wzr, [x29, #-12]
     d1c:	ldur	w8, [x29, #-12]
     d20:	ldur	w9, [x29, #-56]
     d24:	cmp	w8, w9
     d28:	b.ge	d64 <sendMTFValues+0x488>  // b.tcont
     d2c:	ldur	x8, [x29, #-8]
     d30:	mov	x9, #0xb188                	// #45448
     d34:	add	x8, x8, x9
     d38:	ldursw	x9, [x29, #-16]
     d3c:	mov	x10, #0x408                 	// #1032
     d40:	mul	x9, x10, x9
     d44:	add	x8, x8, x9
     d48:	ldursw	x9, [x29, #-12]
     d4c:	mov	w11, wzr
     d50:	str	w11, [x8, x9, lsl #2]
     d54:	ldur	w8, [x29, #-12]
     d58:	add	w8, w8, #0x1
     d5c:	stur	w8, [x29, #-12]
     d60:	b	d1c <sendMTFValues+0x440>
     d64:	ldur	w8, [x29, #-16]
     d68:	add	w8, w8, #0x1
     d6c:	stur	w8, [x29, #-16]
     d70:	b	d08 <sendMTFValues+0x42c>
     d74:	ldur	w8, [x29, #-72]
     d78:	cmp	w8, #0x6
     d7c:	b.ne	e74 <sendMTFValues+0x598>  // b.any
     d80:	stur	wzr, [x29, #-12]
     d84:	ldur	w8, [x29, #-12]
     d88:	ldur	w9, [x29, #-56]
     d8c:	cmp	w8, w9
     d90:	b.ge	e74 <sendMTFValues+0x598>  // b.tcont
     d94:	ldur	x8, [x29, #-8]
     d98:	mov	x9, #0x934c                	// #37708
     d9c:	mov	x10, #0x944e                	// #37966
     da0:	add	x8, x8, x10
     da4:	ldursw	x10, [x29, #-12]
     da8:	ldrb	w11, [x8, x10]
     dac:	ldur	x8, [x29, #-8]
     db0:	add	x8, x8, x9
     db4:	ldursw	x9, [x29, #-12]
     db8:	ldrb	w12, [x8, x9]
     dbc:	orr	w11, w12, w11, lsl #16
     dc0:	ldur	x8, [x29, #-8]
     dc4:	mov	x9, #0xc9b8                	// #51640
     dc8:	add	x8, x8, x9
     dcc:	ldursw	x10, [x29, #-12]
     dd0:	mov	x13, #0x10                  	// #16
     dd4:	mul	x10, x13, x10
     dd8:	str	w11, [x8, x10]
     ddc:	ldur	x8, [x29, #-8]
     de0:	mov	x10, #0x9652                	// #38482
     de4:	add	x8, x8, x10
     de8:	ldursw	x10, [x29, #-12]
     dec:	ldrb	w11, [x8, x10]
     df0:	ldur	x8, [x29, #-8]
     df4:	mov	x10, #0x9550                	// #38224
     df8:	add	x8, x8, x10
     dfc:	ldursw	x10, [x29, #-12]
     e00:	ldrb	w12, [x8, x10]
     e04:	orr	w11, w12, w11, lsl #16
     e08:	ldur	x8, [x29, #-8]
     e0c:	add	x8, x8, x9
     e10:	ldursw	x10, [x29, #-12]
     e14:	mul	x10, x13, x10
     e18:	add	x8, x8, x10
     e1c:	str	w11, [x8, #4]
     e20:	ldur	x8, [x29, #-8]
     e24:	mov	x10, #0x9856                	// #38998
     e28:	add	x8, x8, x10
     e2c:	ldursw	x10, [x29, #-12]
     e30:	ldrb	w11, [x8, x10]
     e34:	ldur	x8, [x29, #-8]
     e38:	mov	x10, #0x9754                	// #38740
     e3c:	add	x8, x8, x10
     e40:	ldursw	x10, [x29, #-12]
     e44:	ldrb	w12, [x8, x10]
     e48:	orr	w11, w12, w11, lsl #16
     e4c:	ldur	x8, [x29, #-8]
     e50:	add	x8, x8, x9
     e54:	ldursw	x9, [x29, #-12]
     e58:	mul	x9, x13, x9
     e5c:	add	x8, x8, x9
     e60:	str	w11, [x8, #8]
     e64:	ldur	w8, [x29, #-12]
     e68:	add	w8, w8, #0x1
     e6c:	stur	w8, [x29, #-12]
     e70:	b	d84 <sendMTFValues+0x4a8>
     e74:	stur	wzr, [x29, #-52]
     e78:	stur	wzr, [x29, #-36]
     e7c:	stur	wzr, [x29, #-28]
     e80:	ldur	w8, [x29, #-28]
     e84:	ldur	x9, [x29, #-8]
     e88:	ldr	w10, [x9, #668]
     e8c:	cmp	w8, w10
     e90:	b.lt	e98 <sendMTFValues+0x5bc>  // b.tstop
     e94:	b	3b2c <sendMTFValues+0x3250>
     e98:	ldur	w8, [x29, #-28]
     e9c:	add	w8, w8, #0x32
     ea0:	subs	w8, w8, #0x1
     ea4:	stur	w8, [x29, #-32]
     ea8:	ldur	w8, [x29, #-32]
     eac:	ldur	x9, [x29, #-8]
     eb0:	ldr	w10, [x9, #668]
     eb4:	cmp	w8, w10
     eb8:	b.lt	ecc <sendMTFValues+0x5f0>  // b.tstop
     ebc:	ldur	x8, [x29, #-8]
     ec0:	ldr	w9, [x8, #668]
     ec4:	subs	w9, w9, #0x1
     ec8:	stur	w9, [x29, #-32]
     ecc:	stur	wzr, [x29, #-16]
     ed0:	ldur	w8, [x29, #-16]
     ed4:	ldur	w9, [x29, #-72]
     ed8:	cmp	w8, w9
     edc:	b.ge	f0c <sendMTFValues+0x630>  // b.tcont
     ee0:	ldursw	x8, [x29, #-16]
     ee4:	mov	x9, #0x2                   	// #2
     ee8:	mul	x8, x9, x8
     eec:	sub	x9, x29, #0x58
     ef0:	add	x8, x9, x8
     ef4:	mov	w10, #0x0                   	// #0
     ef8:	strh	w10, [x8]
     efc:	ldur	w8, [x29, #-16]
     f00:	add	w8, w8, #0x1
     f04:	stur	w8, [x29, #-16]
     f08:	b	ed0 <sendMTFValues+0x5f4>
     f0c:	ldur	w8, [x29, #-72]
     f10:	cmp	w8, #0x6
     f14:	b.ne	2d54 <sendMTFValues+0x2478>  // b.any
     f18:	ldur	w8, [x29, #-32]
     f1c:	ldur	w9, [x29, #-28]
     f20:	subs	w8, w8, w9
     f24:	add	w8, w8, #0x1
     f28:	mov	w9, #0x32                  	// #50
     f2c:	cmp	w9, w8
     f30:	b.ne	2d54 <sendMTFValues+0x2478>  // b.any
     f34:	str	wzr, [sp, #92]
     f38:	str	wzr, [sp, #96]
     f3c:	str	wzr, [sp, #100]
     f40:	ldr	x8, [sp, #120]
     f44:	ldur	w9, [x29, #-28]
     f48:	add	w9, w9, #0x0
     f4c:	mov	w0, w9
     f50:	sxtw	x10, w0
     f54:	mov	x11, #0x2                   	// #2
     f58:	mul	x10, x11, x10
     f5c:	add	x8, x8, x10
     f60:	ldrh	w9, [x8]
     f64:	strh	w9, [sp, #90]
     f68:	ldur	x8, [x29, #-8]
     f6c:	mov	x10, #0xc9b8                	// #51640
     f70:	add	x8, x8, x10
     f74:	ldrh	w9, [sp, #90]
     f78:	mov	w12, w9
     f7c:	mov	x13, #0x10                  	// #16
     f80:	mul	x12, x13, x12
     f84:	ldr	w9, [x8, x12]
     f88:	ldr	w14, [sp, #100]
     f8c:	add	w9, w14, w9
     f90:	str	w9, [sp, #100]
     f94:	ldur	x8, [x29, #-8]
     f98:	add	x8, x8, x10
     f9c:	ldrh	w9, [sp, #90]
     fa0:	mov	w12, w9
     fa4:	mul	x12, x13, x12
     fa8:	add	x8, x8, x12
     fac:	ldr	w9, [x8, #4]
     fb0:	ldr	w14, [sp, #96]
     fb4:	add	w9, w14, w9
     fb8:	str	w9, [sp, #96]
     fbc:	ldur	x8, [x29, #-8]
     fc0:	add	x8, x8, x10
     fc4:	ldrh	w9, [sp, #90]
     fc8:	mov	w12, w9
     fcc:	mul	x12, x13, x12
     fd0:	add	x8, x8, x12
     fd4:	ldr	w9, [x8, #8]
     fd8:	ldr	w14, [sp, #92]
     fdc:	add	w9, w14, w9
     fe0:	str	w9, [sp, #92]
     fe4:	ldr	x8, [sp, #120]
     fe8:	ldur	w9, [x29, #-28]
     fec:	add	w9, w9, #0x1
     ff0:	mov	w0, w9
     ff4:	sxtw	x12, w0
     ff8:	mul	x12, x11, x12
     ffc:	add	x8, x8, x12
    1000:	ldrh	w9, [x8]
    1004:	strh	w9, [sp, #90]
    1008:	ldur	x8, [x29, #-8]
    100c:	add	x8, x8, x10
    1010:	ldrh	w9, [sp, #90]
    1014:	mov	w12, w9
    1018:	mul	x12, x13, x12
    101c:	ldr	w9, [x8, x12]
    1020:	ldr	w14, [sp, #100]
    1024:	add	w9, w14, w9
    1028:	str	w9, [sp, #100]
    102c:	ldur	x8, [x29, #-8]
    1030:	add	x8, x8, x10
    1034:	ldrh	w9, [sp, #90]
    1038:	mov	w12, w9
    103c:	mul	x12, x13, x12
    1040:	add	x8, x8, x12
    1044:	ldr	w9, [x8, #4]
    1048:	ldr	w14, [sp, #96]
    104c:	add	w9, w14, w9
    1050:	str	w9, [sp, #96]
    1054:	ldur	x8, [x29, #-8]
    1058:	add	x8, x8, x10
    105c:	ldrh	w9, [sp, #90]
    1060:	mov	w12, w9
    1064:	mul	x12, x13, x12
    1068:	add	x8, x8, x12
    106c:	ldr	w9, [x8, #8]
    1070:	ldr	w14, [sp, #92]
    1074:	add	w9, w14, w9
    1078:	str	w9, [sp, #92]
    107c:	ldr	x8, [sp, #120]
    1080:	ldur	w9, [x29, #-28]
    1084:	add	w9, w9, #0x2
    1088:	mov	w0, w9
    108c:	sxtw	x12, w0
    1090:	mul	x12, x11, x12
    1094:	add	x8, x8, x12
    1098:	ldrh	w9, [x8]
    109c:	strh	w9, [sp, #90]
    10a0:	ldur	x8, [x29, #-8]
    10a4:	add	x8, x8, x10
    10a8:	ldrh	w9, [sp, #90]
    10ac:	mov	w12, w9
    10b0:	mul	x12, x13, x12
    10b4:	ldr	w9, [x8, x12]
    10b8:	ldr	w14, [sp, #100]
    10bc:	add	w9, w14, w9
    10c0:	str	w9, [sp, #100]
    10c4:	ldur	x8, [x29, #-8]
    10c8:	add	x8, x8, x10
    10cc:	ldrh	w9, [sp, #90]
    10d0:	mov	w12, w9
    10d4:	mul	x12, x13, x12
    10d8:	add	x8, x8, x12
    10dc:	ldr	w9, [x8, #4]
    10e0:	ldr	w14, [sp, #96]
    10e4:	add	w9, w14, w9
    10e8:	str	w9, [sp, #96]
    10ec:	ldur	x8, [x29, #-8]
    10f0:	add	x8, x8, x10
    10f4:	ldrh	w9, [sp, #90]
    10f8:	mov	w12, w9
    10fc:	mul	x12, x13, x12
    1100:	add	x8, x8, x12
    1104:	ldr	w9, [x8, #8]
    1108:	ldr	w14, [sp, #92]
    110c:	add	w9, w14, w9
    1110:	str	w9, [sp, #92]
    1114:	ldr	x8, [sp, #120]
    1118:	ldur	w9, [x29, #-28]
    111c:	add	w9, w9, #0x3
    1120:	mov	w0, w9
    1124:	sxtw	x12, w0
    1128:	mul	x12, x11, x12
    112c:	add	x8, x8, x12
    1130:	ldrh	w9, [x8]
    1134:	strh	w9, [sp, #90]
    1138:	ldur	x8, [x29, #-8]
    113c:	add	x8, x8, x10
    1140:	ldrh	w9, [sp, #90]
    1144:	mov	w12, w9
    1148:	mul	x12, x13, x12
    114c:	ldr	w9, [x8, x12]
    1150:	ldr	w14, [sp, #100]
    1154:	add	w9, w14, w9
    1158:	str	w9, [sp, #100]
    115c:	ldur	x8, [x29, #-8]
    1160:	add	x8, x8, x10
    1164:	ldrh	w9, [sp, #90]
    1168:	mov	w12, w9
    116c:	mul	x12, x13, x12
    1170:	add	x8, x8, x12
    1174:	ldr	w9, [x8, #4]
    1178:	ldr	w14, [sp, #96]
    117c:	add	w9, w14, w9
    1180:	str	w9, [sp, #96]
    1184:	ldur	x8, [x29, #-8]
    1188:	add	x8, x8, x10
    118c:	ldrh	w9, [sp, #90]
    1190:	mov	w12, w9
    1194:	mul	x12, x13, x12
    1198:	add	x8, x8, x12
    119c:	ldr	w9, [x8, #8]
    11a0:	ldr	w14, [sp, #92]
    11a4:	add	w9, w14, w9
    11a8:	str	w9, [sp, #92]
    11ac:	ldr	x8, [sp, #120]
    11b0:	ldur	w9, [x29, #-28]
    11b4:	add	w9, w9, #0x4
    11b8:	mov	w0, w9
    11bc:	sxtw	x12, w0
    11c0:	mul	x12, x11, x12
    11c4:	add	x8, x8, x12
    11c8:	ldrh	w9, [x8]
    11cc:	strh	w9, [sp, #90]
    11d0:	ldur	x8, [x29, #-8]
    11d4:	add	x8, x8, x10
    11d8:	ldrh	w9, [sp, #90]
    11dc:	mov	w12, w9
    11e0:	mul	x12, x13, x12
    11e4:	ldr	w9, [x8, x12]
    11e8:	ldr	w14, [sp, #100]
    11ec:	add	w9, w14, w9
    11f0:	str	w9, [sp, #100]
    11f4:	ldur	x8, [x29, #-8]
    11f8:	add	x8, x8, x10
    11fc:	ldrh	w9, [sp, #90]
    1200:	mov	w12, w9
    1204:	mul	x12, x13, x12
    1208:	add	x8, x8, x12
    120c:	ldr	w9, [x8, #4]
    1210:	ldr	w14, [sp, #96]
    1214:	add	w9, w14, w9
    1218:	str	w9, [sp, #96]
    121c:	ldur	x8, [x29, #-8]
    1220:	add	x8, x8, x10
    1224:	ldrh	w9, [sp, #90]
    1228:	mov	w12, w9
    122c:	mul	x12, x13, x12
    1230:	add	x8, x8, x12
    1234:	ldr	w9, [x8, #8]
    1238:	ldr	w14, [sp, #92]
    123c:	add	w9, w14, w9
    1240:	str	w9, [sp, #92]
    1244:	ldr	x8, [sp, #120]
    1248:	ldur	w9, [x29, #-28]
    124c:	add	w9, w9, #0x5
    1250:	mov	w0, w9
    1254:	sxtw	x12, w0
    1258:	mul	x12, x11, x12
    125c:	add	x8, x8, x12
    1260:	ldrh	w9, [x8]
    1264:	strh	w9, [sp, #90]
    1268:	ldur	x8, [x29, #-8]
    126c:	add	x8, x8, x10
    1270:	ldrh	w9, [sp, #90]
    1274:	mov	w12, w9
    1278:	mul	x12, x13, x12
    127c:	ldr	w9, [x8, x12]
    1280:	ldr	w14, [sp, #100]
    1284:	add	w9, w14, w9
    1288:	str	w9, [sp, #100]
    128c:	ldur	x8, [x29, #-8]
    1290:	add	x8, x8, x10
    1294:	ldrh	w9, [sp, #90]
    1298:	mov	w12, w9
    129c:	mul	x12, x13, x12
    12a0:	add	x8, x8, x12
    12a4:	ldr	w9, [x8, #4]
    12a8:	ldr	w14, [sp, #96]
    12ac:	add	w9, w14, w9
    12b0:	str	w9, [sp, #96]
    12b4:	ldur	x8, [x29, #-8]
    12b8:	add	x8, x8, x10
    12bc:	ldrh	w9, [sp, #90]
    12c0:	mov	w12, w9
    12c4:	mul	x12, x13, x12
    12c8:	add	x8, x8, x12
    12cc:	ldr	w9, [x8, #8]
    12d0:	ldr	w14, [sp, #92]
    12d4:	add	w9, w14, w9
    12d8:	str	w9, [sp, #92]
    12dc:	ldr	x8, [sp, #120]
    12e0:	ldur	w9, [x29, #-28]
    12e4:	add	w9, w9, #0x6
    12e8:	mov	w0, w9
    12ec:	sxtw	x12, w0
    12f0:	mul	x12, x11, x12
    12f4:	add	x8, x8, x12
    12f8:	ldrh	w9, [x8]
    12fc:	strh	w9, [sp, #90]
    1300:	ldur	x8, [x29, #-8]
    1304:	add	x8, x8, x10
    1308:	ldrh	w9, [sp, #90]
    130c:	mov	w12, w9
    1310:	mul	x12, x13, x12
    1314:	ldr	w9, [x8, x12]
    1318:	ldr	w14, [sp, #100]
    131c:	add	w9, w14, w9
    1320:	str	w9, [sp, #100]
    1324:	ldur	x8, [x29, #-8]
    1328:	add	x8, x8, x10
    132c:	ldrh	w9, [sp, #90]
    1330:	mov	w12, w9
    1334:	mul	x12, x13, x12
    1338:	add	x8, x8, x12
    133c:	ldr	w9, [x8, #4]
    1340:	ldr	w14, [sp, #96]
    1344:	add	w9, w14, w9
    1348:	str	w9, [sp, #96]
    134c:	ldur	x8, [x29, #-8]
    1350:	add	x8, x8, x10
    1354:	ldrh	w9, [sp, #90]
    1358:	mov	w12, w9
    135c:	mul	x12, x13, x12
    1360:	add	x8, x8, x12
    1364:	ldr	w9, [x8, #8]
    1368:	ldr	w14, [sp, #92]
    136c:	add	w9, w14, w9
    1370:	str	w9, [sp, #92]
    1374:	ldr	x8, [sp, #120]
    1378:	ldur	w9, [x29, #-28]
    137c:	add	w9, w9, #0x7
    1380:	mov	w0, w9
    1384:	sxtw	x12, w0
    1388:	mul	x12, x11, x12
    138c:	add	x8, x8, x12
    1390:	ldrh	w9, [x8]
    1394:	strh	w9, [sp, #90]
    1398:	ldur	x8, [x29, #-8]
    139c:	add	x8, x8, x10
    13a0:	ldrh	w9, [sp, #90]
    13a4:	mov	w12, w9
    13a8:	mul	x12, x13, x12
    13ac:	ldr	w9, [x8, x12]
    13b0:	ldr	w14, [sp, #100]
    13b4:	add	w9, w14, w9
    13b8:	str	w9, [sp, #100]
    13bc:	ldur	x8, [x29, #-8]
    13c0:	add	x8, x8, x10
    13c4:	ldrh	w9, [sp, #90]
    13c8:	mov	w12, w9
    13cc:	mul	x12, x13, x12
    13d0:	add	x8, x8, x12
    13d4:	ldr	w9, [x8, #4]
    13d8:	ldr	w14, [sp, #96]
    13dc:	add	w9, w14, w9
    13e0:	str	w9, [sp, #96]
    13e4:	ldur	x8, [x29, #-8]
    13e8:	add	x8, x8, x10
    13ec:	ldrh	w9, [sp, #90]
    13f0:	mov	w12, w9
    13f4:	mul	x12, x13, x12
    13f8:	add	x8, x8, x12
    13fc:	ldr	w9, [x8, #8]
    1400:	ldr	w14, [sp, #92]
    1404:	add	w9, w14, w9
    1408:	str	w9, [sp, #92]
    140c:	ldr	x8, [sp, #120]
    1410:	ldur	w9, [x29, #-28]
    1414:	add	w9, w9, #0x8
    1418:	mov	w0, w9
    141c:	sxtw	x12, w0
    1420:	mul	x12, x11, x12
    1424:	add	x8, x8, x12
    1428:	ldrh	w9, [x8]
    142c:	strh	w9, [sp, #90]
    1430:	ldur	x8, [x29, #-8]
    1434:	add	x8, x8, x10
    1438:	ldrh	w9, [sp, #90]
    143c:	mov	w12, w9
    1440:	mul	x12, x13, x12
    1444:	ldr	w9, [x8, x12]
    1448:	ldr	w14, [sp, #100]
    144c:	add	w9, w14, w9
    1450:	str	w9, [sp, #100]
    1454:	ldur	x8, [x29, #-8]
    1458:	add	x8, x8, x10
    145c:	ldrh	w9, [sp, #90]
    1460:	mov	w12, w9
    1464:	mul	x12, x13, x12
    1468:	add	x8, x8, x12
    146c:	ldr	w9, [x8, #4]
    1470:	ldr	w14, [sp, #96]
    1474:	add	w9, w14, w9
    1478:	str	w9, [sp, #96]
    147c:	ldur	x8, [x29, #-8]
    1480:	add	x8, x8, x10
    1484:	ldrh	w9, [sp, #90]
    1488:	mov	w12, w9
    148c:	mul	x12, x13, x12
    1490:	add	x8, x8, x12
    1494:	ldr	w9, [x8, #8]
    1498:	ldr	w14, [sp, #92]
    149c:	add	w9, w14, w9
    14a0:	str	w9, [sp, #92]
    14a4:	ldr	x8, [sp, #120]
    14a8:	ldur	w9, [x29, #-28]
    14ac:	add	w9, w9, #0x9
    14b0:	mov	w0, w9
    14b4:	sxtw	x12, w0
    14b8:	mul	x12, x11, x12
    14bc:	add	x8, x8, x12
    14c0:	ldrh	w9, [x8]
    14c4:	strh	w9, [sp, #90]
    14c8:	ldur	x8, [x29, #-8]
    14cc:	add	x8, x8, x10
    14d0:	ldrh	w9, [sp, #90]
    14d4:	mov	w12, w9
    14d8:	mul	x12, x13, x12
    14dc:	ldr	w9, [x8, x12]
    14e0:	ldr	w14, [sp, #100]
    14e4:	add	w9, w14, w9
    14e8:	str	w9, [sp, #100]
    14ec:	ldur	x8, [x29, #-8]
    14f0:	add	x8, x8, x10
    14f4:	ldrh	w9, [sp, #90]
    14f8:	mov	w12, w9
    14fc:	mul	x12, x13, x12
    1500:	add	x8, x8, x12
    1504:	ldr	w9, [x8, #4]
    1508:	ldr	w14, [sp, #96]
    150c:	add	w9, w14, w9
    1510:	str	w9, [sp, #96]
    1514:	ldur	x8, [x29, #-8]
    1518:	add	x8, x8, x10
    151c:	ldrh	w9, [sp, #90]
    1520:	mov	w12, w9
    1524:	mul	x12, x13, x12
    1528:	add	x8, x8, x12
    152c:	ldr	w9, [x8, #8]
    1530:	ldr	w14, [sp, #92]
    1534:	add	w9, w14, w9
    1538:	str	w9, [sp, #92]
    153c:	ldr	x8, [sp, #120]
    1540:	ldur	w9, [x29, #-28]
    1544:	add	w9, w9, #0xa
    1548:	mov	w0, w9
    154c:	sxtw	x12, w0
    1550:	mul	x12, x11, x12
    1554:	add	x8, x8, x12
    1558:	ldrh	w9, [x8]
    155c:	strh	w9, [sp, #90]
    1560:	ldur	x8, [x29, #-8]
    1564:	add	x8, x8, x10
    1568:	ldrh	w9, [sp, #90]
    156c:	mov	w12, w9
    1570:	mul	x12, x13, x12
    1574:	ldr	w9, [x8, x12]
    1578:	ldr	w14, [sp, #100]
    157c:	add	w9, w14, w9
    1580:	str	w9, [sp, #100]
    1584:	ldur	x8, [x29, #-8]
    1588:	add	x8, x8, x10
    158c:	ldrh	w9, [sp, #90]
    1590:	mov	w12, w9
    1594:	mul	x12, x13, x12
    1598:	add	x8, x8, x12
    159c:	ldr	w9, [x8, #4]
    15a0:	ldr	w14, [sp, #96]
    15a4:	add	w9, w14, w9
    15a8:	str	w9, [sp, #96]
    15ac:	ldur	x8, [x29, #-8]
    15b0:	add	x8, x8, x10
    15b4:	ldrh	w9, [sp, #90]
    15b8:	mov	w12, w9
    15bc:	mul	x12, x13, x12
    15c0:	add	x8, x8, x12
    15c4:	ldr	w9, [x8, #8]
    15c8:	ldr	w14, [sp, #92]
    15cc:	add	w9, w14, w9
    15d0:	str	w9, [sp, #92]
    15d4:	ldr	x8, [sp, #120]
    15d8:	ldur	w9, [x29, #-28]
    15dc:	add	w9, w9, #0xb
    15e0:	mov	w0, w9
    15e4:	sxtw	x12, w0
    15e8:	mul	x12, x11, x12
    15ec:	add	x8, x8, x12
    15f0:	ldrh	w9, [x8]
    15f4:	strh	w9, [sp, #90]
    15f8:	ldur	x8, [x29, #-8]
    15fc:	add	x8, x8, x10
    1600:	ldrh	w9, [sp, #90]
    1604:	mov	w12, w9
    1608:	mul	x12, x13, x12
    160c:	ldr	w9, [x8, x12]
    1610:	ldr	w14, [sp, #100]
    1614:	add	w9, w14, w9
    1618:	str	w9, [sp, #100]
    161c:	ldur	x8, [x29, #-8]
    1620:	add	x8, x8, x10
    1624:	ldrh	w9, [sp, #90]
    1628:	mov	w12, w9
    162c:	mul	x12, x13, x12
    1630:	add	x8, x8, x12
    1634:	ldr	w9, [x8, #4]
    1638:	ldr	w14, [sp, #96]
    163c:	add	w9, w14, w9
    1640:	str	w9, [sp, #96]
    1644:	ldur	x8, [x29, #-8]
    1648:	add	x8, x8, x10
    164c:	ldrh	w9, [sp, #90]
    1650:	mov	w12, w9
    1654:	mul	x12, x13, x12
    1658:	add	x8, x8, x12
    165c:	ldr	w9, [x8, #8]
    1660:	ldr	w14, [sp, #92]
    1664:	add	w9, w14, w9
    1668:	str	w9, [sp, #92]
    166c:	ldr	x8, [sp, #120]
    1670:	ldur	w9, [x29, #-28]
    1674:	add	w9, w9, #0xc
    1678:	mov	w0, w9
    167c:	sxtw	x12, w0
    1680:	mul	x12, x11, x12
    1684:	add	x8, x8, x12
    1688:	ldrh	w9, [x8]
    168c:	strh	w9, [sp, #90]
    1690:	ldur	x8, [x29, #-8]
    1694:	add	x8, x8, x10
    1698:	ldrh	w9, [sp, #90]
    169c:	mov	w12, w9
    16a0:	mul	x12, x13, x12
    16a4:	ldr	w9, [x8, x12]
    16a8:	ldr	w14, [sp, #100]
    16ac:	add	w9, w14, w9
    16b0:	str	w9, [sp, #100]
    16b4:	ldur	x8, [x29, #-8]
    16b8:	add	x8, x8, x10
    16bc:	ldrh	w9, [sp, #90]
    16c0:	mov	w12, w9
    16c4:	mul	x12, x13, x12
    16c8:	add	x8, x8, x12
    16cc:	ldr	w9, [x8, #4]
    16d0:	ldr	w14, [sp, #96]
    16d4:	add	w9, w14, w9
    16d8:	str	w9, [sp, #96]
    16dc:	ldur	x8, [x29, #-8]
    16e0:	add	x8, x8, x10
    16e4:	ldrh	w9, [sp, #90]
    16e8:	mov	w12, w9
    16ec:	mul	x12, x13, x12
    16f0:	add	x8, x8, x12
    16f4:	ldr	w9, [x8, #8]
    16f8:	ldr	w14, [sp, #92]
    16fc:	add	w9, w14, w9
    1700:	str	w9, [sp, #92]
    1704:	ldr	x8, [sp, #120]
    1708:	ldur	w9, [x29, #-28]
    170c:	add	w9, w9, #0xd
    1710:	mov	w0, w9
    1714:	sxtw	x12, w0
    1718:	mul	x12, x11, x12
    171c:	add	x8, x8, x12
    1720:	ldrh	w9, [x8]
    1724:	strh	w9, [sp, #90]
    1728:	ldur	x8, [x29, #-8]
    172c:	add	x8, x8, x10
    1730:	ldrh	w9, [sp, #90]
    1734:	mov	w12, w9
    1738:	mul	x12, x13, x12
    173c:	ldr	w9, [x8, x12]
    1740:	ldr	w14, [sp, #100]
    1744:	add	w9, w14, w9
    1748:	str	w9, [sp, #100]
    174c:	ldur	x8, [x29, #-8]
    1750:	add	x8, x8, x10
    1754:	ldrh	w9, [sp, #90]
    1758:	mov	w12, w9
    175c:	mul	x12, x13, x12
    1760:	add	x8, x8, x12
    1764:	ldr	w9, [x8, #4]
    1768:	ldr	w14, [sp, #96]
    176c:	add	w9, w14, w9
    1770:	str	w9, [sp, #96]
    1774:	ldur	x8, [x29, #-8]
    1778:	add	x8, x8, x10
    177c:	ldrh	w9, [sp, #90]
    1780:	mov	w12, w9
    1784:	mul	x12, x13, x12
    1788:	add	x8, x8, x12
    178c:	ldr	w9, [x8, #8]
    1790:	ldr	w14, [sp, #92]
    1794:	add	w9, w14, w9
    1798:	str	w9, [sp, #92]
    179c:	ldr	x8, [sp, #120]
    17a0:	ldur	w9, [x29, #-28]
    17a4:	add	w9, w9, #0xe
    17a8:	mov	w0, w9
    17ac:	sxtw	x12, w0
    17b0:	mul	x12, x11, x12
    17b4:	add	x8, x8, x12
    17b8:	ldrh	w9, [x8]
    17bc:	strh	w9, [sp, #90]
    17c0:	ldur	x8, [x29, #-8]
    17c4:	add	x8, x8, x10
    17c8:	ldrh	w9, [sp, #90]
    17cc:	mov	w12, w9
    17d0:	mul	x12, x13, x12
    17d4:	ldr	w9, [x8, x12]
    17d8:	ldr	w14, [sp, #100]
    17dc:	add	w9, w14, w9
    17e0:	str	w9, [sp, #100]
    17e4:	ldur	x8, [x29, #-8]
    17e8:	add	x8, x8, x10
    17ec:	ldrh	w9, [sp, #90]
    17f0:	mov	w12, w9
    17f4:	mul	x12, x13, x12
    17f8:	add	x8, x8, x12
    17fc:	ldr	w9, [x8, #4]
    1800:	ldr	w14, [sp, #96]
    1804:	add	w9, w14, w9
    1808:	str	w9, [sp, #96]
    180c:	ldur	x8, [x29, #-8]
    1810:	add	x8, x8, x10
    1814:	ldrh	w9, [sp, #90]
    1818:	mov	w12, w9
    181c:	mul	x12, x13, x12
    1820:	add	x8, x8, x12
    1824:	ldr	w9, [x8, #8]
    1828:	ldr	w14, [sp, #92]
    182c:	add	w9, w14, w9
    1830:	str	w9, [sp, #92]
    1834:	ldr	x8, [sp, #120]
    1838:	ldur	w9, [x29, #-28]
    183c:	add	w9, w9, #0xf
    1840:	mov	w0, w9
    1844:	sxtw	x12, w0
    1848:	mul	x12, x11, x12
    184c:	add	x8, x8, x12
    1850:	ldrh	w9, [x8]
    1854:	strh	w9, [sp, #90]
    1858:	ldur	x8, [x29, #-8]
    185c:	add	x8, x8, x10
    1860:	ldrh	w9, [sp, #90]
    1864:	mov	w12, w9
    1868:	mul	x12, x13, x12
    186c:	ldr	w9, [x8, x12]
    1870:	ldr	w14, [sp, #100]
    1874:	add	w9, w14, w9
    1878:	str	w9, [sp, #100]
    187c:	ldur	x8, [x29, #-8]
    1880:	add	x8, x8, x10
    1884:	ldrh	w9, [sp, #90]
    1888:	mov	w12, w9
    188c:	mul	x12, x13, x12
    1890:	add	x8, x8, x12
    1894:	ldr	w9, [x8, #4]
    1898:	ldr	w14, [sp, #96]
    189c:	add	w9, w14, w9
    18a0:	str	w9, [sp, #96]
    18a4:	ldur	x8, [x29, #-8]
    18a8:	add	x8, x8, x10
    18ac:	ldrh	w9, [sp, #90]
    18b0:	mov	w12, w9
    18b4:	mul	x12, x13, x12
    18b8:	add	x8, x8, x12
    18bc:	ldr	w9, [x8, #8]
    18c0:	ldr	w14, [sp, #92]
    18c4:	add	w9, w14, w9
    18c8:	str	w9, [sp, #92]
    18cc:	ldr	x8, [sp, #120]
    18d0:	ldur	w9, [x29, #-28]
    18d4:	add	w9, w9, #0x10
    18d8:	mov	w0, w9
    18dc:	sxtw	x12, w0
    18e0:	mul	x12, x11, x12
    18e4:	add	x8, x8, x12
    18e8:	ldrh	w9, [x8]
    18ec:	strh	w9, [sp, #90]
    18f0:	ldur	x8, [x29, #-8]
    18f4:	add	x8, x8, x10
    18f8:	ldrh	w9, [sp, #90]
    18fc:	mov	w12, w9
    1900:	mul	x12, x13, x12
    1904:	ldr	w9, [x8, x12]
    1908:	ldr	w14, [sp, #100]
    190c:	add	w9, w14, w9
    1910:	str	w9, [sp, #100]
    1914:	ldur	x8, [x29, #-8]
    1918:	add	x8, x8, x10
    191c:	ldrh	w9, [sp, #90]
    1920:	mov	w12, w9
    1924:	mul	x12, x13, x12
    1928:	add	x8, x8, x12
    192c:	ldr	w9, [x8, #4]
    1930:	ldr	w14, [sp, #96]
    1934:	add	w9, w14, w9
    1938:	str	w9, [sp, #96]
    193c:	ldur	x8, [x29, #-8]
    1940:	add	x8, x8, x10
    1944:	ldrh	w9, [sp, #90]
    1948:	mov	w12, w9
    194c:	mul	x12, x13, x12
    1950:	add	x8, x8, x12
    1954:	ldr	w9, [x8, #8]
    1958:	ldr	w14, [sp, #92]
    195c:	add	w9, w14, w9
    1960:	str	w9, [sp, #92]
    1964:	ldr	x8, [sp, #120]
    1968:	ldur	w9, [x29, #-28]
    196c:	add	w9, w9, #0x11
    1970:	mov	w0, w9
    1974:	sxtw	x12, w0
    1978:	mul	x12, x11, x12
    197c:	add	x8, x8, x12
    1980:	ldrh	w9, [x8]
    1984:	strh	w9, [sp, #90]
    1988:	ldur	x8, [x29, #-8]
    198c:	add	x8, x8, x10
    1990:	ldrh	w9, [sp, #90]
    1994:	mov	w12, w9
    1998:	mul	x12, x13, x12
    199c:	ldr	w9, [x8, x12]
    19a0:	ldr	w14, [sp, #100]
    19a4:	add	w9, w14, w9
    19a8:	str	w9, [sp, #100]
    19ac:	ldur	x8, [x29, #-8]
    19b0:	add	x8, x8, x10
    19b4:	ldrh	w9, [sp, #90]
    19b8:	mov	w12, w9
    19bc:	mul	x12, x13, x12
    19c0:	add	x8, x8, x12
    19c4:	ldr	w9, [x8, #4]
    19c8:	ldr	w14, [sp, #96]
    19cc:	add	w9, w14, w9
    19d0:	str	w9, [sp, #96]
    19d4:	ldur	x8, [x29, #-8]
    19d8:	add	x8, x8, x10
    19dc:	ldrh	w9, [sp, #90]
    19e0:	mov	w12, w9
    19e4:	mul	x12, x13, x12
    19e8:	add	x8, x8, x12
    19ec:	ldr	w9, [x8, #8]
    19f0:	ldr	w14, [sp, #92]
    19f4:	add	w9, w14, w9
    19f8:	str	w9, [sp, #92]
    19fc:	ldr	x8, [sp, #120]
    1a00:	ldur	w9, [x29, #-28]
    1a04:	add	w9, w9, #0x12
    1a08:	mov	w0, w9
    1a0c:	sxtw	x12, w0
    1a10:	mul	x12, x11, x12
    1a14:	add	x8, x8, x12
    1a18:	ldrh	w9, [x8]
    1a1c:	strh	w9, [sp, #90]
    1a20:	ldur	x8, [x29, #-8]
    1a24:	add	x8, x8, x10
    1a28:	ldrh	w9, [sp, #90]
    1a2c:	mov	w12, w9
    1a30:	mul	x12, x13, x12
    1a34:	ldr	w9, [x8, x12]
    1a38:	ldr	w14, [sp, #100]
    1a3c:	add	w9, w14, w9
    1a40:	str	w9, [sp, #100]
    1a44:	ldur	x8, [x29, #-8]
    1a48:	add	x8, x8, x10
    1a4c:	ldrh	w9, [sp, #90]
    1a50:	mov	w12, w9
    1a54:	mul	x12, x13, x12
    1a58:	add	x8, x8, x12
    1a5c:	ldr	w9, [x8, #4]
    1a60:	ldr	w14, [sp, #96]
    1a64:	add	w9, w14, w9
    1a68:	str	w9, [sp, #96]
    1a6c:	ldur	x8, [x29, #-8]
    1a70:	add	x8, x8, x10
    1a74:	ldrh	w9, [sp, #90]
    1a78:	mov	w12, w9
    1a7c:	mul	x12, x13, x12
    1a80:	add	x8, x8, x12
    1a84:	ldr	w9, [x8, #8]
    1a88:	ldr	w14, [sp, #92]
    1a8c:	add	w9, w14, w9
    1a90:	str	w9, [sp, #92]
    1a94:	ldr	x8, [sp, #120]
    1a98:	ldur	w9, [x29, #-28]
    1a9c:	add	w9, w9, #0x13
    1aa0:	mov	w0, w9
    1aa4:	sxtw	x12, w0
    1aa8:	mul	x12, x11, x12
    1aac:	add	x8, x8, x12
    1ab0:	ldrh	w9, [x8]
    1ab4:	strh	w9, [sp, #90]
    1ab8:	ldur	x8, [x29, #-8]
    1abc:	add	x8, x8, x10
    1ac0:	ldrh	w9, [sp, #90]
    1ac4:	mov	w12, w9
    1ac8:	mul	x12, x13, x12
    1acc:	ldr	w9, [x8, x12]
    1ad0:	ldr	w14, [sp, #100]
    1ad4:	add	w9, w14, w9
    1ad8:	str	w9, [sp, #100]
    1adc:	ldur	x8, [x29, #-8]
    1ae0:	add	x8, x8, x10
    1ae4:	ldrh	w9, [sp, #90]
    1ae8:	mov	w12, w9
    1aec:	mul	x12, x13, x12
    1af0:	add	x8, x8, x12
    1af4:	ldr	w9, [x8, #4]
    1af8:	ldr	w14, [sp, #96]
    1afc:	add	w9, w14, w9
    1b00:	str	w9, [sp, #96]
    1b04:	ldur	x8, [x29, #-8]
    1b08:	add	x8, x8, x10
    1b0c:	ldrh	w9, [sp, #90]
    1b10:	mov	w12, w9
    1b14:	mul	x12, x13, x12
    1b18:	add	x8, x8, x12
    1b1c:	ldr	w9, [x8, #8]
    1b20:	ldr	w14, [sp, #92]
    1b24:	add	w9, w14, w9
    1b28:	str	w9, [sp, #92]
    1b2c:	ldr	x8, [sp, #120]
    1b30:	ldur	w9, [x29, #-28]
    1b34:	add	w9, w9, #0x14
    1b38:	mov	w0, w9
    1b3c:	sxtw	x12, w0
    1b40:	mul	x12, x11, x12
    1b44:	add	x8, x8, x12
    1b48:	ldrh	w9, [x8]
    1b4c:	strh	w9, [sp, #90]
    1b50:	ldur	x8, [x29, #-8]
    1b54:	add	x8, x8, x10
    1b58:	ldrh	w9, [sp, #90]
    1b5c:	mov	w12, w9
    1b60:	mul	x12, x13, x12
    1b64:	ldr	w9, [x8, x12]
    1b68:	ldr	w14, [sp, #100]
    1b6c:	add	w9, w14, w9
    1b70:	str	w9, [sp, #100]
    1b74:	ldur	x8, [x29, #-8]
    1b78:	add	x8, x8, x10
    1b7c:	ldrh	w9, [sp, #90]
    1b80:	mov	w12, w9
    1b84:	mul	x12, x13, x12
    1b88:	add	x8, x8, x12
    1b8c:	ldr	w9, [x8, #4]
    1b90:	ldr	w14, [sp, #96]
    1b94:	add	w9, w14, w9
    1b98:	str	w9, [sp, #96]
    1b9c:	ldur	x8, [x29, #-8]
    1ba0:	add	x8, x8, x10
    1ba4:	ldrh	w9, [sp, #90]
    1ba8:	mov	w12, w9
    1bac:	mul	x12, x13, x12
    1bb0:	add	x8, x8, x12
    1bb4:	ldr	w9, [x8, #8]
    1bb8:	ldr	w14, [sp, #92]
    1bbc:	add	w9, w14, w9
    1bc0:	str	w9, [sp, #92]
    1bc4:	ldr	x8, [sp, #120]
    1bc8:	ldur	w9, [x29, #-28]
    1bcc:	add	w9, w9, #0x15
    1bd0:	mov	w0, w9
    1bd4:	sxtw	x12, w0
    1bd8:	mul	x12, x11, x12
    1bdc:	add	x8, x8, x12
    1be0:	ldrh	w9, [x8]
    1be4:	strh	w9, [sp, #90]
    1be8:	ldur	x8, [x29, #-8]
    1bec:	add	x8, x8, x10
    1bf0:	ldrh	w9, [sp, #90]
    1bf4:	mov	w12, w9
    1bf8:	mul	x12, x13, x12
    1bfc:	ldr	w9, [x8, x12]
    1c00:	ldr	w14, [sp, #100]
    1c04:	add	w9, w14, w9
    1c08:	str	w9, [sp, #100]
    1c0c:	ldur	x8, [x29, #-8]
    1c10:	add	x8, x8, x10
    1c14:	ldrh	w9, [sp, #90]
    1c18:	mov	w12, w9
    1c1c:	mul	x12, x13, x12
    1c20:	add	x8, x8, x12
    1c24:	ldr	w9, [x8, #4]
    1c28:	ldr	w14, [sp, #96]
    1c2c:	add	w9, w14, w9
    1c30:	str	w9, [sp, #96]
    1c34:	ldur	x8, [x29, #-8]
    1c38:	add	x8, x8, x10
    1c3c:	ldrh	w9, [sp, #90]
    1c40:	mov	w12, w9
    1c44:	mul	x12, x13, x12
    1c48:	add	x8, x8, x12
    1c4c:	ldr	w9, [x8, #8]
    1c50:	ldr	w14, [sp, #92]
    1c54:	add	w9, w14, w9
    1c58:	str	w9, [sp, #92]
    1c5c:	ldr	x8, [sp, #120]
    1c60:	ldur	w9, [x29, #-28]
    1c64:	add	w9, w9, #0x16
    1c68:	mov	w0, w9
    1c6c:	sxtw	x12, w0
    1c70:	mul	x12, x11, x12
    1c74:	add	x8, x8, x12
    1c78:	ldrh	w9, [x8]
    1c7c:	strh	w9, [sp, #90]
    1c80:	ldur	x8, [x29, #-8]
    1c84:	add	x8, x8, x10
    1c88:	ldrh	w9, [sp, #90]
    1c8c:	mov	w12, w9
    1c90:	mul	x12, x13, x12
    1c94:	ldr	w9, [x8, x12]
    1c98:	ldr	w14, [sp, #100]
    1c9c:	add	w9, w14, w9
    1ca0:	str	w9, [sp, #100]
    1ca4:	ldur	x8, [x29, #-8]
    1ca8:	add	x8, x8, x10
    1cac:	ldrh	w9, [sp, #90]
    1cb0:	mov	w12, w9
    1cb4:	mul	x12, x13, x12
    1cb8:	add	x8, x8, x12
    1cbc:	ldr	w9, [x8, #4]
    1cc0:	ldr	w14, [sp, #96]
    1cc4:	add	w9, w14, w9
    1cc8:	str	w9, [sp, #96]
    1ccc:	ldur	x8, [x29, #-8]
    1cd0:	add	x8, x8, x10
    1cd4:	ldrh	w9, [sp, #90]
    1cd8:	mov	w12, w9
    1cdc:	mul	x12, x13, x12
    1ce0:	add	x8, x8, x12
    1ce4:	ldr	w9, [x8, #8]
    1ce8:	ldr	w14, [sp, #92]
    1cec:	add	w9, w14, w9
    1cf0:	str	w9, [sp, #92]
    1cf4:	ldr	x8, [sp, #120]
    1cf8:	ldur	w9, [x29, #-28]
    1cfc:	add	w9, w9, #0x17
    1d00:	mov	w0, w9
    1d04:	sxtw	x12, w0
    1d08:	mul	x12, x11, x12
    1d0c:	add	x8, x8, x12
    1d10:	ldrh	w9, [x8]
    1d14:	strh	w9, [sp, #90]
    1d18:	ldur	x8, [x29, #-8]
    1d1c:	add	x8, x8, x10
    1d20:	ldrh	w9, [sp, #90]
    1d24:	mov	w12, w9
    1d28:	mul	x12, x13, x12
    1d2c:	ldr	w9, [x8, x12]
    1d30:	ldr	w14, [sp, #100]
    1d34:	add	w9, w14, w9
    1d38:	str	w9, [sp, #100]
    1d3c:	ldur	x8, [x29, #-8]
    1d40:	add	x8, x8, x10
    1d44:	ldrh	w9, [sp, #90]
    1d48:	mov	w12, w9
    1d4c:	mul	x12, x13, x12
    1d50:	add	x8, x8, x12
    1d54:	ldr	w9, [x8, #4]
    1d58:	ldr	w14, [sp, #96]
    1d5c:	add	w9, w14, w9
    1d60:	str	w9, [sp, #96]
    1d64:	ldur	x8, [x29, #-8]
    1d68:	add	x8, x8, x10
    1d6c:	ldrh	w9, [sp, #90]
    1d70:	mov	w12, w9
    1d74:	mul	x12, x13, x12
    1d78:	add	x8, x8, x12
    1d7c:	ldr	w9, [x8, #8]
    1d80:	ldr	w14, [sp, #92]
    1d84:	add	w9, w14, w9
    1d88:	str	w9, [sp, #92]
    1d8c:	ldr	x8, [sp, #120]
    1d90:	ldur	w9, [x29, #-28]
    1d94:	add	w9, w9, #0x18
    1d98:	mov	w0, w9
    1d9c:	sxtw	x12, w0
    1da0:	mul	x12, x11, x12
    1da4:	add	x8, x8, x12
    1da8:	ldrh	w9, [x8]
    1dac:	strh	w9, [sp, #90]
    1db0:	ldur	x8, [x29, #-8]
    1db4:	add	x8, x8, x10
    1db8:	ldrh	w9, [sp, #90]
    1dbc:	mov	w12, w9
    1dc0:	mul	x12, x13, x12
    1dc4:	ldr	w9, [x8, x12]
    1dc8:	ldr	w14, [sp, #100]
    1dcc:	add	w9, w14, w9
    1dd0:	str	w9, [sp, #100]
    1dd4:	ldur	x8, [x29, #-8]
    1dd8:	add	x8, x8, x10
    1ddc:	ldrh	w9, [sp, #90]
    1de0:	mov	w12, w9
    1de4:	mul	x12, x13, x12
    1de8:	add	x8, x8, x12
    1dec:	ldr	w9, [x8, #4]
    1df0:	ldr	w14, [sp, #96]
    1df4:	add	w9, w14, w9
    1df8:	str	w9, [sp, #96]
    1dfc:	ldur	x8, [x29, #-8]
    1e00:	add	x8, x8, x10
    1e04:	ldrh	w9, [sp, #90]
    1e08:	mov	w12, w9
    1e0c:	mul	x12, x13, x12
    1e10:	add	x8, x8, x12
    1e14:	ldr	w9, [x8, #8]
    1e18:	ldr	w14, [sp, #92]
    1e1c:	add	w9, w14, w9
    1e20:	str	w9, [sp, #92]
    1e24:	ldr	x8, [sp, #120]
    1e28:	ldur	w9, [x29, #-28]
    1e2c:	add	w9, w9, #0x19
    1e30:	mov	w0, w9
    1e34:	sxtw	x12, w0
    1e38:	mul	x12, x11, x12
    1e3c:	add	x8, x8, x12
    1e40:	ldrh	w9, [x8]
    1e44:	strh	w9, [sp, #90]
    1e48:	ldur	x8, [x29, #-8]
    1e4c:	add	x8, x8, x10
    1e50:	ldrh	w9, [sp, #90]
    1e54:	mov	w12, w9
    1e58:	mul	x12, x13, x12
    1e5c:	ldr	w9, [x8, x12]
    1e60:	ldr	w14, [sp, #100]
    1e64:	add	w9, w14, w9
    1e68:	str	w9, [sp, #100]
    1e6c:	ldur	x8, [x29, #-8]
    1e70:	add	x8, x8, x10
    1e74:	ldrh	w9, [sp, #90]
    1e78:	mov	w12, w9
    1e7c:	mul	x12, x13, x12
    1e80:	add	x8, x8, x12
    1e84:	ldr	w9, [x8, #4]
    1e88:	ldr	w14, [sp, #96]
    1e8c:	add	w9, w14, w9
    1e90:	str	w9, [sp, #96]
    1e94:	ldur	x8, [x29, #-8]
    1e98:	add	x8, x8, x10
    1e9c:	ldrh	w9, [sp, #90]
    1ea0:	mov	w12, w9
    1ea4:	mul	x12, x13, x12
    1ea8:	add	x8, x8, x12
    1eac:	ldr	w9, [x8, #8]
    1eb0:	ldr	w14, [sp, #92]
    1eb4:	add	w9, w14, w9
    1eb8:	str	w9, [sp, #92]
    1ebc:	ldr	x8, [sp, #120]
    1ec0:	ldur	w9, [x29, #-28]
    1ec4:	add	w9, w9, #0x1a
    1ec8:	mov	w0, w9
    1ecc:	sxtw	x12, w0
    1ed0:	mul	x12, x11, x12
    1ed4:	add	x8, x8, x12
    1ed8:	ldrh	w9, [x8]
    1edc:	strh	w9, [sp, #90]
    1ee0:	ldur	x8, [x29, #-8]
    1ee4:	add	x8, x8, x10
    1ee8:	ldrh	w9, [sp, #90]
    1eec:	mov	w12, w9
    1ef0:	mul	x12, x13, x12
    1ef4:	ldr	w9, [x8, x12]
    1ef8:	ldr	w14, [sp, #100]
    1efc:	add	w9, w14, w9
    1f00:	str	w9, [sp, #100]
    1f04:	ldur	x8, [x29, #-8]
    1f08:	add	x8, x8, x10
    1f0c:	ldrh	w9, [sp, #90]
    1f10:	mov	w12, w9
    1f14:	mul	x12, x13, x12
    1f18:	add	x8, x8, x12
    1f1c:	ldr	w9, [x8, #4]
    1f20:	ldr	w14, [sp, #96]
    1f24:	add	w9, w14, w9
    1f28:	str	w9, [sp, #96]
    1f2c:	ldur	x8, [x29, #-8]
    1f30:	add	x8, x8, x10
    1f34:	ldrh	w9, [sp, #90]
    1f38:	mov	w12, w9
    1f3c:	mul	x12, x13, x12
    1f40:	add	x8, x8, x12
    1f44:	ldr	w9, [x8, #8]
    1f48:	ldr	w14, [sp, #92]
    1f4c:	add	w9, w14, w9
    1f50:	str	w9, [sp, #92]
    1f54:	ldr	x8, [sp, #120]
    1f58:	ldur	w9, [x29, #-28]
    1f5c:	add	w9, w9, #0x1b
    1f60:	mov	w0, w9
    1f64:	sxtw	x12, w0
    1f68:	mul	x12, x11, x12
    1f6c:	add	x8, x8, x12
    1f70:	ldrh	w9, [x8]
    1f74:	strh	w9, [sp, #90]
    1f78:	ldur	x8, [x29, #-8]
    1f7c:	add	x8, x8, x10
    1f80:	ldrh	w9, [sp, #90]
    1f84:	mov	w12, w9
    1f88:	mul	x12, x13, x12
    1f8c:	ldr	w9, [x8, x12]
    1f90:	ldr	w14, [sp, #100]
    1f94:	add	w9, w14, w9
    1f98:	str	w9, [sp, #100]
    1f9c:	ldur	x8, [x29, #-8]
    1fa0:	add	x8, x8, x10
    1fa4:	ldrh	w9, [sp, #90]
    1fa8:	mov	w12, w9
    1fac:	mul	x12, x13, x12
    1fb0:	add	x8, x8, x12
    1fb4:	ldr	w9, [x8, #4]
    1fb8:	ldr	w14, [sp, #96]
    1fbc:	add	w9, w14, w9
    1fc0:	str	w9, [sp, #96]
    1fc4:	ldur	x8, [x29, #-8]
    1fc8:	add	x8, x8, x10
    1fcc:	ldrh	w9, [sp, #90]
    1fd0:	mov	w12, w9
    1fd4:	mul	x12, x13, x12
    1fd8:	add	x8, x8, x12
    1fdc:	ldr	w9, [x8, #8]
    1fe0:	ldr	w14, [sp, #92]
    1fe4:	add	w9, w14, w9
    1fe8:	str	w9, [sp, #92]
    1fec:	ldr	x8, [sp, #120]
    1ff0:	ldur	w9, [x29, #-28]
    1ff4:	add	w9, w9, #0x1c
    1ff8:	mov	w0, w9
    1ffc:	sxtw	x12, w0
    2000:	mul	x12, x11, x12
    2004:	add	x8, x8, x12
    2008:	ldrh	w9, [x8]
    200c:	strh	w9, [sp, #90]
    2010:	ldur	x8, [x29, #-8]
    2014:	add	x8, x8, x10
    2018:	ldrh	w9, [sp, #90]
    201c:	mov	w12, w9
    2020:	mul	x12, x13, x12
    2024:	ldr	w9, [x8, x12]
    2028:	ldr	w14, [sp, #100]
    202c:	add	w9, w14, w9
    2030:	str	w9, [sp, #100]
    2034:	ldur	x8, [x29, #-8]
    2038:	add	x8, x8, x10
    203c:	ldrh	w9, [sp, #90]
    2040:	mov	w12, w9
    2044:	mul	x12, x13, x12
    2048:	add	x8, x8, x12
    204c:	ldr	w9, [x8, #4]
    2050:	ldr	w14, [sp, #96]
    2054:	add	w9, w14, w9
    2058:	str	w9, [sp, #96]
    205c:	ldur	x8, [x29, #-8]
    2060:	add	x8, x8, x10
    2064:	ldrh	w9, [sp, #90]
    2068:	mov	w12, w9
    206c:	mul	x12, x13, x12
    2070:	add	x8, x8, x12
    2074:	ldr	w9, [x8, #8]
    2078:	ldr	w14, [sp, #92]
    207c:	add	w9, w14, w9
    2080:	str	w9, [sp, #92]
    2084:	ldr	x8, [sp, #120]
    2088:	ldur	w9, [x29, #-28]
    208c:	add	w9, w9, #0x1d
    2090:	mov	w0, w9
    2094:	sxtw	x12, w0
    2098:	mul	x12, x11, x12
    209c:	add	x8, x8, x12
    20a0:	ldrh	w9, [x8]
    20a4:	strh	w9, [sp, #90]
    20a8:	ldur	x8, [x29, #-8]
    20ac:	add	x8, x8, x10
    20b0:	ldrh	w9, [sp, #90]
    20b4:	mov	w12, w9
    20b8:	mul	x12, x13, x12
    20bc:	ldr	w9, [x8, x12]
    20c0:	ldr	w14, [sp, #100]
    20c4:	add	w9, w14, w9
    20c8:	str	w9, [sp, #100]
    20cc:	ldur	x8, [x29, #-8]
    20d0:	add	x8, x8, x10
    20d4:	ldrh	w9, [sp, #90]
    20d8:	mov	w12, w9
    20dc:	mul	x12, x13, x12
    20e0:	add	x8, x8, x12
    20e4:	ldr	w9, [x8, #4]
    20e8:	ldr	w14, [sp, #96]
    20ec:	add	w9, w14, w9
    20f0:	str	w9, [sp, #96]
    20f4:	ldur	x8, [x29, #-8]
    20f8:	add	x8, x8, x10
    20fc:	ldrh	w9, [sp, #90]
    2100:	mov	w12, w9
    2104:	mul	x12, x13, x12
    2108:	add	x8, x8, x12
    210c:	ldr	w9, [x8, #8]
    2110:	ldr	w14, [sp, #92]
    2114:	add	w9, w14, w9
    2118:	str	w9, [sp, #92]
    211c:	ldr	x8, [sp, #120]
    2120:	ldur	w9, [x29, #-28]
    2124:	add	w9, w9, #0x1e
    2128:	mov	w0, w9
    212c:	sxtw	x12, w0
    2130:	mul	x12, x11, x12
    2134:	add	x8, x8, x12
    2138:	ldrh	w9, [x8]
    213c:	strh	w9, [sp, #90]
    2140:	ldur	x8, [x29, #-8]
    2144:	add	x8, x8, x10
    2148:	ldrh	w9, [sp, #90]
    214c:	mov	w12, w9
    2150:	mul	x12, x13, x12
    2154:	ldr	w9, [x8, x12]
    2158:	ldr	w14, [sp, #100]
    215c:	add	w9, w14, w9
    2160:	str	w9, [sp, #100]
    2164:	ldur	x8, [x29, #-8]
    2168:	add	x8, x8, x10
    216c:	ldrh	w9, [sp, #90]
    2170:	mov	w12, w9
    2174:	mul	x12, x13, x12
    2178:	add	x8, x8, x12
    217c:	ldr	w9, [x8, #4]
    2180:	ldr	w14, [sp, #96]
    2184:	add	w9, w14, w9
    2188:	str	w9, [sp, #96]
    218c:	ldur	x8, [x29, #-8]
    2190:	add	x8, x8, x10
    2194:	ldrh	w9, [sp, #90]
    2198:	mov	w12, w9
    219c:	mul	x12, x13, x12
    21a0:	add	x8, x8, x12
    21a4:	ldr	w9, [x8, #8]
    21a8:	ldr	w14, [sp, #92]
    21ac:	add	w9, w14, w9
    21b0:	str	w9, [sp, #92]
    21b4:	ldr	x8, [sp, #120]
    21b8:	ldur	w9, [x29, #-28]
    21bc:	add	w9, w9, #0x1f
    21c0:	mov	w0, w9
    21c4:	sxtw	x12, w0
    21c8:	mul	x12, x11, x12
    21cc:	add	x8, x8, x12
    21d0:	ldrh	w9, [x8]
    21d4:	strh	w9, [sp, #90]
    21d8:	ldur	x8, [x29, #-8]
    21dc:	add	x8, x8, x10
    21e0:	ldrh	w9, [sp, #90]
    21e4:	mov	w12, w9
    21e8:	mul	x12, x13, x12
    21ec:	ldr	w9, [x8, x12]
    21f0:	ldr	w14, [sp, #100]
    21f4:	add	w9, w14, w9
    21f8:	str	w9, [sp, #100]
    21fc:	ldur	x8, [x29, #-8]
    2200:	add	x8, x8, x10
    2204:	ldrh	w9, [sp, #90]
    2208:	mov	w12, w9
    220c:	mul	x12, x13, x12
    2210:	add	x8, x8, x12
    2214:	ldr	w9, [x8, #4]
    2218:	ldr	w14, [sp, #96]
    221c:	add	w9, w14, w9
    2220:	str	w9, [sp, #96]
    2224:	ldur	x8, [x29, #-8]
    2228:	add	x8, x8, x10
    222c:	ldrh	w9, [sp, #90]
    2230:	mov	w12, w9
    2234:	mul	x12, x13, x12
    2238:	add	x8, x8, x12
    223c:	ldr	w9, [x8, #8]
    2240:	ldr	w14, [sp, #92]
    2244:	add	w9, w14, w9
    2248:	str	w9, [sp, #92]
    224c:	ldr	x8, [sp, #120]
    2250:	ldur	w9, [x29, #-28]
    2254:	add	w9, w9, #0x20
    2258:	mov	w0, w9
    225c:	sxtw	x12, w0
    2260:	mul	x12, x11, x12
    2264:	add	x8, x8, x12
    2268:	ldrh	w9, [x8]
    226c:	strh	w9, [sp, #90]
    2270:	ldur	x8, [x29, #-8]
    2274:	add	x8, x8, x10
    2278:	ldrh	w9, [sp, #90]
    227c:	mov	w12, w9
    2280:	mul	x12, x13, x12
    2284:	ldr	w9, [x8, x12]
    2288:	ldr	w14, [sp, #100]
    228c:	add	w9, w14, w9
    2290:	str	w9, [sp, #100]
    2294:	ldur	x8, [x29, #-8]
    2298:	add	x8, x8, x10
    229c:	ldrh	w9, [sp, #90]
    22a0:	mov	w12, w9
    22a4:	mul	x12, x13, x12
    22a8:	add	x8, x8, x12
    22ac:	ldr	w9, [x8, #4]
    22b0:	ldr	w14, [sp, #96]
    22b4:	add	w9, w14, w9
    22b8:	str	w9, [sp, #96]
    22bc:	ldur	x8, [x29, #-8]
    22c0:	add	x8, x8, x10
    22c4:	ldrh	w9, [sp, #90]
    22c8:	mov	w12, w9
    22cc:	mul	x12, x13, x12
    22d0:	add	x8, x8, x12
    22d4:	ldr	w9, [x8, #8]
    22d8:	ldr	w14, [sp, #92]
    22dc:	add	w9, w14, w9
    22e0:	str	w9, [sp, #92]
    22e4:	ldr	x8, [sp, #120]
    22e8:	ldur	w9, [x29, #-28]
    22ec:	add	w9, w9, #0x21
    22f0:	mov	w0, w9
    22f4:	sxtw	x12, w0
    22f8:	mul	x12, x11, x12
    22fc:	add	x8, x8, x12
    2300:	ldrh	w9, [x8]
    2304:	strh	w9, [sp, #90]
    2308:	ldur	x8, [x29, #-8]
    230c:	add	x8, x8, x10
    2310:	ldrh	w9, [sp, #90]
    2314:	mov	w12, w9
    2318:	mul	x12, x13, x12
    231c:	ldr	w9, [x8, x12]
    2320:	ldr	w14, [sp, #100]
    2324:	add	w9, w14, w9
    2328:	str	w9, [sp, #100]
    232c:	ldur	x8, [x29, #-8]
    2330:	add	x8, x8, x10
    2334:	ldrh	w9, [sp, #90]
    2338:	mov	w12, w9
    233c:	mul	x12, x13, x12
    2340:	add	x8, x8, x12
    2344:	ldr	w9, [x8, #4]
    2348:	ldr	w14, [sp, #96]
    234c:	add	w9, w14, w9
    2350:	str	w9, [sp, #96]
    2354:	ldur	x8, [x29, #-8]
    2358:	add	x8, x8, x10
    235c:	ldrh	w9, [sp, #90]
    2360:	mov	w12, w9
    2364:	mul	x12, x13, x12
    2368:	add	x8, x8, x12
    236c:	ldr	w9, [x8, #8]
    2370:	ldr	w14, [sp, #92]
    2374:	add	w9, w14, w9
    2378:	str	w9, [sp, #92]
    237c:	ldr	x8, [sp, #120]
    2380:	ldur	w9, [x29, #-28]
    2384:	add	w9, w9, #0x22
    2388:	mov	w0, w9
    238c:	sxtw	x12, w0
    2390:	mul	x12, x11, x12
    2394:	add	x8, x8, x12
    2398:	ldrh	w9, [x8]
    239c:	strh	w9, [sp, #90]
    23a0:	ldur	x8, [x29, #-8]
    23a4:	add	x8, x8, x10
    23a8:	ldrh	w9, [sp, #90]
    23ac:	mov	w12, w9
    23b0:	mul	x12, x13, x12
    23b4:	ldr	w9, [x8, x12]
    23b8:	ldr	w14, [sp, #100]
    23bc:	add	w9, w14, w9
    23c0:	str	w9, [sp, #100]
    23c4:	ldur	x8, [x29, #-8]
    23c8:	add	x8, x8, x10
    23cc:	ldrh	w9, [sp, #90]
    23d0:	mov	w12, w9
    23d4:	mul	x12, x13, x12
    23d8:	add	x8, x8, x12
    23dc:	ldr	w9, [x8, #4]
    23e0:	ldr	w14, [sp, #96]
    23e4:	add	w9, w14, w9
    23e8:	str	w9, [sp, #96]
    23ec:	ldur	x8, [x29, #-8]
    23f0:	add	x8, x8, x10
    23f4:	ldrh	w9, [sp, #90]
    23f8:	mov	w12, w9
    23fc:	mul	x12, x13, x12
    2400:	add	x8, x8, x12
    2404:	ldr	w9, [x8, #8]
    2408:	ldr	w14, [sp, #92]
    240c:	add	w9, w14, w9
    2410:	str	w9, [sp, #92]
    2414:	ldr	x8, [sp, #120]
    2418:	ldur	w9, [x29, #-28]
    241c:	add	w9, w9, #0x23
    2420:	mov	w0, w9
    2424:	sxtw	x12, w0
    2428:	mul	x12, x11, x12
    242c:	add	x8, x8, x12
    2430:	ldrh	w9, [x8]
    2434:	strh	w9, [sp, #90]
    2438:	ldur	x8, [x29, #-8]
    243c:	add	x8, x8, x10
    2440:	ldrh	w9, [sp, #90]
    2444:	mov	w12, w9
    2448:	mul	x12, x13, x12
    244c:	ldr	w9, [x8, x12]
    2450:	ldr	w14, [sp, #100]
    2454:	add	w9, w14, w9
    2458:	str	w9, [sp, #100]
    245c:	ldur	x8, [x29, #-8]
    2460:	add	x8, x8, x10
    2464:	ldrh	w9, [sp, #90]
    2468:	mov	w12, w9
    246c:	mul	x12, x13, x12
    2470:	add	x8, x8, x12
    2474:	ldr	w9, [x8, #4]
    2478:	ldr	w14, [sp, #96]
    247c:	add	w9, w14, w9
    2480:	str	w9, [sp, #96]
    2484:	ldur	x8, [x29, #-8]
    2488:	add	x8, x8, x10
    248c:	ldrh	w9, [sp, #90]
    2490:	mov	w12, w9
    2494:	mul	x12, x13, x12
    2498:	add	x8, x8, x12
    249c:	ldr	w9, [x8, #8]
    24a0:	ldr	w14, [sp, #92]
    24a4:	add	w9, w14, w9
    24a8:	str	w9, [sp, #92]
    24ac:	ldr	x8, [sp, #120]
    24b0:	ldur	w9, [x29, #-28]
    24b4:	add	w9, w9, #0x24
    24b8:	mov	w0, w9
    24bc:	sxtw	x12, w0
    24c0:	mul	x12, x11, x12
    24c4:	add	x8, x8, x12
    24c8:	ldrh	w9, [x8]
    24cc:	strh	w9, [sp, #90]
    24d0:	ldur	x8, [x29, #-8]
    24d4:	add	x8, x8, x10
    24d8:	ldrh	w9, [sp, #90]
    24dc:	mov	w12, w9
    24e0:	mul	x12, x13, x12
    24e4:	ldr	w9, [x8, x12]
    24e8:	ldr	w14, [sp, #100]
    24ec:	add	w9, w14, w9
    24f0:	str	w9, [sp, #100]
    24f4:	ldur	x8, [x29, #-8]
    24f8:	add	x8, x8, x10
    24fc:	ldrh	w9, [sp, #90]
    2500:	mov	w12, w9
    2504:	mul	x12, x13, x12
    2508:	add	x8, x8, x12
    250c:	ldr	w9, [x8, #4]
    2510:	ldr	w14, [sp, #96]
    2514:	add	w9, w14, w9
    2518:	str	w9, [sp, #96]
    251c:	ldur	x8, [x29, #-8]
    2520:	add	x8, x8, x10
    2524:	ldrh	w9, [sp, #90]
    2528:	mov	w12, w9
    252c:	mul	x12, x13, x12
    2530:	add	x8, x8, x12
    2534:	ldr	w9, [x8, #8]
    2538:	ldr	w14, [sp, #92]
    253c:	add	w9, w14, w9
    2540:	str	w9, [sp, #92]
    2544:	ldr	x8, [sp, #120]
    2548:	ldur	w9, [x29, #-28]
    254c:	add	w9, w9, #0x25
    2550:	mov	w0, w9
    2554:	sxtw	x12, w0
    2558:	mul	x12, x11, x12
    255c:	add	x8, x8, x12
    2560:	ldrh	w9, [x8]
    2564:	strh	w9, [sp, #90]
    2568:	ldur	x8, [x29, #-8]
    256c:	add	x8, x8, x10
    2570:	ldrh	w9, [sp, #90]
    2574:	mov	w12, w9
    2578:	mul	x12, x13, x12
    257c:	ldr	w9, [x8, x12]
    2580:	ldr	w14, [sp, #100]
    2584:	add	w9, w14, w9
    2588:	str	w9, [sp, #100]
    258c:	ldur	x8, [x29, #-8]
    2590:	add	x8, x8, x10
    2594:	ldrh	w9, [sp, #90]
    2598:	mov	w12, w9
    259c:	mul	x12, x13, x12
    25a0:	add	x8, x8, x12
    25a4:	ldr	w9, [x8, #4]
    25a8:	ldr	w14, [sp, #96]
    25ac:	add	w9, w14, w9
    25b0:	str	w9, [sp, #96]
    25b4:	ldur	x8, [x29, #-8]
    25b8:	add	x8, x8, x10
    25bc:	ldrh	w9, [sp, #90]
    25c0:	mov	w12, w9
    25c4:	mul	x12, x13, x12
    25c8:	add	x8, x8, x12
    25cc:	ldr	w9, [x8, #8]
    25d0:	ldr	w14, [sp, #92]
    25d4:	add	w9, w14, w9
    25d8:	str	w9, [sp, #92]
    25dc:	ldr	x8, [sp, #120]
    25e0:	ldur	w9, [x29, #-28]
    25e4:	add	w9, w9, #0x26
    25e8:	mov	w0, w9
    25ec:	sxtw	x12, w0
    25f0:	mul	x12, x11, x12
    25f4:	add	x8, x8, x12
    25f8:	ldrh	w9, [x8]
    25fc:	strh	w9, [sp, #90]
    2600:	ldur	x8, [x29, #-8]
    2604:	add	x8, x8, x10
    2608:	ldrh	w9, [sp, #90]
    260c:	mov	w12, w9
    2610:	mul	x12, x13, x12
    2614:	ldr	w9, [x8, x12]
    2618:	ldr	w14, [sp, #100]
    261c:	add	w9, w14, w9
    2620:	str	w9, [sp, #100]
    2624:	ldur	x8, [x29, #-8]
    2628:	add	x8, x8, x10
    262c:	ldrh	w9, [sp, #90]
    2630:	mov	w12, w9
    2634:	mul	x12, x13, x12
    2638:	add	x8, x8, x12
    263c:	ldr	w9, [x8, #4]
    2640:	ldr	w14, [sp, #96]
    2644:	add	w9, w14, w9
    2648:	str	w9, [sp, #96]
    264c:	ldur	x8, [x29, #-8]
    2650:	add	x8, x8, x10
    2654:	ldrh	w9, [sp, #90]
    2658:	mov	w12, w9
    265c:	mul	x12, x13, x12
    2660:	add	x8, x8, x12
    2664:	ldr	w9, [x8, #8]
    2668:	ldr	w14, [sp, #92]
    266c:	add	w9, w14, w9
    2670:	str	w9, [sp, #92]
    2674:	ldr	x8, [sp, #120]
    2678:	ldur	w9, [x29, #-28]
    267c:	add	w9, w9, #0x27
    2680:	mov	w0, w9
    2684:	sxtw	x12, w0
    2688:	mul	x12, x11, x12
    268c:	add	x8, x8, x12
    2690:	ldrh	w9, [x8]
    2694:	strh	w9, [sp, #90]
    2698:	ldur	x8, [x29, #-8]
    269c:	add	x8, x8, x10
    26a0:	ldrh	w9, [sp, #90]
    26a4:	mov	w12, w9
    26a8:	mul	x12, x13, x12
    26ac:	ldr	w9, [x8, x12]
    26b0:	ldr	w14, [sp, #100]
    26b4:	add	w9, w14, w9
    26b8:	str	w9, [sp, #100]
    26bc:	ldur	x8, [x29, #-8]
    26c0:	add	x8, x8, x10
    26c4:	ldrh	w9, [sp, #90]
    26c8:	mov	w12, w9
    26cc:	mul	x12, x13, x12
    26d0:	add	x8, x8, x12
    26d4:	ldr	w9, [x8, #4]
    26d8:	ldr	w14, [sp, #96]
    26dc:	add	w9, w14, w9
    26e0:	str	w9, [sp, #96]
    26e4:	ldur	x8, [x29, #-8]
    26e8:	add	x8, x8, x10
    26ec:	ldrh	w9, [sp, #90]
    26f0:	mov	w12, w9
    26f4:	mul	x12, x13, x12
    26f8:	add	x8, x8, x12
    26fc:	ldr	w9, [x8, #8]
    2700:	ldr	w14, [sp, #92]
    2704:	add	w9, w14, w9
    2708:	str	w9, [sp, #92]
    270c:	ldr	x8, [sp, #120]
    2710:	ldur	w9, [x29, #-28]
    2714:	add	w9, w9, #0x28
    2718:	mov	w0, w9
    271c:	sxtw	x12, w0
    2720:	mul	x12, x11, x12
    2724:	add	x8, x8, x12
    2728:	ldrh	w9, [x8]
    272c:	strh	w9, [sp, #90]
    2730:	ldur	x8, [x29, #-8]
    2734:	add	x8, x8, x10
    2738:	ldrh	w9, [sp, #90]
    273c:	mov	w12, w9
    2740:	mul	x12, x13, x12
    2744:	ldr	w9, [x8, x12]
    2748:	ldr	w14, [sp, #100]
    274c:	add	w9, w14, w9
    2750:	str	w9, [sp, #100]
    2754:	ldur	x8, [x29, #-8]
    2758:	add	x8, x8, x10
    275c:	ldrh	w9, [sp, #90]
    2760:	mov	w12, w9
    2764:	mul	x12, x13, x12
    2768:	add	x8, x8, x12
    276c:	ldr	w9, [x8, #4]
    2770:	ldr	w14, [sp, #96]
    2774:	add	w9, w14, w9
    2778:	str	w9, [sp, #96]
    277c:	ldur	x8, [x29, #-8]
    2780:	add	x8, x8, x10
    2784:	ldrh	w9, [sp, #90]
    2788:	mov	w12, w9
    278c:	mul	x12, x13, x12
    2790:	add	x8, x8, x12
    2794:	ldr	w9, [x8, #8]
    2798:	ldr	w14, [sp, #92]
    279c:	add	w9, w14, w9
    27a0:	str	w9, [sp, #92]
    27a4:	ldr	x8, [sp, #120]
    27a8:	ldur	w9, [x29, #-28]
    27ac:	add	w9, w9, #0x29
    27b0:	mov	w0, w9
    27b4:	sxtw	x12, w0
    27b8:	mul	x12, x11, x12
    27bc:	add	x8, x8, x12
    27c0:	ldrh	w9, [x8]
    27c4:	strh	w9, [sp, #90]
    27c8:	ldur	x8, [x29, #-8]
    27cc:	add	x8, x8, x10
    27d0:	ldrh	w9, [sp, #90]
    27d4:	mov	w12, w9
    27d8:	mul	x12, x13, x12
    27dc:	ldr	w9, [x8, x12]
    27e0:	ldr	w14, [sp, #100]
    27e4:	add	w9, w14, w9
    27e8:	str	w9, [sp, #100]
    27ec:	ldur	x8, [x29, #-8]
    27f0:	add	x8, x8, x10
    27f4:	ldrh	w9, [sp, #90]
    27f8:	mov	w12, w9
    27fc:	mul	x12, x13, x12
    2800:	add	x8, x8, x12
    2804:	ldr	w9, [x8, #4]
    2808:	ldr	w14, [sp, #96]
    280c:	add	w9, w14, w9
    2810:	str	w9, [sp, #96]
    2814:	ldur	x8, [x29, #-8]
    2818:	add	x8, x8, x10
    281c:	ldrh	w9, [sp, #90]
    2820:	mov	w12, w9
    2824:	mul	x12, x13, x12
    2828:	add	x8, x8, x12
    282c:	ldr	w9, [x8, #8]
    2830:	ldr	w14, [sp, #92]
    2834:	add	w9, w14, w9
    2838:	str	w9, [sp, #92]
    283c:	ldr	x8, [sp, #120]
    2840:	ldur	w9, [x29, #-28]
    2844:	add	w9, w9, #0x2a
    2848:	mov	w0, w9
    284c:	sxtw	x12, w0
    2850:	mul	x12, x11, x12
    2854:	add	x8, x8, x12
    2858:	ldrh	w9, [x8]
    285c:	strh	w9, [sp, #90]
    2860:	ldur	x8, [x29, #-8]
    2864:	add	x8, x8, x10
    2868:	ldrh	w9, [sp, #90]
    286c:	mov	w12, w9
    2870:	mul	x12, x13, x12
    2874:	ldr	w9, [x8, x12]
    2878:	ldr	w14, [sp, #100]
    287c:	add	w9, w14, w9
    2880:	str	w9, [sp, #100]
    2884:	ldur	x8, [x29, #-8]
    2888:	add	x8, x8, x10
    288c:	ldrh	w9, [sp, #90]
    2890:	mov	w12, w9
    2894:	mul	x12, x13, x12
    2898:	add	x8, x8, x12
    289c:	ldr	w9, [x8, #4]
    28a0:	ldr	w14, [sp, #96]
    28a4:	add	w9, w14, w9
    28a8:	str	w9, [sp, #96]
    28ac:	ldur	x8, [x29, #-8]
    28b0:	add	x8, x8, x10
    28b4:	ldrh	w9, [sp, #90]
    28b8:	mov	w12, w9
    28bc:	mul	x12, x13, x12
    28c0:	add	x8, x8, x12
    28c4:	ldr	w9, [x8, #8]
    28c8:	ldr	w14, [sp, #92]
    28cc:	add	w9, w14, w9
    28d0:	str	w9, [sp, #92]
    28d4:	ldr	x8, [sp, #120]
    28d8:	ldur	w9, [x29, #-28]
    28dc:	add	w9, w9, #0x2b
    28e0:	mov	w0, w9
    28e4:	sxtw	x12, w0
    28e8:	mul	x12, x11, x12
    28ec:	add	x8, x8, x12
    28f0:	ldrh	w9, [x8]
    28f4:	strh	w9, [sp, #90]
    28f8:	ldur	x8, [x29, #-8]
    28fc:	add	x8, x8, x10
    2900:	ldrh	w9, [sp, #90]
    2904:	mov	w12, w9
    2908:	mul	x12, x13, x12
    290c:	ldr	w9, [x8, x12]
    2910:	ldr	w14, [sp, #100]
    2914:	add	w9, w14, w9
    2918:	str	w9, [sp, #100]
    291c:	ldur	x8, [x29, #-8]
    2920:	add	x8, x8, x10
    2924:	ldrh	w9, [sp, #90]
    2928:	mov	w12, w9
    292c:	mul	x12, x13, x12
    2930:	add	x8, x8, x12
    2934:	ldr	w9, [x8, #4]
    2938:	ldr	w14, [sp, #96]
    293c:	add	w9, w14, w9
    2940:	str	w9, [sp, #96]
    2944:	ldur	x8, [x29, #-8]
    2948:	add	x8, x8, x10
    294c:	ldrh	w9, [sp, #90]
    2950:	mov	w12, w9
    2954:	mul	x12, x13, x12
    2958:	add	x8, x8, x12
    295c:	ldr	w9, [x8, #8]
    2960:	ldr	w14, [sp, #92]
    2964:	add	w9, w14, w9
    2968:	str	w9, [sp, #92]
    296c:	ldr	x8, [sp, #120]
    2970:	ldur	w9, [x29, #-28]
    2974:	add	w9, w9, #0x2c
    2978:	mov	w0, w9
    297c:	sxtw	x12, w0
    2980:	mul	x12, x11, x12
    2984:	add	x8, x8, x12
    2988:	ldrh	w9, [x8]
    298c:	strh	w9, [sp, #90]
    2990:	ldur	x8, [x29, #-8]
    2994:	add	x8, x8, x10
    2998:	ldrh	w9, [sp, #90]
    299c:	mov	w12, w9
    29a0:	mul	x12, x13, x12
    29a4:	ldr	w9, [x8, x12]
    29a8:	ldr	w14, [sp, #100]
    29ac:	add	w9, w14, w9
    29b0:	str	w9, [sp, #100]
    29b4:	ldur	x8, [x29, #-8]
    29b8:	add	x8, x8, x10
    29bc:	ldrh	w9, [sp, #90]
    29c0:	mov	w12, w9
    29c4:	mul	x12, x13, x12
    29c8:	add	x8, x8, x12
    29cc:	ldr	w9, [x8, #4]
    29d0:	ldr	w14, [sp, #96]
    29d4:	add	w9, w14, w9
    29d8:	str	w9, [sp, #96]
    29dc:	ldur	x8, [x29, #-8]
    29e0:	add	x8, x8, x10
    29e4:	ldrh	w9, [sp, #90]
    29e8:	mov	w12, w9
    29ec:	mul	x12, x13, x12
    29f0:	add	x8, x8, x12
    29f4:	ldr	w9, [x8, #8]
    29f8:	ldr	w14, [sp, #92]
    29fc:	add	w9, w14, w9
    2a00:	str	w9, [sp, #92]
    2a04:	ldr	x8, [sp, #120]
    2a08:	ldur	w9, [x29, #-28]
    2a0c:	add	w9, w9, #0x2d
    2a10:	mov	w0, w9
    2a14:	sxtw	x12, w0
    2a18:	mul	x12, x11, x12
    2a1c:	add	x8, x8, x12
    2a20:	ldrh	w9, [x8]
    2a24:	strh	w9, [sp, #90]
    2a28:	ldur	x8, [x29, #-8]
    2a2c:	add	x8, x8, x10
    2a30:	ldrh	w9, [sp, #90]
    2a34:	mov	w12, w9
    2a38:	mul	x12, x13, x12
    2a3c:	ldr	w9, [x8, x12]
    2a40:	ldr	w14, [sp, #100]
    2a44:	add	w9, w14, w9
    2a48:	str	w9, [sp, #100]
    2a4c:	ldur	x8, [x29, #-8]
    2a50:	add	x8, x8, x10
    2a54:	ldrh	w9, [sp, #90]
    2a58:	mov	w12, w9
    2a5c:	mul	x12, x13, x12
    2a60:	add	x8, x8, x12
    2a64:	ldr	w9, [x8, #4]
    2a68:	ldr	w14, [sp, #96]
    2a6c:	add	w9, w14, w9
    2a70:	str	w9, [sp, #96]
    2a74:	ldur	x8, [x29, #-8]
    2a78:	add	x8, x8, x10
    2a7c:	ldrh	w9, [sp, #90]
    2a80:	mov	w12, w9
    2a84:	mul	x12, x13, x12
    2a88:	add	x8, x8, x12
    2a8c:	ldr	w9, [x8, #8]
    2a90:	ldr	w14, [sp, #92]
    2a94:	add	w9, w14, w9
    2a98:	str	w9, [sp, #92]
    2a9c:	ldr	x8, [sp, #120]
    2aa0:	ldur	w9, [x29, #-28]
    2aa4:	add	w9, w9, #0x2e
    2aa8:	mov	w0, w9
    2aac:	sxtw	x12, w0
    2ab0:	mul	x12, x11, x12
    2ab4:	add	x8, x8, x12
    2ab8:	ldrh	w9, [x8]
    2abc:	strh	w9, [sp, #90]
    2ac0:	ldur	x8, [x29, #-8]
    2ac4:	add	x8, x8, x10
    2ac8:	ldrh	w9, [sp, #90]
    2acc:	mov	w12, w9
    2ad0:	mul	x12, x13, x12
    2ad4:	ldr	w9, [x8, x12]
    2ad8:	ldr	w14, [sp, #100]
    2adc:	add	w9, w14, w9
    2ae0:	str	w9, [sp, #100]
    2ae4:	ldur	x8, [x29, #-8]
    2ae8:	add	x8, x8, x10
    2aec:	ldrh	w9, [sp, #90]
    2af0:	mov	w12, w9
    2af4:	mul	x12, x13, x12
    2af8:	add	x8, x8, x12
    2afc:	ldr	w9, [x8, #4]
    2b00:	ldr	w14, [sp, #96]
    2b04:	add	w9, w14, w9
    2b08:	str	w9, [sp, #96]
    2b0c:	ldur	x8, [x29, #-8]
    2b10:	add	x8, x8, x10
    2b14:	ldrh	w9, [sp, #90]
    2b18:	mov	w12, w9
    2b1c:	mul	x12, x13, x12
    2b20:	add	x8, x8, x12
    2b24:	ldr	w9, [x8, #8]
    2b28:	ldr	w14, [sp, #92]
    2b2c:	add	w9, w14, w9
    2b30:	str	w9, [sp, #92]
    2b34:	ldr	x8, [sp, #120]
    2b38:	ldur	w9, [x29, #-28]
    2b3c:	add	w9, w9, #0x2f
    2b40:	mov	w0, w9
    2b44:	sxtw	x12, w0
    2b48:	mul	x12, x11, x12
    2b4c:	add	x8, x8, x12
    2b50:	ldrh	w9, [x8]
    2b54:	strh	w9, [sp, #90]
    2b58:	ldur	x8, [x29, #-8]
    2b5c:	add	x8, x8, x10
    2b60:	ldrh	w9, [sp, #90]
    2b64:	mov	w12, w9
    2b68:	mul	x12, x13, x12
    2b6c:	ldr	w9, [x8, x12]
    2b70:	ldr	w14, [sp, #100]
    2b74:	add	w9, w14, w9
    2b78:	str	w9, [sp, #100]
    2b7c:	ldur	x8, [x29, #-8]
    2b80:	add	x8, x8, x10
    2b84:	ldrh	w9, [sp, #90]
    2b88:	mov	w12, w9
    2b8c:	mul	x12, x13, x12
    2b90:	add	x8, x8, x12
    2b94:	ldr	w9, [x8, #4]
    2b98:	ldr	w14, [sp, #96]
    2b9c:	add	w9, w14, w9
    2ba0:	str	w9, [sp, #96]
    2ba4:	ldur	x8, [x29, #-8]
    2ba8:	add	x8, x8, x10
    2bac:	ldrh	w9, [sp, #90]
    2bb0:	mov	w12, w9
    2bb4:	mul	x12, x13, x12
    2bb8:	add	x8, x8, x12
    2bbc:	ldr	w9, [x8, #8]
    2bc0:	ldr	w14, [sp, #92]
    2bc4:	add	w9, w14, w9
    2bc8:	str	w9, [sp, #92]
    2bcc:	ldr	x8, [sp, #120]
    2bd0:	ldur	w9, [x29, #-28]
    2bd4:	add	w9, w9, #0x30
    2bd8:	mov	w0, w9
    2bdc:	sxtw	x12, w0
    2be0:	mul	x12, x11, x12
    2be4:	add	x8, x8, x12
    2be8:	ldrh	w9, [x8]
    2bec:	strh	w9, [sp, #90]
    2bf0:	ldur	x8, [x29, #-8]
    2bf4:	add	x8, x8, x10
    2bf8:	ldrh	w9, [sp, #90]
    2bfc:	mov	w12, w9
    2c00:	mul	x12, x13, x12
    2c04:	ldr	w9, [x8, x12]
    2c08:	ldr	w14, [sp, #100]
    2c0c:	add	w9, w14, w9
    2c10:	str	w9, [sp, #100]
    2c14:	ldur	x8, [x29, #-8]
    2c18:	add	x8, x8, x10
    2c1c:	ldrh	w9, [sp, #90]
    2c20:	mov	w12, w9
    2c24:	mul	x12, x13, x12
    2c28:	add	x8, x8, x12
    2c2c:	ldr	w9, [x8, #4]
    2c30:	ldr	w14, [sp, #96]
    2c34:	add	w9, w14, w9
    2c38:	str	w9, [sp, #96]
    2c3c:	ldur	x8, [x29, #-8]
    2c40:	add	x8, x8, x10
    2c44:	ldrh	w9, [sp, #90]
    2c48:	mov	w12, w9
    2c4c:	mul	x12, x13, x12
    2c50:	add	x8, x8, x12
    2c54:	ldr	w9, [x8, #8]
    2c58:	ldr	w14, [sp, #92]
    2c5c:	add	w9, w14, w9
    2c60:	str	w9, [sp, #92]
    2c64:	ldr	x8, [sp, #120]
    2c68:	ldur	w9, [x29, #-28]
    2c6c:	add	w9, w9, #0x31
    2c70:	mov	w0, w9
    2c74:	sxtw	x12, w0
    2c78:	mul	x11, x11, x12
    2c7c:	add	x8, x8, x11
    2c80:	ldrh	w9, [x8]
    2c84:	strh	w9, [sp, #90]
    2c88:	ldur	x8, [x29, #-8]
    2c8c:	add	x8, x8, x10
    2c90:	ldrh	w9, [sp, #90]
    2c94:	mov	w11, w9
    2c98:	mul	x11, x13, x11
    2c9c:	ldr	w9, [x8, x11]
    2ca0:	ldr	w14, [sp, #100]
    2ca4:	add	w9, w14, w9
    2ca8:	str	w9, [sp, #100]
    2cac:	ldur	x8, [x29, #-8]
    2cb0:	add	x8, x8, x10
    2cb4:	ldrh	w9, [sp, #90]
    2cb8:	mov	w11, w9
    2cbc:	mul	x11, x13, x11
    2cc0:	add	x8, x8, x11
    2cc4:	ldr	w9, [x8, #4]
    2cc8:	ldr	w14, [sp, #96]
    2ccc:	add	w9, w14, w9
    2cd0:	str	w9, [sp, #96]
    2cd4:	ldur	x8, [x29, #-8]
    2cd8:	add	x8, x8, x10
    2cdc:	ldrh	w9, [sp, #90]
    2ce0:	mov	w10, w9
    2ce4:	mul	x10, x13, x10
    2ce8:	add	x8, x8, x10
    2cec:	ldr	w9, [x8, #8]
    2cf0:	ldr	w14, [sp, #92]
    2cf4:	add	w9, w14, w9
    2cf8:	str	w9, [sp, #92]
    2cfc:	ldr	w9, [sp, #100]
    2d00:	and	w9, w9, #0xffff
    2d04:	sub	x8, x29, #0x58
    2d08:	sturh	w9, [x29, #-88]
    2d0c:	ldr	w9, [sp, #100]
    2d10:	mov	x0, x13
    2d14:	lsr	w9, w9, w0
    2d18:	strh	w9, [x8, #2]
    2d1c:	ldr	w9, [sp, #96]
    2d20:	and	w9, w9, #0xffff
    2d24:	strh	w9, [x8, #4]
    2d28:	ldr	w9, [sp, #96]
    2d2c:	mov	x1, x13
    2d30:	lsr	w9, w9, w1
    2d34:	strh	w9, [x8, #6]
    2d38:	ldr	w9, [sp, #92]
    2d3c:	and	w9, w9, #0xffff
    2d40:	strh	w9, [x8, #8]
    2d44:	ldr	w9, [sp, #92]
    2d48:	lsr	w9, w9, w13
    2d4c:	strh	w9, [x8, #10]
    2d50:	b	2e04 <sendMTFValues+0x2528>
    2d54:	ldur	w8, [x29, #-28]
    2d58:	stur	w8, [x29, #-20]
    2d5c:	ldur	w8, [x29, #-20]
    2d60:	ldur	w9, [x29, #-32]
    2d64:	cmp	w8, w9
    2d68:	b.gt	2e04 <sendMTFValues+0x2528>
    2d6c:	ldr	x8, [sp, #120]
    2d70:	ldursw	x9, [x29, #-20]
    2d74:	mov	x10, #0x2                   	// #2
    2d78:	mul	x9, x10, x9
    2d7c:	add	x8, x8, x9
    2d80:	ldrh	w11, [x8]
    2d84:	strh	w11, [sp, #88]
    2d88:	stur	wzr, [x29, #-16]
    2d8c:	ldur	w8, [x29, #-16]
    2d90:	ldur	w9, [x29, #-72]
    2d94:	cmp	w8, w9
    2d98:	b.ge	2df4 <sendMTFValues+0x2518>  // b.tcont
    2d9c:	ldur	x8, [x29, #-8]
    2da0:	mov	x9, #0x934c                	// #37708
    2da4:	add	x8, x8, x9
    2da8:	ldursw	x9, [x29, #-16]
    2dac:	mov	x10, #0x102                 	// #258
    2db0:	mul	x9, x10, x9
    2db4:	add	x8, x8, x9
    2db8:	ldrh	w11, [sp, #88]
    2dbc:	mov	w9, w11
    2dc0:	ldrb	w11, [x8, x9]
    2dc4:	ldursw	x8, [x29, #-16]
    2dc8:	mov	x9, #0x2                   	// #2
    2dcc:	mul	x8, x9, x8
    2dd0:	sub	x9, x29, #0x58
    2dd4:	add	x8, x9, x8
    2dd8:	ldrh	w12, [x8]
    2ddc:	add	w11, w12, w11
    2de0:	strh	w11, [x8]
    2de4:	ldur	w8, [x29, #-16]
    2de8:	add	w8, w8, #0x1
    2dec:	stur	w8, [x29, #-16]
    2df0:	b	2d8c <sendMTFValues+0x24b0>
    2df4:	ldur	w8, [x29, #-20]
    2df8:	add	w8, w8, #0x1
    2dfc:	stur	w8, [x29, #-20]
    2e00:	b	2d5c <sendMTFValues+0x2480>
    2e04:	mov	w8, #0xc9ff                	// #51711
    2e08:	movk	w8, #0x3b9a, lsl #16
    2e0c:	stur	w8, [x29, #-44]
    2e10:	mov	w8, #0xffffffff            	// #-1
    2e14:	stur	w8, [x29, #-40]
    2e18:	stur	wzr, [x29, #-16]
    2e1c:	ldur	w8, [x29, #-16]
    2e20:	ldur	w9, [x29, #-72]
    2e24:	cmp	w8, w9
    2e28:	b.ge	2e6c <sendMTFValues+0x2590>  // b.tcont
    2e2c:	ldursw	x8, [x29, #-16]
    2e30:	sub	x9, x29, #0x58
    2e34:	ldrh	w10, [x9, x8, lsl #1]
    2e38:	ldur	w11, [x29, #-44]
    2e3c:	cmp	w10, w11
    2e40:	b.ge	2e5c <sendMTFValues+0x2580>  // b.tcont
    2e44:	ldursw	x8, [x29, #-16]
    2e48:	sub	x9, x29, #0x58
    2e4c:	ldrh	w10, [x9, x8, lsl #1]
    2e50:	stur	w10, [x29, #-44]
    2e54:	ldur	w10, [x29, #-16]
    2e58:	stur	w10, [x29, #-40]
    2e5c:	ldur	w8, [x29, #-16]
    2e60:	add	w8, w8, #0x1
    2e64:	stur	w8, [x29, #-16]
    2e68:	b	2e1c <sendMTFValues+0x2540>
    2e6c:	ldur	w8, [x29, #-44]
    2e70:	ldur	w9, [x29, #-36]
    2e74:	add	w8, w9, w8
    2e78:	stur	w8, [x29, #-36]
    2e7c:	ldursw	x10, [x29, #-40]
    2e80:	mov	x11, #0x4                   	// #4
    2e84:	mul	x10, x11, x10
    2e88:	sub	x11, x29, #0x70
    2e8c:	add	x10, x11, x10
    2e90:	ldr	w8, [x10]
    2e94:	add	w8, w8, #0x1
    2e98:	str	w8, [x10]
    2e9c:	ldur	w8, [x29, #-40]
    2ea0:	ldur	x10, [x29, #-8]
    2ea4:	add	x10, x10, #0x6a8
    2ea8:	ldursw	x11, [x29, #-52]
    2eac:	add	x10, x10, x11
    2eb0:	strb	w8, [x10]
    2eb4:	ldur	w8, [x29, #-52]
    2eb8:	add	w8, w8, #0x1
    2ebc:	stur	w8, [x29, #-52]
    2ec0:	ldur	w8, [x29, #-72]
    2ec4:	cmp	w8, #0x6
    2ec8:	b.ne	3ab0 <sendMTFValues+0x31d4>  // b.any
    2ecc:	ldur	w8, [x29, #-32]
    2ed0:	ldur	w9, [x29, #-28]
    2ed4:	subs	w8, w8, w9
    2ed8:	add	w8, w8, #0x1
    2edc:	mov	w9, #0x32                  	// #50
    2ee0:	cmp	w9, w8
    2ee4:	b.ne	3ab0 <sendMTFValues+0x31d4>  // b.any
    2ee8:	ldur	x8, [x29, #-8]
    2eec:	mov	x9, #0xb188                	// #45448
    2ef0:	add	x8, x8, x9
    2ef4:	ldursw	x10, [x29, #-40]
    2ef8:	mov	x11, #0x408                 	// #1032
    2efc:	mul	x10, x11, x10
    2f00:	add	x8, x8, x10
    2f04:	ldr	x10, [sp, #120]
    2f08:	ldur	w12, [x29, #-28]
    2f0c:	add	w12, w12, #0x0
    2f10:	ldrh	w12, [x10, w12, sxtw #1]
    2f14:	mov	w10, w12
    2f18:	mov	x13, #0x4                   	// #4
    2f1c:	mul	x10, x13, x10
    2f20:	add	x8, x8, x10
    2f24:	ldr	w12, [x8]
    2f28:	add	w12, w12, #0x1
    2f2c:	str	w12, [x8]
    2f30:	ldur	x8, [x29, #-8]
    2f34:	add	x8, x8, x9
    2f38:	ldursw	x10, [x29, #-40]
    2f3c:	mul	x10, x11, x10
    2f40:	add	x8, x8, x10
    2f44:	ldr	x10, [sp, #120]
    2f48:	ldur	w12, [x29, #-28]
    2f4c:	add	w12, w12, #0x1
    2f50:	ldrh	w12, [x10, w12, sxtw #1]
    2f54:	mov	w10, w12
    2f58:	mul	x10, x13, x10
    2f5c:	add	x8, x8, x10
    2f60:	ldr	w12, [x8]
    2f64:	add	w12, w12, #0x1
    2f68:	str	w12, [x8]
    2f6c:	ldur	x8, [x29, #-8]
    2f70:	add	x8, x8, x9
    2f74:	ldursw	x10, [x29, #-40]
    2f78:	mul	x10, x11, x10
    2f7c:	add	x8, x8, x10
    2f80:	ldr	x10, [sp, #120]
    2f84:	ldur	w12, [x29, #-28]
    2f88:	add	w12, w12, #0x2
    2f8c:	ldrh	w12, [x10, w12, sxtw #1]
    2f90:	mov	w10, w12
    2f94:	mul	x10, x13, x10
    2f98:	add	x8, x8, x10
    2f9c:	ldr	w12, [x8]
    2fa0:	add	w12, w12, #0x1
    2fa4:	str	w12, [x8]
    2fa8:	ldur	x8, [x29, #-8]
    2fac:	add	x8, x8, x9
    2fb0:	ldursw	x10, [x29, #-40]
    2fb4:	mul	x10, x11, x10
    2fb8:	add	x8, x8, x10
    2fbc:	ldr	x10, [sp, #120]
    2fc0:	ldur	w12, [x29, #-28]
    2fc4:	add	w12, w12, #0x3
    2fc8:	ldrh	w12, [x10, w12, sxtw #1]
    2fcc:	mov	w10, w12
    2fd0:	mul	x10, x13, x10
    2fd4:	add	x8, x8, x10
    2fd8:	ldr	w12, [x8]
    2fdc:	add	w12, w12, #0x1
    2fe0:	str	w12, [x8]
    2fe4:	ldur	x8, [x29, #-8]
    2fe8:	add	x8, x8, x9
    2fec:	ldursw	x10, [x29, #-40]
    2ff0:	mul	x10, x11, x10
    2ff4:	add	x8, x8, x10
    2ff8:	ldr	x10, [sp, #120]
    2ffc:	ldur	w12, [x29, #-28]
    3000:	add	w12, w12, #0x4
    3004:	ldrh	w12, [x10, w12, sxtw #1]
    3008:	mov	w10, w12
    300c:	mul	x10, x13, x10
    3010:	add	x8, x8, x10
    3014:	ldr	w12, [x8]
    3018:	add	w12, w12, #0x1
    301c:	str	w12, [x8]
    3020:	ldur	x8, [x29, #-8]
    3024:	add	x8, x8, x9
    3028:	ldursw	x10, [x29, #-40]
    302c:	mul	x10, x11, x10
    3030:	add	x8, x8, x10
    3034:	ldr	x10, [sp, #120]
    3038:	ldur	w12, [x29, #-28]
    303c:	add	w12, w12, #0x5
    3040:	ldrh	w12, [x10, w12, sxtw #1]
    3044:	mov	w10, w12
    3048:	mul	x10, x13, x10
    304c:	add	x8, x8, x10
    3050:	ldr	w12, [x8]
    3054:	add	w12, w12, #0x1
    3058:	str	w12, [x8]
    305c:	ldur	x8, [x29, #-8]
    3060:	add	x8, x8, x9
    3064:	ldursw	x10, [x29, #-40]
    3068:	mul	x10, x11, x10
    306c:	add	x8, x8, x10
    3070:	ldr	x10, [sp, #120]
    3074:	ldur	w12, [x29, #-28]
    3078:	add	w12, w12, #0x6
    307c:	ldrh	w12, [x10, w12, sxtw #1]
    3080:	mov	w10, w12
    3084:	mul	x10, x13, x10
    3088:	add	x8, x8, x10
    308c:	ldr	w12, [x8]
    3090:	add	w12, w12, #0x1
    3094:	str	w12, [x8]
    3098:	ldur	x8, [x29, #-8]
    309c:	add	x8, x8, x9
    30a0:	ldursw	x10, [x29, #-40]
    30a4:	mul	x10, x11, x10
    30a8:	add	x8, x8, x10
    30ac:	ldr	x10, [sp, #120]
    30b0:	ldur	w12, [x29, #-28]
    30b4:	add	w12, w12, #0x7
    30b8:	ldrh	w12, [x10, w12, sxtw #1]
    30bc:	mov	w10, w12
    30c0:	mul	x10, x13, x10
    30c4:	add	x8, x8, x10
    30c8:	ldr	w12, [x8]
    30cc:	add	w12, w12, #0x1
    30d0:	str	w12, [x8]
    30d4:	ldur	x8, [x29, #-8]
    30d8:	add	x8, x8, x9
    30dc:	ldursw	x10, [x29, #-40]
    30e0:	mul	x10, x11, x10
    30e4:	add	x8, x8, x10
    30e8:	ldr	x10, [sp, #120]
    30ec:	ldur	w12, [x29, #-28]
    30f0:	add	w12, w12, #0x8
    30f4:	ldrh	w12, [x10, w12, sxtw #1]
    30f8:	mov	w10, w12
    30fc:	mul	x10, x13, x10
    3100:	add	x8, x8, x10
    3104:	ldr	w12, [x8]
    3108:	add	w12, w12, #0x1
    310c:	str	w12, [x8]
    3110:	ldur	x8, [x29, #-8]
    3114:	add	x8, x8, x9
    3118:	ldursw	x10, [x29, #-40]
    311c:	mul	x10, x11, x10
    3120:	add	x8, x8, x10
    3124:	ldr	x10, [sp, #120]
    3128:	ldur	w12, [x29, #-28]
    312c:	add	w12, w12, #0x9
    3130:	ldrh	w12, [x10, w12, sxtw #1]
    3134:	mov	w10, w12
    3138:	mul	x10, x13, x10
    313c:	add	x8, x8, x10
    3140:	ldr	w12, [x8]
    3144:	add	w12, w12, #0x1
    3148:	str	w12, [x8]
    314c:	ldur	x8, [x29, #-8]
    3150:	add	x8, x8, x9
    3154:	ldursw	x10, [x29, #-40]
    3158:	mul	x10, x11, x10
    315c:	add	x8, x8, x10
    3160:	ldr	x10, [sp, #120]
    3164:	ldur	w12, [x29, #-28]
    3168:	add	w12, w12, #0xa
    316c:	ldrh	w12, [x10, w12, sxtw #1]
    3170:	mov	w10, w12
    3174:	mul	x10, x13, x10
    3178:	add	x8, x8, x10
    317c:	ldr	w12, [x8]
    3180:	add	w12, w12, #0x1
    3184:	str	w12, [x8]
    3188:	ldur	x8, [x29, #-8]
    318c:	add	x8, x8, x9
    3190:	ldursw	x10, [x29, #-40]
    3194:	mul	x10, x11, x10
    3198:	add	x8, x8, x10
    319c:	ldr	x10, [sp, #120]
    31a0:	ldur	w12, [x29, #-28]
    31a4:	add	w12, w12, #0xb
    31a8:	ldrh	w12, [x10, w12, sxtw #1]
    31ac:	mov	w10, w12
    31b0:	mul	x10, x13, x10
    31b4:	add	x8, x8, x10
    31b8:	ldr	w12, [x8]
    31bc:	add	w12, w12, #0x1
    31c0:	str	w12, [x8]
    31c4:	ldur	x8, [x29, #-8]
    31c8:	add	x8, x8, x9
    31cc:	ldursw	x10, [x29, #-40]
    31d0:	mul	x10, x11, x10
    31d4:	add	x8, x8, x10
    31d8:	ldr	x10, [sp, #120]
    31dc:	ldur	w12, [x29, #-28]
    31e0:	add	w12, w12, #0xc
    31e4:	ldrh	w12, [x10, w12, sxtw #1]
    31e8:	mov	w10, w12
    31ec:	mul	x10, x13, x10
    31f0:	add	x8, x8, x10
    31f4:	ldr	w12, [x8]
    31f8:	add	w12, w12, #0x1
    31fc:	str	w12, [x8]
    3200:	ldur	x8, [x29, #-8]
    3204:	add	x8, x8, x9
    3208:	ldursw	x10, [x29, #-40]
    320c:	mul	x10, x11, x10
    3210:	add	x8, x8, x10
    3214:	ldr	x10, [sp, #120]
    3218:	ldur	w12, [x29, #-28]
    321c:	add	w12, w12, #0xd
    3220:	ldrh	w12, [x10, w12, sxtw #1]
    3224:	mov	w10, w12
    3228:	mul	x10, x13, x10
    322c:	add	x8, x8, x10
    3230:	ldr	w12, [x8]
    3234:	add	w12, w12, #0x1
    3238:	str	w12, [x8]
    323c:	ldur	x8, [x29, #-8]
    3240:	add	x8, x8, x9
    3244:	ldursw	x10, [x29, #-40]
    3248:	mul	x10, x11, x10
    324c:	add	x8, x8, x10
    3250:	ldr	x10, [sp, #120]
    3254:	ldur	w12, [x29, #-28]
    3258:	add	w12, w12, #0xe
    325c:	ldrh	w12, [x10, w12, sxtw #1]
    3260:	mov	w10, w12
    3264:	mul	x10, x13, x10
    3268:	add	x8, x8, x10
    326c:	ldr	w12, [x8]
    3270:	add	w12, w12, #0x1
    3274:	str	w12, [x8]
    3278:	ldur	x8, [x29, #-8]
    327c:	add	x8, x8, x9
    3280:	ldursw	x10, [x29, #-40]
    3284:	mul	x10, x11, x10
    3288:	add	x8, x8, x10
    328c:	ldr	x10, [sp, #120]
    3290:	ldur	w12, [x29, #-28]
    3294:	add	w12, w12, #0xf
    3298:	ldrh	w12, [x10, w12, sxtw #1]
    329c:	mov	w10, w12
    32a0:	mul	x10, x13, x10
    32a4:	add	x8, x8, x10
    32a8:	ldr	w12, [x8]
    32ac:	add	w12, w12, #0x1
    32b0:	str	w12, [x8]
    32b4:	ldur	x8, [x29, #-8]
    32b8:	add	x8, x8, x9
    32bc:	ldursw	x10, [x29, #-40]
    32c0:	mul	x10, x11, x10
    32c4:	add	x8, x8, x10
    32c8:	ldr	x10, [sp, #120]
    32cc:	ldur	w12, [x29, #-28]
    32d0:	add	w12, w12, #0x10
    32d4:	ldrh	w12, [x10, w12, sxtw #1]
    32d8:	mov	w10, w12
    32dc:	mul	x10, x13, x10
    32e0:	add	x8, x8, x10
    32e4:	ldr	w12, [x8]
    32e8:	add	w12, w12, #0x1
    32ec:	str	w12, [x8]
    32f0:	ldur	x8, [x29, #-8]
    32f4:	add	x8, x8, x9
    32f8:	ldursw	x10, [x29, #-40]
    32fc:	mul	x10, x11, x10
    3300:	add	x8, x8, x10
    3304:	ldr	x10, [sp, #120]
    3308:	ldur	w12, [x29, #-28]
    330c:	add	w12, w12, #0x11
    3310:	ldrh	w12, [x10, w12, sxtw #1]
    3314:	mov	w10, w12
    3318:	mul	x10, x13, x10
    331c:	add	x8, x8, x10
    3320:	ldr	w12, [x8]
    3324:	add	w12, w12, #0x1
    3328:	str	w12, [x8]
    332c:	ldur	x8, [x29, #-8]
    3330:	add	x8, x8, x9
    3334:	ldursw	x10, [x29, #-40]
    3338:	mul	x10, x11, x10
    333c:	add	x8, x8, x10
    3340:	ldr	x10, [sp, #120]
    3344:	ldur	w12, [x29, #-28]
    3348:	add	w12, w12, #0x12
    334c:	ldrh	w12, [x10, w12, sxtw #1]
    3350:	mov	w10, w12
    3354:	mul	x10, x13, x10
    3358:	add	x8, x8, x10
    335c:	ldr	w12, [x8]
    3360:	add	w12, w12, #0x1
    3364:	str	w12, [x8]
    3368:	ldur	x8, [x29, #-8]
    336c:	add	x8, x8, x9
    3370:	ldursw	x10, [x29, #-40]
    3374:	mul	x10, x11, x10
    3378:	add	x8, x8, x10
    337c:	ldr	x10, [sp, #120]
    3380:	ldur	w12, [x29, #-28]
    3384:	add	w12, w12, #0x13
    3388:	ldrh	w12, [x10, w12, sxtw #1]
    338c:	mov	w10, w12
    3390:	mul	x10, x13, x10
    3394:	add	x8, x8, x10
    3398:	ldr	w12, [x8]
    339c:	add	w12, w12, #0x1
    33a0:	str	w12, [x8]
    33a4:	ldur	x8, [x29, #-8]
    33a8:	add	x8, x8, x9
    33ac:	ldursw	x10, [x29, #-40]
    33b0:	mul	x10, x11, x10
    33b4:	add	x8, x8, x10
    33b8:	ldr	x10, [sp, #120]
    33bc:	ldur	w12, [x29, #-28]
    33c0:	add	w12, w12, #0x14
    33c4:	ldrh	w12, [x10, w12, sxtw #1]
    33c8:	mov	w10, w12
    33cc:	mul	x10, x13, x10
    33d0:	add	x8, x8, x10
    33d4:	ldr	w12, [x8]
    33d8:	add	w12, w12, #0x1
    33dc:	str	w12, [x8]
    33e0:	ldur	x8, [x29, #-8]
    33e4:	add	x8, x8, x9
    33e8:	ldursw	x10, [x29, #-40]
    33ec:	mul	x10, x11, x10
    33f0:	add	x8, x8, x10
    33f4:	ldr	x10, [sp, #120]
    33f8:	ldur	w12, [x29, #-28]
    33fc:	add	w12, w12, #0x15
    3400:	ldrh	w12, [x10, w12, sxtw #1]
    3404:	mov	w10, w12
    3408:	mul	x10, x13, x10
    340c:	add	x8, x8, x10
    3410:	ldr	w12, [x8]
    3414:	add	w12, w12, #0x1
    3418:	str	w12, [x8]
    341c:	ldur	x8, [x29, #-8]
    3420:	add	x8, x8, x9
    3424:	ldursw	x10, [x29, #-40]
    3428:	mul	x10, x11, x10
    342c:	add	x8, x8, x10
    3430:	ldr	x10, [sp, #120]
    3434:	ldur	w12, [x29, #-28]
    3438:	add	w12, w12, #0x16
    343c:	ldrh	w12, [x10, w12, sxtw #1]
    3440:	mov	w10, w12
    3444:	mul	x10, x13, x10
    3448:	add	x8, x8, x10
    344c:	ldr	w12, [x8]
    3450:	add	w12, w12, #0x1
    3454:	str	w12, [x8]
    3458:	ldur	x8, [x29, #-8]
    345c:	add	x8, x8, x9
    3460:	ldursw	x10, [x29, #-40]
    3464:	mul	x10, x11, x10
    3468:	add	x8, x8, x10
    346c:	ldr	x10, [sp, #120]
    3470:	ldur	w12, [x29, #-28]
    3474:	add	w12, w12, #0x17
    3478:	ldrh	w12, [x10, w12, sxtw #1]
    347c:	mov	w10, w12
    3480:	mul	x10, x13, x10
    3484:	add	x8, x8, x10
    3488:	ldr	w12, [x8]
    348c:	add	w12, w12, #0x1
    3490:	str	w12, [x8]
    3494:	ldur	x8, [x29, #-8]
    3498:	add	x8, x8, x9
    349c:	ldursw	x10, [x29, #-40]
    34a0:	mul	x10, x11, x10
    34a4:	add	x8, x8, x10
    34a8:	ldr	x10, [sp, #120]
    34ac:	ldur	w12, [x29, #-28]
    34b0:	add	w12, w12, #0x18
    34b4:	ldrh	w12, [x10, w12, sxtw #1]
    34b8:	mov	w10, w12
    34bc:	mul	x10, x13, x10
    34c0:	add	x8, x8, x10
    34c4:	ldr	w12, [x8]
    34c8:	add	w12, w12, #0x1
    34cc:	str	w12, [x8]
    34d0:	ldur	x8, [x29, #-8]
    34d4:	add	x8, x8, x9
    34d8:	ldursw	x10, [x29, #-40]
    34dc:	mul	x10, x11, x10
    34e0:	add	x8, x8, x10
    34e4:	ldr	x10, [sp, #120]
    34e8:	ldur	w12, [x29, #-28]
    34ec:	add	w12, w12, #0x19
    34f0:	ldrh	w12, [x10, w12, sxtw #1]
    34f4:	mov	w10, w12
    34f8:	mul	x10, x13, x10
    34fc:	add	x8, x8, x10
    3500:	ldr	w12, [x8]
    3504:	add	w12, w12, #0x1
    3508:	str	w12, [x8]
    350c:	ldur	x8, [x29, #-8]
    3510:	add	x8, x8, x9
    3514:	ldursw	x10, [x29, #-40]
    3518:	mul	x10, x11, x10
    351c:	add	x8, x8, x10
    3520:	ldr	x10, [sp, #120]
    3524:	ldur	w12, [x29, #-28]
    3528:	add	w12, w12, #0x1a
    352c:	ldrh	w12, [x10, w12, sxtw #1]
    3530:	mov	w10, w12
    3534:	mul	x10, x13, x10
    3538:	add	x8, x8, x10
    353c:	ldr	w12, [x8]
    3540:	add	w12, w12, #0x1
    3544:	str	w12, [x8]
    3548:	ldur	x8, [x29, #-8]
    354c:	add	x8, x8, x9
    3550:	ldursw	x10, [x29, #-40]
    3554:	mul	x10, x11, x10
    3558:	add	x8, x8, x10
    355c:	ldr	x10, [sp, #120]
    3560:	ldur	w12, [x29, #-28]
    3564:	add	w12, w12, #0x1b
    3568:	ldrh	w12, [x10, w12, sxtw #1]
    356c:	mov	w10, w12
    3570:	mul	x10, x13, x10
    3574:	add	x8, x8, x10
    3578:	ldr	w12, [x8]
    357c:	add	w12, w12, #0x1
    3580:	str	w12, [x8]
    3584:	ldur	x8, [x29, #-8]
    3588:	add	x8, x8, x9
    358c:	ldursw	x10, [x29, #-40]
    3590:	mul	x10, x11, x10
    3594:	add	x8, x8, x10
    3598:	ldr	x10, [sp, #120]
    359c:	ldur	w12, [x29, #-28]
    35a0:	add	w12, w12, #0x1c
    35a4:	ldrh	w12, [x10, w12, sxtw #1]
    35a8:	mov	w10, w12
    35ac:	mul	x10, x13, x10
    35b0:	add	x8, x8, x10
    35b4:	ldr	w12, [x8]
    35b8:	add	w12, w12, #0x1
    35bc:	str	w12, [x8]
    35c0:	ldur	x8, [x29, #-8]
    35c4:	add	x8, x8, x9
    35c8:	ldursw	x10, [x29, #-40]
    35cc:	mul	x10, x11, x10
    35d0:	add	x8, x8, x10
    35d4:	ldr	x10, [sp, #120]
    35d8:	ldur	w12, [x29, #-28]
    35dc:	add	w12, w12, #0x1d
    35e0:	ldrh	w12, [x10, w12, sxtw #1]
    35e4:	mov	w10, w12
    35e8:	mul	x10, x13, x10
    35ec:	add	x8, x8, x10
    35f0:	ldr	w12, [x8]
    35f4:	add	w12, w12, #0x1
    35f8:	str	w12, [x8]
    35fc:	ldur	x8, [x29, #-8]
    3600:	add	x8, x8, x9
    3604:	ldursw	x10, [x29, #-40]
    3608:	mul	x10, x11, x10
    360c:	add	x8, x8, x10
    3610:	ldr	x10, [sp, #120]
    3614:	ldur	w12, [x29, #-28]
    3618:	add	w12, w12, #0x1e
    361c:	ldrh	w12, [x10, w12, sxtw #1]
    3620:	mov	w10, w12
    3624:	mul	x10, x13, x10
    3628:	add	x8, x8, x10
    362c:	ldr	w12, [x8]
    3630:	add	w12, w12, #0x1
    3634:	str	w12, [x8]
    3638:	ldur	x8, [x29, #-8]
    363c:	add	x8, x8, x9
    3640:	ldursw	x10, [x29, #-40]
    3644:	mul	x10, x11, x10
    3648:	add	x8, x8, x10
    364c:	ldr	x10, [sp, #120]
    3650:	ldur	w12, [x29, #-28]
    3654:	add	w12, w12, #0x1f
    3658:	ldrh	w12, [x10, w12, sxtw #1]
    365c:	mov	w10, w12
    3660:	mul	x10, x13, x10
    3664:	add	x8, x8, x10
    3668:	ldr	w12, [x8]
    366c:	add	w12, w12, #0x1
    3670:	str	w12, [x8]
    3674:	ldur	x8, [x29, #-8]
    3678:	add	x8, x8, x9
    367c:	ldursw	x10, [x29, #-40]
    3680:	mul	x10, x11, x10
    3684:	add	x8, x8, x10
    3688:	ldr	x10, [sp, #120]
    368c:	ldur	w12, [x29, #-28]
    3690:	add	w12, w12, #0x20
    3694:	ldrh	w12, [x10, w12, sxtw #1]
    3698:	mov	w10, w12
    369c:	mul	x10, x13, x10
    36a0:	add	x8, x8, x10
    36a4:	ldr	w12, [x8]
    36a8:	add	w12, w12, #0x1
    36ac:	str	w12, [x8]
    36b0:	ldur	x8, [x29, #-8]
    36b4:	add	x8, x8, x9
    36b8:	ldursw	x10, [x29, #-40]
    36bc:	mul	x10, x11, x10
    36c0:	add	x8, x8, x10
    36c4:	ldr	x10, [sp, #120]
    36c8:	ldur	w12, [x29, #-28]
    36cc:	add	w12, w12, #0x21
    36d0:	ldrh	w12, [x10, w12, sxtw #1]
    36d4:	mov	w10, w12
    36d8:	mul	x10, x13, x10
    36dc:	add	x8, x8, x10
    36e0:	ldr	w12, [x8]
    36e4:	add	w12, w12, #0x1
    36e8:	str	w12, [x8]
    36ec:	ldur	x8, [x29, #-8]
    36f0:	add	x8, x8, x9
    36f4:	ldursw	x10, [x29, #-40]
    36f8:	mul	x10, x11, x10
    36fc:	add	x8, x8, x10
    3700:	ldr	x10, [sp, #120]
    3704:	ldur	w12, [x29, #-28]
    3708:	add	w12, w12, #0x22
    370c:	ldrh	w12, [x10, w12, sxtw #1]
    3710:	mov	w10, w12
    3714:	mul	x10, x13, x10
    3718:	add	x8, x8, x10
    371c:	ldr	w12, [x8]
    3720:	add	w12, w12, #0x1
    3724:	str	w12, [x8]
    3728:	ldur	x8, [x29, #-8]
    372c:	add	x8, x8, x9
    3730:	ldursw	x10, [x29, #-40]
    3734:	mul	x10, x11, x10
    3738:	add	x8, x8, x10
    373c:	ldr	x10, [sp, #120]
    3740:	ldur	w12, [x29, #-28]
    3744:	add	w12, w12, #0x23
    3748:	ldrh	w12, [x10, w12, sxtw #1]
    374c:	mov	w10, w12
    3750:	mul	x10, x13, x10
    3754:	add	x8, x8, x10
    3758:	ldr	w12, [x8]
    375c:	add	w12, w12, #0x1
    3760:	str	w12, [x8]
    3764:	ldur	x8, [x29, #-8]
    3768:	add	x8, x8, x9
    376c:	ldursw	x10, [x29, #-40]
    3770:	mul	x10, x11, x10
    3774:	add	x8, x8, x10
    3778:	ldr	x10, [sp, #120]
    377c:	ldur	w12, [x29, #-28]
    3780:	add	w12, w12, #0x24
    3784:	ldrh	w12, [x10, w12, sxtw #1]
    3788:	mov	w10, w12
    378c:	mul	x10, x13, x10
    3790:	add	x8, x8, x10
    3794:	ldr	w12, [x8]
    3798:	add	w12, w12, #0x1
    379c:	str	w12, [x8]
    37a0:	ldur	x8, [x29, #-8]
    37a4:	add	x8, x8, x9
    37a8:	ldursw	x10, [x29, #-40]
    37ac:	mul	x10, x11, x10
    37b0:	add	x8, x8, x10
    37b4:	ldr	x10, [sp, #120]
    37b8:	ldur	w12, [x29, #-28]
    37bc:	add	w12, w12, #0x25
    37c0:	ldrh	w12, [x10, w12, sxtw #1]
    37c4:	mov	w10, w12
    37c8:	mul	x10, x13, x10
    37cc:	add	x8, x8, x10
    37d0:	ldr	w12, [x8]
    37d4:	add	w12, w12, #0x1
    37d8:	str	w12, [x8]
    37dc:	ldur	x8, [x29, #-8]
    37e0:	add	x8, x8, x9
    37e4:	ldursw	x10, [x29, #-40]
    37e8:	mul	x10, x11, x10
    37ec:	add	x8, x8, x10
    37f0:	ldr	x10, [sp, #120]
    37f4:	ldur	w12, [x29, #-28]
    37f8:	add	w12, w12, #0x26
    37fc:	ldrh	w12, [x10, w12, sxtw #1]
    3800:	mov	w10, w12
    3804:	mul	x10, x13, x10
    3808:	add	x8, x8, x10
    380c:	ldr	w12, [x8]
    3810:	add	w12, w12, #0x1
    3814:	str	w12, [x8]
    3818:	ldur	x8, [x29, #-8]
    381c:	add	x8, x8, x9
    3820:	ldursw	x10, [x29, #-40]
    3824:	mul	x10, x11, x10
    3828:	add	x8, x8, x10
    382c:	ldr	x10, [sp, #120]
    3830:	ldur	w12, [x29, #-28]
    3834:	add	w12, w12, #0x27
    3838:	ldrh	w12, [x10, w12, sxtw #1]
    383c:	mov	w10, w12
    3840:	mul	x10, x13, x10
    3844:	add	x8, x8, x10
    3848:	ldr	w12, [x8]
    384c:	add	w12, w12, #0x1
    3850:	str	w12, [x8]
    3854:	ldur	x8, [x29, #-8]
    3858:	add	x8, x8, x9
    385c:	ldursw	x10, [x29, #-40]
    3860:	mul	x10, x11, x10
    3864:	add	x8, x8, x10
    3868:	ldr	x10, [sp, #120]
    386c:	ldur	w12, [x29, #-28]
    3870:	add	w12, w12, #0x28
    3874:	ldrh	w12, [x10, w12, sxtw #1]
    3878:	mov	w10, w12
    387c:	mul	x10, x13, x10
    3880:	add	x8, x8, x10
    3884:	ldr	w12, [x8]
    3888:	add	w12, w12, #0x1
    388c:	str	w12, [x8]
    3890:	ldur	x8, [x29, #-8]
    3894:	add	x8, x8, x9
    3898:	ldursw	x10, [x29, #-40]
    389c:	mul	x10, x11, x10
    38a0:	add	x8, x8, x10
    38a4:	ldr	x10, [sp, #120]
    38a8:	ldur	w12, [x29, #-28]
    38ac:	add	w12, w12, #0x29
    38b0:	ldrh	w12, [x10, w12, sxtw #1]
    38b4:	mov	w10, w12
    38b8:	mul	x10, x13, x10
    38bc:	add	x8, x8, x10
    38c0:	ldr	w12, [x8]
    38c4:	add	w12, w12, #0x1
    38c8:	str	w12, [x8]
    38cc:	ldur	x8, [x29, #-8]
    38d0:	add	x8, x8, x9
    38d4:	ldursw	x10, [x29, #-40]
    38d8:	mul	x10, x11, x10
    38dc:	add	x8, x8, x10
    38e0:	ldr	x10, [sp, #120]
    38e4:	ldur	w12, [x29, #-28]
    38e8:	add	w12, w12, #0x2a
    38ec:	ldrh	w12, [x10, w12, sxtw #1]
    38f0:	mov	w10, w12
    38f4:	mul	x10, x13, x10
    38f8:	add	x8, x8, x10
    38fc:	ldr	w12, [x8]
    3900:	add	w12, w12, #0x1
    3904:	str	w12, [x8]
    3908:	ldur	x8, [x29, #-8]
    390c:	add	x8, x8, x9
    3910:	ldursw	x10, [x29, #-40]
    3914:	mul	x10, x11, x10
    3918:	add	x8, x8, x10
    391c:	ldr	x10, [sp, #120]
    3920:	ldur	w12, [x29, #-28]
    3924:	add	w12, w12, #0x2b
    3928:	ldrh	w12, [x10, w12, sxtw #1]
    392c:	mov	w10, w12
    3930:	mul	x10, x13, x10
    3934:	add	x8, x8, x10
    3938:	ldr	w12, [x8]
    393c:	add	w12, w12, #0x1
    3940:	str	w12, [x8]
    3944:	ldur	x8, [x29, #-8]
    3948:	add	x8, x8, x9
    394c:	ldursw	x10, [x29, #-40]
    3950:	mul	x10, x11, x10
    3954:	add	x8, x8, x10
    3958:	ldr	x10, [sp, #120]
    395c:	ldur	w12, [x29, #-28]
    3960:	add	w12, w12, #0x2c
    3964:	ldrh	w12, [x10, w12, sxtw #1]
    3968:	mov	w10, w12
    396c:	mul	x10, x13, x10
    3970:	add	x8, x8, x10
    3974:	ldr	w12, [x8]
    3978:	add	w12, w12, #0x1
    397c:	str	w12, [x8]
    3980:	ldur	x8, [x29, #-8]
    3984:	add	x8, x8, x9
    3988:	ldursw	x10, [x29, #-40]
    398c:	mul	x10, x11, x10
    3990:	add	x8, x8, x10
    3994:	ldr	x10, [sp, #120]
    3998:	ldur	w12, [x29, #-28]
    399c:	add	w12, w12, #0x2d
    39a0:	ldrh	w12, [x10, w12, sxtw #1]
    39a4:	mov	w10, w12
    39a8:	mul	x10, x13, x10
    39ac:	add	x8, x8, x10
    39b0:	ldr	w12, [x8]
    39b4:	add	w12, w12, #0x1
    39b8:	str	w12, [x8]
    39bc:	ldur	x8, [x29, #-8]
    39c0:	add	x8, x8, x9
    39c4:	ldursw	x10, [x29, #-40]
    39c8:	mul	x10, x11, x10
    39cc:	add	x8, x8, x10
    39d0:	ldr	x10, [sp, #120]
    39d4:	ldur	w12, [x29, #-28]
    39d8:	add	w12, w12, #0x2e
    39dc:	ldrh	w12, [x10, w12, sxtw #1]
    39e0:	mov	w10, w12
    39e4:	mul	x10, x13, x10
    39e8:	add	x8, x8, x10
    39ec:	ldr	w12, [x8]
    39f0:	add	w12, w12, #0x1
    39f4:	str	w12, [x8]
    39f8:	ldur	x8, [x29, #-8]
    39fc:	add	x8, x8, x9
    3a00:	ldursw	x10, [x29, #-40]
    3a04:	mul	x10, x11, x10
    3a08:	add	x8, x8, x10
    3a0c:	ldr	x10, [sp, #120]
    3a10:	ldur	w12, [x29, #-28]
    3a14:	add	w12, w12, #0x2f
    3a18:	ldrh	w12, [x10, w12, sxtw #1]
    3a1c:	mov	w10, w12
    3a20:	mul	x10, x13, x10
    3a24:	add	x8, x8, x10
    3a28:	ldr	w12, [x8]
    3a2c:	add	w12, w12, #0x1
    3a30:	str	w12, [x8]
    3a34:	ldur	x8, [x29, #-8]
    3a38:	add	x8, x8, x9
    3a3c:	ldursw	x10, [x29, #-40]
    3a40:	mul	x10, x11, x10
    3a44:	add	x8, x8, x10
    3a48:	ldr	x10, [sp, #120]
    3a4c:	ldur	w12, [x29, #-28]
    3a50:	add	w12, w12, #0x30
    3a54:	ldrh	w12, [x10, w12, sxtw #1]
    3a58:	mov	w10, w12
    3a5c:	mul	x10, x13, x10
    3a60:	add	x8, x8, x10
    3a64:	ldr	w12, [x8]
    3a68:	add	w12, w12, #0x1
    3a6c:	str	w12, [x8]
    3a70:	ldur	x8, [x29, #-8]
    3a74:	add	x8, x8, x9
    3a78:	ldursw	x9, [x29, #-40]
    3a7c:	mul	x9, x11, x9
    3a80:	add	x8, x8, x9
    3a84:	ldr	x9, [sp, #120]
    3a88:	ldur	w12, [x29, #-28]
    3a8c:	add	w12, w12, #0x31
    3a90:	ldrh	w12, [x9, w12, sxtw #1]
    3a94:	mov	w9, w12
    3a98:	mul	x9, x13, x9
    3a9c:	add	x8, x8, x9
    3aa0:	ldr	w12, [x8]
    3aa4:	add	w12, w12, #0x1
    3aa8:	str	w12, [x8]
    3aac:	b	3b1c <sendMTFValues+0x3240>
    3ab0:	ldur	w8, [x29, #-28]
    3ab4:	stur	w8, [x29, #-20]
    3ab8:	ldur	w8, [x29, #-20]
    3abc:	ldur	w9, [x29, #-32]
    3ac0:	cmp	w8, w9
    3ac4:	b.gt	3b1c <sendMTFValues+0x3240>
    3ac8:	ldur	x8, [x29, #-8]
    3acc:	mov	x9, #0xb188                	// #45448
    3ad0:	add	x8, x8, x9
    3ad4:	ldursw	x9, [x29, #-40]
    3ad8:	mov	x10, #0x408                 	// #1032
    3adc:	mul	x9, x10, x9
    3ae0:	add	x8, x8, x9
    3ae4:	ldr	x9, [sp, #120]
    3ae8:	ldursw	x10, [x29, #-20]
    3aec:	ldrh	w11, [x9, x10, lsl #1]
    3af0:	mov	w9, w11
    3af4:	mov	x10, #0x4                   	// #4
    3af8:	mul	x9, x10, x9
    3afc:	add	x8, x8, x9
    3b00:	ldr	w11, [x8]
    3b04:	add	w11, w11, #0x1
    3b08:	str	w11, [x8]
    3b0c:	ldur	w8, [x29, #-20]
    3b10:	add	w8, w8, #0x1
    3b14:	stur	w8, [x29, #-20]
    3b18:	b	3ab8 <sendMTFValues+0x31dc>
    3b1c:	ldur	w8, [x29, #-32]
    3b20:	add	w8, w8, #0x1
    3b24:	stur	w8, [x29, #-28]
    3b28:	b	e80 <sendMTFValues+0x5a4>
    3b2c:	ldur	x8, [x29, #-8]
    3b30:	ldr	w9, [x8, #656]
    3b34:	cmp	w9, #0x3
    3b38:	b.lt	3bbc <sendMTFValues+0x32e0>  // b.tstop
    3b3c:	ldr	x8, [sp, #24]
    3b40:	ldr	x0, [x8]
    3b44:	ldur	w9, [x29, #-48]
    3b48:	add	w2, w9, #0x1
    3b4c:	ldur	w9, [x29, #-36]
    3b50:	mov	w10, #0x8                   	// #8
    3b54:	sdiv	w3, w9, w10
    3b58:	adrp	x1, 0 <BZ2_bsInitWrite>
    3b5c:	add	x1, x1, #0x0
    3b60:	bl	0 <fprintf>
    3b64:	stur	wzr, [x29, #-16]
    3b68:	ldur	w8, [x29, #-16]
    3b6c:	ldur	w9, [x29, #-72]
    3b70:	cmp	w8, w9
    3b74:	b.ge	3ba8 <sendMTFValues+0x32cc>  // b.tcont
    3b78:	ldr	x8, [sp, #24]
    3b7c:	ldr	x0, [x8]
    3b80:	ldursw	x9, [x29, #-16]
    3b84:	sub	x10, x29, #0x70
    3b88:	ldr	w2, [x10, x9, lsl #2]
    3b8c:	adrp	x1, 0 <BZ2_bsInitWrite>
    3b90:	add	x1, x1, #0x0
    3b94:	bl	0 <fprintf>
    3b98:	ldur	w8, [x29, #-16]
    3b9c:	add	w8, w8, #0x1
    3ba0:	stur	w8, [x29, #-16]
    3ba4:	b	3b68 <sendMTFValues+0x328c>
    3ba8:	ldr	x8, [sp, #24]
    3bac:	ldr	x0, [x8]
    3bb0:	adrp	x1, 0 <BZ2_bsInitWrite>
    3bb4:	add	x1, x1, #0x0
    3bb8:	bl	0 <fprintf>
    3bbc:	stur	wzr, [x29, #-16]
    3bc0:	ldur	w8, [x29, #-16]
    3bc4:	ldur	w9, [x29, #-72]
    3bc8:	cmp	w8, w9
    3bcc:	b.ge	3c24 <sendMTFValues+0x3348>  // b.tcont
    3bd0:	ldur	x8, [x29, #-8]
    3bd4:	mov	x9, #0x934c                	// #37708
    3bd8:	add	x8, x8, x9
    3bdc:	ldursw	x9, [x29, #-16]
    3be0:	mov	x10, #0x102                 	// #258
    3be4:	mul	x9, x10, x9
    3be8:	add	x0, x8, x9
    3bec:	ldur	x8, [x29, #-8]
    3bf0:	mov	x9, #0xb188                	// #45448
    3bf4:	add	x8, x8, x9
    3bf8:	ldursw	x9, [x29, #-16]
    3bfc:	mov	x10, #0x408                 	// #1032
    3c00:	mul	x9, x10, x9
    3c04:	add	x1, x8, x9
    3c08:	ldur	w2, [x29, #-56]
    3c0c:	mov	w3, #0x11                  	// #17
    3c10:	bl	0 <BZ2_hbMakeCodeLengths>
    3c14:	ldur	w8, [x29, #-16]
    3c18:	add	w8, w8, #0x1
    3c1c:	stur	w8, [x29, #-16]
    3c20:	b	3bc0 <sendMTFValues+0x32e4>
    3c24:	ldur	w8, [x29, #-48]
    3c28:	add	w8, w8, #0x1
    3c2c:	stur	w8, [x29, #-48]
    3c30:	b	cc4 <sendMTFValues+0x3e8>
    3c34:	ldur	w8, [x29, #-72]
    3c38:	cmp	w8, #0x8
    3c3c:	b.lt	3c48 <sendMTFValues+0x336c>  // b.tstop
    3c40:	mov	w0, #0xbba                 	// #3002
    3c44:	bl	0 <BZ2_bz__AssertH__fail>
    3c48:	ldur	w8, [x29, #-52]
    3c4c:	cmp	w8, #0x8, lsl #12
    3c50:	b.ge	3c64 <sendMTFValues+0x3388>  // b.tcont
    3c54:	ldur	w8, [x29, #-52]
    3c58:	mov	w9, #0x4652                	// #18002
    3c5c:	cmp	w8, w9
    3c60:	b.le	3c6c <sendMTFValues+0x3390>
    3c64:	mov	w0, #0xbbb                 	// #3003
    3c68:	bl	0 <BZ2_bz__AssertH__fail>
    3c6c:	stur	wzr, [x29, #-20]
    3c70:	ldur	w8, [x29, #-20]
    3c74:	ldur	w9, [x29, #-72]
    3c78:	cmp	w8, w9
    3c7c:	b.ge	3ca4 <sendMTFValues+0x33c8>  // b.tcont
    3c80:	ldur	w8, [x29, #-20]
    3c84:	ldursw	x9, [x29, #-20]
    3c88:	add	x10, sp, #0x52
    3c8c:	add	x9, x10, x9
    3c90:	strb	w8, [x9]
    3c94:	ldur	w8, [x29, #-20]
    3c98:	add	w8, w8, #0x1
    3c9c:	stur	w8, [x29, #-20]
    3ca0:	b	3c70 <sendMTFValues+0x3394>
    3ca4:	stur	wzr, [x29, #-20]
    3ca8:	ldur	w8, [x29, #-20]
    3cac:	ldur	w9, [x29, #-52]
    3cb0:	cmp	w8, w9
    3cb4:	b.ge	3d68 <sendMTFValues+0x348c>  // b.tcont
    3cb8:	ldur	x8, [x29, #-8]
    3cbc:	add	x8, x8, #0x6a8
    3cc0:	ldursw	x9, [x29, #-20]
    3cc4:	add	x8, x8, x9
    3cc8:	ldrb	w10, [x8]
    3ccc:	strb	w10, [sp, #81]
    3cd0:	stur	wzr, [x29, #-24]
    3cd4:	ldursw	x8, [x29, #-24]
    3cd8:	add	x9, sp, #0x52
    3cdc:	add	x8, x9, x8
    3ce0:	ldrb	w10, [x8]
    3ce4:	strb	w10, [sp, #79]
    3ce8:	ldrb	w8, [sp, #81]
    3cec:	ldrb	w9, [sp, #79]
    3cf0:	cmp	w8, w9
    3cf4:	b.eq	3d34 <sendMTFValues+0x3458>  // b.none
    3cf8:	ldur	w8, [x29, #-24]
    3cfc:	add	w8, w8, #0x1
    3d00:	stur	w8, [x29, #-24]
    3d04:	ldrb	w8, [sp, #79]
    3d08:	strb	w8, [sp, #80]
    3d0c:	ldursw	x9, [x29, #-24]
    3d10:	add	x10, sp, #0x52
    3d14:	add	x9, x10, x9
    3d18:	ldrb	w8, [x9]
    3d1c:	strb	w8, [sp, #79]
    3d20:	ldrb	w8, [sp, #80]
    3d24:	ldursw	x9, [x29, #-24]
    3d28:	add	x9, x10, x9
    3d2c:	strb	w8, [x9]
    3d30:	b	3ce8 <sendMTFValues+0x340c>
    3d34:	ldrb	w8, [sp, #79]
    3d38:	strb	w8, [sp, #82]
    3d3c:	ldur	w8, [x29, #-24]
    3d40:	ldur	x9, [x29, #-8]
    3d44:	mov	x10, #0x4cfa                	// #19706
    3d48:	add	x9, x9, x10
    3d4c:	ldursw	x10, [x29, #-20]
    3d50:	add	x9, x9, x10
    3d54:	strb	w8, [x9]
    3d58:	ldur	w8, [x29, #-20]
    3d5c:	add	w8, w8, #0x1
    3d60:	stur	w8, [x29, #-20]
    3d64:	b	3ca8 <sendMTFValues+0x33cc>
    3d68:	stur	wzr, [x29, #-16]
    3d6c:	ldur	w8, [x29, #-16]
    3d70:	ldur	w9, [x29, #-72]
    3d74:	cmp	w8, w9
    3d78:	b.ge	3edc <sendMTFValues+0x3600>  // b.tcont
    3d7c:	mov	w8, #0x20                  	// #32
    3d80:	stur	w8, [x29, #-60]
    3d84:	stur	wzr, [x29, #-64]
    3d88:	stur	wzr, [x29, #-20]
    3d8c:	ldur	w8, [x29, #-20]
    3d90:	ldur	w9, [x29, #-56]
    3d94:	cmp	w8, w9
    3d98:	b.ge	3e5c <sendMTFValues+0x3580>  // b.tcont
    3d9c:	ldur	x8, [x29, #-8]
    3da0:	mov	x9, #0x934c                	// #37708
    3da4:	add	x8, x8, x9
    3da8:	ldursw	x9, [x29, #-16]
    3dac:	mov	x10, #0x102                 	// #258
    3db0:	mul	x9, x10, x9
    3db4:	add	x8, x8, x9
    3db8:	ldursw	x9, [x29, #-20]
    3dbc:	ldrb	w11, [x8, x9]
    3dc0:	ldur	w12, [x29, #-64]
    3dc4:	cmp	w11, w12
    3dc8:	b.le	3df4 <sendMTFValues+0x3518>
    3dcc:	ldur	x8, [x29, #-8]
    3dd0:	mov	x9, #0x934c                	// #37708
    3dd4:	add	x8, x8, x9
    3dd8:	ldursw	x9, [x29, #-16]
    3ddc:	mov	x10, #0x102                 	// #258
    3de0:	mul	x9, x10, x9
    3de4:	add	x8, x8, x9
    3de8:	ldursw	x9, [x29, #-20]
    3dec:	ldrb	w11, [x8, x9]
    3df0:	stur	w11, [x29, #-64]
    3df4:	ldur	x8, [x29, #-8]
    3df8:	mov	x9, #0x934c                	// #37708
    3dfc:	add	x8, x8, x9
    3e00:	ldursw	x9, [x29, #-16]
    3e04:	mov	x10, #0x102                 	// #258
    3e08:	mul	x9, x10, x9
    3e0c:	add	x8, x8, x9
    3e10:	ldursw	x9, [x29, #-20]
    3e14:	ldrb	w11, [x8, x9]
    3e18:	ldur	w12, [x29, #-60]
    3e1c:	cmp	w11, w12
    3e20:	b.ge	3e4c <sendMTFValues+0x3570>  // b.tcont
    3e24:	ldur	x8, [x29, #-8]
    3e28:	mov	x9, #0x934c                	// #37708
    3e2c:	add	x8, x8, x9
    3e30:	ldursw	x9, [x29, #-16]
    3e34:	mov	x10, #0x102                 	// #258
    3e38:	mul	x9, x10, x9
    3e3c:	add	x8, x8, x9
    3e40:	ldursw	x9, [x29, #-20]
    3e44:	ldrb	w11, [x8, x9]
    3e48:	stur	w11, [x29, #-60]
    3e4c:	ldur	w8, [x29, #-20]
    3e50:	add	w8, w8, #0x1
    3e54:	stur	w8, [x29, #-20]
    3e58:	b	3d8c <sendMTFValues+0x34b0>
    3e5c:	ldur	w8, [x29, #-64]
    3e60:	cmp	w8, #0x11
    3e64:	b.le	3e70 <sendMTFValues+0x3594>
    3e68:	mov	w0, #0xbbc                 	// #3004
    3e6c:	bl	0 <BZ2_bz__AssertH__fail>
    3e70:	ldur	w8, [x29, #-60]
    3e74:	cmp	w8, #0x1
    3e78:	b.ge	3e84 <sendMTFValues+0x35a8>  // b.tcont
    3e7c:	mov	w0, #0xbbd                 	// #3005
    3e80:	bl	0 <BZ2_bz__AssertH__fail>
    3e84:	ldur	x8, [x29, #-8]
    3e88:	mov	x9, #0x9958                	// #39256
    3e8c:	add	x8, x8, x9
    3e90:	ldursw	x9, [x29, #-16]
    3e94:	mov	x10, #0x408                 	// #1032
    3e98:	mul	x9, x10, x9
    3e9c:	add	x0, x8, x9
    3ea0:	ldur	x8, [x29, #-8]
    3ea4:	mov	x9, #0x934c                	// #37708
    3ea8:	add	x8, x8, x9
    3eac:	ldursw	x9, [x29, #-16]
    3eb0:	mov	x10, #0x102                 	// #258
    3eb4:	mul	x9, x10, x9
    3eb8:	add	x1, x8, x9
    3ebc:	ldur	w2, [x29, #-60]
    3ec0:	ldur	w3, [x29, #-64]
    3ec4:	ldur	w4, [x29, #-56]
    3ec8:	bl	0 <BZ2_hbAssignCodes>
    3ecc:	ldur	w8, [x29, #-16]
    3ed0:	add	w8, w8, #0x1
    3ed4:	stur	w8, [x29, #-16]
    3ed8:	b	3d6c <sendMTFValues+0x3490>
    3edc:	stur	wzr, [x29, #-20]
    3ee0:	ldur	w8, [x29, #-20]
    3ee4:	cmp	w8, #0x10
    3ee8:	b.ge	3f74 <sendMTFValues+0x3698>  // b.tcont
    3eec:	ldursw	x8, [x29, #-20]
    3ef0:	add	x9, sp, #0x3f
    3ef4:	add	x8, x9, x8
    3ef8:	mov	w10, #0x0                   	// #0
    3efc:	strb	w10, [x8]
    3f00:	stur	wzr, [x29, #-24]
    3f04:	ldur	w8, [x29, #-24]
    3f08:	cmp	w8, #0x10
    3f0c:	b.ge	3f64 <sendMTFValues+0x3688>  // b.tcont
    3f10:	ldur	x8, [x29, #-8]
    3f14:	add	x8, x8, #0x80
    3f18:	ldur	w9, [x29, #-20]
    3f1c:	mov	w10, #0x10                  	// #16
    3f20:	mul	w9, w9, w10
    3f24:	ldur	w10, [x29, #-24]
    3f28:	add	w9, w9, w10
    3f2c:	mov	w0, w9
    3f30:	sxtw	x11, w0
    3f34:	add	x8, x8, x11
    3f38:	ldrb	w9, [x8]
    3f3c:	cbz	w9, 3f54 <sendMTFValues+0x3678>
    3f40:	ldursw	x8, [x29, #-20]
    3f44:	add	x9, sp, #0x3f
    3f48:	add	x8, x9, x8
    3f4c:	mov	w10, #0x1                   	// #1
    3f50:	strb	w10, [x8]
    3f54:	ldur	w8, [x29, #-24]
    3f58:	add	w8, w8, #0x1
    3f5c:	stur	w8, [x29, #-24]
    3f60:	b	3f04 <sendMTFValues+0x3628>
    3f64:	ldur	w8, [x29, #-20]
    3f68:	add	w8, w8, #0x1
    3f6c:	stur	w8, [x29, #-20]
    3f70:	b	3ee0 <sendMTFValues+0x3604>
    3f74:	ldur	x8, [x29, #-8]
    3f78:	ldr	w9, [x8, #116]
    3f7c:	stur	w9, [x29, #-76]
    3f80:	stur	wzr, [x29, #-20]
    3f84:	ldur	w8, [x29, #-20]
    3f88:	cmp	w8, #0x10
    3f8c:	b.ge	3fe0 <sendMTFValues+0x3704>  // b.tcont
    3f90:	ldursw	x8, [x29, #-20]
    3f94:	add	x9, sp, #0x3f
    3f98:	add	x8, x9, x8
    3f9c:	ldrb	w10, [x8]
    3fa0:	cbz	w10, 3fbc <sendMTFValues+0x36e0>
    3fa4:	ldur	x0, [x29, #-8]
    3fa8:	mov	w8, #0x1                   	// #1
    3fac:	mov	w1, w8
    3fb0:	mov	w2, w8
    3fb4:	bl	3a0 <bsW>
    3fb8:	b	3fd0 <sendMTFValues+0x36f4>
    3fbc:	ldur	x0, [x29, #-8]
    3fc0:	mov	w1, #0x1                   	// #1
    3fc4:	mov	w8, wzr
    3fc8:	mov	w2, w8
    3fcc:	bl	3a0 <bsW>
    3fd0:	ldur	w8, [x29, #-20]
    3fd4:	add	w8, w8, #0x1
    3fd8:	stur	w8, [x29, #-20]
    3fdc:	b	3f84 <sendMTFValues+0x36a8>
    3fe0:	stur	wzr, [x29, #-20]
    3fe4:	ldur	w8, [x29, #-20]
    3fe8:	cmp	w8, #0x10
    3fec:	b.ge	4090 <sendMTFValues+0x37b4>  // b.tcont
    3ff0:	ldursw	x8, [x29, #-20]
    3ff4:	add	x9, sp, #0x3f
    3ff8:	add	x8, x9, x8
    3ffc:	ldrb	w10, [x8]
    4000:	cbz	w10, 4080 <sendMTFValues+0x37a4>
    4004:	stur	wzr, [x29, #-24]
    4008:	ldur	w8, [x29, #-24]
    400c:	cmp	w8, #0x10
    4010:	b.ge	4080 <sendMTFValues+0x37a4>  // b.tcont
    4014:	ldur	x8, [x29, #-8]
    4018:	add	x8, x8, #0x80
    401c:	ldur	w9, [x29, #-20]
    4020:	mov	w10, #0x10                  	// #16
    4024:	mul	w9, w9, w10
    4028:	ldur	w10, [x29, #-24]
    402c:	add	w9, w9, w10
    4030:	mov	w0, w9
    4034:	sxtw	x11, w0
    4038:	add	x8, x8, x11
    403c:	ldrb	w9, [x8]
    4040:	cbz	w9, 405c <sendMTFValues+0x3780>
    4044:	ldur	x0, [x29, #-8]
    4048:	mov	w8, #0x1                   	// #1
    404c:	mov	w1, w8
    4050:	mov	w2, w8
    4054:	bl	3a0 <bsW>
    4058:	b	4070 <sendMTFValues+0x3794>
    405c:	ldur	x0, [x29, #-8]
    4060:	mov	w1, #0x1                   	// #1
    4064:	mov	w8, wzr
    4068:	mov	w2, w8
    406c:	bl	3a0 <bsW>
    4070:	ldur	w8, [x29, #-24]
    4074:	add	w8, w8, #0x1
    4078:	stur	w8, [x29, #-24]
    407c:	b	4008 <sendMTFValues+0x372c>
    4080:	ldur	w8, [x29, #-20]
    4084:	add	w8, w8, #0x1
    4088:	stur	w8, [x29, #-20]
    408c:	b	3fe4 <sendMTFValues+0x3708>
    4090:	ldur	x8, [x29, #-8]
    4094:	ldr	w9, [x8, #656]
    4098:	cmp	w9, #0x3
    409c:	b.lt	40c4 <sendMTFValues+0x37e8>  // b.tstop
    40a0:	ldr	x8, [sp, #24]
    40a4:	ldr	x0, [x8]
    40a8:	ldur	x9, [x29, #-8]
    40ac:	ldr	w10, [x9, #116]
    40b0:	ldur	w11, [x29, #-76]
    40b4:	subs	w2, w10, w11
    40b8:	adrp	x1, 0 <BZ2_bsInitWrite>
    40bc:	add	x1, x1, #0x0
    40c0:	bl	0 <fprintf>
    40c4:	ldur	x8, [x29, #-8]
    40c8:	ldr	w9, [x8, #116]
    40cc:	stur	w9, [x29, #-76]
    40d0:	ldur	x0, [x29, #-8]
    40d4:	ldur	w2, [x29, #-72]
    40d8:	mov	w1, #0x3                   	// #3
    40dc:	bl	3a0 <bsW>
    40e0:	ldur	x0, [x29, #-8]
    40e4:	ldur	w2, [x29, #-52]
    40e8:	mov	w1, #0xf                   	// #15
    40ec:	bl	3a0 <bsW>
    40f0:	stur	wzr, [x29, #-20]
    40f4:	ldur	w8, [x29, #-20]
    40f8:	ldur	w9, [x29, #-52]
    40fc:	cmp	w8, w9
    4100:	b.ge	4170 <sendMTFValues+0x3894>  // b.tcont
    4104:	stur	wzr, [x29, #-24]
    4108:	ldur	w8, [x29, #-24]
    410c:	ldur	x9, [x29, #-8]
    4110:	mov	x10, #0x4cfa                	// #19706
    4114:	add	x9, x9, x10
    4118:	ldursw	x10, [x29, #-20]
    411c:	ldrb	w11, [x9, x10]
    4120:	cmp	w8, w11
    4124:	b.ge	414c <sendMTFValues+0x3870>  // b.tcont
    4128:	ldur	x0, [x29, #-8]
    412c:	mov	w8, #0x1                   	// #1
    4130:	mov	w1, w8
    4134:	mov	w2, w8
    4138:	bl	3a0 <bsW>
    413c:	ldur	w8, [x29, #-24]
    4140:	add	w8, w8, #0x1
    4144:	stur	w8, [x29, #-24]
    4148:	b	4108 <sendMTFValues+0x382c>
    414c:	ldur	x0, [x29, #-8]
    4150:	mov	w1, #0x1                   	// #1
    4154:	mov	w8, wzr
    4158:	mov	w2, w8
    415c:	bl	3a0 <bsW>
    4160:	ldur	w8, [x29, #-20]
    4164:	add	w8, w8, #0x1
    4168:	stur	w8, [x29, #-20]
    416c:	b	40f4 <sendMTFValues+0x3818>
    4170:	ldur	x8, [x29, #-8]
    4174:	ldr	w9, [x8, #656]
    4178:	cmp	w9, #0x3
    417c:	b.lt	41a4 <sendMTFValues+0x38c8>  // b.tstop
    4180:	ldr	x8, [sp, #24]
    4184:	ldr	x0, [x8]
    4188:	ldur	x9, [x29, #-8]
    418c:	ldr	w10, [x9, #116]
    4190:	ldur	w11, [x29, #-76]
    4194:	subs	w2, w10, w11
    4198:	adrp	x1, 0 <BZ2_bsInitWrite>
    419c:	add	x1, x1, #0x0
    41a0:	bl	0 <fprintf>
    41a4:	ldur	x8, [x29, #-8]
    41a8:	ldr	w9, [x8, #116]
    41ac:	stur	w9, [x29, #-76]
    41b0:	stur	wzr, [x29, #-16]
    41b4:	ldur	w8, [x29, #-16]
    41b8:	ldur	w9, [x29, #-72]
    41bc:	cmp	w8, w9
    41c0:	b.ge	42e0 <sendMTFValues+0x3a04>  // b.tcont
    41c4:	ldur	x8, [x29, #-8]
    41c8:	mov	x9, #0x934c                	// #37708
    41cc:	add	x8, x8, x9
    41d0:	ldursw	x9, [x29, #-16]
    41d4:	mov	x10, #0x102                 	// #258
    41d8:	mul	x9, x10, x9
    41dc:	ldrb	w11, [x8, x9]
    41e0:	str	w11, [sp, #56]
    41e4:	ldur	x0, [x29, #-8]
    41e8:	ldr	w2, [sp, #56]
    41ec:	mov	w1, #0x5                   	// #5
    41f0:	bl	3a0 <bsW>
    41f4:	stur	wzr, [x29, #-20]
    41f8:	ldur	w8, [x29, #-20]
    41fc:	ldur	w9, [x29, #-56]
    4200:	cmp	w8, w9
    4204:	b.ge	42d0 <sendMTFValues+0x39f4>  // b.tcont
    4208:	ldr	w8, [sp, #56]
    420c:	ldur	x9, [x29, #-8]
    4210:	mov	x10, #0x934c                	// #37708
    4214:	add	x9, x9, x10
    4218:	ldursw	x10, [x29, #-16]
    421c:	mov	x11, #0x102                 	// #258
    4220:	mul	x10, x11, x10
    4224:	add	x9, x9, x10
    4228:	ldursw	x10, [x29, #-20]
    422c:	ldrb	w12, [x9, x10]
    4230:	cmp	w8, w12
    4234:	b.ge	425c <sendMTFValues+0x3980>  // b.tcont
    4238:	ldur	x0, [x29, #-8]
    423c:	mov	w8, #0x2                   	// #2
    4240:	mov	w1, w8
    4244:	mov	w2, w8
    4248:	bl	3a0 <bsW>
    424c:	ldr	w8, [sp, #56]
    4250:	add	w8, w8, #0x1
    4254:	str	w8, [sp, #56]
    4258:	b	4208 <sendMTFValues+0x392c>
    425c:	ldr	w8, [sp, #56]
    4260:	ldur	x9, [x29, #-8]
    4264:	mov	x10, #0x934c                	// #37708
    4268:	add	x9, x9, x10
    426c:	ldursw	x10, [x29, #-16]
    4270:	mov	x11, #0x102                 	// #258
    4274:	mul	x10, x11, x10
    4278:	add	x9, x9, x10
    427c:	ldursw	x10, [x29, #-20]
    4280:	ldrb	w12, [x9, x10]
    4284:	cmp	w8, w12
    4288:	b.le	42ac <sendMTFValues+0x39d0>
    428c:	ldur	x0, [x29, #-8]
    4290:	mov	w1, #0x2                   	// #2
    4294:	mov	w2, #0x3                   	// #3
    4298:	bl	3a0 <bsW>
    429c:	ldr	w8, [sp, #56]
    42a0:	subs	w8, w8, #0x1
    42a4:	str	w8, [sp, #56]
    42a8:	b	425c <sendMTFValues+0x3980>
    42ac:	ldur	x0, [x29, #-8]
    42b0:	mov	w1, #0x1                   	// #1
    42b4:	mov	w8, wzr
    42b8:	mov	w2, w8
    42bc:	bl	3a0 <bsW>
    42c0:	ldur	w8, [x29, #-20]
    42c4:	add	w8, w8, #0x1
    42c8:	stur	w8, [x29, #-20]
    42cc:	b	41f8 <sendMTFValues+0x391c>
    42d0:	ldur	w8, [x29, #-16]
    42d4:	add	w8, w8, #0x1
    42d8:	stur	w8, [x29, #-16]
    42dc:	b	41b4 <sendMTFValues+0x38d8>
    42e0:	ldur	x8, [x29, #-8]
    42e4:	ldr	w9, [x8, #656]
    42e8:	cmp	w9, #0x3
    42ec:	b.lt	4314 <sendMTFValues+0x3a38>  // b.tstop
    42f0:	ldr	x8, [sp, #24]
    42f4:	ldr	x0, [x8]
    42f8:	ldur	x9, [x29, #-8]
    42fc:	ldr	w10, [x9, #116]
    4300:	ldur	w11, [x29, #-76]
    4304:	subs	w2, w10, w11
    4308:	adrp	x1, 0 <BZ2_bsInitWrite>
    430c:	add	x1, x1, #0x0
    4310:	bl	0 <fprintf>
    4314:	ldur	x8, [x29, #-8]
    4318:	ldr	w9, [x8, #116]
    431c:	stur	w9, [x29, #-76]
    4320:	stur	wzr, [x29, #-68]
    4324:	stur	wzr, [x29, #-28]
    4328:	ldur	w8, [x29, #-28]
    432c:	ldur	x9, [x29, #-8]
    4330:	ldr	w10, [x9, #668]
    4334:	cmp	w8, w10
    4338:	b.lt	4340 <sendMTFValues+0x3a64>  // b.tstop
    433c:	b	5494 <sendMTFValues+0x4bb8>
    4340:	ldur	w8, [x29, #-28]
    4344:	add	w8, w8, #0x32
    4348:	subs	w8, w8, #0x1
    434c:	stur	w8, [x29, #-32]
    4350:	ldur	w8, [x29, #-32]
    4354:	ldur	x9, [x29, #-8]
    4358:	ldr	w10, [x9, #668]
    435c:	cmp	w8, w10
    4360:	b.lt	4374 <sendMTFValues+0x3a98>  // b.tstop
    4364:	ldur	x8, [x29, #-8]
    4368:	ldr	w9, [x8, #668]
    436c:	subs	w9, w9, #0x1
    4370:	stur	w9, [x29, #-32]
    4374:	ldur	x8, [x29, #-8]
    4378:	add	x8, x8, #0x6a8
    437c:	ldursw	x9, [x29, #-68]
    4380:	ldrb	w10, [x8, x9]
    4384:	ldur	w11, [x29, #-72]
    4388:	cmp	w10, w11
    438c:	b.lt	4398 <sendMTFValues+0x3abc>  // b.tstop
    4390:	mov	w0, #0xbbe                 	// #3006
    4394:	bl	0 <BZ2_bz__AssertH__fail>
    4398:	ldur	w8, [x29, #-72]
    439c:	cmp	w8, #0x6
    43a0:	b.ne	53c8 <sendMTFValues+0x4aec>  // b.any
    43a4:	ldur	w8, [x29, #-32]
    43a8:	ldur	w9, [x29, #-28]
    43ac:	subs	w8, w8, w9
    43b0:	add	w8, w8, #0x1
    43b4:	mov	w9, #0x32                  	// #50
    43b8:	cmp	w9, w8
    43bc:	b.ne	53c8 <sendMTFValues+0x4aec>  // b.any
    43c0:	ldur	x8, [x29, #-8]
    43c4:	mov	x9, #0x934c                	// #37708
    43c8:	add	x8, x8, x9
    43cc:	ldur	x9, [x29, #-8]
    43d0:	add	x9, x9, #0x6a8
    43d4:	ldursw	x10, [x29, #-68]
    43d8:	ldrb	w11, [x9, x10]
    43dc:	mov	w9, w11
    43e0:	mov	x10, #0x102                 	// #258
    43e4:	mul	x9, x10, x9
    43e8:	add	x8, x8, x9
    43ec:	str	x8, [sp, #40]
    43f0:	ldur	x8, [x29, #-8]
    43f4:	mov	x9, #0x9958                	// #39256
    43f8:	add	x8, x8, x9
    43fc:	ldur	x9, [x29, #-8]
    4400:	add	x9, x9, #0x6a8
    4404:	ldursw	x10, [x29, #-68]
    4408:	ldrb	w11, [x9, x10]
    440c:	mov	w9, w11
    4410:	mov	x10, #0x408                 	// #1032
    4414:	mul	x9, x10, x9
    4418:	add	x8, x8, x9
    441c:	str	x8, [sp, #32]
    4420:	ldr	x8, [sp, #120]
    4424:	ldur	w11, [x29, #-28]
    4428:	add	w11, w11, #0x0
    442c:	mov	w0, w11
    4430:	sxtw	x9, w0
    4434:	mov	x10, #0x2                   	// #2
    4438:	mul	x9, x10, x9
    443c:	add	x8, x8, x9
    4440:	ldrh	w11, [x8]
    4444:	strh	w11, [sp, #54]
    4448:	ldur	x0, [x29, #-8]
    444c:	ldr	x8, [sp, #40]
    4450:	ldrh	w11, [sp, #54]
    4454:	mov	w9, w11
    4458:	ldrb	w1, [x8, x9]
    445c:	ldr	x8, [sp, #32]
    4460:	ldrh	w11, [sp, #54]
    4464:	mov	w9, w11
    4468:	ldr	w2, [x8, x9, lsl #2]
    446c:	str	x10, [sp, #8]
    4470:	bl	3a0 <bsW>
    4474:	ldr	x8, [sp, #120]
    4478:	ldur	w11, [x29, #-28]
    447c:	add	w11, w11, #0x1
    4480:	mov	w0, w11
    4484:	sxtw	x9, w0
    4488:	ldr	x10, [sp, #8]
    448c:	mul	x9, x10, x9
    4490:	add	x8, x8, x9
    4494:	ldrh	w11, [x8]
    4498:	strh	w11, [sp, #54]
    449c:	ldur	x0, [x29, #-8]
    44a0:	ldr	x8, [sp, #40]
    44a4:	ldrh	w11, [sp, #54]
    44a8:	mov	w9, w11
    44ac:	ldrb	w1, [x8, x9]
    44b0:	ldr	x8, [sp, #32]
    44b4:	ldrh	w11, [sp, #54]
    44b8:	mov	w9, w11
    44bc:	ldr	w2, [x8, x9, lsl #2]
    44c0:	bl	3a0 <bsW>
    44c4:	ldr	x8, [sp, #120]
    44c8:	ldur	w11, [x29, #-28]
    44cc:	add	w11, w11, #0x2
    44d0:	mov	w0, w11
    44d4:	sxtw	x9, w0
    44d8:	ldr	x10, [sp, #8]
    44dc:	mul	x9, x10, x9
    44e0:	add	x8, x8, x9
    44e4:	ldrh	w11, [x8]
    44e8:	strh	w11, [sp, #54]
    44ec:	ldur	x0, [x29, #-8]
    44f0:	ldr	x8, [sp, #40]
    44f4:	ldrh	w11, [sp, #54]
    44f8:	mov	w9, w11
    44fc:	ldrb	w1, [x8, x9]
    4500:	ldr	x8, [sp, #32]
    4504:	ldrh	w11, [sp, #54]
    4508:	mov	w9, w11
    450c:	ldr	w2, [x8, x9, lsl #2]
    4510:	bl	3a0 <bsW>
    4514:	ldr	x8, [sp, #120]
    4518:	ldur	w11, [x29, #-28]
    451c:	add	w11, w11, #0x3
    4520:	mov	w0, w11
    4524:	sxtw	x9, w0
    4528:	ldr	x10, [sp, #8]
    452c:	mul	x9, x10, x9
    4530:	add	x8, x8, x9
    4534:	ldrh	w11, [x8]
    4538:	strh	w11, [sp, #54]
    453c:	ldur	x0, [x29, #-8]
    4540:	ldr	x8, [sp, #40]
    4544:	ldrh	w11, [sp, #54]
    4548:	mov	w9, w11
    454c:	ldrb	w1, [x8, x9]
    4550:	ldr	x8, [sp, #32]
    4554:	ldrh	w11, [sp, #54]
    4558:	mov	w9, w11
    455c:	ldr	w2, [x8, x9, lsl #2]
    4560:	bl	3a0 <bsW>
    4564:	ldr	x8, [sp, #120]
    4568:	ldur	w11, [x29, #-28]
    456c:	add	w11, w11, #0x4
    4570:	mov	w0, w11
    4574:	sxtw	x9, w0
    4578:	ldr	x10, [sp, #8]
    457c:	mul	x9, x10, x9
    4580:	add	x8, x8, x9
    4584:	ldrh	w11, [x8]
    4588:	strh	w11, [sp, #54]
    458c:	ldur	x0, [x29, #-8]
    4590:	ldr	x8, [sp, #40]
    4594:	ldrh	w11, [sp, #54]
    4598:	mov	w9, w11
    459c:	ldrb	w1, [x8, x9]
    45a0:	ldr	x8, [sp, #32]
    45a4:	ldrh	w11, [sp, #54]
    45a8:	mov	w9, w11
    45ac:	ldr	w2, [x8, x9, lsl #2]
    45b0:	bl	3a0 <bsW>
    45b4:	ldr	x8, [sp, #120]
    45b8:	ldur	w11, [x29, #-28]
    45bc:	add	w11, w11, #0x5
    45c0:	mov	w0, w11
    45c4:	sxtw	x9, w0
    45c8:	ldr	x10, [sp, #8]
    45cc:	mul	x9, x10, x9
    45d0:	add	x8, x8, x9
    45d4:	ldrh	w11, [x8]
    45d8:	strh	w11, [sp, #54]
    45dc:	ldur	x0, [x29, #-8]
    45e0:	ldr	x8, [sp, #40]
    45e4:	ldrh	w11, [sp, #54]
    45e8:	mov	w9, w11
    45ec:	ldrb	w1, [x8, x9]
    45f0:	ldr	x8, [sp, #32]
    45f4:	ldrh	w11, [sp, #54]
    45f8:	mov	w9, w11
    45fc:	ldr	w2, [x8, x9, lsl #2]
    4600:	bl	3a0 <bsW>
    4604:	ldr	x8, [sp, #120]
    4608:	ldur	w11, [x29, #-28]
    460c:	add	w11, w11, #0x6
    4610:	mov	w0, w11
    4614:	sxtw	x9, w0
    4618:	ldr	x10, [sp, #8]
    461c:	mul	x9, x10, x9
    4620:	add	x8, x8, x9
    4624:	ldrh	w11, [x8]
    4628:	strh	w11, [sp, #54]
    462c:	ldur	x0, [x29, #-8]
    4630:	ldr	x8, [sp, #40]
    4634:	ldrh	w11, [sp, #54]
    4638:	mov	w9, w11
    463c:	ldrb	w1, [x8, x9]
    4640:	ldr	x8, [sp, #32]
    4644:	ldrh	w11, [sp, #54]
    4648:	mov	w9, w11
    464c:	ldr	w2, [x8, x9, lsl #2]
    4650:	bl	3a0 <bsW>
    4654:	ldr	x8, [sp, #120]
    4658:	ldur	w11, [x29, #-28]
    465c:	add	w11, w11, #0x7
    4660:	mov	w0, w11
    4664:	sxtw	x9, w0
    4668:	ldr	x10, [sp, #8]
    466c:	mul	x9, x10, x9
    4670:	add	x8, x8, x9
    4674:	ldrh	w11, [x8]
    4678:	strh	w11, [sp, #54]
    467c:	ldur	x0, [x29, #-8]
    4680:	ldr	x8, [sp, #40]
    4684:	ldrh	w11, [sp, #54]
    4688:	mov	w9, w11
    468c:	ldrb	w1, [x8, x9]
    4690:	ldr	x8, [sp, #32]
    4694:	ldrh	w11, [sp, #54]
    4698:	mov	w9, w11
    469c:	ldr	w2, [x8, x9, lsl #2]
    46a0:	bl	3a0 <bsW>
    46a4:	ldr	x8, [sp, #120]
    46a8:	ldur	w11, [x29, #-28]
    46ac:	add	w11, w11, #0x8
    46b0:	mov	w0, w11
    46b4:	sxtw	x9, w0
    46b8:	ldr	x10, [sp, #8]
    46bc:	mul	x9, x10, x9
    46c0:	add	x8, x8, x9
    46c4:	ldrh	w11, [x8]
    46c8:	strh	w11, [sp, #54]
    46cc:	ldur	x0, [x29, #-8]
    46d0:	ldr	x8, [sp, #40]
    46d4:	ldrh	w11, [sp, #54]
    46d8:	mov	w9, w11
    46dc:	ldrb	w1, [x8, x9]
    46e0:	ldr	x8, [sp, #32]
    46e4:	ldrh	w11, [sp, #54]
    46e8:	mov	w9, w11
    46ec:	ldr	w2, [x8, x9, lsl #2]
    46f0:	bl	3a0 <bsW>
    46f4:	ldr	x8, [sp, #120]
    46f8:	ldur	w11, [x29, #-28]
    46fc:	add	w11, w11, #0x9
    4700:	mov	w0, w11
    4704:	sxtw	x9, w0
    4708:	ldr	x10, [sp, #8]
    470c:	mul	x9, x10, x9
    4710:	add	x8, x8, x9
    4714:	ldrh	w11, [x8]
    4718:	strh	w11, [sp, #54]
    471c:	ldur	x0, [x29, #-8]
    4720:	ldr	x8, [sp, #40]
    4724:	ldrh	w11, [sp, #54]
    4728:	mov	w9, w11
    472c:	ldrb	w1, [x8, x9]
    4730:	ldr	x8, [sp, #32]
    4734:	ldrh	w11, [sp, #54]
    4738:	mov	w9, w11
    473c:	ldr	w2, [x8, x9, lsl #2]
    4740:	bl	3a0 <bsW>
    4744:	ldr	x8, [sp, #120]
    4748:	ldur	w11, [x29, #-28]
    474c:	add	w11, w11, #0xa
    4750:	mov	w0, w11
    4754:	sxtw	x9, w0
    4758:	ldr	x10, [sp, #8]
    475c:	mul	x9, x10, x9
    4760:	add	x8, x8, x9
    4764:	ldrh	w11, [x8]
    4768:	strh	w11, [sp, #54]
    476c:	ldur	x0, [x29, #-8]
    4770:	ldr	x8, [sp, #40]
    4774:	ldrh	w11, [sp, #54]
    4778:	mov	w9, w11
    477c:	ldrb	w1, [x8, x9]
    4780:	ldr	x8, [sp, #32]
    4784:	ldrh	w11, [sp, #54]
    4788:	mov	w9, w11
    478c:	ldr	w2, [x8, x9, lsl #2]
    4790:	bl	3a0 <bsW>
    4794:	ldr	x8, [sp, #120]
    4798:	ldur	w11, [x29, #-28]
    479c:	add	w11, w11, #0xb
    47a0:	mov	w0, w11
    47a4:	sxtw	x9, w0
    47a8:	ldr	x10, [sp, #8]
    47ac:	mul	x9, x10, x9
    47b0:	add	x8, x8, x9
    47b4:	ldrh	w11, [x8]
    47b8:	strh	w11, [sp, #54]
    47bc:	ldur	x0, [x29, #-8]
    47c0:	ldr	x8, [sp, #40]
    47c4:	ldrh	w11, [sp, #54]
    47c8:	mov	w9, w11
    47cc:	ldrb	w1, [x8, x9]
    47d0:	ldr	x8, [sp, #32]
    47d4:	ldrh	w11, [sp, #54]
    47d8:	mov	w9, w11
    47dc:	ldr	w2, [x8, x9, lsl #2]
    47e0:	bl	3a0 <bsW>
    47e4:	ldr	x8, [sp, #120]
    47e8:	ldur	w11, [x29, #-28]
    47ec:	add	w11, w11, #0xc
    47f0:	mov	w0, w11
    47f4:	sxtw	x9, w0
    47f8:	ldr	x10, [sp, #8]
    47fc:	mul	x9, x10, x9
    4800:	add	x8, x8, x9
    4804:	ldrh	w11, [x8]
    4808:	strh	w11, [sp, #54]
    480c:	ldur	x0, [x29, #-8]
    4810:	ldr	x8, [sp, #40]
    4814:	ldrh	w11, [sp, #54]
    4818:	mov	w9, w11
    481c:	ldrb	w1, [x8, x9]
    4820:	ldr	x8, [sp, #32]
    4824:	ldrh	w11, [sp, #54]
    4828:	mov	w9, w11
    482c:	ldr	w2, [x8, x9, lsl #2]
    4830:	bl	3a0 <bsW>
    4834:	ldr	x8, [sp, #120]
    4838:	ldur	w11, [x29, #-28]
    483c:	add	w11, w11, #0xd
    4840:	mov	w0, w11
    4844:	sxtw	x9, w0
    4848:	ldr	x10, [sp, #8]
    484c:	mul	x9, x10, x9
    4850:	add	x8, x8, x9
    4854:	ldrh	w11, [x8]
    4858:	strh	w11, [sp, #54]
    485c:	ldur	x0, [x29, #-8]
    4860:	ldr	x8, [sp, #40]
    4864:	ldrh	w11, [sp, #54]
    4868:	mov	w9, w11
    486c:	ldrb	w1, [x8, x9]
    4870:	ldr	x8, [sp, #32]
    4874:	ldrh	w11, [sp, #54]
    4878:	mov	w9, w11
    487c:	ldr	w2, [x8, x9, lsl #2]
    4880:	bl	3a0 <bsW>
    4884:	ldr	x8, [sp, #120]
    4888:	ldur	w11, [x29, #-28]
    488c:	add	w11, w11, #0xe
    4890:	mov	w0, w11
    4894:	sxtw	x9, w0
    4898:	ldr	x10, [sp, #8]
    489c:	mul	x9, x10, x9
    48a0:	add	x8, x8, x9
    48a4:	ldrh	w11, [x8]
    48a8:	strh	w11, [sp, #54]
    48ac:	ldur	x0, [x29, #-8]
    48b0:	ldr	x8, [sp, #40]
    48b4:	ldrh	w11, [sp, #54]
    48b8:	mov	w9, w11
    48bc:	ldrb	w1, [x8, x9]
    48c0:	ldr	x8, [sp, #32]
    48c4:	ldrh	w11, [sp, #54]
    48c8:	mov	w9, w11
    48cc:	ldr	w2, [x8, x9, lsl #2]
    48d0:	bl	3a0 <bsW>
    48d4:	ldr	x8, [sp, #120]
    48d8:	ldur	w11, [x29, #-28]
    48dc:	add	w11, w11, #0xf
    48e0:	mov	w0, w11
    48e4:	sxtw	x9, w0
    48e8:	ldr	x10, [sp, #8]
    48ec:	mul	x9, x10, x9
    48f0:	add	x8, x8, x9
    48f4:	ldrh	w11, [x8]
    48f8:	strh	w11, [sp, #54]
    48fc:	ldur	x0, [x29, #-8]
    4900:	ldr	x8, [sp, #40]
    4904:	ldrh	w11, [sp, #54]
    4908:	mov	w9, w11
    490c:	ldrb	w1, [x8, x9]
    4910:	ldr	x8, [sp, #32]
    4914:	ldrh	w11, [sp, #54]
    4918:	mov	w9, w11
    491c:	ldr	w2, [x8, x9, lsl #2]
    4920:	bl	3a0 <bsW>
    4924:	ldr	x8, [sp, #120]
    4928:	ldur	w11, [x29, #-28]
    492c:	add	w11, w11, #0x10
    4930:	mov	w0, w11
    4934:	sxtw	x9, w0
    4938:	ldr	x10, [sp, #8]
    493c:	mul	x9, x10, x9
    4940:	add	x8, x8, x9
    4944:	ldrh	w11, [x8]
    4948:	strh	w11, [sp, #54]
    494c:	ldur	x0, [x29, #-8]
    4950:	ldr	x8, [sp, #40]
    4954:	ldrh	w11, [sp, #54]
    4958:	mov	w9, w11
    495c:	ldrb	w1, [x8, x9]
    4960:	ldr	x8, [sp, #32]
    4964:	ldrh	w11, [sp, #54]
    4968:	mov	w9, w11
    496c:	ldr	w2, [x8, x9, lsl #2]
    4970:	bl	3a0 <bsW>
    4974:	ldr	x8, [sp, #120]
    4978:	ldur	w11, [x29, #-28]
    497c:	add	w11, w11, #0x11
    4980:	mov	w0, w11
    4984:	sxtw	x9, w0
    4988:	ldr	x10, [sp, #8]
    498c:	mul	x9, x10, x9
    4990:	add	x8, x8, x9
    4994:	ldrh	w11, [x8]
    4998:	strh	w11, [sp, #54]
    499c:	ldur	x0, [x29, #-8]
    49a0:	ldr	x8, [sp, #40]
    49a4:	ldrh	w11, [sp, #54]
    49a8:	mov	w9, w11
    49ac:	ldrb	w1, [x8, x9]
    49b0:	ldr	x8, [sp, #32]
    49b4:	ldrh	w11, [sp, #54]
    49b8:	mov	w9, w11
    49bc:	ldr	w2, [x8, x9, lsl #2]
    49c0:	bl	3a0 <bsW>
    49c4:	ldr	x8, [sp, #120]
    49c8:	ldur	w11, [x29, #-28]
    49cc:	add	w11, w11, #0x12
    49d0:	mov	w0, w11
    49d4:	sxtw	x9, w0
    49d8:	ldr	x10, [sp, #8]
    49dc:	mul	x9, x10, x9
    49e0:	add	x8, x8, x9
    49e4:	ldrh	w11, [x8]
    49e8:	strh	w11, [sp, #54]
    49ec:	ldur	x0, [x29, #-8]
    49f0:	ldr	x8, [sp, #40]
    49f4:	ldrh	w11, [sp, #54]
    49f8:	mov	w9, w11
    49fc:	ldrb	w1, [x8, x9]
    4a00:	ldr	x8, [sp, #32]
    4a04:	ldrh	w11, [sp, #54]
    4a08:	mov	w9, w11
    4a0c:	ldr	w2, [x8, x9, lsl #2]
    4a10:	bl	3a0 <bsW>
    4a14:	ldr	x8, [sp, #120]
    4a18:	ldur	w11, [x29, #-28]
    4a1c:	add	w11, w11, #0x13
    4a20:	mov	w0, w11
    4a24:	sxtw	x9, w0
    4a28:	ldr	x10, [sp, #8]
    4a2c:	mul	x9, x10, x9
    4a30:	add	x8, x8, x9
    4a34:	ldrh	w11, [x8]
    4a38:	strh	w11, [sp, #54]
    4a3c:	ldur	x0, [x29, #-8]
    4a40:	ldr	x8, [sp, #40]
    4a44:	ldrh	w11, [sp, #54]
    4a48:	mov	w9, w11
    4a4c:	ldrb	w1, [x8, x9]
    4a50:	ldr	x8, [sp, #32]
    4a54:	ldrh	w11, [sp, #54]
    4a58:	mov	w9, w11
    4a5c:	ldr	w2, [x8, x9, lsl #2]
    4a60:	bl	3a0 <bsW>
    4a64:	ldr	x8, [sp, #120]
    4a68:	ldur	w11, [x29, #-28]
    4a6c:	add	w11, w11, #0x14
    4a70:	mov	w0, w11
    4a74:	sxtw	x9, w0
    4a78:	ldr	x10, [sp, #8]
    4a7c:	mul	x9, x10, x9
    4a80:	add	x8, x8, x9
    4a84:	ldrh	w11, [x8]
    4a88:	strh	w11, [sp, #54]
    4a8c:	ldur	x0, [x29, #-8]
    4a90:	ldr	x8, [sp, #40]
    4a94:	ldrh	w11, [sp, #54]
    4a98:	mov	w9, w11
    4a9c:	ldrb	w1, [x8, x9]
    4aa0:	ldr	x8, [sp, #32]
    4aa4:	ldrh	w11, [sp, #54]
    4aa8:	mov	w9, w11
    4aac:	ldr	w2, [x8, x9, lsl #2]
    4ab0:	bl	3a0 <bsW>
    4ab4:	ldr	x8, [sp, #120]
    4ab8:	ldur	w11, [x29, #-28]
    4abc:	add	w11, w11, #0x15
    4ac0:	mov	w0, w11
    4ac4:	sxtw	x9, w0
    4ac8:	ldr	x10, [sp, #8]
    4acc:	mul	x9, x10, x9
    4ad0:	add	x8, x8, x9
    4ad4:	ldrh	w11, [x8]
    4ad8:	strh	w11, [sp, #54]
    4adc:	ldur	x0, [x29, #-8]
    4ae0:	ldr	x8, [sp, #40]
    4ae4:	ldrh	w11, [sp, #54]
    4ae8:	mov	w9, w11
    4aec:	ldrb	w1, [x8, x9]
    4af0:	ldr	x8, [sp, #32]
    4af4:	ldrh	w11, [sp, #54]
    4af8:	mov	w9, w11
    4afc:	ldr	w2, [x8, x9, lsl #2]
    4b00:	bl	3a0 <bsW>
    4b04:	ldr	x8, [sp, #120]
    4b08:	ldur	w11, [x29, #-28]
    4b0c:	add	w11, w11, #0x16
    4b10:	mov	w0, w11
    4b14:	sxtw	x9, w0
    4b18:	ldr	x10, [sp, #8]
    4b1c:	mul	x9, x10, x9
    4b20:	add	x8, x8, x9
    4b24:	ldrh	w11, [x8]
    4b28:	strh	w11, [sp, #54]
    4b2c:	ldur	x0, [x29, #-8]
    4b30:	ldr	x8, [sp, #40]
    4b34:	ldrh	w11, [sp, #54]
    4b38:	mov	w9, w11
    4b3c:	ldrb	w1, [x8, x9]
    4b40:	ldr	x8, [sp, #32]
    4b44:	ldrh	w11, [sp, #54]
    4b48:	mov	w9, w11
    4b4c:	ldr	w2, [x8, x9, lsl #2]
    4b50:	bl	3a0 <bsW>
    4b54:	ldr	x8, [sp, #120]
    4b58:	ldur	w11, [x29, #-28]
    4b5c:	add	w11, w11, #0x17
    4b60:	mov	w0, w11
    4b64:	sxtw	x9, w0
    4b68:	ldr	x10, [sp, #8]
    4b6c:	mul	x9, x10, x9
    4b70:	add	x8, x8, x9
    4b74:	ldrh	w11, [x8]
    4b78:	strh	w11, [sp, #54]
    4b7c:	ldur	x0, [x29, #-8]
    4b80:	ldr	x8, [sp, #40]
    4b84:	ldrh	w11, [sp, #54]
    4b88:	mov	w9, w11
    4b8c:	ldrb	w1, [x8, x9]
    4b90:	ldr	x8, [sp, #32]
    4b94:	ldrh	w11, [sp, #54]
    4b98:	mov	w9, w11
    4b9c:	ldr	w2, [x8, x9, lsl #2]
    4ba0:	bl	3a0 <bsW>
    4ba4:	ldr	x8, [sp, #120]
    4ba8:	ldur	w11, [x29, #-28]
    4bac:	add	w11, w11, #0x18
    4bb0:	mov	w0, w11
    4bb4:	sxtw	x9, w0
    4bb8:	ldr	x10, [sp, #8]
    4bbc:	mul	x9, x10, x9
    4bc0:	add	x8, x8, x9
    4bc4:	ldrh	w11, [x8]
    4bc8:	strh	w11, [sp, #54]
    4bcc:	ldur	x0, [x29, #-8]
    4bd0:	ldr	x8, [sp, #40]
    4bd4:	ldrh	w11, [sp, #54]
    4bd8:	mov	w9, w11
    4bdc:	ldrb	w1, [x8, x9]
    4be0:	ldr	x8, [sp, #32]
    4be4:	ldrh	w11, [sp, #54]
    4be8:	mov	w9, w11
    4bec:	ldr	w2, [x8, x9, lsl #2]
    4bf0:	bl	3a0 <bsW>
    4bf4:	ldr	x8, [sp, #120]
    4bf8:	ldur	w11, [x29, #-28]
    4bfc:	add	w11, w11, #0x19
    4c00:	mov	w0, w11
    4c04:	sxtw	x9, w0
    4c08:	ldr	x10, [sp, #8]
    4c0c:	mul	x9, x10, x9
    4c10:	add	x8, x8, x9
    4c14:	ldrh	w11, [x8]
    4c18:	strh	w11, [sp, #54]
    4c1c:	ldur	x0, [x29, #-8]
    4c20:	ldr	x8, [sp, #40]
    4c24:	ldrh	w11, [sp, #54]
    4c28:	mov	w9, w11
    4c2c:	ldrb	w1, [x8, x9]
    4c30:	ldr	x8, [sp, #32]
    4c34:	ldrh	w11, [sp, #54]
    4c38:	mov	w9, w11
    4c3c:	ldr	w2, [x8, x9, lsl #2]
    4c40:	bl	3a0 <bsW>
    4c44:	ldr	x8, [sp, #120]
    4c48:	ldur	w11, [x29, #-28]
    4c4c:	add	w11, w11, #0x1a
    4c50:	mov	w0, w11
    4c54:	sxtw	x9, w0
    4c58:	ldr	x10, [sp, #8]
    4c5c:	mul	x9, x10, x9
    4c60:	add	x8, x8, x9
    4c64:	ldrh	w11, [x8]
    4c68:	strh	w11, [sp, #54]
    4c6c:	ldur	x0, [x29, #-8]
    4c70:	ldr	x8, [sp, #40]
    4c74:	ldrh	w11, [sp, #54]
    4c78:	mov	w9, w11
    4c7c:	ldrb	w1, [x8, x9]
    4c80:	ldr	x8, [sp, #32]
    4c84:	ldrh	w11, [sp, #54]
    4c88:	mov	w9, w11
    4c8c:	ldr	w2, [x8, x9, lsl #2]
    4c90:	bl	3a0 <bsW>
    4c94:	ldr	x8, [sp, #120]
    4c98:	ldur	w11, [x29, #-28]
    4c9c:	add	w11, w11, #0x1b
    4ca0:	mov	w0, w11
    4ca4:	sxtw	x9, w0
    4ca8:	ldr	x10, [sp, #8]
    4cac:	mul	x9, x10, x9
    4cb0:	add	x8, x8, x9
    4cb4:	ldrh	w11, [x8]
    4cb8:	strh	w11, [sp, #54]
    4cbc:	ldur	x0, [x29, #-8]
    4cc0:	ldr	x8, [sp, #40]
    4cc4:	ldrh	w11, [sp, #54]
    4cc8:	mov	w9, w11
    4ccc:	ldrb	w1, [x8, x9]
    4cd0:	ldr	x8, [sp, #32]
    4cd4:	ldrh	w11, [sp, #54]
    4cd8:	mov	w9, w11
    4cdc:	ldr	w2, [x8, x9, lsl #2]
    4ce0:	bl	3a0 <bsW>
    4ce4:	ldr	x8, [sp, #120]
    4ce8:	ldur	w11, [x29, #-28]
    4cec:	add	w11, w11, #0x1c
    4cf0:	mov	w0, w11
    4cf4:	sxtw	x9, w0
    4cf8:	ldr	x10, [sp, #8]
    4cfc:	mul	x9, x10, x9
    4d00:	add	x8, x8, x9
    4d04:	ldrh	w11, [x8]
    4d08:	strh	w11, [sp, #54]
    4d0c:	ldur	x0, [x29, #-8]
    4d10:	ldr	x8, [sp, #40]
    4d14:	ldrh	w11, [sp, #54]
    4d18:	mov	w9, w11
    4d1c:	ldrb	w1, [x8, x9]
    4d20:	ldr	x8, [sp, #32]
    4d24:	ldrh	w11, [sp, #54]
    4d28:	mov	w9, w11
    4d2c:	ldr	w2, [x8, x9, lsl #2]
    4d30:	bl	3a0 <bsW>
    4d34:	ldr	x8, [sp, #120]
    4d38:	ldur	w11, [x29, #-28]
    4d3c:	add	w11, w11, #0x1d
    4d40:	mov	w0, w11
    4d44:	sxtw	x9, w0
    4d48:	ldr	x10, [sp, #8]
    4d4c:	mul	x9, x10, x9
    4d50:	add	x8, x8, x9
    4d54:	ldrh	w11, [x8]
    4d58:	strh	w11, [sp, #54]
    4d5c:	ldur	x0, [x29, #-8]
    4d60:	ldr	x8, [sp, #40]
    4d64:	ldrh	w11, [sp, #54]
    4d68:	mov	w9, w11
    4d6c:	ldrb	w1, [x8, x9]
    4d70:	ldr	x8, [sp, #32]
    4d74:	ldrh	w11, [sp, #54]
    4d78:	mov	w9, w11
    4d7c:	ldr	w2, [x8, x9, lsl #2]
    4d80:	bl	3a0 <bsW>
    4d84:	ldr	x8, [sp, #120]
    4d88:	ldur	w11, [x29, #-28]
    4d8c:	add	w11, w11, #0x1e
    4d90:	mov	w0, w11
    4d94:	sxtw	x9, w0
    4d98:	ldr	x10, [sp, #8]
    4d9c:	mul	x9, x10, x9
    4da0:	add	x8, x8, x9
    4da4:	ldrh	w11, [x8]
    4da8:	strh	w11, [sp, #54]
    4dac:	ldur	x0, [x29, #-8]
    4db0:	ldr	x8, [sp, #40]
    4db4:	ldrh	w11, [sp, #54]
    4db8:	mov	w9, w11
    4dbc:	ldrb	w1, [x8, x9]
    4dc0:	ldr	x8, [sp, #32]
    4dc4:	ldrh	w11, [sp, #54]
    4dc8:	mov	w9, w11
    4dcc:	ldr	w2, [x8, x9, lsl #2]
    4dd0:	bl	3a0 <bsW>
    4dd4:	ldr	x8, [sp, #120]
    4dd8:	ldur	w11, [x29, #-28]
    4ddc:	add	w11, w11, #0x1f
    4de0:	mov	w0, w11
    4de4:	sxtw	x9, w0
    4de8:	ldr	x10, [sp, #8]
    4dec:	mul	x9, x10, x9
    4df0:	add	x8, x8, x9
    4df4:	ldrh	w11, [x8]
    4df8:	strh	w11, [sp, #54]
    4dfc:	ldur	x0, [x29, #-8]
    4e00:	ldr	x8, [sp, #40]
    4e04:	ldrh	w11, [sp, #54]
    4e08:	mov	w9, w11
    4e0c:	ldrb	w1, [x8, x9]
    4e10:	ldr	x8, [sp, #32]
    4e14:	ldrh	w11, [sp, #54]
    4e18:	mov	w9, w11
    4e1c:	ldr	w2, [x8, x9, lsl #2]
    4e20:	bl	3a0 <bsW>
    4e24:	ldr	x8, [sp, #120]
    4e28:	ldur	w11, [x29, #-28]
    4e2c:	add	w11, w11, #0x20
    4e30:	mov	w0, w11
    4e34:	sxtw	x9, w0
    4e38:	ldr	x10, [sp, #8]
    4e3c:	mul	x9, x10, x9
    4e40:	add	x8, x8, x9
    4e44:	ldrh	w11, [x8]
    4e48:	strh	w11, [sp, #54]
    4e4c:	ldur	x0, [x29, #-8]
    4e50:	ldr	x8, [sp, #40]
    4e54:	ldrh	w11, [sp, #54]
    4e58:	mov	w9, w11
    4e5c:	ldrb	w1, [x8, x9]
    4e60:	ldr	x8, [sp, #32]
    4e64:	ldrh	w11, [sp, #54]
    4e68:	mov	w9, w11
    4e6c:	ldr	w2, [x8, x9, lsl #2]
    4e70:	bl	3a0 <bsW>
    4e74:	ldr	x8, [sp, #120]
    4e78:	ldur	w11, [x29, #-28]
    4e7c:	add	w11, w11, #0x21
    4e80:	mov	w0, w11
    4e84:	sxtw	x9, w0
    4e88:	ldr	x10, [sp, #8]
    4e8c:	mul	x9, x10, x9
    4e90:	add	x8, x8, x9
    4e94:	ldrh	w11, [x8]
    4e98:	strh	w11, [sp, #54]
    4e9c:	ldur	x0, [x29, #-8]
    4ea0:	ldr	x8, [sp, #40]
    4ea4:	ldrh	w11, [sp, #54]
    4ea8:	mov	w9, w11
    4eac:	ldrb	w1, [x8, x9]
    4eb0:	ldr	x8, [sp, #32]
    4eb4:	ldrh	w11, [sp, #54]
    4eb8:	mov	w9, w11
    4ebc:	ldr	w2, [x8, x9, lsl #2]
    4ec0:	bl	3a0 <bsW>
    4ec4:	ldr	x8, [sp, #120]
    4ec8:	ldur	w11, [x29, #-28]
    4ecc:	add	w11, w11, #0x22
    4ed0:	mov	w0, w11
    4ed4:	sxtw	x9, w0
    4ed8:	ldr	x10, [sp, #8]
    4edc:	mul	x9, x10, x9
    4ee0:	add	x8, x8, x9
    4ee4:	ldrh	w11, [x8]
    4ee8:	strh	w11, [sp, #54]
    4eec:	ldur	x0, [x29, #-8]
    4ef0:	ldr	x8, [sp, #40]
    4ef4:	ldrh	w11, [sp, #54]
    4ef8:	mov	w9, w11
    4efc:	ldrb	w1, [x8, x9]
    4f00:	ldr	x8, [sp, #32]
    4f04:	ldrh	w11, [sp, #54]
    4f08:	mov	w9, w11
    4f0c:	ldr	w2, [x8, x9, lsl #2]
    4f10:	bl	3a0 <bsW>
    4f14:	ldr	x8, [sp, #120]
    4f18:	ldur	w11, [x29, #-28]
    4f1c:	add	w11, w11, #0x23
    4f20:	mov	w0, w11
    4f24:	sxtw	x9, w0
    4f28:	ldr	x10, [sp, #8]
    4f2c:	mul	x9, x10, x9
    4f30:	add	x8, x8, x9
    4f34:	ldrh	w11, [x8]
    4f38:	strh	w11, [sp, #54]
    4f3c:	ldur	x0, [x29, #-8]
    4f40:	ldr	x8, [sp, #40]
    4f44:	ldrh	w11, [sp, #54]
    4f48:	mov	w9, w11
    4f4c:	ldrb	w1, [x8, x9]
    4f50:	ldr	x8, [sp, #32]
    4f54:	ldrh	w11, [sp, #54]
    4f58:	mov	w9, w11
    4f5c:	ldr	w2, [x8, x9, lsl #2]
    4f60:	bl	3a0 <bsW>
    4f64:	ldr	x8, [sp, #120]
    4f68:	ldur	w11, [x29, #-28]
    4f6c:	add	w11, w11, #0x24
    4f70:	mov	w0, w11
    4f74:	sxtw	x9, w0
    4f78:	ldr	x10, [sp, #8]
    4f7c:	mul	x9, x10, x9
    4f80:	add	x8, x8, x9
    4f84:	ldrh	w11, [x8]
    4f88:	strh	w11, [sp, #54]
    4f8c:	ldur	x0, [x29, #-8]
    4f90:	ldr	x8, [sp, #40]
    4f94:	ldrh	w11, [sp, #54]
    4f98:	mov	w9, w11
    4f9c:	ldrb	w1, [x8, x9]
    4fa0:	ldr	x8, [sp, #32]
    4fa4:	ldrh	w11, [sp, #54]
    4fa8:	mov	w9, w11
    4fac:	ldr	w2, [x8, x9, lsl #2]
    4fb0:	bl	3a0 <bsW>
    4fb4:	ldr	x8, [sp, #120]
    4fb8:	ldur	w11, [x29, #-28]
    4fbc:	add	w11, w11, #0x25
    4fc0:	mov	w0, w11
    4fc4:	sxtw	x9, w0
    4fc8:	ldr	x10, [sp, #8]
    4fcc:	mul	x9, x10, x9
    4fd0:	add	x8, x8, x9
    4fd4:	ldrh	w11, [x8]
    4fd8:	strh	w11, [sp, #54]
    4fdc:	ldur	x0, [x29, #-8]
    4fe0:	ldr	x8, [sp, #40]
    4fe4:	ldrh	w11, [sp, #54]
    4fe8:	mov	w9, w11
    4fec:	ldrb	w1, [x8, x9]
    4ff0:	ldr	x8, [sp, #32]
    4ff4:	ldrh	w11, [sp, #54]
    4ff8:	mov	w9, w11
    4ffc:	ldr	w2, [x8, x9, lsl #2]
    5000:	bl	3a0 <bsW>
    5004:	ldr	x8, [sp, #120]
    5008:	ldur	w11, [x29, #-28]
    500c:	add	w11, w11, #0x26
    5010:	mov	w0, w11
    5014:	sxtw	x9, w0
    5018:	ldr	x10, [sp, #8]
    501c:	mul	x9, x10, x9
    5020:	add	x8, x8, x9
    5024:	ldrh	w11, [x8]
    5028:	strh	w11, [sp, #54]
    502c:	ldur	x0, [x29, #-8]
    5030:	ldr	x8, [sp, #40]
    5034:	ldrh	w11, [sp, #54]
    5038:	mov	w9, w11
    503c:	ldrb	w1, [x8, x9]
    5040:	ldr	x8, [sp, #32]
    5044:	ldrh	w11, [sp, #54]
    5048:	mov	w9, w11
    504c:	ldr	w2, [x8, x9, lsl #2]
    5050:	bl	3a0 <bsW>
    5054:	ldr	x8, [sp, #120]
    5058:	ldur	w11, [x29, #-28]
    505c:	add	w11, w11, #0x27
    5060:	mov	w0, w11
    5064:	sxtw	x9, w0
    5068:	ldr	x10, [sp, #8]
    506c:	mul	x9, x10, x9
    5070:	add	x8, x8, x9
    5074:	ldrh	w11, [x8]
    5078:	strh	w11, [sp, #54]
    507c:	ldur	x0, [x29, #-8]
    5080:	ldr	x8, [sp, #40]
    5084:	ldrh	w11, [sp, #54]
    5088:	mov	w9, w11
    508c:	ldrb	w1, [x8, x9]
    5090:	ldr	x8, [sp, #32]
    5094:	ldrh	w11, [sp, #54]
    5098:	mov	w9, w11
    509c:	ldr	w2, [x8, x9, lsl #2]
    50a0:	bl	3a0 <bsW>
    50a4:	ldr	x8, [sp, #120]
    50a8:	ldur	w11, [x29, #-28]
    50ac:	add	w11, w11, #0x28
    50b0:	mov	w0, w11
    50b4:	sxtw	x9, w0
    50b8:	ldr	x10, [sp, #8]
    50bc:	mul	x9, x10, x9
    50c0:	add	x8, x8, x9
    50c4:	ldrh	w11, [x8]
    50c8:	strh	w11, [sp, #54]
    50cc:	ldur	x0, [x29, #-8]
    50d0:	ldr	x8, [sp, #40]
    50d4:	ldrh	w11, [sp, #54]
    50d8:	mov	w9, w11
    50dc:	ldrb	w1, [x8, x9]
    50e0:	ldr	x8, [sp, #32]
    50e4:	ldrh	w11, [sp, #54]
    50e8:	mov	w9, w11
    50ec:	ldr	w2, [x8, x9, lsl #2]
    50f0:	bl	3a0 <bsW>
    50f4:	ldr	x8, [sp, #120]
    50f8:	ldur	w11, [x29, #-28]
    50fc:	add	w11, w11, #0x29
    5100:	mov	w0, w11
    5104:	sxtw	x9, w0
    5108:	ldr	x10, [sp, #8]
    510c:	mul	x9, x10, x9
    5110:	add	x8, x8, x9
    5114:	ldrh	w11, [x8]
    5118:	strh	w11, [sp, #54]
    511c:	ldur	x0, [x29, #-8]
    5120:	ldr	x8, [sp, #40]
    5124:	ldrh	w11, [sp, #54]
    5128:	mov	w9, w11
    512c:	ldrb	w1, [x8, x9]
    5130:	ldr	x8, [sp, #32]
    5134:	ldrh	w11, [sp, #54]
    5138:	mov	w9, w11
    513c:	ldr	w2, [x8, x9, lsl #2]
    5140:	bl	3a0 <bsW>
    5144:	ldr	x8, [sp, #120]
    5148:	ldur	w11, [x29, #-28]
    514c:	add	w11, w11, #0x2a
    5150:	mov	w0, w11
    5154:	sxtw	x9, w0
    5158:	ldr	x10, [sp, #8]
    515c:	mul	x9, x10, x9
    5160:	add	x8, x8, x9
    5164:	ldrh	w11, [x8]
    5168:	strh	w11, [sp, #54]
    516c:	ldur	x0, [x29, #-8]
    5170:	ldr	x8, [sp, #40]
    5174:	ldrh	w11, [sp, #54]
    5178:	mov	w9, w11
    517c:	ldrb	w1, [x8, x9]
    5180:	ldr	x8, [sp, #32]
    5184:	ldrh	w11, [sp, #54]
    5188:	mov	w9, w11
    518c:	ldr	w2, [x8, x9, lsl #2]
    5190:	bl	3a0 <bsW>
    5194:	ldr	x8, [sp, #120]
    5198:	ldur	w11, [x29, #-28]
    519c:	add	w11, w11, #0x2b
    51a0:	mov	w0, w11
    51a4:	sxtw	x9, w0
    51a8:	ldr	x10, [sp, #8]
    51ac:	mul	x9, x10, x9
    51b0:	add	x8, x8, x9
    51b4:	ldrh	w11, [x8]
    51b8:	strh	w11, [sp, #54]
    51bc:	ldur	x0, [x29, #-8]
    51c0:	ldr	x8, [sp, #40]
    51c4:	ldrh	w11, [sp, #54]
    51c8:	mov	w9, w11
    51cc:	ldrb	w1, [x8, x9]
    51d0:	ldr	x8, [sp, #32]
    51d4:	ldrh	w11, [sp, #54]
    51d8:	mov	w9, w11
    51dc:	ldr	w2, [x8, x9, lsl #2]
    51e0:	bl	3a0 <bsW>
    51e4:	ldr	x8, [sp, #120]
    51e8:	ldur	w11, [x29, #-28]
    51ec:	add	w11, w11, #0x2c
    51f0:	mov	w0, w11
    51f4:	sxtw	x9, w0
    51f8:	ldr	x10, [sp, #8]
    51fc:	mul	x9, x10, x9
    5200:	add	x8, x8, x9
    5204:	ldrh	w11, [x8]
    5208:	strh	w11, [sp, #54]
    520c:	ldur	x0, [x29, #-8]
    5210:	ldr	x8, [sp, #40]
    5214:	ldrh	w11, [sp, #54]
    5218:	mov	w9, w11
    521c:	ldrb	w1, [x8, x9]
    5220:	ldr	x8, [sp, #32]
    5224:	ldrh	w11, [sp, #54]
    5228:	mov	w9, w11
    522c:	ldr	w2, [x8, x9, lsl #2]
    5230:	bl	3a0 <bsW>
    5234:	ldr	x8, [sp, #120]
    5238:	ldur	w11, [x29, #-28]
    523c:	add	w11, w11, #0x2d
    5240:	mov	w0, w11
    5244:	sxtw	x9, w0
    5248:	ldr	x10, [sp, #8]
    524c:	mul	x9, x10, x9
    5250:	add	x8, x8, x9
    5254:	ldrh	w11, [x8]
    5258:	strh	w11, [sp, #54]
    525c:	ldur	x0, [x29, #-8]
    5260:	ldr	x8, [sp, #40]
    5264:	ldrh	w11, [sp, #54]
    5268:	mov	w9, w11
    526c:	ldrb	w1, [x8, x9]
    5270:	ldr	x8, [sp, #32]
    5274:	ldrh	w11, [sp, #54]
    5278:	mov	w9, w11
    527c:	ldr	w2, [x8, x9, lsl #2]
    5280:	bl	3a0 <bsW>
    5284:	ldr	x8, [sp, #120]
    5288:	ldur	w11, [x29, #-28]
    528c:	add	w11, w11, #0x2e
    5290:	mov	w0, w11
    5294:	sxtw	x9, w0
    5298:	ldr	x10, [sp, #8]
    529c:	mul	x9, x10, x9
    52a0:	add	x8, x8, x9
    52a4:	ldrh	w11, [x8]
    52a8:	strh	w11, [sp, #54]
    52ac:	ldur	x0, [x29, #-8]
    52b0:	ldr	x8, [sp, #40]
    52b4:	ldrh	w11, [sp, #54]
    52b8:	mov	w9, w11
    52bc:	ldrb	w1, [x8, x9]
    52c0:	ldr	x8, [sp, #32]
    52c4:	ldrh	w11, [sp, #54]
    52c8:	mov	w9, w11
    52cc:	ldr	w2, [x8, x9, lsl #2]
    52d0:	bl	3a0 <bsW>
    52d4:	ldr	x8, [sp, #120]
    52d8:	ldur	w11, [x29, #-28]
    52dc:	add	w11, w11, #0x2f
    52e0:	mov	w0, w11
    52e4:	sxtw	x9, w0
    52e8:	ldr	x10, [sp, #8]
    52ec:	mul	x9, x10, x9
    52f0:	add	x8, x8, x9
    52f4:	ldrh	w11, [x8]
    52f8:	strh	w11, [sp, #54]
    52fc:	ldur	x0, [x29, #-8]
    5300:	ldr	x8, [sp, #40]
    5304:	ldrh	w11, [sp, #54]
    5308:	mov	w9, w11
    530c:	ldrb	w1, [x8, x9]
    5310:	ldr	x8, [sp, #32]
    5314:	ldrh	w11, [sp, #54]
    5318:	mov	w9, w11
    531c:	ldr	w2, [x8, x9, lsl #2]
    5320:	bl	3a0 <bsW>
    5324:	ldr	x8, [sp, #120]
    5328:	ldur	w11, [x29, #-28]
    532c:	add	w11, w11, #0x30
    5330:	mov	w0, w11
    5334:	sxtw	x9, w0
    5338:	ldr	x10, [sp, #8]
    533c:	mul	x9, x10, x9
    5340:	add	x8, x8, x9
    5344:	ldrh	w11, [x8]
    5348:	strh	w11, [sp, #54]
    534c:	ldur	x0, [x29, #-8]
    5350:	ldr	x8, [sp, #40]
    5354:	ldrh	w11, [sp, #54]
    5358:	mov	w9, w11
    535c:	ldrb	w1, [x8, x9]
    5360:	ldr	x8, [sp, #32]
    5364:	ldrh	w11, [sp, #54]
    5368:	mov	w9, w11
    536c:	ldr	w2, [x8, x9, lsl #2]
    5370:	bl	3a0 <bsW>
    5374:	ldr	x8, [sp, #120]
    5378:	ldur	w11, [x29, #-28]
    537c:	add	w11, w11, #0x31
    5380:	mov	w0, w11
    5384:	sxtw	x9, w0
    5388:	ldr	x10, [sp, #8]
    538c:	mul	x9, x10, x9
    5390:	add	x8, x8, x9
    5394:	ldrh	w11, [x8]
    5398:	strh	w11, [sp, #54]
    539c:	ldur	x0, [x29, #-8]
    53a0:	ldr	x8, [sp, #40]
    53a4:	ldrh	w11, [sp, #54]
    53a8:	mov	w9, w11
    53ac:	ldrb	w1, [x8, x9]
    53b0:	ldr	x8, [sp, #32]
    53b4:	ldrh	w11, [sp, #54]
    53b8:	mov	w9, w11
    53bc:	ldr	w2, [x8, x9, lsl #2]
    53c0:	bl	3a0 <bsW>
    53c4:	b	5478 <sendMTFValues+0x4b9c>
    53c8:	ldur	w8, [x29, #-28]
    53cc:	stur	w8, [x29, #-20]
    53d0:	ldur	w8, [x29, #-20]
    53d4:	ldur	w9, [x29, #-32]
    53d8:	cmp	w8, w9
    53dc:	b.gt	5478 <sendMTFValues+0x4b9c>
    53e0:	ldur	x0, [x29, #-8]
    53e4:	ldur	x8, [x29, #-8]
    53e8:	mov	x9, #0x934c                	// #37708
    53ec:	add	x8, x8, x9
    53f0:	ldur	x9, [x29, #-8]
    53f4:	add	x9, x9, #0x6a8
    53f8:	ldursw	x10, [x29, #-68]
    53fc:	ldrb	w11, [x9, x10]
    5400:	mov	w9, w11
    5404:	mov	x10, #0x102                 	// #258
    5408:	mul	x9, x10, x9
    540c:	add	x8, x8, x9
    5410:	ldr	x9, [sp, #120]
    5414:	ldursw	x10, [x29, #-20]
    5418:	ldrh	w11, [x9, x10, lsl #1]
    541c:	mov	w9, w11
    5420:	ldrb	w1, [x8, x9]
    5424:	ldur	x8, [x29, #-8]
    5428:	mov	x9, #0x9958                	// #39256
    542c:	add	x8, x8, x9
    5430:	ldur	x9, [x29, #-8]
    5434:	add	x9, x9, #0x6a8
    5438:	ldursw	x10, [x29, #-68]
    543c:	ldrb	w11, [x9, x10]
    5440:	mov	w9, w11
    5444:	mov	x10, #0x408                 	// #1032
    5448:	mul	x9, x10, x9
    544c:	add	x8, x8, x9
    5450:	ldr	x9, [sp, #120]
    5454:	ldursw	x10, [x29, #-20]
    5458:	ldrh	w11, [x9, x10, lsl #1]
    545c:	mov	w9, w11
    5460:	ldr	w2, [x8, x9, lsl #2]
    5464:	bl	3a0 <bsW>
    5468:	ldur	w8, [x29, #-20]
    546c:	add	w8, w8, #0x1
    5470:	stur	w8, [x29, #-20]
    5474:	b	53d0 <sendMTFValues+0x4af4>
    5478:	ldur	w8, [x29, #-32]
    547c:	add	w8, w8, #0x1
    5480:	stur	w8, [x29, #-28]
    5484:	ldur	w8, [x29, #-68]
    5488:	add	w8, w8, #0x1
    548c:	stur	w8, [x29, #-68]
    5490:	b	4328 <sendMTFValues+0x3a4c>
    5494:	ldur	w8, [x29, #-68]
    5498:	ldur	w9, [x29, #-52]
    549c:	cmp	w8, w9
    54a0:	b.eq	54ac <sendMTFValues+0x4bd0>  // b.none
    54a4:	mov	w0, #0xbbf                 	// #3007
    54a8:	bl	0 <BZ2_bz__AssertH__fail>
    54ac:	ldur	x8, [x29, #-8]
    54b0:	ldr	w9, [x8, #656]
    54b4:	cmp	w9, #0x3
    54b8:	b.lt	54e0 <sendMTFValues+0x4c04>  // b.tstop
    54bc:	ldr	x8, [sp, #24]
    54c0:	ldr	x0, [x8]
    54c4:	ldur	x9, [x29, #-8]
    54c8:	ldr	w10, [x9, #116]
    54cc:	ldur	w11, [x29, #-76]
    54d0:	subs	w2, w10, w11
    54d4:	adrp	x1, 0 <BZ2_bsInitWrite>
    54d8:	add	x1, x1, #0x0
    54dc:	bl	0 <fprintf>
    54e0:	ldp	x29, x30, [sp, #240]
    54e4:	add	sp, sp, #0x100
    54e8:	ret

00000000000054ec <bsFinishWrite>:
    54ec:	sub	sp, sp, #0x10
    54f0:	str	x0, [sp, #8]
    54f4:	ldr	x8, [sp, #8]
    54f8:	ldr	w9, [x8, #644]
    54fc:	cmp	w9, #0x0
    5500:	cset	w9, le
    5504:	tbnz	w9, #0, 5560 <bsFinishWrite+0x74>
    5508:	ldr	x8, [sp, #8]
    550c:	ldr	w9, [x8, #640]
    5510:	lsr	w9, w9, #24
    5514:	ldr	x8, [sp, #8]
    5518:	ldr	x8, [x8, #80]
    551c:	ldr	x10, [sp, #8]
    5520:	ldrsw	x10, [x10, #116]
    5524:	add	x8, x8, x10
    5528:	strb	w9, [x8]
    552c:	ldr	x8, [sp, #8]
    5530:	ldr	w9, [x8, #116]
    5534:	add	w9, w9, #0x1
    5538:	str	w9, [x8, #116]
    553c:	ldr	x8, [sp, #8]
    5540:	ldr	w9, [x8, #640]
    5544:	lsl	w9, w9, #8
    5548:	str	w9, [x8, #640]
    554c:	ldr	x8, [sp, #8]
    5550:	ldr	w9, [x8, #644]
    5554:	subs	w9, w9, #0x8
    5558:	str	w9, [x8, #644]
    555c:	b	54f4 <bsFinishWrite+0x8>
    5560:	add	sp, sp, #0x10
    5564:	ret

0000000000005568 <makeMaps_e>:
    5568:	sub	sp, sp, #0x10
    556c:	str	x0, [sp, #8]
    5570:	ldr	x8, [sp, #8]
    5574:	str	wzr, [x8, #124]
    5578:	str	wzr, [sp, #4]
    557c:	ldr	w8, [sp, #4]
    5580:	cmp	w8, #0x100
    5584:	b.ge	55dc <makeMaps_e+0x74>  // b.tcont
    5588:	ldr	x8, [sp, #8]
    558c:	add	x8, x8, #0x80
    5590:	ldrsw	x9, [sp, #4]
    5594:	add	x8, x8, x9
    5598:	ldrb	w10, [x8]
    559c:	cbz	w10, 55cc <makeMaps_e+0x64>
    55a0:	ldr	x8, [sp, #8]
    55a4:	ldr	w9, [x8, #124]
    55a8:	ldr	x8, [sp, #8]
    55ac:	add	x8, x8, #0x180
    55b0:	ldrsw	x10, [sp, #4]
    55b4:	add	x8, x8, x10
    55b8:	strb	w9, [x8]
    55bc:	ldr	x8, [sp, #8]
    55c0:	ldr	w9, [x8, #124]
    55c4:	add	w9, w9, #0x1
    55c8:	str	w9, [x8, #124]
    55cc:	ldr	w8, [sp, #4]
    55d0:	add	w8, w8, #0x1
    55d4:	str	w8, [sp, #4]
    55d8:	b	557c <makeMaps_e+0x14>
    55dc:	add	sp, sp, #0x10
    55e0:	ret

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	sub	sp, sp, #0x1c0
       4:	stp	x29, x30, [sp, #416]
       8:	str	x28, [sp, #432]
       c:	add	x29, sp, #0x1a0
      10:	sub	x8, x29, #0x98
      14:	str	x0, [x8, #136]
      18:	ldr	x9, [x8, #136]
      1c:	ldr	x9, [x9]
      20:	str	x9, [x8, #112]
      24:	ldr	x9, [x8, #136]
      28:	ldr	w10, [x9, #8]
      2c:	cmp	w10, #0xa
      30:	str	x8, [sp, #32]
      34:	b.ne	1c0 <BZ2_decompress+0x1c0>  // b.any
      38:	ldr	x8, [sp, #32]
      3c:	ldr	x9, [x8, #136]
      40:	mov	x10, #0xfa24                	// #64036
      44:	add	x9, x9, x10
      48:	str	wzr, [x9]
      4c:	ldr	x9, [x8, #136]
      50:	mov	x10, #0xfa28                	// #64040
      54:	add	x9, x9, x10
      58:	str	wzr, [x9]
      5c:	ldr	x9, [x8, #136]
      60:	mov	x10, #0xfa2c                	// #64044
      64:	add	x9, x9, x10
      68:	str	wzr, [x9]
      6c:	ldr	x9, [x8, #136]
      70:	mov	x10, #0xfa30                	// #64048
      74:	add	x9, x9, x10
      78:	str	wzr, [x9]
      7c:	ldr	x9, [x8, #136]
      80:	mov	x10, #0xfa34                	// #64052
      84:	add	x9, x9, x10
      88:	str	wzr, [x9]
      8c:	ldr	x9, [x8, #136]
      90:	mov	x10, #0xfa38                	// #64056
      94:	add	x9, x9, x10
      98:	str	wzr, [x9]
      9c:	ldr	x9, [x8, #136]
      a0:	mov	x10, #0xfa3c                	// #64060
      a4:	add	x9, x9, x10
      a8:	str	wzr, [x9]
      ac:	ldr	x9, [x8, #136]
      b0:	mov	x10, #0xfa40                	// #64064
      b4:	add	x9, x9, x10
      b8:	str	wzr, [x9]
      bc:	ldr	x9, [x8, #136]
      c0:	mov	x10, #0xfa44                	// #64068
      c4:	add	x9, x9, x10
      c8:	str	wzr, [x9]
      cc:	ldr	x9, [x8, #136]
      d0:	mov	x10, #0xfa48                	// #64072
      d4:	add	x9, x9, x10
      d8:	str	wzr, [x9]
      dc:	ldr	x9, [x8, #136]
      e0:	mov	x10, #0xfa4c                	// #64076
      e4:	add	x9, x9, x10
      e8:	str	wzr, [x9]
      ec:	ldr	x9, [x8, #136]
      f0:	mov	x10, #0xfa50                	// #64080
      f4:	add	x9, x9, x10
      f8:	str	wzr, [x9]
      fc:	ldr	x9, [x8, #136]
     100:	mov	x10, #0xfa54                	// #64084
     104:	add	x9, x9, x10
     108:	str	wzr, [x9]
     10c:	ldr	x9, [x8, #136]
     110:	mov	x10, #0xfa58                	// #64088
     114:	add	x9, x9, x10
     118:	str	wzr, [x9]
     11c:	ldr	x9, [x8, #136]
     120:	mov	x10, #0xfa5c                	// #64092
     124:	add	x9, x9, x10
     128:	str	wzr, [x9]
     12c:	ldr	x9, [x8, #136]
     130:	mov	x10, #0xfa60                	// #64096
     134:	add	x9, x9, x10
     138:	str	wzr, [x9]
     13c:	ldr	x9, [x8, #136]
     140:	mov	x10, #0xfa64                	// #64100
     144:	add	x9, x9, x10
     148:	str	wzr, [x9]
     14c:	ldr	x9, [x8, #136]
     150:	mov	x10, #0xfa68                	// #64104
     154:	add	x9, x9, x10
     158:	str	wzr, [x9]
     15c:	ldr	x9, [x8, #136]
     160:	mov	x10, #0xfa6c                	// #64108
     164:	add	x9, x9, x10
     168:	str	wzr, [x9]
     16c:	ldr	x9, [x8, #136]
     170:	mov	x10, #0xfa70                	// #64112
     174:	add	x9, x9, x10
     178:	str	wzr, [x9]
     17c:	ldr	x9, [x8, #136]
     180:	mov	x10, #0xfa74                	// #64116
     184:	add	x9, x9, x10
     188:	str	wzr, [x9]
     18c:	ldr	x9, [x8, #136]
     190:	mov	x10, #0xfa78                	// #64120
     194:	add	x9, x9, x10
     198:	mov	x10, xzr
     19c:	str	x10, [x9]
     1a0:	ldr	x9, [x8, #136]
     1a4:	mov	x11, #0xfa80                	// #64128
     1a8:	add	x9, x9, x11
     1ac:	str	x10, [x9]
     1b0:	ldr	x9, [x8, #136]
     1b4:	mov	x11, #0xfa88                	// #64136
     1b8:	add	x9, x9, x11
     1bc:	str	x10, [x9]
     1c0:	ldr	x8, [sp, #32]
     1c4:	ldr	x9, [x8, #136]
     1c8:	mov	x10, #0xfa24                	// #64036
     1cc:	add	x9, x9, x10
     1d0:	ldr	w11, [x9]
     1d4:	stur	w11, [x29, #-44]
     1d8:	ldr	x9, [x8, #136]
     1dc:	mov	x10, #0xfa28                	// #64040
     1e0:	add	x9, x9, x10
     1e4:	ldr	w11, [x9]
     1e8:	stur	w11, [x29, #-48]
     1ec:	ldr	x9, [x8, #136]
     1f0:	mov	x10, #0xfa2c                	// #64044
     1f4:	add	x9, x9, x10
     1f8:	ldr	w11, [x9]
     1fc:	stur	w11, [x29, #-52]
     200:	ldr	x9, [x8, #136]
     204:	mov	x10, #0xfa30                	// #64048
     208:	add	x9, x9, x10
     20c:	ldr	w11, [x9]
     210:	stur	w11, [x29, #-56]
     214:	ldr	x9, [x8, #136]
     218:	mov	x10, #0xfa34                	// #64052
     21c:	add	x9, x9, x10
     220:	ldr	w11, [x9]
     224:	stur	w11, [x29, #-60]
     228:	ldr	x9, [x8, #136]
     22c:	mov	x10, #0xfa38                	// #64056
     230:	add	x9, x9, x10
     234:	ldr	w11, [x9]
     238:	stur	w11, [x29, #-64]
     23c:	ldr	x9, [x8, #136]
     240:	mov	x10, #0xfa3c                	// #64060
     244:	add	x9, x9, x10
     248:	ldr	w11, [x9]
     24c:	stur	w11, [x29, #-68]
     250:	ldr	x9, [x8, #136]
     254:	mov	x10, #0xfa40                	// #64064
     258:	add	x9, x9, x10
     25c:	ldr	w11, [x9]
     260:	stur	w11, [x29, #-72]
     264:	ldr	x9, [x8, #136]
     268:	mov	x10, #0xfa44                	// #64068
     26c:	add	x9, x9, x10
     270:	ldr	w11, [x9]
     274:	stur	w11, [x29, #-76]
     278:	ldr	x9, [x8, #136]
     27c:	mov	x10, #0xfa48                	// #64072
     280:	add	x9, x9, x10
     284:	ldr	w11, [x9]
     288:	stur	w11, [x29, #-80]
     28c:	ldr	x9, [x8, #136]
     290:	mov	x10, #0xfa4c                	// #64076
     294:	add	x9, x9, x10
     298:	ldr	w11, [x9]
     29c:	stur	w11, [x29, #-84]
     2a0:	ldr	x9, [x8, #136]
     2a4:	mov	x10, #0xfa50                	// #64080
     2a8:	add	x9, x9, x10
     2ac:	ldr	w11, [x9]
     2b0:	stur	w11, [x29, #-88]
     2b4:	ldr	x9, [x8, #136]
     2b8:	mov	x10, #0xfa54                	// #64084
     2bc:	add	x9, x9, x10
     2c0:	ldr	w11, [x9]
     2c4:	stur	w11, [x29, #-92]
     2c8:	ldr	x9, [x8, #136]
     2cc:	mov	x10, #0xfa58                	// #64088
     2d0:	add	x9, x9, x10
     2d4:	ldr	w11, [x9]
     2d8:	stur	w11, [x29, #-96]
     2dc:	ldr	x9, [x8, #136]
     2e0:	mov	x10, #0xfa5c                	// #64092
     2e4:	add	x9, x9, x10
     2e8:	ldr	w11, [x9]
     2ec:	stur	w11, [x29, #-100]
     2f0:	ldr	x9, [x8, #136]
     2f4:	mov	x10, #0xfa60                	// #64096
     2f8:	add	x9, x9, x10
     2fc:	ldr	w11, [x9]
     300:	stur	w11, [x29, #-104]
     304:	ldr	x9, [x8, #136]
     308:	mov	x10, #0xfa64                	// #64100
     30c:	add	x9, x9, x10
     310:	ldr	w11, [x9]
     314:	stur	w11, [x29, #-108]
     318:	ldr	x9, [x8, #136]
     31c:	mov	x10, #0xfa68                	// #64104
     320:	add	x9, x9, x10
     324:	ldr	w11, [x9]
     328:	stur	w11, [x29, #-112]
     32c:	ldr	x9, [x8, #136]
     330:	mov	x10, #0xfa6c                	// #64108
     334:	add	x9, x9, x10
     338:	ldr	w11, [x9]
     33c:	stur	w11, [x29, #-116]
     340:	ldr	x9, [x8, #136]
     344:	mov	x10, #0xfa70                	// #64112
     348:	add	x9, x9, x10
     34c:	ldr	w11, [x9]
     350:	stur	w11, [x29, #-120]
     354:	ldr	x9, [x8, #136]
     358:	mov	x10, #0xfa74                	// #64116
     35c:	add	x9, x9, x10
     360:	ldr	w11, [x9]
     364:	stur	w11, [x29, #-124]
     368:	ldr	x9, [x8, #136]
     36c:	mov	x10, #0xfa78                	// #64120
     370:	add	x9, x9, x10
     374:	ldr	x9, [x9]
     378:	str	x9, [x8, #16]
     37c:	ldr	x9, [x8, #136]
     380:	mov	x10, #0xfa80                	// #64128
     384:	add	x9, x9, x10
     388:	ldr	x9, [x9]
     38c:	str	x9, [x8, #8]
     390:	ldr	x9, [x8, #136]
     394:	mov	x10, #0xfa88                	// #64136
     398:	add	x9, x9, x10
     39c:	ldr	x9, [x9]
     3a0:	str	x9, [x8]
     3a4:	stur	wzr, [x29, #-24]
     3a8:	ldr	x9, [x8, #136]
     3ac:	ldr	w11, [x9, #8]
     3b0:	subs	w11, w11, #0xa
     3b4:	mov	w9, w11
     3b8:	ubfx	x9, x9, #0, #32
     3bc:	cmp	x9, #0x28
     3c0:	str	x9, [sp, #24]
     3c4:	b.hi	5590 <BZ2_decompress+0x5590>  // b.pmore
     3c8:	adrp	x8, 0 <BZ2_decompress>
     3cc:	add	x8, x8, #0x0
     3d0:	ldr	x11, [sp, #24]
     3d4:	ldrsw	x10, [x8, x11, lsl #2]
     3d8:	add	x9, x8, x10
     3dc:	br	x9
     3e0:	ldr	x8, [sp, #32]
     3e4:	ldr	x9, [x8, #136]
     3e8:	mov	w10, #0xa                   	// #10
     3ec:	str	w10, [x9, #8]
     3f0:	ldr	x8, [sp, #32]
     3f4:	ldr	x9, [x8, #136]
     3f8:	ldr	w10, [x9, #36]
     3fc:	cmp	w10, #0x8
     400:	b.lt	444 <BZ2_decompress+0x444>  // b.tstop
     404:	ldr	x8, [sp, #32]
     408:	ldr	x9, [x8, #136]
     40c:	ldr	w10, [x9, #32]
     410:	ldr	x9, [x8, #136]
     414:	ldr	w11, [x9, #36]
     418:	subs	w11, w11, #0x8
     41c:	lsr	w10, w10, w11
     420:	and	w10, w10, #0xff
     424:	stur	w10, [x29, #-156]
     428:	ldr	x9, [x8, #136]
     42c:	ldr	w10, [x9, #36]
     430:	subs	w10, w10, #0x8
     434:	str	w10, [x9, #36]
     438:	ldur	w10, [x29, #-156]
     43c:	sturb	w10, [x29, #-17]
     440:	b	500 <BZ2_decompress+0x500>
     444:	ldr	x8, [sp, #32]
     448:	ldr	x9, [x8, #136]
     44c:	ldr	x9, [x9]
     450:	ldr	w10, [x9, #8]
     454:	cbnz	w10, 460 <BZ2_decompress+0x460>
     458:	stur	wzr, [x29, #-24]
     45c:	b	55a0 <BZ2_decompress+0x55a0>
     460:	ldr	x8, [sp, #32]
     464:	ldr	x9, [x8, #136]
     468:	ldr	w10, [x9, #32]
     46c:	ldr	x9, [x8, #136]
     470:	ldr	x9, [x9]
     474:	ldr	x9, [x9]
     478:	ldrb	w11, [x9]
     47c:	orr	w10, w11, w10, lsl #8
     480:	ldr	x9, [x8, #136]
     484:	str	w10, [x9, #32]
     488:	ldr	x9, [x8, #136]
     48c:	ldr	w10, [x9, #36]
     490:	add	w10, w10, #0x8
     494:	str	w10, [x9, #36]
     498:	ldr	x9, [x8, #136]
     49c:	ldr	x9, [x9]
     4a0:	ldr	x12, [x9]
     4a4:	add	x12, x12, #0x1
     4a8:	str	x12, [x9]
     4ac:	ldr	x9, [x8, #136]
     4b0:	ldr	x9, [x9]
     4b4:	ldr	w10, [x9, #8]
     4b8:	subs	w10, w10, #0x1
     4bc:	str	w10, [x9, #8]
     4c0:	ldr	x9, [x8, #136]
     4c4:	ldr	x9, [x9]
     4c8:	ldr	w10, [x9, #12]
     4cc:	add	w10, w10, #0x1
     4d0:	str	w10, [x9, #12]
     4d4:	ldr	x9, [x8, #136]
     4d8:	ldr	x9, [x9]
     4dc:	ldr	w10, [x9, #12]
     4e0:	cbnz	w10, 4fc <BZ2_decompress+0x4fc>
     4e4:	ldr	x8, [sp, #32]
     4e8:	ldr	x9, [x8, #136]
     4ec:	ldr	x9, [x9]
     4f0:	ldr	w10, [x9, #16]
     4f4:	add	w10, w10, #0x1
     4f8:	str	w10, [x9, #16]
     4fc:	b	3f0 <BZ2_decompress+0x3f0>
     500:	ldurb	w8, [x29, #-17]
     504:	cmp	w8, #0x42
     508:	b.eq	518 <BZ2_decompress+0x518>  // b.none
     50c:	mov	w8, #0xfffffffb            	// #-5
     510:	stur	w8, [x29, #-24]
     514:	b	55a0 <BZ2_decompress+0x55a0>
     518:	ldr	x8, [sp, #32]
     51c:	ldr	x9, [x8, #136]
     520:	mov	w10, #0xb                   	// #11
     524:	str	w10, [x9, #8]
     528:	ldr	x8, [sp, #32]
     52c:	ldr	x9, [x8, #136]
     530:	ldr	w10, [x9, #36]
     534:	cmp	w10, #0x8
     538:	b.lt	57c <BZ2_decompress+0x57c>  // b.tstop
     53c:	ldr	x8, [sp, #32]
     540:	ldr	x9, [x8, #136]
     544:	ldr	w10, [x9, #32]
     548:	ldr	x9, [x8, #136]
     54c:	ldr	w11, [x9, #36]
     550:	subs	w11, w11, #0x8
     554:	lsr	w10, w10, w11
     558:	and	w10, w10, #0xff
     55c:	stur	w10, [x29, #-160]
     560:	ldr	x9, [x8, #136]
     564:	ldr	w10, [x9, #36]
     568:	subs	w10, w10, #0x8
     56c:	str	w10, [x9, #36]
     570:	ldur	w10, [x29, #-160]
     574:	sturb	w10, [x29, #-17]
     578:	b	638 <BZ2_decompress+0x638>
     57c:	ldr	x8, [sp, #32]
     580:	ldr	x9, [x8, #136]
     584:	ldr	x9, [x9]
     588:	ldr	w10, [x9, #8]
     58c:	cbnz	w10, 598 <BZ2_decompress+0x598>
     590:	stur	wzr, [x29, #-24]
     594:	b	55a0 <BZ2_decompress+0x55a0>
     598:	ldr	x8, [sp, #32]
     59c:	ldr	x9, [x8, #136]
     5a0:	ldr	w10, [x9, #32]
     5a4:	ldr	x9, [x8, #136]
     5a8:	ldr	x9, [x9]
     5ac:	ldr	x9, [x9]
     5b0:	ldrb	w11, [x9]
     5b4:	orr	w10, w11, w10, lsl #8
     5b8:	ldr	x9, [x8, #136]
     5bc:	str	w10, [x9, #32]
     5c0:	ldr	x9, [x8, #136]
     5c4:	ldr	w10, [x9, #36]
     5c8:	add	w10, w10, #0x8
     5cc:	str	w10, [x9, #36]
     5d0:	ldr	x9, [x8, #136]
     5d4:	ldr	x9, [x9]
     5d8:	ldr	x12, [x9]
     5dc:	add	x12, x12, #0x1
     5e0:	str	x12, [x9]
     5e4:	ldr	x9, [x8, #136]
     5e8:	ldr	x9, [x9]
     5ec:	ldr	w10, [x9, #8]
     5f0:	subs	w10, w10, #0x1
     5f4:	str	w10, [x9, #8]
     5f8:	ldr	x9, [x8, #136]
     5fc:	ldr	x9, [x9]
     600:	ldr	w10, [x9, #12]
     604:	add	w10, w10, #0x1
     608:	str	w10, [x9, #12]
     60c:	ldr	x9, [x8, #136]
     610:	ldr	x9, [x9]
     614:	ldr	w10, [x9, #12]
     618:	cbnz	w10, 634 <BZ2_decompress+0x634>
     61c:	ldr	x8, [sp, #32]
     620:	ldr	x9, [x8, #136]
     624:	ldr	x9, [x9]
     628:	ldr	w10, [x9, #16]
     62c:	add	w10, w10, #0x1
     630:	str	w10, [x9, #16]
     634:	b	528 <BZ2_decompress+0x528>
     638:	ldurb	w8, [x29, #-17]
     63c:	cmp	w8, #0x5a
     640:	b.eq	650 <BZ2_decompress+0x650>  // b.none
     644:	mov	w8, #0xfffffffb            	// #-5
     648:	stur	w8, [x29, #-24]
     64c:	b	55a0 <BZ2_decompress+0x55a0>
     650:	ldr	x8, [sp, #32]
     654:	ldr	x9, [x8, #136]
     658:	mov	w10, #0xc                   	// #12
     65c:	str	w10, [x9, #8]
     660:	ldr	x8, [sp, #32]
     664:	ldr	x9, [x8, #136]
     668:	ldr	w10, [x9, #36]
     66c:	cmp	w10, #0x8
     670:	b.lt	6b4 <BZ2_decompress+0x6b4>  // b.tstop
     674:	ldr	x8, [sp, #32]
     678:	ldr	x9, [x8, #136]
     67c:	ldr	w10, [x9, #32]
     680:	ldr	x9, [x8, #136]
     684:	ldr	w11, [x9, #36]
     688:	subs	w11, w11, #0x8
     68c:	lsr	w10, w10, w11
     690:	and	w10, w10, #0xff
     694:	stur	w10, [x29, #-164]
     698:	ldr	x9, [x8, #136]
     69c:	ldr	w10, [x9, #36]
     6a0:	subs	w10, w10, #0x8
     6a4:	str	w10, [x9, #36]
     6a8:	ldur	w10, [x29, #-164]
     6ac:	sturb	w10, [x29, #-17]
     6b0:	b	770 <BZ2_decompress+0x770>
     6b4:	ldr	x8, [sp, #32]
     6b8:	ldr	x9, [x8, #136]
     6bc:	ldr	x9, [x9]
     6c0:	ldr	w10, [x9, #8]
     6c4:	cbnz	w10, 6d0 <BZ2_decompress+0x6d0>
     6c8:	stur	wzr, [x29, #-24]
     6cc:	b	55a0 <BZ2_decompress+0x55a0>
     6d0:	ldr	x8, [sp, #32]
     6d4:	ldr	x9, [x8, #136]
     6d8:	ldr	w10, [x9, #32]
     6dc:	ldr	x9, [x8, #136]
     6e0:	ldr	x9, [x9]
     6e4:	ldr	x9, [x9]
     6e8:	ldrb	w11, [x9]
     6ec:	orr	w10, w11, w10, lsl #8
     6f0:	ldr	x9, [x8, #136]
     6f4:	str	w10, [x9, #32]
     6f8:	ldr	x9, [x8, #136]
     6fc:	ldr	w10, [x9, #36]
     700:	add	w10, w10, #0x8
     704:	str	w10, [x9, #36]
     708:	ldr	x9, [x8, #136]
     70c:	ldr	x9, [x9]
     710:	ldr	x12, [x9]
     714:	add	x12, x12, #0x1
     718:	str	x12, [x9]
     71c:	ldr	x9, [x8, #136]
     720:	ldr	x9, [x9]
     724:	ldr	w10, [x9, #8]
     728:	subs	w10, w10, #0x1
     72c:	str	w10, [x9, #8]
     730:	ldr	x9, [x8, #136]
     734:	ldr	x9, [x9]
     738:	ldr	w10, [x9, #12]
     73c:	add	w10, w10, #0x1
     740:	str	w10, [x9, #12]
     744:	ldr	x9, [x8, #136]
     748:	ldr	x9, [x9]
     74c:	ldr	w10, [x9, #12]
     750:	cbnz	w10, 76c <BZ2_decompress+0x76c>
     754:	ldr	x8, [sp, #32]
     758:	ldr	x9, [x8, #136]
     75c:	ldr	x9, [x9]
     760:	ldr	w10, [x9, #16]
     764:	add	w10, w10, #0x1
     768:	str	w10, [x9, #16]
     76c:	b	660 <BZ2_decompress+0x660>
     770:	ldurb	w8, [x29, #-17]
     774:	cmp	w8, #0x68
     778:	b.eq	788 <BZ2_decompress+0x788>  // b.none
     77c:	mov	w8, #0xfffffffb            	// #-5
     780:	stur	w8, [x29, #-24]
     784:	b	55a0 <BZ2_decompress+0x55a0>
     788:	ldr	x8, [sp, #32]
     78c:	ldr	x9, [x8, #136]
     790:	mov	w10, #0xd                   	// #13
     794:	str	w10, [x9, #8]
     798:	ldr	x8, [sp, #32]
     79c:	ldr	x9, [x8, #136]
     7a0:	ldr	w10, [x9, #36]
     7a4:	cmp	w10, #0x8
     7a8:	b.lt	7f0 <BZ2_decompress+0x7f0>  // b.tstop
     7ac:	ldr	x8, [sp, #32]
     7b0:	ldr	x9, [x8, #136]
     7b4:	ldr	w10, [x9, #32]
     7b8:	ldr	x9, [x8, #136]
     7bc:	ldr	w11, [x9, #36]
     7c0:	subs	w11, w11, #0x8
     7c4:	lsr	w10, w10, w11
     7c8:	and	w10, w10, #0xff
     7cc:	stur	w10, [x29, #-168]
     7d0:	ldr	x9, [x8, #136]
     7d4:	ldr	w10, [x9, #36]
     7d8:	subs	w10, w10, #0x8
     7dc:	str	w10, [x9, #36]
     7e0:	ldur	w10, [x29, #-168]
     7e4:	ldr	x9, [x8, #136]
     7e8:	str	w10, [x9, #40]
     7ec:	b	8ac <BZ2_decompress+0x8ac>
     7f0:	ldr	x8, [sp, #32]
     7f4:	ldr	x9, [x8, #136]
     7f8:	ldr	x9, [x9]
     7fc:	ldr	w10, [x9, #8]
     800:	cbnz	w10, 80c <BZ2_decompress+0x80c>
     804:	stur	wzr, [x29, #-24]
     808:	b	55a0 <BZ2_decompress+0x55a0>
     80c:	ldr	x8, [sp, #32]
     810:	ldr	x9, [x8, #136]
     814:	ldr	w10, [x9, #32]
     818:	ldr	x9, [x8, #136]
     81c:	ldr	x9, [x9]
     820:	ldr	x9, [x9]
     824:	ldrb	w11, [x9]
     828:	orr	w10, w11, w10, lsl #8
     82c:	ldr	x9, [x8, #136]
     830:	str	w10, [x9, #32]
     834:	ldr	x9, [x8, #136]
     838:	ldr	w10, [x9, #36]
     83c:	add	w10, w10, #0x8
     840:	str	w10, [x9, #36]
     844:	ldr	x9, [x8, #136]
     848:	ldr	x9, [x9]
     84c:	ldr	x12, [x9]
     850:	add	x12, x12, #0x1
     854:	str	x12, [x9]
     858:	ldr	x9, [x8, #136]
     85c:	ldr	x9, [x9]
     860:	ldr	w10, [x9, #8]
     864:	subs	w10, w10, #0x1
     868:	str	w10, [x9, #8]
     86c:	ldr	x9, [x8, #136]
     870:	ldr	x9, [x9]
     874:	ldr	w10, [x9, #12]
     878:	add	w10, w10, #0x1
     87c:	str	w10, [x9, #12]
     880:	ldr	x9, [x8, #136]
     884:	ldr	x9, [x9]
     888:	ldr	w10, [x9, #12]
     88c:	cbnz	w10, 8a8 <BZ2_decompress+0x8a8>
     890:	ldr	x8, [sp, #32]
     894:	ldr	x9, [x8, #136]
     898:	ldr	x9, [x9]
     89c:	ldr	w10, [x9, #16]
     8a0:	add	w10, w10, #0x1
     8a4:	str	w10, [x9, #16]
     8a8:	b	798 <BZ2_decompress+0x798>
     8ac:	ldr	x8, [sp, #32]
     8b0:	ldr	x9, [x8, #136]
     8b4:	ldr	w10, [x9, #40]
     8b8:	cmp	w10, #0x31
     8bc:	b.lt	8d4 <BZ2_decompress+0x8d4>  // b.tstop
     8c0:	ldr	x8, [sp, #32]
     8c4:	ldr	x9, [x8, #136]
     8c8:	ldr	w10, [x9, #40]
     8cc:	cmp	w10, #0x39
     8d0:	b.le	8e0 <BZ2_decompress+0x8e0>
     8d4:	mov	w8, #0xfffffffb            	// #-5
     8d8:	stur	w8, [x29, #-24]
     8dc:	b	55a0 <BZ2_decompress+0x55a0>
     8e0:	ldr	x8, [sp, #32]
     8e4:	ldr	x9, [x8, #136]
     8e8:	ldr	w10, [x9, #40]
     8ec:	subs	w10, w10, #0x30
     8f0:	str	w10, [x9, #40]
     8f4:	ldr	x9, [x8, #136]
     8f8:	ldrb	w10, [x9, #44]
     8fc:	cbz	w10, 9c8 <BZ2_decompress+0x9c8>
     900:	ldr	x8, [sp, #32]
     904:	ldr	x9, [x8, #112]
     908:	ldr	x9, [x9, #56]
     90c:	ldr	x10, [x8, #112]
     910:	ldr	x0, [x10, #72]
     914:	ldr	x10, [x8, #136]
     918:	ldr	w11, [x10, #40]
     91c:	mov	w12, #0x86a0                	// #34464
     920:	movk	w12, #0x1, lsl #16
     924:	mul	w11, w11, w12
     928:	mov	w13, #0x2                   	// #2
     92c:	smull	x10, w11, w13
     930:	mov	w1, w10
     934:	mov	w10, #0x1                   	// #1
     938:	mov	w2, w10
     93c:	str	w12, [sp, #20]
     940:	str	w10, [sp, #16]
     944:	blr	x9
     948:	ldr	x8, [sp, #32]
     94c:	ldr	x9, [x8, #136]
     950:	str	x0, [x9, #3160]
     954:	ldr	x9, [x8, #112]
     958:	ldr	x9, [x9, #56]
     95c:	ldr	x14, [x8, #112]
     960:	ldr	x0, [x14, #72]
     964:	ldr	x14, [x8, #136]
     968:	ldr	w10, [x14, #40]
     96c:	ldr	w11, [sp, #20]
     970:	mul	w10, w10, w11
     974:	add	w10, w10, #0x1
     978:	asr	w10, w10, #1
     97c:	mov	w12, #0x1                   	// #1
     980:	smull	x14, w10, w12
     984:	mov	w1, w14
     988:	ldr	w2, [sp, #16]
     98c:	blr	x9
     990:	ldr	x8, [sp, #32]
     994:	ldr	x9, [x8, #136]
     998:	str	x0, [x9, #3168]
     99c:	ldr	x9, [x8, #136]
     9a0:	ldr	x9, [x9, #3160]
     9a4:	cbz	x9, 9b8 <BZ2_decompress+0x9b8>
     9a8:	ldr	x8, [sp, #32]
     9ac:	ldr	x9, [x8, #136]
     9b0:	ldr	x9, [x9, #3168]
     9b4:	cbnz	x9, 9c4 <BZ2_decompress+0x9c4>
     9b8:	mov	w8, #0xfffffffd            	// #-3
     9bc:	stur	w8, [x29, #-24]
     9c0:	b	55a0 <BZ2_decompress+0x55a0>
     9c4:	b	a28 <BZ2_decompress+0xa28>
     9c8:	ldr	x8, [sp, #32]
     9cc:	ldr	x9, [x8, #112]
     9d0:	ldr	x9, [x9, #56]
     9d4:	ldr	x10, [x8, #112]
     9d8:	ldr	x0, [x10, #72]
     9dc:	ldr	x10, [x8, #136]
     9e0:	ldr	w11, [x10, #40]
     9e4:	mov	w12, #0x86a0                	// #34464
     9e8:	movk	w12, #0x1, lsl #16
     9ec:	mul	w11, w11, w12
     9f0:	mov	w12, #0x4                   	// #4
     9f4:	smull	x10, w11, w12
     9f8:	mov	w1, w10
     9fc:	mov	w2, #0x1                   	// #1
     a00:	blr	x9
     a04:	ldr	x8, [sp, #32]
     a08:	ldr	x9, [x8, #136]
     a0c:	str	x0, [x9, #3152]
     a10:	ldr	x9, [x8, #136]
     a14:	ldr	x9, [x9, #3152]
     a18:	cbnz	x9, a28 <BZ2_decompress+0xa28>
     a1c:	mov	w8, #0xfffffffd            	// #-3
     a20:	stur	w8, [x29, #-24]
     a24:	b	55a0 <BZ2_decompress+0x55a0>
     a28:	ldr	x8, [sp, #32]
     a2c:	ldr	x9, [x8, #136]
     a30:	mov	w10, #0xe                   	// #14
     a34:	str	w10, [x9, #8]
     a38:	ldr	x8, [sp, #32]
     a3c:	ldr	x9, [x8, #136]
     a40:	ldr	w10, [x9, #36]
     a44:	cmp	w10, #0x8
     a48:	b.lt	a8c <BZ2_decompress+0xa8c>  // b.tstop
     a4c:	ldr	x8, [sp, #32]
     a50:	ldr	x9, [x8, #136]
     a54:	ldr	w10, [x9, #32]
     a58:	ldr	x9, [x8, #136]
     a5c:	ldr	w11, [x9, #36]
     a60:	subs	w11, w11, #0x8
     a64:	lsr	w10, w10, w11
     a68:	and	w10, w10, #0xff
     a6c:	stur	w10, [x29, #-172]
     a70:	ldr	x9, [x8, #136]
     a74:	ldr	w10, [x9, #36]
     a78:	subs	w10, w10, #0x8
     a7c:	str	w10, [x9, #36]
     a80:	ldur	w10, [x29, #-172]
     a84:	sturb	w10, [x29, #-17]
     a88:	b	b48 <BZ2_decompress+0xb48>
     a8c:	ldr	x8, [sp, #32]
     a90:	ldr	x9, [x8, #136]
     a94:	ldr	x9, [x9]
     a98:	ldr	w10, [x9, #8]
     a9c:	cbnz	w10, aa8 <BZ2_decompress+0xaa8>
     aa0:	stur	wzr, [x29, #-24]
     aa4:	b	55a0 <BZ2_decompress+0x55a0>
     aa8:	ldr	x8, [sp, #32]
     aac:	ldr	x9, [x8, #136]
     ab0:	ldr	w10, [x9, #32]
     ab4:	ldr	x9, [x8, #136]
     ab8:	ldr	x9, [x9]
     abc:	ldr	x9, [x9]
     ac0:	ldrb	w11, [x9]
     ac4:	orr	w10, w11, w10, lsl #8
     ac8:	ldr	x9, [x8, #136]
     acc:	str	w10, [x9, #32]
     ad0:	ldr	x9, [x8, #136]
     ad4:	ldr	w10, [x9, #36]
     ad8:	add	w10, w10, #0x8
     adc:	str	w10, [x9, #36]
     ae0:	ldr	x9, [x8, #136]
     ae4:	ldr	x9, [x9]
     ae8:	ldr	x12, [x9]
     aec:	add	x12, x12, #0x1
     af0:	str	x12, [x9]
     af4:	ldr	x9, [x8, #136]
     af8:	ldr	x9, [x9]
     afc:	ldr	w10, [x9, #8]
     b00:	subs	w10, w10, #0x1
     b04:	str	w10, [x9, #8]
     b08:	ldr	x9, [x8, #136]
     b0c:	ldr	x9, [x9]
     b10:	ldr	w10, [x9, #12]
     b14:	add	w10, w10, #0x1
     b18:	str	w10, [x9, #12]
     b1c:	ldr	x9, [x8, #136]
     b20:	ldr	x9, [x9]
     b24:	ldr	w10, [x9, #12]
     b28:	cbnz	w10, b44 <BZ2_decompress+0xb44>
     b2c:	ldr	x8, [sp, #32]
     b30:	ldr	x9, [x8, #136]
     b34:	ldr	x9, [x9]
     b38:	ldr	w10, [x9, #16]
     b3c:	add	w10, w10, #0x1
     b40:	str	w10, [x9, #16]
     b44:	b	a38 <BZ2_decompress+0xa38>
     b48:	ldurb	w8, [x29, #-17]
     b4c:	cmp	w8, #0x17
     b50:	b.ne	b58 <BZ2_decompress+0xb58>  // b.any
     b54:	b	4a64 <BZ2_decompress+0x4a64>
     b58:	ldurb	w8, [x29, #-17]
     b5c:	cmp	w8, #0x31
     b60:	b.eq	b70 <BZ2_decompress+0xb70>  // b.none
     b64:	mov	w8, #0xfffffffc            	// #-4
     b68:	stur	w8, [x29, #-24]
     b6c:	b	55a0 <BZ2_decompress+0x55a0>
     b70:	ldr	x8, [sp, #32]
     b74:	ldr	x9, [x8, #136]
     b78:	mov	w10, #0xf                   	// #15
     b7c:	str	w10, [x9, #8]
     b80:	ldr	x8, [sp, #32]
     b84:	ldr	x9, [x8, #136]
     b88:	ldr	w10, [x9, #36]
     b8c:	cmp	w10, #0x8
     b90:	b.lt	bd4 <BZ2_decompress+0xbd4>  // b.tstop
     b94:	ldr	x8, [sp, #32]
     b98:	ldr	x9, [x8, #136]
     b9c:	ldr	w10, [x9, #32]
     ba0:	ldr	x9, [x8, #136]
     ba4:	ldr	w11, [x9, #36]
     ba8:	subs	w11, w11, #0x8
     bac:	lsr	w10, w10, w11
     bb0:	and	w10, w10, #0xff
     bb4:	stur	w10, [x29, #-176]
     bb8:	ldr	x9, [x8, #136]
     bbc:	ldr	w10, [x9, #36]
     bc0:	subs	w10, w10, #0x8
     bc4:	str	w10, [x9, #36]
     bc8:	ldur	w10, [x29, #-176]
     bcc:	sturb	w10, [x29, #-17]
     bd0:	b	c90 <BZ2_decompress+0xc90>
     bd4:	ldr	x8, [sp, #32]
     bd8:	ldr	x9, [x8, #136]
     bdc:	ldr	x9, [x9]
     be0:	ldr	w10, [x9, #8]
     be4:	cbnz	w10, bf0 <BZ2_decompress+0xbf0>
     be8:	stur	wzr, [x29, #-24]
     bec:	b	55a0 <BZ2_decompress+0x55a0>
     bf0:	ldr	x8, [sp, #32]
     bf4:	ldr	x9, [x8, #136]
     bf8:	ldr	w10, [x9, #32]
     bfc:	ldr	x9, [x8, #136]
     c00:	ldr	x9, [x9]
     c04:	ldr	x9, [x9]
     c08:	ldrb	w11, [x9]
     c0c:	orr	w10, w11, w10, lsl #8
     c10:	ldr	x9, [x8, #136]
     c14:	str	w10, [x9, #32]
     c18:	ldr	x9, [x8, #136]
     c1c:	ldr	w10, [x9, #36]
     c20:	add	w10, w10, #0x8
     c24:	str	w10, [x9, #36]
     c28:	ldr	x9, [x8, #136]
     c2c:	ldr	x9, [x9]
     c30:	ldr	x12, [x9]
     c34:	add	x12, x12, #0x1
     c38:	str	x12, [x9]
     c3c:	ldr	x9, [x8, #136]
     c40:	ldr	x9, [x9]
     c44:	ldr	w10, [x9, #8]
     c48:	subs	w10, w10, #0x1
     c4c:	str	w10, [x9, #8]
     c50:	ldr	x9, [x8, #136]
     c54:	ldr	x9, [x9]
     c58:	ldr	w10, [x9, #12]
     c5c:	add	w10, w10, #0x1
     c60:	str	w10, [x9, #12]
     c64:	ldr	x9, [x8, #136]
     c68:	ldr	x9, [x9]
     c6c:	ldr	w10, [x9, #12]
     c70:	cbnz	w10, c8c <BZ2_decompress+0xc8c>
     c74:	ldr	x8, [sp, #32]
     c78:	ldr	x9, [x8, #136]
     c7c:	ldr	x9, [x9]
     c80:	ldr	w10, [x9, #16]
     c84:	add	w10, w10, #0x1
     c88:	str	w10, [x9, #16]
     c8c:	b	b80 <BZ2_decompress+0xb80>
     c90:	ldurb	w8, [x29, #-17]
     c94:	cmp	w8, #0x41
     c98:	b.eq	ca8 <BZ2_decompress+0xca8>  // b.none
     c9c:	mov	w8, #0xfffffffc            	// #-4
     ca0:	stur	w8, [x29, #-24]
     ca4:	b	55a0 <BZ2_decompress+0x55a0>
     ca8:	ldr	x8, [sp, #32]
     cac:	ldr	x9, [x8, #136]
     cb0:	mov	w10, #0x10                  	// #16
     cb4:	str	w10, [x9, #8]
     cb8:	ldr	x8, [sp, #32]
     cbc:	ldr	x9, [x8, #136]
     cc0:	ldr	w10, [x9, #36]
     cc4:	cmp	w10, #0x8
     cc8:	b.lt	d0c <BZ2_decompress+0xd0c>  // b.tstop
     ccc:	ldr	x8, [sp, #32]
     cd0:	ldr	x9, [x8, #136]
     cd4:	ldr	w10, [x9, #32]
     cd8:	ldr	x9, [x8, #136]
     cdc:	ldr	w11, [x9, #36]
     ce0:	subs	w11, w11, #0x8
     ce4:	lsr	w10, w10, w11
     ce8:	and	w10, w10, #0xff
     cec:	stur	w10, [x29, #-180]
     cf0:	ldr	x9, [x8, #136]
     cf4:	ldr	w10, [x9, #36]
     cf8:	subs	w10, w10, #0x8
     cfc:	str	w10, [x9, #36]
     d00:	ldur	w10, [x29, #-180]
     d04:	sturb	w10, [x29, #-17]
     d08:	b	dc8 <BZ2_decompress+0xdc8>
     d0c:	ldr	x8, [sp, #32]
     d10:	ldr	x9, [x8, #136]
     d14:	ldr	x9, [x9]
     d18:	ldr	w10, [x9, #8]
     d1c:	cbnz	w10, d28 <BZ2_decompress+0xd28>
     d20:	stur	wzr, [x29, #-24]
     d24:	b	55a0 <BZ2_decompress+0x55a0>
     d28:	ldr	x8, [sp, #32]
     d2c:	ldr	x9, [x8, #136]
     d30:	ldr	w10, [x9, #32]
     d34:	ldr	x9, [x8, #136]
     d38:	ldr	x9, [x9]
     d3c:	ldr	x9, [x9]
     d40:	ldrb	w11, [x9]
     d44:	orr	w10, w11, w10, lsl #8
     d48:	ldr	x9, [x8, #136]
     d4c:	str	w10, [x9, #32]
     d50:	ldr	x9, [x8, #136]
     d54:	ldr	w10, [x9, #36]
     d58:	add	w10, w10, #0x8
     d5c:	str	w10, [x9, #36]
     d60:	ldr	x9, [x8, #136]
     d64:	ldr	x9, [x9]
     d68:	ldr	x12, [x9]
     d6c:	add	x12, x12, #0x1
     d70:	str	x12, [x9]
     d74:	ldr	x9, [x8, #136]
     d78:	ldr	x9, [x9]
     d7c:	ldr	w10, [x9, #8]
     d80:	subs	w10, w10, #0x1
     d84:	str	w10, [x9, #8]
     d88:	ldr	x9, [x8, #136]
     d8c:	ldr	x9, [x9]
     d90:	ldr	w10, [x9, #12]
     d94:	add	w10, w10, #0x1
     d98:	str	w10, [x9, #12]
     d9c:	ldr	x9, [x8, #136]
     da0:	ldr	x9, [x9]
     da4:	ldr	w10, [x9, #12]
     da8:	cbnz	w10, dc4 <BZ2_decompress+0xdc4>
     dac:	ldr	x8, [sp, #32]
     db0:	ldr	x9, [x8, #136]
     db4:	ldr	x9, [x9]
     db8:	ldr	w10, [x9, #16]
     dbc:	add	w10, w10, #0x1
     dc0:	str	w10, [x9, #16]
     dc4:	b	cb8 <BZ2_decompress+0xcb8>
     dc8:	ldurb	w8, [x29, #-17]
     dcc:	cmp	w8, #0x59
     dd0:	b.eq	de0 <BZ2_decompress+0xde0>  // b.none
     dd4:	mov	w8, #0xfffffffc            	// #-4
     dd8:	stur	w8, [x29, #-24]
     ddc:	b	55a0 <BZ2_decompress+0x55a0>
     de0:	ldr	x8, [sp, #32]
     de4:	ldr	x9, [x8, #136]
     de8:	mov	w10, #0x11                  	// #17
     dec:	str	w10, [x9, #8]
     df0:	ldr	x8, [sp, #32]
     df4:	ldr	x9, [x8, #136]
     df8:	ldr	w10, [x9, #36]
     dfc:	cmp	w10, #0x8
     e00:	b.lt	e44 <BZ2_decompress+0xe44>  // b.tstop
     e04:	ldr	x8, [sp, #32]
     e08:	ldr	x9, [x8, #136]
     e0c:	ldr	w10, [x9, #32]
     e10:	ldr	x9, [x8, #136]
     e14:	ldr	w11, [x9, #36]
     e18:	subs	w11, w11, #0x8
     e1c:	lsr	w10, w10, w11
     e20:	and	w10, w10, #0xff
     e24:	stur	w10, [x29, #-184]
     e28:	ldr	x9, [x8, #136]
     e2c:	ldr	w10, [x9, #36]
     e30:	subs	w10, w10, #0x8
     e34:	str	w10, [x9, #36]
     e38:	ldur	w10, [x29, #-184]
     e3c:	sturb	w10, [x29, #-17]
     e40:	b	f00 <BZ2_decompress+0xf00>
     e44:	ldr	x8, [sp, #32]
     e48:	ldr	x9, [x8, #136]
     e4c:	ldr	x9, [x9]
     e50:	ldr	w10, [x9, #8]
     e54:	cbnz	w10, e60 <BZ2_decompress+0xe60>
     e58:	stur	wzr, [x29, #-24]
     e5c:	b	55a0 <BZ2_decompress+0x55a0>
     e60:	ldr	x8, [sp, #32]
     e64:	ldr	x9, [x8, #136]
     e68:	ldr	w10, [x9, #32]
     e6c:	ldr	x9, [x8, #136]
     e70:	ldr	x9, [x9]
     e74:	ldr	x9, [x9]
     e78:	ldrb	w11, [x9]
     e7c:	orr	w10, w11, w10, lsl #8
     e80:	ldr	x9, [x8, #136]
     e84:	str	w10, [x9, #32]
     e88:	ldr	x9, [x8, #136]
     e8c:	ldr	w10, [x9, #36]
     e90:	add	w10, w10, #0x8
     e94:	str	w10, [x9, #36]
     e98:	ldr	x9, [x8, #136]
     e9c:	ldr	x9, [x9]
     ea0:	ldr	x12, [x9]
     ea4:	add	x12, x12, #0x1
     ea8:	str	x12, [x9]
     eac:	ldr	x9, [x8, #136]
     eb0:	ldr	x9, [x9]
     eb4:	ldr	w10, [x9, #8]
     eb8:	subs	w10, w10, #0x1
     ebc:	str	w10, [x9, #8]
     ec0:	ldr	x9, [x8, #136]
     ec4:	ldr	x9, [x9]
     ec8:	ldr	w10, [x9, #12]
     ecc:	add	w10, w10, #0x1
     ed0:	str	w10, [x9, #12]
     ed4:	ldr	x9, [x8, #136]
     ed8:	ldr	x9, [x9]
     edc:	ldr	w10, [x9, #12]
     ee0:	cbnz	w10, efc <BZ2_decompress+0xefc>
     ee4:	ldr	x8, [sp, #32]
     ee8:	ldr	x9, [x8, #136]
     eec:	ldr	x9, [x9]
     ef0:	ldr	w10, [x9, #16]
     ef4:	add	w10, w10, #0x1
     ef8:	str	w10, [x9, #16]
     efc:	b	df0 <BZ2_decompress+0xdf0>
     f00:	ldurb	w8, [x29, #-17]
     f04:	cmp	w8, #0x26
     f08:	b.eq	f18 <BZ2_decompress+0xf18>  // b.none
     f0c:	mov	w8, #0xfffffffc            	// #-4
     f10:	stur	w8, [x29, #-24]
     f14:	b	55a0 <BZ2_decompress+0x55a0>
     f18:	ldr	x8, [sp, #32]
     f1c:	ldr	x9, [x8, #136]
     f20:	mov	w10, #0x12                  	// #18
     f24:	str	w10, [x9, #8]
     f28:	ldr	x8, [sp, #32]
     f2c:	ldr	x9, [x8, #136]
     f30:	ldr	w10, [x9, #36]
     f34:	cmp	w10, #0x8
     f38:	b.lt	f7c <BZ2_decompress+0xf7c>  // b.tstop
     f3c:	ldr	x8, [sp, #32]
     f40:	ldr	x9, [x8, #136]
     f44:	ldr	w10, [x9, #32]
     f48:	ldr	x9, [x8, #136]
     f4c:	ldr	w11, [x9, #36]
     f50:	subs	w11, w11, #0x8
     f54:	lsr	w10, w10, w11
     f58:	and	w10, w10, #0xff
     f5c:	stur	w10, [x29, #-188]
     f60:	ldr	x9, [x8, #136]
     f64:	ldr	w10, [x9, #36]
     f68:	subs	w10, w10, #0x8
     f6c:	str	w10, [x9, #36]
     f70:	ldur	w10, [x29, #-188]
     f74:	sturb	w10, [x29, #-17]
     f78:	b	1038 <BZ2_decompress+0x1038>
     f7c:	ldr	x8, [sp, #32]
     f80:	ldr	x9, [x8, #136]
     f84:	ldr	x9, [x9]
     f88:	ldr	w10, [x9, #8]
     f8c:	cbnz	w10, f98 <BZ2_decompress+0xf98>
     f90:	stur	wzr, [x29, #-24]
     f94:	b	55a0 <BZ2_decompress+0x55a0>
     f98:	ldr	x8, [sp, #32]
     f9c:	ldr	x9, [x8, #136]
     fa0:	ldr	w10, [x9, #32]
     fa4:	ldr	x9, [x8, #136]
     fa8:	ldr	x9, [x9]
     fac:	ldr	x9, [x9]
     fb0:	ldrb	w11, [x9]
     fb4:	orr	w10, w11, w10, lsl #8
     fb8:	ldr	x9, [x8, #136]
     fbc:	str	w10, [x9, #32]
     fc0:	ldr	x9, [x8, #136]
     fc4:	ldr	w10, [x9, #36]
     fc8:	add	w10, w10, #0x8
     fcc:	str	w10, [x9, #36]
     fd0:	ldr	x9, [x8, #136]
     fd4:	ldr	x9, [x9]
     fd8:	ldr	x12, [x9]
     fdc:	add	x12, x12, #0x1
     fe0:	str	x12, [x9]
     fe4:	ldr	x9, [x8, #136]
     fe8:	ldr	x9, [x9]
     fec:	ldr	w10, [x9, #8]
     ff0:	subs	w10, w10, #0x1
     ff4:	str	w10, [x9, #8]
     ff8:	ldr	x9, [x8, #136]
     ffc:	ldr	x9, [x9]
    1000:	ldr	w10, [x9, #12]
    1004:	add	w10, w10, #0x1
    1008:	str	w10, [x9, #12]
    100c:	ldr	x9, [x8, #136]
    1010:	ldr	x9, [x9]
    1014:	ldr	w10, [x9, #12]
    1018:	cbnz	w10, 1034 <BZ2_decompress+0x1034>
    101c:	ldr	x8, [sp, #32]
    1020:	ldr	x9, [x8, #136]
    1024:	ldr	x9, [x9]
    1028:	ldr	w10, [x9, #16]
    102c:	add	w10, w10, #0x1
    1030:	str	w10, [x9, #16]
    1034:	b	f28 <BZ2_decompress+0xf28>
    1038:	ldurb	w8, [x29, #-17]
    103c:	cmp	w8, #0x53
    1040:	b.eq	1050 <BZ2_decompress+0x1050>  // b.none
    1044:	mov	w8, #0xfffffffc            	// #-4
    1048:	stur	w8, [x29, #-24]
    104c:	b	55a0 <BZ2_decompress+0x55a0>
    1050:	ldr	x8, [sp, #32]
    1054:	ldr	x9, [x8, #136]
    1058:	mov	w10, #0x13                  	// #19
    105c:	str	w10, [x9, #8]
    1060:	ldr	x8, [sp, #32]
    1064:	ldr	x9, [x8, #136]
    1068:	ldr	w10, [x9, #36]
    106c:	cmp	w10, #0x8
    1070:	b.lt	10b4 <BZ2_decompress+0x10b4>  // b.tstop
    1074:	ldr	x8, [sp, #32]
    1078:	ldr	x9, [x8, #136]
    107c:	ldr	w10, [x9, #32]
    1080:	ldr	x9, [x8, #136]
    1084:	ldr	w11, [x9, #36]
    1088:	subs	w11, w11, #0x8
    108c:	lsr	w10, w10, w11
    1090:	and	w10, w10, #0xff
    1094:	stur	w10, [x29, #-192]
    1098:	ldr	x9, [x8, #136]
    109c:	ldr	w10, [x9, #36]
    10a0:	subs	w10, w10, #0x8
    10a4:	str	w10, [x9, #36]
    10a8:	ldur	w10, [x29, #-192]
    10ac:	sturb	w10, [x29, #-17]
    10b0:	b	1170 <BZ2_decompress+0x1170>
    10b4:	ldr	x8, [sp, #32]
    10b8:	ldr	x9, [x8, #136]
    10bc:	ldr	x9, [x9]
    10c0:	ldr	w10, [x9, #8]
    10c4:	cbnz	w10, 10d0 <BZ2_decompress+0x10d0>
    10c8:	stur	wzr, [x29, #-24]
    10cc:	b	55a0 <BZ2_decompress+0x55a0>
    10d0:	ldr	x8, [sp, #32]
    10d4:	ldr	x9, [x8, #136]
    10d8:	ldr	w10, [x9, #32]
    10dc:	ldr	x9, [x8, #136]
    10e0:	ldr	x9, [x9]
    10e4:	ldr	x9, [x9]
    10e8:	ldrb	w11, [x9]
    10ec:	orr	w10, w11, w10, lsl #8
    10f0:	ldr	x9, [x8, #136]
    10f4:	str	w10, [x9, #32]
    10f8:	ldr	x9, [x8, #136]
    10fc:	ldr	w10, [x9, #36]
    1100:	add	w10, w10, #0x8
    1104:	str	w10, [x9, #36]
    1108:	ldr	x9, [x8, #136]
    110c:	ldr	x9, [x9]
    1110:	ldr	x12, [x9]
    1114:	add	x12, x12, #0x1
    1118:	str	x12, [x9]
    111c:	ldr	x9, [x8, #136]
    1120:	ldr	x9, [x9]
    1124:	ldr	w10, [x9, #8]
    1128:	subs	w10, w10, #0x1
    112c:	str	w10, [x9, #8]
    1130:	ldr	x9, [x8, #136]
    1134:	ldr	x9, [x9]
    1138:	ldr	w10, [x9, #12]
    113c:	add	w10, w10, #0x1
    1140:	str	w10, [x9, #12]
    1144:	ldr	x9, [x8, #136]
    1148:	ldr	x9, [x9]
    114c:	ldr	w10, [x9, #12]
    1150:	cbnz	w10, 116c <BZ2_decompress+0x116c>
    1154:	ldr	x8, [sp, #32]
    1158:	ldr	x9, [x8, #136]
    115c:	ldr	x9, [x9]
    1160:	ldr	w10, [x9, #16]
    1164:	add	w10, w10, #0x1
    1168:	str	w10, [x9, #16]
    116c:	b	1060 <BZ2_decompress+0x1060>
    1170:	ldurb	w8, [x29, #-17]
    1174:	cmp	w8, #0x59
    1178:	b.eq	1188 <BZ2_decompress+0x1188>  // b.none
    117c:	mov	w8, #0xfffffffc            	// #-4
    1180:	stur	w8, [x29, #-24]
    1184:	b	55a0 <BZ2_decompress+0x55a0>
    1188:	ldr	x8, [sp, #32]
    118c:	ldr	x9, [x8, #136]
    1190:	ldr	w10, [x9, #48]
    1194:	add	w10, w10, #0x1
    1198:	str	w10, [x9, #48]
    119c:	ldr	x9, [x8, #136]
    11a0:	ldr	w10, [x9, #52]
    11a4:	cmp	w10, #0x2
    11a8:	b.lt	11d0 <BZ2_decompress+0x11d0>  // b.tstop
    11ac:	adrp	x8, 0 <stderr>
    11b0:	add	x8, x8, #0x0
    11b4:	ldr	x0, [x8]
    11b8:	ldr	x8, [sp, #32]
    11bc:	ldr	x9, [x8, #136]
    11c0:	ldr	w2, [x9, #48]
    11c4:	adrp	x1, 0 <BZ2_decompress>
    11c8:	add	x1, x1, #0x0
    11cc:	bl	0 <fprintf>
    11d0:	ldr	x8, [sp, #32]
    11d4:	ldr	x9, [x8, #136]
    11d8:	str	wzr, [x9, #3176]
    11dc:	ldr	x8, [sp, #32]
    11e0:	ldr	x9, [x8, #136]
    11e4:	mov	w10, #0x14                  	// #20
    11e8:	str	w10, [x9, #8]
    11ec:	ldr	x8, [sp, #32]
    11f0:	ldr	x9, [x8, #136]
    11f4:	ldr	w10, [x9, #36]
    11f8:	cmp	w10, #0x8
    11fc:	b.lt	1240 <BZ2_decompress+0x1240>  // b.tstop
    1200:	ldr	x8, [sp, #32]
    1204:	ldr	x9, [x8, #136]
    1208:	ldr	w10, [x9, #32]
    120c:	ldr	x9, [x8, #136]
    1210:	ldr	w11, [x9, #36]
    1214:	subs	w11, w11, #0x8
    1218:	lsr	w10, w10, w11
    121c:	and	w10, w10, #0xff
    1220:	stur	w10, [x29, #-196]
    1224:	ldr	x9, [x8, #136]
    1228:	ldr	w10, [x9, #36]
    122c:	subs	w10, w10, #0x8
    1230:	str	w10, [x9, #36]
    1234:	ldur	w10, [x29, #-196]
    1238:	sturb	w10, [x29, #-17]
    123c:	b	12fc <BZ2_decompress+0x12fc>
    1240:	ldr	x8, [sp, #32]
    1244:	ldr	x9, [x8, #136]
    1248:	ldr	x9, [x9]
    124c:	ldr	w10, [x9, #8]
    1250:	cbnz	w10, 125c <BZ2_decompress+0x125c>
    1254:	stur	wzr, [x29, #-24]
    1258:	b	55a0 <BZ2_decompress+0x55a0>
    125c:	ldr	x8, [sp, #32]
    1260:	ldr	x9, [x8, #136]
    1264:	ldr	w10, [x9, #32]
    1268:	ldr	x9, [x8, #136]
    126c:	ldr	x9, [x9]
    1270:	ldr	x9, [x9]
    1274:	ldrb	w11, [x9]
    1278:	orr	w10, w11, w10, lsl #8
    127c:	ldr	x9, [x8, #136]
    1280:	str	w10, [x9, #32]
    1284:	ldr	x9, [x8, #136]
    1288:	ldr	w10, [x9, #36]
    128c:	add	w10, w10, #0x8
    1290:	str	w10, [x9, #36]
    1294:	ldr	x9, [x8, #136]
    1298:	ldr	x9, [x9]
    129c:	ldr	x12, [x9]
    12a0:	add	x12, x12, #0x1
    12a4:	str	x12, [x9]
    12a8:	ldr	x9, [x8, #136]
    12ac:	ldr	x9, [x9]
    12b0:	ldr	w10, [x9, #8]
    12b4:	subs	w10, w10, #0x1
    12b8:	str	w10, [x9, #8]
    12bc:	ldr	x9, [x8, #136]
    12c0:	ldr	x9, [x9]
    12c4:	ldr	w10, [x9, #12]
    12c8:	add	w10, w10, #0x1
    12cc:	str	w10, [x9, #12]
    12d0:	ldr	x9, [x8, #136]
    12d4:	ldr	x9, [x9]
    12d8:	ldr	w10, [x9, #12]
    12dc:	cbnz	w10, 12f8 <BZ2_decompress+0x12f8>
    12e0:	ldr	x8, [sp, #32]
    12e4:	ldr	x9, [x8, #136]
    12e8:	ldr	x9, [x9]
    12ec:	ldr	w10, [x9, #16]
    12f0:	add	w10, w10, #0x1
    12f4:	str	w10, [x9, #16]
    12f8:	b	11ec <BZ2_decompress+0x11ec>
    12fc:	ldr	x8, [sp, #32]
    1300:	ldr	x9, [x8, #136]
    1304:	ldr	w10, [x9, #3176]
    1308:	ldurb	w11, [x29, #-17]
    130c:	orr	w10, w11, w10, lsl #8
    1310:	ldr	x9, [x8, #136]
    1314:	str	w10, [x9, #3176]
    1318:	ldr	x8, [sp, #32]
    131c:	ldr	x9, [x8, #136]
    1320:	mov	w10, #0x15                  	// #21
    1324:	str	w10, [x9, #8]
    1328:	ldr	x8, [sp, #32]
    132c:	ldr	x9, [x8, #136]
    1330:	ldr	w10, [x9, #36]
    1334:	cmp	w10, #0x8
    1338:	b.lt	137c <BZ2_decompress+0x137c>  // b.tstop
    133c:	ldr	x8, [sp, #32]
    1340:	ldr	x9, [x8, #136]
    1344:	ldr	w10, [x9, #32]
    1348:	ldr	x9, [x8, #136]
    134c:	ldr	w11, [x9, #36]
    1350:	subs	w11, w11, #0x8
    1354:	lsr	w10, w10, w11
    1358:	and	w10, w10, #0xff
    135c:	stur	w10, [x29, #-200]
    1360:	ldr	x9, [x8, #136]
    1364:	ldr	w10, [x9, #36]
    1368:	subs	w10, w10, #0x8
    136c:	str	w10, [x9, #36]
    1370:	ldur	w10, [x29, #-200]
    1374:	sturb	w10, [x29, #-17]
    1378:	b	1438 <BZ2_decompress+0x1438>
    137c:	ldr	x8, [sp, #32]
    1380:	ldr	x9, [x8, #136]
    1384:	ldr	x9, [x9]
    1388:	ldr	w10, [x9, #8]
    138c:	cbnz	w10, 1398 <BZ2_decompress+0x1398>
    1390:	stur	wzr, [x29, #-24]
    1394:	b	55a0 <BZ2_decompress+0x55a0>
    1398:	ldr	x8, [sp, #32]
    139c:	ldr	x9, [x8, #136]
    13a0:	ldr	w10, [x9, #32]
    13a4:	ldr	x9, [x8, #136]
    13a8:	ldr	x9, [x9]
    13ac:	ldr	x9, [x9]
    13b0:	ldrb	w11, [x9]
    13b4:	orr	w10, w11, w10, lsl #8
    13b8:	ldr	x9, [x8, #136]
    13bc:	str	w10, [x9, #32]
    13c0:	ldr	x9, [x8, #136]
    13c4:	ldr	w10, [x9, #36]
    13c8:	add	w10, w10, #0x8
    13cc:	str	w10, [x9, #36]
    13d0:	ldr	x9, [x8, #136]
    13d4:	ldr	x9, [x9]
    13d8:	ldr	x12, [x9]
    13dc:	add	x12, x12, #0x1
    13e0:	str	x12, [x9]
    13e4:	ldr	x9, [x8, #136]
    13e8:	ldr	x9, [x9]
    13ec:	ldr	w10, [x9, #8]
    13f0:	subs	w10, w10, #0x1
    13f4:	str	w10, [x9, #8]
    13f8:	ldr	x9, [x8, #136]
    13fc:	ldr	x9, [x9]
    1400:	ldr	w10, [x9, #12]
    1404:	add	w10, w10, #0x1
    1408:	str	w10, [x9, #12]
    140c:	ldr	x9, [x8, #136]
    1410:	ldr	x9, [x9]
    1414:	ldr	w10, [x9, #12]
    1418:	cbnz	w10, 1434 <BZ2_decompress+0x1434>
    141c:	ldr	x8, [sp, #32]
    1420:	ldr	x9, [x8, #136]
    1424:	ldr	x9, [x9]
    1428:	ldr	w10, [x9, #16]
    142c:	add	w10, w10, #0x1
    1430:	str	w10, [x9, #16]
    1434:	b	1328 <BZ2_decompress+0x1328>
    1438:	ldr	x8, [sp, #32]
    143c:	ldr	x9, [x8, #136]
    1440:	ldr	w10, [x9, #3176]
    1444:	ldurb	w11, [x29, #-17]
    1448:	orr	w10, w11, w10, lsl #8
    144c:	ldr	x9, [x8, #136]
    1450:	str	w10, [x9, #3176]
    1454:	ldr	x8, [sp, #32]
    1458:	ldr	x9, [x8, #136]
    145c:	mov	w10, #0x16                  	// #22
    1460:	str	w10, [x9, #8]
    1464:	ldr	x8, [sp, #32]
    1468:	ldr	x9, [x8, #136]
    146c:	ldr	w10, [x9, #36]
    1470:	cmp	w10, #0x8
    1474:	b.lt	14b8 <BZ2_decompress+0x14b8>  // b.tstop
    1478:	ldr	x8, [sp, #32]
    147c:	ldr	x9, [x8, #136]
    1480:	ldr	w10, [x9, #32]
    1484:	ldr	x9, [x8, #136]
    1488:	ldr	w11, [x9, #36]
    148c:	subs	w11, w11, #0x8
    1490:	lsr	w10, w10, w11
    1494:	and	w10, w10, #0xff
    1498:	stur	w10, [x29, #-204]
    149c:	ldr	x9, [x8, #136]
    14a0:	ldr	w10, [x9, #36]
    14a4:	subs	w10, w10, #0x8
    14a8:	str	w10, [x9, #36]
    14ac:	ldur	w10, [x29, #-204]
    14b0:	sturb	w10, [x29, #-17]
    14b4:	b	1574 <BZ2_decompress+0x1574>
    14b8:	ldr	x8, [sp, #32]
    14bc:	ldr	x9, [x8, #136]
    14c0:	ldr	x9, [x9]
    14c4:	ldr	w10, [x9, #8]
    14c8:	cbnz	w10, 14d4 <BZ2_decompress+0x14d4>
    14cc:	stur	wzr, [x29, #-24]
    14d0:	b	55a0 <BZ2_decompress+0x55a0>
    14d4:	ldr	x8, [sp, #32]
    14d8:	ldr	x9, [x8, #136]
    14dc:	ldr	w10, [x9, #32]
    14e0:	ldr	x9, [x8, #136]
    14e4:	ldr	x9, [x9]
    14e8:	ldr	x9, [x9]
    14ec:	ldrb	w11, [x9]
    14f0:	orr	w10, w11, w10, lsl #8
    14f4:	ldr	x9, [x8, #136]
    14f8:	str	w10, [x9, #32]
    14fc:	ldr	x9, [x8, #136]
    1500:	ldr	w10, [x9, #36]
    1504:	add	w10, w10, #0x8
    1508:	str	w10, [x9, #36]
    150c:	ldr	x9, [x8, #136]
    1510:	ldr	x9, [x9]
    1514:	ldr	x12, [x9]
    1518:	add	x12, x12, #0x1
    151c:	str	x12, [x9]
    1520:	ldr	x9, [x8, #136]
    1524:	ldr	x9, [x9]
    1528:	ldr	w10, [x9, #8]
    152c:	subs	w10, w10, #0x1
    1530:	str	w10, [x9, #8]
    1534:	ldr	x9, [x8, #136]
    1538:	ldr	x9, [x9]
    153c:	ldr	w10, [x9, #12]
    1540:	add	w10, w10, #0x1
    1544:	str	w10, [x9, #12]
    1548:	ldr	x9, [x8, #136]
    154c:	ldr	x9, [x9]
    1550:	ldr	w10, [x9, #12]
    1554:	cbnz	w10, 1570 <BZ2_decompress+0x1570>
    1558:	ldr	x8, [sp, #32]
    155c:	ldr	x9, [x8, #136]
    1560:	ldr	x9, [x9]
    1564:	ldr	w10, [x9, #16]
    1568:	add	w10, w10, #0x1
    156c:	str	w10, [x9, #16]
    1570:	b	1464 <BZ2_decompress+0x1464>
    1574:	ldr	x8, [sp, #32]
    1578:	ldr	x9, [x8, #136]
    157c:	ldr	w10, [x9, #3176]
    1580:	ldurb	w11, [x29, #-17]
    1584:	orr	w10, w11, w10, lsl #8
    1588:	ldr	x9, [x8, #136]
    158c:	str	w10, [x9, #3176]
    1590:	ldr	x8, [sp, #32]
    1594:	ldr	x9, [x8, #136]
    1598:	mov	w10, #0x17                  	// #23
    159c:	str	w10, [x9, #8]
    15a0:	ldr	x8, [sp, #32]
    15a4:	ldr	x9, [x8, #136]
    15a8:	ldr	w10, [x9, #36]
    15ac:	cmp	w10, #0x8
    15b0:	b.lt	15f4 <BZ2_decompress+0x15f4>  // b.tstop
    15b4:	ldr	x8, [sp, #32]
    15b8:	ldr	x9, [x8, #136]
    15bc:	ldr	w10, [x9, #32]
    15c0:	ldr	x9, [x8, #136]
    15c4:	ldr	w11, [x9, #36]
    15c8:	subs	w11, w11, #0x8
    15cc:	lsr	w10, w10, w11
    15d0:	and	w10, w10, #0xff
    15d4:	str	w10, [sp, #208]
    15d8:	ldr	x9, [x8, #136]
    15dc:	ldr	w10, [x9, #36]
    15e0:	subs	w10, w10, #0x8
    15e4:	str	w10, [x9, #36]
    15e8:	ldr	w10, [sp, #208]
    15ec:	sturb	w10, [x29, #-17]
    15f0:	b	16b0 <BZ2_decompress+0x16b0>
    15f4:	ldr	x8, [sp, #32]
    15f8:	ldr	x9, [x8, #136]
    15fc:	ldr	x9, [x9]
    1600:	ldr	w10, [x9, #8]
    1604:	cbnz	w10, 1610 <BZ2_decompress+0x1610>
    1608:	stur	wzr, [x29, #-24]
    160c:	b	55a0 <BZ2_decompress+0x55a0>
    1610:	ldr	x8, [sp, #32]
    1614:	ldr	x9, [x8, #136]
    1618:	ldr	w10, [x9, #32]
    161c:	ldr	x9, [x8, #136]
    1620:	ldr	x9, [x9]
    1624:	ldr	x9, [x9]
    1628:	ldrb	w11, [x9]
    162c:	orr	w10, w11, w10, lsl #8
    1630:	ldr	x9, [x8, #136]
    1634:	str	w10, [x9, #32]
    1638:	ldr	x9, [x8, #136]
    163c:	ldr	w10, [x9, #36]
    1640:	add	w10, w10, #0x8
    1644:	str	w10, [x9, #36]
    1648:	ldr	x9, [x8, #136]
    164c:	ldr	x9, [x9]
    1650:	ldr	x12, [x9]
    1654:	add	x12, x12, #0x1
    1658:	str	x12, [x9]
    165c:	ldr	x9, [x8, #136]
    1660:	ldr	x9, [x9]
    1664:	ldr	w10, [x9, #8]
    1668:	subs	w10, w10, #0x1
    166c:	str	w10, [x9, #8]
    1670:	ldr	x9, [x8, #136]
    1674:	ldr	x9, [x9]
    1678:	ldr	w10, [x9, #12]
    167c:	add	w10, w10, #0x1
    1680:	str	w10, [x9, #12]
    1684:	ldr	x9, [x8, #136]
    1688:	ldr	x9, [x9]
    168c:	ldr	w10, [x9, #12]
    1690:	cbnz	w10, 16ac <BZ2_decompress+0x16ac>
    1694:	ldr	x8, [sp, #32]
    1698:	ldr	x9, [x8, #136]
    169c:	ldr	x9, [x9]
    16a0:	ldr	w10, [x9, #16]
    16a4:	add	w10, w10, #0x1
    16a8:	str	w10, [x9, #16]
    16ac:	b	15a0 <BZ2_decompress+0x15a0>
    16b0:	ldr	x8, [sp, #32]
    16b4:	ldr	x9, [x8, #136]
    16b8:	ldr	w10, [x9, #3176]
    16bc:	ldurb	w11, [x29, #-17]
    16c0:	orr	w10, w11, w10, lsl #8
    16c4:	ldr	x9, [x8, #136]
    16c8:	str	w10, [x9, #3176]
    16cc:	ldr	x8, [sp, #32]
    16d0:	ldr	x9, [x8, #136]
    16d4:	mov	w10, #0x18                  	// #24
    16d8:	str	w10, [x9, #8]
    16dc:	ldr	x8, [sp, #32]
    16e0:	ldr	x9, [x8, #136]
    16e4:	ldr	w10, [x9, #36]
    16e8:	cmp	w10, #0x1
    16ec:	b.lt	1734 <BZ2_decompress+0x1734>  // b.tstop
    16f0:	ldr	x8, [sp, #32]
    16f4:	ldr	x9, [x8, #136]
    16f8:	ldr	w10, [x9, #32]
    16fc:	ldr	x9, [x8, #136]
    1700:	ldr	w11, [x9, #36]
    1704:	subs	w11, w11, #0x1
    1708:	lsr	w10, w10, w11
    170c:	and	w10, w10, #0x1
    1710:	str	w10, [sp, #204]
    1714:	ldr	x9, [x8, #136]
    1718:	ldr	w10, [x9, #36]
    171c:	subs	w10, w10, #0x1
    1720:	str	w10, [x9, #36]
    1724:	ldr	w10, [sp, #204]
    1728:	ldr	x9, [x8, #136]
    172c:	strb	w10, [x9, #20]
    1730:	b	17f0 <BZ2_decompress+0x17f0>
    1734:	ldr	x8, [sp, #32]
    1738:	ldr	x9, [x8, #136]
    173c:	ldr	x9, [x9]
    1740:	ldr	w10, [x9, #8]
    1744:	cbnz	w10, 1750 <BZ2_decompress+0x1750>
    1748:	stur	wzr, [x29, #-24]
    174c:	b	55a0 <BZ2_decompress+0x55a0>
    1750:	ldr	x8, [sp, #32]
    1754:	ldr	x9, [x8, #136]
    1758:	ldr	w10, [x9, #32]
    175c:	ldr	x9, [x8, #136]
    1760:	ldr	x9, [x9]
    1764:	ldr	x9, [x9]
    1768:	ldrb	w11, [x9]
    176c:	orr	w10, w11, w10, lsl #8
    1770:	ldr	x9, [x8, #136]
    1774:	str	w10, [x9, #32]
    1778:	ldr	x9, [x8, #136]
    177c:	ldr	w10, [x9, #36]
    1780:	add	w10, w10, #0x8
    1784:	str	w10, [x9, #36]
    1788:	ldr	x9, [x8, #136]
    178c:	ldr	x9, [x9]
    1790:	ldr	x12, [x9]
    1794:	add	x12, x12, #0x1
    1798:	str	x12, [x9]
    179c:	ldr	x9, [x8, #136]
    17a0:	ldr	x9, [x9]
    17a4:	ldr	w10, [x9, #8]
    17a8:	subs	w10, w10, #0x1
    17ac:	str	w10, [x9, #8]
    17b0:	ldr	x9, [x8, #136]
    17b4:	ldr	x9, [x9]
    17b8:	ldr	w10, [x9, #12]
    17bc:	add	w10, w10, #0x1
    17c0:	str	w10, [x9, #12]
    17c4:	ldr	x9, [x8, #136]
    17c8:	ldr	x9, [x9]
    17cc:	ldr	w10, [x9, #12]
    17d0:	cbnz	w10, 17ec <BZ2_decompress+0x17ec>
    17d4:	ldr	x8, [sp, #32]
    17d8:	ldr	x9, [x8, #136]
    17dc:	ldr	x9, [x9]
    17e0:	ldr	w10, [x9, #16]
    17e4:	add	w10, w10, #0x1
    17e8:	str	w10, [x9, #16]
    17ec:	b	16dc <BZ2_decompress+0x16dc>
    17f0:	ldr	x8, [sp, #32]
    17f4:	ldr	x9, [x8, #136]
    17f8:	str	wzr, [x9, #56]
    17fc:	ldr	x8, [sp, #32]
    1800:	ldr	x9, [x8, #136]
    1804:	mov	w10, #0x19                  	// #25
    1808:	str	w10, [x9, #8]
    180c:	ldr	x8, [sp, #32]
    1810:	ldr	x9, [x8, #136]
    1814:	ldr	w10, [x9, #36]
    1818:	cmp	w10, #0x8
    181c:	b.lt	1860 <BZ2_decompress+0x1860>  // b.tstop
    1820:	ldr	x8, [sp, #32]
    1824:	ldr	x9, [x8, #136]
    1828:	ldr	w10, [x9, #32]
    182c:	ldr	x9, [x8, #136]
    1830:	ldr	w11, [x9, #36]
    1834:	subs	w11, w11, #0x8
    1838:	lsr	w10, w10, w11
    183c:	and	w10, w10, #0xff
    1840:	str	w10, [sp, #200]
    1844:	ldr	x9, [x8, #136]
    1848:	ldr	w10, [x9, #36]
    184c:	subs	w10, w10, #0x8
    1850:	str	w10, [x9, #36]
    1854:	ldr	w10, [sp, #200]
    1858:	sturb	w10, [x29, #-17]
    185c:	b	191c <BZ2_decompress+0x191c>
    1860:	ldr	x8, [sp, #32]
    1864:	ldr	x9, [x8, #136]
    1868:	ldr	x9, [x9]
    186c:	ldr	w10, [x9, #8]
    1870:	cbnz	w10, 187c <BZ2_decompress+0x187c>
    1874:	stur	wzr, [x29, #-24]
    1878:	b	55a0 <BZ2_decompress+0x55a0>
    187c:	ldr	x8, [sp, #32]
    1880:	ldr	x9, [x8, #136]
    1884:	ldr	w10, [x9, #32]
    1888:	ldr	x9, [x8, #136]
    188c:	ldr	x9, [x9]
    1890:	ldr	x9, [x9]
    1894:	ldrb	w11, [x9]
    1898:	orr	w10, w11, w10, lsl #8
    189c:	ldr	x9, [x8, #136]
    18a0:	str	w10, [x9, #32]
    18a4:	ldr	x9, [x8, #136]
    18a8:	ldr	w10, [x9, #36]
    18ac:	add	w10, w10, #0x8
    18b0:	str	w10, [x9, #36]
    18b4:	ldr	x9, [x8, #136]
    18b8:	ldr	x9, [x9]
    18bc:	ldr	x12, [x9]
    18c0:	add	x12, x12, #0x1
    18c4:	str	x12, [x9]
    18c8:	ldr	x9, [x8, #136]
    18cc:	ldr	x9, [x9]
    18d0:	ldr	w10, [x9, #8]
    18d4:	subs	w10, w10, #0x1
    18d8:	str	w10, [x9, #8]
    18dc:	ldr	x9, [x8, #136]
    18e0:	ldr	x9, [x9]
    18e4:	ldr	w10, [x9, #12]
    18e8:	add	w10, w10, #0x1
    18ec:	str	w10, [x9, #12]
    18f0:	ldr	x9, [x8, #136]
    18f4:	ldr	x9, [x9]
    18f8:	ldr	w10, [x9, #12]
    18fc:	cbnz	w10, 1918 <BZ2_decompress+0x1918>
    1900:	ldr	x8, [sp, #32]
    1904:	ldr	x9, [x8, #136]
    1908:	ldr	x9, [x9]
    190c:	ldr	w10, [x9, #16]
    1910:	add	w10, w10, #0x1
    1914:	str	w10, [x9, #16]
    1918:	b	180c <BZ2_decompress+0x180c>
    191c:	ldr	x8, [sp, #32]
    1920:	ldr	x9, [x8, #136]
    1924:	ldr	w10, [x9, #56]
    1928:	ldurb	w11, [x29, #-17]
    192c:	orr	w10, w11, w10, lsl #8
    1930:	ldr	x9, [x8, #136]
    1934:	str	w10, [x9, #56]
    1938:	ldr	x8, [sp, #32]
    193c:	ldr	x9, [x8, #136]
    1940:	mov	w10, #0x1a                  	// #26
    1944:	str	w10, [x9, #8]
    1948:	ldr	x8, [sp, #32]
    194c:	ldr	x9, [x8, #136]
    1950:	ldr	w10, [x9, #36]
    1954:	cmp	w10, #0x8
    1958:	b.lt	199c <BZ2_decompress+0x199c>  // b.tstop
    195c:	ldr	x8, [sp, #32]
    1960:	ldr	x9, [x8, #136]
    1964:	ldr	w10, [x9, #32]
    1968:	ldr	x9, [x8, #136]
    196c:	ldr	w11, [x9, #36]
    1970:	subs	w11, w11, #0x8
    1974:	lsr	w10, w10, w11
    1978:	and	w10, w10, #0xff
    197c:	str	w10, [sp, #196]
    1980:	ldr	x9, [x8, #136]
    1984:	ldr	w10, [x9, #36]
    1988:	subs	w10, w10, #0x8
    198c:	str	w10, [x9, #36]
    1990:	ldr	w10, [sp, #196]
    1994:	sturb	w10, [x29, #-17]
    1998:	b	1a58 <BZ2_decompress+0x1a58>
    199c:	ldr	x8, [sp, #32]
    19a0:	ldr	x9, [x8, #136]
    19a4:	ldr	x9, [x9]
    19a8:	ldr	w10, [x9, #8]
    19ac:	cbnz	w10, 19b8 <BZ2_decompress+0x19b8>
    19b0:	stur	wzr, [x29, #-24]
    19b4:	b	55a0 <BZ2_decompress+0x55a0>
    19b8:	ldr	x8, [sp, #32]
    19bc:	ldr	x9, [x8, #136]
    19c0:	ldr	w10, [x9, #32]
    19c4:	ldr	x9, [x8, #136]
    19c8:	ldr	x9, [x9]
    19cc:	ldr	x9, [x9]
    19d0:	ldrb	w11, [x9]
    19d4:	orr	w10, w11, w10, lsl #8
    19d8:	ldr	x9, [x8, #136]
    19dc:	str	w10, [x9, #32]
    19e0:	ldr	x9, [x8, #136]
    19e4:	ldr	w10, [x9, #36]
    19e8:	add	w10, w10, #0x8
    19ec:	str	w10, [x9, #36]
    19f0:	ldr	x9, [x8, #136]
    19f4:	ldr	x9, [x9]
    19f8:	ldr	x12, [x9]
    19fc:	add	x12, x12, #0x1
    1a00:	str	x12, [x9]
    1a04:	ldr	x9, [x8, #136]
    1a08:	ldr	x9, [x9]
    1a0c:	ldr	w10, [x9, #8]
    1a10:	subs	w10, w10, #0x1
    1a14:	str	w10, [x9, #8]
    1a18:	ldr	x9, [x8, #136]
    1a1c:	ldr	x9, [x9]
    1a20:	ldr	w10, [x9, #12]
    1a24:	add	w10, w10, #0x1
    1a28:	str	w10, [x9, #12]
    1a2c:	ldr	x9, [x8, #136]
    1a30:	ldr	x9, [x9]
    1a34:	ldr	w10, [x9, #12]
    1a38:	cbnz	w10, 1a54 <BZ2_decompress+0x1a54>
    1a3c:	ldr	x8, [sp, #32]
    1a40:	ldr	x9, [x8, #136]
    1a44:	ldr	x9, [x9]
    1a48:	ldr	w10, [x9, #16]
    1a4c:	add	w10, w10, #0x1
    1a50:	str	w10, [x9, #16]
    1a54:	b	1948 <BZ2_decompress+0x1948>
    1a58:	ldr	x8, [sp, #32]
    1a5c:	ldr	x9, [x8, #136]
    1a60:	ldr	w10, [x9, #56]
    1a64:	ldurb	w11, [x29, #-17]
    1a68:	orr	w10, w11, w10, lsl #8
    1a6c:	ldr	x9, [x8, #136]
    1a70:	str	w10, [x9, #56]
    1a74:	ldr	x8, [sp, #32]
    1a78:	ldr	x9, [x8, #136]
    1a7c:	mov	w10, #0x1b                  	// #27
    1a80:	str	w10, [x9, #8]
    1a84:	ldr	x8, [sp, #32]
    1a88:	ldr	x9, [x8, #136]
    1a8c:	ldr	w10, [x9, #36]
    1a90:	cmp	w10, #0x8
    1a94:	b.lt	1ad8 <BZ2_decompress+0x1ad8>  // b.tstop
    1a98:	ldr	x8, [sp, #32]
    1a9c:	ldr	x9, [x8, #136]
    1aa0:	ldr	w10, [x9, #32]
    1aa4:	ldr	x9, [x8, #136]
    1aa8:	ldr	w11, [x9, #36]
    1aac:	subs	w11, w11, #0x8
    1ab0:	lsr	w10, w10, w11
    1ab4:	and	w10, w10, #0xff
    1ab8:	str	w10, [sp, #192]
    1abc:	ldr	x9, [x8, #136]
    1ac0:	ldr	w10, [x9, #36]
    1ac4:	subs	w10, w10, #0x8
    1ac8:	str	w10, [x9, #36]
    1acc:	ldr	w10, [sp, #192]
    1ad0:	sturb	w10, [x29, #-17]
    1ad4:	b	1b94 <BZ2_decompress+0x1b94>
    1ad8:	ldr	x8, [sp, #32]
    1adc:	ldr	x9, [x8, #136]
    1ae0:	ldr	x9, [x9]
    1ae4:	ldr	w10, [x9, #8]
    1ae8:	cbnz	w10, 1af4 <BZ2_decompress+0x1af4>
    1aec:	stur	wzr, [x29, #-24]
    1af0:	b	55a0 <BZ2_decompress+0x55a0>
    1af4:	ldr	x8, [sp, #32]
    1af8:	ldr	x9, [x8, #136]
    1afc:	ldr	w10, [x9, #32]
    1b00:	ldr	x9, [x8, #136]
    1b04:	ldr	x9, [x9]
    1b08:	ldr	x9, [x9]
    1b0c:	ldrb	w11, [x9]
    1b10:	orr	w10, w11, w10, lsl #8
    1b14:	ldr	x9, [x8, #136]
    1b18:	str	w10, [x9, #32]
    1b1c:	ldr	x9, [x8, #136]
    1b20:	ldr	w10, [x9, #36]
    1b24:	add	w10, w10, #0x8
    1b28:	str	w10, [x9, #36]
    1b2c:	ldr	x9, [x8, #136]
    1b30:	ldr	x9, [x9]
    1b34:	ldr	x12, [x9]
    1b38:	add	x12, x12, #0x1
    1b3c:	str	x12, [x9]
    1b40:	ldr	x9, [x8, #136]
    1b44:	ldr	x9, [x9]
    1b48:	ldr	w10, [x9, #8]
    1b4c:	subs	w10, w10, #0x1
    1b50:	str	w10, [x9, #8]
    1b54:	ldr	x9, [x8, #136]
    1b58:	ldr	x9, [x9]
    1b5c:	ldr	w10, [x9, #12]
    1b60:	add	w10, w10, #0x1
    1b64:	str	w10, [x9, #12]
    1b68:	ldr	x9, [x8, #136]
    1b6c:	ldr	x9, [x9]
    1b70:	ldr	w10, [x9, #12]
    1b74:	cbnz	w10, 1b90 <BZ2_decompress+0x1b90>
    1b78:	ldr	x8, [sp, #32]
    1b7c:	ldr	x9, [x8, #136]
    1b80:	ldr	x9, [x9]
    1b84:	ldr	w10, [x9, #16]
    1b88:	add	w10, w10, #0x1
    1b8c:	str	w10, [x9, #16]
    1b90:	b	1a84 <BZ2_decompress+0x1a84>
    1b94:	ldr	x8, [sp, #32]
    1b98:	ldr	x9, [x8, #136]
    1b9c:	ldr	w10, [x9, #56]
    1ba0:	ldurb	w11, [x29, #-17]
    1ba4:	orr	w10, w11, w10, lsl #8
    1ba8:	ldr	x9, [x8, #136]
    1bac:	str	w10, [x9, #56]
    1bb0:	ldr	x9, [x8, #136]
    1bb4:	ldr	w10, [x9, #56]
    1bb8:	cmp	w10, #0x0
    1bbc:	cset	w10, ge  // ge = tcont
    1bc0:	tbnz	w10, #0, 1bd0 <BZ2_decompress+0x1bd0>
    1bc4:	mov	w8, #0xfffffffc            	// #-4
    1bc8:	stur	w8, [x29, #-24]
    1bcc:	b	55a0 <BZ2_decompress+0x55a0>
    1bd0:	ldr	x8, [sp, #32]
    1bd4:	ldr	x9, [x8, #136]
    1bd8:	ldr	w10, [x9, #56]
    1bdc:	ldr	x9, [x8, #136]
    1be0:	ldr	w11, [x9, #40]
    1be4:	mov	w12, #0x86a0                	// #34464
    1be8:	movk	w12, #0x1, lsl #16
    1bec:	mul	w11, w12, w11
    1bf0:	add	w11, w11, #0xa
    1bf4:	cmp	w10, w11
    1bf8:	b.le	1c08 <BZ2_decompress+0x1c08>
    1bfc:	mov	w8, #0xfffffffc            	// #-4
    1c00:	stur	w8, [x29, #-24]
    1c04:	b	55a0 <BZ2_decompress+0x55a0>
    1c08:	stur	wzr, [x29, #-44]
    1c0c:	ldur	w8, [x29, #-44]
    1c10:	cmp	w8, #0x10
    1c14:	b.ge	1d90 <BZ2_decompress+0x1d90>  // b.tcont
    1c18:	ldr	x8, [sp, #32]
    1c1c:	ldr	x9, [x8, #136]
    1c20:	mov	w10, #0x1c                  	// #28
    1c24:	str	w10, [x9, #8]
    1c28:	ldr	x8, [sp, #32]
    1c2c:	ldr	x9, [x8, #136]
    1c30:	ldr	w10, [x9, #36]
    1c34:	cmp	w10, #0x1
    1c38:	b.lt	1c7c <BZ2_decompress+0x1c7c>  // b.tstop
    1c3c:	ldr	x8, [sp, #32]
    1c40:	ldr	x9, [x8, #136]
    1c44:	ldr	w10, [x9, #32]
    1c48:	ldr	x9, [x8, #136]
    1c4c:	ldr	w11, [x9, #36]
    1c50:	subs	w11, w11, #0x1
    1c54:	lsr	w10, w10, w11
    1c58:	and	w10, w10, #0x1
    1c5c:	str	w10, [sp, #188]
    1c60:	ldr	x9, [x8, #136]
    1c64:	ldr	w10, [x9, #36]
    1c68:	subs	w10, w10, #0x1
    1c6c:	str	w10, [x9, #36]
    1c70:	ldr	w10, [sp, #188]
    1c74:	sturb	w10, [x29, #-17]
    1c78:	b	1d38 <BZ2_decompress+0x1d38>
    1c7c:	ldr	x8, [sp, #32]
    1c80:	ldr	x9, [x8, #136]
    1c84:	ldr	x9, [x9]
    1c88:	ldr	w10, [x9, #8]
    1c8c:	cbnz	w10, 1c98 <BZ2_decompress+0x1c98>
    1c90:	stur	wzr, [x29, #-24]
    1c94:	b	55a0 <BZ2_decompress+0x55a0>
    1c98:	ldr	x8, [sp, #32]
    1c9c:	ldr	x9, [x8, #136]
    1ca0:	ldr	w10, [x9, #32]
    1ca4:	ldr	x9, [x8, #136]
    1ca8:	ldr	x9, [x9]
    1cac:	ldr	x9, [x9]
    1cb0:	ldrb	w11, [x9]
    1cb4:	orr	w10, w11, w10, lsl #8
    1cb8:	ldr	x9, [x8, #136]
    1cbc:	str	w10, [x9, #32]
    1cc0:	ldr	x9, [x8, #136]
    1cc4:	ldr	w10, [x9, #36]
    1cc8:	add	w10, w10, #0x8
    1ccc:	str	w10, [x9, #36]
    1cd0:	ldr	x9, [x8, #136]
    1cd4:	ldr	x9, [x9]
    1cd8:	ldr	x12, [x9]
    1cdc:	add	x12, x12, #0x1
    1ce0:	str	x12, [x9]
    1ce4:	ldr	x9, [x8, #136]
    1ce8:	ldr	x9, [x9]
    1cec:	ldr	w10, [x9, #8]
    1cf0:	subs	w10, w10, #0x1
    1cf4:	str	w10, [x9, #8]
    1cf8:	ldr	x9, [x8, #136]
    1cfc:	ldr	x9, [x9]
    1d00:	ldr	w10, [x9, #12]
    1d04:	add	w10, w10, #0x1
    1d08:	str	w10, [x9, #12]
    1d0c:	ldr	x9, [x8, #136]
    1d10:	ldr	x9, [x9]
    1d14:	ldr	w10, [x9, #12]
    1d18:	cbnz	w10, 1d34 <BZ2_decompress+0x1d34>
    1d1c:	ldr	x8, [sp, #32]
    1d20:	ldr	x9, [x8, #136]
    1d24:	ldr	x9, [x9]
    1d28:	ldr	w10, [x9, #16]
    1d2c:	add	w10, w10, #0x1
    1d30:	str	w10, [x9, #16]
    1d34:	b	1c28 <BZ2_decompress+0x1c28>
    1d38:	ldurb	w8, [x29, #-17]
    1d3c:	cmp	w8, #0x1
    1d40:	b.ne	1d64 <BZ2_decompress+0x1d64>  // b.any
    1d44:	ldr	x8, [sp, #32]
    1d48:	ldr	x9, [x8, #136]
    1d4c:	add	x9, x9, #0xd7c
    1d50:	ldursw	x10, [x29, #-44]
    1d54:	add	x9, x9, x10
    1d58:	mov	w11, #0x1                   	// #1
    1d5c:	strb	w11, [x9]
    1d60:	b	1d80 <BZ2_decompress+0x1d80>
    1d64:	ldr	x8, [sp, #32]
    1d68:	ldr	x9, [x8, #136]
    1d6c:	add	x9, x9, #0xd7c
    1d70:	ldursw	x10, [x29, #-44]
    1d74:	add	x9, x9, x10
    1d78:	mov	w11, #0x0                   	// #0
    1d7c:	strb	w11, [x9]
    1d80:	ldur	w8, [x29, #-44]
    1d84:	add	w8, w8, #0x1
    1d88:	stur	w8, [x29, #-44]
    1d8c:	b	1c0c <BZ2_decompress+0x1c0c>
    1d90:	stur	wzr, [x29, #-44]
    1d94:	ldur	w8, [x29, #-44]
    1d98:	cmp	w8, #0x100
    1d9c:	b.ge	1dcc <BZ2_decompress+0x1dcc>  // b.tcont
    1da0:	ldr	x8, [sp, #32]
    1da4:	ldr	x9, [x8, #136]
    1da8:	add	x9, x9, #0xc7c
    1dac:	ldursw	x10, [x29, #-44]
    1db0:	add	x9, x9, x10
    1db4:	mov	w11, #0x0                   	// #0
    1db8:	strb	w11, [x9]
    1dbc:	ldur	w8, [x29, #-44]
    1dc0:	add	w8, w8, #0x1
    1dc4:	stur	w8, [x29, #-44]
    1dc8:	b	1d94 <BZ2_decompress+0x1d94>
    1dcc:	stur	wzr, [x29, #-44]
    1dd0:	ldur	w8, [x29, #-44]
    1dd4:	cmp	w8, #0x10
    1dd8:	b.ge	1f88 <BZ2_decompress+0x1f88>  // b.tcont
    1ddc:	ldr	x8, [sp, #32]
    1de0:	ldr	x9, [x8, #136]
    1de4:	add	x9, x9, #0xd7c
    1de8:	ldursw	x10, [x29, #-44]
    1dec:	add	x9, x9, x10
    1df0:	ldrb	w11, [x9]
    1df4:	cbz	w11, 1f78 <BZ2_decompress+0x1f78>
    1df8:	stur	wzr, [x29, #-48]
    1dfc:	ldur	w8, [x29, #-48]
    1e00:	cmp	w8, #0x10
    1e04:	b.ge	1f78 <BZ2_decompress+0x1f78>  // b.tcont
    1e08:	ldr	x8, [sp, #32]
    1e0c:	ldr	x9, [x8, #136]
    1e10:	mov	w10, #0x1d                  	// #29
    1e14:	str	w10, [x9, #8]
    1e18:	ldr	x8, [sp, #32]
    1e1c:	ldr	x9, [x8, #136]
    1e20:	ldr	w10, [x9, #36]
    1e24:	cmp	w10, #0x1
    1e28:	b.lt	1e6c <BZ2_decompress+0x1e6c>  // b.tstop
    1e2c:	ldr	x8, [sp, #32]
    1e30:	ldr	x9, [x8, #136]
    1e34:	ldr	w10, [x9, #32]
    1e38:	ldr	x9, [x8, #136]
    1e3c:	ldr	w11, [x9, #36]
    1e40:	subs	w11, w11, #0x1
    1e44:	lsr	w10, w10, w11
    1e48:	and	w10, w10, #0x1
    1e4c:	str	w10, [sp, #184]
    1e50:	ldr	x9, [x8, #136]
    1e54:	ldr	w10, [x9, #36]
    1e58:	subs	w10, w10, #0x1
    1e5c:	str	w10, [x9, #36]
    1e60:	ldr	w10, [sp, #184]
    1e64:	sturb	w10, [x29, #-17]
    1e68:	b	1f28 <BZ2_decompress+0x1f28>
    1e6c:	ldr	x8, [sp, #32]
    1e70:	ldr	x9, [x8, #136]
    1e74:	ldr	x9, [x9]
    1e78:	ldr	w10, [x9, #8]
    1e7c:	cbnz	w10, 1e88 <BZ2_decompress+0x1e88>
    1e80:	stur	wzr, [x29, #-24]
    1e84:	b	55a0 <BZ2_decompress+0x55a0>
    1e88:	ldr	x8, [sp, #32]
    1e8c:	ldr	x9, [x8, #136]
    1e90:	ldr	w10, [x9, #32]
    1e94:	ldr	x9, [x8, #136]
    1e98:	ldr	x9, [x9]
    1e9c:	ldr	x9, [x9]
    1ea0:	ldrb	w11, [x9]
    1ea4:	orr	w10, w11, w10, lsl #8
    1ea8:	ldr	x9, [x8, #136]
    1eac:	str	w10, [x9, #32]
    1eb0:	ldr	x9, [x8, #136]
    1eb4:	ldr	w10, [x9, #36]
    1eb8:	add	w10, w10, #0x8
    1ebc:	str	w10, [x9, #36]
    1ec0:	ldr	x9, [x8, #136]
    1ec4:	ldr	x9, [x9]
    1ec8:	ldr	x12, [x9]
    1ecc:	add	x12, x12, #0x1
    1ed0:	str	x12, [x9]
    1ed4:	ldr	x9, [x8, #136]
    1ed8:	ldr	x9, [x9]
    1edc:	ldr	w10, [x9, #8]
    1ee0:	subs	w10, w10, #0x1
    1ee4:	str	w10, [x9, #8]
    1ee8:	ldr	x9, [x8, #136]
    1eec:	ldr	x9, [x9]
    1ef0:	ldr	w10, [x9, #12]
    1ef4:	add	w10, w10, #0x1
    1ef8:	str	w10, [x9, #12]
    1efc:	ldr	x9, [x8, #136]
    1f00:	ldr	x9, [x9]
    1f04:	ldr	w10, [x9, #12]
    1f08:	cbnz	w10, 1f24 <BZ2_decompress+0x1f24>
    1f0c:	ldr	x8, [sp, #32]
    1f10:	ldr	x9, [x8, #136]
    1f14:	ldr	x9, [x9]
    1f18:	ldr	w10, [x9, #16]
    1f1c:	add	w10, w10, #0x1
    1f20:	str	w10, [x9, #16]
    1f24:	b	1e18 <BZ2_decompress+0x1e18>
    1f28:	ldurb	w8, [x29, #-17]
    1f2c:	cmp	w8, #0x1
    1f30:	b.ne	1f68 <BZ2_decompress+0x1f68>  // b.any
    1f34:	ldr	x8, [sp, #32]
    1f38:	ldr	x9, [x8, #136]
    1f3c:	add	x9, x9, #0xc7c
    1f40:	ldur	w10, [x29, #-44]
    1f44:	mov	w11, #0x10                  	// #16
    1f48:	mul	w10, w10, w11
    1f4c:	ldur	w11, [x29, #-48]
    1f50:	add	w10, w10, w11
    1f54:	mov	w0, w10
    1f58:	sxtw	x12, w0
    1f5c:	add	x9, x9, x12
    1f60:	mov	w10, #0x1                   	// #1
    1f64:	strb	w10, [x9]
    1f68:	ldur	w8, [x29, #-48]
    1f6c:	add	w8, w8, #0x1
    1f70:	stur	w8, [x29, #-48]
    1f74:	b	1dfc <BZ2_decompress+0x1dfc>
    1f78:	ldur	w8, [x29, #-44]
    1f7c:	add	w8, w8, #0x1
    1f80:	stur	w8, [x29, #-44]
    1f84:	b	1dd0 <BZ2_decompress+0x1dd0>
    1f88:	ldr	x8, [sp, #32]
    1f8c:	ldr	x0, [x8, #136]
    1f90:	bl	57a0 <makeMaps_d>
    1f94:	ldr	x8, [sp, #32]
    1f98:	ldr	x9, [x8, #136]
    1f9c:	ldr	w10, [x9, #3192]
    1fa0:	cbnz	w10, 1fb0 <BZ2_decompress+0x1fb0>
    1fa4:	mov	w8, #0xfffffffc            	// #-4
    1fa8:	stur	w8, [x29, #-24]
    1fac:	b	55a0 <BZ2_decompress+0x55a0>
    1fb0:	ldr	x8, [sp, #32]
    1fb4:	ldr	x9, [x8, #136]
    1fb8:	ldr	w10, [x9, #3192]
    1fbc:	add	w10, w10, #0x2
    1fc0:	stur	w10, [x29, #-56]
    1fc4:	ldr	x8, [sp, #32]
    1fc8:	ldr	x9, [x8, #136]
    1fcc:	mov	w10, #0x1e                  	// #30
    1fd0:	str	w10, [x9, #8]
    1fd4:	ldr	x8, [sp, #32]
    1fd8:	ldr	x9, [x8, #136]
    1fdc:	ldr	w10, [x9, #36]
    1fe0:	cmp	w10, #0x3
    1fe4:	b.lt	2028 <BZ2_decompress+0x2028>  // b.tstop
    1fe8:	ldr	x8, [sp, #32]
    1fec:	ldr	x9, [x8, #136]
    1ff0:	ldr	w10, [x9, #32]
    1ff4:	ldr	x9, [x8, #136]
    1ff8:	ldr	w11, [x9, #36]
    1ffc:	subs	w11, w11, #0x3
    2000:	lsr	w10, w10, w11
    2004:	and	w10, w10, #0x7
    2008:	str	w10, [sp, #180]
    200c:	ldr	x9, [x8, #136]
    2010:	ldr	w10, [x9, #36]
    2014:	subs	w10, w10, #0x3
    2018:	str	w10, [x9, #36]
    201c:	ldr	w10, [sp, #180]
    2020:	stur	w10, [x29, #-60]
    2024:	b	20e4 <BZ2_decompress+0x20e4>
    2028:	ldr	x8, [sp, #32]
    202c:	ldr	x9, [x8, #136]
    2030:	ldr	x9, [x9]
    2034:	ldr	w10, [x9, #8]
    2038:	cbnz	w10, 2044 <BZ2_decompress+0x2044>
    203c:	stur	wzr, [x29, #-24]
    2040:	b	55a0 <BZ2_decompress+0x55a0>
    2044:	ldr	x8, [sp, #32]
    2048:	ldr	x9, [x8, #136]
    204c:	ldr	w10, [x9, #32]
    2050:	ldr	x9, [x8, #136]
    2054:	ldr	x9, [x9]
    2058:	ldr	x9, [x9]
    205c:	ldrb	w11, [x9]
    2060:	orr	w10, w11, w10, lsl #8
    2064:	ldr	x9, [x8, #136]
    2068:	str	w10, [x9, #32]
    206c:	ldr	x9, [x8, #136]
    2070:	ldr	w10, [x9, #36]
    2074:	add	w10, w10, #0x8
    2078:	str	w10, [x9, #36]
    207c:	ldr	x9, [x8, #136]
    2080:	ldr	x9, [x9]
    2084:	ldr	x12, [x9]
    2088:	add	x12, x12, #0x1
    208c:	str	x12, [x9]
    2090:	ldr	x9, [x8, #136]
    2094:	ldr	x9, [x9]
    2098:	ldr	w10, [x9, #8]
    209c:	subs	w10, w10, #0x1
    20a0:	str	w10, [x9, #8]
    20a4:	ldr	x9, [x8, #136]
    20a8:	ldr	x9, [x9]
    20ac:	ldr	w10, [x9, #12]
    20b0:	add	w10, w10, #0x1
    20b4:	str	w10, [x9, #12]
    20b8:	ldr	x9, [x8, #136]
    20bc:	ldr	x9, [x9]
    20c0:	ldr	w10, [x9, #12]
    20c4:	cbnz	w10, 20e0 <BZ2_decompress+0x20e0>
    20c8:	ldr	x8, [sp, #32]
    20cc:	ldr	x9, [x8, #136]
    20d0:	ldr	x9, [x9]
    20d4:	ldr	w10, [x9, #16]
    20d8:	add	w10, w10, #0x1
    20dc:	str	w10, [x9, #16]
    20e0:	b	1fd4 <BZ2_decompress+0x1fd4>
    20e4:	ldur	w8, [x29, #-60]
    20e8:	cmp	w8, #0x2
    20ec:	b.lt	20fc <BZ2_decompress+0x20fc>  // b.tstop
    20f0:	ldur	w8, [x29, #-60]
    20f4:	cmp	w8, #0x6
    20f8:	b.le	2108 <BZ2_decompress+0x2108>
    20fc:	mov	w8, #0xfffffffc            	// #-4
    2100:	stur	w8, [x29, #-24]
    2104:	b	55a0 <BZ2_decompress+0x55a0>
    2108:	ldr	x8, [sp, #32]
    210c:	ldr	x9, [x8, #136]
    2110:	mov	w10, #0x1f                  	// #31
    2114:	str	w10, [x9, #8]
    2118:	ldr	x8, [sp, #32]
    211c:	ldr	x9, [x8, #136]
    2120:	ldr	w10, [x9, #36]
    2124:	cmp	w10, #0xf
    2128:	b.lt	216c <BZ2_decompress+0x216c>  // b.tstop
    212c:	ldr	x8, [sp, #32]
    2130:	ldr	x9, [x8, #136]
    2134:	ldr	w10, [x9, #32]
    2138:	ldr	x9, [x8, #136]
    213c:	ldr	w11, [x9, #36]
    2140:	subs	w11, w11, #0xf
    2144:	lsr	w10, w10, w11
    2148:	and	w10, w10, #0x7fff
    214c:	str	w10, [sp, #176]
    2150:	ldr	x9, [x8, #136]
    2154:	ldr	w10, [x9, #36]
    2158:	subs	w10, w10, #0xf
    215c:	str	w10, [x9, #36]
    2160:	ldr	w10, [sp, #176]
    2164:	stur	w10, [x29, #-64]
    2168:	b	2228 <BZ2_decompress+0x2228>
    216c:	ldr	x8, [sp, #32]
    2170:	ldr	x9, [x8, #136]
    2174:	ldr	x9, [x9]
    2178:	ldr	w10, [x9, #8]
    217c:	cbnz	w10, 2188 <BZ2_decompress+0x2188>
    2180:	stur	wzr, [x29, #-24]
    2184:	b	55a0 <BZ2_decompress+0x55a0>
    2188:	ldr	x8, [sp, #32]
    218c:	ldr	x9, [x8, #136]
    2190:	ldr	w10, [x9, #32]
    2194:	ldr	x9, [x8, #136]
    2198:	ldr	x9, [x9]
    219c:	ldr	x9, [x9]
    21a0:	ldrb	w11, [x9]
    21a4:	orr	w10, w11, w10, lsl #8
    21a8:	ldr	x9, [x8, #136]
    21ac:	str	w10, [x9, #32]
    21b0:	ldr	x9, [x8, #136]
    21b4:	ldr	w10, [x9, #36]
    21b8:	add	w10, w10, #0x8
    21bc:	str	w10, [x9, #36]
    21c0:	ldr	x9, [x8, #136]
    21c4:	ldr	x9, [x9]
    21c8:	ldr	x12, [x9]
    21cc:	add	x12, x12, #0x1
    21d0:	str	x12, [x9]
    21d4:	ldr	x9, [x8, #136]
    21d8:	ldr	x9, [x9]
    21dc:	ldr	w10, [x9, #8]
    21e0:	subs	w10, w10, #0x1
    21e4:	str	w10, [x9, #8]
    21e8:	ldr	x9, [x8, #136]
    21ec:	ldr	x9, [x9]
    21f0:	ldr	w10, [x9, #12]
    21f4:	add	w10, w10, #0x1
    21f8:	str	w10, [x9, #12]
    21fc:	ldr	x9, [x8, #136]
    2200:	ldr	x9, [x9]
    2204:	ldr	w10, [x9, #12]
    2208:	cbnz	w10, 2224 <BZ2_decompress+0x2224>
    220c:	ldr	x8, [sp, #32]
    2210:	ldr	x9, [x8, #136]
    2214:	ldr	x9, [x9]
    2218:	ldr	w10, [x9, #16]
    221c:	add	w10, w10, #0x1
    2220:	str	w10, [x9, #16]
    2224:	b	2118 <BZ2_decompress+0x2118>
    2228:	ldur	w8, [x29, #-64]
    222c:	cmp	w8, #0x1
    2230:	b.ge	2240 <BZ2_decompress+0x2240>  // b.tcont
    2234:	mov	w8, #0xfffffffc            	// #-4
    2238:	stur	w8, [x29, #-24]
    223c:	b	55a0 <BZ2_decompress+0x55a0>
    2240:	stur	wzr, [x29, #-44]
    2244:	ldur	w8, [x29, #-44]
    2248:	ldur	w9, [x29, #-64]
    224c:	cmp	w8, w9
    2250:	b.ge	23f0 <BZ2_decompress+0x23f0>  // b.tcont
    2254:	stur	wzr, [x29, #-48]
    2258:	ldr	x8, [sp, #32]
    225c:	ldr	x9, [x8, #136]
    2260:	mov	w10, #0x20                  	// #32
    2264:	str	w10, [x9, #8]
    2268:	ldr	x8, [sp, #32]
    226c:	ldr	x9, [x8, #136]
    2270:	ldr	w10, [x9, #36]
    2274:	cmp	w10, #0x1
    2278:	b.lt	22bc <BZ2_decompress+0x22bc>  // b.tstop
    227c:	ldr	x8, [sp, #32]
    2280:	ldr	x9, [x8, #136]
    2284:	ldr	w10, [x9, #32]
    2288:	ldr	x9, [x8, #136]
    228c:	ldr	w11, [x9, #36]
    2290:	subs	w11, w11, #0x1
    2294:	lsr	w10, w10, w11
    2298:	and	w10, w10, #0x1
    229c:	str	w10, [sp, #172]
    22a0:	ldr	x9, [x8, #136]
    22a4:	ldr	w10, [x9, #36]
    22a8:	subs	w10, w10, #0x1
    22ac:	str	w10, [x9, #36]
    22b0:	ldr	w10, [sp, #172]
    22b4:	sturb	w10, [x29, #-17]
    22b8:	b	2378 <BZ2_decompress+0x2378>
    22bc:	ldr	x8, [sp, #32]
    22c0:	ldr	x9, [x8, #136]
    22c4:	ldr	x9, [x9]
    22c8:	ldr	w10, [x9, #8]
    22cc:	cbnz	w10, 22d8 <BZ2_decompress+0x22d8>
    22d0:	stur	wzr, [x29, #-24]
    22d4:	b	55a0 <BZ2_decompress+0x55a0>
    22d8:	ldr	x8, [sp, #32]
    22dc:	ldr	x9, [x8, #136]
    22e0:	ldr	w10, [x9, #32]
    22e4:	ldr	x9, [x8, #136]
    22e8:	ldr	x9, [x9]
    22ec:	ldr	x9, [x9]
    22f0:	ldrb	w11, [x9]
    22f4:	orr	w10, w11, w10, lsl #8
    22f8:	ldr	x9, [x8, #136]
    22fc:	str	w10, [x9, #32]
    2300:	ldr	x9, [x8, #136]
    2304:	ldr	w10, [x9, #36]
    2308:	add	w10, w10, #0x8
    230c:	str	w10, [x9, #36]
    2310:	ldr	x9, [x8, #136]
    2314:	ldr	x9, [x9]
    2318:	ldr	x12, [x9]
    231c:	add	x12, x12, #0x1
    2320:	str	x12, [x9]
    2324:	ldr	x9, [x8, #136]
    2328:	ldr	x9, [x9]
    232c:	ldr	w10, [x9, #8]
    2330:	subs	w10, w10, #0x1
    2334:	str	w10, [x9, #8]
    2338:	ldr	x9, [x8, #136]
    233c:	ldr	x9, [x9]
    2340:	ldr	w10, [x9, #12]
    2344:	add	w10, w10, #0x1
    2348:	str	w10, [x9, #12]
    234c:	ldr	x9, [x8, #136]
    2350:	ldr	x9, [x9]
    2354:	ldr	w10, [x9, #12]
    2358:	cbnz	w10, 2374 <BZ2_decompress+0x2374>
    235c:	ldr	x8, [sp, #32]
    2360:	ldr	x9, [x8, #136]
    2364:	ldr	x9, [x9]
    2368:	ldr	w10, [x9, #16]
    236c:	add	w10, w10, #0x1
    2370:	str	w10, [x9, #16]
    2374:	b	2268 <BZ2_decompress+0x2268>
    2378:	ldurb	w8, [x29, #-17]
    237c:	cbnz	w8, 2384 <BZ2_decompress+0x2384>
    2380:	b	23b0 <BZ2_decompress+0x23b0>
    2384:	ldur	w8, [x29, #-48]
    2388:	add	w8, w8, #0x1
    238c:	stur	w8, [x29, #-48]
    2390:	ldur	w8, [x29, #-48]
    2394:	ldur	w9, [x29, #-60]
    2398:	cmp	w8, w9
    239c:	b.lt	23ac <BZ2_decompress+0x23ac>  // b.tstop
    23a0:	mov	w8, #0xfffffffc            	// #-4
    23a4:	stur	w8, [x29, #-24]
    23a8:	b	55a0 <BZ2_decompress+0x55a0>
    23ac:	b	2258 <BZ2_decompress+0x2258>
    23b0:	ldur	w8, [x29, #-44]
    23b4:	mov	w9, #0x4652                	// #18002
    23b8:	cmp	w8, w9
    23bc:	b.ge	23e0 <BZ2_decompress+0x23e0>  // b.tcont
    23c0:	ldur	w8, [x29, #-48]
    23c4:	ldr	x9, [sp, #32]
    23c8:	ldr	x10, [x9, #136]
    23cc:	mov	x11, #0x651e                	// #25886
    23d0:	add	x10, x10, x11
    23d4:	ldursw	x11, [x29, #-44]
    23d8:	add	x10, x10, x11
    23dc:	strb	w8, [x10]
    23e0:	ldur	w8, [x29, #-44]
    23e4:	add	w8, w8, #0x1
    23e8:	stur	w8, [x29, #-44]
    23ec:	b	2244 <BZ2_decompress+0x2244>
    23f0:	ldur	w8, [x29, #-64]
    23f4:	mov	w9, #0x4652                	// #18002
    23f8:	cmp	w8, w9
    23fc:	b.le	2408 <BZ2_decompress+0x2408>
    2400:	mov	w8, #0x4652                	// #18002
    2404:	stur	w8, [x29, #-64]
    2408:	mov	w8, #0x0                   	// #0
    240c:	strb	w8, [sp, #164]
    2410:	ldrb	w8, [sp, #164]
    2414:	ldur	w9, [x29, #-60]
    2418:	cmp	w8, w9
    241c:	b.ge	2448 <BZ2_decompress+0x2448>  // b.tcont
    2420:	ldrb	w8, [sp, #164]
    2424:	ldrb	w9, [sp, #164]
    2428:	mov	w10, w9
    242c:	add	x11, sp, #0xa6
    2430:	add	x10, x11, x10
    2434:	strb	w8, [x10]
    2438:	ldrb	w8, [sp, #164]
    243c:	add	w8, w8, #0x1
    2440:	strb	w8, [sp, #164]
    2444:	b	2410 <BZ2_decompress+0x2410>
    2448:	stur	wzr, [x29, #-44]
    244c:	ldur	w8, [x29, #-44]
    2450:	ldur	w9, [x29, #-64]
    2454:	cmp	w8, w9
    2458:	b.ge	251c <BZ2_decompress+0x251c>  // b.tcont
    245c:	ldr	x8, [sp, #32]
    2460:	ldr	x9, [x8, #136]
    2464:	mov	x10, #0x651e                	// #25886
    2468:	add	x9, x9, x10
    246c:	ldursw	x10, [x29, #-44]
    2470:	add	x9, x9, x10
    2474:	ldrb	w11, [x9]
    2478:	strb	w11, [sp, #164]
    247c:	ldrb	w11, [sp, #164]
    2480:	mov	w9, w11
    2484:	add	x10, sp, #0xa6
    2488:	add	x9, x10, x9
    248c:	ldrb	w11, [x9]
    2490:	strb	w11, [sp, #165]
    2494:	ldrb	w8, [sp, #164]
    2498:	cmp	w8, #0x0
    249c:	cset	w8, le
    24a0:	tbnz	w8, #0, 24e4 <BZ2_decompress+0x24e4>
    24a4:	ldrb	w8, [sp, #164]
    24a8:	subs	w8, w8, #0x1
    24ac:	mov	w0, w8
    24b0:	sxtw	x9, w0
    24b4:	add	x10, sp, #0xa6
    24b8:	add	x9, x10, x9
    24bc:	ldrb	w8, [x9]
    24c0:	ldrb	w11, [sp, #164]
    24c4:	mov	w9, w11
    24c8:	add	x9, x10, x9
    24cc:	strb	w8, [x9]
    24d0:	ldrb	w8, [sp, #164]
    24d4:	mov	w11, #0xffffffff            	// #-1
    24d8:	add	w8, w11, w8, uxtb
    24dc:	strb	w8, [sp, #164]
    24e0:	b	2494 <BZ2_decompress+0x2494>
    24e4:	ldrb	w8, [sp, #165]
    24e8:	strb	w8, [sp, #166]
    24ec:	ldrb	w8, [sp, #165]
    24f0:	ldr	x9, [sp, #32]
    24f4:	ldr	x10, [x9, #136]
    24f8:	mov	x11, #0x1ecc                	// #7884
    24fc:	add	x10, x10, x11
    2500:	ldursw	x11, [x29, #-44]
    2504:	add	x10, x10, x11
    2508:	strb	w8, [x10]
    250c:	ldur	w8, [x29, #-44]
    2510:	add	w8, w8, #0x1
    2514:	stur	w8, [x29, #-44]
    2518:	b	244c <BZ2_decompress+0x244c>
    251c:	stur	wzr, [x29, #-52]
    2520:	ldur	w8, [x29, #-52]
    2524:	ldur	w9, [x29, #-60]
    2528:	cmp	w8, w9
    252c:	b.ge	294c <BZ2_decompress+0x294c>  // b.tcont
    2530:	ldr	x8, [sp, #32]
    2534:	ldr	x9, [x8, #136]
    2538:	mov	w10, #0x21                  	// #33
    253c:	str	w10, [x9, #8]
    2540:	ldr	x8, [sp, #32]
    2544:	ldr	x9, [x8, #136]
    2548:	ldr	w10, [x9, #36]
    254c:	cmp	w10, #0x5
    2550:	b.lt	2594 <BZ2_decompress+0x2594>  // b.tstop
    2554:	ldr	x8, [sp, #32]
    2558:	ldr	x9, [x8, #136]
    255c:	ldr	w10, [x9, #32]
    2560:	ldr	x9, [x8, #136]
    2564:	ldr	w11, [x9, #36]
    2568:	subs	w11, w11, #0x5
    256c:	lsr	w10, w10, w11
    2570:	and	w10, w10, #0x1f
    2574:	str	w10, [sp, #160]
    2578:	ldr	x9, [x8, #136]
    257c:	ldr	w10, [x9, #36]
    2580:	subs	w10, w10, #0x5
    2584:	str	w10, [x9, #36]
    2588:	ldr	w10, [sp, #160]
    258c:	stur	w10, [x29, #-100]
    2590:	b	2650 <BZ2_decompress+0x2650>
    2594:	ldr	x8, [sp, #32]
    2598:	ldr	x9, [x8, #136]
    259c:	ldr	x9, [x9]
    25a0:	ldr	w10, [x9, #8]
    25a4:	cbnz	w10, 25b0 <BZ2_decompress+0x25b0>
    25a8:	stur	wzr, [x29, #-24]
    25ac:	b	55a0 <BZ2_decompress+0x55a0>
    25b0:	ldr	x8, [sp, #32]
    25b4:	ldr	x9, [x8, #136]
    25b8:	ldr	w10, [x9, #32]
    25bc:	ldr	x9, [x8, #136]
    25c0:	ldr	x9, [x9]
    25c4:	ldr	x9, [x9]
    25c8:	ldrb	w11, [x9]
    25cc:	orr	w10, w11, w10, lsl #8
    25d0:	ldr	x9, [x8, #136]
    25d4:	str	w10, [x9, #32]
    25d8:	ldr	x9, [x8, #136]
    25dc:	ldr	w10, [x9, #36]
    25e0:	add	w10, w10, #0x8
    25e4:	str	w10, [x9, #36]
    25e8:	ldr	x9, [x8, #136]
    25ec:	ldr	x9, [x9]
    25f0:	ldr	x12, [x9]
    25f4:	add	x12, x12, #0x1
    25f8:	str	x12, [x9]
    25fc:	ldr	x9, [x8, #136]
    2600:	ldr	x9, [x9]
    2604:	ldr	w10, [x9, #8]
    2608:	subs	w10, w10, #0x1
    260c:	str	w10, [x9, #8]
    2610:	ldr	x9, [x8, #136]
    2614:	ldr	x9, [x9]
    2618:	ldr	w10, [x9, #12]
    261c:	add	w10, w10, #0x1
    2620:	str	w10, [x9, #12]
    2624:	ldr	x9, [x8, #136]
    2628:	ldr	x9, [x9]
    262c:	ldr	w10, [x9, #12]
    2630:	cbnz	w10, 264c <BZ2_decompress+0x264c>
    2634:	ldr	x8, [sp, #32]
    2638:	ldr	x9, [x8, #136]
    263c:	ldr	x9, [x9]
    2640:	ldr	w10, [x9, #16]
    2644:	add	w10, w10, #0x1
    2648:	str	w10, [x9, #16]
    264c:	b	2540 <BZ2_decompress+0x2540>
    2650:	stur	wzr, [x29, #-44]
    2654:	ldur	w8, [x29, #-44]
    2658:	ldur	w9, [x29, #-56]
    265c:	cmp	w8, w9
    2660:	b.ge	293c <BZ2_decompress+0x293c>  // b.tcont
    2664:	ldur	w8, [x29, #-100]
    2668:	cmp	w8, #0x1
    266c:	b.lt	267c <BZ2_decompress+0x267c>  // b.tstop
    2670:	ldur	w8, [x29, #-100]
    2674:	cmp	w8, #0x14
    2678:	b.le	2688 <BZ2_decompress+0x2688>
    267c:	mov	w8, #0xfffffffc            	// #-4
    2680:	stur	w8, [x29, #-24]
    2684:	b	55a0 <BZ2_decompress+0x55a0>
    2688:	ldr	x8, [sp, #32]
    268c:	ldr	x9, [x8, #136]
    2690:	mov	w10, #0x22                  	// #34
    2694:	str	w10, [x9, #8]
    2698:	ldr	x8, [sp, #32]
    269c:	ldr	x9, [x8, #136]
    26a0:	ldr	w10, [x9, #36]
    26a4:	cmp	w10, #0x1
    26a8:	b.lt	26ec <BZ2_decompress+0x26ec>  // b.tstop
    26ac:	ldr	x8, [sp, #32]
    26b0:	ldr	x9, [x8, #136]
    26b4:	ldr	w10, [x9, #32]
    26b8:	ldr	x9, [x8, #136]
    26bc:	ldr	w11, [x9, #36]
    26c0:	subs	w11, w11, #0x1
    26c4:	lsr	w10, w10, w11
    26c8:	and	w10, w10, #0x1
    26cc:	str	w10, [sp, #156]
    26d0:	ldr	x9, [x8, #136]
    26d4:	ldr	w10, [x9, #36]
    26d8:	subs	w10, w10, #0x1
    26dc:	str	w10, [x9, #36]
    26e0:	ldr	w10, [sp, #156]
    26e4:	sturb	w10, [x29, #-17]
    26e8:	b	27a8 <BZ2_decompress+0x27a8>
    26ec:	ldr	x8, [sp, #32]
    26f0:	ldr	x9, [x8, #136]
    26f4:	ldr	x9, [x9]
    26f8:	ldr	w10, [x9, #8]
    26fc:	cbnz	w10, 2708 <BZ2_decompress+0x2708>
    2700:	stur	wzr, [x29, #-24]
    2704:	b	55a0 <BZ2_decompress+0x55a0>
    2708:	ldr	x8, [sp, #32]
    270c:	ldr	x9, [x8, #136]
    2710:	ldr	w10, [x9, #32]
    2714:	ldr	x9, [x8, #136]
    2718:	ldr	x9, [x9]
    271c:	ldr	x9, [x9]
    2720:	ldrb	w11, [x9]
    2724:	orr	w10, w11, w10, lsl #8
    2728:	ldr	x9, [x8, #136]
    272c:	str	w10, [x9, #32]
    2730:	ldr	x9, [x8, #136]
    2734:	ldr	w10, [x9, #36]
    2738:	add	w10, w10, #0x8
    273c:	str	w10, [x9, #36]
    2740:	ldr	x9, [x8, #136]
    2744:	ldr	x9, [x9]
    2748:	ldr	x12, [x9]
    274c:	add	x12, x12, #0x1
    2750:	str	x12, [x9]
    2754:	ldr	x9, [x8, #136]
    2758:	ldr	x9, [x9]
    275c:	ldr	w10, [x9, #8]
    2760:	subs	w10, w10, #0x1
    2764:	str	w10, [x9, #8]
    2768:	ldr	x9, [x8, #136]
    276c:	ldr	x9, [x9]
    2770:	ldr	w10, [x9, #12]
    2774:	add	w10, w10, #0x1
    2778:	str	w10, [x9, #12]
    277c:	ldr	x9, [x8, #136]
    2780:	ldr	x9, [x9]
    2784:	ldr	w10, [x9, #12]
    2788:	cbnz	w10, 27a4 <BZ2_decompress+0x27a4>
    278c:	ldr	x8, [sp, #32]
    2790:	ldr	x9, [x8, #136]
    2794:	ldr	x9, [x9]
    2798:	ldr	w10, [x9, #16]
    279c:	add	w10, w10, #0x1
    27a0:	str	w10, [x9, #16]
    27a4:	b	2698 <BZ2_decompress+0x2698>
    27a8:	ldurb	w8, [x29, #-17]
    27ac:	cbnz	w8, 27b4 <BZ2_decompress+0x27b4>
    27b0:	b	28fc <BZ2_decompress+0x28fc>
    27b4:	ldr	x8, [sp, #32]
    27b8:	ldr	x9, [x8, #136]
    27bc:	mov	w10, #0x23                  	// #35
    27c0:	str	w10, [x9, #8]
    27c4:	ldr	x8, [sp, #32]
    27c8:	ldr	x9, [x8, #136]
    27cc:	ldr	w10, [x9, #36]
    27d0:	cmp	w10, #0x1
    27d4:	b.lt	2818 <BZ2_decompress+0x2818>  // b.tstop
    27d8:	ldr	x8, [sp, #32]
    27dc:	ldr	x9, [x8, #136]
    27e0:	ldr	w10, [x9, #32]
    27e4:	ldr	x9, [x8, #136]
    27e8:	ldr	w11, [x9, #36]
    27ec:	subs	w11, w11, #0x1
    27f0:	lsr	w10, w10, w11
    27f4:	and	w10, w10, #0x1
    27f8:	str	w10, [sp, #152]
    27fc:	ldr	x9, [x8, #136]
    2800:	ldr	w10, [x9, #36]
    2804:	subs	w10, w10, #0x1
    2808:	str	w10, [x9, #36]
    280c:	ldr	w10, [sp, #152]
    2810:	sturb	w10, [x29, #-17]
    2814:	b	28d4 <BZ2_decompress+0x28d4>
    2818:	ldr	x8, [sp, #32]
    281c:	ldr	x9, [x8, #136]
    2820:	ldr	x9, [x9]
    2824:	ldr	w10, [x9, #8]
    2828:	cbnz	w10, 2834 <BZ2_decompress+0x2834>
    282c:	stur	wzr, [x29, #-24]
    2830:	b	55a0 <BZ2_decompress+0x55a0>
    2834:	ldr	x8, [sp, #32]
    2838:	ldr	x9, [x8, #136]
    283c:	ldr	w10, [x9, #32]
    2840:	ldr	x9, [x8, #136]
    2844:	ldr	x9, [x9]
    2848:	ldr	x9, [x9]
    284c:	ldrb	w11, [x9]
    2850:	orr	w10, w11, w10, lsl #8
    2854:	ldr	x9, [x8, #136]
    2858:	str	w10, [x9, #32]
    285c:	ldr	x9, [x8, #136]
    2860:	ldr	w10, [x9, #36]
    2864:	add	w10, w10, #0x8
    2868:	str	w10, [x9, #36]
    286c:	ldr	x9, [x8, #136]
    2870:	ldr	x9, [x9]
    2874:	ldr	x12, [x9]
    2878:	add	x12, x12, #0x1
    287c:	str	x12, [x9]
    2880:	ldr	x9, [x8, #136]
    2884:	ldr	x9, [x9]
    2888:	ldr	w10, [x9, #8]
    288c:	subs	w10, w10, #0x1
    2890:	str	w10, [x9, #8]
    2894:	ldr	x9, [x8, #136]
    2898:	ldr	x9, [x9]
    289c:	ldr	w10, [x9, #12]
    28a0:	add	w10, w10, #0x1
    28a4:	str	w10, [x9, #12]
    28a8:	ldr	x9, [x8, #136]
    28ac:	ldr	x9, [x9]
    28b0:	ldr	w10, [x9, #12]
    28b4:	cbnz	w10, 28d0 <BZ2_decompress+0x28d0>
    28b8:	ldr	x8, [sp, #32]
    28bc:	ldr	x9, [x8, #136]
    28c0:	ldr	x9, [x9]
    28c4:	ldr	w10, [x9, #16]
    28c8:	add	w10, w10, #0x1
    28cc:	str	w10, [x9, #16]
    28d0:	b	27c4 <BZ2_decompress+0x27c4>
    28d4:	ldurb	w8, [x29, #-17]
    28d8:	cbnz	w8, 28ec <BZ2_decompress+0x28ec>
    28dc:	ldur	w8, [x29, #-100]
    28e0:	add	w8, w8, #0x1
    28e4:	stur	w8, [x29, #-100]
    28e8:	b	28f8 <BZ2_decompress+0x28f8>
    28ec:	ldur	w8, [x29, #-100]
    28f0:	subs	w8, w8, #0x1
    28f4:	stur	w8, [x29, #-100]
    28f8:	b	2664 <BZ2_decompress+0x2664>
    28fc:	ldur	w8, [x29, #-100]
    2900:	ldr	x9, [sp, #32]
    2904:	ldr	x10, [x9, #136]
    2908:	mov	x11, #0xab70                	// #43888
    290c:	add	x10, x10, x11
    2910:	ldursw	x11, [x29, #-52]
    2914:	mov	x12, #0x102                 	// #258
    2918:	mul	x11, x12, x11
    291c:	add	x10, x10, x11
    2920:	ldursw	x11, [x29, #-44]
    2924:	add	x10, x10, x11
    2928:	strb	w8, [x10]
    292c:	ldur	w8, [x29, #-44]
    2930:	add	w8, w8, #0x1
    2934:	stur	w8, [x29, #-44]
    2938:	b	2654 <BZ2_decompress+0x2654>
    293c:	ldur	w8, [x29, #-52]
    2940:	add	w8, w8, #0x1
    2944:	stur	w8, [x29, #-52]
    2948:	b	2520 <BZ2_decompress+0x2520>
    294c:	stur	wzr, [x29, #-52]
    2950:	ldur	w8, [x29, #-52]
    2954:	ldur	w9, [x29, #-60]
    2958:	cmp	w8, w9
    295c:	b.ge	2af8 <BZ2_decompress+0x2af8>  // b.tcont
    2960:	mov	w8, #0x20                  	// #32
    2964:	stur	w8, [x29, #-28]
    2968:	stur	wzr, [x29, #-32]
    296c:	stur	wzr, [x29, #-44]
    2970:	ldur	w8, [x29, #-44]
    2974:	ldur	w9, [x29, #-56]
    2978:	cmp	w8, w9
    297c:	b.ge	2a50 <BZ2_decompress+0x2a50>  // b.tcont
    2980:	ldr	x8, [sp, #32]
    2984:	ldr	x9, [x8, #136]
    2988:	mov	x10, #0xab70                	// #43888
    298c:	add	x9, x9, x10
    2990:	ldursw	x10, [x29, #-52]
    2994:	mov	x11, #0x102                 	// #258
    2998:	mul	x10, x11, x10
    299c:	add	x9, x9, x10
    29a0:	ldursw	x10, [x29, #-44]
    29a4:	ldrb	w12, [x9, x10]
    29a8:	ldur	w13, [x29, #-32]
    29ac:	cmp	w12, w13
    29b0:	b.le	29e0 <BZ2_decompress+0x29e0>
    29b4:	ldr	x8, [sp, #32]
    29b8:	ldr	x9, [x8, #136]
    29bc:	mov	x10, #0xab70                	// #43888
    29c0:	add	x9, x9, x10
    29c4:	ldursw	x10, [x29, #-52]
    29c8:	mov	x11, #0x102                 	// #258
    29cc:	mul	x10, x11, x10
    29d0:	add	x9, x9, x10
    29d4:	ldursw	x10, [x29, #-44]
    29d8:	ldrb	w12, [x9, x10]
    29dc:	stur	w12, [x29, #-32]
    29e0:	ldr	x8, [sp, #32]
    29e4:	ldr	x9, [x8, #136]
    29e8:	mov	x10, #0xab70                	// #43888
    29ec:	add	x9, x9, x10
    29f0:	ldursw	x10, [x29, #-52]
    29f4:	mov	x11, #0x102                 	// #258
    29f8:	mul	x10, x11, x10
    29fc:	add	x9, x9, x10
    2a00:	ldursw	x10, [x29, #-44]
    2a04:	ldrb	w12, [x9, x10]
    2a08:	ldur	w13, [x29, #-28]
    2a0c:	cmp	w12, w13
    2a10:	b.ge	2a40 <BZ2_decompress+0x2a40>  // b.tcont
    2a14:	ldr	x8, [sp, #32]
    2a18:	ldr	x9, [x8, #136]
    2a1c:	mov	x10, #0xab70                	// #43888
    2a20:	add	x9, x9, x10
    2a24:	ldursw	x10, [x29, #-52]
    2a28:	mov	x11, #0x102                 	// #258
    2a2c:	mul	x10, x11, x10
    2a30:	add	x9, x9, x10
    2a34:	ldursw	x10, [x29, #-44]
    2a38:	ldrb	w12, [x9, x10]
    2a3c:	stur	w12, [x29, #-28]
    2a40:	ldur	w8, [x29, #-44]
    2a44:	add	w8, w8, #0x1
    2a48:	stur	w8, [x29, #-44]
    2a4c:	b	2970 <BZ2_decompress+0x2970>
    2a50:	ldr	x8, [sp, #32]
    2a54:	ldr	x9, [x8, #136]
    2a58:	mov	x10, #0xb17c                	// #45436
    2a5c:	add	x9, x9, x10
    2a60:	ldursw	x10, [x29, #-52]
    2a64:	mov	x11, #0x408                 	// #1032
    2a68:	mul	x10, x11, x10
    2a6c:	add	x0, x9, x10
    2a70:	ldr	x9, [x8, #136]
    2a74:	mov	x10, #0xc9ac                	// #51628
    2a78:	add	x9, x9, x10
    2a7c:	ldursw	x10, [x29, #-52]
    2a80:	mul	x10, x11, x10
    2a84:	add	x1, x9, x10
    2a88:	ldr	x9, [x8, #136]
    2a8c:	mov	x10, #0xe1dc                	// #57820
    2a90:	add	x9, x9, x10
    2a94:	ldursw	x10, [x29, #-52]
    2a98:	mul	x10, x11, x10
    2a9c:	add	x2, x9, x10
    2aa0:	ldr	x9, [x8, #136]
    2aa4:	mov	x10, #0xab70                	// #43888
    2aa8:	add	x9, x9, x10
    2aac:	ldursw	x10, [x29, #-52]
    2ab0:	mov	x11, #0x102                 	// #258
    2ab4:	mul	x10, x11, x10
    2ab8:	add	x3, x9, x10
    2abc:	ldur	w4, [x29, #-28]
    2ac0:	ldur	w5, [x29, #-32]
    2ac4:	ldur	w6, [x29, #-56]
    2ac8:	bl	0 <BZ2_hbCreateDecodeTables>
    2acc:	ldur	w12, [x29, #-28]
    2ad0:	ldr	x8, [sp, #32]
    2ad4:	ldr	x9, [x8, #136]
    2ad8:	mov	x10, #0xfa0c                	// #64012
    2adc:	add	x9, x9, x10
    2ae0:	ldursw	x10, [x29, #-52]
    2ae4:	str	w12, [x9, x10, lsl #2]
    2ae8:	ldur	w8, [x29, #-52]
    2aec:	add	w8, w8, #0x1
    2af0:	stur	w8, [x29, #-52]
    2af4:	b	2950 <BZ2_decompress+0x2950>
    2af8:	ldr	x8, [sp, #32]
    2afc:	ldr	x9, [x8, #136]
    2b00:	ldr	w10, [x9, #3192]
    2b04:	add	w10, w10, #0x1
    2b08:	stur	w10, [x29, #-68]
    2b0c:	ldr	x9, [x8, #136]
    2b10:	ldr	w10, [x9, #40]
    2b14:	mov	w11, #0x86a0                	// #34464
    2b18:	movk	w11, #0x1, lsl #16
    2b1c:	mul	w10, w11, w10
    2b20:	stur	w10, [x29, #-84]
    2b24:	mov	w10, #0xffffffff            	// #-1
    2b28:	stur	w10, [x29, #-72]
    2b2c:	stur	wzr, [x29, #-76]
    2b30:	stur	wzr, [x29, #-44]
    2b34:	ldur	w8, [x29, #-44]
    2b38:	cmp	w8, #0xff
    2b3c:	b.gt	2b68 <BZ2_decompress+0x2b68>
    2b40:	ldr	x8, [sp, #32]
    2b44:	ldr	x9, [x8, #136]
    2b48:	add	x9, x9, #0x44
    2b4c:	ldursw	x10, [x29, #-44]
    2b50:	mov	w11, wzr
    2b54:	str	w11, [x9, x10, lsl #2]
    2b58:	ldur	w8, [x29, #-44]
    2b5c:	add	w8, w8, #0x1
    2b60:	stur	w8, [x29, #-44]
    2b64:	b	2b34 <BZ2_decompress+0x2b34>
    2b68:	mov	w8, #0xfff                 	// #4095
    2b6c:	str	w8, [sp, #140]
    2b70:	mov	w8, #0xf                   	// #15
    2b74:	str	w8, [sp, #148]
    2b78:	ldr	w8, [sp, #148]
    2b7c:	cmp	w8, #0x0
    2b80:	cset	w8, lt  // lt = tstop
    2b84:	tbnz	w8, #0, 2c18 <BZ2_decompress+0x2c18>
    2b88:	mov	w8, #0xf                   	// #15
    2b8c:	str	w8, [sp, #144]
    2b90:	ldr	w8, [sp, #144]
    2b94:	cmp	w8, #0x0
    2b98:	cset	w8, lt  // lt = tstop
    2b9c:	tbnz	w8, #0, 2be8 <BZ2_decompress+0x2be8>
    2ba0:	ldr	w8, [sp, #148]
    2ba4:	mov	w9, #0x10                  	// #16
    2ba8:	mul	w8, w8, w9
    2bac:	ldr	w9, [sp, #144]
    2bb0:	add	w8, w8, w9
    2bb4:	ldr	x10, [sp, #32]
    2bb8:	ldr	x11, [x10, #136]
    2bbc:	add	x11, x11, #0xe8c
    2bc0:	ldrsw	x12, [sp, #140]
    2bc4:	add	x11, x11, x12
    2bc8:	strb	w8, [x11]
    2bcc:	ldr	w8, [sp, #140]
    2bd0:	subs	w8, w8, #0x1
    2bd4:	str	w8, [sp, #140]
    2bd8:	ldr	w8, [sp, #144]
    2bdc:	subs	w8, w8, #0x1
    2be0:	str	w8, [sp, #144]
    2be4:	b	2b90 <BZ2_decompress+0x2b90>
    2be8:	ldr	w8, [sp, #140]
    2bec:	add	w8, w8, #0x1
    2bf0:	ldr	x9, [sp, #32]
    2bf4:	ldr	x10, [x9, #136]
    2bf8:	mov	x11, #0x1e8c                	// #7820
    2bfc:	add	x10, x10, x11
    2c00:	ldrsw	x11, [sp, #148]
    2c04:	str	w8, [x10, x11, lsl #2]
    2c08:	ldr	w8, [sp, #148]
    2c0c:	subs	w8, w8, #0x1
    2c10:	str	w8, [sp, #148]
    2c14:	b	2b78 <BZ2_decompress+0x2b78>
    2c18:	stur	wzr, [x29, #-88]
    2c1c:	ldur	w8, [x29, #-76]
    2c20:	cbnz	w8, 2ce0 <BZ2_decompress+0x2ce0>
    2c24:	ldur	w8, [x29, #-72]
    2c28:	add	w8, w8, #0x1
    2c2c:	stur	w8, [x29, #-72]
    2c30:	ldur	w8, [x29, #-72]
    2c34:	ldur	w9, [x29, #-64]
    2c38:	cmp	w8, w9
    2c3c:	b.lt	2c4c <BZ2_decompress+0x2c4c>  // b.tstop
    2c40:	mov	w8, #0xfffffffc            	// #-4
    2c44:	stur	w8, [x29, #-24]
    2c48:	b	55a0 <BZ2_decompress+0x55a0>
    2c4c:	mov	w8, #0x32                  	// #50
    2c50:	stur	w8, [x29, #-76]
    2c54:	ldr	x9, [sp, #32]
    2c58:	ldr	x10, [x9, #136]
    2c5c:	mov	x11, #0x1ecc                	// #7884
    2c60:	add	x10, x10, x11
    2c64:	ldursw	x11, [x29, #-72]
    2c68:	ldrb	w8, [x10, x11]
    2c6c:	stur	w8, [x29, #-120]
    2c70:	ldr	x10, [x9, #136]
    2c74:	mov	x11, #0xfa0c                	// #64012
    2c78:	add	x10, x10, x11
    2c7c:	ldursw	x11, [x29, #-120]
    2c80:	ldr	w8, [x10, x11, lsl #2]
    2c84:	stur	w8, [x29, #-124]
    2c88:	ldr	x10, [x9, #136]
    2c8c:	mov	x11, #0xb17c                	// #45436
    2c90:	add	x10, x10, x11
    2c94:	ldursw	x11, [x29, #-120]
    2c98:	mov	x12, #0x408                 	// #1032
    2c9c:	mul	x11, x12, x11
    2ca0:	add	x10, x10, x11
    2ca4:	str	x10, [x9, #16]
    2ca8:	ldr	x10, [x9, #136]
    2cac:	mov	x11, #0xe1dc                	// #57820
    2cb0:	add	x10, x10, x11
    2cb4:	ldursw	x11, [x29, #-120]
    2cb8:	mul	x11, x12, x11
    2cbc:	add	x10, x10, x11
    2cc0:	str	x10, [x9]
    2cc4:	ldr	x10, [x9, #136]
    2cc8:	mov	x11, #0xc9ac                	// #51628
    2ccc:	add	x10, x10, x11
    2cd0:	ldursw	x11, [x29, #-120]
    2cd4:	mul	x11, x12, x11
    2cd8:	add	x10, x10, x11
    2cdc:	str	x10, [x9, #8]
    2ce0:	ldur	w8, [x29, #-76]
    2ce4:	subs	w8, w8, #0x1
    2ce8:	stur	w8, [x29, #-76]
    2cec:	ldur	w8, [x29, #-124]
    2cf0:	stur	w8, [x29, #-108]
    2cf4:	ldr	x8, [sp, #32]
    2cf8:	ldr	x9, [x8, #136]
    2cfc:	mov	w10, #0x24                  	// #36
    2d00:	str	w10, [x9, #8]
    2d04:	ldr	x8, [sp, #32]
    2d08:	ldr	x9, [x8, #136]
    2d0c:	ldr	w10, [x9, #36]
    2d10:	ldur	w11, [x29, #-108]
    2d14:	cmp	w10, w11
    2d18:	b.lt	2d74 <BZ2_decompress+0x2d74>  // b.tstop
    2d1c:	ldr	x8, [sp, #32]
    2d20:	ldr	x9, [x8, #136]
    2d24:	ldr	w10, [x9, #32]
    2d28:	ldr	x9, [x8, #136]
    2d2c:	ldr	w11, [x9, #36]
    2d30:	ldur	w12, [x29, #-108]
    2d34:	subs	w11, w11, w12
    2d38:	lsr	w10, w10, w11
    2d3c:	ldur	w11, [x29, #-108]
    2d40:	mov	w12, #0x1                   	// #1
    2d44:	lsl	w11, w12, w11
    2d48:	subs	w11, w11, #0x1
    2d4c:	and	w10, w10, w11
    2d50:	str	w10, [sp, #136]
    2d54:	ldur	w10, [x29, #-108]
    2d58:	ldr	x9, [x8, #136]
    2d5c:	ldr	w11, [x9, #36]
    2d60:	subs	w10, w11, w10
    2d64:	str	w10, [x9, #36]
    2d68:	ldr	w10, [sp, #136]
    2d6c:	stur	w10, [x29, #-112]
    2d70:	b	2e30 <BZ2_decompress+0x2e30>
    2d74:	ldr	x8, [sp, #32]
    2d78:	ldr	x9, [x8, #136]
    2d7c:	ldr	x9, [x9]
    2d80:	ldr	w10, [x9, #8]
    2d84:	cbnz	w10, 2d90 <BZ2_decompress+0x2d90>
    2d88:	stur	wzr, [x29, #-24]
    2d8c:	b	55a0 <BZ2_decompress+0x55a0>
    2d90:	ldr	x8, [sp, #32]
    2d94:	ldr	x9, [x8, #136]
    2d98:	ldr	w10, [x9, #32]
    2d9c:	ldr	x9, [x8, #136]
    2da0:	ldr	x9, [x9]
    2da4:	ldr	x9, [x9]
    2da8:	ldrb	w11, [x9]
    2dac:	orr	w10, w11, w10, lsl #8
    2db0:	ldr	x9, [x8, #136]
    2db4:	str	w10, [x9, #32]
    2db8:	ldr	x9, [x8, #136]
    2dbc:	ldr	w10, [x9, #36]
    2dc0:	add	w10, w10, #0x8
    2dc4:	str	w10, [x9, #36]
    2dc8:	ldr	x9, [x8, #136]
    2dcc:	ldr	x9, [x9]
    2dd0:	ldr	x12, [x9]
    2dd4:	add	x12, x12, #0x1
    2dd8:	str	x12, [x9]
    2ddc:	ldr	x9, [x8, #136]
    2de0:	ldr	x9, [x9]
    2de4:	ldr	w10, [x9, #8]
    2de8:	subs	w10, w10, #0x1
    2dec:	str	w10, [x9, #8]
    2df0:	ldr	x9, [x8, #136]
    2df4:	ldr	x9, [x9]
    2df8:	ldr	w10, [x9, #12]
    2dfc:	add	w10, w10, #0x1
    2e00:	str	w10, [x9, #12]
    2e04:	ldr	x9, [x8, #136]
    2e08:	ldr	x9, [x9]
    2e0c:	ldr	w10, [x9, #12]
    2e10:	cbnz	w10, 2e2c <BZ2_decompress+0x2e2c>
    2e14:	ldr	x8, [sp, #32]
    2e18:	ldr	x9, [x8, #136]
    2e1c:	ldr	x9, [x9]
    2e20:	ldr	w10, [x9, #16]
    2e24:	add	w10, w10, #0x1
    2e28:	str	w10, [x9, #16]
    2e2c:	b	2d04 <BZ2_decompress+0x2d04>
    2e30:	ldur	w8, [x29, #-108]
    2e34:	cmp	w8, #0x14
    2e38:	b.le	2e48 <BZ2_decompress+0x2e48>
    2e3c:	mov	w8, #0xfffffffc            	// #-4
    2e40:	stur	w8, [x29, #-24]
    2e44:	b	55a0 <BZ2_decompress+0x55a0>
    2e48:	ldur	w8, [x29, #-112]
    2e4c:	ldr	x9, [sp, #32]
    2e50:	ldr	x10, [x9, #16]
    2e54:	ldursw	x11, [x29, #-108]
    2e58:	ldr	w12, [x10, x11, lsl #2]
    2e5c:	cmp	w8, w12
    2e60:	b.gt	2e68 <BZ2_decompress+0x2e68>
    2e64:	b	2fa8 <BZ2_decompress+0x2fa8>
    2e68:	ldur	w8, [x29, #-108]
    2e6c:	add	w8, w8, #0x1
    2e70:	stur	w8, [x29, #-108]
    2e74:	ldr	x8, [sp, #32]
    2e78:	ldr	x9, [x8, #136]
    2e7c:	mov	w10, #0x25                  	// #37
    2e80:	str	w10, [x9, #8]
    2e84:	ldr	x8, [sp, #32]
    2e88:	ldr	x9, [x8, #136]
    2e8c:	ldr	w10, [x9, #36]
    2e90:	cmp	w10, #0x1
    2e94:	b.lt	2ed8 <BZ2_decompress+0x2ed8>  // b.tstop
    2e98:	ldr	x8, [sp, #32]
    2e9c:	ldr	x9, [x8, #136]
    2ea0:	ldr	w10, [x9, #32]
    2ea4:	ldr	x9, [x8, #136]
    2ea8:	ldr	w11, [x9, #36]
    2eac:	subs	w11, w11, #0x1
    2eb0:	lsr	w10, w10, w11
    2eb4:	and	w10, w10, #0x1
    2eb8:	str	w10, [sp, #132]
    2ebc:	ldr	x9, [x8, #136]
    2ec0:	ldr	w10, [x9, #36]
    2ec4:	subs	w10, w10, #0x1
    2ec8:	str	w10, [x9, #36]
    2ecc:	ldr	w10, [sp, #132]
    2ed0:	stur	w10, [x29, #-116]
    2ed4:	b	2f94 <BZ2_decompress+0x2f94>
    2ed8:	ldr	x8, [sp, #32]
    2edc:	ldr	x9, [x8, #136]
    2ee0:	ldr	x9, [x9]
    2ee4:	ldr	w10, [x9, #8]
    2ee8:	cbnz	w10, 2ef4 <BZ2_decompress+0x2ef4>
    2eec:	stur	wzr, [x29, #-24]
    2ef0:	b	55a0 <BZ2_decompress+0x55a0>
    2ef4:	ldr	x8, [sp, #32]
    2ef8:	ldr	x9, [x8, #136]
    2efc:	ldr	w10, [x9, #32]
    2f00:	ldr	x9, [x8, #136]
    2f04:	ldr	x9, [x9]
    2f08:	ldr	x9, [x9]
    2f0c:	ldrb	w11, [x9]
    2f10:	orr	w10, w11, w10, lsl #8
    2f14:	ldr	x9, [x8, #136]
    2f18:	str	w10, [x9, #32]
    2f1c:	ldr	x9, [x8, #136]
    2f20:	ldr	w10, [x9, #36]
    2f24:	add	w10, w10, #0x8
    2f28:	str	w10, [x9, #36]
    2f2c:	ldr	x9, [x8, #136]
    2f30:	ldr	x9, [x9]
    2f34:	ldr	x12, [x9]
    2f38:	add	x12, x12, #0x1
    2f3c:	str	x12, [x9]
    2f40:	ldr	x9, [x8, #136]
    2f44:	ldr	x9, [x9]
    2f48:	ldr	w10, [x9, #8]
    2f4c:	subs	w10, w10, #0x1
    2f50:	str	w10, [x9, #8]
    2f54:	ldr	x9, [x8, #136]
    2f58:	ldr	x9, [x9]
    2f5c:	ldr	w10, [x9, #12]
    2f60:	add	w10, w10, #0x1
    2f64:	str	w10, [x9, #12]
    2f68:	ldr	x9, [x8, #136]
    2f6c:	ldr	x9, [x9]
    2f70:	ldr	w10, [x9, #12]
    2f74:	cbnz	w10, 2f90 <BZ2_decompress+0x2f90>
    2f78:	ldr	x8, [sp, #32]
    2f7c:	ldr	x9, [x8, #136]
    2f80:	ldr	x9, [x9]
    2f84:	ldr	w10, [x9, #16]
    2f88:	add	w10, w10, #0x1
    2f8c:	str	w10, [x9, #16]
    2f90:	b	2e84 <BZ2_decompress+0x2e84>
    2f94:	ldur	w8, [x29, #-112]
    2f98:	ldur	w9, [x29, #-116]
    2f9c:	orr	w8, w9, w8, lsl #1
    2fa0:	stur	w8, [x29, #-112]
    2fa4:	b	2e30 <BZ2_decompress+0x2e30>
    2fa8:	ldur	w8, [x29, #-112]
    2fac:	ldr	x9, [sp, #32]
    2fb0:	ldr	x10, [x9, #8]
    2fb4:	ldursw	x11, [x29, #-108]
    2fb8:	ldr	w12, [x10, x11, lsl #2]
    2fbc:	subs	w8, w8, w12
    2fc0:	cmp	w8, #0x0
    2fc4:	cset	w8, lt  // lt = tstop
    2fc8:	tbnz	w8, #0, 2fec <BZ2_decompress+0x2fec>
    2fcc:	ldur	w8, [x29, #-112]
    2fd0:	ldr	x9, [sp, #32]
    2fd4:	ldr	x10, [x9, #8]
    2fd8:	ldursw	x11, [x29, #-108]
    2fdc:	ldr	w12, [x10, x11, lsl #2]
    2fe0:	subs	w8, w8, w12
    2fe4:	cmp	w8, #0x102
    2fe8:	b.lt	2ff8 <BZ2_decompress+0x2ff8>  // b.tstop
    2fec:	mov	w8, #0xfffffffc            	// #-4
    2ff0:	stur	w8, [x29, #-24]
    2ff4:	b	55a0 <BZ2_decompress+0x55a0>
    2ff8:	ldr	x8, [sp, #32]
    2ffc:	ldr	x9, [x8]
    3000:	ldur	w10, [x29, #-112]
    3004:	ldr	x11, [x8, #8]
    3008:	ldursw	x12, [x29, #-108]
    300c:	ldr	w13, [x11, x12, lsl #2]
    3010:	subs	w10, w10, w13
    3014:	ldr	w10, [x9, w10, sxtw #2]
    3018:	stur	w10, [x29, #-80]
    301c:	ldur	w8, [x29, #-80]
    3020:	ldur	w9, [x29, #-68]
    3024:	cmp	w8, w9
    3028:	b.ne	3030 <BZ2_decompress+0x3030>  // b.any
    302c:	b	3fb0 <BZ2_decompress+0x3fb0>
    3030:	ldur	w8, [x29, #-80]
    3034:	cbz	w8, 3044 <BZ2_decompress+0x3044>
    3038:	ldur	w8, [x29, #-80]
    303c:	cmp	w8, #0x1
    3040:	b.ne	3634 <BZ2_decompress+0x3634>  // b.any
    3044:	mov	w8, #0xffffffff            	// #-1
    3048:	stur	w8, [x29, #-92]
    304c:	mov	w8, #0x1                   	// #1
    3050:	stur	w8, [x29, #-96]
    3054:	ldur	w8, [x29, #-96]
    3058:	cmp	w8, #0x200, lsl #12
    305c:	b.lt	306c <BZ2_decompress+0x306c>  // b.tstop
    3060:	mov	w8, #0xfffffffc            	// #-4
    3064:	stur	w8, [x29, #-24]
    3068:	b	55a0 <BZ2_decompress+0x55a0>
    306c:	ldur	w8, [x29, #-80]
    3070:	cbnz	w8, 3090 <BZ2_decompress+0x3090>
    3074:	ldur	w8, [x29, #-92]
    3078:	ldur	w9, [x29, #-96]
    307c:	mov	w10, #0x1                   	// #1
    3080:	mul	w9, w10, w9
    3084:	add	w8, w8, w9
    3088:	stur	w8, [x29, #-92]
    308c:	b	30b4 <BZ2_decompress+0x30b4>
    3090:	ldur	w8, [x29, #-80]
    3094:	cmp	w8, #0x1
    3098:	b.ne	30b4 <BZ2_decompress+0x30b4>  // b.any
    309c:	ldur	w8, [x29, #-92]
    30a0:	ldur	w9, [x29, #-96]
    30a4:	mov	w10, #0x2                   	// #2
    30a8:	mul	w9, w10, w9
    30ac:	add	w8, w8, w9
    30b0:	stur	w8, [x29, #-92]
    30b4:	ldur	w8, [x29, #-96]
    30b8:	mov	w9, #0x2                   	// #2
    30bc:	mul	w8, w8, w9
    30c0:	stur	w8, [x29, #-96]
    30c4:	ldur	w8, [x29, #-76]
    30c8:	cbnz	w8, 3188 <BZ2_decompress+0x3188>
    30cc:	ldur	w8, [x29, #-72]
    30d0:	add	w8, w8, #0x1
    30d4:	stur	w8, [x29, #-72]
    30d8:	ldur	w8, [x29, #-72]
    30dc:	ldur	w9, [x29, #-64]
    30e0:	cmp	w8, w9
    30e4:	b.lt	30f4 <BZ2_decompress+0x30f4>  // b.tstop
    30e8:	mov	w8, #0xfffffffc            	// #-4
    30ec:	stur	w8, [x29, #-24]
    30f0:	b	55a0 <BZ2_decompress+0x55a0>
    30f4:	mov	w8, #0x32                  	// #50
    30f8:	stur	w8, [x29, #-76]
    30fc:	ldr	x9, [sp, #32]
    3100:	ldr	x10, [x9, #136]
    3104:	mov	x11, #0x1ecc                	// #7884
    3108:	add	x10, x10, x11
    310c:	ldursw	x11, [x29, #-72]
    3110:	ldrb	w8, [x10, x11]
    3114:	stur	w8, [x29, #-120]
    3118:	ldr	x10, [x9, #136]
    311c:	mov	x11, #0xfa0c                	// #64012
    3120:	add	x10, x10, x11
    3124:	ldursw	x11, [x29, #-120]
    3128:	ldr	w8, [x10, x11, lsl #2]
    312c:	stur	w8, [x29, #-124]
    3130:	ldr	x10, [x9, #136]
    3134:	mov	x11, #0xb17c                	// #45436
    3138:	add	x10, x10, x11
    313c:	ldursw	x11, [x29, #-120]
    3140:	mov	x12, #0x408                 	// #1032
    3144:	mul	x11, x12, x11
    3148:	add	x10, x10, x11
    314c:	str	x10, [x9, #16]
    3150:	ldr	x10, [x9, #136]
    3154:	mov	x11, #0xe1dc                	// #57820
    3158:	add	x10, x10, x11
    315c:	ldursw	x11, [x29, #-120]
    3160:	mul	x11, x12, x11
    3164:	add	x10, x10, x11
    3168:	str	x10, [x9]
    316c:	ldr	x10, [x9, #136]
    3170:	mov	x11, #0xc9ac                	// #51628
    3174:	add	x10, x10, x11
    3178:	ldursw	x11, [x29, #-120]
    317c:	mul	x11, x12, x11
    3180:	add	x10, x10, x11
    3184:	str	x10, [x9, #8]
    3188:	ldur	w8, [x29, #-76]
    318c:	subs	w8, w8, #0x1
    3190:	stur	w8, [x29, #-76]
    3194:	ldur	w8, [x29, #-124]
    3198:	stur	w8, [x29, #-108]
    319c:	ldr	x8, [sp, #32]
    31a0:	ldr	x9, [x8, #136]
    31a4:	mov	w10, #0x26                  	// #38
    31a8:	str	w10, [x9, #8]
    31ac:	ldr	x8, [sp, #32]
    31b0:	ldr	x9, [x8, #136]
    31b4:	ldr	w10, [x9, #36]
    31b8:	ldur	w11, [x29, #-108]
    31bc:	cmp	w10, w11
    31c0:	b.lt	321c <BZ2_decompress+0x321c>  // b.tstop
    31c4:	ldr	x8, [sp, #32]
    31c8:	ldr	x9, [x8, #136]
    31cc:	ldr	w10, [x9, #32]
    31d0:	ldr	x9, [x8, #136]
    31d4:	ldr	w11, [x9, #36]
    31d8:	ldur	w12, [x29, #-108]
    31dc:	subs	w11, w11, w12
    31e0:	lsr	w10, w10, w11
    31e4:	ldur	w11, [x29, #-108]
    31e8:	mov	w12, #0x1                   	// #1
    31ec:	lsl	w11, w12, w11
    31f0:	subs	w11, w11, #0x1
    31f4:	and	w10, w10, w11
    31f8:	str	w10, [sp, #128]
    31fc:	ldur	w10, [x29, #-108]
    3200:	ldr	x9, [x8, #136]
    3204:	ldr	w11, [x9, #36]
    3208:	subs	w10, w11, w10
    320c:	str	w10, [x9, #36]
    3210:	ldr	w10, [sp, #128]
    3214:	stur	w10, [x29, #-112]
    3218:	b	32d8 <BZ2_decompress+0x32d8>
    321c:	ldr	x8, [sp, #32]
    3220:	ldr	x9, [x8, #136]
    3224:	ldr	x9, [x9]
    3228:	ldr	w10, [x9, #8]
    322c:	cbnz	w10, 3238 <BZ2_decompress+0x3238>
    3230:	stur	wzr, [x29, #-24]
    3234:	b	55a0 <BZ2_decompress+0x55a0>
    3238:	ldr	x8, [sp, #32]
    323c:	ldr	x9, [x8, #136]
    3240:	ldr	w10, [x9, #32]
    3244:	ldr	x9, [x8, #136]
    3248:	ldr	x9, [x9]
    324c:	ldr	x9, [x9]
    3250:	ldrb	w11, [x9]
    3254:	orr	w10, w11, w10, lsl #8
    3258:	ldr	x9, [x8, #136]
    325c:	str	w10, [x9, #32]
    3260:	ldr	x9, [x8, #136]
    3264:	ldr	w10, [x9, #36]
    3268:	add	w10, w10, #0x8
    326c:	str	w10, [x9, #36]
    3270:	ldr	x9, [x8, #136]
    3274:	ldr	x9, [x9]
    3278:	ldr	x12, [x9]
    327c:	add	x12, x12, #0x1
    3280:	str	x12, [x9]
    3284:	ldr	x9, [x8, #136]
    3288:	ldr	x9, [x9]
    328c:	ldr	w10, [x9, #8]
    3290:	subs	w10, w10, #0x1
    3294:	str	w10, [x9, #8]
    3298:	ldr	x9, [x8, #136]
    329c:	ldr	x9, [x9]
    32a0:	ldr	w10, [x9, #12]
    32a4:	add	w10, w10, #0x1
    32a8:	str	w10, [x9, #12]
    32ac:	ldr	x9, [x8, #136]
    32b0:	ldr	x9, [x9]
    32b4:	ldr	w10, [x9, #12]
    32b8:	cbnz	w10, 32d4 <BZ2_decompress+0x32d4>
    32bc:	ldr	x8, [sp, #32]
    32c0:	ldr	x9, [x8, #136]
    32c4:	ldr	x9, [x9]
    32c8:	ldr	w10, [x9, #16]
    32cc:	add	w10, w10, #0x1
    32d0:	str	w10, [x9, #16]
    32d4:	b	31ac <BZ2_decompress+0x31ac>
    32d8:	ldur	w8, [x29, #-108]
    32dc:	cmp	w8, #0x14
    32e0:	b.le	32f0 <BZ2_decompress+0x32f0>
    32e4:	mov	w8, #0xfffffffc            	// #-4
    32e8:	stur	w8, [x29, #-24]
    32ec:	b	55a0 <BZ2_decompress+0x55a0>
    32f0:	ldur	w8, [x29, #-112]
    32f4:	ldr	x9, [sp, #32]
    32f8:	ldr	x10, [x9, #16]
    32fc:	ldursw	x11, [x29, #-108]
    3300:	ldr	w12, [x10, x11, lsl #2]
    3304:	cmp	w8, w12
    3308:	b.gt	3310 <BZ2_decompress+0x3310>
    330c:	b	3450 <BZ2_decompress+0x3450>
    3310:	ldur	w8, [x29, #-108]
    3314:	add	w8, w8, #0x1
    3318:	stur	w8, [x29, #-108]
    331c:	ldr	x8, [sp, #32]
    3320:	ldr	x9, [x8, #136]
    3324:	mov	w10, #0x27                  	// #39
    3328:	str	w10, [x9, #8]
    332c:	ldr	x8, [sp, #32]
    3330:	ldr	x9, [x8, #136]
    3334:	ldr	w10, [x9, #36]
    3338:	cmp	w10, #0x1
    333c:	b.lt	3380 <BZ2_decompress+0x3380>  // b.tstop
    3340:	ldr	x8, [sp, #32]
    3344:	ldr	x9, [x8, #136]
    3348:	ldr	w10, [x9, #32]
    334c:	ldr	x9, [x8, #136]
    3350:	ldr	w11, [x9, #36]
    3354:	subs	w11, w11, #0x1
    3358:	lsr	w10, w10, w11
    335c:	and	w10, w10, #0x1
    3360:	str	w10, [sp, #124]
    3364:	ldr	x9, [x8, #136]
    3368:	ldr	w10, [x9, #36]
    336c:	subs	w10, w10, #0x1
    3370:	str	w10, [x9, #36]
    3374:	ldr	w10, [sp, #124]
    3378:	stur	w10, [x29, #-116]
    337c:	b	343c <BZ2_decompress+0x343c>
    3380:	ldr	x8, [sp, #32]
    3384:	ldr	x9, [x8, #136]
    3388:	ldr	x9, [x9]
    338c:	ldr	w10, [x9, #8]
    3390:	cbnz	w10, 339c <BZ2_decompress+0x339c>
    3394:	stur	wzr, [x29, #-24]
    3398:	b	55a0 <BZ2_decompress+0x55a0>
    339c:	ldr	x8, [sp, #32]
    33a0:	ldr	x9, [x8, #136]
    33a4:	ldr	w10, [x9, #32]
    33a8:	ldr	x9, [x8, #136]
    33ac:	ldr	x9, [x9]
    33b0:	ldr	x9, [x9]
    33b4:	ldrb	w11, [x9]
    33b8:	orr	w10, w11, w10, lsl #8
    33bc:	ldr	x9, [x8, #136]
    33c0:	str	w10, [x9, #32]
    33c4:	ldr	x9, [x8, #136]
    33c8:	ldr	w10, [x9, #36]
    33cc:	add	w10, w10, #0x8
    33d0:	str	w10, [x9, #36]
    33d4:	ldr	x9, [x8, #136]
    33d8:	ldr	x9, [x9]
    33dc:	ldr	x12, [x9]
    33e0:	add	x12, x12, #0x1
    33e4:	str	x12, [x9]
    33e8:	ldr	x9, [x8, #136]
    33ec:	ldr	x9, [x9]
    33f0:	ldr	w10, [x9, #8]
    33f4:	subs	w10, w10, #0x1
    33f8:	str	w10, [x9, #8]
    33fc:	ldr	x9, [x8, #136]
    3400:	ldr	x9, [x9]
    3404:	ldr	w10, [x9, #12]
    3408:	add	w10, w10, #0x1
    340c:	str	w10, [x9, #12]
    3410:	ldr	x9, [x8, #136]
    3414:	ldr	x9, [x9]
    3418:	ldr	w10, [x9, #12]
    341c:	cbnz	w10, 3438 <BZ2_decompress+0x3438>
    3420:	ldr	x8, [sp, #32]
    3424:	ldr	x9, [x8, #136]
    3428:	ldr	x9, [x9]
    342c:	ldr	w10, [x9, #16]
    3430:	add	w10, w10, #0x1
    3434:	str	w10, [x9, #16]
    3438:	b	332c <BZ2_decompress+0x332c>
    343c:	ldur	w8, [x29, #-112]
    3440:	ldur	w9, [x29, #-116]
    3444:	orr	w8, w9, w8, lsl #1
    3448:	stur	w8, [x29, #-112]
    344c:	b	32d8 <BZ2_decompress+0x32d8>
    3450:	ldur	w8, [x29, #-112]
    3454:	ldr	x9, [sp, #32]
    3458:	ldr	x10, [x9, #8]
    345c:	ldursw	x11, [x29, #-108]
    3460:	ldr	w12, [x10, x11, lsl #2]
    3464:	subs	w8, w8, w12
    3468:	cmp	w8, #0x0
    346c:	cset	w8, lt  // lt = tstop
    3470:	tbnz	w8, #0, 3494 <BZ2_decompress+0x3494>
    3474:	ldur	w8, [x29, #-112]
    3478:	ldr	x9, [sp, #32]
    347c:	ldr	x10, [x9, #8]
    3480:	ldursw	x11, [x29, #-108]
    3484:	ldr	w12, [x10, x11, lsl #2]
    3488:	subs	w8, w8, w12
    348c:	cmp	w8, #0x102
    3490:	b.lt	34a0 <BZ2_decompress+0x34a0>  // b.tstop
    3494:	mov	w8, #0xfffffffc            	// #-4
    3498:	stur	w8, [x29, #-24]
    349c:	b	55a0 <BZ2_decompress+0x55a0>
    34a0:	ldr	x8, [sp, #32]
    34a4:	ldr	x9, [x8]
    34a8:	ldur	w10, [x29, #-112]
    34ac:	ldr	x11, [x8, #8]
    34b0:	ldursw	x12, [x29, #-108]
    34b4:	ldr	w13, [x11, x12, lsl #2]
    34b8:	subs	w10, w10, w13
    34bc:	ldr	w10, [x9, w10, sxtw #2]
    34c0:	stur	w10, [x29, #-80]
    34c4:	ldur	w8, [x29, #-80]
    34c8:	mov	w9, #0x1                   	// #1
    34cc:	str	w9, [sp, #12]
    34d0:	cbz	w8, 34e4 <BZ2_decompress+0x34e4>
    34d4:	ldur	w8, [x29, #-80]
    34d8:	cmp	w8, #0x1
    34dc:	cset	w8, eq  // eq = none
    34e0:	str	w8, [sp, #12]
    34e4:	ldr	w8, [sp, #12]
    34e8:	tbnz	w8, #0, 3054 <BZ2_decompress+0x3054>
    34ec:	ldur	w8, [x29, #-92]
    34f0:	add	w8, w8, #0x1
    34f4:	stur	w8, [x29, #-92]
    34f8:	ldr	x9, [sp, #32]
    34fc:	ldr	x10, [x9, #136]
    3500:	add	x10, x10, #0xd8c
    3504:	ldr	x11, [x9, #136]
    3508:	add	x11, x11, #0xe8c
    350c:	ldr	x12, [x9, #136]
    3510:	ldrsw	x12, [x12, #7820]
    3514:	ldrb	w8, [x11, x12]
    3518:	mov	w11, w8
    351c:	add	x10, x10, x11
    3520:	ldrb	w8, [x10]
    3524:	sturb	w8, [x29, #-17]
    3528:	ldur	w8, [x29, #-92]
    352c:	ldr	x10, [x9, #136]
    3530:	add	x10, x10, #0x44
    3534:	ldurb	w13, [x29, #-17]
    3538:	mov	w11, w13
    353c:	mov	x12, #0x4                   	// #4
    3540:	mul	x11, x12, x11
    3544:	add	x10, x10, x11
    3548:	ldr	w13, [x10]
    354c:	add	w8, w13, w8
    3550:	str	w8, [x10]
    3554:	ldr	x10, [x9, #136]
    3558:	ldrb	w8, [x10, #44]
    355c:	cbz	w8, 35d0 <BZ2_decompress+0x35d0>
    3560:	ldur	w8, [x29, #-92]
    3564:	cmp	w8, #0x0
    3568:	cset	w8, le
    356c:	tbnz	w8, #0, 35cc <BZ2_decompress+0x35cc>
    3570:	ldur	w8, [x29, #-88]
    3574:	ldur	w9, [x29, #-84]
    3578:	cmp	w8, w9
    357c:	b.lt	358c <BZ2_decompress+0x358c>  // b.tstop
    3580:	mov	w8, #0xfffffffc            	// #-4
    3584:	stur	w8, [x29, #-24]
    3588:	b	55a0 <BZ2_decompress+0x55a0>
    358c:	ldurb	w8, [x29, #-17]
    3590:	ldr	x9, [sp, #32]
    3594:	ldr	x10, [x9, #136]
    3598:	ldr	x10, [x10, #3160]
    359c:	ldursw	x11, [x29, #-88]
    35a0:	mov	x12, #0x2                   	// #2
    35a4:	mul	x11, x12, x11
    35a8:	add	x10, x10, x11
    35ac:	strh	w8, [x10]
    35b0:	ldur	w8, [x29, #-88]
    35b4:	add	w8, w8, #0x1
    35b8:	stur	w8, [x29, #-88]
    35bc:	ldur	w8, [x29, #-92]
    35c0:	subs	w8, w8, #0x1
    35c4:	stur	w8, [x29, #-92]
    35c8:	b	3560 <BZ2_decompress+0x3560>
    35cc:	b	3630 <BZ2_decompress+0x3630>
    35d0:	ldur	w8, [x29, #-92]
    35d4:	cmp	w8, #0x0
    35d8:	cset	w8, le
    35dc:	tbnz	w8, #0, 3630 <BZ2_decompress+0x3630>
    35e0:	ldur	w8, [x29, #-88]
    35e4:	ldur	w9, [x29, #-84]
    35e8:	cmp	w8, w9
    35ec:	b.lt	35fc <BZ2_decompress+0x35fc>  // b.tstop
    35f0:	mov	w8, #0xfffffffc            	// #-4
    35f4:	stur	w8, [x29, #-24]
    35f8:	b	55a0 <BZ2_decompress+0x55a0>
    35fc:	ldurb	w8, [x29, #-17]
    3600:	ldr	x9, [sp, #32]
    3604:	ldr	x10, [x9, #136]
    3608:	ldr	x10, [x10, #3152]
    360c:	ldursw	x11, [x29, #-88]
    3610:	str	w8, [x10, x11, lsl #2]
    3614:	ldur	w8, [x29, #-88]
    3618:	add	w8, w8, #0x1
    361c:	stur	w8, [x29, #-88]
    3620:	ldur	w8, [x29, #-92]
    3624:	subs	w8, w8, #0x1
    3628:	stur	w8, [x29, #-92]
    362c:	b	35d0 <BZ2_decompress+0x35d0>
    3630:	b	301c <BZ2_decompress+0x301c>
    3634:	ldur	w8, [x29, #-88]
    3638:	ldur	w9, [x29, #-84]
    363c:	cmp	w8, w9
    3640:	b.lt	3650 <BZ2_decompress+0x3650>  // b.tstop
    3644:	mov	w8, #0xfffffffc            	// #-4
    3648:	stur	w8, [x29, #-24]
    364c:	b	55a0 <BZ2_decompress+0x55a0>
    3650:	ldur	w8, [x29, #-80]
    3654:	subs	w8, w8, #0x1
    3658:	str	w8, [sp, #96]
    365c:	ldr	w8, [sp, #96]
    3660:	cmp	w8, #0x10
    3664:	b.cs	3854 <BZ2_decompress+0x3854>  // b.hs, b.nlast
    3668:	ldr	x8, [sp, #32]
    366c:	ldr	x9, [x8, #136]
    3670:	ldr	w10, [x9, #7820]
    3674:	str	w10, [sp, #108]
    3678:	ldr	x9, [x8, #136]
    367c:	add	x9, x9, #0xe8c
    3680:	ldr	w10, [sp, #108]
    3684:	ldr	w11, [sp, #96]
    3688:	add	w10, w10, w11
    368c:	mov	w12, w10
    3690:	ubfx	x12, x12, #0, #32
    3694:	add	x9, x9, x12
    3698:	ldrb	w10, [x9]
    369c:	sturb	w10, [x29, #-17]
    36a0:	ldr	w8, [sp, #96]
    36a4:	cmp	w8, #0x3
    36a8:	b.ls	37c4 <BZ2_decompress+0x37c4>  // b.plast
    36ac:	ldr	w8, [sp, #108]
    36b0:	ldr	w9, [sp, #96]
    36b4:	add	w8, w8, w9
    36b8:	str	w8, [sp, #92]
    36bc:	ldr	x10, [sp, #32]
    36c0:	ldr	x11, [x10, #136]
    36c4:	add	x11, x11, #0xe8c
    36c8:	ldr	w8, [sp, #92]
    36cc:	subs	w8, w8, #0x1
    36d0:	mov	w0, w8
    36d4:	sxtw	x12, w0
    36d8:	add	x11, x11, x12
    36dc:	ldrb	w8, [x11]
    36e0:	ldr	x11, [x10, #136]
    36e4:	add	x11, x11, #0xe8c
    36e8:	ldrsw	x12, [sp, #92]
    36ec:	add	x11, x11, x12
    36f0:	strb	w8, [x11]
    36f4:	ldr	x11, [x10, #136]
    36f8:	add	x11, x11, #0xe8c
    36fc:	ldr	w8, [sp, #92]
    3700:	subs	w8, w8, #0x2
    3704:	mov	w0, w8
    3708:	sxtw	x12, w0
    370c:	add	x11, x11, x12
    3710:	ldrb	w8, [x11]
    3714:	ldr	x11, [x10, #136]
    3718:	add	x11, x11, #0xe8c
    371c:	ldr	w9, [sp, #92]
    3720:	subs	w9, w9, #0x1
    3724:	mov	w0, w9
    3728:	sxtw	x12, w0
    372c:	add	x11, x11, x12
    3730:	strb	w8, [x11]
    3734:	ldr	x11, [x10, #136]
    3738:	add	x11, x11, #0xe8c
    373c:	ldr	w8, [sp, #92]
    3740:	subs	w8, w8, #0x3
    3744:	mov	w0, w8
    3748:	sxtw	x12, w0
    374c:	add	x11, x11, x12
    3750:	ldrb	w8, [x11]
    3754:	ldr	x11, [x10, #136]
    3758:	add	x11, x11, #0xe8c
    375c:	ldr	w9, [sp, #92]
    3760:	subs	w9, w9, #0x2
    3764:	mov	w0, w9
    3768:	sxtw	x12, w0
    376c:	add	x11, x11, x12
    3770:	strb	w8, [x11]
    3774:	ldr	x11, [x10, #136]
    3778:	add	x11, x11, #0xe8c
    377c:	ldr	w8, [sp, #92]
    3780:	subs	w8, w8, #0x4
    3784:	mov	w0, w8
    3788:	sxtw	x12, w0
    378c:	add	x11, x11, x12
    3790:	ldrb	w8, [x11]
    3794:	ldr	x11, [x10, #136]
    3798:	add	x11, x11, #0xe8c
    379c:	ldr	w9, [sp, #92]
    37a0:	subs	w9, w9, #0x3
    37a4:	mov	w0, w9
    37a8:	sxtw	x12, w0
    37ac:	add	x11, x11, x12
    37b0:	strb	w8, [x11]
    37b4:	ldr	w8, [sp, #96]
    37b8:	subs	w8, w8, #0x4
    37bc:	str	w8, [sp, #96]
    37c0:	b	36a0 <BZ2_decompress+0x36a0>
    37c4:	ldr	w8, [sp, #96]
    37c8:	cmp	w8, #0x0
    37cc:	cset	w8, ls  // ls = plast
    37d0:	tbnz	w8, #0, 3834 <BZ2_decompress+0x3834>
    37d4:	ldr	x8, [sp, #32]
    37d8:	ldr	x9, [x8, #136]
    37dc:	add	x9, x9, #0xe8c
    37e0:	ldr	w10, [sp, #108]
    37e4:	ldr	w11, [sp, #96]
    37e8:	add	w10, w10, w11
    37ec:	subs	w10, w10, #0x1
    37f0:	mov	w12, w10
    37f4:	ubfx	x12, x12, #0, #32
    37f8:	add	x9, x9, x12
    37fc:	ldrb	w10, [x9]
    3800:	ldr	x9, [x8, #136]
    3804:	add	x9, x9, #0xe8c
    3808:	ldr	w11, [sp, #108]
    380c:	ldr	w13, [sp, #96]
    3810:	add	w11, w11, w13
    3814:	mov	w12, w11
    3818:	ubfx	x12, x12, #0, #32
    381c:	add	x9, x9, x12
    3820:	strb	w10, [x9]
    3824:	ldr	w10, [sp, #96]
    3828:	subs	w10, w10, #0x1
    382c:	str	w10, [sp, #96]
    3830:	b	37c4 <BZ2_decompress+0x37c4>
    3834:	ldurb	w8, [x29, #-17]
    3838:	ldr	x9, [sp, #32]
    383c:	ldr	x10, [x9, #136]
    3840:	add	x10, x10, #0xe8c
    3844:	ldrsw	x11, [sp, #108]
    3848:	add	x10, x10, x11
    384c:	strb	w8, [x10]
    3850:	b	3af8 <BZ2_decompress+0x3af8>
    3854:	ldr	w8, [sp, #96]
    3858:	mov	w9, #0x10                  	// #16
    385c:	udiv	w8, w8, w9
    3860:	str	w8, [sp, #104]
    3864:	ldr	w8, [sp, #96]
    3868:	udiv	w10, w8, w9
    386c:	mul	w9, w10, w9
    3870:	subs	w8, w8, w9
    3874:	str	w8, [sp, #100]
    3878:	ldr	x11, [sp, #32]
    387c:	ldr	x12, [x11, #136]
    3880:	mov	x13, #0x1e8c                	// #7820
    3884:	add	x12, x12, x13
    3888:	ldrsw	x13, [sp, #104]
    388c:	ldr	w8, [x12, x13, lsl #2]
    3890:	ldr	w9, [sp, #100]
    3894:	add	w8, w8, w9
    3898:	str	w8, [sp, #108]
    389c:	ldr	x12, [x11, #136]
    38a0:	add	x12, x12, #0xe8c
    38a4:	ldrsw	x13, [sp, #108]
    38a8:	add	x12, x12, x13
    38ac:	ldrb	w8, [x12]
    38b0:	sturb	w8, [x29, #-17]
    38b4:	ldr	w8, [sp, #108]
    38b8:	ldr	x9, [sp, #32]
    38bc:	ldr	x10, [x9, #136]
    38c0:	mov	x11, #0x1e8c                	// #7820
    38c4:	add	x10, x10, x11
    38c8:	ldrsw	x11, [sp, #104]
    38cc:	ldr	w12, [x10, x11, lsl #2]
    38d0:	cmp	w8, w12
    38d4:	b.le	3920 <BZ2_decompress+0x3920>
    38d8:	ldr	x8, [sp, #32]
    38dc:	ldr	x9, [x8, #136]
    38e0:	add	x9, x9, #0xe8c
    38e4:	ldr	w10, [sp, #108]
    38e8:	subs	w10, w10, #0x1
    38ec:	mov	w0, w10
    38f0:	sxtw	x11, w0
    38f4:	add	x9, x9, x11
    38f8:	ldrb	w10, [x9]
    38fc:	ldr	x9, [x8, #136]
    3900:	add	x9, x9, #0xe8c
    3904:	ldrsw	x11, [sp, #108]
    3908:	add	x9, x9, x11
    390c:	strb	w10, [x9]
    3910:	ldr	w10, [sp, #108]
    3914:	subs	w10, w10, #0x1
    3918:	str	w10, [sp, #108]
    391c:	b	38b4 <BZ2_decompress+0x38b4>
    3920:	ldr	x8, [sp, #32]
    3924:	ldr	x9, [x8, #136]
    3928:	mov	x10, #0x1e8c                	// #7820
    392c:	add	x9, x9, x10
    3930:	ldrsw	x10, [sp, #104]
    3934:	mov	x11, #0x4                   	// #4
    3938:	mul	x10, x11, x10
    393c:	add	x9, x9, x10
    3940:	ldr	w12, [x9]
    3944:	add	w12, w12, #0x1
    3948:	str	w12, [x9]
    394c:	ldr	w8, [sp, #104]
    3950:	cmp	w8, #0x0
    3954:	cset	w8, le
    3958:	tbnz	w8, #0, 39ec <BZ2_decompress+0x39ec>
    395c:	ldr	x8, [sp, #32]
    3960:	ldr	x9, [x8, #136]
    3964:	mov	x10, #0x1e8c                	// #7820
    3968:	add	x9, x9, x10
    396c:	ldrsw	x11, [sp, #104]
    3970:	mov	x12, #0x4                   	// #4
    3974:	mul	x11, x12, x11
    3978:	add	x9, x9, x11
    397c:	ldr	w13, [x9]
    3980:	subs	w13, w13, #0x1
    3984:	str	w13, [x9]
    3988:	ldr	x9, [x8, #136]
    398c:	add	x9, x9, #0xe8c
    3990:	ldr	x11, [x8, #136]
    3994:	add	x11, x11, x10
    3998:	ldr	w13, [sp, #104]
    399c:	subs	w13, w13, #0x1
    39a0:	ldr	w13, [x11, w13, sxtw #2]
    39a4:	add	w13, w13, #0x10
    39a8:	subs	w13, w13, #0x1
    39ac:	mov	w0, w13
    39b0:	sxtw	x11, w0
    39b4:	add	x9, x9, x11
    39b8:	ldrb	w13, [x9]
    39bc:	ldr	x9, [x8, #136]
    39c0:	add	x9, x9, #0xe8c
    39c4:	ldr	x11, [x8, #136]
    39c8:	add	x10, x11, x10
    39cc:	ldrsw	x11, [sp, #104]
    39d0:	ldrsw	x10, [x10, x11, lsl #2]
    39d4:	add	x9, x9, x10
    39d8:	strb	w13, [x9]
    39dc:	ldr	w13, [sp, #104]
    39e0:	subs	w13, w13, #0x1
    39e4:	str	w13, [sp, #104]
    39e8:	b	394c <BZ2_decompress+0x394c>
    39ec:	ldr	x8, [sp, #32]
    39f0:	ldr	x9, [x8, #136]
    39f4:	ldr	w10, [x9, #7820]
    39f8:	subs	w10, w10, #0x1
    39fc:	str	w10, [x9, #7820]
    3a00:	ldurb	w10, [x29, #-17]
    3a04:	ldr	x9, [x8, #136]
    3a08:	add	x9, x9, #0xe8c
    3a0c:	ldr	x11, [x8, #136]
    3a10:	ldrsw	x11, [x11, #7820]
    3a14:	add	x9, x9, x11
    3a18:	strb	w10, [x9]
    3a1c:	ldr	x9, [x8, #136]
    3a20:	ldr	w10, [x9, #7820]
    3a24:	cbnz	w10, 3af8 <BZ2_decompress+0x3af8>
    3a28:	mov	w8, #0xfff                 	// #4095
    3a2c:	str	w8, [sp, #112]
    3a30:	mov	w8, #0xf                   	// #15
    3a34:	str	w8, [sp, #120]
    3a38:	ldr	w8, [sp, #120]
    3a3c:	cmp	w8, #0x0
    3a40:	cset	w8, lt  // lt = tstop
    3a44:	tbnz	w8, #0, 3af8 <BZ2_decompress+0x3af8>
    3a48:	mov	w8, #0xf                   	// #15
    3a4c:	str	w8, [sp, #116]
    3a50:	ldr	w8, [sp, #116]
    3a54:	cmp	w8, #0x0
    3a58:	cset	w8, lt  // lt = tstop
    3a5c:	tbnz	w8, #0, 3ac8 <BZ2_decompress+0x3ac8>
    3a60:	ldr	x8, [sp, #32]
    3a64:	ldr	x9, [x8, #136]
    3a68:	add	x9, x9, #0xe8c
    3a6c:	ldr	x10, [x8, #136]
    3a70:	mov	x11, #0x1e8c                	// #7820
    3a74:	add	x10, x10, x11
    3a78:	ldrsw	x11, [sp, #120]
    3a7c:	ldr	w12, [x10, x11, lsl #2]
    3a80:	ldr	w13, [sp, #116]
    3a84:	add	w12, w12, w13
    3a88:	mov	w0, w12
    3a8c:	sxtw	x10, w0
    3a90:	add	x9, x9, x10
    3a94:	ldrb	w12, [x9]
    3a98:	ldr	x9, [x8, #136]
    3a9c:	add	x9, x9, #0xe8c
    3aa0:	ldrsw	x10, [sp, #112]
    3aa4:	add	x9, x9, x10
    3aa8:	strb	w12, [x9]
    3aac:	ldr	w12, [sp, #112]
    3ab0:	subs	w12, w12, #0x1
    3ab4:	str	w12, [sp, #112]
    3ab8:	ldr	w8, [sp, #116]
    3abc:	subs	w8, w8, #0x1
    3ac0:	str	w8, [sp, #116]
    3ac4:	b	3a50 <BZ2_decompress+0x3a50>
    3ac8:	ldr	w8, [sp, #112]
    3acc:	add	w8, w8, #0x1
    3ad0:	ldr	x9, [sp, #32]
    3ad4:	ldr	x10, [x9, #136]
    3ad8:	mov	x11, #0x1e8c                	// #7820
    3adc:	add	x10, x10, x11
    3ae0:	ldrsw	x11, [sp, #120]
    3ae4:	str	w8, [x10, x11, lsl #2]
    3ae8:	ldr	w8, [sp, #120]
    3aec:	subs	w8, w8, #0x1
    3af0:	str	w8, [sp, #120]
    3af4:	b	3a38 <BZ2_decompress+0x3a38>
    3af8:	ldr	x8, [sp, #32]
    3afc:	ldr	x9, [x8, #136]
    3b00:	add	x9, x9, #0x44
    3b04:	ldr	x10, [x8, #136]
    3b08:	add	x10, x10, #0xd8c
    3b0c:	ldurb	w11, [x29, #-17]
    3b10:	mov	w12, w11
    3b14:	ldrb	w11, [x10, x12]
    3b18:	mov	w10, w11
    3b1c:	mov	x12, #0x4                   	// #4
    3b20:	mul	x10, x12, x10
    3b24:	add	x9, x9, x10
    3b28:	ldr	w11, [x9]
    3b2c:	add	w11, w11, #0x1
    3b30:	str	w11, [x9]
    3b34:	ldr	x9, [x8, #136]
    3b38:	ldrb	w11, [x9, #44]
    3b3c:	cbz	w11, 3b78 <BZ2_decompress+0x3b78>
    3b40:	ldr	x8, [sp, #32]
    3b44:	ldr	x9, [x8, #136]
    3b48:	add	x9, x9, #0xd8c
    3b4c:	ldurb	w10, [x29, #-17]
    3b50:	mov	w11, w10
    3b54:	ldrb	w10, [x9, x11]
    3b58:	ldr	x9, [x8, #136]
    3b5c:	ldr	x9, [x9, #3160]
    3b60:	ldursw	x11, [x29, #-88]
    3b64:	mov	x12, #0x2                   	// #2
    3b68:	mul	x11, x12, x11
    3b6c:	add	x9, x9, x11
    3b70:	strh	w10, [x9]
    3b74:	b	3ba0 <BZ2_decompress+0x3ba0>
    3b78:	ldr	x8, [sp, #32]
    3b7c:	ldr	x9, [x8, #136]
    3b80:	add	x9, x9, #0xd8c
    3b84:	ldurb	w10, [x29, #-17]
    3b88:	mov	w11, w10
    3b8c:	ldrb	w10, [x9, x11]
    3b90:	ldr	x9, [x8, #136]
    3b94:	ldr	x9, [x9, #3152]
    3b98:	ldursw	x11, [x29, #-88]
    3b9c:	str	w10, [x9, x11, lsl #2]
    3ba0:	ldur	w8, [x29, #-88]
    3ba4:	add	w8, w8, #0x1
    3ba8:	stur	w8, [x29, #-88]
    3bac:	ldur	w8, [x29, #-76]
    3bb0:	cbnz	w8, 3c70 <BZ2_decompress+0x3c70>
    3bb4:	ldur	w8, [x29, #-72]
    3bb8:	add	w8, w8, #0x1
    3bbc:	stur	w8, [x29, #-72]
    3bc0:	ldur	w8, [x29, #-72]
    3bc4:	ldur	w9, [x29, #-64]
    3bc8:	cmp	w8, w9
    3bcc:	b.lt	3bdc <BZ2_decompress+0x3bdc>  // b.tstop
    3bd0:	mov	w8, #0xfffffffc            	// #-4
    3bd4:	stur	w8, [x29, #-24]
    3bd8:	b	55a0 <BZ2_decompress+0x55a0>
    3bdc:	mov	w8, #0x32                  	// #50
    3be0:	stur	w8, [x29, #-76]
    3be4:	ldr	x9, [sp, #32]
    3be8:	ldr	x10, [x9, #136]
    3bec:	mov	x11, #0x1ecc                	// #7884
    3bf0:	add	x10, x10, x11
    3bf4:	ldursw	x11, [x29, #-72]
    3bf8:	ldrb	w8, [x10, x11]
    3bfc:	stur	w8, [x29, #-120]
    3c00:	ldr	x10, [x9, #136]
    3c04:	mov	x11, #0xfa0c                	// #64012
    3c08:	add	x10, x10, x11
    3c0c:	ldursw	x11, [x29, #-120]
    3c10:	ldr	w8, [x10, x11, lsl #2]
    3c14:	stur	w8, [x29, #-124]
    3c18:	ldr	x10, [x9, #136]
    3c1c:	mov	x11, #0xb17c                	// #45436
    3c20:	add	x10, x10, x11
    3c24:	ldursw	x11, [x29, #-120]
    3c28:	mov	x12, #0x408                 	// #1032
    3c2c:	mul	x11, x12, x11
    3c30:	add	x10, x10, x11
    3c34:	str	x10, [x9, #16]
    3c38:	ldr	x10, [x9, #136]
    3c3c:	mov	x11, #0xe1dc                	// #57820
    3c40:	add	x10, x10, x11
    3c44:	ldursw	x11, [x29, #-120]
    3c48:	mul	x11, x12, x11
    3c4c:	add	x10, x10, x11
    3c50:	str	x10, [x9]
    3c54:	ldr	x10, [x9, #136]
    3c58:	mov	x11, #0xc9ac                	// #51628
    3c5c:	add	x10, x10, x11
    3c60:	ldursw	x11, [x29, #-120]
    3c64:	mul	x11, x12, x11
    3c68:	add	x10, x10, x11
    3c6c:	str	x10, [x9, #8]
    3c70:	ldur	w8, [x29, #-76]
    3c74:	subs	w8, w8, #0x1
    3c78:	stur	w8, [x29, #-76]
    3c7c:	ldur	w8, [x29, #-124]
    3c80:	stur	w8, [x29, #-108]
    3c84:	ldr	x8, [sp, #32]
    3c88:	ldr	x9, [x8, #136]
    3c8c:	mov	w10, #0x28                  	// #40
    3c90:	str	w10, [x9, #8]
    3c94:	ldr	x8, [sp, #32]
    3c98:	ldr	x9, [x8, #136]
    3c9c:	ldr	w10, [x9, #36]
    3ca0:	ldur	w11, [x29, #-108]
    3ca4:	cmp	w10, w11
    3ca8:	b.lt	3d04 <BZ2_decompress+0x3d04>  // b.tstop
    3cac:	ldr	x8, [sp, #32]
    3cb0:	ldr	x9, [x8, #136]
    3cb4:	ldr	w10, [x9, #32]
    3cb8:	ldr	x9, [x8, #136]
    3cbc:	ldr	w11, [x9, #36]
    3cc0:	ldur	w12, [x29, #-108]
    3cc4:	subs	w11, w11, w12
    3cc8:	lsr	w10, w10, w11
    3ccc:	ldur	w11, [x29, #-108]
    3cd0:	mov	w12, #0x1                   	// #1
    3cd4:	lsl	w11, w12, w11
    3cd8:	subs	w11, w11, #0x1
    3cdc:	and	w10, w10, w11
    3ce0:	str	w10, [sp, #88]
    3ce4:	ldur	w10, [x29, #-108]
    3ce8:	ldr	x9, [x8, #136]
    3cec:	ldr	w11, [x9, #36]
    3cf0:	subs	w10, w11, w10
    3cf4:	str	w10, [x9, #36]
    3cf8:	ldr	w10, [sp, #88]
    3cfc:	stur	w10, [x29, #-112]
    3d00:	b	3dc0 <BZ2_decompress+0x3dc0>
    3d04:	ldr	x8, [sp, #32]
    3d08:	ldr	x9, [x8, #136]
    3d0c:	ldr	x9, [x9]
    3d10:	ldr	w10, [x9, #8]
    3d14:	cbnz	w10, 3d20 <BZ2_decompress+0x3d20>
    3d18:	stur	wzr, [x29, #-24]
    3d1c:	b	55a0 <BZ2_decompress+0x55a0>
    3d20:	ldr	x8, [sp, #32]
    3d24:	ldr	x9, [x8, #136]
    3d28:	ldr	w10, [x9, #32]
    3d2c:	ldr	x9, [x8, #136]
    3d30:	ldr	x9, [x9]
    3d34:	ldr	x9, [x9]
    3d38:	ldrb	w11, [x9]
    3d3c:	orr	w10, w11, w10, lsl #8
    3d40:	ldr	x9, [x8, #136]
    3d44:	str	w10, [x9, #32]
    3d48:	ldr	x9, [x8, #136]
    3d4c:	ldr	w10, [x9, #36]
    3d50:	add	w10, w10, #0x8
    3d54:	str	w10, [x9, #36]
    3d58:	ldr	x9, [x8, #136]
    3d5c:	ldr	x9, [x9]
    3d60:	ldr	x12, [x9]
    3d64:	add	x12, x12, #0x1
    3d68:	str	x12, [x9]
    3d6c:	ldr	x9, [x8, #136]
    3d70:	ldr	x9, [x9]
    3d74:	ldr	w10, [x9, #8]
    3d78:	subs	w10, w10, #0x1
    3d7c:	str	w10, [x9, #8]
    3d80:	ldr	x9, [x8, #136]
    3d84:	ldr	x9, [x9]
    3d88:	ldr	w10, [x9, #12]
    3d8c:	add	w10, w10, #0x1
    3d90:	str	w10, [x9, #12]
    3d94:	ldr	x9, [x8, #136]
    3d98:	ldr	x9, [x9]
    3d9c:	ldr	w10, [x9, #12]
    3da0:	cbnz	w10, 3dbc <BZ2_decompress+0x3dbc>
    3da4:	ldr	x8, [sp, #32]
    3da8:	ldr	x9, [x8, #136]
    3dac:	ldr	x9, [x9]
    3db0:	ldr	w10, [x9, #16]
    3db4:	add	w10, w10, #0x1
    3db8:	str	w10, [x9, #16]
    3dbc:	b	3c94 <BZ2_decompress+0x3c94>
    3dc0:	ldur	w8, [x29, #-108]
    3dc4:	cmp	w8, #0x14
    3dc8:	b.le	3dd8 <BZ2_decompress+0x3dd8>
    3dcc:	mov	w8, #0xfffffffc            	// #-4
    3dd0:	stur	w8, [x29, #-24]
    3dd4:	b	55a0 <BZ2_decompress+0x55a0>
    3dd8:	ldur	w8, [x29, #-112]
    3ddc:	ldr	x9, [sp, #32]
    3de0:	ldr	x10, [x9, #16]
    3de4:	ldursw	x11, [x29, #-108]
    3de8:	ldr	w12, [x10, x11, lsl #2]
    3dec:	cmp	w8, w12
    3df0:	b.gt	3df8 <BZ2_decompress+0x3df8>
    3df4:	b	3f38 <BZ2_decompress+0x3f38>
    3df8:	ldur	w8, [x29, #-108]
    3dfc:	add	w8, w8, #0x1
    3e00:	stur	w8, [x29, #-108]
    3e04:	ldr	x8, [sp, #32]
    3e08:	ldr	x9, [x8, #136]
    3e0c:	mov	w10, #0x29                  	// #41
    3e10:	str	w10, [x9, #8]
    3e14:	ldr	x8, [sp, #32]
    3e18:	ldr	x9, [x8, #136]
    3e1c:	ldr	w10, [x9, #36]
    3e20:	cmp	w10, #0x1
    3e24:	b.lt	3e68 <BZ2_decompress+0x3e68>  // b.tstop
    3e28:	ldr	x8, [sp, #32]
    3e2c:	ldr	x9, [x8, #136]
    3e30:	ldr	w10, [x9, #32]
    3e34:	ldr	x9, [x8, #136]
    3e38:	ldr	w11, [x9, #36]
    3e3c:	subs	w11, w11, #0x1
    3e40:	lsr	w10, w10, w11
    3e44:	and	w10, w10, #0x1
    3e48:	str	w10, [sp, #84]
    3e4c:	ldr	x9, [x8, #136]
    3e50:	ldr	w10, [x9, #36]
    3e54:	subs	w10, w10, #0x1
    3e58:	str	w10, [x9, #36]
    3e5c:	ldr	w10, [sp, #84]
    3e60:	stur	w10, [x29, #-116]
    3e64:	b	3f24 <BZ2_decompress+0x3f24>
    3e68:	ldr	x8, [sp, #32]
    3e6c:	ldr	x9, [x8, #136]
    3e70:	ldr	x9, [x9]
    3e74:	ldr	w10, [x9, #8]
    3e78:	cbnz	w10, 3e84 <BZ2_decompress+0x3e84>
    3e7c:	stur	wzr, [x29, #-24]
    3e80:	b	55a0 <BZ2_decompress+0x55a0>
    3e84:	ldr	x8, [sp, #32]
    3e88:	ldr	x9, [x8, #136]
    3e8c:	ldr	w10, [x9, #32]
    3e90:	ldr	x9, [x8, #136]
    3e94:	ldr	x9, [x9]
    3e98:	ldr	x9, [x9]
    3e9c:	ldrb	w11, [x9]
    3ea0:	orr	w10, w11, w10, lsl #8
    3ea4:	ldr	x9, [x8, #136]
    3ea8:	str	w10, [x9, #32]
    3eac:	ldr	x9, [x8, #136]
    3eb0:	ldr	w10, [x9, #36]
    3eb4:	add	w10, w10, #0x8
    3eb8:	str	w10, [x9, #36]
    3ebc:	ldr	x9, [x8, #136]
    3ec0:	ldr	x9, [x9]
    3ec4:	ldr	x12, [x9]
    3ec8:	add	x12, x12, #0x1
    3ecc:	str	x12, [x9]
    3ed0:	ldr	x9, [x8, #136]
    3ed4:	ldr	x9, [x9]
    3ed8:	ldr	w10, [x9, #8]
    3edc:	subs	w10, w10, #0x1
    3ee0:	str	w10, [x9, #8]
    3ee4:	ldr	x9, [x8, #136]
    3ee8:	ldr	x9, [x9]
    3eec:	ldr	w10, [x9, #12]
    3ef0:	add	w10, w10, #0x1
    3ef4:	str	w10, [x9, #12]
    3ef8:	ldr	x9, [x8, #136]
    3efc:	ldr	x9, [x9]
    3f00:	ldr	w10, [x9, #12]
    3f04:	cbnz	w10, 3f20 <BZ2_decompress+0x3f20>
    3f08:	ldr	x8, [sp, #32]
    3f0c:	ldr	x9, [x8, #136]
    3f10:	ldr	x9, [x9]
    3f14:	ldr	w10, [x9, #16]
    3f18:	add	w10, w10, #0x1
    3f1c:	str	w10, [x9, #16]
    3f20:	b	3e14 <BZ2_decompress+0x3e14>
    3f24:	ldur	w8, [x29, #-112]
    3f28:	ldur	w9, [x29, #-116]
    3f2c:	orr	w8, w9, w8, lsl #1
    3f30:	stur	w8, [x29, #-112]
    3f34:	b	3dc0 <BZ2_decompress+0x3dc0>
    3f38:	ldur	w8, [x29, #-112]
    3f3c:	ldr	x9, [sp, #32]
    3f40:	ldr	x10, [x9, #8]
    3f44:	ldursw	x11, [x29, #-108]
    3f48:	ldr	w12, [x10, x11, lsl #2]
    3f4c:	subs	w8, w8, w12
    3f50:	cmp	w8, #0x0
    3f54:	cset	w8, lt  // lt = tstop
    3f58:	tbnz	w8, #0, 3f7c <BZ2_decompress+0x3f7c>
    3f5c:	ldur	w8, [x29, #-112]
    3f60:	ldr	x9, [sp, #32]
    3f64:	ldr	x10, [x9, #8]
    3f68:	ldursw	x11, [x29, #-108]
    3f6c:	ldr	w12, [x10, x11, lsl #2]
    3f70:	subs	w8, w8, w12
    3f74:	cmp	w8, #0x102
    3f78:	b.lt	3f88 <BZ2_decompress+0x3f88>  // b.tstop
    3f7c:	mov	w8, #0xfffffffc            	// #-4
    3f80:	stur	w8, [x29, #-24]
    3f84:	b	55a0 <BZ2_decompress+0x55a0>
    3f88:	ldr	x8, [sp, #32]
    3f8c:	ldr	x9, [x8]
    3f90:	ldur	w10, [x29, #-112]
    3f94:	ldr	x11, [x8, #8]
    3f98:	ldursw	x12, [x29, #-108]
    3f9c:	ldr	w13, [x11, x12, lsl #2]
    3fa0:	subs	w10, w10, w13
    3fa4:	ldr	w10, [x9, w10, sxtw #2]
    3fa8:	stur	w10, [x29, #-80]
    3fac:	b	301c <BZ2_decompress+0x301c>
    3fb0:	ldr	x8, [sp, #32]
    3fb4:	ldr	x9, [x8, #136]
    3fb8:	ldr	w10, [x9, #56]
    3fbc:	cmp	w10, #0x0
    3fc0:	cset	w10, lt  // lt = tstop
    3fc4:	tbnz	w10, #0, 3fe0 <BZ2_decompress+0x3fe0>
    3fc8:	ldr	x8, [sp, #32]
    3fcc:	ldr	x9, [x8, #136]
    3fd0:	ldr	w10, [x9, #56]
    3fd4:	ldur	w11, [x29, #-88]
    3fd8:	cmp	w10, w11
    3fdc:	b.lt	3fec <BZ2_decompress+0x3fec>  // b.tstop
    3fe0:	mov	w8, #0xfffffffc            	// #-4
    3fe4:	stur	w8, [x29, #-24]
    3fe8:	b	55a0 <BZ2_decompress+0x55a0>
    3fec:	stur	wzr, [x29, #-44]
    3ff0:	ldur	w8, [x29, #-44]
    3ff4:	cmp	w8, #0xff
    3ff8:	b.gt	4058 <BZ2_decompress+0x4058>
    3ffc:	ldr	x8, [sp, #32]
    4000:	ldr	x9, [x8, #136]
    4004:	add	x9, x9, #0x44
    4008:	ldursw	x10, [x29, #-44]
    400c:	ldr	w11, [x9, x10, lsl #2]
    4010:	cmp	w11, #0x0
    4014:	cset	w11, lt  // lt = tstop
    4018:	tbnz	w11, #0, 403c <BZ2_decompress+0x403c>
    401c:	ldr	x8, [sp, #32]
    4020:	ldr	x9, [x8, #136]
    4024:	add	x9, x9, #0x44
    4028:	ldursw	x10, [x29, #-44]
    402c:	ldr	w11, [x9, x10, lsl #2]
    4030:	ldur	w12, [x29, #-88]
    4034:	cmp	w11, w12
    4038:	b.le	4048 <BZ2_decompress+0x4048>
    403c:	mov	w8, #0xfffffffc            	// #-4
    4040:	stur	w8, [x29, #-24]
    4044:	b	55a0 <BZ2_decompress+0x55a0>
    4048:	ldur	w8, [x29, #-44]
    404c:	add	w8, w8, #0x1
    4050:	stur	w8, [x29, #-44]
    4054:	b	3ff0 <BZ2_decompress+0x3ff0>
    4058:	ldr	x8, [sp, #32]
    405c:	ldr	x9, [x8, #136]
    4060:	str	wzr, [x9, #1096]
    4064:	mov	w10, #0x1                   	// #1
    4068:	stur	w10, [x29, #-44]
    406c:	ldur	w8, [x29, #-44]
    4070:	cmp	w8, #0x100
    4074:	b.gt	40b0 <BZ2_decompress+0x40b0>
    4078:	ldr	x8, [sp, #32]
    407c:	ldr	x9, [x8, #136]
    4080:	add	x9, x9, #0x44
    4084:	ldur	w10, [x29, #-44]
    4088:	subs	w10, w10, #0x1
    408c:	ldr	w10, [x9, w10, sxtw #2]
    4090:	ldr	x9, [x8, #136]
    4094:	add	x9, x9, #0x448
    4098:	ldursw	x11, [x29, #-44]
    409c:	str	w10, [x9, x11, lsl #2]
    40a0:	ldur	w8, [x29, #-44]
    40a4:	add	w8, w8, #0x1
    40a8:	stur	w8, [x29, #-44]
    40ac:	b	406c <BZ2_decompress+0x406c>
    40b0:	mov	w8, #0x1                   	// #1
    40b4:	stur	w8, [x29, #-44]
    40b8:	ldur	w8, [x29, #-44]
    40bc:	cmp	w8, #0x100
    40c0:	b.gt	4110 <BZ2_decompress+0x4110>
    40c4:	ldr	x8, [sp, #32]
    40c8:	ldr	x9, [x8, #136]
    40cc:	add	x9, x9, #0x448
    40d0:	ldur	w10, [x29, #-44]
    40d4:	subs	w10, w10, #0x1
    40d8:	mov	x11, #0x4                   	// #4
    40dc:	ldr	w10, [x9, w10, sxtw #2]
    40e0:	ldr	x9, [x8, #136]
    40e4:	add	x9, x9, #0x448
    40e8:	ldursw	x12, [x29, #-44]
    40ec:	mul	x11, x11, x12
    40f0:	add	x9, x9, x11
    40f4:	ldr	w13, [x9]
    40f8:	add	w10, w13, w10
    40fc:	str	w10, [x9]
    4100:	ldur	w8, [x29, #-44]
    4104:	add	w8, w8, #0x1
    4108:	stur	w8, [x29, #-44]
    410c:	b	40b8 <BZ2_decompress+0x40b8>
    4110:	stur	wzr, [x29, #-44]
    4114:	ldur	w8, [x29, #-44]
    4118:	cmp	w8, #0x100
    411c:	b.gt	417c <BZ2_decompress+0x417c>
    4120:	ldr	x8, [sp, #32]
    4124:	ldr	x9, [x8, #136]
    4128:	add	x9, x9, #0x448
    412c:	ldursw	x10, [x29, #-44]
    4130:	ldr	w11, [x9, x10, lsl #2]
    4134:	cmp	w11, #0x0
    4138:	cset	w11, lt  // lt = tstop
    413c:	tbnz	w11, #0, 4160 <BZ2_decompress+0x4160>
    4140:	ldr	x8, [sp, #32]
    4144:	ldr	x9, [x8, #136]
    4148:	add	x9, x9, #0x448
    414c:	ldursw	x10, [x29, #-44]
    4150:	ldr	w11, [x9, x10, lsl #2]
    4154:	ldur	w12, [x29, #-88]
    4158:	cmp	w11, w12
    415c:	b.le	416c <BZ2_decompress+0x416c>
    4160:	mov	w8, #0xfffffffc            	// #-4
    4164:	stur	w8, [x29, #-24]
    4168:	b	55a0 <BZ2_decompress+0x55a0>
    416c:	ldur	w8, [x29, #-44]
    4170:	add	w8, w8, #0x1
    4174:	stur	w8, [x29, #-44]
    4178:	b	4114 <BZ2_decompress+0x4114>
    417c:	mov	w8, #0x1                   	// #1
    4180:	stur	w8, [x29, #-44]
    4184:	ldur	w8, [x29, #-44]
    4188:	cmp	w8, #0x100
    418c:	b.gt	41dc <BZ2_decompress+0x41dc>
    4190:	ldr	x8, [sp, #32]
    4194:	ldr	x9, [x8, #136]
    4198:	add	x9, x9, #0x448
    419c:	ldur	w10, [x29, #-44]
    41a0:	subs	w10, w10, #0x1
    41a4:	ldr	w10, [x9, w10, sxtw #2]
    41a8:	ldr	x9, [x8, #136]
    41ac:	add	x9, x9, #0x448
    41b0:	ldursw	x11, [x29, #-44]
    41b4:	ldr	w12, [x9, x11, lsl #2]
    41b8:	cmp	w10, w12
    41bc:	b.le	41cc <BZ2_decompress+0x41cc>
    41c0:	mov	w8, #0xfffffffc            	// #-4
    41c4:	stur	w8, [x29, #-24]
    41c8:	b	55a0 <BZ2_decompress+0x55a0>
    41cc:	ldur	w8, [x29, #-44]
    41d0:	add	w8, w8, #0x1
    41d4:	stur	w8, [x29, #-44]
    41d8:	b	4184 <BZ2_decompress+0x4184>
    41dc:	ldr	x8, [sp, #32]
    41e0:	ldr	x9, [x8, #136]
    41e4:	str	wzr, [x9, #16]
    41e8:	ldr	x9, [x8, #136]
    41ec:	mov	w10, #0x0                   	// #0
    41f0:	strb	w10, [x9, #12]
    41f4:	ldr	x9, [x8, #136]
    41f8:	mov	w10, #0xffffffff            	// #-1
    41fc:	str	w10, [x9, #3184]
    4200:	ldr	x9, [x8, #136]
    4204:	mov	w10, #0x2                   	// #2
    4208:	str	w10, [x9, #8]
    420c:	ldr	x9, [x8, #136]
    4210:	ldr	w10, [x9, #52]
    4214:	cmp	w10, #0x2
    4218:	b.lt	4234 <BZ2_decompress+0x4234>  // b.tstop
    421c:	adrp	x8, 0 <stderr>
    4220:	add	x8, x8, #0x0
    4224:	ldr	x0, [x8]
    4228:	adrp	x1, 0 <BZ2_decompress>
    422c:	add	x1, x1, #0x0
    4230:	bl	0 <fprintf>
    4234:	ldr	x8, [sp, #32]
    4238:	ldr	x9, [x8, #136]
    423c:	ldrb	w10, [x9, #44]
    4240:	cbz	w10, 47c0 <BZ2_decompress+0x47c0>
    4244:	stur	wzr, [x29, #-44]
    4248:	ldur	w8, [x29, #-44]
    424c:	cmp	w8, #0x100
    4250:	b.gt	4288 <BZ2_decompress+0x4288>
    4254:	ldr	x8, [sp, #32]
    4258:	ldr	x9, [x8, #136]
    425c:	add	x9, x9, #0x448
    4260:	ldursw	x10, [x29, #-44]
    4264:	ldr	w11, [x9, x10, lsl #2]
    4268:	ldr	x9, [x8, #136]
    426c:	add	x9, x9, #0x84c
    4270:	ldursw	x10, [x29, #-44]
    4274:	str	w11, [x9, x10, lsl #2]
    4278:	ldur	w8, [x29, #-44]
    427c:	add	w8, w8, #0x1
    4280:	stur	w8, [x29, #-44]
    4284:	b	4248 <BZ2_decompress+0x4248>
    4288:	stur	wzr, [x29, #-44]
    428c:	ldur	w8, [x29, #-44]
    4290:	ldur	w9, [x29, #-88]
    4294:	cmp	w8, w9
    4298:	b.ge	43f0 <BZ2_decompress+0x43f0>  // b.tcont
    429c:	ldr	x8, [sp, #32]
    42a0:	ldr	x9, [x8, #136]
    42a4:	ldr	x9, [x9, #3160]
    42a8:	ldursw	x10, [x29, #-44]
    42ac:	mov	x11, #0x2                   	// #2
    42b0:	mul	x10, x11, x10
    42b4:	add	x9, x9, x10
    42b8:	ldrh	w12, [x9]
    42bc:	sturb	w12, [x29, #-17]
    42c0:	ldr	x9, [x8, #136]
    42c4:	add	x9, x9, #0x84c
    42c8:	ldurb	w12, [x29, #-17]
    42cc:	mov	w10, w12
    42d0:	ldr	w12, [x9, x10, lsl #2]
    42d4:	and	w12, w12, #0xffff
    42d8:	ldr	x9, [x8, #136]
    42dc:	ldr	x9, [x9, #3160]
    42e0:	ldursw	x10, [x29, #-44]
    42e4:	mul	x10, x11, x10
    42e8:	add	x9, x9, x10
    42ec:	strh	w12, [x9]
    42f0:	ldur	w12, [x29, #-44]
    42f4:	and	w12, w12, #0x1
    42f8:	cbnz	w12, 4358 <BZ2_decompress+0x4358>
    42fc:	ldr	x8, [sp, #32]
    4300:	ldr	x9, [x8, #136]
    4304:	ldr	x9, [x9, #3168]
    4308:	ldur	w10, [x29, #-44]
    430c:	mov	x11, #0x1                   	// #1
    4310:	asr	w10, w10, #1
    4314:	ldrb	w10, [x9, w10, sxtw]
    4318:	and	w10, w10, #0xf0
    431c:	ldr	x9, [x8, #136]
    4320:	add	x9, x9, #0x84c
    4324:	ldurb	w12, [x29, #-17]
    4328:	mov	w13, w12
    432c:	ldr	w12, [x9, x13, lsl #2]
    4330:	orr	w10, w10, w12, asr #16
    4334:	ldr	x9, [x8, #136]
    4338:	ldr	x9, [x9, #3168]
    433c:	ldur	w12, [x29, #-44]
    4340:	asr	w11, w12, w11
    4344:	mov	w0, w11
    4348:	sxtw	x13, w0
    434c:	add	x9, x9, x13
    4350:	strb	w10, [x9]
    4354:	b	43b4 <BZ2_decompress+0x43b4>
    4358:	ldr	x8, [sp, #32]
    435c:	ldr	x9, [x8, #136]
    4360:	ldr	x9, [x9, #3168]
    4364:	ldur	w10, [x29, #-44]
    4368:	mov	x11, #0x1                   	// #1
    436c:	asr	w10, w10, #1
    4370:	ldrb	w10, [x9, w10, sxtw]
    4374:	and	w10, w10, #0xf
    4378:	ldr	x9, [x8, #136]
    437c:	add	x9, x9, #0x84c
    4380:	ldurb	w12, [x29, #-17]
    4384:	mov	w13, w12
    4388:	ldr	w12, [x9, x13, lsl #2]
    438c:	asr	w12, w12, #16
    4390:	orr	w10, w10, w12, lsl #4
    4394:	ldr	x9, [x8, #136]
    4398:	ldr	x9, [x9, #3168]
    439c:	ldur	w12, [x29, #-44]
    43a0:	asr	w11, w12, w11
    43a4:	mov	w0, w11
    43a8:	sxtw	x13, w0
    43ac:	add	x9, x9, x13
    43b0:	strb	w10, [x9]
    43b4:	ldr	x8, [sp, #32]
    43b8:	ldr	x9, [x8, #136]
    43bc:	add	x9, x9, #0x84c
    43c0:	ldurb	w10, [x29, #-17]
    43c4:	mov	w11, w10
    43c8:	mov	x12, #0x4                   	// #4
    43cc:	mul	x11, x12, x11
    43d0:	add	x9, x9, x11
    43d4:	ldr	w10, [x9]
    43d8:	add	w10, w10, #0x1
    43dc:	str	w10, [x9]
    43e0:	ldur	w8, [x29, #-44]
    43e4:	add	w8, w8, #0x1
    43e8:	stur	w8, [x29, #-44]
    43ec:	b	428c <BZ2_decompress+0x428c>
    43f0:	ldr	x8, [sp, #32]
    43f4:	ldr	x9, [x8, #136]
    43f8:	ldr	w10, [x9, #56]
    43fc:	stur	w10, [x29, #-44]
    4400:	ldr	x9, [x8, #136]
    4404:	ldr	x9, [x9, #3160]
    4408:	ldursw	x11, [x29, #-44]
    440c:	ldrh	w10, [x9, x11, lsl #1]
    4410:	ldr	x9, [x8, #136]
    4414:	ldr	x9, [x9, #3168]
    4418:	ldur	w12, [x29, #-44]
    441c:	asr	w12, w12, #1
    4420:	ldrb	w12, [x9, w12, sxtw]
    4424:	ldur	w13, [x29, #-44]
    4428:	lsl	w13, w13, #2
    442c:	and	w13, w13, #0x4
    4430:	lsr	w12, w12, w13
    4434:	and	w12, w12, #0xf
    4438:	orr	w10, w10, w12, lsl #16
    443c:	stur	w10, [x29, #-48]
    4440:	ldr	x8, [sp, #32]
    4444:	ldr	x9, [x8, #136]
    4448:	ldr	x9, [x9, #3160]
    444c:	ldursw	x10, [x29, #-48]
    4450:	mov	x11, #0x2                   	// #2
    4454:	ldrh	w12, [x9, x10, lsl #1]
    4458:	ldr	x9, [x8, #136]
    445c:	ldr	x9, [x9, #3168]
    4460:	ldur	w13, [x29, #-48]
    4464:	asr	w13, w13, #1
    4468:	ldrb	w13, [x9, w13, sxtw]
    446c:	ldur	w14, [x29, #-48]
    4470:	lsl	w14, w14, #2
    4474:	and	w14, w14, #0x4
    4478:	lsr	w13, w13, w14
    447c:	and	w13, w13, #0xf
    4480:	orr	w12, w12, w13, lsl #16
    4484:	str	w12, [sp, #80]
    4488:	ldur	w12, [x29, #-44]
    448c:	and	w12, w12, #0xffff
    4490:	ldr	x9, [x8, #136]
    4494:	ldr	x9, [x9, #3160]
    4498:	ldursw	x10, [x29, #-48]
    449c:	mul	x10, x11, x10
    44a0:	add	x9, x9, x10
    44a4:	strh	w12, [x9]
    44a8:	ldur	w12, [x29, #-48]
    44ac:	and	w12, w12, #0x1
    44b0:	cbnz	w12, 4500 <BZ2_decompress+0x4500>
    44b4:	ldr	x8, [sp, #32]
    44b8:	ldr	x9, [x8, #136]
    44bc:	ldr	x9, [x9, #3168]
    44c0:	ldur	w10, [x29, #-48]
    44c4:	mov	x11, #0x1                   	// #1
    44c8:	asr	w10, w10, #1
    44cc:	ldrb	w10, [x9, w10, sxtw]
    44d0:	and	w10, w10, #0xf0
    44d4:	ldur	w12, [x29, #-44]
    44d8:	orr	w10, w10, w12, asr #16
    44dc:	ldr	x9, [x8, #136]
    44e0:	ldr	x9, [x9, #3168]
    44e4:	ldur	w12, [x29, #-48]
    44e8:	asr	w11, w12, w11
    44ec:	mov	w0, w11
    44f0:	sxtw	x13, w0
    44f4:	add	x9, x9, x13
    44f8:	strb	w10, [x9]
    44fc:	b	454c <BZ2_decompress+0x454c>
    4500:	ldr	x8, [sp, #32]
    4504:	ldr	x9, [x8, #136]
    4508:	ldr	x9, [x9, #3168]
    450c:	ldur	w10, [x29, #-48]
    4510:	mov	x11, #0x1                   	// #1
    4514:	asr	w10, w10, #1
    4518:	ldrb	w10, [x9, w10, sxtw]
    451c:	and	w10, w10, #0xf
    4520:	ldur	w12, [x29, #-44]
    4524:	asr	w12, w12, #16
    4528:	orr	w10, w10, w12, lsl #4
    452c:	ldr	x9, [x8, #136]
    4530:	ldr	x9, [x9, #3168]
    4534:	ldur	w12, [x29, #-48]
    4538:	asr	w11, w12, w11
    453c:	mov	w0, w11
    4540:	sxtw	x13, w0
    4544:	add	x9, x9, x13
    4548:	strb	w10, [x9]
    454c:	ldur	w8, [x29, #-48]
    4550:	stur	w8, [x29, #-44]
    4554:	ldr	w8, [sp, #80]
    4558:	stur	w8, [x29, #-48]
    455c:	ldur	w8, [x29, #-44]
    4560:	ldr	x9, [sp, #32]
    4564:	ldr	x10, [x9, #136]
    4568:	ldr	w11, [x10, #56]
    456c:	cmp	w8, w11
    4570:	b.ne	4440 <BZ2_decompress+0x4440>  // b.any
    4574:	ldr	x8, [sp, #32]
    4578:	ldr	x9, [x8, #136]
    457c:	ldr	w10, [x9, #56]
    4580:	ldr	x9, [x8, #136]
    4584:	str	w10, [x9, #60]
    4588:	ldr	x9, [x8, #136]
    458c:	str	wzr, [x9, #1092]
    4590:	ldr	x9, [x8, #136]
    4594:	ldrb	w10, [x9, #20]
    4598:	cbz	w10, 4700 <BZ2_decompress+0x4700>
    459c:	ldr	x8, [sp, #32]
    45a0:	ldr	x9, [x8, #136]
    45a4:	str	wzr, [x9, #24]
    45a8:	ldr	x9, [x8, #136]
    45ac:	str	wzr, [x9, #28]
    45b0:	ldr	x9, [x8, #136]
    45b4:	ldr	w10, [x9, #60]
    45b8:	ldr	x9, [x8, #136]
    45bc:	ldr	w11, [x9, #40]
    45c0:	mov	w12, #0x86a0                	// #34464
    45c4:	movk	w12, #0x1, lsl #16
    45c8:	mul	w11, w12, w11
    45cc:	cmp	w10, w11
    45d0:	b.cc	45e0 <BZ2_decompress+0x45e0>  // b.lo, b.ul, b.last
    45d4:	mov	w8, #0x1                   	// #1
    45d8:	stur	w8, [x29, #-4]
    45dc:	b	578c <BZ2_decompress+0x578c>
    45e0:	ldr	x8, [sp, #32]
    45e4:	ldr	x9, [x8, #136]
    45e8:	ldr	w0, [x9, #60]
    45ec:	ldr	x9, [x8, #136]
    45f0:	add	x1, x9, #0x448
    45f4:	bl	0 <BZ2_indexIntoF>
    45f8:	ldr	x8, [sp, #32]
    45fc:	ldr	x9, [x8, #136]
    4600:	str	w0, [x9, #64]
    4604:	ldr	x9, [x8, #136]
    4608:	ldr	x9, [x9, #3160]
    460c:	ldr	x10, [x8, #136]
    4610:	ldr	w11, [x10, #60]
    4614:	mov	w10, w11
    4618:	ldrh	w11, [x9, x10, lsl #1]
    461c:	ldr	x9, [x8, #136]
    4620:	ldr	x9, [x9, #3168]
    4624:	ldr	x10, [x8, #136]
    4628:	ldr	w12, [x10, #60]
    462c:	lsr	w12, w12, #1
    4630:	ldrb	w12, [x9, w12, uxtw]
    4634:	ldr	x9, [x8, #136]
    4638:	ldr	w13, [x9, #60]
    463c:	lsl	w13, w13, #2
    4640:	and	w13, w13, #0x4
    4644:	lsr	w12, w12, w13
    4648:	and	w12, w12, #0xf
    464c:	orr	w11, w11, w12, lsl #16
    4650:	ldr	x9, [x8, #136]
    4654:	str	w11, [x9, #60]
    4658:	ldr	x9, [x8, #136]
    465c:	ldr	w11, [x9, #1092]
    4660:	add	w11, w11, #0x1
    4664:	str	w11, [x9, #1092]
    4668:	ldr	x9, [x8, #136]
    466c:	ldr	w11, [x9, #24]
    4670:	cbnz	w11, 46c0 <BZ2_decompress+0x46c0>
    4674:	ldr	x8, [sp, #32]
    4678:	ldr	x9, [x8, #136]
    467c:	ldrsw	x9, [x9, #28]
    4680:	adrp	x10, 0 <BZ2_rNums>
    4684:	add	x10, x10, #0x0
    4688:	ldr	w11, [x10, x9, lsl #2]
    468c:	ldr	x9, [x8, #136]
    4690:	str	w11, [x9, #24]
    4694:	ldr	x9, [x8, #136]
    4698:	ldr	w11, [x9, #28]
    469c:	add	w11, w11, #0x1
    46a0:	str	w11, [x9, #28]
    46a4:	ldr	x9, [x8, #136]
    46a8:	ldr	w11, [x9, #28]
    46ac:	cmp	w11, #0x200
    46b0:	b.ne	46c0 <BZ2_decompress+0x46c0>  // b.any
    46b4:	ldr	x8, [sp, #32]
    46b8:	ldr	x9, [x8, #136]
    46bc:	str	wzr, [x9, #28]
    46c0:	ldr	x8, [sp, #32]
    46c4:	ldr	x9, [x8, #136]
    46c8:	ldr	w10, [x9, #24]
    46cc:	subs	w10, w10, #0x1
    46d0:	str	w10, [x9, #24]
    46d4:	ldr	x9, [x8, #136]
    46d8:	ldr	w10, [x9, #24]
    46dc:	mov	w11, #0x1                   	// #1
    46e0:	mov	w12, wzr
    46e4:	cmp	w10, #0x1
    46e8:	csel	w10, w11, w12, eq  // eq = none
    46ec:	ldr	x9, [x8, #136]
    46f0:	ldr	w11, [x9, #64]
    46f4:	eor	w10, w11, w10
    46f8:	str	w10, [x9, #64]
    46fc:	b	47bc <BZ2_decompress+0x47bc>
    4700:	ldr	x8, [sp, #32]
    4704:	ldr	x9, [x8, #136]
    4708:	ldr	w10, [x9, #60]
    470c:	ldr	x9, [x8, #136]
    4710:	ldr	w11, [x9, #40]
    4714:	mov	w12, #0x86a0                	// #34464
    4718:	movk	w12, #0x1, lsl #16
    471c:	mul	w11, w12, w11
    4720:	cmp	w10, w11
    4724:	b.cc	4734 <BZ2_decompress+0x4734>  // b.lo, b.ul, b.last
    4728:	mov	w8, #0x1                   	// #1
    472c:	stur	w8, [x29, #-4]
    4730:	b	578c <BZ2_decompress+0x578c>
    4734:	ldr	x8, [sp, #32]
    4738:	ldr	x9, [x8, #136]
    473c:	ldr	w0, [x9, #60]
    4740:	ldr	x9, [x8, #136]
    4744:	add	x1, x9, #0x448
    4748:	bl	0 <BZ2_indexIntoF>
    474c:	ldr	x8, [sp, #32]
    4750:	ldr	x9, [x8, #136]
    4754:	str	w0, [x9, #64]
    4758:	ldr	x9, [x8, #136]
    475c:	ldr	x9, [x9, #3160]
    4760:	ldr	x10, [x8, #136]
    4764:	ldr	w11, [x10, #60]
    4768:	mov	w10, w11
    476c:	ldrh	w11, [x9, x10, lsl #1]
    4770:	ldr	x9, [x8, #136]
    4774:	ldr	x9, [x9, #3168]
    4778:	ldr	x10, [x8, #136]
    477c:	ldr	w12, [x10, #60]
    4780:	lsr	w12, w12, #1
    4784:	ldrb	w12, [x9, w12, uxtw]
    4788:	ldr	x9, [x8, #136]
    478c:	ldr	w13, [x9, #60]
    4790:	lsl	w13, w13, #2
    4794:	and	w13, w13, #0x4
    4798:	lsr	w12, w12, w13
    479c:	and	w12, w12, #0xf
    47a0:	orr	w11, w11, w12, lsl #16
    47a4:	ldr	x9, [x8, #136]
    47a8:	str	w11, [x9, #60]
    47ac:	ldr	x9, [x8, #136]
    47b0:	ldr	w11, [x9, #1092]
    47b4:	add	w11, w11, #0x1
    47b8:	str	w11, [x9, #1092]
    47bc:	b	4a5c <BZ2_decompress+0x4a5c>
    47c0:	stur	wzr, [x29, #-44]
    47c4:	ldur	w8, [x29, #-44]
    47c8:	ldur	w9, [x29, #-88]
    47cc:	cmp	w8, w9
    47d0:	b.ge	485c <BZ2_decompress+0x485c>  // b.tcont
    47d4:	ldr	x8, [sp, #32]
    47d8:	ldr	x9, [x8, #136]
    47dc:	ldr	x9, [x9, #3152]
    47e0:	ldursw	x10, [x29, #-44]
    47e4:	mov	x11, #0x4                   	// #4
    47e8:	ldr	w12, [x9, x10, lsl #2]
    47ec:	and	w12, w12, #0xff
    47f0:	sturb	w12, [x29, #-17]
    47f4:	ldur	w12, [x29, #-44]
    47f8:	ldr	x9, [x8, #136]
    47fc:	ldr	x9, [x9, #3152]
    4800:	ldr	x10, [x8, #136]
    4804:	add	x10, x10, #0x448
    4808:	ldurb	w13, [x29, #-17]
    480c:	mov	w14, w13
    4810:	ldrsw	x10, [x10, x14, lsl #2]
    4814:	mul	x10, x11, x10
    4818:	add	x9, x9, x10
    481c:	ldr	w13, [x9]
    4820:	orr	w12, w13, w12, lsl #8
    4824:	str	w12, [x9]
    4828:	ldr	x9, [x8, #136]
    482c:	add	x9, x9, #0x448
    4830:	ldurb	w12, [x29, #-17]
    4834:	mov	w10, w12
    4838:	mul	x10, x11, x10
    483c:	add	x9, x9, x10
    4840:	ldr	w12, [x9]
    4844:	add	w12, w12, #0x1
    4848:	str	w12, [x9]
    484c:	ldur	w8, [x29, #-44]
    4850:	add	w8, w8, #0x1
    4854:	stur	w8, [x29, #-44]
    4858:	b	47c4 <BZ2_decompress+0x47c4>
    485c:	ldr	x8, [sp, #32]
    4860:	ldr	x9, [x8, #136]
    4864:	ldr	x9, [x9, #3152]
    4868:	ldr	x10, [x8, #136]
    486c:	ldrsw	x10, [x10, #56]
    4870:	ldr	w11, [x9, x10, lsl #2]
    4874:	lsr	w11, w11, #8
    4878:	ldr	x9, [x8, #136]
    487c:	str	w11, [x9, #60]
    4880:	ldr	x9, [x8, #136]
    4884:	str	wzr, [x9, #1092]
    4888:	ldr	x9, [x8, #136]
    488c:	ldrb	w11, [x9, #20]
    4890:	cbz	w11, 49cc <BZ2_decompress+0x49cc>
    4894:	ldr	x8, [sp, #32]
    4898:	ldr	x9, [x8, #136]
    489c:	str	wzr, [x9, #24]
    48a0:	ldr	x9, [x8, #136]
    48a4:	str	wzr, [x9, #28]
    48a8:	ldr	x9, [x8, #136]
    48ac:	ldr	w10, [x9, #60]
    48b0:	ldr	x9, [x8, #136]
    48b4:	ldr	w11, [x9, #40]
    48b8:	mov	w12, #0x86a0                	// #34464
    48bc:	movk	w12, #0x1, lsl #16
    48c0:	mul	w11, w12, w11
    48c4:	cmp	w10, w11
    48c8:	b.cc	48d8 <BZ2_decompress+0x48d8>  // b.lo, b.ul, b.last
    48cc:	mov	w8, #0x1                   	// #1
    48d0:	stur	w8, [x29, #-4]
    48d4:	b	578c <BZ2_decompress+0x578c>
    48d8:	ldr	x8, [sp, #32]
    48dc:	ldr	x9, [x8, #136]
    48e0:	ldr	x9, [x9, #3152]
    48e4:	ldr	x10, [x8, #136]
    48e8:	ldr	w11, [x10, #60]
    48ec:	mov	w10, w11
    48f0:	ldr	w11, [x9, x10, lsl #2]
    48f4:	ldr	x9, [x8, #136]
    48f8:	str	w11, [x9, #60]
    48fc:	ldr	x9, [x8, #136]
    4900:	ldr	w11, [x9, #60]
    4904:	and	w11, w11, #0xff
    4908:	and	w11, w11, #0xff
    490c:	ldr	x9, [x8, #136]
    4910:	str	w11, [x9, #64]
    4914:	ldr	x9, [x8, #136]
    4918:	ldr	w11, [x9, #60]
    491c:	lsr	w11, w11, #8
    4920:	str	w11, [x9, #60]
    4924:	ldr	x9, [x8, #136]
    4928:	ldr	w11, [x9, #1092]
    492c:	add	w11, w11, #0x1
    4930:	str	w11, [x9, #1092]
    4934:	ldr	x9, [x8, #136]
    4938:	ldr	w11, [x9, #24]
    493c:	cbnz	w11, 498c <BZ2_decompress+0x498c>
    4940:	ldr	x8, [sp, #32]
    4944:	ldr	x9, [x8, #136]
    4948:	ldrsw	x9, [x9, #28]
    494c:	adrp	x10, 0 <BZ2_rNums>
    4950:	add	x10, x10, #0x0
    4954:	ldr	w11, [x10, x9, lsl #2]
    4958:	ldr	x9, [x8, #136]
    495c:	str	w11, [x9, #24]
    4960:	ldr	x9, [x8, #136]
    4964:	ldr	w11, [x9, #28]
    4968:	add	w11, w11, #0x1
    496c:	str	w11, [x9, #28]
    4970:	ldr	x9, [x8, #136]
    4974:	ldr	w11, [x9, #28]
    4978:	cmp	w11, #0x200
    497c:	b.ne	498c <BZ2_decompress+0x498c>  // b.any
    4980:	ldr	x8, [sp, #32]
    4984:	ldr	x9, [x8, #136]
    4988:	str	wzr, [x9, #28]
    498c:	ldr	x8, [sp, #32]
    4990:	ldr	x9, [x8, #136]
    4994:	ldr	w10, [x9, #24]
    4998:	subs	w10, w10, #0x1
    499c:	str	w10, [x9, #24]
    49a0:	ldr	x9, [x8, #136]
    49a4:	ldr	w10, [x9, #24]
    49a8:	mov	w11, #0x1                   	// #1
    49ac:	mov	w12, wzr
    49b0:	cmp	w10, #0x1
    49b4:	csel	w10, w11, w12, eq  // eq = none
    49b8:	ldr	x9, [x8, #136]
    49bc:	ldr	w11, [x9, #64]
    49c0:	eor	w10, w11, w10
    49c4:	str	w10, [x9, #64]
    49c8:	b	4a5c <BZ2_decompress+0x4a5c>
    49cc:	ldr	x8, [sp, #32]
    49d0:	ldr	x9, [x8, #136]
    49d4:	ldr	w10, [x9, #60]
    49d8:	ldr	x9, [x8, #136]
    49dc:	ldr	w11, [x9, #40]
    49e0:	mov	w12, #0x86a0                	// #34464
    49e4:	movk	w12, #0x1, lsl #16
    49e8:	mul	w11, w12, w11
    49ec:	cmp	w10, w11
    49f0:	b.cc	4a00 <BZ2_decompress+0x4a00>  // b.lo, b.ul, b.last
    49f4:	mov	w8, #0x1                   	// #1
    49f8:	stur	w8, [x29, #-4]
    49fc:	b	578c <BZ2_decompress+0x578c>
    4a00:	ldr	x8, [sp, #32]
    4a04:	ldr	x9, [x8, #136]
    4a08:	ldr	x9, [x9, #3152]
    4a0c:	ldr	x10, [x8, #136]
    4a10:	ldr	w11, [x10, #60]
    4a14:	mov	w10, w11
    4a18:	ldr	w11, [x9, x10, lsl #2]
    4a1c:	ldr	x9, [x8, #136]
    4a20:	str	w11, [x9, #60]
    4a24:	ldr	x9, [x8, #136]
    4a28:	ldr	w11, [x9, #60]
    4a2c:	and	w11, w11, #0xff
    4a30:	and	w11, w11, #0xff
    4a34:	ldr	x9, [x8, #136]
    4a38:	str	w11, [x9, #64]
    4a3c:	ldr	x9, [x8, #136]
    4a40:	ldr	w11, [x9, #60]
    4a44:	lsr	w11, w11, #8
    4a48:	str	w11, [x9, #60]
    4a4c:	ldr	x9, [x8, #136]
    4a50:	ldr	w11, [x9, #1092]
    4a54:	add	w11, w11, #0x1
    4a58:	str	w11, [x9, #1092]
    4a5c:	stur	wzr, [x29, #-24]
    4a60:	b	55a0 <BZ2_decompress+0x55a0>
    4a64:	ldr	x8, [sp, #32]
    4a68:	ldr	x9, [x8, #136]
    4a6c:	mov	w10, #0x2a                  	// #42
    4a70:	str	w10, [x9, #8]
    4a74:	ldr	x8, [sp, #32]
    4a78:	ldr	x9, [x8, #136]
    4a7c:	ldr	w10, [x9, #36]
    4a80:	cmp	w10, #0x8
    4a84:	b.lt	4ac8 <BZ2_decompress+0x4ac8>  // b.tstop
    4a88:	ldr	x8, [sp, #32]
    4a8c:	ldr	x9, [x8, #136]
    4a90:	ldr	w10, [x9, #32]
    4a94:	ldr	x9, [x8, #136]
    4a98:	ldr	w11, [x9, #36]
    4a9c:	subs	w11, w11, #0x8
    4aa0:	lsr	w10, w10, w11
    4aa4:	and	w10, w10, #0xff
    4aa8:	str	w10, [sp, #76]
    4aac:	ldr	x9, [x8, #136]
    4ab0:	ldr	w10, [x9, #36]
    4ab4:	subs	w10, w10, #0x8
    4ab8:	str	w10, [x9, #36]
    4abc:	ldr	w10, [sp, #76]
    4ac0:	sturb	w10, [x29, #-17]
    4ac4:	b	4b84 <BZ2_decompress+0x4b84>
    4ac8:	ldr	x8, [sp, #32]
    4acc:	ldr	x9, [x8, #136]
    4ad0:	ldr	x9, [x9]
    4ad4:	ldr	w10, [x9, #8]
    4ad8:	cbnz	w10, 4ae4 <BZ2_decompress+0x4ae4>
    4adc:	stur	wzr, [x29, #-24]
    4ae0:	b	55a0 <BZ2_decompress+0x55a0>
    4ae4:	ldr	x8, [sp, #32]
    4ae8:	ldr	x9, [x8, #136]
    4aec:	ldr	w10, [x9, #32]
    4af0:	ldr	x9, [x8, #136]
    4af4:	ldr	x9, [x9]
    4af8:	ldr	x9, [x9]
    4afc:	ldrb	w11, [x9]
    4b00:	orr	w10, w11, w10, lsl #8
    4b04:	ldr	x9, [x8, #136]
    4b08:	str	w10, [x9, #32]
    4b0c:	ldr	x9, [x8, #136]
    4b10:	ldr	w10, [x9, #36]
    4b14:	add	w10, w10, #0x8
    4b18:	str	w10, [x9, #36]
    4b1c:	ldr	x9, [x8, #136]
    4b20:	ldr	x9, [x9]
    4b24:	ldr	x12, [x9]
    4b28:	add	x12, x12, #0x1
    4b2c:	str	x12, [x9]
    4b30:	ldr	x9, [x8, #136]
    4b34:	ldr	x9, [x9]
    4b38:	ldr	w10, [x9, #8]
    4b3c:	subs	w10, w10, #0x1
    4b40:	str	w10, [x9, #8]
    4b44:	ldr	x9, [x8, #136]
    4b48:	ldr	x9, [x9]
    4b4c:	ldr	w10, [x9, #12]
    4b50:	add	w10, w10, #0x1
    4b54:	str	w10, [x9, #12]
    4b58:	ldr	x9, [x8, #136]
    4b5c:	ldr	x9, [x9]
    4b60:	ldr	w10, [x9, #12]
    4b64:	cbnz	w10, 4b80 <BZ2_decompress+0x4b80>
    4b68:	ldr	x8, [sp, #32]
    4b6c:	ldr	x9, [x8, #136]
    4b70:	ldr	x9, [x9]
    4b74:	ldr	w10, [x9, #16]
    4b78:	add	w10, w10, #0x1
    4b7c:	str	w10, [x9, #16]
    4b80:	b	4a74 <BZ2_decompress+0x4a74>
    4b84:	ldurb	w8, [x29, #-17]
    4b88:	cmp	w8, #0x72
    4b8c:	b.eq	4b9c <BZ2_decompress+0x4b9c>  // b.none
    4b90:	mov	w8, #0xfffffffc            	// #-4
    4b94:	stur	w8, [x29, #-24]
    4b98:	b	55a0 <BZ2_decompress+0x55a0>
    4b9c:	ldr	x8, [sp, #32]
    4ba0:	ldr	x9, [x8, #136]
    4ba4:	mov	w10, #0x2b                  	// #43
    4ba8:	str	w10, [x9, #8]
    4bac:	ldr	x8, [sp, #32]
    4bb0:	ldr	x9, [x8, #136]
    4bb4:	ldr	w10, [x9, #36]
    4bb8:	cmp	w10, #0x8
    4bbc:	b.lt	4c00 <BZ2_decompress+0x4c00>  // b.tstop
    4bc0:	ldr	x8, [sp, #32]
    4bc4:	ldr	x9, [x8, #136]
    4bc8:	ldr	w10, [x9, #32]
    4bcc:	ldr	x9, [x8, #136]
    4bd0:	ldr	w11, [x9, #36]
    4bd4:	subs	w11, w11, #0x8
    4bd8:	lsr	w10, w10, w11
    4bdc:	and	w10, w10, #0xff
    4be0:	str	w10, [sp, #72]
    4be4:	ldr	x9, [x8, #136]
    4be8:	ldr	w10, [x9, #36]
    4bec:	subs	w10, w10, #0x8
    4bf0:	str	w10, [x9, #36]
    4bf4:	ldr	w10, [sp, #72]
    4bf8:	sturb	w10, [x29, #-17]
    4bfc:	b	4cbc <BZ2_decompress+0x4cbc>
    4c00:	ldr	x8, [sp, #32]
    4c04:	ldr	x9, [x8, #136]
    4c08:	ldr	x9, [x9]
    4c0c:	ldr	w10, [x9, #8]
    4c10:	cbnz	w10, 4c1c <BZ2_decompress+0x4c1c>
    4c14:	stur	wzr, [x29, #-24]
    4c18:	b	55a0 <BZ2_decompress+0x55a0>
    4c1c:	ldr	x8, [sp, #32]
    4c20:	ldr	x9, [x8, #136]
    4c24:	ldr	w10, [x9, #32]
    4c28:	ldr	x9, [x8, #136]
    4c2c:	ldr	x9, [x9]
    4c30:	ldr	x9, [x9]
    4c34:	ldrb	w11, [x9]
    4c38:	orr	w10, w11, w10, lsl #8
    4c3c:	ldr	x9, [x8, #136]
    4c40:	str	w10, [x9, #32]
    4c44:	ldr	x9, [x8, #136]
    4c48:	ldr	w10, [x9, #36]
    4c4c:	add	w10, w10, #0x8
    4c50:	str	w10, [x9, #36]
    4c54:	ldr	x9, [x8, #136]
    4c58:	ldr	x9, [x9]
    4c5c:	ldr	x12, [x9]
    4c60:	add	x12, x12, #0x1
    4c64:	str	x12, [x9]
    4c68:	ldr	x9, [x8, #136]
    4c6c:	ldr	x9, [x9]
    4c70:	ldr	w10, [x9, #8]
    4c74:	subs	w10, w10, #0x1
    4c78:	str	w10, [x9, #8]
    4c7c:	ldr	x9, [x8, #136]
    4c80:	ldr	x9, [x9]
    4c84:	ldr	w10, [x9, #12]
    4c88:	add	w10, w10, #0x1
    4c8c:	str	w10, [x9, #12]
    4c90:	ldr	x9, [x8, #136]
    4c94:	ldr	x9, [x9]
    4c98:	ldr	w10, [x9, #12]
    4c9c:	cbnz	w10, 4cb8 <BZ2_decompress+0x4cb8>
    4ca0:	ldr	x8, [sp, #32]
    4ca4:	ldr	x9, [x8, #136]
    4ca8:	ldr	x9, [x9]
    4cac:	ldr	w10, [x9, #16]
    4cb0:	add	w10, w10, #0x1
    4cb4:	str	w10, [x9, #16]
    4cb8:	b	4bac <BZ2_decompress+0x4bac>
    4cbc:	ldurb	w8, [x29, #-17]
    4cc0:	cmp	w8, #0x45
    4cc4:	b.eq	4cd4 <BZ2_decompress+0x4cd4>  // b.none
    4cc8:	mov	w8, #0xfffffffc            	// #-4
    4ccc:	stur	w8, [x29, #-24]
    4cd0:	b	55a0 <BZ2_decompress+0x55a0>
    4cd4:	ldr	x8, [sp, #32]
    4cd8:	ldr	x9, [x8, #136]
    4cdc:	mov	w10, #0x2c                  	// #44
    4ce0:	str	w10, [x9, #8]
    4ce4:	ldr	x8, [sp, #32]
    4ce8:	ldr	x9, [x8, #136]
    4cec:	ldr	w10, [x9, #36]
    4cf0:	cmp	w10, #0x8
    4cf4:	b.lt	4d38 <BZ2_decompress+0x4d38>  // b.tstop
    4cf8:	ldr	x8, [sp, #32]
    4cfc:	ldr	x9, [x8, #136]
    4d00:	ldr	w10, [x9, #32]
    4d04:	ldr	x9, [x8, #136]
    4d08:	ldr	w11, [x9, #36]
    4d0c:	subs	w11, w11, #0x8
    4d10:	lsr	w10, w10, w11
    4d14:	and	w10, w10, #0xff
    4d18:	str	w10, [sp, #68]
    4d1c:	ldr	x9, [x8, #136]
    4d20:	ldr	w10, [x9, #36]
    4d24:	subs	w10, w10, #0x8
    4d28:	str	w10, [x9, #36]
    4d2c:	ldr	w10, [sp, #68]
    4d30:	sturb	w10, [x29, #-17]
    4d34:	b	4df4 <BZ2_decompress+0x4df4>
    4d38:	ldr	x8, [sp, #32]
    4d3c:	ldr	x9, [x8, #136]
    4d40:	ldr	x9, [x9]
    4d44:	ldr	w10, [x9, #8]
    4d48:	cbnz	w10, 4d54 <BZ2_decompress+0x4d54>
    4d4c:	stur	wzr, [x29, #-24]
    4d50:	b	55a0 <BZ2_decompress+0x55a0>
    4d54:	ldr	x8, [sp, #32]
    4d58:	ldr	x9, [x8, #136]
    4d5c:	ldr	w10, [x9, #32]
    4d60:	ldr	x9, [x8, #136]
    4d64:	ldr	x9, [x9]
    4d68:	ldr	x9, [x9]
    4d6c:	ldrb	w11, [x9]
    4d70:	orr	w10, w11, w10, lsl #8
    4d74:	ldr	x9, [x8, #136]
    4d78:	str	w10, [x9, #32]
    4d7c:	ldr	x9, [x8, #136]
    4d80:	ldr	w10, [x9, #36]
    4d84:	add	w10, w10, #0x8
    4d88:	str	w10, [x9, #36]
    4d8c:	ldr	x9, [x8, #136]
    4d90:	ldr	x9, [x9]
    4d94:	ldr	x12, [x9]
    4d98:	add	x12, x12, #0x1
    4d9c:	str	x12, [x9]
    4da0:	ldr	x9, [x8, #136]
    4da4:	ldr	x9, [x9]
    4da8:	ldr	w10, [x9, #8]
    4dac:	subs	w10, w10, #0x1
    4db0:	str	w10, [x9, #8]
    4db4:	ldr	x9, [x8, #136]
    4db8:	ldr	x9, [x9]
    4dbc:	ldr	w10, [x9, #12]
    4dc0:	add	w10, w10, #0x1
    4dc4:	str	w10, [x9, #12]
    4dc8:	ldr	x9, [x8, #136]
    4dcc:	ldr	x9, [x9]
    4dd0:	ldr	w10, [x9, #12]
    4dd4:	cbnz	w10, 4df0 <BZ2_decompress+0x4df0>
    4dd8:	ldr	x8, [sp, #32]
    4ddc:	ldr	x9, [x8, #136]
    4de0:	ldr	x9, [x9]
    4de4:	ldr	w10, [x9, #16]
    4de8:	add	w10, w10, #0x1
    4dec:	str	w10, [x9, #16]
    4df0:	b	4ce4 <BZ2_decompress+0x4ce4>
    4df4:	ldurb	w8, [x29, #-17]
    4df8:	cmp	w8, #0x38
    4dfc:	b.eq	4e0c <BZ2_decompress+0x4e0c>  // b.none
    4e00:	mov	w8, #0xfffffffc            	// #-4
    4e04:	stur	w8, [x29, #-24]
    4e08:	b	55a0 <BZ2_decompress+0x55a0>
    4e0c:	ldr	x8, [sp, #32]
    4e10:	ldr	x9, [x8, #136]
    4e14:	mov	w10, #0x2d                  	// #45
    4e18:	str	w10, [x9, #8]
    4e1c:	ldr	x8, [sp, #32]
    4e20:	ldr	x9, [x8, #136]
    4e24:	ldr	w10, [x9, #36]
    4e28:	cmp	w10, #0x8
    4e2c:	b.lt	4e70 <BZ2_decompress+0x4e70>  // b.tstop
    4e30:	ldr	x8, [sp, #32]
    4e34:	ldr	x9, [x8, #136]
    4e38:	ldr	w10, [x9, #32]
    4e3c:	ldr	x9, [x8, #136]
    4e40:	ldr	w11, [x9, #36]
    4e44:	subs	w11, w11, #0x8
    4e48:	lsr	w10, w10, w11
    4e4c:	and	w10, w10, #0xff
    4e50:	str	w10, [sp, #64]
    4e54:	ldr	x9, [x8, #136]
    4e58:	ldr	w10, [x9, #36]
    4e5c:	subs	w10, w10, #0x8
    4e60:	str	w10, [x9, #36]
    4e64:	ldr	w10, [sp, #64]
    4e68:	sturb	w10, [x29, #-17]
    4e6c:	b	4f2c <BZ2_decompress+0x4f2c>
    4e70:	ldr	x8, [sp, #32]
    4e74:	ldr	x9, [x8, #136]
    4e78:	ldr	x9, [x9]
    4e7c:	ldr	w10, [x9, #8]
    4e80:	cbnz	w10, 4e8c <BZ2_decompress+0x4e8c>
    4e84:	stur	wzr, [x29, #-24]
    4e88:	b	55a0 <BZ2_decompress+0x55a0>
    4e8c:	ldr	x8, [sp, #32]
    4e90:	ldr	x9, [x8, #136]
    4e94:	ldr	w10, [x9, #32]
    4e98:	ldr	x9, [x8, #136]
    4e9c:	ldr	x9, [x9]
    4ea0:	ldr	x9, [x9]
    4ea4:	ldrb	w11, [x9]
    4ea8:	orr	w10, w11, w10, lsl #8
    4eac:	ldr	x9, [x8, #136]
    4eb0:	str	w10, [x9, #32]
    4eb4:	ldr	x9, [x8, #136]
    4eb8:	ldr	w10, [x9, #36]
    4ebc:	add	w10, w10, #0x8
    4ec0:	str	w10, [x9, #36]
    4ec4:	ldr	x9, [x8, #136]
    4ec8:	ldr	x9, [x9]
    4ecc:	ldr	x12, [x9]
    4ed0:	add	x12, x12, #0x1
    4ed4:	str	x12, [x9]
    4ed8:	ldr	x9, [x8, #136]
    4edc:	ldr	x9, [x9]
    4ee0:	ldr	w10, [x9, #8]
    4ee4:	subs	w10, w10, #0x1
    4ee8:	str	w10, [x9, #8]
    4eec:	ldr	x9, [x8, #136]
    4ef0:	ldr	x9, [x9]
    4ef4:	ldr	w10, [x9, #12]
    4ef8:	add	w10, w10, #0x1
    4efc:	str	w10, [x9, #12]
    4f00:	ldr	x9, [x8, #136]
    4f04:	ldr	x9, [x9]
    4f08:	ldr	w10, [x9, #12]
    4f0c:	cbnz	w10, 4f28 <BZ2_decompress+0x4f28>
    4f10:	ldr	x8, [sp, #32]
    4f14:	ldr	x9, [x8, #136]
    4f18:	ldr	x9, [x9]
    4f1c:	ldr	w10, [x9, #16]
    4f20:	add	w10, w10, #0x1
    4f24:	str	w10, [x9, #16]
    4f28:	b	4e1c <BZ2_decompress+0x4e1c>
    4f2c:	ldurb	w8, [x29, #-17]
    4f30:	cmp	w8, #0x50
    4f34:	b.eq	4f44 <BZ2_decompress+0x4f44>  // b.none
    4f38:	mov	w8, #0xfffffffc            	// #-4
    4f3c:	stur	w8, [x29, #-24]
    4f40:	b	55a0 <BZ2_decompress+0x55a0>
    4f44:	ldr	x8, [sp, #32]
    4f48:	ldr	x9, [x8, #136]
    4f4c:	mov	w10, #0x2e                  	// #46
    4f50:	str	w10, [x9, #8]
    4f54:	ldr	x8, [sp, #32]
    4f58:	ldr	x9, [x8, #136]
    4f5c:	ldr	w10, [x9, #36]
    4f60:	cmp	w10, #0x8
    4f64:	b.lt	4fa8 <BZ2_decompress+0x4fa8>  // b.tstop
    4f68:	ldr	x8, [sp, #32]
    4f6c:	ldr	x9, [x8, #136]
    4f70:	ldr	w10, [x9, #32]
    4f74:	ldr	x9, [x8, #136]
    4f78:	ldr	w11, [x9, #36]
    4f7c:	subs	w11, w11, #0x8
    4f80:	lsr	w10, w10, w11
    4f84:	and	w10, w10, #0xff
    4f88:	str	w10, [sp, #60]
    4f8c:	ldr	x9, [x8, #136]
    4f90:	ldr	w10, [x9, #36]
    4f94:	subs	w10, w10, #0x8
    4f98:	str	w10, [x9, #36]
    4f9c:	ldr	w10, [sp, #60]
    4fa0:	sturb	w10, [x29, #-17]
    4fa4:	b	5064 <BZ2_decompress+0x5064>
    4fa8:	ldr	x8, [sp, #32]
    4fac:	ldr	x9, [x8, #136]
    4fb0:	ldr	x9, [x9]
    4fb4:	ldr	w10, [x9, #8]
    4fb8:	cbnz	w10, 4fc4 <BZ2_decompress+0x4fc4>
    4fbc:	stur	wzr, [x29, #-24]
    4fc0:	b	55a0 <BZ2_decompress+0x55a0>
    4fc4:	ldr	x8, [sp, #32]
    4fc8:	ldr	x9, [x8, #136]
    4fcc:	ldr	w10, [x9, #32]
    4fd0:	ldr	x9, [x8, #136]
    4fd4:	ldr	x9, [x9]
    4fd8:	ldr	x9, [x9]
    4fdc:	ldrb	w11, [x9]
    4fe0:	orr	w10, w11, w10, lsl #8
    4fe4:	ldr	x9, [x8, #136]
    4fe8:	str	w10, [x9, #32]
    4fec:	ldr	x9, [x8, #136]
    4ff0:	ldr	w10, [x9, #36]
    4ff4:	add	w10, w10, #0x8
    4ff8:	str	w10, [x9, #36]
    4ffc:	ldr	x9, [x8, #136]
    5000:	ldr	x9, [x9]
    5004:	ldr	x12, [x9]
    5008:	add	x12, x12, #0x1
    500c:	str	x12, [x9]
    5010:	ldr	x9, [x8, #136]
    5014:	ldr	x9, [x9]
    5018:	ldr	w10, [x9, #8]
    501c:	subs	w10, w10, #0x1
    5020:	str	w10, [x9, #8]
    5024:	ldr	x9, [x8, #136]
    5028:	ldr	x9, [x9]
    502c:	ldr	w10, [x9, #12]
    5030:	add	w10, w10, #0x1
    5034:	str	w10, [x9, #12]
    5038:	ldr	x9, [x8, #136]
    503c:	ldr	x9, [x9]
    5040:	ldr	w10, [x9, #12]
    5044:	cbnz	w10, 5060 <BZ2_decompress+0x5060>
    5048:	ldr	x8, [sp, #32]
    504c:	ldr	x9, [x8, #136]
    5050:	ldr	x9, [x9]
    5054:	ldr	w10, [x9, #16]
    5058:	add	w10, w10, #0x1
    505c:	str	w10, [x9, #16]
    5060:	b	4f54 <BZ2_decompress+0x4f54>
    5064:	ldurb	w8, [x29, #-17]
    5068:	cmp	w8, #0x90
    506c:	b.eq	507c <BZ2_decompress+0x507c>  // b.none
    5070:	mov	w8, #0xfffffffc            	// #-4
    5074:	stur	w8, [x29, #-24]
    5078:	b	55a0 <BZ2_decompress+0x55a0>
    507c:	ldr	x8, [sp, #32]
    5080:	ldr	x9, [x8, #136]
    5084:	str	wzr, [x9, #3180]
    5088:	ldr	x8, [sp, #32]
    508c:	ldr	x9, [x8, #136]
    5090:	mov	w10, #0x2f                  	// #47
    5094:	str	w10, [x9, #8]
    5098:	ldr	x8, [sp, #32]
    509c:	ldr	x9, [x8, #136]
    50a0:	ldr	w10, [x9, #36]
    50a4:	cmp	w10, #0x8
    50a8:	b.lt	50ec <BZ2_decompress+0x50ec>  // b.tstop
    50ac:	ldr	x8, [sp, #32]
    50b0:	ldr	x9, [x8, #136]
    50b4:	ldr	w10, [x9, #32]
    50b8:	ldr	x9, [x8, #136]
    50bc:	ldr	w11, [x9, #36]
    50c0:	subs	w11, w11, #0x8
    50c4:	lsr	w10, w10, w11
    50c8:	and	w10, w10, #0xff
    50cc:	str	w10, [sp, #56]
    50d0:	ldr	x9, [x8, #136]
    50d4:	ldr	w10, [x9, #36]
    50d8:	subs	w10, w10, #0x8
    50dc:	str	w10, [x9, #36]
    50e0:	ldr	w10, [sp, #56]
    50e4:	sturb	w10, [x29, #-17]
    50e8:	b	51a8 <BZ2_decompress+0x51a8>
    50ec:	ldr	x8, [sp, #32]
    50f0:	ldr	x9, [x8, #136]
    50f4:	ldr	x9, [x9]
    50f8:	ldr	w10, [x9, #8]
    50fc:	cbnz	w10, 5108 <BZ2_decompress+0x5108>
    5100:	stur	wzr, [x29, #-24]
    5104:	b	55a0 <BZ2_decompress+0x55a0>
    5108:	ldr	x8, [sp, #32]
    510c:	ldr	x9, [x8, #136]
    5110:	ldr	w10, [x9, #32]
    5114:	ldr	x9, [x8, #136]
    5118:	ldr	x9, [x9]
    511c:	ldr	x9, [x9]
    5120:	ldrb	w11, [x9]
    5124:	orr	w10, w11, w10, lsl #8
    5128:	ldr	x9, [x8, #136]
    512c:	str	w10, [x9, #32]
    5130:	ldr	x9, [x8, #136]
    5134:	ldr	w10, [x9, #36]
    5138:	add	w10, w10, #0x8
    513c:	str	w10, [x9, #36]
    5140:	ldr	x9, [x8, #136]
    5144:	ldr	x9, [x9]
    5148:	ldr	x12, [x9]
    514c:	add	x12, x12, #0x1
    5150:	str	x12, [x9]
    5154:	ldr	x9, [x8, #136]
    5158:	ldr	x9, [x9]
    515c:	ldr	w10, [x9, #8]
    5160:	subs	w10, w10, #0x1
    5164:	str	w10, [x9, #8]
    5168:	ldr	x9, [x8, #136]
    516c:	ldr	x9, [x9]
    5170:	ldr	w10, [x9, #12]
    5174:	add	w10, w10, #0x1
    5178:	str	w10, [x9, #12]
    517c:	ldr	x9, [x8, #136]
    5180:	ldr	x9, [x9]
    5184:	ldr	w10, [x9, #12]
    5188:	cbnz	w10, 51a4 <BZ2_decompress+0x51a4>
    518c:	ldr	x8, [sp, #32]
    5190:	ldr	x9, [x8, #136]
    5194:	ldr	x9, [x9]
    5198:	ldr	w10, [x9, #16]
    519c:	add	w10, w10, #0x1
    51a0:	str	w10, [x9, #16]
    51a4:	b	5098 <BZ2_decompress+0x5098>
    51a8:	ldr	x8, [sp, #32]
    51ac:	ldr	x9, [x8, #136]
    51b0:	ldr	w10, [x9, #3180]
    51b4:	ldurb	w11, [x29, #-17]
    51b8:	orr	w10, w11, w10, lsl #8
    51bc:	ldr	x9, [x8, #136]
    51c0:	str	w10, [x9, #3180]
    51c4:	ldr	x8, [sp, #32]
    51c8:	ldr	x9, [x8, #136]
    51cc:	mov	w10, #0x30                  	// #48
    51d0:	str	w10, [x9, #8]
    51d4:	ldr	x8, [sp, #32]
    51d8:	ldr	x9, [x8, #136]
    51dc:	ldr	w10, [x9, #36]
    51e0:	cmp	w10, #0x8
    51e4:	b.lt	5228 <BZ2_decompress+0x5228>  // b.tstop
    51e8:	ldr	x8, [sp, #32]
    51ec:	ldr	x9, [x8, #136]
    51f0:	ldr	w10, [x9, #32]
    51f4:	ldr	x9, [x8, #136]
    51f8:	ldr	w11, [x9, #36]
    51fc:	subs	w11, w11, #0x8
    5200:	lsr	w10, w10, w11
    5204:	and	w10, w10, #0xff
    5208:	str	w10, [sp, #52]
    520c:	ldr	x9, [x8, #136]
    5210:	ldr	w10, [x9, #36]
    5214:	subs	w10, w10, #0x8
    5218:	str	w10, [x9, #36]
    521c:	ldr	w10, [sp, #52]
    5220:	sturb	w10, [x29, #-17]
    5224:	b	52e4 <BZ2_decompress+0x52e4>
    5228:	ldr	x8, [sp, #32]
    522c:	ldr	x9, [x8, #136]
    5230:	ldr	x9, [x9]
    5234:	ldr	w10, [x9, #8]
    5238:	cbnz	w10, 5244 <BZ2_decompress+0x5244>
    523c:	stur	wzr, [x29, #-24]
    5240:	b	55a0 <BZ2_decompress+0x55a0>
    5244:	ldr	x8, [sp, #32]
    5248:	ldr	x9, [x8, #136]
    524c:	ldr	w10, [x9, #32]
    5250:	ldr	x9, [x8, #136]
    5254:	ldr	x9, [x9]
    5258:	ldr	x9, [x9]
    525c:	ldrb	w11, [x9]
    5260:	orr	w10, w11, w10, lsl #8
    5264:	ldr	x9, [x8, #136]
    5268:	str	w10, [x9, #32]
    526c:	ldr	x9, [x8, #136]
    5270:	ldr	w10, [x9, #36]
    5274:	add	w10, w10, #0x8
    5278:	str	w10, [x9, #36]
    527c:	ldr	x9, [x8, #136]
    5280:	ldr	x9, [x9]
    5284:	ldr	x12, [x9]
    5288:	add	x12, x12, #0x1
    528c:	str	x12, [x9]
    5290:	ldr	x9, [x8, #136]
    5294:	ldr	x9, [x9]
    5298:	ldr	w10, [x9, #8]
    529c:	subs	w10, w10, #0x1
    52a0:	str	w10, [x9, #8]
    52a4:	ldr	x9, [x8, #136]
    52a8:	ldr	x9, [x9]
    52ac:	ldr	w10, [x9, #12]
    52b0:	add	w10, w10, #0x1
    52b4:	str	w10, [x9, #12]
    52b8:	ldr	x9, [x8, #136]
    52bc:	ldr	x9, [x9]
    52c0:	ldr	w10, [x9, #12]
    52c4:	cbnz	w10, 52e0 <BZ2_decompress+0x52e0>
    52c8:	ldr	x8, [sp, #32]
    52cc:	ldr	x9, [x8, #136]
    52d0:	ldr	x9, [x9]
    52d4:	ldr	w10, [x9, #16]
    52d8:	add	w10, w10, #0x1
    52dc:	str	w10, [x9, #16]
    52e0:	b	51d4 <BZ2_decompress+0x51d4>
    52e4:	ldr	x8, [sp, #32]
    52e8:	ldr	x9, [x8, #136]
    52ec:	ldr	w10, [x9, #3180]
    52f0:	ldurb	w11, [x29, #-17]
    52f4:	orr	w10, w11, w10, lsl #8
    52f8:	ldr	x9, [x8, #136]
    52fc:	str	w10, [x9, #3180]
    5300:	ldr	x8, [sp, #32]
    5304:	ldr	x9, [x8, #136]
    5308:	mov	w10, #0x31                  	// #49
    530c:	str	w10, [x9, #8]
    5310:	ldr	x8, [sp, #32]
    5314:	ldr	x9, [x8, #136]
    5318:	ldr	w10, [x9, #36]
    531c:	cmp	w10, #0x8
    5320:	b.lt	5364 <BZ2_decompress+0x5364>  // b.tstop
    5324:	ldr	x8, [sp, #32]
    5328:	ldr	x9, [x8, #136]
    532c:	ldr	w10, [x9, #32]
    5330:	ldr	x9, [x8, #136]
    5334:	ldr	w11, [x9, #36]
    5338:	subs	w11, w11, #0x8
    533c:	lsr	w10, w10, w11
    5340:	and	w10, w10, #0xff
    5344:	str	w10, [sp, #48]
    5348:	ldr	x9, [x8, #136]
    534c:	ldr	w10, [x9, #36]
    5350:	subs	w10, w10, #0x8
    5354:	str	w10, [x9, #36]
    5358:	ldr	w10, [sp, #48]
    535c:	sturb	w10, [x29, #-17]
    5360:	b	5420 <BZ2_decompress+0x5420>
    5364:	ldr	x8, [sp, #32]
    5368:	ldr	x9, [x8, #136]
    536c:	ldr	x9, [x9]
    5370:	ldr	w10, [x9, #8]
    5374:	cbnz	w10, 5380 <BZ2_decompress+0x5380>
    5378:	stur	wzr, [x29, #-24]
    537c:	b	55a0 <BZ2_decompress+0x55a0>
    5380:	ldr	x8, [sp, #32]
    5384:	ldr	x9, [x8, #136]
    5388:	ldr	w10, [x9, #32]
    538c:	ldr	x9, [x8, #136]
    5390:	ldr	x9, [x9]
    5394:	ldr	x9, [x9]
    5398:	ldrb	w11, [x9]
    539c:	orr	w10, w11, w10, lsl #8
    53a0:	ldr	x9, [x8, #136]
    53a4:	str	w10, [x9, #32]
    53a8:	ldr	x9, [x8, #136]
    53ac:	ldr	w10, [x9, #36]
    53b0:	add	w10, w10, #0x8
    53b4:	str	w10, [x9, #36]
    53b8:	ldr	x9, [x8, #136]
    53bc:	ldr	x9, [x9]
    53c0:	ldr	x12, [x9]
    53c4:	add	x12, x12, #0x1
    53c8:	str	x12, [x9]
    53cc:	ldr	x9, [x8, #136]
    53d0:	ldr	x9, [x9]
    53d4:	ldr	w10, [x9, #8]
    53d8:	subs	w10, w10, #0x1
    53dc:	str	w10, [x9, #8]
    53e0:	ldr	x9, [x8, #136]
    53e4:	ldr	x9, [x9]
    53e8:	ldr	w10, [x9, #12]
    53ec:	add	w10, w10, #0x1
    53f0:	str	w10, [x9, #12]
    53f4:	ldr	x9, [x8, #136]
    53f8:	ldr	x9, [x9]
    53fc:	ldr	w10, [x9, #12]
    5400:	cbnz	w10, 541c <BZ2_decompress+0x541c>
    5404:	ldr	x8, [sp, #32]
    5408:	ldr	x9, [x8, #136]
    540c:	ldr	x9, [x9]
    5410:	ldr	w10, [x9, #16]
    5414:	add	w10, w10, #0x1
    5418:	str	w10, [x9, #16]
    541c:	b	5310 <BZ2_decompress+0x5310>
    5420:	ldr	x8, [sp, #32]
    5424:	ldr	x9, [x8, #136]
    5428:	ldr	w10, [x9, #3180]
    542c:	ldurb	w11, [x29, #-17]
    5430:	orr	w10, w11, w10, lsl #8
    5434:	ldr	x9, [x8, #136]
    5438:	str	w10, [x9, #3180]
    543c:	ldr	x8, [sp, #32]
    5440:	ldr	x9, [x8, #136]
    5444:	mov	w10, #0x32                  	// #50
    5448:	str	w10, [x9, #8]
    544c:	ldr	x8, [sp, #32]
    5450:	ldr	x9, [x8, #136]
    5454:	ldr	w10, [x9, #36]
    5458:	cmp	w10, #0x8
    545c:	b.lt	54a0 <BZ2_decompress+0x54a0>  // b.tstop
    5460:	ldr	x8, [sp, #32]
    5464:	ldr	x9, [x8, #136]
    5468:	ldr	w10, [x9, #32]
    546c:	ldr	x9, [x8, #136]
    5470:	ldr	w11, [x9, #36]
    5474:	subs	w11, w11, #0x8
    5478:	lsr	w10, w10, w11
    547c:	and	w10, w10, #0xff
    5480:	str	w10, [sp, #44]
    5484:	ldr	x9, [x8, #136]
    5488:	ldr	w10, [x9, #36]
    548c:	subs	w10, w10, #0x8
    5490:	str	w10, [x9, #36]
    5494:	ldr	w10, [sp, #44]
    5498:	sturb	w10, [x29, #-17]
    549c:	b	555c <BZ2_decompress+0x555c>
    54a0:	ldr	x8, [sp, #32]
    54a4:	ldr	x9, [x8, #136]
    54a8:	ldr	x9, [x9]
    54ac:	ldr	w10, [x9, #8]
    54b0:	cbnz	w10, 54bc <BZ2_decompress+0x54bc>
    54b4:	stur	wzr, [x29, #-24]
    54b8:	b	55a0 <BZ2_decompress+0x55a0>
    54bc:	ldr	x8, [sp, #32]
    54c0:	ldr	x9, [x8, #136]
    54c4:	ldr	w10, [x9, #32]
    54c8:	ldr	x9, [x8, #136]
    54cc:	ldr	x9, [x9]
    54d0:	ldr	x9, [x9]
    54d4:	ldrb	w11, [x9]
    54d8:	orr	w10, w11, w10, lsl #8
    54dc:	ldr	x9, [x8, #136]
    54e0:	str	w10, [x9, #32]
    54e4:	ldr	x9, [x8, #136]
    54e8:	ldr	w10, [x9, #36]
    54ec:	add	w10, w10, #0x8
    54f0:	str	w10, [x9, #36]
    54f4:	ldr	x9, [x8, #136]
    54f8:	ldr	x9, [x9]
    54fc:	ldr	x12, [x9]
    5500:	add	x12, x12, #0x1
    5504:	str	x12, [x9]
    5508:	ldr	x9, [x8, #136]
    550c:	ldr	x9, [x9]
    5510:	ldr	w10, [x9, #8]
    5514:	subs	w10, w10, #0x1
    5518:	str	w10, [x9, #8]
    551c:	ldr	x9, [x8, #136]
    5520:	ldr	x9, [x9]
    5524:	ldr	w10, [x9, #12]
    5528:	add	w10, w10, #0x1
    552c:	str	w10, [x9, #12]
    5530:	ldr	x9, [x8, #136]
    5534:	ldr	x9, [x9]
    5538:	ldr	w10, [x9, #12]
    553c:	cbnz	w10, 5558 <BZ2_decompress+0x5558>
    5540:	ldr	x8, [sp, #32]
    5544:	ldr	x9, [x8, #136]
    5548:	ldr	x9, [x9]
    554c:	ldr	w10, [x9, #16]
    5550:	add	w10, w10, #0x1
    5554:	str	w10, [x9, #16]
    5558:	b	544c <BZ2_decompress+0x544c>
    555c:	ldr	x8, [sp, #32]
    5560:	ldr	x9, [x8, #136]
    5564:	ldr	w10, [x9, #3180]
    5568:	ldurb	w11, [x29, #-17]
    556c:	orr	w10, w11, w10, lsl #8
    5570:	ldr	x9, [x8, #136]
    5574:	str	w10, [x9, #3180]
    5578:	ldr	x9, [x8, #136]
    557c:	mov	w10, #0x1                   	// #1
    5580:	str	w10, [x9, #8]
    5584:	mov	w10, #0x4                   	// #4
    5588:	stur	w10, [x29, #-24]
    558c:	b	55a0 <BZ2_decompress+0x55a0>
    5590:	mov	w0, #0xfa1                 	// #4001
    5594:	bl	0 <BZ2_bz__AssertH__fail>
    5598:	mov	w0, #0xfa2                 	// #4002
    559c:	bl	0 <BZ2_bz__AssertH__fail>
    55a0:	ldur	w8, [x29, #-44]
    55a4:	ldr	x9, [sp, #32]
    55a8:	ldr	x10, [x9, #136]
    55ac:	mov	x11, #0xfa24                	// #64036
    55b0:	add	x10, x10, x11
    55b4:	str	w8, [x10]
    55b8:	ldur	w8, [x29, #-48]
    55bc:	ldr	x10, [x9, #136]
    55c0:	mov	x11, #0xfa28                	// #64040
    55c4:	add	x10, x10, x11
    55c8:	str	w8, [x10]
    55cc:	ldur	w8, [x29, #-52]
    55d0:	ldr	x10, [x9, #136]
    55d4:	mov	x11, #0xfa2c                	// #64044
    55d8:	add	x10, x10, x11
    55dc:	str	w8, [x10]
    55e0:	ldur	w8, [x29, #-56]
    55e4:	ldr	x10, [x9, #136]
    55e8:	mov	x11, #0xfa30                	// #64048
    55ec:	add	x10, x10, x11
    55f0:	str	w8, [x10]
    55f4:	ldur	w8, [x29, #-60]
    55f8:	ldr	x10, [x9, #136]
    55fc:	mov	x11, #0xfa34                	// #64052
    5600:	add	x10, x10, x11
    5604:	str	w8, [x10]
    5608:	ldur	w8, [x29, #-64]
    560c:	ldr	x10, [x9, #136]
    5610:	mov	x11, #0xfa38                	// #64056
    5614:	add	x10, x10, x11
    5618:	str	w8, [x10]
    561c:	ldur	w8, [x29, #-68]
    5620:	ldr	x10, [x9, #136]
    5624:	mov	x11, #0xfa3c                	// #64060
    5628:	add	x10, x10, x11
    562c:	str	w8, [x10]
    5630:	ldur	w8, [x29, #-72]
    5634:	ldr	x10, [x9, #136]
    5638:	mov	x11, #0xfa40                	// #64064
    563c:	add	x10, x10, x11
    5640:	str	w8, [x10]
    5644:	ldur	w8, [x29, #-76]
    5648:	ldr	x10, [x9, #136]
    564c:	mov	x11, #0xfa44                	// #64068
    5650:	add	x10, x10, x11
    5654:	str	w8, [x10]
    5658:	ldur	w8, [x29, #-80]
    565c:	ldr	x10, [x9, #136]
    5660:	mov	x11, #0xfa48                	// #64072
    5664:	add	x10, x10, x11
    5668:	str	w8, [x10]
    566c:	ldur	w8, [x29, #-84]
    5670:	ldr	x10, [x9, #136]
    5674:	mov	x11, #0xfa4c                	// #64076
    5678:	add	x10, x10, x11
    567c:	str	w8, [x10]
    5680:	ldur	w8, [x29, #-88]
    5684:	ldr	x10, [x9, #136]
    5688:	mov	x11, #0xfa50                	// #64080
    568c:	add	x10, x10, x11
    5690:	str	w8, [x10]
    5694:	ldur	w8, [x29, #-92]
    5698:	ldr	x10, [x9, #136]
    569c:	mov	x11, #0xfa54                	// #64084
    56a0:	add	x10, x10, x11
    56a4:	str	w8, [x10]
    56a8:	ldur	w8, [x29, #-96]
    56ac:	ldr	x10, [x9, #136]
    56b0:	mov	x11, #0xfa58                	// #64088
    56b4:	add	x10, x10, x11
    56b8:	str	w8, [x10]
    56bc:	ldur	w8, [x29, #-100]
    56c0:	ldr	x10, [x9, #136]
    56c4:	mov	x11, #0xfa5c                	// #64092
    56c8:	add	x10, x10, x11
    56cc:	str	w8, [x10]
    56d0:	ldur	w8, [x29, #-104]
    56d4:	ldr	x10, [x9, #136]
    56d8:	mov	x11, #0xfa60                	// #64096
    56dc:	add	x10, x10, x11
    56e0:	str	w8, [x10]
    56e4:	ldur	w8, [x29, #-108]
    56e8:	ldr	x10, [x9, #136]
    56ec:	mov	x11, #0xfa64                	// #64100
    56f0:	add	x10, x10, x11
    56f4:	str	w8, [x10]
    56f8:	ldur	w8, [x29, #-112]
    56fc:	ldr	x10, [x9, #136]
    5700:	mov	x11, #0xfa68                	// #64104
    5704:	add	x10, x10, x11
    5708:	str	w8, [x10]
    570c:	ldur	w8, [x29, #-116]
    5710:	ldr	x10, [x9, #136]
    5714:	mov	x11, #0xfa6c                	// #64108
    5718:	add	x10, x10, x11
    571c:	str	w8, [x10]
    5720:	ldur	w8, [x29, #-120]
    5724:	ldr	x10, [x9, #136]
    5728:	mov	x11, #0xfa70                	// #64112
    572c:	add	x10, x10, x11
    5730:	str	w8, [x10]
    5734:	ldur	w8, [x29, #-124]
    5738:	ldr	x10, [x9, #136]
    573c:	mov	x11, #0xfa74                	// #64116
    5740:	add	x10, x10, x11
    5744:	str	w8, [x10]
    5748:	ldr	x10, [x9, #16]
    574c:	ldr	x11, [x9, #136]
    5750:	mov	x12, #0xfa78                	// #64120
    5754:	add	x11, x11, x12
    5758:	str	x10, [x11]
    575c:	ldr	x10, [x9, #8]
    5760:	ldr	x11, [x9, #136]
    5764:	mov	x12, #0xfa80                	// #64128
    5768:	add	x11, x11, x12
    576c:	str	x10, [x11]
    5770:	ldr	x10, [x9]
    5774:	ldr	x11, [x9, #136]
    5778:	mov	x12, #0xfa88                	// #64136
    577c:	add	x11, x11, x12
    5780:	str	x10, [x11]
    5784:	ldur	w8, [x29, #-24]
    5788:	stur	w8, [x29, #-4]
    578c:	ldur	w0, [x29, #-4]
    5790:	ldr	x28, [sp, #432]
    5794:	ldp	x29, x30, [sp, #416]
    5798:	add	sp, sp, #0x1c0
    579c:	ret

00000000000057a0 <makeMaps_d>:
    57a0:	sub	sp, sp, #0x10
    57a4:	str	x0, [sp, #8]
    57a8:	ldr	x8, [sp, #8]
    57ac:	str	wzr, [x8, #3192]
    57b0:	str	wzr, [sp, #4]
    57b4:	ldr	w8, [sp, #4]
    57b8:	cmp	w8, #0x100
    57bc:	b.ge	5814 <makeMaps_d+0x74>  // b.tcont
    57c0:	ldr	x8, [sp, #8]
    57c4:	add	x8, x8, #0xc7c
    57c8:	ldrsw	x9, [sp, #4]
    57cc:	add	x8, x8, x9
    57d0:	ldrb	w10, [x8]
    57d4:	cbz	w10, 5804 <makeMaps_d+0x64>
    57d8:	ldr	w8, [sp, #4]
    57dc:	ldr	x9, [sp, #8]
    57e0:	add	x9, x9, #0xd8c
    57e4:	ldr	x10, [sp, #8]
    57e8:	ldrsw	x10, [x10, #3192]
    57ec:	add	x9, x9, x10
    57f0:	strb	w8, [x9]
    57f4:	ldr	x9, [sp, #8]
    57f8:	ldr	w8, [x9, #3192]
    57fc:	add	w8, w8, #0x1
    5800:	str	w8, [x9, #3192]
    5804:	ldr	w8, [sp, #4]
    5808:	add	w8, w8, #0x1
    580c:	str	w8, [sp, #4]
    5810:	b	57b4 <makeMaps_d+0x14>
    5814:	add	sp, sp, #0x10
    5818:	ret

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	sub	sp, sp, #0x40
       4:	stp	x29, x30, [sp, #48]
       8:	add	x29, sp, #0x30
       c:	adrp	x8, 0 <stderr>
      10:	add	x8, x8, #0x0
      14:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      18:	add	x1, x1, #0x0
      1c:	stur	w0, [x29, #-4]
      20:	ldr	x0, [x8]
      24:	ldur	w2, [x29, #-4]
      28:	stur	x1, [x29, #-16]
      2c:	str	x0, [sp, #24]
      30:	str	w2, [sp, #20]
      34:	bl	80 <BZ2_bzlibVersion>
      38:	ldr	x8, [sp, #24]
      3c:	str	x0, [sp, #8]
      40:	mov	x0, x8
      44:	ldur	x1, [x29, #-16]
      48:	ldr	w2, [sp, #20]
      4c:	ldr	x3, [sp, #8]
      50:	bl	0 <fprintf>
      54:	ldur	w9, [x29, #-4]
      58:	cmp	w9, #0x3ef
      5c:	b.ne	78 <BZ2_bz__AssertH__fail+0x78>  // b.any
      60:	adrp	x8, 0 <stderr>
      64:	add	x8, x8, #0x0
      68:	ldr	x0, [x8]
      6c:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
      70:	add	x1, x1, #0x0
      74:	bl	0 <fprintf>
      78:	mov	w0, #0x3                   	// #3
      7c:	bl	0 <exit>

0000000000000080 <BZ2_bzlibVersion>:
      80:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      84:	add	x0, x0, #0x0
      88:	ret

000000000000008c <BZ2_bzCompressInit>:
      8c:	sub	sp, sp, #0x40
      90:	stp	x29, x30, [sp, #48]
      94:	add	x29, sp, #0x30
      98:	stur	x0, [x29, #-16]
      9c:	stur	w1, [x29, #-20]
      a0:	str	w2, [sp, #24]
      a4:	str	w3, [sp, #20]
      a8:	bl	404 <bz_config_ok>
      ac:	cbnz	w0, bc <BZ2_bzCompressInit+0x30>
      b0:	mov	w8, #0xfffffff7            	// #-9
      b4:	stur	w8, [x29, #-4]
      b8:	b	3f4 <BZ2_bzCompressInit+0x368>
      bc:	ldur	x8, [x29, #-16]
      c0:	cbz	x8, f8 <BZ2_bzCompressInit+0x6c>
      c4:	ldur	w8, [x29, #-20]
      c8:	cmp	w8, #0x1
      cc:	b.lt	f8 <BZ2_bzCompressInit+0x6c>  // b.tstop
      d0:	ldur	w8, [x29, #-20]
      d4:	cmp	w8, #0x9
      d8:	b.gt	f8 <BZ2_bzCompressInit+0x6c>
      dc:	ldr	w8, [sp, #20]
      e0:	cmp	w8, #0x0
      e4:	cset	w8, lt  // lt = tstop
      e8:	tbnz	w8, #0, f8 <BZ2_bzCompressInit+0x6c>
      ec:	ldr	w8, [sp, #20]
      f0:	cmp	w8, #0xfa
      f4:	b.le	104 <BZ2_bzCompressInit+0x78>
      f8:	mov	w8, #0xfffffffe            	// #-2
      fc:	stur	w8, [x29, #-4]
     100:	b	3f4 <BZ2_bzCompressInit+0x368>
     104:	ldr	w8, [sp, #20]
     108:	cbnz	w8, 114 <BZ2_bzCompressInit+0x88>
     10c:	mov	w8, #0x1e                  	// #30
     110:	str	w8, [sp, #20]
     114:	ldur	x8, [x29, #-16]
     118:	ldr	x8, [x8, #56]
     11c:	cbnz	x8, 130 <BZ2_bzCompressInit+0xa4>
     120:	ldur	x8, [x29, #-16]
     124:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     128:	add	x9, x9, #0x0
     12c:	str	x9, [x8, #56]
     130:	ldur	x8, [x29, #-16]
     134:	ldr	x8, [x8, #64]
     138:	cbnz	x8, 14c <BZ2_bzCompressInit+0xc0>
     13c:	ldur	x8, [x29, #-16]
     140:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     144:	add	x9, x9, #0x0
     148:	str	x9, [x8, #64]
     14c:	ldur	x8, [x29, #-16]
     150:	ldr	x8, [x8, #56]
     154:	ldur	x9, [x29, #-16]
     158:	ldr	x0, [x9, #72]
     15c:	mov	w1, #0xd9d8                	// #55768
     160:	mov	w2, #0x1                   	// #1
     164:	blr	x8
     168:	str	x0, [sp, #8]
     16c:	ldr	x8, [sp, #8]
     170:	cbnz	x8, 180 <BZ2_bzCompressInit+0xf4>
     174:	mov	w8, #0xfffffffd            	// #-3
     178:	stur	w8, [x29, #-4]
     17c:	b	3f4 <BZ2_bzCompressInit+0x368>
     180:	ldur	x8, [x29, #-16]
     184:	ldr	x9, [sp, #8]
     188:	str	x8, [x9]
     18c:	ldr	x8, [sp, #8]
     190:	mov	x9, xzr
     194:	str	x9, [x8, #24]
     198:	ldr	x8, [sp, #8]
     19c:	str	x9, [x8, #32]
     1a0:	ldr	x8, [sp, #8]
     1a4:	str	x9, [x8, #40]
     1a8:	ldur	w10, [x29, #-20]
     1ac:	mov	w11, #0x86a0                	// #34464
     1b0:	movk	w11, #0x1, lsl #16
     1b4:	mul	w10, w11, w10
     1b8:	str	w10, [sp, #16]
     1bc:	ldur	x8, [x29, #-16]
     1c0:	ldr	x8, [x8, #56]
     1c4:	ldur	x9, [x29, #-16]
     1c8:	ldr	x0, [x9, #72]
     1cc:	ldrsw	x9, [sp, #16]
     1d0:	mov	x12, #0x4                   	// #4
     1d4:	mul	x9, x9, x12
     1d8:	mov	w1, w9
     1dc:	mov	w9, #0x1                   	// #1
     1e0:	mov	w2, w9
     1e4:	str	w9, [sp, #4]
     1e8:	blr	x8
     1ec:	ldr	x8, [sp, #8]
     1f0:	str	x0, [x8, #24]
     1f4:	ldur	x8, [x29, #-16]
     1f8:	ldr	x8, [x8, #56]
     1fc:	ldur	x12, [x29, #-16]
     200:	ldr	x0, [x12, #72]
     204:	ldr	w9, [sp, #16]
     208:	add	w9, w9, #0x22
     20c:	mov	w10, #0x4                   	// #4
     210:	smull	x12, w9, w10
     214:	mov	w1, w12
     218:	ldr	w2, [sp, #4]
     21c:	blr	x8
     220:	ldr	x8, [sp, #8]
     224:	str	x0, [x8, #32]
     228:	ldur	x8, [x29, #-16]
     22c:	ldr	x8, [x8, #56]
     230:	ldur	x13, [x29, #-16]
     234:	ldr	x0, [x13, #72]
     238:	mov	w1, #0x40004               	// #262148
     23c:	ldr	w2, [sp, #4]
     240:	blr	x8
     244:	ldr	x8, [sp, #8]
     248:	str	x0, [x8, #40]
     24c:	ldr	x8, [sp, #8]
     250:	ldr	x8, [x8, #24]
     254:	cbz	x8, 270 <BZ2_bzCompressInit+0x1e4>
     258:	ldr	x8, [sp, #8]
     25c:	ldr	x8, [x8, #32]
     260:	cbz	x8, 270 <BZ2_bzCompressInit+0x1e4>
     264:	ldr	x8, [sp, #8]
     268:	ldr	x8, [x8, #40]
     26c:	cbnz	x8, 314 <BZ2_bzCompressInit+0x288>
     270:	ldr	x8, [sp, #8]
     274:	ldr	x8, [x8, #24]
     278:	cbz	x8, 298 <BZ2_bzCompressInit+0x20c>
     27c:	ldur	x8, [x29, #-16]
     280:	ldr	x8, [x8, #64]
     284:	ldur	x9, [x29, #-16]
     288:	ldr	x0, [x9, #72]
     28c:	ldr	x9, [sp, #8]
     290:	ldr	x1, [x9, #24]
     294:	blr	x8
     298:	ldr	x8, [sp, #8]
     29c:	ldr	x8, [x8, #32]
     2a0:	cbz	x8, 2c0 <BZ2_bzCompressInit+0x234>
     2a4:	ldur	x8, [x29, #-16]
     2a8:	ldr	x8, [x8, #64]
     2ac:	ldur	x9, [x29, #-16]
     2b0:	ldr	x0, [x9, #72]
     2b4:	ldr	x9, [sp, #8]
     2b8:	ldr	x1, [x9, #32]
     2bc:	blr	x8
     2c0:	ldr	x8, [sp, #8]
     2c4:	ldr	x8, [x8, #40]
     2c8:	cbz	x8, 2e8 <BZ2_bzCompressInit+0x25c>
     2cc:	ldur	x8, [x29, #-16]
     2d0:	ldr	x8, [x8, #64]
     2d4:	ldur	x9, [x29, #-16]
     2d8:	ldr	x0, [x9, #72]
     2dc:	ldr	x9, [sp, #8]
     2e0:	ldr	x1, [x9, #40]
     2e4:	blr	x8
     2e8:	ldr	x8, [sp, #8]
     2ec:	cbz	x8, 308 <BZ2_bzCompressInit+0x27c>
     2f0:	ldur	x8, [x29, #-16]
     2f4:	ldr	x8, [x8, #64]
     2f8:	ldur	x9, [x29, #-16]
     2fc:	ldr	x0, [x9, #72]
     300:	ldr	x1, [sp, #8]
     304:	blr	x8
     308:	mov	w8, #0xfffffffd            	// #-3
     30c:	stur	w8, [x29, #-4]
     310:	b	3f4 <BZ2_bzCompressInit+0x368>
     314:	ldr	x8, [sp, #8]
     318:	str	wzr, [x8, #660]
     31c:	ldr	x8, [sp, #8]
     320:	mov	w9, #0x2                   	// #2
     324:	str	w9, [x8, #12]
     328:	ldr	x8, [sp, #8]
     32c:	str	w9, [x8, #8]
     330:	ldr	x8, [sp, #8]
     334:	str	wzr, [x8, #652]
     338:	ldur	w9, [x29, #-20]
     33c:	ldr	x8, [sp, #8]
     340:	str	w9, [x8, #664]
     344:	ldur	w9, [x29, #-20]
     348:	mov	w10, #0x86a0                	// #34464
     34c:	movk	w10, #0x1, lsl #16
     350:	mul	w9, w10, w9
     354:	subs	w9, w9, #0x13
     358:	ldr	x8, [sp, #8]
     35c:	str	w9, [x8, #112]
     360:	ldr	w9, [sp, #24]
     364:	ldr	x8, [sp, #8]
     368:	str	w9, [x8, #656]
     36c:	ldr	w9, [sp, #20]
     370:	ldr	x8, [sp, #8]
     374:	str	w9, [x8, #88]
     378:	ldr	x8, [sp, #8]
     37c:	ldr	x8, [x8, #32]
     380:	ldr	x11, [sp, #8]
     384:	str	x8, [x11, #64]
     388:	ldr	x8, [sp, #8]
     38c:	ldr	x8, [x8, #24]
     390:	ldr	x11, [sp, #8]
     394:	str	x8, [x11, #72]
     398:	ldr	x8, [sp, #8]
     39c:	mov	x11, xzr
     3a0:	str	x11, [x8, #80]
     3a4:	ldr	x8, [sp, #8]
     3a8:	ldr	x8, [x8, #24]
     3ac:	ldr	x11, [sp, #8]
     3b0:	str	x8, [x11, #56]
     3b4:	ldr	x8, [sp, #8]
     3b8:	ldur	x11, [x29, #-16]
     3bc:	str	x8, [x11, #48]
     3c0:	ldur	x8, [x29, #-16]
     3c4:	str	wzr, [x8, #12]
     3c8:	ldur	x8, [x29, #-16]
     3cc:	str	wzr, [x8, #16]
     3d0:	ldur	x8, [x29, #-16]
     3d4:	str	wzr, [x8, #36]
     3d8:	ldur	x8, [x29, #-16]
     3dc:	str	wzr, [x8, #40]
     3e0:	ldr	x0, [sp, #8]
     3e4:	bl	480 <init_RL>
     3e8:	ldr	x0, [sp, #8]
     3ec:	bl	4a4 <prepare_new_block>
     3f0:	stur	wzr, [x29, #-4]
     3f4:	ldur	w0, [x29, #-4]
     3f8:	ldp	x29, x30, [sp, #48]
     3fc:	add	sp, sp, #0x40
     400:	ret

0000000000000404 <bz_config_ok>:
     404:	mov	w0, #0x1                   	// #1
     408:	ret

000000000000040c <default_bzalloc>:
     40c:	sub	sp, sp, #0x30
     410:	stp	x29, x30, [sp, #32]
     414:	add	x29, sp, #0x20
     418:	stur	x0, [x29, #-8]
     41c:	stur	w1, [x29, #-12]
     420:	str	w2, [sp, #16]
     424:	ldur	w8, [x29, #-12]
     428:	ldr	w9, [sp, #16]
     42c:	mul	w8, w8, w9
     430:	mov	w0, w8
     434:	sxtw	x0, w0
     438:	bl	0 <malloc>
     43c:	str	x0, [sp, #8]
     440:	ldr	x0, [sp, #8]
     444:	ldp	x29, x30, [sp, #32]
     448:	add	sp, sp, #0x30
     44c:	ret

0000000000000450 <default_bzfree>:
     450:	sub	sp, sp, #0x20
     454:	stp	x29, x30, [sp, #16]
     458:	add	x29, sp, #0x10
     45c:	str	x0, [sp, #8]
     460:	str	x1, [sp]
     464:	ldr	x8, [sp]
     468:	cbz	x8, 474 <default_bzfree+0x24>
     46c:	ldr	x0, [sp]
     470:	bl	0 <free>
     474:	ldp	x29, x30, [sp, #16]
     478:	add	sp, sp, #0x20
     47c:	ret

0000000000000480 <init_RL>:
     480:	sub	sp, sp, #0x10
     484:	mov	w8, #0x100                 	// #256
     488:	str	x0, [sp, #8]
     48c:	ldr	x9, [sp, #8]
     490:	str	w8, [x9, #92]
     494:	ldr	x9, [sp, #8]
     498:	str	wzr, [x9, #96]
     49c:	add	sp, sp, #0x10
     4a0:	ret

00000000000004a4 <prepare_new_block>:
     4a4:	sub	sp, sp, #0x10
     4a8:	mov	w8, #0xffffffff            	// #-1
     4ac:	str	x0, [sp, #8]
     4b0:	ldr	x9, [sp, #8]
     4b4:	str	wzr, [x9, #108]
     4b8:	ldr	x9, [sp, #8]
     4bc:	str	wzr, [x9, #116]
     4c0:	ldr	x9, [sp, #8]
     4c4:	str	wzr, [x9, #120]
     4c8:	ldr	x9, [sp, #8]
     4cc:	str	w8, [x9, #648]
     4d0:	str	wzr, [sp, #4]
     4d4:	ldr	w8, [sp, #4]
     4d8:	cmp	w8, #0x100
     4dc:	b.ge	508 <prepare_new_block+0x64>  // b.tcont
     4e0:	ldr	x8, [sp, #8]
     4e4:	add	x8, x8, #0x80
     4e8:	ldrsw	x9, [sp, #4]
     4ec:	add	x8, x8, x9
     4f0:	mov	w10, #0x0                   	// #0
     4f4:	strb	w10, [x8]
     4f8:	ldr	w8, [sp, #4]
     4fc:	add	w8, w8, #0x1
     500:	str	w8, [sp, #4]
     504:	b	4d4 <prepare_new_block+0x30>
     508:	ldr	x8, [sp, #8]
     50c:	ldr	w9, [x8, #660]
     510:	add	w9, w9, #0x1
     514:	str	w9, [x8, #660]
     518:	add	sp, sp, #0x10
     51c:	ret

0000000000000520 <BZ2_bzCompress>:
     520:	sub	sp, sp, #0x40
     524:	stp	x29, x30, [sp, #48]
     528:	add	x29, sp, #0x30
     52c:	stur	x0, [x29, #-16]
     530:	stur	w1, [x29, #-20]
     534:	ldur	x8, [x29, #-16]
     538:	cbnz	x8, 548 <BZ2_bzCompress+0x28>
     53c:	mov	w8, #0xfffffffe            	// #-2
     540:	stur	w8, [x29, #-4]
     544:	b	7d0 <BZ2_bzCompress+0x2b0>
     548:	ldur	x8, [x29, #-16]
     54c:	ldr	x8, [x8, #48]
     550:	str	x8, [sp, #16]
     554:	ldr	x8, [sp, #16]
     558:	cbnz	x8, 568 <BZ2_bzCompress+0x48>
     55c:	mov	w8, #0xfffffffe            	// #-2
     560:	stur	w8, [x29, #-4]
     564:	b	7d0 <BZ2_bzCompress+0x2b0>
     568:	ldr	x8, [sp, #16]
     56c:	ldr	x8, [x8]
     570:	ldur	x9, [x29, #-16]
     574:	cmp	x8, x9
     578:	b.eq	588 <BZ2_bzCompress+0x68>  // b.none
     57c:	mov	w8, #0xfffffffe            	// #-2
     580:	stur	w8, [x29, #-4]
     584:	b	7d0 <BZ2_bzCompress+0x2b0>
     588:	ldr	x8, [sp, #16]
     58c:	ldr	w9, [x8, #8]
     590:	subs	w9, w9, #0x1
     594:	mov	w8, w9
     598:	ubfx	x8, x8, #0, #32
     59c:	cmp	x8, #0x3
     5a0:	str	x8, [sp, #8]
     5a4:	b.hi	7cc <BZ2_bzCompress+0x2ac>  // b.pmore
     5a8:	adrp	x8, 0 <BZ2_bz__AssertH__fail>
     5ac:	add	x8, x8, #0x0
     5b0:	ldr	x11, [sp, #8]
     5b4:	ldrsw	x10, [x8, x11, lsl #2]
     5b8:	add	x9, x8, x10
     5bc:	br	x9
     5c0:	mov	w8, #0xffffffff            	// #-1
     5c4:	stur	w8, [x29, #-4]
     5c8:	b	7d0 <BZ2_bzCompress+0x2b0>
     5cc:	ldur	w8, [x29, #-20]
     5d0:	cbnz	w8, 5fc <BZ2_bzCompress+0xdc>
     5d4:	ldur	x0, [x29, #-16]
     5d8:	bl	7e0 <handle_compress>
     5dc:	sturb	w0, [x29, #-21]
     5e0:	ldurb	w8, [x29, #-21]
     5e4:	mov	w9, #0xfffffffe            	// #-2
     5e8:	mov	w10, #0x1                   	// #1
     5ec:	cmp	w8, #0x0
     5f0:	csel	w8, w10, w9, ne  // ne = any
     5f4:	stur	w8, [x29, #-4]
     5f8:	b	7d0 <BZ2_bzCompress+0x2b0>
     5fc:	ldur	w8, [x29, #-20]
     600:	cmp	w8, #0x1
     604:	b.ne	628 <BZ2_bzCompress+0x108>  // b.any
     608:	ldur	x8, [x29, #-16]
     60c:	ldr	w9, [x8, #8]
     610:	ldr	x8, [sp, #16]
     614:	str	w9, [x8, #16]
     618:	ldr	x8, [sp, #16]
     61c:	mov	w9, #0x3                   	// #3
     620:	str	w9, [x8, #8]
     624:	b	588 <BZ2_bzCompress+0x68>
     628:	ldur	w8, [x29, #-20]
     62c:	cmp	w8, #0x2
     630:	b.ne	654 <BZ2_bzCompress+0x134>  // b.any
     634:	ldur	x8, [x29, #-16]
     638:	ldr	w9, [x8, #8]
     63c:	ldr	x8, [sp, #16]
     640:	str	w9, [x8, #16]
     644:	ldr	x8, [sp, #16]
     648:	mov	w9, #0x4                   	// #4
     64c:	str	w9, [x8, #8]
     650:	b	588 <BZ2_bzCompress+0x68>
     654:	mov	w8, #0xfffffffe            	// #-2
     658:	stur	w8, [x29, #-4]
     65c:	b	7d0 <BZ2_bzCompress+0x2b0>
     660:	ldur	w8, [x29, #-20]
     664:	cmp	w8, #0x1
     668:	b.eq	678 <BZ2_bzCompress+0x158>  // b.none
     66c:	mov	w8, #0xffffffff            	// #-1
     670:	stur	w8, [x29, #-4]
     674:	b	7d0 <BZ2_bzCompress+0x2b0>
     678:	ldr	x8, [sp, #16]
     67c:	ldr	w9, [x8, #16]
     680:	ldr	x8, [sp, #16]
     684:	ldr	x8, [x8]
     688:	ldr	w10, [x8, #8]
     68c:	cmp	w9, w10
     690:	b.eq	6a0 <BZ2_bzCompress+0x180>  // b.none
     694:	mov	w8, #0xffffffff            	// #-1
     698:	stur	w8, [x29, #-4]
     69c:	b	7d0 <BZ2_bzCompress+0x2b0>
     6a0:	ldur	x0, [x29, #-16]
     6a4:	bl	7e0 <handle_compress>
     6a8:	sturb	w0, [x29, #-21]
     6ac:	ldr	x8, [sp, #16]
     6b0:	ldr	w9, [x8, #16]
     6b4:	cmp	w9, #0x0
     6b8:	cset	w9, hi  // hi = pmore
     6bc:	tbnz	w9, #0, 6e8 <BZ2_bzCompress+0x1c8>
     6c0:	ldr	x0, [sp, #16]
     6c4:	bl	9c4 <isempty_RL>
     6c8:	and	w8, w0, #0xff
     6cc:	cbz	w8, 6e8 <BZ2_bzCompress+0x1c8>
     6d0:	ldr	x8, [sp, #16]
     6d4:	ldr	w9, [x8, #120]
     6d8:	ldr	x8, [sp, #16]
     6dc:	ldr	w10, [x8, #116]
     6e0:	cmp	w9, w10
     6e4:	b.ge	6f4 <BZ2_bzCompress+0x1d4>  // b.tcont
     6e8:	mov	w8, #0x2                   	// #2
     6ec:	stur	w8, [x29, #-4]
     6f0:	b	7d0 <BZ2_bzCompress+0x2b0>
     6f4:	ldr	x8, [sp, #16]
     6f8:	mov	w9, #0x2                   	// #2
     6fc:	str	w9, [x8, #8]
     700:	mov	w9, #0x1                   	// #1
     704:	stur	w9, [x29, #-4]
     708:	b	7d0 <BZ2_bzCompress+0x2b0>
     70c:	ldur	w8, [x29, #-20]
     710:	cmp	w8, #0x2
     714:	b.eq	724 <BZ2_bzCompress+0x204>  // b.none
     718:	mov	w8, #0xffffffff            	// #-1
     71c:	stur	w8, [x29, #-4]
     720:	b	7d0 <BZ2_bzCompress+0x2b0>
     724:	ldr	x8, [sp, #16]
     728:	ldr	w9, [x8, #16]
     72c:	ldr	x8, [sp, #16]
     730:	ldr	x8, [x8]
     734:	ldr	w10, [x8, #8]
     738:	cmp	w9, w10
     73c:	b.eq	74c <BZ2_bzCompress+0x22c>  // b.none
     740:	mov	w8, #0xffffffff            	// #-1
     744:	stur	w8, [x29, #-4]
     748:	b	7d0 <BZ2_bzCompress+0x2b0>
     74c:	ldur	x0, [x29, #-16]
     750:	bl	7e0 <handle_compress>
     754:	sturb	w0, [x29, #-21]
     758:	ldurb	w8, [x29, #-21]
     75c:	cbnz	w8, 76c <BZ2_bzCompress+0x24c>
     760:	mov	w8, #0xffffffff            	// #-1
     764:	stur	w8, [x29, #-4]
     768:	b	7d0 <BZ2_bzCompress+0x2b0>
     76c:	ldr	x8, [sp, #16]
     770:	ldr	w9, [x8, #16]
     774:	cmp	w9, #0x0
     778:	cset	w9, hi  // hi = pmore
     77c:	tbnz	w9, #0, 7a8 <BZ2_bzCompress+0x288>
     780:	ldr	x0, [sp, #16]
     784:	bl	9c4 <isempty_RL>
     788:	and	w8, w0, #0xff
     78c:	cbz	w8, 7a8 <BZ2_bzCompress+0x288>
     790:	ldr	x8, [sp, #16]
     794:	ldr	w9, [x8, #120]
     798:	ldr	x8, [sp, #16]
     79c:	ldr	w10, [x8, #116]
     7a0:	cmp	w9, w10
     7a4:	b.ge	7b4 <BZ2_bzCompress+0x294>  // b.tcont
     7a8:	mov	w8, #0x3                   	// #3
     7ac:	stur	w8, [x29, #-4]
     7b0:	b	7d0 <BZ2_bzCompress+0x2b0>
     7b4:	ldr	x8, [sp, #16]
     7b8:	mov	w9, #0x1                   	// #1
     7bc:	str	w9, [x8, #8]
     7c0:	mov	w9, #0x4                   	// #4
     7c4:	stur	w9, [x29, #-4]
     7c8:	b	7d0 <BZ2_bzCompress+0x2b0>
     7cc:	stur	wzr, [x29, #-4]
     7d0:	ldur	w0, [x29, #-4]
     7d4:	ldp	x29, x30, [sp, #48]
     7d8:	add	sp, sp, #0x40
     7dc:	ret

00000000000007e0 <handle_compress>:
     7e0:	sub	sp, sp, #0x30
     7e4:	stp	x29, x30, [sp, #32]
     7e8:	add	x29, sp, #0x20
     7ec:	mov	w8, #0x0                   	// #0
     7f0:	stur	x0, [x29, #-8]
     7f4:	sturb	w8, [x29, #-9]
     7f8:	sturb	w8, [x29, #-10]
     7fc:	ldur	x9, [x29, #-8]
     800:	ldr	x9, [x9, #48]
     804:	str	x9, [sp, #8]
     808:	ldr	x8, [sp, #8]
     80c:	ldr	w9, [x8, #12]
     810:	cmp	w9, #0x1
     814:	b.ne	8c0 <handle_compress+0xe0>  // b.any
     818:	ldr	x0, [sp, #8]
     81c:	bl	4630 <copy_output_until_stop>
     820:	and	w8, w0, #0xff
     824:	ldurb	w9, [x29, #-10]
     828:	orr	w8, w9, w8
     82c:	sturb	w8, [x29, #-10]
     830:	ldr	x10, [sp, #8]
     834:	ldr	w8, [x10, #120]
     838:	ldr	x10, [sp, #8]
     83c:	ldr	w9, [x10, #116]
     840:	cmp	w8, w9
     844:	b.ge	84c <handle_compress+0x6c>  // b.tcont
     848:	b	98c <handle_compress+0x1ac>
     84c:	ldr	x8, [sp, #8]
     850:	ldr	w9, [x8, #8]
     854:	cmp	w9, #0x4
     858:	b.ne	87c <handle_compress+0x9c>  // b.any
     85c:	ldr	x8, [sp, #8]
     860:	ldr	w9, [x8, #16]
     864:	cbnz	w9, 87c <handle_compress+0x9c>
     868:	ldr	x0, [sp, #8]
     86c:	bl	9c4 <isempty_RL>
     870:	and	w8, w0, #0xff
     874:	cbz	w8, 87c <handle_compress+0x9c>
     878:	b	98c <handle_compress+0x1ac>
     87c:	ldr	x0, [sp, #8]
     880:	bl	4a4 <prepare_new_block>
     884:	ldr	x8, [sp, #8]
     888:	mov	w9, #0x2                   	// #2
     88c:	str	w9, [x8, #12]
     890:	ldr	x8, [sp, #8]
     894:	ldr	w9, [x8, #8]
     898:	cmp	w9, #0x3
     89c:	b.ne	8c0 <handle_compress+0xe0>  // b.any
     8a0:	ldr	x8, [sp, #8]
     8a4:	ldr	w9, [x8, #16]
     8a8:	cbnz	w9, 8c0 <handle_compress+0xe0>
     8ac:	ldr	x0, [sp, #8]
     8b0:	bl	9c4 <isempty_RL>
     8b4:	and	w8, w0, #0xff
     8b8:	cbz	w8, 8c0 <handle_compress+0xe0>
     8bc:	b	98c <handle_compress+0x1ac>
     8c0:	ldr	x8, [sp, #8]
     8c4:	ldr	w9, [x8, #12]
     8c8:	cmp	w9, #0x2
     8cc:	b.ne	988 <handle_compress+0x1a8>  // b.any
     8d0:	ldr	x0, [sp, #8]
     8d4:	bl	4720 <copy_input_until_stop>
     8d8:	and	w8, w0, #0xff
     8dc:	ldurb	w9, [x29, #-9]
     8e0:	orr	w8, w9, w8
     8e4:	sturb	w8, [x29, #-9]
     8e8:	ldr	x10, [sp, #8]
     8ec:	ldr	w8, [x10, #8]
     8f0:	cmp	w8, #0x2
     8f4:	b.eq	93c <handle_compress+0x15c>  // b.none
     8f8:	ldr	x8, [sp, #8]
     8fc:	ldr	w9, [x8, #16]
     900:	cbnz	w9, 93c <handle_compress+0x15c>
     904:	ldr	x0, [sp, #8]
     908:	bl	4b24 <flush_RL>
     90c:	ldr	x0, [sp, #8]
     910:	ldr	x8, [sp, #8]
     914:	ldr	w9, [x8, #8]
     918:	cmp	w9, #0x4
     91c:	cset	w9, eq  // eq = none
     920:	and	w9, w9, #0x1
     924:	mov	w1, w9
     928:	bl	0 <BZ2_compressBlock>
     92c:	ldr	x8, [sp, #8]
     930:	mov	w9, #0x1                   	// #1
     934:	str	w9, [x8, #12]
     938:	b	988 <handle_compress+0x1a8>
     93c:	ldr	x8, [sp, #8]
     940:	ldr	w9, [x8, #108]
     944:	ldr	x8, [sp, #8]
     948:	ldr	w10, [x8, #112]
     94c:	cmp	w9, w10
     950:	b.lt	974 <handle_compress+0x194>  // b.tstop
     954:	ldr	x0, [sp, #8]
     958:	mov	w8, wzr
     95c:	mov	w1, w8
     960:	bl	0 <BZ2_compressBlock>
     964:	ldr	x9, [sp, #8]
     968:	mov	w8, #0x1                   	// #1
     96c:	str	w8, [x9, #12]
     970:	b	988 <handle_compress+0x1a8>
     974:	ldr	x8, [sp, #8]
     978:	ldr	x8, [x8]
     97c:	ldr	w9, [x8, #8]
     980:	cbnz	w9, 988 <handle_compress+0x1a8>
     984:	b	98c <handle_compress+0x1ac>
     988:	b	808 <handle_compress+0x28>
     98c:	ldurb	w8, [x29, #-9]
     990:	mov	w9, #0x1                   	// #1
     994:	str	w9, [sp, #4]
     998:	cbnz	w8, 9ac <handle_compress+0x1cc>
     99c:	ldurb	w8, [x29, #-10]
     9a0:	cmp	w8, #0x0
     9a4:	cset	w8, ne  // ne = any
     9a8:	str	w8, [sp, #4]
     9ac:	ldr	w8, [sp, #4]
     9b0:	and	w8, w8, #0x1
     9b4:	mov	w0, w8
     9b8:	ldp	x29, x30, [sp, #32]
     9bc:	add	sp, sp, #0x30
     9c0:	ret

00000000000009c4 <isempty_RL>:
     9c4:	sub	sp, sp, #0x10
     9c8:	str	x0, [sp]
     9cc:	ldr	x8, [sp]
     9d0:	ldr	w9, [x8, #92]
     9d4:	cmp	w9, #0x100
     9d8:	b.cs	9fc <isempty_RL+0x38>  // b.hs, b.nlast
     9dc:	ldr	x8, [sp]
     9e0:	ldr	w9, [x8, #96]
     9e4:	cmp	w9, #0x0
     9e8:	cset	w9, le
     9ec:	tbnz	w9, #0, 9fc <isempty_RL+0x38>
     9f0:	mov	w8, #0x0                   	// #0
     9f4:	strb	w8, [sp, #15]
     9f8:	b	a04 <isempty_RL+0x40>
     9fc:	mov	w8, #0x1                   	// #1
     a00:	strb	w8, [sp, #15]
     a04:	ldrb	w0, [sp, #15]
     a08:	add	sp, sp, #0x10
     a0c:	ret

0000000000000a10 <BZ2_bzCompressEnd>:
     a10:	sub	sp, sp, #0x30
     a14:	stp	x29, x30, [sp, #32]
     a18:	add	x29, sp, #0x20
     a1c:	str	x0, [sp, #16]
     a20:	ldr	x8, [sp, #16]
     a24:	cbnz	x8, a34 <BZ2_bzCompressEnd+0x24>
     a28:	mov	w8, #0xfffffffe            	// #-2
     a2c:	stur	w8, [x29, #-4]
     a30:	b	b18 <BZ2_bzCompressEnd+0x108>
     a34:	ldr	x8, [sp, #16]
     a38:	ldr	x8, [x8, #48]
     a3c:	str	x8, [sp, #8]
     a40:	ldr	x8, [sp, #8]
     a44:	cbnz	x8, a54 <BZ2_bzCompressEnd+0x44>
     a48:	mov	w8, #0xfffffffe            	// #-2
     a4c:	stur	w8, [x29, #-4]
     a50:	b	b18 <BZ2_bzCompressEnd+0x108>
     a54:	ldr	x8, [sp, #8]
     a58:	ldr	x8, [x8]
     a5c:	ldr	x9, [sp, #16]
     a60:	cmp	x8, x9
     a64:	b.eq	a74 <BZ2_bzCompressEnd+0x64>  // b.none
     a68:	mov	w8, #0xfffffffe            	// #-2
     a6c:	stur	w8, [x29, #-4]
     a70:	b	b18 <BZ2_bzCompressEnd+0x108>
     a74:	ldr	x8, [sp, #8]
     a78:	ldr	x8, [x8, #24]
     a7c:	cbz	x8, a9c <BZ2_bzCompressEnd+0x8c>
     a80:	ldr	x8, [sp, #16]
     a84:	ldr	x8, [x8, #64]
     a88:	ldr	x9, [sp, #16]
     a8c:	ldr	x0, [x9, #72]
     a90:	ldr	x9, [sp, #8]
     a94:	ldr	x1, [x9, #24]
     a98:	blr	x8
     a9c:	ldr	x8, [sp, #8]
     aa0:	ldr	x8, [x8, #32]
     aa4:	cbz	x8, ac4 <BZ2_bzCompressEnd+0xb4>
     aa8:	ldr	x8, [sp, #16]
     aac:	ldr	x8, [x8, #64]
     ab0:	ldr	x9, [sp, #16]
     ab4:	ldr	x0, [x9, #72]
     ab8:	ldr	x9, [sp, #8]
     abc:	ldr	x1, [x9, #32]
     ac0:	blr	x8
     ac4:	ldr	x8, [sp, #8]
     ac8:	ldr	x8, [x8, #40]
     acc:	cbz	x8, aec <BZ2_bzCompressEnd+0xdc>
     ad0:	ldr	x8, [sp, #16]
     ad4:	ldr	x8, [x8, #64]
     ad8:	ldr	x9, [sp, #16]
     adc:	ldr	x0, [x9, #72]
     ae0:	ldr	x9, [sp, #8]
     ae4:	ldr	x1, [x9, #40]
     ae8:	blr	x8
     aec:	ldr	x8, [sp, #16]
     af0:	ldr	x8, [x8, #64]
     af4:	ldr	x9, [sp, #16]
     af8:	ldr	x0, [x9, #72]
     afc:	ldr	x9, [sp, #16]
     b00:	ldr	x1, [x9, #48]
     b04:	blr	x8
     b08:	ldr	x8, [sp, #16]
     b0c:	mov	x9, xzr
     b10:	str	x9, [x8, #48]
     b14:	stur	wzr, [x29, #-4]
     b18:	ldur	w0, [x29, #-4]
     b1c:	ldp	x29, x30, [sp, #32]
     b20:	add	sp, sp, #0x30
     b24:	ret

0000000000000b28 <BZ2_bzDecompressInit>:
     b28:	sub	sp, sp, #0x30
     b2c:	stp	x29, x30, [sp, #32]
     b30:	add	x29, sp, #0x20
     b34:	str	x0, [sp, #16]
     b38:	str	w1, [sp, #12]
     b3c:	str	w2, [sp, #8]
     b40:	bl	404 <bz_config_ok>
     b44:	cbnz	w0, b54 <BZ2_bzDecompressInit+0x2c>
     b48:	mov	w8, #0xfffffff7            	// #-9
     b4c:	stur	w8, [x29, #-4]
     b50:	b	cb8 <BZ2_bzDecompressInit+0x190>
     b54:	ldr	x8, [sp, #16]
     b58:	cbnz	x8, b68 <BZ2_bzDecompressInit+0x40>
     b5c:	mov	w8, #0xfffffffe            	// #-2
     b60:	stur	w8, [x29, #-4]
     b64:	b	cb8 <BZ2_bzDecompressInit+0x190>
     b68:	ldr	w8, [sp, #8]
     b6c:	cbz	w8, b88 <BZ2_bzDecompressInit+0x60>
     b70:	ldr	w8, [sp, #8]
     b74:	cmp	w8, #0x1
     b78:	b.eq	b88 <BZ2_bzDecompressInit+0x60>  // b.none
     b7c:	mov	w8, #0xfffffffe            	// #-2
     b80:	stur	w8, [x29, #-4]
     b84:	b	cb8 <BZ2_bzDecompressInit+0x190>
     b88:	ldr	w8, [sp, #12]
     b8c:	cmp	w8, #0x0
     b90:	cset	w8, lt  // lt = tstop
     b94:	tbnz	w8, #0, ba4 <BZ2_bzDecompressInit+0x7c>
     b98:	ldr	w8, [sp, #12]
     b9c:	cmp	w8, #0x4
     ba0:	b.le	bb0 <BZ2_bzDecompressInit+0x88>
     ba4:	mov	w8, #0xfffffffe            	// #-2
     ba8:	stur	w8, [x29, #-4]
     bac:	b	cb8 <BZ2_bzDecompressInit+0x190>
     bb0:	ldr	x8, [sp, #16]
     bb4:	ldr	x8, [x8, #56]
     bb8:	cbnz	x8, bcc <BZ2_bzDecompressInit+0xa4>
     bbc:	ldr	x8, [sp, #16]
     bc0:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     bc4:	add	x9, x9, #0x0
     bc8:	str	x9, [x8, #56]
     bcc:	ldr	x8, [sp, #16]
     bd0:	ldr	x8, [x8, #64]
     bd4:	cbnz	x8, be8 <BZ2_bzDecompressInit+0xc0>
     bd8:	ldr	x8, [sp, #16]
     bdc:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
     be0:	add	x9, x9, #0x0
     be4:	str	x9, [x8, #64]
     be8:	ldr	x8, [sp, #16]
     bec:	ldr	x8, [x8, #56]
     bf0:	ldr	x9, [sp, #16]
     bf4:	ldr	x0, [x9, #72]
     bf8:	mov	w1, #0xfa90                	// #64144
     bfc:	mov	w2, #0x1                   	// #1
     c00:	blr	x8
     c04:	str	x0, [sp]
     c08:	ldr	x8, [sp]
     c0c:	cbnz	x8, c1c <BZ2_bzDecompressInit+0xf4>
     c10:	mov	w8, #0xfffffffd            	// #-3
     c14:	stur	w8, [x29, #-4]
     c18:	b	cb8 <BZ2_bzDecompressInit+0x190>
     c1c:	ldr	x8, [sp, #16]
     c20:	ldr	x9, [sp]
     c24:	str	x8, [x9]
     c28:	ldr	x8, [sp]
     c2c:	ldr	x9, [sp, #16]
     c30:	str	x8, [x9, #48]
     c34:	ldr	x8, [sp]
     c38:	mov	w10, #0xa                   	// #10
     c3c:	str	w10, [x8, #8]
     c40:	ldr	x8, [sp]
     c44:	str	wzr, [x8, #36]
     c48:	ldr	x8, [sp]
     c4c:	str	wzr, [x8, #32]
     c50:	ldr	x8, [sp]
     c54:	str	wzr, [x8, #3188]
     c58:	ldr	x8, [sp, #16]
     c5c:	str	wzr, [x8, #12]
     c60:	ldr	x8, [sp, #16]
     c64:	str	wzr, [x8, #16]
     c68:	ldr	x8, [sp, #16]
     c6c:	str	wzr, [x8, #36]
     c70:	ldr	x8, [sp, #16]
     c74:	str	wzr, [x8, #40]
     c78:	ldr	w10, [sp, #8]
     c7c:	ldr	x8, [sp]
     c80:	strb	w10, [x8, #44]
     c84:	ldr	x8, [sp]
     c88:	mov	x9, xzr
     c8c:	str	x9, [x8, #3168]
     c90:	ldr	x8, [sp]
     c94:	str	x9, [x8, #3160]
     c98:	ldr	x8, [sp]
     c9c:	str	x9, [x8, #3152]
     ca0:	ldr	x8, [sp]
     ca4:	str	wzr, [x8, #48]
     ca8:	ldr	w10, [sp, #12]
     cac:	ldr	x8, [sp]
     cb0:	str	w10, [x8, #52]
     cb4:	stur	wzr, [x29, #-4]
     cb8:	ldur	w0, [x29, #-4]
     cbc:	ldp	x29, x30, [sp, #32]
     cc0:	add	sp, sp, #0x30
     cc4:	ret

0000000000000cc8 <BZ2_indexIntoF>:
     cc8:	sub	sp, sp, #0x20
     ccc:	mov	w8, #0x100                 	// #256
     cd0:	str	w0, [sp, #28]
     cd4:	str	x1, [sp, #16]
     cd8:	str	wzr, [sp, #12]
     cdc:	str	w8, [sp, #8]
     ce0:	ldr	w8, [sp, #12]
     ce4:	ldr	w9, [sp, #8]
     ce8:	add	w8, w8, w9
     cec:	asr	w8, w8, #1
     cf0:	str	w8, [sp, #4]
     cf4:	ldr	w8, [sp, #28]
     cf8:	ldr	x10, [sp, #16]
     cfc:	ldrsw	x11, [sp, #4]
     d00:	ldr	w9, [x10, x11, lsl #2]
     d04:	cmp	w8, w9
     d08:	b.lt	d18 <BZ2_indexIntoF+0x50>  // b.tstop
     d0c:	ldr	w8, [sp, #4]
     d10:	str	w8, [sp, #12]
     d14:	b	d20 <BZ2_indexIntoF+0x58>
     d18:	ldr	w8, [sp, #4]
     d1c:	str	w8, [sp, #8]
     d20:	ldr	w8, [sp, #8]
     d24:	ldr	w9, [sp, #12]
     d28:	subs	w8, w8, w9
     d2c:	cmp	w8, #0x1
     d30:	b.ne	ce0 <BZ2_indexIntoF+0x18>  // b.any
     d34:	ldr	w0, [sp, #12]
     d38:	add	sp, sp, #0x20
     d3c:	ret

0000000000000d40 <BZ2_bzDecompress>:
     d40:	sub	sp, sp, #0x40
     d44:	stp	x29, x30, [sp, #48]
     d48:	add	x29, sp, #0x30
     d4c:	adrp	x8, 0 <stderr>
     d50:	add	x8, x8, #0x0
     d54:	stur	x0, [x29, #-16]
     d58:	ldur	x9, [x29, #-16]
     d5c:	str	x8, [sp]
     d60:	cbnz	x9, d70 <BZ2_bzDecompress+0x30>
     d64:	mov	w8, #0xfffffffe            	// #-2
     d68:	stur	w8, [x29, #-4]
     d6c:	b	fd4 <BZ2_bzDecompress+0x294>
     d70:	ldur	x8, [x29, #-16]
     d74:	ldr	x8, [x8, #48]
     d78:	str	x8, [sp, #16]
     d7c:	ldr	x8, [sp, #16]
     d80:	cbnz	x8, d90 <BZ2_bzDecompress+0x50>
     d84:	mov	w8, #0xfffffffe            	// #-2
     d88:	stur	w8, [x29, #-4]
     d8c:	b	fd4 <BZ2_bzDecompress+0x294>
     d90:	ldr	x8, [sp, #16]
     d94:	ldr	x8, [x8]
     d98:	ldur	x9, [x29, #-16]
     d9c:	cmp	x8, x9
     da0:	b.eq	db0 <BZ2_bzDecompress+0x70>  // b.none
     da4:	mov	w8, #0xfffffffe            	// #-2
     da8:	stur	w8, [x29, #-4]
     dac:	b	fd4 <BZ2_bzDecompress+0x294>
     db0:	ldr	x8, [sp, #16]
     db4:	ldr	w9, [x8, #8]
     db8:	cmp	w9, #0x1
     dbc:	b.ne	dcc <BZ2_bzDecompress+0x8c>  // b.any
     dc0:	mov	w8, #0xffffffff            	// #-1
     dc4:	stur	w8, [x29, #-4]
     dc8:	b	fd4 <BZ2_bzDecompress+0x294>
     dcc:	ldr	x8, [sp, #16]
     dd0:	ldr	w9, [x8, #8]
     dd4:	cmp	w9, #0x2
     dd8:	b.ne	f28 <BZ2_bzDecompress+0x1e8>  // b.any
     ddc:	ldr	x8, [sp, #16]
     de0:	ldrb	w9, [x8, #44]
     de4:	cbz	w9, df8 <BZ2_bzDecompress+0xb8>
     de8:	ldr	x0, [sp, #16]
     dec:	bl	fe4 <unRLE_obuf_to_output_SMALL>
     df0:	sturb	w0, [x29, #-17]
     df4:	b	e04 <BZ2_bzDecompress+0xc4>
     df8:	ldr	x0, [sp, #16]
     dfc:	bl	1e50 <unRLE_obuf_to_output_FAST>
     e00:	sturb	w0, [x29, #-17]
     e04:	ldurb	w8, [x29, #-17]
     e08:	cbz	w8, e18 <BZ2_bzDecompress+0xd8>
     e0c:	mov	w8, #0xfffffffc            	// #-4
     e10:	stur	w8, [x29, #-4]
     e14:	b	fd4 <BZ2_bzDecompress+0x294>
     e18:	ldr	x8, [sp, #16]
     e1c:	ldr	w9, [x8, #1092]
     e20:	ldr	x8, [sp, #16]
     e24:	mov	x10, #0xfa50                	// #64080
     e28:	add	x8, x8, x10
     e2c:	ldr	w11, [x8]
     e30:	add	w11, w11, #0x1
     e34:	cmp	w9, w11
     e38:	b.ne	f20 <BZ2_bzDecompress+0x1e0>  // b.any
     e3c:	ldr	x8, [sp, #16]
     e40:	ldr	w9, [x8, #16]
     e44:	cbnz	w9, f20 <BZ2_bzDecompress+0x1e0>
     e48:	ldr	x8, [sp, #16]
     e4c:	ldr	w9, [x8, #3184]
     e50:	mvn	w9, w9
     e54:	ldr	x8, [sp, #16]
     e58:	str	w9, [x8, #3184]
     e5c:	ldr	x8, [sp, #16]
     e60:	ldr	w9, [x8, #52]
     e64:	cmp	w9, #0x3
     e68:	b.lt	e90 <BZ2_bzDecompress+0x150>  // b.tstop
     e6c:	ldr	x8, [sp]
     e70:	ldr	x0, [x8]
     e74:	ldr	x9, [sp, #16]
     e78:	ldr	w2, [x9, #3176]
     e7c:	ldr	x9, [sp, #16]
     e80:	ldr	w3, [x9, #3184]
     e84:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
     e88:	add	x1, x1, #0x0
     e8c:	bl	0 <fprintf>
     e90:	ldr	x8, [sp, #16]
     e94:	ldr	w9, [x8, #52]
     e98:	cmp	w9, #0x2
     e9c:	b.lt	eb4 <BZ2_bzDecompress+0x174>  // b.tstop
     ea0:	ldr	x8, [sp]
     ea4:	ldr	x0, [x8]
     ea8:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
     eac:	add	x1, x1, #0x0
     eb0:	bl	0 <fprintf>
     eb4:	ldr	x8, [sp, #16]
     eb8:	ldr	w9, [x8, #3184]
     ebc:	ldr	x8, [sp, #16]
     ec0:	ldr	w10, [x8, #3176]
     ec4:	cmp	w9, w10
     ec8:	b.eq	ed8 <BZ2_bzDecompress+0x198>  // b.none
     ecc:	mov	w8, #0xfffffffc            	// #-4
     ed0:	stur	w8, [x29, #-4]
     ed4:	b	fd4 <BZ2_bzDecompress+0x294>
     ed8:	ldr	x8, [sp, #16]
     edc:	ldr	w9, [x8, #3188]
     ee0:	ldr	x8, [sp, #16]
     ee4:	ldr	w10, [x8, #3188]
     ee8:	lsr	w10, w10, #31
     eec:	orr	w9, w10, w9, lsl #1
     ef0:	ldr	x8, [sp, #16]
     ef4:	str	w9, [x8, #3188]
     ef8:	ldr	x8, [sp, #16]
     efc:	ldr	w9, [x8, #3184]
     f00:	ldr	x8, [sp, #16]
     f04:	ldr	w10, [x8, #3188]
     f08:	eor	w9, w10, w9
     f0c:	str	w9, [x8, #3188]
     f10:	ldr	x8, [sp, #16]
     f14:	mov	w9, #0xe                   	// #14
     f18:	str	w9, [x8, #8]
     f1c:	b	f28 <BZ2_bzDecompress+0x1e8>
     f20:	stur	wzr, [x29, #-4]
     f24:	b	fd4 <BZ2_bzDecompress+0x294>
     f28:	ldr	x8, [sp, #16]
     f2c:	ldr	w9, [x8, #8]
     f30:	cmp	w9, #0xa
     f34:	b.lt	fd0 <BZ2_bzDecompress+0x290>  // b.tstop
     f38:	ldr	x0, [sp, #16]
     f3c:	bl	0 <BZ2_decompress>
     f40:	str	w0, [sp, #12]
     f44:	ldr	w8, [sp, #12]
     f48:	cmp	w8, #0x4
     f4c:	b.ne	fb4 <BZ2_bzDecompress+0x274>  // b.any
     f50:	ldr	x8, [sp, #16]
     f54:	ldr	w9, [x8, #52]
     f58:	cmp	w9, #0x3
     f5c:	b.lt	f84 <BZ2_bzDecompress+0x244>  // b.tstop
     f60:	ldr	x8, [sp]
     f64:	ldr	x0, [x8]
     f68:	ldr	x9, [sp, #16]
     f6c:	ldr	w2, [x9, #3180]
     f70:	ldr	x9, [sp, #16]
     f74:	ldr	w3, [x9, #3188]
     f78:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
     f7c:	add	x1, x1, #0x0
     f80:	bl	0 <fprintf>
     f84:	ldr	x8, [sp, #16]
     f88:	ldr	w9, [x8, #3188]
     f8c:	ldr	x8, [sp, #16]
     f90:	ldr	w10, [x8, #3180]
     f94:	cmp	w9, w10
     f98:	b.eq	fa8 <BZ2_bzDecompress+0x268>  // b.none
     f9c:	mov	w8, #0xfffffffc            	// #-4
     fa0:	stur	w8, [x29, #-4]
     fa4:	b	fd4 <BZ2_bzDecompress+0x294>
     fa8:	ldr	w8, [sp, #12]
     fac:	stur	w8, [x29, #-4]
     fb0:	b	fd4 <BZ2_bzDecompress+0x294>
     fb4:	ldr	x8, [sp, #16]
     fb8:	ldr	w9, [x8, #8]
     fbc:	cmp	w9, #0x2
     fc0:	b.eq	fd0 <BZ2_bzDecompress+0x290>  // b.none
     fc4:	ldr	w8, [sp, #12]
     fc8:	stur	w8, [x29, #-4]
     fcc:	b	fd4 <BZ2_bzDecompress+0x294>
     fd0:	b	db0 <BZ2_bzDecompress+0x70>
     fd4:	ldur	w0, [x29, #-4]
     fd8:	ldp	x29, x30, [sp, #48]
     fdc:	add	sp, sp, #0x40
     fe0:	ret

0000000000000fe4 <unRLE_obuf_to_output_SMALL>:
     fe4:	sub	sp, sp, #0x30
     fe8:	stp	x29, x30, [sp, #32]
     fec:	add	x29, sp, #0x20
     ff0:	adrp	x8, 0 <BZ2_rNums>
     ff4:	add	x8, x8, #0x0
     ff8:	str	x0, [sp, #16]
     ffc:	ldr	x9, [sp, #16]
    1000:	ldrb	w10, [x9, #20]
    1004:	str	x8, [sp]
    1008:	cbz	w10, 1868 <unRLE_obuf_to_output_SMALL+0x884>
    100c:	ldr	x8, [sp, #16]
    1010:	ldr	x8, [x8]
    1014:	ldr	w9, [x8, #32]
    1018:	cbnz	w9, 1028 <unRLE_obuf_to_output_SMALL+0x44>
    101c:	mov	w8, #0x0                   	// #0
    1020:	sturb	w8, [x29, #-1]
    1024:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1028:	ldr	x8, [sp, #16]
    102c:	ldr	w9, [x8, #16]
    1030:	cbnz	w9, 1038 <unRLE_obuf_to_output_SMALL+0x54>
    1034:	b	10f8 <unRLE_obuf_to_output_SMALL+0x114>
    1038:	ldr	x8, [sp, #16]
    103c:	ldrb	w9, [x8, #12]
    1040:	ldr	x8, [sp, #16]
    1044:	ldr	x8, [x8]
    1048:	ldr	x8, [x8, #24]
    104c:	strb	w9, [x8]
    1050:	ldr	x8, [sp, #16]
    1054:	ldr	w9, [x8, #3184]
    1058:	ldr	x8, [sp, #16]
    105c:	ldr	w10, [x8, #3184]
    1060:	ldr	x8, [sp, #16]
    1064:	ldrb	w11, [x8, #12]
    1068:	eor	w10, w11, w10, lsr #24
    106c:	adrp	x8, 0 <BZ2_crc32Table>
    1070:	add	x8, x8, #0x0
    1074:	ldr	w10, [x8, w10, uxtw #2]
    1078:	eor	w9, w10, w9, lsl #8
    107c:	ldr	x8, [sp, #16]
    1080:	str	w9, [x8, #3184]
    1084:	ldr	x8, [sp, #16]
    1088:	ldr	w9, [x8, #16]
    108c:	subs	w9, w9, #0x1
    1090:	str	w9, [x8, #16]
    1094:	ldr	x8, [sp, #16]
    1098:	ldr	x8, [x8]
    109c:	ldr	x12, [x8, #24]
    10a0:	add	x12, x12, #0x1
    10a4:	str	x12, [x8, #24]
    10a8:	ldr	x8, [sp, #16]
    10ac:	ldr	x8, [x8]
    10b0:	ldr	w9, [x8, #32]
    10b4:	subs	w9, w9, #0x1
    10b8:	str	w9, [x8, #32]
    10bc:	ldr	x8, [sp, #16]
    10c0:	ldr	x8, [x8]
    10c4:	ldr	w9, [x8, #36]
    10c8:	add	w9, w9, #0x1
    10cc:	str	w9, [x8, #36]
    10d0:	ldr	x8, [sp, #16]
    10d4:	ldr	x8, [x8]
    10d8:	ldr	w9, [x8, #36]
    10dc:	cbnz	w9, 10f4 <unRLE_obuf_to_output_SMALL+0x110>
    10e0:	ldr	x8, [sp, #16]
    10e4:	ldr	x8, [x8]
    10e8:	ldr	w9, [x8, #40]
    10ec:	add	w9, w9, #0x1
    10f0:	str	w9, [x8, #40]
    10f4:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    10f8:	ldr	x8, [sp, #16]
    10fc:	ldr	w9, [x8, #1092]
    1100:	ldr	x8, [sp, #16]
    1104:	mov	x10, #0xfa50                	// #64080
    1108:	add	x8, x8, x10
    110c:	ldr	w11, [x8]
    1110:	add	w11, w11, #0x1
    1114:	cmp	w9, w11
    1118:	b.ne	1128 <unRLE_obuf_to_output_SMALL+0x144>  // b.any
    111c:	mov	w8, #0x0                   	// #0
    1120:	sturb	w8, [x29, #-1]
    1124:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1128:	ldr	x8, [sp, #16]
    112c:	ldr	w9, [x8, #1092]
    1130:	ldr	x8, [sp, #16]
    1134:	mov	x10, #0xfa50                	// #64080
    1138:	add	x8, x8, x10
    113c:	ldr	w11, [x8]
    1140:	add	w11, w11, #0x1
    1144:	cmp	w9, w11
    1148:	b.le	1158 <unRLE_obuf_to_output_SMALL+0x174>
    114c:	mov	w8, #0x1                   	// #1
    1150:	sturb	w8, [x29, #-1]
    1154:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1158:	ldr	x8, [sp, #16]
    115c:	mov	w9, #0x1                   	// #1
    1160:	str	w9, [x8, #16]
    1164:	ldr	x8, [sp, #16]
    1168:	ldr	w9, [x8, #64]
    116c:	ldr	x8, [sp, #16]
    1170:	strb	w9, [x8, #12]
    1174:	ldr	x8, [sp, #16]
    1178:	ldr	w9, [x8, #60]
    117c:	ldr	x8, [sp, #16]
    1180:	ldr	w10, [x8, #40]
    1184:	mov	w11, #0x86a0                	// #34464
    1188:	movk	w11, #0x1, lsl #16
    118c:	mul	w10, w11, w10
    1190:	cmp	w9, w10
    1194:	b.cc	11a4 <unRLE_obuf_to_output_SMALL+0x1c0>  // b.lo, b.ul, b.last
    1198:	mov	w8, #0x1                   	// #1
    119c:	sturb	w8, [x29, #-1]
    11a0:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    11a4:	ldr	x8, [sp, #16]
    11a8:	ldr	w0, [x8, #60]
    11ac:	ldr	x8, [sp, #16]
    11b0:	add	x1, x8, #0x448
    11b4:	bl	cc8 <BZ2_indexIntoF>
    11b8:	strb	w0, [sp, #15]
    11bc:	ldr	x8, [sp, #16]
    11c0:	ldr	x8, [x8, #3160]
    11c4:	ldr	x9, [sp, #16]
    11c8:	ldr	w10, [x9, #60]
    11cc:	mov	w9, w10
    11d0:	ldrh	w10, [x8, x9, lsl #1]
    11d4:	ldr	x8, [sp, #16]
    11d8:	ldr	x8, [x8, #3168]
    11dc:	ldr	x9, [sp, #16]
    11e0:	ldr	w11, [x9, #60]
    11e4:	lsr	w11, w11, #1
    11e8:	ldrb	w11, [x8, w11, uxtw]
    11ec:	ldr	x8, [sp, #16]
    11f0:	ldr	w12, [x8, #60]
    11f4:	lsl	w12, w12, #2
    11f8:	and	w12, w12, #0x4
    11fc:	lsr	w11, w11, w12
    1200:	and	w11, w11, #0xf
    1204:	orr	w10, w10, w11, lsl #16
    1208:	ldr	x8, [sp, #16]
    120c:	str	w10, [x8, #60]
    1210:	ldr	x8, [sp, #16]
    1214:	ldr	w10, [x8, #24]
    1218:	cbnz	w10, 125c <unRLE_obuf_to_output_SMALL+0x278>
    121c:	ldr	x8, [sp, #16]
    1220:	ldrsw	x8, [x8, #28]
    1224:	ldr	x9, [sp]
    1228:	ldr	w10, [x9, x8, lsl #2]
    122c:	ldr	x8, [sp, #16]
    1230:	str	w10, [x8, #24]
    1234:	ldr	x8, [sp, #16]
    1238:	ldr	w10, [x8, #28]
    123c:	add	w10, w10, #0x1
    1240:	str	w10, [x8, #28]
    1244:	ldr	x8, [sp, #16]
    1248:	ldr	w10, [x8, #28]
    124c:	cmp	w10, #0x200
    1250:	b.ne	125c <unRLE_obuf_to_output_SMALL+0x278>  // b.any
    1254:	ldr	x8, [sp, #16]
    1258:	str	wzr, [x8, #28]
    125c:	ldr	x8, [sp, #16]
    1260:	ldr	w9, [x8, #24]
    1264:	subs	w9, w9, #0x1
    1268:	str	w9, [x8, #24]
    126c:	ldr	x8, [sp, #16]
    1270:	ldr	w9, [x8, #24]
    1274:	mov	w10, #0x1                   	// #1
    1278:	mov	w11, wzr
    127c:	cmp	w9, #0x1
    1280:	csel	w9, w10, w11, eq  // eq = none
    1284:	ldrb	w10, [sp, #15]
    1288:	eor	w9, w10, w9
    128c:	strb	w9, [sp, #15]
    1290:	ldr	x8, [sp, #16]
    1294:	ldr	w9, [x8, #1092]
    1298:	add	w9, w9, #0x1
    129c:	str	w9, [x8, #1092]
    12a0:	ldr	x8, [sp, #16]
    12a4:	ldr	w9, [x8, #1092]
    12a8:	ldr	x8, [sp, #16]
    12ac:	mov	x12, #0xfa50                	// #64080
    12b0:	add	x8, x8, x12
    12b4:	ldr	w10, [x8]
    12b8:	add	w10, w10, #0x1
    12bc:	cmp	w9, w10
    12c0:	b.ne	12c8 <unRLE_obuf_to_output_SMALL+0x2e4>  // b.any
    12c4:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    12c8:	ldrb	w8, [sp, #15]
    12cc:	ldr	x9, [sp, #16]
    12d0:	ldr	w10, [x9, #64]
    12d4:	cmp	w8, w10
    12d8:	b.eq	12ec <unRLE_obuf_to_output_SMALL+0x308>  // b.none
    12dc:	ldrb	w8, [sp, #15]
    12e0:	ldr	x9, [sp, #16]
    12e4:	str	w8, [x9, #64]
    12e8:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    12ec:	ldr	x8, [sp, #16]
    12f0:	mov	w9, #0x2                   	// #2
    12f4:	str	w9, [x8, #16]
    12f8:	ldr	x8, [sp, #16]
    12fc:	ldr	w9, [x8, #60]
    1300:	ldr	x8, [sp, #16]
    1304:	ldr	w10, [x8, #40]
    1308:	mov	w11, #0x86a0                	// #34464
    130c:	movk	w11, #0x1, lsl #16
    1310:	mul	w10, w11, w10
    1314:	cmp	w9, w10
    1318:	b.cc	1328 <unRLE_obuf_to_output_SMALL+0x344>  // b.lo, b.ul, b.last
    131c:	mov	w8, #0x1                   	// #1
    1320:	sturb	w8, [x29, #-1]
    1324:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1328:	ldr	x8, [sp, #16]
    132c:	ldr	w0, [x8, #60]
    1330:	ldr	x8, [sp, #16]
    1334:	add	x1, x8, #0x448
    1338:	bl	cc8 <BZ2_indexIntoF>
    133c:	strb	w0, [sp, #15]
    1340:	ldr	x8, [sp, #16]
    1344:	ldr	x8, [x8, #3160]
    1348:	ldr	x9, [sp, #16]
    134c:	ldr	w10, [x9, #60]
    1350:	mov	w9, w10
    1354:	ldrh	w10, [x8, x9, lsl #1]
    1358:	ldr	x8, [sp, #16]
    135c:	ldr	x8, [x8, #3168]
    1360:	ldr	x9, [sp, #16]
    1364:	ldr	w11, [x9, #60]
    1368:	lsr	w11, w11, #1
    136c:	ldrb	w11, [x8, w11, uxtw]
    1370:	ldr	x8, [sp, #16]
    1374:	ldr	w12, [x8, #60]
    1378:	lsl	w12, w12, #2
    137c:	and	w12, w12, #0x4
    1380:	lsr	w11, w11, w12
    1384:	and	w11, w11, #0xf
    1388:	orr	w10, w10, w11, lsl #16
    138c:	ldr	x8, [sp, #16]
    1390:	str	w10, [x8, #60]
    1394:	ldr	x8, [sp, #16]
    1398:	ldr	w10, [x8, #24]
    139c:	cbnz	w10, 13e0 <unRLE_obuf_to_output_SMALL+0x3fc>
    13a0:	ldr	x8, [sp, #16]
    13a4:	ldrsw	x8, [x8, #28]
    13a8:	ldr	x9, [sp]
    13ac:	ldr	w10, [x9, x8, lsl #2]
    13b0:	ldr	x8, [sp, #16]
    13b4:	str	w10, [x8, #24]
    13b8:	ldr	x8, [sp, #16]
    13bc:	ldr	w10, [x8, #28]
    13c0:	add	w10, w10, #0x1
    13c4:	str	w10, [x8, #28]
    13c8:	ldr	x8, [sp, #16]
    13cc:	ldr	w10, [x8, #28]
    13d0:	cmp	w10, #0x200
    13d4:	b.ne	13e0 <unRLE_obuf_to_output_SMALL+0x3fc>  // b.any
    13d8:	ldr	x8, [sp, #16]
    13dc:	str	wzr, [x8, #28]
    13e0:	ldr	x8, [sp, #16]
    13e4:	ldr	w9, [x8, #24]
    13e8:	subs	w9, w9, #0x1
    13ec:	str	w9, [x8, #24]
    13f0:	ldr	x8, [sp, #16]
    13f4:	ldr	w9, [x8, #24]
    13f8:	mov	w10, #0x1                   	// #1
    13fc:	mov	w11, wzr
    1400:	cmp	w9, #0x1
    1404:	csel	w9, w10, w11, eq  // eq = none
    1408:	ldrb	w10, [sp, #15]
    140c:	eor	w9, w10, w9
    1410:	strb	w9, [sp, #15]
    1414:	ldr	x8, [sp, #16]
    1418:	ldr	w9, [x8, #1092]
    141c:	add	w9, w9, #0x1
    1420:	str	w9, [x8, #1092]
    1424:	ldr	x8, [sp, #16]
    1428:	ldr	w9, [x8, #1092]
    142c:	ldr	x8, [sp, #16]
    1430:	mov	x12, #0xfa50                	// #64080
    1434:	add	x8, x8, x12
    1438:	ldr	w10, [x8]
    143c:	add	w10, w10, #0x1
    1440:	cmp	w9, w10
    1444:	b.ne	144c <unRLE_obuf_to_output_SMALL+0x468>  // b.any
    1448:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    144c:	ldrb	w8, [sp, #15]
    1450:	ldr	x9, [sp, #16]
    1454:	ldr	w10, [x9, #64]
    1458:	cmp	w8, w10
    145c:	b.eq	1470 <unRLE_obuf_to_output_SMALL+0x48c>  // b.none
    1460:	ldrb	w8, [sp, #15]
    1464:	ldr	x9, [sp, #16]
    1468:	str	w8, [x9, #64]
    146c:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    1470:	ldr	x8, [sp, #16]
    1474:	mov	w9, #0x3                   	// #3
    1478:	str	w9, [x8, #16]
    147c:	ldr	x8, [sp, #16]
    1480:	ldr	w9, [x8, #60]
    1484:	ldr	x8, [sp, #16]
    1488:	ldr	w10, [x8, #40]
    148c:	mov	w11, #0x86a0                	// #34464
    1490:	movk	w11, #0x1, lsl #16
    1494:	mul	w10, w11, w10
    1498:	cmp	w9, w10
    149c:	b.cc	14ac <unRLE_obuf_to_output_SMALL+0x4c8>  // b.lo, b.ul, b.last
    14a0:	mov	w8, #0x1                   	// #1
    14a4:	sturb	w8, [x29, #-1]
    14a8:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    14ac:	ldr	x8, [sp, #16]
    14b0:	ldr	w0, [x8, #60]
    14b4:	ldr	x8, [sp, #16]
    14b8:	add	x1, x8, #0x448
    14bc:	bl	cc8 <BZ2_indexIntoF>
    14c0:	strb	w0, [sp, #15]
    14c4:	ldr	x8, [sp, #16]
    14c8:	ldr	x8, [x8, #3160]
    14cc:	ldr	x9, [sp, #16]
    14d0:	ldr	w10, [x9, #60]
    14d4:	mov	w9, w10
    14d8:	ldrh	w10, [x8, x9, lsl #1]
    14dc:	ldr	x8, [sp, #16]
    14e0:	ldr	x8, [x8, #3168]
    14e4:	ldr	x9, [sp, #16]
    14e8:	ldr	w11, [x9, #60]
    14ec:	lsr	w11, w11, #1
    14f0:	ldrb	w11, [x8, w11, uxtw]
    14f4:	ldr	x8, [sp, #16]
    14f8:	ldr	w12, [x8, #60]
    14fc:	lsl	w12, w12, #2
    1500:	and	w12, w12, #0x4
    1504:	lsr	w11, w11, w12
    1508:	and	w11, w11, #0xf
    150c:	orr	w10, w10, w11, lsl #16
    1510:	ldr	x8, [sp, #16]
    1514:	str	w10, [x8, #60]
    1518:	ldr	x8, [sp, #16]
    151c:	ldr	w10, [x8, #24]
    1520:	cbnz	w10, 1564 <unRLE_obuf_to_output_SMALL+0x580>
    1524:	ldr	x8, [sp, #16]
    1528:	ldrsw	x8, [x8, #28]
    152c:	ldr	x9, [sp]
    1530:	ldr	w10, [x9, x8, lsl #2]
    1534:	ldr	x8, [sp, #16]
    1538:	str	w10, [x8, #24]
    153c:	ldr	x8, [sp, #16]
    1540:	ldr	w10, [x8, #28]
    1544:	add	w10, w10, #0x1
    1548:	str	w10, [x8, #28]
    154c:	ldr	x8, [sp, #16]
    1550:	ldr	w10, [x8, #28]
    1554:	cmp	w10, #0x200
    1558:	b.ne	1564 <unRLE_obuf_to_output_SMALL+0x580>  // b.any
    155c:	ldr	x8, [sp, #16]
    1560:	str	wzr, [x8, #28]
    1564:	ldr	x8, [sp, #16]
    1568:	ldr	w9, [x8, #24]
    156c:	subs	w9, w9, #0x1
    1570:	str	w9, [x8, #24]
    1574:	ldr	x8, [sp, #16]
    1578:	ldr	w9, [x8, #24]
    157c:	mov	w10, #0x1                   	// #1
    1580:	mov	w11, wzr
    1584:	cmp	w9, #0x1
    1588:	csel	w9, w10, w11, eq  // eq = none
    158c:	ldrb	w10, [sp, #15]
    1590:	eor	w9, w10, w9
    1594:	strb	w9, [sp, #15]
    1598:	ldr	x8, [sp, #16]
    159c:	ldr	w9, [x8, #1092]
    15a0:	add	w9, w9, #0x1
    15a4:	str	w9, [x8, #1092]
    15a8:	ldr	x8, [sp, #16]
    15ac:	ldr	w9, [x8, #1092]
    15b0:	ldr	x8, [sp, #16]
    15b4:	mov	x12, #0xfa50                	// #64080
    15b8:	add	x8, x8, x12
    15bc:	ldr	w10, [x8]
    15c0:	add	w10, w10, #0x1
    15c4:	cmp	w9, w10
    15c8:	b.ne	15d0 <unRLE_obuf_to_output_SMALL+0x5ec>  // b.any
    15cc:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    15d0:	ldrb	w8, [sp, #15]
    15d4:	ldr	x9, [sp, #16]
    15d8:	ldr	w10, [x9, #64]
    15dc:	cmp	w8, w10
    15e0:	b.eq	15f4 <unRLE_obuf_to_output_SMALL+0x610>  // b.none
    15e4:	ldrb	w8, [sp, #15]
    15e8:	ldr	x9, [sp, #16]
    15ec:	str	w8, [x9, #64]
    15f0:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    15f4:	ldr	x8, [sp, #16]
    15f8:	ldr	w9, [x8, #60]
    15fc:	ldr	x8, [sp, #16]
    1600:	ldr	w10, [x8, #40]
    1604:	mov	w11, #0x86a0                	// #34464
    1608:	movk	w11, #0x1, lsl #16
    160c:	mul	w10, w11, w10
    1610:	cmp	w9, w10
    1614:	b.cc	1624 <unRLE_obuf_to_output_SMALL+0x640>  // b.lo, b.ul, b.last
    1618:	mov	w8, #0x1                   	// #1
    161c:	sturb	w8, [x29, #-1]
    1620:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1624:	ldr	x8, [sp, #16]
    1628:	ldr	w0, [x8, #60]
    162c:	ldr	x8, [sp, #16]
    1630:	add	x1, x8, #0x448
    1634:	bl	cc8 <BZ2_indexIntoF>
    1638:	strb	w0, [sp, #15]
    163c:	ldr	x8, [sp, #16]
    1640:	ldr	x8, [x8, #3160]
    1644:	ldr	x9, [sp, #16]
    1648:	ldr	w10, [x9, #60]
    164c:	mov	w9, w10
    1650:	ldrh	w10, [x8, x9, lsl #1]
    1654:	ldr	x8, [sp, #16]
    1658:	ldr	x8, [x8, #3168]
    165c:	ldr	x9, [sp, #16]
    1660:	ldr	w11, [x9, #60]
    1664:	lsr	w11, w11, #1
    1668:	ldrb	w11, [x8, w11, uxtw]
    166c:	ldr	x8, [sp, #16]
    1670:	ldr	w12, [x8, #60]
    1674:	lsl	w12, w12, #2
    1678:	and	w12, w12, #0x4
    167c:	lsr	w11, w11, w12
    1680:	and	w11, w11, #0xf
    1684:	orr	w10, w10, w11, lsl #16
    1688:	ldr	x8, [sp, #16]
    168c:	str	w10, [x8, #60]
    1690:	ldr	x8, [sp, #16]
    1694:	ldr	w10, [x8, #24]
    1698:	cbnz	w10, 16dc <unRLE_obuf_to_output_SMALL+0x6f8>
    169c:	ldr	x8, [sp, #16]
    16a0:	ldrsw	x8, [x8, #28]
    16a4:	ldr	x9, [sp]
    16a8:	ldr	w10, [x9, x8, lsl #2]
    16ac:	ldr	x8, [sp, #16]
    16b0:	str	w10, [x8, #24]
    16b4:	ldr	x8, [sp, #16]
    16b8:	ldr	w10, [x8, #28]
    16bc:	add	w10, w10, #0x1
    16c0:	str	w10, [x8, #28]
    16c4:	ldr	x8, [sp, #16]
    16c8:	ldr	w10, [x8, #28]
    16cc:	cmp	w10, #0x200
    16d0:	b.ne	16dc <unRLE_obuf_to_output_SMALL+0x6f8>  // b.any
    16d4:	ldr	x8, [sp, #16]
    16d8:	str	wzr, [x8, #28]
    16dc:	ldr	x8, [sp, #16]
    16e0:	ldr	w9, [x8, #24]
    16e4:	subs	w9, w9, #0x1
    16e8:	str	w9, [x8, #24]
    16ec:	ldr	x8, [sp, #16]
    16f0:	ldr	w9, [x8, #24]
    16f4:	mov	w10, #0x1                   	// #1
    16f8:	mov	w11, wzr
    16fc:	cmp	w9, #0x1
    1700:	csel	w9, w10, w11, eq  // eq = none
    1704:	ldrb	w10, [sp, #15]
    1708:	eor	w9, w10, w9
    170c:	strb	w9, [sp, #15]
    1710:	ldr	x8, [sp, #16]
    1714:	ldr	w9, [x8, #1092]
    1718:	add	w9, w9, #0x1
    171c:	str	w9, [x8, #1092]
    1720:	ldrb	w9, [sp, #15]
    1724:	add	w9, w9, #0x4
    1728:	ldr	x8, [sp, #16]
    172c:	str	w9, [x8, #16]
    1730:	ldr	x8, [sp, #16]
    1734:	ldr	w9, [x8, #60]
    1738:	ldr	x8, [sp, #16]
    173c:	ldr	w10, [x8, #40]
    1740:	mov	w11, #0x86a0                	// #34464
    1744:	movk	w11, #0x1, lsl #16
    1748:	mul	w10, w11, w10
    174c:	cmp	w9, w10
    1750:	b.cc	1760 <unRLE_obuf_to_output_SMALL+0x77c>  // b.lo, b.ul, b.last
    1754:	mov	w8, #0x1                   	// #1
    1758:	sturb	w8, [x29, #-1]
    175c:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1760:	ldr	x8, [sp, #16]
    1764:	ldr	w0, [x8, #60]
    1768:	ldr	x8, [sp, #16]
    176c:	add	x1, x8, #0x448
    1770:	bl	cc8 <BZ2_indexIntoF>
    1774:	ldr	x8, [sp, #16]
    1778:	str	w0, [x8, #64]
    177c:	ldr	x8, [sp, #16]
    1780:	ldr	x8, [x8, #3160]
    1784:	ldr	x9, [sp, #16]
    1788:	ldr	w10, [x9, #60]
    178c:	mov	w9, w10
    1790:	ldrh	w10, [x8, x9, lsl #1]
    1794:	ldr	x8, [sp, #16]
    1798:	ldr	x8, [x8, #3168]
    179c:	ldr	x9, [sp, #16]
    17a0:	ldr	w11, [x9, #60]
    17a4:	lsr	w11, w11, #1
    17a8:	ldrb	w11, [x8, w11, uxtw]
    17ac:	ldr	x8, [sp, #16]
    17b0:	ldr	w12, [x8, #60]
    17b4:	lsl	w12, w12, #2
    17b8:	and	w12, w12, #0x4
    17bc:	lsr	w11, w11, w12
    17c0:	and	w11, w11, #0xf
    17c4:	orr	w10, w10, w11, lsl #16
    17c8:	ldr	x8, [sp, #16]
    17cc:	str	w10, [x8, #60]
    17d0:	ldr	x8, [sp, #16]
    17d4:	ldr	w10, [x8, #24]
    17d8:	cbnz	w10, 181c <unRLE_obuf_to_output_SMALL+0x838>
    17dc:	ldr	x8, [sp, #16]
    17e0:	ldrsw	x8, [x8, #28]
    17e4:	ldr	x9, [sp]
    17e8:	ldr	w10, [x9, x8, lsl #2]
    17ec:	ldr	x8, [sp, #16]
    17f0:	str	w10, [x8, #24]
    17f4:	ldr	x8, [sp, #16]
    17f8:	ldr	w10, [x8, #28]
    17fc:	add	w10, w10, #0x1
    1800:	str	w10, [x8, #28]
    1804:	ldr	x8, [sp, #16]
    1808:	ldr	w10, [x8, #28]
    180c:	cmp	w10, #0x200
    1810:	b.ne	181c <unRLE_obuf_to_output_SMALL+0x838>  // b.any
    1814:	ldr	x8, [sp, #16]
    1818:	str	wzr, [x8, #28]
    181c:	ldr	x8, [sp, #16]
    1820:	ldr	w9, [x8, #24]
    1824:	subs	w9, w9, #0x1
    1828:	str	w9, [x8, #24]
    182c:	ldr	x8, [sp, #16]
    1830:	ldr	w9, [x8, #24]
    1834:	mov	w10, #0x1                   	// #1
    1838:	mov	w11, wzr
    183c:	cmp	w9, #0x1
    1840:	csel	w9, w10, w11, eq  // eq = none
    1844:	ldr	x8, [sp, #16]
    1848:	ldr	w10, [x8, #64]
    184c:	eor	w9, w10, w9
    1850:	str	w9, [x8, #64]
    1854:	ldr	x8, [sp, #16]
    1858:	ldr	w9, [x8, #1092]
    185c:	add	w9, w9, #0x1
    1860:	str	w9, [x8, #1092]
    1864:	b	100c <unRLE_obuf_to_output_SMALL+0x28>
    1868:	ldr	x8, [sp, #16]
    186c:	ldr	x8, [x8]
    1870:	ldr	w9, [x8, #32]
    1874:	cbnz	w9, 1884 <unRLE_obuf_to_output_SMALL+0x8a0>
    1878:	mov	w8, #0x0                   	// #0
    187c:	sturb	w8, [x29, #-1]
    1880:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1884:	ldr	x8, [sp, #16]
    1888:	ldr	w9, [x8, #16]
    188c:	cbnz	w9, 1894 <unRLE_obuf_to_output_SMALL+0x8b0>
    1890:	b	1954 <unRLE_obuf_to_output_SMALL+0x970>
    1894:	ldr	x8, [sp, #16]
    1898:	ldrb	w9, [x8, #12]
    189c:	ldr	x8, [sp, #16]
    18a0:	ldr	x8, [x8]
    18a4:	ldr	x8, [x8, #24]
    18a8:	strb	w9, [x8]
    18ac:	ldr	x8, [sp, #16]
    18b0:	ldr	w9, [x8, #3184]
    18b4:	ldr	x8, [sp, #16]
    18b8:	ldr	w10, [x8, #3184]
    18bc:	ldr	x8, [sp, #16]
    18c0:	ldrb	w11, [x8, #12]
    18c4:	eor	w10, w11, w10, lsr #24
    18c8:	adrp	x8, 0 <BZ2_crc32Table>
    18cc:	add	x8, x8, #0x0
    18d0:	ldr	w10, [x8, w10, uxtw #2]
    18d4:	eor	w9, w10, w9, lsl #8
    18d8:	ldr	x8, [sp, #16]
    18dc:	str	w9, [x8, #3184]
    18e0:	ldr	x8, [sp, #16]
    18e4:	ldr	w9, [x8, #16]
    18e8:	subs	w9, w9, #0x1
    18ec:	str	w9, [x8, #16]
    18f0:	ldr	x8, [sp, #16]
    18f4:	ldr	x8, [x8]
    18f8:	ldr	x12, [x8, #24]
    18fc:	add	x12, x12, #0x1
    1900:	str	x12, [x8, #24]
    1904:	ldr	x8, [sp, #16]
    1908:	ldr	x8, [x8]
    190c:	ldr	w9, [x8, #32]
    1910:	subs	w9, w9, #0x1
    1914:	str	w9, [x8, #32]
    1918:	ldr	x8, [sp, #16]
    191c:	ldr	x8, [x8]
    1920:	ldr	w9, [x8, #36]
    1924:	add	w9, w9, #0x1
    1928:	str	w9, [x8, #36]
    192c:	ldr	x8, [sp, #16]
    1930:	ldr	x8, [x8]
    1934:	ldr	w9, [x8, #36]
    1938:	cbnz	w9, 1950 <unRLE_obuf_to_output_SMALL+0x96c>
    193c:	ldr	x8, [sp, #16]
    1940:	ldr	x8, [x8]
    1944:	ldr	w9, [x8, #40]
    1948:	add	w9, w9, #0x1
    194c:	str	w9, [x8, #40]
    1950:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1954:	ldr	x8, [sp, #16]
    1958:	ldr	w9, [x8, #1092]
    195c:	ldr	x8, [sp, #16]
    1960:	mov	x10, #0xfa50                	// #64080
    1964:	add	x8, x8, x10
    1968:	ldr	w11, [x8]
    196c:	add	w11, w11, #0x1
    1970:	cmp	w9, w11
    1974:	b.ne	1984 <unRLE_obuf_to_output_SMALL+0x9a0>  // b.any
    1978:	mov	w8, #0x0                   	// #0
    197c:	sturb	w8, [x29, #-1]
    1980:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1984:	ldr	x8, [sp, #16]
    1988:	ldr	w9, [x8, #1092]
    198c:	ldr	x8, [sp, #16]
    1990:	mov	x10, #0xfa50                	// #64080
    1994:	add	x8, x8, x10
    1998:	ldr	w11, [x8]
    199c:	add	w11, w11, #0x1
    19a0:	cmp	w9, w11
    19a4:	b.le	19b4 <unRLE_obuf_to_output_SMALL+0x9d0>
    19a8:	mov	w8, #0x1                   	// #1
    19ac:	sturb	w8, [x29, #-1]
    19b0:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    19b4:	ldr	x8, [sp, #16]
    19b8:	mov	w9, #0x1                   	// #1
    19bc:	str	w9, [x8, #16]
    19c0:	ldr	x8, [sp, #16]
    19c4:	ldr	w9, [x8, #64]
    19c8:	ldr	x8, [sp, #16]
    19cc:	strb	w9, [x8, #12]
    19d0:	ldr	x8, [sp, #16]
    19d4:	ldr	w9, [x8, #60]
    19d8:	ldr	x8, [sp, #16]
    19dc:	ldr	w10, [x8, #40]
    19e0:	mov	w11, #0x86a0                	// #34464
    19e4:	movk	w11, #0x1, lsl #16
    19e8:	mul	w10, w11, w10
    19ec:	cmp	w9, w10
    19f0:	b.cc	1a00 <unRLE_obuf_to_output_SMALL+0xa1c>  // b.lo, b.ul, b.last
    19f4:	mov	w8, #0x1                   	// #1
    19f8:	sturb	w8, [x29, #-1]
    19fc:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1a00:	ldr	x8, [sp, #16]
    1a04:	ldr	w0, [x8, #60]
    1a08:	ldr	x8, [sp, #16]
    1a0c:	add	x1, x8, #0x448
    1a10:	bl	cc8 <BZ2_indexIntoF>
    1a14:	strb	w0, [sp, #15]
    1a18:	ldr	x8, [sp, #16]
    1a1c:	ldr	x8, [x8, #3160]
    1a20:	ldr	x9, [sp, #16]
    1a24:	ldr	w10, [x9, #60]
    1a28:	mov	w9, w10
    1a2c:	ldrh	w10, [x8, x9, lsl #1]
    1a30:	ldr	x8, [sp, #16]
    1a34:	ldr	x8, [x8, #3168]
    1a38:	ldr	x9, [sp, #16]
    1a3c:	ldr	w11, [x9, #60]
    1a40:	lsr	w11, w11, #1
    1a44:	ldrb	w11, [x8, w11, uxtw]
    1a48:	ldr	x8, [sp, #16]
    1a4c:	ldr	w12, [x8, #60]
    1a50:	lsl	w12, w12, #2
    1a54:	and	w12, w12, #0x4
    1a58:	lsr	w11, w11, w12
    1a5c:	and	w11, w11, #0xf
    1a60:	orr	w10, w10, w11, lsl #16
    1a64:	ldr	x8, [sp, #16]
    1a68:	str	w10, [x8, #60]
    1a6c:	ldr	x8, [sp, #16]
    1a70:	ldr	w10, [x8, #1092]
    1a74:	add	w10, w10, #0x1
    1a78:	str	w10, [x8, #1092]
    1a7c:	ldr	x8, [sp, #16]
    1a80:	ldr	w10, [x8, #1092]
    1a84:	ldr	x8, [sp, #16]
    1a88:	mov	x9, #0xfa50                	// #64080
    1a8c:	add	x8, x8, x9
    1a90:	ldr	w11, [x8]
    1a94:	add	w11, w11, #0x1
    1a98:	cmp	w10, w11
    1a9c:	b.ne	1aa4 <unRLE_obuf_to_output_SMALL+0xac0>  // b.any
    1aa0:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1aa4:	ldrb	w8, [sp, #15]
    1aa8:	ldr	x9, [sp, #16]
    1aac:	ldr	w10, [x9, #64]
    1ab0:	cmp	w8, w10
    1ab4:	b.eq	1ac8 <unRLE_obuf_to_output_SMALL+0xae4>  // b.none
    1ab8:	ldrb	w8, [sp, #15]
    1abc:	ldr	x9, [sp, #16]
    1ac0:	str	w8, [x9, #64]
    1ac4:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1ac8:	ldr	x8, [sp, #16]
    1acc:	mov	w9, #0x2                   	// #2
    1ad0:	str	w9, [x8, #16]
    1ad4:	ldr	x8, [sp, #16]
    1ad8:	ldr	w9, [x8, #60]
    1adc:	ldr	x8, [sp, #16]
    1ae0:	ldr	w10, [x8, #40]
    1ae4:	mov	w11, #0x86a0                	// #34464
    1ae8:	movk	w11, #0x1, lsl #16
    1aec:	mul	w10, w11, w10
    1af0:	cmp	w9, w10
    1af4:	b.cc	1b04 <unRLE_obuf_to_output_SMALL+0xb20>  // b.lo, b.ul, b.last
    1af8:	mov	w8, #0x1                   	// #1
    1afc:	sturb	w8, [x29, #-1]
    1b00:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1b04:	ldr	x8, [sp, #16]
    1b08:	ldr	w0, [x8, #60]
    1b0c:	ldr	x8, [sp, #16]
    1b10:	add	x1, x8, #0x448
    1b14:	bl	cc8 <BZ2_indexIntoF>
    1b18:	strb	w0, [sp, #15]
    1b1c:	ldr	x8, [sp, #16]
    1b20:	ldr	x8, [x8, #3160]
    1b24:	ldr	x9, [sp, #16]
    1b28:	ldr	w10, [x9, #60]
    1b2c:	mov	w9, w10
    1b30:	ldrh	w10, [x8, x9, lsl #1]
    1b34:	ldr	x8, [sp, #16]
    1b38:	ldr	x8, [x8, #3168]
    1b3c:	ldr	x9, [sp, #16]
    1b40:	ldr	w11, [x9, #60]
    1b44:	lsr	w11, w11, #1
    1b48:	ldrb	w11, [x8, w11, uxtw]
    1b4c:	ldr	x8, [sp, #16]
    1b50:	ldr	w12, [x8, #60]
    1b54:	lsl	w12, w12, #2
    1b58:	and	w12, w12, #0x4
    1b5c:	lsr	w11, w11, w12
    1b60:	and	w11, w11, #0xf
    1b64:	orr	w10, w10, w11, lsl #16
    1b68:	ldr	x8, [sp, #16]
    1b6c:	str	w10, [x8, #60]
    1b70:	ldr	x8, [sp, #16]
    1b74:	ldr	w10, [x8, #1092]
    1b78:	add	w10, w10, #0x1
    1b7c:	str	w10, [x8, #1092]
    1b80:	ldr	x8, [sp, #16]
    1b84:	ldr	w10, [x8, #1092]
    1b88:	ldr	x8, [sp, #16]
    1b8c:	mov	x9, #0xfa50                	// #64080
    1b90:	add	x8, x8, x9
    1b94:	ldr	w11, [x8]
    1b98:	add	w11, w11, #0x1
    1b9c:	cmp	w10, w11
    1ba0:	b.ne	1ba8 <unRLE_obuf_to_output_SMALL+0xbc4>  // b.any
    1ba4:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1ba8:	ldrb	w8, [sp, #15]
    1bac:	ldr	x9, [sp, #16]
    1bb0:	ldr	w10, [x9, #64]
    1bb4:	cmp	w8, w10
    1bb8:	b.eq	1bcc <unRLE_obuf_to_output_SMALL+0xbe8>  // b.none
    1bbc:	ldrb	w8, [sp, #15]
    1bc0:	ldr	x9, [sp, #16]
    1bc4:	str	w8, [x9, #64]
    1bc8:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1bcc:	ldr	x8, [sp, #16]
    1bd0:	mov	w9, #0x3                   	// #3
    1bd4:	str	w9, [x8, #16]
    1bd8:	ldr	x8, [sp, #16]
    1bdc:	ldr	w9, [x8, #60]
    1be0:	ldr	x8, [sp, #16]
    1be4:	ldr	w10, [x8, #40]
    1be8:	mov	w11, #0x86a0                	// #34464
    1bec:	movk	w11, #0x1, lsl #16
    1bf0:	mul	w10, w11, w10
    1bf4:	cmp	w9, w10
    1bf8:	b.cc	1c08 <unRLE_obuf_to_output_SMALL+0xc24>  // b.lo, b.ul, b.last
    1bfc:	mov	w8, #0x1                   	// #1
    1c00:	sturb	w8, [x29, #-1]
    1c04:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1c08:	ldr	x8, [sp, #16]
    1c0c:	ldr	w0, [x8, #60]
    1c10:	ldr	x8, [sp, #16]
    1c14:	add	x1, x8, #0x448
    1c18:	bl	cc8 <BZ2_indexIntoF>
    1c1c:	strb	w0, [sp, #15]
    1c20:	ldr	x8, [sp, #16]
    1c24:	ldr	x8, [x8, #3160]
    1c28:	ldr	x9, [sp, #16]
    1c2c:	ldr	w10, [x9, #60]
    1c30:	mov	w9, w10
    1c34:	ldrh	w10, [x8, x9, lsl #1]
    1c38:	ldr	x8, [sp, #16]
    1c3c:	ldr	x8, [x8, #3168]
    1c40:	ldr	x9, [sp, #16]
    1c44:	ldr	w11, [x9, #60]
    1c48:	lsr	w11, w11, #1
    1c4c:	ldrb	w11, [x8, w11, uxtw]
    1c50:	ldr	x8, [sp, #16]
    1c54:	ldr	w12, [x8, #60]
    1c58:	lsl	w12, w12, #2
    1c5c:	and	w12, w12, #0x4
    1c60:	lsr	w11, w11, w12
    1c64:	and	w11, w11, #0xf
    1c68:	orr	w10, w10, w11, lsl #16
    1c6c:	ldr	x8, [sp, #16]
    1c70:	str	w10, [x8, #60]
    1c74:	ldr	x8, [sp, #16]
    1c78:	ldr	w10, [x8, #1092]
    1c7c:	add	w10, w10, #0x1
    1c80:	str	w10, [x8, #1092]
    1c84:	ldr	x8, [sp, #16]
    1c88:	ldr	w10, [x8, #1092]
    1c8c:	ldr	x8, [sp, #16]
    1c90:	mov	x9, #0xfa50                	// #64080
    1c94:	add	x8, x8, x9
    1c98:	ldr	w11, [x8]
    1c9c:	add	w11, w11, #0x1
    1ca0:	cmp	w10, w11
    1ca4:	b.ne	1cac <unRLE_obuf_to_output_SMALL+0xcc8>  // b.any
    1ca8:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1cac:	ldrb	w8, [sp, #15]
    1cb0:	ldr	x9, [sp, #16]
    1cb4:	ldr	w10, [x9, #64]
    1cb8:	cmp	w8, w10
    1cbc:	b.eq	1cd0 <unRLE_obuf_to_output_SMALL+0xcec>  // b.none
    1cc0:	ldrb	w8, [sp, #15]
    1cc4:	ldr	x9, [sp, #16]
    1cc8:	str	w8, [x9, #64]
    1ccc:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1cd0:	ldr	x8, [sp, #16]
    1cd4:	ldr	w9, [x8, #60]
    1cd8:	ldr	x8, [sp, #16]
    1cdc:	ldr	w10, [x8, #40]
    1ce0:	mov	w11, #0x86a0                	// #34464
    1ce4:	movk	w11, #0x1, lsl #16
    1ce8:	mul	w10, w11, w10
    1cec:	cmp	w9, w10
    1cf0:	b.cc	1d00 <unRLE_obuf_to_output_SMALL+0xd1c>  // b.lo, b.ul, b.last
    1cf4:	mov	w8, #0x1                   	// #1
    1cf8:	sturb	w8, [x29, #-1]
    1cfc:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1d00:	ldr	x8, [sp, #16]
    1d04:	ldr	w0, [x8, #60]
    1d08:	ldr	x8, [sp, #16]
    1d0c:	add	x1, x8, #0x448
    1d10:	bl	cc8 <BZ2_indexIntoF>
    1d14:	strb	w0, [sp, #15]
    1d18:	ldr	x8, [sp, #16]
    1d1c:	ldr	x8, [x8, #3160]
    1d20:	ldr	x9, [sp, #16]
    1d24:	ldr	w10, [x9, #60]
    1d28:	mov	w9, w10
    1d2c:	ldrh	w10, [x8, x9, lsl #1]
    1d30:	ldr	x8, [sp, #16]
    1d34:	ldr	x8, [x8, #3168]
    1d38:	ldr	x9, [sp, #16]
    1d3c:	ldr	w11, [x9, #60]
    1d40:	lsr	w11, w11, #1
    1d44:	ldrb	w11, [x8, w11, uxtw]
    1d48:	ldr	x8, [sp, #16]
    1d4c:	ldr	w12, [x8, #60]
    1d50:	lsl	w12, w12, #2
    1d54:	and	w12, w12, #0x4
    1d58:	lsr	w11, w11, w12
    1d5c:	and	w11, w11, #0xf
    1d60:	orr	w10, w10, w11, lsl #16
    1d64:	ldr	x8, [sp, #16]
    1d68:	str	w10, [x8, #60]
    1d6c:	ldr	x8, [sp, #16]
    1d70:	ldr	w10, [x8, #1092]
    1d74:	add	w10, w10, #0x1
    1d78:	str	w10, [x8, #1092]
    1d7c:	ldrb	w10, [sp, #15]
    1d80:	add	w10, w10, #0x4
    1d84:	ldr	x8, [sp, #16]
    1d88:	str	w10, [x8, #16]
    1d8c:	ldr	x8, [sp, #16]
    1d90:	ldr	w10, [x8, #60]
    1d94:	ldr	x8, [sp, #16]
    1d98:	ldr	w11, [x8, #40]
    1d9c:	mov	w12, #0x86a0                	// #34464
    1da0:	movk	w12, #0x1, lsl #16
    1da4:	mul	w11, w12, w11
    1da8:	cmp	w10, w11
    1dac:	b.cc	1dbc <unRLE_obuf_to_output_SMALL+0xdd8>  // b.lo, b.ul, b.last
    1db0:	mov	w8, #0x1                   	// #1
    1db4:	sturb	w8, [x29, #-1]
    1db8:	b	1e40 <unRLE_obuf_to_output_SMALL+0xe5c>
    1dbc:	ldr	x8, [sp, #16]
    1dc0:	ldr	w0, [x8, #60]
    1dc4:	ldr	x8, [sp, #16]
    1dc8:	add	x1, x8, #0x448
    1dcc:	bl	cc8 <BZ2_indexIntoF>
    1dd0:	ldr	x8, [sp, #16]
    1dd4:	str	w0, [x8, #64]
    1dd8:	ldr	x8, [sp, #16]
    1ddc:	ldr	x8, [x8, #3160]
    1de0:	ldr	x9, [sp, #16]
    1de4:	ldr	w10, [x9, #60]
    1de8:	mov	w9, w10
    1dec:	ldrh	w10, [x8, x9, lsl #1]
    1df0:	ldr	x8, [sp, #16]
    1df4:	ldr	x8, [x8, #3168]
    1df8:	ldr	x9, [sp, #16]
    1dfc:	ldr	w11, [x9, #60]
    1e00:	lsr	w11, w11, #1
    1e04:	ldrb	w11, [x8, w11, uxtw]
    1e08:	ldr	x8, [sp, #16]
    1e0c:	ldr	w12, [x8, #60]
    1e10:	lsl	w12, w12, #2
    1e14:	and	w12, w12, #0x4
    1e18:	lsr	w11, w11, w12
    1e1c:	and	w11, w11, #0xf
    1e20:	orr	w10, w10, w11, lsl #16
    1e24:	ldr	x8, [sp, #16]
    1e28:	str	w10, [x8, #60]
    1e2c:	ldr	x8, [sp, #16]
    1e30:	ldr	w10, [x8, #1092]
    1e34:	add	w10, w10, #0x1
    1e38:	str	w10, [x8, #1092]
    1e3c:	b	1868 <unRLE_obuf_to_output_SMALL+0x884>
    1e40:	ldurb	w0, [x29, #-1]
    1e44:	ldp	x29, x30, [sp, #32]
    1e48:	add	sp, sp, #0x30
    1e4c:	ret

0000000000001e50 <unRLE_obuf_to_output_FAST>:
    1e50:	sub	sp, sp, #0x70
    1e54:	adrp	x8, 0 <BZ2_crc32Table>
    1e58:	add	x8, x8, #0x0
    1e5c:	adrp	x9, 0 <BZ2_rNums>
    1e60:	add	x9, x9, #0x0
    1e64:	str	x0, [sp, #96]
    1e68:	ldr	x10, [sp, #96]
    1e6c:	ldrb	w11, [x10, #20]
    1e70:	str	x8, [sp, #16]
    1e74:	str	x9, [sp, #8]
    1e78:	cbz	w11, 25fc <unRLE_obuf_to_output_FAST+0x7ac>
    1e7c:	ldr	x8, [sp, #96]
    1e80:	ldr	x8, [x8]
    1e84:	ldr	w9, [x8, #32]
    1e88:	cbnz	w9, 1e98 <unRLE_obuf_to_output_FAST+0x48>
    1e8c:	mov	w8, #0x0                   	// #0
    1e90:	strb	w8, [sp, #111]
    1e94:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    1e98:	ldr	x8, [sp, #96]
    1e9c:	ldr	w9, [x8, #16]
    1ea0:	cbnz	w9, 1ea8 <unRLE_obuf_to_output_FAST+0x58>
    1ea4:	b	1f64 <unRLE_obuf_to_output_FAST+0x114>
    1ea8:	ldr	x8, [sp, #96]
    1eac:	ldrb	w9, [x8, #12]
    1eb0:	ldr	x8, [sp, #96]
    1eb4:	ldr	x8, [x8]
    1eb8:	ldr	x8, [x8, #24]
    1ebc:	strb	w9, [x8]
    1ec0:	ldr	x8, [sp, #96]
    1ec4:	ldr	w9, [x8, #3184]
    1ec8:	ldr	x8, [sp, #96]
    1ecc:	ldr	w10, [x8, #3184]
    1ed0:	ldr	x8, [sp, #96]
    1ed4:	ldrb	w11, [x8, #12]
    1ed8:	eor	w10, w11, w10, lsr #24
    1edc:	ldr	x8, [sp, #16]
    1ee0:	ldr	w10, [x8, w10, uxtw #2]
    1ee4:	eor	w9, w10, w9, lsl #8
    1ee8:	ldr	x12, [sp, #96]
    1eec:	str	w9, [x12, #3184]
    1ef0:	ldr	x12, [sp, #96]
    1ef4:	ldr	w9, [x12, #16]
    1ef8:	subs	w9, w9, #0x1
    1efc:	str	w9, [x12, #16]
    1f00:	ldr	x12, [sp, #96]
    1f04:	ldr	x12, [x12]
    1f08:	ldr	x13, [x12, #24]
    1f0c:	add	x13, x13, #0x1
    1f10:	str	x13, [x12, #24]
    1f14:	ldr	x12, [sp, #96]
    1f18:	ldr	x12, [x12]
    1f1c:	ldr	w9, [x12, #32]
    1f20:	subs	w9, w9, #0x1
    1f24:	str	w9, [x12, #32]
    1f28:	ldr	x12, [sp, #96]
    1f2c:	ldr	x12, [x12]
    1f30:	ldr	w9, [x12, #36]
    1f34:	add	w9, w9, #0x1
    1f38:	str	w9, [x12, #36]
    1f3c:	ldr	x12, [sp, #96]
    1f40:	ldr	x12, [x12]
    1f44:	ldr	w9, [x12, #36]
    1f48:	cbnz	w9, 1f60 <unRLE_obuf_to_output_FAST+0x110>
    1f4c:	ldr	x8, [sp, #96]
    1f50:	ldr	x8, [x8]
    1f54:	ldr	w9, [x8, #40]
    1f58:	add	w9, w9, #0x1
    1f5c:	str	w9, [x8, #40]
    1f60:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    1f64:	ldr	x8, [sp, #96]
    1f68:	ldr	w9, [x8, #1092]
    1f6c:	ldr	x8, [sp, #96]
    1f70:	mov	x10, #0xfa50                	// #64080
    1f74:	add	x8, x8, x10
    1f78:	ldr	w11, [x8]
    1f7c:	add	w11, w11, #0x1
    1f80:	cmp	w9, w11
    1f84:	b.ne	1f94 <unRLE_obuf_to_output_FAST+0x144>  // b.any
    1f88:	mov	w8, #0x0                   	// #0
    1f8c:	strb	w8, [sp, #111]
    1f90:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    1f94:	ldr	x8, [sp, #96]
    1f98:	ldr	w9, [x8, #1092]
    1f9c:	ldr	x8, [sp, #96]
    1fa0:	mov	x10, #0xfa50                	// #64080
    1fa4:	add	x8, x8, x10
    1fa8:	ldr	w11, [x8]
    1fac:	add	w11, w11, #0x1
    1fb0:	cmp	w9, w11
    1fb4:	b.le	1fc4 <unRLE_obuf_to_output_FAST+0x174>
    1fb8:	mov	w8, #0x1                   	// #1
    1fbc:	strb	w8, [sp, #111]
    1fc0:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    1fc4:	ldr	x8, [sp, #96]
    1fc8:	mov	w9, #0x1                   	// #1
    1fcc:	str	w9, [x8, #16]
    1fd0:	ldr	x8, [sp, #96]
    1fd4:	ldr	w9, [x8, #64]
    1fd8:	ldr	x8, [sp, #96]
    1fdc:	strb	w9, [x8, #12]
    1fe0:	ldr	x8, [sp, #96]
    1fe4:	ldr	w9, [x8, #60]
    1fe8:	ldr	x8, [sp, #96]
    1fec:	ldr	w10, [x8, #40]
    1ff0:	mov	w11, #0x86a0                	// #34464
    1ff4:	movk	w11, #0x1, lsl #16
    1ff8:	mul	w10, w11, w10
    1ffc:	cmp	w9, w10
    2000:	b.cc	2010 <unRLE_obuf_to_output_FAST+0x1c0>  // b.lo, b.ul, b.last
    2004:	mov	w8, #0x1                   	// #1
    2008:	strb	w8, [sp, #111]
    200c:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2010:	ldr	x8, [sp, #96]
    2014:	ldr	x8, [x8, #3152]
    2018:	ldr	x9, [sp, #96]
    201c:	ldr	w10, [x9, #60]
    2020:	mov	w9, w10
    2024:	ldr	w10, [x8, x9, lsl #2]
    2028:	ldr	x8, [sp, #96]
    202c:	str	w10, [x8, #60]
    2030:	ldr	x8, [sp, #96]
    2034:	ldr	w10, [x8, #60]
    2038:	and	w10, w10, #0xff
    203c:	strb	w10, [sp, #95]
    2040:	ldr	x8, [sp, #96]
    2044:	ldr	w10, [x8, #60]
    2048:	lsr	w10, w10, #8
    204c:	str	w10, [x8, #60]
    2050:	ldr	x8, [sp, #96]
    2054:	ldr	w10, [x8, #24]
    2058:	cbnz	w10, 209c <unRLE_obuf_to_output_FAST+0x24c>
    205c:	ldr	x8, [sp, #96]
    2060:	ldrsw	x8, [x8, #28]
    2064:	ldr	x9, [sp, #8]
    2068:	ldr	w10, [x9, x8, lsl #2]
    206c:	ldr	x8, [sp, #96]
    2070:	str	w10, [x8, #24]
    2074:	ldr	x8, [sp, #96]
    2078:	ldr	w10, [x8, #28]
    207c:	add	w10, w10, #0x1
    2080:	str	w10, [x8, #28]
    2084:	ldr	x8, [sp, #96]
    2088:	ldr	w10, [x8, #28]
    208c:	cmp	w10, #0x200
    2090:	b.ne	209c <unRLE_obuf_to_output_FAST+0x24c>  // b.any
    2094:	ldr	x8, [sp, #96]
    2098:	str	wzr, [x8, #28]
    209c:	ldr	x8, [sp, #96]
    20a0:	ldr	w9, [x8, #24]
    20a4:	subs	w9, w9, #0x1
    20a8:	str	w9, [x8, #24]
    20ac:	ldr	x8, [sp, #96]
    20b0:	ldr	w9, [x8, #24]
    20b4:	mov	w10, #0x1                   	// #1
    20b8:	mov	w11, wzr
    20bc:	cmp	w9, #0x1
    20c0:	csel	w9, w10, w11, eq  // eq = none
    20c4:	ldrb	w10, [sp, #95]
    20c8:	eor	w9, w10, w9
    20cc:	strb	w9, [sp, #95]
    20d0:	ldr	x8, [sp, #96]
    20d4:	ldr	w9, [x8, #1092]
    20d8:	add	w9, w9, #0x1
    20dc:	str	w9, [x8, #1092]
    20e0:	ldr	x8, [sp, #96]
    20e4:	ldr	w9, [x8, #1092]
    20e8:	ldr	x8, [sp, #96]
    20ec:	mov	x12, #0xfa50                	// #64080
    20f0:	add	x8, x8, x12
    20f4:	ldr	w10, [x8]
    20f8:	add	w10, w10, #0x1
    20fc:	cmp	w9, w10
    2100:	b.ne	2108 <unRLE_obuf_to_output_FAST+0x2b8>  // b.any
    2104:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    2108:	ldrb	w8, [sp, #95]
    210c:	ldr	x9, [sp, #96]
    2110:	ldr	w10, [x9, #64]
    2114:	cmp	w8, w10
    2118:	b.eq	212c <unRLE_obuf_to_output_FAST+0x2dc>  // b.none
    211c:	ldrb	w8, [sp, #95]
    2120:	ldr	x9, [sp, #96]
    2124:	str	w8, [x9, #64]
    2128:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    212c:	ldr	x8, [sp, #96]
    2130:	mov	w9, #0x2                   	// #2
    2134:	str	w9, [x8, #16]
    2138:	ldr	x8, [sp, #96]
    213c:	ldr	w9, [x8, #60]
    2140:	ldr	x8, [sp, #96]
    2144:	ldr	w10, [x8, #40]
    2148:	mov	w11, #0x86a0                	// #34464
    214c:	movk	w11, #0x1, lsl #16
    2150:	mul	w10, w11, w10
    2154:	cmp	w9, w10
    2158:	b.cc	2168 <unRLE_obuf_to_output_FAST+0x318>  // b.lo, b.ul, b.last
    215c:	mov	w8, #0x1                   	// #1
    2160:	strb	w8, [sp, #111]
    2164:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2168:	ldr	x8, [sp, #96]
    216c:	ldr	x8, [x8, #3152]
    2170:	ldr	x9, [sp, #96]
    2174:	ldr	w10, [x9, #60]
    2178:	mov	w9, w10
    217c:	ldr	w10, [x8, x9, lsl #2]
    2180:	ldr	x8, [sp, #96]
    2184:	str	w10, [x8, #60]
    2188:	ldr	x8, [sp, #96]
    218c:	ldr	w10, [x8, #60]
    2190:	and	w10, w10, #0xff
    2194:	strb	w10, [sp, #95]
    2198:	ldr	x8, [sp, #96]
    219c:	ldr	w10, [x8, #60]
    21a0:	lsr	w10, w10, #8
    21a4:	str	w10, [x8, #60]
    21a8:	ldr	x8, [sp, #96]
    21ac:	ldr	w10, [x8, #24]
    21b0:	cbnz	w10, 21f4 <unRLE_obuf_to_output_FAST+0x3a4>
    21b4:	ldr	x8, [sp, #96]
    21b8:	ldrsw	x8, [x8, #28]
    21bc:	ldr	x9, [sp, #8]
    21c0:	ldr	w10, [x9, x8, lsl #2]
    21c4:	ldr	x8, [sp, #96]
    21c8:	str	w10, [x8, #24]
    21cc:	ldr	x8, [sp, #96]
    21d0:	ldr	w10, [x8, #28]
    21d4:	add	w10, w10, #0x1
    21d8:	str	w10, [x8, #28]
    21dc:	ldr	x8, [sp, #96]
    21e0:	ldr	w10, [x8, #28]
    21e4:	cmp	w10, #0x200
    21e8:	b.ne	21f4 <unRLE_obuf_to_output_FAST+0x3a4>  // b.any
    21ec:	ldr	x8, [sp, #96]
    21f0:	str	wzr, [x8, #28]
    21f4:	ldr	x8, [sp, #96]
    21f8:	ldr	w9, [x8, #24]
    21fc:	subs	w9, w9, #0x1
    2200:	str	w9, [x8, #24]
    2204:	ldr	x8, [sp, #96]
    2208:	ldr	w9, [x8, #24]
    220c:	mov	w10, #0x1                   	// #1
    2210:	mov	w11, wzr
    2214:	cmp	w9, #0x1
    2218:	csel	w9, w10, w11, eq  // eq = none
    221c:	ldrb	w10, [sp, #95]
    2220:	eor	w9, w10, w9
    2224:	strb	w9, [sp, #95]
    2228:	ldr	x8, [sp, #96]
    222c:	ldr	w9, [x8, #1092]
    2230:	add	w9, w9, #0x1
    2234:	str	w9, [x8, #1092]
    2238:	ldr	x8, [sp, #96]
    223c:	ldr	w9, [x8, #1092]
    2240:	ldr	x8, [sp, #96]
    2244:	mov	x12, #0xfa50                	// #64080
    2248:	add	x8, x8, x12
    224c:	ldr	w10, [x8]
    2250:	add	w10, w10, #0x1
    2254:	cmp	w9, w10
    2258:	b.ne	2260 <unRLE_obuf_to_output_FAST+0x410>  // b.any
    225c:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    2260:	ldrb	w8, [sp, #95]
    2264:	ldr	x9, [sp, #96]
    2268:	ldr	w10, [x9, #64]
    226c:	cmp	w8, w10
    2270:	b.eq	2284 <unRLE_obuf_to_output_FAST+0x434>  // b.none
    2274:	ldrb	w8, [sp, #95]
    2278:	ldr	x9, [sp, #96]
    227c:	str	w8, [x9, #64]
    2280:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    2284:	ldr	x8, [sp, #96]
    2288:	mov	w9, #0x3                   	// #3
    228c:	str	w9, [x8, #16]
    2290:	ldr	x8, [sp, #96]
    2294:	ldr	w9, [x8, #60]
    2298:	ldr	x8, [sp, #96]
    229c:	ldr	w10, [x8, #40]
    22a0:	mov	w11, #0x86a0                	// #34464
    22a4:	movk	w11, #0x1, lsl #16
    22a8:	mul	w10, w11, w10
    22ac:	cmp	w9, w10
    22b0:	b.cc	22c0 <unRLE_obuf_to_output_FAST+0x470>  // b.lo, b.ul, b.last
    22b4:	mov	w8, #0x1                   	// #1
    22b8:	strb	w8, [sp, #111]
    22bc:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    22c0:	ldr	x8, [sp, #96]
    22c4:	ldr	x8, [x8, #3152]
    22c8:	ldr	x9, [sp, #96]
    22cc:	ldr	w10, [x9, #60]
    22d0:	mov	w9, w10
    22d4:	ldr	w10, [x8, x9, lsl #2]
    22d8:	ldr	x8, [sp, #96]
    22dc:	str	w10, [x8, #60]
    22e0:	ldr	x8, [sp, #96]
    22e4:	ldr	w10, [x8, #60]
    22e8:	and	w10, w10, #0xff
    22ec:	strb	w10, [sp, #95]
    22f0:	ldr	x8, [sp, #96]
    22f4:	ldr	w10, [x8, #60]
    22f8:	lsr	w10, w10, #8
    22fc:	str	w10, [x8, #60]
    2300:	ldr	x8, [sp, #96]
    2304:	ldr	w10, [x8, #24]
    2308:	cbnz	w10, 234c <unRLE_obuf_to_output_FAST+0x4fc>
    230c:	ldr	x8, [sp, #96]
    2310:	ldrsw	x8, [x8, #28]
    2314:	ldr	x9, [sp, #8]
    2318:	ldr	w10, [x9, x8, lsl #2]
    231c:	ldr	x8, [sp, #96]
    2320:	str	w10, [x8, #24]
    2324:	ldr	x8, [sp, #96]
    2328:	ldr	w10, [x8, #28]
    232c:	add	w10, w10, #0x1
    2330:	str	w10, [x8, #28]
    2334:	ldr	x8, [sp, #96]
    2338:	ldr	w10, [x8, #28]
    233c:	cmp	w10, #0x200
    2340:	b.ne	234c <unRLE_obuf_to_output_FAST+0x4fc>  // b.any
    2344:	ldr	x8, [sp, #96]
    2348:	str	wzr, [x8, #28]
    234c:	ldr	x8, [sp, #96]
    2350:	ldr	w9, [x8, #24]
    2354:	subs	w9, w9, #0x1
    2358:	str	w9, [x8, #24]
    235c:	ldr	x8, [sp, #96]
    2360:	ldr	w9, [x8, #24]
    2364:	mov	w10, #0x1                   	// #1
    2368:	mov	w11, wzr
    236c:	cmp	w9, #0x1
    2370:	csel	w9, w10, w11, eq  // eq = none
    2374:	ldrb	w10, [sp, #95]
    2378:	eor	w9, w10, w9
    237c:	strb	w9, [sp, #95]
    2380:	ldr	x8, [sp, #96]
    2384:	ldr	w9, [x8, #1092]
    2388:	add	w9, w9, #0x1
    238c:	str	w9, [x8, #1092]
    2390:	ldr	x8, [sp, #96]
    2394:	ldr	w9, [x8, #1092]
    2398:	ldr	x8, [sp, #96]
    239c:	mov	x12, #0xfa50                	// #64080
    23a0:	add	x8, x8, x12
    23a4:	ldr	w10, [x8]
    23a8:	add	w10, w10, #0x1
    23ac:	cmp	w9, w10
    23b0:	b.ne	23b8 <unRLE_obuf_to_output_FAST+0x568>  // b.any
    23b4:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    23b8:	ldrb	w8, [sp, #95]
    23bc:	ldr	x9, [sp, #96]
    23c0:	ldr	w10, [x9, #64]
    23c4:	cmp	w8, w10
    23c8:	b.eq	23dc <unRLE_obuf_to_output_FAST+0x58c>  // b.none
    23cc:	ldrb	w8, [sp, #95]
    23d0:	ldr	x9, [sp, #96]
    23d4:	str	w8, [x9, #64]
    23d8:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    23dc:	ldr	x8, [sp, #96]
    23e0:	ldr	w9, [x8, #60]
    23e4:	ldr	x8, [sp, #96]
    23e8:	ldr	w10, [x8, #40]
    23ec:	mov	w11, #0x86a0                	// #34464
    23f0:	movk	w11, #0x1, lsl #16
    23f4:	mul	w10, w11, w10
    23f8:	cmp	w9, w10
    23fc:	b.cc	240c <unRLE_obuf_to_output_FAST+0x5bc>  // b.lo, b.ul, b.last
    2400:	mov	w8, #0x1                   	// #1
    2404:	strb	w8, [sp, #111]
    2408:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    240c:	ldr	x8, [sp, #96]
    2410:	ldr	x8, [x8, #3152]
    2414:	ldr	x9, [sp, #96]
    2418:	ldr	w10, [x9, #60]
    241c:	mov	w9, w10
    2420:	ldr	w10, [x8, x9, lsl #2]
    2424:	ldr	x8, [sp, #96]
    2428:	str	w10, [x8, #60]
    242c:	ldr	x8, [sp, #96]
    2430:	ldr	w10, [x8, #60]
    2434:	and	w10, w10, #0xff
    2438:	strb	w10, [sp, #95]
    243c:	ldr	x8, [sp, #96]
    2440:	ldr	w10, [x8, #60]
    2444:	lsr	w10, w10, #8
    2448:	str	w10, [x8, #60]
    244c:	ldr	x8, [sp, #96]
    2450:	ldr	w10, [x8, #24]
    2454:	cbnz	w10, 2498 <unRLE_obuf_to_output_FAST+0x648>
    2458:	ldr	x8, [sp, #96]
    245c:	ldrsw	x8, [x8, #28]
    2460:	ldr	x9, [sp, #8]
    2464:	ldr	w10, [x9, x8, lsl #2]
    2468:	ldr	x8, [sp, #96]
    246c:	str	w10, [x8, #24]
    2470:	ldr	x8, [sp, #96]
    2474:	ldr	w10, [x8, #28]
    2478:	add	w10, w10, #0x1
    247c:	str	w10, [x8, #28]
    2480:	ldr	x8, [sp, #96]
    2484:	ldr	w10, [x8, #28]
    2488:	cmp	w10, #0x200
    248c:	b.ne	2498 <unRLE_obuf_to_output_FAST+0x648>  // b.any
    2490:	ldr	x8, [sp, #96]
    2494:	str	wzr, [x8, #28]
    2498:	ldr	x8, [sp, #96]
    249c:	ldr	w9, [x8, #24]
    24a0:	subs	w9, w9, #0x1
    24a4:	str	w9, [x8, #24]
    24a8:	ldr	x8, [sp, #96]
    24ac:	ldr	w9, [x8, #24]
    24b0:	mov	w10, #0x1                   	// #1
    24b4:	mov	w11, wzr
    24b8:	cmp	w9, #0x1
    24bc:	csel	w9, w10, w11, eq  // eq = none
    24c0:	ldrb	w10, [sp, #95]
    24c4:	eor	w9, w10, w9
    24c8:	strb	w9, [sp, #95]
    24cc:	ldr	x8, [sp, #96]
    24d0:	ldr	w9, [x8, #1092]
    24d4:	add	w9, w9, #0x1
    24d8:	str	w9, [x8, #1092]
    24dc:	ldrb	w9, [sp, #95]
    24e0:	add	w9, w9, #0x4
    24e4:	ldr	x8, [sp, #96]
    24e8:	str	w9, [x8, #16]
    24ec:	ldr	x8, [sp, #96]
    24f0:	ldr	w9, [x8, #60]
    24f4:	ldr	x8, [sp, #96]
    24f8:	ldr	w10, [x8, #40]
    24fc:	mov	w11, #0x86a0                	// #34464
    2500:	movk	w11, #0x1, lsl #16
    2504:	mul	w10, w11, w10
    2508:	cmp	w9, w10
    250c:	b.cc	251c <unRLE_obuf_to_output_FAST+0x6cc>  // b.lo, b.ul, b.last
    2510:	mov	w8, #0x1                   	// #1
    2514:	strb	w8, [sp, #111]
    2518:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    251c:	ldr	x8, [sp, #96]
    2520:	ldr	x8, [x8, #3152]
    2524:	ldr	x9, [sp, #96]
    2528:	ldr	w10, [x9, #60]
    252c:	mov	w9, w10
    2530:	ldr	w10, [x8, x9, lsl #2]
    2534:	ldr	x8, [sp, #96]
    2538:	str	w10, [x8, #60]
    253c:	ldr	x8, [sp, #96]
    2540:	ldr	w10, [x8, #60]
    2544:	and	w10, w10, #0xff
    2548:	and	w10, w10, #0xff
    254c:	ldr	x8, [sp, #96]
    2550:	str	w10, [x8, #64]
    2554:	ldr	x8, [sp, #96]
    2558:	ldr	w10, [x8, #60]
    255c:	lsr	w10, w10, #8
    2560:	str	w10, [x8, #60]
    2564:	ldr	x8, [sp, #96]
    2568:	ldr	w10, [x8, #24]
    256c:	cbnz	w10, 25b0 <unRLE_obuf_to_output_FAST+0x760>
    2570:	ldr	x8, [sp, #96]
    2574:	ldrsw	x8, [x8, #28]
    2578:	ldr	x9, [sp, #8]
    257c:	ldr	w10, [x9, x8, lsl #2]
    2580:	ldr	x8, [sp, #96]
    2584:	str	w10, [x8, #24]
    2588:	ldr	x8, [sp, #96]
    258c:	ldr	w10, [x8, #28]
    2590:	add	w10, w10, #0x1
    2594:	str	w10, [x8, #28]
    2598:	ldr	x8, [sp, #96]
    259c:	ldr	w10, [x8, #28]
    25a0:	cmp	w10, #0x200
    25a4:	b.ne	25b0 <unRLE_obuf_to_output_FAST+0x760>  // b.any
    25a8:	ldr	x8, [sp, #96]
    25ac:	str	wzr, [x8, #28]
    25b0:	ldr	x8, [sp, #96]
    25b4:	ldr	w9, [x8, #24]
    25b8:	subs	w9, w9, #0x1
    25bc:	str	w9, [x8, #24]
    25c0:	ldr	x8, [sp, #96]
    25c4:	ldr	w9, [x8, #24]
    25c8:	mov	w10, #0x1                   	// #1
    25cc:	mov	w11, wzr
    25d0:	cmp	w9, #0x1
    25d4:	csel	w9, w10, w11, eq  // eq = none
    25d8:	ldr	x8, [sp, #96]
    25dc:	ldr	w10, [x8, #64]
    25e0:	eor	w9, w10, w9
    25e4:	str	w9, [x8, #64]
    25e8:	ldr	x8, [sp, #96]
    25ec:	ldr	w9, [x8, #1092]
    25f0:	add	w9, w9, #0x1
    25f4:	str	w9, [x8, #1092]
    25f8:	b	1e7c <unRLE_obuf_to_output_FAST+0x2c>
    25fc:	ldr	x8, [sp, #96]
    2600:	ldr	w9, [x8, #3184]
    2604:	str	w9, [sp, #88]
    2608:	ldr	x8, [sp, #96]
    260c:	ldrb	w9, [x8, #12]
    2610:	strb	w9, [sp, #87]
    2614:	ldr	x8, [sp, #96]
    2618:	ldr	w9, [x8, #16]
    261c:	str	w9, [sp, #80]
    2620:	ldr	x8, [sp, #96]
    2624:	ldr	w9, [x8, #1092]
    2628:	str	w9, [sp, #76]
    262c:	ldr	x8, [sp, #96]
    2630:	ldr	w9, [x8, #64]
    2634:	str	w9, [sp, #72]
    2638:	ldr	x8, [sp, #96]
    263c:	ldr	x8, [x8, #3152]
    2640:	str	x8, [sp, #64]
    2644:	ldr	x8, [sp, #96]
    2648:	ldr	w9, [x8, #60]
    264c:	str	w9, [sp, #60]
    2650:	ldr	x8, [sp, #96]
    2654:	ldr	x8, [x8]
    2658:	ldr	x8, [x8, #24]
    265c:	str	x8, [sp, #48]
    2660:	ldr	x8, [sp, #96]
    2664:	ldr	x8, [x8]
    2668:	ldr	w9, [x8, #32]
    266c:	str	w9, [sp, #44]
    2670:	ldr	x8, [sp, #96]
    2674:	ldr	w9, [x8, #40]
    2678:	str	w9, [sp, #40]
    267c:	ldr	w9, [sp, #44]
    2680:	str	w9, [sp, #36]
    2684:	ldr	x8, [sp, #96]
    2688:	mov	x10, #0xfa50                	// #64080
    268c:	add	x8, x8, x10
    2690:	ldr	w9, [x8]
    2694:	add	w9, w9, #0x1
    2698:	str	w9, [sp, #32]
    269c:	ldr	w8, [sp, #80]
    26a0:	cmp	w8, #0x0
    26a4:	cset	w8, le
    26a8:	tbnz	w8, #0, 2774 <unRLE_obuf_to_output_FAST+0x924>
    26ac:	ldr	w8, [sp, #44]
    26b0:	cbnz	w8, 26b8 <unRLE_obuf_to_output_FAST+0x868>
    26b4:	b	2a44 <unRLE_obuf_to_output_FAST+0xbf4>
    26b8:	ldr	w8, [sp, #80]
    26bc:	cmp	w8, #0x1
    26c0:	b.ne	26c8 <unRLE_obuf_to_output_FAST+0x878>  // b.any
    26c4:	b	271c <unRLE_obuf_to_output_FAST+0x8cc>
    26c8:	ldrb	w8, [sp, #87]
    26cc:	ldr	x9, [sp, #48]
    26d0:	strb	w8, [x9]
    26d4:	ldr	w8, [sp, #88]
    26d8:	ldr	w10, [sp, #88]
    26dc:	ldrb	w11, [sp, #87]
    26e0:	eor	w10, w11, w10, lsr #24
    26e4:	ldr	x9, [sp, #16]
    26e8:	ldr	w10, [x9, w10, uxtw #2]
    26ec:	eor	w8, w10, w8, lsl #8
    26f0:	str	w8, [sp, #88]
    26f4:	ldr	w8, [sp, #80]
    26f8:	subs	w8, w8, #0x1
    26fc:	str	w8, [sp, #80]
    2700:	ldr	x12, [sp, #48]
    2704:	add	x12, x12, #0x1
    2708:	str	x12, [sp, #48]
    270c:	ldr	w8, [sp, #44]
    2710:	subs	w8, w8, #0x1
    2714:	str	w8, [sp, #44]
    2718:	b	26ac <unRLE_obuf_to_output_FAST+0x85c>
    271c:	ldr	w8, [sp, #44]
    2720:	cbnz	w8, 2730 <unRLE_obuf_to_output_FAST+0x8e0>
    2724:	mov	w8, #0x1                   	// #1
    2728:	str	w8, [sp, #80]
    272c:	b	2a44 <unRLE_obuf_to_output_FAST+0xbf4>
    2730:	ldrb	w8, [sp, #87]
    2734:	ldr	x9, [sp, #48]
    2738:	strb	w8, [x9]
    273c:	ldr	w8, [sp, #88]
    2740:	ldr	w10, [sp, #88]
    2744:	ldrb	w11, [sp, #87]
    2748:	eor	w10, w11, w10, lsr #24
    274c:	ldr	x9, [sp, #16]
    2750:	ldr	w10, [x9, w10, uxtw #2]
    2754:	eor	w8, w10, w8, lsl #8
    2758:	str	w8, [sp, #88]
    275c:	ldr	x12, [sp, #48]
    2760:	add	x12, x12, #0x1
    2764:	str	x12, [sp, #48]
    2768:	ldr	w8, [sp, #44]
    276c:	subs	w8, w8, #0x1
    2770:	str	w8, [sp, #44]
    2774:	ldr	w8, [sp, #76]
    2778:	ldr	w9, [sp, #32]
    277c:	cmp	w8, w9
    2780:	b.le	2790 <unRLE_obuf_to_output_FAST+0x940>
    2784:	mov	w8, #0x1                   	// #1
    2788:	strb	w8, [sp, #111]
    278c:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2790:	ldr	w8, [sp, #76]
    2794:	ldr	w9, [sp, #32]
    2798:	cmp	w8, w9
    279c:	b.ne	27a8 <unRLE_obuf_to_output_FAST+0x958>  // b.any
    27a0:	str	wzr, [sp, #80]
    27a4:	b	2a44 <unRLE_obuf_to_output_FAST+0xbf4>
    27a8:	ldr	w8, [sp, #72]
    27ac:	strb	w8, [sp, #87]
    27b0:	ldr	w8, [sp, #60]
    27b4:	ldr	w9, [sp, #40]
    27b8:	mov	w10, #0x86a0                	// #34464
    27bc:	movk	w10, #0x1, lsl #16
    27c0:	mul	w9, w10, w9
    27c4:	cmp	w8, w9
    27c8:	b.cc	27d8 <unRLE_obuf_to_output_FAST+0x988>  // b.lo, b.ul, b.last
    27cc:	mov	w8, #0x1                   	// #1
    27d0:	strb	w8, [sp, #111]
    27d4:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    27d8:	ldr	x8, [sp, #64]
    27dc:	ldr	w9, [sp, #60]
    27e0:	mov	w10, w9
    27e4:	ldr	w9, [x8, x10, lsl #2]
    27e8:	str	w9, [sp, #60]
    27ec:	ldr	w9, [sp, #60]
    27f0:	and	w9, w9, #0xff
    27f4:	strb	w9, [sp, #95]
    27f8:	ldr	w9, [sp, #60]
    27fc:	lsr	w9, w9, #8
    2800:	str	w9, [sp, #60]
    2804:	ldr	w9, [sp, #76]
    2808:	add	w9, w9, #0x1
    280c:	str	w9, [sp, #76]
    2810:	ldrb	w9, [sp, #95]
    2814:	ldr	w11, [sp, #72]
    2818:	cmp	w9, w11
    281c:	b.eq	282c <unRLE_obuf_to_output_FAST+0x9dc>  // b.none
    2820:	ldrb	w8, [sp, #95]
    2824:	str	w8, [sp, #72]
    2828:	b	271c <unRLE_obuf_to_output_FAST+0x8cc>
    282c:	ldr	w8, [sp, #76]
    2830:	ldr	w9, [sp, #32]
    2834:	cmp	w8, w9
    2838:	b.ne	2840 <unRLE_obuf_to_output_FAST+0x9f0>  // b.any
    283c:	b	271c <unRLE_obuf_to_output_FAST+0x8cc>
    2840:	mov	w8, #0x2                   	// #2
    2844:	str	w8, [sp, #80]
    2848:	ldr	w8, [sp, #60]
    284c:	ldr	w9, [sp, #40]
    2850:	mov	w10, #0x86a0                	// #34464
    2854:	movk	w10, #0x1, lsl #16
    2858:	mul	w9, w10, w9
    285c:	cmp	w8, w9
    2860:	b.cc	2870 <unRLE_obuf_to_output_FAST+0xa20>  // b.lo, b.ul, b.last
    2864:	mov	w8, #0x1                   	// #1
    2868:	strb	w8, [sp, #111]
    286c:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2870:	ldr	x8, [sp, #64]
    2874:	ldr	w9, [sp, #60]
    2878:	mov	w10, w9
    287c:	ldr	w9, [x8, x10, lsl #2]
    2880:	str	w9, [sp, #60]
    2884:	ldr	w9, [sp, #60]
    2888:	and	w9, w9, #0xff
    288c:	strb	w9, [sp, #95]
    2890:	ldr	w9, [sp, #60]
    2894:	lsr	w9, w9, #8
    2898:	str	w9, [sp, #60]
    289c:	ldr	w9, [sp, #76]
    28a0:	add	w9, w9, #0x1
    28a4:	str	w9, [sp, #76]
    28a8:	ldr	w9, [sp, #76]
    28ac:	ldr	w11, [sp, #32]
    28b0:	cmp	w9, w11
    28b4:	b.ne	28bc <unRLE_obuf_to_output_FAST+0xa6c>  // b.any
    28b8:	b	269c <unRLE_obuf_to_output_FAST+0x84c>
    28bc:	ldrb	w8, [sp, #95]
    28c0:	ldr	w9, [sp, #72]
    28c4:	cmp	w8, w9
    28c8:	b.eq	28d8 <unRLE_obuf_to_output_FAST+0xa88>  // b.none
    28cc:	ldrb	w8, [sp, #95]
    28d0:	str	w8, [sp, #72]
    28d4:	b	269c <unRLE_obuf_to_output_FAST+0x84c>
    28d8:	mov	w8, #0x3                   	// #3
    28dc:	str	w8, [sp, #80]
    28e0:	ldr	w8, [sp, #60]
    28e4:	ldr	w9, [sp, #40]
    28e8:	mov	w10, #0x86a0                	// #34464
    28ec:	movk	w10, #0x1, lsl #16
    28f0:	mul	w9, w10, w9
    28f4:	cmp	w8, w9
    28f8:	b.cc	2908 <unRLE_obuf_to_output_FAST+0xab8>  // b.lo, b.ul, b.last
    28fc:	mov	w8, #0x1                   	// #1
    2900:	strb	w8, [sp, #111]
    2904:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2908:	ldr	x8, [sp, #64]
    290c:	ldr	w9, [sp, #60]
    2910:	mov	w10, w9
    2914:	ldr	w9, [x8, x10, lsl #2]
    2918:	str	w9, [sp, #60]
    291c:	ldr	w9, [sp, #60]
    2920:	and	w9, w9, #0xff
    2924:	strb	w9, [sp, #95]
    2928:	ldr	w9, [sp, #60]
    292c:	lsr	w9, w9, #8
    2930:	str	w9, [sp, #60]
    2934:	ldr	w9, [sp, #76]
    2938:	add	w9, w9, #0x1
    293c:	str	w9, [sp, #76]
    2940:	ldr	w9, [sp, #76]
    2944:	ldr	w11, [sp, #32]
    2948:	cmp	w9, w11
    294c:	b.ne	2954 <unRLE_obuf_to_output_FAST+0xb04>  // b.any
    2950:	b	269c <unRLE_obuf_to_output_FAST+0x84c>
    2954:	ldrb	w8, [sp, #95]
    2958:	ldr	w9, [sp, #72]
    295c:	cmp	w8, w9
    2960:	b.eq	2970 <unRLE_obuf_to_output_FAST+0xb20>  // b.none
    2964:	ldrb	w8, [sp, #95]
    2968:	str	w8, [sp, #72]
    296c:	b	269c <unRLE_obuf_to_output_FAST+0x84c>
    2970:	ldr	w8, [sp, #60]
    2974:	ldr	w9, [sp, #40]
    2978:	mov	w10, #0x86a0                	// #34464
    297c:	movk	w10, #0x1, lsl #16
    2980:	mul	w9, w10, w9
    2984:	cmp	w8, w9
    2988:	b.cc	2998 <unRLE_obuf_to_output_FAST+0xb48>  // b.lo, b.ul, b.last
    298c:	mov	w8, #0x1                   	// #1
    2990:	strb	w8, [sp, #111]
    2994:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2998:	ldr	x8, [sp, #64]
    299c:	ldr	w9, [sp, #60]
    29a0:	mov	w10, w9
    29a4:	ldr	w9, [x8, x10, lsl #2]
    29a8:	str	w9, [sp, #60]
    29ac:	ldr	w9, [sp, #60]
    29b0:	and	w9, w9, #0xff
    29b4:	strb	w9, [sp, #95]
    29b8:	ldr	w9, [sp, #60]
    29bc:	lsr	w9, w9, #8
    29c0:	str	w9, [sp, #60]
    29c4:	ldr	w9, [sp, #76]
    29c8:	add	w9, w9, #0x1
    29cc:	str	w9, [sp, #76]
    29d0:	ldrb	w9, [sp, #95]
    29d4:	add	w9, w9, #0x4
    29d8:	str	w9, [sp, #80]
    29dc:	ldr	w9, [sp, #60]
    29e0:	ldr	w11, [sp, #40]
    29e4:	mov	w12, #0x86a0                	// #34464
    29e8:	movk	w12, #0x1, lsl #16
    29ec:	mul	w11, w12, w11
    29f0:	cmp	w9, w11
    29f4:	b.cc	2a04 <unRLE_obuf_to_output_FAST+0xbb4>  // b.lo, b.ul, b.last
    29f8:	mov	w8, #0x1                   	// #1
    29fc:	strb	w8, [sp, #111]
    2a00:	b	2b1c <unRLE_obuf_to_output_FAST+0xccc>
    2a04:	ldr	x8, [sp, #64]
    2a08:	ldr	w9, [sp, #60]
    2a0c:	mov	w10, w9
    2a10:	ldr	w9, [x8, x10, lsl #2]
    2a14:	str	w9, [sp, #60]
    2a18:	ldr	w9, [sp, #60]
    2a1c:	and	w9, w9, #0xff
    2a20:	and	w9, w9, #0xff
    2a24:	str	w9, [sp, #72]
    2a28:	ldr	w9, [sp, #60]
    2a2c:	lsr	w9, w9, #8
    2a30:	str	w9, [sp, #60]
    2a34:	ldr	w9, [sp, #76]
    2a38:	add	w9, w9, #0x1
    2a3c:	str	w9, [sp, #76]
    2a40:	b	269c <unRLE_obuf_to_output_FAST+0x84c>
    2a44:	ldr	x8, [sp, #96]
    2a48:	ldr	x8, [x8]
    2a4c:	ldr	w9, [x8, #36]
    2a50:	str	w9, [sp, #28]
    2a54:	ldr	w9, [sp, #36]
    2a58:	ldr	w10, [sp, #44]
    2a5c:	subs	w9, w9, w10
    2a60:	ldr	x8, [sp, #96]
    2a64:	ldr	x8, [x8]
    2a68:	ldr	w10, [x8, #36]
    2a6c:	add	w9, w10, w9
    2a70:	str	w9, [x8, #36]
    2a74:	ldr	x8, [sp, #96]
    2a78:	ldr	x8, [x8]
    2a7c:	ldr	w9, [x8, #36]
    2a80:	ldr	w10, [sp, #28]
    2a84:	cmp	w9, w10
    2a88:	b.cs	2aa0 <unRLE_obuf_to_output_FAST+0xc50>  // b.hs, b.nlast
    2a8c:	ldr	x8, [sp, #96]
    2a90:	ldr	x8, [x8]
    2a94:	ldr	w9, [x8, #40]
    2a98:	add	w9, w9, #0x1
    2a9c:	str	w9, [x8, #40]
    2aa0:	ldr	w8, [sp, #88]
    2aa4:	ldr	x9, [sp, #96]
    2aa8:	str	w8, [x9, #3184]
    2aac:	ldrb	w8, [sp, #87]
    2ab0:	ldr	x9, [sp, #96]
    2ab4:	strb	w8, [x9, #12]
    2ab8:	ldr	w8, [sp, #80]
    2abc:	ldr	x9, [sp, #96]
    2ac0:	str	w8, [x9, #16]
    2ac4:	ldr	w8, [sp, #76]
    2ac8:	ldr	x9, [sp, #96]
    2acc:	str	w8, [x9, #1092]
    2ad0:	ldr	w8, [sp, #72]
    2ad4:	ldr	x9, [sp, #96]
    2ad8:	str	w8, [x9, #64]
    2adc:	ldr	x9, [sp, #64]
    2ae0:	ldr	x10, [sp, #96]
    2ae4:	str	x9, [x10, #3152]
    2ae8:	ldr	w8, [sp, #60]
    2aec:	ldr	x9, [sp, #96]
    2af0:	str	w8, [x9, #60]
    2af4:	ldr	x9, [sp, #48]
    2af8:	ldr	x10, [sp, #96]
    2afc:	ldr	x10, [x10]
    2b00:	str	x9, [x10, #24]
    2b04:	ldr	w8, [sp, #44]
    2b08:	ldr	x9, [sp, #96]
    2b0c:	ldr	x9, [x9]
    2b10:	str	w8, [x9, #32]
    2b14:	mov	w8, #0x0                   	// #0
    2b18:	strb	w8, [sp, #111]
    2b1c:	ldrb	w0, [sp, #111]
    2b20:	add	sp, sp, #0x70
    2b24:	ret

0000000000002b28 <BZ2_bzDecompressEnd>:
    2b28:	sub	sp, sp, #0x30
    2b2c:	stp	x29, x30, [sp, #32]
    2b30:	add	x29, sp, #0x20
    2b34:	str	x0, [sp, #16]
    2b38:	ldr	x8, [sp, #16]
    2b3c:	cbnz	x8, 2b4c <BZ2_bzDecompressEnd+0x24>
    2b40:	mov	w8, #0xfffffffe            	// #-2
    2b44:	stur	w8, [x29, #-4]
    2b48:	b	2c30 <BZ2_bzDecompressEnd+0x108>
    2b4c:	ldr	x8, [sp, #16]
    2b50:	ldr	x8, [x8, #48]
    2b54:	str	x8, [sp, #8]
    2b58:	ldr	x8, [sp, #8]
    2b5c:	cbnz	x8, 2b6c <BZ2_bzDecompressEnd+0x44>
    2b60:	mov	w8, #0xfffffffe            	// #-2
    2b64:	stur	w8, [x29, #-4]
    2b68:	b	2c30 <BZ2_bzDecompressEnd+0x108>
    2b6c:	ldr	x8, [sp, #8]
    2b70:	ldr	x8, [x8]
    2b74:	ldr	x9, [sp, #16]
    2b78:	cmp	x8, x9
    2b7c:	b.eq	2b8c <BZ2_bzDecompressEnd+0x64>  // b.none
    2b80:	mov	w8, #0xfffffffe            	// #-2
    2b84:	stur	w8, [x29, #-4]
    2b88:	b	2c30 <BZ2_bzDecompressEnd+0x108>
    2b8c:	ldr	x8, [sp, #8]
    2b90:	ldr	x8, [x8, #3152]
    2b94:	cbz	x8, 2bb4 <BZ2_bzDecompressEnd+0x8c>
    2b98:	ldr	x8, [sp, #16]
    2b9c:	ldr	x8, [x8, #64]
    2ba0:	ldr	x9, [sp, #16]
    2ba4:	ldr	x0, [x9, #72]
    2ba8:	ldr	x9, [sp, #8]
    2bac:	ldr	x1, [x9, #3152]
    2bb0:	blr	x8
    2bb4:	ldr	x8, [sp, #8]
    2bb8:	ldr	x8, [x8, #3160]
    2bbc:	cbz	x8, 2bdc <BZ2_bzDecompressEnd+0xb4>
    2bc0:	ldr	x8, [sp, #16]
    2bc4:	ldr	x8, [x8, #64]
    2bc8:	ldr	x9, [sp, #16]
    2bcc:	ldr	x0, [x9, #72]
    2bd0:	ldr	x9, [sp, #8]
    2bd4:	ldr	x1, [x9, #3160]
    2bd8:	blr	x8
    2bdc:	ldr	x8, [sp, #8]
    2be0:	ldr	x8, [x8, #3168]
    2be4:	cbz	x8, 2c04 <BZ2_bzDecompressEnd+0xdc>
    2be8:	ldr	x8, [sp, #16]
    2bec:	ldr	x8, [x8, #64]
    2bf0:	ldr	x9, [sp, #16]
    2bf4:	ldr	x0, [x9, #72]
    2bf8:	ldr	x9, [sp, #8]
    2bfc:	ldr	x1, [x9, #3168]
    2c00:	blr	x8
    2c04:	ldr	x8, [sp, #16]
    2c08:	ldr	x8, [x8, #64]
    2c0c:	ldr	x9, [sp, #16]
    2c10:	ldr	x0, [x9, #72]
    2c14:	ldr	x9, [sp, #16]
    2c18:	ldr	x1, [x9, #48]
    2c1c:	blr	x8
    2c20:	ldr	x8, [sp, #16]
    2c24:	mov	x9, xzr
    2c28:	str	x9, [x8, #48]
    2c2c:	stur	wzr, [x29, #-4]
    2c30:	ldur	w0, [x29, #-4]
    2c34:	ldp	x29, x30, [sp, #32]
    2c38:	add	sp, sp, #0x30
    2c3c:	ret

0000000000002c40 <BZ2_bzWriteOpen>:
    2c40:	sub	sp, sp, #0x40
    2c44:	stp	x29, x30, [sp, #48]
    2c48:	add	x29, sp, #0x30
    2c4c:	mov	x8, xzr
    2c50:	stur	x0, [x29, #-16]
    2c54:	str	x1, [sp, #24]
    2c58:	str	w2, [sp, #20]
    2c5c:	str	w3, [sp, #16]
    2c60:	str	w4, [sp, #12]
    2c64:	str	x8, [sp]
    2c68:	ldur	x8, [x29, #-16]
    2c6c:	cbz	x8, 2c78 <BZ2_bzWriteOpen+0x38>
    2c70:	ldur	x8, [x29, #-16]
    2c74:	str	wzr, [x8]
    2c78:	ldr	x8, [sp]
    2c7c:	cbz	x8, 2c88 <BZ2_bzWriteOpen+0x48>
    2c80:	ldr	x8, [sp]
    2c84:	str	wzr, [x8, #5096]
    2c88:	ldr	x8, [sp, #24]
    2c8c:	cbz	x8, 2ce0 <BZ2_bzWriteOpen+0xa0>
    2c90:	ldr	w8, [sp, #20]
    2c94:	cmp	w8, #0x1
    2c98:	b.lt	2ce0 <BZ2_bzWriteOpen+0xa0>  // b.tstop
    2c9c:	ldr	w8, [sp, #20]
    2ca0:	cmp	w8, #0x9
    2ca4:	b.gt	2ce0 <BZ2_bzWriteOpen+0xa0>
    2ca8:	ldr	w8, [sp, #12]
    2cac:	cmp	w8, #0x0
    2cb0:	cset	w8, lt  // lt = tstop
    2cb4:	tbnz	w8, #0, 2ce0 <BZ2_bzWriteOpen+0xa0>
    2cb8:	ldr	w8, [sp, #12]
    2cbc:	cmp	w8, #0xfa
    2cc0:	b.gt	2ce0 <BZ2_bzWriteOpen+0xa0>
    2cc4:	ldr	w8, [sp, #16]
    2cc8:	cmp	w8, #0x0
    2ccc:	cset	w8, lt  // lt = tstop
    2cd0:	tbnz	w8, #0, 2ce0 <BZ2_bzWriteOpen+0xa0>
    2cd4:	ldr	w8, [sp, #16]
    2cd8:	cmp	w8, #0x4
    2cdc:	b.le	2d14 <BZ2_bzWriteOpen+0xd4>
    2ce0:	ldur	x8, [x29, #-16]
    2ce4:	cbz	x8, 2cf4 <BZ2_bzWriteOpen+0xb4>
    2ce8:	ldur	x8, [x29, #-16]
    2cec:	mov	w9, #0xfffffffe            	// #-2
    2cf0:	str	w9, [x8]
    2cf4:	ldr	x8, [sp]
    2cf8:	cbz	x8, 2d08 <BZ2_bzWriteOpen+0xc8>
    2cfc:	ldr	x8, [sp]
    2d00:	mov	w9, #0xfffffffe            	// #-2
    2d04:	str	w9, [x8, #5096]
    2d08:	mov	x8, xzr
    2d0c:	stur	x8, [x29, #-8]
    2d10:	b	2eac <BZ2_bzWriteOpen+0x26c>
    2d14:	ldr	x0, [sp, #24]
    2d18:	bl	0 <ferror>
    2d1c:	cbz	w0, 2d54 <BZ2_bzWriteOpen+0x114>
    2d20:	ldur	x8, [x29, #-16]
    2d24:	cbz	x8, 2d34 <BZ2_bzWriteOpen+0xf4>
    2d28:	ldur	x8, [x29, #-16]
    2d2c:	mov	w9, #0xfffffffa            	// #-6
    2d30:	str	w9, [x8]
    2d34:	ldr	x8, [sp]
    2d38:	cbz	x8, 2d48 <BZ2_bzWriteOpen+0x108>
    2d3c:	ldr	x8, [sp]
    2d40:	mov	w9, #0xfffffffa            	// #-6
    2d44:	str	w9, [x8, #5096]
    2d48:	mov	x8, xzr
    2d4c:	stur	x8, [x29, #-8]
    2d50:	b	2eac <BZ2_bzWriteOpen+0x26c>
    2d54:	mov	x0, #0x13f0                	// #5104
    2d58:	bl	0 <malloc>
    2d5c:	str	x0, [sp]
    2d60:	ldr	x8, [sp]
    2d64:	cbnz	x8, 2d9c <BZ2_bzWriteOpen+0x15c>
    2d68:	ldur	x8, [x29, #-16]
    2d6c:	cbz	x8, 2d7c <BZ2_bzWriteOpen+0x13c>
    2d70:	ldur	x8, [x29, #-16]
    2d74:	mov	w9, #0xfffffffd            	// #-3
    2d78:	str	w9, [x8]
    2d7c:	ldr	x8, [sp]
    2d80:	cbz	x8, 2d90 <BZ2_bzWriteOpen+0x150>
    2d84:	ldr	x8, [sp]
    2d88:	mov	w9, #0xfffffffd            	// #-3
    2d8c:	str	w9, [x8, #5096]
    2d90:	mov	x8, xzr
    2d94:	stur	x8, [x29, #-8]
    2d98:	b	2eac <BZ2_bzWriteOpen+0x26c>
    2d9c:	ldur	x8, [x29, #-16]
    2da0:	cbz	x8, 2dac <BZ2_bzWriteOpen+0x16c>
    2da4:	ldur	x8, [x29, #-16]
    2da8:	str	wzr, [x8]
    2dac:	ldr	x8, [sp]
    2db0:	cbz	x8, 2dbc <BZ2_bzWriteOpen+0x17c>
    2db4:	ldr	x8, [sp]
    2db8:	str	wzr, [x8, #5096]
    2dbc:	ldr	x8, [sp]
    2dc0:	mov	x9, #0x13ec                	// #5100
    2dc4:	add	x8, x8, x9
    2dc8:	mov	w10, #0x0                   	// #0
    2dcc:	strb	w10, [x8]
    2dd0:	ldr	x8, [sp]
    2dd4:	str	wzr, [x8, #5008]
    2dd8:	ldr	x8, [sp, #24]
    2ddc:	ldr	x9, [sp]
    2de0:	str	x8, [x9]
    2de4:	ldr	x8, [sp]
    2de8:	mov	x9, #0x1394                	// #5012
    2dec:	add	x8, x8, x9
    2df0:	mov	w10, #0x1                   	// #1
    2df4:	strb	w10, [x8]
    2df8:	ldr	x8, [sp]
    2dfc:	mov	x9, xzr
    2e00:	str	x9, [x8, #5072]
    2e04:	ldr	x8, [sp]
    2e08:	str	x9, [x8, #5080]
    2e0c:	ldr	x8, [sp]
    2e10:	str	x9, [x8, #5088]
    2e14:	ldr	w10, [sp, #12]
    2e18:	cbnz	w10, 2e24 <BZ2_bzWriteOpen+0x1e4>
    2e1c:	mov	w8, #0x1e                  	// #30
    2e20:	str	w8, [sp, #12]
    2e24:	ldr	x8, [sp]
    2e28:	mov	x9, #0x1398                	// #5016
    2e2c:	add	x0, x8, x9
    2e30:	ldr	w1, [sp, #20]
    2e34:	ldr	w2, [sp, #16]
    2e38:	ldr	w3, [sp, #12]
    2e3c:	bl	8c <BZ2_bzCompressInit>
    2e40:	str	w0, [sp, #8]
    2e44:	ldr	w10, [sp, #8]
    2e48:	cbz	w10, 2e88 <BZ2_bzWriteOpen+0x248>
    2e4c:	ldur	x8, [x29, #-16]
    2e50:	cbz	x8, 2e60 <BZ2_bzWriteOpen+0x220>
    2e54:	ldr	w8, [sp, #8]
    2e58:	ldur	x9, [x29, #-16]
    2e5c:	str	w8, [x9]
    2e60:	ldr	x8, [sp]
    2e64:	cbz	x8, 2e74 <BZ2_bzWriteOpen+0x234>
    2e68:	ldr	w8, [sp, #8]
    2e6c:	ldr	x9, [sp]
    2e70:	str	w8, [x9, #5096]
    2e74:	ldr	x0, [sp]
    2e78:	bl	0 <free>
    2e7c:	mov	x8, xzr
    2e80:	stur	x8, [x29, #-8]
    2e84:	b	2eac <BZ2_bzWriteOpen+0x26c>
    2e88:	ldr	x8, [sp]
    2e8c:	str	wzr, [x8, #5024]
    2e90:	ldr	x8, [sp]
    2e94:	mov	x9, #0x13ec                	// #5100
    2e98:	add	x8, x8, x9
    2e9c:	mov	w10, #0x1                   	// #1
    2ea0:	strb	w10, [x8]
    2ea4:	ldr	x8, [sp]
    2ea8:	stur	x8, [x29, #-8]
    2eac:	ldur	x0, [x29, #-8]
    2eb0:	ldp	x29, x30, [sp, #48]
    2eb4:	add	sp, sp, #0x40
    2eb8:	ret

0000000000002ebc <BZ2_bzWrite>:
    2ebc:	sub	sp, sp, #0x40
    2ec0:	stp	x29, x30, [sp, #48]
    2ec4:	add	x29, sp, #0x30
    2ec8:	stur	x0, [x29, #-8]
    2ecc:	stur	x1, [x29, #-16]
    2ed0:	str	x2, [sp, #24]
    2ed4:	str	w3, [sp, #20]
    2ed8:	ldur	x8, [x29, #-16]
    2edc:	str	x8, [sp]
    2ee0:	ldur	x8, [x29, #-8]
    2ee4:	cbz	x8, 2ef0 <BZ2_bzWrite+0x34>
    2ee8:	ldur	x8, [x29, #-8]
    2eec:	str	wzr, [x8]
    2ef0:	ldr	x8, [sp]
    2ef4:	cbz	x8, 2f00 <BZ2_bzWrite+0x44>
    2ef8:	ldr	x8, [sp]
    2efc:	str	wzr, [x8, #5096]
    2f00:	ldr	x8, [sp]
    2f04:	cbz	x8, 2f20 <BZ2_bzWrite+0x64>
    2f08:	ldr	x8, [sp, #24]
    2f0c:	cbz	x8, 2f20 <BZ2_bzWrite+0x64>
    2f10:	ldr	w8, [sp, #20]
    2f14:	cmp	w8, #0x0
    2f18:	cset	w8, ge  // ge = tcont
    2f1c:	tbnz	w8, #0, 2f4c <BZ2_bzWrite+0x90>
    2f20:	ldur	x8, [x29, #-8]
    2f24:	cbz	x8, 2f34 <BZ2_bzWrite+0x78>
    2f28:	ldur	x8, [x29, #-8]
    2f2c:	mov	w9, #0xfffffffe            	// #-2
    2f30:	str	w9, [x8]
    2f34:	ldr	x8, [sp]
    2f38:	cbz	x8, 2f48 <BZ2_bzWrite+0x8c>
    2f3c:	ldr	x8, [sp]
    2f40:	mov	w9, #0xfffffffe            	// #-2
    2f44:	str	w9, [x8, #5096]
    2f48:	b	3144 <BZ2_bzWrite+0x288>
    2f4c:	ldr	x8, [sp]
    2f50:	mov	x9, #0x1394                	// #5012
    2f54:	add	x8, x8, x9
    2f58:	ldrb	w10, [x8]
    2f5c:	cbnz	w10, 2f8c <BZ2_bzWrite+0xd0>
    2f60:	ldur	x8, [x29, #-8]
    2f64:	cbz	x8, 2f74 <BZ2_bzWrite+0xb8>
    2f68:	ldur	x8, [x29, #-8]
    2f6c:	mov	w9, #0xffffffff            	// #-1
    2f70:	str	w9, [x8]
    2f74:	ldr	x8, [sp]
    2f78:	cbz	x8, 2f88 <BZ2_bzWrite+0xcc>
    2f7c:	ldr	x8, [sp]
    2f80:	mov	w9, #0xffffffff            	// #-1
    2f84:	str	w9, [x8, #5096]
    2f88:	b	3144 <BZ2_bzWrite+0x288>
    2f8c:	ldr	x8, [sp]
    2f90:	ldr	x0, [x8]
    2f94:	bl	0 <ferror>
    2f98:	cbz	w0, 2fc8 <BZ2_bzWrite+0x10c>
    2f9c:	ldur	x8, [x29, #-8]
    2fa0:	cbz	x8, 2fb0 <BZ2_bzWrite+0xf4>
    2fa4:	ldur	x8, [x29, #-8]
    2fa8:	mov	w9, #0xfffffffa            	// #-6
    2fac:	str	w9, [x8]
    2fb0:	ldr	x8, [sp]
    2fb4:	cbz	x8, 2fc4 <BZ2_bzWrite+0x108>
    2fb8:	ldr	x8, [sp]
    2fbc:	mov	w9, #0xfffffffa            	// #-6
    2fc0:	str	w9, [x8, #5096]
    2fc4:	b	3144 <BZ2_bzWrite+0x288>
    2fc8:	ldr	w8, [sp, #20]
    2fcc:	cbnz	w8, 2ff4 <BZ2_bzWrite+0x138>
    2fd0:	ldur	x8, [x29, #-8]
    2fd4:	cbz	x8, 2fe0 <BZ2_bzWrite+0x124>
    2fd8:	ldur	x8, [x29, #-8]
    2fdc:	str	wzr, [x8]
    2fe0:	ldr	x8, [sp]
    2fe4:	cbz	x8, 2ff0 <BZ2_bzWrite+0x134>
    2fe8:	ldr	x8, [sp]
    2fec:	str	wzr, [x8, #5096]
    2ff0:	b	3144 <BZ2_bzWrite+0x288>
    2ff4:	ldr	w8, [sp, #20]
    2ff8:	ldr	x9, [sp]
    2ffc:	str	w8, [x9, #5024]
    3000:	ldr	x9, [sp, #24]
    3004:	ldr	x10, [sp]
    3008:	str	x9, [x10, #5016]
    300c:	ldr	x8, [sp]
    3010:	mov	x9, #0x1398                	// #5016
    3014:	mov	w10, #0x1388                	// #5000
    3018:	str	w10, [x8, #5048]
    301c:	ldr	x8, [sp]
    3020:	add	x8, x8, #0x8
    3024:	ldr	x11, [sp]
    3028:	str	x8, [x11, #5040]
    302c:	ldr	x8, [sp]
    3030:	add	x0, x8, x9
    3034:	mov	w10, wzr
    3038:	mov	w1, w10
    303c:	bl	520 <BZ2_bzCompress>
    3040:	str	w0, [sp, #8]
    3044:	ldr	w10, [sp, #8]
    3048:	cmp	w10, #0x1
    304c:	b.eq	307c <BZ2_bzWrite+0x1c0>  // b.none
    3050:	ldur	x8, [x29, #-8]
    3054:	cbz	x8, 3064 <BZ2_bzWrite+0x1a8>
    3058:	ldr	w8, [sp, #8]
    305c:	ldur	x9, [x29, #-8]
    3060:	str	w8, [x9]
    3064:	ldr	x8, [sp]
    3068:	cbz	x8, 3078 <BZ2_bzWrite+0x1bc>
    306c:	ldr	w8, [sp, #8]
    3070:	ldr	x9, [sp]
    3074:	str	w8, [x9, #5096]
    3078:	b	3144 <BZ2_bzWrite+0x288>
    307c:	ldr	x8, [sp]
    3080:	ldr	w9, [x8, #5048]
    3084:	mov	w10, #0x1388                	// #5000
    3088:	cmp	w9, w10
    308c:	b.cs	3110 <BZ2_bzWrite+0x254>  // b.hs, b.nlast
    3090:	ldr	x8, [sp]
    3094:	ldr	w9, [x8, #5048]
    3098:	mov	w10, #0x1388                	// #5000
    309c:	subs	w9, w10, w9
    30a0:	str	w9, [sp, #16]
    30a4:	ldr	x8, [sp]
    30a8:	add	x0, x8, #0x8
    30ac:	ldrsw	x2, [sp, #16]
    30b0:	ldr	x8, [sp]
    30b4:	ldr	x3, [x8]
    30b8:	mov	x1, #0x1                   	// #1
    30bc:	bl	0 <fwrite>
    30c0:	str	w0, [sp, #12]
    30c4:	ldr	w9, [sp, #16]
    30c8:	ldr	w10, [sp, #12]
    30cc:	cmp	w9, w10
    30d0:	b.ne	30e4 <BZ2_bzWrite+0x228>  // b.any
    30d4:	ldr	x8, [sp]
    30d8:	ldr	x0, [x8]
    30dc:	bl	0 <ferror>
    30e0:	cbz	w0, 3110 <BZ2_bzWrite+0x254>
    30e4:	ldur	x8, [x29, #-8]
    30e8:	cbz	x8, 30f8 <BZ2_bzWrite+0x23c>
    30ec:	ldur	x8, [x29, #-8]
    30f0:	mov	w9, #0xfffffffa            	// #-6
    30f4:	str	w9, [x8]
    30f8:	ldr	x8, [sp]
    30fc:	cbz	x8, 310c <BZ2_bzWrite+0x250>
    3100:	ldr	x8, [sp]
    3104:	mov	w9, #0xfffffffa            	// #-6
    3108:	str	w9, [x8, #5096]
    310c:	b	3144 <BZ2_bzWrite+0x288>
    3110:	ldr	x8, [sp]
    3114:	ldr	w9, [x8, #5024]
    3118:	cbnz	w9, 3140 <BZ2_bzWrite+0x284>
    311c:	ldur	x8, [x29, #-8]
    3120:	cbz	x8, 312c <BZ2_bzWrite+0x270>
    3124:	ldur	x8, [x29, #-8]
    3128:	str	wzr, [x8]
    312c:	ldr	x8, [sp]
    3130:	cbz	x8, 313c <BZ2_bzWrite+0x280>
    3134:	ldr	x8, [sp]
    3138:	str	wzr, [x8, #5096]
    313c:	b	3144 <BZ2_bzWrite+0x288>
    3140:	b	300c <BZ2_bzWrite+0x150>
    3144:	ldp	x29, x30, [sp, #48]
    3148:	add	sp, sp, #0x40
    314c:	ret

0000000000003150 <BZ2_bzWriteClose>:
    3150:	sub	sp, sp, #0x40
    3154:	stp	x29, x30, [sp, #48]
    3158:	add	x29, sp, #0x30
    315c:	mov	x8, xzr
    3160:	stur	x0, [x29, #-8]
    3164:	stur	x1, [x29, #-16]
    3168:	stur	w2, [x29, #-20]
    316c:	str	x3, [sp, #16]
    3170:	str	x4, [sp, #8]
    3174:	ldur	x0, [x29, #-8]
    3178:	ldur	x1, [x29, #-16]
    317c:	ldur	w2, [x29, #-20]
    3180:	ldr	x3, [sp, #16]
    3184:	ldr	x5, [sp, #8]
    3188:	mov	x4, x8
    318c:	mov	x6, x8
    3190:	bl	31a0 <BZ2_bzWriteClose64>
    3194:	ldp	x29, x30, [sp, #48]
    3198:	add	sp, sp, #0x40
    319c:	ret

00000000000031a0 <BZ2_bzWriteClose64>:
    31a0:	sub	sp, sp, #0x60
    31a4:	stp	x29, x30, [sp, #80]
    31a8:	add	x29, sp, #0x50
    31ac:	stur	x0, [x29, #-8]
    31b0:	stur	x1, [x29, #-16]
    31b4:	stur	w2, [x29, #-20]
    31b8:	stur	x3, [x29, #-32]
    31bc:	str	x4, [sp, #40]
    31c0:	str	x5, [sp, #32]
    31c4:	str	x6, [sp, #24]
    31c8:	ldur	x8, [x29, #-16]
    31cc:	str	x8, [sp]
    31d0:	ldr	x8, [sp]
    31d4:	cbnz	x8, 31fc <BZ2_bzWriteClose64+0x5c>
    31d8:	ldur	x8, [x29, #-8]
    31dc:	cbz	x8, 31e8 <BZ2_bzWriteClose64+0x48>
    31e0:	ldur	x8, [x29, #-8]
    31e4:	str	wzr, [x8]
    31e8:	ldr	x8, [sp]
    31ec:	cbz	x8, 31f8 <BZ2_bzWriteClose64+0x58>
    31f0:	ldr	x8, [sp]
    31f4:	str	wzr, [x8, #5096]
    31f8:	b	34ec <BZ2_bzWriteClose64+0x34c>
    31fc:	ldr	x8, [sp]
    3200:	mov	x9, #0x1394                	// #5012
    3204:	add	x8, x8, x9
    3208:	ldrb	w10, [x8]
    320c:	cbnz	w10, 323c <BZ2_bzWriteClose64+0x9c>
    3210:	ldur	x8, [x29, #-8]
    3214:	cbz	x8, 3224 <BZ2_bzWriteClose64+0x84>
    3218:	ldur	x8, [x29, #-8]
    321c:	mov	w9, #0xffffffff            	// #-1
    3220:	str	w9, [x8]
    3224:	ldr	x8, [sp]
    3228:	cbz	x8, 3238 <BZ2_bzWriteClose64+0x98>
    322c:	ldr	x8, [sp]
    3230:	mov	w9, #0xffffffff            	// #-1
    3234:	str	w9, [x8, #5096]
    3238:	b	34ec <BZ2_bzWriteClose64+0x34c>
    323c:	ldr	x8, [sp]
    3240:	ldr	x0, [x8]
    3244:	bl	0 <ferror>
    3248:	cbz	w0, 3278 <BZ2_bzWriteClose64+0xd8>
    324c:	ldur	x8, [x29, #-8]
    3250:	cbz	x8, 3260 <BZ2_bzWriteClose64+0xc0>
    3254:	ldur	x8, [x29, #-8]
    3258:	mov	w9, #0xfffffffa            	// #-6
    325c:	str	w9, [x8]
    3260:	ldr	x8, [sp]
    3264:	cbz	x8, 3274 <BZ2_bzWriteClose64+0xd4>
    3268:	ldr	x8, [sp]
    326c:	mov	w9, #0xfffffffa            	// #-6
    3270:	str	w9, [x8, #5096]
    3274:	b	34ec <BZ2_bzWriteClose64+0x34c>
    3278:	ldur	x8, [x29, #-32]
    327c:	cbz	x8, 3288 <BZ2_bzWriteClose64+0xe8>
    3280:	ldur	x8, [x29, #-32]
    3284:	str	wzr, [x8]
    3288:	ldr	x8, [sp, #40]
    328c:	cbz	x8, 3298 <BZ2_bzWriteClose64+0xf8>
    3290:	ldr	x8, [sp, #40]
    3294:	str	wzr, [x8]
    3298:	ldr	x8, [sp, #32]
    329c:	cbz	x8, 32a8 <BZ2_bzWriteClose64+0x108>
    32a0:	ldr	x8, [sp, #32]
    32a4:	str	wzr, [x8]
    32a8:	ldr	x8, [sp, #24]
    32ac:	cbz	x8, 32b8 <BZ2_bzWriteClose64+0x118>
    32b0:	ldr	x8, [sp, #24]
    32b4:	str	wzr, [x8]
    32b8:	ldur	w8, [x29, #-20]
    32bc:	cbnz	w8, 33ec <BZ2_bzWriteClose64+0x24c>
    32c0:	ldr	x8, [sp]
    32c4:	ldr	w9, [x8, #5096]
    32c8:	cbnz	w9, 33ec <BZ2_bzWriteClose64+0x24c>
    32cc:	ldr	x8, [sp]
    32d0:	mov	x9, #0x1398                	// #5016
    32d4:	mov	w10, #0x1388                	// #5000
    32d8:	str	w10, [x8, #5048]
    32dc:	ldr	x8, [sp]
    32e0:	add	x8, x8, #0x8
    32e4:	ldr	x11, [sp]
    32e8:	str	x8, [x11, #5040]
    32ec:	ldr	x8, [sp]
    32f0:	add	x0, x8, x9
    32f4:	mov	w1, #0x2                   	// #2
    32f8:	bl	520 <BZ2_bzCompress>
    32fc:	str	w0, [sp, #12]
    3300:	ldr	w10, [sp, #12]
    3304:	cmp	w10, #0x3
    3308:	b.eq	3344 <BZ2_bzWriteClose64+0x1a4>  // b.none
    330c:	ldr	w8, [sp, #12]
    3310:	cmp	w8, #0x4
    3314:	b.eq	3344 <BZ2_bzWriteClose64+0x1a4>  // b.none
    3318:	ldur	x8, [x29, #-8]
    331c:	cbz	x8, 332c <BZ2_bzWriteClose64+0x18c>
    3320:	ldr	w8, [sp, #12]
    3324:	ldur	x9, [x29, #-8]
    3328:	str	w8, [x9]
    332c:	ldr	x8, [sp]
    3330:	cbz	x8, 3340 <BZ2_bzWriteClose64+0x1a0>
    3334:	ldr	w8, [sp, #12]
    3338:	ldr	x9, [sp]
    333c:	str	w8, [x9, #5096]
    3340:	b	34ec <BZ2_bzWriteClose64+0x34c>
    3344:	ldr	x8, [sp]
    3348:	ldr	w9, [x8, #5048]
    334c:	mov	w10, #0x1388                	// #5000
    3350:	cmp	w9, w10
    3354:	b.cs	33d8 <BZ2_bzWriteClose64+0x238>  // b.hs, b.nlast
    3358:	ldr	x8, [sp]
    335c:	ldr	w9, [x8, #5048]
    3360:	mov	w10, #0x1388                	// #5000
    3364:	subs	w9, w10, w9
    3368:	str	w9, [sp, #20]
    336c:	ldr	x8, [sp]
    3370:	add	x0, x8, #0x8
    3374:	ldrsw	x2, [sp, #20]
    3378:	ldr	x8, [sp]
    337c:	ldr	x3, [x8]
    3380:	mov	x1, #0x1                   	// #1
    3384:	bl	0 <fwrite>
    3388:	str	w0, [sp, #16]
    338c:	ldr	w9, [sp, #20]
    3390:	ldr	w10, [sp, #16]
    3394:	cmp	w9, w10
    3398:	b.ne	33ac <BZ2_bzWriteClose64+0x20c>  // b.any
    339c:	ldr	x8, [sp]
    33a0:	ldr	x0, [x8]
    33a4:	bl	0 <ferror>
    33a8:	cbz	w0, 33d8 <BZ2_bzWriteClose64+0x238>
    33ac:	ldur	x8, [x29, #-8]
    33b0:	cbz	x8, 33c0 <BZ2_bzWriteClose64+0x220>
    33b4:	ldur	x8, [x29, #-8]
    33b8:	mov	w9, #0xfffffffa            	// #-6
    33bc:	str	w9, [x8]
    33c0:	ldr	x8, [sp]
    33c4:	cbz	x8, 33d4 <BZ2_bzWriteClose64+0x234>
    33c8:	ldr	x8, [sp]
    33cc:	mov	w9, #0xfffffffa            	// #-6
    33d0:	str	w9, [x8, #5096]
    33d4:	b	34ec <BZ2_bzWriteClose64+0x34c>
    33d8:	ldr	w8, [sp, #12]
    33dc:	cmp	w8, #0x4
    33e0:	b.ne	33e8 <BZ2_bzWriteClose64+0x248>  // b.any
    33e4:	b	33ec <BZ2_bzWriteClose64+0x24c>
    33e8:	b	32cc <BZ2_bzWriteClose64+0x12c>
    33ec:	ldur	w8, [x29, #-20]
    33f0:	cbnz	w8, 3450 <BZ2_bzWriteClose64+0x2b0>
    33f4:	ldr	x8, [sp]
    33f8:	ldr	x0, [x8]
    33fc:	bl	0 <ferror>
    3400:	cbnz	w0, 3450 <BZ2_bzWriteClose64+0x2b0>
    3404:	ldr	x8, [sp]
    3408:	ldr	x0, [x8]
    340c:	bl	0 <fflush>
    3410:	ldr	x8, [sp]
    3414:	ldr	x8, [x8]
    3418:	mov	x0, x8
    341c:	bl	0 <ferror>
    3420:	cbz	w0, 3450 <BZ2_bzWriteClose64+0x2b0>
    3424:	ldur	x8, [x29, #-8]
    3428:	cbz	x8, 3438 <BZ2_bzWriteClose64+0x298>
    342c:	ldur	x8, [x29, #-8]
    3430:	mov	w9, #0xfffffffa            	// #-6
    3434:	str	w9, [x8]
    3438:	ldr	x8, [sp]
    343c:	cbz	x8, 344c <BZ2_bzWriteClose64+0x2ac>
    3440:	ldr	x8, [sp]
    3444:	mov	w9, #0xfffffffa            	// #-6
    3448:	str	w9, [x8, #5096]
    344c:	b	34ec <BZ2_bzWriteClose64+0x34c>
    3450:	ldur	x8, [x29, #-32]
    3454:	cbz	x8, 3468 <BZ2_bzWriteClose64+0x2c8>
    3458:	ldr	x8, [sp]
    345c:	ldr	w9, [x8, #5028]
    3460:	ldur	x8, [x29, #-32]
    3464:	str	w9, [x8]
    3468:	ldr	x8, [sp, #40]
    346c:	cbz	x8, 3480 <BZ2_bzWriteClose64+0x2e0>
    3470:	ldr	x8, [sp]
    3474:	ldr	w9, [x8, #5032]
    3478:	ldr	x8, [sp, #40]
    347c:	str	w9, [x8]
    3480:	ldr	x8, [sp, #32]
    3484:	cbz	x8, 3498 <BZ2_bzWriteClose64+0x2f8>
    3488:	ldr	x8, [sp]
    348c:	ldr	w9, [x8, #5052]
    3490:	ldr	x8, [sp, #32]
    3494:	str	w9, [x8]
    3498:	ldr	x8, [sp, #24]
    349c:	cbz	x8, 34b0 <BZ2_bzWriteClose64+0x310>
    34a0:	ldr	x8, [sp]
    34a4:	ldr	w9, [x8, #5056]
    34a8:	ldr	x8, [sp, #24]
    34ac:	str	w9, [x8]
    34b0:	ldur	x8, [x29, #-8]
    34b4:	cbz	x8, 34c0 <BZ2_bzWriteClose64+0x320>
    34b8:	ldur	x8, [x29, #-8]
    34bc:	str	wzr, [x8]
    34c0:	ldr	x8, [sp]
    34c4:	cbz	x8, 34d0 <BZ2_bzWriteClose64+0x330>
    34c8:	ldr	x8, [sp]
    34cc:	str	wzr, [x8, #5096]
    34d0:	ldr	x8, [sp]
    34d4:	mov	x9, #0x1398                	// #5016
    34d8:	add	x0, x8, x9
    34dc:	bl	a10 <BZ2_bzCompressEnd>
    34e0:	ldr	x8, [sp]
    34e4:	mov	x0, x8
    34e8:	bl	0 <free>
    34ec:	ldp	x29, x30, [sp, #80]
    34f0:	add	sp, sp, #0x60
    34f4:	ret

00000000000034f8 <BZ2_bzReadOpen>:
    34f8:	sub	sp, sp, #0x50
    34fc:	stp	x29, x30, [sp, #64]
    3500:	add	x29, sp, #0x40
    3504:	mov	x8, xzr
    3508:	stur	x0, [x29, #-16]
    350c:	stur	x1, [x29, #-24]
    3510:	stur	w2, [x29, #-28]
    3514:	str	w3, [sp, #32]
    3518:	str	x4, [sp, #24]
    351c:	str	w5, [sp, #20]
    3520:	str	x8, [sp, #8]
    3524:	ldur	x8, [x29, #-16]
    3528:	cbz	x8, 3534 <BZ2_bzReadOpen+0x3c>
    352c:	ldur	x8, [x29, #-16]
    3530:	str	wzr, [x8]
    3534:	ldr	x8, [sp, #8]
    3538:	cbz	x8, 3544 <BZ2_bzReadOpen+0x4c>
    353c:	ldr	x8, [sp, #8]
    3540:	str	wzr, [x8, #5096]
    3544:	ldur	x8, [x29, #-24]
    3548:	cbz	x8, 35b4 <BZ2_bzReadOpen+0xbc>
    354c:	ldr	w8, [sp, #32]
    3550:	cbz	w8, 3560 <BZ2_bzReadOpen+0x68>
    3554:	ldr	w8, [sp, #32]
    3558:	cmp	w8, #0x1
    355c:	b.ne	35b4 <BZ2_bzReadOpen+0xbc>  // b.any
    3560:	ldur	w8, [x29, #-28]
    3564:	cmp	w8, #0x0
    3568:	cset	w8, lt  // lt = tstop
    356c:	tbnz	w8, #0, 35b4 <BZ2_bzReadOpen+0xbc>
    3570:	ldur	w8, [x29, #-28]
    3574:	cmp	w8, #0x4
    3578:	b.gt	35b4 <BZ2_bzReadOpen+0xbc>
    357c:	ldr	x8, [sp, #24]
    3580:	cbnz	x8, 358c <BZ2_bzReadOpen+0x94>
    3584:	ldr	w8, [sp, #20]
    3588:	cbnz	w8, 35b4 <BZ2_bzReadOpen+0xbc>
    358c:	ldr	x8, [sp, #24]
    3590:	cbz	x8, 35e8 <BZ2_bzReadOpen+0xf0>
    3594:	ldr	w8, [sp, #20]
    3598:	cmp	w8, #0x0
    359c:	cset	w8, lt  // lt = tstop
    35a0:	tbnz	w8, #0, 35b4 <BZ2_bzReadOpen+0xbc>
    35a4:	ldr	w8, [sp, #20]
    35a8:	mov	w9, #0x1388                	// #5000
    35ac:	cmp	w8, w9
    35b0:	b.le	35e8 <BZ2_bzReadOpen+0xf0>
    35b4:	ldur	x8, [x29, #-16]
    35b8:	cbz	x8, 35c8 <BZ2_bzReadOpen+0xd0>
    35bc:	ldur	x8, [x29, #-16]
    35c0:	mov	w9, #0xfffffffe            	// #-2
    35c4:	str	w9, [x8]
    35c8:	ldr	x8, [sp, #8]
    35cc:	cbz	x8, 35dc <BZ2_bzReadOpen+0xe4>
    35d0:	ldr	x8, [sp, #8]
    35d4:	mov	w9, #0xfffffffe            	// #-2
    35d8:	str	w9, [x8, #5096]
    35dc:	mov	x8, xzr
    35e0:	stur	x8, [x29, #-8]
    35e4:	b	37dc <BZ2_bzReadOpen+0x2e4>
    35e8:	ldur	x0, [x29, #-24]
    35ec:	bl	0 <ferror>
    35f0:	cbz	w0, 3628 <BZ2_bzReadOpen+0x130>
    35f4:	ldur	x8, [x29, #-16]
    35f8:	cbz	x8, 3608 <BZ2_bzReadOpen+0x110>
    35fc:	ldur	x8, [x29, #-16]
    3600:	mov	w9, #0xfffffffa            	// #-6
    3604:	str	w9, [x8]
    3608:	ldr	x8, [sp, #8]
    360c:	cbz	x8, 361c <BZ2_bzReadOpen+0x124>
    3610:	ldr	x8, [sp, #8]
    3614:	mov	w9, #0xfffffffa            	// #-6
    3618:	str	w9, [x8, #5096]
    361c:	mov	x8, xzr
    3620:	stur	x8, [x29, #-8]
    3624:	b	37dc <BZ2_bzReadOpen+0x2e4>
    3628:	mov	x0, #0x13f0                	// #5104
    362c:	bl	0 <malloc>
    3630:	str	x0, [sp, #8]
    3634:	ldr	x8, [sp, #8]
    3638:	cbnz	x8, 3670 <BZ2_bzReadOpen+0x178>
    363c:	ldur	x8, [x29, #-16]
    3640:	cbz	x8, 3650 <BZ2_bzReadOpen+0x158>
    3644:	ldur	x8, [x29, #-16]
    3648:	mov	w9, #0xfffffffd            	// #-3
    364c:	str	w9, [x8]
    3650:	ldr	x8, [sp, #8]
    3654:	cbz	x8, 3664 <BZ2_bzReadOpen+0x16c>
    3658:	ldr	x8, [sp, #8]
    365c:	mov	w9, #0xfffffffd            	// #-3
    3660:	str	w9, [x8, #5096]
    3664:	mov	x8, xzr
    3668:	stur	x8, [x29, #-8]
    366c:	b	37dc <BZ2_bzReadOpen+0x2e4>
    3670:	ldur	x8, [x29, #-16]
    3674:	cbz	x8, 3680 <BZ2_bzReadOpen+0x188>
    3678:	ldur	x8, [x29, #-16]
    367c:	str	wzr, [x8]
    3680:	ldr	x8, [sp, #8]
    3684:	cbz	x8, 3690 <BZ2_bzReadOpen+0x198>
    3688:	ldr	x8, [sp, #8]
    368c:	str	wzr, [x8, #5096]
    3690:	ldr	x8, [sp, #8]
    3694:	mov	x9, #0x13ec                	// #5100
    3698:	add	x8, x8, x9
    369c:	mov	w10, #0x0                   	// #0
    36a0:	strb	w10, [x8]
    36a4:	ldur	x8, [x29, #-24]
    36a8:	ldr	x9, [sp, #8]
    36ac:	str	x8, [x9]
    36b0:	ldr	x8, [sp, #8]
    36b4:	str	wzr, [x8, #5008]
    36b8:	ldr	x8, [sp, #8]
    36bc:	mov	x9, #0x1394                	// #5012
    36c0:	add	x8, x8, x9
    36c4:	strb	w10, [x8]
    36c8:	ldr	x8, [sp, #8]
    36cc:	mov	x9, xzr
    36d0:	str	x9, [x8, #5072]
    36d4:	ldr	x8, [sp, #8]
    36d8:	str	x9, [x8, #5080]
    36dc:	ldr	x8, [sp, #8]
    36e0:	str	x9, [x8, #5088]
    36e4:	ldr	w8, [sp, #20]
    36e8:	cmp	w8, #0x0
    36ec:	cset	w8, le
    36f0:	tbnz	w8, #0, 3740 <BZ2_bzReadOpen+0x248>
    36f4:	ldr	x8, [sp, #24]
    36f8:	ldrb	w9, [x8]
    36fc:	ldr	x8, [sp, #8]
    3700:	add	x8, x8, #0x8
    3704:	ldr	x10, [sp, #8]
    3708:	ldrsw	x10, [x10, #5008]
    370c:	add	x8, x8, x10
    3710:	strb	w9, [x8]
    3714:	ldr	x8, [sp, #8]
    3718:	ldr	w9, [x8, #5008]
    371c:	add	w9, w9, #0x1
    3720:	str	w9, [x8, #5008]
    3724:	ldr	x8, [sp, #24]
    3728:	add	x8, x8, #0x1
    372c:	str	x8, [sp, #24]
    3730:	ldr	w9, [sp, #20]
    3734:	subs	w9, w9, #0x1
    3738:	str	w9, [sp, #20]
    373c:	b	36e4 <BZ2_bzReadOpen+0x1ec>
    3740:	ldr	x8, [sp, #8]
    3744:	mov	x9, #0x1398                	// #5016
    3748:	add	x0, x8, x9
    374c:	ldur	w1, [x29, #-28]
    3750:	ldr	w2, [sp, #32]
    3754:	bl	b28 <BZ2_bzDecompressInit>
    3758:	str	w0, [sp, #4]
    375c:	ldr	w10, [sp, #4]
    3760:	cbz	w10, 37a0 <BZ2_bzReadOpen+0x2a8>
    3764:	ldur	x8, [x29, #-16]
    3768:	cbz	x8, 3778 <BZ2_bzReadOpen+0x280>
    376c:	ldr	w8, [sp, #4]
    3770:	ldur	x9, [x29, #-16]
    3774:	str	w8, [x9]
    3778:	ldr	x8, [sp, #8]
    377c:	cbz	x8, 378c <BZ2_bzReadOpen+0x294>
    3780:	ldr	w8, [sp, #4]
    3784:	ldr	x9, [sp, #8]
    3788:	str	w8, [x9, #5096]
    378c:	ldr	x0, [sp, #8]
    3790:	bl	0 <free>
    3794:	mov	x8, xzr
    3798:	stur	x8, [x29, #-8]
    379c:	b	37dc <BZ2_bzReadOpen+0x2e4>
    37a0:	ldr	x8, [sp, #8]
    37a4:	ldr	w9, [x8, #5008]
    37a8:	ldr	x8, [sp, #8]
    37ac:	str	w9, [x8, #5024]
    37b0:	ldr	x8, [sp, #8]
    37b4:	add	x8, x8, #0x8
    37b8:	ldr	x10, [sp, #8]
    37bc:	str	x8, [x10, #5016]
    37c0:	ldr	x8, [sp, #8]
    37c4:	mov	x10, #0x13ec                	// #5100
    37c8:	add	x8, x8, x10
    37cc:	mov	w9, #0x1                   	// #1
    37d0:	strb	w9, [x8]
    37d4:	ldr	x8, [sp, #8]
    37d8:	stur	x8, [x29, #-8]
    37dc:	ldur	x0, [x29, #-8]
    37e0:	ldp	x29, x30, [sp, #64]
    37e4:	add	sp, sp, #0x50
    37e8:	ret

00000000000037ec <BZ2_bzReadClose>:
    37ec:	sub	sp, sp, #0x30
    37f0:	stp	x29, x30, [sp, #32]
    37f4:	add	x29, sp, #0x20
    37f8:	stur	x0, [x29, #-8]
    37fc:	str	x1, [sp, #16]
    3800:	ldr	x8, [sp, #16]
    3804:	str	x8, [sp, #8]
    3808:	ldur	x8, [x29, #-8]
    380c:	cbz	x8, 3818 <BZ2_bzReadClose+0x2c>
    3810:	ldur	x8, [x29, #-8]
    3814:	str	wzr, [x8]
    3818:	ldr	x8, [sp, #8]
    381c:	cbz	x8, 3828 <BZ2_bzReadClose+0x3c>
    3820:	ldr	x8, [sp, #8]
    3824:	str	wzr, [x8, #5096]
    3828:	ldr	x8, [sp, #8]
    382c:	cbnz	x8, 3854 <BZ2_bzReadClose+0x68>
    3830:	ldur	x8, [x29, #-8]
    3834:	cbz	x8, 3840 <BZ2_bzReadClose+0x54>
    3838:	ldur	x8, [x29, #-8]
    383c:	str	wzr, [x8]
    3840:	ldr	x8, [sp, #8]
    3844:	cbz	x8, 3850 <BZ2_bzReadClose+0x64>
    3848:	ldr	x8, [sp, #8]
    384c:	str	wzr, [x8, #5096]
    3850:	b	38c0 <BZ2_bzReadClose+0xd4>
    3854:	ldr	x8, [sp, #8]
    3858:	mov	x9, #0x1394                	// #5012
    385c:	add	x8, x8, x9
    3860:	ldrb	w10, [x8]
    3864:	cbz	w10, 3894 <BZ2_bzReadClose+0xa8>
    3868:	ldur	x8, [x29, #-8]
    386c:	cbz	x8, 387c <BZ2_bzReadClose+0x90>
    3870:	ldur	x8, [x29, #-8]
    3874:	mov	w9, #0xffffffff            	// #-1
    3878:	str	w9, [x8]
    387c:	ldr	x8, [sp, #8]
    3880:	cbz	x8, 3890 <BZ2_bzReadClose+0xa4>
    3884:	ldr	x8, [sp, #8]
    3888:	mov	w9, #0xffffffff            	// #-1
    388c:	str	w9, [x8, #5096]
    3890:	b	38c0 <BZ2_bzReadClose+0xd4>
    3894:	ldr	x8, [sp, #8]
    3898:	mov	x9, #0x13ec                	// #5100
    389c:	add	x8, x8, x9
    38a0:	ldrb	w10, [x8]
    38a4:	cbz	w10, 38b8 <BZ2_bzReadClose+0xcc>
    38a8:	ldr	x8, [sp, #8]
    38ac:	mov	x9, #0x1398                	// #5016
    38b0:	add	x0, x8, x9
    38b4:	bl	2b28 <BZ2_bzDecompressEnd>
    38b8:	ldr	x0, [sp, #8]
    38bc:	bl	0 <free>
    38c0:	ldp	x29, x30, [sp, #32]
    38c4:	add	sp, sp, #0x30
    38c8:	ret

00000000000038cc <BZ2_bzRead>:
    38cc:	sub	sp, sp, #0x50
    38d0:	stp	x29, x30, [sp, #64]
    38d4:	add	x29, sp, #0x40
    38d8:	stur	x0, [x29, #-16]
    38dc:	stur	x1, [x29, #-24]
    38e0:	str	x2, [sp, #32]
    38e4:	str	w3, [sp, #28]
    38e8:	ldur	x8, [x29, #-24]
    38ec:	str	x8, [sp, #8]
    38f0:	ldur	x8, [x29, #-16]
    38f4:	cbz	x8, 3900 <BZ2_bzRead+0x34>
    38f8:	ldur	x8, [x29, #-16]
    38fc:	str	wzr, [x8]
    3900:	ldr	x8, [sp, #8]
    3904:	cbz	x8, 3910 <BZ2_bzRead+0x44>
    3908:	ldr	x8, [sp, #8]
    390c:	str	wzr, [x8, #5096]
    3910:	ldr	x8, [sp, #8]
    3914:	cbz	x8, 3930 <BZ2_bzRead+0x64>
    3918:	ldr	x8, [sp, #32]
    391c:	cbz	x8, 3930 <BZ2_bzRead+0x64>
    3920:	ldr	w8, [sp, #28]
    3924:	cmp	w8, #0x0
    3928:	cset	w8, ge  // ge = tcont
    392c:	tbnz	w8, #0, 3960 <BZ2_bzRead+0x94>
    3930:	ldur	x8, [x29, #-16]
    3934:	cbz	x8, 3944 <BZ2_bzRead+0x78>
    3938:	ldur	x8, [x29, #-16]
    393c:	mov	w9, #0xfffffffe            	// #-2
    3940:	str	w9, [x8]
    3944:	ldr	x8, [sp, #8]
    3948:	cbz	x8, 3958 <BZ2_bzRead+0x8c>
    394c:	ldr	x8, [sp, #8]
    3950:	mov	w9, #0xfffffffe            	// #-2
    3954:	str	w9, [x8, #5096]
    3958:	stur	wzr, [x29, #-4]
    395c:	b	3c24 <BZ2_bzRead+0x358>
    3960:	ldr	x8, [sp, #8]
    3964:	mov	x9, #0x1394                	// #5012
    3968:	add	x8, x8, x9
    396c:	ldrb	w10, [x8]
    3970:	cbz	w10, 39a4 <BZ2_bzRead+0xd8>
    3974:	ldur	x8, [x29, #-16]
    3978:	cbz	x8, 3988 <BZ2_bzRead+0xbc>
    397c:	ldur	x8, [x29, #-16]
    3980:	mov	w9, #0xffffffff            	// #-1
    3984:	str	w9, [x8]
    3988:	ldr	x8, [sp, #8]
    398c:	cbz	x8, 399c <BZ2_bzRead+0xd0>
    3990:	ldr	x8, [sp, #8]
    3994:	mov	w9, #0xffffffff            	// #-1
    3998:	str	w9, [x8, #5096]
    399c:	stur	wzr, [x29, #-4]
    39a0:	b	3c24 <BZ2_bzRead+0x358>
    39a4:	ldr	w8, [sp, #28]
    39a8:	cbnz	w8, 39d4 <BZ2_bzRead+0x108>
    39ac:	ldur	x8, [x29, #-16]
    39b0:	cbz	x8, 39bc <BZ2_bzRead+0xf0>
    39b4:	ldur	x8, [x29, #-16]
    39b8:	str	wzr, [x8]
    39bc:	ldr	x8, [sp, #8]
    39c0:	cbz	x8, 39cc <BZ2_bzRead+0x100>
    39c4:	ldr	x8, [sp, #8]
    39c8:	str	wzr, [x8, #5096]
    39cc:	stur	wzr, [x29, #-4]
    39d0:	b	3c24 <BZ2_bzRead+0x358>
    39d4:	ldr	w8, [sp, #28]
    39d8:	ldr	x9, [sp, #8]
    39dc:	str	w8, [x9, #5048]
    39e0:	ldr	x9, [sp, #32]
    39e4:	ldr	x10, [sp, #8]
    39e8:	str	x9, [x10, #5040]
    39ec:	ldr	x8, [sp, #8]
    39f0:	ldr	x0, [x8]
    39f4:	bl	0 <ferror>
    39f8:	cbz	w0, 3a2c <BZ2_bzRead+0x160>
    39fc:	ldur	x8, [x29, #-16]
    3a00:	cbz	x8, 3a10 <BZ2_bzRead+0x144>
    3a04:	ldur	x8, [x29, #-16]
    3a08:	mov	w9, #0xfffffffa            	// #-6
    3a0c:	str	w9, [x8]
    3a10:	ldr	x8, [sp, #8]
    3a14:	cbz	x8, 3a24 <BZ2_bzRead+0x158>
    3a18:	ldr	x8, [sp, #8]
    3a1c:	mov	w9, #0xfffffffa            	// #-6
    3a20:	str	w9, [x8, #5096]
    3a24:	stur	wzr, [x29, #-4]
    3a28:	b	3c24 <BZ2_bzRead+0x358>
    3a2c:	ldr	x8, [sp, #8]
    3a30:	ldr	w9, [x8, #5024]
    3a34:	cbnz	w9, 3ad8 <BZ2_bzRead+0x20c>
    3a38:	ldr	x8, [sp, #8]
    3a3c:	ldr	x0, [x8]
    3a40:	bl	3c34 <myfeof>
    3a44:	and	w9, w0, #0xff
    3a48:	cbnz	w9, 3ad8 <BZ2_bzRead+0x20c>
    3a4c:	ldr	x8, [sp, #8]
    3a50:	add	x0, x8, #0x8
    3a54:	ldr	x8, [sp, #8]
    3a58:	ldr	x3, [x8]
    3a5c:	mov	x1, #0x1                   	// #1
    3a60:	mov	x2, #0x1388                	// #5000
    3a64:	bl	0 <fread>
    3a68:	str	w0, [sp, #24]
    3a6c:	ldr	x8, [sp, #8]
    3a70:	ldr	x0, [x8]
    3a74:	bl	0 <ferror>
    3a78:	cbz	w0, 3aac <BZ2_bzRead+0x1e0>
    3a7c:	ldur	x8, [x29, #-16]
    3a80:	cbz	x8, 3a90 <BZ2_bzRead+0x1c4>
    3a84:	ldur	x8, [x29, #-16]
    3a88:	mov	w9, #0xfffffffa            	// #-6
    3a8c:	str	w9, [x8]
    3a90:	ldr	x8, [sp, #8]
    3a94:	cbz	x8, 3aa4 <BZ2_bzRead+0x1d8>
    3a98:	ldr	x8, [sp, #8]
    3a9c:	mov	w9, #0xfffffffa            	// #-6
    3aa0:	str	w9, [x8, #5096]
    3aa4:	stur	wzr, [x29, #-4]
    3aa8:	b	3c24 <BZ2_bzRead+0x358>
    3aac:	ldr	w8, [sp, #24]
    3ab0:	ldr	x9, [sp, #8]
    3ab4:	str	w8, [x9, #5008]
    3ab8:	ldr	x9, [sp, #8]
    3abc:	ldr	w8, [x9, #5008]
    3ac0:	ldr	x9, [sp, #8]
    3ac4:	str	w8, [x9, #5024]
    3ac8:	ldr	x9, [sp, #8]
    3acc:	add	x9, x9, #0x8
    3ad0:	ldr	x10, [sp, #8]
    3ad4:	str	x9, [x10, #5016]
    3ad8:	ldr	x8, [sp, #8]
    3adc:	mov	x9, #0x1398                	// #5016
    3ae0:	add	x0, x8, x9
    3ae4:	bl	d40 <BZ2_bzDecompress>
    3ae8:	str	w0, [sp, #20]
    3aec:	ldr	w10, [sp, #20]
    3af0:	cbz	w10, 3b30 <BZ2_bzRead+0x264>
    3af4:	ldr	w8, [sp, #20]
    3af8:	cmp	w8, #0x4
    3afc:	b.eq	3b30 <BZ2_bzRead+0x264>  // b.none
    3b00:	ldur	x8, [x29, #-16]
    3b04:	cbz	x8, 3b14 <BZ2_bzRead+0x248>
    3b08:	ldr	w8, [sp, #20]
    3b0c:	ldur	x9, [x29, #-16]
    3b10:	str	w8, [x9]
    3b14:	ldr	x8, [sp, #8]
    3b18:	cbz	x8, 3b28 <BZ2_bzRead+0x25c>
    3b1c:	ldr	w8, [sp, #20]
    3b20:	ldr	x9, [sp, #8]
    3b24:	str	w8, [x9, #5096]
    3b28:	stur	wzr, [x29, #-4]
    3b2c:	b	3c24 <BZ2_bzRead+0x358>
    3b30:	ldr	w8, [sp, #20]
    3b34:	cbnz	w8, 3b9c <BZ2_bzRead+0x2d0>
    3b38:	ldr	x8, [sp, #8]
    3b3c:	ldr	x0, [x8]
    3b40:	bl	3c34 <myfeof>
    3b44:	and	w9, w0, #0xff
    3b48:	cbz	w9, 3b9c <BZ2_bzRead+0x2d0>
    3b4c:	ldr	x8, [sp, #8]
    3b50:	ldr	w9, [x8, #5024]
    3b54:	cbnz	w9, 3b9c <BZ2_bzRead+0x2d0>
    3b58:	ldr	x8, [sp, #8]
    3b5c:	ldr	w9, [x8, #5048]
    3b60:	cmp	w9, #0x0
    3b64:	cset	w9, ls  // ls = plast
    3b68:	tbnz	w9, #0, 3b9c <BZ2_bzRead+0x2d0>
    3b6c:	ldur	x8, [x29, #-16]
    3b70:	cbz	x8, 3b80 <BZ2_bzRead+0x2b4>
    3b74:	ldur	x8, [x29, #-16]
    3b78:	mov	w9, #0xfffffff9            	// #-7
    3b7c:	str	w9, [x8]
    3b80:	ldr	x8, [sp, #8]
    3b84:	cbz	x8, 3b94 <BZ2_bzRead+0x2c8>
    3b88:	ldr	x8, [sp, #8]
    3b8c:	mov	w9, #0xfffffff9            	// #-7
    3b90:	str	w9, [x8, #5096]
    3b94:	stur	wzr, [x29, #-4]
    3b98:	b	3c24 <BZ2_bzRead+0x358>
    3b9c:	ldr	w8, [sp, #20]
    3ba0:	cmp	w8, #0x4
    3ba4:	b.ne	3be8 <BZ2_bzRead+0x31c>  // b.any
    3ba8:	ldur	x8, [x29, #-16]
    3bac:	cbz	x8, 3bbc <BZ2_bzRead+0x2f0>
    3bb0:	ldur	x8, [x29, #-16]
    3bb4:	mov	w9, #0x4                   	// #4
    3bb8:	str	w9, [x8]
    3bbc:	ldr	x8, [sp, #8]
    3bc0:	cbz	x8, 3bd0 <BZ2_bzRead+0x304>
    3bc4:	ldr	x8, [sp, #8]
    3bc8:	mov	w9, #0x4                   	// #4
    3bcc:	str	w9, [x8, #5096]
    3bd0:	ldr	w8, [sp, #28]
    3bd4:	ldr	x9, [sp, #8]
    3bd8:	ldr	w10, [x9, #5048]
    3bdc:	subs	w8, w8, w10
    3be0:	stur	w8, [x29, #-4]
    3be4:	b	3c24 <BZ2_bzRead+0x358>
    3be8:	ldr	x8, [sp, #8]
    3bec:	ldr	w9, [x8, #5048]
    3bf0:	cbnz	w9, 3c20 <BZ2_bzRead+0x354>
    3bf4:	ldur	x8, [x29, #-16]
    3bf8:	cbz	x8, 3c04 <BZ2_bzRead+0x338>
    3bfc:	ldur	x8, [x29, #-16]
    3c00:	str	wzr, [x8]
    3c04:	ldr	x8, [sp, #8]
    3c08:	cbz	x8, 3c14 <BZ2_bzRead+0x348>
    3c0c:	ldr	x8, [sp, #8]
    3c10:	str	wzr, [x8, #5096]
    3c14:	ldr	w8, [sp, #28]
    3c18:	stur	w8, [x29, #-4]
    3c1c:	b	3c24 <BZ2_bzRead+0x358>
    3c20:	b	39ec <BZ2_bzRead+0x120>
    3c24:	ldur	w0, [x29, #-4]
    3c28:	ldp	x29, x30, [sp, #64]
    3c2c:	add	sp, sp, #0x50
    3c30:	ret

0000000000003c34 <myfeof>:
    3c34:	sub	sp, sp, #0x30
    3c38:	stp	x29, x30, [sp, #32]
    3c3c:	add	x29, sp, #0x20
    3c40:	mov	w8, #0xffffffff            	// #-1
    3c44:	str	x0, [sp, #16]
    3c48:	ldr	x0, [sp, #16]
    3c4c:	str	w8, [sp, #8]
    3c50:	bl	0 <fgetc>
    3c54:	str	w0, [sp, #12]
    3c58:	ldr	w8, [sp, #12]
    3c5c:	ldr	w9, [sp, #8]
    3c60:	cmp	w8, w9
    3c64:	b.ne	3c74 <myfeof+0x40>  // b.any
    3c68:	mov	w8, #0x1                   	// #1
    3c6c:	sturb	w8, [x29, #-1]
    3c70:	b	3c88 <myfeof+0x54>
    3c74:	ldr	w0, [sp, #12]
    3c78:	ldr	x1, [sp, #16]
    3c7c:	bl	0 <ungetc>
    3c80:	mov	w8, #0x0                   	// #0
    3c84:	sturb	w8, [x29, #-1]
    3c88:	ldurb	w0, [x29, #-1]
    3c8c:	ldp	x29, x30, [sp, #32]
    3c90:	add	sp, sp, #0x30
    3c94:	ret

0000000000003c98 <BZ2_bzReadGetUnused>:
    3c98:	sub	sp, sp, #0x30
    3c9c:	str	x0, [sp, #40]
    3ca0:	str	x1, [sp, #32]
    3ca4:	str	x2, [sp, #24]
    3ca8:	str	x3, [sp, #16]
    3cac:	ldr	x8, [sp, #32]
    3cb0:	str	x8, [sp, #8]
    3cb4:	ldr	x8, [sp, #8]
    3cb8:	cbnz	x8, 3ce8 <BZ2_bzReadGetUnused+0x50>
    3cbc:	ldr	x8, [sp, #40]
    3cc0:	cbz	x8, 3cd0 <BZ2_bzReadGetUnused+0x38>
    3cc4:	ldr	x8, [sp, #40]
    3cc8:	mov	w9, #0xfffffffe            	// #-2
    3ccc:	str	w9, [x8]
    3cd0:	ldr	x8, [sp, #8]
    3cd4:	cbz	x8, 3ce4 <BZ2_bzReadGetUnused+0x4c>
    3cd8:	ldr	x8, [sp, #8]
    3cdc:	mov	w9, #0xfffffffe            	// #-2
    3ce0:	str	w9, [x8, #5096]
    3ce4:	b	3da0 <BZ2_bzReadGetUnused+0x108>
    3ce8:	ldr	x8, [sp, #8]
    3cec:	ldr	w9, [x8, #5096]
    3cf0:	cmp	w9, #0x4
    3cf4:	b.eq	3d24 <BZ2_bzReadGetUnused+0x8c>  // b.none
    3cf8:	ldr	x8, [sp, #40]
    3cfc:	cbz	x8, 3d0c <BZ2_bzReadGetUnused+0x74>
    3d00:	ldr	x8, [sp, #40]
    3d04:	mov	w9, #0xffffffff            	// #-1
    3d08:	str	w9, [x8]
    3d0c:	ldr	x8, [sp, #8]
    3d10:	cbz	x8, 3d20 <BZ2_bzReadGetUnused+0x88>
    3d14:	ldr	x8, [sp, #8]
    3d18:	mov	w9, #0xffffffff            	// #-1
    3d1c:	str	w9, [x8, #5096]
    3d20:	b	3da0 <BZ2_bzReadGetUnused+0x108>
    3d24:	ldr	x8, [sp, #24]
    3d28:	cbz	x8, 3d34 <BZ2_bzReadGetUnused+0x9c>
    3d2c:	ldr	x8, [sp, #16]
    3d30:	cbnz	x8, 3d60 <BZ2_bzReadGetUnused+0xc8>
    3d34:	ldr	x8, [sp, #40]
    3d38:	cbz	x8, 3d48 <BZ2_bzReadGetUnused+0xb0>
    3d3c:	ldr	x8, [sp, #40]
    3d40:	mov	w9, #0xfffffffe            	// #-2
    3d44:	str	w9, [x8]
    3d48:	ldr	x8, [sp, #8]
    3d4c:	cbz	x8, 3d5c <BZ2_bzReadGetUnused+0xc4>
    3d50:	ldr	x8, [sp, #8]
    3d54:	mov	w9, #0xfffffffe            	// #-2
    3d58:	str	w9, [x8, #5096]
    3d5c:	b	3da0 <BZ2_bzReadGetUnused+0x108>
    3d60:	ldr	x8, [sp, #40]
    3d64:	cbz	x8, 3d70 <BZ2_bzReadGetUnused+0xd8>
    3d68:	ldr	x8, [sp, #40]
    3d6c:	str	wzr, [x8]
    3d70:	ldr	x8, [sp, #8]
    3d74:	cbz	x8, 3d80 <BZ2_bzReadGetUnused+0xe8>
    3d78:	ldr	x8, [sp, #8]
    3d7c:	str	wzr, [x8, #5096]
    3d80:	ldr	x8, [sp, #8]
    3d84:	ldr	w9, [x8, #5024]
    3d88:	ldr	x8, [sp, #16]
    3d8c:	str	w9, [x8]
    3d90:	ldr	x8, [sp, #8]
    3d94:	ldr	x8, [x8, #5016]
    3d98:	ldr	x10, [sp, #24]
    3d9c:	str	x8, [x10]
    3da0:	add	sp, sp, #0x30
    3da4:	ret

0000000000003da8 <BZ2_bzBuffToBuffCompress>:
    3da8:	sub	sp, sp, #0xa0
    3dac:	stp	x29, x30, [sp, #144]
    3db0:	add	x29, sp, #0x90
    3db4:	stur	x0, [x29, #-16]
    3db8:	stur	x1, [x29, #-24]
    3dbc:	stur	x2, [x29, #-32]
    3dc0:	stur	w3, [x29, #-36]
    3dc4:	stur	w4, [x29, #-40]
    3dc8:	stur	w5, [x29, #-44]
    3dcc:	stur	w6, [x29, #-48]
    3dd0:	ldur	x8, [x29, #-16]
    3dd4:	cbz	x8, 3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3dd8:	ldur	x8, [x29, #-24]
    3ddc:	cbz	x8, 3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3de0:	ldur	x8, [x29, #-32]
    3de4:	cbz	x8, 3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3de8:	ldur	w8, [x29, #-40]
    3dec:	cmp	w8, #0x1
    3df0:	b.lt	3e38 <BZ2_bzBuffToBuffCompress+0x90>  // b.tstop
    3df4:	ldur	w8, [x29, #-40]
    3df8:	cmp	w8, #0x9
    3dfc:	b.gt	3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3e00:	ldur	w8, [x29, #-44]
    3e04:	cmp	w8, #0x0
    3e08:	cset	w8, lt  // lt = tstop
    3e0c:	tbnz	w8, #0, 3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3e10:	ldur	w8, [x29, #-44]
    3e14:	cmp	w8, #0x4
    3e18:	b.gt	3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3e1c:	ldur	w8, [x29, #-48]
    3e20:	cmp	w8, #0x0
    3e24:	cset	w8, lt  // lt = tstop
    3e28:	tbnz	w8, #0, 3e38 <BZ2_bzBuffToBuffCompress+0x90>
    3e2c:	ldur	w8, [x29, #-48]
    3e30:	cmp	w8, #0xfa
    3e34:	b.le	3e44 <BZ2_bzBuffToBuffCompress+0x9c>
    3e38:	mov	w8, #0xfffffffe            	// #-2
    3e3c:	stur	w8, [x29, #-4]
    3e40:	b	3f34 <BZ2_bzBuffToBuffCompress+0x18c>
    3e44:	ldur	w8, [x29, #-48]
    3e48:	cbnz	w8, 3e54 <BZ2_bzBuffToBuffCompress+0xac>
    3e4c:	mov	w8, #0x1e                  	// #30
    3e50:	stur	w8, [x29, #-48]
    3e54:	add	x8, sp, #0x10
    3e58:	mov	x9, xzr
    3e5c:	str	x9, [x8, #56]
    3e60:	str	x9, [x8, #64]
    3e64:	str	x9, [x8, #72]
    3e68:	ldur	w1, [x29, #-40]
    3e6c:	ldur	w2, [x29, #-44]
    3e70:	ldur	w3, [x29, #-48]
    3e74:	mov	x0, x8
    3e78:	bl	8c <BZ2_bzCompressInit>
    3e7c:	str	w0, [sp, #12]
    3e80:	ldr	w10, [sp, #12]
    3e84:	cbz	w10, 3e94 <BZ2_bzBuffToBuffCompress+0xec>
    3e88:	ldr	w8, [sp, #12]
    3e8c:	stur	w8, [x29, #-4]
    3e90:	b	3f34 <BZ2_bzBuffToBuffCompress+0x18c>
    3e94:	ldur	x8, [x29, #-32]
    3e98:	add	x9, sp, #0x10
    3e9c:	str	x8, [sp, #16]
    3ea0:	ldur	x8, [x29, #-16]
    3ea4:	str	x8, [x9, #24]
    3ea8:	ldur	w10, [x29, #-36]
    3eac:	str	w10, [sp, #24]
    3eb0:	ldur	x8, [x29, #-24]
    3eb4:	ldr	w10, [x8]
    3eb8:	str	w10, [sp, #48]
    3ebc:	mov	x0, x9
    3ec0:	mov	w1, #0x2                   	// #2
    3ec4:	bl	520 <BZ2_bzCompress>
    3ec8:	str	w0, [sp, #12]
    3ecc:	ldr	w10, [sp, #12]
    3ed0:	cmp	w10, #0x3
    3ed4:	b.ne	3edc <BZ2_bzBuffToBuffCompress+0x134>  // b.any
    3ed8:	b	3f10 <BZ2_bzBuffToBuffCompress+0x168>
    3edc:	ldr	w8, [sp, #12]
    3ee0:	cmp	w8, #0x4
    3ee4:	b.eq	3eec <BZ2_bzBuffToBuffCompress+0x144>  // b.none
    3ee8:	b	3f24 <BZ2_bzBuffToBuffCompress+0x17c>
    3eec:	add	x0, sp, #0x10
    3ef0:	ldr	w8, [sp, #48]
    3ef4:	ldur	x9, [x29, #-24]
    3ef8:	ldr	w10, [x9]
    3efc:	subs	w8, w10, w8
    3f00:	str	w8, [x9]
    3f04:	bl	a10 <BZ2_bzCompressEnd>
    3f08:	stur	wzr, [x29, #-4]
    3f0c:	b	3f34 <BZ2_bzBuffToBuffCompress+0x18c>
    3f10:	add	x0, sp, #0x10
    3f14:	bl	a10 <BZ2_bzCompressEnd>
    3f18:	mov	w8, #0xfffffff8            	// #-8
    3f1c:	stur	w8, [x29, #-4]
    3f20:	b	3f34 <BZ2_bzBuffToBuffCompress+0x18c>
    3f24:	add	x0, sp, #0x10
    3f28:	bl	a10 <BZ2_bzCompressEnd>
    3f2c:	ldr	w8, [sp, #12]
    3f30:	stur	w8, [x29, #-4]
    3f34:	ldur	w0, [x29, #-4]
    3f38:	ldp	x29, x30, [sp, #144]
    3f3c:	add	sp, sp, #0xa0
    3f40:	ret

0000000000003f44 <BZ2_bzBuffToBuffDecompress>:
    3f44:	sub	sp, sp, #0xa0
    3f48:	stp	x29, x30, [sp, #144]
    3f4c:	add	x29, sp, #0x90
    3f50:	stur	x0, [x29, #-16]
    3f54:	stur	x1, [x29, #-24]
    3f58:	stur	x2, [x29, #-32]
    3f5c:	stur	w3, [x29, #-36]
    3f60:	stur	w4, [x29, #-40]
    3f64:	stur	w5, [x29, #-44]
    3f68:	ldur	x8, [x29, #-16]
    3f6c:	cbz	x8, 3fb0 <BZ2_bzBuffToBuffDecompress+0x6c>
    3f70:	ldur	x8, [x29, #-24]
    3f74:	cbz	x8, 3fb0 <BZ2_bzBuffToBuffDecompress+0x6c>
    3f78:	ldur	x8, [x29, #-32]
    3f7c:	cbz	x8, 3fb0 <BZ2_bzBuffToBuffDecompress+0x6c>
    3f80:	ldur	w8, [x29, #-40]
    3f84:	cbz	w8, 3f94 <BZ2_bzBuffToBuffDecompress+0x50>
    3f88:	ldur	w8, [x29, #-40]
    3f8c:	cmp	w8, #0x1
    3f90:	b.ne	3fb0 <BZ2_bzBuffToBuffDecompress+0x6c>  // b.any
    3f94:	ldur	w8, [x29, #-44]
    3f98:	cmp	w8, #0x0
    3f9c:	cset	w8, lt  // lt = tstop
    3fa0:	tbnz	w8, #0, 3fb0 <BZ2_bzBuffToBuffDecompress+0x6c>
    3fa4:	ldur	w8, [x29, #-44]
    3fa8:	cmp	w8, #0x4
    3fac:	b.le	3fbc <BZ2_bzBuffToBuffDecompress+0x78>
    3fb0:	mov	w8, #0xfffffffe            	// #-2
    3fb4:	stur	w8, [x29, #-4]
    3fb8:	b	40b4 <BZ2_bzBuffToBuffDecompress+0x170>
    3fbc:	add	x8, sp, #0x10
    3fc0:	mov	x9, xzr
    3fc4:	str	x9, [x8, #56]
    3fc8:	str	x9, [x8, #64]
    3fcc:	str	x9, [x8, #72]
    3fd0:	ldur	w1, [x29, #-44]
    3fd4:	ldur	w2, [x29, #-40]
    3fd8:	mov	x0, x8
    3fdc:	bl	b28 <BZ2_bzDecompressInit>
    3fe0:	str	w0, [sp, #12]
    3fe4:	ldr	w10, [sp, #12]
    3fe8:	cbz	w10, 3ff8 <BZ2_bzBuffToBuffDecompress+0xb4>
    3fec:	ldr	w8, [sp, #12]
    3ff0:	stur	w8, [x29, #-4]
    3ff4:	b	40b4 <BZ2_bzBuffToBuffDecompress+0x170>
    3ff8:	ldur	x8, [x29, #-32]
    3ffc:	add	x9, sp, #0x10
    4000:	str	x8, [sp, #16]
    4004:	ldur	x8, [x29, #-16]
    4008:	str	x8, [x9, #24]
    400c:	ldur	w10, [x29, #-36]
    4010:	str	w10, [sp, #24]
    4014:	ldur	x8, [x29, #-24]
    4018:	ldr	w10, [x8]
    401c:	str	w10, [sp, #48]
    4020:	mov	x0, x9
    4024:	bl	d40 <BZ2_bzDecompress>
    4028:	str	w0, [sp, #12]
    402c:	ldr	w10, [sp, #12]
    4030:	cbnz	w10, 4038 <BZ2_bzBuffToBuffDecompress+0xf4>
    4034:	b	406c <BZ2_bzBuffToBuffDecompress+0x128>
    4038:	ldr	w8, [sp, #12]
    403c:	cmp	w8, #0x4
    4040:	b.eq	4048 <BZ2_bzBuffToBuffDecompress+0x104>  // b.none
    4044:	b	40a4 <BZ2_bzBuffToBuffDecompress+0x160>
    4048:	add	x0, sp, #0x10
    404c:	ldr	w8, [sp, #48]
    4050:	ldur	x9, [x29, #-24]
    4054:	ldr	w10, [x9]
    4058:	subs	w8, w10, w8
    405c:	str	w8, [x9]
    4060:	bl	2b28 <BZ2_bzDecompressEnd>
    4064:	stur	wzr, [x29, #-4]
    4068:	b	40b4 <BZ2_bzBuffToBuffDecompress+0x170>
    406c:	ldr	w8, [sp, #48]
    4070:	cmp	w8, #0x0
    4074:	cset	w8, ls  // ls = plast
    4078:	tbnz	w8, #0, 4090 <BZ2_bzBuffToBuffDecompress+0x14c>
    407c:	add	x0, sp, #0x10
    4080:	bl	2b28 <BZ2_bzDecompressEnd>
    4084:	mov	w8, #0xfffffff9            	// #-7
    4088:	stur	w8, [x29, #-4]
    408c:	b	40b4 <BZ2_bzBuffToBuffDecompress+0x170>
    4090:	add	x0, sp, #0x10
    4094:	bl	2b28 <BZ2_bzDecompressEnd>
    4098:	mov	w8, #0xfffffff8            	// #-8
    409c:	stur	w8, [x29, #-4]
    40a0:	b	40b4 <BZ2_bzBuffToBuffDecompress+0x170>
    40a4:	add	x0, sp, #0x10
    40a8:	bl	2b28 <BZ2_bzDecompressEnd>
    40ac:	ldr	w8, [sp, #12]
    40b0:	stur	w8, [x29, #-4]
    40b4:	ldur	w0, [x29, #-4]
    40b8:	ldp	x29, x30, [sp, #144]
    40bc:	add	sp, sp, #0xa0
    40c0:	ret

00000000000040c4 <BZ2_bzopen>:
    40c4:	sub	sp, sp, #0x20
    40c8:	stp	x29, x30, [sp, #16]
    40cc:	add	x29, sp, #0x10
    40d0:	mov	w8, #0xffffffff            	// #-1
    40d4:	mov	w9, wzr
    40d8:	str	x0, [sp, #8]
    40dc:	str	x1, [sp]
    40e0:	ldr	x0, [sp, #8]
    40e4:	ldr	x2, [sp]
    40e8:	mov	w1, w8
    40ec:	mov	w3, w9
    40f0:	bl	4100 <bzopen_or_bzdopen>
    40f4:	ldp	x29, x30, [sp, #16]
    40f8:	add	sp, sp, #0x20
    40fc:	ret

0000000000004100 <bzopen_or_bzdopen>:
    4100:	stp	x29, x30, [sp, #-32]!
    4104:	str	x28, [sp, #16]
    4108:	mov	x29, sp
    410c:	sub	sp, sp, #0x1, lsl #12
    4110:	sub	sp, sp, #0x400
    4114:	mov	w8, #0x9                   	// #9
    4118:	mov	x9, xzr
    411c:	mov	w10, #0x1e                  	// #30
    4120:	add	x11, sp, #0x38
    4124:	stur	x0, [x29, #-16]
    4128:	stur	w1, [x29, #-20]
    412c:	stur	x2, [x29, #-32]
    4130:	stur	w3, [x29, #-36]
    4134:	str	w8, [sp, #76]
    4138:	str	wzr, [sp, #72]
    413c:	str	xzr, [sp, #56]
    4140:	mov	w8, #0x0                   	// #0
    4144:	strh	w8, [x11, #8]
    4148:	str	x9, [sp, #48]
    414c:	str	x9, [sp, #40]
    4150:	str	wzr, [sp, #36]
    4154:	str	w10, [sp, #32]
    4158:	str	wzr, [sp, #28]
    415c:	str	wzr, [sp, #24]
    4160:	ldur	x9, [x29, #-32]
    4164:	cbnz	x9, 4174 <bzopen_or_bzdopen+0x74>
    4168:	mov	x8, xzr
    416c:	stur	x8, [x29, #-8]
    4170:	b	43ac <bzopen_or_bzdopen+0x2ac>
    4174:	ldur	x8, [x29, #-32]
    4178:	ldrb	w9, [x8]
    417c:	cbz	w9, 4214 <bzopen_or_bzdopen+0x114>
    4180:	ldur	x8, [x29, #-32]
    4184:	ldrb	w9, [x8]
    4188:	cmp	w9, #0x72
    418c:	str	w9, [sp, #20]
    4190:	b.eq	41b8 <bzopen_or_bzdopen+0xb8>  // b.none
    4194:	b	4198 <bzopen_or_bzdopen+0x98>
    4198:	ldr	w8, [sp, #20]
    419c:	cmp	w8, #0x73
    41a0:	b.eq	41cc <bzopen_or_bzdopen+0xcc>  // b.none
    41a4:	b	41a8 <bzopen_or_bzdopen+0xa8>
    41a8:	ldr	w8, [sp, #20]
    41ac:	cmp	w8, #0x77
    41b0:	b.eq	41c0 <bzopen_or_bzdopen+0xc0>  // b.none
    41b4:	b	41d8 <bzopen_or_bzdopen+0xd8>
    41b8:	str	wzr, [sp, #72]
    41bc:	b	4204 <bzopen_or_bzdopen+0x104>
    41c0:	mov	w8, #0x1                   	// #1
    41c4:	str	w8, [sp, #72]
    41c8:	b	4204 <bzopen_or_bzdopen+0x104>
    41cc:	mov	w8, #0x1                   	// #1
    41d0:	str	w8, [sp, #28]
    41d4:	b	4204 <bzopen_or_bzdopen+0x104>
    41d8:	bl	0 <__ctype_b_loc>
    41dc:	ldr	x8, [x0]
    41e0:	ldur	x9, [x29, #-32]
    41e4:	ldrb	w10, [x9]
    41e8:	ldrh	w10, [x8, w10, sxtw #1]
    41ec:	and	w10, w10, #0x800
    41f0:	cbz	w10, 4204 <bzopen_or_bzdopen+0x104>
    41f4:	ldur	x8, [x29, #-32]
    41f8:	ldrb	w9, [x8]
    41fc:	subs	w9, w9, #0x30
    4200:	str	w9, [sp, #76]
    4204:	ldur	x8, [x29, #-32]
    4208:	add	x8, x8, #0x1
    420c:	stur	x8, [x29, #-32]
    4210:	b	4174 <bzopen_or_bzdopen+0x74>
    4214:	ldr	w8, [sp, #72]
    4218:	adrp	x9, 0 <BZ2_bz__AssertH__fail>
    421c:	add	x9, x9, #0x0
    4220:	adrp	x10, 0 <BZ2_bz__AssertH__fail>
    4224:	add	x10, x10, #0x0
    4228:	cmp	w8, #0x0
    422c:	csel	x1, x10, x9, ne  // ne = any
    4230:	add	x9, sp, #0x38
    4234:	mov	x0, x9
    4238:	str	x9, [sp, #8]
    423c:	bl	0 <strcat>
    4240:	ldr	x9, [sp, #8]
    4244:	mov	x0, x9
    4248:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    424c:	add	x1, x1, #0x0
    4250:	bl	0 <strcat>
    4254:	ldur	w8, [x29, #-36]
    4258:	cbnz	w8, 42c4 <bzopen_or_bzdopen+0x1c4>
    425c:	ldur	x8, [x29, #-16]
    4260:	cbz	x8, 4278 <bzopen_or_bzdopen+0x178>
    4264:	ldur	x0, [x29, #-16]
    4268:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    426c:	add	x1, x1, #0x0
    4270:	bl	0 <strcmp>
    4274:	cbnz	w0, 42b0 <bzopen_or_bzdopen+0x1b0>
    4278:	ldr	w8, [sp, #72]
    427c:	cbz	w8, 4294 <bzopen_or_bzdopen+0x194>
    4280:	adrp	x8, 0 <stdout>
    4284:	add	x8, x8, #0x0
    4288:	ldr	x8, [x8]
    428c:	str	x8, [sp]
    4290:	b	42a4 <bzopen_or_bzdopen+0x1a4>
    4294:	adrp	x8, 0 <stdin>
    4298:	add	x8, x8, #0x0
    429c:	ldr	x8, [x8]
    42a0:	str	x8, [sp]
    42a4:	ldr	x8, [sp]
    42a8:	str	x8, [sp, #48]
    42ac:	b	42c0 <bzopen_or_bzdopen+0x1c0>
    42b0:	ldur	x0, [x29, #-16]
    42b4:	add	x1, sp, #0x38
    42b8:	bl	0 <fopen64>
    42bc:	str	x0, [sp, #48]
    42c0:	b	42d4 <bzopen_or_bzdopen+0x1d4>
    42c4:	ldur	w0, [x29, #-20]
    42c8:	add	x1, sp, #0x38
    42cc:	bl	0 <fdopen>
    42d0:	str	x0, [sp, #48]
    42d4:	ldr	x8, [sp, #48]
    42d8:	cbnz	x8, 42e8 <bzopen_or_bzdopen+0x1e8>
    42dc:	mov	x8, xzr
    42e0:	stur	x8, [x29, #-8]
    42e4:	b	43ac <bzopen_or_bzdopen+0x2ac>
    42e8:	ldr	w8, [sp, #72]
    42ec:	cbz	w8, 4338 <bzopen_or_bzdopen+0x238>
    42f0:	ldr	w8, [sp, #76]
    42f4:	cmp	w8, #0x1
    42f8:	b.ge	4304 <bzopen_or_bzdopen+0x204>  // b.tcont
    42fc:	mov	w8, #0x1                   	// #1
    4300:	str	w8, [sp, #76]
    4304:	ldr	w8, [sp, #76]
    4308:	cmp	w8, #0x9
    430c:	b.le	4318 <bzopen_or_bzdopen+0x218>
    4310:	mov	w8, #0x9                   	// #9
    4314:	str	w8, [sp, #76]
    4318:	ldr	x1, [sp, #48]
    431c:	ldr	w2, [sp, #76]
    4320:	ldr	w3, [sp, #36]
    4324:	ldr	w4, [sp, #32]
    4328:	sub	x0, x29, #0x28
    432c:	bl	2c40 <BZ2_bzWriteOpen>
    4330:	str	x0, [sp, #40]
    4334:	b	4358 <bzopen_or_bzdopen+0x258>
    4338:	ldr	x1, [sp, #48]
    433c:	ldr	w2, [sp, #36]
    4340:	ldr	w3, [sp, #28]
    4344:	ldr	w5, [sp, #24]
    4348:	sub	x0, x29, #0x28
    434c:	add	x4, sp, #0x50
    4350:	bl	34f8 <BZ2_bzReadOpen>
    4354:	str	x0, [sp, #40]
    4358:	ldr	x8, [sp, #40]
    435c:	cbnz	x8, 43a4 <bzopen_or_bzdopen+0x2a4>
    4360:	ldr	x8, [sp, #48]
    4364:	adrp	x9, 0 <stdin>
    4368:	add	x9, x9, #0x0
    436c:	ldr	x9, [x9]
    4370:	cmp	x8, x9
    4374:	b.eq	4398 <bzopen_or_bzdopen+0x298>  // b.none
    4378:	ldr	x8, [sp, #48]
    437c:	adrp	x9, 0 <stdout>
    4380:	add	x9, x9, #0x0
    4384:	ldr	x9, [x9]
    4388:	cmp	x8, x9
    438c:	b.eq	4398 <bzopen_or_bzdopen+0x298>  // b.none
    4390:	ldr	x0, [sp, #48]
    4394:	bl	0 <fclose>
    4398:	mov	x8, xzr
    439c:	stur	x8, [x29, #-8]
    43a0:	b	43ac <bzopen_or_bzdopen+0x2ac>
    43a4:	ldr	x8, [sp, #40]
    43a8:	stur	x8, [x29, #-8]
    43ac:	ldur	x0, [x29, #-8]
    43b0:	add	sp, sp, #0x1, lsl #12
    43b4:	add	sp, sp, #0x400
    43b8:	ldr	x28, [sp, #16]
    43bc:	ldp	x29, x30, [sp], #32
    43c0:	ret

00000000000043c4 <BZ2_bzdopen>:
    43c4:	sub	sp, sp, #0x20
    43c8:	stp	x29, x30, [sp, #16]
    43cc:	add	x29, sp, #0x10
    43d0:	mov	x8, xzr
    43d4:	mov	w3, #0x1                   	// #1
    43d8:	stur	w0, [x29, #-4]
    43dc:	str	x1, [sp]
    43e0:	ldur	w1, [x29, #-4]
    43e4:	ldr	x2, [sp]
    43e8:	mov	x0, x8
    43ec:	bl	4100 <bzopen_or_bzdopen>
    43f0:	ldp	x29, x30, [sp, #16]
    43f4:	add	sp, sp, #0x20
    43f8:	ret

00000000000043fc <BZ2_bzread>:
    43fc:	sub	sp, sp, #0x40
    4400:	stp	x29, x30, [sp, #48]
    4404:	add	x29, sp, #0x30
    4408:	stur	x0, [x29, #-16]
    440c:	str	x1, [sp, #24]
    4410:	str	w2, [sp, #20]
    4414:	ldur	x8, [x29, #-16]
    4418:	ldr	w9, [x8, #5096]
    441c:	cmp	w9, #0x4
    4420:	b.ne	442c <BZ2_bzread+0x30>  // b.any
    4424:	stur	wzr, [x29, #-4]
    4428:	b	446c <BZ2_bzread+0x70>
    442c:	ldur	x1, [x29, #-16]
    4430:	ldr	x2, [sp, #24]
    4434:	ldr	w3, [sp, #20]
    4438:	add	x0, sp, #0x10
    443c:	bl	38cc <BZ2_bzRead>
    4440:	str	w0, [sp, #12]
    4444:	ldr	w8, [sp, #16]
    4448:	cbz	w8, 4458 <BZ2_bzread+0x5c>
    444c:	ldr	w8, [sp, #16]
    4450:	cmp	w8, #0x4
    4454:	b.ne	4464 <BZ2_bzread+0x68>  // b.any
    4458:	ldr	w8, [sp, #12]
    445c:	stur	w8, [x29, #-4]
    4460:	b	446c <BZ2_bzread+0x70>
    4464:	mov	w8, #0xffffffff            	// #-1
    4468:	stur	w8, [x29, #-4]
    446c:	ldur	w0, [x29, #-4]
    4470:	ldp	x29, x30, [sp, #48]
    4474:	add	sp, sp, #0x40
    4478:	ret

000000000000447c <BZ2_bzwrite>:
    447c:	sub	sp, sp, #0x30
    4480:	stp	x29, x30, [sp, #32]
    4484:	add	x29, sp, #0x20
    4488:	mov	x8, sp
    448c:	str	x0, [sp, #16]
    4490:	str	x1, [sp, #8]
    4494:	str	w2, [sp, #4]
    4498:	ldr	x1, [sp, #16]
    449c:	ldr	x2, [sp, #8]
    44a0:	ldr	w3, [sp, #4]
    44a4:	mov	x0, x8
    44a8:	bl	2ebc <BZ2_bzWrite>
    44ac:	ldr	w9, [sp]
    44b0:	cbnz	w9, 44c0 <BZ2_bzwrite+0x44>
    44b4:	ldr	w8, [sp, #4]
    44b8:	stur	w8, [x29, #-4]
    44bc:	b	44c8 <BZ2_bzwrite+0x4c>
    44c0:	mov	w8, #0xffffffff            	// #-1
    44c4:	stur	w8, [x29, #-4]
    44c8:	ldur	w0, [x29, #-4]
    44cc:	ldp	x29, x30, [sp, #32]
    44d0:	add	sp, sp, #0x30
    44d4:	ret

00000000000044d8 <BZ2_bzflush>:
    44d8:	sub	sp, sp, #0x10
    44dc:	mov	w8, wzr
    44e0:	str	x0, [sp, #8]
    44e4:	mov	w0, w8
    44e8:	add	sp, sp, #0x10
    44ec:	ret

00000000000044f0 <BZ2_bzclose>:
    44f0:	sub	sp, sp, #0x30
    44f4:	stp	x29, x30, [sp, #32]
    44f8:	add	x29, sp, #0x20
    44fc:	stur	x0, [x29, #-8]
    4500:	ldur	x8, [x29, #-8]
    4504:	cbnz	x8, 450c <BZ2_bzclose+0x1c>
    4508:	b	45b8 <BZ2_bzclose+0xc8>
    450c:	ldur	x8, [x29, #-8]
    4510:	ldr	x8, [x8]
    4514:	str	x8, [sp, #8]
    4518:	ldur	x8, [x29, #-8]
    451c:	mov	x9, #0x1394                	// #5012
    4520:	add	x8, x8, x9
    4524:	ldrb	w10, [x8]
    4528:	cbz	w10, 4574 <BZ2_bzclose+0x84>
    452c:	ldur	x1, [x29, #-8]
    4530:	sub	x0, x29, #0xc
    4534:	mov	w8, wzr
    4538:	mov	w2, w8
    453c:	mov	x9, xzr
    4540:	mov	x3, x9
    4544:	mov	x4, x9
    4548:	bl	3150 <BZ2_bzWriteClose>
    454c:	ldur	w8, [x29, #-12]
    4550:	cbz	w8, 4570 <BZ2_bzclose+0x80>
    4554:	ldur	x1, [x29, #-8]
    4558:	mov	x8, xzr
    455c:	mov	x0, x8
    4560:	mov	w2, #0x1                   	// #1
    4564:	mov	x3, x8
    4568:	mov	x4, x8
    456c:	bl	3150 <BZ2_bzWriteClose>
    4570:	b	4580 <BZ2_bzclose+0x90>
    4574:	ldur	x1, [x29, #-8]
    4578:	sub	x0, x29, #0xc
    457c:	bl	37ec <BZ2_bzReadClose>
    4580:	ldr	x8, [sp, #8]
    4584:	adrp	x9, 0 <stdin>
    4588:	add	x9, x9, #0x0
    458c:	ldr	x9, [x9]
    4590:	cmp	x8, x9
    4594:	b.eq	45b8 <BZ2_bzclose+0xc8>  // b.none
    4598:	ldr	x8, [sp, #8]
    459c:	adrp	x9, 0 <stdout>
    45a0:	add	x9, x9, #0x0
    45a4:	ldr	x9, [x9]
    45a8:	cmp	x8, x9
    45ac:	b.eq	45b8 <BZ2_bzclose+0xc8>  // b.none
    45b0:	ldr	x0, [sp, #8]
    45b4:	bl	0 <fclose>
    45b8:	ldp	x29, x30, [sp, #32]
    45bc:	add	sp, sp, #0x30
    45c0:	ret

00000000000045c4 <BZ2_bzerror>:
    45c4:	sub	sp, sp, #0x20
    45c8:	str	x0, [sp, #24]
    45cc:	str	x1, [sp, #16]
    45d0:	ldr	x8, [sp, #24]
    45d4:	ldr	w9, [x8, #5096]
    45d8:	str	w9, [sp, #12]
    45dc:	ldr	w9, [sp, #12]
    45e0:	cmp	w9, #0x0
    45e4:	cset	w9, le
    45e8:	tbnz	w9, #0, 45f0 <BZ2_bzerror+0x2c>
    45ec:	str	wzr, [sp, #12]
    45f0:	ldr	w8, [sp, #12]
    45f4:	ldr	x9, [sp, #16]
    45f8:	str	w8, [x9]
    45fc:	ldr	w8, [sp, #12]
    4600:	mov	w10, #0xffffffff            	// #-1
    4604:	mul	w8, w8, w10
    4608:	mov	w0, w8
    460c:	sxtw	x9, w0
    4610:	mov	x11, #0x8                   	// #8
    4614:	mul	x9, x11, x9
    4618:	adrp	x11, 0 <BZ2_bz__AssertH__fail>
    461c:	add	x11, x11, #0x0
    4620:	add	x9, x11, x9
    4624:	ldr	x0, [x9]
    4628:	add	sp, sp, #0x20
    462c:	ret

0000000000004630 <copy_output_until_stop>:
    4630:	sub	sp, sp, #0x10
    4634:	mov	w8, #0x0                   	// #0
    4638:	str	x0, [sp, #8]
    463c:	strb	w8, [sp, #7]
    4640:	ldr	x8, [sp, #8]
    4644:	ldr	x8, [x8]
    4648:	ldr	w9, [x8, #32]
    464c:	cbnz	w9, 4654 <copy_output_until_stop+0x24>
    4650:	b	4714 <copy_output_until_stop+0xe4>
    4654:	ldr	x8, [sp, #8]
    4658:	ldr	w9, [x8, #120]
    465c:	ldr	x8, [sp, #8]
    4660:	ldr	w10, [x8, #116]
    4664:	cmp	w9, w10
    4668:	b.lt	4670 <copy_output_until_stop+0x40>  // b.tstop
    466c:	b	4714 <copy_output_until_stop+0xe4>
    4670:	mov	w8, #0x1                   	// #1
    4674:	strb	w8, [sp, #7]
    4678:	ldr	x9, [sp, #8]
    467c:	ldr	x9, [x9, #80]
    4680:	ldr	x10, [sp, #8]
    4684:	ldrsw	x10, [x10, #120]
    4688:	add	x9, x9, x10
    468c:	ldrb	w8, [x9]
    4690:	ldr	x9, [sp, #8]
    4694:	ldr	x9, [x9]
    4698:	ldr	x9, [x9, #24]
    469c:	strb	w8, [x9]
    46a0:	ldr	x9, [sp, #8]
    46a4:	ldr	w8, [x9, #120]
    46a8:	add	w8, w8, #0x1
    46ac:	str	w8, [x9, #120]
    46b0:	ldr	x9, [sp, #8]
    46b4:	ldr	x9, [x9]
    46b8:	ldr	w8, [x9, #32]
    46bc:	subs	w8, w8, #0x1
    46c0:	str	w8, [x9, #32]
    46c4:	ldr	x9, [sp, #8]
    46c8:	ldr	x9, [x9]
    46cc:	ldr	x10, [x9, #24]
    46d0:	add	x10, x10, #0x1
    46d4:	str	x10, [x9, #24]
    46d8:	ldr	x9, [sp, #8]
    46dc:	ldr	x9, [x9]
    46e0:	ldr	w8, [x9, #36]
    46e4:	add	w8, w8, #0x1
    46e8:	str	w8, [x9, #36]
    46ec:	ldr	x9, [sp, #8]
    46f0:	ldr	x9, [x9]
    46f4:	ldr	w8, [x9, #36]
    46f8:	cbnz	w8, 4710 <copy_output_until_stop+0xe0>
    46fc:	ldr	x8, [sp, #8]
    4700:	ldr	x8, [x8]
    4704:	ldr	w9, [x8, #40]
    4708:	add	w9, w9, #0x1
    470c:	str	w9, [x8, #40]
    4710:	b	4640 <copy_output_until_stop+0x10>
    4714:	ldrb	w0, [sp, #7]
    4718:	add	sp, sp, #0x10
    471c:	ret

0000000000004720 <copy_input_until_stop>:
    4720:	sub	sp, sp, #0x30
    4724:	stp	x29, x30, [sp, #32]
    4728:	add	x29, sp, #0x20
    472c:	mov	w8, #0x0                   	// #0
    4730:	stur	x0, [x29, #-8]
    4734:	sturb	w8, [x29, #-9]
    4738:	ldur	x9, [x29, #-8]
    473c:	ldr	w8, [x9, #8]
    4740:	cmp	w8, #0x2
    4744:	b.ne	4920 <copy_input_until_stop+0x200>  // b.any
    4748:	ldur	x8, [x29, #-8]
    474c:	ldr	w9, [x8, #108]
    4750:	ldur	x8, [x29, #-8]
    4754:	ldr	w10, [x8, #112]
    4758:	cmp	w9, w10
    475c:	b.lt	4764 <copy_input_until_stop+0x44>  // b.tstop
    4760:	b	491c <copy_input_until_stop+0x1fc>
    4764:	ldur	x8, [x29, #-8]
    4768:	ldr	x8, [x8]
    476c:	ldr	w9, [x8, #8]
    4770:	cbnz	w9, 4778 <copy_input_until_stop+0x58>
    4774:	b	491c <copy_input_until_stop+0x1fc>
    4778:	mov	w8, #0x1                   	// #1
    477c:	sturb	w8, [x29, #-9]
    4780:	ldur	x9, [x29, #-8]
    4784:	ldr	x9, [x9]
    4788:	ldr	x9, [x9]
    478c:	ldrb	w8, [x9]
    4790:	str	w8, [sp, #16]
    4794:	ldr	w8, [sp, #16]
    4798:	ldur	x9, [x29, #-8]
    479c:	ldr	w10, [x9, #92]
    47a0:	cmp	w8, w10
    47a4:	b.eq	4850 <copy_input_until_stop+0x130>  // b.none
    47a8:	ldur	x8, [x29, #-8]
    47ac:	ldr	w9, [x8, #96]
    47b0:	cmp	w9, #0x1
    47b4:	b.ne	4850 <copy_input_until_stop+0x130>  // b.any
    47b8:	ldur	x8, [x29, #-8]
    47bc:	ldr	w9, [x8, #92]
    47c0:	strb	w9, [sp, #15]
    47c4:	ldur	x8, [x29, #-8]
    47c8:	ldr	w9, [x8, #648]
    47cc:	ldur	x8, [x29, #-8]
    47d0:	ldr	w10, [x8, #648]
    47d4:	ldrb	w11, [sp, #15]
    47d8:	eor	w10, w11, w10, lsr #24
    47dc:	adrp	x8, 0 <BZ2_crc32Table>
    47e0:	add	x8, x8, #0x0
    47e4:	ldr	w10, [x8, w10, uxtw #2]
    47e8:	eor	w9, w10, w9, lsl #8
    47ec:	ldur	x8, [x29, #-8]
    47f0:	str	w9, [x8, #648]
    47f4:	ldur	x8, [x29, #-8]
    47f8:	add	x8, x8, #0x80
    47fc:	ldur	x12, [x29, #-8]
    4800:	ldr	w9, [x12, #92]
    4804:	mov	w12, w9
    4808:	add	x8, x8, x12
    480c:	mov	w9, #0x1                   	// #1
    4810:	strb	w9, [x8]
    4814:	ldrb	w9, [sp, #15]
    4818:	ldur	x8, [x29, #-8]
    481c:	ldr	x8, [x8, #64]
    4820:	ldur	x12, [x29, #-8]
    4824:	ldrsw	x12, [x12, #108]
    4828:	add	x8, x8, x12
    482c:	strb	w9, [x8]
    4830:	ldur	x8, [x29, #-8]
    4834:	ldr	w9, [x8, #108]
    4838:	add	w9, w9, #0x1
    483c:	str	w9, [x8, #108]
    4840:	ldr	w9, [sp, #16]
    4844:	ldur	x8, [x29, #-8]
    4848:	str	w9, [x8, #92]
    484c:	b	48b8 <copy_input_until_stop+0x198>
    4850:	ldr	w8, [sp, #16]
    4854:	ldur	x9, [x29, #-8]
    4858:	ldr	w10, [x9, #92]
    485c:	cmp	w8, w10
    4860:	b.ne	4874 <copy_input_until_stop+0x154>  // b.any
    4864:	ldur	x8, [x29, #-8]
    4868:	ldr	w9, [x8, #96]
    486c:	cmp	w9, #0xff
    4870:	b.ne	48a8 <copy_input_until_stop+0x188>  // b.any
    4874:	ldur	x8, [x29, #-8]
    4878:	ldr	w9, [x8, #92]
    487c:	cmp	w9, #0x100
    4880:	b.cs	488c <copy_input_until_stop+0x16c>  // b.hs, b.nlast
    4884:	ldur	x0, [x29, #-8]
    4888:	bl	4b60 <add_pair_to_block>
    488c:	ldr	w8, [sp, #16]
    4890:	ldur	x9, [x29, #-8]
    4894:	str	w8, [x9, #92]
    4898:	ldur	x9, [x29, #-8]
    489c:	mov	w8, #0x1                   	// #1
    48a0:	str	w8, [x9, #96]
    48a4:	b	48b8 <copy_input_until_stop+0x198>
    48a8:	ldur	x8, [x29, #-8]
    48ac:	ldr	w9, [x8, #96]
    48b0:	add	w9, w9, #0x1
    48b4:	str	w9, [x8, #96]
    48b8:	ldur	x8, [x29, #-8]
    48bc:	ldr	x8, [x8]
    48c0:	ldr	x9, [x8]
    48c4:	add	x9, x9, #0x1
    48c8:	str	x9, [x8]
    48cc:	ldur	x8, [x29, #-8]
    48d0:	ldr	x8, [x8]
    48d4:	ldr	w10, [x8, #8]
    48d8:	subs	w10, w10, #0x1
    48dc:	str	w10, [x8, #8]
    48e0:	ldur	x8, [x29, #-8]
    48e4:	ldr	x8, [x8]
    48e8:	ldr	w10, [x8, #12]
    48ec:	add	w10, w10, #0x1
    48f0:	str	w10, [x8, #12]
    48f4:	ldur	x8, [x29, #-8]
    48f8:	ldr	x8, [x8]
    48fc:	ldr	w10, [x8, #12]
    4900:	cbnz	w10, 4918 <copy_input_until_stop+0x1f8>
    4904:	ldur	x8, [x29, #-8]
    4908:	ldr	x8, [x8]
    490c:	ldr	w9, [x8, #16]
    4910:	add	w9, w9, #0x1
    4914:	str	w9, [x8, #16]
    4918:	b	4748 <copy_input_until_stop+0x28>
    491c:	b	4b14 <copy_input_until_stop+0x3f4>
    4920:	ldur	x8, [x29, #-8]
    4924:	ldr	w9, [x8, #108]
    4928:	ldur	x8, [x29, #-8]
    492c:	ldr	w10, [x8, #112]
    4930:	cmp	w9, w10
    4934:	b.lt	493c <copy_input_until_stop+0x21c>  // b.tstop
    4938:	b	4b14 <copy_input_until_stop+0x3f4>
    493c:	ldur	x8, [x29, #-8]
    4940:	ldr	x8, [x8]
    4944:	ldr	w9, [x8, #8]
    4948:	cbnz	w9, 4950 <copy_input_until_stop+0x230>
    494c:	b	4b14 <copy_input_until_stop+0x3f4>
    4950:	ldur	x8, [x29, #-8]
    4954:	ldr	w9, [x8, #16]
    4958:	cbnz	w9, 4960 <copy_input_until_stop+0x240>
    495c:	b	4b14 <copy_input_until_stop+0x3f4>
    4960:	mov	w8, #0x1                   	// #1
    4964:	sturb	w8, [x29, #-9]
    4968:	ldur	x9, [x29, #-8]
    496c:	ldr	x9, [x9]
    4970:	ldr	x9, [x9]
    4974:	ldrb	w8, [x9]
    4978:	str	w8, [sp, #8]
    497c:	ldr	w8, [sp, #8]
    4980:	ldur	x9, [x29, #-8]
    4984:	ldr	w10, [x9, #92]
    4988:	cmp	w8, w10
    498c:	b.eq	4a38 <copy_input_until_stop+0x318>  // b.none
    4990:	ldur	x8, [x29, #-8]
    4994:	ldr	w9, [x8, #96]
    4998:	cmp	w9, #0x1
    499c:	b.ne	4a38 <copy_input_until_stop+0x318>  // b.any
    49a0:	ldur	x8, [x29, #-8]
    49a4:	ldr	w9, [x8, #92]
    49a8:	strb	w9, [sp, #7]
    49ac:	ldur	x8, [x29, #-8]
    49b0:	ldr	w9, [x8, #648]
    49b4:	ldur	x8, [x29, #-8]
    49b8:	ldr	w10, [x8, #648]
    49bc:	ldrb	w11, [sp, #7]
    49c0:	eor	w10, w11, w10, lsr #24
    49c4:	adrp	x8, 0 <BZ2_crc32Table>
    49c8:	add	x8, x8, #0x0
    49cc:	ldr	w10, [x8, w10, uxtw #2]
    49d0:	eor	w9, w10, w9, lsl #8
    49d4:	ldur	x8, [x29, #-8]
    49d8:	str	w9, [x8, #648]
    49dc:	ldur	x8, [x29, #-8]
    49e0:	add	x8, x8, #0x80
    49e4:	ldur	x12, [x29, #-8]
    49e8:	ldr	w9, [x12, #92]
    49ec:	mov	w12, w9
    49f0:	add	x8, x8, x12
    49f4:	mov	w9, #0x1                   	// #1
    49f8:	strb	w9, [x8]
    49fc:	ldrb	w9, [sp, #7]
    4a00:	ldur	x8, [x29, #-8]
    4a04:	ldr	x8, [x8, #64]
    4a08:	ldur	x12, [x29, #-8]
    4a0c:	ldrsw	x12, [x12, #108]
    4a10:	add	x8, x8, x12
    4a14:	strb	w9, [x8]
    4a18:	ldur	x8, [x29, #-8]
    4a1c:	ldr	w9, [x8, #108]
    4a20:	add	w9, w9, #0x1
    4a24:	str	w9, [x8, #108]
    4a28:	ldr	w9, [sp, #8]
    4a2c:	ldur	x8, [x29, #-8]
    4a30:	str	w9, [x8, #92]
    4a34:	b	4aa0 <copy_input_until_stop+0x380>
    4a38:	ldr	w8, [sp, #8]
    4a3c:	ldur	x9, [x29, #-8]
    4a40:	ldr	w10, [x9, #92]
    4a44:	cmp	w8, w10
    4a48:	b.ne	4a5c <copy_input_until_stop+0x33c>  // b.any
    4a4c:	ldur	x8, [x29, #-8]
    4a50:	ldr	w9, [x8, #96]
    4a54:	cmp	w9, #0xff
    4a58:	b.ne	4a90 <copy_input_until_stop+0x370>  // b.any
    4a5c:	ldur	x8, [x29, #-8]
    4a60:	ldr	w9, [x8, #92]
    4a64:	cmp	w9, #0x100
    4a68:	b.cs	4a74 <copy_input_until_stop+0x354>  // b.hs, b.nlast
    4a6c:	ldur	x0, [x29, #-8]
    4a70:	bl	4b60 <add_pair_to_block>
    4a74:	ldr	w8, [sp, #8]
    4a78:	ldur	x9, [x29, #-8]
    4a7c:	str	w8, [x9, #92]
    4a80:	ldur	x9, [x29, #-8]
    4a84:	mov	w8, #0x1                   	// #1
    4a88:	str	w8, [x9, #96]
    4a8c:	b	4aa0 <copy_input_until_stop+0x380>
    4a90:	ldur	x8, [x29, #-8]
    4a94:	ldr	w9, [x8, #96]
    4a98:	add	w9, w9, #0x1
    4a9c:	str	w9, [x8, #96]
    4aa0:	ldur	x8, [x29, #-8]
    4aa4:	ldr	x8, [x8]
    4aa8:	ldr	x9, [x8]
    4aac:	add	x9, x9, #0x1
    4ab0:	str	x9, [x8]
    4ab4:	ldur	x8, [x29, #-8]
    4ab8:	ldr	x8, [x8]
    4abc:	ldr	w10, [x8, #8]
    4ac0:	subs	w10, w10, #0x1
    4ac4:	str	w10, [x8, #8]
    4ac8:	ldur	x8, [x29, #-8]
    4acc:	ldr	x8, [x8]
    4ad0:	ldr	w10, [x8, #12]
    4ad4:	add	w10, w10, #0x1
    4ad8:	str	w10, [x8, #12]
    4adc:	ldur	x8, [x29, #-8]
    4ae0:	ldr	x8, [x8]
    4ae4:	ldr	w10, [x8, #12]
    4ae8:	cbnz	w10, 4b00 <copy_input_until_stop+0x3e0>
    4aec:	ldur	x8, [x29, #-8]
    4af0:	ldr	x8, [x8]
    4af4:	ldr	w9, [x8, #16]
    4af8:	add	w9, w9, #0x1
    4afc:	str	w9, [x8, #16]
    4b00:	ldur	x8, [x29, #-8]
    4b04:	ldr	w9, [x8, #16]
    4b08:	subs	w9, w9, #0x1
    4b0c:	str	w9, [x8, #16]
    4b10:	b	4920 <copy_input_until_stop+0x200>
    4b14:	ldurb	w0, [x29, #-9]
    4b18:	ldp	x29, x30, [sp, #32]
    4b1c:	add	sp, sp, #0x30
    4b20:	ret

0000000000004b24 <flush_RL>:
    4b24:	sub	sp, sp, #0x20
    4b28:	stp	x29, x30, [sp, #16]
    4b2c:	add	x29, sp, #0x10
    4b30:	str	x0, [sp, #8]
    4b34:	ldr	x8, [sp, #8]
    4b38:	ldr	w9, [x8, #92]
    4b3c:	cmp	w9, #0x100
    4b40:	b.cs	4b4c <flush_RL+0x28>  // b.hs, b.nlast
    4b44:	ldr	x0, [sp, #8]
    4b48:	bl	4b60 <add_pair_to_block>
    4b4c:	ldr	x0, [sp, #8]
    4b50:	bl	480 <init_RL>
    4b54:	ldp	x29, x30, [sp, #16]
    4b58:	add	sp, sp, #0x20
    4b5c:	ret

0000000000004b60 <add_pair_to_block>:
    4b60:	sub	sp, sp, #0x20
    4b64:	str	x0, [sp, #24]
    4b68:	ldr	x8, [sp, #24]
    4b6c:	ldr	w9, [x8, #92]
    4b70:	strb	w9, [sp, #19]
    4b74:	str	wzr, [sp, #20]
    4b78:	ldr	w8, [sp, #20]
    4b7c:	ldr	x9, [sp, #24]
    4b80:	ldr	w10, [x9, #96]
    4b84:	cmp	w8, w10
    4b88:	b.ge	4bcc <add_pair_to_block+0x6c>  // b.tcont
    4b8c:	ldr	x8, [sp, #24]
    4b90:	ldr	w9, [x8, #648]
    4b94:	ldr	x8, [sp, #24]
    4b98:	ldr	w10, [x8, #648]
    4b9c:	ldrb	w11, [sp, #19]
    4ba0:	eor	w10, w11, w10, lsr #24
    4ba4:	adrp	x8, 0 <BZ2_crc32Table>
    4ba8:	add	x8, x8, #0x0
    4bac:	ldr	w10, [x8, w10, uxtw #2]
    4bb0:	eor	w9, w10, w9, lsl #8
    4bb4:	ldr	x8, [sp, #24]
    4bb8:	str	w9, [x8, #648]
    4bbc:	ldr	w8, [sp, #20]
    4bc0:	add	w8, w8, #0x1
    4bc4:	str	w8, [sp, #20]
    4bc8:	b	4b78 <add_pair_to_block+0x18>
    4bcc:	ldr	x8, [sp, #24]
    4bd0:	add	x8, x8, #0x80
    4bd4:	ldr	x9, [sp, #24]
    4bd8:	ldr	w10, [x9, #92]
    4bdc:	mov	w9, w10
    4be0:	add	x8, x8, x9
    4be4:	mov	w10, #0x1                   	// #1
    4be8:	strb	w10, [x8]
    4bec:	ldr	x8, [sp, #24]
    4bf0:	ldr	w10, [x8, #96]
    4bf4:	cmp	w10, #0x1
    4bf8:	str	w10, [sp, #12]
    4bfc:	b.eq	4c24 <add_pair_to_block+0xc4>  // b.none
    4c00:	b	4c04 <add_pair_to_block+0xa4>
    4c04:	ldr	w8, [sp, #12]
    4c08:	cmp	w8, #0x2
    4c0c:	b.eq	4c54 <add_pair_to_block+0xf4>  // b.none
    4c10:	b	4c14 <add_pair_to_block+0xb4>
    4c14:	ldr	w8, [sp, #12]
    4c18:	cmp	w8, #0x3
    4c1c:	b.eq	4cb0 <add_pair_to_block+0x150>  // b.none
    4c20:	b	4d38 <add_pair_to_block+0x1d8>
    4c24:	ldrb	w8, [sp, #19]
    4c28:	ldr	x9, [sp, #24]
    4c2c:	ldr	x9, [x9, #64]
    4c30:	ldr	x10, [sp, #24]
    4c34:	ldrsw	x10, [x10, #108]
    4c38:	add	x9, x9, x10
    4c3c:	strb	w8, [x9]
    4c40:	ldr	x9, [sp, #24]
    4c44:	ldr	w8, [x9, #108]
    4c48:	add	w8, w8, #0x1
    4c4c:	str	w8, [x9, #108]
    4c50:	b	4e44 <add_pair_to_block+0x2e4>
    4c54:	ldrb	w8, [sp, #19]
    4c58:	ldr	x9, [sp, #24]
    4c5c:	ldr	x9, [x9, #64]
    4c60:	ldr	x10, [sp, #24]
    4c64:	ldrsw	x10, [x10, #108]
    4c68:	add	x9, x9, x10
    4c6c:	strb	w8, [x9]
    4c70:	ldr	x9, [sp, #24]
    4c74:	ldr	w8, [x9, #108]
    4c78:	add	w8, w8, #0x1
    4c7c:	str	w8, [x9, #108]
    4c80:	ldrb	w8, [sp, #19]
    4c84:	ldr	x9, [sp, #24]
    4c88:	ldr	x9, [x9, #64]
    4c8c:	ldr	x10, [sp, #24]
    4c90:	ldrsw	x10, [x10, #108]
    4c94:	add	x9, x9, x10
    4c98:	strb	w8, [x9]
    4c9c:	ldr	x9, [sp, #24]
    4ca0:	ldr	w8, [x9, #108]
    4ca4:	add	w8, w8, #0x1
    4ca8:	str	w8, [x9, #108]
    4cac:	b	4e44 <add_pair_to_block+0x2e4>
    4cb0:	ldrb	w8, [sp, #19]
    4cb4:	ldr	x9, [sp, #24]
    4cb8:	ldr	x9, [x9, #64]
    4cbc:	ldr	x10, [sp, #24]
    4cc0:	ldrsw	x10, [x10, #108]
    4cc4:	add	x9, x9, x10
    4cc8:	strb	w8, [x9]
    4ccc:	ldr	x9, [sp, #24]
    4cd0:	ldr	w8, [x9, #108]
    4cd4:	add	w8, w8, #0x1
    4cd8:	str	w8, [x9, #108]
    4cdc:	ldrb	w8, [sp, #19]
    4ce0:	ldr	x9, [sp, #24]
    4ce4:	ldr	x9, [x9, #64]
    4ce8:	ldr	x10, [sp, #24]
    4cec:	ldrsw	x10, [x10, #108]
    4cf0:	add	x9, x9, x10
    4cf4:	strb	w8, [x9]
    4cf8:	ldr	x9, [sp, #24]
    4cfc:	ldr	w8, [x9, #108]
    4d00:	add	w8, w8, #0x1
    4d04:	str	w8, [x9, #108]
    4d08:	ldrb	w8, [sp, #19]
    4d0c:	ldr	x9, [sp, #24]
    4d10:	ldr	x9, [x9, #64]
    4d14:	ldr	x10, [sp, #24]
    4d18:	ldrsw	x10, [x10, #108]
    4d1c:	add	x9, x9, x10
    4d20:	strb	w8, [x9]
    4d24:	ldr	x9, [sp, #24]
    4d28:	ldr	w8, [x9, #108]
    4d2c:	add	w8, w8, #0x1
    4d30:	str	w8, [x9, #108]
    4d34:	b	4e44 <add_pair_to_block+0x2e4>
    4d38:	ldr	x8, [sp, #24]
    4d3c:	add	x8, x8, #0x80
    4d40:	ldr	x9, [sp, #24]
    4d44:	ldr	w10, [x9, #96]
    4d48:	subs	w10, w10, #0x4
    4d4c:	mov	w0, w10
    4d50:	sxtw	x9, w0
    4d54:	add	x8, x8, x9
    4d58:	mov	w10, #0x1                   	// #1
    4d5c:	strb	w10, [x8]
    4d60:	ldrb	w10, [sp, #19]
    4d64:	ldr	x8, [sp, #24]
    4d68:	ldr	x8, [x8, #64]
    4d6c:	ldr	x9, [sp, #24]
    4d70:	ldrsw	x9, [x9, #108]
    4d74:	add	x8, x8, x9
    4d78:	strb	w10, [x8]
    4d7c:	ldr	x8, [sp, #24]
    4d80:	ldr	w10, [x8, #108]
    4d84:	add	w10, w10, #0x1
    4d88:	str	w10, [x8, #108]
    4d8c:	ldrb	w10, [sp, #19]
    4d90:	ldr	x8, [sp, #24]
    4d94:	ldr	x8, [x8, #64]
    4d98:	ldr	x9, [sp, #24]
    4d9c:	ldrsw	x9, [x9, #108]
    4da0:	add	x8, x8, x9
    4da4:	strb	w10, [x8]
    4da8:	ldr	x8, [sp, #24]
    4dac:	ldr	w10, [x8, #108]
    4db0:	add	w10, w10, #0x1
    4db4:	str	w10, [x8, #108]
    4db8:	ldrb	w10, [sp, #19]
    4dbc:	ldr	x8, [sp, #24]
    4dc0:	ldr	x8, [x8, #64]
    4dc4:	ldr	x9, [sp, #24]
    4dc8:	ldrsw	x9, [x9, #108]
    4dcc:	add	x8, x8, x9
    4dd0:	strb	w10, [x8]
    4dd4:	ldr	x8, [sp, #24]
    4dd8:	ldr	w10, [x8, #108]
    4ddc:	add	w10, w10, #0x1
    4de0:	str	w10, [x8, #108]
    4de4:	ldrb	w10, [sp, #19]
    4de8:	ldr	x8, [sp, #24]
    4dec:	ldr	x8, [x8, #64]
    4df0:	ldr	x9, [sp, #24]
    4df4:	ldrsw	x9, [x9, #108]
    4df8:	add	x8, x8, x9
    4dfc:	strb	w10, [x8]
    4e00:	ldr	x8, [sp, #24]
    4e04:	ldr	w10, [x8, #108]
    4e08:	add	w10, w10, #0x1
    4e0c:	str	w10, [x8, #108]
    4e10:	ldr	x8, [sp, #24]
    4e14:	ldr	w10, [x8, #96]
    4e18:	subs	w10, w10, #0x4
    4e1c:	ldr	x8, [sp, #24]
    4e20:	ldr	x8, [x8, #64]
    4e24:	ldr	x9, [sp, #24]
    4e28:	ldrsw	x9, [x9, #108]
    4e2c:	add	x8, x8, x9
    4e30:	strb	w10, [x8]
    4e34:	ldr	x8, [sp, #24]
    4e38:	ldr	w10, [x8, #108]
    4e3c:	add	w10, w10, #0x1
    4e40:	str	w10, [x8, #108]
    4e44:	add	sp, sp, #0x20
    4e48:	ret
