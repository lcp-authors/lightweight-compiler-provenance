
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_crypt.cpython-38-aarch64-linux-gnu.so_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000007a0 <.init>:
 7a0:	stp	x29, x30, [sp, #-16]!
 7a4:	mov	x29, sp
 7a8:	bl	890 <PyUnicode_AsUTF8AndSize@plt+0x10>
 7ac:	ldp	x29, x30, [sp], #16
 7b0:	ret

Disassembly of section .plt:

00000000000007c0 <strlen@plt-0x20>:
 7c0:	stp	x16, x30, [sp, #-16]!
 7c4:	adrp	x16, 11000 <PyInit__crypt@@Base+0x103a4>
 7c8:	ldr	x17, [x16, #4088]
 7cc:	add	x16, x16, #0xff8
 7d0:	br	x17
 7d4:	nop
 7d8:	nop
 7dc:	nop

00000000000007e0 <strlen@plt>:
 7e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7e4:	ldr	x17, [x16]
 7e8:	add	x16, x16, #0x0
 7ec:	br	x17

00000000000007f0 <__cxa_finalize@plt>:
 7f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7f4:	ldr	x17, [x16, #8]
 7f8:	add	x16, x16, #0x8
 7fc:	br	x17

0000000000000800 <PyErr_SetString@plt>:
 800:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 804:	ldr	x17, [x16, #16]
 808:	add	x16, x16, #0x10
 80c:	br	x17

0000000000000810 <memset@plt>:
 810:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 814:	ldr	x17, [x16, #24]
 818:	add	x16, x16, #0x18
 81c:	br	x17

0000000000000820 <_PyArg_BadArgument@plt>:
 820:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 824:	ldr	x17, [x16, #32]
 828:	add	x16, x16, #0x20
 82c:	br	x17

0000000000000830 <__gmon_start__@plt>:
 830:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 834:	ldr	x17, [x16, #40]
 838:	add	x16, x16, #0x28
 83c:	br	x17

0000000000000840 <_PyArg_CheckPositional@plt>:
 840:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 844:	ldr	x17, [x16, #48]
 848:	add	x16, x16, #0x30
 84c:	br	x17

0000000000000850 <Py_BuildValue@plt>:
 850:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 854:	ldr	x17, [x16, #56]
 858:	add	x16, x16, #0x38
 85c:	br	x17

0000000000000860 <PyModule_Create2@plt>:
 860:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 864:	ldr	x17, [x16, #64]
 868:	add	x16, x16, #0x40
 86c:	br	x17

0000000000000870 <crypt_r@plt>:
 870:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 874:	ldr	x17, [x16, #72]
 878:	add	x16, x16, #0x48
 87c:	br	x17

0000000000000880 <PyUnicode_AsUTF8AndSize@plt>:
 880:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 884:	ldr	x17, [x16, #80]
 888:	add	x16, x16, #0x50
 88c:	br	x17

Disassembly of section .text:

0000000000000890 <PyInit__crypt@@Base-0x3cc>:
 890:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 894:	ldr	x0, [x0, #4056]
 898:	cbz	x0, 8a0 <PyUnicode_AsUTF8AndSize@plt+0x20>
 89c:	b	830 <__gmon_start__@plt>
 8a0:	ret
 8a4:	stp	x29, x30, [sp, #-32]!
 8a8:	mov	x29, sp
 8ac:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 8b0:	add	x0, x0, #0x108
 8b4:	str	x0, [sp, #24]
 8b8:	ldr	x0, [sp, #24]
 8bc:	str	x0, [sp, #24]
 8c0:	ldr	x1, [sp, #24]
 8c4:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 8c8:	add	x0, x0, #0x108
 8cc:	cmp	x1, x0
 8d0:	b.eq	908 <PyUnicode_AsUTF8AndSize@plt+0x88>  // b.none
 8d4:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 8d8:	ldr	x0, [x0, #4032]
 8dc:	str	x0, [sp, #16]
 8e0:	ldr	x0, [sp, #16]
 8e4:	str	x0, [sp, #16]
 8e8:	ldr	x0, [sp, #16]
 8ec:	cmp	x0, #0x0
 8f0:	b.eq	90c <PyUnicode_AsUTF8AndSize@plt+0x8c>  // b.none
 8f4:	ldr	x1, [sp, #16]
 8f8:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 8fc:	add	x0, x0, #0x108
 900:	blr	x1
 904:	b	90c <PyUnicode_AsUTF8AndSize@plt+0x8c>
 908:	nop
 90c:	ldp	x29, x30, [sp], #32
 910:	ret
 914:	stp	x29, x30, [sp, #-48]!
 918:	mov	x29, sp
 91c:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 920:	add	x0, x0, #0x108
 924:	str	x0, [sp, #40]
 928:	ldr	x0, [sp, #40]
 92c:	str	x0, [sp, #40]
 930:	ldr	x1, [sp, #40]
 934:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 938:	add	x0, x0, #0x108
 93c:	sub	x0, x1, x0
 940:	asr	x0, x0, #3
 944:	lsr	x1, x0, #63
 948:	add	x0, x1, x0
 94c:	asr	x0, x0, #1
 950:	str	x0, [sp, #32]
 954:	ldr	x0, [sp, #32]
 958:	cmp	x0, #0x0
 95c:	b.eq	998 <PyUnicode_AsUTF8AndSize@plt+0x118>  // b.none
 960:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 964:	ldr	x0, [x0, #4064]
 968:	str	x0, [sp, #24]
 96c:	ldr	x0, [sp, #24]
 970:	str	x0, [sp, #24]
 974:	ldr	x0, [sp, #24]
 978:	cmp	x0, #0x0
 97c:	b.eq	99c <PyUnicode_AsUTF8AndSize@plt+0x11c>  // b.none
 980:	ldr	x2, [sp, #24]
 984:	ldr	x1, [sp, #32]
 988:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 98c:	add	x0, x0, #0x108
 990:	blr	x2
 994:	b	99c <PyUnicode_AsUTF8AndSize@plt+0x11c>
 998:	nop
 99c:	ldp	x29, x30, [sp], #48
 9a0:	ret
 9a4:	stp	x29, x30, [sp, #-16]!
 9a8:	mov	x29, sp
 9ac:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 9b0:	add	x0, x0, #0x108
 9b4:	ldrb	w0, [x0]
 9b8:	and	x0, x0, #0xff
 9bc:	cmp	x0, #0x0
 9c0:	b.ne	9fc <PyUnicode_AsUTF8AndSize@plt+0x17c>  // b.any
 9c4:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 9c8:	ldr	x0, [x0, #4040]
 9cc:	cmp	x0, #0x0
 9d0:	b.eq	9e4 <PyUnicode_AsUTF8AndSize@plt+0x164>  // b.none
 9d4:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 9d8:	add	x0, x0, #0x58
 9dc:	ldr	x0, [x0]
 9e0:	bl	7f0 <__cxa_finalize@plt>
 9e4:	bl	8a4 <PyUnicode_AsUTF8AndSize@plt+0x24>
 9e8:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 9ec:	add	x0, x0, #0x108
 9f0:	mov	w1, #0x1                   	// #1
 9f4:	strb	w1, [x0]
 9f8:	b	a00 <PyUnicode_AsUTF8AndSize@plt+0x180>
 9fc:	nop
 a00:	ldp	x29, x30, [sp], #16
 a04:	ret
 a08:	stp	x29, x30, [sp, #-16]!
 a0c:	mov	x29, sp
 a10:	bl	914 <PyUnicode_AsUTF8AndSize@plt+0x94>
 a14:	nop
 a18:	ldp	x29, x30, [sp], #16
 a1c:	ret
 a20:	stp	x29, x30, [sp, #-96]!
 a24:	mov	x29, sp
 a28:	str	x0, [sp, #40]
 a2c:	str	x1, [sp, #32]
 a30:	str	x2, [sp, #24]
 a34:	str	xzr, [sp, #88]
 a38:	ldr	x0, [sp, #24]
 a3c:	cmp	x0, #0x1
 a40:	b.le	a50 <PyUnicode_AsUTF8AndSize@plt+0x1d0>
 a44:	ldr	x0, [sp, #24]
 a48:	cmp	x0, #0x2
 a4c:	b.le	a70 <PyUnicode_AsUTF8AndSize@plt+0x1f0>
 a50:	mov	x3, #0x2                   	// #2
 a54:	mov	x2, #0x2                   	// #2
 a58:	ldr	x1, [sp, #24]
 a5c:	adrp	x0, 0 <strlen@plt-0x7e0>
 a60:	add	x0, x0, #0xdf0
 a64:	bl	840 <_PyArg_CheckPositional@plt>
 a68:	cmp	w0, #0x0
 a6c:	b.eq	bcc <PyUnicode_AsUTF8AndSize@plt+0x34c>  // b.none
 a70:	ldr	x0, [sp, #32]
 a74:	ldr	x0, [x0]
 a78:	ldr	x0, [x0, #8]
 a7c:	ldr	x0, [x0, #168]
 a80:	and	x0, x0, #0x10000000
 a84:	cmp	x0, #0x0
 a88:	b.ne	ab8 <PyUnicode_AsUTF8AndSize@plt+0x238>  // b.any
 a8c:	ldr	x0, [sp, #32]
 a90:	ldr	x0, [x0]
 a94:	mov	x3, x0
 a98:	adrp	x0, 0 <strlen@plt-0x7e0>
 a9c:	add	x2, x0, #0xdf8
 aa0:	adrp	x0, 0 <strlen@plt-0x7e0>
 aa4:	add	x1, x0, #0xe00
 aa8:	adrp	x0, 0 <strlen@plt-0x7e0>
 aac:	add	x0, x0, #0xdf0
 ab0:	bl	820 <_PyArg_BadArgument@plt>
 ab4:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 ab8:	ldr	x0, [sp, #32]
 abc:	ldr	x0, [x0]
 ac0:	add	x1, sp, #0x40
 ac4:	bl	880 <PyUnicode_AsUTF8AndSize@plt>
 ac8:	str	x0, [sp, #80]
 acc:	ldr	x0, [sp, #80]
 ad0:	cmp	x0, #0x0
 ad4:	b.eq	bd4 <PyUnicode_AsUTF8AndSize@plt+0x354>  // b.none
 ad8:	ldr	x0, [sp, #80]
 adc:	bl	7e0 <strlen@plt>
 ae0:	ldr	x1, [sp, #64]
 ae4:	cmp	x0, x1
 ae8:	b.eq	b0c <PyUnicode_AsUTF8AndSize@plt+0x28c>  // b.none
 aec:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 af0:	ldr	x0, [x0, #4048]
 af4:	ldr	x2, [x0]
 af8:	adrp	x0, 0 <strlen@plt-0x7e0>
 afc:	add	x1, x0, #0xe10
 b00:	mov	x0, x2
 b04:	bl	800 <PyErr_SetString@plt>
 b08:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 b0c:	ldr	x0, [sp, #32]
 b10:	add	x0, x0, #0x8
 b14:	ldr	x0, [x0]
 b18:	ldr	x0, [x0, #8]
 b1c:	ldr	x0, [x0, #168]
 b20:	and	x0, x0, #0x10000000
 b24:	cmp	x0, #0x0
 b28:	b.ne	b5c <PyUnicode_AsUTF8AndSize@plt+0x2dc>  // b.any
 b2c:	ldr	x0, [sp, #32]
 b30:	add	x0, x0, #0x8
 b34:	ldr	x0, [x0]
 b38:	mov	x3, x0
 b3c:	adrp	x0, 0 <strlen@plt-0x7e0>
 b40:	add	x2, x0, #0xdf8
 b44:	adrp	x0, 0 <strlen@plt-0x7e0>
 b48:	add	x1, x0, #0xe28
 b4c:	adrp	x0, 0 <strlen@plt-0x7e0>
 b50:	add	x0, x0, #0xdf0
 b54:	bl	820 <_PyArg_BadArgument@plt>
 b58:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 b5c:	ldr	x0, [sp, #32]
 b60:	add	x0, x0, #0x8
 b64:	ldr	x0, [x0]
 b68:	add	x1, sp, #0x38
 b6c:	bl	880 <PyUnicode_AsUTF8AndSize@plt>
 b70:	str	x0, [sp, #72]
 b74:	ldr	x0, [sp, #72]
 b78:	cmp	x0, #0x0
 b7c:	b.eq	bdc <PyUnicode_AsUTF8AndSize@plt+0x35c>  // b.none
 b80:	ldr	x0, [sp, #72]
 b84:	bl	7e0 <strlen@plt>
 b88:	ldr	x1, [sp, #56]
 b8c:	cmp	x0, x1
 b90:	b.eq	bb4 <PyUnicode_AsUTF8AndSize@plt+0x334>  // b.none
 b94:	adrp	x0, 11000 <PyInit__crypt@@Base+0x103a4>
 b98:	ldr	x0, [x0, #4048]
 b9c:	ldr	x2, [x0]
 ba0:	adrp	x0, 0 <strlen@plt-0x7e0>
 ba4:	add	x1, x0, #0xe10
 ba8:	mov	x0, x2
 bac:	bl	800 <PyErr_SetString@plt>
 bb0:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 bb4:	ldr	x2, [sp, #72]
 bb8:	ldr	x1, [sp, #80]
 bbc:	ldr	x0, [sp, #40]
 bc0:	bl	bec <PyUnicode_AsUTF8AndSize@plt+0x36c>
 bc4:	str	x0, [sp, #88]
 bc8:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 bcc:	nop
 bd0:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 bd4:	nop
 bd8:	b	be0 <PyUnicode_AsUTF8AndSize@plt+0x360>
 bdc:	nop
 be0:	ldr	x0, [sp, #88]
 be4:	ldp	x29, x30, [sp], #96
 be8:	ret
 bec:	sub	sp, sp, #0xe0
 bf0:	sub	sp, sp, #0x20, lsl #12
 bf4:	stp	x29, x30, [sp]
 bf8:	mov	x29, sp
 bfc:	str	x0, [sp, #40]
 c00:	str	x1, [sp, #32]
 c04:	str	x2, [sp, #24]
 c08:	add	x0, sp, #0x38
 c0c:	mov	x2, #0xa0                  	// #160
 c10:	movk	x2, #0x2, lsl #16
 c14:	mov	w1, #0x0                   	// #0
 c18:	bl	810 <memset@plt>
 c1c:	add	x0, sp, #0x38
 c20:	mov	x2, x0
 c24:	ldr	x1, [sp, #24]
 c28:	ldr	x0, [sp, #32]
 c2c:	bl	870 <crypt_r@plt>
 c30:	add	x1, sp, #0x20, lsl #12
 c34:	str	x0, [x1, #216]
 c38:	add	x0, sp, #0x20, lsl #12
 c3c:	ldr	x1, [x0, #216]
 c40:	adrp	x0, 0 <strlen@plt-0x7e0>
 c44:	add	x0, x0, #0xe38
 c48:	bl	850 <Py_BuildValue@plt>
 c4c:	ldp	x29, x30, [sp]
 c50:	add	sp, sp, #0xe0
 c54:	add	sp, sp, #0x20, lsl #12
 c58:	ret

0000000000000c5c <PyInit__crypt@@Base>:
 c5c:	stp	x29, x30, [sp, #-16]!
 c60:	mov	x29, sp
 c64:	mov	w1, #0x3f5                 	// #1013
 c68:	adrp	x0, 12000 <PyInit__crypt@@Base+0x113a4>
 c6c:	add	x0, x0, #0xa0
 c70:	bl	860 <PyModule_Create2@plt>
 c74:	ldp	x29, x30, [sp], #16
 c78:	ret

Disassembly of section .fini:

0000000000000c7c <.fini>:
 c7c:	stp	x29, x30, [sp, #-16]!
 c80:	mov	x29, sp
 c84:	ldp	x29, x30, [sp], #16
 c88:	ret
