
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-cgroups-agent_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400850 <_init>:
  400850:	stp	x29, x30, [sp, #-16]!
  400854:	mov	x29, sp
  400858:	bl	4009b8 <call_weak_fn>
  40085c:	ldp	x29, x30, [sp], #16
  400860:	ret

Disassembly of section .plt:

0000000000400868 <__libc_start_main@plt-0x20>:
  400868:	stp	x16, x30, [sp, #-16]!
  40086c:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  400870:	ldr	x17, [x16, #3976]
  400874:	add	x16, x16, #0xf88
  400878:	br	x17
  40087c:	nop
  400880:	nop
  400884:	nop

0000000000400888 <__libc_start_main@plt>:
  400888:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40088c:	ldr	x17, [x16, #3984]
  400890:	add	x16, x16, #0xf90
  400894:	br	x17

0000000000400898 <abort@plt>:
  400898:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40089c:	ldr	x17, [x16, #3992]
  4008a0:	add	x16, x16, #0xf98
  4008a4:	br	x17

00000000004008a8 <__gmon_start__@plt>:
  4008a8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008ac:	ldr	x17, [x16, #4000]
  4008b0:	add	x16, x16, #0xfa0
  4008b4:	br	x17

00000000004008b8 <log_get_max_level_realm@plt>:
  4008b8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008bc:	ldr	x17, [x16, #4008]
  4008c0:	add	x16, x16, #0xfa8
  4008c4:	br	x17

00000000004008c8 <log_internal_realm@plt>:
  4008c8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008cc:	ldr	x17, [x16, #4016]
  4008d0:	add	x16, x16, #0xfb0
  4008d4:	br	x17

00000000004008d8 <abs@plt>:
  4008d8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008dc:	ldr	x17, [x16, #4024]
  4008e0:	add	x16, x16, #0xfb8
  4008e4:	br	x17

00000000004008e8 <log_setup_service@plt>:
  4008e8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008ec:	ldr	x17, [x16, #4032]
  4008f0:	add	x16, x16, #0xfc0
  4008f4:	br	x17

00000000004008f8 <socket@plt>:
  4008f8:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  4008fc:	ldr	x17, [x16, #4040]
  400900:	add	x16, x16, #0xfc8
  400904:	br	x17

0000000000400908 <__errno_location@plt>:
  400908:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40090c:	ldr	x17, [x16, #4048]
  400910:	add	x16, x16, #0xfd0
  400914:	br	x17

0000000000400918 <strlen@plt>:
  400918:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40091c:	ldr	x17, [x16, #4056]
  400920:	add	x16, x16, #0xfd8
  400924:	br	x17

0000000000400928 <log_assert_failed_realm@plt>:
  400928:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40092c:	ldr	x17, [x16, #4064]
  400930:	add	x16, x16, #0xfe0
  400934:	br	x17

0000000000400938 <strnlen@plt>:
  400938:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40093c:	ldr	x17, [x16, #4072]
  400940:	add	x16, x16, #0xfe8
  400944:	br	x17

0000000000400948 <sendto@plt>:
  400948:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40094c:	ldr	x17, [x16, #4080]
  400950:	add	x16, x16, #0xff0
  400954:	br	x17

0000000000400958 <safe_close@plt>:
  400958:	adrp	x16, 41f000 <__FRAME_END__+0x1ddd0>
  40095c:	ldr	x17, [x16, #4088]
  400960:	add	x16, x16, #0xff8
  400964:	br	x17

Disassembly of section .text:

0000000000400968 <_start>:
  400968:	mov	x29, #0x0                   	// #0
  40096c:	mov	x30, #0x0                   	// #0
  400970:	mov	x5, x0
  400974:	ldr	x1, [sp]
  400978:	add	x2, sp, #0x8
  40097c:	mov	x6, sp
  400980:	movz	x0, #0x0, lsl #48
  400984:	movk	x0, #0x0, lsl #32
  400988:	movk	x0, #0x40, lsl #16
  40098c:	movk	x0, #0xb30
  400990:	movz	x3, #0x0, lsl #48
  400994:	movk	x3, #0x0, lsl #32
  400998:	movk	x3, #0x40, lsl #16
  40099c:	movk	x3, #0xf38
  4009a0:	movz	x4, #0x0, lsl #48
  4009a4:	movk	x4, #0x0, lsl #32
  4009a8:	movk	x4, #0x40, lsl #16
  4009ac:	movk	x4, #0xfb8
  4009b0:	bl	400888 <__libc_start_main@plt>
  4009b4:	bl	400898 <abort@plt>

00000000004009b8 <call_weak_fn>:
  4009b8:	adrp	x0, 41f000 <__FRAME_END__+0x1ddd0>
  4009bc:	ldr	x0, [x0, #3952]
  4009c0:	cbz	x0, 4009c8 <call_weak_fn+0x10>
  4009c4:	b	4008a8 <__gmon_start__@plt>
  4009c8:	ret

00000000004009cc <deregister_tm_clones>:
  4009cc:	stp	x29, x30, [sp, #-32]!
  4009d0:	mov	x29, sp
  4009d4:	adrp	x0, 420000 <completed.8445>
  4009d8:	add	x0, x0, #0x0
  4009dc:	str	x0, [sp, #24]
  4009e0:	ldr	x0, [sp, #24]
  4009e4:	str	x0, [sp, #24]
  4009e8:	ldr	x1, [sp, #24]
  4009ec:	adrp	x0, 420000 <completed.8445>
  4009f0:	add	x0, x0, #0x0
  4009f4:	cmp	x1, x0
  4009f8:	b.eq	400a34 <deregister_tm_clones+0x68>  // b.none
  4009fc:	adrp	x0, 400000 <_init-0x850>
  400a00:	add	x0, x0, #0xfd0
  400a04:	ldr	x0, [x0]
  400a08:	str	x0, [sp, #16]
  400a0c:	ldr	x0, [sp, #16]
  400a10:	str	x0, [sp, #16]
  400a14:	ldr	x0, [sp, #16]
  400a18:	cmp	x0, #0x0
  400a1c:	b.eq	400a38 <deregister_tm_clones+0x6c>  // b.none
  400a20:	ldr	x1, [sp, #16]
  400a24:	adrp	x0, 420000 <completed.8445>
  400a28:	add	x0, x0, #0x0
  400a2c:	blr	x1
  400a30:	b	400a38 <deregister_tm_clones+0x6c>
  400a34:	nop
  400a38:	ldp	x29, x30, [sp], #32
  400a3c:	ret

0000000000400a40 <register_tm_clones>:
  400a40:	stp	x29, x30, [sp, #-48]!
  400a44:	mov	x29, sp
  400a48:	adrp	x0, 420000 <completed.8445>
  400a4c:	add	x0, x0, #0x0
  400a50:	str	x0, [sp, #40]
  400a54:	ldr	x0, [sp, #40]
  400a58:	str	x0, [sp, #40]
  400a5c:	ldr	x1, [sp, #40]
  400a60:	adrp	x0, 420000 <completed.8445>
  400a64:	add	x0, x0, #0x0
  400a68:	sub	x0, x1, x0
  400a6c:	asr	x0, x0, #3
  400a70:	lsr	x1, x0, #63
  400a74:	add	x0, x1, x0
  400a78:	asr	x0, x0, #1
  400a7c:	str	x0, [sp, #32]
  400a80:	ldr	x0, [sp, #32]
  400a84:	cmp	x0, #0x0
  400a88:	b.eq	400ac8 <register_tm_clones+0x88>  // b.none
  400a8c:	adrp	x0, 400000 <_init-0x850>
  400a90:	add	x0, x0, #0xfd8
  400a94:	ldr	x0, [x0]
  400a98:	str	x0, [sp, #24]
  400a9c:	ldr	x0, [sp, #24]
  400aa0:	str	x0, [sp, #24]
  400aa4:	ldr	x0, [sp, #24]
  400aa8:	cmp	x0, #0x0
  400aac:	b.eq	400acc <register_tm_clones+0x8c>  // b.none
  400ab0:	ldr	x2, [sp, #24]
  400ab4:	ldr	x1, [sp, #32]
  400ab8:	adrp	x0, 420000 <completed.8445>
  400abc:	add	x0, x0, #0x0
  400ac0:	blr	x2
  400ac4:	b	400acc <register_tm_clones+0x8c>
  400ac8:	nop
  400acc:	ldp	x29, x30, [sp], #48
  400ad0:	ret

0000000000400ad4 <__do_global_dtors_aux>:
  400ad4:	stp	x29, x30, [sp, #-16]!
  400ad8:	mov	x29, sp
  400adc:	adrp	x0, 420000 <completed.8445>
  400ae0:	add	x0, x0, #0x0
  400ae4:	ldrb	w0, [x0]
  400ae8:	and	x0, x0, #0xff
  400aec:	cmp	x0, #0x0
  400af0:	b.ne	400b0c <__do_global_dtors_aux+0x38>  // b.any
  400af4:	bl	4009cc <deregister_tm_clones>
  400af8:	adrp	x0, 420000 <completed.8445>
  400afc:	add	x0, x0, #0x0
  400b00:	mov	w1, #0x1                   	// #1
  400b04:	strb	w1, [x0]
  400b08:	b	400b10 <__do_global_dtors_aux+0x3c>
  400b0c:	nop
  400b10:	ldp	x29, x30, [sp], #16
  400b14:	ret

0000000000400b18 <frame_dummy>:
  400b18:	stp	x29, x30, [sp, #-16]!
  400b1c:	mov	x29, sp
  400b20:	bl	400a40 <register_tm_clones>
  400b24:	nop
  400b28:	ldp	x29, x30, [sp], #16
  400b2c:	ret

0000000000400b30 <main>:
  400b30:	sub	sp, sp, #0xe0
  400b34:	stp	x29, x30, [sp, #208]
  400b38:	add	x29, sp, #0xd0
  400b3c:	mov	w8, #0xffffffff            	// #-1
  400b40:	adrp	x9, 401000 <main.sa+0x20>
  400b44:	add	x9, x9, #0x60
  400b48:	add	x9, x9, #0x3
  400b4c:	adrp	x10, 401000 <main.sa+0x20>
  400b50:	add	x10, x10, #0x85
  400b54:	stur	wzr, [x29, #-4]
  400b58:	stur	w0, [x29, #-8]
  400b5c:	stur	x1, [x29, #-16]
  400b60:	stur	w8, [x29, #-20]
  400b64:	ldur	w8, [x29, #-8]
  400b68:	cmp	w8, #0x2
  400b6c:	str	x9, [sp, #64]
  400b70:	str	x10, [sp, #56]
  400b74:	b.eq	400bfc <main+0xcc>  // b.none
  400b78:	mov	w8, #0x3                   	// #3
  400b7c:	stur	w8, [x29, #-44]
  400b80:	stur	wzr, [x29, #-48]
  400b84:	stur	wzr, [x29, #-52]
  400b88:	ldur	w0, [x29, #-52]
  400b8c:	bl	4008b8 <log_get_max_level_realm@plt>
  400b90:	ldur	w8, [x29, #-44]
  400b94:	and	w8, w8, #0x7
  400b98:	cmp	w0, w8
  400b9c:	b.lt	400bd0 <main+0xa0>  // b.tstop
  400ba0:	ldur	w8, [x29, #-52]
  400ba4:	ldur	w9, [x29, #-44]
  400ba8:	orr	w0, w9, w8, lsl #10
  400bac:	ldur	w1, [x29, #-48]
  400bb0:	ldr	x2, [sp, #64]
  400bb4:	mov	w3, #0x15                  	// #21
  400bb8:	ldr	x4, [sp, #56]
  400bbc:	adrp	x5, 401000 <main.sa+0x20>
  400bc0:	add	x5, x5, #0x8a
  400bc4:	bl	4008c8 <log_internal_realm@plt>
  400bc8:	str	w0, [sp, #52]
  400bcc:	b	400be4 <main+0xb4>
  400bd0:	ldur	w0, [x29, #-48]
  400bd4:	bl	4008d8 <abs@plt>
  400bd8:	mov	w8, wzr
  400bdc:	subs	w8, w8, w0, uxtb
  400be0:	str	w8, [sp, #52]
  400be4:	ldr	w8, [sp, #52]
  400be8:	stur	w8, [x29, #-56]
  400bec:	mov	w8, #0x1                   	// #1
  400bf0:	stur	w8, [x29, #-4]
  400bf4:	stur	w8, [x29, #-60]
  400bf8:	b	400ef8 <main+0x3c8>
  400bfc:	bl	4008e8 <log_setup_service@plt>
  400c00:	mov	w0, #0x1                   	// #1
  400c04:	mov	w1, #0x2                   	// #2
  400c08:	movk	w1, #0x8, lsl #16
  400c0c:	mov	w8, wzr
  400c10:	mov	w2, w8
  400c14:	bl	4008f8 <socket@plt>
  400c18:	stur	w0, [x29, #-20]
  400c1c:	ldur	w8, [x29, #-20]
  400c20:	cmp	w8, #0x0
  400c24:	cset	w8, ge  // ge = tcont
  400c28:	tbnz	w8, #0, 400cb8 <main+0x188>
  400c2c:	mov	w8, #0x7                   	// #7
  400c30:	stur	w8, [x29, #-64]
  400c34:	bl	400908 <__errno_location@plt>
  400c38:	ldr	w8, [x0]
  400c3c:	stur	w8, [x29, #-68]
  400c40:	stur	wzr, [x29, #-72]
  400c44:	ldur	w0, [x29, #-72]
  400c48:	bl	4008b8 <log_get_max_level_realm@plt>
  400c4c:	ldur	w8, [x29, #-64]
  400c50:	and	w8, w8, #0x7
  400c54:	cmp	w0, w8
  400c58:	b.lt	400c8c <main+0x15c>  // b.tstop
  400c5c:	ldur	w8, [x29, #-72]
  400c60:	ldur	w9, [x29, #-64]
  400c64:	orr	w0, w9, w8, lsl #10
  400c68:	ldur	w1, [x29, #-68]
  400c6c:	ldr	x2, [sp, #64]
  400c70:	mov	w3, #0x1d                  	// #29
  400c74:	ldr	x4, [sp, #56]
  400c78:	adrp	x5, 401000 <main.sa+0x20>
  400c7c:	add	x5, x5, #0xa9
  400c80:	bl	4008c8 <log_internal_realm@plt>
  400c84:	str	w0, [sp, #48]
  400c88:	b	400ca0 <main+0x170>
  400c8c:	ldur	w0, [x29, #-68]
  400c90:	bl	4008d8 <abs@plt>
  400c94:	mov	w8, wzr
  400c98:	subs	w8, w8, w0, uxtb
  400c9c:	str	w8, [sp, #48]
  400ca0:	ldr	w8, [sp, #48]
  400ca4:	stur	w8, [x29, #-76]
  400ca8:	mov	w8, #0x1                   	// #1
  400cac:	stur	w8, [x29, #-4]
  400cb0:	stur	w8, [x29, #-60]
  400cb4:	b	400ef8 <main+0x3c8>
  400cb8:	ldur	x8, [x29, #-16]
  400cbc:	ldr	x0, [x8, #8]
  400cc0:	bl	400918 <strlen@plt>
  400cc4:	stur	x0, [x29, #-40]
  400cc8:	ldur	w0, [x29, #-20]
  400ccc:	ldur	x8, [x29, #-16]
  400cd0:	ldr	x1, [x8, #8]
  400cd4:	ldur	x2, [x29, #-40]
  400cd8:	adrp	x8, 400000 <_init-0x850>
  400cdc:	add	x8, x8, #0xfe0
  400ce0:	stur	x8, [x29, #-88]
  400ce4:	stur	x8, [x29, #-96]
  400ce8:	str	w0, [sp, #44]
  400cec:	str	x1, [sp, #32]
  400cf0:	str	x2, [sp, #24]
  400cf4:	ldur	x8, [x29, #-96]
  400cf8:	ldrh	w9, [x8]
  400cfc:	cmp	w9, #0x1
  400d00:	cset	w9, eq  // eq = none
  400d04:	mov	w10, #0x1                   	// #1
  400d08:	eor	w9, w9, #0x1
  400d0c:	eor	w9, w9, w10
  400d10:	eor	w9, w9, w10
  400d14:	and	w9, w9, #0x1
  400d18:	mov	w0, w9
  400d1c:	sxtw	x8, w0
  400d20:	cbz	x8, 400d48 <main+0x218>
  400d24:	mov	w8, wzr
  400d28:	mov	w0, w8
  400d2c:	adrp	x1, 401000 <main.sa+0x20>
  400d30:	add	x1, x1, #0xc7
  400d34:	ldr	x2, [sp, #64]
  400d38:	mov	w3, #0x23                  	// #35
  400d3c:	adrp	x4, 401000 <main.sa+0x20>
  400d40:	add	x4, x4, #0xe2
  400d44:	bl	400928 <log_assert_failed_realm@plt>
  400d48:	ldur	x8, [x29, #-96]
  400d4c:	ldrb	w9, [x8, #2]
  400d50:	cbnz	w9, 400d70 <main+0x240>
  400d54:	ldur	x8, [x29, #-96]
  400d58:	add	x0, x8, #0x3
  400d5c:	mov	x1, #0x6b                  	// #107
  400d60:	bl	400938 <strnlen@plt>
  400d64:	add	x8, x0, #0x1
  400d68:	str	x8, [sp, #16]
  400d6c:	b	400d88 <main+0x258>
  400d70:	ldur	x8, [x29, #-96]
  400d74:	add	x0, x8, #0x2
  400d78:	mov	x1, #0x6c                  	// #108
  400d7c:	bl	400938 <strnlen@plt>
  400d80:	add	x8, x0, #0x1
  400d84:	str	x8, [sp, #16]
  400d88:	ldr	x8, [sp, #16]
  400d8c:	add	x8, x8, #0x2
  400d90:	str	x8, [sp, #104]
  400d94:	ldr	x8, [sp, #104]
  400d98:	ldur	x4, [x29, #-88]
  400d9c:	ldr	w0, [sp, #44]
  400da0:	ldr	x1, [sp, #32]
  400da4:	ldr	x2, [sp, #24]
  400da8:	mov	w9, wzr
  400dac:	mov	w3, w9
  400db0:	mov	w5, w8
  400db4:	bl	400948 <sendto@plt>
  400db8:	stur	x0, [x29, #-32]
  400dbc:	ldur	x10, [x29, #-32]
  400dc0:	cmp	x10, #0x0
  400dc4:	cset	w8, ge  // ge = tcont
  400dc8:	tbnz	w8, #0, 400e58 <main+0x328>
  400dcc:	mov	w8, #0x7                   	// #7
  400dd0:	str	w8, [sp, #100]
  400dd4:	bl	400908 <__errno_location@plt>
  400dd8:	ldr	w8, [x0]
  400ddc:	str	w8, [sp, #96]
  400de0:	str	wzr, [sp, #92]
  400de4:	ldr	w0, [sp, #92]
  400de8:	bl	4008b8 <log_get_max_level_realm@plt>
  400dec:	ldr	w8, [sp, #100]
  400df0:	and	w8, w8, #0x7
  400df4:	cmp	w0, w8
  400df8:	b.lt	400e2c <main+0x2fc>  // b.tstop
  400dfc:	ldr	w8, [sp, #92]
  400e00:	ldr	w9, [sp, #100]
  400e04:	orr	w0, w9, w8, lsl #10
  400e08:	ldr	w1, [sp, #96]
  400e0c:	ldr	x2, [sp, #64]
  400e10:	mov	w3, #0x25                  	// #37
  400e14:	ldr	x4, [sp, #56]
  400e18:	adrp	x5, 401000 <main.sa+0x20>
  400e1c:	add	x5, x5, #0xf9
  400e20:	bl	4008c8 <log_internal_realm@plt>
  400e24:	str	w0, [sp, #12]
  400e28:	b	400e40 <main+0x310>
  400e2c:	ldr	w0, [sp, #96]
  400e30:	bl	4008d8 <abs@plt>
  400e34:	mov	w8, wzr
  400e38:	subs	w8, w8, w0, uxtb
  400e3c:	str	w8, [sp, #12]
  400e40:	ldr	w8, [sp, #12]
  400e44:	str	w8, [sp, #88]
  400e48:	mov	w8, #0x1                   	// #1
  400e4c:	stur	w8, [x29, #-4]
  400e50:	stur	w8, [x29, #-60]
  400e54:	b	400ef8 <main+0x3c8>
  400e58:	ldur	x8, [x29, #-32]
  400e5c:	ldur	x9, [x29, #-40]
  400e60:	cmp	x8, x9
  400e64:	b.eq	400eec <main+0x3bc>  // b.none
  400e68:	mov	w8, #0x7                   	// #7
  400e6c:	str	w8, [sp, #84]
  400e70:	str	wzr, [sp, #80]
  400e74:	str	wzr, [sp, #76]
  400e78:	ldr	w0, [sp, #76]
  400e7c:	bl	4008b8 <log_get_max_level_realm@plt>
  400e80:	ldr	w8, [sp, #84]
  400e84:	and	w8, w8, #0x7
  400e88:	cmp	w0, w8
  400e8c:	b.lt	400ec0 <main+0x390>  // b.tstop
  400e90:	ldr	w8, [sp, #76]
  400e94:	ldr	w9, [sp, #84]
  400e98:	orr	w0, w9, w8, lsl #10
  400e9c:	ldr	w1, [sp, #80]
  400ea0:	ldr	x2, [sp, #64]
  400ea4:	mov	w3, #0x2a                  	// #42
  400ea8:	ldr	x4, [sp, #56]
  400eac:	adrp	x5, 401000 <main.sa+0x20>
  400eb0:	add	x5, x5, #0x122
  400eb4:	bl	4008c8 <log_internal_realm@plt>
  400eb8:	str	w0, [sp, #8]
  400ebc:	b	400ed4 <main+0x3a4>
  400ec0:	ldr	w0, [sp, #80]
  400ec4:	bl	4008d8 <abs@plt>
  400ec8:	mov	w8, wzr
  400ecc:	subs	w8, w8, w0, uxtb
  400ed0:	str	w8, [sp, #8]
  400ed4:	ldr	w8, [sp, #8]
  400ed8:	str	w8, [sp, #72]
  400edc:	mov	w8, #0x1                   	// #1
  400ee0:	stur	w8, [x29, #-4]
  400ee4:	stur	w8, [x29, #-60]
  400ee8:	b	400ef8 <main+0x3c8>
  400eec:	stur	wzr, [x29, #-4]
  400ef0:	mov	w8, #0x1                   	// #1
  400ef4:	stur	w8, [x29, #-60]
  400ef8:	sub	x0, x29, #0x14
  400efc:	bl	400f10 <closep>
  400f00:	ldur	w0, [x29, #-4]
  400f04:	ldp	x29, x30, [sp, #208]
  400f08:	add	sp, sp, #0xe0
  400f0c:	ret

0000000000400f10 <closep>:
  400f10:	sub	sp, sp, #0x20
  400f14:	stp	x29, x30, [sp, #16]
  400f18:	add	x29, sp, #0x10
  400f1c:	str	x0, [sp, #8]
  400f20:	ldr	x8, [sp, #8]
  400f24:	ldr	w0, [x8]
  400f28:	bl	400958 <safe_close@plt>
  400f2c:	ldp	x29, x30, [sp, #16]
  400f30:	add	sp, sp, #0x20
  400f34:	ret

0000000000400f38 <__libc_csu_init>:
  400f38:	stp	x29, x30, [sp, #-64]!
  400f3c:	mov	x29, sp
  400f40:	stp	x19, x20, [sp, #16]
  400f44:	adrp	x20, 41f000 <__FRAME_END__+0x1ddd0>
  400f48:	add	x20, x20, #0xd48
  400f4c:	stp	x21, x22, [sp, #32]
  400f50:	adrp	x21, 41f000 <__FRAME_END__+0x1ddd0>
  400f54:	add	x21, x21, #0xd40
  400f58:	sub	x20, x20, x21
  400f5c:	mov	w22, w0
  400f60:	stp	x23, x24, [sp, #48]
  400f64:	mov	x23, x1
  400f68:	mov	x24, x2
  400f6c:	bl	400850 <_init>
  400f70:	cmp	xzr, x20, asr #3
  400f74:	b.eq	400fa0 <__libc_csu_init+0x68>  // b.none
  400f78:	asr	x20, x20, #3
  400f7c:	mov	x19, #0x0                   	// #0
  400f80:	ldr	x3, [x21, x19, lsl #3]
  400f84:	mov	x2, x24
  400f88:	add	x19, x19, #0x1
  400f8c:	mov	x1, x23
  400f90:	mov	w0, w22
  400f94:	blr	x3
  400f98:	cmp	x20, x19
  400f9c:	b.ne	400f80 <__libc_csu_init+0x48>  // b.any
  400fa0:	ldp	x19, x20, [sp, #16]
  400fa4:	ldp	x21, x22, [sp, #32]
  400fa8:	ldp	x23, x24, [sp, #48]
  400fac:	ldp	x29, x30, [sp], #64
  400fb0:	ret
  400fb4:	nop

0000000000400fb8 <__libc_csu_fini>:
  400fb8:	ret

Disassembly of section .fini:

0000000000400fbc <_fini>:
  400fbc:	stp	x29, x30, [sp, #-16]!
  400fc0:	mov	x29, sp
  400fc4:	ldp	x29, x30, [sp], #16
  400fc8:	ret
