In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_gcc_-Os:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_combine_>:
   0:	tbnz	x2, #63, 94 <adler32_combine_+0x94>
   4:	mov	x3, #0xfff1                	// #65521
   8:	and	x5, x0, #0xffff
   c:	sdiv	x4, x2, x3
  10:	msub	x4, x4, x3, x2
  14:	lsr	w2, w0, #16
  18:	lsr	w0, w1, #16
  1c:	adds	x1, x5, w1, uxth
  20:	add	x2, x2, x0
  24:	mul	x6, x4, x5
  28:	udiv	x0, x6, x3
  2c:	msub	x0, x0, x3, x6
  30:	sub	x0, x0, x4
  34:	mov	x4, #0xfff0                	// #65520
  38:	add	x2, x2, x0
  3c:	add	x0, x2, x3
  40:	b.eq	8c <adler32_combine_+0x8c>  // b.none
  44:	sub	x3, x1, #0x1
  48:	cmp	x3, x4
  4c:	b.ls	58 <adler32_combine_+0x58>  // b.plast
  50:	mov	x5, #0xffffffffffff000e    	// #-65522
  54:	add	x3, x1, x5
  58:	mov	x1, #0xffe1                	// #65505
  5c:	movk	x1, #0x1, lsl #16
  60:	cmp	x0, x1
  64:	b.ls	70 <adler32_combine_+0x70>  // b.plast
  68:	mov	x4, #0xffffffffffff000f    	// #-65521
  6c:	add	x0, x2, x4
  70:	mov	x1, #0xfff0                	// #65520
  74:	cmp	x0, x1
  78:	b.ls	84 <adler32_combine_+0x84>  // b.plast
  7c:	mov	x1, #0xffffffffffff000f    	// #-65521
  80:	add	x0, x0, x1
  84:	orr	x0, x3, x0, lsl #16
  88:	ret
  8c:	mov	x3, x4
  90:	b	58 <adler32_combine_+0x58>
  94:	mov	x0, #0xffffffff            	// #4294967295
  98:	b	88 <adler32_combine_+0x88>

000000000000009c <adler32_z>:
  9c:	lsr	w7, w0, #16
  a0:	cmp	x2, #0x1
  a4:	and	x0, x0, #0xffff
  a8:	b.ne	e8 <adler32_z+0x4c>  // b.any
  ac:	ldrb	w1, [x1]
  b0:	add	x1, x1, x0
  b4:	mov	x0, #0xfff0                	// #65520
  b8:	cmp	x1, x0
  bc:	mov	x2, x0
  c0:	b.ls	cc <adler32_z+0x30>  // b.plast
  c4:	mov	x3, #0xffffffffffff000f    	// #-65521
  c8:	add	x1, x1, x3
  cc:	add	x0, x1, x7
  d0:	cmp	x0, x2
  d4:	b.ls	e0 <adler32_z+0x44>  // b.plast
  d8:	mov	x2, #0xffffffffffff000f    	// #-65521
  dc:	add	x0, x0, x2
  e0:	orr	x0, x1, x0, lsl #16
  e4:	ret
  e8:	cbz	x1, 38c <adler32_z+0x2f0>
  ec:	cmp	x2, #0xf
  f0:	b.ls	1c0 <adler32_z+0x124>  // b.plast
  f4:	stp	x29, x30, [sp, #-64]!
  f8:	mov	x16, #0x15b0                	// #5552
  fc:	add	x1, x1, x16
 100:	mov	x29, sp
 104:	mov	x17, #0xffffffffffffea50    	// #-5552
 108:	mov	x18, #0x15af                	// #5551
 10c:	mov	x15, #0xfff1                	// #65521
 110:	stp	x19, x20, [sp, #16]
 114:	stp	x21, x22, [sp, #32]
 118:	str	x23, [sp, #48]
 11c:	add	x3, x1, x17
 120:	cmp	x2, x18
 124:	b.hi	1c8 <adler32_z+0x12c>  // b.pmore
 128:	cbz	x2, 168 <adler32_z+0xcc>
 12c:	and	x15, x2, #0xfffffffffffffff0
 130:	lsr	x14, x2, #4
 134:	add	x15, x3, x15
 138:	cmp	x3, x15
 13c:	b.ne	2b0 <adler32_z+0x214>  // b.any
 140:	mov	x1, #0xfffffffffffffff0    	// #-16
 144:	madd	x2, x14, x1, x2
 148:	mov	x1, #0x0                   	// #0
 14c:	cmp	x1, x2
 150:	b.ne	378 <adler32_z+0x2dc>  // b.any
 154:	mov	x1, #0xfff1                	// #65521
 158:	udiv	x2, x0, x1
 15c:	msub	x0, x2, x1, x0
 160:	udiv	x2, x7, x1
 164:	msub	x7, x2, x1, x7
 168:	orr	x0, x0, x7, lsl #16
 16c:	ldp	x19, x20, [sp, #16]
 170:	ldp	x21, x22, [sp, #32]
 174:	ldr	x23, [sp, #48]
 178:	ldp	x29, x30, [sp], #64
 17c:	ret
 180:	ldrb	w4, [x1, x3]
 184:	add	x3, x3, #0x1
 188:	add	x0, x0, x4
 18c:	add	x7, x7, x0
 190:	cmp	x2, x3
 194:	b.ne	180 <adler32_z+0xe4>  // b.any
 198:	mov	x1, #0xfff0                	// #65520
 19c:	cmp	x0, x1
 1a0:	b.ls	1ac <adler32_z+0x110>  // b.plast
 1a4:	mov	x1, #0xffffffffffff000f    	// #-65521
 1a8:	add	x0, x0, x1
 1ac:	mov	x4, #0xfff1                	// #65521
 1b0:	udiv	x1, x7, x4
 1b4:	msub	x1, x1, x4, x7
 1b8:	orr	x0, x0, x1, lsl #16
 1bc:	ret
 1c0:	mov	x3, #0x0                   	// #0
 1c4:	b	190 <adler32_z+0xf4>
 1c8:	add	x2, x2, x17
 1cc:	ldrb	w10, [x3]
 1d0:	add	x3, x3, #0x10
 1d4:	ldurb	w6, [x3, #-15]
 1d8:	add	x10, x10, x0
 1dc:	ldurb	w4, [x3, #-14]
 1e0:	ldurb	w23, [x3, #-13]
 1e4:	add	x6, x6, x10
 1e8:	add	x4, x4, x6
 1ec:	ldurb	w9, [x3, #-12]
 1f0:	ldurb	w22, [x3, #-11]
 1f4:	add	x23, x23, x4
 1f8:	ldurb	w8, [x3, #-10]
 1fc:	add	x9, x9, x23
 200:	ldurb	w21, [x3, #-9]
 204:	add	x22, x22, x9
 208:	ldurb	w14, [x3, #-8]
 20c:	add	x8, x8, x22
 210:	ldurb	w5, [x3, #-7]
 214:	add	x21, x21, x8
 218:	ldurb	w13, [x3, #-6]
 21c:	add	x14, x14, x21
 220:	ldurb	w20, [x3, #-5]
 224:	add	x5, x5, x14
 228:	add	x13, x13, x5
 22c:	ldurb	w12, [x3, #-4]
 230:	add	x4, x4, x23
 234:	add	x6, x10, x6
 238:	ldurb	w19, [x3, #-3]
 23c:	add	x20, x20, x13
 240:	add	x6, x4, x6
 244:	add	x9, x9, x22
 248:	ldurb	w11, [x3, #-2]
 24c:	add	x12, x12, x20
 250:	add	x6, x6, x9
 254:	add	x8, x8, x21
 258:	ldurb	w30, [x3, #-1]
 25c:	add	x19, x19, x12
 260:	add	x6, x6, x8
 264:	add	x5, x14, x5
 268:	add	x11, x11, x19
 26c:	add	x5, x6, x5
 270:	add	x13, x13, x20
 274:	add	x12, x12, x19
 278:	add	x5, x5, x13
 27c:	add	x0, x30, x11
 280:	add	x5, x5, x12
 284:	add	x11, x30, x11, lsl #1
 288:	add	x5, x5, x11
 28c:	cmp	x3, x1
 290:	add	x7, x7, x5
 294:	b.ne	1cc <adler32_z+0x130>  // b.any
 298:	udiv	x3, x0, x15
 29c:	add	x1, x1, x16
 2a0:	msub	x0, x3, x15, x0
 2a4:	udiv	x3, x7, x15
 2a8:	msub	x7, x3, x15, x7
 2ac:	b	11c <adler32_z+0x80>
 2b0:	ldrb	w1, [x3]
 2b4:	add	x3, x3, #0x10
 2b8:	ldurb	w12, [x3, #-15]
 2bc:	add	x1, x1, x0
 2c0:	ldurb	w4, [x3, #-14]
 2c4:	add	x12, x12, x1
 2c8:	ldurb	w11, [x3, #-13]
 2cc:	add	x4, x4, x12
 2d0:	ldurb	w20, [x3, #-12]
 2d4:	add	x11, x11, x4
 2d8:	ldurb	w10, [x3, #-11]
 2dc:	add	x20, x20, x11
 2e0:	ldurb	w19, [x3, #-10]
 2e4:	add	x10, x10, x20
 2e8:	ldurb	w9, [x3, #-9]
 2ec:	add	x19, x19, x10
 2f0:	ldurb	w30, [x3, #-8]
 2f4:	add	x9, x9, x19
 2f8:	ldurb	w8, [x3, #-7]
 2fc:	add	x30, x30, x9
 300:	ldurb	w17, [x3, #-6]
 304:	add	x0, x7, x1
 308:	add	x8, x8, x30
 30c:	ldurb	w6, [x3, #-5]
 310:	add	x4, x12, x4
 314:	add	x17, x17, x8
 318:	add	x4, x0, x4
 31c:	ldurb	w13, [x3, #-4]
 320:	add	x11, x11, x20
 324:	add	x6, x6, x17
 328:	ldurb	w5, [x3, #-3]
 32c:	add	x4, x4, x11
 330:	add	x10, x10, x19
 334:	ldurb	w18, [x3, #-2]
 338:	add	x13, x13, x6
 33c:	add	x4, x4, x10
 340:	add	x1, x9, x30
 344:	add	x5, x5, x13
 348:	add	x1, x4, x1
 34c:	add	x8, x8, x17
 350:	ldurb	w0, [x3, #-1]
 354:	add	x1, x1, x8
 358:	add	x6, x6, x13
 35c:	add	x16, x18, x5
 360:	add	x1, x1, x6
 364:	add	x5, x18, x5, lsl #1
 368:	add	x0, x0, x16
 36c:	add	x1, x1, x5
 370:	add	x7, x0, x1
 374:	b	138 <adler32_z+0x9c>
 378:	ldrb	w4, [x3, x1]
 37c:	add	x1, x1, #0x1
 380:	add	x0, x0, x4
 384:	add	x7, x7, x0
 388:	b	14c <adler32_z+0xb0>
 38c:	mov	x0, #0x1                   	// #1
 390:	ret

0000000000000394 <adler32>:
 394:	mov	w2, w2
 398:	b	9c <adler32_z>

000000000000039c <adler32_combine>:
 39c:	b	0 <adler32_combine_>

00000000000003a0 <adler32_combine64>:
 3a0:	b	0 <adler32_combine_>

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gf2_matrix_times>:
   0:	mov	x2, x0
   4:	mov	x0, #0x0                   	// #0
   8:	cbnz	x1, 10 <gf2_matrix_times+0x10>
   c:	ret
  10:	tbz	w1, #0, 1c <gf2_matrix_times+0x1c>
  14:	ldr	x3, [x2]
  18:	eor	x0, x0, x3
  1c:	lsr	x1, x1, #1
  20:	add	x2, x2, #0x8
  24:	b	8 <gf2_matrix_times+0x8>

0000000000000028 <gf2_matrix_square>:
  28:	mov	x6, x0
  2c:	mov	x5, x1
  30:	stp	x29, x30, [sp, #-16]!
  34:	mov	x4, #0x0                   	// #0
  38:	mov	x29, sp
  3c:	ldr	x1, [x5, x4]
  40:	mov	x0, x5
  44:	bl	0 <gf2_matrix_times>
  48:	str	x0, [x6, x4]
  4c:	add	x4, x4, #0x8
  50:	cmp	x4, #0x100
  54:	b.ne	3c <gf2_matrix_square+0x14>  // b.any
  58:	ldp	x29, x30, [sp], #16
  5c:	ret

0000000000000060 <crc32_combine_>:
  60:	mov	x7, x0
  64:	cmp	x2, #0x0
  68:	b.le	12c <crc32_combine_+0xcc>
  6c:	sub	sp, sp, #0x210
  70:	mov	x0, #0x8320                	// #33568
  74:	movk	x0, #0xedb8, lsl #16
  78:	mov	x10, x1
  7c:	mov	x8, x2
  80:	add	x9, sp, #0x110
  84:	stp	x29, x30, [sp]
  88:	mov	x29, sp
  8c:	str	x0, [sp, #272]
  90:	mov	x0, #0x1                   	// #1
  94:	mov	x1, x0
  98:	str	x1, [x9, x0, lsl #3]
  9c:	add	x0, x0, #0x1
  a0:	lsl	x1, x1, #1
  a4:	cmp	x0, #0x20
  a8:	b.ne	98 <crc32_combine_+0x38>  // b.any
  ac:	mov	x1, x9
  b0:	add	x0, sp, #0x10
  b4:	bl	28 <gf2_matrix_square>
  b8:	mov	x0, x9
  bc:	add	x1, sp, #0x10
  c0:	bl	28 <gf2_matrix_square>
  c4:	mov	x1, x9
  c8:	add	x0, sp, #0x10
  cc:	bl	28 <gf2_matrix_square>
  d0:	tbz	w8, #0, e4 <crc32_combine_+0x84>
  d4:	mov	x1, x7
  d8:	add	x0, sp, #0x10
  dc:	bl	0 <gf2_matrix_times>
  e0:	mov	x7, x0
  e4:	asr	x11, x8, #1
  e8:	cmp	xzr, x8, asr #1
  ec:	b.eq	118 <crc32_combine_+0xb8>  // b.none
  f0:	add	x1, sp, #0x10
  f4:	mov	x0, x9
  f8:	bl	28 <gf2_matrix_square>
  fc:	tbz	w11, #0, 110 <crc32_combine_+0xb0>
 100:	mov	x1, x7
 104:	mov	x0, x9
 108:	bl	0 <gf2_matrix_times>
 10c:	mov	x7, x0
 110:	asr	x8, x8, #2
 114:	cbnz	x8, c4 <crc32_combine_+0x64>
 118:	eor	x7, x7, x10
 11c:	mov	x0, x7
 120:	ldp	x29, x30, [sp]
 124:	add	sp, sp, #0x210
 128:	ret
 12c:	ret

0000000000000130 <get_crc_table>:
 130:	adrp	x0, 0 <gf2_matrix_times>
 134:	add	x0, x0, #0x0
 138:	ret

000000000000013c <crc32_z>:
 13c:	cbz	x1, 42c <crc32_z+0x2f0>
 140:	adrp	x4, 0 <gf2_matrix_times>
 144:	mvn	w0, w0
 148:	add	x4, x4, #0x0
 14c:	cbz	x2, 1d8 <crc32_z+0x9c>
 150:	tst	x1, #0x3
 154:	b.ne	1e4 <crc32_z+0xa8>  // b.any
 158:	and	x6, x2, #0xffffffffffffffe0
 15c:	adrp	x3, 0 <gf2_matrix_times>
 160:	lsr	x5, x2, #5
 164:	add	x6, x1, x6
 168:	add	x3, x3, #0x0
 16c:	cmp	x1, x6
 170:	b.ne	200 <crc32_z+0xc4>  // b.any
 174:	mov	x3, #0xffffffffffffffe0    	// #-32
 178:	adrp	x4, 0 <gf2_matrix_times>
 17c:	add	x4, x4, #0x0
 180:	madd	x2, x5, x3, x2
 184:	mov	x5, #0x0                   	// #0
 188:	sub	x3, x2, x5
 18c:	cmp	x3, #0x3
 190:	b.hi	3e8 <crc32_z+0x2ac>  // b.pmore
 194:	and	x3, x2, #0xfffffffffffffffc
 198:	lsr	x5, x2, #2
 19c:	add	x1, x1, x3
 1a0:	mov	x3, #0xfffffffffffffffc    	// #-4
 1a4:	madd	x2, x5, x3, x2
 1a8:	cbz	x2, 1d8 <crc32_z+0x9c>
 1ac:	adrp	x5, 0 <gf2_matrix_times>
 1b0:	add	x5, x5, #0x0
 1b4:	mov	x4, #0x0                   	// #0
 1b8:	ldrb	w3, [x1, x4]
 1bc:	add	x4, x4, #0x1
 1c0:	cmp	x2, x4
 1c4:	eor	w3, w3, w0
 1c8:	and	x3, x3, #0xff
 1cc:	ldr	w3, [x5, x3, lsl #2]
 1d0:	eor	w0, w3, w0, lsr #8
 1d4:	b.ne	1b8 <crc32_z+0x7c>  // b.any
 1d8:	mvn	w0, w0
 1dc:	mov	w0, w0
 1e0:	ret
 1e4:	ldrb	w3, [x1], #1
 1e8:	sub	x2, x2, #0x1
 1ec:	eor	w3, w3, w0
 1f0:	and	x3, x3, #0xff
 1f4:	ldr	w3, [x4, x3, lsl #2]
 1f8:	eor	w0, w3, w0, lsr #8
 1fc:	b	14c <crc32_z+0x10>
 200:	ldr	w4, [x1]
 204:	add	x1, x1, #0x20
 208:	eor	w0, w0, w4
 20c:	ubfx	x4, x0, #8, #8
 210:	ubfx	x7, x0, #16, #8
 214:	add	x4, x4, #0x200
 218:	add	x7, x7, #0x100
 21c:	ldr	w4, [x3, x4, lsl #2]
 220:	ldr	w7, [x3, x7, lsl #2]
 224:	eor	w4, w4, w7
 228:	add	x7, x3, w0, uxtb #2
 22c:	lsr	w0, w0, #24
 230:	ldr	w7, [x7, #3072]
 234:	ldr	w0, [x3, x0, lsl #2]
 238:	eor	w0, w7, w0
 23c:	eor	w4, w4, w0
 240:	ldur	w0, [x1, #-28]
 244:	eor	w4, w4, w0
 248:	ubfx	x0, x4, #8, #8
 24c:	ubfx	x7, x4, #16, #8
 250:	add	x0, x0, #0x200
 254:	add	x7, x7, #0x100
 258:	ldr	w0, [x3, x0, lsl #2]
 25c:	ldr	w7, [x3, x7, lsl #2]
 260:	eor	w0, w0, w7
 264:	add	x7, x3, w4, uxtb #2
 268:	lsr	w4, w4, #24
 26c:	ldr	w7, [x7, #3072]
 270:	ldr	w4, [x3, x4, lsl #2]
 274:	eor	w4, w7, w4
 278:	eor	w0, w0, w4
 27c:	ldur	w4, [x1, #-24]
 280:	eor	w0, w0, w4
 284:	ubfx	x4, x0, #8, #8
 288:	ubfx	x7, x0, #16, #8
 28c:	add	x4, x4, #0x200
 290:	add	x7, x7, #0x100
 294:	ldr	w4, [x3, x4, lsl #2]
 298:	ldr	w7, [x3, x7, lsl #2]
 29c:	eor	w4, w4, w7
 2a0:	add	x7, x3, w0, uxtb #2
 2a4:	lsr	w0, w0, #24
 2a8:	ldr	w7, [x7, #3072]
 2ac:	ldr	w0, [x3, x0, lsl #2]
 2b0:	eor	w0, w7, w0
 2b4:	eor	w4, w4, w0
 2b8:	ldur	w0, [x1, #-20]
 2bc:	eor	w4, w4, w0
 2c0:	ubfx	x0, x4, #8, #8
 2c4:	ubfx	x7, x4, #16, #8
 2c8:	add	x0, x0, #0x200
 2cc:	add	x7, x7, #0x100
 2d0:	ldr	w0, [x3, x0, lsl #2]
 2d4:	ldr	w7, [x3, x7, lsl #2]
 2d8:	eor	w0, w0, w7
 2dc:	add	x7, x3, w4, uxtb #2
 2e0:	lsr	w4, w4, #24
 2e4:	ldr	w7, [x7, #3072]
 2e8:	ldr	w4, [x3, x4, lsl #2]
 2ec:	eor	w4, w7, w4
 2f0:	eor	w0, w0, w4
 2f4:	ldur	w4, [x1, #-16]
 2f8:	eor	w0, w0, w4
 2fc:	ubfx	x4, x0, #8, #8
 300:	ubfx	x7, x0, #16, #8
 304:	add	x4, x4, #0x200
 308:	add	x7, x7, #0x100
 30c:	ldr	w4, [x3, x4, lsl #2]
 310:	ldr	w7, [x3, x7, lsl #2]
 314:	eor	w4, w4, w7
 318:	add	x7, x3, w0, uxtb #2
 31c:	lsr	w0, w0, #24
 320:	ldr	w7, [x7, #3072]
 324:	ldr	w0, [x3, x0, lsl #2]
 328:	eor	w0, w7, w0
 32c:	eor	w4, w4, w0
 330:	ldur	w0, [x1, #-12]
 334:	eor	w4, w4, w0
 338:	ubfx	x0, x4, #8, #8
 33c:	ubfx	x7, x4, #16, #8
 340:	add	x0, x0, #0x200
 344:	add	x7, x7, #0x100
 348:	ldr	w0, [x3, x0, lsl #2]
 34c:	ldr	w7, [x3, x7, lsl #2]
 350:	eor	w0, w0, w7
 354:	add	x7, x3, w4, uxtb #2
 358:	lsr	w4, w4, #24
 35c:	ldr	w7, [x7, #3072]
 360:	ldr	w4, [x3, x4, lsl #2]
 364:	eor	w4, w7, w4
 368:	eor	w0, w0, w4
 36c:	ldur	w4, [x1, #-8]
 370:	eor	w0, w0, w4
 374:	ubfx	x4, x0, #8, #8
 378:	ubfx	x7, x0, #16, #8
 37c:	add	x4, x4, #0x200
 380:	add	x7, x7, #0x100
 384:	ldr	w4, [x3, x4, lsl #2]
 388:	ldr	w7, [x3, x7, lsl #2]
 38c:	eor	w4, w4, w7
 390:	add	x7, x3, w0, uxtb #2
 394:	lsr	w0, w0, #24
 398:	ldr	w7, [x7, #3072]
 39c:	ldr	w0, [x3, x0, lsl #2]
 3a0:	eor	w0, w7, w0
 3a4:	eor	w4, w4, w0
 3a8:	ldur	w0, [x1, #-4]
 3ac:	eor	w4, w4, w0
 3b0:	ubfx	x0, x4, #8, #8
 3b4:	ubfx	x7, x4, #16, #8
 3b8:	add	x0, x0, #0x200
 3bc:	add	x7, x7, #0x100
 3c0:	ldr	w0, [x3, x0, lsl #2]
 3c4:	ldr	w7, [x3, x7, lsl #2]
 3c8:	eor	w7, w0, w7
 3cc:	add	x0, x3, w4, uxtb #2
 3d0:	lsr	w4, w4, #24
 3d4:	ldr	w0, [x0, #3072]
 3d8:	ldr	w4, [x3, x4, lsl #2]
 3dc:	eor	w0, w0, w4
 3e0:	eor	w0, w0, w7
 3e4:	b	16c <crc32_z+0x30>
 3e8:	ldr	w3, [x1, x5]
 3ec:	add	x5, x5, #0x4
 3f0:	eor	w0, w0, w3
 3f4:	ubfx	x3, x0, #8, #8
 3f8:	ubfx	x6, x0, #16, #8
 3fc:	add	x3, x3, #0x200
 400:	add	x6, x6, #0x100
 404:	ldr	w3, [x4, x3, lsl #2]
 408:	ldr	w6, [x4, x6, lsl #2]
 40c:	eor	w3, w3, w6
 410:	add	x6, x4, w0, uxtb #2
 414:	lsr	w0, w0, #24
 418:	ldr	w6, [x6, #3072]
 41c:	ldr	w0, [x4, x0, lsl #2]
 420:	eor	w0, w6, w0
 424:	eor	w0, w0, w3
 428:	b	188 <crc32_z+0x4c>
 42c:	mov	x0, #0x0                   	// #0
 430:	b	1e0 <crc32_z+0xa4>

0000000000000434 <crc32>:
 434:	mov	w2, w2
 438:	b	13c <crc32_z>

000000000000043c <crc32_combine>:
 43c:	b	60 <crc32_combine_>

0000000000000440 <crc32_combine64>:
 440:	b	60 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <slide_hash>:
       0:	ldr	x2, [x0, #120]
       4:	ldr	w4, [x0, #132]
       8:	ldr	w1, [x0, #80]
       c:	add	x2, x2, w4, uxtw #1
      10:	ldrh	w5, [x2, #-2]!
      14:	sub	w3, w5, w1
      18:	cmp	w1, w5
      1c:	and	w3, w3, #0xffff
      20:	csel	w3, w3, wzr, ls  // ls = plast
      24:	strh	w3, [x2]
      28:	subs	w4, w4, #0x1
      2c:	b.ne	10 <slide_hash+0x10>  // b.any
      30:	ldr	x0, [x0, #112]
      34:	mov	w3, w1
      38:	add	x0, x0, w1, uxtw #1
      3c:	ldrh	w4, [x0, #-2]!
      40:	sub	w2, w4, w1
      44:	cmp	w1, w4
      48:	and	w2, w2, #0xffff
      4c:	csel	w2, w2, wzr, ls  // ls = plast
      50:	strh	w2, [x0]
      54:	subs	w3, w3, #0x1
      58:	b.ne	3c <slide_hash+0x3c>  // b.any
      5c:	ret

0000000000000060 <putShortMSB>:
      60:	ldr	x3, [x0, #16]
      64:	ldr	x2, [x0, #40]
      68:	add	x4, x2, #0x1
      6c:	str	x4, [x0, #40]
      70:	lsr	w4, w1, #8
      74:	strb	w4, [x3, x2]
      78:	ldr	x3, [x0, #16]
      7c:	ldr	x2, [x0, #40]
      80:	add	x4, x2, #0x1
      84:	str	x4, [x0, #40]
      88:	strb	w1, [x3, x2]
      8c:	ret

0000000000000090 <longest_match>:
      90:	ldr	x15, [x0, #96]
      94:	ldr	w2, [x0, #172]
      98:	ldp	w4, w14, [x0, #184]
      9c:	mov	w5, w2
      a0:	ldr	w3, [x0, #80]
      a4:	add	x13, x15, w2, uxtw
      a8:	add	w7, w2, #0x106
      ac:	add	x5, x5, #0x102
      b0:	sub	w6, w3, #0x106
      b4:	sub	w7, w7, w3
      b8:	cmp	w2, w6
      bc:	add	x2, x13, w4, sxtw
      c0:	csel	w7, w7, wzr, hi  // hi = pmore
      c4:	ldr	w11, [x0, #88]
      c8:	ldr	w16, [x0, #208]
      cc:	add	x5, x15, x5
      d0:	ldurb	w8, [x2, #-1]
      d4:	ldr	w2, [x0, #204]
      d8:	ldrb	w9, [x13, w4, sxtw]
      dc:	cmp	w4, w2
      e0:	ldr	x10, [x0, #112]
      e4:	b.cc	ec <longest_match+0x5c>  // b.lo, b.ul, b.last
      e8:	lsr	w14, w14, #2
      ec:	ldr	w6, [x0, #180]
      f0:	mov	w12, #0x102                 	// #258
      f4:	cmp	w6, w16
      f8:	csel	w16, w16, w6, cs  // cs = hs, nlast
      fc:	add	x3, x15, w1, uxtw
     100:	mov	w17, w1
     104:	sxtw	x2, w4
     108:	ldrb	w18, [x3, w4, sxtw]
     10c:	cmp	w18, w9
     110:	b.ne	19c <longest_match+0x10c>  // b.any
     114:	add	x2, x3, x2
     118:	ldurb	w2, [x2, #-1]
     11c:	cmp	w2, w8
     120:	b.ne	19c <longest_match+0x10c>  // b.any
     124:	ldrb	w17, [x15, x17]
     128:	ldrb	w2, [x13]
     12c:	cmp	w17, w2
     130:	b.ne	19c <longest_match+0x10c>  // b.any
     134:	ldrb	w17, [x3, #1]
     138:	ldrb	w2, [x13, #1]
     13c:	cmp	w17, w2
     140:	b.ne	19c <longest_match+0x10c>  // b.any
     144:	add	x2, x13, #0x2
     148:	add	x3, x3, #0x2
     14c:	ldrb	w18, [x2, #1]
     150:	ldrb	w17, [x3, #1]
     154:	cmp	w18, w17
     158:	b.ne	254 <longest_match+0x1c4>  // b.any
     15c:	ldrb	w18, [x2, #2]
     160:	ldrb	w17, [x3, #2]
     164:	cmp	w18, w17
     168:	b.eq	1c0 <longest_match+0x130>  // b.none
     16c:	add	x2, x2, #0x2
     170:	sub	x2, x5, x2
     174:	sub	w2, w12, w2
     178:	cmp	w4, w2
     17c:	b.ge	19c <longest_match+0x10c>  // b.tcont
     180:	str	w1, [x0, #176]
     184:	cmp	w2, w16
     188:	b.ge	25c <longest_match+0x1cc>  // b.tcont
     18c:	add	x3, x13, w2, sxtw
     190:	ldrb	w9, [x13, w2, sxtw]
     194:	mov	w4, w2
     198:	ldurb	w8, [x3, #-1]
     19c:	and	w1, w1, w11
     1a0:	ldrh	w1, [x10, x1, lsl #1]
     1a4:	cmp	w7, w1
     1a8:	b.cs	1b4 <longest_match+0x124>  // b.hs, b.nlast
     1ac:	subs	w14, w14, #0x1
     1b0:	b.ne	fc <longest_match+0x6c>  // b.any
     1b4:	cmp	w4, w6
     1b8:	csel	w0, w4, w6, ls  // ls = plast
     1bc:	ret
     1c0:	ldrb	w18, [x2, #3]
     1c4:	ldrb	w17, [x3, #3]
     1c8:	cmp	w18, w17
     1cc:	b.eq	1d8 <longest_match+0x148>  // b.none
     1d0:	add	x2, x2, #0x3
     1d4:	b	170 <longest_match+0xe0>
     1d8:	ldrb	w18, [x2, #4]
     1dc:	ldrb	w17, [x3, #4]
     1e0:	cmp	w18, w17
     1e4:	b.eq	1f0 <longest_match+0x160>  // b.none
     1e8:	add	x2, x2, #0x4
     1ec:	b	170 <longest_match+0xe0>
     1f0:	ldrb	w18, [x2, #5]
     1f4:	ldrb	w17, [x3, #5]
     1f8:	cmp	w18, w17
     1fc:	b.eq	208 <longest_match+0x178>  // b.none
     200:	add	x2, x2, #0x5
     204:	b	170 <longest_match+0xe0>
     208:	ldrb	w18, [x2, #6]
     20c:	ldrb	w17, [x3, #6]
     210:	cmp	w18, w17
     214:	b.eq	220 <longest_match+0x190>  // b.none
     218:	add	x2, x2, #0x6
     21c:	b	170 <longest_match+0xe0>
     220:	ldrb	w18, [x2, #7]
     224:	ldrb	w17, [x3, #7]
     228:	cmp	w18, w17
     22c:	b.eq	238 <longest_match+0x1a8>  // b.none
     230:	add	x2, x2, #0x7
     234:	b	170 <longest_match+0xe0>
     238:	ldrb	w18, [x2, #8]!
     23c:	ldrb	w17, [x3, #8]!
     240:	cmp	w18, w17
     244:	b.ne	170 <longest_match+0xe0>  // b.any
     248:	cmp	x5, x2
     24c:	b.hi	14c <longest_match+0xbc>  // b.pmore
     250:	b	170 <longest_match+0xe0>
     254:	add	x2, x2, #0x1
     258:	b	170 <longest_match+0xe0>
     25c:	mov	w4, w2
     260:	b	1b4 <longest_match+0x124>

0000000000000264 <read_buf>:
     264:	stp	x29, x30, [sp, #-48]!
     268:	mov	x29, sp
     26c:	stp	x19, x20, [sp, #16]
     270:	mov	x19, x0
     274:	ldr	w0, [x0, #8]
     278:	str	x21, [sp, #32]
     27c:	cmp	w0, w2
     280:	csel	w20, w0, w2, ls  // ls = plast
     284:	cbz	w20, 2e8 <read_buf+0x84>
     288:	mov	x3, x1
     28c:	sub	w0, w0, w20
     290:	ldr	x1, [x19]
     294:	str	w0, [x19, #8]
     298:	mov	w21, w20
     29c:	mov	x0, x3
     2a0:	mov	x2, x21
     2a4:	bl	0 <memcpy>
     2a8:	mov	x3, x0
     2ac:	ldr	x0, [x19, #56]
     2b0:	ldr	w0, [x0, #48]
     2b4:	cmp	w0, #0x1
     2b8:	b.ne	2fc <read_buf+0x98>  // b.any
     2bc:	ldr	x0, [x19, #96]
     2c0:	mov	w2, w20
     2c4:	mov	x1, x3
     2c8:	bl	0 <adler32>
     2cc:	str	x0, [x19, #96]
     2d0:	ldr	x0, [x19]
     2d4:	ldr	x2, [x19, #16]
     2d8:	add	x0, x0, x21
     2dc:	str	x0, [x19]
     2e0:	add	x2, x2, x21
     2e4:	str	x2, [x19, #16]
     2e8:	mov	w0, w20
     2ec:	ldp	x19, x20, [sp, #16]
     2f0:	ldr	x21, [sp, #32]
     2f4:	ldp	x29, x30, [sp], #48
     2f8:	ret
     2fc:	cmp	w0, #0x2
     300:	b.ne	2d0 <read_buf+0x6c>  // b.any
     304:	ldr	x0, [x19, #96]
     308:	mov	w2, w20
     30c:	mov	x1, x3
     310:	bl	0 <crc32>
     314:	b	2cc <read_buf+0x68>

0000000000000318 <fill_window>:
     318:	stp	x29, x30, [sp, #-48]!
     31c:	mov	x29, sp
     320:	stp	x21, x22, [sp, #32]
     324:	ldr	w22, [x0, #80]
     328:	stp	x19, x20, [sp, #16]
     32c:	mov	x19, x0
     330:	mov	w21, w22
     334:	ldr	w0, [x19, #80]
     338:	ldr	x3, [x19, #104]
     33c:	add	w0, w22, w0
     340:	ldr	w20, [x19, #180]
     344:	sub	w0, w0, #0x106
     348:	ldr	w1, [x19, #172]
     34c:	add	w2, w20, w22
     350:	sub	w20, w3, w20
     354:	cmp	w1, w0
     358:	sub	w20, w20, w1
     35c:	b.cc	3a4 <fill_window+0x8c>  // b.lo, b.ul, b.last
     360:	ldr	x0, [x19, #96]
     364:	sub	w1, w1, w3
     368:	add	w2, w1, w2
     36c:	add	w20, w20, w22
     370:	add	x1, x0, x21
     374:	bl	0 <memcpy>
     378:	ldr	w0, [x19, #176]
     37c:	sub	w0, w0, w22
     380:	str	w0, [x19, #176]
     384:	ldr	w0, [x19, #172]
     388:	sub	w0, w0, w22
     38c:	str	w0, [x19, #172]
     390:	ldr	x0, [x19, #152]
     394:	sub	x0, x0, x21
     398:	str	x0, [x19, #152]
     39c:	mov	x0, x19
     3a0:	bl	0 <slide_hash>
     3a4:	ldr	x0, [x19]
     3a8:	ldr	w1, [x0, #8]
     3ac:	cbz	w1, 3f0 <fill_window+0xd8>
     3b0:	ldr	x3, [x19, #96]
     3b4:	ldr	w2, [x19, #180]
     3b8:	ldr	w1, [x19, #172]
     3bc:	add	x1, x1, x2
     3c0:	mov	w2, w20
     3c4:	add	x1, x3, x1
     3c8:	bl	264 <read_buf>
     3cc:	ldr	w1, [x19, #180]
     3d0:	ldr	w2, [x19, #5932]
     3d4:	add	w0, w0, w1
     3d8:	str	w0, [x19, #180]
     3dc:	add	w1, w0, w2
     3e0:	cmp	w1, #0x2
     3e4:	b.hi	450 <fill_window+0x138>  // b.pmore
     3e8:	cmp	w0, #0x105
     3ec:	b.ls	4dc <fill_window+0x1c4>  // b.plast
     3f0:	ldr	x2, [x19, #104]
     3f4:	ldr	x0, [x19, #5944]
     3f8:	cmp	x0, x2
     3fc:	b.cs	440 <fill_window+0x128>  // b.hs, b.nlast
     400:	ldr	w20, [x19, #172]
     404:	ldr	w21, [x19, #180]
     408:	add	x21, x20, x21
     40c:	cmp	x0, x21
     410:	b.cs	4ec <fill_window+0x1d4>  // b.hs, b.nlast
     414:	sub	x2, x2, x21
     418:	mov	x20, #0x102                 	// #258
     41c:	cmp	x2, #0x102
     420:	mov	w1, #0x0                   	// #0
     424:	ldr	x0, [x19, #96]
     428:	csel	x20, x2, x20, ls  // ls = plast
     42c:	mov	x2, x20
     430:	add	x20, x20, x21
     434:	add	x0, x0, x21
     438:	bl	0 <memset>
     43c:	str	x20, [x19, #5944]
     440:	ldp	x19, x20, [sp, #16]
     444:	ldp	x21, x22, [sp, #32]
     448:	ldp	x29, x30, [sp], #48
     44c:	ret
     450:	ldr	w1, [x19, #172]
     454:	ldr	x4, [x19, #96]
     458:	sub	w3, w1, w2
     45c:	sub	w1, w1, w2
     460:	ldp	w7, w6, [x19, #140]
     464:	ldrb	w2, [x4, x1]
     468:	add	w1, w3, #0x1
     46c:	str	w2, [x19, #128]
     470:	ldrb	w1, [x4, x1]
     474:	lsl	w2, w2, w6
     478:	eor	w1, w1, w2
     47c:	and	w1, w1, w7
     480:	str	w1, [x19, #128]
     484:	ldr	w1, [x19, #5932]
     488:	cbz	w1, 3e8 <fill_window+0xd0>
     48c:	add	w2, w3, #0x2
     490:	ldr	w5, [x19, #128]
     494:	ldp	x9, x8, [x19, #112]
     498:	sub	w1, w1, #0x1
     49c:	ldrb	w2, [x4, x2]
     4a0:	lsl	w5, w5, w6
     4a4:	eor	w2, w2, w5
     4a8:	ldr	w5, [x19, #88]
     4ac:	and	w2, w2, w7
     4b0:	and	w5, w3, w5
     4b4:	ldrh	w10, [x8, w2, uxtw #1]
     4b8:	str	w2, [x19, #128]
     4bc:	strh	w10, [x9, x5, lsl #1]
     4c0:	strh	w3, [x8, w2, uxtw #1]
     4c4:	add	w3, w3, #0x1
     4c8:	str	w1, [x19, #5932]
     4cc:	add	w1, w0, w1
     4d0:	cmp	w1, #0x2
     4d4:	b.hi	484 <fill_window+0x16c>  // b.pmore
     4d8:	b	3e8 <fill_window+0xd0>
     4dc:	ldr	x0, [x19]
     4e0:	ldr	w0, [x0, #8]
     4e4:	cbnz	w0, 334 <fill_window+0x1c>
     4e8:	b	3f0 <fill_window+0xd8>
     4ec:	add	x1, x21, #0x102
     4f0:	cmp	x0, x1
     4f4:	b.cs	440 <fill_window+0x128>  // b.hs, b.nlast
     4f8:	sub	x20, x21, x0
     4fc:	sub	x2, x2, x0
     500:	add	x20, x20, #0x102
     504:	mov	w1, #0x0                   	// #0
     508:	ldr	x3, [x19, #96]
     50c:	cmp	x2, x20
     510:	csel	x20, x2, x20, ls  // ls = plast
     514:	mov	w2, w20
     518:	add	x0, x3, x0
     51c:	bl	0 <memset>
     520:	ldr	x2, [x19, #5944]
     524:	add	x20, x2, x20
     528:	b	43c <fill_window+0x124>

000000000000052c <flush_pending>:
     52c:	stp	x29, x30, [sp, #-48]!
     530:	mov	x29, sp
     534:	stp	x19, x20, [sp, #16]
     538:	mov	x19, x0
     53c:	ldr	x20, [x0, #56]
     540:	stp	x21, x22, [sp, #32]
     544:	mov	x0, x20
     548:	bl	0 <_tr_flush_bits>
     54c:	ldr	x0, [x20, #40]
     550:	ldr	w21, [x19, #32]
     554:	cmp	w21, w0
     558:	csel	w21, w21, w0, ls  // ls = plast
     55c:	cbz	w21, 5bc <flush_pending+0x90>
     560:	ldr	x0, [x19, #24]
     564:	mov	w22, w21
     568:	ldr	x1, [x20, #32]
     56c:	mov	x2, x22
     570:	bl	0 <memcpy>
     574:	ldr	x0, [x19, #24]
     578:	ldr	x2, [x20, #40]
     57c:	add	x0, x0, x22
     580:	str	x0, [x19, #24]
     584:	ldr	x0, [x20, #32]
     588:	add	x0, x0, x22
     58c:	str	x0, [x20, #32]
     590:	ldr	x0, [x19, #40]
     594:	add	x0, x0, x22
     598:	str	x0, [x19, #40]
     59c:	ldr	w0, [x19, #32]
     5a0:	sub	x22, x2, x22
     5a4:	sub	w21, w0, w21
     5a8:	str	w21, [x19, #32]
     5ac:	str	x22, [x20, #40]
     5b0:	cbnz	x22, 5bc <flush_pending+0x90>
     5b4:	ldr	x0, [x20, #16]
     5b8:	str	x0, [x20, #32]
     5bc:	ldp	x19, x20, [sp, #16]
     5c0:	ldp	x21, x22, [sp, #32]
     5c4:	ldp	x29, x30, [sp], #48
     5c8:	ret

00000000000005cc <deflate_slow>:
     5cc:	stp	x29, x30, [sp, #-48]!
     5d0:	mov	x29, sp
     5d4:	stp	x19, x20, [sp, #16]
     5d8:	mov	x19, x0
     5dc:	mov	w20, w1
     5e0:	stp	x21, x22, [sp, #32]
     5e4:	adrp	x22, 0 <_length_code>
     5e8:	adrp	x21, 0 <_dist_code>
     5ec:	add	x22, x22, #0x0
     5f0:	add	x21, x21, #0x0
     5f4:	ldr	w0, [x19, #180]
     5f8:	cmp	w0, #0x105
     5fc:	b.ls	804 <deflate_slow+0x238>  // b.plast
     600:	ldr	w0, [x19, #180]
     604:	ldr	w2, [x19, #172]
     608:	cmp	w0, #0x2
     60c:	b.hi	8e4 <deflate_slow+0x318>  // b.pmore
     610:	mov	w1, #0x0                   	// #0
     614:	ldr	w3, [x19, #176]
     618:	ldr	w0, [x19, #160]
     61c:	str	w3, [x19, #164]
     620:	mov	w3, #0x2                   	// #2
     624:	str	w3, [x19, #160]
     628:	str	w0, [x19, #184]
     62c:	cbz	w1, 690 <deflate_slow+0xc4>
     630:	ldr	w3, [x19, #192]
     634:	cmp	w0, w3
     638:	b.cs	690 <deflate_slow+0xc4>  // b.hs, b.nlast
     63c:	ldr	w0, [x19, #80]
     640:	sub	w2, w2, w1
     644:	sub	w0, w0, #0x106
     648:	cmp	w2, w0
     64c:	b.hi	690 <deflate_slow+0xc4>  // b.pmore
     650:	mov	x0, x19
     654:	bl	90 <longest_match>
     658:	str	w0, [x19, #160]
     65c:	cmp	w0, #0x5
     660:	b.hi	690 <deflate_slow+0xc4>  // b.pmore
     664:	ldr	w1, [x19, #200]
     668:	cmp	w1, #0x1
     66c:	b.eq	688 <deflate_slow+0xbc>  // b.none
     670:	cmp	w0, #0x3
     674:	b.ne	690 <deflate_slow+0xc4>  // b.any
     678:	ldp	w0, w1, [x19, #172]
     67c:	sub	w0, w0, w1
     680:	cmp	w0, #0x1, lsl #12
     684:	b.ls	690 <deflate_slow+0xc4>  // b.plast
     688:	mov	w0, #0x2                   	// #2
     68c:	str	w0, [x19, #160]
     690:	ldr	w1, [x19, #184]
     694:	ldr	w0, [x19, #172]
     698:	cmp	w1, #0x2
     69c:	b.ls	93c <deflate_slow+0x370>  // b.plast
     6a0:	ldr	w2, [x19, #160]
     6a4:	cmp	w1, w2
     6a8:	b.cc	93c <deflate_slow+0x370>  // b.lo, b.ul, b.last
     6ac:	ldr	w2, [x19, #164]
     6b0:	sub	w1, w1, #0x3
     6b4:	ldr	w3, [x19, #180]
     6b8:	and	w1, w1, #0xff
     6bc:	ldr	x4, [x19, #5904]
     6c0:	add	w3, w0, w3
     6c4:	sub	w0, w0, w2
     6c8:	ldr	w2, [x19, #5900]
     6cc:	and	w0, w0, #0xffff
     6d0:	sub	w3, w3, #0x3
     6d4:	sub	w5, w0, #0x1
     6d8:	sub	w0, w0, #0x2
     6dc:	and	w0, w0, #0xffff
     6e0:	strh	w5, [x4, w2, uxtw #1]
     6e4:	add	w5, w2, #0x1
     6e8:	ldr	x4, [x19, #5888]
     6ec:	str	w5, [x19, #5900]
     6f0:	cmp	w0, #0xff
     6f4:	strb	w1, [x4, w2, uxtw]
     6f8:	ldrb	w1, [x22, w1, sxtw]
     6fc:	add	x1, x19, x1, lsl #2
     700:	ldrh	w2, [x1, #1240]
     704:	add	w2, w2, #0x1
     708:	strh	w2, [x1, #1240]
     70c:	b.hi	928 <deflate_slow+0x35c>  // b.pmore
     710:	ldrb	w0, [x21, w0, sxtw]
     714:	add	x0, x19, w0, sxtw #2
     718:	ldrh	w1, [x0, #2504]
     71c:	add	w1, w1, #0x1
     720:	strh	w1, [x0, #2504]
     724:	ldp	w0, w1, [x19, #180]
     728:	ldr	w4, [x19, #5896]
     72c:	ldr	w7, [x19, #5900]
     730:	add	w0, w0, #0x1
     734:	sub	w4, w4, #0x1
     738:	sub	w0, w0, w1
     73c:	sub	w1, w1, #0x2
     740:	stp	w0, w1, [x19, #180]
     744:	ldr	w2, [x19, #172]
     748:	add	w1, w2, #0x1
     74c:	str	w1, [x19, #172]
     750:	cmp	w1, w3
     754:	b.hi	79c <deflate_slow+0x1d0>  // b.pmore
     758:	ldr	x5, [x19, #96]
     75c:	add	w0, w2, #0x3
     760:	ldr	w6, [x19, #144]
     764:	ldr	x8, [x19, #112]
     768:	ldrb	w0, [x5, x0]
     76c:	ldr	w5, [x19, #128]
     770:	lsl	w5, w5, w6
     774:	eor	w0, w0, w5
     778:	ldr	w5, [x19, #140]
     77c:	ldr	x6, [x19, #120]
     780:	and	w0, w0, w5
     784:	ldr	w5, [x19, #88]
     788:	and	w5, w1, w5
     78c:	ldrh	w9, [x6, w0, uxtw #1]
     790:	str	w0, [x19, #128]
     794:	strh	w9, [x8, x5, lsl #1]
     798:	strh	w1, [x6, w0, uxtw #1]
     79c:	ldr	w0, [x19, #184]
     7a0:	sub	w0, w0, #0x1
     7a4:	str	w0, [x19, #184]
     7a8:	cbnz	w0, 744 <deflate_slow+0x178>
     7ac:	mov	w0, #0x2                   	// #2
     7b0:	add	w2, w2, w0
     7b4:	str	w0, [x19, #160]
     7b8:	cmp	w7, w4
     7bc:	stp	wzr, w2, [x19, #168]
     7c0:	b.ne	5f4 <deflate_slow+0x28>  // b.any
     7c4:	ldr	x0, [x19, #152]
     7c8:	tbnz	x0, #63, 934 <deflate_slow+0x368>
     7cc:	ldr	x1, [x19, #96]
     7d0:	add	x1, x1, w0, uxtw
     7d4:	sub	x2, x2, x0
     7d8:	mov	w3, #0x0                   	// #0
     7dc:	mov	x0, x19
     7e0:	bl	0 <_tr_flush_block>
     7e4:	ldr	w0, [x19, #172]
     7e8:	str	x0, [x19, #152]
     7ec:	ldr	x0, [x19]
     7f0:	bl	52c <flush_pending>
     7f4:	ldr	x0, [x19]
     7f8:	ldr	w0, [x0, #32]
     7fc:	cbnz	w0, 5f4 <deflate_slow+0x28>
     800:	b	81c <deflate_slow+0x250>
     804:	mov	x0, x19
     808:	bl	318 <fill_window>
     80c:	ldr	w0, [x19, #180]
     810:	cmp	w0, #0x105
     814:	b.hi	600 <deflate_slow+0x34>  // b.pmore
     818:	cbnz	w20, 830 <deflate_slow+0x264>
     81c:	mov	w0, #0x0                   	// #0
     820:	ldp	x19, x20, [sp, #16]
     824:	ldp	x21, x22, [sp, #32]
     828:	ldp	x29, x30, [sp], #48
     82c:	ret
     830:	cbnz	w0, 600 <deflate_slow+0x34>
     834:	ldr	w0, [x19, #168]
     838:	cbz	w0, 87c <deflate_slow+0x2b0>
     83c:	ldr	w0, [x19, #172]
     840:	ldr	x1, [x19, #96]
     844:	sub	w0, w0, #0x1
     848:	ldr	x2, [x19, #5904]
     84c:	ldrb	w0, [x1, x0]
     850:	ldr	w1, [x19, #5900]
     854:	add	w3, w1, #0x1
     858:	strh	wzr, [x2, w1, uxtw #1]
     85c:	ldr	x2, [x19, #5888]
     860:	str	w3, [x19, #5900]
     864:	strb	w0, [x2, w1, uxtw]
     868:	add	x0, x19, w0, uxtb #2
     86c:	ldrh	w1, [x0, #212]
     870:	add	w1, w1, #0x1
     874:	strh	w1, [x0, #212]
     878:	str	wzr, [x19, #168]
     87c:	ldr	w0, [x19, #172]
     880:	mov	w1, #0x2                   	// #2
     884:	cmp	w0, #0x2
     888:	csel	w1, w0, w1, ls  // ls = plast
     88c:	str	w1, [x19, #5932]
     890:	cmp	w20, #0x4
     894:	b.ne	a0c <deflate_slow+0x440>  // b.any
     898:	ldr	x2, [x19, #152]
     89c:	tbnz	x2, #63, a04 <deflate_slow+0x438>
     8a0:	ldr	x1, [x19, #96]
     8a4:	add	x1, x1, w2, uxtw
     8a8:	mov	w0, w0
     8ac:	mov	w3, #0x1                   	// #1
     8b0:	sub	x2, x0, x2
     8b4:	mov	x0, x19
     8b8:	bl	0 <_tr_flush_block>
     8bc:	ldr	w0, [x19, #172]
     8c0:	str	x0, [x19, #152]
     8c4:	ldr	x0, [x19]
     8c8:	bl	52c <flush_pending>
     8cc:	ldr	x0, [x19]
     8d0:	ldr	w0, [x0, #32]
     8d4:	cmp	w0, #0x0
     8d8:	cset	w0, ne  // ne = any
     8dc:	add	w0, w0, #0x2
     8e0:	b	820 <deflate_slow+0x254>
     8e4:	ldr	x1, [x19, #96]
     8e8:	add	w0, w2, #0x2
     8ec:	ldr	w3, [x19, #144]
     8f0:	ldp	x5, x4, [x19, #112]
     8f4:	ldrb	w0, [x1, x0]
     8f8:	ldr	w1, [x19, #128]
     8fc:	lsl	w1, w1, w3
     900:	eor	w0, w0, w1
     904:	ldr	w1, [x19, #140]
     908:	ldr	w3, [x19, #88]
     90c:	and	w0, w0, w1
     910:	and	w3, w2, w3
     914:	ldrh	w1, [x4, w0, uxtw #1]
     918:	str	w0, [x19, #128]
     91c:	strh	w1, [x5, x3, lsl #1]
     920:	strh	w2, [x4, w0, uxtw #1]
     924:	b	614 <deflate_slow+0x48>
     928:	lsr	w0, w0, #7
     92c:	add	w0, w0, #0x100
     930:	b	710 <deflate_slow+0x144>
     934:	mov	x1, #0x0                   	// #0
     938:	b	7d4 <deflate_slow+0x208>
     93c:	ldr	w1, [x19, #168]
     940:	cbz	w1, 9e8 <deflate_slow+0x41c>
     944:	ldr	x1, [x19, #96]
     948:	sub	w0, w0, #0x1
     94c:	ldr	x2, [x19, #5904]
     950:	ldrb	w0, [x1, x0]
     954:	ldr	w1, [x19, #5900]
     958:	add	w3, w1, #0x1
     95c:	strh	wzr, [x2, w1, uxtw #1]
     960:	ldr	x2, [x19, #5888]
     964:	str	w3, [x19, #5900]
     968:	strb	w0, [x2, w1, uxtw]
     96c:	add	x0, x19, w0, uxtb #2
     970:	ldrh	w1, [x0, #212]
     974:	add	w1, w1, #0x1
     978:	strh	w1, [x0, #212]
     97c:	ldr	w0, [x19, #5896]
     980:	ldr	w1, [x19, #5900]
     984:	sub	w0, w0, #0x1
     988:	cmp	w1, w0
     98c:	b.ne	9c4 <deflate_slow+0x3f8>  // b.any
     990:	ldr	x0, [x19, #152]
     994:	tbnz	x0, #63, 9e0 <deflate_slow+0x414>
     998:	ldr	x1, [x19, #96]
     99c:	add	x1, x1, w0, uxtw
     9a0:	ldr	w2, [x19, #172]
     9a4:	mov	w3, #0x0                   	// #0
     9a8:	sub	x2, x2, x0
     9ac:	mov	x0, x19
     9b0:	bl	0 <_tr_flush_block>
     9b4:	ldr	w0, [x19, #172]
     9b8:	str	x0, [x19, #152]
     9bc:	ldr	x0, [x19]
     9c0:	bl	52c <flush_pending>
     9c4:	ldr	w0, [x19, #172]
     9c8:	add	w0, w0, #0x1
     9cc:	str	w0, [x19, #172]
     9d0:	ldr	w0, [x19, #180]
     9d4:	sub	w0, w0, #0x1
     9d8:	str	w0, [x19, #180]
     9dc:	b	7f4 <deflate_slow+0x228>
     9e0:	mov	x1, #0x0                   	// #0
     9e4:	b	9a0 <deflate_slow+0x3d4>
     9e8:	mov	w1, #0x1                   	// #1
     9ec:	add	w0, w0, w1
     9f0:	stp	w1, w0, [x19, #168]
     9f4:	ldr	w0, [x19, #180]
     9f8:	sub	w0, w0, #0x1
     9fc:	str	w0, [x19, #180]
     a00:	b	5f4 <deflate_slow+0x28>
     a04:	mov	x1, #0x0                   	// #0
     a08:	b	8a8 <deflate_slow+0x2dc>
     a0c:	ldr	w1, [x19, #5900]
     a10:	cbz	w1, a64 <deflate_slow+0x498>
     a14:	ldr	x2, [x19, #152]
     a18:	tbnz	x2, #63, a5c <deflate_slow+0x490>
     a1c:	ldr	x1, [x19, #96]
     a20:	add	x1, x1, w2, uxtw
     a24:	mov	w0, w0
     a28:	mov	w3, #0x0                   	// #0
     a2c:	sub	x2, x0, x2
     a30:	mov	x0, x19
     a34:	bl	0 <_tr_flush_block>
     a38:	ldr	w0, [x19, #172]
     a3c:	str	x0, [x19, #152]
     a40:	ldr	x0, [x19]
     a44:	bl	52c <flush_pending>
     a48:	ldr	x0, [x19]
     a4c:	ldr	w0, [x0, #32]
     a50:	cmp	w0, #0x0
     a54:	cset	w0, ne  // ne = any
     a58:	b	820 <deflate_slow+0x254>
     a5c:	mov	x1, #0x0                   	// #0
     a60:	b	a24 <deflate_slow+0x458>
     a64:	mov	w0, #0x1                   	// #1
     a68:	b	820 <deflate_slow+0x254>

0000000000000a6c <deflate_fast>:
     a6c:	stp	x29, x30, [sp, #-48]!
     a70:	mov	x29, sp
     a74:	stp	x19, x20, [sp, #16]
     a78:	mov	x19, x0
     a7c:	mov	w20, w1
     a80:	stp	x21, x22, [sp, #32]
     a84:	adrp	x22, 0 <_length_code>
     a88:	adrp	x21, 0 <_dist_code>
     a8c:	add	x22, x22, #0x0
     a90:	add	x21, x21, #0x0
     a94:	ldr	w0, [x19, #180]
     a98:	cmp	w0, #0x105
     a9c:	b.ls	c14 <deflate_fast+0x1a8>  // b.plast
     aa0:	ldr	w0, [x19, #180]
     aa4:	cmp	w0, #0x2
     aa8:	b.hi	cac <deflate_fast+0x240>  // b.pmore
     aac:	ldr	w2, [x19, #5900]
     ab0:	ldr	w1, [x19, #160]
     ab4:	mov	w3, w2
     ab8:	ldr	w0, [x19, #172]
     abc:	ubfiz	x5, x2, #1, #32
     ac0:	cmp	w1, #0x2
     ac4:	add	w2, w2, #0x1
     ac8:	ldr	x4, [x19, #5888]
     acc:	ldr	x6, [x19, #5904]
     ad0:	b.ls	d58 <deflate_fast+0x2ec>  // b.plast
     ad4:	ldr	w7, [x19, #176]
     ad8:	sub	w1, w1, #0x3
     adc:	and	w1, w1, #0xff
     ae0:	sub	w0, w0, w7
     ae4:	and	w0, w0, #0xffff
     ae8:	strh	w0, [x6, x5]
     aec:	str	w2, [x19, #5900]
     af0:	sub	w0, w0, #0x1
     af4:	strb	w1, [x4, x3]
     af8:	and	w0, w0, #0xffff
     afc:	ldrb	w1, [x22, w1, sxtw]
     b00:	cmp	w0, #0xff
     b04:	add	x1, x19, x1, lsl #2
     b08:	ldrh	w2, [x1, #1240]
     b0c:	add	w2, w2, #0x1
     b10:	strh	w2, [x1, #1240]
     b14:	b.hi	d18 <deflate_fast+0x2ac>  // b.pmore
     b18:	ldrb	w0, [x21, w0, sxtw]
     b1c:	add	x0, x19, w0, sxtw #2
     b20:	ldrh	w1, [x0, #2504]
     b24:	add	w1, w1, #0x1
     b28:	strh	w1, [x0, #2504]
     b2c:	ldr	w0, [x19, #5896]
     b30:	ldr	w1, [x19, #5900]
     b34:	sub	w0, w0, #0x1
     b38:	ldr	w2, [x19, #180]
     b3c:	cmp	w0, w1
     b40:	ldr	w0, [x19, #160]
     b44:	ldr	w1, [x19, #192]
     b48:	cset	w5, eq  // eq = none
     b4c:	sub	w2, w2, w0
     b50:	str	w2, [x19, #180]
     b54:	ldp	w6, w7, [x19, #140]
     b58:	cmp	w0, w1
     b5c:	ldr	x3, [x19, #96]
     b60:	b.hi	d24 <deflate_fast+0x2b8>  // b.pmore
     b64:	cmp	w2, #0x2
     b68:	b.ls	d24 <deflate_fast+0x2b8>  // b.plast
     b6c:	ldp	x9, x8, [x19, #112]
     b70:	sub	w0, w0, #0x1
     b74:	ldr	w11, [x19, #88]
     b78:	str	w0, [x19, #160]
     b7c:	ldr	w1, [x19, #172]
     b80:	ldr	w4, [x19, #128]
     b84:	add	w0, w1, #0x3
     b88:	add	w2, w1, #0x1
     b8c:	str	w2, [x19, #172]
     b90:	lsl	w4, w4, w7
     b94:	ldrb	w0, [x3, x0]
     b98:	eor	w0, w0, w4
     b9c:	and	w4, w2, w11
     ba0:	and	w0, w0, w6
     ba4:	ldrh	w10, [x8, w0, uxtw #1]
     ba8:	str	w0, [x19, #128]
     bac:	strh	w10, [x9, x4, lsl #1]
     bb0:	strh	w2, [x8, w0, uxtw #1]
     bb4:	ldr	w2, [x19, #160]
     bb8:	sub	w2, w2, #0x1
     bbc:	str	w2, [x19, #160]
     bc0:	cbnz	w2, b7c <deflate_fast+0x110>
     bc4:	add	w1, w1, #0x2
     bc8:	str	w1, [x19, #172]
     bcc:	cbz	w5, a94 <deflate_fast+0x28>
     bd0:	ldr	x0, [x19, #152]
     bd4:	tbnz	x0, #63, dac <deflate_fast+0x340>
     bd8:	ldr	x1, [x19, #96]
     bdc:	add	x1, x1, w0, uxtw
     be0:	ldr	w2, [x19, #172]
     be4:	mov	w3, #0x0                   	// #0
     be8:	sub	x2, x2, x0
     bec:	mov	x0, x19
     bf0:	bl	0 <_tr_flush_block>
     bf4:	ldr	w0, [x19, #172]
     bf8:	str	x0, [x19, #152]
     bfc:	ldr	x0, [x19]
     c00:	bl	52c <flush_pending>
     c04:	ldr	x0, [x19]
     c08:	ldr	w0, [x0, #32]
     c0c:	cbnz	w0, a94 <deflate_fast+0x28>
     c10:	b	c2c <deflate_fast+0x1c0>
     c14:	mov	x0, x19
     c18:	bl	318 <fill_window>
     c1c:	ldr	w0, [x19, #180]
     c20:	cmp	w0, #0x105
     c24:	b.hi	aa0 <deflate_fast+0x34>  // b.pmore
     c28:	cbnz	w20, c40 <deflate_fast+0x1d4>
     c2c:	mov	w0, #0x0                   	// #0
     c30:	ldp	x19, x20, [sp, #16]
     c34:	ldp	x21, x22, [sp, #32]
     c38:	ldp	x29, x30, [sp], #48
     c3c:	ret
     c40:	cbnz	w0, aa0 <deflate_fast+0x34>
     c44:	ldr	w0, [x19, #172]
     c48:	mov	w1, #0x2                   	// #2
     c4c:	cmp	w0, #0x2
     c50:	csel	w1, w0, w1, ls  // ls = plast
     c54:	str	w1, [x19, #5932]
     c58:	cmp	w20, #0x4
     c5c:	b.ne	dbc <deflate_fast+0x350>  // b.any
     c60:	ldr	x2, [x19, #152]
     c64:	tbnz	x2, #63, db4 <deflate_fast+0x348>
     c68:	ldr	x1, [x19, #96]
     c6c:	add	x1, x1, w2, uxtw
     c70:	mov	w0, w0
     c74:	mov	w3, #0x1                   	// #1
     c78:	sub	x2, x0, x2
     c7c:	mov	x0, x19
     c80:	bl	0 <_tr_flush_block>
     c84:	ldr	w0, [x19, #172]
     c88:	str	x0, [x19, #152]
     c8c:	ldr	x0, [x19]
     c90:	bl	52c <flush_pending>
     c94:	ldr	x0, [x19]
     c98:	ldr	w0, [x0, #32]
     c9c:	cmp	w0, #0x0
     ca0:	cset	w0, ne  // ne = any
     ca4:	add	w0, w0, #0x2
     ca8:	b	c30 <deflate_fast+0x1c4>
     cac:	ldr	w2, [x19, #172]
     cb0:	ldr	x1, [x19, #96]
     cb4:	add	w0, w2, #0x2
     cb8:	ldr	w3, [x19, #144]
     cbc:	ldp	x5, x4, [x19, #112]
     cc0:	ldrb	w0, [x1, x0]
     cc4:	ldr	w1, [x19, #128]
     cc8:	lsl	w1, w1, w3
     ccc:	eor	w0, w0, w1
     cd0:	ldr	w1, [x19, #140]
     cd4:	ldr	w3, [x19, #88]
     cd8:	and	w0, w0, w1
     cdc:	and	w3, w2, w3
     ce0:	ldrh	w1, [x4, w0, uxtw #1]
     ce4:	str	w0, [x19, #128]
     ce8:	strh	w1, [x5, x3, lsl #1]
     cec:	strh	w2, [x4, w0, uxtw #1]
     cf0:	cbz	w1, aac <deflate_fast+0x40>
     cf4:	ldr	w0, [x19, #80]
     cf8:	sub	w2, w2, w1
     cfc:	sub	w0, w0, #0x106
     d00:	cmp	w2, w0
     d04:	b.hi	aac <deflate_fast+0x40>  // b.pmore
     d08:	mov	x0, x19
     d0c:	bl	90 <longest_match>
     d10:	str	w0, [x19, #160]
     d14:	b	aac <deflate_fast+0x40>
     d18:	lsr	w0, w0, #7
     d1c:	add	w0, w0, #0x100
     d20:	b	b18 <deflate_fast+0xac>
     d24:	ldr	w1, [x19, #172]
     d28:	str	wzr, [x19, #160]
     d2c:	add	w0, w0, w1
     d30:	str	w0, [x19, #172]
     d34:	ldrb	w1, [x3, w0, uxtw]
     d38:	add	w0, w0, #0x1
     d3c:	str	w1, [x19, #128]
     d40:	ldrb	w0, [x3, x0]
     d44:	lsl	w1, w1, w7
     d48:	eor	w0, w0, w1
     d4c:	and	w0, w0, w6
     d50:	str	w0, [x19, #128]
     d54:	b	bcc <deflate_fast+0x160>
     d58:	ldr	x1, [x19, #96]
     d5c:	ldrb	w0, [x1, w0, uxtw]
     d60:	strh	wzr, [x6, x5]
     d64:	str	w2, [x19, #5900]
     d68:	strb	w0, [x4, x3]
     d6c:	add	x0, x19, w0, uxtb #2
     d70:	ldrh	w1, [x0, #212]
     d74:	add	w1, w1, #0x1
     d78:	strh	w1, [x0, #212]
     d7c:	ldr	w0, [x19, #5896]
     d80:	ldr	w1, [x19, #5900]
     d84:	sub	w0, w0, #0x1
     d88:	cmp	w0, w1
     d8c:	ldr	w0, [x19, #180]
     d90:	cset	w5, eq  // eq = none
     d94:	sub	w0, w0, #0x1
     d98:	str	w0, [x19, #180]
     d9c:	ldr	w0, [x19, #172]
     da0:	add	w0, w0, #0x1
     da4:	str	w0, [x19, #172]
     da8:	b	bcc <deflate_fast+0x160>
     dac:	mov	x1, #0x0                   	// #0
     db0:	b	be0 <deflate_fast+0x174>
     db4:	mov	x1, #0x0                   	// #0
     db8:	b	c70 <deflate_fast+0x204>
     dbc:	ldr	w1, [x19, #5900]
     dc0:	cbz	w1, e14 <deflate_fast+0x3a8>
     dc4:	ldr	x2, [x19, #152]
     dc8:	tbnz	x2, #63, e0c <deflate_fast+0x3a0>
     dcc:	ldr	x1, [x19, #96]
     dd0:	add	x1, x1, w2, uxtw
     dd4:	mov	w0, w0
     dd8:	mov	w3, #0x0                   	// #0
     ddc:	sub	x2, x0, x2
     de0:	mov	x0, x19
     de4:	bl	0 <_tr_flush_block>
     de8:	ldr	w0, [x19, #172]
     dec:	str	x0, [x19, #152]
     df0:	ldr	x0, [x19]
     df4:	bl	52c <flush_pending>
     df8:	ldr	x0, [x19]
     dfc:	ldr	w0, [x0, #32]
     e00:	cmp	w0, #0x0
     e04:	cset	w0, ne  // ne = any
     e08:	b	c30 <deflate_fast+0x1c4>
     e0c:	mov	x1, #0x0                   	// #0
     e10:	b	dd4 <deflate_fast+0x368>
     e14:	mov	w0, #0x1                   	// #1
     e18:	b	c30 <deflate_fast+0x1c4>

0000000000000e1c <deflate_stored>:
     e1c:	stp	x29, x30, [sp, #-96]!
     e20:	mov	x29, sp
     e24:	stp	x19, x20, [sp, #16]
     e28:	mov	x19, x0
     e2c:	ldr	w0, [x0, #80]
     e30:	stp	x23, x24, [sp, #48]
     e34:	ldr	x23, [x19, #24]
     e38:	stp	x25, x26, [sp, #64]
     e3c:	mov	x26, #0xfffe                	// #65534
     e40:	sub	x23, x23, #0x5
     e44:	stp	x21, x22, [sp, #32]
     e48:	cmp	x23, x0
     e4c:	csel	x23, x23, x0, ls  // ls = plast
     e50:	mov	w22, w1
     e54:	ldr	x0, [x19]
     e58:	stp	x27, x28, [sp, #80]
     e5c:	mov	w27, #0xffff                	// #65535
     e60:	ldr	w25, [x0, #8]
     e64:	ldr	x1, [x19]
     e68:	ldr	w0, [x19, #5940]
     e6c:	ldr	w20, [x1, #32]
     e70:	add	w0, w0, #0x2a
     e74:	ldr	w1, [x1, #8]
     e78:	asr	w2, w0, #3
     e7c:	cmp	w20, w0, asr #3
     e80:	b.cc	1228 <deflate_stored+0x40c>  // b.lo, b.ul, b.last
     e84:	ldr	x3, [x19, #152]
     e88:	sub	w2, w20, w2
     e8c:	ldr	w0, [x19, #172]
     e90:	sub	w21, w0, w3
     e94:	sub	w0, w0, w3
     e98:	add	x0, x0, w1, uxtw
     e9c:	add	w3, w21, w1
     ea0:	cmp	x0, x26
     ea4:	csel	w20, w3, w27, ls  // ls = plast
     ea8:	cmp	w20, w2
     eac:	csel	w20, w20, w2, ls  // ls = plast
     eb0:	cmp	w20, w23
     eb4:	b.cs	ed0 <deflate_stored+0xb4>  // b.hs, b.nlast
     eb8:	cmp	w20, #0x0
     ebc:	ccmp	w22, #0x4, #0x4, eq  // eq = none
     ec0:	b.ne	1228 <deflate_stored+0x40c>  // b.any
     ec4:	cbz	w22, 1228 <deflate_stored+0x40c>
     ec8:	cmp	w20, w3
     ecc:	b.ne	1228 <deflate_stored+0x40c>  // b.any
     ed0:	cmp	w22, #0x4
     ed4:	b.ne	1220 <deflate_stored+0x404>  // b.any
     ed8:	add	w1, w21, w1
     edc:	cmp	w1, w20
     ee0:	cset	w24, eq  // eq = none
     ee4:	mov	x0, x19
     ee8:	mov	x2, #0x0                   	// #0
     eec:	mov	x1, #0x0                   	// #0
     ef0:	mov	w3, w24
     ef4:	bl	0 <_tr_stored_block>
     ef8:	ldr	x1, [x19, #16]
     efc:	and	w0, w20, #0xff
     f00:	ldr	x2, [x19, #40]
     f04:	add	x1, x1, x2
     f08:	sturb	w0, [x1, #-4]
     f0c:	mvn	w0, w0
     f10:	ldr	x1, [x19, #16]
     f14:	ldr	x2, [x19, #40]
     f18:	add	x1, x1, x2
     f1c:	lsr	w2, w20, #8
     f20:	sturb	w2, [x1, #-3]
     f24:	ldr	x1, [x19, #16]
     f28:	ldr	x2, [x19, #40]
     f2c:	add	x1, x1, x2
     f30:	sturb	w0, [x1, #-2]
     f34:	ldr	x0, [x19, #16]
     f38:	ldr	x1, [x19, #40]
     f3c:	add	x0, x0, x1
     f40:	mvn	w1, w20
     f44:	lsr	w1, w1, #8
     f48:	sturb	w1, [x0, #-1]
     f4c:	ldr	x0, [x19]
     f50:	bl	52c <flush_pending>
     f54:	cbz	w21, fb8 <deflate_stored+0x19c>
     f58:	ldr	x0, [x19]
     f5c:	cmp	w20, w21
     f60:	ldr	x3, [x19, #96]
     f64:	csel	w28, w20, w21, ls  // ls = plast
     f68:	ldr	x0, [x0, #24]
     f6c:	csel	w21, w20, w21, ls  // ls = plast
     f70:	ldr	x1, [x19, #152]
     f74:	mov	x2, x21
     f78:	sub	w20, w20, w28
     f7c:	add	x1, x3, x1
     f80:	bl	0 <memcpy>
     f84:	ldr	x0, [x19]
     f88:	ldr	x2, [x19, #152]
     f8c:	ldr	x1, [x0, #24]
     f90:	add	x1, x1, x21
     f94:	str	x1, [x0, #24]
     f98:	ldr	w1, [x0, #32]
     f9c:	sub	w1, w1, w28
     fa0:	str	w1, [x0, #32]
     fa4:	ldr	x1, [x0, #40]
     fa8:	add	x1, x1, x21
     fac:	str	x1, [x0, #40]
     fb0:	add	x21, x2, x21
     fb4:	str	x21, [x19, #152]
     fb8:	cbz	w20, ff4 <deflate_stored+0x1d8>
     fbc:	ldr	x0, [x19]
     fc0:	mov	w2, w20
     fc4:	ldr	x1, [x0, #24]
     fc8:	bl	264 <read_buf>
     fcc:	ldr	x0, [x19]
     fd0:	ldr	x1, [x0, #24]
     fd4:	add	x1, x1, w20, uxtw
     fd8:	str	x1, [x0, #24]
     fdc:	ldr	w1, [x0, #32]
     fe0:	sub	w1, w1, w20
     fe4:	str	w1, [x0, #32]
     fe8:	ldr	x1, [x0, #40]
     fec:	add	x20, x1, w20, uxtw
     ff0:	str	x20, [x0, #40]
     ff4:	cbz	w24, e64 <deflate_stored+0x48>
     ff8:	mov	w20, #0x1                   	// #1
     ffc:	ldr	x2, [x19]
    1000:	ldr	w0, [x2, #8]
    1004:	subs	w25, w25, w0
    1008:	b.eq	1060 <deflate_stored+0x244>  // b.none
    100c:	ldr	w1, [x19, #80]
    1010:	ldr	x0, [x19, #96]
    1014:	cmp	w1, w25
    1018:	b.hi	1230 <deflate_stored+0x414>  // b.pmore
    101c:	mov	w3, #0x2                   	// #2
    1020:	str	w3, [x19, #5928]
    1024:	ldr	x3, [x2]
    1028:	mov	w2, w1
    102c:	sub	x1, x3, w1, uxtw
    1030:	bl	0 <memcpy>
    1034:	ldr	w0, [x19, #80]
    1038:	str	w0, [x19, #172]
    103c:	ldr	w1, [x19, #5932]
    1040:	ldr	w0, [x19, #172]
    1044:	str	x0, [x19, #152]
    1048:	ldr	w0, [x19, #80]
    104c:	sub	w0, w0, w1
    1050:	cmp	w0, w25
    1054:	csel	w25, w0, w25, ls  // ls = plast
    1058:	add	w25, w25, w1
    105c:	str	w25, [x19, #5932]
    1060:	ldr	x0, [x19, #5944]
    1064:	ldr	w2, [x19, #172]
    1068:	mov	w1, w2
    106c:	cmp	x0, w2, uxtw
    1070:	b.cs	1078 <deflate_stored+0x25c>  // b.hs, b.nlast
    1074:	str	x1, [x19, #5944]
    1078:	cbnz	w20, 12a0 <deflate_stored+0x484>
    107c:	ldr	x0, [x19]
    1080:	tst	w22, #0xfffffffb
    1084:	ldr	w0, [x0, #8]
    1088:	b.eq	109c <deflate_stored+0x280>  // b.none
    108c:	cbnz	w0, 109c <deflate_stored+0x280>
    1090:	ldr	x3, [x19, #152]
    1094:	cmp	x1, x3
    1098:	b.eq	12a8 <deflate_stored+0x48c>  // b.none
    109c:	ldr	x21, [x19, #104]
    10a0:	sub	w21, w21, w2
    10a4:	sub	w21, w21, #0x1
    10a8:	cmp	w21, w0
    10ac:	b.cs	10fc <deflate_stored+0x2e0>  // b.hs, b.nlast
    10b0:	ldr	x0, [x19, #152]
    10b4:	ldr	w3, [x19, #80]
    10b8:	mov	w1, w3
    10bc:	cmp	x0, w3, uxtw
    10c0:	b.lt	10fc <deflate_stored+0x2e0>  // b.tstop
    10c4:	sub	x0, x0, x1
    10c8:	str	x0, [x19, #152]
    10cc:	ldr	x0, [x19, #96]
    10d0:	sub	w2, w2, w3
    10d4:	str	w2, [x19, #172]
    10d8:	add	x1, x0, x1
    10dc:	bl	0 <memcpy>
    10e0:	ldr	w0, [x19, #5928]
    10e4:	cmp	w0, #0x1
    10e8:	b.hi	10f4 <deflate_stored+0x2d8>  // b.pmore
    10ec:	add	w0, w0, #0x1
    10f0:	str	w0, [x19, #5928]
    10f4:	ldr	w0, [x19, #80]
    10f8:	add	w21, w21, w0
    10fc:	ldr	x0, [x19]
    1100:	ldr	w2, [x0, #8]
    1104:	cmp	w2, w21
    1108:	csel	w21, w2, w21, ls  // ls = plast
    110c:	cbz	w21, 1130 <deflate_stored+0x314>
    1110:	ldr	x3, [x19, #96]
    1114:	mov	w2, w21
    1118:	ldr	w1, [x19, #172]
    111c:	add	x1, x3, x1
    1120:	bl	264 <read_buf>
    1124:	ldr	w2, [x19, #172]
    1128:	add	w21, w2, w21
    112c:	str	w21, [x19, #172]
    1130:	ldr	x2, [x19, #5944]
    1134:	ldr	w0, [x19, #172]
    1138:	mov	w1, w0
    113c:	cmp	x2, w0, uxtw
    1140:	b.cs	1148 <deflate_stored+0x32c>  // b.hs, b.nlast
    1144:	str	x1, [x19, #5944]
    1148:	ldr	w2, [x19, #5940]
    114c:	ldr	w4, [x19, #80]
    1150:	add	w2, w2, #0x2a
    1154:	asr	w1, w2, #3
    1158:	ldr	x2, [x19, #24]
    115c:	sub	x2, x2, x1
    1160:	mov	x1, #0xffff                	// #65535
    1164:	cmp	x2, x1
    1168:	csel	x2, x2, x1, ls  // ls = plast
    116c:	ldr	x1, [x19, #152]
    1170:	cmp	w4, w2
    1174:	mov	w3, w2
    1178:	csel	w2, w4, w2, ls  // ls = plast
    117c:	sub	w0, w0, w1
    1180:	cmp	w2, w0
    1184:	b.ls	11ac <deflate_stored+0x390>  // b.plast
    1188:	cmp	w0, #0x0
    118c:	ccmp	w22, #0x4, #0x4, eq  // eq = none
    1190:	b.ne	1200 <deflate_stored+0x3e4>  // b.any
    1194:	cbz	w22, 1200 <deflate_stored+0x3e4>
    1198:	ldr	x2, [x19]
    119c:	ldr	w2, [x2, #8]
    11a0:	cbnz	w2, 1200 <deflate_stored+0x3e4>
    11a4:	cmp	w3, w0
    11a8:	b.cc	1200 <deflate_stored+0x3e4>  // b.lo, b.ul, b.last
    11ac:	cmp	w3, w0
    11b0:	csel	x21, x3, x0, ls  // ls = plast
    11b4:	cmp	w22, #0x4
    11b8:	b.ne	1298 <deflate_stored+0x47c>  // b.any
    11bc:	ldr	x2, [x19]
    11c0:	ldr	w2, [x2, #8]
    11c4:	cbnz	w2, 1298 <deflate_stored+0x47c>
    11c8:	cmp	w3, w0
    11cc:	cset	w20, cs  // cs = hs, nlast
    11d0:	ldr	x0, [x19, #96]
    11d4:	mov	w3, w20
    11d8:	mov	x2, x21
    11dc:	lsl	w20, w20, #1
    11e0:	add	x1, x0, x1
    11e4:	mov	x0, x19
    11e8:	bl	0 <_tr_stored_block>
    11ec:	ldr	x2, [x19, #152]
    11f0:	ldr	x0, [x19]
    11f4:	add	x2, x2, x21
    11f8:	str	x2, [x19, #152]
    11fc:	bl	52c <flush_pending>
    1200:	mov	w0, w20
    1204:	ldp	x19, x20, [sp, #16]
    1208:	ldp	x21, x22, [sp, #32]
    120c:	ldp	x23, x24, [sp, #48]
    1210:	ldp	x25, x26, [sp, #64]
    1214:	ldp	x27, x28, [sp, #80]
    1218:	ldp	x29, x30, [sp], #96
    121c:	ret
    1220:	mov	w24, #0x0                   	// #0
    1224:	b	ee4 <deflate_stored+0xc8>
    1228:	mov	w20, #0x0                   	// #0
    122c:	b	ffc <deflate_stored+0x1e0>
    1230:	ldr	x3, [x19, #104]
    1234:	mov	w21, w25
    1238:	ldr	w2, [x19, #172]
    123c:	sub	x3, x3, w2, uxtw
    1240:	cmp	x3, w25, uxtw
    1244:	b.hi	126c <deflate_stored+0x450>  // b.pmore
    1248:	sub	w2, w2, w1
    124c:	str	w2, [x19, #172]
    1250:	add	x1, x0, w1, uxtw
    1254:	bl	0 <memcpy>
    1258:	ldr	w0, [x19, #5928]
    125c:	cmp	w0, #0x1
    1260:	b.hi	126c <deflate_stored+0x450>  // b.pmore
    1264:	add	w0, w0, #0x1
    1268:	str	w0, [x19, #5928]
    126c:	ldr	x1, [x19]
    1270:	mov	x2, x21
    1274:	ldr	x3, [x19, #96]
    1278:	ldr	x1, [x1]
    127c:	ldr	w0, [x19, #172]
    1280:	sub	x1, x1, x21
    1284:	add	x0, x3, x0
    1288:	bl	0 <memcpy>
    128c:	ldr	w0, [x19, #172]
    1290:	add	w0, w0, w25
    1294:	b	1038 <deflate_stored+0x21c>
    1298:	mov	w20, #0x0                   	// #0
    129c:	b	11d0 <deflate_stored+0x3b4>
    12a0:	mov	w20, #0x3                   	// #3
    12a4:	b	1200 <deflate_stored+0x3e4>
    12a8:	mov	w20, #0x1                   	// #1
    12ac:	b	1200 <deflate_stored+0x3e4>

00000000000012b0 <deflateStateCheck>:
    12b0:	cbz	x0, 1320 <deflateStateCheck+0x70>
    12b4:	ldr	x1, [x0, #64]
    12b8:	cbz	x1, 1320 <deflateStateCheck+0x70>
    12bc:	ldr	x1, [x0, #72]
    12c0:	cbz	x1, 1320 <deflateStateCheck+0x70>
    12c4:	ldr	x1, [x0, #56]
    12c8:	cbz	x1, 1320 <deflateStateCheck+0x70>
    12cc:	ldr	x2, [x1]
    12d0:	cmp	x0, x2
    12d4:	b.ne	1320 <deflateStateCheck+0x70>  // b.any
    12d8:	ldr	w1, [x1, #8]
    12dc:	sub	w2, w1, #0x2a
    12e0:	cmp	w2, #0x3d
    12e4:	b.ls	12f8 <deflateStateCheck+0x48>  // b.plast
    12e8:	cmp	w1, #0x71
    12ec:	b.ne	1314 <deflateStateCheck+0x64>  // b.any
    12f0:	mov	w0, #0x0                   	// #0
    12f4:	ret
    12f8:	mov	x0, #0x8001                	// #32769
    12fc:	movk	x0, #0x8800, lsl #16
    1300:	movk	x0, #0x2002, lsl #48
    1304:	lsr	x0, x0, x2
    1308:	mvn	x0, x0
    130c:	and	w0, w0, #0x1
    1310:	b	12f4 <deflateStateCheck+0x44>
    1314:	cmp	w1, #0x29a
    1318:	cset	w0, ne  // ne = any
    131c:	b	12f4 <deflateStateCheck+0x44>
    1320:	mov	w0, #0x1                   	// #1
    1324:	b	12f4 <deflateStateCheck+0x44>

0000000000001328 <deflateSetDictionary>:
    1328:	stp	x29, x30, [sp, #-80]!
    132c:	mov	x29, sp
    1330:	stp	x19, x20, [sp, #16]
    1334:	mov	x20, x0
    1338:	stp	x21, x22, [sp, #32]
    133c:	mov	w22, w2
    1340:	stp	x23, x24, [sp, #48]
    1344:	stp	x25, x26, [sp, #64]
    1348:	mov	x26, x1
    134c:	bl	12b0 <deflateStateCheck>
    1350:	cbnz	w0, 14c4 <deflateSetDictionary+0x19c>
    1354:	cbz	x26, 14c4 <deflateSetDictionary+0x19c>
    1358:	ldr	x19, [x20, #56]
    135c:	ldr	w23, [x19, #48]
    1360:	cmp	w23, #0x2
    1364:	b.eq	14c4 <deflateSetDictionary+0x19c>  // b.none
    1368:	mov	w21, w0
    136c:	cmp	w23, #0x1
    1370:	b.ne	1380 <deflateSetDictionary+0x58>  // b.any
    1374:	ldr	w0, [x19, #8]
    1378:	cmp	w0, #0x2a
    137c:	b.ne	14c4 <deflateSetDictionary+0x19c>  // b.any
    1380:	ldr	w0, [x19, #180]
    1384:	cbnz	w0, 14c4 <deflateSetDictionary+0x19c>
    1388:	cmp	w23, #0x1
    138c:	b.ne	13a4 <deflateSetDictionary+0x7c>  // b.any
    1390:	ldr	x0, [x20, #96]
    1394:	mov	w2, w22
    1398:	mov	x1, x26
    139c:	bl	0 <adler32>
    13a0:	str	x0, [x20, #96]
    13a4:	ldr	w0, [x19, #80]
    13a8:	str	wzr, [x19, #48]
    13ac:	cmp	w0, w22
    13b0:	b.hi	13f0 <deflateSetDictionary+0xc8>  // b.pmore
    13b4:	cbnz	w23, 13e0 <deflateSetDictionary+0xb8>
    13b8:	ldr	w2, [x19, #132]
    13bc:	mov	w1, #0x0                   	// #0
    13c0:	ldr	x0, [x19, #120]
    13c4:	sub	w2, w2, #0x1
    13c8:	lsl	x2, x2, #1
    13cc:	strh	wzr, [x0, x2]
    13d0:	bl	0 <memset>
    13d4:	str	xzr, [x19, #152]
    13d8:	str	wzr, [x19, #172]
    13dc:	str	wzr, [x19, #5932]
    13e0:	ldr	w0, [x19, #80]
    13e4:	sub	w22, w22, w0
    13e8:	add	x26, x26, x22
    13ec:	mov	w22, w0
    13f0:	ldr	w24, [x20, #8]
    13f4:	mov	x0, x19
    13f8:	str	w22, [x20, #8]
    13fc:	mov	w22, #0x2                   	// #2
    1400:	ldr	x25, [x20]
    1404:	str	x26, [x20]
    1408:	bl	318 <fill_window>
    140c:	ldr	w2, [x19, #180]
    1410:	ldr	w0, [x19, #172]
    1414:	cmp	w2, #0x2
    1418:	add	w1, w2, w0
    141c:	b.hi	1464 <deflateSetDictionary+0x13c>  // b.pmore
    1420:	mov	x0, #0x200000000           	// #8589934592
    1424:	str	x1, [x19, #152]
    1428:	stp	wzr, w1, [x19, #168]
    142c:	stur	x0, [x19, #180]
    1430:	mov	w0, #0x2                   	// #2
    1434:	str	w0, [x19, #160]
    1438:	str	w2, [x19, #5932]
    143c:	str	x25, [x20]
    1440:	str	w24, [x20, #8]
    1444:	str	w23, [x19, #48]
    1448:	mov	w0, w21
    144c:	ldp	x19, x20, [sp, #16]
    1450:	ldp	x21, x22, [sp, #32]
    1454:	ldp	x23, x24, [sp, #48]
    1458:	ldp	x25, x26, [sp, #64]
    145c:	ldp	x29, x30, [sp], #80
    1460:	ret
    1464:	ldp	x5, x4, [x19, #112]
    1468:	sub	w1, w1, #0x2
    146c:	ldr	w7, [x19, #88]
    1470:	ldp	w8, w9, [x19, #140]
    1474:	ldr	x10, [x19, #96]
    1478:	add	w2, w0, #0x2
    147c:	ldr	w3, [x19, #128]
    1480:	ldrb	w2, [x10, x2]
    1484:	lsl	w3, w3, w9
    1488:	eor	w2, w2, w3
    148c:	and	w3, w7, w0
    1490:	and	w2, w2, w8
    1494:	ldrh	w6, [x4, w2, uxtw #1]
    1498:	str	w2, [x19, #128]
    149c:	strh	w6, [x5, x3, lsl #1]
    14a0:	strh	w0, [x4, w2, uxtw #1]
    14a4:	add	w0, w0, #0x1
    14a8:	cmp	w0, w1
    14ac:	b.ne	1478 <deflateSetDictionary+0x150>  // b.any
    14b0:	str	w0, [x19, #172]
    14b4:	mov	x0, x19
    14b8:	str	w22, [x19, #180]
    14bc:	bl	318 <fill_window>
    14c0:	b	140c <deflateSetDictionary+0xe4>
    14c4:	mov	w21, #0xfffffffe            	// #-2
    14c8:	b	1448 <deflateSetDictionary+0x120>

00000000000014cc <deflateGetDictionary>:
    14cc:	stp	x29, x30, [sp, #-48]!
    14d0:	mov	x3, x0
    14d4:	mov	x4, x1
    14d8:	mov	x29, sp
    14dc:	stp	x19, x20, [sp, #16]
    14e0:	str	x21, [sp, #32]
    14e4:	mov	x21, x2
    14e8:	bl	12b0 <deflateStateCheck>
    14ec:	cbnz	w0, 1558 <deflateGetDictionary+0x8c>
    14f0:	mov	w20, w0
    14f4:	ldr	x0, [x3, #56]
    14f8:	ldr	w3, [x0, #172]
    14fc:	ldr	w1, [x0, #180]
    1500:	ldr	w19, [x0, #80]
    1504:	add	w2, w3, w1
    1508:	cmp	w19, w2
    150c:	csel	w19, w19, w2, ls  // ls = plast
    1510:	cmp	x4, #0x0
    1514:	ccmp	w19, #0x0, #0x4, ne  // ne = any
    1518:	b.eq	153c <deflateGetDictionary+0x70>  // b.none
    151c:	mov	w1, w1
    1520:	mov	w2, w19
    1524:	add	x3, x1, w3, uxtw
    1528:	sub	x3, x3, w19, uxtw
    152c:	ldr	x1, [x0, #96]
    1530:	mov	x0, x4
    1534:	add	x1, x1, x3
    1538:	bl	0 <memcpy>
    153c:	cbz	x21, 1544 <deflateGetDictionary+0x78>
    1540:	str	w19, [x21]
    1544:	mov	w0, w20
    1548:	ldp	x19, x20, [sp, #16]
    154c:	ldr	x21, [sp, #32]
    1550:	ldp	x29, x30, [sp], #48
    1554:	ret
    1558:	mov	w20, #0xfffffffe            	// #-2
    155c:	b	1544 <deflateGetDictionary+0x78>

0000000000001560 <deflateResetKeep>:
    1560:	stp	x29, x30, [sp, #-48]!
    1564:	mov	x29, sp
    1568:	stp	x19, x20, [sp, #16]
    156c:	mov	x20, x0
    1570:	str	x21, [sp, #32]
    1574:	bl	12b0 <deflateStateCheck>
    1578:	cbnz	w0, 1618 <deflateResetKeep+0xb8>
    157c:	ldr	x19, [x20, #56]
    1580:	mov	w21, w0
    1584:	mov	w0, #0x2                   	// #2
    1588:	str	xzr, [x20, #16]
    158c:	stp	xzr, xzr, [x20, #40]
    1590:	str	w0, [x20, #88]
    1594:	ldr	x0, [x19, #16]
    1598:	stp	x0, xzr, [x19, #32]
    159c:	ldr	w0, [x19, #48]
    15a0:	tbz	w0, #31, 15ac <deflateResetKeep+0x4c>
    15a4:	neg	w0, w0
    15a8:	str	w0, [x19, #48]
    15ac:	ldr	w1, [x19, #48]
    15b0:	cmp	w1, #0x2
    15b4:	b.eq	1608 <deflateResetKeep+0xa8>  // b.none
    15b8:	cmp	w1, #0x0
    15bc:	mov	w0, #0x2a                  	// #42
    15c0:	mov	w2, #0x71                  	// #113
    15c4:	csel	w0, w0, w2, ne  // ne = any
    15c8:	str	w0, [x19, #8]
    15cc:	cmp	w1, #0x2
    15d0:	mov	w2, #0x0                   	// #0
    15d4:	mov	x1, #0x0                   	// #0
    15d8:	mov	x0, #0x0                   	// #0
    15dc:	b.ne	1610 <deflateResetKeep+0xb0>  // b.any
    15e0:	bl	0 <crc32>
    15e4:	str	x0, [x20, #96]
    15e8:	mov	x0, x19
    15ec:	str	wzr, [x19, #76]
    15f0:	bl	0 <_tr_init>
    15f4:	mov	w0, w21
    15f8:	ldp	x19, x20, [sp, #16]
    15fc:	ldr	x21, [sp, #32]
    1600:	ldp	x29, x30, [sp], #48
    1604:	ret
    1608:	mov	w0, #0x39                  	// #57
    160c:	b	15c8 <deflateResetKeep+0x68>
    1610:	bl	0 <adler32>
    1614:	b	15e4 <deflateResetKeep+0x84>
    1618:	mov	w21, #0xfffffffe            	// #-2
    161c:	b	15f4 <deflateResetKeep+0x94>

0000000000001620 <deflateReset>:
    1620:	stp	x29, x30, [sp, #-32]!
    1624:	mov	x29, sp
    1628:	stp	x19, x20, [sp, #16]
    162c:	mov	x19, x0
    1630:	bl	1560 <deflateResetKeep>
    1634:	mov	w20, w0
    1638:	cbnz	w0, 16bc <deflateReset+0x9c>
    163c:	ldr	x19, [x19, #56]
    1640:	mov	w1, #0x0                   	// #0
    1644:	ldr	w0, [x19, #80]
    1648:	ldr	w2, [x19, #132]
    164c:	lsl	x0, x0, #1
    1650:	sub	w2, w2, #0x1
    1654:	str	x0, [x19, #104]
    1658:	ldr	x0, [x19, #120]
    165c:	lsl	x2, x2, #1
    1660:	strh	wzr, [x0, x2]
    1664:	bl	0 <memset>
    1668:	str	wzr, [x19, #128]
    166c:	ldrsw	x1, [x19, #196]
    1670:	adrp	x0, 0 <slide_hash>
    1674:	add	x0, x0, #0x0
    1678:	str	xzr, [x19, #152]
    167c:	str	xzr, [x19, #168]
    1680:	lsl	x2, x1, #4
    1684:	add	x1, x0, x1, lsl #4
    1688:	str	wzr, [x19, #5932]
    168c:	ldrh	w0, [x0, x2]
    1690:	str	w0, [x19, #204]
    1694:	ldrh	w0, [x1, #4]
    1698:	str	w0, [x19, #208]
    169c:	ldrh	w0, [x1, #6]
    16a0:	ldrh	w3, [x1, #2]
    16a4:	str	w0, [x19, #188]
    16a8:	mov	x0, #0x200000000           	// #8589934592
    16ac:	stur	x0, [x19, #180]
    16b0:	mov	w0, #0x2                   	// #2
    16b4:	str	w0, [x19, #160]
    16b8:	str	w3, [x19, #192]
    16bc:	mov	w0, w20
    16c0:	ldp	x19, x20, [sp, #16]
    16c4:	ldp	x29, x30, [sp], #32
    16c8:	ret

00000000000016cc <deflateSetHeader>:
    16cc:	mov	x4, x0
    16d0:	mov	x3, x1
    16d4:	stp	x29, x30, [sp, #-16]!
    16d8:	mov	x29, sp
    16dc:	bl	12b0 <deflateStateCheck>
    16e0:	cbnz	w0, 1700 <deflateSetHeader+0x34>
    16e4:	ldr	x1, [x4, #56]
    16e8:	ldr	w2, [x1, #48]
    16ec:	cmp	w2, #0x2
    16f0:	b.ne	1700 <deflateSetHeader+0x34>  // b.any
    16f4:	str	x3, [x1, #56]
    16f8:	ldp	x29, x30, [sp], #16
    16fc:	ret
    1700:	mov	w0, #0xfffffffe            	// #-2
    1704:	b	16f8 <deflateSetHeader+0x2c>

0000000000001708 <deflatePending>:
    1708:	mov	x4, x0
    170c:	mov	x5, x1
    1710:	mov	x3, x2
    1714:	stp	x29, x30, [sp, #-16]!
    1718:	mov	x29, sp
    171c:	bl	12b0 <deflateStateCheck>
    1720:	cbnz	w0, 174c <deflatePending+0x44>
    1724:	cbz	x5, 1734 <deflatePending+0x2c>
    1728:	ldr	x1, [x4, #56]
    172c:	ldr	x1, [x1, #40]
    1730:	str	w1, [x5]
    1734:	cbz	x3, 1744 <deflatePending+0x3c>
    1738:	ldr	x1, [x4, #56]
    173c:	ldr	w1, [x1, #5940]
    1740:	str	w1, [x3]
    1744:	ldp	x29, x30, [sp], #16
    1748:	ret
    174c:	mov	w0, #0xfffffffe            	// #-2
    1750:	b	1744 <deflatePending+0x3c>

0000000000001754 <deflatePrime>:
    1754:	stp	x29, x30, [sp, #-64]!
    1758:	mov	x3, x0
    175c:	mov	x29, sp
    1760:	stp	x19, x20, [sp, #16]
    1764:	mov	w19, w1
    1768:	stp	x21, x22, [sp, #32]
    176c:	mov	w22, w2
    1770:	stp	x23, x24, [sp, #48]
    1774:	bl	12b0 <deflateStateCheck>
    1778:	cbnz	w0, 17fc <deflatePrime+0xa8>
    177c:	ldr	x21, [x3, #56]
    1780:	ldr	x0, [x21, #32]
    1784:	ldr	x1, [x21, #5904]
    1788:	add	x0, x0, #0x2
    178c:	cmp	x1, x0
    1790:	b.cc	1804 <deflatePrime+0xb0>  // b.lo, b.ul, b.last
    1794:	mov	w24, #0x10                  	// #16
    1798:	mov	w23, #0x1                   	// #1
    179c:	ldr	w0, [x21, #5940]
    17a0:	ldrh	w2, [x21, #5936]
    17a4:	sub	w20, w24, w0
    17a8:	cmp	w19, w20
    17ac:	csel	w20, w19, w20, le
    17b0:	lsl	w1, w23, w20
    17b4:	sub	w1, w1, #0x1
    17b8:	and	w1, w1, w22
    17bc:	asr	w22, w22, w20
    17c0:	lsl	w1, w1, w0
    17c4:	orr	w1, w1, w2
    17c8:	add	w0, w0, w20
    17cc:	strh	w1, [x21, #5936]
    17d0:	str	w0, [x21, #5940]
    17d4:	mov	x0, x21
    17d8:	bl	0 <_tr_flush_bits>
    17dc:	subs	w19, w19, w20
    17e0:	b.ne	179c <deflatePrime+0x48>  // b.any
    17e4:	mov	w0, w19
    17e8:	ldp	x19, x20, [sp, #16]
    17ec:	ldp	x21, x22, [sp, #32]
    17f0:	ldp	x23, x24, [sp, #48]
    17f4:	ldp	x29, x30, [sp], #64
    17f8:	ret
    17fc:	mov	w19, #0xfffffffe            	// #-2
    1800:	b	17e4 <deflatePrime+0x90>
    1804:	mov	w19, #0xfffffffb            	// #-5
    1808:	b	17e4 <deflatePrime+0x90>

000000000000180c <deflateTune>:
    180c:	mov	x5, x0
    1810:	mov	w7, w1
    1814:	mov	w6, w2
    1818:	stp	x29, x30, [sp, #-16]!
    181c:	mov	x29, sp
    1820:	bl	12b0 <deflateStateCheck>
    1824:	cbnz	w0, 183c <deflateTune+0x30>
    1828:	ldr	x5, [x5, #56]
    182c:	stp	w4, w6, [x5, #188]
    1830:	stp	w7, w3, [x5, #204]
    1834:	ldp	x29, x30, [sp], #16
    1838:	ret
    183c:	mov	w0, #0xfffffffe            	// #-2
    1840:	b	1834 <deflateTune+0x28>

0000000000001844 <deflateBound>:
    1844:	add	x7, x1, #0x7
    1848:	add	x4, x1, #0x3f
    184c:	mov	x3, x1
    1850:	mov	x5, x0
    1854:	lsr	x1, x7, #3
    1858:	stp	x29, x30, [sp, #-16]!
    185c:	add	x4, x1, x4, lsr #6
    1860:	add	x4, x4, x3
    1864:	mov	x29, sp
    1868:	bl	12b0 <deflateStateCheck>
    186c:	cbz	w0, 187c <deflateBound+0x38>
    1870:	add	x0, x4, #0xb
    1874:	ldp	x29, x30, [sp], #16
    1878:	ret
    187c:	ldr	x5, [x5, #56]
    1880:	ldr	w0, [x5, #48]
    1884:	cmp	w0, #0x1
    1888:	b.eq	18c4 <deflateBound+0x80>  // b.none
    188c:	cmp	w0, #0x2
    1890:	b.eq	18dc <deflateBound+0x98>  // b.none
    1894:	cmp	w0, #0x0
    1898:	mov	x0, #0x6                   	// #6
    189c:	csel	x0, x0, xzr, ne  // ne = any
    18a0:	ldr	w1, [x5, #84]
    18a4:	cmp	w1, #0xf
    18a8:	b.ne	18b8 <deflateBound+0x74>  // b.any
    18ac:	ldr	w1, [x5, #136]
    18b0:	cmp	w1, #0xf
    18b4:	b.eq	1950 <deflateBound+0x10c>  // b.none
    18b8:	add	x4, x4, #0x5
    18bc:	add	x0, x4, x0
    18c0:	b	1874 <deflateBound+0x30>
    18c4:	ldr	w0, [x5, #172]
    18c8:	mov	x1, #0x6                   	// #6
    18cc:	cmp	w0, #0x0
    18d0:	mov	x0, #0xa                   	// #10
    18d4:	csel	x0, x0, x1, ne  // ne = any
    18d8:	b	18a0 <deflateBound+0x5c>
    18dc:	ldr	x2, [x5, #56]
    18e0:	cbz	x2, 1948 <deflateBound+0x104>
    18e4:	ldr	x0, [x2, #24]
    18e8:	cbz	x0, 1940 <deflateBound+0xfc>
    18ec:	ldr	w0, [x2, #32]
    18f0:	add	w0, w0, #0x2
    18f4:	add	x0, x0, #0x12
    18f8:	ldr	x6, [x2, #40]
    18fc:	cbz	x6, 1914 <deflateBound+0xd0>
    1900:	mvn	x1, x0
    1904:	add	x6, x6, x1
    1908:	add	x0, x0, #0x1
    190c:	ldrb	w1, [x6, x0]
    1910:	cbnz	w1, 1908 <deflateBound+0xc4>
    1914:	ldr	x6, [x2, #56]
    1918:	cbz	x6, 1930 <deflateBound+0xec>
    191c:	mvn	x1, x0
    1920:	add	x6, x6, x1
    1924:	add	x0, x0, #0x1
    1928:	ldrb	w1, [x6, x0]
    192c:	cbnz	w1, 1924 <deflateBound+0xe0>
    1930:	ldr	w1, [x2, #68]
    1934:	cbz	w1, 18a0 <deflateBound+0x5c>
    1938:	add	x0, x0, #0x2
    193c:	b	18a0 <deflateBound+0x5c>
    1940:	mov	x0, #0x12                  	// #18
    1944:	b	18f8 <deflateBound+0xb4>
    1948:	mov	x0, #0x12                  	// #18
    194c:	b	18a0 <deflateBound+0x5c>
    1950:	lsr	x1, x3, #25
    1954:	add	x1, x1, x3, lsr #14
    1958:	add	x3, x7, x3, lsr #12
    195c:	add	x3, x1, x3
    1960:	add	x0, x3, x0
    1964:	b	1874 <deflateBound+0x30>

0000000000001968 <deflate>:
    1968:	stp	x29, x30, [sp, #-96]!
    196c:	mov	x29, sp
    1970:	stp	x19, x20, [sp, #16]
    1974:	mov	x20, x0
    1978:	stp	x21, x22, [sp, #32]
    197c:	mov	w21, w1
    1980:	stp	x23, x24, [sp, #48]
    1984:	stp	x25, x26, [sp, #64]
    1988:	str	x27, [sp, #80]
    198c:	bl	12b0 <deflateStateCheck>
    1990:	cbnz	w0, 19dc <deflate+0x74>
    1994:	cmp	w21, #0x5
    1998:	b.hi	19dc <deflate+0x74>  // b.pmore
    199c:	mov	w22, w0
    19a0:	ldr	x0, [x20, #24]
    19a4:	ldr	x19, [x20, #56]
    19a8:	cbz	x0, 19d0 <deflate+0x68>
    19ac:	ldr	w0, [x20, #8]
    19b0:	cbz	w0, 19bc <deflate+0x54>
    19b4:	ldr	x1, [x20]
    19b8:	cbz	x1, 19d0 <deflate+0x68>
    19bc:	ldr	w1, [x19, #8]
    19c0:	cmp	w1, #0x29a
    19c4:	b.ne	19e4 <deflate+0x7c>  // b.any
    19c8:	cmp	w21, #0x4
    19cc:	b.eq	19e4 <deflate+0x7c>  // b.none
    19d0:	adrp	x0, 0 <z_errmsg>
    19d4:	ldr	x0, [x0]
    19d8:	str	x0, [x20, #48]
    19dc:	mov	w22, #0xfffffffe            	// #-2
    19e0:	b	19fc <deflate+0x94>
    19e4:	ldr	w1, [x20, #32]
    19e8:	cbnz	w1, 1a1c <deflate+0xb4>
    19ec:	adrp	x0, 0 <z_errmsg>
    19f0:	mov	w22, #0xfffffffb            	// #-5
    19f4:	ldr	x0, [x0]
    19f8:	str	x0, [x20, #48]
    19fc:	mov	w0, w22
    1a00:	ldp	x19, x20, [sp, #16]
    1a04:	ldp	x21, x22, [sp, #32]
    1a08:	ldp	x23, x24, [sp, #48]
    1a0c:	ldp	x25, x26, [sp, #64]
    1a10:	ldr	x27, [sp, #80]
    1a14:	ldp	x29, x30, [sp], #96
    1a18:	ret
    1a1c:	ldr	x1, [x19, #40]
    1a20:	ldr	w3, [x19, #76]
    1a24:	str	w21, [x19, #76]
    1a28:	cbz	x1, 1a48 <deflate+0xe0>
    1a2c:	mov	x0, x20
    1a30:	bl	52c <flush_pending>
    1a34:	ldr	w0, [x20, #32]
    1a38:	cbnz	w0, 1a80 <deflate+0x118>
    1a3c:	mov	w0, #0xffffffff            	// #-1
    1a40:	str	w0, [x19, #76]
    1a44:	b	19fc <deflate+0x94>
    1a48:	cbnz	w0, 1a80 <deflate+0x118>
    1a4c:	cmp	w21, #0x5
    1a50:	mov	w1, #0x9                   	// #9
    1a54:	lsl	w0, w21, #1
    1a58:	csel	w2, w1, wzr, eq  // eq = none
    1a5c:	cmp	w3, #0x4
    1a60:	sub	w0, w0, w2
    1a64:	csel	w1, w1, wzr, gt
    1a68:	lsl	w2, w3, #1
    1a6c:	sub	w1, w2, w1
    1a70:	cmp	w0, w1
    1a74:	b.gt	1a80 <deflate+0x118>
    1a78:	cmp	w21, #0x4
    1a7c:	b.ne	19ec <deflate+0x84>  // b.any
    1a80:	ldr	w0, [x19, #8]
    1a84:	cmp	w0, #0x29a
    1a88:	b.ne	1b14 <deflate+0x1ac>  // b.any
    1a8c:	ldr	w0, [x20, #8]
    1a90:	cbnz	w0, 19ec <deflate+0x84>
    1a94:	ldr	w0, [x19, #8]
    1a98:	cmp	w0, #0x45
    1a9c:	b.eq	1ec8 <deflate+0x560>  // b.none
    1aa0:	cmp	w0, #0x49
    1aa4:	b.eq	1f58 <deflate+0x5f0>  // b.none
    1aa8:	cmp	w0, #0x5b
    1aac:	b.eq	2020 <deflate+0x6b8>  // b.none
    1ab0:	cmp	w0, #0x67
    1ab4:	b.eq	20e4 <deflate+0x77c>  // b.none
    1ab8:	ldr	w0, [x20, #8]
    1abc:	cbnz	w0, 1ad8 <deflate+0x170>
    1ac0:	ldr	w0, [x19, #180]
    1ac4:	cbnz	w0, 1ad8 <deflate+0x170>
    1ac8:	cbz	w21, 19fc <deflate+0x94>
    1acc:	ldr	w0, [x19, #8]
    1ad0:	cmp	w0, #0x29a
    1ad4:	b.eq	2674 <deflate+0xd0c>  // b.none
    1ad8:	ldr	w0, [x19, #196]
    1adc:	cbnz	w0, 21f0 <deflate+0x888>
    1ae0:	mov	w1, w21
    1ae4:	mov	x0, x19
    1ae8:	bl	e1c <deflate_stored>
    1aec:	sub	w1, w0, #0x2
    1af0:	cmp	w1, #0x1
    1af4:	b.hi	1b00 <deflate+0x198>  // b.pmore
    1af8:	mov	w1, #0x29a                 	// #666
    1afc:	str	w1, [x19, #8]
    1b00:	tst	w0, #0xfffffffd
    1b04:	b.ne	264c <deflate+0xce4>  // b.any
    1b08:	ldr	w0, [x20, #32]
    1b0c:	cbnz	w0, 19fc <deflate+0x94>
    1b10:	b	1a3c <deflate+0xd4>
    1b14:	cmp	w0, #0x2a
    1b18:	b.ne	1bcc <deflate+0x264>  // b.any
    1b1c:	ldr	w2, [x19, #84]
    1b20:	mov	w1, #0xffff8800            	// #-30720
    1b24:	ldr	w0, [x19, #200]
    1b28:	lsl	w2, w2, #12
    1b2c:	cmp	w0, #0x1
    1b30:	add	w1, w2, w1
    1b34:	b.gt	1d0c <deflate+0x3a4>
    1b38:	ldr	w0, [x19, #196]
    1b3c:	cmp	w0, #0x1
    1b40:	b.le	1d0c <deflate+0x3a4>
    1b44:	cmp	w0, #0x5
    1b48:	b.le	1d14 <deflate+0x3ac>
    1b4c:	cmp	w0, #0x6
    1b50:	cset	w2, ne  // ne = any
    1b54:	add	w2, w2, #0x2
    1b58:	ldr	w0, [x19, #172]
    1b5c:	orr	w2, w1, w2, lsl #6
    1b60:	cbz	w0, 1b68 <deflate+0x200>
    1b64:	orr	w2, w2, #0x20
    1b68:	mov	w0, #0x1f                  	// #31
    1b6c:	udiv	w1, w2, w0
    1b70:	msub	w1, w1, w0, w2
    1b74:	add	w2, w2, w0
    1b78:	mov	x0, x19
    1b7c:	sub	w1, w2, w1
    1b80:	bl	60 <putShortMSB>
    1b84:	ldr	w0, [x19, #172]
    1b88:	cbz	w0, 1ba0 <deflate+0x238>
    1b8c:	ldur	w1, [x20, #98]
    1b90:	mov	x0, x19
    1b94:	bl	60 <putShortMSB>
    1b98:	ldrh	w1, [x20, #96]
    1b9c:	bl	60 <putShortMSB>
    1ba0:	mov	w2, #0x0                   	// #0
    1ba4:	mov	x1, #0x0                   	// #0
    1ba8:	mov	x0, #0x0                   	// #0
    1bac:	bl	0 <adler32>
    1bb0:	str	x0, [x20, #96]
    1bb4:	mov	w0, #0x71                  	// #113
    1bb8:	str	w0, [x19, #8]
    1bbc:	mov	x0, x20
    1bc0:	bl	52c <flush_pending>
    1bc4:	ldr	x0, [x19, #40]
    1bc8:	cbnz	x0, 1a3c <deflate+0xd4>
    1bcc:	ldr	w0, [x19, #8]
    1bd0:	cmp	w0, #0x39
    1bd4:	b.ne	1a94 <deflate+0x12c>  // b.any
    1bd8:	mov	w2, #0x0                   	// #0
    1bdc:	mov	x1, #0x0                   	// #0
    1be0:	mov	x0, #0x0                   	// #0
    1be4:	bl	0 <crc32>
    1be8:	ldr	x1, [x19, #16]
    1bec:	str	x0, [x20, #96]
    1bf0:	ldr	x0, [x19, #40]
    1bf4:	add	x2, x0, #0x1
    1bf8:	str	x2, [x19, #40]
    1bfc:	mov	w2, #0x1f                  	// #31
    1c00:	strb	w2, [x1, x0]
    1c04:	ldr	x1, [x19, #16]
    1c08:	ldr	x0, [x19, #40]
    1c0c:	add	x2, x0, #0x1
    1c10:	str	x2, [x19, #40]
    1c14:	mov	w2, #0xffffff8b            	// #-117
    1c18:	strb	w2, [x1, x0]
    1c1c:	ldr	x1, [x19, #16]
    1c20:	ldr	x0, [x19, #40]
    1c24:	add	x2, x0, #0x1
    1c28:	str	x2, [x19, #40]
    1c2c:	mov	w2, #0x8                   	// #8
    1c30:	strb	w2, [x1, x0]
    1c34:	ldr	x0, [x19, #56]
    1c38:	ldr	x5, [x19, #16]
    1c3c:	ldr	x2, [x19, #40]
    1c40:	cbnz	x0, 1d2c <deflate+0x3c4>
    1c44:	add	x0, x2, #0x1
    1c48:	str	x0, [x19, #40]
    1c4c:	strb	wzr, [x5, x2]
    1c50:	ldr	x1, [x19, #16]
    1c54:	ldr	x0, [x19, #40]
    1c58:	add	x2, x0, #0x1
    1c5c:	str	x2, [x19, #40]
    1c60:	strb	wzr, [x1, x0]
    1c64:	ldr	x1, [x19, #16]
    1c68:	ldr	x0, [x19, #40]
    1c6c:	add	x2, x0, #0x1
    1c70:	str	x2, [x19, #40]
    1c74:	strb	wzr, [x1, x0]
    1c78:	ldr	x1, [x19, #16]
    1c7c:	ldr	x0, [x19, #40]
    1c80:	add	x2, x0, #0x1
    1c84:	str	x2, [x19, #40]
    1c88:	strb	wzr, [x1, x0]
    1c8c:	ldr	x1, [x19, #16]
    1c90:	ldr	x0, [x19, #40]
    1c94:	add	x2, x0, #0x1
    1c98:	str	x2, [x19, #40]
    1c9c:	strb	wzr, [x1, x0]
    1ca0:	ldr	w0, [x19, #196]
    1ca4:	cmp	w0, #0x9
    1ca8:	b.eq	1d1c <deflate+0x3b4>  // b.none
    1cac:	ldr	w1, [x19, #200]
    1cb0:	cmp	w1, #0x1
    1cb4:	b.gt	1d24 <deflate+0x3bc>
    1cb8:	cmp	w0, #0x2
    1cbc:	cset	w0, lt  // lt = tstop
    1cc0:	lsl	w0, w0, #2
    1cc4:	ldr	x2, [x19, #16]
    1cc8:	ldr	x1, [x19, #40]
    1ccc:	add	x3, x1, #0x1
    1cd0:	str	x3, [x19, #40]
    1cd4:	strb	w0, [x2, x1]
    1cd8:	ldr	x1, [x19, #16]
    1cdc:	ldr	x0, [x19, #40]
    1ce0:	add	x2, x0, #0x1
    1ce4:	str	x2, [x19, #40]
    1ce8:	mov	w2, #0x3                   	// #3
    1cec:	strb	w2, [x1, x0]
    1cf0:	mov	w0, #0x71                  	// #113
    1cf4:	str	w0, [x19, #8]
    1cf8:	mov	x0, x20
    1cfc:	bl	52c <flush_pending>
    1d00:	ldr	x0, [x19, #40]
    1d04:	cbz	x0, 1a94 <deflate+0x12c>
    1d08:	b	1a3c <deflate+0xd4>
    1d0c:	mov	w2, #0x0                   	// #0
    1d10:	b	1b58 <deflate+0x1f0>
    1d14:	mov	w2, #0x1                   	// #1
    1d18:	b	1b58 <deflate+0x1f0>
    1d1c:	mov	w0, #0x2                   	// #2
    1d20:	b	1cc4 <deflate+0x35c>
    1d24:	mov	w0, #0x4                   	// #4
    1d28:	b	1cc4 <deflate+0x35c>
    1d2c:	ldr	w1, [x0]
    1d30:	ldr	x4, [x0, #40]
    1d34:	cmp	w1, #0x0
    1d38:	ldr	w1, [x0, #68]
    1d3c:	cset	w3, ne  // ne = any
    1d40:	cmp	w1, #0x0
    1d44:	cset	w1, ne  // ne = any
    1d48:	add	w1, w3, w1, lsl #1
    1d4c:	ldr	x3, [x0, #24]
    1d50:	ldr	x0, [x0, #56]
    1d54:	cmp	x3, #0x0
    1d58:	cset	w3, ne  // ne = any
    1d5c:	cmp	x4, #0x0
    1d60:	cset	w4, ne  // ne = any
    1d64:	cmp	x0, #0x0
    1d68:	cset	w0, ne  // ne = any
    1d6c:	lsl	w4, w4, #3
    1d70:	add	w3, w4, w3, lsl #2
    1d74:	add	w1, w1, w3
    1d78:	add	x3, x2, #0x1
    1d7c:	str	x3, [x19, #40]
    1d80:	add	w1, w1, w0, lsl #4
    1d84:	strb	w1, [x5, x2]
    1d88:	ldr	x0, [x19, #56]
    1d8c:	ldr	x1, [x19, #16]
    1d90:	ldr	x2, [x0, #8]
    1d94:	ldr	x0, [x19, #40]
    1d98:	add	x3, x0, #0x1
    1d9c:	str	x3, [x19, #40]
    1da0:	strb	w2, [x1, x0]
    1da4:	ldr	x0, [x19, #56]
    1da8:	ldr	x2, [x19, #16]
    1dac:	ldr	x0, [x0, #8]
    1db0:	ldr	x1, [x19, #40]
    1db4:	lsr	x0, x0, #8
    1db8:	add	x3, x1, #0x1
    1dbc:	str	x3, [x19, #40]
    1dc0:	strb	w0, [x2, x1]
    1dc4:	ldr	x0, [x19, #56]
    1dc8:	ldr	x2, [x19, #16]
    1dcc:	ldr	x0, [x0, #8]
    1dd0:	ldr	x1, [x19, #40]
    1dd4:	lsr	x0, x0, #16
    1dd8:	add	x3, x1, #0x1
    1ddc:	str	x3, [x19, #40]
    1de0:	strb	w0, [x2, x1]
    1de4:	ldr	x0, [x19, #56]
    1de8:	ldr	x2, [x19, #16]
    1dec:	ldr	x0, [x0, #8]
    1df0:	ldr	x1, [x19, #40]
    1df4:	lsr	x0, x0, #24
    1df8:	add	x3, x1, #0x1
    1dfc:	str	x3, [x19, #40]
    1e00:	strb	w0, [x2, x1]
    1e04:	ldr	w0, [x19, #196]
    1e08:	cmp	w0, #0x9
    1e0c:	b.eq	2178 <deflate+0x810>  // b.none
    1e10:	ldr	w1, [x19, #200]
    1e14:	cmp	w1, #0x1
    1e18:	b.gt	2180 <deflate+0x818>
    1e1c:	cmp	w0, #0x2
    1e20:	cset	w0, lt  // lt = tstop
    1e24:	lsl	w0, w0, #2
    1e28:	ldr	x2, [x19, #16]
    1e2c:	ldr	x1, [x19, #40]
    1e30:	add	x3, x1, #0x1
    1e34:	str	x3, [x19, #40]
    1e38:	strb	w0, [x2, x1]
    1e3c:	ldr	x0, [x19, #56]
    1e40:	ldr	x1, [x19, #16]
    1e44:	ldr	w2, [x0, #20]
    1e48:	ldr	x0, [x19, #40]
    1e4c:	add	x3, x0, #0x1
    1e50:	str	x3, [x19, #40]
    1e54:	strb	w2, [x1, x0]
    1e58:	ldr	x0, [x19, #56]
    1e5c:	ldr	x1, [x0, #24]
    1e60:	cbz	x1, 1e9c <deflate+0x534>
    1e64:	ldr	w2, [x0, #32]
    1e68:	ldr	x1, [x19, #16]
    1e6c:	ldr	x0, [x19, #40]
    1e70:	add	x3, x0, #0x1
    1e74:	str	x3, [x19, #40]
    1e78:	strb	w2, [x1, x0]
    1e7c:	ldr	x0, [x19, #56]
    1e80:	ldr	x2, [x19, #16]
    1e84:	ldr	x1, [x19, #40]
    1e88:	ldr	w0, [x0, #32]
    1e8c:	add	x3, x1, #0x1
    1e90:	str	x3, [x19, #40]
    1e94:	lsr	w0, w0, #8
    1e98:	strb	w0, [x2, x1]
    1e9c:	ldr	x0, [x19, #56]
    1ea0:	ldr	w0, [x0, #68]
    1ea4:	cbz	w0, 1ebc <deflate+0x554>
    1ea8:	ldr	w2, [x19, #40]
    1eac:	ldr	x1, [x19, #16]
    1eb0:	ldr	x0, [x20, #96]
    1eb4:	bl	0 <crc32>
    1eb8:	str	x0, [x20, #96]
    1ebc:	mov	w0, #0x45                  	// #69
    1ec0:	str	w0, [x19, #8]
    1ec4:	str	xzr, [x19, #64]
    1ec8:	ldr	x0, [x19, #56]
    1ecc:	ldr	x1, [x0, #24]
    1ed0:	cbz	x1, 1f50 <deflate+0x5e8>
    1ed4:	ldrh	w25, [x0, #32]
    1ed8:	ldr	x0, [x19, #64]
    1edc:	ldr	x23, [x19, #40]
    1ee0:	sub	w25, w25, w0
    1ee4:	ldp	x1, x2, [x19, #56]
    1ee8:	mov	w24, w25
    1eec:	ldp	x0, x26, [x19, #16]
    1ef0:	ldr	x27, [x19, #40]
    1ef4:	ldr	x1, [x1, #24]
    1ef8:	add	x0, x0, x27
    1efc:	add	x1, x1, x2
    1f00:	add	x2, x27, w25, uxtw
    1f04:	cmp	x2, x26
    1f08:	b.hi	2188 <deflate+0x820>  // b.pmore
    1f0c:	mov	x2, x24
    1f10:	bl	0 <memcpy>
    1f14:	ldr	x0, [x19, #56]
    1f18:	ldr	x2, [x19, #40]
    1f1c:	ldr	w0, [x0, #68]
    1f20:	add	x2, x24, x2
    1f24:	str	x2, [x19, #40]
    1f28:	cbz	w0, 1f4c <deflate+0x5e4>
    1f2c:	cmp	x2, x23
    1f30:	b.ls	1f4c <deflate+0x5e4>  // b.plast
    1f34:	ldr	x0, [x20, #96]
    1f38:	sub	w2, w2, w23
    1f3c:	ldr	x1, [x19, #16]
    1f40:	add	x1, x1, x23
    1f44:	bl	0 <crc32>
    1f48:	str	x0, [x20, #96]
    1f4c:	str	xzr, [x19, #64]
    1f50:	mov	w0, #0x49                  	// #73
    1f54:	str	w0, [x19, #8]
    1f58:	ldr	x0, [x19, #56]
    1f5c:	ldr	x0, [x0, #40]
    1f60:	cbz	x0, 2018 <deflate+0x6b0>
    1f64:	ldr	x0, [x19, #40]
    1f68:	ldr	x1, [x19, #24]
    1f6c:	ldr	x2, [x19, #40]
    1f70:	cmp	x2, x1
    1f74:	b.ne	1fb4 <deflate+0x64c>  // b.any
    1f78:	ldr	x1, [x19, #56]
    1f7c:	ldr	w1, [x1, #68]
    1f80:	cbz	w1, 1fa4 <deflate+0x63c>
    1f84:	cmp	x2, x0
    1f88:	b.ls	1fa4 <deflate+0x63c>  // b.plast
    1f8c:	ldr	x1, [x19, #16]
    1f90:	sub	w2, w2, w0
    1f94:	add	x1, x1, x0
    1f98:	ldr	x0, [x20, #96]
    1f9c:	bl	0 <crc32>
    1fa0:	str	x0, [x20, #96]
    1fa4:	mov	x0, x20
    1fa8:	bl	52c <flush_pending>
    1fac:	ldr	x0, [x19, #40]
    1fb0:	cbnz	x0, 1a3c <deflate+0xd4>
    1fb4:	ldr	x1, [x19, #56]
    1fb8:	ldr	x2, [x1, #40]
    1fbc:	ldr	x1, [x19, #64]
    1fc0:	add	x3, x1, #0x1
    1fc4:	str	x3, [x19, #64]
    1fc8:	ldr	x3, [x19, #16]
    1fcc:	ldrb	w1, [x2, x1]
    1fd0:	ldr	x2, [x19, #40]
    1fd4:	add	x4, x2, #0x1
    1fd8:	str	x4, [x19, #40]
    1fdc:	strb	w1, [x3, x2]
    1fe0:	cbnz	w1, 1f68 <deflate+0x600>
    1fe4:	ldr	x1, [x19, #56]
    1fe8:	ldr	w1, [x1, #68]
    1fec:	cbz	w1, 2014 <deflate+0x6ac>
    1ff0:	ldr	x2, [x19, #40]
    1ff4:	cmp	x2, x0
    1ff8:	b.ls	2014 <deflate+0x6ac>  // b.plast
    1ffc:	ldr	x1, [x19, #16]
    2000:	sub	w2, w2, w0
    2004:	add	x1, x1, x0
    2008:	ldr	x0, [x20, #96]
    200c:	bl	0 <crc32>
    2010:	str	x0, [x20, #96]
    2014:	str	xzr, [x19, #64]
    2018:	mov	w0, #0x5b                  	// #91
    201c:	str	w0, [x19, #8]
    2020:	ldr	x0, [x19, #56]
    2024:	ldr	x0, [x0, #56]
    2028:	cbz	x0, 20dc <deflate+0x774>
    202c:	ldr	x0, [x19, #40]
    2030:	ldr	x1, [x19, #24]
    2034:	ldr	x2, [x19, #40]
    2038:	cmp	x2, x1
    203c:	b.ne	207c <deflate+0x714>  // b.any
    2040:	ldr	x1, [x19, #56]
    2044:	ldr	w1, [x1, #68]
    2048:	cbz	w1, 206c <deflate+0x704>
    204c:	cmp	x2, x0
    2050:	b.ls	206c <deflate+0x704>  // b.plast
    2054:	ldr	x1, [x19, #16]
    2058:	sub	w2, w2, w0
    205c:	add	x1, x1, x0
    2060:	ldr	x0, [x20, #96]
    2064:	bl	0 <crc32>
    2068:	str	x0, [x20, #96]
    206c:	mov	x0, x20
    2070:	bl	52c <flush_pending>
    2074:	ldr	x0, [x19, #40]
    2078:	cbnz	x0, 1a3c <deflate+0xd4>
    207c:	ldr	x1, [x19, #56]
    2080:	ldr	x2, [x1, #56]
    2084:	ldr	x1, [x19, #64]
    2088:	add	x3, x1, #0x1
    208c:	str	x3, [x19, #64]
    2090:	ldr	x3, [x19, #16]
    2094:	ldrb	w1, [x2, x1]
    2098:	ldr	x2, [x19, #40]
    209c:	add	x4, x2, #0x1
    20a0:	str	x4, [x19, #40]
    20a4:	strb	w1, [x3, x2]
    20a8:	cbnz	w1, 2030 <deflate+0x6c8>
    20ac:	ldr	x1, [x19, #56]
    20b0:	ldr	w1, [x1, #68]
    20b4:	cbz	w1, 20dc <deflate+0x774>
    20b8:	ldr	x2, [x19, #40]
    20bc:	cmp	x2, x0
    20c0:	b.ls	20dc <deflate+0x774>  // b.plast
    20c4:	ldr	x1, [x19, #16]
    20c8:	sub	w2, w2, w0
    20cc:	add	x1, x1, x0
    20d0:	ldr	x0, [x20, #96]
    20d4:	bl	0 <crc32>
    20d8:	str	x0, [x20, #96]
    20dc:	mov	w0, #0x67                  	// #103
    20e0:	str	w0, [x19, #8]
    20e4:	ldr	x0, [x19, #56]
    20e8:	ldr	w0, [x0, #68]
    20ec:	cbz	w0, 215c <deflate+0x7f4>
    20f0:	ldr	x0, [x19, #40]
    20f4:	ldr	x1, [x19, #24]
    20f8:	add	x0, x0, #0x2
    20fc:	cmp	x0, x1
    2100:	b.ls	2114 <deflate+0x7ac>  // b.plast
    2104:	mov	x0, x20
    2108:	bl	52c <flush_pending>
    210c:	ldr	x0, [x19, #40]
    2110:	cbnz	x0, 1a3c <deflate+0xd4>
    2114:	ldr	x1, [x19, #16]
    2118:	ldr	x0, [x19, #40]
    211c:	ldr	x2, [x20, #96]
    2120:	add	x3, x0, #0x1
    2124:	str	x3, [x19, #40]
    2128:	strb	w2, [x1, x0]
    212c:	ldr	x2, [x19, #16]
    2130:	ldr	x1, [x19, #40]
    2134:	ldr	x0, [x20, #96]
    2138:	add	x3, x1, #0x1
    213c:	str	x3, [x19, #40]
    2140:	lsr	x0, x0, #8
    2144:	strb	w0, [x2, x1]
    2148:	mov	w2, #0x0                   	// #0
    214c:	mov	x1, #0x0                   	// #0
    2150:	mov	x0, #0x0                   	// #0
    2154:	bl	0 <crc32>
    2158:	str	x0, [x20, #96]
    215c:	mov	w0, #0x71                  	// #113
    2160:	str	w0, [x19, #8]
    2164:	mov	x0, x20
    2168:	bl	52c <flush_pending>
    216c:	ldr	x0, [x19, #40]
    2170:	cbz	x0, 1ab8 <deflate+0x150>
    2174:	b	1a3c <deflate+0xd4>
    2178:	mov	w0, #0x2                   	// #2
    217c:	b	1e28 <deflate+0x4c0>
    2180:	mov	w0, #0x4                   	// #4
    2184:	b	1e28 <deflate+0x4c0>
    2188:	sub	w24, w26, w27
    218c:	mov	x2, x24
    2190:	bl	0 <memcpy>
    2194:	ldr	x0, [x19, #56]
    2198:	ldr	x2, [x19, #24]
    219c:	ldr	w0, [x0, #68]
    21a0:	str	x2, [x19, #40]
    21a4:	cbz	w0, 21c8 <deflate+0x860>
    21a8:	cmp	x2, x23
    21ac:	b.ls	21c8 <deflate+0x860>  // b.plast
    21b0:	ldr	x0, [x20, #96]
    21b4:	sub	w2, w2, w23
    21b8:	ldr	x1, [x19, #16]
    21bc:	add	x1, x1, x23
    21c0:	bl	0 <crc32>
    21c4:	str	x0, [x20, #96]
    21c8:	ldr	x0, [x19, #64]
    21cc:	add	x24, x0, x24
    21d0:	str	x24, [x19, #64]
    21d4:	mov	x0, x20
    21d8:	bl	52c <flush_pending>
    21dc:	ldr	x23, [x19, #40]
    21e0:	cbnz	x23, 1a3c <deflate+0xd4>
    21e4:	sub	w26, w27, w26
    21e8:	add	w25, w25, w26
    21ec:	b	1ee4 <deflate+0x57c>
    21f0:	ldr	w1, [x19, #200]
    21f4:	cmp	w1, #0x2
    21f8:	b.ne	2324 <deflate+0x9bc>  // b.any
    21fc:	ldr	w0, [x19, #180]
    2200:	cbnz	w0, 2220 <deflate+0x8b8>
    2204:	mov	x0, x19
    2208:	bl	318 <fill_window>
    220c:	ldr	w0, [x19, #180]
    2210:	cbnz	w0, 2220 <deflate+0x8b8>
    2214:	cbnz	w21, 2458 <deflate+0xaf0>
    2218:	mov	w0, #0x0                   	// #0
    221c:	b	1aec <deflate+0x184>
    2220:	ldr	w0, [x19, #172]
    2224:	ldr	x1, [x19, #96]
    2228:	str	wzr, [x19, #160]
    222c:	ldr	x2, [x19, #5904]
    2230:	ldrb	w0, [x1, x0]
    2234:	ldr	w1, [x19, #5900]
    2238:	add	w3, w1, #0x1
    223c:	strh	wzr, [x2, w1, uxtw #1]
    2240:	ldr	x2, [x19, #5888]
    2244:	str	w3, [x19, #5900]
    2248:	strb	w0, [x2, w1, uxtw]
    224c:	add	x0, x19, w0, uxtb #2
    2250:	ldrh	w1, [x0, #212]
    2254:	add	w1, w1, #0x1
    2258:	strh	w1, [x0, #212]
    225c:	ldr	w0, [x19, #180]
    2260:	ldr	w1, [x19, #5896]
    2264:	sub	w0, w0, #0x1
    2268:	str	w0, [x19, #180]
    226c:	ldr	w0, [x19, #172]
    2270:	sub	w1, w1, #0x1
    2274:	ldr	w2, [x19, #5900]
    2278:	add	w0, w0, #0x1
    227c:	str	w0, [x19, #172]
    2280:	cmp	w2, w1
    2284:	b.ne	21fc <deflate+0x894>  // b.any
    2288:	ldr	x2, [x19, #152]
    228c:	tbnz	x2, #63, 22c8 <deflate+0x960>
    2290:	ldr	x1, [x19, #96]
    2294:	add	x1, x1, w2, uxtw
    2298:	sub	x2, x0, x2
    229c:	mov	w3, #0x0                   	// #0
    22a0:	mov	x0, x19
    22a4:	bl	0 <_tr_flush_block>
    22a8:	ldr	w0, [x19, #172]
    22ac:	str	x0, [x19, #152]
    22b0:	ldr	x0, [x19]
    22b4:	bl	52c <flush_pending>
    22b8:	ldr	x0, [x19]
    22bc:	ldr	w0, [x0, #32]
    22c0:	cbnz	w0, 21fc <deflate+0x894>
    22c4:	b	2218 <deflate+0x8b0>
    22c8:	mov	x1, #0x0                   	// #0
    22cc:	b	2298 <deflate+0x930>
    22d0:	mov	x1, #0x0                   	// #0
    22d4:	ldr	w2, [x19, #172]
    22d8:	mov	w3, #0x1                   	// #1
    22dc:	sub	x2, x2, x0
    22e0:	mov	x0, x19
    22e4:	bl	0 <_tr_flush_block>
    22e8:	ldr	w0, [x19, #172]
    22ec:	str	x0, [x19, #152]
    22f0:	ldr	x0, [x19]
    22f4:	bl	52c <flush_pending>
    22f8:	ldr	x0, [x19]
    22fc:	ldr	w0, [x0, #32]
    2300:	cbz	w0, 230c <deflate+0x9a4>
    2304:	mov	w0, #0x3                   	// #3
    2308:	b	1aec <deflate+0x184>
    230c:	mov	w0, #0x2                   	// #2
    2310:	b	1aec <deflate+0x184>
    2314:	ldr	w0, [x19, #5900]
    2318:	cbnz	w0, 25dc <deflate+0xc74>
    231c:	mov	w0, #0x1                   	// #1
    2320:	b	1aec <deflate+0x184>
    2324:	cmp	w1, #0x3
    2328:	b.ne	262c <deflate+0xcc4>  // b.any
    232c:	adrp	x23, 0 <_length_code>
    2330:	adrp	x24, 0 <_dist_code>
    2334:	add	x23, x23, #0x0
    2338:	add	x24, x24, #0x0
    233c:	mov	w25, #0x102                 	// #258
    2340:	ldr	w0, [x19, #180]
    2344:	cmp	w0, #0x102
    2348:	b.ls	243c <deflate+0xad4>  // b.plast
    234c:	ldr	w4, [x19, #180]
    2350:	str	wzr, [x19, #160]
    2354:	cmp	w4, #0x2
    2358:	b.hi	2478 <deflate+0xb10>  // b.pmore
    235c:	ldr	w1, [x19, #5900]
    2360:	ldr	w0, [x19, #160]
    2364:	mov	w2, w1
    2368:	ubfiz	x4, x1, #1, #32
    236c:	cmp	w0, #0x2
    2370:	add	w1, w1, #0x1
    2374:	ldr	x3, [x19, #5888]
    2378:	ldr	x5, [x19, #5904]
    237c:	b.ls	257c <deflate+0xc14>  // b.plast
    2380:	sub	w0, w0, #0x3
    2384:	mov	w6, #0x1                   	// #1
    2388:	and	w0, w0, #0xff
    238c:	strh	w6, [x5, x4]
    2390:	str	w1, [x19, #5900]
    2394:	strb	w0, [x3, x2]
    2398:	ldrb	w0, [x23, w0, sxtw]
    239c:	add	x0, x19, x0, lsl #2
    23a0:	ldrh	w1, [x0, #1240]
    23a4:	add	w1, w1, #0x1
    23a8:	strh	w1, [x0, #1240]
    23ac:	ldrb	w0, [x24]
    23b0:	add	x0, x19, x0, lsl #2
    23b4:	ldrh	w1, [x0, #2504]
    23b8:	add	w1, w1, #0x1
    23bc:	strh	w1, [x0, #2504]
    23c0:	ldr	w0, [x19, #5896]
    23c4:	ldr	w1, [x19, #5900]
    23c8:	sub	w0, w0, #0x1
    23cc:	ldr	w3, [x19, #160]
    23d0:	cmp	w0, w1
    23d4:	ldr	w0, [x19, #172]
    23d8:	ldr	w1, [x19, #180]
    23dc:	cset	w2, eq  // eq = none
    23e0:	add	w0, w0, w3
    23e4:	str	wzr, [x19, #160]
    23e8:	sub	w1, w1, w3
    23ec:	str	w0, [x19, #172]
    23f0:	str	w1, [x19, #180]
    23f4:	cbz	w2, 2340 <deflate+0x9d8>
    23f8:	ldr	x0, [x19, #152]
    23fc:	tbnz	x0, #63, 25d4 <deflate+0xc6c>
    2400:	ldr	x1, [x19, #96]
    2404:	add	x1, x1, w0, uxtw
    2408:	ldr	w2, [x19, #172]
    240c:	mov	w3, #0x0                   	// #0
    2410:	sub	x2, x2, x0
    2414:	mov	x0, x19
    2418:	bl	0 <_tr_flush_block>
    241c:	ldr	w0, [x19, #172]
    2420:	str	x0, [x19, #152]
    2424:	ldr	x0, [x19]
    2428:	bl	52c <flush_pending>
    242c:	ldr	x0, [x19]
    2430:	ldr	w0, [x0, #32]
    2434:	cbnz	w0, 233c <deflate+0x9d4>
    2438:	b	2218 <deflate+0x8b0>
    243c:	mov	x0, x19
    2440:	bl	318 <fill_window>
    2444:	ldr	w0, [x19, #180]
    2448:	cmp	w0, #0x102
    244c:	b.hi	234c <deflate+0x9e4>  // b.pmore
    2450:	cbz	w21, 2218 <deflate+0x8b0>
    2454:	cbnz	w0, 234c <deflate+0x9e4>
    2458:	str	wzr, [x19, #5932]
    245c:	cmp	w21, #0x4
    2460:	b.ne	2314 <deflate+0x9ac>  // b.any
    2464:	ldr	x0, [x19, #152]
    2468:	tbnz	x0, #63, 22d0 <deflate+0x968>
    246c:	ldr	x1, [x19, #96]
    2470:	add	x1, x1, w0, uxtw
    2474:	b	22d4 <deflate+0x96c>
    2478:	ldr	w3, [x19, #172]
    247c:	cbz	w3, 235c <deflate+0x9f4>
    2480:	ldr	x0, [x19, #96]
    2484:	mov	w3, w3
    2488:	sub	x1, x3, #0x1
    248c:	add	x2, x0, x1
    2490:	ldrb	w1, [x0, x1]
    2494:	ldrb	w5, [x2, #1]
    2498:	cmp	w5, w1
    249c:	b.ne	235c <deflate+0x9f4>  // b.any
    24a0:	ldrb	w5, [x2, #2]
    24a4:	cmp	w5, w1
    24a8:	b.ne	235c <deflate+0x9f4>  // b.any
    24ac:	ldrb	w5, [x2, #3]
    24b0:	cmp	w5, w1
    24b4:	b.ne	235c <deflate+0x9f4>  // b.any
    24b8:	add	x3, x3, #0x102
    24bc:	add	x2, x2, #0x3
    24c0:	add	x0, x0, x3
    24c4:	ldrb	w3, [x2, #1]
    24c8:	cmp	w3, w1
    24cc:	b.ne	2574 <deflate+0xc0c>  // b.any
    24d0:	ldrb	w3, [x2, #2]
    24d4:	cmp	w3, w1
    24d8:	b.eq	24f8 <deflate+0xb90>  // b.none
    24dc:	add	x2, x2, #0x2
    24e0:	sub	x2, x0, x2
    24e4:	sub	w2, w25, w2
    24e8:	cmp	w4, w2
    24ec:	csel	w2, w4, w2, cc  // cc = lo, ul, last
    24f0:	str	w2, [x19, #160]
    24f4:	b	235c <deflate+0x9f4>
    24f8:	ldrb	w3, [x2, #3]
    24fc:	cmp	w3, w1
    2500:	b.eq	250c <deflate+0xba4>  // b.none
    2504:	add	x2, x2, #0x3
    2508:	b	24e0 <deflate+0xb78>
    250c:	ldrb	w3, [x2, #4]
    2510:	cmp	w3, w1
    2514:	b.eq	2520 <deflate+0xbb8>  // b.none
    2518:	add	x2, x2, #0x4
    251c:	b	24e0 <deflate+0xb78>
    2520:	ldrb	w3, [x2, #5]
    2524:	cmp	w3, w1
    2528:	b.eq	2534 <deflate+0xbcc>  // b.none
    252c:	add	x2, x2, #0x5
    2530:	b	24e0 <deflate+0xb78>
    2534:	ldrb	w3, [x2, #6]
    2538:	cmp	w3, w1
    253c:	b.eq	2548 <deflate+0xbe0>  // b.none
    2540:	add	x2, x2, #0x6
    2544:	b	24e0 <deflate+0xb78>
    2548:	ldrb	w3, [x2, #7]
    254c:	cmp	w3, w1
    2550:	b.eq	255c <deflate+0xbf4>  // b.none
    2554:	add	x2, x2, #0x7
    2558:	b	24e0 <deflate+0xb78>
    255c:	ldrb	w3, [x2, #8]!
    2560:	cmp	w3, w1
    2564:	b.ne	24e0 <deflate+0xb78>  // b.any
    2568:	cmp	x0, x2
    256c:	b.hi	24c4 <deflate+0xb5c>  // b.pmore
    2570:	b	24e0 <deflate+0xb78>
    2574:	add	x2, x2, #0x1
    2578:	b	24e0 <deflate+0xb78>
    257c:	ldr	w0, [x19, #172]
    2580:	ldr	x6, [x19, #96]
    2584:	ldrb	w0, [x6, x0]
    2588:	strh	wzr, [x5, x4]
    258c:	str	w1, [x19, #5900]
    2590:	strb	w0, [x3, x2]
    2594:	add	x0, x19, w0, uxtb #2
    2598:	ldrh	w1, [x0, #212]
    259c:	add	w1, w1, #0x1
    25a0:	strh	w1, [x0, #212]
    25a4:	ldr	w0, [x19, #5896]
    25a8:	ldr	w1, [x19, #5900]
    25ac:	sub	w0, w0, #0x1
    25b0:	cmp	w0, w1
    25b4:	ldr	w0, [x19, #180]
    25b8:	cset	w2, eq  // eq = none
    25bc:	sub	w0, w0, #0x1
    25c0:	str	w0, [x19, #180]
    25c4:	ldr	w0, [x19, #172]
    25c8:	add	w0, w0, #0x1
    25cc:	str	w0, [x19, #172]
    25d0:	b	23f4 <deflate+0xa8c>
    25d4:	mov	x1, #0x0                   	// #0
    25d8:	b	2408 <deflate+0xaa0>
    25dc:	ldr	x0, [x19, #152]
    25e0:	tbnz	x0, #63, 2624 <deflate+0xcbc>
    25e4:	ldr	x1, [x19, #96]
    25e8:	add	x1, x1, w0, uxtw
    25ec:	ldr	w2, [x19, #172]
    25f0:	mov	w3, #0x0                   	// #0
    25f4:	sub	x2, x2, x0
    25f8:	mov	x0, x19
    25fc:	bl	0 <_tr_flush_block>
    2600:	ldr	w0, [x19, #172]
    2604:	str	x0, [x19, #152]
    2608:	ldr	x0, [x19]
    260c:	bl	52c <flush_pending>
    2610:	ldr	x0, [x19]
    2614:	ldr	w0, [x0, #32]
    2618:	cmp	w0, #0x0
    261c:	cset	w0, ne  // ne = any
    2620:	b	1aec <deflate+0x184>
    2624:	mov	x1, #0x0                   	// #0
    2628:	b	25ec <deflate+0xc84>
    262c:	adrp	x1, 0 <slide_hash>
    2630:	add	x1, x1, #0x0
    2634:	add	x0, x1, w0, sxtw #4
    2638:	mov	w1, w21
    263c:	ldr	x2, [x0, #8]
    2640:	mov	x0, x19
    2644:	blr	x2
    2648:	b	1aec <deflate+0x184>
    264c:	cmp	w0, #0x1
    2650:	b.ne	2674 <deflate+0xd0c>  // b.any
    2654:	cmp	w21, #0x1
    2658:	b.ne	2794 <deflate+0xe2c>  // b.any
    265c:	mov	x0, x19
    2660:	bl	0 <_tr_align>
    2664:	mov	x0, x20
    2668:	bl	52c <flush_pending>
    266c:	ldr	w0, [x20, #32]
    2670:	cbz	w0, 1a3c <deflate+0xd4>
    2674:	cmp	w21, #0x4
    2678:	b.ne	19fc <deflate+0x94>  // b.any
    267c:	ldr	w0, [x19, #48]
    2680:	cmp	w0, #0x0
    2684:	b.le	2804 <deflate+0xe9c>
    2688:	cmp	w0, #0x2
    268c:	ldr	x1, [x20, #96]
    2690:	b.ne	27ec <deflate+0xe84>  // b.any
    2694:	ldr	x2, [x19, #16]
    2698:	ldr	x0, [x19, #40]
    269c:	add	x3, x0, #0x1
    26a0:	str	x3, [x19, #40]
    26a4:	strb	w1, [x2, x0]
    26a8:	ldr	x2, [x19, #16]
    26ac:	ldr	x1, [x19, #40]
    26b0:	ldr	x0, [x20, #96]
    26b4:	add	x3, x1, #0x1
    26b8:	str	x3, [x19, #40]
    26bc:	lsr	x0, x0, #8
    26c0:	strb	w0, [x2, x1]
    26c4:	ldr	x2, [x19, #16]
    26c8:	ldr	x1, [x19, #40]
    26cc:	ldr	x0, [x20, #96]
    26d0:	add	x3, x1, #0x1
    26d4:	str	x3, [x19, #40]
    26d8:	lsr	x0, x0, #16
    26dc:	strb	w0, [x2, x1]
    26e0:	ldr	x2, [x19, #16]
    26e4:	ldr	x1, [x19, #40]
    26e8:	ldr	x0, [x20, #96]
    26ec:	add	x3, x1, #0x1
    26f0:	str	x3, [x19, #40]
    26f4:	lsr	x0, x0, #24
    26f8:	strb	w0, [x2, x1]
    26fc:	ldr	x1, [x19, #16]
    2700:	ldr	x0, [x19, #40]
    2704:	ldr	x2, [x20, #16]
    2708:	add	x3, x0, #0x1
    270c:	str	x3, [x19, #40]
    2710:	strb	w2, [x1, x0]
    2714:	ldr	x0, [x20, #16]
    2718:	ldr	x2, [x19, #16]
    271c:	ldr	x1, [x19, #40]
    2720:	lsr	x0, x0, #8
    2724:	add	x3, x1, #0x1
    2728:	str	x3, [x19, #40]
    272c:	strb	w0, [x2, x1]
    2730:	ldr	x2, [x19, #16]
    2734:	ldr	x0, [x20, #16]
    2738:	ldr	x1, [x19, #40]
    273c:	lsr	x0, x0, #16
    2740:	add	x3, x1, #0x1
    2744:	str	x3, [x19, #40]
    2748:	strb	w0, [x2, x1]
    274c:	ldr	x0, [x20, #16]
    2750:	ldr	x2, [x19, #16]
    2754:	ldr	x1, [x19, #40]
    2758:	lsr	x0, x0, #24
    275c:	add	x3, x1, #0x1
    2760:	str	x3, [x19, #40]
    2764:	strb	w0, [x2, x1]
    2768:	mov	x0, x20
    276c:	bl	52c <flush_pending>
    2770:	ldr	w0, [x19, #48]
    2774:	cmp	w0, #0x0
    2778:	b.le	2784 <deflate+0xe1c>
    277c:	neg	w0, w0
    2780:	str	w0, [x19, #48]
    2784:	ldr	x0, [x19, #40]
    2788:	cmp	x0, #0x0
    278c:	cset	w22, eq  // eq = none
    2790:	b	19fc <deflate+0x94>
    2794:	cmp	w21, #0x5
    2798:	b.eq	2664 <deflate+0xcfc>  // b.none
    279c:	mov	x0, x19
    27a0:	mov	w3, #0x0                   	// #0
    27a4:	mov	x2, #0x0                   	// #0
    27a8:	mov	x1, #0x0                   	// #0
    27ac:	bl	0 <_tr_stored_block>
    27b0:	cmp	w21, #0x3
    27b4:	b.ne	2664 <deflate+0xcfc>  // b.any
    27b8:	ldr	w2, [x19, #132]
    27bc:	mov	w1, #0x0                   	// #0
    27c0:	ldr	x0, [x19, #120]
    27c4:	sub	w2, w2, #0x1
    27c8:	lsl	x2, x2, #1
    27cc:	strh	wzr, [x0, x2]
    27d0:	bl	0 <memset>
    27d4:	ldr	w0, [x19, #180]
    27d8:	cbnz	w0, 2664 <deflate+0xcfc>
    27dc:	str	xzr, [x19, #152]
    27e0:	str	wzr, [x19, #172]
    27e4:	str	wzr, [x19, #5932]
    27e8:	b	2664 <deflate+0xcfc>
    27ec:	ubfx	x1, x1, #16, #32
    27f0:	mov	x0, x19
    27f4:	bl	60 <putShortMSB>
    27f8:	ldrh	w1, [x20, #96]
    27fc:	bl	60 <putShortMSB>
    2800:	b	2768 <deflate+0xe00>
    2804:	mov	w22, #0x1                   	// #1
    2808:	b	19fc <deflate+0x94>

000000000000280c <deflateParams>:
    280c:	stp	x29, x30, [sp, #-64]!
    2810:	mov	x29, sp
    2814:	stp	x19, x20, [sp, #16]
    2818:	mov	w20, w1
    281c:	stp	x21, x22, [sp, #32]
    2820:	mov	w22, w2
    2824:	str	x23, [sp, #48]
    2828:	mov	x23, x0
    282c:	bl	12b0 <deflateStateCheck>
    2830:	cbz	w0, 2850 <deflateParams+0x44>
    2834:	mov	w21, #0xfffffffe            	// #-2
    2838:	mov	w0, w21
    283c:	ldp	x19, x20, [sp, #16]
    2840:	ldp	x21, x22, [sp, #32]
    2844:	ldr	x23, [sp, #48]
    2848:	ldp	x29, x30, [sp], #64
    284c:	ret
    2850:	mov	w21, w0
    2854:	cmn	w20, #0x1
    2858:	ldr	x19, [x23, #56]
    285c:	b.eq	28b4 <deflateParams+0xa8>  // b.none
    2860:	cmp	w20, #0x9
    2864:	b.hi	2834 <deflateParams+0x28>  // b.pmore
    2868:	cmp	w22, #0x4
    286c:	b.hi	2834 <deflateParams+0x28>  // b.pmore
    2870:	ldr	w0, [x19, #200]
    2874:	cmp	w0, w22
    2878:	b.ne	28bc <deflateParams+0xb0>  // b.any
    287c:	ldrsw	x1, [x19, #196]
    2880:	adrp	x0, 0 <slide_hash>
    2884:	add	x0, x0, #0x0
    2888:	add	x2, x0, w20, sxtw #4
    288c:	add	x0, x0, x1, lsl #4
    2890:	ldr	x1, [x2, #8]
    2894:	ldr	x0, [x0, #8]
    2898:	cmp	x1, x0
    289c:	b.ne	28bc <deflateParams+0xb0>  // b.any
    28a0:	ldr	w0, [x19, #196]
    28a4:	cmp	w0, w20
    28a8:	b.ne	28e8 <deflateParams+0xdc>  // b.any
    28ac:	str	w22, [x19, #200]
    28b0:	b	2838 <deflateParams+0x2c>
    28b4:	mov	w20, #0x6                   	// #6
    28b8:	b	2868 <deflateParams+0x5c>
    28bc:	ldr	x0, [x19, #5944]
    28c0:	cbz	x0, 28a0 <deflateParams+0x94>
    28c4:	mov	x0, x23
    28c8:	mov	w1, #0x5                   	// #5
    28cc:	bl	1968 <deflate>
    28d0:	cmn	w0, #0x2
    28d4:	b.eq	2834 <deflateParams+0x28>  // b.none
    28d8:	ldr	w0, [x23, #32]
    28dc:	cbnz	w0, 28a0 <deflateParams+0x94>
    28e0:	mov	w21, #0xfffffffb            	// #-5
    28e4:	b	2838 <deflateParams+0x2c>
    28e8:	cbnz	w0, 2920 <deflateParams+0x114>
    28ec:	ldr	w0, [x19, #5928]
    28f0:	cbz	w0, 2920 <deflateParams+0x114>
    28f4:	cmp	w0, #0x1
    28f8:	b.ne	2958 <deflateParams+0x14c>  // b.any
    28fc:	mov	x0, x19
    2900:	bl	0 <slide_hash>
    2904:	ldr	w2, [x19, #132]
    2908:	mov	w1, #0x0                   	// #0
    290c:	ldr	x0, [x19, #120]
    2910:	sub	w2, w2, #0x1
    2914:	lsl	x2, x2, #1
    2918:	bl	0 <memset>
    291c:	str	wzr, [x19, #5928]
    2920:	sbfiz	x1, x20, #4, #32
    2924:	adrp	x0, 0 <slide_hash>
    2928:	add	x0, x0, #0x0
    292c:	str	w20, [x19, #196]
    2930:	add	x20, x0, w20, sxtw #4
    2934:	ldrh	w0, [x0, x1]
    2938:	str	w0, [x19, #204]
    293c:	ldrh	w0, [x20, #4]
    2940:	ldrh	w2, [x20, #2]
    2944:	str	w0, [x19, #208]
    2948:	ldrh	w0, [x20, #6]
    294c:	str	w0, [x19, #188]
    2950:	str	w2, [x19, #192]
    2954:	b	28ac <deflateParams+0xa0>
    2958:	ldr	w0, [x19, #132]
    295c:	ldr	x1, [x19, #120]
    2960:	sub	w0, w0, #0x1
    2964:	strh	wzr, [x1, x0, lsl #1]
    2968:	b	2904 <deflateParams+0xf8>

000000000000296c <deflateEnd>:
    296c:	stp	x29, x30, [sp, #-32]!
    2970:	mov	x29, sp
    2974:	stp	x19, x20, [sp, #16]
    2978:	mov	x19, x0
    297c:	bl	12b0 <deflateStateCheck>
    2980:	cbnz	w0, 2a00 <deflateEnd+0x94>
    2984:	ldr	x0, [x19, #56]
    2988:	ldr	x1, [x0, #16]
    298c:	ldr	w20, [x0, #8]
    2990:	cbz	x1, 299c <deflateEnd+0x30>
    2994:	ldp	x2, x0, [x19, #72]
    2998:	blr	x2
    299c:	ldr	x0, [x19, #56]
    29a0:	ldr	x1, [x0, #120]
    29a4:	cbz	x1, 29b0 <deflateEnd+0x44>
    29a8:	ldp	x2, x0, [x19, #72]
    29ac:	blr	x2
    29b0:	ldr	x0, [x19, #56]
    29b4:	ldr	x1, [x0, #112]
    29b8:	cbz	x1, 29c4 <deflateEnd+0x58>
    29bc:	ldp	x2, x0, [x19, #72]
    29c0:	blr	x2
    29c4:	ldr	x0, [x19, #56]
    29c8:	ldr	x1, [x0, #96]
    29cc:	cbz	x1, 29d8 <deflateEnd+0x6c>
    29d0:	ldp	x2, x0, [x19, #72]
    29d4:	blr	x2
    29d8:	ldp	x2, x0, [x19, #72]
    29dc:	ldr	x1, [x19, #56]
    29e0:	blr	x2
    29e4:	str	xzr, [x19, #56]
    29e8:	cmp	w20, #0x71
    29ec:	mov	w0, #0xfffffffd            	// #-3
    29f0:	csel	w0, wzr, w0, ne  // ne = any
    29f4:	ldp	x19, x20, [sp, #16]
    29f8:	ldp	x29, x30, [sp], #32
    29fc:	ret
    2a00:	mov	w0, #0xfffffffe            	// #-2
    2a04:	b	29f4 <deflateEnd+0x88>

0000000000002a08 <deflateInit2_>:
    2a08:	cbz	x6, 2c74 <deflateInit2_+0x26c>
    2a0c:	stp	x29, x30, [sp, #-80]!
    2a10:	mov	x29, sp
    2a14:	stp	x19, x20, [sp, #16]
    2a18:	mov	x20, x0
    2a1c:	ldrb	w0, [x6]
    2a20:	stp	x21, x22, [sp, #32]
    2a24:	cmp	w0, #0x31
    2a28:	stp	x23, x24, [sp, #48]
    2a2c:	str	x25, [sp, #64]
    2a30:	b.ne	2c7c <deflateInit2_+0x274>  // b.any
    2a34:	cmp	w7, #0x70
    2a38:	b.ne	2c7c <deflateInit2_+0x274>  // b.any
    2a3c:	cbnz	x20, 2a5c <deflateInit2_+0x54>
    2a40:	mov	w0, #0xfffffffe            	// #-2
    2a44:	ldp	x19, x20, [sp, #16]
    2a48:	ldp	x21, x22, [sp, #32]
    2a4c:	ldp	x23, x24, [sp, #48]
    2a50:	ldr	x25, [sp, #64]
    2a54:	ldp	x29, x30, [sp], #80
    2a58:	ret
    2a5c:	ldr	x0, [x20, #64]
    2a60:	str	xzr, [x20, #48]
    2a64:	mov	w25, w1
    2a68:	mov	w21, w3
    2a6c:	mov	w22, w4
    2a70:	mov	w23, w5
    2a74:	cbnz	x0, 2a88 <deflateInit2_+0x80>
    2a78:	adrp	x0, 0 <zcalloc>
    2a7c:	add	x0, x0, #0x0
    2a80:	str	x0, [x20, #64]
    2a84:	str	xzr, [x20, #80]
    2a88:	ldr	x0, [x20, #72]
    2a8c:	cbnz	x0, 2a9c <deflateInit2_+0x94>
    2a90:	adrp	x0, 0 <zcfree>
    2a94:	add	x0, x0, #0x0
    2a98:	str	x0, [x20, #72]
    2a9c:	cmn	w25, #0x1
    2aa0:	b.ne	2aa8 <deflateInit2_+0xa0>  // b.any
    2aa4:	mov	w25, #0x6                   	// #6
    2aa8:	tbz	w21, #31, 2c1c <deflateInit2_+0x214>
    2aac:	neg	w21, w21
    2ab0:	mov	w24, #0x0                   	// #0
    2ab4:	sub	w0, w22, #0x1
    2ab8:	cmp	w0, #0x8
    2abc:	b.hi	2a40 <deflateInit2_+0x38>  // b.pmore
    2ac0:	sub	w0, w21, #0x8
    2ac4:	cmp	w0, #0x7
    2ac8:	ccmp	w2, #0x8, #0x0, ls  // ls = plast
    2acc:	b.ne	2a40 <deflateInit2_+0x38>  // b.any
    2ad0:	cmp	w25, #0x9
    2ad4:	b.hi	2a40 <deflateInit2_+0x38>  // b.pmore
    2ad8:	cmp	w23, #0x4
    2adc:	b.hi	2a40 <deflateInit2_+0x38>  // b.pmore
    2ae0:	cmp	w21, #0x8
    2ae4:	ccmp	w24, #0x1, #0x4, eq  // eq = none
    2ae8:	b.ne	2a40 <deflateInit2_+0x38>  // b.any
    2aec:	cmp	w21, #0x8
    2af0:	mov	w0, #0x9                   	// #9
    2af4:	csel	w21, w21, w0, ne  // ne = any
    2af8:	mov	w2, #0x1740                	// #5952
    2afc:	ldr	x3, [x20, #64]
    2b00:	mov	w1, #0x1                   	// #1
    2b04:	ldr	x0, [x20, #80]
    2b08:	blr	x3
    2b0c:	mov	x19, x0
    2b10:	cbz	x0, 2c14 <deflateInit2_+0x20c>
    2b14:	str	x19, [x20, #56]
    2b18:	mov	w0, #0x2a                  	// #42
    2b1c:	ldr	x3, [x20, #64]
    2b20:	str	w24, [x19, #48]
    2b24:	mov	w24, #0x1                   	// #1
    2b28:	str	w0, [x19, #8]
    2b2c:	lsl	w1, w24, w21
    2b30:	sub	w0, w1, #0x1
    2b34:	str	w0, [x19, #88]
    2b38:	add	w0, w22, #0x7
    2b3c:	str	w0, [x19, #136]
    2b40:	mov	w2, #0x2                   	// #2
    2b44:	lsl	w0, w24, w0
    2b48:	str	w0, [x19, #132]
    2b4c:	sub	w0, w0, #0x1
    2b50:	str	w0, [x19, #140]
    2b54:	add	w0, w22, #0x9
    2b58:	str	w21, [x19, #84]
    2b5c:	mov	w21, #0x3                   	// #3
    2b60:	str	x20, [x19]
    2b64:	str	xzr, [x19, #56]
    2b68:	add	w22, w22, #0x6
    2b6c:	udiv	w0, w0, w21
    2b70:	str	w1, [x19, #80]
    2b74:	str	w0, [x19, #144]
    2b78:	ldr	x0, [x20, #80]
    2b7c:	blr	x3
    2b80:	ldr	w1, [x19, #80]
    2b84:	mov	w2, #0x2                   	// #2
    2b88:	ldr	x3, [x20, #64]
    2b8c:	str	x0, [x19, #96]
    2b90:	ldr	x0, [x20, #80]
    2b94:	blr	x3
    2b98:	ldr	w1, [x19, #132]
    2b9c:	mov	w2, #0x2                   	// #2
    2ba0:	ldr	x3, [x20, #64]
    2ba4:	str	x0, [x19, #112]
    2ba8:	ldr	x0, [x20, #80]
    2bac:	blr	x3
    2bb0:	ldr	x3, [x20, #64]
    2bb4:	str	x0, [x19, #120]
    2bb8:	ldr	x0, [x20, #80]
    2bbc:	lsl	w1, w24, w22
    2bc0:	str	w1, [x19, #5896]
    2bc4:	mov	w2, #0x4                   	// #4
    2bc8:	str	xzr, [x19, #5944]
    2bcc:	blr	x3
    2bd0:	ldr	w1, [x19, #5896]
    2bd4:	ubfiz	x2, x1, #2, #32
    2bd8:	stp	x0, x2, [x19, #16]
    2bdc:	ldr	x2, [x19, #96]
    2be0:	cbz	x2, 2bf8 <deflateInit2_+0x1f0>
    2be4:	ldr	x2, [x19, #112]
    2be8:	cbz	x2, 2bf8 <deflateInit2_+0x1f0>
    2bec:	ldr	x2, [x19, #120]
    2bf0:	cbz	x2, 2bf8 <deflateInit2_+0x1f0>
    2bf4:	cbnz	x0, 2c38 <deflateInit2_+0x230>
    2bf8:	mov	w0, #0x29a                 	// #666
    2bfc:	str	w0, [x19, #8]
    2c00:	adrp	x0, 0 <z_errmsg>
    2c04:	ldr	x0, [x0]
    2c08:	str	x0, [x20, #48]
    2c0c:	mov	x0, x20
    2c10:	bl	296c <deflateEnd>
    2c14:	mov	w0, #0xfffffffc            	// #-4
    2c18:	b	2a44 <deflateInit2_+0x3c>
    2c1c:	cmp	w21, #0xf
    2c20:	b.le	2c30 <deflateInit2_+0x228>
    2c24:	sub	w21, w21, #0x10
    2c28:	mov	w24, #0x2                   	// #2
    2c2c:	b	2ab4 <deflateInit2_+0xac>
    2c30:	mov	w24, #0x1                   	// #1
    2c34:	b	2ab4 <deflateInit2_+0xac>
    2c38:	and	x2, x1, #0xfffffffe
    2c3c:	stp	w25, w23, [x19, #196]
    2c40:	add	x2, x0, x2
    2c44:	umaddl	x0, w1, w21, x0
    2c48:	str	x0, [x19, #5888]
    2c4c:	mov	w0, #0x8                   	// #8
    2c50:	strb	w0, [x19, #72]
    2c54:	str	x2, [x19, #5904]
    2c58:	mov	x0, x20
    2c5c:	ldp	x19, x20, [sp, #16]
    2c60:	ldp	x21, x22, [sp, #32]
    2c64:	ldp	x23, x24, [sp, #48]
    2c68:	ldr	x25, [sp, #64]
    2c6c:	ldp	x29, x30, [sp], #80
    2c70:	b	1620 <deflateReset>
    2c74:	mov	w0, #0xfffffffa            	// #-6
    2c78:	ret
    2c7c:	mov	w0, #0xfffffffa            	// #-6
    2c80:	b	2a44 <deflateInit2_+0x3c>

0000000000002c84 <deflateInit_>:
    2c84:	mov	w7, w3
    2c88:	mov	x6, x2
    2c8c:	mov	w4, #0x8                   	// #8
    2c90:	mov	w5, #0x0                   	// #0
    2c94:	mov	w2, w4
    2c98:	mov	w3, #0xf                   	// #15
    2c9c:	b	2a08 <deflateInit2_>

0000000000002ca0 <deflateCopy>:
    2ca0:	stp	x29, x30, [sp, #-64]!
    2ca4:	mov	x3, x1
    2ca8:	mov	x29, sp
    2cac:	stp	x19, x20, [sp, #16]
    2cb0:	mov	x20, x0
    2cb4:	mov	x0, x1
    2cb8:	stp	x21, x22, [sp, #32]
    2cbc:	str	x23, [sp, #48]
    2cc0:	bl	12b0 <deflateStateCheck>
    2cc4:	cbnz	w0, 2e50 <deflateCopy+0x1b0>
    2cc8:	cbz	x20, 2e50 <deflateCopy+0x1b0>
    2ccc:	mov	x1, x3
    2cd0:	mov	x2, #0x70                  	// #112
    2cd4:	mov	w21, w0
    2cd8:	mov	x0, x20
    2cdc:	ldr	x23, [x3, #56]
    2ce0:	bl	0 <memcpy>
    2ce4:	ldr	x3, [x20, #64]
    2ce8:	mov	w2, #0x1740                	// #5952
    2cec:	ldr	x0, [x20, #80]
    2cf0:	mov	w1, #0x1                   	// #1
    2cf4:	blr	x3
    2cf8:	mov	x19, x0
    2cfc:	cbz	x0, 2d9c <deflateCopy+0xfc>
    2d00:	str	x0, [x20, #56]
    2d04:	mov	x1, x23
    2d08:	mov	x2, #0x1740                	// #5952
    2d0c:	bl	0 <memcpy>
    2d10:	ldr	w1, [x19, #80]
    2d14:	mov	w2, #0x2                   	// #2
    2d18:	ldr	x3, [x20, #64]
    2d1c:	ldr	x0, [x20, #80]
    2d20:	str	x20, [x19]
    2d24:	blr	x3
    2d28:	ldr	w1, [x19, #80]
    2d2c:	mov	w2, #0x2                   	// #2
    2d30:	ldr	x3, [x20, #64]
    2d34:	str	x0, [x19, #96]
    2d38:	ldr	x0, [x20, #80]
    2d3c:	blr	x3
    2d40:	ldr	w1, [x19, #132]
    2d44:	mov	w2, #0x2                   	// #2
    2d48:	ldr	x3, [x20, #64]
    2d4c:	str	x0, [x19, #112]
    2d50:	ldr	x0, [x20, #80]
    2d54:	blr	x3
    2d58:	ldr	w1, [x19, #5896]
    2d5c:	mov	w2, #0x4                   	// #4
    2d60:	ldr	x3, [x20, #64]
    2d64:	str	x0, [x19, #120]
    2d68:	ldr	x0, [x20, #80]
    2d6c:	blr	x3
    2d70:	mov	x22, x0
    2d74:	ldr	x0, [x19, #96]
    2d78:	str	x22, [x19, #16]
    2d7c:	cbz	x0, 2d94 <deflateCopy+0xf4>
    2d80:	ldr	x1, [x19, #112]
    2d84:	cbz	x1, 2d94 <deflateCopy+0xf4>
    2d88:	ldr	x1, [x19, #120]
    2d8c:	cbz	x1, 2d94 <deflateCopy+0xf4>
    2d90:	cbnz	x22, 2da4 <deflateCopy+0x104>
    2d94:	mov	x0, x20
    2d98:	bl	296c <deflateEnd>
    2d9c:	mov	w21, #0xfffffffc            	// #-4
    2da0:	b	2e38 <deflateCopy+0x198>
    2da4:	ldr	x1, [x23, #96]
    2da8:	ldr	w2, [x19, #80]
    2dac:	lsl	w2, w2, #1
    2db0:	bl	0 <memcpy>
    2db4:	ldr	x1, [x23, #112]
    2db8:	ldr	x0, [x19, #112]
    2dbc:	ldr	w2, [x19, #80]
    2dc0:	lsl	x2, x2, #1
    2dc4:	bl	0 <memcpy>
    2dc8:	ldr	x1, [x23, #120]
    2dcc:	ldr	x0, [x19, #120]
    2dd0:	ldr	w2, [x19, #132]
    2dd4:	lsl	x2, x2, #1
    2dd8:	bl	0 <memcpy>
    2ddc:	ldr	w2, [x19, #24]
    2de0:	ldr	x1, [x23, #16]
    2de4:	ldr	x0, [x19, #16]
    2de8:	bl	0 <memcpy>
    2dec:	ldr	x1, [x23, #16]
    2df0:	ldr	x0, [x23, #32]
    2df4:	ldr	x2, [x19, #16]
    2df8:	sub	x0, x0, x1
    2dfc:	ldr	w1, [x19, #5896]
    2e00:	add	x0, x2, x0
    2e04:	str	x0, [x19, #32]
    2e08:	and	x0, x1, #0xfffffffe
    2e0c:	add	x22, x22, x0
    2e10:	mov	w0, #0x3                   	// #3
    2e14:	str	x22, [x19, #5904]
    2e18:	umaddl	x1, w1, w0, x2
    2e1c:	add	x0, x19, #0xd4
    2e20:	str	x0, [x19, #2904]
    2e24:	add	x0, x19, #0x9c8
    2e28:	str	x0, [x19, #2928]
    2e2c:	add	x0, x19, #0xabc
    2e30:	str	x0, [x19, #2952]
    2e34:	str	x1, [x19, #5888]
    2e38:	mov	w0, w21
    2e3c:	ldp	x19, x20, [sp, #16]
    2e40:	ldp	x21, x22, [sp, #32]
    2e44:	ldr	x23, [sp, #48]
    2e48:	ldp	x29, x30, [sp], #64
    2e4c:	ret
    2e50:	mov	w21, #0xfffffffe            	// #-2
    2e54:	b	2e38 <deflateCopy+0x198>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
   0:	cbz	x3, c8 <inflateBackInit_+0xc8>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	str	x21, [sp, #32]
  18:	ldrb	w0, [x3]
  1c:	cmp	w0, #0x31
  20:	b.ne	d0 <inflateBackInit_+0xd0>  // b.any
  24:	cmp	w4, #0x70
  28:	b.ne	d0 <inflateBackInit_+0xd0>  // b.any
  2c:	cmp	x19, #0x0
  30:	mov	x21, x2
  34:	ccmp	x2, #0x0, #0x4, ne  // ne = any
  38:	b.eq	d8 <inflateBackInit_+0xd8>  // b.none
  3c:	sub	w0, w1, #0x8
  40:	mov	w20, w1
  44:	cmp	w0, #0x7
  48:	b.hi	d8 <inflateBackInit_+0xd8>  // b.pmore
  4c:	ldr	x0, [x19, #64]
  50:	str	xzr, [x19, #48]
  54:	cbnz	x0, 68 <inflateBackInit_+0x68>
  58:	adrp	x0, 0 <zcalloc>
  5c:	add	x0, x0, #0x0
  60:	str	x0, [x19, #64]
  64:	str	xzr, [x19, #80]
  68:	ldr	x0, [x19, #72]
  6c:	cbnz	x0, 7c <inflateBackInit_+0x7c>
  70:	adrp	x0, 0 <zcfree>
  74:	add	x0, x0, #0x0
  78:	str	x0, [x19, #72]
  7c:	ldr	x3, [x19, #64]
  80:	mov	w2, #0x1bf8                	// #7160
  84:	ldr	x0, [x19, #80]
  88:	mov	w1, #0x1                   	// #1
  8c:	blr	x3
  90:	cbz	x0, e0 <inflateBackInit_+0xe0>
  94:	mov	w1, #0x8000                	// #32768
  98:	str	x0, [x19, #56]
  9c:	str	w1, [x0, #28]
  a0:	mov	w1, #0x1                   	// #1
  a4:	str	w20, [x0, #56]
  a8:	lsl	w20, w1, w20
  ac:	str	w20, [x0, #60]
  b0:	stp	xzr, x21, [x0, #64]
  b4:	mov	w0, #0x0                   	// #0
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldr	x21, [sp, #32]
  c0:	ldp	x29, x30, [sp], #48
  c4:	ret
  c8:	mov	w0, #0xfffffffa            	// #-6
  cc:	ret
  d0:	mov	w0, #0xfffffffa            	// #-6
  d4:	b	b8 <inflateBackInit_+0xb8>
  d8:	mov	w0, #0xfffffffe            	// #-2
  dc:	b	b8 <inflateBackInit_+0xb8>
  e0:	mov	w0, #0xfffffffc            	// #-4
  e4:	b	b8 <inflateBackInit_+0xb8>

00000000000000e8 <inflateBack>:
  e8:	stp	x29, x30, [sp, #-192]!
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	stp	x21, x22, [sp, #32]
  f8:	stp	x23, x24, [sp, #48]
  fc:	stp	x25, x26, [sp, #64]
 100:	stp	x27, x28, [sp, #80]
 104:	stp	x3, x4, [sp, #104]
 108:	cbz	x0, d78 <inflateBack+0xc90>
 10c:	ldr	x24, [x0, #56]
 110:	mov	x20, x0
 114:	cbz	x24, d78 <inflateBack+0xc90>
 118:	str	xzr, [x20, #48]
 11c:	mov	x0, #0x3f3f                	// #16191
 120:	str	x0, [x24, #8]
 124:	mov	x22, x1
 128:	str	wzr, [x24, #64]
 12c:	mov	x23, x2
 130:	ldr	x0, [x20]
 134:	str	x0, [sp, #184]
 138:	cbz	x0, 1a8 <inflateBack+0xc0>
 13c:	ldr	w28, [x20, #8]
 140:	ldr	w19, [x24, #60]
 144:	adrp	x0, 0 <inflateBackInit_>
 148:	ldr	x21, [x24, #72]
 14c:	add	x0, x0, #0x0
 150:	mov	w26, #0x0                   	// #0
 154:	mov	x27, #0x0                   	// #0
 158:	str	x0, [sp, #120]
 15c:	add	x0, x0, #0x880
 160:	str	x0, [sp, #160]
 164:	ldr	w0, [x24, #8]
 168:	mov	w1, #0x3f48                	// #16200
 16c:	cmp	w0, w1
 170:	b.hi	1b0 <inflateBack+0xc8>  // b.pmore
 174:	mov	w1, #0x3f3e                	// #16190
 178:	cmp	w0, w1
 17c:	b.ls	d60 <inflateBack+0xc78>  // b.plast
 180:	mov	w1, #0xffffc0c1            	// #-16191
 184:	add	w0, w0, w1
 188:	cmp	w0, #0x9
 18c:	b.hi	d60 <inflateBack+0xc78>  // b.pmore
 190:	adrp	x1, 0 <inflateBackInit_>
 194:	add	x1, x1, #0x0
 198:	ldrh	w0, [x1, w0, uxtw #1]
 19c:	adr	x1, 1a8 <inflateBack+0xc0>
 1a0:	add	x0, x1, w0, sxth #2
 1a4:	br	x0
 1a8:	mov	w28, #0x0                   	// #0
 1ac:	b	140 <inflateBack+0x58>
 1b0:	mov	w1, #0x3f50                	// #16208
 1b4:	cmp	w0, w1
 1b8:	b.eq	d34 <inflateBack+0xc4c>  // b.none
 1bc:	mov	w1, #0x3f51                	// #16209
 1c0:	cmp	w0, w1
 1c4:	cset	w0, ne  // ne = any
 1c8:	sub	w0, w0, #0x3
 1cc:	ldr	x1, [sp, #184]
 1d0:	str	x1, [x20]
 1d4:	str	w28, [x20, #8]
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	ldp	x21, x22, [sp, #32]
 1e0:	ldp	x23, x24, [sp, #48]
 1e4:	ldp	x25, x26, [sp, #64]
 1e8:	ldp	x27, x28, [sp, #80]
 1ec:	ldp	x29, x30, [sp], #192
 1f0:	ret
 1f4:	ldr	w0, [x24, #12]
 1f8:	cbz	w0, 25c <inflateBack+0x174>
 1fc:	and	w0, w26, #0x7
 200:	and	w26, w26, #0xfffffff8
 204:	lsr	x27, x27, x0
 208:	mov	w0, #0x3f50                	// #16208
 20c:	str	w0, [x24, #8]
 210:	b	164 <inflateBack+0x7c>
 214:	cbnz	w28, 23c <inflateBack+0x154>
 218:	add	x1, sp, #0xb8
 21c:	mov	x0, x23
 220:	blr	x22
 224:	mov	w28, w0
 228:	cbnz	w0, 23c <inflateBack+0x154>
 22c:	mov	w0, #0xfffffffb            	// #-5
 230:	mov	w28, #0x0                   	// #0
 234:	str	xzr, [sp, #184]
 238:	b	1cc <inflateBack+0xe4>
 23c:	ldr	x0, [sp, #184]
 240:	sub	w28, w28, #0x1
 244:	add	x1, x0, #0x1
 248:	str	x1, [sp, #184]
 24c:	ldrb	w0, [x0]
 250:	lsl	x0, x0, x26
 254:	add	w26, w26, #0x8
 258:	add	x27, x27, x0
 25c:	cmp	w26, #0x2
 260:	b.ls	214 <inflateBack+0x12c>  // b.plast
 264:	and	w0, w27, #0x1
 268:	str	w0, [x24, #12]
 26c:	ubfx	w0, w27, #1, #2
 270:	cmp	w0, #0x2
 274:	b.eq	2c0 <inflateBack+0x1d8>  // b.none
 278:	cmp	w0, #0x3
 27c:	b.eq	2c8 <inflateBack+0x1e0>  // b.none
 280:	cmp	w0, #0x1
 284:	b.eq	29c <inflateBack+0x1b4>  // b.none
 288:	mov	w0, #0x3f41                	// #16193
 28c:	lsr	x27, x27, #3
 290:	sub	w26, w26, #0x3
 294:	str	w0, [x24, #8]
 298:	b	164 <inflateBack+0x7c>
 29c:	ldr	x0, [sp, #120]
 2a0:	str	x0, [x24, #104]
 2a4:	add	x0, x0, #0x800
 2a8:	str	x0, [x24, #112]
 2ac:	mov	x0, #0x9                   	// #9
 2b0:	movk	x0, #0x5, lsl #32
 2b4:	str	x0, [x24, #120]
 2b8:	mov	w0, #0x3f48                	// #16200
 2bc:	b	28c <inflateBack+0x1a4>
 2c0:	mov	w0, #0x3f44                	// #16196
 2c4:	b	28c <inflateBack+0x1a4>
 2c8:	adrp	x0, 0 <inflateBackInit_>
 2cc:	add	x0, x0, #0x0
 2d0:	str	x0, [x20, #48]
 2d4:	mov	w0, #0x3f51                	// #16209
 2d8:	b	28c <inflateBack+0x1a4>
 2dc:	and	w0, w26, #0x7
 2e0:	and	w26, w26, #0xfffffff8
 2e4:	lsr	x27, x27, x0
 2e8:	cmp	w26, #0x1f
 2ec:	b.ls	318 <inflateBack+0x230>  // b.plast
 2f0:	lsr	x0, x27, #16
 2f4:	and	x1, x27, #0xffff
 2f8:	eor	x0, x0, #0xffff
 2fc:	cmp	x0, w27, uxth
 300:	b.eq	354 <inflateBack+0x26c>  // b.none
 304:	adrp	x0, 0 <inflateBackInit_>
 308:	add	x0, x0, #0x0
 30c:	str	x0, [x20, #48]
 310:	mov	w0, #0x3f51                	// #16209
 314:	b	20c <inflateBack+0x124>
 318:	cbnz	w28, 330 <inflateBack+0x248>
 31c:	add	x1, sp, #0xb8
 320:	mov	x0, x23
 324:	blr	x22
 328:	mov	w28, w0
 32c:	cbz	w0, 22c <inflateBack+0x144>
 330:	ldr	x0, [sp, #184]
 334:	sub	w28, w28, #0x1
 338:	add	x1, x0, #0x1
 33c:	str	x1, [sp, #184]
 340:	ldrb	w0, [x0]
 344:	lsl	x0, x0, x26
 348:	add	w26, w26, #0x8
 34c:	add	x27, x27, x0
 350:	b	2e8 <inflateBack+0x200>
 354:	str	w1, [x24, #92]
 358:	ldr	w26, [x24, #92]
 35c:	cbnz	w26, 370 <inflateBack+0x288>
 360:	mov	w0, #0x3f3f                	// #16191
 364:	mov	x27, #0x0                   	// #0
 368:	str	w0, [x24, #8]
 36c:	b	164 <inflateBack+0x7c>
 370:	cbnz	w28, 388 <inflateBack+0x2a0>
 374:	add	x1, sp, #0xb8
 378:	mov	x0, x23
 37c:	blr	x22
 380:	mov	w28, w0
 384:	cbz	w0, 22c <inflateBack+0x144>
 388:	cbnz	w19, 3ac <inflateBack+0x2c4>
 38c:	ldp	x3, x0, [sp, #104]
 390:	ldr	w19, [x24, #60]
 394:	ldr	x21, [x24, #72]
 398:	str	w19, [x24, #64]
 39c:	mov	w2, w19
 3a0:	mov	x1, x21
 3a4:	blr	x3
 3a8:	cbnz	w0, d68 <inflateBack+0xc80>
 3ac:	cmp	w26, w28
 3b0:	mov	x0, x21
 3b4:	csel	w8, w26, w28, ls  // ls = plast
 3b8:	ldr	x1, [sp, #184]
 3bc:	cmp	w19, w8
 3c0:	csel	w25, w19, w8, ls  // ls = plast
 3c4:	csel	w26, w19, w8, ls  // ls = plast
 3c8:	mov	x2, x25
 3cc:	sub	w28, w28, w26
 3d0:	bl	0 <memcpy>
 3d4:	sub	w19, w19, w26
 3d8:	ldr	x0, [sp, #184]
 3dc:	add	x21, x21, x25
 3e0:	add	x0, x0, x25
 3e4:	str	x0, [sp, #184]
 3e8:	ldr	w0, [x24, #92]
 3ec:	sub	w0, w0, w26
 3f0:	str	w0, [x24, #92]
 3f4:	b	358 <inflateBack+0x270>
 3f8:	cbnz	w28, 410 <inflateBack+0x328>
 3fc:	add	x1, sp, #0xb8
 400:	mov	x0, x23
 404:	blr	x22
 408:	mov	w28, w0
 40c:	cbz	w0, 22c <inflateBack+0x144>
 410:	ldr	x0, [sp, #184]
 414:	sub	w28, w28, #0x1
 418:	add	x1, x0, #0x1
 41c:	str	x1, [sp, #184]
 420:	ldrb	w0, [x0]
 424:	lsl	x0, x0, x26
 428:	add	w26, w26, #0x8
 42c:	add	x27, x27, x0
 430:	cmp	w26, #0xd
 434:	b.ls	3f8 <inflateBack+0x310>  // b.plast
 438:	and	w1, w27, #0x1f
 43c:	ubfx	w0, w27, #5, #5
 440:	ubfx	w2, w27, #10, #4
 444:	add	w1, w1, #0x101
 448:	add	w0, w0, #0x1
 44c:	add	w2, w2, #0x4
 450:	stp	w2, w1, [x24, #128]
 454:	lsr	x27, x27, #14
 458:	str	w0, [x24, #136]
 45c:	sub	w26, w26, #0xe
 460:	cmp	w1, #0x11e
 464:	b.hi	470 <inflateBack+0x388>  // b.pmore
 468:	cmp	w0, #0x1e
 46c:	b.ls	47c <inflateBack+0x394>  // b.plast
 470:	adrp	x0, 0 <inflateBackInit_>
 474:	add	x0, x0, #0x0
 478:	b	30c <inflateBack+0x224>
 47c:	ldr	x0, [sp, #120]
 480:	str	wzr, [x24, #140]
 484:	add	x25, x0, #0x880
 488:	cmp	w26, #0x2
 48c:	b.ls	52c <inflateBack+0x444>  // b.plast
 490:	ldr	w0, [x24, #140]
 494:	and	w2, w27, #0x7
 498:	sub	w26, w26, #0x3
 49c:	lsr	x27, x27, #3
 4a0:	add	w1, w0, #0x1
 4a4:	str	w1, [x24, #140]
 4a8:	ldrh	w0, [x25, w0, uxtw #1]
 4ac:	add	x0, x24, x0, lsl #1
 4b0:	strh	w2, [x0, #152]
 4b4:	ldr	w0, [x24, #128]
 4b8:	cmp	w1, w0
 4bc:	b.cc	488 <inflateBack+0x3a0>  // b.lo, b.ul, b.last
 4c0:	ldr	w0, [x24, #140]
 4c4:	cmp	w0, #0x12
 4c8:	b.ls	568 <inflateBack+0x480>  // b.plast
 4cc:	add	x0, x24, #0x558
 4d0:	str	x0, [x24, #104]
 4d4:	str	x0, [sp, #128]
 4d8:	add	x25, x24, #0x90
 4dc:	str	x0, [x24, #144]
 4e0:	mov	w0, #0x7                   	// #7
 4e4:	str	w0, [x24, #120]
 4e8:	add	x0, x24, #0x98
 4ec:	str	x0, [sp, #136]
 4f0:	add	x0, x24, #0x78
 4f4:	str	x0, [sp, #152]
 4f8:	add	x0, x24, #0x318
 4fc:	mov	x5, x0
 500:	add	x4, x24, #0x78
 504:	mov	x3, x25
 508:	add	x1, x24, #0x98
 50c:	mov	w2, #0x13                  	// #19
 510:	str	x0, [sp, #144]
 514:	mov	w0, #0x0                   	// #0
 518:	bl	0 <inflate_table>
 51c:	cbz	w0, 584 <inflateBack+0x49c>
 520:	adrp	x0, 0 <inflateBackInit_>
 524:	add	x0, x0, #0x0
 528:	b	30c <inflateBack+0x224>
 52c:	cbnz	w28, 544 <inflateBack+0x45c>
 530:	add	x1, sp, #0xb8
 534:	mov	x0, x23
 538:	blr	x22
 53c:	mov	w28, w0
 540:	cbz	w0, 22c <inflateBack+0x144>
 544:	ldr	x0, [sp, #184]
 548:	sub	w28, w28, #0x1
 54c:	add	x1, x0, #0x1
 550:	str	x1, [sp, #184]
 554:	ldrb	w0, [x0]
 558:	lsl	x0, x0, x26
 55c:	add	w26, w26, #0x8
 560:	add	x27, x27, x0
 564:	b	488 <inflateBack+0x3a0>
 568:	add	w1, w0, #0x1
 56c:	str	w1, [x24, #140]
 570:	ldr	x1, [sp, #160]
 574:	ldrh	w0, [x1, w0, uxtw #1]
 578:	add	x0, x24, x0, lsl #1
 57c:	strh	wzr, [x0, #152]
 580:	b	4c0 <inflateBack+0x3d8>
 584:	str	wzr, [x24, #140]
 588:	ldp	w0, w1, [x24, #132]
 58c:	add	w0, w0, w1
 590:	ldr	w1, [x24, #140]
 594:	cmp	w1, w0
 598:	b.cs	660 <inflateBack+0x578>  // b.hs, b.nlast
 59c:	ldr	w0, [x24, #120]
 5a0:	mov	w1, #0xffffffff            	// #-1
 5a4:	lsl	w0, w1, w0
 5a8:	bic	w0, w27, w0
 5ac:	ldr	x1, [x24, #104]
 5b0:	add	x0, x1, x0, lsl #2
 5b4:	ldrb	w2, [x0, #1]
 5b8:	cmp	w2, w26
 5bc:	b.ls	5fc <inflateBack+0x514>  // b.plast
 5c0:	cbnz	w28, 5d8 <inflateBack+0x4f0>
 5c4:	add	x1, sp, #0xb8
 5c8:	mov	x0, x23
 5cc:	blr	x22
 5d0:	mov	w28, w0
 5d4:	cbz	w0, 22c <inflateBack+0x144>
 5d8:	ldr	x0, [sp, #184]
 5dc:	sub	w28, w28, #0x1
 5e0:	add	x1, x0, #0x1
 5e4:	str	x1, [sp, #184]
 5e8:	ldrb	w0, [x0]
 5ec:	lsl	x0, x0, x26
 5f0:	add	w26, w26, #0x8
 5f4:	add	x27, x27, x0
 5f8:	b	59c <inflateBack+0x4b4>
 5fc:	ldrh	w0, [x0, #2]
 600:	cmp	w0, #0xf
 604:	b.hi	628 <inflateBack+0x540>  // b.pmore
 608:	ldr	w1, [x24, #140]
 60c:	sub	w26, w26, w2
 610:	lsr	x27, x27, x2
 614:	add	w2, w1, #0x1
 618:	str	w2, [x24, #140]
 61c:	add	x1, x24, w1, uxtw #1
 620:	strh	w0, [x1, #152]
 624:	b	588 <inflateBack+0x4a0>
 628:	cmp	w0, #0x10
 62c:	b.ne	728 <inflateBack+0x640>  // b.any
 630:	add	w3, w2, #0x2
 634:	cmp	w3, w26
 638:	b.hi	68c <inflateBack+0x5a4>  // b.pmore
 63c:	ldr	w0, [x24, #140]
 640:	sub	w26, w26, w2
 644:	lsr	x27, x27, x2
 648:	cbnz	w0, 6d0 <inflateBack+0x5e8>
 64c:	adrp	x0, 0 <inflateBackInit_>
 650:	add	x0, x0, #0x0
 654:	str	x0, [x20, #48]
 658:	mov	w0, #0x3f51                	// #16209
 65c:	str	w0, [x24, #8]
 660:	ldr	w0, [x24, #8]
 664:	mov	w10, #0x3f51                	// #16209
 668:	cmp	w0, w10
 66c:	b.eq	164 <inflateBack+0x7c>  // b.none
 670:	ldrh	w0, [x24, #664]
 674:	cbnz	w0, 810 <inflateBack+0x728>
 678:	adrp	x0, 0 <inflateBackInit_>
 67c:	add	x0, x0, #0x0
 680:	str	x0, [x20, #48]
 684:	str	w10, [x24, #8]
 688:	b	164 <inflateBack+0x7c>
 68c:	cbnz	w28, 6ac <inflateBack+0x5c4>
 690:	stp	w2, w3, [sp, #168]
 694:	add	x1, sp, #0xb8
 698:	mov	x0, x23
 69c:	blr	x22
 6a0:	mov	w28, w0
 6a4:	ldp	w2, w3, [sp, #168]
 6a8:	cbz	w0, 22c <inflateBack+0x144>
 6ac:	ldr	x0, [sp, #184]
 6b0:	sub	w28, w28, #0x1
 6b4:	add	x1, x0, #0x1
 6b8:	str	x1, [sp, #184]
 6bc:	ldrb	w0, [x0]
 6c0:	lsl	x0, x0, x26
 6c4:	add	w26, w26, #0x8
 6c8:	add	x27, x27, x0
 6cc:	b	634 <inflateBack+0x54c>
 6d0:	sub	w0, w0, #0x1
 6d4:	sub	w26, w26, #0x2
 6d8:	add	x0, x24, x0, lsl #1
 6dc:	ldrh	w2, [x0, #152]
 6e0:	and	w0, w27, #0x3
 6e4:	add	w0, w0, #0x3
 6e8:	lsr	x27, x27, #2
 6ec:	ldp	w1, w4, [x24, #132]
 6f0:	ldr	w3, [x24, #140]
 6f4:	add	w1, w1, w4
 6f8:	add	w3, w0, w3
 6fc:	cmp	w3, w1
 700:	b.hi	64c <inflateBack+0x564>  // b.pmore
 704:	sub	w0, w0, #0x1
 708:	ldr	w1, [x24, #140]
 70c:	cmn	w0, #0x1
 710:	b.eq	588 <inflateBack+0x4a0>  // b.none
 714:	add	w3, w1, #0x1
 718:	add	x1, x24, w1, uxtw #1
 71c:	str	w3, [x24, #140]
 720:	strh	w2, [x1, #152]
 724:	b	704 <inflateBack+0x61c>
 728:	cmp	w0, #0x11
 72c:	b.ne	75c <inflateBack+0x674>  // b.any
 730:	add	w3, w2, #0x3
 734:	cmp	w3, w26
 738:	b.hi	788 <inflateBack+0x6a0>  // b.pmore
 73c:	lsr	x9, x27, x2
 740:	sub	w8, w26, w2
 744:	and	w0, w9, #0x7
 748:	lsr	x27, x9, #3
 74c:	add	w0, w0, #0x3
 750:	sub	w26, w8, #0x3
 754:	mov	w2, #0x0                   	// #0
 758:	b	6ec <inflateBack+0x604>
 75c:	add	w3, w2, #0x7
 760:	cmp	w3, w26
 764:	b.hi	7cc <inflateBack+0x6e4>  // b.pmore
 768:	lsr	x9, x27, x2
 76c:	mov	w1, #0xfffffff9            	// #-7
 770:	and	w0, w9, #0x7f
 774:	sub	w2, w1, w2
 778:	add	w0, w0, #0xb
 77c:	lsr	x27, x9, #7
 780:	add	w26, w26, w2
 784:	b	754 <inflateBack+0x66c>
 788:	cbnz	w28, 7a8 <inflateBack+0x6c0>
 78c:	stp	w2, w3, [sp, #168]
 790:	add	x1, sp, #0xb8
 794:	mov	x0, x23
 798:	blr	x22
 79c:	mov	w28, w0
 7a0:	ldp	w2, w3, [sp, #168]
 7a4:	cbz	w0, 22c <inflateBack+0x144>
 7a8:	ldr	x0, [sp, #184]
 7ac:	sub	w28, w28, #0x1
 7b0:	add	x1, x0, #0x1
 7b4:	str	x1, [sp, #184]
 7b8:	ldrb	w0, [x0]
 7bc:	lsl	x0, x0, x26
 7c0:	add	w26, w26, #0x8
 7c4:	add	x27, x27, x0
 7c8:	b	734 <inflateBack+0x64c>
 7cc:	cbnz	w28, 7ec <inflateBack+0x704>
 7d0:	stp	w2, w3, [sp, #168]
 7d4:	add	x1, sp, #0xb8
 7d8:	mov	x0, x23
 7dc:	blr	x22
 7e0:	mov	w28, w0
 7e4:	ldp	w2, w3, [sp, #168]
 7e8:	cbz	w0, 22c <inflateBack+0x144>
 7ec:	ldr	x0, [sp, #184]
 7f0:	sub	w28, w28, #0x1
 7f4:	add	x1, x0, #0x1
 7f8:	str	x1, [sp, #184]
 7fc:	ldrb	w0, [x0]
 800:	lsl	x0, x0, x26
 804:	add	w26, w26, #0x8
 808:	add	x27, x27, x0
 80c:	b	760 <inflateBack+0x678>
 810:	ldp	x0, x1, [sp, #128]
 814:	str	x0, [x24, #104]
 818:	ldp	x5, x4, [sp, #144]
 81c:	str	x0, [x24, #144]
 820:	ldr	w2, [x24, #132]
 824:	mov	w0, #0x9                   	// #9
 828:	str	w0, [x24, #120]
 82c:	mov	x3, x25
 830:	mov	w0, #0x1                   	// #1
 834:	bl	0 <inflate_table>
 838:	mov	w10, #0x3f51                	// #16209
 83c:	cbz	w0, 84c <inflateBack+0x764>
 840:	adrp	x0, 0 <inflateBackInit_>
 844:	add	x0, x0, #0x0
 848:	b	680 <inflateBack+0x598>
 84c:	mov	x4, x24
 850:	mov	x3, x25
 854:	ldr	x0, [x24, #144]
 858:	str	x0, [x24, #112]
 85c:	mov	w0, #0x6                   	// #6
 860:	ldp	w1, w2, [x24, #132]
 864:	str	w0, [x4, #124]!
 868:	ldr	x0, [sp, #136]
 86c:	ldr	x5, [sp, #144]
 870:	add	x1, x0, x1, lsl #1
 874:	mov	w0, #0x2                   	// #2
 878:	bl	0 <inflate_table>
 87c:	cbz	w0, 894 <inflateBack+0x7ac>
 880:	adrp	x0, 0 <inflateBackInit_>
 884:	mov	w10, #0x3f51                	// #16209
 888:	add	x0, x0, #0x0
 88c:	str	x0, [x20, #48]
 890:	b	684 <inflateBack+0x59c>
 894:	mov	w0, #0x3f48                	// #16200
 898:	str	w0, [x24, #8]
 89c:	cmp	w19, #0x101
 8a0:	ccmp	w28, #0x5, #0x0, hi  // hi = pmore
 8a4:	b.hi	910 <inflateBack+0x828>  // b.pmore
 8a8:	mov	w4, #0xffffffff            	// #-1
 8ac:	ldr	w1, [x24, #120]
 8b0:	ldr	x0, [x24, #104]
 8b4:	lsl	w1, w4, w1
 8b8:	bic	w1, w27, w1
 8bc:	add	x1, x0, x1, lsl #2
 8c0:	ldrb	w25, [x1, #1]
 8c4:	mov	w2, w25
 8c8:	cmp	w25, w26
 8cc:	b.ls	96c <inflateBack+0x884>  // b.plast
 8d0:	cbnz	w28, 8ec <inflateBack+0x804>
 8d4:	add	x1, sp, #0xb8
 8d8:	mov	x0, x23
 8dc:	blr	x22
 8e0:	mov	w28, w0
 8e4:	mov	w4, #0xffffffff            	// #-1
 8e8:	cbz	w0, 22c <inflateBack+0x144>
 8ec:	ldr	x0, [sp, #184]
 8f0:	sub	w28, w28, #0x1
 8f4:	add	x1, x0, #0x1
 8f8:	str	x1, [sp, #184]
 8fc:	ldrb	w0, [x0]
 900:	lsl	x0, x0, x26
 904:	add	w26, w26, #0x8
 908:	add	x27, x27, x0
 90c:	b	8ac <inflateBack+0x7c4>
 910:	ldr	x0, [sp, #184]
 914:	ldr	w1, [x24, #60]
 918:	str	x0, [x20]
 91c:	str	w28, [x20, #8]
 920:	str	x21, [x20, #24]
 924:	str	w19, [x20, #32]
 928:	ldr	w0, [x24, #64]
 92c:	str	x27, [x24, #80]
 930:	str	w26, [x24, #88]
 934:	cmp	w0, w1
 938:	b.cs	944 <inflateBack+0x85c>  // b.hs, b.nlast
 93c:	sub	w19, w1, w19
 940:	str	w19, [x24, #64]
 944:	mov	x0, x20
 948:	bl	0 <inflate_fast>
 94c:	ldr	x0, [x20]
 950:	str	x0, [sp, #184]
 954:	ldr	w28, [x20, #8]
 958:	ldr	w19, [x20, #32]
 95c:	ldr	w26, [x24, #88]
 960:	ldr	x21, [x20, #24]
 964:	ldr	x27, [x24, #80]
 968:	b	164 <inflateBack+0x7c>
 96c:	ldrb	w0, [x1]
 970:	ldrh	w3, [x1, #2]
 974:	cbz	w0, a0c <inflateBack+0x924>
 978:	tst	w0, #0xf0
 97c:	b.ne	a0c <inflateBack+0x924>  // b.any
 980:	add	w0, w0, w25
 984:	lsl	w0, w4, w0
 988:	mvn	w4, w0
 98c:	and	w1, w4, w27
 990:	ldr	x0, [x24, #104]
 994:	lsr	w1, w1, w25
 998:	add	w1, w1, w3
 99c:	add	x1, x0, x1, lsl #2
 9a0:	ldrb	w2, [x1, #1]
 9a4:	add	w0, w2, w25
 9a8:	cmp	w0, w26
 9ac:	b.ls	9fc <inflateBack+0x914>  // b.plast
 9b0:	cbnz	w28, 9d8 <inflateBack+0x8f0>
 9b4:	str	w3, [sp, #128]
 9b8:	add	x1, sp, #0xb8
 9bc:	str	w4, [sp, #136]
 9c0:	mov	x0, x23
 9c4:	blr	x22
 9c8:	mov	w28, w0
 9cc:	ldr	w3, [sp, #128]
 9d0:	ldr	w4, [sp, #136]
 9d4:	cbz	w0, 22c <inflateBack+0x144>
 9d8:	ldr	x0, [sp, #184]
 9dc:	sub	w28, w28, #0x1
 9e0:	add	x1, x0, #0x1
 9e4:	str	x1, [sp, #184]
 9e8:	ldrb	w0, [x0]
 9ec:	lsl	x0, x0, x26
 9f0:	add	w26, w26, #0x8
 9f4:	add	x27, x27, x0
 9f8:	b	98c <inflateBack+0x8a4>
 9fc:	ldrb	w0, [x1]
 a00:	sub	w26, w26, w25
 a04:	ldrh	w3, [x1, #2]
 a08:	lsr	x27, x27, x25
 a0c:	str	w3, [x24, #92]
 a10:	sub	w26, w26, w2
 a14:	lsr	x27, x27, x2
 a18:	cbnz	w0, a54 <inflateBack+0x96c>
 a1c:	cbnz	w19, a40 <inflateBack+0x958>
 a20:	ldp	x3, x0, [sp, #104]
 a24:	ldr	w19, [x24, #60]
 a28:	ldr	x21, [x24, #72]
 a2c:	str	w19, [x24, #64]
 a30:	mov	w2, w19
 a34:	mov	x1, x21
 a38:	blr	x3
 a3c:	cbnz	w0, d68 <inflateBack+0xc80>
 a40:	ldr	w0, [x24, #92]
 a44:	sub	w19, w19, #0x1
 a48:	strb	w0, [x21], #1
 a4c:	mov	w0, #0x3f48                	// #16200
 a50:	b	20c <inflateBack+0x124>
 a54:	tbz	w0, #5, a60 <inflateBack+0x978>
 a58:	mov	w0, #0x3f3f                	// #16191
 a5c:	b	20c <inflateBack+0x124>
 a60:	tbz	w0, #6, a70 <inflateBack+0x988>
 a64:	adrp	x0, 0 <inflateBackInit_>
 a68:	add	x0, x0, #0x0
 a6c:	b	30c <inflateBack+0x224>
 a70:	and	w0, w0, #0xf
 a74:	str	w0, [x24, #100]
 a78:	cbz	w0, aa8 <inflateBack+0x9c0>
 a7c:	ldr	w1, [x24, #100]
 a80:	cmp	w1, w26
 a84:	b.hi	b10 <inflateBack+0xa28>  // b.pmore
 a88:	ldr	w2, [x24, #92]
 a8c:	mov	w0, #0xffffffff            	// #-1
 a90:	lsl	w0, w0, w1
 a94:	sub	w26, w26, w1
 a98:	bic	w0, w27, w0
 a9c:	lsr	x27, x27, x1
 aa0:	add	w0, w2, w0
 aa4:	str	w0, [x24, #92]
 aa8:	mov	w4, #0xffffffff            	// #-1
 aac:	ldr	w1, [x24, #124]
 ab0:	ldr	x0, [x24, #112]
 ab4:	lsl	w1, w4, w1
 ab8:	bic	w1, w27, w1
 abc:	add	x1, x0, x1, lsl #2
 ac0:	ldrb	w25, [x1, #1]
 ac4:	mov	w2, w25
 ac8:	cmp	w25, w26
 acc:	b.ls	b4c <inflateBack+0xa64>  // b.plast
 ad0:	cbnz	w28, aec <inflateBack+0xa04>
 ad4:	add	x1, sp, #0xb8
 ad8:	mov	x0, x23
 adc:	blr	x22
 ae0:	mov	w28, w0
 ae4:	mov	w4, #0xffffffff            	// #-1
 ae8:	cbz	w0, 22c <inflateBack+0x144>
 aec:	ldr	x0, [sp, #184]
 af0:	sub	w28, w28, #0x1
 af4:	add	x1, x0, #0x1
 af8:	str	x1, [sp, #184]
 afc:	ldrb	w0, [x0]
 b00:	lsl	x0, x0, x26
 b04:	add	w26, w26, #0x8
 b08:	add	x27, x27, x0
 b0c:	b	aac <inflateBack+0x9c4>
 b10:	cbnz	w28, b28 <inflateBack+0xa40>
 b14:	add	x1, sp, #0xb8
 b18:	mov	x0, x23
 b1c:	blr	x22
 b20:	mov	w28, w0
 b24:	cbz	w0, 22c <inflateBack+0x144>
 b28:	ldr	x0, [sp, #184]
 b2c:	sub	w28, w28, #0x1
 b30:	add	x1, x0, #0x1
 b34:	str	x1, [sp, #184]
 b38:	ldrb	w0, [x0]
 b3c:	lsl	x0, x0, x26
 b40:	add	w26, w26, #0x8
 b44:	add	x27, x27, x0
 b48:	b	a7c <inflateBack+0x994>
 b4c:	ldrb	w0, [x1]
 b50:	ldrh	w3, [x1, #2]
 b54:	tst	w0, #0xf0
 b58:	b.ne	be8 <inflateBack+0xb00>  // b.any
 b5c:	add	w0, w0, w25
 b60:	lsl	w0, w4, w0
 b64:	mvn	w4, w0
 b68:	and	w1, w4, w27
 b6c:	ldr	x0, [x24, #112]
 b70:	lsr	w1, w1, w25
 b74:	add	w1, w1, w3
 b78:	add	x1, x0, x1, lsl #2
 b7c:	ldrb	w2, [x1, #1]
 b80:	add	w0, w2, w25
 b84:	cmp	w0, w26
 b88:	b.ls	bd8 <inflateBack+0xaf0>  // b.plast
 b8c:	cbnz	w28, bb4 <inflateBack+0xacc>
 b90:	str	w3, [sp, #128]
 b94:	add	x1, sp, #0xb8
 b98:	str	w4, [sp, #136]
 b9c:	mov	x0, x23
 ba0:	blr	x22
 ba4:	mov	w28, w0
 ba8:	ldr	w3, [sp, #128]
 bac:	ldr	w4, [sp, #136]
 bb0:	cbz	w0, 22c <inflateBack+0x144>
 bb4:	ldr	x0, [sp, #184]
 bb8:	sub	w28, w28, #0x1
 bbc:	add	x1, x0, #0x1
 bc0:	str	x1, [sp, #184]
 bc4:	ldrb	w0, [x0]
 bc8:	lsl	x0, x0, x26
 bcc:	add	w26, w26, #0x8
 bd0:	add	x27, x27, x0
 bd4:	b	b68 <inflateBack+0xa80>
 bd8:	ldrb	w0, [x1]
 bdc:	sub	w26, w26, w25
 be0:	ldrh	w3, [x1, #2]
 be4:	lsr	x27, x27, x25
 be8:	sub	w26, w26, w2
 bec:	lsr	x27, x27, x2
 bf0:	tbz	w0, #6, c00 <inflateBack+0xb18>
 bf4:	adrp	x0, 0 <inflateBackInit_>
 bf8:	add	x0, x0, #0x0
 bfc:	b	30c <inflateBack+0x224>
 c00:	and	w0, w0, #0xf
 c04:	stp	w3, w0, [x24, #96]
 c08:	cbz	w0, c38 <inflateBack+0xb50>
 c0c:	ldr	w1, [x24, #100]
 c10:	cmp	w1, w26
 c14:	b.hi	c60 <inflateBack+0xb78>  // b.pmore
 c18:	ldr	w2, [x24, #96]
 c1c:	mov	w0, #0xffffffff            	// #-1
 c20:	lsl	w0, w0, w1
 c24:	sub	w26, w26, w1
 c28:	bic	w0, w27, w0
 c2c:	lsr	x27, x27, x1
 c30:	add	w0, w2, w0
 c34:	str	w0, [x24, #96]
 c38:	ldp	w0, w2, [x24, #60]
 c3c:	ldr	w1, [x24, #96]
 c40:	cmp	w0, w2
 c44:	csel	w2, w19, wzr, hi  // hi = pmore
 c48:	sub	w0, w0, w2
 c4c:	cmp	w1, w0
 c50:	b.ls	c9c <inflateBack+0xbb4>  // b.plast
 c54:	adrp	x0, 0 <inflateBackInit_>
 c58:	add	x0, x0, #0x0
 c5c:	b	30c <inflateBack+0x224>
 c60:	cbnz	w28, c78 <inflateBack+0xb90>
 c64:	add	x1, sp, #0xb8
 c68:	mov	x0, x23
 c6c:	blr	x22
 c70:	mov	w28, w0
 c74:	cbz	w0, 22c <inflateBack+0x144>
 c78:	ldr	x0, [sp, #184]
 c7c:	sub	w28, w28, #0x1
 c80:	add	x1, x0, #0x1
 c84:	str	x1, [sp, #184]
 c88:	ldrb	w0, [x0]
 c8c:	lsl	x0, x0, x26
 c90:	add	w26, w26, #0x8
 c94:	add	x27, x27, x0
 c98:	b	c0c <inflateBack+0xb24>
 c9c:	cbnz	w19, cc0 <inflateBack+0xbd8>
 ca0:	ldp	x3, x0, [sp, #104]
 ca4:	ldr	w19, [x24, #60]
 ca8:	ldr	x21, [x24, #72]
 cac:	str	w19, [x24, #64]
 cb0:	mov	w2, w19
 cb4:	mov	x1, x21
 cb8:	blr	x3
 cbc:	cbnz	w0, d68 <inflateBack+0xc80>
 cc0:	ldr	w1, [x24, #60]
 cc4:	ldr	w0, [x24, #96]
 cc8:	sub	w2, w1, w0
 ccc:	cmp	w19, w2
 cd0:	b.ls	d28 <inflateBack+0xc40>  // b.plast
 cd4:	sub	w0, w0, w1
 cd8:	add	x2, x21, w2, uxtw
 cdc:	add	w0, w0, w19
 ce0:	ldr	w1, [x24, #92]
 ce4:	cmp	w1, w0
 ce8:	csel	w0, w1, w0, ls  // ls = plast
 cec:	sub	w1, w1, w0
 cf0:	sub	w19, w19, w0
 cf4:	str	w1, [x24, #92]
 cf8:	mov	x1, #0x0                   	// #0
 cfc:	ldrb	w3, [x2, x1]
 d00:	strb	w3, [x21, x1]
 d04:	add	x1, x1, #0x1
 d08:	cmp	w0, w1
 d0c:	b.ne	cfc <inflateBack+0xc14>  // b.any
 d10:	sub	w0, w0, #0x1
 d14:	add	x0, x0, #0x1
 d18:	add	x21, x21, x0
 d1c:	ldr	w0, [x24, #92]
 d20:	cbnz	w0, c9c <inflateBack+0xbb4>
 d24:	b	164 <inflateBack+0x7c>
 d28:	sub	x2, x21, w0, uxtw
 d2c:	mov	w0, w19
 d30:	b	ce0 <inflateBack+0xbf8>
 d34:	ldr	w2, [x24, #60]
 d38:	cmp	w2, w19
 d3c:	b.ls	d70 <inflateBack+0xc88>  // b.plast
 d40:	ldp	x3, x0, [sp, #104]
 d44:	sub	w2, w2, w19
 d48:	ldr	x1, [x24, #72]
 d4c:	blr	x3
 d50:	cmp	w0, #0x0
 d54:	mov	w0, #0xfffffffb            	// #-5
 d58:	csinc	w0, w0, wzr, ne  // ne = any
 d5c:	b	1cc <inflateBack+0xe4>
 d60:	mov	w0, #0xfffffffe            	// #-2
 d64:	b	1cc <inflateBack+0xe4>
 d68:	mov	w0, #0xfffffffb            	// #-5
 d6c:	b	1cc <inflateBack+0xe4>
 d70:	mov	w0, #0x1                   	// #1
 d74:	b	1cc <inflateBack+0xe4>
 d78:	mov	w0, #0xfffffffe            	// #-2
 d7c:	b	1d8 <inflateBack+0xf0>

0000000000000d80 <inflateBackEnd>:
 d80:	cbz	x0, dc0 <inflateBackEnd+0x40>
 d84:	stp	x29, x30, [sp, #-32]!
 d88:	mov	x29, sp
 d8c:	ldr	x1, [x0, #56]
 d90:	str	x19, [sp, #16]
 d94:	mov	x19, x0
 d98:	cbz	x1, dc8 <inflateBackEnd+0x48>
 d9c:	ldr	x2, [x0, #72]
 da0:	cbz	x2, dc8 <inflateBackEnd+0x48>
 da4:	ldr	x0, [x0, #80]
 da8:	blr	x2
 dac:	str	xzr, [x19, #56]
 db0:	mov	w0, #0x0                   	// #0
 db4:	ldr	x19, [sp, #16]
 db8:	ldp	x29, x30, [sp], #32
 dbc:	ret
 dc0:	mov	w0, #0xfffffffe            	// #-2
 dc4:	ret
 dc8:	mov	w0, #0xfffffffe            	// #-2
 dcc:	b	db4 <inflateBackEnd+0x34>

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	w12, #0x1                   	// #1
   8:	mov	x29, sp
   c:	ldr	x8, [x0, #56]
  10:	stp	x19, x20, [sp, #16]
  14:	ldr	w10, [x0, #32]
  18:	ldr	w11, [x0, #8]
  1c:	mov	w19, #0xffffffff            	// #-1
  20:	ldp	w14, w15, [x8, #120]
  24:	sub	w1, w1, w10
  28:	ldr	w9, [x8, #68]
  2c:	sub	w11, w11, #0x5
  30:	ldp	w30, w20, [x8, #60]
  34:	sub	w10, w10, #0x101
  38:	ldr	x5, [x0]
  3c:	add	w18, w9, w19
  40:	ldr	x2, [x0, #24]
  44:	lsl	w14, w12, w14
  48:	ldp	x13, x7, [x8, #72]
  4c:	lsl	w15, w12, w15
  50:	ldp	x16, x17, [x8, #104]
  54:	add	x11, x5, x11
  58:	ldr	w3, [x8, #88]
  5c:	sub	x1, x2, x1
  60:	add	x10, x2, x10
  64:	sub	w14, w14, #0x1
  68:	sub	w15, w15, #0x1
  6c:	add	x18, x18, #0x1
  70:	stp	x21, x22, [sp, #32]
  74:	add	w21, w30, w9
  78:	stp	x23, x24, [sp, #48]
  7c:	stp	x25, x26, [sp, #64]
  80:	cmp	w3, #0xe
  84:	b.hi	ac <inflate_fast+0xac>  // b.pmore
  88:	ldrb	w4, [x5, #1]
  8c:	add	w6, w3, #0x8
  90:	add	x5, x5, #0x2
  94:	lsl	x4, x4, x6
  98:	ldurb	w6, [x5, #-2]
  9c:	lsl	x6, x6, x3
  a0:	add	x4, x4, x6
  a4:	add	x7, x7, x4
  a8:	add	w3, w3, #0x10
  ac:	and	x4, x14, x7
  b0:	lsl	x6, x4, #2
  b4:	add	x4, x16, x4, lsl #2
  b8:	ldrb	w6, [x16, x6]
  bc:	ldrb	w22, [x4, #1]
  c0:	ldrh	w23, [x4, #2]
  c4:	sub	w3, w3, w22
  c8:	lsr	x7, x7, x22
  cc:	cbnz	w6, e4 <inflate_fast+0xe4>
  d0:	strb	w23, [x2], #1
  d4:	cmp	x5, x11
  d8:	ccmp	x2, x10, #0x2, cc  // cc = lo, ul, last
  dc:	b.cc	80 <inflate_fast+0x80>  // b.lo, b.ul, b.last
  e0:	b	1e4 <inflate_fast+0x1e4>
  e4:	tbz	w6, #4, 460 <inflate_fast+0x460>
  e8:	mov	w4, w23
  ec:	ands	w6, w6, #0xf
  f0:	b.eq	120 <inflate_fast+0x120>  // b.none
  f4:	cmp	w3, w6
  f8:	b.cs	10c <inflate_fast+0x10c>  // b.hs, b.nlast
  fc:	ldrb	w4, [x5], #1
 100:	lsl	x4, x4, x3
 104:	add	w3, w3, #0x8
 108:	add	x7, x7, x4
 10c:	lsl	w4, w19, w6
 110:	bic	w4, w7, w4
 114:	add	w4, w23, w4
 118:	sub	w3, w3, w6
 11c:	lsr	x7, x7, x6
 120:	cmp	w3, #0xe
 124:	b.hi	14c <inflate_fast+0x14c>  // b.pmore
 128:	ldrb	w6, [x5, #1]
 12c:	add	w22, w3, #0x8
 130:	add	x5, x5, #0x2
 134:	lsl	x6, x6, x22
 138:	ldurb	w22, [x5, #-2]
 13c:	lsl	x22, x22, x3
 140:	add	x6, x6, x22
 144:	add	x7, x7, x6
 148:	add	w3, w3, #0x10
 14c:	and	x22, x15, x7
 150:	lsl	x6, x22, #2
 154:	add	x22, x17, x22, lsl #2
 158:	ldrb	w6, [x17, x6]
 15c:	ldrb	w23, [x22, #1]
 160:	ldrh	w25, [x22, #2]
 164:	sub	w3, w3, w23
 168:	lsr	x7, x7, x23
 16c:	tbz	w6, #4, 430 <inflate_fast+0x430>
 170:	and	w22, w6, #0xf
 174:	cmp	w3, w22
 178:	b.cs	19c <inflate_fast+0x19c>  // b.hs, b.nlast
 17c:	ldrb	w6, [x5]
 180:	add	w23, w3, #0x8
 184:	cmp	w22, w23
 188:	lsl	x6, x6, x3
 18c:	add	x7, x7, x6
 190:	b.hi	260 <inflate_fast+0x260>  // b.pmore
 194:	add	x5, x5, #0x1
 198:	mov	w3, w23
 19c:	lsl	w6, w19, w22
 1a0:	bic	w6, w7, w6
 1a4:	add	w24, w6, w25
 1a8:	sub	w3, w3, w22
 1ac:	lsr	x7, x7, x22
 1b0:	sub	x22, x2, x1
 1b4:	cmp	w24, w22
 1b8:	b.ls	3d0 <inflate_fast+0x3d0>  // b.plast
 1bc:	sub	w6, w24, w22
 1c0:	cmp	w20, w6
 1c4:	b.cs	278 <inflate_fast+0x278>  // b.hs, b.nlast
 1c8:	ldr	w23, [x8, #7144]
 1cc:	cbz	w23, 278 <inflate_fast+0x278>
 1d0:	adrp	x1, 0 <inflate_fast>
 1d4:	add	x1, x1, #0x0
 1d8:	str	x1, [x0, #48]
 1dc:	mov	w1, #0x3f51                	// #16209
 1e0:	str	w1, [x8, #8]
 1e4:	lsr	w1, w3, #3
 1e8:	and	w3, w3, #0x7
 1ec:	sub	x5, x5, x1
 1f0:	mov	w1, #0x1                   	// #1
 1f4:	lsl	w1, w1, w3
 1f8:	sub	w1, w1, #0x1
 1fc:	and	x7, x1, x7
 200:	sub	x1, x11, x5
 204:	add	w4, w1, #0x5
 208:	sub	w1, w11, w5
 20c:	cmp	x11, x5
 210:	add	w1, w1, #0x5
 214:	csel	w1, w1, w4, ls  // ls = plast
 218:	str	w1, [x0, #8]
 21c:	sub	x1, x10, x2
 220:	cmp	x2, x10
 224:	add	w4, w1, #0x101
 228:	sub	w1, w10, w2
 22c:	add	w1, w1, #0x101
 230:	str	x5, [x0]
 234:	csel	w1, w1, w4, cs  // cs = hs, nlast
 238:	str	x2, [x0, #24]
 23c:	str	w1, [x0, #32]
 240:	ldp	x19, x20, [sp, #16]
 244:	ldp	x21, x22, [sp, #32]
 248:	ldp	x23, x24, [sp, #48]
 24c:	ldp	x25, x26, [sp, #64]
 250:	str	x7, [x8, #80]
 254:	str	w3, [x8, #88]
 258:	ldp	x29, x30, [sp], #80
 25c:	ret
 260:	ldrb	w6, [x5, #1]
 264:	add	w3, w3, #0x10
 268:	add	x5, x5, #0x2
 26c:	lsl	x6, x6, x23
 270:	add	x7, x7, x6
 274:	b	19c <inflate_fast+0x19c>
 278:	sub	w22, w22, w24
 27c:	cbnz	w9, 2dc <inflate_fast+0x2dc>
 280:	add	w25, w30, w22
 284:	cmp	w4, w6
 288:	add	x25, x13, x25
 28c:	b.ls	2bc <inflate_fast+0x2bc>  // b.plast
 290:	add	w4, w4, w22
 294:	mov	x22, #0x0                   	// #0
 298:	ldrb	w23, [x25, x22]
 29c:	strb	w23, [x2, x22]
 2a0:	add	x22, x22, #0x1
 2a4:	cmp	w6, w22
 2a8:	b.ne	298 <inflate_fast+0x298>  // b.any
 2ac:	sub	w6, w6, #0x1
 2b0:	add	x6, x6, #0x1
 2b4:	add	x2, x2, x6
 2b8:	sub	x25, x2, w24, uxtw
 2bc:	cmp	w4, #0x2
 2c0:	b.hi	398 <inflate_fast+0x398>  // b.pmore
 2c4:	cbz	w4, d4 <inflate_fast+0xd4>
 2c8:	ldrb	w6, [x25]
 2cc:	strb	w6, [x2]
 2d0:	b.eq	3c0 <inflate_fast+0x3c0>  // b.none
 2d4:	add	x2, x2, #0x1
 2d8:	b	d4 <inflate_fast+0xd4>
 2dc:	cmp	w9, w6
 2e0:	b.cs	35c <inflate_fast+0x35c>  // b.hs, b.nlast
 2e4:	add	w25, w21, w22
 2e8:	sub	w23, w6, w9
 2ec:	add	x25, x13, x25
 2f0:	cmp	w4, w23
 2f4:	b.ls	2bc <inflate_fast+0x2bc>  // b.plast
 2f8:	add	w4, w4, w9
 2fc:	mov	x6, #0x0                   	// #0
 300:	add	w4, w4, w22
 304:	mov	w22, w23
 308:	ldrb	w26, [x25, x6]
 30c:	strb	w26, [x2, x6]
 310:	add	x6, x6, #0x1
 314:	cmp	x22, x6
 318:	b.ne	308 <inflate_fast+0x308>  // b.any
 31c:	sub	w23, w23, #0x1
 320:	cmp	w9, w4
 324:	add	x23, x23, #0x1
 328:	add	x2, x2, x23
 32c:	b.cs	354 <inflate_fast+0x354>  // b.hs, b.nlast
 330:	sub	w4, w4, w9
 334:	mov	x6, #0x0                   	// #0
 338:	ldrb	w22, [x13, x6]
 33c:	strb	w22, [x2, x6]
 340:	add	x6, x6, #0x1
 344:	cmp	w9, w6
 348:	b.ne	338 <inflate_fast+0x338>  // b.any
 34c:	add	x2, x2, x18
 350:	b	2b8 <inflate_fast+0x2b8>
 354:	mov	x25, x13
 358:	b	2bc <inflate_fast+0x2bc>
 35c:	add	w25, w9, w22
 360:	cmp	w4, w6
 364:	add	x25, x13, x25
 368:	b.ls	2bc <inflate_fast+0x2bc>  // b.plast
 36c:	add	w4, w4, w22
 370:	mov	x22, #0x0                   	// #0
 374:	ldrb	w23, [x25, x22]
 378:	strb	w23, [x2, x22]
 37c:	add	x22, x22, #0x1
 380:	cmp	w6, w22
 384:	b.ne	374 <inflate_fast+0x374>  // b.any
 388:	sub	w22, w6, #0x1
 38c:	add	x22, x22, #0x1
 390:	add	x2, x2, x22
 394:	b	2b8 <inflate_fast+0x2b8>
 398:	ldrb	w6, [x25]
 39c:	add	x25, x25, #0x3
 3a0:	strb	w6, [x2]
 3a4:	add	x2, x2, #0x3
 3a8:	sub	w4, w4, #0x3
 3ac:	ldurb	w6, [x25, #-2]
 3b0:	sturb	w6, [x2, #-2]
 3b4:	ldurb	w6, [x25, #-1]
 3b8:	sturb	w6, [x2, #-1]
 3bc:	b	2bc <inflate_fast+0x2bc>
 3c0:	ldrb	w4, [x25, #1]
 3c4:	add	x2, x2, #0x2
 3c8:	sturb	w4, [x2, #-1]
 3cc:	b	d4 <inflate_fast+0xd4>
 3d0:	sub	x6, x2, w24, uxtw
 3d4:	ldrb	w22, [x6]
 3d8:	mov	x23, x6
 3dc:	strb	w22, [x2]
 3e0:	add	x6, x6, #0x3
 3e4:	sub	w4, w4, #0x3
 3e8:	ldurb	w22, [x6, #-2]
 3ec:	cmp	w4, #0x2
 3f0:	strb	w22, [x2, #1]
 3f4:	mov	x22, x2
 3f8:	add	x2, x2, #0x3
 3fc:	ldurb	w24, [x6, #-1]
 400:	sturb	w24, [x2, #-1]
 404:	b.hi	3d4 <inflate_fast+0x3d4>  // b.pmore
 408:	cbz	w4, d4 <inflate_fast+0xd4>
 40c:	ldrb	w2, [x23, #3]
 410:	strb	w2, [x22, #3]
 414:	b.eq	420 <inflate_fast+0x420>  // b.none
 418:	add	x2, x22, #0x4
 41c:	b	d4 <inflate_fast+0xd4>
 420:	ldrb	w4, [x23, #4]
 424:	add	x2, x22, #0x5
 428:	strb	w4, [x22, #4]
 42c:	b	d4 <inflate_fast+0xd4>
 430:	tbnz	w6, #6, 454 <inflate_fast+0x454>
 434:	lsl	w6, w12, w6
 438:	sub	w6, w6, #0x1
 43c:	and	x6, x6, x7
 440:	add	x6, x6, w25, uxth
 444:	lsl	x23, x6, #2
 448:	add	x22, x17, x6, lsl #2
 44c:	ldrb	w6, [x17, x23]
 450:	b	15c <inflate_fast+0x15c>
 454:	adrp	x1, 0 <inflate_fast>
 458:	add	x1, x1, #0x0
 45c:	b	1d8 <inflate_fast+0x1d8>
 460:	tbnz	w6, #6, 484 <inflate_fast+0x484>
 464:	lsl	w6, w12, w6
 468:	sub	w6, w6, #0x1
 46c:	and	x6, x6, x7
 470:	add	x6, x6, w23, uxth
 474:	lsl	x22, x6, #2
 478:	add	x4, x16, x6, lsl #2
 47c:	ldrb	w6, [x16, x22]
 480:	b	bc <inflate_fast+0xbc>
 484:	tbz	w6, #5, 490 <inflate_fast+0x490>
 488:	mov	w1, #0x3f3f                	// #16191
 48c:	b	1e0 <inflate_fast+0x1e0>
 490:	adrp	x1, 0 <inflate_fast>
 494:	add	x1, x1, #0x0
 498:	b	1d8 <inflate_fast+0x1d8>

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <syncsearch>:
       0:	mov	x4, x0
       4:	mov	w6, #0xff                  	// #255
       8:	mov	w0, #0x0                   	// #0
       c:	mov	w7, #0x4                   	// #4
      10:	ldr	w3, [x4]
      14:	cmp	w0, w2
      18:	ccmp	w3, #0x3, #0x2, cc  // cc = lo, ul, last
      1c:	b.ls	28 <syncsearch+0x28>  // b.plast
      20:	str	w3, [x4]
      24:	ret
      28:	cmp	w3, #0x2
      2c:	ldrb	w5, [x1, w0, uxtw]
      30:	csel	w8, wzr, w6, cc  // cc = lo, ul, last
      34:	cmp	w5, w8
      38:	b.ne	48 <syncsearch+0x48>  // b.any
      3c:	add	w3, w3, #0x1
      40:	add	w0, w0, #0x1
      44:	b	14 <syncsearch+0x14>
      48:	sub	w3, w7, w3
      4c:	cmp	w5, #0x0
      50:	csel	w3, w3, wzr, eq  // eq = none
      54:	b	40 <syncsearch+0x40>

0000000000000058 <updatewindow>:
      58:	stp	x29, x30, [sp, #-48]!
      5c:	mov	x29, sp
      60:	stp	x19, x20, [sp, #16]
      64:	mov	w20, w2
      68:	ldr	x19, [x0, #56]
      6c:	stp	x21, x22, [sp, #32]
      70:	mov	x22, x1
      74:	ldr	x1, [x19, #72]
      78:	cbz	x1, b4 <updatewindow+0x5c>
      7c:	ldr	w0, [x19, #60]
      80:	cbz	w0, ec <updatewindow+0x94>
      84:	ldr	w1, [x19, #60]
      88:	ldr	x0, [x19, #72]
      8c:	cmp	w1, w20
      90:	b.hi	104 <updatewindow+0xac>  // b.pmore
      94:	mov	w2, w1
      98:	sub	x1, x22, w1, uxtw
      9c:	bl	0 <memcpy>
      a0:	str	wzr, [x19, #68]
      a4:	ldr	w0, [x19, #60]
      a8:	str	w0, [x19, #64]
      ac:	mov	w0, #0x0                   	// #0
      b0:	b	dc <updatewindow+0x84>
      b4:	ldr	x3, [x0, #64]
      b8:	mov	w21, #0x1                   	// #1
      bc:	ldr	x0, [x0, #80]
      c0:	mov	w2, w21
      c4:	ldr	w1, [x19, #56]
      c8:	lsl	w1, w21, w1
      cc:	blr	x3
      d0:	str	x0, [x19, #72]
      d4:	cbnz	x0, 7c <updatewindow+0x24>
      d8:	mov	w0, w21
      dc:	ldp	x19, x20, [sp, #16]
      e0:	ldp	x21, x22, [sp, #32]
      e4:	ldp	x29, x30, [sp], #48
      e8:	ret
      ec:	ldr	w1, [x19, #56]
      f0:	mov	w0, #0x1                   	// #1
      f4:	str	xzr, [x19, #64]
      f8:	lsl	w0, w0, w1
      fc:	str	w0, [x19, #60]
     100:	b	84 <updatewindow+0x2c>
     104:	ldr	w4, [x19, #68]
     108:	sub	w2, w1, w4
     10c:	sub	x1, x22, w20, uxtw
     110:	cmp	w20, w2
     114:	add	x0, x0, w4, uxtw
     118:	csel	w21, w20, w2, ls  // ls = plast
     11c:	csel	w2, w20, w2, ls  // ls = plast
     120:	bl	0 <memcpy>
     124:	subs	w20, w20, w21
     128:	b.eq	144 <updatewindow+0xec>  // b.none
     12c:	ldr	x0, [x19, #72]
     130:	mov	w2, w20
     134:	sub	x1, x22, w20, uxtw
     138:	bl	0 <memcpy>
     13c:	str	w20, [x19, #68]
     140:	b	a4 <updatewindow+0x4c>
     144:	ldr	w0, [x19, #68]
     148:	ldr	w1, [x19, #60]
     14c:	add	w0, w21, w0
     150:	cmp	w0, w1
     154:	csel	w0, w0, wzr, ne  // ne = any
     158:	str	w0, [x19, #68]
     15c:	ldr	w0, [x19, #64]
     160:	cmp	w1, w0
     164:	b.ls	ac <updatewindow+0x54>  // b.plast
     168:	add	w0, w0, w21
     16c:	b	a8 <updatewindow+0x50>

0000000000000170 <inflateStateCheck>:
     170:	cbz	x0, 1b0 <inflateStateCheck+0x40>
     174:	ldr	x1, [x0, #64]
     178:	cbz	x1, 1b0 <inflateStateCheck+0x40>
     17c:	ldr	x1, [x0, #72]
     180:	cbz	x1, 1b0 <inflateStateCheck+0x40>
     184:	ldr	x1, [x0, #56]
     188:	cbz	x1, 1b0 <inflateStateCheck+0x40>
     18c:	ldr	x2, [x1]
     190:	cmp	x0, x2
     194:	b.ne	1b0 <inflateStateCheck+0x40>  // b.any
     198:	ldr	w0, [x1, #8]
     19c:	mov	w1, #0xffffc0cc            	// #-16180
     1a0:	add	w0, w0, w1
     1a4:	cmp	w0, #0x1f
     1a8:	cset	w0, hi  // hi = pmore
     1ac:	ret
     1b0:	mov	w0, #0x1                   	// #1
     1b4:	b	1ac <inflateStateCheck+0x3c>

00000000000001b8 <inflateResetKeep>:
     1b8:	mov	x3, x0
     1bc:	stp	x29, x30, [sp, #-16]!
     1c0:	mov	x29, sp
     1c4:	bl	170 <inflateStateCheck>
     1c8:	cbnz	w0, 228 <inflateResetKeep+0x70>
     1cc:	ldr	x1, [x3, #56]
     1d0:	ldr	w2, [x1, #16]
     1d4:	str	xzr, [x1, #40]
     1d8:	str	xzr, [x3, #16]
     1dc:	stp	xzr, xzr, [x3, #40]
     1e0:	cbz	w2, 1ec <inflateResetKeep+0x34>
     1e4:	and	x2, x2, #0x1
     1e8:	str	x2, [x3, #96]
     1ec:	mov	x2, #0x3f34                	// #16180
     1f0:	str	x2, [x1, #8]
     1f4:	mov	w2, #0x8000                	// #32768
     1f8:	str	w2, [x1, #28]
     1fc:	add	x2, x1, #0x558
     200:	str	wzr, [x1, #20]
     204:	str	xzr, [x1, #48]
     208:	str	xzr, [x1, #80]
     20c:	str	wzr, [x1, #88]
     210:	stp	x2, x2, [x1, #104]
     214:	str	x2, [x1, #144]
     218:	mov	x2, #0xffffffff00000001    	// #-4294967295
     21c:	str	x2, [x1, #7144]
     220:	ldp	x29, x30, [sp], #16
     224:	ret
     228:	mov	w0, #0xfffffffe            	// #-2
     22c:	b	220 <inflateResetKeep+0x68>

0000000000000230 <inflateReset>:
     230:	mov	x3, x0
     234:	stp	x29, x30, [sp, #-16]!
     238:	mov	x29, sp
     23c:	bl	170 <inflateStateCheck>
     240:	cbnz	w0, 25c <inflateReset+0x2c>
     244:	ldr	x0, [x3, #56]
     248:	str	wzr, [x0, #60]
     24c:	str	xzr, [x0, #64]
     250:	mov	x0, x3
     254:	ldp	x29, x30, [sp], #16
     258:	b	1b8 <inflateResetKeep>
     25c:	mov	w0, #0xfffffffe            	// #-2
     260:	ldp	x29, x30, [sp], #16
     264:	ret

0000000000000268 <inflateReset2>:
     268:	stp	x29, x30, [sp, #-48]!
     26c:	mov	x29, sp
     270:	stp	x19, x20, [sp, #16]
     274:	mov	w19, w1
     278:	stp	x21, x22, [sp, #32]
     27c:	mov	x21, x0
     280:	bl	170 <inflateStateCheck>
     284:	cbnz	w0, 2fc <inflateReset2+0x94>
     288:	ldr	x22, [x21, #56]
     28c:	tbz	w19, #31, 2e4 <inflateReset2+0x7c>
     290:	mov	w20, w0
     294:	neg	w19, w19
     298:	sub	w0, w19, #0x8
     29c:	cmp	w19, #0x0
     2a0:	ccmp	w0, #0x7, #0x0, ne  // ne = any
     2a4:	b.hi	2fc <inflateReset2+0x94>  // b.pmore
     2a8:	ldr	x1, [x22, #72]
     2ac:	cbz	x1, 2c8 <inflateReset2+0x60>
     2b0:	ldr	w0, [x22, #56]
     2b4:	cmp	w19, w0
     2b8:	b.eq	2c8 <inflateReset2+0x60>  // b.none
     2bc:	ldp	x2, x0, [x21, #72]
     2c0:	blr	x2
     2c4:	str	xzr, [x22, #72]
     2c8:	str	w20, [x22, #16]
     2cc:	mov	x0, x21
     2d0:	str	w19, [x22, #56]
     2d4:	ldp	x19, x20, [sp, #16]
     2d8:	ldp	x21, x22, [sp, #32]
     2dc:	ldp	x29, x30, [sp], #48
     2e0:	b	230 <inflateReset>
     2e4:	asr	w20, w19, #4
     2e8:	cmp	w19, #0x2f
     2ec:	add	w20, w20, #0x5
     2f0:	b.gt	298 <inflateReset2+0x30>
     2f4:	and	w19, w19, #0xf
     2f8:	b	298 <inflateReset2+0x30>
     2fc:	mov	w0, #0xfffffffe            	// #-2
     300:	ldp	x19, x20, [sp, #16]
     304:	ldp	x21, x22, [sp, #32]
     308:	ldp	x29, x30, [sp], #48
     30c:	ret

0000000000000310 <inflateInit2_>:
     310:	stp	x29, x30, [sp, #-48]!
     314:	mov	x29, sp
     318:	stp	x19, x20, [sp, #16]
     31c:	str	x21, [sp, #32]
     320:	cbz	x2, 3dc <inflateInit2_+0xcc>
     324:	mov	x19, x0
     328:	ldrb	w0, [x2]
     32c:	cmp	w0, #0x31
     330:	b.ne	3dc <inflateInit2_+0xcc>  // b.any
     334:	cmp	w3, #0x70
     338:	b.ne	3dc <inflateInit2_+0xcc>  // b.any
     33c:	cbz	x19, 3e4 <inflateInit2_+0xd4>
     340:	ldr	x0, [x19, #64]
     344:	str	xzr, [x19, #48]
     348:	mov	w20, w1
     34c:	cbnz	x0, 360 <inflateInit2_+0x50>
     350:	adrp	x0, 0 <zcalloc>
     354:	add	x0, x0, #0x0
     358:	str	x0, [x19, #64]
     35c:	str	xzr, [x19, #80]
     360:	ldr	x0, [x19, #72]
     364:	cbnz	x0, 374 <inflateInit2_+0x64>
     368:	adrp	x0, 0 <zcfree>
     36c:	add	x0, x0, #0x0
     370:	str	x0, [x19, #72]
     374:	ldr	x3, [x19, #64]
     378:	mov	w2, #0x1bf8                	// #7160
     37c:	ldr	x0, [x19, #80]
     380:	mov	w1, #0x1                   	// #1
     384:	blr	x3
     388:	mov	x21, x0
     38c:	cbz	x0, 3ec <inflateInit2_+0xdc>
     390:	str	x21, [x19, #56]
     394:	mov	w0, #0x3f34                	// #16180
     398:	str	x19, [x21]
     39c:	mov	w1, w20
     3a0:	str	w0, [x21, #8]
     3a4:	mov	x0, x19
     3a8:	str	xzr, [x21, #72]
     3ac:	bl	268 <inflateReset2>
     3b0:	mov	w20, w0
     3b4:	cbz	w0, 3c8 <inflateInit2_+0xb8>
     3b8:	ldp	x2, x0, [x19, #72]
     3bc:	mov	x1, x21
     3c0:	blr	x2
     3c4:	str	xzr, [x19, #56]
     3c8:	mov	w0, w20
     3cc:	ldp	x19, x20, [sp, #16]
     3d0:	ldr	x21, [sp, #32]
     3d4:	ldp	x29, x30, [sp], #48
     3d8:	ret
     3dc:	mov	w20, #0xfffffffa            	// #-6
     3e0:	b	3c8 <inflateInit2_+0xb8>
     3e4:	mov	w20, #0xfffffffe            	// #-2
     3e8:	b	3c8 <inflateInit2_+0xb8>
     3ec:	mov	w20, #0xfffffffc            	// #-4
     3f0:	b	3c8 <inflateInit2_+0xb8>

00000000000003f4 <inflateInit_>:
     3f4:	mov	w3, w2
     3f8:	mov	x2, x1
     3fc:	mov	w1, #0xf                   	// #15
     400:	b	310 <inflateInit2_>

0000000000000404 <inflatePrime>:
     404:	mov	x3, x0
     408:	mov	w5, w1
     40c:	mov	w6, w2
     410:	stp	x29, x30, [sp, #-16]!
     414:	mov	x29, sp
     418:	bl	170 <inflateStateCheck>
     41c:	cbnz	w0, 478 <inflatePrime+0x74>
     420:	ldr	x4, [x3, #56]
     424:	tbz	w5, #31, 438 <inflatePrime+0x34>
     428:	str	xzr, [x4, #80]
     42c:	str	wzr, [x4, #88]
     430:	ldp	x29, x30, [sp], #16
     434:	ret
     438:	cmp	w5, #0x10
     43c:	b.gt	478 <inflatePrime+0x74>
     440:	ldr	w8, [x4, #88]
     444:	add	w7, w5, w8
     448:	cmp	w7, #0x20
     44c:	b.hi	478 <inflatePrime+0x74>  // b.pmore
     450:	mov	x3, #0x1                   	// #1
     454:	str	w7, [x4, #88]
     458:	lsl	x1, x3, x5
     45c:	sub	w1, w1, #0x1
     460:	and	w2, w1, w6
     464:	ldr	x1, [x4, #80]
     468:	lsl	w2, w2, w8
     46c:	add	x2, x1, x2
     470:	str	x2, [x4, #80]
     474:	b	430 <inflatePrime+0x2c>
     478:	mov	w0, #0xfffffffe            	// #-2
     47c:	b	430 <inflatePrime+0x2c>

0000000000000480 <inflate>:
     480:	stp	x29, x30, [sp, #-176]!
     484:	mov	x29, sp
     488:	stp	x19, x20, [sp, #16]
     48c:	stp	x21, x22, [sp, #32]
     490:	stp	x23, x24, [sp, #48]
     494:	stp	x25, x26, [sp, #64]
     498:	stp	x27, x28, [sp, #80]
     49c:	mov	x27, x0
     4a0:	str	w1, [sp, #112]
     4a4:	bl	170 <inflateStateCheck>
     4a8:	cbnz	w0, 1848 <inflate+0x13c8>
     4ac:	ldr	x23, [x27, #24]
     4b0:	cbz	x23, 1848 <inflate+0x13c8>
     4b4:	ldr	x22, [x27]
     4b8:	ldr	w0, [x27, #8]
     4bc:	str	w0, [sp, #116]
     4c0:	cbnz	x22, 4cc <inflate+0x4c>
     4c4:	mov	w0, w0
     4c8:	cbnz	w0, 1848 <inflate+0x13c8>
     4cc:	ldr	x19, [x27, #56]
     4d0:	mov	w0, #0x3f3f                	// #16191
     4d4:	ldr	w1, [x19, #8]
     4d8:	cmp	w1, w0
     4dc:	b.ne	4e8 <inflate+0x68>  // b.any
     4e0:	mov	w0, #0x3f40                	// #16192
     4e4:	str	w0, [x19, #8]
     4e8:	ldr	w25, [x19, #88]
     4ec:	adrp	x0, 0 <syncsearch>
     4f0:	ldr	w24, [sp, #116]
     4f4:	add	x0, x0, #0x0
     4f8:	ldr	x26, [x19, #80]
     4fc:	mov	w21, #0x0                   	// #0
     500:	ldr	w20, [x27, #32]
     504:	str	w20, [sp, #108]
     508:	str	x0, [sp, #120]
     50c:	add	x0, x0, #0x880
     510:	str	x0, [sp, #128]
     514:	ldr	w0, [x19, #8]
     518:	mov	w1, #0xffffc0cc            	// #-16180
     51c:	add	w0, w0, w1
     520:	cmp	w0, #0x1e
     524:	b.hi	1848 <inflate+0x13c8>  // b.pmore
     528:	adrp	x1, 0 <syncsearch>
     52c:	add	x1, x1, #0x0
     530:	ldrh	w0, [x1, w0, uxtw #1]
     534:	adr	x1, 540 <inflate+0xc0>
     538:	add	x0, x1, w0, sxth #2
     53c:	br	x0
     540:	mov	w21, #0xfffffffd            	// #-3
     544:	ldr	w0, [x19, #60]
     548:	str	x22, [x27]
     54c:	str	w24, [x27, #8]
     550:	str	x23, [x27, #24]
     554:	str	w20, [x27, #32]
     558:	str	x26, [x19, #80]
     55c:	str	w25, [x19, #88]
     560:	cbnz	w0, 598 <inflate+0x118>
     564:	ldr	w0, [sp, #108]
     568:	cmp	w0, w20
     56c:	b.eq	1750 <inflate+0x12d0>  // b.none
     570:	ldr	w0, [x19, #8]
     574:	mov	w1, #0x3f50                	// #16208
     578:	cmp	w0, w1
     57c:	b.hi	1750 <inflate+0x12d0>  // b.pmore
     580:	mov	w1, #0x3f4d                	// #16205
     584:	cmp	w0, w1
     588:	b.ls	598 <inflate+0x118>  // b.plast
     58c:	ldr	w0, [sp, #112]
     590:	cmp	w0, #0x4
     594:	b.eq	1750 <inflate+0x12d0>  // b.none
     598:	ldr	w0, [sp, #108]
     59c:	mov	x1, x23
     5a0:	sub	w2, w0, w20
     5a4:	mov	x0, x27
     5a8:	bl	58 <updatewindow>
     5ac:	cbz	w0, 1750 <inflate+0x12d0>
     5b0:	mov	w0, #0x3f52                	// #16210
     5b4:	str	w0, [x19, #8]
     5b8:	mov	w21, #0xfffffffc            	// #-4
     5bc:	b	c1c <inflate+0x79c>
     5c0:	ldr	w0, [x19, #16]
     5c4:	cbnz	w0, 5ec <inflate+0x16c>
     5c8:	mov	w0, #0x3f40                	// #16192
     5cc:	str	w0, [x19, #8]
     5d0:	b	514 <inflate+0x94>
     5d4:	cbz	w24, 544 <inflate+0xc4>
     5d8:	ldrb	w1, [x22], #1
     5dc:	sub	w24, w24, #0x1
     5e0:	lsl	x1, x1, x25
     5e4:	add	w25, w25, #0x8
     5e8:	add	x26, x26, x1
     5ec:	cmp	w25, #0xf
     5f0:	b.ls	5d4 <inflate+0x154>  // b.plast
     5f4:	tbz	w0, #1, 654 <inflate+0x1d4>
     5f8:	mov	x1, #0x8b1f                	// #35615
     5fc:	cmp	x26, x1
     600:	b.ne	654 <inflate+0x1d4>  // b.any
     604:	ldr	w0, [x19, #56]
     608:	cbnz	w0, 614 <inflate+0x194>
     60c:	mov	w0, #0xf                   	// #15
     610:	str	w0, [x19, #56]
     614:	mov	w2, #0x0                   	// #0
     618:	mov	x1, #0x0                   	// #0
     61c:	mov	x0, #0x0                   	// #0
     620:	bl	0 <crc32>
     624:	str	x0, [x19, #32]
     628:	mov	w1, #0xffff8b1f            	// #-29921
     62c:	mov	w2, #0x2                   	// #2
     630:	strh	w1, [sp, #168]
     634:	add	x1, sp, #0xa8
     638:	bl	0 <crc32>
     63c:	mov	w25, #0x0                   	// #0
     640:	mov	x26, #0x0                   	// #0
     644:	str	x0, [x19, #32]
     648:	mov	w0, #0x3f35                	// #16181
     64c:	str	w0, [x19, #8]
     650:	b	514 <inflate+0x94>
     654:	ldr	x1, [x19, #48]
     658:	str	wzr, [x19, #24]
     65c:	cbz	x1, 668 <inflate+0x1e8>
     660:	mov	w2, #0xffffffff            	// #-1
     664:	str	w2, [x1, #72]
     668:	tbz	w0, #0, 684 <inflate+0x204>
     66c:	ubfiz	x0, x26, #8, #8
     670:	mov	x2, #0x1f                  	// #31
     674:	add	x0, x0, x26, lsr #8
     678:	udiv	x1, x0, x2
     67c:	msub	x0, x1, x2, x0
     680:	cbz	x0, 698 <inflate+0x218>
     684:	adrp	x0, 0 <syncsearch>
     688:	add	x0, x0, #0x0
     68c:	str	x0, [x27, #48]
     690:	mov	w0, #0x3f51                	// #16209
     694:	b	5cc <inflate+0x14c>
     698:	and	w0, w26, #0xf
     69c:	cmp	w0, #0x8
     6a0:	b.eq	6b0 <inflate+0x230>  // b.none
     6a4:	adrp	x0, 0 <syncsearch>
     6a8:	add	x0, x0, #0x0
     6ac:	b	68c <inflate+0x20c>
     6b0:	ldr	w1, [x19, #56]
     6b4:	lsr	x26, x26, #4
     6b8:	and	w0, w26, #0xf
     6bc:	sub	w25, w25, #0x4
     6c0:	add	w0, w0, #0x8
     6c4:	cbnz	w1, 6e0 <inflate+0x260>
     6c8:	str	w0, [x19, #56]
     6cc:	cmp	w0, #0xf
     6d0:	b.ls	6f0 <inflate+0x270>  // b.plast
     6d4:	adrp	x0, 0 <syncsearch>
     6d8:	add	x0, x0, #0x0
     6dc:	b	68c <inflate+0x20c>
     6e0:	cmp	w0, #0xf
     6e4:	b.hi	6d4 <inflate+0x254>  // b.pmore
     6e8:	cmp	w1, w0
     6ec:	b.cc	6d4 <inflate+0x254>  // b.lo, b.ul, b.last
     6f0:	mov	w1, #0x1                   	// #1
     6f4:	mov	w2, #0x0                   	// #0
     6f8:	lsl	w0, w1, w0
     6fc:	str	w0, [x19, #28]
     700:	mov	x1, #0x0                   	// #0
     704:	mov	x0, #0x0                   	// #0
     708:	bl	0 <adler32>
     70c:	str	x0, [x19, #32]
     710:	tst	x26, #0x200
     714:	str	x0, [x27, #96]
     718:	mov	w1, #0x3f3f                	// #16191
     71c:	mov	w0, #0x3f3d                	// #16189
     720:	mov	w25, #0x0                   	// #0
     724:	csel	w0, w0, w1, ne  // ne = any
     728:	mov	x26, #0x0                   	// #0
     72c:	str	w0, [x19, #8]
     730:	b	514 <inflate+0x94>
     734:	cbz	w24, 544 <inflate+0xc4>
     738:	ldrb	w0, [x22], #1
     73c:	sub	w24, w24, #0x1
     740:	lsl	x0, x0, x25
     744:	add	w25, w25, #0x8
     748:	add	x26, x26, x0
     74c:	cmp	w25, #0xf
     750:	b.ls	734 <inflate+0x2b4>  // b.plast
     754:	str	w26, [x19, #24]
     758:	and	w0, w26, #0xff
     75c:	mov	w1, w26
     760:	cmp	w0, #0x8
     764:	b.ne	6a4 <inflate+0x224>  // b.any
     768:	tst	x26, #0xe000
     76c:	b.eq	77c <inflate+0x2fc>  // b.none
     770:	adrp	x0, 0 <syncsearch>
     774:	add	x0, x0, #0x0
     778:	b	68c <inflate+0x20c>
     77c:	ldr	x0, [x19, #48]
     780:	cbz	x0, 78c <inflate+0x30c>
     784:	ubfx	w2, w26, #8, #1
     788:	str	w2, [x0]
     78c:	tbz	w1, #9, 7b0 <inflate+0x330>
     790:	ldr	w0, [x19, #16]
     794:	tbz	w0, #2, 7b0 <inflate+0x330>
     798:	ldr	x0, [x19, #32]
     79c:	add	x1, sp, #0xa8
     7a0:	mov	w2, #0x2                   	// #2
     7a4:	strh	w26, [sp, #168]
     7a8:	bl	0 <crc32>
     7ac:	str	x0, [x19, #32]
     7b0:	mov	w0, #0x3f36                	// #16182
     7b4:	mov	w25, #0x0                   	// #0
     7b8:	mov	x26, #0x0                   	// #0
     7bc:	str	w0, [x19, #8]
     7c0:	cmp	w25, #0x1f
     7c4:	b.ls	8b4 <inflate+0x434>  // b.plast
     7c8:	ldr	x0, [x19, #48]
     7cc:	cbz	x0, 7d4 <inflate+0x354>
     7d0:	str	x26, [x0, #8]
     7d4:	ldr	w0, [x19, #24]
     7d8:	tbz	w0, #9, 7fc <inflate+0x37c>
     7dc:	ldr	w0, [x19, #16]
     7e0:	tbz	w0, #2, 7fc <inflate+0x37c>
     7e4:	ldr	x0, [x19, #32]
     7e8:	add	x1, sp, #0xa8
     7ec:	mov	w2, #0x4                   	// #4
     7f0:	str	w26, [sp, #168]
     7f4:	bl	0 <crc32>
     7f8:	str	x0, [x19, #32]
     7fc:	mov	w0, #0x3f37                	// #16183
     800:	mov	w25, #0x0                   	// #0
     804:	mov	x26, #0x0                   	// #0
     808:	str	w0, [x19, #8]
     80c:	cmp	w25, #0xf
     810:	b.ls	8d0 <inflate+0x450>  // b.plast
     814:	ldr	x0, [x19, #48]
     818:	cbz	x0, 82c <inflate+0x3ac>
     81c:	and	w1, w26, #0xff
     820:	str	w1, [x0, #16]
     824:	lsr	x1, x26, #8
     828:	str	w1, [x0, #20]
     82c:	ldr	w0, [x19, #24]
     830:	tbz	w0, #9, 854 <inflate+0x3d4>
     834:	ldr	w0, [x19, #16]
     838:	tbz	w0, #2, 854 <inflate+0x3d4>
     83c:	ldr	x0, [x19, #32]
     840:	add	x1, sp, #0xa8
     844:	mov	w2, #0x2                   	// #2
     848:	strh	w26, [sp, #168]
     84c:	bl	0 <crc32>
     850:	str	x0, [x19, #32]
     854:	mov	w0, #0x3f38                	// #16184
     858:	mov	w25, #0x0                   	// #0
     85c:	mov	x26, #0x0                   	// #0
     860:	str	w0, [x19, #8]
     864:	ldr	w1, [x19, #24]
     868:	tbz	w1, #10, 908 <inflate+0x488>
     86c:	cmp	w25, #0xf
     870:	b.ls	8ec <inflate+0x46c>  // b.plast
     874:	ldr	x0, [x19, #48]
     878:	str	w26, [x19, #92]
     87c:	cbz	x0, 884 <inflate+0x404>
     880:	str	w26, [x0, #32]
     884:	tbz	w1, #9, 8a8 <inflate+0x428>
     888:	ldr	w0, [x19, #16]
     88c:	tbz	w0, #2, 8a8 <inflate+0x428>
     890:	ldr	x0, [x19, #32]
     894:	add	x1, sp, #0xa8
     898:	mov	w2, #0x2                   	// #2
     89c:	strh	w26, [sp, #168]
     8a0:	bl	0 <crc32>
     8a4:	str	x0, [x19, #32]
     8a8:	mov	w25, #0x0                   	// #0
     8ac:	mov	x26, #0x0                   	// #0
     8b0:	b	914 <inflate+0x494>
     8b4:	cbz	w24, 544 <inflate+0xc4>
     8b8:	ldrb	w0, [x22], #1
     8bc:	sub	w24, w24, #0x1
     8c0:	lsl	x0, x0, x25
     8c4:	add	w25, w25, #0x8
     8c8:	add	x26, x26, x0
     8cc:	b	7c0 <inflate+0x340>
     8d0:	cbz	w24, 544 <inflate+0xc4>
     8d4:	ldrb	w0, [x22], #1
     8d8:	sub	w24, w24, #0x1
     8dc:	lsl	x0, x0, x25
     8e0:	add	w25, w25, #0x8
     8e4:	add	x26, x26, x0
     8e8:	b	80c <inflate+0x38c>
     8ec:	cbz	w24, 544 <inflate+0xc4>
     8f0:	ldrb	w0, [x22], #1
     8f4:	sub	w24, w24, #0x1
     8f8:	lsl	x0, x0, x25
     8fc:	add	w25, w25, #0x8
     900:	add	x26, x26, x0
     904:	b	86c <inflate+0x3ec>
     908:	ldr	x0, [x19, #48]
     90c:	cbz	x0, 914 <inflate+0x494>
     910:	str	xzr, [x0, #24]
     914:	mov	w0, #0x3f39                	// #16185
     918:	str	w0, [x19, #8]
     91c:	ldr	w0, [x19, #24]
     920:	tbz	w0, #10, 9c0 <inflate+0x540>
     924:	ldr	w1, [x19, #92]
     928:	cmp	w24, w1
     92c:	csel	w28, w24, w1, ls  // ls = plast
     930:	cbz	w28, 9b8 <inflate+0x538>
     934:	ldr	x4, [x19, #48]
     938:	mov	w0, w28
     93c:	str	x0, [sp, #136]
     940:	cbz	x4, 97c <inflate+0x4fc>
     944:	ldr	x0, [x4, #24]
     948:	cbz	x0, 97c <inflate+0x4fc>
     94c:	ldp	w2, w11, [x4, #32]
     950:	sub	w5, w2, w1
     954:	sub	w12, w2, w1
     958:	add	w4, w28, w5
     95c:	add	w1, w11, w1
     960:	cmp	w4, w11
     964:	sub	w2, w1, w2
     968:	mov	w1, w28
     96c:	add	x0, x0, x12
     970:	csel	x2, x2, x1, hi  // hi = pmore
     974:	mov	x1, x22
     978:	bl	0 <memcpy>
     97c:	ldr	w0, [x19, #24]
     980:	tbz	w0, #9, 9a0 <inflate+0x520>
     984:	ldr	w0, [x19, #16]
     988:	tbz	w0, #2, 9a0 <inflate+0x520>
     98c:	ldr	x0, [x19, #32]
     990:	mov	w2, w28
     994:	mov	x1, x22
     998:	bl	0 <crc32>
     99c:	str	x0, [x19, #32]
     9a0:	mov	w0, w28
     9a4:	sub	w24, w24, w28
     9a8:	add	x22, x22, x0
     9ac:	ldr	w0, [x19, #92]
     9b0:	sub	w3, w0, w28
     9b4:	str	w3, [x19, #92]
     9b8:	ldr	w0, [x19, #92]
     9bc:	cbnz	w0, 544 <inflate+0xc4>
     9c0:	mov	w0, #0x3f3a                	// #16186
     9c4:	str	w0, [x19, #8]
     9c8:	str	wzr, [x19, #92]
     9cc:	ldr	w0, [x19, #24]
     9d0:	tbz	w0, #11, b20 <inflate+0x6a0>
     9d4:	cbz	w24, 544 <inflate+0xc4>
     9d8:	mov	w28, #0x0                   	// #0
     9dc:	ldr	x1, [x19, #48]
     9e0:	ldrb	w3, [x22, w28, uxtw]
     9e4:	add	w28, w28, #0x1
     9e8:	cbz	x1, a10 <inflate+0x590>
     9ec:	ldr	x2, [x1, #40]
     9f0:	cbz	x2, a10 <inflate+0x590>
     9f4:	ldr	w1, [x1, #48]
     9f8:	ldr	w0, [x19, #92]
     9fc:	cmp	w0, w1
     a00:	b.cs	a10 <inflate+0x590>  // b.hs, b.nlast
     a04:	add	w1, w0, #0x1
     a08:	str	w1, [x19, #92]
     a0c:	strb	w3, [x2, w0, uxtw]
     a10:	cmp	w3, #0x0
     a14:	ccmp	w24, w28, #0x0, ne  // ne = any
     a18:	b.hi	9dc <inflate+0x55c>  // b.pmore
     a1c:	ldr	w0, [x19, #24]
     a20:	tbz	w0, #9, a48 <inflate+0x5c8>
     a24:	ldr	w0, [x19, #16]
     a28:	tbz	w0, #2, a48 <inflate+0x5c8>
     a2c:	ldr	x0, [x19, #32]
     a30:	mov	w2, w28
     a34:	mov	x1, x22
     a38:	str	w3, [sp, #136]
     a3c:	bl	0 <crc32>
     a40:	str	x0, [x19, #32]
     a44:	ldr	w3, [sp, #136]
     a48:	sub	w24, w24, w28
     a4c:	add	x22, x22, w28, uxtw
     a50:	cbnz	w3, 544 <inflate+0xc4>
     a54:	mov	w0, #0x3f3b                	// #16187
     a58:	str	w0, [x19, #8]
     a5c:	str	wzr, [x19, #92]
     a60:	ldr	w0, [x19, #24]
     a64:	tbz	w0, #12, b30 <inflate+0x6b0>
     a68:	cbz	w24, 544 <inflate+0xc4>
     a6c:	mov	w28, #0x0                   	// #0
     a70:	ldr	x1, [x19, #48]
     a74:	ldrb	w3, [x22, w28, uxtw]
     a78:	add	w28, w28, #0x1
     a7c:	cbz	x1, aa4 <inflate+0x624>
     a80:	ldr	x2, [x1, #56]
     a84:	cbz	x2, aa4 <inflate+0x624>
     a88:	ldr	w1, [x1, #64]
     a8c:	ldr	w0, [x19, #92]
     a90:	cmp	w0, w1
     a94:	b.cs	aa4 <inflate+0x624>  // b.hs, b.nlast
     a98:	add	w1, w0, #0x1
     a9c:	str	w1, [x19, #92]
     aa0:	strb	w3, [x2, w0, uxtw]
     aa4:	cmp	w3, #0x0
     aa8:	ccmp	w24, w28, #0x0, ne  // ne = any
     aac:	b.hi	a70 <inflate+0x5f0>  // b.pmore
     ab0:	ldr	w0, [x19, #24]
     ab4:	tbz	w0, #9, adc <inflate+0x65c>
     ab8:	ldr	w0, [x19, #16]
     abc:	tbz	w0, #2, adc <inflate+0x65c>
     ac0:	ldr	x0, [x19, #32]
     ac4:	mov	w2, w28
     ac8:	mov	x1, x22
     acc:	str	w3, [sp, #136]
     ad0:	bl	0 <crc32>
     ad4:	str	x0, [x19, #32]
     ad8:	ldr	w3, [sp, #136]
     adc:	sub	w24, w24, w28
     ae0:	add	x22, x22, w28, uxtw
     ae4:	cbnz	w3, 544 <inflate+0xc4>
     ae8:	mov	w0, #0x3f3c                	// #16188
     aec:	str	w0, [x19, #8]
     af0:	ldr	w0, [x19, #24]
     af4:	tbz	w0, #9, b64 <inflate+0x6e4>
     af8:	cmp	w25, #0xf
     afc:	b.ls	b40 <inflate+0x6c0>  // b.plast
     b00:	ldr	w1, [x19, #16]
     b04:	tbz	w1, #2, b5c <inflate+0x6dc>
     b08:	ldrh	w1, [x19, #32]
     b0c:	cmp	x1, x26
     b10:	b.eq	b5c <inflate+0x6dc>  // b.none
     b14:	adrp	x0, 0 <syncsearch>
     b18:	add	x0, x0, #0x0
     b1c:	b	68c <inflate+0x20c>
     b20:	ldr	x0, [x19, #48]
     b24:	cbz	x0, a54 <inflate+0x5d4>
     b28:	str	xzr, [x0, #40]
     b2c:	b	a54 <inflate+0x5d4>
     b30:	ldr	x0, [x19, #48]
     b34:	cbz	x0, ae8 <inflate+0x668>
     b38:	str	xzr, [x0, #56]
     b3c:	b	ae8 <inflate+0x668>
     b40:	cbz	w24, 544 <inflate+0xc4>
     b44:	ldrb	w1, [x22], #1
     b48:	sub	w24, w24, #0x1
     b4c:	lsl	x1, x1, x25
     b50:	add	w25, w25, #0x8
     b54:	add	x26, x26, x1
     b58:	b	af8 <inflate+0x678>
     b5c:	mov	w25, #0x0                   	// #0
     b60:	mov	x26, #0x0                   	// #0
     b64:	ldr	x1, [x19, #48]
     b68:	cbz	x1, b7c <inflate+0x6fc>
     b6c:	ubfx	x0, x0, #9, #1
     b70:	str	w0, [x1, #68]
     b74:	mov	w0, #0x1                   	// #1
     b78:	str	w0, [x1, #72]
     b7c:	mov	w2, #0x0                   	// #0
     b80:	mov	x1, #0x0                   	// #0
     b84:	mov	x0, #0x0                   	// #0
     b88:	bl	0 <crc32>
     b8c:	str	x0, [x19, #32]
     b90:	str	x0, [x27, #96]
     b94:	mov	w0, #0x3f3f                	// #16191
     b98:	b	5cc <inflate+0x14c>
     b9c:	cbz	w24, 544 <inflate+0xc4>
     ba0:	ldrb	w0, [x22], #1
     ba4:	sub	w24, w24, #0x1
     ba8:	lsl	x0, x0, x25
     bac:	add	w25, w25, #0x8
     bb0:	add	x26, x26, x0
     bb4:	cmp	w25, #0x1f
     bb8:	b.ls	b9c <inflate+0x71c>  // b.plast
     bbc:	lsr	x1, x26, #8
     bc0:	lsr	w0, w26, #24
     bc4:	and	x1, x1, #0xff00
     bc8:	lsl	w6, w26, #24
     bcc:	orr	x0, x0, x1
     bd0:	lsl	x1, x26, #8
     bd4:	and	x1, x1, #0xff0000
     bd8:	mov	w25, #0x0                   	// #0
     bdc:	add	x6, x1, x6
     be0:	mov	x26, #0x0                   	// #0
     be4:	add	x6, x0, x6
     be8:	str	x6, [x19, #32]
     bec:	str	x6, [x27, #96]
     bf0:	mov	w0, #0x3f3e                	// #16190
     bf4:	str	w0, [x19, #8]
     bf8:	ldr	w0, [x19, #20]
     bfc:	cbnz	w0, c3c <inflate+0x7bc>
     c00:	str	x22, [x27]
     c04:	mov	w21, #0x2                   	// #2
     c08:	str	w24, [x27, #8]
     c0c:	str	x23, [x27, #24]
     c10:	str	w20, [x27, #32]
     c14:	str	x26, [x19, #80]
     c18:	str	w25, [x19, #88]
     c1c:	mov	w0, w21
     c20:	ldp	x19, x20, [sp, #16]
     c24:	ldp	x21, x22, [sp, #32]
     c28:	ldp	x23, x24, [sp, #48]
     c2c:	ldp	x25, x26, [sp, #64]
     c30:	ldp	x27, x28, [sp, #80]
     c34:	ldp	x29, x30, [sp], #176
     c38:	ret
     c3c:	mov	w2, #0x0                   	// #0
     c40:	mov	x1, #0x0                   	// #0
     c44:	mov	x0, #0x0                   	// #0
     c48:	bl	0 <adler32>
     c4c:	str	x0, [x19, #32]
     c50:	str	x0, [x27, #96]
     c54:	mov	w0, #0x3f3f                	// #16191
     c58:	str	w0, [x19, #8]
     c5c:	ldr	w0, [sp, #112]
     c60:	sub	w0, w0, #0x5
     c64:	cmp	w0, #0x1
     c68:	b.ls	544 <inflate+0xc4>  // b.plast
     c6c:	ldr	w0, [x19, #12]
     c70:	cbz	w0, ca0 <inflate+0x820>
     c74:	and	w0, w25, #0x7
     c78:	and	w25, w25, #0xfffffff8
     c7c:	lsr	x26, x26, x0
     c80:	mov	w0, #0x3f4e                	// #16206
     c84:	b	5cc <inflate+0x14c>
     c88:	cbz	w24, 544 <inflate+0xc4>
     c8c:	ldrb	w0, [x22], #1
     c90:	sub	w24, w24, #0x1
     c94:	lsl	x0, x0, x25
     c98:	add	w25, w25, #0x8
     c9c:	add	x26, x26, x0
     ca0:	cmp	w25, #0x2
     ca4:	b.ls	c88 <inflate+0x808>  // b.plast
     ca8:	and	w0, w26, #0x1
     cac:	str	w0, [x19, #12]
     cb0:	ubfx	w0, w26, #1, #2
     cb4:	lsr	x6, x26, #3
     cb8:	sub	w7, w25, #0x3
     cbc:	cmp	w0, #0x2
     cc0:	b.eq	d24 <inflate+0x8a4>  // b.none
     cc4:	cmp	w0, #0x3
     cc8:	b.eq	d2c <inflate+0x8ac>  // b.none
     ccc:	cmp	w0, #0x1
     cd0:	b.eq	ce8 <inflate+0x868>  // b.none
     cd4:	mov	w0, #0x3f41                	// #16193
     cd8:	str	w0, [x19, #8]
     cdc:	mov	x26, x6
     ce0:	mov	w25, w7
     ce4:	b	514 <inflate+0x94>
     ce8:	ldr	x0, [sp, #120]
     cec:	str	x0, [x19, #104]
     cf0:	add	x0, x0, #0x800
     cf4:	str	x0, [x19, #112]
     cf8:	mov	x0, #0x9                   	// #9
     cfc:	movk	x0, #0x5, lsl #32
     d00:	str	x0, [x19, #120]
     d04:	mov	w0, #0x3f47                	// #16199
     d08:	str	w0, [x19, #8]
     d0c:	ldr	w0, [sp, #112]
     d10:	cmp	w0, #0x6
     d14:	b.ne	cdc <inflate+0x85c>  // b.any
     d18:	mov	x26, x6
     d1c:	mov	w25, w7
     d20:	b	544 <inflate+0xc4>
     d24:	mov	w0, #0x3f44                	// #16196
     d28:	b	cd8 <inflate+0x858>
     d2c:	adrp	x0, 0 <syncsearch>
     d30:	add	x0, x0, #0x0
     d34:	str	x0, [x27, #48]
     d38:	mov	w0, #0x3f51                	// #16209
     d3c:	b	cd8 <inflate+0x858>
     d40:	and	w0, w25, #0x7
     d44:	and	w25, w25, #0xfffffff8
     d48:	lsr	x26, x26, x0
     d4c:	cmp	w25, #0x1f
     d50:	b.ls	d74 <inflate+0x8f4>  // b.plast
     d54:	lsr	x0, x26, #16
     d58:	and	x1, x26, #0xffff
     d5c:	eor	x0, x0, #0xffff
     d60:	cmp	x0, w26, uxth
     d64:	b.eq	d90 <inflate+0x910>  // b.none
     d68:	adrp	x0, 0 <syncsearch>
     d6c:	add	x0, x0, #0x0
     d70:	b	68c <inflate+0x20c>
     d74:	cbz	w24, 544 <inflate+0xc4>
     d78:	ldrb	w0, [x22], #1
     d7c:	sub	w24, w24, #0x1
     d80:	lsl	x0, x0, x25
     d84:	add	w25, w25, #0x8
     d88:	add	x26, x26, x0
     d8c:	b	d4c <inflate+0x8cc>
     d90:	mov	w0, #0x3f42                	// #16194
     d94:	str	w0, [x19, #8]
     d98:	ldr	w0, [sp, #112]
     d9c:	mov	w25, #0x0                   	// #0
     da0:	str	w1, [x19, #92]
     da4:	mov	x26, #0x0                   	// #0
     da8:	cmp	w0, #0x6
     dac:	b.eq	544 <inflate+0xc4>  // b.none
     db0:	mov	w0, #0x3f43                	// #16195
     db4:	str	w0, [x19, #8]
     db8:	ldr	w28, [x19, #92]
     dbc:	cbz	w28, b94 <inflate+0x714>
     dc0:	cmp	w20, w28
     dc4:	csel	w28, w20, w28, ls  // ls = plast
     dc8:	cmp	w24, w28
     dcc:	csel	w28, w24, w28, ls  // ls = plast
     dd0:	cbz	w28, 544 <inflate+0xc4>
     dd4:	mov	w2, w28
     dd8:	mov	x1, x22
     ddc:	mov	x0, x23
     de0:	str	x2, [sp, #136]
     de4:	bl	0 <memcpy>
     de8:	sub	w24, w24, w28
     dec:	ldr	x2, [sp, #136]
     df0:	sub	w20, w20, w28
     df4:	ldr	w0, [x19, #92]
     df8:	add	x22, x22, x2
     dfc:	add	x23, x23, x2
     e00:	sub	w28, w0, w28
     e04:	str	w28, [x19, #92]
     e08:	b	514 <inflate+0x94>
     e0c:	cbz	w24, 544 <inflate+0xc4>
     e10:	ldrb	w0, [x22], #1
     e14:	sub	w24, w24, #0x1
     e18:	lsl	x0, x0, x25
     e1c:	add	w25, w25, #0x8
     e20:	add	x26, x26, x0
     e24:	cmp	w25, #0xd
     e28:	b.ls	e0c <inflate+0x98c>  // b.plast
     e2c:	and	w1, w26, #0x1f
     e30:	ubfx	w0, w26, #5, #5
     e34:	ubfx	w2, w26, #10, #4
     e38:	add	w1, w1, #0x101
     e3c:	add	w0, w0, #0x1
     e40:	add	w2, w2, #0x4
     e44:	stp	w2, w1, [x19, #128]
     e48:	lsr	x26, x26, #14
     e4c:	str	w0, [x19, #136]
     e50:	sub	w25, w25, #0xe
     e54:	cmp	w1, #0x11e
     e58:	b.hi	e64 <inflate+0x9e4>  // b.pmore
     e5c:	cmp	w0, #0x1e
     e60:	b.ls	e70 <inflate+0x9f0>  // b.plast
     e64:	adrp	x0, 0 <syncsearch>
     e68:	add	x0, x0, #0x0
     e6c:	b	68c <inflate+0x20c>
     e70:	mov	w0, #0x3f45                	// #16197
     e74:	str	w0, [x19, #8]
     e78:	str	wzr, [x19, #140]
     e7c:	ldr	w2, [x19, #128]
     e80:	ldr	w0, [x19, #140]
     e84:	cmp	w0, w2
     e88:	b.cc	ef4 <inflate+0xa74>  // b.lo, b.ul, b.last
     e8c:	ldr	w0, [x19, #140]
     e90:	cmp	w0, #0x12
     e94:	b.ls	f24 <inflate+0xaa4>  // b.plast
     e98:	add	x0, x19, #0x558
     e9c:	str	x0, [x19, #104]
     ea0:	str	x0, [x19, #144]
     ea4:	mov	w0, #0x7                   	// #7
     ea8:	str	w0, [x19, #120]
     eac:	add	x5, x19, #0x318
     eb0:	add	x4, x19, #0x78
     eb4:	add	x3, x19, #0x90
     eb8:	add	x1, x19, #0x98
     ebc:	mov	w2, #0x13                  	// #19
     ec0:	mov	w0, #0x0                   	// #0
     ec4:	bl	0 <inflate_table>
     ec8:	mov	w21, w0
     ecc:	cbz	w0, f40 <inflate+0xac0>
     ed0:	adrp	x0, 0 <syncsearch>
     ed4:	add	x0, x0, #0x0
     ed8:	b	68c <inflate+0x20c>
     edc:	cbz	w24, 544 <inflate+0xc4>
     ee0:	ldrb	w1, [x22], #1
     ee4:	sub	w24, w24, #0x1
     ee8:	lsl	x1, x1, x25
     eec:	add	w25, w25, #0x8
     ef0:	add	x26, x26, x1
     ef4:	cmp	w25, #0x2
     ef8:	b.ls	edc <inflate+0xa5c>  // b.plast
     efc:	add	w1, w0, #0x1
     f00:	str	w1, [x19, #140]
     f04:	ldr	x1, [sp, #128]
     f08:	sub	w25, w25, #0x3
     f0c:	ldrh	w0, [x1, w0, uxtw #1]
     f10:	and	w1, w26, #0x7
     f14:	lsr	x26, x26, #3
     f18:	add	x0, x19, x0, lsl #1
     f1c:	strh	w1, [x0, #152]
     f20:	b	e80 <inflate+0xa00>
     f24:	add	w1, w0, #0x1
     f28:	str	w1, [x19, #140]
     f2c:	ldr	x1, [sp, #128]
     f30:	ldrh	w0, [x1, w0, uxtw #1]
     f34:	add	x0, x19, x0, lsl #1
     f38:	strh	wzr, [x0, #152]
     f3c:	b	e8c <inflate+0xa0c>
     f40:	mov	w0, #0x3f46                	// #16198
     f44:	str	w0, [x19, #8]
     f48:	str	wzr, [x19, #140]
     f4c:	ldp	w2, w4, [x19, #132]
     f50:	mov	w11, #0xffffffff            	// #-1
     f54:	mov	w12, #0xfffffff9            	// #-7
     f58:	mov	w13, #0xfffffffd            	// #-3
     f5c:	add	w4, w2, w4
     f60:	b	f88 <inflate+0xb08>
     f64:	ldrh	w1, [x5, #2]
     f68:	cmp	w1, #0xf
     f6c:	b.hi	fd4 <inflate+0xb54>  // b.pmore
     f70:	sub	w25, w25, w0
     f74:	lsr	x26, x26, x0
     f78:	add	w0, w3, #0x1
     f7c:	add	x3, x19, w3, uxtw #1
     f80:	str	w0, [x19, #140]
     f84:	strh	w1, [x3, #152]
     f88:	ldr	w3, [x19, #140]
     f8c:	cmp	w3, w4
     f90:	b.cs	1008 <inflate+0xb88>  // b.hs, b.nlast
     f94:	ldr	w1, [x19, #120]
     f98:	ldr	x14, [x19, #104]
     f9c:	lsl	w1, w11, w1
     fa0:	mvn	w1, w1
     fa4:	and	w5, w1, w26
     fa8:	add	x5, x14, x5, lsl #2
     fac:	ldrb	w0, [x5, #1]
     fb0:	cmp	w0, w25
     fb4:	b.ls	f64 <inflate+0xae4>  // b.plast
     fb8:	cbz	w24, 544 <inflate+0xc4>
     fbc:	ldrb	w0, [x22], #1
     fc0:	sub	w24, w24, #0x1
     fc4:	lsl	x0, x0, x25
     fc8:	add	w25, w25, #0x8
     fcc:	add	x26, x26, x0
     fd0:	b	fa4 <inflate+0xb24>
     fd4:	cmp	w1, #0x10
     fd8:	b.ne	109c <inflate+0xc1c>  // b.any
     fdc:	add	w5, w0, #0x2
     fe0:	cmp	w5, w25
     fe4:	b.hi	1034 <inflate+0xbb4>  // b.pmore
     fe8:	sub	w25, w25, w0
     fec:	lsr	x26, x26, x0
     ff0:	cbnz	w3, 1050 <inflate+0xbd0>
     ff4:	adrp	x0, 0 <syncsearch>
     ff8:	add	x0, x0, #0x0
     ffc:	str	x0, [x27, #48]
    1000:	mov	w0, #0x3f51                	// #16209
    1004:	str	w0, [x19, #8]
    1008:	ldr	w0, [x19, #8]
    100c:	mov	w28, #0x3f51                	// #16209
    1010:	cmp	w0, w28
    1014:	b.eq	514 <inflate+0x94>  // b.none
    1018:	ldrh	w0, [x19, #664]
    101c:	cbnz	w0, 112c <inflate+0xcac>
    1020:	adrp	x0, 0 <syncsearch>
    1024:	add	x0, x0, #0x0
    1028:	str	x0, [x27, #48]
    102c:	str	w28, [x19, #8]
    1030:	b	514 <inflate+0x94>
    1034:	cbz	w24, 544 <inflate+0xc4>
    1038:	ldrb	w1, [x22], #1
    103c:	sub	w24, w24, #0x1
    1040:	lsl	x1, x1, x25
    1044:	add	w25, w25, #0x8
    1048:	add	x26, x26, x1
    104c:	b	fe0 <inflate+0xb60>
    1050:	sub	w0, w3, #0x1
    1054:	and	w1, w26, #0x3
    1058:	add	w1, w1, #0x3
    105c:	lsr	x26, x26, #2
    1060:	add	x0, x19, x0, lsl #1
    1064:	sub	w25, w25, #0x2
    1068:	ldrh	w5, [x0, #152]
    106c:	add	w3, w3, w1
    1070:	cmp	w3, w4
    1074:	b.hi	ff4 <inflate+0xb74>  // b.pmore
    1078:	sub	w1, w1, #0x1
    107c:	ldr	w0, [x19, #140]
    1080:	cmn	w1, #0x1
    1084:	b.eq	f88 <inflate+0xb08>  // b.none
    1088:	add	w3, w0, #0x1
    108c:	add	x0, x19, w0, uxtw #1
    1090:	str	w3, [x19, #140]
    1094:	strh	w5, [x0, #152]
    1098:	b	1078 <inflate+0xbf8>
    109c:	cmp	w1, #0x11
    10a0:	b.ne	10d0 <inflate+0xc50>  // b.any
    10a4:	add	w5, w0, #0x3
    10a8:	cmp	w5, w25
    10ac:	b.hi	10f4 <inflate+0xc74>  // b.pmore
    10b0:	lsr	x6, x26, x0
    10b4:	and	w1, w6, #0x7
    10b8:	add	w1, w1, #0x3
    10bc:	lsr	x26, x6, #3
    10c0:	sub	w0, w13, w0
    10c4:	add	w25, w25, w0
    10c8:	mov	w5, #0x0                   	// #0
    10cc:	b	106c <inflate+0xbec>
    10d0:	add	w5, w0, #0x7
    10d4:	cmp	w5, w25
    10d8:	b.hi	1110 <inflate+0xc90>  // b.pmore
    10dc:	lsr	x6, x26, x0
    10e0:	and	w1, w6, #0x7f
    10e4:	add	w1, w1, #0xb
    10e8:	lsr	x26, x6, #7
    10ec:	sub	w0, w12, w0
    10f0:	b	10c4 <inflate+0xc44>
    10f4:	cbz	w24, 544 <inflate+0xc4>
    10f8:	ldrb	w1, [x22], #1
    10fc:	sub	w24, w24, #0x1
    1100:	lsl	x1, x1, x25
    1104:	add	w25, w25, #0x8
    1108:	add	x26, x26, x1
    110c:	b	10a8 <inflate+0xc28>
    1110:	cbz	w24, 544 <inflate+0xc4>
    1114:	ldrb	w1, [x22], #1
    1118:	sub	w24, w24, #0x1
    111c:	lsl	x1, x1, x25
    1120:	add	w25, w25, #0x8
    1124:	add	x26, x26, x1
    1128:	b	10d4 <inflate+0xc54>
    112c:	add	x0, x19, #0x558
    1130:	str	x0, [x19, #104]
    1134:	str	x0, [x19, #144]
    1138:	mov	w0, #0x9                   	// #9
    113c:	str	w0, [x19, #120]
    1140:	add	x1, x19, #0x98
    1144:	add	x3, x19, #0x90
    1148:	add	x5, x19, #0x318
    114c:	add	x4, x19, #0x78
    1150:	mov	w0, #0x1                   	// #1
    1154:	stp	x1, x3, [sp, #136]
    1158:	str	x5, [sp, #152]
    115c:	bl	0 <inflate_table>
    1160:	mov	w21, w0
    1164:	ldp	x1, x3, [sp, #136]
    1168:	ldr	x5, [sp, #152]
    116c:	cbz	w0, 117c <inflate+0xcfc>
    1170:	adrp	x0, 0 <syncsearch>
    1174:	add	x0, x0, #0x0
    1178:	b	1028 <inflate+0xba8>
    117c:	mov	x4, x19
    1180:	ldr	w2, [x19, #136]
    1184:	ldr	x0, [x19, #144]
    1188:	str	x0, [x19, #112]
    118c:	mov	w0, #0x6                   	// #6
    1190:	str	w0, [x4, #124]!
    1194:	ldr	w0, [x19, #132]
    1198:	add	x1, x1, x0, lsl #1
    119c:	mov	w0, #0x2                   	// #2
    11a0:	bl	0 <inflate_table>
    11a4:	mov	w21, w0
    11a8:	cbz	w0, 11b8 <inflate+0xd38>
    11ac:	adrp	x0, 0 <syncsearch>
    11b0:	add	x0, x0, #0x0
    11b4:	b	1028 <inflate+0xba8>
    11b8:	mov	w0, #0x3f47                	// #16199
    11bc:	str	w0, [x19, #8]
    11c0:	ldr	w0, [sp, #112]
    11c4:	cmp	w0, #0x6
    11c8:	b.eq	544 <inflate+0xc4>  // b.none
    11cc:	mov	w0, #0x3f48                	// #16200
    11d0:	str	w0, [x19, #8]
    11d4:	cmp	w20, #0x101
    11d8:	ccmp	w24, #0x5, #0x0, hi  // hi = pmore
    11dc:	b.ls	1238 <inflate+0xdb8>  // b.plast
    11e0:	ldr	w1, [sp, #108]
    11e4:	mov	x0, x27
    11e8:	str	x22, [x27]
    11ec:	str	w24, [x27, #8]
    11f0:	str	x23, [x27, #24]
    11f4:	str	w20, [x27, #32]
    11f8:	str	x26, [x19, #80]
    11fc:	str	w25, [x19, #88]
    1200:	bl	0 <inflate_fast>
    1204:	ldr	w25, [x19, #88]
    1208:	ldr	w1, [x19, #8]
    120c:	mov	w0, #0x3f3f                	// #16191
    1210:	ldr	w24, [x27, #8]
    1214:	ldr	w20, [x27, #32]
    1218:	cmp	w1, w0
    121c:	ldr	x22, [x27]
    1220:	ldr	x23, [x27, #24]
    1224:	ldr	x26, [x19, #80]
    1228:	b.ne	514 <inflate+0x94>  // b.any
    122c:	mov	w0, #0xffffffff            	// #-1
    1230:	str	w0, [x19, #7148]
    1234:	b	514 <inflate+0x94>
    1238:	ldr	w1, [x19, #120]
    123c:	mov	w0, #0xffffffff            	// #-1
    1240:	ldr	x4, [x19, #104]
    1244:	str	wzr, [x19, #7148]
    1248:	lsl	w0, w0, w1
    124c:	mvn	w0, w0
    1250:	and	w1, w0, w26
    1254:	add	x1, x4, x1, lsl #2
    1258:	ldrb	w2, [x1, #1]
    125c:	mov	w3, w2
    1260:	cmp	w2, w25
    1264:	b.ls	1284 <inflate+0xe04>  // b.plast
    1268:	cbz	w24, 544 <inflate+0xc4>
    126c:	ldrb	w1, [x22], #1
    1270:	sub	w24, w24, #0x1
    1274:	lsl	x1, x1, x25
    1278:	add	w25, w25, #0x8
    127c:	add	x26, x26, x1
    1280:	b	1250 <inflate+0xdd0>
    1284:	ldrb	w0, [x1]
    1288:	ldrh	w5, [x1, #2]
    128c:	cbz	w0, 12f8 <inflate+0xe78>
    1290:	tst	w0, #0xf0
    1294:	b.ne	12f8 <inflate+0xe78>  // b.any
    1298:	add	w0, w0, w2
    129c:	mov	w1, #0xffffffff            	// #-1
    12a0:	lsl	w0, w1, w0
    12a4:	mvn	w0, w0
    12a8:	and	w1, w0, w26
    12ac:	lsr	w1, w1, w2
    12b0:	add	w1, w1, w5
    12b4:	add	x1, x4, x1, lsl #2
    12b8:	ldrb	w3, [x1, #1]
    12bc:	add	w11, w3, w2
    12c0:	cmp	w11, w25
    12c4:	b.ls	12e4 <inflate+0xe64>  // b.plast
    12c8:	cbz	w24, 544 <inflate+0xc4>
    12cc:	ldrb	w1, [x22], #1
    12d0:	sub	w24, w24, #0x1
    12d4:	lsl	x1, x1, x25
    12d8:	add	w25, w25, #0x8
    12dc:	add	x26, x26, x1
    12e0:	b	12a8 <inflate+0xe28>
    12e4:	sub	w25, w25, w2
    12e8:	ldrb	w0, [x1]
    12ec:	ldrh	w5, [x1, #2]
    12f0:	lsr	x26, x26, x2
    12f4:	str	w2, [x19, #7148]
    12f8:	ldr	w1, [x19, #7148]
    12fc:	sub	w25, w25, w3
    1300:	lsr	x26, x26, x3
    1304:	str	w5, [x19, #92]
    1308:	add	w3, w1, w3
    130c:	str	w3, [x19, #7148]
    1310:	cbnz	w0, 131c <inflate+0xe9c>
    1314:	mov	w0, #0x3f4d                	// #16205
    1318:	b	5cc <inflate+0x14c>
    131c:	tbz	w0, #5, 132c <inflate+0xeac>
    1320:	mov	w0, #0xffffffff            	// #-1
    1324:	str	w0, [x19, #7148]
    1328:	b	b94 <inflate+0x714>
    132c:	tbz	w0, #6, 133c <inflate+0xebc>
    1330:	adrp	x0, 0 <syncsearch>
    1334:	add	x0, x0, #0x0
    1338:	b	68c <inflate+0x20c>
    133c:	and	w0, w0, #0xf
    1340:	str	w0, [x19, #100]
    1344:	mov	w0, #0x3f49                	// #16201
    1348:	str	w0, [x19, #8]
    134c:	ldr	w0, [x19, #100]
    1350:	cbnz	w0, 13c4 <inflate+0xf44>
    1354:	ldr	w0, [x19, #92]
    1358:	str	w0, [x19, #7152]
    135c:	mov	w0, #0x3f4a                	// #16202
    1360:	str	w0, [x19, #8]
    1364:	ldr	w1, [x19, #124]
    1368:	mov	w0, #0xffffffff            	// #-1
    136c:	ldr	x4, [x19, #112]
    1370:	lsl	w0, w0, w1
    1374:	mvn	w0, w0
    1378:	and	w1, w0, w26
    137c:	add	x1, x4, x1, lsl #2
    1380:	ldrb	w2, [x1, #1]
    1384:	mov	w3, w2
    1388:	cmp	w2, w25
    138c:	b.ls	13fc <inflate+0xf7c>  // b.plast
    1390:	cbz	w24, 544 <inflate+0xc4>
    1394:	ldrb	w1, [x22], #1
    1398:	sub	w24, w24, #0x1
    139c:	lsl	x1, x1, x25
    13a0:	add	w25, w25, #0x8
    13a4:	add	x26, x26, x1
    13a8:	b	1378 <inflate+0xef8>
    13ac:	cbz	w24, 544 <inflate+0xc4>
    13b0:	ldrb	w1, [x22], #1
    13b4:	sub	w24, w24, #0x1
    13b8:	lsl	x1, x1, x25
    13bc:	add	w25, w25, #0x8
    13c0:	add	x26, x26, x1
    13c4:	cmp	w0, w25
    13c8:	b.hi	13ac <inflate+0xf2c>  // b.pmore
    13cc:	ldr	w2, [x19, #92]
    13d0:	mov	w1, #0xffffffff            	// #-1
    13d4:	lsl	w1, w1, w0
    13d8:	bic	w1, w26, w1
    13dc:	add	w1, w2, w1
    13e0:	str	w1, [x19, #92]
    13e4:	ldr	w1, [x19, #7148]
    13e8:	sub	w25, w25, w0
    13ec:	lsr	x26, x26, x0
    13f0:	add	w0, w1, w0
    13f4:	str	w0, [x19, #7148]
    13f8:	b	1354 <inflate+0xed4>
    13fc:	ldrb	w0, [x1]
    1400:	ldrh	w5, [x1, #2]
    1404:	tst	w0, #0xf0
    1408:	b.ne	1474 <inflate+0xff4>  // b.any
    140c:	add	w0, w0, w2
    1410:	mov	w1, #0xffffffff            	// #-1
    1414:	lsl	w0, w1, w0
    1418:	mvn	w0, w0
    141c:	and	w1, w0, w26
    1420:	lsr	w1, w1, w2
    1424:	add	w1, w1, w5
    1428:	add	x1, x4, x1, lsl #2
    142c:	ldrb	w3, [x1, #1]
    1430:	add	w11, w3, w2
    1434:	cmp	w11, w25
    1438:	b.ls	1458 <inflate+0xfd8>  // b.plast
    143c:	cbz	w24, 544 <inflate+0xc4>
    1440:	ldrb	w1, [x22], #1
    1444:	sub	w24, w24, #0x1
    1448:	lsl	x1, x1, x25
    144c:	add	w25, w25, #0x8
    1450:	add	x26, x26, x1
    1454:	b	141c <inflate+0xf9c>
    1458:	ldrb	w0, [x1]
    145c:	sub	w25, w25, w2
    1460:	ldrh	w5, [x1, #2]
    1464:	lsr	x26, x26, x2
    1468:	ldr	w1, [x19, #7148]
    146c:	add	w2, w1, w2
    1470:	str	w2, [x19, #7148]
    1474:	ldr	w1, [x19, #7148]
    1478:	sub	w25, w25, w3
    147c:	lsr	x26, x26, x3
    1480:	add	w3, w1, w3
    1484:	str	w3, [x19, #7148]
    1488:	tbz	w0, #6, 1498 <inflate+0x1018>
    148c:	adrp	x0, 0 <syncsearch>
    1490:	add	x0, x0, #0x0
    1494:	b	68c <inflate+0x20c>
    1498:	and	w0, w0, #0xf
    149c:	stp	w5, w0, [x19, #96]
    14a0:	mov	w0, #0x3f4b                	// #16203
    14a4:	str	w0, [x19, #8]
    14a8:	ldr	w0, [x19, #100]
    14ac:	cbz	w0, 14e4 <inflate+0x1064>
    14b0:	cmp	w0, w25
    14b4:	b.hi	1530 <inflate+0x10b0>  // b.pmore
    14b8:	ldr	w2, [x19, #96]
    14bc:	mov	w1, #0xffffffff            	// #-1
    14c0:	lsl	w1, w1, w0
    14c4:	bic	w1, w26, w1
    14c8:	add	w1, w2, w1
    14cc:	str	w1, [x19, #96]
    14d0:	ldr	w1, [x19, #7148]
    14d4:	sub	w25, w25, w0
    14d8:	lsr	x26, x26, x0
    14dc:	add	w0, w1, w0
    14e0:	str	w0, [x19, #7148]
    14e4:	mov	w0, #0x3f4c                	// #16204
    14e8:	str	w0, [x19, #8]
    14ec:	cbz	w20, 544 <inflate+0xc4>
    14f0:	ldr	w0, [sp, #108]
    14f4:	ldr	w1, [x19, #96]
    14f8:	sub	w0, w0, w20
    14fc:	cmp	w1, w0
    1500:	b.ls	15d8 <inflate+0x1158>  // b.plast
    1504:	ldr	w0, [sp, #108]
    1508:	add	w1, w1, w20
    150c:	sub	w4, w1, w0
    1510:	ldr	w0, [x19, #64]
    1514:	cmp	w0, w4
    1518:	b.cs	154c <inflate+0x10cc>  // b.hs, b.nlast
    151c:	ldr	w0, [x19, #7144]
    1520:	cbz	w0, 154c <inflate+0x10cc>
    1524:	adrp	x0, 0 <syncsearch>
    1528:	add	x0, x0, #0x0
    152c:	b	68c <inflate+0x20c>
    1530:	cbz	w24, 544 <inflate+0xc4>
    1534:	ldrb	w1, [x22], #1
    1538:	sub	w24, w24, #0x1
    153c:	lsl	x1, x1, x25
    1540:	add	w25, w25, #0x8
    1544:	add	x26, x26, x1
    1548:	b	14b0 <inflate+0x1030>
    154c:	ldr	w3, [x19, #68]
    1550:	ldr	w0, [sp, #108]
    1554:	cmp	w3, w4
    1558:	sub	w0, w0, w1
    155c:	ldr	x2, [x19, #72]
    1560:	b.cs	15d0 <inflate+0x1150>  // b.hs, b.nlast
    1564:	ldr	w1, [x19, #60]
    1568:	sub	w4, w4, w3
    156c:	add	w1, w3, w1
    1570:	add	w1, w1, w0
    1574:	ldr	w0, [x19, #92]
    1578:	add	x1, x2, x1
    157c:	cmp	w0, w4
    1580:	csel	w0, w0, w4, ls  // ls = plast
    1584:	ldr	w2, [x19, #92]
    1588:	cmp	w20, w0
    158c:	csel	w0, w20, w0, ls  // ls = plast
    1590:	sub	w2, w2, w0
    1594:	sub	w20, w20, w0
    1598:	str	w2, [x19, #92]
    159c:	mov	x2, #0x0                   	// #0
    15a0:	ldrb	w3, [x1, x2]
    15a4:	strb	w3, [x23, x2]
    15a8:	add	x2, x2, #0x1
    15ac:	cmp	w0, w2
    15b0:	b.ne	15a0 <inflate+0x1120>  // b.any
    15b4:	sub	w0, w0, #0x1
    15b8:	add	x0, x0, #0x1
    15bc:	add	x23, x23, x0
    15c0:	ldr	w0, [x19, #92]
    15c4:	cbnz	w0, 514 <inflate+0x94>
    15c8:	mov	w0, #0x3f48                	// #16200
    15cc:	b	5cc <inflate+0x14c>
    15d0:	add	w1, w3, w0
    15d4:	b	1574 <inflate+0x10f4>
    15d8:	ldr	w0, [x19, #92]
    15dc:	sub	x1, x23, w1, uxtw
    15e0:	b	1584 <inflate+0x1104>
    15e4:	cbz	w20, 544 <inflate+0xc4>
    15e8:	ldr	w0, [x19, #92]
    15ec:	sub	w20, w20, #0x1
    15f0:	strb	w0, [x23], #1
    15f4:	b	15c8 <inflate+0x1148>
    15f8:	ldr	w1, [x19, #16]
    15fc:	cbnz	w1, 1640 <inflate+0x11c0>
    1600:	mov	w0, #0x3f4f                	// #16207
    1604:	str	w0, [x19, #8]
    1608:	ldr	w0, [x19, #16]
    160c:	cbz	w0, 1618 <inflate+0x1198>
    1610:	ldr	w0, [x19, #24]
    1614:	cbnz	w0, 1724 <inflate+0x12a4>
    1618:	mov	w0, #0x3f50                	// #16208
    161c:	str	w0, [x19, #8]
    1620:	mov	w21, #0x1                   	// #1
    1624:	b	544 <inflate+0xc4>
    1628:	cbz	w24, 544 <inflate+0xc4>
    162c:	ldrb	w0, [x22], #1
    1630:	sub	w24, w24, #0x1
    1634:	lsl	x0, x0, x25
    1638:	add	w25, w25, #0x8
    163c:	add	x26, x26, x0
    1640:	cmp	w25, #0x1f
    1644:	b.ls	1628 <inflate+0x11a8>  // b.plast
    1648:	ldr	w0, [sp, #108]
    164c:	sub	w3, w0, w20
    1650:	sub	w2, w0, w20
    1654:	ldr	x0, [x27, #40]
    1658:	add	x0, x0, x3
    165c:	str	x0, [x27, #40]
    1660:	ldr	x0, [x19, #40]
    1664:	add	x0, x0, x3
    1668:	str	x0, [x19, #40]
    166c:	tbz	w1, #2, 16b0 <inflate+0x1230>
    1670:	cbnz	w2, 16c0 <inflate+0x1240>
    1674:	lsr	x1, x26, #8
    1678:	lsr	w0, w26, #24
    167c:	and	x1, x1, #0xff00
    1680:	lsl	w3, w26, #24
    1684:	orr	x0, x0, x1
    1688:	lsl	x1, x26, #8
    168c:	and	x1, x1, #0xff0000
    1690:	ldr	w2, [x19, #24]
    1694:	add	x1, x1, x3
    1698:	add	x0, x0, x1
    169c:	cmp	w2, #0x0
    16a0:	ldr	x1, [x19, #32]
    16a4:	csel	x0, x0, x26, eq  // eq = none
    16a8:	cmp	x1, x0
    16ac:	b.ne	16f0 <inflate+0x1270>  // b.any
    16b0:	mov	w25, #0x0                   	// #0
    16b4:	mov	x26, #0x0                   	// #0
    16b8:	str	w20, [sp, #108]
    16bc:	b	1600 <inflate+0x1180>
    16c0:	sub	x1, x23, x3
    16c4:	ldr	w3, [x19, #24]
    16c8:	ldr	x0, [x19, #32]
    16cc:	cbz	w3, 16e8 <inflate+0x1268>
    16d0:	bl	0 <crc32>
    16d4:	str	x0, [x19, #32]
    16d8:	str	x0, [x27, #96]
    16dc:	ldr	w0, [x19, #16]
    16e0:	tbnz	w0, #2, 1674 <inflate+0x11f4>
    16e4:	b	16b0 <inflate+0x1230>
    16e8:	bl	0 <adler32>
    16ec:	b	16d4 <inflate+0x1254>
    16f0:	adrp	x0, 0 <syncsearch>
    16f4:	add	x0, x0, #0x0
    16f8:	str	x0, [x27, #48]
    16fc:	mov	w0, #0x3f51                	// #16209
    1700:	str	w0, [x19, #8]
    1704:	str	w20, [sp, #108]
    1708:	b	514 <inflate+0x94>
    170c:	cbz	w24, 544 <inflate+0xc4>
    1710:	ldrb	w0, [x22], #1
    1714:	sub	w24, w24, #0x1
    1718:	lsl	x0, x0, x25
    171c:	add	w25, w25, #0x8
    1720:	add	x26, x26, x0
    1724:	cmp	w25, #0x1f
    1728:	b.ls	170c <inflate+0x128c>  // b.plast
    172c:	ldr	w0, [x19, #40]
    1730:	cmp	x0, x26
    1734:	b.eq	1744 <inflate+0x12c4>  // b.none
    1738:	adrp	x0, 0 <syncsearch>
    173c:	add	x0, x0, #0x0
    1740:	b	68c <inflate+0x20c>
    1744:	mov	w25, #0x0                   	// #0
    1748:	mov	x26, #0x0                   	// #0
    174c:	b	1618 <inflate+0x1198>
    1750:	ldr	w0, [x27, #8]
    1754:	ldr	w1, [sp, #116]
    1758:	ldr	w2, [sp, #108]
    175c:	sub	w20, w1, w0
    1760:	ldr	w1, [x27, #32]
    1764:	sub	w23, w2, w1
    1768:	ldr	w2, [sp, #116]
    176c:	sub	w25, w2, w0
    1770:	ldr	x0, [x27, #16]
    1774:	add	x25, x0, x25
    1778:	ldr	w0, [sp, #108]
    177c:	str	x25, [x27, #16]
    1780:	sub	w22, w0, w1
    1784:	ldr	x0, [x27, #40]
    1788:	add	x0, x0, x22
    178c:	str	x0, [x27, #40]
    1790:	ldr	x0, [x19, #40]
    1794:	add	x0, x0, x22
    1798:	str	x0, [x19, #40]
    179c:	ldr	w0, [x19, #16]
    17a0:	tbz	w0, #2, 17cc <inflate+0x134c>
    17a4:	cbz	w23, 17cc <inflate+0x134c>
    17a8:	ldr	w2, [x19, #24]
    17ac:	ldr	x1, [x27, #24]
    17b0:	ldr	x0, [x19, #32]
    17b4:	sub	x1, x1, x22
    17b8:	cbz	w2, 183c <inflate+0x13bc>
    17bc:	mov	w2, w23
    17c0:	bl	0 <crc32>
    17c4:	str	x0, [x19, #32]
    17c8:	str	x0, [x27, #96]
    17cc:	ldr	w0, [x19, #12]
    17d0:	mov	w1, #0x40                  	// #64
    17d4:	ldr	w2, [x19, #88]
    17d8:	orr	w20, w20, w23
    17dc:	cmp	w0, #0x0
    17e0:	csel	w0, w0, w1, eq  // eq = none
    17e4:	ldr	w1, [x19, #8]
    17e8:	add	w2, w2, w0
    17ec:	mov	w0, #0x3f3f                	// #16191
    17f0:	cmp	w1, w0
    17f4:	cset	w0, eq  // eq = none
    17f8:	add	w0, w2, w0, lsl #7
    17fc:	mov	w2, #0x3f47                	// #16199
    1800:	cmp	w1, w2
    1804:	mov	w2, #0x3f42                	// #16194
    1808:	ccmp	w1, w2, #0x4, ne  // ne = any
    180c:	mov	w1, #0x100                 	// #256
    1810:	csel	w1, wzr, w1, ne  // ne = any
    1814:	add	w0, w0, w1
    1818:	str	w0, [x27, #88]
    181c:	cbz	w20, 182c <inflate+0x13ac>
    1820:	ldr	w0, [sp, #112]
    1824:	cmp	w0, #0x4
    1828:	b.ne	c1c <inflate+0x79c>  // b.any
    182c:	cmp	w21, #0x0
    1830:	mov	w0, #0xfffffffb            	// #-5
    1834:	csel	w21, w21, w0, ne  // ne = any
    1838:	b	c1c <inflate+0x79c>
    183c:	mov	w2, w23
    1840:	bl	0 <adler32>
    1844:	b	17c4 <inflate+0x1344>
    1848:	mov	w21, #0xfffffffe            	// #-2
    184c:	b	c1c <inflate+0x79c>

0000000000001850 <inflateEnd>:
    1850:	stp	x29, x30, [sp, #-32]!
    1854:	mov	x29, sp
    1858:	stp	x19, x20, [sp, #16]
    185c:	mov	x19, x0
    1860:	bl	170 <inflateStateCheck>
    1864:	cbnz	w0, 18a0 <inflateEnd+0x50>
    1868:	mov	w20, w0
    186c:	ldr	x0, [x19, #56]
    1870:	ldr	x1, [x0, #72]
    1874:	cbz	x1, 1880 <inflateEnd+0x30>
    1878:	ldp	x2, x0, [x19, #72]
    187c:	blr	x2
    1880:	ldp	x2, x0, [x19, #72]
    1884:	ldr	x1, [x19, #56]
    1888:	blr	x2
    188c:	str	xzr, [x19, #56]
    1890:	mov	w0, w20
    1894:	ldp	x19, x20, [sp, #16]
    1898:	ldp	x29, x30, [sp], #32
    189c:	ret
    18a0:	mov	w20, #0xfffffffe            	// #-2
    18a4:	b	1890 <inflateEnd+0x40>

00000000000018a8 <inflateGetDictionary>:
    18a8:	stp	x29, x30, [sp, #-48]!
    18ac:	mov	x3, x0
    18b0:	mov	x29, sp
    18b4:	stp	x19, x20, [sp, #16]
    18b8:	stp	x21, x22, [sp, #32]
    18bc:	mov	x21, x1
    18c0:	mov	x22, x2
    18c4:	bl	170 <inflateStateCheck>
    18c8:	cbnz	w0, 192c <inflateGetDictionary+0x84>
    18cc:	ldr	x19, [x3, #56]
    18d0:	mov	w20, w0
    18d4:	ldr	w2, [x19, #64]
    18d8:	cbz	w2, 190c <inflateGetDictionary+0x64>
    18dc:	cbz	x21, 190c <inflateGetDictionary+0x64>
    18e0:	ldr	x1, [x19, #72]
    18e4:	ldr	w0, [x19, #68]
    18e8:	sub	w2, w2, w0
    18ec:	add	x1, x1, w0, uxtw
    18f0:	mov	x0, x21
    18f4:	bl	0 <memcpy>
    18f8:	ldp	w0, w2, [x19, #64]
    18fc:	ldr	x1, [x19, #72]
    1900:	sub	x0, x0, x2
    1904:	add	x0, x21, x0
    1908:	bl	0 <memcpy>
    190c:	cbz	x22, 1918 <inflateGetDictionary+0x70>
    1910:	ldr	w0, [x19, #64]
    1914:	str	w0, [x22]
    1918:	mov	w0, w20
    191c:	ldp	x19, x20, [sp, #16]
    1920:	ldp	x21, x22, [sp, #32]
    1924:	ldp	x29, x30, [sp], #48
    1928:	ret
    192c:	mov	w20, #0xfffffffe            	// #-2
    1930:	b	1918 <inflateGetDictionary+0x70>

0000000000001934 <inflateSetDictionary>:
    1934:	stp	x29, x30, [sp, #-48]!
    1938:	mov	x29, sp
    193c:	stp	x19, x20, [sp, #16]
    1940:	mov	x20, x1
    1944:	stp	x21, x22, [sp, #32]
    1948:	mov	x22, x0
    194c:	mov	w21, w2
    1950:	bl	170 <inflateStateCheck>
    1954:	cbnz	w0, 1974 <inflateSetDictionary+0x40>
    1958:	ldr	x19, [x22, #56]
    195c:	mov	w0, #0x3f3e                	// #16190
    1960:	ldr	w2, [x19, #16]
    1964:	ldr	w1, [x19, #8]
    1968:	cmp	w1, w0
    196c:	cbz	w2, 197c <inflateSetDictionary+0x48>
    1970:	b.eq	19b0 <inflateSetDictionary+0x7c>  // b.none
    1974:	mov	w0, #0xfffffffe            	// #-2
    1978:	b	19a0 <inflateSetDictionary+0x6c>
    197c:	b.eq	19b0 <inflateSetDictionary+0x7c>  // b.none
    1980:	mov	w2, w21
    1984:	add	x1, x20, w21, uxtw
    1988:	mov	x0, x22
    198c:	bl	58 <updatewindow>
    1990:	cbz	w0, 19e0 <inflateSetDictionary+0xac>
    1994:	mov	w0, #0x3f52                	// #16210
    1998:	str	w0, [x19, #8]
    199c:	mov	w0, #0xfffffffc            	// #-4
    19a0:	ldp	x19, x20, [sp, #16]
    19a4:	ldp	x21, x22, [sp, #32]
    19a8:	ldp	x29, x30, [sp], #48
    19ac:	ret
    19b0:	mov	w2, #0x0                   	// #0
    19b4:	mov	x1, #0x0                   	// #0
    19b8:	mov	x0, #0x0                   	// #0
    19bc:	bl	0 <adler32>
    19c0:	mov	x1, x20
    19c4:	mov	w2, w21
    19c8:	bl	0 <adler32>
    19cc:	ldr	x1, [x19, #32]
    19d0:	cmp	x1, x0
    19d4:	b.eq	1980 <inflateSetDictionary+0x4c>  // b.none
    19d8:	mov	w0, #0xfffffffd            	// #-3
    19dc:	b	19a0 <inflateSetDictionary+0x6c>
    19e0:	mov	w1, #0x1                   	// #1
    19e4:	str	w1, [x19, #20]
    19e8:	b	19a0 <inflateSetDictionary+0x6c>

00000000000019ec <inflateGetHeader>:
    19ec:	mov	x4, x0
    19f0:	mov	x3, x1
    19f4:	stp	x29, x30, [sp, #-16]!
    19f8:	mov	x29, sp
    19fc:	bl	170 <inflateStateCheck>
    1a00:	cbnz	w0, 1a20 <inflateGetHeader+0x34>
    1a04:	ldr	x1, [x4, #56]
    1a08:	ldr	w2, [x1, #16]
    1a0c:	tbz	w2, #1, 1a20 <inflateGetHeader+0x34>
    1a10:	str	x3, [x1, #48]
    1a14:	str	wzr, [x3, #72]
    1a18:	ldp	x29, x30, [sp], #16
    1a1c:	ret
    1a20:	mov	w0, #0xfffffffe            	// #-2
    1a24:	b	1a18 <inflateGetHeader+0x2c>

0000000000001a28 <inflateSync>:
    1a28:	mov	x9, x0
    1a2c:	stp	x29, x30, [sp, #-32]!
    1a30:	mov	x29, sp
    1a34:	bl	170 <inflateStateCheck>
    1a38:	cbnz	w0, 1b30 <inflateSync+0x108>
    1a3c:	mov	w11, w0
    1a40:	ldr	w0, [x9, #8]
    1a44:	ldr	x10, [x9, #56]
    1a48:	cbnz	w0, 1a58 <inflateSync+0x30>
    1a4c:	ldr	w0, [x10, #88]
    1a50:	cmp	w0, #0x7
    1a54:	b.ls	1b38 <inflateSync+0x110>  // b.plast
    1a58:	ldr	w1, [x10, #8]
    1a5c:	mov	w0, #0x3f53                	// #16211
    1a60:	cmp	w1, w0
    1a64:	b.eq	1aa8 <inflateSync+0x80>  // b.none
    1a68:	str	w0, [x10, #8]
    1a6c:	ldr	w0, [x10, #88]
    1a70:	ldr	x1, [x10, #80]
    1a74:	and	w2, w0, #0x7
    1a78:	and	w0, w0, #0xfffffff8
    1a7c:	str	w0, [x10, #88]
    1a80:	lsl	x1, x1, x2
    1a84:	str	x1, [x10, #80]
    1a88:	add	x1, sp, #0x18
    1a8c:	mov	x2, #0x0                   	// #0
    1a90:	ldr	w0, [x10, #88]
    1a94:	cmp	w0, #0x7
    1a98:	b.hi	1b10 <inflateSync+0xe8>  // b.pmore
    1a9c:	mov	x0, x10
    1aa0:	str	wzr, [x0, #140]!
    1aa4:	bl	0 <syncsearch>
    1aa8:	ldr	w2, [x9, #8]
    1aac:	add	x0, x10, #0x8c
    1ab0:	ldr	x1, [x9]
    1ab4:	bl	0 <syncsearch>
    1ab8:	ldr	w1, [x9, #8]
    1abc:	ldr	x4, [x9, #16]
    1ac0:	sub	w1, w1, w0
    1ac4:	str	w1, [x9, #8]
    1ac8:	ldr	x1, [x9]
    1acc:	add	x4, x4, w0, uxtw
    1ad0:	str	x4, [x9, #16]
    1ad4:	add	x1, x1, w0, uxtw
    1ad8:	ldr	w0, [x10, #140]
    1adc:	str	x1, [x9]
    1ae0:	cmp	w0, #0x4
    1ae4:	b.ne	1b40 <inflateSync+0x118>  // b.any
    1ae8:	ldr	x5, [x9, #40]
    1aec:	mov	x0, x9
    1af0:	bl	230 <inflateReset>
    1af4:	str	x4, [x9, #16]
    1af8:	str	x5, [x9, #40]
    1afc:	mov	w0, #0x3f3f                	// #16191
    1b00:	str	w0, [x10, #8]
    1b04:	mov	w0, w11
    1b08:	ldp	x29, x30, [sp], #32
    1b0c:	ret
    1b10:	ldr	x3, [x10, #80]
    1b14:	sub	w0, w0, #0x8
    1b18:	strb	w3, [x1, x2]
    1b1c:	add	x2, x2, #0x1
    1b20:	str	w0, [x10, #88]
    1b24:	lsr	x3, x3, #8
    1b28:	str	x3, [x10, #80]
    1b2c:	b	1a90 <inflateSync+0x68>
    1b30:	mov	w11, #0xfffffffe            	// #-2
    1b34:	b	1b04 <inflateSync+0xdc>
    1b38:	mov	w11, #0xfffffffb            	// #-5
    1b3c:	b	1b04 <inflateSync+0xdc>
    1b40:	mov	w11, #0xfffffffd            	// #-3
    1b44:	b	1b04 <inflateSync+0xdc>

0000000000001b48 <inflateSyncPoint>:
    1b48:	mov	x3, x0
    1b4c:	stp	x29, x30, [sp, #-16]!
    1b50:	mov	x29, sp
    1b54:	bl	170 <inflateStateCheck>
    1b58:	cbnz	w0, 1b84 <inflateSyncPoint+0x3c>
    1b5c:	ldr	x1, [x3, #56]
    1b60:	mov	w2, #0x3f41                	// #16193
    1b64:	ldr	w3, [x1, #8]
    1b68:	cmp	w3, w2
    1b6c:	b.ne	1b7c <inflateSyncPoint+0x34>  // b.any
    1b70:	ldr	w0, [x1, #88]
    1b74:	cmp	w0, #0x0
    1b78:	cset	w0, eq  // eq = none
    1b7c:	ldp	x29, x30, [sp], #16
    1b80:	ret
    1b84:	mov	w0, #0xfffffffe            	// #-2
    1b88:	b	1b7c <inflateSyncPoint+0x34>

0000000000001b8c <inflateCopy>:
    1b8c:	stp	x29, x30, [sp, #-64]!
    1b90:	mov	x29, sp
    1b94:	stp	x19, x20, [sp, #16]
    1b98:	mov	x20, x1
    1b9c:	stp	x21, x22, [sp, #32]
    1ba0:	stp	x23, x24, [sp, #48]
    1ba4:	mov	x24, x0
    1ba8:	mov	x0, x1
    1bac:	bl	170 <inflateStateCheck>
    1bb0:	cbnz	w0, 1cc4 <inflateCopy+0x138>
    1bb4:	cbz	x24, 1cc4 <inflateCopy+0x138>
    1bb8:	ldp	x21, x3, [x20, #56]
    1bbc:	mov	w22, w0
    1bc0:	ldr	x0, [x20, #80]
    1bc4:	mov	w2, #0x1bf8                	// #7160
    1bc8:	mov	w1, #0x1                   	// #1
    1bcc:	blr	x3
    1bd0:	mov	x19, x0
    1bd4:	cbz	x0, 1c0c <inflateCopy+0x80>
    1bd8:	ldr	x23, [x21, #72]
    1bdc:	cbz	x23, 1c14 <inflateCopy+0x88>
    1be0:	ldr	x3, [x20, #64]
    1be4:	mov	w2, #0x1                   	// #1
    1be8:	ldr	x0, [x20, #80]
    1bec:	ldr	w1, [x21, #56]
    1bf0:	lsl	w1, w2, w1
    1bf4:	blr	x3
    1bf8:	mov	x23, x0
    1bfc:	cbnz	x0, 1c14 <inflateCopy+0x88>
    1c00:	ldp	x2, x0, [x20, #72]
    1c04:	mov	x1, x19
    1c08:	blr	x2
    1c0c:	mov	w22, #0xfffffffc            	// #-4
    1c10:	b	1cac <inflateCopy+0x120>
    1c14:	mov	x1, x20
    1c18:	mov	x2, #0x70                  	// #112
    1c1c:	mov	x0, x24
    1c20:	bl	0 <memcpy>
    1c24:	mov	x1, x21
    1c28:	mov	x2, #0x1bf8                	// #7160
    1c2c:	mov	x0, x19
    1c30:	bl	0 <memcpy>
    1c34:	ldr	x1, [x21, #104]
    1c38:	str	x24, [x19]
    1c3c:	add	x2, x21, #0x558
    1c40:	add	x0, x19, #0x558
    1c44:	cmp	x1, x2
    1c48:	b.cc	1c78 <inflateCopy+0xec>  // b.lo, b.ul, b.last
    1c4c:	mov	x3, #0x1be4                	// #7140
    1c50:	add	x3, x21, x3
    1c54:	cmp	x1, x3
    1c58:	b.hi	1c78 <inflateCopy+0xec>  // b.pmore
    1c5c:	sub	x1, x1, x2
    1c60:	add	x1, x0, x1
    1c64:	str	x1, [x19, #104]
    1c68:	ldr	x1, [x21, #112]
    1c6c:	sub	x1, x1, x2
    1c70:	add	x1, x0, x1
    1c74:	str	x1, [x19, #112]
    1c78:	ldr	x1, [x21, #144]
    1c7c:	sub	x2, x1, x2
    1c80:	add	x0, x0, x2
    1c84:	str	x0, [x19, #144]
    1c88:	cbz	x23, 1ca4 <inflateCopy+0x118>
    1c8c:	ldr	x1, [x21, #72]
    1c90:	mov	w2, #0x1                   	// #1
    1c94:	ldr	w0, [x21, #56]
    1c98:	lsl	w2, w2, w0
    1c9c:	mov	x0, x23
    1ca0:	bl	0 <memcpy>
    1ca4:	str	x23, [x19, #72]
    1ca8:	str	x19, [x24, #56]
    1cac:	mov	w0, w22
    1cb0:	ldp	x19, x20, [sp, #16]
    1cb4:	ldp	x21, x22, [sp, #32]
    1cb8:	ldp	x23, x24, [sp, #48]
    1cbc:	ldp	x29, x30, [sp], #64
    1cc0:	ret
    1cc4:	mov	w22, #0xfffffffe            	// #-2
    1cc8:	b	1cac <inflateCopy+0x120>

0000000000001ccc <inflateUndermine>:
    1ccc:	mov	x3, x0
    1cd0:	stp	x29, x30, [sp, #-16]!
    1cd4:	mov	x29, sp
    1cd8:	bl	170 <inflateStateCheck>
    1cdc:	cbnz	w0, 1cf8 <inflateUndermine+0x2c>
    1ce0:	ldr	x0, [x3, #56]
    1ce4:	mov	w1, #0x1                   	// #1
    1ce8:	str	w1, [x0, #7144]
    1cec:	mov	w0, #0xfffffffd            	// #-3
    1cf0:	ldp	x29, x30, [sp], #16
    1cf4:	ret
    1cf8:	mov	w0, #0xfffffffe            	// #-2
    1cfc:	b	1cf0 <inflateUndermine+0x24>

0000000000001d00 <inflateValidate>:
    1d00:	mov	x4, x0
    1d04:	mov	w3, w1
    1d08:	stp	x29, x30, [sp, #-16]!
    1d0c:	mov	x29, sp
    1d10:	bl	170 <inflateStateCheck>
    1d14:	cbnz	w0, 1d3c <inflateValidate+0x3c>
    1d18:	ldr	x1, [x4, #56]
    1d1c:	cmp	w3, #0x0
    1d20:	ldr	w2, [x1, #16]
    1d24:	and	w4, w2, #0xfffffffb
    1d28:	orr	w2, w2, #0x4
    1d2c:	csel	w2, w2, w4, ne  // ne = any
    1d30:	str	w2, [x1, #16]
    1d34:	ldp	x29, x30, [sp], #16
    1d38:	ret
    1d3c:	mov	w0, #0xfffffffe            	// #-2
    1d40:	b	1d34 <inflateValidate+0x34>

0000000000001d44 <inflateMark>:
    1d44:	mov	x3, x0
    1d48:	stp	x29, x30, [sp, #-16]!
    1d4c:	mov	x29, sp
    1d50:	bl	170 <inflateStateCheck>
    1d54:	cbnz	w0, 1da8 <inflateMark+0x64>
    1d58:	ldr	x2, [x3, #56]
    1d5c:	mov	w3, #0x3f43                	// #16195
    1d60:	ldrsw	x0, [x2, #7148]
    1d64:	ldr	w1, [x2, #8]
    1d68:	lsl	x0, x0, #16
    1d6c:	cmp	w1, w3
    1d70:	b.ne	1d84 <inflateMark+0x40>  // b.any
    1d74:	ldr	w1, [x2, #92]
    1d78:	add	x0, x0, x1
    1d7c:	ldp	x29, x30, [sp], #16
    1d80:	ret
    1d84:	mov	w3, #0x3f4c                	// #16204
    1d88:	cmp	w1, w3
    1d8c:	b.ne	1da0 <inflateMark+0x5c>  // b.any
    1d90:	ldr	w1, [x2, #7152]
    1d94:	ldr	w2, [x2, #92]
    1d98:	sub	w1, w1, w2
    1d9c:	b	1d78 <inflateMark+0x34>
    1da0:	mov	x1, #0x0                   	// #0
    1da4:	b	1d78 <inflateMark+0x34>
    1da8:	mov	x0, #0xffffffffffff0000    	// #-65536
    1dac:	b	1d7c <inflateMark+0x38>

0000000000001db0 <inflateCodesUsed>:
    1db0:	mov	x3, x0
    1db4:	stp	x29, x30, [sp, #-16]!
    1db8:	mov	x29, sp
    1dbc:	bl	170 <inflateStateCheck>
    1dc0:	cbnz	w0, 1de0 <inflateCodesUsed+0x30>
    1dc4:	ldr	x1, [x3, #56]
    1dc8:	add	x2, x1, #0x558
    1dcc:	ldr	x0, [x1, #144]
    1dd0:	sub	x0, x0, x2
    1dd4:	asr	x0, x0, #2
    1dd8:	ldp	x29, x30, [sp], #16
    1ddc:	ret
    1de0:	mov	x0, #0xffffffffffffffff    	// #-1
    1de4:	b	1dd8 <inflateCodesUsed+0x28>

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	w6, w0
   8:	mov	x0, #0x0                   	// #0
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	stp	x21, x22, [sp, #32]
  18:	stp	x23, x24, [sp, #48]
  1c:	stp	x25, x26, [sp, #64]
  20:	stp	x27, x28, [sp, #80]
  24:	add	x7, sp, #0x70
  28:	strh	wzr, [x7, x0, lsl #1]
  2c:	add	x0, x0, #0x1
  30:	cmp	x0, #0x10
  34:	b.ne	24 <inflate_table+0x24>  // b.any
  38:	mov	x0, #0x0                   	// #0
  3c:	cmp	w2, w0
  40:	b.hi	88 <inflate_table+0x88>  // b.pmore
  44:	add	x0, sp, #0x70
  48:	mov	w9, #0xf                   	// #15
  4c:	ldrh	w7, [x0, #30]
  50:	cbnz	w7, ac <inflate_table+0xac>
  54:	sub	x0, x0, #0x2
  58:	subs	w9, w9, #0x1
  5c:	b.ne	4c <inflate_table+0x4c>  // b.any
  60:	ldr	x1, [x3]
  64:	mov	w2, #0x140                 	// #320
  68:	mov	x0, x1
  6c:	str	w2, [x0], #8
  70:	str	x0, [x3]
  74:	mov	w0, #0x1                   	// #1
  78:	str	w2, [x1, #4]
  7c:	str	w0, [x4]
  80:	mov	w0, #0x0                   	// #0
  84:	b	19c <inflate_table+0x19c>
  88:	ldrh	w7, [x1, x0, lsl #1]
  8c:	add	x8, sp, #0x70
  90:	add	x9, sp, #0x70
  94:	add	x0, x0, #0x1
  98:	lsl	x7, x7, #1
  9c:	ldrh	w8, [x8, x7]
  a0:	add	w8, w8, #0x1
  a4:	strh	w8, [x9, x7]
  a8:	b	3c <inflate_table+0x3c>
  ac:	mov	x0, #0x1                   	// #1
  b0:	mov	w7, w0
  b4:	cmp	w0, w9
  b8:	b.cs	d0 <inflate_table+0xd0>  // b.hs, b.nlast
  bc:	add	x0, x0, #0x1
  c0:	add	x8, sp, #0x70
  c4:	add	x8, x8, x0, lsl #1
  c8:	ldurh	w8, [x8, #-2]
  cc:	cbz	w8, b0 <inflate_table+0xb0>
  d0:	mov	x8, #0x1                   	// #1
  d4:	mov	w0, w8
  d8:	add	x10, sp, #0x70
  dc:	lsl	w0, w0, #1
  e0:	ldrh	w10, [x10, x8, lsl #1]
  e4:	subs	w0, w0, w10
  e8:	b.mi	3d4 <inflate_table+0x3d4>  // b.first
  ec:	add	x8, x8, #0x1
  f0:	cmp	x8, #0x10
  f4:	b.ne	d8 <inflate_table+0xd8>  // b.any
  f8:	cbz	w0, 108 <inflate_table+0x108>
  fc:	cmp	w6, #0x0
 100:	ccmp	w9, #0x1, #0x0, ne  // ne = any
 104:	b.ne	3d4 <inflate_table+0x3d4>  // b.any
 108:	add	x8, sp, #0x90
 10c:	ldr	w0, [x4]
 110:	mov	x12, x8
 114:	mov	x10, #0x2                   	// #2
 118:	strh	wzr, [sp, #146]
 11c:	add	x13, sp, #0x70
 120:	ldrh	w11, [x8, #2]
 124:	add	x8, x8, #0x2
 128:	ldrh	w13, [x13, x10]
 12c:	add	x10, x10, #0x2
 130:	cmp	x10, #0x1e
 134:	add	w11, w11, w13
 138:	strh	w11, [x8, #2]
 13c:	b.ne	11c <inflate_table+0x11c>  // b.any
 140:	mov	x8, #0x0                   	// #0
 144:	cmp	w2, w8
 148:	b.hi	1b8 <inflate_table+0x1b8>  // b.pmore
 14c:	cbz	w6, 1dc <inflate_table+0x1dc>
 150:	adrp	x8, 0 <inflate_table>
 154:	cmp	w6, #0x1
 158:	add	x8, x8, #0x0
 15c:	b.eq	1ec <inflate_table+0x1ec>  // b.none
 160:	add	x18, x8, #0x7c
 164:	add	x8, x8, #0xbc
 168:	mov	w15, #0x0                   	// #0
 16c:	cmp	w0, w9
 170:	mov	w11, #0x1                   	// #1
 174:	csel	w2, w0, w9, ls  // ls = plast
 178:	cmp	w2, w7
 17c:	csel	w2, w2, w7, cs  // cs = hs, nlast
 180:	cmp	w6, w11
 184:	cset	w24, eq  // eq = none
 188:	lsl	w0, w11, w2
 18c:	cmp	w0, #0x354
 190:	ccmp	w24, #0x0, #0x4, hi  // hi = pmore
 194:	b.eq	1fc <inflate_table+0x1fc>  // b.none
 198:	mov	w0, #0x1                   	// #1
 19c:	ldp	x19, x20, [sp, #16]
 1a0:	ldp	x21, x22, [sp, #32]
 1a4:	ldp	x23, x24, [sp, #48]
 1a8:	ldp	x25, x26, [sp, #64]
 1ac:	ldp	x27, x28, [sp, #80]
 1b0:	ldp	x29, x30, [sp], #176
 1b4:	ret
 1b8:	ldrh	w11, [x1, x8, lsl #1]
 1bc:	cbz	w11, 1d4 <inflate_table+0x1d4>
 1c0:	ldrh	w10, [x12, w11, sxtw #1]
 1c4:	add	w13, w10, #0x1
 1c8:	strh	w13, [x12, w11, sxtw #1]
 1cc:	ubfiz	x10, x10, #1, #16
 1d0:	strh	w8, [x5, x10]
 1d4:	add	x8, x8, #0x1
 1d8:	b	144 <inflate_table+0x144>
 1dc:	mov	x18, x5
 1e0:	mov	x8, x5
 1e4:	mov	w15, #0x14                  	// #20
 1e8:	b	16c <inflate_table+0x16c>
 1ec:	mov	x18, x8
 1f0:	mov	w15, #0x101                 	// #257
 1f4:	add	x8, x8, #0x3e
 1f8:	b	16c <inflate_table+0x16c>
 1fc:	cmp	w6, #0x2
 200:	cset	w25, eq  // eq = none
 204:	cmp	w0, #0x250
 208:	ccmp	w25, #0x0, #0x4, hi  // hi = pmore
 20c:	b.ne	198 <inflate_table+0x198>  // b.any
 210:	ldr	x14, [x3]
 214:	mov	w10, w2
 218:	mov	w23, #0xffffffff            	// #-1
 21c:	mov	w30, #0x0                   	// #0
 220:	mov	x12, x14
 224:	add	w6, w0, w23
 228:	mov	w13, #0x0                   	// #0
 22c:	mov	w17, #0x0                   	// #0
 230:	str	w6, [sp, #108]
 234:	ldrh	w6, [x5, w17, uxtw #1]
 238:	sub	w20, w7, w13
 23c:	and	w22, w20, #0xff
 240:	add	w16, w6, #0x1
 244:	cmp	w16, w15
 248:	b.cc	380 <inflate_table+0x380>  // b.lo, b.ul, b.last
 24c:	cmp	w6, w15
 250:	b.cc	388 <inflate_table+0x388>  // b.lo, b.ul, b.last
 254:	sub	w6, w6, w15
 258:	lsl	x6, x6, #1
 25c:	ldrb	w21, [x18, x6]
 260:	ldrh	w6, [x8, x6]
 264:	lsl	w26, w11, w10
 268:	mov	w19, w26
 26c:	lsl	w20, w11, w20
 270:	lsr	w28, w30, w13
 274:	sub	w19, w19, w20
 278:	add	w16, w28, w19
 27c:	lsl	x27, x16, #2
 280:	add	x16, x12, x16, lsl #2
 284:	strb	w21, [x12, x27]
 288:	strb	w22, [x16, #1]
 28c:	strh	w6, [x16, #2]
 290:	cbnz	w19, 274 <inflate_table+0x274>
 294:	sub	w6, w7, #0x1
 298:	lsl	w6, w11, w6
 29c:	tst	w30, w6
 2a0:	b.ne	394 <inflate_table+0x394>  // b.any
 2a4:	cbz	w6, 2b4 <inflate_table+0x2b4>
 2a8:	sub	w16, w6, #0x1
 2ac:	and	w30, w16, w30
 2b0:	add	w6, w6, w30
 2b4:	ubfiz	x19, x7, #1, #32
 2b8:	add	x16, sp, #0x70
 2bc:	add	x20, sp, #0x70
 2c0:	add	w17, w17, #0x1
 2c4:	ldrh	w16, [x16, x19]
 2c8:	sub	w16, w16, #0x1
 2cc:	and	w16, w16, #0xffff
 2d0:	strh	w16, [x20, x19]
 2d4:	cbnz	w16, 2e8 <inflate_table+0x2e8>
 2d8:	cmp	w7, w9
 2dc:	b.eq	3a8 <inflate_table+0x3a8>  // b.none
 2e0:	ldrh	w7, [x5, w17, uxtw #1]
 2e4:	ldrh	w7, [x1, x7, lsl #1]
 2e8:	cmp	w7, w2
 2ec:	b.ls	378 <inflate_table+0x378>  // b.plast
 2f0:	ldr	w16, [sp, #108]
 2f4:	and	w19, w16, w6
 2f8:	cmp	w19, w23
 2fc:	b.eq	378 <inflate_table+0x378>  // b.none
 300:	cmp	w13, #0x0
 304:	add	x20, sp, #0x70
 308:	csel	w13, w13, w2, ne  // ne = any
 30c:	add	x12, x12, w26, uxtw #2
 310:	sub	w10, w7, w13
 314:	add	x20, x20, w7, uxtw #1
 318:	lsl	w16, w11, w10
 31c:	add	w21, w10, w13
 320:	cmp	w21, w9
 324:	b.cs	338 <inflate_table+0x338>  // b.hs, b.nlast
 328:	ldrh	w21, [x20], #2
 32c:	sub	w16, w16, w21
 330:	cmp	w16, #0x0
 334:	b.gt	39c <inflate_table+0x39c>
 338:	lsl	w16, w11, w10
 33c:	add	w0, w0, w16
 340:	cmp	w0, #0x354
 344:	ccmp	w24, #0x0, #0x4, hi  // hi = pmore
 348:	b.ne	198 <inflate_table+0x198>  // b.any
 34c:	cmp	w0, #0x250
 350:	ccmp	w25, #0x0, #0x4, hi  // hi = pmore
 354:	b.ne	198 <inflate_table+0x198>  // b.any
 358:	ubfiz	x16, x19, #2, #32
 35c:	mov	w23, w19
 360:	add	x20, x14, x16
 364:	strb	w10, [x14, x16]
 368:	sub	x16, x12, x14
 36c:	strb	w2, [x20, #1]
 370:	asr	x16, x16, #2
 374:	strh	w16, [x20, #2]
 378:	mov	w30, w6
 37c:	b	234 <inflate_table+0x234>
 380:	mov	w21, #0x0                   	// #0
 384:	b	264 <inflate_table+0x264>
 388:	mov	w6, #0x0                   	// #0
 38c:	mov	w21, #0x60                  	// #96
 390:	b	264 <inflate_table+0x264>
 394:	lsr	w6, w6, #1
 398:	b	29c <inflate_table+0x29c>
 39c:	add	w10, w10, #0x1
 3a0:	lsl	w16, w16, #1
 3a4:	b	31c <inflate_table+0x31c>
 3a8:	cbz	w6, 3c4 <inflate_table+0x3c4>
 3ac:	ubfiz	x6, x6, #2, #32
 3b0:	mov	w5, #0x40                  	// #64
 3b4:	add	x1, x12, x6
 3b8:	strb	w5, [x12, x6]
 3bc:	strb	w22, [x1, #1]
 3c0:	strh	wzr, [x1, #2]
 3c4:	add	x0, x14, w0, uxtw #2
 3c8:	str	x0, [x3]
 3cc:	str	w2, [x4]
 3d0:	b	80 <inflate_table+0x80>
 3d4:	mov	w0, #0xffffffff            	// #-1
 3d8:	b	19c <inflate_table+0x19c>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_block>:
       0:	add	x1, x0, #0xd4
       4:	add	x2, x0, #0x54c
       8:	strh	wzr, [x1], #4
       c:	cmp	x1, x2
      10:	b.ne	8 <init_block+0x8>  // b.any
      14:	add	x1, x0, #0x9c8
      18:	add	x2, x0, #0xa40
      1c:	strh	wzr, [x1], #4
      20:	cmp	x1, x2
      24:	b.ne	1c <init_block+0x1c>  // b.any
      28:	add	x1, x0, #0xabc
      2c:	add	x2, x0, #0xb08
      30:	strh	wzr, [x1], #4
      34:	cmp	x1, x2
      38:	b.ne	30 <init_block+0x30>  // b.any
      3c:	mov	w1, #0x1                   	// #1
      40:	strh	w1, [x0, #1236]
      44:	str	wzr, [x0, #5900]
      48:	str	xzr, [x0, #5912]
      4c:	str	xzr, [x0, #5920]
      50:	str	wzr, [x0, #5928]
      54:	ret

0000000000000058 <pqdownheap>:
      58:	add	x3, x0, w2, sxtw #2
      5c:	ldr	w9, [x0, #5300]
      60:	lsl	w6, w2, #1
      64:	ldr	w7, [x3, #3008]
      68:	add	x8, x0, w7, sxtw
      6c:	add	x10, x1, w7, sxtw #2
      70:	add	x8, x8, #0x1, lsl #12
      74:	cmp	w9, w6
      78:	sxtw	x2, w2
      7c:	b.ge	8c <pqdownheap+0x34>  // b.tcont
      80:	add	x2, x2, #0x2f0
      84:	str	w7, [x0, x2, lsl #2]
      88:	ret
      8c:	b.le	dc <pqdownheap+0x84>
      90:	add	x4, x0, w6, sxtw #2
      94:	ldrsw	x3, [x4, #3008]
      98:	ldrsw	x4, [x4, #3012]
      9c:	lsl	x5, x3, #2
      a0:	lsl	x12, x4, #2
      a4:	ldrh	w11, [x1, x5]
      a8:	add	w5, w6, #0x1
      ac:	ldrh	w12, [x1, x12]
      b0:	cmp	w12, w11
      b4:	b.cc	12c <pqdownheap+0xd4>  // b.lo, b.ul, b.last
      b8:	b.ne	dc <pqdownheap+0x84>  // b.any
      bc:	add	x4, x0, x4
      c0:	add	x3, x0, x3
      c4:	add	x4, x4, #0x1, lsl #12
      c8:	add	x3, x3, #0x1, lsl #12
      cc:	ldrb	w4, [x4, #1212]
      d0:	ldrb	w3, [x3, #1212]
      d4:	cmp	w4, w3
      d8:	csel	w6, w6, w5, hi  // hi = pmore
      dc:	add	x3, x0, w6, sxtw #2
      e0:	ldrh	w11, [x10]
      e4:	ldr	w4, [x3, #3008]
      e8:	sbfiz	x5, x4, #2, #32
      ec:	sxtw	x3, w4
      f0:	ldrh	w5, [x1, x5]
      f4:	cmp	w11, w5
      f8:	b.cc	80 <pqdownheap+0x28>  // b.lo, b.ul, b.last
      fc:	b.ne	118 <pqdownheap+0xc0>  // b.any
     100:	add	x3, x0, x3
     104:	ldrb	w5, [x8, #1212]
     108:	add	x3, x3, #0x1, lsl #12
     10c:	ldrb	w3, [x3, #1212]
     110:	cmp	w5, w3
     114:	b.ls	80 <pqdownheap+0x28>  // b.plast
     118:	add	x2, x2, #0x2f0
     11c:	str	w4, [x0, x2, lsl #2]
     120:	mov	w2, w6
     124:	lsl	w6, w6, #1
     128:	b	74 <pqdownheap+0x1c>
     12c:	mov	w6, w5
     130:	b	dc <pqdownheap+0x84>

0000000000000134 <scan_tree>:
     134:	ldrh	w3, [x1, #2]
     138:	mov	w4, #0x3                   	// #3
     13c:	mov	w6, #0x4                   	// #4
     140:	mov	w5, #0x7                   	// #7
     144:	cmp	w3, #0x0
     148:	mov	w7, #0xffffffff            	// #-1
     14c:	csel	w6, w6, w4, ne  // ne = any
     150:	mov	w4, #0x8a                  	// #138
     154:	csel	w5, w5, w4, ne  // ne = any
     158:	add	x4, x1, w2, sxtw #2
     15c:	add	x1, x1, #0x6
     160:	mov	x8, #0x0                   	// #0
     164:	mov	w9, #0xffffffff            	// #-1
     168:	strh	w7, [x4, #6]
     16c:	mov	w4, #0x0                   	// #0
     170:	cmp	w2, w8
     174:	b.ge	17c <scan_tree+0x48>  // b.tcont
     178:	ret
     17c:	lsl	x7, x8, #2
     180:	add	w4, w4, #0x1
     184:	cmp	w5, w4
     188:	ldrh	w7, [x1, x7]
     18c:	b.le	1c4 <scan_tree+0x90>
     190:	cmp	w3, w7
     194:	b.eq	200 <scan_tree+0xcc>  // b.none
     198:	cmp	w6, w4
     19c:	b.le	1c4 <scan_tree+0x90>
     1a0:	add	x5, x0, w3, sxtw #2
     1a4:	ldrh	w6, [x5, #2748]
     1a8:	add	w4, w4, w6
     1ac:	strh	w4, [x5, #2748]
     1b0:	cbz	w7, 1f0 <scan_tree+0xbc>
     1b4:	mov	w9, w3
     1b8:	mov	w6, #0x4                   	// #4
     1bc:	mov	w5, #0x7                   	// #7
     1c0:	b	1fc <scan_tree+0xc8>
     1c4:	cbz	w3, 20c <scan_tree+0xd8>
     1c8:	cmp	w9, w3
     1cc:	b.eq	1e0 <scan_tree+0xac>  // b.none
     1d0:	add	x5, x0, w3, sxtw #2
     1d4:	ldrh	w4, [x5, #2748]
     1d8:	add	w4, w4, #0x1
     1dc:	strh	w4, [x5, #2748]
     1e0:	ldrh	w4, [x0, #2812]
     1e4:	add	w4, w4, #0x1
     1e8:	strh	w4, [x0, #2812]
     1ec:	cbnz	w7, 234 <scan_tree+0x100>
     1f0:	mov	w9, w3
     1f4:	mov	w6, #0x3                   	// #3
     1f8:	mov	w5, #0x8a                  	// #138
     1fc:	mov	w4, #0x0                   	// #0
     200:	add	x8, x8, #0x1
     204:	mov	w3, w7
     208:	b	170 <scan_tree+0x3c>
     20c:	cmp	w4, #0xa
     210:	b.gt	224 <scan_tree+0xf0>
     214:	ldrh	w4, [x0, #2816]
     218:	add	w4, w4, #0x1
     21c:	strh	w4, [x0, #2816]
     220:	b	1ec <scan_tree+0xb8>
     224:	ldrh	w4, [x0, #2820]
     228:	add	w4, w4, #0x1
     22c:	strh	w4, [x0, #2820]
     230:	b	1ec <scan_tree+0xb8>
     234:	cmp	w3, w7
     238:	b.ne	1b4 <scan_tree+0x80>  // b.any
     23c:	mov	w9, w7
     240:	mov	w6, #0x3                   	// #3
     244:	mov	w5, #0x6                   	// #6
     248:	b	1fc <scan_tree+0xc8>

000000000000024c <send_tree>:
     24c:	ldrh	w6, [x1, #2]
     250:	mov	w3, #0x3                   	// #3
     254:	mov	w8, #0x4                   	// #4
     258:	add	x1, x1, #0x6
     25c:	cmp	w6, #0x0
     260:	mov	w7, #0x7                   	// #7
     264:	csel	w8, w8, w3, ne  // ne = any
     268:	mov	w3, #0x8a                  	// #138
     26c:	mov	x10, #0x0                   	// #0
     270:	csel	w7, w7, w3, ne  // ne = any
     274:	mov	w11, #0xffffffff            	// #-1
     278:	mov	w3, #0x0                   	// #0
     27c:	mov	w5, #0x10                  	// #16
     280:	cmp	w2, w10
     284:	b.ge	28c <send_tree+0x40>  // b.tcont
     288:	ret
     28c:	lsl	x4, x10, #2
     290:	ldrh	w9, [x1, x4]
     294:	add	w4, w3, #0x1
     298:	cmp	w7, w4
     29c:	b.le	348 <send_tree+0xfc>
     2a0:	cmp	w6, w9
     2a4:	b.eq	744 <send_tree+0x4f8>  // b.none
     2a8:	cmp	w8, w4
     2ac:	b.le	348 <send_tree+0xfc>
     2b0:	add	x12, x0, w6, sxtw #2
     2b4:	ldrh	w11, [x12, #2748]
     2b8:	ldr	w8, [x0, #5940]
     2bc:	ldrh	w13, [x0, #5936]
     2c0:	ldrh	w7, [x12, #2750]
     2c4:	lsl	w3, w11, w8
     2c8:	orr	w3, w3, w13
     2cc:	sub	w14, w5, w7
     2d0:	sxth	w13, w3
     2d4:	and	w3, w3, #0xffff
     2d8:	strh	w3, [x0, #5936]
     2dc:	cmp	w8, w14
     2e0:	b.le	340 <send_tree+0xf4>
     2e4:	ldr	x8, [x0, #16]
     2e8:	sub	w7, w7, #0x10
     2ec:	ldr	x3, [x0, #40]
     2f0:	add	x14, x3, #0x1
     2f4:	str	x14, [x0, #40]
     2f8:	strb	w13, [x8, x3]
     2fc:	ldr	x13, [x0, #16]
     300:	ldr	x8, [x0, #40]
     304:	ldrh	w3, [x0, #5936]
     308:	add	x14, x8, #0x1
     30c:	str	x14, [x0, #40]
     310:	lsr	w3, w3, #8
     314:	strb	w3, [x13, x8]
     318:	ldr	w3, [x0, #5940]
     31c:	sub	w8, w5, w3
     320:	add	w7, w7, w3
     324:	asr	w11, w11, w8
     328:	strh	w11, [x0, #5936]
     32c:	str	w7, [x0, #5940]
     330:	subs	w4, w4, #0x1
     334:	b.ne	2b4 <send_tree+0x68>  // b.any
     338:	cbnz	w9, 738 <send_tree+0x4ec>
     33c:	b	4fc <send_tree+0x2b0>
     340:	add	w7, w8, w7
     344:	b	32c <send_tree+0xe0>
     348:	ldrh	w13, [x0, #5936]
     34c:	ldr	w7, [x0, #5940]
     350:	cbz	w6, 50c <send_tree+0x2c0>
     354:	cmp	w11, w6
     358:	b.eq	4d0 <send_tree+0x284>  // b.none
     35c:	add	x8, x0, w6, sxtw #2
     360:	ldrh	w4, [x8, #2750]
     364:	ldrh	w8, [x8, #2748]
     368:	lsl	w11, w8, w7
     36c:	orr	w11, w11, w13
     370:	sub	w13, w5, w4
     374:	sxth	w12, w11
     378:	and	w11, w11, #0xffff
     37c:	strh	w11, [x0, #5936]
     380:	cmp	w13, w7
     384:	b.ge	4c4 <send_tree+0x278>  // b.tcont
     388:	ldr	x11, [x0, #16]
     38c:	sub	w4, w4, #0x10
     390:	ldr	x7, [x0, #40]
     394:	add	x13, x7, #0x1
     398:	str	x13, [x0, #40]
     39c:	strb	w12, [x11, x7]
     3a0:	ldr	x12, [x0, #16]
     3a4:	ldr	x11, [x0, #40]
     3a8:	ldrh	w7, [x0, #5936]
     3ac:	add	x13, x11, #0x1
     3b0:	str	x13, [x0, #40]
     3b4:	lsr	w7, w7, #8
     3b8:	strb	w7, [x12, x11]
     3bc:	ldr	w7, [x0, #5940]
     3c0:	sub	w11, w5, w7
     3c4:	add	w4, w4, w7
     3c8:	str	w4, [x0, #5940]
     3cc:	asr	w8, w8, w11
     3d0:	strh	w8, [x0, #5936]
     3d4:	ldr	w8, [x0, #5940]
     3d8:	ldrh	w11, [x0, #2812]
     3dc:	ldrh	w12, [x0, #5936]
     3e0:	ldrh	w7, [x0, #2814]
     3e4:	lsl	w4, w11, w8
     3e8:	orr	w4, w4, w12
     3ec:	sub	w13, w5, w7
     3f0:	sxth	w12, w4
     3f4:	and	w4, w4, #0xffff
     3f8:	strh	w4, [x0, #5936]
     3fc:	cmp	w8, w13
     400:	b.le	4d8 <send_tree+0x28c>
     404:	ldr	x8, [x0, #16]
     408:	sub	w7, w7, #0x10
     40c:	ldr	x4, [x0, #40]
     410:	add	x13, x4, #0x1
     414:	str	x13, [x0, #40]
     418:	strb	w12, [x8, x4]
     41c:	ldr	x12, [x0, #16]
     420:	ldr	x8, [x0, #40]
     424:	ldrh	w4, [x0, #5936]
     428:	add	x13, x8, #0x1
     42c:	str	x13, [x0, #40]
     430:	lsr	w4, w4, #8
     434:	strb	w4, [x12, x8]
     438:	ldr	w4, [x0, #5940]
     43c:	sub	w8, w5, w4
     440:	add	w7, w7, w4
     444:	asr	w11, w11, w8
     448:	strh	w11, [x0, #5936]
     44c:	str	w7, [x0, #5940]
     450:	sub	w3, w3, #0x3
     454:	ldrsh	w4, [x0, #5936]
     458:	ldr	w7, [x0, #5940]
     45c:	cmp	w7, #0xe
     460:	b.le	4e0 <send_tree+0x294>
     464:	and	w3, w3, #0xffff
     468:	ldr	x8, [x0, #16]
     46c:	lsl	w7, w3, w7
     470:	orr	w4, w4, w7
     474:	ldr	x7, [x0, #40]
     478:	sxth	w4, w4
     47c:	strh	w4, [x0, #5936]
     480:	add	x11, x7, #0x1
     484:	str	x11, [x0, #40]
     488:	strb	w4, [x8, x7]
     48c:	ldr	x8, [x0, #16]
     490:	ldr	x7, [x0, #40]
     494:	ldrh	w4, [x0, #5936]
     498:	add	x11, x7, #0x1
     49c:	str	x11, [x0, #40]
     4a0:	lsr	w4, w4, #8
     4a4:	strb	w4, [x8, x7]
     4a8:	ldr	w4, [x0, #5940]
     4ac:	sub	w7, w5, w4
     4b0:	sub	w4, w4, #0xe
     4b4:	asr	w3, w3, w7
     4b8:	strh	w3, [x0, #5936]
     4bc:	str	w4, [x0, #5940]
     4c0:	b	4f8 <send_tree+0x2ac>
     4c4:	add	w7, w4, w7
     4c8:	str	w7, [x0, #5940]
     4cc:	b	3d4 <send_tree+0x188>
     4d0:	mov	w3, w4
     4d4:	b	3d4 <send_tree+0x188>
     4d8:	add	w7, w8, w7
     4dc:	b	44c <send_tree+0x200>
     4e0:	and	w3, w3, #0xffff
     4e4:	lsl	w3, w3, w7
     4e8:	add	w7, w7, #0x2
     4ec:	orr	w3, w4, w3
     4f0:	strh	w3, [x0, #5936]
     4f4:	str	w7, [x0, #5940]
     4f8:	cbnz	w9, 730 <send_tree+0x4e4>
     4fc:	mov	w8, #0x3                   	// #3
     500:	mov	w7, #0x8a                  	// #138
     504:	mov	w4, #0x0                   	// #0
     508:	b	748 <send_tree+0x4fc>
     50c:	cmp	w4, #0xa
     510:	b.gt	624 <send_tree+0x3d8>
     514:	ldrh	w8, [x0, #2818]
     518:	ldrh	w12, [x0, #2816]
     51c:	sub	w11, w5, w8
     520:	cmp	w11, w7
     524:	lsl	w11, w12, w7
     528:	orr	w11, w11, w13
     52c:	b.ge	5f4 <send_tree+0x3a8>  // b.tcont
     530:	ldr	x13, [x0, #16]
     534:	sxth	w11, w11
     538:	ldr	x7, [x0, #40]
     53c:	strh	w11, [x0, #5936]
     540:	sub	w8, w8, #0x10
     544:	add	x14, x7, #0x1
     548:	str	x14, [x0, #40]
     54c:	strb	w11, [x13, x7]
     550:	ldr	x13, [x0, #16]
     554:	ldr	x11, [x0, #40]
     558:	ldrh	w7, [x0, #5936]
     55c:	add	x14, x11, #0x1
     560:	str	x14, [x0, #40]
     564:	lsr	w7, w7, #8
     568:	strb	w7, [x13, x11]
     56c:	ldr	w7, [x0, #5940]
     570:	sub	w11, w5, w7
     574:	add	w8, w8, w7
     578:	str	w8, [x0, #5940]
     57c:	asr	w12, w12, w11
     580:	strh	w12, [x0, #5936]
     584:	ldr	w8, [x0, #5940]
     588:	ldrsh	w7, [x0, #5936]
     58c:	cmp	w8, #0xd
     590:	b.le	604 <send_tree+0x3b8>
     594:	sub	w3, w3, #0x2
     598:	and	w3, w3, #0xffff
     59c:	ldr	x4, [x0, #40]
     5a0:	lsl	w8, w3, w8
     5a4:	orr	w7, w7, w8
     5a8:	ldr	x8, [x0, #16]
     5ac:	sxth	w7, w7
     5b0:	add	x11, x4, #0x1
     5b4:	str	x11, [x0, #40]
     5b8:	strh	w7, [x0, #5936]
     5bc:	strb	w7, [x8, x4]
     5c0:	ldr	x8, [x0, #16]
     5c4:	ldr	x7, [x0, #40]
     5c8:	ldrh	w4, [x0, #5936]
     5cc:	add	x11, x7, #0x1
     5d0:	str	x11, [x0, #40]
     5d4:	lsr	w4, w4, #8
     5d8:	strb	w4, [x8, x7]
     5dc:	ldr	w4, [x0, #5940]
     5e0:	sub	w7, w5, w4
     5e4:	sub	w4, w4, #0xd
     5e8:	asr	w3, w3, w7
     5ec:	strh	w3, [x0, #5936]
     5f0:	b	4bc <send_tree+0x270>
     5f4:	add	w7, w8, w7
     5f8:	strh	w11, [x0, #5936]
     5fc:	str	w7, [x0, #5940]
     600:	b	584 <send_tree+0x338>
     604:	sub	w4, w4, #0x3
     608:	and	w4, w4, #0xffff
     60c:	lsl	w4, w4, w8
     610:	add	w8, w8, #0x3
     614:	orr	w7, w7, w4
     618:	strh	w7, [x0, #5936]
     61c:	str	w8, [x0, #5940]
     620:	b	4f8 <send_tree+0x2ac>
     624:	ldrh	w12, [x0, #2820]
     628:	ldrh	w8, [x0, #2822]
     62c:	lsl	w11, w12, w7
     630:	orr	w11, w11, w13
     634:	sub	w14, w5, w8
     638:	sxth	w13, w11
     63c:	and	w11, w11, #0xffff
     640:	strh	w11, [x0, #5936]
     644:	cmp	w14, w7
     648:	b.ge	708 <send_tree+0x4bc>  // b.tcont
     64c:	ldr	x11, [x0, #16]
     650:	sub	w8, w8, #0x10
     654:	ldr	x7, [x0, #40]
     658:	add	x14, x7, #0x1
     65c:	str	x14, [x0, #40]
     660:	strb	w13, [x11, x7]
     664:	ldr	x13, [x0, #16]
     668:	ldr	x11, [x0, #40]
     66c:	ldrh	w7, [x0, #5936]
     670:	add	x14, x11, #0x1
     674:	str	x14, [x0, #40]
     678:	lsr	w7, w7, #8
     67c:	strb	w7, [x13, x11]
     680:	ldr	w7, [x0, #5940]
     684:	sub	w11, w5, w7
     688:	add	w8, w8, w7
     68c:	str	w8, [x0, #5940]
     690:	asr	w12, w12, w11
     694:	strh	w12, [x0, #5936]
     698:	ldr	w8, [x0, #5940]
     69c:	ldrsh	w7, [x0, #5936]
     6a0:	cmp	w8, #0x9
     6a4:	b.le	714 <send_tree+0x4c8>
     6a8:	sub	w3, w3, #0xa
     6ac:	and	w3, w3, #0xffff
     6b0:	ldr	x4, [x0, #40]
     6b4:	lsl	w8, w3, w8
     6b8:	orr	w7, w7, w8
     6bc:	ldr	x8, [x0, #16]
     6c0:	sxth	w7, w7
     6c4:	add	x11, x4, #0x1
     6c8:	str	x11, [x0, #40]
     6cc:	strh	w7, [x0, #5936]
     6d0:	strb	w7, [x8, x4]
     6d4:	ldr	x8, [x0, #16]
     6d8:	ldr	x7, [x0, #40]
     6dc:	ldrh	w4, [x0, #5936]
     6e0:	add	x11, x7, #0x1
     6e4:	str	x11, [x0, #40]
     6e8:	lsr	w4, w4, #8
     6ec:	strb	w4, [x8, x7]
     6f0:	ldr	w4, [x0, #5940]
     6f4:	sub	w7, w5, w4
     6f8:	sub	w4, w4, #0x9
     6fc:	asr	w3, w3, w7
     700:	strh	w3, [x0, #5936]
     704:	b	4bc <send_tree+0x270>
     708:	add	w7, w8, w7
     70c:	str	w7, [x0, #5940]
     710:	b	698 <send_tree+0x44c>
     714:	sub	w4, w4, #0xb
     718:	and	w4, w4, #0xffff
     71c:	lsl	w4, w4, w8
     720:	add	w8, w8, #0x7
     724:	orr	w7, w7, w4
     728:	strh	w7, [x0, #5936]
     72c:	b	61c <send_tree+0x3d0>
     730:	cmp	w6, w9
     734:	b.eq	75c <send_tree+0x510>  // b.none
     738:	mov	w8, #0x4                   	// #4
     73c:	mov	w7, #0x7                   	// #7
     740:	b	504 <send_tree+0x2b8>
     744:	mov	w6, w11
     748:	mov	w11, w6
     74c:	add	x10, x10, #0x1
     750:	mov	w3, w4
     754:	mov	w6, w9
     758:	b	280 <send_tree+0x34>
     75c:	mov	w8, #0x3                   	// #3
     760:	mov	w7, #0x6                   	// #6
     764:	b	504 <send_tree+0x2b8>

0000000000000768 <compress_block>:
     768:	stp	x29, x30, [sp, #-16]!
     76c:	mov	x29, sp
     770:	ldr	w3, [x0, #5900]
     774:	cbnz	w3, 7b4 <compress_block+0x4c>
     778:	ldr	w3, [x0, #5940]
     77c:	ldrh	w4, [x1, #1024]
     780:	ldrh	w5, [x0, #5936]
     784:	ldrh	w2, [x1, #1026]
     788:	lsl	w1, w4, w3
     78c:	orr	w1, w1, w5
     790:	mov	w5, #0x10                  	// #16
     794:	sub	w7, w5, w2
     798:	sxth	w6, w1
     79c:	cmp	w3, w7
     7a0:	and	w1, w1, #0xffff
     7a4:	b.gt	ae8 <compress_block+0x380>
     7a8:	add	w2, w3, w2
     7ac:	strh	w1, [x0, #5936]
     7b0:	b	b34 <compress_block+0x3cc>
     7b4:	adrp	x8, 0 <init_block>
     7b8:	add	x8, x8, #0x0
     7bc:	add	x11, x8, #0x100
     7c0:	add	x12, x8, #0x3e8
     7c4:	add	x13, x8, #0x460
     7c8:	add	x10, x8, #0x1e8
     7cc:	add	x14, x8, #0x174
     7d0:	mov	w9, #0x0                   	// #0
     7d4:	mov	w6, #0x10                  	// #16
     7d8:	ldr	x4, [x0, #5904]
     7dc:	mov	w3, w9
     7e0:	ldr	w17, [x0, #5940]
     7e4:	ldrh	w15, [x4, w9, uxtw #1]
     7e8:	add	w9, w9, #0x1
     7ec:	ldr	x4, [x0, #5888]
     7f0:	ldrb	w4, [x4, x3]
     7f4:	ldrsh	w3, [x0, #5936]
     7f8:	cbnz	w15, 890 <compress_block+0x128>
     7fc:	ubfiz	x4, x4, #2, #8
     800:	add	x5, x1, x4
     804:	ldrh	w4, [x1, x4]
     808:	ldrh	w7, [x5, #2]
     80c:	lsl	w5, w4, w17
     810:	orr	w3, w3, w5
     814:	sub	w5, w6, w7
     818:	sxth	w15, w3
     81c:	and	w3, w3, #0xffff
     820:	strh	w3, [x0, #5936]
     824:	cmp	w5, w17
     828:	b.ge	888 <compress_block+0x120>  // b.tcont
     82c:	ldr	x5, [x0, #16]
     830:	sub	w7, w7, #0x10
     834:	ldr	x3, [x0, #40]
     838:	add	x16, x3, #0x1
     83c:	str	x16, [x0, #40]
     840:	strb	w15, [x5, x3]
     844:	ldr	x15, [x0, #16]
     848:	ldr	x5, [x0, #40]
     84c:	ldrh	w3, [x0, #5936]
     850:	add	x16, x5, #0x1
     854:	str	x16, [x0, #40]
     858:	lsr	w3, w3, #8
     85c:	strb	w3, [x15, x5]
     860:	ldr	w3, [x0, #5940]
     864:	sub	w5, w6, w3
     868:	add	w7, w7, w3
     86c:	asr	w4, w4, w5
     870:	strh	w4, [x0, #5936]
     874:	str	w7, [x0, #5940]
     878:	ldr	w3, [x0, #5900]
     87c:	cmp	w3, w9
     880:	b.hi	7d8 <compress_block+0x70>  // b.pmore
     884:	b	778 <compress_block+0x10>
     888:	add	w7, w7, w17
     88c:	b	874 <compress_block+0x10c>
     890:	ldrb	w7, [x8, w4, sxtw]
     894:	add	w16, w7, #0x101
     898:	ubfiz	x16, x16, #2, #10
     89c:	add	x5, x1, x16
     8a0:	ldrh	w18, [x1, x16]
     8a4:	ldrh	w5, [x5, #2]
     8a8:	lsl	w16, w18, w17
     8ac:	orr	w3, w3, w16
     8b0:	sub	w16, w6, w5
     8b4:	sxth	w30, w3
     8b8:	and	w3, w3, #0xffff
     8bc:	strh	w3, [x0, #5936]
     8c0:	cmp	w16, w17
     8c4:	b.ge	ac0 <compress_block+0x358>  // b.tcont
     8c8:	ldr	x16, [x0, #16]
     8cc:	sub	w5, w5, #0x10
     8d0:	ldr	x3, [x0, #40]
     8d4:	add	x17, x3, #0x1
     8d8:	str	x17, [x0, #40]
     8dc:	strb	w30, [x16, x3]
     8e0:	ldr	x17, [x0, #16]
     8e4:	ldr	x3, [x0, #40]
     8e8:	ldrh	w16, [x0, #5936]
     8ec:	add	x30, x3, #0x1
     8f0:	str	x30, [x0, #40]
     8f4:	lsr	w16, w16, #8
     8f8:	strb	w16, [x17, x3]
     8fc:	ldr	w16, [x0, #5940]
     900:	sub	w3, w6, w16
     904:	add	w5, w5, w16
     908:	asr	w3, w18, w3
     90c:	strh	w3, [x0, #5936]
     910:	str	w5, [x0, #5940]
     914:	ldr	w5, [x11, x7, lsl #2]
     918:	cbz	w5, 99c <compress_block+0x234>
     91c:	ldr	w7, [x14, x7, lsl #2]
     920:	sub	w17, w6, w5
     924:	ldr	w3, [x0, #5940]
     928:	sub	w4, w4, w7
     92c:	ldrh	w16, [x0, #5936]
     930:	and	w4, w4, #0xffff
     934:	cmp	w17, w3
     938:	lsl	w7, w4, w3
     93c:	orr	w7, w7, w16
     940:	sxth	w16, w7
     944:	and	w7, w7, #0xffff
     948:	strh	w7, [x0, #5936]
     94c:	b.ge	994 <compress_block+0x22c>  // b.tcont
     950:	ldr	x7, [x0, #16]
     954:	sub	w5, w5, #0x10
     958:	ldr	x3, [x0, #40]
     95c:	add	x17, x3, #0x1
     960:	str	x17, [x0, #40]
     964:	strb	w16, [x7, x3]
     968:	ldr	x16, [x0, #16]
     96c:	ldr	x7, [x0, #40]
     970:	ldrh	w3, [x0, #5936]
     974:	add	x17, x7, #0x1
     978:	str	x17, [x0, #40]
     97c:	lsr	w3, w3, #8
     980:	strb	w3, [x16, x7]
     984:	ldr	w3, [x0, #5940]
     988:	sub	w7, w6, w3
     98c:	asr	w4, w4, w7
     990:	strh	w4, [x0, #5936]
     994:	add	w5, w5, w3
     998:	str	w5, [x0, #5940]
     99c:	sub	w3, w15, #0x1
     9a0:	cmp	w3, #0xff
     9a4:	b.hi	ac8 <compress_block+0x360>  // b.pmore
     9a8:	ldrb	w4, [x10, w3, uxtw]
     9ac:	mov	w17, w4
     9b0:	ubfiz	x4, x4, #2, #8
     9b4:	add	x5, x2, x4
     9b8:	ldrh	w7, [x0, #5936]
     9bc:	ldrh	w16, [x2, x4]
     9c0:	ldrh	w15, [x5, #2]
     9c4:	ldr	w5, [x0, #5940]
     9c8:	sub	w18, w6, w15
     9cc:	cmp	w5, w18
     9d0:	lsl	w4, w16, w5
     9d4:	orr	w4, w4, w7
     9d8:	sxth	w7, w4
     9dc:	and	w4, w4, #0xffff
     9e0:	strh	w4, [x0, #5936]
     9e4:	b.le	ad8 <compress_block+0x370>
     9e8:	ldr	x5, [x0, #16]
     9ec:	ldr	x4, [x0, #40]
     9f0:	add	x18, x4, #0x1
     9f4:	str	x18, [x0, #40]
     9f8:	strb	w7, [x5, x4]
     9fc:	ldr	x5, [x0, #16]
     a00:	ldr	x4, [x0, #40]
     a04:	ldrh	w7, [x0, #5936]
     a08:	add	x18, x4, #0x1
     a0c:	str	x18, [x0, #40]
     a10:	lsr	w7, w7, #8
     a14:	strb	w7, [x5, x4]
     a18:	sub	w5, w15, #0x10
     a1c:	ldr	w7, [x0, #5940]
     a20:	sub	w4, w6, w7
     a24:	add	w5, w5, w7
     a28:	asr	w4, w16, w4
     a2c:	strh	w4, [x0, #5936]
     a30:	ldr	w4, [x12, x17, lsl #2]
     a34:	str	w5, [x0, #5940]
     a38:	cbz	w4, 878 <compress_block+0x110>
     a3c:	ldr	w5, [x13, x17, lsl #2]
     a40:	sub	w16, w6, w4
     a44:	ldr	w7, [x0, #5940]
     a48:	sub	w3, w3, w5
     a4c:	ldrh	w15, [x0, #5936]
     a50:	and	w3, w3, #0xffff
     a54:	cmp	w16, w7
     a58:	lsl	w5, w3, w7
     a5c:	orr	w5, w5, w15
     a60:	sxth	w15, w5
     a64:	and	w5, w5, #0xffff
     a68:	strh	w5, [x0, #5936]
     a6c:	b.ge	ae0 <compress_block+0x378>  // b.tcont
     a70:	ldr	x7, [x0, #16]
     a74:	sub	w4, w4, #0x10
     a78:	ldr	x5, [x0, #40]
     a7c:	add	x16, x5, #0x1
     a80:	str	x16, [x0, #40]
     a84:	strb	w15, [x7, x5]
     a88:	ldr	x15, [x0, #16]
     a8c:	ldr	x7, [x0, #40]
     a90:	ldrh	w5, [x0, #5936]
     a94:	add	x16, x7, #0x1
     a98:	str	x16, [x0, #40]
     a9c:	lsr	w5, w5, #8
     aa0:	strb	w5, [x15, x7]
     aa4:	ldr	w5, [x0, #5940]
     aa8:	sub	w7, w6, w5
     aac:	add	w4, w4, w5
     ab0:	asr	w3, w3, w7
     ab4:	strh	w3, [x0, #5936]
     ab8:	str	w4, [x0, #5940]
     abc:	b	878 <compress_block+0x110>
     ac0:	add	w5, w5, w17
     ac4:	b	910 <compress_block+0x1a8>
     ac8:	lsr	w4, w3, #7
     acc:	add	w4, w4, #0x100
     ad0:	ldrb	w4, [x10, x4]
     ad4:	b	9ac <compress_block+0x244>
     ad8:	add	w5, w5, w15
     adc:	b	a30 <compress_block+0x2c8>
     ae0:	add	w4, w4, w7
     ae4:	b	ab8 <compress_block+0x350>
     ae8:	strh	w1, [x0, #5936]
     aec:	sub	w2, w2, #0x10
     af0:	ldr	x3, [x0, #16]
     af4:	ldr	x1, [x0, #40]
     af8:	add	x7, x1, #0x1
     afc:	str	x7, [x0, #40]
     b00:	strb	w6, [x3, x1]
     b04:	ldr	x6, [x0, #16]
     b08:	ldr	x3, [x0, #40]
     b0c:	ldrh	w1, [x0, #5936]
     b10:	add	x7, x3, #0x1
     b14:	str	x7, [x0, #40]
     b18:	lsr	w1, w1, #8
     b1c:	strb	w1, [x6, x3]
     b20:	ldr	w1, [x0, #5940]
     b24:	sub	w5, w5, w1
     b28:	add	w2, w2, w1
     b2c:	asr	w4, w4, w5
     b30:	strh	w4, [x0, #5936]
     b34:	ldp	x29, x30, [sp], #16
     b38:	str	w2, [x0, #5940]
     b3c:	ret

0000000000000b40 <build_tree>:
     b40:	mov	x15, x1
     b44:	stp	x29, x30, [sp, #-80]!
     b48:	mov	x4, #0x14bc                	// #5308
     b4c:	mov	x29, sp
     b50:	ldr	x2, [x15, #16]
     b54:	add	x7, x0, x4
     b58:	ldr	x1, [x1]
     b5c:	mov	x5, #0x1400                	// #5120
     b60:	stp	x19, x20, [sp, #16]
     b64:	mov	x3, #0x23d00000000         	// #2461016260608
     b68:	ldr	w19, [x2, #20]
     b6c:	ldr	x4, [x2]
     b70:	add	x2, x0, x5
     b74:	add	x6, x1, #0x2
     b78:	str	x21, [sp, #32]
     b7c:	mov	w14, #0xffffffff            	// #-1
     b80:	stur	x3, [x2, #180]
     b84:	mov	x2, #0x0                   	// #0
     b88:	mov	w5, w2
     b8c:	cmp	w19, w2
     b90:	b.gt	da4 <build_tree+0x264>
     b94:	mov	w5, #0x1                   	// #1
     b98:	ldr	w13, [x0, #5300]
     b9c:	cmp	w13, #0x1
     ba0:	b.le	de0 <build_tree+0x2a0>
     ba4:	asr	w13, w13, #1
     ba8:	str	w14, [x15, #8]
     bac:	mov	w2, w13
     bb0:	bl	58 <pqdownheap>
     bb4:	subs	w13, w13, #0x1
     bb8:	b.ne	bac <build_tree+0x6c>  // b.any
     bbc:	mov	x2, #0x14bc                	// #5308
     bc0:	sxtw	x21, w19
     bc4:	add	x20, x0, x2
     bc8:	ldr	w2, [x0, #5300]
     bcc:	ldr	w18, [x0, #3012]
     bd0:	sub	w3, w2, #0x1
     bd4:	add	x2, x0, w2, sxtw #2
     bd8:	ldr	w2, [x2, #3008]
     bdc:	str	w2, [x0, #3012]
     be0:	str	w3, [x0, #5300]
     be4:	mov	w2, #0x1                   	// #1
     be8:	bl	58 <pqdownheap>
     bec:	ldr	w3, [x0, #5304]
     bf0:	ldr	w2, [x0, #3012]
     bf4:	add	x6, x1, w18, sxtw #2
     bf8:	add	x4, x0, w3, sxtw #2
     bfc:	sub	w3, w3, #0x2
     c00:	sbfiz	x5, x2, #2, #32
     c04:	add	x7, x1, w2, sxtw #2
     c08:	str	w18, [x4, #3004]
     c0c:	str	w3, [x0, #5304]
     c10:	sbfiz	x3, x18, #2, #32
     c14:	str	w2, [x4, #3000]
     c18:	lsl	x4, x21, #2
     c1c:	add	x18, x0, w18, sxtw
     c20:	add	x2, x0, w2, sxtw
     c24:	ldrh	w5, [x1, x5]
     c28:	add	x18, x18, #0x1, lsl #12
     c2c:	ldrh	w3, [x1, x3]
     c30:	add	x2, x2, #0x1, lsl #12
     c34:	add	w3, w3, w5
     c38:	strh	w3, [x1, x4]
     c3c:	ldrb	w5, [x18, #1212]
     c40:	add	w18, w19, #0x1
     c44:	ldrb	w4, [x2, #1212]
     c48:	add	w2, w5, #0x1
     c4c:	and	w3, w2, #0xff
     c50:	add	w2, w4, #0x1
     c54:	cmp	w5, w4
     c58:	and	w2, w2, #0xff
     c5c:	csel	w2, w2, w3, cc  // cc = lo, ul, last
     c60:	strb	w2, [x20, x21]
     c64:	and	w2, w19, #0xffff
     c68:	strh	w2, [x7, #2]
     c6c:	strh	w2, [x6, #2]
     c70:	mov	w2, #0x1                   	// #1
     c74:	str	w19, [x0, #3012]
     c78:	add	x21, x21, #0x1
     c7c:	bl	58 <pqdownheap>
     c80:	ldr	w2, [x0, #5300]
     c84:	cmp	w2, #0x1
     c88:	b.gt	e44 <build_tree+0x304>
     c8c:	ldr	w7, [x0, #5304]
     c90:	add	x9, x0, #0xba0
     c94:	ldr	w8, [x15, #8]
     c98:	mov	x4, x9
     c9c:	sub	w3, w7, #0x1
     ca0:	ldr	w2, [x0, #3012]
     ca4:	ldr	x5, [x15]
     ca8:	str	w3, [x0, #5304]
     cac:	add	x3, x0, w3, sxtw #2
     cb0:	add	x18, x0, #0xbc0
     cb4:	str	w2, [x3, #3008]
     cb8:	ldr	x3, [x15, #16]
     cbc:	ldr	w16, [x3, #16]
     cc0:	ldp	x15, x17, [x3]
     cc4:	ldr	w3, [x3, #24]
     cc8:	strh	wzr, [x4], #2
     ccc:	cmp	x18, x4
     cd0:	b.ne	cc8 <build_tree+0x188>  // b.any
     cd4:	add	x2, x5, w2, sxtw #2
     cd8:	sxtw	x10, w7
     cdc:	mov	w6, #0x0                   	// #0
     ce0:	strh	wzr, [x2, #2]
     ce4:	cmp	w10, #0x23c
     ce8:	b.le	e4c <build_tree+0x30c>
     cec:	cmp	w7, #0x23d
     cf0:	mov	w2, #0x23d                 	// #573
     cf4:	sub	w2, w2, w7
     cf8:	csel	w2, w2, wzr, le
     cfc:	add	w2, w2, w7
     d00:	cbz	w6, d60 <build_tree+0x220>
     d04:	sub	w11, w3, #0x1
     d08:	add	x12, x0, #0xba2
     d0c:	sxtw	x10, w11
     d10:	mov	w4, w10
     d14:	sub	x10, x10, #0x1
     d18:	ldrh	w7, [x12, x10, lsl #1]
     d1c:	cbz	w7, d10 <build_tree+0x1d0>
     d20:	add	x4, x0, w4, sxtw #1
     d24:	sub	w7, w7, #0x1
     d28:	add	x10, x0, w3, sxtw #1
     d2c:	sub	w6, w6, #0x2
     d30:	cmp	w6, #0x0
     d34:	strh	w7, [x4, #2976]
     d38:	ldrh	w7, [x4, #2978]
     d3c:	add	w7, w7, #0x2
     d40:	strh	w7, [x4, #2978]
     d44:	sxtw	x7, w3
     d48:	ldrh	w4, [x10, #2976]
     d4c:	sub	w4, w4, #0x1
     d50:	strh	w4, [x10, #2976]
     d54:	b.gt	d0c <build_tree+0x1cc>
     d58:	add	x11, x0, #0xbbc
     d5c:	cbnz	w3, ee4 <build_tree+0x3a4>
     d60:	add	x0, x0, #0xb9e
     d64:	add	x4, sp, #0x30
     d68:	mov	x2, #0x1                   	// #1
     d6c:	mov	w3, #0x0                   	// #0
     d70:	ldrh	w5, [x0, x2, lsl #1]
     d74:	add	w3, w5, w3
     d78:	lsl	w3, w3, #1
     d7c:	strh	w3, [x4, x2, lsl #1]
     d80:	add	x2, x2, #0x1
     d84:	cmp	x2, #0x10
     d88:	b.ne	d70 <build_tree+0x230>  // b.any
     d8c:	cmp	w14, w13
     d90:	b.ge	f44 <build_tree+0x404>  // b.tcont
     d94:	ldp	x19, x20, [sp, #16]
     d98:	ldr	x21, [sp, #32]
     d9c:	ldp	x29, x30, [sp], #80
     da0:	ret
     da4:	lsl	x3, x2, #2
     da8:	ldrh	w8, [x1, x3]
     dac:	cbz	w8, dd4 <build_tree+0x294>
     db0:	ldr	w3, [x0, #5300]
     db4:	add	w3, w3, #0x1
     db8:	str	w3, [x0, #5300]
     dbc:	add	x3, x0, w3, sxtw #2
     dc0:	str	w2, [x3, #3008]
     dc4:	strb	wzr, [x7, x2]
     dc8:	add	x2, x2, #0x1
     dcc:	mov	w14, w5
     dd0:	b	b88 <build_tree+0x48>
     dd4:	mov	w5, w14
     dd8:	strh	wzr, [x6, x3]
     ddc:	b	dc8 <build_tree+0x288>
     de0:	cmp	w14, #0x1
     de4:	b.gt	e3c <build_tree+0x2fc>
     de8:	add	w14, w14, #0x1
     dec:	mov	w2, w14
     df0:	add	w13, w13, #0x1
     df4:	str	w13, [x0, #5300]
     df8:	sbfiz	x3, x2, #2, #32
     dfc:	add	x13, x0, w13, sxtw #2
     e00:	str	w2, [x13, #3008]
     e04:	add	x2, x0, w2, sxtw
     e08:	add	x2, x2, #0x1, lsl #12
     e0c:	strh	w5, [x1, x3]
     e10:	strb	wzr, [x2, #1212]
     e14:	ldr	x2, [x0, #5912]
     e18:	sub	x2, x2, #0x1
     e1c:	str	x2, [x0, #5912]
     e20:	cbz	x4, b98 <build_tree+0x58>
     e24:	add	x3, x4, x3
     e28:	ldr	x2, [x0, #5920]
     e2c:	ldrh	w3, [x3, #2]
     e30:	sub	x2, x2, x3
     e34:	str	x2, [x0, #5920]
     e38:	b	b98 <build_tree+0x58>
     e3c:	mov	w2, #0x0                   	// #0
     e40:	b	df0 <build_tree+0x2b0>
     e44:	mov	w19, w18
     e48:	b	bc8 <build_tree+0x88>
     e4c:	ldr	w4, [x18, x10, lsl #2]
     e50:	add	x12, x5, w4, sxtw #2
     e54:	sbfiz	x11, x4, #2, #32
     e58:	ldrh	w2, [x12, #2]
     e5c:	add	x2, x5, x2, lsl #2
     e60:	ldrh	w2, [x2, #2]
     e64:	add	w2, w2, #0x1
     e68:	cmp	w3, w2
     e6c:	b.ge	e78 <build_tree+0x338>  // b.tcont
     e70:	add	w6, w6, #0x1
     e74:	mov	w2, w3
     e78:	strh	w2, [x12, #2]
     e7c:	cmp	w8, w4
     e80:	b.lt	ed4 <build_tree+0x394>  // b.tstop
     e84:	add	x19, x0, w2, sxtw #1
     e88:	cmp	w16, w4
     e8c:	ldrh	w12, [x19, #2976]
     e90:	add	w12, w12, #0x1
     e94:	strh	w12, [x19, #2976]
     e98:	b.gt	edc <build_tree+0x39c>
     e9c:	sub	w4, w4, w16
     ea0:	ldr	w4, [x17, w4, sxtw #2]
     ea4:	ldrh	w12, [x5, x11]
     ea8:	add	w2, w2, w4
     eac:	ldr	x19, [x0, #5912]
     eb0:	umaddl	x2, w2, w12, x19
     eb4:	str	x2, [x0, #5912]
     eb8:	cbz	x15, ed4 <build_tree+0x394>
     ebc:	add	x11, x15, x11
     ec0:	ldrh	w2, [x11, #2]
     ec4:	add	w2, w2, w4
     ec8:	ldr	x4, [x0, #5920]
     ecc:	umaddl	x2, w2, w12, x4
     ed0:	str	x2, [x0, #5920]
     ed4:	add	x10, x10, #0x1
     ed8:	b	ce4 <build_tree+0x1a4>
     edc:	mov	w4, #0x0                   	// #0
     ee0:	b	ea4 <build_tree+0x364>
     ee4:	ldrh	w10, [x9, x7, lsl #1]
     ee8:	sxtw	x6, w2
     eec:	mov	w2, w6
     ef0:	cbnz	w10, f00 <build_tree+0x3c0>
     ef4:	sub	w3, w3, #0x1
     ef8:	sub	x7, x7, #0x1
     efc:	b	d5c <build_tree+0x21c>
     f00:	ldr	w2, [x11, x6, lsl #2]
     f04:	cmp	w8, w2
     f08:	b.lt	f3c <build_tree+0x3fc>  // b.tstop
     f0c:	sbfiz	x12, x2, #2, #32
     f10:	add	x2, x5, w2, sxtw #2
     f14:	ldrh	w4, [x2, #2]
     f18:	cmp	w4, w3
     f1c:	b.eq	f38 <build_tree+0x3f8>  // b.none
     f20:	ldrh	w15, [x5, x12]
     f24:	sub	x4, x7, w4, uxth
     f28:	ldr	x12, [x0, #5912]
     f2c:	madd	x4, x4, x15, x12
     f30:	str	x4, [x0, #5912]
     f34:	strh	w3, [x2, #2]
     f38:	sub	w10, w10, #0x1
     f3c:	sub	x6, x6, #0x1
     f40:	b	eec <build_tree+0x3ac>
     f44:	ldrh	w0, [x1, #2]
     f48:	cbz	w0, f78 <build_tree+0x438>
     f4c:	ldrh	w2, [x4, w0, sxtw #1]
     f50:	mov	w5, #0x0                   	// #0
     f54:	add	w3, w2, #0x1
     f58:	strh	w3, [x4, w0, sxtw #1]
     f5c:	and	w3, w2, #0x1
     f60:	subs	w0, w0, #0x1
     f64:	orr	w3, w3, w5
     f68:	lsr	w2, w2, #1
     f6c:	lsl	w5, w3, #1
     f70:	b.ne	f5c <build_tree+0x41c>  // b.any
     f74:	strh	w3, [x1]
     f78:	add	w13, w13, #0x1
     f7c:	add	x1, x1, #0x4
     f80:	b	d8c <build_tree+0x24c>

0000000000000f84 <bi_windup>:
     f84:	ldr	w1, [x0, #5940]
     f88:	cmp	w1, #0x8
     f8c:	b.le	fd0 <bi_windup+0x4c>
     f90:	ldr	x2, [x0, #16]
     f94:	ldr	x1, [x0, #40]
     f98:	ldrh	w3, [x0, #5936]
     f9c:	add	x4, x1, #0x1
     fa0:	str	x4, [x0, #40]
     fa4:	strb	w3, [x2, x1]
     fa8:	ldr	x3, [x0, #16]
     fac:	ldr	x2, [x0, #40]
     fb0:	ldrh	w1, [x0, #5936]
     fb4:	add	x4, x2, #0x1
     fb8:	str	x4, [x0, #40]
     fbc:	lsr	w1, w1, #8
     fc0:	strb	w1, [x3, x2]
     fc4:	strh	wzr, [x0, #5936]
     fc8:	str	wzr, [x0, #5940]
     fcc:	ret
     fd0:	cmp	w1, #0x0
     fd4:	b.le	fc4 <bi_windup+0x40>
     fd8:	ldr	x2, [x0, #16]
     fdc:	ldr	x1, [x0, #40]
     fe0:	ldrh	w3, [x0, #5936]
     fe4:	add	x4, x1, #0x1
     fe8:	str	x4, [x0, #40]
     fec:	strb	w3, [x2, x1]
     ff0:	b	fc4 <bi_windup+0x40>

0000000000000ff4 <bi_flush>:
     ff4:	ldr	w1, [x0, #5940]
     ff8:	cmp	w1, #0x10
     ffc:	b.ne	1040 <bi_flush+0x4c>  // b.any
    1000:	ldr	x2, [x0, #16]
    1004:	ldr	x1, [x0, #40]
    1008:	ldrh	w3, [x0, #5936]
    100c:	add	x4, x1, #0x1
    1010:	str	x4, [x0, #40]
    1014:	strb	w3, [x2, x1]
    1018:	ldr	x3, [x0, #16]
    101c:	ldr	x2, [x0, #40]
    1020:	ldrh	w1, [x0, #5936]
    1024:	add	x4, x2, #0x1
    1028:	str	x4, [x0, #40]
    102c:	lsr	w1, w1, #8
    1030:	strb	w1, [x3, x2]
    1034:	strh	wzr, [x0, #5936]
    1038:	str	wzr, [x0, #5940]
    103c:	ret
    1040:	cmp	w1, #0x7
    1044:	b.le	103c <bi_flush+0x48>
    1048:	ldr	x2, [x0, #16]
    104c:	ldr	x1, [x0, #40]
    1050:	ldrh	w3, [x0, #5936]
    1054:	add	x4, x1, #0x1
    1058:	str	x4, [x0, #40]
    105c:	strb	w3, [x2, x1]
    1060:	ldrh	w1, [x0, #5936]
    1064:	lsr	w1, w1, #8
    1068:	strh	w1, [x0, #5936]
    106c:	ldr	w1, [x0, #5940]
    1070:	sub	w1, w1, #0x8
    1074:	str	w1, [x0, #5940]
    1078:	b	103c <bi_flush+0x48>

000000000000107c <_tr_init>:
    107c:	add	x2, x0, #0xd4
    1080:	str	x2, [x0, #2904]
    1084:	adrp	x2, 0 <init_block>
    1088:	add	x2, x2, #0x0
    108c:	add	x3, x2, #0x4d8
    1090:	str	x3, [x0, #2920]
    1094:	add	x3, x0, #0x9c8
    1098:	str	x3, [x0, #2928]
    109c:	add	x3, x2, #0x4f8
    10a0:	add	x2, x2, #0x518
    10a4:	str	x3, [x0, #2944]
    10a8:	add	x3, x0, #0xabc
    10ac:	str	x3, [x0, #2952]
    10b0:	str	x2, [x0, #2968]
    10b4:	strh	wzr, [x0, #5936]
    10b8:	str	wzr, [x0, #5940]
    10bc:	b	0 <init_block>

00000000000010c0 <_tr_stored_block>:
    10c0:	stp	x29, x30, [sp, #-32]!
    10c4:	mov	x5, x1
    10c8:	and	w3, w3, #0xffff
    10cc:	mov	x29, sp
    10d0:	stp	x19, x20, [sp, #16]
    10d4:	mov	x20, x2
    10d8:	ldr	w2, [x0, #5940]
    10dc:	ldrh	w1, [x0, #5936]
    10e0:	mov	x19, x0
    10e4:	cmp	w2, #0xd
    10e8:	lsl	w0, w3, w2
    10ec:	orr	w0, w0, w1
    10f0:	sxth	w4, w0
    10f4:	and	w0, w0, #0xffff
    10f8:	strh	w0, [x19, #5936]
    10fc:	b.le	11e8 <_tr_stored_block+0x128>
    1100:	ldr	x1, [x19, #16]
    1104:	ldr	x0, [x19, #40]
    1108:	add	x2, x0, #0x1
    110c:	str	x2, [x19, #40]
    1110:	strb	w4, [x1, x0]
    1114:	ldr	x2, [x19, #16]
    1118:	ldr	x1, [x19, #40]
    111c:	ldrh	w0, [x19, #5936]
    1120:	add	x4, x1, #0x1
    1124:	str	x4, [x19, #40]
    1128:	lsr	w0, w0, #8
    112c:	strb	w0, [x2, x1]
    1130:	mov	w1, #0x10                  	// #16
    1134:	ldr	w0, [x19, #5940]
    1138:	sub	w1, w1, w0
    113c:	sub	w0, w0, #0xd
    1140:	str	w0, [x19, #5940]
    1144:	asr	w3, w3, w1
    1148:	strh	w3, [x19, #5936]
    114c:	mov	x0, x19
    1150:	bl	f84 <bi_windup>
    1154:	ldr	x2, [x19, #16]
    1158:	ldr	x1, [x19, #40]
    115c:	add	x0, x1, #0x1
    1160:	str	x0, [x19, #40]
    1164:	and	w0, w20, #0xff
    1168:	strb	w0, [x2, x1]
    116c:	mvn	w0, w0
    1170:	ldr	x2, [x19, #16]
    1174:	ldr	x1, [x19, #40]
    1178:	add	x3, x1, #0x1
    117c:	str	x3, [x19, #40]
    1180:	ubfx	w3, w20, #8, #8
    1184:	strb	w3, [x2, x1]
    1188:	ldr	x2, [x19, #16]
    118c:	ldr	x1, [x19, #40]
    1190:	add	x3, x1, #0x1
    1194:	str	x3, [x19, #40]
    1198:	strb	w0, [x2, x1]
    119c:	ldr	x1, [x19, #40]
    11a0:	ldr	x2, [x19, #16]
    11a4:	add	x0, x1, #0x1
    11a8:	str	x0, [x19, #40]
    11ac:	mvn	w0, w20
    11b0:	ubfx	x0, x0, #8, #8
    11b4:	strb	w0, [x2, x1]
    11b8:	mov	x2, x20
    11bc:	mov	x1, x5
    11c0:	ldr	x3, [x19, #16]
    11c4:	ldr	x0, [x19, #40]
    11c8:	add	x0, x3, x0
    11cc:	bl	0 <memcpy>
    11d0:	ldr	x2, [x19, #40]
    11d4:	add	x2, x2, x20
    11d8:	str	x2, [x19, #40]
    11dc:	ldp	x19, x20, [sp, #16]
    11e0:	ldp	x29, x30, [sp], #32
    11e4:	ret
    11e8:	add	w2, w2, #0x3
    11ec:	str	w2, [x19, #5940]
    11f0:	b	114c <_tr_stored_block+0x8c>

00000000000011f4 <_tr_flush_bits>:
    11f4:	b	ff4 <bi_flush>

00000000000011f8 <_tr_align>:
    11f8:	ldr	w2, [x0, #5940]
    11fc:	mov	w3, #0x2                   	// #2
    1200:	ldrh	w4, [x0, #5936]
    1204:	cmp	w2, #0xd
    1208:	lsl	w1, w3, w2
    120c:	orr	w1, w1, w4
    1210:	sxth	w4, w1
    1214:	and	w1, w1, #0xffff
    1218:	strh	w1, [x0, #5936]
    121c:	b.le	12c0 <_tr_align+0xc8>
    1220:	ldr	x2, [x0, #16]
    1224:	ldr	x1, [x0, #40]
    1228:	add	x5, x1, #0x1
    122c:	str	x5, [x0, #40]
    1230:	strb	w4, [x2, x1]
    1234:	ldr	x4, [x0, #16]
    1238:	ldr	x2, [x0, #40]
    123c:	ldrh	w1, [x0, #5936]
    1240:	add	x5, x2, #0x1
    1244:	str	x5, [x0, #40]
    1248:	lsr	w1, w1, #8
    124c:	strb	w1, [x4, x2]
    1250:	mov	w2, #0x10                  	// #16
    1254:	ldr	w1, [x0, #5940]
    1258:	sub	w2, w2, w1
    125c:	sub	w1, w1, #0xd
    1260:	str	w1, [x0, #5940]
    1264:	asr	w3, w3, w2
    1268:	strh	w3, [x0, #5936]
    126c:	ldr	w1, [x0, #5940]
    1270:	cmp	w1, #0x9
    1274:	b.le	12cc <_tr_align+0xd4>
    1278:	ldr	x2, [x0, #16]
    127c:	ldr	x1, [x0, #40]
    1280:	ldrh	w3, [x0, #5936]
    1284:	add	x4, x1, #0x1
    1288:	str	x4, [x0, #40]
    128c:	strb	w3, [x2, x1]
    1290:	ldr	x3, [x0, #16]
    1294:	ldr	x2, [x0, #40]
    1298:	ldrh	w1, [x0, #5936]
    129c:	add	x4, x2, #0x1
    12a0:	str	x4, [x0, #40]
    12a4:	lsr	w1, w1, #8
    12a8:	strb	w1, [x3, x2]
    12ac:	strh	wzr, [x0, #5936]
    12b0:	ldr	w1, [x0, #5940]
    12b4:	sub	w1, w1, #0x9
    12b8:	str	w1, [x0, #5940]
    12bc:	b	ff4 <bi_flush>
    12c0:	add	w2, w2, #0x3
    12c4:	str	w2, [x0, #5940]
    12c8:	b	126c <_tr_align+0x74>
    12cc:	add	w1, w1, #0x7
    12d0:	b	12b8 <_tr_align+0xc0>

00000000000012d4 <_tr_flush_block>:
    12d4:	stp	x29, x30, [sp, #-64]!
    12d8:	mov	x29, sp
    12dc:	stp	x19, x20, [sp, #16]
    12e0:	mov	x19, x0
    12e4:	ldr	w0, [x0, #196]
    12e8:	stp	x21, x22, [sp, #32]
    12ec:	mov	w20, w3
    12f0:	mov	x22, x1
    12f4:	str	x23, [sp, #48]
    12f8:	mov	x21, x2
    12fc:	cmp	w0, #0x0
    1300:	b.le	146c <_tr_flush_block+0x198>
    1304:	mov	x23, x19
    1308:	ldr	x3, [x23], #212
    130c:	ldr	w0, [x3, #88]
    1310:	cmp	w0, #0x2
    1314:	b.ne	1378 <_tr_flush_block+0xa4>  // b.any
    1318:	mov	x2, #0xc07f                	// #49279
    131c:	mov	x1, x23
    1320:	add	x0, x19, #0x154
    1324:	movk	x2, #0xf3ff, lsl #16
    1328:	tbz	w2, #0, 1334 <_tr_flush_block+0x60>
    132c:	ldrh	w4, [x1]
    1330:	cbnz	w4, 1370 <_tr_flush_block+0x9c>
    1334:	add	x1, x1, #0x4
    1338:	lsr	x2, x2, #1
    133c:	cmp	x0, x1
    1340:	b.ne	1328 <_tr_flush_block+0x54>  // b.any
    1344:	ldr	x1, [x19, #248]
    1348:	tst	x1, #0xffff0000ffff
    134c:	b.ne	1464 <_tr_flush_block+0x190>  // b.any
    1350:	ldrh	w1, [x19, #264]
    1354:	cbnz	w1, 1464 <_tr_flush_block+0x190>
    1358:	add	x1, x19, #0x4d4
    135c:	ldrh	w2, [x0]
    1360:	cbnz	w2, 1464 <_tr_flush_block+0x190>
    1364:	add	x0, x0, #0x4
    1368:	cmp	x1, x0
    136c:	b.ne	135c <_tr_flush_block+0x88>  // b.any
    1370:	mov	w0, #0x0                   	// #0
    1374:	str	w0, [x3, #88]
    1378:	add	x1, x19, #0xb58
    137c:	mov	x0, x19
    1380:	bl	b40 <build_tree>
    1384:	add	x1, x19, #0xb70
    1388:	mov	x0, x19
    138c:	bl	b40 <build_tree>
    1390:	ldr	w2, [x19, #2912]
    1394:	mov	x0, x19
    1398:	mov	x1, x23
    139c:	bl	134 <scan_tree>
    13a0:	ldr	w2, [x19, #2936]
    13a4:	add	x1, x19, #0x9c8
    13a8:	bl	134 <scan_tree>
    13ac:	add	x1, x19, #0xb88
    13b0:	bl	b40 <build_tree>
    13b4:	adrp	x2, 0 <init_block>
    13b8:	add	x2, x2, #0x0
    13bc:	add	x2, x2, #0x538
    13c0:	mov	x0, #0x12                  	// #18
    13c4:	ldrb	w1, [x2, x0]
    13c8:	mov	w4, w0
    13cc:	add	x1, x19, x1, lsl #2
    13d0:	ldrh	w1, [x1, #2750]
    13d4:	cbnz	w1, 13e8 <_tr_flush_block+0x114>
    13d8:	sub	x0, x0, #0x1
    13dc:	cmp	x0, #0x2
    13e0:	b.ne	13c4 <_tr_flush_block+0xf0>  // b.any
    13e4:	mov	w4, w0
    13e8:	sxtw	x0, w4
    13ec:	ldr	x1, [x19, #5912]
    13f0:	add	x0, x0, #0x1
    13f4:	ldr	x5, [x19, #5920]
    13f8:	add	x0, x0, x0, lsl #1
    13fc:	add	x1, x1, #0xe
    1400:	add	x0, x0, x1
    1404:	add	x5, x5, #0xa
    1408:	str	x0, [x19, #5912]
    140c:	add	x0, x0, #0xa
    1410:	lsr	x5, x5, #3
    1414:	lsr	x0, x0, #3
    1418:	cmp	x0, x5
    141c:	csel	x0, x0, x5, ls  // ls = plast
    1420:	add	x1, x21, #0x4
    1424:	cmp	x1, x0
    1428:	b.hi	147c <_tr_flush_block+0x1a8>  // b.pmore
    142c:	cbz	x22, 147c <_tr_flush_block+0x1a8>
    1430:	mov	w3, w20
    1434:	mov	x2, x21
    1438:	mov	x1, x22
    143c:	mov	x0, x19
    1440:	bl	10c0 <_tr_stored_block>
    1444:	mov	x0, x19
    1448:	bl	0 <init_block>
    144c:	cbz	w20, 1844 <_tr_flush_block+0x570>
    1450:	ldp	x19, x20, [sp, #16]
    1454:	ldp	x21, x22, [sp, #32]
    1458:	ldr	x23, [sp, #48]
    145c:	ldp	x29, x30, [sp], #64
    1460:	b	f84 <bi_windup>
    1464:	mov	w0, #0x1                   	// #1
    1468:	b	1374 <_tr_flush_block+0xa0>
    146c:	add	x0, x2, #0x5
    1470:	mov	w4, #0x0                   	// #0
    1474:	mov	x5, x0
    1478:	b	1420 <_tr_flush_block+0x14c>
    147c:	ldr	w1, [x19, #200]
    1480:	ldrsh	w2, [x19, #5936]
    1484:	cmp	w1, #0x4
    1488:	ldr	w3, [x19, #5940]
    148c:	adrp	x1, 0 <init_block>
    1490:	add	x1, x1, #0x0
    1494:	b.eq	14a0 <_tr_flush_block+0x1cc>  // b.none
    1498:	cmp	x0, x5
    149c:	b.ne	153c <_tr_flush_block+0x268>  // b.any
    14a0:	cmp	w3, #0xd
    14a4:	add	w0, w20, #0x2
    14a8:	b.le	1520 <_tr_flush_block+0x24c>
    14ac:	and	w0, w0, #0xffff
    14b0:	ldr	x4, [x19, #16]
    14b4:	lsl	w3, w0, w3
    14b8:	orr	w2, w2, w3
    14bc:	ldr	x3, [x19, #40]
    14c0:	sxth	w2, w2
    14c4:	strh	w2, [x19, #5936]
    14c8:	add	x5, x3, #0x1
    14cc:	str	x5, [x19, #40]
    14d0:	strb	w2, [x4, x3]
    14d4:	ldr	x4, [x19, #16]
    14d8:	ldr	x3, [x19, #40]
    14dc:	ldrh	w2, [x19, #5936]
    14e0:	add	x5, x3, #0x1
    14e4:	str	x5, [x19, #40]
    14e8:	lsr	w2, w2, #8
    14ec:	strb	w2, [x4, x3]
    14f0:	mov	w3, #0x10                  	// #16
    14f4:	ldr	w2, [x19, #5940]
    14f8:	sub	w3, w3, w2
    14fc:	sub	w2, w2, #0xd
    1500:	str	w2, [x19, #5940]
    1504:	asr	w0, w0, w3
    1508:	strh	w0, [x19, #5936]
    150c:	add	x2, x1, #0x54c
    1510:	add	x1, x1, #0x5c4
    1514:	mov	x0, x19
    1518:	bl	768 <compress_block>
    151c:	b	1444 <_tr_flush_block+0x170>
    1520:	and	w0, w0, #0xffff
    1524:	lsl	w0, w0, w3
    1528:	add	w3, w3, #0x3
    152c:	orr	w2, w2, w0
    1530:	strh	w2, [x19, #5936]
    1534:	str	w3, [x19, #5940]
    1538:	b	150c <_tr_flush_block+0x238>
    153c:	cmp	w3, #0xd
    1540:	add	w0, w20, #0x4
    1544:	b.le	17c8 <_tr_flush_block+0x4f4>
    1548:	and	w0, w0, #0xffff
    154c:	ldr	x5, [x19, #16]
    1550:	lsl	w3, w0, w3
    1554:	orr	w2, w2, w3
    1558:	ldr	x3, [x19, #40]
    155c:	sxth	w2, w2
    1560:	strh	w2, [x19, #5936]
    1564:	add	x6, x3, #0x1
    1568:	str	x6, [x19, #40]
    156c:	strb	w2, [x5, x3]
    1570:	ldr	x5, [x19, #16]
    1574:	ldr	x3, [x19, #40]
    1578:	ldrh	w2, [x19, #5936]
    157c:	add	x6, x3, #0x1
    1580:	str	x6, [x19, #40]
    1584:	lsr	w2, w2, #8
    1588:	strb	w2, [x5, x3]
    158c:	mov	w3, #0x10                  	// #16
    1590:	ldr	w2, [x19, #5940]
    1594:	sub	w3, w3, w2
    1598:	sub	w2, w2, #0xd
    159c:	str	w2, [x19, #5940]
    15a0:	asr	w0, w0, w3
    15a4:	strh	w0, [x19, #5936]
    15a8:	ldr	w2, [x19, #2912]
    15ac:	ldr	w3, [x19, #5940]
    15b0:	ldrsh	w0, [x19, #5936]
    15b4:	sub	w5, w2, #0x100
    15b8:	ldr	w15, [x19, #2936]
    15bc:	cmp	w3, #0xb
    15c0:	b.le	17e4 <_tr_flush_block+0x510>
    15c4:	and	w5, w5, #0xffff
    15c8:	ldr	x6, [x19, #16]
    15cc:	lsl	w3, w5, w3
    15d0:	orr	w0, w0, w3
    15d4:	ldr	x3, [x19, #40]
    15d8:	sxth	w0, w0
    15dc:	strh	w0, [x19, #5936]
    15e0:	add	x7, x3, #0x1
    15e4:	str	x7, [x19, #40]
    15e8:	strb	w0, [x6, x3]
    15ec:	ldr	x6, [x19, #16]
    15f0:	ldr	x3, [x19, #40]
    15f4:	ldrh	w0, [x19, #5936]
    15f8:	add	x7, x3, #0x1
    15fc:	str	x7, [x19, #40]
    1600:	lsr	w0, w0, #8
    1604:	strb	w0, [x6, x3]
    1608:	mov	w3, #0x10                  	// #16
    160c:	ldr	w0, [x19, #5940]
    1610:	sub	w3, w3, w0
    1614:	sub	w0, w0, #0xb
    1618:	str	w0, [x19, #5940]
    161c:	asr	w5, w5, w3
    1620:	strh	w5, [x19, #5936]
    1624:	ldr	w3, [x19, #5940]
    1628:	ldrsh	w0, [x19, #5936]
    162c:	cmp	w3, #0xb
    1630:	b.le	1800 <_tr_flush_block+0x52c>
    1634:	and	w5, w15, #0xffff
    1638:	ldr	x6, [x19, #16]
    163c:	lsl	w3, w5, w3
    1640:	orr	w0, w0, w3
    1644:	ldr	x3, [x19, #40]
    1648:	sxth	w0, w0
    164c:	strh	w0, [x19, #5936]
    1650:	add	x7, x3, #0x1
    1654:	str	x7, [x19, #40]
    1658:	strb	w0, [x6, x3]
    165c:	ldr	x6, [x19, #16]
    1660:	ldr	x3, [x19, #40]
    1664:	ldrh	w0, [x19, #5936]
    1668:	add	x7, x3, #0x1
    166c:	str	x7, [x19, #40]
    1670:	lsr	w0, w0, #8
    1674:	strb	w0, [x6, x3]
    1678:	mov	w3, #0x10                  	// #16
    167c:	ldr	w0, [x19, #5940]
    1680:	sub	w3, w3, w0
    1684:	sub	w0, w0, #0xb
    1688:	str	w0, [x19, #5940]
    168c:	asr	w5, w5, w3
    1690:	strh	w5, [x19, #5936]
    1694:	ldr	w3, [x19, #5940]
    1698:	sub	w5, w4, #0x3
    169c:	ldrsh	w0, [x19, #5936]
    16a0:	cmp	w3, #0xc
    16a4:	b.le	181c <_tr_flush_block+0x548>
    16a8:	and	w5, w5, #0xffff
    16ac:	ldr	x6, [x19, #16]
    16b0:	lsl	w3, w5, w3
    16b4:	orr	w0, w0, w3
    16b8:	ldr	x3, [x19, #40]
    16bc:	sxth	w0, w0
    16c0:	strh	w0, [x19, #5936]
    16c4:	add	x7, x3, #0x1
    16c8:	str	x7, [x19, #40]
    16cc:	strb	w0, [x6, x3]
    16d0:	ldr	x6, [x19, #16]
    16d4:	ldr	x3, [x19, #40]
    16d8:	ldrh	w0, [x19, #5936]
    16dc:	add	x7, x3, #0x1
    16e0:	str	x7, [x19, #40]
    16e4:	lsr	w0, w0, #8
    16e8:	strb	w0, [x6, x3]
    16ec:	mov	w3, #0x10                  	// #16
    16f0:	ldr	w0, [x19, #5940]
    16f4:	sub	w3, w3, w0
    16f8:	sub	w0, w0, #0xc
    16fc:	str	w0, [x19, #5940]
    1700:	asr	w5, w5, w3
    1704:	strh	w5, [x19, #5936]
    1708:	add	x1, x1, #0x538
    170c:	mov	x5, #0x0                   	// #0
    1710:	mov	w7, #0x10                  	// #16
    1714:	ldrb	w0, [x1, x5]
    1718:	ldr	w3, [x19, #5940]
    171c:	ldrh	w8, [x19, #5936]
    1720:	add	x0, x19, x0, lsl #2
    1724:	cmp	w3, #0xd
    1728:	ldrh	w6, [x0, #2750]
    172c:	lsl	w0, w6, w3
    1730:	orr	w0, w0, w8
    1734:	sxth	w8, w0
    1738:	and	w0, w0, #0xffff
    173c:	strh	w0, [x19, #5936]
    1740:	b.le	1838 <_tr_flush_block+0x564>
    1744:	ldr	x3, [x19, #16]
    1748:	ldr	x0, [x19, #40]
    174c:	add	x9, x0, #0x1
    1750:	str	x9, [x19, #40]
    1754:	strb	w8, [x3, x0]
    1758:	ldr	x8, [x19, #16]
    175c:	ldr	x3, [x19, #40]
    1760:	ldrh	w0, [x19, #5936]
    1764:	add	x9, x3, #0x1
    1768:	str	x9, [x19, #40]
    176c:	lsr	w0, w0, #8
    1770:	strb	w0, [x8, x3]
    1774:	ldr	w0, [x19, #5940]
    1778:	sub	w3, w7, w0
    177c:	sub	w0, w0, #0xd
    1780:	str	w0, [x19, #5940]
    1784:	asr	w6, w6, w3
    1788:	strh	w6, [x19, #5936]
    178c:	add	x5, x5, #0x1
    1790:	sub	w0, w5, #0x1
    1794:	cmp	w4, w0
    1798:	b.gt	1714 <_tr_flush_block+0x440>
    179c:	add	x18, x19, #0xd4
    17a0:	mov	x0, x19
    17a4:	mov	x1, x18
    17a8:	bl	24c <send_tree>
    17ac:	mov	w2, w15
    17b0:	add	x1, x19, #0x9c8
    17b4:	mov	x15, x1
    17b8:	bl	24c <send_tree>
    17bc:	mov	x2, x15
    17c0:	mov	x1, x18
    17c4:	b	1514 <_tr_flush_block+0x240>
    17c8:	and	w0, w0, #0xffff
    17cc:	lsl	w0, w0, w3
    17d0:	add	w3, w3, #0x3
    17d4:	orr	w2, w2, w0
    17d8:	strh	w2, [x19, #5936]
    17dc:	str	w3, [x19, #5940]
    17e0:	b	15a8 <_tr_flush_block+0x2d4>
    17e4:	and	w5, w5, #0xffff
    17e8:	lsl	w5, w5, w3
    17ec:	add	w3, w3, #0x5
    17f0:	orr	w0, w0, w5
    17f4:	strh	w0, [x19, #5936]
    17f8:	str	w3, [x19, #5940]
    17fc:	b	1624 <_tr_flush_block+0x350>
    1800:	and	w5, w15, #0xffff
    1804:	lsl	w5, w5, w3
    1808:	add	w3, w3, #0x5
    180c:	orr	w0, w0, w5
    1810:	strh	w0, [x19, #5936]
    1814:	str	w3, [x19, #5940]
    1818:	b	1694 <_tr_flush_block+0x3c0>
    181c:	and	w5, w5, #0xffff
    1820:	lsl	w5, w5, w3
    1824:	add	w3, w3, #0x4
    1828:	orr	w0, w0, w5
    182c:	strh	w0, [x19, #5936]
    1830:	str	w3, [x19, #5940]
    1834:	b	1708 <_tr_flush_block+0x434>
    1838:	add	w3, w3, #0x3
    183c:	str	w3, [x19, #5940]
    1840:	b	178c <_tr_flush_block+0x4b8>
    1844:	ldp	x19, x20, [sp, #16]
    1848:	ldp	x21, x22, [sp, #32]
    184c:	ldr	x23, [sp, #48]
    1850:	ldp	x29, x30, [sp], #64
    1854:	ret

0000000000001858 <_tr_tally>:
    1858:	ldr	w3, [x0, #5900]
    185c:	ldr	x4, [x0, #5904]
    1860:	add	w5, w3, #0x1
    1864:	strh	w1, [x4, w3, uxtw #1]
    1868:	ldr	x4, [x0, #5888]
    186c:	str	w5, [x0, #5900]
    1870:	strb	w2, [x4, w3, uxtw]
    1874:	mov	w2, w2
    1878:	cbnz	w1, 18a4 <_tr_tally+0x4c>
    187c:	add	x2, x0, x2, lsl #2
    1880:	ldrh	w1, [x2, #212]
    1884:	add	w1, w1, #0x1
    1888:	strh	w1, [x2, #212]
    188c:	ldr	w1, [x0, #5896]
    1890:	ldr	w0, [x0, #5900]
    1894:	sub	w1, w1, #0x1
    1898:	cmp	w1, w0
    189c:	cset	w0, eq  // eq = none
    18a0:	ret
    18a4:	ldr	w3, [x0, #5928]
    18a8:	sub	w1, w1, #0x1
    18ac:	cmp	w1, #0xff
    18b0:	add	w3, w3, #0x1
    18b4:	str	w3, [x0, #5928]
    18b8:	adrp	x3, 0 <init_block>
    18bc:	add	x3, x3, #0x0
    18c0:	ldrb	w2, [x3, x2]
    18c4:	add	x2, x0, x2, lsl #2
    18c8:	ldrh	w4, [x2, #1240]
    18cc:	add	w4, w4, #0x1
    18d0:	strh	w4, [x2, #1240]
    18d4:	add	x2, x3, #0x1e8
    18d8:	b.hi	18f4 <_tr_tally+0x9c>  // b.pmore
    18dc:	ldrb	w1, [x2, w1, uxtw]
    18e0:	add	x1, x0, w1, sxtw #2
    18e4:	ldrh	w2, [x1, #2504]
    18e8:	add	w2, w2, #0x1
    18ec:	strh	w2, [x1, #2504]
    18f0:	b	188c <_tr_tally+0x34>
    18f4:	lsr	w1, w1, #7
    18f8:	add	w1, w1, #0x100
    18fc:	ldrb	w1, [x2, x1]
    1900:	b	18e0 <_tr_tally+0x88>

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	x0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w1, #0x2                   	// #2
  18:	sub	w0, w1, w0
  1c:	adrp	x1, 0 <zlibVersion>
  20:	add	x1, x1, #0x0
  24:	ldr	x0, [x1, w0, sxtw #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	mul	w0, w1, w2
  30:	b	0 <malloc>

0000000000000034 <zcfree>:
  34:	mov	x0, x1
  38:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x21, x1
  10:	mov	w1, w4
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x19, x2
  1c:	mov	x20, x3
  20:	ldr	x22, [x21]
  24:	str	xzr, [x21]
  28:	adrp	x2, 0 <compress2>
  2c:	mov	w3, #0x70                  	// #112
  30:	add	x2, x2, #0x0
  34:	str	x23, [sp, #48]
  38:	mov	x23, x0
  3c:	add	x0, sp, #0x40
  40:	stp	xzr, xzr, [sp, #128]
  44:	str	xzr, [sp, #144]
  48:	bl	0 <deflateInit_>
  4c:	cbnz	w0, c8 <compress2+0xc8>
  50:	str	x19, [sp, #64]
  54:	str	wzr, [sp, #72]
  58:	str	x23, [sp, #88]
  5c:	mov	x23, #0xffffffff            	// #4294967295
  60:	str	wzr, [sp, #96]
  64:	ldr	w0, [sp, #96]
  68:	cbnz	w0, 7c <compress2+0x7c>
  6c:	cmp	x22, x23
  70:	csel	x0, x22, x23, ls  // ls = plast
  74:	str	w0, [sp, #96]
  78:	sub	x22, x22, x0
  7c:	ldr	w0, [sp, #72]
  80:	cbnz	w0, 94 <compress2+0x94>
  84:	cmp	x20, x23
  88:	csel	x0, x20, x23, ls  // ls = plast
  8c:	str	w0, [sp, #72]
  90:	sub	x20, x20, x0
  94:	cmp	x20, #0x0
  98:	add	x0, sp, #0x40
  9c:	cset	w1, eq  // eq = none
  a0:	lsl	w1, w1, #2
  a4:	bl	0 <deflate>
  a8:	mov	w19, w0
  ac:	cbz	w0, 64 <compress2+0x64>
  b0:	ldr	x0, [sp, #104]
  b4:	str	x0, [x21]
  b8:	add	x0, sp, #0x40
  bc:	bl	0 <deflateEnd>
  c0:	cmp	w19, #0x1
  c4:	csel	w0, wzr, w19, eq  // eq = none
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldr	x23, [sp, #48]
  d4:	ldp	x29, x30, [sp], #176
  d8:	ret

00000000000000dc <compress>:
  dc:	mov	w4, #0xffffffff            	// #-1
  e0:	b	0 <compress2>

00000000000000e4 <compressBound>:
  e4:	lsr	x1, x0, #14
  e8:	add	x2, x0, #0xd
  ec:	add	x1, x1, x0, lsr #12
  f0:	add	x1, x1, x2
  f4:	add	x0, x1, x0, lsr #25
  f8:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x22, x1
  10:	ldr	x21, [x1]
  14:	stp	x19, x20, [sp, #16]
  18:	stp	x23, x24, [sp, #48]
  1c:	mov	x24, x3
  20:	stp	x25, x26, [sp, #64]
  24:	ldr	x25, [x3]
  28:	cbz	x21, 124 <uncompress2+0x124>
  2c:	mov	x23, x0
  30:	str	xzr, [x1]
  34:	add	x0, sp, #0x60
  38:	adrp	x1, 0 <uncompress2>
  3c:	add	x1, x1, #0x0
  40:	str	x2, [sp, #96]
  44:	mov	w2, #0x70                  	// #112
  48:	str	wzr, [sp, #104]
  4c:	stp	xzr, xzr, [sp, #160]
  50:	str	xzr, [sp, #176]
  54:	bl	0 <inflateInit_>
  58:	mov	w19, w0
  5c:	cbnz	w0, 108 <uncompress2+0x108>
  60:	mov	x26, #0xffffffff            	// #4294967295
  64:	str	x23, [sp, #120]
  68:	str	wzr, [sp, #128]
  6c:	ldr	w0, [sp, #128]
  70:	cbnz	w0, 84 <uncompress2+0x84>
  74:	cmp	x21, x26
  78:	csel	x0, x21, x26, ls  // ls = plast
  7c:	str	w0, [sp, #128]
  80:	sub	x21, x21, x0
  84:	ldr	w0, [sp, #104]
  88:	cbnz	w0, 9c <uncompress2+0x9c>
  8c:	cmp	x25, x26
  90:	csel	x0, x25, x26, ls  // ls = plast
  94:	str	w0, [sp, #104]
  98:	sub	x25, x25, x0
  9c:	add	x0, sp, #0x60
  a0:	mov	w1, #0x0                   	// #0
  a4:	bl	0 <inflate>
  a8:	mov	w20, w0
  ac:	cbz	w0, 6c <uncompress2+0x6c>
  b0:	ldr	x0, [x24]
  b4:	ldr	w1, [sp, #104]
  b8:	sub	x0, x0, x1
  bc:	add	x1, sp, #0x58
  c0:	sub	x0, x0, x25
  c4:	str	x0, [x24]
  c8:	cmp	x23, x1
  cc:	ldr	x0, [sp, #136]
  d0:	b.eq	130 <uncompress2+0x130>  // b.none
  d4:	str	x0, [x22]
  d8:	add	x0, sp, #0x60
  dc:	bl	0 <inflateEnd>
  e0:	cmp	w20, #0x1
  e4:	b.eq	108 <uncompress2+0x108>  // b.none
  e8:	cmp	w20, #0x2
  ec:	b.eq	140 <uncompress2+0x140>  // b.none
  f0:	cmn	w20, #0x5
  f4:	b.ne	148 <uncompress2+0x148>  // b.any
  f8:	ldr	w0, [sp, #128]
  fc:	mov	w19, #0xfffffffd            	// #-3
 100:	cmn	x0, x21
 104:	csel	w19, w19, w20, ne  // ne = any
 108:	mov	w0, w19
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x21, x22, [sp, #32]
 114:	ldp	x23, x24, [sp, #48]
 118:	ldp	x25, x26, [sp, #64]
 11c:	ldp	x29, x30, [sp], #208
 120:	ret
 124:	add	x23, sp, #0x58
 128:	mov	x21, #0x1                   	// #1
 12c:	b	34 <uncompress2+0x34>
 130:	cbz	x0, d8 <uncompress2+0xd8>
 134:	cmn	w20, #0x5
 138:	csinc	x21, x21, xzr, ne  // ne = any
 13c:	b	d8 <uncompress2+0xd8>
 140:	mov	w19, #0xfffffffd            	// #-3
 144:	b	108 <uncompress2+0x108>
 148:	mov	w19, w20
 14c:	b	108 <uncompress2+0x108>

0000000000000150 <uncompress>:
 150:	stp	x29, x30, [sp, #-32]!
 154:	mov	x29, sp
 158:	str	x3, [sp, #24]
 15c:	add	x3, sp, #0x18
 160:	bl	0 <uncompress2>
 164:	ldp	x29, x30, [sp], #32
 168:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 1c <gzclose+0x1c>
   4:	ldr	w2, [x0, #24]
   8:	mov	w1, #0x1c4f                	// #7247
   c:	cmp	w2, w1
  10:	b.ne	18 <gzclose+0x18>  // b.any
  14:	b	0 <gzclose_r>
  18:	b	0 <gzclose_w>
  1c:	mov	w0, #0xfffffffe            	// #-2
  20:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzbuffer>:
   0:	cbz	x0, 44 <gzbuffer+0x44>
   4:	ldr	w2, [x0, #24]
   8:	mov	w3, #0x1c4f                	// #7247
   c:	cmp	w2, w3
  10:	mov	w3, #0x79b1                	// #31153
  14:	ccmp	w2, w3, #0x4, ne  // ne = any
  18:	b.ne	44 <gzbuffer+0x44>  // b.any
  1c:	ldr	w2, [x0, #40]
  20:	cbnz	w2, 44 <gzbuffer+0x44>
  24:	cmp	w1, w1, lsl #1
  28:	b.hi	44 <gzbuffer+0x44>  // b.pmore
  2c:	cmp	w1, #0x2
  30:	mov	w2, #0x2                   	// #2
  34:	csel	w1, w1, w2, cs  // cs = hs, nlast
  38:	str	w1, [x0, #44]
  3c:	mov	w0, #0x0                   	// #0
  40:	ret
  44:	mov	w0, #0xffffffff            	// #-1
  48:	b	40 <gzbuffer+0x40>

000000000000004c <gztell64>:
  4c:	cbz	x0, 88 <gztell64+0x3c>
  50:	ldr	w1, [x0, #24]
  54:	mov	w2, #0x1c4f                	// #7247
  58:	cmp	w1, w2
  5c:	mov	w2, #0x79b1                	// #31153
  60:	ccmp	w1, w2, #0x4, ne  // ne = any
  64:	b.ne	88 <gztell64+0x3c>  // b.any
  68:	ldr	w2, [x0, #104]
  6c:	ldr	x1, [x0, #16]
  70:	cbz	w2, 80 <gztell64+0x34>
  74:	ldr	x0, [x0, #96]
  78:	add	x0, x1, x0
  7c:	ret
  80:	mov	x0, #0x0                   	// #0
  84:	b	78 <gztell64+0x2c>
  88:	mov	x0, #0xffffffffffffffff    	// #-1
  8c:	b	7c <gztell64+0x30>

0000000000000090 <gztell>:
  90:	b	4c <gztell64>

0000000000000094 <gzoffset64>:
  94:	cbnz	x0, b0 <gzoffset64+0x1c>
  98:	mov	x0, #0xffffffffffffffff    	// #-1
  9c:	ret
  a0:	mov	x0, #0xffffffffffffffff    	// #-1
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	w1, #0x79b1                	// #31153
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x19, x0
  c4:	ldr	w0, [x0, #24]
  c8:	mov	w20, #0x1c4f                	// #7247
  cc:	cmp	w0, w20
  d0:	ccmp	w0, w1, #0x4, ne  // ne = any
  d4:	b.ne	a0 <gzoffset64+0xc>  // b.any
  d8:	ldr	w0, [x19, #28]
  dc:	mov	w2, #0x1                   	// #1
  e0:	mov	x1, #0x0                   	// #0
  e4:	bl	0 <lseek64>
  e8:	cmn	x0, #0x1
  ec:	b.eq	a0 <gzoffset64+0xc>  // b.none
  f0:	ldr	w1, [x19, #24]
  f4:	cmp	w1, w20
  f8:	b.ne	a4 <gzoffset64+0x10>  // b.any
  fc:	ldr	w1, [x19, #128]
 100:	sub	x0, x0, x1
 104:	b	a4 <gzoffset64+0x10>

0000000000000108 <gzoffset>:
 108:	b	94 <gzoffset64>

000000000000010c <gzeof>:
 10c:	cbz	x0, 128 <gzeof+0x1c>
 110:	ldr	w2, [x0, #24]
 114:	mov	w1, #0x1c4f                	// #7247
 118:	cmp	w2, w1
 11c:	b.ne	128 <gzeof+0x1c>  // b.any
 120:	ldr	w0, [x0, #84]
 124:	ret
 128:	mov	w0, #0x0                   	// #0
 12c:	b	124 <gzeof+0x18>

0000000000000130 <gzerror>:
 130:	cbz	x0, 17c <gzerror+0x4c>
 134:	ldr	w2, [x0, #24]
 138:	mov	w3, #0x1c4f                	// #7247
 13c:	cmp	w2, w3
 140:	mov	w3, #0x79b1                	// #31153
 144:	ccmp	w2, w3, #0x4, ne  // ne = any
 148:	b.ne	178 <gzerror+0x48>  // b.any
 14c:	cbz	x1, 158 <gzerror+0x28>
 150:	ldr	w2, [x0, #108]
 154:	str	w2, [x1]
 158:	ldr	w1, [x0, #108]
 15c:	cmn	w1, #0x4
 160:	b.eq	180 <gzerror+0x50>  // b.none
 164:	ldr	x0, [x0, #112]
 168:	cbnz	x0, 17c <gzerror+0x4c>
 16c:	adrp	x0, 0 <gzbuffer>
 170:	add	x0, x0, #0x0
 174:	b	17c <gzerror+0x4c>
 178:	mov	x0, #0x0                   	// #0
 17c:	ret
 180:	adrp	x0, 0 <gzbuffer>
 184:	add	x0, x0, #0x0
 188:	b	17c <gzerror+0x4c>

000000000000018c <gz_error>:
 18c:	stp	x29, x30, [sp, #-48]!
 190:	mov	x29, sp
 194:	stp	x19, x20, [sp, #16]
 198:	mov	x19, x0
 19c:	mov	x20, x2
 1a0:	ldr	x0, [x0, #112]
 1a4:	stp	x21, x22, [sp, #32]
 1a8:	mov	w21, w1
 1ac:	cbz	x0, 1c4 <gz_error+0x38>
 1b0:	ldr	w1, [x19, #108]
 1b4:	cmn	w1, #0x4
 1b8:	b.eq	1c0 <gz_error+0x34>  // b.none
 1bc:	bl	0 <free>
 1c0:	str	xzr, [x19, #112]
 1c4:	cmp	w21, #0x0
 1c8:	ccmn	w21, #0x5, #0x4, ne  // ne = any
 1cc:	b.eq	1d4 <gz_error+0x48>  // b.none
 1d0:	str	wzr, [x19]
 1d4:	str	w21, [x19, #108]
 1d8:	cbz	x20, 21c <gz_error+0x90>
 1dc:	cmn	w21, #0x4
 1e0:	b.eq	21c <gz_error+0x90>  // b.none
 1e4:	ldr	x22, [x19, #32]
 1e8:	mov	x0, x22
 1ec:	bl	0 <strlen>
 1f0:	mov	x21, x0
 1f4:	mov	x0, x20
 1f8:	bl	0 <strlen>
 1fc:	add	x0, x21, x0
 200:	add	x0, x0, #0x3
 204:	bl	0 <malloc>
 208:	str	x0, [x19, #112]
 20c:	mov	x21, x0
 210:	cbnz	x0, 22c <gz_error+0xa0>
 214:	mov	w0, #0xfffffffc            	// #-4
 218:	str	w0, [x19, #108]
 21c:	ldp	x19, x20, [sp, #16]
 220:	ldp	x21, x22, [sp, #32]
 224:	ldp	x29, x30, [sp], #48
 228:	ret
 22c:	mov	x0, x22
 230:	bl	0 <strlen>
 234:	mov	x19, x0
 238:	mov	x0, x20
 23c:	bl	0 <strlen>
 240:	add	x1, x19, x0
 244:	mov	x5, x20
 248:	mov	x3, x22
 24c:	mov	x0, x21
 250:	add	x1, x1, #0x3
 254:	ldp	x19, x20, [sp, #16]
 258:	adrp	x4, 0 <gzbuffer>
 25c:	ldp	x21, x22, [sp, #32]
 260:	add	x4, x4, #0x0
 264:	ldp	x29, x30, [sp], #48
 268:	adrp	x2, 0 <gzbuffer>
 26c:	add	x2, x2, #0x0
 270:	b	0 <snprintf>

0000000000000274 <gz_open>:
 274:	stp	x29, x30, [sp, #-64]!
 278:	mov	x29, sp
 27c:	stp	x19, x20, [sp, #16]
 280:	stp	x21, x22, [sp, #32]
 284:	stp	x23, x24, [sp, #48]
 288:	cbnz	x0, 2a8 <gz_open+0x34>
 28c:	mov	x19, #0x0                   	// #0
 290:	mov	x0, x19
 294:	ldp	x19, x20, [sp, #16]
 298:	ldp	x21, x22, [sp, #32]
 29c:	ldp	x23, x24, [sp, #48]
 2a0:	ldp	x29, x30, [sp], #64
 2a4:	ret
 2a8:	mov	x21, x0
 2ac:	mov	w20, w1
 2b0:	mov	x23, x2
 2b4:	mov	x0, #0xe8                  	// #232
 2b8:	bl	0 <malloc>
 2bc:	mov	x19, x0
 2c0:	cbz	x0, 28c <gz_open+0x18>
 2c4:	mov	x0, #0x200000000000        	// #35184372088832
 2c8:	adrp	x1, 0 <gzbuffer>
 2cc:	add	x1, x1, #0x0
 2d0:	str	x0, [x19, #40]
 2d4:	mov	x0, #0xffffffff            	// #4294967295
 2d8:	mov	w24, #0x0                   	// #0
 2dc:	mov	w22, #0x0                   	// #0
 2e0:	mov	w3, #0x79b1                	// #31153
 2e4:	mov	w5, #0x1c4f                	// #7247
 2e8:	mov	w6, #0x2                   	// #2
 2ec:	mov	w7, #0x3                   	// #3
 2f0:	mov	w8, #0x4                   	// #4
 2f4:	str	wzr, [x19, #24]
 2f8:	str	wzr, [x19, #64]
 2fc:	str	x0, [x19, #88]
 300:	mov	w0, #0x1                   	// #1
 304:	str	xzr, [x19, #112]
 308:	ldrb	w4, [x23]
 30c:	cbnz	w4, 324 <gz_open+0xb0>
 310:	ldr	w0, [x19, #24]
 314:	cbnz	w0, 3f8 <gz_open+0x184>
 318:	mov	x0, x19
 31c:	bl	0 <free>
 320:	b	28c <gz_open+0x18>
 324:	sub	w2, w4, #0x30
 328:	and	w9, w2, #0xff
 32c:	cmp	w9, #0x9
 330:	b.hi	340 <gz_open+0xcc>  // b.pmore
 334:	str	w2, [x19, #88]
 338:	add	x23, x23, #0x1
 33c:	b	308 <gz_open+0x94>
 340:	cmp	w4, #0x68
 344:	b.hi	3a8 <gz_open+0x134>  // b.pmore
 348:	cmp	w4, #0x60
 34c:	b.hi	374 <gz_open+0x100>  // b.pmore
 350:	cmp	w4, #0x52
 354:	b.eq	3e8 <gz_open+0x174>  // b.none
 358:	b.hi	398 <gz_open+0x124>  // b.pmore
 35c:	cmp	w4, #0x2b
 360:	b.eq	318 <gz_open+0xa4>  // b.none
 364:	cmp	w4, #0x46
 368:	b.ne	338 <gz_open+0xc4>  // b.any
 36c:	str	w8, [x19, #92]
 370:	b	338 <gz_open+0xc4>
 374:	sub	w4, w4, #0x61
 378:	cmp	w4, #0x7
 37c:	b.hi	338 <gz_open+0xc4>  // b.pmore
 380:	ldrb	w2, [x1, w4, uxtw]
 384:	adr	x4, 390 <gz_open+0x11c>
 388:	add	x2, x4, w2, sxtb #2
 38c:	br	x2
 390:	mov	w22, #0x1                   	// #1
 394:	b	338 <gz_open+0xc4>
 398:	cmp	w4, #0x54
 39c:	b.ne	338 <gz_open+0xc4>  // b.any
 3a0:	str	w0, [x19, #64]
 3a4:	b	338 <gz_open+0xc4>
 3a8:	cmp	w4, #0x77
 3ac:	b.eq	3c8 <gz_open+0x154>  // b.none
 3b0:	cmp	w4, #0x78
 3b4:	b.eq	3f0 <gz_open+0x17c>  // b.none
 3b8:	cmp	w4, #0x72
 3bc:	b.ne	338 <gz_open+0xc4>  // b.any
 3c0:	str	w5, [x19, #24]
 3c4:	b	338 <gz_open+0xc4>
 3c8:	str	w3, [x19, #24]
 3cc:	b	338 <gz_open+0xc4>
 3d0:	str	w0, [x19, #24]
 3d4:	b	338 <gz_open+0xc4>
 3d8:	str	w0, [x19, #92]
 3dc:	b	338 <gz_open+0xc4>
 3e0:	str	w6, [x19, #92]
 3e4:	b	338 <gz_open+0xc4>
 3e8:	str	w7, [x19, #92]
 3ec:	b	338 <gz_open+0xc4>
 3f0:	mov	w24, #0x1                   	// #1
 3f4:	b	338 <gz_open+0xc4>
 3f8:	mov	w1, #0x1c4f                	// #7247
 3fc:	cmp	w0, w1
 400:	b.ne	414 <gz_open+0x1a0>  // b.any
 404:	ldr	w0, [x19, #64]
 408:	cbnz	w0, 318 <gz_open+0xa4>
 40c:	mov	w0, #0x1                   	// #1
 410:	str	w0, [x19, #64]
 414:	mov	x0, x21
 418:	bl	0 <strlen>
 41c:	add	x23, x0, #0x1
 420:	mov	x0, x23
 424:	bl	0 <malloc>
 428:	str	x0, [x19, #32]
 42c:	cbz	x0, 318 <gz_open+0xa4>
 430:	mov	x1, x23
 434:	mov	x3, x21
 438:	adrp	x2, 0 <gzbuffer>
 43c:	add	x2, x2, #0x0
 440:	bl	0 <snprintf>
 444:	cmp	w22, #0x0
 448:	mov	w0, #0x80000               	// #524288
 44c:	csel	w22, w22, w0, eq  // eq = none
 450:	ldr	w0, [x19, #24]
 454:	mov	w1, #0x1c4f                	// #7247
 458:	cmp	w0, w1
 45c:	b.eq	4b8 <gz_open+0x244>  // b.none
 460:	cmp	w24, #0x0
 464:	mov	w2, #0x41                  	// #65
 468:	mov	w1, #0xc1                  	// #193
 46c:	csel	w1, w1, w2, ne  // ne = any
 470:	mov	w2, #0x79b1                	// #31153
 474:	cmp	w0, w2
 478:	mov	w0, #0x200                 	// #512
 47c:	mov	w2, #0x400                 	// #1024
 480:	csel	w0, w0, w2, eq  // eq = none
 484:	orr	w1, w1, w0
 488:	tbz	w20, #31, 4a0 <gz_open+0x22c>
 48c:	orr	w1, w22, w1
 490:	mov	x0, x21
 494:	mov	w2, #0x1b6                 	// #438
 498:	bl	0 <open>
 49c:	mov	w20, w0
 4a0:	str	w20, [x19, #28]
 4a4:	cmn	w20, #0x1
 4a8:	b.ne	4c0 <gz_open+0x24c>  // b.any
 4ac:	ldr	x0, [x19, #32]
 4b0:	bl	0 <free>
 4b4:	b	318 <gz_open+0xa4>
 4b8:	mov	w1, #0x0                   	// #0
 4bc:	b	488 <gz_open+0x214>
 4c0:	ldr	w0, [x19, #24]
 4c4:	cmp	w0, #0x1
 4c8:	b.ne	520 <gz_open+0x2ac>  // b.any
 4cc:	mov	w0, w20
 4d0:	mov	w2, #0x2                   	// #2
 4d4:	mov	x1, #0x0                   	// #0
 4d8:	bl	0 <lseek64>
 4dc:	mov	w0, #0x79b1                	// #31153
 4e0:	str	w0, [x19, #24]
 4e4:	ldr	w1, [x19, #24]
 4e8:	mov	w0, #0x1c4f                	// #7247
 4ec:	str	wzr, [x19]
 4f0:	cmp	w1, w0
 4f4:	b.ne	500 <gz_open+0x28c>  // b.any
 4f8:	str	wzr, [x19, #68]
 4fc:	str	xzr, [x19, #80]
 500:	str	wzr, [x19, #104]
 504:	mov	x0, x19
 508:	mov	x2, #0x0                   	// #0
 50c:	mov	w1, #0x0                   	// #0
 510:	bl	18c <gz_error>
 514:	str	xzr, [x19, #16]
 518:	str	wzr, [x19, #128]
 51c:	b	290 <gz_open+0x1c>
 520:	mov	w1, #0x1c4f                	// #7247
 524:	cmp	w0, w1
 528:	b.ne	4e4 <gz_open+0x270>  // b.any
 52c:	mov	w0, w20
 530:	mov	w2, #0x1                   	// #1
 534:	mov	x1, #0x0                   	// #0
 538:	bl	0 <lseek64>
 53c:	cmn	x0, #0x1
 540:	csel	x0, x0, xzr, ne  // ne = any
 544:	str	x0, [x19, #72]
 548:	b	4e4 <gz_open+0x270>

000000000000054c <gzopen64>:
 54c:	mov	x2, x1
 550:	mov	w1, #0xffffffff            	// #-1
 554:	b	274 <gz_open>

0000000000000558 <gzopen>:
 558:	b	54c <gzopen64>

000000000000055c <gzdopen>:
 55c:	stp	x29, x30, [sp, #-48]!
 560:	cmn	w0, #0x1
 564:	mov	x29, sp
 568:	stp	x19, x20, [sp, #16]
 56c:	str	x21, [sp, #32]
 570:	b.ne	58c <gzdopen+0x30>  // b.any
 574:	mov	x20, #0x0                   	// #0
 578:	mov	x0, x20
 57c:	ldp	x19, x20, [sp, #16]
 580:	ldr	x21, [sp, #32]
 584:	ldp	x29, x30, [sp], #48
 588:	ret
 58c:	mov	w20, w0
 590:	mov	x21, x1
 594:	mov	x0, #0x13                  	// #19
 598:	bl	0 <malloc>
 59c:	mov	x19, x0
 5a0:	cbz	x0, 574 <gzdopen+0x18>
 5a4:	mov	w3, w20
 5a8:	mov	x1, #0x13                  	// #19
 5ac:	adrp	x2, 0 <gzbuffer>
 5b0:	add	x2, x2, #0x0
 5b4:	bl	0 <snprintf>
 5b8:	mov	w1, w20
 5bc:	mov	x2, x21
 5c0:	mov	x0, x19
 5c4:	bl	274 <gz_open>
 5c8:	mov	x20, x0
 5cc:	mov	x0, x19
 5d0:	bl	0 <free>
 5d4:	b	578 <gzdopen+0x1c>

00000000000005d8 <gzclearerr>:
 5d8:	cbz	x0, 60c <gzclearerr+0x34>
 5dc:	ldr	w1, [x0, #24]
 5e0:	mov	w2, #0x1c4f                	// #7247
 5e4:	mov	w3, #0x79b1                	// #31153
 5e8:	cmp	w1, w2
 5ec:	ccmp	w1, w3, #0x4, ne  // ne = any
 5f0:	b.ne	60c <gzclearerr+0x34>  // b.any
 5f4:	cmp	w1, w2
 5f8:	b.ne	600 <gzclearerr+0x28>  // b.any
 5fc:	str	xzr, [x0, #80]
 600:	mov	x2, #0x0                   	// #0
 604:	mov	w1, #0x0                   	// #0
 608:	b	18c <gz_error>
 60c:	ret

0000000000000610 <gzrewind>:
 610:	cbnz	x0, 62c <gzrewind+0x1c>
 614:	mov	w0, #0xffffffff            	// #-1
 618:	ret
 61c:	mov	w0, #0xffffffff            	// #-1
 620:	ldp	x19, x20, [sp, #16]
 624:	ldp	x29, x30, [sp], #32
 628:	ret
 62c:	stp	x29, x30, [sp, #-32]!
 630:	mov	x29, sp
 634:	stp	x19, x20, [sp, #16]
 638:	mov	x19, x0
 63c:	mov	w0, #0x1c4f                	// #7247
 640:	ldr	w20, [x19, #24]
 644:	cmp	w20, w0
 648:	b.ne	61c <gzrewind+0xc>  // b.any
 64c:	ldr	w0, [x19, #108]
 650:	cmp	w0, #0x0
 654:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 658:	b.ne	61c <gzrewind+0xc>  // b.any
 65c:	ldr	w0, [x19, #28]
 660:	mov	w2, #0x0                   	// #0
 664:	ldr	x1, [x19, #72]
 668:	bl	0 <lseek64>
 66c:	cmn	x0, #0x1
 670:	b.eq	61c <gzrewind+0xc>  // b.none
 674:	ldr	w0, [x19, #24]
 678:	str	wzr, [x19]
 67c:	cmp	w0, w20
 680:	b.ne	68c <gzrewind+0x7c>  // b.any
 684:	str	wzr, [x19, #68]
 688:	str	xzr, [x19, #80]
 68c:	str	wzr, [x19, #104]
 690:	mov	x0, x19
 694:	mov	x2, #0x0                   	// #0
 698:	mov	w1, #0x0                   	// #0
 69c:	bl	18c <gz_error>
 6a0:	str	xzr, [x19, #16]
 6a4:	mov	w0, #0x0                   	// #0
 6a8:	str	wzr, [x19, #128]
 6ac:	b	620 <gzrewind+0x10>

00000000000006b0 <gzseek64>:
 6b0:	cbnz	x0, 6bc <gzseek64+0xc>
 6b4:	mov	x0, #0xffffffffffffffff    	// #-1
 6b8:	ret
 6bc:	stp	x29, x30, [sp, #-32]!
 6c0:	mov	x29, sp
 6c4:	stp	x19, x20, [sp, #16]
 6c8:	mov	x19, x0
 6cc:	ldr	w0, [x0, #24]
 6d0:	mov	x20, x1
 6d4:	mov	w1, #0x1c4f                	// #7247
 6d8:	cmp	w0, w1
 6dc:	mov	w1, #0x79b1                	// #31153
 6e0:	ccmp	w0, w1, #0x4, ne  // ne = any
 6e4:	b.ne	80c <gzseek64+0x15c>  // b.any
 6e8:	ldr	w1, [x19, #108]
 6ec:	cmp	w1, #0x0
 6f0:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 6f4:	b.ne	80c <gzseek64+0x15c>  // b.any
 6f8:	cmp	w2, #0x1
 6fc:	b.hi	80c <gzseek64+0x15c>  // b.pmore
 700:	cbnz	w2, 77c <gzseek64+0xcc>
 704:	ldr	x1, [x19, #16]
 708:	sub	x20, x20, x1
 70c:	str	wzr, [x19, #104]
 710:	mov	w1, #0x1c4f                	// #7247
 714:	cmp	w0, w1
 718:	b.ne	808 <gzseek64+0x158>  // b.any
 71c:	ldr	w2, [x19, #68]
 720:	ldr	x0, [x19, #16]
 724:	cmp	w2, #0x1
 728:	b.ne	790 <gzseek64+0xe0>  // b.any
 72c:	cmn	x20, x0
 730:	b.mi	790 <gzseek64+0xe0>  // b.first
 734:	ldr	w0, [x19, #28]
 738:	ldr	w1, [x19]
 73c:	sub	x1, x20, x1
 740:	bl	0 <lseek64>
 744:	cmn	x0, #0x1
 748:	b.eq	80c <gzseek64+0x15c>  // b.none
 74c:	str	wzr, [x19]
 750:	mov	x0, x19
 754:	str	xzr, [x19, #80]
 758:	mov	x2, #0x0                   	// #0
 75c:	str	wzr, [x19, #104]
 760:	mov	w1, #0x0                   	// #0
 764:	bl	18c <gz_error>
 768:	str	wzr, [x19, #128]
 76c:	ldr	x0, [x19, #16]
 770:	add	x0, x20, x0
 774:	str	x0, [x19, #16]
 778:	b	810 <gzseek64+0x160>
 77c:	ldr	w1, [x19, #104]
 780:	cbz	w1, 70c <gzseek64+0x5c>
 784:	ldr	x1, [x19, #96]
 788:	add	x20, x20, x1
 78c:	b	70c <gzseek64+0x5c>
 790:	tbz	x20, #63, 7ac <gzseek64+0xfc>
 794:	adds	x20, x20, x0
 798:	b.mi	80c <gzseek64+0x15c>  // b.first
 79c:	mov	x0, x19
 7a0:	bl	610 <gzrewind>
 7a4:	cmn	w0, #0x1
 7a8:	b.eq	80c <gzseek64+0x15c>  // b.none
 7ac:	ldr	w1, [x19, #24]
 7b0:	mov	w0, #0x1c4f                	// #7247
 7b4:	cmp	w1, w0
 7b8:	b.ne	7ec <gzseek64+0x13c>  // b.any
 7bc:	ldr	w0, [x19]
 7c0:	cmp	x20, w0, uxtw
 7c4:	csel	w1, w0, w20, ge  // ge = tcont
 7c8:	sub	w0, w0, w1
 7cc:	str	w0, [x19]
 7d0:	ldr	x0, [x19, #8]
 7d4:	sub	x20, x20, w1, uxtw
 7d8:	add	x0, x0, w1, uxtw
 7dc:	str	x0, [x19, #8]
 7e0:	ldr	x0, [x19, #16]
 7e4:	add	x0, x0, w1, uxtw
 7e8:	str	x0, [x19, #16]
 7ec:	cbz	x20, 7fc <gzseek64+0x14c>
 7f0:	mov	w0, #0x1                   	// #1
 7f4:	str	x20, [x19, #96]
 7f8:	str	w0, [x19, #104]
 7fc:	ldr	x0, [x19, #16]
 800:	add	x0, x20, x0
 804:	b	810 <gzseek64+0x160>
 808:	tbz	x20, #63, 7ac <gzseek64+0xfc>
 80c:	mov	x0, #0xffffffffffffffff    	// #-1
 810:	ldp	x19, x20, [sp, #16]
 814:	ldp	x29, x30, [sp], #32
 818:	ret

000000000000081c <gzseek>:
 81c:	b	6b0 <gzseek64>

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_load>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x19, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x1
  1c:	mov	w21, w2
  20:	str	wzr, [x3]
  24:	str	x23, [sp, #48]
  28:	mov	w23, #0x40000000            	// #1073741824
  2c:	ldr	w1, [x19]
  30:	ldr	w0, [x20, #28]
  34:	sub	w2, w21, w1
  38:	cmp	w2, w23
  3c:	add	x1, x22, w1, uxtw
  40:	csel	w2, w2, w23, ls  // ls = plast
  44:	bl	0 <read>
  48:	mov	x3, x0
  4c:	cmp	w0, #0x0
  50:	b.le	80 <gz_load+0x80>
  54:	ldr	w0, [x19]
  58:	add	w3, w0, w3
  5c:	str	w3, [x19]
  60:	cmp	w3, w21
  64:	b.cc	2c <gz_load+0x2c>  // b.lo, b.ul, b.last
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldr	x23, [sp, #48]
  78:	ldp	x29, x30, [sp], #64
  7c:	ret
  80:	cbz	w0, a8 <gz_load+0xa8>
  84:	bl	0 <__errno_location>
  88:	ldr	w0, [x0]
  8c:	bl	0 <strerror>
  90:	mov	x2, x0
  94:	mov	w1, #0xffffffff            	// #-1
  98:	mov	x0, x20
  9c:	bl	0 <gz_error>
  a0:	mov	w0, #0xffffffff            	// #-1
  a4:	b	6c <gz_load+0x6c>
  a8:	mov	w1, #0x1                   	// #1
  ac:	str	w1, [x20, #80]
  b0:	b	6c <gz_load+0x6c>

00000000000000b4 <gz_avail>:
  b4:	stp	x29, x30, [sp, #-48]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x19, x0
  c4:	ldr	w0, [x0, #108]
  c8:	cmp	w0, #0x0
  cc:	ccmn	w0, #0x5, #0x4, ne  // ne = any
  d0:	b.ne	160 <gz_avail+0xac>  // b.any
  d4:	ldr	w0, [x19, #80]
  d8:	cbnz	w0, 158 <gz_avail+0xa4>
  dc:	ldr	w1, [x19, #128]
  e0:	add	x20, x19, #0x78
  e4:	cbnz	w1, 11c <gz_avail+0x68>
  e8:	ldr	x1, [x19, #48]
  ec:	add	x3, sp, #0x2c
  f0:	ldr	w0, [x20, #8]
  f4:	ldr	w2, [x19, #40]
  f8:	add	x1, x1, w0, uxtw
  fc:	sub	w2, w2, w0
 100:	mov	x0, x19
 104:	bl	0 <gz_load>
 108:	cmn	w0, #0x1
 10c:	b.ne	140 <gz_avail+0x8c>  // b.any
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x29, x30, [sp], #48
 118:	ret
 11c:	ldr	x2, [x19, #48]
 120:	mov	x0, #0x0                   	// #0
 124:	ldr	x4, [x19, #120]
 128:	ldrb	w3, [x4, x0]
 12c:	strb	w3, [x2, x0]
 130:	add	x0, x0, #0x1
 134:	cmp	w1, w0
 138:	b.ne	128 <gz_avail+0x74>  // b.any
 13c:	b	e8 <gz_avail+0x34>
 140:	ldr	w0, [x20, #8]
 144:	ldr	w1, [sp, #44]
 148:	add	w0, w0, w1
 14c:	str	w0, [x20, #8]
 150:	ldr	x0, [x19, #48]
 154:	str	x0, [x19, #120]
 158:	mov	w0, #0x0                   	// #0
 15c:	b	110 <gz_avail+0x5c>
 160:	mov	w0, #0xffffffff            	// #-1
 164:	b	110 <gz_avail+0x5c>

0000000000000168 <gz_look>:
 168:	stp	x29, x30, [sp, #-48]!
 16c:	mov	x29, sp
 170:	stp	x19, x20, [sp, #16]
 174:	mov	x19, x0
 178:	add	x20, x0, #0x78
 17c:	ldr	w0, [x0, #40]
 180:	stp	x21, x22, [sp, #32]
 184:	cbnz	w0, 22c <gz_look+0xc4>
 188:	ldr	w22, [x19, #44]
 18c:	mov	w0, w22
 190:	bl	0 <malloc>
 194:	mov	x21, x0
 198:	str	x21, [x19, #48]
 19c:	lsl	w0, w22, #1
 1a0:	bl	0 <malloc>
 1a4:	str	x0, [x19, #56]
 1a8:	cbz	x21, 1b0 <gz_look+0x48>
 1ac:	cbnz	x0, 1e4 <gz_look+0x7c>
 1b0:	bl	0 <free>
 1b4:	mov	x0, x21
 1b8:	bl	0 <free>
 1bc:	mov	x0, x19
 1c0:	adrp	x2, 0 <gz_load>
 1c4:	mov	w1, #0xfffffffc            	// #-4
 1c8:	add	x2, x2, #0x0
 1cc:	bl	0 <gz_error>
 1d0:	mov	w0, #0xffffffff            	// #-1
 1d4:	ldp	x19, x20, [sp, #16]
 1d8:	ldp	x21, x22, [sp, #32]
 1dc:	ldp	x29, x30, [sp], #48
 1e0:	ret
 1e4:	str	w22, [x19, #40]
 1e8:	adrp	x2, 0 <gz_load>
 1ec:	str	xzr, [x19, #120]
 1f0:	add	x2, x2, #0x0
 1f4:	str	wzr, [x19, #128]
 1f8:	mov	x0, x20
 1fc:	stp	xzr, xzr, [x19, #184]
 200:	mov	w3, #0x70                  	// #112
 204:	mov	w1, #0x1f                  	// #31
 208:	str	xzr, [x19, #200]
 20c:	bl	0 <inflateInit2_>
 210:	cbz	w0, 22c <gz_look+0xc4>
 214:	ldr	x0, [x19, #56]
 218:	bl	0 <free>
 21c:	ldr	x0, [x19, #48]
 220:	bl	0 <free>
 224:	str	wzr, [x19, #40]
 228:	b	1bc <gz_look+0x54>
 22c:	ldr	w0, [x20, #8]
 230:	cmp	w0, #0x1
 234:	b.ls	260 <gz_look+0xf8>  // b.plast
 238:	ldr	w2, [x20, #8]
 23c:	cmp	w2, #0x1
 240:	b.hi	280 <gz_look+0x118>  // b.pmore
 244:	ldr	w0, [x19, #64]
 248:	cbnz	w0, 2b0 <gz_look+0x148>
 24c:	str	wzr, [x20, #8]
 250:	mov	w1, #0x1                   	// #1
 254:	str	wzr, [x19]
 258:	str	w1, [x19, #80]
 25c:	b	1d4 <gz_look+0x6c>
 260:	mov	x0, x19
 264:	bl	b4 <gz_avail>
 268:	cmn	w0, #0x1
 26c:	b.eq	1d4 <gz_look+0x6c>  // b.none
 270:	ldr	w0, [x20, #8]
 274:	cbnz	w0, 238 <gz_look+0xd0>
 278:	mov	w0, #0x0                   	// #0
 27c:	b	1d4 <gz_look+0x6c>
 280:	ldr	x0, [x19, #120]
 284:	ldrb	w1, [x0]
 288:	cmp	w1, #0x1f
 28c:	b.ne	244 <gz_look+0xdc>  // b.any
 290:	ldrb	w0, [x0, #1]
 294:	cmp	w0, #0x8b
 298:	b.ne	244 <gz_look+0xdc>  // b.any
 29c:	mov	x0, x20
 2a0:	bl	0 <inflateReset>
 2a4:	mov	x0, #0x200000000           	// #8589934592
 2a8:	str	x0, [x19, #64]
 2ac:	b	278 <gz_look+0x110>
 2b0:	ldr	x0, [x19, #56]
 2b4:	str	x0, [x19, #8]
 2b8:	cbz	w2, 2d4 <gz_look+0x16c>
 2bc:	ldr	x1, [x19, #120]
 2c0:	mov	w2, w2
 2c4:	bl	0 <memcpy>
 2c8:	ldr	w0, [x20, #8]
 2cc:	str	w0, [x19]
 2d0:	str	wzr, [x20, #8]
 2d4:	mov	x0, #0x100000001           	// #4294967297
 2d8:	b	2a8 <gz_look+0x140>

00000000000002dc <gz_decomp>:
 2dc:	stp	x29, x30, [sp, #-48]!
 2e0:	mov	x29, sp
 2e4:	stp	x21, x22, [sp, #32]
 2e8:	add	x21, x0, #0x78
 2ec:	ldr	w22, [x21, #32]
 2f0:	stp	x19, x20, [sp, #16]
 2f4:	mov	x19, x0
 2f8:	mov	w20, #0x0                   	// #0
 2fc:	ldr	w0, [x21, #8]
 300:	cbnz	w0, 35c <gz_decomp+0x80>
 304:	mov	x0, x19
 308:	bl	b4 <gz_avail>
 30c:	cmn	w0, #0x1
 310:	b.eq	390 <gz_decomp+0xb4>  // b.none
 314:	ldr	w0, [x21, #8]
 318:	cbnz	w0, 35c <gz_decomp+0x80>
 31c:	adrp	x2, 0 <gz_load>
 320:	mov	x0, x19
 324:	add	x2, x2, #0x0
 328:	mov	w1, #0xfffffffb            	// #-5
 32c:	bl	0 <gz_error>
 330:	ldr	w0, [x21, #32]
 334:	cmp	w20, #0x1
 338:	ldr	x1, [x21, #24]
 33c:	sub	w0, w22, w0
 340:	str	w0, [x19]
 344:	sub	x0, x1, w0, uxtw
 348:	str	x0, [x19, #8]
 34c:	b.ne	354 <gz_decomp+0x78>  // b.any
 350:	str	wzr, [x19, #68]
 354:	mov	w0, #0x0                   	// #0
 358:	b	390 <gz_decomp+0xb4>
 35c:	mov	x0, x21
 360:	mov	w1, #0x0                   	// #0
 364:	bl	0 <inflate>
 368:	cmp	w0, #0x2
 36c:	mov	w20, w0
 370:	ccmn	w0, #0x2, #0x4, ne  // ne = any
 374:	b.ne	3a0 <gz_decomp+0xc4>  // b.any
 378:	adrp	x2, 0 <gz_load>
 37c:	add	x2, x2, #0x0
 380:	mov	w1, #0xfffffffe            	// #-2
 384:	mov	x0, x19
 388:	bl	0 <gz_error>
 38c:	mov	w0, #0xffffffff            	// #-1
 390:	ldp	x19, x20, [sp, #16]
 394:	ldp	x21, x22, [sp, #32]
 398:	ldp	x29, x30, [sp], #48
 39c:	ret
 3a0:	cmn	w0, #0x4
 3a4:	b.ne	3b8 <gz_decomp+0xdc>  // b.any
 3a8:	adrp	x2, 0 <gz_load>
 3ac:	mov	w1, w0
 3b0:	add	x2, x2, #0x0
 3b4:	b	384 <gz_decomp+0xa8>
 3b8:	cmn	w0, #0x3
 3bc:	b.ne	3d8 <gz_decomp+0xfc>  // b.any
 3c0:	ldr	x2, [x21, #48]
 3c4:	cbnz	x2, 3d0 <gz_decomp+0xf4>
 3c8:	adrp	x2, 0 <gz_load>
 3cc:	add	x2, x2, #0x0
 3d0:	mov	w1, #0xfffffffd            	// #-3
 3d4:	b	384 <gz_decomp+0xa8>
 3d8:	ldr	w0, [x21, #32]
 3dc:	cbz	w0, 330 <gz_decomp+0x54>
 3e0:	cmp	w20, #0x1
 3e4:	b.ne	2fc <gz_decomp+0x20>  // b.any
 3e8:	b	330 <gz_decomp+0x54>

00000000000003ec <gz_fetch>:
 3ec:	stp	x29, x30, [sp, #-32]!
 3f0:	mov	x29, sp
 3f4:	str	x19, [sp, #16]
 3f8:	mov	x19, x0
 3fc:	ldr	w0, [x19, #68]
 400:	cmp	w0, #0x1
 404:	b.eq	444 <gz_fetch+0x58>  // b.none
 408:	cmp	w0, #0x2
 40c:	b.eq	470 <gz_fetch+0x84>  // b.none
 410:	cbnz	w0, 494 <gz_fetch+0xa8>
 414:	mov	x0, x19
 418:	bl	168 <gz_look>
 41c:	cmn	w0, #0x1
 420:	b.ne	434 <gz_fetch+0x48>  // b.any
 424:	mov	w0, #0xffffffff            	// #-1
 428:	ldr	x19, [sp, #16]
 42c:	ldp	x29, x30, [sp], #32
 430:	ret
 434:	ldr	w0, [x19, #68]
 438:	cbnz	w0, 494 <gz_fetch+0xa8>
 43c:	mov	w0, #0x0                   	// #0
 440:	b	428 <gz_fetch+0x3c>
 444:	ldr	x1, [x19, #56]
 448:	mov	x3, x19
 44c:	ldr	w2, [x19, #40]
 450:	mov	x0, x19
 454:	lsl	w2, w2, #1
 458:	bl	0 <gz_load>
 45c:	cmn	w0, #0x1
 460:	b.eq	424 <gz_fetch+0x38>  // b.none
 464:	ldr	x0, [x19, #56]
 468:	str	x0, [x19, #8]
 46c:	b	43c <gz_fetch+0x50>
 470:	ldr	w0, [x19, #40]
 474:	lsl	w0, w0, #1
 478:	str	w0, [x19, #152]
 47c:	ldr	x0, [x19, #56]
 480:	str	x0, [x19, #144]
 484:	mov	x0, x19
 488:	bl	2dc <gz_decomp>
 48c:	cmn	w0, #0x1
 490:	b.eq	424 <gz_fetch+0x38>  // b.none
 494:	ldr	w0, [x19]
 498:	cbnz	w0, 43c <gz_fetch+0x50>
 49c:	ldr	w0, [x19, #80]
 4a0:	cbz	w0, 3fc <gz_fetch+0x10>
 4a4:	ldr	w0, [x19, #128]
 4a8:	cbnz	w0, 3fc <gz_fetch+0x10>
 4ac:	b	43c <gz_fetch+0x50>

00000000000004b0 <gz_skip>:
 4b0:	stp	x29, x30, [sp, #-32]!
 4b4:	mov	x29, sp
 4b8:	stp	x19, x20, [sp, #16]
 4bc:	mov	x19, x0
 4c0:	mov	x20, x1
 4c4:	cbnz	x20, 4d0 <gz_skip+0x20>
 4c8:	mov	w0, #0x0                   	// #0
 4cc:	b	528 <gz_skip+0x78>
 4d0:	ldr	w0, [x19]
 4d4:	cbz	w0, 508 <gz_skip+0x58>
 4d8:	cmp	x20, w0, uxtw
 4dc:	csel	w1, w0, w20, ge  // ge = tcont
 4e0:	sub	w0, w0, w1
 4e4:	str	w0, [x19]
 4e8:	ldr	x0, [x19, #8]
 4ec:	sub	x20, x20, w1, uxtw
 4f0:	add	x0, x0, w1, uxtw
 4f4:	str	x0, [x19, #8]
 4f8:	ldr	x0, [x19, #16]
 4fc:	add	x0, x0, w1, uxtw
 500:	str	x0, [x19, #16]
 504:	b	4c4 <gz_skip+0x14>
 508:	ldr	w0, [x19, #80]
 50c:	cbz	w0, 518 <gz_skip+0x68>
 510:	ldr	w0, [x19, #128]
 514:	cbz	w0, 4c8 <gz_skip+0x18>
 518:	mov	x0, x19
 51c:	bl	3ec <gz_fetch>
 520:	cmn	w0, #0x1
 524:	b.ne	4c4 <gz_skip+0x14>  // b.any
 528:	ldp	x19, x20, [sp, #16]
 52c:	ldp	x29, x30, [sp], #32
 530:	ret

0000000000000534 <gz_read>:
 534:	stp	x29, x30, [sp, #-96]!
 538:	mov	x29, sp
 53c:	stp	x19, x20, [sp, #16]
 540:	stp	x21, x22, [sp, #32]
 544:	stp	x23, x24, [sp, #48]
 548:	stp	x25, x26, [sp, #64]
 54c:	cbnz	x2, 558 <gz_read+0x24>
 550:	mov	x22, #0x0                   	// #0
 554:	b	61c <gz_read+0xe8>
 558:	mov	x21, x1
 55c:	ldr	w1, [x0, #104]
 560:	mov	x19, x0
 564:	mov	x20, x2
 568:	cbnz	w1, 5ec <gz_read+0xb8>
 56c:	mov	x22, #0x0                   	// #0
 570:	mov	x23, #0xfffffffe            	// #4294967294
 574:	mov	w24, #0xffffffff            	// #-1
 578:	ldr	w0, [x19]
 57c:	cmp	x20, x23
 580:	csel	w1, w20, w24, ls  // ls = plast
 584:	str	w1, [sp, #92]
 588:	cbz	w0, 604 <gz_read+0xd0>
 58c:	cmp	w0, w1
 590:	b.cs	598 <gz_read+0x64>  // b.hs, b.nlast
 594:	str	w0, [sp, #92]
 598:	ldr	x1, [x19, #8]
 59c:	mov	x0, x21
 5a0:	ldr	w25, [sp, #92]
 5a4:	mov	w26, w25
 5a8:	mov	x2, x26
 5ac:	bl	0 <memcpy>
 5b0:	ldr	x0, [x19, #8]
 5b4:	add	x0, x0, x26
 5b8:	str	x0, [x19, #8]
 5bc:	ldr	w0, [x19]
 5c0:	sub	w0, w0, w25
 5c4:	str	w0, [x19]
 5c8:	ldr	x1, [x19, #16]
 5cc:	ldr	w0, [sp, #92]
 5d0:	add	x1, x1, x0
 5d4:	str	x1, [x19, #16]
 5d8:	add	x21, x21, x0
 5dc:	add	x22, x22, x0
 5e0:	subs	x20, x20, x0
 5e4:	b.ne	578 <gz_read+0x44>  // b.any
 5e8:	b	61c <gz_read+0xe8>
 5ec:	ldr	x1, [x0, #96]
 5f0:	str	wzr, [x0, #104]
 5f4:	bl	4b0 <gz_skip>
 5f8:	cmn	w0, #0x1
 5fc:	b.ne	56c <gz_read+0x38>  // b.any
 600:	b	550 <gz_read+0x1c>
 604:	ldr	w0, [x19, #80]
 608:	cbz	w0, 638 <gz_read+0x104>
 60c:	ldr	w0, [x19, #128]
 610:	cbnz	w0, 638 <gz_read+0x104>
 614:	mov	w0, #0x1                   	// #1
 618:	str	w0, [x19, #84]
 61c:	mov	x0, x22
 620:	ldp	x19, x20, [sp, #16]
 624:	ldp	x21, x22, [sp, #32]
 628:	ldp	x23, x24, [sp, #48]
 62c:	ldp	x25, x26, [sp, #64]
 630:	ldp	x29, x30, [sp], #96
 634:	ret
 638:	ldr	w0, [x19, #68]
 63c:	cbz	w0, 650 <gz_read+0x11c>
 640:	ldr	w1, [x19, #40]
 644:	ldr	w2, [sp, #92]
 648:	cmp	w2, w1, lsl #1
 64c:	b.cs	664 <gz_read+0x130>  // b.hs, b.nlast
 650:	mov	x0, x19
 654:	bl	3ec <gz_fetch>
 658:	cmn	w0, #0x1
 65c:	b.ne	578 <gz_read+0x44>  // b.any
 660:	b	550 <gz_read+0x1c>
 664:	cmp	w0, #0x1
 668:	b.ne	688 <gz_read+0x154>  // b.any
 66c:	add	x3, sp, #0x5c
 670:	mov	x1, x21
 674:	mov	x0, x19
 678:	bl	0 <gz_load>
 67c:	cmn	w0, #0x1
 680:	b.ne	5c8 <gz_read+0x94>  // b.any
 684:	b	550 <gz_read+0x1c>
 688:	str	x21, [x19, #144]
 68c:	mov	x0, x19
 690:	str	w2, [x19, #152]
 694:	bl	2dc <gz_decomp>
 698:	cmn	w0, #0x1
 69c:	b.eq	550 <gz_read+0x1c>  // b.none
 6a0:	ldr	w0, [x19]
 6a4:	str	wzr, [x19]
 6a8:	str	w0, [sp, #92]
 6ac:	b	5c8 <gz_read+0x94>

00000000000006b0 <gzread>:
 6b0:	cbnz	x0, 6bc <gzread+0xc>
 6b4:	mov	w0, #0xffffffff            	// #-1
 6b8:	ret
 6bc:	stp	x29, x30, [sp, #-32]!
 6c0:	mov	w3, #0x1c4f                	// #7247
 6c4:	mov	x29, sp
 6c8:	ldr	w4, [x0, #24]
 6cc:	str	x19, [sp, #16]
 6d0:	mov	x19, x0
 6d4:	cmp	w4, w3
 6d8:	b.ne	700 <gzread+0x50>  // b.any
 6dc:	ldr	w3, [x0, #108]
 6e0:	cmp	w3, #0x0
 6e4:	ccmn	w3, #0x5, #0x4, ne  // ne = any
 6e8:	b.ne	700 <gzread+0x50>  // b.any
 6ec:	tbz	w2, #31, 710 <gzread+0x60>
 6f0:	adrp	x2, 0 <gz_load>
 6f4:	mov	w1, #0xfffffffe            	// #-2
 6f8:	add	x2, x2, #0x0
 6fc:	bl	0 <gz_error>
 700:	mov	w0, #0xffffffff            	// #-1
 704:	ldr	x19, [sp, #16]
 708:	ldp	x29, x30, [sp], #32
 70c:	ret
 710:	mov	w2, w2
 714:	bl	534 <gz_read>
 718:	cbnz	w0, 704 <gzread+0x54>
 71c:	ldr	w1, [x19, #108]
 720:	cbz	w1, 704 <gzread+0x54>
 724:	cmn	w1, #0x5
 728:	b.eq	704 <gzread+0x54>  // b.none
 72c:	b	700 <gzread+0x50>

0000000000000730 <gzfread>:
 730:	cbz	x3, 7bc <gzfread+0x8c>
 734:	stp	x29, x30, [sp, #-32]!
 738:	mov	x4, x0
 73c:	mov	x0, x3
 740:	mov	x29, sp
 744:	ldr	w3, [x3, #24]
 748:	str	x19, [sp, #16]
 74c:	mov	x19, x1
 750:	mov	x1, x2
 754:	mov	w2, #0x1c4f                	// #7247
 758:	cmp	w3, w2
 75c:	b.ne	794 <gzfread+0x64>  // b.any
 760:	ldr	w2, [x0, #108]
 764:	cmp	w2, #0x0
 768:	ccmn	w2, #0x5, #0x4, ne  // ne = any
 76c:	b.ne	794 <gzfread+0x64>  // b.any
 770:	cbz	x19, 794 <gzfread+0x64>
 774:	mul	x2, x1, x19
 778:	udiv	x3, x2, x19
 77c:	cmp	x3, x1
 780:	b.eq	79c <gzfread+0x6c>  // b.none
 784:	adrp	x2, 0 <gz_load>
 788:	mov	w1, #0xfffffffe            	// #-2
 78c:	add	x2, x2, #0x0
 790:	bl	0 <gz_error>
 794:	mov	x2, #0x0                   	// #0
 798:	b	7ac <gzfread+0x7c>
 79c:	cbz	x2, 7ac <gzfread+0x7c>
 7a0:	mov	x1, x4
 7a4:	bl	534 <gz_read>
 7a8:	udiv	x2, x0, x19
 7ac:	mov	x0, x2
 7b0:	ldr	x19, [sp, #16]
 7b4:	ldp	x29, x30, [sp], #32
 7b8:	ret
 7bc:	mov	x2, #0x0                   	// #0
 7c0:	mov	x0, x2
 7c4:	ret

00000000000007c8 <gzgetc>:
 7c8:	cbz	x0, 848 <gzgetc+0x80>
 7cc:	ldr	w3, [x0, #24]
 7d0:	mov	w2, #0x1c4f                	// #7247
 7d4:	mov	x1, x0
 7d8:	cmp	w3, w2
 7dc:	b.ne	848 <gzgetc+0x80>  // b.any
 7e0:	ldr	w2, [x0, #108]
 7e4:	cmp	w2, #0x0
 7e8:	ccmn	w2, #0x5, #0x4, ne  // ne = any
 7ec:	b.ne	848 <gzgetc+0x80>  // b.any
 7f0:	ldr	w2, [x0]
 7f4:	cbz	w2, 820 <gzgetc+0x58>
 7f8:	ldr	x0, [x0, #16]
 7fc:	sub	w2, w2, #0x1
 800:	str	w2, [x1]
 804:	add	x0, x0, #0x1
 808:	str	x0, [x1, #16]
 80c:	ldr	x0, [x1, #8]
 810:	add	x2, x0, #0x1
 814:	str	x2, [x1, #8]
 818:	ldrb	w0, [x0]
 81c:	ret
 820:	stp	x29, x30, [sp, #-32]!
 824:	mov	x2, #0x1                   	// #1
 828:	mov	x29, sp
 82c:	add	x1, sp, #0x18
 830:	bl	534 <gz_read>
 834:	ldrb	w1, [sp, #24]
 838:	cmp	w0, #0x0
 83c:	ldp	x29, x30, [sp], #32
 840:	csinv	w0, w1, wzr, gt
 844:	ret
 848:	mov	w0, #0xffffffff            	// #-1
 84c:	ret

0000000000000850 <gzgetc_>:
 850:	b	7c8 <gzgetc>

0000000000000854 <gzungetc>:
 854:	stp	x29, x30, [sp, #-32]!
 858:	mov	x29, sp
 85c:	stp	x19, x20, [sp, #16]
 860:	cbnz	x1, 878 <gzungetc+0x24>
 864:	mov	w20, #0xffffffff            	// #-1
 868:	mov	w0, w20
 86c:	ldp	x19, x20, [sp, #16]
 870:	ldp	x29, x30, [sp], #32
 874:	ret
 878:	mov	x19, x1
 87c:	ldr	w1, [x1, #24]
 880:	mov	w20, w0
 884:	mov	w0, #0x1c4f                	// #7247
 888:	cmp	w1, w0
 88c:	b.ne	864 <gzungetc+0x10>  // b.any
 890:	ldr	w0, [x19, #108]
 894:	cmp	w0, #0x0
 898:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 89c:	b.ne	864 <gzungetc+0x10>  // b.any
 8a0:	ldr	w0, [x19, #104]
 8a4:	cbnz	w0, 8ec <gzungetc+0x98>
 8a8:	tbnz	w20, #31, 864 <gzungetc+0x10>
 8ac:	ldr	w0, [x19]
 8b0:	ldr	w1, [x19, #40]
 8b4:	lsl	w1, w1, #1
 8b8:	cbnz	w0, 908 <gzungetc+0xb4>
 8bc:	mov	w0, #0x1                   	// #1
 8c0:	str	w0, [x19]
 8c4:	ldr	x0, [x19, #56]
 8c8:	sub	x1, x1, #0x1
 8cc:	add	x2, x0, x1
 8d0:	str	x2, [x19, #8]
 8d4:	strb	w20, [x0, x1]
 8d8:	ldr	x0, [x19, #16]
 8dc:	str	wzr, [x19, #84]
 8e0:	sub	x0, x0, #0x1
 8e4:	str	x0, [x19, #16]
 8e8:	b	868 <gzungetc+0x14>
 8ec:	ldr	x1, [x19, #96]
 8f0:	str	wzr, [x19, #104]
 8f4:	mov	x0, x19
 8f8:	bl	4b0 <gz_skip>
 8fc:	cmn	w0, #0x1
 900:	b.ne	8a8 <gzungetc+0x54>  // b.any
 904:	b	864 <gzungetc+0x10>
 908:	cmp	w0, w1
 90c:	b.ne	928 <gzungetc+0xd4>  // b.any
 910:	mov	x0, x19
 914:	adrp	x2, 0 <gz_load>
 918:	mov	w1, #0xfffffffd            	// #-3
 91c:	add	x2, x2, #0x0
 920:	bl	0 <gz_error>
 924:	b	864 <gzungetc+0x10>
 928:	ldr	x2, [x19, #8]
 92c:	ldr	x3, [x19, #56]
 930:	cmp	x2, x3
 934:	b.ne	954 <gzungetc+0x100>  // b.any
 938:	add	x0, x2, w0, uxtw
 93c:	add	x1, x2, w1, uxtw
 940:	ldr	x2, [x19, #56]
 944:	sub	x3, x1, #0x1
 948:	cmp	x2, x0
 94c:	b.cc	974 <gzungetc+0x120>  // b.lo, b.ul, b.last
 950:	str	x1, [x19, #8]
 954:	ldr	w0, [x19]
 958:	add	w0, w0, #0x1
 95c:	str	w0, [x19]
 960:	ldr	x0, [x19, #8]
 964:	sub	x1, x0, #0x1
 968:	str	x1, [x19, #8]
 96c:	sturb	w20, [x0, #-1]
 970:	b	8d8 <gzungetc+0x84>
 974:	ldrb	w2, [x0, #-1]!
 978:	sturb	w2, [x1, #-1]
 97c:	mov	x1, x3
 980:	b	940 <gzungetc+0xec>

0000000000000984 <gzgets>:
 984:	cmp	x0, #0x0
 988:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 98c:	b.ne	998 <gzgets+0x14>  // b.any
 990:	mov	x0, #0x0                   	// #0
 994:	ret
 998:	stp	x29, x30, [sp, #-80]!
 99c:	cmp	w2, #0x0
 9a0:	mov	x29, sp
 9a4:	stp	x19, x20, [sp, #16]
 9a8:	mov	w20, w2
 9ac:	stp	x21, x22, [sp, #32]
 9b0:	stp	x23, x24, [sp, #48]
 9b4:	stp	x25, x26, [sp, #64]
 9b8:	b.le	9f4 <gzgets+0x70>
 9bc:	ldr	w2, [x0, #24]
 9c0:	mov	x21, x1
 9c4:	mov	x19, x0
 9c8:	mov	w1, #0x1c4f                	// #7247
 9cc:	cmp	w2, w1
 9d0:	b.ne	9f4 <gzgets+0x70>  // b.any
 9d4:	ldr	w1, [x0, #108]
 9d8:	cmp	w1, #0x0
 9dc:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 9e0:	b.ne	9f4 <gzgets+0x70>  // b.any
 9e4:	ldr	w1, [x0, #104]
 9e8:	cbnz	w1, a10 <gzgets+0x8c>
 9ec:	subs	w20, w20, #0x1
 9f0:	b.ne	a28 <gzgets+0xa4>  // b.any
 9f4:	mov	x0, #0x0                   	// #0
 9f8:	ldp	x19, x20, [sp, #16]
 9fc:	ldp	x21, x22, [sp, #32]
 a00:	ldp	x23, x24, [sp, #48]
 a04:	ldp	x25, x26, [sp, #64]
 a08:	ldp	x29, x30, [sp], #80
 a0c:	ret
 a10:	ldr	x1, [x0, #96]
 a14:	str	wzr, [x0, #104]
 a18:	bl	4b0 <gz_skip>
 a1c:	cmn	w0, #0x1
 a20:	b.ne	9ec <gzgets+0x68>  // b.any
 a24:	b	9f4 <gzgets+0x70>
 a28:	mov	x23, x21
 a2c:	ldr	w0, [x19]
 a30:	cbz	w0, a58 <gzgets+0xd4>
 a34:	ldr	w2, [x19]
 a38:	cbnz	w2, a6c <gzgets+0xe8>
 a3c:	mov	w0, #0x1                   	// #1
 a40:	str	w0, [x19, #84]
 a44:	cmp	x23, x21
 a48:	b.eq	9f4 <gzgets+0x70>  // b.none
 a4c:	mov	x0, x21
 a50:	strb	wzr, [x23]
 a54:	b	9f8 <gzgets+0x74>
 a58:	mov	x0, x19
 a5c:	bl	3ec <gz_fetch>
 a60:	cmn	w0, #0x1
 a64:	b.ne	a34 <gzgets+0xb0>  // b.any
 a68:	b	9f4 <gzgets+0x70>
 a6c:	cmp	w2, w20
 a70:	mov	w1, #0xa                   	// #10
 a74:	ldr	x26, [x19, #8]
 a78:	csel	w22, w2, w20, ls  // ls = plast
 a7c:	csel	w2, w2, w20, ls  // ls = plast
 a80:	mov	x0, x26
 a84:	bl	0 <memchr>
 a88:	mov	x24, x0
 a8c:	cbz	x0, a98 <gzgets+0x114>
 a90:	sub	x22, x0, x26
 a94:	add	w22, w22, #0x1
 a98:	mov	w25, w22
 a9c:	mov	x0, x23
 aa0:	mov	x2, x25
 aa4:	mov	x1, x26
 aa8:	bl	0 <memcpy>
 aac:	add	x23, x23, x25
 ab0:	ldr	w0, [x19]
 ab4:	subs	w20, w20, w22
 ab8:	ccmp	x24, #0x0, #0x0, ne  // ne = any
 abc:	sub	w0, w0, w22
 ac0:	str	w0, [x19]
 ac4:	ldr	x0, [x19, #8]
 ac8:	add	x0, x0, x25
 acc:	str	x0, [x19, #8]
 ad0:	ldr	x0, [x19, #16]
 ad4:	add	x0, x0, x25
 ad8:	str	x0, [x19, #16]
 adc:	b.eq	a2c <gzgets+0xa8>  // b.none
 ae0:	b	a44 <gzgets+0xc0>

0000000000000ae4 <gzdirect>:
 ae4:	cbz	x0, b2c <gzdirect+0x48>
 ae8:	stp	x29, x30, [sp, #-32]!
 aec:	mov	w1, #0x1c4f                	// #7247
 af0:	mov	x29, sp
 af4:	ldr	w2, [x0, #24]
 af8:	str	x19, [sp, #16]
 afc:	mov	x19, x0
 b00:	cmp	w2, w1
 b04:	b.ne	b1c <gzdirect+0x38>  // b.any
 b08:	ldr	w1, [x0, #68]
 b0c:	cbnz	w1, b1c <gzdirect+0x38>
 b10:	ldr	w1, [x0]
 b14:	cbnz	w1, b1c <gzdirect+0x38>
 b18:	bl	168 <gz_look>
 b1c:	ldr	w0, [x19, #64]
 b20:	ldr	x19, [sp, #16]
 b24:	ldp	x29, x30, [sp], #32
 b28:	ret
 b2c:	mov	w0, #0x0                   	// #0
 b30:	ret

0000000000000b34 <gzclose_r>:
 b34:	stp	x29, x30, [sp, #-48]!
 b38:	mov	x29, sp
 b3c:	stp	x19, x20, [sp, #16]
 b40:	str	x21, [sp, #32]
 b44:	cbz	x0, bd4 <gzclose_r+0xa0>
 b48:	mov	x19, x0
 b4c:	mov	w0, #0x1c4f                	// #7247
 b50:	ldr	w1, [x19, #24]
 b54:	cmp	w1, w0
 b58:	b.ne	bd4 <gzclose_r+0xa0>  // b.any
 b5c:	ldr	w0, [x19, #40]
 b60:	cbz	w0, b7c <gzclose_r+0x48>
 b64:	add	x0, x19, #0x78
 b68:	bl	0 <inflateEnd>
 b6c:	ldr	x0, [x19, #56]
 b70:	bl	0 <free>
 b74:	ldr	x0, [x19, #48]
 b78:	bl	0 <free>
 b7c:	ldr	w20, [x19, #108]
 b80:	cmn	w20, #0x5
 b84:	b.eq	b8c <gzclose_r+0x58>  // b.none
 b88:	mov	w20, #0x0                   	// #0
 b8c:	mov	x2, #0x0                   	// #0
 b90:	mov	w1, #0x0                   	// #0
 b94:	mov	x0, x19
 b98:	bl	0 <gz_error>
 b9c:	ldr	x0, [x19, #32]
 ba0:	bl	0 <free>
 ba4:	ldr	w0, [x19, #28]
 ba8:	bl	0 <close>
 bac:	mov	w21, w0
 bb0:	mov	x0, x19
 bb4:	bl	0 <free>
 bb8:	cmp	w21, #0x0
 bbc:	csinv	w20, w20, wzr, eq  // eq = none
 bc0:	mov	w0, w20
 bc4:	ldp	x19, x20, [sp, #16]
 bc8:	ldr	x21, [sp, #32]
 bcc:	ldp	x29, x30, [sp], #48
 bd0:	ret
 bd4:	mov	w20, #0xfffffffe            	// #-2
 bd8:	b	bc0 <gzclose_r+0x8c>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_init>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	ldr	w21, [x0, #44]
  18:	lsl	w0, w21, #1
  1c:	bl	0 <malloc>
  20:	str	x0, [x19, #48]
  24:	cbnz	x0, 50 <gz_init+0x50>
  28:	mov	x0, x19
  2c:	adrp	x2, 0 <gz_init>
  30:	mov	w1, #0xfffffffc            	// #-4
  34:	add	x2, x2, #0x0
  38:	bl	0 <gz_error>
  3c:	mov	w0, #0xffffffff            	// #-1
  40:	ldp	x19, x20, [sp, #16]
  44:	ldr	x21, [sp, #32]
  48:	ldp	x29, x30, [sp], #48
  4c:	ret
  50:	mov	x20, x0
  54:	ldr	w0, [x19, #64]
  58:	cbnz	w0, bc <gz_init+0xbc>
  5c:	mov	w0, w21
  60:	bl	0 <malloc>
  64:	str	x0, [x19, #56]
  68:	cbnz	x0, 78 <gz_init+0x78>
  6c:	mov	x0, x20
  70:	bl	0 <free>
  74:	b	28 <gz_init+0x28>
  78:	add	x0, x19, #0x78
  7c:	adrp	x6, 0 <gz_init>
  80:	ldp	w1, w5, [x19, #88]
  84:	mov	w4, #0x8                   	// #8
  88:	stp	xzr, xzr, [x0, #64]
  8c:	add	x6, x6, #0x0
  90:	mov	w2, w4
  94:	str	xzr, [x0, #80]
  98:	mov	w7, #0x70                  	// #112
  9c:	mov	w3, #0x1f                  	// #31
  a0:	bl	0 <deflateInit2_>
  a4:	cbz	w0, b8 <gz_init+0xb8>
  a8:	ldr	x0, [x19, #56]
  ac:	bl	0 <free>
  b0:	ldr	x0, [x19, #48]
  b4:	b	70 <gz_init+0x70>
  b8:	str	xzr, [x19, #120]
  bc:	ldr	w0, [x19, #64]
  c0:	ldr	w1, [x19, #44]
  c4:	str	w1, [x19, #40]
  c8:	cbnz	w0, e0 <gz_init+0xe0>
  cc:	str	w1, [x19, #152]
  d0:	ldr	x1, [x19, #56]
  d4:	str	x1, [x19, #8]
  d8:	str	x1, [x19, #144]
  dc:	b	40 <gz_init+0x40>
  e0:	mov	w0, #0x0                   	// #0
  e4:	b	40 <gz_init+0x40>

00000000000000e8 <gz_comp>:
  e8:	stp	x29, x30, [sp, #-64]!
  ec:	mov	x29, sp
  f0:	stp	x21, x22, [sp, #32]
  f4:	mov	w22, w1
  f8:	ldr	w1, [x0, #40]
  fc:	stp	x19, x20, [sp, #16]
 100:	mov	x19, x0
 104:	stp	x23, x24, [sp, #48]
 108:	cbz	w1, 12c <gz_comp+0x44>
 10c:	ldr	w21, [x19, #64]
 110:	add	x20, x19, #0x78
 114:	cbz	w21, 1ac <gz_comp+0xc4>
 118:	mov	w21, #0x40000000            	// #1073741824
 11c:	ldr	w2, [x20, #8]
 120:	cbnz	w2, 154 <gz_comp+0x6c>
 124:	mov	w21, #0x0                   	// #0
 128:	b	13c <gz_comp+0x54>
 12c:	bl	0 <gz_init>
 130:	mov	w21, w0
 134:	cmn	w0, #0x1
 138:	b.ne	10c <gz_comp+0x24>  // b.any
 13c:	mov	w0, w21
 140:	ldp	x19, x20, [sp, #16]
 144:	ldp	x21, x22, [sp, #32]
 148:	ldp	x23, x24, [sp, #48]
 14c:	ldp	x29, x30, [sp], #64
 150:	ret
 154:	ldr	w0, [x19, #28]
 158:	cmp	w2, w21
 15c:	ldr	x1, [x20]
 160:	csel	w2, w2, w21, ls  // ls = plast
 164:	bl	0 <write>
 168:	tbz	w0, #31, 190 <gz_comp+0xa8>
 16c:	bl	0 <__errno_location>
 170:	ldr	w0, [x0]
 174:	bl	0 <strerror>
 178:	mov	x2, x0
 17c:	mov	w1, #0xffffffff            	// #-1
 180:	mov	x0, x19
 184:	mov	w21, #0xffffffff            	// #-1
 188:	bl	0 <gz_error>
 18c:	b	13c <gz_comp+0x54>
 190:	ldr	w1, [x20, #8]
 194:	sub	w1, w1, w0
 198:	str	w1, [x20, #8]
 19c:	ldr	x1, [x20]
 1a0:	add	x0, x1, w0, sxtw
 1a4:	str	x0, [x20]
 1a8:	b	11c <gz_comp+0x34>
 1ac:	mov	w1, #0x0                   	// #0
 1b0:	mov	x23, #0x40000000            	// #1073741824
 1b4:	ldr	w0, [x20, #32]
 1b8:	cbz	w0, 1cc <gz_comp+0xe4>
 1bc:	cbz	w22, 1f8 <gz_comp+0x110>
 1c0:	cmp	w22, #0x4
 1c4:	ccmp	w1, #0x1, #0x4, eq  // eq = none
 1c8:	b.ne	1f8 <gz_comp+0x110>  // b.any
 1cc:	ldr	x1, [x19, #8]
 1d0:	ldr	x2, [x20, #24]
 1d4:	cmp	x2, x1
 1d8:	b.hi	220 <gz_comp+0x138>  // b.pmore
 1dc:	ldr	w0, [x20, #32]
 1e0:	cbnz	w0, 1f8 <gz_comp+0x110>
 1e4:	ldr	w0, [x19, #40]
 1e8:	str	w0, [x20, #32]
 1ec:	ldr	x0, [x19, #56]
 1f0:	str	x0, [x20, #24]
 1f4:	str	x0, [x19, #8]
 1f8:	mov	w1, w22
 1fc:	ldr	w24, [x20, #32]
 200:	mov	x0, x20
 204:	bl	0 <deflate>
 208:	mov	w1, w0
 20c:	cmn	w0, #0x2
 210:	b.ne	24c <gz_comp+0x164>  // b.any
 214:	adrp	x2, 0 <gz_init>
 218:	add	x2, x2, #0x0
 21c:	b	180 <gz_comp+0x98>
 220:	sub	x2, x2, x1
 224:	ldr	w0, [x19, #28]
 228:	cmp	x2, x23
 22c:	csel	x2, x2, x23, le
 230:	mov	w2, w2
 234:	bl	0 <write>
 238:	tbnz	w0, #31, 16c <gz_comp+0x84>
 23c:	ldr	x1, [x19, #8]
 240:	add	x0, x1, w0, sxtw
 244:	str	x0, [x19, #8]
 248:	b	1cc <gz_comp+0xe4>
 24c:	ldr	w0, [x20, #32]
 250:	cmp	w0, w24
 254:	b.ne	1b4 <gz_comp+0xcc>  // b.any
 258:	cmp	w22, #0x4
 25c:	b.ne	124 <gz_comp+0x3c>  // b.any
 260:	mov	x0, x20
 264:	bl	0 <deflateReset>
 268:	b	13c <gz_comp+0x54>

000000000000026c <gz_zero>:
 26c:	stp	x29, x30, [sp, #-64]!
 270:	mov	x29, sp
 274:	stp	x21, x22, [sp, #32]
 278:	add	x22, x0, #0x78
 27c:	stp	x19, x20, [sp, #16]
 280:	mov	x20, x1
 284:	ldr	w1, [x22, #8]
 288:	str	x23, [sp, #48]
 28c:	mov	x19, x0
 290:	cbnz	w1, 2a4 <gz_zero+0x38>
 294:	mov	w0, #0x1                   	// #1
 298:	cbnz	x20, 2cc <gz_zero+0x60>
 29c:	mov	w0, #0x0                   	// #0
 2a0:	b	2b8 <gz_zero+0x4c>
 2a4:	mov	w1, #0x0                   	// #0
 2a8:	bl	e8 <gz_comp>
 2ac:	cmn	w0, #0x1
 2b0:	b.ne	294 <gz_zero+0x28>  // b.any
 2b4:	mov	w0, #0xffffffff            	// #-1
 2b8:	ldp	x19, x20, [sp, #16]
 2bc:	ldp	x21, x22, [sp, #32]
 2c0:	ldr	x23, [sp, #48]
 2c4:	ldp	x29, x30, [sp], #64
 2c8:	ret
 2cc:	ldr	w21, [x19, #40]
 2d0:	cmp	x20, w21, uxtw
 2d4:	csel	w21, w21, w20, ge  // ge = tcont
 2d8:	mov	w23, w21
 2dc:	cbz	w0, 2f0 <gz_zero+0x84>
 2e0:	ldr	x0, [x19, #48]
 2e4:	mov	x2, x23
 2e8:	mov	w1, #0x0                   	// #0
 2ec:	bl	0 <memset>
 2f0:	ldr	x0, [x19, #48]
 2f4:	str	x0, [x22]
 2f8:	ldr	x0, [x19, #16]
 2fc:	str	w21, [x22, #8]
 300:	mov	w1, #0x0                   	// #0
 304:	add	x0, x0, x23
 308:	str	x0, [x19, #16]
 30c:	mov	x0, x19
 310:	bl	e8 <gz_comp>
 314:	cmn	w0, #0x1
 318:	b.eq	2b4 <gz_zero+0x48>  // b.none
 31c:	sub	x20, x20, x23
 320:	mov	w0, #0x0                   	// #0
 324:	b	298 <gz_zero+0x2c>

0000000000000328 <gz_write>:
 328:	cbnz	x2, 334 <gz_write+0xc>
 32c:	mov	x0, #0x0                   	// #0
 330:	ret
 334:	stp	x29, x30, [sp, #-64]!
 338:	mov	x29, sp
 33c:	stp	x21, x22, [sp, #32]
 340:	mov	x21, x1
 344:	ldr	w1, [x0, #40]
 348:	stp	x19, x20, [sp, #16]
 34c:	mov	x19, x0
 350:	mov	x20, x2
 354:	stp	x23, x24, [sp, #48]
 358:	cbz	w1, 3d8 <gz_write+0xb0>
 35c:	ldr	w0, [x19, #104]
 360:	cbz	w0, 37c <gz_write+0x54>
 364:	ldr	x1, [x19, #96]
 368:	str	wzr, [x19, #104]
 36c:	mov	x0, x19
 370:	bl	26c <gz_zero>
 374:	cmn	w0, #0x1
 378:	b.eq	3e4 <gz_write+0xbc>  // b.none
 37c:	ldr	w0, [x19, #40]
 380:	cmp	x20, x0
 384:	b.cc	3fc <gz_write+0xd4>  // b.lo, b.ul, b.last
 388:	ldr	w0, [x19, #128]
 38c:	cbnz	w0, 488 <gz_write+0x160>
 390:	str	x21, [x19, #120]
 394:	mov	x21, x20
 398:	mov	x23, #0xfffffffe            	// #4294967294
 39c:	mov	x24, #0xffffffff            	// #4294967295
 3a0:	ldr	x0, [x19, #16]
 3a4:	cmp	x21, x23
 3a8:	csel	x22, x21, x24, ls  // ls = plast
 3ac:	str	w22, [x19, #128]
 3b0:	add	x0, x0, x22
 3b4:	str	x0, [x19, #16]
 3b8:	mov	w1, #0x0                   	// #0
 3bc:	mov	x0, x19
 3c0:	bl	e8 <gz_comp>
 3c4:	cmn	w0, #0x1
 3c8:	b.eq	3e4 <gz_write+0xbc>  // b.none
 3cc:	subs	x21, x21, x22
 3d0:	b.ne	3a0 <gz_write+0x78>  // b.any
 3d4:	b	468 <gz_write+0x140>
 3d8:	bl	0 <gz_init>
 3dc:	cmn	w0, #0x1
 3e0:	b.ne	35c <gz_write+0x34>  // b.any
 3e4:	mov	x0, #0x0                   	// #0
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldp	x21, x22, [sp, #32]
 3f0:	ldp	x23, x24, [sp, #48]
 3f4:	ldp	x29, x30, [sp], #64
 3f8:	ret
 3fc:	mov	x22, x20
 400:	ldr	w2, [x19, #128]
 404:	ldr	x3, [x19, #48]
 408:	cbnz	w2, 410 <gz_write+0xe8>
 40c:	str	x3, [x19, #120]
 410:	ldr	x0, [x19, #120]
 414:	ldr	w1, [x19, #40]
 418:	add	x2, x0, w2, uxtw
 41c:	sub	x0, x2, x3
 420:	sub	w24, w1, w0
 424:	sub	w1, w1, w0
 428:	cmp	x1, x22
 42c:	add	x0, x3, w0, uxtw
 430:	csel	w24, w22, w24, hi  // hi = pmore
 434:	mov	x1, x21
 438:	mov	w23, w24
 43c:	mov	x2, x23
 440:	bl	0 <memcpy>
 444:	ldr	w0, [x19, #128]
 448:	add	x21, x21, x23
 44c:	subs	x22, x22, x23
 450:	add	w24, w0, w24
 454:	str	w24, [x19, #128]
 458:	ldr	x0, [x19, #16]
 45c:	add	x0, x0, x23
 460:	str	x0, [x19, #16]
 464:	b.ne	470 <gz_write+0x148>  // b.any
 468:	mov	x0, x20
 46c:	b	3e8 <gz_write+0xc0>
 470:	mov	x0, x19
 474:	mov	w1, #0x0                   	// #0
 478:	bl	e8 <gz_comp>
 47c:	cmn	w0, #0x1
 480:	b.ne	400 <gz_write+0xd8>  // b.any
 484:	b	3e4 <gz_write+0xbc>
 488:	mov	x0, x19
 48c:	mov	w1, #0x0                   	// #0
 490:	bl	e8 <gz_comp>
 494:	cmn	w0, #0x1
 498:	b.ne	390 <gz_write+0x68>  // b.any
 49c:	b	3e4 <gz_write+0xbc>

00000000000004a0 <gzwrite>:
 4a0:	stp	x29, x30, [sp, #-32]!
 4a4:	mov	x29, sp
 4a8:	str	x19, [sp, #16]
 4ac:	cbz	x0, 4fc <gzwrite+0x5c>
 4b0:	ldr	w5, [x0, #24]
 4b4:	mov	w4, #0x79b1                	// #31153
 4b8:	cmp	w5, w4
 4bc:	b.ne	4fc <gzwrite+0x5c>  // b.any
 4c0:	ldr	w19, [x0, #108]
 4c4:	cbnz	w19, 4fc <gzwrite+0x5c>
 4c8:	tbz	w2, #31, 4ec <gzwrite+0x4c>
 4cc:	adrp	x2, 0 <gz_init>
 4d0:	mov	w1, #0xfffffffd            	// #-3
 4d4:	add	x2, x2, #0x0
 4d8:	bl	0 <gz_error>
 4dc:	mov	w0, w19
 4e0:	ldr	x19, [sp, #16]
 4e4:	ldp	x29, x30, [sp], #32
 4e8:	ret
 4ec:	mov	w2, w2
 4f0:	bl	328 <gz_write>
 4f4:	mov	w19, w0
 4f8:	b	4dc <gzwrite+0x3c>
 4fc:	mov	w19, #0x0                   	// #0
 500:	b	4dc <gzwrite+0x3c>

0000000000000504 <gzfwrite>:
 504:	cbz	x3, 588 <gzfwrite+0x84>
 508:	stp	x29, x30, [sp, #-32]!
 50c:	mov	x4, x0
 510:	mov	x0, x3
 514:	mov	x29, sp
 518:	ldr	w3, [x3, #24]
 51c:	str	x19, [sp, #16]
 520:	mov	x19, x1
 524:	mov	x1, x2
 528:	mov	w2, #0x79b1                	// #31153
 52c:	cmp	w3, w2
 530:	b.ne	560 <gzfwrite+0x5c>  // b.any
 534:	ldr	w2, [x0, #108]
 538:	cbnz	w2, 560 <gzfwrite+0x5c>
 53c:	cbz	x19, 560 <gzfwrite+0x5c>
 540:	mul	x2, x1, x19
 544:	udiv	x3, x2, x19
 548:	cmp	x3, x1
 54c:	b.eq	568 <gzfwrite+0x64>  // b.none
 550:	adrp	x2, 0 <gz_init>
 554:	mov	w1, #0xfffffffe            	// #-2
 558:	add	x2, x2, #0x0
 55c:	bl	0 <gz_error>
 560:	mov	x2, #0x0                   	// #0
 564:	b	578 <gzfwrite+0x74>
 568:	cbz	x2, 578 <gzfwrite+0x74>
 56c:	mov	x1, x4
 570:	bl	328 <gz_write>
 574:	udiv	x2, x0, x19
 578:	mov	x0, x2
 57c:	ldr	x19, [sp, #16]
 580:	ldp	x29, x30, [sp], #32
 584:	ret
 588:	mov	x2, #0x0                   	// #0
 58c:	mov	x0, x2
 590:	ret

0000000000000594 <gzputc>:
 594:	cbnz	x0, 5a0 <gzputc+0xc>
 598:	mov	w0, #0xffffffff            	// #-1
 59c:	ret
 5a0:	stp	x29, x30, [sp, #-48]!
 5a4:	mov	x29, sp
 5a8:	ldr	w2, [x0, #24]
 5ac:	stp	x19, x20, [sp, #16]
 5b0:	mov	w20, w1
 5b4:	mov	x19, x0
 5b8:	mov	w1, #0x79b1                	// #31153
 5bc:	cmp	w2, w1
 5c0:	b.ne	610 <gzputc+0x7c>  // b.any
 5c4:	ldr	w1, [x0, #108]
 5c8:	cbnz	w1, 610 <gzputc+0x7c>
 5cc:	ldr	w1, [x0, #104]
 5d0:	cbnz	w1, 5fc <gzputc+0x68>
 5d4:	ldr	w3, [x19, #40]
 5d8:	cbnz	w3, 620 <gzputc+0x8c>
 5dc:	add	x1, sp, #0x28
 5e0:	mov	x0, x19
 5e4:	mov	x2, #0x1                   	// #1
 5e8:	strb	w20, [sp, #40]
 5ec:	bl	328 <gz_write>
 5f0:	cmp	x0, #0x1
 5f4:	b.eq	664 <gzputc+0xd0>  // b.none
 5f8:	b	610 <gzputc+0x7c>
 5fc:	ldr	x1, [x0, #96]
 600:	str	wzr, [x0, #104]
 604:	bl	26c <gz_zero>
 608:	cmn	w0, #0x1
 60c:	b.ne	5d4 <gzputc+0x40>  // b.any
 610:	mov	w0, #0xffffffff            	// #-1
 614:	ldp	x19, x20, [sp, #16]
 618:	ldp	x29, x30, [sp], #48
 61c:	ret
 620:	ldr	w0, [x19, #128]
 624:	add	x1, x19, #0x78
 628:	ldr	x2, [x19, #48]
 62c:	cbnz	w0, 634 <gzputc+0xa0>
 630:	str	x2, [x19, #120]
 634:	ldr	x4, [x19, #120]
 638:	add	x0, x4, w0, uxtw
 63c:	sub	x0, x0, x2
 640:	cmp	w3, w0
 644:	b.ls	5dc <gzputc+0x48>  // b.plast
 648:	strb	w20, [x2, w0, uxtw]
 64c:	ldr	w0, [x1, #8]
 650:	add	w0, w0, #0x1
 654:	str	w0, [x1, #8]
 658:	ldr	x0, [x19, #16]
 65c:	add	x0, x0, #0x1
 660:	str	x0, [x19, #16]
 664:	and	w0, w20, #0xff
 668:	b	614 <gzputc+0x80>

000000000000066c <gzputs>:
 66c:	cbz	x0, 6dc <gzputs+0x70>
 670:	stp	x29, x30, [sp, #-48]!
 674:	mov	x29, sp
 678:	stp	x19, x20, [sp, #16]
 67c:	mov	x19, x0
 680:	mov	w0, #0x79b1                	// #31153
 684:	str	x21, [sp, #32]
 688:	mov	x21, x1
 68c:	ldr	w1, [x19, #24]
 690:	cmp	w1, w0
 694:	b.ne	6c8 <gzputs+0x5c>  // b.any
 698:	ldr	w0, [x19, #108]
 69c:	cbnz	w0, 6c8 <gzputs+0x5c>
 6a0:	mov	x0, x21
 6a4:	bl	0 <strlen>
 6a8:	mov	x1, x21
 6ac:	mov	x20, x0
 6b0:	mov	x2, x0
 6b4:	mov	x0, x19
 6b8:	bl	328 <gz_write>
 6bc:	cmp	w0, #0x0
 6c0:	ccmp	x20, #0x0, #0x4, eq  // eq = none
 6c4:	b.eq	6cc <gzputs+0x60>  // b.none
 6c8:	mov	w0, #0xffffffff            	// #-1
 6cc:	ldp	x19, x20, [sp, #16]
 6d0:	ldr	x21, [sp, #32]
 6d4:	ldp	x29, x30, [sp], #48
 6d8:	ret
 6dc:	mov	w0, #0xffffffff            	// #-1
 6e0:	ret

00000000000006e4 <gzvprintf>:
 6e4:	stp	x29, x30, [sp, #-96]!
 6e8:	mov	x29, sp
 6ec:	stp	x19, x20, [sp, #16]
 6f0:	stp	x21, x22, [sp, #32]
 6f4:	stp	x23, x24, [sp, #48]
 6f8:	cbz	x0, 83c <gzvprintf+0x158>
 6fc:	mov	x20, x2
 700:	ldr	w2, [x0, #24]
 704:	mov	x21, x1
 708:	mov	x19, x0
 70c:	mov	w1, #0x79b1                	// #31153
 710:	cmp	w2, w1
 714:	b.ne	83c <gzvprintf+0x158>  // b.any
 718:	ldr	w1, [x0, #108]
 71c:	cbnz	w1, 83c <gzvprintf+0x158>
 720:	ldr	w1, [x0, #40]
 724:	cbnz	w1, 750 <gzvprintf+0x6c>
 728:	bl	0 <gz_init>
 72c:	cmn	w0, #0x1
 730:	b.ne	750 <gzvprintf+0x6c>  // b.any
 734:	ldr	w20, [x19, #108]
 738:	mov	w0, w20
 73c:	ldp	x19, x20, [sp, #16]
 740:	ldp	x21, x22, [sp, #32]
 744:	ldp	x23, x24, [sp, #48]
 748:	ldp	x29, x30, [sp], #96
 74c:	ret
 750:	ldr	w0, [x19, #104]
 754:	cbz	w0, 770 <gzvprintf+0x8c>
 758:	ldr	x1, [x19, #96]
 75c:	str	wzr, [x19, #104]
 760:	mov	x0, x19
 764:	bl	26c <gz_zero>
 768:	cmn	w0, #0x1
 76c:	b.eq	734 <gzvprintf+0x50>  // b.none
 770:	ldr	w22, [x19, #128]
 774:	add	x23, x19, #0x78
 778:	cbnz	w22, 784 <gzvprintf+0xa0>
 77c:	ldr	x0, [x19, #48]
 780:	str	x0, [x19, #120]
 784:	ldr	x0, [x19, #120]
 788:	add	x3, sp, #0x40
 78c:	mov	x2, x21
 790:	add	x22, x0, w22, uxtw
 794:	ldr	w0, [x19, #40]
 798:	sub	w0, w0, #0x1
 79c:	strb	wzr, [x22, x0]
 7a0:	ldp	x0, x1, [x20]
 7a4:	stp	x0, x1, [sp, #64]
 7a8:	ldp	x0, x1, [x20, #16]
 7ac:	stp	x0, x1, [sp, #80]
 7b0:	ldr	w1, [x19, #40]
 7b4:	mov	x0, x22
 7b8:	bl	0 <vsnprintf>
 7bc:	mov	w20, w0
 7c0:	cbz	w0, 738 <gzvprintf+0x54>
 7c4:	ldr	w21, [x19, #40]
 7c8:	cmp	w21, w0
 7cc:	b.ls	844 <gzvprintf+0x160>  // b.plast
 7d0:	sub	w0, w21, #0x1
 7d4:	ldrb	w0, [x22, x0]
 7d8:	cbnz	w0, 844 <gzvprintf+0x160>
 7dc:	ldr	x0, [x19, #16]
 7e0:	ldr	w22, [x23, #8]
 7e4:	add	w22, w20, w22
 7e8:	str	w22, [x23, #8]
 7ec:	add	x0, x0, w20, sxtw
 7f0:	str	x0, [x19, #16]
 7f4:	cmp	w21, w22
 7f8:	b.hi	738 <gzvprintf+0x54>  // b.pmore
 7fc:	str	w21, [x23, #8]
 800:	mov	x0, x19
 804:	mov	w1, #0x0                   	// #0
 808:	bl	e8 <gz_comp>
 80c:	cmn	w0, #0x1
 810:	b.eq	734 <gzvprintf+0x50>  // b.none
 814:	ldr	x0, [x19, #48]
 818:	sub	w2, w22, w21
 81c:	ldr	w1, [x19, #40]
 820:	sub	w24, w22, w21
 824:	add	x1, x0, x1
 828:	bl	0 <memcpy>
 82c:	ldr	x0, [x19, #48]
 830:	str	x0, [x19, #120]
 834:	str	w24, [x23, #8]
 838:	b	738 <gzvprintf+0x54>
 83c:	mov	w20, #0xfffffffe            	// #-2
 840:	b	738 <gzvprintf+0x54>
 844:	mov	w20, #0x0                   	// #0
 848:	b	738 <gzvprintf+0x54>

000000000000084c <gzprintf>:
 84c:	stp	x29, x30, [sp, #-256]!
 850:	mov	x29, sp
 854:	stp	x2, x3, [sp, #208]
 858:	add	x2, sp, #0x100
 85c:	stp	x2, x2, [sp, #48]
 860:	add	x2, sp, #0xd0
 864:	str	x2, [sp, #64]
 868:	mov	w2, #0xffffffd0            	// #-48
 86c:	str	w2, [sp, #72]
 870:	mov	w2, #0xffffff80            	// #-128
 874:	str	w2, [sp, #76]
 878:	ldp	x2, x3, [sp, #48]
 87c:	stp	x2, x3, [sp, #16]
 880:	ldp	x2, x3, [sp, #64]
 884:	stp	x2, x3, [sp, #32]
 888:	add	x2, sp, #0x10
 88c:	str	q0, [sp, #80]
 890:	str	q1, [sp, #96]
 894:	str	q2, [sp, #112]
 898:	str	q3, [sp, #128]
 89c:	str	q4, [sp, #144]
 8a0:	str	q5, [sp, #160]
 8a4:	str	q6, [sp, #176]
 8a8:	str	q7, [sp, #192]
 8ac:	stp	x4, x5, [sp, #224]
 8b0:	stp	x6, x7, [sp, #240]
 8b4:	bl	6e4 <gzvprintf>
 8b8:	ldp	x29, x30, [sp], #256
 8bc:	ret

00000000000008c0 <gzflush>:
 8c0:	cbz	x0, 934 <gzflush+0x74>
 8c4:	stp	x29, x30, [sp, #-32]!
 8c8:	mov	x29, sp
 8cc:	ldr	w2, [x0, #24]
 8d0:	stp	x19, x20, [sp, #16]
 8d4:	mov	w20, w1
 8d8:	mov	x19, x0
 8dc:	mov	w1, #0x79b1                	// #31153
 8e0:	cmp	w2, w1
 8e4:	b.ne	93c <gzflush+0x7c>  // b.any
 8e8:	ldr	w1, [x0, #108]
 8ec:	cbnz	w1, 93c <gzflush+0x7c>
 8f0:	cmp	w20, #0x4
 8f4:	b.hi	93c <gzflush+0x7c>  // b.pmore
 8f8:	ldr	w1, [x0, #104]
 8fc:	cbz	w1, 924 <gzflush+0x64>
 900:	ldr	x1, [x0, #96]
 904:	str	wzr, [x0, #104]
 908:	bl	26c <gz_zero>
 90c:	cmn	w0, #0x1
 910:	b.ne	924 <gzflush+0x64>  // b.any
 914:	ldr	w0, [x19, #108]
 918:	ldp	x19, x20, [sp, #16]
 91c:	ldp	x29, x30, [sp], #32
 920:	ret
 924:	mov	w1, w20
 928:	mov	x0, x19
 92c:	bl	e8 <gz_comp>
 930:	b	914 <gzflush+0x54>
 934:	mov	w0, #0xfffffffe            	// #-2
 938:	ret
 93c:	mov	w0, #0xfffffffe            	// #-2
 940:	b	918 <gzflush+0x58>

0000000000000944 <gzsetparams>:
 944:	stp	x29, x30, [sp, #-64]!
 948:	mov	x29, sp
 94c:	stp	x19, x20, [sp, #16]
 950:	stp	x21, x22, [sp, #32]
 954:	str	x23, [sp, #48]
 958:	cbz	x0, a14 <gzsetparams+0xd0>
 95c:	mov	x19, x0
 960:	mov	w22, w1
 964:	mov	w0, #0x79b1                	// #31153
 968:	ldr	w1, [x19, #24]
 96c:	cmp	w1, w0
 970:	b.ne	a14 <gzsetparams+0xd0>  // b.any
 974:	ldr	w20, [x19, #108]
 978:	cbnz	w20, a14 <gzsetparams+0xd0>
 97c:	ldr	w0, [x19, #88]
 980:	mov	w21, w2
 984:	cmp	w0, w22
 988:	b.ne	998 <gzsetparams+0x54>  // b.any
 98c:	ldr	w0, [x19, #92]
 990:	cmp	w0, w2
 994:	b.eq	9bc <gzsetparams+0x78>  // b.none
 998:	ldr	w0, [x19, #104]
 99c:	cbz	w0, 9d4 <gzsetparams+0x90>
 9a0:	ldr	x1, [x19, #96]
 9a4:	str	wzr, [x19, #104]
 9a8:	mov	x0, x19
 9ac:	bl	26c <gz_zero>
 9b0:	cmn	w0, #0x1
 9b4:	b.ne	9d4 <gzsetparams+0x90>  // b.any
 9b8:	ldr	w20, [x19, #108]
 9bc:	mov	w0, w20
 9c0:	ldp	x19, x20, [sp, #16]
 9c4:	ldp	x21, x22, [sp, #32]
 9c8:	ldr	x23, [sp, #48]
 9cc:	ldp	x29, x30, [sp], #64
 9d0:	ret
 9d4:	ldr	w0, [x19, #40]
 9d8:	cbz	w0, a0c <gzsetparams+0xc8>
 9dc:	ldr	w0, [x19, #128]
 9e0:	add	x23, x19, #0x78
 9e4:	cbz	w0, 9fc <gzsetparams+0xb8>
 9e8:	mov	x0, x19
 9ec:	mov	w1, #0x5                   	// #5
 9f0:	bl	e8 <gz_comp>
 9f4:	cmn	w0, #0x1
 9f8:	b.eq	9b8 <gzsetparams+0x74>  // b.none
 9fc:	mov	w2, w21
 a00:	mov	w1, w22
 a04:	mov	x0, x23
 a08:	bl	0 <deflateParams>
 a0c:	stp	w22, w21, [x19, #88]
 a10:	b	9bc <gzsetparams+0x78>
 a14:	mov	w20, #0xfffffffe            	// #-2
 a18:	b	9bc <gzsetparams+0x78>

0000000000000a1c <gzclose_w>:
 a1c:	stp	x29, x30, [sp, #-32]!
 a20:	mov	x29, sp
 a24:	stp	x19, x20, [sp, #16]
 a28:	cbz	x0, ae8 <gzclose_w+0xcc>
 a2c:	ldr	w2, [x0, #24]
 a30:	mov	w1, #0x79b1                	// #31153
 a34:	mov	x19, x0
 a38:	cmp	w2, w1
 a3c:	b.ne	ae8 <gzclose_w+0xcc>  // b.any
 a40:	ldr	w1, [x0, #104]
 a44:	cbnz	w1, acc <gzclose_w+0xb0>
 a48:	mov	w20, #0x0                   	// #0
 a4c:	mov	x0, x19
 a50:	mov	w1, #0x4                   	// #4
 a54:	bl	e8 <gz_comp>
 a58:	cmn	w0, #0x1
 a5c:	b.ne	a64 <gzclose_w+0x48>  // b.any
 a60:	ldr	w20, [x19, #108]
 a64:	ldr	w0, [x19, #40]
 a68:	cbz	w0, a8c <gzclose_w+0x70>
 a6c:	ldr	w0, [x19, #64]
 a70:	cbnz	w0, a84 <gzclose_w+0x68>
 a74:	add	x0, x19, #0x78
 a78:	bl	0 <deflateEnd>
 a7c:	ldr	x0, [x19, #56]
 a80:	bl	0 <free>
 a84:	ldr	x0, [x19, #48]
 a88:	bl	0 <free>
 a8c:	mov	x2, #0x0                   	// #0
 a90:	mov	w1, #0x0                   	// #0
 a94:	mov	x0, x19
 a98:	bl	0 <gz_error>
 a9c:	ldr	x0, [x19, #32]
 aa0:	bl	0 <free>
 aa4:	ldr	w0, [x19, #28]
 aa8:	bl	0 <close>
 aac:	cmn	w0, #0x1
 ab0:	csinv	w20, w20, wzr, ne  // ne = any
 ab4:	mov	x0, x19
 ab8:	bl	0 <free>
 abc:	mov	w0, w20
 ac0:	ldp	x19, x20, [sp, #16]
 ac4:	ldp	x29, x30, [sp], #32
 ac8:	ret
 acc:	ldr	x1, [x0, #96]
 ad0:	str	wzr, [x0, #104]
 ad4:	bl	26c <gz_zero>
 ad8:	cmn	w0, #0x1
 adc:	b.ne	a48 <gzclose_w+0x2c>  // b.any
 ae0:	ldr	w20, [x19, #108]
 ae4:	b	a4c <gzclose_w+0x30>
 ae8:	mov	w20, #0xfffffffe            	// #-2
 aec:	b	abc <gzclose_w+0xa0>
