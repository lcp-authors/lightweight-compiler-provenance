In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_gcc_-O1:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_debug>:
   0:	adrp	x0, 0 <init_debug>
   4:	ldr	w0, [x0]
   8:	tbz	w0, #15, 10 <init_debug+0x10>
   c:	ret
  10:	stp	x29, x30, [sp, #-64]!
  14:	mov	x29, sp
  18:	adrp	x0, 0 <init_debug>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <getenv>
  24:	cbz	x0, 68 <init_debug+0x68>
  28:	mov	w2, #0x0                   	// #0
  2c:	add	x1, sp, #0x38
  30:	bl	0 <strtoul>
  34:	adrp	x1, 0 <init_debug>
  38:	str	w0, [x1]
  3c:	ldr	x0, [sp, #56]
  40:	ldrb	w0, [x0]
  44:	cbnz	w0, 54 <init_debug+0x54>
  48:	bl	0 <__errno_location>
  4c:	ldr	w0, [x0]
  50:	cbz	w0, 68 <init_debug+0x68>
  54:	adrp	x0, 0 <init_debug>
  58:	mov	w1, #0x8000                	// #32768
  5c:	str	w1, [x0]
  60:	ldp	x29, x30, [sp], #64
  64:	ret
  68:	adrp	x1, 0 <init_debug>
  6c:	ldr	w0, [x1]
  70:	orr	w0, w0, #0x8000
  74:	str	w0, [x1]
  78:	cmp	w0, #0x8, lsl #12
  7c:	b.eq	60 <init_debug+0x60>  // b.none
  80:	stp	x19, x20, [sp, #16]
  84:	bl	0 <getuid>
  88:	mov	w19, w0
  8c:	bl	0 <geteuid>
  90:	cmp	w19, w0
  94:	b.ne	ec <init_debug+0xec>  // b.any
  98:	bl	0 <getgid>
  9c:	mov	w19, w0
  a0:	bl	0 <getegid>
  a4:	cmp	w19, w0
  a8:	b.ne	ec <init_debug+0xec>  // b.any
  ac:	mov	w4, #0x0                   	// #0
  b0:	mov	w3, #0x0                   	// #0
  b4:	mov	w2, #0x0                   	// #0
  b8:	mov	w1, #0x0                   	// #0
  bc:	mov	w0, #0x3                   	// #3
  c0:	bl	0 <prctl>
  c4:	cbz	w0, ec <init_debug+0xec>
  c8:	adrp	x0, 0 <init_debug>
  cc:	add	x0, x0, #0x0
  d0:	bl	0 <secure_getenv>
  d4:	cbz	x0, ec <init_debug+0xec>
  d8:	adrp	x1, 0 <init_debug>
  dc:	add	x1, x1, #0x0
  e0:	bl	0 <fopen>
  e4:	adrp	x1, 0 <init_debug>
  e8:	str	x0, [x1]
  ec:	adrp	x0, 0 <init_debug>
  f0:	ldr	x0, [x0]
  f4:	cbz	x0, 10c <init_debug+0x10c>
  f8:	bl	0 <fileno>
  fc:	mov	w19, w0
 100:	tbz	w0, #31, 140 <init_debug+0x140>
 104:	ldp	x19, x20, [sp, #16]
 108:	b	60 <init_debug+0x60>
 10c:	adrp	x1, 0 <init_debug>
 110:	add	x1, x1, #0x0
 114:	adrp	x0, 0 <init_debug>
 118:	add	x0, x0, #0x0
 11c:	bl	0 <fopen>
 120:	adrp	x1, 0 <init_debug>
 124:	str	x0, [x1]
 128:	cbnz	x0, f8 <init_debug+0xf8>
 12c:	adrp	x0, 0 <init_debug>
 130:	mov	w1, #0x8000                	// #32768
 134:	str	w1, [x0]
 138:	ldp	x19, x20, [sp, #16]
 13c:	b	60 <init_debug+0x60>
 140:	mov	w1, #0x1                   	// #1
 144:	bl	0 <fcntl>
 148:	tbz	w0, #31, 19c <init_debug+0x19c>
 14c:	str	x21, [sp, #32]
 150:	adrp	x20, 0 <init_debug>
 154:	add	x19, x20, #0x0
 158:	ldr	x21, [x19, #8]
 15c:	bl	0 <__errno_location>
 160:	ldr	w0, [x0]
 164:	bl	0 <strerror>
 168:	mov	x2, x0
 16c:	adrp	x1, 0 <init_debug>
 170:	add	x1, x1, #0x0
 174:	mov	x0, x21
 178:	bl	0 <fprintf>
 17c:	ldr	x0, [x19, #8]
 180:	bl	0 <fclose>
 184:	str	xzr, [x19, #8]
 188:	mov	w0, #0x8000                	// #32768
 18c:	str	w0, [x20]
 190:	ldp	x19, x20, [sp, #16]
 194:	ldr	x21, [sp, #32]
 198:	b	60 <init_debug+0x60>
 19c:	orr	w2, w0, #0x1
 1a0:	mov	w1, #0x2                   	// #2
 1a4:	mov	w0, w19
 1a8:	bl	0 <fcntl>
 1ac:	tbnz	w0, #31, 14c <init_debug+0x14c>
 1b0:	ldp	x19, x20, [sp, #16]
 1b4:	b	60 <init_debug+0x60>

00000000000001b8 <setup_et_lock>:
 1b8:	stp	x29, x30, [sp, #-32]!
 1bc:	mov	x29, sp
 1c0:	str	x19, [sp, #16]
 1c4:	adrp	x19, 0 <init_debug>
 1c8:	add	x19, x19, #0x0
 1cc:	mov	w2, #0x1                   	// #1
 1d0:	mov	w1, #0x0                   	// #0
 1d4:	add	x0, x19, #0x10
 1d8:	bl	0 <sem_init>
 1dc:	mov	w0, #0x1                   	// #1
 1e0:	str	w0, [x19, #48]
 1e4:	ldr	x19, [sp, #16]
 1e8:	ldp	x29, x30, [sp], #32
 1ec:	ret

00000000000001f0 <fini_et_lock>:
 1f0:	stp	x29, x30, [sp, #-32]!
 1f4:	mov	x29, sp
 1f8:	str	x19, [sp, #16]
 1fc:	adrp	x19, 0 <init_debug>
 200:	add	x19, x19, #0x0
 204:	add	x0, x19, #0x10
 208:	bl	0 <sem_destroy>
 20c:	str	wzr, [x19, #48]
 210:	ldr	x19, [sp, #16]
 214:	ldp	x29, x30, [sp], #32
 218:	ret

000000000000021c <et_list_lock>:
 21c:	stp	x29, x30, [sp, #-16]!
 220:	mov	x29, sp
 224:	adrp	x0, 0 <init_debug>
 228:	ldr	w0, [x0]
 22c:	cbz	w0, 248 <et_list_lock+0x2c>
 230:	adrp	x0, 0 <init_debug>
 234:	add	x0, x0, #0x0
 238:	add	x0, x0, #0x10
 23c:	bl	0 <sem_wait>
 240:	ldp	x29, x30, [sp], #16
 244:	ret
 248:	bl	1b8 <setup_et_lock>
 24c:	b	230 <et_list_lock+0x14>

0000000000000250 <et_list_unlock>:
 250:	adrp	x0, 0 <init_debug>
 254:	ldr	w0, [x0]
 258:	cbnz	w0, 260 <et_list_unlock+0x10>
 25c:	ret
 260:	stp	x29, x30, [sp, #-16]!
 264:	mov	x29, sp
 268:	adrp	x0, 0 <init_debug>
 26c:	add	x0, x0, #0x0
 270:	add	x0, x0, #0x10
 274:	bl	0 <sem_post>
 278:	ldp	x29, x30, [sp], #16
 27c:	ret

0000000000000280 <set_com_err_gettext>:
 280:	mov	x2, x0
 284:	adrp	x1, 0 <init_debug>
 288:	add	x1, x1, #0x0
 28c:	ldr	x0, [x1, #56]
 290:	str	x2, [x1, #56]
 294:	ret

0000000000000298 <error_message>:
 298:	stp	x29, x30, [sp, #-48]!
 29c:	mov	x29, sp
 2a0:	stp	x19, x20, [sp, #16]
 2a4:	and	w20, w0, #0xff
 2a8:	ands	x19, x0, #0xffffffffffffff00
 2ac:	b.ne	2e8 <error_message+0x50>  // b.any
 2b0:	mov	w0, w20
 2b4:	bl	0 <strerror>
 2b8:	mov	x19, x0
 2bc:	cbnz	x0, 4a4 <error_message+0x20c>
 2c0:	mrs	x0, tpidr_el0
 2c4:	add	x0, x0, #0x0, lsl #12
 2c8:	add	x0, x0, #0x0
 2cc:	adrp	x1, 0 <init_debug>
 2d0:	add	x1, x1, #0x0
 2d4:	ldr	x2, [x1]
 2d8:	str	x2, [x0]
 2dc:	ldur	x1, [x1, #6]
 2e0:	stur	x1, [x0, #6]
 2e4:	b	390 <error_message+0xf8>
 2e8:	bl	21c <et_list_lock>
 2ec:	adrp	x0, 0 <init_debug>
 2f0:	ldr	x0, [x0]
 2f4:	cbz	x0, 314 <error_message+0x7c>
 2f8:	ldr	x2, [x0, #8]
 2fc:	ldr	x1, [x2, #8]
 300:	eor	x1, x19, x1
 304:	tst	x1, #0xffffff
 308:	b.eq	40c <error_message+0x174>  // b.none
 30c:	ldr	x0, [x0]
 310:	cbnz	x0, 2f8 <error_message+0x60>
 314:	adrp	x0, 0 <init_debug>
 318:	ldr	x0, [x0]
 31c:	cbz	x0, 33c <error_message+0xa4>
 320:	ldr	x2, [x0, #8]
 324:	ldr	x1, [x2, #8]
 328:	eor	x1, x19, x1
 32c:	tst	x1, #0xffffff
 330:	b.eq	440 <error_message+0x1a8>  // b.none
 334:	ldr	x0, [x0]
 338:	cbnz	x0, 320 <error_message+0x88>
 33c:	str	x21, [sp, #32]
 340:	bl	250 <et_list_unlock>
 344:	mrs	x21, tpidr_el0
 348:	add	x21, x21, #0x0, lsl #12
 34c:	add	x21, x21, #0x0
 350:	adrp	x0, 0 <init_debug>
 354:	add	x0, x0, #0x0
 358:	ldr	x1, [x0]
 35c:	str	x1, [x21]
 360:	ldur	x0, [x0, #6]
 364:	stur	x0, [x21, #6]
 368:	mov	x0, x19
 36c:	bl	0 <error_table_name>
 370:	mov	x1, x0
 374:	mov	x0, x21
 378:	bl	0 <strcat>
 37c:	mov	x0, x21
 380:	bl	0 <strlen>
 384:	mov	w1, #0x20                  	// #32
 388:	strh	w1, [x21, x0]
 38c:	ldr	x21, [sp, #32]
 390:	mrs	x0, tpidr_el0
 394:	add	x0, x0, #0x0, lsl #12
 398:	add	x0, x0, #0x0
 39c:	ldrb	w0, [x0]
 3a0:	cbz	w0, 474 <error_message+0x1dc>
 3a4:	mrs	x0, tpidr_el0
 3a8:	add	x0, x0, #0x0, lsl #12
 3ac:	add	x0, x0, #0x0
 3b0:	ldrb	w1, [x0, #1]!
 3b4:	cbnz	w1, 3b0 <error_message+0x118>
 3b8:	cmp	w20, #0x63
 3bc:	b.le	484 <error_message+0x1ec>
 3c0:	mov	w1, #0x851f                	// #34079
 3c4:	movk	w1, #0x51eb, lsl #16
 3c8:	smull	x1, w20, w1
 3cc:	asr	x1, x1, #37
 3d0:	sub	w1, w1, w20, asr #31
 3d4:	add	w2, w1, #0x30
 3d8:	strb	w2, [x0], #1
 3dc:	mov	w2, #0x64                  	// #100
 3e0:	msub	w20, w1, w2, w20
 3e4:	mov	w1, #0x6667                	// #26215
 3e8:	movk	w1, #0x6666, lsl #16
 3ec:	smull	x1, w20, w1
 3f0:	asr	x1, x1, #34
 3f4:	sub	w1, w1, w20, asr #31
 3f8:	add	w2, w1, #0x30
 3fc:	strb	w2, [x0], #1
 400:	add	w1, w1, w1, lsl #2
 404:	sub	w20, w20, w1, lsl #1
 408:	b	48c <error_message+0x1f4>
 40c:	ldr	w0, [x2, #16]
 410:	cmp	w0, w20
 414:	b.le	314 <error_message+0x7c>
 418:	ldr	x0, [x2]
 41c:	ldr	x19, [x0, w20, sxtw #3]
 420:	bl	250 <et_list_unlock>
 424:	adrp	x0, 0 <init_debug>
 428:	ldr	x1, [x0]
 42c:	cbz	x1, 4a4 <error_message+0x20c>
 430:	mov	x0, x19
 434:	blr	x1
 438:	mov	x19, x0
 43c:	b	4a4 <error_message+0x20c>
 440:	ldr	w0, [x2, #16]
 444:	cmp	w0, w20
 448:	b.le	33c <error_message+0xa4>
 44c:	ldr	x0, [x2]
 450:	ldr	x19, [x0, w20, sxtw #3]
 454:	bl	250 <et_list_unlock>
 458:	adrp	x0, 0 <init_debug>
 45c:	ldr	x1, [x0]
 460:	cbz	x1, 4a4 <error_message+0x20c>
 464:	mov	x0, x19
 468:	blr	x1
 46c:	mov	x19, x0
 470:	b	4a4 <error_message+0x20c>
 474:	mrs	x0, tpidr_el0
 478:	add	x0, x0, #0x0, lsl #12
 47c:	add	x0, x0, #0x0
 480:	b	3b8 <error_message+0x120>
 484:	cmp	w20, #0x9
 488:	b.gt	3e4 <error_message+0x14c>
 48c:	add	w20, w20, #0x30
 490:	strb	w20, [x0]
 494:	strb	wzr, [x0, #1]
 498:	mrs	x19, tpidr_el0
 49c:	add	x19, x19, #0x0, lsl #12
 4a0:	add	x19, x19, #0x0
 4a4:	mov	x0, x19
 4a8:	ldp	x19, x20, [sp, #16]
 4ac:	ldp	x29, x30, [sp], #48
 4b0:	ret

00000000000004b4 <add_error_table>:
 4b4:	stp	x29, x30, [sp, #-48]!
 4b8:	mov	x29, sp
 4bc:	stp	x19, x20, [sp, #16]
 4c0:	mov	x20, x0
 4c4:	mov	x0, #0x10                  	// #16
 4c8:	bl	0 <malloc>
 4cc:	cbz	x0, 55c <add_error_table+0xa8>
 4d0:	mov	x19, x0
 4d4:	bl	21c <et_list_lock>
 4d8:	cbnz	w0, 51c <add_error_table+0x68>
 4dc:	str	x21, [sp, #32]
 4e0:	str	x20, [x19, #8]
 4e4:	adrp	x21, 0 <init_debug>
 4e8:	add	x0, x21, #0x0
 4ec:	ldr	x1, [x0, #72]
 4f0:	str	x1, [x19]
 4f4:	str	x19, [x0, #72]
 4f8:	bl	0 <init_debug>
 4fc:	ldr	w0, [x21]
 500:	tbnz	w0, #0, 530 <add_error_table+0x7c>
 504:	bl	250 <et_list_unlock>
 508:	mov	x0, #0x0                   	// #0
 50c:	ldr	x21, [sp, #32]
 510:	ldp	x19, x20, [sp, #16]
 514:	ldp	x29, x30, [sp], #48
 518:	ret
 51c:	mov	x0, x19
 520:	bl	0 <free>
 524:	bl	0 <__errno_location>
 528:	ldrsw	x0, [x0]
 52c:	b	510 <add_error_table+0x5c>
 530:	adrp	x0, 0 <init_debug>
 534:	ldr	x19, [x0]
 538:	ldr	x0, [x20, #8]
 53c:	bl	0 <error_table_name>
 540:	mov	x3, x20
 544:	mov	x2, x0
 548:	adrp	x1, 0 <init_debug>
 54c:	add	x1, x1, #0x0
 550:	mov	x0, x19
 554:	bl	0 <fprintf>
 558:	b	504 <add_error_table+0x50>
 55c:	mov	x0, #0xc                   	// #12
 560:	b	510 <add_error_table+0x5c>

0000000000000564 <remove_error_table>:
 564:	stp	x29, x30, [sp, #-32]!
 568:	mov	x29, sp
 56c:	stp	x19, x20, [sp, #16]
 570:	mov	x20, x0
 574:	bl	21c <et_list_lock>
 578:	cbnz	w0, 664 <remove_error_table+0x100>
 57c:	adrp	x0, 0 <init_debug>
 580:	ldr	x19, [x0]
 584:	bl	0 <init_debug>
 588:	cbz	x19, 5b8 <remove_error_table+0x54>
 58c:	ldr	x3, [x20, #8]
 590:	mov	x2, #0x0                   	// #0
 594:	b	59c <remove_error_table+0x38>
 598:	mov	x19, x1
 59c:	ldr	x1, [x19, #8]
 5a0:	ldr	x1, [x1, #8]
 5a4:	cmp	x1, x3
 5a8:	b.eq	5d0 <remove_error_table+0x6c>  // b.none
 5ac:	ldr	x1, [x19]
 5b0:	mov	x2, x19
 5b4:	cbnz	x1, 598 <remove_error_table+0x34>
 5b8:	adrp	x0, 0 <init_debug>
 5bc:	ldr	w0, [x0]
 5c0:	tbnz	w0, #0, 638 <remove_error_table+0xd4>
 5c4:	bl	250 <et_list_unlock>
 5c8:	mov	x0, #0x2                   	// #2
 5cc:	b	668 <remove_error_table+0x104>
 5d0:	cbz	x2, 5fc <remove_error_table+0x98>
 5d4:	ldr	x0, [x19]
 5d8:	str	x0, [x2]
 5dc:	mov	x0, x19
 5e0:	bl	0 <free>
 5e4:	adrp	x0, 0 <init_debug>
 5e8:	ldr	w0, [x0]
 5ec:	tbnz	w0, #0, 60c <remove_error_table+0xa8>
 5f0:	bl	250 <et_list_unlock>
 5f4:	mov	x0, #0x0                   	// #0
 5f8:	b	668 <remove_error_table+0x104>
 5fc:	ldr	x1, [x19]
 600:	adrp	x0, 0 <init_debug>
 604:	str	x1, [x0]
 608:	b	5dc <remove_error_table+0x78>
 60c:	adrp	x0, 0 <init_debug>
 610:	ldr	x19, [x0]
 614:	ldr	x0, [x20, #8]
 618:	bl	0 <error_table_name>
 61c:	mov	x3, x20
 620:	mov	x2, x0
 624:	adrp	x1, 0 <init_debug>
 628:	add	x1, x1, #0x0
 62c:	mov	x0, x19
 630:	bl	0 <fprintf>
 634:	b	5f0 <remove_error_table+0x8c>
 638:	adrp	x0, 0 <init_debug>
 63c:	ldr	x19, [x0]
 640:	ldr	x0, [x20, #8]
 644:	bl	0 <error_table_name>
 648:	mov	x3, x20
 64c:	mov	x2, x0
 650:	adrp	x1, 0 <init_debug>
 654:	add	x1, x1, #0x0
 658:	mov	x0, x19
 65c:	bl	0 <fprintf>
 660:	b	5c4 <remove_error_table+0x60>
 664:	mov	x0, #0x2                   	// #2
 668:	ldp	x19, x20, [sp, #16]
 66c:	ldp	x29, x30, [sp], #32
 670:	ret

0000000000000674 <add_to_error_table>:
 674:	stp	x29, x30, [sp, #-16]!
 678:	mov	x29, sp
 67c:	ldr	x0, [x0, #8]
 680:	bl	4b4 <add_error_table>
 684:	ldp	x29, x30, [sp], #16
 688:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	lsr	w0, w0, #8
   4:	mov	w3, #0x12                  	// #18
   8:	adrp	x2, 0 <error_table_name>
   c:	add	x2, x2, #0x0
  10:	adrp	x4, 0 <error_table_name>
  14:	add	x4, x4, #0x0
  18:	b	28 <error_table_name+0x28>
  1c:	sub	w3, w3, #0x6
  20:	cmn	w3, #0x6
  24:	b.eq	44 <error_table_name+0x44>  // b.none
  28:	asr	x1, x0, x3
  2c:	ands	w1, w1, #0x3f
  30:	b.eq	1c <error_table_name+0x1c>  // b.none
  34:	sub	w1, w1, #0x1
  38:	ldrb	w1, [x4, w1, sxtw]
  3c:	strb	w1, [x2], #1
  40:	b	1c <error_table_name+0x1c>
  44:	strb	wzr, [x2]
  48:	adrp	x0, 0 <error_table_name>
  4c:	add	x0, x0, #0x0
  50:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	cmp	w2, #0x0
   4:	ccmp	x0, #0x0, #0x4, ne  // ne = any
   8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   c:	b.ne	18 <init_error_table+0x18>  // b.any
  10:	mov	w0, #0x0                   	// #0
  14:	ret
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	str	x21, [sp, #32]
  28:	mov	x21, x0
  2c:	mov	x20, x1
  30:	mov	w19, w2
  34:	mov	x0, #0x28                  	// #40
  38:	bl	0 <malloc>
  3c:	mov	x3, x0
  40:	cbz	x0, 7c <init_error_table+0x7c>
  44:	add	x0, x0, #0x10
  48:	str	x0, [x3, #8]
  4c:	str	x21, [x3, #16]
  50:	str	x20, [x3, #24]
  54:	str	w19, [x3, #32]
  58:	adrp	x0, 0 <_et_dynamic_list>
  5c:	ldr	x1, [x0]
  60:	str	x1, [x3]
  64:	str	x3, [x0]
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldr	x21, [sp, #32]
  74:	ldp	x29, x30, [sp], #48
  78:	ret
  7c:	mov	w0, #0xc                   	// #12
  80:	b	6c <init_error_table+0x6c>

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x23, x0
  18:	mov	x21, x1
  1c:	mov	x19, x2
  20:	mov	x22, x3
  24:	adrp	x1, 0 <stderr>
  28:	ldr	x0, [x1]
  2c:	bl	0 <fileno>
  30:	mov	w20, w0
  34:	cbz	x23, 60 <default_com_err_proc+0x60>
  38:	adrp	x24, 0 <stderr>
  3c:	ldr	x1, [x24]
  40:	mov	x0, x23
  44:	bl	0 <fputs>
  48:	ldr	x3, [x24]
  4c:	mov	x2, #0x2                   	// #2
  50:	mov	x1, #0x1                   	// #1
  54:	adrp	x0, 0 <default_com_err_proc>
  58:	add	x0, x0, #0x0
  5c:	bl	0 <fwrite>
  60:	cbnz	x21, c4 <default_com_err_proc+0xc4>
  64:	cbz	x19, 8c <default_com_err_proc+0x8c>
  68:	ldp	x0, x1, [x22]
  6c:	stp	x0, x1, [sp, #64]
  70:	ldp	x0, x1, [x22, #16]
  74:	stp	x0, x1, [sp, #80]
  78:	add	x2, sp, #0x40
  7c:	mov	x1, x19
  80:	adrp	x0, 0 <stderr>
  84:	ldr	x0, [x0]
  88:	bl	0 <vfprintf>
  8c:	mov	w0, w20
  90:	bl	0 <isatty>
  94:	cbnz	w0, e8 <default_com_err_proc+0xe8>
  98:	adrp	x19, 0 <stderr>
  9c:	ldr	x1, [x19]
  a0:	mov	w0, #0xa                   	// #10
  a4:	bl	0 <fputc>
  a8:	ldr	x0, [x19]
  ac:	bl	0 <fflush>
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x23, x24, [sp, #48]
  bc:	ldp	x29, x30, [sp], #160
  c0:	ret
  c4:	mov	x0, x21
  c8:	bl	0 <error_message>
  cc:	adrp	x21, 0 <stderr>
  d0:	ldr	x1, [x21]
  d4:	bl	0 <fputs>
  d8:	ldr	x1, [x21]
  dc:	mov	w0, #0x20                  	// #32
  e0:	bl	0 <fputc>
  e4:	b	64 <default_com_err_proc+0x64>
  e8:	add	x1, sp, #0x60
  ec:	mov	w0, w20
  f0:	bl	0 <tcgetattr>
  f4:	cbnz	w0, 10c <default_com_err_proc+0x10c>
  f8:	ldr	w0, [sp, #100]
  fc:	mov	w1, #0x5                   	// #5
 100:	and	w0, w0, w1
 104:	cmp	w0, w1
 108:	b.eq	98 <default_com_err_proc+0x98>  // b.none
 10c:	adrp	x0, 0 <stderr>
 110:	ldr	x1, [x0]
 114:	mov	w0, #0xd                   	// #13
 118:	bl	0 <fputc>
 11c:	b	98 <default_com_err_proc+0x98>

0000000000000120 <com_err_va>:
 120:	stp	x29, x30, [sp, #-48]!
 124:	mov	x29, sp
 128:	ldp	x4, x5, [x3]
 12c:	stp	x4, x5, [sp, #16]
 130:	ldp	x4, x5, [x3, #16]
 134:	stp	x4, x5, [sp, #32]
 138:	adrp	x3, 0 <default_com_err_proc>
 13c:	ldr	x4, [x3]
 140:	add	x3, sp, #0x10
 144:	blr	x4
 148:	ldp	x29, x30, [sp], #48
 14c:	ret

0000000000000150 <com_err>:
 150:	stp	x29, x30, [sp, #-256]!
 154:	mov	x29, sp
 158:	str	x3, [sp, #216]
 15c:	str	x4, [sp, #224]
 160:	str	x5, [sp, #232]
 164:	str	x6, [sp, #240]
 168:	str	x7, [sp, #248]
 16c:	str	q0, [sp, #80]
 170:	str	q1, [sp, #96]
 174:	str	q2, [sp, #112]
 178:	str	q3, [sp, #128]
 17c:	str	q4, [sp, #144]
 180:	str	q5, [sp, #160]
 184:	str	q6, [sp, #176]
 188:	str	q7, [sp, #192]
 18c:	adrp	x3, 0 <default_com_err_proc>
 190:	ldr	x3, [x3]
 194:	cbz	x3, 1dc <com_err+0x8c>
 198:	add	x3, sp, #0x100
 19c:	str	x3, [sp, #48]
 1a0:	str	x3, [sp, #56]
 1a4:	add	x3, sp, #0xd0
 1a8:	str	x3, [sp, #64]
 1ac:	mov	w3, #0xffffffd8            	// #-40
 1b0:	str	w3, [sp, #72]
 1b4:	mov	w3, #0xffffff80            	// #-128
 1b8:	str	w3, [sp, #76]
 1bc:	ldp	x4, x5, [sp, #48]
 1c0:	stp	x4, x5, [sp, #16]
 1c4:	ldp	x4, x5, [sp, #64]
 1c8:	stp	x4, x5, [sp, #32]
 1cc:	add	x3, sp, #0x10
 1d0:	bl	120 <com_err_va>
 1d4:	ldp	x29, x30, [sp], #256
 1d8:	ret
 1dc:	adrp	x4, 0 <default_com_err_proc>
 1e0:	adrp	x3, 0 <default_com_err_proc>
 1e4:	add	x3, x3, #0x0
 1e8:	str	x3, [x4]
 1ec:	b	198 <com_err+0x48>

00000000000001f0 <set_com_err_hook>:
 1f0:	mov	x1, x0
 1f4:	adrp	x0, 0 <default_com_err_proc>
 1f8:	ldr	x0, [x0]
 1fc:	adrp	x2, 0 <default_com_err_proc>
 200:	add	x2, x2, #0x0
 204:	cmp	x1, #0x0
 208:	csel	x1, x2, x1, eq  // eq = none
 20c:	adrp	x2, 0 <default_com_err_proc>
 210:	str	x1, [x2]
 214:	ret

0000000000000218 <reset_com_err_hook>:
 218:	adrp	x2, 0 <default_com_err_proc>
 21c:	ldr	x0, [x2]
 220:	adrp	x1, 0 <default_com_err_proc>
 224:	add	x1, x1, #0x0
 228:	str	x1, [x2]
 22c:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbnz	x0, 10 <com_right+0x10>
   4:	b	3c <com_right+0x3c>
   8:	ldr	x0, [x0]
   c:	cbz	x0, 3c <com_right+0x3c>
  10:	ldr	x2, [x0, #8]
  14:	ldr	x3, [x2, #8]
  18:	cmp	x3, x1
  1c:	b.gt	8 <com_right+0x8>
  20:	ldrsw	x4, [x2, #16]
  24:	add	x4, x4, x3
  28:	cmp	x4, x1
  2c:	b.le	8 <com_right+0x8>
  30:	sub	x1, x1, x3
  34:	ldr	x0, [x2]
  38:	ldr	x0, [x0, x1, lsl #3]
  3c:	ret

0000000000000040 <com_right_r>:
  40:	stp	x29, x30, [sp, #-32]!
  44:	mov	x29, sp
  48:	stp	x19, x20, [sp, #16]
  4c:	mov	x20, x2
  50:	mov	x19, x3
  54:	cbnz	x0, 64 <com_right_r+0x24>
  58:	b	a8 <com_right_r+0x68>
  5c:	ldr	x0, [x0]
  60:	cbz	x0, a8 <com_right_r+0x68>
  64:	ldr	x4, [x0, #8]
  68:	ldr	x5, [x4, #8]
  6c:	cmp	x5, x1
  70:	b.gt	5c <com_right_r+0x1c>
  74:	ldrsw	x6, [x4, #16]
  78:	add	x6, x6, x5
  7c:	cmp	x6, x1
  80:	b.le	5c <com_right_r+0x1c>
  84:	sub	x1, x1, x5
  88:	ldr	x0, [x4]
  8c:	mov	x2, x19
  90:	ldr	x1, [x0, x1, lsl #3]
  94:	mov	x0, x20
  98:	bl	0 <strncpy>
  9c:	add	x3, x20, x19
  a0:	sturb	wzr, [x3, #-1]
  a4:	mov	x0, x20
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x29, x30, [sp], #32
  b0:	ret

00000000000000b4 <initialize_error_table_r>:
  b4:	stp	x29, x30, [sp, #-48]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	stp	x21, x22, [sp, #32]
  c4:	mov	x19, x1
  c8:	mov	w22, w2
  cc:	mov	x21, x3
  d0:	ldr	x4, [x0]
  d4:	mov	x20, x0
  d8:	cbnz	x4, e4 <initialize_error_table_r+0x30>
  dc:	b	100 <initialize_error_table_r+0x4c>
  e0:	mov	x4, x0
  e4:	ldr	x0, [x4, #8]
  e8:	ldr	x0, [x0]
  ec:	cmp	x0, x19
  f0:	b.eq	128 <initialize_error_table_r+0x74>  // b.none
  f4:	ldr	x0, [x4]
  f8:	cbnz	x0, e0 <initialize_error_table_r+0x2c>
  fc:	mov	x20, x4
 100:	mov	x0, #0x28                  	// #40
 104:	bl	0 <malloc>
 108:	cbz	x0, 128 <initialize_error_table_r+0x74>
 10c:	add	x1, x0, #0x10
 110:	str	x1, [x0, #8]
 114:	str	x19, [x0, #16]
 118:	str	w22, [x0, #32]
 11c:	str	x21, [x0, #24]
 120:	str	xzr, [x0]
 124:	str	x0, [x20]
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldp	x21, x22, [sp, #32]
 130:	ldp	x29, x30, [sp], #48
 134:	ret

0000000000000138 <free_error_table>:
 138:	stp	x29, x30, [sp, #-32]!
 13c:	mov	x29, sp
 140:	str	x19, [sp, #16]
 144:	mov	x19, x0
 148:	cbz	x0, 15c <free_error_table+0x24>
 14c:	mov	x0, x19
 150:	ldr	x19, [x19]
 154:	bl	0 <free>
 158:	cbnz	x19, 14c <free_error_table+0x14>
 15c:	ldr	x19, [sp, #16]
 160:	ldp	x29, x30, [sp], #32
 164:	ret
