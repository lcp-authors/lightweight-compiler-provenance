
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//luks.module_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <luks_recover_key>:
   0:	sub	sp, sp, #0x4e0
   4:	mov	x2, #0xf0                  	// #240
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x1
  18:	mov	w1, #0x0                   	// #0
  1c:	stp	x21, x22, [sp, #32]
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x0
  28:	add	x0, sp, #0x1a0
  2c:	stp	x25, x26, [sp, #64]
  30:	stp	x27, x28, [sp, #80]
  34:	stp	xzr, xzr, [sp, #400]
  38:	bl	0 <memset>
  3c:	add	x4, sp, #0x290
  40:	mov	x0, x23
  44:	mov	x3, #0x250                 	// #592
  48:	mov	x2, #0x0                   	// #0
  4c:	mov	x1, #0x0                   	// #0
  50:	bl	0 <grub_disk_read>
  54:	mov	w19, w0
  58:	cbnz	w0, f4 <luks_recover_key+0xf4>
  5c:	adrp	x0, 0 <luks_recover_key>
  60:	ldr	x0, [x0]
  64:	bl	0 <grub_puts_>
  68:	ldr	w22, [sp, #764]
  6c:	rev	w26, w22
  70:	rev	w22, w22
  74:	cmp	w26, #0x80
  78:	b.ls	94 <luks_recover_key+0x94>  // b.plast
  7c:	adrp	x0, 0 <luks_recover_key>
  80:	ldr	x1, [x0]
  84:	mov	w0, #0x9                   	// #9
  88:	bl	0 <grub_error>
  8c:	mov	w19, w0
  90:	b	f4 <luks_recover_key+0xf4>
  94:	add	x21, sp, #0x290
  98:	mov	w4, #0x71f3                	// #29171
  9c:	add	x3, x21, #0x180
  a0:	mov	x1, x21
  a4:	mov	x0, #0x1                   	// #1
  a8:	movk	w4, #0xac, lsl #16
  ac:	ldr	w2, [x1, #208]
  b0:	rev	w2, w2
  b4:	cmp	w2, w4
  b8:	b.ne	cc <luks_recover_key+0xcc>  // b.any
  bc:	ldr	w2, [x1, #252]
  c0:	rev	w2, w2
  c4:	cmp	x0, x2
  c8:	csel	x0, x0, x2, cs  // cs = hs, nlast
  cc:	add	x1, x1, #0x30
  d0:	cmp	x3, x1
  d4:	b.ne	ac <luks_recover_key+0xac>  // b.any
  d8:	mul	x0, x0, x22
  dc:	bl	0 <grub_malloc>
  e0:	mov	x27, x0
  e4:	cbnz	x0, 118 <luks_recover_key+0x118>
  e8:	adrp	x0, 0 <luks_recover_key>
  ec:	ldr	x0, [x0]
  f0:	ldr	w19, [x0]
  f4:	mov	w0, w19
  f8:	ldp	x29, x30, [sp]
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x23, x24, [sp, #48]
 108:	ldp	x25, x26, [sp, #64]
 10c:	ldp	x27, x28, [sp, #80]
 110:	add	sp, sp, #0x4e0
 114:	ret
 118:	ldr	x24, [x23, #40]
 11c:	cbz	x24, 12c <luks_recover_key+0x12c>
 120:	mov	x0, x24
 124:	bl	0 <grub_partition_get_name>
 128:	mov	x24, x0
 12c:	adrp	x1, 0 <luks_recover_key>
 130:	add	x4, x20, #0x8c
 134:	ldr	x0, [x23, #40]
 138:	ldr	x3, [x1]
 13c:	adrp	x1, 0 <luks_recover_key>
 140:	cmp	x0, #0x0
 144:	adrp	x0, 0 <luks_recover_key>
 148:	ldr	x2, [x1]
 14c:	ldr	x0, [x0]
 150:	csel	x2, x3, x2, eq  // eq = none
 154:	ldr	x1, [x23]
 158:	cmp	x24, #0x0
 15c:	csel	x3, x24, x3, ne  // ne = any
 160:	bl	0 <grub_printf_>
 164:	mov	x0, x24
 168:	bl	0 <grub_free>
 16c:	add	x0, sp, #0x190
 170:	mov	w1, #0x100                 	// #256
 174:	bl	0 <grub_password_get>
 178:	cbnz	w0, 194 <luks_recover_key+0x194>
 17c:	mov	x0, x27
 180:	bl	0 <grub_free>
 184:	adrp	x0, 0 <luks_recover_key>
 188:	ldr	x1, [x0]
 18c:	mov	w0, #0x12                  	// #18
 190:	b	88 <luks_recover_key+0x88>
 194:	ldr	w0, [x21, #208]
 198:	mov	w1, #0x71f3                	// #29171
 19c:	movk	w1, #0xac, lsl #16
 1a0:	rev	w0, w0
 1a4:	cmp	w0, w1
 1a8:	b.ne	350 <luks_recover_key+0x350>  // b.any
 1ac:	adrp	x0, 0 <luks_recover_key>
 1b0:	adrp	x25, 0 <luks_recover_key>
 1b4:	adrp	x24, 0 <luks_recover_key>
 1b8:	mov	w4, w19
 1bc:	ldr	x3, [x0]
 1c0:	mov	w1, #0x170                 	// #368
 1c4:	ldr	x2, [x25]
 1c8:	ldr	x0, [x24]
 1cc:	bl	0 <grub_real_dprintf>
 1d0:	add	x0, sp, #0x190
 1d4:	ldr	x28, [x20, #88]
 1d8:	bl	0 <grub_strlen>
 1dc:	ldr	w5, [x21, #212]
 1e0:	mov	x2, x0
 1e4:	mov	x7, x22
 1e8:	mov	x0, x28
 1ec:	add	x6, sp, #0x110
 1f0:	add	x3, x21, #0xd8
 1f4:	add	x1, sp, #0x190
 1f8:	rev	w5, w5
 1fc:	mov	x4, #0x20                  	// #32
 200:	bl	0 <grub_crypto_pbkdf2>
 204:	mov	w28, w0
 208:	cbz	w0, 228 <luks_recover_key+0x228>
 20c:	mov	x0, x27
 210:	bl	0 <grub_free>
 214:	mov	w0, w28
 218:	bl	0 <grub_crypto_gcry_error>
 21c:	mov	w28, w0
 220:	mov	w19, w28
 224:	b	f4 <luks_recover_key+0xf4>
 228:	adrp	x0, 0 <luks_recover_key>
 22c:	mov	w1, #0x181                 	// #385
 230:	ldr	x2, [x25]
 234:	ldr	x3, [x0]
 238:	ldr	x0, [x24]
 23c:	bl	0 <grub_real_dprintf>
 240:	mov	x2, x22
 244:	add	x1, sp, #0x110
 248:	mov	x0, x20
 24c:	bl	0 <grub_cryptodisk_setkey>
 250:	mov	w28, w0
 254:	cbnz	w0, 20c <luks_recover_key+0x20c>
 258:	ldp	w1, w5, [x21, #248]
 25c:	mov	x4, x27
 260:	mov	x0, x23
 264:	mov	x2, #0x0                   	// #0
 268:	rev	w5, w5
 26c:	rev	w1, w1
 270:	umull	x5, w5, w26
 274:	str	x5, [sp, #104]
 278:	mov	x3, x5
 27c:	bl	0 <grub_disk_read>
 280:	mov	w28, w0
 284:	ldr	x5, [sp, #104]
 288:	cbz	w0, 298 <luks_recover_key+0x298>
 28c:	mov	x0, x27
 290:	bl	0 <grub_free>
 294:	b	220 <luks_recover_key+0x220>
 298:	mov	x2, x5
 29c:	mov	x1, x27
 2a0:	mov	x0, x20
 2a4:	mov	x3, #0x0                   	// #0
 2a8:	bl	0 <grub_cryptodisk_decrypt>
 2ac:	mov	w28, w0
 2b0:	cbnz	w0, 20c <luks_recover_key+0x20c>
 2b4:	ldr	x0, [x20, #88]
 2b8:	mov	x3, x22
 2bc:	ldr	w4, [x21, #252]
 2c0:	add	x2, sp, #0x90
 2c4:	mov	x1, x27
 2c8:	rev	w4, w4
 2cc:	bl	b7c <AF_merge>
 2d0:	mov	w28, w0
 2d4:	cbnz	w0, 20c <luks_recover_key+0x20c>
 2d8:	adrp	x0, 0 <luks_recover_key>
 2dc:	mov	w1, #0x1a7                 	// #423
 2e0:	ldr	x2, [x25]
 2e4:	ldr	x3, [x0]
 2e8:	ldr	x0, [x24]
 2ec:	bl	0 <grub_real_dprintf>
 2f0:	ldr	x0, [x20, #88]
 2f4:	add	x6, sp, #0x78
 2f8:	ldr	w2, [sp, #764]
 2fc:	add	x3, sp, #0x314
 300:	ldr	w5, [sp, #820]
 304:	add	x1, sp, #0x90
 308:	rev	w2, w2
 30c:	mov	x7, #0x14                  	// #20
 310:	rev	w5, w5
 314:	mov	x4, #0x20                  	// #32
 318:	bl	0 <grub_crypto_pbkdf2>
 31c:	mov	w28, w0
 320:	cbnz	w0, 20c <luks_recover_key+0x20c>
 324:	add	x1, sp, #0x300
 328:	add	x0, sp, #0x78
 32c:	mov	x2, #0x14                  	// #20
 330:	bl	0 <grub_memcmp>
 334:	cbz	w0, 378 <luks_recover_key+0x378>
 338:	adrp	x0, 0 <luks_recover_key>
 33c:	mov	w1, #0x1bd                 	// #445
 340:	ldr	x2, [x25]
 344:	ldr	x3, [x0]
 348:	ldr	x0, [x24]
 34c:	bl	0 <grub_real_dprintf>
 350:	add	w19, w19, #0x1
 354:	add	x21, x21, #0x30
 358:	cmp	w19, #0x8
 35c:	b.ne	194 <luks_recover_key+0x194>  // b.any
 360:	mov	x0, x27
 364:	bl	0 <grub_free>
 368:	adrp	x0, 0 <luks_recover_key>
 36c:	ldr	x1, [x0]
 370:	mov	w0, #0x1e                  	// #30
 374:	b	88 <luks_recover_key+0x88>
 378:	adrp	x0, 0 <luks_recover_key>
 37c:	mov	w1, w19
 380:	ldr	x0, [x0]
 384:	bl	0 <grub_printf_>
 388:	mov	x2, x22
 38c:	add	x1, sp, #0x90
 390:	mov	x0, x20
 394:	bl	0 <grub_cryptodisk_setkey>
 398:	mov	w28, w0
 39c:	mov	x0, x27
 3a0:	cbz	w28, 290 <luks_recover_key+0x290>
 3a4:	b	210 <luks_recover_key+0x210>
	...

0000000000000420 <configure_ciphers>:
 420:	sub	sp, sp, #0x370
 424:	stp	x29, x30, [sp]
 428:	mov	x29, sp
 42c:	stp	x19, x20, [sp, #16]
 430:	stp	x21, x22, [sp, #32]
 434:	stp	x23, x24, [sp, #48]
 438:	stp	x25, x26, [sp, #64]
 43c:	stp	x27, x28, [sp, #80]
 440:	cbz	w2, 44c <configure_ciphers+0x2c>
 444:	mov	x19, #0x0                   	// #0
 448:	b	550 <configure_ciphers+0x130>
 44c:	mov	x25, x0
 450:	mov	x19, x1
 454:	add	x4, sp, #0x120
 458:	mov	x3, #0x250                 	// #592
 45c:	mov	x2, #0x0                   	// #0
 460:	mov	x1, #0x0                   	// #0
 464:	bl	0 <grub_disk_read>
 468:	mov	w27, w0
 46c:	cbz	w0, 488 <configure_ciphers+0x68>
 470:	cmp	w0, #0xb
 474:	b.ne	444 <configure_ciphers+0x24>  // b.any
 478:	adrp	x0, 0 <luks_recover_key>
 47c:	ldr	x0, [x0]
 480:	str	wzr, [x0]
 484:	b	444 <configure_ciphers+0x24>
 488:	adrp	x0, 0 <luks_recover_key>
 48c:	mov	x2, #0x6                   	// #6
 490:	ldr	x1, [x0]
 494:	add	x0, sp, #0x120
 498:	bl	0 <grub_memcmp>
 49c:	cbnz	w0, 444 <configure_ciphers+0x24>
 4a0:	ldrh	w0, [sp, #294]
 4a4:	ldrb	w1, [sp, #295]
 4a8:	orr	w0, w1, w0, lsl #8
 4ac:	sxth	w0, w0
 4b0:	cmp	w0, #0x1
 4b4:	b.ne	444 <configure_ciphers+0x24>  // b.any
 4b8:	add	x0, sp, #0xf0
 4bc:	mov	x1, #0x0                   	// #0
 4c0:	mov	x26, x0
 4c4:	add	x2, sp, #0x120
 4c8:	add	x2, x2, x1
 4cc:	ldrb	w2, [x2, #168]
 4d0:	cmp	w2, #0x2d
 4d4:	b.eq	4dc <configure_ciphers+0xbc>  // b.none
 4d8:	strb	w2, [x0], #1
 4dc:	add	x1, x1, #0x1
 4e0:	cmp	x1, #0x28
 4e4:	b.ne	4c4 <configure_ciphers+0xa4>  // b.any
 4e8:	strb	wzr, [x0]
 4ec:	cbnz	x19, 574 <configure_ciphers+0x154>
 4f0:	add	x1, sp, #0x128
 4f4:	mov	x2, #0x20                  	// #32
 4f8:	add	x0, sp, #0x78
 4fc:	bl	0 <grub_memmove>
 500:	add	x1, sp, #0x148
 504:	mov	x2, #0x20                  	// #32
 508:	add	x0, sp, #0xa0
 50c:	strb	wzr, [sp, #152]
 510:	bl	0 <grub_memmove>
 514:	strb	wzr, [sp, #192]
 518:	add	x1, sp, #0x168
 51c:	mov	x2, #0x20                  	// #32
 520:	add	x0, sp, #0xc8
 524:	bl	0 <grub_memmove>
 528:	add	x0, sp, #0x78
 52c:	strb	wzr, [sp, #232]
 530:	bl	0 <grub_crypto_lookup_cipher_by_name>
 534:	mov	x19, x0
 538:	cbnz	x0, 608 <configure_ciphers+0x1e8>
 53c:	adrp	x0, 0 <luks_recover_key>
 540:	add	x2, sp, #0x78
 544:	ldr	x1, [x0]
 548:	mov	w0, #0x5                   	// #5
 54c:	bl	0 <grub_error>
 550:	mov	x0, x19
 554:	ldp	x29, x30, [sp]
 558:	ldp	x19, x20, [sp, #16]
 55c:	ldp	x21, x22, [sp, #32]
 560:	ldp	x23, x24, [sp, #48]
 564:	ldp	x25, x26, [sp, #64]
 568:	ldp	x27, x28, [sp, #80]
 56c:	add	sp, sp, #0x370
 570:	ret
 574:	mov	x1, #0x0                   	// #0
 578:	ldrb	w0, [x19, x1]
 57c:	ldrb	w2, [x26, x1]
 580:	sub	w4, w0, #0x41
 584:	sub	w3, w2, #0x41
 588:	cbz	w0, 5bc <configure_ciphers+0x19c>
 58c:	mov	w5, w0
 590:	cbz	w2, 5bc <configure_ciphers+0x19c>
 594:	cmp	w4, #0x19
 598:	b.hi	5a0 <configure_ciphers+0x180>  // b.pmore
 59c:	add	w5, w0, #0x20
 5a0:	mov	w6, w2
 5a4:	cmp	w3, #0x19
 5a8:	b.hi	5b0 <configure_ciphers+0x190>  // b.pmore
 5ac:	add	w6, w2, #0x20
 5b0:	add	x1, x1, #0x1
 5b4:	cmp	w6, w5
 5b8:	b.eq	578 <configure_ciphers+0x158>  // b.none
 5bc:	cmp	w4, #0x19
 5c0:	b.hi	5c8 <configure_ciphers+0x1a8>  // b.pmore
 5c4:	add	w0, w0, #0x20
 5c8:	cmp	w3, #0x19
 5cc:	b.hi	5d4 <configure_ciphers+0x1b4>  // b.pmore
 5d0:	add	w2, w2, #0x20
 5d4:	cmp	w2, w0
 5d8:	b.eq	4f0 <configure_ciphers+0xd0>  // b.none
 5dc:	adrp	x0, 0 <luks_recover_key>
 5e0:	mov	x5, x19
 5e4:	mov	x4, x26
 5e8:	mov	w1, #0x75                  	// #117
 5ec:	ldr	x3, [x0]
 5f0:	adrp	x0, 0 <luks_recover_key>
 5f4:	ldr	x2, [x0]
 5f8:	adrp	x0, 0 <luks_recover_key>
 5fc:	ldr	x0, [x0]
 600:	bl	0 <grub_real_dprintf>
 604:	b	444 <configure_ciphers+0x24>
 608:	bl	0 <grub_crypto_cipher_open>
 60c:	mov	x22, x0
 610:	cbz	x0, 444 <configure_ciphers+0x24>
 614:	ldr	w2, [sp, #396]
 618:	rev	w2, w2
 61c:	cmp	w2, #0x400
 620:	b.ls	640 <configure_ciphers+0x220>  // b.plast
 624:	adrp	x0, 0 <luks_recover_key>
 628:	ldr	x1, [x0]
 62c:	mov	w0, #0x12                  	// #18
 630:	bl	0 <grub_error>
 634:	mov	x0, x22
 638:	bl	0 <grub_free>
 63c:	b	444 <configure_ciphers+0x24>
 640:	adrp	x0, 0 <luks_recover_key>
 644:	ldr	x1, [x0]
 648:	add	x0, sp, #0xa0
 64c:	bl	0 <grub_strcmp>
 650:	mov	w20, w0
 654:	cbz	w0, 864 <configure_ciphers+0x444>
 658:	adrp	x28, 0 <luks_recover_key>
 65c:	add	x0, sp, #0xa0
 660:	ldr	x1, [x28]
 664:	bl	0 <grub_strcmp>
 668:	mov	w20, w0
 66c:	cbz	w0, 874 <configure_ciphers+0x454>
 670:	adrp	x0, 0 <luks_recover_key>
 674:	mov	x2, #0x4                   	// #4
 678:	ldr	x1, [x0]
 67c:	add	x0, sp, #0xa0
 680:	bl	0 <grub_memcmp>
 684:	cbz	w0, 918 <configure_ciphers+0x4f8>
 688:	adrp	x0, 0 <luks_recover_key>
 68c:	mov	x2, #0x5                   	// #5
 690:	ldr	x1, [x0]
 694:	add	x0, sp, #0xa0
 698:	bl	0 <grub_memcmp>
 69c:	cbz	w0, 924 <configure_ciphers+0x504>
 6a0:	adrp	x0, 0 <luks_recover_key>
 6a4:	mov	x2, #0x4                   	// #4
 6a8:	ldr	x1, [x0]
 6ac:	add	x0, sp, #0xa0
 6b0:	bl	0 <grub_memcmp>
 6b4:	cbnz	w0, 72c <configure_ciphers+0x30c>
 6b8:	mov	x0, x19
 6bc:	bl	0 <grub_crypto_cipher_open>
 6c0:	mov	x23, x0
 6c4:	cbz	x0, 634 <configure_ciphers+0x214>
 6c8:	ldr	x0, [x22]
 6cc:	ldr	x2, [x0, #24]
 6d0:	cmp	x2, #0x10
 6d4:	b.eq	6f4 <configure_ciphers+0x2d4>  // b.none
 6d8:	adrp	x0, 0 <luks_recover_key>
 6dc:	ldr	x1, [x0]
 6e0:	mov	w0, #0x12                  	// #18
 6e4:	bl	0 <grub_error>
 6e8:	mov	x0, x22
 6ec:	bl	0 <grub_free>
 6f0:	b	724 <configure_ciphers+0x304>
 6f4:	ldr	x0, [x23]
 6f8:	ldr	x0, [x0, #24]
 6fc:	cmp	x0, #0x10
 700:	b.eq	9cc <configure_ciphers+0x5ac>  // b.none
 704:	mov	x0, x22
 708:	bl	0 <grub_free>
 70c:	ldr	x0, [x23]
 710:	ldr	x2, [x0, #24]
 714:	adrp	x0, 0 <luks_recover_key>
 718:	ldr	x1, [x0]
 71c:	mov	w0, #0x12                  	// #18
 720:	bl	0 <grub_error>
 724:	mov	x0, x23
 728:	b	638 <configure_ciphers+0x218>
 72c:	adrp	x0, 0 <luks_recover_key>
 730:	mov	x2, #0x4                   	// #4
 734:	ldr	x1, [x0]
 738:	add	x0, sp, #0xa0
 73c:	bl	0 <grub_memcmp>
 740:	cbnz	w0, 768 <configure_ciphers+0x348>
 744:	ldr	x0, [x22]
 748:	ldr	x2, [x0, #24]
 74c:	cmp	x2, #0x10
 750:	b.eq	9d8 <configure_ciphers+0x5b8>  // b.none
 754:	adrp	x0, 0 <luks_recover_key>
 758:	ldr	x1, [x0]
 75c:	mov	w0, #0x12                  	// #18
 760:	bl	0 <grub_error>
 764:	b	634 <configure_ciphers+0x214>
 768:	mov	x0, x22
 76c:	bl	0 <grub_free>
 770:	adrp	x0, 0 <luks_recover_key>
 774:	add	x2, sp, #0xa0
 778:	ldr	x1, [x0]
 77c:	mov	w0, #0x12                  	// #18
 780:	bl	0 <grub_error>
 784:	b	444 <configure_ciphers+0x24>
 788:	add	w20, w20, #0x1
 78c:	b	9b0 <configure_ciphers+0x590>
 790:	adrp	x0, 0 <luks_recover_key>
 794:	mov	x2, #0x4                   	// #4
 798:	ldr	x1, [x0]
 79c:	mov	x0, x21
 7a0:	bl	0 <grub_memcmp>
 7a4:	mov	w20, w0
 7a8:	cbz	w0, 9c0 <configure_ciphers+0x5a0>
 7ac:	adrp	x0, 0 <luks_recover_key>
 7b0:	mov	x2, #0x6                   	// #6
 7b4:	ldr	x1, [x0]
 7b8:	mov	x0, x21
 7bc:	bl	0 <grub_memcmp>
 7c0:	mov	w20, w0
 7c4:	cbnz	w0, 844 <configure_ciphers+0x424>
 7c8:	add	x21, x21, #0x6
 7cc:	mov	x0, x21
 7d0:	bl	0 <grub_crypto_lookup_md_by_name>
 7d4:	mov	x28, x0
 7d8:	cbnz	x0, 800 <configure_ciphers+0x3e0>
 7dc:	mov	x0, x22
 7e0:	bl	0 <grub_free>
 7e4:	mov	x0, x23
 7e8:	bl	0 <grub_free>
 7ec:	mov	x2, x21
 7f0:	adrp	x0, 0 <luks_recover_key>
 7f4:	ldr	x1, [x0]
 7f8:	mov	w0, #0x5                   	// #5
 7fc:	b	780 <configure_ciphers+0x360>
 800:	mov	x0, x19
 804:	mov	w27, #0x3                   	// #3
 808:	bl	0 <grub_crypto_cipher_open>
 80c:	mov	x21, x0
 810:	cbz	x0, 6e8 <configure_ciphers+0x2c8>
 814:	add	x0, sp, #0xc8
 818:	bl	0 <grub_crypto_lookup_md_by_name>
 81c:	mov	x1, x0
 820:	cbnz	x0, 884 <configure_ciphers+0x464>
 824:	mov	x0, x22
 828:	bl	0 <grub_free>
 82c:	mov	x0, x21
 830:	bl	0 <grub_free>
 834:	mov	x0, x23
 838:	bl	0 <grub_free>
 83c:	add	x2, sp, #0xc8
 840:	b	7f0 <configure_ciphers+0x3d0>
 844:	mov	x0, x22
 848:	bl	0 <grub_free>
 84c:	mov	x0, x23
 850:	bl	0 <grub_free>
 854:	adrp	x0, 0 <luks_recover_key>
 858:	mov	x2, x21
 85c:	ldr	x1, [x0]
 860:	b	77c <configure_ciphers+0x35c>
 864:	mov	w24, #0x0                   	// #0
 868:	mov	x23, #0x0                   	// #0
 86c:	mov	w27, #0x1                   	// #1
 870:	b	9c0 <configure_ciphers+0x5a0>
 874:	mov	w24, #0x1                   	// #1
 878:	b	868 <configure_ciphers+0x448>
 87c:	mov	w27, #0x2                   	// #2
 880:	b	9c0 <configure_ciphers+0x5a0>
 884:	mov	x0, #0x238                 	// #568
 888:	str	x1, [sp, #104]
 88c:	bl	0 <grub_zalloc>
 890:	mov	x19, x0
 894:	ldr	x1, [sp, #104]
 898:	cbnz	x0, 8b8 <configure_ciphers+0x498>
 89c:	mov	x0, x22
 8a0:	bl	0 <grub_free>
 8a4:	mov	x0, x21
 8a8:	bl	0 <grub_free>
 8ac:	mov	x0, x23
 8b0:	bl	0 <grub_free>
 8b4:	b	550 <configure_ciphers+0x130>
 8b8:	ldr	w0, [sp, #392]
 8bc:	str	xzr, [x19, #40]
 8c0:	rev	w0, w0
 8c4:	str	x0, [x19, #24]
 8c8:	mov	w0, #0x9                   	// #9
 8cc:	stp	x22, x23, [x19, #56]
 8d0:	stp	x21, x28, [x19, #72]
 8d4:	str	x1, [x19, #88]
 8d8:	stp	w24, w27, [x19, #104]
 8dc:	str	w20, [x19, #112]
 8e0:	str	w0, [x19, #456]
 8e4:	mov	x0, x25
 8e8:	bl	0 <grub_disk_get_size>
 8ec:	ldr	x1, [x19, #24]
 8f0:	mov	x2, #0x48                  	// #72
 8f4:	sub	x0, x0, x1
 8f8:	str	x0, [x19, #32]
 8fc:	mov	x1, x26
 900:	add	x0, x19, #0x8c
 904:	bl	0 <grub_memmove>
 908:	adrp	x0, 0 <luks_recover_key>
 90c:	ldr	x0, [x0]
 910:	str	x0, [x19, #448]
 914:	b	550 <configure_ciphers+0x130>
 918:	mov	w24, #0x1                   	// #1
 91c:	mov	x23, #0x0                   	// #0
 920:	b	9d0 <configure_ciphers+0x5b0>
 924:	add	x21, sp, #0xa5
 928:	mov	w24, #0x2                   	// #2
 92c:	mov	x23, #0x0                   	// #0
 930:	ldr	x1, [x28]
 934:	mov	x0, x21
 938:	mov	x2, #0x5                   	// #5
 93c:	bl	0 <grub_memcmp>
 940:	mov	w20, w0
 944:	cbz	w0, 86c <configure_ciphers+0x44c>
 948:	adrp	x0, 0 <luks_recover_key>
 94c:	mov	x2, #0x7                   	// #7
 950:	ldr	x1, [x0]
 954:	mov	x0, x21
 958:	bl	0 <grub_memcmp>
 95c:	mov	w20, w0
 960:	cbz	w0, 87c <configure_ciphers+0x45c>
 964:	adrp	x0, 0 <luks_recover_key>
 968:	mov	x2, #0x5                   	// #5
 96c:	ldr	x1, [x0]
 970:	mov	x0, x21
 974:	bl	0 <grub_memcmp>
 978:	mov	w20, w0
 97c:	cbnz	w0, 790 <configure_ciphers+0x370>
 980:	ldr	x0, [x22]
 984:	ldr	x2, [x0, #24]
 988:	sub	x0, x2, #0x1
 98c:	tst	x0, x2
 990:	b.ne	998 <configure_ciphers+0x578>  // b.any
 994:	cbnz	x2, 9a8 <configure_ciphers+0x588>
 998:	adrp	x0, 0 <luks_recover_key>
 99c:	ldr	x1, [x0]
 9a0:	mov	w0, #0x12                  	// #18
 9a4:	bl	0 <grub_error>
 9a8:	ldr	x0, [x22]
 9ac:	ldr	x1, [x0, #24]
 9b0:	lsl	x0, x1, x20
 9b4:	cmp	x0, #0x1ff
 9b8:	b.ls	788 <configure_ciphers+0x368>  // b.plast
 9bc:	mov	w27, #0x4                   	// #4
 9c0:	mov	x28, #0x0                   	// #0
 9c4:	mov	x21, #0x0                   	// #0
 9c8:	b	814 <configure_ciphers+0x3f4>
 9cc:	mov	w24, #0x3                   	// #3
 9d0:	add	x21, sp, #0xa4
 9d4:	b	930 <configure_ciphers+0x510>
 9d8:	mov	w24, #0x4                   	// #4
 9dc:	b	91c <configure_ciphers+0x4fc>
	...

0000000000000a98 <grub_mod_init>:
 a98:	adrp	x0, 0 <luks_recover_key>
 a9c:	ldr	x1, [x0]
 aa0:	adrp	x0, 0 <luks_recover_key>
 aa4:	ldr	x0, [x0]
 aa8:	b	0 <grub_list_push>
 aac:	nop
	...

0000000000000ac0 <grub_mod_fini>:
 ac0:	adrp	x0, 0 <luks_recover_key>
 ac4:	ldr	x0, [x0]
 ac8:	b	0 <grub_list_remove>
 acc:	nop
	...

0000000000000ad8 <grub_crypto_xor>:
 ad8:	mov	x5, #0x0                   	// #0
 adc:	add	x8, x0, x5
 ae0:	add	x7, x2, x5
 ae4:	add	x6, x1, x5
 ae8:	subs	x9, x3, x5
 aec:	b.eq	b30 <grub_crypto_xor+0x58>  // b.none
 af0:	orr	x4, x6, x7
 af4:	orr	x4, x4, x8
 af8:	ands	x4, x4, #0x7
 afc:	b.ne	b34 <grub_crypto_xor+0x5c>  // b.any
 b00:	mov	x1, #0x0                   	// #0
 b04:	sub	x0, x9, x1
 b08:	cmp	x0, #0x7
 b0c:	b.hi	b4c <grub_crypto_xor+0x74>  // b.pmore
 b10:	lsr	x0, x9, #3
 b14:	mov	x1, #0xfffffffffffffff8    	// #-8
 b18:	add	x6, x6, x0, lsl #3
 b1c:	add	x7, x7, x0, lsl #3
 b20:	madd	x1, x0, x1, x9
 b24:	add	x0, x8, x0, lsl #3
 b28:	cmp	x4, x1
 b2c:	b.ne	b64 <grub_crypto_xor+0x8c>  // b.any
 b30:	ret
 b34:	ldrb	w4, [x1, x5]
 b38:	ldrb	w6, [x2, x5]
 b3c:	eor	w4, w4, w6
 b40:	strb	w4, [x0, x5]
 b44:	add	x5, x5, #0x1
 b48:	b	adc <grub_crypto_xor+0x4>
 b4c:	ldr	x0, [x6, x1]
 b50:	ldr	x2, [x7, x1]
 b54:	eor	x0, x0, x2
 b58:	str	x0, [x8, x1]
 b5c:	add	x1, x1, #0x8
 b60:	b	b04 <grub_crypto_xor+0x2c>
 b64:	ldrb	w2, [x6, x4]
 b68:	ldrb	w3, [x7, x4]
 b6c:	eor	w2, w2, w3
 b70:	strb	w2, [x0, x4]
 b74:	add	x4, x4, #0x1
 b78:	b	b28 <grub_crypto_xor+0x50>

0000000000000b7c <AF_merge>:
 b7c:	stp	x29, x30, [sp, #-256]!
 b80:	mov	x29, sp
 b84:	stp	x19, x20, [sp, #16]
 b88:	mov	x20, x0
 b8c:	ldr	x0, [x0, #32]
 b90:	stp	x21, x22, [sp, #32]
 b94:	stp	x23, x24, [sp, #48]
 b98:	sub	x0, x0, #0x1
 b9c:	cmp	x0, #0x3f
 ba0:	stp	x25, x26, [sp, #64]
 ba4:	stp	x27, x28, [sp, #80]
 ba8:	stp	x2, x4, [sp, #96]
 bac:	b.hi	d00 <AF_merge+0x184>  // b.pmore
 bb0:	mov	x23, x1
 bb4:	mov	x21, x3
 bb8:	mov	x0, x3
 bbc:	bl	0 <grub_zalloc>
 bc0:	mov	x19, x0
 bc4:	cbz	x0, d08 <AF_merge+0x18c>
 bc8:	mov	x27, x23
 bcc:	add	x28, sp, #0xbc
 bd0:	mov	x25, #0x0                   	// #0
 bd4:	mov	x2, x21
 bd8:	mov	w1, #0x0                   	// #0
 bdc:	bl	0 <grub_memset>
 be0:	ldr	x0, [sp, #104]
 be4:	mov	x3, x21
 be8:	mov	x2, x19
 bec:	sub	x1, x0, #0x1
 bf0:	cmp	x1, x25
 bf4:	b.hi	c2c <AF_merge+0xb0>  // b.pmore
 bf8:	madd	x1, x1, x21, x23
 bfc:	ldr	x0, [sp, #96]
 c00:	bl	ad8 <grub_crypto_xor>
 c04:	mov	x0, x19
 c08:	bl	0 <grub_free>
 c0c:	mov	w0, #0x0                   	// #0
 c10:	ldp	x19, x20, [sp, #16]
 c14:	ldp	x21, x22, [sp, #32]
 c18:	ldp	x23, x24, [sp, #48]
 c1c:	ldp	x25, x26, [sp, #64]
 c20:	ldp	x27, x28, [sp, #80]
 c24:	ldp	x29, x30, [sp], #256
 c28:	ret
 c2c:	mov	x1, x27
 c30:	mov	x0, x19
 c34:	bl	ad8 <grub_crypto_xor>
 c38:	mov	x24, #0x0                   	// #0
 c3c:	ldr	x22, [x20, #32]
 c40:	udiv	x26, x21, x22
 c44:	msub	x22, x26, x22, x21
 c48:	cmp	x26, x24
 c4c:	b.ne	cb8 <AF_merge+0x13c>  // b.any
 c50:	cbz	w22, cac <AF_merge+0x130>
 c54:	rev	w0, w26
 c58:	add	x1, sp, #0x74
 c5c:	mov	x2, #0x4                   	// #4
 c60:	str	w0, [sp, #116]
 c64:	add	x0, sp, #0xb8
 c68:	bl	0 <grub_memmove>
 c6c:	ldr	x1, [x20, #32]
 c70:	sxtw	x22, w22
 c74:	mov	x2, x22
 c78:	mov	x0, x28
 c7c:	madd	x1, x26, x1, x19
 c80:	bl	0 <grub_memmove>
 c84:	add	x2, sp, #0xb8
 c88:	add	x1, sp, #0x78
 c8c:	mov	x0, x20
 c90:	add	x3, x22, #0x4
 c94:	bl	0 <grub_crypto_hash>
 c98:	ldr	x0, [x20, #32]
 c9c:	mov	x2, x22
 ca0:	add	x1, sp, #0x78
 ca4:	madd	x0, x26, x0, x19
 ca8:	bl	0 <grub_memmove>
 cac:	add	x25, x25, #0x1
 cb0:	add	x27, x27, x21
 cb4:	b	be0 <AF_merge+0x64>
 cb8:	rev	w0, w24
 cbc:	add	x1, sp, #0x74
 cc0:	mov	x2, #0x4                   	// #4
 cc4:	str	w0, [sp, #116]
 cc8:	add	x0, sp, #0xb8
 ccc:	bl	0 <grub_memmove>
 cd0:	ldr	x2, [x20, #32]
 cd4:	mov	x0, x28
 cd8:	madd	x1, x24, x2, x19
 cdc:	bl	0 <grub_memmove>
 ce0:	ldr	x1, [x20, #32]
 ce4:	add	x2, sp, #0xb8
 ce8:	mov	x0, x20
 cec:	add	x3, x1, #0x4
 cf0:	madd	x1, x24, x1, x19
 cf4:	add	x24, x24, #0x1
 cf8:	bl	0 <grub_crypto_hash>
 cfc:	b	c48 <AF_merge+0xcc>
 d00:	mov	w0, #0xa                   	// #10
 d04:	b	c10 <AF_merge+0x94>
 d08:	mov	w0, #0x22                  	// #34
 d0c:	b	c10 <AF_merge+0x94>
