In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_clang_-O0:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	adrp	x0, 0 <setup_et_lock>
  10:	add	x0, x0, #0x0
  14:	mov	w8, wzr
  18:	mov	w9, #0x1                   	// #1
  1c:	adrp	x10, 0 <setup_et_lock>
  20:	add	x10, x10, #0x0
  24:	mov	w1, w8
  28:	mov	w2, w9
  2c:	stur	w9, [x29, #-4]
  30:	str	x10, [sp]
  34:	bl	0 <sem_init>
  38:	ldur	w8, [x29, #-4]
  3c:	ldr	x10, [sp]
  40:	str	w8, [x10]
  44:	ldp	x29, x30, [sp, #16]
  48:	add	sp, sp, #0x20
  4c:	ret

0000000000000050 <fini_et_lock>:
  50:	sub	sp, sp, #0x20
  54:	stp	x29, x30, [sp, #16]
  58:	add	x29, sp, #0x10
  5c:	adrp	x0, 0 <setup_et_lock>
  60:	add	x0, x0, #0x0
  64:	adrp	x8, 0 <setup_et_lock>
  68:	add	x8, x8, #0x0
  6c:	str	x8, [sp, #8]
  70:	bl	0 <sem_destroy>
  74:	ldr	x8, [sp, #8]
  78:	str	wzr, [x8]
  7c:	ldp	x29, x30, [sp, #16]
  80:	add	sp, sp, #0x20
  84:	ret

0000000000000088 <et_list_lock>:
  88:	stp	x29, x30, [sp, #-16]!
  8c:	mov	x29, sp
  90:	adrp	x8, 0 <setup_et_lock>
  94:	add	x8, x8, #0x0
  98:	ldr	w9, [x8]
  9c:	cbnz	w9, a4 <et_list_lock+0x1c>
  a0:	bl	0 <setup_et_lock>
  a4:	adrp	x0, 0 <setup_et_lock>
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <sem_wait>
  b0:	ldp	x29, x30, [sp], #16
  b4:	ret

00000000000000b8 <et_list_unlock>:
  b8:	sub	sp, sp, #0x20
  bc:	stp	x29, x30, [sp, #16]
  c0:	add	x29, sp, #0x10
  c4:	adrp	x8, 0 <setup_et_lock>
  c8:	add	x8, x8, #0x0
  cc:	ldr	w9, [x8]
  d0:	cbz	w9, e8 <et_list_unlock+0x30>
  d4:	adrp	x0, 0 <setup_et_lock>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <sem_post>
  e0:	stur	w0, [x29, #-4]
  e4:	b	ec <et_list_unlock+0x34>
  e8:	stur	wzr, [x29, #-4]
  ec:	ldur	w0, [x29, #-4]
  f0:	ldp	x29, x30, [sp, #16]
  f4:	add	sp, sp, #0x20
  f8:	ret

00000000000000fc <set_com_err_gettext>:
  fc:	sub	sp, sp, #0x10
 100:	adrp	x8, 0 <setup_et_lock>
 104:	add	x8, x8, #0x0
 108:	str	x0, [sp, #8]
 10c:	ldr	x9, [x8]
 110:	str	x9, [sp]
 114:	ldr	x9, [sp, #8]
 118:	str	x9, [x8]
 11c:	ldr	x0, [sp]
 120:	add	sp, sp, #0x10
 124:	ret

0000000000000128 <error_message>:
 128:	sub	sp, sp, #0x70
 12c:	stp	x29, x30, [sp, #96]
 130:	add	x29, sp, #0x60
 134:	stur	x0, [x29, #-16]
 138:	mov	w8, wzr
 13c:	stur	w8, [x29, #-44]
 140:	ldurb	w8, [x29, #-16]
 144:	mov	w0, w8
 148:	stur	w0, [x29, #-20]
 14c:	ldur	x9, [x29, #-16]
 150:	ldursw	x10, [x29, #-20]
 154:	subs	x9, x9, x10
 158:	stur	x9, [x29, #-40]
 15c:	ldur	x9, [x29, #-40]
 160:	cbnz	x9, 190 <error_message+0x68>
 164:	b	168 <error_message+0x40>
 168:	ldur	w0, [x29, #-20]
 16c:	bl	0 <strerror>
 170:	str	x0, [sp, #40]
 174:	ldr	x8, [sp, #40]
 178:	cbz	x8, 18c <error_message+0x64>
 17c:	b	180 <error_message+0x58>
 180:	ldr	x8, [sp, #40]
 184:	stur	x8, [x29, #-8]
 188:	b	4f4 <error_message+0x3cc>
 18c:	b	324 <error_message+0x1fc>
 190:	bl	88 <et_list_lock>
 194:	adrp	x8, 0 <setup_et_lock>
 198:	ldr	x8, [x8]
 19c:	stur	x8, [x29, #-32]
 1a0:	b	1a4 <error_message+0x7c>
 1a4:	ldur	x8, [x29, #-32]
 1a8:	cbz	x8, 258 <error_message+0x130>
 1ac:	b	1b0 <error_message+0x88>
 1b0:	ldur	x8, [x29, #-32]
 1b4:	ldr	x8, [x8, #8]
 1b8:	ldr	x8, [x8, #8]
 1bc:	and	x8, x8, #0xffffff
 1c0:	ldur	x9, [x29, #-40]
 1c4:	and	x9, x9, #0xffffff
 1c8:	subs	x8, x8, x9
 1cc:	b.ne	244 <error_message+0x11c>  // b.any
 1d0:	b	1d4 <error_message+0xac>
 1d4:	ldur	x8, [x29, #-32]
 1d8:	ldr	x8, [x8, #8]
 1dc:	ldr	w9, [x8, #16]
 1e0:	ldur	w10, [x29, #-20]
 1e4:	subs	w9, w9, w10
 1e8:	b.gt	1f4 <error_message+0xcc>
 1ec:	b	1f0 <error_message+0xc8>
 1f0:	b	258 <error_message+0x130>
 1f4:	ldur	x8, [x29, #-32]
 1f8:	ldr	x8, [x8, #8]
 1fc:	ldr	x8, [x8]
 200:	ldursw	x9, [x29, #-20]
 204:	ldr	x8, [x8, x9, lsl #3]
 208:	str	x8, [sp, #32]
 20c:	bl	b8 <et_list_unlock>
 210:	adrp	x8, 0 <setup_et_lock>
 214:	ldr	x8, [x8]
 218:	cbz	x8, 238 <error_message+0x110>
 21c:	b	220 <error_message+0xf8>
 220:	adrp	x8, 0 <setup_et_lock>
 224:	ldr	x8, [x8]
 228:	ldr	x0, [sp, #32]
 22c:	blr	x8
 230:	stur	x0, [x29, #-8]
 234:	b	4f4 <error_message+0x3cc>
 238:	ldr	x8, [sp, #32]
 23c:	stur	x8, [x29, #-8]
 240:	b	4f4 <error_message+0x3cc>
 244:	b	248 <error_message+0x120>
 248:	ldur	x8, [x29, #-32]
 24c:	ldr	x8, [x8]
 250:	stur	x8, [x29, #-32]
 254:	b	1a4 <error_message+0x7c>
 258:	adrp	x8, 8 <setup_et_lock+0x8>
 25c:	ldr	x8, [x8]
 260:	stur	x8, [x29, #-32]
 264:	b	268 <error_message+0x140>
 268:	ldur	x8, [x29, #-32]
 26c:	cbz	x8, 31c <error_message+0x1f4>
 270:	b	274 <error_message+0x14c>
 274:	ldur	x8, [x29, #-32]
 278:	ldr	x8, [x8, #8]
 27c:	ldr	x8, [x8, #8]
 280:	and	x8, x8, #0xffffff
 284:	ldur	x9, [x29, #-40]
 288:	and	x9, x9, #0xffffff
 28c:	subs	x8, x8, x9
 290:	b.ne	308 <error_message+0x1e0>  // b.any
 294:	b	298 <error_message+0x170>
 298:	ldur	x8, [x29, #-32]
 29c:	ldr	x8, [x8, #8]
 2a0:	ldr	w9, [x8, #16]
 2a4:	ldur	w10, [x29, #-20]
 2a8:	subs	w9, w9, w10
 2ac:	b.gt	2b8 <error_message+0x190>
 2b0:	b	2b4 <error_message+0x18c>
 2b4:	b	31c <error_message+0x1f4>
 2b8:	ldur	x8, [x29, #-32]
 2bc:	ldr	x8, [x8, #8]
 2c0:	ldr	x8, [x8]
 2c4:	ldursw	x9, [x29, #-20]
 2c8:	ldr	x8, [x8, x9, lsl #3]
 2cc:	str	x8, [sp, #24]
 2d0:	bl	b8 <et_list_unlock>
 2d4:	adrp	x8, 0 <setup_et_lock>
 2d8:	ldr	x8, [x8]
 2dc:	cbz	x8, 2fc <error_message+0x1d4>
 2e0:	b	2e4 <error_message+0x1bc>
 2e4:	adrp	x8, 0 <setup_et_lock>
 2e8:	ldr	x8, [x8]
 2ec:	ldr	x0, [sp, #24]
 2f0:	blr	x8
 2f4:	stur	x0, [x29, #-8]
 2f8:	b	4f4 <error_message+0x3cc>
 2fc:	ldr	x8, [sp, #24]
 300:	stur	x8, [x29, #-8]
 304:	b	4f4 <error_message+0x3cc>
 308:	b	30c <error_message+0x1e4>
 30c:	ldur	x8, [x29, #-32]
 310:	ldr	x8, [x8]
 314:	stur	x8, [x29, #-32]
 318:	b	268 <error_message+0x140>
 31c:	bl	b8 <et_list_unlock>
 320:	b	324 <error_message+0x1fc>
 324:	mrs	x8, tpidr_el0
 328:	add	x8, x8, #0x0, lsl #12
 32c:	add	x0, x8, #0x0
 330:	adrp	x1, 0 <setup_et_lock>
 334:	add	x1, x1, #0x0
 338:	bl	0 <strcpy>
 33c:	ldur	x8, [x29, #-40]
 340:	cbz	x8, 38c <error_message+0x264>
 344:	b	348 <error_message+0x220>
 348:	ldur	x0, [x29, #-40]
 34c:	bl	0 <error_table_name>
 350:	mrs	x8, tpidr_el0
 354:	add	x8, x8, #0x0, lsl #12
 358:	add	x8, x8, #0x0
 35c:	str	x0, [sp, #16]
 360:	mov	x0, x8
 364:	ldr	x1, [sp, #16]
 368:	str	x8, [sp, #8]
 36c:	bl	0 <strcat>
 370:	adrp	x1, 0 <setup_et_lock>
 374:	add	x1, x1, #0x0
 378:	ldr	x8, [sp, #8]
 37c:	str	x0, [sp]
 380:	mov	x0, x8
 384:	bl	0 <strcat>
 388:	b	38c <error_message+0x264>
 38c:	mrs	x8, tpidr_el0
 390:	add	x8, x8, #0x0, lsl #12
 394:	add	x8, x8, #0x0
 398:	str	x8, [sp, #40]
 39c:	b	3a0 <error_message+0x278>
 3a0:	ldr	x8, [sp, #40]
 3a4:	ldrb	w9, [x8]
 3a8:	cbz	w9, 3c4 <error_message+0x29c>
 3ac:	b	3b0 <error_message+0x288>
 3b0:	b	3b4 <error_message+0x28c>
 3b4:	ldr	x8, [sp, #40]
 3b8:	add	x8, x8, #0x1
 3bc:	str	x8, [sp, #40]
 3c0:	b	3a0 <error_message+0x278>
 3c4:	ldur	w8, [x29, #-20]
 3c8:	subs	w8, w8, #0x64
 3cc:	b.lt	440 <error_message+0x318>  // b.tstop
 3d0:	b	3d4 <error_message+0x2ac>
 3d4:	ldursw	x8, [x29, #-20]
 3d8:	mov	w9, #0x851f                	// #34079
 3dc:	movk	w9, #0x51eb, lsl #16
 3e0:	mov	w10, w9
 3e4:	mul	x8, x8, x10
 3e8:	lsr	x11, x8, #63
 3ec:	lsr	x8, x8, #37
 3f0:	add	w8, w8, w11
 3f4:	add	w8, w8, #0x30
 3f8:	ldr	x12, [sp, #40]
 3fc:	add	x13, x12, #0x1
 400:	str	x13, [sp, #40]
 404:	strb	w8, [x12]
 408:	ldursw	x12, [x29, #-20]
 40c:	mov	w8, w12
 410:	mul	x10, x12, x10
 414:	lsr	x12, x10, #63
 418:	asr	x10, x10, #37
 41c:	add	w9, w10, w12
 420:	mov	w10, #0x64                  	// #100
 424:	mul	w9, w9, w10
 428:	subs	w8, w8, w9
 42c:	stur	w8, [x29, #-20]
 430:	ldur	w8, [x29, #-44]
 434:	add	w8, w8, #0x1
 438:	stur	w8, [x29, #-44]
 43c:	b	440 <error_message+0x318>
 440:	ldur	w8, [x29, #-44]
 444:	cbnz	w8, 45c <error_message+0x334>
 448:	b	44c <error_message+0x324>
 44c:	ldur	w8, [x29, #-20]
 450:	subs	w8, w8, #0xa
 454:	b.lt	4bc <error_message+0x394>  // b.tstop
 458:	b	45c <error_message+0x334>
 45c:	ldursw	x8, [x29, #-20]
 460:	mov	w9, #0x6667                	// #26215
 464:	movk	w9, #0x6666, lsl #16
 468:	mov	w10, w9
 46c:	mul	x8, x8, x10
 470:	lsr	x11, x8, #63
 474:	lsr	x8, x8, #34
 478:	add	w8, w8, w11
 47c:	add	w8, w8, #0x30
 480:	ldr	x12, [sp, #40]
 484:	add	x13, x12, #0x1
 488:	str	x13, [sp, #40]
 48c:	strb	w8, [x12]
 490:	ldursw	x12, [x29, #-20]
 494:	mov	w8, w12
 498:	mul	x10, x12, x10
 49c:	lsr	x12, x10, #63
 4a0:	asr	x10, x10, #34
 4a4:	add	w9, w10, w12
 4a8:	mov	w10, #0xa                   	// #10
 4ac:	mul	w9, w9, w10
 4b0:	subs	w8, w8, w9
 4b4:	stur	w8, [x29, #-20]
 4b8:	b	4bc <error_message+0x394>
 4bc:	ldur	w8, [x29, #-20]
 4c0:	add	w8, w8, #0x30
 4c4:	ldr	x9, [sp, #40]
 4c8:	add	x10, x9, #0x1
 4cc:	str	x10, [sp, #40]
 4d0:	strb	w8, [x9]
 4d4:	ldr	x9, [sp, #40]
 4d8:	mov	w8, wzr
 4dc:	strb	w8, [x9]
 4e0:	mrs	x9, tpidr_el0
 4e4:	add	x9, x9, #0x0, lsl #12
 4e8:	add	x9, x9, #0x0
 4ec:	stur	x9, [x29, #-8]
 4f0:	b	4f4 <error_message+0x3cc>
 4f4:	ldur	x0, [x29, #-8]
 4f8:	ldp	x29, x30, [sp, #96]
 4fc:	add	sp, sp, #0x70
 500:	ret

0000000000000504 <add_error_table>:
 504:	sub	sp, sp, #0x40
 508:	stp	x29, x30, [sp, #48]
 50c:	add	x29, sp, #0x30
 510:	mov	x8, #0x10                  	// #16
 514:	stur	x0, [x29, #-16]
 518:	mov	x0, x8
 51c:	bl	0 <malloc>
 520:	str	x0, [sp, #24]
 524:	cbnz	x0, 534 <add_error_table+0x30>
 528:	mov	x8, #0xc                   	// #12
 52c:	stur	x8, [x29, #-8]
 530:	b	5dc <add_error_table+0xd8>
 534:	bl	88 <et_list_lock>
 538:	cbz	w0, 554 <add_error_table+0x50>
 53c:	ldr	x0, [sp, #24]
 540:	bl	0 <free>
 544:	bl	0 <__errno_location>
 548:	ldrsw	x8, [x0]
 54c:	stur	x8, [x29, #-8]
 550:	b	5dc <add_error_table+0xd8>
 554:	ldur	x8, [x29, #-16]
 558:	ldr	x9, [sp, #24]
 55c:	str	x8, [x9, #8]
 560:	adrp	x8, 8 <setup_et_lock+0x8>
 564:	add	x8, x8, #0x0
 568:	ldr	x9, [x8]
 56c:	ldr	x10, [sp, #24]
 570:	str	x9, [x10]
 574:	ldr	x9, [sp, #24]
 578:	str	x9, [x8]
 57c:	bl	5ec <init_debug>
 580:	adrp	x8, 0 <setup_et_lock>
 584:	add	x8, x8, #0x0
 588:	ldr	w11, [x8]
 58c:	and	w11, w11, #0x1
 590:	cbz	w11, 5d4 <add_error_table+0xd0>
 594:	adrp	x8, 0 <setup_et_lock>
 598:	add	x8, x8, #0x0
 59c:	ldr	x0, [x8]
 5a0:	ldur	x8, [x29, #-16]
 5a4:	ldr	x8, [x8, #8]
 5a8:	str	x0, [sp, #16]
 5ac:	mov	x0, x8
 5b0:	bl	0 <error_table_name>
 5b4:	ldur	x3, [x29, #-16]
 5b8:	ldr	x8, [sp, #16]
 5bc:	str	x0, [sp, #8]
 5c0:	mov	x0, x8
 5c4:	adrp	x1, 0 <setup_et_lock>
 5c8:	add	x1, x1, #0x0
 5cc:	ldr	x2, [sp, #8]
 5d0:	bl	0 <fprintf>
 5d4:	bl	b8 <et_list_unlock>
 5d8:	stur	xzr, [x29, #-8]
 5dc:	ldur	x0, [x29, #-8]
 5e0:	ldp	x29, x30, [sp, #48]
 5e4:	add	sp, sp, #0x40
 5e8:	ret

00000000000005ec <init_debug>:
 5ec:	sub	sp, sp, #0x50
 5f0:	stp	x29, x30, [sp, #64]
 5f4:	add	x29, sp, #0x40
 5f8:	adrp	x8, 0 <setup_et_lock>
 5fc:	add	x8, x8, #0x0
 600:	adrp	x9, 0 <setup_et_lock>
 604:	add	x9, x9, #0x0
 608:	ldr	w10, [x8]
 60c:	and	w10, w10, #0x8000
 610:	str	x8, [sp, #24]
 614:	str	x9, [sp, #16]
 618:	cbz	w10, 620 <init_debug+0x34>
 61c:	b	7cc <init_debug+0x1e0>
 620:	adrp	x0, 0 <setup_et_lock>
 624:	add	x0, x0, #0x0
 628:	bl	0 <getenv>
 62c:	stur	x0, [x29, #-8]
 630:	ldur	x8, [x29, #-8]
 634:	cbz	x8, 674 <init_debug+0x88>
 638:	ldur	x0, [x29, #-8]
 63c:	sub	x1, x29, #0x18
 640:	mov	w8, wzr
 644:	mov	w2, w8
 648:	bl	0 <strtoul>
 64c:	ldr	x9, [sp, #24]
 650:	str	w0, [x9]
 654:	ldur	x10, [x29, #-24]
 658:	ldrb	w8, [x10]
 65c:	cbnz	w8, 66c <init_debug+0x80>
 660:	bl	0 <__errno_location>
 664:	ldr	w8, [x0]
 668:	cbz	w8, 674 <init_debug+0x88>
 66c:	ldr	x8, [sp, #24]
 670:	str	wzr, [x8]
 674:	ldr	x8, [sp, #24]
 678:	ldr	w9, [x8]
 67c:	orr	w9, w9, #0x8000
 680:	str	w9, [x8]
 684:	ldr	w9, [x8]
 688:	cmp	w9, #0x8, lsl #12
 68c:	b.ne	694 <init_debug+0xa8>  // b.any
 690:	b	7cc <init_debug+0x1e0>
 694:	adrp	x0, 0 <setup_et_lock>
 698:	add	x0, x0, #0x0
 69c:	bl	984 <safe_getenv>
 6a0:	stur	x0, [x29, #-16]
 6a4:	ldur	x8, [x29, #-16]
 6a8:	cbz	x8, 6c4 <init_debug+0xd8>
 6ac:	ldur	x0, [x29, #-16]
 6b0:	adrp	x1, 0 <setup_et_lock>
 6b4:	add	x1, x1, #0x0
 6b8:	bl	0 <fopen>
 6bc:	ldr	x8, [sp, #16]
 6c0:	str	x0, [x8]
 6c4:	ldr	x8, [sp, #16]
 6c8:	ldr	x9, [x8]
 6cc:	cbnz	x9, 6ec <init_debug+0x100>
 6d0:	adrp	x0, 0 <setup_et_lock>
 6d4:	add	x0, x0, #0x0
 6d8:	adrp	x1, 0 <setup_et_lock>
 6dc:	add	x1, x1, #0x0
 6e0:	bl	0 <fopen>
 6e4:	ldr	x8, [sp, #16]
 6e8:	str	x0, [x8]
 6ec:	ldr	x8, [sp, #16]
 6f0:	ldr	x9, [x8]
 6f4:	cbz	x9, 7c0 <init_debug+0x1d4>
 6f8:	ldr	x8, [sp, #16]
 6fc:	ldr	x0, [x8]
 700:	bl	0 <fileno>
 704:	stur	w0, [x29, #-28]
 708:	ldur	w9, [x29, #-28]
 70c:	cmp	w9, #0x0
 710:	cset	w9, lt  // lt = tstop
 714:	tbnz	w9, #0, 7bc <init_debug+0x1d0>
 718:	ldur	w0, [x29, #-28]
 71c:	mov	w1, #0x1                   	// #1
 720:	bl	0 <fcntl>
 724:	str	w0, [sp, #32]
 728:	ldr	w8, [sp, #32]
 72c:	cmp	w8, #0x0
 730:	cset	w8, lt  // lt = tstop
 734:	tbnz	w8, #0, 750 <init_debug+0x164>
 738:	ldur	w0, [x29, #-28]
 73c:	ldr	w8, [sp, #32]
 740:	orr	w2, w8, #0x1
 744:	mov	w1, #0x2                   	// #2
 748:	bl	0 <fcntl>
 74c:	str	w0, [sp, #32]
 750:	ldr	w8, [sp, #32]
 754:	cmp	w8, #0x0
 758:	cset	w8, ge  // ge = tcont
 75c:	tbnz	w8, #0, 7bc <init_debug+0x1d0>
 760:	ldr	x8, [sp, #16]
 764:	ldr	x0, [x8]
 768:	str	x0, [sp, #8]
 76c:	bl	0 <__errno_location>
 770:	ldr	w0, [x0]
 774:	bl	0 <strerror>
 778:	ldr	x8, [sp, #8]
 77c:	str	x0, [sp]
 780:	mov	x0, x8
 784:	adrp	x1, 0 <setup_et_lock>
 788:	add	x1, x1, #0x0
 78c:	ldr	x2, [sp]
 790:	bl	0 <fprintf>
 794:	ldr	x8, [sp, #16]
 798:	ldr	x9, [x8]
 79c:	mov	x0, x9
 7a0:	bl	0 <fclose>
 7a4:	mov	x8, xzr
 7a8:	ldr	x9, [sp, #16]
 7ac:	str	x8, [x9]
 7b0:	mov	w10, #0x8000                	// #32768
 7b4:	ldr	x8, [sp, #24]
 7b8:	str	w10, [x8]
 7bc:	b	7cc <init_debug+0x1e0>
 7c0:	mov	w8, #0x8000                	// #32768
 7c4:	ldr	x9, [sp, #24]
 7c8:	str	w8, [x9]
 7cc:	ldp	x29, x30, [sp, #64]
 7d0:	add	sp, sp, #0x50
 7d4:	ret

00000000000007d8 <remove_error_table>:
 7d8:	sub	sp, sp, #0x50
 7dc:	stp	x29, x30, [sp, #64]
 7e0:	add	x29, sp, #0x40
 7e4:	mov	x8, xzr
 7e8:	stur	x0, [x29, #-16]
 7ec:	str	x8, [sp, #32]
 7f0:	bl	88 <et_list_lock>
 7f4:	cbz	w0, 804 <remove_error_table+0x2c>
 7f8:	mov	x8, #0x2                   	// #2
 7fc:	stur	x8, [x29, #-8]
 800:	b	94c <remove_error_table+0x174>
 804:	adrp	x8, 8 <setup_et_lock+0x8>
 808:	add	x8, x8, #0x0
 80c:	ldr	x8, [x8]
 810:	stur	x8, [x29, #-24]
 814:	bl	5ec <init_debug>
 818:	ldur	x8, [x29, #-24]
 81c:	cbz	x8, 8ec <remove_error_table+0x114>
 820:	ldur	x8, [x29, #-24]
 824:	ldr	x8, [x8, #8]
 828:	ldr	x8, [x8, #8]
 82c:	ldur	x9, [x29, #-16]
 830:	ldr	x9, [x9, #8]
 834:	cmp	x8, x9
 838:	b.ne	8d4 <remove_error_table+0xfc>  // b.any
 83c:	ldr	x8, [sp, #32]
 840:	cbz	x8, 858 <remove_error_table+0x80>
 844:	ldur	x8, [x29, #-24]
 848:	ldr	x8, [x8]
 84c:	ldr	x9, [sp, #32]
 850:	str	x8, [x9]
 854:	b	86c <remove_error_table+0x94>
 858:	ldur	x8, [x29, #-24]
 85c:	ldr	x8, [x8]
 860:	adrp	x9, 8 <setup_et_lock+0x8>
 864:	add	x9, x9, #0x0
 868:	str	x8, [x9]
 86c:	ldur	x0, [x29, #-24]
 870:	bl	0 <free>
 874:	adrp	x8, 0 <setup_et_lock>
 878:	add	x8, x8, #0x0
 87c:	ldr	w9, [x8]
 880:	and	w9, w9, #0x1
 884:	cbz	w9, 8c8 <remove_error_table+0xf0>
 888:	adrp	x8, 0 <setup_et_lock>
 88c:	add	x8, x8, #0x0
 890:	ldr	x0, [x8]
 894:	ldur	x8, [x29, #-16]
 898:	ldr	x8, [x8, #8]
 89c:	str	x0, [sp, #24]
 8a0:	mov	x0, x8
 8a4:	bl	0 <error_table_name>
 8a8:	ldur	x3, [x29, #-16]
 8ac:	ldr	x8, [sp, #24]
 8b0:	str	x0, [sp, #16]
 8b4:	mov	x0, x8
 8b8:	adrp	x1, 0 <setup_et_lock>
 8bc:	add	x1, x1, #0x0
 8c0:	ldr	x2, [sp, #16]
 8c4:	bl	0 <fprintf>
 8c8:	bl	b8 <et_list_unlock>
 8cc:	stur	xzr, [x29, #-8]
 8d0:	b	94c <remove_error_table+0x174>
 8d4:	ldur	x8, [x29, #-24]
 8d8:	str	x8, [sp, #32]
 8dc:	ldur	x8, [x29, #-24]
 8e0:	ldr	x8, [x8]
 8e4:	stur	x8, [x29, #-24]
 8e8:	b	818 <remove_error_table+0x40>
 8ec:	adrp	x8, 0 <setup_et_lock>
 8f0:	add	x8, x8, #0x0
 8f4:	ldr	w9, [x8]
 8f8:	and	w9, w9, #0x1
 8fc:	cbz	w9, 940 <remove_error_table+0x168>
 900:	adrp	x8, 0 <setup_et_lock>
 904:	add	x8, x8, #0x0
 908:	ldr	x0, [x8]
 90c:	ldur	x8, [x29, #-16]
 910:	ldr	x8, [x8, #8]
 914:	str	x0, [sp, #8]
 918:	mov	x0, x8
 91c:	bl	0 <error_table_name>
 920:	ldur	x3, [x29, #-16]
 924:	ldr	x8, [sp, #8]
 928:	str	x0, [sp]
 92c:	mov	x0, x8
 930:	adrp	x1, 0 <setup_et_lock>
 934:	add	x1, x1, #0x0
 938:	ldr	x2, [sp]
 93c:	bl	0 <fprintf>
 940:	bl	b8 <et_list_unlock>
 944:	mov	x8, #0x2                   	// #2
 948:	stur	x8, [x29, #-8]
 94c:	ldur	x0, [x29, #-8]
 950:	ldp	x29, x30, [sp, #64]
 954:	add	sp, sp, #0x50
 958:	ret

000000000000095c <add_to_error_table>:
 95c:	sub	sp, sp, #0x20
 960:	stp	x29, x30, [sp, #16]
 964:	add	x29, sp, #0x10
 968:	str	x0, [sp, #8]
 96c:	ldr	x8, [sp, #8]
 970:	ldr	x0, [x8, #8]
 974:	bl	504 <add_error_table>
 978:	ldp	x29, x30, [sp, #16]
 97c:	add	sp, sp, #0x20
 980:	ret

0000000000000984 <safe_getenv>:
 984:	sub	sp, sp, #0x30
 988:	stp	x29, x30, [sp, #32]
 98c:	add	x29, sp, #0x20
 990:	str	x0, [sp, #16]
 994:	bl	0 <getuid>
 998:	str	w0, [sp, #12]
 99c:	bl	0 <geteuid>
 9a0:	ldr	w8, [sp, #12]
 9a4:	cmp	w8, w0
 9a8:	b.ne	9c4 <safe_getenv+0x40>  // b.any
 9ac:	bl	0 <getgid>
 9b0:	str	w0, [sp, #8]
 9b4:	bl	0 <getegid>
 9b8:	ldr	w8, [sp, #8]
 9bc:	cmp	w8, w0
 9c0:	b.eq	9d0 <safe_getenv+0x4c>  // b.none
 9c4:	mov	x8, xzr
 9c8:	stur	x8, [x29, #-8]
 9cc:	b	a08 <safe_getenv+0x84>
 9d0:	mov	w0, #0x3                   	// #3
 9d4:	mov	w8, wzr
 9d8:	mov	w1, w8
 9dc:	mov	w2, w8
 9e0:	mov	w3, w8
 9e4:	mov	w4, w8
 9e8:	bl	0 <prctl>
 9ec:	cbnz	w0, 9fc <safe_getenv+0x78>
 9f0:	mov	x8, xzr
 9f4:	stur	x8, [x29, #-8]
 9f8:	b	a08 <safe_getenv+0x84>
 9fc:	ldr	x0, [sp, #16]
 a00:	bl	0 <secure_getenv>
 a04:	stur	x0, [x29, #-8]
 a08:	ldur	x0, [x29, #-8]
 a0c:	ldp	x29, x30, [sp, #32]
 a10:	add	sp, sp, #0x30
 a14:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	sub	sp, sp, #0x20
   4:	adrp	x8, 0 <error_table_name>
   8:	add	x8, x8, #0x0
   c:	mov	w9, #0x4                   	// #4
  10:	str	x0, [sp, #24]
  14:	str	x8, [sp, #8]
  18:	ldr	x8, [sp, #24]
  1c:	asr	x8, x8, #8
  20:	str	x8, [sp, #24]
  24:	ldr	x8, [sp, #24]
  28:	and	x8, x8, #0xffffff
  2c:	str	x8, [sp, #24]
  30:	str	w9, [sp, #16]
  34:	ldr	w8, [sp, #16]
  38:	cmp	w8, #0x0
  3c:	cset	w8, lt  // lt = tstop
  40:	tbnz	w8, #0, ac <error_table_name+0xac>
  44:	ldr	x8, [sp, #24]
  48:	ldr	w9, [sp, #16]
  4c:	mov	w10, #0x6                   	// #6
  50:	mul	w9, w10, w9
  54:	mov	w11, w9
  58:	asr	x8, x8, x11
  5c:	and	x8, x8, #0x3f
  60:	str	w8, [sp, #20]
  64:	ldr	w8, [sp, #20]
  68:	cbz	w8, 9c <error_table_name+0x9c>
  6c:	ldr	w8, [sp, #20]
  70:	subs	w8, w8, #0x1
  74:	mov	w0, w8
  78:	sxtw	x9, w0
  7c:	adrp	x10, 0 <error_table_name>
  80:	add	x10, x10, #0x0
  84:	add	x9, x10, x9
  88:	ldrb	w8, [x9]
  8c:	ldr	x9, [sp, #8]
  90:	add	x10, x9, #0x1
  94:	str	x10, [sp, #8]
  98:	strb	w8, [x9]
  9c:	ldr	w8, [sp, #16]
  a0:	subs	w8, w8, #0x1
  a4:	str	w8, [sp, #16]
  a8:	b	34 <error_table_name+0x34>
  ac:	ldr	x8, [sp, #8]
  b0:	mov	w9, #0x0                   	// #0
  b4:	strb	w9, [x8]
  b8:	adrp	x0, 0 <error_table_name>
  bc:	add	x0, x0, #0x0
  c0:	add	sp, sp, #0x20
  c4:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	stur	x0, [x29, #-16]
  10:	str	x1, [sp, #24]
  14:	str	w2, [sp, #20]
  18:	ldr	x8, [sp, #24]
  1c:	cbz	x8, 30 <init_error_table+0x30>
  20:	ldr	w8, [sp, #20]
  24:	cbz	w8, 30 <init_error_table+0x30>
  28:	ldur	x8, [x29, #-16]
  2c:	cbnz	x8, 38 <init_error_table+0x38>
  30:	stur	wzr, [x29, #-4]
  34:	b	ac <init_error_table+0xac>
  38:	mov	x0, #0x28                  	// #40
  3c:	bl	0 <malloc>
  40:	str	x0, [sp, #8]
  44:	ldr	x8, [sp, #8]
  48:	cbnz	x8, 58 <init_error_table+0x58>
  4c:	mov	w8, #0xc                   	// #12
  50:	stur	w8, [x29, #-4]
  54:	b	ac <init_error_table+0xac>
  58:	ldr	x8, [sp, #8]
  5c:	add	x8, x8, #0x10
  60:	ldr	x9, [sp, #8]
  64:	str	x8, [x9, #8]
  68:	ldur	x8, [x29, #-16]
  6c:	ldr	x9, [sp, #8]
  70:	str	x8, [x9, #16]
  74:	ldr	x8, [sp, #24]
  78:	ldr	x9, [sp, #8]
  7c:	str	x8, [x9, #24]
  80:	ldr	w10, [sp, #20]
  84:	ldr	x8, [sp, #8]
  88:	str	w10, [x8, #32]
  8c:	adrp	x8, 0 <_et_dynamic_list>
  90:	add	x8, x8, #0x0
  94:	ldr	x9, [x8]
  98:	ldr	x11, [sp, #8]
  9c:	str	x9, [x11]
  a0:	ldr	x9, [sp, #8]
  a4:	str	x9, [x8]
  a8:	stur	wzr, [x29, #-4]
  ac:	ldur	w0, [x29, #-4]
  b0:	ldp	x29, x30, [sp, #48]
  b4:	add	sp, sp, #0x40
  b8:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	sub	sp, sp, #0xa0
   4:	stp	x29, x30, [sp, #144]
   8:	add	x29, sp, #0x90
   c:	mov	w8, #0x1                   	// #1
  10:	adrp	x9, 0 <stderr>
  14:	add	x9, x9, #0x0
  18:	stur	x0, [x29, #-8]
  1c:	stur	x1, [x29, #-16]
  20:	stur	x2, [x29, #-24]
  24:	stur	w8, [x29, #-28]
  28:	ldr	x0, [x9]
  2c:	str	x3, [sp, #8]
  30:	str	x9, [sp]
  34:	bl	0 <fileno>
  38:	stur	w0, [x29, #-32]
  3c:	ldur	x9, [x29, #-8]
  40:	cbz	x9, 6c <default_com_err_proc+0x6c>
  44:	ldur	x0, [x29, #-8]
  48:	ldr	x8, [sp]
  4c:	ldr	x1, [x8]
  50:	bl	0 <fputs>
  54:	ldr	x8, [sp]
  58:	ldr	x1, [x8]
  5c:	adrp	x9, 0 <default_com_err_proc>
  60:	add	x9, x9, #0x0
  64:	mov	x0, x9
  68:	bl	0 <fputs>
  6c:	ldur	x8, [x29, #-16]
  70:	cbz	x8, a0 <default_com_err_proc+0xa0>
  74:	ldur	x0, [x29, #-16]
  78:	bl	0 <error_message>
  7c:	ldr	x8, [sp]
  80:	ldr	x1, [x8]
  84:	bl	0 <fputs>
  88:	ldr	x8, [sp]
  8c:	ldr	x1, [x8]
  90:	adrp	x9, 0 <default_com_err_proc>
  94:	add	x9, x9, #0x0
  98:	mov	x0, x9
  9c:	bl	0 <fputs>
  a0:	ldur	x8, [x29, #-24]
  a4:	cbz	x8, d0 <default_com_err_proc+0xd0>
  a8:	ldr	x8, [sp]
  ac:	ldr	x0, [x8]
  b0:	ldur	x1, [x29, #-24]
  b4:	ldr	x9, [sp, #8]
  b8:	ldr	q0, [x9]
  bc:	sub	x2, x29, #0x40
  c0:	stur	q0, [x29, #-64]
  c4:	ldr	q0, [x9, #16]
  c8:	stur	q0, [x29, #-48]
  cc:	bl	0 <vfprintf>
  d0:	ldur	w0, [x29, #-32]
  d4:	bl	0 <isatty>
  d8:	cbnz	w0, e4 <default_com_err_proc+0xe4>
  dc:	stur	wzr, [x29, #-28]
  e0:	b	110 <default_com_err_proc+0x110>
  e4:	ldur	w0, [x29, #-32]
  e8:	add	x1, sp, #0x14
  ec:	bl	0 <tcgetattr>
  f0:	cbnz	w0, 110 <default_com_err_proc+0x110>
  f4:	ldr	w8, [sp, #24]
  f8:	and	w8, w8, #0x1
  fc:	cbz	w8, 110 <default_com_err_proc+0x110>
 100:	ldr	w8, [sp, #24]
 104:	and	w8, w8, #0x4
 108:	cbz	w8, 110 <default_com_err_proc+0x110>
 10c:	stur	wzr, [x29, #-28]
 110:	ldur	w8, [x29, #-28]
 114:	cbz	w8, 128 <default_com_err_proc+0x128>
 118:	ldr	x8, [sp]
 11c:	ldr	x1, [x8]
 120:	mov	w0, #0xd                   	// #13
 124:	bl	0 <fputc>
 128:	ldr	x8, [sp]
 12c:	ldr	x1, [x8]
 130:	mov	w0, #0xa                   	// #10
 134:	bl	0 <fputc>
 138:	ldr	x8, [sp]
 13c:	ldr	x9, [x8]
 140:	mov	x0, x9
 144:	bl	0 <fflush>
 148:	ldp	x29, x30, [sp, #144]
 14c:	add	sp, sp, #0xa0
 150:	ret

0000000000000154 <com_err_va>:
 154:	sub	sp, sp, #0x50
 158:	stp	x29, x30, [sp, #64]
 15c:	add	x29, sp, #0x40
 160:	adrp	x8, 0 <default_com_err_proc>
 164:	add	x8, x8, #0x0
 168:	mov	x9, sp
 16c:	stur	x0, [x29, #-8]
 170:	stur	x1, [x29, #-16]
 174:	stur	x2, [x29, #-24]
 178:	ldr	x8, [x8]
 17c:	ldur	x0, [x29, #-8]
 180:	ldur	x1, [x29, #-16]
 184:	ldur	x2, [x29, #-24]
 188:	ldr	q0, [x3]
 18c:	str	q0, [sp]
 190:	ldr	q0, [x3, #16]
 194:	str	q0, [sp, #16]
 198:	mov	x3, x9
 19c:	blr	x8
 1a0:	ldp	x29, x30, [sp, #64]
 1a4:	add	sp, sp, #0x50
 1a8:	ret

00000000000001ac <com_err>:
 1ac:	sub	sp, sp, #0x140
 1b0:	stp	x29, x30, [sp, #288]
 1b4:	str	x28, [sp, #304]
 1b8:	add	x29, sp, #0x120
 1bc:	sub	x8, x29, #0x38
 1c0:	str	q7, [sp, #128]
 1c4:	str	q6, [sp, #112]
 1c8:	str	q5, [sp, #96]
 1cc:	str	q4, [sp, #80]
 1d0:	str	q3, [sp, #64]
 1d4:	str	q2, [sp, #48]
 1d8:	str	q1, [sp, #32]
 1dc:	str	q0, [sp, #16]
 1e0:	stur	x7, [x29, #-104]
 1e4:	stur	x6, [x29, #-112]
 1e8:	stur	x5, [x29, #-120]
 1ec:	stur	x4, [x29, #-128]
 1f0:	stur	x3, [x29, #-136]
 1f4:	stur	x0, [x29, #-8]
 1f8:	stur	x1, [x29, #-16]
 1fc:	stur	x2, [x29, #-24]
 200:	adrp	x9, 0 <default_com_err_proc>
 204:	ldr	x9, [x9]
 208:	str	x8, [sp, #8]
 20c:	cbnz	x9, 228 <com_err+0x7c>
 210:	b	214 <com_err+0x68>
 214:	adrp	x8, 0 <default_com_err_proc>
 218:	adrp	x9, 0 <default_com_err_proc>
 21c:	add	x9, x9, #0x0
 220:	str	x9, [x8]
 224:	b	228 <com_err+0x7c>
 228:	mov	w8, #0xffffff80            	// #-128
 22c:	stur	w8, [x29, #-28]
 230:	mov	w8, #0xffffffd8            	// #-40
 234:	stur	w8, [x29, #-32]
 238:	add	x9, x29, #0x20
 23c:	stur	x9, [x29, #-56]
 240:	add	x9, sp, #0x10
 244:	add	x9, x9, #0x80
 248:	stur	x9, [x29, #-40]
 24c:	sub	x9, x29, #0x88
 250:	add	x9, x9, #0x28
 254:	stur	x9, [x29, #-48]
 258:	ldur	x0, [x29, #-8]
 25c:	ldur	x1, [x29, #-16]
 260:	ldur	x2, [x29, #-24]
 264:	ldr	x9, [sp, #8]
 268:	ldr	q0, [x9]
 26c:	ldr	q1, [x9, #16]
 270:	stur	q1, [x29, #-80]
 274:	stur	q0, [x29, #-96]
 278:	sub	x3, x29, #0x60
 27c:	bl	154 <com_err_va>
 280:	ldr	x28, [sp, #304]
 284:	ldp	x29, x30, [sp, #288]
 288:	add	sp, sp, #0x140
 28c:	ret

0000000000000290 <set_com_err_hook>:
 290:	sub	sp, sp, #0x20
 294:	adrp	x8, 0 <default_com_err_proc>
 298:	add	x8, x8, #0x0
 29c:	str	x0, [sp, #24]
 2a0:	ldr	x9, [x8]
 2a4:	str	x9, [sp, #16]
 2a8:	ldr	x9, [sp, #24]
 2ac:	str	x8, [sp, #8]
 2b0:	cbz	x9, 2c4 <set_com_err_hook+0x34>
 2b4:	ldr	x8, [sp, #24]
 2b8:	ldr	x9, [sp, #8]
 2bc:	str	x8, [x9]
 2c0:	b	2d4 <set_com_err_hook+0x44>
 2c4:	adrp	x8, 0 <default_com_err_proc>
 2c8:	add	x8, x8, #0x0
 2cc:	ldr	x9, [sp, #8]
 2d0:	str	x8, [x9]
 2d4:	ldr	x0, [sp, #16]
 2d8:	add	sp, sp, #0x20
 2dc:	ret

00000000000002e0 <reset_com_err_hook>:
 2e0:	sub	sp, sp, #0x10
 2e4:	adrp	x8, 0 <default_com_err_proc>
 2e8:	add	x8, x8, #0x0
 2ec:	adrp	x9, 0 <default_com_err_proc>
 2f0:	add	x9, x9, #0x0
 2f4:	ldr	x10, [x8]
 2f8:	str	x10, [sp, #8]
 2fc:	str	x9, [x8]
 300:	ldr	x0, [sp, #8]
 304:	add	sp, sp, #0x10
 308:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	sub	sp, sp, #0x20
   4:	str	x0, [sp, #16]
   8:	str	x1, [sp, #8]
   c:	ldr	x8, [sp, #16]
  10:	str	x8, [sp]
  14:	ldr	x8, [sp]
  18:	cbz	x8, a4 <com_right+0xa4>
  1c:	ldr	x8, [sp, #8]
  20:	ldr	x9, [sp]
  24:	ldr	x9, [x9, #8]
  28:	ldr	x9, [x9, #8]
  2c:	cmp	x8, x9
  30:	b.lt	94 <com_right+0x94>  // b.tstop
  34:	ldr	x8, [sp, #8]
  38:	ldr	x9, [sp]
  3c:	ldr	x9, [x9, #8]
  40:	ldr	x9, [x9, #8]
  44:	ldr	x10, [sp]
  48:	ldr	x10, [x10, #8]
  4c:	ldrsw	x10, [x10, #16]
  50:	add	x9, x9, x10
  54:	cmp	x8, x9
  58:	b.ge	94 <com_right+0x94>  // b.tcont
  5c:	ldr	x8, [sp]
  60:	mov	x9, #0x8                   	// #8
  64:	ldr	x8, [x8, #8]
  68:	ldr	x8, [x8]
  6c:	ldr	x10, [sp, #8]
  70:	ldr	x11, [sp]
  74:	ldr	x11, [x11, #8]
  78:	ldr	x11, [x11, #8]
  7c:	subs	x10, x10, x11
  80:	mul	x9, x9, x10
  84:	add	x8, x8, x9
  88:	ldr	x8, [x8]
  8c:	str	x8, [sp, #24]
  90:	b	ac <com_right+0xac>
  94:	ldr	x8, [sp]
  98:	ldr	x8, [x8]
  9c:	str	x8, [sp]
  a0:	b	14 <com_right+0x14>
  a4:	mov	x8, xzr
  a8:	str	x8, [sp, #24]
  ac:	ldr	x0, [sp, #24]
  b0:	add	sp, sp, #0x20
  b4:	ret

00000000000000b8 <com_right_r>:
  b8:	sub	sp, sp, #0x40
  bc:	stp	x29, x30, [sp, #48]
  c0:	add	x29, sp, #0x30
  c4:	stur	x0, [x29, #-16]
  c8:	str	x1, [sp, #24]
  cc:	str	x2, [sp, #16]
  d0:	str	x3, [sp, #8]
  d4:	ldur	x8, [x29, #-16]
  d8:	str	x8, [sp]
  dc:	ldr	x8, [sp]
  e0:	cbz	x8, 194 <com_right_r+0xdc>
  e4:	ldr	x8, [sp, #24]
  e8:	ldr	x9, [sp]
  ec:	ldr	x9, [x9, #8]
  f0:	ldr	x9, [x9, #8]
  f4:	cmp	x8, x9
  f8:	b.lt	184 <com_right_r+0xcc>  // b.tstop
  fc:	ldr	x8, [sp, #24]
 100:	ldr	x9, [sp]
 104:	ldr	x9, [x9, #8]
 108:	ldr	x9, [x9, #8]
 10c:	ldr	x10, [sp]
 110:	ldr	x10, [x10, #8]
 114:	ldrsw	x10, [x10, #16]
 118:	add	x9, x9, x10
 11c:	cmp	x8, x9
 120:	b.ge	184 <com_right_r+0xcc>  // b.tcont
 124:	ldr	x0, [sp, #16]
 128:	ldr	x8, [sp]
 12c:	mov	x9, #0x8                   	// #8
 130:	ldr	x8, [x8, #8]
 134:	ldr	x8, [x8]
 138:	ldr	x10, [sp, #24]
 13c:	ldr	x11, [sp]
 140:	ldr	x11, [x11, #8]
 144:	ldr	x11, [x11, #8]
 148:	subs	x10, x10, x11
 14c:	mul	x9, x9, x10
 150:	add	x8, x8, x9
 154:	ldr	x1, [x8]
 158:	ldr	x2, [sp, #8]
 15c:	bl	0 <strncpy>
 160:	ldr	x8, [sp, #16]
 164:	ldr	x9, [sp, #8]
 168:	subs	x9, x9, #0x1
 16c:	add	x8, x8, x9
 170:	mov	w12, #0x0                   	// #0
 174:	strb	w12, [x8]
 178:	ldr	x8, [sp, #16]
 17c:	stur	x8, [x29, #-8]
 180:	b	19c <com_right_r+0xe4>
 184:	ldr	x8, [sp]
 188:	ldr	x8, [x8]
 18c:	str	x8, [sp]
 190:	b	dc <com_right_r+0x24>
 194:	mov	x8, xzr
 198:	stur	x8, [x29, #-8]
 19c:	ldur	x0, [x29, #-8]
 1a0:	ldp	x29, x30, [sp, #48]
 1a4:	add	sp, sp, #0x40
 1a8:	ret

00000000000001ac <initialize_error_table_r>:
 1ac:	sub	sp, sp, #0x50
 1b0:	stp	x29, x30, [sp, #64]
 1b4:	add	x29, sp, #0x40
 1b8:	stur	x0, [x29, #-8]
 1bc:	stur	x1, [x29, #-16]
 1c0:	stur	w2, [x29, #-20]
 1c4:	str	x3, [sp, #32]
 1c8:	ldur	x8, [x29, #-8]
 1cc:	str	x8, [sp, #16]
 1d0:	ldur	x8, [x29, #-8]
 1d4:	ldr	x8, [x8]
 1d8:	str	x8, [sp, #24]
 1dc:	ldr	x8, [sp, #24]
 1e0:	cbz	x8, 218 <initialize_error_table_r+0x6c>
 1e4:	ldr	x8, [sp, #24]
 1e8:	ldr	x8, [x8, #8]
 1ec:	ldr	x8, [x8]
 1f0:	ldur	x9, [x29, #-16]
 1f4:	cmp	x8, x9
 1f8:	b.ne	200 <initialize_error_table_r+0x54>  // b.any
 1fc:	b	288 <initialize_error_table_r+0xdc>
 200:	ldr	x8, [sp, #24]
 204:	str	x8, [sp, #16]
 208:	ldr	x8, [sp, #24]
 20c:	ldr	x8, [x8]
 210:	str	x8, [sp, #24]
 214:	b	1dc <initialize_error_table_r+0x30>
 218:	mov	x0, #0x28                  	// #40
 21c:	bl	0 <malloc>
 220:	str	x0, [sp]
 224:	ldr	x8, [sp]
 228:	cbnz	x8, 230 <initialize_error_table_r+0x84>
 22c:	b	288 <initialize_error_table_r+0xdc>
 230:	ldr	x8, [sp]
 234:	str	x8, [sp, #24]
 238:	ldr	x8, [sp]
 23c:	add	x8, x8, #0x10
 240:	str	x8, [sp, #8]
 244:	ldr	x9, [sp, #24]
 248:	str	x8, [x9, #8]
 24c:	ldur	x8, [x29, #-16]
 250:	ldr	x9, [sp, #8]
 254:	str	x8, [x9]
 258:	ldur	w10, [x29, #-20]
 25c:	ldr	x8, [sp, #8]
 260:	str	w10, [x8, #16]
 264:	ldr	x8, [sp, #32]
 268:	ldr	x9, [sp, #8]
 26c:	str	x8, [x9, #8]
 270:	ldr	x8, [sp, #24]
 274:	mov	x9, xzr
 278:	str	x9, [x8]
 27c:	ldr	x8, [sp, #24]
 280:	ldr	x9, [sp, #16]
 284:	str	x8, [x9]
 288:	ldp	x29, x30, [sp, #64]
 28c:	add	sp, sp, #0x50
 290:	ret

0000000000000294 <free_error_table>:
 294:	sub	sp, sp, #0x20
 298:	stp	x29, x30, [sp, #16]
 29c:	add	x29, sp, #0x10
 2a0:	str	x0, [sp, #8]
 2a4:	ldr	x8, [sp, #8]
 2a8:	cbz	x8, 2cc <free_error_table+0x38>
 2ac:	ldr	x8, [sp, #8]
 2b0:	str	x8, [sp]
 2b4:	ldr	x8, [sp, #8]
 2b8:	ldr	x8, [x8]
 2bc:	str	x8, [sp, #8]
 2c0:	ldr	x0, [sp]
 2c4:	bl	0 <free>
 2c8:	b	2a4 <free_error_table+0x10>
 2cc:	ldp	x29, x30, [sp, #16]
 2d0:	add	sp, sp, #0x20
 2d4:	ret
