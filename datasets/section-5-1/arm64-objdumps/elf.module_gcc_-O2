
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//elf.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_elf32_load_phdrs.part.0>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x3, 0 <grub_elf32_load_phdrs.part.0>
   8:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x0
  18:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  1c:	ldr	x3, [x3]
  20:	mov	w1, #0x11                  	// #17
  24:	ldrh	w5, [x19, #50]
  28:	ldrh	w20, [x19, #52]
  2c:	ldr	x2, [x2]
  30:	ldr	x0, [x0]
  34:	mul	w20, w20, w5
  38:	ldr	w4, [x19, #36]
  3c:	mov	x5, x20
  40:	bl	0 <grub_real_dprintf>
  44:	mov	x0, x20
  48:	bl	0 <grub_malloc>
  4c:	str	x0, [x19, #72]
  50:	cbz	x0, c4 <grub_elf32_load_phdrs.part.0+0xc4>
  54:	ldr	w1, [x19, #36]
  58:	ldr	x0, [x19]
  5c:	bl	0 <grub_file_seek>
  60:	cmn	x0, #0x1
  64:	b.eq	90 <grub_elf32_load_phdrs.part.0+0x90>  // b.none
  68:	ldr	x0, [x19]
  6c:	mov	x2, x20
  70:	ldr	x1, [x19, #72]
  74:	bl	0 <grub_file_read>
  78:	cmp	x20, x0
  7c:	b.ne	90 <grub_elf32_load_phdrs.part.0+0x90>  // b.any
  80:	mov	w0, #0x0                   	// #0
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  94:	ldr	x20, [x0]
  98:	ldr	w0, [x20]
  9c:	cbnz	w0, 84 <grub_elf32_load_phdrs.part.0+0x84>
  a0:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
  a4:	mov	w0, #0x6                   	// #6
  a8:	ldr	x2, [x19, #80]
  ac:	ldr	x1, [x1]
  b0:	bl	0 <grub_error>
  b4:	ldr	w0, [x20]
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret
  c4:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldr	x0, [x0]
  d0:	ldp	x29, x30, [sp], #32
  d4:	ldr	w0, [x0]
  d8:	ret
  dc:	nop
	...

0000000000000108 <grub_elf64_load_phdrs.part.0>:
 108:	stp	x29, x30, [sp, #-32]!
 10c:	adrp	x3, 0 <grub_elf32_load_phdrs.part.0>
 110:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 114:	mov	x29, sp
 118:	stp	x19, x20, [sp, #16]
 11c:	mov	x19, x0
 120:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 124:	ldr	x3, [x3]
 128:	mov	w1, #0x11                  	// #17
 12c:	ldrh	w4, [x19, #62]
 130:	ldrh	w20, [x19, #64]
 134:	ldr	x2, [x2]
 138:	ldr	x0, [x0]
 13c:	mul	w20, w20, w4
 140:	ldr	x4, [x19, #40]
 144:	mov	x5, x20
 148:	bl	0 <grub_real_dprintf>
 14c:	mov	x0, x20
 150:	bl	0 <grub_malloc>
 154:	str	x0, [x19, #72]
 158:	cbz	x0, 1cc <grub_elf64_load_phdrs.part.0+0xc4>
 15c:	ldr	x0, [x19]
 160:	ldr	x1, [x19, #40]
 164:	bl	0 <grub_file_seek>
 168:	cmn	x0, #0x1
 16c:	b.eq	198 <grub_elf64_load_phdrs.part.0+0x90>  // b.none
 170:	ldr	x0, [x19]
 174:	mov	x2, x20
 178:	ldr	x1, [x19, #72]
 17c:	bl	0 <grub_file_read>
 180:	cmp	x20, x0
 184:	b.ne	198 <grub_elf64_load_phdrs.part.0+0x90>  // b.any
 188:	mov	w0, #0x0                   	// #0
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x29, x30, [sp], #32
 194:	ret
 198:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 19c:	ldr	x20, [x0]
 1a0:	ldr	w0, [x20]
 1a4:	cbnz	w0, 18c <grub_elf64_load_phdrs.part.0+0x84>
 1a8:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 1ac:	mov	w0, #0x6                   	// #6
 1b0:	ldr	x2, [x19, #80]
 1b4:	ldr	x1, [x1]
 1b8:	bl	0 <grub_error>
 1bc:	ldr	w0, [x20]
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldp	x29, x30, [sp], #32
 1c8:	ret
 1cc:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldr	x0, [x0]
 1d8:	ldp	x29, x30, [sp], #32
 1dc:	ldr	w0, [x0]
 1e0:	ret
 1e4:	nop
	...

0000000000000210 <grub_elf_close>:
 210:	stp	x29, x30, [sp, #-32]!
 214:	mov	x29, sp
 218:	stp	x19, x20, [sp, #16]
 21c:	mov	x19, x0
 220:	ldr	x0, [x0, #72]
 224:	ldr	x20, [x19]
 228:	bl	0 <grub_free>
 22c:	ldr	x0, [x19, #80]
 230:	bl	0 <grub_free>
 234:	mov	x0, x19
 238:	bl	0 <grub_free>
 23c:	cbz	x20, 248 <grub_elf_close+0x38>
 240:	mov	x0, x20
 244:	bl	0 <grub_file_close>
 248:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldr	x0, [x0]
 254:	ldp	x29, x30, [sp], #32
 258:	ldr	w0, [x0]
 25c:	ret
	...

0000000000000268 <grub_elf_file>:
 268:	stp	x29, x30, [sp, #-48]!
 26c:	mov	x29, sp
 270:	stp	x19, x20, [sp, #16]
 274:	mov	x20, x0
 278:	mov	x0, #0x58                  	// #88
 27c:	str	x21, [sp, #32]
 280:	mov	x21, x1
 284:	bl	0 <grub_zalloc>
 288:	mov	x19, x0
 28c:	cbz	x0, 328 <grub_elf_file+0xc0>
 290:	str	x20, [x19]
 294:	mov	x0, x20
 298:	mov	x1, #0x0                   	// #0
 29c:	bl	0 <grub_file_seek>
 2a0:	cmn	x0, #0x1
 2a4:	b.eq	360 <grub_elf_file+0xf8>  // b.none
 2a8:	mov	x20, x19
 2ac:	mov	x2, #0x40                  	// #64
 2b0:	ldr	x0, [x20], #8
 2b4:	mov	x1, x20
 2b8:	bl	0 <grub_file_read>
 2bc:	cmp	x0, #0x40
 2c0:	b.ne	33c <grub_elf_file+0xd4>  // b.any
 2c4:	ldr	w1, [x19, #8]
 2c8:	mov	w0, #0x457f                	// #17791
 2cc:	movk	w0, #0x464c, lsl #16
 2d0:	cmp	w1, w0
 2d4:	b.ne	3a0 <grub_elf_file+0x138>  // b.any
 2d8:	ldrb	w0, [x20, #6]
 2dc:	cmp	w0, #0x1
 2e0:	b.ne	3a0 <grub_elf_file+0x138>  // b.any
 2e4:	ldrb	w0, [x19, #12]
 2e8:	cmp	w0, #0x1
 2ec:	b.eq	2f8 <grub_elf_file+0x90>  // b.none
 2f0:	cmp	w0, #0x2
 2f4:	b.ne	3b4 <grub_elf_file+0x14c>  // b.any
 2f8:	ldrb	w0, [x20, #5]
 2fc:	cmp	w0, #0x1
 300:	b.eq	390 <grub_elf_file+0x128>  // b.none
 304:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 308:	mov	w0, #0x15                  	// #21
 30c:	ldr	x1, [x1]
 310:	bl	0 <grub_error>
 314:	cbnz	w0, 360 <grub_elf_file+0xf8>
 318:	mov	x0, x21
 31c:	bl	0 <grub_strdup>
 320:	str	x0, [x19, #80]
 324:	cbz	x0, 364 <grub_elf_file+0xfc>
 328:	mov	x0, x19
 32c:	ldp	x19, x20, [sp, #16]
 330:	ldr	x21, [sp, #32]
 334:	ldp	x29, x30, [sp], #48
 338:	ret
 33c:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 340:	ldr	x0, [x0]
 344:	ldr	w0, [x0]
 348:	cbnz	w0, 360 <grub_elf_file+0xf8>
 34c:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 350:	mov	x2, x21
 354:	mov	w0, #0x6                   	// #6
 358:	ldr	x1, [x1]
 35c:	bl	0 <grub_error>
 360:	ldr	x0, [x19, #80]
 364:	bl	0 <grub_free>
 368:	ldr	x0, [x19, #72]
 36c:	bl	0 <grub_free>
 370:	mov	x0, x19
 374:	mov	x19, #0x0                   	// #0
 378:	bl	0 <grub_free>
 37c:	mov	x0, x19
 380:	ldp	x19, x20, [sp, #16]
 384:	ldr	x21, [sp, #32]
 388:	ldp	x29, x30, [sp], #48
 38c:	ret
 390:	ldr	w0, [x20, #20]
 394:	cmp	w0, #0x1
 398:	b.eq	318 <grub_elf_file+0xb0>  // b.none
 39c:	nop
 3a0:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 3a4:	mov	w0, #0x15                  	// #21
 3a8:	ldr	x1, [x1]
 3ac:	bl	0 <grub_error>
 3b0:	b	314 <grub_elf_file+0xac>
 3b4:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 3b8:	mov	w0, #0x15                  	// #21
 3bc:	ldr	x1, [x1]
 3c0:	bl	0 <grub_error>
 3c4:	b	314 <grub_elf_file+0xac>
	...

00000000000003f0 <grub_elf_open>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	mov	x29, sp
 3f8:	stp	x19, x20, [sp, #16]
 3fc:	mov	x19, x0
 400:	bl	0 <grub_file_open>
 404:	cbz	x0, 42c <grub_elf_open+0x3c>
 408:	mov	x1, x19
 40c:	mov	x20, x0
 410:	bl	268 <grub_elf_file>
 414:	mov	x19, x0
 418:	cbz	x0, 440 <grub_elf_open+0x50>
 41c:	mov	x0, x19
 420:	ldp	x19, x20, [sp, #16]
 424:	ldp	x29, x30, [sp], #32
 428:	ret
 42c:	mov	x19, #0x0                   	// #0
 430:	mov	x0, x19
 434:	ldp	x19, x20, [sp, #16]
 438:	ldp	x29, x30, [sp], #32
 43c:	ret
 440:	mov	x0, x20
 444:	bl	0 <grub_file_close>
 448:	mov	x0, x19
 44c:	ldp	x19, x20, [sp, #16]
 450:	ldp	x29, x30, [sp], #32
 454:	ret

0000000000000458 <grub_elf_is_elf32>:
 458:	ldrb	w0, [x0, #12]
 45c:	cmp	w0, #0x1
 460:	cset	w0, eq  // eq = none
 464:	ret

0000000000000468 <grub_elf32_load_phdrs>:
 468:	ldr	x1, [x0, #72]
 46c:	cbz	x1, 478 <grub_elf32_load_phdrs+0x10>
 470:	mov	w0, #0x0                   	// #0
 474:	ret
 478:	b	0 <grub_elf32_load_phdrs.part.0>
 47c:	nop

0000000000000480 <grub_elf32_size>:
 480:	stp	x29, x30, [sp, #-48]!
 484:	mov	x29, sp
 488:	ldr	x3, [x0, #72]
 48c:	stp	x19, x20, [sp, #16]
 490:	mov	x20, x0
 494:	str	x21, [sp, #32]
 498:	mov	x19, x1
 49c:	mov	x21, x2
 4a0:	cbz	x3, 544 <grub_elf32_size+0xc4>
 4a4:	ldrh	w9, [x20, #52]
 4a8:	mov	w7, #0x1                   	// #1
 4ac:	mov	w10, #0x0                   	// #0
 4b0:	mov	w0, #0x0                   	// #0
 4b4:	mov	w6, #0xffffffff            	// #-1
 4b8:	add	x9, x3, x9, lsl #5
 4bc:	cmp	x9, x3
 4c0:	b.ls	50c <grub_elf32_size+0x8c>  // b.plast
 4c4:	nop
 4c8:	ldr	w4, [x3]
 4cc:	cmp	w4, #0x1
 4d0:	b.ne	500 <grub_elf32_size+0x80>  // b.any
 4d4:	ldr	w5, [x3, #12]
 4d8:	add	w10, w10, #0x1
 4dc:	ldr	w4, [x3, #20]
 4e0:	ldr	w8, [x3, #28]
 4e4:	cmp	w6, w5
 4e8:	add	w4, w5, w4
 4ec:	csel	w6, w6, w5, ls  // ls = plast
 4f0:	cmp	w0, w4
 4f4:	csel	w0, w0, w4, cs  // cs = hs, nlast
 4f8:	cmp	w7, w8
 4fc:	csel	w7, w7, w8, cs  // cs = hs, nlast
 500:	add	x3, x3, #0x20
 504:	cmp	x9, x3
 508:	b.hi	4c8 <grub_elf32_size+0x48>  // b.pmore
 50c:	cbz	x19, 514 <grub_elf32_size+0x94>
 510:	str	wzr, [x19]
 514:	cbz	w10, 558 <grub_elf32_size+0xd8>
 518:	cmp	w0, w6
 51c:	b.cc	57c <grub_elf32_size+0xfc>  // b.lo, b.ul, b.last
 520:	cbz	x19, 528 <grub_elf32_size+0xa8>
 524:	str	w6, [x19]
 528:	cbz	x21, 530 <grub_elf32_size+0xb0>
 52c:	str	w7, [x21]
 530:	sub	w0, w0, w6
 534:	ldp	x19, x20, [sp, #16]
 538:	ldr	x21, [sp, #32]
 53c:	ldp	x29, x30, [sp], #48
 540:	ret
 544:	bl	0 <grub_elf32_load_phdrs.part.0>
 548:	ldr	x3, [x20, #72]
 54c:	cbnz	x3, 4a4 <grub_elf32_size+0x24>
 550:	cbz	x19, 558 <grub_elf32_size+0xd8>
 554:	str	wzr, [x19]
 558:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 55c:	mov	w0, #0x15                  	// #21
 560:	ldr	x1, [x1]
 564:	bl	0 <grub_error>
 568:	mov	x0, #0x0                   	// #0
 56c:	ldp	x19, x20, [sp, #16]
 570:	ldr	x21, [sp, #32]
 574:	ldp	x29, x30, [sp], #48
 578:	ret
 57c:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 580:	mov	w0, #0x15                  	// #21
 584:	ldr	x1, [x1]
 588:	bl	0 <grub_error>
 58c:	mov	x0, #0x0                   	// #0
 590:	ldp	x19, x20, [sp, #16]
 594:	ldr	x21, [sp, #32]
 598:	ldp	x29, x30, [sp], #48
 59c:	ret
	...

00000000000005b0 <grub_elf32_load>:
 5b0:	stp	x29, x30, [sp, #-128]!
 5b4:	mov	x29, sp
 5b8:	str	x1, [sp, #120]
 5bc:	ldr	x1, [x0, #72]
 5c0:	stp	x19, x20, [sp, #16]
 5c4:	mov	x19, x0
 5c8:	stp	x21, x22, [sp, #32]
 5cc:	mov	w21, w3
 5d0:	stp	x23, x24, [sp, #48]
 5d4:	mov	x24, x2
 5d8:	stp	x4, x5, [sp, #104]
 5dc:	cbz	x1, 758 <grub_elf32_load+0x1a8>
 5e0:	ldrh	w4, [x19, #52]
 5e4:	mvn	w23, w21
 5e8:	stp	x25, x26, [sp, #64]
 5ec:	and	w23, w23, #0x1
 5f0:	and	w21, w21, #0x6
 5f4:	stp	x27, x28, [sp, #80]
 5f8:	add	x0, x1, x4, lsl #5
 5fc:	mov	x27, x1
 600:	cmp	x27, x0
 604:	mov	x22, #0x0                   	// #0
 608:	mov	x20, #0xffffffffffffffff    	// #-1
 60c:	adrp	x26, 0 <grub_elf32_load_phdrs.part.0>
 610:	adrp	x25, 0 <grub_elf32_load_phdrs.part.0>
 614:	b.cs	640 <grub_elf32_load+0x90>  // b.hs, b.nlast
 618:	ldr	w0, [x27]
 61c:	cmp	w0, #0x1
 620:	b.eq	680 <grub_elf32_load+0xd0>  // b.none
 624:	cmp	w0, #0x2
 628:	csinc	w0, w23, wzr, eq  // eq = none
 62c:	cbz	w0, 680 <grub_elf32_load+0xd0>
 630:	add	x27, x27, #0x20
 634:	add	x0, x1, x4, lsl #5
 638:	cmp	x27, x0
 63c:	b.cc	618 <grub_elf32_load+0x68>  // b.lo, b.ul, b.last
 640:	ldp	x25, x26, [sp, #64]
 644:	ldp	x27, x28, [sp, #80]
 648:	ldr	x0, [sp, #104]
 64c:	cbz	x0, 654 <grub_elf32_load+0xa4>
 650:	str	x20, [x0]
 654:	ldr	x0, [sp, #112]
 658:	cbz	x0, 660 <grub_elf32_load+0xb0>
 65c:	str	x22, [x0]
 660:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 664:	ldr	x0, [x0]
 668:	ldr	w0, [x0]
 66c:	ldp	x19, x20, [sp, #16]
 670:	ldp	x21, x22, [sp, #32]
 674:	ldp	x23, x24, [sp, #48]
 678:	ldp	x29, x30, [sp], #128
 67c:	ret
 680:	ldr	w0, [x27, #12]
 684:	cmp	w21, #0x2
 688:	and	x4, x0, #0xfffffff
 68c:	b.eq	6a0 <grub_elf32_load+0xf0>  // b.none
 690:	mov	w4, w0
 694:	cmp	w21, #0x4
 698:	and	x0, x0, #0x3fffffff
 69c:	csel	x4, x0, x4, eq  // eq = none
 6a0:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 6a4:	add	x28, x24, x4
 6a8:	ldr	x3, [x26]
 6ac:	cmp	x20, x28
 6b0:	ldr	x0, [x0]
 6b4:	csel	x20, x20, x28, ls  // ls = plast
 6b8:	ldr	x2, [x25]
 6bc:	mov	x4, x28
 6c0:	ldr	w5, [x27, #20]
 6c4:	mov	w1, #0x8e                  	// #142
 6c8:	bl	0 <grub_real_dprintf>
 6cc:	ldr	w1, [x27, #4]
 6d0:	ldr	x0, [x19]
 6d4:	bl	0 <grub_file_seek>
 6d8:	cmn	x0, #0x1
 6dc:	b.eq	770 <grub_elf32_load+0x1c0>  // b.none
 6e0:	ldr	w1, [x27, #16]
 6e4:	cbnz	w1, 708 <grub_elf32_load+0x158>
 6e8:	ldr	w2, [x27, #20]
 6ec:	cmp	w2, w1
 6f0:	b.hi	740 <grub_elf32_load+0x190>  // b.pmore
 6f4:	ldrh	w4, [x19, #52]
 6f8:	add	x22, x22, w2, uxtw
 6fc:	add	x27, x27, #0x20
 700:	ldr	x1, [x19, #72]
 704:	b	634 <grub_elf32_load+0x84>
 708:	ldr	x0, [x19]
 70c:	mov	w2, w1
 710:	mov	x1, x28
 714:	bl	0 <grub_file_read>
 718:	ldr	w1, [x27, #16]
 71c:	cmp	x0, w1, uxtw
 720:	b.eq	6e8 <grub_elf32_load+0x138>  // b.none
 724:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 728:	ldr	x19, [x0]
 72c:	ldr	w0, [x19]
 730:	cbz	w0, 798 <grub_elf32_load+0x1e8>
 734:	ldp	x25, x26, [sp, #64]
 738:	ldp	x27, x28, [sp, #80]
 73c:	b	66c <grub_elf32_load+0xbc>
 740:	sub	w2, w2, w1
 744:	add	x0, x28, w1, uxtw
 748:	mov	w1, #0x0                   	// #0
 74c:	bl	0 <grub_memset>
 750:	ldr	w2, [x27, #20]
 754:	b	6f4 <grub_elf32_load+0x144>
 758:	bl	0 <grub_elf32_load_phdrs.part.0>
 75c:	mov	x22, #0x0                   	// #0
 760:	ldr	x1, [x19, #72]
 764:	mov	x20, #0xffffffffffffffff    	// #-1
 768:	cbnz	x1, 5e0 <grub_elf32_load+0x30>
 76c:	b	648 <grub_elf32_load+0x98>
 770:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 774:	ldp	x19, x20, [sp, #16]
 778:	ldr	x0, [x0]
 77c:	ldp	x21, x22, [sp, #32]
 780:	ldr	w0, [x0]
 784:	ldp	x23, x24, [sp, #48]
 788:	ldp	x25, x26, [sp, #64]
 78c:	ldp	x27, x28, [sp, #80]
 790:	ldp	x29, x30, [sp], #128
 794:	ret
 798:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 79c:	mov	w0, #0x6                   	// #6
 7a0:	ldr	x2, [sp, #120]
 7a4:	ldr	x1, [x1]
 7a8:	bl	0 <grub_error>
 7ac:	ldr	w0, [x19]
 7b0:	ldp	x25, x26, [sp, #64]
 7b4:	ldp	x27, x28, [sp, #80]
 7b8:	b	66c <grub_elf32_load+0xbc>
 7bc:	nop
	...

00000000000007e8 <grub_elf_is_elf64>:
 7e8:	ldrb	w0, [x0, #12]
 7ec:	cmp	w0, #0x2
 7f0:	cset	w0, eq  // eq = none
 7f4:	ret

00000000000007f8 <grub_elf64_load_phdrs>:
 7f8:	ldr	x1, [x0, #72]
 7fc:	cbz	x1, 808 <grub_elf64_load_phdrs+0x10>
 800:	mov	w0, #0x0                   	// #0
 804:	ret
 808:	b	108 <grub_elf64_load_phdrs.part.0>
 80c:	nop

0000000000000810 <grub_elf64_size>:
 810:	stp	x29, x30, [sp, #-48]!
 814:	mov	x29, sp
 818:	ldr	x3, [x0, #72]
 81c:	stp	x19, x20, [sp, #16]
 820:	mov	x20, x0
 824:	str	x21, [sp, #32]
 828:	mov	x19, x1
 82c:	mov	x21, x2
 830:	cbz	x3, 8d4 <grub_elf64_size+0xc4>
 834:	ldrh	w9, [x20, #64]
 838:	mov	w1, #0x38                  	// #56
 83c:	mov	w7, #0x1                   	// #1
 840:	mov	w10, #0x0                   	// #0
 844:	mov	x0, #0x0                   	// #0
 848:	mov	x6, #0xffffffffffffffff    	// #-1
 84c:	umaddl	x9, w9, w1, x3
 850:	cmp	x9, x3
 854:	b.ls	898 <grub_elf64_size+0x88>  // b.plast
 858:	ldr	w4, [x3]
 85c:	cmp	w4, #0x1
 860:	b.ne	88c <grub_elf64_size+0x7c>  // b.any
 864:	ldp	x4, x8, [x3, #40]
 868:	add	w10, w10, #0x1
 86c:	ldr	x5, [x3, #24]
 870:	cmp	x6, x5
 874:	add	x4, x5, x4
 878:	csel	x6, x6, x5, ls  // ls = plast
 87c:	cmp	x0, x4
 880:	csel	x0, x0, x4, cs  // cs = hs, nlast
 884:	cmp	x8, w7, uxtw
 888:	csel	w7, w7, w8, ls  // ls = plast
 88c:	add	x3, x3, #0x38
 890:	cmp	x9, x3
 894:	b.hi	858 <grub_elf64_size+0x48>  // b.pmore
 898:	cbz	x19, 8a0 <grub_elf64_size+0x90>
 89c:	str	xzr, [x19]
 8a0:	cbz	w10, 8e8 <grub_elf64_size+0xd8>
 8a4:	cmp	x0, x6
 8a8:	b.cc	90c <grub_elf64_size+0xfc>  // b.lo, b.ul, b.last
 8ac:	cbz	x19, 8b4 <grub_elf64_size+0xa4>
 8b0:	str	x6, [x19]
 8b4:	cbz	x21, 8c0 <grub_elf64_size+0xb0>
 8b8:	mov	w7, w7
 8bc:	str	x7, [x21]
 8c0:	sub	x0, x0, x6
 8c4:	ldp	x19, x20, [sp, #16]
 8c8:	ldr	x21, [sp, #32]
 8cc:	ldp	x29, x30, [sp], #48
 8d0:	ret
 8d4:	bl	108 <grub_elf64_load_phdrs.part.0>
 8d8:	ldr	x3, [x20, #72]
 8dc:	cbnz	x3, 834 <grub_elf64_size+0x24>
 8e0:	cbz	x19, 8e8 <grub_elf64_size+0xd8>
 8e4:	str	xzr, [x19]
 8e8:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 8ec:	mov	w0, #0x15                  	// #21
 8f0:	ldr	x1, [x1]
 8f4:	bl	0 <grub_error>
 8f8:	mov	x0, #0x0                   	// #0
 8fc:	ldp	x19, x20, [sp, #16]
 900:	ldr	x21, [sp, #32]
 904:	ldp	x29, x30, [sp], #48
 908:	ret
 90c:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 910:	mov	w0, #0x15                  	// #21
 914:	ldr	x1, [x1]
 918:	bl	0 <grub_error>
 91c:	mov	x0, #0x0                   	// #0
 920:	ldp	x19, x20, [sp, #16]
 924:	ldr	x21, [sp, #32]
 928:	ldp	x29, x30, [sp], #48
 92c:	ret
	...

0000000000000940 <grub_elf64_load>:
 940:	stp	x29, x30, [sp, #-128]!
 944:	mov	x29, sp
 948:	str	x1, [sp, #120]
 94c:	ldr	x1, [x0, #72]
 950:	stp	x19, x20, [sp, #16]
 954:	mov	x19, x0
 958:	stp	x21, x22, [sp, #32]
 95c:	mov	w20, w3
 960:	stp	x25, x26, [sp, #64]
 964:	mov	x25, x2
 968:	stp	x4, x5, [sp, #104]
 96c:	cbz	x1, b00 <grub_elf64_load+0x1c0>
 970:	ldrh	w2, [x19, #64]
 974:	mov	x22, #0x0                   	// #0
 978:	stp	x23, x24, [sp, #48]
 97c:	mov	w23, #0x38                  	// #56
 980:	mvn	w24, w20
 984:	stp	x27, x28, [sp, #80]
 988:	mov	x27, x1
 98c:	umaddl	x0, w2, w23, x1
 990:	and	w24, w24, #0x1
 994:	and	w20, w20, #0x6
 998:	cmp	x27, x0
 99c:	mov	x21, #0xffffffffffffffff    	// #-1
 9a0:	adrp	x26, 0 <grub_elf32_load_phdrs.part.0>
 9a4:	b.cs	9d0 <grub_elf64_load+0x90>  // b.hs, b.nlast
 9a8:	ldr	w0, [x27]
 9ac:	cmp	w0, #0x1
 9b0:	b.eq	a10 <grub_elf64_load+0xd0>  // b.none
 9b4:	cmp	w0, #0x2
 9b8:	csinc	w0, w24, wzr, eq  // eq = none
 9bc:	cbz	w0, a10 <grub_elf64_load+0xd0>
 9c0:	add	x27, x27, #0x38
 9c4:	umaddl	x0, w2, w23, x1
 9c8:	cmp	x27, x0
 9cc:	b.cc	9a8 <grub_elf64_load+0x68>  // b.lo, b.ul, b.last
 9d0:	ldp	x23, x24, [sp, #48]
 9d4:	ldp	x27, x28, [sp, #80]
 9d8:	ldr	x0, [sp, #104]
 9dc:	cbz	x0, 9e4 <grub_elf64_load+0xa4>
 9e0:	str	x21, [x0]
 9e4:	ldr	x0, [sp, #112]
 9e8:	cbz	x0, 9f0 <grub_elf64_load+0xb0>
 9ec:	str	x22, [x0]
 9f0:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 9f4:	ldr	x0, [x0]
 9f8:	ldr	w0, [x0]
 9fc:	ldp	x19, x20, [sp, #16]
 a00:	ldp	x21, x22, [sp, #32]
 a04:	ldp	x25, x26, [sp, #64]
 a08:	ldp	x29, x30, [sp], #128
 a0c:	ret
 a10:	cmp	w20, #0x4
 a14:	ldr	x4, [x27, #24]
 a18:	b.eq	af8 <grub_elf64_load+0x1b8>  // b.none
 a1c:	cmp	w20, #0x6
 a20:	b.eq	af0 <grub_elf64_load+0x1b0>  // b.none
 a24:	cmp	w20, #0x2
 a28:	and	x0, x4, #0xfffffff
 a2c:	csel	x4, x0, x4, eq  // eq = none
 a30:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 a34:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 a38:	add	x28, x25, x4
 a3c:	mov	w1, #0x8e                  	// #142
 a40:	ldr	x2, [x2]
 a44:	cmp	x21, x28
 a48:	ldr	x0, [x0]
 a4c:	csel	x21, x21, x28, ls  // ls = plast
 a50:	ldr	x3, [x26]
 a54:	mov	x4, x28
 a58:	ldr	x5, [x27, #40]
 a5c:	bl	0 <grub_real_dprintf>
 a60:	ldr	x0, [x19]
 a64:	ldr	x1, [x27, #8]
 a68:	bl	0 <grub_file_seek>
 a6c:	cmn	x0, #0x1
 a70:	b.eq	b18 <grub_elf64_load+0x1d8>  // b.none
 a74:	ldr	x1, [x27, #32]
 a78:	cbnz	x1, a9c <grub_elf64_load+0x15c>
 a7c:	ldr	x2, [x27, #40]
 a80:	cmp	x2, x1
 a84:	b.hi	ad8 <grub_elf64_load+0x198>  // b.pmore
 a88:	add	x22, x22, x2
 a8c:	add	x27, x27, #0x38
 a90:	ldrh	w2, [x19, #64]
 a94:	ldr	x1, [x19, #72]
 a98:	b	9c4 <grub_elf64_load+0x84>
 a9c:	ldr	x0, [x19]
 aa0:	mov	x2, x1
 aa4:	mov	x1, x28
 aa8:	bl	0 <grub_file_read>
 aac:	mov	x1, x0
 ab0:	ldr	x2, [x27, #32]
 ab4:	cmp	x2, x0
 ab8:	b.eq	a7c <grub_elf64_load+0x13c>  // b.none
 abc:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 ac0:	ldr	x19, [x0]
 ac4:	ldr	w0, [x19]
 ac8:	cbz	w0, b40 <grub_elf64_load+0x200>
 acc:	ldp	x23, x24, [sp, #48]
 ad0:	ldp	x27, x28, [sp, #80]
 ad4:	b	9fc <grub_elf64_load+0xbc>
 ad8:	sub	x2, x2, x1
 adc:	add	x0, x28, x1
 ae0:	mov	w1, #0x0                   	// #0
 ae4:	bl	0 <grub_memset>
 ae8:	ldr	x2, [x27, #40]
 aec:	b	a88 <grub_elf64_load+0x148>
 af0:	and	x4, x4, #0x3fffffffffffffff
 af4:	b	a30 <grub_elf64_load+0xf0>
 af8:	and	x4, x4, #0x3fffffff
 afc:	b	a30 <grub_elf64_load+0xf0>
 b00:	bl	108 <grub_elf64_load_phdrs.part.0>
 b04:	mov	x22, #0x0                   	// #0
 b08:	ldr	x1, [x19, #72]
 b0c:	mov	x21, #0xffffffffffffffff    	// #-1
 b10:	cbnz	x1, 970 <grub_elf64_load+0x30>
 b14:	b	9d8 <grub_elf64_load+0x98>
 b18:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 b1c:	ldp	x19, x20, [sp, #16]
 b20:	ldr	x0, [x0]
 b24:	ldp	x21, x22, [sp, #32]
 b28:	ldr	w0, [x0]
 b2c:	ldp	x23, x24, [sp, #48]
 b30:	ldp	x25, x26, [sp, #64]
 b34:	ldp	x27, x28, [sp, #80]
 b38:	ldp	x29, x30, [sp], #128
 b3c:	ret
 b40:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 b44:	mov	w0, #0x6                   	// #6
 b48:	ldr	x2, [sp, #120]
 b4c:	ldr	x1, [x1]
 b50:	bl	0 <grub_error>
 b54:	ldr	w0, [x19]
 b58:	ldp	x23, x24, [sp, #48]
 b5c:	ldp	x27, x28, [sp, #80]
 b60:	b	9fc <grub_elf64_load+0xbc>
 b64:	nop
	...
