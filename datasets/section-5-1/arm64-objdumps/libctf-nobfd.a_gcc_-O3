In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libctf-nobfd.a_gcc_-O3:

ctf-archive.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <sort_modent_by_name>:
   0:	ldr	x0, [x0]
   4:	ldr	x1, [x1]
   8:	add	x0, x2, x0
   c:	add	x1, x2, x1
  10:	b	0 <strcmp>
  14:	nop

0000000000000018 <ctf_arc_open_by_name_internal>:
  18:	stp	x29, x30, [sp, #-128]!
  1c:	cmp	x3, #0x0
  20:	mov	x29, sp
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x24, x0
  2c:	adrp	x0, 0 <_CTF_SECTION>
  30:	add	x0, x0, #0x0
  34:	stp	x27, x28, [sp, #80]
  38:	csel	x28, x0, x3, eq  // eq = none
  3c:	mov	x23, x2
  40:	adrp	x0, 0 <sort_modent_by_name>
  44:	add	x0, x0, #0x0
  48:	stp	x19, x20, [sp, #16]
  4c:	stp	x21, x22, [sp, #32]
  50:	mov	x22, x1
  54:	mov	x21, x4
  58:	mov	x1, x28
  5c:	stp	x25, x26, [sp, #64]
  60:	bl	0 <ctf_dprintf>
  64:	ldp	x27, x20, [x24, #16]
  68:	mov	x26, #0x0                   	// #0
  6c:	nop
  70:	add	x19, x27, x26
  74:	mov	x0, x28
  78:	cmp	x27, x26
  7c:	b.ls	c0 <ctf_arc_open_by_name_internal+0xa8>  // b.plast
  80:	lsr	x19, x19, #1
  84:	lsl	x5, x19, #4
  88:	add	x5, x5, #0x28
  8c:	add	x25, x24, x5
  90:	ldr	x1, [x24, x5]
  94:	add	x1, x20, x1
  98:	add	x1, x24, x1
  9c:	bl	0 <strcmp>
  a0:	cmp	w0, #0x0
  a4:	b.lt	f0 <ctf_arc_open_by_name_internal+0xd8>  // b.tstop
  a8:	b.eq	f8 <ctf_arc_open_by_name_internal+0xe0>  // b.none
  ac:	add	x26, x19, #0x1
  b0:	mov	x0, x28
  b4:	add	x19, x27, x26
  b8:	cmp	x27, x26
  bc:	b.hi	80 <ctf_arc_open_by_name_internal+0x68>  // b.pmore
  c0:	cbz	x21, 178 <ctf_arc_open_by_name_internal+0x160>
  c4:	mov	w0, #0x415                 	// #1045
  c8:	mov	x19, #0x0                   	// #0
  cc:	str	w0, [x21]
  d0:	mov	x0, x19
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x23, x24, [sp, #48]
  e0:	ldp	x25, x26, [sp, #64]
  e4:	ldp	x27, x28, [sp, #80]
  e8:	ldp	x29, x30, [sp], #128
  ec:	ret
  f0:	mov	x27, x19
  f4:	b	70 <ctf_arc_open_by_name_internal+0x58>
  f8:	ldr	x19, [x25, #8]
  fc:	adrp	x0, 0 <sort_modent_by_name>
 100:	add	x0, x0, #0x0
 104:	mov	x1, x19
 108:	bl	0 <ctf_dprintf>
 10c:	ldr	x0, [x24, #32]
 110:	adrp	x5, 0 <_CTF_SECTION>
 114:	add	x5, x5, #0x0
 118:	mov	x6, #0x1                   	// #1
 11c:	add	x19, x19, x0
 120:	mov	x3, x21
 124:	add	x4, x19, #0x8
 128:	mov	x2, x23
 12c:	add	x4, x24, x4
 130:	mov	x1, x22
 134:	ldr	x7, [x24, x19]
 138:	add	x0, sp, #0x60
 13c:	stp	x5, x4, [sp, #96]
 140:	stp	x7, x6, [sp, #112]
 144:	bl	0 <ctf_bufopen>
 148:	mov	x19, x0
 14c:	cbz	x0, d0 <ctf_arc_open_by_name_internal+0xb8>
 150:	ldr	w1, [x24, #8]
 154:	bl	0 <ctf_setmodel>
 158:	mov	x0, x19
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldp	x21, x22, [sp, #32]
 164:	ldp	x23, x24, [sp, #48]
 168:	ldp	x25, x26, [sp, #64]
 16c:	ldp	x27, x28, [sp, #80]
 170:	ldp	x29, x30, [sp], #128
 174:	ret
 178:	mov	x19, #0x0                   	// #0
 17c:	b	d0 <ctf_arc_open_by_name_internal+0xb8>

0000000000000180 <ctf_arc_write_fd>:
 180:	stp	x29, x30, [sp, #-176]!
 184:	mov	x29, sp
 188:	stp	x19, x20, [sp, #16]
 18c:	lsl	x20, x2, #4
 190:	mov	x19, x2
 194:	stp	x21, x22, [sp, #32]
 198:	mov	w21, w0
 19c:	adrp	x0, 0 <sort_modent_by_name>
 1a0:	add	x0, x0, #0x0
 1a4:	stp	x23, x24, [sp, #48]
 1a8:	mov	x23, x3
 1ac:	stp	x27, x28, [sp, #80]
 1b0:	add	x27, x20, #0x28
 1b4:	str	x1, [sp, #96]
 1b8:	mov	x1, x2
 1bc:	str	x4, [sp, #112]
 1c0:	strb	wzr, [sp, #167]
 1c4:	bl	0 <ctf_dprintf>
 1c8:	mov	x1, x27
 1cc:	adrp	x0, 0 <sort_modent_by_name>
 1d0:	add	x0, x0, #0x0
 1d4:	bl	0 <ctf_dprintf>
 1d8:	add	x1, x20, #0x27
 1dc:	mov	w0, w21
 1e0:	mov	w2, #0x0                   	// #0
 1e4:	bl	0 <lseek>
 1e8:	tbnz	x0, #63, 2a4 <ctf_arc_write_fd+0x124>
 1ec:	add	x1, sp, #0xa7
 1f0:	mov	w0, w21
 1f4:	mov	x2, #0x1                   	// #1
 1f8:	bl	0 <write>
 1fc:	tbnz	x0, #63, 2a4 <ctf_arc_write_fd+0x124>
 200:	mov	w4, w21
 204:	mov	x1, x27
 208:	mov	x5, #0x0                   	// #0
 20c:	mov	w3, #0x1                   	// #1
 210:	mov	w2, #0x3                   	// #3
 214:	mov	x0, #0x0                   	// #0
 218:	stp	x25, x26, [sp, #64]
 21c:	bl	0 <mmap>
 220:	mov	x26, x0
 224:	sub	x0, x0, #0x1
 228:	cmn	x0, #0x3
 22c:	b.hi	570 <ctf_arc_write_fd+0x3f0>  // b.pmore
 230:	mov	x0, #0x3eeb                	// #16107
 234:	str	x19, [x26, #16]
 238:	movk	x0, #0xd762, lsl #16
 23c:	str	x27, [x26, #32]
 240:	movk	x0, #0xf2a4, lsl #32
 244:	movk	x0, #0x8b47, lsl #48
 248:	str	x0, [x26]
 24c:	cbnz	x19, 2f8 <ctf_arc_write_fd+0x178>
 250:	mov	x0, #0x0                   	// #0
 254:	bl	0 <malloc>
 258:	str	x0, [sp, #104]
 25c:	cbz	x0, 640 <ctf_arc_write_fd+0x4c0>
 260:	mov	x4, x0
 264:	adrp	x3, 0 <sort_modent_by_name>
 268:	add	x3, x3, #0x0
 26c:	add	x0, x26, #0x28
 270:	mov	x2, #0x10                  	// #16
 274:	mov	x1, #0x0                   	// #0
 278:	bl	0 <qsort_r>
 27c:	mov	w0, w21
 280:	mov	w2, #0x1                   	// #1
 284:	mov	x1, #0x0                   	// #0
 288:	bl	0 <lseek>
 28c:	tbz	x0, #63, 5d0 <ctf_arc_write_fd+0x450>
 290:	adrp	x20, 0 <sort_modent_by_name>
 294:	bl	0 <__errno_location>
 298:	add	x20, x20, #0x0
 29c:	mov	x19, x0
 2a0:	b	598 <ctf_arc_write_fd+0x418>
 2a4:	adrp	x20, 0 <sort_modent_by_name>
 2a8:	bl	0 <__errno_location>
 2ac:	add	x20, x20, #0x0
 2b0:	mov	x19, x0
 2b4:	ldr	w0, [x19]
 2b8:	cmp	w0, #0x3e7
 2bc:	b.le	2ec <ctf_arc_write_fd+0x16c>
 2c0:	bl	0 <ctf_errmsg>
 2c4:	mov	x1, x0
 2c8:	mov	x0, x20
 2cc:	bl	0 <ctf_dprintf>
 2d0:	ldr	w0, [x19]
 2d4:	ldp	x19, x20, [sp, #16]
 2d8:	ldp	x21, x22, [sp, #32]
 2dc:	ldp	x23, x24, [sp, #48]
 2e0:	ldp	x27, x28, [sp, #80]
 2e4:	ldp	x29, x30, [sp], #176
 2e8:	ret
 2ec:	bl	0 <strerror>
 2f0:	mov	x1, x0
 2f4:	b	2c8 <ctf_arc_write_fd+0x148>
 2f8:	ldr	x0, [sp, #96]
 2fc:	ldr	x0, [x0]
 300:	bl	0 <ctf_getmodel>
 304:	sxtw	x0, w0
 308:	ldr	x22, [x26, #16]
 30c:	str	x0, [x26, #8]
 310:	cbz	x22, 250 <ctf_arc_write_fd+0xd0>
 314:	add	x22, x23, x22, lsl #3
 318:	mov	x20, x23
 31c:	mov	x19, #0x0                   	// #0
 320:	ldr	x0, [x20], #8
 324:	add	x19, x19, #0x1
 328:	bl	0 <strlen>
 32c:	add	x19, x19, x0
 330:	cmp	x22, x20
 334:	b.ne	320 <ctf_arc_write_fd+0x1a0>  // b.any
 338:	mov	x0, x19
 33c:	bl	0 <malloc>
 340:	str	x0, [sp, #104]
 344:	cbz	x0, 640 <ctf_arc_write_fd+0x4c0>
 348:	add	x0, x26, #0x28
 34c:	mov	x19, #0x0                   	// #0
 350:	mov	x22, x0
 354:	adrp	x0, 0 <ctf_write>
 358:	add	x0, x0, #0x0
 35c:	mov	x20, #0x0                   	// #0
 360:	str	x0, [sp, #136]
 364:	adrp	x0, 0 <ctf_compress_write>
 368:	add	x0, x0, #0x0
 36c:	str	x0, [sp, #144]
 370:	str	x22, [sp, #152]
 374:	nop
 378:	ldr	x1, [x23, x20, lsl #3]
 37c:	ldr	x0, [sp, #104]
 380:	add	x0, x0, x19
 384:	bl	0 <strcpy>
 388:	ldr	x0, [sp, #96]
 38c:	str	xzr, [sp, #168]
 390:	ldr	x24, [x0, x20, lsl #3]
 394:	mov	x0, x24
 398:	bl	0 <ctf_serialize>
 39c:	tbnz	w0, #31, 560 <ctf_arc_write_fd+0x3e0>
 3a0:	mov	w0, w21
 3a4:	mov	w2, #0x1                   	// #1
 3a8:	mov	x1, #0x0                   	// #0
 3ac:	bl	0 <lseek>
 3b0:	str	x0, [sp, #128]
 3b4:	tbnz	x0, #63, 498 <ctf_arc_write_fd+0x318>
 3b8:	ldr	x1, [sp, #112]
 3bc:	add	x25, sp, #0xa8
 3c0:	ldr	x0, [x24, #416]
 3c4:	mov	x28, #0x8                   	// #8
 3c8:	cmp	x1, x0
 3cc:	ldp	x1, x0, [sp, #136]
 3d0:	csel	x0, x0, x1, cc  // cc = lo, ul, last
 3d4:	str	x0, [sp, #120]
 3d8:	mov	x2, x28
 3dc:	mov	x1, x25
 3e0:	mov	w0, w21
 3e4:	bl	0 <write>
 3e8:	tbnz	x0, #63, 498 <ctf_arc_write_fd+0x318>
 3ec:	add	x25, x25, x0
 3f0:	subs	x28, x28, x0
 3f4:	b.ne	3d8 <ctf_arc_write_fd+0x258>  // b.any
 3f8:	ldr	x2, [sp, #120]
 3fc:	mov	w1, w21
 400:	mov	x0, x24
 404:	blr	x2
 408:	cbnz	w0, 560 <ctf_arc_write_fd+0x3e0>
 40c:	mov	w0, w21
 410:	mov	w2, #0x1                   	// #1
 414:	mov	x1, #0x0                   	// #0
 418:	bl	0 <lseek>
 41c:	mov	x25, x0
 420:	tbnz	x0, #63, 498 <ctf_arc_write_fd+0x318>
 424:	ldr	x1, [sp, #128]
 428:	mov	w0, w21
 42c:	mov	w2, #0x0                   	// #0
 430:	add	x24, sp, #0xa8
 434:	sub	x3, x25, x1
 438:	str	x3, [sp, #168]
 43c:	mov	x3, #0x8                   	// #8
 440:	str	x3, [sp, #120]
 444:	bl	0 <lseek>
 448:	ldr	x3, [sp, #120]
 44c:	tbnz	x0, #63, 498 <ctf_arc_write_fd+0x318>
 450:	mov	x2, x3
 454:	mov	x1, x24
 458:	mov	w0, w21
 45c:	str	x3, [sp, #120]
 460:	bl	0 <write>
 464:	ldr	x3, [sp, #120]
 468:	tbnz	x0, #63, 498 <ctf_arc_write_fd+0x318>
 46c:	add	x24, x24, x0
 470:	subs	x3, x3, x0
 474:	b.ne	450 <ctf_arc_write_fd+0x2d0>  // b.any
 478:	add	x1, x25, #0x7
 47c:	mov	w0, w21
 480:	and	x1, x1, #0xfffffffffffffff8
 484:	mov	w2, #0x0                   	// #0
 488:	bl	0 <lseek>
 48c:	ldr	x1, [sp, #128]
 490:	tbz	x0, #63, 4bc <ctf_arc_write_fd+0x33c>
 494:	nop
 498:	bl	0 <__errno_location>
 49c:	ldr	w24, [x0]
 4a0:	neg	w24, w24
 4a4:	sxtw	x24, w24
 4a8:	add	x0, x24, #0x3e7
 4ac:	mov	x1, x24
 4b0:	cmp	x0, #0x3e6
 4b4:	b.ls	588 <ctf_arc_write_fd+0x408>  // b.plast
 4b8:	tbnz	x24, #63, 5b4 <ctf_arc_write_fd+0x434>
 4bc:	ldr	x0, [x23, x20, lsl #3]
 4c0:	sub	x1, x1, x27
 4c4:	stp	x19, x1, [x22]
 4c8:	add	x20, x20, #0x1
 4cc:	add	x19, x19, #0x1
 4d0:	bl	0 <strlen>
 4d4:	add	x22, x22, #0x10
 4d8:	ldr	x1, [x26, #16]
 4dc:	add	x19, x19, x0
 4e0:	cmp	x1, x20
 4e4:	b.hi	378 <ctf_arc_write_fd+0x1f8>  // b.pmore
 4e8:	ldr	x4, [sp, #104]
 4ec:	adrp	x3, 0 <sort_modent_by_name>
 4f0:	ldr	x0, [sp, #152]
 4f4:	add	x3, x3, #0x0
 4f8:	mov	x2, #0x10                  	// #16
 4fc:	bl	0 <qsort_r>
 500:	mov	w0, w21
 504:	mov	w2, #0x1                   	// #1
 508:	mov	x1, #0x0                   	// #0
 50c:	bl	0 <lseek>
 510:	tbnz	x0, #63, 290 <ctf_arc_write_fd+0x110>
 514:	str	x0, [x26, #24]
 518:	cmp	x19, #0x0
 51c:	b.le	5d8 <ctf_arc_write_fd+0x458>
 520:	ldr	x20, [sp, #104]
 524:	b	538 <ctf_arc_write_fd+0x3b8>
 528:	sub	x19, x19, x0
 52c:	add	x20, x20, x0
 530:	cmp	x19, #0x0
 534:	b.le	5d8 <ctf_arc_write_fd+0x458>
 538:	mov	x2, x19
 53c:	mov	x1, x20
 540:	mov	w0, w21
 544:	bl	0 <write>
 548:	tbz	x0, #63, 528 <ctf_arc_write_fd+0x3a8>
 54c:	adrp	x20, 0 <sort_modent_by_name>
 550:	bl	0 <__errno_location>
 554:	add	x20, x20, #0x0
 558:	mov	x19, x0
 55c:	b	598 <ctf_arc_write_fd+0x418>
 560:	ldr	w24, [x24, #556]
 564:	neg	w24, w24
 568:	sxtw	x24, w24
 56c:	b	4a8 <ctf_arc_write_fd+0x328>
 570:	bl	0 <__errno_location>
 574:	adrp	x20, 0 <sort_modent_by_name>
 578:	mov	x19, x0
 57c:	add	x20, x20, #0x0
 580:	ldp	x25, x26, [sp, #64]
 584:	b	2b4 <ctf_arc_write_fd+0x134>
 588:	adrp	x20, 0 <sort_modent_by_name>
 58c:	bl	0 <__errno_location>
 590:	add	x20, x20, #0x0
 594:	mov	x19, x0
 598:	ldr	x0, [sp, #104]
 59c:	bl	0 <free>
 5a0:	mov	x0, x26
 5a4:	mov	x1, x27
 5a8:	bl	0 <munmap>
 5ac:	ldp	x25, x26, [sp, #64]
 5b0:	b	2b4 <ctf_arc_write_fd+0x134>
 5b4:	bl	0 <__errno_location>
 5b8:	neg	w24, w24
 5bc:	adrp	x20, 0 <sort_modent_by_name>
 5c0:	mov	x19, x0
 5c4:	add	x20, x20, #0x0
 5c8:	str	w24, [x0]
 5cc:	b	598 <ctf_arc_write_fd+0x418>
 5d0:	str	x0, [x26, #24]
 5d4:	nop
 5d8:	ldr	x0, [sp, #104]
 5dc:	bl	0 <free>
 5e0:	mov	x1, x27
 5e4:	mov	x0, x26
 5e8:	mov	w2, #0x1                   	// #1
 5ec:	bl	0 <msync>
 5f0:	tbnz	w0, #31, 62c <ctf_arc_write_fd+0x4ac>
 5f4:	mov	x1, x27
 5f8:	mov	x0, x26
 5fc:	bl	0 <munmap>
 600:	mov	w1, w0
 604:	mov	w0, #0x0                   	// #0
 608:	tbnz	w1, #31, 614 <ctf_arc_write_fd+0x494>
 60c:	ldp	x25, x26, [sp, #64]
 610:	b	2d4 <ctf_arc_write_fd+0x154>
 614:	bl	0 <__errno_location>
 618:	adrp	x20, 0 <sort_modent_by_name>
 61c:	mov	x19, x0
 620:	add	x20, x20, #0x0
 624:	ldp	x25, x26, [sp, #64]
 628:	b	2b4 <ctf_arc_write_fd+0x134>
 62c:	adrp	x20, 0 <sort_modent_by_name>
 630:	bl	0 <__errno_location>
 634:	add	x20, x20, #0x0
 638:	mov	x19, x0
 63c:	b	5a0 <ctf_arc_write_fd+0x420>
 640:	adrp	x20, 0 <sort_modent_by_name>
 644:	bl	0 <__errno_location>
 648:	add	x20, x20, #0x0
 64c:	mov	x19, x0
 650:	b	5a0 <ctf_arc_write_fd+0x420>
 654:	nop

0000000000000658 <ctf_arc_write>:
 658:	stp	x29, x30, [sp, #-64]!
 65c:	mov	x29, sp
 660:	stp	x19, x20, [sp, #16]
 664:	mov	x19, x1
 668:	mov	w1, #0x242                 	// #578
 66c:	movk	w1, #0x8, lsl #16
 670:	stp	x21, x22, [sp, #32]
 674:	mov	x21, x2
 678:	mov	x22, x3
 67c:	mov	w2, #0x1b6                 	// #438
 680:	stp	x23, x24, [sp, #48]
 684:	mov	x23, x4
 688:	mov	x24, x0
 68c:	bl	0 <open>
 690:	tbnz	w0, #31, 70c <ctf_arc_write+0xb4>
 694:	mov	w20, w0
 698:	mov	x1, x19
 69c:	mov	x4, x23
 6a0:	mov	x3, x22
 6a4:	mov	x2, x21
 6a8:	bl	180 <ctf_arc_write_fd>
 6ac:	mov	w19, w0
 6b0:	mov	w0, w20
 6b4:	cbz	w19, 6e0 <ctf_arc_write+0x88>
 6b8:	bl	0 <close>
 6bc:	tbz	w19, #31, 6c8 <ctf_arc_write+0x70>
 6c0:	mov	x0, x24
 6c4:	bl	0 <unlink>
 6c8:	mov	w0, w19
 6cc:	ldp	x19, x20, [sp, #16]
 6d0:	ldp	x21, x22, [sp, #32]
 6d4:	ldp	x23, x24, [sp, #48]
 6d8:	ldp	x29, x30, [sp], #64
 6dc:	ret
 6e0:	bl	0 <close>
 6e4:	mov	w19, w0
 6e8:	tbnz	w0, #31, 74c <ctf_arc_write+0xf4>
 6ec:	mov	w0, w20
 6f0:	bl	0 <close>
 6f4:	mov	w0, w19
 6f8:	ldp	x19, x20, [sp, #16]
 6fc:	ldp	x21, x22, [sp, #32]
 700:	ldp	x23, x24, [sp, #48]
 704:	ldp	x29, x30, [sp], #64
 708:	ret
 70c:	bl	0 <__errno_location>
 710:	mov	x19, x0
 714:	ldr	w0, [x0]
 718:	bl	0 <strerror>
 71c:	mov	x2, x0
 720:	mov	x1, x24
 724:	adrp	x0, 0 <sort_modent_by_name>
 728:	add	x0, x0, #0x0
 72c:	bl	0 <ctf_dprintf>
 730:	ldr	w19, [x19]
 734:	ldp	x21, x22, [sp, #32]
 738:	mov	w0, w19
 73c:	ldp	x19, x20, [sp, #16]
 740:	ldp	x23, x24, [sp, #48]
 744:	ldp	x29, x30, [sp], #64
 748:	ret
 74c:	bl	0 <__errno_location>
 750:	ldr	w0, [x0]
 754:	bl	0 <strerror>
 758:	mov	x1, x0
 75c:	adrp	x0, 0 <sort_modent_by_name>
 760:	add	x0, x0, #0x0
 764:	bl	0 <ctf_dprintf>
 768:	mov	x0, x24
 76c:	bl	0 <unlink>
 770:	b	6c8 <ctf_arc_write+0x70>
 774:	nop

0000000000000778 <ctf_arc_bufopen>:
 778:	mov	x1, #0x3eeb                	// #16107
 77c:	ldr	x3, [x0]
 780:	movk	x1, #0xd762, lsl #16
 784:	movk	x1, #0xf2a4, lsl #32
 788:	movk	x1, #0x8b47, lsl #48
 78c:	cmp	x3, x1
 790:	b.ne	798 <ctf_arc_bufopen+0x20>  // b.any
 794:	ret
 798:	mov	x0, #0x0                   	// #0
 79c:	cbz	x2, 794 <ctf_arc_bufopen+0x1c>
 7a0:	mov	w1, #0x3e8                 	// #1000
 7a4:	str	w1, [x2]
 7a8:	ret
 7ac:	nop

00000000000007b0 <ctf_arc_open_internal>:
 7b0:	stp	x29, x30, [sp, #-192]!
 7b4:	mov	x29, sp
 7b8:	stp	x19, x20, [sp, #16]
 7bc:	stp	x21, x22, [sp, #32]
 7c0:	mov	x21, x0
 7c4:	mov	x22, x1
 7c8:	stp	x23, x24, [sp, #48]
 7cc:	bl	0 <libctf_init_debug>
 7d0:	mov	x0, x21
 7d4:	mov	w1, #0x0                   	// #0
 7d8:	bl	0 <open>
 7dc:	tbnz	w0, #31, 868 <ctf_arc_open_internal+0xb8>
 7e0:	mov	w19, w0
 7e4:	mov	w1, w0
 7e8:	add	x2, sp, #0x40
 7ec:	mov	w0, #0x0                   	// #0
 7f0:	bl	0 <__fxstat>
 7f4:	tbnz	w0, #31, 8fc <ctf_arc_open_internal+0x14c>
 7f8:	ldr	x1, [sp, #112]
 7fc:	mov	w4, w19
 800:	mov	x5, #0x0                   	// #0
 804:	mov	w3, #0x2                   	// #2
 808:	mov	w2, #0x3                   	// #3
 80c:	mov	x0, #0x0                   	// #0
 810:	bl	0 <mmap>
 814:	mov	x20, x0
 818:	sub	x0, x0, #0x1
 81c:	cmn	x0, #0x3
 820:	b.hi	910 <ctf_arc_open_internal+0x160>  // b.pmore
 824:	mov	x0, #0x3eeb                	// #16107
 828:	ldr	x1, [x20]
 82c:	movk	x0, #0xd762, lsl #16
 830:	movk	x0, #0xf2a4, lsl #32
 834:	movk	x0, #0x8b47, lsl #48
 838:	cmp	x1, x0
 83c:	ldr	x24, [sp, #112]
 840:	b.ne	8cc <ctf_arc_open_internal+0x11c>  // b.any
 844:	str	x24, [x20]
 848:	mov	w0, w19
 84c:	bl	0 <close>
 850:	mov	x0, x20
 854:	ldp	x19, x20, [sp, #16]
 858:	ldp	x21, x22, [sp, #32]
 85c:	ldp	x23, x24, [sp, #48]
 860:	ldp	x29, x30, [sp], #192
 864:	ret
 868:	adrp	x24, 0 <sort_modent_by_name>
 86c:	bl	0 <__errno_location>
 870:	add	x24, x24, #0x0
 874:	mov	x23, x0
 878:	ldr	w0, [x23]
 87c:	cbz	x22, 888 <ctf_arc_open_internal+0xd8>
 880:	str	w0, [x22]
 884:	ldr	w0, [x23]
 888:	cmp	w0, #0x3e7
 88c:	b.gt	8c0 <ctf_arc_open_internal+0x110>
 890:	bl	0 <strerror>
 894:	mov	x2, x0
 898:	mov	x1, x21
 89c:	mov	x0, x24
 8a0:	mov	x20, #0x0                   	// #0
 8a4:	bl	0 <ctf_dprintf>
 8a8:	mov	x0, x20
 8ac:	ldp	x19, x20, [sp, #16]
 8b0:	ldp	x21, x22, [sp, #32]
 8b4:	ldp	x23, x24, [sp, #48]
 8b8:	ldp	x29, x30, [sp], #192
 8bc:	ret
 8c0:	bl	0 <ctf_errmsg>
 8c4:	mov	x2, x0
 8c8:	b	898 <ctf_arc_open_internal+0xe8>
 8cc:	bl	0 <__errno_location>
 8d0:	mov	x23, x0
 8d4:	mov	w2, #0x3e8                 	// #1000
 8d8:	mov	x1, x24
 8dc:	mov	x0, x20
 8e0:	adrp	x24, 0 <sort_modent_by_name>
 8e4:	str	w2, [x23]
 8e8:	add	x24, x24, #0x0
 8ec:	bl	0 <munmap>
 8f0:	mov	w0, w19
 8f4:	bl	0 <close>
 8f8:	b	878 <ctf_arc_open_internal+0xc8>
 8fc:	adrp	x24, 0 <sort_modent_by_name>
 900:	bl	0 <__errno_location>
 904:	add	x24, x24, #0x0
 908:	mov	x23, x0
 90c:	b	8f0 <ctf_arc_open_internal+0x140>
 910:	adrp	x24, 0 <sort_modent_by_name>
 914:	bl	0 <__errno_location>
 918:	add	x24, x24, #0x0
 91c:	mov	x23, x0
 920:	b	8f0 <ctf_arc_open_internal+0x140>
 924:	nop

0000000000000928 <ctf_arc_close_internal>:
 928:	cbz	x0, 934 <ctf_arc_close_internal+0xc>
 92c:	ldr	x1, [x0]
 930:	b	0 <munmap>
 934:	ret

0000000000000938 <ctf_arc_close>:
 938:	cbz	x0, 9a0 <ctf_arc_close+0x68>
 93c:	stp	x29, x30, [sp, #-32]!
 940:	mov	x29, sp
 944:	str	x19, [sp, #16]
 948:	mov	x19, x0
 94c:	ldr	w0, [x0]
 950:	cbz	w0, 994 <ctf_arc_close+0x5c>
 954:	ldr	x0, [x19, #16]
 958:	cbz	x0, 964 <ctf_arc_close+0x2c>
 95c:	ldr	x1, [x0]
 960:	bl	0 <munmap>
 964:	ldr	x0, [x19, #32]
 968:	bl	0 <free>
 96c:	ldr	x0, [x19, #88]
 970:	bl	0 <free>
 974:	ldr	x1, [x19, #104]
 978:	cbz	x1, 984 <ctf_arc_close+0x4c>
 97c:	mov	x0, x19
 980:	blr	x1
 984:	mov	x0, x19
 988:	ldr	x19, [sp, #16]
 98c:	ldp	x29, x30, [sp], #32
 990:	b	0 <free>
 994:	ldr	x0, [x19, #8]
 998:	bl	0 <ctf_file_close>
 99c:	b	964 <ctf_arc_close+0x2c>
 9a0:	ret
 9a4:	nop

00000000000009a8 <ctf_arc_open_by_name_sections>:
 9a8:	stp	x29, x30, [sp, #-32]!
 9ac:	mov	x29, sp
 9b0:	ldr	w5, [x0]
 9b4:	stp	x19, x20, [sp, #16]
 9b8:	mov	x19, x0
 9bc:	cbnz	w5, 9fc <ctf_arc_open_by_name_sections+0x54>
 9c0:	mov	x0, x3
 9c4:	cbz	x3, 9dc <ctf_arc_open_by_name_sections+0x34>
 9c8:	adrp	x1, 0 <_CTF_SECTION>
 9cc:	mov	x20, x4
 9d0:	add	x1, x1, #0x0
 9d4:	bl	0 <strcmp>
 9d8:	cbnz	w0, a18 <ctf_arc_open_by_name_sections+0x70>
 9dc:	ldr	x0, [x19, #8]
 9e0:	ldr	w1, [x0, #548]
 9e4:	str	x19, [x0, #640]
 9e8:	add	w1, w1, #0x1
 9ec:	str	w1, [x0, #548]
 9f0:	ldp	x19, x20, [sp, #16]
 9f4:	ldp	x29, x30, [sp], #32
 9f8:	ret
 9fc:	ldr	x0, [x0, #16]
 a00:	bl	18 <ctf_arc_open_by_name_internal>
 a04:	cbz	x0, 9f0 <ctf_arc_open_by_name_sections+0x48>
 a08:	str	x19, [x0, #640]
 a0c:	ldp	x19, x20, [sp, #16]
 a10:	ldp	x29, x30, [sp], #32
 a14:	ret
 a18:	mov	x0, #0x0                   	// #0
 a1c:	cbz	x20, 9f0 <ctf_arc_open_by_name_sections+0x48>
 a20:	mov	w1, #0x415                 	// #1045
 a24:	str	w1, [x20]
 a28:	b	9f0 <ctf_arc_open_by_name_sections+0x48>
 a2c:	nop

0000000000000a30 <ctf_arc_open_by_name>:
 a30:	stp	x29, x30, [sp, #-32]!
 a34:	mov	x3, x1
 a38:	add	x5, x0, #0x18
 a3c:	mov	x29, sp
 a40:	stp	x19, x20, [sp, #16]
 a44:	mov	x19, x0
 a48:	add	x4, x0, #0x38
 a4c:	ldr	x1, [x0, #24]
 a50:	mov	x20, x2
 a54:	ldr	w0, [x0]
 a58:	ldr	x2, [x19, #56]
 a5c:	cmp	x1, #0x0
 a60:	csel	x1, x1, x5, eq  // eq = none
 a64:	cmp	x2, #0x0
 a68:	csel	x2, x2, x4, eq  // eq = none
 a6c:	cbnz	w0, aa8 <ctf_arc_open_by_name+0x78>
 a70:	cbz	x3, a88 <ctf_arc_open_by_name+0x58>
 a74:	adrp	x1, 0 <_CTF_SECTION>
 a78:	mov	x0, x3
 a7c:	add	x1, x1, #0x0
 a80:	bl	0 <strcmp>
 a84:	cbnz	w0, ac8 <ctf_arc_open_by_name+0x98>
 a88:	ldr	x0, [x19, #8]
 a8c:	ldr	w1, [x0, #548]
 a90:	str	x19, [x0, #640]
 a94:	add	w1, w1, #0x1
 a98:	str	w1, [x0, #548]
 a9c:	ldp	x19, x20, [sp, #16]
 aa0:	ldp	x29, x30, [sp], #32
 aa4:	ret
 aa8:	ldr	x0, [x19, #16]
 aac:	mov	x4, x20
 ab0:	bl	18 <ctf_arc_open_by_name_internal>
 ab4:	cbz	x0, a9c <ctf_arc_open_by_name+0x6c>
 ab8:	str	x19, [x0, #640]
 abc:	ldp	x19, x20, [sp, #16]
 ac0:	ldp	x29, x30, [sp], #32
 ac4:	ret
 ac8:	mov	x0, #0x0                   	// #0
 acc:	cbz	x20, a9c <ctf_arc_open_by_name+0x6c>
 ad0:	mov	w1, #0x415                 	// #1045
 ad4:	str	w1, [x20]
 ad8:	b	a9c <ctf_arc_open_by_name+0x6c>
 adc:	nop

0000000000000ae0 <ctf_archive_raw_iter>:
 ae0:	stp	x29, x30, [sp, #-64]!
 ae4:	mov	x29, sp
 ae8:	stp	x21, x22, [sp, #32]
 aec:	mov	x21, x1
 af0:	ldr	w1, [x0]
 af4:	cbz	w1, b88 <ctf_archive_raw_iter+0xa8>
 af8:	stp	x19, x20, [sp, #16]
 afc:	mov	x22, x2
 b00:	ldr	x19, [x0, #16]
 b04:	stp	x23, x24, [sp, #48]
 b08:	mov	x24, #0x0                   	// #0
 b0c:	add	x20, x19, #0x28
 b10:	ldp	x0, x23, [x19, #16]
 b14:	cbnz	x0, b28 <ctf_archive_raw_iter+0x48>
 b18:	b	b70 <ctf_archive_raw_iter+0x90>
 b1c:	ldr	x0, [x19, #16]
 b20:	cmp	x24, x0
 b24:	b.cs	b70 <ctf_archive_raw_iter+0x90>  // b.hs, b.nlast
 b28:	ldp	x0, x1, [x20]
 b2c:	mov	x3, x22
 b30:	ldr	x4, [x19, #32]
 b34:	add	x24, x24, #0x1
 b38:	add	x20, x20, #0x10
 b3c:	add	x4, x4, x1
 b40:	add	x0, x23, x0
 b44:	add	x1, x19, x4
 b48:	add	x0, x19, x0
 b4c:	add	x1, x1, #0x8
 b50:	ldr	x2, [x19, x4]
 b54:	blr	x21
 b58:	cbz	w0, b1c <ctf_archive_raw_iter+0x3c>
 b5c:	ldp	x19, x20, [sp, #16]
 b60:	ldp	x23, x24, [sp, #48]
 b64:	ldp	x21, x22, [sp, #32]
 b68:	ldp	x29, x30, [sp], #64
 b6c:	ret
 b70:	mov	w0, #0x0                   	// #0
 b74:	ldp	x19, x20, [sp, #16]
 b78:	ldp	x21, x22, [sp, #32]
 b7c:	ldp	x23, x24, [sp, #48]
 b80:	ldp	x29, x30, [sp], #64
 b84:	ret
 b88:	mov	w0, #0xffffffea            	// #-22
 b8c:	b	b64 <ctf_archive_raw_iter+0x84>

0000000000000b90 <ctf_archive_iter>:
 b90:	stp	x29, x30, [sp, #-112]!
 b94:	add	x4, x0, #0x18
 b98:	add	x3, x0, #0x38
 b9c:	mov	x29, sp
 ba0:	stp	x19, x20, [sp, #16]
 ba4:	mov	x19, x0
 ba8:	stp	x21, x22, [sp, #32]
 bac:	ldr	x21, [x0, #24]
 bb0:	stp	x23, x24, [sp, #48]
 bb4:	ldr	w0, [x0]
 bb8:	ldr	x22, [x19, #56]
 bbc:	cmp	x21, #0x0
 bc0:	csel	x21, x21, x4, eq  // eq = none
 bc4:	mov	x23, x1
 bc8:	cmp	x22, #0x0
 bcc:	csel	x22, x22, x3, eq  // eq = none
 bd0:	cbnz	w0, bf8 <ctf_archive_iter+0x68>
 bd4:	ldr	x0, [x19, #8]
 bd8:	adrp	x1, 0 <_CTF_SECTION>
 bdc:	add	x1, x1, #0x0
 be0:	blr	x23
 be4:	ldp	x19, x20, [sp, #16]
 be8:	ldp	x21, x22, [sp, #32]
 bec:	ldp	x23, x24, [sp, #48]
 bf0:	ldp	x29, x30, [sp], #112
 bf4:	ret
 bf8:	stp	x25, x26, [sp, #64]
 bfc:	ldr	x26, [x19, #16]
 c00:	stp	x27, x28, [sp, #80]
 c04:	ldp	x0, x27, [x26, #16]
 c08:	cbz	x0, ca0 <ctf_archive_iter+0x110>
 c0c:	mov	x25, x2
 c10:	add	x28, x26, #0x28
 c14:	mov	x24, #0x0                   	// #0
 c18:	b	c44 <ctf_archive_iter+0xb4>
 c1c:	str	x19, [x0, #640]
 c20:	blr	x23
 c24:	mov	w1, w0
 c28:	str	w1, [sp, #108]
 c2c:	mov	x0, x20
 c30:	cbnz	w1, cb0 <ctf_archive_iter+0x120>
 c34:	bl	0 <ctf_file_close>
 c38:	ldr	x0, [x26, #16]
 c3c:	cmp	x24, x0
 c40:	b.cs	ca0 <ctf_archive_iter+0x110>  // b.hs, b.nlast
 c44:	lsl	x3, x24, #4
 c48:	mov	x2, x22
 c4c:	mov	x1, x21
 c50:	add	x4, sp, #0x6c
 c54:	mov	x0, x26
 c58:	add	x24, x24, #0x1
 c5c:	ldr	x20, [x28, x3]
 c60:	add	x20, x27, x20
 c64:	add	x20, x26, x20
 c68:	mov	x3, x20
 c6c:	bl	18 <ctf_arc_open_by_name_internal>
 c70:	mov	x1, x20
 c74:	mov	x2, x25
 c78:	mov	x20, x0
 c7c:	cbnz	x0, c1c <ctf_archive_iter+0x8c>
 c80:	ldr	w0, [sp, #108]
 c84:	ldp	x19, x20, [sp, #16]
 c88:	ldp	x21, x22, [sp, #32]
 c8c:	ldp	x23, x24, [sp, #48]
 c90:	ldp	x25, x26, [sp, #64]
 c94:	ldp	x27, x28, [sp, #80]
 c98:	ldp	x29, x30, [sp], #112
 c9c:	ret
 ca0:	mov	w0, #0x0                   	// #0
 ca4:	ldp	x25, x26, [sp, #64]
 ca8:	ldp	x27, x28, [sp, #80]
 cac:	b	be4 <ctf_archive_iter+0x54>
 cb0:	bl	0 <ctf_file_close>
 cb4:	b	c80 <ctf_archive_iter+0xf0>

ctf-dump.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_dump_member>:
       0:	stp	x29, x30, [sp, #-112]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	stp	x21, x22, [sp, #32]
      10:	sxtw	x22, w3
      14:	cmp	x22, #0x0
      18:	stp	x23, x24, [sp, #48]
      1c:	mov	x21, x4
      20:	mov	x24, x1
      24:	stp	x25, x26, [sp, #64]
      28:	mov	x26, x0
      2c:	mov	x25, x2
      30:	str	xzr, [sp, #88]
      34:	b.le	68 <ctf_dump_member+0x68>
      38:	adrp	x23, 0 <ctf_dump_member>
      3c:	add	x23, x23, #0x0
      40:	mov	x19, #0x0                   	// #0
      44:	nop
      48:	ldr	x20, [x21]
      4c:	mov	x1, x23
      50:	add	x19, x19, #0x1
      54:	ldr	x0, [x20]
      58:	bl	0 <ctf_str_append_noerr>
      5c:	str	x0, [x20]
      60:	cmp	x19, x22
      64:	b.ne	48 <ctf_dump_member+0x48>  // b.any
      68:	ldr	x0, [x21, #8]
      6c:	mov	x1, x24
      70:	bl	0 <ctf_type_aname>
      74:	mov	x19, x0
      78:	cbz	x0, 198 <ctf_dump_member+0x198>
      7c:	ldr	x0, [x21, #8]
      80:	mov	x1, x24
      84:	bl	0 <ctf_type_kind>
      88:	mov	w20, w0
      8c:	ldr	x0, [x21, #8]
      90:	mov	x1, x24
      94:	bl	0 <ctf_type_align>
      98:	mov	x7, x0
      9c:	adrp	x1, 0 <ctf_dump_member>
      a0:	mov	w4, w20
      a4:	mov	x6, x26
      a8:	mov	x2, x25
      ac:	add	x0, sp, #0x58
      b0:	mov	x5, x19
      b4:	add	x1, x1, #0x0
      b8:	mov	x3, x24
      bc:	bl	0 <asprintf>
      c0:	tbnz	w0, #31, 1c8 <ctf_dump_member+0x1c8>
      c4:	ldr	x20, [x21]
      c8:	ldr	x1, [sp, #88]
      cc:	ldr	x0, [x20]
      d0:	bl	0 <ctf_str_append_noerr>
      d4:	str	x0, [x20]
      d8:	mov	x0, x19
      dc:	bl	0 <free>
      e0:	ldr	x0, [sp, #88]
      e4:	bl	0 <free>
      e8:	str	xzr, [sp, #88]
      ec:	ldr	x0, [x21, #8]
      f0:	mov	x1, x24
      f4:	bl	0 <ctf_type_kind>
      f8:	cmp	w0, #0x1
      fc:	b.eq	114 <ctf_dump_member+0x114>  // b.none
     100:	ldr	x0, [x21, #8]
     104:	mov	x1, x24
     108:	bl	0 <ctf_type_kind>
     10c:	cmp	w0, #0x2
     110:	b.ne	238 <ctf_dump_member+0x238>  // b.any
     114:	ldr	x0, [x21, #8]
     118:	mov	x1, x24
     11c:	add	x2, sp, #0x60
     120:	bl	0 <ctf_type_encoding>
     124:	ldp	w2, w3, [sp, #96]
     128:	adrp	x1, 0 <ctf_dump_member>
     12c:	ldr	w4, [sp, #104]
     130:	add	x0, sp, #0x58
     134:	add	x1, x1, #0x0
     138:	bl	0 <asprintf>
     13c:	tbnz	w0, #31, 1c4 <ctf_dump_member+0x1c4>
     140:	ldr	x19, [x21]
     144:	ldr	x1, [sp, #88]
     148:	ldr	x0, [x19]
     14c:	bl	0 <ctf_str_append_noerr>
     150:	str	x0, [x19]
     154:	ldr	x0, [sp, #88]
     158:	bl	0 <free>
     15c:	str	xzr, [sp, #88]
     160:	ldr	x19, [x21]
     164:	adrp	x1, 0 <ctf_dump_member>
     168:	add	x1, x1, #0x0
     16c:	ldr	x0, [x19]
     170:	bl	0 <ctf_str_append_noerr>
     174:	mov	x1, x0
     178:	str	x1, [x19]
     17c:	mov	w0, #0x0                   	// #0
     180:	ldp	x19, x20, [sp, #16]
     184:	ldp	x21, x22, [sp, #32]
     188:	ldp	x23, x24, [sp, #48]
     18c:	ldp	x25, x26, [sp, #64]
     190:	ldp	x29, x30, [sp], #112
     194:	ret
     198:	cbz	x24, 1ac <ctf_dump_member+0x1ac>
     19c:	ldr	x0, [x21, #8]
     1a0:	bl	0 <ctf_errno>
     1a4:	cmp	w0, #0x41b
     1a8:	b.ne	1c4 <ctf_dump_member+0x1c4>  // b.any
     1ac:	adrp	x1, 0 <ctf_dump_member>
     1b0:	mov	x2, x25
     1b4:	add	x0, sp, #0x58
     1b8:	add	x1, x1, #0x0
     1bc:	bl	0 <asprintf>
     1c0:	tbz	w0, #31, 200 <ctf_dump_member+0x200>
     1c4:	mov	x19, #0x0                   	// #0
     1c8:	mov	x0, x19
     1cc:	bl	0 <free>
     1d0:	ldr	x0, [sp, #88]
     1d4:	bl	0 <free>
     1d8:	bl	0 <__errno_location>
     1dc:	ldr	w1, [x0]
     1e0:	ldr	x0, [x21, #8]
     1e4:	bl	0 <ctf_set_errno>
     1e8:	ldp	x19, x20, [sp, #16]
     1ec:	ldp	x21, x22, [sp, #32]
     1f0:	ldp	x23, x24, [sp, #48]
     1f4:	ldp	x25, x26, [sp, #64]
     1f8:	ldp	x29, x30, [sp], #112
     1fc:	ret
     200:	ldr	x19, [x21]
     204:	ldr	x1, [sp, #88]
     208:	ldr	x0, [x19]
     20c:	bl	0 <ctf_str_append_noerr>
     210:	str	x0, [x19]
     214:	ldr	x0, [sp, #88]
     218:	bl	0 <free>
     21c:	mov	w0, #0x0                   	// #0
     220:	ldp	x19, x20, [sp, #16]
     224:	ldp	x21, x22, [sp, #32]
     228:	ldp	x23, x24, [sp, #48]
     22c:	ldp	x25, x26, [sp, #64]
     230:	ldp	x29, x30, [sp], #112
     234:	ret
     238:	ldr	x19, [x21, #8]
     23c:	mov	x1, x24
     240:	mov	x0, x19
     244:	bl	0 <ctf_type_kind>
     248:	sub	w1, w0, #0x1
     24c:	cmp	w1, #0x1
     250:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
     254:	b.ne	160 <ctf_dump_member+0x160>  // b.any
     258:	mov	x1, x24
     25c:	mov	x0, x19
     260:	bl	0 <ctf_type_reference>
     264:	cmn	x0, #0x1
     268:	b.eq	160 <ctf_dump_member+0x160>  // b.none
     26c:	mov	x1, x24
     270:	mov	x0, x19
     274:	add	x2, sp, #0x60
     278:	bl	0 <ctf_type_encoding>
     27c:	b	160 <ctf_dump_member+0x160>

0000000000000280 <ctf_dump_format_type.constprop.0>:
     280:	stp	x29, x30, [sp, #-112]!
     284:	mov	x29, sp
     288:	stp	x19, x20, [sp, #16]
     28c:	mov	x19, x1
     290:	mov	x1, x19
     294:	stp	x21, x22, [sp, #32]
     298:	mov	x21, x0
     29c:	mov	x0, x21
     2a0:	stp	x23, x24, [sp, #48]
     2a4:	adrp	x22, 0 <ctf_dump_member>
     2a8:	adrp	x23, 0 <ctf_dump_member>
     2ac:	str	x25, [sp, #64]
     2b0:	add	x23, x23, #0x0
     2b4:	str	xzr, [sp, #88]
     2b8:	bl	0 <ctf_type_aname>
     2bc:	add	x22, x22, #0x0
     2c0:	mov	x20, x0
     2c4:	mov	x1, x19
     2c8:	mov	x0, x21
     2cc:	mov	x24, #0x0                   	// #0
     2d0:	cbz	x20, 474 <ctf_dump_format_type.constprop.0+0x1f4>
     2d4:	nop
     2d8:	bl	0 <ctf_type_kind>
     2dc:	sub	w3, w0, #0x1
     2e0:	mov	w2, w0
     2e4:	cmp	w3, #0x1
     2e8:	mov	x1, x19
     2ec:	mov	x0, x21
     2f0:	ccmp	w2, #0x8, #0x4, hi  // hi = pmore
     2f4:	b.ne	3b8 <ctf_dump_format_type.constprop.0+0x138>  // b.any
     2f8:	bl	0 <ctf_type_reference>
     2fc:	cmn	x0, #0x1
     300:	b.eq	3b8 <ctf_dump_format_type.constprop.0+0x138>  // b.none
     304:	add	x2, sp, #0x60
     308:	mov	x1, x19
     30c:	mov	x0, x21
     310:	bl	0 <ctf_type_encoding>
     314:	add	x2, sp, #0x60
     318:	mov	w3, w0
     31c:	mov	x1, x19
     320:	mov	x0, x21
     324:	cbnz	w3, 3b8 <ctf_dump_format_type.constprop.0+0x138>
     328:	bl	0 <ctf_type_encoding>
     32c:	ldp	w4, w5, [sp, #100]
     330:	adrp	x1, 0 <ctf_dump_member>
     334:	mov	x6, x22
     338:	add	x1, x1, #0x0
     33c:	mov	x3, x19
     340:	mov	x2, x22
     344:	add	x0, sp, #0x58
     348:	bl	0 <asprintf>
     34c:	tbnz	w0, #31, 3f8 <ctf_dump_format_type.constprop.0+0x178>
     350:	mov	x0, x20
     354:	bl	0 <free>
     358:	ldr	x1, [sp, #88]
     35c:	mov	x0, x24
     360:	bl	0 <ctf_str_append_noerr>
     364:	mov	x20, x0
     368:	ldr	x0, [sp, #88]
     36c:	bl	0 <free>
     370:	str	xzr, [sp, #88]
     374:	mov	x1, x19
     378:	mov	x0, x21
     37c:	bl	0 <ctf_type_reference>
     380:	mov	x19, x0
     384:	cmn	x0, #0x1
     388:	b.ne	444 <ctf_dump_format_type.constprop.0+0x1c4>  // b.any
     38c:	mov	x0, x21
     390:	bl	0 <ctf_errno>
     394:	cmp	w0, #0x400
     398:	b.ne	4a8 <ctf_dump_format_type.constprop.0+0x228>  // b.any
     39c:	mov	x0, x20
     3a0:	ldp	x19, x20, [sp, #16]
     3a4:	ldp	x21, x22, [sp, #32]
     3a8:	ldp	x23, x24, [sp, #48]
     3ac:	ldr	x25, [sp, #64]
     3b0:	ldp	x29, x30, [sp], #112
     3b4:	ret
     3b8:	ldrb	w2, [x20]
     3bc:	mov	x1, x19
     3c0:	mov	x0, x21
     3c4:	cmp	w2, #0x0
     3c8:	csel	x25, x23, x20, eq  // eq = none
     3cc:	bl	0 <ctf_type_size>
     3d0:	mov	x5, x0
     3d4:	adrp	x1, 0 <ctf_dump_member>
     3d8:	mov	x4, x25
     3dc:	mov	x6, x22
     3e0:	add	x1, x1, #0x0
     3e4:	mov	x3, x19
     3e8:	mov	x2, x22
     3ec:	add	x0, sp, #0x58
     3f0:	bl	0 <asprintf>
     3f4:	tbz	w0, #31, 350 <ctf_dump_format_type.constprop.0+0xd0>
     3f8:	bl	0 <__errno_location>
     3fc:	mov	x1, x0
     400:	mov	x0, x21
     404:	ldr	w1, [x1]
     408:	bl	0 <ctf_set_errno>
     40c:	mov	x0, x20
     410:	bl	0 <free>
     414:	mov	x0, x24
     418:	bl	0 <free>
     41c:	ldr	x0, [sp, #88]
     420:	mov	x20, #0x0                   	// #0
     424:	bl	0 <free>
     428:	mov	x0, x20
     42c:	ldp	x19, x20, [sp, #16]
     430:	ldp	x21, x22, [sp, #32]
     434:	ldp	x23, x24, [sp, #48]
     438:	ldr	x25, [sp, #64]
     43c:	ldp	x29, x30, [sp], #112
     440:	ret
     444:	mov	x0, x20
     448:	adrp	x1, 0 <ctf_dump_member>
     44c:	add	x1, x1, #0x0
     450:	bl	0 <ctf_str_append_noerr>
     454:	mov	x1, x19
     458:	mov	x24, x0
     45c:	mov	x0, x21
     460:	bl	0 <ctf_type_aname>
     464:	mov	x1, x19
     468:	mov	x20, x0
     46c:	mov	x0, x21
     470:	cbnz	x20, 2d8 <ctf_dump_format_type.constprop.0+0x58>
     474:	cbnz	x19, 4d0 <ctf_dump_format_type.constprop.0+0x250>
     478:	mov	x0, x24
     47c:	adrp	x1, 0 <ctf_dump_member>
     480:	add	x1, x1, #0x0
     484:	bl	0 <ctf_str_append_noerr>
     488:	mov	w1, #0x400                 	// #1024
     48c:	mov	x20, x0
     490:	mov	x0, x21
     494:	bl	0 <ctf_set_errno>
     498:	mov	x0, x21
     49c:	bl	0 <ctf_errno>
     4a0:	cmp	w0, #0x400
     4a4:	b.eq	39c <ctf_dump_format_type.constprop.0+0x11c>  // b.none
     4a8:	mov	x0, x20
     4ac:	mov	x20, #0x0                   	// #0
     4b0:	bl	0 <free>
     4b4:	mov	x0, x20
     4b8:	ldp	x19, x20, [sp, #16]
     4bc:	ldp	x21, x22, [sp, #32]
     4c0:	ldp	x23, x24, [sp, #48]
     4c4:	ldr	x25, [sp, #64]
     4c8:	ldp	x29, x30, [sp], #112
     4cc:	ret
     4d0:	bl	0 <ctf_errno>
     4d4:	cmp	w0, #0x41b
     4d8:	b.ne	40c <ctf_dump_format_type.constprop.0+0x18c>  // b.any
     4dc:	mov	x0, x24
     4e0:	adrp	x1, 0 <ctf_dump_member>
     4e4:	add	x1, x1, #0x0
     4e8:	bl	0 <ctf_str_append_noerr>
     4ec:	mov	w1, #0x400                 	// #1024
     4f0:	mov	x20, x0
     4f4:	mov	x0, x21
     4f8:	bl	0 <ctf_set_errno>
     4fc:	b	498 <ctf_dump_format_type.constprop.0+0x218>

0000000000000500 <ctf_dump_var>:
     500:	stp	x29, x30, [sp, #-48]!
     504:	mov	x29, sp
     508:	stp	x19, x20, [sp, #16]
     50c:	mov	x20, x1
     510:	mov	x19, x2
     514:	adrp	x1, 0 <ctf_dump_member>
     518:	mov	x2, x0
     51c:	add	x1, x1, #0x0
     520:	add	x0, sp, #0x28
     524:	bl	0 <asprintf>
     528:	tbnz	w0, #31, 58c <ctf_dump_var+0x8c>
     52c:	ldr	x0, [x19, #8]
     530:	mov	x1, x20
     534:	bl	280 <ctf_dump_format_type.constprop.0>
     538:	mov	x20, x0
     53c:	ldr	x0, [sp, #40]
     540:	cbz	x20, 5a8 <ctf_dump_var+0xa8>
     544:	mov	x1, x20
     548:	bl	0 <ctf_str_append_noerr>
     54c:	mov	x1, x0
     550:	mov	x0, x20
     554:	str	x1, [sp, #40]
     558:	bl	0 <free>
     55c:	mov	x0, #0x18                  	// #24
     560:	ldr	x20, [sp, #40]
     564:	bl	0 <malloc>
     568:	mov	x1, x0
     56c:	cbz	x0, 5b4 <ctf_dump_var+0xb4>
     570:	str	x20, [x1, #16]
     574:	add	x0, x19, #0x18
     578:	bl	0 <ctf_list_append>
     57c:	mov	w0, #0x0                   	// #0
     580:	ldp	x19, x20, [sp, #16]
     584:	ldp	x29, x30, [sp], #48
     588:	ret
     58c:	bl	0 <__errno_location>
     590:	ldr	w1, [x0]
     594:	ldr	x0, [x19, #8]
     598:	bl	0 <ctf_set_errno>
     59c:	ldp	x19, x20, [sp, #16]
     5a0:	ldp	x29, x30, [sp], #48
     5a4:	ret
     5a8:	bl	0 <free>
     5ac:	mov	w0, #0xffffffff            	// #-1
     5b0:	b	580 <ctf_dump_var+0x80>
     5b4:	ldr	x0, [x19, #8]
     5b8:	mov	w1, #0xc                   	// #12
     5bc:	bl	0 <ctf_set_errno>
     5c0:	mov	w0, #0x0                   	// #0
     5c4:	b	580 <ctf_dump_var+0x80>

00000000000005c8 <ctf_dump_label>:
     5c8:	stp	x29, x30, [sp, #-48]!
     5cc:	mov	x29, sp
     5d0:	stp	x19, x20, [sp, #16]
     5d4:	mov	x20, x1
     5d8:	mov	x19, x2
     5dc:	adrp	x1, 0 <ctf_dump_member>
     5e0:	mov	x2, x0
     5e4:	add	x1, x1, #0x0
     5e8:	add	x0, sp, #0x28
     5ec:	bl	0 <asprintf>
     5f0:	tbnz	w0, #31, 654 <ctf_dump_label+0x8c>
     5f4:	ldr	x1, [x20]
     5f8:	ldr	x0, [x19, #8]
     5fc:	bl	280 <ctf_dump_format_type.constprop.0>
     600:	mov	x20, x0
     604:	ldr	x0, [sp, #40]
     608:	cbz	x20, 670 <ctf_dump_label+0xa8>
     60c:	mov	x1, x20
     610:	bl	0 <ctf_str_append_noerr>
     614:	mov	x1, x0
     618:	mov	x0, x20
     61c:	str	x1, [sp, #40]
     620:	bl	0 <free>
     624:	mov	x0, #0x18                  	// #24
     628:	ldr	x20, [sp, #40]
     62c:	bl	0 <malloc>
     630:	mov	x1, x0
     634:	cbz	x0, 67c <ctf_dump_label+0xb4>
     638:	str	x20, [x1, #16]
     63c:	add	x0, x19, #0x18
     640:	bl	0 <ctf_list_append>
     644:	mov	w0, #0x0                   	// #0
     648:	ldp	x19, x20, [sp, #16]
     64c:	ldp	x29, x30, [sp], #48
     650:	ret
     654:	bl	0 <__errno_location>
     658:	ldr	w1, [x0]
     65c:	ldr	x0, [x19, #8]
     660:	bl	0 <ctf_set_errno>
     664:	ldp	x19, x20, [sp, #16]
     668:	ldp	x29, x30, [sp], #48
     66c:	ret
     670:	bl	0 <free>
     674:	mov	w0, #0xffffffff            	// #-1
     678:	b	648 <ctf_dump_label+0x80>
     67c:	ldr	x0, [x19, #8]
     680:	mov	w1, #0xc                   	// #12
     684:	bl	0 <ctf_set_errno>
     688:	mov	w0, #0x0                   	// #0
     68c:	b	648 <ctf_dump_label+0x80>

0000000000000690 <ctf_dump_header_sectfield>:
     690:	cmp	w4, w3
     694:	b.ne	6a0 <ctf_dump_header_sectfield+0x10>  // b.any
     698:	mov	w0, #0x0                   	// #0
     69c:	ret
     6a0:	stp	x29, x30, [sp, #-48]!
     6a4:	sub	w5, w4, w3
     6a8:	sub	w4, w4, #0x1
     6ac:	mov	x29, sp
     6b0:	mov	w3, w3
     6b4:	stp	x19, x20, [sp, #16]
     6b8:	mov	x20, x0
     6bc:	mov	x19, x1
     6c0:	add	x0, sp, #0x28
     6c4:	adrp	x1, 0 <ctf_dump_member>
     6c8:	add	x1, x1, #0x0
     6cc:	bl	0 <asprintf>
     6d0:	tbnz	w0, #31, 704 <ctf_dump_header_sectfield+0x74>
     6d4:	mov	x0, #0x18                  	// #24
     6d8:	ldr	x20, [sp, #40]
     6dc:	bl	0 <malloc>
     6e0:	mov	x1, x0
     6e4:	cbz	x0, 724 <ctf_dump_header_sectfield+0x94>
     6e8:	str	x20, [x1, #16]
     6ec:	add	x0, x19, #0x18
     6f0:	bl	0 <ctf_list_append>
     6f4:	mov	w0, #0x0                   	// #0
     6f8:	ldp	x19, x20, [sp, #16]
     6fc:	ldp	x29, x30, [sp], #48
     700:	ret
     704:	bl	0 <__errno_location>
     708:	mov	x1, x0
     70c:	mov	x0, x20
     710:	ldr	w1, [x1]
     714:	bl	0 <ctf_set_errno>
     718:	ldp	x19, x20, [sp, #16]
     71c:	ldp	x29, x30, [sp], #48
     720:	ret
     724:	ldr	x0, [x19, #8]
     728:	mov	w1, #0xc                   	// #12
     72c:	bl	0 <ctf_set_errno>
     730:	mov	w0, #0x0                   	// #0
     734:	b	6f8 <ctf_dump_header_sectfield+0x68>

0000000000000738 <ctf_dump_header_strfield>:
     738:	cbnz	w3, 744 <ctf_dump_header_strfield+0xc>
     73c:	mov	w0, #0x0                   	// #0
     740:	ret
     744:	stp	x29, x30, [sp, #-64]!
     748:	mov	x29, sp
     74c:	stp	x19, x20, [sp, #16]
     750:	mov	x19, x2
     754:	mov	x20, x1
     758:	mov	w1, w3
     75c:	str	x21, [sp, #32]
     760:	mov	x21, x0
     764:	bl	0 <ctf_strptr>
     768:	adrp	x1, 0 <ctf_dump_member>
     76c:	mov	x3, x0
     770:	mov	x2, x19
     774:	add	x0, sp, #0x38
     778:	add	x1, x1, #0x0
     77c:	bl	0 <asprintf>
     780:	tbnz	w0, #31, 7b8 <ctf_dump_header_strfield+0x80>
     784:	mov	x0, #0x18                  	// #24
     788:	ldr	x19, [sp, #56]
     78c:	bl	0 <malloc>
     790:	mov	x1, x0
     794:	cbz	x0, 7d0 <ctf_dump_header_strfield+0x98>
     798:	str	x19, [x1, #16]
     79c:	add	x0, x20, #0x18
     7a0:	bl	0 <ctf_list_append>
     7a4:	mov	w0, #0x0                   	// #0
     7a8:	ldp	x19, x20, [sp, #16]
     7ac:	ldr	x21, [sp, #32]
     7b0:	ldp	x29, x30, [sp], #64
     7b4:	ret
     7b8:	bl	0 <__errno_location>
     7bc:	mov	x1, x0
     7c0:	mov	x0, x21
     7c4:	ldr	w1, [x1]
     7c8:	bl	0 <ctf_set_errno>
     7cc:	b	7a8 <ctf_dump_header_strfield+0x70>
     7d0:	ldr	x0, [x20, #8]
     7d4:	mov	w1, #0xc                   	// #12
     7d8:	bl	0 <ctf_set_errno>
     7dc:	mov	w0, #0x0                   	// #0
     7e0:	b	7a8 <ctf_dump_header_strfield+0x70>
     7e4:	nop

00000000000007e8 <ctf_dump_type>:
     7e8:	stp	x29, x30, [sp, #-160]!
     7ec:	cmp	w1, #0x0
     7f0:	mov	x29, sp
     7f4:	stp	x23, x24, [sp, #48]
     7f8:	mov	x24, x2
     7fc:	adrp	x23, 0 <ctf_dump_member>
     800:	stp	x19, x20, [sp, #16]
     804:	add	x23, x23, #0x0
     808:	mov	x19, x0
     80c:	stp	x21, x22, [sp, #32]
     810:	adrp	x22, 0 <ctf_dump_member>
     814:	add	x2, x22, #0x0
     818:	ldr	x20, [x24, #8]
     81c:	adrp	x22, 0 <ctf_dump_member>
     820:	add	x22, x22, #0x0
     824:	stp	x25, x26, [sp, #64]
     828:	mov	x25, x0
     82c:	add	x0, sp, #0x70
     830:	mov	x1, x19
     834:	csel	x23, x23, x2, eq  // eq = none
     838:	csel	x22, x22, x2, eq  // eq = none
     83c:	stp	x27, x28, [sp, #80]
     840:	adrp	x26, 0 <ctf_dump_member>
     844:	adrp	x27, 0 <ctf_dump_member>
     848:	str	xzr, [sp, #120]
     84c:	add	x27, x27, #0x0
     850:	stp	x0, x20, [sp, #144]
     854:	mov	x0, x20
     858:	bl	0 <ctf_type_aname>
     85c:	add	x26, x26, #0x0
     860:	mov	x21, x0
     864:	mov	x1, x19
     868:	mov	x0, x20
     86c:	mov	x28, #0x0                   	// #0
     870:	cbz	x21, a00 <ctf_dump_type+0x218>
     874:	nop
     878:	bl	0 <ctf_type_kind>
     87c:	sub	w3, w0, #0x1
     880:	mov	w2, w0
     884:	cmp	w3, #0x1
     888:	mov	x1, x19
     88c:	mov	x0, x20
     890:	ccmp	w2, #0x8, #0x4, hi  // hi = pmore
     894:	b.ne	a4c <ctf_dump_type+0x264>  // b.any
     898:	bl	0 <ctf_type_reference>
     89c:	cmn	x0, #0x1
     8a0:	b.eq	a4c <ctf_dump_type+0x264>  // b.none
     8a4:	add	x2, sp, #0x80
     8a8:	mov	x1, x19
     8ac:	mov	x0, x20
     8b0:	bl	0 <ctf_type_encoding>
     8b4:	add	x2, sp, #0x80
     8b8:	mov	w3, w0
     8bc:	mov	x1, x19
     8c0:	mov	x0, x20
     8c4:	cbnz	w3, a4c <ctf_dump_type+0x264>
     8c8:	bl	0 <ctf_type_encoding>
     8cc:	ldp	w4, w5, [sp, #132]
     8d0:	adrp	x1, 0 <ctf_dump_member>
     8d4:	mov	x6, x22
     8d8:	add	x1, x1, #0x0
     8dc:	mov	x3, x19
     8e0:	mov	x2, x23
     8e4:	add	x0, sp, #0x78
     8e8:	bl	0 <asprintf>
     8ec:	tbnz	w0, #31, a8c <ctf_dump_type+0x2a4>
     8f0:	mov	x0, x21
     8f4:	bl	0 <free>
     8f8:	ldr	x1, [sp, #120]
     8fc:	mov	x0, x28
     900:	bl	0 <ctf_str_append_noerr>
     904:	mov	x21, x0
     908:	ldr	x0, [sp, #120]
     90c:	bl	0 <free>
     910:	str	xzr, [sp, #120]
     914:	mov	x1, x19
     918:	mov	x0, x20
     91c:	bl	0 <ctf_type_reference>
     920:	mov	x19, x0
     924:	cmn	x0, #0x1
     928:	b.ne	9d0 <ctf_dump_type+0x1e8>  // b.any
     92c:	mov	x0, x20
     930:	bl	0 <ctf_errno>
     934:	cmp	w0, #0x400
     938:	b.ne	a34 <ctf_dump_type+0x24c>  // b.any
     93c:	str	x21, [sp, #112]
     940:	cbz	x21, b78 <ctf_dump_type+0x390>
     944:	mov	x0, x21
     948:	adrp	x1, 0 <ctf_dump_member>
     94c:	add	x1, x1, #0x0
     950:	bl	0 <ctf_str_append_noerr>
     954:	mov	x4, x0
     958:	adrp	x2, 0 <ctf_dump_member>
     95c:	ldr	x0, [x24, #8]
     960:	add	x2, x2, #0x0
     964:	add	x3, sp, #0x90
     968:	mov	x1, x25
     96c:	str	x4, [sp, #112]
     970:	bl	0 <ctf_type_visit>
     974:	tbnz	w0, #31, af8 <ctf_dump_type+0x310>
     978:	ldr	x19, [sp, #112]
     97c:	mov	x0, x19
     980:	bl	0 <strlen>
     984:	sub	x0, x0, #0x1
     988:	ldrb	w1, [x19, x0]
     98c:	cmp	w1, #0xa
     990:	b.eq	b3c <ctf_dump_type+0x354>  // b.none
     994:	mov	x0, #0x18                  	// #24
     998:	bl	0 <malloc>
     99c:	mov	x1, x0
     9a0:	cbz	x0, b28 <ctf_dump_type+0x340>
     9a4:	str	x19, [x1, #16]
     9a8:	add	x0, x24, #0x18
     9ac:	bl	0 <ctf_list_append>
     9b0:	mov	w0, #0x0                   	// #0
     9b4:	ldp	x19, x20, [sp, #16]
     9b8:	ldp	x21, x22, [sp, #32]
     9bc:	ldp	x23, x24, [sp, #48]
     9c0:	ldp	x25, x26, [sp, #64]
     9c4:	ldp	x27, x28, [sp, #80]
     9c8:	ldp	x29, x30, [sp], #160
     9cc:	ret
     9d0:	mov	x0, x21
     9d4:	adrp	x1, 0 <ctf_dump_member>
     9d8:	add	x1, x1, #0x0
     9dc:	bl	0 <ctf_str_append_noerr>
     9e0:	mov	x1, x19
     9e4:	mov	x28, x0
     9e8:	mov	x0, x20
     9ec:	bl	0 <ctf_type_aname>
     9f0:	mov	x1, x19
     9f4:	mov	x21, x0
     9f8:	mov	x0, x20
     9fc:	cbnz	x21, 878 <ctf_dump_type+0x90>
     a00:	cbnz	x19, b48 <ctf_dump_type+0x360>
     a04:	mov	x0, x28
     a08:	adrp	x1, 0 <ctf_dump_member>
     a0c:	add	x1, x1, #0x0
     a10:	bl	0 <ctf_str_append_noerr>
     a14:	mov	w1, #0x400                 	// #1024
     a18:	mov	x21, x0
     a1c:	mov	x0, x20
     a20:	bl	0 <ctf_set_errno>
     a24:	mov	x0, x20
     a28:	bl	0 <ctf_errno>
     a2c:	cmp	w0, #0x400
     a30:	b.eq	93c <ctf_dump_type+0x154>  // b.none
     a34:	mov	x0, x21
     a38:	bl	0 <free>
     a3c:	adrp	x1, 0 <ctf_dump_member>
     a40:	add	x19, x1, #0x0
     a44:	str	xzr, [sp, #112]
     a48:	b	ac4 <ctf_dump_type+0x2dc>
     a4c:	ldrb	w2, [x21]
     a50:	mov	x1, x19
     a54:	mov	x0, x20
     a58:	cmp	w2, #0x0
     a5c:	csel	x4, x27, x21, eq  // eq = none
     a60:	str	x4, [sp, #104]
     a64:	bl	0 <ctf_type_size>
     a68:	mov	x5, x0
     a6c:	ldr	x4, [sp, #104]
     a70:	mov	x6, x22
     a74:	mov	x3, x19
     a78:	mov	x2, x23
     a7c:	mov	x1, x26
     a80:	add	x0, sp, #0x78
     a84:	bl	0 <asprintf>
     a88:	tbz	w0, #31, 8f0 <ctf_dump_type+0x108>
     a8c:	bl	0 <__errno_location>
     a90:	mov	x1, x0
     a94:	mov	x0, x20
     a98:	ldr	w1, [x1]
     a9c:	bl	0 <ctf_set_errno>
     aa0:	mov	x0, x21
     aa4:	bl	0 <free>
     aa8:	mov	x0, x28
     aac:	bl	0 <free>
     ab0:	ldr	x0, [sp, #120]
     ab4:	bl	0 <free>
     ab8:	str	xzr, [sp, #112]
     abc:	adrp	x1, 0 <ctf_dump_member>
     ac0:	add	x19, x1, #0x0
     ac4:	ldr	x0, [x24, #8]
     ac8:	bl	0 <ctf_errno>
     acc:	bl	0 <ctf_errmsg>
     ad0:	mov	x3, x0
     ad4:	mov	x2, x25
     ad8:	mov	x1, x19
     adc:	adrp	x0, 0 <ctf_dump_member>
     ae0:	add	x0, x0, #0x0
     ae4:	bl	0 <ctf_dprintf>
     ae8:	ldr	x0, [sp, #112]
     aec:	bl	0 <free>
     af0:	mov	w0, #0xffffffff            	// #-1
     af4:	b	9b4 <ctf_dump_type+0x1cc>
     af8:	cbz	x25, b14 <ctf_dump_type+0x32c>
     afc:	ldr	x0, [x24, #8]
     b00:	bl	0 <ctf_errno>
     b04:	cmp	w0, #0x41b
     b08:	adrp	x1, 0 <ctf_dump_member>
     b0c:	add	x19, x1, #0x0
     b10:	b.ne	ac4 <ctf_dump_type+0x2dc>  // b.any
     b14:	mov	x0, #0x18                  	// #24
     b18:	ldr	x19, [sp, #112]
     b1c:	bl	0 <malloc>
     b20:	mov	x1, x0
     b24:	cbnz	x0, 9a4 <ctf_dump_type+0x1bc>
     b28:	ldr	x0, [x24, #8]
     b2c:	mov	w1, #0xc                   	// #12
     b30:	bl	0 <ctf_set_errno>
     b34:	mov	w0, #0x0                   	// #0
     b38:	b	9b4 <ctf_dump_type+0x1cc>
     b3c:	strb	wzr, [x19, x0]
     b40:	ldr	x19, [sp, #112]
     b44:	b	994 <ctf_dump_type+0x1ac>
     b48:	bl	0 <ctf_errno>
     b4c:	cmp	w0, #0x41b
     b50:	b.ne	aa0 <ctf_dump_type+0x2b8>  // b.any
     b54:	mov	x0, x28
     b58:	adrp	x1, 0 <ctf_dump_member>
     b5c:	add	x1, x1, #0x0
     b60:	bl	0 <ctf_str_append_noerr>
     b64:	mov	w1, #0x400                 	// #1024
     b68:	mov	x21, x0
     b6c:	mov	x0, x20
     b70:	bl	0 <ctf_set_errno>
     b74:	b	a24 <ctf_dump_type+0x23c>
     b78:	adrp	x1, 0 <ctf_dump_member>
     b7c:	add	x19, x1, #0x0
     b80:	b	ac4 <ctf_dump_type+0x2dc>
     b84:	nop

0000000000000b88 <ctf_dump>:
     b88:	stp	x29, x30, [sp, #-192]!
     b8c:	mov	x29, sp
     b90:	stp	x21, x22, [sp, #32]
     b94:	mov	x21, x3
     b98:	ldr	x22, [x1]
     b9c:	stp	x19, x20, [sp, #16]
     ba0:	mov	w19, w2
     ba4:	stp	x23, x24, [sp, #48]
     ba8:	mov	x20, x4
     bac:	mov	x24, x1
     bb0:	stp	x25, x26, [sp, #64]
     bb4:	mov	x23, x0
     bb8:	cbz	x22, d98 <ctf_dump+0x210>
     bbc:	ldr	w1, [x22]
     bc0:	cmp	w1, w2
     bc4:	b.ne	d38 <ctf_dump+0x1b0>  // b.any
     bc8:	ldr	x0, [x22, #16]
     bcc:	cbz	x0, d30 <ctf_dump+0x1a8>
     bd0:	ldr	x0, [x0, #8]
     bd4:	str	x0, [x22, #16]
     bd8:	cbz	x0, d40 <ctf_dump+0x1b8>
     bdc:	ldr	x22, [x0, #16]
     be0:	cbz	x21, 1164 <ctf_dump+0x5dc>
     be4:	stp	x27, x28, [sp, #80]
     be8:	adrp	x26, 0 <ctf_dump_member>
     bec:	mov	x25, #0x0                   	// #0
     bf0:	add	x26, x26, #0x0
     bf4:	mov	w27, #0xa                   	// #10
     bf8:	cbz	x22, c70 <ctf_dump+0xe8>
     bfc:	ldrb	w2, [x22]
     c00:	mov	x0, x22
     c04:	mov	w1, #0xa                   	// #10
     c08:	cbz	w2, c70 <ctf_dump+0xe8>
     c0c:	bl	0 <strchr>
     c10:	mov	x24, x0
     c14:	mov	x2, x20
     c18:	mov	x1, x22
     c1c:	mov	w0, w19
     c20:	cbz	x24, cb4 <ctf_dump+0x12c>
     c24:	strb	wzr, [x24]
     c28:	blr	x21
     c2c:	mov	x28, x0
     c30:	mov	x1, x28
     c34:	mov	x0, x25
     c38:	bl	0 <ctf_str_append_noerr>
     c3c:	mov	x1, x26
     c40:	bl	0 <ctf_str_append_noerr>
     c44:	cmp	x28, x22
     c48:	mov	x25, x0
     c4c:	b.eq	c58 <ctf_dump+0xd0>  // b.none
     c50:	mov	x0, x28
     c54:	bl	0 <free>
     c58:	mov	x22, x24
     c5c:	mov	w1, #0xa                   	// #10
     c60:	strb	w27, [x22], #1
     c64:	ldrb	w2, [x22]
     c68:	mov	x0, x22
     c6c:	cbnz	w2, c0c <ctf_dump+0x84>
     c70:	mov	x0, x25
     c74:	bl	0 <strlen>
     c78:	sub	x0, x0, #0x1
     c7c:	ldrb	w1, [x25, x0]
     c80:	cmp	w1, #0xa
     c84:	b.eq	d00 <ctf_dump+0x178>  // b.none
     c88:	ldp	x27, x28, [sp, #80]
     c8c:	mov	x0, x23
     c90:	mov	w1, #0x0                   	// #0
     c94:	bl	0 <ctf_set_errno>
     c98:	mov	x0, x25
     c9c:	ldp	x19, x20, [sp, #16]
     ca0:	ldp	x21, x22, [sp, #32]
     ca4:	ldp	x23, x24, [sp, #48]
     ca8:	ldp	x25, x26, [sp, #64]
     cac:	ldp	x29, x30, [sp], #192
     cb0:	ret
     cb4:	blr	x21
     cb8:	mov	x19, x0
     cbc:	mov	x1, x19
     cc0:	mov	x0, x25
     cc4:	bl	0 <ctf_str_append_noerr>
     cc8:	adrp	x1, 0 <ctf_dump_member>
     ccc:	add	x1, x1, #0x0
     cd0:	bl	0 <ctf_str_append_noerr>
     cd4:	mov	x25, x0
     cd8:	cmp	x22, x19
     cdc:	b.eq	c70 <ctf_dump+0xe8>  // b.none
     ce0:	mov	x0, x19
     ce4:	bl	0 <free>
     ce8:	mov	x0, x25
     cec:	bl	0 <strlen>
     cf0:	sub	x0, x0, #0x1
     cf4:	ldrb	w1, [x25, x0]
     cf8:	cmp	w1, #0xa
     cfc:	b.ne	c88 <ctf_dump+0x100>  // b.any
     d00:	strb	wzr, [x25, x0]
     d04:	ldp	x27, x28, [sp, #80]
     d08:	b	c8c <ctf_dump+0x104>
     d0c:	cmp	w19, #0x5
     d10:	b.eq	14b0 <ctf_dump+0x928>  // b.none
     d14:	cmp	w19, #0x6
     d18:	b.ne	113c <ctf_dump+0x5b4>  // b.any
     d1c:	ldp	x25, x0, [x23, #336]
     d20:	add	x0, x25, x0
     d24:	cmp	x25, x0
     d28:	b.cc	1184 <ctf_dump+0x5fc>  // b.lo, b.ul, b.last
     d2c:	nop
     d30:	ldr	x0, [x22, #32]
     d34:	b	bd4 <ctf_dump+0x4c>
     d38:	mov	w1, #0x418                 	// #1048
     d3c:	bl	0 <ctf_set_errno>
     d40:	ldr	x19, [x22, #32]
     d44:	cbz	x19, d60 <ctf_dump+0x1d8>
     d48:	ldr	x0, [x19, #16]
     d4c:	bl	0 <free>
     d50:	mov	x0, x19
     d54:	ldr	x19, [x19, #8]
     d58:	bl	0 <free>
     d5c:	cbnz	x19, d48 <ctf_dump+0x1c0>
     d60:	mov	x0, x22
     d64:	bl	0 <free>
     d68:	mov	x0, x23
     d6c:	mov	w1, #0x0                   	// #0
     d70:	bl	0 <ctf_set_errno>
     d74:	str	xzr, [x24]
     d78:	mov	x25, #0x0                   	// #0
     d7c:	mov	x0, x25
     d80:	ldp	x19, x20, [sp, #16]
     d84:	ldp	x21, x22, [sp, #32]
     d88:	ldp	x23, x24, [sp, #48]
     d8c:	ldp	x25, x26, [sp, #64]
     d90:	ldp	x29, x30, [sp], #192
     d94:	ret
     d98:	mov	x1, #0x1                   	// #1
     d9c:	mov	x0, #0x28                  	// #40
     da0:	bl	0 <calloc>
     da4:	str	x0, [x24]
     da8:	mov	x22, x0
     dac:	cbz	x0, 1598 <ctf_dump+0xa10>
     db0:	str	w19, [x0]
     db4:	cmp	w19, #0x3
     db8:	str	x23, [x0, #8]
     dbc:	b.eq	127c <ctf_dump+0x6f4>  // b.none
     dc0:	b.hi	d0c <ctf_dump+0x184>  // b.pmore
     dc4:	cmp	w19, #0x1
     dc8:	b.eq	1240 <ctf_dump+0x6b8>  // b.none
     dcc:	cmp	w19, #0x2
     dd0:	b.ne	ed4 <ctf_dump+0x34c>  // b.any
     dd4:	ldr	x1, [x23, #432]
     dd8:	mov	x0, x23
     ddc:	mov	x25, #0x0                   	// #0
     de0:	cbz	x1, d30 <ctf_dump+0x1a8>
     de4:	stp	x27, x28, [sp, #80]
     de8:	adrp	x28, 0 <ctf_dump_member>
     dec:	adrp	x27, 0 <ctf_dump_member>
     df0:	add	x28, x28, #0x0
     df4:	add	x27, x27, #0x0
     df8:	b	e74 <ctf_dump+0x2ec>
     dfc:	mov	x2, x25
     e00:	mov	x1, x27
     e04:	add	x0, sp, #0x90
     e08:	bl	0 <asprintf>
     e0c:	tbnz	w0, #31, eb4 <ctf_dump+0x32c>
     e10:	ldr	x0, [x22, #8]
     e14:	mov	x1, x26
     e18:	bl	280 <ctf_dump_format_type.constprop.0>
     e1c:	mov	x26, x0
     e20:	ldr	x0, [sp, #144]
     e24:	cbz	x26, 1518 <ctf_dump+0x990>
     e28:	mov	x1, x26
     e2c:	bl	0 <ctf_str_append_noerr>
     e30:	mov	x1, x0
     e34:	mov	x0, x26
     e38:	str	x1, [sp, #144]
     e3c:	bl	0 <free>
     e40:	mov	x0, #0x18                  	// #24
     e44:	ldr	x26, [sp, #144]
     e48:	bl	0 <malloc>
     e4c:	mov	x1, x0
     e50:	cbz	x0, 15d8 <ctf_dump+0xa50>
     e54:	str	x26, [x1, #16]
     e58:	add	x0, x22, #0x18
     e5c:	bl	0 <ctf_list_append>
     e60:	ldr	x0, [x23, #432]
     e64:	add	x25, x25, #0x1
     e68:	cmp	x25, x0
     e6c:	b.cs	1214 <ctf_dump+0x68c>  // b.hs, b.nlast
     e70:	ldr	x0, [x22, #8]
     e74:	mov	x1, x25
     e78:	bl	0 <ctf_lookup_by_symbol>
     e7c:	mov	x26, x0
     e80:	cmn	x0, #0x1
     e84:	b.eq	1220 <ctf_dump+0x698>  // b.none
     e88:	mov	x1, x25
     e8c:	mov	x0, x23
     e90:	bl	0 <ctf_lookup_symbol_name>
     e94:	mov	x2, x0
     e98:	ldrb	w0, [x0]
     e9c:	cbz	w0, dfc <ctf_dump+0x274>
     ea0:	mov	x3, x25
     ea4:	mov	x1, x28
     ea8:	add	x0, sp, #0x90
     eac:	bl	0 <asprintf>
     eb0:	tbz	w0, #31, e10 <ctf_dump+0x288>
     eb4:	bl	0 <__errno_location>
     eb8:	mov	x1, x0
     ebc:	mov	x0, x23
     ec0:	ldr	w1, [x1]
     ec4:	bl	0 <ctf_set_errno>
     ec8:	tbz	w0, #31, 1214 <ctf_dump+0x68c>
     ecc:	ldp	x27, x28, [sp, #80]
     ed0:	b	d40 <ctf_dump+0x1b8>
     ed4:	cbnz	w19, 14d0 <ctf_dump+0x948>
     ed8:	adrp	x3, 0 <ctf_dump_member>
     edc:	add	x3, x3, #0x0
     ee0:	ldr	x25, [x23, #8]
     ee4:	adrp	x1, 0 <ctf_dump_member>
     ee8:	ldp	x4, x5, [x3]
     eec:	add	x0, sp, #0x80
     ef0:	ldrh	w2, [x25]
     ef4:	add	x1, x1, #0x0
     ef8:	stp	x4, x5, [sp, #144]
     efc:	ldp	x4, x5, [x3, #16]
     f00:	stp	x4, x5, [sp, #160]
     f04:	ldp	x4, x5, [x3, #32]
     f08:	stp	x4, x5, [sp, #176]
     f0c:	bl	0 <asprintf>
     f10:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
     f14:	mov	x0, #0x18                  	// #24
     f18:	ldr	x26, [sp, #128]
     f1c:	bl	0 <malloc>
     f20:	mov	x1, x0
     f24:	cbz	x0, 1588 <ctf_dump+0xa00>
     f28:	str	x26, [x1, #16]
     f2c:	add	x0, x22, #0x18
     f30:	bl	0 <ctf_list_append>
     f34:	ldrb	w2, [x25, #2]
     f38:	cmp	w2, #0x4
     f3c:	b.hi	1524 <ctf_dump+0x99c>  // b.pmore
     f40:	add	x1, sp, #0x90
     f44:	adrp	x0, 0 <ctf_dump_member>
     f48:	add	x0, x0, #0x0
     f4c:	ldr	x3, [x1, w2, sxtw #3]
     f50:	cmp	x3, #0x0
     f54:	csel	x3, x0, x3, eq  // eq = none
     f58:	adrp	x1, 0 <ctf_dump_member>
     f5c:	add	x0, sp, #0x80
     f60:	add	x1, x1, #0x0
     f64:	bl	0 <asprintf>
     f68:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
     f6c:	mov	x0, #0x18                  	// #24
     f70:	ldr	x26, [sp, #128]
     f74:	bl	0 <malloc>
     f78:	mov	x1, x0
     f7c:	cbz	x0, 15c8 <ctf_dump+0xa40>
     f80:	str	x26, [x1, #16]
     f84:	add	x0, x22, #0x18
     f88:	bl	0 <ctf_list_append>
     f8c:	ldrb	w2, [x23, #16]
     f90:	cbz	w2, fe0 <ctf_dump+0x458>
     f94:	tst	x2, #0x1
     f98:	adrp	x1, 0 <ctf_dump_member>
     f9c:	adrp	x3, 0 <ctf_dump_member>
     fa0:	add	x1, x1, #0x0
     fa4:	add	x3, x3, #0x0
     fa8:	add	x0, sp, #0x80
     fac:	csel	x3, x3, x1, ne  // ne = any
     fb0:	adrp	x1, 0 <ctf_dump_member>
     fb4:	add	x1, x1, #0x0
     fb8:	bl	0 <asprintf>
     fbc:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
     fc0:	mov	x0, #0x18                  	// #24
     fc4:	ldr	x26, [sp, #128]
     fc8:	bl	0 <malloc>
     fcc:	mov	x1, x0
     fd0:	cbz	x0, 15e8 <ctf_dump+0xa60>
     fd4:	str	x26, [x1, #16]
     fd8:	add	x0, x22, #0x18
     fdc:	bl	0 <ctf_list_append>
     fe0:	ldr	w3, [x25, #4]
     fe4:	adrp	x2, 0 <ctf_dump_member>
     fe8:	mov	x1, x22
     fec:	add	x2, x2, #0x0
     ff0:	mov	x0, x23
     ff4:	bl	738 <ctf_dump_header_strfield>
     ff8:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
     ffc:	ldr	w3, [x25, #8]
    1000:	adrp	x2, 0 <ctf_dump_member>
    1004:	mov	x1, x22
    1008:	add	x2, x2, #0x0
    100c:	mov	x0, x23
    1010:	bl	738 <ctf_dump_header_strfield>
    1014:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    1018:	ldr	w3, [x25, #12]
    101c:	adrp	x2, 0 <ctf_dump_member>
    1020:	mov	x1, x22
    1024:	add	x2, x2, #0x0
    1028:	mov	x0, x23
    102c:	bl	738 <ctf_dump_header_strfield>
    1030:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    1034:	ldp	w3, w4, [x25, #16]
    1038:	cmp	w3, w4
    103c:	b.eq	1088 <ctf_dump+0x500>  // b.none
    1040:	sub	w5, w4, w3
    1044:	adrp	x2, 0 <ctf_dump_member>
    1048:	adrp	x1, 0 <ctf_dump_member>
    104c:	add	x2, x2, #0x0
    1050:	add	x1, x1, #0x0
    1054:	sub	w4, w4, #0x1
    1058:	mov	w3, w3
    105c:	add	x0, sp, #0x88
    1060:	bl	0 <asprintf>
    1064:	tbnz	w0, #31, 156c <ctf_dump+0x9e4>
    1068:	mov	x0, #0x18                  	// #24
    106c:	ldr	x26, [sp, #136]
    1070:	bl	0 <malloc>
    1074:	mov	x1, x0
    1078:	cbz	x0, 155c <ctf_dump+0x9d4>
    107c:	str	x26, [x1, #16]
    1080:	add	x0, x22, #0x18
    1084:	bl	0 <ctf_list_append>
    1088:	ldp	w3, w4, [x25, #20]
    108c:	adrp	x2, 0 <ctf_dump_member>
    1090:	mov	x1, x22
    1094:	add	x2, x2, #0x0
    1098:	mov	x0, x23
    109c:	bl	690 <ctf_dump_header_sectfield>
    10a0:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    10a4:	ldr	w3, [x25, #24]
    10a8:	adrp	x2, 0 <ctf_dump_member>
    10ac:	ldr	w4, [x25, #36]
    10b0:	add	x2, x2, #0x0
    10b4:	mov	x1, x22
    10b8:	mov	x0, x23
    10bc:	bl	690 <ctf_dump_header_sectfield>
    10c0:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    10c4:	ldp	w3, w4, [x25, #36]
    10c8:	adrp	x2, 0 <ctf_dump_member>
    10cc:	mov	x1, x22
    10d0:	add	x2, x2, #0x0
    10d4:	mov	x0, x23
    10d8:	bl	690 <ctf_dump_header_sectfield>
    10dc:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    10e0:	ldp	w3, w4, [x25, #40]
    10e4:	adrp	x2, 0 <ctf_dump_member>
    10e8:	mov	x1, x22
    10ec:	add	x2, x2, #0x0
    10f0:	mov	x0, x23
    10f4:	bl	690 <ctf_dump_header_sectfield>
    10f8:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    10fc:	ldp	w3, w4, [x25, #44]
    1100:	adrp	x2, 0 <ctf_dump_member>
    1104:	mov	x1, x22
    1108:	add	x2, x2, #0x0
    110c:	add	w4, w3, w4
    1110:	mov	x0, x23
    1114:	add	w4, w4, #0x1
    1118:	bl	690 <ctf_dump_header_sectfield>
    111c:	tbz	w0, #31, bc8 <ctf_dump+0x40>
    1120:	bl	0 <__errno_location>
    1124:	mov	x1, x0
    1128:	mov	x0, x23
    112c:	ldr	w1, [x1]
    1130:	bl	0 <ctf_set_errno>
    1134:	ldr	x0, [x22, #16]
    1138:	b	bcc <ctf_dump+0x44>
    113c:	cmp	w19, #0x4
    1140:	b.ne	14d0 <ctf_dump+0x948>  // b.any
    1144:	mov	x2, x0
    1148:	adrp	x1, 0 <ctf_dump_member>
    114c:	mov	x0, x23
    1150:	add	x1, x1, #0x0
    1154:	bl	0 <ctf_variable_iter>
    1158:	tbnz	w0, #31, d40 <ctf_dump+0x1b8>
    115c:	ldr	x0, [x22, #16]
    1160:	b	bcc <ctf_dump+0x44>
    1164:	mov	x0, x22
    1168:	bl	0 <strdup>
    116c:	mov	x25, x0
    1170:	cbnz	x0, c8c <ctf_dump+0x104>
    1174:	mov	x0, x23
    1178:	mov	w1, #0xc                   	// #12
    117c:	bl	0 <ctf_set_errno>
    1180:	b	c98 <ctf_dump+0x110>
    1184:	add	x0, x22, #0x18
    1188:	adrp	x26, 0 <ctf_dump_member>
    118c:	mov	x2, x25
    1190:	add	x26, x26, #0x0
    1194:	stp	x27, x28, [sp, #80]
    1198:	add	x28, sp, #0x90
    119c:	str	x0, [sp, #104]
    11a0:	b	11e0 <ctf_dump+0x658>
    11a4:	ldr	x27, [sp, #144]
    11a8:	bl	0 <malloc>
    11ac:	mov	x1, x0
    11b0:	ldr	x0, [sp, #104]
    11b4:	cbz	x1, 15b8 <ctf_dump+0xa30>
    11b8:	str	x27, [x1, #16]
    11bc:	bl	0 <ctf_list_append>
    11c0:	mov	x0, x25
    11c4:	bl	0 <strlen>
    11c8:	add	x1, x0, #0x1
    11cc:	ldp	x2, x0, [x23, #336]
    11d0:	add	x25, x25, x1
    11d4:	add	x0, x2, x0
    11d8:	cmp	x25, x0
    11dc:	b.cs	1214 <ctf_dump+0x68c>  // b.hs, b.nlast
    11e0:	mov	x1, x26
    11e4:	sub	x2, x25, x2
    11e8:	mov	x3, x25
    11ec:	mov	x0, x28
    11f0:	bl	0 <asprintf>
    11f4:	mov	w1, w0
    11f8:	mov	x0, #0x18                  	// #24
    11fc:	tbz	w1, #31, 11a4 <ctf_dump+0x61c>
    1200:	bl	0 <__errno_location>
    1204:	mov	x1, x0
    1208:	mov	x0, x23
    120c:	ldr	w1, [x1]
    1210:	bl	0 <ctf_set_errno>
    1214:	ldr	x0, [x22, #16]
    1218:	ldp	x27, x28, [sp, #80]
    121c:	b	bcc <ctf_dump+0x44>
    1220:	ldr	x0, [x22, #8]
    1224:	bl	0 <ctf_errno>
    1228:	cmp	w0, #0x3f2
    122c:	b.eq	ecc <ctf_dump+0x344>  // b.none
    1230:	sub	w0, w0, #0x406
    1234:	cmp	w0, #0x1
    1238:	b.ls	e60 <ctf_dump+0x2d8>  // b.plast
    123c:	b	e88 <ctf_dump+0x300>
    1240:	mov	x2, x0
    1244:	adrp	x1, 0 <ctf_dump_member>
    1248:	mov	x0, x23
    124c:	add	x1, x1, #0x0
    1250:	bl	0 <ctf_label_iter>
    1254:	tbz	w0, #31, bc8 <ctf_dump+0x40>
    1258:	mov	x0, x23
    125c:	bl	0 <ctf_errno>
    1260:	cmp	w0, #0x409
    1264:	b.ne	d40 <ctf_dump+0x1b8>  // b.any
    1268:	mov	x0, x23
    126c:	mov	w1, #0x0                   	// #0
    1270:	bl	0 <ctf_set_errno>
    1274:	ldr	x0, [x22, #16]
    1278:	b	bcc <ctf_dump+0x44>
    127c:	ldr	x0, [x23, #432]
    1280:	cbz	x0, d30 <ctf_dump+0x1a8>
    1284:	adrp	x1, 0 <ctf_dump_member>
    1288:	adrp	x0, 0 <ctf_dump_member>
    128c:	add	x1, x1, #0x0
    1290:	add	x0, x0, #0x0
    1294:	stp	x27, x28, [sp, #80]
    1298:	add	x28, sp, #0x90
    129c:	mov	x2, x28
    12a0:	mov	x25, #0x0                   	// #0
    12a4:	stp	x1, x0, [sp, #112]
    12a8:	mov	x0, x23
    12ac:	mov	x1, x25
    12b0:	bl	0 <ctf_func_info>
    12b4:	cmn	w0, #0x1
    12b8:	sxtw	x27, w0
    12bc:	b.eq	144c <ctf_dump+0x8c4>  // b.none
    12c0:	ldr	w0, [sp, #152]
    12c4:	mov	x1, #0x8                   	// #8
    12c8:	bl	0 <calloc>
    12cc:	mov	x26, x0
    12d0:	cbz	x0, 1548 <ctf_dump+0x9c0>
    12d4:	ldr	x0, [x22, #8]
    12d8:	mov	x1, x27
    12dc:	bl	0 <ctf_type_aname>
    12e0:	mov	x27, x0
    12e4:	cbz	x0, 1530 <ctf_dump+0x9a8>
    12e8:	ldr	x1, [sp, #112]
    12ec:	bl	0 <ctf_str_append_noerr>
    12f0:	mov	x27, x0
    12f4:	mov	x1, x25
    12f8:	mov	x0, x23
    12fc:	bl	0 <ctf_lookup_symbol_name>
    1300:	mov	x2, x0
    1304:	ldrb	w0, [x0]
    1308:	cbnz	w0, 146c <ctf_dump+0x8e4>
    130c:	adrp	x1, 0 <ctf_dump_member>
    1310:	mov	x2, x25
    1314:	add	x1, x1, #0x0
    1318:	add	x0, sp, #0x88
    131c:	bl	0 <asprintf>
    1320:	tbnz	w0, #31, 1484 <ctf_dump+0x8fc>
    1324:	ldr	x1, [sp, #136]
    1328:	mov	x0, x27
    132c:	bl	0 <ctf_str_append_noerr>
    1330:	adrp	x1, 0 <ctf_dump_member>
    1334:	add	x1, x1, #0x0
    1338:	bl	0 <ctf_str_append_noerr>
    133c:	mov	x27, x0
    1340:	ldr	x0, [sp, #136]
    1344:	bl	0 <free>
    1348:	ldr	w2, [sp, #152]
    134c:	mov	x3, x26
    1350:	ldr	x0, [x22, #8]
    1354:	mov	x1, x25
    1358:	bl	0 <ctf_func_args>
    135c:	tbnz	w0, #31, 153c <ctf_dump+0x9b4>
    1360:	ldr	w0, [sp, #152]
    1364:	cbz	w0, 13dc <ctf_dump+0x854>
    1368:	str	xzr, [sp, #104]
    136c:	ldr	x0, [sp, #104]
    1370:	ldr	x1, [x26, x0, lsl #3]
    1374:	ldr	x0, [x22, #8]
    1378:	bl	0 <ctf_type_aname>
    137c:	mov	x1, x0
    1380:	str	x1, [sp, #136]
    1384:	mov	x0, x27
    1388:	cbz	x1, 14e0 <ctf_dump+0x958>
    138c:	bl	0 <ctf_str_append_noerr>
    1390:	mov	x27, x0
    1394:	ldr	w2, [sp, #152]
    1398:	ldr	x3, [sp, #104]
    139c:	sub	w2, w2, #0x1
    13a0:	ldr	x1, [sp, #120]
    13a4:	cmp	x3, x2
    13a8:	add	x2, x3, #0x1
    13ac:	str	x2, [sp, #104]
    13b0:	b.cc	13bc <ctf_dump+0x834>  // b.lo, b.ul, b.last
    13b4:	ldr	w2, [sp, #156]
    13b8:	tbz	w2, #0, 13c4 <ctf_dump+0x83c>
    13bc:	bl	0 <ctf_str_append_noerr>
    13c0:	mov	x27, x0
    13c4:	ldr	x0, [sp, #136]
    13c8:	bl	0 <free>
    13cc:	ldr	x1, [sp, #104]
    13d0:	ldr	w0, [sp, #152]
    13d4:	cmp	x1, x0
    13d8:	b.cc	136c <ctf_dump+0x7e4>  // b.lo, b.ul, b.last
    13dc:	ldr	w0, [sp, #156]
    13e0:	tbnz	w0, #0, 1498 <ctf_dump+0x910>
    13e4:	adrp	x1, 0 <ctf_dump_member>
    13e8:	add	x1, x1, #0x0
    13ec:	mov	x0, x27
    13f0:	bl	0 <ctf_str_append_noerr>
    13f4:	mov	x1, x0
    13f8:	mov	x0, x26
    13fc:	mov	x26, x1
    1400:	bl	0 <free>
    1404:	mov	x0, #0x18                  	// #24
    1408:	bl	0 <malloc>
    140c:	mov	x1, x0
    1410:	cbz	x0, 15a8 <ctf_dump+0xa20>
    1414:	str	x26, [x1, #16]
    1418:	add	x0, x22, #0x18
    141c:	bl	0 <ctf_list_append>
    1420:	ldr	x0, [x23, #432]
    1424:	add	x25, x25, #0x1
    1428:	cmp	x25, x0
    142c:	b.cs	1214 <ctf_dump+0x68c>  // b.hs, b.nlast
    1430:	ldr	x0, [x22, #8]
    1434:	mov	x2, x28
    1438:	mov	x1, x25
    143c:	bl	0 <ctf_func_info>
    1440:	cmn	w0, #0x1
    1444:	sxtw	x27, w0
    1448:	b.ne	12c0 <ctf_dump+0x738>  // b.any
    144c:	ldr	x0, [x22, #8]
    1450:	bl	0 <ctf_errno>
    1454:	cmp	w0, #0x3f2
    1458:	b.eq	ecc <ctf_dump+0x344>  // b.none
    145c:	sub	w0, w0, #0x404
    1460:	cmp	w0, #0x2
    1464:	b.ls	1420 <ctf_dump+0x898>  // b.plast
    1468:	b	12c0 <ctf_dump+0x738>
    146c:	adrp	x1, 0 <ctf_dump_member>
    1470:	mov	x3, x25
    1474:	add	x1, x1, #0x0
    1478:	add	x0, sp, #0x88
    147c:	bl	0 <asprintf>
    1480:	tbz	w0, #31, 1324 <ctf_dump+0x79c>
    1484:	mov	x0, x26
    1488:	bl	0 <free>
    148c:	mov	x0, x27
    1490:	bl	0 <free>
    1494:	b	eb4 <ctf_dump+0x32c>
    1498:	mov	x0, x27
    149c:	adrp	x1, 0 <ctf_dump_member>
    14a0:	add	x1, x1, #0x0
    14a4:	bl	0 <ctf_str_append_noerr>
    14a8:	mov	x27, x0
    14ac:	b	13e4 <ctf_dump+0x85c>
    14b0:	mov	x2, x0
    14b4:	adrp	x1, 0 <ctf_dump_member>
    14b8:	mov	x0, x23
    14bc:	add	x1, x1, #0x0
    14c0:	bl	0 <ctf_type_iter_all>
    14c4:	tbnz	w0, #31, d40 <ctf_dump+0x1b8>
    14c8:	ldr	x0, [x22, #16]
    14cc:	b	bcc <ctf_dump+0x44>
    14d0:	mov	x0, x23
    14d4:	mov	w1, #0x417                 	// #1047
    14d8:	bl	0 <ctf_set_errno>
    14dc:	b	d40 <ctf_dump+0x1b8>
    14e0:	adrp	x19, 0 <ctf_dump_member>
    14e4:	add	x19, x19, #0x0
    14e8:	ldr	x0, [x22, #8]
    14ec:	bl	0 <ctf_errno>
    14f0:	bl	0 <ctf_errmsg>
    14f4:	mov	x3, x0
    14f8:	mov	x2, x25
    14fc:	mov	x1, x19
    1500:	adrp	x0, 0 <ctf_dump_member>
    1504:	add	x0, x0, #0x0
    1508:	bl	0 <ctf_dprintf>
    150c:	mov	x0, x26
    1510:	bl	0 <free>
    1514:	mov	x0, x27
    1518:	bl	0 <free>
    151c:	ldp	x27, x28, [sp, #80]
    1520:	b	d40 <ctf_dump+0x1b8>
    1524:	adrp	x3, 0 <ctf_dump_member>
    1528:	add	x3, x3, #0x0
    152c:	b	f58 <ctf_dump+0x3d0>
    1530:	adrp	x19, 0 <ctf_dump_member>
    1534:	add	x19, x19, #0x0
    1538:	b	14e8 <ctf_dump+0x960>
    153c:	adrp	x19, 0 <ctf_dump_member>
    1540:	add	x19, x19, #0x0
    1544:	b	14e8 <ctf_dump+0x960>
    1548:	mov	x0, x23
    154c:	mov	w1, #0xc                   	// #12
    1550:	bl	0 <ctf_set_errno>
    1554:	tbz	w0, #31, 1214 <ctf_dump+0x68c>
    1558:	b	ecc <ctf_dump+0x344>
    155c:	ldr	x0, [x22, #8]
    1560:	mov	w1, #0xc                   	// #12
    1564:	bl	0 <ctf_set_errno>
    1568:	b	1088 <ctf_dump+0x500>
    156c:	bl	0 <__errno_location>
    1570:	mov	x1, x0
    1574:	mov	x0, x23
    1578:	ldr	w1, [x1]
    157c:	bl	0 <ctf_set_errno>
    1580:	tbnz	w0, #31, 1120 <ctf_dump+0x598>
    1584:	b	1088 <ctf_dump+0x500>
    1588:	ldr	x0, [x22, #8]
    158c:	mov	w1, #0xc                   	// #12
    1590:	bl	0 <ctf_set_errno>
    1594:	b	f34 <ctf_dump+0x3ac>
    1598:	mov	x0, x23
    159c:	mov	w1, #0xc                   	// #12
    15a0:	bl	0 <ctf_set_errno>
    15a4:	b	d60 <ctf_dump+0x1d8>
    15a8:	ldr	x0, [x22, #8]
    15ac:	mov	w1, #0xc                   	// #12
    15b0:	bl	0 <ctf_set_errno>
    15b4:	b	1420 <ctf_dump+0x898>
    15b8:	ldr	x0, [x22, #8]
    15bc:	mov	w1, #0xc                   	// #12
    15c0:	bl	0 <ctf_set_errno>
    15c4:	b	11c0 <ctf_dump+0x638>
    15c8:	ldr	x0, [x22, #8]
    15cc:	mov	w1, #0xc                   	// #12
    15d0:	bl	0 <ctf_set_errno>
    15d4:	b	f8c <ctf_dump+0x404>
    15d8:	ldr	x0, [x22, #8]
    15dc:	mov	w1, #0xc                   	// #12
    15e0:	bl	0 <ctf_set_errno>
    15e4:	b	e60 <ctf_dump+0x2d8>
    15e8:	ldr	x0, [x22, #8]
    15ec:	mov	w1, #0xc                   	// #12
    15f0:	bl	0 <ctf_set_errno>
    15f4:	b	fe0 <ctf_dump+0x458>

ctf-create.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_sort_var>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x2
      10:	mov	x20, x1
      14:	ldr	w1, [x0]
      18:	ldp	x0, x2, [x2]
      1c:	bl	0 <ctf_strraw_explicit>
      20:	ldr	w1, [x20]
      24:	mov	x20, x0
      28:	ldp	x0, x2, [x19]
      2c:	bl	0 <ctf_strraw_explicit>
      30:	mov	x1, x0
      34:	mov	x0, x20
      38:	ldp	x19, x20, [sp, #16]
      3c:	ldp	x29, x30, [sp], #32
      40:	b	0 <strcmp>
      44:	nop

0000000000000048 <membadd>:
      48:	stp	x29, x30, [sp, #-64]!
      4c:	mov	x29, sp
      50:	stp	x19, x20, [sp, #16]
      54:	mov	x20, x0
      58:	mov	x0, #0x30                  	// #48
      5c:	stp	x21, x22, [sp, #32]
      60:	mov	x22, x2
      64:	mov	x21, x3
      68:	str	x23, [sp, #48]
      6c:	mov	x23, x1
      70:	bl	0 <malloc>
      74:	cbz	x0, e0 <membadd+0x98>
      78:	mov	x19, x0
      7c:	cbz	x20, 90 <membadd+0x48>
      80:	mov	x0, x20
      84:	bl	0 <strdup>
      88:	mov	x20, x0
      8c:	cbz	x0, d8 <membadd+0x90>
      90:	ldr	x0, [x21, #16]
      94:	mov	w2, #0xffffffff            	// #-1
      98:	stp	x20, x23, [x19, #16]
      9c:	mov	x1, x19
      a0:	add	x0, x0, #0x30
      a4:	str	x22, [x19, #32]
      a8:	str	w2, [x19, #40]
      ac:	bl	0 <ctf_list_append>
      b0:	ldr	x2, [x21]
      b4:	mov	w0, #0x0                   	// #0
      b8:	ldr	w1, [x2, #552]
      bc:	orr	w1, w1, #0x4
      c0:	str	w1, [x2, #552]
      c4:	ldp	x19, x20, [sp, #16]
      c8:	ldp	x21, x22, [sp, #32]
      cc:	ldr	x23, [sp, #48]
      d0:	ldp	x29, x30, [sp], #64
      d4:	ret
      d8:	mov	x0, x19
      dc:	bl	0 <free>
      e0:	ldr	x0, [x21]
      e4:	mov	w1, #0xb                   	// #11
      e8:	bl	0 <ctf_set_errno>
      ec:	b	c4 <membadd+0x7c>

00000000000000f0 <enumcmp>:
      f0:	stp	x29, x30, [sp, #-64]!
      f4:	mov	x29, sp
      f8:	stp	x19, x20, [sp, #16]
      fc:	mov	x19, x2
     100:	mov	x20, x0
     104:	mov	x2, x0
     108:	add	x3, sp, #0x3c
     10c:	ldr	x0, [x19]
     110:	str	x21, [sp, #32]
     114:	mov	w21, w1
     118:	ldr	x1, [x19, #8]
     11c:	bl	0 <ctf_enum_value>
     120:	tbnz	w0, #31, 168 <enumcmp+0x78>
     124:	ldr	w2, [sp, #60]
     128:	mov	w0, #0x0                   	// #0
     12c:	cmp	w2, w21
     130:	b.ne	144 <enumcmp+0x54>  // b.any
     134:	ldp	x19, x20, [sp, #16]
     138:	ldr	x21, [sp, #32]
     13c:	ldp	x29, x30, [sp], #64
     140:	ret
     144:	mov	w1, w21
     148:	adrp	x0, 0 <ctf_sort_var>
     14c:	add	x0, x0, #0x0
     150:	bl	0 <ctf_dprintf>
     154:	mov	w0, #0x1                   	// #1
     158:	ldp	x19, x20, [sp, #16]
     15c:	ldr	x21, [sp, #32]
     160:	ldp	x29, x30, [sp], #64
     164:	ret
     168:	ldr	x0, [x19]
     16c:	bl	0 <ctf_errno>
     170:	bl	0 <ctf_errmsg>
     174:	mov	x2, x0
     178:	mov	x1, x20
     17c:	adrp	x0, 0 <ctf_sort_var>
     180:	add	x0, x0, #0x0
     184:	bl	0 <ctf_dprintf>
     188:	mov	w0, #0x1                   	// #1
     18c:	ldp	x19, x20, [sp, #16]
     190:	ldr	x21, [sp, #32]
     194:	ldp	x29, x30, [sp], #64
     198:	ret
     19c:	nop

00000000000001a0 <membcmp>:
     1a0:	stp	x29, x30, [sp, #-64]!
     1a4:	mov	x29, sp
     1a8:	stp	x19, x20, [sp, #16]
     1ac:	mov	x19, x3
     1b0:	mov	x20, x0
     1b4:	add	x3, sp, #0x30
     1b8:	ldr	x1, [x19, #8]
     1bc:	str	x21, [sp, #32]
     1c0:	mov	x21, x2
     1c4:	mov	x2, x0
     1c8:	ldr	x0, [x19]
     1cc:	bl	0 <ctf_member_info>
     1d0:	tbnz	w0, #31, 21c <membcmp+0x7c>
     1d4:	ldr	x2, [sp, #56]
     1d8:	mov	w0, #0x0                   	// #0
     1dc:	cmp	x2, x21
     1e0:	b.ne	1f4 <membcmp+0x54>  // b.any
     1e4:	ldp	x19, x20, [sp, #16]
     1e8:	ldr	x21, [sp, #32]
     1ec:	ldp	x29, x30, [sp], #64
     1f0:	ret
     1f4:	mov	x3, x21
     1f8:	mov	x1, x20
     1fc:	adrp	x0, 0 <ctf_sort_var>
     200:	add	x0, x0, #0x0
     204:	bl	0 <ctf_dprintf>
     208:	mov	w0, #0x1                   	// #1
     20c:	ldp	x19, x20, [sp, #16]
     210:	ldr	x21, [sp, #32]
     214:	ldp	x29, x30, [sp], #64
     218:	ret
     21c:	ldr	x0, [x19]
     220:	bl	0 <ctf_errno>
     224:	bl	0 <ctf_errmsg>
     228:	mov	x2, x0
     22c:	mov	x1, x20
     230:	adrp	x0, 0 <ctf_sort_var>
     234:	add	x0, x0, #0x0
     238:	bl	0 <ctf_dprintf>
     23c:	mov	w0, #0x1                   	// #1
     240:	ldp	x19, x20, [sp, #16]
     244:	ldr	x21, [sp, #32]
     248:	ldp	x29, x30, [sp], #64
     24c:	ret

0000000000000250 <ctf_serialize.part.0>:
     250:	sub	sp, sp, #0x3d0
     254:	mov	w1, #0xffffdff2            	// #-8206
     258:	stp	x29, x30, [sp, #16]
     25c:	add	x29, sp, #0x10
     260:	stp	x27, x28, [sp, #96]
     264:	mov	x28, x0
     268:	mov	w0, #0x4                   	// #4
     26c:	stp	x25, x26, [sp, #80]
     270:	ldr	x25, [x28, #584]
     274:	stp	xzr, xzr, [sp, #192]
     278:	stp	x19, x20, [sp, #32]
     27c:	stp	x21, x22, [sp, #48]
     280:	stp	x23, x24, [sp, #64]
     284:	strh	w1, [sp, #192]
     288:	strb	w0, [sp, #194]
     28c:	stp	xzr, xzr, [sp, #208]
     290:	stp	xzr, xzr, [sp, #224]
     294:	str	wzr, [sp, #240]
     298:	cbz	x25, a58 <ctf_serialize.part.0+0x808>
     29c:	mov	x26, #0x0                   	// #0
     2a0:	mov	w20, #0x1fffffff            	// #536870911
     2a4:	mov	w24, #0xc                   	// #12
     2a8:	b	2e8 <ctf_serialize.part.0+0x98>
     2ac:	add	x26, x26, #0xc
     2b0:	cmp	w19, #0x7
     2b4:	b.hi	7ec <ctf_serialize.part.0+0x59c>  // b.pmore
     2b8:	cmp	w19, #0x5
     2bc:	b.hi	92c <ctf_serialize.part.0+0x6dc>  // b.pmore
     2c0:	cmp	w19, #0x4
     2c4:	b.eq	804 <ctf_serialize.part.0+0x5b4>  // b.none
     2c8:	cmp	w19, #0x5
     2cc:	b.ne	7d8 <ctf_serialize.part.0+0x588>  // b.any
     2d0:	add	w0, w0, #0x1
     2d4:	and	w0, w0, #0xfffffffe
     2d8:	add	x26, x26, w0, uxtw #2
     2dc:	nop
     2e0:	ldr	x25, [x25, #8]
     2e4:	cbz	x25, 340 <ctf_serialize.part.0+0xf0>
     2e8:	ldr	x1, [x28]
     2ec:	ldr	w0, [x25, #28]
     2f0:	ldr	x1, [x1]
     2f4:	blr	x1
     2f8:	mov	w19, w0
     2fc:	ldr	x1, [x28]
     300:	ldr	w0, [x25, #28]
     304:	ldr	x1, [x1, #16]
     308:	blr	x1
     30c:	ldr	w1, [x25, #32]
     310:	cmn	w1, #0x1
     314:	b.ne	2ac <ctf_serialize.part.0+0x5c>  // b.any
     318:	add	x26, x26, #0x14
     31c:	cmp	w19, #0x7
     320:	b.hi	7ec <ctf_serialize.part.0+0x59c>  // b.pmore
     324:	cmp	w19, #0x5
     328:	b.ls	2c0 <ctf_serialize.part.0+0x70>  // b.plast
     32c:	mov	w1, w0
     330:	ldr	x25, [x25, #8]
     334:	add	x26, x26, x1, lsl #4
     338:	cbnz	x25, 2e8 <ctf_serialize.part.0+0x98>
     33c:	nop
     340:	ldr	x0, [x28, #608]
     344:	cbz	x0, a4c <ctf_serialize.part.0+0x7fc>
     348:	mov	x20, #0x0                   	// #0
     34c:	nop
     350:	ldr	x0, [x0, #8]
     354:	add	x20, x20, #0x1
     358:	cbnz	x0, 350 <ctf_serialize.part.0+0x100>
     35c:	lsl	w0, w20, #3
     360:	add	w26, w26, w0
     364:	mov	w27, w26
     368:	stp	w0, w26, [sp, #232]
     36c:	add	x0, x27, #0x34
     370:	str	x0, [sp, #136]
     374:	bl	0 <malloc>
     378:	str	x0, [sp, #120]
     37c:	cbz	x0, 9ec <ctf_serialize.part.0+0x79c>
     380:	mov	x4, x0
     384:	add	x2, x0, #0x34
     388:	str	x2, [sp, #128]
     38c:	ldp	x2, x3, [sp, #192]
     390:	stp	x2, x3, [x4]
     394:	ldr	w0, [x28, #552]
     398:	ldp	x2, x3, [sp, #208]
     39c:	stp	x2, x3, [x4, #16]
     3a0:	ldr	w1, [sp, #240]
     3a4:	ldp	x2, x3, [sp, #224]
     3a8:	stp	x2, x3, [x4, #32]
     3ac:	str	w1, [x4, #48]
     3b0:	tbz	w0, #0, 3c8 <ctf_serialize.part.0+0x178>
     3b4:	ldr	x1, [x28, #528]
     3b8:	cbz	x1, 3c8 <ctf_serialize.part.0+0x178>
     3bc:	add	x2, x4, #0x8
     3c0:	mov	x0, x28
     3c4:	bl	0 <ctf_str_add_ref>
     3c8:	ldr	x1, [x28, #496]
     3cc:	cbz	x1, 3e0 <ctf_serialize.part.0+0x190>
     3d0:	ldr	x0, [sp, #120]
     3d4:	add	x2, x0, #0xc
     3d8:	mov	x0, x28
     3dc:	bl	0 <ctf_str_add_ref>
     3e0:	ldr	x19, [x28, #608]
     3e4:	cbz	x19, a60 <ctf_serialize.part.0+0x810>
     3e8:	ldr	x25, [sp, #128]
     3ec:	mov	x26, #0x0                   	// #0
     3f0:	ldr	x1, [x19, #16]
     3f4:	mov	x2, x25
     3f8:	mov	x0, x28
     3fc:	add	x26, x26, #0x1
     400:	add	x25, x25, #0x8
     404:	bl	0 <ctf_str_add_ref>
     408:	ldr	x0, [x19, #24]
     40c:	ldr	x19, [x19, #8]
     410:	stur	w0, [x25, #-4]
     414:	cbnz	x19, 3f0 <ctf_serialize.part.0+0x1a0>
     418:	cmp	x26, x20
     41c:	b.ne	aa8 <ctf_serialize.part.0+0x858>  // b.any
     420:	ldr	x1, [sp, #128]
     424:	lsl	x3, x26, #3
     428:	and	x0, x3, #0xffffffff
     42c:	add	x27, x1, x3
     430:	add	x0, x0, #0x34
     434:	ldr	x1, [sp, #120]
     438:	add	x0, x1, x0
     43c:	cmp	x27, x0
     440:	b.ne	a88 <ctf_serialize.part.0+0x838>  // b.any
     444:	ldr	x25, [x28, #584]
     448:	cbz	x25, 510 <ctf_serialize.part.0+0x2c0>
     44c:	nop
     450:	ldr	x1, [x28]
     454:	ldr	w0, [x25, #28]
     458:	ldr	x1, [x1]
     45c:	blr	x1
     460:	mov	w26, w0
     464:	ldr	x1, [x28]
     468:	ldr	w0, [x25, #28]
     46c:	ldr	x1, [x1, #16]
     470:	blr	x1
     474:	mov	w19, w0
     478:	ldr	w2, [x25, #32]
     47c:	mov	x3, #0x14                  	// #20
     480:	add	x1, x25, #0x18
     484:	mov	x0, x27
     488:	cmn	w2, #0x1
     48c:	mov	x2, #0xc                   	// #12
     490:	csel	x24, x2, x3, ne  // ne = any
     494:	mov	x2, x24
     498:	bl	0 <memcpy>
     49c:	ldr	w1, [x27]
     4a0:	cbnz	w1, 858 <ctf_serialize.part.0+0x608>
     4a4:	add	x27, x27, x24
     4a8:	cmp	w26, #0x7
     4ac:	b.hi	814 <ctf_serialize.part.0+0x5c4>  // b.pmore
     4b0:	cmp	w26, #0x5
     4b4:	b.hi	890 <ctf_serialize.part.0+0x640>  // b.pmore
     4b8:	cmp	w26, #0x4
     4bc:	b.eq	878 <ctf_serialize.part.0+0x628>  // b.none
     4c0:	cmp	w26, #0x5
     4c4:	b.ne	830 <ctf_serialize.part.0+0x5e0>  // b.any
     4c8:	mov	x0, #0x0                   	// #0
     4cc:	cbz	w19, 508 <ctf_serialize.part.0+0x2b8>
     4d0:	ldr	x1, [x25, #48]
     4d4:	ldr	x1, [x1, x0, lsl #3]
     4d8:	str	w1, [x27, x0, lsl #2]
     4dc:	add	x0, x0, #0x1
     4e0:	cmp	w19, w0
     4e4:	b.hi	4d0 <ctf_serialize.part.0+0x280>  // b.pmore
     4e8:	sub	w0, w19, #0x1
     4ec:	add	x1, x0, #0x1
     4f0:	lsl	x0, x0, #2
     4f4:	add	x1, x27, x1, lsl #2
     4f8:	tbz	w19, #0, 998 <ctf_serialize.part.0+0x748>
     4fc:	add	x0, x0, #0x8
     500:	str	wzr, [x1]
     504:	add	x27, x27, x0
     508:	ldr	x25, [x25, #8]
     50c:	cbnz	x25, 450 <ctf_serialize.part.0+0x200>
     510:	ldr	x0, [sp, #120]
     514:	ldr	x1, [sp, #136]
     518:	add	x0, x0, x1
     51c:	cmp	x27, x0
     520:	b.ne	a68 <ctf_serialize.part.0+0x818>  // b.any
     524:	mov	x0, x28
     528:	bl	0 <ctf_str_write_strtab>
     52c:	mov	x2, x0
     530:	mov	x3, x1
     534:	mov	x0, x28
     538:	stp	x2, x3, [sp, #160]
     53c:	bl	0 <ctf_str_purge_refs>
     540:	ldr	x0, [sp, #160]
     544:	cbz	x0, 9a8 <ctf_serialize.part.0+0x758>
     548:	ldr	x0, [sp, #128]
     54c:	add	x5, sp, #0xa0
     550:	mov	x1, x20
     554:	add	x4, sp, #0xb0
     558:	mov	x2, #0x8                   	// #8
     55c:	adrp	x3, 0 <ctf_sort_var>
     560:	add	x3, x3, #0x0
     564:	stp	x28, x5, [sp, #176]
     568:	bl	0 <qsort_r>
     56c:	ldr	x1, [sp, #120]
     570:	mov	x0, x28
     574:	ldr	x3, [sp, #136]
     578:	ldr	x2, [sp, #168]
     57c:	add	x2, x3, x2
     580:	bl	0 <ctf_realloc>
     584:	mov	x20, x0
     588:	cbz	x0, 9dc <ctf_serialize.part.0+0x78c>
     58c:	ldp	x1, x2, [sp, #160]
     590:	ldr	x21, [sp, #136]
     594:	add	x0, x0, x21
     598:	bl	0 <memcpy>
     59c:	ldp	x0, x19, [sp, #160]
     5a0:	str	w19, [x20, #48]
     5a4:	bl	0 <free>
     5a8:	ldr	x7, [x28, #128]
     5ac:	add	x0, sp, #0x9c
     5b0:	mov	w1, #0x1                   	// #1
     5b4:	str	w1, [sp]
     5b8:	str	x0, [sp, #8]
     5bc:	add	x1, x21, w19, uxtw
     5c0:	mov	x0, x20
     5c4:	mov	x6, #0x0                   	// #0
     5c8:	mov	x5, #0x0                   	// #0
     5cc:	mov	x4, #0x0                   	// #0
     5d0:	mov	x3, #0x0                   	// #0
     5d4:	mov	x2, #0x0                   	// #0
     5d8:	bl	0 <ctf_simple_open_internal>
     5dc:	mov	x19, x0
     5e0:	cbz	x0, a18 <ctf_serialize.part.0+0x7c8>
     5e4:	mov	x0, x28
     5e8:	bl	0 <ctf_getmodel>
     5ec:	mov	w1, w0
     5f0:	mov	x0, x19
     5f4:	bl	0 <ctf_setmodel>
     5f8:	ldr	x1, [x28, #512]
     5fc:	mov	x0, x19
     600:	bl	0 <ctf_import>
     604:	ldr	w0, [x28, #552]
     608:	ldr	x2, [x19, #400]
     60c:	and	w1, w0, #0xfffffffb
     610:	ldr	w0, [x19, #552]
     614:	ldr	w3, [x28, #548]
     618:	orr	w0, w0, w1
     61c:	str	w3, [x19, #548]
     620:	str	w0, [x19, #552]
     624:	cbz	x2, 9a0 <ctf_serialize.part.0+0x750>
     628:	add	x21, x28, #0x200
     62c:	add	x4, x28, #0x288
     630:	add	x0, x19, #0x200
     634:	ldr	w12, [x28, #384]
     638:	ldr	x1, [x28, #568]
     63c:	add	x8, x19, #0x288
     640:	ldp	x9, x7, [x4]
     644:	add	x20, x28, #0xd8
     648:	ldp	x6, x5, [x4, #16]
     64c:	ldp	x2, x3, [x21, #64]
     650:	ldr	x13, [x28, #128]
     654:	ldr	x11, [x28, #448]
     658:	ldr	x4, [x28, #696]
     65c:	str	x1, [x19, #568]
     660:	stp	x2, x3, [x0, #64]
     664:	ldr	x1, [x28, #592]
     668:	ldp	x2, x3, [x21, #88]
     66c:	str	x1, [x19, #592]
     670:	stp	x2, x3, [x0, #88]
     674:	mov	x1, x20
     678:	ldr	x0, [x28, #616]
     67c:	str	x0, [x19, #616]
     680:	mov	x2, #0x78                  	// #120
     684:	add	x0, x19, #0xd8
     688:	ldr	x3, [x28, #624]
     68c:	ldr	x10, [x28, #456]
     690:	add	x3, x3, #0x1
     694:	str	x3, [x19, #624]
     698:	ldr	x3, [x28, #720]
     69c:	str	x13, [x19, #128]
     6a0:	str	w12, [x19, #384]
     6a4:	stp	x11, x10, [x19, #448]
     6a8:	stp	x9, x7, [x8]
     6ac:	stp	x6, x5, [x8, #16]
     6b0:	str	x4, [x19, #696]
     6b4:	str	x3, [x19, #720]
     6b8:	ldr	x3, [x28, #680]
     6bc:	ldr	x4, [x28, #624]
     6c0:	str	x3, [x19, #680]
     6c4:	ldr	x3, [x28, #688]
     6c8:	str	x4, [x19, #632]
     6cc:	str	x3, [x19, #688]
     6d0:	bl	0 <memcpy>
     6d4:	ldp	x2, x3, [x28, #168]
     6d8:	ldp	x0, x1, [x28, #152]
     6dc:	stp	x2, x3, [x19, #168]
     6e0:	ldp	x2, x3, [x28, #184]
     6e4:	stp	x2, x3, [x19, #184]
     6e8:	ldp	x2, x3, [x28, #200]
     6ec:	stp	x0, x1, [x19, #152]
     6f0:	mov	x0, x19
     6f4:	stp	x2, x3, [x19, #200]
     6f8:	str	xzr, [x28, #568]
     6fc:	bl	0 <ctf_str_free_atoms>
     700:	add	x1, x28, #0x240
     704:	add	x3, x28, #0x258
     708:	ldr	x2, [x28, #120]
     70c:	ldr	x0, [x28, #368]
     710:	str	x2, [x19, #120]
     714:	str	x0, [x19, #368]
     718:	mov	x2, #0x2d8                 	// #728
     71c:	movi	v0.4s, #0x0
     720:	str	xzr, [x28, #120]
     724:	str	xzr, [x28, #368]
     728:	add	x0, sp, #0xf8
     72c:	stp	xzr, xzr, [x1]
     730:	mov	x1, x28
     734:	str	xzr, [x28, #128]
     738:	str	xzr, [x28, #448]
     73c:	str	xzr, [x28, #696]
     740:	stur	q0, [x21, #136]
     744:	stur	q0, [x21, #152]
     748:	str	xzr, [x28, #592]
     74c:	stp	xzr, xzr, [x3]
     750:	stp	xzr, xzr, [x28, #216]
     754:	stp	xzr, xzr, [x28, #232]
     758:	stp	xzr, xzr, [x28, #248]
     75c:	stp	xzr, xzr, [x20, #48]
     760:	stp	xzr, xzr, [x20, #64]
     764:	stp	xzr, xzr, [x20, #80]
     768:	stp	xzr, xzr, [x20, #96]
     76c:	str	xzr, [x28, #160]
     770:	str	xzr, [x28, #176]
     774:	str	xzr, [x28, #192]
     778:	str	xzr, [x28, #208]
     77c:	str	xzr, [x28, #328]
     780:	bl	0 <memcpy>
     784:	mov	x1, x19
     788:	mov	x0, x28
     78c:	mov	x2, #0x2d8                 	// #728
     790:	bl	0 <memcpy>
     794:	add	x1, sp, #0xf8
     798:	mov	x2, #0x2d8                 	// #728
     79c:	mov	x0, x19
     7a0:	bl	0 <memcpy>
     7a4:	mov	w0, #0x1                   	// #1
     7a8:	str	w0, [x19, #548]
     7ac:	mov	x0, x19
     7b0:	bl	0 <ctf_file_close>
     7b4:	mov	w0, #0x0                   	// #0
     7b8:	ldp	x29, x30, [sp, #16]
     7bc:	ldp	x19, x20, [sp, #32]
     7c0:	ldp	x21, x22, [sp, #48]
     7c4:	ldp	x23, x24, [sp, #64]
     7c8:	ldp	x25, x26, [sp, #80]
     7cc:	ldp	x27, x28, [sp, #96]
     7d0:	add	sp, sp, #0x3d0
     7d4:	ret
     7d8:	sub	w19, w19, #0x1
     7dc:	cmp	w19, #0x1
     7e0:	b.hi	2e0 <ctf_serialize.part.0+0x90>  // b.pmore
     7e4:	add	x26, x26, #0x4
     7e8:	b	2e0 <ctf_serialize.part.0+0x90>
     7ec:	cmp	w19, #0x8
     7f0:	b.eq	80c <ctf_serialize.part.0+0x5bc>  // b.none
     7f4:	cmp	w19, #0xe
     7f8:	b.ne	2e0 <ctf_serialize.part.0+0x90>  // b.any
     7fc:	add	x26, x26, #0x8
     800:	b	2e0 <ctf_serialize.part.0+0x90>
     804:	add	x26, x26, #0xc
     808:	b	2e0 <ctf_serialize.part.0+0x90>
     80c:	add	x26, x26, w0, uxtw #3
     810:	b	2e0 <ctf_serialize.part.0+0x90>
     814:	cmp	w26, #0x8
     818:	b.eq	8f8 <ctf_serialize.part.0+0x6a8>  // b.none
     81c:	cmp	w26, #0xe
     820:	b.ne	508 <ctf_serialize.part.0+0x2b8>  // b.any
     824:	ldr	x0, [x25, #48]
     828:	str	x0, [x27], #8
     82c:	b	508 <ctf_serialize.part.0+0x2b8>
     830:	sub	w4, w26, #0x1
     834:	cmp	w4, #0x1
     838:	b.hi	508 <ctf_serialize.part.0+0x2b8>  // b.pmore
     83c:	ldp	w0, w1, [x25, #48]
     840:	ldr	w2, [x25, #56]
     844:	lsl	w1, w1, #16
     848:	orr	w0, w1, w0, lsl #24
     84c:	orr	w0, w0, w2
     850:	str	w0, [x27], #4
     854:	b	508 <ctf_serialize.part.0+0x2b8>
     858:	mov	x0, x28
     85c:	bl	0 <ctf_strraw>
     860:	mov	x1, x0
     864:	cbz	x0, 4a4 <ctf_serialize.part.0+0x254>
     868:	mov	x2, x27
     86c:	mov	x0, x28
     870:	bl	0 <ctf_str_add_ref>
     874:	b	4a4 <ctf_serialize.part.0+0x254>
     878:	ldr	w0, [x25, #64]
     87c:	ldp	x2, x1, [x25, #48]
     880:	stp	w2, w1, [x27]
     884:	add	x27, x27, #0xc
     888:	stur	w0, [x27, #-4]
     88c:	b	508 <ctf_serialize.part.0+0x2b8>
     890:	ldr	w0, [x25, #32]
     894:	mov	w1, #0x1fffffff            	// #536870911
     898:	ldr	x19, [x25, #56]
     89c:	cmp	w0, w1
     8a0:	b.hi	940 <ctf_serialize.part.0+0x6f0>  // b.pmore
     8a4:	cbz	x19, 508 <ctf_serialize.part.0+0x2b8>
     8a8:	ldp	x0, x1, [x19, #24]
     8ac:	stp	wzr, w1, [x27]
     8b0:	str	w0, [x27, #8]
     8b4:	ldr	x1, [x19, #16]
     8b8:	cbz	x1, 8e8 <ctf_serialize.part.0+0x698>
     8bc:	mov	x2, x27
     8c0:	mov	x0, x28
     8c4:	bl	0 <ctf_str_add_ref>
     8c8:	add	x27, x27, #0xc
     8cc:	ldr	x19, [x19, #8]
     8d0:	cbz	x19, 508 <ctf_serialize.part.0+0x2b8>
     8d4:	ldp	x0, x1, [x19, #24]
     8d8:	stp	wzr, w1, [x27]
     8dc:	str	w0, [x27, #8]
     8e0:	ldr	x1, [x19, #16]
     8e4:	cbnz	x1, 8bc <ctf_serialize.part.0+0x66c>
     8e8:	ldr	x19, [x19, #8]
     8ec:	add	x27, x27, #0xc
     8f0:	cbnz	x19, 8a8 <ctf_serialize.part.0+0x658>
     8f4:	b	508 <ctf_serialize.part.0+0x2b8>
     8f8:	ldr	x19, [x25, #56]
     8fc:	cbz	x19, 508 <ctf_serialize.part.0+0x2b8>
     900:	ldr	w1, [x19, #40]
     904:	mov	x2, x27
     908:	mov	x0, x28
     90c:	add	x27, x27, #0x8
     910:	bfi	x22, x1, #32, #32
     914:	stur	x22, [x27, #-8]
     918:	ldr	x1, [x19, #16]
     91c:	bl	0 <ctf_str_add_ref>
     920:	ldr	x19, [x19, #8]
     924:	cbnz	x19, 900 <ctf_serialize.part.0+0x6b0>
     928:	b	508 <ctf_serialize.part.0+0x2b8>
     92c:	cmp	w1, w20
     930:	mov	w1, w0
     934:	b.hi	330 <ctf_serialize.part.0+0xe0>  // b.pmore
     938:	umaddl	x26, w0, w24, x26
     93c:	b	2e0 <ctf_serialize.part.0+0x90>
     940:	cbz	x19, 508 <ctf_serialize.part.0+0x2b8>
     944:	nop
     948:	ldp	x1, x0, [x19, #24]
     94c:	and	x21, x21, #0xffffffff00000000
     950:	bfxil	x23, x1, #0, #32
     954:	lsr	x1, x0, #32
     958:	bfi	x23, x0, #32, #32
     95c:	bfi	x21, x1, #32, #32
     960:	stp	x21, x23, [x27]
     964:	ldr	x1, [x19, #16]
     968:	cbz	x1, 988 <ctf_serialize.part.0+0x738>
     96c:	mov	x2, x27
     970:	mov	x0, x28
     974:	bl	0 <ctf_str_add_ref>
     978:	add	x27, x27, #0x10
     97c:	ldr	x19, [x19, #8]
     980:	cbnz	x19, 948 <ctf_serialize.part.0+0x6f8>
     984:	b	508 <ctf_serialize.part.0+0x2b8>
     988:	ldr	x19, [x19, #8]
     98c:	add	x27, x27, #0x10
     990:	cbnz	x19, 948 <ctf_serialize.part.0+0x6f8>
     994:	b	508 <ctf_serialize.part.0+0x2b8>
     998:	mov	x27, x1
     99c:	b	508 <ctf_serialize.part.0+0x2b8>
     9a0:	str	x20, [x19, #400]
     9a4:	b	628 <ctf_serialize.part.0+0x3d8>
     9a8:	ldr	x0, [sp, #120]
     9ac:	bl	0 <free>
     9b0:	mov	x0, x28
     9b4:	mov	w1, #0xb                   	// #11
     9b8:	bl	0 <ctf_set_errno>
     9bc:	ldp	x29, x30, [sp, #16]
     9c0:	ldp	x19, x20, [sp, #32]
     9c4:	ldp	x21, x22, [sp, #48]
     9c8:	ldp	x23, x24, [sp, #64]
     9cc:	ldp	x25, x26, [sp, #80]
     9d0:	ldp	x27, x28, [sp, #96]
     9d4:	add	sp, sp, #0x3d0
     9d8:	ret
     9dc:	ldr	x0, [sp, #120]
     9e0:	bl	0 <free>
     9e4:	ldr	x0, [sp, #160]
     9e8:	bl	0 <free>
     9ec:	mov	x0, x28
     9f0:	mov	w1, #0xb                   	// #11
     9f4:	bl	0 <ctf_set_errno>
     9f8:	ldp	x29, x30, [sp, #16]
     9fc:	ldp	x19, x20, [sp, #32]
     a00:	ldp	x21, x22, [sp, #48]
     a04:	ldp	x23, x24, [sp, #64]
     a08:	ldp	x25, x26, [sp, #80]
     a0c:	ldp	x27, x28, [sp, #96]
     a10:	add	sp, sp, #0x3d0
     a14:	ret
     a18:	mov	x0, x20
     a1c:	bl	0 <free>
     a20:	ldr	w1, [sp, #156]
     a24:	mov	x0, x28
     a28:	bl	0 <ctf_set_errno>
     a2c:	ldp	x29, x30, [sp, #16]
     a30:	ldp	x19, x20, [sp, #32]
     a34:	ldp	x21, x22, [sp, #48]
     a38:	ldp	x23, x24, [sp, #64]
     a3c:	ldp	x25, x26, [sp, #80]
     a40:	ldp	x27, x28, [sp, #96]
     a44:	add	sp, sp, #0x3d0
     a48:	ret
     a4c:	mov	w0, #0x0                   	// #0
     a50:	mov	x20, #0x0                   	// #0
     a54:	b	364 <ctf_serialize.part.0+0x114>
     a58:	mov	w26, #0x0                   	// #0
     a5c:	b	340 <ctf_serialize.part.0+0xf0>
     a60:	mov	x26, #0x0                   	// #0
     a64:	b	418 <ctf_serialize.part.0+0x1c8>
     a68:	adrp	x3, 0 <ctf_sort_var>
     a6c:	adrp	x1, 0 <ctf_sort_var>
     a70:	adrp	x0, 0 <ctf_sort_var>
     a74:	add	x3, x3, #0x0
     a78:	add	x1, x1, #0x0
     a7c:	add	x0, x0, #0x0
     a80:	mov	w2, #0x1d8                 	// #472
     a84:	bl	0 <__assert_fail>
     a88:	adrp	x3, 0 <ctf_sort_var>
     a8c:	adrp	x1, 0 <ctf_sort_var>
     a90:	adrp	x0, 0 <ctf_sort_var>
     a94:	add	x3, x3, #0x0
     a98:	add	x1, x1, #0x0
     a9c:	add	x0, x0, #0x0
     aa0:	mov	w2, #0x17d                 	// #381
     aa4:	bl	0 <__assert_fail>
     aa8:	adrp	x3, 0 <ctf_sort_var>
     aac:	adrp	x1, 0 <ctf_sort_var>
     ab0:	adrp	x0, 0 <ctf_sort_var>
     ab4:	add	x3, x3, #0x0
     ab8:	add	x1, x1, #0x0
     abc:	add	x0, x0, #0x0
     ac0:	mov	w2, #0x179                 	// #377
     ac4:	bl	0 <__assert_fail>

0000000000000ac8 <ctf_create>:
     ac8:	stp	x29, x30, [sp, #-112]!
     acc:	mov	x29, sp
     ad0:	stp	x19, x20, [sp, #16]
     ad4:	stp	x23, x24, [sp, #48]
     ad8:	mov	x24, x0
     adc:	bl	0 <libctf_init_debug>
     ae0:	adrp	x1, 0 <ctf_hash_eq_integer>
     ae4:	adrp	x0, 0 <ctf_hash_integer>
     ae8:	add	x1, x1, #0x0
     aec:	add	x0, x0, #0x0
     af0:	mov	x3, #0x0                   	// #0
     af4:	mov	x2, #0x0                   	// #0
     af8:	bl	0 <ctf_dynhash_create>
     afc:	cbz	x0, d2c <ctf_create+0x264>
     b00:	adrp	x20, 0 <ctf_hash_eq_string>
     b04:	adrp	x19, 0 <ctf_hash_string>
     b08:	add	x20, x20, #0x0
     b0c:	add	x19, x19, #0x0
     b10:	mov	x1, x20
     b14:	mov	x3, #0x0                   	// #0
     b18:	mov	x2, #0x0                   	// #0
     b1c:	stp	x21, x22, [sp, #32]
     b20:	mov	x21, x0
     b24:	mov	x0, x19
     b28:	bl	0 <ctf_dynhash_create>
     b2c:	mov	x22, x0
     b30:	cbz	x0, d40 <ctf_create+0x278>
     b34:	mov	x1, x20
     b38:	mov	x3, #0x0                   	// #0
     b3c:	mov	x2, #0x0                   	// #0
     b40:	mov	x0, x19
     b44:	stp	x25, x26, [sp, #64]
     b48:	bl	0 <ctf_dynhash_create>
     b4c:	mov	x1, x20
     b50:	mov	x25, x0
     b54:	mov	x3, #0x0                   	// #0
     b58:	mov	x2, #0x0                   	// #0
     b5c:	mov	x0, x19
     b60:	bl	0 <ctf_dynhash_create>
     b64:	mov	x23, x0
     b68:	mov	x1, x20
     b6c:	mov	x3, #0x0                   	// #0
     b70:	mov	x2, #0x0                   	// #0
     b74:	mov	x0, x19
     b78:	bl	0 <ctf_dynhash_create>
     b7c:	mov	x26, x0
     b80:	mov	x1, x20
     b84:	mov	x0, x19
     b88:	mov	x3, #0x0                   	// #0
     b8c:	mov	x2, #0x0                   	// #0
     b90:	bl	0 <ctf_dynhash_create>
     b94:	mov	x20, x0
     b98:	cmp	x25, #0x0
     b9c:	ccmp	x23, #0x0, #0x4, ne  // ne = any
     ba0:	b.eq	cc8 <ctf_create+0x200>  // b.none
     ba4:	cmp	x26, #0x0
     ba8:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     bac:	b.eq	cc8 <ctf_create+0x200>  // b.none
     bb0:	adrp	x6, 0 <ctf_sort_var>
     bb4:	add	x6, x6, #0x0
     bb8:	add	x6, x6, #0x10
     bbc:	adrp	x7, 0 <_CTF_SECTION>
     bc0:	add	x7, x7, #0x0
     bc4:	mov	x8, #0x1                   	// #1
     bc8:	mov	x9, #0x34                  	// #52
     bcc:	mov	x5, x24
     bd0:	mov	w4, w8
     bd4:	add	x0, sp, #0x50
     bd8:	mov	x3, #0x0                   	// #0
     bdc:	mov	x2, #0x0                   	// #0
     be0:	mov	x1, #0x0                   	// #0
     be4:	stp	x7, x6, [sp, #80]
     be8:	stp	x9, x8, [sp, #96]
     bec:	bl	0 <ctf_bufopen_internal>
     bf0:	mov	x19, x0
     bf4:	cbz	x0, cd4 <ctf_create+0x20c>
     bf8:	adrp	x1, 0 <ctf_sort_var>
     bfc:	str	x25, [x0, #160]
     c00:	str	x23, [x0, #176]
     c04:	ldr	q0, [x1]
     c08:	add	x1, x0, #0x200
     c0c:	str	x26, [x0, #192]
     c10:	str	x20, [x0, #208]
     c14:	str	x21, [x0, #568]
     c18:	str	x22, [x0, #592]
     c1c:	stur	q0, [x1, #104]
     c20:	str	xzr, [x0, #632]
     c24:	bl	0 <ctf_set_ctl_hashes>
     c28:	mov	x0, x19
     c2c:	mov	w1, #0x2                   	// #2
     c30:	bl	0 <ctf_setmodel>
     c34:	ldp	x0, x2, [x19, #448]
     c38:	cbz	x0, d24 <ctf_create+0x25c>
     c3c:	ldr	x1, [x19, #480]
     c40:	add	x1, x1, #0x2
     c44:	cmp	x2, x1
     c48:	b.cs	cac <ctf_create+0x1e4>  // b.hs, b.nlast
     c4c:	ucvtf	d0, x2
     c50:	fmov	d1, #1.250000000000000000e+00
     c54:	fmul	d0, d0, d1
     c58:	fcvtzu	x20, d0
     c5c:	cmp	x2, x20
     c60:	b.eq	cac <ctf_create+0x1e4>  // b.none
     c64:	lsl	x1, x20, #2
     c68:	bl	0 <realloc>
     c6c:	cbz	x0, d50 <ctf_create+0x288>
     c70:	ldr	x3, [x19, #456]
     c74:	str	x0, [x19, #448]
     c78:	mov	w1, #0x0                   	// #0
     c7c:	sub	x2, x20, x3
     c80:	add	x0, x0, x3, lsl #2
     c84:	lsl	x2, x2, #2
     c88:	bl	0 <memset>
     c8c:	ldp	x21, x22, [sp, #32]
     c90:	mov	x0, x19
     c94:	ldp	x25, x26, [sp, #64]
     c98:	str	x20, [x19, #456]
     c9c:	ldp	x19, x20, [sp, #16]
     ca0:	ldp	x23, x24, [sp, #48]
     ca4:	ldp	x29, x30, [sp], #112
     ca8:	ret
     cac:	ldp	x21, x22, [sp, #32]
     cb0:	ldp	x25, x26, [sp, #64]
     cb4:	mov	x0, x19
     cb8:	ldp	x19, x20, [sp, #16]
     cbc:	ldp	x23, x24, [sp, #48]
     cc0:	ldp	x29, x30, [sp], #112
     cc4:	ret
     cc8:	mov	x0, x24
     ccc:	mov	w1, #0xb                   	// #11
     cd0:	bl	0 <ctf_set_open_errno>
     cd4:	mov	x0, x25
     cd8:	bl	0 <ctf_dynhash_destroy>
     cdc:	mov	x0, x23
     ce0:	bl	0 <ctf_dynhash_destroy>
     ce4:	mov	x0, x26
     ce8:	bl	0 <ctf_dynhash_destroy>
     cec:	mov	x0, x20
     cf0:	bl	0 <ctf_dynhash_destroy>
     cf4:	mov	x0, x22
     cf8:	bl	0 <ctf_dynhash_destroy>
     cfc:	ldp	x25, x26, [sp, #64]
     d00:	mov	x0, x21
     d04:	mov	x19, #0x0                   	// #0
     d08:	bl	0 <ctf_dynhash_destroy>
     d0c:	mov	x0, x19
     d10:	ldp	x19, x20, [sp, #16]
     d14:	ldp	x21, x22, [sp, #32]
     d18:	ldp	x23, x24, [sp, #48]
     d1c:	ldp	x29, x30, [sp], #112
     d20:	ret
     d24:	mov	x20, #0x400                 	// #1024
     d28:	b	c5c <ctf_create+0x194>
     d2c:	mov	x0, x24
     d30:	mov	w1, #0xb                   	// #11
     d34:	mov	x19, #0x0                   	// #0
     d38:	bl	0 <ctf_set_open_errno>
     d3c:	b	cb4 <ctf_create+0x1ec>
     d40:	mov	x0, x24
     d44:	mov	w1, #0xb                   	// #11
     d48:	bl	0 <ctf_set_open_errno>
     d4c:	b	d00 <ctf_create+0x238>
     d50:	mov	x0, x19
     d54:	mov	w1, #0xc                   	// #12
     d58:	bl	0 <ctf_set_errno>
     d5c:	tbz	w0, #31, cac <ctf_create+0x1e4>
     d60:	mov	x0, x19
     d64:	bl	0 <ctf_errno>
     d68:	mov	w1, w0
     d6c:	mov	x0, x24
     d70:	bl	0 <ctf_set_open_errno>
     d74:	mov	x0, x19
     d78:	mov	x19, #0x0                   	// #0
     d7c:	bl	0 <ctf_file_close>
     d80:	ldp	x21, x22, [sp, #32]
     d84:	ldp	x25, x26, [sp, #64]
     d88:	b	cb4 <ctf_create+0x1ec>
     d8c:	nop

0000000000000d90 <ctf_update>:
     d90:	ldr	w2, [x0, #552]
     d94:	tbz	w2, #1, dac <ctf_update+0x1c>
     d98:	mov	x1, x0
     d9c:	mov	w0, #0x0                   	// #0
     da0:	ldr	x2, [x1, #480]
     da4:	str	x2, [x1, #616]
     da8:	ret
     dac:	stp	x29, x30, [sp, #-16]!
     db0:	mov	w1, #0x40d                 	// #1037
     db4:	mov	x29, sp
     db8:	bl	0 <ctf_set_errno>
     dbc:	ldp	x29, x30, [sp], #16
     dc0:	ret
     dc4:	nop

0000000000000dc8 <ctf_serialize>:
     dc8:	ldr	w1, [x0, #552]
     dcc:	tbz	w1, #1, de4 <ctf_serialize+0x1c>
     dd0:	mov	w2, #0x0                   	// #0
     dd4:	tbnz	w1, #2, de0 <ctf_serialize+0x18>
     dd8:	mov	w0, w2
     ddc:	ret
     de0:	b	250 <ctf_serialize.part.0>
     de4:	stp	x29, x30, [sp, #-16]!
     de8:	mov	w1, #0x40d                 	// #1037
     dec:	mov	x29, sp
     df0:	bl	0 <ctf_set_errno>
     df4:	ldp	x29, x30, [sp], #16
     df8:	ret
     dfc:	nop

0000000000000e00 <ctf_name_table>:
     e00:	mov	x2, x0
     e04:	cmp	w1, #0x7
     e08:	add	x0, x0, #0xa8
     e0c:	b.eq	e2c <ctf_name_table+0x2c>  // b.none
     e10:	cmp	w1, #0x8
     e14:	add	x0, x2, #0xb8
     e18:	b.eq	e2c <ctf_name_table+0x2c>  // b.none
     e1c:	add	x0, x2, #0x98
     e20:	cmp	w1, #0x6
     e24:	add	x2, x2, #0xc8
     e28:	csel	x0, x2, x0, ne  // ne = any
     e2c:	ret

0000000000000e30 <ctf_dtd_insert>:
     e30:	stp	x29, x30, [sp, #-48]!
     e34:	mov	x29, sp
     e38:	stp	x19, x20, [sp, #16]
     e3c:	mov	x20, x0
     e40:	mov	x19, x1
     e44:	ldr	x0, [x0, #568]
     e48:	str	x21, [sp, #32]
     e4c:	mov	w21, w2
     e50:	mov	x2, x1
     e54:	ldr	x1, [x1, #16]
     e58:	bl	0 <ctf_dynhash_insert>
     e5c:	tbnz	w0, #31, ee4 <ctf_dtd_insert+0xb4>
     e60:	ldr	w1, [x19, #24]
     e64:	cbz	w1, eb0 <ctf_dtd_insert+0x80>
     e68:	mov	x0, x20
     e6c:	bl	0 <ctf_strraw>
     e70:	mov	x1, x0
     e74:	cbz	x0, eb0 <ctf_dtd_insert+0x80>
     e78:	cmp	w21, #0x7
     e7c:	add	x0, x20, #0xa8
     e80:	b.eq	ea0 <ctf_dtd_insert+0x70>  // b.none
     e84:	cmp	w21, #0x8
     e88:	add	x0, x20, #0xb8
     e8c:	b.eq	ea0 <ctf_dtd_insert+0x70>  // b.none
     e90:	cmp	w21, #0x6
     e94:	add	x0, x20, #0x98
     e98:	add	x2, x20, #0xc8
     e9c:	csel	x0, x2, x0, ne  // ne = any
     ea0:	ldr	x0, [x0, #8]
     ea4:	ldr	x2, [x19, #16]
     ea8:	bl	0 <ctf_dynhash_insert>
     eac:	tbnz	w0, #31, ed0 <ctf_dtd_insert+0xa0>
     eb0:	add	x0, x20, #0x240
     eb4:	mov	x1, x19
     eb8:	bl	0 <ctf_list_append>
     ebc:	mov	w0, #0x0                   	// #0
     ec0:	ldp	x19, x20, [sp, #16]
     ec4:	ldr	x21, [sp, #32]
     ec8:	ldp	x29, x30, [sp], #48
     ecc:	ret
     ed0:	ldr	x1, [x19, #16]
     ed4:	ldr	x0, [x20, #568]
     ed8:	bl	0 <ctf_dynhash_remove>
     edc:	mov	w0, #0xffffffff            	// #-1
     ee0:	b	ec0 <ctf_dtd_insert+0x90>
     ee4:	mov	w0, #0xffffffff            	// #-1
     ee8:	b	ec0 <ctf_dtd_insert+0x90>
     eec:	nop

0000000000000ef0 <ctf_add_generic>:
     ef0:	cmp	w1, #0x1
     ef4:	b.hi	1050 <ctf_add_generic+0x160>  // b.pmore
     ef8:	stp	x29, x30, [sp, #-64]!
     efc:	mov	x29, sp
     f00:	ldr	w1, [x0, #552]
     f04:	stp	x19, x20, [sp, #16]
     f08:	mov	x19, x0
     f0c:	tbz	w1, #1, 1084 <ctf_add_generic+0x194>
     f10:	ldr	w0, [x0, #544]
     f14:	ldr	x1, [x19, #480]
     f18:	add	w0, w0, #0x1
     f1c:	stp	x21, x22, [sp, #32]
     f20:	mov	x21, x2
     f24:	orr	x0, x0, x1
     f28:	mov	w2, #0xfffffffd            	// #-3
     f2c:	cmp	x0, x2
     f30:	b.hi	1038 <ctf_add_generic+0x148>  // b.pmore
     f34:	mov	x2, #0x7ffffffe            	// #2147483646
     f38:	cmp	x0, x2
     f3c:	b.eq	1038 <ctf_add_generic+0x148>  // b.none
     f40:	ldp	x0, x2, [x19, #448]
     f44:	stp	x23, x24, [sp, #48]
     f48:	mov	w22, w3
     f4c:	mov	x23, x4
     f50:	cbz	x0, 1094 <ctf_add_generic+0x1a4>
     f54:	add	x1, x1, #0x2
     f58:	cmp	x2, x1
     f5c:	b.cs	fa4 <ctf_add_generic+0xb4>  // b.hs, b.nlast
     f60:	ucvtf	d0, x2
     f64:	fmov	d1, #1.250000000000000000e+00
     f68:	fmul	d0, d0, d1
     f6c:	fcvtzu	x20, d0
     f70:	cmp	x2, x20
     f74:	b.eq	fa4 <ctf_add_generic+0xb4>  // b.none
     f78:	lsl	x1, x20, #2
     f7c:	bl	0 <realloc>
     f80:	cbz	x0, 10ac <ctf_add_generic+0x1bc>
     f84:	ldr	x3, [x19, #456]
     f88:	str	x0, [x19, #448]
     f8c:	mov	w1, #0x0                   	// #0
     f90:	sub	x2, x20, x3
     f94:	add	x0, x0, x3, lsl #2
     f98:	lsl	x2, x2, #2
     f9c:	bl	0 <memset>
     fa0:	str	x20, [x19, #456]
     fa4:	mov	x1, #0x1                   	// #1
     fa8:	mov	x0, #0x48                  	// #72
     fac:	bl	0 <calloc>
     fb0:	mov	x20, x0
     fb4:	cbz	x0, 1068 <ctf_add_generic+0x178>
     fb8:	ldr	x24, [x19, #480]
     fbc:	ldr	w0, [x19, #552]
     fc0:	add	x24, x24, #0x1
     fc4:	str	x24, [x19, #480]
     fc8:	tbz	w0, #0, fd8 <ctf_add_generic+0xe8>
     fcc:	ldr	w0, [x19, #544]
     fd0:	add	w0, w0, #0x1
     fd4:	orr	x24, x24, x0
     fd8:	add	x2, x20, #0x18
     fdc:	mov	x1, x21
     fe0:	mov	x0, x19
     fe4:	bl	0 <ctf_str_add_ref>
     fe8:	str	x24, [x20, #16]
     fec:	cmp	x21, #0x0
     ff0:	str	w0, [x20, #24]
     ff4:	ccmp	w0, #0x0, #0x0, ne  // ne = any
     ff8:	b.eq	1058 <ctf_add_generic+0x168>  // b.none
     ffc:	mov	w2, w22
    1000:	mov	x1, x20
    1004:	mov	x0, x19
    1008:	bl	e30 <ctf_dtd_insert>
    100c:	tbnz	w0, #31, 109c <ctf_add_generic+0x1ac>
    1010:	ldr	w0, [x19, #552]
    1014:	orr	w0, w0, #0x4
    1018:	str	w0, [x19, #552]
    101c:	str	x20, [x23]
    1020:	mov	x0, x24
    1024:	ldp	x19, x20, [sp, #16]
    1028:	ldp	x21, x22, [sp, #32]
    102c:	ldp	x23, x24, [sp, #48]
    1030:	ldp	x29, x30, [sp], #64
    1034:	ret
    1038:	mov	x0, x19
    103c:	mov	w1, #0x40f                 	// #1039
    1040:	ldp	x19, x20, [sp, #16]
    1044:	ldp	x21, x22, [sp, #32]
    1048:	ldp	x29, x30, [sp], #64
    104c:	b	0 <ctf_set_errno>
    1050:	mov	w1, #0x16                  	// #22
    1054:	b	0 <ctf_set_errno>
    1058:	ldrb	w0, [x21]
    105c:	cbz	w0, ffc <ctf_add_generic+0x10c>
    1060:	mov	x0, x20
    1064:	bl	0 <free>
    1068:	mov	x0, x19
    106c:	mov	w1, #0xb                   	// #11
    1070:	ldp	x19, x20, [sp, #16]
    1074:	ldp	x21, x22, [sp, #32]
    1078:	ldp	x23, x24, [sp, #48]
    107c:	ldp	x29, x30, [sp], #64
    1080:	b	0 <ctf_set_errno>
    1084:	ldp	x19, x20, [sp, #16]
    1088:	mov	w1, #0x40d                 	// #1037
    108c:	ldp	x29, x30, [sp], #64
    1090:	b	0 <ctf_set_errno>
    1094:	mov	x20, #0x400                 	// #1024
    1098:	b	f70 <ctf_add_generic+0x80>
    109c:	mov	x0, x20
    10a0:	mov	x24, #0xffffffffffffffff    	// #-1
    10a4:	bl	0 <free>
    10a8:	b	1020 <ctf_add_generic+0x130>
    10ac:	mov	x0, x19
    10b0:	mov	w1, #0xc                   	// #12
    10b4:	bl	0 <ctf_set_errno>
    10b8:	tbz	w0, #31, fa4 <ctf_add_generic+0xb4>
    10bc:	mov	x24, #0xffffffffffffffff    	// #-1
    10c0:	b	1020 <ctf_add_generic+0x130>
    10c4:	nop

00000000000010c8 <ctf_add_encoded>:
    10c8:	cbz	x3, 12d0 <ctf_add_encoded+0x208>
    10cc:	stp	x29, x30, [sp, #-80]!
    10d0:	cmp	w1, #0x1
    10d4:	mov	x29, sp
    10d8:	stp	x19, x20, [sp, #16]
    10dc:	mov	x20, x3
    10e0:	stp	x21, x22, [sp, #32]
    10e4:	mov	w22, w1
    10e8:	stp	x23, x24, [sp, #48]
    10ec:	mov	w23, w4
    10f0:	b.hi	120c <ctf_add_encoded+0x144>  // b.pmore
    10f4:	ldr	w1, [x0, #552]
    10f8:	mov	x19, x0
    10fc:	tbz	w1, #1, 1280 <ctf_add_encoded+0x1b8>
    1100:	ldr	w5, [x19, #544]
    1104:	mov	w0, #0xfffffffd            	// #-3
    1108:	ldr	x1, [x19, #480]
    110c:	add	w5, w5, #0x1
    1110:	orr	x5, x5, x1
    1114:	cmp	x5, x0
    1118:	b.hi	12d8 <ctf_add_encoded+0x210>  // b.pmore
    111c:	mov	x0, #0x7ffffffe            	// #2147483646
    1120:	cmp	x5, x0
    1124:	b.eq	12d8 <ctf_add_encoded+0x210>  // b.none
    1128:	ldr	x0, [x19, #448]
    112c:	str	x25, [sp, #64]
    1130:	mov	x25, x2
    1134:	ldr	x2, [x19, #456]
    1138:	cbz	x0, 12ec <ctf_add_encoded+0x224>
    113c:	add	x1, x1, #0x2
    1140:	cmp	x2, x1
    1144:	b.cs	118c <ctf_add_encoded+0xc4>  // b.hs, b.nlast
    1148:	ucvtf	d0, x2
    114c:	fmov	d1, #1.250000000000000000e+00
    1150:	fmul	d0, d0, d1
    1154:	fcvtzu	x21, d0
    1158:	cmp	x2, x21
    115c:	b.eq	118c <ctf_add_encoded+0xc4>  // b.none
    1160:	lsl	x1, x21, #2
    1164:	bl	0 <realloc>
    1168:	cbz	x0, 12f4 <ctf_add_encoded+0x22c>
    116c:	ldr	x3, [x19, #456]
    1170:	str	x0, [x19, #448]
    1174:	mov	w1, #0x0                   	// #0
    1178:	sub	x2, x21, x3
    117c:	add	x0, x0, x3, lsl #2
    1180:	lsl	x2, x2, #2
    1184:	bl	0 <memset>
    1188:	str	x21, [x19, #456]
    118c:	mov	x1, #0x1                   	// #1
    1190:	mov	x0, #0x48                  	// #72
    1194:	bl	0 <calloc>
    1198:	mov	x21, x0
    119c:	cbz	x0, 12b8 <ctf_add_encoded+0x1f0>
    11a0:	ldr	x0, [x19, #480]
    11a4:	ldr	w1, [x19, #552]
    11a8:	add	x24, x0, #0x1
    11ac:	str	x24, [x19, #480]
    11b0:	tbz	w1, #0, 11c0 <ctf_add_encoded+0xf8>
    11b4:	ldr	w0, [x19, #544]
    11b8:	add	w0, w0, #0x1
    11bc:	orr	x24, x24, x0
    11c0:	add	x2, x21, #0x18
    11c4:	mov	x1, x25
    11c8:	mov	x0, x19
    11cc:	bl	0 <ctf_str_add_ref>
    11d0:	str	x24, [x21, #16]
    11d4:	cmp	x25, #0x0
    11d8:	str	w0, [x21, #24]
    11dc:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    11e0:	b.eq	12a8 <ctf_add_encoded+0x1e0>  // b.none
    11e4:	mov	w2, w23
    11e8:	mov	x1, x21
    11ec:	mov	x0, x19
    11f0:	bl	e30 <ctf_dtd_insert>
    11f4:	tbnz	w0, #31, 1310 <ctf_add_encoded+0x248>
    11f8:	ldr	w0, [x19, #552]
    11fc:	ldr	x25, [sp, #64]
    1200:	orr	w0, w0, #0x4
    1204:	str	w0, [x19, #552]
    1208:	b	128c <ctf_add_encoded+0x1c4>
    120c:	mov	w1, #0x16                  	// #22
    1210:	bl	0 <ctf_set_errno>
    1214:	lsl	w4, w23, #26
    1218:	mov	x24, x0
    121c:	orr	w4, w4, #0x2000000
    1220:	cmn	x0, #0x1
    1224:	b.eq	1308 <ctf_add_encoded+0x240>  // b.none
    1228:	ldr	w2, [x20, #8]
    122c:	ldr	x0, [x20]
    1230:	neg	w1, w2
    1234:	and	w1, w1, #0xfffffff8
    1238:	str	x0, [x21, #48]
    123c:	neg	w1, w1
    1240:	str	w2, [x21, #56]
    1244:	lsr	w1, w1, #3
    1248:	sub	x1, x1, #0x1
    124c:	orr	x1, x1, x1, lsr #1
    1250:	orr	x1, x1, x1, lsr #2
    1254:	orr	x1, x1, x1, lsr #4
    1258:	orr	x1, x1, x1, lsr #8
    125c:	orr	x1, x1, x1, lsr #16
    1260:	add	x1, x1, #0x1
    1264:	stp	w4, w1, [x21, #28]
    1268:	mov	x0, x24
    126c:	ldp	x19, x20, [sp, #16]
    1270:	ldp	x21, x22, [sp, #32]
    1274:	ldp	x23, x24, [sp, #48]
    1278:	ldp	x29, x30, [sp], #80
    127c:	ret
    1280:	mov	w1, #0x40d                 	// #1037
    1284:	bl	0 <ctf_set_errno>
    1288:	mov	x24, x0
    128c:	cmn	x24, #0x1
    1290:	b.eq	1308 <ctf_add_encoded+0x240>  // b.none
    1294:	lsl	w4, w23, #26
    1298:	cmp	w22, #0x0
    129c:	orr	w0, w4, #0x2000000
    12a0:	csel	w4, w0, w4, ne  // ne = any
    12a4:	b	1228 <ctf_add_encoded+0x160>
    12a8:	ldrb	w0, [x25]
    12ac:	cbz	w0, 11e4 <ctf_add_encoded+0x11c>
    12b0:	mov	x0, x21
    12b4:	bl	0 <free>
    12b8:	mov	x0, x19
    12bc:	mov	w1, #0xb                   	// #11
    12c0:	bl	0 <ctf_set_errno>
    12c4:	mov	x24, x0
    12c8:	ldr	x25, [sp, #64]
    12cc:	b	128c <ctf_add_encoded+0x1c4>
    12d0:	mov	w1, #0x16                  	// #22
    12d4:	b	0 <ctf_set_errno>
    12d8:	mov	x0, x19
    12dc:	mov	w1, #0x40f                 	// #1039
    12e0:	bl	0 <ctf_set_errno>
    12e4:	mov	x24, x0
    12e8:	b	128c <ctf_add_encoded+0x1c4>
    12ec:	mov	x21, #0x400                 	// #1024
    12f0:	b	1158 <ctf_add_encoded+0x90>
    12f4:	mov	x0, x19
    12f8:	mov	w1, #0xc                   	// #12
    12fc:	bl	0 <ctf_set_errno>
    1300:	tbz	w0, #31, 118c <ctf_add_encoded+0xc4>
    1304:	ldr	x25, [sp, #64]
    1308:	mov	x24, #0xffffffffffffffff    	// #-1
    130c:	b	1268 <ctf_add_encoded+0x1a0>
    1310:	mov	x0, x21
    1314:	mov	x24, #0xffffffffffffffff    	// #-1
    1318:	bl	0 <free>
    131c:	ldr	x25, [sp, #64]
    1320:	b	1268 <ctf_add_encoded+0x1a0>
    1324:	nop

0000000000001328 <ctf_dtd_delete>:
    1328:	stp	x29, x30, [sp, #-64]!
    132c:	mov	x29, sp
    1330:	stp	x19, x20, [sp, #16]
    1334:	mov	x20, x1
    1338:	ldr	x1, [x0]
    133c:	stp	x21, x22, [sp, #32]
    1340:	mov	x22, x0
    1344:	ldr	w0, [x20, #28]
    1348:	ldr	x1, [x1]
    134c:	str	x23, [sp, #48]
    1350:	blr	x1
    1354:	mov	w23, w0
    1358:	ldr	x1, [x20, #16]
    135c:	ldr	x0, [x22, #568]
    1360:	bl	0 <ctf_dynhash_remove>
    1364:	cmp	w23, #0x5
    1368:	b.eq	13f0 <ctf_dtd_delete+0xc8>  // b.none
    136c:	sub	w0, w23, #0x6
    1370:	cmp	w0, #0x2
    1374:	b.hi	13c4 <ctf_dtd_delete+0x9c>  // b.pmore
    1378:	ldr	x19, [x20, #56]
    137c:	cbz	x19, 13c4 <ctf_dtd_delete+0x9c>
    1380:	ldr	x1, [x19, #16]
    1384:	mov	x0, x19
    1388:	cbz	x1, 13b8 <ctf_dtd_delete+0x90>
    138c:	nop
    1390:	mov	x0, x1
    1394:	bl	0 <free>
    1398:	ldr	x21, [x19, #8]
    139c:	mov	x0, x19
    13a0:	bl	0 <free>
    13a4:	cbz	x21, 13c4 <ctf_dtd_delete+0x9c>
    13a8:	mov	x19, x21
    13ac:	mov	x0, x19
    13b0:	ldr	x1, [x19, #16]
    13b4:	cbnz	x1, 1390 <ctf_dtd_delete+0x68>
    13b8:	ldr	x21, [x19, #8]
    13bc:	bl	0 <free>
    13c0:	cbnz	x21, 13a8 <ctf_dtd_delete+0x80>
    13c4:	ldr	w1, [x20, #24]
    13c8:	cbnz	w1, 1400 <ctf_dtd_delete+0xd8>
    13cc:	add	x0, x22, #0x240
    13d0:	mov	x1, x20
    13d4:	bl	0 <ctf_list_delete>
    13d8:	mov	x0, x20
    13dc:	ldp	x19, x20, [sp, #16]
    13e0:	ldp	x21, x22, [sp, #32]
    13e4:	ldr	x23, [sp, #48]
    13e8:	ldp	x29, x30, [sp], #64
    13ec:	b	0 <free>
    13f0:	ldr	x0, [x20, #48]
    13f4:	bl	0 <free>
    13f8:	ldr	w1, [x20, #24]
    13fc:	cbz	w1, 13cc <ctf_dtd_delete+0xa4>
    1400:	mov	x0, x22
    1404:	bl	0 <ctf_strraw>
    1408:	mov	x19, x0
    140c:	cbz	x0, 13cc <ctf_dtd_delete+0xa4>
    1410:	cmp	w23, #0x7
    1414:	add	x0, x22, #0xa8
    1418:	b.eq	1438 <ctf_dtd_delete+0x110>  // b.none
    141c:	cmp	w23, #0x8
    1420:	add	x0, x22, #0xb8
    1424:	b.eq	1438 <ctf_dtd_delete+0x110>  // b.none
    1428:	cmp	w23, #0x6
    142c:	add	x0, x22, #0x98
    1430:	add	x1, x22, #0xc8
    1434:	csel	x0, x1, x0, ne  // ne = any
    1438:	ldr	x0, [x0, #8]
    143c:	mov	x1, x19
    1440:	bl	0 <ctf_dynhash_remove>
    1444:	mov	x1, x19
    1448:	add	x2, x20, #0x18
    144c:	mov	x0, x22
    1450:	bl	0 <ctf_str_remove_ref>
    1454:	b	13cc <ctf_dtd_delete+0xa4>

0000000000001458 <ctf_dtd_lookup>:
    1458:	ldr	x0, [x0, #568]
    145c:	b	0 <ctf_dynhash_lookup>

0000000000001460 <ctf_dynamic_type>:
    1460:	ldr	w3, [x0, #552]
    1464:	tbz	w3, #1, 1490 <ctf_dynamic_type+0x30>
    1468:	ldr	w2, [x0, #544]
    146c:	tbz	w3, #0, 1480 <ctf_dynamic_type+0x20>
    1470:	cmp	x1, x2
    1474:	b.hi	1480 <ctf_dynamic_type+0x20>  // b.pmore
    1478:	ldr	x0, [x0, #512]
    147c:	ldr	w2, [x0, #544]
    1480:	ldr	x3, [x0, #480]
    1484:	and	x2, x1, x2
    1488:	cmp	x3, x2
    148c:	b.cs	1498 <ctf_dynamic_type+0x38>  // b.hs, b.nlast
    1490:	mov	x0, #0x0                   	// #0
    1494:	ret
    1498:	ldr	x0, [x0, #568]
    149c:	b	0 <ctf_dynhash_lookup>

00000000000014a0 <ctf_dvd_insert>:
    14a0:	stp	x29, x30, [sp, #-32]!
    14a4:	mov	x2, x1
    14a8:	mov	x29, sp
    14ac:	stp	x19, x20, [sp, #16]
    14b0:	mov	x20, x0
    14b4:	mov	x19, x1
    14b8:	ldr	x1, [x1, #16]
    14bc:	ldr	x0, [x0, #592]
    14c0:	bl	0 <ctf_dynhash_insert>
    14c4:	tbnz	w0, #31, 14e4 <ctf_dvd_insert+0x44>
    14c8:	add	x0, x20, #0x258
    14cc:	mov	x1, x19
    14d0:	bl	0 <ctf_list_append>
    14d4:	mov	w0, #0x0                   	// #0
    14d8:	ldp	x19, x20, [sp, #16]
    14dc:	ldp	x29, x30, [sp], #32
    14e0:	ret
    14e4:	mov	w0, #0xffffffff            	// #-1
    14e8:	b	14d8 <ctf_dvd_insert+0x38>
    14ec:	nop

00000000000014f0 <ctf_dvd_delete>:
    14f0:	stp	x29, x30, [sp, #-32]!
    14f4:	mov	x29, sp
    14f8:	stp	x19, x20, [sp, #16]
    14fc:	mov	x19, x1
    1500:	mov	x20, x0
    1504:	ldr	x1, [x1, #16]
    1508:	ldr	x0, [x0, #592]
    150c:	bl	0 <ctf_dynhash_remove>
    1510:	ldr	x0, [x19, #16]
    1514:	bl	0 <free>
    1518:	mov	x1, x19
    151c:	add	x0, x20, #0x258
    1520:	bl	0 <ctf_list_delete>
    1524:	mov	x0, x19
    1528:	ldp	x19, x20, [sp, #16]
    152c:	ldp	x29, x30, [sp], #32
    1530:	b	0 <free>
    1534:	nop

0000000000001538 <ctf_dvd_lookup>:
    1538:	ldr	x0, [x0, #592]
    153c:	b	0 <ctf_dynhash_lookup>

0000000000001540 <ctf_snapshot>:
    1540:	mov	x2, x0
    1544:	ldr	x0, [x0, #480]
    1548:	ldr	x1, [x2, #624]
    154c:	add	x3, x1, #0x1
    1550:	str	x3, [x2, #624]
    1554:	ret

0000000000001558 <ctf_rollback>:
    1558:	stp	x29, x30, [sp, #-112]!
    155c:	mov	x29, sp
    1560:	stp	x23, x24, [sp, #48]
    1564:	mov	x23, x1
    1568:	ldr	w1, [x0, #552]
    156c:	tbz	w1, #1, 16f8 <ctf_rollback+0x1a0>
    1570:	ldr	x1, [x0, #632]
    1574:	stp	x19, x20, [sp, #16]
    1578:	mov	x19, x0
    157c:	stp	x21, x22, [sp, #32]
    1580:	cmp	x1, x2
    1584:	mov	x22, x2
    1588:	b.cs	170c <ctf_rollback+0x1b4>  // b.hs, b.nlast
    158c:	ldr	x21, [x0, #584]
    1590:	cbz	x21, 160c <ctf_rollback+0xb4>
    1594:	stp	x25, x26, [sp, #64]
    1598:	add	x26, x0, #0xb8
    159c:	add	x25, x0, #0x98
    15a0:	stp	x27, x28, [sp, #80]
    15a4:	add	x27, x0, #0xa8
    15a8:	add	x0, x0, #0xc8
    15ac:	str	x0, [sp, #104]
    15b0:	ldr	x1, [x21, #16]
    15b4:	mov	x20, x21
    15b8:	ldr	w0, [x19, #544]
    15bc:	ldr	x21, [x21, #8]
    15c0:	and	x0, x0, x1
    15c4:	cmp	x0, x23
    15c8:	b.ls	1600 <ctf_rollback+0xa8>  // b.plast
    15cc:	ldr	x1, [x19]
    15d0:	ldr	w0, [x20, #28]
    15d4:	ldr	x1, [x1]
    15d8:	blr	x1
    15dc:	mov	w28, w0
    15e0:	ldr	w1, [x20, #24]
    15e4:	cbnz	w1, 1684 <ctf_rollback+0x12c>
    15e8:	ldr	x1, [x20, #16]
    15ec:	ldr	x0, [x19, #568]
    15f0:	bl	0 <ctf_dynhash_remove>
    15f4:	mov	x1, x20
    15f8:	mov	x0, x19
    15fc:	bl	1328 <ctf_dtd_delete>
    1600:	cbnz	x21, 15b0 <ctf_rollback+0x58>
    1604:	ldp	x25, x26, [sp, #64]
    1608:	ldp	x27, x28, [sp, #80]
    160c:	ldr	x20, [x19, #608]
    1610:	cbz	x20, 1658 <ctf_rollback+0x100>
    1614:	add	x24, x19, #0x258
    1618:	mov	x21, x20
    161c:	ldr	x20, [x20, #8]
    1620:	ldr	x0, [x21, #32]
    1624:	cmp	x0, x22
    1628:	b.ls	1654 <ctf_rollback+0xfc>  // b.plast
    162c:	ldr	x1, [x21, #16]
    1630:	ldr	x0, [x19, #592]
    1634:	bl	0 <ctf_dynhash_remove>
    1638:	ldr	x0, [x21, #16]
    163c:	bl	0 <free>
    1640:	mov	x1, x21
    1644:	mov	x0, x24
    1648:	bl	0 <ctf_list_delete>
    164c:	mov	x0, x21
    1650:	bl	0 <free>
    1654:	cbnz	x20, 1618 <ctf_rollback+0xc0>
    1658:	ldr	x1, [x19, #632]
    165c:	str	x23, [x19, #480]
    1660:	str	x22, [x19, #624]
    1664:	mov	w0, #0x0                   	// #0
    1668:	cmp	x1, x22
    166c:	b.eq	16d8 <ctf_rollback+0x180>  // b.none
    1670:	ldp	x19, x20, [sp, #16]
    1674:	ldp	x21, x22, [sp, #32]
    1678:	ldp	x23, x24, [sp, #48]
    167c:	ldp	x29, x30, [sp], #112
    1680:	ret
    1684:	mov	x0, x19
    1688:	bl	0 <ctf_strraw>
    168c:	mov	x24, x0
    1690:	cbz	x0, 15e8 <ctf_rollback+0x90>
    1694:	mov	x1, x0
    1698:	cmp	w28, #0x7
    169c:	mov	x0, x27
    16a0:	b.eq	16bc <ctf_rollback+0x164>  // b.none
    16a4:	cmp	w28, #0x8
    16a8:	mov	x0, x26
    16ac:	b.eq	16bc <ctf_rollback+0x164>  // b.none
    16b0:	ldr	x0, [sp, #104]
    16b4:	cmp	w28, #0x6
    16b8:	csel	x0, x0, x25, ne  // ne = any
    16bc:	ldr	x0, [x0, #8]
    16c0:	bl	0 <ctf_dynhash_remove>
    16c4:	mov	x1, x24
    16c8:	add	x2, x20, #0x18
    16cc:	mov	x0, x19
    16d0:	bl	0 <ctf_str_remove_ref>
    16d4:	b	15e8 <ctf_rollback+0x90>
    16d8:	ldr	w1, [x19, #552]
    16dc:	ldp	x21, x22, [sp, #32]
    16e0:	and	w1, w1, #0xfffffffb
    16e4:	str	w1, [x19, #552]
    16e8:	ldp	x19, x20, [sp, #16]
    16ec:	ldp	x23, x24, [sp, #48]
    16f0:	ldp	x29, x30, [sp], #112
    16f4:	ret
    16f8:	mov	w1, #0x40d                 	// #1037
    16fc:	bl	0 <ctf_set_errno>
    1700:	ldp	x23, x24, [sp, #48]
    1704:	ldp	x29, x30, [sp], #112
    1708:	ret
    170c:	mov	w1, #0x412                 	// #1042
    1710:	bl	0 <ctf_set_errno>
    1714:	ldp	x19, x20, [sp, #16]
    1718:	ldp	x21, x22, [sp, #32]
    171c:	ldp	x23, x24, [sp, #48]
    1720:	ldp	x29, x30, [sp], #112
    1724:	ret

0000000000001728 <ctf_discard>:
    1728:	ldr	w3, [x0, #552]
    172c:	ldr	x2, [x0, #632]
    1730:	ldr	x1, [x0, #616]
    1734:	add	x2, x2, #0x1
    1738:	tbnz	w3, #2, 1744 <ctf_discard+0x1c>
    173c:	mov	w0, #0x0                   	// #0
    1740:	ret
    1744:	b	1558 <ctf_rollback>

0000000000001748 <ctf_add_slice>:
    1748:	stp	x29, x30, [sp, #-64]!
    174c:	mov	x29, sp
    1750:	stp	x19, x20, [sp, #16]
    1754:	mov	x20, x0
    1758:	str	x0, [sp, #56]
    175c:	cbz	x3, 186c <ctf_add_slice+0x124>
    1760:	ldr	w0, [x3, #8]
    1764:	mov	x19, x3
    1768:	cmp	w0, #0xff
    176c:	b.hi	1850 <ctf_add_slice+0x108>  // b.pmore
    1770:	ldr	w0, [x3, #4]
    1774:	cmp	w0, #0xff
    1778:	b.hi	1850 <ctf_add_slice+0x108>  // b.pmore
    177c:	stp	x21, x22, [sp, #32]
    1780:	mov	x0, #0xfffffffe            	// #4294967294
    1784:	mov	x21, x2
    1788:	cmp	x2, x0
    178c:	b.hi	1868 <ctf_add_slice+0x120>  // b.pmore
    1790:	mov	w22, w1
    1794:	add	x0, sp, #0x38
    1798:	mov	x1, x2
    179c:	bl	0 <ctf_lookup_by_id>
    17a0:	cbz	x0, 1894 <ctf_add_slice+0x14c>
    17a4:	ldr	x0, [sp, #56]
    17a8:	mov	x1, x21
    17ac:	bl	0 <ctf_type_kind_unsliced>
    17b0:	sub	w1, w0, #0x1
    17b4:	cmp	w1, #0x1
    17b8:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    17bc:	mov	x0, x20
    17c0:	b.ne	1884 <ctf_add_slice+0x13c>  // b.any
    17c4:	add	x4, sp, #0x30
    17c8:	mov	w1, w22
    17cc:	mov	w3, #0xe                   	// #14
    17d0:	mov	x2, #0x0                   	// #0
    17d4:	bl	ef0 <ctf_add_generic>
    17d8:	cmn	x0, #0x1
    17dc:	b.eq	1894 <ctf_add_slice+0x14c>  // b.none
    17e0:	ldr	w3, [x19, #8]
    17e4:	cmp	w22, #0x0
    17e8:	ldr	x2, [sp, #48]
    17ec:	neg	w1, w3
    17f0:	and	w1, w1, #0xfffffff8
    17f4:	mov	w4, #0x38000000            	// #939524096
    17f8:	neg	w1, w1
    17fc:	mov	w3, #0x3a000000            	// #973078528
    1800:	str	w21, [x2, #48]
    1804:	csel	w3, w3, w4, ne  // ne = any
    1808:	lsr	w1, w1, #3
    180c:	str	w3, [x2, #28]
    1810:	sub	x1, x1, #0x1
    1814:	ldr	w3, [x19, #8]
    1818:	ldp	x21, x22, [sp, #32]
    181c:	orr	x1, x1, x1, lsr #1
    1820:	strh	w3, [x2, #54]
    1824:	orr	x1, x1, x1, lsr #2
    1828:	ldr	w3, [x19, #4]
    182c:	orr	x1, x1, x1, lsr #4
    1830:	strh	w3, [x2, #52]
    1834:	ldp	x19, x20, [sp, #16]
    1838:	orr	x1, x1, x1, lsr #8
    183c:	orr	x1, x1, x1, lsr #16
    1840:	add	x1, x1, #0x1
    1844:	str	w1, [x2, #32]
    1848:	ldp	x29, x30, [sp], #64
    184c:	ret
    1850:	mov	x0, x20
    1854:	mov	w1, #0x416                 	// #1046
    1858:	bl	0 <ctf_set_errno>
    185c:	ldp	x19, x20, [sp, #16]
    1860:	ldp	x29, x30, [sp], #64
    1864:	ret
    1868:	ldp	x21, x22, [sp, #32]
    186c:	mov	x0, x20
    1870:	mov	w1, #0x16                  	// #22
    1874:	bl	0 <ctf_set_errno>
    1878:	ldp	x19, x20, [sp, #16]
    187c:	ldp	x29, x30, [sp], #64
    1880:	ret
    1884:	mov	w1, #0x3fe                 	// #1022
    1888:	bl	0 <ctf_set_errno>
    188c:	ldp	x21, x22, [sp, #32]
    1890:	b	185c <ctf_add_slice+0x114>
    1894:	mov	x0, #0xffffffffffffffff    	// #-1
    1898:	ldp	x21, x22, [sp, #32]
    189c:	b	185c <ctf_add_slice+0x114>

00000000000018a0 <ctf_add_integer>:
    18a0:	cbz	x3, 1a90 <ctf_add_integer+0x1f0>
    18a4:	stp	x29, x30, [sp, #-64]!
    18a8:	cmp	w1, #0x1
    18ac:	mov	x29, sp
    18b0:	stp	x19, x20, [sp, #16]
    18b4:	mov	x20, x3
    18b8:	stp	x21, x22, [sp, #32]
    18bc:	stp	x23, x24, [sp, #48]
    18c0:	mov	w23, w1
    18c4:	b.hi	19d4 <ctf_add_integer+0x134>  // b.pmore
    18c8:	ldr	w1, [x0, #552]
    18cc:	mov	x19, x0
    18d0:	tbz	w1, #1, 1a44 <ctf_add_integer+0x1a4>
    18d4:	ldr	w4, [x19, #544]
    18d8:	mov	w0, #0xfffffffd            	// #-3
    18dc:	ldr	x1, [x19, #480]
    18e0:	add	w4, w4, #0x1
    18e4:	orr	x4, x4, x1
    18e8:	cmp	x4, x0
    18ec:	b.hi	1a98 <ctf_add_integer+0x1f8>  // b.pmore
    18f0:	mov	x0, #0x7ffffffe            	// #2147483646
    18f4:	cmp	x4, x0
    18f8:	b.eq	1a98 <ctf_add_integer+0x1f8>  // b.none
    18fc:	mov	x24, x2
    1900:	ldp	x0, x2, [x19, #448]
    1904:	cbz	x0, 1aac <ctf_add_integer+0x20c>
    1908:	add	x1, x1, #0x2
    190c:	cmp	x2, x1
    1910:	b.cs	1958 <ctf_add_integer+0xb8>  // b.hs, b.nlast
    1914:	ucvtf	d0, x2
    1918:	fmov	d1, #1.250000000000000000e+00
    191c:	fmul	d0, d0, d1
    1920:	fcvtzu	x21, d0
    1924:	cmp	x2, x21
    1928:	b.eq	1958 <ctf_add_integer+0xb8>  // b.none
    192c:	lsl	x1, x21, #2
    1930:	bl	0 <realloc>
    1934:	cbz	x0, 1ab4 <ctf_add_integer+0x214>
    1938:	ldr	x3, [x19, #456]
    193c:	str	x0, [x19, #448]
    1940:	mov	w1, #0x0                   	// #0
    1944:	sub	x2, x21, x3
    1948:	add	x0, x0, x3, lsl #2
    194c:	lsl	x2, x2, #2
    1950:	bl	0 <memset>
    1954:	str	x21, [x19, #456]
    1958:	mov	x1, #0x1                   	// #1
    195c:	mov	x0, #0x48                  	// #72
    1960:	bl	0 <calloc>
    1964:	mov	x22, x0
    1968:	cbz	x0, 1a7c <ctf_add_integer+0x1dc>
    196c:	ldr	x0, [x19, #480]
    1970:	ldr	w1, [x19, #552]
    1974:	add	x21, x0, #0x1
    1978:	str	x21, [x19, #480]
    197c:	tbz	w1, #0, 198c <ctf_add_integer+0xec>
    1980:	ldr	w0, [x19, #544]
    1984:	add	w0, w0, #0x1
    1988:	orr	x21, x21, x0
    198c:	add	x2, x22, #0x18
    1990:	mov	x1, x24
    1994:	mov	x0, x19
    1998:	bl	0 <ctf_str_add_ref>
    199c:	str	x21, [x22, #16]
    19a0:	cmp	x24, #0x0
    19a4:	str	w0, [x22, #24]
    19a8:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    19ac:	b.eq	1a6c <ctf_add_integer+0x1cc>  // b.none
    19b0:	mov	x1, x22
    19b4:	mov	x0, x19
    19b8:	mov	w2, #0x1                   	// #1
    19bc:	bl	e30 <ctf_dtd_insert>
    19c0:	tbnz	w0, #31, 1ad0 <ctf_add_integer+0x230>
    19c4:	ldr	w0, [x19, #552]
    19c8:	orr	w0, w0, #0x4
    19cc:	str	w0, [x19, #552]
    19d0:	b	1a50 <ctf_add_integer+0x1b0>
    19d4:	mov	w1, #0x16                  	// #22
    19d8:	bl	0 <ctf_set_errno>
    19dc:	mov	w2, #0x6000000             	// #100663296
    19e0:	mov	x21, x0
    19e4:	cmn	x0, #0x1
    19e8:	b.eq	1ac8 <ctf_add_integer+0x228>  // b.none
    19ec:	ldr	w4, [x20, #8]
    19f0:	ldr	x0, [x20]
    19f4:	neg	w1, w4
    19f8:	and	w1, w1, #0xfffffff8
    19fc:	str	x0, [x22, #48]
    1a00:	neg	w1, w1
    1a04:	str	w4, [x22, #56]
    1a08:	lsr	w1, w1, #3
    1a0c:	sub	x1, x1, #0x1
    1a10:	orr	x1, x1, x1, lsr #1
    1a14:	orr	x1, x1, x1, lsr #2
    1a18:	orr	x1, x1, x1, lsr #4
    1a1c:	orr	x1, x1, x1, lsr #8
    1a20:	orr	x1, x1, x1, lsr #16
    1a24:	add	x1, x1, #0x1
    1a28:	stp	w2, w1, [x22, #28]
    1a2c:	mov	x0, x21
    1a30:	ldp	x19, x20, [sp, #16]
    1a34:	ldp	x21, x22, [sp, #32]
    1a38:	ldp	x23, x24, [sp, #48]
    1a3c:	ldp	x29, x30, [sp], #64
    1a40:	ret
    1a44:	mov	w1, #0x40d                 	// #1037
    1a48:	bl	0 <ctf_set_errno>
    1a4c:	mov	x21, x0
    1a50:	cmn	x21, #0x1
    1a54:	b.eq	1ac8 <ctf_add_integer+0x228>  // b.none
    1a58:	cmp	w23, #0x0
    1a5c:	mov	w2, #0x6000000             	// #100663296
    1a60:	mov	w0, #0x4000000             	// #67108864
    1a64:	csel	w2, w2, w0, ne  // ne = any
    1a68:	b	19ec <ctf_add_integer+0x14c>
    1a6c:	ldrb	w0, [x24]
    1a70:	cbz	w0, 19b0 <ctf_add_integer+0x110>
    1a74:	mov	x0, x22
    1a78:	bl	0 <free>
    1a7c:	mov	x0, x19
    1a80:	mov	w1, #0xb                   	// #11
    1a84:	bl	0 <ctf_set_errno>
    1a88:	mov	x21, x0
    1a8c:	b	1a50 <ctf_add_integer+0x1b0>
    1a90:	mov	w1, #0x16                  	// #22
    1a94:	b	0 <ctf_set_errno>
    1a98:	mov	x0, x19
    1a9c:	mov	w1, #0x40f                 	// #1039
    1aa0:	bl	0 <ctf_set_errno>
    1aa4:	mov	x21, x0
    1aa8:	b	1a50 <ctf_add_integer+0x1b0>
    1aac:	mov	x21, #0x400                 	// #1024
    1ab0:	b	1924 <ctf_add_integer+0x84>
    1ab4:	mov	x0, x19
    1ab8:	mov	w1, #0xc                   	// #12
    1abc:	bl	0 <ctf_set_errno>
    1ac0:	tbz	w0, #31, 1958 <ctf_add_integer+0xb8>
    1ac4:	nop
    1ac8:	mov	x21, #0xffffffffffffffff    	// #-1
    1acc:	b	1a2c <ctf_add_integer+0x18c>
    1ad0:	mov	x0, x22
    1ad4:	mov	x21, #0xffffffffffffffff    	// #-1
    1ad8:	bl	0 <free>
    1adc:	b	1a2c <ctf_add_integer+0x18c>

0000000000001ae0 <ctf_add_float>:
    1ae0:	cbz	x3, 1cd0 <ctf_add_float+0x1f0>
    1ae4:	stp	x29, x30, [sp, #-64]!
    1ae8:	cmp	w1, #0x1
    1aec:	mov	x29, sp
    1af0:	stp	x19, x20, [sp, #16]
    1af4:	mov	x20, x3
    1af8:	stp	x21, x22, [sp, #32]
    1afc:	stp	x23, x24, [sp, #48]
    1b00:	mov	w23, w1
    1b04:	b.hi	1c14 <ctf_add_float+0x134>  // b.pmore
    1b08:	ldr	w1, [x0, #552]
    1b0c:	mov	x19, x0
    1b10:	tbz	w1, #1, 1c84 <ctf_add_float+0x1a4>
    1b14:	ldr	w4, [x19, #544]
    1b18:	mov	w0, #0xfffffffd            	// #-3
    1b1c:	ldr	x1, [x19, #480]
    1b20:	add	w4, w4, #0x1
    1b24:	orr	x4, x4, x1
    1b28:	cmp	x4, x0
    1b2c:	b.hi	1cd8 <ctf_add_float+0x1f8>  // b.pmore
    1b30:	mov	x0, #0x7ffffffe            	// #2147483646
    1b34:	cmp	x4, x0
    1b38:	b.eq	1cd8 <ctf_add_float+0x1f8>  // b.none
    1b3c:	mov	x24, x2
    1b40:	ldp	x0, x2, [x19, #448]
    1b44:	cbz	x0, 1cec <ctf_add_float+0x20c>
    1b48:	add	x1, x1, #0x2
    1b4c:	cmp	x2, x1
    1b50:	b.cs	1b98 <ctf_add_float+0xb8>  // b.hs, b.nlast
    1b54:	ucvtf	d0, x2
    1b58:	fmov	d1, #1.250000000000000000e+00
    1b5c:	fmul	d0, d0, d1
    1b60:	fcvtzu	x21, d0
    1b64:	cmp	x2, x21
    1b68:	b.eq	1b98 <ctf_add_float+0xb8>  // b.none
    1b6c:	lsl	x1, x21, #2
    1b70:	bl	0 <realloc>
    1b74:	cbz	x0, 1cf4 <ctf_add_float+0x214>
    1b78:	ldr	x3, [x19, #456]
    1b7c:	str	x0, [x19, #448]
    1b80:	mov	w1, #0x0                   	// #0
    1b84:	sub	x2, x21, x3
    1b88:	add	x0, x0, x3, lsl #2
    1b8c:	lsl	x2, x2, #2
    1b90:	bl	0 <memset>
    1b94:	str	x21, [x19, #456]
    1b98:	mov	x1, #0x1                   	// #1
    1b9c:	mov	x0, #0x48                  	// #72
    1ba0:	bl	0 <calloc>
    1ba4:	mov	x22, x0
    1ba8:	cbz	x0, 1cbc <ctf_add_float+0x1dc>
    1bac:	ldr	x0, [x19, #480]
    1bb0:	ldr	w1, [x19, #552]
    1bb4:	add	x21, x0, #0x1
    1bb8:	str	x21, [x19, #480]
    1bbc:	tbz	w1, #0, 1bcc <ctf_add_float+0xec>
    1bc0:	ldr	w0, [x19, #544]
    1bc4:	add	w0, w0, #0x1
    1bc8:	orr	x21, x21, x0
    1bcc:	add	x2, x22, #0x18
    1bd0:	mov	x1, x24
    1bd4:	mov	x0, x19
    1bd8:	bl	0 <ctf_str_add_ref>
    1bdc:	str	x21, [x22, #16]
    1be0:	cmp	x24, #0x0
    1be4:	str	w0, [x22, #24]
    1be8:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    1bec:	b.eq	1cac <ctf_add_float+0x1cc>  // b.none
    1bf0:	mov	x1, x22
    1bf4:	mov	x0, x19
    1bf8:	mov	w2, #0x2                   	// #2
    1bfc:	bl	e30 <ctf_dtd_insert>
    1c00:	tbnz	w0, #31, 1d10 <ctf_add_float+0x230>
    1c04:	ldr	w0, [x19, #552]
    1c08:	orr	w0, w0, #0x4
    1c0c:	str	w0, [x19, #552]
    1c10:	b	1c90 <ctf_add_float+0x1b0>
    1c14:	mov	w1, #0x16                  	// #22
    1c18:	bl	0 <ctf_set_errno>
    1c1c:	mov	w2, #0xa000000             	// #167772160
    1c20:	mov	x21, x0
    1c24:	cmn	x0, #0x1
    1c28:	b.eq	1d08 <ctf_add_float+0x228>  // b.none
    1c2c:	ldr	w4, [x20, #8]
    1c30:	ldr	x0, [x20]
    1c34:	neg	w1, w4
    1c38:	and	w1, w1, #0xfffffff8
    1c3c:	str	x0, [x22, #48]
    1c40:	neg	w1, w1
    1c44:	str	w4, [x22, #56]
    1c48:	lsr	w1, w1, #3
    1c4c:	sub	x1, x1, #0x1
    1c50:	orr	x1, x1, x1, lsr #1
    1c54:	orr	x1, x1, x1, lsr #2
    1c58:	orr	x1, x1, x1, lsr #4
    1c5c:	orr	x1, x1, x1, lsr #8
    1c60:	orr	x1, x1, x1, lsr #16
    1c64:	add	x1, x1, #0x1
    1c68:	stp	w2, w1, [x22, #28]
    1c6c:	mov	x0, x21
    1c70:	ldp	x19, x20, [sp, #16]
    1c74:	ldp	x21, x22, [sp, #32]
    1c78:	ldp	x23, x24, [sp, #48]
    1c7c:	ldp	x29, x30, [sp], #64
    1c80:	ret
    1c84:	mov	w1, #0x40d                 	// #1037
    1c88:	bl	0 <ctf_set_errno>
    1c8c:	mov	x21, x0
    1c90:	cmn	x21, #0x1
    1c94:	b.eq	1d08 <ctf_add_float+0x228>  // b.none
    1c98:	cmp	w23, #0x0
    1c9c:	mov	w2, #0xa000000             	// #167772160
    1ca0:	mov	w0, #0x8000000             	// #134217728
    1ca4:	csel	w2, w2, w0, ne  // ne = any
    1ca8:	b	1c2c <ctf_add_float+0x14c>
    1cac:	ldrb	w0, [x24]
    1cb0:	cbz	w0, 1bf0 <ctf_add_float+0x110>
    1cb4:	mov	x0, x22
    1cb8:	bl	0 <free>
    1cbc:	mov	x0, x19
    1cc0:	mov	w1, #0xb                   	// #11
    1cc4:	bl	0 <ctf_set_errno>
    1cc8:	mov	x21, x0
    1ccc:	b	1c90 <ctf_add_float+0x1b0>
    1cd0:	mov	w1, #0x16                  	// #22
    1cd4:	b	0 <ctf_set_errno>
    1cd8:	mov	x0, x19
    1cdc:	mov	w1, #0x40f                 	// #1039
    1ce0:	bl	0 <ctf_set_errno>
    1ce4:	mov	x21, x0
    1ce8:	b	1c90 <ctf_add_float+0x1b0>
    1cec:	mov	x21, #0x400                 	// #1024
    1cf0:	b	1b64 <ctf_add_float+0x84>
    1cf4:	mov	x0, x19
    1cf8:	mov	w1, #0xc                   	// #12
    1cfc:	bl	0 <ctf_set_errno>
    1d00:	tbz	w0, #31, 1b98 <ctf_add_float+0xb8>
    1d04:	nop
    1d08:	mov	x21, #0xffffffffffffffff    	// #-1
    1d0c:	b	1c6c <ctf_add_float+0x18c>
    1d10:	mov	x0, x22
    1d14:	mov	x21, #0xffffffffffffffff    	// #-1
    1d18:	bl	0 <free>
    1d1c:	b	1c6c <ctf_add_float+0x18c>

0000000000001d20 <ctf_add_pointer>:
    1d20:	stp	x29, x30, [sp, #-80]!
    1d24:	mov	x29, sp
    1d28:	stp	x19, x20, [sp, #16]
    1d2c:	mov	x20, x2
    1d30:	mov	x2, #0xfffffffe            	// #4294967294
    1d34:	stp	x21, x22, [sp, #32]
    1d38:	cmp	x20, x2
    1d3c:	str	x0, [sp, #72]
    1d40:	b.hi	1eb0 <ctf_add_pointer+0x190>  // b.pmore
    1d44:	mov	x19, x0
    1d48:	add	x0, sp, #0x48
    1d4c:	stp	x23, x24, [sp, #48]
    1d50:	mov	w23, w1
    1d54:	mov	x1, x20
    1d58:	ldr	w24, [x19, #552]
    1d5c:	bl	0 <ctf_lookup_by_id>
    1d60:	cbz	x0, 1f8c <ctf_add_pointer+0x26c>
    1d64:	cmp	w23, #0x1
    1d68:	b.hi	1f48 <ctf_add_pointer+0x228>  // b.pmore
    1d6c:	ldr	w0, [x19, #552]
    1d70:	tbz	w0, #1, 1fa8 <ctf_add_pointer+0x288>
    1d74:	ldr	w0, [x19, #544]
    1d78:	mov	w2, #0xfffffffd            	// #-3
    1d7c:	ldr	x1, [x19, #480]
    1d80:	add	w0, w0, #0x1
    1d84:	orr	x0, x0, x1
    1d88:	cmp	x0, x2
    1d8c:	b.hi	1f68 <ctf_add_pointer+0x248>  // b.pmore
    1d90:	mov	x2, #0x7ffffffe            	// #2147483646
    1d94:	cmp	x0, x2
    1d98:	b.eq	1f68 <ctf_add_pointer+0x248>  // b.none
    1d9c:	ldp	x0, x2, [x19, #448]
    1da0:	cbz	x0, 1fbc <ctf_add_pointer+0x29c>
    1da4:	add	x1, x1, #0x2
    1da8:	cmp	x2, x1
    1dac:	b.cs	1df4 <ctf_add_pointer+0xd4>  // b.hs, b.nlast
    1db0:	ucvtf	d0, x2
    1db4:	fmov	d1, #1.250000000000000000e+00
    1db8:	fmul	d0, d0, d1
    1dbc:	fcvtzu	x21, d0
    1dc0:	cmp	x2, x21
    1dc4:	b.eq	1df4 <ctf_add_pointer+0xd4>  // b.none
    1dc8:	lsl	x1, x21, #2
    1dcc:	bl	0 <realloc>
    1dd0:	cbz	x0, 1f7c <ctf_add_pointer+0x25c>
    1dd4:	ldr	x3, [x19, #456]
    1dd8:	str	x0, [x19, #448]
    1ddc:	mov	w1, #0x0                   	// #0
    1de0:	sub	x2, x21, x3
    1de4:	add	x0, x0, x3, lsl #2
    1de8:	lsl	x2, x2, #2
    1dec:	bl	0 <memset>
    1df0:	str	x21, [x19, #456]
    1df4:	mov	x1, #0x1                   	// #1
    1df8:	mov	x0, #0x48                  	// #72
    1dfc:	bl	0 <calloc>
    1e00:	mov	x22, x0
    1e04:	cbz	x0, 1fd8 <ctf_add_pointer+0x2b8>
    1e08:	ldr	x0, [x19, #480]
    1e0c:	ldr	w1, [x19, #552]
    1e10:	add	x21, x0, #0x1
    1e14:	str	x21, [x19, #480]
    1e18:	tbz	w1, #0, 1e28 <ctf_add_pointer+0x108>
    1e1c:	ldr	w0, [x19, #544]
    1e20:	add	w0, w0, #0x1
    1e24:	orr	x21, x21, x0
    1e28:	add	x2, x22, #0x18
    1e2c:	mov	x1, #0x0                   	// #0
    1e30:	mov	x0, x19
    1e34:	bl	0 <ctf_str_add_ref>
    1e38:	mov	w3, w0
    1e3c:	mov	x1, x22
    1e40:	mov	x0, x19
    1e44:	mov	w2, #0x3                   	// #3
    1e48:	str	x21, [x22, #16]
    1e4c:	str	w3, [x22, #24]
    1e50:	bl	e30 <ctf_dtd_insert>
    1e54:	tbnz	w0, #31, 1fc4 <ctf_add_pointer+0x2a4>
    1e58:	ldr	w0, [x19, #552]
    1e5c:	orr	w0, w0, #0x4
    1e60:	str	w0, [x19, #552]
    1e64:	cmn	x21, #0x1
    1e68:	b.eq	1f8c <ctf_add_pointer+0x26c>  // b.none
    1e6c:	cmp	w23, #0x0
    1e70:	mov	w1, #0xe000000             	// #234881024
    1e74:	mov	w0, #0xc000000             	// #201326592
    1e78:	csel	w1, w1, w0, ne  // ne = any
    1e7c:	ldr	w2, [x19, #544]
    1e80:	and	w0, w24, #0x1
    1e84:	stp	w1, w20, [x22, #28]
    1e88:	cmp	x20, w2, uxtw
    1e8c:	cset	w1, hi  // hi = pmore
    1e90:	cmp	w0, w1
    1e94:	b.eq	1ed0 <ctf_add_pointer+0x1b0>  // b.none
    1e98:	mov	x0, x21
    1e9c:	ldp	x19, x20, [sp, #16]
    1ea0:	ldp	x21, x22, [sp, #32]
    1ea4:	ldp	x23, x24, [sp, #48]
    1ea8:	ldp	x29, x30, [sp], #80
    1eac:	ret
    1eb0:	mov	w1, #0x16                  	// #22
    1eb4:	bl	0 <ctf_set_errno>
    1eb8:	mov	x21, x0
    1ebc:	mov	x0, x21
    1ec0:	ldp	x19, x20, [sp, #16]
    1ec4:	ldp	x21, x22, [sp, #32]
    1ec8:	ldp	x29, x30, [sp], #80
    1ecc:	ret
    1ed0:	ldr	x0, [x19, #480]
    1ed4:	and	w20, w2, w20
    1ed8:	cmp	x20, x0
    1edc:	b.cs	1e98 <ctf_add_pointer+0x178>  // b.hs, b.nlast
    1ee0:	ldr	x1, [x19, #448]
    1ee4:	and	w23, w2, w21
    1ee8:	ldr	x0, [sp, #72]
    1eec:	str	w23, [x1, x20, lsl #2]
    1ef0:	cmp	x19, x0
    1ef4:	b.ne	1e98 <ctf_add_pointer+0x178>  // b.any
    1ef8:	ldr	x1, [x19]
    1efc:	ldp	w0, w20, [x22, #28]
    1f00:	ldr	x1, [x1]
    1f04:	ldr	w24, [x19, #544]
    1f08:	blr	x1
    1f0c:	cmp	w0, #0xa
    1f10:	b.ne	1e98 <ctf_add_pointer+0x178>  // b.any
    1f14:	ldr	w1, [x22, #24]
    1f18:	mov	x0, x19
    1f1c:	bl	0 <ctf_strptr>
    1f20:	ldrb	w0, [x0]
    1f24:	cbnz	w0, 1e98 <ctf_add_pointer+0x178>
    1f28:	ldr	x0, [x19, #480]
    1f2c:	and	w20, w20, w24
    1f30:	cmp	x20, x0
    1f34:	b.cs	1e98 <ctf_add_pointer+0x178>  // b.hs, b.nlast
    1f38:	ldr	x0, [x19, #448]
    1f3c:	str	w23, [x0, x20, lsl #2]
    1f40:	ldp	x23, x24, [sp, #48]
    1f44:	b	1ebc <ctf_add_pointer+0x19c>
    1f48:	mov	x0, x19
    1f4c:	mov	w1, #0x16                  	// #22
    1f50:	bl	0 <ctf_set_errno>
    1f54:	mov	x21, x0
    1f58:	cmn	x0, #0x1
    1f5c:	b.eq	1f8c <ctf_add_pointer+0x26c>  // b.none
    1f60:	mov	w1, #0xe000000             	// #234881024
    1f64:	b	1e7c <ctf_add_pointer+0x15c>
    1f68:	mov	x0, x19
    1f6c:	mov	w1, #0x40f                 	// #1039
    1f70:	bl	0 <ctf_set_errno>
    1f74:	mov	x21, x0
    1f78:	b	1e64 <ctf_add_pointer+0x144>
    1f7c:	mov	x0, x19
    1f80:	mov	w1, #0xc                   	// #12
    1f84:	bl	0 <ctf_set_errno>
    1f88:	tbz	w0, #31, 1df4 <ctf_add_pointer+0xd4>
    1f8c:	mov	x21, #0xffffffffffffffff    	// #-1
    1f90:	mov	x0, x21
    1f94:	ldp	x19, x20, [sp, #16]
    1f98:	ldp	x21, x22, [sp, #32]
    1f9c:	ldp	x23, x24, [sp, #48]
    1fa0:	ldp	x29, x30, [sp], #80
    1fa4:	ret
    1fa8:	mov	x0, x19
    1fac:	mov	w1, #0x40d                 	// #1037
    1fb0:	bl	0 <ctf_set_errno>
    1fb4:	mov	x21, x0
    1fb8:	b	1e64 <ctf_add_pointer+0x144>
    1fbc:	mov	x21, #0x400                 	// #1024
    1fc0:	b	1dc0 <ctf_add_pointer+0xa0>
    1fc4:	mov	x0, x22
    1fc8:	mov	x21, #0xffffffffffffffff    	// #-1
    1fcc:	bl	0 <free>
    1fd0:	ldp	x23, x24, [sp, #48]
    1fd4:	b	1ebc <ctf_add_pointer+0x19c>
    1fd8:	mov	x0, x19
    1fdc:	mov	w1, #0xb                   	// #11
    1fe0:	bl	0 <ctf_set_errno>
    1fe4:	mov	x21, x0
    1fe8:	b	1e64 <ctf_add_pointer+0x144>
    1fec:	nop

0000000000001ff0 <ctf_add_array>:
    1ff0:	stp	x29, x30, [sp, #-64]!
    1ff4:	mov	x29, sp
    1ff8:	str	x0, [sp, #48]
    1ffc:	cbz	x2, 20b0 <ctf_add_array+0xc0>
    2000:	str	x21, [sp, #32]
    2004:	mov	w21, w1
    2008:	ldr	x1, [x2]
    200c:	stp	x19, x20, [sp, #16]
    2010:	mov	x20, x0
    2014:	mov	x19, x2
    2018:	add	x0, sp, #0x30
    201c:	bl	0 <ctf_lookup_by_id>
    2020:	cbz	x0, 2090 <ctf_add_array+0xa0>
    2024:	ldr	x1, [x19, #8]
    2028:	add	x0, sp, #0x30
    202c:	str	x20, [sp, #48]
    2030:	bl	0 <ctf_lookup_by_id>
    2034:	cbz	x0, 2090 <ctf_add_array+0xa0>
    2038:	mov	x0, x20
    203c:	add	x4, sp, #0x38
    2040:	mov	w1, w21
    2044:	mov	w3, #0x4                   	// #4
    2048:	mov	x2, #0x0                   	// #0
    204c:	bl	ef0 <ctf_add_generic>
    2050:	cmn	x0, #0x1
    2054:	b.eq	20a4 <ctf_add_array+0xb4>  // b.none
    2058:	ldr	x1, [sp, #56]
    205c:	cmp	w21, #0x0
    2060:	ldp	x4, x5, [x19]
    2064:	mov	w3, #0x10000000            	// #268435456
    2068:	ldr	x21, [sp, #32]
    206c:	stp	x4, x5, [x1, #48]
    2070:	mov	w2, #0x12000000            	// #301989888
    2074:	csel	w2, w2, w3, ne  // ne = any
    2078:	ldr	x3, [x19, #16]
    207c:	ldp	x19, x20, [sp, #16]
    2080:	stp	w2, wzr, [x1, #28]
    2084:	str	x3, [x1, #64]
    2088:	ldp	x29, x30, [sp], #64
    208c:	ret
    2090:	mov	x0, #0xffffffffffffffff    	// #-1
    2094:	ldp	x19, x20, [sp, #16]
    2098:	ldr	x21, [sp, #32]
    209c:	ldp	x29, x30, [sp], #64
    20a0:	ret
    20a4:	ldp	x19, x20, [sp, #16]
    20a8:	ldr	x21, [sp, #32]
    20ac:	b	2088 <ctf_add_array+0x98>
    20b0:	mov	w1, #0x16                  	// #22
    20b4:	bl	0 <ctf_set_errno>
    20b8:	ldp	x29, x30, [sp], #64
    20bc:	ret

00000000000020c0 <ctf_set_array>:
    20c0:	stp	x29, x30, [sp, #-48]!
    20c4:	mov	x29, sp
    20c8:	stp	x19, x20, [sp, #16]
    20cc:	mov	x19, x0
    20d0:	ldr	x0, [x0, #568]
    20d4:	str	x21, [sp, #32]
    20d8:	mov	x21, x2
    20dc:	bl	0 <ctf_dynhash_lookup>
    20e0:	ldr	w1, [x19, #552]
    20e4:	tbz	w1, #1, 2154 <ctf_set_array+0x94>
    20e8:	mov	x20, x0
    20ec:	cbz	x0, 2108 <ctf_set_array+0x48>
    20f0:	ldr	x1, [x19]
    20f4:	ldr	w0, [x0, #28]
    20f8:	ldr	x1, [x1]
    20fc:	blr	x1
    2100:	cmp	w0, #0x4
    2104:	b.eq	2124 <ctf_set_array+0x64>  // b.none
    2108:	mov	x0, x19
    210c:	mov	w1, #0x3fa                 	// #1018
    2110:	bl	0 <ctf_set_errno>
    2114:	ldp	x19, x20, [sp, #16]
    2118:	ldr	x21, [sp, #32]
    211c:	ldp	x29, x30, [sp], #48
    2120:	ret
    2124:	ldr	w1, [x19, #552]
    2128:	mov	w0, #0x0                   	// #0
    212c:	ldp	x2, x3, [x21]
    2130:	orr	w1, w1, #0x4
    2134:	str	w1, [x19, #552]
    2138:	stp	x2, x3, [x20, #48]
    213c:	ldr	x1, [x21, #16]
    2140:	str	x1, [x20, #64]
    2144:	ldp	x19, x20, [sp, #16]
    2148:	ldr	x21, [sp, #32]
    214c:	ldp	x29, x30, [sp], #48
    2150:	ret
    2154:	mov	x0, x19
    2158:	mov	w1, #0x40d                 	// #1037
    215c:	bl	0 <ctf_set_errno>
    2160:	ldp	x19, x20, [sp, #16]
    2164:	ldr	x21, [sp, #32]
    2168:	ldp	x29, x30, [sp], #48
    216c:	ret

0000000000002170 <ctf_add_function>:
    2170:	stp	x29, x30, [sp, #-96]!
    2174:	mov	x29, sp
    2178:	stp	x19, x20, [sp, #16]
    217c:	stp	x21, x22, [sp, #32]
    2180:	mov	x21, x0
    2184:	str	x0, [sp, #88]
    2188:	cbz	x2, 2224 <ctf_add_function+0xb4>
    218c:	ldr	w0, [x2, #12]
    2190:	mov	x20, x2
    2194:	tst	w0, #0xfffffffe
    2198:	b.ne	2224 <ctf_add_function+0xb4>  // b.any
    219c:	stp	x23, x24, [sp, #48]
    21a0:	mov	x22, x3
    21a4:	ldr	w24, [x2, #8]
    21a8:	cmp	w24, #0x0
    21ac:	ccmp	x3, #0x0, #0x0, ne  // ne = any
    21b0:	b.eq	2220 <ctf_add_function+0xb0>  // b.none
    21b4:	mov	w23, w1
    21b8:	cmp	w0, #0x0
    21bc:	ldr	x1, [x2]
    21c0:	cinc	w24, w24, ne  // ne = any
    21c4:	add	x0, sp, #0x58
    21c8:	bl	0 <ctf_lookup_by_id>
    21cc:	cbz	x0, 2204 <ctf_add_function+0x94>
    21d0:	ldr	w0, [x20, #8]
    21d4:	cbz	w0, 2248 <ctf_add_function+0xd8>
    21d8:	mov	x19, #0x0                   	// #0
    21dc:	b	21ec <ctf_add_function+0x7c>
    21e0:	ldr	w0, [x20, #8]
    21e4:	cmp	x0, x19
    21e8:	b.ls	2248 <ctf_add_function+0xd8>  // b.plast
    21ec:	ldr	x1, [x22, x19, lsl #3]
    21f0:	add	x0, sp, #0x58
    21f4:	add	x19, x19, #0x1
    21f8:	str	x21, [sp, #88]
    21fc:	bl	0 <ctf_lookup_by_id>
    2200:	cbnz	x0, 21e0 <ctf_add_function+0x70>
    2204:	ldp	x23, x24, [sp, #48]
    2208:	mov	x19, #0xffffffffffffffff    	// #-1
    220c:	mov	x0, x19
    2210:	ldp	x19, x20, [sp, #16]
    2214:	ldp	x21, x22, [sp, #32]
    2218:	ldp	x29, x30, [sp], #96
    221c:	ret
    2220:	ldp	x23, x24, [sp, #48]
    2224:	mov	x0, x21
    2228:	mov	w1, #0x16                  	// #22
    222c:	bl	0 <ctf_set_errno>
    2230:	mov	x19, x0
    2234:	mov	x0, x19
    2238:	ldp	x19, x20, [sp, #16]
    223c:	ldp	x21, x22, [sp, #32]
    2240:	ldp	x29, x30, [sp], #96
    2244:	ret
    2248:	mov	w0, #0xffffff              	// #16777215
    224c:	cmp	w24, w0
    2250:	b.hi	22f4 <ctf_add_function+0x184>  // b.pmore
    2254:	str	x25, [sp, #64]
    2258:	cbz	w24, 230c <ctf_add_function+0x19c>
    225c:	ubfiz	x0, x24, #3, #32
    2260:	bl	0 <malloc>
    2264:	mov	x25, x0
    2268:	cbz	x0, 2328 <ctf_add_function+0x1b8>
    226c:	mov	x0, x21
    2270:	add	x4, sp, #0x50
    2274:	mov	w1, w23
    2278:	mov	w3, #0x5                   	// #5
    227c:	mov	x2, #0x0                   	// #0
    2280:	bl	ef0 <ctf_add_generic>
    2284:	mov	x19, x0
    2288:	cmn	x0, #0x1
    228c:	b.eq	2314 <ctf_add_function+0x1a4>  // b.none
    2290:	ldr	x21, [sp, #80]
    2294:	cmp	w23, #0x0
    2298:	mov	w0, #0x14000000            	// #335544320
    229c:	ldr	w2, [x20, #8]
    22a0:	mov	w1, #0x16000000            	// #369098752
    22a4:	csel	w1, w1, w0, ne  // ne = any
    22a8:	ldr	x0, [x20]
    22ac:	orr	w1, w24, w1
    22b0:	stp	w1, w0, [x21, #28]
    22b4:	lsl	x2, x2, #3
    22b8:	mov	x1, x22
    22bc:	mov	x0, x25
    22c0:	bl	0 <memcpy>
    22c4:	ldr	w0, [x20, #12]
    22c8:	tbz	w0, #0, 22d4 <ctf_add_function+0x164>
    22cc:	sub	w24, w24, #0x1
    22d0:	str	xzr, [x25, x24, lsl #3]
    22d4:	ldp	x23, x24, [sp, #48]
    22d8:	str	x25, [x21, #48]
    22dc:	mov	x0, x19
    22e0:	ldp	x19, x20, [sp, #16]
    22e4:	ldp	x21, x22, [sp, #32]
    22e8:	ldr	x25, [sp, #64]
    22ec:	ldp	x29, x30, [sp], #96
    22f0:	ret
    22f4:	mov	x0, x21
    22f8:	mov	w1, #0x4b                  	// #75
    22fc:	bl	0 <ctf_set_errno>
    2300:	mov	x19, x0
    2304:	ldp	x23, x24, [sp, #48]
    2308:	b	220c <ctf_add_function+0x9c>
    230c:	mov	x25, #0x0                   	// #0
    2310:	b	226c <ctf_add_function+0xfc>
    2314:	mov	x0, x25
    2318:	bl	0 <free>
    231c:	ldp	x23, x24, [sp, #48]
    2320:	ldr	x25, [sp, #64]
    2324:	b	220c <ctf_add_function+0x9c>
    2328:	mov	x0, x21
    232c:	mov	w1, #0xb                   	// #11
    2330:	bl	0 <ctf_set_errno>
    2334:	mov	x19, x0
    2338:	ldp	x23, x24, [sp, #48]
    233c:	ldr	x25, [sp, #64]
    2340:	b	220c <ctf_add_function+0x9c>
    2344:	nop

0000000000002348 <ctf_add_struct_sized>:
    2348:	stp	x29, x30, [sp, #-64]!
    234c:	mov	x29, sp
    2350:	stp	x19, x20, [sp, #16]
    2354:	mov	x19, x0
    2358:	stp	x21, x22, [sp, #32]
    235c:	mov	x21, x3
    2360:	mov	x22, x2
    2364:	stp	x23, x24, [sp, #48]
    2368:	mov	w23, w1
    236c:	cbz	x2, 2380 <ctf_add_struct_sized+0x38>
    2370:	mov	w1, #0x6                   	// #6
    2374:	bl	0 <ctf_lookup_by_rawname>
    2378:	mov	x20, x0
    237c:	cbnz	x0, 24ec <ctf_add_struct_sized+0x1a4>
    2380:	cmp	w23, #0x1
    2384:	b.hi	2544 <ctf_add_struct_sized+0x1fc>  // b.pmore
    2388:	ldr	w0, [x19, #552]
    238c:	tbz	w0, #1, 25c8 <ctf_add_struct_sized+0x280>
    2390:	ldr	w4, [x19, #544]
    2394:	mov	w0, #0xfffffffd            	// #-3
    2398:	ldr	x1, [x19, #480]
    239c:	add	w4, w4, #0x1
    23a0:	orr	x4, x4, x1
    23a4:	cmp	x4, x0
    23a8:	b.hi	2514 <ctf_add_struct_sized+0x1cc>  // b.pmore
    23ac:	mov	x0, #0x7ffffffe            	// #2147483646
    23b0:	cmp	x4, x0
    23b4:	b.eq	2514 <ctf_add_struct_sized+0x1cc>  // b.none
    23b8:	ldp	x0, x2, [x19, #448]
    23bc:	cbz	x0, 25dc <ctf_add_struct_sized+0x294>
    23c0:	add	x1, x1, #0x2
    23c4:	cmp	x2, x1
    23c8:	b.cs	2410 <ctf_add_struct_sized+0xc8>  // b.hs, b.nlast
    23cc:	ucvtf	d0, x2
    23d0:	fmov	d1, #1.250000000000000000e+00
    23d4:	fmul	d0, d0, d1
    23d8:	fcvtzu	x20, d0
    23dc:	cmp	x2, x20
    23e0:	b.eq	2410 <ctf_add_struct_sized+0xc8>  // b.none
    23e4:	lsl	x1, x20, #2
    23e8:	bl	0 <realloc>
    23ec:	cbz	x0, 25e4 <ctf_add_struct_sized+0x29c>
    23f0:	ldr	x3, [x19, #456]
    23f4:	str	x0, [x19, #448]
    23f8:	mov	w1, #0x0                   	// #0
    23fc:	sub	x2, x20, x3
    2400:	add	x0, x0, x3, lsl #2
    2404:	lsl	x2, x2, #2
    2408:	bl	0 <memset>
    240c:	str	x20, [x19, #456]
    2410:	mov	x1, #0x1                   	// #1
    2414:	mov	x0, #0x48                  	// #72
    2418:	bl	0 <calloc>
    241c:	mov	x24, x0
    2420:	cbz	x0, 2578 <ctf_add_struct_sized+0x230>
    2424:	ldr	x0, [x19, #480]
    2428:	ldr	w1, [x19, #552]
    242c:	add	x20, x0, #0x1
    2430:	str	x20, [x19, #480]
    2434:	tbz	w1, #0, 2444 <ctf_add_struct_sized+0xfc>
    2438:	ldr	w0, [x19, #544]
    243c:	add	w0, w0, #0x1
    2440:	orr	x20, x20, x0
    2444:	add	x2, x24, #0x18
    2448:	mov	x1, x22
    244c:	mov	x0, x19
    2450:	bl	0 <ctf_str_add_ref>
    2454:	str	x20, [x24, #16]
    2458:	cmp	x22, #0x0
    245c:	str	w0, [x24, #24]
    2460:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    2464:	b.eq	2568 <ctf_add_struct_sized+0x220>  // b.none
    2468:	ldr	x0, [x19, #568]
    246c:	mov	x2, x24
    2470:	mov	x1, x20
    2474:	bl	0 <ctf_dynhash_insert>
    2478:	tbnz	w0, #31, 25b8 <ctf_add_struct_sized+0x270>
    247c:	ldr	w1, [x24, #24]
    2480:	cbnz	w1, 258c <ctf_add_struct_sized+0x244>
    2484:	add	x0, x19, #0x240
    2488:	mov	x1, x24
    248c:	bl	0 <ctf_list_append>
    2490:	ldr	w0, [x19, #552]
    2494:	orr	w0, w0, #0x4
    2498:	str	w0, [x19, #552]
    249c:	cmn	x20, #0x1
    24a0:	b.eq	2560 <ctf_add_struct_sized+0x218>  // b.none
    24a4:	cmp	w23, #0x0
    24a8:	mov	w1, #0x1a000000            	// #436207616
    24ac:	mov	w0, #0x18000000            	// #402653184
    24b0:	csel	w1, w1, w0, ne  // ne = any
    24b4:	str	w1, [x24, #28]
    24b8:	mov	x1, #0xfffffffe            	// #4294967294
    24bc:	cmp	x21, x1
    24c0:	b.ls	2528 <ctf_add_struct_sized+0x1e0>  // b.plast
    24c4:	lsr	x0, x21, #32
    24c8:	mov	w1, #0xffffffff            	// #-1
    24cc:	stp	w1, w0, [x24, #32]
    24d0:	str	w21, [x24, #40]
    24d4:	mov	x0, x20
    24d8:	ldp	x19, x20, [sp, #16]
    24dc:	ldp	x21, x22, [sp, #32]
    24e0:	ldp	x23, x24, [sp, #48]
    24e4:	ldp	x29, x30, [sp], #64
    24e8:	ret
    24ec:	mov	x1, x0
    24f0:	mov	x0, x19
    24f4:	bl	0 <ctf_type_kind>
    24f8:	cmp	w0, #0x9
    24fc:	b.ne	2380 <ctf_add_struct_sized+0x38>  // b.any
    2500:	ldr	x0, [x19, #568]
    2504:	mov	x1, x20
    2508:	bl	0 <ctf_dynhash_lookup>
    250c:	mov	x24, x0
    2510:	b	24a4 <ctf_add_struct_sized+0x15c>
    2514:	mov	x0, x19
    2518:	mov	w1, #0x40f                 	// #1039
    251c:	bl	0 <ctf_set_errno>
    2520:	mov	x20, x0
    2524:	b	249c <ctf_add_struct_sized+0x154>
    2528:	str	w21, [x24, #32]
    252c:	mov	x0, x20
    2530:	ldp	x19, x20, [sp, #16]
    2534:	ldp	x21, x22, [sp, #32]
    2538:	ldp	x23, x24, [sp, #48]
    253c:	ldp	x29, x30, [sp], #64
    2540:	ret
    2544:	mov	w1, #0x16                  	// #22
    2548:	mov	x0, x19
    254c:	bl	0 <ctf_set_errno>
    2550:	mov	x20, x0
    2554:	cmn	x0, #0x1
    2558:	mov	w1, #0x1a000000            	// #436207616
    255c:	b.ne	24b4 <ctf_add_struct_sized+0x16c>  // b.any
    2560:	mov	x20, #0xffffffffffffffff    	// #-1
    2564:	b	24d4 <ctf_add_struct_sized+0x18c>
    2568:	ldrb	w0, [x22]
    256c:	cbz	w0, 2468 <ctf_add_struct_sized+0x120>
    2570:	mov	x0, x24
    2574:	bl	0 <free>
    2578:	mov	x0, x19
    257c:	mov	w1, #0xb                   	// #11
    2580:	bl	0 <ctf_set_errno>
    2584:	mov	x20, x0
    2588:	b	249c <ctf_add_struct_sized+0x154>
    258c:	mov	x0, x19
    2590:	bl	0 <ctf_strraw>
    2594:	mov	x1, x0
    2598:	cbz	x0, 2484 <ctf_add_struct_sized+0x13c>
    259c:	ldr	x2, [x24, #16]
    25a0:	ldr	x0, [x19, #160]
    25a4:	bl	0 <ctf_dynhash_insert>
    25a8:	tbz	w0, #31, 2484 <ctf_add_struct_sized+0x13c>
    25ac:	ldr	x1, [x24, #16]
    25b0:	ldr	x0, [x19, #568]
    25b4:	bl	0 <ctf_dynhash_remove>
    25b8:	mov	x0, x24
    25bc:	mov	x20, #0xffffffffffffffff    	// #-1
    25c0:	bl	0 <free>
    25c4:	b	24d4 <ctf_add_struct_sized+0x18c>
    25c8:	mov	x0, x19
    25cc:	mov	w1, #0x40d                 	// #1037
    25d0:	bl	0 <ctf_set_errno>
    25d4:	mov	x20, x0
    25d8:	b	249c <ctf_add_struct_sized+0x154>
    25dc:	mov	x20, #0x400                 	// #1024
    25e0:	b	23dc <ctf_add_struct_sized+0x94>
    25e4:	mov	x0, x19
    25e8:	mov	w1, #0xc                   	// #12
    25ec:	bl	0 <ctf_set_errno>
    25f0:	tbz	w0, #31, 2410 <ctf_add_struct_sized+0xc8>
    25f4:	mov	x20, #0xffffffffffffffff    	// #-1
    25f8:	b	24d4 <ctf_add_struct_sized+0x18c>
    25fc:	nop

0000000000002600 <ctf_add_struct>:
    2600:	stp	x29, x30, [sp, #-64]!
    2604:	mov	x29, sp
    2608:	stp	x19, x20, [sp, #16]
    260c:	mov	x19, x0
    2610:	stp	x21, x22, [sp, #32]
    2614:	mov	w22, w1
    2618:	str	x23, [sp, #48]
    261c:	mov	x23, x2
    2620:	cbz	x2, 2634 <ctf_add_struct+0x34>
    2624:	mov	w1, #0x6                   	// #6
    2628:	bl	0 <ctf_lookup_by_rawname>
    262c:	mov	x20, x0
    2630:	cbnz	x0, 2784 <ctf_add_struct+0x184>
    2634:	cmp	w22, #0x1
    2638:	b.hi	27c0 <ctf_add_struct+0x1c0>  // b.pmore
    263c:	ldr	w0, [x19, #552]
    2640:	tbz	w0, #1, 2844 <ctf_add_struct+0x244>
    2644:	ldr	w0, [x19, #544]
    2648:	mov	w2, #0xfffffffd            	// #-3
    264c:	ldr	x1, [x19, #480]
    2650:	add	w0, w0, #0x1
    2654:	orr	x0, x0, x1
    2658:	cmp	x0, x2
    265c:	b.hi	27ac <ctf_add_struct+0x1ac>  // b.pmore
    2660:	mov	x2, #0x7ffffffe            	// #2147483646
    2664:	cmp	x0, x2
    2668:	b.eq	27ac <ctf_add_struct+0x1ac>  // b.none
    266c:	ldp	x0, x2, [x19, #448]
    2670:	cbz	x0, 2858 <ctf_add_struct+0x258>
    2674:	add	x1, x1, #0x2
    2678:	cmp	x2, x1
    267c:	b.cs	26c4 <ctf_add_struct+0xc4>  // b.hs, b.nlast
    2680:	ucvtf	d0, x2
    2684:	fmov	d1, #1.250000000000000000e+00
    2688:	fmul	d0, d0, d1
    268c:	fcvtzu	x20, d0
    2690:	cmp	x2, x20
    2694:	b.eq	26c4 <ctf_add_struct+0xc4>  // b.none
    2698:	lsl	x1, x20, #2
    269c:	bl	0 <realloc>
    26a0:	cbz	x0, 2860 <ctf_add_struct+0x260>
    26a4:	ldr	x3, [x19, #456]
    26a8:	str	x0, [x19, #448]
    26ac:	mov	w1, #0x0                   	// #0
    26b0:	sub	x2, x20, x3
    26b4:	add	x0, x0, x3, lsl #2
    26b8:	lsl	x2, x2, #2
    26bc:	bl	0 <memset>
    26c0:	str	x20, [x19, #456]
    26c4:	mov	x1, #0x1                   	// #1
    26c8:	mov	x0, #0x48                  	// #72
    26cc:	bl	0 <calloc>
    26d0:	mov	x21, x0
    26d4:	cbz	x0, 27f4 <ctf_add_struct+0x1f4>
    26d8:	ldr	x20, [x19, #480]
    26dc:	ldr	w0, [x19, #552]
    26e0:	add	x20, x20, #0x1
    26e4:	str	x20, [x19, #480]
    26e8:	tbz	w0, #0, 26f8 <ctf_add_struct+0xf8>
    26ec:	ldr	w0, [x19, #544]
    26f0:	add	w0, w0, #0x1
    26f4:	orr	x20, x20, x0
    26f8:	add	x2, x21, #0x18
    26fc:	mov	x1, x23
    2700:	mov	x0, x19
    2704:	bl	0 <ctf_str_add_ref>
    2708:	str	x20, [x21, #16]
    270c:	cmp	w0, #0x0
    2710:	str	w0, [x21, #24]
    2714:	ccmp	x23, #0x0, #0x4, eq  // eq = none
    2718:	b.ne	27e4 <ctf_add_struct+0x1e4>  // b.any
    271c:	ldr	x0, [x19, #568]
    2720:	mov	x2, x21
    2724:	mov	x1, x20
    2728:	bl	0 <ctf_dynhash_insert>
    272c:	tbnz	w0, #31, 2834 <ctf_add_struct+0x234>
    2730:	ldr	w1, [x21, #24]
    2734:	cbnz	w1, 2808 <ctf_add_struct+0x208>
    2738:	add	x0, x19, #0x240
    273c:	mov	x1, x21
    2740:	bl	0 <ctf_list_append>
    2744:	ldr	w0, [x19, #552]
    2748:	orr	w0, w0, #0x4
    274c:	str	w0, [x19, #552]
    2750:	cmn	x20, #0x1
    2754:	b.eq	27dc <ctf_add_struct+0x1dc>  // b.none
    2758:	cmp	w22, #0x0
    275c:	mov	w0, #0x1a000000            	// #436207616
    2760:	mov	w1, #0x18000000            	// #402653184
    2764:	csel	w0, w0, w1, ne  // ne = any
    2768:	stp	w0, wzr, [x21, #28]
    276c:	mov	x0, x20
    2770:	ldp	x19, x20, [sp, #16]
    2774:	ldp	x21, x22, [sp, #32]
    2778:	ldr	x23, [sp, #48]
    277c:	ldp	x29, x30, [sp], #64
    2780:	ret
    2784:	mov	x1, x0
    2788:	mov	x0, x19
    278c:	bl	0 <ctf_type_kind>
    2790:	cmp	w0, #0x9
    2794:	b.ne	2634 <ctf_add_struct+0x34>  // b.any
    2798:	ldr	x0, [x19, #568]
    279c:	mov	x1, x20
    27a0:	bl	0 <ctf_dynhash_lookup>
    27a4:	mov	x21, x0
    27a8:	b	2758 <ctf_add_struct+0x158>
    27ac:	mov	x0, x19
    27b0:	mov	w1, #0x40f                 	// #1039
    27b4:	bl	0 <ctf_set_errno>
    27b8:	mov	x20, x0
    27bc:	b	2750 <ctf_add_struct+0x150>
    27c0:	mov	x0, x19
    27c4:	mov	w1, #0x16                  	// #22
    27c8:	bl	0 <ctf_set_errno>
    27cc:	mov	x20, x0
    27d0:	cmn	x20, #0x1
    27d4:	mov	w0, #0x1a000000            	// #436207616
    27d8:	b.ne	2768 <ctf_add_struct+0x168>  // b.any
    27dc:	mov	x20, #0xffffffffffffffff    	// #-1
    27e0:	b	276c <ctf_add_struct+0x16c>
    27e4:	ldrb	w0, [x23]
    27e8:	cbz	w0, 271c <ctf_add_struct+0x11c>
    27ec:	mov	x0, x21
    27f0:	bl	0 <free>
    27f4:	mov	x0, x19
    27f8:	mov	w1, #0xb                   	// #11
    27fc:	bl	0 <ctf_set_errno>
    2800:	mov	x20, x0
    2804:	b	2750 <ctf_add_struct+0x150>
    2808:	mov	x0, x19
    280c:	bl	0 <ctf_strraw>
    2810:	mov	x1, x0
    2814:	cbz	x0, 2738 <ctf_add_struct+0x138>
    2818:	ldr	x2, [x21, #16]
    281c:	ldr	x0, [x19, #160]
    2820:	bl	0 <ctf_dynhash_insert>
    2824:	tbz	w0, #31, 2738 <ctf_add_struct+0x138>
    2828:	ldr	x1, [x21, #16]
    282c:	ldr	x0, [x19, #568]
    2830:	bl	0 <ctf_dynhash_remove>
    2834:	mov	x0, x21
    2838:	mov	x20, #0xffffffffffffffff    	// #-1
    283c:	bl	0 <free>
    2840:	b	276c <ctf_add_struct+0x16c>
    2844:	mov	x0, x19
    2848:	mov	w1, #0x40d                 	// #1037
    284c:	bl	0 <ctf_set_errno>
    2850:	mov	x20, x0
    2854:	b	2750 <ctf_add_struct+0x150>
    2858:	mov	x20, #0x400                 	// #1024
    285c:	b	2690 <ctf_add_struct+0x90>
    2860:	mov	x0, x19
    2864:	mov	w1, #0xc                   	// #12
    2868:	bl	0 <ctf_set_errno>
    286c:	tbz	w0, #31, 26c4 <ctf_add_struct+0xc4>
    2870:	mov	x20, #0xffffffffffffffff    	// #-1
    2874:	b	276c <ctf_add_struct+0x16c>

0000000000002878 <ctf_add_union_sized>:
    2878:	stp	x29, x30, [sp, #-64]!
    287c:	mov	x29, sp
    2880:	stp	x19, x20, [sp, #16]
    2884:	mov	x19, x0
    2888:	stp	x21, x22, [sp, #32]
    288c:	mov	x21, x3
    2890:	mov	x22, x2
    2894:	stp	x23, x24, [sp, #48]
    2898:	mov	w23, w1
    289c:	cbz	x2, 28b0 <ctf_add_union_sized+0x38>
    28a0:	mov	w1, #0x7                   	// #7
    28a4:	bl	0 <ctf_lookup_by_rawname>
    28a8:	mov	x20, x0
    28ac:	cbnz	x0, 2a1c <ctf_add_union_sized+0x1a4>
    28b0:	cmp	w23, #0x1
    28b4:	b.hi	2a74 <ctf_add_union_sized+0x1fc>  // b.pmore
    28b8:	ldr	w0, [x19, #552]
    28bc:	tbz	w0, #1, 2af8 <ctf_add_union_sized+0x280>
    28c0:	ldr	w4, [x19, #544]
    28c4:	mov	w0, #0xfffffffd            	// #-3
    28c8:	ldr	x1, [x19, #480]
    28cc:	add	w4, w4, #0x1
    28d0:	orr	x4, x4, x1
    28d4:	cmp	x4, x0
    28d8:	b.hi	2a44 <ctf_add_union_sized+0x1cc>  // b.pmore
    28dc:	mov	x0, #0x7ffffffe            	// #2147483646
    28e0:	cmp	x4, x0
    28e4:	b.eq	2a44 <ctf_add_union_sized+0x1cc>  // b.none
    28e8:	ldp	x0, x2, [x19, #448]
    28ec:	cbz	x0, 2b0c <ctf_add_union_sized+0x294>
    28f0:	add	x1, x1, #0x2
    28f4:	cmp	x2, x1
    28f8:	b.cs	2940 <ctf_add_union_sized+0xc8>  // b.hs, b.nlast
    28fc:	ucvtf	d0, x2
    2900:	fmov	d1, #1.250000000000000000e+00
    2904:	fmul	d0, d0, d1
    2908:	fcvtzu	x20, d0
    290c:	cmp	x2, x20
    2910:	b.eq	2940 <ctf_add_union_sized+0xc8>  // b.none
    2914:	lsl	x1, x20, #2
    2918:	bl	0 <realloc>
    291c:	cbz	x0, 2b14 <ctf_add_union_sized+0x29c>
    2920:	ldr	x3, [x19, #456]
    2924:	str	x0, [x19, #448]
    2928:	mov	w1, #0x0                   	// #0
    292c:	sub	x2, x20, x3
    2930:	add	x0, x0, x3, lsl #2
    2934:	lsl	x2, x2, #2
    2938:	bl	0 <memset>
    293c:	str	x20, [x19, #456]
    2940:	mov	x1, #0x1                   	// #1
    2944:	mov	x0, #0x48                  	// #72
    2948:	bl	0 <calloc>
    294c:	mov	x24, x0
    2950:	cbz	x0, 2aa8 <ctf_add_union_sized+0x230>
    2954:	ldr	x0, [x19, #480]
    2958:	ldr	w1, [x19, #552]
    295c:	add	x20, x0, #0x1
    2960:	str	x20, [x19, #480]
    2964:	tbz	w1, #0, 2974 <ctf_add_union_sized+0xfc>
    2968:	ldr	w0, [x19, #544]
    296c:	add	w0, w0, #0x1
    2970:	orr	x20, x20, x0
    2974:	add	x2, x24, #0x18
    2978:	mov	x1, x22
    297c:	mov	x0, x19
    2980:	bl	0 <ctf_str_add_ref>
    2984:	str	x20, [x24, #16]
    2988:	cmp	x22, #0x0
    298c:	str	w0, [x24, #24]
    2990:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    2994:	b.eq	2a98 <ctf_add_union_sized+0x220>  // b.none
    2998:	ldr	x0, [x19, #568]
    299c:	mov	x2, x24
    29a0:	mov	x1, x20
    29a4:	bl	0 <ctf_dynhash_insert>
    29a8:	tbnz	w0, #31, 2ae8 <ctf_add_union_sized+0x270>
    29ac:	ldr	w1, [x24, #24]
    29b0:	cbnz	w1, 2abc <ctf_add_union_sized+0x244>
    29b4:	add	x0, x19, #0x240
    29b8:	mov	x1, x24
    29bc:	bl	0 <ctf_list_append>
    29c0:	ldr	w0, [x19, #552]
    29c4:	orr	w0, w0, #0x4
    29c8:	str	w0, [x19, #552]
    29cc:	cmn	x20, #0x1
    29d0:	b.eq	2a90 <ctf_add_union_sized+0x218>  // b.none
    29d4:	cmp	w23, #0x0
    29d8:	mov	w1, #0x1e000000            	// #503316480
    29dc:	mov	w0, #0x1c000000            	// #469762048
    29e0:	csel	w1, w1, w0, ne  // ne = any
    29e4:	str	w1, [x24, #28]
    29e8:	mov	x1, #0xfffffffe            	// #4294967294
    29ec:	cmp	x21, x1
    29f0:	b.ls	2a58 <ctf_add_union_sized+0x1e0>  // b.plast
    29f4:	lsr	x0, x21, #32
    29f8:	mov	w1, #0xffffffff            	// #-1
    29fc:	stp	w1, w0, [x24, #32]
    2a00:	str	w21, [x24, #40]
    2a04:	mov	x0, x20
    2a08:	ldp	x19, x20, [sp, #16]
    2a0c:	ldp	x21, x22, [sp, #32]
    2a10:	ldp	x23, x24, [sp, #48]
    2a14:	ldp	x29, x30, [sp], #64
    2a18:	ret
    2a1c:	mov	x1, x0
    2a20:	mov	x0, x19
    2a24:	bl	0 <ctf_type_kind>
    2a28:	cmp	w0, #0x9
    2a2c:	b.ne	28b0 <ctf_add_union_sized+0x38>  // b.any
    2a30:	ldr	x0, [x19, #568]
    2a34:	mov	x1, x20
    2a38:	bl	0 <ctf_dynhash_lookup>
    2a3c:	mov	x24, x0
    2a40:	b	29d4 <ctf_add_union_sized+0x15c>
    2a44:	mov	x0, x19
    2a48:	mov	w1, #0x40f                 	// #1039
    2a4c:	bl	0 <ctf_set_errno>
    2a50:	mov	x20, x0
    2a54:	b	29cc <ctf_add_union_sized+0x154>
    2a58:	str	w21, [x24, #32]
    2a5c:	mov	x0, x20
    2a60:	ldp	x19, x20, [sp, #16]
    2a64:	ldp	x21, x22, [sp, #32]
    2a68:	ldp	x23, x24, [sp, #48]
    2a6c:	ldp	x29, x30, [sp], #64
    2a70:	ret
    2a74:	mov	w1, #0x16                  	// #22
    2a78:	mov	x0, x19
    2a7c:	bl	0 <ctf_set_errno>
    2a80:	mov	x20, x0
    2a84:	cmn	x0, #0x1
    2a88:	mov	w1, #0x1e000000            	// #503316480
    2a8c:	b.ne	29e4 <ctf_add_union_sized+0x16c>  // b.any
    2a90:	mov	x20, #0xffffffffffffffff    	// #-1
    2a94:	b	2a04 <ctf_add_union_sized+0x18c>
    2a98:	ldrb	w0, [x22]
    2a9c:	cbz	w0, 2998 <ctf_add_union_sized+0x120>
    2aa0:	mov	x0, x24
    2aa4:	bl	0 <free>
    2aa8:	mov	x0, x19
    2aac:	mov	w1, #0xb                   	// #11
    2ab0:	bl	0 <ctf_set_errno>
    2ab4:	mov	x20, x0
    2ab8:	b	29cc <ctf_add_union_sized+0x154>
    2abc:	mov	x0, x19
    2ac0:	bl	0 <ctf_strraw>
    2ac4:	mov	x1, x0
    2ac8:	cbz	x0, 29b4 <ctf_add_union_sized+0x13c>
    2acc:	ldr	x2, [x24, #16]
    2ad0:	ldr	x0, [x19, #176]
    2ad4:	bl	0 <ctf_dynhash_insert>
    2ad8:	tbz	w0, #31, 29b4 <ctf_add_union_sized+0x13c>
    2adc:	ldr	x1, [x24, #16]
    2ae0:	ldr	x0, [x19, #568]
    2ae4:	bl	0 <ctf_dynhash_remove>
    2ae8:	mov	x0, x24
    2aec:	mov	x20, #0xffffffffffffffff    	// #-1
    2af0:	bl	0 <free>
    2af4:	b	2a04 <ctf_add_union_sized+0x18c>
    2af8:	mov	x0, x19
    2afc:	mov	w1, #0x40d                 	// #1037
    2b00:	bl	0 <ctf_set_errno>
    2b04:	mov	x20, x0
    2b08:	b	29cc <ctf_add_union_sized+0x154>
    2b0c:	mov	x20, #0x400                 	// #1024
    2b10:	b	290c <ctf_add_union_sized+0x94>
    2b14:	mov	x0, x19
    2b18:	mov	w1, #0xc                   	// #12
    2b1c:	bl	0 <ctf_set_errno>
    2b20:	tbz	w0, #31, 2940 <ctf_add_union_sized+0xc8>
    2b24:	mov	x20, #0xffffffffffffffff    	// #-1
    2b28:	b	2a04 <ctf_add_union_sized+0x18c>
    2b2c:	nop

0000000000002b30 <ctf_add_union>:
    2b30:	stp	x29, x30, [sp, #-64]!
    2b34:	mov	x29, sp
    2b38:	stp	x19, x20, [sp, #16]
    2b3c:	mov	x19, x0
    2b40:	stp	x21, x22, [sp, #32]
    2b44:	mov	w22, w1
    2b48:	str	x23, [sp, #48]
    2b4c:	mov	x23, x2
    2b50:	cbz	x2, 2b64 <ctf_add_union+0x34>
    2b54:	mov	w1, #0x7                   	// #7
    2b58:	bl	0 <ctf_lookup_by_rawname>
    2b5c:	mov	x20, x0
    2b60:	cbnz	x0, 2cb4 <ctf_add_union+0x184>
    2b64:	cmp	w22, #0x1
    2b68:	b.hi	2cf0 <ctf_add_union+0x1c0>  // b.pmore
    2b6c:	ldr	w0, [x19, #552]
    2b70:	tbz	w0, #1, 2d74 <ctf_add_union+0x244>
    2b74:	ldr	w0, [x19, #544]
    2b78:	mov	w2, #0xfffffffd            	// #-3
    2b7c:	ldr	x1, [x19, #480]
    2b80:	add	w0, w0, #0x1
    2b84:	orr	x0, x0, x1
    2b88:	cmp	x0, x2
    2b8c:	b.hi	2cdc <ctf_add_union+0x1ac>  // b.pmore
    2b90:	mov	x2, #0x7ffffffe            	// #2147483646
    2b94:	cmp	x0, x2
    2b98:	b.eq	2cdc <ctf_add_union+0x1ac>  // b.none
    2b9c:	ldp	x0, x2, [x19, #448]
    2ba0:	cbz	x0, 2d88 <ctf_add_union+0x258>
    2ba4:	add	x1, x1, #0x2
    2ba8:	cmp	x2, x1
    2bac:	b.cs	2bf4 <ctf_add_union+0xc4>  // b.hs, b.nlast
    2bb0:	ucvtf	d0, x2
    2bb4:	fmov	d1, #1.250000000000000000e+00
    2bb8:	fmul	d0, d0, d1
    2bbc:	fcvtzu	x20, d0
    2bc0:	cmp	x2, x20
    2bc4:	b.eq	2bf4 <ctf_add_union+0xc4>  // b.none
    2bc8:	lsl	x1, x20, #2
    2bcc:	bl	0 <realloc>
    2bd0:	cbz	x0, 2d90 <ctf_add_union+0x260>
    2bd4:	ldr	x3, [x19, #456]
    2bd8:	str	x0, [x19, #448]
    2bdc:	mov	w1, #0x0                   	// #0
    2be0:	sub	x2, x20, x3
    2be4:	add	x0, x0, x3, lsl #2
    2be8:	lsl	x2, x2, #2
    2bec:	bl	0 <memset>
    2bf0:	str	x20, [x19, #456]
    2bf4:	mov	x1, #0x1                   	// #1
    2bf8:	mov	x0, #0x48                  	// #72
    2bfc:	bl	0 <calloc>
    2c00:	mov	x21, x0
    2c04:	cbz	x0, 2d24 <ctf_add_union+0x1f4>
    2c08:	ldr	x20, [x19, #480]
    2c0c:	ldr	w0, [x19, #552]
    2c10:	add	x20, x20, #0x1
    2c14:	str	x20, [x19, #480]
    2c18:	tbz	w0, #0, 2c28 <ctf_add_union+0xf8>
    2c1c:	ldr	w0, [x19, #544]
    2c20:	add	w0, w0, #0x1
    2c24:	orr	x20, x20, x0
    2c28:	add	x2, x21, #0x18
    2c2c:	mov	x1, x23
    2c30:	mov	x0, x19
    2c34:	bl	0 <ctf_str_add_ref>
    2c38:	str	x20, [x21, #16]
    2c3c:	cmp	w0, #0x0
    2c40:	str	w0, [x21, #24]
    2c44:	ccmp	x23, #0x0, #0x4, eq  // eq = none
    2c48:	b.ne	2d14 <ctf_add_union+0x1e4>  // b.any
    2c4c:	ldr	x0, [x19, #568]
    2c50:	mov	x2, x21
    2c54:	mov	x1, x20
    2c58:	bl	0 <ctf_dynhash_insert>
    2c5c:	tbnz	w0, #31, 2d64 <ctf_add_union+0x234>
    2c60:	ldr	w1, [x21, #24]
    2c64:	cbnz	w1, 2d38 <ctf_add_union+0x208>
    2c68:	add	x0, x19, #0x240
    2c6c:	mov	x1, x21
    2c70:	bl	0 <ctf_list_append>
    2c74:	ldr	w0, [x19, #552]
    2c78:	orr	w0, w0, #0x4
    2c7c:	str	w0, [x19, #552]
    2c80:	cmn	x20, #0x1
    2c84:	b.eq	2d0c <ctf_add_union+0x1dc>  // b.none
    2c88:	cmp	w22, #0x0
    2c8c:	mov	w0, #0x1e000000            	// #503316480
    2c90:	mov	w1, #0x1c000000            	// #469762048
    2c94:	csel	w0, w0, w1, ne  // ne = any
    2c98:	stp	w0, wzr, [x21, #28]
    2c9c:	mov	x0, x20
    2ca0:	ldp	x19, x20, [sp, #16]
    2ca4:	ldp	x21, x22, [sp, #32]
    2ca8:	ldr	x23, [sp, #48]
    2cac:	ldp	x29, x30, [sp], #64
    2cb0:	ret
    2cb4:	mov	x1, x0
    2cb8:	mov	x0, x19
    2cbc:	bl	0 <ctf_type_kind>
    2cc0:	cmp	w0, #0x9
    2cc4:	b.ne	2b64 <ctf_add_union+0x34>  // b.any
    2cc8:	ldr	x0, [x19, #568]
    2ccc:	mov	x1, x20
    2cd0:	bl	0 <ctf_dynhash_lookup>
    2cd4:	mov	x21, x0
    2cd8:	b	2c88 <ctf_add_union+0x158>
    2cdc:	mov	x0, x19
    2ce0:	mov	w1, #0x40f                 	// #1039
    2ce4:	bl	0 <ctf_set_errno>
    2ce8:	mov	x20, x0
    2cec:	b	2c80 <ctf_add_union+0x150>
    2cf0:	mov	x0, x19
    2cf4:	mov	w1, #0x16                  	// #22
    2cf8:	bl	0 <ctf_set_errno>
    2cfc:	mov	x20, x0
    2d00:	cmn	x20, #0x1
    2d04:	mov	w0, #0x1e000000            	// #503316480
    2d08:	b.ne	2c98 <ctf_add_union+0x168>  // b.any
    2d0c:	mov	x20, #0xffffffffffffffff    	// #-1
    2d10:	b	2c9c <ctf_add_union+0x16c>
    2d14:	ldrb	w0, [x23]
    2d18:	cbz	w0, 2c4c <ctf_add_union+0x11c>
    2d1c:	mov	x0, x21
    2d20:	bl	0 <free>
    2d24:	mov	x0, x19
    2d28:	mov	w1, #0xb                   	// #11
    2d2c:	bl	0 <ctf_set_errno>
    2d30:	mov	x20, x0
    2d34:	b	2c80 <ctf_add_union+0x150>
    2d38:	mov	x0, x19
    2d3c:	bl	0 <ctf_strraw>
    2d40:	mov	x1, x0
    2d44:	cbz	x0, 2c68 <ctf_add_union+0x138>
    2d48:	ldr	x2, [x21, #16]
    2d4c:	ldr	x0, [x19, #176]
    2d50:	bl	0 <ctf_dynhash_insert>
    2d54:	tbz	w0, #31, 2c68 <ctf_add_union+0x138>
    2d58:	ldr	x1, [x21, #16]
    2d5c:	ldr	x0, [x19, #568]
    2d60:	bl	0 <ctf_dynhash_remove>
    2d64:	mov	x0, x21
    2d68:	mov	x20, #0xffffffffffffffff    	// #-1
    2d6c:	bl	0 <free>
    2d70:	b	2c9c <ctf_add_union+0x16c>
    2d74:	mov	x0, x19
    2d78:	mov	w1, #0x40d                 	// #1037
    2d7c:	bl	0 <ctf_set_errno>
    2d80:	mov	x20, x0
    2d84:	b	2c80 <ctf_add_union+0x150>
    2d88:	mov	x20, #0x400                 	// #1024
    2d8c:	b	2bc0 <ctf_add_union+0x90>
    2d90:	mov	x0, x19
    2d94:	mov	w1, #0xc                   	// #12
    2d98:	bl	0 <ctf_set_errno>
    2d9c:	tbz	w0, #31, 2bf4 <ctf_add_union+0xc4>
    2da0:	mov	x20, #0xffffffffffffffff    	// #-1
    2da4:	b	2c9c <ctf_add_union+0x16c>

0000000000002da8 <ctf_add_enum>:
    2da8:	stp	x29, x30, [sp, #-64]!
    2dac:	mov	x29, sp
    2db0:	stp	x19, x20, [sp, #16]
    2db4:	mov	x19, x0
    2db8:	stp	x21, x22, [sp, #32]
    2dbc:	mov	x22, x2
    2dc0:	str	x23, [sp, #48]
    2dc4:	mov	w23, w1
    2dc8:	cbz	x2, 2ddc <ctf_add_enum+0x34>
    2dcc:	mov	w1, #0x8                   	// #8
    2dd0:	bl	0 <ctf_lookup_by_rawname>
    2dd4:	mov	x20, x0
    2dd8:	cbnz	x0, 2f34 <ctf_add_enum+0x18c>
    2ddc:	cmp	w23, #0x1
    2de0:	b.hi	2f70 <ctf_add_enum+0x1c8>  // b.pmore
    2de4:	ldr	w0, [x19, #552]
    2de8:	tbz	w0, #1, 2ff4 <ctf_add_enum+0x24c>
    2dec:	ldr	w3, [x19, #544]
    2df0:	mov	w0, #0xfffffffd            	// #-3
    2df4:	ldr	x1, [x19, #480]
    2df8:	add	w3, w3, #0x1
    2dfc:	orr	x3, x3, x1
    2e00:	cmp	x3, x0
    2e04:	b.hi	2f5c <ctf_add_enum+0x1b4>  // b.pmore
    2e08:	mov	x0, #0x7ffffffe            	// #2147483646
    2e0c:	cmp	x3, x0
    2e10:	b.eq	2f5c <ctf_add_enum+0x1b4>  // b.none
    2e14:	ldp	x0, x2, [x19, #448]
    2e18:	cbz	x0, 3008 <ctf_add_enum+0x260>
    2e1c:	add	x1, x1, #0x2
    2e20:	cmp	x2, x1
    2e24:	b.cs	2e6c <ctf_add_enum+0xc4>  // b.hs, b.nlast
    2e28:	ucvtf	d0, x2
    2e2c:	fmov	d1, #1.250000000000000000e+00
    2e30:	fmul	d0, d0, d1
    2e34:	fcvtzu	x20, d0
    2e38:	cmp	x2, x20
    2e3c:	b.eq	2e6c <ctf_add_enum+0xc4>  // b.none
    2e40:	lsl	x1, x20, #2
    2e44:	bl	0 <realloc>
    2e48:	cbz	x0, 3010 <ctf_add_enum+0x268>
    2e4c:	ldr	x3, [x19, #456]
    2e50:	str	x0, [x19, #448]
    2e54:	mov	w1, #0x0                   	// #0
    2e58:	sub	x2, x20, x3
    2e5c:	add	x0, x0, x3, lsl #2
    2e60:	lsl	x2, x2, #2
    2e64:	bl	0 <memset>
    2e68:	str	x20, [x19, #456]
    2e6c:	mov	x1, #0x1                   	// #1
    2e70:	mov	x0, #0x48                  	// #72
    2e74:	bl	0 <calloc>
    2e78:	mov	x21, x0
    2e7c:	cbz	x0, 2fa4 <ctf_add_enum+0x1fc>
    2e80:	ldr	x0, [x19, #480]
    2e84:	ldr	w1, [x19, #552]
    2e88:	add	x20, x0, #0x1
    2e8c:	str	x20, [x19, #480]
    2e90:	tbz	w1, #0, 2ea0 <ctf_add_enum+0xf8>
    2e94:	ldr	w0, [x19, #544]
    2e98:	add	w0, w0, #0x1
    2e9c:	orr	x20, x20, x0
    2ea0:	add	x2, x21, #0x18
    2ea4:	mov	x1, x22
    2ea8:	mov	x0, x19
    2eac:	bl	0 <ctf_str_add_ref>
    2eb0:	str	x20, [x21, #16]
    2eb4:	cmp	x22, #0x0
    2eb8:	str	w0, [x21, #24]
    2ebc:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    2ec0:	b.eq	2f94 <ctf_add_enum+0x1ec>  // b.none
    2ec4:	ldr	x0, [x19, #568]
    2ec8:	mov	x2, x21
    2ecc:	mov	x1, x20
    2ed0:	bl	0 <ctf_dynhash_insert>
    2ed4:	tbnz	w0, #31, 2fe4 <ctf_add_enum+0x23c>
    2ed8:	ldr	w1, [x21, #24]
    2edc:	cbnz	w1, 2fb8 <ctf_add_enum+0x210>
    2ee0:	add	x0, x19, #0x240
    2ee4:	mov	x1, x21
    2ee8:	bl	0 <ctf_list_append>
    2eec:	ldr	w0, [x19, #552]
    2ef0:	orr	w0, w0, #0x4
    2ef4:	str	w0, [x19, #552]
    2ef8:	cmn	x20, #0x1
    2efc:	b.eq	2f8c <ctf_add_enum+0x1e4>  // b.none
    2f00:	cmp	w23, #0x0
    2f04:	mov	w1, #0x22000000            	// #570425344
    2f08:	mov	w0, #0x20000000            	// #536870912
    2f0c:	csel	w1, w1, w0, ne  // ne = any
    2f10:	ldr	x0, [x19, #488]
    2f14:	ldr	x0, [x0, #40]
    2f18:	stp	w1, w0, [x21, #28]
    2f1c:	mov	x0, x20
    2f20:	ldp	x19, x20, [sp, #16]
    2f24:	ldp	x21, x22, [sp, #32]
    2f28:	ldr	x23, [sp, #48]
    2f2c:	ldp	x29, x30, [sp], #64
    2f30:	ret
    2f34:	mov	x1, x0
    2f38:	mov	x0, x19
    2f3c:	bl	0 <ctf_type_kind>
    2f40:	cmp	w0, #0x9
    2f44:	b.ne	2ddc <ctf_add_enum+0x34>  // b.any
    2f48:	ldr	x0, [x19, #568]
    2f4c:	mov	x1, x20
    2f50:	bl	0 <ctf_dynhash_lookup>
    2f54:	mov	x21, x0
    2f58:	b	2f00 <ctf_add_enum+0x158>
    2f5c:	mov	x0, x19
    2f60:	mov	w1, #0x40f                 	// #1039
    2f64:	bl	0 <ctf_set_errno>
    2f68:	mov	x20, x0
    2f6c:	b	2ef8 <ctf_add_enum+0x150>
    2f70:	mov	w1, #0x16                  	// #22
    2f74:	mov	x0, x19
    2f78:	bl	0 <ctf_set_errno>
    2f7c:	mov	x20, x0
    2f80:	cmn	x0, #0x1
    2f84:	mov	w1, #0x22000000            	// #570425344
    2f88:	b.ne	2f10 <ctf_add_enum+0x168>  // b.any
    2f8c:	mov	x20, #0xffffffffffffffff    	// #-1
    2f90:	b	2f1c <ctf_add_enum+0x174>
    2f94:	ldrb	w0, [x22]
    2f98:	cbz	w0, 2ec4 <ctf_add_enum+0x11c>
    2f9c:	mov	x0, x21
    2fa0:	bl	0 <free>
    2fa4:	mov	x0, x19
    2fa8:	mov	w1, #0xb                   	// #11
    2fac:	bl	0 <ctf_set_errno>
    2fb0:	mov	x20, x0
    2fb4:	b	2ef8 <ctf_add_enum+0x150>
    2fb8:	mov	x0, x19
    2fbc:	bl	0 <ctf_strraw>
    2fc0:	mov	x1, x0
    2fc4:	cbz	x0, 2ee0 <ctf_add_enum+0x138>
    2fc8:	ldr	x2, [x21, #16]
    2fcc:	ldr	x0, [x19, #192]
    2fd0:	bl	0 <ctf_dynhash_insert>
    2fd4:	tbz	w0, #31, 2ee0 <ctf_add_enum+0x138>
    2fd8:	ldr	x1, [x21, #16]
    2fdc:	ldr	x0, [x19, #568]
    2fe0:	bl	0 <ctf_dynhash_remove>
    2fe4:	mov	x0, x21
    2fe8:	mov	x20, #0xffffffffffffffff    	// #-1
    2fec:	bl	0 <free>
    2ff0:	b	2f1c <ctf_add_enum+0x174>
    2ff4:	mov	x0, x19
    2ff8:	mov	w1, #0x40d                 	// #1037
    2ffc:	bl	0 <ctf_set_errno>
    3000:	mov	x20, x0
    3004:	b	2ef8 <ctf_add_enum+0x150>
    3008:	mov	x20, #0x400                 	// #1024
    300c:	b	2e38 <ctf_add_enum+0x90>
    3010:	mov	x0, x19
    3014:	mov	w1, #0xc                   	// #12
    3018:	bl	0 <ctf_set_errno>
    301c:	tbz	w0, #31, 2e6c <ctf_add_enum+0xc4>
    3020:	mov	x20, #0xffffffffffffffff    	// #-1
    3024:	b	2f1c <ctf_add_enum+0x174>

0000000000003028 <ctf_add_enum_encoded>:
    3028:	stp	x29, x30, [sp, #-80]!
    302c:	mov	x29, sp
    3030:	stp	x19, x20, [sp, #16]
    3034:	mov	x20, x0
    3038:	stp	x21, x22, [sp, #32]
    303c:	mov	x22, x3
    3040:	stp	x23, x24, [sp, #48]
    3044:	mov	w24, w1
    3048:	mov	x23, x2
    304c:	cbz	x2, 3078 <ctf_add_enum_encoded+0x50>
    3050:	mov	w1, #0x8                   	// #8
    3054:	bl	0 <ctf_lookup_by_rawname>
    3058:	mov	x19, x0
    305c:	cbnz	x0, 31b4 <ctf_add_enum_encoded+0x18c>
    3060:	mov	x2, x23
    3064:	mov	x0, x20
    3068:	mov	w1, #0x8                   	// #8
    306c:	bl	0 <ctf_lookup_by_rawname>
    3070:	mov	x21, x0
    3074:	cbnz	x0, 3240 <ctf_add_enum_encoded+0x218>
    3078:	mov	x2, x23
    307c:	add	x4, sp, #0x48
    3080:	mov	w1, w24
    3084:	mov	x0, x20
    3088:	mov	w3, #0x8                   	// #8
    308c:	bl	ef0 <ctf_add_generic>
    3090:	mov	x19, x0
    3094:	cmn	x0, #0x1
    3098:	b.eq	3294 <ctf_add_enum_encoded+0x26c>  // b.none
    309c:	ldr	x1, [x20, #488]
    30a0:	ldr	x0, [sp, #72]
    30a4:	ldr	x1, [x1, #40]
    30a8:	cbnz	w24, 31a8 <ctf_add_enum_encoded+0x180>
    30ac:	mov	w2, #0x20000000            	// #536870912
    30b0:	stp	w2, w1, [x0, #28]
    30b4:	str	x20, [sp, #72]
    30b8:	cbz	x22, 3218 <ctf_add_enum_encoded+0x1f0>
    30bc:	ldr	w0, [x22, #8]
    30c0:	cmp	w0, #0xff
    30c4:	b.hi	31f0 <ctf_add_enum_encoded+0x1c8>  // b.pmore
    30c8:	ldr	w0, [x22, #4]
    30cc:	cmp	w0, #0xff
    30d0:	b.hi	31f0 <ctf_add_enum_encoded+0x1c8>  // b.pmore
    30d4:	mov	x0, #0xfffffffe            	// #4294967294
    30d8:	cmp	x19, x0
    30dc:	b.hi	3218 <ctf_add_enum_encoded+0x1f0>  // b.pmore
    30e0:	mov	x1, x19
    30e4:	add	x0, sp, #0x48
    30e8:	bl	0 <ctf_lookup_by_id>
    30ec:	cbz	x0, 3294 <ctf_add_enum_encoded+0x26c>
    30f0:	ldr	x0, [sp, #72]
    30f4:	mov	x1, x19
    30f8:	bl	0 <ctf_type_kind_unsliced>
    30fc:	sub	w1, w0, #0x1
    3100:	cmp	w1, #0x1
    3104:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    3108:	mov	x0, x20
    310c:	b.ne	3284 <ctf_add_enum_encoded+0x25c>  // b.any
    3110:	add	x4, sp, #0x40
    3114:	mov	w1, w24
    3118:	mov	w3, #0xe                   	// #14
    311c:	mov	x2, #0x0                   	// #0
    3120:	bl	ef0 <ctf_add_generic>
    3124:	mov	x21, x0
    3128:	cmn	x0, #0x1
    312c:	b.eq	3294 <ctf_add_enum_encoded+0x26c>  // b.none
    3130:	ldr	w0, [x22, #8]
    3134:	cmp	w24, #0x0
    3138:	ldr	x1, [sp, #64]
    313c:	neg	w0, w0
    3140:	and	w0, w0, #0xfffffff8
    3144:	mov	w3, #0x38000000            	// #939524096
    3148:	neg	w0, w0
    314c:	mov	w2, #0x3a000000            	// #973078528
    3150:	str	w19, [x1, #48]
    3154:	csel	w2, w2, w3, ne  // ne = any
    3158:	lsr	w0, w0, #3
    315c:	str	w2, [x1, #28]
    3160:	sub	x0, x0, #0x1
    3164:	ldr	w2, [x22, #8]
    3168:	strh	w2, [x1, #54]
    316c:	orr	x0, x0, x0, lsr #1
    3170:	ldr	w2, [x22, #4]
    3174:	orr	x0, x0, x0, lsr #2
    3178:	strh	w2, [x1, #52]
    317c:	ldp	x19, x20, [sp, #16]
    3180:	orr	x0, x0, x0, lsr #4
    3184:	ldp	x23, x24, [sp, #48]
    3188:	orr	x0, x0, x0, lsr #8
    318c:	orr	x0, x0, x0, lsr #16
    3190:	add	x0, x0, #0x1
    3194:	str	w0, [x1, #32]
    3198:	mov	x0, x21
    319c:	ldp	x21, x22, [sp, #32]
    31a0:	ldp	x29, x30, [sp], #80
    31a4:	ret
    31a8:	mov	w2, #0x22000000            	// #570425344
    31ac:	stp	w2, w1, [x0, #28]
    31b0:	b	30b4 <ctf_add_enum_encoded+0x8c>
    31b4:	mov	x1, x0
    31b8:	mov	x0, x20
    31bc:	bl	0 <ctf_type_kind>
    31c0:	cmp	w0, #0x9
    31c4:	b.eq	30b4 <ctf_add_enum_encoded+0x8c>  // b.none
    31c8:	mov	x1, x19
    31cc:	mov	x0, x20
    31d0:	bl	0 <ctf_type_kind_unsliced>
    31d4:	cmp	w0, #0x8
    31d8:	b.eq	30b4 <ctf_add_enum_encoded+0x8c>  // b.none
    31dc:	mov	x0, x20
    31e0:	mov	w1, #0x3fe                 	// #1022
    31e4:	bl	0 <ctf_set_errno>
    31e8:	mov	x21, x0
    31ec:	b	3200 <ctf_add_enum_encoded+0x1d8>
    31f0:	mov	x0, x20
    31f4:	mov	w1, #0x416                 	// #1046
    31f8:	bl	0 <ctf_set_errno>
    31fc:	mov	x21, x0
    3200:	mov	x0, x21
    3204:	ldp	x19, x20, [sp, #16]
    3208:	ldp	x21, x22, [sp, #32]
    320c:	ldp	x23, x24, [sp, #48]
    3210:	ldp	x29, x30, [sp], #80
    3214:	ret
    3218:	mov	x0, x20
    321c:	mov	w1, #0x16                  	// #22
    3220:	bl	0 <ctf_set_errno>
    3224:	mov	x21, x0
    3228:	mov	x0, x21
    322c:	ldp	x19, x20, [sp, #16]
    3230:	ldp	x21, x22, [sp, #32]
    3234:	ldp	x23, x24, [sp, #48]
    3238:	ldp	x29, x30, [sp], #80
    323c:	ret
    3240:	mov	x1, x21
    3244:	mov	x0, x20
    3248:	bl	0 <ctf_type_kind>
    324c:	cmp	w0, #0x9
    3250:	b.ne	3078 <ctf_add_enum_encoded+0x50>  // b.any
    3254:	ldr	x0, [x20, #568]
    3258:	mov	x1, x21
    325c:	bl	0 <ctf_dynhash_lookup>
    3260:	ldr	x1, [x20, #488]
    3264:	cbnz	w24, 32b0 <ctf_add_enum_encoded+0x288>
    3268:	ldr	w1, [x1, #40]
    326c:	mov	w2, #0x20000000            	// #536870912
    3270:	stp	w2, w1, [x0, #28]
    3274:	cmn	x21, #0x1
    3278:	b.eq	3200 <ctf_add_enum_encoded+0x1d8>  // b.none
    327c:	mov	x19, x21
    3280:	b	30b4 <ctf_add_enum_encoded+0x8c>
    3284:	mov	w1, #0x3fe                 	// #1022
    3288:	bl	0 <ctf_set_errno>
    328c:	mov	x21, x0
    3290:	b	3200 <ctf_add_enum_encoded+0x1d8>
    3294:	mov	x21, #0xffffffffffffffff    	// #-1
    3298:	mov	x0, x21
    329c:	ldp	x19, x20, [sp, #16]
    32a0:	ldp	x21, x22, [sp, #32]
    32a4:	ldp	x23, x24, [sp, #48]
    32a8:	ldp	x29, x30, [sp], #80
    32ac:	ret
    32b0:	ldr	w1, [x1, #40]
    32b4:	mov	w2, #0x22000000            	// #570425344
    32b8:	b	3270 <ctf_add_enum_encoded+0x248>
    32bc:	nop

00000000000032c0 <ctf_add_forward>:
    32c0:	stp	x29, x30, [sp, #-64]!
    32c4:	mov	x29, sp
    32c8:	stp	x19, x20, [sp, #16]
    32cc:	mov	w20, w3
    32d0:	sub	w3, w3, #0x6
    32d4:	cmp	w3, #0x2
    32d8:	b.hi	3474 <ctf_add_forward+0x1b4>  // b.pmore
    32dc:	stp	x21, x22, [sp, #32]
    32e0:	mov	x19, x0
    32e4:	mov	x22, x2
    32e8:	stp	x23, x24, [sp, #48]
    32ec:	mov	w23, w1
    32f0:	cbz	x2, 32fc <ctf_add_forward+0x3c>
    32f4:	mov	w1, w20
    32f8:	bl	0 <ctf_lookup_by_rawname>
    32fc:	cmp	w23, #0x1
    3300:	b.hi	343c <ctf_add_forward+0x17c>  // b.pmore
    3304:	ldr	w0, [x19, #552]
    3308:	tbz	w0, #1, 3484 <ctf_add_forward+0x1c4>
    330c:	ldr	w1, [x19, #544]
    3310:	mov	w0, #0xfffffffd            	// #-3
    3314:	ldr	x2, [x19, #480]
    3318:	add	w1, w1, #0x1
    331c:	orr	x1, x1, x2
    3320:	cmp	x1, x0
    3324:	b.hi	34d4 <ctf_add_forward+0x214>  // b.pmore
    3328:	mov	x0, #0x7ffffffe            	// #2147483646
    332c:	cmp	x1, x0
    3330:	b.eq	34d4 <ctf_add_forward+0x214>  // b.none
    3334:	ldp	x0, x1, [x19, #448]
    3338:	cbz	x0, 34e8 <ctf_add_forward+0x228>
    333c:	add	x2, x2, #0x2
    3340:	cmp	x1, x2
    3344:	b.cs	338c <ctf_add_forward+0xcc>  // b.hs, b.nlast
    3348:	ucvtf	d0, x1
    334c:	fmov	d1, #1.250000000000000000e+00
    3350:	fmul	d0, d0, d1
    3354:	fcvtzu	x21, d0
    3358:	cmp	x1, x21
    335c:	b.eq	338c <ctf_add_forward+0xcc>  // b.none
    3360:	lsl	x1, x21, #2
    3364:	bl	0 <realloc>
    3368:	cbz	x0, 34f0 <ctf_add_forward+0x230>
    336c:	ldr	x3, [x19, #456]
    3370:	str	x0, [x19, #448]
    3374:	mov	w1, #0x0                   	// #0
    3378:	sub	x2, x21, x3
    337c:	add	x0, x0, x3, lsl #2
    3380:	lsl	x2, x2, #2
    3384:	bl	0 <memset>
    3388:	str	x21, [x19, #456]
    338c:	mov	x1, #0x1                   	// #1
    3390:	mov	x0, #0x48                  	// #72
    3394:	bl	0 <calloc>
    3398:	mov	x24, x0
    339c:	cbz	x0, 34c0 <ctf_add_forward+0x200>
    33a0:	ldr	x21, [x19, #480]
    33a4:	ldr	w0, [x19, #552]
    33a8:	add	x21, x21, #0x1
    33ac:	str	x21, [x19, #480]
    33b0:	tbz	w0, #0, 33c0 <ctf_add_forward+0x100>
    33b4:	ldr	w0, [x19, #544]
    33b8:	add	w0, w0, #0x1
    33bc:	orr	x21, x21, x0
    33c0:	add	x2, x24, #0x18
    33c4:	mov	x1, x22
    33c8:	mov	x0, x19
    33cc:	bl	0 <ctf_str_add_ref>
    33d0:	str	x21, [x24, #16]
    33d4:	cmp	w0, #0x0
    33d8:	str	w0, [x24, #24]
    33dc:	ccmp	x22, #0x0, #0x4, eq  // eq = none
    33e0:	b.ne	34b0 <ctf_add_forward+0x1f0>  // b.any
    33e4:	ldr	x0, [x19, #568]
    33e8:	mov	x2, x24
    33ec:	mov	x1, x21
    33f0:	bl	0 <ctf_dynhash_insert>
    33f4:	tbnz	w0, #31, 3514 <ctf_add_forward+0x254>
    33f8:	ldr	w1, [x24, #24]
    33fc:	cbz	w1, 3420 <ctf_add_forward+0x160>
    3400:	mov	x0, x19
    3404:	bl	0 <ctf_strraw>
    3408:	mov	x1, x0
    340c:	cbz	x0, 3420 <ctf_add_forward+0x160>
    3410:	ldr	x2, [x24, #16]
    3414:	ldr	x0, [x19, #208]
    3418:	bl	0 <ctf_dynhash_insert>
    341c:	tbnz	w0, #31, 3508 <ctf_add_forward+0x248>
    3420:	add	x0, x19, #0x240
    3424:	mov	x1, x24
    3428:	bl	0 <ctf_list_append>
    342c:	ldr	w0, [x19, #552]
    3430:	orr	w0, w0, #0x4
    3434:	str	w0, [x19, #552]
    3438:	b	3494 <ctf_add_forward+0x1d4>
    343c:	mov	w1, #0x16                  	// #22
    3440:	mov	x0, x19
    3444:	bl	0 <ctf_set_errno>
    3448:	mov	x21, x0
    344c:	cmn	x0, #0x1
    3450:	mov	w1, #0x26000000            	// #637534208
    3454:	b.eq	3500 <ctf_add_forward+0x240>  // b.none
    3458:	stp	w1, w20, [x24, #28]
    345c:	mov	x0, x21
    3460:	ldp	x19, x20, [sp, #16]
    3464:	ldp	x21, x22, [sp, #32]
    3468:	ldp	x23, x24, [sp, #48]
    346c:	ldp	x29, x30, [sp], #64
    3470:	ret
    3474:	ldp	x19, x20, [sp, #16]
    3478:	mov	w1, #0x3fd                 	// #1021
    347c:	ldp	x29, x30, [sp], #64
    3480:	b	0 <ctf_set_errno>
    3484:	mov	x0, x19
    3488:	mov	w1, #0x40d                 	// #1037
    348c:	bl	0 <ctf_set_errno>
    3490:	mov	x21, x0
    3494:	cmn	x21, #0x1
    3498:	b.eq	3500 <ctf_add_forward+0x240>  // b.none
    349c:	cmp	w23, #0x0
    34a0:	mov	w1, #0x26000000            	// #637534208
    34a4:	mov	w0, #0x24000000            	// #603979776
    34a8:	csel	w1, w1, w0, ne  // ne = any
    34ac:	b	3458 <ctf_add_forward+0x198>
    34b0:	ldrb	w0, [x22]
    34b4:	cbz	w0, 33e4 <ctf_add_forward+0x124>
    34b8:	mov	x0, x24
    34bc:	bl	0 <free>
    34c0:	mov	x0, x19
    34c4:	mov	w1, #0xb                   	// #11
    34c8:	bl	0 <ctf_set_errno>
    34cc:	mov	x21, x0
    34d0:	b	3494 <ctf_add_forward+0x1d4>
    34d4:	mov	x0, x19
    34d8:	mov	w1, #0x40f                 	// #1039
    34dc:	bl	0 <ctf_set_errno>
    34e0:	mov	x21, x0
    34e4:	b	3494 <ctf_add_forward+0x1d4>
    34e8:	mov	x21, #0x400                 	// #1024
    34ec:	b	3358 <ctf_add_forward+0x98>
    34f0:	mov	x0, x19
    34f4:	mov	w1, #0xc                   	// #12
    34f8:	bl	0 <ctf_set_errno>
    34fc:	tbz	w0, #31, 338c <ctf_add_forward+0xcc>
    3500:	mov	x21, #0xffffffffffffffff    	// #-1
    3504:	b	345c <ctf_add_forward+0x19c>
    3508:	ldr	x1, [x24, #16]
    350c:	ldr	x0, [x19, #568]
    3510:	bl	0 <ctf_dynhash_remove>
    3514:	mov	x0, x24
    3518:	mov	x21, #0xffffffffffffffff    	// #-1
    351c:	bl	0 <free>
    3520:	b	345c <ctf_add_forward+0x19c>
    3524:	nop

0000000000003528 <ctf_add_typedef>:
    3528:	stp	x29, x30, [sp, #-80]!
    352c:	mov	x29, sp
    3530:	stp	x21, x22, [sp, #32]
    3534:	stp	x23, x24, [sp, #48]
    3538:	mov	w23, w1
    353c:	mov	x1, #0xfffffffe            	// #4294967294
    3540:	str	x0, [sp, #72]
    3544:	cmp	x3, x1
    3548:	b.hi	36b0 <ctf_add_typedef+0x188>  // b.pmore
    354c:	mov	x24, x2
    3550:	mov	x1, x3
    3554:	stp	x19, x20, [sp, #16]
    3558:	mov	x19, x0
    355c:	mov	x20, x3
    3560:	add	x0, sp, #0x48
    3564:	bl	0 <ctf_lookup_by_id>
    3568:	cbz	x0, 3760 <ctf_add_typedef+0x238>
    356c:	cmp	w23, #0x1
    3570:	b.hi	36d0 <ctf_add_typedef+0x1a8>  // b.pmore
    3574:	ldr	w0, [x19, #552]
    3578:	tbz	w0, #1, 377c <ctf_add_typedef+0x254>
    357c:	ldr	w0, [x19, #544]
    3580:	mov	w2, #0xfffffffd            	// #-3
    3584:	ldr	x1, [x19, #480]
    3588:	add	w0, w0, #0x1
    358c:	orr	x0, x0, x1
    3590:	cmp	x0, x2
    3594:	b.hi	3708 <ctf_add_typedef+0x1e0>  // b.pmore
    3598:	mov	x2, #0x7ffffffe            	// #2147483646
    359c:	cmp	x0, x2
    35a0:	b.eq	3708 <ctf_add_typedef+0x1e0>  // b.none
    35a4:	ldp	x0, x2, [x19, #448]
    35a8:	cbz	x0, 37b4 <ctf_add_typedef+0x28c>
    35ac:	add	x1, x1, #0x2
    35b0:	cmp	x2, x1
    35b4:	b.cs	35fc <ctf_add_typedef+0xd4>  // b.hs, b.nlast
    35b8:	ucvtf	d0, x2
    35bc:	fmov	d1, #1.250000000000000000e+00
    35c0:	fmul	d0, d0, d1
    35c4:	fcvtzu	x21, d0
    35c8:	cmp	x2, x21
    35cc:	b.eq	35fc <ctf_add_typedef+0xd4>  // b.none
    35d0:	lsl	x1, x21, #2
    35d4:	bl	0 <realloc>
    35d8:	cbz	x0, 3750 <ctf_add_typedef+0x228>
    35dc:	ldr	x3, [x19, #456]
    35e0:	str	x0, [x19, #448]
    35e4:	mov	w1, #0x0                   	// #0
    35e8:	sub	x2, x21, x3
    35ec:	add	x0, x0, x3, lsl #2
    35f0:	lsl	x2, x2, #2
    35f4:	bl	0 <memset>
    35f8:	str	x21, [x19, #456]
    35fc:	mov	x1, #0x1                   	// #1
    3600:	mov	x0, #0x48                  	// #72
    3604:	bl	0 <calloc>
    3608:	mov	x22, x0
    360c:	cbz	x0, 37a0 <ctf_add_typedef+0x278>
    3610:	ldr	x21, [x19, #480]
    3614:	ldr	w0, [x19, #552]
    3618:	add	x21, x21, #0x1
    361c:	str	x21, [x19, #480]
    3620:	tbz	w0, #0, 3630 <ctf_add_typedef+0x108>
    3624:	ldr	w0, [x19, #544]
    3628:	add	w0, w0, #0x1
    362c:	orr	x21, x21, x0
    3630:	add	x2, x22, #0x18
    3634:	mov	x1, x24
    3638:	mov	x0, x19
    363c:	bl	0 <ctf_str_add_ref>
    3640:	str	x21, [x22, #16]
    3644:	cmp	w0, #0x0
    3648:	str	w0, [x22, #24]
    364c:	ccmp	x24, #0x0, #0x4, eq  // eq = none
    3650:	b.ne	3790 <ctf_add_typedef+0x268>  // b.any
    3654:	ldr	x0, [x19, #568]
    3658:	mov	x2, x22
    365c:	mov	x1, x21
    3660:	bl	0 <ctf_dynhash_insert>
    3664:	tbnz	w0, #31, 369c <ctf_add_typedef+0x174>
    3668:	ldr	w1, [x22, #24]
    366c:	cbz	w1, 3734 <ctf_add_typedef+0x20c>
    3670:	mov	x0, x19
    3674:	bl	0 <ctf_strraw>
    3678:	mov	x1, x0
    367c:	cbz	x0, 3734 <ctf_add_typedef+0x20c>
    3680:	ldr	x2, [x22, #16]
    3684:	ldr	x0, [x19, #208]
    3688:	bl	0 <ctf_dynhash_insert>
    368c:	tbz	w0, #31, 3734 <ctf_add_typedef+0x20c>
    3690:	ldr	x1, [x22, #16]
    3694:	ldr	x0, [x19, #568]
    3698:	bl	0 <ctf_dynhash_remove>
    369c:	mov	x0, x22
    36a0:	mov	x21, #0xffffffffffffffff    	// #-1
    36a4:	bl	0 <free>
    36a8:	ldp	x19, x20, [sp, #16]
    36ac:	b	36bc <ctf_add_typedef+0x194>
    36b0:	mov	w1, #0x16                  	// #22
    36b4:	bl	0 <ctf_set_errno>
    36b8:	mov	x21, x0
    36bc:	mov	x0, x21
    36c0:	ldp	x21, x22, [sp, #32]
    36c4:	ldp	x23, x24, [sp, #48]
    36c8:	ldp	x29, x30, [sp], #80
    36cc:	ret
    36d0:	mov	x0, x19
    36d4:	mov	w1, #0x16                  	// #22
    36d8:	bl	0 <ctf_set_errno>
    36dc:	mov	x21, x0
    36e0:	cmn	x0, #0x1
    36e4:	b.eq	3760 <ctf_add_typedef+0x238>  // b.none
    36e8:	mov	w0, #0x2a000000            	// #704643072
    36ec:	stp	w0, w20, [x22, #28]
    36f0:	mov	x0, x21
    36f4:	ldp	x19, x20, [sp, #16]
    36f8:	ldp	x21, x22, [sp, #32]
    36fc:	ldp	x23, x24, [sp, #48]
    3700:	ldp	x29, x30, [sp], #80
    3704:	ret
    3708:	mov	x0, x19
    370c:	mov	w1, #0x40f                 	// #1039
    3710:	bl	0 <ctf_set_errno>
    3714:	mov	x21, x0
    3718:	cmn	x21, #0x1
    371c:	b.eq	3760 <ctf_add_typedef+0x238>  // b.none
    3720:	cmp	w23, #0x0
    3724:	mov	w0, #0x2a000000            	// #704643072
    3728:	mov	w1, #0x28000000            	// #671088640
    372c:	csel	w0, w0, w1, ne  // ne = any
    3730:	b	36ec <ctf_add_typedef+0x1c4>
    3734:	add	x0, x19, #0x240
    3738:	mov	x1, x22
    373c:	bl	0 <ctf_list_append>
    3740:	ldr	w0, [x19, #552]
    3744:	orr	w0, w0, #0x4
    3748:	str	w0, [x19, #552]
    374c:	b	3718 <ctf_add_typedef+0x1f0>
    3750:	mov	x0, x19
    3754:	mov	w1, #0xc                   	// #12
    3758:	bl	0 <ctf_set_errno>
    375c:	tbz	w0, #31, 35fc <ctf_add_typedef+0xd4>
    3760:	mov	x21, #0xffffffffffffffff    	// #-1
    3764:	mov	x0, x21
    3768:	ldp	x19, x20, [sp, #16]
    376c:	ldp	x21, x22, [sp, #32]
    3770:	ldp	x23, x24, [sp, #48]
    3774:	ldp	x29, x30, [sp], #80
    3778:	ret
    377c:	mov	x0, x19
    3780:	mov	w1, #0x40d                 	// #1037
    3784:	bl	0 <ctf_set_errno>
    3788:	mov	x21, x0
    378c:	b	3718 <ctf_add_typedef+0x1f0>
    3790:	ldrb	w0, [x24]
    3794:	cbz	w0, 3654 <ctf_add_typedef+0x12c>
    3798:	mov	x0, x22
    379c:	bl	0 <free>
    37a0:	mov	x0, x19
    37a4:	mov	w1, #0xb                   	// #11
    37a8:	bl	0 <ctf_set_errno>
    37ac:	mov	x21, x0
    37b0:	b	3718 <ctf_add_typedef+0x1f0>
    37b4:	mov	x21, #0x400                 	// #1024
    37b8:	b	35c8 <ctf_add_typedef+0xa0>
    37bc:	nop

00000000000037c0 <ctf_add_type_internal>:
    37c0:	sub	sp, sp, #0x130
    37c4:	stp	x29, x30, [sp, #16]
    37c8:	add	x29, sp, #0x10
    37cc:	str	x1, [sp, #136]
    37d0:	ldr	w1, [x0, #552]
    37d4:	stp	x27, x28, [sp, #96]
    37d8:	str	x0, [sp, #152]
    37dc:	tbz	w1, #1, 39b8 <ctf_add_type_internal+0x1f8>
    37e0:	mov	x1, x2
    37e4:	stp	x19, x20, [sp, #32]
    37e8:	mov	x19, x0
    37ec:	mov	x20, x2
    37f0:	add	x0, sp, #0x88
    37f4:	stp	x21, x22, [sp, #48]
    37f8:	mov	x22, x3
    37fc:	bl	0 <ctf_lookup_by_id>
    3800:	mov	x21, x0
    3804:	ldr	x0, [sp, #136]
    3808:	cbz	x21, 3bc0 <ctf_add_type_internal+0x400>
    380c:	mov	x1, x20
    3810:	bl	0 <ctf_type_resolve>
    3814:	cmn	x0, #0x1
    3818:	b.eq	39d8 <ctf_add_type_internal+0x218>  // b.none
    381c:	ldr	w1, [x21]
    3820:	ldr	x0, [sp, #136]
    3824:	stp	x23, x24, [sp, #64]
    3828:	stp	x25, x26, [sp, #80]
    382c:	bl	0 <ctf_strptr>
    3830:	ldr	x1, [sp, #136]
    3834:	mov	x24, x0
    3838:	ldr	w0, [x21, #4]
    383c:	ldr	x1, [x1]
    3840:	ldr	x1, [x1]
    3844:	blr	x1
    3848:	mov	w26, w0
    384c:	ldr	x1, [sp, #136]
    3850:	ldr	w0, [x21, #4]
    3854:	ldr	x1, [x1]
    3858:	ldr	x1, [x1, #8]
    385c:	blr	x1
    3860:	mov	w23, w0
    3864:	ldr	x1, [sp, #136]
    3868:	ldr	w0, [x21, #4]
    386c:	ldr	x1, [x1]
    3870:	ldr	x1, [x1, #16]
    3874:	blr	x1
    3878:	mov	w25, w0
    387c:	ldr	x0, [sp, #136]
    3880:	add	x2, sp, #0x98
    3884:	mov	x1, x20
    3888:	bl	0 <ctf_type_mapping>
    388c:	mov	x28, x0
    3890:	cbnz	x0, 3a14 <ctf_add_type_internal+0x254>
    3894:	str	w26, [sp, #116]
    3898:	cmp	w26, #0x9
    389c:	b.eq	3a48 <ctf_add_type_internal+0x288>  // b.none
    38a0:	tbz	w23, #0, 38c8 <ctf_add_type_internal+0x108>
    38a4:	ldrb	w0, [x24]
    38a8:	cbz	w0, 38c8 <ctf_add_type_internal+0x108>
    38ac:	ldr	w1, [sp, #116]
    38b0:	mov	x2, x24
    38b4:	mov	x0, x19
    38b8:	bl	0 <ctf_lookup_by_rawname>
    38bc:	mov	x28, x0
    38c0:	cbnz	x0, 3a58 <ctf_add_type_internal+0x298>
    38c4:	nop
    38c8:	mov	w27, #0x0                   	// #0
    38cc:	mov	x28, #0xffffffffffffffff    	// #-1
    38d0:	str	wzr, [sp, #112]
    38d4:	sub	w0, w26, #0x1
    38d8:	cmp	w0, #0x1
    38dc:	ccmp	w26, #0xe, #0x4, hi  // hi = pmore
    38e0:	ldr	x3, [sp, #136]
    38e4:	b.ne	3908 <ctf_add_type_internal+0x148>  // b.any
    38e8:	mov	x0, x3
    38ec:	add	x2, sp, #0xa0
    38f0:	mov	x1, x20
    38f4:	bl	0 <ctf_type_encoding>
    38f8:	cbnz	w0, 3cd4 <ctf_add_type_internal+0x514>
    38fc:	cmn	x28, #0x1
    3900:	b.ne	3bf0 <ctf_add_type_internal+0x430>  // b.any
    3904:	ldr	x3, [sp, #136]
    3908:	mov	x1, x20
    390c:	ldr	x0, [x22, #696]
    3910:	mov	x2, #0x1                   	// #1
    3914:	stp	x3, x20, [sp, #208]
    3918:	stp	xzr, x19, [sp, #224]
    391c:	stp	x28, xzr, [sp, #240]
    3920:	bl	0 <ctf_dynhash_insert>
    3924:	tbnz	w0, #31, 3c54 <ctf_add_type_internal+0x494>
    3928:	cmp	w26, #0x7
    392c:	b.hi	3b60 <ctf_add_type_internal+0x3a0>  // b.pmore
    3930:	cmp	w26, #0x5
    3934:	b.hi	3f54 <ctf_add_type_internal+0x794>  // b.pmore
    3938:	cmp	w26, #0x3
    393c:	b.eq	3d40 <ctf_add_type_internal+0x580>  // b.none
    3940:	b.ls	3af0 <ctf_add_type_internal+0x330>  // b.plast
    3944:	cmp	w26, #0x4
    3948:	b.eq	409c <ctf_add_type_internal+0x8dc>  // b.none
    394c:	ldr	w2, [x21, #8]
    3950:	mov	x3, x22
    3954:	ldr	x1, [sp, #136]
    3958:	mov	x0, x19
    395c:	bl	37c0 <ctf_add_type_internal>
    3960:	str	x0, [sp, #192]
    3964:	str	xzr, [sp, #200]
    3968:	cmn	x0, #0x1
    396c:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3970:	mov	w1, w23
    3974:	add	x2, sp, #0xc0
    3978:	mov	x0, x19
    397c:	mov	x3, #0x0                   	// #0
    3980:	bl	2170 <ctf_add_function>
    3984:	mov	x28, x0
    3988:	cmn	x28, #0x1
    398c:	b.ne	3b38 <ctf_add_type_internal+0x378>  // b.any
    3990:	mov	x28, #0xffffffffffffffff    	// #-1
    3994:	mov	x0, x28
    3998:	ldp	x29, x30, [sp, #16]
    399c:	ldp	x19, x20, [sp, #32]
    39a0:	ldp	x21, x22, [sp, #48]
    39a4:	ldp	x23, x24, [sp, #64]
    39a8:	ldp	x25, x26, [sp, #80]
    39ac:	ldp	x27, x28, [sp, #96]
    39b0:	add	sp, sp, #0x130
    39b4:	ret
    39b8:	mov	w1, #0x40d                 	// #1037
    39bc:	bl	0 <ctf_set_errno>
    39c0:	mov	x28, x0
    39c4:	mov	x0, x28
    39c8:	ldp	x29, x30, [sp, #16]
    39cc:	ldp	x27, x28, [sp, #96]
    39d0:	add	sp, sp, #0x130
    39d4:	ret
    39d8:	ldr	x0, [sp, #136]
    39dc:	bl	0 <ctf_errno>
    39e0:	cmp	w0, #0x41b
    39e4:	b.ne	381c <ctf_add_type_internal+0x5c>  // b.any
    39e8:	mov	w1, w0
    39ec:	mov	x0, x19
    39f0:	bl	0 <ctf_set_errno>
    39f4:	mov	x28, x0
    39f8:	ldp	x19, x20, [sp, #32]
    39fc:	ldp	x21, x22, [sp, #48]
    3a00:	mov	x0, x28
    3a04:	ldp	x29, x30, [sp, #16]
    3a08:	ldp	x27, x28, [sp, #96]
    3a0c:	add	sp, sp, #0x130
    3a10:	ret
    3a14:	ldr	x0, [x22, #696]
    3a18:	mov	x1, x20
    3a1c:	bl	0 <ctf_dynhash_lookup>
    3a20:	cbz	x0, 3c7c <ctf_add_type_internal+0x4bc>
    3a24:	mov	x0, x28
    3a28:	ldp	x29, x30, [sp, #16]
    3a2c:	ldp	x19, x20, [sp, #32]
    3a30:	ldp	x21, x22, [sp, #48]
    3a34:	ldp	x23, x24, [sp, #64]
    3a38:	ldp	x25, x26, [sp, #80]
    3a3c:	ldp	x27, x28, [sp, #96]
    3a40:	add	sp, sp, #0x130
    3a44:	ret
    3a48:	ldr	w0, [x21, #8]
    3a4c:	str	w0, [sp, #116]
    3a50:	tbz	w23, #0, 38c8 <ctf_add_type_internal+0x108>
    3a54:	b	38a4 <ctf_add_type_internal+0xe4>
    3a58:	mov	x1, x0
    3a5c:	mov	x0, x19
    3a60:	bl	0 <ctf_type_kind_unsliced>
    3a64:	mov	w27, w0
    3a68:	cmn	x28, #0x1
    3a6c:	cset	w0, ne  // ne = any
    3a70:	cmp	w26, w27
    3a74:	csel	w1, w0, wzr, ne  // ne = any
    3a78:	str	w1, [sp, #112]
    3a7c:	cbz	w1, 439c <ctf_add_type_internal+0xbdc>
    3a80:	cmp	w26, #0x9
    3a84:	b.eq	3be0 <ctf_add_type_internal+0x420>  // b.none
    3a88:	cmp	w27, #0x9
    3a8c:	b.ne	3aa0 <ctf_add_type_internal+0x2e0>  // b.any
    3a90:	sub	w0, w26, #0x6
    3a94:	cmp	w0, #0x2
    3a98:	b.ls	38d4 <ctf_add_type_internal+0x114>  // b.plast
    3a9c:	nop
    3aa0:	mov	x1, x24
    3aa4:	mov	w4, w27
    3aa8:	mov	x3, x28
    3aac:	mov	w2, w26
    3ab0:	adrp	x0, 0 <ctf_sort_var>
    3ab4:	add	x0, x0, #0x0
    3ab8:	bl	0 <ctf_dprintf>
    3abc:	mov	x0, x19
    3ac0:	mov	w1, #0x411                 	// #1041
    3ac4:	bl	0 <ctf_set_errno>
    3ac8:	mov	x28, x0
    3acc:	mov	x0, x28
    3ad0:	ldp	x29, x30, [sp, #16]
    3ad4:	ldp	x19, x20, [sp, #32]
    3ad8:	ldp	x21, x22, [sp, #48]
    3adc:	ldp	x23, x24, [sp, #64]
    3ae0:	ldp	x25, x26, [sp, #80]
    3ae4:	ldp	x27, x28, [sp, #96]
    3ae8:	add	sp, sp, #0x130
    3aec:	ret
    3af0:	cmp	w26, #0x1
    3af4:	b.eq	3b00 <ctf_add_type_internal+0x340>  // b.none
    3af8:	cmp	w26, #0x2
    3afc:	b.ne	3d34 <ctf_add_type_internal+0x574>  // b.any
    3b00:	mov	w4, w26
    3b04:	mov	x2, x24
    3b08:	mov	w1, w23
    3b0c:	add	x3, sp, #0xa0
    3b10:	mov	x0, x19
    3b14:	bl	10c8 <ctf_add_encoded>
    3b18:	mov	x28, x0
    3b1c:	b	3988 <ctf_add_type_internal+0x1c8>
    3b20:	cmp	w26, #0x8
    3b24:	b.eq	404c <ctf_add_type_internal+0x88c>  // b.none
    3b28:	cmp	w26, #0x9
    3b2c:	b.ne	3d34 <ctf_add_type_internal+0x574>  // b.any
    3b30:	cmn	x28, #0x1
    3b34:	b.eq	3c60 <ctf_add_type_internal+0x4a0>  // b.none
    3b38:	ldr	x0, [sp, #136]
    3b3c:	mov	x2, x19
    3b40:	mov	x1, x20
    3b44:	mov	x3, x28
    3b48:	bl	0 <ctf_add_type_mapping>
    3b4c:	ldp	x19, x20, [sp, #32]
    3b50:	ldp	x21, x22, [sp, #48]
    3b54:	ldp	x23, x24, [sp, #64]
    3b58:	ldp	x25, x26, [sp, #80]
    3b5c:	b	39c4 <ctf_add_type_internal+0x204>
    3b60:	cmp	w26, #0xa
    3b64:	b.eq	3ce8 <ctf_add_type_internal+0x528>  // b.none
    3b68:	b.ls	3b20 <ctf_add_type_internal+0x360>  // b.plast
    3b6c:	cmp	w26, #0xd
    3b70:	b.ls	3d40 <ctf_add_type_internal+0x580>  // b.plast
    3b74:	cmp	w26, #0xe
    3b78:	b.ne	3d34 <ctf_add_type_internal+0x574>  // b.any
    3b7c:	ldr	x0, [sp, #136]
    3b80:	mov	x1, x20
    3b84:	bl	0 <ctf_type_reference>
    3b88:	mov	x2, x0
    3b8c:	ldr	x1, [sp, #136]
    3b90:	mov	x3, x22
    3b94:	mov	x0, x19
    3b98:	bl	37c0 <ctf_add_type_internal>
    3b9c:	mov	x2, x0
    3ba0:	cmn	x0, #0x1
    3ba4:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3ba8:	mov	w1, w23
    3bac:	add	x3, sp, #0xa0
    3bb0:	mov	x0, x19
    3bb4:	bl	1748 <ctf_add_slice>
    3bb8:	mov	x28, x0
    3bbc:	b	3988 <ctf_add_type_internal+0x1c8>
    3bc0:	bl	0 <ctf_errno>
    3bc4:	mov	w1, w0
    3bc8:	mov	x0, x19
    3bcc:	bl	0 <ctf_set_errno>
    3bd0:	mov	x28, x0
    3bd4:	ldp	x19, x20, [sp, #32]
    3bd8:	ldp	x21, x22, [sp, #48]
    3bdc:	b	3a00 <ctf_add_type_internal+0x240>
    3be0:	sub	w0, w27, #0x6
    3be4:	cmp	w0, #0x2
    3be8:	b.hi	3aa0 <ctf_add_type_internal+0x2e0>  // b.pmore
    3bec:	b	3b38 <ctf_add_type_internal+0x378>
    3bf0:	mov	x1, x28
    3bf4:	add	x0, sp, #0x118
    3bf8:	str	x19, [sp, #280]
    3bfc:	bl	0 <ctf_lookup_by_id>
    3c00:	str	x0, [sp, #120]
    3c04:	cbz	x0, 3990 <ctf_add_type_internal+0x1d0>
    3c08:	mov	x1, x28
    3c0c:	add	x2, sp, #0xb0
    3c10:	mov	x0, x19
    3c14:	bl	0 <ctf_type_encoding>
    3c18:	cbnz	w0, 3990 <ctf_add_type_internal+0x1d0>
    3c1c:	ldr	x1, [sp, #280]
    3c20:	ldr	x3, [sp, #120]
    3c24:	ldr	x1, [x1]
    3c28:	ldr	w0, [x3, #4]
    3c2c:	ldr	x1, [x1, #8]
    3c30:	blr	x1
    3c34:	ldr	x1, [sp, #160]
    3c38:	tbz	w0, #0, 4158 <ctf_add_type_internal+0x998>
    3c3c:	ldr	x0, [sp, #176]
    3c40:	cmp	x1, x0
    3c44:	b.eq	42a0 <ctf_add_type_internal+0xae0>  // b.none
    3c48:	mov	x0, x19
    3c4c:	mov	w1, #0x411                 	// #1041
    3c50:	b	3ac4 <ctf_add_type_internal+0x304>
    3c54:	mov	x0, x19
    3c58:	mov	w1, #0xc                   	// #12
    3c5c:	b	3ac4 <ctf_add_type_internal+0x304>
    3c60:	ldr	w3, [sp, #116]
    3c64:	mov	x2, x24
    3c68:	mov	w1, w23
    3c6c:	mov	x0, x19
    3c70:	bl	32c0 <ctf_add_forward>
    3c74:	mov	x28, x0
    3c78:	b	3988 <ctf_add_type_internal+0x1c8>
    3c7c:	ldr	x0, [sp, #152]
    3c80:	mov	x1, x28
    3c84:	bl	0 <ctf_type_kind_unsliced>
    3c88:	cmp	w0, w26
    3c8c:	b.ne	3894 <ctf_add_type_internal+0xd4>  // b.any
    3c90:	sub	w0, w26, #0x6
    3c94:	cmp	w0, #0x2
    3c98:	b.hi	3894 <ctf_add_type_internal+0xd4>  // b.pmore
    3c9c:	add	x0, sp, #0x98
    3ca0:	mov	x1, #0xffffffffffffffff    	// #-1
    3ca4:	bl	0 <ctf_lookup_by_id>
    3ca8:	cbz	x0, 3cc8 <ctf_add_type_internal+0x508>
    3cac:	ldr	x1, [sp, #152]
    3cb0:	ldr	w0, [x0, #4]
    3cb4:	ldr	x1, [x1]
    3cb8:	ldr	x1, [x1, #16]
    3cbc:	blr	x1
    3cc0:	cmp	w0, w25
    3cc4:	b.eq	3a24 <ctf_add_type_internal+0x264>  // b.none
    3cc8:	str	w26, [sp, #116]
    3ccc:	tbz	w23, #0, 38c8 <ctf_add_type_internal+0x108>
    3cd0:	b	38a4 <ctf_add_type_internal+0xe4>
    3cd4:	ldr	x0, [sp, #136]
    3cd8:	bl	0 <ctf_errno>
    3cdc:	mov	w1, w0
    3ce0:	mov	x0, x19
    3ce4:	b	3ac4 <ctf_add_type_internal+0x304>
    3ce8:	ldr	x0, [sp, #136]
    3cec:	mov	x1, x20
    3cf0:	bl	0 <ctf_type_reference>
    3cf4:	mov	x2, x0
    3cf8:	ldr	x1, [sp, #136]
    3cfc:	mov	x3, x22
    3d00:	mov	x0, x19
    3d04:	bl	37c0 <ctf_add_type_internal>
    3d08:	cmn	x0, #0x1
    3d0c:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3d10:	cmn	x28, #0x1
    3d14:	b.ne	3b38 <ctf_add_type_internal+0x378>  // b.any
    3d18:	mov	x3, x0
    3d1c:	mov	x2, x24
    3d20:	mov	w1, w23
    3d24:	mov	x0, x19
    3d28:	bl	3528 <ctf_add_typedef>
    3d2c:	mov	x28, x0
    3d30:	b	3988 <ctf_add_type_internal+0x1c8>
    3d34:	mov	x0, x19
    3d38:	mov	w1, #0x3ef                 	// #1007
    3d3c:	b	3ac4 <ctf_add_type_internal+0x304>
    3d40:	ldr	x0, [sp, #136]
    3d44:	mov	x1, x20
    3d48:	bl	0 <ctf_type_reference>
    3d4c:	mov	x2, x0
    3d50:	ldr	x1, [sp, #136]
    3d54:	mov	x3, x22
    3d58:	mov	x0, x19
    3d5c:	bl	37c0 <ctf_add_type_internal>
    3d60:	mov	x21, x0
    3d64:	cmn	x0, #0x1
    3d68:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3d6c:	str	x19, [sp, #280]
    3d70:	mov	x0, #0xfffffffe            	// #4294967294
    3d74:	cmp	x21, x0
    3d78:	b.hi	428c <ctf_add_type_internal+0xacc>  // b.pmore
    3d7c:	ldr	w22, [x19, #552]
    3d80:	mov	x1, x21
    3d84:	add	x0, sp, #0x118
    3d88:	bl	0 <ctf_lookup_by_id>
    3d8c:	cbz	x0, 3990 <ctf_add_type_internal+0x1d0>
    3d90:	cmp	w23, #0x1
    3d94:	b.hi	4318 <ctf_add_type_internal+0xb58>  // b.pmore
    3d98:	ldr	w0, [x19, #552]
    3d9c:	tbz	w0, #1, 4374 <ctf_add_type_internal+0xbb4>
    3da0:	ldr	w0, [x19, #544]
    3da4:	mov	w2, #0xfffffffd            	// #-3
    3da8:	ldr	x1, [x19, #480]
    3dac:	add	w0, w0, #0x1
    3db0:	orr	x0, x0, x1
    3db4:	cmp	x0, x2
    3db8:	b.hi	433c <ctf_add_type_internal+0xb7c>  // b.pmore
    3dbc:	mov	x2, #0x7ffffffe            	// #2147483646
    3dc0:	cmp	x0, x2
    3dc4:	b.eq	433c <ctf_add_type_internal+0xb7c>  // b.none
    3dc8:	ldp	x0, x2, [x19, #448]
    3dcc:	cbz	x0, 4388 <ctf_add_type_internal+0xbc8>
    3dd0:	add	x1, x1, #0x2
    3dd4:	cmp	x2, x1
    3dd8:	b.cs	3e20 <ctf_add_type_internal+0x660>  // b.hs, b.nlast
    3ddc:	ucvtf	d0, x2
    3de0:	fmov	d1, #1.250000000000000000e+00
    3de4:	fmul	d0, d0, d1
    3de8:	fcvtzu	x24, d0
    3dec:	cmp	x2, x24
    3df0:	b.eq	3e20 <ctf_add_type_internal+0x660>  // b.none
    3df4:	lsl	x1, x24, #2
    3df8:	bl	0 <realloc>
    3dfc:	cbz	x0, 43b8 <ctf_add_type_internal+0xbf8>
    3e00:	ldr	x3, [x19, #456]
    3e04:	str	x0, [x19, #448]
    3e08:	mov	w1, #0x0                   	// #0
    3e0c:	sub	x2, x24, x3
    3e10:	add	x0, x0, x3, lsl #2
    3e14:	lsl	x2, x2, #2
    3e18:	bl	0 <memset>
    3e1c:	str	x24, [x19, #456]
    3e20:	mov	x1, #0x1                   	// #1
    3e24:	mov	x0, #0x48                  	// #72
    3e28:	bl	0 <calloc>
    3e2c:	str	x0, [sp, #128]
    3e30:	cbz	x0, 43a4 <ctf_add_type_internal+0xbe4>
    3e34:	ldr	x5, [x19, #480]
    3e38:	ldr	w0, [x19, #552]
    3e3c:	add	x28, x5, #0x1
    3e40:	str	x28, [x19, #480]
    3e44:	tbz	w0, #0, 3e54 <ctf_add_type_internal+0x694>
    3e48:	ldr	w0, [x19, #544]
    3e4c:	add	w0, w0, #0x1
    3e50:	orr	x28, x28, x0
    3e54:	ldr	x24, [sp, #128]
    3e58:	mov	x1, #0x0                   	// #0
    3e5c:	mov	x0, x19
    3e60:	add	x2, x24, #0x18
    3e64:	bl	0 <ctf_str_add_ref>
    3e68:	mov	w3, w0
    3e6c:	str	x28, [x24, #16]
    3e70:	str	w3, [x24, #24]
    3e74:	mov	w2, w26
    3e78:	mov	x1, x24
    3e7c:	mov	x0, x19
    3e80:	bl	e30 <ctf_dtd_insert>
    3e84:	tbnz	w0, #31, 4390 <ctf_add_type_internal+0xbd0>
    3e88:	ldr	w0, [x19, #552]
    3e8c:	orr	w0, w0, #0x4
    3e90:	str	w0, [x19, #552]
    3e94:	cmn	x28, #0x1
    3e98:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3e9c:	lsl	w0, w26, #26
    3ea0:	cmp	w23, #0x0
    3ea4:	orr	w1, w0, #0x2000000
    3ea8:	csel	w0, w1, w0, ne  // ne = any
    3eac:	ldr	x1, [sp, #128]
    3eb0:	cmp	w26, #0x3
    3eb4:	stp	w0, w21, [x1, #28]
    3eb8:	b.ne	3988 <ctf_add_type_internal+0x1c8>  // b.any
    3ebc:	ldr	w0, [x19, #544]
    3ec0:	and	w22, w22, #0x1
    3ec4:	cmp	x21, w0, uxtw
    3ec8:	cset	w1, hi  // hi = pmore
    3ecc:	cmp	w22, w1
    3ed0:	b.ne	3988 <ctf_add_type_internal+0x1c8>  // b.any
    3ed4:	ldr	x1, [x19, #480]
    3ed8:	and	w21, w0, w21
    3edc:	cmp	x21, x1
    3ee0:	b.cs	3988 <ctf_add_type_internal+0x1c8>  // b.hs, b.nlast
    3ee4:	ldr	x1, [x19, #448]
    3ee8:	and	w22, w0, w28
    3eec:	ldr	x0, [sp, #280]
    3ef0:	str	w22, [x1, x21, lsl #2]
    3ef4:	cmp	x19, x0
    3ef8:	b.ne	3988 <ctf_add_type_internal+0x1c8>  // b.any
    3efc:	ldr	x1, [x19]
    3f00:	ldr	x2, [sp, #128]
    3f04:	ldr	x1, [x1]
    3f08:	ldr	w0, [x2, #28]
    3f0c:	ldr	w23, [x19, #544]
    3f10:	ldr	w21, [x2, #32]
    3f14:	blr	x1
    3f18:	cmp	w0, #0xa
    3f1c:	b.ne	3988 <ctf_add_type_internal+0x1c8>  // b.any
    3f20:	ldr	x0, [sp, #128]
    3f24:	ldr	w1, [x0, #24]
    3f28:	mov	x0, x19
    3f2c:	bl	0 <ctf_strptr>
    3f30:	ldrb	w0, [x0]
    3f34:	cbnz	w0, 3988 <ctf_add_type_internal+0x1c8>
    3f38:	ldr	x1, [x19, #480]
    3f3c:	and	w0, w21, w23
    3f40:	cmp	x0, x1
    3f44:	b.cs	3988 <ctf_add_type_internal+0x1c8>  // b.hs, b.nlast
    3f48:	ldr	x1, [x19, #448]
    3f4c:	str	w22, [x1, x0, lsl #2]
    3f50:	b	3988 <ctf_add_type_internal+0x1c8>
    3f54:	ldr	w0, [sp, #112]
    3f58:	cmp	w0, #0x0
    3f5c:	ccmp	w27, #0x9, #0x4, ne  // ne = any
    3f60:	b.ne	41d4 <ctf_add_type_internal+0xa14>  // b.any
    3f64:	mov	x2, x24
    3f68:	add	x4, sp, #0x100
    3f6c:	mov	w3, w26
    3f70:	mov	w1, w23
    3f74:	mov	x0, x19
    3f78:	bl	ef0 <ctf_add_generic>
    3f7c:	mov	x28, x0
    3f80:	cmn	x0, #0x1
    3f84:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    3f88:	mov	x3, x0
    3f8c:	mov	x2, x19
    3f90:	ldr	x0, [sp, #136]
    3f94:	mov	x1, x20
    3f98:	ldr	x4, [sp, #256]
    3f9c:	stp	x28, x4, [sp, #240]
    3fa0:	bl	0 <ctf_add_type_mapping>
    3fa4:	ldr	x0, [sp, #136]
    3fa8:	mov	x1, x20
    3fac:	add	x3, sp, #0xe8
    3fb0:	adrp	x2, 0 <ctf_sort_var>
    3fb4:	add	x2, x2, #0x0
    3fb8:	bl	0 <ctf_member_iter>
    3fbc:	mov	w24, w0
    3fc0:	ldr	x0, [sp, #136]
    3fc4:	mov	x1, x20
    3fc8:	bl	0 <ctf_type_size>
    3fcc:	tbnz	x0, #63, 3990 <ctf_add_type_internal+0x1d0>
    3fd0:	mov	x1, #0xfffffffe            	// #4294967294
    3fd4:	cmp	x0, x1
    3fd8:	ldr	x1, [sp, #256]
    3fdc:	b.le	4310 <ctf_add_type_internal+0xb50>
    3fe0:	lsr	x2, x0, #32
    3fe4:	mov	w3, #0xffffffff            	// #-1
    3fe8:	stp	w3, w2, [x1, #32]
    3fec:	str	w0, [x1, #40]
    3ff0:	cmp	w23, #0x0
    3ff4:	and	w25, w25, #0xffffff
    3ff8:	ldr	x21, [x1, #56]
    3ffc:	orr	w6, w25, w26, lsl #26
    4000:	mov	w0, #0x2000000             	// #33554432
    4004:	csel	w23, w23, w0, eq  // eq = none
    4008:	orr	w23, w6, w23
    400c:	str	w23, [x1, #28]
    4010:	cmp	w24, #0x0
    4014:	cset	w24, ne  // ne = any
    4018:	cbz	x21, 4044 <ctf_add_type_internal+0x884>
    401c:	add	x23, sp, #0x118
    4020:	ldr	x1, [x21, #24]
    4024:	mov	x2, x23
    4028:	ldr	x0, [sp, #136]
    402c:	str	x19, [sp, #280]
    4030:	bl	0 <ctf_type_mapping>
    4034:	cbz	x0, 41a0 <ctf_add_type_internal+0x9e0>
    4038:	str	x0, [x21, #24]
    403c:	ldr	x21, [x21, #8]
    4040:	cbnz	x21, 4020 <ctf_add_type_internal+0x860>
    4044:	cbz	w24, 3b38 <ctf_add_type_internal+0x378>
    4048:	b	3990 <ctf_add_type_internal+0x1d0>
    404c:	ldr	w0, [sp, #112]
    4050:	cmp	w0, #0x0
    4054:	ccmp	w27, #0x9, #0x4, ne  // ne = any
    4058:	b.ne	423c <ctf_add_type_internal+0xa7c>  // b.any
    405c:	mov	x2, x24
    4060:	mov	w1, w23
    4064:	mov	x0, x19
    4068:	bl	2da8 <ctf_add_enum>
    406c:	str	x0, [sp, #240]
    4070:	mov	x28, x0
    4074:	cmn	x0, #0x1
    4078:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    407c:	ldr	x0, [sp, #136]
    4080:	adrp	x2, 0 <ctf_sort_var>
    4084:	add	x3, sp, #0xe8
    4088:	add	x2, x2, #0x0
    408c:	mov	x1, x20
    4090:	bl	0 <ctf_enum_iter>
    4094:	cbz	w0, 3b38 <ctf_add_type_internal+0x378>
    4098:	b	3990 <ctf_add_type_internal+0x1d0>
    409c:	ldr	x0, [sp, #136]
    40a0:	add	x2, sp, #0x100
    40a4:	mov	x1, x20
    40a8:	bl	0 <ctf_array_info>
    40ac:	cbnz	w0, 3cd4 <ctf_add_type_internal+0x514>
    40b0:	ldr	x1, [sp, #136]
    40b4:	mov	x3, x22
    40b8:	ldr	x2, [sp, #256]
    40bc:	mov	x0, x19
    40c0:	bl	37c0 <ctf_add_type_internal>
    40c4:	mov	x4, x0
    40c8:	ldr	x1, [sp, #136]
    40cc:	mov	x3, x22
    40d0:	ldr	x2, [sp, #264]
    40d4:	mov	x0, x19
    40d8:	str	x4, [sp, #256]
    40dc:	bl	37c0 <ctf_add_type_internal>
    40e0:	str	x0, [sp, #264]
    40e4:	ldr	x1, [sp, #256]
    40e8:	cmn	x1, #0x1
    40ec:	ccmn	x0, #0x1, #0x4, ne  // ne = any
    40f0:	b.eq	3990 <ctf_add_type_internal+0x1d0>  // b.none
    40f4:	cmn	x28, #0x1
    40f8:	b.eq	42c0 <ctf_add_type_internal+0xb00>  // b.none
    40fc:	add	x23, sp, #0x118
    4100:	mov	x1, x28
    4104:	mov	x2, x23
    4108:	mov	x0, x19
    410c:	bl	0 <ctf_array_info>
    4110:	cbnz	w0, 3990 <ctf_add_type_internal+0x1d0>
    4114:	ldr	x1, [sp, #256]
    4118:	ldr	x0, [sp, #280]
    411c:	cmp	x1, x0
    4120:	b.eq	4350 <ctf_add_type_internal+0xb90>  // b.none
    4124:	ldp	x3, x4, [sp, #256]
    4128:	mov	x1, x24
    412c:	ldp	x6, x7, [sp, #280]
    4130:	mov	x2, x28
    4134:	ldr	w8, [sp, #296]
    4138:	adrp	x0, 0 <ctf_sort_var>
    413c:	ldr	w5, [sp, #272]
    4140:	add	x0, x0, #0x0
    4144:	str	w8, [sp]
    4148:	bl	0 <ctf_dprintf>
    414c:	mov	x0, x19
    4150:	mov	w1, #0x411                 	// #1041
    4154:	b	3ac4 <ctf_add_type_internal+0x304>
    4158:	ldr	x0, [sp, #176]
    415c:	cmp	x1, x0
    4160:	b.eq	4188 <ctf_add_type_internal+0x9c8>  // b.none
    4164:	mov	w0, #0x1                   	// #1
    4168:	cmp	w0, #0x0
    416c:	ccmp	w26, #0xe, #0x4, eq  // eq = none
    4170:	ldr	x3, [sp, #136]
    4174:	b.eq	3908 <ctf_add_type_internal+0x148>  // b.none
    4178:	mov	x2, x19
    417c:	mov	x1, x20
    4180:	mov	x0, x3
    4184:	b	3b44 <ctf_add_type_internal+0x384>
    4188:	ldr	w1, [sp, #168]
    418c:	ldr	w0, [sp, #184]
    4190:	cmp	w1, w0
    4194:	b.ne	4164 <ctf_add_type_internal+0x9a4>  // b.any
    4198:	mov	w0, #0x0                   	// #0
    419c:	b	4168 <ctf_add_type_internal+0x9a8>
    41a0:	ldr	x2, [x21, #24]
    41a4:	mov	x3, x22
    41a8:	ldr	x1, [sp, #136]
    41ac:	mov	x0, x19
    41b0:	bl	37c0 <ctf_add_type_internal>
    41b4:	str	x0, [x21, #24]
    41b8:	cmn	x0, #0x1
    41bc:	b.ne	403c <ctf_add_type_internal+0x87c>  // b.any
    41c0:	mov	x0, x19
    41c4:	bl	0 <ctf_errno>
    41c8:	cmp	w0, #0x41b
    41cc:	cinc	w24, w24, ne  // ne = any
    41d0:	b	403c <ctf_add_type_internal+0x87c>
    41d4:	ldr	x0, [sp, #136]
    41d8:	mov	x1, x20
    41dc:	bl	0 <ctf_type_size>
    41e0:	mov	x21, x0
    41e4:	mov	x1, x28
    41e8:	mov	x0, x19
    41ec:	bl	0 <ctf_type_size>
    41f0:	cmp	x21, x0
    41f4:	ldr	x0, [sp, #136]
    41f8:	b.eq	42d8 <ctf_add_type_internal+0xb18>  // b.none
    41fc:	mov	x1, x20
    4200:	bl	0 <ctf_type_size>
    4204:	mov	x1, x28
    4208:	mov	x20, x0
    420c:	mov	x0, x19
    4210:	bl	0 <ctf_type_size>
    4214:	mov	x1, x24
    4218:	mov	x4, x0
    421c:	mov	x3, x20
    4220:	mov	x2, x28
    4224:	adrp	x0, 0 <ctf_sort_var>
    4228:	add	x0, x0, #0x0
    422c:	bl	0 <ctf_dprintf>
    4230:	mov	x0, x19
    4234:	mov	w1, #0x411                 	// #1041
    4238:	b	3ac4 <ctf_add_type_internal+0x304>
    423c:	ldr	x0, [sp, #136]
    4240:	adrp	x21, 0 <ctf_sort_var>
    4244:	add	x21, x21, #0x0
    4248:	add	x3, sp, #0xe8
    424c:	mov	x2, x21
    4250:	mov	x1, x20
    4254:	bl	0 <ctf_enum_iter>
    4258:	cbnz	w0, 4274 <ctf_add_type_internal+0xab4>
    425c:	mov	x2, x21
    4260:	add	x3, sp, #0xd0
    4264:	mov	x1, x28
    4268:	mov	x0, x19
    426c:	bl	0 <ctf_enum_iter>
    4270:	cbz	w0, 3b38 <ctf_add_type_internal+0x378>
    4274:	mov	x2, x28
    4278:	mov	x1, x24
    427c:	adrp	x0, 0 <ctf_sort_var>
    4280:	add	x0, x0, #0x0
    4284:	bl	0 <ctf_dprintf>
    4288:	b	3c48 <ctf_add_type_internal+0x488>
    428c:	mov	x0, x19
    4290:	mov	w1, #0x16                  	// #22
    4294:	bl	0 <ctf_set_errno>
    4298:	mov	x28, x0
    429c:	b	3988 <ctf_add_type_internal+0x1c8>
    42a0:	ldr	w1, [sp, #168]
    42a4:	ldr	w0, [sp, #184]
    42a8:	cmp	w1, w0
    42ac:	b.ne	3c48 <ctf_add_type_internal+0x488>  // b.any
    42b0:	cmp	w26, #0xe
    42b4:	ldr	x3, [sp, #136]
    42b8:	b.eq	3908 <ctf_add_type_internal+0x148>  // b.none
    42bc:	b	4178 <ctf_add_type_internal+0x9b8>
    42c0:	add	x2, sp, #0x100
    42c4:	mov	w1, w23
    42c8:	mov	x0, x19
    42cc:	bl	1ff0 <ctf_add_array>
    42d0:	mov	x28, x0
    42d4:	b	3988 <ctf_add_type_internal+0x1c8>
    42d8:	adrp	x2, 0 <ctf_sort_var>
    42dc:	add	x3, sp, #0xe8
    42e0:	add	x2, x2, #0x0
    42e4:	mov	x1, x20
    42e8:	bl	0 <ctf_member_iter>
    42ec:	cbz	w0, 3b38 <ctf_add_type_internal+0x378>
    42f0:	mov	x1, x24
    42f4:	mov	x2, x28
    42f8:	adrp	x0, 0 <ctf_sort_var>
    42fc:	add	x0, x0, #0x0
    4300:	bl	0 <ctf_dprintf>
    4304:	mov	x0, x19
    4308:	mov	w1, #0x411                 	// #1041
    430c:	b	3ac4 <ctf_add_type_internal+0x304>
    4310:	str	w0, [x1, #32]
    4314:	b	3ff0 <ctf_add_type_internal+0x830>
    4318:	mov	x0, x19
    431c:	mov	w1, #0x16                  	// #22
    4320:	bl	0 <ctf_set_errno>
    4324:	mov	x28, x0
    4328:	lsl	w0, w26, #26
    432c:	cmn	x28, #0x1
    4330:	orr	w0, w0, #0x2000000
    4334:	b.ne	3eac <ctf_add_type_internal+0x6ec>  // b.any
    4338:	b	3990 <ctf_add_type_internal+0x1d0>
    433c:	mov	x0, x19
    4340:	mov	w1, #0x40f                 	// #1039
    4344:	bl	0 <ctf_set_errno>
    4348:	mov	x28, x0
    434c:	b	3e94 <ctf_add_type_internal+0x6d4>
    4350:	ldr	x1, [sp, #264]
    4354:	ldr	x0, [sp, #288]
    4358:	cmp	x1, x0
    435c:	b.ne	4124 <ctf_add_type_internal+0x964>  // b.any
    4360:	ldr	x0, [x23, #16]
    4364:	ldr	x1, [sp, #272]
    4368:	cmp	x1, x0
    436c:	b.ne	4124 <ctf_add_type_internal+0x964>  // b.any
    4370:	b	3b38 <ctf_add_type_internal+0x378>
    4374:	mov	x0, x19
    4378:	mov	w1, #0x40d                 	// #1037
    437c:	bl	0 <ctf_set_errno>
    4380:	mov	x28, x0
    4384:	b	3e94 <ctf_add_type_internal+0x6d4>
    4388:	mov	x24, #0x400                 	// #1024
    438c:	b	3dec <ctf_add_type_internal+0x62c>
    4390:	ldr	x0, [sp, #128]
    4394:	bl	0 <free>
    4398:	b	3990 <ctf_add_type_internal+0x1d0>
    439c:	str	w0, [sp, #112]
    43a0:	b	38d4 <ctf_add_type_internal+0x114>
    43a4:	mov	x0, x19
    43a8:	mov	w1, #0xb                   	// #11
    43ac:	bl	0 <ctf_set_errno>
    43b0:	mov	x28, x0
    43b4:	b	3e94 <ctf_add_type_internal+0x6d4>
    43b8:	mov	x0, x19
    43bc:	mov	w1, #0xc                   	// #12
    43c0:	bl	0 <ctf_set_errno>
    43c4:	tbnz	w0, #31, 3990 <ctf_add_type_internal+0x1d0>
    43c8:	b	3e20 <ctf_add_type_internal+0x660>
    43cc:	nop

00000000000043d0 <ctf_add_volatile>:
    43d0:	stp	x29, x30, [sp, #-80]!
    43d4:	mov	x29, sp
    43d8:	stp	x19, x20, [sp, #16]
    43dc:	stp	x21, x22, [sp, #32]
    43e0:	mov	w21, w1
    43e4:	mov	x1, #0xfffffffe            	// #4294967294
    43e8:	str	x0, [sp, #72]
    43ec:	cmp	x2, x1
    43f0:	b.hi	4544 <ctf_add_volatile+0x174>  // b.pmore
    43f4:	mov	x19, x0
    43f8:	mov	x1, x2
    43fc:	add	x0, sp, #0x48
    4400:	str	x23, [sp, #48]
    4404:	mov	x23, x2
    4408:	bl	0 <ctf_lookup_by_id>
    440c:	cbz	x0, 45a8 <ctf_add_volatile+0x1d8>
    4410:	cmp	w21, #0x1
    4414:	b.hi	4564 <ctf_add_volatile+0x194>  // b.pmore
    4418:	ldr	w0, [x19, #552]
    441c:	tbz	w0, #1, 45c4 <ctf_add_volatile+0x1f4>
    4420:	ldr	w1, [x19, #544]
    4424:	mov	w0, #0xfffffffd            	// #-3
    4428:	ldr	x2, [x19, #480]
    442c:	add	w1, w1, #0x1
    4430:	orr	x1, x1, x2
    4434:	cmp	x1, x0
    4438:	b.hi	4584 <ctf_add_volatile+0x1b4>  // b.pmore
    443c:	mov	x0, #0x7ffffffe            	// #2147483646
    4440:	cmp	x1, x0
    4444:	b.eq	4584 <ctf_add_volatile+0x1b4>  // b.none
    4448:	ldp	x0, x1, [x19, #448]
    444c:	cbz	x0, 45d8 <ctf_add_volatile+0x208>
    4450:	add	x2, x2, #0x2
    4454:	cmp	x1, x2
    4458:	b.cs	44a0 <ctf_add_volatile+0xd0>  // b.hs, b.nlast
    445c:	ucvtf	d0, x1
    4460:	fmov	d1, #1.250000000000000000e+00
    4464:	fmul	d0, d0, d1
    4468:	fcvtzu	x20, d0
    446c:	cmp	x1, x20
    4470:	b.eq	44a0 <ctf_add_volatile+0xd0>  // b.none
    4474:	lsl	x1, x20, #2
    4478:	bl	0 <realloc>
    447c:	cbz	x0, 4598 <ctf_add_volatile+0x1c8>
    4480:	ldr	x3, [x19, #456]
    4484:	str	x0, [x19, #448]
    4488:	mov	w1, #0x0                   	// #0
    448c:	sub	x2, x20, x3
    4490:	add	x0, x0, x3, lsl #2
    4494:	lsl	x2, x2, #2
    4498:	bl	0 <memset>
    449c:	str	x20, [x19, #456]
    44a0:	mov	x1, #0x1                   	// #1
    44a4:	mov	x0, #0x48                  	// #72
    44a8:	bl	0 <calloc>
    44ac:	mov	x22, x0
    44b0:	cbz	x0, 45f4 <ctf_add_volatile+0x224>
    44b4:	ldr	x20, [x19, #480]
    44b8:	ldr	w0, [x19, #552]
    44bc:	add	x20, x20, #0x1
    44c0:	str	x20, [x19, #480]
    44c4:	tbz	w0, #0, 44d4 <ctf_add_volatile+0x104>
    44c8:	ldr	w0, [x19, #544]
    44cc:	add	w0, w0, #0x1
    44d0:	orr	x20, x20, x0
    44d4:	add	x2, x22, #0x18
    44d8:	mov	x1, #0x0                   	// #0
    44dc:	mov	x0, x19
    44e0:	bl	0 <ctf_str_add_ref>
    44e4:	mov	w3, w0
    44e8:	mov	x1, x22
    44ec:	mov	x0, x19
    44f0:	mov	w2, #0xb                   	// #11
    44f4:	str	x20, [x22, #16]
    44f8:	str	w3, [x22, #24]
    44fc:	bl	e30 <ctf_dtd_insert>
    4500:	tbnz	w0, #31, 45e0 <ctf_add_volatile+0x210>
    4504:	ldr	w0, [x19, #552]
    4508:	orr	w0, w0, #0x4
    450c:	str	w0, [x19, #552]
    4510:	cmn	x20, #0x1
    4514:	b.eq	45a8 <ctf_add_volatile+0x1d8>  // b.none
    4518:	cmp	w21, #0x0
    451c:	mov	w0, #0x2e000000            	// #771751936
    4520:	mov	w1, #0x2c000000            	// #738197504
    4524:	csel	w0, w0, w1, ne  // ne = any
    4528:	stp	w0, w23, [x22, #28]
    452c:	mov	x0, x20
    4530:	ldp	x19, x20, [sp, #16]
    4534:	ldp	x21, x22, [sp, #32]
    4538:	ldr	x23, [sp, #48]
    453c:	ldp	x29, x30, [sp], #80
    4540:	ret
    4544:	mov	w1, #0x16                  	// #22
    4548:	bl	0 <ctf_set_errno>
    454c:	mov	x20, x0
    4550:	mov	x0, x20
    4554:	ldp	x19, x20, [sp, #16]
    4558:	ldp	x21, x22, [sp, #32]
    455c:	ldp	x29, x30, [sp], #80
    4560:	ret
    4564:	mov	x0, x19
    4568:	mov	w1, #0x16                  	// #22
    456c:	bl	0 <ctf_set_errno>
    4570:	mov	x20, x0
    4574:	cmn	x0, #0x1
    4578:	b.eq	45a8 <ctf_add_volatile+0x1d8>  // b.none
    457c:	mov	w0, #0x2e000000            	// #771751936
    4580:	b	4528 <ctf_add_volatile+0x158>
    4584:	mov	x0, x19
    4588:	mov	w1, #0x40f                 	// #1039
    458c:	bl	0 <ctf_set_errno>
    4590:	mov	x20, x0
    4594:	b	4510 <ctf_add_volatile+0x140>
    4598:	mov	x0, x19
    459c:	mov	w1, #0xc                   	// #12
    45a0:	bl	0 <ctf_set_errno>
    45a4:	tbz	w0, #31, 44a0 <ctf_add_volatile+0xd0>
    45a8:	mov	x20, #0xffffffffffffffff    	// #-1
    45ac:	mov	x0, x20
    45b0:	ldp	x19, x20, [sp, #16]
    45b4:	ldp	x21, x22, [sp, #32]
    45b8:	ldr	x23, [sp, #48]
    45bc:	ldp	x29, x30, [sp], #80
    45c0:	ret
    45c4:	mov	x0, x19
    45c8:	mov	w1, #0x40d                 	// #1037
    45cc:	bl	0 <ctf_set_errno>
    45d0:	mov	x20, x0
    45d4:	b	4510 <ctf_add_volatile+0x140>
    45d8:	mov	x20, #0x400                 	// #1024
    45dc:	b	446c <ctf_add_volatile+0x9c>
    45e0:	mov	x0, x22
    45e4:	mov	x20, #0xffffffffffffffff    	// #-1
    45e8:	bl	0 <free>
    45ec:	ldr	x23, [sp, #48]
    45f0:	b	4550 <ctf_add_volatile+0x180>
    45f4:	mov	x0, x19
    45f8:	mov	w1, #0xb                   	// #11
    45fc:	bl	0 <ctf_set_errno>
    4600:	mov	x20, x0
    4604:	b	4510 <ctf_add_volatile+0x140>

0000000000004608 <ctf_add_const>:
    4608:	stp	x29, x30, [sp, #-80]!
    460c:	mov	x29, sp
    4610:	stp	x19, x20, [sp, #16]
    4614:	stp	x21, x22, [sp, #32]
    4618:	mov	w21, w1
    461c:	mov	x1, #0xfffffffe            	// #4294967294
    4620:	str	x0, [sp, #72]
    4624:	cmp	x2, x1
    4628:	b.hi	477c <ctf_add_const+0x174>  // b.pmore
    462c:	mov	x19, x0
    4630:	mov	x1, x2
    4634:	add	x0, sp, #0x48
    4638:	str	x23, [sp, #48]
    463c:	mov	x23, x2
    4640:	bl	0 <ctf_lookup_by_id>
    4644:	cbz	x0, 47e0 <ctf_add_const+0x1d8>
    4648:	cmp	w21, #0x1
    464c:	b.hi	479c <ctf_add_const+0x194>  // b.pmore
    4650:	ldr	w0, [x19, #552]
    4654:	tbz	w0, #1, 47fc <ctf_add_const+0x1f4>
    4658:	ldr	w1, [x19, #544]
    465c:	mov	w0, #0xfffffffd            	// #-3
    4660:	ldr	x2, [x19, #480]
    4664:	add	w1, w1, #0x1
    4668:	orr	x1, x1, x2
    466c:	cmp	x1, x0
    4670:	b.hi	47bc <ctf_add_const+0x1b4>  // b.pmore
    4674:	mov	x0, #0x7ffffffe            	// #2147483646
    4678:	cmp	x1, x0
    467c:	b.eq	47bc <ctf_add_const+0x1b4>  // b.none
    4680:	ldp	x0, x1, [x19, #448]
    4684:	cbz	x0, 4810 <ctf_add_const+0x208>
    4688:	add	x2, x2, #0x2
    468c:	cmp	x1, x2
    4690:	b.cs	46d8 <ctf_add_const+0xd0>  // b.hs, b.nlast
    4694:	ucvtf	d0, x1
    4698:	fmov	d1, #1.250000000000000000e+00
    469c:	fmul	d0, d0, d1
    46a0:	fcvtzu	x20, d0
    46a4:	cmp	x1, x20
    46a8:	b.eq	46d8 <ctf_add_const+0xd0>  // b.none
    46ac:	lsl	x1, x20, #2
    46b0:	bl	0 <realloc>
    46b4:	cbz	x0, 47d0 <ctf_add_const+0x1c8>
    46b8:	ldr	x3, [x19, #456]
    46bc:	str	x0, [x19, #448]
    46c0:	mov	w1, #0x0                   	// #0
    46c4:	sub	x2, x20, x3
    46c8:	add	x0, x0, x3, lsl #2
    46cc:	lsl	x2, x2, #2
    46d0:	bl	0 <memset>
    46d4:	str	x20, [x19, #456]
    46d8:	mov	x1, #0x1                   	// #1
    46dc:	mov	x0, #0x48                  	// #72
    46e0:	bl	0 <calloc>
    46e4:	mov	x22, x0
    46e8:	cbz	x0, 482c <ctf_add_const+0x224>
    46ec:	ldr	x20, [x19, #480]
    46f0:	ldr	w0, [x19, #552]
    46f4:	add	x20, x20, #0x1
    46f8:	str	x20, [x19, #480]
    46fc:	tbz	w0, #0, 470c <ctf_add_const+0x104>
    4700:	ldr	w0, [x19, #544]
    4704:	add	w0, w0, #0x1
    4708:	orr	x20, x20, x0
    470c:	add	x2, x22, #0x18
    4710:	mov	x1, #0x0                   	// #0
    4714:	mov	x0, x19
    4718:	bl	0 <ctf_str_add_ref>
    471c:	mov	w3, w0
    4720:	mov	x1, x22
    4724:	mov	x0, x19
    4728:	mov	w2, #0xc                   	// #12
    472c:	str	x20, [x22, #16]
    4730:	str	w3, [x22, #24]
    4734:	bl	e30 <ctf_dtd_insert>
    4738:	tbnz	w0, #31, 4818 <ctf_add_const+0x210>
    473c:	ldr	w0, [x19, #552]
    4740:	orr	w0, w0, #0x4
    4744:	str	w0, [x19, #552]
    4748:	cmn	x20, #0x1
    474c:	b.eq	47e0 <ctf_add_const+0x1d8>  // b.none
    4750:	cmp	w21, #0x0
    4754:	mov	w0, #0x32000000            	// #838860800
    4758:	mov	w1, #0x30000000            	// #805306368
    475c:	csel	w0, w0, w1, ne  // ne = any
    4760:	stp	w0, w23, [x22, #28]
    4764:	mov	x0, x20
    4768:	ldp	x19, x20, [sp, #16]
    476c:	ldp	x21, x22, [sp, #32]
    4770:	ldr	x23, [sp, #48]
    4774:	ldp	x29, x30, [sp], #80
    4778:	ret
    477c:	mov	w1, #0x16                  	// #22
    4780:	bl	0 <ctf_set_errno>
    4784:	mov	x20, x0
    4788:	mov	x0, x20
    478c:	ldp	x19, x20, [sp, #16]
    4790:	ldp	x21, x22, [sp, #32]
    4794:	ldp	x29, x30, [sp], #80
    4798:	ret
    479c:	mov	x0, x19
    47a0:	mov	w1, #0x16                  	// #22
    47a4:	bl	0 <ctf_set_errno>
    47a8:	mov	x20, x0
    47ac:	cmn	x0, #0x1
    47b0:	b.eq	47e0 <ctf_add_const+0x1d8>  // b.none
    47b4:	mov	w0, #0x32000000            	// #838860800
    47b8:	b	4760 <ctf_add_const+0x158>
    47bc:	mov	x0, x19
    47c0:	mov	w1, #0x40f                 	// #1039
    47c4:	bl	0 <ctf_set_errno>
    47c8:	mov	x20, x0
    47cc:	b	4748 <ctf_add_const+0x140>
    47d0:	mov	x0, x19
    47d4:	mov	w1, #0xc                   	// #12
    47d8:	bl	0 <ctf_set_errno>
    47dc:	tbz	w0, #31, 46d8 <ctf_add_const+0xd0>
    47e0:	mov	x20, #0xffffffffffffffff    	// #-1
    47e4:	mov	x0, x20
    47e8:	ldp	x19, x20, [sp, #16]
    47ec:	ldp	x21, x22, [sp, #32]
    47f0:	ldr	x23, [sp, #48]
    47f4:	ldp	x29, x30, [sp], #80
    47f8:	ret
    47fc:	mov	x0, x19
    4800:	mov	w1, #0x40d                 	// #1037
    4804:	bl	0 <ctf_set_errno>
    4808:	mov	x20, x0
    480c:	b	4748 <ctf_add_const+0x140>
    4810:	mov	x20, #0x400                 	// #1024
    4814:	b	46a4 <ctf_add_const+0x9c>
    4818:	mov	x0, x22
    481c:	mov	x20, #0xffffffffffffffff    	// #-1
    4820:	bl	0 <free>
    4824:	ldr	x23, [sp, #48]
    4828:	b	4788 <ctf_add_const+0x180>
    482c:	mov	x0, x19
    4830:	mov	w1, #0xb                   	// #11
    4834:	bl	0 <ctf_set_errno>
    4838:	mov	x20, x0
    483c:	b	4748 <ctf_add_const+0x140>

0000000000004840 <ctf_add_restrict>:
    4840:	stp	x29, x30, [sp, #-80]!
    4844:	mov	x29, sp
    4848:	stp	x19, x20, [sp, #16]
    484c:	stp	x21, x22, [sp, #32]
    4850:	mov	w21, w1
    4854:	mov	x1, #0xfffffffe            	// #4294967294
    4858:	str	x0, [sp, #72]
    485c:	cmp	x2, x1
    4860:	b.hi	49b4 <ctf_add_restrict+0x174>  // b.pmore
    4864:	mov	x19, x0
    4868:	mov	x1, x2
    486c:	add	x0, sp, #0x48
    4870:	str	x23, [sp, #48]
    4874:	mov	x23, x2
    4878:	bl	0 <ctf_lookup_by_id>
    487c:	cbz	x0, 4a18 <ctf_add_restrict+0x1d8>
    4880:	cmp	w21, #0x1
    4884:	b.hi	49d4 <ctf_add_restrict+0x194>  // b.pmore
    4888:	ldr	w0, [x19, #552]
    488c:	tbz	w0, #1, 4a34 <ctf_add_restrict+0x1f4>
    4890:	ldr	w1, [x19, #544]
    4894:	mov	w0, #0xfffffffd            	// #-3
    4898:	ldr	x2, [x19, #480]
    489c:	add	w1, w1, #0x1
    48a0:	orr	x1, x1, x2
    48a4:	cmp	x1, x0
    48a8:	b.hi	49f4 <ctf_add_restrict+0x1b4>  // b.pmore
    48ac:	mov	x0, #0x7ffffffe            	// #2147483646
    48b0:	cmp	x1, x0
    48b4:	b.eq	49f4 <ctf_add_restrict+0x1b4>  // b.none
    48b8:	ldp	x0, x1, [x19, #448]
    48bc:	cbz	x0, 4a48 <ctf_add_restrict+0x208>
    48c0:	add	x2, x2, #0x2
    48c4:	cmp	x1, x2
    48c8:	b.cs	4910 <ctf_add_restrict+0xd0>  // b.hs, b.nlast
    48cc:	ucvtf	d0, x1
    48d0:	fmov	d1, #1.250000000000000000e+00
    48d4:	fmul	d0, d0, d1
    48d8:	fcvtzu	x20, d0
    48dc:	cmp	x1, x20
    48e0:	b.eq	4910 <ctf_add_restrict+0xd0>  // b.none
    48e4:	lsl	x1, x20, #2
    48e8:	bl	0 <realloc>
    48ec:	cbz	x0, 4a08 <ctf_add_restrict+0x1c8>
    48f0:	ldr	x3, [x19, #456]
    48f4:	str	x0, [x19, #448]
    48f8:	mov	w1, #0x0                   	// #0
    48fc:	sub	x2, x20, x3
    4900:	add	x0, x0, x3, lsl #2
    4904:	lsl	x2, x2, #2
    4908:	bl	0 <memset>
    490c:	str	x20, [x19, #456]
    4910:	mov	x1, #0x1                   	// #1
    4914:	mov	x0, #0x48                  	// #72
    4918:	bl	0 <calloc>
    491c:	mov	x22, x0
    4920:	cbz	x0, 4a64 <ctf_add_restrict+0x224>
    4924:	ldr	x20, [x19, #480]
    4928:	ldr	w0, [x19, #552]
    492c:	add	x20, x20, #0x1
    4930:	str	x20, [x19, #480]
    4934:	tbz	w0, #0, 4944 <ctf_add_restrict+0x104>
    4938:	ldr	w0, [x19, #544]
    493c:	add	w0, w0, #0x1
    4940:	orr	x20, x20, x0
    4944:	add	x2, x22, #0x18
    4948:	mov	x1, #0x0                   	// #0
    494c:	mov	x0, x19
    4950:	bl	0 <ctf_str_add_ref>
    4954:	mov	w3, w0
    4958:	mov	x1, x22
    495c:	mov	x0, x19
    4960:	mov	w2, #0xd                   	// #13
    4964:	str	x20, [x22, #16]
    4968:	str	w3, [x22, #24]
    496c:	bl	e30 <ctf_dtd_insert>
    4970:	tbnz	w0, #31, 4a50 <ctf_add_restrict+0x210>
    4974:	ldr	w0, [x19, #552]
    4978:	orr	w0, w0, #0x4
    497c:	str	w0, [x19, #552]
    4980:	cmn	x20, #0x1
    4984:	b.eq	4a18 <ctf_add_restrict+0x1d8>  // b.none
    4988:	cmp	w21, #0x0
    498c:	mov	w0, #0x36000000            	// #905969664
    4990:	mov	w1, #0x34000000            	// #872415232
    4994:	csel	w0, w0, w1, ne  // ne = any
    4998:	stp	w0, w23, [x22, #28]
    499c:	mov	x0, x20
    49a0:	ldp	x19, x20, [sp, #16]
    49a4:	ldp	x21, x22, [sp, #32]
    49a8:	ldr	x23, [sp, #48]
    49ac:	ldp	x29, x30, [sp], #80
    49b0:	ret
    49b4:	mov	w1, #0x16                  	// #22
    49b8:	bl	0 <ctf_set_errno>
    49bc:	mov	x20, x0
    49c0:	mov	x0, x20
    49c4:	ldp	x19, x20, [sp, #16]
    49c8:	ldp	x21, x22, [sp, #32]
    49cc:	ldp	x29, x30, [sp], #80
    49d0:	ret
    49d4:	mov	x0, x19
    49d8:	mov	w1, #0x16                  	// #22
    49dc:	bl	0 <ctf_set_errno>
    49e0:	mov	x20, x0
    49e4:	cmn	x0, #0x1
    49e8:	b.eq	4a18 <ctf_add_restrict+0x1d8>  // b.none
    49ec:	mov	w0, #0x36000000            	// #905969664
    49f0:	b	4998 <ctf_add_restrict+0x158>
    49f4:	mov	x0, x19
    49f8:	mov	w1, #0x40f                 	// #1039
    49fc:	bl	0 <ctf_set_errno>
    4a00:	mov	x20, x0
    4a04:	b	4980 <ctf_add_restrict+0x140>
    4a08:	mov	x0, x19
    4a0c:	mov	w1, #0xc                   	// #12
    4a10:	bl	0 <ctf_set_errno>
    4a14:	tbz	w0, #31, 4910 <ctf_add_restrict+0xd0>
    4a18:	mov	x20, #0xffffffffffffffff    	// #-1
    4a1c:	mov	x0, x20
    4a20:	ldp	x19, x20, [sp, #16]
    4a24:	ldp	x21, x22, [sp, #32]
    4a28:	ldr	x23, [sp, #48]
    4a2c:	ldp	x29, x30, [sp], #80
    4a30:	ret
    4a34:	mov	x0, x19
    4a38:	mov	w1, #0x40d                 	// #1037
    4a3c:	bl	0 <ctf_set_errno>
    4a40:	mov	x20, x0
    4a44:	b	4980 <ctf_add_restrict+0x140>
    4a48:	mov	x20, #0x400                 	// #1024
    4a4c:	b	48dc <ctf_add_restrict+0x9c>
    4a50:	mov	x0, x22
    4a54:	mov	x20, #0xffffffffffffffff    	// #-1
    4a58:	bl	0 <free>
    4a5c:	ldr	x23, [sp, #48]
    4a60:	b	49c0 <ctf_add_restrict+0x180>
    4a64:	mov	x0, x19
    4a68:	mov	w1, #0xb                   	// #11
    4a6c:	bl	0 <ctf_set_errno>
    4a70:	mov	x20, x0
    4a74:	b	4980 <ctf_add_restrict+0x140>

0000000000004a78 <ctf_add_enumerator>:
    4a78:	stp	x29, x30, [sp, #-80]!
    4a7c:	mov	x29, sp
    4a80:	stp	x19, x20, [sp, #16]
    4a84:	mov	x20, x0
    4a88:	ldr	x0, [x0, #568]
    4a8c:	stp	x21, x22, [sp, #32]
    4a90:	mov	x21, x2
    4a94:	stp	x23, x24, [sp, #48]
    4a98:	mov	w23, w3
    4a9c:	bl	0 <ctf_dynhash_lookup>
    4aa0:	cbz	x21, 4c18 <ctf_add_enumerator+0x1a0>
    4aa4:	mov	x22, x0
    4aa8:	ldr	w0, [x20, #552]
    4aac:	tbz	w0, #1, 4bf8 <ctf_add_enumerator+0x180>
    4ab0:	cbz	x22, 4c28 <ctf_add_enumerator+0x1b0>
    4ab4:	ldr	x1, [x20]
    4ab8:	ldr	w0, [x22, #28]
    4abc:	ldr	x1, [x1]
    4ac0:	str	x25, [sp, #64]
    4ac4:	blr	x1
    4ac8:	mov	w19, w0
    4acc:	ldr	x1, [x20]
    4ad0:	ldr	w0, [x22, #28]
    4ad4:	ldr	x1, [x1, #8]
    4ad8:	blr	x1
    4adc:	mov	w24, w0
    4ae0:	ldr	x1, [x20]
    4ae4:	ldr	w0, [x22, #28]
    4ae8:	ldr	x1, [x1, #16]
    4aec:	blr	x1
    4af0:	mov	w25, w0
    4af4:	cmp	w19, #0x8
    4af8:	b.ne	4b50 <ctf_add_enumerator+0xd8>  // b.any
    4afc:	mov	w0, #0xffffff              	// #16777215
    4b00:	cmp	w25, w0
    4b04:	b.eq	4c38 <ctf_add_enumerator+0x1c0>  // b.none
    4b08:	ldr	x19, [x22, #56]
    4b0c:	cbnz	x19, 4b1c <ctf_add_enumerator+0xa4>
    4b10:	b	4b74 <ctf_add_enumerator+0xfc>
    4b14:	ldr	x19, [x19, #8]
    4b18:	cbz	x19, 4b74 <ctf_add_enumerator+0xfc>
    4b1c:	ldr	x0, [x19, #16]
    4b20:	mov	x1, x21
    4b24:	bl	0 <strcmp>
    4b28:	cbnz	w0, 4b14 <ctf_add_enumerator+0x9c>
    4b2c:	mov	x0, x20
    4b30:	mov	w1, #0x410                 	// #1040
    4b34:	bl	0 <ctf_set_errno>
    4b38:	ldp	x19, x20, [sp, #16]
    4b3c:	ldp	x21, x22, [sp, #32]
    4b40:	ldp	x23, x24, [sp, #48]
    4b44:	ldr	x25, [sp, #64]
    4b48:	ldp	x29, x30, [sp], #80
    4b4c:	ret
    4b50:	mov	x0, x20
    4b54:	mov	w1, #0x3fc                 	// #1020
    4b58:	bl	0 <ctf_set_errno>
    4b5c:	ldr	x25, [sp, #64]
    4b60:	ldp	x19, x20, [sp, #16]
    4b64:	ldp	x21, x22, [sp, #32]
    4b68:	ldp	x23, x24, [sp, #48]
    4b6c:	ldp	x29, x30, [sp], #80
    4b70:	ret
    4b74:	mov	x0, #0x30                  	// #48
    4b78:	bl	0 <malloc>
    4b7c:	mov	x19, x0
    4b80:	cbz	x0, 4c54 <ctf_add_enumerator+0x1dc>
    4b84:	mov	x0, x21
    4b88:	bl	0 <strdup>
    4b8c:	cbz	x0, 4c4c <ctf_add_enumerator+0x1d4>
    4b90:	adrp	x1, 0 <ctf_sort_var>
    4b94:	cmp	w24, #0x0
    4b98:	add	w2, w25, #0x1
    4b9c:	str	x0, [x19, #16]
    4ba0:	ldr	q0, [x1]
    4ba4:	and	w2, w2, #0xffffff
    4ba8:	mov	w1, #0x2000000             	// #33554432
    4bac:	csel	w24, w24, w1, eq  // eq = none
    4bb0:	orr	w2, w2, w24
    4bb4:	str	w23, [x19, #40]
    4bb8:	orr	w2, w2, #0x20000000
    4bbc:	stur	q0, [x19, #24]
    4bc0:	mov	x1, x19
    4bc4:	str	w2, [x22, #28]
    4bc8:	add	x0, x22, #0x30
    4bcc:	bl	0 <ctf_list_append>
    4bd0:	ldr	w1, [x20, #552]
    4bd4:	mov	w0, #0x0                   	// #0
    4bd8:	ldr	x25, [sp, #64]
    4bdc:	orr	w1, w1, #0x4
    4be0:	str	w1, [x20, #552]
    4be4:	ldp	x19, x20, [sp, #16]
    4be8:	ldp	x21, x22, [sp, #32]
    4bec:	ldp	x23, x24, [sp, #48]
    4bf0:	ldp	x29, x30, [sp], #80
    4bf4:	ret
    4bf8:	mov	x0, x20
    4bfc:	mov	w1, #0x40d                 	// #1037
    4c00:	bl	0 <ctf_set_errno>
    4c04:	ldp	x19, x20, [sp, #16]
    4c08:	ldp	x21, x22, [sp, #32]
    4c0c:	ldp	x23, x24, [sp, #48]
    4c10:	ldp	x29, x30, [sp], #80
    4c14:	ret
    4c18:	mov	x0, x20
    4c1c:	mov	w1, #0x16                  	// #22
    4c20:	bl	0 <ctf_set_errno>
    4c24:	b	4b60 <ctf_add_enumerator+0xe8>
    4c28:	mov	x0, x20
    4c2c:	mov	w1, #0x3fa                 	// #1018
    4c30:	bl	0 <ctf_set_errno>
    4c34:	b	4b60 <ctf_add_enumerator+0xe8>
    4c38:	mov	x0, x20
    4c3c:	mov	w1, #0x40e                 	// #1038
    4c40:	bl	0 <ctf_set_errno>
    4c44:	ldr	x25, [sp, #64]
    4c48:	b	4b60 <ctf_add_enumerator+0xe8>
    4c4c:	mov	x0, x19
    4c50:	bl	0 <free>
    4c54:	mov	x0, x20
    4c58:	mov	w1, #0xb                   	// #11
    4c5c:	bl	0 <ctf_set_errno>
    4c60:	ldr	x25, [sp, #64]
    4c64:	b	4b60 <ctf_add_enumerator+0xe8>

0000000000004c68 <enumadd>:
    4c68:	mov	x4, x2
    4c6c:	stp	x29, x30, [sp, #-16]!
    4c70:	mov	x2, x0
    4c74:	mov	x29, sp
    4c78:	mov	w3, w1
    4c7c:	ldp	x0, x1, [x4]
    4c80:	bl	4a78 <ctf_add_enumerator>
    4c84:	lsr	w0, w0, #31
    4c88:	ldp	x29, x30, [sp], #16
    4c8c:	ret

0000000000004c90 <ctf_add_member_offset>:
    4c90:	stp	x29, x30, [sp, #-128]!
    4c94:	mov	x29, sp
    4c98:	stp	x19, x20, [sp, #16]
    4c9c:	mov	x20, x0
    4ca0:	ldr	x0, [x0, #568]
    4ca4:	stp	x21, x22, [sp, #32]
    4ca8:	mov	x21, x2
    4cac:	stp	x25, x26, [sp, #64]
    4cb0:	mov	x25, x3
    4cb4:	mov	x26, x4
    4cb8:	bl	0 <ctf_dynhash_lookup>
    4cbc:	ldr	w1, [x20, #552]
    4cc0:	tbz	w1, #1, 4e68 <ctf_add_member_offset+0x1d8>
    4cc4:	mov	x22, x0
    4cc8:	cbz	x0, 4f44 <ctf_add_member_offset+0x2b4>
    4ccc:	ldr	x1, [x20]
    4cd0:	stp	x23, x24, [sp, #48]
    4cd4:	ldr	w0, [x0, #28]
    4cd8:	stp	x27, x28, [sp, #80]
    4cdc:	ldr	x1, [x1]
    4ce0:	blr	x1
    4ce4:	mov	w23, w0
    4ce8:	ldr	x1, [x20]
    4cec:	ldr	w0, [x22, #28]
    4cf0:	ldr	x1, [x1, #8]
    4cf4:	blr	x1
    4cf8:	mov	w27, w0
    4cfc:	ldr	x1, [x20]
    4d00:	ldr	w0, [x22, #28]
    4d04:	ldr	x1, [x1, #16]
    4d08:	blr	x1
    4d0c:	mov	w24, w0
    4d10:	sub	w1, w23, #0x6
    4d14:	cmp	w1, #0x1
    4d18:	b.hi	4ef4 <ctf_add_member_offset+0x264>  // b.pmore
    4d1c:	mov	w0, #0xffffff              	// #16777215
    4d20:	cmp	w24, w0
    4d24:	b.eq	4edc <ctf_add_member_offset+0x24c>  // b.none
    4d28:	cbz	x21, 4d54 <ctf_add_member_offset+0xc4>
    4d2c:	ldr	x19, [x22, #56]
    4d30:	cbz	x19, 4d54 <ctf_add_member_offset+0xc4>
    4d34:	nop
    4d38:	ldr	x0, [x19, #16]
    4d3c:	mov	x1, x21
    4d40:	cbz	x0, 4d4c <ctf_add_member_offset+0xbc>
    4d44:	bl	0 <strcmp>
    4d48:	cbz	w0, 4f1c <ctf_add_member_offset+0x28c>
    4d4c:	ldr	x19, [x19, #8]
    4d50:	cbnz	x19, 4d38 <ctf_add_member_offset+0xa8>
    4d54:	mov	x1, x25
    4d58:	mov	x0, x20
    4d5c:	bl	0 <ctf_type_size>
    4d60:	mov	x19, x0
    4d64:	tbnz	x0, #63, 4fe4 <ctf_add_member_offset+0x354>
    4d68:	mov	x1, x25
    4d6c:	mov	x0, x20
    4d70:	bl	0 <ctf_type_align>
    4d74:	mov	x28, x0
    4d78:	tbnz	x0, #63, 4fe4 <ctf_add_member_offset+0x354>
    4d7c:	mov	x0, #0x30                  	// #48
    4d80:	bl	0 <malloc>
    4d84:	mov	x4, x0
    4d88:	cbz	x0, 4ffc <ctf_add_member_offset+0x36c>
    4d8c:	cbz	x21, 4da8 <ctf_add_member_offset+0x118>
    4d90:	mov	x0, x21
    4d94:	str	x4, [sp, #104]
    4d98:	bl	0 <strdup>
    4d9c:	mov	x21, x0
    4da0:	ldr	x4, [sp, #104]
    4da4:	cbz	x0, 4ff4 <ctf_add_member_offset+0x364>
    4da8:	mov	w0, #0xffffffff            	// #-1
    4dac:	stp	x21, x25, [x4, #16]
    4db0:	cmp	w24, #0x0
    4db4:	str	w0, [x4, #40]
    4db8:	ccmp	w23, #0x6, #0x0, ne  // ne = any
    4dbc:	b.eq	4e88 <ctf_add_member_offset+0x1f8>  // b.none
    4dc0:	ldr	x5, [x20]
    4dc4:	add	x1, x22, #0x18
    4dc8:	mov	x0, x20
    4dcc:	mov	x3, #0x0                   	// #0
    4dd0:	mov	x2, #0x0                   	// #0
    4dd4:	str	x4, [sp, #104]
    4dd8:	ldr	x5, [x5, #24]
    4ddc:	str	xzr, [x4, #32]
    4de0:	blr	x5
    4de4:	cmp	x19, x0
    4de8:	csel	x19, x19, x0, ge  // ge = tcont
    4dec:	ldr	x4, [sp, #104]
    4df0:	mov	x0, x19
    4df4:	mov	x2, #0xfffffffe            	// #4294967294
    4df8:	mov	w1, w19
    4dfc:	cmp	x0, x2
    4e00:	b.ls	4e10 <ctf_add_member_offset+0x180>  // b.plast
    4e04:	lsr	x0, x0, #32
    4e08:	mov	w1, #0xffffffff            	// #-1
    4e0c:	stp	w0, w19, [x22, #36]
    4e10:	add	w24, w24, #0x1
    4e14:	cmp	w27, #0x0
    4e18:	and	w24, w24, #0xffffff
    4e1c:	mov	w0, #0x2000000             	// #33554432
    4e20:	orr	w23, w24, w23, lsl #26
    4e24:	csel	w27, w27, w0, eq  // eq = none
    4e28:	orr	w27, w23, w27
    4e2c:	stp	w27, w1, [x22, #28]
    4e30:	add	x0, x22, #0x30
    4e34:	mov	x1, x4
    4e38:	bl	0 <ctf_list_append>
    4e3c:	ldr	w1, [x20, #552]
    4e40:	mov	w0, #0x0                   	// #0
    4e44:	ldp	x23, x24, [sp, #48]
    4e48:	orr	w1, w1, #0x4
    4e4c:	ldp	x27, x28, [sp, #80]
    4e50:	str	w1, [x20, #552]
    4e54:	ldp	x19, x20, [sp, #16]
    4e58:	ldp	x21, x22, [sp, #32]
    4e5c:	ldp	x25, x26, [sp, #64]
    4e60:	ldp	x29, x30, [sp], #128
    4e64:	ret
    4e68:	mov	x0, x20
    4e6c:	mov	w1, #0x40d                 	// #1037
    4e70:	bl	0 <ctf_set_errno>
    4e74:	ldp	x19, x20, [sp, #16]
    4e78:	ldp	x21, x22, [sp, #32]
    4e7c:	ldp	x25, x26, [sp, #64]
    4e80:	ldp	x29, x30, [sp], #128
    4e84:	ret
    4e88:	cmn	x26, #0x1
    4e8c:	b.eq	4f54 <ctf_add_member_offset+0x2c4>  // b.none
    4e90:	ldr	x5, [x20]
    4e94:	add	x1, x22, #0x18
    4e98:	mov	x0, x20
    4e9c:	mov	x3, #0x0                   	// #0
    4ea0:	mov	x2, #0x0                   	// #0
    4ea4:	str	x4, [sp, #104]
    4ea8:	ldr	x5, [x5, #24]
    4eac:	str	x26, [x4, #32]
    4eb0:	blr	x5
    4eb4:	cmp	w26, #0x0
    4eb8:	add	w1, w26, #0x7
    4ebc:	csel	w26, w1, w26, lt  // lt = tstop
    4ec0:	ldr	x4, [sp, #104]
    4ec4:	asr	w26, w26, #3
    4ec8:	add	x19, x19, w26, sxtw
    4ecc:	cmp	x19, x0
    4ed0:	csel	x19, x19, x0, ge  // ge = tcont
    4ed4:	mov	x0, x19
    4ed8:	b	4df4 <ctf_add_member_offset+0x164>
    4edc:	mov	x0, x20
    4ee0:	mov	w1, #0x40e                 	// #1038
    4ee4:	bl	0 <ctf_set_errno>
    4ee8:	ldp	x23, x24, [sp, #48]
    4eec:	ldp	x27, x28, [sp, #80]
    4ef0:	b	4e74 <ctf_add_member_offset+0x1e4>
    4ef4:	mov	x0, x20
    4ef8:	mov	w1, #0x3fb                 	// #1019
    4efc:	bl	0 <ctf_set_errno>
    4f00:	ldp	x19, x20, [sp, #16]
    4f04:	ldp	x21, x22, [sp, #32]
    4f08:	ldp	x23, x24, [sp, #48]
    4f0c:	ldp	x25, x26, [sp, #64]
    4f10:	ldp	x27, x28, [sp, #80]
    4f14:	ldp	x29, x30, [sp], #128
    4f18:	ret
    4f1c:	mov	x0, x20
    4f20:	mov	w1, #0x410                 	// #1040
    4f24:	bl	0 <ctf_set_errno>
    4f28:	ldp	x19, x20, [sp, #16]
    4f2c:	ldp	x21, x22, [sp, #32]
    4f30:	ldp	x23, x24, [sp, #48]
    4f34:	ldp	x25, x26, [sp, #64]
    4f38:	ldp	x27, x28, [sp, #80]
    4f3c:	ldp	x29, x30, [sp], #128
    4f40:	ret
    4f44:	mov	x0, x20
    4f48:	mov	w1, #0x3fa                 	// #1018
    4f4c:	bl	0 <ctf_set_errno>
    4f50:	b	4e74 <ctf_add_member_offset+0x1e4>
    4f54:	ldr	x21, [x22, #48]
    4f58:	mov	x0, x20
    4f5c:	str	x4, [sp, #104]
    4f60:	ldr	x1, [x21, #24]
    4f64:	bl	0 <ctf_type_resolve>
    4f68:	mov	x1, x0
    4f6c:	mov	x25, x0
    4f70:	add	x2, sp, #0x70
    4f74:	mov	x0, x20
    4f78:	ldr	x21, [x21, #32]
    4f7c:	bl	0 <ctf_type_encoding>
    4f80:	ldr	x4, [sp, #104]
    4f84:	cbnz	w0, 4fc0 <ctf_add_member_offset+0x330>
    4f88:	ldr	w0, [sp, #120]
    4f8c:	add	x21, x21, x0
    4f90:	cmp	x28, #0x0
    4f94:	add	x0, x21, #0x7
    4f98:	csinc	x28, x28, xzr, gt
    4f9c:	sub	x1, x28, #0x1
    4fa0:	add	x0, x1, x0, lsr #3
    4fa4:	udiv	x0, x0, x28
    4fa8:	mul	x28, x0, x28
    4fac:	add	x0, x19, x28
    4fb0:	mov	x19, x0
    4fb4:	lsl	x28, x28, #3
    4fb8:	str	x28, [x4, #32]
    4fbc:	b	4df4 <ctf_add_member_offset+0x164>
    4fc0:	mov	x1, x25
    4fc4:	mov	x0, x20
    4fc8:	str	x4, [sp, #104]
    4fcc:	bl	0 <ctf_type_size>
    4fd0:	cmp	x0, #0x0
    4fd4:	add	x0, x21, x0, lsl #3
    4fd8:	csel	x21, x0, x21, gt
    4fdc:	ldr	x4, [sp, #104]
    4fe0:	b	4f90 <ctf_add_member_offset+0x300>
    4fe4:	mov	w0, #0xffffffff            	// #-1
    4fe8:	ldp	x23, x24, [sp, #48]
    4fec:	ldp	x27, x28, [sp, #80]
    4ff0:	b	4e74 <ctf_add_member_offset+0x1e4>
    4ff4:	mov	x0, x4
    4ff8:	bl	0 <free>
    4ffc:	mov	x0, x20
    5000:	mov	w1, #0xb                   	// #11
    5004:	bl	0 <ctf_set_errno>
    5008:	ldp	x23, x24, [sp, #48]
    500c:	ldp	x27, x28, [sp, #80]
    5010:	b	4e74 <ctf_add_member_offset+0x1e4>
    5014:	nop

0000000000005018 <ctf_add_member_encoded>:
    5018:	stp	x29, x30, [sp, #-112]!
    501c:	mov	x29, sp
    5020:	stp	x19, x20, [sp, #16]
    5024:	mov	x19, x0
    5028:	mov	x20, x1
    502c:	ldr	x0, [x0, #568]
    5030:	mov	x1, x3
    5034:	stp	x21, x22, [sp, #32]
    5038:	mov	x21, x2
    503c:	mov	x22, x4
    5040:	stp	x23, x24, [sp, #48]
    5044:	mov	x23, x3
    5048:	str	x5, [sp, #80]
    504c:	str	w6, [sp, #88]
    5050:	bl	0 <ctf_dynhash_lookup>
    5054:	ldr	x1, [x19]
    5058:	ldr	w0, [x0, #28]
    505c:	ldr	x1, [x1]
    5060:	blr	x1
    5064:	sub	w1, w0, #0x1
    5068:	cmp	w1, #0x1
    506c:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    5070:	b.ne	5140 <ctf_add_member_encoded+0x128>  // b.any
    5074:	ldr	w24, [sp, #88]
    5078:	str	x19, [sp, #104]
    507c:	cmp	w24, #0xff
    5080:	b.hi	5164 <ctf_add_member_encoded+0x14c>  // b.pmore
    5084:	stp	x25, x26, [sp, #64]
    5088:	ldr	w25, [sp, #84]
    508c:	cmp	w25, #0xff
    5090:	b.hi	5160 <ctf_add_member_encoded+0x148>  // b.pmore
    5094:	mov	x0, #0xfffffffe            	// #4294967294
    5098:	sxtw	x26, w23
    509c:	cmp	x0, w23, sxtw
    50a0:	b.cc	51b0 <ctf_add_member_encoded+0x198>  // b.lo, b.ul, b.last
    50a4:	mov	x1, x26
    50a8:	add	x0, sp, #0x68
    50ac:	bl	0 <ctf_lookup_by_id>
    50b0:	cbz	x0, 51a4 <ctf_add_member_encoded+0x18c>
    50b4:	ldr	x0, [sp, #104]
    50b8:	mov	x1, x26
    50bc:	bl	0 <ctf_type_kind_unsliced>
    50c0:	sub	w1, w0, #0x1
    50c4:	cmp	w1, #0x1
    50c8:	ccmp	w0, #0x8, #0x4, hi  // hi = pmore
    50cc:	b.ne	51c8 <ctf_add_member_encoded+0x1b0>  // b.any
    50d0:	mov	w3, #0xe                   	// #14
    50d4:	add	x4, sp, #0x60
    50d8:	mov	x0, x19
    50dc:	mov	x2, #0x0                   	// #0
    50e0:	mov	w1, #0x0                   	// #0
    50e4:	bl	ef0 <ctf_add_generic>
    50e8:	mov	x3, x0
    50ec:	cmn	x0, #0x1
    50f0:	b.eq	51a4 <ctf_add_member_encoded+0x18c>  // b.none
    50f4:	neg	w0, w24
    50f8:	mov	w2, #0x38000000            	// #939524096
    50fc:	and	w0, w0, #0xfffffff8
    5100:	neg	w0, w0
    5104:	ldr	x1, [sp, #96]
    5108:	lsr	w0, w0, #3
    510c:	sub	x0, x0, #0x1
    5110:	orr	x0, x0, x0, lsr #1
    5114:	str	w26, [x1, #48]
    5118:	strh	w25, [x1, #52]
    511c:	orr	x0, x0, x0, lsr #2
    5120:	strh	w24, [x1, #54]
    5124:	ldp	x25, x26, [sp, #64]
    5128:	orr	x0, x0, x0, lsr #4
    512c:	orr	x0, x0, x0, lsr #8
    5130:	orr	x0, x0, x0, lsr #16
    5134:	add	x0, x0, #0x1
    5138:	stp	w2, w0, [x1, #28]
    513c:	b	517c <ctf_add_member_encoded+0x164>
    5140:	mov	x0, x19
    5144:	mov	w1, #0x3fe                 	// #1022
    5148:	bl	0 <ctf_set_errno>
    514c:	ldp	x19, x20, [sp, #16]
    5150:	ldp	x21, x22, [sp, #32]
    5154:	ldp	x23, x24, [sp, #48]
    5158:	ldp	x29, x30, [sp], #112
    515c:	ret
    5160:	ldp	x25, x26, [sp, #64]
    5164:	mov	x0, x19
    5168:	mov	w1, #0x416                 	// #1046
    516c:	bl	0 <ctf_set_errno>
    5170:	mov	x3, x0
    5174:	cmn	x3, #0x1
    5178:	b.eq	51e0 <ctf_add_member_encoded+0x1c8>  // b.none
    517c:	mov	x4, x22
    5180:	mov	x2, x21
    5184:	mov	x1, x20
    5188:	mov	x0, x19
    518c:	bl	4c90 <ctf_add_member_offset>
    5190:	ldp	x19, x20, [sp, #16]
    5194:	ldp	x21, x22, [sp, #32]
    5198:	ldp	x23, x24, [sp, #48]
    519c:	ldp	x29, x30, [sp], #112
    51a0:	ret
    51a4:	mov	w0, #0xffffffff            	// #-1
    51a8:	ldp	x25, x26, [sp, #64]
    51ac:	b	514c <ctf_add_member_encoded+0x134>
    51b0:	mov	x0, x19
    51b4:	mov	w1, #0x16                  	// #22
    51b8:	bl	0 <ctf_set_errno>
    51bc:	mov	x3, x0
    51c0:	ldp	x25, x26, [sp, #64]
    51c4:	b	5174 <ctf_add_member_encoded+0x15c>
    51c8:	mov	x0, x19
    51cc:	mov	w1, #0x3fe                 	// #1022
    51d0:	bl	0 <ctf_set_errno>
    51d4:	mov	x3, x0
    51d8:	ldp	x25, x26, [sp, #64]
    51dc:	b	5174 <ctf_add_member_encoded+0x15c>
    51e0:	mov	w0, w3
    51e4:	b	514c <ctf_add_member_encoded+0x134>

00000000000051e8 <ctf_add_member>:
    51e8:	mov	x4, #0xffffffffffffffff    	// #-1
    51ec:	b	4c90 <ctf_add_member_offset>

00000000000051f0 <ctf_add_variable>:
    51f0:	stp	x29, x30, [sp, #-64]!
    51f4:	mov	x29, sp
    51f8:	ldr	w3, [x0, #552]
    51fc:	str	x0, [sp, #56]
    5200:	tbz	w3, #1, 52d0 <ctf_add_variable+0xe0>
    5204:	stp	x19, x20, [sp, #16]
    5208:	mov	x19, x0
    520c:	mov	x20, x1
    5210:	ldr	x0, [x0, #592]
    5214:	stp	x21, x22, [sp, #32]
    5218:	mov	x22, x2
    521c:	bl	0 <ctf_dynhash_lookup>
    5220:	cbz	x0, 5240 <ctf_add_variable+0x50>
    5224:	mov	x0, x19
    5228:	mov	w1, #0x410                 	// #1040
    522c:	bl	0 <ctf_set_errno>
    5230:	ldp	x19, x20, [sp, #16]
    5234:	ldp	x21, x22, [sp, #32]
    5238:	ldp	x29, x30, [sp], #64
    523c:	ret
    5240:	mov	x1, x22
    5244:	add	x0, sp, #0x38
    5248:	bl	0 <ctf_lookup_by_id>
    524c:	cbz	x0, 52f0 <ctf_add_variable+0x100>
    5250:	mov	x1, x22
    5254:	mov	x0, x19
    5258:	bl	0 <ctf_type_resolve>
    525c:	cmn	x0, #0x1
    5260:	b.eq	52e0 <ctf_add_variable+0xf0>  // b.none
    5264:	mov	x0, #0x28                  	// #40
    5268:	bl	0 <malloc>
    526c:	mov	x21, x0
    5270:	cbz	x0, 5324 <ctf_add_variable+0x134>
    5274:	cbz	x20, 5300 <ctf_add_variable+0x110>
    5278:	mov	x0, x20
    527c:	bl	0 <strdup>
    5280:	str	x0, [x21, #16]
    5284:	mov	x1, x0
    5288:	cbz	x0, 531c <ctf_add_variable+0x12c>
    528c:	ldr	x0, [x19, #592]
    5290:	mov	x2, x21
    5294:	ldr	x3, [x19, #624]
    5298:	stp	x22, x3, [x21, #24]
    529c:	bl	0 <ctf_dynhash_insert>
    52a0:	tbnz	w0, #31, 5308 <ctf_add_variable+0x118>
    52a4:	mov	x1, x21
    52a8:	add	x0, x19, #0x258
    52ac:	bl	0 <ctf_list_append>
    52b0:	ldr	w1, [x19, #552]
    52b4:	mov	w0, #0x0                   	// #0
    52b8:	ldp	x21, x22, [sp, #32]
    52bc:	orr	w1, w1, #0x4
    52c0:	str	w1, [x19, #552]
    52c4:	ldp	x19, x20, [sp, #16]
    52c8:	ldp	x29, x30, [sp], #64
    52cc:	ret
    52d0:	mov	w1, #0x40d                 	// #1037
    52d4:	bl	0 <ctf_set_errno>
    52d8:	ldp	x29, x30, [sp], #64
    52dc:	ret
    52e0:	mov	x0, x19
    52e4:	bl	0 <ctf_errno>
    52e8:	cmp	w0, #0x41b
    52ec:	b.ne	5264 <ctf_add_variable+0x74>  // b.any
    52f0:	mov	w0, #0xffffffff            	// #-1
    52f4:	ldp	x19, x20, [sp, #16]
    52f8:	ldp	x21, x22, [sp, #32]
    52fc:	b	5238 <ctf_add_variable+0x48>
    5300:	ldr	x1, [x0, #16]
    5304:	b	528c <ctf_add_variable+0x9c>
    5308:	ldr	x0, [x21, #16]
    530c:	bl	0 <free>
    5310:	mov	x0, x21
    5314:	bl	0 <free>
    5318:	b	52f0 <ctf_add_variable+0x100>
    531c:	mov	x0, x21
    5320:	bl	0 <free>
    5324:	mov	x0, x19
    5328:	mov	w1, #0xb                   	// #11
    532c:	bl	0 <ctf_set_errno>
    5330:	ldp	x19, x20, [sp, #16]
    5334:	ldp	x21, x22, [sp, #32]
    5338:	b	5238 <ctf_add_variable+0x48>
    533c:	nop

0000000000005340 <ctf_add_type>:
    5340:	stp	x29, x30, [sp, #-48]!
    5344:	mov	x29, sp
    5348:	stp	x19, x20, [sp, #16]
    534c:	mov	x20, x0
    5350:	mov	x19, x1
    5354:	ldr	x0, [x1, #696]
    5358:	str	x21, [sp, #32]
    535c:	mov	x21, x2
    5360:	cbz	x0, 539c <ctf_add_type+0x5c>
    5364:	mov	x2, x21
    5368:	mov	x3, x19
    536c:	mov	x1, x19
    5370:	mov	x0, x20
    5374:	bl	37c0 <ctf_add_type_internal>
    5378:	mov	x1, x0
    537c:	ldr	x0, [x19, #696]
    5380:	mov	x19, x1
    5384:	bl	0 <ctf_dynhash_empty>
    5388:	mov	x0, x19
    538c:	ldp	x19, x20, [sp, #16]
    5390:	ldr	x21, [sp, #32]
    5394:	ldp	x29, x30, [sp], #48
    5398:	ret
    539c:	adrp	x1, 0 <ctf_hash_eq_integer>
    53a0:	adrp	x0, 0 <ctf_hash_integer>
    53a4:	add	x1, x1, #0x0
    53a8:	add	x0, x0, #0x0
    53ac:	mov	x3, #0x0                   	// #0
    53b0:	mov	x2, #0x0                   	// #0
    53b4:	bl	0 <ctf_dynhash_create>
    53b8:	str	x0, [x19, #696]
    53bc:	cbnz	x0, 5364 <ctf_add_type+0x24>
    53c0:	mov	x0, x20
    53c4:	mov	w1, #0xc                   	// #12
    53c8:	ldp	x19, x20, [sp, #16]
    53cc:	ldr	x21, [sp, #32]
    53d0:	ldp	x29, x30, [sp], #48
    53d4:	b	0 <ctf_set_errno>

00000000000053d8 <ctf_gzwrite>:
    53d8:	stp	x29, x30, [sp, #-48]!
    53dc:	mov	x29, sp
    53e0:	stp	x19, x20, [sp, #16]
    53e4:	mov	x19, #0x34                  	// #52
    53e8:	ldr	x20, [x0, #8]
    53ec:	stp	x21, x22, [sp, #32]
    53f0:	mov	x22, x0
    53f4:	mov	x21, x1
    53f8:	mov	w2, w19
    53fc:	mov	x1, x20
    5400:	mov	x0, x21
    5404:	bl	0 <gzwrite>
    5408:	sxtw	x0, w0
    540c:	cmp	x0, #0x0
    5410:	b.le	5464 <ctf_gzwrite+0x8c>
    5414:	add	x20, x20, x0
    5418:	subs	x19, x19, x0
    541c:	b.ne	53f8 <ctf_gzwrite+0x20>  // b.any
    5420:	ldp	x20, x19, [x22, #408]
    5424:	cbnz	x19, 5448 <ctf_gzwrite+0x70>
    5428:	mov	w0, #0x0                   	// #0
    542c:	ldp	x19, x20, [sp, #16]
    5430:	ldp	x21, x22, [sp, #32]
    5434:	ldp	x29, x30, [sp], #48
    5438:	ret
    543c:	add	x20, x20, x0
    5440:	subs	x19, x19, x0
    5444:	b.eq	5428 <ctf_gzwrite+0x50>  // b.none
    5448:	mov	w2, w19
    544c:	mov	x1, x20
    5450:	mov	x0, x21
    5454:	bl	0 <gzwrite>
    5458:	sxtw	x0, w0
    545c:	cmp	x0, #0x0
    5460:	b.gt	543c <ctf_gzwrite+0x64>
    5464:	bl	0 <__errno_location>
    5468:	mov	x1, x0
    546c:	mov	x0, x22
    5470:	ldr	w1, [x1]
    5474:	bl	0 <ctf_set_errno>
    5478:	ldp	x19, x20, [sp, #16]
    547c:	ldp	x21, x22, [sp, #32]
    5480:	ldp	x29, x30, [sp], #48
    5484:	ret

0000000000005488 <ctf_compress_write>:
    5488:	stp	x29, x30, [sp, #-128]!
    548c:	mov	x29, sp
    5490:	stp	x21, x22, [sp, #32]
    5494:	mov	w21, w1
    5498:	ldr	w1, [x0, #552]
    549c:	stp	x23, x24, [sp, #48]
    54a0:	mov	x22, x0
    54a4:	tbz	w1, #1, 55c8 <ctf_compress_write+0x140>
    54a8:	tbnz	w1, #2, 55b8 <ctf_compress_write+0x130>
    54ac:	ldr	x1, [x22, #8]
    54b0:	ldr	x0, [x22, #416]
    54b4:	ldp	x2, x3, [x1]
    54b8:	stp	x2, x3, [sp, #72]
    54bc:	ldp	x2, x3, [x1, #16]
    54c0:	stp	x2, x3, [sp, #88]
    54c4:	ldrb	w2, [sp, #75]
    54c8:	ldp	x4, x5, [x1, #32]
    54cc:	stp	x4, x5, [sp, #104]
    54d0:	orr	w2, w2, #0x1
    54d4:	ldr	w1, [x1, #48]
    54d8:	strb	w2, [sp, #75]
    54dc:	str	w1, [sp, #120]
    54e0:	bl	0 <compressBound>
    54e4:	str	x0, [sp, #64]
    54e8:	bl	0 <malloc>
    54ec:	mov	x24, x0
    54f0:	cbz	x0, 5600 <ctf_compress_write+0x178>
    54f4:	ldp	x2, x3, [x22, #408]
    54f8:	add	x1, sp, #0x40
    54fc:	stp	x19, x20, [sp, #16]
    5500:	add	x20, sp, #0x48
    5504:	mov	x19, #0x34                  	// #52
    5508:	bl	0 <compress>
    550c:	mov	w23, w0
    5510:	cbnz	w0, 55d8 <ctf_compress_write+0x150>
    5514:	nop
    5518:	mov	x2, x19
    551c:	mov	x1, x20
    5520:	mov	w0, w21
    5524:	bl	0 <write>
    5528:	tbnz	x0, #63, 5580 <ctf_compress_write+0xf8>
    552c:	add	x2, x0, x0, lsl #1
    5530:	sub	x19, x19, x0
    5534:	cmp	x19, #0x0
    5538:	add	x0, x0, x2, lsl #2
    553c:	add	x20, x20, x0, lsl #2
    5540:	b.gt	5518 <ctf_compress_write+0x90>
    5544:	ldr	x2, [sp, #64]
    5548:	cmp	x2, #0x0
    554c:	b.le	5598 <ctf_compress_write+0x110>
    5550:	mov	x19, x24
    5554:	b	5570 <ctf_compress_write+0xe8>
    5558:	ldr	x2, [sp, #64]
    555c:	add	x19, x19, x0
    5560:	sub	x2, x2, x0
    5564:	str	x2, [sp, #64]
    5568:	cmp	x2, #0x0
    556c:	b.le	5598 <ctf_compress_write+0x110>
    5570:	mov	x1, x19
    5574:	mov	w0, w21
    5578:	bl	0 <write>
    557c:	tbz	x0, #63, 5558 <ctf_compress_write+0xd0>
    5580:	bl	0 <__errno_location>
    5584:	mov	x1, x0
    5588:	mov	x0, x22
    558c:	ldr	w1, [x1]
    5590:	bl	0 <ctf_set_errno>
    5594:	mov	w23, w0
    5598:	mov	x0, x24
    559c:	bl	0 <free>
    55a0:	ldp	x19, x20, [sp, #16]
    55a4:	mov	w0, w23
    55a8:	ldp	x21, x22, [sp, #32]
    55ac:	ldp	x23, x24, [sp, #48]
    55b0:	ldp	x29, x30, [sp], #128
    55b4:	ret
    55b8:	bl	250 <ctf_serialize.part.0>
    55bc:	tbz	w0, #31, 54ac <ctf_compress_write+0x24>
    55c0:	mov	w23, #0xffffffff            	// #-1
    55c4:	b	55a4 <ctf_compress_write+0x11c>
    55c8:	mov	w1, #0x40d                 	// #1037
    55cc:	bl	0 <ctf_set_errno>
    55d0:	tbz	w0, #31, 54ac <ctf_compress_write+0x24>
    55d4:	b	55c0 <ctf_compress_write+0x138>
    55d8:	bl	0 <zError>
    55dc:	mov	x1, x0
    55e0:	adrp	x0, 0 <ctf_sort_var>
    55e4:	add	x0, x0, #0x0
    55e8:	bl	0 <ctf_dprintf>
    55ec:	mov	x0, x22
    55f0:	mov	w1, #0x413                 	// #1043
    55f4:	bl	0 <ctf_set_errno>
    55f8:	mov	w23, w0
    55fc:	b	5598 <ctf_compress_write+0x110>
    5600:	mov	x0, x22
    5604:	mov	w1, #0x3f6                 	// #1014
    5608:	bl	0 <ctf_set_errno>
    560c:	mov	w23, w0
    5610:	b	55a4 <ctf_compress_write+0x11c>
    5614:	nop

0000000000005618 <ctf_write_mem>:
    5618:	stp	x29, x30, [sp, #-80]!
    561c:	mov	x29, sp
    5620:	stp	x19, x20, [sp, #16]
    5624:	mov	x20, x1
    5628:	ldr	w1, [x0, #552]
    562c:	stp	x21, x22, [sp, #32]
    5630:	mov	x21, x2
    5634:	str	x23, [sp, #48]
    5638:	mov	x23, x0
    563c:	tbz	w1, #1, 5758 <ctf_write_mem+0x140>
    5640:	tbnz	w1, #2, 56f4 <ctf_write_mem+0xdc>
    5644:	ldr	x0, [x23, #416]
    5648:	bl	0 <compressBound>
    564c:	str	x0, [sp, #72]
    5650:	ldr	x1, [x23, #416]
    5654:	cmp	x1, x21
    5658:	b.cc	5718 <ctf_write_mem+0x100>  // b.lo, b.ul, b.last
    565c:	add	x0, x0, #0x34
    5660:	bl	0 <malloc>
    5664:	mov	x19, x0
    5668:	cbz	x0, 5794 <ctf_write_mem+0x17c>
    566c:	ldr	x3, [x23, #8]
    5670:	mov	x6, #0x34                  	// #52
    5674:	ldr	x1, [x23, #408]
    5678:	add	x0, x0, x6
    567c:	ldp	x4, x5, [x3]
    5680:	stp	x4, x5, [x19]
    5684:	ldp	x4, x5, [x3, #16]
    5688:	stp	x4, x5, [x19, #16]
    568c:	ldp	x4, x5, [x3, #32]
    5690:	stp	x4, x5, [x19, #32]
    5694:	ldr	w2, [x3, #48]
    5698:	str	x6, [x20]
    569c:	str	w2, [x19, #48]
    56a0:	ldr	x22, [x23, #416]
    56a4:	cmp	x22, x21
    56a8:	b.cc	5724 <ctf_write_mem+0x10c>  // b.lo, b.ul, b.last
    56ac:	ldrb	w4, [x19, #3]
    56b0:	mov	x2, x1
    56b4:	mov	x3, x22
    56b8:	add	x1, sp, #0x48
    56bc:	orr	w4, w4, #0x1
    56c0:	strb	w4, [x19, #3]
    56c4:	bl	0 <compress>
    56c8:	cbnz	w0, 5764 <ctf_write_mem+0x14c>
    56cc:	ldr	x0, [x20]
    56d0:	ldr	x1, [sp, #72]
    56d4:	ldp	x21, x22, [sp, #32]
    56d8:	add	x0, x0, x1
    56dc:	str	x0, [x20]
    56e0:	mov	x0, x19
    56e4:	ldp	x19, x20, [sp, #16]
    56e8:	ldr	x23, [sp, #48]
    56ec:	ldp	x29, x30, [sp], #80
    56f0:	ret
    56f4:	bl	250 <ctf_serialize.part.0>
    56f8:	mov	x19, #0x0                   	// #0
    56fc:	tbz	w0, #31, 5644 <ctf_write_mem+0x2c>
    5700:	mov	x0, x19
    5704:	ldp	x19, x20, [sp, #16]
    5708:	ldp	x21, x22, [sp, #32]
    570c:	ldr	x23, [sp, #48]
    5710:	ldp	x29, x30, [sp], #80
    5714:	ret
    5718:	mov	x0, x1
    571c:	str	x1, [sp, #72]
    5720:	b	565c <ctf_write_mem+0x44>
    5724:	ldrb	w3, [x19, #3]
    5728:	mov	x2, x22
    572c:	add	x22, x22, #0x34
    5730:	and	w3, w3, #0xfffffffe
    5734:	strb	w3, [x19, #3]
    5738:	bl	0 <memcpy>
    573c:	str	x22, [x20]
    5740:	mov	x0, x19
    5744:	ldp	x19, x20, [sp, #16]
    5748:	ldp	x21, x22, [sp, #32]
    574c:	ldr	x23, [sp, #48]
    5750:	ldp	x29, x30, [sp], #80
    5754:	ret
    5758:	mov	w1, #0x40d                 	// #1037
    575c:	bl	0 <ctf_set_errno>
    5760:	b	56f8 <ctf_write_mem+0xe0>
    5764:	bl	0 <zError>
    5768:	mov	x1, x0
    576c:	adrp	x0, 0 <ctf_sort_var>
    5770:	add	x0, x0, #0x0
    5774:	bl	0 <ctf_dprintf>
    5778:	mov	w1, #0x413                 	// #1043
    577c:	mov	x0, x23
    5780:	bl	0 <ctf_set_errno>
    5784:	mov	x0, x19
    5788:	mov	x19, #0x0                   	// #0
    578c:	bl	0 <free>
    5790:	b	5700 <ctf_write_mem+0xe8>
    5794:	mov	x0, x23
    5798:	mov	w1, #0xc                   	// #12
    579c:	bl	0 <ctf_set_errno>
    57a0:	b	5700 <ctf_write_mem+0xe8>
    57a4:	nop

00000000000057a8 <ctf_write>:
    57a8:	stp	x29, x30, [sp, #-48]!
    57ac:	mov	x29, sp
    57b0:	stp	x21, x22, [sp, #32]
    57b4:	mov	w21, w1
    57b8:	ldr	w1, [x0, #552]
    57bc:	mov	x22, x0
    57c0:	tbz	w1, #1, 5870 <ctf_write+0xc8>
    57c4:	tbnz	w1, #2, 5860 <ctf_write+0xb8>
    57c8:	stp	x19, x20, [sp, #16]
    57cc:	mov	x19, #0x34                  	// #52
    57d0:	ldr	x20, [x22, #8]
    57d4:	nop
    57d8:	mov	x2, x19
    57dc:	mov	x1, x20
    57e0:	mov	w0, w21
    57e4:	bl	0 <write>
    57e8:	cmp	x0, #0x0
    57ec:	b.le	583c <ctf_write+0x94>
    57f0:	add	x20, x20, x0
    57f4:	subs	x19, x19, x0
    57f8:	b.ne	57d8 <ctf_write+0x30>  // b.any
    57fc:	ldp	x20, x19, [x22, #408]
    5800:	cbnz	x19, 5824 <ctf_write+0x7c>
    5804:	mov	w0, #0x0                   	// #0
    5808:	ldp	x19, x20, [sp, #16]
    580c:	ldp	x21, x22, [sp, #32]
    5810:	ldp	x29, x30, [sp], #48
    5814:	ret
    5818:	add	x20, x20, x0
    581c:	subs	x19, x19, x0
    5820:	b.eq	5804 <ctf_write+0x5c>  // b.none
    5824:	mov	x2, x19
    5828:	mov	x1, x20
    582c:	mov	w0, w21
    5830:	bl	0 <write>
    5834:	cmp	x0, #0x0
    5838:	b.gt	5818 <ctf_write+0x70>
    583c:	bl	0 <__errno_location>
    5840:	mov	x1, x0
    5844:	mov	x0, x22
    5848:	ldr	w1, [x1]
    584c:	bl	0 <ctf_set_errno>
    5850:	ldp	x19, x20, [sp, #16]
    5854:	ldp	x21, x22, [sp, #32]
    5858:	ldp	x29, x30, [sp], #48
    585c:	ret
    5860:	bl	250 <ctf_serialize.part.0>
    5864:	tbz	w0, #31, 57c8 <ctf_write+0x20>
    5868:	mov	w0, #0xffffffff            	// #-1
    586c:	b	5854 <ctf_write+0xac>
    5870:	mov	w1, #0x40d                 	// #1037
    5874:	bl	0 <ctf_set_errno>
    5878:	tbz	w0, #31, 57c8 <ctf_write+0x20>
    587c:	b	5868 <ctf_write+0xc0>

ctf-decl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_decl_init>:
   0:	mvni	v0.4s, #0x0
   4:	stp	xzr, xzr, [x0]
   8:	stp	xzr, xzr, [x0, #16]
   c:	stp	xzr, xzr, [x0, #32]
  10:	stp	xzr, xzr, [x0, #48]
  14:	str	q0, [x0, #64]
  18:	stp	xzr, xzr, [x0, #80]
  1c:	str	xzr, [x0, #96]
  20:	ret
  24:	nop

0000000000000028 <ctf_decl_fini>:
  28:	stp	x29, x30, [sp, #-48]!
  2c:	mov	x29, sp
  30:	stp	x19, x20, [sp, #16]
  34:	add	x20, x0, #0x8
  38:	str	x21, [sp, #32]
  3c:	add	x21, x0, #0x48
  40:	ldr	x19, [x20]
  44:	cbz	x19, 58 <ctf_decl_fini+0x30>
  48:	mov	x0, x19
  4c:	ldr	x19, [x19, #8]
  50:	bl	0 <free>
  54:	cbnz	x19, 48 <ctf_decl_fini+0x20>
  58:	add	x20, x20, #0x10
  5c:	cmp	x20, x21
  60:	b.ne	40 <ctf_decl_fini+0x18>  // b.any
  64:	ldp	x19, x20, [sp, #16]
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret
  74:	nop

0000000000000078 <ctf_decl_push>:
  78:	stp	x29, x30, [sp, #-128]!
  7c:	mov	x29, sp
  80:	stp	x19, x20, [sp, #16]
  84:	mov	x20, x0
  88:	add	x0, sp, #0x58
  8c:	stp	x21, x22, [sp, #32]
  90:	mov	x22, x2
  94:	str	x1, [sp, #88]
  98:	mov	x1, x2
  9c:	bl	0 <ctf_lookup_by_id>
  a0:	cbz	x0, 264 <ctf_decl_push+0x1ec>
  a4:	ldr	x1, [sp, #88]
  a8:	mov	x21, x0
  ac:	ldr	w0, [x0, #4]
  b0:	stp	x23, x24, [sp, #48]
  b4:	ldr	x1, [x1]
  b8:	ldr	x1, [x1]
  bc:	blr	x1
  c0:	mov	w19, w0
  c4:	cmp	w0, #0xa
  c8:	b.eq	1dc <ctf_decl_push+0x164>  // b.none
  cc:	b.hi	16c <ctf_decl_push+0xf4>  // b.pmore
  d0:	cmp	w0, #0x4
  d4:	b.eq	280 <ctf_decl_push+0x208>  // b.none
  d8:	cmp	w0, #0x5
  dc:	b.ne	1b4 <ctf_decl_push+0x13c>  // b.any
  e0:	ldr	w2, [x21, #8]
  e4:	mov	x0, x20
  e8:	ldr	x1, [sp, #88]
  ec:	mov	w24, #0x0                   	// #0
  f0:	mov	w23, #0x1                   	// #1
  f4:	mov	w21, #0x3                   	// #3
  f8:	bl	78 <ctf_decl_push>
  fc:	nop
 100:	mov	x0, #0x20                  	// #32
 104:	bl	0 <malloc>
 108:	mov	x1, x0
 10c:	cbz	x0, 2c8 <ctf_decl_push+0x250>
 110:	ubfiz	x2, x21, #4, #32
 114:	str	x22, [x1, #16]
 118:	add	x2, x20, x2
 11c:	stp	w19, w23, [x1, #24]
 120:	mov	w0, w21
 124:	ldr	x2, [x2, #8]
 128:	cbz	x2, 218 <ctf_decl_push+0x1a0>
 12c:	ldr	w2, [x20, #80]
 130:	cmp	w2, w21
 134:	ccmp	w21, #0x1, #0x2, cc  // cc = lo, ul, last
 138:	b.ls	23c <ctf_decl_push+0x1c4>  // b.plast
 13c:	add	x0, x20, x0, lsl #4
 140:	cmp	w19, #0x4
 144:	b.eq	154 <ctf_decl_push+0xdc>  // b.none
 148:	cmp	w21, #0x0
 14c:	ccmp	w24, #0x0, #0x4, eq  // eq = none
 150:	b.eq	200 <ctf_decl_push+0x188>  // b.none
 154:	bl	0 <ctf_list_prepend>
 158:	ldp	x23, x24, [sp, #48]
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldp	x21, x22, [sp, #32]
 164:	ldp	x29, x30, [sp], #128
 168:	ret
 16c:	cmp	w0, #0xd
 170:	b.ls	244 <ctf_decl_push+0x1cc>  // b.plast
 174:	cmp	w0, #0xe
 178:	b.ne	1f0 <ctf_decl_push+0x178>  // b.any
 17c:	str	x25, [sp, #64]
 180:	mov	x1, x22
 184:	ldr	x25, [sp, #88]
 188:	mov	w24, #0x0                   	// #0
 18c:	mov	w23, #0x1                   	// #1
 190:	mov	w21, #0x0                   	// #0
 194:	mov	x0, x25
 198:	bl	0 <ctf_type_reference>
 19c:	mov	x1, x25
 1a0:	mov	x2, x0
 1a4:	mov	x0, x20
 1a8:	bl	78 <ctf_decl_push>
 1ac:	ldr	x25, [sp, #64]
 1b0:	b	100 <ctf_decl_push+0x88>
 1b4:	cmp	w0, #0x3
 1b8:	b.ne	1f0 <ctf_decl_push+0x178>  // b.any
 1bc:	ldr	w2, [x21, #8]
 1c0:	mov	w23, #0x1                   	// #1
 1c4:	ldr	x1, [sp, #88]
 1c8:	mov	x0, x20
 1cc:	mov	w21, w23
 1d0:	mov	w24, #0x0                   	// #0
 1d4:	bl	78 <ctf_decl_push>
 1d8:	b	100 <ctf_decl_push+0x88>
 1dc:	ldr	w1, [x21]
 1e0:	ldr	x0, [sp, #88]
 1e4:	bl	0 <ctf_strptr>
 1e8:	ldrb	w0, [x0]
 1ec:	cbz	w0, 2b0 <ctf_decl_push+0x238>
 1f0:	mov	w24, #0x0                   	// #0
 1f4:	mov	w23, #0x1                   	// #1
 1f8:	mov	w21, #0x0                   	// #0
 1fc:	b	100 <ctf_decl_push+0x88>
 200:	bl	0 <ctf_list_append>
 204:	ldp	x19, x20, [sp, #16]
 208:	ldp	x21, x22, [sp, #32]
 20c:	ldp	x23, x24, [sp, #48]
 210:	ldp	x29, x30, [sp], #128
 214:	ret
 218:	ldr	w3, [x20, #84]
 21c:	add	x2, x0, #0x10
 220:	add	w4, w3, #0x1
 224:	str	w4, [x20, #84]
 228:	str	w3, [x20, x2, lsl #2]
 22c:	ldr	w2, [x20, #80]
 230:	cmp	w2, w21
 234:	ccmp	w21, #0x1, #0x2, cc  // cc = lo, ul, last
 238:	b.hi	13c <ctf_decl_push+0xc4>  // b.pmore
 23c:	str	w21, [x20, #80]
 240:	b	13c <ctf_decl_push+0xc4>
 244:	ldr	w2, [x21, #8]
 248:	mov	x0, x20
 24c:	ldr	x1, [sp, #88]
 250:	mov	w24, #0x1                   	// #1
 254:	mov	w23, w24
 258:	bl	78 <ctf_decl_push>
 25c:	ldr	w21, [x20, #80]
 260:	b	100 <ctf_decl_push+0x88>
 264:	ldr	x0, [sp, #88]
 268:	ldp	x21, x22, [sp, #32]
 26c:	ldr	w0, [x0, #556]
 270:	str	w0, [x20, #96]
 274:	ldp	x19, x20, [sp, #16]
 278:	ldp	x29, x30, [sp], #128
 27c:	ret
 280:	ldr	x0, [sp, #88]
 284:	add	x2, sp, #0x68
 288:	mov	x1, x22
 28c:	mov	w24, #0x0                   	// #0
 290:	mov	w21, #0x2                   	// #2
 294:	bl	0 <ctf_array_info>
 298:	ldr	x1, [sp, #88]
 29c:	mov	x0, x20
 2a0:	ldr	x2, [sp, #104]
 2a4:	bl	78 <ctf_decl_push>
 2a8:	ldr	w23, [sp, #120]
 2ac:	b	100 <ctf_decl_push+0x88>
 2b0:	ldr	w2, [x21, #8]
 2b4:	mov	x0, x20
 2b8:	ldr	x1, [sp, #88]
 2bc:	bl	78 <ctf_decl_push>
 2c0:	ldp	x23, x24, [sp, #48]
 2c4:	b	15c <ctf_decl_push+0xe4>
 2c8:	mov	w0, #0xb                   	// #11
 2cc:	ldp	x23, x24, [sp, #48]
 2d0:	str	w0, [x20, #96]
 2d4:	b	15c <ctf_decl_push+0xe4>

00000000000002d8 <ctf_decl_sprintf>:
 2d8:	stp	x29, x30, [sp, #-288]!
 2dc:	mov	x29, sp
 2e0:	str	q0, [sp, #112]
 2e4:	str	q1, [sp, #128]
 2e8:	str	x19, [sp, #16]
 2ec:	mov	x19, x0
 2f0:	ldr	w0, [x0, #100]
 2f4:	str	q2, [sp, #144]
 2f8:	str	q3, [sp, #160]
 2fc:	str	q4, [sp, #176]
 300:	str	q5, [sp, #192]
 304:	str	q6, [sp, #208]
 308:	str	q7, [sp, #224]
 30c:	stp	x2, x3, [sp, #240]
 310:	stp	x4, x5, [sp, #256]
 314:	stp	x6, x7, [sp, #272]
 318:	cbz	w0, 328 <ctf_decl_sprintf+0x50>
 31c:	ldr	x19, [sp, #16]
 320:	ldp	x29, x30, [sp], #288
 324:	ret
 328:	add	x2, sp, #0x120
 32c:	stp	x2, x2, [sp, #80]
 330:	add	x0, sp, #0xf0
 334:	mov	w4, #0xffffffd0            	// #-48
 338:	mov	w3, #0xffffff80            	// #-128
 33c:	str	x0, [sp, #96]
 340:	add	x2, sp, #0x20
 344:	stp	w4, w3, [sp, #104]
 348:	add	x0, sp, #0x48
 34c:	ldp	x4, x5, [sp, #80]
 350:	stp	x4, x5, [sp, #32]
 354:	ldp	x4, x5, [sp, #96]
 358:	stp	x4, x5, [sp, #48]
 35c:	bl	0 <vasprintf>
 360:	cmp	w0, #0x0
 364:	b.gt	398 <ctf_decl_sprintf+0xc0>
 368:	ldr	x0, [x19, #88]
 36c:	b.ne	374 <ctf_decl_sprintf+0x9c>  // b.any
 370:	cbnz	x0, 384 <ctf_decl_sprintf+0xac>
 374:	bl	0 <free>
 378:	str	xzr, [x19, #88]
 37c:	mov	w0, #0x1                   	// #1
 380:	str	w0, [x19, #100]
 384:	ldr	x0, [sp, #72]
 388:	bl	0 <free>
 38c:	ldr	x19, [sp, #16]
 390:	ldp	x29, x30, [sp], #288
 394:	ret
 398:	ldr	x1, [sp, #72]
 39c:	ldr	x0, [x19, #88]
 3a0:	bl	0 <ctf_str_append>
 3a4:	cbz	x0, 3b0 <ctf_decl_sprintf+0xd8>
 3a8:	str	x0, [x19, #88]
 3ac:	b	384 <ctf_decl_sprintf+0xac>
 3b0:	ldr	x0, [x19, #88]
 3b4:	cbnz	x0, 384 <ctf_decl_sprintf+0xac>
 3b8:	b	374 <ctf_decl_sprintf+0x9c>
 3bc:	nop

00000000000003c0 <ctf_decl_buf>:
 3c0:	ldr	x0, [x0, #88]
 3c4:	ret

ctf-error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_errmsg>:
   0:	sub	w1, w0, #0x3e8
   4:	cmp	w1, #0x33
   8:	b.hi	2c <ctf_errmsg+0x2c>  // b.pmore
   c:	adrp	x0, 0 <ctf_errmsg>
  10:	add	x0, x0, #0x0
  14:	ldr	x0, [x0, w1, sxtw #3]
  18:	adrp	x1, 0 <ctf_errmsg>
  1c:	add	x1, x1, #0x0
  20:	cmp	x0, #0x0
  24:	csel	x0, x1, x0, eq  // eq = none
  28:	ret
  2c:	stp	x29, x30, [sp, #-16]!
  30:	mov	x29, sp
  34:	bl	0 <ctf_strerror>
  38:	cmp	x0, #0x0
  3c:	adrp	x1, 0 <ctf_errmsg>
  40:	add	x1, x1, #0x0
  44:	csel	x0, x1, x0, eq  // eq = none
  48:	ldp	x29, x30, [sp], #16
  4c:	ret

0000000000000050 <ctf_errno>:
  50:	ldr	w0, [x0, #556]
  54:	ret

ctf-hash.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_hashtab_traverse>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	ldr	x3, [x0]
   c:	ldp	x4, x2, [x1]
  10:	ldp	x0, x1, [x3]
  14:	blr	x4
  18:	mov	w0, #0x1                   	// #1
  1c:	ldp	x29, x30, [sp], #16
  20:	ret
  24:	nop

0000000000000028 <ctf_dynhash_item_free>:
  28:	stp	x29, x30, [sp, #-32]!
  2c:	mov	x29, sp
  30:	ldr	x1, [x0, #16]
  34:	str	x19, [sp, #16]
  38:	mov	x19, x0
  3c:	cbz	x1, 4c <ctf_dynhash_item_free+0x24>
  40:	ldr	x0, [x0]
  44:	cbz	x0, 4c <ctf_dynhash_item_free+0x24>
  48:	blr	x1
  4c:	ldr	x1, [x19, #24]
  50:	cbz	x1, 60 <ctf_dynhash_item_free+0x38>
  54:	ldr	x0, [x19, #8]
  58:	cbz	x0, 60 <ctf_dynhash_item_free+0x38>
  5c:	blr	x1
  60:	mov	x0, x19
  64:	ldr	x19, [sp, #16]
  68:	ldp	x29, x30, [sp], #32
  6c:	b	0 <free>

0000000000000070 <ctf_hashtab_traverse_remove>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	mov	x29, sp
  78:	stp	x19, x20, [sp, #16]
  7c:	mov	x19, x1
  80:	mov	x20, x0
  84:	ldr	x1, [x0]
  88:	ldp	x3, x2, [x19, #8]
  8c:	ldp	x0, x1, [x1]
  90:	blr	x3
  94:	cbnz	w0, a8 <ctf_hashtab_traverse_remove+0x38>
  98:	mov	w0, #0x1                   	// #1
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret
  a8:	ldr	x0, [x19]
  ac:	mov	x1, x20
  b0:	bl	0 <htab_clear_slot>
  b4:	mov	w0, #0x1                   	// #1
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret
  c4:	nop

00000000000000c8 <ctf_hash_integer>:
  c8:	adrp	x1, 0 <htab_hash_pointer>
  cc:	ldr	x0, [x0]
  d0:	ldr	x1, [x1]
  d4:	mov	x16, x1
  d8:	br	x16
  dc:	nop

00000000000000e0 <ctf_hash_eq_integer>:
  e0:	adrp	x2, 0 <htab_eq_pointer>
  e4:	ldr	x0, [x0]
  e8:	ldr	x2, [x2]
  ec:	ldr	x1, [x1]
  f0:	mov	x16, x2
  f4:	br	x16

00000000000000f8 <ctf_hash_string>:
  f8:	ldr	x0, [x0]
  fc:	b	0 <htab_hash_string>

0000000000000100 <ctf_hash_eq_string>:
 100:	stp	x29, x30, [sp, #-16]!
 104:	mov	x29, sp
 108:	ldr	x0, [x0]
 10c:	ldr	x1, [x1]
 110:	bl	0 <strcmp>
 114:	cmp	w0, #0x0
 118:	cset	w0, eq  // eq = none
 11c:	ldp	x29, x30, [sp], #16
 120:	ret
 124:	nop

0000000000000128 <ctf_hash_type_mapping_key>:
 128:	stp	x29, x30, [sp, #-32]!
 12c:	mov	x29, sp
 130:	stp	x19, x20, [sp, #16]
 134:	adrp	x19, 0 <htab_hash_pointer>
 138:	ldr	x20, [x0]
 13c:	ldr	x1, [x19]
 140:	ldr	x0, [x20]
 144:	blr	x1
 148:	ldr	x1, [x19]
 14c:	mov	w19, w0
 150:	ldr	x0, [x20, #8]
 154:	blr	x1
 158:	mov	w1, #0x3b                  	// #59
 15c:	madd	w0, w0, w1, w19
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret
 16c:	nop

0000000000000170 <ctf_hash_eq_type_mapping_key>:
 170:	ldr	x2, [x0]
 174:	ldr	x0, [x1]
 178:	ldr	x3, [x2]
 17c:	ldr	x1, [x0]
 180:	cmp	x3, x1
 184:	b.eq	190 <ctf_hash_eq_type_mapping_key+0x20>  // b.none
 188:	mov	w0, #0x0                   	// #0
 18c:	ret
 190:	ldr	x0, [x0, #8]
 194:	ldr	x1, [x2, #8]
 198:	cmp	x1, x0
 19c:	cset	w0, eq  // eq = none
 1a0:	ret
 1a4:	nop

00000000000001a8 <ctf_dynhash_create>:
 1a8:	stp	x29, x30, [sp, #-64]!
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	mov	x20, x0
 1b8:	mov	x0, #0x18                  	// #24
 1bc:	stp	x21, x22, [sp, #32]
 1c0:	mov	x21, x1
 1c4:	mov	x22, x3
 1c8:	str	x23, [sp, #48]
 1cc:	mov	x23, x2
 1d0:	bl	0 <malloc>
 1d4:	mov	x19, x0
 1d8:	cbz	x0, 210 <ctf_dynhash_create+0x68>
 1dc:	mov	x2, x21
 1e0:	mov	x1, x20
 1e4:	adrp	x5, 0 <free>
 1e8:	adrp	x4, 0 <xcalloc>
 1ec:	add	x5, x5, #0x0
 1f0:	add	x4, x4, #0x0
 1f4:	adrp	x3, 0 <ctf_hashtab_traverse>
 1f8:	mov	x0, #0x7                   	// #7
 1fc:	add	x3, x3, #0x0
 200:	bl	0 <htab_create_alloc>
 204:	str	x0, [x19]
 208:	cbz	x0, 228 <ctf_dynhash_create+0x80>
 20c:	stp	x23, x22, [x19, #8]
 210:	mov	x0, x19
 214:	ldp	x19, x20, [sp, #16]
 218:	ldp	x21, x22, [sp, #32]
 21c:	ldr	x23, [sp, #48]
 220:	ldp	x29, x30, [sp], #64
 224:	ret
 228:	mov	x0, x19
 22c:	mov	x19, #0x0                   	// #0
 230:	bl	0 <free>
 234:	b	210 <ctf_dynhash_create+0x68>

0000000000000238 <ctf_dynhash_insert>:
 238:	stp	x29, x30, [sp, #-96]!
 23c:	mov	x29, sp
 240:	stp	x19, x20, [sp, #16]
 244:	mov	x20, x0
 248:	ldr	x0, [x0]
 24c:	stp	x21, x22, [sp, #32]
 250:	mov	x21, x1
 254:	mov	x22, x2
 258:	add	x1, sp, #0x40
 25c:	mov	w2, #0x1                   	// #1
 260:	stp	x23, x24, [sp, #48]
 264:	str	x21, [sp, #64]
 268:	stp	xzr, xzr, [sp, #72]
 26c:	str	xzr, [sp, #88]
 270:	ldp	x24, x23, [x20, #8]
 274:	bl	0 <htab_find_slot>
 278:	cbz	x0, 2fc <ctf_dynhash_insert+0xc4>
 27c:	mov	x19, x0
 280:	ldr	x0, [x0]
 284:	cbz	x0, 2dc <ctf_dynhash_insert+0xa4>
 288:	cbz	x24, 298 <ctf_dynhash_insert+0x60>
 28c:	ldr	x0, [x0]
 290:	blr	x24
 294:	ldr	x0, [x19]
 298:	cbz	x23, 2a8 <ctf_dynhash_insert+0x70>
 29c:	ldr	x0, [x0, #8]
 2a0:	blr	x23
 2a4:	ldr	x0, [x19]
 2a8:	str	x21, [x0]
 2ac:	ldr	x0, [x19]
 2b0:	str	x22, [x0, #8]
 2b4:	ldr	x1, [x19]
 2b8:	cbz	x1, 2f0 <ctf_dynhash_insert+0xb8>
 2bc:	ldur	q0, [x20, #8]
 2c0:	mov	w0, #0x0                   	// #0
 2c4:	str	q0, [x1, #16]
 2c8:	ldp	x19, x20, [sp, #16]
 2cc:	ldp	x21, x22, [sp, #32]
 2d0:	ldp	x23, x24, [sp, #48]
 2d4:	ldp	x29, x30, [sp], #96
 2d8:	ret
 2dc:	mov	x0, #0x20                  	// #32
 2e0:	bl	0 <malloc>
 2e4:	str	x0, [x19]
 2e8:	cbnz	x0, 2a8 <ctf_dynhash_insert+0x70>
 2ec:	nop
 2f0:	bl	0 <__errno_location>
 2f4:	ldr	w0, [x0]
 2f8:	b	2c8 <ctf_dynhash_insert+0x90>
 2fc:	bl	0 <__errno_location>
 300:	mov	x2, x0
 304:	mov	w1, #0xfffffff4            	// #-12
 308:	mov	w0, w1
 30c:	str	w1, [x2]
 310:	b	2c8 <ctf_dynhash_insert+0x90>
 314:	nop

0000000000000318 <ctf_dynhash_remove>:
 318:	stp	x29, x30, [sp, #-48]!
 31c:	mov	x2, x1
 320:	mov	x29, sp
 324:	ldr	x0, [x0]
 328:	add	x1, sp, #0x10
 32c:	stp	x2, xzr, [sp, #16]
 330:	stp	xzr, xzr, [sp, #32]
 334:	bl	0 <htab_remove_elt>
 338:	ldp	x29, x30, [sp], #48
 33c:	ret

0000000000000340 <ctf_dynhash_empty>:
 340:	ldr	x0, [x0]
 344:	b	0 <htab_empty>

0000000000000348 <ctf_dynhash_lookup>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	mov	x3, x1
 350:	mov	w2, #0x0                   	// #0
 354:	mov	x29, sp
 358:	ldr	x0, [x0]
 35c:	add	x1, sp, #0x10
 360:	str	x3, [sp, #16]
 364:	stp	xzr, xzr, [sp, #24]
 368:	str	xzr, [sp, #40]
 36c:	bl	0 <htab_find_slot>
 370:	cbz	x0, 37c <ctf_dynhash_lookup+0x34>
 374:	ldr	x0, [x0]
 378:	ldr	x0, [x0, #8]
 37c:	ldp	x29, x30, [sp], #48
 380:	ret
 384:	nop

0000000000000388 <ctf_dynhash_iter>:
 388:	stp	x29, x30, [sp, #-32]!
 38c:	mov	x4, x1
 390:	mov	x3, x2
 394:	mov	x29, sp
 398:	ldr	x0, [x0]
 39c:	add	x2, sp, #0x10
 3a0:	adrp	x1, 0 <ctf_hashtab_traverse>
 3a4:	add	x1, x1, #0x0
 3a8:	stp	x4, x3, [sp, #16]
 3ac:	bl	0 <htab_traverse>
 3b0:	ldp	x29, x30, [sp], #32
 3b4:	ret

00000000000003b8 <ctf_dynhash_iter_remove>:
 3b8:	stp	x29, x30, [sp, #-48]!
 3bc:	mov	x4, x1
 3c0:	mov	x3, x2
 3c4:	mov	x29, sp
 3c8:	ldr	x0, [x0]
 3cc:	add	x2, sp, #0x18
 3d0:	adrp	x1, 0 <ctf_hashtab_traverse>
 3d4:	add	x1, x1, #0x0
 3d8:	stp	x0, x4, [sp, #24]
 3dc:	str	x3, [sp, #40]
 3e0:	bl	0 <htab_traverse>
 3e4:	ldp	x29, x30, [sp], #48
 3e8:	ret
 3ec:	nop

00000000000003f0 <ctf_dynhash_destroy>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	mov	x29, sp
 3f8:	str	x19, [sp, #16]
 3fc:	mov	x19, x0
 400:	cbz	x0, 40c <ctf_dynhash_destroy+0x1c>
 404:	ldr	x0, [x0]
 408:	bl	0 <htab_delete>
 40c:	mov	x0, x19
 410:	ldr	x19, [sp, #16]
 414:	ldp	x29, x30, [sp], #32
 418:	b	0 <free>
 41c:	nop

0000000000000420 <ctf_hash_create>:
 420:	adrp	x5, 0 <free>
 424:	add	x5, x5, #0x0
 428:	mov	x3, x5
 42c:	adrp	x4, 0 <xcalloc>
 430:	add	x4, x4, #0x0
 434:	b	0 <htab_create_alloc>

0000000000000438 <ctf_hash_size>:
 438:	stp	x29, x30, [sp, #-16]!
 43c:	mov	x29, sp
 440:	bl	0 <htab_elements>
 444:	ldp	x29, x30, [sp], #16
 448:	ret
 44c:	nop

0000000000000450 <ctf_hash_insert_type>:
 450:	stp	x29, x30, [sp, #-96]!
 454:	mov	x29, sp
 458:	stp	x21, x22, [sp, #32]
 45c:	mov	x22, x1
 460:	mov	w21, w3
 464:	mov	w1, w3
 468:	stp	x19, x20, [sp, #16]
 46c:	mov	w20, w2
 470:	str	x23, [sp, #48]
 474:	mov	x23, x0
 478:	mov	x0, x22
 47c:	bl	0 <ctf_strraw>
 480:	cbz	w20, 52c <ctf_hash_insert_type+0xdc>
 484:	mov	x19, x0
 488:	cbz	x0, 508 <ctf_hash_insert_type+0xb8>
 48c:	ldrb	w0, [x0]
 490:	cbnz	w0, 4ac <ctf_hash_insert_type+0x5c>
 494:	mov	w0, #0x0                   	// #0
 498:	ldp	x19, x20, [sp, #16]
 49c:	ldp	x21, x22, [sp, #32]
 4a0:	ldr	x23, [sp, #48]
 4a4:	ldp	x29, x30, [sp], #96
 4a8:	ret
 4ac:	mov	x0, x23
 4b0:	add	x1, sp, #0x40
 4b4:	mov	w2, #0x1                   	// #1
 4b8:	str	x19, [sp, #64]
 4bc:	stp	xzr, xzr, [sp, #72]
 4c0:	str	xzr, [sp, #88]
 4c4:	bl	0 <htab_find_slot>
 4c8:	mov	x21, x0
 4cc:	cbz	x0, 558 <ctf_hash_insert_type+0x108>
 4d0:	ldr	x0, [x0]
 4d4:	cbz	x0, 544 <ctf_hash_insert_type+0xf4>
 4d8:	str	x19, [x0]
 4dc:	ldr	x0, [x21]
 4e0:	str	x20, [x0, #8]
 4e4:	ldr	x0, [x21]
 4e8:	cbnz	x0, 494 <ctf_hash_insert_type+0x44>
 4ec:	bl	0 <__errno_location>
 4f0:	ldr	w0, [x0]
 4f4:	ldp	x19, x20, [sp, #16]
 4f8:	ldp	x21, x22, [sp, #32]
 4fc:	ldr	x23, [sp, #48]
 500:	ldp	x29, x30, [sp], #96
 504:	ret
 508:	mov	w0, #0x3f9                 	// #1017
 50c:	tbz	w21, #31, 498 <ctf_hash_insert_type+0x48>
 510:	ldr	x1, [x22, #128]
 514:	cbnz	x1, 498 <ctf_hash_insert_type+0x48>
 518:	ldr	x0, [x22, #352]
 51c:	cmp	x0, #0x0
 520:	cset	w0, ne  // ne = any
 524:	add	w0, w0, #0x3f8
 528:	b	498 <ctf_hash_insert_type+0x48>
 52c:	mov	w0, #0x16                  	// #22
 530:	ldp	x19, x20, [sp, #16]
 534:	ldp	x21, x22, [sp, #32]
 538:	ldr	x23, [sp, #48]
 53c:	ldp	x29, x30, [sp], #96
 540:	ret
 544:	mov	x0, #0x20                  	// #32
 548:	bl	0 <malloc>
 54c:	str	x0, [x21]
 550:	cbnz	x0, 4d8 <ctf_hash_insert_type+0x88>
 554:	b	4ec <ctf_hash_insert_type+0x9c>
 558:	bl	0 <__errno_location>
 55c:	mov	x2, x0
 560:	mov	w1, #0xfffffff4            	// #-12
 564:	mov	w0, w1
 568:	str	w1, [x2]
 56c:	b	498 <ctf_hash_insert_type+0x48>

0000000000000570 <ctf_hash_define_type>:
 570:	stp	x29, x30, [sp, #-96]!
 574:	mov	x29, sp
 578:	stp	x21, x22, [sp, #32]
 57c:	mov	x22, x1
 580:	mov	w21, w3
 584:	mov	w1, w3
 588:	stp	x19, x20, [sp, #16]
 58c:	mov	w20, w2
 590:	str	x23, [sp, #48]
 594:	mov	x23, x0
 598:	mov	x0, x22
 59c:	bl	0 <ctf_strraw>
 5a0:	cbz	w20, 64c <ctf_hash_define_type+0xdc>
 5a4:	mov	x19, x0
 5a8:	cbz	x0, 628 <ctf_hash_define_type+0xb8>
 5ac:	ldrb	w0, [x0]
 5b0:	cbnz	w0, 5cc <ctf_hash_define_type+0x5c>
 5b4:	mov	w0, #0x0                   	// #0
 5b8:	ldp	x19, x20, [sp, #16]
 5bc:	ldp	x21, x22, [sp, #32]
 5c0:	ldr	x23, [sp, #48]
 5c4:	ldp	x29, x30, [sp], #96
 5c8:	ret
 5cc:	mov	x0, x23
 5d0:	add	x1, sp, #0x40
 5d4:	mov	w2, #0x1                   	// #1
 5d8:	str	x19, [sp, #64]
 5dc:	stp	xzr, xzr, [sp, #72]
 5e0:	str	xzr, [sp, #88]
 5e4:	bl	0 <htab_find_slot>
 5e8:	mov	x21, x0
 5ec:	cbz	x0, 678 <ctf_hash_define_type+0x108>
 5f0:	ldr	x0, [x0]
 5f4:	cbz	x0, 664 <ctf_hash_define_type+0xf4>
 5f8:	str	x19, [x0]
 5fc:	ldr	x0, [x21]
 600:	str	x20, [x0, #8]
 604:	ldr	x0, [x21]
 608:	cbnz	x0, 5b4 <ctf_hash_define_type+0x44>
 60c:	bl	0 <__errno_location>
 610:	ldr	w0, [x0]
 614:	ldp	x19, x20, [sp, #16]
 618:	ldp	x21, x22, [sp, #32]
 61c:	ldr	x23, [sp, #48]
 620:	ldp	x29, x30, [sp], #96
 624:	ret
 628:	mov	w0, #0x3f9                 	// #1017
 62c:	tbz	w21, #31, 5b8 <ctf_hash_define_type+0x48>
 630:	ldr	x1, [x22, #128]
 634:	cbnz	x1, 5b8 <ctf_hash_define_type+0x48>
 638:	ldr	x0, [x22, #352]
 63c:	cmp	x0, #0x0
 640:	cset	w0, ne  // ne = any
 644:	add	w0, w0, #0x3f8
 648:	b	5b8 <ctf_hash_define_type+0x48>
 64c:	mov	w0, #0x16                  	// #22
 650:	ldp	x19, x20, [sp, #16]
 654:	ldp	x21, x22, [sp, #32]
 658:	ldr	x23, [sp, #48]
 65c:	ldp	x29, x30, [sp], #96
 660:	ret
 664:	mov	x0, #0x20                  	// #32
 668:	bl	0 <malloc>
 66c:	str	x0, [x21]
 670:	cbnz	x0, 5f8 <ctf_hash_define_type+0x88>
 674:	b	60c <ctf_hash_define_type+0x9c>
 678:	bl	0 <__errno_location>
 67c:	mov	x2, x0
 680:	mov	w1, #0xfffffff4            	// #-12
 684:	mov	w0, w1
 688:	str	w1, [x2]
 68c:	b	5b8 <ctf_hash_define_type+0x48>

0000000000000690 <ctf_hash_lookup_type>:
 690:	stp	x29, x30, [sp, #-48]!
 694:	mov	x3, x2
 698:	mov	w2, #0x0                   	// #0
 69c:	mov	x29, sp
 6a0:	add	x1, sp, #0x10
 6a4:	str	x3, [sp, #16]
 6a8:	stp	xzr, xzr, [sp, #24]
 6ac:	str	xzr, [sp, #40]
 6b0:	bl	0 <htab_find_slot>
 6b4:	cbz	x0, 6c8 <ctf_hash_lookup_type+0x38>
 6b8:	ldr	x0, [x0]
 6bc:	ldr	x0, [x0, #8]
 6c0:	ldp	x29, x30, [sp], #48
 6c4:	ret
 6c8:	mov	x0, #0x0                   	// #0
 6cc:	ldp	x29, x30, [sp], #48
 6d0:	ret
 6d4:	nop

00000000000006d8 <ctf_hash_destroy>:
 6d8:	cbz	x0, 6e0 <ctf_hash_destroy+0x8>
 6dc:	b	0 <htab_delete>
 6e0:	ret

ctf-labels.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_label_topmost>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	ldr	x1, [x0, #32]
   c:	stp	x19, x20, [sp, #16]
  10:	ldr	x4, [x0, #408]
  14:	ldp	w3, w1, [x1, #16]
  18:	sub	w1, w1, w3
  1c:	cmp	wzr, w1, lsr #3
  20:	b.eq	58 <ctf_label_topmost+0x58>  // b.none
  24:	mov	w2, w3
  28:	lsr	w1, w1, #3
  2c:	sub	x2, x2, #0x8
  30:	mov	x19, x0
  34:	add	x1, x2, w1, uxtw #3
  38:	ldr	w1, [x4, x1]
  3c:	bl	0 <ctf_strraw>
  40:	mov	x20, x0
  44:	cbz	x0, 74 <ctf_label_topmost+0x74>
  48:	mov	x0, x20
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	mov	w1, #0x409                 	// #1033
  5c:	mov	x20, #0x0                   	// #0
  60:	bl	0 <ctf_set_errno>
  64:	mov	x0, x20
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret
  74:	mov	x0, x19
  78:	mov	w1, #0x3ef                 	// #1007
  7c:	bl	0 <ctf_set_errno>
  80:	mov	x0, x20
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret

0000000000000090 <ctf_label_iter>:
  90:	stp	x29, x30, [sp, #-80]!
  94:	mov	x29, sp
  98:	stp	x21, x22, [sp, #32]
  9c:	mov	x22, x2
  a0:	ldr	x2, [x0, #408]
  a4:	str	x23, [sp, #48]
  a8:	mov	x23, x1
  ac:	stp	x19, x20, [sp, #16]
  b0:	ldr	x1, [x0, #32]
  b4:	ldp	w19, w3, [x1, #16]
  b8:	sub	w3, w3, w19
  bc:	add	x19, x2, w19, uxtw
  c0:	cmp	wzr, w3, lsr #3
  c4:	b.eq	158 <ctf_label_iter+0xc8>  // b.none
  c8:	lsr	w3, w3, #3
  cc:	mov	x21, x0
  d0:	sub	w3, w3, #0x1
  d4:	add	x20, x3, #0x1
  d8:	add	x20, x19, x20, lsl #3
  dc:	nop
  e0:	ldr	w1, [x19]
  e4:	mov	x0, x21
  e8:	bl	0 <ctf_strraw>
  ec:	mov	x2, x22
  f0:	add	x1, sp, #0x48
  f4:	cbz	x0, 128 <ctf_label_iter+0x98>
  f8:	ldr	w3, [x19, #4]
  fc:	add	x19, x19, #0x8
 100:	str	x3, [sp, #72]
 104:	blr	x23
 108:	cmp	x19, x20
 10c:	cbnz	w0, 114 <ctf_label_iter+0x84>
 110:	b.ne	e0 <ctf_label_iter+0x50>  // b.any
 114:	ldp	x19, x20, [sp, #16]
 118:	ldp	x21, x22, [sp, #32]
 11c:	ldr	x23, [sp, #48]
 120:	ldp	x29, x30, [sp], #80
 124:	ret
 128:	ldp	w1, w2, [x19]
 12c:	adrp	x0, 0 <ctf_label_topmost>
 130:	add	x0, x0, #0x0
 134:	bl	0 <ctf_dprintf>
 138:	mov	x0, x21
 13c:	mov	w1, #0x3ef                 	// #1007
 140:	bl	0 <ctf_set_errno>
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x21, x22, [sp, #32]
 14c:	ldr	x23, [sp, #48]
 150:	ldp	x29, x30, [sp], #80
 154:	ret
 158:	mov	w1, #0x409                 	// #1033
 15c:	bl	0 <ctf_set_errno>
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x21, x22, [sp, #32]
 168:	ldr	x23, [sp, #48]
 16c:	ldp	x29, x30, [sp], #80
 170:	ret
 174:	nop

0000000000000178 <ctf_label_info>:
 178:	stp	x29, x30, [sp, #-64]!
 17c:	mov	x29, sp
 180:	stp	x21, x22, [sp, #32]
 184:	mov	x22, x1
 188:	mov	x21, x2
 18c:	ldr	x1, [x0, #32]
 190:	stp	x19, x20, [sp, #16]
 194:	ldr	x2, [x0, #408]
 198:	ldp	w20, w3, [x1, #16]
 19c:	str	x23, [sp, #48]
 1a0:	mov	x23, x0
 1a4:	sub	w3, w3, w20
 1a8:	add	x20, x2, w20, uxtw
 1ac:	cmp	wzr, w3, lsr #3
 1b0:	b.eq	260 <ctf_label_info+0xe8>  // b.none
 1b4:	lsr	w3, w3, #3
 1b8:	sub	w3, w3, #0x1
 1bc:	add	x19, x3, #0x1
 1c0:	add	x19, x20, x19, lsl #3
 1c4:	b	1d4 <ctf_label_info+0x5c>
 1c8:	add	x20, x20, #0x8
 1cc:	cmp	x20, x19
 1d0:	b.eq	240 <ctf_label_info+0xc8>  // b.none
 1d4:	ldr	w1, [x20]
 1d8:	mov	x0, x23
 1dc:	bl	0 <ctf_strraw>
 1e0:	mov	x1, x22
 1e4:	cbz	x0, 210 <ctf_label_info+0x98>
 1e8:	bl	0 <strcmp>
 1ec:	cbnz	w0, 1c8 <ctf_label_info+0x50>
 1f0:	cbz	x21, 1fc <ctf_label_info+0x84>
 1f4:	ldr	w1, [x20, #4]
 1f8:	str	x1, [x21]
 1fc:	ldp	x19, x20, [sp, #16]
 200:	ldp	x21, x22, [sp, #32]
 204:	ldr	x23, [sp, #48]
 208:	ldp	x29, x30, [sp], #64
 20c:	ret
 210:	ldp	w1, w2, [x20]
 214:	adrp	x0, 0 <ctf_label_topmost>
 218:	add	x0, x0, #0x0
 21c:	bl	0 <ctf_dprintf>
 220:	mov	x0, x23
 224:	mov	w1, #0x3ef                 	// #1007
 228:	bl	0 <ctf_set_errno>
 22c:	tbnz	w0, #31, 1fc <ctf_label_info+0x84>
 230:	cmp	w0, #0x1
 234:	b.ne	240 <ctf_label_info+0xc8>  // b.any
 238:	mov	w0, #0x0                   	// #0
 23c:	b	1fc <ctf_label_info+0x84>
 240:	mov	x0, x23
 244:	mov	w1, #0x408                 	// #1032
 248:	bl	0 <ctf_set_errno>
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldp	x21, x22, [sp, #32]
 254:	ldr	x23, [sp, #48]
 258:	ldp	x29, x30, [sp], #64
 25c:	ret
 260:	mov	w1, #0x409                 	// #1033
 264:	bl	0 <ctf_set_errno>
 268:	tbnz	w0, #31, 1fc <ctf_label_info+0x84>
 26c:	b	230 <ctf_label_info+0xb8>

ctf-link.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_arc_close_thunk>:
       0:	b	0 <ctf_arc_close>
       4:	nop

0000000000000008 <ctf_file_close_thunk>:
       8:	b	0 <ctf_file_close>
       c:	nop

0000000000000010 <ctf_create_per_cu>:
      10:	stp	x29, x30, [sp, #-80]!
      14:	mov	x29, sp
      18:	stp	x19, x20, [sp, #16]
      1c:	mov	x19, x0
      20:	ldr	x0, [x0, #672]
      24:	stp	x21, x22, [sp, #32]
      28:	mov	x22, x1
      2c:	stp	x23, x24, [sp, #48]
      30:	mov	x23, x2
      34:	cbz	x0, 88 <ctf_create_per_cu+0x78>
      38:	bl	0 <ctf_dynhash_lookup>
      3c:	mov	x21, x0
      40:	cbz	x0, 70 <ctf_create_per_cu+0x60>
      44:	ldr	x0, [x19, #656]
      48:	mov	x1, x21
      4c:	bl	0 <ctf_dynhash_lookup>
      50:	mov	x20, x0
      54:	cbz	x0, a0 <ctf_create_per_cu+0x90>
      58:	mov	x0, x20
      5c:	ldp	x19, x20, [sp, #16]
      60:	ldp	x21, x22, [sp, #32]
      64:	ldp	x23, x24, [sp, #48]
      68:	ldp	x29, x30, [sp], #80
      6c:	ret
      70:	ldr	x0, [x19, #672]
      74:	mov	x1, x23
      78:	bl	0 <ctf_dynhash_lookup>
      7c:	mov	x21, x0
      80:	cbnz	x0, 44 <ctf_create_per_cu+0x34>
      84:	nop
      88:	ldr	x0, [x19, #656]
      8c:	mov	x21, x22
      90:	mov	x1, x21
      94:	bl	0 <ctf_dynhash_lookup>
      98:	mov	x20, x0
      9c:	cbnz	x0, 58 <ctf_create_per_cu+0x48>
      a0:	add	x0, sp, #0x4c
      a4:	bl	0 <ctf_create>
      a8:	mov	x24, x0
      ac:	cbz	x0, 138 <ctf_create_per_cu+0x128>
      b0:	mov	x0, x21
      b4:	bl	0 <strdup>
      b8:	mov	x21, x0
      bc:	cbz	x0, 118 <ctf_create_per_cu+0x108>
      c0:	mov	x1, x0
      c4:	mov	x2, x24
      c8:	ldr	x0, [x19, #656]
      cc:	bl	0 <ctf_dynhash_insert>
      d0:	tbnz	w0, #31, 118 <ctf_create_per_cu+0x108>
      d4:	mov	x1, x19
      d8:	mov	x0, x24
      dc:	bl	0 <ctf_import>
      e0:	mov	x20, x24
      e4:	mov	x1, x23
      e8:	mov	x0, x24
      ec:	bl	0 <ctf_cuname_set>
      f0:	mov	x0, x24
      f4:	adrp	x1, 0 <_CTF_SECTION>
      f8:	add	x1, x1, #0x0
      fc:	bl	0 <ctf_parent_name_set>
     100:	mov	x0, x20
     104:	ldp	x19, x20, [sp, #16]
     108:	ldp	x21, x22, [sp, #32]
     10c:	ldp	x23, x24, [sp, #48]
     110:	ldp	x29, x30, [sp], #80
     114:	ret
     118:	mov	x0, x21
     11c:	bl	0 <free>
     120:	mov	x0, x24
     124:	bl	0 <ctf_file_close>
     128:	mov	x0, x19
     12c:	mov	w1, #0xc                   	// #12
     130:	bl	0 <ctf_set_errno>
     134:	b	58 <ctf_create_per_cu+0x48>
     138:	ldr	w0, [sp, #76]
     13c:	bl	0 <ctf_errmsg>
     140:	mov	x3, x0
     144:	mov	x1, x23
     148:	mov	x2, x22
     14c:	adrp	x0, 0 <ctf_arc_close_thunk>
     150:	add	x0, x0, #0x0
     154:	bl	0 <ctf_dprintf>
     158:	ldr	w1, [sp, #76]
     15c:	mov	x0, x19
     160:	bl	0 <ctf_set_errno>
     164:	b	58 <ctf_create_per_cu+0x48>

0000000000000168 <ctf_change_parent_name>:
     168:	mov	x0, x1
     16c:	mov	x1, x2
     170:	b	0 <ctf_parent_name_set>
     174:	nop

0000000000000178 <empty_link_type_mapping>:
     178:	ldr	x0, [x1, #664]
     17c:	cbz	x0, 184 <empty_link_type_mapping+0xc>
     180:	b	0 <ctf_dynhash_empty>
     184:	ret

0000000000000188 <ctf_link_one_input_archive_member>:
     188:	stp	x29, x30, [sp, #-48]!
     18c:	mov	x29, sp
     190:	stp	x19, x20, [sp, #16]
     194:	mov	x20, x1
     198:	mov	x19, x2
     19c:	stp	x21, x22, [sp, #32]
     1a0:	mov	x21, x0
     1a4:	mov	x0, x1
     1a8:	adrp	x1, 0 <_CTF_SECTION>
     1ac:	add	x1, x1, #0x0
     1b0:	bl	0 <strcmp>
     1b4:	cbnz	w0, 280 <ctf_link_one_input_archive_member+0xf8>
     1b8:	ldr	w1, [x19, #48]
     1bc:	cbz	w1, 1d0 <ctf_link_one_input_archive_member+0x48>
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x21, x22, [sp, #32]
     1c8:	ldp	x29, x30, [sp], #48
     1cc:	ret
     1d0:	adrp	x22, 0 <ctf_arc_close_thunk>
     1d4:	add	x22, x22, #0x0
     1d8:	mov	x0, x22
     1dc:	bl	0 <strdup>
     1e0:	str	x0, [x19, #40]
     1e4:	cbz	x0, 2b4 <ctf_link_one_input_archive_member+0x12c>
     1e8:	ldr	x1, [x19, #8]
     1ec:	bl	0 <ctf_str_append>
     1f0:	cbz	x0, 2c4 <ctf_link_one_input_archive_member+0x13c>
     1f4:	str	x0, [x19, #40]
     1f8:	str	x20, [x19, #32]
     1fc:	mov	x1, x22
     200:	mov	x0, x20
     204:	mov	x2, #0x5                   	// #5
     208:	bl	0 <strncmp>
     20c:	cbnz	w0, 218 <ctf_link_one_input_archive_member+0x90>
     210:	add	x20, x20, #0x5
     214:	str	x20, [x19, #32]
     218:	str	x21, [x19, #16]
     21c:	adrp	x1, 0 <ctf_arc_close_thunk>
     220:	mov	x2, x19
     224:	add	x1, x1, #0x0
     228:	mov	x0, x21
     22c:	bl	0 <ctf_type_iter_all>
     230:	tbz	w0, #31, 248 <ctf_link_one_input_archive_member+0xc0>
     234:	ldr	x0, [x19, #40]
     238:	str	wzr, [x19, #56]
     23c:	bl	0 <free>
     240:	mov	w0, #0xffffffff            	// #-1
     244:	b	1c0 <ctf_link_one_input_archive_member+0x38>
     248:	mov	x2, x19
     24c:	mov	x0, x21
     250:	adrp	x1, 0 <ctf_arc_close_thunk>
     254:	add	x1, x1, #0x0
     258:	bl	0 <ctf_variable_iter>
     25c:	mov	w20, w0
     260:	ldr	x0, [x19, #40]
     264:	str	wzr, [x19, #56]
     268:	bl	0 <free>
     26c:	asr	w0, w20, #31
     270:	ldp	x19, x20, [sp, #16]
     274:	ldp	x21, x22, [sp, #32]
     278:	ldp	x29, x30, [sp], #48
     27c:	ret
     280:	mov	x0, x20
     284:	bl	0 <strdup>
     288:	ldr	x1, [x19, #24]
     28c:	str	x0, [x19, #40]
     290:	mov	x0, x21
     294:	bl	0 <ctf_import>
     298:	mov	w0, #0x1                   	// #1
     29c:	str	w0, [x19, #56]
     2a0:	ldr	x0, [x19, #40]
     2a4:	cbz	x0, 2b4 <ctf_link_one_input_archive_member+0x12c>
     2a8:	adrp	x22, 0 <ctf_arc_close_thunk>
     2ac:	add	x22, x22, #0x0
     2b0:	b	1f8 <ctf_link_one_input_archive_member+0x70>
     2b4:	mov	x0, x21
     2b8:	mov	w1, #0xc                   	// #12
     2bc:	bl	0 <ctf_set_errno>
     2c0:	b	1c0 <ctf_link_one_input_archive_member+0x38>
     2c4:	ldr	x0, [x19, #40]
     2c8:	bl	0 <free>
     2cc:	b	2a0 <ctf_link_one_input_archive_member+0x118>

00000000000002d0 <ctf_link_one_type>:
     2d0:	stp	x29, x30, [sp, #-64]!
     2d4:	mov	x29, sp
     2d8:	stp	x19, x20, [sp, #16]
     2dc:	mov	x19, x2
     2e0:	ldr	w20, [x2, #52]
     2e4:	cbnz	w20, 394 <ctf_link_one_type+0xc4>
     2e8:	ldr	w1, [x2, #56]
     2ec:	stp	x21, x22, [sp, #32]
     2f0:	mov	x21, x0
     2f4:	ldr	x0, [x2]
     2f8:	cbz	w1, 338 <ctf_link_one_type+0x68>
     2fc:	ldr	x1, [x19, #8]
     300:	ldr	x2, [x19, #32]
     304:	bl	10 <ctf_create_per_cu>
     308:	mov	x22, x0
     30c:	cbz	x0, 444 <ctf_link_one_type+0x174>
     310:	ldr	x1, [x19, #16]
     314:	mov	x2, x21
     318:	bl	0 <ctf_add_type>
     31c:	cmn	x0, #0x1
     320:	b.eq	3c0 <ctf_link_one_type+0xf0>  // b.none
     324:	ldp	x21, x22, [sp, #32]
     328:	mov	w0, w20
     32c:	ldp	x19, x20, [sp, #16]
     330:	ldp	x29, x30, [sp], #64
     334:	ret
     338:	ldr	x1, [x19, #16]
     33c:	mov	x2, x21
     340:	bl	0 <ctf_add_type>
     344:	cmn	x0, #0x1
     348:	b.ne	324 <ctf_link_one_type+0x54>  // b.any
     34c:	ldr	x0, [x19]
     350:	bl	0 <ctf_errno>
     354:	cmp	w0, #0x411
     358:	b.eq	430 <ctf_link_one_type+0x160>  // b.none
     35c:	cmp	w0, #0x41b
     360:	b.eq	324 <ctf_link_one_type+0x54>  // b.none
     364:	ldr	x22, [x19, #8]
     368:	ldr	x19, [x19, #40]
     36c:	bl	0 <ctf_errmsg>
     370:	mov	x3, x22
     374:	mov	x4, x0
     378:	mov	x1, x21
     37c:	mov	x2, x19
     380:	adrp	x0, 0 <ctf_arc_close_thunk>
     384:	add	x0, x0, #0x0
     388:	bl	0 <ctf_dprintf>
     38c:	ldp	x21, x22, [sp, #32]
     390:	b	328 <ctf_link_one_type+0x58>
     394:	adrp	x0, 0 <ctf_arc_close_thunk>
     398:	add	x0, x0, #0x0
     39c:	bl	0 <ctf_dprintf>
     3a0:	ldr	x0, [x19]
     3a4:	mov	w1, #0x419                 	// #1049
     3a8:	bl	0 <ctf_set_errno>
     3ac:	mov	w20, w0
     3b0:	mov	w0, w20
     3b4:	ldp	x19, x20, [sp, #16]
     3b8:	ldp	x29, x30, [sp], #64
     3bc:	ret
     3c0:	mov	x0, x22
     3c4:	bl	0 <ctf_errno>
     3c8:	mov	w22, w0
     3cc:	cmp	w0, #0x41b
     3d0:	b.eq	324 <ctf_link_one_type+0x54>  // b.none
     3d4:	stp	x23, x24, [sp, #48]
     3d8:	ldr	x24, [x19, #8]
     3dc:	ldr	x23, [x19, #40]
     3e0:	bl	0 <ctf_errmsg>
     3e4:	mov	x3, x24
     3e8:	mov	x5, x0
     3ec:	mov	x1, x21
     3f0:	mov	x4, x23
     3f4:	mov	x2, x23
     3f8:	adrp	x0, 0 <ctf_arc_close_thunk>
     3fc:	add	x0, x0, #0x0
     400:	bl	0 <ctf_dprintf>
     404:	cmp	w22, #0x411
     408:	b.eq	418 <ctf_link_one_type+0x148>  // b.none
     40c:	ldp	x21, x22, [sp, #32]
     410:	ldp	x23, x24, [sp, #48]
     414:	b	328 <ctf_link_one_type+0x58>
     418:	ldr	x0, [x19]
     41c:	mov	w1, #0x0                   	// #0
     420:	bl	0 <ctf_set_errno>
     424:	ldp	x21, x22, [sp, #32]
     428:	ldp	x23, x24, [sp, #48]
     42c:	b	328 <ctf_link_one_type+0x58>
     430:	ldr	x0, [x19]
     434:	mov	w1, #0x0                   	// #0
     438:	bl	0 <ctf_set_errno>
     43c:	ldr	x0, [x19]
     440:	b	2fc <ctf_link_one_type+0x2c>
     444:	mov	w20, #0xffffffff            	// #-1
     448:	ldp	x21, x22, [sp, #32]
     44c:	b	328 <ctf_link_one_type+0x58>

0000000000000450 <ctf_link_intern_extern_string>:
     450:	stp	x29, x30, [sp, #-32]!
     454:	mov	x0, x1
     458:	mov	x29, sp
     45c:	ldr	w3, [x1, #552]
     460:	ldr	x1, [x2]
     464:	str	x19, [sp, #16]
     468:	mov	x19, x2
     46c:	ldr	w2, [x2, #8]
     470:	orr	w3, w3, #0x4
     474:	str	w3, [x0, #552]
     478:	bl	0 <ctf_str_add_external>
     47c:	cbnz	w0, 488 <ctf_link_intern_extern_string+0x38>
     480:	mov	w0, #0xc                   	// #12
     484:	str	w0, [x19, #12]
     488:	ldr	x19, [sp, #16]
     48c:	ldp	x29, x30, [sp], #32
     490:	ret
     494:	nop

0000000000000498 <ctf_accumulate_archive_names>:
     498:	stp	x29, x30, [sp, #-64]!
     49c:	mov	x29, sp
     4a0:	stp	x19, x20, [sp, #16]
     4a4:	mov	x20, x1
     4a8:	mov	x19, x2
     4ac:	ldr	x1, [x2, #24]
     4b0:	stp	x23, x24, [sp, #48]
     4b4:	mov	x23, x0
     4b8:	ldr	x0, [x2]
     4bc:	add	x1, x1, #0x1
     4c0:	str	x1, [x2, #24]
     4c4:	lsl	x1, x1, #3
     4c8:	bl	0 <realloc>
     4cc:	cbz	x0, 584 <ctf_accumulate_archive_names+0xec>
     4d0:	stp	x21, x22, [sp, #32]
     4d4:	mov	x21, x0
     4d8:	ldp	x0, x1, [x19, #16]
     4dc:	lsl	x1, x1, #3
     4e0:	bl	0 <realloc>
     4e4:	mov	x22, x0
     4e8:	cbz	x0, 55c <ctf_accumulate_archive_names+0xc4>
     4ec:	ldr	x3, [x20, #680]
     4f0:	cbz	x3, 52c <ctf_accumulate_archive_names+0x94>
     4f4:	ldr	x2, [x20, #688]
     4f8:	mov	x1, x23
     4fc:	mov	x0, x20
     500:	blr	x3
     504:	mov	x24, x0
     508:	cbz	x0, 52c <ctf_accumulate_archive_names+0x94>
     50c:	ldp	x0, x1, [x19, #32]
     510:	add	x1, x1, #0x1
     514:	str	x1, [x19, #40]
     518:	lsl	x1, x1, #3
     51c:	bl	0 <realloc>
     520:	cbz	x0, 5a8 <ctf_accumulate_archive_names+0x110>
     524:	mov	x23, x24
     528:	str	x0, [x19, #32]
     52c:	ldr	x2, [x19, #24]
     530:	str	x21, [x19]
     534:	lsl	x2, x2, #3
     538:	sub	x2, x2, #0x8
     53c:	str	x23, [x21, x2]
     540:	ldp	x23, x24, [sp, #48]
     544:	str	x22, [x19, #16]
     548:	str	x20, [x22, x2]
     54c:	ldp	x19, x20, [sp, #16]
     550:	ldp	x21, x22, [sp, #32]
     554:	ldp	x29, x30, [sp], #64
     558:	ret
     55c:	ldr	x2, [x19, #24]
     560:	mov	w1, #0xc                   	// #12
     564:	ldr	x0, [x19, #8]
     568:	sub	x2, x2, #0x1
     56c:	str	x2, [x19, #24]
     570:	ldp	x19, x20, [sp, #16]
     574:	ldp	x21, x22, [sp, #32]
     578:	ldp	x23, x24, [sp, #48]
     57c:	ldp	x29, x30, [sp], #64
     580:	b	0 <ctf_set_errno>
     584:	ldr	x2, [x19, #24]
     588:	mov	w1, #0xc                   	// #12
     58c:	ldp	x23, x24, [sp, #48]
     590:	sub	x2, x2, #0x1
     594:	str	x2, [x19, #24]
     598:	ldr	x0, [x19, #8]
     59c:	ldp	x19, x20, [sp, #16]
     5a0:	ldp	x29, x30, [sp], #64
     5a4:	b	0 <ctf_set_errno>
     5a8:	ldr	x2, [x19, #40]
     5ac:	mov	w1, #0xc                   	// #12
     5b0:	ldr	x0, [x19, #8]
     5b4:	sub	x2, x2, #0x1
     5b8:	str	x2, [x19, #40]
     5bc:	b	570 <ctf_accumulate_archive_names+0xd8>

00000000000005c0 <ctf_link_one_input_archive>:
     5c0:	stp	x29, x30, [sp, #-48]!
     5c4:	mov	x3, x0
     5c8:	mov	x0, x1
     5cc:	mov	x29, sp
     5d0:	stp	x19, x20, [sp, #16]
     5d4:	mov	x19, x2
     5d8:	mov	x20, x1
     5dc:	add	x2, sp, #0x2c
     5e0:	mov	x1, #0x0                   	// #0
     5e4:	str	x3, [x19, #8]
     5e8:	str	wzr, [x19, #48]
     5ec:	bl	0 <ctf_arc_open_by_name>
     5f0:	str	x0, [x19, #24]
     5f4:	cbz	x0, 698 <ctf_link_one_input_archive+0xd8>
     5f8:	adrp	x1, 0 <_CTF_SECTION>
     5fc:	mov	x2, x19
     600:	add	x1, x1, #0x0
     604:	bl	188 <ctf_link_one_input_archive_member>
     608:	tbnz	w0, #31, 6d0 <ctf_link_one_input_archive+0x110>
     60c:	mov	w0, #0x1                   	// #1
     610:	str	w0, [x19, #48]
     614:	adrp	x1, 0 <ctf_arc_close_thunk>
     618:	mov	x2, x19
     61c:	add	x1, x1, #0x0
     620:	mov	x0, x20
     624:	bl	0 <ctf_archive_iter>
     628:	tbnz	w0, #31, 674 <ctf_link_one_input_archive+0xb4>
     62c:	ldr	x0, [x19]
     630:	mov	w1, #0x0                   	// #0
     634:	bl	0 <ctf_set_errno>
     638:	ldr	x0, [x19, #24]
     63c:	bl	0 <ctf_file_close>
     640:	ldr	x2, [x19]
     644:	ldr	x0, [x2, #664]
     648:	cbz	x0, 654 <ctf_link_one_input_archive+0x94>
     64c:	bl	0 <ctf_dynhash_empty>
     650:	ldr	x2, [x19]
     654:	adrp	x1, 0 <ctf_arc_close_thunk>
     658:	ldr	x0, [x2, #656]
     65c:	add	x1, x1, #0x0
     660:	mov	x2, #0x0                   	// #0
     664:	bl	0 <ctf_dynhash_iter>
     668:	ldp	x19, x20, [sp, #16]
     66c:	ldp	x29, x30, [sp], #48
     670:	ret
     674:	ldp	x0, x20, [x19]
     678:	bl	0 <ctf_errno>
     67c:	bl	0 <ctf_errmsg>
     680:	mov	x2, x0
     684:	mov	x1, x20
     688:	adrp	x0, 0 <ctf_arc_close_thunk>
     68c:	add	x0, x0, #0x0
     690:	bl	0 <ctf_dprintf>
     694:	b	638 <ctf_link_one_input_archive+0x78>
     698:	ldr	w2, [sp, #44]
     69c:	cmp	w2, #0x415
     6a0:	b.eq	5f8 <ctf_link_one_input_archive+0x38>  // b.none
     6a4:	ldr	x19, [x19, #8]
     6a8:	mov	w0, w2
     6ac:	bl	0 <ctf_errmsg>
     6b0:	mov	x2, x0
     6b4:	mov	x1, x19
     6b8:	adrp	x0, 0 <ctf_arc_close_thunk>
     6bc:	add	x0, x0, #0x0
     6c0:	bl	0 <ctf_dprintf>
     6c4:	ldp	x19, x20, [sp, #16]
     6c8:	ldp	x29, x30, [sp], #48
     6cc:	ret
     6d0:	ldr	x0, [x19, #24]
     6d4:	bl	0 <ctf_file_close>
     6d8:	ldp	x19, x20, [sp, #16]
     6dc:	ldp	x29, x30, [sp], #48
     6e0:	ret
     6e4:	nop

00000000000006e8 <ctf_add_type_mapping>:
     6e8:	stp	x29, x30, [sp, #-64]!
     6ec:	mov	x29, sp
     6f0:	stp	x19, x20, [sp, #16]
     6f4:	mov	x20, x2
     6f8:	stp	x21, x22, [sp, #32]
     6fc:	mov	x21, x0
     700:	ldr	w22, [x0, #544]
     704:	str	x23, [sp, #48]
     708:	cmp	x22, x1
     70c:	b.cc	720 <ctf_add_type_mapping+0x38>  // b.lo, b.ul, b.last
     710:	ldr	x0, [x0, #512]
     714:	cbz	x0, 720 <ctf_add_type_mapping+0x38>
     718:	ldr	w22, [x0, #544]
     71c:	mov	x21, x0
     720:	ldr	w19, [x20, #544]
     724:	and	x22, x1, x22
     728:	cmp	x19, x3
     72c:	b.cc	740 <ctf_add_type_mapping+0x58>  // b.lo, b.ul, b.last
     730:	ldr	x0, [x20, #512]
     734:	cbz	x0, 740 <ctf_add_type_mapping+0x58>
     738:	ldr	w19, [x0, #544]
     73c:	mov	x20, x0
     740:	ldr	x23, [x20, #664]
     744:	and	x19, x3, x19
     748:	cbz	x23, 780 <ctf_add_type_mapping+0x98>
     74c:	mov	x1, #0x10                  	// #16
     750:	mov	x0, #0x1                   	// #1
     754:	bl	0 <calloc>
     758:	mov	x1, x0
     75c:	cbz	x0, 7ac <ctf_add_type_mapping+0xc4>
     760:	mov	x2, x19
     764:	mov	x0, x23
     768:	ldp	x19, x20, [sp, #16]
     76c:	ldr	x23, [sp, #48]
     770:	stp	x21, x22, [x1]
     774:	ldp	x21, x22, [sp, #32]
     778:	ldp	x29, x30, [sp], #64
     77c:	b	0 <ctf_dynhash_insert>
     780:	adrp	x2, 0 <free>
     784:	adrp	x1, 0 <ctf_hash_eq_type_mapping_key>
     788:	add	x2, x2, #0x0
     78c:	add	x1, x1, #0x0
     790:	adrp	x0, 0 <ctf_hash_type_mapping_key>
     794:	mov	x3, #0x0                   	// #0
     798:	add	x0, x0, #0x0
     79c:	bl	0 <ctf_dynhash_create>
     7a0:	str	x0, [x20, #664]
     7a4:	mov	x23, x0
     7a8:	cbnz	x0, 74c <ctf_add_type_mapping+0x64>
     7ac:	ldp	x19, x20, [sp, #16]
     7b0:	ldp	x21, x22, [sp, #32]
     7b4:	ldr	x23, [sp, #48]
     7b8:	ldp	x29, x30, [sp], #64
     7bc:	ret

00000000000007c0 <ctf_type_mapping>:
     7c0:	stp	x29, x30, [sp, #-64]!
     7c4:	mov	x3, x0
     7c8:	mov	x29, sp
     7cc:	stp	x19, x20, [sp, #16]
     7d0:	mov	x19, x2
     7d4:	ldr	w2, [x0, #544]
     7d8:	ldr	x20, [x19]
     7dc:	str	x21, [sp, #32]
     7e0:	cmp	x2, x1
     7e4:	b.cc	7f8 <ctf_type_mapping+0x38>  // b.lo, b.ul, b.last
     7e8:	ldr	x0, [x0, #512]
     7ec:	cbz	x0, 7f8 <ctf_type_mapping+0x38>
     7f0:	ldr	w2, [x0, #544]
     7f4:	mov	x3, x0
     7f8:	ldr	x0, [x20, #664]
     7fc:	and	x1, x1, x2
     800:	stp	x3, x1, [sp, #48]
     804:	cbz	x0, 864 <ctf_type_mapping+0xa4>
     808:	add	x21, sp, #0x30
     80c:	mov	x1, x21
     810:	bl	0 <ctf_dynhash_lookup>
     814:	cbnz	x0, 83c <ctf_type_mapping+0x7c>
     818:	ldr	x20, [x20, #512]
     81c:	cbz	x20, 890 <ctf_type_mapping+0xd0>
     820:	ldr	x2, [x20, #664]
     824:	mov	x0, #0x0                   	// #0
     828:	cbz	x2, 850 <ctf_type_mapping+0x90>
     82c:	mov	x1, x21
     830:	mov	x0, x2
     834:	bl	0 <ctf_dynhash_lookup>
     838:	cbz	x0, 850 <ctf_type_mapping+0x90>
     83c:	ldr	x1, [x20, #512]
     840:	cbz	x1, 850 <ctf_type_mapping+0x90>
     844:	ldr	w1, [x20, #544]
     848:	add	w1, w1, #0x1
     84c:	orr	x0, x0, x1
     850:	str	x20, [x19]
     854:	ldp	x19, x20, [sp, #16]
     858:	ldr	x21, [sp, #32]
     85c:	ldp	x29, x30, [sp], #64
     860:	ret
     864:	ldr	x20, [x20, #512]
     868:	cbz	x20, 890 <ctf_type_mapping+0xd0>
     86c:	ldr	x2, [x20, #664]
     870:	add	x21, sp, #0x30
     874:	mov	x0, #0x0                   	// #0
     878:	cbz	x2, 850 <ctf_type_mapping+0x90>
     87c:	mov	x1, x21
     880:	mov	x0, x2
     884:	bl	0 <ctf_dynhash_lookup>
     888:	cbnz	x0, 83c <ctf_type_mapping+0x7c>
     88c:	b	850 <ctf_type_mapping+0x90>
     890:	mov	x0, #0x0                   	// #0
     894:	ldp	x19, x20, [sp, #16]
     898:	ldr	x21, [sp, #32]
     89c:	ldp	x29, x30, [sp], #64
     8a0:	ret
     8a4:	nop

00000000000008a8 <ctf_link_one_variable>:
     8a8:	stp	x29, x30, [sp, #-80]!
     8ac:	mov	x29, sp
     8b0:	stp	x19, x20, [sp, #16]
     8b4:	mov	x19, x2
     8b8:	add	x2, sp, #0x48
     8bc:	stp	x21, x22, [sp, #32]
     8c0:	mov	x22, x0
     8c4:	ldr	x3, [x19]
     8c8:	str	x3, [sp, #72]
     8cc:	ldr	x0, [x19, #16]
     8d0:	str	x23, [sp, #48]
     8d4:	mov	x23, x1
     8d8:	bl	7c0 <ctf_type_mapping>
     8dc:	cbz	x0, 950 <ctf_link_one_variable+0xa8>
     8e0:	mov	x20, x0
     8e4:	ldr	x0, [x19]
     8e8:	ldr	x1, [sp, #72]
     8ec:	cmp	x0, x1
     8f0:	b.eq	9e8 <ctf_link_one_variable+0x140>  // b.none
     8f4:	ldr	x1, [x19, #8]
     8f8:	ldr	x2, [x19, #32]
     8fc:	bl	10 <ctf_create_per_cu>
     900:	mov	x21, x0
     904:	cbz	x0, 9d0 <ctf_link_one_variable+0x128>
     908:	ldr	x0, [x21, #592]
     90c:	mov	x1, x22
     910:	bl	0 <ctf_dynhash_lookup>
     914:	cbz	x0, 9a0 <ctf_link_one_variable+0xf8>
     918:	ldr	x0, [x0, #24]
     91c:	cmp	x20, x0
     920:	b.ne	93c <ctf_link_one_variable+0x94>  // b.any
     924:	mov	w0, #0x0                   	// #0
     928:	ldp	x19, x20, [sp, #16]
     92c:	ldp	x21, x22, [sp, #32]
     930:	ldr	x23, [sp, #48]
     934:	ldp	x29, x30, [sp], #80
     938:	ret
     93c:	mov	x1, x22
     940:	adrp	x0, 0 <ctf_arc_close_thunk>
     944:	add	x0, x0, #0x0
     948:	bl	0 <ctf_dprintf>
     94c:	b	924 <ctf_link_one_variable+0x7c>
     950:	ldp	x0, x1, [x19]
     954:	ldr	x2, [x19, #32]
     958:	bl	10 <ctf_create_per_cu>
     95c:	mov	x21, x0
     960:	cbz	x0, 9d0 <ctf_link_one_variable+0x128>
     964:	ldr	x0, [x19, #16]
     968:	add	x2, sp, #0x48
     96c:	mov	x1, x23
     970:	str	x21, [sp, #72]
     974:	bl	7c0 <ctf_type_mapping>
     978:	mov	x20, x0
     97c:	cbnz	x0, 908 <ctf_link_one_variable+0x60>
     980:	ldr	x3, [x19, #8]
     984:	mov	x2, x22
     988:	mov	x1, x23
     98c:	adrp	x0, 0 <ctf_arc_close_thunk>
     990:	add	x0, x0, #0x0
     994:	bl	0 <ctf_dprintf>
     998:	mov	w0, #0x0                   	// #0
     99c:	b	928 <ctf_link_one_variable+0x80>
     9a0:	mov	x2, x20
     9a4:	mov	x1, x22
     9a8:	mov	x0, x21
     9ac:	bl	0 <ctf_add_variable>
     9b0:	tbz	w0, #31, 924 <ctf_link_one_variable+0x7c>
     9b4:	ldr	x19, [x19]
     9b8:	mov	x0, x21
     9bc:	bl	0 <ctf_errno>
     9c0:	mov	w1, w0
     9c4:	mov	x0, x19
     9c8:	bl	0 <ctf_set_errno>
     9cc:	b	928 <ctf_link_one_variable+0x80>
     9d0:	mov	w0, #0xffffffff            	// #-1
     9d4:	ldp	x19, x20, [sp, #16]
     9d8:	ldp	x21, x22, [sp, #32]
     9dc:	ldr	x23, [sp, #48]
     9e0:	ldp	x29, x30, [sp], #80
     9e4:	ret
     9e8:	ldr	x0, [x0, #592]
     9ec:	mov	x1, x22
     9f0:	bl	0 <ctf_dynhash_lookup>
     9f4:	mov	x21, x0
     9f8:	cbz	x0, a30 <ctf_link_one_variable+0x188>
     9fc:	ldr	x0, [x0, #24]
     a00:	cmp	x20, x0
     a04:	b.ne	a18 <ctf_link_one_variable+0x170>  // b.any
     a08:	cmp	x0, x23
     a0c:	b.eq	924 <ctf_link_one_variable+0x7c>  // b.none
     a10:	ldr	x0, [x19]
     a14:	b	8f4 <ctf_link_one_variable+0x4c>
     a18:	mov	x1, x22
     a1c:	adrp	x0, 0 <ctf_arc_close_thunk>
     a20:	add	x0, x0, #0x0
     a24:	bl	0 <ctf_dprintf>
     a28:	ldr	x0, [x21, #24]
     a2c:	b	a08 <ctf_link_one_variable+0x160>
     a30:	ldr	x0, [sp, #72]
     a34:	mov	x2, x20
     a38:	mov	x1, x22
     a3c:	bl	0 <ctf_add_variable>
     a40:	tbz	w0, #31, 924 <ctf_link_one_variable+0x7c>
     a44:	ldr	x0, [sp, #72]
     a48:	ldr	x19, [x19]
     a4c:	bl	0 <ctf_errno>
     a50:	mov	w1, w0
     a54:	mov	x0, x19
     a58:	bl	0 <ctf_set_errno>
     a5c:	b	928 <ctf_link_one_variable+0x80>

0000000000000a60 <ctf_link_add_ctf>:
     a60:	stp	x29, x30, [sp, #-64]!
     a64:	mov	x29, sp
     a68:	stp	x21, x22, [sp, #32]
     a6c:	mov	x21, x1
     a70:	ldr	x1, [x0, #656]
     a74:	cbnz	x1, ad0 <ctf_link_add_ctf+0x70>
     a78:	str	x23, [sp, #48]
     a7c:	mov	x22, x2
     a80:	ldr	x23, [x0, #648]
     a84:	stp	x19, x20, [sp, #16]
     a88:	mov	x19, x0
     a8c:	cbz	x23, b18 <ctf_link_add_ctf+0xb8>
     a90:	mov	x0, x22
     a94:	bl	0 <strdup>
     a98:	mov	x20, x0
     a9c:	cbz	x0, ae4 <ctf_link_add_ctf+0x84>
     aa0:	mov	x1, x20
     aa4:	mov	x2, x21
     aa8:	mov	x0, x23
     aac:	bl	0 <ctf_dynhash_insert>
     ab0:	mov	w1, w0
     ab4:	mov	w0, #0x0                   	// #0
     ab8:	tbnz	w1, #31, ae4 <ctf_link_add_ctf+0x84>
     abc:	ldp	x19, x20, [sp, #16]
     ac0:	ldp	x21, x22, [sp, #32]
     ac4:	ldr	x23, [sp, #48]
     ac8:	ldp	x29, x30, [sp], #64
     acc:	ret
     ad0:	mov	w1, #0x3f5                 	// #1013
     ad4:	bl	0 <ctf_set_errno>
     ad8:	ldp	x21, x22, [sp, #32]
     adc:	ldp	x29, x30, [sp], #64
     ae0:	ret
     ae4:	ldr	x0, [x19, #648]
     ae8:	bl	0 <free>
     aec:	str	xzr, [x19, #648]
     af0:	mov	x0, x20
     af4:	bl	0 <free>
     af8:	mov	x0, x19
     afc:	mov	w1, #0xc                   	// #12
     b00:	bl	0 <ctf_set_errno>
     b04:	ldp	x19, x20, [sp, #16]
     b08:	ldp	x21, x22, [sp, #32]
     b0c:	ldr	x23, [sp, #48]
     b10:	ldp	x29, x30, [sp], #64
     b14:	ret
     b18:	adrp	x3, 0 <ctf_arc_close_thunk>
     b1c:	adrp	x2, 0 <free>
     b20:	add	x3, x3, #0x0
     b24:	add	x2, x2, #0x0
     b28:	adrp	x1, 0 <ctf_hash_eq_string>
     b2c:	adrp	x0, 0 <ctf_hash_string>
     b30:	add	x1, x1, #0x0
     b34:	add	x0, x0, #0x0
     b38:	bl	0 <ctf_dynhash_create>
     b3c:	mov	x20, x0
     b40:	str	x20, [x19, #648]
     b44:	mov	x0, #0x0                   	// #0
     b48:	cbz	x20, ae8 <ctf_link_add_ctf+0x88>
     b4c:	mov	x23, x20
     b50:	b	a90 <ctf_link_add_ctf+0x30>
     b54:	nop

0000000000000b58 <ctf_link_add_cu_mapping>:
     b58:	stp	x29, x30, [sp, #-48]!
     b5c:	mov	x29, sp
     b60:	stp	x19, x20, [sp, #16]
     b64:	mov	x19, x0
     b68:	mov	x20, x2
     b6c:	ldr	x0, [x0, #672]
     b70:	str	x21, [sp, #32]
     b74:	mov	x21, x1
     b78:	cbz	x0, be0 <ctf_link_add_cu_mapping+0x88>
     b7c:	ldr	x0, [x19, #656]
     b80:	cbz	x0, c24 <ctf_link_add_cu_mapping+0xcc>
     b84:	mov	x0, x21
     b88:	bl	0 <strdup>
     b8c:	mov	x21, x0
     b90:	mov	x0, x20
     b94:	bl	0 <strdup>
     b98:	mov	x20, x0
     b9c:	cmp	x21, #0x0
     ba0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     ba4:	b.eq	c78 <ctf_link_add_cu_mapping+0x120>  // b.none
     ba8:	mov	x2, x0
     bac:	mov	x1, x0
     bb0:	mov	x0, x19
     bb4:	bl	10 <ctf_create_per_cu>
     bb8:	cbz	x0, c60 <ctf_link_add_cu_mapping+0x108>
     bbc:	ldr	x0, [x19, #672]
     bc0:	mov	x2, x20
     bc4:	mov	x1, x21
     bc8:	bl	0 <ctf_dynhash_insert>
     bcc:	cbnz	w0, c54 <ctf_link_add_cu_mapping+0xfc>
     bd0:	ldp	x19, x20, [sp, #16]
     bd4:	ldr	x21, [sp, #32]
     bd8:	ldp	x29, x30, [sp], #48
     bdc:	ret
     be0:	adrp	x3, 0 <free>
     be4:	add	x3, x3, #0x0
     be8:	mov	x2, x3
     bec:	adrp	x1, 0 <ctf_hash_eq_string>
     bf0:	adrp	x0, 0 <ctf_hash_string>
     bf4:	add	x1, x1, #0x0
     bf8:	add	x0, x0, #0x0
     bfc:	bl	0 <ctf_dynhash_create>
     c00:	str	x0, [x19, #672]
     c04:	cbnz	x0, b7c <ctf_link_add_cu_mapping+0x24>
     c08:	mov	x0, x19
     c0c:	mov	w1, #0xc                   	// #12
     c10:	bl	0 <ctf_set_errno>
     c14:	ldp	x19, x20, [sp, #16]
     c18:	ldr	x21, [sp, #32]
     c1c:	ldp	x29, x30, [sp], #48
     c20:	ret
     c24:	adrp	x3, 0 <ctf_arc_close_thunk>
     c28:	adrp	x2, 0 <free>
     c2c:	add	x3, x3, #0x0
     c30:	add	x2, x2, #0x0
     c34:	adrp	x1, 0 <ctf_hash_eq_string>
     c38:	adrp	x0, 0 <ctf_hash_string>
     c3c:	add	x1, x1, #0x0
     c40:	add	x0, x0, #0x0
     c44:	bl	0 <ctf_dynhash_create>
     c48:	str	x0, [x19, #656]
     c4c:	cbz	x0, c08 <ctf_link_add_cu_mapping+0xb0>
     c50:	b	b84 <ctf_link_add_cu_mapping+0x2c>
     c54:	mov	w1, w0
     c58:	mov	x0, x19
     c5c:	bl	0 <ctf_set_errno>
     c60:	mov	x0, x21
     c64:	bl	0 <free>
     c68:	mov	x0, x20
     c6c:	bl	0 <free>
     c70:	mov	w0, #0xffffffff            	// #-1
     c74:	b	bd0 <ctf_link_add_cu_mapping+0x78>
     c78:	bl	0 <__errno_location>
     c7c:	mov	x1, x0
     c80:	mov	x0, x19
     c84:	ldr	w1, [x1]
     c88:	bl	0 <ctf_set_errno>
     c8c:	b	c60 <ctf_link_add_cu_mapping+0x108>

0000000000000c90 <ctf_link_set_memb_name_changer>:
     c90:	str	x1, [x0, #680]
     c94:	str	x2, [x0, #688]
     c98:	ret
     c9c:	nop

0000000000000ca0 <ctf_link>:
     ca0:	stp	x29, x30, [sp, #-96]!
     ca4:	add	x2, sp, #0x28
     ca8:	mov	x29, sp
     cac:	str	x19, [sp, #16]
     cb0:	mov	x19, x0
     cb4:	stp	xzr, xzr, [sp, #40]
     cb8:	stp	xzr, xzr, [x2, #32]
     cbc:	ldr	x0, [x0, #648]
     cc0:	str	w1, [sp, #84]
     cc4:	stp	xzr, xzr, [x2, #16]
     cc8:	str	x19, [sp, #32]
     ccc:	str	xzr, [x2, #48]
     cd0:	cbz	x0, d08 <ctf_link+0x68>
     cd4:	ldr	x1, [x19, #656]
     cd8:	cbz	x1, d18 <ctf_link+0x78>
     cdc:	add	x2, sp, #0x20
     ce0:	adrp	x1, 0 <ctf_arc_close_thunk>
     ce4:	add	x1, x1, #0x0
     ce8:	bl	0 <ctf_dynhash_iter>
     cec:	mov	x0, x19
     cf0:	bl	0 <ctf_errno>
     cf4:	cmp	w0, #0x0
     cf8:	csetm	w0, ne  // ne = any
     cfc:	ldr	x19, [sp, #16]
     d00:	ldp	x29, x30, [sp], #96
     d04:	ret
     d08:	mov	w0, #0x0                   	// #0
     d0c:	ldr	x19, [sp, #16]
     d10:	ldp	x29, x30, [sp], #96
     d14:	ret
     d18:	adrp	x3, 0 <ctf_arc_close_thunk>
     d1c:	adrp	x2, 0 <free>
     d20:	add	x3, x3, #0x0
     d24:	add	x2, x2, #0x0
     d28:	adrp	x1, 0 <ctf_hash_eq_string>
     d2c:	adrp	x0, 0 <ctf_hash_string>
     d30:	add	x1, x1, #0x0
     d34:	add	x0, x0, #0x0
     d38:	bl	0 <ctf_dynhash_create>
     d3c:	str	x0, [x19, #656]
     d40:	cbnz	x0, d5c <ctf_link+0xbc>
     d44:	mov	x0, x19
     d48:	mov	w1, #0xc                   	// #12
     d4c:	bl	0 <ctf_set_errno>
     d50:	ldr	x19, [sp, #16]
     d54:	ldp	x29, x30, [sp], #96
     d58:	ret
     d5c:	ldr	x0, [x19, #648]
     d60:	b	cdc <ctf_link+0x3c>
     d64:	nop

0000000000000d68 <ctf_link_add_strtab>:
     d68:	stp	x29, x30, [sp, #-96]!
     d6c:	mov	x29, sp
     d70:	stp	x19, x20, [sp, #16]
     d74:	mov	x19, x0
     d78:	mov	w20, #0x0                   	// #0
     d7c:	stp	x21, x22, [sp, #32]
     d80:	mov	x22, x1
     d84:	mov	x21, x2
     d88:	stp	x23, x24, [sp, #48]
     d8c:	adrp	x23, 0 <ctf_arc_close_thunk>
     d90:	mov	w24, #0xc                   	// #12
     d94:	add	x23, x23, #0x0
     d98:	b	ddc <ctf_link_add_strtab+0x74>
     d9c:	ldr	w4, [x19, #552]
     da0:	ldr	w2, [sp, #76]
     da4:	orr	w4, w4, #0x4
     da8:	str	w4, [x19, #552]
     dac:	str	x3, [sp, #80]
     db0:	stp	w2, wzr, [sp, #88]
     db4:	bl	0 <ctf_str_add_external>
     db8:	cmp	w0, #0x0
     dbc:	ldr	x0, [x19, #656]
     dc0:	csel	w20, w20, w24, ne  // ne = any
     dc4:	add	x2, sp, #0x50
     dc8:	mov	x1, x23
     dcc:	bl	0 <ctf_dynhash_iter>
     dd0:	ldr	w0, [sp, #92]
     dd4:	cmp	w0, #0x0
     dd8:	csel	w20, w20, w0, eq  // eq = none
     ddc:	mov	x1, x21
     de0:	add	x0, sp, #0x4c
     de4:	blr	x22
     de8:	mov	x3, x0
     dec:	mov	x1, x3
     df0:	mov	x0, x19
     df4:	cbnz	x3, d9c <ctf_link_add_strtab+0x34>
     df8:	neg	w0, w20
     dfc:	ldp	x19, x20, [sp, #16]
     e00:	ldp	x21, x22, [sp, #32]
     e04:	ldp	x23, x24, [sp, #48]
     e08:	ldp	x29, x30, [sp], #96
     e0c:	ret

0000000000000e10 <ctf_link_shuffle_syms>:
     e10:	mov	w0, #0x0                   	// #0
     e14:	ret

0000000000000e18 <ctf_link_write>:
     e18:	stp	x29, x30, [sp, #-112]!
     e1c:	mov	x29, sp
     e20:	stp	xzr, xzr, [sp, #64]
     e24:	stp	x19, x20, [sp, #16]
     e28:	mov	x20, x0
     e2c:	str	x0, [sp, #72]
     e30:	ldr	x0, [x0, #656]
     e34:	stp	x21, x22, [sp, #32]
     e38:	mov	x22, x2
     e3c:	stp	x23, x24, [sp, #48]
     e40:	mov	x23, x1
     e44:	stp	xzr, xzr, [sp, #80]
     e48:	stp	xzr, xzr, [sp, #96]
     e4c:	cbz	x0, 1018 <ctf_link_write+0x200>
     e50:	add	x2, sp, #0x40
     e54:	adrp	x1, 0 <ctf_arc_close_thunk>
     e58:	add	x1, x1, #0x0
     e5c:	bl	0 <ctf_dynhash_iter>
     e60:	mov	x0, x20
     e64:	bl	0 <ctf_errno>
     e68:	tbnz	w0, #31, 1044 <ctf_link_write+0x22c>
     e6c:	ldr	x1, [sp, #88]
     e70:	cbz	x1, 1018 <ctf_link_write+0x200>
     e74:	ldr	x0, [sp, #64]
     e78:	add	x1, x1, #0x1
     e7c:	lsl	x1, x1, #3
     e80:	bl	0 <realloc>
     e84:	mov	x21, x0
     e88:	cbz	x0, 117c <ctf_link_write+0x364>
     e8c:	ldr	x2, [sp, #88]
     e90:	mov	x1, x0
     e94:	add	x0, x0, #0x8
     e98:	str	x21, [sp, #64]
     e9c:	lsl	x2, x2, #3
     ea0:	bl	0 <memmove>
     ea4:	ldr	x3, [x20, #680]
     ea8:	adrp	x1, 0 <_CTF_SECTION>
     eac:	add	x1, x1, #0x0
     eb0:	str	x1, [x21]
     eb4:	mov	x21, #0x0                   	// #0
     eb8:	cbz	x3, eec <ctf_link_write+0xd4>
     ebc:	ldr	x2, [x20, #688]
     ec0:	mov	x0, x20
     ec4:	blr	x3
     ec8:	mov	x21, x0
     ecc:	cbz	x0, eec <ctf_link_write+0xd4>
     ed0:	ldr	x2, [sp, #64]
     ed4:	adrp	x1, 0 <ctf_arc_close_thunk>
     ed8:	ldr	x0, [x20, #656]
     edc:	add	x1, x1, #0x0
     ee0:	str	x21, [x2]
     ee4:	mov	x2, x21
     ee8:	bl	0 <ctf_dynhash_iter>
     eec:	ldp	x0, x1, [sp, #80]
     ef0:	add	x1, x1, #0x1
     ef4:	lsl	x1, x1, #3
     ef8:	bl	0 <realloc>
     efc:	mov	x1, x0
     f00:	cbz	x0, 1170 <ctf_link_write+0x358>
     f04:	ldr	x2, [sp, #88]
     f08:	add	x0, x0, #0x8
     f0c:	str	x1, [sp, #80]
     f10:	lsl	x2, x2, #3
     f14:	bl	0 <memmove>
     f18:	ldr	x0, [sp, #80]
     f1c:	str	x20, [x0]
     f20:	bl	0 <tmpfile>
     f24:	mov	x19, x0
     f28:	cbz	x0, 110c <ctf_link_write+0x2f4>
     f2c:	bl	0 <fileno>
     f30:	ldp	x1, x2, [sp, #80]
     f34:	mov	x4, x22
     f38:	ldr	x3, [sp, #64]
     f3c:	add	x2, x2, #0x1
     f40:	bl	0 <ctf_arc_write_fd>
     f44:	tbnz	w0, #31, 1148 <ctf_link_write+0x330>
     f48:	mov	x0, x19
     f4c:	mov	w2, #0x2                   	// #2
     f50:	mov	x1, #0x0                   	// #0
     f54:	bl	0 <fseek>
     f58:	tbnz	w0, #31, 10d8 <ctf_link_write+0x2c0>
     f5c:	mov	x0, x19
     f60:	bl	0 <ftell>
     f64:	mov	x24, x0
     f68:	tbnz	x0, #63, 112c <ctf_link_write+0x314>
     f6c:	mov	x0, x19
     f70:	mov	w2, #0x0                   	// #0
     f74:	mov	x1, #0x0                   	// #0
     f78:	bl	0 <fseek>
     f7c:	tbnz	w0, #31, 1160 <ctf_link_write+0x348>
     f80:	mov	x0, x24
     f84:	bl	0 <malloc>
     f88:	mov	x22, x0
     f8c:	cbnz	x0, fb8 <ctf_link_write+0x1a0>
     f90:	b	1188 <ctf_link_write+0x370>
     f94:	mov	x3, x19
     f98:	mov	x1, x24
     f9c:	mov	x0, x22
     fa0:	mov	x2, #0x1                   	// #1
     fa4:	bl	0 <fread>
     fa8:	cbnz	x0, fc4 <ctf_link_write+0x1ac>
     fac:	mov	x0, x19
     fb0:	bl	0 <ferror>
     fb4:	cbnz	w0, 113c <ctf_link_write+0x324>
     fb8:	mov	x0, x19
     fbc:	bl	0 <feof>
     fc0:	cbz	w0, f94 <ctf_link_write+0x17c>
     fc4:	ldr	x0, [sp, #64]
     fc8:	str	x24, [x23]
     fcc:	bl	0 <free>
     fd0:	ldr	x0, [sp, #80]
     fd4:	bl	0 <free>
     fd8:	mov	x0, x21
     fdc:	bl	0 <free>
     fe0:	ldr	x0, [sp, #104]
     fe4:	cbz	x0, 102c <ctf_link_write+0x214>
     fe8:	mov	x19, #0x0                   	// #0
     fec:	nop
     ff0:	ldr	x0, [sp, #96]
     ff4:	ldr	x0, [x0, x19, lsl #3]
     ff8:	add	x19, x19, #0x1
     ffc:	bl	0 <free>
    1000:	ldr	x0, [sp, #104]
    1004:	cmp	x0, x19
    1008:	b.hi	ff0 <ctf_link_write+0x1d8>  // b.pmore
    100c:	ldr	x0, [sp, #96]
    1010:	bl	0 <free>
    1014:	b	102c <ctf_link_write+0x214>
    1018:	mov	x2, x22
    101c:	mov	x1, x23
    1020:	mov	x0, x20
    1024:	bl	0 <ctf_write_mem>
    1028:	mov	x22, x0
    102c:	mov	x0, x22
    1030:	ldp	x19, x20, [sp, #16]
    1034:	ldp	x21, x22, [sp, #32]
    1038:	ldp	x23, x24, [sp, #48]
    103c:	ldp	x29, x30, [sp], #112
    1040:	ret
    1044:	adrp	x23, 0 <ctf_arc_close_thunk>
    1048:	add	x23, x23, #0x0
    104c:	mov	x21, #0x0                   	// #0
    1050:	ldr	x0, [sp, #64]
    1054:	bl	0 <free>
    1058:	ldr	x0, [sp, #80]
    105c:	bl	0 <free>
    1060:	mov	x0, x21
    1064:	bl	0 <free>
    1068:	ldr	x0, [sp, #104]
    106c:	cbz	x0, 109c <ctf_link_write+0x284>
    1070:	mov	x19, #0x0                   	// #0
    1074:	nop
    1078:	ldr	x0, [sp, #96]
    107c:	ldr	x0, [x0, x19, lsl #3]
    1080:	add	x19, x19, #0x1
    1084:	bl	0 <free>
    1088:	ldr	x0, [sp, #104]
    108c:	cmp	x0, x19
    1090:	b.hi	1078 <ctf_link_write+0x260>  // b.pmore
    1094:	ldr	x0, [sp, #96]
    1098:	bl	0 <free>
    109c:	mov	x0, x20
    10a0:	bl	0 <ctf_errno>
    10a4:	bl	0 <ctf_errmsg>
    10a8:	mov	x22, #0x0                   	// #0
    10ac:	mov	x2, x0
    10b0:	mov	x1, x23
    10b4:	adrp	x0, 0 <ctf_arc_close_thunk>
    10b8:	add	x0, x0, #0x0
    10bc:	bl	0 <ctf_dprintf>
    10c0:	mov	x0, x22
    10c4:	ldp	x19, x20, [sp, #16]
    10c8:	ldp	x21, x22, [sp, #32]
    10cc:	ldp	x23, x24, [sp, #48]
    10d0:	ldp	x29, x30, [sp], #112
    10d4:	ret
    10d8:	adrp	x23, 0 <ctf_arc_close_thunk>
    10dc:	add	x23, x23, #0x0
    10e0:	mov	x22, #0x0                   	// #0
    10e4:	bl	0 <__errno_location>
    10e8:	mov	x1, x0
    10ec:	mov	x0, x20
    10f0:	ldr	w1, [x1]
    10f4:	bl	0 <ctf_set_errno>
    10f8:	mov	x0, x22
    10fc:	bl	0 <free>
    1100:	mov	x0, x19
    1104:	bl	0 <fclose>
    1108:	b	1050 <ctf_link_write+0x238>
    110c:	adrp	x23, 0 <ctf_arc_close_thunk>
    1110:	add	x23, x23, #0x0
    1114:	bl	0 <__errno_location>
    1118:	mov	x1, x0
    111c:	mov	x0, x20
    1120:	ldr	w1, [x1]
    1124:	bl	0 <ctf_set_errno>
    1128:	b	1050 <ctf_link_write+0x238>
    112c:	adrp	x23, 0 <ctf_arc_close_thunk>
    1130:	mov	x22, #0x0                   	// #0
    1134:	add	x23, x23, #0x0
    1138:	b	10e4 <ctf_link_write+0x2cc>
    113c:	adrp	x23, 0 <ctf_arc_close_thunk>
    1140:	add	x23, x23, #0x0
    1144:	b	10e4 <ctf_link_write+0x2cc>
    1148:	mov	w1, w0
    114c:	adrp	x23, 0 <ctf_arc_close_thunk>
    1150:	mov	x0, x20
    1154:	add	x23, x23, #0x0
    1158:	bl	0 <ctf_set_errno>
    115c:	b	1100 <ctf_link_write+0x2e8>
    1160:	adrp	x23, 0 <ctf_arc_close_thunk>
    1164:	mov	x22, #0x0                   	// #0
    1168:	add	x23, x23, #0x0
    116c:	b	10e4 <ctf_link_write+0x2cc>
    1170:	adrp	x23, 0 <ctf_arc_close_thunk>
    1174:	add	x23, x23, #0x0
    1178:	b	1114 <ctf_link_write+0x2fc>
    117c:	adrp	x23, 0 <ctf_arc_close_thunk>
    1180:	add	x23, x23, #0x0
    1184:	b	1114 <ctf_link_write+0x2fc>
    1188:	adrp	x23, 0 <ctf_arc_close_thunk>
    118c:	add	x23, x23, #0x0
    1190:	b	10e4 <ctf_link_write+0x2cc>

ctf-lookup.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_lookup_by_name>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	adrp	x24, 0 <ctf_lookup_by_name>
  10:	add	x24, x24, #0x0
  14:	stp	x25, x26, [sp, #64]
  18:	mov	x25, x1
  1c:	stp	x19, x20, [sp, #16]
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x21, x0
  28:	add	x0, x24, #0x8
  2c:	stp	x27, x28, [sp, #80]
  30:	str	x0, [sp, #96]
  34:	cbz	x25, 2ec <ctf_lookup_by_name+0x2ec>
  38:	mov	x0, x25
  3c:	bl	0 <strlen>
  40:	ldrb	w1, [x25]
  44:	add	x22, x25, x0
  48:	cbz	w1, 1b8 <ctf_lookup_by_name+0x1b8>
  4c:	bl	0 <__ctype_b_loc>
  50:	mov	x19, x25
  54:	mov	x23, x0
  58:	mov	x27, #0x0                   	// #0
  5c:	nop
  60:	ldrb	w20, [x19]
  64:	ldr	x28, [x23]
  68:	ubfiz	x0, x20, #1, #8
  6c:	ldrh	w0, [x28, x0]
  70:	tbz	w0, #13, 88 <ctf_lookup_by_name+0x88>
  74:	nop
  78:	ldrb	w20, [x19, #1]!
  7c:	ubfiz	x0, x20, #1, #8
  80:	ldrh	w2, [x28, x0]
  84:	tbnz	w2, #13, 78 <ctf_lookup_by_name+0x78>
  88:	cmp	x22, x19
  8c:	b.eq	2d8 <ctf_lookup_by_name+0x2d8>  // b.none
  90:	add	x26, x19, #0x1
  94:	mov	x1, x24
  98:	mov	x0, x26
  9c:	bl	0 <strpbrk>
  a0:	cmp	x0, #0x0
  a4:	csel	x3, x0, x22, ne  // ne = any
  a8:	cmp	w20, #0x2a
  ac:	b.eq	154 <ctf_lookup_by_name+0x154>  // b.none
  b0:	ldurb	w0, [x3, #-1]
  b4:	sub	x26, x3, x19
  b8:	add	w0, w0, w26
  bc:	sub	w0, w0, #0x69
  c0:	cmp	w0, #0x14
  c4:	b.hi	e0 <ctf_lookup_by_name+0xe0>  // b.pmore
  c8:	ldr	x1, [sp, #96]
  cc:	sbfiz	x0, x0, #4, #32
  d0:	add	x1, x1, x0
  d4:	ldr	x1, [x1, #8]
  d8:	cmp	x26, x1
  dc:	b.eq	294 <ctf_lookup_by_name+0x294>  // b.none
  e0:	ldr	x1, [x21, #216]
  e4:	add	x20, x21, #0xd8
  e8:	cbz	x1, 11c <ctf_lookup_by_name+0x11c>
  ec:	nop
  f0:	ldrb	w3, [x1]
  f4:	mov	x2, x26
  f8:	mov	x0, x19
  fc:	cbz	w3, 108 <ctf_lookup_by_name+0x108>
 100:	bl	0 <strncmp>
 104:	cbnz	w0, 114 <ctf_lookup_by_name+0x114>
 108:	ldr	x0, [x20, #8]
 10c:	cmp	x26, x0
 110:	b.cs	1e8 <ctf_lookup_by_name+0x1e8>  // b.hs, b.nlast
 114:	ldr	x1, [x20, #24]!
 118:	cbnz	x1, f0 <ctf_lookup_by_name+0xf0>
 11c:	mov	x0, x21
 120:	mov	w1, #0x402                 	// #1026
 124:	bl	0 <ctf_set_errno>
 128:	ldr	x21, [x21, #512]
 12c:	cbnz	x21, 34 <ctf_lookup_by_name+0x34>
 130:	mov	x27, #0xffffffffffffffff    	// #-1
 134:	mov	x0, x27
 138:	ldp	x19, x20, [sp, #16]
 13c:	ldp	x21, x22, [sp, #32]
 140:	ldp	x23, x24, [sp, #48]
 144:	ldp	x25, x26, [sp, #64]
 148:	ldp	x27, x28, [sp, #80]
 14c:	ldp	x29, x30, [sp], #112
 150:	ret
 154:	ldr	w1, [x21, #544]
 158:	ldr	x0, [x21, #448]
 15c:	and	w3, w1, w27
 160:	ldr	w0, [x0, x3, lsl #2]
 164:	cbnz	x0, 190 <ctf_lookup_by_name+0x190>
 168:	mov	x1, x27
 16c:	mov	x0, x21
 170:	bl	0 <ctf_type_resolve_unsliced>
 174:	cmn	x0, #0x1
 178:	b.eq	11c <ctf_lookup_by_name+0x11c>  // b.none
 17c:	ldr	w1, [x21, #544]
 180:	ldr	x3, [x21, #448]
 184:	and	w0, w1, w0
 188:	ldr	w0, [x3, x0, lsl #2]
 18c:	cbz	x0, 11c <ctf_lookup_by_name+0x11c>
 190:	ldr	w3, [x21, #552]
 194:	tbz	w3, #0, 1dc <ctf_lookup_by_name+0x1dc>
 198:	add	w1, w1, #0x1
 19c:	mov	x19, x26
 1a0:	orr	x27, x1, x0
 1a4:	ldrb	w0, [x19]
 1a8:	cbnz	w0, 60 <ctf_lookup_by_name+0x60>
 1ac:	cmp	x27, #0x0
 1b0:	ccmp	w0, #0x0, #0x0, ne  // ne = any
 1b4:	b.eq	134 <ctf_lookup_by_name+0x134>  // b.none
 1b8:	mov	x0, x21
 1bc:	mov	w1, #0x403                 	// #1027
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldp	x21, x22, [sp, #32]
 1c8:	ldp	x23, x24, [sp, #48]
 1cc:	ldp	x25, x26, [sp, #64]
 1d0:	ldp	x27, x28, [sp, #80]
 1d4:	ldp	x29, x30, [sp], #112
 1d8:	b	0 <ctf_set_errno>
 1dc:	mov	x27, x0
 1e0:	mov	x19, x26
 1e4:	b	1a4 <ctf_lookup_by_name+0x1a4>
 1e8:	ldrb	w1, [x19, x0]
 1ec:	add	x27, x19, x0
 1f0:	ldrh	w0, [x28, x1, lsl #1]
 1f4:	tbnz	w0, #13, 278 <ctf_lookup_by_name+0x278>
 1f8:	mov	x0, x27
 1fc:	mov	w1, #0x2a                  	// #42
 200:	bl	0 <strchr>
 204:	cmp	x0, #0x0
 208:	csel	x19, x0, x22, ne  // ne = any
 20c:	ldurb	w0, [x19, #-1]
 210:	ldrh	w0, [x28, x0, lsl #1]
 214:	tbz	w0, #13, 228 <ctf_lookup_by_name+0x228>
 218:	ldurb	w0, [x19, #-2]
 21c:	sub	x19, x19, #0x1
 220:	ldrh	w0, [x28, x0, lsl #1]
 224:	tbnz	w0, #13, 218 <ctf_lookup_by_name+0x218>
 228:	ldr	x1, [x21, #712]
 22c:	sub	x28, x19, x27
 230:	add	x0, x28, #0x1
 234:	cmp	x1, x0
 238:	ldr	x0, [x21, #704]
 23c:	b.cc	2bc <ctf_lookup_by_name+0x2bc>  // b.lo, b.ul, b.last
 240:	mov	x2, x28
 244:	mov	x1, x27
 248:	bl	0 <memcpy>
 24c:	ldr	x0, [x21, #704]
 250:	strb	wzr, [x0, x28]
 254:	ldr	x2, [x21, #704]
 258:	mov	x0, x21
 25c:	ldr	x1, [x20, #16]
 260:	bl	0 <ctf_lookup_by_rawhash>
 264:	mov	x27, x0
 268:	cbz	x0, 11c <ctf_lookup_by_name+0x11c>
 26c:	ldr	x0, [x20]
 270:	cbnz	x0, 1a4 <ctf_lookup_by_name+0x1a4>
 274:	b	11c <ctf_lookup_by_name+0x11c>
 278:	ldrb	w0, [x27, #1]!
 27c:	ldrh	w0, [x28, x0, lsl #1]
 280:	tbz	w0, #13, 1f8 <ctf_lookup_by_name+0x1f8>
 284:	ldrb	w0, [x27, #1]!
 288:	ldrh	w0, [x28, x0, lsl #1]
 28c:	tbz	w0, #13, 1f8 <ctf_lookup_by_name+0x1f8>
 290:	b	278 <ctf_lookup_by_name+0x278>
 294:	ldr	x1, [sp, #96]
 298:	mov	x2, x26
 29c:	str	x3, [sp, #104]
 2a0:	ldr	x0, [x1, x0]
 2a4:	mov	x1, x19
 2a8:	bl	0 <strncmp>
 2ac:	ldr	x3, [sp, #104]
 2b0:	cbnz	w0, e0 <ctf_lookup_by_name+0xe0>
 2b4:	mov	x19, x3
 2b8:	b	1a4 <ctf_lookup_by_name+0x1a4>
 2bc:	bl	0 <free>
 2c0:	mov	x1, x28
 2c4:	mov	x0, x27
 2c8:	bl	0 <xstrndup>
 2cc:	mov	x2, x0
 2d0:	str	x0, [x21, #704]
 2d4:	b	258 <ctf_lookup_by_name+0x258>
 2d8:	ldrb	w0, [x22]
 2dc:	cmp	x27, #0x0
 2e0:	ccmp	w0, #0x0, #0x0, ne  // ne = any
 2e4:	b.eq	134 <ctf_lookup_by_name+0x134>  // b.none
 2e8:	b	1b8 <ctf_lookup_by_name+0x1b8>
 2ec:	mov	x0, x21
 2f0:	mov	w1, #0x16                  	// #22
 2f4:	ldp	x19, x20, [sp, #16]
 2f8:	ldp	x21, x22, [sp, #32]
 2fc:	ldp	x23, x24, [sp, #48]
 300:	ldp	x25, x26, [sp, #64]
 304:	ldp	x27, x28, [sp, #80]
 308:	ldp	x29, x30, [sp], #112
 30c:	b	0 <ctf_set_errno>

0000000000000310 <ctf_lookup_variable>:
 310:	stp	x29, x30, [sp, #-80]!
 314:	mov	x29, sp
 318:	stp	x23, x24, [sp, #48]
 31c:	mov	x24, x0
 320:	mov	x23, x1
 324:	stp	x19, x20, [sp, #16]
 328:	stp	x21, x22, [sp, #32]
 32c:	str	x25, [sp, #64]
 330:	ldp	x22, x21, [x24, #464]
 334:	cbz	x21, 38c <ctf_lookup_variable+0x7c>
 338:	mov	x20, #0x0                   	// #0
 33c:	b	350 <ctf_lookup_variable+0x40>
 340:	b.eq	39c <ctf_lookup_variable+0x8c>  // b.none
 344:	add	x20, x19, #0x1
 348:	cmp	x21, x20
 34c:	b.ls	38c <ctf_lookup_variable+0x7c>  // b.plast
 350:	add	x19, x20, x21
 354:	mov	x0, x24
 358:	lsr	x19, x19, #1
 35c:	lsl	x2, x19, #3
 360:	add	x25, x22, x2
 364:	ldr	w1, [x22, x2]
 368:	bl	0 <ctf_strptr>
 36c:	mov	x1, x0
 370:	mov	x0, x23
 374:	bl	0 <strcmp>
 378:	cmp	w0, #0x0
 37c:	b.ge	340 <ctf_lookup_variable+0x30>  // b.tcont
 380:	mov	x21, x19
 384:	cmp	x21, x20
 388:	b.hi	350 <ctf_lookup_variable+0x40>  // b.pmore
 38c:	ldr	x0, [x24, #512]
 390:	cbz	x0, 3b8 <ctf_lookup_variable+0xa8>
 394:	mov	x24, x0
 398:	b	330 <ctf_lookup_variable+0x20>
 39c:	ldr	w0, [x25, #4]
 3a0:	ldp	x19, x20, [sp, #16]
 3a4:	ldp	x21, x22, [sp, #32]
 3a8:	ldp	x23, x24, [sp, #48]
 3ac:	ldr	x25, [sp, #64]
 3b0:	ldp	x29, x30, [sp], #80
 3b4:	ret
 3b8:	mov	x0, x24
 3bc:	mov	w1, #0x407                 	// #1031
 3c0:	ldp	x19, x20, [sp, #16]
 3c4:	ldp	x21, x22, [sp, #32]
 3c8:	ldp	x23, x24, [sp, #48]
 3cc:	ldr	x25, [sp, #64]
 3d0:	ldp	x29, x30, [sp], #80
 3d4:	b	0 <ctf_set_errno>

00000000000003d8 <ctf_lookup_symbol_name>:
 3d8:	add	x2, x0, #0x38
 3dc:	stp	x29, x30, [sp, #-64]!
 3e0:	mov	x29, sp
 3e4:	ldr	x3, [x2, #8]
 3e8:	cbz	x3, 47c <ctf_lookup_symbol_name+0xa4>
 3ec:	ldr	x4, [x0, #432]
 3f0:	str	x19, [sp, #16]
 3f4:	mov	x19, x0
 3f8:	cmp	x4, x1
 3fc:	b.ls	44c <ctf_lookup_symbol_name+0x74>  // b.plast
 400:	ldr	x0, [x2, #24]
 404:	cmp	x0, #0x10
 408:	b.eq	468 <ctf_lookup_symbol_name+0x90>  // b.none
 40c:	add	x1, x1, x1, lsl #1
 410:	add	x1, x3, x1, lsl #3
 414:	ldr	x2, [x19, #360]
 418:	adrp	x0, 0 <_CTF_NULLSTR>
 41c:	ldr	w1, [x1]
 420:	add	x0, x0, #0x0
 424:	cmp	x1, x2
 428:	b.cc	438 <ctf_lookup_symbol_name+0x60>  // b.lo, b.ul, b.last
 42c:	ldr	x19, [sp, #16]
 430:	ldp	x29, x30, [sp], #64
 434:	ret
 438:	ldr	x0, [x19, #352]
 43c:	ldr	x19, [sp, #16]
 440:	add	x0, x0, x1
 444:	ldp	x29, x30, [sp], #64
 448:	ret
 44c:	mov	w1, #0x16                  	// #22
 450:	bl	0 <ctf_set_errno>
 454:	adrp	x0, 0 <_CTF_NULLSTR>
 458:	add	x0, x0, #0x0
 45c:	ldr	x19, [sp, #16]
 460:	ldp	x29, x30, [sp], #64
 464:	ret
 468:	add	x0, x3, x1, lsl #4
 46c:	add	x1, sp, #0x28
 470:	bl	0 <ctf_sym_to_elf64>
 474:	mov	x1, x0
 478:	b	414 <ctf_lookup_symbol_name+0x3c>
 47c:	mov	w1, #0x3f2                 	// #1010
 480:	bl	0 <ctf_set_errno>
 484:	adrp	x0, 0 <_CTF_NULLSTR>
 488:	add	x0, x0, #0x0
 48c:	b	430 <ctf_lookup_symbol_name+0x58>

0000000000000490 <ctf_lookup_by_symbol>:
 490:	ldr	x3, [x0, #64]
 494:	add	x4, x0, #0x38
 498:	mov	x2, x0
 49c:	cbz	x3, 524 <ctf_lookup_by_symbol+0x94>
 4a0:	ldr	x5, [x0, #432]
 4a4:	cmp	x5, x1
 4a8:	b.ls	510 <ctf_lookup_by_symbol+0x80>  // b.plast
 4ac:	ldr	x0, [x4, #24]
 4b0:	cmp	x0, #0x10
 4b4:	b.eq	4f0 <ctf_lookup_by_symbol+0x60>  // b.none
 4b8:	add	x0, x1, x1, lsl #1
 4bc:	add	x3, x3, x0, lsl #3
 4c0:	ldrb	w0, [x3, #4]
 4c4:	and	w0, w0, #0xf
 4c8:	cmp	w0, #0x1
 4cc:	b.ne	504 <ctf_lookup_by_symbol+0x74>  // b.any
 4d0:	ldr	x0, [x2, #424]
 4d4:	ldr	w0, [x0, x1, lsl #2]
 4d8:	cmn	w0, #0x1
 4dc:	b.eq	518 <ctf_lookup_by_symbol+0x88>  // b.none
 4e0:	ldr	x1, [x2, #408]
 4e4:	ldr	w0, [x1, w0, uxtw]
 4e8:	cbz	x0, 518 <ctf_lookup_by_symbol+0x88>
 4ec:	ret
 4f0:	add	x3, x3, x1, lsl #4
 4f4:	ldrb	w0, [x3, #12]
 4f8:	and	w0, w0, #0xf
 4fc:	cmp	w0, #0x1
 500:	b.eq	4d0 <ctf_lookup_by_symbol+0x40>  // b.none
 504:	mov	x0, x2
 508:	mov	w1, #0x406                 	// #1030
 50c:	b	0 <ctf_set_errno>
 510:	mov	w1, #0x16                  	// #22
 514:	b	0 <ctf_set_errno>
 518:	mov	x0, x2
 51c:	mov	w1, #0x407                 	// #1031
 520:	b	0 <ctf_set_errno>
 524:	mov	w1, #0x3f2                 	// #1010
 528:	b	0 <ctf_set_errno>
 52c:	nop

0000000000000530 <ctf_lookup_by_id>:
 530:	stp	x29, x30, [sp, #-48]!
 534:	mov	x29, sp
 538:	stp	x19, x20, [sp, #16]
 53c:	mov	x19, x0
 540:	ldr	x0, [x0]
 544:	ldr	w2, [x0, #552]
 548:	str	x21, [sp, #32]
 54c:	tbz	w2, #0, 5ac <ctf_lookup_by_id+0x7c>
 550:	ldr	w3, [x0, #544]
 554:	cmp	x3, x1
 558:	b.cc	5ac <ctf_lookup_by_id+0x7c>  // b.lo, b.ul, b.last
 55c:	ldr	x20, [x0, #512]
 560:	cbz	x20, 610 <ctf_lookup_by_id+0xe0>
 564:	ldr	w2, [x20, #552]
 568:	tbnz	w2, #1, 5b4 <ctf_lookup_by_id+0x84>
 56c:	ldr	w2, [x20, #544]
 570:	ands	x1, x2, x1
 574:	b.eq	5e0 <ctf_lookup_by_id+0xb0>  // b.none
 578:	ldr	x2, [x20, #480]
 57c:	cmp	x2, x1
 580:	b.cc	5e0 <ctf_lookup_by_id+0xb0>  // b.lo, b.ul, b.last
 584:	ldr	x0, [x20, #440]
 588:	ldr	x21, [x20, #408]
 58c:	ldr	w0, [x0, x1, lsl #2]
 590:	str	x20, [x19]
 594:	add	x21, x21, x0
 598:	mov	x0, x21
 59c:	ldp	x19, x20, [sp, #16]
 5a0:	ldr	x21, [sp, #32]
 5a4:	ldp	x29, x30, [sp], #48
 5a8:	ret
 5ac:	mov	x20, x0
 5b0:	tbz	w2, #1, 56c <ctf_lookup_by_id+0x3c>
 5b4:	mov	x0, x20
 5b8:	bl	0 <ctf_dynamic_type>
 5bc:	mov	x21, x0
 5c0:	cbz	x0, 600 <ctf_lookup_by_id+0xd0>
 5c4:	str	x20, [x19]
 5c8:	add	x21, x0, #0x18
 5cc:	mov	x0, x21
 5d0:	ldp	x19, x20, [sp, #16]
 5d4:	ldr	x21, [sp, #32]
 5d8:	ldp	x29, x30, [sp], #48
 5dc:	ret
 5e0:	mov	x21, #0x0                   	// #0
 5e4:	mov	w1, #0x3fa                 	// #1018
 5e8:	bl	0 <ctf_set_errno>
 5ec:	mov	x0, x21
 5f0:	ldp	x19, x20, [sp, #16]
 5f4:	ldr	x21, [sp, #32]
 5f8:	ldp	x29, x30, [sp], #48
 5fc:	ret
 600:	ldr	x0, [x19]
 604:	mov	w1, #0x3fa                 	// #1018
 608:	bl	0 <ctf_set_errno>
 60c:	b	598 <ctf_lookup_by_id+0x68>
 610:	mov	w1, #0x3f3                 	// #1011
 614:	mov	x21, #0x0                   	// #0
 618:	bl	0 <ctf_set_errno>
 61c:	b	598 <ctf_lookup_by_id+0x68>

0000000000000620 <ctf_func_info>:
 620:	add	x4, x0, #0x38
 624:	stp	x29, x30, [sp, #-64]!
 628:	mov	x29, sp
 62c:	ldr	x3, [x4, #8]
 630:	cbz	x3, 784 <ctf_func_info+0x164>
 634:	stp	x21, x22, [sp, #32]
 638:	mov	x21, x2
 63c:	ldr	x2, [x0, #432]
 640:	stp	x19, x20, [sp, #16]
 644:	mov	x19, x0
 648:	cmp	x2, x1
 64c:	b.ls	74c <ctf_func_info+0x12c>  // b.plast
 650:	ldr	x0, [x4, #24]
 654:	cmp	x0, #0x10
 658:	b.eq	708 <ctf_func_info+0xe8>  // b.none
 65c:	add	x0, x1, x1, lsl #1
 660:	add	x3, x3, x0, lsl #3
 664:	ldrb	w0, [x3, #4]
 668:	and	w0, w0, #0xf
 66c:	cmp	w0, #0x2
 670:	b.ne	71c <ctf_func_info+0xfc>  // b.any
 674:	ldr	x0, [x19, #424]
 678:	ldr	w0, [x0, x1, lsl #2]
 67c:	cmn	w0, #0x1
 680:	b.eq	7ac <ctf_func_info+0x18c>  // b.none
 684:	ldr	x1, [x19]
 688:	ldr	x22, [x19, #408]
 68c:	ldr	x1, [x1]
 690:	str	x23, [sp, #48]
 694:	ldr	w23, [x22, w0, uxtw]
 698:	add	x22, x22, w0, uxtw
 69c:	mov	w0, w23
 6a0:	blr	x1
 6a4:	ldr	x1, [x19]
 6a8:	mov	w20, w0
 6ac:	mov	w0, w23
 6b0:	ldr	x1, [x1, #16]
 6b4:	blr	x1
 6b8:	mov	w1, w0
 6bc:	orr	w0, w20, w0
 6c0:	cbz	w0, 790 <ctf_func_info+0x170>
 6c4:	cmp	w20, #0x5
 6c8:	b.ne	764 <ctf_func_info+0x144>  // b.any
 6cc:	ldr	w2, [x22, #4]
 6d0:	mov	w0, #0x0                   	// #0
 6d4:	str	x2, [x21]
 6d8:	stp	w1, wzr, [x21, #8]
 6dc:	cbz	w1, 738 <ctf_func_info+0x118>
 6e0:	sub	w1, w1, #0x1
 6e4:	add	x22, x22, w1, uxtw #2
 6e8:	ldr	w2, [x22, #8]
 6ec:	cbnz	w2, 738 <ctf_func_info+0x118>
 6f0:	mov	w2, #0x1                   	// #1
 6f4:	ldp	x19, x20, [sp, #16]
 6f8:	ldr	x23, [sp, #48]
 6fc:	stp	w1, w2, [x21, #8]
 700:	ldp	x21, x22, [sp, #32]
 704:	b	730 <ctf_func_info+0x110>
 708:	add	x3, x3, x1, lsl #4
 70c:	ldrb	w0, [x3, #12]
 710:	and	w0, w0, #0xf
 714:	cmp	w0, #0x2
 718:	b.eq	674 <ctf_func_info+0x54>  // b.none
 71c:	mov	x0, x19
 720:	mov	w1, #0x404                 	// #1028
 724:	bl	0 <ctf_set_errno>
 728:	ldp	x19, x20, [sp, #16]
 72c:	ldp	x21, x22, [sp, #32]
 730:	ldp	x29, x30, [sp], #64
 734:	ret
 738:	ldp	x19, x20, [sp, #16]
 73c:	ldp	x21, x22, [sp, #32]
 740:	ldr	x23, [sp, #48]
 744:	ldp	x29, x30, [sp], #64
 748:	ret
 74c:	mov	w1, #0x16                  	// #22
 750:	bl	0 <ctf_set_errno>
 754:	ldp	x19, x20, [sp, #16]
 758:	ldp	x21, x22, [sp, #32]
 75c:	ldp	x29, x30, [sp], #64
 760:	ret
 764:	mov	x0, x19
 768:	mov	w1, #0x3ef                 	// #1007
 76c:	bl	0 <ctf_set_errno>
 770:	ldp	x19, x20, [sp, #16]
 774:	ldp	x21, x22, [sp, #32]
 778:	ldr	x23, [sp, #48]
 77c:	ldp	x29, x30, [sp], #64
 780:	ret
 784:	mov	w1, #0x3f2                 	// #1010
 788:	bl	0 <ctf_set_errno>
 78c:	b	730 <ctf_func_info+0x110>
 790:	mov	x0, x19
 794:	mov	w1, #0x405                 	// #1029
 798:	bl	0 <ctf_set_errno>
 79c:	ldp	x19, x20, [sp, #16]
 7a0:	ldp	x21, x22, [sp, #32]
 7a4:	ldr	x23, [sp, #48]
 7a8:	b	730 <ctf_func_info+0x110>
 7ac:	mov	x0, x19
 7b0:	mov	w1, #0x405                 	// #1029
 7b4:	bl	0 <ctf_set_errno>
 7b8:	ldp	x19, x20, [sp, #16]
 7bc:	ldp	x21, x22, [sp, #32]
 7c0:	b	730 <ctf_func_info+0x110>
 7c4:	nop

00000000000007c8 <ctf_func_args>:
 7c8:	stp	x29, x30, [sp, #-64]!
 7cc:	mov	x29, sp
 7d0:	stp	x19, x20, [sp, #16]
 7d4:	mov	w20, w2
 7d8:	mov	x19, x3
 7dc:	add	x2, sp, #0x30
 7e0:	stp	x21, x22, [sp, #32]
 7e4:	mov	x21, x0
 7e8:	mov	x22, x1
 7ec:	bl	620 <ctf_func_info>
 7f0:	tbnz	w0, #31, 8b0 <ctf_func_args+0xe8>
 7f4:	ldr	x0, [x21, #424]
 7f8:	ldr	x1, [x21, #408]
 7fc:	ldr	w3, [x0, x22, lsl #2]
 800:	ldr	w0, [sp, #56]
 804:	add	x1, x1, #0x8
 808:	add	x3, x3, x1
 80c:	cmp	w0, w20
 810:	mov	x4, x3
 814:	csel	w2, w0, w20, ls  // ls = plast
 818:	cbz	w2, 89c <ctf_func_args+0xd4>
 81c:	sub	w0, w2, #0x1
 820:	cmp	w0, #0x2
 824:	b.ls	874 <ctf_func_args+0xac>  // b.plast
 828:	lsr	w1, w2, #2
 82c:	mov	x0, x19
 830:	sub	w1, w1, #0x1
 834:	add	x1, x1, #0x1
 838:	add	x1, x19, x1, lsl #5
 83c:	nop
 840:	ldr	q0, [x4], #16
 844:	uxtl	v1.2d, v0.2s
 848:	uxtl2	v0.2d, v0.4s
 84c:	stp	q1, q0, [x0]
 850:	add	x0, x0, #0x20
 854:	cmp	x1, x0
 858:	b.ne	840 <ctf_func_args+0x78>  // b.any
 85c:	and	x0, x2, #0xfffffffc
 860:	tst	x2, #0x3
 864:	and	w2, w2, #0x3
 868:	add	x19, x19, x0, lsl #3
 86c:	add	x3, x3, x0, lsl #2
 870:	b.eq	89c <ctf_func_args+0xd4>  // b.none
 874:	ldr	w0, [x3]
 878:	cmp	w2, #0x1
 87c:	str	x0, [x19]
 880:	b.eq	89c <ctf_func_args+0xd4>  // b.none
 884:	ldr	w0, [x3, #4]
 888:	cmp	w2, #0x2
 88c:	str	x0, [x19, #8]
 890:	b.eq	89c <ctf_func_args+0xd4>  // b.none
 894:	ldr	w0, [x3, #8]
 898:	str	x0, [x19, #16]
 89c:	mov	w0, #0x0                   	// #0
 8a0:	ldp	x19, x20, [sp, #16]
 8a4:	ldp	x21, x22, [sp, #32]
 8a8:	ldp	x29, x30, [sp], #64
 8ac:	ret
 8b0:	mov	w0, #0xffffffff            	// #-1
 8b4:	b	8a0 <ctf_func_args+0xd8>

ctf-open.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_kind_v1>:
       0:	ubfx	x0, x0, #11, #5
       4:	ret

0000000000000008 <get_root_v1>:
       8:	ubfx	x0, x0, #10, #1
       c:	ret

0000000000000010 <get_vlen_v1>:
      10:	and	w0, w0, #0x3ff
      14:	ret

0000000000000018 <get_kind_v2>:
      18:	lsr	w0, w0, #26
      1c:	ret

0000000000000020 <get_root_v2>:
      20:	ubfx	x0, x0, #25, #1
      24:	ret

0000000000000028 <get_vlen_v2>:
      28:	and	w0, w0, #0xffffff
      2c:	ret

0000000000000030 <get_ctt_size_v1>:
      30:	ldrh	w0, [x1, #6]
      34:	mov	w5, #0xffff                	// #65535
      38:	ldp	w6, w1, [x1, #8]
      3c:	cmp	w0, w5
      40:	mov	x4, #0x8                   	// #8
      44:	and	x0, x0, #0xffff
      48:	b.eq	60 <get_ctt_size_v1+0x30>  // b.none
      4c:	cbz	x2, 54 <get_ctt_size_v1+0x24>
      50:	str	x0, [x2]
      54:	cbz	x3, 5c <get_ctt_size_v1+0x2c>
      58:	str	x4, [x3]
      5c:	ret
      60:	mov	w0, w1
      64:	mov	x4, #0x10                  	// #16
      68:	orr	x0, x0, x6, lsl #32
      6c:	b	4c <get_ctt_size_v1+0x1c>

0000000000000070 <get_ctt_size_v2>:
      70:	ldp	w0, w5, [x1, #8]
      74:	mov	x4, #0xc                   	// #12
      78:	ldr	w1, [x1, #16]
      7c:	cmn	w0, #0x1
      80:	mov	w0, w0
      84:	b.eq	9c <get_ctt_size_v2+0x2c>  // b.none
      88:	cbz	x2, 90 <get_ctt_size_v2+0x20>
      8c:	str	x0, [x2]
      90:	cbz	x3, 98 <get_ctt_size_v2+0x28>
      94:	str	x4, [x3]
      98:	ret
      9c:	mov	w0, w1
      a0:	mov	x4, #0x14                  	// #20
      a4:	orr	x0, x0, x5, lsl #32
      a8:	b	88 <get_ctt_size_v2+0x18>
      ac:	nop

00000000000000b0 <ctf_set_base>:
      b0:	stp	x29, x30, [sp, #-32]!
      b4:	mov	x29, sp
      b8:	ldp	w4, w3, [x1, #36]
      bc:	stp	x19, x20, [sp, #16]
      c0:	ldr	w6, [x1, #48]
      c4:	mov	x20, x1
      c8:	sub	w3, w3, w4
      cc:	ldr	x5, [x0, #392]
      d0:	lsr	w3, w3, #3
      d4:	ldr	x1, [x0, #408]
      d8:	mov	x19, x0
      dc:	sub	x1, x1, x5
      e0:	ldr	w5, [x20, #44]
      e4:	str	x2, [x0, #392]
      e8:	add	x2, x2, x1
      ec:	ldr	w1, [x20, #4]
      f0:	add	x4, x2, w4, uxtw
      f4:	add	x5, x2, x5
      f8:	stp	x5, x6, [x0, #336]
      fc:	str	x2, [x0, #408]
     100:	stp	x4, x3, [x0, #464]
     104:	cbnz	w1, 15c <ctf_set_base+0xac>
     108:	ldr	w1, [x20, #8]
     10c:	cbnz	w1, 16c <ctf_set_base+0xbc>
     110:	ldr	w1, [x20, #12]
     114:	cbnz	w1, 180 <ctf_set_base+0xd0>
     118:	ldr	x1, [x19, #496]
     11c:	cbz	x1, 12c <ctf_set_base+0x7c>
     120:	adrp	x0, 0 <get_kind_v1>
     124:	add	x0, x0, #0x0
     128:	bl	0 <ctf_dprintf>
     12c:	ldr	x1, [x19, #528]
     130:	cbz	x1, 194 <ctf_set_base+0xe4>
     134:	ldr	x3, [x19, #520]
     138:	adrp	x2, 0 <get_kind_v1>
     13c:	ldp	x19, x20, [sp, #16]
     140:	cmp	x3, #0x0
     144:	ldp	x29, x30, [sp], #32
     148:	add	x2, x2, #0x0
     14c:	csel	x2, x2, x3, eq  // eq = none
     150:	adrp	x0, 0 <get_kind_v1>
     154:	add	x0, x0, #0x0
     158:	b	0 <ctf_dprintf>
     15c:	bl	0 <ctf_strptr>
     160:	str	x0, [x19, #520]
     164:	ldr	w1, [x20, #8]
     168:	cbz	w1, 110 <ctf_set_base+0x60>
     16c:	mov	x0, x19
     170:	bl	0 <ctf_strptr>
     174:	ldr	w1, [x20, #12]
     178:	str	x0, [x19, #528]
     17c:	cbz	w1, 118 <ctf_set_base+0x68>
     180:	mov	x0, x19
     184:	bl	0 <ctf_strptr>
     188:	mov	x1, x0
     18c:	str	x0, [x19, #496]
     190:	b	11c <ctf_set_base+0x6c>
     194:	ldp	x19, x20, [sp, #16]
     198:	ldp	x29, x30, [sp], #32
     19c:	ret

00000000000001a0 <get_vbytes_v2>:
     1a0:	and	w3, w0, #0xffff
     1a4:	cmp	w3, #0x5
     1a8:	b.eq	234 <get_vbytes_v2+0x94>  // b.none
     1ac:	b.hi	1c0 <get_vbytes_v2+0x20>  // b.pmore
     1b0:	cmp	w3, #0x4
     1b4:	mov	x0, #0xc                   	// #12
     1b8:	b.ne	1ec <get_vbytes_v2+0x4c>  // b.any
     1bc:	ret
     1c0:	sub	w0, w3, #0x6
     1c4:	and	w0, w0, #0xffff
     1c8:	cmp	w0, #0x1
     1cc:	b.hi	244 <get_vbytes_v2+0xa4>  // b.pmore
     1d0:	add	x3, x2, x2, lsl #1
     1d4:	lsl	x0, x2, #4
     1d8:	mov	x2, #0x1fffffff            	// #536870911
     1dc:	cmp	x1, x2
     1e0:	lsl	x1, x3, #2
     1e4:	csel	x0, x0, x1, gt
     1e8:	ret
     1ec:	cmp	w3, #0x2
     1f0:	b.hi	204 <get_vbytes_v2+0x64>  // b.pmore
     1f4:	cmp	w3, #0x0
     1f8:	cset	x0, ne  // ne = any
     1fc:	lsl	x0, x0, #2
     200:	ret
     204:	cmp	w3, #0x3
     208:	mov	x0, #0x0                   	// #0
     20c:	b.eq	1bc <get_vbytes_v2+0x1c>  // b.none
     210:	stp	x29, x30, [sp, #-16]!
     214:	mov	w1, w3
     218:	adrp	x0, 0 <get_kind_v1>
     21c:	mov	x29, sp
     220:	add	x0, x0, #0x0
     224:	bl	0 <ctf_dprintf>
     228:	mov	x0, #0x3ef                 	// #1007
     22c:	ldp	x29, x30, [sp], #16
     230:	ret
     234:	add	x0, x2, #0x1
     238:	and	x0, x0, #0xfffffffffffffffe
     23c:	lsl	x0, x0, #2
     240:	ret
     244:	lsl	x0, x2, #3
     248:	cmp	w3, #0x8
     24c:	b.eq	26c <get_vbytes_v2+0xcc>  // b.none
     250:	cmp	w3, #0xd
     254:	mov	x0, #0x0                   	// #0
     258:	b.ls	1bc <get_vbytes_v2+0x1c>  // b.plast
     25c:	cmp	w3, #0xe
     260:	mov	x0, #0x8                   	// #8
     264:	b.ne	210 <get_vbytes_v2+0x70>  // b.any
     268:	ret
     26c:	ret

0000000000000270 <get_vbytes_v1>:
     270:	and	w3, w0, #0xffff
     274:	cmp	w3, #0x5
     278:	b.eq	300 <get_vbytes_v1+0x90>  // b.none
     27c:	b.hi	290 <get_vbytes_v1+0x20>  // b.pmore
     280:	cmp	w3, #0x4
     284:	mov	x0, #0x8                   	// #8
     288:	b.ne	2b8 <get_vbytes_v1+0x48>  // b.any
     28c:	ret
     290:	sub	w0, w3, #0x6
     294:	and	w0, w0, #0xffff
     298:	cmp	w0, #0x1
     29c:	b.hi	310 <get_vbytes_v1+0xa0>  // b.pmore
     2a0:	mov	x0, #0x1fff                	// #8191
     2a4:	lsl	x3, x2, #3
     2a8:	cmp	x1, x0
     2ac:	lsl	x0, x2, #4
     2b0:	csel	x0, x0, x3, gt
     2b4:	ret
     2b8:	cmp	w3, #0x2
     2bc:	b.hi	2d0 <get_vbytes_v1+0x60>  // b.pmore
     2c0:	cmp	w3, #0x0
     2c4:	cset	x0, ne  // ne = any
     2c8:	lsl	x0, x0, #2
     2cc:	ret
     2d0:	cmp	w3, #0x3
     2d4:	mov	x0, #0x0                   	// #0
     2d8:	b.eq	28c <get_vbytes_v1+0x1c>  // b.none
     2dc:	stp	x29, x30, [sp, #-16]!
     2e0:	mov	w1, w3
     2e4:	adrp	x0, 0 <get_kind_v1>
     2e8:	mov	x29, sp
     2ec:	add	x0, x0, #0x0
     2f0:	bl	0 <ctf_dprintf>
     2f4:	mov	x0, #0x3ef                 	// #1007
     2f8:	ldp	x29, x30, [sp], #16
     2fc:	ret
     300:	add	x0, x2, #0x1
     304:	and	x0, x0, #0xfffffffffffffffe
     308:	lsl	x0, x0, #1
     30c:	ret
     310:	lsl	x0, x2, #3
     314:	cmp	w3, #0x8
     318:	b.eq	338 <get_vbytes_v1+0xc8>  // b.none
     31c:	cmp	w3, #0xd
     320:	mov	x0, #0x0                   	// #0
     324:	b.ls	28c <get_vbytes_v1+0x1c>  // b.plast
     328:	cmp	w3, #0xe
     32c:	mov	x0, #0x8                   	// #8
     330:	b.ne	2dc <get_vbytes_v1+0x6c>  // b.any
     334:	ret
     338:	ret
     33c:	nop

0000000000000340 <flip_ctf>:
     340:	stp	x29, x30, [sp, #-96]!
     344:	mov	x29, sp
     348:	ldp	w2, w4, [x0, #16]
     34c:	stp	x21, x22, [sp, #32]
     350:	sub	w5, w4, w2
     354:	stp	x23, x24, [sp, #48]
     358:	add	x2, x1, w2, uxtw
     35c:	stp	x25, x26, [sp, #64]
     360:	cmp	xzr, x5, lsr #3
     364:	b.eq	3b0 <flip_ctf+0x70>  // b.none
     368:	lsr	x6, x5, #3
     36c:	cmp	x6, #0x1
     370:	b.eq	3a4 <flip_ctf+0x64>  // b.none
     374:	lsr	x7, x5, #4
     378:	and	x5, x5, #0xfffffff0
     37c:	mov	x3, #0x0                   	// #0
     380:	ldr	q0, [x2, x3]
     384:	rev32	v0.16b, v0.16b
     388:	str	q0, [x2, x3]
     38c:	add	x3, x3, #0x10
     390:	cmp	x3, x5
     394:	b.ne	380 <flip_ctf+0x40>  // b.any
     398:	add	x2, x2, x3
     39c:	cmp	x6, x7, lsl #1
     3a0:	b.eq	3b0 <flip_ctf+0x70>  // b.none
     3a4:	ldr	d0, [x2]
     3a8:	rev32	v0.8b, v0.8b
     3ac:	str	d0, [x2]
     3b0:	ldr	w2, [x0, #24]
     3b4:	add	x3, x1, w4, uxtw
     3b8:	sub	w4, w2, w4
     3bc:	lsr	x6, x4, #2
     3c0:	mov	x5, x6
     3c4:	cbz	x6, 440 <flip_ctf+0x100>
     3c8:	cmp	x6, #0x3
     3cc:	b.le	408 <flip_ctf+0xc8>
     3d0:	lsr	x5, x4, #4
     3d4:	and	x4, x4, #0xfffffff0
     3d8:	mov	x2, #0x0                   	// #0
     3dc:	nop
     3e0:	ldr	q0, [x3, x2]
     3e4:	rev32	v0.16b, v0.16b
     3e8:	str	q0, [x3, x2]
     3ec:	add	x2, x2, #0x10
     3f0:	cmp	x2, x4
     3f4:	b.ne	3e0 <flip_ctf+0xa0>  // b.any
     3f8:	lsl	x5, x5, #2
     3fc:	add	x3, x3, x2
     400:	subs	x5, x6, x5
     404:	b.eq	43c <flip_ctf+0xfc>  // b.none
     408:	ldr	w2, [x3]
     40c:	cmp	x5, #0x1
     410:	rev	w2, w2
     414:	str	w2, [x3]
     418:	b.eq	43c <flip_ctf+0xfc>  // b.none
     41c:	ldr	w2, [x3, #4]
     420:	cmp	x5, #0x2
     424:	rev	w2, w2
     428:	str	w2, [x3, #4]
     42c:	b.eq	43c <flip_ctf+0xfc>  // b.none
     430:	ldr	w2, [x3, #8]
     434:	rev	w2, w2
     438:	str	w2, [x3, #8]
     43c:	ldr	w2, [x0, #24]
     440:	ldr	w4, [x0, #28]
     444:	add	x3, x1, w2, uxtw
     448:	sub	w2, w4, w2
     44c:	lsr	x6, x2, #2
     450:	mov	x5, x6
     454:	cbz	x6, 4d0 <flip_ctf+0x190>
     458:	cmp	x6, #0x3
     45c:	b.le	498 <flip_ctf+0x158>
     460:	lsr	x5, x2, #4
     464:	and	x4, x2, #0xfffffff0
     468:	mov	x2, #0x0                   	// #0
     46c:	nop
     470:	ldr	q0, [x3, x2]
     474:	rev32	v0.16b, v0.16b
     478:	str	q0, [x3, x2]
     47c:	add	x2, x2, #0x10
     480:	cmp	x2, x4
     484:	b.ne	470 <flip_ctf+0x130>  // b.any
     488:	lsl	x5, x5, #2
     48c:	add	x3, x3, x2
     490:	subs	x5, x6, x5
     494:	b.eq	4cc <flip_ctf+0x18c>  // b.none
     498:	ldr	w2, [x3]
     49c:	cmp	x5, #0x1
     4a0:	rev	w2, w2
     4a4:	str	w2, [x3]
     4a8:	b.eq	4cc <flip_ctf+0x18c>  // b.none
     4ac:	ldr	w2, [x3, #4]
     4b0:	cmp	x5, #0x2
     4b4:	rev	w2, w2
     4b8:	str	w2, [x3, #4]
     4bc:	b.eq	4cc <flip_ctf+0x18c>  // b.none
     4c0:	ldr	w2, [x3, #8]
     4c4:	rev	w2, w2
     4c8:	str	w2, [x3, #8]
     4cc:	ldr	w4, [x0, #28]
     4d0:	ldr	w2, [x0, #32]
     4d4:	add	x3, x1, w4, uxtw
     4d8:	sub	w4, w2, w4
     4dc:	lsr	x6, x4, #2
     4e0:	mov	x5, x6
     4e4:	cbz	x6, 560 <flip_ctf+0x220>
     4e8:	cmp	x6, #0x3
     4ec:	b.le	528 <flip_ctf+0x1e8>
     4f0:	lsr	x5, x4, #4
     4f4:	and	x4, x4, #0xfffffff0
     4f8:	mov	x2, #0x0                   	// #0
     4fc:	nop
     500:	ldr	q0, [x3, x2]
     504:	rev32	v0.16b, v0.16b
     508:	str	q0, [x3, x2]
     50c:	add	x2, x2, #0x10
     510:	cmp	x2, x4
     514:	b.ne	500 <flip_ctf+0x1c0>  // b.any
     518:	lsl	x5, x5, #2
     51c:	add	x3, x3, x2
     520:	subs	x5, x6, x5
     524:	b.eq	55c <flip_ctf+0x21c>  // b.none
     528:	ldr	w2, [x3]
     52c:	cmp	x5, #0x1
     530:	rev	w2, w2
     534:	str	w2, [x3]
     538:	b.eq	55c <flip_ctf+0x21c>  // b.none
     53c:	ldr	w2, [x3, #4]
     540:	cmp	x5, #0x2
     544:	rev	w2, w2
     548:	str	w2, [x3, #4]
     54c:	b.eq	55c <flip_ctf+0x21c>  // b.none
     550:	ldr	w2, [x3, #8]
     554:	rev	w2, w2
     558:	str	w2, [x3, #8]
     55c:	ldr	w2, [x0, #32]
     560:	ldr	w4, [x0, #36]
     564:	add	x3, x1, w2, uxtw
     568:	sub	w2, w4, w2
     56c:	lsr	x6, x2, #2
     570:	mov	x5, x6
     574:	cbz	x6, 5f0 <flip_ctf+0x2b0>
     578:	cmp	x6, #0x3
     57c:	b.le	5b8 <flip_ctf+0x278>
     580:	lsr	x5, x2, #4
     584:	and	x4, x2, #0xfffffff0
     588:	mov	x2, #0x0                   	// #0
     58c:	nop
     590:	ldr	q0, [x3, x2]
     594:	rev32	v0.16b, v0.16b
     598:	str	q0, [x3, x2]
     59c:	add	x2, x2, #0x10
     5a0:	cmp	x2, x4
     5a4:	b.ne	590 <flip_ctf+0x250>  // b.any
     5a8:	lsl	x5, x5, #2
     5ac:	add	x3, x3, x2
     5b0:	subs	x5, x6, x5
     5b4:	b.eq	5ec <flip_ctf+0x2ac>  // b.none
     5b8:	ldr	w2, [x3]
     5bc:	cmp	x5, #0x1
     5c0:	rev	w2, w2
     5c4:	str	w2, [x3]
     5c8:	b.eq	5ec <flip_ctf+0x2ac>  // b.none
     5cc:	ldr	w2, [x3, #4]
     5d0:	cmp	x5, #0x2
     5d4:	rev	w2, w2
     5d8:	str	w2, [x3, #4]
     5dc:	b.eq	5ec <flip_ctf+0x2ac>  // b.none
     5e0:	ldr	w2, [x3, #8]
     5e4:	rev	w2, w2
     5e8:	str	w2, [x3, #8]
     5ec:	ldr	w4, [x0, #36]
     5f0:	ldr	w5, [x0, #40]
     5f4:	add	x3, x1, w4, uxtw
     5f8:	sub	w4, w5, w4
     5fc:	cmp	xzr, x4, lsr #3
     600:	lsr	x6, x4, #3
     604:	b.eq	650 <flip_ctf+0x310>  // b.none
     608:	cmp	x6, #0x1
     60c:	b.eq	644 <flip_ctf+0x304>  // b.none
     610:	lsr	x7, x4, #4
     614:	and	x4, x4, #0xfffffff0
     618:	mov	x2, #0x0                   	// #0
     61c:	nop
     620:	ldr	q0, [x3, x2]
     624:	rev32	v0.16b, v0.16b
     628:	str	q0, [x3, x2]
     62c:	add	x2, x2, #0x10
     630:	cmp	x2, x4
     634:	b.ne	620 <flip_ctf+0x2e0>  // b.any
     638:	add	x3, x3, x2
     63c:	cmp	x6, x7, lsl #1
     640:	b.eq	650 <flip_ctf+0x310>  // b.none
     644:	ldr	d0, [x3]
     648:	rev32	v0.8b, v0.8b
     64c:	str	d0, [x3]
     650:	ldr	w24, [x0, #44]
     654:	add	x21, x1, w5, uxtw
     658:	adrp	x26, 0 <get_kind_v1>
     65c:	mov	x23, x21
     660:	sub	w24, w24, w5
     664:	add	x26, x26, #0x0
     668:	add	x24, x24, x21
     66c:	cmp	x21, x24
     670:	b.cs	850 <flip_ctf+0x510>  // b.hs, b.nlast
     674:	stp	x19, x20, [sp, #16]
     678:	str	x27, [sp, #80]
     67c:	b	708 <flip_ctf+0x3c8>
     680:	mov	x3, #0xc                   	// #12
     684:	cmp	w19, #0x4
     688:	mov	x4, x3
     68c:	b.ne	974 <flip_ctf+0x634>  // b.any
     690:	cmn	w22, #0x1
     694:	b.eq	8d0 <flip_ctf+0x590>  // b.none
     698:	add	x1, x23, #0xc
     69c:	cmp	w19, #0x5
     6a0:	mov	x2, x1
     6a4:	b.eq	8f8 <flip_ctf+0x5b8>  // b.none
     6a8:	b.ls	868 <flip_ctf+0x528>  // b.plast
     6ac:	cmp	w19, #0x8
     6b0:	b.eq	a24 <flip_ctf+0x6e4>  // b.none
     6b4:	b.ls	770 <flip_ctf+0x430>  // b.plast
     6b8:	cmp	w19, #0xd
     6bc:	b.ls	a00 <flip_ctf+0x6c0>  // b.plast
     6c0:	cmp	w19, #0xe
     6c4:	b.ne	9b8 <flip_ctf+0x678>  // b.any
     6c8:	cmp	x4, #0x8
     6cc:	b.ne	b80 <flip_ctf+0x840>  // b.any
     6d0:	ldrh	w2, [x1, #4]
     6d4:	ldrh	w0, [x1, #6]
     6d8:	ldr	w4, [x1]
     6dc:	rev16	w2, w2
     6e0:	rev16	w0, w0
     6e4:	strh	w2, [x1, #4]
     6e8:	rev	w4, w4
     6ec:	str	w4, [x1]
     6f0:	strh	w0, [x1, #6]
     6f4:	nop
     6f8:	add	x23, x3, x1
     6fc:	cmp	x24, x23
     700:	mov	x21, x23
     704:	b.ls	848 <flip_ctf+0x508>  // b.plast
     708:	ldr	d0, [x21]
     70c:	ldp	w1, w22, [x21, #4]
     710:	rev32	v0.8b, v0.8b
     714:	rev	w1, w1
     718:	rev	w25, w22
     71c:	str	w25, [x21, #8]
     720:	mov	x22, x25
     724:	lsr	w19, w1, #26
     728:	and	w27, w1, #0xffffff
     72c:	str	d0, [x21]
     730:	cmp	w19, #0x5
     734:	and	x20, x1, #0xffffff
     738:	b.eq	8b8 <flip_ctf+0x578>  // b.none
     73c:	cmp	w19, #0x5
     740:	b.ls	680 <flip_ctf+0x340>  // b.plast
     744:	sub	w1, w19, #0x6
     748:	and	w1, w1, #0xffff
     74c:	cmp	w1, #0x1
     750:	b.hi	b08 <flip_ctf+0x7c8>  // b.pmore
     754:	mov	w0, #0x1fffffff            	// #536870911
     758:	cmp	w25, w0
     75c:	b.hi	9f4 <flip_ctf+0x6b4>  // b.pmore
     760:	mov	w3, #0xc                   	// #12
     764:	umull	x3, w27, w3
     768:	mov	x4, x3
     76c:	b	698 <flip_ctf+0x358>
     770:	b.eq	9b8 <flip_ctf+0x678>  // b.none
     774:	mov	x4, #0x1fffffff            	// #536870911
     778:	mov	x0, x20
     77c:	cmp	x25, x4
     780:	b.hi	b38 <flip_ctf+0x7f8>  // b.pmore
     784:	cbz	w27, 6f8 <flip_ctf+0x3b8>
     788:	cmp	x20, #0x3
     78c:	b.le	7dc <flip_ctf+0x49c>
     790:	lsr	x4, x20, #2
     794:	mov	x2, x1
     798:	add	x4, x4, x4, lsl #1
     79c:	add	x4, x1, x4, lsl #4
     7a0:	ldp	q1, q2, [x2]
     7a4:	ldr	q0, [x2, #32]
     7a8:	rev32	v2.16b, v2.16b
     7ac:	rev32	v1.16b, v1.16b
     7b0:	rev32	v0.16b, v0.16b
     7b4:	stp	q1, q2, [x2]
     7b8:	add	x2, x2, #0x30
     7bc:	stur	q0, [x2, #-16]
     7c0:	cmp	x2, x4
     7c4:	b.ne	7a0 <flip_ctf+0x460>  // b.any
     7c8:	and	x2, x20, #0xfffffffffffffffc
     7cc:	subs	x0, x20, x2
     7d0:	add	x2, x2, x2, lsl #1
     7d4:	add	x2, x1, x2, lsl #2
     7d8:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     7dc:	ldr	d0, [x2]
     7e0:	cmp	x0, #0x1
     7e4:	ldr	w4, [x2, #8]
     7e8:	rev32	v0.8b, v0.8b
     7ec:	rev	w4, w4
     7f0:	str	w4, [x2, #8]
     7f4:	str	d0, [x2]
     7f8:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     7fc:	ldur	d0, [x2, #12]
     800:	mov	x4, x2
     804:	cmp	x0, #0x2
     808:	rev32	v0.8b, v0.8b
     80c:	str	d0, [x4, #12]!
     810:	ldr	w0, [x4, #8]
     814:	rev	w0, w0
     818:	str	w0, [x4, #8]
     81c:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     820:	ldr	d0, [x2, #24]
     824:	rev32	v0.8b, v0.8b
     828:	str	d0, [x2, #24]!
     82c:	ldr	w0, [x2, #8]
     830:	rev	w0, w0
     834:	str	w0, [x2, #8]
     838:	add	x23, x3, x1
     83c:	cmp	x24, x23
     840:	mov	x21, x23
     844:	b.hi	708 <flip_ctf+0x3c8>  // b.pmore
     848:	ldp	x19, x20, [sp, #16]
     84c:	ldr	x27, [sp, #80]
     850:	mov	w0, #0x0                   	// #0
     854:	ldp	x21, x22, [sp, #32]
     858:	ldp	x23, x24, [sp, #48]
     85c:	ldp	x25, x26, [sp, #64]
     860:	ldp	x29, x30, [sp], #96
     864:	ret
     868:	cmp	w19, #0x3
     86c:	b.eq	a00 <flip_ctf+0x6c0>  // b.none
     870:	b.ls	8a0 <flip_ctf+0x560>  // b.plast
     874:	cmp	w19, #0x4
     878:	b.ne	9b4 <flip_ctf+0x674>  // b.any
     87c:	cmp	x4, #0xc
     880:	b.ne	b60 <flip_ctf+0x820>  // b.any
     884:	ldr	d0, [x1]
     888:	ldr	w0, [x1, #8]
     88c:	rev32	v0.8b, v0.8b
     890:	rev	w0, w0
     894:	str	w0, [x1, #8]
     898:	str	d0, [x1]
     89c:	b	6f8 <flip_ctf+0x3b8>
     8a0:	cbz	w19, a00 <flip_ctf+0x6c0>
     8a4:	b.eq	9b8 <flip_ctf+0x678>  // b.none
     8a8:	ldr	w0, [x1]
     8ac:	rev	w0, w0
     8b0:	str	w0, [x1]
     8b4:	b	6f8 <flip_ctf+0x3b8>
     8b8:	add	x3, x20, #0x1
     8bc:	cmn	w22, #0x1
     8c0:	and	x3, x3, #0xfffffffffffffffe
     8c4:	lsl	x3, x3, #2
     8c8:	mov	x4, x3
     8cc:	b.ne	698 <flip_ctf+0x358>  // b.any
     8d0:	ldp	w25, w0, [x21, #12]
     8d4:	add	x1, x23, #0x14
     8d8:	mov	x2, x1
     8dc:	cmp	w19, #0x5
     8e0:	rev	w25, w25
     8e4:	rev	w0, w0
     8e8:	stp	w25, w0, [x21, #12]
     8ec:	orr	x25, x0, x25, lsl #32
     8f0:	b.ne	6a8 <flip_ctf+0x368>  // b.any
     8f4:	nop
     8f8:	mov	x0, x20
     8fc:	cbz	w27, 6f8 <flip_ctf+0x3b8>
     900:	cmp	x20, #0x3
     904:	b.le	93c <flip_ctf+0x5fc>
     908:	lsr	x0, x20, #2
     90c:	mov	x2, x1
     910:	add	x0, x1, x0, lsl #4
     914:	nop
     918:	ldr	q0, [x2]
     91c:	rev32	v0.16b, v0.16b
     920:	str	q0, [x2], #16
     924:	cmp	x0, x2
     928:	b.ne	918 <flip_ctf+0x5d8>  // b.any
     92c:	and	x2, x20, #0xfffffffffffffffc
     930:	subs	x0, x20, x2
     934:	add	x2, x1, x2, lsl #2
     938:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     93c:	ldr	w4, [x2]
     940:	cmp	x0, #0x1
     944:	rev	w4, w4
     948:	str	w4, [x2]
     94c:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     950:	ldr	w4, [x2, #4]
     954:	cmp	x0, #0x2
     958:	rev	w0, w4
     95c:	str	w0, [x2, #4]
     960:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     964:	ldr	w0, [x2, #8]
     968:	rev	w0, w0
     96c:	str	w0, [x2, #8]
     970:	b	838 <flip_ctf+0x4f8>
     974:	cmp	w19, #0x2
     978:	b.hi	98c <flip_ctf+0x64c>  // b.pmore
     97c:	cbz	w19, 9e8 <flip_ctf+0x6a8>
     980:	mov	x3, #0x4                   	// #4
     984:	mov	x4, x3
     988:	b	690 <flip_ctf+0x350>
     98c:	cmp	w19, #0x3
     990:	mov	x3, #0x0                   	// #0
     994:	mov	x4, #0x0                   	// #0
     998:	b.eq	690 <flip_ctf+0x350>  // b.none
     99c:	mov	w1, w19
     9a0:	mov	x0, x26
     9a4:	bl	0 <ctf_dprintf>
     9a8:	mov	x3, #0x3ef                 	// #1007
     9ac:	mov	x4, x3
     9b0:	b	690 <flip_ctf+0x350>
     9b4:	mov	w19, #0x5                   	// #5
     9b8:	mov	w1, w19
     9bc:	adrp	x0, 0 <get_kind_v1>
     9c0:	add	x0, x0, #0x0
     9c4:	bl	0 <ctf_dprintf>
     9c8:	mov	w0, #0x3ef                 	// #1007
     9cc:	ldp	x19, x20, [sp, #16]
     9d0:	ldp	x21, x22, [sp, #32]
     9d4:	ldp	x23, x24, [sp, #48]
     9d8:	ldp	x25, x26, [sp, #64]
     9dc:	ldr	x27, [sp, #80]
     9e0:	ldp	x29, x30, [sp], #96
     9e4:	ret
     9e8:	mov	x3, #0x0                   	// #0
     9ec:	mov	x4, #0x0                   	// #0
     9f0:	b	690 <flip_ctf+0x350>
     9f4:	lsl	x3, x20, #4
     9f8:	mov	x4, x3
     9fc:	b	690 <flip_ctf+0x350>
     a00:	cbz	x4, 6f8 <flip_ctf+0x3b8>
     a04:	adrp	x3, 0 <get_kind_v1>
     a08:	adrp	x1, 0 <get_kind_v1>
     a0c:	adrp	x0, 0 <get_kind_v1>
     a10:	add	x3, x3, #0x0
     a14:	add	x1, x1, #0x0
     a18:	add	x0, x0, #0x0
     a1c:	mov	w2, #0x428                 	// #1064
     a20:	bl	0 <__assert_fail>
     a24:	mov	x0, x20
     a28:	cbz	w27, 6f8 <flip_ctf+0x3b8>
     a2c:	cmp	x20, #0x4
     a30:	b.le	aac <flip_ctf+0x76c>
     a34:	sub	x11, x20, #0x1
     a38:	mov	x2, x1
     a3c:	lsr	x10, x11, #2
     a40:	add	x10, x1, x10, lsl #5
     a44:	nop
     a48:	ld2	{v0.4s, v1.4s}, [x2]
     a4c:	mov	x4, x2
     a50:	add	x9, x2, #0x10
     a54:	add	x8, x2, #0x18
     a58:	add	x7, x2, #0x4
     a5c:	add	x6, x2, #0xc
     a60:	rev32	v0.16b, v0.16b
     a64:	add	x5, x2, #0x14
     a68:	add	x0, x2, #0x1c
     a6c:	add	x2, x2, #0x20
     a70:	str	s0, [x4], #8
     a74:	st1	{v0.s}[1], [x4]
     a78:	st1	{v0.s}[2], [x9]
     a7c:	st1	{v0.s}[3], [x8]
     a80:	ld2	{v0.4s, v1.4s}, [x7]
     a84:	rev32	v0.16b, v0.16b
     a88:	stur	s0, [x2, #-28]
     a8c:	cmp	x2, x10
     a90:	st1	{v0.s}[1], [x6]
     a94:	st1	{v0.s}[2], [x5]
     a98:	st1	{v0.s}[3], [x0]
     a9c:	b.ne	a48 <flip_ctf+0x708>  // b.any
     aa0:	and	x2, x11, #0xfffffffffffffffc
     aa4:	sub	x0, x20, x2
     aa8:	add	x2, x1, x2, lsl #3
     aac:	ldp	w5, w4, [x2]
     ab0:	cmp	x0, #0x1
     ab4:	rev	w5, w5
     ab8:	rev	w4, w4
     abc:	stp	w5, w4, [x2]
     ac0:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     ac4:	ldp	w5, w4, [x2, #8]
     ac8:	cmp	x0, #0x2
     acc:	rev	w5, w5
     ad0:	rev	w4, w4
     ad4:	stp	w5, w4, [x2, #8]
     ad8:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     adc:	cmp	x0, #0x3
     ae0:	ldp	w4, w0, [x2, #16]
     ae4:	rev	w4, w4
     ae8:	rev	w0, w0
     aec:	stp	w4, w0, [x2, #16]
     af0:	b.eq	6f8 <flip_ctf+0x3b8>  // b.none
     af4:	ldp	w4, w0, [x2, #24]
     af8:	rev	w4, w4
     afc:	rev	w0, w0
     b00:	stp	w4, w0, [x2, #24]
     b04:	b	6f8 <flip_ctf+0x3b8>
     b08:	cmp	w19, #0x8
     b0c:	b.eq	b2c <flip_ctf+0x7ec>  // b.none
     b10:	cmp	w19, #0xd
     b14:	b.ls	9e8 <flip_ctf+0x6a8>  // b.plast
     b18:	mov	x3, #0x8                   	// #8
     b1c:	cmp	w19, #0xe
     b20:	mov	x4, x3
     b24:	b.eq	690 <flip_ctf+0x350>  // b.none
     b28:	b	99c <flip_ctf+0x65c>
     b2c:	lsl	x3, x20, #3
     b30:	mov	x4, x3
     b34:	b	690 <flip_ctf+0x350>
     b38:	cbz	w27, 6f8 <flip_ctf+0x3b8>
     b3c:	add	x27, x1, w27, uxtw #4
     b40:	mov	x0, x1
     b44:	nop
     b48:	ldr	q0, [x0]
     b4c:	rev32	v0.16b, v0.16b
     b50:	str	q0, [x0], #16
     b54:	cmp	x27, x0
     b58:	b.ne	b48 <flip_ctf+0x808>  // b.any
     b5c:	b	6f8 <flip_ctf+0x3b8>
     b60:	adrp	x3, 0 <get_kind_v1>
     b64:	adrp	x1, 0 <get_kind_v1>
     b68:	adrp	x0, 0 <get_kind_v1>
     b6c:	add	x3, x3, #0x0
     b70:	add	x1, x1, #0x0
     b74:	add	x0, x0, #0x0
     b78:	mov	w2, #0x448                 	// #1096
     b7c:	bl	0 <__assert_fail>
     b80:	adrp	x3, 0 <get_kind_v1>
     b84:	adrp	x1, 0 <get_kind_v1>
     b88:	adrp	x0, 0 <get_kind_v1>
     b8c:	add	x3, x3, #0x0
     b90:	add	x1, x1, #0x0
     b94:	add	x0, x0, #0x0
     b98:	mov	w2, #0x456                 	// #1110
     b9c:	bl	0 <__assert_fail>

0000000000000ba0 <init_types>:
     ba0:	sub	sp, sp, #0x2f0
     ba4:	mov	x2, #0x200                 	// #512
     ba8:	stp	x29, x30, [sp]
     bac:	mov	x29, sp
     bb0:	stp	x27, x28, [sp, #80]
     bb4:	mov	x27, x0
     bb8:	add	x28, sp, #0xf0
     bbc:	stp	x25, x26, [sp, #64]
     bc0:	mov	x25, x1
     bc4:	mov	x0, x28
     bc8:	mov	w1, #0x0                   	// #0
     bcc:	bl	0 <memset>
     bd0:	ldr	w0, [x27, #552]
     bd4:	ldr	w1, [x25, #8]
     bd8:	stp	x19, x20, [sp, #16]
     bdc:	stp	x21, x22, [sp, #32]
     be0:	stp	x23, x24, [sp, #48]
     be4:	str	w1, [sp, #164]
     be8:	tbnz	w0, #1, 218c <init_types+0x15ec>
     bec:	ldp	w22, w20, [x25, #40]
     bf0:	ldr	x21, [x27, #408]
     bf4:	mov	w26, w22
     bf8:	ldr	w0, [x27, #560]
     bfc:	add	x19, x21, x26
     c00:	add	x20, x21, x20
     c04:	cmp	w0, #0x1
     c08:	b.eq	1248 <init_types+0x6a8>  // b.none
     c0c:	mov	x23, x19
     c10:	add	x22, sp, #0xe8
     c14:	add	x21, sp, #0xe0
     c18:	cmp	x19, x20
     c1c:	b.cc	c54 <init_types+0xb4>  // b.lo, b.ul, b.last
     c20:	b	d30 <init_types+0x190>
     c24:	and	x24, x24, #0xffff
     c28:	add	x23, x23, x0
     c2c:	ldr	x1, [x27, #480]
     c30:	ldr	x2, [x28, x24, lsl #3]
     c34:	add	x1, x1, #0x1
     c38:	ldr	x0, [sp, #232]
     c3c:	add	x2, x2, #0x1
     c40:	str	x2, [x28, x24, lsl #3]
     c44:	str	x1, [x27, #480]
     c48:	add	x23, x23, x0
     c4c:	cmp	x23, x20
     c50:	b.cs	d30 <init_types+0x190>  // b.hs, b.nlast
     c54:	ldr	x1, [x27]
     c58:	ldr	w0, [x23, #4]
     c5c:	ldr	x1, [x1]
     c60:	blr	x1
     c64:	and	w25, w0, #0xffff
     c68:	ldr	x1, [x27]
     c6c:	mov	w24, w0
     c70:	ldr	w0, [x23, #4]
     c74:	ldr	x1, [x1, #16]
     c78:	blr	x1
     c7c:	mov	w26, w0
     c80:	ldr	x5, [x27]
     c84:	mov	x3, x22
     c88:	mov	x2, x21
     c8c:	mov	x1, x23
     c90:	mov	x0, x27
     c94:	ldr	x5, [x5, #24]
     c98:	blr	x5
     c9c:	ldr	x3, [x27]
     ca0:	mov	w2, w26
     ca4:	ldr	x1, [sp, #224]
     ca8:	mov	w0, w25
     cac:	ldr	x3, [x3, #32]
     cb0:	blr	x3
     cb4:	tbnz	x0, #63, d0c <init_types+0x16c>
     cb8:	cmp	w25, #0x9
     cbc:	b.ne	c24 <init_types+0x84>  // b.any
     cc0:	ldr	w1, [x23, #8]
     cc4:	sub	w2, w1, #0x1
     cc8:	cmp	w2, #0x3d
     ccc:	b.ls	ce0 <init_types+0x140>  // b.plast
     cd0:	ldr	x1, [sp, #288]
     cd4:	add	x1, x1, #0x1
     cd8:	str	x1, [sp, #288]
     cdc:	b	c24 <init_types+0x84>
     ce0:	mov	w1, w1
     ce4:	ldr	x2, [x28, x1, lsl #3]
     ce8:	add	x2, x2, #0x1
     cec:	str	x2, [x28, x1, lsl #3]
     cf0:	b	c24 <init_types+0x84>
     cf4:	cmp	w1, #0x2
     cf8:	b.hi	1124 <init_types+0x584>  // b.pmore
     cfc:	cbnz	w1, 11a0 <init_types+0x600>
     d00:	adrp	x0, 0 <get_kind_v1>
     d04:	add	x0, x0, #0x0
     d08:	bl	0 <ctf_dprintf>
     d0c:	mov	w0, #0x3ef                 	// #1007
     d10:	ldp	x29, x30, [sp]
     d14:	ldp	x19, x20, [sp, #16]
     d18:	ldp	x21, x22, [sp, #32]
     d1c:	ldp	x23, x24, [sp, #48]
     d20:	ldp	x25, x26, [sp, #64]
     d24:	ldp	x27, x28, [sp, #80]
     d28:	add	sp, sp, #0x2f0
     d2c:	ret
     d30:	ldr	w0, [sp, #164]
     d34:	cbnz	w0, f58 <init_types+0x3b8>
     d38:	adrp	x0, 0 <get_kind_v1>
     d3c:	mov	x1, x27
     d40:	add	x0, x0, #0x0
     d44:	bl	0 <ctf_dprintf>
     d48:	ldr	x0, [sp, #288]
     d4c:	adrp	x22, 0 <ctf_hash_eq_string>
     d50:	adrp	x21, 0 <ctf_hash_string>
     d54:	add	x22, x22, #0x0
     d58:	add	x21, x21, #0x0
     d5c:	mov	x2, x22
     d60:	mov	x1, x21
     d64:	bl	0 <ctf_hash_create>
     d68:	str	x0, [x27, #152]
     d6c:	cbz	x0, 1164 <init_types+0x5c4>
     d70:	ldr	x0, [sp, #296]
     d74:	mov	x2, x22
     d78:	mov	x1, x21
     d7c:	bl	0 <ctf_hash_create>
     d80:	str	x0, [x27, #168]
     d84:	cbz	x0, 1164 <init_types+0x5c4>
     d88:	ldr	x0, [sp, #304]
     d8c:	mov	x2, x22
     d90:	mov	x1, x21
     d94:	bl	0 <ctf_hash_create>
     d98:	str	x0, [x27, #184]
     d9c:	cbz	x0, 1164 <init_types+0x5c4>
     da0:	ldp	x0, x5, [sp, #248]
     da4:	mov	x2, x22
     da8:	ldr	x3, [sp, #280]
     dac:	mov	x1, x21
     db0:	ldr	x6, [sp, #320]
     db4:	add	x0, x0, x5
     db8:	add	x3, x3, x6
     dbc:	add	x0, x0, x3
     dc0:	ldp	x6, x3, [sp, #328]
     dc4:	ldr	x5, [sp, #264]
     dc8:	add	x5, x5, x6
     dcc:	ldr	x6, [sp, #344]
     dd0:	add	x0, x0, x5
     dd4:	add	x3, x3, x6
     dd8:	add	x0, x0, x3
     ddc:	bl	0 <ctf_hash_create>
     de0:	str	x0, [x27, #200]
     de4:	cbz	x0, 1164 <init_types+0x5c4>
     de8:	ldr	x21, [x27, #480]
     dec:	add	x23, x21, #0x1
     df0:	lsl	x22, x23, #2
     df4:	mov	x0, x22
     df8:	bl	0 <malloc>
     dfc:	mov	x25, x0
     e00:	str	x25, [x27, #440]
     e04:	str	x23, [x27, #456]
     e08:	mov	x0, x22
     e0c:	mov	x1, #0x1                   	// #1
     e10:	bl	0 <calloc>
     e14:	str	x0, [x27, #448]
     e18:	cmp	x0, #0x0
     e1c:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     e20:	b.eq	1164 <init_types+0x5c4>  // b.none
     e24:	ldr	w0, [sp, #164]
     e28:	mov	x2, x22
     e2c:	mov	w1, #0x0                   	// #0
     e30:	cmp	w0, #0x0
     e34:	cset	w0, ne  // ne = any
     e38:	str	w0, [sp, #192]
     e3c:	mov	x0, x25
     e40:	str	wzr, [x25], #4
     e44:	bl	0 <memset>
     e48:	cmp	x19, x20
     e4c:	b.cs	2164 <init_types+0x15c4>  // b.hs, b.nlast
     e50:	add	x22, sp, #0xe8
     e54:	add	x21, sp, #0xe0
     e58:	mov	w26, #0x1                   	// #1
     e5c:	str	wzr, [sp, #176]
     e60:	str	wzr, [sp, #184]
     e64:	nop
     e68:	ldr	x1, [x27]
     e6c:	ldr	w0, [x19, #4]
     e70:	ldr	x1, [x1]
     e74:	blr	x1
     e78:	mov	w24, w0
     e7c:	ldr	x1, [x27]
     e80:	ldr	w0, [x19, #4]
     e84:	ldr	x1, [x1, #8]
     e88:	blr	x1
     e8c:	str	w0, [sp, #168]
     e90:	ldr	x1, [x27]
     e94:	ldr	w0, [x19, #4]
     e98:	ldr	x1, [x1, #16]
     e9c:	blr	x1
     ea0:	mov	w23, w0
     ea4:	ldr	x6, [x27]
     ea8:	mov	x3, x22
     eac:	mov	x2, x21
     eb0:	mov	x1, x19
     eb4:	mov	x0, x27
     eb8:	ldr	x6, [x6, #24]
     ebc:	blr	x6
     ec0:	ldr	w1, [x19]
     ec4:	mov	x0, x27
     ec8:	bl	0 <ctf_strptr>
     ecc:	ldr	x3, [x27]
     ed0:	mov	w2, w23
     ed4:	ldr	x1, [sp, #224]
     ed8:	mov	x23, x0
     edc:	ldr	x3, [x3, #32]
     ee0:	mov	w0, w24
     ee4:	blr	x3
     ee8:	mov	x28, x0
     eec:	and	w1, w24, #0xffff
     ef0:	cmp	w1, #0x7
     ef4:	b.eq	1200 <init_types+0x660>  // b.none
     ef8:	tst	w24, #0xfff8
     efc:	b.ne	f78 <init_types+0x3d8>  // b.any
     f00:	cmp	w1, #0x4
     f04:	b.eq	fb8 <init_types+0x418>  // b.none
     f08:	b.ls	cf4 <init_types+0x154>  // b.plast
     f0c:	cmp	w1, #0x5
     f10:	b.eq	f8c <init_types+0x3ec>  // b.none
     f14:	cmp	w1, #0x6
     f18:	b.ne	2184 <init_types+0x15e4>  // b.any
     f1c:	ldr	w1, [sp, #164]
     f20:	mov	w2, w26
     f24:	ldr	x0, [x27, #152]
     f28:	cbnz	w1, 1188 <init_types+0x5e8>
     f2c:	ldr	w3, [x19]
     f30:	mov	x1, x27
     f34:	bl	0 <ctf_hash_define_type>
     f38:	cbnz	w0, d10 <init_types+0x170>
     f3c:	ldr	x0, [sp, #224]
     f40:	mov	x1, #0x1fffffff            	// #536870911
     f44:	cmp	x0, x1
     f48:	ldr	w0, [sp, #184]
     f4c:	cinc	w0, w0, gt
     f50:	str	w0, [sp, #184]
     f54:	b	fb8 <init_types+0x418>
     f58:	mov	x1, x27
     f5c:	adrp	x0, 0 <get_kind_v1>
     f60:	add	x0, x0, #0x0
     f64:	bl	0 <ctf_dprintf>
     f68:	ldr	w0, [x27, #552]
     f6c:	orr	w0, w0, #0x1
     f70:	str	w0, [x27, #552]
     f74:	b	d48 <init_types+0x1a8>
     f78:	cmp	w1, #0xa
     f7c:	b.eq	f8c <init_types+0x3ec>  // b.none
     f80:	b.ls	10dc <init_types+0x53c>  // b.plast
     f84:	cmp	w1, #0xd
     f88:	b.hi	10d0 <init_types+0x530>  // b.pmore
     f8c:	ldr	w1, [sp, #164]
     f90:	mov	w2, w26
     f94:	ldr	x0, [x27, #200]
     f98:	cbz	w1, fa8 <init_types+0x408>
     f9c:	ldr	w2, [x27, #544]
     fa0:	add	w2, w2, #0x1
     fa4:	orr	w2, w2, w26
     fa8:	ldr	w3, [x19]
     fac:	mov	x1, x27
     fb0:	bl	0 <ctf_hash_insert_type>
     fb4:	cbnz	w0, d10 <init_types+0x170>
     fb8:	ldr	x2, [x27, #408]
     fbc:	add	x6, x28, x19
     fc0:	ldr	x0, [sp, #232]
     fc4:	sub	x19, x19, x2
     fc8:	str	w19, [x25], #4
     fcc:	add	w26, w26, #0x1
     fd0:	add	x19, x6, x0
     fd4:	cmp	x19, x20
     fd8:	b.cc	e68 <init_types+0x2c8>  // b.lo, b.ul, b.last
     fdc:	ldr	x21, [x27, #480]
     fe0:	mov	x1, x21
     fe4:	adrp	x0, 0 <get_kind_v1>
     fe8:	add	x0, x0, #0x0
     fec:	bl	0 <ctf_dprintf>
     ff0:	mov	w19, #0x1                   	// #1
     ff4:	ldr	x0, [x27, #184]
     ff8:	bl	0 <ctf_hash_size>
     ffc:	mov	w1, w0
    1000:	adrp	x0, 0 <get_kind_v1>
    1004:	add	x0, x0, #0x0
    1008:	bl	0 <ctf_dprintf>
    100c:	ldr	x0, [x27, #152]
    1010:	bl	0 <ctf_hash_size>
    1014:	mov	w1, w0
    1018:	ldr	w2, [sp, #184]
    101c:	adrp	x0, 0 <get_kind_v1>
    1020:	add	x0, x0, #0x0
    1024:	bl	0 <ctf_dprintf>
    1028:	ldr	x0, [x27, #168]
    102c:	bl	0 <ctf_hash_size>
    1030:	mov	w1, w0
    1034:	ldr	w2, [sp, #176]
    1038:	adrp	x0, 0 <get_kind_v1>
    103c:	add	x0, x0, #0x0
    1040:	bl	0 <ctf_dprintf>
    1044:	ldr	x0, [x27, #200]
    1048:	bl	0 <ctf_hash_size>
    104c:	mov	w1, w0
    1050:	adrp	x0, 0 <get_kind_v1>
    1054:	add	x0, x0, #0x0
    1058:	bl	0 <ctf_dprintf>
    105c:	ldr	x2, [x27, #480]
    1060:	mov	x1, #0x1                   	// #1
    1064:	cbz	x2, 10c8 <init_types+0x528>
    1068:	ldr	x0, [x27, #448]
    106c:	lsl	x3, x1, #2
    1070:	ldr	w20, [x0, x1, lsl #2]
    1074:	cbz	w20, 10b8 <init_types+0x518>
    1078:	ldr	w0, [x27, #552]
    107c:	tbz	w0, #1, 12b4 <init_types+0x714>
    1080:	tbz	w0, #0, 1090 <init_types+0x4f0>
    1084:	ldr	w1, [x27, #544]
    1088:	add	w1, w1, #0x1
    108c:	orr	w1, w1, w19
    1090:	mov	x0, x27
    1094:	bl	0 <ctf_dtd_lookup>
    1098:	add	x21, x0, #0x18
    109c:	ldr	x1, [x27]
    10a0:	ldr	w0, [x21, #4]
    10a4:	ldr	x1, [x1]
    10a8:	blr	x1
    10ac:	cmp	w0, #0xa
    10b0:	b.eq	1268 <init_types+0x6c8>  // b.none
    10b4:	ldr	x2, [x27, #480]
    10b8:	add	w1, w19, #0x1
    10bc:	mov	x19, x1
    10c0:	cmp	x2, w1, uxtw
    10c4:	b.cs	1068 <init_types+0x4c8>  // b.hs, b.nlast
    10c8:	mov	w0, #0x0                   	// #0
    10cc:	b	d10 <init_types+0x170>
    10d0:	cmp	w1, #0xe
    10d4:	b.eq	fb8 <init_types+0x418>  // b.none
    10d8:	b	d00 <init_types+0x160>
    10dc:	cmp	w1, #0x8
    10e0:	b.eq	11ec <init_types+0x64c>  // b.none
    10e4:	cmp	w1, #0x9
    10e8:	b.ne	21c0 <init_types+0x1620>  // b.any
    10ec:	ldr	w1, [x19, #8]
    10f0:	mov	x0, x27
    10f4:	bl	0 <ctf_name_table>
    10f8:	mov	x24, x0
    10fc:	ldr	x0, [x0]
    1100:	mov	x2, x23
    1104:	mov	x1, x27
    1108:	bl	0 <ctf_hash_lookup_type>
    110c:	cbnz	x0, fb8 <init_types+0x418>
    1110:	ldr	w1, [sp, #164]
    1114:	mov	w2, w26
    1118:	ldr	x0, [x24]
    111c:	cbz	w1, fa8 <init_types+0x408>
    1120:	b	f9c <init_types+0x3fc>
    1124:	cmp	w1, #0x3
    1128:	b.ne	1198 <init_types+0x5f8>  // b.any
    112c:	ldr	w0, [x19, #8]
    1130:	ldr	w1, [x27, #544]
    1134:	ldr	w3, [sp, #192]
    1138:	cmp	w0, w1
    113c:	cset	w2, hi  // hi = pmore
    1140:	cmp	w2, w3
    1144:	b.ne	f8c <init_types+0x3ec>  // b.any
    1148:	ldr	x2, [x27, #480]
    114c:	and	w0, w0, w1
    1150:	cmp	x0, x2
    1154:	b.hi	f8c <init_types+0x3ec>  // b.pmore
    1158:	ldr	x1, [x27, #448]
    115c:	str	w26, [x1, x0, lsl #2]
    1160:	b	f8c <init_types+0x3ec>
    1164:	mov	w0, #0xc                   	// #12
    1168:	ldp	x29, x30, [sp]
    116c:	ldp	x19, x20, [sp, #16]
    1170:	ldp	x21, x22, [sp, #32]
    1174:	ldp	x23, x24, [sp, #48]
    1178:	ldp	x25, x26, [sp, #64]
    117c:	ldp	x27, x28, [sp, #80]
    1180:	add	sp, sp, #0x2f0
    1184:	ret
    1188:	ldr	w2, [x27, #544]
    118c:	add	w2, w2, #0x1
    1190:	orr	w2, w2, w26
    1194:	b	f2c <init_types+0x38c>
    1198:	mov	w1, #0x4                   	// #4
    119c:	b	d00 <init_types+0x160>
    11a0:	ldr	x0, [x27, #200]
    11a4:	mov	x2, x23
    11a8:	mov	x1, x27
    11ac:	bl	0 <ctf_hash_lookup_type>
    11b0:	cbz	x0, 11bc <init_types+0x61c>
    11b4:	ldr	x0, [sp, #168]
    11b8:	tbz	w0, #0, fb8 <init_types+0x418>
    11bc:	ldr	w1, [sp, #164]
    11c0:	mov	w2, w26
    11c4:	ldr	x0, [x27, #200]
    11c8:	cbz	w1, 11d8 <init_types+0x638>
    11cc:	ldr	w2, [x27, #544]
    11d0:	add	w2, w2, #0x1
    11d4:	orr	w2, w2, w26
    11d8:	ldr	w3, [x19]
    11dc:	mov	x1, x27
    11e0:	bl	0 <ctf_hash_define_type>
    11e4:	cbz	w0, fb8 <init_types+0x418>
    11e8:	b	d10 <init_types+0x170>
    11ec:	ldr	w1, [sp, #164]
    11f0:	mov	w2, w26
    11f4:	ldr	x0, [x27, #184]
    11f8:	cbz	w1, 11d8 <init_types+0x638>
    11fc:	b	11cc <init_types+0x62c>
    1200:	ldr	w1, [sp, #164]
    1204:	mov	w2, w26
    1208:	ldr	x0, [x27, #168]
    120c:	cbz	w1, 121c <init_types+0x67c>
    1210:	ldr	w2, [x27, #544]
    1214:	add	w2, w2, #0x1
    1218:	orr	w2, w2, w26
    121c:	ldr	w3, [x19]
    1220:	mov	x1, x27
    1224:	bl	0 <ctf_hash_define_type>
    1228:	cbnz	w0, d10 <init_types+0x170>
    122c:	ldr	x0, [sp, #224]
    1230:	mov	x1, #0x1fffffff            	// #536870911
    1234:	cmp	x0, x1
    1238:	ldr	w0, [sp, #176]
    123c:	cinc	w0, w0, gt
    1240:	str	w0, [sp, #176]
    1244:	b	fb8 <init_types+0x418>
    1248:	ldrb	w0, [x25, #2]
    124c:	cmp	w0, #0x1
    1250:	b.eq	12c8 <init_types+0x728>  // b.none
    1254:	cmp	w0, #0x2
    1258:	b.ne	c0c <init_types+0x6c>  // b.any
    125c:	mov	w0, #0x7fff                	// #32767
    1260:	str	w0, [x27, #544]
    1264:	b	c0c <init_types+0x6c>
    1268:	ldr	w1, [x21]
    126c:	mov	x0, x27
    1270:	bl	0 <ctf_strptr>
    1274:	ldrb	w0, [x0]
    1278:	cbnz	w0, 10b4 <init_types+0x514>
    127c:	ldr	w0, [x21, #8]
    1280:	ldr	w1, [x27, #544]
    1284:	ldr	w4, [sp, #192]
    1288:	cmp	w0, w1
    128c:	cset	w3, hi  // hi = pmore
    1290:	cmp	w3, w4
    1294:	ldr	x2, [x27, #480]
    1298:	b.ne	10b8 <init_types+0x518>  // b.any
    129c:	and	w0, w0, w1
    12a0:	cmp	x0, x2
    12a4:	b.hi	10b8 <init_types+0x518>  // b.pmore
    12a8:	ldr	x1, [x27, #448]
    12ac:	str	w20, [x1, x0, lsl #2]
    12b0:	b	10b8 <init_types+0x518>
    12b4:	ldr	x0, [x27, #440]
    12b8:	ldr	x21, [x27, #408]
    12bc:	ldr	w0, [x0, x3]
    12c0:	add	x21, x21, x0
    12c4:	b	109c <init_types+0x4fc>
    12c8:	ldr	x0, [x27, #400]
    12cc:	str	x0, [sp, #168]
    12d0:	cmp	x19, x20
    12d4:	b.cs	2170 <init_types+0x15d0>  // b.hs, b.nlast
    12d8:	adrp	x0, 0 <get_kind_v1>
    12dc:	mov	x5, x19
    12e0:	add	x0, x0, #0x0
    12e4:	mov	x23, #0x0                   	// #0
    12e8:	mov	w6, #0xffff                	// #65535
    12ec:	b	1328 <init_types+0x788>
    12f0:	and	x8, x1, #0xffff
    12f4:	cmp	w21, #0x5
    12f8:	b.eq	1508 <init_types+0x968>  // b.none
    12fc:	b.hi	1388 <init_types+0x7e8>  // b.pmore
    1300:	cmp	w21, #0x4
    1304:	b.ne	14f8 <init_types+0x958>  // b.any
    1308:	mov	x1, #0x4                   	// #4
    130c:	mov	x22, x1
    1310:	mov	x24, #0x10                  	// #16
    1314:	add	x22, x23, x22
    1318:	add	x5, x5, x24
    131c:	add	x23, x22, x1
    1320:	cmp	x5, x20
    1324:	b.cs	157c <init_types+0x9dc>  // b.hs, b.nlast
    1328:	ldrh	w21, [x5, #4]
    132c:	ldrh	w1, [x5, #6]
    1330:	and	w9, w21, #0x3ff
    1334:	and	x26, x21, #0x3ff
    1338:	cmp	w1, w6
    133c:	lsr	w21, w21, #11
    1340:	b.ne	12f0 <init_types+0x750>  // b.any
    1344:	ldp	w8, w1, [x5, #8]
    1348:	cmp	w21, #0x5
    134c:	orr	x8, x1, x8, lsl #32
    1350:	b.eq	1554 <init_types+0x9b4>  // b.none
    1354:	b.hi	13d4 <init_types+0x834>  // b.pmore
    1358:	cmp	w21, #0x4
    135c:	b.ne	14c4 <init_types+0x924>  // b.any
    1360:	mov	x7, #0x10                  	// #16
    1364:	mov	x2, #0x8                   	// #8
    1368:	mov	x1, #0xc                   	// #12
    136c:	nop
    1370:	tbnz	x8, #63, 1568 <init_types+0x9c8>
    1374:	sub	x1, x1, x2
    1378:	add	x24, x7, x2
    137c:	mov	x2, #0xc                   	// #12
    1380:	sub	x22, x2, x7
    1384:	b	1314 <init_types+0x774>
    1388:	sub	w1, w21, #0x6
    138c:	mov	x24, #0x8                   	// #8
    1390:	and	w1, w1, #0xffff
    1394:	cmp	w1, #0x1
    1398:	b.hi	14ec <init_types+0x94c>  // b.pmore
    139c:	mov	x7, x24
    13a0:	mov	x22, #0x4                   	// #4
    13a4:	ubfiz	x10, x9, #4, #10
    13a8:	mov	x1, #0x1fff                	// #8191
    13ac:	mov	x2, x10
    13b0:	cmp	x8, x1
    13b4:	b.le	1520 <init_types+0x980>
    13b8:	mov	x1, #0x1fffffff            	// #536870911
    13bc:	cmp	x8, x1
    13c0:	b.le	1524 <init_types+0x984>
    13c4:	ubfiz	x1, x9, #4, #10
    13c8:	add	x24, x24, x10
    13cc:	sub	x1, x1, x2
    13d0:	b	1314 <init_types+0x774>
    13d4:	sub	w1, w21, #0x6
    13d8:	mov	x24, #0x10                  	// #16
    13dc:	and	w1, w1, #0xffff
    13e0:	mov	x7, x24
    13e4:	cmp	w1, #0x1
    13e8:	mov	x22, #0xfffffffffffffffc    	// #-4
    13ec:	b.ls	13a4 <init_types+0x804>  // b.plast
    13f0:	cmp	w21, #0x8
    13f4:	b.eq	214c <init_types+0x15ac>  // b.none
    13f8:	b.ls	14d0 <init_types+0x930>  // b.plast
    13fc:	cmp	w21, #0xd
    1400:	b.ls	155c <init_types+0x9bc>  // b.plast
    1404:	cmp	w21, #0xe
    1408:	mov	x2, #0x8                   	// #8
    140c:	b.ne	1424 <init_types+0x884>  // b.any
    1410:	mov	x1, #0x8                   	// #8
    1414:	b	1370 <init_types+0x7d0>
    1418:	cmp	w21, #0x3
    141c:	mov	x2, #0x0                   	// #0
    1420:	b.eq	1488 <init_types+0x8e8>  // b.none
    1424:	mov	w1, w21
    1428:	str	x8, [sp, #176]
    142c:	str	w9, [sp, #184]
    1430:	stp	x5, x7, [sp, #192]
    1434:	bl	0 <ctf_dprintf>
    1438:	ldr	w9, [sp, #184]
    143c:	ldp	x5, x7, [sp, #192]
    1440:	mov	x10, #0x3ef                 	// #1007
    1444:	ldr	x8, [sp, #176]
    1448:	adrp	x0, 0 <get_kind_v1>
    144c:	mov	x2, x10
    1450:	add	x0, x0, #0x0
    1454:	mov	w6, #0xffff                	// #65535
    1458:	cmp	w21, #0x7
    145c:	b.hi	1530 <init_types+0x990>  // b.pmore
    1460:	cmp	w21, #0x5
    1464:	b.hi	13b8 <init_types+0x818>  // b.pmore
    1468:	cmp	w21, #0x4
    146c:	b.eq	2298 <init_types+0x16f8>  // b.none
    1470:	cmp	w21, #0x5
    1474:	b.eq	2288 <init_types+0x16e8>  // b.none
    1478:	cmp	w21, #0x2
    147c:	b.hi	1490 <init_types+0x8f0>  // b.pmore
    1480:	mov	x1, #0x4                   	// #4
    1484:	cbnz	w21, 1370 <init_types+0x7d0>
    1488:	mov	x1, #0x0                   	// #0
    148c:	b	1370 <init_types+0x7d0>
    1490:	cmp	w21, #0x3
    1494:	b.eq	1488 <init_types+0x8e8>  // b.none
    1498:	mov	w1, w21
    149c:	stp	x8, x5, [sp, #176]
    14a0:	stp	x7, x2, [sp, #192]
    14a4:	bl	0 <ctf_dprintf>
    14a8:	adrp	x0, 0 <get_kind_v1>
    14ac:	mov	x1, #0x3ef                 	// #1007
    14b0:	add	x0, x0, #0x0
    14b4:	mov	w6, #0xffff                	// #65535
    14b8:	ldp	x8, x5, [sp, #176]
    14bc:	ldp	x7, x2, [sp, #192]
    14c0:	b	1370 <init_types+0x7d0>
    14c4:	mov	x24, #0x10                  	// #16
    14c8:	mov	x7, x24
    14cc:	mov	x22, #0xfffffffffffffffc    	// #-4
    14d0:	cmp	w21, #0x2
    14d4:	b.hi	1418 <init_types+0x878>  // b.pmore
    14d8:	mov	x2, #0x4                   	// #4
    14dc:	cbnz	w21, 1478 <init_types+0x8d8>
    14e0:	mov	x2, #0x0                   	// #0
    14e4:	mov	x1, #0x0                   	// #0
    14e8:	b	1370 <init_types+0x7d0>
    14ec:	mov	x7, x24
    14f0:	mov	x22, #0x4                   	// #4
    14f4:	b	13f0 <init_types+0x850>
    14f8:	mov	x24, #0x8                   	// #8
    14fc:	mov	x22, #0x4                   	// #4
    1500:	mov	x7, x24
    1504:	b	14d0 <init_types+0x930>
    1508:	mov	x7, #0x8                   	// #8
    150c:	add	x1, x26, #0x1
    1510:	and	x1, x1, #0xfffffffffffffffe
    1514:	lsl	x2, x1, #1
    1518:	lsl	x1, x1, #2
    151c:	b	1370 <init_types+0x7d0>
    1520:	ubfiz	x2, x9, #3, #10
    1524:	mov	w1, #0xc                   	// #12
    1528:	umull	x1, w9, w1
    152c:	b	1370 <init_types+0x7d0>
    1530:	cmp	w21, #0x8
    1534:	b.ls	1478 <init_types+0x8d8>  // b.plast
    1538:	cmp	w21, #0xd
    153c:	mov	x1, #0x0                   	// #0
    1540:	b.ls	1370 <init_types+0x7d0>  // b.plast
    1544:	cmp	w21, #0xe
    1548:	b.ne	1498 <init_types+0x8f8>  // b.any
    154c:	mov	x1, #0x8                   	// #8
    1550:	b	1370 <init_types+0x7d0>
    1554:	mov	x7, #0x10                  	// #16
    1558:	b	150c <init_types+0x96c>
    155c:	mov	x10, #0x0                   	// #0
    1560:	mov	x2, #0x0                   	// #0
    1564:	b	1458 <init_types+0x8b8>
    1568:	ldp	w19, w0, [x25, #40]
    156c:	ldr	x20, [x27, #408]
    1570:	add	x19, x20, x19
    1574:	add	x20, x20, x0
    1578:	b	125c <init_types+0x6bc>
    157c:	ldr	w22, [x25, #40]
    1580:	mov	x7, x23
    1584:	ldr	x21, [x27, #408]
    1588:	mov	w26, w22
    158c:	ldr	x24, [x27, #416]
    1590:	str	x7, [sp, #176]
    1594:	add	x24, x7, x24
    1598:	mov	x0, x24
    159c:	bl	0 <malloc>
    15a0:	ldr	x7, [sp, #176]
    15a4:	cbz	x0, 2230 <init_types+0x1690>
    15a8:	mov	x2, x26
    15ac:	mov	x1, x21
    15b0:	str	x7, [sp, #176]
    15b4:	str	x0, [sp, #192]
    15b8:	bl	0 <memcpy>
    15bc:	ldp	w3, w2, [x25, #44]
    15c0:	str	w3, [sp, #184]
    15c4:	ldr	x7, [sp, #176]
    15c8:	mov	w1, w3
    15cc:	ldr	x4, [sp, #192]
    15d0:	add	x0, x1, x7
    15d4:	add	x1, x21, x1
    15d8:	str	x4, [sp, #176]
    15dc:	add	x0, x4, x0
    15e0:	bl	0 <memcpy>
    15e4:	ldr	w3, [sp, #184]
    15e8:	mov	w1, #0x0                   	// #0
    15ec:	ldr	x4, [sp, #176]
    15f0:	sub	w2, w3, w22
    15f4:	add	x2, x2, x23
    15f8:	str	w3, [sp, #184]
    15fc:	add	x0, x4, x26
    1600:	bl	0 <memset>
    1604:	ldr	w3, [sp, #184]
    1608:	ldr	x4, [sp, #176]
    160c:	add	w3, w3, w23
    1610:	str	w3, [x25, #44]
    1614:	cmp	w3, w22
    1618:	str	x24, [x27, #416]
    161c:	b.cc	21fc <init_types+0x165c>  // b.lo, b.ul, b.last
    1620:	dup	v0.2d, x4
    1624:	add	x3, x27, #0x200
    1628:	str	x4, [x27, #408]
    162c:	mov	x0, x27
    1630:	mov	x2, x4
    1634:	mov	x1, x25
    1638:	stur	q0, [x3, #-120]
    163c:	bl	b0 <ctf_set_base>
    1640:	ldr	w3, [x25, #40]
    1644:	ldr	x0, [x27, #408]
    1648:	cmp	x19, x20
    164c:	add	x23, x0, x3
    1650:	b.cs	217c <init_types+0x15dc>  // b.hs, b.nlast
    1654:	adrp	x22, 0 <get_kind_v1>
    1658:	add	x22, x22, #0x0
    165c:	mov	w21, #0xffff                	// #65535
    1660:	stp	d8, d9, [sp, #96]
    1664:	stp	d10, d11, [sp, #112]
    1668:	stp	d12, d13, [sp, #128]
    166c:	stp	d14, d15, [sp, #144]
    1670:	ldrh	w1, [x19, #4]
    1674:	ldrh	w0, [x19, #6]
    1678:	mov	x5, #0x8                   	// #8
    167c:	and	w10, w1, #0x3ff
    1680:	and	x8, x1, #0x3ff
    1684:	lsr	w24, w1, #11
    1688:	ubfx	x26, x1, #10, #1
    168c:	cmp	w0, w21
    1690:	and	x9, x0, #0xffff
    1694:	ldp	w2, w1, [x19, #8]
    1698:	b.ne	16a8 <init_types+0xb08>  // b.any
    169c:	mov	w1, w1
    16a0:	mov	x5, #0x10                  	// #16
    16a4:	orr	x9, x1, x2, lsl #32
    16a8:	cmp	w24, #0x5
    16ac:	lsl	w2, w24, #26
    16b0:	b.eq	1afc <init_types+0xf5c>  // b.none
    16b4:	b.hi	17d4 <init_types+0xc34>  // b.pmore
    16b8:	cmp	w24, #0x4
    16bc:	mov	x7, #0x8                   	// #8
    16c0:	b.ne	1b24 <init_types+0xf84>  // b.any
    16c4:	ldr	w1, [x19]
    16c8:	orr	w2, w2, w26, lsl #25
    16cc:	orr	w0, w2, w10
    16d0:	stp	w1, w0, [x23]
    16d4:	cmp	w24, #0xd
    16d8:	b.hi	19f0 <init_types+0xe50>  // b.pmore
    16dc:	mov	x0, #0x1                   	// #1
    16e0:	mov	x2, #0x3e28                	// #15912
    16e4:	lsl	x0, x0, x24
    16e8:	tst	x0, x2
    16ec:	b.eq	17b0 <init_types+0xc10>  // b.none
    16f0:	ldrh	w0, [x19, #6]
    16f4:	str	w0, [x23, #8]
    16f8:	mov	w26, w0
    16fc:	cmp	w24, #0x5
    1700:	mov	x3, #0xc                   	// #12
    1704:	b.eq	1a14 <init_types+0xe74>  // b.none
    1708:	b.hi	17fc <init_types+0xc5c>  // b.pmore
    170c:	cmp	w24, #0x4
    1710:	b.ne	1b3c <init_types+0xf9c>  // b.any
    1714:	cmp	x9, x26
    1718:	b.ne	2240 <init_types+0x16a0>  // b.any
    171c:	add	x19, x19, x5
    1720:	add	x3, x23, x3
    1724:	mov	x1, #0xc                   	// #12
    1728:	ldrh	w5, [x19]
    172c:	mov	x24, x7
    1730:	ldrh	w2, [x19, #2]
    1734:	ldr	w0, [x19, #4]
    1738:	stp	w5, w2, [x3]
    173c:	str	w0, [x3, #8]
    1740:	add	x19, x19, x24
    1744:	add	x3, x3, x1
    1748:	cmp	x19, x20
    174c:	mov	x23, x3
    1750:	b.cc	1670 <init_types+0xad0>  // b.lo, b.ul, b.last
    1754:	ldp	d8, d9, [sp, #96]
    1758:	ldp	d10, d11, [sp, #112]
    175c:	ldp	d12, d13, [sp, #128]
    1760:	ldp	d14, d15, [sp, #144]
    1764:	ldr	x0, [x27, #408]
    1768:	sub	x3, x3, x0
    176c:	ldr	w1, [x25, #44]
    1770:	cmp	x3, x1
    1774:	b.ne	21c8 <init_types+0x1628>  // b.any
    1778:	mov	w1, #0x2                   	// #2
    177c:	adrp	x0, 0 <get_kind_v1>
    1780:	add	x0, x0, #0x0
    1784:	str	w1, [x27, #560]
    1788:	add	x0, x0, #0x88
    178c:	strb	w1, [x25, #2]
    1790:	str	x0, [x27]
    1794:	ldr	x0, [sp, #168]
    1798:	bl	0 <free>
    179c:	ldp	w19, w0, [x25, #40]
    17a0:	ldr	x20, [x27, #408]
    17a4:	add	x19, x20, x19
    17a8:	add	x20, x20, x0
    17ac:	b	125c <init_types+0x6bc>
    17b0:	mov	x2, #0x1d7                 	// #471
    17b4:	tst	x0, x2
    17b8:	b.eq	19f0 <init_types+0xe50>  // b.none
    17bc:	mov	x1, #0xfffffffe            	// #4294967294
    17c0:	mov	w0, w9
    17c4:	cmp	x9, x1
    17c8:	b.hi	1c40 <init_types+0x10a0>  // b.pmore
    17cc:	str	w9, [x23, #8]
    17d0:	b	16f8 <init_types+0xb58>
    17d4:	sub	w0, w24, #0x6
    17d8:	and	w0, w0, #0xffff
    17dc:	cmp	w0, #0x1
    17e0:	b.hi	1c8c <init_types+0x10ec>  // b.pmore
    17e4:	ubfiz	x7, x10, #3, #10
    17e8:	ubfiz	x1, x10, #4, #10
    17ec:	mov	x0, #0x1fff                	// #8191
    17f0:	cmp	x9, x0
    17f4:	csel	x7, x1, x7, gt
    17f8:	b	16c4 <init_types+0xb24>
    17fc:	sub	w0, w24, #0x6
    1800:	and	w0, w0, #0xffff
    1804:	cmp	w0, #0x1
    1808:	b.hi	1c5c <init_types+0x10bc>  // b.pmore
    180c:	mov	w0, #0xc                   	// #12
    1810:	ubfiz	x1, x10, #4, #10
    1814:	mov	x2, #0x1fffffff            	// #536870911
    1818:	cmp	x26, x2
    181c:	umull	x0, w10, w0
    1820:	csel	x1, x1, x0, gt
    1824:	cmp	x9, x26
    1828:	b.ne	2240 <init_types+0x16a0>  // b.any
    182c:	add	x19, x19, x5
    1830:	add	x3, x23, x3
    1834:	mov	x0, x19
    1838:	mov	x5, x3
    183c:	nop
    1840:	mov	x24, x7
    1844:	cbz	w10, 1740 <init_types+0xba0>
    1848:	mov	x2, #0x1fff                	// #8191
    184c:	cmp	x9, x2
    1850:	b.gt	1cb0 <init_types+0x1110>
    1854:	sub	x6, x8, #0x1
    1858:	mov	w2, #0xc                   	// #12
    185c:	add	x7, x19, x6, lsl #3
    1860:	umaddl	x10, w10, w2, x3
    1864:	add	x2, x7, #0x4
    1868:	cmp	x2, x3
    186c:	ccmp	x10, x19, #0x0, hi  // hi = pmore
    1870:	ccmp	x6, #0x7, #0x0, ls  // ls = plast
    1874:	b.ls	19d0 <init_types+0xe30>  // b.plast
    1878:	sub	x8, x8, #0x9
    187c:	add	x0, x19, #0x4
    1880:	mov	x7, x3
    1884:	mov	x5, #0x0                   	// #0
    1888:	lsr	x8, x8, #3
    188c:	add	x8, x8, #0x1
    1890:	sub	x10, x0, #0x4
    1894:	add	x9, x0, #0x1c
    1898:	ld4	{v16.8h-v19.8h}, [x0]
    189c:	mov	x2, x7
    18a0:	ld2	{v0.4s, v1.4s}, [x10]
    18a4:	add	x5, x5, #0x1
    18a8:	ld2	{v20.4s, v21.4s}, [x9]
    18ac:	cmp	x8, x5
    18b0:	mov	v4.16b, v0.16b
    18b4:	add	x0, x0, #0x40
    18b8:	uxtl	v5.4s, v17.4h
    18bc:	add	x7, x7, #0x60
    18c0:	mov	v1.16b, v20.16b
    18c4:	uxtl2	v2.4s, v17.8h
    18c8:	uxtl	v6.4s, v16.4h
    18cc:	uxtl2	v3.4s, v16.8h
    18d0:	st3	{v4.4s-v6.4s}, [x2], #48
    18d4:	st3	{v1.4s-v3.4s}, [x2]
    18d8:	b.hi	1890 <init_types+0xcf0>  // b.pmore
    18dc:	lsl	x2, x8, #3
    18e0:	lsl	x5, x8, #6
    18e4:	add	x8, x2, x8, lsl #4
    18e8:	add	x0, x19, x5
    18ec:	subs	x6, x6, x2
    18f0:	add	x2, x3, x8, lsl #2
    18f4:	ldr	w9, [x19, x5]
    18f8:	ldrh	w7, [x0, #6]
    18fc:	ldrh	w5, [x0, #4]
    1900:	str	w9, [x3, x8, lsl #2]
    1904:	stp	w7, w5, [x2, #4]
    1908:	b.eq	1740 <init_types+0xba0>  // b.none
    190c:	ldrh	w7, [x0, #12]
    1910:	cmp	x6, #0x1
    1914:	ldrh	w8, [x0, #14]
    1918:	ldr	w9, [x0, #8]
    191c:	stp	w9, w8, [x2, #12]
    1920:	str	w7, [x2, #20]
    1924:	b.eq	1740 <init_types+0xba0>  // b.none
    1928:	ldrh	w7, [x0, #20]
    192c:	cmp	x6, #0x2
    1930:	ldrh	w8, [x0, #22]
    1934:	ldr	w9, [x0, #16]
    1938:	stp	w9, w8, [x2, #24]
    193c:	str	w7, [x2, #32]
    1940:	b.eq	1740 <init_types+0xba0>  // b.none
    1944:	ldrh	w7, [x0, #28]
    1948:	cmp	x6, #0x3
    194c:	ldrh	w8, [x0, #30]
    1950:	ldr	w9, [x0, #24]
    1954:	stp	w9, w8, [x2, #36]
    1958:	str	w7, [x2, #44]
    195c:	b.eq	1740 <init_types+0xba0>  // b.none
    1960:	ldrh	w7, [x0, #36]
    1964:	cmp	x6, #0x4
    1968:	ldrh	w8, [x0, #38]
    196c:	ldr	w9, [x0, #32]
    1970:	stp	w9, w8, [x2, #48]
    1974:	str	w7, [x2, #56]
    1978:	b.eq	1740 <init_types+0xba0>  // b.none
    197c:	ldrh	w7, [x0, #44]
    1980:	cmp	x6, #0x5
    1984:	ldrh	w8, [x0, #46]
    1988:	ldr	w9, [x0, #40]
    198c:	stp	w9, w8, [x2, #60]
    1990:	str	w7, [x2, #68]
    1994:	b.eq	1740 <init_types+0xba0>  // b.none
    1998:	ldrh	w7, [x0, #52]
    199c:	cmp	x6, #0x6
    19a0:	ldr	w8, [x0, #48]
    19a4:	ldrh	w6, [x0, #54]
    19a8:	stp	w8, w6, [x2, #72]
    19ac:	str	w7, [x2, #80]
    19b0:	b.eq	1740 <init_types+0xba0>  // b.none
    19b4:	ldrh	w6, [x0, #60]
    19b8:	ldr	w7, [x0, #56]
    19bc:	ldrh	w0, [x0, #62]
    19c0:	stp	w7, w0, [x2, #84]
    19c4:	str	w6, [x2, #92]
    19c8:	b	1740 <init_types+0xba0>
    19cc:	sub	x6, x6, #0x1
    19d0:	ldrh	w2, [x0, #4]
    19d4:	ldrh	w7, [x0, #6]
    19d8:	ldr	w8, [x0], #8
    19dc:	stp	w8, w7, [x5]
    19e0:	add	x5, x5, #0xc
    19e4:	stur	w2, [x5, #-4]
    19e8:	cbnz	x6, 19cc <init_types+0xe2c>
    19ec:	b	1740 <init_types+0xba0>
    19f0:	ldp	w26, w1, [x23, #12]
    19f4:	ldr	w0, [x23, #8]
    19f8:	cmn	w0, #0x1
    19fc:	b.ne	16f8 <init_types+0xb58>  // b.any
    1a00:	mov	w0, w1
    1a04:	cmp	w24, #0x5
    1a08:	orr	x26, x0, x26, lsl #32
    1a0c:	mov	x3, #0x14                  	// #20
    1a10:	b.ne	1708 <init_types+0xb68>  // b.any
    1a14:	add	x2, x8, #0x1
    1a18:	cmp	x9, x26
    1a1c:	and	x2, x2, #0xfffffffffffffffe
    1a20:	lsl	x2, x2, #2
    1a24:	b.ne	2240 <init_types+0x16a0>  // b.any
    1a28:	add	x19, x19, x5
    1a2c:	add	x3, x23, x3
    1a30:	cbz	w10, 1b80 <init_types+0xfe0>
    1a34:	sub	x0, x8, #0x1
    1a38:	cmp	x0, #0x6
    1a3c:	b.ls	2158 <init_types+0x15b8>  // b.plast
    1a40:	sub	x9, x8, #0x8
    1a44:	mov	x6, x3
    1a48:	mov	x0, #0x0                   	// #0
    1a4c:	lsr	x9, x9, #3
    1a50:	add	x9, x9, #0x1
    1a54:	nop
    1a58:	lsl	x1, x0, #4
    1a5c:	add	x0, x0, #0x1
    1a60:	cmp	x0, x9
    1a64:	ldr	q0, [x19, x1]
    1a68:	uxtl	v1.4s, v0.4h
    1a6c:	uxtl2	v0.4s, v0.8h
    1a70:	stp	q1, q0, [x6]
    1a74:	add	x6, x6, #0x20
    1a78:	b.cc	1a58 <init_types+0xeb8>  // b.lo, b.ul, b.last
    1a7c:	lsl	x0, x9, #3
    1a80:	add	x1, x19, x9, lsl #4
    1a84:	subs	x8, x8, x0
    1a88:	add	x9, x3, x9, lsl #5
    1a8c:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1a90:	ldrh	w0, [x1]
    1a94:	cmp	x8, #0x1
    1a98:	str	w0, [x9]
    1a9c:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1aa0:	ldrh	w0, [x1, #2]
    1aa4:	cmp	x8, #0x2
    1aa8:	str	w0, [x9, #4]
    1aac:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1ab0:	ldrh	w0, [x1, #4]
    1ab4:	cmp	x8, #0x3
    1ab8:	str	w0, [x9, #8]
    1abc:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1ac0:	ldrh	w0, [x1, #6]
    1ac4:	cmp	x8, #0x4
    1ac8:	str	w0, [x9, #12]
    1acc:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1ad0:	ldrh	w0, [x1, #8]
    1ad4:	cmp	x8, #0x5
    1ad8:	str	w0, [x9, #16]
    1adc:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1ae0:	ldrh	w0, [x1, #10]
    1ae4:	cmp	x8, #0x6
    1ae8:	str	w0, [x9, #20]
    1aec:	b.eq	1b80 <init_types+0xfe0>  // b.none
    1af0:	ldrh	w0, [x1, #12]
    1af4:	str	w0, [x9, #24]
    1af8:	b	1b80 <init_types+0xfe0>
    1afc:	ldr	w1, [x19]
    1b00:	add	x7, x8, #0x1
    1b04:	and	x7, x7, #0xfffffffffffffffe
    1b08:	str	w1, [x23]
    1b0c:	lsl	x7, x7, #1
    1b10:	cbz	w26, 1c50 <init_types+0x10b0>
    1b14:	orr	w1, w2, #0x2000000
    1b18:	orr	w1, w1, w10
    1b1c:	str	w1, [x23, #4]
    1b20:	b	16f4 <init_types+0xb54>
    1b24:	cmp	w24, #0x2
    1b28:	b.hi	1bec <init_types+0x104c>  // b.pmore
    1b2c:	cmp	w24, #0x0
    1b30:	cset	x7, ne  // ne = any
    1b34:	lsl	x7, x7, #2
    1b38:	b	16c4 <init_types+0xb24>
    1b3c:	cmp	w24, #0x2
    1b40:	b.hi	1ba4 <init_types+0x1004>  // b.pmore
    1b44:	cbz	w24, 1c34 <init_types+0x1094>
    1b48:	mov	x1, #0x4                   	// #4
    1b4c:	mov	x2, x1
    1b50:	cmp	x9, x26
    1b54:	b.ne	2240 <init_types+0x16a0>  // b.any
    1b58:	add	x19, x19, x5
    1b5c:	add	x3, x23, x3
    1b60:	cmp	w24, #0x7
    1b64:	mov	x0, x19
    1b68:	mov	x5, x3
    1b6c:	b.hi	1b80 <init_types+0xfe0>  // b.pmore
    1b70:	cmp	w24, #0x5
    1b74:	b.hi	1840 <init_types+0xca0>  // b.pmore
    1b78:	cmp	w24, #0x4
    1b7c:	b.eq	1728 <init_types+0xb88>  // b.none
    1b80:	cmp	x2, x7
    1b84:	b.ne	2264 <init_types+0x16c4>  // b.any
    1b88:	mov	x24, x2
    1b8c:	mov	x1, x19
    1b90:	mov	x0, x3
    1b94:	bl	0 <memcpy>
    1b98:	mov	x1, x24
    1b9c:	mov	x3, x0
    1ba0:	b	1740 <init_types+0xba0>
    1ba4:	cmp	w24, #0x3
    1ba8:	mov	x1, #0x0                   	// #0
    1bac:	mov	x2, #0x0                   	// #0
    1bb0:	b.eq	1b50 <init_types+0xfb0>  // b.none
    1bb4:	mov	w1, w24
    1bb8:	mov	x0, x22
    1bbc:	str	w10, [sp, #176]
    1bc0:	stp	x9, x8, [sp, #184]
    1bc4:	stp	x7, x5, [sp, #200]
    1bc8:	str	x3, [sp, #216]
    1bcc:	bl	0 <ctf_dprintf>
    1bd0:	mov	x1, #0x3ef                 	// #1007
    1bd4:	ldr	w10, [sp, #176]
    1bd8:	mov	x2, x1
    1bdc:	ldp	x9, x8, [sp, #184]
    1be0:	ldp	x7, x5, [sp, #200]
    1be4:	ldr	x3, [sp, #216]
    1be8:	b	1b50 <init_types+0xfb0>
    1bec:	cmp	w24, #0x3
    1bf0:	mov	x7, #0x0                   	// #0
    1bf4:	b.eq	16c4 <init_types+0xb24>  // b.none
    1bf8:	mov	x7, #0x3ef                 	// #1007
    1bfc:	mov	w1, w24
    1c00:	mov	x0, x22
    1c04:	str	x7, [sp, #176]
    1c08:	str	w10, [sp, #184]
    1c0c:	stp	x9, x8, [sp, #192]
    1c10:	str	x5, [sp, #208]
    1c14:	str	w2, [sp, #216]
    1c18:	bl	0 <ctf_dprintf>
    1c1c:	ldr	w10, [sp, #184]
    1c20:	ldr	w2, [sp, #216]
    1c24:	ldr	x7, [sp, #176]
    1c28:	ldp	x9, x8, [sp, #192]
    1c2c:	ldr	x5, [sp, #208]
    1c30:	b	16c4 <init_types+0xb24>
    1c34:	mov	x1, #0x0                   	// #0
    1c38:	mov	x2, #0x0                   	// #0
    1c3c:	b	1b50 <init_types+0xfb0>
    1c40:	lsr	x26, x9, #32
    1c44:	mov	w1, w9
    1c48:	stp	w26, w9, [x23, #12]
    1c4c:	b	19f4 <init_types+0xe54>
    1c50:	orr	w0, w2, w10
    1c54:	str	w0, [x23, #4]
    1c58:	b	16dc <init_types+0xb3c>
    1c5c:	cmp	w24, #0x8
    1c60:	b.eq	2134 <init_types+0x1594>  // b.none
    1c64:	cmp	w24, #0xd
    1c68:	b.ls	1c34 <init_types+0x1094>  // b.plast
    1c6c:	cmp	w24, #0xe
    1c70:	b.ne	1bb4 <init_types+0x1014>  // b.any
    1c74:	cmp	x9, x26
    1c78:	b.ne	2240 <init_types+0x16a0>  // b.any
    1c7c:	add	x19, x19, x5
    1c80:	add	x3, x23, x3
    1c84:	mov	x2, #0x8                   	// #8
    1c88:	b	1b80 <init_types+0xfe0>
    1c8c:	cmp	w24, #0x8
    1c90:	b.eq	2114 <init_types+0x1574>  // b.none
    1c94:	cmp	w24, #0xd
    1c98:	mov	x7, #0x0                   	// #0
    1c9c:	b.ls	16c4 <init_types+0xb24>  // b.plast
    1ca0:	cmp	w24, #0xe
    1ca4:	mov	x7, #0x8                   	// #8
    1ca8:	b.eq	16c4 <init_types+0xb24>  // b.none
    1cac:	b	1bf8 <init_types+0x1058>
    1cb0:	mov	x2, #0x1fffffff            	// #536870911
    1cb4:	cmp	x9, x2
    1cb8:	b.le	1f38 <init_types+0x1398>
    1cbc:	add	x2, x19, #0x7f
    1cc0:	sub	x6, x8, #0x1
    1cc4:	sub	x2, x2, x3
    1cc8:	sub	x10, x3, x19
    1ccc:	cmp	x2, #0xfe
    1cd0:	ccmp	x6, #0x7, #0x0, hi  // hi = pmore
    1cd4:	b.ls	1f10 <init_types+0x1370>  // b.plast
    1cd8:	sub	x9, x8, #0x9
    1cdc:	mov	x11, #0x40                  	// #64
    1ce0:	mov	x0, x19
    1ce4:	sub	x11, x11, x19
    1ce8:	lsr	x9, x9, #3
    1cec:	sub	x10, x3, x19
    1cf0:	add	x9, x9, #0x1
    1cf4:	mov	x8, #0x0                   	// #0
    1cf8:	mov	x7, x0
    1cfc:	add	x5, x10, x0
    1d00:	ldur	q0, [x0, #4]
    1d04:	add	x2, x3, x0
    1d08:	ld4	{v4.4s-v7.4s}, [x7], #64
    1d0c:	add	x2, x11, x2
    1d10:	ldur	q15, [x0, #20]
    1d14:	add	x8, x8, #0x1
    1d18:	ld4	{v20.4s-v23.4s}, [x7]
    1d1c:	cmp	x9, x8
    1d20:	ldur	q17, [x0, #36]
    1d24:	add	x0, x0, #0x80
    1d28:	ldur	q14, [x0, #-76]
    1d2c:	ldur	q3, [x0, #-60]
    1d30:	ldur	q13, [x0, #-44]
    1d34:	ldur	q16, [x0, #-28]
    1d38:	ldur	q12, [x0, #-12]
    1d3c:	uxtl	v19.2d, v6.2s
    1d40:	uxtl2	v18.2d, v6.4s
    1d44:	uxtl	v2.2d, v22.2s
    1d48:	uxtl2	v1.2d, v22.4s
    1d4c:	uzp1	v0.8h, v0.8h, v15.8h
    1d50:	uzp1	v17.8h, v17.8h, v14.8h
    1d54:	uzp1	v3.8h, v3.8h, v13.8h
    1d58:	uzp1	v16.8h, v16.8h, v12.8h
    1d5c:	uxtl	v11.2d, v7.2s
    1d60:	uxtl2	v10.2d, v7.4s
    1d64:	shl	v19.2d, v19.2d, #32
    1d68:	shl	v18.2d, v18.2d, #32
    1d6c:	shl	v2.2d, v2.2d, #32
    1d70:	shl	v1.2d, v1.2d, #32
    1d74:	uxtl	v9.2d, v23.2s
    1d78:	uxtl2	v8.2d, v23.4s
    1d7c:	uzp1	v0.8h, v0.8h, v17.8h
    1d80:	uzp1	v3.8h, v3.8h, v16.8h
    1d84:	orr	v19.16b, v19.16b, v11.16b
    1d88:	orr	v18.16b, v18.16b, v10.16b
    1d8c:	orr	v2.16b, v2.16b, v9.16b
    1d90:	orr	v1.16b, v1.16b, v8.16b
    1d94:	uzp1	v0.8h, v0.8h, v3.8h
    1d98:	ushr	v7.2d, v19.2d, #32
    1d9c:	xtn	v31.2s, v19.2d
    1da0:	xtn2	v31.4s, v18.2d
    1da4:	ushr	v6.2d, v18.2d, #32
    1da8:	mov	v28.16b, v4.16b
    1dac:	xtn	v27.2s, v2.2d
    1db0:	xtn2	v27.4s, v1.2d
    1db4:	ushr	v5.2d, v2.2d, #32
    1db8:	ushr	v4.2d, v1.2d, #32
    1dbc:	uxtl	v30.4s, v0.4h
    1dc0:	xtn	v29.2s, v7.2d
    1dc4:	xtn2	v29.4s, v6.2d
    1dc8:	mov	v24.16b, v20.16b
    1dcc:	uxtl2	v26.4s, v0.8h
    1dd0:	xtn	v25.2s, v5.2d
    1dd4:	xtn2	v25.4s, v4.2d
    1dd8:	st4	{v28.4s-v31.4s}, [x5]
    1ddc:	st4	{v24.4s-v27.4s}, [x2]
    1de0:	b.hi	1cf8 <init_types+0x1158>  // b.pmore
    1de4:	lsl	x2, x9, #7
    1de8:	subs	x6, x6, x9, lsl #3
    1dec:	add	x0, x19, x2
    1df0:	add	x5, x3, x2
    1df4:	ldr	s0, [x19, x2]
    1df8:	ldp	s3, s1, [x0, #8]
    1dfc:	ldr	h2, [x0, #4]
    1e00:	mov	v0.s[1], v3.s[0]
    1e04:	mov	v0.s[2], v2.s[0]
    1e08:	mov	v0.s[3], v1.s[0]
    1e0c:	str	q0, [x3, x2]
    1e10:	b.eq	1740 <init_types+0xba0>  // b.none
    1e14:	ldp	s3, s1, [x0, #24]
    1e18:	cmp	x6, #0x1
    1e1c:	ldr	s0, [x0, #16]
    1e20:	ldr	h2, [x0, #20]
    1e24:	mov	v0.s[1], v3.s[0]
    1e28:	mov	v0.s[2], v2.s[0]
    1e2c:	mov	v0.s[3], v1.s[0]
    1e30:	str	q0, [x5, #16]
    1e34:	b.eq	1740 <init_types+0xba0>  // b.none
    1e38:	ldp	s3, s1, [x0, #40]
    1e3c:	cmp	x6, #0x2
    1e40:	ldr	s0, [x0, #32]
    1e44:	ldr	h2, [x0, #36]
    1e48:	mov	v0.s[1], v3.s[0]
    1e4c:	mov	v0.s[2], v2.s[0]
    1e50:	mov	v0.s[3], v1.s[0]
    1e54:	str	q0, [x5, #32]
    1e58:	b.eq	1740 <init_types+0xba0>  // b.none
    1e5c:	ldp	s3, s1, [x0, #56]
    1e60:	cmp	x6, #0x3
    1e64:	ldr	s0, [x0, #48]
    1e68:	ldr	h2, [x0, #52]
    1e6c:	mov	v0.s[1], v3.s[0]
    1e70:	mov	v0.s[2], v2.s[0]
    1e74:	mov	v0.s[3], v1.s[0]
    1e78:	str	q0, [x5, #48]
    1e7c:	b.eq	1740 <init_types+0xba0>  // b.none
    1e80:	ldp	s3, s1, [x0, #72]
    1e84:	cmp	x6, #0x4
    1e88:	ldr	s0, [x0, #64]
    1e8c:	ldr	h2, [x0, #68]
    1e90:	mov	v0.s[1], v3.s[0]
    1e94:	mov	v0.s[2], v2.s[0]
    1e98:	mov	v0.s[3], v1.s[0]
    1e9c:	str	q0, [x5, #64]
    1ea0:	b.eq	1740 <init_types+0xba0>  // b.none
    1ea4:	ldp	s3, s1, [x0, #88]
    1ea8:	cmp	x6, #0x5
    1eac:	ldr	s0, [x0, #80]
    1eb0:	ldr	h2, [x0, #84]
    1eb4:	mov	v0.s[1], v3.s[0]
    1eb8:	mov	v0.s[2], v2.s[0]
    1ebc:	mov	v0.s[3], v1.s[0]
    1ec0:	str	q0, [x5, #80]
    1ec4:	b.eq	1740 <init_types+0xba0>  // b.none
    1ec8:	ldp	s3, s1, [x0, #104]
    1ecc:	cmp	x6, #0x6
    1ed0:	ldr	s0, [x0, #96]
    1ed4:	ldr	h2, [x0, #100]
    1ed8:	mov	v0.s[1], v3.s[0]
    1edc:	mov	v0.s[2], v2.s[0]
    1ee0:	mov	v0.s[3], v1.s[0]
    1ee4:	str	q0, [x5, #96]
    1ee8:	b.eq	1740 <init_types+0xba0>  // b.none
    1eec:	ldp	s3, s1, [x0, #120]
    1ef0:	ldr	s0, [x0, #112]
    1ef4:	ldr	h2, [x0, #116]
    1ef8:	mov	v0.s[1], v3.s[0]
    1efc:	mov	v0.s[2], v2.s[0]
    1f00:	mov	v0.s[3], v1.s[0]
    1f04:	str	q0, [x5, #112]
    1f08:	b	1740 <init_types+0xba0>
    1f0c:	sub	x6, x6, #0x1
    1f10:	ldp	s3, s1, [x0, #8]
    1f14:	ldr	s0, [x0]
    1f18:	ldr	h2, [x0, #4]
    1f1c:	mov	v0.s[1], v3.s[0]
    1f20:	mov	v0.s[2], v2.s[0]
    1f24:	mov	v0.s[3], v1.s[0]
    1f28:	str	q0, [x0, x10]
    1f2c:	add	x0, x0, #0x10
    1f30:	cbnz	x6, 1f0c <init_types+0x136c>
    1f34:	b	1740 <init_types+0xba0>
    1f38:	mov	w7, #0xc                   	// #12
    1f3c:	ubfiz	x2, x10, #4, #10
    1f40:	add	x2, x19, x2
    1f44:	sub	x6, x8, #0x1
    1f48:	umaddl	x10, w10, w7, x3
    1f4c:	cmp	x10, x19
    1f50:	ccmp	x3, x2, #0x2, hi  // hi = pmore
    1f54:	ccmp	x6, #0x1d, #0x0, cs  // cs = hs, nlast
    1f58:	b.ls	20f4 <init_types+0x1554>  // b.plast
    1f5c:	sub	x8, x8, #0x9
    1f60:	mov	x0, x19
    1f64:	movi	v7.4s, #0x20
    1f68:	mov	x9, x3
    1f6c:	lsr	x8, x8, #3
    1f70:	mov	x7, #0x0                   	// #0
    1f74:	add	x8, x8, #0x1
    1f78:	ldur	q0, [x0, #4]
    1f7c:	mov	x5, x0
    1f80:	ldur	q30, [x0, #20]
    1f84:	mov	x2, x9
    1f88:	ldur	q3, [x0, #36]
    1f8c:	add	x7, x7, #0x1
    1f90:	ldur	q29, [x0, #52]
    1f94:	cmp	x8, x7
    1f98:	ldur	q1, [x0, #68]
    1f9c:	add	x9, x9, #0x60
    1fa0:	ldur	q28, [x0, #84]
    1fa4:	add	x0, x0, #0x80
    1fa8:	ldur	q2, [x0, #-28]
    1fac:	ldur	q19, [x0, #-12]
    1fb0:	ld4	{v24.4s-v27.4s}, [x5], #64
    1fb4:	uzp1	v1.8h, v1.8h, v28.8h
    1fb8:	uzp1	v2.8h, v2.8h, v19.8h
    1fbc:	uzp1	v0.8h, v0.8h, v30.8h
    1fc0:	uzp1	v3.8h, v3.8h, v29.8h
    1fc4:	ld4	{v20.4s-v23.4s}, [x5]
    1fc8:	uzp1	v1.8h, v1.8h, v2.8h
    1fcc:	uzp1	v0.8h, v0.8h, v3.8h
    1fd0:	sshl	v28.4s, v26.4s, v7.4s
    1fd4:	sshl	v19.4s, v22.4s, v7.4s
    1fd8:	mov	v16.16b, v24.16b
    1fdc:	uzp1	v0.8h, v0.8h, v1.8h
    1fe0:	mov	v4.16b, v20.16b
    1fe4:	orr	v17.16b, v28.16b, v27.16b
    1fe8:	orr	v5.16b, v19.16b, v23.16b
    1fec:	uxtl2	v6.4s, v0.8h
    1ff0:	uxtl	v18.4s, v0.4h
    1ff4:	st3	{v16.4s-v18.4s}, [x2], #48
    1ff8:	st3	{v4.4s-v6.4s}, [x2]
    1ffc:	b.hi	1f78 <init_types+0x13d8>  // b.pmore
    2000:	lsl	x2, x8, #3
    2004:	lsl	x5, x8, #7
    2008:	add	x8, x2, x8, lsl #4
    200c:	add	x0, x19, x5
    2010:	subs	x6, x6, x2
    2014:	add	x2, x3, x8, lsl #2
    2018:	ldr	w9, [x19, x5]
    201c:	ldr	w7, [x0, #12]
    2020:	ldrh	w5, [x0, #4]
    2024:	str	w9, [x3, x8, lsl #2]
    2028:	stp	w7, w5, [x2, #4]
    202c:	b.eq	1740 <init_types+0xba0>  // b.none
    2030:	ldrh	w7, [x0, #20]
    2034:	cmp	x6, #0x1
    2038:	ldr	w9, [x0, #16]
    203c:	ldr	w8, [x0, #28]
    2040:	stp	w9, w8, [x2, #12]
    2044:	str	w7, [x2, #20]
    2048:	b.eq	1740 <init_types+0xba0>  // b.none
    204c:	ldrh	w7, [x0, #36]
    2050:	cmp	x6, #0x2
    2054:	ldr	w9, [x0, #32]
    2058:	ldr	w8, [x0, #44]
    205c:	stp	w9, w8, [x2, #24]
    2060:	str	w7, [x2, #32]
    2064:	b.eq	1740 <init_types+0xba0>  // b.none
    2068:	ldrh	w7, [x0, #52]
    206c:	cmp	x6, #0x3
    2070:	ldr	w9, [x0, #48]
    2074:	ldr	w8, [x0, #60]
    2078:	stp	w9, w8, [x2, #36]
    207c:	str	w7, [x2, #44]
    2080:	b.eq	1740 <init_types+0xba0>  // b.none
    2084:	ldrh	w7, [x0, #68]
    2088:	cmp	x6, #0x4
    208c:	ldr	w9, [x0, #64]
    2090:	ldr	w8, [x0, #76]
    2094:	stp	w9, w8, [x2, #48]
    2098:	str	w7, [x2, #56]
    209c:	b.eq	1740 <init_types+0xba0>  // b.none
    20a0:	ldrh	w7, [x0, #84]
    20a4:	cmp	x6, #0x5
    20a8:	ldr	w9, [x0, #80]
    20ac:	ldr	w8, [x0, #92]
    20b0:	stp	w9, w8, [x2, #60]
    20b4:	str	w7, [x2, #68]
    20b8:	b.eq	1740 <init_types+0xba0>  // b.none
    20bc:	ldrh	w7, [x0, #100]
    20c0:	cmp	x6, #0x6
    20c4:	ldr	w8, [x0, #96]
    20c8:	ldr	w6, [x0, #108]
    20cc:	stp	w8, w6, [x2, #72]
    20d0:	str	w7, [x2, #80]
    20d4:	b.eq	1740 <init_types+0xba0>  // b.none
    20d8:	ldrh	w6, [x0, #116]
    20dc:	ldr	w7, [x0, #112]
    20e0:	ldr	w0, [x0, #124]
    20e4:	stp	w7, w0, [x2, #84]
    20e8:	str	w6, [x2, #92]
    20ec:	b	1740 <init_types+0xba0>
    20f0:	sub	x6, x6, #0x1
    20f4:	ldrh	w2, [x0, #4]
    20f8:	ldr	w7, [x0, #12]
    20fc:	ldr	w8, [x0], #16
    2100:	stp	w8, w7, [x5]
    2104:	add	x5, x5, #0xc
    2108:	stur	w2, [x5, #-4]
    210c:	cbnz	x6, 20f0 <init_types+0x1550>
    2110:	b	1740 <init_types+0xba0>
    2114:	ldr	w0, [x19]
    2118:	ubfiz	x7, x10, #3, #10
    211c:	str	w0, [x23]
    2120:	cbz	w26, 1c50 <init_types+0x10b0>
    2124:	orr	w0, w2, #0x2000000
    2128:	orr	w0, w0, w10
    212c:	str	w0, [x23, #4]
    2130:	b	17bc <init_types+0xc1c>
    2134:	ubfiz	x2, x10, #3, #10
    2138:	cmp	x9, x26
    213c:	b.ne	2240 <init_types+0x16a0>  // b.any
    2140:	add	x19, x19, x5
    2144:	add	x3, x23, x3
    2148:	b	1b80 <init_types+0xfe0>
    214c:	ubfiz	x2, x9, #3, #10
    2150:	mov	x1, x2
    2154:	b	1370 <init_types+0x7d0>
    2158:	mov	x9, x3
    215c:	mov	x1, x19
    2160:	b	1a90 <init_types+0xef0>
    2164:	str	wzr, [sp, #176]
    2168:	str	wzr, [sp, #184]
    216c:	b	fe0 <init_types+0x440>
    2170:	mov	x7, #0x0                   	// #0
    2174:	mov	x23, #0x0                   	// #0
    2178:	b	158c <init_types+0x9ec>
    217c:	mov	x3, x23
    2180:	b	1768 <init_types+0xbc8>
    2184:	mov	w1, #0x7                   	// #7
    2188:	b	d00 <init_types+0x160>
    218c:	adrp	x3, 0 <get_kind_v1>
    2190:	add	x3, x3, #0x0
    2194:	adrp	x1, 0 <get_kind_v1>
    2198:	adrp	x0, 0 <get_kind_v1>
    219c:	add	x3, x3, #0x10
    21a0:	add	x1, x1, #0x0
    21a4:	add	x0, x0, #0x0
    21a8:	mov	w2, #0x29c                 	// #668
    21ac:	stp	d8, d9, [sp, #96]
    21b0:	stp	d10, d11, [sp, #112]
    21b4:	stp	d12, d13, [sp, #128]
    21b8:	stp	d14, d15, [sp, #144]
    21bc:	bl	0 <__assert_fail>
    21c0:	mov	w1, #0xa                   	// #10
    21c4:	b	d00 <init_types+0x160>
    21c8:	adrp	x3, 0 <get_kind_v1>
    21cc:	add	x3, x3, #0x0
    21d0:	adrp	x1, 0 <get_kind_v1>
    21d4:	adrp	x0, 0 <get_kind_v1>
    21d8:	add	x3, x3, #0x20
    21dc:	add	x1, x1, #0x0
    21e0:	add	x0, x0, #0x0
    21e4:	mov	w2, #0x265                 	// #613
    21e8:	stp	d8, d9, [sp, #96]
    21ec:	stp	d10, d11, [sp, #112]
    21f0:	stp	d12, d13, [sp, #128]
    21f4:	stp	d14, d15, [sp, #144]
    21f8:	bl	0 <__assert_fail>
    21fc:	adrp	x3, 0 <get_kind_v1>
    2200:	add	x3, x3, #0x0
    2204:	adrp	x1, 0 <get_kind_v1>
    2208:	adrp	x0, 0 <get_kind_v1>
    220c:	add	x3, x3, #0x20
    2210:	add	x1, x1, #0x0
    2214:	add	x0, x0, #0x0
    2218:	mov	w2, #0x1d0                 	// #464
    221c:	stp	d8, d9, [sp, #96]
    2220:	stp	d10, d11, [sp, #112]
    2224:	stp	d12, d13, [sp, #128]
    2228:	stp	d14, d15, [sp, #144]
    222c:	bl	0 <__assert_fail>
    2230:	ldr	w20, [x25, #44]
    2234:	add	x19, x21, x26
    2238:	add	x20, x21, x20
    223c:	b	125c <init_types+0x6bc>
    2240:	adrp	x3, 0 <get_kind_v1>
    2244:	add	x3, x3, #0x0
    2248:	adrp	x1, 0 <get_kind_v1>
    224c:	adrp	x0, 0 <get_kind_v1>
    2250:	add	x3, x3, #0x20
    2254:	add	x1, x1, #0x0
    2258:	add	x0, x0, #0x0
    225c:	mov	w2, #0x210                 	// #528
    2260:	bl	0 <__assert_fail>
    2264:	adrp	x3, 0 <get_kind_v1>
    2268:	add	x3, x3, #0x0
    226c:	adrp	x1, 0 <get_kind_v1>
    2270:	adrp	x0, 0 <get_kind_v1>
    2274:	add	x3, x3, #0x20
    2278:	add	x1, x1, #0x0
    227c:	add	x0, x0, #0x0
    2280:	mov	w2, #0x25c                 	// #604
    2284:	bl	0 <__assert_fail>
    2288:	add	x1, x26, #0x1
    228c:	and	x1, x1, #0xfffffffffffffffe
    2290:	lsl	x1, x1, #2
    2294:	b	1370 <init_types+0x7d0>
    2298:	mov	x1, #0xc                   	// #12
    229c:	b	1370 <init_types+0x7d0>

00000000000022a0 <ctf_file_close.part.0>:
    22a0:	stp	x29, x30, [sp, #-32]!
    22a4:	mov	x29, sp
    22a8:	stp	x19, x20, [sp, #16]
    22ac:	mov	x19, x0
    22b0:	ldr	x0, [x0, #504]
    22b4:	bl	0 <free>
    22b8:	ldr	x0, [x19, #536]
    22bc:	bl	0 <free>
    22c0:	ldr	x20, [x19, #512]
    22c4:	cbz	x20, 22f0 <ctf_file_close.part.0+0x50>
    22c8:	ldr	w2, [x20, #548]
    22cc:	mov	x1, x20
    22d0:	adrp	x0, 0 <get_kind_v1>
    22d4:	add	x0, x0, #0x0
    22d8:	bl	0 <ctf_dprintf>
    22dc:	ldr	w0, [x20, #548]
    22e0:	cmp	w0, #0x1
    22e4:	b.ls	2444 <ctf_file_close.part.0+0x1a4>  // b.plast
    22e8:	sub	w0, w0, #0x1
    22ec:	str	w0, [x20, #548]
    22f0:	ldr	x20, [x19, #584]
    22f4:	cbz	x20, 230c <ctf_file_close.part.0+0x6c>
    22f8:	mov	x1, x20
    22fc:	mov	x0, x19
    2300:	ldr	x20, [x20, #8]
    2304:	bl	0 <ctf_dtd_delete>
    2308:	cbnz	x20, 22f8 <ctf_file_close.part.0+0x58>
    230c:	ldr	x0, [x19, #568]
    2310:	bl	0 <ctf_dynhash_destroy>
    2314:	ldr	w0, [x19, #552]
    2318:	tbz	w0, #1, 2420 <ctf_file_close.part.0+0x180>
    231c:	ldr	x0, [x19, #160]
    2320:	bl	0 <ctf_dynhash_destroy>
    2324:	ldr	x0, [x19, #176]
    2328:	bl	0 <ctf_dynhash_destroy>
    232c:	ldr	x0, [x19, #192]
    2330:	bl	0 <ctf_dynhash_destroy>
    2334:	ldr	x0, [x19, #208]
    2338:	bl	0 <ctf_dynhash_destroy>
    233c:	ldr	x20, [x19, #608]
    2340:	cbz	x20, 235c <ctf_file_close.part.0+0xbc>
    2344:	nop
    2348:	mov	x1, x20
    234c:	mov	x0, x19
    2350:	ldr	x20, [x20, #8]
    2354:	bl	0 <ctf_dvd_delete>
    2358:	cbnz	x20, 2348 <ctf_file_close.part.0+0xa8>
    235c:	ldr	x0, [x19, #592]
    2360:	adrp	x20, 0 <get_kind_v1>
    2364:	add	x20, x20, #0x0
    2368:	bl	0 <ctf_dynhash_destroy>
    236c:	mov	x0, x19
    2370:	bl	0 <ctf_str_free_atoms>
    2374:	ldr	x0, [x19, #704]
    2378:	bl	0 <free>
    237c:	ldr	x0, [x19, #24]
    2380:	add	x1, x20, #0x100
    2384:	cmp	x0, x1
    2388:	b.eq	2390 <ctf_file_close.part.0+0xf0>  // b.none
    238c:	bl	0 <free>
    2390:	ldr	x0, [x19, #56]
    2394:	add	x1, x20, #0x100
    2398:	cmp	x0, x1
    239c:	b.eq	23a4 <ctf_file_close.part.0+0x104>  // b.none
    23a0:	bl	0 <free>
    23a4:	ldr	x0, [x19, #88]
    23a8:	add	x20, x20, #0x100
    23ac:	cmp	x0, x20
    23b0:	b.eq	2450 <ctf_file_close.part.0+0x1b0>  // b.none
    23b4:	bl	0 <free>
    23b8:	ldr	x0, [x19, #400]
    23bc:	bl	0 <free>
    23c0:	ldr	x0, [x19, #128]
    23c4:	bl	0 <ctf_dynhash_destroy>
    23c8:	ldr	x0, [x19, #648]
    23cc:	bl	0 <ctf_dynhash_destroy>
    23d0:	ldr	x0, [x19, #656]
    23d4:	bl	0 <ctf_dynhash_destroy>
    23d8:	ldr	x0, [x19, #664]
    23dc:	bl	0 <ctf_dynhash_destroy>
    23e0:	ldr	x0, [x19, #672]
    23e4:	bl	0 <ctf_dynhash_destroy>
    23e8:	ldr	x0, [x19, #696]
    23ec:	bl	0 <ctf_dynhash_destroy>
    23f0:	ldr	x0, [x19, #424]
    23f4:	bl	0 <free>
    23f8:	ldr	x0, [x19, #440]
    23fc:	bl	0 <free>
    2400:	ldr	x0, [x19, #448]
    2404:	bl	0 <free>
    2408:	ldr	x0, [x19, #8]
    240c:	bl	0 <free>
    2410:	mov	x0, x19
    2414:	ldp	x19, x20, [sp, #16]
    2418:	ldp	x29, x30, [sp], #32
    241c:	b	0 <free>
    2420:	ldr	x0, [x19, #152]
    2424:	bl	0 <ctf_hash_destroy>
    2428:	ldr	x0, [x19, #168]
    242c:	bl	0 <ctf_hash_destroy>
    2430:	ldr	x0, [x19, #184]
    2434:	bl	0 <ctf_hash_destroy>
    2438:	ldr	x0, [x19, #200]
    243c:	bl	0 <ctf_hash_destroy>
    2440:	b	233c <ctf_file_close.part.0+0x9c>
    2444:	mov	x0, x20
    2448:	bl	22a0 <ctf_file_close.part.0>
    244c:	b	22f0 <ctf_file_close.part.0+0x50>
    2450:	ldr	x0, [x19, #136]
    2454:	cbz	x0, 23b8 <ctf_file_close.part.0+0x118>
    2458:	ldr	x1, [x19, #144]
    245c:	bl	0 <ctf_munmap>
    2460:	b	23b8 <ctf_file_close.part.0+0x118>
    2464:	nop

0000000000002468 <ctf_set_ctl_hashes>:
    2468:	adrp	x1, 0 <get_kind_v1>
    246c:	add	x1, x1, #0x0
    2470:	add	x10, x0, #0x98
    2474:	add	x8, x0, #0xa8
    2478:	add	x6, x0, #0xb8
    247c:	add	x1, x1, #0x100
    2480:	add	x5, x0, #0xc8
    2484:	mov	x11, #0x6                   	// #6
    2488:	mov	x9, #0x5                   	// #5
    248c:	mov	x7, #0x4                   	// #4
    2490:	adrp	x4, 0 <get_kind_v1>
    2494:	adrp	x3, 0 <get_kind_v1>
    2498:	add	x4, x4, #0x0
    249c:	add	x3, x3, #0x0
    24a0:	adrp	x2, 0 <get_kind_v1>
    24a4:	add	x2, x2, #0x0
    24a8:	stp	x4, x11, [x0, #216]
    24ac:	stp	x10, x3, [x0, #232]
    24b0:	stp	x9, x8, [x0, #248]
    24b4:	stp	x2, x7, [x0, #264]
    24b8:	stp	x6, x1, [x0, #280]
    24bc:	stp	xzr, x5, [x0, #296]
    24c0:	stp	xzr, xzr, [x0, #312]
    24c4:	str	xzr, [x0, #328]
    24c8:	ret
    24cc:	nop

00000000000024d0 <ctf_file_close>:
    24d0:	cbz	x0, 2528 <ctf_file_close+0x58>
    24d4:	stp	x29, x30, [sp, #-32]!
    24d8:	mov	x29, sp
    24dc:	str	x19, [sp, #16]
    24e0:	mov	x19, x0
    24e4:	mov	x1, x19
    24e8:	adrp	x0, 0 <get_kind_v1>
    24ec:	add	x0, x0, #0x0
    24f0:	ldr	w2, [x19, #548]
    24f4:	bl	0 <ctf_dprintf>
    24f8:	ldr	w0, [x19, #548]
    24fc:	cmp	w0, #0x1
    2500:	b.ls	2518 <ctf_file_close+0x48>  // b.plast
    2504:	sub	w0, w0, #0x1
    2508:	str	w0, [x19, #548]
    250c:	ldr	x19, [sp, #16]
    2510:	ldp	x29, x30, [sp], #32
    2514:	ret
    2518:	mov	x0, x19
    251c:	ldr	x19, [sp, #16]
    2520:	ldp	x29, x30, [sp], #32
    2524:	b	22a0 <ctf_file_close.part.0>
    2528:	ret
    252c:	nop

0000000000002530 <ctf_close>:
    2530:	b	0 <ctf_arc_close>
    2534:	nop

0000000000002538 <ctf_get_arc>:
    2538:	ldr	x0, [x0, #640]
    253c:	ret

0000000000002540 <ctf_getdatasect>:
    2540:	ldp	x2, x3, [x0, #24]
    2544:	stp	x2, x3, [x8]
    2548:	ldp	x0, x1, [x0, #40]
    254c:	stp	x0, x1, [x8, #16]
    2550:	ret
    2554:	nop

0000000000002558 <ctf_parent_file>:
    2558:	ldr	x0, [x0, #512]
    255c:	ret

0000000000002560 <ctf_parent_name>:
    2560:	ldr	x0, [x0, #528]
    2564:	ret

0000000000002568 <ctf_parent_name_set>:
    2568:	stp	x29, x30, [sp, #-32]!
    256c:	mov	x29, sp
    2570:	stp	x19, x20, [sp, #16]
    2574:	mov	x19, x0
    2578:	mov	x20, x1
    257c:	ldr	x0, [x0, #536]
    2580:	cbz	x0, 2588 <ctf_parent_name_set+0x20>
    2584:	bl	0 <free>
    2588:	mov	x0, x20
    258c:	bl	0 <strdup>
    2590:	str	x0, [x19, #536]
    2594:	mov	x1, x0
    2598:	cbz	x0, 25b0 <ctf_parent_name_set+0x48>
    259c:	mov	w0, #0x0                   	// #0
    25a0:	str	x1, [x19, #528]
    25a4:	ldp	x19, x20, [sp, #16]
    25a8:	ldp	x29, x30, [sp], #32
    25ac:	ret
    25b0:	mov	x0, x19
    25b4:	mov	w1, #0xc                   	// #12
    25b8:	bl	0 <ctf_set_errno>
    25bc:	b	25a4 <ctf_parent_name_set+0x3c>

00000000000025c0 <ctf_cuname>:
    25c0:	ldr	x0, [x0, #496]
    25c4:	ret

00000000000025c8 <ctf_cuname_set>:
    25c8:	stp	x29, x30, [sp, #-32]!
    25cc:	mov	x29, sp
    25d0:	stp	x19, x20, [sp, #16]
    25d4:	mov	x19, x0
    25d8:	mov	x20, x1
    25dc:	ldr	x0, [x0, #504]
    25e0:	cbz	x0, 25e8 <ctf_cuname_set+0x20>
    25e4:	bl	0 <free>
    25e8:	mov	x0, x20
    25ec:	bl	0 <strdup>
    25f0:	str	x0, [x19, #504]
    25f4:	mov	x1, x0
    25f8:	cbz	x0, 2610 <ctf_cuname_set+0x48>
    25fc:	mov	w0, #0x0                   	// #0
    2600:	str	x1, [x19, #496]
    2604:	ldp	x19, x20, [sp, #16]
    2608:	ldp	x29, x30, [sp], #32
    260c:	ret
    2610:	mov	x0, x19
    2614:	mov	w1, #0xc                   	// #12
    2618:	bl	0 <ctf_set_errno>
    261c:	b	2604 <ctf_cuname_set+0x3c>

0000000000002620 <ctf_import>:
    2620:	stp	x29, x30, [sp, #-48]!
    2624:	cmp	x0, #0x0
    2628:	ccmp	x0, x1, #0x4, ne  // ne = any
    262c:	mov	x29, sp
    2630:	stp	x19, x20, [sp, #16]
    2634:	mov	x19, x0
    2638:	b.eq	26d8 <ctf_import+0xb8>  // b.none
    263c:	mov	x20, x1
    2640:	cbz	x1, 26fc <ctf_import+0xdc>
    2644:	ldr	w1, [x1, #548]
    2648:	cbz	w1, 26d8 <ctf_import+0xb8>
    264c:	ldr	x1, [x0, #488]
    2650:	ldr	x2, [x20, #488]
    2654:	cmp	x2, x1
    2658:	b.ne	270c <ctf_import+0xec>  // b.any
    265c:	str	x21, [sp, #32]
    2660:	ldr	x21, [x0, #512]
    2664:	cbz	x21, 26a0 <ctf_import+0x80>
    2668:	ldr	w2, [x21, #548]
    266c:	mov	x1, x21
    2670:	adrp	x0, 0 <get_kind_v1>
    2674:	add	x0, x0, #0x0
    2678:	sub	w2, w2, #0x1
    267c:	str	w2, [x21, #548]
    2680:	bl	0 <ctf_dprintf>
    2684:	ldr	w0, [x21, #548]
    2688:	cmp	w0, #0x1
    268c:	b.ls	26f0 <ctf_import+0xd0>  // b.plast
    2690:	sub	w0, w0, #0x1
    2694:	str	w0, [x21, #548]
    2698:	str	xzr, [x19, #512]
    269c:	cbz	x20, 26c0 <ctf_import+0xa0>
    26a0:	ldr	x0, [x19, #528]
    26a4:	cbz	x0, 2720 <ctf_import+0x100>
    26a8:	ldr	w1, [x19, #552]
    26ac:	ldr	w0, [x20, #548]
    26b0:	orr	w1, w1, #0x1
    26b4:	str	w1, [x19, #552]
    26b8:	add	w0, w0, #0x1
    26bc:	str	w0, [x20, #548]
    26c0:	ldr	x21, [sp, #32]
    26c4:	str	x20, [x19, #512]
    26c8:	mov	w0, #0x0                   	// #0
    26cc:	ldp	x19, x20, [sp, #16]
    26d0:	ldp	x29, x30, [sp], #48
    26d4:	ret
    26d8:	mov	x0, x19
    26dc:	mov	w1, #0x16                  	// #22
    26e0:	bl	0 <ctf_set_errno>
    26e4:	ldp	x19, x20, [sp, #16]
    26e8:	ldp	x29, x30, [sp], #48
    26ec:	ret
    26f0:	mov	x0, x21
    26f4:	bl	22a0 <ctf_file_close.part.0>
    26f8:	b	2698 <ctf_import+0x78>
    26fc:	str	x21, [sp, #32]
    2700:	ldr	x21, [x0, #512]
    2704:	cbnz	x21, 2668 <ctf_import+0x48>
    2708:	b	26c0 <ctf_import+0xa0>
    270c:	mov	w1, #0x3f4                 	// #1012
    2710:	bl	0 <ctf_set_errno>
    2714:	ldp	x19, x20, [sp, #16]
    2718:	ldp	x29, x30, [sp], #48
    271c:	ret
    2720:	ldr	x0, [x19, #536]
    2724:	cbz	x0, 272c <ctf_import+0x10c>
    2728:	bl	0 <free>
    272c:	adrp	x0, 0 <get_kind_v1>
    2730:	add	x0, x0, #0x0
    2734:	bl	0 <strdup>
    2738:	str	x0, [x19, #536]
    273c:	cbz	x0, 2748 <ctf_import+0x128>
    2740:	str	x0, [x19, #528]
    2744:	b	26a8 <ctf_import+0x88>
    2748:	mov	x0, x19
    274c:	mov	w1, #0xc                   	// #12
    2750:	bl	0 <ctf_set_errno>
    2754:	tbz	w0, #31, 26a8 <ctf_import+0x88>
    2758:	ldr	x21, [sp, #32]
    275c:	b	26e4 <ctf_import+0xc4>

0000000000002760 <ctf_setmodel>:
    2760:	adrp	x2, 0 <get_kind_v1>
    2764:	add	x2, x2, #0x0
    2768:	add	x2, x2, #0x108
    276c:	b	2778 <ctf_setmodel+0x18>
    2770:	ldr	x3, [x2, #56]!
    2774:	cbz	x3, 2794 <ctf_setmodel+0x34>
    2778:	ldr	w3, [x2, #8]
    277c:	cmp	w3, w1
    2780:	b.ne	2770 <ctf_setmodel+0x10>  // b.any
    2784:	mov	w1, #0x0                   	// #0
    2788:	str	x2, [x0, #488]
    278c:	mov	w0, w1
    2790:	ret
    2794:	stp	x29, x30, [sp, #-16]!
    2798:	mov	w1, #0x16                  	// #22
    279c:	mov	x29, sp
    27a0:	bl	0 <ctf_set_errno>
    27a4:	ldp	x29, x30, [sp], #16
    27a8:	ret
    27ac:	nop

00000000000027b0 <ctf_bufopen_internal>:
    27b0:	stp	x29, x30, [sp, #-176]!
    27b4:	mov	x29, sp
    27b8:	stp	x19, x20, [sp, #16]
    27bc:	mov	x19, x1
    27c0:	mov	x20, x2
    27c4:	stp	x21, x22, [sp, #32]
    27c8:	mov	w22, w4
    27cc:	stp	x23, x24, [sp, #48]
    27d0:	mov	x23, x0
    27d4:	mov	x24, x5
    27d8:	stp	x25, x26, [sp, #64]
    27dc:	mov	x25, x3
    27e0:	bl	0 <libctf_init_debug>
    27e4:	cbz	x23, 2c38 <ctf_bufopen_internal+0x488>
    27e8:	cbz	x19, 280c <ctf_bufopen_internal+0x5c>
    27ec:	orr	x0, x20, x25
    27f0:	cbz	x0, 2c38 <ctf_bufopen_internal+0x488>
    27f4:	ldr	x0, [x19, #24]
    27f8:	and	x0, x0, #0xfffffffffffffff7
    27fc:	cmp	x0, #0x10
    2800:	b.ne	2cd8 <ctf_bufopen_internal+0x528>  // b.any
    2804:	ldr	x0, [x19, #8]
    2808:	cbz	x0, 2d8c <ctf_bufopen_internal+0x5dc>
    280c:	cbz	x20, 2818 <ctf_bufopen_internal+0x68>
    2810:	ldr	x0, [x20, #8]
    2814:	cbz	x0, 2da0 <ctf_bufopen_internal+0x5f0>
    2818:	ldr	x0, [x23, #16]
    281c:	cmp	x0, #0x3
    2820:	b.ls	2c64 <ctf_bufopen_internal+0x4b4>  // b.plast
    2824:	stp	x27, x28, [sp, #80]
    2828:	adrp	x0, 0 <get_kind_v1>
    282c:	add	x0, x0, #0x0
    2830:	ldr	x28, [x23, #8]
    2834:	ldrh	w1, [x28]
    2838:	ldrb	w2, [x28, #2]
    283c:	bl	0 <ctf_dprintf>
    2840:	ldrh	w0, [x28]
    2844:	mov	w1, #0xdff2                	// #57330
    2848:	cmp	w0, w1
    284c:	b.ne	2df0 <ctf_bufopen_internal+0x640>  // b.any
    2850:	ldrb	w1, [x28, #2]
    2854:	sub	w0, w1, #0x1
    2858:	and	w0, w0, #0xff
    285c:	cmp	w0, #0x3
    2860:	b.hi	2dd8 <ctf_bufopen_internal+0x628>  // b.pmore
    2864:	cmp	x19, #0x0
    2868:	cset	w0, ne  // ne = any
    286c:	str	w0, [sp, #112]
    2870:	cmp	w0, #0x0
    2874:	ccmp	w1, #0x2, #0x2, ne  // ne = any
    2878:	b.ls	2db4 <ctf_bufopen_internal+0x604>  // b.plast
    287c:	cmp	w1, #0x4
    2880:	mov	x27, #0x34                  	// #52
    2884:	mov	x0, #0x28                  	// #40
    2888:	csel	x27, x27, x0, eq  // eq = none
    288c:	str	wzr, [sp, #104]
    2890:	ldr	x0, [x23, #16]
    2894:	cmp	x0, x27
    2898:	b.cc	2c90 <ctf_bufopen_internal+0x4e0>  // b.lo, b.ul, b.last
    289c:	mov	x1, #0x1                   	// #1
    28a0:	mov	x0, #0x2d8                 	// #728
    28a4:	bl	0 <calloc>
    28a8:	mov	x26, x0
    28ac:	cbz	x0, 2e2c <ctf_bufopen_internal+0x67c>
    28b0:	cbz	w22, 28bc <ctf_bufopen_internal+0x10c>
    28b4:	mov	w0, #0x2                   	// #2
    28b8:	str	w0, [x26, #552]
    28bc:	mov	x0, #0x34                  	// #52
    28c0:	bl	0 <malloc>
    28c4:	str	x0, [x26, #8]
    28c8:	mov	x21, x0
    28cc:	cbz	x0, 2e24 <ctf_bufopen_internal+0x674>
    28d0:	ldr	x1, [x23, #8]
    28d4:	mov	x2, x27
    28d8:	bl	0 <memcpy>
    28dc:	ldrb	w0, [x28, #2]
    28e0:	cmp	w0, #0x3
    28e4:	b.ls	2d04 <ctf_bufopen_internal+0x554>  // b.plast
    28e8:	ldp	w1, w2, [x21, #44]
    28ec:	ldr	w0, [sp, #104]
    28f0:	cbnz	w0, 2d38 <ctf_bufopen_internal+0x588>
    28f4:	ldrb	w0, [x21, #3]
    28f8:	add	w1, w1, w2
    28fc:	strb	w0, [x26, #16]
    2900:	str	x1, [x26, #416]
    2904:	adrp	x0, 0 <get_kind_v1>
    2908:	add	x0, x0, #0x0
    290c:	bl	0 <ctf_dprintf>
    2910:	ldr	x22, [x26, #416]
    2914:	ldr	w0, [x21, #16]
    2918:	cmp	x22, w0, uxtw
    291c:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    2920:	ldr	w1, [x21, #20]
    2924:	cmp	x22, w1, uxtw
    2928:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    292c:	ldr	w2, [x21, #24]
    2930:	orr	w7, w1, w2
    2934:	cmp	x22, w2, uxtw
    2938:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    293c:	ldr	w3, [x21, #28]
    2940:	cmp	x22, w3, uxtw
    2944:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    2948:	ldr	w5, [x21, #32]
    294c:	orr	w9, w3, w5
    2950:	cmp	x22, w5, uxtw
    2954:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    2958:	ldr	w8, [x21, #40]
    295c:	cmp	x22, w8, uxtw
    2960:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    2964:	ldr	w10, [x21, #44]
    2968:	cmp	x22, w10, uxtw
    296c:	b.cc	2ca8 <ctf_bufopen_internal+0x4f8>  // b.lo, b.ul, b.last
    2970:	cmp	w3, w8
    2974:	csel	w11, w3, w8, ls  // ls = plast
    2978:	cmp	w0, w1
    297c:	ccmp	w1, w2, #0x2, ls  // ls = plast
    2980:	ccmp	w11, w2, #0x0, ls  // ls = plast
    2984:	ccmp	w3, w5, #0x2, cs  // cs = hs, nlast
    2988:	b.hi	2ca8 <ctf_bufopen_internal+0x4f8>  // b.pmore
    298c:	ldr	w2, [x21, #36]
    2990:	cmp	w8, w2
    2994:	ccmp	w5, w2, #0x2, cs  // cs = hs, nlast
    2998:	ccmp	w8, w10, #0x2, ls  // ls = plast
    299c:	b.hi	2ca8 <ctf_bufopen_internal+0x4f8>  // b.pmore
    29a0:	orr	w0, w0, w8
    29a4:	orr	w1, w9, w7
    29a8:	orr	w0, w0, w2
    29ac:	and	w1, w1, #0x2
    29b0:	and	w0, w0, #0x3
    29b4:	orr	w0, w0, w1
    29b8:	cbnz	w0, 2ca8 <ctf_bufopen_internal+0x4f8>
    29bc:	ldrb	w28, [x21, #3]
    29c0:	tbnz	w28, #0, 2ea0 <ctf_bufopen_internal+0x6f0>
    29c4:	ldr	w0, [sp, #104]
    29c8:	cbnz	w0, 2e44 <ctf_bufopen_internal+0x694>
    29cc:	ldr	x0, [x23, #8]
    29d0:	stp	x0, xzr, [x26, #392]
    29d4:	add	x0, x0, x27
    29d8:	str	x0, [x26, #408]
    29dc:	ldrb	w1, [x21, #2]
    29e0:	adrp	x22, 0 <get_kind_v1>
    29e4:	add	x22, x22, #0x0
    29e8:	mov	w3, #0x28                  	// #40
    29ec:	add	x2, x22, #0x38
    29f0:	str	w1, [x26, #560]
    29f4:	mov	x0, x26
    29f8:	umaddl	x1, w1, w3, x2
    29fc:	str	x1, [x26]
    2a00:	bl	0 <ctf_str_create_atoms>
    2a04:	mov	w0, #0x7fffffff            	// #2147483647
    2a08:	str	w0, [x26, #544]
    2a0c:	ldr	w0, [sp, #112]
    2a10:	ldp	x2, x3, [x23]
    2a14:	stp	x2, x3, [x26, #24]
    2a18:	ldp	x2, x3, [x23, #16]
    2a1c:	stp	x2, x3, [x26, #40]
    2a20:	cbz	w0, 2a44 <ctf_bufopen_internal+0x294>
    2a24:	ldp	x0, x1, [x19]
    2a28:	stp	x0, x1, [x26, #56]
    2a2c:	ldp	x0, x1, [x20]
    2a30:	stp	x0, x1, [x26, #88]
    2a34:	ldp	x0, x1, [x19, #16]
    2a38:	stp	x0, x1, [x26, #72]
    2a3c:	ldp	x0, x1, [x20, #16]
    2a40:	stp	x0, x1, [x26, #104]
    2a44:	ldr	x0, [x26, #24]
    2a48:	cbz	x0, 2a58 <ctf_bufopen_internal+0x2a8>
    2a4c:	bl	0 <strdup>
    2a50:	str	x0, [x26, #24]
    2a54:	cbz	x0, 2e74 <ctf_bufopen_internal+0x6c4>
    2a58:	ldr	x0, [x26, #56]
    2a5c:	cbz	x0, 2a6c <ctf_bufopen_internal+0x2bc>
    2a60:	bl	0 <strdup>
    2a64:	str	x0, [x26, #56]
    2a68:	cbz	x0, 2e74 <ctf_bufopen_internal+0x6c4>
    2a6c:	ldr	x0, [x26, #88]
    2a70:	cbz	x0, 2a80 <ctf_bufopen_internal+0x2d0>
    2a74:	bl	0 <strdup>
    2a78:	str	x0, [x26, #88]
    2a7c:	cbz	x0, 2e74 <ctf_bufopen_internal+0x6c4>
    2a80:	ldr	x1, [x26, #24]
    2a84:	cbz	x1, 2f2c <ctf_bufopen_internal+0x77c>
    2a88:	ldr	x1, [x26, #56]
    2a8c:	cbz	x1, 2f1c <ctf_bufopen_internal+0x76c>
    2a90:	cbz	x0, 2f38 <ctf_bufopen_internal+0x788>
    2a94:	cbz	x20, 2aa8 <ctf_bufopen_internal+0x2f8>
    2a98:	ldr	x0, [x20, #8]
    2a9c:	str	x0, [x26, #352]
    2aa0:	ldr	x0, [x20, #16]
    2aa4:	str	x0, [x26, #360]
    2aa8:	ldr	w0, [sp, #104]
    2aac:	str	x25, [x26, #128]
    2ab0:	cbz	w0, 2ac8 <ctf_bufopen_internal+0x318>
    2ab4:	ldr	x1, [x26, #408]
    2ab8:	mov	x0, x21
    2abc:	bl	340 <flip_ctf>
    2ac0:	mov	w23, w0
    2ac4:	cbnz	w0, 2f44 <ctf_bufopen_internal+0x794>
    2ac8:	ldr	x2, [x26, #392]
    2acc:	mov	x0, x26
    2ad0:	mov	x1, x21
    2ad4:	bl	b0 <ctf_set_base>
    2ad8:	ldr	w0, [x26, #552]
    2adc:	tbnz	w0, #1, 3038 <ctf_bufopen_internal+0x888>
    2ae0:	mov	x1, x21
    2ae4:	mov	x0, x26
    2ae8:	bl	ba0 <init_types>
    2aec:	mov	w23, w0
    2af0:	cbnz	w0, 2e78 <ctf_bufopen_internal+0x6c8>
    2af4:	ldr	w0, [sp, #112]
    2af8:	cbz	w0, 2fc0 <ctf_bufopen_internal+0x810>
    2afc:	ldp	x23, x0, [x19, #16]
    2b00:	udiv	x23, x23, x0
    2b04:	str	x23, [x26, #432]
    2b08:	lsl	x23, x23, #2
    2b0c:	mov	x0, x23
    2b10:	bl	0 <malloc>
    2b14:	str	x0, [x26, #424]
    2b18:	mov	x27, x0
    2b1c:	cbz	x0, 2e74 <ctf_bufopen_internal+0x6c4>
    2b20:	add	x0, x0, x23
    2b24:	adrp	x1, 0 <get_kind_v1>
    2b28:	ldp	w24, w23, [x21, #20]
    2b2c:	add	x1, x1, #0x0
    2b30:	ldr	x25, [x19, #8]
    2b34:	str	x0, [sp, #104]
    2b38:	adrp	x0, 0 <get_kind_v1>
    2b3c:	add	x0, x0, #0x0
    2b40:	str	x1, [sp, #120]
    2b44:	str	x0, [sp, #128]
    2b48:	ldr	x0, [sp, #104]
    2b4c:	cmp	x0, x27
    2b50:	b.ls	2fb0 <ctf_bufopen_internal+0x800>  // b.plast
    2b54:	ldr	x0, [x19, #24]
    2b58:	cmp	x0, #0x10
    2b5c:	b.eq	2f9c <ctf_bufopen_internal+0x7ec>  // b.none
    2b60:	mov	x28, x25
    2b64:	ldr	x5, [x20, #16]
    2b68:	ldr	w0, [x28]
    2b6c:	mov	w1, w0
    2b70:	cmp	x5, w0, uxtw
    2b74:	b.ls	2f58 <ctf_bufopen_internal+0x7a8>  // b.plast
    2b78:	ldr	x5, [x20, #8]
    2b7c:	add	x5, x5, x1
    2b80:	cbz	w0, 2f90 <ctf_bufopen_internal+0x7e0>
    2b84:	ldrh	w0, [x28, #6]
    2b88:	str	w0, [sp, #116]
    2b8c:	cbz	w0, 2f90 <ctf_bufopen_internal+0x7e0>
    2b90:	ldr	x1, [sp, #120]
    2b94:	mov	x0, x5
    2b98:	str	x5, [sp, #136]
    2b9c:	bl	0 <strcmp>
    2ba0:	cbz	w0, 2f90 <ctf_bufopen_internal+0x7e0>
    2ba4:	ldp	x1, x5, [sp, #128]
    2ba8:	mov	x0, x5
    2bac:	bl	0 <strcmp>
    2bb0:	cbz	w0, 2f90 <ctf_bufopen_internal+0x7e0>
    2bb4:	ldrb	w0, [x28, #4]
    2bb8:	and	w0, w0, #0xf
    2bbc:	cmp	w0, #0x1
    2bc0:	b.eq	2f60 <ctf_bufopen_internal+0x7b0>  // b.none
    2bc4:	cmp	w0, #0x2
    2bc8:	b.ne	2f90 <ctf_bufopen_internal+0x7e0>  // b.any
    2bcc:	ldr	w0, [x21, #28]
    2bd0:	cmp	w0, w23
    2bd4:	b.ls	2f90 <ctf_bufopen_internal+0x7e0>  // b.plast
    2bd8:	ldr	x1, [x26]
    2bdc:	ldr	x0, [x26, #408]
    2be0:	ldr	x3, [x1, #16]
    2be4:	str	w23, [x27]
    2be8:	ldr	w1, [x0, w23, uxtw]
    2bec:	str	w1, [sp, #116]
    2bf0:	mov	w0, w1
    2bf4:	blr	x3
    2bf8:	mov	w28, w0
    2bfc:	ldr	w1, [sp, #116]
    2c00:	mov	w0, w1
    2c04:	ldr	x1, [x26]
    2c08:	ldr	x1, [x1]
    2c0c:	blr	x1
    2c10:	add	w1, w28, #0x2
    2c14:	orr	w28, w28, w0
    2c18:	cmp	w28, #0x0
    2c1c:	add	w0, w23, #0x4
    2c20:	add	w23, w23, w1, lsl #2
    2c24:	csel	w23, w23, w0, ne  // ne = any
    2c28:	ldr	x0, [x19, #24]
    2c2c:	add	x27, x27, #0x4
    2c30:	add	x25, x25, x0
    2c34:	b	2b48 <ctf_bufopen_internal+0x398>
    2c38:	mov	x0, x24
    2c3c:	mov	w1, #0x16                  	// #22
    2c40:	bl	0 <ctf_set_open_errno>
    2c44:	mov	x26, x0
    2c48:	mov	x0, x26
    2c4c:	ldp	x19, x20, [sp, #16]
    2c50:	ldp	x21, x22, [sp, #32]
    2c54:	ldp	x23, x24, [sp, #48]
    2c58:	ldp	x25, x26, [sp, #64]
    2c5c:	ldp	x29, x30, [sp], #176
    2c60:	ret
    2c64:	mov	x0, x24
    2c68:	mov	w1, #0x3f1                 	// #1009
    2c6c:	bl	0 <ctf_set_open_errno>
    2c70:	mov	x26, x0
    2c74:	mov	x0, x26
    2c78:	ldp	x19, x20, [sp, #16]
    2c7c:	ldp	x21, x22, [sp, #32]
    2c80:	ldp	x23, x24, [sp, #48]
    2c84:	ldp	x25, x26, [sp, #64]
    2c88:	ldp	x29, x30, [sp], #176
    2c8c:	ret
    2c90:	mov	x0, x24
    2c94:	mov	w1, #0x3f1                 	// #1009
    2c98:	bl	0 <ctf_set_open_errno>
    2c9c:	mov	x26, x0
    2ca0:	ldp	x27, x28, [sp, #80]
    2ca4:	b	2c48 <ctf_bufopen_internal+0x498>
    2ca8:	mov	x0, x24
    2cac:	mov	w1, #0x3ef                 	// #1007
    2cb0:	bl	0 <ctf_set_open_errno>
    2cb4:	mov	x26, x0
    2cb8:	mov	x0, x26
    2cbc:	ldp	x19, x20, [sp, #16]
    2cc0:	ldp	x21, x22, [sp, #32]
    2cc4:	ldp	x23, x24, [sp, #48]
    2cc8:	ldp	x25, x26, [sp, #64]
    2ccc:	ldp	x27, x28, [sp, #80]
    2cd0:	ldp	x29, x30, [sp], #176
    2cd4:	ret
    2cd8:	mov	x0, x24
    2cdc:	mov	w1, #0x3ec                 	// #1004
    2ce0:	bl	0 <ctf_set_open_errno>
    2ce4:	mov	x26, x0
    2ce8:	mov	x0, x26
    2cec:	ldp	x19, x20, [sp, #16]
    2cf0:	ldp	x21, x22, [sp, #32]
    2cf4:	ldp	x23, x24, [sp, #48]
    2cf8:	ldp	x25, x26, [sp, #64]
    2cfc:	ldp	x29, x30, [sp], #176
    2d00:	ret
    2d04:	ldp	w3, w0, [x21, #20]
    2d08:	ldp	w7, w5, [x21, #12]
    2d0c:	stp	wzr, w7, [x21, #12]
    2d10:	ldr	w2, [x21, #36]
    2d14:	ldur	x1, [x21, #28]
    2d18:	stp	w5, w3, [x21, #20]
    2d1c:	str	w0, [x21, #28]
    2d20:	str	w0, [x21, #36]
    2d24:	str	x1, [x21, #40]
    2d28:	ldr	w1, [x21, #32]
    2d2c:	str	w0, [x21, #32]
    2d30:	str	w2, [x21, #48]
    2d34:	b	28ec <ctf_bufopen_internal+0x13c>
    2d38:	ldur	q0, [x21, #20]
    2d3c:	rev	w1, w1
    2d40:	ldp	w8, w7, [x21, #4]
    2d44:	rev	w2, w2
    2d48:	rev32	v0.16b, v0.16b
    2d4c:	ldrh	w9, [x21]
    2d50:	ldp	w3, w0, [x21, #36]
    2d54:	rev16	w9, w9
    2d58:	ldr	w5, [x21, #12]
    2d5c:	rev	w8, w8
    2d60:	rev	w7, w7
    2d64:	rev	w3, w3
    2d68:	rev	w5, w5
    2d6c:	rev	w0, w0
    2d70:	strh	w9, [x21]
    2d74:	stp	w8, w7, [x21, #4]
    2d78:	str	w5, [x21, #12]
    2d7c:	stur	q0, [x21, #20]
    2d80:	stp	w3, w0, [x21, #36]
    2d84:	stp	w1, w2, [x21, #44]
    2d88:	b	28f4 <ctf_bufopen_internal+0x144>
    2d8c:	mov	x0, x24
    2d90:	mov	w1, #0x3ed                 	// #1005
    2d94:	bl	0 <ctf_set_open_errno>
    2d98:	mov	x26, x0
    2d9c:	b	2c48 <ctf_bufopen_internal+0x498>
    2da0:	mov	x0, x24
    2da4:	mov	w1, #0x3ee                 	// #1006
    2da8:	bl	0 <ctf_set_open_errno>
    2dac:	mov	x26, x0
    2db0:	b	2c48 <ctf_bufopen_internal+0x498>
    2db4:	adrp	x0, 0 <get_kind_v1>
    2db8:	add	x0, x0, #0x0
    2dbc:	bl	0 <ctf_dprintf>
    2dc0:	mov	x0, x24
    2dc4:	mov	w1, #0x40a                 	// #1034
    2dc8:	bl	0 <ctf_set_open_errno>
    2dcc:	mov	x26, x0
    2dd0:	ldp	x27, x28, [sp, #80]
    2dd4:	b	2c48 <ctf_bufopen_internal+0x498>
    2dd8:	mov	x0, x24
    2ddc:	mov	w1, #0x3ea                 	// #1002
    2de0:	bl	0 <ctf_set_open_errno>
    2de4:	mov	x26, x0
    2de8:	ldp	x27, x28, [sp, #80]
    2dec:	b	2c48 <ctf_bufopen_internal+0x498>
    2df0:	mov	w1, #0xf2df                	// #62175
    2df4:	cmp	w0, w1
    2df8:	b.ne	2c90 <ctf_bufopen_internal+0x4e0>  // b.any
    2dfc:	ldrb	w0, [x28, #2]
    2e00:	cmp	w0, #0x4
    2e04:	b.ne	2dd8 <ctf_bufopen_internal+0x628>  // b.any
    2e08:	mov	w0, #0x1                   	// #1
    2e0c:	cmp	x19, #0x0
    2e10:	mov	x27, #0x34                  	// #52
    2e14:	str	w0, [sp, #104]
    2e18:	cset	w0, ne  // ne = any
    2e1c:	str	w0, [sp, #112]
    2e20:	b	2890 <ctf_bufopen_internal+0xe0>
    2e24:	mov	x0, x26
    2e28:	bl	0 <free>
    2e2c:	mov	x0, x24
    2e30:	mov	w1, #0xc                   	// #12
    2e34:	bl	0 <ctf_set_open_errno>
    2e38:	mov	x26, x0
    2e3c:	ldp	x27, x28, [sp, #80]
    2e40:	b	2c48 <ctf_bufopen_internal+0x498>
    2e44:	mov	x0, x22
    2e48:	bl	0 <malloc>
    2e4c:	str	x0, [x26, #392]
    2e50:	mov	x28, x0
    2e54:	cbz	x0, 2e98 <ctf_bufopen_internal+0x6e8>
    2e58:	ldr	x1, [x23, #8]
    2e5c:	str	x0, [x26, #400]
    2e60:	mov	x2, x22
    2e64:	add	x1, x1, x27
    2e68:	bl	0 <memcpy>
    2e6c:	str	x28, [x26, #408]
    2e70:	b	29dc <ctf_bufopen_internal+0x22c>
    2e74:	mov	w23, #0xc                   	// #12
    2e78:	mov	w1, w23
    2e7c:	mov	x0, x24
    2e80:	bl	0 <ctf_set_open_errno>
    2e84:	mov	x0, x26
    2e88:	mov	x26, #0x0                   	// #0
    2e8c:	bl	24d0 <ctf_file_close>
    2e90:	ldp	x27, x28, [sp, #80]
    2e94:	b	2c48 <ctf_bufopen_internal+0x498>
    2e98:	mov	w23, #0x3f6                 	// #1014
    2e9c:	b	2e78 <ctf_bufopen_internal+0x6c8>
    2ea0:	mov	x0, x22
    2ea4:	bl	0 <malloc>
    2ea8:	str	x0, [x26, #392]
    2eac:	cbz	x0, 2e98 <ctf_bufopen_internal+0x6e8>
    2eb0:	ldp	x2, x3, [x23, #8]
    2eb4:	dup	v0.2d, x0
    2eb8:	and	w28, w28, #0xfffffffe
    2ebc:	add	x1, sp, #0x98
    2ec0:	strb	w28, [x21, #3]
    2ec4:	str	x22, [sp, #152]
    2ec8:	str	q0, [x26, #400]
    2ecc:	add	x2, x2, x27
    2ed0:	sub	x3, x3, x27
    2ed4:	bl	0 <uncompress>
    2ed8:	cbnz	w0, 2f00 <ctf_bufopen_internal+0x750>
    2edc:	ldr	x1, [sp, #152]
    2ee0:	ldr	x2, [x26, #416]
    2ee4:	cmp	x2, x1
    2ee8:	b.eq	29dc <ctf_bufopen_internal+0x22c>  // b.none
    2eec:	adrp	x0, 0 <get_kind_v1>
    2ef0:	mov	w23, #0x3ef                 	// #1007
    2ef4:	add	x0, x0, #0x0
    2ef8:	bl	0 <ctf_dprintf>
    2efc:	b	2e78 <ctf_bufopen_internal+0x6c8>
    2f00:	bl	0 <zError>
    2f04:	mov	w23, #0x3f7                 	// #1015
    2f08:	mov	x1, x0
    2f0c:	adrp	x0, 0 <get_kind_v1>
    2f10:	add	x0, x0, #0x0
    2f14:	bl	0 <ctf_dprintf>
    2f18:	b	2e78 <ctf_bufopen_internal+0x6c8>
    2f1c:	add	x1, x22, #0x100
    2f20:	str	x1, [x26, #56]
    2f24:	cbnz	x0, 2a94 <ctf_bufopen_internal+0x2e4>
    2f28:	b	2f38 <ctf_bufopen_internal+0x788>
    2f2c:	add	x1, x22, #0x100
    2f30:	str	x1, [x26, #24]
    2f34:	b	2a88 <ctf_bufopen_internal+0x2d8>
    2f38:	add	x0, x22, #0x100
    2f3c:	str	x0, [x26, #88]
    2f40:	b	2a94 <ctf_bufopen_internal+0x2e4>
    2f44:	ldr	x2, [x26, #392]
    2f48:	mov	x1, x21
    2f4c:	mov	x0, x26
    2f50:	bl	b0 <ctf_set_base>
    2f54:	b	2e78 <ctf_bufopen_internal+0x6c8>
    2f58:	add	x5, x22, #0x100
    2f5c:	b	2b80 <ctf_bufopen_internal+0x3d0>
    2f60:	ldr	w0, [x21, #24]
    2f64:	cmp	w0, w24
    2f68:	b.ls	2f90 <ctf_bufopen_internal+0x7e0>  // b.plast
    2f6c:	ldr	w1, [sp, #116]
    2f70:	mov	w0, #0xfff1                	// #65521
    2f74:	cmp	w1, w0
    2f78:	b.eq	2f88 <ctf_bufopen_internal+0x7d8>  // b.none
    2f7c:	str	w24, [x27]
    2f80:	add	w24, w24, #0x4
    2f84:	b	2c28 <ctf_bufopen_internal+0x478>
    2f88:	ldr	x0, [x28, #8]
    2f8c:	cbnz	x0, 2f7c <ctf_bufopen_internal+0x7cc>
    2f90:	mov	w0, #0xffffffff            	// #-1
    2f94:	str	w0, [x27]
    2f98:	b	2c28 <ctf_bufopen_internal+0x478>
    2f9c:	add	x1, sp, #0x98
    2fa0:	mov	x0, x25
    2fa4:	bl	0 <ctf_sym_to_elf64>
    2fa8:	mov	x28, x0
    2fac:	b	2b64 <ctf_bufopen_internal+0x3b4>
    2fb0:	ldr	x1, [x26, #432]
    2fb4:	adrp	x0, 0 <get_kind_v1>
    2fb8:	add	x0, x0, #0x0
    2fbc:	bl	0 <ctf_dprintf>
    2fc0:	adrp	x0, 0 <get_kind_v1>
    2fc4:	add	x0, x0, #0x0
    2fc8:	mov	x5, #0x4                   	// #4
    2fcc:	stp	x0, x5, [x26, #264]
    2fd0:	ldr	w0, [sp, #112]
    2fd4:	add	x22, x22, #0x100
    2fd8:	add	x9, x26, #0x98
    2fdc:	add	x7, x26, #0xa8
    2fe0:	add	x4, x26, #0xb8
    2fe4:	add	x3, x26, #0xc8
    2fe8:	adrp	x2, 0 <get_kind_v1>
    2fec:	adrp	x1, 0 <get_kind_v1>
    2ff0:	add	x2, x2, #0x0
    2ff4:	add	x1, x1, #0x0
    2ff8:	mov	x10, #0x6                   	// #6
    2ffc:	mov	x8, #0x5                   	// #5
    3000:	stp	x2, x10, [x26, #216]
    3004:	stp	x9, x1, [x26, #232]
    3008:	stp	x8, x7, [x26, #248]
    300c:	stp	x4, x22, [x26, #280]
    3010:	stp	xzr, x3, [x26, #296]
    3014:	stp	xzr, xzr, [x26, #312]
    3018:	str	xzr, [x26, #328]
    301c:	cbz	w0, 3048 <ctf_bufopen_internal+0x898>
    3020:	ldr	x0, [x19, #24]
    3024:	cmp	x0, #0x18
    3028:	b.eq	3048 <ctf_bufopen_internal+0x898>  // b.none
    302c:	mov	x0, x26
    3030:	mov	w1, #0x1                   	// #1
    3034:	bl	2760 <ctf_setmodel>
    3038:	mov	w0, #0x1                   	// #1
    303c:	ldp	x27, x28, [sp, #80]
    3040:	str	w0, [x26, #548]
    3044:	b	2c48 <ctf_bufopen_internal+0x498>
    3048:	mov	x0, x26
    304c:	mov	w1, #0x2                   	// #2
    3050:	bl	2760 <ctf_setmodel>
    3054:	b	3038 <ctf_bufopen_internal+0x888>

0000000000003058 <ctf_bufopen>:
    3058:	stp	x29, x30, [sp, #-176]!
    305c:	mov	x29, sp
    3060:	stp	x19, x20, [sp, #16]
    3064:	mov	x19, x1
    3068:	mov	x20, x2
    306c:	stp	x23, x24, [sp, #48]
    3070:	mov	x23, x0
    3074:	mov	x24, x3
    3078:	stp	x27, x28, [sp, #80]
    307c:	bl	0 <libctf_init_debug>
    3080:	cbz	x23, 34bc <ctf_bufopen+0x464>
    3084:	cbz	x19, 3530 <ctf_bufopen+0x4d8>
    3088:	cbz	x20, 34bc <ctf_bufopen+0x464>
    308c:	ldr	x0, [x19, #24]
    3090:	and	x0, x0, #0xfffffffffffffff7
    3094:	cmp	x0, #0x10
    3098:	b.ne	3568 <ctf_bufopen+0x510>  // b.any
    309c:	ldr	x0, [x19, #8]
    30a0:	cbz	x0, 3640 <ctf_bufopen+0x5e8>
    30a4:	ldr	x0, [x20, #8]
    30a8:	cbz	x0, 3670 <ctf_bufopen+0x618>
    30ac:	ldr	x0, [x23, #16]
    30b0:	cmp	x0, #0x3
    30b4:	b.ls	3540 <ctf_bufopen+0x4e8>  // b.plast
    30b8:	stp	x21, x22, [sp, #32]
    30bc:	adrp	x0, 0 <get_kind_v1>
    30c0:	add	x0, x0, #0x0
    30c4:	ldr	x22, [x23, #8]
    30c8:	stp	x25, x26, [sp, #64]
    30cc:	ldrh	w1, [x22]
    30d0:	ldrb	w2, [x22, #2]
    30d4:	bl	0 <ctf_dprintf>
    30d8:	ldrh	w0, [x22]
    30dc:	mov	w1, #0xdff2                	// #57330
    30e0:	cmp	w0, w1
    30e4:	b.ne	3684 <ctf_bufopen+0x62c>  // b.any
    30e8:	ldrb	w1, [x22, #2]
    30ec:	sub	w0, w1, #0x1
    30f0:	and	w0, w0, #0xff
    30f4:	cmp	w0, #0x3
    30f8:	b.hi	3654 <ctf_bufopen+0x5fc>  // b.pmore
    30fc:	cmp	x19, #0x0
    3100:	cset	w21, ne  // ne = any
    3104:	cmp	w21, #0x0
    3108:	ccmp	w1, #0x2, #0x2, ne  // ne = any
    310c:	b.ls	3618 <ctf_bufopen+0x5c0>  // b.plast
    3110:	cmp	w1, #0x4
    3114:	mov	x25, #0x34                  	// #52
    3118:	mov	x0, #0x28                  	// #40
    311c:	csel	x25, x25, x0, eq  // eq = none
    3120:	mov	w26, #0x0                   	// #0
    3124:	ldr	x0, [x23, #16]
    3128:	cmp	x0, x25
    312c:	b.cc	34e4 <ctf_bufopen+0x48c>  // b.lo, b.ul, b.last
    3130:	mov	x1, #0x1                   	// #1
    3134:	mov	x0, #0x2d8                 	// #728
    3138:	bl	0 <calloc>
    313c:	mov	x28, x0
    3140:	cbz	x0, 36b8 <ctf_bufopen+0x660>
    3144:	mov	x0, #0x34                  	// #52
    3148:	bl	0 <malloc>
    314c:	str	x0, [x28, #8]
    3150:	mov	x27, x0
    3154:	cbz	x0, 36b0 <ctf_bufopen+0x658>
    3158:	ldr	x1, [x23, #8]
    315c:	mov	x2, x25
    3160:	bl	0 <memcpy>
    3164:	ldrb	w0, [x22, #2]
    3168:	cmp	w0, #0x3
    316c:	b.ls	3590 <ctf_bufopen+0x538>  // b.plast
    3170:	ldp	w2, w1, [x27, #44]
    3174:	cbnz	w26, 35c4 <ctf_bufopen+0x56c>
    3178:	ldrb	w0, [x27, #3]
    317c:	add	w1, w1, w2
    3180:	strb	w0, [x28, #16]
    3184:	str	x1, [x28, #416]
    3188:	adrp	x0, 0 <get_kind_v1>
    318c:	add	x0, x0, #0x0
    3190:	bl	0 <ctf_dprintf>
    3194:	ldr	x22, [x28, #416]
    3198:	ldr	w0, [x27, #16]
    319c:	cmp	x22, w0, uxtw
    31a0:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31a4:	ldr	w1, [x27, #20]
    31a8:	cmp	x22, w1, uxtw
    31ac:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31b0:	ldr	w2, [x27, #24]
    31b4:	orr	w7, w1, w2
    31b8:	cmp	x22, w2, uxtw
    31bc:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31c0:	ldr	w3, [x27, #28]
    31c4:	cmp	x22, w3, uxtw
    31c8:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31cc:	ldr	w6, [x27, #32]
    31d0:	orr	w9, w3, w6
    31d4:	cmp	x22, w6, uxtw
    31d8:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31dc:	ldr	w8, [x27, #40]
    31e0:	cmp	x22, w8, uxtw
    31e4:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31e8:	ldr	w10, [x27, #44]
    31ec:	cmp	x22, w10, uxtw
    31f0:	b.cc	3500 <ctf_bufopen+0x4a8>  // b.lo, b.ul, b.last
    31f4:	cmp	w3, w8
    31f8:	csel	w11, w3, w8, ls  // ls = plast
    31fc:	cmp	w0, w1
    3200:	ccmp	w1, w2, #0x2, ls  // ls = plast
    3204:	ccmp	w11, w2, #0x0, ls  // ls = plast
    3208:	ccmp	w3, w6, #0x2, cs  // cs = hs, nlast
    320c:	b.hi	3500 <ctf_bufopen+0x4a8>  // b.pmore
    3210:	ldr	w2, [x27, #36]
    3214:	cmp	w8, w2
    3218:	ccmp	w6, w2, #0x2, cs  // cs = hs, nlast
    321c:	ccmp	w8, w10, #0x2, ls  // ls = plast
    3220:	b.hi	3500 <ctf_bufopen+0x4a8>  // b.pmore
    3224:	orr	w0, w0, w8
    3228:	orr	w1, w9, w7
    322c:	orr	w0, w0, w2
    3230:	and	w1, w1, #0x2
    3234:	and	w0, w0, #0x3
    3238:	orr	w0, w0, w1
    323c:	cbnz	w0, 3500 <ctf_bufopen+0x4a8>
    3240:	ldrb	w2, [x27, #3]
    3244:	tbnz	w2, #0, 36d4 <ctf_bufopen+0x67c>
    3248:	cbnz	w26, 37bc <ctf_bufopen+0x764>
    324c:	ldr	x0, [x23, #8]
    3250:	stp	x0, xzr, [x28, #392]
    3254:	add	x0, x0, x25
    3258:	str	x0, [x28, #408]
    325c:	ldrb	w1, [x27, #2]
    3260:	adrp	x22, 0 <get_kind_v1>
    3264:	add	x22, x22, #0x0
    3268:	mov	w3, #0x28                  	// #40
    326c:	add	x2, x22, #0x38
    3270:	str	w1, [x28, #560]
    3274:	mov	x0, x28
    3278:	umaddl	x1, w1, w3, x2
    327c:	str	x1, [x28]
    3280:	bl	0 <ctf_str_create_atoms>
    3284:	ldp	x2, x3, [x23]
    3288:	stp	x2, x3, [x28, #24]
    328c:	mov	w0, #0x7fffffff            	// #2147483647
    3290:	ldp	x2, x3, [x23, #16]
    3294:	stp	x2, x3, [x28, #40]
    3298:	str	w0, [x28, #544]
    329c:	cbz	w21, 32c0 <ctf_bufopen+0x268>
    32a0:	ldp	x0, x1, [x19]
    32a4:	stp	x0, x1, [x28, #56]
    32a8:	ldp	x0, x1, [x20]
    32ac:	stp	x0, x1, [x28, #88]
    32b0:	ldp	x0, x1, [x19, #16]
    32b4:	stp	x0, x1, [x28, #72]
    32b8:	ldp	x0, x1, [x20, #16]
    32bc:	stp	x0, x1, [x28, #104]
    32c0:	ldr	x0, [x28, #24]
    32c4:	cbz	x0, 32d4 <ctf_bufopen+0x27c>
    32c8:	bl	0 <strdup>
    32cc:	str	x0, [x28, #24]
    32d0:	cbz	x0, 37f0 <ctf_bufopen+0x798>
    32d4:	ldr	x0, [x28, #56]
    32d8:	cbz	x0, 32e8 <ctf_bufopen+0x290>
    32dc:	bl	0 <strdup>
    32e0:	str	x0, [x28, #56]
    32e4:	cbz	x0, 37f0 <ctf_bufopen+0x798>
    32e8:	ldr	x0, [x28, #88]
    32ec:	cbz	x0, 32fc <ctf_bufopen+0x2a4>
    32f0:	bl	0 <strdup>
    32f4:	str	x0, [x28, #88]
    32f8:	cbz	x0, 37f0 <ctf_bufopen+0x798>
    32fc:	ldr	x1, [x28, #24]
    3300:	cbz	x1, 376c <ctf_bufopen+0x714>
    3304:	ldr	x1, [x28, #56]
    3308:	cbz	x1, 375c <ctf_bufopen+0x704>
    330c:	cbz	x0, 379c <ctf_bufopen+0x744>
    3310:	cbz	x20, 3324 <ctf_bufopen+0x2cc>
    3314:	ldr	x0, [x20, #8]
    3318:	str	x0, [x28, #352]
    331c:	ldr	x0, [x20, #16]
    3320:	str	x0, [x28, #360]
    3324:	str	xzr, [x28, #128]
    3328:	cbz	w26, 3340 <ctf_bufopen+0x2e8>
    332c:	ldr	x1, [x28, #408]
    3330:	mov	x0, x27
    3334:	bl	340 <flip_ctf>
    3338:	mov	w23, w0
    333c:	cbnz	w0, 37a8 <ctf_bufopen+0x750>
    3340:	ldr	x2, [x28, #392]
    3344:	mov	x0, x28
    3348:	mov	x1, x27
    334c:	bl	b0 <ctf_set_base>
    3350:	ldr	w0, [x28, #552]
    3354:	tbnz	w0, #1, 38d4 <ctf_bufopen+0x87c>
    3358:	mov	x1, x27
    335c:	mov	x0, x28
    3360:	bl	ba0 <init_types>
    3364:	mov	w23, w0
    3368:	cbnz	w0, 3738 <ctf_bufopen+0x6e0>
    336c:	cbz	w21, 3860 <ctf_bufopen+0x808>
    3370:	ldp	x23, x0, [x19, #16]
    3374:	udiv	x23, x23, x0
    3378:	str	x23, [x28, #432]
    337c:	lsl	x23, x23, #2
    3380:	mov	x0, x23
    3384:	bl	0 <malloc>
    3388:	str	x0, [x28, #424]
    338c:	mov	x26, x0
    3390:	cbz	x0, 37f0 <ctf_bufopen+0x798>
    3394:	add	x0, x0, x23
    3398:	str	x0, [sp, #96]
    339c:	ldp	w24, w23, [x27, #20]
    33a0:	adrp	x0, 0 <get_kind_v1>
    33a4:	ldr	x25, [x19, #8]
    33a8:	add	x0, x0, #0x0
    33ac:	adrp	x1, 0 <get_kind_v1>
    33b0:	str	x0, [sp, #112]
    33b4:	add	x0, x1, #0x0
    33b8:	str	x0, [sp, #120]
    33bc:	ldr	x0, [sp, #96]
    33c0:	cmp	x0, x26
    33c4:	b.ls	3850 <ctf_bufopen+0x7f8>  // b.plast
    33c8:	ldr	x0, [x19, #24]
    33cc:	cmp	x0, #0x10
    33d0:	b.eq	383c <ctf_bufopen+0x7e4>  // b.none
    33d4:	mov	x3, x25
    33d8:	ldr	x6, [x20, #16]
    33dc:	ldr	w0, [x3]
    33e0:	mov	w1, w0
    33e4:	cmp	x6, w0, uxtw
    33e8:	b.ls	37f8 <ctf_bufopen+0x7a0>  // b.plast
    33ec:	ldr	x6, [x20, #8]
    33f0:	add	x6, x6, x1
    33f4:	cbz	w0, 3830 <ctf_bufopen+0x7d8>
    33f8:	ldrh	w0, [x3, #6]
    33fc:	str	w0, [sp, #108]
    3400:	str	x3, [sp, #136]
    3404:	cbz	w0, 3830 <ctf_bufopen+0x7d8>
    3408:	ldr	x1, [sp, #112]
    340c:	mov	x0, x6
    3410:	str	x6, [sp, #128]
    3414:	bl	0 <strcmp>
    3418:	cbz	w0, 3830 <ctf_bufopen+0x7d8>
    341c:	ldp	x1, x6, [sp, #120]
    3420:	mov	x0, x6
    3424:	bl	0 <strcmp>
    3428:	ldr	x3, [sp, #136]
    342c:	cbz	w0, 3830 <ctf_bufopen+0x7d8>
    3430:	ldrb	w0, [x3, #4]
    3434:	and	w0, w0, #0xf
    3438:	cmp	w0, #0x1
    343c:	b.eq	3800 <ctf_bufopen+0x7a8>  // b.none
    3440:	cmp	w0, #0x2
    3444:	b.ne	3830 <ctf_bufopen+0x7d8>  // b.any
    3448:	ldr	w0, [x27, #28]
    344c:	cmp	w0, w23
    3450:	b.ls	3830 <ctf_bufopen+0x7d8>  // b.plast
    3454:	ldr	x1, [x28]
    3458:	ldr	x0, [x28, #408]
    345c:	ldr	x3, [x1, #16]
    3460:	str	w23, [x26]
    3464:	ldr	w1, [x0, w23, uxtw]
    3468:	str	w1, [sp, #108]
    346c:	mov	w0, w1
    3470:	blr	x3
    3474:	mov	w2, w0
    3478:	ldr	w1, [sp, #108]
    347c:	str	w2, [sp, #108]
    3480:	mov	w0, w1
    3484:	ldr	x1, [x28]
    3488:	ldr	x1, [x1]
    348c:	blr	x1
    3490:	ldr	w2, [sp, #108]
    3494:	add	w1, w2, #0x2
    3498:	orr	w0, w2, w0
    349c:	cmp	w0, #0x0
    34a0:	add	w0, w23, #0x4
    34a4:	add	w23, w23, w1, lsl #2
    34a8:	csel	w23, w23, w0, ne  // ne = any
    34ac:	ldr	x0, [x19, #24]
    34b0:	add	x26, x26, #0x4
    34b4:	add	x25, x25, x0
    34b8:	b	33bc <ctf_bufopen+0x364>
    34bc:	mov	x0, x24
    34c0:	mov	w1, #0x16                  	// #22
    34c4:	bl	0 <ctf_set_open_errno>
    34c8:	mov	x28, x0
    34cc:	mov	x0, x28
    34d0:	ldp	x19, x20, [sp, #16]
    34d4:	ldp	x23, x24, [sp, #48]
    34d8:	ldp	x27, x28, [sp, #80]
    34dc:	ldp	x29, x30, [sp], #176
    34e0:	ret
    34e4:	mov	x0, x24
    34e8:	mov	w1, #0x3f1                 	// #1009
    34ec:	bl	0 <ctf_set_open_errno>
    34f0:	mov	x28, x0
    34f4:	ldp	x21, x22, [sp, #32]
    34f8:	ldp	x25, x26, [sp, #64]
    34fc:	b	34cc <ctf_bufopen+0x474>
    3500:	mov	x0, x24
    3504:	mov	w1, #0x3ef                 	// #1007
    3508:	bl	0 <ctf_set_open_errno>
    350c:	mov	x28, x0
    3510:	mov	x0, x28
    3514:	ldp	x19, x20, [sp, #16]
    3518:	ldp	x21, x22, [sp, #32]
    351c:	ldp	x23, x24, [sp, #48]
    3520:	ldp	x25, x26, [sp, #64]
    3524:	ldp	x27, x28, [sp, #80]
    3528:	ldp	x29, x30, [sp], #176
    352c:	ret
    3530:	cbnz	x20, 30a4 <ctf_bufopen+0x4c>
    3534:	ldr	x0, [x23, #16]
    3538:	cmp	x0, #0x3
    353c:	b.hi	30b8 <ctf_bufopen+0x60>  // b.pmore
    3540:	mov	x0, x24
    3544:	mov	w1, #0x3f1                 	// #1009
    3548:	bl	0 <ctf_set_open_errno>
    354c:	mov	x28, x0
    3550:	mov	x0, x28
    3554:	ldp	x19, x20, [sp, #16]
    3558:	ldp	x23, x24, [sp, #48]
    355c:	ldp	x27, x28, [sp, #80]
    3560:	ldp	x29, x30, [sp], #176
    3564:	ret
    3568:	mov	x0, x24
    356c:	mov	w1, #0x3ec                 	// #1004
    3570:	bl	0 <ctf_set_open_errno>
    3574:	mov	x28, x0
    3578:	mov	x0, x28
    357c:	ldp	x19, x20, [sp, #16]
    3580:	ldp	x23, x24, [sp, #48]
    3584:	ldp	x27, x28, [sp, #80]
    3588:	ldp	x29, x30, [sp], #176
    358c:	ret
    3590:	ldp	w3, w0, [x27, #20]
    3594:	ldp	w7, w6, [x27, #12]
    3598:	stp	wzr, w7, [x27, #12]
    359c:	ldr	w1, [x27, #36]
    35a0:	ldur	x2, [x27, #28]
    35a4:	stp	w6, w3, [x27, #20]
    35a8:	str	w0, [x27, #28]
    35ac:	str	w0, [x27, #36]
    35b0:	str	x2, [x27, #40]
    35b4:	ldr	w2, [x27, #32]
    35b8:	str	w0, [x27, #32]
    35bc:	str	w1, [x27, #48]
    35c0:	b	3174 <ctf_bufopen+0x11c>
    35c4:	ldur	q0, [x27, #20]
    35c8:	rev	w2, w2
    35cc:	ldp	w8, w7, [x27, #4]
    35d0:	rev	w1, w1
    35d4:	rev32	v0.16b, v0.16b
    35d8:	ldrh	w9, [x27]
    35dc:	ldp	w3, w0, [x27, #36]
    35e0:	rev16	w9, w9
    35e4:	ldr	w6, [x27, #12]
    35e8:	rev	w8, w8
    35ec:	rev	w7, w7
    35f0:	rev	w3, w3
    35f4:	rev	w6, w6
    35f8:	rev	w0, w0
    35fc:	strh	w9, [x27]
    3600:	stp	w8, w7, [x27, #4]
    3604:	str	w6, [x27, #12]
    3608:	stur	q0, [x27, #20]
    360c:	stp	w3, w0, [x27, #36]
    3610:	stp	w2, w1, [x27, #44]
    3614:	b	3178 <ctf_bufopen+0x120>
    3618:	adrp	x0, 0 <get_kind_v1>
    361c:	add	x0, x0, #0x0
    3620:	bl	0 <ctf_dprintf>
    3624:	mov	x0, x24
    3628:	mov	w1, #0x40a                 	// #1034
    362c:	bl	0 <ctf_set_open_errno>
    3630:	mov	x28, x0
    3634:	ldp	x21, x22, [sp, #32]
    3638:	ldp	x25, x26, [sp, #64]
    363c:	b	34cc <ctf_bufopen+0x474>
    3640:	mov	x0, x24
    3644:	mov	w1, #0x3ed                 	// #1005
    3648:	bl	0 <ctf_set_open_errno>
    364c:	mov	x28, x0
    3650:	b	34cc <ctf_bufopen+0x474>
    3654:	mov	x0, x24
    3658:	mov	w1, #0x3ea                 	// #1002
    365c:	bl	0 <ctf_set_open_errno>
    3660:	mov	x28, x0
    3664:	ldp	x21, x22, [sp, #32]
    3668:	ldp	x25, x26, [sp, #64]
    366c:	b	34cc <ctf_bufopen+0x474>
    3670:	mov	x0, x24
    3674:	mov	w1, #0x3ee                 	// #1006
    3678:	bl	0 <ctf_set_open_errno>
    367c:	mov	x28, x0
    3680:	b	34cc <ctf_bufopen+0x474>
    3684:	mov	w1, #0xf2df                	// #62175
    3688:	cmp	w0, w1
    368c:	b.ne	34e4 <ctf_bufopen+0x48c>  // b.any
    3690:	ldrb	w0, [x22, #2]
    3694:	cmp	w0, #0x4
    3698:	b.ne	3654 <ctf_bufopen+0x5fc>  // b.any
    369c:	cmp	x19, #0x0
    36a0:	mov	w26, #0x1                   	// #1
    36a4:	cset	w21, ne  // ne = any
    36a8:	mov	x25, #0x34                  	// #52
    36ac:	b	3124 <ctf_bufopen+0xcc>
    36b0:	mov	x0, x28
    36b4:	bl	0 <free>
    36b8:	mov	x0, x24
    36bc:	mov	w1, #0xc                   	// #12
    36c0:	bl	0 <ctf_set_open_errno>
    36c4:	mov	x28, x0
    36c8:	ldp	x21, x22, [sp, #32]
    36cc:	ldp	x25, x26, [sp, #64]
    36d0:	b	34cc <ctf_bufopen+0x474>
    36d4:	mov	x0, x22
    36d8:	str	w2, [sp, #96]
    36dc:	bl	0 <malloc>
    36e0:	str	x0, [x28, #392]
    36e4:	cbz	x0, 3794 <ctf_bufopen+0x73c>
    36e8:	ldr	w2, [sp, #96]
    36ec:	dup	v0.2d, x0
    36f0:	add	x1, sp, #0x98
    36f4:	str	x22, [sp, #152]
    36f8:	and	w4, w2, #0xfffffffe
    36fc:	strb	w4, [x27, #3]
    3700:	ldp	x2, x3, [x23, #8]
    3704:	str	q0, [x28, #400]
    3708:	add	x2, x2, x25
    370c:	sub	x3, x3, x25
    3710:	bl	0 <uncompress>
    3714:	cbnz	w0, 3778 <ctf_bufopen+0x720>
    3718:	ldr	x1, [sp, #152]
    371c:	ldr	x2, [x28, #416]
    3720:	cmp	x2, x1
    3724:	b.eq	325c <ctf_bufopen+0x204>  // b.none
    3728:	adrp	x0, 0 <get_kind_v1>
    372c:	mov	w23, #0x3ef                 	// #1007
    3730:	add	x0, x0, #0x0
    3734:	bl	0 <ctf_dprintf>
    3738:	mov	w1, w23
    373c:	mov	x0, x24
    3740:	bl	0 <ctf_set_open_errno>
    3744:	mov	x0, x28
    3748:	mov	x28, #0x0                   	// #0
    374c:	bl	24d0 <ctf_file_close>
    3750:	ldp	x21, x22, [sp, #32]
    3754:	ldp	x25, x26, [sp, #64]
    3758:	b	34cc <ctf_bufopen+0x474>
    375c:	add	x1, x22, #0x100
    3760:	str	x1, [x28, #56]
    3764:	cbnz	x0, 3310 <ctf_bufopen+0x2b8>
    3768:	b	379c <ctf_bufopen+0x744>
    376c:	add	x1, x22, #0x100
    3770:	str	x1, [x28, #24]
    3774:	b	3304 <ctf_bufopen+0x2ac>
    3778:	bl	0 <zError>
    377c:	mov	w23, #0x3f7                 	// #1015
    3780:	mov	x1, x0
    3784:	adrp	x0, 0 <get_kind_v1>
    3788:	add	x0, x0, #0x0
    378c:	bl	0 <ctf_dprintf>
    3790:	b	3738 <ctf_bufopen+0x6e0>
    3794:	mov	w23, #0x3f6                 	// #1014
    3798:	b	3738 <ctf_bufopen+0x6e0>
    379c:	add	x0, x22, #0x100
    37a0:	str	x0, [x28, #88]
    37a4:	b	3310 <ctf_bufopen+0x2b8>
    37a8:	ldr	x2, [x28, #392]
    37ac:	mov	x1, x27
    37b0:	mov	x0, x28
    37b4:	bl	b0 <ctf_set_base>
    37b8:	b	3738 <ctf_bufopen+0x6e0>
    37bc:	mov	x0, x22
    37c0:	bl	0 <malloc>
    37c4:	str	x0, [x28, #392]
    37c8:	cbz	x0, 3794 <ctf_bufopen+0x73c>
    37cc:	ldr	x1, [x23, #8]
    37d0:	str	x0, [x28, #400]
    37d4:	mov	x2, x22
    37d8:	str	x0, [sp, #96]
    37dc:	add	x1, x1, x25
    37e0:	bl	0 <memcpy>
    37e4:	ldr	x3, [sp, #96]
    37e8:	str	x3, [x28, #408]
    37ec:	b	325c <ctf_bufopen+0x204>
    37f0:	mov	w23, #0xc                   	// #12
    37f4:	b	3738 <ctf_bufopen+0x6e0>
    37f8:	add	x6, x22, #0x100
    37fc:	b	33f4 <ctf_bufopen+0x39c>
    3800:	ldr	w0, [x27, #24]
    3804:	cmp	w0, w24
    3808:	b.ls	3830 <ctf_bufopen+0x7d8>  // b.plast
    380c:	ldr	w1, [sp, #108]
    3810:	mov	w0, #0xfff1                	// #65521
    3814:	cmp	w1, w0
    3818:	b.eq	3828 <ctf_bufopen+0x7d0>  // b.none
    381c:	str	w24, [x26]
    3820:	add	w24, w24, #0x4
    3824:	b	34ac <ctf_bufopen+0x454>
    3828:	ldr	x0, [x3, #8]
    382c:	cbnz	x0, 381c <ctf_bufopen+0x7c4>
    3830:	mov	w0, #0xffffffff            	// #-1
    3834:	str	w0, [x26]
    3838:	b	34ac <ctf_bufopen+0x454>
    383c:	add	x1, sp, #0x98
    3840:	mov	x0, x25
    3844:	bl	0 <ctf_sym_to_elf64>
    3848:	mov	x3, x0
    384c:	b	33d8 <ctf_bufopen+0x380>
    3850:	ldr	x1, [x28, #432]
    3854:	adrp	x0, 0 <get_kind_v1>
    3858:	add	x0, x0, #0x0
    385c:	bl	0 <ctf_dprintf>
    3860:	add	x22, x22, #0x100
    3864:	add	x9, x28, #0x98
    3868:	add	x7, x28, #0xa8
    386c:	add	x5, x28, #0xb8
    3870:	add	x3, x28, #0xc8
    3874:	adrp	x2, 0 <get_kind_v1>
    3878:	adrp	x1, 0 <get_kind_v1>
    387c:	add	x2, x2, #0x0
    3880:	add	x1, x1, #0x0
    3884:	adrp	x0, 0 <get_kind_v1>
    3888:	mov	x10, #0x6                   	// #6
    388c:	add	x0, x0, #0x0
    3890:	mov	x8, #0x5                   	// #5
    3894:	mov	x6, #0x4                   	// #4
    3898:	stp	x2, x10, [x28, #216]
    389c:	stp	x9, x1, [x28, #232]
    38a0:	stp	x8, x7, [x28, #248]
    38a4:	stp	x0, x6, [x28, #264]
    38a8:	stp	x5, x22, [x28, #280]
    38ac:	stp	xzr, x3, [x28, #296]
    38b0:	stp	xzr, xzr, [x28, #312]
    38b4:	str	xzr, [x28, #328]
    38b8:	cbz	w21, 38e8 <ctf_bufopen+0x890>
    38bc:	ldr	x0, [x19, #24]
    38c0:	cmp	x0, #0x18
    38c4:	b.eq	38e8 <ctf_bufopen+0x890>  // b.none
    38c8:	mov	x0, x28
    38cc:	mov	w1, #0x1                   	// #1
    38d0:	bl	2760 <ctf_setmodel>
    38d4:	mov	w0, #0x1                   	// #1
    38d8:	ldp	x21, x22, [sp, #32]
    38dc:	ldp	x25, x26, [sp, #64]
    38e0:	str	w0, [x28, #548]
    38e4:	b	34cc <ctf_bufopen+0x474>
    38e8:	mov	x0, x28
    38ec:	mov	w1, #0x2                   	// #2
    38f0:	bl	2760 <ctf_setmodel>
    38f4:	b	38d4 <ctf_bufopen+0x87c>

00000000000038f8 <ctf_simple_open>:
    38f8:	stp	x29, x30, [sp, #-272]!
    38fc:	mov	x29, sp
    3900:	stp	x19, x20, [sp, #16]
    3904:	mov	x19, x0
    3908:	stp	x21, x22, [sp, #32]
    390c:	adrp	x21, 0 <get_kind_v1>
    3910:	mov	x22, x7
    3914:	stp	x25, x26, [sp, #64]
    3918:	add	x21, x21, #0x0
    391c:	mov	x25, x2
    3920:	stp	x27, x28, [sp, #80]
    3924:	mov	x28, x5
    3928:	cbz	x0, 3e30 <ctf_simple_open+0x538>
    392c:	add	x2, x21, #0x1b0
    3930:	mov	x0, #0x1                   	// #1
    3934:	stp	x2, x19, [sp, #176]
    3938:	stp	x1, x0, [sp, #192]
    393c:	cbz	x25, 3dd0 <ctf_simple_open+0x4d8>
    3940:	add	x19, sp, #0xb0
    3944:	add	x0, x21, #0x1b0
    3948:	stp	x0, x25, [sp, #208]
    394c:	stp	x3, x4, [sp, #224]
    3950:	cbz	x28, 3e34 <ctf_simple_open+0x53c>
    3954:	mov	x20, #0x1                   	// #1
    3958:	stp	x0, x28, [sp, #240]
    395c:	stp	x6, x20, [sp, #256]
    3960:	bl	0 <libctf_init_debug>
    3964:	cbz	x19, 3e38 <ctf_simple_open+0x540>
    3968:	ldr	x0, [sp, #232]
    396c:	and	x0, x0, #0xfffffffffffffff7
    3970:	cmp	x0, #0x10
    3974:	b.ne	3ea8 <ctf_simple_open+0x5b0>  // b.any
    3978:	ldr	x0, [sp, #216]
    397c:	cbz	x0, 3f80 <ctf_simple_open+0x688>
    3980:	add	x25, sp, #0xd0
    3984:	add	x28, sp, #0xf0
    3988:	stp	x23, x24, [sp, #48]
    398c:	ldr	x23, [x19, #16]
    3990:	cmp	x23, #0x3
    3994:	b.ls	3e00 <ctf_simple_open+0x508>  // b.plast
    3998:	ldr	x27, [x19, #8]
    399c:	adrp	x0, 0 <get_kind_v1>
    39a0:	add	x0, x0, #0x0
    39a4:	ldrh	w1, [x27]
    39a8:	ldrb	w2, [x27, #2]
    39ac:	bl	0 <ctf_dprintf>
    39b0:	ldrh	w0, [x27]
    39b4:	mov	w1, #0xdff2                	// #57330
    39b8:	cmp	w0, w1
    39bc:	b.ne	3f94 <ctf_simple_open+0x69c>  // b.any
    39c0:	ldrb	w1, [x27, #2]
    39c4:	sub	w0, w1, #0x1
    39c8:	and	w0, w0, #0xff
    39cc:	cmp	w0, #0x3
    39d0:	b.hi	3fb8 <ctf_simple_open+0x6c0>  // b.pmore
    39d4:	cmp	w20, #0x0
    39d8:	ccmp	w1, #0x2, #0x2, ne  // ne = any
    39dc:	b.ls	3f5c <ctf_simple_open+0x664>  // b.plast
    39e0:	cmp	w1, #0x4
    39e4:	mov	x24, #0x34                  	// #52
    39e8:	mov	x0, #0x28                  	// #40
    39ec:	csel	x24, x24, x0, eq  // eq = none
    39f0:	str	wzr, [sp, #96]
    39f4:	cmp	x23, x24
    39f8:	b.cc	3e00 <ctf_simple_open+0x508>  // b.lo, b.ul, b.last
    39fc:	mov	x1, #0x1                   	// #1
    3a00:	mov	x0, #0x2d8                 	// #728
    3a04:	bl	0 <calloc>
    3a08:	mov	x20, x0
    3a0c:	cbz	x0, 3fd8 <ctf_simple_open+0x6e0>
    3a10:	mov	x0, #0x34                  	// #52
    3a14:	bl	0 <malloc>
    3a18:	str	x0, [x20, #8]
    3a1c:	cbz	x0, 3fd0 <ctf_simple_open+0x6d8>
    3a20:	mov	x2, x24
    3a24:	mov	x1, x27
    3a28:	str	x0, [sp, #104]
    3a2c:	bl	0 <memcpy>
    3a30:	ldrb	w0, [x27, #2]
    3a34:	ldr	x4, [sp, #104]
    3a38:	cmp	w0, #0x3
    3a3c:	b.ls	3ed4 <ctf_simple_open+0x5dc>  // b.plast
    3a40:	ldp	w2, w1, [x4, #44]
    3a44:	ldr	w0, [sp, #96]
    3a48:	cbnz	w0, 3f08 <ctf_simple_open+0x610>
    3a4c:	ldrb	w0, [x4, #3]
    3a50:	add	w1, w1, w2
    3a54:	strb	w0, [x20, #16]
    3a58:	str	x1, [x20, #416]
    3a5c:	adrp	x0, 0 <get_kind_v1>
    3a60:	add	x0, x0, #0x0
    3a64:	str	x4, [sp, #104]
    3a68:	bl	0 <ctf_dprintf>
    3a6c:	ldr	x4, [sp, #104]
    3a70:	ldr	x26, [x20, #416]
    3a74:	ldr	w0, [x4, #16]
    3a78:	cmp	x26, w0, uxtw
    3a7c:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3a80:	ldr	w1, [x4, #20]
    3a84:	cmp	x26, w1, uxtw
    3a88:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3a8c:	ldr	w2, [x4, #24]
    3a90:	orr	w7, w1, w2
    3a94:	cmp	x26, w2, uxtw
    3a98:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3a9c:	ldr	w3, [x4, #28]
    3aa0:	cmp	x26, w3, uxtw
    3aa4:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3aa8:	ldr	w6, [x4, #32]
    3aac:	orr	w10, w3, w6
    3ab0:	cmp	x26, w6, uxtw
    3ab4:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3ab8:	ldr	w9, [x4, #40]
    3abc:	cmp	x26, w9, uxtw
    3ac0:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3ac4:	ldr	w11, [x4, #44]
    3ac8:	cmp	x26, w11, uxtw
    3acc:	b.cc	3e78 <ctf_simple_open+0x580>  // b.lo, b.ul, b.last
    3ad0:	cmp	w3, w9
    3ad4:	csel	w12, w3, w9, ls  // ls = plast
    3ad8:	cmp	w0, w1
    3adc:	ccmp	w1, w2, #0x2, ls  // ls = plast
    3ae0:	ccmp	w2, w12, #0x2, ls  // ls = plast
    3ae4:	ccmp	w3, w6, #0x2, ls  // ls = plast
    3ae8:	b.hi	3e78 <ctf_simple_open+0x580>  // b.pmore
    3aec:	ldr	w2, [x4, #36]
    3af0:	cmp	w6, w2
    3af4:	ccmp	w9, w2, #0x0, ls  // ls = plast
    3af8:	ccmp	w9, w11, #0x2, cs  // cs = hs, nlast
    3afc:	b.hi	3e78 <ctf_simple_open+0x580>  // b.pmore
    3b00:	orr	w0, w0, w9
    3b04:	orr	w1, w10, w7
    3b08:	orr	w0, w0, w2
    3b0c:	and	w1, w1, #0x2
    3b10:	and	w0, w0, #0x3
    3b14:	orr	w0, w0, w1
    3b18:	cbnz	w0, 3e78 <ctf_simple_open+0x580>
    3b1c:	ldrb	w2, [x4, #3]
    3b20:	tbnz	w2, #0, 4024 <ctf_simple_open+0x72c>
    3b24:	ldr	w0, [sp, #96]
    3b28:	cbnz	w0, 3ff0 <ctf_simple_open+0x6f8>
    3b2c:	add	x24, x27, x24
    3b30:	stp	x27, xzr, [x20, #392]
    3b34:	str	x24, [x20, #408]
    3b38:	ldrb	w1, [x4, #2]
    3b3c:	add	x2, x21, #0x38
    3b40:	mov	w3, #0x28                  	// #40
    3b44:	str	w1, [x20, #560]
    3b48:	mov	x0, x20
    3b4c:	str	x4, [sp, #104]
    3b50:	umaddl	x1, w1, w3, x2
    3b54:	str	x1, [x20]
    3b58:	bl	0 <ctf_str_create_atoms>
    3b5c:	ldp	x0, x1, [x19]
    3b60:	stp	x0, x1, [x20, #24]
    3b64:	mov	w2, #0x7fffffff            	// #2147483647
    3b68:	ldp	x0, x1, [x19, #16]
    3b6c:	stp	x0, x1, [x20, #40]
    3b70:	str	w2, [x20, #544]
    3b74:	ldr	x4, [sp, #104]
    3b78:	cbz	x25, 3b9c <ctf_simple_open+0x2a4>
    3b7c:	ldp	x0, x1, [x25]
    3b80:	stp	x0, x1, [x20, #56]
    3b84:	ldp	x0, x1, [x28]
    3b88:	stp	x0, x1, [x20, #88]
    3b8c:	ldp	x0, x1, [x25, #16]
    3b90:	stp	x0, x1, [x20, #72]
    3b94:	ldp	x0, x1, [x28, #16]
    3b98:	stp	x0, x1, [x20, #104]
    3b9c:	ldr	x0, [x20, #24]
    3ba0:	cbz	x0, 3bb8 <ctf_simple_open+0x2c0>
    3ba4:	str	x4, [sp, #104]
    3ba8:	bl	0 <strdup>
    3bac:	str	x0, [x20, #24]
    3bb0:	ldr	x4, [sp, #104]
    3bb4:	cbz	x0, 40d4 <ctf_simple_open+0x7dc>
    3bb8:	ldr	x0, [x20, #56]
    3bbc:	cbz	x0, 3bd4 <ctf_simple_open+0x2dc>
    3bc0:	str	x4, [sp, #104]
    3bc4:	bl	0 <strdup>
    3bc8:	str	x0, [x20, #56]
    3bcc:	ldr	x4, [sp, #104]
    3bd0:	cbz	x0, 40d4 <ctf_simple_open+0x7dc>
    3bd4:	ldr	x0, [x20, #88]
    3bd8:	cbz	x0, 3bf0 <ctf_simple_open+0x2f8>
    3bdc:	str	x4, [sp, #104]
    3be0:	bl	0 <strdup>
    3be4:	str	x0, [x20, #88]
    3be8:	cbz	x0, 40d4 <ctf_simple_open+0x7dc>
    3bec:	ldr	x4, [sp, #104]
    3bf0:	ldr	x1, [x20, #24]
    3bf4:	cbz	x1, 40ec <ctf_simple_open+0x7f4>
    3bf8:	ldr	x1, [x20, #56]
    3bfc:	cbz	x1, 40dc <ctf_simple_open+0x7e4>
    3c00:	cbz	x0, 40f8 <ctf_simple_open+0x800>
    3c04:	cbz	x28, 3c18 <ctf_simple_open+0x320>
    3c08:	ldr	x0, [x28, #8]
    3c0c:	str	x0, [x20, #352]
    3c10:	ldr	x0, [x28, #16]
    3c14:	str	x0, [x20, #360]
    3c18:	ldr	w0, [sp, #96]
    3c1c:	str	xzr, [x20, #128]
    3c20:	cbz	w0, 3c40 <ctf_simple_open+0x348>
    3c24:	ldr	x1, [x20, #408]
    3c28:	mov	x0, x4
    3c2c:	str	x4, [sp, #96]
    3c30:	bl	340 <flip_ctf>
    3c34:	mov	w19, w0
    3c38:	ldr	x4, [sp, #96]
    3c3c:	cbnz	w0, 4104 <ctf_simple_open+0x80c>
    3c40:	ldr	x2, [x20, #392]
    3c44:	mov	x1, x4
    3c48:	mov	x0, x20
    3c4c:	str	x4, [sp, #96]
    3c50:	bl	b0 <ctf_set_base>
    3c54:	ldr	w0, [x20, #552]
    3c58:	ldr	x4, [sp, #96]
    3c5c:	tbnz	w0, #1, 41fc <ctf_simple_open+0x904>
    3c60:	mov	x1, x4
    3c64:	mov	x0, x20
    3c68:	str	x4, [sp, #112]
    3c6c:	bl	ba0 <init_types>
    3c70:	mov	w19, w0
    3c74:	cbnz	w0, 4090 <ctf_simple_open+0x798>
    3c78:	cbz	x25, 4188 <ctf_simple_open+0x890>
    3c7c:	ldp	x19, x0, [x25, #16]
    3c80:	str	x0, [sp, #96]
    3c84:	udiv	x19, x19, x0
    3c88:	str	x19, [x20, #432]
    3c8c:	lsl	x19, x19, #2
    3c90:	mov	x0, x19
    3c94:	bl	0 <malloc>
    3c98:	str	x0, [x20, #424]
    3c9c:	mov	x27, x0
    3ca0:	cbz	x0, 40d4 <ctf_simple_open+0x7dc>
    3ca4:	ldr	x4, [sp, #112]
    3ca8:	add	x0, x0, x19
    3cac:	ldr	x24, [x25, #8]
    3cb0:	adrp	x26, 0 <get_kind_v1>
    3cb4:	ldp	w23, w22, [x4, #20]
    3cb8:	add	x26, x26, #0x0
    3cbc:	str	x0, [sp, #104]
    3cc0:	adrp	x0, 0 <get_kind_v1>
    3cc4:	add	x0, x0, #0x0
    3cc8:	str	x0, [sp, #120]
    3ccc:	ldr	x0, [sp, #104]
    3cd0:	cmp	x0, x27
    3cd4:	b.ls	4178 <ctf_simple_open+0x880>  // b.plast
    3cd8:	ldr	x0, [sp, #96]
    3cdc:	cmp	x0, #0x10
    3ce0:	b.eq	415c <ctf_simple_open+0x864>  // b.none
    3ce4:	mov	x19, x24
    3ce8:	ldr	x6, [x28, #16]
    3cec:	ldr	w0, [x19]
    3cf0:	mov	w1, w0
    3cf4:	cmp	x6, w0, uxtw
    3cf8:	b.ls	4118 <ctf_simple_open+0x820>  // b.plast
    3cfc:	ldr	x6, [x28, #8]
    3d00:	add	x6, x6, x1
    3d04:	cbz	w0, 4150 <ctf_simple_open+0x858>
    3d08:	ldrh	w0, [x19, #6]
    3d0c:	str	w0, [sp, #112]
    3d10:	cbz	w0, 4150 <ctf_simple_open+0x858>
    3d14:	mov	x1, x26
    3d18:	mov	x0, x6
    3d1c:	stp	x4, x6, [sp, #128]
    3d20:	bl	0 <strcmp>
    3d24:	ldr	x4, [sp, #128]
    3d28:	cbz	w0, 4150 <ctf_simple_open+0x858>
    3d2c:	ldr	x1, [sp, #120]
    3d30:	ldr	x6, [sp, #136]
    3d34:	mov	x0, x6
    3d38:	bl	0 <strcmp>
    3d3c:	ldr	x4, [sp, #128]
    3d40:	cbz	w0, 4150 <ctf_simple_open+0x858>
    3d44:	ldrb	w0, [x19, #4]
    3d48:	and	w0, w0, #0xf
    3d4c:	cmp	w0, #0x1
    3d50:	b.eq	4120 <ctf_simple_open+0x828>  // b.none
    3d54:	cmp	w0, #0x2
    3d58:	b.ne	4150 <ctf_simple_open+0x858>  // b.any
    3d5c:	ldr	w0, [x4, #28]
    3d60:	cmp	w0, w22
    3d64:	b.ls	4150 <ctf_simple_open+0x858>  // b.plast
    3d68:	ldr	x1, [x20]
    3d6c:	str	x4, [sp, #128]
    3d70:	ldr	x0, [x20, #408]
    3d74:	ldr	x3, [x1, #16]
    3d78:	str	w22, [x27]
    3d7c:	ldr	w1, [x0, w22, uxtw]
    3d80:	str	w1, [sp, #112]
    3d84:	mov	w0, w1
    3d88:	blr	x3
    3d8c:	mov	w19, w0
    3d90:	ldr	w1, [sp, #112]
    3d94:	mov	w0, w1
    3d98:	ldr	x1, [x20]
    3d9c:	ldr	x1, [x1]
    3da0:	blr	x1
    3da4:	orr	w0, w19, w0
    3da8:	add	w1, w19, #0x2
    3dac:	cmp	w0, #0x0
    3db0:	add	w0, w22, #0x4
    3db4:	add	w22, w22, w1, lsl #2
    3db8:	ldr	x4, [sp, #128]
    3dbc:	csel	w22, w22, w0, ne  // ne = any
    3dc0:	ldr	x0, [sp, #96]
    3dc4:	add	x27, x27, #0x4
    3dc8:	add	x24, x24, x0
    3dcc:	b	3ccc <ctf_simple_open+0x3d4>
    3dd0:	stp	x23, x24, [sp, #48]
    3dd4:	cbz	x5, 3e64 <ctf_simple_open+0x56c>
    3dd8:	add	x19, sp, #0xb0
    3ddc:	stp	x2, x5, [sp, #240]
    3de0:	add	x28, sp, #0xf0
    3de4:	stp	x6, x0, [sp, #256]
    3de8:	bl	0 <libctf_init_debug>
    3dec:	mov	w20, #0x0                   	// #0
    3df0:	ldr	x23, [x19, #16]
    3df4:	cmp	x23, #0x3
    3df8:	b.hi	3998 <ctf_simple_open+0xa0>  // b.pmore
    3dfc:	nop
    3e00:	mov	x0, x22
    3e04:	mov	w1, #0x3f1                 	// #1009
    3e08:	bl	0 <ctf_set_open_errno>
    3e0c:	mov	x20, x0
    3e10:	ldp	x23, x24, [sp, #48]
    3e14:	mov	x0, x20
    3e18:	ldp	x19, x20, [sp, #16]
    3e1c:	ldp	x21, x22, [sp, #32]
    3e20:	ldp	x25, x26, [sp, #64]
    3e24:	ldp	x27, x28, [sp, #80]
    3e28:	ldp	x29, x30, [sp], #272
    3e2c:	ret
    3e30:	cbnz	x2, 3944 <ctf_simple_open+0x4c>
    3e34:	bl	0 <libctf_init_debug>
    3e38:	mov	x0, x22
    3e3c:	mov	w1, #0x16                  	// #22
    3e40:	bl	0 <ctf_set_open_errno>
    3e44:	mov	x20, x0
    3e48:	mov	x0, x20
    3e4c:	ldp	x19, x20, [sp, #16]
    3e50:	ldp	x21, x22, [sp, #32]
    3e54:	ldp	x25, x26, [sp, #64]
    3e58:	ldp	x27, x28, [sp, #80]
    3e5c:	ldp	x29, x30, [sp], #272
    3e60:	ret
    3e64:	mov	x25, x28
    3e68:	add	x19, sp, #0xb0
    3e6c:	mov	w20, #0x0                   	// #0
    3e70:	bl	0 <libctf_init_debug>
    3e74:	b	398c <ctf_simple_open+0x94>
    3e78:	mov	x0, x22
    3e7c:	mov	w1, #0x3ef                 	// #1007
    3e80:	bl	0 <ctf_set_open_errno>
    3e84:	mov	x20, x0
    3e88:	mov	x0, x20
    3e8c:	ldp	x19, x20, [sp, #16]
    3e90:	ldp	x21, x22, [sp, #32]
    3e94:	ldp	x23, x24, [sp, #48]
    3e98:	ldp	x25, x26, [sp, #64]
    3e9c:	ldp	x27, x28, [sp, #80]
    3ea0:	ldp	x29, x30, [sp], #272
    3ea4:	ret
    3ea8:	mov	x0, x22
    3eac:	mov	w1, #0x3ec                 	// #1004
    3eb0:	bl	0 <ctf_set_open_errno>
    3eb4:	mov	x20, x0
    3eb8:	mov	x0, x20
    3ebc:	ldp	x19, x20, [sp, #16]
    3ec0:	ldp	x21, x22, [sp, #32]
    3ec4:	ldp	x25, x26, [sp, #64]
    3ec8:	ldp	x27, x28, [sp, #80]
    3ecc:	ldp	x29, x30, [sp], #272
    3ed0:	ret
    3ed4:	ldp	w3, w0, [x4, #20]
    3ed8:	ldp	w7, w6, [x4, #12]
    3edc:	stp	wzr, w7, [x4, #12]
    3ee0:	ldr	w1, [x4, #36]
    3ee4:	ldur	x2, [x4, #28]
    3ee8:	stp	w6, w3, [x4, #20]
    3eec:	str	w0, [x4, #28]
    3ef0:	str	w0, [x4, #36]
    3ef4:	str	x2, [x4, #40]
    3ef8:	ldr	w2, [x4, #32]
    3efc:	str	w0, [x4, #32]
    3f00:	str	w1, [x4, #48]
    3f04:	b	3a44 <ctf_simple_open+0x14c>
    3f08:	ldur	q0, [x4, #20]
    3f0c:	rev	w2, w2
    3f10:	ldp	w9, w7, [x4, #4]
    3f14:	rev	w1, w1
    3f18:	rev32	v0.16b, v0.16b
    3f1c:	ldrh	w10, [x4]
    3f20:	ldp	w3, w0, [x4, #36]
    3f24:	rev16	w10, w10
    3f28:	ldr	w6, [x4, #12]
    3f2c:	rev	w9, w9
    3f30:	rev	w7, w7
    3f34:	rev	w3, w3
    3f38:	rev	w6, w6
    3f3c:	rev	w0, w0
    3f40:	strh	w10, [x4]
    3f44:	stp	w9, w7, [x4, #4]
    3f48:	str	w6, [x4, #12]
    3f4c:	stur	q0, [x4, #20]
    3f50:	stp	w3, w0, [x4, #36]
    3f54:	stp	w2, w1, [x4, #44]
    3f58:	b	3a4c <ctf_simple_open+0x154>
    3f5c:	adrp	x0, 0 <get_kind_v1>
    3f60:	add	x0, x0, #0x0
    3f64:	bl	0 <ctf_dprintf>
    3f68:	mov	x0, x22
    3f6c:	mov	w1, #0x40a                 	// #1034
    3f70:	bl	0 <ctf_set_open_errno>
    3f74:	mov	x20, x0
    3f78:	ldp	x23, x24, [sp, #48]
    3f7c:	b	3e14 <ctf_simple_open+0x51c>
    3f80:	mov	x0, x22
    3f84:	mov	w1, #0x3ed                 	// #1005
    3f88:	bl	0 <ctf_set_open_errno>
    3f8c:	mov	x20, x0
    3f90:	b	3e14 <ctf_simple_open+0x51c>
    3f94:	mov	w1, #0xf2df                	// #62175
    3f98:	cmp	w0, w1
    3f9c:	b.ne	3e00 <ctf_simple_open+0x508>  // b.any
    3fa0:	ldrb	w0, [x27, #2]
    3fa4:	mov	w1, #0x1                   	// #1
    3fa8:	str	w1, [sp, #96]
    3fac:	mov	x24, #0x34                  	// #52
    3fb0:	cmp	w0, #0x4
    3fb4:	b.eq	39f4 <ctf_simple_open+0xfc>  // b.none
    3fb8:	mov	x0, x22
    3fbc:	mov	w1, #0x3ea                 	// #1002
    3fc0:	bl	0 <ctf_set_open_errno>
    3fc4:	mov	x20, x0
    3fc8:	ldp	x23, x24, [sp, #48]
    3fcc:	b	3e14 <ctf_simple_open+0x51c>
    3fd0:	mov	x0, x20
    3fd4:	bl	0 <free>
    3fd8:	mov	x0, x22
    3fdc:	mov	w1, #0xc                   	// #12
    3fe0:	bl	0 <ctf_set_open_errno>
    3fe4:	mov	x20, x0
    3fe8:	ldp	x23, x24, [sp, #48]
    3fec:	b	3e14 <ctf_simple_open+0x51c>
    3ff0:	mov	x0, x26
    3ff4:	str	x4, [sp, #104]
    3ff8:	bl	0 <malloc>
    3ffc:	str	x0, [x20, #392]
    4000:	mov	x23, x0
    4004:	cbz	x0, 40b0 <ctf_simple_open+0x7b8>
    4008:	str	x0, [x20, #400]
    400c:	mov	x2, x26
    4010:	add	x1, x27, x24
    4014:	bl	0 <memcpy>
    4018:	str	x23, [x20, #408]
    401c:	ldr	x4, [sp, #104]
    4020:	b	3b38 <ctf_simple_open+0x240>
    4024:	mov	x0, x26
    4028:	str	x4, [sp, #104]
    402c:	str	w2, [sp, #112]
    4030:	bl	0 <malloc>
    4034:	str	x0, [x20, #392]
    4038:	cbz	x0, 40b0 <ctf_simple_open+0x7b8>
    403c:	ldr	x4, [sp, #104]
    4040:	dup	v0.2d, x0
    4044:	ldr	w2, [sp, #112]
    4048:	sub	x3, x23, x24
    404c:	add	x1, sp, #0x98
    4050:	str	x26, [sp, #152]
    4054:	and	w5, w2, #0xfffffffe
    4058:	strb	w5, [x4, #3]
    405c:	add	x2, x27, x24
    4060:	str	q0, [x20, #400]
    4064:	bl	0 <uncompress>
    4068:	ldr	x4, [sp, #104]
    406c:	cbnz	w0, 40b8 <ctf_simple_open+0x7c0>
    4070:	ldr	x1, [sp, #152]
    4074:	ldr	x2, [x20, #416]
    4078:	cmp	x2, x1
    407c:	b.eq	3b38 <ctf_simple_open+0x240>  // b.none
    4080:	adrp	x0, 0 <get_kind_v1>
    4084:	mov	w19, #0x3ef                 	// #1007
    4088:	add	x0, x0, #0x0
    408c:	bl	0 <ctf_dprintf>
    4090:	mov	w1, w19
    4094:	mov	x0, x22
    4098:	bl	0 <ctf_set_open_errno>
    409c:	mov	x0, x20
    40a0:	mov	x20, #0x0                   	// #0
    40a4:	bl	24d0 <ctf_file_close>
    40a8:	ldp	x23, x24, [sp, #48]
    40ac:	b	3e14 <ctf_simple_open+0x51c>
    40b0:	mov	w19, #0x3f6                 	// #1014
    40b4:	b	4090 <ctf_simple_open+0x798>
    40b8:	bl	0 <zError>
    40bc:	mov	w19, #0x3f7                 	// #1015
    40c0:	mov	x1, x0
    40c4:	adrp	x0, 0 <get_kind_v1>
    40c8:	add	x0, x0, #0x0
    40cc:	bl	0 <ctf_dprintf>
    40d0:	b	4090 <ctf_simple_open+0x798>
    40d4:	mov	w19, #0xc                   	// #12
    40d8:	b	4090 <ctf_simple_open+0x798>
    40dc:	add	x1, x21, #0x100
    40e0:	str	x1, [x20, #56]
    40e4:	cbnz	x0, 3c04 <ctf_simple_open+0x30c>
    40e8:	b	40f8 <ctf_simple_open+0x800>
    40ec:	add	x1, x21, #0x100
    40f0:	str	x1, [x20, #24]
    40f4:	b	3bf8 <ctf_simple_open+0x300>
    40f8:	add	x0, x21, #0x100
    40fc:	str	x0, [x20, #88]
    4100:	b	3c04 <ctf_simple_open+0x30c>
    4104:	ldr	x2, [x20, #392]
    4108:	mov	x1, x4
    410c:	mov	x0, x20
    4110:	bl	b0 <ctf_set_base>
    4114:	b	4090 <ctf_simple_open+0x798>
    4118:	add	x6, x21, #0x100
    411c:	b	3d04 <ctf_simple_open+0x40c>
    4120:	ldr	w0, [x4, #24]
    4124:	cmp	w0, w23
    4128:	b.ls	4150 <ctf_simple_open+0x858>  // b.plast
    412c:	ldr	w1, [sp, #112]
    4130:	mov	w0, #0xfff1                	// #65521
    4134:	cmp	w1, w0
    4138:	b.eq	4148 <ctf_simple_open+0x850>  // b.none
    413c:	str	w23, [x27]
    4140:	add	w23, w23, #0x4
    4144:	b	3dc0 <ctf_simple_open+0x4c8>
    4148:	ldr	x0, [x19, #8]
    414c:	cbnz	x0, 413c <ctf_simple_open+0x844>
    4150:	mov	w0, #0xffffffff            	// #-1
    4154:	str	w0, [x27]
    4158:	b	3dc0 <ctf_simple_open+0x4c8>
    415c:	add	x1, sp, #0x98
    4160:	mov	x0, x24
    4164:	str	x4, [sp, #112]
    4168:	bl	0 <ctf_sym_to_elf64>
    416c:	mov	x19, x0
    4170:	ldr	x4, [sp, #112]
    4174:	b	3ce8 <ctf_simple_open+0x3f0>
    4178:	ldr	x1, [x20, #432]
    417c:	adrp	x0, 0 <get_kind_v1>
    4180:	add	x0, x0, #0x0
    4184:	bl	0 <ctf_dprintf>
    4188:	add	x21, x21, #0x100
    418c:	add	x9, x20, #0x98
    4190:	add	x6, x20, #0xa8
    4194:	add	x4, x20, #0xb8
    4198:	add	x3, x20, #0xc8
    419c:	adrp	x2, 0 <get_kind_v1>
    41a0:	adrp	x1, 0 <get_kind_v1>
    41a4:	add	x2, x2, #0x0
    41a8:	add	x1, x1, #0x0
    41ac:	adrp	x0, 0 <get_kind_v1>
    41b0:	mov	x10, #0x6                   	// #6
    41b4:	add	x0, x0, #0x0
    41b8:	mov	x7, #0x5                   	// #5
    41bc:	mov	x5, #0x4                   	// #4
    41c0:	stp	x2, x10, [x20, #216]
    41c4:	stp	x9, x1, [x20, #232]
    41c8:	stp	x7, x6, [x20, #248]
    41cc:	stp	x0, x5, [x20, #264]
    41d0:	stp	x4, x21, [x20, #280]
    41d4:	stp	xzr, x3, [x20, #296]
    41d8:	stp	xzr, xzr, [x20, #312]
    41dc:	str	xzr, [x20, #328]
    41e0:	cbz	x25, 420c <ctf_simple_open+0x914>
    41e4:	ldr	x0, [x25, #24]
    41e8:	cmp	x0, #0x18
    41ec:	b.eq	420c <ctf_simple_open+0x914>  // b.none
    41f0:	mov	x0, x20
    41f4:	mov	w1, #0x1                   	// #1
    41f8:	bl	2760 <ctf_setmodel>
    41fc:	mov	w0, #0x1                   	// #1
    4200:	ldp	x23, x24, [sp, #48]
    4204:	str	w0, [x20, #548]
    4208:	b	3e14 <ctf_simple_open+0x51c>
    420c:	mov	x0, x20
    4210:	mov	w1, #0x2                   	// #2
    4214:	bl	2760 <ctf_setmodel>
    4218:	b	41fc <ctf_simple_open+0x904>
    421c:	nop

0000000000004220 <ctf_simple_open_internal>:
    4220:	stp	x29, x30, [sp, #-272]!
    4224:	mov	x29, sp
    4228:	stp	x19, x20, [sp, #16]
    422c:	mov	x19, x0
    4230:	mov	x20, x2
    4234:	stp	x21, x22, [sp, #32]
    4238:	mov	x22, x7
    423c:	stp	x23, x24, [sp, #48]
    4240:	mov	x24, x5
    4244:	stp	x27, x28, [sp, #80]
    4248:	cbz	x0, 4268 <ctf_simple_open_internal+0x48>
    424c:	adrp	x0, 0 <get_kind_v1>
    4250:	add	x0, x0, #0x0
    4254:	add	x0, x0, #0x1b0
    4258:	stp	x0, x19, [sp, #176]
    425c:	add	x19, sp, #0xb0
    4260:	mov	x2, #0x1                   	// #1
    4264:	stp	x1, x2, [sp, #192]
    4268:	mov	w21, #0x0                   	// #0
    426c:	cbz	x20, 428c <ctf_simple_open_internal+0x6c>
    4270:	adrp	x0, 0 <get_kind_v1>
    4274:	add	x0, x0, #0x0
    4278:	add	x0, x0, #0x1b0
    427c:	stp	x0, x20, [sp, #208]
    4280:	add	x20, sp, #0xd0
    4284:	mov	w21, #0x1                   	// #1
    4288:	stp	x3, x4, [sp, #224]
    428c:	cbz	x24, 42ac <ctf_simple_open_internal+0x8c>
    4290:	adrp	x0, 0 <get_kind_v1>
    4294:	add	x0, x0, #0x0
    4298:	add	x0, x0, #0x1b0
    429c:	stp	x0, x24, [sp, #240]
    42a0:	add	x24, sp, #0xf0
    42a4:	mov	x1, #0x1                   	// #1
    42a8:	stp	x6, x1, [sp, #256]
    42ac:	bl	0 <libctf_init_debug>
    42b0:	cbz	x19, 46fc <ctf_simple_open_internal+0x4dc>
    42b4:	cbz	x20, 42d8 <ctf_simple_open_internal+0xb8>
    42b8:	orr	x0, x24, x22
    42bc:	cbz	x0, 46fc <ctf_simple_open_internal+0x4dc>
    42c0:	ldr	x0, [x20, #24]
    42c4:	and	x0, x0, #0xfffffffffffffff7
    42c8:	cmp	x0, #0x10
    42cc:	b.ne	479c <ctf_simple_open_internal+0x57c>  // b.any
    42d0:	ldr	x0, [x20, #8]
    42d4:	cbz	x0, 4850 <ctf_simple_open_internal+0x630>
    42d8:	cbz	x24, 42e4 <ctf_simple_open_internal+0xc4>
    42dc:	ldr	x0, [x24, #8]
    42e0:	cbz	x0, 4864 <ctf_simple_open_internal+0x644>
    42e4:	ldr	x23, [x19, #16]
    42e8:	cmp	x23, #0x3
    42ec:	b.ls	4728 <ctf_simple_open_internal+0x508>  // b.plast
    42f0:	stp	x25, x26, [sp, #64]
    42f4:	adrp	x0, 0 <get_kind_v1>
    42f8:	add	x0, x0, #0x0
    42fc:	ldr	x26, [x19, #8]
    4300:	ldrh	w1, [x26]
    4304:	ldrb	w2, [x26, #2]
    4308:	bl	0 <ctf_dprintf>
    430c:	ldrh	w0, [x26]
    4310:	mov	w1, #0xdff2                	// #57330
    4314:	cmp	w0, w1
    4318:	b.ne	489c <ctf_simple_open_internal+0x67c>  // b.any
    431c:	ldrb	w1, [x26, #2]
    4320:	sub	w0, w1, #0x1
    4324:	and	w0, w0, #0xff
    4328:	cmp	w0, #0x3
    432c:	b.hi	48c0 <ctf_simple_open_internal+0x6a0>  // b.pmore
    4330:	cmp	w21, #0x0
    4334:	ccmp	w1, #0x2, #0x2, ne  // ne = any
    4338:	b.ls	4878 <ctf_simple_open_internal+0x658>  // b.plast
    433c:	cmp	w1, #0x4
    4340:	mov	x21, #0x34                  	// #52
    4344:	mov	x0, #0x28                  	// #40
    4348:	csel	x21, x21, x0, eq  // eq = none
    434c:	str	wzr, [sp, #104]
    4350:	cmp	x23, x21
    4354:	b.cc	4754 <ctf_simple_open_internal+0x534>  // b.lo, b.ul, b.last
    4358:	mov	x1, #0x1                   	// #1
    435c:	mov	x0, #0x2d8                 	// #728
    4360:	bl	0 <calloc>
    4364:	mov	x27, x0
    4368:	cbz	x0, 48e0 <ctf_simple_open_internal+0x6c0>
    436c:	ldr	w0, [sp, #272]
    4370:	cbz	w0, 437c <ctf_simple_open_internal+0x15c>
    4374:	mov	w0, #0x2                   	// #2
    4378:	str	w0, [x27, #552]
    437c:	mov	x0, #0x34                  	// #52
    4380:	bl	0 <malloc>
    4384:	str	x0, [x27, #8]
    4388:	mov	x28, x0
    438c:	cbz	x0, 48d8 <ctf_simple_open_internal+0x6b8>
    4390:	mov	x2, x21
    4394:	mov	x1, x26
    4398:	bl	0 <memcpy>
    439c:	ldrb	w0, [x26, #2]
    43a0:	cmp	w0, #0x3
    43a4:	b.ls	47c8 <ctf_simple_open_internal+0x5a8>  // b.plast
    43a8:	ldp	w2, w1, [x28, #44]
    43ac:	ldr	w0, [sp, #104]
    43b0:	cbnz	w0, 47fc <ctf_simple_open_internal+0x5dc>
    43b4:	ldrb	w0, [x28, #3]
    43b8:	add	w1, w1, w2
    43bc:	strb	w0, [x27, #16]
    43c0:	str	x1, [x27, #416]
    43c4:	adrp	x0, 0 <get_kind_v1>
    43c8:	add	x0, x0, #0x0
    43cc:	bl	0 <ctf_dprintf>
    43d0:	ldr	x25, [x27, #416]
    43d4:	ldr	w0, [x28, #16]
    43d8:	cmp	x25, w0, uxtw
    43dc:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    43e0:	ldr	w1, [x28, #20]
    43e4:	cmp	x25, w1, uxtw
    43e8:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    43ec:	ldr	w2, [x28, #24]
    43f0:	orr	w8, w1, w2
    43f4:	cmp	x25, w2, uxtw
    43f8:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    43fc:	ldr	w3, [x28, #28]
    4400:	cmp	x25, w3, uxtw
    4404:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    4408:	ldr	w7, [x28, #32]
    440c:	orr	w10, w3, w7
    4410:	cmp	x25, w7, uxtw
    4414:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    4418:	ldr	w9, [x28, #40]
    441c:	cmp	x25, w9, uxtw
    4420:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    4424:	ldr	w11, [x28, #44]
    4428:	cmp	x25, w11, uxtw
    442c:	b.cc	476c <ctf_simple_open_internal+0x54c>  // b.lo, b.ul, b.last
    4430:	cmp	w3, w9
    4434:	csel	w12, w3, w9, ls  // ls = plast
    4438:	cmp	w0, w1
    443c:	ccmp	w1, w2, #0x2, ls  // ls = plast
    4440:	ccmp	w12, w2, #0x0, ls  // ls = plast
    4444:	ccmp	w3, w7, #0x2, cs  // cs = hs, nlast
    4448:	b.hi	476c <ctf_simple_open_internal+0x54c>  // b.pmore
    444c:	ldr	w2, [x28, #36]
    4450:	cmp	w9, w2
    4454:	ccmp	w7, w2, #0x2, cs  // cs = hs, nlast
    4458:	ccmp	w9, w11, #0x2, ls  // ls = plast
    445c:	b.hi	476c <ctf_simple_open_internal+0x54c>  // b.pmore
    4460:	orr	w0, w0, w9
    4464:	orr	w1, w10, w8
    4468:	orr	w0, w0, w2
    446c:	and	w1, w1, #0x2
    4470:	and	w0, w0, #0x3
    4474:	orr	w0, w0, w1
    4478:	cbnz	w0, 476c <ctf_simple_open_internal+0x54c>
    447c:	ldrb	w2, [x28, #3]
    4480:	tbnz	w2, #0, 4950 <ctf_simple_open_internal+0x730>
    4484:	ldr	w0, [sp, #104]
    4488:	cbnz	w0, 48f8 <ctf_simple_open_internal+0x6d8>
    448c:	add	x21, x26, x21
    4490:	stp	x26, xzr, [x27, #392]
    4494:	str	x21, [x27, #408]
    4498:	ldrb	w1, [x28, #2]
    449c:	adrp	x21, 0 <get_kind_v1>
    44a0:	add	x21, x21, #0x0
    44a4:	mov	w3, #0x28                  	// #40
    44a8:	add	x2, x21, #0x38
    44ac:	str	w1, [x27, #560]
    44b0:	mov	x0, x27
    44b4:	umaddl	x1, w1, w3, x2
    44b8:	str	x1, [x27]
    44bc:	bl	0 <ctf_str_create_atoms>
    44c0:	ldp	x0, x1, [x19]
    44c4:	stp	x0, x1, [x27, #24]
    44c8:	mov	w2, #0x7fffffff            	// #2147483647
    44cc:	ldp	x0, x1, [x19, #16]
    44d0:	stp	x0, x1, [x27, #40]
    44d4:	str	w2, [x27, #544]
    44d8:	cbz	x20, 44fc <ctf_simple_open_internal+0x2dc>
    44dc:	ldp	x0, x1, [x20]
    44e0:	stp	x0, x1, [x27, #56]
    44e4:	ldp	x0, x1, [x24]
    44e8:	stp	x0, x1, [x27, #88]
    44ec:	ldp	x0, x1, [x20, #16]
    44f0:	stp	x0, x1, [x27, #72]
    44f4:	ldp	x0, x1, [x24, #16]
    44f8:	stp	x0, x1, [x27, #104]
    44fc:	ldr	x0, [x27, #24]
    4500:	cbz	x0, 4510 <ctf_simple_open_internal+0x2f0>
    4504:	bl	0 <strdup>
    4508:	str	x0, [x27, #24]
    450c:	cbz	x0, 4924 <ctf_simple_open_internal+0x704>
    4510:	ldr	x0, [x27, #56]
    4514:	cbz	x0, 4524 <ctf_simple_open_internal+0x304>
    4518:	bl	0 <strdup>
    451c:	str	x0, [x27, #56]
    4520:	cbz	x0, 4924 <ctf_simple_open_internal+0x704>
    4524:	ldr	x0, [x27, #88]
    4528:	cbz	x0, 4538 <ctf_simple_open_internal+0x318>
    452c:	bl	0 <strdup>
    4530:	str	x0, [x27, #88]
    4534:	cbz	x0, 4924 <ctf_simple_open_internal+0x704>
    4538:	ldr	x1, [x27, #24]
    453c:	cbz	x1, 49e0 <ctf_simple_open_internal+0x7c0>
    4540:	ldr	x1, [x27, #56]
    4544:	cbz	x1, 49d0 <ctf_simple_open_internal+0x7b0>
    4548:	cbz	x0, 49ec <ctf_simple_open_internal+0x7cc>
    454c:	cbz	x24, 4560 <ctf_simple_open_internal+0x340>
    4550:	ldr	x0, [x24, #8]
    4554:	str	x0, [x27, #352]
    4558:	ldr	x0, [x24, #16]
    455c:	str	x0, [x27, #360]
    4560:	ldr	w0, [sp, #104]
    4564:	str	x22, [x27, #128]
    4568:	cbz	w0, 4580 <ctf_simple_open_internal+0x360>
    456c:	ldr	x1, [x27, #408]
    4570:	mov	x0, x28
    4574:	bl	340 <flip_ctf>
    4578:	mov	w19, w0
    457c:	cbnz	w0, 49f8 <ctf_simple_open_internal+0x7d8>
    4580:	ldr	x2, [x27, #392]
    4584:	mov	x0, x27
    4588:	mov	x1, x28
    458c:	bl	b0 <ctf_set_base>
    4590:	ldr	w0, [x27, #552]
    4594:	tbnz	w0, #1, 4af4 <ctf_simple_open_internal+0x8d4>
    4598:	mov	x1, x28
    459c:	mov	x0, x27
    45a0:	bl	ba0 <init_types>
    45a4:	mov	w19, w0
    45a8:	cbnz	w0, 4928 <ctf_simple_open_internal+0x708>
    45ac:	cbz	x20, 4a80 <ctf_simple_open_internal+0x860>
    45b0:	ldp	x19, x0, [x20, #16]
    45b4:	str	x0, [sp, #112]
    45b8:	udiv	x19, x19, x0
    45bc:	str	x19, [x27, #432]
    45c0:	lsl	x19, x19, #2
    45c4:	mov	x0, x19
    45c8:	bl	0 <malloc>
    45cc:	str	x0, [x27, #424]
    45d0:	mov	x23, x0
    45d4:	cbz	x0, 4924 <ctf_simple_open_internal+0x704>
    45d8:	add	x0, x0, x19
    45dc:	ldr	w22, [x28, #24]
    45e0:	str	x0, [sp, #120]
    45e4:	adrp	x26, 0 <get_kind_v1>
    45e8:	ldr	x0, [x20, #8]
    45ec:	adrp	x25, 0 <get_kind_v1>
    45f0:	add	x26, x26, #0x0
    45f4:	add	x25, x25, #0x0
    45f8:	str	x0, [sp, #104]
    45fc:	ldr	w0, [x28, #20]
    4600:	str	w0, [sp, #128]
    4604:	ldr	x0, [sp, #120]
    4608:	cmp	x0, x23
    460c:	b.ls	4a70 <ctf_simple_open_internal+0x850>  // b.plast
    4610:	ldr	x0, [sp, #112]
    4614:	cmp	x0, #0x10
    4618:	b.eq	4a5c <ctf_simple_open_internal+0x83c>  // b.none
    461c:	ldr	x19, [sp, #104]
    4620:	ldr	x7, [x24, #16]
    4624:	ldr	w0, [x19]
    4628:	mov	w1, w0
    462c:	cmp	x7, w0, uxtw
    4630:	b.ls	4a0c <ctf_simple_open_internal+0x7ec>  // b.plast
    4634:	ldr	x7, [x24, #8]
    4638:	add	x7, x7, x1
    463c:	cbz	w0, 4a50 <ctf_simple_open_internal+0x830>
    4640:	ldrh	w0, [x19, #6]
    4644:	str	w0, [sp, #132]
    4648:	cbz	w0, 4a50 <ctf_simple_open_internal+0x830>
    464c:	mov	x1, x26
    4650:	mov	x0, x7
    4654:	str	x7, [sp, #136]
    4658:	bl	0 <strcmp>
    465c:	cbz	w0, 4a50 <ctf_simple_open_internal+0x830>
    4660:	ldr	x7, [sp, #136]
    4664:	mov	x1, x25
    4668:	mov	x0, x7
    466c:	bl	0 <strcmp>
    4670:	cbz	w0, 4a50 <ctf_simple_open_internal+0x830>
    4674:	ldrb	w0, [x19, #4]
    4678:	and	w0, w0, #0xf
    467c:	cmp	w0, #0x1
    4680:	b.eq	4a14 <ctf_simple_open_internal+0x7f4>  // b.none
    4684:	cmp	w0, #0x2
    4688:	b.ne	4a50 <ctf_simple_open_internal+0x830>  // b.any
    468c:	ldr	w0, [x28, #28]
    4690:	cmp	w0, w22
    4694:	b.ls	4a50 <ctf_simple_open_internal+0x830>  // b.plast
    4698:	ldr	x1, [x27]
    469c:	ldr	x0, [x27, #408]
    46a0:	ldr	x3, [x1, #16]
    46a4:	str	w22, [x23]
    46a8:	ldr	w1, [x0, w22, uxtw]
    46ac:	str	w1, [sp, #132]
    46b0:	mov	w0, w1
    46b4:	blr	x3
    46b8:	mov	w19, w0
    46bc:	ldr	w1, [sp, #132]
    46c0:	mov	w0, w1
    46c4:	ldr	x1, [x27]
    46c8:	ldr	x1, [x1]
    46cc:	blr	x1
    46d0:	orr	w0, w19, w0
    46d4:	add	w1, w19, #0x2
    46d8:	cmp	w0, #0x0
    46dc:	add	w0, w22, #0x4
    46e0:	add	w22, w22, w1, lsl #2
    46e4:	csel	w22, w22, w0, ne  // ne = any
    46e8:	ldp	x0, x1, [sp, #104]
    46ec:	add	x23, x23, #0x4
    46f0:	add	x0, x0, x1
    46f4:	str	x0, [sp, #104]
    46f8:	b	4604 <ctf_simple_open_internal+0x3e4>
    46fc:	ldr	x0, [sp, #280]
    4700:	mov	w1, #0x16                  	// #22
    4704:	bl	0 <ctf_set_open_errno>
    4708:	mov	x27, x0
    470c:	mov	x0, x27
    4710:	ldp	x19, x20, [sp, #16]
    4714:	ldp	x21, x22, [sp, #32]
    4718:	ldp	x23, x24, [sp, #48]
    471c:	ldp	x27, x28, [sp, #80]
    4720:	ldp	x29, x30, [sp], #272
    4724:	ret
    4728:	ldr	x0, [sp, #280]
    472c:	mov	w1, #0x3f1                 	// #1009
    4730:	bl	0 <ctf_set_open_errno>
    4734:	mov	x27, x0
    4738:	mov	x0, x27
    473c:	ldp	x19, x20, [sp, #16]
    4740:	ldp	x21, x22, [sp, #32]
    4744:	ldp	x23, x24, [sp, #48]
    4748:	ldp	x27, x28, [sp, #80]
    474c:	ldp	x29, x30, [sp], #272
    4750:	ret
    4754:	ldr	x0, [sp, #280]
    4758:	mov	w1, #0x3f1                 	// #1009
    475c:	bl	0 <ctf_set_open_errno>
    4760:	mov	x27, x0
    4764:	ldp	x25, x26, [sp, #64]
    4768:	b	470c <ctf_simple_open_internal+0x4ec>
    476c:	ldr	x0, [sp, #280]
    4770:	mov	w1, #0x3ef                 	// #1007
    4774:	bl	0 <ctf_set_open_errno>
    4778:	mov	x27, x0
    477c:	mov	x0, x27
    4780:	ldp	x19, x20, [sp, #16]
    4784:	ldp	x21, x22, [sp, #32]
    4788:	ldp	x23, x24, [sp, #48]
    478c:	ldp	x25, x26, [sp, #64]
    4790:	ldp	x27, x28, [sp, #80]
    4794:	ldp	x29, x30, [sp], #272
    4798:	ret
    479c:	ldr	x0, [sp, #280]
    47a0:	mov	w1, #0x3ec                 	// #1004
    47a4:	bl	0 <ctf_set_open_errno>
    47a8:	mov	x27, x0
    47ac:	mov	x0, x27
    47b0:	ldp	x19, x20, [sp, #16]
    47b4:	ldp	x21, x22, [sp, #32]
    47b8:	ldp	x23, x24, [sp, #48]
    47bc:	ldp	x27, x28, [sp, #80]
    47c0:	ldp	x29, x30, [sp], #272
    47c4:	ret
    47c8:	ldp	w3, w0, [x28, #20]
    47cc:	ldp	w8, w7, [x28, #12]
    47d0:	stp	wzr, w8, [x28, #12]
    47d4:	ldr	w1, [x28, #36]
    47d8:	ldur	x2, [x28, #28]
    47dc:	stp	w7, w3, [x28, #20]
    47e0:	str	w0, [x28, #28]
    47e4:	str	w0, [x28, #36]
    47e8:	str	x2, [x28, #40]
    47ec:	ldr	w2, [x28, #32]
    47f0:	str	w0, [x28, #32]
    47f4:	str	w1, [x28, #48]
    47f8:	b	43ac <ctf_simple_open_internal+0x18c>
    47fc:	ldur	q0, [x28, #20]
    4800:	rev	w2, w2
    4804:	ldp	w9, w8, [x28, #4]
    4808:	rev	w1, w1
    480c:	rev32	v0.16b, v0.16b
    4810:	ldrh	w10, [x28]
    4814:	ldp	w3, w0, [x28, #36]
    4818:	rev16	w10, w10
    481c:	ldr	w7, [x28, #12]
    4820:	rev	w9, w9
    4824:	rev	w8, w8
    4828:	rev	w3, w3
    482c:	rev	w7, w7
    4830:	rev	w0, w0
    4834:	strh	w10, [x28]
    4838:	stp	w9, w8, [x28, #4]
    483c:	str	w7, [x28, #12]
    4840:	stur	q0, [x28, #20]
    4844:	stp	w3, w0, [x28, #36]
    4848:	stp	w2, w1, [x28, #44]
    484c:	b	43b4 <ctf_simple_open_internal+0x194>
    4850:	ldr	x0, [sp, #280]
    4854:	mov	w1, #0x3ed                 	// #1005
    4858:	bl	0 <ctf_set_open_errno>
    485c:	mov	x27, x0
    4860:	b	470c <ctf_simple_open_internal+0x4ec>
    4864:	ldr	x0, [sp, #280]
    4868:	mov	w1, #0x3ee                 	// #1006
    486c:	bl	0 <ctf_set_open_errno>
    4870:	mov	x27, x0
    4874:	b	470c <ctf_simple_open_internal+0x4ec>
    4878:	adrp	x0, 0 <get_kind_v1>
    487c:	add	x0, x0, #0x0
    4880:	bl	0 <ctf_dprintf>
    4884:	ldr	x0, [sp, #280]
    4888:	mov	w1, #0x40a                 	// #1034
    488c:	bl	0 <ctf_set_open_errno>
    4890:	mov	x27, x0
    4894:	ldp	x25, x26, [sp, #64]
    4898:	b	470c <ctf_simple_open_internal+0x4ec>
    489c:	mov	w1, #0xf2df                	// #62175
    48a0:	cmp	w0, w1
    48a4:	b.ne	4754 <ctf_simple_open_internal+0x534>  // b.any
    48a8:	ldrb	w0, [x26, #2]
    48ac:	mov	w1, #0x1                   	// #1
    48b0:	str	w1, [sp, #104]
    48b4:	mov	x21, #0x34                  	// #52
    48b8:	cmp	w0, #0x4
    48bc:	b.eq	4350 <ctf_simple_open_internal+0x130>  // b.none
    48c0:	ldr	x0, [sp, #280]
    48c4:	mov	w1, #0x3ea                 	// #1002
    48c8:	bl	0 <ctf_set_open_errno>
    48cc:	mov	x27, x0
    48d0:	ldp	x25, x26, [sp, #64]
    48d4:	b	470c <ctf_simple_open_internal+0x4ec>
    48d8:	mov	x0, x27
    48dc:	bl	0 <free>
    48e0:	ldr	x0, [sp, #280]
    48e4:	mov	w1, #0xc                   	// #12
    48e8:	bl	0 <ctf_set_open_errno>
    48ec:	mov	x27, x0
    48f0:	ldp	x25, x26, [sp, #64]
    48f4:	b	470c <ctf_simple_open_internal+0x4ec>
    48f8:	mov	x0, x25
    48fc:	bl	0 <malloc>
    4900:	str	x0, [x27, #392]
    4904:	mov	x23, x0
    4908:	cbz	x0, 4948 <ctf_simple_open_internal+0x728>
    490c:	str	x0, [x27, #400]
    4910:	mov	x2, x25
    4914:	add	x1, x26, x21
    4918:	bl	0 <memcpy>
    491c:	str	x23, [x27, #408]
    4920:	b	4498 <ctf_simple_open_internal+0x278>
    4924:	mov	w19, #0xc                   	// #12
    4928:	ldr	x0, [sp, #280]
    492c:	mov	w1, w19
    4930:	bl	0 <ctf_set_open_errno>
    4934:	mov	x0, x27
    4938:	mov	x27, #0x0                   	// #0
    493c:	bl	24d0 <ctf_file_close>
    4940:	ldp	x25, x26, [sp, #64]
    4944:	b	470c <ctf_simple_open_internal+0x4ec>
    4948:	mov	w19, #0x3f6                 	// #1014
    494c:	b	4928 <ctf_simple_open_internal+0x708>
    4950:	mov	x0, x25
    4954:	str	w2, [sp, #128]
    4958:	bl	0 <malloc>
    495c:	str	x0, [x27, #392]
    4960:	cbz	x0, 4948 <ctf_simple_open_internal+0x728>
    4964:	ldr	w2, [sp, #128]
    4968:	dup	v0.2d, x0
    496c:	sub	x3, x23, x21
    4970:	add	x1, sp, #0x98
    4974:	and	w4, w2, #0xfffffffe
    4978:	add	x2, x26, x21
    497c:	strb	w4, [x28, #3]
    4980:	str	x25, [sp, #152]
    4984:	str	q0, [x27, #400]
    4988:	bl	0 <uncompress>
    498c:	cbnz	w0, 49b4 <ctf_simple_open_internal+0x794>
    4990:	ldr	x1, [sp, #152]
    4994:	ldr	x2, [x27, #416]
    4998:	cmp	x2, x1
    499c:	b.eq	4498 <ctf_simple_open_internal+0x278>  // b.none
    49a0:	adrp	x0, 0 <get_kind_v1>
    49a4:	mov	w19, #0x3ef                 	// #1007
    49a8:	add	x0, x0, #0x0
    49ac:	bl	0 <ctf_dprintf>
    49b0:	b	4928 <ctf_simple_open_internal+0x708>
    49b4:	bl	0 <zError>
    49b8:	mov	w19, #0x3f7                 	// #1015
    49bc:	mov	x1, x0
    49c0:	adrp	x0, 0 <get_kind_v1>
    49c4:	add	x0, x0, #0x0
    49c8:	bl	0 <ctf_dprintf>
    49cc:	b	4928 <ctf_simple_open_internal+0x708>
    49d0:	add	x1, x21, #0x100
    49d4:	str	x1, [x27, #56]
    49d8:	cbnz	x0, 454c <ctf_simple_open_internal+0x32c>
    49dc:	b	49ec <ctf_simple_open_internal+0x7cc>
    49e0:	add	x1, x21, #0x100
    49e4:	str	x1, [x27, #24]
    49e8:	b	4540 <ctf_simple_open_internal+0x320>
    49ec:	add	x0, x21, #0x100
    49f0:	str	x0, [x27, #88]
    49f4:	b	454c <ctf_simple_open_internal+0x32c>
    49f8:	ldr	x2, [x27, #392]
    49fc:	mov	x1, x28
    4a00:	mov	x0, x27
    4a04:	bl	b0 <ctf_set_base>
    4a08:	b	4928 <ctf_simple_open_internal+0x708>
    4a0c:	add	x7, x21, #0x100
    4a10:	b	463c <ctf_simple_open_internal+0x41c>
    4a14:	ldr	w0, [x28, #24]
    4a18:	ldr	w1, [sp, #128]
    4a1c:	cmp	w0, w1
    4a20:	b.ls	4a50 <ctf_simple_open_internal+0x830>  // b.plast
    4a24:	ldr	w1, [sp, #132]
    4a28:	mov	w0, #0xfff1                	// #65521
    4a2c:	cmp	w1, w0
    4a30:	b.eq	4a48 <ctf_simple_open_internal+0x828>  // b.none
    4a34:	ldr	w0, [sp, #128]
    4a38:	str	w0, [x23]
    4a3c:	add	w0, w0, #0x4
    4a40:	str	w0, [sp, #128]
    4a44:	b	46e8 <ctf_simple_open_internal+0x4c8>
    4a48:	ldr	x0, [x19, #8]
    4a4c:	cbnz	x0, 4a34 <ctf_simple_open_internal+0x814>
    4a50:	mov	w0, #0xffffffff            	// #-1
    4a54:	str	w0, [x23]
    4a58:	b	46e8 <ctf_simple_open_internal+0x4c8>
    4a5c:	ldr	x0, [sp, #104]
    4a60:	add	x1, sp, #0x98
    4a64:	bl	0 <ctf_sym_to_elf64>
    4a68:	mov	x19, x0
    4a6c:	b	4620 <ctf_simple_open_internal+0x400>
    4a70:	ldr	x1, [x27, #432]
    4a74:	adrp	x0, 0 <get_kind_v1>
    4a78:	add	x0, x0, #0x0
    4a7c:	bl	0 <ctf_dprintf>
    4a80:	add	x21, x21, #0x100
    4a84:	add	x9, x27, #0x98
    4a88:	add	x7, x27, #0xa8
    4a8c:	add	x5, x27, #0xb8
    4a90:	add	x3, x27, #0xc8
    4a94:	adrp	x2, 0 <get_kind_v1>
    4a98:	adrp	x1, 0 <get_kind_v1>
    4a9c:	add	x2, x2, #0x0
    4aa0:	add	x1, x1, #0x0
    4aa4:	adrp	x0, 0 <get_kind_v1>
    4aa8:	mov	x10, #0x6                   	// #6
    4aac:	add	x0, x0, #0x0
    4ab0:	mov	x8, #0x5                   	// #5
    4ab4:	mov	x6, #0x4                   	// #4
    4ab8:	stp	x2, x10, [x27, #216]
    4abc:	stp	x9, x1, [x27, #232]
    4ac0:	stp	x8, x7, [x27, #248]
    4ac4:	stp	x0, x6, [x27, #264]
    4ac8:	stp	x5, x21, [x27, #280]
    4acc:	stp	xzr, x3, [x27, #296]
    4ad0:	stp	xzr, xzr, [x27, #312]
    4ad4:	str	xzr, [x27, #328]
    4ad8:	cbz	x20, 4b04 <ctf_simple_open_internal+0x8e4>
    4adc:	ldr	x0, [x20, #24]
    4ae0:	cmp	x0, #0x18
    4ae4:	b.eq	4b04 <ctf_simple_open_internal+0x8e4>  // b.none
    4ae8:	mov	x0, x27
    4aec:	mov	w1, #0x1                   	// #1
    4af0:	bl	2760 <ctf_setmodel>
    4af4:	mov	w0, #0x1                   	// #1
    4af8:	ldp	x25, x26, [sp, #64]
    4afc:	str	w0, [x27, #548]
    4b00:	b	470c <ctf_simple_open_internal+0x4ec>
    4b04:	mov	x0, x27
    4b08:	mov	w1, #0x2                   	// #2
    4b0c:	bl	2760 <ctf_setmodel>
    4b10:	b	4af4 <ctf_simple_open_internal+0x8d4>
    4b14:	nop

0000000000004b18 <ctf_getmodel>:
    4b18:	ldr	x0, [x0, #488]
    4b1c:	ldr	w0, [x0, #8]
    4b20:	ret
    4b24:	nop

0000000000004b28 <ctf_setspecific>:
    4b28:	str	x1, [x0, #720]
    4b2c:	ret

0000000000004b30 <ctf_getspecific>:
    4b30:	ldr	x0, [x0, #720]
    4b34:	ret

ctf-string.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_str_rollback_atom>:
   0:	ldr	x0, [x2, #8]
   4:	ldr	x1, [x1, #32]
   8:	cmp	x1, x0
   c:	cset	w0, hi  // hi = pmore
  10:	ret
  14:	nop

0000000000000018 <ctf_str_free_atom>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	mov	x19, x0
  28:	ldr	x20, [x0, #16]
  2c:	cbz	x20, 5c <ctf_str_free_atom+0x44>
  30:	stp	x21, x22, [sp, #32]
  34:	add	x22, x0, #0x8
  38:	mov	x21, x20
  3c:	mov	x1, x20
  40:	mov	x0, x22
  44:	ldr	x20, [x20, #8]
  48:	bl	0 <ctf_list_delete>
  4c:	mov	x0, x21
  50:	bl	0 <free>
  54:	cbnz	x20, 38 <ctf_str_free_atom+0x20>
  58:	ldp	x21, x22, [sp, #32]
  5c:	mov	x0, x19
  60:	ldp	x19, x20, [sp, #16]
  64:	ldp	x29, x30, [sp], #48
  68:	b	0 <free>
  6c:	nop

0000000000000070 <ctf_str_sort_strtab>:
  70:	ldr	x0, [x0]
  74:	ldr	x1, [x1]
  78:	ldr	x0, [x0]
  7c:	ldr	x1, [x1]
  80:	b	0 <strcmp>
  84:	nop

0000000000000088 <ctf_str_populate_sorttab>:
  88:	ldr	x0, [x2, #32]
  8c:	cmp	x0, x1
  90:	b.eq	d0 <ctf_str_populate_sorttab+0x48>  // b.none
  94:	stp	x29, x30, [sp, #-32]!
  98:	add	x0, x1, #0x8
  9c:	mov	x29, sp
  a0:	stp	x19, x20, [sp, #16]
  a4:	mov	x20, x2
  a8:	mov	x19, x1
  ac:	bl	0 <ctf_list_empty_p>
  b0:	cbnz	w0, c4 <ctf_str_populate_sorttab+0x3c>
  b4:	ldp	x1, x0, [x20, #16]
  b8:	add	x2, x0, #0x1
  bc:	str	x2, [x20, #24]
  c0:	str	x19, [x1, x0, lsl #3]
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret
  d0:	ret
  d4:	nop

00000000000000d8 <ctf_str_count_strtab>:
  d8:	stp	x29, x30, [sp, #-32]!
  dc:	mov	x29, sp
  e0:	ldr	x0, [x2, #32]
  e4:	stp	x19, x20, [sp, #16]
  e8:	mov	x19, x2
  ec:	cmp	x0, x1
  f0:	b.eq	128 <ctf_str_count_strtab+0x50>  // b.none
  f4:	mov	x20, x1
  f8:	add	x0, x1, #0x8
  fc:	bl	0 <ctf_list_empty_p>
 100:	cbnz	w0, 134 <ctf_str_count_strtab+0x5c>
 104:	ldr	w0, [x20, #28]
 108:	cbnz	w0, 128 <ctf_str_count_strtab+0x50>
 10c:	ldr	x0, [x20]
 110:	bl	0 <strlen>
 114:	ldr	x20, [x19]
 118:	ldr	x1, [x20, #8]
 11c:	add	x1, x1, #0x1
 120:	add	x1, x1, x0
 124:	str	x1, [x20, #8]
 128:	ldr	x0, [x19, #8]
 12c:	add	x0, x0, #0x1
 130:	str	x0, [x19, #8]
 134:	ldp	x19, x20, [sp, #16]
 138:	ldp	x29, x30, [sp], #32
 13c:	ret

0000000000000140 <ctf_str_purge_one_atom_refs>:
 140:	stp	x29, x30, [sp, #-48]!
 144:	mov	x29, sp
 148:	stp	x19, x20, [sp, #16]
 14c:	ldr	x19, [x1, #16]
 150:	cbz	x19, 184 <ctf_str_purge_one_atom_refs+0x44>
 154:	str	x21, [sp, #32]
 158:	add	x21, x1, #0x8
 15c:	nop
 160:	mov	x20, x19
 164:	mov	x1, x19
 168:	ldr	x19, [x19, #8]
 16c:	mov	x0, x21
 170:	bl	0 <ctf_list_delete>
 174:	mov	x0, x20
 178:	bl	0 <free>
 17c:	cbnz	x19, 160 <ctf_str_purge_one_atom_refs+0x20>
 180:	ldr	x21, [sp, #32]
 184:	ldp	x19, x20, [sp, #16]
 188:	ldp	x29, x30, [sp], #48
 18c:	ret

0000000000000190 <ctf_strraw_explicit>:
 190:	cmp	w1, #0x0
 194:	lsr	w3, w1, #31
 198:	ccmp	x2, #0x0, #0x4, ge  // ge = tcont
 19c:	b.ne	1d4 <ctf_strraw_explicit+0x44>  // b.any
 1a0:	mov	w2, w3
 1a4:	add	x2, x2, #0x15
 1a8:	add	x2, x0, x2, lsl #4
 1ac:	cbnz	w3, 214 <ctf_strraw_explicit+0x84>
 1b0:	tbz	w1, #31, 1d8 <ctf_strraw_explicit+0x48>
 1b4:	ldr	x0, [x2]
 1b8:	cbz	x0, 1d0 <ctf_strraw_explicit+0x40>
 1bc:	ldr	x2, [x2, #8]
 1c0:	and	x1, x1, #0x7fffffff
 1c4:	add	x0, x0, x1
 1c8:	cmp	x1, x2
 1cc:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
 1d0:	ret
 1d4:	cbnz	w3, 200 <ctf_strraw_explicit+0x70>
 1d8:	ldr	x3, [x2, #8]
 1dc:	mov	w4, w1
 1e0:	cmp	x3, w1, uxtw
 1e4:	b.hi	1b4 <ctf_strraw_explicit+0x24>  // b.pmore
 1e8:	ldr	w3, [x0, #384]
 1ec:	cmp	w3, w1
 1f0:	b.ls	1b4 <ctf_strraw_explicit+0x24>  // b.plast
 1f4:	ldr	x0, [x0, #120]
 1f8:	mov	x1, x4
 1fc:	b	0 <ctf_dynhash_lookup>
 200:	ldr	x3, [x0, #128]
 204:	cbz	x3, 1d8 <ctf_strraw_explicit+0x48>
 208:	mov	w1, w1
 20c:	mov	x0, x3
 210:	b	0 <ctf_dynhash_lookup>
 214:	ldr	x3, [x0, #128]
 218:	cbz	x3, 1b0 <ctf_strraw_explicit+0x20>
 21c:	b	208 <ctf_strraw_explicit+0x78>

0000000000000220 <ctf_strraw>:
 220:	lsr	w2, w1, #31
 224:	tbnz	w1, #31, 27c <ctf_strraw+0x5c>
 228:	add	x3, x2, #0x15
 22c:	mov	w4, w1
 230:	add	x3, x0, x3, lsl #4
 234:	ldr	x3, [x3, #8]
 238:	cmp	x3, w1, uxtw
 23c:	b.ls	264 <ctf_strraw+0x44>  // b.plast
 240:	add	x2, x0, x2, lsl #4
 244:	ldr	x0, [x2, #336]
 248:	cbz	x0, 260 <ctf_strraw+0x40>
 24c:	ldr	x2, [x2, #344]
 250:	and	x1, x1, #0x7fffffff
 254:	add	x0, x0, x1
 258:	cmp	x1, x2
 25c:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
 260:	ret
 264:	ldr	w3, [x0, #384]
 268:	cmp	w1, w3
 26c:	b.cs	240 <ctf_strraw+0x20>  // b.hs, b.nlast
 270:	ldr	x0, [x0, #120]
 274:	mov	x1, x4
 278:	b	0 <ctf_dynhash_lookup>
 27c:	ldr	x3, [x0, #128]
 280:	cbnz	x3, 28c <ctf_strraw+0x6c>
 284:	tbnz	w1, #31, 240 <ctf_strraw+0x20>
 288:	b	228 <ctf_strraw+0x8>
 28c:	mov	w1, w1
 290:	mov	x0, x3
 294:	b	0 <ctf_dynhash_lookup>

0000000000000298 <ctf_strptr>:
 298:	stp	x29, x30, [sp, #-16]!
 29c:	lsr	w2, w1, #31
 2a0:	mov	x29, sp
 2a4:	tbnz	w1, #31, 328 <ctf_strptr+0x90>
 2a8:	add	x3, x2, #0x15
 2ac:	mov	w4, w1
 2b0:	add	x3, x0, x3, lsl #4
 2b4:	ldr	x3, [x3, #8]
 2b8:	cmp	x3, w1, uxtw
 2bc:	b.ls	308 <ctf_strptr+0x70>  // b.plast
 2c0:	add	x2, x0, x2, lsl #4
 2c4:	ldr	x0, [x2, #336]
 2c8:	cbz	x0, 2f8 <ctf_strptr+0x60>
 2cc:	ldr	x2, [x2, #344]
 2d0:	and	x1, x1, #0x7fffffff
 2d4:	add	x0, x0, x1
 2d8:	cmp	x1, x2
 2dc:	b.cs	2f8 <ctf_strptr+0x60>  // b.hs, b.nlast
 2e0:	ldp	x29, x30, [sp], #16
 2e4:	ret
 2e8:	mov	w1, w1
 2ec:	mov	x0, x3
 2f0:	bl	0 <ctf_dynhash_lookup>
 2f4:	cbnz	x0, 2e0 <ctf_strptr+0x48>
 2f8:	ldp	x29, x30, [sp], #16
 2fc:	adrp	x0, 0 <ctf_str_rollback_atom>
 300:	add	x0, x0, #0x0
 304:	ret
 308:	ldr	w3, [x0, #384]
 30c:	cmp	w1, w3
 310:	b.cs	2c0 <ctf_strptr+0x28>  // b.hs, b.nlast
 314:	ldr	x0, [x0, #120]
 318:	mov	x1, x4
 31c:	bl	0 <ctf_dynhash_lookup>
 320:	cbnz	x0, 2e0 <ctf_strptr+0x48>
 324:	b	2f8 <ctf_strptr+0x60>
 328:	ldr	x3, [x0, #128]
 32c:	cbnz	x3, 2e8 <ctf_strptr+0x50>
 330:	tbnz	w1, #31, 2c0 <ctf_strptr+0x28>
 334:	b	2a8 <ctf_strptr+0x10>

0000000000000338 <ctf_str_create_atoms>:
 338:	stp	x29, x30, [sp, #-64]!
 33c:	adrp	x3, 0 <ctf_str_rollback_atom>
 340:	adrp	x2, 0 <free>
 344:	mov	x29, sp
 348:	stp	x19, x20, [sp, #16]
 34c:	mov	x19, x0
 350:	add	x3, x3, #0x0
 354:	add	x2, x2, #0x0
 358:	adrp	x1, 0 <ctf_hash_eq_string>
 35c:	adrp	x0, 0 <ctf_hash_string>
 360:	add	x1, x1, #0x0
 364:	add	x0, x0, #0x0
 368:	bl	0 <ctf_dynhash_create>
 36c:	str	x0, [x19, #368]
 370:	cbz	x0, 4c8 <ctf_str_create_atoms+0x190>
 374:	mov	x20, x0
 378:	ldr	x0, [x19, #120]
 37c:	cbz	x0, 450 <ctf_str_create_atoms+0x118>
 380:	stp	x21, x22, [sp, #32]
 384:	bl	0 <__errno_location>
 388:	mov	x21, x0
 38c:	adrp	x22, 0 <ctf_str_rollback_atom>
 390:	add	x22, x22, #0x0
 394:	mov	x0, x20
 398:	mov	x1, x22
 39c:	str	wzr, [x21]
 3a0:	bl	0 <ctf_dynhash_lookup>
 3a4:	cbz	x0, 3c8 <ctf_str_create_atoms+0x90>
 3a8:	ldr	w1, [x21]
 3ac:	mov	w0, #0x0                   	// #0
 3b0:	cmp	w1, #0xc
 3b4:	b.eq	4a4 <ctf_str_create_atoms+0x16c>  // b.none
 3b8:	ldp	x21, x22, [sp, #32]
 3bc:	ldp	x19, x20, [sp, #16]
 3c0:	ldp	x29, x30, [sp], #64
 3c4:	ret
 3c8:	mov	x1, #0x1                   	// #1
 3cc:	mov	x0, #0x28                  	// #40
 3d0:	str	x23, [sp, #48]
 3d4:	bl	0 <calloc>
 3d8:	mov	x20, x0
 3dc:	cbz	x0, 4d0 <ctf_str_create_atoms+0x198>
 3e0:	mov	x0, x22
 3e4:	bl	0 <strdup>
 3e8:	mov	x22, x0
 3ec:	mov	x23, x0
 3f0:	cbz	x0, 4d0 <ctf_str_create_atoms+0x198>
 3f4:	mov	x1, x0
 3f8:	mov	x2, x20
 3fc:	ldr	x0, [x19, #368]
 400:	bl	0 <ctf_dynhash_insert>
 404:	tbnz	w0, #31, 480 <ctf_str_create_atoms+0x148>
 408:	ldr	w3, [x19, #384]
 40c:	mov	x2, x22
 410:	ldr	x0, [x19, #120]
 414:	str	x22, [x20]
 418:	ldr	x4, [x19, #624]
 41c:	str	w3, [x20, #24]
 420:	str	x4, [x20, #32]
 424:	mov	w1, w3
 428:	bl	0 <ctf_dynhash_insert>
 42c:	tbnz	w0, #31, 480 <ctf_str_create_atoms+0x148>
 430:	ldr	x0, [x20]
 434:	bl	0 <strlen>
 438:	ldr	w1, [x19, #384]
 43c:	ldr	x23, [sp, #48]
 440:	add	w1, w1, #0x1
 444:	add	w1, w1, w0
 448:	str	w1, [x19, #384]
 44c:	b	3a8 <ctf_str_create_atoms+0x70>
 450:	adrp	x1, 0 <ctf_hash_eq_integer>
 454:	adrp	x0, 0 <ctf_hash_integer>
 458:	add	x1, x1, #0x0
 45c:	add	x0, x0, #0x0
 460:	mov	x3, #0x0                   	// #0
 464:	mov	x2, #0x0                   	// #0
 468:	bl	0 <ctf_dynhash_create>
 46c:	str	x0, [x19, #120]
 470:	cbz	x0, 4b4 <ctf_str_create_atoms+0x17c>
 474:	stp	x21, x22, [sp, #32]
 478:	ldr	x20, [x19, #368]
 47c:	b	384 <ctf_str_create_atoms+0x4c>
 480:	ldr	x0, [x19, #368]
 484:	mov	x1, x22
 488:	bl	0 <ctf_dynhash_remove>
 48c:	mov	x0, x20
 490:	bl	0 <free>
 494:	mov	x0, x23
 498:	bl	0 <free>
 49c:	ldr	x23, [sp, #48]
 4a0:	b	3a8 <ctf_str_create_atoms+0x70>
 4a4:	ldr	x0, [x19, #120]
 4a8:	bl	0 <ctf_dynhash_destroy>
 4ac:	ldp	x21, x22, [sp, #32]
 4b0:	str	xzr, [x19, #120]
 4b4:	ldr	x0, [x19, #368]
 4b8:	bl	0 <ctf_dynhash_destroy>
 4bc:	str	xzr, [x19, #368]
 4c0:	mov	w0, #0xfffffff4            	// #-12
 4c4:	b	3bc <ctf_str_create_atoms+0x84>
 4c8:	mov	w0, #0xfffffff4            	// #-12
 4cc:	b	3bc <ctf_str_create_atoms+0x84>
 4d0:	mov	x23, #0x0                   	// #0
 4d4:	b	48c <ctf_str_create_atoms+0x154>

00000000000004d8 <ctf_str_free_atoms>:
 4d8:	stp	x29, x30, [sp, #-32]!
 4dc:	mov	x29, sp
 4e0:	str	x19, [sp, #16]
 4e4:	mov	x19, x0
 4e8:	ldr	x0, [x0, #120]
 4ec:	bl	0 <ctf_dynhash_destroy>
 4f0:	ldr	x0, [x19, #368]
 4f4:	ldr	x19, [sp, #16]
 4f8:	ldp	x29, x30, [sp], #32
 4fc:	b	0 <ctf_dynhash_destroy>

0000000000000500 <ctf_str_add>:
 500:	cbz	x1, 5c4 <ctf_str_add+0xc4>
 504:	stp	x29, x30, [sp, #-48]!
 508:	mov	x29, sp
 50c:	stp	x19, x20, [sp, #16]
 510:	mov	x20, x0
 514:	ldr	x0, [x0, #368]
 518:	stp	x21, x22, [sp, #32]
 51c:	mov	x21, x1
 520:	bl	0 <ctf_dynhash_lookup>
 524:	mov	x2, x0
 528:	cbz	x0, 540 <ctf_str_add+0x40>
 52c:	ldr	w0, [x2, #24]
 530:	ldp	x19, x20, [sp, #16]
 534:	ldp	x21, x22, [sp, #32]
 538:	ldp	x29, x30, [sp], #48
 53c:	ret
 540:	mov	x1, #0x1                   	// #1
 544:	mov	x0, #0x28                  	// #40
 548:	bl	0 <calloc>
 54c:	mov	x19, x0
 550:	cbz	x0, 5f0 <ctf_str_add+0xf0>
 554:	mov	x0, x21
 558:	bl	0 <strdup>
 55c:	mov	x21, x0
 560:	mov	x22, x0
 564:	cbz	x0, 5f0 <ctf_str_add+0xf0>
 568:	mov	x1, x0
 56c:	mov	x2, x19
 570:	ldr	x0, [x20, #368]
 574:	bl	0 <ctf_dynhash_insert>
 578:	tbnz	w0, #31, 5cc <ctf_str_add+0xcc>
 57c:	ldr	w3, [x20, #384]
 580:	mov	x2, x21
 584:	ldr	x0, [x20, #120]
 588:	mov	w1, w3
 58c:	ldr	x4, [x20, #624]
 590:	str	x21, [x19]
 594:	str	w3, [x19, #24]
 598:	str	x4, [x19, #32]
 59c:	bl	0 <ctf_dynhash_insert>
 5a0:	tbnz	w0, #31, 5cc <ctf_str_add+0xcc>
 5a4:	ldr	x0, [x19]
 5a8:	bl	0 <strlen>
 5ac:	ldr	w1, [x20, #384]
 5b0:	mov	x2, x19
 5b4:	add	w1, w1, #0x1
 5b8:	add	w1, w1, w0
 5bc:	str	w1, [x20, #384]
 5c0:	b	52c <ctf_str_add+0x2c>
 5c4:	mov	w0, #0x0                   	// #0
 5c8:	ret
 5cc:	ldr	x0, [x20, #368]
 5d0:	mov	x1, x21
 5d4:	bl	0 <ctf_dynhash_remove>
 5d8:	mov	x0, x19
 5dc:	bl	0 <free>
 5e0:	mov	x0, x22
 5e4:	bl	0 <free>
 5e8:	mov	w0, #0x0                   	// #0
 5ec:	b	530 <ctf_str_add+0x30>
 5f0:	mov	x22, #0x0                   	// #0
 5f4:	b	5d8 <ctf_str_add+0xd8>

00000000000005f8 <ctf_str_add_ref>:
 5f8:	cbz	x1, 74c <ctf_str_add_ref+0x154>
 5fc:	stp	x29, x30, [sp, #-64]!
 600:	mov	x29, sp
 604:	stp	x19, x20, [sp, #16]
 608:	mov	x19, x0
 60c:	mov	x20, x1
 610:	ldr	x0, [x0, #368]
 614:	stp	x21, x22, [sp, #32]
 618:	mov	x22, x2
 61c:	str	x23, [sp, #48]
 620:	bl	0 <ctf_dynhash_lookup>
 624:	mov	x23, x0
 628:	mov	x0, #0x18                  	// #24
 62c:	bl	0 <malloc>
 630:	mov	x21, x0
 634:	cbz	x0, 734 <ctf_str_add_ref+0x13c>
 638:	str	x22, [x0, #16]
 63c:	cbz	x23, 670 <ctf_str_add_ref+0x78>
 640:	mov	x1, x0
 644:	add	x0, x23, #0x8
 648:	bl	0 <ctf_list_append>
 64c:	ldr	x0, [x19, #376]
 650:	add	x0, x0, #0x1
 654:	str	x0, [x19, #376]
 658:	ldr	w0, [x23, #24]
 65c:	ldp	x19, x20, [sp, #16]
 660:	ldp	x21, x22, [sp, #32]
 664:	ldr	x23, [sp, #48]
 668:	ldp	x29, x30, [sp], #64
 66c:	ret
 670:	mov	x1, #0x1                   	// #1
 674:	mov	x0, #0x28                  	// #40
 678:	bl	0 <calloc>
 67c:	mov	x22, x0
 680:	cbz	x0, 754 <ctf_str_add_ref+0x15c>
 684:	mov	x0, x20
 688:	bl	0 <strdup>
 68c:	mov	x20, x0
 690:	mov	x23, x0
 694:	cbz	x0, 754 <ctf_str_add_ref+0x15c>
 698:	mov	x1, x0
 69c:	mov	x2, x22
 6a0:	ldr	x0, [x19, #368]
 6a4:	bl	0 <ctf_dynhash_insert>
 6a8:	tbnz	w0, #31, 710 <ctf_str_add_ref+0x118>
 6ac:	ldr	w3, [x19, #384]
 6b0:	mov	x2, x20
 6b4:	ldr	x0, [x19, #120]
 6b8:	str	x20, [x22]
 6bc:	ldr	x4, [x19, #624]
 6c0:	str	w3, [x22, #24]
 6c4:	str	x4, [x22, #32]
 6c8:	mov	w1, w3
 6cc:	bl	0 <ctf_dynhash_insert>
 6d0:	tbnz	w0, #31, 710 <ctf_str_add_ref+0x118>
 6d4:	mov	x23, x22
 6d8:	ldr	x0, [x22], #8
 6dc:	bl	0 <strlen>
 6e0:	mov	x3, x0
 6e4:	ldr	w2, [x19, #384]
 6e8:	mov	x0, x22
 6ec:	mov	x1, x21
 6f0:	add	w2, w2, #0x1
 6f4:	add	w2, w2, w3
 6f8:	str	w2, [x19, #384]
 6fc:	bl	0 <ctf_list_append>
 700:	ldr	x0, [x19, #376]
 704:	add	x0, x0, #0x1
 708:	str	x0, [x19, #376]
 70c:	b	658 <ctf_str_add_ref+0x60>
 710:	ldr	x0, [x19, #368]
 714:	mov	x1, x20
 718:	bl	0 <ctf_dynhash_remove>
 71c:	mov	x0, x22
 720:	bl	0 <free>
 724:	mov	x0, x21
 728:	bl	0 <free>
 72c:	mov	x0, x23
 730:	bl	0 <free>
 734:	mov	w0, #0x0                   	// #0
 738:	ldp	x19, x20, [sp, #16]
 73c:	ldp	x21, x22, [sp, #32]
 740:	ldr	x23, [sp, #48]
 744:	ldp	x29, x30, [sp], #64
 748:	ret
 74c:	mov	w0, #0x0                   	// #0
 750:	ret
 754:	mov	x23, #0x0                   	// #0
 758:	b	71c <ctf_str_add_ref+0x124>
 75c:	nop

0000000000000760 <ctf_str_add_external>:
 760:	cbz	x1, 7f8 <ctf_str_add_external+0x98>
 764:	stp	x29, x30, [sp, #-48]!
 768:	mov	x29, sp
 76c:	stp	x21, x22, [sp, #32]
 770:	mov	x21, x0
 774:	ldr	x0, [x0, #368]
 778:	stp	x19, x20, [sp, #16]
 77c:	mov	w20, w2
 780:	mov	x19, x1
 784:	bl	0 <ctf_dynhash_lookup>
 788:	mov	x3, x0
 78c:	cbz	x0, 7ac <ctf_str_add_external+0x4c>
 790:	orr	w2, w20, #0x80000000
 794:	mov	w0, #0x1                   	// #1
 798:	str	w2, [x3, #28]
 79c:	ldp	x19, x20, [sp, #16]
 7a0:	ldp	x21, x22, [sp, #32]
 7a4:	ldp	x29, x30, [sp], #48
 7a8:	ret
 7ac:	mov	x1, #0x1                   	// #1
 7b0:	mov	x0, #0x28                  	// #40
 7b4:	bl	0 <calloc>
 7b8:	mov	x22, x0
 7bc:	cbz	x0, 824 <ctf_str_add_external+0xc4>
 7c0:	mov	x0, x19
 7c4:	bl	0 <strdup>
 7c8:	mov	x19, x0
 7cc:	cbz	x0, 824 <ctf_str_add_external+0xc4>
 7d0:	mov	x1, x0
 7d4:	mov	x2, x22
 7d8:	ldr	x0, [x21, #368]
 7dc:	bl	0 <ctf_dynhash_insert>
 7e0:	tbnz	w0, #31, 800 <ctf_str_add_external+0xa0>
 7e4:	ldr	x0, [x21, #624]
 7e8:	mov	x3, x22
 7ec:	str	x19, [x22]
 7f0:	str	x0, [x22, #32]
 7f4:	b	790 <ctf_str_add_external+0x30>
 7f8:	mov	w0, #0x0                   	// #0
 7fc:	ret
 800:	ldr	x0, [x21, #368]
 804:	mov	x1, x19
 808:	bl	0 <ctf_dynhash_remove>
 80c:	mov	x0, x22
 810:	bl	0 <free>
 814:	mov	x0, x19
 818:	bl	0 <free>
 81c:	mov	w0, #0x0                   	// #0
 820:	b	79c <ctf_str_add_external+0x3c>
 824:	mov	x19, #0x0                   	// #0
 828:	b	80c <ctf_str_add_external+0xac>
 82c:	nop

0000000000000830 <ctf_str_remove_ref>:
 830:	stp	x29, x30, [sp, #-48]!
 834:	mov	x29, sp
 838:	ldr	x0, [x0, #368]
 83c:	stp	x21, x22, [sp, #32]
 840:	mov	x21, x2
 844:	bl	0 <ctf_dynhash_lookup>
 848:	cbz	x0, 87c <ctf_str_remove_ref+0x4c>
 84c:	stp	x19, x20, [sp, #16]
 850:	ldr	x19, [x0, #16]
 854:	cbz	x19, 878 <ctf_str_remove_ref+0x48>
 858:	add	x22, x0, #0x8
 85c:	nop
 860:	mov	x20, x19
 864:	ldr	x19, [x19, #8]
 868:	ldr	x0, [x20, #16]
 86c:	cmp	x0, x21
 870:	b.eq	888 <ctf_str_remove_ref+0x58>  // b.none
 874:	cbnz	x19, 860 <ctf_str_remove_ref+0x30>
 878:	ldp	x19, x20, [sp, #16]
 87c:	ldp	x21, x22, [sp, #32]
 880:	ldp	x29, x30, [sp], #48
 884:	ret
 888:	mov	x1, x20
 88c:	mov	x0, x22
 890:	bl	0 <ctf_list_delete>
 894:	mov	x0, x20
 898:	bl	0 <free>
 89c:	cbnz	x19, 860 <ctf_str_remove_ref+0x30>
 8a0:	b	878 <ctf_str_remove_ref+0x48>
 8a4:	nop

00000000000008a8 <ctf_str_rollback>:
 8a8:	stp	x29, x30, [sp, #-32]!
 8ac:	adrp	x3, 0 <ctf_str_rollback_atom>
 8b0:	mov	x29, sp
 8b4:	ldr	x0, [x0, #368]
 8b8:	stp	x1, x2, [sp, #16]
 8bc:	add	x2, sp, #0x10
 8c0:	add	x1, x3, #0x0
 8c4:	bl	0 <ctf_dynhash_iter_remove>
 8c8:	ldp	x29, x30, [sp], #32
 8cc:	ret

00000000000008d0 <ctf_str_purge_refs>:
 8d0:	stp	x29, x30, [sp, #-32]!
 8d4:	mov	x29, sp
 8d8:	str	x19, [sp, #16]
 8dc:	mov	x19, x0
 8e0:	ldr	x0, [x0, #376]
 8e4:	cbnz	x0, 8f8 <ctf_str_purge_refs+0x28>
 8e8:	str	xzr, [x19, #376]
 8ec:	ldr	x19, [sp, #16]
 8f0:	ldp	x29, x30, [sp], #32
 8f4:	ret
 8f8:	ldr	x0, [x19, #368]
 8fc:	mov	x2, #0x0                   	// #0
 900:	adrp	x1, 0 <ctf_str_rollback_atom>
 904:	add	x1, x1, #0x0
 908:	bl	0 <ctf_dynhash_iter>
 90c:	str	xzr, [x19, #376]
 910:	ldr	x19, [sp, #16]
 914:	ldp	x29, x30, [sp], #32
 918:	ret
 91c:	nop

0000000000000920 <ctf_str_write_strtab>:
 920:	stp	x29, x30, [sp, #-128]!
 924:	adrp	x1, 0 <ctf_str_rollback_atom>
 928:	add	x1, x1, #0x0
 92c:	mov	x29, sp
 930:	stp	x21, x22, [sp, #32]
 934:	mov	x22, x0
 938:	add	x2, sp, #0x48
 93c:	ldr	x0, [x0, #368]
 940:	stp	xzr, xzr, [sp, #72]
 944:	str	x2, [sp, #88]
 948:	stp	xzr, xzr, [sp, #96]
 94c:	stp	xzr, xzr, [sp, #112]
 950:	bl	0 <ctf_dynhash_lookup>
 954:	cbz	x0, b18 <ctf_str_write_strtab+0x1f8>
 958:	stp	x19, x20, [sp, #16]
 95c:	mov	x19, x0
 960:	add	x2, sp, #0x58
 964:	ldr	x0, [x22, #368]
 968:	adrp	x1, 0 <ctf_str_rollback_atom>
 96c:	add	x1, x1, #0x0
 970:	str	x19, [sp, #120]
 974:	bl	0 <ctf_dynhash_iter>
 978:	ldr	x1, [sp, #80]
 97c:	adrp	x0, 0 <ctf_str_rollback_atom>
 980:	add	x0, x0, #0x0
 984:	add	x1, x1, #0x1
 988:	str	x1, [sp, #80]
 98c:	bl	0 <ctf_dprintf>
 990:	ldr	x0, [sp, #96]
 994:	mov	x1, #0x8                   	// #8
 998:	bl	0 <calloc>
 99c:	mov	x21, x0
 9a0:	cbz	x0, b04 <ctf_str_write_strtab+0x1e4>
 9a4:	ldr	x0, [x22, #368]
 9a8:	mov	x3, #0x1                   	// #1
 9ac:	add	x2, sp, #0x58
 9b0:	adrp	x1, 0 <ctf_str_rollback_atom>
 9b4:	add	x1, x1, #0x0
 9b8:	str	x19, [x21]
 9bc:	stp	x21, x3, [sp, #104]
 9c0:	bl	0 <ctf_dynhash_iter>
 9c4:	mov	x2, #0x8                   	// #8
 9c8:	ldr	x1, [sp, #96]
 9cc:	add	x0, x21, x2
 9d0:	adrp	x3, 0 <ctf_str_rollback_atom>
 9d4:	add	x3, x3, #0x0
 9d8:	sub	x1, x1, #0x1
 9dc:	bl	0 <qsort>
 9e0:	ldr	x0, [sp, #80]
 9e4:	bl	0 <malloc>
 9e8:	str	x0, [sp, #72]
 9ec:	cbz	x0, afc <ctf_str_write_strtab+0x1dc>
 9f0:	ldr	x0, [x22, #128]
 9f4:	cbz	x0, b50 <ctf_str_write_strtab+0x230>
 9f8:	ldr	x0, [sp, #96]
 9fc:	str	x23, [sp, #48]
 a00:	mov	x20, #0x0                   	// #0
 a04:	mov	w19, #0x0                   	// #0
 a08:	mov	w23, #0x0                   	// #0
 a0c:	cbz	x0, b38 <ctf_str_write_strtab+0x218>
 a10:	ldr	x4, [x21, x20, lsl #3]
 a14:	ldr	w1, [x4, #28]
 a18:	ldr	x2, [x4, #16]
 a1c:	cbz	w1, aa8 <ctf_str_write_strtab+0x188>
 a20:	cbz	x2, a3c <ctf_str_write_strtab+0x11c>
 a24:	nop
 a28:	ldr	x3, [x2, #16]
 a2c:	ldr	x2, [x2, #8]
 a30:	str	w1, [x3]
 a34:	cbnz	x2, a28 <ctf_str_write_strtab+0x108>
 a38:	ldr	w1, [x4, #28]
 a3c:	ldr	x2, [x4]
 a40:	mov	w1, w1
 a44:	ldr	x0, [x22, #128]
 a48:	bl	0 <ctf_dynhash_insert>
 a4c:	tbnz	w0, #31, aec <ctf_str_write_strtab+0x1cc>
 a50:	ldr	x0, [x21, x20, lsl #3]
 a54:	mov	w23, #0x1                   	// #1
 a58:	ldr	w1, [x0, #28]
 a5c:	str	w1, [x0, #24]
 a60:	ldr	x0, [sp, #96]
 a64:	add	x20, x20, #0x1
 a68:	cmp	x0, x20
 a6c:	b.hi	a10 <ctf_str_write_strtab+0xf0>  // b.pmore
 a70:	mov	x0, x21
 a74:	bl	0 <free>
 a78:	cbz	w23, b40 <ctf_str_write_strtab+0x220>
 a7c:	ldr	x0, [x22, #120]
 a80:	bl	0 <ctf_dynhash_empty>
 a84:	ldr	x2, [sp, #80]
 a88:	ldp	x19, x20, [sp, #16]
 a8c:	add	w2, w2, #0x1
 a90:	ldr	x23, [sp, #48]
 a94:	str	w2, [x22, #384]
 a98:	ldp	x21, x22, [sp, #32]
 a9c:	ldp	x0, x1, [sp, #72]
 aa0:	ldp	x29, x30, [sp], #128
 aa4:	ret
 aa8:	cbz	x2, ac0 <ctf_str_write_strtab+0x1a0>
 aac:	nop
 ab0:	ldr	x1, [x2, #16]
 ab4:	ldr	x2, [x2, #8]
 ab8:	str	w19, [x1]
 abc:	cbnz	x2, ab0 <ctf_str_write_strtab+0x190>
 ac0:	ldr	x1, [x4]
 ac4:	str	w19, [x4, #24]
 ac8:	ldr	x0, [sp, #72]
 acc:	add	x0, x0, w19, uxtw
 ad0:	bl	0 <strcpy>
 ad4:	ldr	x0, [x21, x20, lsl #3]
 ad8:	add	w19, w19, #0x1
 adc:	ldr	x0, [x0]
 ae0:	bl	0 <strlen>
 ae4:	add	w19, w19, w0
 ae8:	b	a60 <ctf_str_write_strtab+0x140>
 aec:	ldr	x23, [sp, #48]
 af0:	ldr	x0, [sp, #72]
 af4:	bl	0 <free>
 af8:	str	xzr, [sp, #72]
 afc:	mov	x0, x21
 b00:	bl	0 <free>
 b04:	ldp	x19, x20, [sp, #16]
 b08:	ldp	x21, x22, [sp, #32]
 b0c:	ldp	x0, x1, [sp, #72]
 b10:	ldp	x29, x30, [sp], #128
 b14:	ret
 b18:	adrp	x0, 0 <ctf_str_rollback_atom>
 b1c:	add	x0, x0, #0x0
 b20:	bl	0 <ctf_dprintf>
 b24:	str	xzr, [sp, #72]
 b28:	ldp	x21, x22, [sp, #32]
 b2c:	ldp	x0, x1, [sp, #72]
 b30:	ldp	x29, x30, [sp], #128
 b34:	ret
 b38:	mov	x0, x21
 b3c:	bl	0 <free>
 b40:	ldr	x0, [x22, #128]
 b44:	bl	0 <ctf_dynhash_destroy>
 b48:	str	xzr, [x22, #128]
 b4c:	b	a7c <ctf_str_write_strtab+0x15c>
 b50:	adrp	x1, 0 <ctf_hash_eq_integer>
 b54:	adrp	x0, 0 <ctf_hash_integer>
 b58:	add	x1, x1, #0x0
 b5c:	add	x0, x0, #0x0
 b60:	mov	x3, #0x0                   	// #0
 b64:	mov	x2, #0x0                   	// #0
 b68:	bl	0 <ctf_dynhash_create>
 b6c:	str	x0, [x22, #128]
 b70:	cbz	x0, af0 <ctf_str_write_strtab+0x1d0>
 b74:	b	9f8 <ctf_str_write_strtab+0xd8>

ctf-subr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_mmap>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x5, x1
   8:	mov	w4, w2
   c:	mov	x29, sp
  10:	mov	x1, x0
  14:	mov	w3, #0x2                   	// #2
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x0, #0x0                   	// #0
  20:	bl	0 <mmap>
  24:	cmn	x0, #0x1
  28:	csel	x0, x0, xzr, ne  // ne = any
  2c:	ldp	x29, x30, [sp], #16
  30:	ret
  34:	nop

0000000000000038 <ctf_munmap>:
  38:	b	0 <munmap>
  3c:	nop

0000000000000040 <ctf_pread>:
  40:	cmp	x2, #0x0
  44:	b.le	f0 <ctf_pread+0xb0>
  48:	stp	x29, x30, [sp, #-64]!
  4c:	mov	x29, sp
  50:	stp	x19, x20, [sp, #16]
  54:	mov	x19, x2
  58:	mov	x20, x1
  5c:	stp	x21, x22, [sp, #32]
  60:	mov	x21, x3
  64:	stp	x23, x24, [sp, #48]
  68:	mov	w23, w0
  6c:	bl	0 <__errno_location>
  70:	mov	x22, x0
  74:	mov	x24, #0x0                   	// #0
  78:	str	wzr, [x22]
  7c:	mov	x1, x20
  80:	mov	x3, x21
  84:	mov	x2, x19
  88:	mov	w0, w23
  8c:	bl	0 <pread>
  90:	ldr	w1, [x22]
  94:	tbnz	x0, #63, d4 <ctf_pread+0x94>
  98:	cmp	w1, #0x4
  9c:	b.eq	78 <ctf_pread+0x38>  // b.none
  a0:	sub	x19, x19, x0
  a4:	add	x24, x24, x0
  a8:	cbz	x0, bc <ctf_pread+0x7c>
  ac:	cmp	x19, #0x0
  b0:	add	x21, x21, x0
  b4:	add	x20, x20, x0
  b8:	b.gt	78 <ctf_pread+0x38>
  bc:	mov	x0, x24
  c0:	ldp	x19, x20, [sp, #16]
  c4:	ldp	x21, x22, [sp, #32]
  c8:	ldp	x23, x24, [sp, #48]
  cc:	ldp	x29, x30, [sp], #64
  d0:	ret
  d4:	cmp	w1, #0x4
  d8:	b.eq	78 <ctf_pread+0x38>  // b.none
  dc:	ldp	x19, x20, [sp, #16]
  e0:	ldp	x21, x22, [sp, #32]
  e4:	ldp	x23, x24, [sp, #48]
  e8:	ldp	x29, x30, [sp], #64
  ec:	ret
  f0:	mov	x0, #0x0                   	// #0
  f4:	ret

00000000000000f8 <ctf_strerror>:
  f8:	b	0 <strerror>
  fc:	nop

0000000000000100 <libctf_init_debug>:
 100:	stp	x29, x30, [sp, #-32]!
 104:	mov	x29, sp
 108:	stp	x19, x20, [sp, #16]
 10c:	adrp	x19, 0 <ctf_mmap>
 110:	ldr	w0, [x19]
 114:	cbz	w0, 124 <libctf_init_debug+0x24>
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret
 124:	add	x20, x19, #0x0
 128:	adrp	x0, 0 <ctf_mmap>
 12c:	add	x0, x0, #0x0
 130:	bl	0 <getenv>
 134:	cmp	x0, #0x0
 138:	mov	w1, #0x1                   	// #1
 13c:	cset	w0, ne  // ne = any
 140:	str	w1, [x19]
 144:	str	w0, [x20, #4]
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldp	x29, x30, [sp], #32
 150:	ret
 154:	nop

0000000000000158 <ctf_getdebug>:
 158:	adrp	x0, 0 <ctf_mmap>
 15c:	ldr	w0, [x0]
 160:	ret
 164:	nop

0000000000000168 <ctf_dprintf>:
 168:	stp	x29, x30, [sp, #-288]!
 16c:	adrp	x8, 0 <ctf_mmap>
 170:	mov	x29, sp
 174:	ldr	w8, [x8]
 178:	str	q0, [sp, #96]
 17c:	str	q1, [sp, #112]
 180:	str	q2, [sp, #128]
 184:	str	q3, [sp, #144]
 188:	str	q4, [sp, #160]
 18c:	str	q5, [sp, #176]
 190:	str	q6, [sp, #192]
 194:	str	q7, [sp, #208]
 198:	stp	x1, x2, [sp, #232]
 19c:	stp	x3, x4, [sp, #248]
 1a0:	stp	x5, x6, [sp, #264]
 1a4:	str	x7, [sp, #280]
 1a8:	cbnz	w8, 1b4 <ctf_dprintf+0x4c>
 1ac:	ldp	x29, x30, [sp], #288
 1b0:	ret
 1b4:	stp	x19, x20, [sp, #16]
 1b8:	mov	x19, x0
 1bc:	adrp	x0, 0 <stdout>
 1c0:	add	x4, sp, #0x120
 1c4:	add	x3, sp, #0xe0
 1c8:	ldr	x0, [x0]
 1cc:	mov	w2, #0xffffffc8            	// #-56
 1d0:	mov	w1, #0xffffff80            	// #-128
 1d4:	adrp	x20, 0 <stderr>
 1d8:	stp	x4, x4, [sp, #64]
 1dc:	str	x3, [sp, #80]
 1e0:	stp	w2, w1, [sp, #88]
 1e4:	bl	0 <fflush>
 1e8:	ldr	x3, [x20]
 1ec:	mov	x2, #0xe                   	// #14
 1f0:	mov	x1, #0x1                   	// #1
 1f4:	adrp	x0, 0 <ctf_mmap>
 1f8:	add	x0, x0, #0x0
 1fc:	bl	0 <fwrite>
 200:	ldp	x6, x7, [sp, #64]
 204:	mov	x1, x19
 208:	ldp	x4, x5, [sp, #80]
 20c:	add	x2, sp, #0x20
 210:	ldr	x0, [x20]
 214:	stp	x6, x7, [sp, #32]
 218:	stp	x4, x5, [sp, #48]
 21c:	bl	0 <vfprintf>
 220:	ldp	x19, x20, [sp, #16]
 224:	ldp	x29, x30, [sp], #288
 228:	ret
 22c:	nop

0000000000000230 <ctf_version>:
 230:	stp	x29, x30, [sp, #-32]!
 234:	cmp	w0, #0x0
 238:	mov	x29, sp
 23c:	b.lt	2a8 <ctf_version+0x78>  // b.tstop
 240:	b.eq	27c <ctf_version+0x4c>  // b.none
 244:	str	x19, [sp, #16]
 248:	cmp	w0, #0x4
 24c:	mov	w19, w0
 250:	b.ne	28c <ctf_version+0x5c>  // b.any
 254:	mov	w1, w19
 258:	adrp	x0, 0 <ctf_mmap>
 25c:	add	x0, x0, #0x0
 260:	bl	168 <ctf_dprintf>
 264:	adrp	x1, 0 <ctf_mmap>
 268:	mov	w0, w19
 26c:	str	w19, [x1]
 270:	ldr	x19, [sp, #16]
 274:	ldp	x29, x30, [sp], #32
 278:	ret
 27c:	adrp	x0, 0 <ctf_mmap>
 280:	ldr	w0, [x0]
 284:	ldp	x29, x30, [sp], #32
 288:	ret
 28c:	bl	0 <__errno_location>
 290:	mov	x1, x0
 294:	mov	w2, #0x5f                  	// #95
 298:	mov	w0, #0xffffffff            	// #-1
 29c:	ldr	x19, [sp, #16]
 2a0:	str	w2, [x1]
 2a4:	b	284 <ctf_version+0x54>
 2a8:	bl	0 <__errno_location>
 2ac:	mov	x1, x0
 2b0:	mov	w2, #0x16                  	// #22
 2b4:	mov	w0, #0xffffffff            	// #-1
 2b8:	str	w2, [x1]
 2bc:	b	284 <ctf_version+0x54>

00000000000002c0 <ctf_setdebug>:
 2c0:	stp	x29, x30, [sp, #-32]!
 2c4:	mov	x29, sp
 2c8:	stp	x19, x20, [sp, #16]
 2cc:	adrp	x19, 0 <ctf_mmap>
 2d0:	mov	w20, w0
 2d4:	ldr	w0, [x19]
 2d8:	cbz	w0, 2fc <ctf_setdebug+0x3c>
 2dc:	add	x19, x19, #0x0
 2e0:	mov	w1, w20
 2e4:	adrp	x0, 0 <ctf_mmap>
 2e8:	add	x0, x0, #0x0
 2ec:	str	w20, [x19, #4]
 2f0:	ldp	x19, x20, [sp, #16]
 2f4:	ldp	x29, x30, [sp], #32
 2f8:	b	168 <ctf_dprintf>
 2fc:	adrp	x0, 0 <ctf_mmap>
 300:	add	x0, x0, #0x0
 304:	bl	0 <getenv>
 308:	mov	w0, #0x1                   	// #1
 30c:	str	w0, [x19]
 310:	add	x19, x19, #0x0
 314:	mov	w1, w20
 318:	adrp	x0, 0 <ctf_mmap>
 31c:	add	x0, x0, #0x0
 320:	str	w20, [x19, #4]
 324:	ldp	x19, x20, [sp, #16]
 328:	ldp	x29, x30, [sp], #32
 32c:	b	168 <ctf_dprintf>

ctf-types.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_type_isparent>:
       0:	ldr	w0, [x0, #544]
       4:	cmp	x0, x1
       8:	cset	w0, cs  // cs = hs, nlast
       c:	ret

0000000000000010 <ctf_type_ischild>:
      10:	ldr	w0, [x0, #544]
      14:	cmp	x0, x1
      18:	cset	w0, cc  // cc = lo, ul, last
      1c:	ret

0000000000000020 <ctf_type_iter>:
      20:	stp	x29, x30, [sp, #-64]!
      24:	mov	x29, sp
      28:	stp	x21, x22, [sp, #32]
      2c:	ldr	w3, [x0, #552]
      30:	ldr	x22, [x0, #480]
      34:	cbz	x22, 14c <ctf_type_iter+0x12c>
      38:	stp	x19, x20, [sp, #16]
      3c:	mov	x21, x2
      40:	mov	x19, x0
      44:	str	x23, [sp, #48]
      48:	and	w0, w3, #0x1
      4c:	mov	x23, x1
      50:	mov	x20, #0x1                   	// #1
      54:	cbnz	w0, 128 <ctf_type_iter+0x108>
      58:	tbnz	w3, #1, ac <ctf_type_iter+0x8c>
      5c:	nop
      60:	ldr	x1, [x19, #440]
      64:	ldr	x0, [x19, #408]
      68:	ldr	w1, [x1, x20, lsl #2]
      6c:	add	x0, x0, x1
      70:	ldr	x1, [x19]
      74:	ldr	w0, [x0, #4]
      78:	ldr	x1, [x1, #8]
      7c:	blr	x1
      80:	mov	w2, w0
      84:	mov	x1, x21
      88:	mov	x0, x20
      8c:	add	x20, x20, #0x1
      90:	cbz	w2, 9c <ctf_type_iter+0x7c>
      94:	blr	x23
      98:	cbnz	w0, 15c <ctf_type_iter+0x13c>
      9c:	cmp	x22, x20
      a0:	b.cc	144 <ctf_type_iter+0x124>  // b.lo, b.ul, b.last
      a4:	ldr	w3, [x19, #552]
      a8:	tbz	w3, #1, 60 <ctf_type_iter+0x40>
      ac:	mov	x1, x20
      b0:	tbz	w3, #0, c0 <ctf_type_iter+0xa0>
      b4:	ldr	w1, [x19, #544]
      b8:	add	w1, w1, #0x1
      bc:	orr	x1, x1, x20
      c0:	mov	x0, x19
      c4:	bl	0 <ctf_dtd_lookup>
      c8:	add	x0, x0, #0x18
      cc:	b	70 <ctf_type_iter+0x50>
      d0:	mov	x1, x20
      d4:	tbz	w3, #0, e4 <ctf_type_iter+0xc4>
      d8:	ldr	w1, [x19, #544]
      dc:	add	w1, w1, #0x1
      e0:	orr	x1, x1, x20
      e4:	bl	0 <ctf_dtd_lookup>
      e8:	add	x0, x0, #0x18
      ec:	ldr	x1, [x19]
      f0:	ldr	w0, [x0, #4]
      f4:	ldr	x1, [x1, #8]
      f8:	blr	x1
      fc:	mov	x1, x21
     100:	cbz	w0, 118 <ctf_type_iter+0xf8>
     104:	ldr	w0, [x19, #544]
     108:	add	w0, w0, #0x1
     10c:	orr	x0, x0, x20
     110:	blr	x23
     114:	cbnz	w0, 15c <ctf_type_iter+0x13c>
     118:	add	x20, x20, #0x1
     11c:	cmp	x22, x20
     120:	b.cc	144 <ctf_type_iter+0x124>  // b.lo, b.ul, b.last
     124:	ldr	w3, [x19, #552]
     128:	mov	x0, x19
     12c:	tbnz	w3, #1, d0 <ctf_type_iter+0xb0>
     130:	ldr	x1, [x19, #440]
     134:	ldr	x0, [x19, #408]
     138:	ldr	w1, [x1, x20, lsl #2]
     13c:	add	x0, x0, x1
     140:	b	ec <ctf_type_iter+0xcc>
     144:	ldp	x19, x20, [sp, #16]
     148:	ldr	x23, [sp, #48]
     14c:	mov	w0, #0x0                   	// #0
     150:	ldp	x21, x22, [sp, #32]
     154:	ldp	x29, x30, [sp], #64
     158:	ret
     15c:	ldp	x19, x20, [sp, #16]
     160:	ldp	x21, x22, [sp, #32]
     164:	ldr	x23, [sp, #48]
     168:	ldp	x29, x30, [sp], #64
     16c:	ret

0000000000000170 <ctf_type_iter_all>:
     170:	stp	x29, x30, [sp, #-64]!
     174:	mov	x29, sp
     178:	stp	x23, x24, [sp, #48]
     17c:	ldr	w3, [x0, #552]
     180:	ldr	x24, [x0, #480]
     184:	cbz	x24, 230 <ctf_type_iter_all+0xc0>
     188:	stp	x19, x20, [sp, #16]
     18c:	mov	x23, x2
     190:	mov	x19, x0
     194:	stp	x21, x22, [sp, #32]
     198:	and	w0, w3, #0x1
     19c:	mov	x22, x1
     1a0:	cbz	w0, 240 <ctf_type_iter_all+0xd0>
     1a4:	mov	x21, #0x1                   	// #1
     1a8:	b	20c <ctf_type_iter_all+0x9c>
     1ac:	mov	x1, x21
     1b0:	tbz	w3, #0, 1c0 <ctf_type_iter_all+0x50>
     1b4:	ldr	w1, [x19, #544]
     1b8:	add	w1, w1, #0x1
     1bc:	orr	x1, x1, x21
     1c0:	bl	0 <ctf_dtd_lookup>
     1c4:	add	x0, x0, #0x18
     1c8:	ldr	x1, [x19]
     1cc:	ldr	w0, [x0, #4]
     1d0:	ldr	w20, [x19, #544]
     1d4:	ldr	x1, [x1, #8]
     1d8:	add	w20, w20, #0x1
     1dc:	orr	x20, x20, x21
     1e0:	add	x21, x21, #0x1
     1e4:	blr	x1
     1e8:	cmp	w0, #0x0
     1ec:	cset	w1, ne  // ne = any
     1f0:	mov	x0, x20
     1f4:	mov	x2, x23
     1f8:	blr	x22
     1fc:	cbnz	w0, 2b8 <ctf_type_iter_all+0x148>
     200:	cmp	x24, x21
     204:	b.cc	228 <ctf_type_iter_all+0xb8>  // b.lo, b.ul, b.last
     208:	ldr	w3, [x19, #552]
     20c:	mov	x0, x19
     210:	tbnz	w3, #1, 1ac <ctf_type_iter_all+0x3c>
     214:	ldr	x1, [x19, #440]
     218:	ldr	x0, [x19, #408]
     21c:	ldr	w1, [x1, x21, lsl #2]
     220:	add	x0, x0, x1
     224:	b	1c8 <ctf_type_iter_all+0x58>
     228:	ldp	x19, x20, [sp, #16]
     22c:	ldp	x21, x22, [sp, #32]
     230:	mov	w0, #0x0                   	// #0
     234:	ldp	x23, x24, [sp, #48]
     238:	ldp	x29, x30, [sp], #64
     23c:	ret
     240:	mov	x20, #0x1                   	// #1
     244:	tbnz	w3, #1, 294 <ctf_type_iter_all+0x124>
     248:	ldr	x1, [x19, #440]
     24c:	ldr	x0, [x19, #408]
     250:	ldr	w1, [x1, x20, lsl #2]
     254:	add	x0, x0, x1
     258:	ldr	x1, [x19]
     25c:	ldr	w0, [x0, #4]
     260:	ldr	x1, [x1, #8]
     264:	blr	x1
     268:	cmp	w0, #0x0
     26c:	mov	x2, x23
     270:	mov	x0, x20
     274:	cset	w1, ne  // ne = any
     278:	add	x20, x20, #0x1
     27c:	blr	x22
     280:	cbnz	w0, 2b8 <ctf_type_iter_all+0x148>
     284:	cmp	x24, x20
     288:	b.cc	228 <ctf_type_iter_all+0xb8>  // b.lo, b.ul, b.last
     28c:	ldr	w3, [x19, #552]
     290:	tbz	w3, #1, 248 <ctf_type_iter_all+0xd8>
     294:	mov	x1, x20
     298:	tbz	w3, #0, 2a8 <ctf_type_iter_all+0x138>
     29c:	ldr	w1, [x19, #544]
     2a0:	add	w1, w1, #0x1
     2a4:	orr	x1, x1, x20
     2a8:	mov	x0, x19
     2ac:	bl	0 <ctf_dtd_lookup>
     2b0:	add	x0, x0, #0x18
     2b4:	b	258 <ctf_type_iter_all+0xe8>
     2b8:	mov	w0, #0x1                   	// #1
     2bc:	ldp	x19, x20, [sp, #16]
     2c0:	ldp	x21, x22, [sp, #32]
     2c4:	ldp	x23, x24, [sp, #48]
     2c8:	ldp	x29, x30, [sp], #64
     2cc:	ret

00000000000002d0 <ctf_variable_iter>:
     2d0:	stp	x29, x30, [sp, #-64]!
     2d4:	mov	x29, sp
     2d8:	stp	x19, x20, [sp, #16]
     2dc:	mov	x19, x0
     2e0:	ldr	w0, [x0, #552]
     2e4:	stp	x21, x22, [sp, #32]
     2e8:	mov	x22, x1
     2ec:	str	x23, [sp, #48]
     2f0:	mov	x23, x2
     2f4:	tbz	w0, #0, 300 <ctf_variable_iter+0x30>
     2f8:	ldr	x1, [x19, #512]
     2fc:	cbz	x1, 3a4 <ctf_variable_iter+0xd4>
     300:	tbnz	w0, #1, 364 <ctf_variable_iter+0x94>
     304:	ldr	x0, [x19, #472]
     308:	mov	x21, #0x0                   	// #0
     30c:	cbnz	x0, 320 <ctf_variable_iter+0x50>
     310:	b	38c <ctf_variable_iter+0xbc>
     314:	ldr	x0, [x19, #472]
     318:	cmp	x0, x21
     31c:	b.ls	38c <ctf_variable_iter+0xbc>  // b.plast
     320:	ldr	x1, [x19, #464]
     324:	lsl	x20, x21, #3
     328:	mov	x0, x19
     32c:	add	x21, x21, #0x1
     330:	ldr	w1, [x1, x20]
     334:	bl	0 <ctf_strptr>
     338:	ldr	x1, [x19, #464]
     33c:	mov	x2, x23
     340:	add	x20, x1, x20
     344:	ldr	w1, [x20, #4]
     348:	blr	x22
     34c:	cbz	w0, 314 <ctf_variable_iter+0x44>
     350:	ldp	x19, x20, [sp, #16]
     354:	ldp	x21, x22, [sp, #32]
     358:	ldr	x23, [sp, #48]
     35c:	ldp	x29, x30, [sp], #64
     360:	ret
     364:	ldr	x19, [x19, #608]
     368:	cbnz	x19, 378 <ctf_variable_iter+0xa8>
     36c:	b	38c <ctf_variable_iter+0xbc>
     370:	ldr	x19, [x19, #8]
     374:	cbz	x19, 38c <ctf_variable_iter+0xbc>
     378:	ldp	x0, x1, [x19, #16]
     37c:	mov	x2, x23
     380:	blr	x22
     384:	cbz	w0, 370 <ctf_variable_iter+0xa0>
     388:	b	350 <ctf_variable_iter+0x80>
     38c:	mov	w0, #0x0                   	// #0
     390:	ldp	x19, x20, [sp, #16]
     394:	ldp	x21, x22, [sp, #32]
     398:	ldr	x23, [sp, #48]
     39c:	ldp	x29, x30, [sp], #64
     3a0:	ret
     3a4:	mov	w0, #0x3f3                 	// #1011
     3a8:	b	350 <ctf_variable_iter+0x80>
     3ac:	nop

00000000000003b0 <ctf_type_resolve>:
     3b0:	stp	x29, x30, [sp, #-80]!
     3b4:	mov	x29, sp
     3b8:	stp	x19, x20, [sp, #16]
     3bc:	str	x0, [sp, #72]
     3c0:	cbz	x1, 46c <ctf_type_resolve+0xbc>
     3c4:	mov	x20, x1
     3c8:	stp	x21, x22, [sp, #32]
     3cc:	mov	x22, x1
     3d0:	mov	x21, x1
     3d4:	str	x23, [sp, #48]
     3d8:	mov	x23, x0
     3dc:	b	3ec <ctf_type_resolve+0x3c>
     3e0:	mov	x21, x20
     3e4:	mov	x20, x2
     3e8:	cbz	x2, 4bc <ctf_type_resolve+0x10c>
     3ec:	mov	x1, x20
     3f0:	add	x0, sp, #0x48
     3f4:	bl	0 <ctf_lookup_by_id>
     3f8:	mov	x19, x0
     3fc:	cbz	x0, 488 <ctf_type_resolve+0xd8>
     400:	ldr	x1, [sp, #72]
     404:	ldr	w0, [x19, #4]
     408:	ldr	x1, [x1]
     40c:	ldr	x2, [x1]
     410:	blr	x2
     414:	sub	w0, w0, #0xa
     418:	cmp	w0, #0x3
     41c:	b.hi	4a4 <ctf_type_resolve+0xf4>  // b.pmore
     420:	ldr	w2, [x19, #8]
     424:	cmp	x2, x20
     428:	ccmp	x2, x22, #0x4, ne  // ne = any
     42c:	ccmp	x2, x21, #0x4, ne  // ne = any
     430:	b.ne	3e0 <ctf_type_resolve+0x30>  // b.any
     434:	mov	x1, x22
     438:	adrp	x0, 0 <ctf_type_isparent>
     43c:	add	x0, x0, #0x0
     440:	bl	0 <ctf_dprintf>
     444:	mov	x0, x23
     448:	mov	w1, #0x3ef                 	// #1007
     44c:	bl	0 <ctf_set_errno>
     450:	mov	x20, x0
     454:	mov	x0, x20
     458:	ldp	x19, x20, [sp, #16]
     45c:	ldp	x21, x22, [sp, #32]
     460:	ldr	x23, [sp, #48]
     464:	ldp	x29, x30, [sp], #80
     468:	ret
     46c:	mov	w1, #0x41b                 	// #1051
     470:	bl	0 <ctf_set_errno>
     474:	mov	x20, x0
     478:	mov	x0, x20
     47c:	ldp	x19, x20, [sp, #16]
     480:	ldp	x29, x30, [sp], #80
     484:	ret
     488:	mov	x20, #0xffffffffffffffff    	// #-1
     48c:	mov	x0, x20
     490:	ldp	x19, x20, [sp, #16]
     494:	ldp	x21, x22, [sp, #32]
     498:	ldr	x23, [sp, #48]
     49c:	ldp	x29, x30, [sp], #80
     4a0:	ret
     4a4:	mov	x0, x20
     4a8:	ldp	x19, x20, [sp, #16]
     4ac:	ldp	x21, x22, [sp, #32]
     4b0:	ldr	x23, [sp, #48]
     4b4:	ldp	x29, x30, [sp], #80
     4b8:	ret
     4bc:	mov	x0, x23
     4c0:	mov	w1, #0x41b                 	// #1051
     4c4:	bl	0 <ctf_set_errno>
     4c8:	mov	x20, x0
     4cc:	mov	x0, x20
     4d0:	ldp	x19, x20, [sp, #16]
     4d4:	ldp	x21, x22, [sp, #32]
     4d8:	ldr	x23, [sp, #48]
     4dc:	ldp	x29, x30, [sp], #80
     4e0:	ret
     4e4:	nop

00000000000004e8 <ctf_member_iter>:
     4e8:	stp	x29, x30, [sp, #-96]!
     4ec:	mov	x29, sp
     4f0:	stp	x19, x20, [sp, #16]
     4f4:	mov	x20, x2
     4f8:	stp	x21, x22, [sp, #32]
     4fc:	mov	x21, x3
     500:	str	x23, [sp, #48]
     504:	mov	x23, x0
     508:	str	x0, [sp, #72]
     50c:	bl	3b0 <ctf_type_resolve>
     510:	cmn	x0, #0x1
     514:	b.eq	6a8 <ctf_member_iter+0x1c0>  // b.none
     518:	mov	x1, x0
     51c:	mov	x22, x0
     520:	add	x0, sp, #0x48
     524:	bl	0 <ctf_lookup_by_id>
     528:	mov	x19, x0
     52c:	cbz	x0, 6a8 <ctf_member_iter+0x1c0>
     530:	mov	x1, x0
     534:	add	x3, sp, #0x58
     538:	ldr	x0, [sp, #72]
     53c:	add	x2, sp, #0x50
     540:	ldr	x4, [x0]
     544:	ldr	x4, [x4, #24]
     548:	blr	x4
     54c:	ldr	x1, [sp, #72]
     550:	ldr	w0, [x19, #4]
     554:	ldr	x1, [x1]
     558:	ldr	x1, [x1]
     55c:	blr	x1
     560:	sub	w1, w0, #0x6
     564:	cmp	w1, #0x1
     568:	b.hi	5b8 <ctf_member_iter+0xd0>  // b.pmore
     56c:	ldr	x0, [sp, #72]
     570:	mov	x1, x22
     574:	bl	0 <ctf_dynamic_type>
     578:	cbz	x0, 5f0 <ctf_member_iter+0x108>
     57c:	ldr	x19, [x0, #56]
     580:	cbnz	x19, 590 <ctf_member_iter+0xa8>
     584:	b	5d8 <ctf_member_iter+0xf0>
     588:	ldr	x19, [x19, #8]
     58c:	cbz	x19, 5d8 <ctf_member_iter+0xf0>
     590:	ldp	x0, x1, [x19, #16]
     594:	mov	x3, x21
     598:	ldr	x2, [x19, #32]
     59c:	blr	x20
     5a0:	cbz	w0, 588 <ctf_member_iter+0xa0>
     5a4:	ldp	x19, x20, [sp, #16]
     5a8:	ldp	x21, x22, [sp, #32]
     5ac:	ldr	x23, [sp, #48]
     5b0:	ldp	x29, x30, [sp], #96
     5b4:	ret
     5b8:	mov	x0, x23
     5bc:	mov	w1, #0x3fb                 	// #1019
     5c0:	bl	0 <ctf_set_errno>
     5c4:	ldp	x19, x20, [sp, #16]
     5c8:	ldp	x21, x22, [sp, #32]
     5cc:	ldr	x23, [sp, #48]
     5d0:	ldp	x29, x30, [sp], #96
     5d4:	ret
     5d8:	mov	w0, #0x0                   	// #0
     5dc:	ldp	x19, x20, [sp, #16]
     5e0:	ldp	x21, x22, [sp, #32]
     5e4:	ldr	x23, [sp, #48]
     5e8:	ldp	x29, x30, [sp], #96
     5ec:	ret
     5f0:	ldp	x1, x2, [sp, #72]
     5f4:	mov	x0, #0x1fffffff            	// #536870911
     5f8:	ldr	x1, [x1]
     5fc:	cmp	x2, x0
     600:	ldr	x2, [sp, #88]
     604:	ldr	w0, [x19, #4]
     608:	add	x19, x19, x2
     60c:	ldr	x1, [x1, #16]
     610:	b.gt	65c <ctf_member_iter+0x174>
     614:	blr	x1
     618:	cbz	w0, 5d8 <ctf_member_iter+0xf0>
     61c:	sub	w0, w0, #0x1
     620:	add	x22, x19, #0xc
     624:	mov	w1, #0xc                   	// #12
     628:	umaddl	x22, w0, w1, x22
     62c:	b	638 <ctf_member_iter+0x150>
     630:	cmp	x22, x19
     634:	b.eq	5d8 <ctf_member_iter+0xf0>  // b.none
     638:	ldr	w1, [x19]
     63c:	ldr	x0, [sp, #72]
     640:	bl	0 <ctf_strptr>
     644:	ldp	w2, w1, [x19, #4]
     648:	mov	x3, x21
     64c:	add	x19, x19, #0xc
     650:	blr	x20
     654:	cbz	w0, 630 <ctf_member_iter+0x148>
     658:	b	5a4 <ctf_member_iter+0xbc>
     65c:	blr	x1
     660:	cbz	w0, 5d8 <ctf_member_iter+0xf0>
     664:	sub	w0, w0, #0x1
     668:	add	x22, x19, #0x10
     66c:	add	x22, x22, w0, uxtw #4
     670:	b	678 <ctf_member_iter+0x190>
     674:	b.eq	5d8 <ctf_member_iter+0xf0>  // b.none
     678:	ldr	w1, [x19]
     67c:	ldr	x0, [sp, #72]
     680:	bl	0 <ctf_strptr>
     684:	ldp	w4, w1, [x19, #4]
     688:	mov	x3, x21
     68c:	ldr	w2, [x19, #12]
     690:	add	x19, x19, #0x10
     694:	orr	x2, x2, x4, lsl #32
     698:	blr	x20
     69c:	cmp	x22, x19
     6a0:	cbz	w0, 674 <ctf_member_iter+0x18c>
     6a4:	b	5a4 <ctf_member_iter+0xbc>
     6a8:	mov	w0, #0xffffffff            	// #-1
     6ac:	b	5a4 <ctf_member_iter+0xbc>

00000000000006b0 <ctf_type_rvisit>:
     6b0:	stp	x29, x30, [sp, #-128]!
     6b4:	mov	x29, sp
     6b8:	stp	x19, x20, [sp, #16]
     6bc:	mov	w20, w6
     6c0:	stp	x21, x22, [sp, #32]
     6c4:	mov	x21, x2
     6c8:	mov	x22, x3
     6cc:	stp	x23, x24, [sp, #48]
     6d0:	mov	x24, x4
     6d4:	stp	x25, x26, [sp, #64]
     6d8:	mov	x25, x5
     6dc:	mov	x26, x1
     6e0:	str	x0, [sp, #104]
     6e4:	bl	3b0 <ctf_type_resolve>
     6e8:	cmn	x0, #0x1
     6ec:	b.eq	8f8 <ctf_type_rvisit+0x248>  // b.none
     6f0:	mov	x1, x0
     6f4:	mov	x19, x0
     6f8:	add	x0, sp, #0x68
     6fc:	bl	0 <ctf_lookup_by_id>
     700:	mov	x23, x0
     704:	cbz	x0, 8f8 <ctf_type_rvisit+0x248>
     708:	mov	x0, x24
     70c:	mov	x1, x26
     710:	mov	x4, x22
     714:	mov	w3, w20
     718:	mov	x2, x25
     71c:	blr	x21
     720:	mov	w24, w0
     724:	cbnz	w0, 7a8 <ctf_type_rvisit+0xf8>
     728:	ldr	x1, [sp, #104]
     72c:	ldr	w0, [x23, #4]
     730:	ldr	x1, [x1]
     734:	ldr	x1, [x1]
     738:	blr	x1
     73c:	sub	w0, w0, #0x6
     740:	cmp	w0, #0x1
     744:	b.hi	7a8 <ctf_type_rvisit+0xf8>  // b.pmore
     748:	ldr	x0, [sp, #104]
     74c:	mov	x1, x23
     750:	add	x3, sp, #0x78
     754:	add	x2, sp, #0x70
     758:	ldr	x4, [x0]
     75c:	ldr	x4, [x4, #24]
     760:	blr	x4
     764:	ldr	x0, [sp, #104]
     768:	mov	x1, x19
     76c:	bl	0 <ctf_dynamic_type>
     770:	cbz	x0, 7e4 <ctf_type_rvisit+0x134>
     774:	ldr	x19, [x0, #56]
     778:	cbz	x19, 7a8 <ctf_type_rvisit+0xf8>
     77c:	add	w20, w20, #0x1
     780:	ldp	x4, x1, [x19, #16]
     784:	mov	w6, w20
     788:	ldr	x5, [x19, #32]
     78c:	mov	x3, x22
     790:	ldr	x0, [sp, #104]
     794:	mov	x2, x21
     798:	bl	6b0 <ctf_type_rvisit>
     79c:	cbnz	w0, 7c4 <ctf_type_rvisit+0x114>
     7a0:	ldr	x19, [x19, #8]
     7a4:	cbnz	x19, 780 <ctf_type_rvisit+0xd0>
     7a8:	mov	w0, w24
     7ac:	ldp	x19, x20, [sp, #16]
     7b0:	ldp	x21, x22, [sp, #32]
     7b4:	ldp	x23, x24, [sp, #48]
     7b8:	ldp	x25, x26, [sp, #64]
     7bc:	ldp	x29, x30, [sp], #128
     7c0:	ret
     7c4:	mov	w24, w0
     7c8:	mov	w0, w24
     7cc:	ldp	x19, x20, [sp, #16]
     7d0:	ldp	x21, x22, [sp, #32]
     7d4:	ldp	x23, x24, [sp, #48]
     7d8:	ldp	x25, x26, [sp, #64]
     7dc:	ldp	x29, x30, [sp], #128
     7e0:	ret
     7e4:	ldp	x1, x2, [sp, #104]
     7e8:	mov	x0, #0x1fffffff            	// #536870911
     7ec:	ldr	x1, [x1]
     7f0:	cmp	x2, x0
     7f4:	ldr	x2, [sp, #120]
     7f8:	ldr	w0, [x23, #4]
     7fc:	add	x23, x23, x2
     800:	ldr	x1, [x1, #16]
     804:	b.gt	878 <ctf_type_rvisit+0x1c8>
     808:	blr	x1
     80c:	cbz	w0, 7a8 <ctf_type_rvisit+0xf8>
     810:	sub	w0, w0, #0x1
     814:	add	x26, x23, #0xc
     818:	mov	w1, #0xc                   	// #12
     81c:	add	w20, w20, #0x1
     820:	str	x27, [sp, #80]
     824:	umaddl	x26, w0, w1, x26
     828:	ldr	w1, [x23]
     82c:	add	x23, x23, #0xc
     830:	ldr	x19, [sp, #104]
     834:	ldur	w27, [x23, #-4]
     838:	mov	x0, x19
     83c:	bl	0 <ctf_strptr>
     840:	ldur	w5, [x23, #-8]
     844:	mov	x4, x0
     848:	mov	x1, x27
     84c:	mov	x0, x19
     850:	mov	w6, w20
     854:	mov	x3, x22
     858:	mov	x2, x21
     85c:	add	x5, x5, x25
     860:	bl	6b0 <ctf_type_rvisit>
     864:	cbnz	w0, 8ec <ctf_type_rvisit+0x23c>
     868:	cmp	x26, x23
     86c:	b.ne	828 <ctf_type_rvisit+0x178>  // b.any
     870:	ldr	x27, [sp, #80]
     874:	b	7a8 <ctf_type_rvisit+0xf8>
     878:	blr	x1
     87c:	cbz	w0, 7a8 <ctf_type_rvisit+0xf8>
     880:	sub	w0, w0, #0x1
     884:	add	x19, x23, #0x10
     888:	add	w20, w20, #0x1
     88c:	str	x27, [sp, #80]
     890:	add	x19, x19, w0, uxtw #4
     894:	ldr	w1, [x23]
     898:	add	x23, x23, #0x10
     89c:	ldr	x26, [sp, #104]
     8a0:	ldur	w27, [x23, #-8]
     8a4:	mov	x0, x26
     8a8:	bl	0 <ctf_strptr>
     8ac:	ldur	w2, [x23, #-4]
     8b0:	mov	x4, x0
     8b4:	ldur	w5, [x23, #-12]
     8b8:	mov	x1, x27
     8bc:	mov	x0, x26
     8c0:	mov	w6, w20
     8c4:	mov	x3, x22
     8c8:	orr	x5, x2, x5, lsl #32
     8cc:	mov	x2, x21
     8d0:	add	x5, x5, x25
     8d4:	bl	6b0 <ctf_type_rvisit>
     8d8:	cbnz	w0, 8ec <ctf_type_rvisit+0x23c>
     8dc:	cmp	x19, x23
     8e0:	b.ne	894 <ctf_type_rvisit+0x1e4>  // b.any
     8e4:	ldr	x27, [sp, #80]
     8e8:	b	7a8 <ctf_type_rvisit+0xf8>
     8ec:	mov	w24, w0
     8f0:	ldr	x27, [sp, #80]
     8f4:	b	7a8 <ctf_type_rvisit+0xf8>
     8f8:	mov	w24, #0xffffffff            	// #-1
     8fc:	b	7a8 <ctf_type_rvisit+0xf8>

0000000000000900 <ctf_lookup_by_rawname>:
     900:	stp	x29, x30, [sp, #-32]!
     904:	mov	x29, sp
     908:	stp	x19, x20, [sp, #16]
     90c:	mov	x19, x0
     910:	mov	x20, x2
     914:	bl	0 <ctf_name_table>
     918:	ldr	w1, [x19, #552]
     91c:	tbz	w1, #1, 934 <ctf_lookup_by_rawname+0x34>
     920:	mov	x1, x20
     924:	ldp	x19, x20, [sp, #16]
     928:	ldp	x29, x30, [sp], #32
     92c:	ldr	x0, [x0, #8]
     930:	b	0 <ctf_dynhash_lookup>
     934:	mov	x2, x20
     938:	mov	x1, x19
     93c:	ldp	x19, x20, [sp, #16]
     940:	ldp	x29, x30, [sp], #32
     944:	ldr	x0, [x0]
     948:	b	0 <ctf_hash_lookup_type>
     94c:	nop

0000000000000950 <ctf_lookup_by_rawhash>:
     950:	mov	x3, x0
     954:	ldr	w0, [x0, #552]
     958:	tbz	w0, #1, 968 <ctf_lookup_by_rawhash+0x18>
     95c:	ldr	x0, [x1, #8]
     960:	mov	x1, x2
     964:	b	0 <ctf_dynhash_lookup>
     968:	ldr	x0, [x1]
     96c:	mov	x1, x3
     970:	b	0 <ctf_hash_lookup_type>
     974:	nop

0000000000000978 <ctf_type_aname>:
     978:	stp	x29, x30, [sp, #-208]!
     97c:	cmp	x0, #0x0
     980:	ccmn	x1, #0x1, #0x0, eq  // eq = none
     984:	mov	x29, sp
     988:	stp	x19, x20, [sp, #16]
     98c:	mov	x19, #0x0                   	// #0
     990:	b.eq	b14 <ctf_type_aname+0x19c>  // b.none
     994:	mov	x19, x1
     998:	stp	x21, x22, [sp, #32]
     99c:	mov	x22, x0
     9a0:	add	x0, sp, #0x68
     9a4:	bl	0 <ctf_decl_init>
     9a8:	add	x0, sp, #0x68
     9ac:	mov	x2, x19
     9b0:	mov	x1, x22
     9b4:	bl	0 <ctf_decl_push>
     9b8:	ldr	w0, [sp, #200]
     9bc:	cbnz	w0, ca4 <ctf_type_aname+0x32c>
     9c0:	ldp	w1, w0, [sp, #172]
     9c4:	stp	x23, x24, [sp, #48]
     9c8:	stp	x25, x26, [sp, #64]
     9cc:	cmp	w0, #0x2
     9d0:	stp	x27, x28, [sp, #80]
     9d4:	b.le	b24 <ctf_type_aname+0x1ac>
     9d8:	cmp	w1, #0x1
     9dc:	mov	w26, #0x2                   	// #2
     9e0:	mov	w21, #0x1                   	// #1
     9e4:	csel	w21, w26, w21, le
     9e8:	adrp	x25, 0 <ctf_type_isparent>
     9ec:	add	x24, sp, #0x70
     9f0:	add	x25, x25, #0x0
     9f4:	mov	w19, #0x3                   	// #3
     9f8:	mov	w20, #0x0                   	// #0
     9fc:	ldr	x28, [x24]
     a00:	cbz	x28, ad0 <ctf_type_aname+0x158>
     a04:	adrp	x0, 0 <ctf_type_isparent>
     a08:	add	x23, x0, #0x0
     a0c:	b	a48 <ctf_type_aname+0xd0>
     a10:	cmp	w19, #0x3
     a14:	b.eq	c5c <ctf_type_aname+0x2e4>  // b.none
     a18:	b.ls	b6c <ctf_type_aname+0x1f4>  // b.plast
     a1c:	cmp	w19, #0x4
     a20:	b.ne	bf0 <ctf_type_aname+0x278>  // b.any
     a24:	ldr	w2, [x28, #28]
     a28:	add	x0, sp, #0x68
     a2c:	adrp	x1, 0 <ctf_type_isparent>
     a30:	add	x1, x1, #0x0
     a34:	bl	0 <ctf_decl_sprintf>
     a38:	ldr	w19, [x28, #24]
     a3c:	nop
     a40:	ldr	x28, [x28, #8]
     a44:	cbz	x28, ad0 <ctf_type_aname+0x158>
     a48:	ldr	x1, [x28, #16]
     a4c:	add	x0, sp, #0x60
     a50:	str	x22, [sp, #96]
     a54:	sub	w19, w19, #0x3
     a58:	bl	0 <ctf_lookup_by_id>
     a5c:	ldr	w1, [x0]
     a60:	ldr	x0, [sp, #96]
     a64:	bl	0 <ctf_strptr>
     a68:	mov	x27, x0
     a6c:	cmp	w19, #0x1
     a70:	b.ls	a80 <ctf_type_aname+0x108>  // b.plast
     a74:	mov	x1, x23
     a78:	add	x0, sp, #0x68
     a7c:	bl	0 <ctf_decl_sprintf>
     a80:	cmp	w21, w20
     a84:	b.eq	bb8 <ctf_type_aname+0x240>  // b.none
     a88:	ldr	w19, [x28, #24]
     a8c:	cmp	w19, #0x8
     a90:	b.eq	bd4 <ctf_type_aname+0x25c>  // b.none
     a94:	b.hi	b40 <ctf_type_aname+0x1c8>  // b.pmore
     a98:	cmp	w19, #0x5
     a9c:	b.eq	c44 <ctf_type_aname+0x2cc>  // b.none
     aa0:	b.ls	a10 <ctf_type_aname+0x98>  // b.plast
     aa4:	cmp	w19, #0x6
     aa8:	b.eq	c10 <ctf_type_aname+0x298>  // b.none
     aac:	mov	x2, x27
     ab0:	add	x0, sp, #0x68
     ab4:	adrp	x1, 0 <ctf_type_isparent>
     ab8:	add	x1, x1, #0x0
     abc:	bl	0 <ctf_decl_sprintf>
     ac0:	ldr	w19, [x28, #24]
     ac4:	ldr	x28, [x28, #8]
     ac8:	cbnz	x28, a48 <ctf_type_aname+0xd0>
     acc:	nop
     ad0:	cmp	w20, w26
     ad4:	add	w20, w20, #0x1
     ad8:	b.eq	c74 <ctf_type_aname+0x2fc>  // b.none
     adc:	add	x24, x24, #0x10
     ae0:	cmp	w20, #0x4
     ae4:	b.ne	9fc <ctf_type_aname+0x84>  // b.any
     ae8:	ldr	w0, [sp, #204]
     aec:	cbnz	w0, c94 <ctf_type_aname+0x31c>
     af0:	add	x0, sp, #0x68
     af4:	bl	0 <ctf_decl_buf>
     af8:	mov	x19, x0
     afc:	add	x0, sp, #0x68
     b00:	bl	0 <ctf_decl_fini>
     b04:	ldp	x21, x22, [sp, #32]
     b08:	ldp	x23, x24, [sp, #48]
     b0c:	ldp	x25, x26, [sp, #64]
     b10:	ldp	x27, x28, [sp, #80]
     b14:	mov	x0, x19
     b18:	ldp	x19, x20, [sp, #16]
     b1c:	ldp	x29, x30, [sp], #208
     b20:	ret
     b24:	mov	w26, #0x1                   	// #1
     b28:	cmp	w1, #0x1
     b2c:	mov	w21, w26
     b30:	b.gt	9e8 <ctf_type_aname+0x70>
     b34:	mov	w26, #0xffffffff            	// #-1
     b38:	mov	w21, w26
     b3c:	b	9e8 <ctf_type_aname+0x70>
     b40:	cmp	w19, #0xc
     b44:	b.eq	bf8 <ctf_type_aname+0x280>  // b.none
     b48:	b.ls	b94 <ctf_type_aname+0x21c>  // b.plast
     b4c:	cmp	w19, #0xd
     b50:	b.ne	a40 <ctf_type_aname+0xc8>  // b.any
     b54:	add	x0, sp, #0x68
     b58:	adrp	x1, 0 <ctf_type_isparent>
     b5c:	add	x1, x1, #0x0
     b60:	bl	0 <ctf_decl_sprintf>
     b64:	ldr	w19, [x28, #24]
     b68:	b	a40 <ctf_type_aname+0xc8>
     b6c:	sub	w0, w19, #0x1
     b70:	cmp	w0, #0x1
     b74:	b.hi	a40 <ctf_type_aname+0xc8>  // b.pmore
     b78:	mov	x2, x27
     b7c:	add	x0, sp, #0x68
     b80:	adrp	x1, 0 <ctf_type_isparent>
     b84:	add	x1, x1, #0x0
     b88:	bl	0 <ctf_decl_sprintf>
     b8c:	ldr	w19, [x28, #24]
     b90:	b	a40 <ctf_type_aname+0xc8>
     b94:	cmp	w19, #0xb
     b98:	b.eq	c2c <ctf_type_aname+0x2b4>  // b.none
     b9c:	cmp	w19, #0xc
     ba0:	b.eq	a40 <ctf_type_aname+0xc8>  // b.none
     ba4:	cmp	w19, #0x9
     ba8:	b.eq	c10 <ctf_type_aname+0x298>  // b.none
     bac:	cmp	w19, #0xa
     bb0:	b.eq	b78 <ctf_type_aname+0x200>  // b.none
     bb4:	b	a40 <ctf_type_aname+0xc8>
     bb8:	mov	x1, x25
     bbc:	add	x0, sp, #0x68
     bc0:	bl	0 <ctf_decl_sprintf>
     bc4:	ldr	w19, [x28, #24]
     bc8:	mov	w21, #0xffffffff            	// #-1
     bcc:	cmp	w19, #0x8
     bd0:	b.ne	a94 <ctf_type_aname+0x11c>  // b.any
     bd4:	mov	x2, x27
     bd8:	add	x0, sp, #0x68
     bdc:	adrp	x1, 0 <ctf_type_isparent>
     be0:	add	x1, x1, #0x0
     be4:	bl	0 <ctf_decl_sprintf>
     be8:	ldr	w19, [x28, #24]
     bec:	b	a40 <ctf_type_aname+0xc8>
     bf0:	mov	w19, #0x5                   	// #5
     bf4:	b	a40 <ctf_type_aname+0xc8>
     bf8:	add	x0, sp, #0x68
     bfc:	adrp	x1, 0 <ctf_type_isparent>
     c00:	add	x1, x1, #0x0
     c04:	bl	0 <ctf_decl_sprintf>
     c08:	ldr	w19, [x28, #24]
     c0c:	b	a40 <ctf_type_aname+0xc8>
     c10:	mov	x2, x27
     c14:	add	x0, sp, #0x68
     c18:	adrp	x1, 0 <ctf_type_isparent>
     c1c:	add	x1, x1, #0x0
     c20:	bl	0 <ctf_decl_sprintf>
     c24:	ldr	w19, [x28, #24]
     c28:	b	a40 <ctf_type_aname+0xc8>
     c2c:	add	x0, sp, #0x68
     c30:	adrp	x1, 0 <ctf_type_isparent>
     c34:	add	x1, x1, #0x0
     c38:	bl	0 <ctf_decl_sprintf>
     c3c:	ldr	w19, [x28, #24]
     c40:	b	a40 <ctf_type_aname+0xc8>
     c44:	add	x0, sp, #0x68
     c48:	adrp	x1, 0 <ctf_type_isparent>
     c4c:	add	x1, x1, #0x0
     c50:	bl	0 <ctf_decl_sprintf>
     c54:	ldr	w19, [x28, #24]
     c58:	b	a40 <ctf_type_aname+0xc8>
     c5c:	add	x0, sp, #0x68
     c60:	adrp	x1, 0 <ctf_type_isparent>
     c64:	add	x1, x1, #0x0
     c68:	bl	0 <ctf_decl_sprintf>
     c6c:	ldr	w19, [x28, #24]
     c70:	b	a40 <ctf_type_aname+0xc8>
     c74:	add	x0, sp, #0x68
     c78:	adrp	x1, 0 <ctf_type_isparent>
     c7c:	add	x1, x1, #0x0
     c80:	bl	0 <ctf_decl_sprintf>
     c84:	add	x24, x24, #0x10
     c88:	cmp	w20, #0x4
     c8c:	b.ne	9fc <ctf_type_aname+0x84>  // b.any
     c90:	b	ae8 <ctf_type_aname+0x170>
     c94:	mov	x0, x22
     c98:	mov	w1, #0xc                   	// #12
     c9c:	bl	0 <ctf_set_errno>
     ca0:	b	af0 <ctf_type_aname+0x178>
     ca4:	add	x0, sp, #0x68
     ca8:	bl	0 <ctf_decl_fini>
     cac:	ldr	w1, [sp, #200]
     cb0:	mov	x0, x22
     cb4:	mov	x19, #0x0                   	// #0
     cb8:	bl	0 <ctf_set_errno>
     cbc:	ldp	x21, x22, [sp, #32]
     cc0:	b	b14 <ctf_type_aname+0x19c>
     cc4:	nop

0000000000000cc8 <ctf_type_lname>:
     cc8:	stp	x29, x30, [sp, #-64]!
     ccc:	mov	x29, sp
     cd0:	stp	x21, x22, [sp, #32]
     cd4:	mov	x22, x2
     cd8:	mov	x21, x3
     cdc:	str	x23, [sp, #48]
     ce0:	mov	x23, x0
     ce4:	bl	978 <ctf_type_aname>
     ce8:	cbz	x0, d4c <ctf_type_lname+0x84>
     cec:	stp	x19, x20, [sp, #16]
     cf0:	mov	x20, x0
     cf4:	bl	0 <strlen>
     cf8:	mov	x3, x20
     cfc:	mov	x1, x21
     d00:	adrp	x2, 0 <ctf_type_isparent>
     d04:	add	x2, x2, #0x0
     d08:	mov	x19, x0
     d0c:	mov	x0, x22
     d10:	bl	0 <snprintf>
     d14:	mov	x0, x20
     d18:	bl	0 <free>
     d1c:	cmp	x19, x21
     d20:	b.cs	d3c <ctf_type_lname+0x74>  // b.hs, b.nlast
     d24:	mov	x0, x19
     d28:	ldp	x19, x20, [sp, #16]
     d2c:	ldp	x21, x22, [sp, #32]
     d30:	ldr	x23, [sp, #48]
     d34:	ldp	x29, x30, [sp], #64
     d38:	ret
     d3c:	mov	x0, x23
     d40:	mov	w1, #0x401                 	// #1025
     d44:	bl	0 <ctf_set_errno>
     d48:	b	d24 <ctf_type_lname+0x5c>
     d4c:	mov	x0, #0xffffffffffffffff    	// #-1
     d50:	b	d2c <ctf_type_lname+0x64>
     d54:	nop

0000000000000d58 <ctf_type_name>:
     d58:	stp	x29, x30, [sp, #-64]!
     d5c:	mov	x29, sp
     d60:	stp	x19, x20, [sp, #16]
     d64:	mov	x20, x2
     d68:	stp	x21, x22, [sp, #32]
     d6c:	mov	x21, x3
     d70:	str	x23, [sp, #48]
     d74:	mov	x23, x0
     d78:	bl	978 <ctf_type_aname>
     d7c:	cbz	x0, dd8 <ctf_type_name+0x80>
     d80:	mov	x19, x0
     d84:	bl	0 <strlen>
     d88:	mov	x3, x19
     d8c:	mov	x1, x21
     d90:	adrp	x2, 0 <ctf_type_isparent>
     d94:	add	x2, x2, #0x0
     d98:	mov	x22, x0
     d9c:	mov	x0, x20
     da0:	bl	0 <snprintf>
     da4:	mov	x0, x19
     da8:	bl	0 <free>
     dac:	cmp	x21, x22
     db0:	b.ls	dcc <ctf_type_name+0x74>  // b.plast
     db4:	mov	x0, x20
     db8:	ldp	x19, x20, [sp, #16]
     dbc:	ldp	x21, x22, [sp, #32]
     dc0:	ldr	x23, [sp, #48]
     dc4:	ldp	x29, x30, [sp], #64
     dc8:	ret
     dcc:	mov	x0, x23
     dd0:	mov	w1, #0x401                 	// #1025
     dd4:	bl	0 <ctf_set_errno>
     dd8:	mov	x20, #0x0                   	// #0
     ddc:	mov	x0, x20
     de0:	ldp	x19, x20, [sp, #16]
     de4:	ldp	x21, x22, [sp, #32]
     de8:	ldr	x23, [sp, #48]
     dec:	ldp	x29, x30, [sp], #64
     df0:	ret
     df4:	nop

0000000000000df8 <ctf_type_aname_raw>:
     df8:	stp	x29, x30, [sp, #-48]!
     dfc:	mov	x29, sp
     e00:	str	x0, [sp, #40]
     e04:	add	x0, sp, #0x28
     e08:	bl	0 <ctf_lookup_by_id>
     e0c:	cbz	x0, e48 <ctf_type_aname_raw+0x50>
     e10:	ldr	w1, [x0]
     e14:	str	x19, [sp, #16]
     e18:	mov	x19, x0
     e1c:	ldr	x0, [sp, #40]
     e20:	bl	0 <ctf_strraw>
     e24:	cbz	x0, e44 <ctf_type_aname_raw+0x4c>
     e28:	ldr	w1, [x19]
     e2c:	ldr	x0, [sp, #40]
     e30:	bl	0 <ctf_strraw>
     e34:	bl	0 <strdup>
     e38:	ldr	x19, [sp, #16]
     e3c:	ldp	x29, x30, [sp], #48
     e40:	ret
     e44:	ldr	x19, [sp, #16]
     e48:	mov	x0, #0x0                   	// #0
     e4c:	ldp	x29, x30, [sp], #48
     e50:	ret
     e54:	nop

0000000000000e58 <ctf_type_kind_unsliced>:
     e58:	stp	x29, x30, [sp, #-32]!
     e5c:	mov	x29, sp
     e60:	str	x0, [sp, #24]
     e64:	add	x0, sp, #0x18
     e68:	bl	0 <ctf_lookup_by_id>
     e6c:	cbz	x0, e8c <ctf_type_kind_unsliced+0x34>
     e70:	ldr	x1, [sp, #24]
     e74:	ldr	w0, [x0, #4]
     e78:	ldr	x1, [x1]
     e7c:	ldr	x1, [x1]
     e80:	blr	x1
     e84:	ldp	x29, x30, [sp], #32
     e88:	ret
     e8c:	mov	w0, #0xffffffff            	// #-1
     e90:	b	e84 <ctf_type_kind_unsliced+0x2c>
     e94:	nop

0000000000000e98 <ctf_type_reference>:
     e98:	stp	x29, x30, [sp, #-64]!
     e9c:	mov	x29, sp
     ea0:	stp	x19, x20, [sp, #16]
     ea4:	mov	x20, x0
     ea8:	str	x0, [sp, #40]
     eac:	add	x0, sp, #0x28
     eb0:	bl	0 <ctf_lookup_by_id>
     eb4:	cbz	x0, f48 <ctf_type_reference+0xb0>
     eb8:	ldr	x1, [sp, #40]
     ebc:	mov	x19, x0
     ec0:	ldr	w0, [x0, #4]
     ec4:	ldr	x1, [x1]
     ec8:	ldr	x1, [x1]
     ecc:	blr	x1
     ed0:	cmp	w0, #0xd
     ed4:	b.ls	f10 <ctf_type_reference+0x78>  // b.plast
     ed8:	cmp	w0, #0xe
     edc:	b.ne	f20 <ctf_type_reference+0x88>  // b.any
     ee0:	ldr	x0, [sp, #40]
     ee4:	add	x3, sp, #0x38
     ee8:	mov	x1, x19
     eec:	mov	x2, #0x0                   	// #0
     ef0:	ldr	x4, [x0]
     ef4:	ldr	x4, [x4, #24]
     ef8:	blr	x4
     efc:	ldr	x0, [sp, #56]
     f00:	ldr	w0, [x19, x0]
     f04:	ldp	x19, x20, [sp, #16]
     f08:	ldp	x29, x30, [sp], #64
     f0c:	ret
     f10:	cmp	w0, #0x9
     f14:	b.hi	f38 <ctf_type_reference+0xa0>  // b.pmore
     f18:	cmp	w0, #0x3
     f1c:	b.eq	f38 <ctf_type_reference+0xa0>  // b.none
     f20:	mov	x0, x20
     f24:	mov	w1, #0x400                 	// #1024
     f28:	bl	0 <ctf_set_errno>
     f2c:	ldp	x19, x20, [sp, #16]
     f30:	ldp	x29, x30, [sp], #64
     f34:	ret
     f38:	ldr	w0, [x19, #8]
     f3c:	ldp	x19, x20, [sp, #16]
     f40:	ldp	x29, x30, [sp], #64
     f44:	ret
     f48:	mov	x0, #0xffffffffffffffff    	// #-1
     f4c:	ldp	x19, x20, [sp, #16]
     f50:	ldp	x29, x30, [sp], #64
     f54:	ret

0000000000000f58 <ctf_type_resolve_unsliced>:
     f58:	stp	x29, x30, [sp, #-48]!
     f5c:	mov	x29, sp
     f60:	str	x19, [sp, #16]
     f64:	str	x0, [sp, #40]
     f68:	bl	3b0 <ctf_type_resolve>
     f6c:	cmn	x0, #0x1
     f70:	b.eq	fb4 <ctf_type_resolve_unsliced+0x5c>  // b.none
     f74:	mov	x19, x0
     f78:	mov	x1, x0
     f7c:	add	x0, sp, #0x28
     f80:	bl	0 <ctf_lookup_by_id>
     f84:	cbz	x0, fb4 <ctf_type_resolve_unsliced+0x5c>
     f88:	ldr	x1, [sp, #40]
     f8c:	ldr	w0, [x0, #4]
     f90:	ldr	x1, [x1]
     f94:	ldr	x1, [x1]
     f98:	blr	x1
     f9c:	cmp	w0, #0xe
     fa0:	b.eq	fc8 <ctf_type_resolve_unsliced+0x70>  // b.none
     fa4:	mov	x0, x19
     fa8:	ldr	x19, [sp, #16]
     fac:	ldp	x29, x30, [sp], #48
     fb0:	ret
     fb4:	mov	x19, #0xffffffffffffffff    	// #-1
     fb8:	mov	x0, x19
     fbc:	ldr	x19, [sp, #16]
     fc0:	ldp	x29, x30, [sp], #48
     fc4:	ret
     fc8:	ldr	x0, [sp, #40]
     fcc:	mov	x1, x19
     fd0:	bl	e98 <ctf_type_reference>
     fd4:	mov	x19, x0
     fd8:	b	fa4 <ctf_type_resolve_unsliced+0x4c>
     fdc:	nop

0000000000000fe0 <ctf_type_kind>:
     fe0:	stp	x29, x30, [sp, #-48]!
     fe4:	mov	x29, sp
     fe8:	stp	x19, x20, [sp, #16]
     fec:	mov	x19, x0
     ff0:	mov	x20, x1
     ff4:	add	x0, sp, #0x28
     ff8:	str	x19, [sp, #40]
     ffc:	bl	0 <ctf_lookup_by_id>
    1000:	cbz	x0, 1078 <ctf_type_kind+0x98>
    1004:	ldr	x1, [sp, #40]
    1008:	ldr	w0, [x0, #4]
    100c:	ldr	x1, [x1]
    1010:	ldr	x1, [x1]
    1014:	blr	x1
    1018:	tbnz	w0, #31, 1078 <ctf_type_kind+0x98>
    101c:	cmp	w0, #0xe
    1020:	b.eq	1030 <ctf_type_kind+0x50>  // b.none
    1024:	ldp	x19, x20, [sp, #16]
    1028:	ldp	x29, x30, [sp], #48
    102c:	ret
    1030:	mov	x1, x20
    1034:	mov	x0, x19
    1038:	bl	e98 <ctf_type_reference>
    103c:	mov	x1, x0
    1040:	cmn	x0, #0x1
    1044:	b.eq	1078 <ctf_type_kind+0x98>  // b.none
    1048:	add	x0, sp, #0x28
    104c:	str	x19, [sp, #40]
    1050:	bl	0 <ctf_lookup_by_id>
    1054:	cbz	x0, 1078 <ctf_type_kind+0x98>
    1058:	ldr	x1, [sp, #40]
    105c:	ldr	w0, [x0, #4]
    1060:	ldr	x1, [x1]
    1064:	ldr	x1, [x1]
    1068:	blr	x1
    106c:	ldp	x19, x20, [sp, #16]
    1070:	ldp	x29, x30, [sp], #48
    1074:	ret
    1078:	mov	w0, #0xffffffff            	// #-1
    107c:	b	1024 <ctf_type_kind+0x44>

0000000000001080 <ctf_enum_iter>:
    1080:	stp	x29, x30, [sp, #-96]!
    1084:	mov	x29, sp
    1088:	stp	x19, x20, [sp, #16]
    108c:	mov	x20, x2
    1090:	stp	x21, x22, [sp, #32]
    1094:	mov	x21, x3
    1098:	str	x23, [sp, #48]
    109c:	mov	x23, x0
    10a0:	str	x0, [sp, #72]
    10a4:	str	x0, [sp, #88]
    10a8:	bl	3b0 <ctf_type_resolve>
    10ac:	cmn	x0, #0x1
    10b0:	b.eq	11cc <ctf_enum_iter+0x14c>  // b.none
    10b4:	mov	x22, x0
    10b8:	mov	x1, x0
    10bc:	add	x0, sp, #0x58
    10c0:	bl	0 <ctf_lookup_by_id>
    10c4:	cbz	x0, 11cc <ctf_enum_iter+0x14c>
    10c8:	ldr	x1, [sp, #88]
    10cc:	ldr	w0, [x0, #4]
    10d0:	ldr	x1, [x1]
    10d4:	ldr	x1, [x1]
    10d8:	blr	x1
    10dc:	cmp	w0, #0xe
    10e0:	b.eq	11b4 <ctf_enum_iter+0x134>  // b.none
    10e4:	mov	x1, x22
    10e8:	add	x0, sp, #0x48
    10ec:	bl	0 <ctf_lookup_by_id>
    10f0:	mov	x19, x0
    10f4:	cbz	x0, 11cc <ctf_enum_iter+0x14c>
    10f8:	ldr	x1, [sp, #72]
    10fc:	ldr	w0, [x0, #4]
    1100:	ldr	x1, [x1]
    1104:	ldr	x1, [x1]
    1108:	blr	x1
    110c:	cmp	w0, #0x8
    1110:	b.ne	1194 <ctf_enum_iter+0x114>  // b.any
    1114:	ldr	x0, [sp, #72]
    1118:	add	x3, sp, #0x58
    111c:	mov	x2, #0x0                   	// #0
    1120:	mov	x1, x19
    1124:	ldr	x4, [x0]
    1128:	ldr	x4, [x4, #24]
    112c:	blr	x4
    1130:	mov	x1, x22
    1134:	mov	x0, x23
    1138:	bl	0 <ctf_dynamic_type>
    113c:	cbz	x0, 11e4 <ctf_enum_iter+0x164>
    1140:	ldr	x19, [x0, #56]
    1144:	cbnz	x19, 1154 <ctf_enum_iter+0xd4>
    1148:	b	117c <ctf_enum_iter+0xfc>
    114c:	ldr	x19, [x19, #8]
    1150:	cbz	x19, 117c <ctf_enum_iter+0xfc>
    1154:	ldr	w1, [x19, #40]
    1158:	mov	x2, x21
    115c:	ldr	x0, [x19, #16]
    1160:	blr	x20
    1164:	cbz	w0, 114c <ctf_enum_iter+0xcc>
    1168:	ldp	x19, x20, [sp, #16]
    116c:	ldp	x21, x22, [sp, #32]
    1170:	ldr	x23, [sp, #48]
    1174:	ldp	x29, x30, [sp], #96
    1178:	ret
    117c:	mov	w0, #0x0                   	// #0
    1180:	ldp	x19, x20, [sp, #16]
    1184:	ldp	x21, x22, [sp, #32]
    1188:	ldr	x23, [sp, #48]
    118c:	ldp	x29, x30, [sp], #96
    1190:	ret
    1194:	mov	x0, x23
    1198:	mov	w1, #0x3fc                 	// #1020
    119c:	bl	0 <ctf_set_errno>
    11a0:	ldp	x19, x20, [sp, #16]
    11a4:	ldp	x21, x22, [sp, #32]
    11a8:	ldr	x23, [sp, #48]
    11ac:	ldp	x29, x30, [sp], #96
    11b0:	ret
    11b4:	ldr	x0, [sp, #88]
    11b8:	mov	x1, x22
    11bc:	bl	e98 <ctf_type_reference>
    11c0:	mov	x22, x0
    11c4:	cmn	x0, #0x1
    11c8:	b.ne	10e4 <ctf_enum_iter+0x64>  // b.any
    11cc:	mov	w0, #0xffffffff            	// #-1
    11d0:	ldp	x19, x20, [sp, #16]
    11d4:	ldp	x21, x22, [sp, #32]
    11d8:	ldr	x23, [sp, #48]
    11dc:	ldp	x29, x30, [sp], #96
    11e0:	ret
    11e4:	ldr	x1, [sp, #72]
    11e8:	ldr	w0, [x19, #4]
    11ec:	ldr	x2, [sp, #88]
    11f0:	ldr	x1, [x1]
    11f4:	add	x19, x19, x2
    11f8:	ldr	x1, [x1, #16]
    11fc:	blr	x1
    1200:	cbz	w0, 117c <ctf_enum_iter+0xfc>
    1204:	sub	w0, w0, #0x1
    1208:	add	x22, x19, #0x8
    120c:	add	x22, x22, w0, uxtw #3
    1210:	b	121c <ctf_enum_iter+0x19c>
    1214:	cmp	x19, x22
    1218:	b.eq	117c <ctf_enum_iter+0xfc>  // b.none
    121c:	ldr	w1, [x19]
    1220:	add	x19, x19, #0x8
    1224:	ldr	x0, [sp, #72]
    1228:	bl	0 <ctf_strptr>
    122c:	ldur	w1, [x19, #-4]
    1230:	mov	x2, x21
    1234:	blr	x20
    1238:	cbz	w0, 1214 <ctf_enum_iter+0x194>
    123c:	b	1168 <ctf_enum_iter+0xe8>

0000000000001240 <ctf_type_pointer>:
    1240:	stp	x29, x30, [sp, #-48]!
    1244:	mov	x29, sp
    1248:	stp	x19, x20, [sp, #16]
    124c:	mov	x20, x0
    1250:	mov	x19, x1
    1254:	str	x0, [sp, #40]
    1258:	add	x0, sp, #0x28
    125c:	bl	0 <ctf_lookup_by_id>
    1260:	cbz	x0, 131c <ctf_type_pointer+0xdc>
    1264:	ldr	x2, [sp, #40]
    1268:	ldr	w1, [x2, #544]
    126c:	ldr	x0, [x2, #448]
    1270:	and	w3, w1, w19
    1274:	ldr	w3, [x0, x3, lsl #2]
    1278:	mov	w0, w3
    127c:	cbz	w3, 12a0 <ctf_type_pointer+0x60>
    1280:	ldr	w2, [x2, #552]
    1284:	add	w1, w1, #0x1
    1288:	orr	w1, w1, w3
    128c:	ldp	x19, x20, [sp, #16]
    1290:	tst	x2, #0x1
    1294:	csel	x0, x1, x0, ne  // ne = any
    1298:	ldp	x29, x30, [sp], #48
    129c:	ret
    12a0:	mov	x1, x19
    12a4:	mov	x0, x2
    12a8:	bl	3b0 <ctf_type_resolve>
    12ac:	mov	x19, x0
    12b0:	cmn	x0, #0x1
    12b4:	b.eq	1304 <ctf_type_pointer+0xc4>  // b.none
    12b8:	add	x0, sp, #0x28
    12bc:	mov	x1, x19
    12c0:	bl	0 <ctf_lookup_by_id>
    12c4:	cbz	x0, 1304 <ctf_type_pointer+0xc4>
    12c8:	ldr	x3, [sp, #40]
    12cc:	ldr	w1, [x3, #544]
    12d0:	ldr	x0, [x3, #448]
    12d4:	and	w19, w1, w19
    12d8:	ldr	w2, [x0, x19, lsl #2]
    12dc:	mov	w0, w2
    12e0:	cbz	w2, 1304 <ctf_type_pointer+0xc4>
    12e4:	ldr	w3, [x3, #552]
    12e8:	add	w1, w1, #0x1
    12ec:	orr	w1, w1, w2
    12f0:	ldp	x19, x20, [sp, #16]
    12f4:	tst	x3, #0x1
    12f8:	csel	x0, x1, x0, ne  // ne = any
    12fc:	ldp	x29, x30, [sp], #48
    1300:	ret
    1304:	mov	x0, x20
    1308:	mov	w1, #0x402                 	// #1026
    130c:	bl	0 <ctf_set_errno>
    1310:	ldp	x19, x20, [sp, #16]
    1314:	ldp	x29, x30, [sp], #48
    1318:	ret
    131c:	mov	x0, #0xffffffffffffffff    	// #-1
    1320:	ldp	x19, x20, [sp, #16]
    1324:	ldp	x29, x30, [sp], #48
    1328:	ret
    132c:	nop

0000000000001330 <ctf_type_encoding>:
    1330:	stp	x29, x30, [sp, #-96]!
    1334:	mov	x29, sp
    1338:	stp	x19, x20, [sp, #16]
    133c:	mov	x20, x1
    1340:	stp	x21, x22, [sp, #32]
    1344:	mov	x22, x0
    1348:	mov	x21, x2
    134c:	str	x0, [sp, #56]
    1350:	add	x0, sp, #0x38
    1354:	bl	0 <ctf_lookup_by_id>
    1358:	cbz	x0, 14b0 <ctf_type_encoding+0x180>
    135c:	mov	x1, x20
    1360:	mov	x19, x0
    1364:	mov	x0, x22
    1368:	bl	0 <ctf_dynamic_type>
    136c:	mov	x20, x0
    1370:	cbz	x0, 1414 <ctf_type_encoding+0xe4>
    1374:	ldr	x1, [sp, #56]
    1378:	ldr	w0, [x19, #4]
    137c:	ldr	x1, [x1]
    1380:	ldr	x1, [x1]
    1384:	blr	x1
    1388:	cmp	w0, #0x2
    138c:	b.ls	13d0 <ctf_type_encoding+0xa0>  // b.plast
    1390:	cmp	w0, #0xe
    1394:	b.ne	13d4 <ctf_type_encoding+0xa4>  // b.any
    1398:	ldr	w1, [x20, #48]
    139c:	add	x2, sp, #0x50
    13a0:	ldr	x0, [sp, #56]
    13a4:	bl	1330 <ctf_type_encoding>
    13a8:	ldrh	w2, [x20, #52]
    13ac:	ldrh	w1, [x20, #54]
    13b0:	ldr	w3, [sp, #80]
    13b4:	mov	w0, #0x0                   	// #0
    13b8:	stp	w3, w2, [x21]
    13bc:	str	w1, [x21, #8]
    13c0:	ldp	x19, x20, [sp, #16]
    13c4:	ldp	x21, x22, [sp, #32]
    13c8:	ldp	x29, x30, [sp], #96
    13cc:	ret
    13d0:	cbnz	w0, 13f0 <ctf_type_encoding+0xc0>
    13d4:	mov	x0, x22
    13d8:	mov	w1, #0x3fe                 	// #1022
    13dc:	bl	0 <ctf_set_errno>
    13e0:	ldp	x19, x20, [sp, #16]
    13e4:	ldp	x21, x22, [sp, #32]
    13e8:	ldp	x29, x30, [sp], #96
    13ec:	ret
    13f0:	ldr	x0, [x20, #48]
    13f4:	str	x0, [x21]
    13f8:	mov	w0, #0x0                   	// #0
    13fc:	ldr	w1, [x20, #56]
    1400:	str	w1, [x21, #8]
    1404:	ldp	x19, x20, [sp, #16]
    1408:	ldp	x21, x22, [sp, #32]
    140c:	ldp	x29, x30, [sp], #96
    1410:	ret
    1414:	ldr	x0, [sp, #56]
    1418:	add	x3, sp, #0x48
    141c:	mov	x1, x19
    1420:	mov	x2, #0x0                   	// #0
    1424:	ldr	x4, [x0]
    1428:	ldr	x4, [x4, #24]
    142c:	blr	x4
    1430:	ldr	x1, [sp, #56]
    1434:	ldr	w0, [x19, #4]
    1438:	ldr	x1, [x1]
    143c:	ldr	x1, [x1]
    1440:	blr	x1
    1444:	cmp	w0, #0x2
    1448:	b.eq	145c <ctf_type_encoding+0x12c>  // b.none
    144c:	cmp	w0, #0xe
    1450:	b.eq	148c <ctf_type_encoding+0x15c>  // b.none
    1454:	cmp	w0, #0x1
    1458:	b.ne	13d4 <ctf_type_encoding+0xa4>  // b.any
    145c:	ldr	x1, [sp, #72]
    1460:	mov	w0, #0x0                   	// #0
    1464:	ldr	w1, [x19, x1]
    1468:	ldp	x19, x20, [sp, #16]
    146c:	and	w2, w1, #0xffff
    1470:	str	w2, [x21, #8]
    1474:	lsr	w2, w1, #24
    1478:	ubfx	x1, x1, #16, #8
    147c:	stp	w2, w1, [x21]
    1480:	ldp	x21, x22, [sp, #32]
    1484:	ldp	x29, x30, [sp], #96
    1488:	ret
    148c:	ldr	x1, [sp, #72]
    1490:	add	x2, sp, #0x50
    1494:	ldr	x0, [sp, #56]
    1498:	add	x20, x19, x1
    149c:	ldr	w1, [x19, x1]
    14a0:	bl	1330 <ctf_type_encoding>
    14a4:	ldrh	w2, [x20, #4]
    14a8:	ldrh	w1, [x20, #6]
    14ac:	b	13b0 <ctf_type_encoding+0x80>
    14b0:	mov	w0, #0xffffffff            	// #-1
    14b4:	b	13c0 <ctf_type_encoding+0x90>

00000000000014b8 <ctf_type_cmp>:
    14b8:	cmp	x1, x3
    14bc:	mov	x5, x0
    14c0:	cset	w4, hi  // hi = pmore
    14c4:	mov	w0, #0xffffffff            	// #-1
    14c8:	csel	w0, w4, w0, cs  // cs = hs, nlast
    14cc:	cmp	x5, x2
    14d0:	b.eq	1514 <ctf_type_cmp+0x5c>  // b.none
    14d4:	ldr	w4, [x5, #544]
    14d8:	cmp	x4, x1
    14dc:	b.cc	14ec <ctf_type_cmp+0x34>  // b.lo, b.ul, b.last
    14e0:	ldr	x1, [x5, #512]
    14e4:	cmp	x1, #0x0
    14e8:	csel	x5, x5, x1, eq  // eq = none
    14ec:	ldr	w1, [x2, #544]
    14f0:	cmp	x1, x3
    14f4:	b.cc	1504 <ctf_type_cmp+0x4c>  // b.lo, b.ul, b.last
    14f8:	ldr	x1, [x2, #512]
    14fc:	cmp	x1, #0x0
    1500:	csel	x2, x2, x1, eq  // eq = none
    1504:	cmp	x5, x2
    1508:	mov	w3, #0xffffffff            	// #-1
    150c:	csinc	w1, w0, wzr, ls  // ls = plast
    1510:	csel	w0, w1, w3, cs  // cs = hs, nlast
    1514:	ret

0000000000001518 <ctf_member_info>:
    1518:	stp	x29, x30, [sp, #-96]!
    151c:	mov	x29, sp
    1520:	stp	x19, x20, [sp, #16]
    1524:	mov	x20, x2
    1528:	stp	x21, x22, [sp, #32]
    152c:	mov	x22, x3
    1530:	mov	x21, x0
    1534:	str	x0, [sp, #72]
    1538:	bl	3b0 <ctf_type_resolve>
    153c:	cmn	x0, #0x1
    1540:	b.eq	16f8 <ctf_member_info+0x1e0>  // b.none
    1544:	mov	x1, x0
    1548:	str	x23, [sp, #48]
    154c:	mov	x23, x0
    1550:	add	x0, sp, #0x48
    1554:	bl	0 <ctf_lookup_by_id>
    1558:	mov	x19, x0
    155c:	cbz	x0, 16f4 <ctf_member_info+0x1dc>
    1560:	mov	x1, x0
    1564:	add	x3, sp, #0x58
    1568:	ldr	x0, [sp, #72]
    156c:	add	x2, sp, #0x50
    1570:	ldr	x4, [x0]
    1574:	ldr	x4, [x4, #24]
    1578:	blr	x4
    157c:	ldr	x1, [sp, #72]
    1580:	ldr	w0, [x19, #4]
    1584:	ldr	x1, [x1]
    1588:	ldr	x1, [x1]
    158c:	blr	x1
    1590:	sub	w0, w0, #0x6
    1594:	cmp	w0, #0x1
    1598:	b.hi	15ec <ctf_member_info+0xd4>  // b.pmore
    159c:	ldr	x0, [sp, #72]
    15a0:	mov	x1, x23
    15a4:	bl	0 <ctf_dynamic_type>
    15a8:	cbz	x0, 162c <ctf_member_info+0x114>
    15ac:	ldr	x19, [x0, #56]
    15b0:	cbnz	x19, 15c0 <ctf_member_info+0xa8>
    15b4:	b	160c <ctf_member_info+0xf4>
    15b8:	ldr	x19, [x19, #8]
    15bc:	cbz	x19, 160c <ctf_member_info+0xf4>
    15c0:	ldr	x0, [x19, #16]
    15c4:	mov	x1, x20
    15c8:	bl	0 <strcmp>
    15cc:	cbnz	w0, 15b8 <ctf_member_info+0xa0>
    15d0:	ldur	q0, [x19, #24]
    15d4:	ldr	x23, [sp, #48]
    15d8:	str	q0, [x22]
    15dc:	ldp	x19, x20, [sp, #16]
    15e0:	ldp	x21, x22, [sp, #32]
    15e4:	ldp	x29, x30, [sp], #96
    15e8:	ret
    15ec:	mov	x0, x21
    15f0:	mov	w1, #0x3fb                 	// #1019
    15f4:	bl	0 <ctf_set_errno>
    15f8:	ldr	x23, [sp, #48]
    15fc:	ldp	x19, x20, [sp, #16]
    1600:	ldp	x21, x22, [sp, #32]
    1604:	ldp	x29, x30, [sp], #96
    1608:	ret
    160c:	mov	x0, x21
    1610:	mov	w1, #0x40c                 	// #1036
    1614:	bl	0 <ctf_set_errno>
    1618:	ldp	x19, x20, [sp, #16]
    161c:	ldp	x21, x22, [sp, #32]
    1620:	ldr	x23, [sp, #48]
    1624:	ldp	x29, x30, [sp], #96
    1628:	ret
    162c:	ldp	x1, x2, [sp, #72]
    1630:	mov	x0, #0x1fffffff            	// #536870911
    1634:	ldr	x1, [x1]
    1638:	cmp	x2, x0
    163c:	ldr	x2, [sp, #88]
    1640:	ldr	w0, [x19, #4]
    1644:	add	x19, x19, x2
    1648:	ldr	x1, [x1, #16]
    164c:	b.gt	16a0 <ctf_member_info+0x188>
    1650:	blr	x1
    1654:	cbz	w0, 160c <ctf_member_info+0xf4>
    1658:	sub	w0, w0, #0x1
    165c:	add	x23, x19, #0xc
    1660:	mov	w1, #0xc                   	// #12
    1664:	umaddl	x23, w0, w1, x23
    1668:	b	1678 <ctf_member_info+0x160>
    166c:	add	x19, x19, #0xc
    1670:	cmp	x23, x19
    1674:	b.eq	160c <ctf_member_info+0xf4>  // b.none
    1678:	ldr	w1, [x19]
    167c:	ldr	x0, [sp, #72]
    1680:	bl	0 <ctf_strptr>
    1684:	mov	x1, x20
    1688:	bl	0 <strcmp>
    168c:	cbnz	w0, 166c <ctf_member_info+0x154>
    1690:	ldp	w1, w2, [x19, #4]
    1694:	ldr	x23, [sp, #48]
    1698:	stp	x2, x1, [x22]
    169c:	b	15fc <ctf_member_info+0xe4>
    16a0:	blr	x1
    16a4:	cbz	w0, 160c <ctf_member_info+0xf4>
    16a8:	sub	w0, w0, #0x1
    16ac:	add	x23, x19, #0x10
    16b0:	add	x23, x23, w0, uxtw #4
    16b4:	b	16c4 <ctf_member_info+0x1ac>
    16b8:	add	x19, x19, #0x10
    16bc:	cmp	x23, x19
    16c0:	b.eq	160c <ctf_member_info+0xf4>  // b.none
    16c4:	ldr	w1, [x19]
    16c8:	ldr	x0, [sp, #72]
    16cc:	bl	0 <ctf_strptr>
    16d0:	mov	x1, x20
    16d4:	bl	0 <strcmp>
    16d8:	cbnz	w0, 16b8 <ctf_member_info+0x1a0>
    16dc:	ldp	w1, w3, [x19, #4]
    16e0:	ldr	w2, [x19, #12]
    16e4:	ldr	x23, [sp, #48]
    16e8:	orr	x1, x2, x1, lsl #32
    16ec:	stp	x3, x1, [x22]
    16f0:	b	15fc <ctf_member_info+0xe4>
    16f4:	ldr	x23, [sp, #48]
    16f8:	mov	w0, #0xffffffff            	// #-1
    16fc:	b	15fc <ctf_member_info+0xe4>

0000000000001700 <ctf_array_info>:
    1700:	stp	x29, x30, [sp, #-80]!
    1704:	mov	x29, sp
    1708:	stp	x19, x20, [sp, #16]
    170c:	mov	x20, x2
    1710:	stp	x21, x22, [sp, #32]
    1714:	mov	x21, x0
    1718:	mov	x22, x1
    171c:	str	x0, [sp, #56]
    1720:	add	x0, sp, #0x38
    1724:	bl	0 <ctf_lookup_by_id>
    1728:	cbz	x0, 17ec <ctf_array_info+0xec>
    172c:	ldr	x1, [sp, #56]
    1730:	mov	x19, x0
    1734:	ldr	w0, [x0, #4]
    1738:	ldr	x1, [x1]
    173c:	ldr	x1, [x1]
    1740:	blr	x1
    1744:	cmp	w0, #0x4
    1748:	b.ne	1784 <ctf_array_info+0x84>  // b.any
    174c:	mov	x1, x22
    1750:	mov	x0, x21
    1754:	bl	0 <ctf_dynamic_type>
    1758:	mov	x1, x0
    175c:	cbz	x0, 17a0 <ctf_array_info+0xa0>
    1760:	ldp	x2, x3, [x0, #48]
    1764:	stp	x2, x3, [x20]
    1768:	mov	w0, #0x0                   	// #0
    176c:	ldr	x1, [x1, #64]
    1770:	str	x1, [x20, #16]
    1774:	ldp	x19, x20, [sp, #16]
    1778:	ldp	x21, x22, [sp, #32]
    177c:	ldp	x29, x30, [sp], #80
    1780:	ret
    1784:	mov	x0, x21
    1788:	mov	w1, #0x3ff                 	// #1023
    178c:	bl	0 <ctf_set_errno>
    1790:	ldp	x19, x20, [sp, #16]
    1794:	ldp	x21, x22, [sp, #32]
    1798:	ldp	x29, x30, [sp], #80
    179c:	ret
    17a0:	ldr	x0, [sp, #56]
    17a4:	add	x3, sp, #0x48
    17a8:	mov	x1, x19
    17ac:	mov	x2, #0x0                   	// #0
    17b0:	ldr	x4, [x0]
    17b4:	ldr	x4, [x4, #24]
    17b8:	blr	x4
    17bc:	ldr	x2, [sp, #72]
    17c0:	mov	w0, #0x0                   	// #0
    17c4:	ldp	x21, x22, [sp, #32]
    17c8:	add	x1, x19, x2
    17cc:	ldr	w2, [x19, x2]
    17d0:	str	x2, [x20]
    17d4:	ldp	w2, w1, [x1, #4]
    17d8:	str	x2, [x20, #8]
    17dc:	str	w1, [x20, #16]
    17e0:	ldp	x19, x20, [sp, #16]
    17e4:	ldp	x29, x30, [sp], #80
    17e8:	ret
    17ec:	mov	w0, #0xffffffff            	// #-1
    17f0:	b	1774 <ctf_array_info+0x74>
    17f4:	nop

00000000000017f8 <ctf_type_size>:
    17f8:	stp	x29, x30, [sp, #-80]!
    17fc:	mov	x29, sp
    1800:	str	x0, [sp, #40]
    1804:	bl	3b0 <ctf_type_resolve>
    1808:	cmn	x0, #0x1
    180c:	b.eq	1934 <ctf_type_size+0x13c>  // b.none
    1810:	mov	x1, x0
    1814:	stp	x19, x20, [sp, #16]
    1818:	mov	x20, x0
    181c:	add	x0, sp, #0x28
    1820:	bl	0 <ctf_lookup_by_id>
    1824:	mov	x19, x0
    1828:	cbz	x0, 1930 <ctf_type_size+0x138>
    182c:	ldr	x1, [sp, #40]
    1830:	ldr	w0, [x0, #4]
    1834:	ldr	x1, [x1]
    1838:	ldr	x1, [x1]
    183c:	blr	x1
    1840:	cmp	w0, #0x5
    1844:	b.eq	1908 <ctf_type_size+0x110>  // b.none
    1848:	b.hi	188c <ctf_type_size+0x94>  // b.pmore
    184c:	cmp	w0, #0x3
    1850:	b.eq	1918 <ctf_type_size+0x120>  // b.none
    1854:	cmp	w0, #0x4
    1858:	b.ne	18e0 <ctf_type_size+0xe8>  // b.any
    185c:	ldr	x0, [sp, #40]
    1860:	mov	x1, x19
    1864:	mov	x3, #0x0                   	// #0
    1868:	mov	x2, #0x0                   	// #0
    186c:	ldr	x4, [x0]
    1870:	ldr	x4, [x4, #24]
    1874:	blr	x4
    1878:	cmp	x0, #0x0
    187c:	b.le	18ac <ctf_type_size+0xb4>
    1880:	ldp	x19, x20, [sp, #16]
    1884:	ldp	x29, x30, [sp], #80
    1888:	ret
    188c:	cmp	w0, #0x8
    1890:	b.ne	18e0 <ctf_type_size+0xe8>  // b.any
    1894:	ldr	x0, [sp, #40]
    1898:	ldp	x19, x20, [sp, #16]
    189c:	ldr	x0, [x0, #488]
    18a0:	ldr	x0, [x0, #40]
    18a4:	ldp	x29, x30, [sp], #80
    18a8:	ret
    18ac:	ldr	x0, [sp, #40]
    18b0:	mov	x1, x20
    18b4:	add	x2, sp, #0x38
    18b8:	bl	1700 <ctf_array_info>
    18bc:	tbnz	w0, #31, 1930 <ctf_type_size+0x138>
    18c0:	ldr	x0, [sp, #40]
    18c4:	ldr	x1, [sp, #56]
    18c8:	bl	17f8 <ctf_type_size>
    18cc:	tbnz	x0, #63, 1930 <ctf_type_size+0x138>
    18d0:	ldr	w1, [sp, #72]
    18d4:	ldp	x19, x20, [sp, #16]
    18d8:	mul	x0, x1, x0
    18dc:	b	1884 <ctf_type_size+0x8c>
    18e0:	ldr	x0, [sp, #40]
    18e4:	mov	x1, x19
    18e8:	mov	x3, #0x0                   	// #0
    18ec:	mov	x2, #0x0                   	// #0
    18f0:	ldr	x4, [x0]
    18f4:	ldr	x4, [x4, #24]
    18f8:	blr	x4
    18fc:	ldp	x19, x20, [sp, #16]
    1900:	ldp	x29, x30, [sp], #80
    1904:	ret
    1908:	mov	x0, #0x0                   	// #0
    190c:	ldp	x19, x20, [sp, #16]
    1910:	ldp	x29, x30, [sp], #80
    1914:	ret
    1918:	ldr	x0, [sp, #40]
    191c:	ldp	x19, x20, [sp, #16]
    1920:	ldr	x0, [x0, #488]
    1924:	ldr	x0, [x0, #16]
    1928:	ldp	x29, x30, [sp], #80
    192c:	ret
    1930:	ldp	x19, x20, [sp, #16]
    1934:	mov	x0, #0xffffffffffffffff    	// #-1
    1938:	b	1884 <ctf_type_size+0x8c>
    193c:	nop

0000000000001940 <ctf_type_align>:
    1940:	stp	x29, x30, [sp, #-96]!
    1944:	mov	x29, sp
    1948:	stp	x21, x22, [sp, #32]
    194c:	mov	x22, x0
    1950:	str	x0, [sp, #56]
    1954:	bl	3b0 <ctf_type_resolve>
    1958:	cmn	x0, #0x1
    195c:	b.eq	1bbc <ctf_type_align+0x27c>  // b.none
    1960:	mov	x1, x0
    1964:	mov	x21, x0
    1968:	add	x0, sp, #0x38
    196c:	stp	x19, x20, [sp, #16]
    1970:	bl	0 <ctf_lookup_by_id>
    1974:	mov	x20, x0
    1978:	cbz	x0, 1bb8 <ctf_type_align+0x278>
    197c:	ldr	x1, [sp, #56]
    1980:	ldr	w0, [x0, #4]
    1984:	ldr	x1, [x1]
    1988:	ldr	x1, [x1]
    198c:	blr	x1
    1990:	mov	w19, w0
    1994:	cmp	w0, #0x7
    1998:	b.hi	19d4 <ctf_type_align+0x94>  // b.pmore
    199c:	cmp	w0, #0x5
    19a0:	b.hi	19f8 <ctf_type_align+0xb8>  // b.pmore
    19a4:	cmp	w0, #0x4
    19a8:	b.eq	1a50 <ctf_type_align+0x110>  // b.none
    19ac:	sub	w19, w0, #0x3
    19b0:	tst	w19, #0xfffffffd
    19b4:	b.ne	1a88 <ctf_type_align+0x148>  // b.any
    19b8:	ldr	x0, [sp, #56]
    19bc:	ldp	x19, x20, [sp, #16]
    19c0:	ldr	x0, [x0, #488]
    19c4:	ldr	x0, [x0, #16]
    19c8:	ldp	x21, x22, [sp, #32]
    19cc:	ldp	x29, x30, [sp], #96
    19d0:	ret
    19d4:	cmp	w0, #0x8
    19d8:	b.ne	1a88 <ctf_type_align+0x148>  // b.any
    19dc:	ldr	x0, [sp, #56]
    19e0:	ldp	x19, x20, [sp, #16]
    19e4:	ldr	x0, [x0, #488]
    19e8:	ldp	x21, x22, [sp, #32]
    19ec:	ldr	x0, [x0, #40]
    19f0:	ldp	x29, x30, [sp], #96
    19f4:	ret
    19f8:	mov	x1, x21
    19fc:	mov	x0, x22
    1a00:	bl	0 <ctf_dynamic_type>
    1a04:	cbz	x0, 1ad0 <ctf_type_align+0x190>
    1a08:	ldr	x20, [x0, #56]
    1a0c:	cbz	x20, 1bac <ctf_type_align+0x26c>
    1a10:	cmp	w19, #0x6
    1a14:	b.eq	1abc <ctf_type_align+0x17c>  // b.none
    1a18:	mov	x19, #0x0                   	// #0
    1a1c:	nop
    1a20:	ldr	x1, [x20, #24]
    1a24:	ldr	x0, [sp, #56]
    1a28:	bl	1940 <ctf_type_align>
    1a2c:	cmp	x19, x0
    1a30:	ldr	x20, [x20, #8]
    1a34:	csel	x19, x19, x0, cs  // cs = hs, nlast
    1a38:	cbnz	x20, 1a20 <ctf_type_align+0xe0>
    1a3c:	mov	x0, x19
    1a40:	ldp	x19, x20, [sp, #16]
    1a44:	ldp	x21, x22, [sp, #32]
    1a48:	ldp	x29, x30, [sp], #96
    1a4c:	ret
    1a50:	ldr	x0, [sp, #56]
    1a54:	mov	x1, x21
    1a58:	add	x2, sp, #0x48
    1a5c:	bl	1700 <ctf_array_info>
    1a60:	mov	w1, w0
    1a64:	mov	x0, #0xffffffffffffffff    	// #-1
    1a68:	tbnz	w1, #31, 1ab4 <ctf_type_align+0x174>
    1a6c:	ldr	x0, [sp, #56]
    1a70:	ldr	x1, [sp, #72]
    1a74:	bl	1940 <ctf_type_align>
    1a78:	ldp	x19, x20, [sp, #16]
    1a7c:	ldp	x21, x22, [sp, #32]
    1a80:	ldp	x29, x30, [sp], #96
    1a84:	ret
    1a88:	ldr	x0, [sp, #56]
    1a8c:	mov	x1, x20
    1a90:	mov	x3, #0x0                   	// #0
    1a94:	mov	x2, #0x0                   	// #0
    1a98:	ldr	x4, [x0]
    1a9c:	ldr	x4, [x4, #24]
    1aa0:	blr	x4
    1aa4:	ldp	x19, x20, [sp, #16]
    1aa8:	ldp	x21, x22, [sp, #32]
    1aac:	ldp	x29, x30, [sp], #96
    1ab0:	ret
    1ab4:	ldp	x19, x20, [sp, #16]
    1ab8:	b	19c8 <ctf_type_align+0x88>
    1abc:	ldr	x1, [x20, #24]
    1ac0:	ldr	x0, [sp, #56]
    1ac4:	bl	1940 <ctf_type_align>
    1ac8:	ldp	x19, x20, [sp, #16]
    1acc:	b	19c8 <ctf_type_align+0x88>
    1ad0:	ldr	x1, [sp, #56]
    1ad4:	ldr	w0, [x20, #4]
    1ad8:	ldr	x1, [x1]
    1adc:	ldr	x1, [x1, #16]
    1ae0:	blr	x1
    1ae4:	mov	w21, w0
    1ae8:	ldr	x4, [sp, #56]
    1aec:	mov	x1, x20
    1af0:	add	x3, sp, #0x48
    1af4:	add	x2, sp, #0x40
    1af8:	mov	x0, x4
    1afc:	ldr	x4, [x4]
    1b00:	ldr	x4, [x4, #24]
    1b04:	blr	x4
    1b08:	ldr	x0, [sp, #72]
    1b0c:	cmp	w19, #0x6
    1b10:	add	x20, x20, x0
    1b14:	b.eq	1ba0 <ctf_type_align+0x260>  // b.none
    1b18:	ldr	x1, [sp, #64]
    1b1c:	mov	x0, #0x1fffffff            	// #536870911
    1b20:	cmp	x1, x0
    1b24:	b.gt	1b68 <ctf_type_align+0x228>
    1b28:	mov	x0, #0x0                   	// #0
    1b2c:	cbz	w21, 1ab4 <ctf_type_align+0x174>
    1b30:	sub	w21, w21, #0x1
    1b34:	mov	x19, #0x0                   	// #0
    1b38:	add	x21, x21, #0x1
    1b3c:	add	x21, x21, x21, lsl #1
    1b40:	add	x21, x20, x21, lsl #2
    1b44:	ldr	w1, [x20, #8]
    1b48:	add	x20, x20, #0xc
    1b4c:	ldr	x0, [sp, #56]
    1b50:	bl	1940 <ctf_type_align>
    1b54:	cmp	x19, x0
    1b58:	csel	x19, x19, x0, cs  // cs = hs, nlast
    1b5c:	cmp	x20, x21
    1b60:	b.ne	1b44 <ctf_type_align+0x204>  // b.any
    1b64:	b	1a3c <ctf_type_align+0xfc>
    1b68:	cbz	w21, 1bac <ctf_type_align+0x26c>
    1b6c:	sub	w21, w21, #0x1
    1b70:	mov	x19, #0x0                   	// #0
    1b74:	add	x21, x21, #0x1
    1b78:	add	x21, x20, x21, lsl #4
    1b7c:	ldr	w1, [x20, #8]
    1b80:	add	x20, x20, #0x10
    1b84:	ldr	x0, [sp, #56]
    1b88:	bl	1940 <ctf_type_align>
    1b8c:	cmp	x19, x0
    1b90:	csel	x19, x19, x0, cs  // cs = hs, nlast
    1b94:	cmp	x20, x21
    1b98:	b.ne	1b7c <ctf_type_align+0x23c>  // b.any
    1b9c:	b	1a3c <ctf_type_align+0xfc>
    1ba0:	cmp	w21, #0x0
    1ba4:	cset	w21, ne  // ne = any
    1ba8:	b	1b18 <ctf_type_align+0x1d8>
    1bac:	mov	x0, #0x0                   	// #0
    1bb0:	ldp	x19, x20, [sp, #16]
    1bb4:	b	19c8 <ctf_type_align+0x88>
    1bb8:	ldp	x19, x20, [sp, #16]
    1bbc:	mov	x0, #0xffffffffffffffff    	// #-1
    1bc0:	b	19c8 <ctf_type_align+0x88>
    1bc4:	nop

0000000000001bc8 <ctf_type_compat>:
    1bc8:	stp	x29, x30, [sp, #-144]!
    1bcc:	cmp	x1, x3
    1bd0:	mov	x29, sp
    1bd4:	stp	x19, x20, [sp, #16]
    1bd8:	mov	x20, x3
    1bdc:	str	x25, [sp, #64]
    1be0:	stp	x2, x0, [sp, #80]
    1be4:	b.cc	1d90 <ctf_type_compat+0x1c8>  // b.lo, b.ul, b.last
    1be8:	cset	w5, hi  // hi = pmore
    1bec:	cmp	x0, x2
    1bf0:	b.eq	1c1c <ctf_type_compat+0x54>  // b.none
    1bf4:	ldr	w3, [x0, #544]
    1bf8:	ldr	w4, [x2, #544]
    1bfc:	cmp	x1, x3
    1c00:	b.hi	1d08 <ctf_type_compat+0x140>  // b.pmore
    1c04:	ldr	x3, [x0, #512]
    1c08:	cbz	x3, 1d08 <ctf_type_compat+0x140>
    1c0c:	cmp	x20, x4
    1c10:	b.ls	1d14 <ctf_type_compat+0x14c>  // b.plast
    1c14:	cmp	x2, x3
    1c18:	b.ne	1c20 <ctf_type_compat+0x58>  // b.any
    1c1c:	cbz	w5, 1d78 <ctf_type_compat+0x1b0>
    1c20:	stp	x21, x22, [sp, #32]
    1c24:	mov	w25, #0x0                   	// #0
    1c28:	stp	x23, x24, [sp, #48]
    1c2c:	bl	3b0 <ctf_type_resolve>
    1c30:	mov	x1, x0
    1c34:	mov	x21, x0
    1c38:	ldr	x0, [sp, #88]
    1c3c:	bl	fe0 <ctf_type_kind>
    1c40:	mov	w19, w0
    1c44:	ldr	x0, [sp, #80]
    1c48:	mov	x1, x20
    1c4c:	bl	3b0 <ctf_type_resolve>
    1c50:	mov	x1, x0
    1c54:	mov	x22, x0
    1c58:	ldr	x0, [sp, #80]
    1c5c:	bl	fe0 <ctf_type_kind>
    1c60:	mov	w20, w0
    1c64:	mov	x1, x21
    1c68:	add	x0, sp, #0x58
    1c6c:	bl	0 <ctf_lookup_by_id>
    1c70:	mov	x24, x0
    1c74:	mov	x1, x22
    1c78:	add	x0, sp, #0x50
    1c7c:	bl	0 <ctf_lookup_by_id>
    1c80:	mov	x23, x0
    1c84:	cmp	x24, #0x0
    1c88:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    1c8c:	b.ne	1d30 <ctf_type_compat+0x168>  // b.any
    1c90:	cmp	w19, #0x8
    1c94:	ccmp	w20, #0x1, #0x0, eq  // eq = none
    1c98:	b.eq	1d70 <ctf_type_compat+0x1a8>  // b.none
    1c9c:	cmp	w20, #0x8
    1ca0:	ccmp	w19, #0x1, #0x0, eq  // eq = none
    1ca4:	b.eq	1d70 <ctf_type_compat+0x1a8>  // b.none
    1ca8:	cmp	w19, w20
    1cac:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1cb0:	cmp	w19, #0x7
    1cb4:	b.gt	1db0 <ctf_type_compat+0x1e8>
    1cb8:	cmp	w19, #0x5
    1cbc:	b.gt	1eb8 <ctf_type_compat+0x2f0>
    1cc0:	cmp	w19, #0x3
    1cc4:	b.eq	1f48 <ctf_type_compat+0x380>  // b.none
    1cc8:	b.le	1ddc <ctf_type_compat+0x214>
    1ccc:	cmp	w19, #0x4
    1cd0:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1cd4:	ldr	x0, [sp, #88]
    1cd8:	mov	x1, x21
    1cdc:	add	x2, sp, #0x60
    1ce0:	bl	1700 <ctf_array_info>
    1ce4:	cbz	w0, 1e44 <ctf_type_compat+0x27c>
    1ce8:	mov	w25, #0x0                   	// #0
    1cec:	mov	w0, w25
    1cf0:	ldp	x19, x20, [sp, #16]
    1cf4:	ldp	x21, x22, [sp, #32]
    1cf8:	ldp	x23, x24, [sp, #48]
    1cfc:	ldr	x25, [sp, #64]
    1d00:	ldp	x29, x30, [sp], #144
    1d04:	ret
    1d08:	cmp	x20, x4
    1d0c:	b.hi	1c20 <ctf_type_compat+0x58>  // b.pmore
    1d10:	mov	x3, x0
    1d14:	ldr	x4, [x2, #512]
    1d18:	cmp	x4, #0x0
    1d1c:	csel	x2, x2, x4, eq  // eq = none
    1d20:	cmp	x2, x3
    1d24:	b.ne	1c20 <ctf_type_compat+0x58>  // b.any
    1d28:	cbnz	w5, 1c20 <ctf_type_compat+0x58>
    1d2c:	b	1d78 <ctf_type_compat+0x1b0>
    1d30:	ldr	w1, [x24]
    1d34:	ldr	x0, [sp, #88]
    1d38:	bl	0 <ctf_strptr>
    1d3c:	mov	x24, x0
    1d40:	ldr	w1, [x23]
    1d44:	ldr	x0, [sp, #80]
    1d48:	bl	0 <ctf_strptr>
    1d4c:	mov	x1, x0
    1d50:	mov	x0, x24
    1d54:	bl	0 <strcmp>
    1d58:	cmp	w0, #0x0
    1d5c:	cset	w25, eq  // eq = none
    1d60:	cmp	w19, #0x8
    1d64:	ccmp	w20, #0x1, #0x0, eq  // eq = none
    1d68:	b.ne	1c9c <ctf_type_compat+0xd4>  // b.any
    1d6c:	nop
    1d70:	ldp	x21, x22, [sp, #32]
    1d74:	ldp	x23, x24, [sp, #48]
    1d78:	mov	w25, #0x1                   	// #1
    1d7c:	mov	w0, w25
    1d80:	ldp	x19, x20, [sp, #16]
    1d84:	ldr	x25, [sp, #64]
    1d88:	ldp	x29, x30, [sp], #144
    1d8c:	ret
    1d90:	cmp	x0, x2
    1d94:	b.eq	1c20 <ctf_type_compat+0x58>  // b.none
    1d98:	ldr	w3, [x0, #544]
    1d9c:	mov	w5, #0xffffffff            	// #-1
    1da0:	ldr	w4, [x2, #544]
    1da4:	cmp	x1, x3
    1da8:	b.hi	1d08 <ctf_type_compat+0x140>  // b.pmore
    1dac:	b	1c04 <ctf_type_compat+0x3c>
    1db0:	cmp	w19, #0x8
    1db4:	b.eq	1eec <ctf_type_compat+0x324>  // b.none
    1db8:	cmp	w19, #0x9
    1dbc:	csel	w25, w25, wzr, eq  // eq = none
    1dc0:	mov	w0, w25
    1dc4:	ldp	x19, x20, [sp, #16]
    1dc8:	ldp	x21, x22, [sp, #32]
    1dcc:	ldp	x23, x24, [sp, #48]
    1dd0:	ldr	x25, [sp, #64]
    1dd4:	ldp	x29, x30, [sp], #144
    1dd8:	ret
    1ddc:	sub	w19, w19, #0x1
    1de0:	cmp	w19, #0x1
    1de4:	b.hi	1ce8 <ctf_type_compat+0x120>  // b.pmore
    1de8:	ldr	x0, [sp, #88]
    1dec:	mov	x1, x21
    1df0:	add	x2, sp, #0x60
    1df4:	str	xzr, [sp, #96]
    1df8:	str	wzr, [sp, #104]
    1dfc:	str	xzr, [sp, #120]
    1e00:	str	wzr, [sp, #128]
    1e04:	bl	1330 <ctf_type_encoding>
    1e08:	cbnz	w0, 1ce8 <ctf_type_compat+0x120>
    1e0c:	ldr	x0, [sp, #80]
    1e10:	add	x2, sp, #0x78
    1e14:	mov	x1, x22
    1e18:	bl	1330 <ctf_type_encoding>
    1e1c:	cbnz	w0, 1ce8 <ctf_type_compat+0x120>
    1e20:	ldr	x1, [sp, #96]
    1e24:	ldr	x0, [sp, #120]
    1e28:	cmp	x1, x0
    1e2c:	b.eq	1ea0 <ctf_type_compat+0x2d8>  // b.none
    1e30:	mov	w25, #0x1                   	// #1
    1e34:	eor	w25, w25, #0x1
    1e38:	ldp	x21, x22, [sp, #32]
    1e3c:	ldp	x23, x24, [sp, #48]
    1e40:	b	1d7c <ctf_type_compat+0x1b4>
    1e44:	ldr	x0, [sp, #80]
    1e48:	mov	x1, x22
    1e4c:	add	x2, sp, #0x78
    1e50:	bl	1700 <ctf_array_info>
    1e54:	cbnz	w0, 1ce8 <ctf_type_compat+0x120>
    1e58:	ldr	w1, [sp, #112]
    1e5c:	ldr	w0, [sp, #136]
    1e60:	cmp	w1, w0
    1e64:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1e68:	ldp	x2, x0, [sp, #80]
    1e6c:	ldr	x1, [sp, #96]
    1e70:	ldr	x3, [sp, #120]
    1e74:	bl	1bc8 <ctf_type_compat>
    1e78:	cbz	w0, 1ce8 <ctf_type_compat+0x120>
    1e7c:	ldp	x2, x0, [sp, #80]
    1e80:	ldr	x1, [sp, #104]
    1e84:	ldr	x3, [sp, #128]
    1e88:	bl	1bc8 <ctf_type_compat>
    1e8c:	cmp	w0, #0x0
    1e90:	cset	w25, ne  // ne = any
    1e94:	ldp	x21, x22, [sp, #32]
    1e98:	ldp	x23, x24, [sp, #48]
    1e9c:	b	1d7c <ctf_type_compat+0x1b4>
    1ea0:	ldr	w1, [sp, #104]
    1ea4:	mov	w25, #0x0                   	// #0
    1ea8:	ldr	w0, [sp, #128]
    1eac:	cmp	w1, w0
    1eb0:	b.ne	1e30 <ctf_type_compat+0x268>  // b.any
    1eb4:	b	1e34 <ctf_type_compat+0x26c>
    1eb8:	cbz	w25, 1ce8 <ctf_type_compat+0x120>
    1ebc:	ldr	x0, [sp, #88]
    1ec0:	mov	x1, x21
    1ec4:	bl	17f8 <ctf_type_size>
    1ec8:	mov	x19, x0
    1ecc:	ldr	x0, [sp, #80]
    1ed0:	mov	x1, x22
    1ed4:	bl	17f8 <ctf_type_size>
    1ed8:	cmp	x19, x0
    1edc:	cset	w25, eq  // eq = none
    1ee0:	ldp	x21, x22, [sp, #32]
    1ee4:	ldp	x23, x24, [sp, #48]
    1ee8:	b	1d7c <ctf_type_compat+0x1b4>
    1eec:	ldr	x0, [sp, #88]
    1ef0:	mov	x1, x21
    1ef4:	add	x2, sp, #0x60
    1ef8:	bl	1330 <ctf_type_encoding>
    1efc:	mov	w19, w0
    1f00:	ldr	x0, [sp, #80]
    1f04:	mov	x1, x22
    1f08:	add	x2, sp, #0x78
    1f0c:	bl	1330 <ctf_type_encoding>
    1f10:	cmp	w19, w0
    1f14:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1f18:	cbnz	w19, 1f3c <ctf_type_compat+0x374>
    1f1c:	ldr	x1, [sp, #96]
    1f20:	ldr	x0, [sp, #120]
    1f24:	cmp	x1, x0
    1f28:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1f2c:	ldr	w1, [sp, #104]
    1f30:	ldr	w0, [sp, #128]
    1f34:	cmp	w1, w0
    1f38:	b.ne	1ce8 <ctf_type_compat+0x120>  // b.any
    1f3c:	ldp	x21, x22, [sp, #32]
    1f40:	ldp	x23, x24, [sp, #48]
    1f44:	b	1d7c <ctf_type_compat+0x1b4>
    1f48:	ldr	x20, [sp, #88]
    1f4c:	mov	x1, x21
    1f50:	mov	x0, x20
    1f54:	bl	e98 <ctf_type_reference>
    1f58:	ldr	x21, [sp, #80]
    1f5c:	mov	x1, x22
    1f60:	mov	x19, x0
    1f64:	mov	x0, x21
    1f68:	bl	e98 <ctf_type_reference>
    1f6c:	mov	x2, x21
    1f70:	mov	x3, x0
    1f74:	mov	x1, x19
    1f78:	mov	x0, x20
    1f7c:	bl	1bc8 <ctf_type_compat>
    1f80:	mov	w25, w0
    1f84:	ldp	x21, x22, [sp, #32]
    1f88:	ldp	x23, x24, [sp, #48]
    1f8c:	b	1d7c <ctf_type_compat+0x1b4>

0000000000001f90 <ctf_enum_name>:
    1f90:	stp	x29, x30, [sp, #-80]!
    1f94:	mov	x29, sp
    1f98:	stp	x19, x20, [sp, #16]
    1f9c:	mov	w20, w2
    1fa0:	stp	x21, x22, [sp, #32]
    1fa4:	mov	x22, x0
    1fa8:	str	x0, [sp, #56]
    1fac:	str	x0, [sp, #72]
    1fb0:	bl	3b0 <ctf_type_resolve>
    1fb4:	cmn	x0, #0x1
    1fb8:	b.eq	2088 <ctf_enum_name+0xf8>  // b.none
    1fbc:	mov	x21, x0
    1fc0:	mov	x1, x0
    1fc4:	add	x0, sp, #0x48
    1fc8:	bl	0 <ctf_lookup_by_id>
    1fcc:	cbz	x0, 2088 <ctf_enum_name+0xf8>
    1fd0:	ldr	x1, [sp, #72]
    1fd4:	ldr	w0, [x0, #4]
    1fd8:	ldr	x1, [x1]
    1fdc:	ldr	x1, [x1]
    1fe0:	blr	x1
    1fe4:	cmp	w0, #0xe
    1fe8:	b.eq	2114 <ctf_enum_name+0x184>  // b.none
    1fec:	mov	x1, x21
    1ff0:	add	x0, sp, #0x38
    1ff4:	bl	0 <ctf_lookup_by_id>
    1ff8:	mov	x19, x0
    1ffc:	cbz	x0, 2088 <ctf_enum_name+0xf8>
    2000:	ldr	x1, [sp, #56]
    2004:	ldr	w0, [x0, #4]
    2008:	ldr	x1, [x1]
    200c:	ldr	x1, [x1]
    2010:	blr	x1
    2014:	cmp	w0, #0x8
    2018:	b.ne	20f4 <ctf_enum_name+0x164>  // b.any
    201c:	ldr	x0, [sp, #56]
    2020:	add	x3, sp, #0x48
    2024:	mov	x2, #0x0                   	// #0
    2028:	mov	x1, x19
    202c:	ldr	x4, [x0]
    2030:	ldr	x4, [x4, #24]
    2034:	blr	x4
    2038:	mov	x1, x21
    203c:	mov	x0, x22
    2040:	bl	0 <ctf_dynamic_type>
    2044:	cbz	x0, 209c <ctf_enum_name+0x10c>
    2048:	ldr	x1, [x0, #56]
    204c:	cbnz	x1, 205c <ctf_enum_name+0xcc>
    2050:	b	207c <ctf_enum_name+0xec>
    2054:	ldr	x1, [x1, #8]
    2058:	cbz	x1, 207c <ctf_enum_name+0xec>
    205c:	ldr	w2, [x1, #40]
    2060:	cmp	w2, w20
    2064:	b.ne	2054 <ctf_enum_name+0xc4>  // b.any
    2068:	ldp	x19, x20, [sp, #16]
    206c:	ldr	x0, [x1, #16]
    2070:	ldp	x21, x22, [sp, #32]
    2074:	ldp	x29, x30, [sp], #80
    2078:	ret
    207c:	mov	x0, x22
    2080:	mov	w1, #0x40b                 	// #1035
    2084:	bl	0 <ctf_set_errno>
    2088:	mov	x0, #0x0                   	// #0
    208c:	ldp	x19, x20, [sp, #16]
    2090:	ldp	x21, x22, [sp, #32]
    2094:	ldp	x29, x30, [sp], #80
    2098:	ret
    209c:	ldr	x1, [sp, #56]
    20a0:	ldr	w0, [x19, #4]
    20a4:	ldr	x2, [sp, #72]
    20a8:	ldr	x1, [x1]
    20ac:	add	x19, x19, x2
    20b0:	ldr	x1, [x1, #16]
    20b4:	blr	x1
    20b8:	cbz	w0, 207c <ctf_enum_name+0xec>
    20bc:	sub	w0, w0, #0x1
    20c0:	add	x1, x19, #0x8
    20c4:	add	x1, x1, w0, uxtw #3
    20c8:	b	20d8 <ctf_enum_name+0x148>
    20cc:	add	x19, x19, #0x8
    20d0:	cmp	x19, x1
    20d4:	b.eq	207c <ctf_enum_name+0xec>  // b.none
    20d8:	ldr	w0, [x19, #4]
    20dc:	cmp	w0, w20
    20e0:	b.ne	20cc <ctf_enum_name+0x13c>  // b.any
    20e4:	ldr	w1, [x19]
    20e8:	ldr	x0, [sp, #56]
    20ec:	bl	0 <ctf_strptr>
    20f0:	b	208c <ctf_enum_name+0xfc>
    20f4:	mov	x0, x22
    20f8:	mov	w1, #0x3fc                 	// #1020
    20fc:	bl	0 <ctf_set_errno>
    2100:	mov	x0, #0x0                   	// #0
    2104:	ldp	x19, x20, [sp, #16]
    2108:	ldp	x21, x22, [sp, #32]
    210c:	ldp	x29, x30, [sp], #80
    2110:	ret
    2114:	ldr	x0, [sp, #72]
    2118:	mov	x1, x21
    211c:	bl	e98 <ctf_type_reference>
    2120:	mov	x21, x0
    2124:	cmn	x0, #0x1
    2128:	b.ne	1fec <ctf_enum_name+0x5c>  // b.any
    212c:	b	2088 <ctf_enum_name+0xf8>

0000000000002130 <ctf_enum_value>:
    2130:	stp	x29, x30, [sp, #-96]!
    2134:	mov	x29, sp
    2138:	stp	x19, x20, [sp, #16]
    213c:	mov	x20, x2
    2140:	stp	x21, x22, [sp, #32]
    2144:	mov	x22, x3
    2148:	mov	x21, x0
    214c:	str	x0, [sp, #72]
    2150:	str	x0, [sp, #88]
    2154:	bl	3b0 <ctf_type_resolve>
    2158:	cmn	x0, #0x1
    215c:	b.eq	2260 <ctf_enum_value+0x130>  // b.none
    2160:	mov	x1, x0
    2164:	str	x23, [sp, #48]
    2168:	mov	x23, x0
    216c:	add	x0, sp, #0x58
    2170:	bl	0 <ctf_lookup_by_id>
    2174:	cbz	x0, 225c <ctf_enum_value+0x12c>
    2178:	ldr	x1, [sp, #88]
    217c:	ldr	w0, [x0, #4]
    2180:	ldr	x1, [x1]
    2184:	ldr	x1, [x1]
    2188:	blr	x1
    218c:	cmp	w0, #0xe
    2190:	b.eq	22f0 <ctf_enum_value+0x1c0>  // b.none
    2194:	mov	x1, x23
    2198:	add	x0, sp, #0x48
    219c:	bl	0 <ctf_lookup_by_id>
    21a0:	mov	x19, x0
    21a4:	cbz	x0, 2244 <ctf_enum_value+0x114>
    21a8:	ldr	x1, [sp, #72]
    21ac:	ldr	w0, [x0, #4]
    21b0:	ldr	x1, [x1]
    21b4:	ldr	x1, [x1]
    21b8:	blr	x1
    21bc:	cmp	w0, #0x8
    21c0:	b.ne	230c <ctf_enum_value+0x1dc>  // b.any
    21c4:	ldr	x0, [sp, #72]
    21c8:	add	x3, sp, #0x58
    21cc:	mov	x2, #0x0                   	// #0
    21d0:	mov	x1, x19
    21d4:	ldr	x4, [x0]
    21d8:	ldr	x4, [x4, #24]
    21dc:	blr	x4
    21e0:	mov	x1, x23
    21e4:	mov	x0, x21
    21e8:	ldr	x23, [sp, #88]
    21ec:	bl	0 <ctf_dynamic_type>
    21f0:	cbz	x0, 2274 <ctf_enum_value+0x144>
    21f4:	ldr	x19, [x0, #56]
    21f8:	cbnz	x19, 2208 <ctf_enum_value+0xd8>
    21fc:	b	2238 <ctf_enum_value+0x108>
    2200:	ldr	x19, [x19, #8]
    2204:	cbz	x19, 2238 <ctf_enum_value+0x108>
    2208:	ldr	x0, [x19, #16]
    220c:	mov	x1, x20
    2210:	bl	0 <strcmp>
    2214:	cbnz	w0, 2200 <ctf_enum_value+0xd0>
    2218:	cbz	x22, 22d8 <ctf_enum_value+0x1a8>
    221c:	ldr	w1, [x19, #40]
    2220:	ldr	x23, [sp, #48]
    2224:	str	w1, [x22]
    2228:	ldp	x19, x20, [sp, #16]
    222c:	ldp	x21, x22, [sp, #32]
    2230:	ldp	x29, x30, [sp], #96
    2234:	ret
    2238:	mov	x0, x21
    223c:	mov	w1, #0x40b                 	// #1035
    2240:	bl	0 <ctf_set_errno>
    2244:	ldr	x23, [sp, #48]
    2248:	mov	w0, #0xffffffff            	// #-1
    224c:	ldp	x19, x20, [sp, #16]
    2250:	ldp	x21, x22, [sp, #32]
    2254:	ldp	x29, x30, [sp], #96
    2258:	ret
    225c:	ldr	x23, [sp, #48]
    2260:	mov	w0, #0xffffffff            	// #-1
    2264:	ldp	x19, x20, [sp, #16]
    2268:	ldp	x21, x22, [sp, #32]
    226c:	ldp	x29, x30, [sp], #96
    2270:	ret
    2274:	ldr	x1, [sp, #72]
    2278:	ldr	w0, [x19, #4]
    227c:	ldr	x1, [x1]
    2280:	ldr	x1, [x1, #16]
    2284:	blr	x1
    2288:	cbz	w0, 2238 <ctf_enum_value+0x108>
    228c:	add	x19, x19, x23
    2290:	sub	w0, w0, #0x1
    2294:	add	x23, x19, #0x8
    2298:	add	x23, x23, w0, uxtw #3
    229c:	b	22ac <ctf_enum_value+0x17c>
    22a0:	add	x19, x19, #0x8
    22a4:	cmp	x19, x23
    22a8:	b.eq	2238 <ctf_enum_value+0x108>  // b.none
    22ac:	ldr	w1, [x19]
    22b0:	ldr	x0, [sp, #72]
    22b4:	bl	0 <ctf_strptr>
    22b8:	mov	x1, x20
    22bc:	bl	0 <strcmp>
    22c0:	cbnz	w0, 22a0 <ctf_enum_value+0x170>
    22c4:	cbz	x22, 22d8 <ctf_enum_value+0x1a8>
    22c8:	ldr	w1, [x19, #4]
    22cc:	ldr	x23, [sp, #48]
    22d0:	str	w1, [x22]
    22d4:	b	224c <ctf_enum_value+0x11c>
    22d8:	mov	w0, #0x0                   	// #0
    22dc:	ldp	x19, x20, [sp, #16]
    22e0:	ldp	x21, x22, [sp, #32]
    22e4:	ldr	x23, [sp, #48]
    22e8:	ldp	x29, x30, [sp], #96
    22ec:	ret
    22f0:	ldr	x0, [sp, #88]
    22f4:	mov	x1, x23
    22f8:	bl	e98 <ctf_type_reference>
    22fc:	mov	x23, x0
    2300:	cmn	x0, #0x1
    2304:	b.ne	2194 <ctf_enum_value+0x64>  // b.any
    2308:	b	2244 <ctf_enum_value+0x114>
    230c:	mov	x0, x21
    2310:	mov	w1, #0x3fc                 	// #1020
    2314:	bl	0 <ctf_set_errno>
    2318:	mov	w0, #0xffffffff            	// #-1
    231c:	ldr	x23, [sp, #48]
    2320:	b	224c <ctf_enum_value+0x11c>
    2324:	nop

0000000000002328 <ctf_func_type_info>:
    2328:	stp	x29, x30, [sp, #-80]!
    232c:	mov	x29, sp
    2330:	stp	x19, x20, [sp, #16]
    2334:	mov	x20, x2
    2338:	str	x0, [sp, #56]
    233c:	bl	3b0 <ctf_type_resolve>
    2340:	cmn	x0, #0x1
    2344:	b.eq	2448 <ctf_func_type_info+0x120>  // b.none
    2348:	mov	x1, x0
    234c:	str	x21, [sp, #32]
    2350:	mov	x21, x0
    2354:	add	x0, sp, #0x38
    2358:	bl	0 <ctf_lookup_by_id>
    235c:	mov	x19, x0
    2360:	cbz	x0, 2444 <ctf_func_type_info+0x11c>
    2364:	mov	x1, x0
    2368:	add	x3, sp, #0x48
    236c:	ldr	x0, [sp, #56]
    2370:	add	x2, sp, #0x40
    2374:	ldr	x4, [x0]
    2378:	ldr	x4, [x4, #24]
    237c:	blr	x4
    2380:	ldr	x1, [sp, #56]
    2384:	ldr	w0, [x19, #4]
    2388:	ldr	x1, [x1]
    238c:	ldr	x1, [x1]
    2390:	blr	x1
    2394:	cmp	w0, #0x5
    2398:	b.ne	23fc <ctf_func_type_info+0xd4>  // b.any
    239c:	ldr	x1, [sp, #56]
    23a0:	ldp	w0, w2, [x19, #4]
    23a4:	ldr	x1, [x1]
    23a8:	ldr	x1, [x1, #16]
    23ac:	str	x2, [x20]
    23b0:	str	wzr, [x20, #12]
    23b4:	blr	x1
    23b8:	mov	w1, w0
    23bc:	ldr	x0, [sp, #56]
    23c0:	str	w1, [x20, #8]
    23c4:	mov	x1, x21
    23c8:	bl	0 <ctf_dynamic_type>
    23cc:	cbz	x0, 2418 <ctf_func_type_info+0xf0>
    23d0:	ldr	x19, [x0, #48]
    23d4:	mov	w0, #0x0                   	// #0
    23d8:	ldr	w1, [x20, #8]
    23dc:	cbz	w1, 23ec <ctf_func_type_info+0xc4>
    23e0:	sub	w1, w1, #0x1
    23e4:	ldr	w2, [x19, w1, uxtw #2]
    23e8:	cbz	w2, 2424 <ctf_func_type_info+0xfc>
    23ec:	ldr	x21, [sp, #32]
    23f0:	ldp	x19, x20, [sp, #16]
    23f4:	ldp	x29, x30, [sp], #80
    23f8:	ret
    23fc:	ldr	x0, [sp, #56]
    2400:	mov	w1, #0x404                 	// #1028
    2404:	bl	0 <ctf_set_errno>
    2408:	ldp	x19, x20, [sp, #16]
    240c:	ldr	x21, [sp, #32]
    2410:	ldp	x29, x30, [sp], #80
    2414:	ret
    2418:	ldr	x0, [sp, #72]
    241c:	add	x19, x19, x0
    2420:	b	23d4 <ctf_func_type_info+0xac>
    2424:	ldr	w2, [x20, #12]
    2428:	ldr	x21, [sp, #32]
    242c:	str	w1, [x20, #8]
    2430:	orr	w1, w2, #0x1
    2434:	str	w1, [x20, #12]
    2438:	ldp	x19, x20, [sp, #16]
    243c:	ldp	x29, x30, [sp], #80
    2440:	ret
    2444:	ldr	x21, [sp, #32]
    2448:	mov	w0, #0xffffffff            	// #-1
    244c:	b	23f0 <ctf_func_type_info+0xc8>

0000000000002450 <ctf_func_type_args>:
    2450:	stp	x29, x30, [sp, #-96]!
    2454:	mov	x29, sp
    2458:	stp	x19, x20, [sp, #16]
    245c:	mov	x20, x3
    2460:	mov	x19, x1
    2464:	stp	x21, x22, [sp, #32]
    2468:	mov	w22, w2
    246c:	add	x2, sp, #0x50
    2470:	str	x0, [sp, #56]
    2474:	bl	2328 <ctf_func_type_info>
    2478:	tbnz	w0, #31, 258c <ctf_func_type_args+0x13c>
    247c:	ldr	x0, [sp, #56]
    2480:	mov	x1, x19
    2484:	bl	3b0 <ctf_type_resolve>
    2488:	mov	x21, x0
    248c:	cmn	x0, #0x1
    2490:	b.eq	258c <ctf_func_type_args+0x13c>  // b.none
    2494:	mov	x1, x0
    2498:	add	x0, sp, #0x38
    249c:	bl	0 <ctf_lookup_by_id>
    24a0:	mov	x19, x0
    24a4:	cbz	x0, 258c <ctf_func_type_args+0x13c>
    24a8:	mov	x1, x0
    24ac:	add	x3, sp, #0x48
    24b0:	ldr	x0, [sp, #56]
    24b4:	add	x2, sp, #0x40
    24b8:	ldr	x4, [x0]
    24bc:	ldr	x4, [x4, #24]
    24c0:	blr	x4
    24c4:	ldr	x0, [sp, #56]
    24c8:	mov	x1, x21
    24cc:	bl	0 <ctf_dynamic_type>
    24d0:	cbz	x0, 2580 <ctf_func_type_args+0x130>
    24d4:	ldr	x4, [x0, #48]
    24d8:	ldr	w3, [sp, #88]
    24dc:	cmp	w3, w22
    24e0:	csel	w3, w3, w22, ls  // ls = plast
    24e4:	cbz	w3, 256c <ctf_func_type_args+0x11c>
    24e8:	sub	w0, w3, #0x1
    24ec:	cmp	w0, #0x2
    24f0:	b.ls	2544 <ctf_func_type_args+0xf4>  // b.plast
    24f4:	lsr	w2, w3, #2
    24f8:	mov	x1, x4
    24fc:	sub	w2, w2, #0x1
    2500:	mov	x0, x20
    2504:	add	x2, x2, #0x1
    2508:	add	x2, x4, x2, lsl #4
    250c:	nop
    2510:	ldr	q0, [x1], #16
    2514:	uxtl	v1.2d, v0.2s
    2518:	cmp	x1, x2
    251c:	uxtl2	v0.2d, v0.4s
    2520:	stp	q1, q0, [x0]
    2524:	add	x0, x0, #0x20
    2528:	b.ne	2510 <ctf_func_type_args+0xc0>  // b.any
    252c:	and	x0, x3, #0xfffffffc
    2530:	tst	x3, #0x3
    2534:	and	w3, w3, #0x3
    2538:	add	x20, x20, x0, lsl #3
    253c:	add	x4, x4, x0, lsl #2
    2540:	b.eq	256c <ctf_func_type_args+0x11c>  // b.none
    2544:	ldr	w0, [x4]
    2548:	cmp	w3, #0x1
    254c:	str	x0, [x20]
    2550:	b.eq	256c <ctf_func_type_args+0x11c>  // b.none
    2554:	ldr	w0, [x4, #4]
    2558:	cmp	w3, #0x2
    255c:	str	x0, [x20, #8]
    2560:	b.eq	256c <ctf_func_type_args+0x11c>  // b.none
    2564:	ldr	w0, [x4, #8]
    2568:	str	x0, [x20, #16]
    256c:	mov	w0, #0x0                   	// #0
    2570:	ldp	x19, x20, [sp, #16]
    2574:	ldp	x21, x22, [sp, #32]
    2578:	ldp	x29, x30, [sp], #96
    257c:	ret
    2580:	ldr	x4, [sp, #72]
    2584:	add	x4, x19, x4
    2588:	b	24d8 <ctf_func_type_args+0x88>
    258c:	mov	w0, #0xffffffff            	// #-1
    2590:	b	2570 <ctf_func_type_args+0x120>
    2594:	nop

0000000000002598 <ctf_type_visit>:
    2598:	adrp	x4, 0 <ctf_type_isparent>
    259c:	mov	w6, #0x0                   	// #0
    25a0:	add	x4, x4, #0x0
    25a4:	mov	x5, #0x0                   	// #0
    25a8:	b	6b0 <ctf_type_rvisit>

ctf-util.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ctf_list_append>:
   0:	ldr	x2, [x0]
   4:	str	x1, [x0]
   8:	stp	x2, xzr, [x1]
   c:	cbz	x2, 18 <ctf_list_append+0x18>
  10:	str	x1, [x2, #8]
  14:	ret
  18:	str	x1, [x0, #8]
  1c:	ret

0000000000000020 <ctf_list_prepend>:
  20:	ldr	x2, [x0, #8]
  24:	str	x1, [x0, #8]
  28:	stp	xzr, x2, [x1]
  2c:	cbz	x2, 38 <ctf_list_prepend+0x18>
  30:	str	x1, [x2]
  34:	ret
  38:	str	x1, [x0]
  3c:	ret

0000000000000040 <ctf_list_delete>:
  40:	ldp	x2, x3, [x1]
  44:	cbz	x2, 5c <ctf_list_delete+0x1c>
  48:	str	x3, [x2, #8]
  4c:	ldr	x1, [x1, #8]
  50:	cbz	x1, 68 <ctf_list_delete+0x28>
  54:	str	x2, [x1]
  58:	ret
  5c:	str	x3, [x0, #8]
  60:	ldr	x1, [x1, #8]
  64:	cbnz	x1, 54 <ctf_list_delete+0x14>
  68:	str	x2, [x0]
  6c:	ret

0000000000000070 <ctf_list_empty_p>:
  70:	ldr	x1, [x0, #8]
  74:	cbz	x1, 80 <ctf_list_empty_p+0x10>
  78:	mov	w0, #0x0                   	// #0
  7c:	ret
  80:	ldr	x0, [x0]
  84:	cmp	x0, #0x0
  88:	cset	w0, eq  // eq = none
  8c:	ret

0000000000000090 <ctf_sym_to_elf64>:
  90:	mov	x2, x0
  94:	mov	x0, x1
  98:	ldp	w4, w3, [x2]
  9c:	ldr	w1, [x2, #8]
  a0:	str	w4, [x0]
  a4:	stp	x3, x1, [x0, #8]
  a8:	ldrb	w1, [x2, #12]
  ac:	strb	w1, [x0, #4]
  b0:	ldrb	w1, [x2, #13]
  b4:	strb	w1, [x0, #5]
  b8:	ldrh	w1, [x2, #14]
  bc:	strh	w1, [x0, #6]
  c0:	ret
  c4:	nop

00000000000000c8 <ctf_str_append>:
  c8:	stp	x29, x30, [sp, #-64]!
  cc:	mov	x29, sp
  d0:	stp	x19, x20, [sp, #16]
  d4:	mov	x19, x0
  d8:	cbz	x1, 138 <ctf_str_append+0x70>
  dc:	stp	x21, x22, [sp, #32]
  e0:	mov	x20, x1
  e4:	mov	x21, #0x0                   	// #0
  e8:	str	x23, [sp, #48]
  ec:	cbz	x0, f8 <ctf_str_append+0x30>
  f0:	bl	0 <strlen>
  f4:	mov	x21, x0
  f8:	mov	x0, x20
  fc:	bl	0 <strlen>
 100:	mov	x22, x0
 104:	mov	x0, x19
 108:	add	x23, x21, x22
 10c:	add	x1, x23, #0x1
 110:	bl	0 <realloc>
 114:	mov	x19, x0
 118:	cbz	x0, 148 <ctf_str_append+0x80>
 11c:	mov	x2, x22
 120:	add	x0, x0, x21
 124:	mov	x1, x20
 128:	bl	0 <memcpy>
 12c:	strb	wzr, [x19, x23]
 130:	ldp	x21, x22, [sp, #32]
 134:	ldr	x23, [sp, #48]
 138:	mov	x0, x19
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldp	x29, x30, [sp], #64
 144:	ret
 148:	ldp	x21, x22, [sp, #32]
 14c:	ldr	x23, [sp, #48]
 150:	b	138 <ctf_str_append+0x70>
 154:	nop

0000000000000158 <ctf_str_append_noerr>:
 158:	stp	x29, x30, [sp, #-64]!
 15c:	mov	x29, sp
 160:	stp	x19, x20, [sp, #16]
 164:	stp	x21, x22, [sp, #32]
 168:	mov	x21, x0
 16c:	cbz	x1, 1dc <ctf_str_append_noerr+0x84>
 170:	stp	x23, x24, [sp, #48]
 174:	mov	x20, x1
 178:	mov	x22, #0x0                   	// #0
 17c:	cbz	x0, 188 <ctf_str_append_noerr+0x30>
 180:	bl	0 <strlen>
 184:	mov	x22, x0
 188:	mov	x0, x20
 18c:	bl	0 <strlen>
 190:	mov	x23, x0
 194:	mov	x0, x21
 198:	add	x24, x23, x22
 19c:	add	x1, x24, #0x1
 1a0:	bl	0 <realloc>
 1a4:	mov	x19, x0
 1a8:	cbz	x0, 1d8 <ctf_str_append_noerr+0x80>
 1ac:	mov	x2, x23
 1b0:	mov	x1, x20
 1b4:	add	x0, x0, x22
 1b8:	bl	0 <memcpy>
 1bc:	strb	wzr, [x19, x24]
 1c0:	mov	x0, x19
 1c4:	ldp	x19, x20, [sp, #16]
 1c8:	ldp	x21, x22, [sp, #32]
 1cc:	ldp	x23, x24, [sp, #48]
 1d0:	ldp	x29, x30, [sp], #64
 1d4:	ret
 1d8:	ldp	x23, x24, [sp, #48]
 1dc:	mov	x19, x21
 1e0:	mov	x0, x19
 1e4:	ldp	x19, x20, [sp, #16]
 1e8:	ldp	x21, x22, [sp, #32]
 1ec:	ldp	x29, x30, [sp], #64
 1f0:	ret
 1f4:	nop

00000000000001f8 <ctf_realloc>:
 1f8:	mov	x3, x0
 1fc:	mov	x0, x1
 200:	mov	x1, x2
 204:	ldr	x2, [x3, #376]
 208:	cbnz	x2, 210 <ctf_realloc+0x18>
 20c:	b	0 <realloc>
 210:	stp	x29, x30, [sp, #-16]!
 214:	mov	x1, x3
 218:	adrp	x0, 0 <ctf_list_append>
 21c:	mov	x29, sp
 220:	add	x0, x0, #0x0
 224:	bl	0 <ctf_dprintf>
 228:	mov	x0, #0x0                   	// #0
 22c:	ldp	x29, x30, [sp], #16
 230:	ret
 234:	nop

0000000000000238 <ctf_set_open_errno>:
 238:	cbz	x0, 240 <ctf_set_open_errno+0x8>
 23c:	str	w1, [x0]
 240:	mov	x0, #0x0                   	// #0
 244:	ret

0000000000000248 <ctf_set_errno>:
 248:	mov	x2, x0
 24c:	mov	x0, #0xffffffffffffffff    	// #-1
 250:	str	w1, [x2, #556]
 254:	ret
