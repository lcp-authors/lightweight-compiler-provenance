
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_hashlib.cpython-38-aarch64-linux-gnu.so_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000024e0 <.init>:
    24e0:	stp	x29, x30, [sp, #-16]!
    24e4:	mov	x29, sp
    24e8:	bl	29d0 <PyThread_acquire_lock@plt+0x10>
    24ec:	ldp	x29, x30, [sp], #16
    24f0:	ret

Disassembly of section .plt:

0000000000002500 <PyModule_AddObject@plt-0x20>:
    2500:	stp	x16, x30, [sp, #-16]!
    2504:	adrp	x16, 17000 <PyInit__hashlib@@Base+0x115c0>
    2508:	ldr	x17, [x16, #4088]
    250c:	add	x16, x16, #0xff8
    2510:	br	x17
    2514:	nop
    2518:	nop
    251c:	nop

0000000000002520 <PyModule_AddObject@plt>:
    2520:	adrp	x16, 18000 <PyModule_AddObject>
    2524:	ldr	x17, [x16]
    2528:	add	x16, x16, #0x0
    252c:	br	x17

0000000000002530 <EVP_MD_type@plt>:
    2530:	adrp	x16, 18000 <PyModule_AddObject>
    2534:	ldr	x17, [x16, #8]
    2538:	add	x16, x16, #0x8
    253c:	br	x17

0000000000002540 <PKCS5_PBKDF2_HMAC@plt>:
    2540:	adrp	x16, 18000 <PyModule_AddObject>
    2544:	ldr	x17, [x16, #16]
    2548:	add	x16, x16, #0x10
    254c:	br	x17

0000000000002550 <EVP_DigestInit_ex@plt>:
    2550:	adrp	x16, 18000 <PyModule_AddObject>
    2554:	ldr	x17, [x16, #24]
    2558:	add	x16, x16, #0x18
    255c:	br	x17

0000000000002560 <ERR_reason_error_string@plt>:
    2560:	adrp	x16, 18000 <PyModule_AddObject>
    2564:	ldr	x17, [x16, #32]
    2568:	add	x16, x16, #0x20
    256c:	br	x17

0000000000002570 <EVP_sha512_224@plt>:
    2570:	adrp	x16, 18000 <PyModule_AddObject>
    2574:	ldr	x17, [x16, #40]
    2578:	add	x16, x16, #0x28
    257c:	br	x17

0000000000002580 <EVP_blake2s256@plt>:
    2580:	adrp	x16, 18000 <PyModule_AddObject>
    2584:	ldr	x17, [x16, #48]
    2588:	add	x16, x16, #0x30
    258c:	br	x17

0000000000002590 <EVP_MD_CTX_md@plt>:
    2590:	adrp	x16, 18000 <PyModule_AddObject>
    2594:	ldr	x17, [x16, #56]
    2598:	add	x16, x16, #0x38
    259c:	br	x17

00000000000025a0 <PyType_Ready@plt>:
    25a0:	adrp	x16, 18000 <PyModule_AddObject>
    25a4:	ldr	x17, [x16, #64]
    25a8:	add	x16, x16, #0x40
    25ac:	br	x17

00000000000025b0 <EVP_shake256@plt>:
    25b0:	adrp	x16, 18000 <PyModule_AddObject>
    25b4:	ldr	x17, [x16, #72]
    25b8:	add	x16, x16, #0x48
    25bc:	br	x17

00000000000025c0 <EVP_sha384@plt>:
    25c0:	adrp	x16, 18000 <PyModule_AddObject>
    25c4:	ldr	x17, [x16, #80]
    25c8:	add	x16, x16, #0x50
    25cc:	br	x17

00000000000025d0 <__gmon_start__@plt>:
    25d0:	adrp	x16, 18000 <PyModule_AddObject>
    25d4:	ldr	x17, [x16, #88]
    25d8:	add	x16, x16, #0x58
    25dc:	br	x17

00000000000025e0 <ERR_func_error_string@plt>:
    25e0:	adrp	x16, 18000 <PyModule_AddObject>
    25e4:	ldr	x17, [x16, #96]
    25e8:	add	x16, x16, #0x60
    25ec:	br	x17

00000000000025f0 <EVP_sha3_512@plt>:
    25f0:	adrp	x16, 18000 <PyModule_AddObject>
    25f4:	ldr	x17, [x16, #104]
    25f8:	add	x16, x16, #0x68
    25fc:	br	x17

0000000000002600 <OBJ_nid2ln@plt>:
    2600:	adrp	x16, 18000 <PyModule_AddObject>
    2604:	ldr	x17, [x16, #112]
    2608:	add	x16, x16, #0x70
    260c:	br	x17

0000000000002610 <ERR_clear_error@plt>:
    2610:	adrp	x16, 18000 <PyModule_AddObject>
    2614:	ldr	x17, [x16, #120]
    2618:	add	x16, x16, #0x78
    261c:	br	x17

0000000000002620 <PyUnicode_FromString@plt>:
    2620:	adrp	x16, 18000 <PyModule_AddObject>
    2624:	ldr	x17, [x16, #128]
    2628:	add	x16, x16, #0x80
    262c:	br	x17

0000000000002630 <PyErr_NoMemory@plt>:
    2630:	adrp	x16, 18000 <PyModule_AddObject>
    2634:	ldr	x17, [x16, #136]
    2638:	add	x16, x16, #0x88
    263c:	br	x17

0000000000002640 <EVP_get_digestbyname@plt>:
    2640:	adrp	x16, 18000 <PyModule_AddObject>
    2644:	ldr	x17, [x16, #144]
    2648:	add	x16, x16, #0x90
    264c:	br	x17

0000000000002650 <PyThread_free_lock@plt>:
    2650:	adrp	x16, 18000 <PyModule_AddObject>
    2654:	ldr	x17, [x16, #152]
    2658:	add	x16, x16, #0x98
    265c:	br	x17

0000000000002660 <_PyObject_New@plt>:
    2660:	adrp	x16, 18000 <PyModule_AddObject>
    2664:	ldr	x17, [x16, #160]
    2668:	add	x16, x16, #0xa0
    266c:	br	x17

0000000000002670 <PyUnicode_AsUTF8AndSize@plt>:
    2670:	adrp	x16, 18000 <PyModule_AddObject>
    2674:	ldr	x17, [x16, #168]
    2678:	add	x16, x16, #0xa8
    267c:	br	x17

0000000000002680 <EVP_shake128@plt>:
    2680:	adrp	x16, 18000 <PyModule_AddObject>
    2684:	ldr	x17, [x16, #176]
    2688:	add	x16, x16, #0xb0
    268c:	br	x17

0000000000002690 <EVP_md5@plt>:
    2690:	adrp	x16, 18000 <PyModule_AddObject>
    2694:	ldr	x17, [x16, #184]
    2698:	add	x16, x16, #0xb8
    269c:	br	x17

00000000000026a0 <PyUnicode_FromFormat@plt>:
    26a0:	adrp	x16, 18000 <PyModule_AddObject>
    26a4:	ldr	x17, [x16, #192]
    26a8:	add	x16, x16, #0xc0
    26ac:	br	x17

00000000000026b0 <PyThread_allocate_lock@plt>:
    26b0:	adrp	x16, 18000 <PyModule_AddObject>
    26b4:	ldr	x17, [x16, #200]
    26b8:	add	x16, x16, #0xc8
    26bc:	br	x17

00000000000026c0 <EVP_MD_size@plt>:
    26c0:	adrp	x16, 18000 <PyModule_AddObject>
    26c4:	ldr	x17, [x16, #208]
    26c8:	add	x16, x16, #0xd0
    26cc:	br	x17

00000000000026d0 <PyLong_AsLong@plt>:
    26d0:	adrp	x16, 18000 <PyModule_AddObject>
    26d4:	ldr	x17, [x16, #216]
    26d8:	add	x16, x16, #0xd8
    26dc:	br	x17

00000000000026e0 <__cxa_finalize@plt>:
    26e0:	adrp	x16, 18000 <PyModule_AddObject>
    26e4:	ldr	x17, [x16, #224]
    26e8:	add	x16, x16, #0xe0
    26ec:	br	x17

00000000000026f0 <PyErr_Format@plt>:
    26f0:	adrp	x16, 18000 <PyModule_AddObject>
    26f4:	ldr	x17, [x16, #232]
    26f8:	add	x16, x16, #0xe8
    26fc:	br	x17

0000000000002700 <EVP_DigestUpdate@plt>:
    2700:	adrp	x16, 18000 <PyModule_AddObject>
    2704:	ldr	x17, [x16, #240]
    2708:	add	x16, x16, #0xf0
    270c:	br	x17

0000000000002710 <EVP_MD_do_all@plt>:
    2710:	adrp	x16, 18000 <PyModule_AddObject>
    2714:	ldr	x17, [x16, #248]
    2718:	add	x16, x16, #0xf8
    271c:	br	x17

0000000000002720 <PyErr_Occurred@plt>:
    2720:	adrp	x16, 18000 <PyModule_AddObject>
    2724:	ldr	x17, [x16, #256]
    2728:	add	x16, x16, #0x100
    272c:	br	x17

0000000000002730 <EVP_MD_block_size@plt>:
    2730:	adrp	x16, 18000 <PyModule_AddObject>
    2734:	ldr	x17, [x16, #264]
    2738:	add	x16, x16, #0x108
    273c:	br	x17

0000000000002740 <PyThread_release_lock@plt>:
    2740:	adrp	x16, 18000 <PyModule_AddObject>
    2744:	ldr	x17, [x16, #272]
    2748:	add	x16, x16, #0x110
    274c:	br	x17

0000000000002750 <PyObject_GetBuffer@plt>:
    2750:	adrp	x16, 18000 <PyModule_AddObject>
    2754:	ldr	x17, [x16, #280]
    2758:	add	x16, x16, #0x118
    275c:	br	x17

0000000000002760 <EVP_DigestFinal@plt>:
    2760:	adrp	x16, 18000 <PyModule_AddObject>
    2764:	ldr	x17, [x16, #288]
    2768:	add	x16, x16, #0x120
    276c:	br	x17

0000000000002770 <PyEval_RestoreThread@plt>:
    2770:	adrp	x16, 18000 <PyModule_AddObject>
    2774:	ldr	x17, [x16, #296]
    2778:	add	x16, x16, #0x128
    277c:	br	x17

0000000000002780 <EVP_MD_CTX_copy@plt>:
    2780:	adrp	x16, 18000 <PyModule_AddObject>
    2784:	ldr	x17, [x16, #304]
    2788:	add	x16, x16, #0x130
    278c:	br	x17

0000000000002790 <EVP_sha3_384@plt>:
    2790:	adrp	x16, 18000 <PyModule_AddObject>
    2794:	ldr	x17, [x16, #312]
    2798:	add	x16, x16, #0x138
    279c:	br	x17

00000000000027a0 <PyFrozenSet_New@plt>:
    27a0:	adrp	x16, 18000 <PyModule_AddObject>
    27a4:	ldr	x17, [x16, #320]
    27a8:	add	x16, x16, #0x140
    27ac:	br	x17

00000000000027b0 <PyEval_SaveThread@plt>:
    27b0:	adrp	x16, 18000 <PyModule_AddObject>
    27b4:	ldr	x17, [x16, #328]
    27b8:	add	x16, x16, #0x148
    27bc:	br	x17

00000000000027c0 <EVP_sha224@plt>:
    27c0:	adrp	x16, 18000 <PyModule_AddObject>
    27c4:	ldr	x17, [x16, #336]
    27c8:	add	x16, x16, #0x150
    27cc:	br	x17

00000000000027d0 <EVP_sha3_256@plt>:
    27d0:	adrp	x16, 18000 <PyModule_AddObject>
    27d4:	ldr	x17, [x16, #344]
    27d8:	add	x16, x16, #0x158
    27dc:	br	x17

00000000000027e0 <EVP_MD_CTX_new@plt>:
    27e0:	adrp	x16, 18000 <PyModule_AddObject>
    27e4:	ldr	x17, [x16, #352]
    27e8:	add	x16, x16, #0x160
    27ec:	br	x17

00000000000027f0 <PyBuffer_IsContiguous@plt>:
    27f0:	adrp	x16, 18000 <PyModule_AddObject>
    27f4:	ldr	x17, [x16, #360]
    27f8:	add	x16, x16, #0x168
    27fc:	br	x17

0000000000002800 <PyType_IsSubtype@plt>:
    2800:	adrp	x16, 18000 <PyModule_AddObject>
    2804:	ldr	x17, [x16, #368]
    2808:	add	x16, x16, #0x170
    280c:	br	x17

0000000000002810 <_Py_strhex@plt>:
    2810:	adrp	x16, 18000 <PyModule_AddObject>
    2814:	ldr	x17, [x16, #376]
    2818:	add	x16, x16, #0x178
    281c:	br	x17

0000000000002820 <EVP_sha1@plt>:
    2820:	adrp	x16, 18000 <PyModule_AddObject>
    2824:	ldr	x17, [x16, #384]
    2828:	add	x16, x16, #0x180
    282c:	br	x17

0000000000002830 <EVP_PBE_scrypt@plt>:
    2830:	adrp	x16, 18000 <PyModule_AddObject>
    2834:	ldr	x17, [x16, #392]
    2838:	add	x16, x16, #0x188
    283c:	br	x17

0000000000002840 <ERR_peek_last_error@plt>:
    2840:	adrp	x16, 18000 <PyModule_AddObject>
    2844:	ldr	x17, [x16, #400]
    2848:	add	x16, x16, #0x190
    284c:	br	x17

0000000000002850 <PySet_Add@plt>:
    2850:	adrp	x16, 18000 <PyModule_AddObject>
    2854:	ldr	x17, [x16, #408]
    2858:	add	x16, x16, #0x198
    285c:	br	x17

0000000000002860 <HMAC@plt>:
    2860:	adrp	x16, 18000 <PyModule_AddObject>
    2864:	ldr	x17, [x16, #416]
    2868:	add	x16, x16, #0x1a0
    286c:	br	x17

0000000000002870 <PyBytes_FromStringAndSize@plt>:
    2870:	adrp	x16, 18000 <PyModule_AddObject>
    2874:	ldr	x17, [x16, #424]
    2878:	add	x16, x16, #0x1a8
    287c:	br	x17

0000000000002880 <_PyArg_Parse_SizeT@plt>:
    2880:	adrp	x16, 18000 <PyModule_AddObject>
    2884:	ldr	x17, [x16, #432]
    2888:	add	x16, x16, #0x1b0
    288c:	br	x17

0000000000002890 <PyLong_FromLong@plt>:
    2890:	adrp	x16, 18000 <PyModule_AddObject>
    2894:	ldr	x17, [x16, #440]
    2898:	add	x16, x16, #0x1b8
    289c:	br	x17

00000000000028a0 <strcmp@plt>:
    28a0:	adrp	x16, 18000 <PyModule_AddObject>
    28a4:	ldr	x17, [x16, #448]
    28a8:	add	x16, x16, #0x1c0
    28ac:	br	x17

00000000000028b0 <EVP_blake2b512@plt>:
    28b0:	adrp	x16, 18000 <PyModule_AddObject>
    28b4:	ldr	x17, [x16, #456]
    28b8:	add	x16, x16, #0x1c8
    28bc:	br	x17

00000000000028c0 <_PyArg_UnpackKeywords@plt>:
    28c0:	adrp	x16, 18000 <PyModule_AddObject>
    28c4:	ldr	x17, [x16, #464]
    28c8:	add	x16, x16, #0x1d0
    28cc:	br	x17

00000000000028d0 <EVP_MD_CTX_free@plt>:
    28d0:	adrp	x16, 18000 <PyModule_AddObject>
    28d4:	ldr	x17, [x16, #472]
    28d8:	add	x16, x16, #0x1d8
    28dc:	br	x17

00000000000028e0 <_Py_Dealloc@plt>:
    28e0:	adrp	x16, 18000 <PyModule_AddObject>
    28e4:	ldr	x17, [x16, #480]
    28e8:	add	x16, x16, #0x1e0
    28ec:	br	x17

00000000000028f0 <PyObject_Free@plt>:
    28f0:	adrp	x16, 18000 <PyModule_AddObject>
    28f4:	ldr	x17, [x16, #488]
    28f8:	add	x16, x16, #0x1e8
    28fc:	br	x17

0000000000002900 <EVP_sha3_224@plt>:
    2900:	adrp	x16, 18000 <PyModule_AddObject>
    2904:	ldr	x17, [x16, #496]
    2908:	add	x16, x16, #0x1f0
    290c:	br	x17

0000000000002910 <PyModule_Create2@plt>:
    2910:	adrp	x16, 18000 <PyModule_AddObject>
    2914:	ldr	x17, [x16, #504]
    2918:	add	x16, x16, #0x1f8
    291c:	br	x17

0000000000002920 <PyErr_SetString@plt>:
    2920:	adrp	x16, 18000 <PyModule_AddObject>
    2924:	ldr	x17, [x16, #512]
    2928:	add	x16, x16, #0x200
    292c:	br	x17

0000000000002930 <OBJ_nid2sn@plt>:
    2930:	adrp	x16, 18000 <PyModule_AddObject>
    2934:	ldr	x17, [x16, #520]
    2938:	add	x16, x16, #0x208
    293c:	br	x17

0000000000002940 <EVP_sha512@plt>:
    2940:	adrp	x16, 18000 <PyModule_AddObject>
    2944:	ldr	x17, [x16, #528]
    2948:	add	x16, x16, #0x210
    294c:	br	x17

0000000000002950 <EVP_sha256@plt>:
    2950:	adrp	x16, 18000 <PyModule_AddObject>
    2954:	ldr	x17, [x16, #536]
    2958:	add	x16, x16, #0x218
    295c:	br	x17

0000000000002960 <EVP_sha512_256@plt>:
    2960:	adrp	x16, 18000 <PyModule_AddObject>
    2964:	ldr	x17, [x16, #544]
    2968:	add	x16, x16, #0x220
    296c:	br	x17

0000000000002970 <PyBuffer_Release@plt>:
    2970:	adrp	x16, 18000 <PyModule_AddObject>
    2974:	ldr	x17, [x16, #552]
    2978:	add	x16, x16, #0x228
    297c:	br	x17

0000000000002980 <strlen@plt>:
    2980:	adrp	x16, 18000 <PyModule_AddObject>
    2984:	ldr	x17, [x16, #560]
    2988:	add	x16, x16, #0x230
    298c:	br	x17

0000000000002990 <ERR_lib_error_string@plt>:
    2990:	adrp	x16, 18000 <PyModule_AddObject>
    2994:	ldr	x17, [x16, #568]
    2998:	add	x16, x16, #0x238
    299c:	br	x17

00000000000029a0 <PyLong_AsUnsignedLong@plt>:
    29a0:	adrp	x16, 18000 <PyModule_AddObject>
    29a4:	ldr	x17, [x16, #576]
    29a8:	add	x16, x16, #0x240
    29ac:	br	x17

00000000000029b0 <_PyArg_BadArgument@plt>:
    29b0:	adrp	x16, 18000 <PyModule_AddObject>
    29b4:	ldr	x17, [x16, #584]
    29b8:	add	x16, x16, #0x248
    29bc:	br	x17

00000000000029c0 <PyThread_acquire_lock@plt>:
    29c0:	adrp	x16, 18000 <PyModule_AddObject>
    29c4:	ldr	x17, [x16, #592]
    29c8:	add	x16, x16, #0x250
    29cc:	br	x17

Disassembly of section .text:

00000000000029d0 <PyInit__hashlib@@Base-0x3070>:
    29d0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    29d4:	ldr	x0, [x0, #3992]
    29d8:	cbz	x0, 29e0 <PyThread_acquire_lock@plt+0x20>
    29dc:	b	25d0 <__gmon_start__@plt>
    29e0:	ret
    29e4:	stp	x29, x30, [sp, #-32]!
    29e8:	mov	x29, sp
    29ec:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    29f0:	add	x0, x0, #0x988
    29f4:	str	x0, [sp, #24]
    29f8:	ldr	x0, [sp, #24]
    29fc:	str	x0, [sp, #24]
    2a00:	ldr	x1, [sp, #24]
    2a04:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2a08:	add	x0, x0, #0x988
    2a0c:	cmp	x1, x0
    2a10:	b.eq	2a48 <PyThread_acquire_lock@plt+0x88>  // b.none
    2a14:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    2a18:	ldr	x0, [x0, #4016]
    2a1c:	str	x0, [sp, #16]
    2a20:	ldr	x0, [sp, #16]
    2a24:	str	x0, [sp, #16]
    2a28:	ldr	x0, [sp, #16]
    2a2c:	cmp	x0, #0x0
    2a30:	b.eq	2a4c <PyThread_acquire_lock@plt+0x8c>  // b.none
    2a34:	ldr	x1, [sp, #16]
    2a38:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2a3c:	add	x0, x0, #0x988
    2a40:	blr	x1
    2a44:	b	2a4c <PyThread_acquire_lock@plt+0x8c>
    2a48:	nop
    2a4c:	ldp	x29, x30, [sp], #32
    2a50:	ret
    2a54:	stp	x29, x30, [sp, #-48]!
    2a58:	mov	x29, sp
    2a5c:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2a60:	add	x0, x0, #0x988
    2a64:	str	x0, [sp, #40]
    2a68:	ldr	x0, [sp, #40]
    2a6c:	str	x0, [sp, #40]
    2a70:	ldr	x1, [sp, #40]
    2a74:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2a78:	add	x0, x0, #0x988
    2a7c:	sub	x0, x1, x0
    2a80:	asr	x0, x0, #3
    2a84:	lsr	x1, x0, #63
    2a88:	add	x0, x1, x0
    2a8c:	asr	x0, x0, #1
    2a90:	str	x0, [sp, #32]
    2a94:	ldr	x0, [sp, #32]
    2a98:	cmp	x0, #0x0
    2a9c:	b.eq	2ad8 <PyThread_acquire_lock@plt+0x118>  // b.none
    2aa0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    2aa4:	ldr	x0, [x0, #4032]
    2aa8:	str	x0, [sp, #24]
    2aac:	ldr	x0, [sp, #24]
    2ab0:	str	x0, [sp, #24]
    2ab4:	ldr	x0, [sp, #24]
    2ab8:	cmp	x0, #0x0
    2abc:	b.eq	2adc <PyThread_acquire_lock@plt+0x11c>  // b.none
    2ac0:	ldr	x2, [sp, #24]
    2ac4:	ldr	x1, [sp, #32]
    2ac8:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2acc:	add	x0, x0, #0x988
    2ad0:	blr	x2
    2ad4:	b	2adc <PyThread_acquire_lock@plt+0x11c>
    2ad8:	nop
    2adc:	ldp	x29, x30, [sp], #48
    2ae0:	ret
    2ae4:	stp	x29, x30, [sp, #-16]!
    2ae8:	mov	x29, sp
    2aec:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2af0:	add	x0, x0, #0x988
    2af4:	ldrb	w0, [x0]
    2af8:	and	x0, x0, #0xff
    2afc:	cmp	x0, #0x0
    2b00:	b.ne	2b3c <PyThread_acquire_lock@plt+0x17c>  // b.any
    2b04:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    2b08:	ldr	x0, [x0, #4008]
    2b0c:	cmp	x0, #0x0
    2b10:	b.eq	2b24 <PyThread_acquire_lock@plt+0x164>  // b.none
    2b14:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2b18:	add	x0, x0, #0x258
    2b1c:	ldr	x0, [x0]
    2b20:	bl	26e0 <__cxa_finalize@plt>
    2b24:	bl	29e4 <PyThread_acquire_lock@plt+0x24>
    2b28:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2b2c:	add	x0, x0, #0x988
    2b30:	mov	w1, #0x1                   	// #1
    2b34:	strb	w1, [x0]
    2b38:	b	2b40 <PyThread_acquire_lock@plt+0x180>
    2b3c:	nop
    2b40:	ldp	x29, x30, [sp], #16
    2b44:	ret
    2b48:	stp	x29, x30, [sp, #-16]!
    2b4c:	mov	x29, sp
    2b50:	bl	2a54 <PyThread_acquire_lock@plt+0x94>
    2b54:	nop
    2b58:	ldp	x29, x30, [sp], #16
    2b5c:	ret
    2b60:	sub	sp, sp, #0x10
    2b64:	str	x0, [sp, #8]
    2b68:	ldr	x0, [sp, #8]
    2b6c:	ldr	x0, [x0]
    2b70:	add	x1, x0, #0x1
    2b74:	ldr	x0, [sp, #8]
    2b78:	str	x1, [x0]
    2b7c:	nop
    2b80:	add	sp, sp, #0x10
    2b84:	ret
    2b88:	stp	x29, x30, [sp, #-48]!
    2b8c:	mov	x29, sp
    2b90:	str	x0, [sp, #40]
    2b94:	str	w1, [sp, #36]
    2b98:	str	x2, [sp, #24]
    2b9c:	ldr	x0, [sp, #24]
    2ba0:	ldr	x0, [x0]
    2ba4:	sub	x1, x0, #0x1
    2ba8:	ldr	x0, [sp, #24]
    2bac:	str	x1, [x0]
    2bb0:	ldr	x0, [sp, #24]
    2bb4:	ldr	x0, [x0]
    2bb8:	cmp	x0, #0x0
    2bbc:	b.ne	2bc8 <PyThread_acquire_lock@plt+0x208>  // b.any
    2bc0:	ldr	x0, [sp, #24]
    2bc4:	bl	28e0 <_Py_Dealloc@plt>
    2bc8:	nop
    2bcc:	ldp	x29, x30, [sp], #48
    2bd0:	ret
    2bd4:	stp	x29, x30, [sp, #-32]!
    2bd8:	mov	x29, sp
    2bdc:	str	x0, [sp, #24]
    2be0:	str	x1, [sp, #16]
    2be4:	ldr	x0, [sp, #24]
    2be8:	bl	470c <PyThread_acquire_lock@plt+0x1d4c>
    2bec:	ldp	x29, x30, [sp], #32
    2bf0:	ret
    2bf4:	stp	x29, x30, [sp, #-32]!
    2bf8:	mov	x29, sp
    2bfc:	str	x0, [sp, #24]
    2c00:	str	x1, [sp, #16]
    2c04:	ldr	x0, [sp, #24]
    2c08:	bl	4780 <PyThread_acquire_lock@plt+0x1dc0>
    2c0c:	ldp	x29, x30, [sp], #32
    2c10:	ret
    2c14:	stp	x29, x30, [sp, #-32]!
    2c18:	mov	x29, sp
    2c1c:	str	x0, [sp, #24]
    2c20:	str	x1, [sp, #16]
    2c24:	ldr	x0, [sp, #24]
    2c28:	bl	483c <PyThread_acquire_lock@plt+0x1e7c>
    2c2c:	ldp	x29, x30, [sp], #32
    2c30:	ret
    2c34:	sub	sp, sp, #0x70
    2c38:	stp	x29, x30, [sp, #16]
    2c3c:	add	x29, sp, #0x10
    2c40:	str	x0, [sp, #56]
    2c44:	str	x1, [sp, #48]
    2c48:	str	x2, [sp, #40]
    2c4c:	str	x3, [sp, #32]
    2c50:	str	xzr, [sp, #104]
    2c54:	ldr	x0, [sp, #32]
    2c58:	cmp	x0, #0x0
    2c5c:	b.eq	2c6c <PyThread_acquire_lock@plt+0x2ac>  // b.none
    2c60:	ldr	x0, [sp, #32]
    2c64:	ldr	x0, [x0, #16]
    2c68:	b	2c70 <PyThread_acquire_lock@plt+0x2b0>
    2c6c:	mov	x0, #0x0                   	// #0
    2c70:	ldr	x1, [sp, #40]
    2c74:	add	x0, x0, x1
    2c78:	sub	x0, x0, #0x1
    2c7c:	str	x0, [sp, #88]
    2c80:	str	xzr, [sp, #96]
    2c84:	ldr	x0, [sp, #32]
    2c88:	cmp	x0, #0x0
    2c8c:	b.ne	2cb4 <PyThread_acquire_lock@plt+0x2f4>  // b.any
    2c90:	ldr	x0, [sp, #40]
    2c94:	cmp	x0, #0x0
    2c98:	b.le	2cb4 <PyThread_acquire_lock@plt+0x2f4>
    2c9c:	ldr	x0, [sp, #40]
    2ca0:	cmp	x0, #0x2
    2ca4:	b.gt	2cb4 <PyThread_acquire_lock@plt+0x2f4>
    2ca8:	ldr	x0, [sp, #48]
    2cac:	cmp	x0, #0x0
    2cb0:	b.ne	2ce8 <PyThread_acquire_lock@plt+0x328>  // b.any
    2cb4:	add	x0, sp, #0x40
    2cb8:	str	x0, [sp]
    2cbc:	mov	w7, #0x0                   	// #0
    2cc0:	mov	w6, #0x2                   	// #2
    2cc4:	mov	w5, #0x1                   	// #1
    2cc8:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2ccc:	add	x4, x0, #0x708
    2cd0:	ldr	x3, [sp, #32]
    2cd4:	mov	x2, #0x0                   	// #0
    2cd8:	ldr	x1, [sp, #40]
    2cdc:	ldr	x0, [sp, #48]
    2ce0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2ce4:	b	2cec <PyThread_acquire_lock@plt+0x32c>
    2ce8:	ldr	x0, [sp, #48]
    2cec:	str	x0, [sp, #48]
    2cf0:	ldr	x0, [sp, #48]
    2cf4:	cmp	x0, #0x0
    2cf8:	b.eq	2d40 <PyThread_acquire_lock@plt+0x380>  // b.none
    2cfc:	ldr	x0, [sp, #48]
    2d00:	ldr	x0, [x0]
    2d04:	str	x0, [sp, #80]
    2d08:	ldr	x0, [sp, #88]
    2d0c:	cmp	x0, #0x0
    2d10:	b.eq	2d24 <PyThread_acquire_lock@plt+0x364>  // b.none
    2d14:	ldr	x0, [sp, #48]
    2d18:	ldr	x0, [x0, #8]
    2d1c:	str	x0, [sp, #96]
    2d20:	b	2d28 <PyThread_acquire_lock@plt+0x368>
    2d24:	nop
    2d28:	ldr	x2, [sp, #96]
    2d2c:	ldr	x1, [sp, #80]
    2d30:	ldr	x0, [sp, #56]
    2d34:	bl	4d08 <PyThread_acquire_lock@plt+0x2348>
    2d38:	str	x0, [sp, #104]
    2d3c:	b	2d44 <PyThread_acquire_lock@plt+0x384>
    2d40:	nop
    2d44:	ldr	x0, [sp, #104]
    2d48:	ldp	x29, x30, [sp, #16]
    2d4c:	add	sp, sp, #0x70
    2d50:	ret
    2d54:	sub	sp, sp, #0x60
    2d58:	stp	x29, x30, [sp, #16]
    2d5c:	add	x29, sp, #0x10
    2d60:	str	x0, [sp, #56]
    2d64:	str	x1, [sp, #48]
    2d68:	str	x2, [sp, #40]
    2d6c:	str	x3, [sp, #32]
    2d70:	str	xzr, [sp, #88]
    2d74:	ldr	x0, [sp, #32]
    2d78:	cmp	x0, #0x0
    2d7c:	b.eq	2d8c <PyThread_acquire_lock@plt+0x3cc>  // b.none
    2d80:	ldr	x0, [sp, #32]
    2d84:	ldr	x0, [x0, #16]
    2d88:	b	2d90 <PyThread_acquire_lock@plt+0x3d0>
    2d8c:	mov	x0, #0x0                   	// #0
    2d90:	ldr	x1, [sp, #40]
    2d94:	add	x0, x0, x1
    2d98:	str	x0, [sp, #72]
    2d9c:	str	xzr, [sp, #80]
    2da0:	ldr	x0, [sp, #32]
    2da4:	cmp	x0, #0x0
    2da8:	b.ne	2dd0 <PyThread_acquire_lock@plt+0x410>  // b.any
    2dac:	ldr	x0, [sp, #40]
    2db0:	cmp	x0, #0x0
    2db4:	b.lt	2dd0 <PyThread_acquire_lock@plt+0x410>  // b.tstop
    2db8:	ldr	x0, [sp, #40]
    2dbc:	cmp	x0, #0x1
    2dc0:	b.gt	2dd0 <PyThread_acquire_lock@plt+0x410>
    2dc4:	ldr	x0, [sp, #48]
    2dc8:	cmp	x0, #0x0
    2dcc:	b.ne	2e04 <PyThread_acquire_lock@plt+0x444>  // b.any
    2dd0:	add	x0, sp, #0x40
    2dd4:	str	x0, [sp]
    2dd8:	mov	w7, #0x0                   	// #0
    2ddc:	mov	w6, #0x1                   	// #1
    2de0:	mov	w5, #0x0                   	// #0
    2de4:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2de8:	add	x4, x0, #0x748
    2dec:	ldr	x3, [sp, #32]
    2df0:	mov	x2, #0x0                   	// #0
    2df4:	ldr	x1, [sp, #40]
    2df8:	ldr	x0, [sp, #48]
    2dfc:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2e00:	b	2e08 <PyThread_acquire_lock@plt+0x448>
    2e04:	ldr	x0, [sp, #48]
    2e08:	str	x0, [sp, #48]
    2e0c:	ldr	x0, [sp, #48]
    2e10:	cmp	x0, #0x0
    2e14:	b.eq	2e4c <PyThread_acquire_lock@plt+0x48c>  // b.none
    2e18:	ldr	x0, [sp, #72]
    2e1c:	cmp	x0, #0x0
    2e20:	b.eq	2e34 <PyThread_acquire_lock@plt+0x474>  // b.none
    2e24:	ldr	x0, [sp, #48]
    2e28:	ldr	x0, [x0]
    2e2c:	str	x0, [sp, #80]
    2e30:	b	2e38 <PyThread_acquire_lock@plt+0x478>
    2e34:	nop
    2e38:	ldr	x1, [sp, #80]
    2e3c:	ldr	x0, [sp, #56]
    2e40:	bl	5008 <PyThread_acquire_lock@plt+0x2648>
    2e44:	str	x0, [sp, #88]
    2e48:	b	2e50 <PyThread_acquire_lock@plt+0x490>
    2e4c:	nop
    2e50:	ldr	x0, [sp, #88]
    2e54:	ldp	x29, x30, [sp, #16]
    2e58:	add	sp, sp, #0x60
    2e5c:	ret
    2e60:	sub	sp, sp, #0x60
    2e64:	stp	x29, x30, [sp, #16]
    2e68:	add	x29, sp, #0x10
    2e6c:	str	x0, [sp, #56]
    2e70:	str	x1, [sp, #48]
    2e74:	str	x2, [sp, #40]
    2e78:	str	x3, [sp, #32]
    2e7c:	str	xzr, [sp, #88]
    2e80:	ldr	x0, [sp, #32]
    2e84:	cmp	x0, #0x0
    2e88:	b.eq	2e98 <PyThread_acquire_lock@plt+0x4d8>  // b.none
    2e8c:	ldr	x0, [sp, #32]
    2e90:	ldr	x0, [x0, #16]
    2e94:	b	2e9c <PyThread_acquire_lock@plt+0x4dc>
    2e98:	mov	x0, #0x0                   	// #0
    2e9c:	ldr	x1, [sp, #40]
    2ea0:	add	x0, x0, x1
    2ea4:	str	x0, [sp, #72]
    2ea8:	str	xzr, [sp, #80]
    2eac:	ldr	x0, [sp, #32]
    2eb0:	cmp	x0, #0x0
    2eb4:	b.ne	2edc <PyThread_acquire_lock@plt+0x51c>  // b.any
    2eb8:	ldr	x0, [sp, #40]
    2ebc:	cmp	x0, #0x0
    2ec0:	b.lt	2edc <PyThread_acquire_lock@plt+0x51c>  // b.tstop
    2ec4:	ldr	x0, [sp, #40]
    2ec8:	cmp	x0, #0x1
    2ecc:	b.gt	2edc <PyThread_acquire_lock@plt+0x51c>
    2ed0:	ldr	x0, [sp, #48]
    2ed4:	cmp	x0, #0x0
    2ed8:	b.ne	2f10 <PyThread_acquire_lock@plt+0x550>  // b.any
    2edc:	add	x0, sp, #0x40
    2ee0:	str	x0, [sp]
    2ee4:	mov	w7, #0x0                   	// #0
    2ee8:	mov	w6, #0x1                   	// #1
    2eec:	mov	w5, #0x0                   	// #0
    2ef0:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    2ef4:	add	x4, x0, #0x788
    2ef8:	ldr	x3, [sp, #32]
    2efc:	mov	x2, #0x0                   	// #0
    2f00:	ldr	x1, [sp, #40]
    2f04:	ldr	x0, [sp, #48]
    2f08:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2f0c:	b	2f14 <PyThread_acquire_lock@plt+0x554>
    2f10:	ldr	x0, [sp, #48]
    2f14:	str	x0, [sp, #48]
    2f18:	ldr	x0, [sp, #48]
    2f1c:	cmp	x0, #0x0
    2f20:	b.eq	2f58 <PyThread_acquire_lock@plt+0x598>  // b.none
    2f24:	ldr	x0, [sp, #72]
    2f28:	cmp	x0, #0x0
    2f2c:	b.eq	2f40 <PyThread_acquire_lock@plt+0x580>  // b.none
    2f30:	ldr	x0, [sp, #48]
    2f34:	ldr	x0, [x0]
    2f38:	str	x0, [sp, #80]
    2f3c:	b	2f44 <PyThread_acquire_lock@plt+0x584>
    2f40:	nop
    2f44:	ldr	x1, [sp, #80]
    2f48:	ldr	x0, [sp, #56]
    2f4c:	bl	5034 <PyThread_acquire_lock@plt+0x2674>
    2f50:	str	x0, [sp, #88]
    2f54:	b	2f5c <PyThread_acquire_lock@plt+0x59c>
    2f58:	nop
    2f5c:	ldr	x0, [sp, #88]
    2f60:	ldp	x29, x30, [sp, #16]
    2f64:	add	sp, sp, #0x60
    2f68:	ret
    2f6c:	sub	sp, sp, #0x60
    2f70:	stp	x29, x30, [sp, #16]
    2f74:	add	x29, sp, #0x10
    2f78:	str	x0, [sp, #56]
    2f7c:	str	x1, [sp, #48]
    2f80:	str	x2, [sp, #40]
    2f84:	str	x3, [sp, #32]
    2f88:	str	xzr, [sp, #88]
    2f8c:	ldr	x0, [sp, #32]
    2f90:	cmp	x0, #0x0
    2f94:	b.eq	2fa4 <PyThread_acquire_lock@plt+0x5e4>  // b.none
    2f98:	ldr	x0, [sp, #32]
    2f9c:	ldr	x0, [x0, #16]
    2fa0:	b	2fa8 <PyThread_acquire_lock@plt+0x5e8>
    2fa4:	mov	x0, #0x0                   	// #0
    2fa8:	ldr	x1, [sp, #40]
    2fac:	add	x0, x0, x1
    2fb0:	str	x0, [sp, #72]
    2fb4:	str	xzr, [sp, #80]
    2fb8:	ldr	x0, [sp, #32]
    2fbc:	cmp	x0, #0x0
    2fc0:	b.ne	2fe8 <PyThread_acquire_lock@plt+0x628>  // b.any
    2fc4:	ldr	x0, [sp, #40]
    2fc8:	cmp	x0, #0x0
    2fcc:	b.lt	2fe8 <PyThread_acquire_lock@plt+0x628>  // b.tstop
    2fd0:	ldr	x0, [sp, #40]
    2fd4:	cmp	x0, #0x1
    2fd8:	b.gt	2fe8 <PyThread_acquire_lock@plt+0x628>
    2fdc:	ldr	x0, [sp, #48]
    2fe0:	cmp	x0, #0x0
    2fe4:	b.ne	301c <PyThread_acquire_lock@plt+0x65c>  // b.any
    2fe8:	add	x0, sp, #0x40
    2fec:	str	x0, [sp]
    2ff0:	mov	w7, #0x0                   	// #0
    2ff4:	mov	w6, #0x1                   	// #1
    2ff8:	mov	w5, #0x0                   	// #0
    2ffc:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3000:	add	x4, x0, #0x7c8
    3004:	ldr	x3, [sp, #32]
    3008:	mov	x2, #0x0                   	// #0
    300c:	ldr	x1, [sp, #40]
    3010:	ldr	x0, [sp, #48]
    3014:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3018:	b	3020 <PyThread_acquire_lock@plt+0x660>
    301c:	ldr	x0, [sp, #48]
    3020:	str	x0, [sp, #48]
    3024:	ldr	x0, [sp, #48]
    3028:	cmp	x0, #0x0
    302c:	b.eq	3064 <PyThread_acquire_lock@plt+0x6a4>  // b.none
    3030:	ldr	x0, [sp, #72]
    3034:	cmp	x0, #0x0
    3038:	b.eq	304c <PyThread_acquire_lock@plt+0x68c>  // b.none
    303c:	ldr	x0, [sp, #48]
    3040:	ldr	x0, [x0]
    3044:	str	x0, [sp, #80]
    3048:	b	3050 <PyThread_acquire_lock@plt+0x690>
    304c:	nop
    3050:	ldr	x1, [sp, #80]
    3054:	ldr	x0, [sp, #56]
    3058:	bl	5060 <PyThread_acquire_lock@plt+0x26a0>
    305c:	str	x0, [sp, #88]
    3060:	b	3068 <PyThread_acquire_lock@plt+0x6a8>
    3064:	nop
    3068:	ldr	x0, [sp, #88]
    306c:	ldp	x29, x30, [sp, #16]
    3070:	add	sp, sp, #0x60
    3074:	ret
    3078:	sub	sp, sp, #0x60
    307c:	stp	x29, x30, [sp, #16]
    3080:	add	x29, sp, #0x10
    3084:	str	x0, [sp, #56]
    3088:	str	x1, [sp, #48]
    308c:	str	x2, [sp, #40]
    3090:	str	x3, [sp, #32]
    3094:	str	xzr, [sp, #88]
    3098:	ldr	x0, [sp, #32]
    309c:	cmp	x0, #0x0
    30a0:	b.eq	30b0 <PyThread_acquire_lock@plt+0x6f0>  // b.none
    30a4:	ldr	x0, [sp, #32]
    30a8:	ldr	x0, [x0, #16]
    30ac:	b	30b4 <PyThread_acquire_lock@plt+0x6f4>
    30b0:	mov	x0, #0x0                   	// #0
    30b4:	ldr	x1, [sp, #40]
    30b8:	add	x0, x0, x1
    30bc:	str	x0, [sp, #72]
    30c0:	str	xzr, [sp, #80]
    30c4:	ldr	x0, [sp, #32]
    30c8:	cmp	x0, #0x0
    30cc:	b.ne	30f4 <PyThread_acquire_lock@plt+0x734>  // b.any
    30d0:	ldr	x0, [sp, #40]
    30d4:	cmp	x0, #0x0
    30d8:	b.lt	30f4 <PyThread_acquire_lock@plt+0x734>  // b.tstop
    30dc:	ldr	x0, [sp, #40]
    30e0:	cmp	x0, #0x1
    30e4:	b.gt	30f4 <PyThread_acquire_lock@plt+0x734>
    30e8:	ldr	x0, [sp, #48]
    30ec:	cmp	x0, #0x0
    30f0:	b.ne	3128 <PyThread_acquire_lock@plt+0x768>  // b.any
    30f4:	add	x0, sp, #0x40
    30f8:	str	x0, [sp]
    30fc:	mov	w7, #0x0                   	// #0
    3100:	mov	w6, #0x1                   	// #1
    3104:	mov	w5, #0x0                   	// #0
    3108:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    310c:	add	x4, x0, #0x808
    3110:	ldr	x3, [sp, #32]
    3114:	mov	x2, #0x0                   	// #0
    3118:	ldr	x1, [sp, #40]
    311c:	ldr	x0, [sp, #48]
    3120:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3124:	b	312c <PyThread_acquire_lock@plt+0x76c>
    3128:	ldr	x0, [sp, #48]
    312c:	str	x0, [sp, #48]
    3130:	ldr	x0, [sp, #48]
    3134:	cmp	x0, #0x0
    3138:	b.eq	3170 <PyThread_acquire_lock@plt+0x7b0>  // b.none
    313c:	ldr	x0, [sp, #72]
    3140:	cmp	x0, #0x0
    3144:	b.eq	3158 <PyThread_acquire_lock@plt+0x798>  // b.none
    3148:	ldr	x0, [sp, #48]
    314c:	ldr	x0, [x0]
    3150:	str	x0, [sp, #80]
    3154:	b	315c <PyThread_acquire_lock@plt+0x79c>
    3158:	nop
    315c:	ldr	x1, [sp, #80]
    3160:	ldr	x0, [sp, #56]
    3164:	bl	508c <PyThread_acquire_lock@plt+0x26cc>
    3168:	str	x0, [sp, #88]
    316c:	b	3174 <PyThread_acquire_lock@plt+0x7b4>
    3170:	nop
    3174:	ldr	x0, [sp, #88]
    3178:	ldp	x29, x30, [sp, #16]
    317c:	add	sp, sp, #0x60
    3180:	ret
    3184:	sub	sp, sp, #0x60
    3188:	stp	x29, x30, [sp, #16]
    318c:	add	x29, sp, #0x10
    3190:	str	x0, [sp, #56]
    3194:	str	x1, [sp, #48]
    3198:	str	x2, [sp, #40]
    319c:	str	x3, [sp, #32]
    31a0:	str	xzr, [sp, #88]
    31a4:	ldr	x0, [sp, #32]
    31a8:	cmp	x0, #0x0
    31ac:	b.eq	31bc <PyThread_acquire_lock@plt+0x7fc>  // b.none
    31b0:	ldr	x0, [sp, #32]
    31b4:	ldr	x0, [x0, #16]
    31b8:	b	31c0 <PyThread_acquire_lock@plt+0x800>
    31bc:	mov	x0, #0x0                   	// #0
    31c0:	ldr	x1, [sp, #40]
    31c4:	add	x0, x0, x1
    31c8:	str	x0, [sp, #72]
    31cc:	str	xzr, [sp, #80]
    31d0:	ldr	x0, [sp, #32]
    31d4:	cmp	x0, #0x0
    31d8:	b.ne	3200 <PyThread_acquire_lock@plt+0x840>  // b.any
    31dc:	ldr	x0, [sp, #40]
    31e0:	cmp	x0, #0x0
    31e4:	b.lt	3200 <PyThread_acquire_lock@plt+0x840>  // b.tstop
    31e8:	ldr	x0, [sp, #40]
    31ec:	cmp	x0, #0x1
    31f0:	b.gt	3200 <PyThread_acquire_lock@plt+0x840>
    31f4:	ldr	x0, [sp, #48]
    31f8:	cmp	x0, #0x0
    31fc:	b.ne	3234 <PyThread_acquire_lock@plt+0x874>  // b.any
    3200:	add	x0, sp, #0x40
    3204:	str	x0, [sp]
    3208:	mov	w7, #0x0                   	// #0
    320c:	mov	w6, #0x1                   	// #1
    3210:	mov	w5, #0x0                   	// #0
    3214:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3218:	add	x4, x0, #0x848
    321c:	ldr	x3, [sp, #32]
    3220:	mov	x2, #0x0                   	// #0
    3224:	ldr	x1, [sp, #40]
    3228:	ldr	x0, [sp, #48]
    322c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3230:	b	3238 <PyThread_acquire_lock@plt+0x878>
    3234:	ldr	x0, [sp, #48]
    3238:	str	x0, [sp, #48]
    323c:	ldr	x0, [sp, #48]
    3240:	cmp	x0, #0x0
    3244:	b.eq	327c <PyThread_acquire_lock@plt+0x8bc>  // b.none
    3248:	ldr	x0, [sp, #72]
    324c:	cmp	x0, #0x0
    3250:	b.eq	3264 <PyThread_acquire_lock@plt+0x8a4>  // b.none
    3254:	ldr	x0, [sp, #48]
    3258:	ldr	x0, [x0]
    325c:	str	x0, [sp, #80]
    3260:	b	3268 <PyThread_acquire_lock@plt+0x8a8>
    3264:	nop
    3268:	ldr	x1, [sp, #80]
    326c:	ldr	x0, [sp, #56]
    3270:	bl	50b8 <PyThread_acquire_lock@plt+0x26f8>
    3274:	str	x0, [sp, #88]
    3278:	b	3280 <PyThread_acquire_lock@plt+0x8c0>
    327c:	nop
    3280:	ldr	x0, [sp, #88]
    3284:	ldp	x29, x30, [sp, #16]
    3288:	add	sp, sp, #0x60
    328c:	ret
    3290:	sub	sp, sp, #0x60
    3294:	stp	x29, x30, [sp, #16]
    3298:	add	x29, sp, #0x10
    329c:	str	x0, [sp, #56]
    32a0:	str	x1, [sp, #48]
    32a4:	str	x2, [sp, #40]
    32a8:	str	x3, [sp, #32]
    32ac:	str	xzr, [sp, #88]
    32b0:	ldr	x0, [sp, #32]
    32b4:	cmp	x0, #0x0
    32b8:	b.eq	32c8 <PyThread_acquire_lock@plt+0x908>  // b.none
    32bc:	ldr	x0, [sp, #32]
    32c0:	ldr	x0, [x0, #16]
    32c4:	b	32cc <PyThread_acquire_lock@plt+0x90c>
    32c8:	mov	x0, #0x0                   	// #0
    32cc:	ldr	x1, [sp, #40]
    32d0:	add	x0, x0, x1
    32d4:	str	x0, [sp, #72]
    32d8:	str	xzr, [sp, #80]
    32dc:	ldr	x0, [sp, #32]
    32e0:	cmp	x0, #0x0
    32e4:	b.ne	330c <PyThread_acquire_lock@plt+0x94c>  // b.any
    32e8:	ldr	x0, [sp, #40]
    32ec:	cmp	x0, #0x0
    32f0:	b.lt	330c <PyThread_acquire_lock@plt+0x94c>  // b.tstop
    32f4:	ldr	x0, [sp, #40]
    32f8:	cmp	x0, #0x1
    32fc:	b.gt	330c <PyThread_acquire_lock@plt+0x94c>
    3300:	ldr	x0, [sp, #48]
    3304:	cmp	x0, #0x0
    3308:	b.ne	3340 <PyThread_acquire_lock@plt+0x980>  // b.any
    330c:	add	x0, sp, #0x40
    3310:	str	x0, [sp]
    3314:	mov	w7, #0x0                   	// #0
    3318:	mov	w6, #0x1                   	// #1
    331c:	mov	w5, #0x0                   	// #0
    3320:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3324:	add	x4, x0, #0x888
    3328:	ldr	x3, [sp, #32]
    332c:	mov	x2, #0x0                   	// #0
    3330:	ldr	x1, [sp, #40]
    3334:	ldr	x0, [sp, #48]
    3338:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    333c:	b	3344 <PyThread_acquire_lock@plt+0x984>
    3340:	ldr	x0, [sp, #48]
    3344:	str	x0, [sp, #48]
    3348:	ldr	x0, [sp, #48]
    334c:	cmp	x0, #0x0
    3350:	b.eq	3388 <PyThread_acquire_lock@plt+0x9c8>  // b.none
    3354:	ldr	x0, [sp, #72]
    3358:	cmp	x0, #0x0
    335c:	b.eq	3370 <PyThread_acquire_lock@plt+0x9b0>  // b.none
    3360:	ldr	x0, [sp, #48]
    3364:	ldr	x0, [x0]
    3368:	str	x0, [sp, #80]
    336c:	b	3374 <PyThread_acquire_lock@plt+0x9b4>
    3370:	nop
    3374:	ldr	x1, [sp, #80]
    3378:	ldr	x0, [sp, #56]
    337c:	bl	50e4 <PyThread_acquire_lock@plt+0x2724>
    3380:	str	x0, [sp, #88]
    3384:	b	338c <PyThread_acquire_lock@plt+0x9cc>
    3388:	nop
    338c:	ldr	x0, [sp, #88]
    3390:	ldp	x29, x30, [sp, #16]
    3394:	add	sp, sp, #0x60
    3398:	ret
    339c:	sub	sp, sp, #0x140
    33a0:	stp	x29, x30, [sp, #16]
    33a4:	add	x29, sp, #0x10
    33a8:	str	x0, [sp, #56]
    33ac:	str	x1, [sp, #48]
    33b0:	str	x2, [sp, #40]
    33b4:	str	x3, [sp, #32]
    33b8:	str	xzr, [sp, #312]
    33bc:	ldr	x0, [sp, #32]
    33c0:	cmp	x0, #0x0
    33c4:	b.eq	33d4 <PyThread_acquire_lock@plt+0xa14>  // b.none
    33c8:	ldr	x0, [sp, #32]
    33cc:	ldr	x0, [x0, #16]
    33d0:	b	33d8 <PyThread_acquire_lock@plt+0xa18>
    33d4:	mov	x0, #0x0                   	// #0
    33d8:	ldr	x1, [sp, #40]
    33dc:	add	x0, x0, x1
    33e0:	sub	x0, x0, #0x4
    33e4:	str	x0, [sp, #296]
    33e8:	stp	xzr, xzr, [sp, #160]
    33ec:	stp	xzr, xzr, [sp, #176]
    33f0:	stp	xzr, xzr, [sp, #192]
    33f4:	stp	xzr, xzr, [sp, #208]
    33f8:	stp	xzr, xzr, [sp, #224]
    33fc:	stp	xzr, xzr, [sp, #80]
    3400:	stp	xzr, xzr, [sp, #96]
    3404:	stp	xzr, xzr, [sp, #112]
    3408:	stp	xzr, xzr, [sp, #128]
    340c:	stp	xzr, xzr, [sp, #144]
    3410:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3414:	ldr	x0, [x0, #4056]
    3418:	str	x0, [sp, #304]
    341c:	ldr	x0, [sp, #32]
    3420:	cmp	x0, #0x0
    3424:	b.ne	344c <PyThread_acquire_lock@plt+0xa8c>  // b.any
    3428:	ldr	x0, [sp, #40]
    342c:	cmp	x0, #0x3
    3430:	b.le	344c <PyThread_acquire_lock@plt+0xa8c>
    3434:	ldr	x0, [sp, #40]
    3438:	cmp	x0, #0x5
    343c:	b.gt	344c <PyThread_acquire_lock@plt+0xa8c>
    3440:	ldr	x0, [sp, #48]
    3444:	cmp	x0, #0x0
    3448:	b.ne	3480 <PyThread_acquire_lock@plt+0xac0>  // b.any
    344c:	add	x0, sp, #0xf0
    3450:	str	x0, [sp]
    3454:	mov	w7, #0x0                   	// #0
    3458:	mov	w6, #0x5                   	// #5
    345c:	mov	w5, #0x4                   	// #4
    3460:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3464:	add	x4, x0, #0x8c8
    3468:	ldr	x3, [sp, #32]
    346c:	mov	x2, #0x0                   	// #0
    3470:	ldr	x1, [sp, #40]
    3474:	ldr	x0, [sp, #48]
    3478:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    347c:	b	3484 <PyThread_acquire_lock@plt+0xac4>
    3480:	ldr	x0, [sp, #48]
    3484:	str	x0, [sp, #48]
    3488:	ldr	x0, [sp, #48]
    348c:	cmp	x0, #0x0
    3490:	b.eq	36d8 <PyThread_acquire_lock@plt+0xd18>  // b.none
    3494:	ldr	x0, [sp, #48]
    3498:	ldr	x0, [x0]
    349c:	ldr	x0, [x0, #8]
    34a0:	ldr	x0, [x0, #168]
    34a4:	and	x0, x0, #0x10000000
    34a8:	cmp	x0, #0x0
    34ac:	b.ne	34dc <PyThread_acquire_lock@plt+0xb1c>  // b.any
    34b0:	ldr	x0, [sp, #48]
    34b4:	ldr	x0, [x0]
    34b8:	mov	x3, x0
    34bc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    34c0:	add	x2, x0, #0xb0
    34c4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    34c8:	add	x1, x0, #0xb8
    34cc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    34d0:	add	x0, x0, #0xd0
    34d4:	bl	29b0 <_PyArg_BadArgument@plt>
    34d8:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    34dc:	ldr	x0, [sp, #48]
    34e0:	ldr	x0, [x0]
    34e4:	add	x1, sp, #0x48
    34e8:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    34ec:	str	x0, [sp, #288]
    34f0:	ldr	x0, [sp, #288]
    34f4:	cmp	x0, #0x0
    34f8:	b.eq	36e0 <PyThread_acquire_lock@plt+0xd20>  // b.none
    34fc:	ldr	x0, [sp, #288]
    3500:	bl	2980 <strlen@plt>
    3504:	ldr	x1, [sp, #72]
    3508:	cmp	x0, x1
    350c:	b.eq	3530 <PyThread_acquire_lock@plt+0xb70>  // b.none
    3510:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3514:	ldr	x0, [x0, #3984]
    3518:	ldr	x2, [x0]
    351c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3520:	add	x1, x0, #0xe0
    3524:	mov	x0, x2
    3528:	bl	2920 <PyErr_SetString@plt>
    352c:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    3530:	ldr	x0, [sp, #48]
    3534:	add	x0, x0, #0x8
    3538:	ldr	x0, [x0]
    353c:	add	x1, sp, #0xa0
    3540:	mov	w2, #0x0                   	// #0
    3544:	bl	2750 <PyObject_GetBuffer@plt>
    3548:	cmp	w0, #0x0
    354c:	b.ne	36e8 <PyThread_acquire_lock@plt+0xd28>  // b.any
    3550:	add	x0, sp, #0xa0
    3554:	mov	w1, #0x43                  	// #67
    3558:	bl	27f0 <PyBuffer_IsContiguous@plt>
    355c:	cmp	w0, #0x0
    3560:	b.ne	3594 <PyThread_acquire_lock@plt+0xbd4>  // b.any
    3564:	ldr	x0, [sp, #48]
    3568:	add	x0, x0, #0x8
    356c:	ldr	x0, [x0]
    3570:	mov	x3, x0
    3574:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3578:	add	x2, x0, #0xf8
    357c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3580:	add	x1, x0, #0x110
    3584:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3588:	add	x0, x0, #0xd0
    358c:	bl	29b0 <_PyArg_BadArgument@plt>
    3590:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    3594:	ldr	x0, [sp, #48]
    3598:	add	x0, x0, #0x10
    359c:	ldr	x0, [x0]
    35a0:	add	x1, sp, #0x50
    35a4:	mov	w2, #0x0                   	// #0
    35a8:	bl	2750 <PyObject_GetBuffer@plt>
    35ac:	cmp	w0, #0x0
    35b0:	b.ne	36f0 <PyThread_acquire_lock@plt+0xd30>  // b.any
    35b4:	add	x0, sp, #0x50
    35b8:	mov	w1, #0x43                  	// #67
    35bc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    35c0:	cmp	w0, #0x0
    35c4:	b.ne	35f8 <PyThread_acquire_lock@plt+0xc38>  // b.any
    35c8:	ldr	x0, [sp, #48]
    35cc:	add	x0, x0, #0x10
    35d0:	ldr	x0, [x0]
    35d4:	mov	x3, x0
    35d8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    35dc:	add	x2, x0, #0xf8
    35e0:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    35e4:	add	x1, x0, #0x128
    35e8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    35ec:	add	x0, x0, #0xd0
    35f0:	bl	29b0 <_PyArg_BadArgument@plt>
    35f4:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    35f8:	ldr	x0, [sp, #48]
    35fc:	add	x0, x0, #0x18
    3600:	ldr	x0, [x0]
    3604:	ldr	x1, [x0, #8]
    3608:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    360c:	ldr	x0, [x0, #4040]
    3610:	cmp	x1, x0
    3614:	b.eq	3640 <PyThread_acquire_lock@plt+0xc80>  // b.none
    3618:	ldr	x0, [sp, #48]
    361c:	add	x0, x0, #0x18
    3620:	ldr	x0, [x0]
    3624:	ldr	x2, [x0, #8]
    3628:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    362c:	ldr	x1, [x0, #4040]
    3630:	mov	x0, x2
    3634:	bl	2800 <PyType_IsSubtype@plt>
    3638:	cmp	w0, #0x0
    363c:	b.eq	3660 <PyThread_acquire_lock@plt+0xca0>  // b.none
    3640:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3644:	ldr	x0, [x0, #4000]
    3648:	ldr	x2, [x0]
    364c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3650:	add	x1, x0, #0x138
    3654:	mov	x0, x2
    3658:	bl	2920 <PyErr_SetString@plt>
    365c:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    3660:	ldr	x0, [sp, #48]
    3664:	add	x0, x0, #0x18
    3668:	ldr	x0, [x0]
    366c:	bl	26d0 <PyLong_AsLong@plt>
    3670:	str	x0, [sp, #280]
    3674:	ldr	x0, [sp, #280]
    3678:	cmn	x0, #0x1
    367c:	b.ne	368c <PyThread_acquire_lock@plt+0xccc>  // b.any
    3680:	bl	2720 <PyErr_Occurred@plt>
    3684:	cmp	x0, #0x0
    3688:	b.ne	36f8 <PyThread_acquire_lock@plt+0xd38>  // b.any
    368c:	ldr	x0, [sp, #296]
    3690:	cmp	x0, #0x0
    3694:	b.eq	36a8 <PyThread_acquire_lock@plt+0xce8>  // b.none
    3698:	ldr	x0, [sp, #48]
    369c:	ldr	x0, [x0, #32]
    36a0:	str	x0, [sp, #304]
    36a4:	b	36ac <PyThread_acquire_lock@plt+0xcec>
    36a8:	nop
    36ac:	add	x1, sp, #0x50
    36b0:	add	x0, sp, #0xa0
    36b4:	ldr	x5, [sp, #304]
    36b8:	ldr	x4, [sp, #280]
    36bc:	mov	x3, x1
    36c0:	mov	x2, x0
    36c4:	ldr	x1, [sp, #288]
    36c8:	ldr	x0, [sp, #56]
    36cc:	bl	5110 <PyThread_acquire_lock@plt+0x2750>
    36d0:	str	x0, [sp, #312]
    36d4:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    36d8:	nop
    36dc:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    36e0:	nop
    36e4:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    36e8:	nop
    36ec:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    36f0:	nop
    36f4:	b	36fc <PyThread_acquire_lock@plt+0xd3c>
    36f8:	nop
    36fc:	ldr	x0, [sp, #168]
    3700:	cmp	x0, #0x0
    3704:	b.eq	3710 <PyThread_acquire_lock@plt+0xd50>  // b.none
    3708:	add	x0, sp, #0xa0
    370c:	bl	2970 <PyBuffer_Release@plt>
    3710:	ldr	x0, [sp, #88]
    3714:	cmp	x0, #0x0
    3718:	b.eq	3724 <PyThread_acquire_lock@plt+0xd64>  // b.none
    371c:	add	x0, sp, #0x50
    3720:	bl	2970 <PyBuffer_Release@plt>
    3724:	ldr	x0, [sp, #312]
    3728:	ldp	x29, x30, [sp, #16]
    372c:	add	sp, sp, #0x140
    3730:	ret
    3734:	sub	sp, sp, #0x150
    3738:	stp	x29, x30, [sp, #16]
    373c:	add	x29, sp, #0x10
    3740:	str	x0, [sp, #56]
    3744:	str	x1, [sp, #48]
    3748:	str	x2, [sp, #40]
    374c:	str	x3, [sp, #32]
    3750:	str	xzr, [sp, #328]
    3754:	ldr	x0, [sp, #32]
    3758:	cmp	x0, #0x0
    375c:	b.eq	376c <PyThread_acquire_lock@plt+0xdac>  // b.none
    3760:	ldr	x0, [sp, #32]
    3764:	ldr	x0, [x0, #16]
    3768:	b	3770 <PyThread_acquire_lock@plt+0xdb0>
    376c:	mov	x0, #0x0                   	// #0
    3770:	ldr	x1, [sp, #40]
    3774:	add	x0, x0, x1
    3778:	sub	x0, x0, #0x1
    377c:	str	x0, [sp, #320]
    3780:	stp	xzr, xzr, [sp, #144]
    3784:	stp	xzr, xzr, [sp, #160]
    3788:	stp	xzr, xzr, [sp, #176]
    378c:	stp	xzr, xzr, [sp, #192]
    3790:	stp	xzr, xzr, [sp, #208]
    3794:	stp	xzr, xzr, [sp, #64]
    3798:	stp	xzr, xzr, [sp, #80]
    379c:	stp	xzr, xzr, [sp, #96]
    37a0:	stp	xzr, xzr, [sp, #112]
    37a4:	stp	xzr, xzr, [sp, #128]
    37a8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    37ac:	ldr	x0, [x0, #4056]
    37b0:	str	x0, [sp, #312]
    37b4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    37b8:	ldr	x0, [x0, #4056]
    37bc:	str	x0, [sp, #304]
    37c0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    37c4:	ldr	x0, [x0, #4056]
    37c8:	str	x0, [sp, #296]
    37cc:	str	xzr, [sp, #288]
    37d0:	mov	x0, #0x40                  	// #64
    37d4:	str	x0, [sp, #280]
    37d8:	ldr	x0, [sp, #32]
    37dc:	cmp	x0, #0x0
    37e0:	b.ne	3808 <PyThread_acquire_lock@plt+0xe48>  // b.any
    37e4:	ldr	x0, [sp, #40]
    37e8:	cmp	x0, #0x0
    37ec:	b.le	3808 <PyThread_acquire_lock@plt+0xe48>
    37f0:	ldr	x0, [sp, #40]
    37f4:	cmp	x0, #0x1
    37f8:	b.gt	3808 <PyThread_acquire_lock@plt+0xe48>
    37fc:	ldr	x0, [sp, #48]
    3800:	cmp	x0, #0x0
    3804:	b.ne	383c <PyThread_acquire_lock@plt+0xe7c>  // b.any
    3808:	add	x0, sp, #0xe0
    380c:	str	x0, [sp]
    3810:	mov	w7, #0x0                   	// #0
    3814:	mov	w6, #0x1                   	// #1
    3818:	mov	w5, #0x1                   	// #1
    381c:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3820:	add	x4, x0, #0x908
    3824:	ldr	x3, [sp, #32]
    3828:	mov	x2, #0x0                   	// #0
    382c:	ldr	x1, [sp, #40]
    3830:	ldr	x0, [sp, #48]
    3834:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3838:	b	3840 <PyThread_acquire_lock@plt+0xe80>
    383c:	ldr	x0, [sp, #48]
    3840:	str	x0, [sp, #48]
    3844:	ldr	x0, [sp, #48]
    3848:	cmp	x0, #0x0
    384c:	b.eq	3ca0 <PyThread_acquire_lock@plt+0x12e0>  // b.none
    3850:	ldr	x0, [sp, #48]
    3854:	ldr	x0, [x0]
    3858:	add	x1, sp, #0x90
    385c:	mov	w2, #0x0                   	// #0
    3860:	bl	2750 <PyObject_GetBuffer@plt>
    3864:	cmp	w0, #0x0
    3868:	b.ne	3ca8 <PyThread_acquire_lock@plt+0x12e8>  // b.any
    386c:	add	x0, sp, #0x90
    3870:	mov	w1, #0x43                  	// #67
    3874:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3878:	cmp	w0, #0x0
    387c:	b.ne	38ac <PyThread_acquire_lock@plt+0xeec>  // b.any
    3880:	ldr	x0, [sp, #48]
    3884:	ldr	x0, [x0]
    3888:	mov	x3, x0
    388c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3890:	add	x2, x0, #0xf8
    3894:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3898:	add	x1, x0, #0x110
    389c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    38a0:	add	x0, x0, #0x1f8
    38a4:	bl	29b0 <_PyArg_BadArgument@plt>
    38a8:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    38ac:	ldr	x0, [sp, #320]
    38b0:	cmp	x0, #0x0
    38b4:	b.eq	3c38 <PyThread_acquire_lock@plt+0x1278>  // b.none
    38b8:	ldr	x0, [sp, #48]
    38bc:	add	x0, x0, #0x8
    38c0:	ldr	x0, [x0]
    38c4:	cmp	x0, #0x0
    38c8:	b.eq	3948 <PyThread_acquire_lock@plt+0xf88>  // b.none
    38cc:	ldr	x0, [sp, #48]
    38d0:	add	x0, x0, #0x8
    38d4:	ldr	x0, [x0]
    38d8:	add	x1, sp, #0x40
    38dc:	mov	w2, #0x0                   	// #0
    38e0:	bl	2750 <PyObject_GetBuffer@plt>
    38e4:	cmp	w0, #0x0
    38e8:	b.ne	3cb0 <PyThread_acquire_lock@plt+0x12f0>  // b.any
    38ec:	add	x0, sp, #0x40
    38f0:	mov	w1, #0x43                  	// #67
    38f4:	bl	27f0 <PyBuffer_IsContiguous@plt>
    38f8:	cmp	w0, #0x0
    38fc:	b.ne	3930 <PyThread_acquire_lock@plt+0xf70>  // b.any
    3900:	ldr	x0, [sp, #48]
    3904:	add	x0, x0, #0x8
    3908:	ldr	x0, [x0]
    390c:	mov	x3, x0
    3910:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3914:	add	x2, x0, #0xf8
    3918:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    391c:	add	x1, x0, #0x128
    3920:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3924:	add	x0, x0, #0x1f8
    3928:	bl	29b0 <_PyArg_BadArgument@plt>
    392c:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3930:	ldr	x0, [sp, #320]
    3934:	sub	x0, x0, #0x1
    3938:	str	x0, [sp, #320]
    393c:	ldr	x0, [sp, #320]
    3940:	cmp	x0, #0x0
    3944:	b.eq	3c40 <PyThread_acquire_lock@plt+0x1280>  // b.none
    3948:	ldr	x0, [sp, #48]
    394c:	add	x0, x0, #0x10
    3950:	ldr	x0, [x0]
    3954:	cmp	x0, #0x0
    3958:	b.eq	39d0 <PyThread_acquire_lock@plt+0x1010>  // b.none
    395c:	ldr	x0, [sp, #48]
    3960:	add	x0, x0, #0x10
    3964:	ldr	x0, [x0]
    3968:	ldr	x0, [x0, #8]
    396c:	ldr	x0, [x0, #168]
    3970:	and	x0, x0, #0x1000000
    3974:	cmp	x0, #0x0
    3978:	b.ne	39ac <PyThread_acquire_lock@plt+0xfec>  // b.any
    397c:	ldr	x0, [sp, #48]
    3980:	add	x0, x0, #0x10
    3984:	ldr	x0, [x0]
    3988:	mov	x3, x0
    398c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3990:	add	x2, x0, #0x200
    3994:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3998:	add	x1, x0, #0x208
    399c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    39a0:	add	x0, x0, #0x1f8
    39a4:	bl	29b0 <_PyArg_BadArgument@plt>
    39a8:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    39ac:	ldr	x0, [sp, #48]
    39b0:	ldr	x0, [x0, #16]
    39b4:	str	x0, [sp, #312]
    39b8:	ldr	x0, [sp, #320]
    39bc:	sub	x0, x0, #0x1
    39c0:	str	x0, [sp, #320]
    39c4:	ldr	x0, [sp, #320]
    39c8:	cmp	x0, #0x0
    39cc:	b.eq	3c48 <PyThread_acquire_lock@plt+0x1288>  // b.none
    39d0:	ldr	x0, [sp, #48]
    39d4:	add	x0, x0, #0x18
    39d8:	ldr	x0, [x0]
    39dc:	cmp	x0, #0x0
    39e0:	b.eq	3a58 <PyThread_acquire_lock@plt+0x1098>  // b.none
    39e4:	ldr	x0, [sp, #48]
    39e8:	add	x0, x0, #0x18
    39ec:	ldr	x0, [x0]
    39f0:	ldr	x0, [x0, #8]
    39f4:	ldr	x0, [x0, #168]
    39f8:	and	x0, x0, #0x1000000
    39fc:	cmp	x0, #0x0
    3a00:	b.ne	3a34 <PyThread_acquire_lock@plt+0x1074>  // b.any
    3a04:	ldr	x0, [sp, #48]
    3a08:	add	x0, x0, #0x18
    3a0c:	ldr	x0, [x0]
    3a10:	mov	x3, x0
    3a14:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3a18:	add	x2, x0, #0x200
    3a1c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3a20:	add	x1, x0, #0x218
    3a24:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3a28:	add	x0, x0, #0x1f8
    3a2c:	bl	29b0 <_PyArg_BadArgument@plt>
    3a30:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3a34:	ldr	x0, [sp, #48]
    3a38:	ldr	x0, [x0, #24]
    3a3c:	str	x0, [sp, #304]
    3a40:	ldr	x0, [sp, #320]
    3a44:	sub	x0, x0, #0x1
    3a48:	str	x0, [sp, #320]
    3a4c:	ldr	x0, [sp, #320]
    3a50:	cmp	x0, #0x0
    3a54:	b.eq	3c50 <PyThread_acquire_lock@plt+0x1290>  // b.none
    3a58:	ldr	x0, [sp, #48]
    3a5c:	add	x0, x0, #0x20
    3a60:	ldr	x0, [x0]
    3a64:	cmp	x0, #0x0
    3a68:	b.eq	3ae0 <PyThread_acquire_lock@plt+0x1120>  // b.none
    3a6c:	ldr	x0, [sp, #48]
    3a70:	add	x0, x0, #0x20
    3a74:	ldr	x0, [x0]
    3a78:	ldr	x0, [x0, #8]
    3a7c:	ldr	x0, [x0, #168]
    3a80:	and	x0, x0, #0x1000000
    3a84:	cmp	x0, #0x0
    3a88:	b.ne	3abc <PyThread_acquire_lock@plt+0x10fc>  // b.any
    3a8c:	ldr	x0, [sp, #48]
    3a90:	add	x0, x0, #0x20
    3a94:	ldr	x0, [x0]
    3a98:	mov	x3, x0
    3a9c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3aa0:	add	x2, x0, #0x200
    3aa4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3aa8:	add	x1, x0, #0x228
    3aac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3ab0:	add	x0, x0, #0x1f8
    3ab4:	bl	29b0 <_PyArg_BadArgument@plt>
    3ab8:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3abc:	ldr	x0, [sp, #48]
    3ac0:	ldr	x0, [x0, #32]
    3ac4:	str	x0, [sp, #296]
    3ac8:	ldr	x0, [sp, #320]
    3acc:	sub	x0, x0, #0x1
    3ad0:	str	x0, [sp, #320]
    3ad4:	ldr	x0, [sp, #320]
    3ad8:	cmp	x0, #0x0
    3adc:	b.eq	3c58 <PyThread_acquire_lock@plt+0x1298>  // b.none
    3ae0:	ldr	x0, [sp, #48]
    3ae4:	add	x0, x0, #0x28
    3ae8:	ldr	x0, [x0]
    3aec:	cmp	x0, #0x0
    3af0:	b.eq	3ba0 <PyThread_acquire_lock@plt+0x11e0>  // b.none
    3af4:	ldr	x0, [sp, #48]
    3af8:	add	x0, x0, #0x28
    3afc:	ldr	x0, [x0]
    3b00:	ldr	x1, [x0, #8]
    3b04:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3b08:	ldr	x0, [x0, #4040]
    3b0c:	cmp	x1, x0
    3b10:	b.eq	3b3c <PyThread_acquire_lock@plt+0x117c>  // b.none
    3b14:	ldr	x0, [sp, #48]
    3b18:	add	x0, x0, #0x28
    3b1c:	ldr	x0, [x0]
    3b20:	ldr	x2, [x0, #8]
    3b24:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3b28:	ldr	x1, [x0, #4040]
    3b2c:	mov	x0, x2
    3b30:	bl	2800 <PyType_IsSubtype@plt>
    3b34:	cmp	w0, #0x0
    3b38:	b.eq	3b5c <PyThread_acquire_lock@plt+0x119c>  // b.none
    3b3c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3b40:	ldr	x0, [x0, #4000]
    3b44:	ldr	x2, [x0]
    3b48:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3b4c:	add	x1, x0, #0x138
    3b50:	mov	x0, x2
    3b54:	bl	2920 <PyErr_SetString@plt>
    3b58:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3b5c:	ldr	x0, [sp, #48]
    3b60:	add	x0, x0, #0x28
    3b64:	ldr	x0, [x0]
    3b68:	bl	26d0 <PyLong_AsLong@plt>
    3b6c:	str	x0, [sp, #288]
    3b70:	ldr	x0, [sp, #288]
    3b74:	cmn	x0, #0x1
    3b78:	b.ne	3b88 <PyThread_acquire_lock@plt+0x11c8>  // b.any
    3b7c:	bl	2720 <PyErr_Occurred@plt>
    3b80:	cmp	x0, #0x0
    3b84:	b.ne	3cb8 <PyThread_acquire_lock@plt+0x12f8>  // b.any
    3b88:	ldr	x0, [sp, #320]
    3b8c:	sub	x0, x0, #0x1
    3b90:	str	x0, [sp, #320]
    3b94:	ldr	x0, [sp, #320]
    3b98:	cmp	x0, #0x0
    3b9c:	b.eq	3c60 <PyThread_acquire_lock@plt+0x12a0>  // b.none
    3ba0:	ldr	x0, [sp, #48]
    3ba4:	add	x0, x0, #0x30
    3ba8:	ldr	x0, [x0]
    3bac:	ldr	x1, [x0, #8]
    3bb0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3bb4:	ldr	x0, [x0, #4040]
    3bb8:	cmp	x1, x0
    3bbc:	b.eq	3be8 <PyThread_acquire_lock@plt+0x1228>  // b.none
    3bc0:	ldr	x0, [sp, #48]
    3bc4:	add	x0, x0, #0x30
    3bc8:	ldr	x0, [x0]
    3bcc:	ldr	x2, [x0, #8]
    3bd0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3bd4:	ldr	x1, [x0, #4040]
    3bd8:	mov	x0, x2
    3bdc:	bl	2800 <PyType_IsSubtype@plt>
    3be0:	cmp	w0, #0x0
    3be4:	b.eq	3c08 <PyThread_acquire_lock@plt+0x1248>  // b.none
    3be8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3bec:	ldr	x0, [x0, #4000]
    3bf0:	ldr	x2, [x0]
    3bf4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3bf8:	add	x1, x0, #0x138
    3bfc:	mov	x0, x2
    3c00:	bl	2920 <PyErr_SetString@plt>
    3c04:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3c08:	ldr	x0, [sp, #48]
    3c0c:	add	x0, x0, #0x30
    3c10:	ldr	x0, [x0]
    3c14:	bl	26d0 <PyLong_AsLong@plt>
    3c18:	str	x0, [sp, #280]
    3c1c:	ldr	x0, [sp, #280]
    3c20:	cmn	x0, #0x1
    3c24:	b.ne	3c68 <PyThread_acquire_lock@plt+0x12a8>  // b.any
    3c28:	bl	2720 <PyErr_Occurred@plt>
    3c2c:	cmp	x0, #0x0
    3c30:	b.ne	3cc0 <PyThread_acquire_lock@plt+0x1300>  // b.any
    3c34:	b	3c68 <PyThread_acquire_lock@plt+0x12a8>
    3c38:	nop
    3c3c:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c40:	nop
    3c44:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c48:	nop
    3c4c:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c50:	nop
    3c54:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c58:	nop
    3c5c:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c60:	nop
    3c64:	b	3c6c <PyThread_acquire_lock@plt+0x12ac>
    3c68:	nop
    3c6c:	add	x1, sp, #0x40
    3c70:	add	x0, sp, #0x90
    3c74:	ldr	x7, [sp, #280]
    3c78:	ldr	x6, [sp, #288]
    3c7c:	ldr	x5, [sp, #296]
    3c80:	ldr	x4, [sp, #304]
    3c84:	ldr	x3, [sp, #312]
    3c88:	mov	x2, x1
    3c8c:	mov	x1, x0
    3c90:	ldr	x0, [sp, #56]
    3c94:	bl	53d8 <PyThread_acquire_lock@plt+0x2a18>
    3c98:	str	x0, [sp, #328]
    3c9c:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3ca0:	nop
    3ca4:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3ca8:	nop
    3cac:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3cb0:	nop
    3cb4:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3cb8:	nop
    3cbc:	b	3cc4 <PyThread_acquire_lock@plt+0x1304>
    3cc0:	nop
    3cc4:	ldr	x0, [sp, #152]
    3cc8:	cmp	x0, #0x0
    3ccc:	b.eq	3cd8 <PyThread_acquire_lock@plt+0x1318>  // b.none
    3cd0:	add	x0, sp, #0x90
    3cd4:	bl	2970 <PyBuffer_Release@plt>
    3cd8:	ldr	x0, [sp, #72]
    3cdc:	cmp	x0, #0x0
    3ce0:	b.eq	3cec <PyThread_acquire_lock@plt+0x132c>  // b.none
    3ce4:	add	x0, sp, #0x40
    3ce8:	bl	2970 <PyBuffer_Release@plt>
    3cec:	ldr	x0, [sp, #328]
    3cf0:	ldp	x29, x30, [sp, #16]
    3cf4:	add	sp, sp, #0x150
    3cf8:	ret
    3cfc:	sub	sp, sp, #0x110
    3d00:	stp	x29, x30, [sp, #16]
    3d04:	add	x29, sp, #0x10
    3d08:	str	x0, [sp, #56]
    3d0c:	str	x1, [sp, #48]
    3d10:	str	x2, [sp, #40]
    3d14:	str	x3, [sp, #32]
    3d18:	str	xzr, [sp, #264]
    3d1c:	stp	xzr, xzr, [sp, #152]
    3d20:	stp	xzr, xzr, [sp, #168]
    3d24:	stp	xzr, xzr, [sp, #184]
    3d28:	stp	xzr, xzr, [sp, #200]
    3d2c:	stp	xzr, xzr, [sp, #216]
    3d30:	stp	xzr, xzr, [sp, #72]
    3d34:	stp	xzr, xzr, [sp, #88]
    3d38:	stp	xzr, xzr, [sp, #104]
    3d3c:	stp	xzr, xzr, [sp, #120]
    3d40:	stp	xzr, xzr, [sp, #136]
    3d44:	ldr	x0, [sp, #32]
    3d48:	cmp	x0, #0x0
    3d4c:	b.ne	3d74 <PyThread_acquire_lock@plt+0x13b4>  // b.any
    3d50:	ldr	x0, [sp, #40]
    3d54:	cmp	x0, #0x2
    3d58:	b.le	3d74 <PyThread_acquire_lock@plt+0x13b4>
    3d5c:	ldr	x0, [sp, #40]
    3d60:	cmp	x0, #0x3
    3d64:	b.gt	3d74 <PyThread_acquire_lock@plt+0x13b4>
    3d68:	ldr	x0, [sp, #48]
    3d6c:	cmp	x0, #0x0
    3d70:	b.ne	3da8 <PyThread_acquire_lock@plt+0x13e8>  // b.any
    3d74:	add	x0, sp, #0xe8
    3d78:	str	x0, [sp]
    3d7c:	mov	w7, #0x0                   	// #0
    3d80:	mov	w6, #0x3                   	// #3
    3d84:	mov	w5, #0x3                   	// #3
    3d88:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    3d8c:	add	x4, x0, #0x948
    3d90:	ldr	x3, [sp, #32]
    3d94:	mov	x2, #0x0                   	// #0
    3d98:	ldr	x1, [sp, #40]
    3d9c:	ldr	x0, [sp, #48]
    3da0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3da4:	b	3dac <PyThread_acquire_lock@plt+0x13ec>
    3da8:	ldr	x0, [sp, #48]
    3dac:	str	x0, [sp, #48]
    3db0:	ldr	x0, [sp, #48]
    3db4:	cmp	x0, #0x0
    3db8:	b.eq	3f48 <PyThread_acquire_lock@plt+0x1588>  // b.none
    3dbc:	ldr	x0, [sp, #48]
    3dc0:	ldr	x0, [x0]
    3dc4:	add	x1, sp, #0x98
    3dc8:	mov	w2, #0x0                   	// #0
    3dcc:	bl	2750 <PyObject_GetBuffer@plt>
    3dd0:	cmp	w0, #0x0
    3dd4:	b.ne	3f50 <PyThread_acquire_lock@plt+0x1590>  // b.any
    3dd8:	add	x0, sp, #0x98
    3ddc:	mov	w1, #0x43                  	// #67
    3de0:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3de4:	cmp	w0, #0x0
    3de8:	b.ne	3e18 <PyThread_acquire_lock@plt+0x1458>  // b.any
    3dec:	ldr	x0, [sp, #48]
    3df0:	ldr	x0, [x0]
    3df4:	mov	x3, x0
    3df8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3dfc:	add	x2, x0, #0xf8
    3e00:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3e04:	add	x1, x0, #0x278
    3e08:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3e0c:	add	x0, x0, #0x288
    3e10:	bl	29b0 <_PyArg_BadArgument@plt>
    3e14:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3e18:	ldr	x0, [sp, #48]
    3e1c:	add	x0, x0, #0x8
    3e20:	ldr	x0, [x0]
    3e24:	add	x1, sp, #0x48
    3e28:	mov	w2, #0x0                   	// #0
    3e2c:	bl	2750 <PyObject_GetBuffer@plt>
    3e30:	cmp	w0, #0x0
    3e34:	b.ne	3f58 <PyThread_acquire_lock@plt+0x1598>  // b.any
    3e38:	add	x0, sp, #0x48
    3e3c:	mov	w1, #0x43                  	// #67
    3e40:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3e44:	cmp	w0, #0x0
    3e48:	b.ne	3e7c <PyThread_acquire_lock@plt+0x14bc>  // b.any
    3e4c:	ldr	x0, [sp, #48]
    3e50:	add	x0, x0, #0x8
    3e54:	ldr	x0, [x0]
    3e58:	mov	x3, x0
    3e5c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3e60:	add	x2, x0, #0xf8
    3e64:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3e68:	add	x1, x0, #0x298
    3e6c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3e70:	add	x0, x0, #0x288
    3e74:	bl	29b0 <_PyArg_BadArgument@plt>
    3e78:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3e7c:	ldr	x0, [sp, #48]
    3e80:	add	x0, x0, #0x10
    3e84:	ldr	x0, [x0]
    3e88:	ldr	x0, [x0, #8]
    3e8c:	ldr	x0, [x0, #168]
    3e90:	and	x0, x0, #0x10000000
    3e94:	cmp	x0, #0x0
    3e98:	b.ne	3ecc <PyThread_acquire_lock@plt+0x150c>  // b.any
    3e9c:	ldr	x0, [sp, #48]
    3ea0:	add	x0, x0, #0x10
    3ea4:	ldr	x0, [x0]
    3ea8:	mov	x3, x0
    3eac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3eb0:	add	x2, x0, #0xb0
    3eb4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3eb8:	add	x1, x0, #0x2a8
    3ebc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3ec0:	add	x0, x0, #0x288
    3ec4:	bl	29b0 <_PyArg_BadArgument@plt>
    3ec8:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3ecc:	ldr	x0, [sp, #48]
    3ed0:	add	x0, x0, #0x10
    3ed4:	ldr	x0, [x0]
    3ed8:	add	x1, sp, #0x40
    3edc:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    3ee0:	str	x0, [sp, #256]
    3ee4:	ldr	x0, [sp, #256]
    3ee8:	cmp	x0, #0x0
    3eec:	b.eq	3f60 <PyThread_acquire_lock@plt+0x15a0>  // b.none
    3ef0:	ldr	x0, [sp, #256]
    3ef4:	bl	2980 <strlen@plt>
    3ef8:	ldr	x1, [sp, #64]
    3efc:	cmp	x0, x1
    3f00:	b.eq	3f24 <PyThread_acquire_lock@plt+0x1564>  // b.none
    3f04:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    3f08:	ldr	x0, [x0, #3984]
    3f0c:	ldr	x2, [x0]
    3f10:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3f14:	add	x1, x0, #0xe0
    3f18:	mov	x0, x2
    3f1c:	bl	2920 <PyErr_SetString@plt>
    3f20:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3f24:	add	x1, sp, #0x48
    3f28:	add	x0, sp, #0x98
    3f2c:	ldr	x3, [sp, #256]
    3f30:	mov	x2, x1
    3f34:	mov	x1, x0
    3f38:	ldr	x0, [sp, #56]
    3f3c:	bl	57b8 <PyThread_acquire_lock@plt+0x2df8>
    3f40:	str	x0, [sp, #264]
    3f44:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3f48:	nop
    3f4c:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3f50:	nop
    3f54:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3f58:	nop
    3f5c:	b	3f64 <PyThread_acquire_lock@plt+0x15a4>
    3f60:	nop
    3f64:	ldr	x0, [sp, #160]
    3f68:	cmp	x0, #0x0
    3f6c:	b.eq	3f78 <PyThread_acquire_lock@plt+0x15b8>  // b.none
    3f70:	add	x0, sp, #0x98
    3f74:	bl	2970 <PyBuffer_Release@plt>
    3f78:	ldr	x0, [sp, #80]
    3f7c:	cmp	x0, #0x0
    3f80:	b.eq	3f8c <PyThread_acquire_lock@plt+0x15cc>  // b.none
    3f84:	add	x0, sp, #0x48
    3f88:	bl	2970 <PyBuffer_Release@plt>
    3f8c:	ldr	x0, [sp, #264]
    3f90:	ldp	x29, x30, [sp, #16]
    3f94:	add	sp, sp, #0x110
    3f98:	ret
    3f9c:	stp	x29, x30, [sp, #-64]!
    3fa0:	mov	x29, sp
    3fa4:	str	x0, [sp, #24]
    3fa8:	bl	2840 <ERR_peek_last_error@plt>
    3fac:	str	x0, [sp, #56]
    3fb0:	ldr	x0, [sp, #56]
    3fb4:	cmp	x0, #0x0
    3fb8:	b.ne	3fd4 <PyThread_acquire_lock@plt+0x1614>  // b.any
    3fbc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    3fc0:	add	x1, x0, #0x2c0
    3fc4:	ldr	x0, [sp, #24]
    3fc8:	bl	2920 <PyErr_SetString@plt>
    3fcc:	mov	x0, #0x0                   	// #0
    3fd0:	b	406c <PyThread_acquire_lock@plt+0x16ac>
    3fd4:	bl	2610 <ERR_clear_error@plt>
    3fd8:	ldr	x0, [sp, #56]
    3fdc:	bl	2990 <ERR_lib_error_string@plt>
    3fe0:	str	x0, [sp, #48]
    3fe4:	ldr	x0, [sp, #56]
    3fe8:	bl	25e0 <ERR_func_error_string@plt>
    3fec:	str	x0, [sp, #40]
    3ff0:	ldr	x0, [sp, #56]
    3ff4:	bl	2560 <ERR_reason_error_string@plt>
    3ff8:	str	x0, [sp, #32]
    3ffc:	ldr	x0, [sp, #48]
    4000:	cmp	x0, #0x0
    4004:	b.eq	4034 <PyThread_acquire_lock@plt+0x1674>  // b.none
    4008:	ldr	x0, [sp, #40]
    400c:	cmp	x0, #0x0
    4010:	b.eq	4034 <PyThread_acquire_lock@plt+0x1674>  // b.none
    4014:	ldr	x4, [sp, #32]
    4018:	ldr	x3, [sp, #40]
    401c:	ldr	x2, [sp, #48]
    4020:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4024:	add	x1, x0, #0x2d0
    4028:	ldr	x0, [sp, #24]
    402c:	bl	26f0 <PyErr_Format@plt>
    4030:	b	4068 <PyThread_acquire_lock@plt+0x16a8>
    4034:	ldr	x0, [sp, #48]
    4038:	cmp	x0, #0x0
    403c:	b.eq	405c <PyThread_acquire_lock@plt+0x169c>  // b.none
    4040:	ldr	x3, [sp, #32]
    4044:	ldr	x2, [sp, #48]
    4048:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    404c:	add	x1, x0, #0x2e0
    4050:	ldr	x0, [sp, #24]
    4054:	bl	26f0 <PyErr_Format@plt>
    4058:	b	4068 <PyThread_acquire_lock@plt+0x16a8>
    405c:	ldr	x1, [sp, #32]
    4060:	ldr	x0, [sp, #24]
    4064:	bl	2920 <PyErr_SetString@plt>
    4068:	mov	x0, #0x0                   	// #0
    406c:	ldp	x29, x30, [sp], #64
    4070:	ret
    4074:	stp	x29, x30, [sp, #-48]!
    4078:	mov	x29, sp
    407c:	str	x0, [sp, #24]
    4080:	ldr	x0, [sp, #24]
    4084:	bl	2530 <EVP_MD_type@plt>
    4088:	str	w0, [sp, #36]
    408c:	str	xzr, [sp, #40]
    4090:	ldr	w0, [sp, #36]
    4094:	cmp	w0, #0x44d
    4098:	b.eq	42cc <PyThread_acquire_lock@plt+0x190c>  // b.none
    409c:	ldr	w0, [sp, #36]
    40a0:	cmp	w0, #0x44d
    40a4:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    40a8:	ldr	w0, [sp, #36]
    40ac:	cmp	w0, #0x44c
    40b0:	b.eq	42bc <PyThread_acquire_lock@plt+0x18fc>  // b.none
    40b4:	ldr	w0, [sp, #36]
    40b8:	cmp	w0, #0x44c
    40bc:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    40c0:	ldr	w0, [sp, #36]
    40c4:	cmp	w0, #0x44b
    40c8:	b.eq	42ac <PyThread_acquire_lock@plt+0x18ec>  // b.none
    40cc:	ldr	w0, [sp, #36]
    40d0:	cmp	w0, #0x44b
    40d4:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    40d8:	ldr	w0, [sp, #36]
    40dc:	cmp	w0, #0x44a
    40e0:	b.eq	429c <PyThread_acquire_lock@plt+0x18dc>  // b.none
    40e4:	ldr	w0, [sp, #36]
    40e8:	cmp	w0, #0x44a
    40ec:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    40f0:	ldr	w0, [sp, #36]
    40f4:	cmp	w0, #0x449
    40f8:	b.eq	428c <PyThread_acquire_lock@plt+0x18cc>  // b.none
    40fc:	ldr	w0, [sp, #36]
    4100:	cmp	w0, #0x449
    4104:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4108:	ldr	w0, [sp, #36]
    410c:	cmp	w0, #0x448
    4110:	b.eq	427c <PyThread_acquire_lock@plt+0x18bc>  // b.none
    4114:	ldr	w0, [sp, #36]
    4118:	cmp	w0, #0x448
    411c:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4120:	ldr	w0, [sp, #36]
    4124:	cmp	w0, #0x447
    4128:	b.eq	426c <PyThread_acquire_lock@plt+0x18ac>  // b.none
    412c:	ldr	w0, [sp, #36]
    4130:	cmp	w0, #0x447
    4134:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4138:	ldr	w0, [sp, #36]
    413c:	cmp	w0, #0x446
    4140:	b.eq	425c <PyThread_acquire_lock@plt+0x189c>  // b.none
    4144:	ldr	w0, [sp, #36]
    4148:	cmp	w0, #0x446
    414c:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4150:	ldr	w0, [sp, #36]
    4154:	cmp	w0, #0x421
    4158:	b.eq	42dc <PyThread_acquire_lock@plt+0x191c>  // b.none
    415c:	ldr	w0, [sp, #36]
    4160:	cmp	w0, #0x421
    4164:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4168:	ldr	w0, [sp, #36]
    416c:	cmp	w0, #0x420
    4170:	b.eq	42ec <PyThread_acquire_lock@plt+0x192c>  // b.none
    4174:	ldr	w0, [sp, #36]
    4178:	cmp	w0, #0x420
    417c:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4180:	ldr	w0, [sp, #36]
    4184:	cmp	w0, #0x2a3
    4188:	b.eq	421c <PyThread_acquire_lock@plt+0x185c>  // b.none
    418c:	ldr	w0, [sp, #36]
    4190:	cmp	w0, #0x2a3
    4194:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    4198:	ldr	w0, [sp, #36]
    419c:	cmp	w0, #0x2a2
    41a0:	b.eq	424c <PyThread_acquire_lock@plt+0x188c>  // b.none
    41a4:	ldr	w0, [sp, #36]
    41a8:	cmp	w0, #0x2a2
    41ac:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    41b0:	ldr	w0, [sp, #36]
    41b4:	cmp	w0, #0x2a1
    41b8:	b.eq	423c <PyThread_acquire_lock@plt+0x187c>  // b.none
    41bc:	ldr	w0, [sp, #36]
    41c0:	cmp	w0, #0x2a1
    41c4:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    41c8:	ldr	w0, [sp, #36]
    41cc:	cmp	w0, #0x2a0
    41d0:	b.eq	422c <PyThread_acquire_lock@plt+0x186c>  // b.none
    41d4:	ldr	w0, [sp, #36]
    41d8:	cmp	w0, #0x2a0
    41dc:	b.gt	42fc <PyThread_acquire_lock@plt+0x193c>
    41e0:	ldr	w0, [sp, #36]
    41e4:	cmp	w0, #0x4
    41e8:	b.eq	41fc <PyThread_acquire_lock@plt+0x183c>  // b.none
    41ec:	ldr	w0, [sp, #36]
    41f0:	cmp	w0, #0x40
    41f4:	b.eq	420c <PyThread_acquire_lock@plt+0x184c>  // b.none
    41f8:	b	42fc <PyThread_acquire_lock@plt+0x193c>
    41fc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4200:	add	x0, x0, #0x2e8
    4204:	str	x0, [sp, #40]
    4208:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    420c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4210:	add	x0, x0, #0x2f0
    4214:	str	x0, [sp, #40]
    4218:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    421c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4220:	add	x0, x0, #0x2f8
    4224:	str	x0, [sp, #40]
    4228:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    422c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4230:	add	x0, x0, #0x300
    4234:	str	x0, [sp, #40]
    4238:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    423c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4240:	add	x0, x0, #0x308
    4244:	str	x0, [sp, #40]
    4248:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    424c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4250:	add	x0, x0, #0x310
    4254:	str	x0, [sp, #40]
    4258:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    425c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4260:	add	x0, x0, #0x318
    4264:	str	x0, [sp, #40]
    4268:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    426c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4270:	add	x0, x0, #0x328
    4274:	str	x0, [sp, #40]
    4278:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    427c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4280:	add	x0, x0, #0x338
    4284:	str	x0, [sp, #40]
    4288:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    428c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4290:	add	x0, x0, #0x348
    4294:	str	x0, [sp, #40]
    4298:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    429c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42a0:	add	x0, x0, #0x358
    42a4:	str	x0, [sp, #40]
    42a8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42ac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42b0:	add	x0, x0, #0x368
    42b4:	str	x0, [sp, #40]
    42b8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42bc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42c0:	add	x0, x0, #0x378
    42c4:	str	x0, [sp, #40]
    42c8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42cc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42d0:	add	x0, x0, #0x388
    42d4:	str	x0, [sp, #40]
    42d8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42dc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42e0:	add	x0, x0, #0x398
    42e4:	str	x0, [sp, #40]
    42e8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42ec:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    42f0:	add	x0, x0, #0x3a0
    42f4:	str	x0, [sp, #40]
    42f8:	b	4324 <PyThread_acquire_lock@plt+0x1964>
    42fc:	ldr	w0, [sp, #36]
    4300:	bl	2600 <OBJ_nid2ln@plt>
    4304:	str	x0, [sp, #40]
    4308:	ldr	x0, [sp, #40]
    430c:	cmp	x0, #0x0
    4310:	b.ne	4320 <PyThread_acquire_lock@plt+0x1960>  // b.any
    4314:	ldr	w0, [sp, #36]
    4318:	bl	2930 <OBJ_nid2sn@plt>
    431c:	str	x0, [sp, #40]
    4320:	nop
    4324:	ldr	x0, [sp, #40]
    4328:	bl	2620 <PyUnicode_FromString@plt>
    432c:	ldp	x29, x30, [sp], #48
    4330:	ret
    4334:	stp	x29, x30, [sp, #-48]!
    4338:	mov	x29, sp
    433c:	str	x0, [sp, #24]
    4340:	ldr	x0, [sp, #24]
    4344:	bl	2640 <EVP_get_digestbyname@plt>
    4348:	str	x0, [sp, #40]
    434c:	ldr	x0, [sp, #40]
    4350:	cmp	x0, #0x0
    4354:	b.ne	44ec <PyThread_acquire_lock@plt+0x1b2c>  // b.any
    4358:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    435c:	add	x1, x0, #0x318
    4360:	ldr	x0, [sp, #24]
    4364:	bl	28a0 <strcmp@plt>
    4368:	cmp	w0, #0x0
    436c:	b.eq	4388 <PyThread_acquire_lock@plt+0x19c8>  // b.none
    4370:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4374:	add	x1, x0, #0x3a8
    4378:	ldr	x0, [sp, #24]
    437c:	bl	28a0 <strcmp@plt>
    4380:	cmp	w0, #0x0
    4384:	b.ne	4394 <PyThread_acquire_lock@plt+0x19d4>  // b.any
    4388:	bl	2570 <EVP_sha512_224@plt>
    438c:	str	x0, [sp, #40]
    4390:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    4394:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4398:	add	x1, x0, #0x328
    439c:	ldr	x0, [sp, #24]
    43a0:	bl	28a0 <strcmp@plt>
    43a4:	cmp	w0, #0x0
    43a8:	b.eq	43c4 <PyThread_acquire_lock@plt+0x1a04>  // b.none
    43ac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    43b0:	add	x1, x0, #0x3b8
    43b4:	ldr	x0, [sp, #24]
    43b8:	bl	28a0 <strcmp@plt>
    43bc:	cmp	w0, #0x0
    43c0:	b.ne	43d0 <PyThread_acquire_lock@plt+0x1a10>  // b.any
    43c4:	bl	2960 <EVP_sha512_256@plt>
    43c8:	str	x0, [sp, #40]
    43cc:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    43d0:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    43d4:	add	x1, x0, #0x338
    43d8:	ldr	x0, [sp, #24]
    43dc:	bl	28a0 <strcmp@plt>
    43e0:	cmp	w0, #0x0
    43e4:	b.ne	43f4 <PyThread_acquire_lock@plt+0x1a34>  // b.any
    43e8:	bl	2900 <EVP_sha3_224@plt>
    43ec:	str	x0, [sp, #40]
    43f0:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    43f4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    43f8:	add	x1, x0, #0x348
    43fc:	ldr	x0, [sp, #24]
    4400:	bl	28a0 <strcmp@plt>
    4404:	cmp	w0, #0x0
    4408:	b.ne	4418 <PyThread_acquire_lock@plt+0x1a58>  // b.any
    440c:	bl	27d0 <EVP_sha3_256@plt>
    4410:	str	x0, [sp, #40]
    4414:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    4418:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    441c:	add	x1, x0, #0x358
    4420:	ldr	x0, [sp, #24]
    4424:	bl	28a0 <strcmp@plt>
    4428:	cmp	w0, #0x0
    442c:	b.ne	443c <PyThread_acquire_lock@plt+0x1a7c>  // b.any
    4430:	bl	2790 <EVP_sha3_384@plt>
    4434:	str	x0, [sp, #40]
    4438:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    443c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4440:	add	x1, x0, #0x368
    4444:	ldr	x0, [sp, #24]
    4448:	bl	28a0 <strcmp@plt>
    444c:	cmp	w0, #0x0
    4450:	b.ne	4460 <PyThread_acquire_lock@plt+0x1aa0>  // b.any
    4454:	bl	25f0 <EVP_sha3_512@plt>
    4458:	str	x0, [sp, #40]
    445c:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    4460:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4464:	add	x1, x0, #0x378
    4468:	ldr	x0, [sp, #24]
    446c:	bl	28a0 <strcmp@plt>
    4470:	cmp	w0, #0x0
    4474:	b.ne	4484 <PyThread_acquire_lock@plt+0x1ac4>  // b.any
    4478:	bl	2680 <EVP_shake128@plt>
    447c:	str	x0, [sp, #40]
    4480:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    4484:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4488:	add	x1, x0, #0x388
    448c:	ldr	x0, [sp, #24]
    4490:	bl	28a0 <strcmp@plt>
    4494:	cmp	w0, #0x0
    4498:	b.ne	44a8 <PyThread_acquire_lock@plt+0x1ae8>  // b.any
    449c:	bl	25b0 <EVP_shake256@plt>
    44a0:	str	x0, [sp, #40]
    44a4:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    44a8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    44ac:	add	x1, x0, #0x3c8
    44b0:	ldr	x0, [sp, #24]
    44b4:	bl	28a0 <strcmp@plt>
    44b8:	cmp	w0, #0x0
    44bc:	b.ne	44cc <PyThread_acquire_lock@plt+0x1b0c>  // b.any
    44c0:	bl	2580 <EVP_blake2s256@plt>
    44c4:	str	x0, [sp, #40]
    44c8:	b	44ec <PyThread_acquire_lock@plt+0x1b2c>
    44cc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    44d0:	add	x1, x0, #0x3d8
    44d4:	ldr	x0, [sp, #24]
    44d8:	bl	28a0 <strcmp@plt>
    44dc:	cmp	w0, #0x0
    44e0:	b.ne	44ec <PyThread_acquire_lock@plt+0x1b2c>  // b.any
    44e4:	bl	28b0 <EVP_blake2b512@plt>
    44e8:	str	x0, [sp, #40]
    44ec:	ldr	x0, [sp, #40]
    44f0:	ldp	x29, x30, [sp], #48
    44f4:	ret
    44f8:	stp	x29, x30, [sp, #-32]!
    44fc:	mov	x29, sp
    4500:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    4504:	add	x0, x0, #0x260
    4508:	bl	2660 <_PyObject_New@plt>
    450c:	str	x0, [sp, #24]
    4510:	ldr	x0, [sp, #24]
    4514:	cmp	x0, #0x0
    4518:	b.ne	4524 <PyThread_acquire_lock@plt+0x1b64>  // b.any
    451c:	mov	x0, #0x0                   	// #0
    4520:	b	4570 <PyThread_acquire_lock@plt+0x1bb0>
    4524:	ldr	x0, [sp, #24]
    4528:	str	xzr, [x0, #24]
    452c:	bl	27e0 <EVP_MD_CTX_new@plt>
    4530:	mov	x1, x0
    4534:	ldr	x0, [sp, #24]
    4538:	str	x1, [x0, #16]
    453c:	ldr	x0, [sp, #24]
    4540:	ldr	x0, [x0, #16]
    4544:	cmp	x0, #0x0
    4548:	b.ne	456c <PyThread_acquire_lock@plt+0x1bac>  // b.any
    454c:	ldr	x2, [sp, #24]
    4550:	mov	w1, #0xf3                  	// #243
    4554:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4558:	add	x0, x0, #0x3e8
    455c:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    4560:	bl	2630 <PyErr_NoMemory@plt>
    4564:	mov	x0, #0x0                   	// #0
    4568:	b	4570 <PyThread_acquire_lock@plt+0x1bb0>
    456c:	ldr	x0, [sp, #24]
    4570:	ldp	x29, x30, [sp], #32
    4574:	ret
    4578:	stp	x29, x30, [sp, #-64]!
    457c:	mov	x29, sp
    4580:	str	x0, [sp, #40]
    4584:	str	x1, [sp, #32]
    4588:	str	x2, [sp, #24]
    458c:	ldr	x0, [sp, #32]
    4590:	str	x0, [sp, #48]
    4594:	b	4614 <PyThread_acquire_lock@plt+0x1c54>
    4598:	ldr	x1, [sp, #24]
    459c:	mov	x0, #0x7fffffff            	// #2147483647
    45a0:	cmp	x1, x0
    45a4:	b.le	45b4 <PyThread_acquire_lock@plt+0x1bf4>
    45a8:	mov	w0, #0x7fffffff            	// #2147483647
    45ac:	str	w0, [sp, #60]
    45b0:	b	45bc <PyThread_acquire_lock@plt+0x1bfc>
    45b4:	ldr	x0, [sp, #24]
    45b8:	str	w0, [sp, #60]
    45bc:	ldr	x0, [sp, #40]
    45c0:	ldr	x0, [x0, #16]
    45c4:	ldr	w1, [sp, #60]
    45c8:	mov	x2, x1
    45cc:	ldr	x1, [sp, #48]
    45d0:	bl	2700 <EVP_DigestUpdate@plt>
    45d4:	cmp	w0, #0x0
    45d8:	b.ne	45f4 <PyThread_acquire_lock@plt+0x1c34>  // b.any
    45dc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    45e0:	ldr	x0, [x0, #3984]
    45e4:	ldr	x0, [x0]
    45e8:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    45ec:	mov	w0, #0xffffffff            	// #-1
    45f0:	b	4624 <PyThread_acquire_lock@plt+0x1c64>
    45f4:	ldr	w0, [sp, #60]
    45f8:	ldr	x1, [sp, #24]
    45fc:	sub	x0, x1, x0
    4600:	str	x0, [sp, #24]
    4604:	ldr	w0, [sp, #60]
    4608:	ldr	x1, [sp, #48]
    460c:	add	x0, x1, x0
    4610:	str	x0, [sp, #48]
    4614:	ldr	x0, [sp, #24]
    4618:	cmp	x0, #0x0
    461c:	b.gt	4598 <PyThread_acquire_lock@plt+0x1bd8>
    4620:	mov	w0, #0x0                   	// #0
    4624:	ldp	x29, x30, [sp], #64
    4628:	ret
    462c:	stp	x29, x30, [sp, #-32]!
    4630:	mov	x29, sp
    4634:	str	x0, [sp, #24]
    4638:	ldr	x0, [sp, #24]
    463c:	ldr	x0, [x0, #24]
    4640:	cmp	x0, #0x0
    4644:	b.eq	4654 <PyThread_acquire_lock@plt+0x1c94>  // b.none
    4648:	ldr	x0, [sp, #24]
    464c:	ldr	x0, [x0, #24]
    4650:	bl	2650 <PyThread_free_lock@plt>
    4654:	ldr	x0, [sp, #24]
    4658:	ldr	x0, [x0, #16]
    465c:	bl	28d0 <EVP_MD_CTX_free@plt>
    4660:	ldr	x0, [sp, #24]
    4664:	bl	28f0 <PyObject_Free@plt>
    4668:	nop
    466c:	ldp	x29, x30, [sp], #32
    4670:	ret
    4674:	stp	x29, x30, [sp, #-48]!
    4678:	mov	x29, sp
    467c:	str	x0, [sp, #24]
    4680:	str	x1, [sp, #16]
    4684:	ldr	x0, [sp, #16]
    4688:	ldr	x0, [x0, #24]
    468c:	cmp	x0, #0x0
    4690:	b.eq	46cc <PyThread_acquire_lock@plt+0x1d0c>  // b.none
    4694:	ldr	x0, [sp, #16]
    4698:	ldr	x0, [x0, #24]
    469c:	mov	w1, #0x0                   	// #0
    46a0:	bl	29c0 <PyThread_acquire_lock@plt>
    46a4:	cmp	w0, #0x0
    46a8:	b.ne	46cc <PyThread_acquire_lock@plt+0x1d0c>  // b.any
    46ac:	bl	27b0 <PyEval_SaveThread@plt>
    46b0:	str	x0, [sp, #40]
    46b4:	ldr	x0, [sp, #16]
    46b8:	ldr	x0, [x0, #24]
    46bc:	mov	w1, #0x1                   	// #1
    46c0:	bl	29c0 <PyThread_acquire_lock@plt>
    46c4:	ldr	x0, [sp, #40]
    46c8:	bl	2770 <PyEval_RestoreThread@plt>
    46cc:	ldr	x0, [sp, #16]
    46d0:	ldr	x0, [x0, #16]
    46d4:	mov	x1, x0
    46d8:	ldr	x0, [sp, #24]
    46dc:	bl	2780 <EVP_MD_CTX_copy@plt>
    46e0:	str	w0, [sp, #36]
    46e4:	ldr	x0, [sp, #16]
    46e8:	ldr	x0, [x0, #24]
    46ec:	cmp	x0, #0x0
    46f0:	b.eq	4700 <PyThread_acquire_lock@plt+0x1d40>  // b.none
    46f4:	ldr	x0, [sp, #16]
    46f8:	ldr	x0, [x0, #24]
    46fc:	bl	2740 <PyThread_release_lock@plt>
    4700:	ldr	w0, [sp, #36]
    4704:	ldp	x29, x30, [sp], #48
    4708:	ret
    470c:	stp	x29, x30, [sp, #-48]!
    4710:	mov	x29, sp
    4714:	str	x0, [sp, #24]
    4718:	bl	44f8 <PyThread_acquire_lock@plt+0x1b38>
    471c:	str	x0, [sp, #40]
    4720:	ldr	x0, [sp, #40]
    4724:	cmp	x0, #0x0
    4728:	b.ne	4734 <PyThread_acquire_lock@plt+0x1d74>  // b.any
    472c:	mov	x0, #0x0                   	// #0
    4730:	b	4778 <PyThread_acquire_lock@plt+0x1db8>
    4734:	ldr	x0, [sp, #40]
    4738:	ldr	x0, [x0, #16]
    473c:	ldr	x1, [sp, #24]
    4740:	bl	4674 <PyThread_acquire_lock@plt+0x1cb4>
    4744:	cmp	w0, #0x0
    4748:	b.ne	4774 <PyThread_acquire_lock@plt+0x1db4>  // b.any
    474c:	ldr	x2, [sp, #40]
    4750:	mov	w1, #0x136                 	// #310
    4754:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4758:	add	x0, x0, #0x3e8
    475c:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    4760:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4764:	ldr	x0, [x0, #3984]
    4768:	ldr	x0, [x0]
    476c:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    4770:	b	4778 <PyThread_acquire_lock@plt+0x1db8>
    4774:	ldr	x0, [sp, #40]
    4778:	ldp	x29, x30, [sp], #48
    477c:	ret
    4780:	stp	x29, x30, [sp, #-128]!
    4784:	mov	x29, sp
    4788:	str	x0, [sp, #24]
    478c:	bl	27e0 <EVP_MD_CTX_new@plt>
    4790:	str	x0, [sp, #120]
    4794:	ldr	x0, [sp, #120]
    4798:	cmp	x0, #0x0
    479c:	b.ne	47ac <PyThread_acquire_lock@plt+0x1dec>  // b.any
    47a0:	bl	2630 <PyErr_NoMemory@plt>
    47a4:	mov	x0, #0x0                   	// #0
    47a8:	b	4834 <PyThread_acquire_lock@plt+0x1e74>
    47ac:	ldr	x1, [sp, #24]
    47b0:	ldr	x0, [sp, #120]
    47b4:	bl	4674 <PyThread_acquire_lock@plt+0x1cb4>
    47b8:	cmp	w0, #0x0
    47bc:	b.ne	47d4 <PyThread_acquire_lock@plt+0x1e14>  // b.any
    47c0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    47c4:	ldr	x0, [x0, #3984]
    47c8:	ldr	x0, [x0]
    47cc:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    47d0:	b	4834 <PyThread_acquire_lock@plt+0x1e74>
    47d4:	ldr	x0, [sp, #120]
    47d8:	bl	2590 <EVP_MD_CTX_md@plt>
    47dc:	bl	26c0 <EVP_MD_size@plt>
    47e0:	str	w0, [sp, #116]
    47e4:	add	x0, sp, #0x28
    47e8:	mov	x2, #0x0                   	// #0
    47ec:	mov	x1, x0
    47f0:	ldr	x0, [sp, #120]
    47f4:	bl	2760 <EVP_DigestFinal@plt>
    47f8:	cmp	w0, #0x0
    47fc:	b.ne	4818 <PyThread_acquire_lock@plt+0x1e58>  // b.any
    4800:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4804:	ldr	x0, [x0, #3984]
    4808:	ldr	x0, [x0]
    480c:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    4810:	mov	x0, #0x0                   	// #0
    4814:	b	4834 <PyThread_acquire_lock@plt+0x1e74>
    4818:	ldr	w1, [sp, #116]
    481c:	add	x0, sp, #0x28
    4820:	bl	2870 <PyBytes_FromStringAndSize@plt>
    4824:	str	x0, [sp, #104]
    4828:	ldr	x0, [sp, #120]
    482c:	bl	28d0 <EVP_MD_CTX_free@plt>
    4830:	ldr	x0, [sp, #104]
    4834:	ldp	x29, x30, [sp], #128
    4838:	ret
    483c:	stp	x29, x30, [sp, #-112]!
    4840:	mov	x29, sp
    4844:	str	x0, [sp, #24]
    4848:	bl	27e0 <EVP_MD_CTX_new@plt>
    484c:	str	x0, [sp, #104]
    4850:	ldr	x0, [sp, #104]
    4854:	cmp	x0, #0x0
    4858:	b.ne	4868 <PyThread_acquire_lock@plt+0x1ea8>  // b.any
    485c:	bl	2630 <PyErr_NoMemory@plt>
    4860:	mov	x0, #0x0                   	// #0
    4864:	b	48e8 <PyThread_acquire_lock@plt+0x1f28>
    4868:	ldr	x1, [sp, #24]
    486c:	ldr	x0, [sp, #104]
    4870:	bl	4674 <PyThread_acquire_lock@plt+0x1cb4>
    4874:	cmp	w0, #0x0
    4878:	b.ne	4890 <PyThread_acquire_lock@plt+0x1ed0>  // b.any
    487c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4880:	ldr	x0, [x0, #3984]
    4884:	ldr	x0, [x0]
    4888:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    488c:	b	48e8 <PyThread_acquire_lock@plt+0x1f28>
    4890:	ldr	x0, [sp, #104]
    4894:	bl	2590 <EVP_MD_CTX_md@plt>
    4898:	bl	26c0 <EVP_MD_size@plt>
    489c:	str	w0, [sp, #100]
    48a0:	add	x0, sp, #0x20
    48a4:	mov	x2, #0x0                   	// #0
    48a8:	mov	x1, x0
    48ac:	ldr	x0, [sp, #104]
    48b0:	bl	2760 <EVP_DigestFinal@plt>
    48b4:	cmp	w0, #0x0
    48b8:	b.ne	48d4 <PyThread_acquire_lock@plt+0x1f14>  // b.any
    48bc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    48c0:	ldr	x0, [x0, #3984]
    48c4:	ldr	x0, [x0]
    48c8:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    48cc:	mov	x0, #0x0                   	// #0
    48d0:	b	48e8 <PyThread_acquire_lock@plt+0x1f28>
    48d4:	ldr	x0, [sp, #104]
    48d8:	bl	28d0 <EVP_MD_CTX_free@plt>
    48dc:	ldr	w1, [sp, #100]
    48e0:	add	x0, sp, #0x20
    48e4:	bl	2810 <_Py_strhex@plt>
    48e8:	ldp	x29, x30, [sp], #112
    48ec:	ret
    48f0:	stp	x29, x30, [sp, #-128]!
    48f4:	mov	x29, sp
    48f8:	str	x0, [sp, #24]
    48fc:	str	x1, [sp, #16]
    4900:	ldr	x0, [sp, #16]
    4904:	ldr	x0, [x0, #8]
    4908:	ldr	x0, [x0, #168]
    490c:	and	x0, x0, #0x10000000
    4910:	cmp	x0, #0x0
    4914:	b.eq	493c <PyThread_acquire_lock@plt+0x1f7c>  // b.none
    4918:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    491c:	ldr	x0, [x0, #4000]
    4920:	ldr	x2, [x0]
    4924:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4928:	add	x1, x0, #0x418
    492c:	mov	x0, x2
    4930:	bl	2920 <PyErr_SetString@plt>
    4934:	mov	x0, #0x0                   	// #0
    4938:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    493c:	ldr	x0, [sp, #16]
    4940:	ldr	x0, [x0, #8]
    4944:	ldr	x0, [x0, #160]
    4948:	cmp	x0, #0x0
    494c:	b.eq	4968 <PyThread_acquire_lock@plt+0x1fa8>  // b.none
    4950:	ldr	x0, [sp, #16]
    4954:	ldr	x0, [x0, #8]
    4958:	ldr	x0, [x0, #160]
    495c:	ldr	x0, [x0]
    4960:	cmp	x0, #0x0
    4964:	b.ne	498c <PyThread_acquire_lock@plt+0x1fcc>  // b.any
    4968:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    496c:	ldr	x0, [x0, #4000]
    4970:	ldr	x2, [x0]
    4974:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4978:	add	x1, x0, #0x448
    497c:	mov	x0, x2
    4980:	bl	2920 <PyErr_SetString@plt>
    4984:	mov	x0, #0x0                   	// #0
    4988:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    498c:	add	x0, sp, #0x20
    4990:	mov	w2, #0x0                   	// #0
    4994:	mov	x1, x0
    4998:	ldr	x0, [sp, #16]
    499c:	bl	2750 <PyObject_GetBuffer@plt>
    49a0:	cmn	w0, #0x1
    49a4:	b.ne	49b0 <PyThread_acquire_lock@plt+0x1ff0>  // b.any
    49a8:	mov	x0, #0x0                   	// #0
    49ac:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    49b0:	ldr	w0, [sp, #68]
    49b4:	cmp	w0, #0x1
    49b8:	b.le	49e8 <PyThread_acquire_lock@plt+0x2028>
    49bc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    49c0:	ldr	x0, [x0, #4024]
    49c4:	ldr	x2, [x0]
    49c8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    49cc:	add	x1, x0, #0x478
    49d0:	mov	x0, x2
    49d4:	bl	2920 <PyErr_SetString@plt>
    49d8:	add	x0, sp, #0x20
    49dc:	bl	2970 <PyBuffer_Release@plt>
    49e0:	mov	x0, #0x0                   	// #0
    49e4:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    49e8:	ldr	x0, [sp, #24]
    49ec:	ldr	x0, [x0, #24]
    49f0:	cmp	x0, #0x0
    49f4:	b.ne	4a14 <PyThread_acquire_lock@plt+0x2054>  // b.any
    49f8:	ldr	x0, [sp, #48]
    49fc:	cmp	x0, #0x7ff
    4a00:	b.le	4a14 <PyThread_acquire_lock@plt+0x2054>
    4a04:	bl	26b0 <PyThread_allocate_lock@plt>
    4a08:	mov	x1, x0
    4a0c:	ldr	x0, [sp, #24]
    4a10:	str	x1, [x0, #24]
    4a14:	ldr	x0, [sp, #24]
    4a18:	ldr	x0, [x0, #24]
    4a1c:	cmp	x0, #0x0
    4a20:	b.eq	4a70 <PyThread_acquire_lock@plt+0x20b0>  // b.none
    4a24:	bl	27b0 <PyEval_SaveThread@plt>
    4a28:	str	x0, [sp, #112]
    4a2c:	ldr	x0, [sp, #24]
    4a30:	ldr	x0, [x0, #24]
    4a34:	mov	w1, #0x1                   	// #1
    4a38:	bl	29c0 <PyThread_acquire_lock@plt>
    4a3c:	ldr	x0, [sp, #32]
    4a40:	ldr	x1, [sp, #48]
    4a44:	mov	x2, x1
    4a48:	mov	x1, x0
    4a4c:	ldr	x0, [sp, #24]
    4a50:	bl	4578 <PyThread_acquire_lock@plt+0x1bb8>
    4a54:	str	w0, [sp, #124]
    4a58:	ldr	x0, [sp, #24]
    4a5c:	ldr	x0, [x0, #24]
    4a60:	bl	2740 <PyThread_release_lock@plt>
    4a64:	ldr	x0, [sp, #112]
    4a68:	bl	2770 <PyEval_RestoreThread@plt>
    4a6c:	b	4a8c <PyThread_acquire_lock@plt+0x20cc>
    4a70:	ldr	x0, [sp, #32]
    4a74:	ldr	x1, [sp, #48]
    4a78:	mov	x2, x1
    4a7c:	mov	x1, x0
    4a80:	ldr	x0, [sp, #24]
    4a84:	bl	4578 <PyThread_acquire_lock@plt+0x1bb8>
    4a88:	str	w0, [sp, #124]
    4a8c:	add	x0, sp, #0x20
    4a90:	bl	2970 <PyBuffer_Release@plt>
    4a94:	ldr	w0, [sp, #124]
    4a98:	cmn	w0, #0x1
    4a9c:	b.ne	4aa8 <PyThread_acquire_lock@plt+0x20e8>  // b.any
    4aa0:	mov	x0, #0x0                   	// #0
    4aa4:	b	4abc <PyThread_acquire_lock@plt+0x20fc>
    4aa8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4aac:	ldr	x0, [x0, #4056]
    4ab0:	bl	2b60 <PyThread_acquire_lock@plt+0x1a0>
    4ab4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4ab8:	ldr	x0, [x0, #4056]
    4abc:	ldp	x29, x30, [sp], #128
    4ac0:	ret
    4ac4:	stp	x29, x30, [sp, #-48]!
    4ac8:	mov	x29, sp
    4acc:	str	x0, [sp, #24]
    4ad0:	str	x1, [sp, #16]
    4ad4:	ldr	x0, [sp, #24]
    4ad8:	ldr	x0, [x0, #16]
    4adc:	bl	2590 <EVP_MD_CTX_md@plt>
    4ae0:	bl	2730 <EVP_MD_block_size@plt>
    4ae4:	sxtw	x0, w0
    4ae8:	str	x0, [sp, #40]
    4aec:	ldr	x0, [sp, #40]
    4af0:	bl	2890 <PyLong_FromLong@plt>
    4af4:	ldp	x29, x30, [sp], #48
    4af8:	ret
    4afc:	stp	x29, x30, [sp, #-48]!
    4b00:	mov	x29, sp
    4b04:	str	x0, [sp, #24]
    4b08:	str	x1, [sp, #16]
    4b0c:	ldr	x0, [sp, #24]
    4b10:	ldr	x0, [x0, #16]
    4b14:	bl	2590 <EVP_MD_CTX_md@plt>
    4b18:	bl	26c0 <EVP_MD_size@plt>
    4b1c:	sxtw	x0, w0
    4b20:	str	x0, [sp, #40]
    4b24:	ldr	x0, [sp, #40]
    4b28:	bl	2890 <PyLong_FromLong@plt>
    4b2c:	ldp	x29, x30, [sp], #48
    4b30:	ret
    4b34:	stp	x29, x30, [sp, #-32]!
    4b38:	mov	x29, sp
    4b3c:	str	x0, [sp, #24]
    4b40:	str	x1, [sp, #16]
    4b44:	ldr	x0, [sp, #24]
    4b48:	ldr	x0, [x0, #16]
    4b4c:	bl	2590 <EVP_MD_CTX_md@plt>
    4b50:	bl	4074 <PyThread_acquire_lock@plt+0x16b4>
    4b54:	ldp	x29, x30, [sp], #32
    4b58:	ret
    4b5c:	stp	x29, x30, [sp, #-48]!
    4b60:	mov	x29, sp
    4b64:	str	x0, [sp, #24]
    4b68:	ldr	x0, [sp, #24]
    4b6c:	ldr	x0, [x0, #16]
    4b70:	bl	2590 <EVP_MD_CTX_md@plt>
    4b74:	bl	4074 <PyThread_acquire_lock@plt+0x16b4>
    4b78:	str	x0, [sp, #40]
    4b7c:	ldr	x0, [sp, #40]
    4b80:	cmp	x0, #0x0
    4b84:	b.ne	4b90 <PyThread_acquire_lock@plt+0x21d0>  // b.any
    4b88:	mov	x0, #0x0                   	// #0
    4b8c:	b	4bc0 <PyThread_acquire_lock@plt+0x2200>
    4b90:	ldr	x2, [sp, #24]
    4b94:	ldr	x1, [sp, #40]
    4b98:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4b9c:	add	x0, x0, #0x4f8
    4ba0:	bl	26a0 <PyUnicode_FromFormat@plt>
    4ba4:	str	x0, [sp, #32]
    4ba8:	ldr	x2, [sp, #40]
    4bac:	mov	w1, #0x1e2                 	// #482
    4bb0:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4bb4:	add	x0, x0, #0x3e8
    4bb8:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    4bbc:	ldr	x0, [sp, #32]
    4bc0:	ldp	x29, x30, [sp], #48
    4bc4:	ret
    4bc8:	stp	x29, x30, [sp, #-80]!
    4bcc:	mov	x29, sp
    4bd0:	str	x0, [sp, #40]
    4bd4:	str	x1, [sp, #32]
    4bd8:	str	x2, [sp, #24]
    4bdc:	str	wzr, [sp, #76]
    4be0:	ldr	x0, [sp, #40]
    4be4:	cmp	x0, #0x0
    4be8:	b.ne	4c10 <PyThread_acquire_lock@plt+0x2250>  // b.any
    4bec:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4bf0:	ldr	x0, [x0, #3984]
    4bf4:	ldr	x2, [x0]
    4bf8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4bfc:	add	x1, x0, #0x6e8
    4c00:	mov	x0, x2
    4c04:	bl	2920 <PyErr_SetString@plt>
    4c08:	mov	x0, #0x0                   	// #0
    4c0c:	b	4d00 <PyThread_acquire_lock@plt+0x2340>
    4c10:	bl	44f8 <PyThread_acquire_lock@plt+0x1b38>
    4c14:	str	x0, [sp, #64]
    4c18:	ldr	x0, [sp, #64]
    4c1c:	cmp	x0, #0x0
    4c20:	b.ne	4c2c <PyThread_acquire_lock@plt+0x226c>  // b.any
    4c24:	mov	x0, #0x0                   	// #0
    4c28:	b	4d00 <PyThread_acquire_lock@plt+0x2340>
    4c2c:	ldr	x0, [sp, #64]
    4c30:	ldr	x0, [x0, #16]
    4c34:	mov	x2, #0x0                   	// #0
    4c38:	ldr	x1, [sp, #40]
    4c3c:	bl	2550 <EVP_DigestInit_ex@plt>
    4c40:	cmp	w0, #0x0
    4c44:	b.ne	4c74 <PyThread_acquire_lock@plt+0x22b4>  // b.any
    4c48:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4c4c:	ldr	x0, [x0, #3984]
    4c50:	ldr	x0, [x0]
    4c54:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    4c58:	ldr	x2, [sp, #64]
    4c5c:	mov	w1, #0x231                 	// #561
    4c60:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4c64:	add	x0, x0, #0x3e8
    4c68:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    4c6c:	mov	x0, #0x0                   	// #0
    4c70:	b	4d00 <PyThread_acquire_lock@plt+0x2340>
    4c74:	ldr	x0, [sp, #32]
    4c78:	cmp	x0, #0x0
    4c7c:	b.eq	4cfc <PyThread_acquire_lock@plt+0x233c>  // b.none
    4c80:	ldr	x0, [sp, #24]
    4c84:	cmp	x0, #0x0
    4c88:	b.eq	4cfc <PyThread_acquire_lock@plt+0x233c>  // b.none
    4c8c:	ldr	x0, [sp, #24]
    4c90:	cmp	x0, #0x7ff
    4c94:	b.le	4cc0 <PyThread_acquire_lock@plt+0x2300>
    4c98:	bl	27b0 <PyEval_SaveThread@plt>
    4c9c:	str	x0, [sp, #56]
    4ca0:	ldr	x2, [sp, #24]
    4ca4:	ldr	x1, [sp, #32]
    4ca8:	ldr	x0, [sp, #64]
    4cac:	bl	4578 <PyThread_acquire_lock@plt+0x1bb8>
    4cb0:	str	w0, [sp, #76]
    4cb4:	ldr	x0, [sp, #56]
    4cb8:	bl	2770 <PyEval_RestoreThread@plt>
    4cbc:	b	4cd4 <PyThread_acquire_lock@plt+0x2314>
    4cc0:	ldr	x2, [sp, #24]
    4cc4:	ldr	x1, [sp, #32]
    4cc8:	ldr	x0, [sp, #64]
    4ccc:	bl	4578 <PyThread_acquire_lock@plt+0x1bb8>
    4cd0:	str	w0, [sp, #76]
    4cd4:	ldr	w0, [sp, #76]
    4cd8:	cmn	w0, #0x1
    4cdc:	b.ne	4cfc <PyThread_acquire_lock@plt+0x233c>  // b.any
    4ce0:	ldr	x2, [sp, #64]
    4ce4:	mov	w1, #0x23e                 	// #574
    4ce8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4cec:	add	x0, x0, #0x3e8
    4cf0:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    4cf4:	mov	x0, #0x0                   	// #0
    4cf8:	b	4d00 <PyThread_acquire_lock@plt+0x2340>
    4cfc:	ldr	x0, [sp, #64]
    4d00:	ldp	x29, x30, [sp], #80
    4d04:	ret
    4d08:	stp	x29, x30, [sp, #-160]!
    4d0c:	mov	x29, sp
    4d10:	str	x0, [sp, #40]
    4d14:	str	x1, [sp, #32]
    4d18:	str	x2, [sp, #24]
    4d1c:	stp	xzr, xzr, [sp, #64]
    4d20:	stp	xzr, xzr, [sp, #80]
    4d24:	stp	xzr, xzr, [sp, #96]
    4d28:	stp	xzr, xzr, [sp, #112]
    4d2c:	stp	xzr, xzr, [sp, #128]
    4d30:	add	x0, sp, #0x38
    4d34:	mov	x2, x0
    4d38:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4d3c:	add	x1, x0, #0x700
    4d40:	ldr	x0, [sp, #32]
    4d44:	bl	2880 <_PyArg_Parse_SizeT@plt>
    4d48:	cmp	w0, #0x0
    4d4c:	b.ne	4d74 <PyThread_acquire_lock@plt+0x23b4>  // b.any
    4d50:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4d54:	ldr	x0, [x0, #4000]
    4d58:	ldr	x2, [x0]
    4d5c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4d60:	add	x1, x0, #0x708
    4d64:	mov	x0, x2
    4d68:	bl	2920 <PyErr_SetString@plt>
    4d6c:	mov	x0, #0x0                   	// #0
    4d70:	b	4ea8 <PyThread_acquire_lock@plt+0x24e8>
    4d74:	ldr	x0, [sp, #24]
    4d78:	cmp	x0, #0x0
    4d7c:	b.eq	4e68 <PyThread_acquire_lock@plt+0x24a8>  // b.none
    4d80:	ldr	x0, [sp, #24]
    4d84:	ldr	x0, [x0, #8]
    4d88:	ldr	x0, [x0, #168]
    4d8c:	and	x0, x0, #0x10000000
    4d90:	cmp	x0, #0x0
    4d94:	b.eq	4dbc <PyThread_acquire_lock@plt+0x23fc>  // b.none
    4d98:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4d9c:	ldr	x0, [x0, #4000]
    4da0:	ldr	x2, [x0]
    4da4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4da8:	add	x1, x0, #0x418
    4dac:	mov	x0, x2
    4db0:	bl	2920 <PyErr_SetString@plt>
    4db4:	mov	x0, #0x0                   	// #0
    4db8:	b	4ea8 <PyThread_acquire_lock@plt+0x24e8>
    4dbc:	ldr	x0, [sp, #24]
    4dc0:	ldr	x0, [x0, #8]
    4dc4:	ldr	x0, [x0, #160]
    4dc8:	cmp	x0, #0x0
    4dcc:	b.eq	4de8 <PyThread_acquire_lock@plt+0x2428>  // b.none
    4dd0:	ldr	x0, [sp, #24]
    4dd4:	ldr	x0, [x0, #8]
    4dd8:	ldr	x0, [x0, #160]
    4ddc:	ldr	x0, [x0]
    4de0:	cmp	x0, #0x0
    4de4:	b.ne	4e0c <PyThread_acquire_lock@plt+0x244c>  // b.any
    4de8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4dec:	ldr	x0, [x0, #4000]
    4df0:	ldr	x2, [x0]
    4df4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4df8:	add	x1, x0, #0x448
    4dfc:	mov	x0, x2
    4e00:	bl	2920 <PyErr_SetString@plt>
    4e04:	mov	x0, #0x0                   	// #0
    4e08:	b	4ea8 <PyThread_acquire_lock@plt+0x24e8>
    4e0c:	add	x0, sp, #0x40
    4e10:	mov	w2, #0x0                   	// #0
    4e14:	mov	x1, x0
    4e18:	ldr	x0, [sp, #24]
    4e1c:	bl	2750 <PyObject_GetBuffer@plt>
    4e20:	cmn	w0, #0x1
    4e24:	b.ne	4e30 <PyThread_acquire_lock@plt+0x2470>  // b.any
    4e28:	mov	x0, #0x0                   	// #0
    4e2c:	b	4ea8 <PyThread_acquire_lock@plt+0x24e8>
    4e30:	ldr	w0, [sp, #100]
    4e34:	cmp	w0, #0x1
    4e38:	b.le	4e68 <PyThread_acquire_lock@plt+0x24a8>
    4e3c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4e40:	ldr	x0, [x0, #4024]
    4e44:	ldr	x2, [x0]
    4e48:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4e4c:	add	x1, x0, #0x478
    4e50:	mov	x0, x2
    4e54:	bl	2920 <PyErr_SetString@plt>
    4e58:	add	x0, sp, #0x40
    4e5c:	bl	2970 <PyBuffer_Release@plt>
    4e60:	mov	x0, #0x0                   	// #0
    4e64:	b	4ea8 <PyThread_acquire_lock@plt+0x24e8>
    4e68:	ldr	x0, [sp, #56]
    4e6c:	bl	4334 <PyThread_acquire_lock@plt+0x1974>
    4e70:	str	x0, [sp, #152]
    4e74:	ldr	x0, [sp, #64]
    4e78:	ldr	x1, [sp, #80]
    4e7c:	mov	x2, x1
    4e80:	mov	x1, x0
    4e84:	ldr	x0, [sp, #152]
    4e88:	bl	4bc8 <PyThread_acquire_lock@plt+0x2208>
    4e8c:	str	x0, [sp, #144]
    4e90:	ldr	x0, [sp, #24]
    4e94:	cmp	x0, #0x0
    4e98:	b.eq	4ea4 <PyThread_acquire_lock@plt+0x24e4>  // b.none
    4e9c:	add	x0, sp, #0x40
    4ea0:	bl	2970 <PyBuffer_Release@plt>
    4ea4:	ldr	x0, [sp, #144]
    4ea8:	ldp	x29, x30, [sp], #160
    4eac:	ret
    4eb0:	stp	x29, x30, [sp, #-144]!
    4eb4:	mov	x29, sp
    4eb8:	str	x0, [sp, #40]
    4ebc:	str	x1, [sp, #32]
    4ec0:	str	x2, [sp, #24]
    4ec4:	stp	xzr, xzr, [sp, #56]
    4ec8:	stp	xzr, xzr, [sp, #72]
    4ecc:	stp	xzr, xzr, [sp, #88]
    4ed0:	stp	xzr, xzr, [sp, #104]
    4ed4:	stp	xzr, xzr, [sp, #120]
    4ed8:	ldr	x0, [sp, #32]
    4edc:	cmp	x0, #0x0
    4ee0:	b.eq	4fcc <PyThread_acquire_lock@plt+0x260c>  // b.none
    4ee4:	ldr	x0, [sp, #32]
    4ee8:	ldr	x0, [x0, #8]
    4eec:	ldr	x0, [x0, #168]
    4ef0:	and	x0, x0, #0x10000000
    4ef4:	cmp	x0, #0x0
    4ef8:	b.eq	4f20 <PyThread_acquire_lock@plt+0x2560>  // b.none
    4efc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4f00:	ldr	x0, [x0, #4000]
    4f04:	ldr	x2, [x0]
    4f08:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4f0c:	add	x1, x0, #0x418
    4f10:	mov	x0, x2
    4f14:	bl	2920 <PyErr_SetString@plt>
    4f18:	mov	x0, #0x0                   	// #0
    4f1c:	b	5000 <PyThread_acquire_lock@plt+0x2640>
    4f20:	ldr	x0, [sp, #32]
    4f24:	ldr	x0, [x0, #8]
    4f28:	ldr	x0, [x0, #160]
    4f2c:	cmp	x0, #0x0
    4f30:	b.eq	4f4c <PyThread_acquire_lock@plt+0x258c>  // b.none
    4f34:	ldr	x0, [sp, #32]
    4f38:	ldr	x0, [x0, #8]
    4f3c:	ldr	x0, [x0, #160]
    4f40:	ldr	x0, [x0]
    4f44:	cmp	x0, #0x0
    4f48:	b.ne	4f70 <PyThread_acquire_lock@plt+0x25b0>  // b.any
    4f4c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4f50:	ldr	x0, [x0, #4000]
    4f54:	ldr	x2, [x0]
    4f58:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4f5c:	add	x1, x0, #0x448
    4f60:	mov	x0, x2
    4f64:	bl	2920 <PyErr_SetString@plt>
    4f68:	mov	x0, #0x0                   	// #0
    4f6c:	b	5000 <PyThread_acquire_lock@plt+0x2640>
    4f70:	add	x0, sp, #0x38
    4f74:	mov	w2, #0x0                   	// #0
    4f78:	mov	x1, x0
    4f7c:	ldr	x0, [sp, #32]
    4f80:	bl	2750 <PyObject_GetBuffer@plt>
    4f84:	cmn	w0, #0x1
    4f88:	b.ne	4f94 <PyThread_acquire_lock@plt+0x25d4>  // b.any
    4f8c:	mov	x0, #0x0                   	// #0
    4f90:	b	5000 <PyThread_acquire_lock@plt+0x2640>
    4f94:	ldr	w0, [sp, #92]
    4f98:	cmp	w0, #0x1
    4f9c:	b.le	4fcc <PyThread_acquire_lock@plt+0x260c>
    4fa0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    4fa4:	ldr	x0, [x0, #4024]
    4fa8:	ldr	x2, [x0]
    4fac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    4fb0:	add	x1, x0, #0x478
    4fb4:	mov	x0, x2
    4fb8:	bl	2920 <PyErr_SetString@plt>
    4fbc:	add	x0, sp, #0x38
    4fc0:	bl	2970 <PyBuffer_Release@plt>
    4fc4:	mov	x0, #0x0                   	// #0
    4fc8:	b	5000 <PyThread_acquire_lock@plt+0x2640>
    4fcc:	ldr	x0, [sp, #56]
    4fd0:	ldr	x1, [sp, #72]
    4fd4:	mov	x2, x1
    4fd8:	mov	x1, x0
    4fdc:	ldr	x0, [sp, #24]
    4fe0:	bl	4bc8 <PyThread_acquire_lock@plt+0x2208>
    4fe4:	str	x0, [sp, #136]
    4fe8:	ldr	x0, [sp, #32]
    4fec:	cmp	x0, #0x0
    4ff0:	b.eq	4ffc <PyThread_acquire_lock@plt+0x263c>  // b.none
    4ff4:	add	x0, sp, #0x38
    4ff8:	bl	2970 <PyBuffer_Release@plt>
    4ffc:	ldr	x0, [sp, #136]
    5000:	ldp	x29, x30, [sp], #144
    5004:	ret
    5008:	stp	x29, x30, [sp, #-32]!
    500c:	mov	x29, sp
    5010:	str	x0, [sp, #24]
    5014:	str	x1, [sp, #16]
    5018:	bl	2690 <EVP_md5@plt>
    501c:	mov	x2, x0
    5020:	ldr	x1, [sp, #16]
    5024:	ldr	x0, [sp, #24]
    5028:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    502c:	ldp	x29, x30, [sp], #32
    5030:	ret
    5034:	stp	x29, x30, [sp, #-32]!
    5038:	mov	x29, sp
    503c:	str	x0, [sp, #24]
    5040:	str	x1, [sp, #16]
    5044:	bl	2820 <EVP_sha1@plt>
    5048:	mov	x2, x0
    504c:	ldr	x1, [sp, #16]
    5050:	ldr	x0, [sp, #24]
    5054:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    5058:	ldp	x29, x30, [sp], #32
    505c:	ret
    5060:	stp	x29, x30, [sp, #-32]!
    5064:	mov	x29, sp
    5068:	str	x0, [sp, #24]
    506c:	str	x1, [sp, #16]
    5070:	bl	27c0 <EVP_sha224@plt>
    5074:	mov	x2, x0
    5078:	ldr	x1, [sp, #16]
    507c:	ldr	x0, [sp, #24]
    5080:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    5084:	ldp	x29, x30, [sp], #32
    5088:	ret
    508c:	stp	x29, x30, [sp, #-32]!
    5090:	mov	x29, sp
    5094:	str	x0, [sp, #24]
    5098:	str	x1, [sp, #16]
    509c:	bl	2950 <EVP_sha256@plt>
    50a0:	mov	x2, x0
    50a4:	ldr	x1, [sp, #16]
    50a8:	ldr	x0, [sp, #24]
    50ac:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    50b0:	ldp	x29, x30, [sp], #32
    50b4:	ret
    50b8:	stp	x29, x30, [sp, #-32]!
    50bc:	mov	x29, sp
    50c0:	str	x0, [sp, #24]
    50c4:	str	x1, [sp, #16]
    50c8:	bl	25c0 <EVP_sha384@plt>
    50cc:	mov	x2, x0
    50d0:	ldr	x1, [sp, #16]
    50d4:	ldr	x0, [sp, #24]
    50d8:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    50dc:	ldp	x29, x30, [sp], #32
    50e0:	ret
    50e4:	stp	x29, x30, [sp, #-32]!
    50e8:	mov	x29, sp
    50ec:	str	x0, [sp, #24]
    50f0:	str	x1, [sp, #16]
    50f4:	bl	2940 <EVP_sha512@plt>
    50f8:	mov	x2, x0
    50fc:	ldr	x1, [sp, #16]
    5100:	ldr	x0, [sp, #24]
    5104:	bl	4eb0 <PyThread_acquire_lock@plt+0x24f0>
    5108:	ldp	x29, x30, [sp], #32
    510c:	ret
    5110:	stp	x29, x30, [sp, #-128]!
    5114:	mov	x29, sp
    5118:	str	x0, [sp, #56]
    511c:	str	x1, [sp, #48]
    5120:	str	x2, [sp, #40]
    5124:	str	x3, [sp, #32]
    5128:	str	x4, [sp, #24]
    512c:	str	x5, [sp, #16]
    5130:	str	xzr, [sp, #120]
    5134:	ldr	x0, [sp, #48]
    5138:	bl	2640 <EVP_get_digestbyname@plt>
    513c:	str	x0, [sp, #104]
    5140:	ldr	x0, [sp, #104]
    5144:	cmp	x0, #0x0
    5148:	b.ne	516c <PyThread_acquire_lock@plt+0x27ac>  // b.any
    514c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5150:	ldr	x0, [x0, #3984]
    5154:	ldr	x2, [x0]
    5158:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    515c:	add	x1, x0, #0x6e8
    5160:	mov	x0, x2
    5164:	bl	2920 <PyErr_SetString@plt>
    5168:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    516c:	ldr	x0, [sp, #40]
    5170:	ldr	x1, [x0, #16]
    5174:	mov	x0, #0x7fffffff            	// #2147483647
    5178:	cmp	x1, x0
    517c:	b.le	51a0 <PyThread_acquire_lock@plt+0x27e0>
    5180:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5184:	ldr	x0, [x0, #4064]
    5188:	ldr	x2, [x0]
    518c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5190:	add	x1, x0, #0x720
    5194:	mov	x0, x2
    5198:	bl	2920 <PyErr_SetString@plt>
    519c:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    51a0:	ldr	x0, [sp, #32]
    51a4:	ldr	x1, [x0, #16]
    51a8:	mov	x0, #0x7fffffff            	// #2147483647
    51ac:	cmp	x1, x0
    51b0:	b.le	51d4 <PyThread_acquire_lock@plt+0x2814>
    51b4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    51b8:	ldr	x0, [x0, #4064]
    51bc:	ldr	x2, [x0]
    51c0:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    51c4:	add	x1, x0, #0x738
    51c8:	mov	x0, x2
    51cc:	bl	2920 <PyErr_SetString@plt>
    51d0:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    51d4:	ldr	x0, [sp, #24]
    51d8:	cmp	x0, #0x0
    51dc:	b.gt	5200 <PyThread_acquire_lock@plt+0x2840>
    51e0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    51e4:	ldr	x0, [x0, #3984]
    51e8:	ldr	x2, [x0]
    51ec:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    51f0:	add	x1, x0, #0x750
    51f4:	mov	x0, x2
    51f8:	bl	2920 <PyErr_SetString@plt>
    51fc:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    5200:	ldr	x1, [sp, #24]
    5204:	mov	x0, #0x7fffffff            	// #2147483647
    5208:	cmp	x1, x0
    520c:	b.le	5230 <PyThread_acquire_lock@plt+0x2870>
    5210:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5214:	ldr	x0, [x0, #4064]
    5218:	ldr	x2, [x0]
    521c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5220:	add	x1, x0, #0x778
    5224:	mov	x0, x2
    5228:	bl	2920 <PyErr_SetString@plt>
    522c:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    5230:	ldr	x1, [sp, #16]
    5234:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5238:	ldr	x0, [x0, #4056]
    523c:	cmp	x1, x0
    5240:	b.ne	5258 <PyThread_acquire_lock@plt+0x2898>  // b.any
    5244:	ldr	x0, [sp, #104]
    5248:	bl	26c0 <EVP_MD_size@plt>
    524c:	sxtw	x0, w0
    5250:	str	x0, [sp, #112]
    5254:	b	527c <PyThread_acquire_lock@plt+0x28bc>
    5258:	ldr	x0, [sp, #16]
    525c:	bl	26d0 <PyLong_AsLong@plt>
    5260:	str	x0, [sp, #112]
    5264:	ldr	x0, [sp, #112]
    5268:	cmn	x0, #0x1
    526c:	b.ne	527c <PyThread_acquire_lock@plt+0x28bc>  // b.any
    5270:	bl	2720 <PyErr_Occurred@plt>
    5274:	cmp	x0, #0x0
    5278:	b.ne	53b8 <PyThread_acquire_lock@plt+0x29f8>  // b.any
    527c:	ldr	x0, [sp, #112]
    5280:	cmp	x0, #0x0
    5284:	b.gt	52a8 <PyThread_acquire_lock@plt+0x28e8>
    5288:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    528c:	ldr	x0, [x0, #3984]
    5290:	ldr	x2, [x0]
    5294:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5298:	add	x1, x0, #0x798
    529c:	mov	x0, x2
    52a0:	bl	2920 <PyErr_SetString@plt>
    52a4:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    52a8:	ldr	x1, [sp, #112]
    52ac:	mov	x0, #0x7fffffff            	// #2147483647
    52b0:	cmp	x1, x0
    52b4:	b.le	52d8 <PyThread_acquire_lock@plt+0x2918>
    52b8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    52bc:	ldr	x0, [x0, #4064]
    52c0:	ldr	x2, [x0]
    52c4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    52c8:	add	x1, x0, #0x7c0
    52cc:	mov	x0, x2
    52d0:	bl	2920 <PyErr_SetString@plt>
    52d4:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    52d8:	ldr	x1, [sp, #112]
    52dc:	mov	x0, #0x0                   	// #0
    52e0:	bl	2870 <PyBytes_FromStringAndSize@plt>
    52e4:	str	x0, [sp, #120]
    52e8:	ldr	x0, [sp, #120]
    52ec:	cmp	x0, #0x0
    52f0:	b.eq	53c0 <PyThread_acquire_lock@plt+0x2a00>  // b.none
    52f4:	ldr	x0, [sp, #120]
    52f8:	add	x0, x0, #0x20
    52fc:	str	x0, [sp, #96]
    5300:	bl	27b0 <PyEval_SaveThread@plt>
    5304:	str	x0, [sp, #88]
    5308:	ldr	x0, [sp, #40]
    530c:	ldr	x8, [x0]
    5310:	ldr	x0, [sp, #40]
    5314:	ldr	x0, [x0, #16]
    5318:	mov	w9, w0
    531c:	ldr	x0, [sp, #32]
    5320:	ldr	x1, [x0]
    5324:	ldr	x0, [sp, #32]
    5328:	ldr	x0, [x0, #16]
    532c:	mov	w2, w0
    5330:	ldr	x0, [sp, #24]
    5334:	mov	w3, w0
    5338:	ldr	x0, [sp, #112]
    533c:	ldr	x7, [sp, #96]
    5340:	mov	w6, w0
    5344:	ldr	x5, [sp, #104]
    5348:	mov	w4, w3
    534c:	mov	w3, w2
    5350:	mov	x2, x1
    5354:	mov	w1, w9
    5358:	mov	x0, x8
    535c:	bl	2540 <PKCS5_PBKDF2_HMAC@plt>
    5360:	str	w0, [sp, #84]
    5364:	ldr	x0, [sp, #88]
    5368:	bl	2770 <PyEval_RestoreThread@plt>
    536c:	ldr	w0, [sp, #84]
    5370:	cmp	w0, #0x0
    5374:	b.ne	53c8 <PyThread_acquire_lock@plt+0x2a08>  // b.any
    5378:	ldr	x0, [sp, #120]
    537c:	str	x0, [sp, #72]
    5380:	ldr	x0, [sp, #72]
    5384:	cmp	x0, #0x0
    5388:	b.eq	53a4 <PyThread_acquire_lock@plt+0x29e4>  // b.none
    538c:	str	xzr, [sp, #120]
    5390:	ldr	x2, [sp, #72]
    5394:	mov	w1, #0x33f                 	// #831
    5398:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    539c:	add	x0, x0, #0x3e8
    53a0:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    53a4:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    53a8:	ldr	x0, [x0, #3984]
    53ac:	ldr	x0, [x0]
    53b0:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    53b4:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    53b8:	nop
    53bc:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    53c0:	nop
    53c4:	b	53cc <PyThread_acquire_lock@plt+0x2a0c>
    53c8:	nop
    53cc:	ldr	x0, [sp, #120]
    53d0:	ldp	x29, x30, [sp], #128
    53d4:	ret
    53d8:	sub	sp, sp, #0xa0
    53dc:	stp	x29, x30, [sp, #16]
    53e0:	add	x29, sp, #0x10
    53e4:	str	x0, [sp, #88]
    53e8:	str	x1, [sp, #80]
    53ec:	str	x2, [sp, #72]
    53f0:	str	x3, [sp, #64]
    53f4:	str	x4, [sp, #56]
    53f8:	str	x5, [sp, #48]
    53fc:	str	x6, [sp, #40]
    5400:	str	x7, [sp, #32]
    5404:	str	xzr, [sp, #152]
    5408:	ldr	x0, [sp, #80]
    540c:	ldr	x1, [x0, #16]
    5410:	mov	x0, #0x7fffffff            	// #2147483647
    5414:	cmp	x1, x0
    5418:	b.le	5440 <PyThread_acquire_lock@plt+0x2a80>
    541c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5420:	ldr	x0, [x0, #4064]
    5424:	ldr	x2, [x0]
    5428:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    542c:	add	x1, x0, #0x720
    5430:	mov	x0, x2
    5434:	bl	2920 <PyErr_SetString@plt>
    5438:	mov	x0, #0x0                   	// #0
    543c:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    5440:	ldr	x0, [sp, #72]
    5444:	ldr	x0, [x0]
    5448:	cmp	x0, #0x0
    544c:	b.ne	5474 <PyThread_acquire_lock@plt+0x2ab4>  // b.any
    5450:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5454:	ldr	x0, [x0, #4000]
    5458:	ldr	x2, [x0]
    545c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5460:	add	x1, x0, #0x7e0
    5464:	mov	x0, x2
    5468:	bl	2920 <PyErr_SetString@plt>
    546c:	mov	x0, #0x0                   	// #0
    5470:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    5474:	ldr	x0, [sp, #72]
    5478:	ldr	x1, [x0, #16]
    547c:	mov	x0, #0x7fffffff            	// #2147483647
    5480:	cmp	x1, x0
    5484:	b.le	54ac <PyThread_acquire_lock@plt+0x2aec>
    5488:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    548c:	ldr	x0, [x0, #4064]
    5490:	ldr	x2, [x0]
    5494:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5498:	add	x1, x0, #0x738
    549c:	mov	x0, x2
    54a0:	bl	2920 <PyErr_SetString@plt>
    54a4:	mov	x0, #0x0                   	// #0
    54a8:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    54ac:	ldr	x0, [sp, #64]
    54b0:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    54b4:	str	x0, [sp, #144]
    54b8:	ldr	x0, [sp, #144]
    54bc:	cmn	x0, #0x1
    54c0:	b.ne	54f4 <PyThread_acquire_lock@plt+0x2b34>  // b.any
    54c4:	bl	2720 <PyErr_Occurred@plt>
    54c8:	cmp	x0, #0x0
    54cc:	b.eq	54f4 <PyThread_acquire_lock@plt+0x2b34>  // b.none
    54d0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    54d4:	ldr	x0, [x0, #4000]
    54d8:	ldr	x2, [x0]
    54dc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    54e0:	add	x1, x0, #0x7f8
    54e4:	mov	x0, x2
    54e8:	bl	2920 <PyErr_SetString@plt>
    54ec:	mov	x0, #0x0                   	// #0
    54f0:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    54f4:	ldr	x0, [sp, #144]
    54f8:	cmp	x0, #0x1
    54fc:	b.ls	5518 <PyThread_acquire_lock@plt+0x2b58>  // b.plast
    5500:	ldr	x0, [sp, #144]
    5504:	sub	x1, x0, #0x1
    5508:	ldr	x0, [sp, #144]
    550c:	and	x0, x1, x0
    5510:	cmp	x0, #0x0
    5514:	b.eq	553c <PyThread_acquire_lock@plt+0x2b7c>  // b.none
    5518:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    551c:	ldr	x0, [x0, #3984]
    5520:	ldr	x2, [x0]
    5524:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5528:	add	x1, x0, #0x828
    552c:	mov	x0, x2
    5530:	bl	2920 <PyErr_SetString@plt>
    5534:	mov	x0, #0x0                   	// #0
    5538:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    553c:	ldr	x0, [sp, #56]
    5540:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    5544:	str	x0, [sp, #136]
    5548:	ldr	x0, [sp, #136]
    554c:	cmn	x0, #0x1
    5550:	b.ne	5584 <PyThread_acquire_lock@plt+0x2bc4>  // b.any
    5554:	bl	2720 <PyErr_Occurred@plt>
    5558:	cmp	x0, #0x0
    555c:	b.eq	5584 <PyThread_acquire_lock@plt+0x2bc4>  // b.none
    5560:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5564:	ldr	x0, [x0, #4000]
    5568:	ldr	x2, [x0]
    556c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5570:	add	x1, x0, #0x840
    5574:	mov	x0, x2
    5578:	bl	2920 <PyErr_SetString@plt>
    557c:	mov	x0, #0x0                   	// #0
    5580:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    5584:	ldr	x0, [sp, #48]
    5588:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    558c:	str	x0, [sp, #128]
    5590:	ldr	x0, [sp, #128]
    5594:	cmn	x0, #0x1
    5598:	b.ne	55cc <PyThread_acquire_lock@plt+0x2c0c>  // b.any
    559c:	bl	2720 <PyErr_Occurred@plt>
    55a0:	cmp	x0, #0x0
    55a4:	b.eq	55cc <PyThread_acquire_lock@plt+0x2c0c>  // b.none
    55a8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    55ac:	ldr	x0, [x0, #4000]
    55b0:	ldr	x2, [x0]
    55b4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    55b8:	add	x1, x0, #0x870
    55bc:	mov	x0, x2
    55c0:	bl	2920 <PyErr_SetString@plt>
    55c4:	mov	x0, #0x0                   	// #0
    55c8:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    55cc:	ldr	x0, [sp, #40]
    55d0:	cmp	x0, #0x0
    55d4:	b.lt	55e8 <PyThread_acquire_lock@plt+0x2c28>  // b.tstop
    55d8:	ldr	x1, [sp, #40]
    55dc:	mov	x0, #0x7fffffff            	// #2147483647
    55e0:	cmp	x1, x0
    55e4:	b.le	5610 <PyThread_acquire_lock@plt+0x2c50>
    55e8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    55ec:	ldr	x0, [x0, #3984]
    55f0:	ldr	x3, [x0]
    55f4:	mov	w2, #0x7fffffff            	// #2147483647
    55f8:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    55fc:	add	x1, x0, #0x8a0
    5600:	mov	x0, x3
    5604:	bl	26f0 <PyErr_Format@plt>
    5608:	mov	x0, #0x0                   	// #0
    560c:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    5610:	ldr	x0, [sp, #32]
    5614:	cmp	x0, #0x0
    5618:	b.le	562c <PyThread_acquire_lock@plt+0x2c6c>
    561c:	ldr	x1, [sp, #32]
    5620:	mov	x0, #0x7fffffff            	// #2147483647
    5624:	cmp	x1, x0
    5628:	b.le	5654 <PyThread_acquire_lock@plt+0x2c94>
    562c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5630:	ldr	x0, [x0, #3984]
    5634:	ldr	x3, [x0]
    5638:	mov	w2, #0x7fffffff            	// #2147483647
    563c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5640:	add	x1, x0, #0x8d0
    5644:	mov	x0, x3
    5648:	bl	26f0 <PyErr_Format@plt>
    564c:	mov	x0, #0x0                   	// #0
    5650:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    5654:	ldr	x0, [sp, #40]
    5658:	str	xzr, [sp, #8]
    565c:	str	xzr, [sp]
    5660:	mov	x7, x0
    5664:	ldr	x6, [sp, #128]
    5668:	ldr	x5, [sp, #136]
    566c:	ldr	x4, [sp, #144]
    5670:	mov	x3, #0x0                   	// #0
    5674:	mov	x2, #0x0                   	// #0
    5678:	mov	x1, #0x0                   	// #0
    567c:	mov	x0, #0x0                   	// #0
    5680:	bl	2830 <EVP_PBE_scrypt@plt>
    5684:	str	w0, [sp, #124]
    5688:	ldr	w0, [sp, #124]
    568c:	cmp	w0, #0x0
    5690:	b.ne	56b8 <PyThread_acquire_lock@plt+0x2cf8>  // b.any
    5694:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5698:	ldr	x0, [x0, #3984]
    569c:	ldr	x2, [x0]
    56a0:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    56a4:	add	x1, x0, #0x908
    56a8:	mov	x0, x2
    56ac:	bl	2920 <PyErr_SetString@plt>
    56b0:	mov	x0, #0x0                   	// #0
    56b4:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    56b8:	ldr	x1, [sp, #32]
    56bc:	mov	x0, #0x0                   	// #0
    56c0:	bl	2870 <PyBytes_FromStringAndSize@plt>
    56c4:	str	x0, [sp, #152]
    56c8:	ldr	x0, [sp, #152]
    56cc:	cmp	x0, #0x0
    56d0:	b.ne	56dc <PyThread_acquire_lock@plt+0x2d1c>  // b.any
    56d4:	mov	x0, #0x0                   	// #0
    56d8:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    56dc:	ldr	x0, [sp, #152]
    56e0:	add	x0, x0, #0x20
    56e4:	str	x0, [sp, #112]
    56e8:	bl	27b0 <PyEval_SaveThread@plt>
    56ec:	str	x0, [sp, #104]
    56f0:	ldr	x0, [sp, #80]
    56f4:	ldr	x8, [x0]
    56f8:	ldr	x0, [sp, #80]
    56fc:	ldr	x0, [x0, #16]
    5700:	mov	x9, x0
    5704:	ldr	x0, [sp, #72]
    5708:	ldr	x1, [x0]
    570c:	ldr	x0, [sp, #72]
    5710:	ldr	x0, [x0, #16]
    5714:	mov	x3, x0
    5718:	ldr	x2, [sp, #40]
    571c:	ldr	x0, [sp, #32]
    5720:	str	x0, [sp, #8]
    5724:	ldr	x0, [sp, #112]
    5728:	str	x0, [sp]
    572c:	mov	x7, x2
    5730:	ldr	x6, [sp, #128]
    5734:	ldr	x5, [sp, #136]
    5738:	ldr	x4, [sp, #144]
    573c:	mov	x2, x1
    5740:	mov	x1, x9
    5744:	mov	x0, x8
    5748:	bl	2830 <EVP_PBE_scrypt@plt>
    574c:	str	w0, [sp, #124]
    5750:	ldr	x0, [sp, #104]
    5754:	bl	2770 <PyEval_RestoreThread@plt>
    5758:	ldr	w0, [sp, #124]
    575c:	cmp	w0, #0x0
    5760:	b.ne	57a8 <PyThread_acquire_lock@plt+0x2de8>  // b.any
    5764:	ldr	x0, [sp, #152]
    5768:	str	x0, [sp, #96]
    576c:	ldr	x0, [sp, #96]
    5770:	cmp	x0, #0x0
    5774:	b.eq	5790 <PyThread_acquire_lock@plt+0x2dd0>  // b.none
    5778:	str	xzr, [sp, #152]
    577c:	ldr	x2, [sp, #96]
    5780:	mov	w1, #0x3be                 	// #958
    5784:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5788:	add	x0, x0, #0x3e8
    578c:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    5790:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5794:	ldr	x0, [x0, #3984]
    5798:	ldr	x0, [x0]
    579c:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    57a0:	mov	x0, #0x0                   	// #0
    57a4:	b	57ac <PyThread_acquire_lock@plt+0x2dec>
    57a8:	ldr	x0, [sp, #152]
    57ac:	ldp	x29, x30, [sp, #16]
    57b0:	add	sp, sp, #0xa0
    57b4:	ret
    57b8:	stp	x29, x30, [sp, #-144]!
    57bc:	mov	x29, sp
    57c0:	str	x0, [sp, #40]
    57c4:	str	x1, [sp, #32]
    57c8:	str	x2, [sp, #24]
    57cc:	str	x3, [sp, #16]
    57d0:	stp	xzr, xzr, [sp, #56]
    57d4:	stp	xzr, xzr, [sp, #72]
    57d8:	stp	xzr, xzr, [sp, #88]
    57dc:	stp	xzr, xzr, [sp, #104]
    57e0:	str	wzr, [sp, #52]
    57e4:	ldr	x0, [sp, #16]
    57e8:	bl	2640 <EVP_get_digestbyname@plt>
    57ec:	str	x0, [sp, #136]
    57f0:	ldr	x0, [sp, #136]
    57f4:	cmp	x0, #0x0
    57f8:	b.ne	5820 <PyThread_acquire_lock@plt+0x2e60>  // b.any
    57fc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5800:	ldr	x0, [x0, #3984]
    5804:	ldr	x2, [x0]
    5808:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    580c:	add	x1, x0, #0x6e8
    5810:	mov	x0, x2
    5814:	bl	2920 <PyErr_SetString@plt>
    5818:	mov	x0, #0x0                   	// #0
    581c:	b	5924 <PyThread_acquire_lock@plt+0x2f64>
    5820:	ldr	x0, [sp, #32]
    5824:	ldr	x1, [x0, #16]
    5828:	mov	x0, #0x7fffffff            	// #2147483647
    582c:	cmp	x1, x0
    5830:	b.le	5858 <PyThread_acquire_lock@plt+0x2e98>
    5834:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5838:	ldr	x0, [x0, #4064]
    583c:	ldr	x2, [x0]
    5840:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5844:	add	x1, x0, #0x940
    5848:	mov	x0, x2
    584c:	bl	2920 <PyErr_SetString@plt>
    5850:	mov	x0, #0x0                   	// #0
    5854:	b	5924 <PyThread_acquire_lock@plt+0x2f64>
    5858:	ldr	x0, [sp, #24]
    585c:	ldr	x1, [x0, #16]
    5860:	mov	x0, #0x7fffffff            	// #2147483647
    5864:	cmp	x1, x0
    5868:	b.le	5890 <PyThread_acquire_lock@plt+0x2ed0>
    586c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5870:	ldr	x0, [x0, #4064]
    5874:	ldr	x2, [x0]
    5878:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    587c:	add	x1, x0, #0x958
    5880:	mov	x0, x2
    5884:	bl	2920 <PyErr_SetString@plt>
    5888:	mov	x0, #0x0                   	// #0
    588c:	b	5924 <PyThread_acquire_lock@plt+0x2f64>
    5890:	bl	27b0 <PyEval_SaveThread@plt>
    5894:	str	x0, [sp, #128]
    5898:	ldr	x0, [sp, #32]
    589c:	ldr	x1, [x0]
    58a0:	ldr	x0, [sp, #32]
    58a4:	ldr	x0, [x0, #16]
    58a8:	mov	w7, w0
    58ac:	ldr	x0, [sp, #24]
    58b0:	ldr	x2, [x0]
    58b4:	ldr	x0, [sp, #24]
    58b8:	ldr	x0, [x0, #16]
    58bc:	sxtw	x0, w0
    58c0:	add	x4, sp, #0x34
    58c4:	add	x3, sp, #0x38
    58c8:	mov	x6, x4
    58cc:	mov	x5, x3
    58d0:	mov	x4, x0
    58d4:	mov	x3, x2
    58d8:	mov	w2, w7
    58dc:	ldr	x0, [sp, #136]
    58e0:	bl	2860 <HMAC@plt>
    58e4:	str	x0, [sp, #120]
    58e8:	ldr	x0, [sp, #128]
    58ec:	bl	2770 <PyEval_RestoreThread@plt>
    58f0:	ldr	x0, [sp, #120]
    58f4:	cmp	x0, #0x0
    58f8:	b.ne	5914 <PyThread_acquire_lock@plt+0x2f54>  // b.any
    58fc:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x115c0>
    5900:	ldr	x0, [x0, #3984]
    5904:	ldr	x0, [x0]
    5908:	bl	3f9c <PyThread_acquire_lock@plt+0x15dc>
    590c:	mov	x0, #0x0                   	// #0
    5910:	b	5924 <PyThread_acquire_lock@plt+0x2f64>
    5914:	ldr	w0, [sp, #52]
    5918:	mov	w1, w0
    591c:	add	x0, sp, #0x38
    5920:	bl	2870 <PyBytes_FromStringAndSize@plt>
    5924:	ldp	x29, x30, [sp], #144
    5928:	ret
    592c:	stp	x29, x30, [sp, #-64]!
    5930:	mov	x29, sp
    5934:	str	x0, [sp, #40]
    5938:	str	x1, [sp, #32]
    593c:	str	x2, [sp, #24]
    5940:	str	x3, [sp, #16]
    5944:	ldr	x0, [sp, #16]
    5948:	str	x0, [sp, #56]
    594c:	ldr	x0, [sp, #40]
    5950:	cmp	x0, #0x0
    5954:	b.eq	59bc <PyThread_acquire_lock@plt+0x2ffc>  // b.none
    5958:	ldr	x0, [sp, #40]
    595c:	bl	4074 <PyThread_acquire_lock@plt+0x16b4>
    5960:	str	x0, [sp, #48]
    5964:	ldr	x0, [sp, #48]
    5968:	cmp	x0, #0x0
    596c:	b.ne	5980 <PyThread_acquire_lock@plt+0x2fc0>  // b.any
    5970:	ldr	x0, [sp, #56]
    5974:	mov	w1, #0x1                   	// #1
    5978:	str	w1, [x0, #8]
    597c:	b	59c0 <PyThread_acquire_lock@plt+0x3000>
    5980:	ldr	x0, [sp, #56]
    5984:	ldr	x0, [x0]
    5988:	ldr	x1, [sp, #48]
    598c:	bl	2850 <PySet_Add@plt>
    5990:	cmp	w0, #0x0
    5994:	b.eq	59a4 <PyThread_acquire_lock@plt+0x2fe4>  // b.none
    5998:	ldr	x0, [sp, #56]
    599c:	mov	w1, #0x1                   	// #1
    59a0:	str	w1, [x0, #8]
    59a4:	ldr	x2, [sp, #48]
    59a8:	mov	w1, #0x417                 	// #1047
    59ac:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    59b0:	add	x0, x0, #0x3e8
    59b4:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    59b8:	b	59c0 <PyThread_acquire_lock@plt+0x3000>
    59bc:	nop
    59c0:	ldp	x29, x30, [sp], #64
    59c4:	ret
    59c8:	stp	x29, x30, [sp, #-32]!
    59cc:	mov	x29, sp
    59d0:	mov	x0, #0x0                   	// #0
    59d4:	bl	27a0 <PyFrozenSet_New@plt>
    59d8:	str	x0, [sp, #16]
    59dc:	ldr	x0, [sp, #16]
    59e0:	cmp	x0, #0x0
    59e4:	b.ne	59f0 <PyThread_acquire_lock@plt+0x3030>  // b.any
    59e8:	mov	x0, #0x0                   	// #0
    59ec:	b	5a38 <PyThread_acquire_lock@plt+0x3078>
    59f0:	str	wzr, [sp, #24]
    59f4:	add	x0, sp, #0x10
    59f8:	mov	x1, x0
    59fc:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    5a00:	add	x0, x0, #0x92c
    5a04:	bl	2710 <EVP_MD_do_all@plt>
    5a08:	ldr	w0, [sp, #24]
    5a0c:	cmp	w0, #0x0
    5a10:	b.eq	5a34 <PyThread_acquire_lock@plt+0x3074>  // b.none
    5a14:	ldr	x0, [sp, #16]
    5a18:	mov	x2, x0
    5a1c:	mov	w1, #0x429                 	// #1065
    5a20:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5a24:	add	x0, x0, #0x3e8
    5a28:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    5a2c:	mov	x0, #0x0                   	// #0
    5a30:	b	5a38 <PyThread_acquire_lock@plt+0x3078>
    5a34:	ldr	x0, [sp, #16]
    5a38:	ldp	x29, x30, [sp], #32
    5a3c:	ret

0000000000005a40 <PyInit__hashlib@@Base>:
    5a40:	stp	x29, x30, [sp, #-32]!
    5a44:	mov	x29, sp
    5a48:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    5a4c:	add	x0, x0, #0x260
    5a50:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x115c0>
    5a54:	ldr	x1, [x1, #4048]
    5a58:	str	x1, [x0, #8]
    5a5c:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    5a60:	add	x0, x0, #0x260
    5a64:	bl	25a0 <PyType_Ready@plt>
    5a68:	cmp	w0, #0x0
    5a6c:	b.ge	5a78 <PyInit__hashlib@@Base+0x38>  // b.tcont
    5a70:	mov	x0, #0x0                   	// #0
    5a74:	b	5b30 <PyInit__hashlib@@Base+0xf0>
    5a78:	mov	w1, #0x3f5                 	// #1013
    5a7c:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    5a80:	add	x0, x0, #0x6a0
    5a84:	bl	2910 <PyModule_Create2@plt>
    5a88:	str	x0, [sp, #24]
    5a8c:	ldr	x0, [sp, #24]
    5a90:	cmp	x0, #0x0
    5a94:	b.ne	5aa0 <PyInit__hashlib@@Base+0x60>  // b.any
    5a98:	mov	x0, #0x0                   	// #0
    5a9c:	b	5b30 <PyInit__hashlib@@Base+0xf0>
    5aa0:	bl	59c8 <PyThread_acquire_lock@plt+0x3008>
    5aa4:	str	x0, [sp, #16]
    5aa8:	ldr	x0, [sp, #16]
    5aac:	cmp	x0, #0x0
    5ab0:	b.ne	5ad0 <PyInit__hashlib@@Base+0x90>  // b.any
    5ab4:	ldr	x2, [sp, #24]
    5ab8:	mov	w1, #0x469                 	// #1129
    5abc:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5ac0:	add	x0, x0, #0x3e8
    5ac4:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    5ac8:	mov	x0, #0x0                   	// #0
    5acc:	b	5b30 <PyInit__hashlib@@Base+0xf0>
    5ad0:	ldr	x2, [sp, #16]
    5ad4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5ad8:	add	x1, x0, #0x9e8
    5adc:	ldr	x0, [sp, #24]
    5ae0:	bl	2520 <PyModule_AddObject@plt>
    5ae4:	cmp	w0, #0x0
    5ae8:	b.eq	5b08 <PyInit__hashlib@@Base+0xc8>  // b.none
    5aec:	ldr	x2, [sp, #24]
    5af0:	mov	w1, #0x46d                 	// #1133
    5af4:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5af8:	add	x0, x0, #0x3e8
    5afc:	bl	2b88 <PyThread_acquire_lock@plt+0x1c8>
    5b00:	mov	x0, #0x0                   	// #0
    5b04:	b	5b30 <PyInit__hashlib@@Base+0xf0>
    5b08:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    5b0c:	add	x0, x0, #0x260
    5b10:	bl	2b60 <PyThread_acquire_lock@plt+0x1a0>
    5b14:	adrp	x0, 18000 <PyInit__hashlib@@Base+0x125c0>
    5b18:	add	x2, x0, #0x260
    5b1c:	adrp	x0, 6000 <PyInit__hashlib@@Base+0x5c0>
    5b20:	add	x1, x0, #0xa00
    5b24:	ldr	x0, [sp, #24]
    5b28:	bl	2520 <PyModule_AddObject@plt>
    5b2c:	ldr	x0, [sp, #24]
    5b30:	ldp	x29, x30, [sp], #32
    5b34:	ret

Disassembly of section .fini:

0000000000005b38 <.fini>:
    5b38:	stp	x29, x30, [sp, #-16]!
    5b3c:	mov	x29, sp
    5b40:	ldp	x29, x30, [sp], #16
    5b44:	ret
