
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//lzopio.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
       0:	sub	sp, sp, #0x10
       4:	strh	w0, [sp, #14]
       8:	ldrh	w0, [sp, #14]
       c:	lsl	w0, w0, #8
      10:	sxth	w1, w0
      14:	ldrh	w0, [sp, #14]
      18:	lsr	w0, w0, #8
      1c:	and	w0, w0, #0xffff
      20:	sxth	w0, w0
      24:	orr	w0, w1, w0
      28:	sxth	w0, w0
      2c:	and	w0, w0, #0xffff
      30:	add	sp, sp, #0x10
      34:	ret

0000000000000038 <grub_swap_bytes32>:
      38:	sub	sp, sp, #0x10
      3c:	str	w0, [sp, #12]
      40:	ldr	w0, [sp, #12]
      44:	rev	w0, w0
      48:	add	sp, sp, #0x10
      4c:	ret

0000000000000050 <grub_file_filter_register>:
      50:	sub	sp, sp, #0x10
      54:	str	w0, [sp, #12]
      58:	str	x1, [sp]
      5c:	adrp	x0, 0 <grub_swap_bytes16>
      60:	add	x0, x0, #0x0
      64:	ldr	x0, [x0]
      68:	ldr	w1, [sp, #12]
      6c:	ldr	x2, [sp]
      70:	str	x2, [x0, x1, lsl #3]
      74:	nop
      78:	add	sp, sp, #0x10
      7c:	ret
	...

0000000000000088 <grub_file_filter_unregister>:
      88:	sub	sp, sp, #0x10
      8c:	str	w0, [sp, #12]
      90:	adrp	x0, 0 <grub_swap_bytes16>
      94:	add	x0, x0, #0x0
      98:	ldr	x0, [x0]
      9c:	ldr	w1, [sp, #12]
      a0:	str	xzr, [x0, x1, lsl #3]
      a4:	nop
      a8:	add	sp, sp, #0x10
      ac:	ret
	...

00000000000000b8 <grub_file_size>:
      b8:	sub	sp, sp, #0x10
      bc:	str	x0, [sp, #8]
      c0:	ldr	x0, [sp, #8]
      c4:	ldr	x0, [x0, #64]
      c8:	add	sp, sp, #0x10
      cc:	ret

00000000000000d0 <grub_file_tell>:
      d0:	sub	sp, sp, #0x10
      d4:	str	x0, [sp, #8]
      d8:	ldr	x0, [sp, #8]
      dc:	ldr	x0, [x0, #24]
      e0:	add	sp, sp, #0x10
      e4:	ret

00000000000000e8 <grub_memcpy>:
      e8:	stp	x29, x30, [sp, #-48]!
      ec:	mov	x29, sp
      f0:	str	x0, [sp, #40]
      f4:	str	x1, [sp, #32]
      f8:	str	x2, [sp, #24]
      fc:	ldr	x2, [sp, #24]
     100:	ldr	x1, [sp, #32]
     104:	ldr	x0, [sp, #40]
     108:	bl	0 <grub_memmove>
     10c:	ldp	x29, x30, [sp], #48
     110:	ret

0000000000000114 <read_block_header>:
     114:	stp	x29, x30, [sp, #-48]!
     118:	mov	x29, sp
     11c:	str	x19, [sp, #16]
     120:	str	x0, [sp, #40]
     124:	ldr	x0, [sp, #40]
     128:	ldr	x1, [x0, #32]
     12c:	ldr	x0, [sp, #40]
     130:	ldr	w0, [x0, #48]
     134:	mov	w0, w0
     138:	add	x1, x1, x0
     13c:	ldr	x0, [sp, #40]
     140:	str	x1, [x0, #32]
     144:	ldr	x0, [sp, #40]
     148:	ldr	x0, [x0, #72]
     14c:	bl	0 <grub_free>
     150:	ldr	x0, [sp, #40]
     154:	ldr	x0, [x0, #64]
     158:	bl	0 <grub_free>
     15c:	ldr	x0, [sp, #40]
     160:	str	xzr, [x0, #72]
     164:	ldr	x0, [sp, #40]
     168:	str	xzr, [x0, #64]
     16c:	ldr	x0, [sp, #40]
     170:	ldr	x3, [x0]
     174:	ldr	x0, [sp, #40]
     178:	add	x0, x0, #0x30
     17c:	mov	x2, #0x4                   	// #4
     180:	mov	x1, x0
     184:	mov	x0, x3
     188:	bl	0 <grub_file_read>
     18c:	cmp	x0, #0x4
     190:	b.eq	19c <read_block_header+0x88>  // b.none
     194:	mov	w0, #0xffffffff            	// #-1
     198:	b	330 <read_block_header+0x21c>
     19c:	ldr	x0, [sp, #40]
     1a0:	ldr	w0, [x0, #48]
     1a4:	bl	38 <grub_swap_bytes32>
     1a8:	mov	w1, w0
     1ac:	ldr	x0, [sp, #40]
     1b0:	str	w1, [x0, #48]
     1b4:	ldr	x0, [sp, #40]
     1b8:	ldr	w0, [x0, #48]
     1bc:	cmp	w0, #0x0
     1c0:	b.ne	1f8 <read_block_header+0xe4>  // b.any
     1c4:	ldr	x0, [sp, #40]
     1c8:	ldr	x0, [x0]
     1cc:	bl	d0 <grub_file_tell>
     1d0:	mov	x19, x0
     1d4:	ldr	x0, [sp, #40]
     1d8:	ldr	x0, [x0]
     1dc:	bl	b8 <grub_file_size>
     1e0:	cmp	x19, x0
     1e4:	b.ne	1f0 <read_block_header+0xdc>  // b.any
     1e8:	mov	w0, #0x0                   	// #0
     1ec:	b	330 <read_block_header+0x21c>
     1f0:	mov	w0, #0xffffffff            	// #-1
     1f4:	b	330 <read_block_header+0x21c>
     1f8:	ldr	x0, [sp, #40]
     1fc:	ldr	x3, [x0]
     200:	ldr	x0, [sp, #40]
     204:	add	x0, x0, #0x34
     208:	mov	x2, #0x4                   	// #4
     20c:	mov	x1, x0
     210:	mov	x0, x3
     214:	bl	0 <grub_file_read>
     218:	cmp	x0, #0x4
     21c:	b.eq	228 <read_block_header+0x114>  // b.none
     220:	mov	w0, #0xffffffff            	// #-1
     224:	b	330 <read_block_header+0x21c>
     228:	ldr	x0, [sp, #40]
     22c:	ldr	w0, [x0, #52]
     230:	bl	38 <grub_swap_bytes32>
     234:	mov	w1, w0
     238:	ldr	x0, [sp, #40]
     23c:	str	w1, [x0, #52]
     240:	ldr	x0, [sp, #40]
     244:	ldr	w1, [x0, #52]
     248:	ldr	x0, [sp, #40]
     24c:	ldr	w0, [x0, #48]
     250:	cmp	w1, w0
     254:	b.ls	260 <read_block_header+0x14c>  // b.plast
     258:	mov	w0, #0xffffffff            	// #-1
     25c:	b	330 <read_block_header+0x21c>
     260:	ldr	x0, [sp, #40]
     264:	ldr	w0, [x0, #12]
     268:	cmp	w0, #0x0
     26c:	b.eq	2b0 <read_block_header+0x19c>  // b.none
     270:	ldr	x0, [sp, #40]
     274:	ldr	x3, [x0]
     278:	ldr	x0, [sp, #40]
     27c:	add	x0, x0, #0x38
     280:	mov	x2, #0x4                   	// #4
     284:	mov	x1, x0
     288:	mov	x0, x3
     28c:	bl	0 <grub_file_read>
     290:	cmp	x0, #0x4
     294:	b.eq	2a0 <read_block_header+0x18c>  // b.none
     298:	mov	w0, #0xffffffff            	// #-1
     29c:	b	330 <read_block_header+0x21c>
     2a0:	ldr	x0, [sp, #40]
     2a4:	ldr	w1, [x0, #56]
     2a8:	ldr	x0, [sp, #40]
     2ac:	str	w1, [x0, #56]
     2b0:	ldr	x0, [sp, #40]
     2b4:	ldr	w0, [x0, #8]
     2b8:	cmp	w0, #0x0
     2bc:	b.eq	32c <read_block_header+0x218>  // b.none
     2c0:	ldr	x0, [sp, #40]
     2c4:	ldr	w1, [x0, #52]
     2c8:	ldr	x0, [sp, #40]
     2cc:	ldr	w0, [x0, #48]
     2d0:	cmp	w1, w0
     2d4:	b.ne	2ec <read_block_header+0x1d8>  // b.any
     2d8:	ldr	x0, [sp, #40]
     2dc:	ldr	w1, [x0, #56]
     2e0:	ldr	x0, [sp, #40]
     2e4:	str	w1, [x0, #60]
     2e8:	b	32c <read_block_header+0x218>
     2ec:	ldr	x0, [sp, #40]
     2f0:	ldr	x3, [x0]
     2f4:	ldr	x0, [sp, #40]
     2f8:	add	x0, x0, #0x3c
     2fc:	mov	x2, #0x4                   	// #4
     300:	mov	x1, x0
     304:	mov	x0, x3
     308:	bl	0 <grub_file_read>
     30c:	cmp	x0, #0x4
     310:	b.eq	31c <read_block_header+0x208>  // b.none
     314:	mov	w0, #0xffffffff            	// #-1
     318:	b	330 <read_block_header+0x21c>
     31c:	ldr	x0, [sp, #40]
     320:	ldr	w1, [x0, #60]
     324:	ldr	x0, [sp, #40]
     328:	str	w1, [x0, #60]
     32c:	mov	w0, #0x0                   	// #0
     330:	ldr	x19, [sp, #16]
     334:	ldp	x29, x30, [sp], #48
     338:	ret

000000000000033c <read_block_data>:
     33c:	stp	x29, x30, [sp, #-96]!
     340:	mov	x29, sp
     344:	str	x0, [sp, #24]
     348:	ldr	x0, [sp, #24]
     34c:	ldr	w0, [x0, #52]
     350:	mov	w0, w0
     354:	bl	0 <grub_malloc>
     358:	mov	x1, x0
     35c:	ldr	x0, [sp, #24]
     360:	str	x1, [x0, #64]
     364:	ldr	x0, [sp, #24]
     368:	ldr	x0, [x0, #64]
     36c:	cmp	x0, #0x0
     370:	b.ne	37c <read_block_data+0x40>  // b.any
     374:	mov	w0, #0xffffffff            	// #-1
     378:	b	44c <read_block_data+0x110>
     37c:	ldr	x0, [sp, #24]
     380:	ldr	x3, [x0]
     384:	ldr	x0, [sp, #24]
     388:	ldr	x1, [x0, #64]
     38c:	ldr	x0, [sp, #24]
     390:	ldr	w0, [x0, #52]
     394:	mov	w0, w0
     398:	mov	x2, x0
     39c:	mov	x0, x3
     3a0:	bl	0 <grub_file_read>
     3a4:	mov	x1, x0
     3a8:	ldr	x0, [sp, #24]
     3ac:	ldr	w0, [x0, #52]
     3b0:	mov	w0, w0
     3b4:	cmp	x1, x0
     3b8:	b.eq	3c4 <read_block_data+0x88>  // b.none
     3bc:	mov	w0, #0xffffffff            	// #-1
     3c0:	b	44c <read_block_data+0x110>
     3c4:	ldr	x0, [sp, #24]
     3c8:	ldr	x0, [x0, #24]
     3cc:	cmp	x0, #0x0
     3d0:	b.eq	448 <read_block_data+0x10c>  // b.none
     3d4:	ldr	x0, [sp, #24]
     3d8:	ldr	x0, [x0, #24]
     3dc:	ldr	x0, [x0, #32]
     3e0:	cmp	x0, #0x40
     3e4:	b.ls	3f0 <read_block_data+0xb4>  // b.plast
     3e8:	mov	w0, #0xffffffff            	// #-1
     3ec:	b	44c <read_block_data+0x110>
     3f0:	ldr	x0, [sp, #24]
     3f4:	ldr	x4, [x0, #24]
     3f8:	ldr	x0, [sp, #24]
     3fc:	ldr	x1, [x0, #64]
     400:	ldr	x0, [sp, #24]
     404:	ldr	w0, [x0, #52]
     408:	mov	w2, w0
     40c:	add	x0, sp, #0x20
     410:	mov	x3, x2
     414:	mov	x2, x1
     418:	mov	x1, x0
     41c:	mov	x0, x4
     420:	bl	0 <grub_crypto_hash>
     424:	ldr	x0, [sp, #24]
     428:	add	x1, x0, #0x3c
     42c:	add	x0, sp, #0x20
     430:	mov	x2, #0x4                   	// #4
     434:	bl	0 <grub_memcmp>
     438:	cmp	w0, #0x0
     43c:	b.eq	448 <read_block_data+0x10c>  // b.none
     440:	mov	w0, #0xffffffff            	// #-1
     444:	b	44c <read_block_data+0x110>
     448:	mov	w0, #0x0                   	// #0
     44c:	ldp	x29, x30, [sp], #96
     450:	ret

0000000000000454 <uncompress_block>:
     454:	stp	x29, x30, [sp, #-112]!
     458:	mov	x29, sp
     45c:	str	x0, [sp, #24]
     460:	ldr	x0, [sp, #24]
     464:	ldr	w0, [x0, #48]
     468:	mov	w0, w0
     46c:	str	x0, [sp, #104]
     470:	ldr	x0, [sp, #24]
     474:	bl	33c <read_block_data>
     478:	cmp	w0, #0x0
     47c:	b.ge	488 <uncompress_block+0x34>  // b.tcont
     480:	mov	w0, #0xffffffff            	// #-1
     484:	b	5d0 <uncompress_block+0x17c>
     488:	ldr	x0, [sp, #24]
     48c:	ldr	w1, [x0, #52]
     490:	ldr	x0, [sp, #24]
     494:	ldr	w0, [x0, #48]
     498:	cmp	w1, w0
     49c:	b.ne	4bc <uncompress_block+0x68>  // b.any
     4a0:	ldr	x0, [sp, #24]
     4a4:	ldr	x1, [x0, #64]
     4a8:	ldr	x0, [sp, #24]
     4ac:	str	x1, [x0, #72]
     4b0:	ldr	x0, [sp, #24]
     4b4:	str	xzr, [x0, #64]
     4b8:	b	5cc <uncompress_block+0x178>
     4bc:	ldr	x0, [sp, #24]
     4c0:	ldr	w0, [x0, #48]
     4c4:	mov	w0, w0
     4c8:	bl	0 <grub_malloc>
     4cc:	mov	x1, x0
     4d0:	ldr	x0, [sp, #24]
     4d4:	str	x1, [x0, #72]
     4d8:	ldr	x0, [sp, #24]
     4dc:	ldr	x0, [x0, #72]
     4e0:	cmp	x0, #0x0
     4e4:	b.ne	4f0 <uncompress_block+0x9c>  // b.any
     4e8:	mov	w0, #0xffffffff            	// #-1
     4ec:	b	5d0 <uncompress_block+0x17c>
     4f0:	ldr	x0, [sp, #24]
     4f4:	ldr	x5, [x0, #64]
     4f8:	ldr	x0, [sp, #24]
     4fc:	ldr	w0, [x0, #52]
     500:	mov	w1, w0
     504:	ldr	x0, [sp, #24]
     508:	ldr	x0, [x0, #72]
     50c:	add	x2, sp, #0x68
     510:	mov	x4, #0x0                   	// #0
     514:	mov	x3, x2
     518:	mov	x2, x0
     51c:	mov	x0, x5
     520:	bl	f48 <lzo1x_decompress_safe>
     524:	cmp	w0, #0x0
     528:	b.eq	534 <uncompress_block+0xe0>  // b.none
     52c:	mov	w0, #0xffffffff            	// #-1
     530:	b	5d0 <uncompress_block+0x17c>
     534:	ldr	x0, [sp, #24]
     538:	ldr	x0, [x0, #16]
     53c:	cmp	x0, #0x0
     540:	b.eq	5b8 <uncompress_block+0x164>  // b.none
     544:	ldr	x0, [sp, #24]
     548:	ldr	x0, [x0, #16]
     54c:	ldr	x0, [x0, #32]
     550:	cmp	x0, #0x40
     554:	b.ls	560 <uncompress_block+0x10c>  // b.plast
     558:	mov	w0, #0xffffffff            	// #-1
     55c:	b	5d0 <uncompress_block+0x17c>
     560:	ldr	x0, [sp, #24]
     564:	ldr	x4, [x0, #16]
     568:	ldr	x0, [sp, #24]
     56c:	ldr	x1, [x0, #72]
     570:	ldr	x0, [sp, #24]
     574:	ldr	w0, [x0, #48]
     578:	mov	w2, w0
     57c:	add	x0, sp, #0x28
     580:	mov	x3, x2
     584:	mov	x2, x1
     588:	mov	x1, x0
     58c:	mov	x0, x4
     590:	bl	0 <grub_crypto_hash>
     594:	ldr	x0, [sp, #24]
     598:	add	x1, x0, #0x38
     59c:	add	x0, sp, #0x28
     5a0:	mov	x2, #0x4                   	// #4
     5a4:	bl	0 <grub_memcmp>
     5a8:	cmp	w0, #0x0
     5ac:	b.eq	5b8 <uncompress_block+0x164>  // b.none
     5b0:	mov	w0, #0xffffffff            	// #-1
     5b4:	b	5d0 <uncompress_block+0x17c>
     5b8:	ldr	x0, [sp, #24]
     5bc:	ldr	x0, [x0, #64]
     5c0:	bl	0 <grub_free>
     5c4:	ldr	x0, [sp, #24]
     5c8:	str	xzr, [x0, #64]
     5cc:	mov	w0, #0x0                   	// #0
     5d0:	ldp	x29, x30, [sp], #112
     5d4:	ret

00000000000005d8 <jump_block>:
     5d8:	stp	x29, x30, [sp, #-48]!
     5dc:	mov	x29, sp
     5e0:	str	x0, [sp, #24]
     5e4:	ldr	x0, [sp, #24]
     5e8:	ldr	x0, [x0, #72]
     5ec:	cmp	x0, #0x0
     5f0:	b.ne	638 <jump_block+0x60>  // b.any
     5f4:	ldr	x0, [sp, #24]
     5f8:	ldr	x0, [x0]
     5fc:	bl	d0 <grub_file_tell>
     600:	mov	x1, x0
     604:	ldr	x0, [sp, #24]
     608:	ldr	w0, [x0, #52]
     60c:	mov	w0, w0
     610:	add	x0, x1, x0
     614:	str	x0, [sp, #40]
     618:	ldr	x0, [sp, #24]
     61c:	ldr	x0, [x0]
     620:	ldr	x1, [sp, #40]
     624:	bl	0 <grub_file_seek>
     628:	cmn	x0, #0x1
     62c:	b.ne	638 <jump_block+0x60>  // b.any
     630:	mov	w0, #0xffffffff            	// #-1
     634:	b	640 <jump_block+0x68>
     638:	ldr	x0, [sp, #24]
     63c:	bl	114 <read_block_header>
     640:	ldp	x29, x30, [sp], #48
     644:	ret

0000000000000648 <calculate_uncompressed_size>:
     648:	stp	x29, x30, [sp, #-48]!
     64c:	mov	x29, sp
     650:	str	x0, [sp, #24]
     654:	ldr	x0, [sp, #24]
     658:	ldr	x0, [x0, #80]
     65c:	str	x0, [sp, #32]
     660:	str	xzr, [sp, #40]
     664:	ldr	x0, [sp, #32]
     668:	bl	114 <read_block_header>
     66c:	cmp	w0, #0x0
     670:	b.ge	6ac <calculate_uncompressed_size+0x64>  // b.tcont
     674:	mov	w0, #0xffffffff            	// #-1
     678:	b	6cc <calculate_uncompressed_size+0x84>
     67c:	ldr	x0, [sp, #32]
     680:	ldr	w0, [x0, #48]
     684:	mov	w0, w0
     688:	ldr	x1, [sp, #40]
     68c:	add	x0, x1, x0
     690:	str	x0, [sp, #40]
     694:	ldr	x0, [sp, #32]
     698:	bl	5d8 <jump_block>
     69c:	cmp	w0, #0x0
     6a0:	b.ge	6ac <calculate_uncompressed_size+0x64>  // b.tcont
     6a4:	mov	w0, #0xffffffff            	// #-1
     6a8:	b	6cc <calculate_uncompressed_size+0x84>
     6ac:	ldr	x0, [sp, #32]
     6b0:	ldr	w0, [x0, #48]
     6b4:	cmp	w0, #0x0
     6b8:	b.ne	67c <calculate_uncompressed_size+0x34>  // b.any
     6bc:	ldr	x0, [sp, #24]
     6c0:	ldr	x1, [sp, #40]
     6c4:	str	x1, [x0, #64]
     6c8:	mov	w0, #0x0                   	// #0
     6cc:	ldp	x29, x30, [sp], #48
     6d0:	ret

00000000000006d4 <test_header>:
     6d4:	stp	x29, x30, [sp, #-112]!
     6d8:	mov	x29, sp
     6dc:	str	x0, [sp, #24]
     6e0:	ldr	x0, [sp, #24]
     6e4:	ldr	x0, [x0, #80]
     6e8:	str	x0, [sp, #88]
     6ec:	str	xzr, [sp, #96]
     6f0:	str	xzr, [sp, #80]
     6f4:	ldr	x0, [sp, #88]
     6f8:	ldr	x0, [x0]
     6fc:	add	x1, sp, #0x28
     700:	mov	x2, #0x22                  	// #34
     704:	bl	0 <grub_file_read>
     708:	cmp	x0, #0x22
     70c:	b.eq	718 <test_header+0x44>  // b.none
     710:	mov	w0, #0x0                   	// #0
     714:	b	aa8 <test_header+0x3d4>
     718:	add	x3, sp, #0x28
     71c:	mov	x2, #0x9                   	// #9
     720:	adrp	x0, 0 <grub_swap_bytes16>
     724:	add	x0, x0, #0x0
     728:	ldr	x1, [x0]
     72c:	mov	x0, x3
     730:	bl	0 <grub_memcmp>
     734:	cmp	w0, #0x0
     738:	b.eq	744 <test_header+0x70>  // b.none
     73c:	mov	w0, #0x0                   	// #0
     740:	b	aa8 <test_header+0x3d4>
     744:	ldurh	w0, [sp, #51]
     748:	bl	0 <grub_swap_bytes16>
     74c:	and	w0, w0, #0xffff
     750:	cmp	w0, #0x93f
     754:	b.hi	760 <test_header+0x8c>  // b.pmore
     758:	mov	w0, #0x0                   	// #0
     75c:	b	aa8 <test_header+0x3d4>
     760:	ldurh	w0, [sp, #53]
     764:	bl	0 <grub_swap_bytes16>
     768:	and	w1, w0, #0xffff
     76c:	mov	w0, #0x2050                	// #8272
     770:	cmp	w1, w0
     774:	b.ls	780 <test_header+0xac>  // b.plast
     778:	mov	w0, #0x0                   	// #0
     77c:	b	aa8 <test_header+0x3d4>
     780:	ldur	w0, [sp, #57]
     784:	bl	38 <grub_swap_bytes32>
     788:	str	w0, [sp, #76]
     78c:	ldr	w0, [sp, #76]
     790:	and	x0, x0, #0x100
     794:	cmp	x0, #0x0
     798:	b.eq	7c8 <test_header+0xf4>  // b.none
     79c:	ldr	x0, [sp, #88]
     7a0:	mov	w1, #0x1                   	// #1
     7a4:	str	w1, [x0, #12]
     7a8:	adrp	x0, 0 <grub_swap_bytes16>
     7ac:	add	x0, x0, #0x0
     7b0:	ldr	x0, [x0]
     7b4:	bl	0 <grub_crypto_lookup_md_by_name>
     7b8:	mov	x1, x0
     7bc:	ldr	x0, [sp, #88]
     7c0:	str	x1, [x0, #16]
     7c4:	b	800 <test_header+0x12c>
     7c8:	ldr	w0, [sp, #76]
     7cc:	and	x0, x0, #0x1
     7d0:	cmp	x0, #0x0
     7d4:	b.eq	800 <test_header+0x12c>  // b.none
     7d8:	ldr	x0, [sp, #88]
     7dc:	mov	w1, #0x1                   	// #1
     7e0:	str	w1, [x0, #12]
     7e4:	adrp	x0, 0 <grub_swap_bytes16>
     7e8:	add	x0, x0, #0x0
     7ec:	ldr	x0, [x0]
     7f0:	bl	0 <grub_crypto_lookup_md_by_name>
     7f4:	mov	x1, x0
     7f8:	ldr	x0, [sp, #88]
     7fc:	str	x1, [x0, #16]
     800:	ldr	w0, [sp, #76]
     804:	and	x0, x0, #0x200
     808:	cmp	x0, #0x0
     80c:	b.eq	83c <test_header+0x168>  // b.none
     810:	ldr	x0, [sp, #88]
     814:	mov	w1, #0x1                   	// #1
     818:	str	w1, [x0, #8]
     81c:	adrp	x0, 0 <grub_swap_bytes16>
     820:	add	x0, x0, #0x0
     824:	ldr	x0, [x0]
     828:	bl	0 <grub_crypto_lookup_md_by_name>
     82c:	mov	x1, x0
     830:	ldr	x0, [sp, #88]
     834:	str	x1, [x0, #24]
     838:	b	874 <test_header+0x1a0>
     83c:	ldr	w0, [sp, #76]
     840:	and	x0, x0, #0x2
     844:	cmp	x0, #0x0
     848:	b.eq	874 <test_header+0x1a0>  // b.none
     84c:	ldr	x0, [sp, #88]
     850:	mov	w1, #0x1                   	// #1
     854:	str	w1, [x0, #8]
     858:	adrp	x0, 0 <grub_swap_bytes16>
     85c:	add	x0, x0, #0x0
     860:	ldr	x0, [x0]
     864:	bl	0 <grub_crypto_lookup_md_by_name>
     868:	mov	x1, x0
     86c:	ldr	x0, [sp, #88]
     870:	str	x1, [x0, #24]
     874:	ldr	w0, [sp, #76]
     878:	and	x0, x0, #0x1000
     87c:	cmp	x0, #0x0
     880:	b.eq	89c <test_header+0x1c8>  // b.none
     884:	adrp	x0, 0 <grub_swap_bytes16>
     888:	add	x0, x0, #0x0
     88c:	ldr	x0, [x0]
     890:	bl	0 <grub_crypto_lookup_md_by_name>
     894:	str	x0, [sp, #104]
     898:	b	8b0 <test_header+0x1dc>
     89c:	adrp	x0, 0 <grub_swap_bytes16>
     8a0:	add	x0, x0, #0x0
     8a4:	ldr	x0, [x0]
     8a8:	bl	0 <grub_crypto_lookup_md_by_name>
     8ac:	str	x0, [sp, #104]
     8b0:	ldr	x0, [sp, #104]
     8b4:	cmp	x0, #0x0
     8b8:	b.eq	910 <test_header+0x23c>  // b.none
     8bc:	ldr	x0, [sp, #104]
     8c0:	ldr	x0, [x0, #72]
     8c4:	bl	0 <grub_malloc>
     8c8:	str	x0, [sp, #96]
     8cc:	ldr	x0, [sp, #96]
     8d0:	cmp	x0, #0x0
     8d4:	b.ne	8e0 <test_header+0x20c>  // b.any
     8d8:	mov	w0, #0x0                   	// #0
     8dc:	b	aa8 <test_header+0x3d4>
     8e0:	ldr	x0, [sp, #104]
     8e4:	ldr	x1, [x0, #40]
     8e8:	ldr	x0, [sp, #96]
     8ec:	blr	x1
     8f0:	ldr	x0, [sp, #104]
     8f4:	ldr	x3, [x0, #48]
     8f8:	add	x0, sp, #0x28
     8fc:	add	x0, x0, #0x9
     900:	mov	x2, #0x19                  	// #25
     904:	mov	x1, x0
     908:	ldr	x0, [sp, #96]
     90c:	blr	x3
     910:	ldrb	w0, [sp, #73]
     914:	cmp	w0, #0x0
     918:	b.eq	9b8 <test_header+0x2e4>  // b.none
     91c:	ldrb	w0, [sp, #73]
     920:	and	x0, x0, #0xff
     924:	bl	0 <grub_malloc>
     928:	str	x0, [sp, #80]
     92c:	ldr	x0, [sp, #80]
     930:	cmp	x0, #0x0
     934:	b.ne	948 <test_header+0x274>  // b.any
     938:	ldr	x0, [sp, #96]
     93c:	bl	0 <grub_free>
     940:	mov	w0, #0x0                   	// #0
     944:	b	aa8 <test_header+0x3d4>
     948:	ldr	x0, [sp, #88]
     94c:	ldr	x0, [x0]
     950:	ldrb	w1, [sp, #73]
     954:	and	x1, x1, #0xff
     958:	mov	x2, x1
     95c:	ldr	x1, [sp, #80]
     960:	bl	0 <grub_file_read>
     964:	mov	x1, x0
     968:	ldrb	w0, [sp, #73]
     96c:	and	x0, x0, #0xff
     970:	cmp	x1, x0
     974:	b.eq	984 <test_header+0x2b0>  // b.none
     978:	ldr	x0, [sp, #80]
     97c:	bl	0 <grub_free>
     980:	b	aa4 <test_header+0x3d0>
     984:	ldr	x0, [sp, #104]
     988:	cmp	x0, #0x0
     98c:	b.eq	9b0 <test_header+0x2dc>  // b.none
     990:	ldr	x0, [sp, #104]
     994:	ldr	x3, [x0, #48]
     998:	ldrb	w0, [sp, #73]
     99c:	and	x0, x0, #0xff
     9a0:	mov	x2, x0
     9a4:	ldr	x1, [sp, #80]
     9a8:	ldr	x0, [sp, #96]
     9ac:	blr	x3
     9b0:	ldr	x0, [sp, #80]
     9b4:	bl	0 <grub_free>
     9b8:	ldr	x0, [sp, #104]
     9bc:	cmp	x0, #0x0
     9c0:	b.eq	9d4 <test_header+0x300>  // b.none
     9c4:	ldr	x0, [sp, #104]
     9c8:	ldr	x1, [x0, #56]
     9cc:	ldr	x0, [sp, #96]
     9d0:	blr	x1
     9d4:	ldr	x0, [sp, #88]
     9d8:	ldr	x0, [x0]
     9dc:	add	x1, sp, #0x24
     9e0:	mov	x2, #0x4                   	// #4
     9e4:	bl	0 <grub_file_read>
     9e8:	cmp	x0, #0x4
     9ec:	b.ne	a88 <test_header+0x3b4>  // b.any
     9f0:	ldr	x0, [sp, #104]
     9f4:	cmp	x0, #0x0
     9f8:	b.eq	a24 <test_header+0x350>  // b.none
     9fc:	ldr	x0, [sp, #104]
     a00:	ldr	x1, [x0, #64]
     a04:	ldr	x0, [sp, #96]
     a08:	blr	x1
     a0c:	mov	x1, x0
     a10:	add	x0, sp, #0x24
     a14:	mov	x2, #0x4                   	// #4
     a18:	bl	0 <grub_memcmp>
     a1c:	cmp	w0, #0x0
     a20:	b.ne	a90 <test_header+0x3bc>  // b.any
     a24:	ldr	x0, [sp, #88]
     a28:	ldr	x0, [x0]
     a2c:	bl	d0 <grub_file_tell>
     a30:	mov	x1, x0
     a34:	ldr	x0, [sp, #88]
     a38:	str	x1, [x0, #40]
     a3c:	ldr	x0, [sp, #24]
     a40:	bl	648 <calculate_uncompressed_size>
     a44:	cmp	w0, #0x0
     a48:	b.lt	a98 <test_header+0x3c4>  // b.tstop
     a4c:	ldr	x0, [sp, #88]
     a50:	ldr	x2, [x0]
     a54:	ldr	x0, [sp, #88]
     a58:	ldr	x0, [x0, #40]
     a5c:	mov	x1, x0
     a60:	mov	x0, x2
     a64:	bl	0 <grub_file_seek>
     a68:	ldr	x0, [sp, #88]
     a6c:	bl	114 <read_block_header>
     a70:	cmp	w0, #0x0
     a74:	b.lt	aa0 <test_header+0x3cc>  // b.tstop
     a78:	ldr	x0, [sp, #88]
     a7c:	str	xzr, [x0, #32]
     a80:	mov	w0, #0x1                   	// #1
     a84:	b	aa8 <test_header+0x3d4>
     a88:	nop
     a8c:	b	aa4 <test_header+0x3d0>
     a90:	nop
     a94:	b	aa4 <test_header+0x3d0>
     a98:	nop
     a9c:	b	aa4 <test_header+0x3d0>
     aa0:	nop
     aa4:	mov	w0, #0x0                   	// #0
     aa8:	ldp	x29, x30, [sp], #112
     aac:	ret
	...

0000000000000ac8 <grub_lzopio_open>:
     ac8:	stp	x29, x30, [sp, #-48]!
     acc:	mov	x29, sp
     ad0:	str	x0, [sp, #24]
     ad4:	str	w1, [sp, #20]
     ad8:	ldr	w0, [sp, #20]
     adc:	and	w0, w0, #0x20000
     ae0:	cmp	w0, #0x0
     ae4:	b.eq	af0 <grub_lzopio_open+0x28>  // b.none
     ae8:	ldr	x0, [sp, #24]
     aec:	b	bf8 <grub_lzopio_open+0x130>
     af0:	mov	x0, #0x68                  	// #104
     af4:	bl	0 <grub_zalloc>
     af8:	str	x0, [sp, #40]
     afc:	ldr	x0, [sp, #40]
     b00:	cmp	x0, #0x0
     b04:	b.ne	b10 <grub_lzopio_open+0x48>  // b.any
     b08:	mov	x0, #0x0                   	// #0
     b0c:	b	bf8 <grub_lzopio_open+0x130>
     b10:	mov	x0, #0x50                  	// #80
     b14:	bl	0 <grub_zalloc>
     b18:	str	x0, [sp, #32]
     b1c:	ldr	x0, [sp, #32]
     b20:	cmp	x0, #0x0
     b24:	b.ne	b38 <grub_lzopio_open+0x70>  // b.any
     b28:	ldr	x0, [sp, #40]
     b2c:	bl	0 <grub_free>
     b30:	mov	x0, #0x0                   	// #0
     b34:	b	bf8 <grub_lzopio_open+0x130>
     b38:	ldr	x0, [sp, #32]
     b3c:	ldr	x1, [sp, #24]
     b40:	str	x1, [x0]
     b44:	ldr	x0, [sp, #24]
     b48:	ldr	x1, [x0, #8]
     b4c:	ldr	x0, [sp, #40]
     b50:	str	x1, [x0, #8]
     b54:	ldr	x0, [sp, #40]
     b58:	ldr	x1, [sp, #32]
     b5c:	str	x1, [x0, #80]
     b60:	ldr	x0, [sp, #40]
     b64:	adrp	x1, 0 <grub_swap_bytes16>
     b68:	add	x1, x1, #0x0
     b6c:	ldr	x1, [x1]
     b70:	str	x1, [x0, #16]
     b74:	ldr	x0, [sp, #40]
     b78:	mov	x1, #0xffffffffffffffff    	// #-1
     b7c:	str	x1, [x0, #64]
     b80:	ldr	x0, [sp, #40]
     b84:	mov	w1, #0x1                   	// #1
     b88:	str	w1, [x0, #72]
     b8c:	ldr	x0, [sp, #32]
     b90:	ldr	x0, [x0]
     b94:	bl	d0 <grub_file_tell>
     b98:	cmp	x0, #0x0
     b9c:	b.eq	bb0 <grub_lzopio_open+0xe8>  // b.none
     ba0:	ldr	x0, [sp, #32]
     ba4:	ldr	x0, [x0]
     ba8:	mov	x1, #0x0                   	// #0
     bac:	bl	0 <grub_file_seek>
     bb0:	ldr	x0, [sp, #40]
     bb4:	bl	6d4 <test_header>
     bb8:	cmp	w0, #0x0
     bbc:	b.ne	bf4 <grub_lzopio_open+0x12c>  // b.any
     bc0:	adrp	x0, 0 <grub_swap_bytes16>
     bc4:	add	x0, x0, #0x0
     bc8:	ldr	x0, [x0]
     bcc:	str	wzr, [x0]
     bd0:	mov	x1, #0x0                   	// #0
     bd4:	ldr	x0, [sp, #24]
     bd8:	bl	0 <grub_file_seek>
     bdc:	ldr	x0, [sp, #32]
     be0:	bl	0 <grub_free>
     be4:	ldr	x0, [sp, #40]
     be8:	bl	0 <grub_free>
     bec:	ldr	x0, [sp, #24]
     bf0:	b	bf8 <grub_lzopio_open+0x130>
     bf4:	ldr	x0, [sp, #40]
     bf8:	ldp	x29, x30, [sp], #48
     bfc:	ret
	...

0000000000000c10 <grub_lzopio_read>:
     c10:	stp	x29, x30, [sp, #-96]!
     c14:	mov	x29, sp
     c18:	str	x19, [sp, #16]
     c1c:	str	x0, [sp, #56]
     c20:	str	x1, [sp, #48]
     c24:	str	x2, [sp, #40]
     c28:	ldr	x0, [sp, #56]
     c2c:	ldr	x0, [x0, #80]
     c30:	str	x0, [sp, #64]
     c34:	str	xzr, [sp, #88]
     c38:	ldr	x0, [sp, #64]
     c3c:	ldr	x19, [x0, #32]
     c40:	ldr	x0, [sp, #56]
     c44:	bl	d0 <grub_file_tell>
     c48:	cmp	x19, x0
     c4c:	b.ls	cb0 <grub_lzopio_read+0xa0>  // b.plast
     c50:	ldr	x0, [sp, #64]
     c54:	ldr	x2, [x0]
     c58:	ldr	x0, [sp, #64]
     c5c:	ldr	x0, [x0, #40]
     c60:	mov	x1, x0
     c64:	mov	x0, x2
     c68:	bl	0 <grub_file_seek>
     c6c:	ldr	x0, [sp, #64]
     c70:	bl	114 <read_block_header>
     c74:	cmp	w0, #0x0
     c78:	b.lt	ddc <grub_lzopio_read+0x1cc>  // b.tstop
     c7c:	ldr	x0, [sp, #64]
     c80:	str	xzr, [x0, #32]
     c84:	b	cb0 <grub_lzopio_read+0xa0>
     c88:	ldr	x0, [sp, #64]
     c8c:	ldr	w0, [x0, #48]
     c90:	cmp	w0, #0x0
     c94:	b.ne	ca0 <grub_lzopio_read+0x90>  // b.any
     c98:	mov	x0, #0x0                   	// #0
     c9c:	b	e10 <grub_lzopio_read+0x200>
     ca0:	ldr	x0, [sp, #64]
     ca4:	bl	5d8 <jump_block>
     ca8:	cmp	w0, #0x0
     cac:	b.lt	de4 <grub_lzopio_read+0x1d4>  // b.tstop
     cb0:	ldr	x0, [sp, #64]
     cb4:	ldr	x1, [x0, #32]
     cb8:	ldr	x0, [sp, #64]
     cbc:	ldr	w0, [x0, #48]
     cc0:	mov	w0, w0
     cc4:	add	x19, x1, x0
     cc8:	ldr	x0, [sp, #56]
     ccc:	bl	d0 <grub_file_tell>
     cd0:	cmp	x19, x0
     cd4:	b.ls	c88 <grub_lzopio_read+0x78>  // b.plast
     cd8:	ldr	x0, [sp, #56]
     cdc:	bl	d0 <grub_file_tell>
     ce0:	mov	x1, x0
     ce4:	ldr	x0, [sp, #64]
     ce8:	ldr	x0, [x0, #32]
     cec:	sub	x0, x1, x0
     cf0:	str	x0, [sp, #80]
     cf4:	b	db8 <grub_lzopio_read+0x1a8>
     cf8:	ldr	x0, [sp, #64]
     cfc:	ldr	x0, [x0, #72]
     d00:	cmp	x0, #0x0
     d04:	b.ne	d18 <grub_lzopio_read+0x108>  // b.any
     d08:	ldr	x0, [sp, #64]
     d0c:	bl	454 <uncompress_block>
     d10:	cmp	w0, #0x0
     d14:	b.lt	dec <grub_lzopio_read+0x1dc>  // b.tstop
     d18:	ldr	x0, [sp, #64]
     d1c:	ldr	w0, [x0, #48]
     d20:	mov	w1, w0
     d24:	ldr	x0, [sp, #80]
     d28:	sub	x0, x1, x0
     d2c:	str	x0, [sp, #72]
     d30:	ldr	x1, [sp, #72]
     d34:	ldr	x0, [sp, #40]
     d38:	cmp	x1, x0
     d3c:	b.ls	d48 <grub_lzopio_read+0x138>  // b.plast
     d40:	ldr	x0, [sp, #40]
     d44:	str	x0, [sp, #72]
     d48:	ldr	x0, [sp, #64]
     d4c:	ldr	x1, [x0, #72]
     d50:	ldr	x0, [sp, #80]
     d54:	add	x0, x1, x0
     d58:	ldr	x2, [sp, #72]
     d5c:	mov	x1, x0
     d60:	ldr	x0, [sp, #48]
     d64:	bl	e8 <grub_memcpy>
     d68:	ldr	x1, [sp, #40]
     d6c:	ldr	x0, [sp, #72]
     d70:	sub	x0, x1, x0
     d74:	str	x0, [sp, #40]
     d78:	ldr	x1, [sp, #48]
     d7c:	ldr	x0, [sp, #72]
     d80:	add	x0, x1, x0
     d84:	str	x0, [sp, #48]
     d88:	ldr	x1, [sp, #88]
     d8c:	ldr	x0, [sp, #72]
     d90:	add	x0, x1, x0
     d94:	str	x0, [sp, #88]
     d98:	str	xzr, [sp, #80]
     d9c:	ldr	x0, [sp, #40]
     da0:	cmp	x0, #0x0
     da4:	b.eq	db8 <grub_lzopio_read+0x1a8>  // b.none
     da8:	ldr	x0, [sp, #64]
     dac:	bl	114 <read_block_header>
     db0:	cmp	w0, #0x0
     db4:	b.lt	df4 <grub_lzopio_read+0x1e4>  // b.tstop
     db8:	ldr	x0, [sp, #40]
     dbc:	cmp	x0, #0x0
     dc0:	b.eq	dd4 <grub_lzopio_read+0x1c4>  // b.none
     dc4:	ldr	x0, [sp, #64]
     dc8:	ldr	w0, [x0, #48]
     dcc:	cmp	w0, #0x0
     dd0:	b.ne	cf8 <grub_lzopio_read+0xe8>  // b.any
     dd4:	ldr	x0, [sp, #88]
     dd8:	b	e10 <grub_lzopio_read+0x200>
     ddc:	nop
     de0:	b	df8 <grub_lzopio_read+0x1e8>
     de4:	nop
     de8:	b	df8 <grub_lzopio_read+0x1e8>
     dec:	nop
     df0:	b	df8 <grub_lzopio_read+0x1e8>
     df4:	nop
     df8:	adrp	x0, 0 <grub_swap_bytes16>
     dfc:	add	x0, x0, #0x0
     e00:	ldr	x1, [x0]
     e04:	mov	w0, #0x1a                  	// #26
     e08:	bl	0 <grub_error>
     e0c:	mov	x0, #0xffffffffffffffff    	// #-1
     e10:	ldr	x19, [sp, #16]
     e14:	ldp	x29, x30, [sp], #96
     e18:	ret
     e1c:	nop
	...

0000000000000e28 <grub_lzopio_close>:
     e28:	stp	x29, x30, [sp, #-48]!
     e2c:	mov	x29, sp
     e30:	str	x0, [sp, #24]
     e34:	ldr	x0, [sp, #24]
     e38:	ldr	x0, [x0, #80]
     e3c:	str	x0, [sp, #40]
     e40:	ldr	x0, [sp, #40]
     e44:	ldr	x0, [x0]
     e48:	bl	0 <grub_file_close>
     e4c:	ldr	x0, [sp, #40]
     e50:	ldr	x0, [x0, #64]
     e54:	bl	0 <grub_free>
     e58:	ldr	x0, [sp, #40]
     e5c:	ldr	x0, [x0, #72]
     e60:	bl	0 <grub_free>
     e64:	ldr	x0, [sp, #40]
     e68:	bl	0 <grub_free>
     e6c:	ldr	x0, [sp, #24]
     e70:	str	xzr, [x0, #8]
     e74:	ldr	x0, [sp, #24]
     e78:	str	xzr, [x0]
     e7c:	adrp	x0, 0 <grub_swap_bytes16>
     e80:	add	x0, x0, #0x0
     e84:	ldr	x0, [x0]
     e88:	ldr	w0, [x0]
     e8c:	ldp	x29, x30, [sp], #48
     e90:	ret
     e94:	nop
	...

0000000000000ea0 <grub_mod_init>:
     ea0:	stp	x29, x30, [sp, #-32]!
     ea4:	mov	x29, sp
     ea8:	str	x0, [sp, #24]
     eac:	adrp	x0, 0 <grub_swap_bytes16>
     eb0:	add	x0, x0, #0x0
     eb4:	ldr	x1, [x0]
     eb8:	mov	w0, #0x3                   	// #3
     ebc:	bl	50 <grub_file_filter_register>
     ec0:	nop
     ec4:	ldp	x29, x30, [sp], #32
     ec8:	ret
     ecc:	nop
	...

0000000000000ed8 <grub_mod_fini>:
     ed8:	stp	x29, x30, [sp, #-16]!
     edc:	mov	x29, sp
     ee0:	mov	w0, #0x3                   	// #3
     ee4:	bl	88 <grub_file_filter_unregister>
     ee8:	nop
     eec:	ldp	x29, x30, [sp], #16
     ef0:	ret
     ef4:	nop

0000000000000ef8 <assert_real>:
     ef8:	stp	x29, x30, [sp, #-32]!
     efc:	mov	x29, sp
     f00:	str	x0, [sp, #24]
     f04:	str	w1, [sp, #20]
     f08:	str	w2, [sp, #16]
     f0c:	ldr	w0, [sp, #16]
     f10:	cmp	w0, #0x0
     f14:	b.ne	f30 <assert_real+0x38>  // b.any
     f18:	ldr	w2, [sp, #20]
     f1c:	ldr	x1, [sp, #24]
     f20:	adrp	x0, 0 <grub_swap_bytes16>
     f24:	add	x0, x0, #0x0
     f28:	ldr	x0, [x0]
     f2c:	bl	0 <grub_printf>
     f30:	nop
     f34:	ldp	x29, x30, [sp], #32
     f38:	ret
     f3c:	nop
	...

0000000000000f48 <lzo1x_decompress_safe>:
     f48:	stp	x29, x30, [sp, #-112]!
     f4c:	mov	x29, sp
     f50:	stp	x19, x20, [sp, #16]
     f54:	stp	x21, x22, [sp, #32]
     f58:	str	x0, [sp, #88]
     f5c:	str	x1, [sp, #80]
     f60:	str	x2, [sp, #72]
     f64:	str	x3, [sp, #64]
     f68:	str	x4, [sp, #56]
     f6c:	ldr	x1, [sp, #88]
     f70:	ldr	x0, [sp, #80]
     f74:	add	x0, x1, x0
     f78:	str	x0, [sp, #104]
     f7c:	ldr	x0, [sp, #64]
     f80:	ldr	x0, [x0]
     f84:	ldr	x1, [sp, #72]
     f88:	add	x0, x1, x0
     f8c:	str	x0, [sp, #96]
     f90:	ldr	x0, [sp, #64]
     f94:	str	xzr, [x0]
     f98:	ldr	x22, [sp, #72]
     f9c:	ldr	x19, [sp, #88]
     fa0:	ldrb	w0, [x19]
     fa4:	cmp	w0, #0x11
     fa8:	b.ls	1638 <lzo1x_decompress_safe+0x6f0>  // b.plast
     fac:	mov	x0, x19
     fb0:	add	x19, x0, #0x1
     fb4:	ldrb	w0, [x0]
     fb8:	sub	w0, w0, #0x11
     fbc:	sxtw	x20, w0
     fc0:	cmp	x20, #0x3
     fc4:	b.ls	1548 <lzo1x_decompress_safe+0x600>  // b.plast
     fc8:	cmp	x20, #0x0
     fcc:	cset	w0, ne  // ne = any
     fd0:	and	w0, w0, #0xff
     fd4:	mov	w2, w0
     fd8:	mov	w1, #0x1056                	// #4182
     fdc:	adrp	x0, 0 <grub_swap_bytes16>
     fe0:	add	x0, x0, #0x0
     fe4:	ldr	x0, [x0]
     fe8:	bl	ef8 <assert_real>
     fec:	ldr	x0, [sp, #96]
     ff0:	sub	x0, x0, x22
     ff4:	cmp	x20, x0
     ff8:	b.hi	172c <lzo1x_decompress_safe+0x7e4>  // b.pmore
     ffc:	ldr	x0, [sp, #104]
    1000:	sub	x0, x0, x19
    1004:	mov	x1, x0
    1008:	add	x0, x20, #0x1
    100c:	cmp	x1, x0
    1010:	b.cc	16cc <lzo1x_decompress_safe+0x784>  // b.lo, b.ul, b.last
    1014:	mov	x1, x19
    1018:	add	x19, x1, #0x1
    101c:	mov	x0, x22
    1020:	add	x22, x0, #0x1
    1024:	ldrb	w1, [x1]
    1028:	strb	w1, [x0]
    102c:	sub	x20, x20, #0x1
    1030:	cmp	x20, #0x0
    1034:	b.ne	1014 <lzo1x_decompress_safe+0xcc>  // b.any
    1038:	b	1168 <lzo1x_decompress_safe+0x220>
    103c:	mov	x0, x19
    1040:	add	x19, x0, #0x1
    1044:	ldrb	w0, [x0]
    1048:	and	x20, x0, #0xff
    104c:	cmp	x20, #0xf
    1050:	b.hi	1214 <lzo1x_decompress_safe+0x2cc>  // b.pmore
    1054:	cmp	x20, #0x0
    1058:	b.ne	10a4 <lzo1x_decompress_safe+0x15c>  // b.any
    105c:	ldr	x0, [sp, #104]
    1060:	cmp	x0, x19
    1064:	b.eq	16d4 <lzo1x_decompress_safe+0x78c>  // b.none
    1068:	b	1080 <lzo1x_decompress_safe+0x138>
    106c:	add	x20, x20, #0xff
    1070:	add	x19, x19, #0x1
    1074:	ldr	x0, [sp, #104]
    1078:	cmp	x0, x19
    107c:	b.eq	16dc <lzo1x_decompress_safe+0x794>  // b.none
    1080:	ldrb	w0, [x19]
    1084:	cmp	w0, #0x0
    1088:	b.eq	106c <lzo1x_decompress_safe+0x124>  // b.none
    108c:	mov	x0, x19
    1090:	add	x19, x0, #0x1
    1094:	ldrb	w0, [x0]
    1098:	add	w0, w0, #0xf
    109c:	sxtw	x0, w0
    10a0:	add	x20, x20, x0
    10a4:	cmp	x20, #0x0
    10a8:	cset	w0, ne  // ne = any
    10ac:	and	w0, w0, #0xff
    10b0:	mov	w2, w0
    10b4:	mov	w1, #0x106b                	// #4203
    10b8:	adrp	x0, 0 <grub_swap_bytes16>
    10bc:	add	x0, x0, #0x0
    10c0:	ldr	x0, [x0]
    10c4:	bl	ef8 <assert_real>
    10c8:	ldr	x0, [sp, #96]
    10cc:	sub	x0, x0, x22
    10d0:	mov	x1, x0
    10d4:	add	x0, x20, #0x3
    10d8:	cmp	x1, x0
    10dc:	b.cc	1734 <lzo1x_decompress_safe+0x7ec>  // b.lo, b.ul, b.last
    10e0:	ldr	x0, [sp, #104]
    10e4:	sub	x0, x0, x19
    10e8:	mov	x1, x0
    10ec:	add	x0, x20, #0x4
    10f0:	cmp	x1, x0
    10f4:	b.cc	16e4 <lzo1x_decompress_safe+0x79c>  // b.lo, b.ul, b.last
    10f8:	mov	x1, x19
    10fc:	add	x19, x1, #0x1
    1100:	mov	x0, x22
    1104:	add	x22, x0, #0x1
    1108:	ldrb	w1, [x1]
    110c:	strb	w1, [x0]
    1110:	mov	x1, x19
    1114:	add	x19, x1, #0x1
    1118:	mov	x0, x22
    111c:	add	x22, x0, #0x1
    1120:	ldrb	w1, [x1]
    1124:	strb	w1, [x0]
    1128:	mov	x1, x19
    112c:	add	x19, x1, #0x1
    1130:	mov	x0, x22
    1134:	add	x22, x0, #0x1
    1138:	ldrb	w1, [x1]
    113c:	strb	w1, [x0]
    1140:	mov	x1, x19
    1144:	add	x19, x1, #0x1
    1148:	mov	x0, x22
    114c:	add	x22, x0, #0x1
    1150:	ldrb	w1, [x1]
    1154:	strb	w1, [x0]
    1158:	sub	x20, x20, #0x1
    115c:	cmp	x20, #0x0
    1160:	b.ne	1140 <lzo1x_decompress_safe+0x1f8>  // b.any
    1164:	nop
    1168:	mov	x0, x19
    116c:	add	x19, x0, #0x1
    1170:	ldrb	w0, [x0]
    1174:	and	x20, x0, #0xff
    1178:	cmp	x20, #0xf
    117c:	b.hi	121c <lzo1x_decompress_safe+0x2d4>  // b.pmore
    1180:	sub	x21, x22, #0x801
    1184:	lsr	x0, x20, #2
    1188:	neg	x0, x0
    118c:	add	x21, x21, x0
    1190:	mov	x0, x19
    1194:	add	x19, x0, #0x1
    1198:	ldrb	w0, [x0]
    119c:	lsl	w0, w0, #2
    11a0:	sxtw	x0, w0
    11a4:	neg	x0, x0
    11a8:	add	x21, x21, x0
    11ac:	ldr	x0, [sp, #72]
    11b0:	cmp	x21, x0
    11b4:	b.cc	1774 <lzo1x_decompress_safe+0x82c>  // b.lo, b.ul, b.last
    11b8:	cmp	x21, x22
    11bc:	b.cs	1774 <lzo1x_decompress_safe+0x82c>  // b.hs, b.nlast
    11c0:	ldr	x0, [sp, #96]
    11c4:	sub	x0, x0, x22
    11c8:	cmp	x0, #0x2
    11cc:	b.ls	173c <lzo1x_decompress_safe+0x7f4>  // b.plast
    11d0:	mov	x1, x21
    11d4:	add	x21, x1, #0x1
    11d8:	mov	x0, x22
    11dc:	add	x22, x0, #0x1
    11e0:	ldrb	w1, [x1]
    11e4:	strb	w1, [x0]
    11e8:	mov	x1, x21
    11ec:	add	x21, x1, #0x1
    11f0:	mov	x0, x22
    11f4:	add	x22, x0, #0x1
    11f8:	ldrb	w1, [x1]
    11fc:	strb	w1, [x0]
    1200:	mov	x0, x22
    1204:	add	x22, x0, #0x1
    1208:	ldrb	w1, [x21]
    120c:	strb	w1, [x0]
    1210:	b	152c <lzo1x_decompress_safe+0x5e4>
    1214:	nop
    1218:	b	1228 <lzo1x_decompress_safe+0x2e0>
    121c:	nop
    1220:	b	1228 <lzo1x_decompress_safe+0x2e0>
    1224:	nop
    1228:	cmp	x20, #0x3f
    122c:	b.ls	12bc <lzo1x_decompress_safe+0x374>  // b.plast
    1230:	sub	x21, x22, #0x1
    1234:	lsr	x0, x20, #2
    1238:	and	x0, x0, #0x7
    123c:	neg	x0, x0
    1240:	add	x21, x21, x0
    1244:	mov	x0, x19
    1248:	add	x19, x0, #0x1
    124c:	ldrb	w0, [x0]
    1250:	lsl	w0, w0, #3
    1254:	sxtw	x0, w0
    1258:	neg	x0, x0
    125c:	add	x21, x21, x0
    1260:	lsr	x0, x20, #5
    1264:	sub	x20, x0, #0x1
    1268:	ldr	x0, [sp, #72]
    126c:	cmp	x21, x0
    1270:	b.cc	177c <lzo1x_decompress_safe+0x834>  // b.lo, b.ul, b.last
    1274:	cmp	x21, x22
    1278:	b.cs	177c <lzo1x_decompress_safe+0x834>  // b.hs, b.nlast
    127c:	cmp	x20, #0x0
    1280:	cset	w0, ne  // ne = any
    1284:	and	w0, w0, #0xff
    1288:	mov	w2, w0
    128c:	mov	w1, #0x10ed                	// #4333
    1290:	adrp	x0, 0 <grub_swap_bytes16>
    1294:	add	x0, x0, #0x0
    1298:	ldr	x0, [x0]
    129c:	bl	ef8 <assert_real>
    12a0:	ldr	x0, [sp, #96]
    12a4:	sub	x0, x0, x22
    12a8:	mov	x1, x0
    12ac:	add	x0, x20, #0x2
    12b0:	cmp	x1, x0
    12b4:	b.cs	14d0 <lzo1x_decompress_safe+0x588>  // b.hs, b.nlast
    12b8:	b	1758 <lzo1x_decompress_safe+0x810>
    12bc:	cmp	x20, #0x1f
    12c0:	b.ls	1350 <lzo1x_decompress_safe+0x408>  // b.plast
    12c4:	and	x20, x20, #0x1f
    12c8:	cmp	x20, #0x0
    12cc:	b.ne	1318 <lzo1x_decompress_safe+0x3d0>  // b.any
    12d0:	ldr	x0, [sp, #104]
    12d4:	cmp	x0, x19
    12d8:	b.eq	16ec <lzo1x_decompress_safe+0x7a4>  // b.none
    12dc:	b	12f4 <lzo1x_decompress_safe+0x3ac>
    12e0:	add	x20, x20, #0xff
    12e4:	add	x19, x19, #0x1
    12e8:	ldr	x0, [sp, #104]
    12ec:	cmp	x0, x19
    12f0:	b.eq	16f4 <lzo1x_decompress_safe+0x7ac>  // b.none
    12f4:	ldrb	w0, [x19]
    12f8:	cmp	w0, #0x0
    12fc:	b.eq	12e0 <lzo1x_decompress_safe+0x398>  // b.none
    1300:	mov	x0, x19
    1304:	add	x19, x0, #0x1
    1308:	ldrb	w0, [x0]
    130c:	add	w0, w0, #0x1f
    1310:	sxtw	x0, w0
    1314:	add	x20, x20, x0
    1318:	sub	x21, x22, #0x1
    131c:	ldrb	w0, [x19]
    1320:	lsr	w0, w0, #2
    1324:	and	w0, w0, #0xff
    1328:	mov	w1, w0
    132c:	add	x0, x19, #0x1
    1330:	ldrb	w0, [x0]
    1334:	lsl	w0, w0, #6
    1338:	add	w0, w1, w0
    133c:	sxtw	x0, w0
    1340:	neg	x0, x0
    1344:	add	x21, x21, x0
    1348:	add	x19, x19, #0x2
    134c:	b	147c <lzo1x_decompress_safe+0x534>
    1350:	cmp	x20, #0xf
    1354:	b.ls	1400 <lzo1x_decompress_safe+0x4b8>  // b.plast
    1358:	mov	x21, x22
    135c:	lsl	x0, x20, #11
    1360:	and	x0, x0, #0x4000
    1364:	neg	x0, x0
    1368:	add	x21, x21, x0
    136c:	and	x20, x20, #0x7
    1370:	cmp	x20, #0x0
    1374:	b.ne	13c0 <lzo1x_decompress_safe+0x478>  // b.any
    1378:	ldr	x0, [sp, #104]
    137c:	cmp	x0, x19
    1380:	b.eq	16fc <lzo1x_decompress_safe+0x7b4>  // b.none
    1384:	b	139c <lzo1x_decompress_safe+0x454>
    1388:	add	x20, x20, #0xff
    138c:	add	x19, x19, #0x1
    1390:	ldr	x0, [sp, #104]
    1394:	cmp	x0, x19
    1398:	b.eq	1704 <lzo1x_decompress_safe+0x7bc>  // b.none
    139c:	ldrb	w0, [x19]
    13a0:	cmp	w0, #0x0
    13a4:	b.eq	1388 <lzo1x_decompress_safe+0x440>  // b.none
    13a8:	mov	x0, x19
    13ac:	add	x19, x0, #0x1
    13b0:	ldrb	w0, [x0]
    13b4:	add	w0, w0, #0x7
    13b8:	sxtw	x0, w0
    13bc:	add	x20, x20, x0
    13c0:	ldrb	w0, [x19]
    13c4:	lsr	w0, w0, #2
    13c8:	and	w0, w0, #0xff
    13cc:	mov	w1, w0
    13d0:	add	x0, x19, #0x1
    13d4:	ldrb	w0, [x0]
    13d8:	lsl	w0, w0, #6
    13dc:	add	w0, w1, w0
    13e0:	sxtw	x0, w0
    13e4:	neg	x0, x0
    13e8:	add	x21, x21, x0
    13ec:	add	x19, x19, #0x2
    13f0:	cmp	x21, x22
    13f4:	b.eq	1660 <lzo1x_decompress_safe+0x718>  // b.none
    13f8:	sub	x21, x21, #0x4, lsl #12
    13fc:	b	147c <lzo1x_decompress_safe+0x534>
    1400:	sub	x21, x22, #0x1
    1404:	lsr	x0, x20, #2
    1408:	neg	x0, x0
    140c:	add	x21, x21, x0
    1410:	mov	x0, x19
    1414:	add	x19, x0, #0x1
    1418:	ldrb	w0, [x0]
    141c:	lsl	w0, w0, #2
    1420:	sxtw	x0, w0
    1424:	neg	x0, x0
    1428:	add	x21, x21, x0
    142c:	ldr	x0, [sp, #72]
    1430:	cmp	x21, x0
    1434:	b.cc	1784 <lzo1x_decompress_safe+0x83c>  // b.lo, b.ul, b.last
    1438:	cmp	x21, x22
    143c:	b.cs	1784 <lzo1x_decompress_safe+0x83c>  // b.hs, b.nlast
    1440:	ldr	x0, [sp, #96]
    1444:	sub	x0, x0, x22
    1448:	cmp	x0, #0x1
    144c:	b.ls	1744 <lzo1x_decompress_safe+0x7fc>  // b.plast
    1450:	mov	x1, x21
    1454:	add	x21, x1, #0x1
    1458:	mov	x0, x22
    145c:	add	x22, x0, #0x1
    1460:	ldrb	w1, [x1]
    1464:	strb	w1, [x0]
    1468:	mov	x0, x22
    146c:	add	x22, x0, #0x1
    1470:	ldrb	w1, [x21]
    1474:	strb	w1, [x0]
    1478:	b	152c <lzo1x_decompress_safe+0x5e4>
    147c:	ldr	x0, [sp, #72]
    1480:	cmp	x21, x0
    1484:	b.cc	178c <lzo1x_decompress_safe+0x844>  // b.lo, b.ul, b.last
    1488:	cmp	x21, x22
    148c:	b.cs	178c <lzo1x_decompress_safe+0x844>  // b.hs, b.nlast
    1490:	cmp	x20, #0x0
    1494:	cset	w0, ne  // ne = any
    1498:	and	w0, w0, #0xff
    149c:	mov	w2, w0
    14a0:	mov	w1, #0x116b                	// #4459
    14a4:	adrp	x0, 0 <grub_swap_bytes16>
    14a8:	add	x0, x0, #0x0
    14ac:	ldr	x0, [x0]
    14b0:	bl	ef8 <assert_real>
    14b4:	ldr	x0, [sp, #96]
    14b8:	sub	x0, x0, x22
    14bc:	mov	x1, x0
    14c0:	add	x0, x20, #0x2
    14c4:	cmp	x1, x0
    14c8:	b.cc	174c <lzo1x_decompress_safe+0x804>  // b.lo, b.ul, b.last
    14cc:	b	14d4 <lzo1x_decompress_safe+0x58c>
    14d0:	nop
    14d4:	mov	x1, x21
    14d8:	add	x21, x1, #0x1
    14dc:	mov	x0, x22
    14e0:	add	x22, x0, #0x1
    14e4:	ldrb	w1, [x1]
    14e8:	strb	w1, [x0]
    14ec:	mov	x1, x21
    14f0:	add	x21, x1, #0x1
    14f4:	mov	x0, x22
    14f8:	add	x22, x0, #0x1
    14fc:	ldrb	w1, [x1]
    1500:	strb	w1, [x0]
    1504:	mov	x1, x21
    1508:	add	x21, x1, #0x1
    150c:	mov	x0, x22
    1510:	add	x22, x0, #0x1
    1514:	ldrb	w1, [x1]
    1518:	strb	w1, [x0]
    151c:	sub	x20, x20, #0x1
    1520:	cmp	x20, #0x0
    1524:	b.ne	1504 <lzo1x_decompress_safe+0x5bc>  // b.any
    1528:	nop
    152c:	sub	x0, x19, #0x2
    1530:	ldrb	w0, [x0]
    1534:	and	x0, x0, #0xff
    1538:	and	x20, x0, #0x3
    153c:	cmp	x20, #0x0
    1540:	b.eq	1634 <lzo1x_decompress_safe+0x6ec>  // b.none
    1544:	b	154c <lzo1x_decompress_safe+0x604>
    1548:	nop
    154c:	cmp	x20, #0x0
    1550:	cset	w0, ne  // ne = any
    1554:	and	w0, w0, #0xff
    1558:	mov	w2, w0
    155c:	mov	w1, #0x11a6                	// #4518
    1560:	adrp	x0, 0 <grub_swap_bytes16>
    1564:	add	x0, x0, #0x0
    1568:	ldr	x0, [x0]
    156c:	bl	ef8 <assert_real>
    1570:	cmp	x20, #0x3
    1574:	cset	w0, ls  // ls = plast
    1578:	and	w0, w0, #0xff
    157c:	mov	w2, w0
    1580:	mov	w1, #0x11a6                	// #4518
    1584:	adrp	x0, 0 <grub_swap_bytes16>
    1588:	add	x0, x0, #0x0
    158c:	ldr	x0, [x0]
    1590:	bl	ef8 <assert_real>
    1594:	ldr	x0, [sp, #96]
    1598:	sub	x0, x0, x22
    159c:	cmp	x20, x0
    15a0:	b.hi	1754 <lzo1x_decompress_safe+0x80c>  // b.pmore
    15a4:	ldr	x0, [sp, #104]
    15a8:	sub	x0, x0, x19
    15ac:	mov	x1, x0
    15b0:	add	x0, x20, #0x1
    15b4:	cmp	x1, x0
    15b8:	b.cc	170c <lzo1x_decompress_safe+0x7c4>  // b.lo, b.ul, b.last
    15bc:	mov	x1, x19
    15c0:	add	x19, x1, #0x1
    15c4:	mov	x0, x22
    15c8:	add	x22, x0, #0x1
    15cc:	ldrb	w1, [x1]
    15d0:	strb	w1, [x0]
    15d4:	cmp	x20, #0x1
    15d8:	b.ls	1614 <lzo1x_decompress_safe+0x6cc>  // b.plast
    15dc:	mov	x1, x19
    15e0:	add	x19, x1, #0x1
    15e4:	mov	x0, x22
    15e8:	add	x22, x0, #0x1
    15ec:	ldrb	w1, [x1]
    15f0:	strb	w1, [x0]
    15f4:	cmp	x20, #0x2
    15f8:	b.ls	1614 <lzo1x_decompress_safe+0x6cc>  // b.plast
    15fc:	mov	x1, x19
    1600:	add	x19, x1, #0x1
    1604:	mov	x0, x22
    1608:	add	x22, x0, #0x1
    160c:	ldrb	w1, [x1]
    1610:	strb	w1, [x0]
    1614:	mov	x0, x19
    1618:	add	x19, x0, #0x1
    161c:	ldrb	w0, [x0]
    1620:	and	x20, x0, #0xff
    1624:	ldr	x0, [sp, #104]
    1628:	cmp	x19, x0
    162c:	b.cc	1224 <lzo1x_decompress_safe+0x2dc>  // b.lo, b.ul, b.last
    1630:	b	1638 <lzo1x_decompress_safe+0x6f0>
    1634:	nop
    1638:	ldr	x0, [sp, #104]
    163c:	cmp	x19, x0
    1640:	b.cc	103c <lzo1x_decompress_safe+0xf4>  // b.lo, b.ul, b.last
    1644:	ldr	x0, [sp, #72]
    1648:	sub	x0, x22, x0
    164c:	mov	x1, x0
    1650:	ldr	x0, [sp, #64]
    1654:	str	x1, [x0]
    1658:	mov	w0, #0xfffffff9            	// #-7
    165c:	b	17a8 <lzo1x_decompress_safe+0x860>
    1660:	nop
    1664:	cmp	x20, #0x1
    1668:	cset	w0, eq  // eq = none
    166c:	and	w0, w0, #0xff
    1670:	mov	w2, w0
    1674:	mov	w1, #0x11b7                	// #4535
    1678:	adrp	x0, 0 <grub_swap_bytes16>
    167c:	add	x0, x0, #0x0
    1680:	ldr	x0, [x0]
    1684:	bl	ef8 <assert_real>
    1688:	ldr	x0, [sp, #72]
    168c:	sub	x0, x22, x0
    1690:	mov	x1, x0
    1694:	ldr	x0, [sp, #64]
    1698:	str	x1, [x0]
    169c:	ldr	x0, [sp, #104]
    16a0:	cmp	x19, x0
    16a4:	b.eq	16c4 <lzo1x_decompress_safe+0x77c>  // b.none
    16a8:	ldr	x0, [sp, #104]
    16ac:	cmp	x19, x0
    16b0:	b.cs	16bc <lzo1x_decompress_safe+0x774>  // b.hs, b.nlast
    16b4:	mov	w0, #0xfffffff8            	// #-8
    16b8:	b	17a8 <lzo1x_decompress_safe+0x860>
    16bc:	mov	w0, #0xfffffffc            	// #-4
    16c0:	b	17a8 <lzo1x_decompress_safe+0x860>
    16c4:	mov	w0, #0x0                   	// #0
    16c8:	b	17a8 <lzo1x_decompress_safe+0x860>
    16cc:	nop
    16d0:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16d4:	nop
    16d8:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16dc:	nop
    16e0:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16e4:	nop
    16e8:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16ec:	nop
    16f0:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16f4:	nop
    16f8:	b	1710 <lzo1x_decompress_safe+0x7c8>
    16fc:	nop
    1700:	b	1710 <lzo1x_decompress_safe+0x7c8>
    1704:	nop
    1708:	b	1710 <lzo1x_decompress_safe+0x7c8>
    170c:	nop
    1710:	ldr	x0, [sp, #72]
    1714:	sub	x0, x22, x0
    1718:	mov	x1, x0
    171c:	ldr	x0, [sp, #64]
    1720:	str	x1, [x0]
    1724:	mov	w0, #0xfffffffc            	// #-4
    1728:	b	17a8 <lzo1x_decompress_safe+0x860>
    172c:	nop
    1730:	b	1758 <lzo1x_decompress_safe+0x810>
    1734:	nop
    1738:	b	1758 <lzo1x_decompress_safe+0x810>
    173c:	nop
    1740:	b	1758 <lzo1x_decompress_safe+0x810>
    1744:	nop
    1748:	b	1758 <lzo1x_decompress_safe+0x810>
    174c:	nop
    1750:	b	1758 <lzo1x_decompress_safe+0x810>
    1754:	nop
    1758:	ldr	x0, [sp, #72]
    175c:	sub	x0, x22, x0
    1760:	mov	x1, x0
    1764:	ldr	x0, [sp, #64]
    1768:	str	x1, [x0]
    176c:	mov	w0, #0xfffffffb            	// #-5
    1770:	b	17a8 <lzo1x_decompress_safe+0x860>
    1774:	nop
    1778:	b	1790 <lzo1x_decompress_safe+0x848>
    177c:	nop
    1780:	b	1790 <lzo1x_decompress_safe+0x848>
    1784:	nop
    1788:	b	1790 <lzo1x_decompress_safe+0x848>
    178c:	nop
    1790:	ldr	x0, [sp, #72]
    1794:	sub	x0, x22, x0
    1798:	mov	x1, x0
    179c:	ldr	x0, [sp, #64]
    17a0:	str	x1, [x0]
    17a4:	mov	w0, #0xfffffffa            	// #-6
    17a8:	ldp	x19, x20, [sp, #16]
    17ac:	ldp	x21, x22, [sp, #32]
    17b0:	ldp	x29, x30, [sp], #112
    17b4:	ret
	...
