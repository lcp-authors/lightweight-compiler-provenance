In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblsan.a_clang_-O1:

lsan_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>:
       0:	mov	x2, x0
       4:	ldrb	w0, [x0, #28]
       8:	ldrb	w3, [x1, #28]
       c:	cmp	w3, w0
      10:	b.eq	18 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_+0x18>  // b.none
      14:	ret
      18:	ldr	x2, [x2, #16]
      1c:	ldr	x0, [x1, #16]
      20:	cmp	x2, x0
      24:	cset	w0, hi  // hi = pmore
      28:	b	14 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_+0x14>

000000000000002c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
      2c:	stp	x19, x20, [sp, #-48]!
      30:	stp	x21, x22, [sp, #16]
      34:	str	x30, [sp, #32]
      38:	mov	x19, x0
      3c:	mov	x20, x1
      40:	mov	x21, x2
      44:	mov	x22, x3
      48:	mov	x1, #0x10                  	// #16
      4c:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
      50:	ldr	x0, [x0]
      54:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
      58:	mov	x2, x0
      5c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      60:	add	x0, x0, #0x0
      64:	str	x0, [x2]
      68:	str	x22, [x2, #8]
      6c:	mov	x3, x21
      70:	mov	x1, x20
      74:	mov	x0, x19
      78:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
      7c:	ldp	x21, x22, [sp, #16]
      80:	ldr	x30, [sp, #32]
      84:	ldp	x19, x20, [sp], #48
      88:	ret

000000000000008c <_ZN6__lsanL21GetSuppressionContextEv>:
      8c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      90:	ldr	x0, [x0]
      94:	cbz	x0, 9c <_ZN6__lsanL21GetSuppressionContextEv+0x10>
      98:	ret
      9c:	str	x30, [sp, #-16]!
      a0:	mov	x4, #0x0                   	// #0
      a4:	mov	x3, #0x0                   	// #0
      a8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      ac:	add	x2, x2, #0x0
      b0:	mov	w1, #0x5f                  	// #95
      b4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      b8:	add	x0, x0, #0x0
      bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000000c0 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv>:
      c0:	ldr	w2, [x0, #112]
      c4:	cmp	w2, #0x2
      c8:	b.eq	d0 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x10>  // b.none
      cc:	ret
      d0:	str	x30, [sp, #-16]!
      d4:	ldr	x4, [x1, #16]
      d8:	mov	x2, x4
      dc:	mov	x6, #0x0                   	// #0
      e0:	b	e8 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x28>
      e4:	mov	x2, x3
      e8:	cmp	x2, x6
      ec:	b.ls	134 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x74>  // b.plast
      f0:	add	x5, x2, x6
      f4:	lsr	x3, x5, #1
      f8:	cmp	x4, x5, lsr #1
      fc:	b.ls	11c <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x5c>  // b.plast
     100:	ldr	x5, [x1]
     104:	ldr	x7, [x5, x3, lsl #3]
     108:	ldr	x5, [x0, #32]
     10c:	cmp	w7, w5
     110:	b.ge	e4 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x24>  // b.tcont
     114:	add	x6, x3, #0x1
     118:	b	e8 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x28>
     11c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     120:	add	x2, x2, #0x0
     124:	mov	w1, #0x1ba                 	// #442
     128:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     12c:	add	x0, x0, #0x0
     130:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     134:	cmp	x4, x6
     138:	b.ls	150 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x90>  // b.plast
     13c:	ldr	x1, [x1]
     140:	ldr	x2, [x1, x6, lsl #3]
     144:	ldr	x1, [x0, #32]
     148:	cmp	x2, x1
     14c:	b.eq	160 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0xa0>  // b.none
     150:	ldr	x1, [x0, #32]
     154:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     158:	add	x0, x0, #0x0
     15c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     160:	ldr	x30, [sp], #16
     164:	ret

0000000000000168 <_ZN6__lsanL11ResetTagsCbEmPv>:
     168:	stp	x19, x30, [sp, #-32]!
     16c:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     170:	add	x19, sp, #0x18
     174:	mov	x1, x0
     178:	mov	x0, x19
     17c:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     180:	mov	x0, x19
     184:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     188:	and	w0, w0, #0xff
     18c:	cbnz	w0, 198 <_ZN6__lsanL11ResetTagsCbEmPv+0x30>
     190:	ldp	x19, x30, [sp], #32
     194:	ret
     198:	add	x0, sp, #0x18
     19c:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     1a0:	cmp	w0, #0x3
     1a4:	b.eq	190 <_ZN6__lsanL11ResetTagsCbEmPv+0x28>  // b.none
     1a8:	mov	w1, #0x0                   	// #0
     1ac:	add	x0, sp, #0x18
     1b0:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
     1b4:	b	190 <_ZN6__lsanL11ResetTagsCbEmPv+0x28>

00000000000001b8 <_ZN6__lsanL15MarkInvalidPCCbEmPv>:
     1b8:	stp	x19, x20, [sp, #-64]!
     1bc:	str	x30, [sp, #24]
     1c0:	str	x0, [sp, #40]
     1c4:	cbz	x1, 204 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x4c>
     1c8:	mov	x20, x1
     1cc:	ldr	x0, [sp, #40]
     1d0:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     1d4:	mov	x1, x0
     1d8:	str	x0, [sp, #40]
     1dc:	add	x19, sp, #0x38
     1e0:	mov	x0, x19
     1e4:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     1e8:	mov	x0, x19
     1ec:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     1f0:	and	w0, w0, #0xff
     1f4:	cbnz	w0, 228 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x70>
     1f8:	ldr	x30, [sp, #24]
     1fc:	ldp	x19, x20, [sp], #64
     200:	ret
     204:	str	x21, [sp, #16]
     208:	mov	x4, #0x0                   	// #0
     20c:	mov	x3, #0x0                   	// #0
     210:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     214:	add	x2, x2, #0x0
     218:	mov	w1, #0x18b                 	// #395
     21c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     220:	add	x0, x0, #0x0
     224:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     228:	add	x0, sp, #0x38
     22c:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     230:	cmp	w0, #0x2
     234:	b.eq	1f8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x40>  // b.none
     238:	add	x0, sp, #0x38
     23c:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     240:	cmp	w0, #0x3
     244:	b.eq	1f8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x40>  // b.none
     248:	add	x0, sp, #0x38
     24c:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
     250:	cbz	w0, 268 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xb0>
     254:	mov	w1, w0
     258:	ldr	x0, [x20, #8]
     25c:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>
     260:	cmp	w1, #0x1
     264:	b.hi	2b8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x100>  // b.pmore
     268:	mov	w1, #0x2                   	// #2
     26c:	add	x0, sp, #0x38
     270:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
     274:	ldr	x19, [x20]
     278:	ldr	x3, [x19, #16]
     27c:	ldr	x0, [x19, #8]
     280:	lsr	x4, x0, #3
     284:	cmp	x3, x0, lsr #3
     288:	b.hi	2e0 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x128>  // b.pmore
     28c:	cmp	x3, x4
     290:	b.eq	2fc <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x144>  // b.none
     294:	ldr	x3, [x19]
     298:	ldr	x0, [x19, #16]
     29c:	add	x1, x0, #0x1
     2a0:	str	x1, [x19, #16]
     2a4:	mov	x2, #0x8                   	// #8
     2a8:	add	x1, sp, #0x28
     2ac:	add	x0, x3, x0, lsl #3
     2b0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     2b4:	b	1f8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x40>
     2b8:	ldr	x19, [x0, #8]
     2bc:	cbz	x19, 268 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xb0>
     2c0:	ldrb	w0, [x20, #16]
     2c4:	cbz	w0, 1f8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x40>
     2c8:	bl	0 <_ZN6__lsan9GetLinkerEv>
     2cc:	mov	x1, x19
     2d0:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
     2d4:	and	w0, w0, #0xff
     2d8:	cbz	w0, 1f8 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x40>
     2dc:	b	268 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xb0>
     2e0:	str	x21, [sp, #16]
     2e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2e8:	add	x2, x2, #0x0
     2ec:	mov	w1, #0x1be                 	// #446
     2f0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2f4:	add	x0, x0, #0x0
     2f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     2fc:	str	x21, [sp, #16]
     300:	add	x0, x3, #0x1
     304:	tst	x3, x0
     308:	b.eq	414 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x25c>  // b.none
     30c:	clz	x2, x0
     310:	mov	w1, #0x3f                  	// #63
     314:	sub	w1, w1, w2
     318:	add	w2, w1, #0x1
     31c:	mov	x4, #0x1                   	// #1
     320:	lsl	x4, x4, x2
     324:	cmp	x0, x4
     328:	b.cs	3c0 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x208>  // b.hs, b.nlast
     32c:	mov	x2, #0x1                   	// #1
     330:	lsl	x1, x2, x1
     334:	cmp	x0, x1
     338:	b.ls	3dc <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x224>  // b.plast
     33c:	cmp	x3, x4
     340:	b.hi	3fc <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x244>  // b.pmore
     344:	lsl	x20, x4, #3
     348:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     34c:	ldr	x0, [x0]
     350:	ldr	x0, [x0]
     354:	cbz	x0, 41c <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x264>
     358:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     35c:	ldr	x0, [x0]
     360:	ldr	x0, [x0]
     364:	sub	x1, x0, #0x1
     368:	tst	x0, x1
     36c:	b.ne	430 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x278>  // b.any
     370:	add	x20, x20, x1
     374:	neg	x0, x0
     378:	and	x20, x20, x0
     37c:	mov	w2, #0x0                   	// #0
     380:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     384:	add	x1, x1, #0x0
     388:	mov	x0, x20
     38c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     390:	mov	x21, x0
     394:	ldr	x2, [x19, #16]
     398:	lsl	x2, x2, #3
     39c:	ldr	x1, [x19]
     3a0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     3a4:	ldr	x1, [x19, #8]
     3a8:	ldr	x0, [x19]
     3ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     3b0:	str	x21, [x19]
     3b4:	str	x20, [x19, #8]
     3b8:	ldr	x21, [sp, #16]
     3bc:	b	294 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xdc>
     3c0:	mov	x3, x0
     3c4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     3c8:	add	x2, x2, #0x0
     3cc:	mov	w1, #0x17b                 	// #379
     3d0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     3d4:	add	x0, x0, #0x0
     3d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     3dc:	mov	x4, x1
     3e0:	mov	x3, x0
     3e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     3e8:	add	x2, x2, #0x0
     3ec:	mov	w1, #0x17c                 	// #380
     3f0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     3f4:	add	x0, x0, #0x0
     3f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     3fc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     400:	add	x2, x2, #0x0
     404:	mov	w1, #0x1fd                 	// #509
     408:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     40c:	add	x0, x0, #0x0
     410:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     414:	mov	x4, x0
     418:	b	344 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x18c>
     41c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     420:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     424:	ldr	x1, [x1]
     428:	str	x0, [x1]
     42c:	b	358 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x1a0>
     430:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     434:	add	x0, x0, #0x0
     438:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     43c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000440 <_ZN6__lsanL16CollectIgnoredCbEmPv>:
     440:	stp	x19, x20, [sp, #-80]!
     444:	str	x30, [sp, #32]
     448:	str	x0, [sp, #56]
     44c:	cbz	x1, 48c <_ZN6__lsanL16CollectIgnoredCbEmPv+0x4c>
     450:	mov	x19, x1
     454:	ldr	x0, [sp, #56]
     458:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     45c:	mov	x1, x0
     460:	str	x0, [sp, #56]
     464:	add	x20, sp, #0x48
     468:	mov	x0, x20
     46c:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     470:	mov	x0, x20
     474:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     478:	and	w0, w0, #0xff
     47c:	cbnz	w0, 4b0 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x70>
     480:	ldr	x30, [sp, #32]
     484:	ldp	x19, x20, [sp], #80
     488:	ret
     48c:	stp	x21, x22, [sp, #16]
     490:	mov	x4, #0x0                   	// #0
     494:	mov	x3, #0x0                   	// #0
     498:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     49c:	add	x2, x2, #0x0
     4a0:	mov	w1, #0x16f                 	// #367
     4a4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     4a8:	add	x0, x0, #0x0
     4ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     4b0:	add	x0, sp, #0x48
     4b4:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     4b8:	cmp	w0, #0x3
     4bc:	b.ne	480 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x40>  // b.any
     4c0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     4c4:	ldrb	w0, [x0]
     4c8:	cbnz	w0, 50c <_ZN6__lsanL16CollectIgnoredCbEmPv+0xcc>
     4cc:	ldr	x3, [x19, #16]
     4d0:	ldr	x0, [x19, #8]
     4d4:	lsr	x4, x0, #3
     4d8:	cmp	x3, x0, lsr #3
     4dc:	b.hi	550 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x110>  // b.pmore
     4e0:	cmp	x3, x4
     4e4:	b.eq	56c <_ZN6__lsanL16CollectIgnoredCbEmPv+0x12c>  // b.none
     4e8:	ldr	x3, [x19]
     4ec:	ldr	x0, [x19, #16]
     4f0:	add	x1, x0, #0x1
     4f4:	str	x1, [x19, #16]
     4f8:	mov	x2, #0x8                   	// #8
     4fc:	add	x1, sp, #0x38
     500:	add	x0, x3, x0, lsl #3
     504:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     508:	b	480 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x40>
     50c:	stp	x21, x22, [sp, #16]
     510:	ldr	x22, [sp, #56]
     514:	add	x21, sp, #0x48
     518:	mov	x0, x21
     51c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     520:	ldr	x20, [sp, #56]
     524:	add	x20, x0, x20
     528:	mov	x0, x21
     52c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     530:	mov	x3, x0
     534:	mov	x2, x20
     538:	mov	x1, x22
     53c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     540:	add	x0, x0, #0x0
     544:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     548:	ldp	x21, x22, [sp, #16]
     54c:	b	4cc <_ZN6__lsanL16CollectIgnoredCbEmPv+0x8c>
     550:	stp	x21, x22, [sp, #16]
     554:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     558:	add	x2, x2, #0x0
     55c:	mov	w1, #0x1be                 	// #446
     560:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     564:	add	x0, x0, #0x0
     568:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     56c:	stp	x21, x22, [sp, #16]
     570:	add	x0, x3, #0x1
     574:	tst	x3, x0
     578:	b.eq	684 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x244>  // b.none
     57c:	clz	x2, x0
     580:	mov	w1, #0x3f                  	// #63
     584:	sub	w1, w1, w2
     588:	add	w2, w1, #0x1
     58c:	mov	x4, #0x1                   	// #1
     590:	lsl	x4, x4, x2
     594:	cmp	x0, x4
     598:	b.cs	630 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x1f0>  // b.hs, b.nlast
     59c:	mov	x2, #0x1                   	// #1
     5a0:	lsl	x1, x2, x1
     5a4:	cmp	x0, x1
     5a8:	b.ls	64c <_ZN6__lsanL16CollectIgnoredCbEmPv+0x20c>  // b.plast
     5ac:	cmp	x3, x4
     5b0:	b.hi	66c <_ZN6__lsanL16CollectIgnoredCbEmPv+0x22c>  // b.pmore
     5b4:	lsl	x20, x4, #3
     5b8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     5bc:	ldr	x0, [x0]
     5c0:	ldr	x0, [x0]
     5c4:	cbz	x0, 68c <_ZN6__lsanL16CollectIgnoredCbEmPv+0x24c>
     5c8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     5cc:	ldr	x0, [x0]
     5d0:	ldr	x0, [x0]
     5d4:	sub	x1, x0, #0x1
     5d8:	tst	x0, x1
     5dc:	b.ne	6a0 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x260>  // b.any
     5e0:	add	x20, x20, x1
     5e4:	neg	x0, x0
     5e8:	and	x20, x20, x0
     5ec:	mov	w2, #0x0                   	// #0
     5f0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     5f4:	add	x1, x1, #0x0
     5f8:	mov	x0, x20
     5fc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     600:	mov	x21, x0
     604:	ldr	x2, [x19, #16]
     608:	lsl	x2, x2, #3
     60c:	ldr	x1, [x19]
     610:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     614:	ldr	x1, [x19, #8]
     618:	ldr	x0, [x19]
     61c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     620:	str	x21, [x19]
     624:	str	x20, [x19, #8]
     628:	ldp	x21, x22, [sp, #16]
     62c:	b	4e8 <_ZN6__lsanL16CollectIgnoredCbEmPv+0xa8>
     630:	mov	x3, x0
     634:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     638:	add	x2, x2, #0x0
     63c:	mov	w1, #0x17b                 	// #379
     640:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     644:	add	x0, x0, #0x0
     648:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     64c:	mov	x4, x1
     650:	mov	x3, x0
     654:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     658:	add	x2, x2, #0x0
     65c:	mov	w1, #0x17c                 	// #380
     660:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     664:	add	x0, x0, #0x0
     668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     66c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     670:	add	x2, x2, #0x0
     674:	mov	w1, #0x1fd                 	// #509
     678:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     67c:	add	x0, x0, #0x0
     680:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     684:	mov	x4, x0
     688:	b	5b4 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x174>
     68c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     690:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     694:	ldr	x1, [x1]
     698:	str	x0, [x1]
     69c:	b	5c8 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x188>
     6a0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     6a4:	add	x0, x0, #0x0
     6a8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     6ac:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000006b0 <_ZN6__lsan23DisableCounterUnderflowEv>:
     6b0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     6b4:	ldr	x0, [x0]
     6b8:	ldrb	w0, [x0, #57]
     6bc:	cbnz	w0, 6c4 <_ZN6__lsan23DisableCounterUnderflowEv+0x14>
     6c0:	ret
     6c4:	str	x30, [sp, #-16]!
     6c8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     6cc:	add	x0, x0, #0x0
     6d0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     6d4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000006d8 <_ZN6__lsan5Flags11SetDefaultsEv>:
     6d8:	strb	wzr, [x0]
     6dc:	str	wzr, [x0, #4]
     6e0:	str	wzr, [x0, #8]
     6e4:	mov	w1, #0x1                   	// #1
     6e8:	strb	w1, [x0, #12]
     6ec:	strb	w1, [x0, #13]
     6f0:	strb	w1, [x0, #14]
     6f4:	strb	w1, [x0, #15]
     6f8:	strb	w1, [x0, #16]
     6fc:	strb	w1, [x0, #17]
     700:	strb	wzr, [x0, #18]
     704:	strb	wzr, [x0, #19]
     708:	strb	wzr, [x0, #20]
     70c:	strb	wzr, [x0, #21]
     710:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     714:	add	x1, x1, #0x0
     718:	str	x1, [x0, #24]
     71c:	ret

0000000000000720 <_ZN6__lsan17RegisterLsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>:
     720:	stp	x19, x20, [sp, #-48]!
     724:	stp	x21, x22, [sp, #16]
     728:	str	x30, [sp, #32]
     72c:	mov	x20, x0
     730:	mov	x19, x1
     734:	mov	x3, x1
     738:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     73c:	add	x2, x2, #0x0
     740:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     744:	add	x1, x1, #0x0
     748:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     74c:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
     750:	ldr	x21, [x21]
     754:	mov	x1, #0x10                  	// #16
     758:	mov	x0, x21
     75c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     760:	mov	x2, x0
     764:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     768:	add	x22, x22, #0x0
     76c:	str	x22, [x0]
     770:	add	x0, x19, #0x4
     774:	str	x0, [x2, #8]
     778:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     77c:	add	x3, x3, #0x0
     780:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     784:	add	x1, x1, #0x0
     788:	mov	x0, x20
     78c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     790:	mov	x1, #0x10                  	// #16
     794:	mov	x0, x21
     798:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     79c:	mov	x2, x0
     7a0:	str	x22, [x0]
     7a4:	add	x0, x19, #0x8
     7a8:	str	x0, [x2, #8]
     7ac:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7b0:	add	x3, x3, #0x0
     7b4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7b8:	add	x1, x1, #0x0
     7bc:	mov	x0, x20
     7c0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     7c4:	add	x3, x19, #0xc
     7c8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7cc:	add	x2, x2, #0x0
     7d0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7d4:	add	x1, x1, #0x0
     7d8:	mov	x0, x20
     7dc:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     7e0:	add	x3, x19, #0xd
     7e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7e8:	add	x2, x2, #0x0
     7ec:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7f0:	add	x1, x1, #0x0
     7f4:	mov	x0, x20
     7f8:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     7fc:	add	x3, x19, #0xe
     800:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     804:	add	x2, x2, #0x0
     808:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     80c:	add	x1, x1, #0x0
     810:	mov	x0, x20
     814:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     818:	add	x3, x19, #0xf
     81c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     820:	add	x2, x2, #0x0
     824:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     828:	add	x1, x1, #0x0
     82c:	mov	x0, x20
     830:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     834:	add	x3, x19, #0x10
     838:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     83c:	add	x2, x2, #0x0
     840:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     844:	add	x1, x1, #0x0
     848:	mov	x0, x20
     84c:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     850:	add	x3, x19, #0x11
     854:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     858:	add	x2, x2, #0x0
     85c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     860:	add	x1, x1, #0x0
     864:	mov	x0, x20
     868:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     86c:	add	x3, x19, #0x12
     870:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     874:	add	x2, x2, #0x0
     878:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     87c:	add	x1, x1, #0x0
     880:	mov	x0, x20
     884:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     888:	add	x3, x19, #0x13
     88c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     890:	add	x2, x2, #0x0
     894:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     898:	add	x1, x1, #0x0
     89c:	mov	x0, x20
     8a0:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     8a4:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8a8:	add	x22, x22, #0x0
     8ac:	add	x3, x19, #0x14
     8b0:	mov	x2, x22
     8b4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8b8:	add	x1, x1, #0x0
     8bc:	mov	x0, x20
     8c0:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     8c4:	add	x3, x19, #0x15
     8c8:	mov	x2, x22
     8cc:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8d0:	add	x1, x1, #0x0
     8d4:	mov	x0, x20
     8d8:	bl	2c <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     8dc:	mov	x1, #0x10                  	// #16
     8e0:	mov	x0, x21
     8e4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     8e8:	mov	x2, x0
     8ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8f0:	add	x0, x0, #0x0
     8f4:	str	x0, [x2]
     8f8:	add	x19, x19, #0x18
     8fc:	str	x19, [x2, #8]
     900:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     904:	add	x3, x3, #0x0
     908:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     90c:	add	x1, x1, #0x0
     910:	mov	x0, x20
     914:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     918:	ldp	x21, x22, [sp, #16]
     91c:	ldr	x30, [sp, #32]
     920:	ldp	x19, x20, [sp], #48
     924:	ret

0000000000000928 <_ZN6__lsan22InitializeSuppressionsEv>:
     928:	stp	x19, x20, [sp, #-32]!
     92c:	stp	x21, x30, [sp, #16]
     930:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     934:	ldr	x4, [x0]
     938:	cbnz	x4, 9ac <_ZN6__lsan22InitializeSuppressionsEv+0x84>
     93c:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     940:	add	x20, x21, #0x0
     944:	add	x19, x20, #0x40
     948:	mov	w2, #0x1                   	// #1
     94c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     950:	add	x1, x1, #0x0
     954:	mov	x0, x19
     958:	bl	0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
     95c:	str	x19, [x21]
     960:	ldr	x1, [x20, #32]
     964:	mov	x0, x19
     968:	bl	0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>
     96c:	adrp	x0, 0 <__lsan_default_suppressions>
     970:	ldr	x0, [x0]
     974:	cbz	x0, 98c <_ZN6__lsan22InitializeSuppressionsEv+0x64>
     978:	ldr	x19, [x21]
     97c:	bl	0 <__lsan_default_suppressions>
     980:	mov	x1, x0
     984:	mov	x0, x19
     988:	bl	0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
     98c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     990:	add	x1, x1, #0x0
     994:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     998:	ldr	x0, [x0]
     99c:	bl	0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
     9a0:	ldp	x21, x30, [sp, #16]
     9a4:	ldp	x19, x20, [sp], #32
     9a8:	ret
     9ac:	mov	x3, #0x0                   	// #0
     9b0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     9b4:	add	x2, x2, #0x0
     9b8:	mov	w1, #0x55                  	// #85
     9bc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     9c0:	add	x0, x0, #0x0
     9c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009c8 <_ZN6__lsan14GetRootRegionsEv>:
     9c8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     9cc:	ldr	x0, [x0]
     9d0:	ret

00000000000009d4 <_ZN6__lsan21InitializeRootRegionsEv>:
     9d4:	stp	x19, x20, [sp, #-48]!
     9d8:	stp	x21, x22, [sp, #16]
     9dc:	str	x30, [sp, #32]
     9e0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     9e4:	ldr	x0, [x0]
     9e8:	cbnz	x0, a90 <_ZN6__lsan21InitializeRootRegionsEv+0xbc>
     9ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     9f0:	add	x0, x0, #0x0
     9f4:	str	xzr, [x0, #200]
     9f8:	str	xzr, [x0, #208]
     9fc:	str	xzr, [x0, #192]
     a00:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a04:	ldr	x0, [x0]
     a08:	ldr	x0, [x0]
     a0c:	cbz	x0, ab0 <_ZN6__lsan21InitializeRootRegionsEv+0xdc>
     a10:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a14:	ldr	x0, [x0]
     a18:	ldr	x1, [x0]
     a1c:	sub	x0, x1, #0x1
     a20:	tst	x0, x1
     a24:	b.ne	ac4 <_ZN6__lsan21InitializeRootRegionsEv+0xf0>  // b.any
     a28:	add	x21, x1, #0xf
     a2c:	neg	x1, x1
     a30:	and	x21, x21, x1
     a34:	mov	w2, #0x0                   	// #0
     a38:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     a3c:	add	x1, x1, #0x0
     a40:	mov	x0, x21
     a44:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a48:	mov	x22, x0
     a4c:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     a50:	add	x19, x19, #0x0
     a54:	add	x20, x19, #0xc0
     a58:	ldr	x2, [x19, #208]
     a5c:	lsl	x2, x2, #4
     a60:	ldr	x1, [x19, #192]
     a64:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a68:	ldr	x1, [x19, #200]
     a6c:	ldr	x0, [x19, #192]
     a70:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a74:	str	x22, [x19, #192]
     a78:	str	x21, [x19, #200]
     a7c:	str	x20, [x19, #144]
     a80:	ldp	x21, x22, [sp, #16]
     a84:	ldr	x30, [sp, #32]
     a88:	ldp	x19, x20, [sp], #48
     a8c:	ret
     a90:	mov	x4, #0x0                   	// #0
     a94:	mov	x3, #0x0                   	// #0
     a98:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     a9c:	add	x2, x2, #0x0
     aa0:	mov	w1, #0x68                  	// #104
     aa4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     aa8:	add	x0, x0, #0x0
     aac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ab0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ab4:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ab8:	ldr	x1, [x1]
     abc:	str	x0, [x1]
     ac0:	b	a10 <_ZN6__lsan21InitializeRootRegionsEv+0x3c>
     ac4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     ac8:	add	x0, x0, #0x0
     acc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ad0:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000ad4 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv>:
     ad4:	adrp	x0, 0 <__lsan_default_options>
     ad8:	ldr	x0, [x0]
     adc:	cbz	x0, af0 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv+0x1c>
     ae0:	str	x30, [sp, #-16]!
     ae4:	bl	0 <__lsan_default_options>
     ae8:	ldr	x30, [sp], #16
     aec:	ret
     af0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     af4:	add	x0, x0, #0x0
     af8:	ret

0000000000000afc <_ZN6__lsan14InitCommonLsanEv>:
     afc:	str	x30, [sp, #-16]!
     b00:	bl	9d4 <_ZN6__lsan21InitializeRootRegionsEv>
     b04:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     b08:	ldr	x0, [x0]
     b0c:	ldrb	w0, [x0, #57]
     b10:	cbnz	w0, b1c <_ZN6__lsan14InitCommonLsanEv+0x20>
     b14:	ldr	x30, [sp], #16
     b18:	ret
     b1c:	bl	928 <_ZN6__lsan22InitializeSuppressionsEv>
     b20:	bl	0 <_ZN6__lsan33InitializePlatformSpecificModulesEv>
     b24:	b	b14 <_ZN6__lsan14InitCommonLsanEv+0x18>

0000000000000b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>:
     b28:	stp	x29, x30, [sp, #-128]!
     b2c:	mov	x29, sp
     b30:	stp	x21, x22, [sp, #32]
     b34:	mov	x22, x0
     b38:	sub	w0, w4, #0x1
     b3c:	cmp	w0, #0x1
     b40:	b.hi	b84 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x5c>  // b.pmore
     b44:	stp	x19, x20, [x29, #16]
     b48:	stp	x23, x24, [x29, #48]
     b4c:	stp	x25, x26, [x29, #64]
     b50:	mov	x21, x1
     b54:	mov	x25, x2
     b58:	mov	x1, x3
     b5c:	mov	w26, w4
     b60:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b64:	ldrb	w0, [x0]
     b68:	cbz	w0, bb4 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x8c>
     b6c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b70:	ldrb	w0, [x0]
     b74:	cbnz	w0, bc8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xa0>
     b78:	mov	x19, x22
     b7c:	mov	x24, #0x1                   	// #1
     b80:	b	bf8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xd0>
     b84:	stp	x19, x20, [x29, #16]
     b88:	stp	x23, x24, [x29, #48]
     b8c:	stp	x25, x26, [x29, #64]
     b90:	stp	x27, x28, [x29, #80]
     b94:	mov	x4, #0x0                   	// #0
     b98:	mov	x3, #0x0                   	// #0
     b9c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     ba0:	add	x2, x2, #0x0
     ba4:	mov	w1, #0x9e                  	// #158
     ba8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     bac:	add	x0, x0, #0x0
     bb0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bb4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     bb8:	ldrb	w0, [x0]
     bbc:	mov	x24, #0x8                   	// #8
     bc0:	cbz	w0, be0 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xb8>
     bc4:	b	bcc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xa4>
     bc8:	mov	x24, #0x1                   	// #1
     bcc:	mov	x3, x21
     bd0:	mov	x2, x22
     bd4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     bd8:	add	x0, x0, #0x0
     bdc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     be0:	udiv	x0, x22, x24
     be4:	msub	x0, x0, x24, x22
     be8:	add	x19, x22, x24
     bec:	sub	x19, x19, x0
     bf0:	cmp	x0, #0x0
     bf4:	csel	x19, x19, x22, ne  // ne = any
     bf8:	add	x0, x19, #0x8
     bfc:	cmp	x21, x0
     c00:	b.cc	ef0 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x3c8>  // b.lo, b.ul, b.last
     c04:	stp	x27, x28, [x29, #80]
     c08:	mov	w27, #0x3f                  	// #63
     c0c:	clz	x23, x29
     c10:	sub	w23, w27, w23
     c14:	add	w23, w23, #0x1
     c18:	b	dbc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x294>
     c1c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     c20:	ldrb	w0, [x0]
     c24:	cbz	w0, dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>
     c28:	ldr	x0, [x29, #112]
     c2c:	str	x0, [x29, #104]
     c30:	add	x28, x29, #0x78
     c34:	mov	x0, x28
     c38:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c3c:	ldr	x1, [x29, #112]
     c40:	add	x1, x0, x1
     c44:	str	x1, [x29, #96]
     c48:	mov	x0, x28
     c4c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c50:	mov	x5, x0
     c54:	ldr	x4, [x29, #96]
     c58:	ldr	x3, [x29, #104]
     c5c:	mov	x2, x20
     c60:	mov	x1, x19
     c64:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     c68:	add	x0, x0, #0x0
     c6c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c70:	b	dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>
     c74:	ldr	x0, [x29, #112]
     c78:	str	x0, [x29, #104]
     c7c:	add	x28, x29, #0x78
     c80:	mov	x0, x28
     c84:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c88:	ldr	x1, [x29, #112]
     c8c:	add	x1, x0, x1
     c90:	str	x1, [x29, #96]
     c94:	mov	x0, x28
     c98:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c9c:	mov	x5, x0
     ca0:	ldr	x4, [x29, #96]
     ca4:	ldr	x3, [x29, #104]
     ca8:	mov	x2, x20
     cac:	mov	x1, x19
     cb0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     cb4:	add	x0, x0, #0x0
     cb8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     cbc:	b	e50 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x328>
     cc0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     cc4:	add	x2, x2, #0x0
     cc8:	mov	w1, #0x1be                 	// #446
     ccc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     cd0:	add	x0, x0, #0x0
     cd4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cd8:	mov	x3, x0
     cdc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     ce0:	add	x2, x2, #0x0
     ce4:	mov	w1, #0x17b                 	// #379
     ce8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     cec:	add	x0, x0, #0x0
     cf0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cf4:	mov	x4, x1
     cf8:	mov	x3, x0
     cfc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d00:	add	x2, x2, #0x0
     d04:	mov	w1, #0x17c                 	// #380
     d08:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d0c:	add	x0, x0, #0x0
     d10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d14:	mov	x4, x0
     d18:	lsl	x20, x4, #3
     d1c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d20:	ldr	x0, [x0]
     d24:	ldr	x0, [x0]
     d28:	cbz	x0, ec8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x3a0>
     d2c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d30:	ldr	x0, [x0]
     d34:	ldr	x0, [x0]
     d38:	sub	x1, x0, #0x1
     d3c:	tst	x0, x1
     d40:	b.ne	edc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x3b4>  // b.any
     d44:	add	x20, x20, x1
     d48:	neg	x0, x0
     d4c:	and	x20, x20, x0
     d50:	mov	w2, #0x0                   	// #0
     d54:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d58:	add	x1, x1, #0x0
     d5c:	mov	x0, x20
     d60:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     d64:	mov	x28, x0
     d68:	ldr	x2, [x25, #16]
     d6c:	lsl	x2, x2, #3
     d70:	ldr	x1, [x25]
     d74:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     d78:	ldr	x1, [x25, #8]
     d7c:	ldr	x0, [x25]
     d80:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d84:	str	x28, [x25]
     d88:	str	x20, [x25, #8]
     d8c:	ldr	x3, [x25]
     d90:	ldr	x0, [x25, #16]
     d94:	add	x1, x0, #0x1
     d98:	str	x1, [x25, #16]
     d9c:	mov	x2, #0x8                   	// #8
     da0:	add	x1, x29, #0x70
     da4:	add	x0, x3, x0, lsl #3
     da8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     dac:	add	x19, x19, x24
     db0:	add	x0, x19, #0x8
     db4:	cmp	x21, x0
     db8:	b.cc	eec <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x3c4>  // b.lo, b.ul, b.last
     dbc:	ldr	x20, [x19]
     dc0:	mov	x0, #0x3fff                	// #16383
     dc4:	cmp	x20, x0
     dc8:	b.ls	dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>  // b.plast
     dcc:	lsr	x0, x20, x23
     dd0:	cbnz	x0, dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>
     dd4:	mov	x0, x20
     dd8:	bl	0 <_ZN6__lsan15PointsIntoChunkEPv>
     ddc:	str	x0, [x29, #112]
     de0:	cmp	x0, #0x0
     de4:	ccmp	x0, x22, #0x4, ne  // ne = any
     de8:	b.eq	dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>  // b.none
     dec:	add	x28, x29, #0x78
     df0:	mov	x1, x0
     df4:	mov	x0, x28
     df8:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     dfc:	mov	x0, x28
     e00:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     e04:	cmp	w0, #0x2
     e08:	b.eq	dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>  // b.none
     e0c:	add	x0, x29, #0x78
     e10:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     e14:	cmp	w0, #0x3
     e18:	b.eq	dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>  // b.none
     e1c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e20:	ldrb	w0, [x0]
     e24:	cbnz	w0, e38 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x310>
     e28:	mov	x0, x19
     e2c:	bl	0 <_ZN6__lsan14WordIsPoisonedEm>
     e30:	and	w0, w0, #0xff
     e34:	cbnz	w0, c1c <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xf4>
     e38:	mov	w1, w26
     e3c:	add	x0, x29, #0x78
     e40:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
     e44:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e48:	ldrb	w0, [x0]
     e4c:	cbnz	w0, c74 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x14c>
     e50:	cbz	x25, dac <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x284>
     e54:	ldr	x3, [x25, #16]
     e58:	ldr	x0, [x25, #8]
     e5c:	lsr	x4, x0, #3
     e60:	cmp	x3, x0, lsr #3
     e64:	b.hi	cc0 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x198>  // b.pmore
     e68:	cmp	x3, x4
     e6c:	b.ne	d8c <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x264>  // b.any
     e70:	add	x0, x3, #0x1
     e74:	tst	x3, x0
     e78:	b.eq	d14 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1ec>  // b.none
     e7c:	clz	x1, x0
     e80:	sub	w1, w27, w1
     e84:	add	w2, w1, #0x1
     e88:	mov	x4, #0x1                   	// #1
     e8c:	lsl	x4, x4, x2
     e90:	cmp	x0, x4
     e94:	b.cs	cd8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1b0>  // b.hs, b.nlast
     e98:	mov	x2, #0x1                   	// #1
     e9c:	lsl	x1, x2, x1
     ea0:	cmp	x0, x1
     ea4:	b.ls	cf4 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1cc>  // b.plast
     ea8:	cmp	x3, x4
     eac:	b.ls	d18 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f0>  // b.plast
     eb0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     eb4:	add	x2, x2, #0x0
     eb8:	mov	w1, #0x1fd                 	// #509
     ebc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     ec0:	add	x0, x0, #0x0
     ec4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ec8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ecc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ed0:	ldr	x1, [x1]
     ed4:	str	x0, [x1]
     ed8:	b	d2c <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x204>
     edc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     ee0:	add	x0, x0, #0x0
     ee4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ee8:	bl	0 <_ZN11__sanitizer3DieEv>
     eec:	ldp	x27, x28, [x29, #80]
     ef0:	ldp	x19, x20, [x29, #16]
     ef4:	ldp	x23, x24, [x29, #48]
     ef8:	ldp	x25, x26, [x29, #64]
     efc:	ldp	x21, x22, [sp, #32]
     f00:	ldp	x29, x30, [sp], #128
     f04:	ret

0000000000000f08 <_ZN6__lsan24ForEachExtraStackRangeCbEmmPv>:
     f08:	str	x30, [sp, #-16]!
     f0c:	mov	w4, #0x2                   	// #2
     f10:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     f14:	add	x3, x3, #0x0
     f18:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     f1c:	ldr	x30, [sp], #16
     f20:	ret

0000000000000f24 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv>:
     f24:	stp	x19, x20, [sp, #-48]!
     f28:	str	x30, [sp, #16]
     f2c:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     f30:	mov	x20, x0
     f34:	add	x19, sp, #0x28
     f38:	mov	x1, x0
     f3c:	mov	x0, x19
     f40:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     f44:	mov	x0, x19
     f48:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     f4c:	and	w0, w0, #0xff
     f50:	cbnz	w0, f60 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv+0x3c>
     f54:	ldr	x30, [sp, #16]
     f58:	ldp	x19, x20, [sp], #48
     f5c:	ret
     f60:	add	x0, sp, #0x28
     f64:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     f68:	cmp	w0, #0x2
     f6c:	b.eq	f54 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv+0x30>  // b.none
     f70:	add	x0, sp, #0x28
     f74:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     f78:	mov	w4, #0x1                   	// #1
     f7c:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     f80:	add	x3, x3, #0x0
     f84:	mov	x2, #0x0                   	// #0
     f88:	add	x1, x0, x20
     f8c:	mov	x0, x20
     f90:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     f94:	b	f54 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv+0x30>

0000000000000f98 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE>:
     f98:	ldr	x2, [x0, #16]
     f9c:	cbz	x2, 1018 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE+0x80>
     fa0:	stp	x19, x20, [sp, #-64]!
     fa4:	stp	x21, x22, [sp, #16]
     fa8:	stp	x23, x30, [sp, #32]
     fac:	mov	x19, x0
     fb0:	mov	w22, w1
     fb4:	add	x21, sp, #0x38
     fb8:	adrp	x23, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     fbc:	add	x23, x23, #0x0
     fc0:	ldr	x0, [x19]
     fc4:	add	x0, x0, x2, lsl #3
     fc8:	ldur	x20, [x0, #-8]
     fcc:	sub	x2, x2, #0x1
     fd0:	str	x2, [x19, #16]
     fd4:	mov	x1, x20
     fd8:	mov	x0, x21
     fdc:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     fe0:	mov	x0, x21
     fe4:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     fe8:	mov	w4, w22
     fec:	mov	x3, x23
     ff0:	mov	x2, x19
     ff4:	add	x1, x0, x20
     ff8:	mov	x0, x20
     ffc:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1000:	ldr	x2, [x19, #16]
    1004:	cbnz	x2, fc0 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE+0x28>
    1008:	ldp	x21, x22, [sp, #16]
    100c:	ldp	x23, x30, [sp, #32]
    1010:	ldp	x19, x20, [sp], #64
    1014:	ret
    1018:	ret

000000000000101c <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE>:
    101c:	stp	x19, x20, [sp, #-48]!
    1020:	stp	x21, x30, [sp, #16]
    1024:	mov	x20, x0
    1028:	mov	x19, x1
    102c:	mov	x21, x2
    1030:	str	xzr, [sp, #40]
    1034:	str	xzr, [sp, #32]
    1038:	add	x1, sp, #0x20
    103c:	add	x0, sp, #0x28
    1040:	bl	0 <_ZN6__lsan23GetAllocatorGlobalRangeEPmS0_>
    1044:	ldr	x1, [sp, #40]
    1048:	cmp	x1, x19
    104c:	ccmp	x1, x20, #0x0, cc  // cc = lo, ul, last
    1050:	b.cs	107c <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x60>  // b.hs, b.nlast
    1054:	mov	w4, #0x2                   	// #2
    1058:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    105c:	add	x3, x3, #0x0
    1060:	mov	x2, x21
    1064:	mov	x1, x19
    1068:	mov	x0, x20
    106c:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1070:	ldp	x21, x30, [sp, #16]
    1074:	ldp	x19, x20, [sp], #48
    1078:	ret
    107c:	ldr	x3, [sp, #32]
    1080:	cmp	x1, x3
    1084:	b.hi	10c0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xa4>  // b.pmore
    1088:	cmp	x19, x3
    108c:	b.cc	10e0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xc4>  // b.lo, b.ul, b.last
    1090:	cmp	x1, x20
    1094:	b.hi	10fc <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xe0>  // b.pmore
    1098:	ldr	x0, [sp, #32]
    109c:	cmp	x0, x19
    10a0:	b.cs	1070 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x54>  // b.hs, b.nlast
    10a4:	mov	w4, #0x2                   	// #2
    10a8:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10ac:	add	x3, x3, #0x0
    10b0:	mov	x2, x21
    10b4:	mov	x1, x19
    10b8:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    10bc:	b	1070 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x54>
    10c0:	mov	x4, x3
    10c4:	mov	x3, x1
    10c8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10cc:	add	x2, x2, #0x0
    10d0:	mov	w1, #0xc4                  	// #196
    10d4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10d8:	add	x0, x0, #0x0
    10dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    10e0:	mov	x4, x19
    10e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10e8:	add	x2, x2, #0x0
    10ec:	mov	w1, #0xc5                  	// #197
    10f0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10f4:	add	x0, x0, #0x0
    10f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    10fc:	mov	w4, #0x2                   	// #2
    1100:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1104:	add	x3, x3, #0x0
    1108:	mov	x2, x21
    110c:	mov	x0, x20
    1110:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1114:	b	1098 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x7c>

0000000000001118 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb>:
    1118:	stp	x19, x20, [sp, #-48]!
    111c:	stp	x21, x22, [sp, #16]
    1120:	str	x30, [sp, #32]
    1124:	mov	x5, x1
    1128:	mov	x6, x2
    112c:	and	w22, w4, #0xff
    1130:	ldr	x1, [x1]
    1134:	cmp	x1, x2
    1138:	csel	x20, x1, x2, cs  // cs = hs, nlast
    113c:	ldr	x4, [x5, #8]
    1140:	add	x2, x1, x4
    1144:	cmp	x2, x3
    1148:	csel	x21, x2, x3, ls  // ls = plast
    114c:	cmp	x21, x20
    1150:	b.ls	1194 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0x7c>  // b.plast
    1154:	mov	x19, x0
    1158:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    115c:	ldrb	w0, [x0]
    1160:	cbz	w0, 1190 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0x78>
    1164:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1168:	add	x0, x0, #0x0
    116c:	adrp	x5, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1170:	add	x5, x5, #0x0
    1174:	cmp	w22, #0x0
    1178:	csel	x5, x5, x0, ne  // ne = any
    117c:	mov	x4, x3
    1180:	mov	x3, x6
    1184:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1188:	add	x0, x0, #0x0
    118c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1190:	cbnz	w22, 11a4 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0x8c>
    1194:	ldp	x21, x22, [sp, #16]
    1198:	ldr	x30, [sp, #32]
    119c:	ldp	x19, x20, [sp], #48
    11a0:	ret
    11a4:	mov	w4, #0x2                   	// #2
    11a8:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    11ac:	add	x3, x3, #0x0
    11b0:	mov	x2, x19
    11b4:	mov	x1, x21
    11b8:	mov	x0, x20
    11bc:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    11c0:	b	1194 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0x7c>

00000000000011c4 <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE>:
    11c4:	stp	x19, x20, [sp, #-80]!
    11c8:	str	x30, [sp, #16]
    11cc:	mov	x19, x0
    11d0:	add	x20, sp, #0x38
    11d4:	mov	x0, x20
    11d8:	bl	0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev>
    11dc:	str	x19, [sp, #32]
    11e0:	str	x20, [sp, #40]
    11e4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    11e8:	ldrb	w0, [x0]
    11ec:	cbz	w0, 11fc <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE+0x38>
    11f0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    11f4:	ldrb	w0, [x0]
    11f8:	cbnz	w0, 1228 <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE+0x64>
    11fc:	strb	w0, [sp, #48]
    1200:	add	x1, sp, #0x20
    1204:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1208:	add	x0, x0, #0x0
    120c:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    1210:	ldr	x1, [sp, #64]
    1214:	ldr	x0, [sp, #56]
    1218:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    121c:	ldr	x30, [sp, #16]
    1220:	ldp	x19, x20, [sp], #80
    1224:	ret
    1228:	bl	0 <_ZN6__lsan9GetLinkerEv>
    122c:	cmp	x0, #0x0
    1230:	cset	w0, ne  // ne = any
    1234:	b	11fc <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE+0x38>

0000000000001238 <_ZN6__lsan16HasReportedLeaksEv>:
    1238:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    123c:	ldrb	w0, [x0]
    1240:	ret

0000000000001244 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE>:
    1244:	stp	x19, x20, [sp, #-96]!
    1248:	stp	x21, x22, [sp, #16]
    124c:	str	x30, [sp, #56]
    1250:	cmp	w4, #0x1
    1254:	b.hi	1280 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x3c>  // b.pmore
    1258:	mov	x20, x0
    125c:	mov	x22, x1
    1260:	mov	x21, x3
    1264:	cmp	w4, #0x0
    1268:	cset	w1, eq  // eq = none
    126c:	ldr	x6, [x0, #24]
    1270:	cbz	x6, 1774 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x530>
    1274:	ldr	x4, [x0, #8]
    1278:	mov	x19, #0x0                   	// #0
    127c:	b	12dc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x98>
    1280:	stp	x23, x24, [sp, #32]
    1284:	str	x25, [sp, #48]
    1288:	mov	x4, #0x0                   	// #0
    128c:	mov	x3, #0x0                   	// #0
    1290:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1294:	add	x2, x2, #0x0
    1298:	mov	w1, #0x29f                 	// #671
    129c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12a0:	add	x0, x0, #0x0
    12a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    12a8:	stp	x23, x24, [sp, #32]
    12ac:	str	x25, [sp, #48]
    12b0:	mov	x3, x19
    12b4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12b8:	add	x2, x2, #0x0
    12bc:	mov	w1, #0x1b6                 	// #438
    12c0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12c4:	add	x0, x0, #0x0
    12c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    12cc:	add	x19, x19, #0x1
    12d0:	add	x4, x4, #0x20
    12d4:	cmp	x19, x6
    12d8:	b.eq	13bc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x178>  // b.none
    12dc:	lsl	x7, x19, #5
    12e0:	ldr	w5, [x4, #24]
    12e4:	cmp	w5, w2
    12e8:	b.ne	12cc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x88>  // b.any
    12ec:	ldrb	w0, [x4, #28]
    12f0:	cmp	w0, w1
    12f4:	b.ne	12cc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x88>  // b.any
    12f8:	ldr	x0, [x4, #8]
    12fc:	add	x0, x0, #0x1
    1300:	str	x0, [x4, #8]
    1304:	ldr	x4, [x20, #24]
    1308:	cmp	x4, x19
    130c:	b.ls	12a8 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x64>  // b.plast
    1310:	ldr	x0, [x20, #8]
    1314:	add	x7, x0, x7
    1318:	ldr	x0, [x7, #16]
    131c:	add	x0, x0, x21
    1320:	str	x0, [x7, #16]
    1324:	ldr	x0, [x20, #24]
    1328:	cmp	x0, x19
    132c:	b.eq	1438 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1f4>  // b.none
    1330:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1334:	ldrb	w0, [x0]
    1338:	cbz	w0, 13ac <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x168>
    133c:	ldr	x4, [x20, #24]
    1340:	cmp	x19, x4
    1344:	b.cs	15cc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x388>  // b.hs, b.nlast
    1348:	ldr	x0, [x20, #8]
    134c:	lsl	x19, x19, #5
    1350:	ldr	w0, [x0, x19]
    1354:	str	w0, [sp, #64]
    1358:	str	x22, [sp, #72]
    135c:	str	x21, [sp, #80]
    1360:	ldr	x3, [x20, #48]
    1364:	ldr	x0, [x20, #40]
    1368:	mov	x1, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    136c:	movk	x1, #0xaaab
    1370:	umulh	x0, x0, x1
    1374:	lsr	x4, x0, #4
    1378:	cmp	x3, x0, lsr #4
    137c:	b.hi	15f0 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x3ac>  // b.pmore
    1380:	cmp	x3, x4
    1384:	b.eq	1610 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x3cc>  // b.none
    1388:	ldr	x3, [x20, #32]
    138c:	ldr	x1, [x20, #48]
    1390:	add	x0, x1, #0x1
    1394:	str	x0, [x20, #48]
    1398:	add	x0, x1, x1, lsl #1
    139c:	mov	x2, #0x18                  	// #24
    13a0:	add	x1, sp, #0x40
    13a4:	add	x0, x3, x0, lsl #3
    13a8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    13ac:	ldp	x21, x22, [sp, #16]
    13b0:	ldr	x30, [sp, #56]
    13b4:	ldp	x19, x20, [sp], #96
    13b8:	ret
    13bc:	ldr	x19, [x20, #24]
    13c0:	mov	x0, #0x1388                	// #5000
    13c4:	cmp	x19, x0
    13c8:	b.eq	13ac <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x168>  // b.none
    13cc:	stp	xzr, xzr, [sp, #64]
    13d0:	stp	xzr, xzr, [sp, #80]
    13d4:	mov	x0, #0x1                   	// #1
    13d8:	str	x0, [sp, #72]
    13dc:	ldr	w3, [x20]
    13e0:	add	w4, w3, #0x1
    13e4:	mov	x0, x20
    13e8:	str	w4, [x0], #8
    13ec:	str	w3, [sp, #64]
    13f0:	str	x21, [sp, #80]
    13f4:	str	w2, [sp, #88]
    13f8:	strb	w1, [sp, #92]
    13fc:	ldr	x0, [x0, #8]
    1400:	lsr	x4, x0, #5
    1404:	cmp	x19, x0, lsr #5
    1408:	b.hi	1440 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1fc>  // b.pmore
    140c:	cmp	x19, x4
    1410:	b.eq	1464 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x220>  // b.none
    1414:	ldr	x3, [x20, #8]
    1418:	ldr	x0, [x20, #24]
    141c:	add	x2, x0, #0x1
    1420:	str	x2, [x20, #24]
    1424:	mov	x2, #0x20                  	// #32
    1428:	add	x1, sp, #0x40
    142c:	add	x0, x3, x0, lsl #5
    1430:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1434:	b	1330 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0xec>
    1438:	mov	x19, x0
    143c:	b	13c0 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x17c>
    1440:	stp	x23, x24, [sp, #32]
    1444:	str	x25, [sp, #48]
    1448:	mov	x3, x19
    144c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1450:	add	x2, x2, #0x0
    1454:	mov	w1, #0x1be                 	// #446
    1458:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    145c:	add	x0, x0, #0x0
    1460:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1464:	stp	x23, x24, [sp, #32]
    1468:	str	x25, [sp, #48]
    146c:	adds	x3, x19, #0x1
    1470:	b.eq	1538 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x2f4>  // b.none
    1474:	tst	x19, x3
    1478:	b.eq	14b8 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x274>  // b.none
    147c:	clz	x1, x3
    1480:	mov	w0, #0x3f                  	// #63
    1484:	sub	w1, w0, w1
    1488:	add	w0, w1, #0x1
    148c:	mov	x4, #0x1                   	// #1
    1490:	lsl	x4, x4, x0
    1494:	cmp	x3, x4
    1498:	b.cs	1558 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x314>  // b.hs, b.nlast
    149c:	mov	x0, #0x1                   	// #1
    14a0:	lsl	x0, x0, x1
    14a4:	cmp	x3, x0
    14a8:	b.ls	1570 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x32c>  // b.plast
    14ac:	mov	x3, x4
    14b0:	cmp	x19, x4
    14b4:	b.hi	158c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x348>  // b.pmore
    14b8:	lsl	x23, x3, #5
    14bc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    14c0:	ldr	x0, [x0]
    14c4:	ldr	x0, [x0]
    14c8:	cbz	x0, 15a8 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x364>
    14cc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    14d0:	ldr	x0, [x0]
    14d4:	ldr	x0, [x0]
    14d8:	sub	x1, x0, #0x1
    14dc:	tst	x0, x1
    14e0:	b.ne	15bc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x378>  // b.any
    14e4:	add	x23, x23, x1
    14e8:	neg	x0, x0
    14ec:	and	x23, x23, x0
    14f0:	mov	w2, #0x0                   	// #0
    14f4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    14f8:	add	x1, x1, #0x0
    14fc:	mov	x0, x23
    1500:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1504:	mov	x25, x0
    1508:	ldr	x2, [x20, #24]
    150c:	lsl	x2, x2, #5
    1510:	ldr	x1, [x20, #8]
    1514:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1518:	ldr	x1, [x20, #16]
    151c:	ldr	x0, [x20, #8]
    1520:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1524:	str	x25, [x20, #8]
    1528:	str	x23, [x20, #16]
    152c:	ldp	x23, x24, [sp, #32]
    1530:	ldr	x25, [sp, #48]
    1534:	b	1414 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1d0>
    1538:	mov	x4, #0x0                   	// #0
    153c:	mov	x3, #0x0                   	// #0
    1540:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1544:	add	x2, x2, #0x0
    1548:	mov	w1, #0x177                 	// #375
    154c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1550:	add	x0, x0, #0x0
    1554:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1558:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    155c:	add	x2, x2, #0x0
    1560:	mov	w1, #0x17b                 	// #379
    1564:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1568:	add	x0, x0, #0x0
    156c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1570:	mov	x4, x0
    1574:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1578:	add	x2, x2, #0x0
    157c:	mov	w1, #0x17c                 	// #380
    1580:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1584:	add	x0, x0, #0x0
    1588:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    158c:	mov	x3, x19
    1590:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1594:	add	x2, x2, #0x0
    1598:	mov	w1, #0x1fd                 	// #509
    159c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15a0:	add	x0, x0, #0x0
    15a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    15ac:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    15b0:	ldr	x1, [x1]
    15b4:	str	x0, [x1]
    15b8:	b	14cc <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x288>
    15bc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15c0:	add	x0, x0, #0x0
    15c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    15c8:	bl	0 <_ZN11__sanitizer3DieEv>
    15cc:	stp	x23, x24, [sp, #32]
    15d0:	str	x25, [sp, #48]
    15d4:	mov	x3, x19
    15d8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15dc:	add	x2, x2, #0x0
    15e0:	mov	w1, #0x1b6                 	// #438
    15e4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15e8:	add	x0, x0, #0x0
    15ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15f0:	stp	x23, x24, [sp, #32]
    15f4:	str	x25, [sp, #48]
    15f8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15fc:	add	x2, x2, #0x0
    1600:	mov	w1, #0x1be                 	// #446
    1604:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1608:	add	x0, x0, #0x0
    160c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1610:	add	x0, x3, #0x1
    1614:	tst	x3, x0
    1618:	b.eq	1740 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x4fc>  // b.none
    161c:	clz	x2, x0
    1620:	mov	w1, #0x3f                  	// #63
    1624:	sub	w1, w1, w2
    1628:	add	w2, w1, #0x1
    162c:	mov	x4, #0x1                   	// #1
    1630:	lsl	x4, x4, x2
    1634:	cmp	x0, x4
    1638:	b.cs	16d4 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x490>  // b.hs, b.nlast
    163c:	mov	x2, #0x1                   	// #1
    1640:	lsl	x1, x2, x1
    1644:	cmp	x0, x1
    1648:	b.ls	16f8 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x4b4>  // b.plast
    164c:	cmp	x3, x4
    1650:	b.hi	1720 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x4dc>  // b.pmore
    1654:	add	x4, x4, x4, lsl #1
    1658:	lsl	x19, x4, #3
    165c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1660:	ldr	x0, [x0]
    1664:	ldr	x0, [x0]
    1668:	cbz	x0, 1748 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x504>
    166c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1670:	ldr	x0, [x0]
    1674:	ldr	x0, [x0]
    1678:	sub	x1, x0, #0x1
    167c:	tst	x0, x1
    1680:	b.ne	175c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x518>  // b.any
    1684:	add	x19, x19, x1
    1688:	neg	x0, x0
    168c:	and	x19, x19, x0
    1690:	mov	w2, #0x0                   	// #0
    1694:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1698:	add	x1, x1, #0x0
    169c:	mov	x0, x19
    16a0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    16a4:	mov	x22, x0
    16a8:	ldr	x1, [x20, #48]
    16ac:	add	x1, x1, x1, lsl #1
    16b0:	lsl	x2, x1, #3
    16b4:	ldr	x1, [x20, #32]
    16b8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    16bc:	ldr	x1, [x20, #40]
    16c0:	ldr	x0, [x20, #32]
    16c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    16c8:	str	x22, [x20, #32]
    16cc:	str	x19, [x20, #40]
    16d0:	b	1388 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x144>
    16d4:	stp	x23, x24, [sp, #32]
    16d8:	str	x25, [sp, #48]
    16dc:	mov	x3, x0
    16e0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    16e4:	add	x2, x2, #0x0
    16e8:	mov	w1, #0x17b                 	// #379
    16ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    16f0:	add	x0, x0, #0x0
    16f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    16f8:	stp	x23, x24, [sp, #32]
    16fc:	str	x25, [sp, #48]
    1700:	mov	x4, x1
    1704:	mov	x3, x0
    1708:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    170c:	add	x2, x2, #0x0
    1710:	mov	w1, #0x17c                 	// #380
    1714:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1718:	add	x0, x0, #0x0
    171c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1720:	stp	x23, x24, [sp, #32]
    1724:	str	x25, [sp, #48]
    1728:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    172c:	add	x2, x2, #0x0
    1730:	mov	w1, #0x1fd                 	// #509
    1734:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1738:	add	x0, x0, #0x0
    173c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1740:	mov	x4, x0
    1744:	b	1654 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x410>
    1748:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    174c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1750:	ldr	x1, [x1]
    1754:	str	x0, [x1]
    1758:	b	166c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x428>
    175c:	stp	x23, x24, [sp, #32]
    1760:	str	x25, [sp, #48]
    1764:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1768:	add	x0, x0, #0x0
    176c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1770:	bl	0 <_ZN11__sanitizer3DieEv>
    1774:	stp	xzr, xzr, [sp, #64]
    1778:	stp	xzr, xzr, [sp, #80]
    177c:	mov	x0, #0x1                   	// #1
    1780:	str	x0, [sp, #72]
    1784:	ldr	w3, [x20]
    1788:	add	w4, w3, #0x1
    178c:	mov	x0, x20
    1790:	str	w4, [x0], #8
    1794:	str	w3, [sp, #64]
    1798:	str	x21, [sp, #80]
    179c:	str	w2, [sp, #88]
    17a0:	strb	w1, [sp, #92]
    17a4:	ldr	x4, [x0, #8]
    17a8:	lsr	x4, x4, #5
    17ac:	mov	x19, x6
    17b0:	b	140c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1c8>

00000000000017b4 <_ZN6__lsanL14CollectLeaksCbEmPv>:
    17b4:	stp	x19, x20, [sp, #-64]!
    17b8:	str	x30, [sp, #40]
    17bc:	cbz	x1, 1800 <_ZN6__lsanL14CollectLeaksCbEmPv+0x4c>
    17c0:	stp	x21, x22, [sp, #16]
    17c4:	mov	x20, x1
    17c8:	bl	0 <_ZN6__lsan12GetUserBeginEm>
    17cc:	mov	x21, x0
    17d0:	add	x19, sp, #0x38
    17d4:	mov	x1, x0
    17d8:	mov	x0, x19
    17dc:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
    17e0:	mov	x0, x19
    17e4:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
    17e8:	and	w0, w0, #0xff
    17ec:	cbnz	w0, 1828 <_ZN6__lsanL14CollectLeaksCbEmPv+0x74>
    17f0:	ldp	x21, x22, [sp, #16]
    17f4:	ldr	x30, [sp, #40]
    17f8:	ldp	x19, x20, [sp], #64
    17fc:	ret
    1800:	stp	x21, x22, [sp, #16]
    1804:	str	x23, [sp, #32]
    1808:	mov	x4, #0x0                   	// #0
    180c:	mov	x3, #0x0                   	// #0
    1810:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1814:	add	x2, x2, #0x0
    1818:	mov	w1, #0x1e8                 	// #488
    181c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1820:	add	x0, x0, #0x0
    1824:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1828:	add	x0, sp, #0x38
    182c:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    1830:	cbnz	w0, 189c <_ZN6__lsanL14CollectLeaksCbEmPv+0xe8>
    1834:	str	x23, [sp, #32]
    1838:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    183c:	ldr	w19, [x0]
    1840:	cbz	w19, 18b0 <_ZN6__lsanL14CollectLeaksCbEmPv+0xfc>
    1844:	add	x0, sp, #0x38
    1848:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
    184c:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
    1850:	cmp	w19, w1
    1854:	csel	w19, w19, w1, cc  // cc = lo, ul, last
    1858:	bfxil	x1, x19, #0, #32
    185c:	bl	0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>
    1860:	mov	w19, w0
    1864:	add	x23, sp, #0x38
    1868:	mov	x0, x23
    186c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
    1870:	mov	x22, x0
    1874:	mov	x0, x23
    1878:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    187c:	mov	w4, w0
    1880:	mov	x3, x22
    1884:	mov	w2, w19
    1888:	mov	x1, x21
    188c:	mov	x0, x20
    1890:	bl	1244 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE>
    1894:	ldr	x23, [sp, #32]
    1898:	b	17f0 <_ZN6__lsanL14CollectLeaksCbEmPv+0x3c>
    189c:	add	x0, sp, #0x38
    18a0:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    18a4:	cmp	w0, #0x1
    18a8:	b.ne	17f0 <_ZN6__lsanL14CollectLeaksCbEmPv+0x3c>  // b.any
    18ac:	b	1834 <_ZN6__lsanL14CollectLeaksCbEmPv+0x80>
    18b0:	add	x0, sp, #0x38
    18b4:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
    18b8:	mov	w19, w0
    18bc:	b	1864 <_ZN6__lsanL14CollectLeaksCbEmPv+0xb0>

00000000000018c0 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm>:
    18c0:	stp	x19, x20, [sp, #-48]!
    18c4:	str	x30, [sp, #40]
    18c8:	ldr	x4, [x0, #24]
    18cc:	cmp	x1, x4
    18d0:	b.cs	1908 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x48>  // b.hs, b.nlast
    18d4:	stp	x21, x22, [sp, #16]
    18d8:	mov	x21, x0
    18dc:	ldr	x0, [x0, #8]
    18e0:	lsl	x1, x1, #5
    18e4:	ldr	w22, [x0, x1]
    18e8:	ldr	x0, [x21, #48]
    18ec:	cbz	x0, 196c <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0xac>
    18f0:	str	x23, [sp, #32]
    18f4:	mov	x19, #0x0                   	// #0
    18f8:	mov	x20, #0x0                   	// #0
    18fc:	adrp	x23, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1900:	add	x23, x23, #0x0
    1904:	b	1950 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x90>
    1908:	stp	x21, x22, [sp, #16]
    190c:	str	x23, [sp, #32]
    1910:	mov	x3, x1
    1914:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1918:	add	x2, x2, #0x0
    191c:	mov	w1, #0x1b6                 	// #438
    1920:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1924:	add	x0, x0, #0x0
    1928:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    192c:	ldr	x2, [x3, #16]
    1930:	ldr	x1, [x3, #8]
    1934:	mov	x0, x23
    1938:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    193c:	add	x20, x20, #0x1
    1940:	add	x19, x19, #0x18
    1944:	ldr	x0, [x21, #48]
    1948:	cmp	x20, x0
    194c:	b.cs	1968 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0xa8>  // b.hs, b.nlast
    1950:	ldr	x1, [x21, #32]
    1954:	add	x3, x1, x19
    1958:	ldr	w0, [x1, x19]
    195c:	cmp	w0, w22
    1960:	b.ne	193c <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x7c>  // b.any
    1964:	b	192c <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x6c>
    1968:	ldr	x23, [sp, #32]
    196c:	ldp	x21, x22, [sp, #16]
    1970:	ldr	x30, [sp, #40]
    1974:	ldp	x19, x20, [sp], #48
    1978:	ret

000000000000197c <_ZN6__lsan10LeakReport18PrintReportForLeakEm>:
    197c:	stp	x19, x20, [sp, #-64]!
    1980:	stp	x21, x22, [sp, #16]
    1984:	stp	x23, x30, [sp, #32]
    1988:	mov	x20, x0
    198c:	mov	x19, x1
    1990:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
    1994:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1998:	add	x2, x2, #0x0
    199c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19a0:	add	x1, x1, #0x0
    19a4:	ands	w21, w0, #0xff
    19a8:	csel	x1, x1, x2, ne  // ne = any
    19ac:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19b0:	add	x0, x0, #0x0
    19b4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19b8:	ldr	x4, [x20, #24]
    19bc:	cmp	x19, x4
    19c0:	b.cs	1a70 <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0xf4>  // b.hs, b.nlast
    19c4:	lsl	x23, x19, #5
    19c8:	mov	x22, x20
    19cc:	ldr	x2, [x22, #8]!
    19d0:	add	x2, x2, x23
    19d4:	ldrb	w3, [x2, #28]
    19d8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19dc:	add	x0, x0, #0x0
    19e0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19e4:	add	x1, x1, #0x0
    19e8:	cmp	w3, #0x0
    19ec:	ldr	x3, [x2, #8]
    19f0:	ldr	x2, [x2, #16]
    19f4:	csel	x1, x1, x0, ne  // ne = any
    19f8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19fc:	add	x0, x0, #0x0
    1a00:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1a04:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a08:	add	x0, x0, #0x0
    1a0c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a10:	add	x1, x1, #0x0
    1a14:	cmp	w21, #0x0
    1a18:	csel	x1, x1, x0, ne  // ne = any
    1a1c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a20:	add	x0, x0, #0x0
    1a24:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1a28:	ldr	x4, [x22, #16]
    1a2c:	cmp	x19, x4
    1a30:	b.cs	1a8c <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0x110>  // b.hs, b.nlast
    1a34:	ldr	x0, [x20, #8]
    1a38:	add	x23, x0, x23
    1a3c:	ldr	w0, [x23, #24]
    1a40:	cbz	w0, 1aa8 <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0x12c>
    1a44:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
    1a48:	stp	x0, x1, [sp, #48]
    1a4c:	add	x0, sp, #0x30
    1a50:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
    1a54:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a58:	ldrb	w0, [x0]
    1a5c:	cbnz	w0, 1ac8 <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0x14c>
    1a60:	ldp	x21, x22, [sp, #16]
    1a64:	ldp	x23, x30, [sp, #32]
    1a68:	ldp	x19, x20, [sp], #64
    1a6c:	ret
    1a70:	mov	x3, x19
    1a74:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a78:	add	x2, x2, #0x0
    1a7c:	mov	w1, #0x1b6                 	// #438
    1a80:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a84:	add	x0, x0, #0x0
    1a88:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1a8c:	mov	x3, x19
    1a90:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a94:	add	x2, x2, #0x0
    1a98:	mov	w1, #0x1b6                 	// #438
    1a9c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1aa0:	add	x0, x0, #0x0
    1aa4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1aa8:	mov	x4, #0x0                   	// #0
    1aac:	mov	x3, #0x0                   	// #0
    1ab0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ab4:	add	x2, x2, #0x0
    1ab8:	mov	w1, #0x1e1                 	// #481
    1abc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ac0:	add	x0, x0, #0x0
    1ac4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1ac8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1acc:	add	x0, x0, #0x0
    1ad0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1ad4:	mov	x1, x19
    1ad8:	mov	x0, x20
    1adc:	bl	18c0 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm>
    1ae0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ae4:	add	x0, x0, #0x0
    1ae8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1aec:	b	1a60 <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0xe4>

0000000000001af0 <_ZN6__lsan10LeakReport12PrintSummaryEv>:
    1af0:	stp	x19, x20, [sp, #-80]!
    1af4:	stp	x21, x22, [sp, #16]
    1af8:	str	x30, [sp, #32]
    1afc:	ldr	x19, [x0, #24]
    1b00:	mov	x1, #0x1388                	// #5000
    1b04:	cmp	x19, x1
    1b08:	b.hi	1b24 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x34>  // b.pmore
    1b0c:	cbz	x19, 1b6c <_ZN6__lsan10LeakReport12PrintSummaryEv+0x7c>
    1b10:	ldr	x0, [x0, #8]
    1b14:	add	x2, x0, x19, lsl #5
    1b18:	mov	x20, #0x0                   	// #0
    1b1c:	mov	x19, #0x0                   	// #0
    1b20:	b	1b50 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x60>
    1b24:	mov	x4, #0x0                   	// #0
    1b28:	mov	x3, #0x0                   	// #0
    1b2c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1b30:	add	x2, x2, #0x0
    1b34:	mov	w1, #0x2f1                 	// #753
    1b38:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1b3c:	add	x0, x0, #0x0
    1b40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1b44:	add	x0, x0, #0x20
    1b48:	cmp	x2, x0
    1b4c:	b.eq	1b70 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x80>  // b.none
    1b50:	ldrb	w1, [x0, #29]
    1b54:	cbnz	w1, 1b44 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x54>
    1b58:	ldr	x1, [x0, #16]
    1b5c:	add	x19, x19, x1
    1b60:	ldr	x1, [x0, #8]
    1b64:	add	x20, x20, x1
    1b68:	b	1b44 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x54>
    1b6c:	mov	x20, x19
    1b70:	str	xzr, [sp, #56]
    1b74:	str	xzr, [sp, #64]
    1b78:	str	xzr, [sp, #48]
    1b7c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1b80:	ldr	x0, [x0]
    1b84:	ldr	x0, [x0]
    1b88:	cbz	x0, 1c6c <_ZN6__lsan10LeakReport12PrintSummaryEv+0x17c>
    1b8c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1b90:	ldr	x0, [x0]
    1b94:	ldr	x0, [x0]
    1b98:	sub	x1, x0, #0x1
    1b9c:	tst	x1, x0
    1ba0:	b.ne	1c80 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x190>  // b.any
    1ba4:	add	x21, x0, #0x3ff
    1ba8:	neg	x0, x0
    1bac:	and	x21, x21, x0
    1bb0:	mov	w2, #0x0                   	// #0
    1bb4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1bb8:	add	x1, x1, #0x0
    1bbc:	mov	x0, x21
    1bc0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1bc4:	mov	x22, x0
    1bc8:	ldr	x2, [sp, #64]
    1bcc:	ldr	x1, [sp, #48]
    1bd0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1bd4:	ldr	x1, [sp, #56]
    1bd8:	ldr	x0, [sp, #48]
    1bdc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1be0:	str	x22, [sp, #48]
    1be4:	str	x21, [sp, #56]
    1be8:	ldr	x0, [sp, #64]
    1bec:	cmp	x0, #0x3ff
    1bf0:	b.hi	1c18 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x128>  // b.pmore
    1bf4:	cmp	x21, #0x3ff
    1bf8:	b.ls	1c90 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x1a0>  // b.plast
    1bfc:	ldr	x0, [sp, #64]
    1c00:	mov	x2, #0x400                 	// #1024
    1c04:	sub	x2, x2, x0
    1c08:	mov	w1, #0x0                   	// #0
    1c0c:	ldr	x3, [sp, #48]
    1c10:	add	x0, x3, x0
    1c14:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1c18:	mov	x0, #0x400                 	// #1024
    1c1c:	str	x0, [sp, #64]
    1c20:	str	xzr, [sp, #72]
    1c24:	ldr	x0, [sp, #48]
    1c28:	strb	wzr, [x0]
    1c2c:	mov	x3, x20
    1c30:	mov	x2, x19
    1c34:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c38:	add	x1, x1, #0x0
    1c3c:	add	x0, sp, #0x30
    1c40:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1c44:	mov	x1, #0x0                   	// #0
    1c48:	ldr	x0, [sp, #48]
    1c4c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
    1c50:	ldr	x1, [sp, #56]
    1c54:	ldr	x0, [sp, #48]
    1c58:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1c5c:	ldp	x21, x22, [sp, #16]
    1c60:	ldr	x30, [sp, #32]
    1c64:	ldp	x19, x20, [sp], #80
    1c68:	ret
    1c6c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1c70:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1c74:	ldr	x1, [x1]
    1c78:	str	x0, [x1]
    1c7c:	b	1b8c <_ZN6__lsan10LeakReport12PrintSummaryEv+0x9c>
    1c80:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c84:	add	x0, x0, #0x0
    1c88:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1c8c:	bl	0 <_ZN11__sanitizer3DieEv>
    1c90:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1c94:	ldr	x0, [x0]
    1c98:	ldr	x0, [x0]
    1c9c:	cbz	x0, 1d00 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x210>
    1ca0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1ca4:	ldr	x0, [x0]
    1ca8:	ldr	x0, [x0]
    1cac:	sub	x1, x0, #0x1
    1cb0:	tst	x1, x0
    1cb4:	b.ne	1d14 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x224>  // b.any
    1cb8:	add	x21, x0, #0x3ff
    1cbc:	neg	x0, x0
    1cc0:	and	x21, x21, x0
    1cc4:	mov	w2, #0x0                   	// #0
    1cc8:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ccc:	add	x1, x1, #0x0
    1cd0:	mov	x0, x21
    1cd4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1cd8:	mov	x22, x0
    1cdc:	ldr	x2, [sp, #64]
    1ce0:	ldr	x1, [sp, #48]
    1ce4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1ce8:	ldr	x1, [sp, #56]
    1cec:	ldr	x0, [sp, #48]
    1cf0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1cf4:	str	x22, [sp, #48]
    1cf8:	str	x21, [sp, #56]
    1cfc:	b	1bfc <_ZN6__lsan10LeakReport12PrintSummaryEv+0x10c>
    1d00:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1d04:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1d08:	ldr	x1, [x1]
    1d0c:	str	x0, [x1]
    1d10:	b	1ca0 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x1b0>
    1d14:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1d18:	add	x0, x0, #0x0
    1d1c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1d20:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000001d24 <_ZN6__lsan10LeakReport17ApplySuppressionsEv>:
    1d24:	stp	x19, x20, [sp, #-160]!
    1d28:	str	x30, [sp, #80]
    1d2c:	mov	x19, x0
    1d30:	ldr	x0, [x0, #24]
    1d34:	cbz	x0, 1ea0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x17c>
    1d38:	stp	x21, x22, [sp, #16]
    1d3c:	stp	x23, x24, [sp, #32]
    1d40:	stp	x25, x26, [sp, #48]
    1d44:	stp	x27, x28, [sp, #64]
    1d48:	mov	x23, #0x0                   	// #0
    1d4c:	add	x0, sp, #0x98
    1d50:	str	x0, [sp, #120]
    1d54:	adrp	x25, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1d58:	add	x25, x25, #0x0
    1d5c:	add	x25, x25, #0x18
    1d60:	b	1f20 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x1fc>
    1d64:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    1d68:	mov	x1, x20
    1d6c:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
    1d70:	mov	x20, x0
    1d74:	cbz	x0, 1dc0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x9c>
    1d78:	mov	x21, x0
    1d7c:	add	x28, sp, #0x88
    1d80:	mov	x3, x28
    1d84:	mov	x2, x25
    1d88:	ldr	x1, [x21, #40]
    1d8c:	mov	x0, x22
    1d90:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1d94:	and	w0, w0, #0xff
    1d98:	cbnz	w0, 1dc0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x9c>
    1d9c:	mov	x3, x28
    1da0:	mov	x2, x25
    1da4:	ldr	x1, [x21, #56]
    1da8:	mov	x0, x22
    1dac:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1db0:	and	w0, w0, #0xff
    1db4:	cbnz	w0, 1dc0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x9c>
    1db8:	ldr	x21, [x21]
    1dbc:	cbnz	x21, 1d80 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x5c>
    1dc0:	mov	x0, x20
    1dc4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    1dc8:	ldr	x0, [sp, #136]
    1dcc:	cbnz	x0, 1eac <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x188>
    1dd0:	add	x24, x24, #0x1
    1dd4:	ldr	x0, [sp, #104]
    1dd8:	cmp	x0, x24
    1ddc:	b.eq	1f10 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x1ec>  // b.none
    1de0:	ldr	x20, [x26, x24, lsl #3]
    1de4:	sub	x20, x20, #0x4
    1de8:	str	xzr, [sp, #136]
    1dec:	bl	8c <_ZN6__lsanL21GetSuppressionContextEv>
    1df0:	mov	x22, x0
    1df4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    1df8:	str	xzr, [sp, #144]
    1dfc:	ldr	x3, [sp, #120]
    1e00:	ldr	x2, [sp, #112]
    1e04:	mov	x1, x20
    1e08:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
    1e0c:	and	w0, w0, #0xff
    1e10:	cbz	w0, 1d64 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x40>
    1e14:	ldr	x1, [sp, #144]
    1e18:	cbz	x1, 1d64 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x40>
    1e1c:	add	x3, sp, #0x88
    1e20:	mov	x2, x25
    1e24:	mov	x0, x22
    1e28:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1e2c:	and	w0, w0, #0xff
    1e30:	cbz	w0, 1d64 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x40>
    1e34:	ldr	x0, [sp, #136]
    1e38:	b	1dcc <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xa8>
    1e3c:	mov	x3, x23
    1e40:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e44:	add	x2, x2, #0x0
    1e48:	mov	w1, #0x1b6                 	// #438
    1e4c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e50:	add	x0, x0, #0x0
    1e54:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e58:	mov	x3, x23
    1e5c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e60:	add	x2, x2, #0x0
    1e64:	mov	w1, #0x1b6                 	// #438
    1e68:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e6c:	add	x0, x0, #0x0
    1e70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e74:	mov	x3, x23
    1e78:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e7c:	add	x2, x2, #0x0
    1e80:	mov	w1, #0x1b6                 	// #438
    1e84:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e88:	add	x0, x0, #0x0
    1e8c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e90:	ldp	x21, x22, [sp, #16]
    1e94:	ldp	x23, x24, [sp, #32]
    1e98:	ldp	x25, x26, [sp, #48]
    1e9c:	ldp	x27, x28, [sp, #64]
    1ea0:	ldr	x30, [sp, #80]
    1ea4:	ldp	x19, x20, [sp], #160
    1ea8:	ret
    1eac:	ldr	x4, [x19, #24]
    1eb0:	cmp	x4, x23
    1eb4:	b.ls	1e3c <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x118>  // b.plast
    1eb8:	ldr	x2, [x19, #8]
    1ebc:	add	x2, x2, x27
    1ec0:	ldr	x1, [x0, #24]
    1ec4:	ldr	x2, [x2, #16]
    1ec8:	add	x1, x1, x2
    1ecc:	str	x1, [x0, #24]
    1ed0:	ldr	w1, [x0, #16]
    1ed4:	ldr	x4, [x19, #24]
    1ed8:	cmp	x4, x23
    1edc:	b.ls	1e58 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x134>  // b.plast
    1ee0:	ldr	x2, [x19, #8]
    1ee4:	add	x2, x2, x27
    1ee8:	ldr	x2, [x2, #8]
    1eec:	add	w1, w1, w2
    1ef0:	str	w1, [x0, #16]
    1ef4:	ldr	x4, [x19, #24]
    1ef8:	cmp	x4, x23
    1efc:	b.ls	1e74 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x150>  // b.plast
    1f00:	ldr	x0, [x19, #8]
    1f04:	add	x27, x0, x27
    1f08:	mov	w0, #0x1                   	// #1
    1f0c:	strb	w0, [x27, #29]
    1f10:	add	x23, x23, #0x1
    1f14:	ldr	x0, [x19, #24]
    1f18:	cmp	x0, x23
    1f1c:	b.ls	1e90 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x16c>  // b.plast
    1f20:	lsl	x27, x23, #5
    1f24:	ldr	x0, [x19, #8]
    1f28:	add	x0, x0, x27
    1f2c:	ldr	w0, [x0, #24]
    1f30:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
    1f34:	mov	x26, x0
    1f38:	mov	w0, w1
    1f3c:	str	x0, [sp, #104]
    1f40:	cbz	w1, 1f10 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x1ec>
    1f44:	mov	x24, #0x0                   	// #0
    1f48:	add	x0, sp, #0x90
    1f4c:	str	x0, [sp, #112]
    1f50:	b	1de0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xbc>

0000000000001f54 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>:
    1f54:	mov	x1, x0
    1f58:	ldr	x0, [x0, #24]
    1f5c:	cbz	x0, 1f84 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv+0x30>
    1f60:	ldr	x1, [x1, #8]
    1f64:	add	x3, x1, x0, lsl #5
    1f68:	mov	x0, #0x0                   	// #0
    1f6c:	ldrb	w2, [x1, #29]
    1f70:	cmp	w2, #0x0
    1f74:	cinc	x0, x0, eq  // eq = none
    1f78:	add	x1, x1, #0x20
    1f7c:	cmp	x3, x1
    1f80:	b.ne	1f6c <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv+0x18>  // b.any
    1f84:	ret

0000000000001f88 <__lsan_ignore_object>:
    1f88:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1f8c:	ldr	x1, [x1]
    1f90:	ldrb	w1, [x1, #57]
    1f94:	cbnz	w1, 1f9c <__lsan_ignore_object+0x14>
    1f98:	ret
    1f9c:	stp	x19, x30, [sp, #-16]!
    1fa0:	mov	x19, x0
    1fa4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1fa8:	add	x0, x0, #0x0
    1fac:	add	x0, x0, #0xe0
    1fb0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    1fb4:	mov	x0, x19
    1fb8:	bl	0 <_ZN6__lsan18IgnoreObjectLockedEPKv>
    1fbc:	cmp	w0, #0x2
    1fc0:	b.eq	1ff0 <__lsan_ignore_object+0x68>  // b.none
    1fc4:	cmp	w0, #0x1
    1fc8:	b.ne	2014 <__lsan_ignore_object+0x8c>  // b.any
    1fcc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    1fd0:	ldr	x0, [x0]
    1fd4:	ldr	w0, [x0]
    1fd8:	cbz	w0, 2028 <__lsan_ignore_object+0xa0>
    1fdc:	mov	x1, x19
    1fe0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1fe4:	add	x0, x0, #0x0
    1fe8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1fec:	b	2028 <__lsan_ignore_object+0xa0>
    1ff0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    1ff4:	ldr	x0, [x0]
    1ff8:	ldr	w0, [x0]
    1ffc:	cbz	w0, 2028 <__lsan_ignore_object+0xa0>
    2000:	mov	x1, x19
    2004:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2008:	add	x0, x0, #0x0
    200c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2010:	b	2028 <__lsan_ignore_object+0xa0>
    2014:	cbnz	w0, 2028 <__lsan_ignore_object+0xa0>
    2018:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    201c:	ldr	x0, [x0]
    2020:	ldr	w0, [x0]
    2024:	cbnz	w0, 2040 <__lsan_ignore_object+0xb8>
    2028:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    202c:	add	x0, x0, #0x0
    2030:	add	x0, x0, #0xe0
    2034:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    2038:	ldp	x19, x30, [sp], #16
    203c:	ret
    2040:	mov	x1, x19
    2044:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2048:	add	x0, x0, #0x0
    204c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2050:	b	2028 <__lsan_ignore_object+0xa0>

0000000000002054 <__lsan_register_root_region>:
    2054:	stp	x19, x20, [sp, #-64]!
    2058:	stp	x21, x22, [sp, #16]
    205c:	str	x30, [sp, #40]
    2060:	mov	x20, x0
    2064:	mov	x21, x1
    2068:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    206c:	add	x19, x19, #0x0
    2070:	add	x0, x19, #0xe0
    2074:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    2078:	ldr	x19, [x19, #144]
    207c:	cbz	x19, 20f4 <__lsan_register_root_region+0xa0>
    2080:	str	x20, [sp, #48]
    2084:	str	x21, [sp, #56]
    2088:	ldr	x3, [x19, #16]
    208c:	ldr	x0, [x19, #8]
    2090:	lsr	x4, x0, #4
    2094:	cmp	x3, x0, lsr #4
    2098:	b.hi	2118 <__lsan_register_root_region+0xc4>  // b.pmore
    209c:	cmp	x3, x4
    20a0:	b.eq	2134 <__lsan_register_root_region+0xe0>  // b.none
    20a4:	ldr	x3, [x19]
    20a8:	ldr	x0, [x19, #16]
    20ac:	add	x1, x0, #0x1
    20b0:	str	x1, [x19, #16]
    20b4:	mov	x2, #0x10                  	// #16
    20b8:	add	x1, sp, #0x30
    20bc:	add	x0, x3, x0, lsl #4
    20c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    20c4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    20c8:	ldr	x0, [x0]
    20cc:	ldr	w0, [x0]
    20d0:	cbnz	w0, 2278 <__lsan_register_root_region+0x224>
    20d4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    20d8:	add	x0, x0, #0x0
    20dc:	add	x0, x0, #0xe0
    20e0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    20e4:	ldp	x21, x22, [sp, #16]
    20e8:	ldr	x30, [sp, #40]
    20ec:	ldp	x19, x20, [sp], #64
    20f0:	ret
    20f4:	str	x23, [sp, #32]
    20f8:	mov	x4, #0x0                   	// #0
    20fc:	mov	x3, #0x0                   	// #0
    2100:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2104:	add	x2, x2, #0x0
    2108:	mov	w1, #0x336                 	// #822
    210c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2110:	add	x0, x0, #0x0
    2114:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2118:	str	x23, [sp, #32]
    211c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2120:	add	x2, x2, #0x0
    2124:	mov	w1, #0x1be                 	// #446
    2128:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    212c:	add	x0, x0, #0x0
    2130:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2134:	str	x23, [sp, #32]
    2138:	add	x0, x3, #0x1
    213c:	tst	x3, x0
    2140:	b.eq	224c <__lsan_register_root_region+0x1f8>  // b.none
    2144:	clz	x4, x0
    2148:	mov	w1, #0x3f                  	// #63
    214c:	sub	w1, w1, w4
    2150:	add	w22, w1, #0x1
    2154:	mov	x4, #0x1                   	// #1
    2158:	lsl	x4, x4, x22
    215c:	cmp	x0, x4
    2160:	b.cs	21f8 <__lsan_register_root_region+0x1a4>  // b.hs, b.nlast
    2164:	mov	x2, #0x1                   	// #1
    2168:	lsl	x1, x2, x1
    216c:	cmp	x0, x1
    2170:	b.ls	2214 <__lsan_register_root_region+0x1c0>  // b.plast
    2174:	cmp	x3, x4
    2178:	b.hi	2234 <__lsan_register_root_region+0x1e0>  // b.pmore
    217c:	lsl	x22, x4, #4
    2180:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2184:	ldr	x0, [x0]
    2188:	ldr	x0, [x0]
    218c:	cbz	x0, 2254 <__lsan_register_root_region+0x200>
    2190:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2194:	ldr	x0, [x0]
    2198:	ldr	x0, [x0]
    219c:	sub	x1, x0, #0x1
    21a0:	tst	x0, x1
    21a4:	b.ne	2268 <__lsan_register_root_region+0x214>  // b.any
    21a8:	add	x22, x22, x1
    21ac:	neg	x0, x0
    21b0:	and	x22, x22, x0
    21b4:	mov	w2, #0x0                   	// #0
    21b8:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    21bc:	add	x1, x1, #0x0
    21c0:	mov	x0, x22
    21c4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    21c8:	mov	x23, x0
    21cc:	ldr	x2, [x19, #16]
    21d0:	lsl	x2, x2, #4
    21d4:	ldr	x1, [x19]
    21d8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    21dc:	ldr	x1, [x19, #8]
    21e0:	ldr	x0, [x19]
    21e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    21e8:	str	x23, [x19]
    21ec:	str	x22, [x19, #8]
    21f0:	ldr	x23, [sp, #32]
    21f4:	b	20a4 <__lsan_register_root_region+0x50>
    21f8:	mov	x3, x0
    21fc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2200:	add	x2, x2, #0x0
    2204:	mov	w1, #0x17b                 	// #379
    2208:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    220c:	add	x0, x0, #0x0
    2210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2214:	mov	x4, x1
    2218:	mov	x3, x0
    221c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2220:	add	x2, x2, #0x0
    2224:	mov	w1, #0x17c                 	// #380
    2228:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    222c:	add	x0, x0, #0x0
    2230:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2234:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2238:	add	x2, x2, #0x0
    223c:	mov	w1, #0x1fd                 	// #509
    2240:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2244:	add	x0, x0, #0x0
    2248:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    224c:	mov	x4, x0
    2250:	b	217c <__lsan_register_root_region+0x128>
    2254:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    2258:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    225c:	ldr	x1, [x1]
    2260:	str	x0, [x1]
    2264:	b	2190 <__lsan_register_root_region+0x13c>
    2268:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    226c:	add	x0, x0, #0x0
    2270:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    2274:	bl	0 <_ZN11__sanitizer3DieEv>
    2278:	mov	x2, x21
    227c:	mov	x1, x20
    2280:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2284:	add	x0, x0, #0x0
    2288:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    228c:	b	20d4 <__lsan_register_root_region+0x80>

0000000000002290 <__lsan_unregister_root_region>:
    2290:	stp	x19, x20, [sp, #-32]!
    2294:	stp	x21, x30, [sp, #16]
    2298:	mov	x19, x0
    229c:	mov	x20, x1
    22a0:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    22a4:	add	x21, x21, #0x0
    22a8:	add	x0, x21, #0xe0
    22ac:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    22b0:	ldr	x1, [x21, #144]
    22b4:	cbz	x1, 230c <__lsan_unregister_root_region+0x7c>
    22b8:	ldr	x6, [x1, #16]
    22bc:	cbz	x6, 22f4 <__lsan_unregister_root_region+0x64>
    22c0:	ldr	x7, [x1]
    22c4:	mov	x2, x7
    22c8:	mov	x3, #0x0                   	// #0
    22cc:	mov	x0, x2
    22d0:	ldr	x5, [x2, #8]
    22d4:	ldr	x4, [x2]
    22d8:	cmp	x5, x20
    22dc:	ccmp	x4, x19, #0x0, eq  // eq = none
    22e0:	b.eq	232c <__lsan_unregister_root_region+0x9c>  // b.none
    22e4:	add	x3, x3, #0x1
    22e8:	add	x2, x2, #0x10
    22ec:	cmp	x3, x6
    22f0:	b.ne	22cc <__lsan_unregister_root_region+0x3c>  // b.any
    22f4:	mov	x2, x20
    22f8:	mov	x1, x19
    22fc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2300:	add	x0, x0, #0x0
    2304:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2308:	bl	0 <_ZN11__sanitizer3DieEv>
    230c:	mov	x4, #0x0                   	// #0
    2310:	mov	x3, #0x0                   	// #0
    2314:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2318:	add	x2, x2, #0x0
    231c:	mov	w1, #0x341                 	// #833
    2320:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2324:	add	x0, x0, #0x0
    2328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    232c:	add	x6, x7, x6, lsl #4
    2330:	ldp	x2, x3, [x6, #-16]
    2334:	stp	x2, x3, [x0]
    2338:	ldr	x0, [x1, #16]
    233c:	cbz	x0, 2374 <__lsan_unregister_root_region+0xe4>
    2340:	sub	x0, x0, #0x1
    2344:	str	x0, [x1, #16]
    2348:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    234c:	ldr	x0, [x0]
    2350:	ldr	w0, [x0]
    2354:	cbnz	w0, 2394 <__lsan_unregister_root_region+0x104>
    2358:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    235c:	add	x0, x0, #0x0
    2360:	add	x0, x0, #0xe0
    2364:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    2368:	ldp	x21, x30, [sp, #16]
    236c:	ldp	x19, x20, [sp], #32
    2370:	ret
    2374:	mov	x4, #0x0                   	// #0
    2378:	mov	x3, #0x0                   	// #0
    237c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2380:	add	x2, x2, #0x0
    2384:	mov	w1, #0x1ca                 	// #458
    2388:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    238c:	add	x0, x0, #0x0
    2390:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2394:	mov	x2, x20
    2398:	mov	x1, x19
    239c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    23a0:	add	x0, x0, #0x0
    23a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    23a8:	b	2358 <__lsan_unregister_root_region+0xc8>

00000000000023ac <__lsan_disable>:
    23ac:	str	x30, [sp, #-16]!
    23b0:	bl	0 <_ZN6__lsan19DisableInThisThreadEv>
    23b4:	ldr	x30, [sp], #16
    23b8:	ret

00000000000023bc <__lsan_enable>:
    23bc:	str	x30, [sp, #-16]!
    23c0:	bl	0 <_ZN6__lsan18EnableInThisThreadEv>
    23c4:	ldr	x30, [sp], #16
    23c8:	ret

00000000000023cc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv>:
    23cc:	stp	x19, x20, [sp, #-320]!
    23d0:	stp	x21, x22, [sp, #16]
    23d4:	stp	x23, x24, [sp, #32]
    23d8:	stp	x25, x26, [sp, #48]
    23dc:	stp	x27, x28, [sp, #64]
    23e0:	str	x30, [sp, #80]
    23e4:	cbz	x1, 2428 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5c>
    23e8:	mov	x19, x0
    23ec:	mov	x22, x1
    23f0:	ldrb	w0, [x1]
    23f4:	cbnz	w0, 2448 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7c>
    23f8:	ldr	x0, [x19]
    23fc:	ldr	x1, [x0, #16]
    2400:	mov	x0, x19
    2404:	blr	x1
    2408:	mov	x20, x0
    240c:	str	xzr, [sp, #248]
    2410:	str	xzr, [sp, #256]
    2414:	str	xzr, [sp, #240]
    2418:	cbnz	x0, 2468 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x9c>
    241c:	str	x20, [sp, #256]
    2420:	mov	x20, #0x0                   	// #0
    2424:	b	25e4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x218>
    2428:	mov	x4, #0x0                   	// #0
    242c:	mov	x3, #0x0                   	// #0
    2430:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2434:	add	x2, x2, #0x0
    2438:	mov	w1, #0x22b                 	// #555
    243c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2440:	add	x0, x0, #0x0
    2444:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2448:	mov	x4, #0x0                   	// #0
    244c:	mov	x3, #0x0                   	// #0
    2450:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2454:	add	x2, x2, #0x0
    2458:	mov	w1, #0x22c                 	// #556
    245c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2460:	add	x0, x0, #0x0
    2464:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2468:	lsl	x24, x0, #3
    246c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2470:	ldr	x0, [x0]
    2474:	ldr	x0, [x0]
    2478:	cbz	x0, 2510 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x144>
    247c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2480:	ldr	x0, [x0]
    2484:	ldr	x21, [x0]
    2488:	sub	x0, x21, #0x1
    248c:	tst	x21, x0
    2490:	b.ne	2524 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x158>  // b.any
    2494:	add	x0, x24, x0
    2498:	neg	x21, x21
    249c:	and	x21, x0, x21
    24a0:	mov	w2, #0x0                   	// #0
    24a4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    24a8:	add	x1, x1, #0x0
    24ac:	mov	x0, x21
    24b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    24b4:	mov	x23, x0
    24b8:	ldr	x2, [sp, #256]
    24bc:	lsl	x2, x2, #3
    24c0:	ldr	x1, [sp, #240]
    24c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    24c8:	ldr	x1, [sp, #248]
    24cc:	ldr	x0, [sp, #240]
    24d0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    24d4:	str	x23, [sp, #240]
    24d8:	str	x21, [sp, #248]
    24dc:	ldr	x0, [sp, #256]
    24e0:	cmp	x20, x0
    24e4:	b.ls	241c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x50>  // b.plast
    24e8:	cmp	x20, x21, lsr #3
    24ec:	b.hi	2534 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x168>  // b.pmore
    24f0:	ldr	x0, [sp, #256]
    24f4:	sub	x2, x20, x0
    24f8:	lsl	x2, x2, #3
    24fc:	mov	w1, #0x0                   	// #0
    2500:	ldr	x3, [sp, #240]
    2504:	add	x0, x3, x0, lsl #3
    2508:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    250c:	b	241c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x50>
    2510:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    2514:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2518:	ldr	x1, [x1]
    251c:	str	x0, [x1]
    2520:	b	247c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xb0>
    2524:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2528:	add	x0, x0, #0x0
    252c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    2530:	bl	0 <_ZN11__sanitizer3DieEv>
    2534:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2538:	ldr	x0, [x0]
    253c:	ldr	x0, [x0]
    2540:	cbz	x0, 25a8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x1dc>
    2544:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2548:	ldr	x0, [x0]
    254c:	ldr	x0, [x0]
    2550:	sub	x1, x0, #0x1
    2554:	tst	x0, x1
    2558:	b.ne	25bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x1f0>  // b.any
    255c:	add	x24, x24, x1
    2560:	neg	x0, x0
    2564:	and	x24, x24, x0
    2568:	mov	w2, #0x0                   	// #0
    256c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2570:	add	x1, x1, #0x0
    2574:	mov	x0, x24
    2578:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    257c:	mov	x21, x0
    2580:	ldr	x2, [sp, #256]
    2584:	lsl	x2, x2, #3
    2588:	ldr	x1, [sp, #240]
    258c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    2590:	ldr	x1, [sp, #248]
    2594:	ldr	x0, [sp, #240]
    2598:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    259c:	str	x21, [sp, #240]
    25a0:	str	x24, [sp, #248]
    25a4:	b	24f0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x124>
    25a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    25ac:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    25b0:	ldr	x1, [x1]
    25b4:	str	x0, [x1]
    25b8:	b	2544 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x178>
    25bc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    25c0:	add	x0, x0, #0x0
    25c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    25c8:	bl	0 <_ZN11__sanitizer3DieEv>
    25cc:	ldr	x21, [sp, #240]
    25d0:	mov	x1, x20
    25d4:	mov	x0, x19
    25d8:	blr	x2
    25dc:	str	x0, [x21, x20, lsl #3]
    25e0:	add	x20, x20, #0x1
    25e4:	ldr	x0, [x19]
    25e8:	ldr	x1, [x0, #16]
    25ec:	mov	x0, x19
    25f0:	blr	x1
    25f4:	cmp	x0, x20
    25f8:	b.ls	262c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x260>  // b.plast
    25fc:	ldr	x0, [x19]
    2600:	ldr	x2, [x0, #24]
    2604:	ldr	x4, [sp, #256]
    2608:	cmp	x20, x4
    260c:	b.cc	25cc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x200>  // b.lo, b.ul, b.last
    2610:	mov	x3, x20
    2614:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2618:	add	x2, x2, #0x0
    261c:	mov	w1, #0x1b6                 	// #438
    2620:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2624:	add	x0, x0, #0x0
    2628:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    262c:	mov	w2, #0x0                   	// #0
    2630:	ldr	x1, [sp, #256]
    2634:	ldr	x0, [sp, #240]
    2638:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    263c:	bl	0 <_ZN6__lsan23GetThreadRegistryLockedEv>
    2640:	add	x2, sp, #0xf0
    2644:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2648:	add	x1, x1, #0x0
    264c:	bl	0 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>
    2650:	ldr	x1, [sp, #248]
    2654:	ldr	x0, [sp, #240]
    2658:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    265c:	str	xzr, [sp, #192]
    2660:	str	xzr, [sp, #200]
    2664:	str	xzr, [sp, #184]
    2668:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    266c:	ldr	x0, [x0]
    2670:	ldr	x0, [x0]
    2674:	cbz	x0, 273c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x370>
    2678:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    267c:	ldr	x0, [x0]
    2680:	ldr	x1, [x0]
    2684:	sub	x24, x1, #0x1
    2688:	ands	x24, x24, x1
    268c:	b.ne	2750 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x384>  // b.any
    2690:	add	x20, x1, #0x7
    2694:	neg	x1, x1
    2698:	and	x20, x20, x1
    269c:	mov	w2, #0x0                   	// #0
    26a0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    26a4:	add	x1, x1, #0x0
    26a8:	mov	x0, x20
    26ac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    26b0:	mov	x21, x0
    26b4:	ldr	x2, [sp, #200]
    26b8:	lsl	x2, x2, #3
    26bc:	ldr	x1, [sp, #184]
    26c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    26c4:	ldr	x1, [sp, #192]
    26c8:	ldr	x0, [sp, #184]
    26cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    26d0:	str	x21, [sp, #184]
    26d4:	str	x20, [sp, #192]
    26d8:	add	x20, sp, #0xb8
    26dc:	mov	x1, x20
    26e0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    26e4:	add	x0, x0, #0x0
    26e8:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    26ec:	mov	x0, x20
    26f0:	bl	0 <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE>
    26f4:	ldr	x0, [x19]
    26f8:	ldr	x1, [x0, #8]
    26fc:	mov	x0, x19
    2700:	blr	x1
    2704:	mov	x20, x0
    2708:	str	x0, [sp, #104]
    270c:	mov	x26, #0x0                   	// #0
    2710:	cbnz	x0, 2760 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x394>
    2714:	str	x26, [sp, #112]
    2718:	add	x0, x26, x20, lsl #3
    271c:	str	x0, [sp, #120]
    2720:	mov	x23, x24
    2724:	adrp	x20, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2728:	add	x20, x20, #0x0
    272c:	add	x20, x20, #0x8
    2730:	add	x0, sp, #0xd0
    2734:	str	x0, [sp, #96]
    2738:	b	28c0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f4>
    273c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    2740:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2744:	ldr	x1, [x1]
    2748:	str	x0, [x1]
    274c:	b	2678 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2ac>
    2750:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2754:	add	x0, x0, #0x0
    2758:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    275c:	bl	0 <_ZN11__sanitizer3DieEv>
    2760:	lsl	x21, x0, #3
    2764:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2768:	ldr	x0, [x0]
    276c:	ldr	x0, [x0]
    2770:	cbz	x0, 27e8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x41c>
    2774:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2778:	ldr	x0, [x0]
    277c:	ldr	x0, [x0]
    2780:	sub	x1, x0, #0x1
    2784:	tst	x0, x1
    2788:	b.ne	27fc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x430>  // b.any
    278c:	add	x1, x21, x1
    2790:	neg	x0, x0
    2794:	and	x23, x1, x0
    2798:	str	x23, [sp, #104]
    279c:	mov	w2, #0x0                   	// #0
    27a0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    27a4:	add	x1, x1, #0x0
    27a8:	mov	x0, x23
    27ac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    27b0:	mov	x26, x0
    27b4:	mov	x2, #0x0                   	// #0
    27b8:	mov	x1, #0x0                   	// #0
    27bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    27c0:	mov	x1, #0x0                   	// #0
    27c4:	mov	x0, #0x0                   	// #0
    27c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    27cc:	cmp	x20, x23, lsr #3
    27d0:	b.hi	280c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x440>  // b.pmore
    27d4:	mov	x2, x21
    27d8:	mov	w1, #0x0                   	// #0
    27dc:	mov	x0, x26
    27e0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    27e4:	b	2714 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x348>
    27e8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    27ec:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    27f0:	ldr	x1, [x1]
    27f4:	str	x0, [x1]
    27f8:	b	2774 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x3a8>
    27fc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2800:	add	x0, x0, #0x0
    2804:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    2808:	bl	0 <_ZN11__sanitizer3DieEv>
    280c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2810:	ldr	x0, [x0]
    2814:	ldr	x0, [x0]
    2818:	cbz	x0, 287c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4b0>
    281c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2820:	ldr	x0, [x0]
    2824:	ldr	x0, [x0]
    2828:	sub	x1, x0, #0x1
    282c:	tst	x0, x1
    2830:	b.ne	2890 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4c4>  // b.any
    2834:	add	x1, x21, x1
    2838:	neg	x0, x0
    283c:	and	x23, x1, x0
    2840:	mov	w2, #0x0                   	// #0
    2844:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2848:	add	x1, x1, #0x0
    284c:	mov	x0, x23
    2850:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    2854:	mov	x25, x0
    2858:	mov	x2, #0x0                   	// #0
    285c:	mov	x1, x26
    2860:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    2864:	ldr	x1, [sp, #104]
    2868:	mov	x0, x26
    286c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    2870:	str	x23, [sp, #104]
    2874:	mov	x26, x25
    2878:	b	27d4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x408>
    287c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    2880:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2884:	ldr	x1, [x1]
    2888:	str	x0, [x1]
    288c:	b	281c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x450>
    2890:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2894:	add	x0, x0, #0x0
    2898:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    289c:	bl	0 <_ZN11__sanitizer3DieEv>
    28a0:	mov	x1, x21
    28a4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    28a8:	add	x0, x0, #0x0
    28ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    28b0:	b	28f8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x52c>
    28b4:	ldrb	w0, [x20, #21]
    28b8:	cbnz	w0, 2a50 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x684>
    28bc:	add	x23, x23, #0x1
    28c0:	ldr	x0, [x19]
    28c4:	ldr	x1, [x0, #16]
    28c8:	mov	x0, x19
    28cc:	blr	x1
    28d0:	cmp	x0, x23
    28d4:	b.ls	2c78 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x8ac>  // b.plast
    28d8:	ldr	x0, [x19]
    28dc:	ldr	x2, [x0, #24]
    28e0:	mov	x1, x23
    28e4:	mov	x0, x19
    28e8:	blr	x2
    28ec:	mov	x21, x0
    28f0:	ldrb	w0, [x20, #21]
    28f4:	cbnz	w0, 28a0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4d4>
    28f8:	ldr	x7, [sp, #96]
    28fc:	add	x6, sp, #0xb0
    2900:	add	x5, sp, #0xa8
    2904:	add	x4, sp, #0xa0
    2908:	add	x3, sp, #0x98
    290c:	add	x2, sp, #0x90
    2910:	add	x1, sp, #0x88
    2914:	mov	x0, x21
    2918:	bl	0 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE>
    291c:	and	w0, w0, #0xff
    2920:	cbz	w0, 28b4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4e8>
    2924:	ldr	x0, [x19]
    2928:	ldr	x4, [x0]
    292c:	add	x3, sp, #0xf0
    2930:	mov	x2, x26
    2934:	mov	x1, x23
    2938:	mov	x0, x19
    293c:	blr	x4
    2940:	mov	w25, w0
    2944:	cmp	w0, #0x1
    2948:	b.ne	2a64 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x698>  // b.any
    294c:	cmp	w25, #0x0
    2950:	cset	w1, ne  // ne = any
    2954:	ldrb	w0, [x20, #14]
    2958:	tst	w1, w0
    295c:	b.ne	2a88 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x6bc>  // b.any
    2960:	ldrb	w0, [x20, #13]
    2964:	cbz	w0, 29c4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5f8>
    2968:	ldrb	w0, [x20, #21]
    296c:	cbnz	w0, 2aa8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x6dc>
    2970:	ldr	x0, [sp, #240]
    2974:	ldr	x1, [sp, #136]
    2978:	cmp	x1, x0
    297c:	b.hi	2af0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x724>  // b.pmore
    2980:	ldr	x1, [sp, #144]
    2984:	cmp	x1, x0
    2988:	b.ls	2af0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x724>  // b.plast
    298c:	str	x0, [sp, #136]
    2990:	add	x25, sp, #0xb8
    2994:	mov	w4, #0x2                   	// #2
    2998:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    299c:	add	x3, x3, #0x0
    29a0:	mov	x2, x25
    29a4:	ldr	x1, [sp, #144]
    29a8:	ldr	x0, [sp, #136]
    29ac:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    29b0:	mov	x2, x25
    29b4:	adrp	x1, f08 <_ZN6__lsan24ForEachExtraStackRangeCbEmmPv>
    29b8:	add	x1, x1, #0x0
    29bc:	mov	x0, x21
    29c0:	bl	0 <_ZN6__lsan22ForEachExtraStackRangeEyPFvmmPvES0_>
    29c4:	ldrb	w0, [x20, #15]
    29c8:	cbz	w0, 28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>
    29cc:	ldr	x1, [sp, #152]
    29d0:	cbz	x1, 2a20 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x654>
    29d4:	ldrb	w0, [x20, #21]
    29d8:	cbnz	w0, 2b90 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7c4>
    29dc:	ldr	x1, [sp, #168]
    29e0:	ldr	x2, [sp, #176]
    29e4:	cmp	x1, x2
    29e8:	b.eq	2a04 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x638>  // b.none
    29ec:	ldr	x0, [sp, #160]
    29f0:	cmp	x1, x0
    29f4:	b.hi	2a04 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x638>  // b.pmore
    29f8:	ldr	x0, [sp, #152]
    29fc:	cmp	x2, x0
    2a00:	b.cs	2ba4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7d8>  // b.hs, b.nlast
    2a04:	mov	w4, #0x2                   	// #2
    2a08:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2a0c:	add	x3, x3, #0x0
    2a10:	add	x2, sp, #0xb8
    2a14:	ldr	x1, [sp, #160]
    2a18:	ldr	x0, [sp, #152]
    2a1c:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    2a20:	ldr	x0, [sp, #208]
    2a24:	cbz	x0, 2a34 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x668>
    2a28:	bl	0 <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>
    2a2c:	and	w0, w0, #0xff
    2a30:	cbz	w0, 2bec <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x820>
    2a34:	ldrb	w0, [x20, #21]
    2a38:	cbz	w0, 28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>
    2a3c:	mov	x1, x21
    2a40:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2a44:	add	x0, x0, #0x0
    2a48:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2a4c:	b	28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>
    2a50:	mov	x1, x21
    2a54:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2a58:	add	x0, x0, #0x0
    2a5c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2a60:	b	28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>
    2a64:	mov	x1, x21
    2a68:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2a6c:	add	x0, x0, #0x0
    2a70:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2a74:	cmn	w25, #0x1
    2a78:	b.eq	28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>  // b.none
    2a7c:	ldr	x0, [sp, #136]
    2a80:	str	x0, [sp, #240]
    2a84:	b	294c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x580>
    2a88:	mov	w4, #0x2                   	// #2
    2a8c:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2a90:	add	x3, x3, #0x0
    2a94:	add	x2, sp, #0xb8
    2a98:	ldr	x1, [sp, #120]
    2a9c:	ldr	x0, [sp, #112]
    2aa0:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    2aa4:	b	2960 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x594>
    2aa8:	ldr	x3, [sp, #240]
    2aac:	ldr	x2, [sp, #144]
    2ab0:	ldr	x1, [sp, #136]
    2ab4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ab8:	add	x0, x0, #0x0
    2abc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2ac0:	ldr	x0, [sp, #240]
    2ac4:	ldr	x1, [sp, #136]
    2ac8:	cmp	x0, x1
    2acc:	b.cc	2adc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x710>  // b.lo, b.ul, b.last
    2ad0:	ldr	x1, [sp, #144]
    2ad4:	cmp	x0, x1
    2ad8:	b.cc	298c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5c0>  // b.lo, b.ul, b.last
    2adc:	ldrb	w0, [x20, #21]
    2ae0:	cbz	w0, 2af0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x724>
    2ae4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ae8:	add	x0, x0, #0x0
    2aec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2af0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2af4:	ldr	x0, [x0]
    2af8:	ldr	x0, [x0]
    2afc:	cbz	x0, 2b74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7a8>
    2b00:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2b04:	ldr	x0, [x0]
    2b08:	ldr	x27, [x0]
    2b0c:	ldr	x0, [sp, #136]
    2b10:	ldr	x1, [sp, #144]
    2b14:	cmp	x0, x1
    2b18:	b.cs	2b88 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7bc>  // b.hs, b.nlast
    2b1c:	mov	w25, #0x0                   	// #0
    2b20:	mov	x28, #0x1                   	// #1
    2b24:	mov	x1, x28
    2b28:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
    2b2c:	and	w0, w0, #0xff
    2b30:	cbnz	w0, 2b50 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x784>
    2b34:	add	w25, w25, #0x1
    2b38:	ldr	x0, [sp, #136]
    2b3c:	add	x0, x27, x0
    2b40:	str	x0, [sp, #136]
    2b44:	ldr	x1, [sp, #144]
    2b48:	cmp	x1, x0
    2b4c:	b.hi	2b24 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x758>  // b.pmore
    2b50:	ldrb	w0, [x20, #21]
    2b54:	cbz	w0, 2990 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5c4>
    2b58:	ldr	x3, [sp, #144]
    2b5c:	ldr	x2, [sp, #136]
    2b60:	mov	w1, w25
    2b64:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2b68:	add	x0, x0, #0x0
    2b6c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2b70:	b	2990 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5c4>
    2b74:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    2b78:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2b7c:	ldr	x1, [x1]
    2b80:	str	x0, [x1]
    2b84:	b	2b00 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x734>
    2b88:	mov	w25, #0x0                   	// #0
    2b8c:	b	2b50 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x784>
    2b90:	ldr	x2, [sp, #160]
    2b94:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2b98:	add	x0, x0, #0x0
    2b9c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2ba0:	b	29dc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x610>
    2ba4:	cmp	x1, x0
    2ba8:	b.hi	2bd4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x808>  // b.pmore
    2bac:	ldr	x1, [sp, #160]
    2bb0:	ldr	x0, [sp, #176]
    2bb4:	cmp	x1, x0
    2bb8:	b.ls	2a20 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x654>  // b.plast
    2bbc:	mov	w4, #0x2                   	// #2
    2bc0:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2bc4:	add	x3, x3, #0x0
    2bc8:	add	x2, sp, #0xb8
    2bcc:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    2bd0:	b	2a20 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x654>
    2bd4:	mov	w4, #0x2                   	// #2
    2bd8:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2bdc:	add	x3, x3, #0x0
    2be0:	add	x2, sp, #0xb8
    2be4:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    2be8:	b	2bac <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x7e0>
    2bec:	ldr	x1, [sp, #208]
    2bf0:	ldr	x0, [x1]
    2bf4:	cbz	x0, 28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>
    2bf8:	mov	x25, x24
    2bfc:	adrp	x28, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2c00:	add	x28, x28, #0x0
    2c04:	b	2c34 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x868>
    2c08:	mov	w4, #0x2                   	// #2
    2c0c:	mov	x3, x28
    2c10:	add	x2, sp, #0xb8
    2c14:	mov	x1, x21
    2c18:	mov	x0, x27
    2c1c:	bl	b28 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    2c20:	add	x25, x25, #0x1
    2c24:	ldr	x1, [sp, #208]
    2c28:	ldr	x0, [x1]
    2c2c:	cmp	x0, x25
    2c30:	b.ls	28bc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4f0>  // b.plast
    2c34:	lsl	x0, x25, #4
    2c38:	ldr	x1, [x1, #8]
    2c3c:	add	x2, x1, x0
    2c40:	ldr	x27, [x1, x0]
    2c44:	ldr	x21, [x2, #8]
    2c48:	add	x21, x27, x21
    2c4c:	cmp	x27, x21
    2c50:	b.cs	2c20 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x854>  // b.hs, b.nlast
    2c54:	ldrb	w0, [x20, #21]
    2c58:	cbz	w0, 2c08 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x83c>
    2c5c:	mov	x3, x21
    2c60:	mov	x2, x27
    2c64:	mov	x1, x25
    2c68:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2c6c:	add	x0, x0, #0x0
    2c70:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2c74:	b	2c08 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x83c>
    2c78:	ldr	x1, [sp, #104]
    2c7c:	mov	x0, x26
    2c80:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    2c84:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2c88:	ldrb	w0, [x0]
    2c8c:	cbz	w0, 2d4c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x980>
    2c90:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2c94:	ldr	x0, [x0]
    2c98:	cbz	x0, 2cbc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x8f0>
    2c9c:	ldr	x1, [x0, #16]
    2ca0:	cbz	x1, 2d4c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x980>
    2ca4:	add	x20, sp, #0xd0
    2ca8:	add	x23, sp, #0xf0
    2cac:	add	x21, sp, #0xb8
    2cb0:	adrp	x25, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2cb4:	add	x25, x25, #0x0
    2cb8:	b	2d28 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x95c>
    2cbc:	mov	x4, #0x0                   	// #0
    2cc0:	mov	x3, #0x0                   	// #0
    2cc4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2cc8:	add	x2, x2, #0x0
    2ccc:	mov	w1, #0x151                 	// #337
    2cd0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2cd4:	add	x0, x0, #0x0
    2cd8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2cdc:	ldr	x4, [sp, #280]
    2ce0:	and	w4, w4, #0x1
    2ce4:	ldr	x3, [sp, #248]
    2ce8:	ldr	x2, [sp, #240]
    2cec:	mov	x1, x19
    2cf0:	mov	x0, x21
    2cf4:	bl	1118 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb>
    2cf8:	mov	x1, x23
    2cfc:	mov	x0, x20
    2d00:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
    2d04:	and	w0, w0, #0xff
    2d08:	cbnz	w0, 2cdc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x910>
    2d0c:	mov	x0, x20
    2d10:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
    2d14:	add	x24, x24, #0x1
    2d18:	ldr	x0, [x25, #144]
    2d1c:	ldr	x1, [x0, #16]
    2d20:	cmp	x1, x24
    2d24:	b.ls	2d4c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x980>  // b.plast
    2d28:	ldr	x19, [x0]
    2d2c:	add	x19, x19, x24, lsl #4
    2d30:	mov	w1, #0x1                   	// #1
    2d34:	mov	x0, x20
    2d38:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
    2d3c:	str	xzr, [sp, #264]
    2d40:	str	xzr, [sp, #272]
    2d44:	str	xzr, [sp, #312]
    2d48:	b	2cf8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x92c>
    2d4c:	mov	w1, #0x2                   	// #2
    2d50:	add	x0, sp, #0xb8
    2d54:	bl	f98 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE>
    2d58:	ldr	x4, [sp, #200]
    2d5c:	cbnz	x4, 2df8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xa2c>
    2d60:	add	x0, sp, #0xb8
    2d64:	bl	11c4 <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE>
    2d68:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2d6c:	ldrb	w0, [x0]
    2d70:	cbnz	w0, 2e14 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xa48>
    2d74:	add	x19, sp, #0xb8
    2d78:	mov	x0, x19
    2d7c:	bl	0 <_ZN6__lsan34ProcessPlatformSpecificAllocationsEPN11__sanitizer18InternalMmapVectorImEE>
    2d80:	mov	w1, #0x2                   	// #2
    2d84:	mov	x0, x19
    2d88:	bl	f98 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE>
    2d8c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2d90:	ldrb	w0, [x0]
    2d94:	cbnz	w0, 2e24 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xa58>
    2d98:	mov	x1, #0x0                   	// #0
    2d9c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2da0:	add	x0, x0, #0x0
    2da4:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2da8:	ldr	x1, [sp, #192]
    2dac:	ldr	x0, [sp, #184]
    2db0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    2db4:	add	x1, x22, #0x8
    2db8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2dbc:	add	x0, x0, #0x0
    2dc0:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2dc4:	mov	x1, #0x0                   	// #0
    2dc8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2dcc:	add	x0, x0, #0x0
    2dd0:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2dd4:	mov	w0, #0x1                   	// #1
    2dd8:	strb	w0, [x22]
    2ddc:	ldp	x21, x22, [sp, #16]
    2de0:	ldp	x23, x24, [sp, #32]
    2de4:	ldp	x25, x26, [sp, #48]
    2de8:	ldp	x27, x28, [sp, #64]
    2dec:	ldr	x30, [sp, #80]
    2df0:	ldp	x19, x20, [sp], #320
    2df4:	ret
    2df8:	mov	x3, #0x0                   	// #0
    2dfc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e00:	add	x2, x2, #0x0
    2e04:	mov	w1, #0x1c7                 	// #455
    2e08:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e0c:	add	x0, x0, #0x0
    2e10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2e14:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e18:	add	x0, x0, #0x0
    2e1c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2e20:	b	2d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x9a8>
    2e24:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e28:	add	x0, x0, #0x0
    2e2c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2e30:	b	2d98 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x9cc>

0000000000002e34 <_ZN6__lsan10LeakReport14ReportTopLeaksEm>:
    2e34:	stp	x19, x20, [sp, #-48]!
    2e38:	stp	x21, x22, [sp, #16]
    2e3c:	stp	x23, x30, [sp, #32]
    2e40:	mov	x20, x0
    2e44:	mov	x22, x1
    2e48:	ldr	x1, [x0, #24]
    2e4c:	mov	x0, #0x1388                	// #5000
    2e50:	cmp	x1, x0
    2e54:	b.hi	2eb4 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x80>  // b.pmore
    2e58:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e5c:	add	x0, x0, #0x0
    2e60:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    2e64:	ldr	x1, [x20, #24]
    2e68:	mov	x0, #0x1388                	// #5000
    2e6c:	cmp	x1, x0
    2e70:	b.eq	2ed4 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xa0>  // b.none
    2e74:	mov	x0, x20
    2e78:	bl	1f54 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>
    2e7c:	mov	x23, x0
    2e80:	cmp	x22, #0x0
    2e84:	ccmp	x0, x22, #0x0, ne  // ne = any
    2e88:	b.hi	2ee8 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xb4>  // b.pmore
    2e8c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2e90:	add	x2, x2, #0x0
    2e94:	ldr	x1, [x20, #24]
    2e98:	ldr	x0, [x20, #8]
    2e9c:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ea0:	ldr	x21, [x20, #24]
    2ea4:	cbz	x21, 2f34 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x100>
    2ea8:	mov	x19, #0x0                   	// #0
    2eac:	mov	x21, #0x0                   	// #0
    2eb0:	b	2f0c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xd8>
    2eb4:	mov	x4, #0x0                   	// #0
    2eb8:	mov	x3, #0x0                   	// #0
    2ebc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ec0:	add	x2, x2, #0x0
    2ec4:	mov	w1, #0x2be                 	// #702
    2ec8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ecc:	add	x0, x0, #0x0
    2ed0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2ed4:	mov	x1, x0
    2ed8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2edc:	add	x0, x0, #0x0
    2ee0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    2ee4:	b	2e74 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x40>
    2ee8:	mov	x1, x22
    2eec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2ef0:	add	x0, x0, #0x0
    2ef4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    2ef8:	b	2e8c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x58>
    2efc:	add	x19, x19, #0x1
    2f00:	ldr	x2, [x20, #24]
    2f04:	cmp	x2, x19
    2f08:	b.ls	2f34 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x100>  // b.plast
    2f0c:	ldr	x2, [x20, #8]
    2f10:	add	x2, x2, x19, lsl #5
    2f14:	ldrb	w2, [x2, #29]
    2f18:	cbnz	w2, 2efc <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xc8>
    2f1c:	mov	x1, x19
    2f20:	mov	x0, x20
    2f24:	bl	197c <_ZN6__lsan10LeakReport18PrintReportForLeakEm>
    2f28:	add	x21, x21, #0x1
    2f2c:	cmp	x22, x21
    2f30:	b.ne	2efc <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xc8>  // b.any
    2f34:	cmp	x21, x23
    2f38:	b.cc	2f4c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x118>  // b.lo, b.ul, b.last
    2f3c:	ldp	x21, x22, [sp, #16]
    2f40:	ldp	x23, x30, [sp, #32]
    2f44:	ldp	x19, x20, [sp], #48
    2f48:	ret
    2f4c:	sub	x1, x23, x21
    2f50:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2f54:	add	x0, x0, #0x0
    2f58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    2f5c:	b	2f3c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x108>

0000000000002f60 <_ZN6__lsanL13CheckForLeaksEv>:
    2f60:	stp	x19, x20, [sp, #-144]!
    2f64:	str	x30, [sp, #40]
    2f68:	adrp	x0, 0 <__lsan_is_turned_off>
    2f6c:	ldr	x0, [x0]
    2f70:	cbz	x0, 2f7c <_ZN6__lsanL13CheckForLeaksEv+0x1c>
    2f74:	bl	0 <__lsan_is_turned_off>
    2f78:	cbnz	w0, 3214 <_ZN6__lsanL13CheckForLeaksEv+0x2b4>
    2f7c:	bl	0 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>
    2f80:	str	wzr, [sp, #88]
    2f84:	str	xzr, [sp, #104]
    2f88:	str	xzr, [sp, #112]
    2f8c:	str	xzr, [sp, #96]
    2f90:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2f94:	ldr	x0, [x0]
    2f98:	ldr	x0, [x0]
    2f9c:	cbz	x0, 3108 <_ZN6__lsanL13CheckForLeaksEv+0x1a8>
    2fa0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    2fa4:	ldr	x0, [x0]
    2fa8:	ldr	x1, [x0]
    2fac:	sub	x0, x1, #0x1
    2fb0:	tst	x0, x1
    2fb4:	b.ne	311c <_ZN6__lsanL13CheckForLeaksEv+0x1bc>  // b.any
    2fb8:	add	x19, x1, #0x1f
    2fbc:	neg	x1, x1
    2fc0:	and	x19, x19, x1
    2fc4:	mov	w2, #0x0                   	// #0
    2fc8:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2fcc:	add	x1, x1, #0x0
    2fd0:	mov	x0, x19
    2fd4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    2fd8:	mov	x20, x0
    2fdc:	ldr	x2, [sp, #112]
    2fe0:	lsl	x2, x2, #5
    2fe4:	ldr	x1, [sp, #96]
    2fe8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    2fec:	ldr	x1, [sp, #104]
    2ff0:	ldr	x0, [sp, #96]
    2ff4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    2ff8:	str	x20, [sp, #96]
    2ffc:	str	x19, [sp, #104]
    3000:	str	xzr, [sp, #128]
    3004:	str	xzr, [sp, #136]
    3008:	str	xzr, [sp, #120]
    300c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    3010:	ldr	x0, [x0]
    3014:	ldr	x0, [x0]
    3018:	cbz	x0, 3134 <_ZN6__lsanL13CheckForLeaksEv+0x1d4>
    301c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    3020:	ldr	x0, [x0]
    3024:	ldr	x1, [x0]
    3028:	sub	x0, x1, #0x1
    302c:	tst	x0, x1
    3030:	b.ne	3148 <_ZN6__lsanL13CheckForLeaksEv+0x1e8>  // b.any
    3034:	stp	x21, x22, [sp, #16]
    3038:	add	x19, x1, #0x17
    303c:	neg	x1, x1
    3040:	and	x19, x19, x1
    3044:	mov	w2, #0x0                   	// #0
    3048:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    304c:	add	x1, x1, #0x0
    3050:	mov	x0, x19
    3054:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    3058:	mov	x20, x0
    305c:	ldr	x2, [sp, #136]
    3060:	add	x2, x2, x2, lsl #1
    3064:	lsl	x2, x2, #3
    3068:	ldr	x1, [sp, #120]
    306c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    3070:	ldr	x1, [sp, #128]
    3074:	ldr	x0, [sp, #120]
    3078:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    307c:	str	x20, [sp, #120]
    3080:	str	x19, [sp, #128]
    3084:	strb	wzr, [sp, #80]
    3088:	bl	0 <_ZN6__lsan18LockThreadRegistryEv>
    308c:	bl	0 <_ZN6__lsan13LockAllocatorEv>
    3090:	add	x1, sp, #0x50
    3094:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3098:	add	x0, x0, #0x0
    309c:	bl	0 <_ZN6__lsan14DoStopTheWorldEPFvRKN11__sanitizer20SuspendedThreadsListEPvES4_>
    30a0:	bl	0 <_ZN6__lsan15UnlockAllocatorEv>
    30a4:	bl	0 <_ZN6__lsan20UnlockThreadRegistryEv>
    30a8:	ldrb	w21, [sp, #80]
    30ac:	cbz	w21, 3160 <_ZN6__lsanL13CheckForLeaksEv+0x200>
    30b0:	add	x19, sp, #0x58
    30b4:	mov	x0, x19
    30b8:	bl	1d24 <_ZN6__lsan10LeakReport17ApplySuppressionsEv>
    30bc:	mov	x0, x19
    30c0:	bl	1f54 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>
    30c4:	mov	x20, x0
    30c8:	cbnz	x0, 318c <_ZN6__lsanL13CheckForLeaksEv+0x22c>
    30cc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    30d0:	ldr	x0, [x0]
    30d4:	ldrb	w19, [x0, #177]
    30d8:	cbnz	w19, 321c <_ZN6__lsanL13CheckForLeaksEv+0x2bc>
    30dc:	ldr	x1, [sp, #128]
    30e0:	ldr	x0, [sp, #120]
    30e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    30e8:	ldr	x1, [sp, #104]
    30ec:	ldr	x0, [sp, #96]
    30f0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    30f4:	ldp	x21, x22, [sp, #16]
    30f8:	mov	w0, w19
    30fc:	ldr	x30, [sp, #40]
    3100:	ldp	x19, x20, [sp], #144
    3104:	ret
    3108:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    310c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    3110:	ldr	x1, [x1]
    3114:	str	x0, [x1]
    3118:	b	2fa0 <_ZN6__lsanL13CheckForLeaksEv+0x40>
    311c:	stp	x21, x22, [sp, #16]
    3120:	str	x23, [sp, #32]
    3124:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3128:	add	x0, x0, #0x0
    312c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    3130:	bl	0 <_ZN11__sanitizer3DieEv>
    3134:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    3138:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    313c:	ldr	x1, [x1]
    3140:	str	x0, [x1]
    3144:	b	301c <_ZN6__lsanL13CheckForLeaksEv+0xbc>
    3148:	stp	x21, x22, [sp, #16]
    314c:	str	x23, [sp, #32]
    3150:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3154:	add	x0, x0, #0x0
    3158:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    315c:	bl	0 <_ZN11__sanitizer3DieEv>
    3160:	str	x23, [sp, #32]
    3164:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3168:	add	x0, x0, #0x0
    316c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    3170:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3174:	add	x0, x0, #0x0
    3178:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    317c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3180:	add	x0, x0, #0x0
    3184:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    3188:	bl	0 <_ZN11__sanitizer3DieEv>
    318c:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
    3190:	and	w19, w0, #0xff
    3194:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3198:	add	x0, x0, #0x0
    319c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    31a0:	cbnz	w19, 334c <_ZN6__lsanL13CheckForLeaksEv+0x3ec>
    31a4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    31a8:	add	x19, x1, #0x0
    31ac:	mov	x1, x19
    31b0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    31b4:	add	x0, x0, #0x0
    31b8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    31bc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    31c0:	add	x0, x0, #0x0
    31c4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    31c8:	mov	x1, x19
    31cc:	b	3374 <_ZN6__lsanL13CheckForLeaksEv+0x414>
    31d0:	str	x23, [sp, #32]
    31d4:	b	3220 <_ZN6__lsanL13CheckForLeaksEv+0x2c0>
    31d8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    31dc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    31e0:	ldr	x1, [x1]
    31e4:	str	x0, [x1]
    31e8:	b	323c <_ZN6__lsanL13CheckForLeaksEv+0x2dc>
    31ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    31f0:	add	x0, x0, #0x0
    31f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    31f8:	bl	0 <_ZN11__sanitizer3DieEv>
    31fc:	ldr	x1, [sp, #64]
    3200:	ldr	x0, [sp, #56]
    3204:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    3208:	b	333c <_ZN6__lsanL13CheckForLeaksEv+0x3dc>
    320c:	ldr	x23, [sp, #32]
    3210:	b	33a0 <_ZN6__lsanL13CheckForLeaksEv+0x440>
    3214:	mov	w19, #0x0                   	// #0
    3218:	b	30f8 <_ZN6__lsanL13CheckForLeaksEv+0x198>
    321c:	str	x23, [sp, #32]
    3220:	str	xzr, [sp, #64]
    3224:	str	xzr, [sp, #72]
    3228:	str	xzr, [sp, #56]
    322c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    3230:	ldr	x0, [x0]
    3234:	ldr	x0, [x0]
    3238:	cbz	x0, 31d8 <_ZN6__lsanL13CheckForLeaksEv+0x278>
    323c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    3240:	ldr	x0, [x0]
    3244:	ldr	x1, [x0]
    3248:	sub	x19, x1, #0x1
    324c:	ands	x19, x19, x1
    3250:	b.ne	31ec <_ZN6__lsanL13CheckForLeaksEv+0x28c>  // b.any
    3254:	add	x22, x1, #0x7
    3258:	neg	x1, x1
    325c:	and	x22, x22, x1
    3260:	mov	w2, #0x0                   	// #0
    3264:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3268:	add	x1, x1, #0x0
    326c:	mov	x0, x22
    3270:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    3274:	mov	x23, x0
    3278:	ldr	x2, [sp, #72]
    327c:	lsl	x2, x2, #3
    3280:	ldr	x1, [sp, #56]
    3284:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    3288:	ldr	x1, [sp, #64]
    328c:	ldr	x0, [sp, #56]
    3290:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    3294:	str	x23, [sp, #56]
    3298:	str	x22, [sp, #64]
    329c:	bl	8c <_ZN6__lsanL21GetSuppressionContextEv>
    32a0:	add	x1, sp, #0x38
    32a4:	bl	0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>
    32a8:	ldr	x0, [sp, #72]
    32ac:	cbz	x0, 31fc <_ZN6__lsanL13CheckForLeaksEv+0x29c>
    32b0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    32b4:	add	x1, x1, #0x0
    32b8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    32bc:	add	x0, x0, #0x0
    32c0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    32c4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    32c8:	add	x0, x0, #0x0
    32cc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    32d0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    32d4:	add	x0, x0, #0x0
    32d8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    32dc:	ldr	x0, [sp, #72]
    32e0:	cbz	x0, 331c <_ZN6__lsanL13CheckForLeaksEv+0x3bc>
    32e4:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    32e8:	add	x22, x22, #0x0
    32ec:	ldr	x0, [sp, #56]
    32f0:	ldr	x2, [x0, x19, lsl #3]
    32f4:	ldr	w1, [x2, #16]
    32f8:	ldr	x3, [x2, #8]
    32fc:	ldr	x2, [x2, #24]
    3300:	mov	w1, w1
    3304:	mov	x0, x22
    3308:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    330c:	add	x19, x19, #0x1
    3310:	ldr	x0, [sp, #72]
    3314:	cmp	x0, x19
    3318:	b.hi	32ec <_ZN6__lsanL13CheckForLeaksEv+0x38c>  // b.pmore
    331c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3320:	add	x1, x1, #0x0
    3324:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3328:	add	x0, x0, #0x0
    332c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    3330:	ldr	x1, [sp, #64]
    3334:	ldr	x0, [sp, #56]
    3338:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    333c:	mov	w19, #0x0                   	// #0
    3340:	cbnz	x20, 320c <_ZN6__lsanL13CheckForLeaksEv+0x2ac>
    3344:	ldr	x23, [sp, #32]
    3348:	b	30dc <_ZN6__lsanL13CheckForLeaksEv+0x17c>
    334c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3350:	add	x1, x1, #0x0
    3354:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3358:	add	x0, x0, #0x0
    335c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    3360:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3364:	add	x0, x0, #0x0
    3368:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    336c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3370:	add	x1, x1, #0x0
    3374:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3378:	add	x0, x0, #0x0
    337c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    3380:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3384:	ldrsw	x1, [x0]
    3388:	add	x0, sp, #0x58
    338c:	bl	2e34 <_ZN6__lsan10LeakReport14ReportTopLeaksEm>
    3390:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    3394:	ldr	x0, [x0]
    3398:	ldrb	w0, [x0, #177]
    339c:	cbnz	w0, 31d0 <_ZN6__lsanL13CheckForLeaksEv+0x270>
    33a0:	add	x0, sp, #0x58
    33a4:	bl	1af0 <_ZN6__lsan10LeakReport12PrintSummaryEv>
    33a8:	mov	w19, w21
    33ac:	b	30dc <_ZN6__lsanL13CheckForLeaksEv+0x17c>

00000000000033b0 <_ZN6__lsan11DoLeakCheckEv>:
    33b0:	stp	x19, x30, [sp, #-16]!
    33b4:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    33b8:	add	x19, x19, #0x0
    33bc:	add	x0, x19, #0xe0
    33c0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    33c4:	ldrb	w0, [x19, #312]
    33c8:	cbnz	w0, 3404 <_ZN6__lsan11DoLeakCheckEv+0x54>
    33cc:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    33d0:	add	x19, x19, #0x0
    33d4:	mov	w0, #0x1                   	// #1
    33d8:	strb	w0, [x19, #312]
    33dc:	bl	2f60 <_ZN6__lsanL13CheckForLeaksEv>
    33e0:	and	w1, w0, #0xff
    33e4:	strb	w0, [x19, #216]
    33e8:	cbnz	w1, 3410 <_ZN6__lsan11DoLeakCheckEv+0x60>
    33ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    33f0:	add	x0, x0, #0x0
    33f4:	add	x0, x0, #0xe0
    33f8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    33fc:	ldp	x19, x30, [sp], #16
    3400:	ret
    3404:	add	x0, x19, #0xe0
    3408:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    340c:	b	33fc <_ZN6__lsan11DoLeakCheckEv+0x4c>
    3410:	bl	0 <_ZN6__lsan11HandleLeaksEv>
    3414:	b	33ec <_ZN6__lsan11DoLeakCheckEv+0x3c>

0000000000003418 <__lsan_do_leak_check>:
    3418:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    341c:	ldr	x0, [x0]
    3420:	ldrb	w0, [x0, #57]
    3424:	cbnz	w0, 342c <__lsan_do_leak_check+0x14>
    3428:	ret
    342c:	str	x30, [sp, #-16]!
    3430:	bl	33b0 <_ZN6__lsan11DoLeakCheckEv>
    3434:	ldr	x30, [sp], #16
    3438:	ret

000000000000343c <_ZN6__lsanL22DoRecoverableLeakCheckEv>:
    343c:	stp	x19, x20, [sp, #-32]!
    3440:	str	x30, [sp, #16]
    3444:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    3448:	add	x19, x19, #0x0
    344c:	add	x19, x19, #0xe0
    3450:	mov	x0, x19
    3454:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    3458:	bl	2f60 <_ZN6__lsanL13CheckForLeaksEv>
    345c:	and	w20, w0, #0xff
    3460:	mov	x0, x19
    3464:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    3468:	mov	w0, w20
    346c:	ldr	x30, [sp, #16]
    3470:	ldp	x19, x20, [sp], #32
    3474:	ret

0000000000003478 <_ZN6__lsan26DoRecoverableLeakCheckVoidEv>:
    3478:	str	x30, [sp, #-16]!
    347c:	bl	343c <_ZN6__lsanL22DoRecoverableLeakCheckEv>
    3480:	ldr	x30, [sp], #16
    3484:	ret

0000000000003488 <__lsan_do_recoverable_leak_check>:
    3488:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    348c:	ldr	x0, [x0]
    3490:	ldrb	w1, [x0, #57]
    3494:	mov	w0, #0x0                   	// #0
    3498:	cbnz	w1, 34a0 <__lsan_do_recoverable_leak_check+0x18>
    349c:	ret
    34a0:	str	x30, [sp, #-16]!
    34a4:	bl	343c <_ZN6__lsanL22DoRecoverableLeakCheckEv>
    34a8:	ldr	x30, [sp], #16
    34ac:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	ldr	x0, [x0, #8]
   4:	str	x1, [x0]
   8:	mov	w0, #0x1                   	// #1
   c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	w2, #0xa                   	// #10
  14:	add	x1, sp, #0x28
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	w0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	b	3c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x3c>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	ldr	x20, [x0, #8]
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 38 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x38>
  24:	strb	wzr, [x20]
  28:	mov	w0, #0x1                   	// #1
  2c:	ldr	x30, [sp, #16]
  30:	ldp	x19, x20, [sp], #32
  34:	ret
  38:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  3c:	add	x1, x1, #0x0
  40:	mov	x0, x19
  44:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  48:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  4c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  5c:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  60:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  64:	add	x1, x1, #0x0
  68:	mov	x0, x19
  6c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  70:	cbnz	w0, 80 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x80>
  74:	mov	w0, #0x1                   	// #1
  78:	strb	w0, [x20]
  7c:	b	28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  80:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  84:	add	x1, x1, #0x0
  88:	mov	x0, x19
  8c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  90:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  94:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  98:	add	x1, x1, #0x0
  9c:	mov	x0, x19
  a0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a4:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  a8:	mov	x1, x19
  ac:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b0:	add	x0, x0, #0x0
  b4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  b8:	mov	w0, #0x0                   	// #0
  bc:	b	2c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x2c>

Disassembly of section .text._ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	118 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x118>  // b.plast
   8:	mov	x7, #0x1                   	// #1
   c:	b	20 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x20>
  10:	add	x2, x7, #0x1
  14:	cmp	x1, x2
  18:	b.ls	58 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x58>  // b.plast
  1c:	add	x7, x7, #0x1
  20:	cbz	x7, 1c <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x1c>
  24:	mov	x2, x7
  28:	sub	x3, x2, #0x1
  2c:	mov	x5, x2
  30:	lsr	x2, x3, #1
  34:	ldr	x6, [x0, x2, lsl #3]
  38:	ldr	x4, [x0, x5, lsl #3]
  3c:	cmp	x4, x6
  40:	b.ls	10 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x10>  // b.plast
  44:	str	x6, [x0, x5, lsl #3]
  48:	str	x4, [x0, x2, lsl #3]
  4c:	cmp	x3, #0x1
  50:	b.hi	28 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x28>  // b.pmore
  54:	b	10 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x10>
  58:	sub	x3, x1, #0x1
  5c:	mov	x8, #0x0                   	// #0
  60:	b	84 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x84>
  64:	lsl	x5, x5, #4
  68:	ldr	x5, [x0, x5]
  6c:	cmp	x6, x5
  70:	csel	x1, x1, x4, cc  // cc = lo, ul, last
  74:	b	bc <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xbc>
  78:	cmp	x3, #0x1
  7c:	b.eq	118 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x118>  // b.none
  80:	sub	x3, x3, #0x1
  84:	ldr	x1, [x0]
  88:	ldr	x2, [x0, x3, lsl #3]
  8c:	str	x2, [x0]
  90:	str	x1, [x0, x3, lsl #3]
  94:	cbz	x3, 80 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x80>
  98:	mov	x2, x8
  9c:	b	e0 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xe0>
  a0:	cmp	x3, x1
  a4:	b.ls	78 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x78>  // b.plast
  a8:	lsl	x5, x5, #4
  ac:	ldr	x6, [x0, x2, lsl #3]
  b0:	ldr	x4, [x0, x5]
  b4:	cmp	x6, x4
  b8:	b.cs	78 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  bc:	cmp	x1, x2
  c0:	b.eq	78 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x78>  // b.none
  c4:	ldr	x4, [x0, x2, lsl #3]
  c8:	ldr	x5, [x0, x1, lsl #3]
  cc:	str	x5, [x0, x2, lsl #3]
  d0:	str	x4, [x0, x1, lsl #3]
  d4:	cmp	x1, x3
  d8:	b.cs	78 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  dc:	mov	x2, x1
  e0:	lsl	x1, x2, #1
  e4:	add	x4, x1, #0x1
  e8:	add	x5, x2, #0x1
  ec:	add	x1, x1, #0x2
  f0:	cmp	x3, x4
  f4:	b.ls	a0 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xa0>  // b.plast
  f8:	ldr	x7, [x0, x2, lsl #3]
  fc:	ldr	x6, [x0, x4, lsl #3]
 100:	cmp	x7, x6
 104:	b.cs	a0 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xa0>  // b.hs, b.nlast
 108:	cmp	x3, x1
 10c:	b.hi	64 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x64>  // b.pmore
 110:	mov	x1, x4
 114:	b	bc <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xbc>
 118:	ret

Disassembly of section .text._ZN11__sanitizer4SwapIN6__lsan4LeakEEEvRT_S4_:

0000000000000000 <_ZN11__sanitizer4SwapIN6__lsan4LeakEEEvRT_S4_>:
   0:	sub	sp, sp, #0x20
   4:	ldp	x4, x5, [x0]
   8:	ldp	x2, x3, [x0, #16]
   c:	ldp	x6, x7, [x1]
  10:	stp	x6, x7, [x0]
  14:	ldp	x6, x7, [x1, #16]
  18:	stp	x6, x7, [x0, #16]
  1c:	stp	x4, x5, [x1]
  20:	stp	x2, x3, [x1, #16]
  24:	add	sp, sp, #0x20
  28:	ret

Disassembly of section .text._ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	174 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x174>  // b.plast
   8:	stp	x19, x20, [sp, #-80]!
   c:	stp	x21, x22, [sp, #16]
  10:	stp	x23, x24, [sp, #32]
  14:	stp	x25, x26, [sp, #48]
  18:	str	x30, [sp, #64]
  1c:	mov	x20, x0
  20:	mov	x22, x1
  24:	mov	x25, x2
  28:	mov	x26, #0x1                   	// #1
  2c:	b	40 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x40>
  30:	add	x0, x26, #0x1
  34:	cmp	x22, x0
  38:	b.ls	88 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x88>  // b.plast
  3c:	add	x26, x26, #0x1
  40:	cbz	x26, 3c <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x3c>
  44:	mov	x21, x26
  48:	sub	x23, x21, #0x1
  4c:	mov	x19, x21
  50:	lsr	x21, x23, #1
  54:	add	x24, x20, x21, lsl #5
  58:	add	x19, x20, x19, lsl #5
  5c:	mov	x1, x19
  60:	mov	x0, x24
  64:	blr	x25
  68:	and	w0, w0, #0xff
  6c:	cbz	w0, 30 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x30>
  70:	mov	x1, x24
  74:	mov	x0, x19
  78:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
  7c:	cmp	x23, #0x1
  80:	b.hi	48 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x48>  // b.pmore
  84:	b	30 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x30>
  88:	sub	x22, x22, #0x1
  8c:	mov	x24, #0x0                   	// #0
  90:	b	b8 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xb8>
  94:	add	x1, x20, x26, lsl #6
  98:	add	x0, x20, x21, lsl #5
  9c:	blr	x25
  a0:	ands	w0, w0, #0xff
  a4:	csel	x19, x19, x21, ne  // ne = any
  a8:	b	ec <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xec>
  ac:	cmp	x22, #0x1
  b0:	b.eq	15c <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x15c>  // b.none
  b4:	sub	x22, x22, #0x1
  b8:	add	x1, x20, x22, lsl #5
  bc:	mov	x0, x20
  c0:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
  c4:	cbz	x22, b4 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xb4>
  c8:	mov	x23, x24
  cc:	b	10c <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x10c>
  d0:	cmp	x19, x22
  d4:	b.cs	ac <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xac>  // b.hs, b.nlast
  d8:	add	x1, x20, x26, lsl #6
  dc:	add	x0, x20, x23, lsl #5
  e0:	blr	x25
  e4:	and	w0, w0, #0xff
  e8:	cbz	w0, ac <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xac>
  ec:	cmp	x19, x23
  f0:	b.eq	ac <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xac>  // b.none
  f4:	add	x1, x20, x19, lsl #5
  f8:	add	x0, x20, x23, lsl #5
  fc:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
 100:	cmp	x19, x22
 104:	b.cs	ac <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xac>  // b.hs, b.nlast
 108:	mov	x23, x19
 10c:	lsl	x19, x23, #1
 110:	add	x21, x19, #0x1
 114:	add	x26, x23, #0x1
 118:	add	x19, x19, #0x2
 11c:	cmp	x21, x22
 120:	b.cs	d0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xd0>  // b.hs, b.nlast
 124:	add	x1, x20, x21, lsl #5
 128:	add	x0, x20, x23, lsl #5
 12c:	blr	x25
 130:	and	w0, w0, #0xff
 134:	cbz	w0, d0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xd0>
 138:	cmp	x19, x22
 13c:	b.cc	94 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x94>  // b.lo, b.ul, b.last
 140:	cmp	x21, x23
 144:	b.eq	ac <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xac>  // b.none
 148:	add	x1, x20, x21, lsl #5
 14c:	add	x0, x20, x23, lsl #5
 150:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
 154:	mov	x19, x21
 158:	b	108 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x108>
 15c:	ldp	x21, x22, [sp, #16]
 160:	ldp	x23, x24, [sp, #32]
 164:	ldp	x25, x26, [sp, #48]
 168:	ldr	x30, [sp, #64]
 16c:	ldp	x19, x20, [sp], #80
 170:	ret
 174:	ret

lsan_common_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #48]
   c:	mov	x21, x0
  10:	ldrh	w0, [x0, #24]
  14:	cbz	w0, 90 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x90>
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x24, x2
  20:	mov	x19, #0x0                   	// #0
  24:	mov	x20, #0x0                   	// #0
  28:	mov	x23, #0xffffffff            	// #4294967295
  2c:	movk	x23, #0x2, lsl #32
  30:	mov	x22, #0x1                   	// #1
  34:	movk	x22, #0x2, lsl #32
  38:	b	50 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x50>
  3c:	add	x20, x20, #0x1
  40:	add	x19, x19, #0x38
  44:	ldrh	w0, [x21, #24]
  48:	cmp	x0, x20
  4c:	b.ls	8c <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x8c>  // b.plast
  50:	ldr	x1, [x21, #16]
  54:	add	x2, x1, x19
  58:	ldr	x1, [x1, x19]
  5c:	and	x1, x1, x23
  60:	cmp	x1, x22
  64:	b.ne	3c <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x3c>  // b.any
  68:	ldr	x1, [x2, #40]
  6c:	cbz	x1, 3c <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x3c>
  70:	ldr	x0, [x21]
  74:	ldr	x2, [x2, #16]
  78:	add	x0, x0, x2
  7c:	mov	x2, x24
  80:	add	x1, x1, x0
  84:	bl	0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE>
  88:	b	3c <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x3c>
  8c:	ldp	x23, x24, [sp, #32]
  90:	mov	w0, #0x0                   	// #0
  94:	ldp	x21, x22, [sp, #16]
  98:	ldr	x30, [sp, #48]
  9c:	ldp	x19, x20, [sp], #64
  a0:	ret

00000000000000a4 <_ZN6__lsanL22DoStopTheWorldCallbackEP12dl_phdr_infomPv>:
  a4:	str	x30, [sp, #-16]!
  a8:	ldr	x1, [x2, #8]
  ac:	ldr	x0, [x2]
  b0:	bl	0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>
  b4:	mov	w0, #0x1                   	// #1
  b8:	ldr	x30, [sp], #16
  bc:	ret

00000000000000c0 <_ZN6__lsan20DisabledInThisThreadEv>:
  c0:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  c4:	ldr	x0, [x0]
  c8:	mrs	x1, tpidr_el0
  cc:	ldr	w0, [x1, x0]
  d0:	cmp	w0, #0x0
  d4:	cset	w0, gt
  d8:	ret

00000000000000dc <_ZN6__lsan19DisableInThisThreadEv>:
  dc:	mrs	x2, tpidr_el0
  e0:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  e4:	ldr	x1, [x1]
  e8:	ldr	w0, [x2, x1]
  ec:	add	w0, w0, #0x1
  f0:	str	w0, [x2, x1]
  f4:	ret

00000000000000f8 <_ZN6__lsan18EnableInThisThreadEv>:
  f8:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  fc:	ldr	x0, [x0]
 100:	mrs	x1, tpidr_el0
 104:	ldr	w0, [x1, x0]
 108:	cbz	w0, 128 <_ZN6__lsan18EnableInThisThreadEv+0x30>
 10c:	mrs	x2, tpidr_el0
 110:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 114:	ldr	x1, [x1]
 118:	ldr	w0, [x2, x1]
 11c:	sub	w0, w0, #0x1
 120:	str	w0, [x2, x1]
 124:	ret
 128:	str	x30, [sp, #-16]!
 12c:	bl	0 <_ZN6__lsan23DisableCounterUnderflowEv>
 130:	mrs	x2, tpidr_el0
 134:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 138:	ldr	x1, [x1]
 13c:	ldr	w0, [x2, x1]
 140:	sub	w0, w0, #0x1
 144:	str	w0, [x2, x1]
 148:	ldr	x30, [sp], #16
 14c:	ret

0000000000000150 <_ZN6__lsan33InitializePlatformSpecificModulesEv>:
 150:	stp	x19, x20, [sp, #-192]!
 154:	stp	x25, x26, [sp, #48]
 158:	str	x30, [sp, #64]
 15c:	strb	wzr, [sp, #184]
 160:	add	x0, sp, #0xa0
 164:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 168:	ldr	x20, [sp, #160]
 16c:	ldr	x25, [sp, #176]
 170:	add	x25, x25, x25, lsl #3
 174:	add	x25, x20, x25, lsl #3
 178:	cmp	x25, x20
 17c:	b.eq	344 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1f4>  // b.none
 180:	stp	x21, x22, [sp, #16]
 184:	stp	x23, x24, [sp, #32]
 188:	adrp	x24, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 18c:	add	x24, x24, #0x0
 190:	add	x21, x24, #0x40
 194:	add	x22, sp, #0x58
 198:	add	x26, x22, #0x1c
 19c:	b	21c <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xcc>
 1a0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 1a4:	ldr	x0, [x0]
 1a8:	ldr	w0, [x0]
 1ac:	cbnz	w0, 1f8 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xa8>
 1b0:	adrp	x19, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 1b4:	ldr	x0, [x19]
 1b8:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 1bc:	str	xzr, [x19]
 1c0:	ldr	x19, [sp, #160]
 1c4:	ldr	x20, [sp, #176]
 1c8:	add	x20, x20, x20, lsl #3
 1cc:	add	x20, x19, x20, lsl #3
 1d0:	cmp	x19, x20
 1d4:	b.eq	364 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x214>  // b.none
 1d8:	mov	x0, x19
 1dc:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 1e0:	add	x19, x19, #0x48
 1e4:	cmp	x20, x19
 1e8:	b.ne	1d8 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x88>  // b.any
 1ec:	ldp	x21, x22, [sp, #16]
 1f0:	ldp	x23, x24, [sp, #32]
 1f4:	b	300 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1b0>
 1f8:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 1fc:	add	x1, x1, #0x0
 200:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 204:	add	x0, x0, #0x0
 208:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 20c:	b	1b0 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x60>
 210:	add	x20, x20, #0x48
 214:	cmp	x25, x20
 218:	b.eq	2c0 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x170>  // b.none
 21c:	ldr	x23, [x20, #8]
 220:	mov	x0, #0x7                   	// #7
 224:	bl	0 <getauxval>
 228:	cmp	x23, x0
 22c:	b.ne	210 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xc0>  // b.any
 230:	ldr	x0, [x24]
 234:	cbnz	x0, 1a0 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x50>
 238:	str	x21, [x24]
 23c:	ldp	x0, x1, [x20]
 240:	stp	x0, x1, [x21]
 244:	ldp	x0, x1, [x20, #16]
 248:	stp	x0, x1, [x21, #16]
 24c:	ldp	x0, x1, [x20, #32]
 250:	stp	x0, x1, [x21, #32]
 254:	ldp	x0, x1, [x20, #48]
 258:	stp	x0, x1, [x21, #48]
 25c:	ldr	x0, [x20, #64]
 260:	str	x0, [x21, #64]
 264:	str	xzr, [sp, #88]
 268:	str	xzr, [sp, #96]
 26c:	str	xzr, [sp, #104]
 270:	str	wzr, [sp, #112]
 274:	strb	wzr, [sp, #132]
 278:	mov	x2, #0x10                  	// #16
 27c:	mov	w1, #0x0                   	// #0
 280:	mov	x0, x26
 284:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 288:	str	xzr, [sp, #152]
 28c:	str	xzr, [sp, #144]
 290:	str	xzr, [sp, #136]
 294:	ldp	x0, x1, [x22]
 298:	stp	x0, x1, [x20]
 29c:	ldp	x0, x1, [x22, #16]
 2a0:	stp	x0, x1, [x20, #16]
 2a4:	ldp	x0, x1, [x22, #32]
 2a8:	stp	x0, x1, [x20, #32]
 2ac:	ldp	x0, x1, [x22, #48]
 2b0:	stp	x0, x1, [x20, #48]
 2b4:	ldr	x0, [x22, #64]
 2b8:	str	x0, [x20, #64]
 2bc:	b	210 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xc0>
 2c0:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 2c4:	ldr	x0, [x0]
 2c8:	cbz	x0, 310 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1c0>
 2cc:	ldp	x21, x22, [sp, #16]
 2d0:	ldp	x23, x24, [sp, #32]
 2d4:	ldr	x19, [sp, #160]
 2d8:	ldr	x20, [sp, #176]
 2dc:	add	x20, x20, x20, lsl #3
 2e0:	add	x20, x19, x20, lsl #3
 2e4:	cmp	x19, x20
 2e8:	b.eq	300 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1b0>  // b.none
 2ec:	mov	x0, x19
 2f0:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 2f4:	add	x19, x19, #0x48
 2f8:	cmp	x20, x19
 2fc:	b.ne	2ec <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x19c>  // b.any
 300:	ldp	x25, x26, [sp, #48]
 304:	ldr	x30, [sp, #64]
 308:	ldp	x19, x20, [sp], #192
 30c:	ret
 310:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 314:	ldr	x0, [x0]
 318:	ldr	w0, [x0]
 31c:	cbnz	w0, 32c <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1dc>
 320:	ldp	x21, x22, [sp, #16]
 324:	ldp	x23, x24, [sp, #32]
 328:	b	2d4 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x184>
 32c:	ldp	x21, x22, [sp, #16]
 330:	ldp	x23, x24, [sp, #32]
 334:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 338:	add	x0, x0, #0x0
 33c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 340:	b	2d4 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x184>
 344:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 348:	ldr	x0, [x0]
 34c:	cbnz	x0, 300 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1b0>
 350:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 354:	ldr	x0, [x0]
 358:	ldr	w0, [x0]
 35c:	cbz	w0, 300 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1b0>
 360:	b	334 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1e4>
 364:	ldp	x21, x22, [sp, #16]
 368:	ldp	x23, x24, [sp, #32]
 36c:	b	300 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x1b0>

0000000000000370 <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE>:
 370:	adrp	x2, 0 <_ZN6__lsan10lsan_flagsE>
 374:	ldr	x2, [x2]
 378:	ldrb	w1, [x2, #12]
 37c:	cbnz	w1, 384 <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE+0x14>
 380:	ret
 384:	str	x30, [sp, #-16]!
 388:	mov	x1, x0
 38c:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 390:	add	x0, x0, #0x0
 394:	bl	0 <dl_iterate_phdr>
 398:	ldr	x30, [sp], #16
 39c:	ret

00000000000003a0 <_ZN6__lsan9GetLinkerEv>:
 3a0:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 3a4:	ldr	x0, [x0]
 3a8:	ret

00000000000003ac <_ZN6__lsan34ProcessPlatformSpecificAllocationsEPN11__sanitizer18InternalMmapVectorImEE>:
 3ac:	ret

00000000000003b0 <_ZN6__lsan11HandleLeaksEv>:
 3b0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 3b4:	ldr	x0, [x0]
 3b8:	ldr	w0, [x0, #216]
 3bc:	cbnz	w0, 3c4 <_ZN6__lsan11HandleLeaksEv+0x14>
 3c0:	ret
 3c4:	str	x30, [sp, #-16]!
 3c8:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000003cc <_ZN6__lsan14DoStopTheWorldEPFvRKN11__sanitizer20SuspendedThreadsListEPvES4_>:
 3cc:	str	x30, [sp, #-32]!
 3d0:	str	x0, [sp, #16]
 3d4:	str	x1, [sp, #24]
 3d8:	add	x1, sp, #0x10
 3dc:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 3e0:	add	x0, x0, #0x0
 3e4:	bl	0 <dl_iterate_phdr>
 3e8:	ldr	x30, [sp], #32
 3ec:	ret

lsan_common_mac.o:     file format elf64-littleaarch64


lsan.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL18LsanOnDeadlySignaliPvS_>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	mov	x20, x2
  10:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
  14:	mov	x4, #0x0                   	// #0
  18:	adrp	x3, 0 <_ZL18LsanOnDeadlySignaliPvS_>
  1c:	add	x3, x3, #0x0
  20:	mov	w2, w0
  24:	mov	x1, x20
  28:	mov	x0, x19
  2c:	bl	0 <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret

000000000000003c <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE>:
  3c:	stp	x19, x20, [sp, #-48]!
  40:	stp	x21, x22, [sp, #16]
  44:	stp	x23, x30, [sp, #32]
  48:	mov	x19, x2
  4c:	ldr	x22, [x0, #24]
  50:	ldr	x23, [x0, #40]
  54:	ldr	x21, [x0, #8]
  58:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  5c:	ldr	x0, [x0]
  60:	ldrb	w20, [x0, #33]
  64:	mov	x6, #0x0                   	// #0
  68:	mov	x5, #0x0                   	// #0
  6c:	cbnz	w20, 9c <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x60>
  70:	mov	w7, w20
  74:	mov	x4, x21
  78:	mov	x3, x23
  7c:	mov	x2, x22
  80:	mov	w1, #0x100                 	// #256
  84:	mov	x0, x19
  88:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
  8c:	ldp	x21, x22, [sp, #16]
  90:	ldp	x23, x30, [sp, #32]
  94:	ldp	x19, x20, [sp], #48
  98:	ret
  9c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
  a0:	cbz	x0, b0 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x74>
  a4:	ldr	x5, [x0, #152]
  a8:	ldr	x6, [x0, #144]
  ac:	b	70 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x34>
  b0:	mov	x6, #0x0                   	// #0
  b4:	mov	x5, #0x0                   	// #0
  b8:	b	70 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x34>

00000000000000bc <_ZL15InitializeFlagsv>:
  bc:	stp	x19, x20, [sp, #-304]!
  c0:	stp	x21, x30, [sp, #16]
  c4:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  c8:	ldr	x19, [x19]
  cc:	mov	x0, x19
  d0:	bl	0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
  d4:	add	x20, sp, #0x20
  d8:	mov	x1, x19
  dc:	mov	x0, x20
  e0:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
  e4:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  f0:	str	x0, [sp, #40]
  f4:	mov	w0, #0x1e                  	// #30
  f8:	str	w0, [sp, #68]
  fc:	mov	w0, #0x1                   	// #1
 100:	strb	w0, [sp, #153]
 104:	strb	w0, [sp, #89]
 108:	mov	w0, #0x17                  	// #23
 10c:	str	w0, [sp, #248]
 110:	mov	x1, x20
 114:	mov	x0, x19
 118:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 11c:	adrp	x21, 0 <_ZN6__lsan10lsan_flagsE>
 120:	ldr	x21, [x21]
 124:	mov	x0, x21
 128:	bl	0 <_ZN6__lsan5Flags11SetDefaultsEv>
 12c:	add	x20, sp, #0x110
 130:	mov	x0, x20
 134:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
 138:	mov	x1, x21
 13c:	mov	x0, x20
 140:	bl	0 <_ZN6__lsan17RegisterLsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>
 144:	mov	x1, x19
 148:	mov	x0, x20
 14c:	bl	0 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 150:	bl	0 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv>
 154:	mov	x1, x0
 158:	mov	x0, x20
 15c:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 160:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 164:	add	x0, x0, #0x0
 168:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 16c:	mov	x1, x0
 170:	mov	x0, x20
 174:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 178:	ldr	w1, [x19, #52]
 17c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 180:	ldr	x0, [x0]
 184:	str	w1, [x0]
 188:	ldr	w0, [x0]
 18c:	cbnz	w0, 1bc <_ZL15InitializeFlagsv+0x100>
 190:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 194:	ldr	x0, [x0]
 198:	ldrb	w0, [x0, #122]
 19c:	cbnz	w0, 1c4 <_ZL15InitializeFlagsv+0x108>
 1a0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1a4:	ldr	x0, [x0]
 1a8:	ldr	x0, [x0, #40]
 1ac:	bl	0 <__sanitizer_set_report_path>
 1b0:	ldp	x21, x30, [sp, #16]
 1b4:	ldp	x19, x20, [sp], #304
 1b8:	ret
 1bc:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 1c0:	b	190 <_ZL15InitializeFlagsv+0xd4>
 1c4:	add	x0, sp, #0x110
 1c8:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 1cc:	b	1a0 <_ZL15InitializeFlagsv+0xe4>

00000000000001d0 <_ZN6__lsan14WordIsPoisonedEm>:
 1d0:	mov	w0, #0x0                   	// #0
 1d4:	ret

00000000000001d8 <__lsan_init>:
 1d8:	stp	x19, x30, [sp, #-16]!
 1dc:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 1e0:	ldrb	w0, [x0]
 1e4:	cbnz	w0, 1fc <__lsan_init+0x24>
 1e8:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 1ec:	ldrb	w0, [x0]
 1f0:	cbz	w0, 21c <__lsan_init+0x44>
 1f4:	ldp	x19, x30, [sp], #16
 1f8:	ret
 1fc:	mov	x4, #0x0                   	// #0
 200:	mov	x3, #0x0                   	// #0
 204:	adrp	x2, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 208:	add	x2, x2, #0x0
 20c:	mov	w1, #0x53                  	// #83
 210:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 214:	add	x0, x0, #0x0
 218:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 21c:	mov	w19, #0x1                   	// #1
 220:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 224:	strb	w19, [x0]
 228:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 22c:	ldr	x0, [x0]
 230:	adrp	x1, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 234:	add	x1, x1, #0x0
 238:	str	x1, [x0]
 23c:	bl	0 <_ZN11__sanitizer15CacheBinaryNameEv>
 240:	bl	bc <_ZL15InitializeFlagsv>
 244:	bl	0 <_ZN6__lsan14InitCommonLsanEv>
 248:	bl	0 <_ZN6__lsan19InitializeAllocatorEv>
 24c:	bl	0 <_ZN6__lsan19ReplaceSystemMallocEv>
 250:	bl	0 <_ZN11__sanitizer11InitTlsSizeEv>
 254:	bl	0 <_ZN6__lsan22InitializeInterceptorsEv>
 258:	bl	0 <_ZN6__lsan24InitializeThreadRegistryEv>
 25c:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 260:	add	x0, x0, #0x0
 264:	bl	0 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>
 268:	mov	w2, w19
 26c:	mov	x1, #0x0                   	// #0
 270:	mov	w0, #0x0                   	// #0
 274:	bl	0 <_ZN6__lsan12ThreadCreateEjmb>
 278:	mov	w3, w0
 27c:	cbnz	w0, 2e8 <__lsan_init+0x110>
 280:	bl	0 <_ZN11__sanitizer6GetTidEv>
 284:	mov	w2, #0x0                   	// #0
 288:	mov	x1, x0
 28c:	mov	w0, #0x0                   	// #0
 290:	bl	0 <_ZN6__lsan11ThreadStartEjyb>
 294:	mov	w0, #0x0                   	// #0
 298:	bl	0 <_ZN6__lsan16SetCurrentThreadEj>
 29c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 2a0:	ldr	x0, [x0]
 2a4:	ldrb	w0, [x0, #57]
 2a8:	cbz	w0, 2bc <__lsan_init+0xe4>
 2ac:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 2b0:	ldr	x0, [x0]
 2b4:	ldrb	w0, [x0, #58]
 2b8:	cbnz	w0, 304 <__lsan_init+0x12c>
 2bc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 2c0:	ldr	x0, [x0]
 2c4:	ldr	x1, [x0, #168]
 2c8:	ldrb	w0, [x0, #161]
 2cc:	bl	0 <_ZN11__sanitizer18InitializeCoverageEbPKc>
 2d0:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 2d4:	add	x1, x0, #0x0
 2d8:	mov	w2, #0x1                   	// #1
 2dc:	strb	w2, [x1, #1]
 2e0:	strb	wzr, [x0]
 2e4:	b	1f4 <__lsan_init+0x1c>
 2e8:	mov	x4, #0x0                   	// #0
 2ec:	adrp	x2, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 2f0:	add	x2, x2, #0x0
 2f4:	mov	w1, #0x63                  	// #99
 2f8:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 2fc:	add	x0, x0, #0x0
 300:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 304:	adrp	x0, 0 <_ZN6__lsan11DoLeakCheckEv>
 308:	ldr	x0, [x0]
 30c:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 310:	b	2bc <__lsan_init+0xe4>

0000000000000314 <__sanitizer_print_stack_trace>:
 314:	sub	sp, sp, #0x850
 318:	stp	x29, x30, [sp]
 31c:	mov	x29, sp
 320:	stp	x19, x20, [sp, #16]
 324:	str	x21, [sp, #32]
 328:	add	x0, x29, #0x48
 32c:	str	x0, [x29, #56]
 330:	str	wzr, [x29, #64]
 334:	str	wzr, [x29, #68]
 338:	str	xzr, [x29, #2120]
 33c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
 340:	mov	x20, x0
 344:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 348:	ldr	x0, [x0]
 34c:	ldrb	w21, [x0, #33]
 350:	mov	x6, #0x0                   	// #0
 354:	mov	x5, #0x0                   	// #0
 358:	cbnz	w21, 398 <__sanitizer_print_stack_trace+0x84>
 35c:	add	x19, x29, #0x38
 360:	mov	w7, w21
 364:	mov	x4, #0x0                   	// #0
 368:	mov	x3, x29
 36c:	mov	x2, x20
 370:	mov	w1, #0x100                 	// #256
 374:	mov	x0, x19
 378:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 37c:	mov	x0, x19
 380:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 384:	ldp	x19, x20, [sp, #16]
 388:	ldr	x21, [sp, #32]
 38c:	ldp	x29, x30, [sp]
 390:	add	sp, sp, #0x850
 394:	ret
 398:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
 39c:	cbz	x0, 3ac <__sanitizer_print_stack_trace+0x98>
 3a0:	ldr	x5, [x0, #152]
 3a4:	ldr	x6, [x0, #144]
 3a8:	b	35c <__sanitizer_print_stack_trace+0x48>
 3ac:	mov	x6, #0x0                   	// #0
 3b0:	mov	x5, #0x0                   	// #0
 3b4:	b	35c <__sanitizer_print_stack_trace+0x48>

lsan_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsan16GetCurrentThreadEv>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
   8:	ldr	x1, [x0]
   c:	add	x0, x0, #0x0
  10:	blr	x1
  14:	mrs	x1, tpidr_el0
  18:	ldr	w0, [x1, x0]
  1c:	ldr	x30, [sp], #16
  20:	ret

0000000000000024 <_ZN6__lsan16SetCurrentThreadEj>:
  24:	str	x30, [sp, #-16]!
  28:	mov	w2, w0
  2c:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
  30:	ldr	x1, [x0]
  34:	add	x0, x0, #0x0
  38:	blr	x1
  3c:	mrs	x1, tpidr_el0
  40:	str	w2, [x1, x0]
  44:	ldr	x30, [sp], #16
  48:	ret

000000000000004c <_ZN6__lsan17GetAllocatorCacheEv>:
  4c:	str	x30, [sp, #-16]!
  50:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
  54:	ldr	x1, [x0]
  58:	add	x0, x0, #0x0
  5c:	blr	x1
  60:	mrs	x1, tpidr_el0
  64:	add	x0, x1, x0
  68:	ldr	x30, [sp], #16
  6c:	ret

0000000000000070 <_ZN6__lsan19ReplaceSystemMallocEv>:
  70:	ret

lsan_mac.o:     file format elf64-littleaarch64


lsan_malloc_mac.o:     file format elf64-littleaarch64


lsan_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsanL8MetadataEPKv>:
       0:	stp	x19, x30, [sp, #-16]!
       4:	mov	x19, x0
       8:	mov	x0, #0xffffffffffff        	// #281474976710655
       c:	cmp	x19, x0
      10:	b.ls	88 <_ZN6__lsanL8MetadataEPKv+0x88>  // b.plast
      14:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      18:	add	x0, x0, #0x0
      1c:	add	x0, x0, #0x80, lsl #12
      20:	ldr	x0, [x0, #3520]
      24:	sub	x0, x0, #0x1
      28:	tst	x19, x0
      2c:	b.eq	68 <_ZN6__lsanL8MetadataEPKv+0x68>  // b.none
      30:	mov	x2, x19
      34:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
      38:	ldr	x0, [x0]
      3c:	ldr	x1, [x0]
      40:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      44:	add	x0, x0, #0x0
      48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
      4c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      50:	add	x0, x0, #0x0
      54:	add	x0, x0, #0x80, lsl #12
      58:	ldr	x0, [x0, #3520]
      5c:	sub	x0, x0, #0x1
      60:	tst	x19, x0
      64:	b.ne	158 <_ZN6__lsanL8MetadataEPKv+0x158>  // b.any
      68:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      6c:	add	x0, x0, #0x0
      70:	add	x0, x0, #0x80, lsl #12
      74:	ldr	x0, [x0, #3520]
      78:	sub	x0, x19, x0
      7c:	add	x0, x0, #0x20
      80:	ldp	x19, x30, [sp], #16
      84:	ret
      88:	lsr	x1, x19, #20
      8c:	lsr	x2, x19, #32
      90:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      94:	add	x0, x0, #0x0
      98:	ldr	x0, [x0, x2, lsl #3]
      9c:	dmb	ish
      a0:	cbz	x0, 14 <_ZN6__lsanL8MetadataEPKv+0x14>
      a4:	and	x1, x1, #0xfff
      a8:	ldrb	w0, [x0, x1]
      ac:	cbz	w0, 14 <_ZN6__lsanL8MetadataEPKv+0x14>
      b0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      b4:	add	x0, x0, #0x0
      b8:	ldr	x0, [x0, x2, lsl #3]
      bc:	dmb	ish
      c0:	cbz	x0, 130 <_ZN6__lsanL8MetadataEPKv+0x130>
      c4:	ldrb	w0, [x0, x1]
      c8:	cbz	w0, 130 <_ZN6__lsanL8MetadataEPKv+0x130>
      cc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
      d0:	add	x0, x0, #0x0
      d4:	ldr	x0, [x0, x2, lsl #3]
      d8:	dmb	ish
      dc:	cbz	x0, 150 <_ZN6__lsanL8MetadataEPKv+0x150>
      e0:	ldrb	w0, [x0, x1]
      e4:	mov	x2, #0x200                 	// #512
      e8:	cmp	x0, #0x35
      ec:	b.eq	114 <_ZN6__lsanL8MetadataEPKv+0x114>  // b.none
      f0:	cmp	x0, #0x10
      f4:	b.ls	150 <_ZN6__lsanL8MetadataEPKv+0x150>  // b.plast
      f8:	sub	x0, x0, #0x10
      fc:	lsr	x1, x0, #2
     100:	mov	x2, #0x100                 	// #256
     104:	lsl	x1, x2, x1
     108:	lsr	x2, x1, #2
     10c:	and	x0, x0, #0x3
     110:	madd	x2, x2, x0, x1
     114:	and	x1, x19, #0xfffffffffff00000
     118:	add	x3, x1, #0x100, lsl #12
     11c:	sub	w0, w19, w1
     120:	udiv	w0, w0, w2
     124:	add	x0, x0, #0x1
     128:	sub	x0, x3, x0, lsl #4
     12c:	b	80 <_ZN6__lsanL8MetadataEPKv+0x80>
     130:	mov	x4, #0x0                   	// #0
     134:	mov	x3, #0x0                   	// #0
     138:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     13c:	add	x2, x2, #0x0
     140:	mov	w1, #0x91                  	// #145
     144:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     148:	add	x0, x0, #0x0
     14c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     150:	lsl	x2, x0, #4
     154:	b	114 <_ZN6__lsanL8MetadataEPKv+0x114>
     158:	mov	x4, #0x0                   	// #0
     15c:	mov	x3, #0x0                   	// #0
     160:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     164:	add	x2, x2, #0x0
     168:	mov	w1, #0xae                  	// #174
     16c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     170:	add	x0, x0, #0x0
     174:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000178 <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm>:
     178:	cbz	x1, 1fc <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm+0x84>
     17c:	stp	x19, x20, [sp, #-32]!
     180:	stp	x21, x30, [sp, #16]
     184:	mov	x21, x0
     188:	mov	x0, x1
     18c:	mov	x20, x2
     190:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     194:	mov	x19, x0
     198:	cbz	x0, 1dc <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm+0x64>
     19c:	bl	0 <_ZN6__lsan20DisabledInThisThreadEv>
     1a0:	neg	w0, w0
     1a4:	ldrb	w1, [x19, #1]
     1a8:	bfxil	w1, w0, #0, #2
     1ac:	strb	w1, [x19, #1]
     1b0:	ldp	x0, x1, [x21]
     1b4:	bl	0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>
     1b8:	str	w0, [x19, #8]
     1bc:	ldr	x0, [x19]
     1c0:	bfi	x0, x20, #10, #54
     1c4:	str	x0, [x19]
     1c8:	mov	w0, #0x1                   	// #1
     1cc:	strb	w0, [x19]
     1d0:	ldp	x21, x30, [sp, #16]
     1d4:	ldp	x19, x20, [sp], #32
     1d8:	ret
     1dc:	mov	x4, #0x0                   	// #0
     1e0:	mov	x3, #0x0                   	// #0
     1e4:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     1e8:	add	x2, x2, #0x0
     1ec:	mov	w1, #0x3a                  	// #58
     1f0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     1f4:	add	x0, x0, #0x0
     1f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     1fc:	ret

0000000000000200 <_ZN6__lsanL20RegisterDeallocationEPv>:
     200:	cbz	x0, 23c <_ZN6__lsanL20RegisterDeallocationEPv+0x3c>
     204:	str	x30, [sp, #-16]!
     208:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     20c:	cbz	x0, 21c <_ZN6__lsanL20RegisterDeallocationEPv+0x1c>
     210:	strb	wzr, [x0]
     214:	ldr	x30, [sp], #16
     218:	ret
     21c:	mov	x4, #0x0                   	// #0
     220:	mov	x3, #0x0                   	// #0
     224:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     228:	add	x2, x2, #0x0
     22c:	mov	w1, #0x44                  	// #68
     230:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     234:	add	x0, x0, #0x0
     238:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     23c:	ret

0000000000000240 <_ZN6__lsan19InitializeAllocatorEv>:
     240:	stp	x19, x30, [sp, #-16]!
     244:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     248:	ldr	x0, [x0]
     24c:	ldrb	w0, [x0, #59]
     250:	bl	0 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>
     254:	adrp	x19, 0 <_ZN6__lsanL8MetadataEPKv>
     258:	add	x19, x19, #0x0
     25c:	mov	x2, #0x80000               	// #524288
     260:	mov	w1, #0x0                   	// #0
     264:	mov	x0, x19
     268:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     26c:	add	x19, x19, #0x80, lsl #12
     270:	strb	wzr, [x19]
     274:	mov	x2, #0xd80                 	// #3456
     278:	mov	w1, #0x0                   	// #0
     27c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     280:	add	x0, x0, #0x0
     284:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     288:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     28c:	ldr	x0, [x0]
     290:	ldr	x0, [x0]
     294:	cbz	x0, 300 <_ZN6__lsan19InitializeAllocatorEv+0xc0>
     298:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     29c:	add	x0, x0, #0x0
     2a0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     2a4:	ldr	x1, [x1]
     2a8:	ldr	x1, [x1]
     2ac:	add	x0, x0, #0x80, lsl #12
     2b0:	str	x1, [x0, #3520]
     2b4:	mov	x3, #0x0                   	// #0
     2b8:	adrp	x0, 0 <_ZN11__sanitizer22SecondaryAllocatorNameE>
     2bc:	ldr	x0, [x0]
     2c0:	ldr	x2, [x0]
     2c4:	mov	x1, #0x800000              	// #8388608
     2c8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     2cc:	add	x0, x0, #0x0
     2d0:	bl	0 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>
     2d4:	cbz	x0, 314 <_ZN6__lsan19InitializeAllocatorEv+0xd4>
     2d8:	adrp	x1, 0 <_ZN6__lsanL8MetadataEPKv>
     2dc:	add	x1, x1, #0x0
     2e0:	add	x1, x1, #0x80, lsl #12
     2e4:	str	x0, [x1, #3528]
     2e8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     2ec:	add	x0, x0, #0x0
     2f0:	str	x0, [x1, #4144]
     2f4:	str	x0, [x1, #4152]
     2f8:	ldp	x19, x30, [sp], #16
     2fc:	ret
     300:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     304:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     308:	ldr	x1, [x1]
     30c:	str	x0, [x1]
     310:	b	298 <_ZN6__lsan19InitializeAllocatorEv+0x58>
     314:	mov	x4, #0x0                   	// #0
     318:	mov	x3, #0x0                   	// #0
     31c:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     320:	add	x2, x2, #0x0
     324:	mov	w1, #0x24                  	// #36
     328:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     32c:	add	x0, x0, #0x0
     330:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000334 <_ZN6__lsan22GetAllocatorCacheRangeEPmS0_>:
     334:	stp	x19, x20, [sp, #-32]!
     338:	str	x30, [sp, #16]
     33c:	mov	x20, x0
     340:	mov	x19, x1
     344:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
     348:	str	x0, [x20]
     34c:	add	x0, x0, #0xd, lsl #12
     350:	add	x0, x0, #0x820
     354:	str	x0, [x19]
     358:	ldr	x30, [sp, #16]
     35c:	ldp	x19, x20, [sp], #32
     360:	ret

0000000000000364 <_ZN6__lsan19GetMallocUsableSizeEPKv>:
     364:	str	x30, [sp, #-16]!
     368:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     36c:	cbz	x0, 380 <_ZN6__lsan19GetMallocUsableSizeEPKv+0x1c>
     370:	ldr	x0, [x0]
     374:	lsr	x0, x0, #10
     378:	ldr	x30, [sp], #16
     37c:	ret
     380:	mov	x0, #0x0                   	// #0
     384:	b	378 <_ZN6__lsan19GetMallocUsableSizeEPKv+0x14>

0000000000000388 <_ZN6__lsan12lsan_mz_sizeEPKv>:
     388:	str	x30, [sp, #-16]!
     38c:	bl	364 <_ZN6__lsan19GetMallocUsableSizeEPKv>
     390:	ldr	x30, [sp], #16
     394:	ret

0000000000000398 <_ZN6__lsan13LockAllocatorEv>:
     398:	stp	x19, x20, [sp, #-32]!
     39c:	stp	x21, x30, [sp, #16]
     3a0:	adrp	x19, 0 <_ZN6__lsanL8MetadataEPKv>
     3a4:	add	x19, x19, #0x0
     3a8:	adrp	x20, 0 <_ZN6__lsanL8MetadataEPKv>
     3ac:	add	x20, x20, #0x0
     3b0:	add	x20, x20, #0x80, lsl #12
     3b4:	add	x20, x20, #0xdc0
     3b8:	mov	w21, #0x1                   	// #1
     3bc:	ldxrb	w0, [x19]
     3c0:	stxrb	w1, w21, [x19]
     3c4:	cbnz	w1, 3bc <_ZN6__lsan13LockAllocatorEv+0x24>
     3c8:	dmb	ish
     3cc:	and	w0, w0, #0xff
     3d0:	cbnz	w0, 410 <_ZN6__lsan13LockAllocatorEv+0x78>
     3d4:	add	x19, x19, #0x40
     3d8:	cmp	x19, x20
     3dc:	b.ne	3bc <_ZN6__lsan13LockAllocatorEv+0x24>  // b.any
     3e0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     3e4:	add	x0, x0, #0x0
     3e8:	mov	w2, #0x1                   	// #1
     3ec:	ldxrb	w1, [x0]
     3f0:	stxrb	w3, w2, [x0]
     3f4:	cbnz	w3, 3ec <_ZN6__lsan13LockAllocatorEv+0x54>
     3f8:	dmb	ish
     3fc:	and	w0, w1, #0xff
     400:	cbnz	w0, 41c <_ZN6__lsan13LockAllocatorEv+0x84>
     404:	ldp	x21, x30, [sp, #16]
     408:	ldp	x19, x20, [sp], #32
     40c:	ret
     410:	mov	x0, x19
     414:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     418:	b	3d4 <_ZN6__lsan13LockAllocatorEv+0x3c>
     41c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     420:	add	x0, x0, #0x0
     424:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     428:	b	404 <_ZN6__lsan13LockAllocatorEv+0x6c>

000000000000042c <_ZN6__lsan15UnlockAllocatorEv>:
     42c:	dmb	ish
     430:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     434:	add	x0, x0, #0x0
     438:	add	x1, x0, #0x81, lsl #12
     43c:	strb	wzr, [x1, #40]
     440:	adrp	x1, 0 <_ZN6__lsanL8MetadataEPKv>
     444:	add	x1, x1, #0x0
     448:	add	x0, x0, #0x80, lsl #12
     44c:	dmb	ish
     450:	strb	wzr, [x1], #-64
     454:	cmp	x1, x0
     458:	b.ne	44c <_ZN6__lsan15UnlockAllocatorEv+0x20>  // b.any
     45c:	ret

0000000000000460 <_ZN6__lsan23GetAllocatorGlobalRangeEPmS0_>:
     460:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     464:	add	x2, x2, #0x0
     468:	str	x2, [x0]
     46c:	add	x2, x2, #0x81, lsl #12
     470:	add	x2, x2, #0x80
     474:	str	x2, [x1]
     478:	ret

000000000000047c <_ZN6__lsan12GetUserBeginEm>:
     47c:	ret

0000000000000480 <_ZN6__lsan12LsanMetadataC1Em>:
     480:	stp	x19, x30, [sp, #-16]!
     484:	mov	x19, x0
     488:	mov	x0, x1
     48c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     490:	str	x0, [x19]
     494:	cbz	x0, 4a0 <_ZN6__lsan12LsanMetadataC1Em+0x20>
     498:	ldp	x19, x30, [sp], #16
     49c:	ret
     4a0:	mov	x4, #0x0                   	// #0
     4a4:	mov	x3, #0x0                   	// #0
     4a8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     4ac:	add	x2, x2, #0x0
     4b0:	mov	w1, #0xff                  	// #255
     4b4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     4b8:	add	x0, x0, #0x0
     4bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000004c0 <_ZNK6__lsan12LsanMetadata9allocatedEv>:
     4c0:	ldr	x0, [x0]
     4c4:	ldrb	w0, [x0]
     4c8:	cmp	w0, #0x0
     4cc:	cset	w0, ne  // ne = any
     4d0:	ret

00000000000004d4 <_ZNK6__lsan12LsanMetadata3tagEv>:
     4d4:	ldr	x0, [x0]
     4d8:	ldrb	w0, [x0, #1]
     4dc:	and	w0, w0, #0x3
     4e0:	ret

00000000000004e4 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>:
     4e4:	ldr	x0, [x0]
     4e8:	ldrb	w2, [x0, #1]
     4ec:	bfxil	w2, w1, #0, #2
     4f0:	strb	w2, [x0, #1]
     4f4:	ret

00000000000004f8 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>:
     4f8:	ldr	x0, [x0]
     4fc:	ldr	x0, [x0]
     500:	lsr	x0, x0, #10
     504:	ret

0000000000000508 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>:
     508:	ldr	x0, [x0]
     50c:	ldr	w0, [x0, #8]
     510:	ret

0000000000000514 <_ZN6__lsan18IgnoreObjectLockedEPKv>:
     514:	stp	x19, x20, [sp, #-32]!
     518:	str	x30, [sp, #16]
     51c:	mov	x19, x0
     520:	mov	x20, x0
     524:	mov	x0, #0xffffffffffff        	// #281474976710655
     528:	cmp	x19, x0
     52c:	b.ls	584 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x70>  // b.plast
     530:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     534:	add	x0, x0, #0x0
     538:	mov	w2, #0x1                   	// #1
     53c:	ldxrb	w1, [x0]
     540:	stxrb	w3, w2, [x0]
     544:	cbnz	w3, 53c <_ZN6__lsan18IgnoreObjectLockedEPKv+0x28>
     548:	dmb	ish
     54c:	and	w0, w1, #0xff
     550:	cbnz	w0, 650 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x13c>
     554:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     558:	add	x0, x0, #0x0
     55c:	add	x0, x0, #0x80, lsl #12
     560:	ldr	x1, [x0, #3576]
     564:	cbz	x1, 7c0 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2ac>
     568:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     56c:	add	x0, x0, #0x0
     570:	add	x0, x0, #0x80, lsl #12
     574:	ldr	x0, [x0, #3528]
     578:	add	x2, x0, x1, lsl #3
     57c:	mov	x3, #0x0                   	// #0
     580:	b	66c <_ZN6__lsan18IgnoreObjectLockedEPKv+0x158>
     584:	lsr	x1, x19, #20
     588:	lsr	x2, x19, #32
     58c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     590:	add	x0, x0, #0x0
     594:	ldr	x0, [x0, x2, lsl #3]
     598:	dmb	ish
     59c:	cbz	x0, 530 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1c>
     5a0:	and	x1, x1, #0xfff
     5a4:	ldrb	w0, [x0, x1]
     5a8:	cbz	w0, 530 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1c>
     5ac:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     5b0:	add	x0, x0, #0x0
     5b4:	ldr	x0, [x0, x2, lsl #3]
     5b8:	dmb	ish
     5bc:	cbz	x0, 628 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x114>
     5c0:	ldrb	w0, [x0, x1]
     5c4:	cbz	w0, 628 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x114>
     5c8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     5cc:	add	x0, x0, #0x0
     5d0:	ldr	x0, [x0, x2, lsl #3]
     5d4:	dmb	ish
     5d8:	cbz	x0, 648 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x134>
     5dc:	ldrb	w0, [x0, x1]
     5e0:	mov	x1, #0x200                 	// #512
     5e4:	cmp	x0, #0x35
     5e8:	b.eq	610 <_ZN6__lsan18IgnoreObjectLockedEPKv+0xfc>  // b.none
     5ec:	cmp	x0, #0x10
     5f0:	b.ls	648 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x134>  // b.plast
     5f4:	sub	x0, x0, #0x10
     5f8:	lsr	x20, x0, #2
     5fc:	mov	x1, #0x100                 	// #256
     600:	lsl	x20, x1, x20
     604:	lsr	x1, x20, #2
     608:	and	x0, x0, #0x3
     60c:	madd	x1, x1, x0, x20
     610:	and	x20, x19, #0xfffffffffff00000
     614:	and	w0, w19, #0xfffff
     618:	udiv	w0, w0, w1
     61c:	mul	w0, w0, w1
     620:	add	x20, x0, x20
     624:	b	6f0 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1dc>
     628:	mov	x4, #0x0                   	// #0
     62c:	mov	x3, #0x0                   	// #0
     630:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     634:	add	x2, x2, #0x0
     638:	mov	w1, #0xc1                  	// #193
     63c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     640:	add	x0, x0, #0x0
     644:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     648:	lsl	x1, x0, #4
     64c:	b	610 <_ZN6__lsan18IgnoreObjectLockedEPKv+0xfc>
     650:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     654:	add	x0, x0, #0x0
     658:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     65c:	b	554 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x40>
     660:	add	x0, x0, #0x8
     664:	cmp	x0, x2
     668:	b.eq	68c <_ZN6__lsan18IgnoreObjectLockedEPKv+0x178>  // b.none
     66c:	ldr	x1, [x0]
     670:	cmp	x20, x1
     674:	b.cc	660 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x14c>  // b.lo, b.ul, b.last
     678:	sub	x5, x20, x1
     67c:	sub	x4, x20, x3
     680:	cmp	x5, x4
     684:	csel	x3, x3, x1, cs  // cs = hs, nlast
     688:	b	660 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x14c>
     68c:	cbz	x3, 7c8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2b4>
     690:	ldr	x4, [x3]
     694:	cmp	x4, x3
     698:	b.hi	754 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x240>  // b.pmore
     69c:	ldr	x0, [x3, #8]
     6a0:	add	x4, x4, x0
     6a4:	cmp	x4, x3
     6a8:	b.ls	76c <_ZN6__lsan18IgnoreObjectLockedEPKv+0x258>  // b.plast
     6ac:	cmp	x19, x3
     6b0:	b.cc	784 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x270>  // b.lo, b.ul, b.last
     6b4:	cmp	x19, x4
     6b8:	b.cs	7d0 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2bc>  // b.hs, b.nlast
     6bc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     6c0:	add	x0, x0, #0x0
     6c4:	add	x0, x0, #0x80, lsl #12
     6c8:	ldr	x20, [x0, #3520]
     6cc:	sub	x0, x20, #0x1
     6d0:	add	x20, x3, x20
     6d4:	tst	x0, x3
     6d8:	b.ne	7a0 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x28c>  // b.any
     6dc:	dmb	ish
     6e0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     6e4:	add	x0, x0, #0x0
     6e8:	add	x0, x0, #0x81, lsl #12
     6ec:	strb	wzr, [x0, #40]
     6f0:	cmp	x20, #0x0
     6f4:	ccmp	x19, x20, #0x0, ne  // ne = any
     6f8:	b.cc	7f8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2e4>  // b.lo, b.ul, b.last
     6fc:	mov	x0, x20
     700:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     704:	mov	x1, x0
     708:	cbz	x0, 7d8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2c4>
     70c:	ldrb	w2, [x0]
     710:	mov	w0, #0x2                   	// #2
     714:	cbz	w2, 7fc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2e8>
     718:	ldr	x0, [x1]
     71c:	add	x20, x20, x0, lsr #10
     720:	mov	w0, #0x2                   	// #2
     724:	cmp	x20, x19
     728:	b.ls	7fc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2e8>  // b.plast
     72c:	ldrb	w2, [x1, #1]
     730:	and	w2, w2, #0x3
     734:	mov	w0, #0x1                   	// #1
     738:	cmp	w2, #0x3
     73c:	b.eq	7fc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2e8>  // b.none
     740:	ldrb	w0, [x1, #1]
     744:	orr	w0, w0, #0x3
     748:	strb	w0, [x1, #1]
     74c:	mov	w0, #0x0                   	// #0
     750:	b	7fc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x2e8>
     754:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     758:	add	x2, x2, #0x0
     75c:	mov	w1, #0xc1                  	// #193
     760:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     764:	add	x0, x0, #0x0
     768:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     76c:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     770:	add	x2, x2, #0x0
     774:	mov	w1, #0xc2                  	// #194
     778:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     77c:	add	x0, x0, #0x0
     780:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     784:	mov	x4, x19
     788:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     78c:	add	x2, x2, #0x0
     790:	mov	w1, #0xc3                  	// #195
     794:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     798:	add	x0, x0, #0x0
     79c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7a0:	mov	x4, #0x0                   	// #0
     7a4:	mov	x3, #0x0                   	// #0
     7a8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     7ac:	add	x2, x2, #0x0
     7b0:	mov	w1, #0x12b                 	// #299
     7b4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     7b8:	add	x0, x0, #0x0
     7bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7c0:	mov	x20, #0x0                   	// #0
     7c4:	b	6dc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1c8>
     7c8:	mov	x20, #0x0                   	// #0
     7cc:	b	6dc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1c8>
     7d0:	mov	x20, #0x0                   	// #0
     7d4:	b	6dc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x1c8>
     7d8:	mov	x4, #0x0                   	// #0
     7dc:	mov	x3, #0x0                   	// #0
     7e0:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     7e4:	add	x2, x2, #0x0
     7e8:	mov	w1, #0x11e                 	// #286
     7ec:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     7f0:	add	x0, x0, #0x0
     7f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7f8:	mov	w0, #0x2                   	// #2
     7fc:	ldr	x30, [sp, #16]
     800:	ldp	x19, x20, [sp], #32
     804:	ret

0000000000000808 <__sanitizer_get_current_allocated_bytes>:
     808:	str	x30, [sp, #-32]!
     80c:	mov	x2, #0x10                  	// #16
     810:	mov	w1, #0x0                   	// #0
     814:	add	x0, sp, x2
     818:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     81c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     820:	add	x0, x0, #0x0
     824:	mov	w2, #0x1                   	// #1
     828:	ldxrb	w1, [x0]
     82c:	stxrb	w3, w2, [x0]
     830:	cbnz	w3, 828 <__sanitizer_get_current_allocated_bytes+0x20>
     834:	dmb	ish
     838:	and	w0, w1, #0xff
     83c:	cbnz	w0, 8b0 <__sanitizer_get_current_allocated_bytes+0xa8>
     840:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     844:	add	x2, x2, #0x0
     848:	mov	x3, x2
     84c:	ldr	x1, [x2, #16]
     850:	ldr	x0, [sp, #16]
     854:	add	x1, x1, x0
     858:	str	x1, [sp, #16]
     85c:	ldr	x0, [x2, #24]
     860:	ldr	x4, [sp, #24]
     864:	add	x0, x0, x4
     868:	str	x0, [sp, #24]
     86c:	ldr	x2, [x2]
     870:	cmp	x2, x3
     874:	b.ne	84c <__sanitizer_get_current_allocated_bytes+0x44>  // b.any
     878:	cmp	x1, #0x0
     87c:	csel	x1, x1, xzr, ge  // ge = tcont
     880:	str	x1, [sp, #16]
     884:	cmp	x0, #0x0
     888:	csel	x0, x0, xzr, ge  // ge = tcont
     88c:	str	x0, [sp, #24]
     890:	dmb	ish
     894:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     898:	add	x0, x0, #0x0
     89c:	add	x0, x0, #0x81, lsl #12
     8a0:	strb	wzr, [x0, #80]
     8a4:	ldr	x0, [sp, #16]
     8a8:	ldr	x30, [sp], #32
     8ac:	ret
     8b0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     8b4:	add	x0, x0, #0x0
     8b8:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     8bc:	b	840 <__sanitizer_get_current_allocated_bytes+0x38>

00000000000008c0 <__sanitizer_get_heap_size>:
     8c0:	str	x30, [sp, #-32]!
     8c4:	mov	x2, #0x10                  	// #16
     8c8:	mov	w1, #0x0                   	// #0
     8cc:	add	x0, sp, x2
     8d0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     8d4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     8d8:	add	x0, x0, #0x0
     8dc:	mov	w2, #0x1                   	// #1
     8e0:	ldxrb	w1, [x0]
     8e4:	stxrb	w3, w2, [x0]
     8e8:	cbnz	w3, 8e0 <__sanitizer_get_heap_size+0x20>
     8ec:	dmb	ish
     8f0:	and	w0, w1, #0xff
     8f4:	cbnz	w0, 968 <__sanitizer_get_heap_size+0xa8>
     8f8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     8fc:	add	x2, x2, #0x0
     900:	mov	x3, x2
     904:	ldr	x1, [x2, #16]
     908:	ldr	x0, [sp, #16]
     90c:	add	x1, x1, x0
     910:	str	x1, [sp, #16]
     914:	ldr	x0, [x2, #24]
     918:	ldr	x4, [sp, #24]
     91c:	add	x0, x0, x4
     920:	str	x0, [sp, #24]
     924:	ldr	x2, [x2]
     928:	cmp	x2, x3
     92c:	b.ne	904 <__sanitizer_get_heap_size+0x44>  // b.any
     930:	cmp	x1, #0x0
     934:	csel	x1, x1, xzr, ge  // ge = tcont
     938:	str	x1, [sp, #16]
     93c:	cmp	x0, #0x0
     940:	csel	x0, x0, xzr, ge  // ge = tcont
     944:	str	x0, [sp, #24]
     948:	dmb	ish
     94c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     950:	add	x0, x0, #0x0
     954:	add	x0, x0, #0x81, lsl #12
     958:	strb	wzr, [x0, #80]
     95c:	ldr	x0, [sp, #24]
     960:	ldr	x30, [sp], #32
     964:	ret
     968:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     96c:	add	x0, x0, #0x0
     970:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     974:	b	8f8 <__sanitizer_get_heap_size+0x38>

0000000000000978 <__sanitizer_get_free_bytes>:
     978:	mov	x0, #0x0                   	// #0
     97c:	ret

0000000000000980 <__sanitizer_get_unmapped_bytes>:
     980:	mov	x0, #0x0                   	// #0
     984:	ret

0000000000000988 <__sanitizer_get_estimated_allocated_size>:
     988:	ret

000000000000098c <__sanitizer_get_ownership>:
     98c:	str	x30, [sp, #-16]!
     990:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     994:	cmp	x0, #0x0
     998:	cset	w0, ne  // ne = any
     99c:	ldr	x30, [sp], #16
     9a0:	ret

00000000000009a4 <__sanitizer_get_allocated_size>:
     9a4:	str	x30, [sp, #-16]!
     9a8:	bl	364 <_ZN6__lsan19GetMallocUsableSizeEPKv>
     9ac:	ldr	x30, [sp], #16
     9b0:	ret

00000000000009b4 <_ZN6__lsan15PointsIntoChunkEPv>:
     9b4:	stp	x19, x20, [sp, #-32]!
     9b8:	stp	x21, x30, [sp, #16]
     9bc:	mov	x19, x0
     9c0:	mov	x0, #0xffffffffffff        	// #281474976710655
     9c4:	cmp	x19, x0
     9c8:	b.ls	a4c <_ZN6__lsan15PointsIntoChunkEPv+0x98>  // b.plast
     9cc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     9d0:	add	x0, x0, #0x0
     9d4:	add	x0, x0, #0x81, lsl #12
     9d8:	ldrb	w3, [x0, #40]
     9dc:	and	x3, x3, #0xff
     9e0:	cmp	x3, #0x1
     9e4:	b.ne	b18 <_ZN6__lsan15PointsIntoChunkEPv+0x164>  // b.any
     9e8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     9ec:	add	x0, x0, #0x0
     9f0:	add	x0, x0, #0x80, lsl #12
     9f4:	ldr	x20, [x0, #3576]
     9f8:	cbz	x20, ce0 <_ZN6__lsan15PointsIntoChunkEPv+0x32c>
     9fc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     a00:	add	x0, x0, #0x0
     a04:	add	x0, x0, #0x80, lsl #12
     a08:	ldrb	w0, [x0, #3584]
     a0c:	cbz	w0, b34 <_ZN6__lsan15PointsIntoChunkEPv+0x180>
     a10:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     a14:	add	x0, x0, #0x0
     a18:	add	x0, x0, #0x80, lsl #12
     a1c:	ldr	x2, [x0, #3528]
     a20:	add	x0, x2, x20, lsl #3
     a24:	ldur	x0, [x0, #-8]
     a28:	ldr	x1, [x0, #8]
     a2c:	add	x0, x0, x1
     a30:	ldr	x1, [x2]
     a34:	cmp	x19, x0
     a38:	ccmp	x19, x1, #0x0, cc  // cc = lo, ul, last
     a3c:	b.cc	ce0 <_ZN6__lsan15PointsIntoChunkEPv+0x32c>  // b.lo, b.ul, b.last
     a40:	sub	x20, x20, #0x1
     a44:	mov	x1, #0x0                   	// #0
     a48:	b	b98 <_ZN6__lsan15PointsIntoChunkEPv+0x1e4>
     a4c:	lsr	x1, x19, #20
     a50:	lsr	x2, x19, #32
     a54:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     a58:	add	x0, x0, #0x0
     a5c:	ldr	x0, [x0, x2, lsl #3]
     a60:	dmb	ish
     a64:	cbz	x0, 9cc <_ZN6__lsan15PointsIntoChunkEPv+0x18>
     a68:	and	x1, x1, #0xfff
     a6c:	ldrb	w0, [x0, x1]
     a70:	cbz	w0, 9cc <_ZN6__lsan15PointsIntoChunkEPv+0x18>
     a74:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     a78:	add	x0, x0, #0x0
     a7c:	ldr	x0, [x0, x2, lsl #3]
     a80:	dmb	ish
     a84:	cbz	x0, af0 <_ZN6__lsan15PointsIntoChunkEPv+0x13c>
     a88:	ldrb	w0, [x0, x1]
     a8c:	cbz	w0, af0 <_ZN6__lsan15PointsIntoChunkEPv+0x13c>
     a90:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     a94:	add	x0, x0, #0x0
     a98:	ldr	x0, [x0, x2, lsl #3]
     a9c:	dmb	ish
     aa0:	cbz	x0, b10 <_ZN6__lsan15PointsIntoChunkEPv+0x15c>
     aa4:	ldrb	w0, [x0, x1]
     aa8:	mov	x1, #0x200                 	// #512
     aac:	cmp	x0, #0x35
     ab0:	b.eq	ad8 <_ZN6__lsan15PointsIntoChunkEPv+0x124>  // b.none
     ab4:	cmp	x0, #0x10
     ab8:	b.ls	b10 <_ZN6__lsan15PointsIntoChunkEPv+0x15c>  // b.plast
     abc:	sub	x0, x0, #0x10
     ac0:	lsr	x20, x0, #2
     ac4:	mov	x1, #0x100                 	// #256
     ac8:	lsl	x20, x1, x20
     acc:	lsr	x1, x20, #2
     ad0:	and	x0, x0, #0x3
     ad4:	madd	x1, x1, x0, x20
     ad8:	and	x20, x19, #0xfffffffffff00000
     adc:	and	w0, w19, #0xfffff
     ae0:	udiv	w0, w0, w1
     ae4:	mul	w0, w0, w1
     ae8:	add	x20, x0, x20
     aec:	b	c1c <_ZN6__lsan15PointsIntoChunkEPv+0x268>
     af0:	mov	x4, #0x0                   	// #0
     af4:	mov	x3, #0x0                   	// #0
     af8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     afc:	add	x2, x2, #0x0
     b00:	mov	w1, #0xc1                  	// #193
     b04:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     b08:	add	x0, x0, #0x0
     b0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b10:	lsl	x1, x0, #4
     b14:	b	ad8 <_ZN6__lsan15PointsIntoChunkEPv+0x124>
     b18:	mov	x4, #0x1                   	// #1
     b1c:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     b20:	add	x2, x2, #0x0
     b24:	mov	w1, #0x2a                  	// #42
     b28:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     b2c:	add	x0, x0, #0x0
     b30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b34:	adrp	x21, 0 <_ZN6__lsanL8MetadataEPKv>
     b38:	add	x21, x21, #0x0
     b3c:	add	x21, x21, #0x80, lsl #12
     b40:	mov	w2, #0x0                   	// #0
     b44:	mov	x1, x20
     b48:	ldr	x0, [x21, #3528]
     b4c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     b50:	ldr	x0, [x21, #3576]
     b54:	cbz	x0, b7c <_ZN6__lsan15PointsIntoChunkEPv+0x1c8>
     b58:	mov	x0, #0x0                   	// #0
     b5c:	mov	x1, x21
     b60:	ldr	x2, [x1, #3528]
     b64:	ldr	x2, [x2, x0, lsl #3]
     b68:	str	x0, [x2, #24]
     b6c:	add	x0, x0, #0x1
     b70:	ldr	x2, [x1, #3576]
     b74:	cmp	x2, x0
     b78:	b.hi	b60 <_ZN6__lsan15PointsIntoChunkEPv+0x1ac>  // b.pmore
     b7c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     b80:	add	x0, x0, #0x0
     b84:	add	x0, x0, #0x80, lsl #12
     b88:	mov	w1, #0x1                   	// #1
     b8c:	strb	w1, [x0, #3584]
     b90:	b	a10 <_ZN6__lsan15PointsIntoChunkEPv+0x5c>
     b94:	mov	x1, x0
     b98:	sub	x0, x20, x1
     b9c:	cmp	x0, #0x1
     ba0:	b.ls	bc0 <_ZN6__lsan15PointsIntoChunkEPv+0x20c>  // b.plast
     ba4:	add	x0, x1, x20
     ba8:	lsr	x0, x0, #1
     bac:	ldr	x3, [x2, x0, lsl #3]
     bb0:	cmp	x3, x19
     bb4:	b.ls	b94 <_ZN6__lsan15PointsIntoChunkEPv+0x1e0>  // b.plast
     bb8:	sub	x20, x0, #0x1
     bbc:	b	b98 <_ZN6__lsan15PointsIntoChunkEPv+0x1e4>
     bc0:	cmp	x1, x20
     bc4:	b.cs	be0 <_ZN6__lsan15PointsIntoChunkEPv+0x22c>  // b.hs, b.nlast
     bc8:	add	x3, x1, #0x1
     bcc:	cmp	x3, x20
     bd0:	b.ne	c64 <_ZN6__lsan15PointsIntoChunkEPv+0x2b0>  // b.any
     bd4:	ldr	x0, [x2, x20, lsl #3]
     bd8:	cmp	x0, x19
     bdc:	csel	x1, x1, x20, hi  // hi = pmore
     be0:	ldr	x0, [x2, x1, lsl #3]
     be4:	ldr	x2, [x0]
     be8:	ldr	x1, [x0, #8]
     bec:	add	x1, x2, x1
     bf0:	cmp	x19, x1
     bf4:	ccmp	x19, x2, #0x0, cc  // cc = lo, ul, last
     bf8:	b.cc	ce0 <_ZN6__lsan15PointsIntoChunkEPv+0x32c>  // b.lo, b.ul, b.last
     bfc:	adrp	x1, 0 <_ZN6__lsanL8MetadataEPKv>
     c00:	add	x1, x1, #0x0
     c04:	add	x1, x1, #0x80, lsl #12
     c08:	ldr	x20, [x1, #3520]
     c0c:	sub	x1, x20, #0x1
     c10:	add	x20, x0, x20
     c14:	tst	x0, x1
     c18:	b.ne	c80 <_ZN6__lsan15PointsIntoChunkEPv+0x2cc>  // b.any
     c1c:	mov	x21, x20
     c20:	cmp	x20, #0x0
     c24:	ccmp	x19, x20, #0x0, ne  // ne = any
     c28:	b.cc	cd0 <_ZN6__lsan15PointsIntoChunkEPv+0x31c>  // b.lo, b.ul, b.last
     c2c:	mov	x0, x20
     c30:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     c34:	cbz	x0, ca0 <_ZN6__lsan15PointsIntoChunkEPv+0x2ec>
     c38:	ldrb	w1, [x0]
     c3c:	cbz	w1, cd8 <_ZN6__lsan15PointsIntoChunkEPv+0x324>
     c40:	ldr	x0, [x0]
     c44:	lsr	x0, x0, #10
     c48:	add	x1, x0, x20
     c4c:	cmp	x1, x19
     c50:	b.hi	ce4 <_ZN6__lsan15PointsIntoChunkEPv+0x330>  // b.pmore
     c54:	ccmp	x0, #0x8, #0x0, eq  // eq = none
     c58:	b.eq	cc0 <_ZN6__lsan15PointsIntoChunkEPv+0x30c>  // b.none
     c5c:	mov	x21, #0x0                   	// #0
     c60:	b	ce4 <_ZN6__lsan15PointsIntoChunkEPv+0x330>
     c64:	mov	x4, x20
     c68:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     c6c:	add	x2, x2, #0x0
     c70:	mov	w1, #0xea                  	// #234
     c74:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     c78:	add	x0, x0, #0x0
     c7c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c80:	mov	x4, #0x0                   	// #0
     c84:	mov	x3, #0x0                   	// #0
     c88:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     c8c:	add	x2, x2, #0x0
     c90:	mov	w1, #0x12b                 	// #299
     c94:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     c98:	add	x0, x0, #0x0
     c9c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ca0:	mov	x4, #0x0                   	// #0
     ca4:	mov	x3, #0x0                   	// #0
     ca8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     cac:	add	x2, x2, #0x0
     cb0:	mov	w1, #0xef                  	// #239
     cb4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     cb8:	add	x0, x0, #0x0
     cbc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cc0:	ldr	x0, [x20]
     cc4:	cmp	x0, #0x0
     cc8:	csel	x21, x20, xzr, eq  // eq = none
     ccc:	b	ce4 <_ZN6__lsan15PointsIntoChunkEPv+0x330>
     cd0:	mov	x21, #0x0                   	// #0
     cd4:	b	ce4 <_ZN6__lsan15PointsIntoChunkEPv+0x330>
     cd8:	mov	x21, #0x0                   	// #0
     cdc:	b	ce4 <_ZN6__lsan15PointsIntoChunkEPv+0x330>
     ce0:	mov	x21, #0x0                   	// #0
     ce4:	mov	x0, x21
     ce8:	ldp	x21, x30, [sp, #16]
     cec:	ldp	x19, x20, [sp], #32
     cf0:	ret

0000000000000cf4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>:
     cf4:	stp	x19, x20, [sp, #-96]!
     cf8:	stp	x21, x22, [sp, #16]
     cfc:	stp	x23, x24, [sp, #32]
     d00:	stp	x25, x26, [sp, #48]
     d04:	stp	x27, x28, [sp, #64]
     d08:	str	x30, [sp, #80]
     d0c:	mov	x22, x0
     d10:	mov	x23, x1
     d14:	mov	x19, #0x0                   	// #0
     d18:	adrp	x21, 0 <_ZN6__lsanL8MetadataEPKv>
     d1c:	add	x21, x21, #0x0
     d20:	mov	x27, #0x100000              	// #1048576
     d24:	mov	x28, #0x100                 	// #256
     d28:	mov	x26, #0x10000000            	// #268435456
     d2c:	b	d70 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x7c>
     d30:	lsl	x25, x0, #4
     d34:	lsl	x20, x19, #20
     d38:	add	x24, x25, #0x10
     d3c:	udiv	x24, x27, x24
     d40:	madd	x24, x24, x25, x20
     d44:	cmp	x24, x20
     d48:	b.ls	d64 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x70>  // b.plast
     d4c:	mov	x1, x23
     d50:	mov	x0, x20
     d54:	blr	x22
     d58:	add	x20, x20, x25
     d5c:	cmp	x20, x24
     d60:	b.cc	d4c <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x58>  // b.lo, b.ul, b.last
     d64:	add	x19, x19, #0x1
     d68:	cmp	x19, x26
     d6c:	b.eq	dcc <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0xd8>  // b.none
     d70:	lsr	x1, x19, #12
     d74:	ldr	x0, [x21, x1, lsl #3]
     d78:	dmb	ish
     d7c:	cbz	x0, d64 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x70>
     d80:	and	x2, x19, #0xfff
     d84:	ldrb	w0, [x0, x2]
     d88:	cbz	w0, d64 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x70>
     d8c:	ldr	x0, [x21, x1, lsl #3]
     d90:	dmb	ish
     d94:	cbz	x0, d30 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x3c>
     d98:	ldrb	w0, [x0, x2]
     d9c:	mov	x25, #0x200                 	// #512
     da0:	cmp	x0, #0x35
     da4:	b.eq	d34 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x40>  // b.none
     da8:	cmp	x0, #0x10
     dac:	b.ls	d30 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x3c>  // b.plast
     db0:	sub	x0, x0, #0x10
     db4:	lsr	x25, x0, #2
     db8:	lsl	x1, x28, x25
     dbc:	lsr	x25, x1, #2
     dc0:	and	x0, x0, #0x3
     dc4:	madd	x25, x25, x0, x1
     dc8:	b	d34 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x40>
     dcc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     dd0:	add	x0, x0, #0x0
     dd4:	add	x0, x0, #0x80, lsl #12
     dd8:	ldrb	w0, [x0, #3584]
     ddc:	cbz	w0, e74 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x180>
     de0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     de4:	add	x0, x0, #0x0
     de8:	add	x0, x0, #0x80, lsl #12
     dec:	ldr	x0, [x0, #3576]
     df0:	cbz	x0, e58 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x164>
     df4:	mov	x19, #0x0                   	// #0
     df8:	adrp	x20, 0 <_ZN6__lsanL8MetadataEPKv>
     dfc:	add	x20, x20, #0x0
     e00:	add	x20, x20, #0x80, lsl #12
     e04:	ldr	x0, [x20, #3528]
     e08:	ldr	x21, [x0, x19, lsl #3]
     e0c:	ldr	x0, [x20, #3520]
     e10:	sub	x1, x0, #0x1
     e14:	tst	x1, x21
     e18:	b.ne	ed4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x1e0>  // b.any
     e1c:	mov	x1, x23
     e20:	add	x0, x21, x0
     e24:	blr	x22
     e28:	ldr	x0, [x20, #3528]
     e2c:	ldr	x0, [x0, x19, lsl #3]
     e30:	mov	x3, x0
     e34:	cmp	x0, x21
     e38:	b.ne	ef4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x200>  // b.any
     e3c:	ldr	x3, [x0, #24]
     e40:	cmp	x3, x19
     e44:	b.ne	f10 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x21c>  // b.any
     e48:	add	x19, x19, #0x1
     e4c:	ldr	x0, [x20, #3576]
     e50:	cmp	x0, x19
     e54:	b.hi	e04 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x110>  // b.pmore
     e58:	ldp	x21, x22, [sp, #16]
     e5c:	ldp	x23, x24, [sp, #32]
     e60:	ldp	x25, x26, [sp, #48]
     e64:	ldp	x27, x28, [sp, #64]
     e68:	ldr	x30, [sp, #80]
     e6c:	ldp	x19, x20, [sp], #96
     e70:	ret
     e74:	adrp	x19, 0 <_ZN6__lsanL8MetadataEPKv>
     e78:	add	x19, x19, #0x0
     e7c:	add	x19, x19, #0x80, lsl #12
     e80:	mov	w2, #0x0                   	// #0
     e84:	ldr	x1, [x19, #3576]
     e88:	ldr	x0, [x19, #3528]
     e8c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     e90:	ldr	x0, [x19, #3576]
     e94:	cbz	x0, ebc <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x1c8>
     e98:	mov	x0, #0x0                   	// #0
     e9c:	mov	x1, x19
     ea0:	ldr	x2, [x1, #3528]
     ea4:	ldr	x2, [x2, x0, lsl #3]
     ea8:	str	x0, [x2, #24]
     eac:	add	x0, x0, #0x1
     eb0:	ldr	x2, [x1, #3576]
     eb4:	cmp	x2, x0
     eb8:	b.hi	ea0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x1ac>  // b.pmore
     ebc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     ec0:	add	x0, x0, #0x0
     ec4:	add	x0, x0, #0x80, lsl #12
     ec8:	mov	w1, #0x1                   	// #1
     ecc:	strb	w1, [x0, #3584]
     ed0:	b	de0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0xec>
     ed4:	mov	x4, #0x0                   	// #0
     ed8:	mov	x3, #0x0                   	// #0
     edc:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     ee0:	add	x2, x2, #0x0
     ee4:	mov	w1, #0x12b                 	// #299
     ee8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     eec:	add	x0, x0, #0x0
     ef0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ef4:	mov	x4, x21
     ef8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     efc:	add	x2, x2, #0x0
     f00:	mov	w1, #0x115                 	// #277
     f04:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     f08:	add	x0, x0, #0x0
     f0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f10:	mov	x4, x19
     f14:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
     f18:	add	x2, x2, #0x0
     f1c:	mov	w1, #0x116                 	// #278
     f20:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     f24:	add	x0, x0, #0x0
     f28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>:
     f2c:	stp	x19, x20, [sp, #-48]!
     f30:	stp	x21, x22, [sp, #16]
     f34:	str	x30, [sp, #32]
     f38:	mov	x22, x0
     f3c:	mov	x20, x2
     f40:	and	w21, w3, #0xff
     f44:	cbz	x1, 1008 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xdc>
     f48:	mov	x19, x1
     f4c:	mov	x0, #0x100000000           	// #4294967296
     f50:	cmp	x1, x0
     f54:	b.hi	fd4 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xa8>  // b.pmore
     f58:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
     f5c:	mov	x3, x20
     f60:	mov	x2, x19
     f64:	mov	x1, x0
     f68:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     f6c:	add	x0, x0, #0x0
     f70:	bl	0 <_ZN6__lsanL8MetadataEPKv>
     f74:	mov	x20, x0
     f78:	cbz	x0, 1010 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xe4>
     f7c:	cbz	w21, f8c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x60>
     f80:	mov	x0, #0xffffffffffff        	// #281474976710655
     f84:	cmp	x20, x0
     f88:	b.ls	102c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x100>  // b.plast
     f8c:	mov	x2, x19
     f90:	mov	x1, x20
     f94:	mov	x0, x22
     f98:	bl	178 <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm>
     f9c:	adrp	x0, 0 <__sanitizer_malloc_hook>
     fa0:	ldr	x0, [x0]
     fa4:	cbz	x0, fb4 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x88>
     fa8:	mov	x1, x19
     fac:	mov	x0, x20
     fb0:	bl	0 <__sanitizer_malloc_hook>
     fb4:	mov	x1, x19
     fb8:	mov	x0, x20
     fbc:	bl	0 <_ZN11__sanitizer14RunMallocHooksEPKvm>
     fc0:	mov	x0, x20
     fc4:	ldp	x21, x22, [sp, #16]
     fc8:	ldr	x30, [sp, #32]
     fcc:	ldp	x19, x20, [sp], #48
     fd0:	ret
     fd4:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
     fd8:	and	w0, w0, #0xff
     fdc:	cbz	w0, ff8 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xcc>
     fe0:	mov	x1, x19
     fe4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
     fe8:	add	x0, x0, #0x0
     fec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ff0:	mov	x20, #0x0                   	// #0
     ff4:	b	fc0 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x94>
     ff8:	mov	x2, x22
     ffc:	mov	x1, #0x100000000           	// #4294967296
    1000:	mov	x0, x19
    1004:	bl	0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>
    1008:	mov	x19, #0x1                   	// #1
    100c:	b	f58 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x2c>
    1010:	bl	0 <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>
    1014:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    1018:	and	w0, w0, #0xff
    101c:	cbnz	w0, fc0 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x94>
    1020:	mov	x1, x22
    1024:	mov	x0, x19
    1028:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
    102c:	lsr	x2, x20, #20
    1030:	lsr	x1, x20, #32
    1034:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1038:	add	x0, x0, #0x0
    103c:	ldr	x0, [x0, x1, lsl #3]
    1040:	dmb	ish
    1044:	cbz	x0, f8c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x60>
    1048:	and	x2, x2, #0xfff
    104c:	ldrb	w0, [x0, x2]
    1050:	cbz	w0, f8c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x60>
    1054:	mov	x2, x19
    1058:	mov	w1, #0x0                   	// #0
    105c:	mov	x0, x20
    1060:	bl	0 <memset>
    1064:	b	f8c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x60>

0000000000001068 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE>:
    1068:	stp	x19, x20, [sp, #-48]!
    106c:	str	x30, [sp, #32]
    1070:	mov	x19, x1
    1074:	mov	x20, x3
    1078:	cbz	x1, 10d0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x68>
    107c:	stp	x21, x22, [sp, #16]
    1080:	mov	x22, x0
    1084:	mov	x1, x2
    1088:	sub	x21, x19, #0x1
    108c:	orr	x0, x21, #0x7
    1090:	tst	x0, x19
    1094:	b.ne	10cc <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x64>  // b.any
    1098:	mov	w3, #0x1                   	// #1
    109c:	mov	x2, x19
    10a0:	mov	x0, x20
    10a4:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    10a8:	cbz	x0, 1110 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0xa8>
    10ac:	tst	x0, x21
    10b0:	b.ne	10f0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x88>  // b.any
    10b4:	str	x0, [x22]
    10b8:	mov	w0, #0x0                   	// #0
    10bc:	ldp	x21, x22, [sp, #16]
    10c0:	ldr	x30, [sp, #32]
    10c4:	ldp	x19, x20, [sp], #48
    10c8:	ret
    10cc:	ldp	x21, x22, [sp, #16]
    10d0:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    10d4:	and	w1, w0, #0xff
    10d8:	mov	w0, #0x16                  	// #22
    10dc:	cbnz	w1, 10c0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x58>
    10e0:	stp	x21, x22, [sp, #16]
    10e4:	mov	x1, x20
    10e8:	mov	x0, x19
    10ec:	bl	0 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>
    10f0:	mov	x4, #0x0                   	// #0
    10f4:	mov	x3, #0x0                   	// #0
    10f8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    10fc:	add	x2, x2, #0x0
    1100:	mov	w1, #0x99                  	// #153
    1104:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1108:	add	x0, x0, #0x0
    110c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1110:	mov	w0, #0xc                   	// #12
    1114:	ldp	x21, x22, [sp, #16]
    1118:	b	10c0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x58>

000000000000111c <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE>:
    111c:	stp	x19, x20, [sp, #-48]!
    1120:	stp	x21, x22, [sp, #16]
    1124:	str	x30, [sp, #32]
    1128:	mov	x19, x0
    112c:	mov	x20, x1
    1130:	mov	x22, x2
    1134:	cbz	x0, 1178 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x5c>
    1138:	orr	x0, x0, x1
    113c:	sub	x1, x19, #0x1
    1140:	tst	x0, x1
    1144:	b.ne	1178 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x5c>  // b.any
    1148:	mov	w3, #0x1                   	// #1
    114c:	mov	x2, x19
    1150:	mov	x1, x20
    1154:	mov	x0, x22
    1158:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    115c:	mov	x21, x0
    1160:	cbz	x0, 11a4 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x88>
    1164:	mov	x0, x21
    1168:	ldp	x21, x22, [sp, #16]
    116c:	ldr	x30, [sp, #32]
    1170:	ldp	x19, x20, [sp], #48
    1174:	ret
    1178:	bl	0 <__errno_location>
    117c:	mov	w1, #0x16                  	// #22
    1180:	str	w1, [x0]
    1184:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    1188:	and	w0, w0, #0xff
    118c:	mov	x21, #0x0                   	// #0
    1190:	cbnz	w0, 1164 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x48>
    1194:	mov	x2, x22
    1198:	mov	x1, x19
    119c:	mov	x0, x20
    11a0:	bl	0 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>
    11a4:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    11a8:	b	1164 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x48>

00000000000011ac <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>:
    11ac:	stp	x19, x20, [sp, #-32]!
    11b0:	stp	x21, x30, [sp, #16]
    11b4:	mov	x19, x0
    11b8:	mov	x21, x2
    11bc:	sub	x0, x0, #0x1
    11c0:	tst	x0, x19
    11c4:	b.ne	11f0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x44>  // b.any
    11c8:	mov	w3, #0x1                   	// #1
    11cc:	mov	x2, x19
    11d0:	mov	x0, x21
    11d4:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    11d8:	mov	x20, x0
    11dc:	cbz	x0, 1218 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x6c>
    11e0:	mov	x0, x20
    11e4:	ldp	x21, x30, [sp, #16]
    11e8:	ldp	x19, x20, [sp], #32
    11ec:	ret
    11f0:	bl	0 <__errno_location>
    11f4:	mov	w1, #0x16                  	// #22
    11f8:	str	w1, [x0]
    11fc:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    1200:	and	w0, w0, #0xff
    1204:	mov	x20, #0x0                   	// #0
    1208:	cbnz	w0, 11e0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x34>
    120c:	mov	x1, x21
    1210:	mov	x0, x19
    1214:	bl	0 <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>
    1218:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    121c:	b	11e0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x34>

0000000000001220 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>:
    1220:	stp	x19, x30, [sp, #-16]!
    1224:	mov	x4, x0
    1228:	mov	x0, x1
    122c:	mov	w3, #0x1                   	// #1
    1230:	mov	x2, #0x1                   	// #1
    1234:	mov	x1, x4
    1238:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    123c:	mov	x19, x0
    1240:	cbz	x0, 1250 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE+0x30>
    1244:	mov	x0, x19
    1248:	ldp	x19, x30, [sp], #16
    124c:	ret
    1250:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    1254:	b	1244 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE+0x24>

0000000000001258 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE>:
    1258:	stp	x19, x20, [sp, #-32]!
    125c:	stp	x21, x30, [sp, #16]
    1260:	mov	x20, x0
    1264:	mov	x19, x1
    1268:	mov	x21, x2
    126c:	cbz	x1, 1278 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x20>
    1270:	umulh	x0, x0, x1
    1274:	cbnz	x0, 129c <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x44>
    1278:	mov	w3, #0x1                   	// #1
    127c:	mov	x2, #0x1                   	// #1
    1280:	mul	x1, x20, x19
    1284:	mov	x0, x21
    1288:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    128c:	cbz	x0, 12a8 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x50>
    1290:	ldp	x21, x30, [sp, #16]
    1294:	ldp	x19, x20, [sp], #32
    1298:	ret
    129c:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    12a0:	and	w0, w0, #0xff
    12a4:	cbz	w0, 12b4 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x5c>
    12a8:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    12ac:	mov	x0, #0x0                   	// #0
    12b0:	b	1290 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x38>
    12b4:	mov	x2, x21
    12b8:	mov	x1, x19
    12bc:	mov	x0, x20
    12c0:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>

00000000000012c4 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE>:
    12c4:	stp	x19, x20, [sp, #-32]!
    12c8:	str	x30, [sp, #16]
    12cc:	mov	x20, x0
    12d0:	mov	x19, x1
    12d4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    12d8:	ldr	x0, [x0]
    12dc:	ldr	x0, [x0]
    12e0:	cbz	x0, 1318 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE+0x54>
    12e4:	mov	w3, #0x1                   	// #1
    12e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    12ec:	ldr	x0, [x0]
    12f0:	ldr	x2, [x0]
    12f4:	mov	x1, x20
    12f8:	mov	x0, x19
    12fc:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    1300:	mov	x19, x0
    1304:	cbz	x0, 132c <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE+0x68>
    1308:	mov	x0, x19
    130c:	ldr	x30, [sp, #16]
    1310:	ldp	x19, x20, [sp], #32
    1314:	ret
    1318:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    131c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1320:	ldr	x1, [x1]
    1324:	str	x0, [x1]
    1328:	b	12e4 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE+0x20>
    132c:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    1330:	b	1308 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE+0x44>

0000000000001334 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE>:
    1334:	stp	x19, x20, [sp, #-32]!
    1338:	stp	x21, x30, [sp, #16]
    133c:	mov	x19, x0
    1340:	mov	x21, x1
    1344:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1348:	ldr	x0, [x0]
    134c:	ldr	x0, [x0]
    1350:	cbz	x0, 13ac <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x78>
    1354:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1358:	ldr	x0, [x0]
    135c:	ldr	x2, [x0]
    1360:	sub	x3, x2, #0x1
    1364:	tst	x2, x3
    1368:	b.ne	13c0 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x8c>  // b.any
    136c:	add	x3, x19, x3
    1370:	neg	x4, x2
    1374:	and	x4, x3, x4
    1378:	cmp	x19, x4
    137c:	b.hi	13d0 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x9c>  // b.pmore
    1380:	cmp	x19, #0x0
    1384:	mov	w3, #0x1                   	// #1
    1388:	csel	x1, x4, x2, ne  // ne = any
    138c:	mov	x0, x21
    1390:	bl	f2c <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
    1394:	mov	x20, x0
    1398:	cbz	x0, 13f8 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0xc4>
    139c:	mov	x0, x20
    13a0:	ldp	x21, x30, [sp, #16]
    13a4:	ldp	x19, x20, [sp], #32
    13a8:	ret
    13ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    13b0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    13b4:	ldr	x1, [x1]
    13b8:	str	x0, [x1]
    13bc:	b	1354 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x20>
    13c0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    13c4:	add	x0, x0, #0x0
    13c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    13cc:	bl	0 <_ZN11__sanitizer3DieEv>
    13d0:	bl	0 <__errno_location>
    13d4:	mov	w1, #0xc                   	// #12
    13d8:	str	w1, [x0]
    13dc:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    13e0:	and	w0, w0, #0xff
    13e4:	mov	x20, #0x0                   	// #0
    13e8:	cbnz	w0, 139c <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x68>
    13ec:	mov	x1, x21
    13f0:	mov	x0, x19
    13f4:	bl	0 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>
    13f8:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    13fc:	b	139c <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x68>

0000000000001400 <_ZN6__lsan21AllocatorThreadFinishEv>:
    1400:	stp	x19, x20, [sp, #-48]!
    1404:	stp	x21, x22, [sp, #16]
    1408:	stp	x23, x30, [sp, #32]
    140c:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
    1410:	mov	x21, x0
    1414:	add	x20, x0, #0x400
    1418:	mov	x19, #0x1                   	// #1
    141c:	adrp	x22, 0 <_ZN6__lsanL8MetadataEPKv>
    1420:	add	x22, x22, #0x0
    1424:	b	1454 <_ZN6__lsan21AllocatorThreadFinishEv+0x54>
    1428:	mov	x3, x19
    142c:	mov	x2, x22
    1430:	mov	x1, x23
    1434:	mov	x0, x21
    1438:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    143c:	ldr	x0, [x23]
    1440:	cbnz	x0, 1428 <_ZN6__lsan21AllocatorThreadFinishEv+0x28>
    1444:	add	x19, x19, #0x1
    1448:	add	x20, x20, #0x400
    144c:	cmp	x19, #0x36
    1450:	b.eq	1464 <_ZN6__lsan21AllocatorThreadFinishEv+0x64>  // b.none
    1454:	mov	x23, x20
    1458:	ldr	x0, [x20]
    145c:	cbnz	x0, 1428 <_ZN6__lsan21AllocatorThreadFinishEv+0x28>
    1460:	b	1444 <_ZN6__lsan21AllocatorThreadFinishEv+0x44>
    1464:	ldp	x21, x22, [sp, #16]
    1468:	ldp	x23, x30, [sp, #32]
    146c:	ldp	x19, x20, [sp], #48
    1470:	ret

0000000000001474 <_ZN6__lsan10DeallocateEPv>:
    1474:	stp	x19, x20, [sp, #-48]!
    1478:	str	x30, [sp, #32]
    147c:	mov	x19, x0
    1480:	adrp	x0, 0 <__sanitizer_free_hook>
    1484:	ldr	x0, [x0]
    1488:	cbz	x0, 1494 <_ZN6__lsan10DeallocateEPv+0x20>
    148c:	mov	x0, x19
    1490:	bl	0 <__sanitizer_free_hook>
    1494:	mov	x0, x19
    1498:	bl	0 <_ZN11__sanitizer12RunFreeHooksEPKv>
    149c:	mov	x0, x19
    14a0:	bl	200 <_ZN6__lsanL20RegisterDeallocationEPv>
    14a4:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
    14a8:	mov	x20, x0
    14ac:	cbz	x19, 15b8 <_ZN6__lsan10DeallocateEPv+0x144>
    14b0:	mov	x0, #0xffffffffffff        	// #281474976710655
    14b4:	cmp	x19, x0
    14b8:	b.ls	15c4 <_ZN6__lsan10DeallocateEPv+0x150>  // b.plast
    14bc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    14c0:	add	x0, x0, #0x0
    14c4:	add	x0, x0, #0x80, lsl #12
    14c8:	ldr	x0, [x0, #3520]
    14cc:	sub	x1, x0, #0x1
    14d0:	tst	x19, x1
    14d4:	b.ne	1774 <_ZN6__lsan10DeallocateEPv+0x300>  // b.any
    14d8:	sub	x19, x19, x0
    14dc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    14e0:	add	x0, x0, #0x0
    14e4:	mov	w2, #0x1                   	// #1
    14e8:	ldxrb	w1, [x0]
    14ec:	stxrb	w3, w2, [x0]
    14f0:	cbnz	w3, 14e8 <_ZN6__lsan10DeallocateEPv+0x74>
    14f4:	dmb	ish
    14f8:	and	w0, w1, #0xff
    14fc:	cbnz	w0, 1798 <_ZN6__lsan10DeallocateEPv+0x324>
    1500:	ldr	x2, [x19, #24]
    1504:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1508:	add	x0, x0, #0x0
    150c:	add	x0, x0, #0x80, lsl #12
    1510:	ldr	x5, [x0, #3528]
    1514:	ldr	x3, [x5, x2, lsl #3]
    1518:	cmp	x3, x19
    151c:	b.ne	17a8 <_ZN6__lsan10DeallocateEPv+0x334>  // b.any
    1520:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1524:	add	x0, x0, #0x0
    1528:	add	x0, x0, #0x80, lsl #12
    152c:	ldr	x4, [x0, #3576]
    1530:	cmp	x2, x4
    1534:	b.cs	17c8 <_ZN6__lsan10DeallocateEPv+0x354>  // b.hs, b.nlast
    1538:	sub	x4, x4, #0x1
    153c:	adrp	x1, 0 <_ZN6__lsanL8MetadataEPKv>
    1540:	add	x1, x1, #0x0
    1544:	add	x0, x1, #0x80, lsl #12
    1548:	str	x4, [x0, #3576]
    154c:	ldr	x3, [x5, x4, lsl #3]
    1550:	str	x3, [x5, x2, lsl #3]
    1554:	ldr	x3, [x0, #3528]
    1558:	ldr	x3, [x3, x2, lsl #3]
    155c:	str	x2, [x3, #24]
    1560:	strb	wzr, [x0, #3584]
    1564:	ldr	x2, [x0, #3600]
    1568:	add	x2, x2, #0x1
    156c:	str	x2, [x0, #3600]
    1570:	ldr	x2, [x0, #3608]
    1574:	ldr	x3, [x19, #8]
    1578:	sub	x2, x2, x3
    157c:	str	x2, [x0, #3608]
    1580:	ldr	x2, [x0, #4160]
    1584:	ldr	x3, [x19, #8]
    1588:	sub	x2, x2, x3
    158c:	str	x2, [x0, #4160]
    1590:	ldr	x2, [x0, #4168]
    1594:	ldr	x3, [x19, #8]
    1598:	sub	x2, x2, x3
    159c:	str	x2, [x0, #4168]
    15a0:	dmb	ish
    15a4:	add	x1, x1, #0x81, lsl #12
    15a8:	strb	wzr, [x1, #40]
    15ac:	ldr	x1, [x19, #8]
    15b0:	ldr	x0, [x19]
    15b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    15b8:	ldr	x30, [sp, #32]
    15bc:	ldp	x19, x20, [sp], #48
    15c0:	ret
    15c4:	lsr	x1, x19, #20
    15c8:	lsr	x2, x19, #32
    15cc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    15d0:	add	x0, x0, #0x0
    15d4:	ldr	x0, [x0, x2, lsl #3]
    15d8:	dmb	ish
    15dc:	cbz	x0, 14bc <_ZN6__lsan10DeallocateEPv+0x48>
    15e0:	and	x1, x1, #0xfff
    15e4:	ldrb	w0, [x0, x1]
    15e8:	cbz	w0, 14bc <_ZN6__lsan10DeallocateEPv+0x48>
    15ec:	stp	x21, x22, [sp, #16]
    15f0:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    15f4:	add	x0, x0, #0x0
    15f8:	ldr	x0, [x0, x2, lsl #3]
    15fc:	dmb	ish
    1600:	cbz	x0, 1670 <_ZN6__lsan10DeallocateEPv+0x1fc>
    1604:	ldrb	w21, [x0, x1]
    1608:	cbz	x21, 1670 <_ZN6__lsan10DeallocateEPv+0x1fc>
    160c:	cmp	x21, #0x35
    1610:	b.hi	1690 <_ZN6__lsan10DeallocateEPv+0x21c>  // b.pmore
    1614:	lsl	x22, x21, #10
    1618:	add	x1, x20, x22
    161c:	ldr	x6, [x1, #8]
    1620:	cbz	x6, 16b0 <_ZN6__lsan10DeallocateEPv+0x23c>
    1624:	ldr	x2, [x20, x22]
    1628:	ldr	x0, [x1, #8]
    162c:	cmp	x2, x0
    1630:	b.eq	175c <_ZN6__lsan10DeallocateEPv+0x2e8>  // b.none
    1634:	ldr	x0, [x20, x22]
    1638:	add	x1, x0, #0x1
    163c:	str	x1, [x20, x22]
    1640:	add	x0, x0, x21, lsl #7
    1644:	add	x0, x0, #0x4
    1648:	str	x19, [x20, x0, lsl #3]
    164c:	add	x2, x20, #0xd, lsl #12
    1650:	add	x2, x2, #0x800
    1654:	ldr	x1, [x2, #16]
    1658:	add	x0, x20, x21, lsl #10
    165c:	ldr	x0, [x0, #16]
    1660:	sub	x0, x1, x0
    1664:	str	x0, [x2, #16]
    1668:	ldp	x21, x22, [sp, #16]
    166c:	b	15b8 <_ZN6__lsan10DeallocateEPv+0x144>
    1670:	mov	x4, #0x0                   	// #0
    1674:	mov	x3, #0x0                   	// #0
    1678:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    167c:	add	x2, x2, #0x0
    1680:	mov	w1, #0xae                  	// #174
    1684:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1688:	add	x0, x0, #0x0
    168c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1690:	mov	x4, #0x36                  	// #54
    1694:	mov	x3, x21
    1698:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    169c:	add	x2, x2, #0x0
    16a0:	mov	w1, #0xaf                  	// #175
    16a4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    16a8:	add	x0, x0, #0x0
    16ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    16b0:	add	x3, x20, #0x408
    16b4:	mov	x0, #0x1                   	// #1
    16b8:	mov	x7, #0x40                  	// #64
    16bc:	mov	x14, #0x200                 	// #512
    16c0:	mov	x13, x6
    16c4:	mov	x8, #0x14                  	// #20
    16c8:	mov	w11, #0x4000                	// #16384
    16cc:	mov	x10, x0
    16d0:	mov	x9, #0x3e                  	// #62
    16d4:	mov	x12, #0x100                 	// #256
    16d8:	b	1744 <_ZN6__lsan10DeallocateEPv+0x2d0>
    16dc:	sub	x5, x0, #0x10
    16e0:	lsr	x2, x5, #2
    16e4:	lsl	x2, x12, x2
    16e8:	lsr	x4, x2, #2
    16ec:	and	x5, x5, #0x3
    16f0:	madd	x4, x4, x5, x2
    16f4:	cbz	x4, 17e8 <_ZN6__lsan10DeallocateEPv+0x374>
    16f8:	udiv	w5, w11, w4
    16fc:	mov	w2, w5
    1700:	cmp	w5, #0x40
    1704:	csel	x2, x2, x7, ls  // ls = plast
    1708:	cmp	x2, #0x0
    170c:	csel	x2, x2, x10, ne  // ne = any
    1710:	cmp	x2, #0x3e
    1714:	csel	x2, x2, x9, ls  // ls = plast
    1718:	lsl	x5, x2, #1
    171c:	str	x5, [x3]
    1720:	str	x4, [x3, #8]
    1724:	add	x2, x2, #0x2
    1728:	cmp	x4, x2, lsl #3
    172c:	csel	x2, x6, x8, cs  // cs = hs, nlast
    1730:	str	x2, [x3, #16]
    1734:	add	x0, x0, #0x1
    1738:	add	x3, x3, #0x400
    173c:	cmp	x0, #0x36
    1740:	b.eq	1624 <_ZN6__lsan10DeallocateEPv+0x1b0>  // b.none
    1744:	cmp	x0, #0x35
    1748:	b.eq	1800 <_ZN6__lsan10DeallocateEPv+0x38c>  // b.none
    174c:	lsl	x4, x0, #4
    1750:	cmp	x0, #0x10
    1754:	b.hi	16dc <_ZN6__lsan10DeallocateEPv+0x268>  // b.pmore
    1758:	b	16f4 <_ZN6__lsan10DeallocateEPv+0x280>
    175c:	mov	x3, x21
    1760:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1764:	add	x2, x2, #0x0
    1768:	mov	x0, x20
    176c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1770:	b	1634 <_ZN6__lsan10DeallocateEPv+0x1c0>
    1774:	stp	x21, x22, [sp, #16]
    1778:	mov	x4, #0x0                   	// #0
    177c:	mov	x3, #0x0                   	// #0
    1780:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1784:	add	x2, x2, #0x0
    1788:	mov	w1, #0x123                 	// #291
    178c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1790:	add	x0, x0, #0x0
    1794:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1798:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    179c:	add	x0, x0, #0x0
    17a0:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    17a4:	b	1500 <_ZN6__lsan10DeallocateEPv+0x8c>
    17a8:	stp	x21, x22, [sp, #16]
    17ac:	mov	x4, x19
    17b0:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    17b4:	add	x2, x2, #0x0
    17b8:	mov	w1, #0x88                  	// #136
    17bc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    17c0:	add	x0, x0, #0x0
    17c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    17c8:	stp	x21, x22, [sp, #16]
    17cc:	mov	x3, x2
    17d0:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    17d4:	add	x2, x2, #0x0
    17d8:	mov	w1, #0x89                  	// #137
    17dc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    17e0:	add	x0, x0, #0x0
    17e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    17e8:	str	xzr, [x3]
    17ec:	str	xzr, [x3, #8]
    17f0:	str	x8, [x3, #16]
    17f4:	add	x0, x0, #0x1
    17f8:	add	x3, x3, #0x400
    17fc:	b	1744 <_ZN6__lsan10DeallocateEPv+0x2d0>
    1800:	str	x7, [x3]
    1804:	str	x14, [x3, #8]
    1808:	mov	x2, x13
    180c:	b	1730 <_ZN6__lsan10DeallocateEPv+0x2bc>

0000000000001810 <_ZN6__lsan9lsan_freeEPv>:
    1810:	str	x30, [sp, #-16]!
    1814:	bl	1474 <_ZN6__lsan10DeallocateEPv>
    1818:	ldr	x30, [sp], #16
    181c:	ret

0000000000001820 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm>:
    1820:	stp	x19, x20, [sp, #-64]!
    1824:	stp	x21, x22, [sp, #16]
    1828:	stp	x23, x24, [sp, #32]
    182c:	str	x30, [sp, #56]
    1830:	mov	x22, x0
    1834:	mov	x19, x1
    1838:	mov	x20, x2
    183c:	mov	x24, x3
    1840:	mov	x0, x1
    1844:	bl	200 <_ZN6__lsanL20RegisterDeallocationEPv>
    1848:	mov	x0, #0x100000000           	// #4294967296
    184c:	cmp	x20, x0
    1850:	b.ls	18b8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x98>  // b.plast
    1854:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
    1858:	mov	x2, x19
    185c:	mov	x1, x0
    1860:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1864:	add	x0, x0, #0x0
    1868:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    186c:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
    1870:	and	w0, w0, #0xff
    1874:	cbz	w0, 18a4 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x84>
    1878:	mov	x1, x20
    187c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1880:	add	x0, x0, #0x0
    1884:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1888:	mov	x21, #0x0                   	// #0
    188c:	mov	x0, x21
    1890:	ldp	x21, x22, [sp, #16]
    1894:	ldp	x23, x24, [sp, #32]
    1898:	ldr	x30, [sp, #56]
    189c:	ldp	x19, x20, [sp], #64
    18a0:	ret
    18a4:	str	x25, [sp, #48]
    18a8:	mov	x2, x22
    18ac:	mov	x1, #0x100000000           	// #4294967296
    18b0:	mov	x0, x20
    18b4:	bl	0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>
    18b8:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
    18bc:	mov	x23, x0
    18c0:	cbz	x19, 1930 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x110>
    18c4:	cbz	x20, 1950 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x130>
    18c8:	str	x25, [sp, #48]
    18cc:	mov	x21, x19
    18d0:	mov	x0, #0xffffffffffff        	// #281474976710655
    18d4:	cmp	x19, x0
    18d8:	b.ls	196c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x14c>  // b.plast
    18dc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    18e0:	add	x0, x0, #0x0
    18e4:	mov	w2, #0x1                   	// #1
    18e8:	ldxrb	w1, [x0]
    18ec:	stxrb	w3, w2, [x0]
    18f0:	cbnz	w3, 18e8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xc8>
    18f4:	dmb	ish
    18f8:	and	w0, w1, #0xff
    18fc:	cbnz	w0, 1a24 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x204>
    1900:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1904:	add	x0, x0, #0x0
    1908:	add	x0, x0, #0x80, lsl #12
    190c:	ldr	x5, [x0, #3576]
    1910:	cbz	x5, 1be0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3c0>
    1914:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1918:	add	x0, x0, #0x0
    191c:	add	x0, x0, #0x80, lsl #12
    1920:	ldr	x2, [x0, #3528]
    1924:	add	x5, x2, x5, lsl #3
    1928:	mov	x1, #0x0                   	// #0
    192c:	b	1a40 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x220>
    1930:	mov	x3, x24
    1934:	mov	x2, x20
    1938:	mov	x1, x0
    193c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1940:	add	x0, x0, #0x0
    1944:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1948:	mov	x21, x0
    194c:	b	1b54 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x334>
    1950:	mov	x2, x19
    1954:	mov	x1, x0
    1958:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    195c:	add	x0, x0, #0x0
    1960:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1964:	mov	x21, #0x0                   	// #0
    1968:	b	1b54 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x334>
    196c:	lsr	x2, x19, #20
    1970:	lsr	x1, x19, #32
    1974:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1978:	add	x0, x0, #0x0
    197c:	ldr	x0, [x0, x1, lsl #3]
    1980:	dmb	ish
    1984:	cbz	x0, 18dc <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xbc>
    1988:	and	x2, x2, #0xfff
    198c:	ldrb	w0, [x0, x2]
    1990:	cbz	w0, 18dc <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xbc>
    1994:	lsr	x1, x19, #20
    1998:	lsr	x2, x19, #32
    199c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    19a0:	add	x0, x0, #0x0
    19a4:	ldr	x0, [x0, x2, lsl #3]
    19a8:	dmb	ish
    19ac:	cbz	x0, 1ad4 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x2b4>
    19b0:	and	x1, x1, #0xfff
    19b4:	ldrb	w0, [x0, x1]
    19b8:	cbz	w0, 1ad4 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x2b4>
    19bc:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    19c0:	add	x0, x0, #0x0
    19c4:	ldr	x0, [x0, x2, lsl #3]
    19c8:	dmb	ish
    19cc:	cbz	x0, 1c18 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3f8>
    19d0:	ldrb	w0, [x0, x1]
    19d4:	cbz	w0, 1c18 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3f8>
    19d8:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    19dc:	add	x0, x0, #0x0
    19e0:	ldr	x0, [x0, x2, lsl #3]
    19e4:	dmb	ish
    19e8:	cbz	x0, 1c38 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x418>
    19ec:	ldrb	w0, [x0, x1]
    19f0:	mov	x25, #0x200                 	// #512
    19f4:	cmp	x0, #0x35
    19f8:	b.eq	1b0c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x2ec>  // b.none
    19fc:	cmp	x0, #0x10
    1a00:	b.ls	1c38 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x418>  // b.plast
    1a04:	sub	x0, x0, #0x10
    1a08:	lsr	x25, x0, #2
    1a0c:	mov	x1, #0x100                 	// #256
    1a10:	lsl	x1, x1, x25
    1a14:	lsr	x25, x1, #2
    1a18:	and	x0, x0, #0x3
    1a1c:	madd	x25, x25, x0, x1
    1a20:	b	1b0c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x2ec>
    1a24:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1a28:	add	x0, x0, #0x0
    1a2c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1a30:	b	1900 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xe0>
    1a34:	add	x2, x2, #0x8
    1a38:	cmp	x5, x2
    1a3c:	b.eq	1a60 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x240>  // b.none
    1a40:	ldr	x4, [x2]
    1a44:	cmp	x21, x4
    1a48:	b.cc	1a34 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x214>  // b.lo, b.ul, b.last
    1a4c:	sub	x3, x21, x4
    1a50:	sub	x0, x21, x1
    1a54:	cmp	x3, x0
    1a58:	csel	x1, x1, x4, cs  // cs = hs, nlast
    1a5c:	b	1a34 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x214>
    1a60:	cbz	x1, 1be8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3c8>
    1a64:	ldr	x4, [x1]
    1a68:	cmp	x4, x1
    1a6c:	b.hi	1b68 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x348>  // b.pmore
    1a70:	ldr	x0, [x1, #8]
    1a74:	add	x4, x4, x0
    1a78:	cmp	x4, x1
    1a7c:	b.ls	1b84 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x364>  // b.plast
    1a80:	cmp	x19, x1
    1a84:	b.cc	1ba0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x380>  // b.lo, b.ul, b.last
    1a88:	cmp	x19, x4
    1a8c:	b.cs	1bf0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3d0>  // b.hs, b.nlast
    1a90:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1a94:	add	x0, x0, #0x0
    1a98:	add	x0, x0, #0x80, lsl #12
    1a9c:	ldr	x2, [x0, #3520]
    1aa0:	sub	x0, x2, #0x1
    1aa4:	add	x2, x1, x2
    1aa8:	tst	x0, x1
    1aac:	b.ne	1bc0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3a0>  // b.any
    1ab0:	dmb	ish
    1ab4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1ab8:	add	x0, x0, #0x0
    1abc:	add	x0, x0, #0x81, lsl #12
    1ac0:	strb	wzr, [x0, #40]
    1ac4:	cbz	x2, 1bf8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x3d8>
    1ac8:	mov	x0, #0xffffffffffff        	// #281474976710655
    1acc:	cmp	x19, x0
    1ad0:	b.ls	1994 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x174>  // b.plast
    1ad4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1ad8:	add	x0, x0, #0x0
    1adc:	add	x0, x0, #0x80, lsl #12
    1ae0:	ldr	x0, [x0, #3520]
    1ae4:	sub	x1, x0, #0x1
    1ae8:	tst	x19, x1
    1aec:	b.ne	1c40 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x420>  // b.any
    1af0:	sub	x2, x19, x0
    1af4:	ldr	x25, [x2, #16]
    1af8:	add	x25, x25, x1
    1afc:	neg	x2, x0
    1b00:	and	x25, x25, x2
    1b04:	tst	x0, x1
    1b08:	b.ne	1c60 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x440>  // b.any
    1b0c:	mov	x3, x24
    1b10:	mov	x2, x20
    1b14:	mov	x1, x23
    1b18:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1b1c:	add	x0, x0, #0x0
    1b20:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1b24:	mov	x21, x0
    1b28:	cbz	x0, 1b3c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x31c>
    1b2c:	cmp	x20, x25
    1b30:	csel	x2, x20, x25, ls  // ls = plast
    1b34:	mov	x1, x19
    1b38:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1b3c:	mov	x2, x19
    1b40:	mov	x1, x23
    1b44:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1b48:	add	x0, x0, #0x0
    1b4c:	bl	0 <_ZN6__lsanL8MetadataEPKv>
    1b50:	ldr	x25, [sp, #48]
    1b54:	mov	x2, x20
    1b58:	mov	x1, x21
    1b5c:	mov	x0, x22
    1b60:	bl	178 <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm>
    1b64:	b	188c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x6c>
    1b68:	mov	x3, x1
    1b6c:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1b70:	add	x2, x2, #0x0
    1b74:	mov	w1, #0xc1                  	// #193
    1b78:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1b7c:	add	x0, x0, #0x0
    1b80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1b84:	mov	x3, x1
    1b88:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1b8c:	add	x2, x2, #0x0
    1b90:	mov	w1, #0xc2                  	// #194
    1b94:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1b98:	add	x0, x0, #0x0
    1b9c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1ba0:	mov	x4, x19
    1ba4:	mov	x3, x1
    1ba8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1bac:	add	x2, x2, #0x0
    1bb0:	mov	w1, #0xc3                  	// #195
    1bb4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1bb8:	add	x0, x0, #0x0
    1bbc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1bc0:	mov	x4, #0x0                   	// #0
    1bc4:	mov	x3, #0x0                   	// #0
    1bc8:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1bcc:	add	x2, x2, #0x0
    1bd0:	mov	w1, #0x12b                 	// #299
    1bd4:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1bd8:	add	x0, x0, #0x0
    1bdc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1be0:	mov	x2, #0x0                   	// #0
    1be4:	b	1ab0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x290>
    1be8:	mov	x2, #0x0                   	// #0
    1bec:	b	1ab0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x290>
    1bf0:	mov	x2, #0x0                   	// #0
    1bf4:	b	1ab0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x290>
    1bf8:	mov	x4, #0x0                   	// #0
    1bfc:	mov	x3, #0x0                   	// #0
    1c00:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1c04:	add	x2, x2, #0x0
    1c08:	mov	w1, #0x62                  	// #98
    1c0c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1c10:	add	x0, x0, #0x0
    1c14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1c18:	mov	x4, #0x0                   	// #0
    1c1c:	mov	x3, #0x0                   	// #0
    1c20:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1c24:	add	x2, x2, #0x0
    1c28:	mov	w1, #0xcc                  	// #204
    1c2c:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1c30:	add	x0, x0, #0x0
    1c34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1c38:	lsl	x25, x0, #4
    1c3c:	b	1b0c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x2ec>
    1c40:	mov	x4, #0x0                   	// #0
    1c44:	mov	x3, #0x0                   	// #0
    1c48:	adrp	x2, 0 <_ZN6__lsanL8MetadataEPKv>
    1c4c:	add	x2, x2, #0x0
    1c50:	mov	w1, #0x123                 	// #291
    1c54:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1c58:	add	x0, x0, #0x0
    1c5c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1c60:	adrp	x0, 0 <_ZN6__lsanL8MetadataEPKv>
    1c64:	add	x0, x0, #0x0
    1c68:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1c6c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000001c70 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE>:
    1c70:	stp	x19, x30, [sp, #-16]!
    1c74:	mov	x4, x0
    1c78:	mov	x0, x2
    1c7c:	mov	x3, #0x1                   	// #1
    1c80:	mov	x2, x1
    1c84:	mov	x1, x4
    1c88:	bl	1820 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm>
    1c8c:	mov	x19, x0
    1c90:	cbz	x0, 1ca0 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE+0x30>
    1c94:	mov	x0, x19
    1c98:	ldp	x19, x30, [sp], #16
    1c9c:	ret
    1ca0:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
    1ca4:	b	1c94 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE+0x24>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x21, x0
  10:	ldr	x0, [x3, #8]
  14:	cbz	x0, 8c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0x8c>
  18:	mov	x19, x2
  1c:	mov	x20, x3
  20:	add	x22, x2, #0x2, lsl #12
  24:	add	x22, x22, #0x1
  28:	lsl	x22, x22, #6
  2c:	add	x0, x21, x22
  30:	mov	w2, #0x1                   	// #1
  34:	ldxrb	w1, [x0]
  38:	stxrb	w3, w2, [x0]
  3c:	cbnz	w3, 34 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0x34>
  40:	dmb	ish
  44:	and	w1, w1, #0xff
  48:	cbnz	w1, ac <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0xac>
  4c:	add	x1, x21, x19, lsl #6
  50:	add	x0, x1, #0x80, lsl #12
  54:	ldr	x0, [x0, #72]
  58:	cbnz	x0, b4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0xb4>
  5c:	str	xzr, [x20]
  60:	add	x19, x1, #0x80, lsl #12
  64:	str	x20, [x19, #88]
  68:	str	x20, [x19, #80]
  6c:	mov	x0, #0x1                   	// #1
  70:	str	x0, [x19, #72]
  74:	dmb	ish
  78:	strb	wzr, [x21, x22]
  7c:	ldp	x21, x22, [sp, #16]
  80:	ldr	x30, [sp, #32]
  84:	ldp	x19, x20, [sp], #48
  88:	ret
  8c:	mov	x4, #0x0                   	// #0
  90:	mov	x3, #0x0                   	// #0
  94:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE>
  98:	add	x2, x2, #0x0
  9c:	mov	w1, #0xad                  	// #173
  a0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE>
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ac:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE>
  b0:	b	4c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0x4c>
  b4:	add	x1, x1, #0x80, lsl #12
  b8:	ldr	x0, [x1, #80]
  bc:	str	x0, [x20]
  c0:	str	x20, [x1, #80]
  c4:	ldr	x0, [x1, #72]
  c8:	add	x0, x0, #0x1
  cc:	str	x0, [x1, #72]
  d0:	b	74 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE+0x74>

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	118 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x118>  // b.plast
   8:	mov	x7, #0x1                   	// #1
   c:	b	20 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x20>
  10:	add	x2, x7, #0x1
  14:	cmp	x1, x2
  18:	b.ls	58 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x58>  // b.plast
  1c:	add	x7, x7, #0x1
  20:	cbz	x7, 1c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x1c>
  24:	mov	x2, x7
  28:	sub	x3, x2, #0x1
  2c:	mov	x5, x2
  30:	lsr	x2, x3, #1
  34:	ldr	x6, [x0, x2, lsl #3]
  38:	ldr	x4, [x0, x5, lsl #3]
  3c:	cmp	x4, x6
  40:	b.ls	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>  // b.plast
  44:	str	x6, [x0, x5, lsl #3]
  48:	str	x4, [x0, x2, lsl #3]
  4c:	cmp	x3, #0x1
  50:	b.hi	28 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x28>  // b.pmore
  54:	b	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  58:	sub	x3, x1, #0x1
  5c:	mov	x8, #0x0                   	// #0
  60:	b	84 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x84>
  64:	lsl	x5, x5, #4
  68:	ldr	x5, [x0, x5]
  6c:	cmp	x6, x5
  70:	csel	x1, x1, x4, cc  // cc = lo, ul, last
  74:	b	bc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xbc>
  78:	cmp	x3, #0x1
  7c:	b.eq	118 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x118>  // b.none
  80:	sub	x3, x3, #0x1
  84:	ldr	x1, [x0]
  88:	ldr	x2, [x0, x3, lsl #3]
  8c:	str	x2, [x0]
  90:	str	x1, [x0, x3, lsl #3]
  94:	cbz	x3, 80 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x80>
  98:	mov	x2, x8
  9c:	b	e0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe0>
  a0:	cmp	x3, x1
  a4:	b.ls	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.plast
  a8:	lsl	x5, x5, #4
  ac:	ldr	x6, [x0, x2, lsl #3]
  b0:	ldr	x4, [x0, x5]
  b4:	cmp	x6, x4
  b8:	b.cs	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  bc:	cmp	x1, x2
  c0:	b.eq	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.none
  c4:	ldr	x4, [x0, x2, lsl #3]
  c8:	ldr	x5, [x0, x1, lsl #3]
  cc:	str	x5, [x0, x2, lsl #3]
  d0:	str	x4, [x0, x1, lsl #3]
  d4:	cmp	x1, x3
  d8:	b.cs	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  dc:	mov	x2, x1
  e0:	lsl	x1, x2, #1
  e4:	add	x4, x1, #0x1
  e8:	add	x5, x2, #0x1
  ec:	add	x1, x1, #0x2
  f0:	cmp	x3, x4
  f4:	b.ls	a0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa0>  // b.plast
  f8:	ldr	x7, [x0, x2, lsl #3]
  fc:	ldr	x6, [x0, x4, lsl #3]
 100:	cmp	x7, x6
 104:	b.cs	a0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa0>  // b.hs, b.nlast
 108:	cmp	x3, x1
 10c:	b.hi	64 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x64>  // b.pmore
 110:	mov	x1, x4
 114:	b	bc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xbc>
 118:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>:
   0:	sub	sp, sp, #0x210
   4:	stp	x19, x20, [sp]
   8:	stp	x21, x22, [sp, #16]
   c:	stp	x23, x24, [sp, #32]
  10:	str	x30, [sp, #80]
  14:	str	x0, [sp, #112]
  18:	mov	x19, x1
  1c:	mov	x23, x2
  20:	mov	x21, x3
  24:	str	x4, [sp, #104]
  28:	adrp	x0, 0 <_ZN11__sanitizer20PrimaryAllocatorNameE>
  2c:	ldr	x0, [x0]
  30:	ldr	x2, [x0]
  34:	mov	x1, #0x100000              	// #1048576
  38:	mov	x0, x1
  3c:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  40:	cbz	x0, 584 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x584>
  44:	stp	x25, x26, [sp, #48]
  48:	stp	x27, x28, [sp, #64]
  4c:	mov	x20, x0
  50:	ldr	x0, [x19, #24]
  54:	add	x0, x0, #0x100, lsl #12
  58:	str	x0, [x19, #24]
  5c:	tst	x20, #0xfffff
  60:	b.ne	148 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x148>  // b.any
  64:	lsr	x19, x20, #20
  68:	mov	x0, #0xfffffff             	// #268435455
  6c:	cmp	x0, x20, lsr #20
  70:	b.cc	168 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x168>  // b.lo, b.ul, b.last
  74:	ldrb	w22, [sp, #104]
  78:	lsr	x24, x19, #12
  7c:	ldr	x0, [sp, #112]
  80:	ldr	x0, [x0, x24, lsl #3]
  84:	dmb	ish
  88:	mov	x1, x0
  8c:	cbz	x0, 188 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x188>
  90:	and	x19, x19, #0xfff
  94:	ldrb	w0, [x1, x19]
  98:	str	x0, [sp, #136]
  9c:	cbnz	x0, 204 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x204>
  a0:	strb	w22, [x1, x19]
  a4:	ldr	x0, [sp, #104]
  a8:	cmp	x0, #0x35
  ac:	b.eq	224 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x224>  // b.none
  b0:	lsl	x26, x0, #4
  b4:	cmp	x0, #0x10
  b8:	b.ls	dc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0xdc>  // b.plast
  bc:	ldr	x0, [sp, #104]
  c0:	sub	x1, x0, #0x10
  c4:	lsr	x26, x1, #2
  c8:	mov	x0, #0x100                 	// #256
  cc:	lsl	x0, x0, x26
  d0:	lsr	x26, x0, #2
  d4:	and	x1, x1, #0x3
  d8:	madd	x26, x26, x1, x0
  dc:	add	x0, x26, #0x10
  e0:	mov	x27, #0x100000              	// #1048576
  e4:	udiv	x27, x27, x0
  e8:	cbz	x26, 5a0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x5a0>
  ec:	mov	w0, #0x4000                	// #16384
  f0:	udiv	w0, w0, w26
  f4:	mov	w22, w0
  f8:	cmp	w0, #0x40
  fc:	mov	x0, #0x40                  	// #64
 100:	csel	x22, x22, x0, ls  // ls = plast
 104:	cmp	x22, #0x0
 108:	csinc	x22, x22, xzr, ne  // ne = any
 10c:	cmp	x22, #0x3e
 110:	mov	x0, #0x3e                  	// #62
 114:	csel	x22, x22, x0, ls  // ls = plast
 118:	madd	x27, x27, x26, x20
 11c:	cmp	x20, x27
 120:	b.cs	5b0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x5b0>  // b.hs, b.nlast
 124:	str	x20, [sp, #144]
 128:	mov	x0, #0x0                   	// #0
 12c:	mov	x19, #0x1                   	// #1
 130:	add	x28, sp, #0x90
 134:	add	x25, sp, #0x210
 138:	ldr	x1, [sp, #104]
 13c:	add	x1, x23, x1, lsl #10
 140:	str	x1, [sp, #96]
 144:	b	378 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x378>
 148:	mov	x4, #0x0                   	// #0
 14c:	mov	x3, #0x0                   	// #0
 150:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 154:	add	x2, x2, #0x0
 158:	mov	w1, #0x126                 	// #294
 15c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 160:	add	x0, x0, #0x0
 164:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 168:	mov	x4, #0x10000000            	// #268435456
 16c:	mov	x3, x19
 170:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 174:	add	x2, x2, #0x0
 178:	mov	w1, #0x116                 	// #278
 17c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 180:	add	x0, x0, #0x0
 184:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 188:	ldr	x0, [sp, #112]
 18c:	add	x0, x0, #0x80, lsl #12
 190:	mov	w2, #0x1                   	// #1
 194:	ldxrb	w1, [x0]
 198:	stxrb	w3, w2, [x0]
 19c:	cbnz	w3, 194 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x194>
 1a0:	dmb	ish
 1a4:	and	w1, w1, #0xff
 1a8:	cbnz	w1, 1d4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x1d4>
 1ac:	ldr	x0, [sp, #112]
 1b0:	ldr	x0, [x0, x24, lsl #3]
 1b4:	dmb	ish
 1b8:	mov	x1, x0
 1bc:	cbz	x0, 1dc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x1dc>
 1c0:	dmb	ish
 1c4:	ldr	x0, [sp, #112]
 1c8:	add	x0, x0, #0x80, lsl #12
 1cc:	strb	wzr, [x0]
 1d0:	b	90 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x90>
 1d4:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 1d8:	b	1ac <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x1ac>
 1dc:	mov	w2, #0x0                   	// #0
 1e0:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 1e4:	add	x1, x1, #0x0
 1e8:	mov	x0, #0x1000                	// #4096
 1ec:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1f0:	mov	x1, x0
 1f4:	dmb	ish
 1f8:	ldr	x0, [sp, #112]
 1fc:	str	x1, [x0, x24, lsl #3]
 200:	b	1c0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x1c0>
 204:	mov	x4, x0
 208:	mov	x3, #0x0                   	// #0
 20c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 210:	add	x2, x2, #0x0
 214:	mov	w1, #0x42                  	// #66
 218:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 21c:	add	x0, x0, #0x0
 220:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 224:	mov	x26, #0x200                 	// #512
 228:	mov	x27, #0x7c1                 	// #1985
 22c:	b	ec <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0xec>
 230:	ldr	x0, [sp, #96]
 234:	ldr	x24, [x0, #24]
 238:	cbnz	x24, 24c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x24c>
 23c:	ldr	x0, [x19]
 240:	cbz	x0, 2ec <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x2ec>
 244:	str	xzr, [x0, #8]
 248:	b	32c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x32c>
 24c:	cmp	x24, #0x35
 250:	b.hi	2b4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x2b4>  // b.pmore
 254:	lsl	x0, x24, #10
 258:	str	x0, [sp, #128]
 25c:	add	x1, x23, x0
 260:	ldr	x0, [x23, x0]
 264:	cbz	x0, 2d4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x2d4>
 268:	ldr	x1, [sp, #128]
 26c:	ldr	x2, [x23, x1]
 270:	sub	x0, x2, #0x1
 274:	str	x0, [x23, x1]
 278:	lsl	x1, x24, #7
 27c:	add	x0, x1, x0
 280:	add	x0, x0, #0x4
 284:	ldr	x0, [x23, x0, lsl #3]
 288:	add	x1, x1, x2
 28c:	add	x1, x1, #0x2
 290:	ldr	x1, [x23, x1, lsl #3]
 294:	prfm	pldl1keep, [x1]
 298:	ldr	x3, [sp, #120]
 29c:	ldr	x1, [x3, #16]
 2a0:	add	x24, x23, x24, lsl #10
 2a4:	ldr	x2, [x24, #16]
 2a8:	add	x1, x1, x2
 2ac:	str	x1, [x3, #16]
 2b0:	b	240 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x240>
 2b4:	mov	x4, #0x36                  	// #54
 2b8:	mov	x3, x24
 2bc:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 2c0:	add	x2, x2, #0x0
 2c4:	mov	w1, #0xa0                  	// #160
 2c8:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 2cc:	add	x0, x0, #0x0
 2d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2d4:	mov	x3, x24
 2d8:	ldr	x2, [sp, #112]
 2dc:	mov	x0, x23
 2e0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 2e4:	and	w0, w0, #0xff
 2e8:	cbnz	w0, 268 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x268>
 2ec:	mov	w0, #0x0                   	// #0
 2f0:	ldp	x25, x26, [sp, #48]
 2f4:	ldp	x27, x28, [sp, #64]
 2f8:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 2fc:	str	xzr, [x0]
 300:	ldr	x2, [x21, #24]
 304:	str	x0, [x2]
 308:	str	x0, [x21, #24]
 30c:	ldr	x0, [x21, #8]
 310:	add	x0, x0, #0x1
 314:	str	x0, [x21, #8]
 318:	mov	x0, #0x0                   	// #0
 31c:	add	x19, x19, #0x8
 320:	cmp	x25, x19
 324:	b.eq	370 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x370>  // b.none
 328:	cbz	x0, 230 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x230>
 32c:	ldr	x3, [x19]
 330:	ldr	x1, [x0, #8]
 334:	add	x2, x1, #0x1
 338:	str	x2, [x0, #8]
 33c:	add	x1, x1, #0x2
 340:	str	x3, [x0, x1, lsl #3]
 344:	cmp	x22, x2
 348:	b.ne	31c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x31c>  // b.any
 34c:	ldr	x1, [x21, #8]
 350:	cbnz	x1, 2fc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x2fc>
 354:	str	xzr, [x0]
 358:	str	x0, [x21, #24]
 35c:	str	x0, [x21, #16]
 360:	mov	x0, #0x1                   	// #1
 364:	str	x0, [x21, #8]
 368:	mov	x0, #0x0                   	// #0
 36c:	b	31c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x31c>
 370:	ldr	x1, [sp, #136]
 374:	mov	x19, x1
 378:	add	x20, x20, x26
 37c:	cmp	x20, x27
 380:	b.cs	3a8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x3a8>  // b.hs, b.nlast
 384:	add	x1, x19, #0x1
 388:	str	x20, [x28, x19, lsl #3]
 38c:	cmp	x19, #0x2f
 390:	b.ne	374 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x374>  // b.any
 394:	add	x19, sp, #0x90
 398:	add	x1, x23, #0xd, lsl #12
 39c:	add	x1, x1, #0x800
 3a0:	str	x1, [sp, #120]
 3a4:	b	328 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x328>
 3a8:	cbnz	x19, 3e0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x3e0>
 3ac:	cbz	x0, 5c0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x5c0>
 3b0:	ldr	x1, [x0, #8]
 3b4:	cbz	x1, 538 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x538>
 3b8:	ldr	x1, [x21, #8]
 3bc:	cbnz	x1, 558 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x558>
 3c0:	str	xzr, [x0]
 3c4:	str	x0, [x21, #24]
 3c8:	str	x0, [x21, #16]
 3cc:	mov	x0, #0x1                   	// #1
 3d0:	str	x0, [x21, #8]
 3d4:	ldp	x25, x26, [sp, #48]
 3d8:	ldp	x27, x28, [sp, #64]
 3dc:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 3e0:	mov	x20, #0x1                   	// #1
 3e4:	ldr	x1, [sp, #104]
 3e8:	add	x26, x23, x1, lsl #10
 3ec:	add	x28, x23, #0xd, lsl #12
 3f0:	add	x28, x28, #0x800
 3f4:	add	x24, sp, #0x90
 3f8:	b	4ec <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4ec>
 3fc:	ldr	x25, [x26, #24]
 400:	cbnz	x25, 418 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x418>
 404:	add	x0, x24, x20, lsl #3
 408:	ldur	x0, [x0, #-8]
 40c:	cbz	x0, 4ac <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4ac>
 410:	str	xzr, [x0, #8]
 414:	b	4f0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4f0>
 418:	cmp	x25, #0x35
 41c:	b.hi	474 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x474>  // b.pmore
 420:	lsl	x27, x25, #10
 424:	add	x1, x23, x27
 428:	ldr	x0, [x23, x27]
 42c:	cbz	x0, 494 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x494>
 430:	ldr	x2, [x23, x27]
 434:	sub	x0, x2, #0x1
 438:	str	x0, [x23, x27]
 43c:	lsl	x1, x25, #7
 440:	add	x0, x1, x0
 444:	add	x0, x0, #0x4
 448:	ldr	x0, [x23, x0, lsl #3]
 44c:	add	x1, x1, x2
 450:	add	x1, x1, #0x2
 454:	ldr	x1, [x23, x1, lsl #3]
 458:	prfm	pldl1keep, [x1]
 45c:	ldr	x1, [x28, #16]
 460:	add	x25, x23, x25, lsl #10
 464:	ldr	x2, [x25, #16]
 468:	add	x1, x1, x2
 46c:	str	x1, [x28, #16]
 470:	b	40c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x40c>
 474:	mov	x4, #0x36                  	// #54
 478:	mov	x3, x25
 47c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 480:	add	x2, x2, #0x0
 484:	mov	w1, #0xa0                  	// #160
 488:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 48c:	add	x0, x0, #0x0
 490:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 494:	mov	x3, x25
 498:	ldr	x2, [sp, #112]
 49c:	mov	x0, x23
 4a0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 4a4:	and	w0, w0, #0xff
 4a8:	cbnz	w0, 430 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x430>
 4ac:	mov	w0, #0x0                   	// #0
 4b0:	ldp	x25, x26, [sp, #48]
 4b4:	ldp	x27, x28, [sp, #64]
 4b8:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 4bc:	str	xzr, [x0]
 4c0:	ldr	x2, [x21, #24]
 4c4:	str	x0, [x2]
 4c8:	str	x0, [x21, #24]
 4cc:	ldr	x0, [x21, #8]
 4d0:	add	x0, x0, #0x1
 4d4:	str	x0, [x21, #8]
 4d8:	mov	x0, #0x0                   	// #0
 4dc:	add	x1, x20, #0x1
 4e0:	cmp	x19, x20
 4e4:	b.eq	3ac <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x3ac>  // b.none
 4e8:	mov	x20, x1
 4ec:	cbz	x0, 3fc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x3fc>
 4f0:	add	x1, x24, x20, lsl #3
 4f4:	ldur	x3, [x1, #-8]
 4f8:	ldr	x1, [x0, #8]
 4fc:	add	x2, x1, #0x1
 500:	str	x2, [x0, #8]
 504:	add	x1, x1, #0x2
 508:	str	x3, [x0, x1, lsl #3]
 50c:	cmp	x22, x2
 510:	b.ne	4dc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4dc>  // b.any
 514:	ldr	x1, [x21, #8]
 518:	cbnz	x1, 4bc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4bc>
 51c:	str	xzr, [x0]
 520:	str	x0, [x21, #24]
 524:	str	x0, [x21, #16]
 528:	mov	x0, #0x1                   	// #1
 52c:	str	x0, [x21, #8]
 530:	mov	x0, #0x0                   	// #0
 534:	b	4dc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x4dc>
 538:	mov	x4, #0x0                   	// #0
 53c:	mov	x3, #0x0                   	// #0
 540:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 544:	add	x2, x2, #0x0
 548:	mov	w1, #0x169                 	// #361
 54c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 550:	add	x0, x0, #0x0
 554:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 558:	str	xzr, [x0]
 55c:	ldr	x2, [x21, #24]
 560:	str	x0, [x2]
 564:	str	x0, [x21, #24]
 568:	ldr	x0, [x21, #8]
 56c:	add	x0, x0, #0x1
 570:	str	x0, [x21, #8]
 574:	mov	w0, #0x1                   	// #1
 578:	ldp	x25, x26, [sp, #48]
 57c:	ldp	x27, x28, [sp, #64]
 580:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 584:	mov	w0, #0x0                   	// #0
 588:	ldp	x19, x20, [sp]
 58c:	ldp	x21, x22, [sp, #16]
 590:	ldp	x23, x24, [sp, #32]
 594:	ldr	x30, [sp, #80]
 598:	add	sp, sp, #0x210
 59c:	ret
 5a0:	mov	w0, #0x1                   	// #1
 5a4:	ldp	x25, x26, [sp, #48]
 5a8:	ldp	x27, x28, [sp, #64]
 5ac:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 5b0:	mov	w0, #0x1                   	// #1
 5b4:	ldp	x25, x26, [sp, #48]
 5b8:	ldp	x27, x28, [sp, #64]
 5bc:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>
 5c0:	mov	w0, #0x1                   	// #1
 5c4:	ldp	x25, x26, [sp, #48]
 5c8:	ldp	x27, x28, [sp, #64]
 5cc:	b	588 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x588>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x30, [sp, #48]
  10:	mov	x21, x0
  14:	mov	x24, x1
  18:	mov	x25, x2
  1c:	mov	x19, x3
  20:	add	x22, x3, #0x2, lsl #12
  24:	add	x22, x22, #0x1
  28:	lsl	x22, x22, #6
  2c:	add	x23, x0, x22
  30:	mov	w1, #0x1                   	// #1
  34:	ldxrb	w0, [x23]
  38:	stxrb	w2, w1, [x23]
  3c:	cbnz	w2, 34 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x34>
  40:	dmb	ish
  44:	and	w0, w0, #0xff
  48:	cbnz	w0, 94 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x94>
  4c:	add	x20, x21, x19, lsl #6
  50:	add	x0, x20, #0x80, lsl #12
  54:	ldr	x4, [x0, #72]
  58:	cbnz	x4, d4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xd4>
  5c:	mov	x4, x19
  60:	mov	x3, x23
  64:	mov	x2, x25
  68:	mov	x1, x24
  6c:	mov	x0, x21
  70:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  74:	and	w0, w0, #0xff
  78:	cbz	w0, cc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xcc>
  7c:	add	x0, x20, #0x80, lsl #12
  80:	ldr	x4, [x0, #72]
  84:	cbz	x4, a0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xa0>
  88:	add	x0, x20, #0x80, lsl #12
  8c:	ldr	x0, [x0, #80]
  90:	b	dc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xdc>
  94:	mov	x0, x23
  98:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  9c:	b	4c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x4c>
  a0:	mov	x3, #0x0                   	// #0
  a4:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  a8:	add	x2, x2, #0x0
  ac:	mov	w1, #0x40                  	// #64
  b0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  b4:	add	x0, x0, #0x0
  b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  bc:	add	x19, x21, x19, lsl #6
  c0:	add	x19, x19, #0x80, lsl #12
  c4:	str	xzr, [x19, #88]
  c8:	b	ec <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xec>
  cc:	mov	x0, #0x0                   	// #0
  d0:	b	f8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xf8>
  d4:	add	x0, x20, #0x80, lsl #12
  d8:	ldr	x0, [x0, #80]
  dc:	ldr	x1, [x0]
  e0:	add	x2, x20, #0x80, lsl #12
  e4:	str	x1, [x2, #80]
  e8:	cbz	x1, bc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xbc>
  ec:	add	x20, x20, #0x80, lsl #12
  f0:	sub	x4, x4, #0x1
  f4:	str	x4, [x20, #72]
  f8:	dmb	ish
  fc:	strb	wzr, [x21, x22]
 100:	ldp	x21, x22, [sp, #16]
 104:	ldp	x23, x24, [sp, #32]
 108:	ldp	x25, x30, [sp, #48]
 10c:	ldp	x19, x20, [sp], #64
 110:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x30, [sp, #32]
   c:	mov	x19, x0
  10:	mov	x21, x1
  14:	mov	x22, x2
  18:	mov	x20, x3
  1c:	ldr	x2, [x1, #8]
  20:	cbz	x2, 94 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x94>
  24:	mov	x3, x20
  28:	mov	x2, x19
  2c:	add	x1, x19, #0xd, lsl #12
  30:	add	x1, x1, #0x800
  34:	mov	x0, x22
  38:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  3c:	mov	x23, x0
  40:	cbz	x0, 2a0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x2a0>
  44:	ldr	x2, [x0, #8]
  48:	mov	x4, #0x0                   	// #0
  4c:	add	x3, x0, #0x10
  50:	add	x0, x21, #0x20
  54:	cbz	x2, 140 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x140>
  58:	ldr	x1, [x3, x4, lsl #3]
  5c:	str	x1, [x0, x4, lsl #3]
  60:	add	x4, x4, #0x1
  64:	cmp	x2, x4
  68:	b.ne	58 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x58>  // b.any
  6c:	ldr	x0, [x23, #8]
  70:	str	x0, [x21]
  74:	add	x20, x19, x20, lsl #10
  78:	ldr	x20, [x20, #24]
  7c:	mov	w0, #0x1                   	// #1
  80:	cbnz	x20, 15c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x15c>
  84:	ldp	x21, x22, [sp, #16]
  88:	ldp	x23, x30, [sp, #32]
  8c:	ldp	x19, x20, [sp], #48
  90:	ret
  94:	add	x6, x0, #0x408
  98:	mov	x5, #0x1                   	// #1
  9c:	mov	x3, #0x40                  	// #64
  a0:	mov	x14, #0x200                 	// #512
  a4:	mov	x13, x2
  a8:	mov	x8, #0x14                  	// #20
  ac:	mov	w11, #0x4000                	// #16384
  b0:	mov	x10, x5
  b4:	mov	x9, #0x3e                  	// #62
  b8:	mov	x12, #0x100                 	// #256
  bc:	b	128 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x128>
  c0:	sub	x1, x5, #0x10
  c4:	lsr	x0, x1, #2
  c8:	lsl	x0, x12, x0
  cc:	lsr	x7, x0, #2
  d0:	and	x1, x1, #0x3
  d4:	madd	x7, x7, x1, x0
  d8:	cbz	x7, 2c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x2c0>
  dc:	udiv	w0, w11, w7
  e0:	mov	w4, w0
  e4:	cmp	w0, #0x40
  e8:	csel	x4, x4, x3, ls  // ls = plast
  ec:	cmp	x4, #0x0
  f0:	csel	x4, x4, x10, ne  // ne = any
  f4:	cmp	x4, #0x3e
  f8:	csel	x4, x4, x9, ls  // ls = plast
  fc:	lsl	x0, x4, #1
 100:	str	x0, [x6]
 104:	str	x7, [x6, #8]
 108:	add	x4, x4, #0x2
 10c:	cmp	x7, x4, lsl #3
 110:	csel	x0, x2, x8, cs  // cs = hs, nlast
 114:	str	x0, [x6, #16]
 118:	add	x5, x5, #0x1
 11c:	add	x6, x6, #0x400
 120:	cmp	x5, #0x36
 124:	b.eq	24 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x24>  // b.none
 128:	cmp	x5, #0x35
 12c:	b.eq	2e8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x2e8>  // b.none
 130:	lsl	x7, x5, #4
 134:	cmp	x5, #0x10
 138:	b.hi	c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0xc0>  // b.pmore
 13c:	b	d8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0xd8>
 140:	mov	x3, #0x0                   	// #0
 144:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
 148:	add	x2, x2, #0x0
 14c:	mov	w1, #0xf6                  	// #246
 150:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
 154:	add	x0, x0, #0x0
 158:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 15c:	cmp	x20, #0x35
 160:	b.hi	1c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x1c0>  // b.pmore
 164:	lsl	x21, x20, #10
 168:	add	x1, x19, x21
 16c:	ldr	x6, [x1, #8]
 170:	cbz	x6, 1e0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x1e0>
 174:	ldr	x2, [x19, x21]
 178:	ldr	x0, [x1, #8]
 17c:	cmp	x2, x0
 180:	b.eq	28c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x28c>  // b.none
 184:	ldr	x0, [x19, x21]
 188:	add	x1, x0, #0x1
 18c:	str	x1, [x19, x21]
 190:	add	x0, x0, x20, lsl #7
 194:	add	x0, x0, #0x4
 198:	str	x23, [x19, x0, lsl #3]
 19c:	add	x1, x19, #0xd, lsl #12
 1a0:	add	x1, x1, #0x800
 1a4:	ldr	x0, [x1, #16]
 1a8:	add	x19, x19, x20, lsl #10
 1ac:	ldr	x2, [x19, #16]
 1b0:	sub	x0, x0, x2
 1b4:	str	x0, [x1, #16]
 1b8:	mov	w0, #0x1                   	// #1
 1bc:	b	84 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x84>
 1c0:	mov	x4, #0x36                  	// #54
 1c4:	mov	x3, x20
 1c8:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
 1cc:	add	x2, x2, #0x0
 1d0:	mov	w1, #0xaf                  	// #175
 1d4:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e0:	add	x3, x19, #0x408
 1e4:	mov	x0, #0x1                   	// #1
 1e8:	mov	x7, #0x40                  	// #64
 1ec:	mov	x14, #0x200                 	// #512
 1f0:	mov	x13, x6
 1f4:	mov	x8, #0x14                  	// #20
 1f8:	mov	w11, #0x4000                	// #16384
 1fc:	mov	x10, x0
 200:	mov	x9, #0x3e                  	// #62
 204:	mov	x12, #0x100                 	// #256
 208:	b	25c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x25c>
 20c:	cbz	x4, 2a8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x2a8>
 210:	udiv	w5, w11, w4
 214:	mov	w2, w5
 218:	cmp	w5, #0x40
 21c:	csel	x2, x2, x7, ls  // ls = plast
 220:	cmp	x2, #0x0
 224:	csel	x2, x2, x10, ne  // ne = any
 228:	cmp	x2, #0x3e
 22c:	csel	x2, x2, x9, ls  // ls = plast
 230:	lsl	x5, x2, #1
 234:	str	x5, [x3]
 238:	str	x4, [x3, #8]
 23c:	add	x2, x2, #0x2
 240:	cmp	x4, x2, lsl #3
 244:	csel	x2, x6, x8, cs  // cs = hs, nlast
 248:	str	x2, [x3, #16]
 24c:	add	x0, x0, #0x1
 250:	add	x3, x3, #0x400
 254:	cmp	x0, #0x36
 258:	b.eq	174 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x174>  // b.none
 25c:	cmp	x0, #0x35
 260:	b.eq	2d8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x2d8>  // b.none
 264:	lsl	x4, x0, #4
 268:	cmp	x0, #0x10
 26c:	b.ls	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x20c>  // b.plast
 270:	sub	x5, x0, #0x10
 274:	lsr	x2, x5, #2
 278:	lsl	x2, x12, x2
 27c:	lsr	x4, x2, #2
 280:	and	x5, x5, #0x3
 284:	madd	x4, x4, x5, x2
 288:	b	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x20c>
 28c:	mov	x3, x20
 290:	mov	x2, x22
 294:	mov	x0, x19
 298:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
 29c:	b	184 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x184>
 2a0:	mov	w0, #0x0                   	// #0
 2a4:	b	84 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x84>
 2a8:	str	xzr, [x3]
 2ac:	str	xzr, [x3, #8]
 2b0:	str	x8, [x3, #16]
 2b4:	add	x0, x0, #0x1
 2b8:	add	x3, x3, #0x400
 2bc:	b	25c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x25c>
 2c0:	str	xzr, [x6]
 2c4:	str	xzr, [x6, #8]
 2c8:	str	x8, [x6, #16]
 2cc:	add	x5, x5, #0x1
 2d0:	add	x6, x6, #0x400
 2d4:	b	128 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x128>
 2d8:	str	x7, [x3]
 2dc:	str	x14, [x3, #8]
 2e0:	mov	x2, x13
 2e4:	b	248 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x248>
 2e8:	str	x3, [x6]
 2ec:	str	x14, [x6, #8]
 2f0:	mov	x0, x13
 2f4:	b	114 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x114>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x23, x24, [sp, #32]
   8:	str	x30, [sp, #48]
   c:	mov	x23, x0
  10:	mov	x19, x3
  14:	cmp	x2, #0x0
  18:	csinc	x20, x2, xzr, ne  // ne = any
  1c:	adds	x0, x20, x3
  20:	b.cs	f4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0xf4>  // b.hs, b.nlast
  24:	stp	x21, x22, [sp, #16]
  28:	mov	x21, x1
  2c:	cmp	x3, #0x8
  30:	b.hi	118 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x118>  // b.pmore
  34:	cmp	x2, #0x20, lsl #12
  38:	b.hi	1c4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x1c4>  // b.pmore
  3c:	cmp	x20, #0x100
  40:	b.ls	158 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x158>  // b.plast
  44:	clz	x0, x20
  48:	mov	w22, #0x3f                  	// #63
  4c:	sub	w22, w22, w0
  50:	sub	w0, w22, #0x2
  54:	mov	w1, #0x1                   	// #1
  58:	lsl	w1, w1, w0
  5c:	sub	w1, w1, #0x1
  60:	tst	x1, x20
  64:	lsr	x0, x20, x0
  68:	and	x0, x0, #0x3
  6c:	cinc	x0, x0, ne  // ne = any
  70:	add	x22, x0, w22, sxtw #2
  74:	sub	x22, x22, #0x10
  78:	cmp	x22, #0x35
  7c:	b.hi	188 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x188>  // b.pmore
  80:	lsl	x20, x22, #10
  84:	add	x1, x21, x20
  88:	ldr	x0, [x21, x20]
  8c:	cbz	x0, 1a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x1a8>
  90:	ldr	x2, [x21, x20]
  94:	sub	x0, x2, #0x1
  98:	str	x0, [x21, x20]
  9c:	lsl	x1, x22, #7
  a0:	add	x0, x1, x0
  a4:	add	x0, x0, #0x4
  a8:	ldr	x0, [x21, x0, lsl #3]
  ac:	add	x1, x1, x2
  b0:	add	x1, x1, #0x2
  b4:	ldr	x1, [x21, x1, lsl #3]
  b8:	prfm	pldl1keep, [x1]
  bc:	add	x2, x21, #0xd, lsl #12
  c0:	add	x2, x2, #0x800
  c4:	ldr	x1, [x2, #16]
  c8:	add	x21, x21, x22, lsl #10
  cc:	ldr	x3, [x21, #16]
  d0:	add	x1, x1, x3
  d4:	str	x1, [x2, #16]
  d8:	cmp	x19, #0x8
  dc:	b.ls	4d4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4d4>  // b.plast
  e0:	sub	x19, x19, #0x1
  e4:	ands	x3, x0, x19
  e8:	b.ne	4b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4b8>  // b.any
  ec:	ldp	x21, x22, [sp, #16]
  f0:	b	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4d8>
  f4:	mov	x2, x20
  f8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  fc:	ldr	x0, [x0]
 100:	ldr	x1, [x0]
 104:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 108:	add	x0, x0, #0x0
 10c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 110:	mov	x0, #0x0                   	// #0
 114:	b	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4d8>
 118:	sub	x24, x3, #0x1
 11c:	tst	x3, x24
 120:	b.ne	148 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x148>  // b.any
 124:	sub	x0, x0, #0x1
 128:	neg	x1, x3
 12c:	and	x0, x0, x1
 130:	cmp	x0, #0x20, lsl #12
 134:	mov	x1, #0x20000               	// #131072
 138:	ccmp	x3, x1, #0x2, ls  // ls = plast
 13c:	b.hi	1d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x1d0>  // b.pmore
 140:	mov	x20, x0
 144:	b	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3c>
 148:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 154:	bl	0 <_ZN11__sanitizer3DieEv>
 158:	add	x20, x20, #0xf
 15c:	lsr	x22, x20, #4
 160:	cmp	xzr, x20, lsr #4
 164:	b.ne	80 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x80>  // b.any
 168:	mov	x4, #0x0                   	// #0
 16c:	mov	x3, #0x0                   	// #0
 170:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 174:	add	x2, x2, #0x0
 178:	mov	w1, #0x9f                  	// #159
 17c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 180:	add	x0, x0, #0x0
 184:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 188:	mov	x4, #0x36                  	// #54
 18c:	mov	x3, x22
 190:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 194:	add	x2, x2, #0x0
 198:	mov	w1, #0xa0                  	// #160
 19c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 1a0:	add	x0, x0, #0x0
 1a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1a8:	mov	x3, x22
 1ac:	mov	x2, x23
 1b0:	mov	x0, x21
 1b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 1b8:	and	w0, w0, #0xff
 1bc:	cbnz	w0, 90 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x90>
 1c0:	b	3c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3c0>
 1c4:	sub	x24, x3, #0x1
 1c8:	tst	x3, x24
 1cc:	b.ne	370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x370>  // b.any
 1d0:	add	x0, x23, #0x80, lsl #12
 1d4:	add	x0, x0, #0xc00
 1d8:	ldr	x0, [x0, #448]
 1dc:	sub	x21, x0, #0x1
 1e0:	tst	x0, x21
 1e4:	b.ne	390 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x390>  // b.any
 1e8:	add	x21, x20, x21
 1ec:	neg	x1, x0
 1f0:	and	x21, x21, x1
 1f4:	add	x21, x21, x0
 1f8:	add	x1, x21, x19
 1fc:	cmp	x19, x0
 200:	csel	x21, x1, x21, hi  // hi = pmore
 204:	cmp	x20, x21
 208:	b.hi	3a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3a0>  // b.pmore
 20c:	adrp	x0, 0 <_ZN11__sanitizer22SecondaryAllocatorNameE>
 210:	ldr	x0, [x0]
 214:	ldr	x1, [x0]
 218:	mov	x0, x21
 21c:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 220:	cbz	x0, 3c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3c0>
 224:	add	x1, x23, #0x80, lsl #12
 228:	add	x1, x1, #0xc00
 22c:	ldr	x1, [x1, #448]
 230:	sub	x2, x1, #0x1
 234:	tst	x0, x2
 238:	b.ne	3cc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3cc>  // b.any
 23c:	add	x22, x0, x1
 240:	ands	x3, x24, x22
 244:	b.eq	258 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x258>  // b.none
 248:	add	x22, x19, x22
 24c:	sub	x22, x22, x3
 250:	tst	x24, x22
 254:	b.ne	3ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3ec>  // b.any
 258:	tst	x22, x2
 25c:	b.ne	40c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x40c>  // b.any
 260:	add	x3, x20, x22
 264:	cmp	x0, x3
 268:	b.hi	42c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x42c>  // b.pmore
 26c:	add	x4, x21, x0
 270:	cmp	x4, x3
 274:	b.cc	448 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x448>  // b.lo, b.ul, b.last
 278:	sub	x24, x22, x1
 27c:	str	x20, [x24, #16]
 280:	str	x0, [x24]
 284:	str	x21, [x24, #8]
 288:	add	x0, x23, #0x81, lsl #12
 28c:	add	x0, x0, #0x28
 290:	mov	w2, #0x1                   	// #1
 294:	ldxrb	w1, [x0]
 298:	stxrb	w3, w2, [x0]
 29c:	cbnz	w3, 294 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x294>
 2a0:	dmb	ish
 2a4:	and	w1, w1, #0xff
 2a8:	cbnz	w1, 460 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x460>
 2ac:	add	x0, x23, #0x80, lsl #12
 2b0:	add	x0, x0, #0xdc0
 2b4:	ldr	x3, [x0, #56]
 2b8:	mov	x0, #0xfffff               	// #1048575
 2bc:	cmp	x3, x0
 2c0:	b.hi	468 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x468>  // b.pmore
 2c4:	add	x0, x23, #0x80, lsl #12
 2c8:	add	x0, x0, #0xdd0
 2cc:	ldr	x0, [x0, #32]
 2d0:	cmp	x3, x0
 2d4:	b.eq	484 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x484>  // b.none
 2d8:	clz	x3, x21
 2dc:	add	x0, x23, #0x80, lsl #12
 2e0:	add	x0, x0, #0xdc0
 2e4:	ldr	x1, [x0, #56]
 2e8:	add	x2, x1, #0x1
 2ec:	str	x2, [x0, #56]
 2f0:	str	x1, [x24, #24]
 2f4:	ldr	x2, [x0, #8]
 2f8:	str	x24, [x2, x1, lsl #3]
 2fc:	strb	wzr, [x0, #64]
 300:	ldr	x1, [x0, #72]
 304:	add	x1, x1, #0x1
 308:	str	x1, [x0, #72]
 30c:	ldr	x1, [x0, #88]
 310:	add	x1, x21, x1
 314:	str	x1, [x0, #88]
 318:	ldr	x2, [x0, #96]
 31c:	cmp	x2, x1
 320:	csel	x1, x2, x1, cs  // cs = hs, nlast
 324:	str	x1, [x0, #96]
 328:	mov	w0, #0x3f                  	// #63
 32c:	sub	w0, w0, w3
 330:	add	x0, x23, w0, sxtw #3
 334:	add	x0, x0, #0x80, lsl #12
 338:	ldr	x1, [x0, #3624]
 33c:	add	x1, x1, #0x1
 340:	str	x1, [x0, #3624]
 344:	add	x0, x23, #0x81, lsl #12
 348:	ldr	x2, [x0, #64]
 34c:	add	x2, x21, x2
 350:	str	x2, [x0, #64]
 354:	ldr	x2, [x0, #72]
 358:	add	x21, x21, x2
 35c:	str	x21, [x0, #72]
 360:	dmb	ish
 364:	strb	wzr, [x0, #40]
 368:	mov	x0, x22
 36c:	b	d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0xd8>
 370:	mov	x4, #0x0                   	// #0
 374:	mov	x3, #0x0                   	// #0
 378:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 37c:	add	x2, x2, #0x0
 380:	mov	w1, #0x53                  	// #83
 384:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 388:	add	x0, x0, #0x0
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 394:	add	x0, x0, #0x0
 398:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 39c:	bl	0 <_ZN11__sanitizer3DieEv>
 3a0:	mov	x3, x19
 3a4:	mov	x2, x21
 3a8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 3ac:	ldr	x0, [x0]
 3b0:	ldr	x1, [x0]
 3b4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 3b8:	add	x0, x0, #0x0
 3bc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3c0:	mov	x0, #0x0                   	// #0
 3c4:	ldp	x21, x22, [sp, #16]
 3c8:	b	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4d8>
 3cc:	mov	x4, #0x0                   	// #0
 3d0:	mov	x3, #0x0                   	// #0
 3d4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 3d8:	add	x2, x2, #0x0
 3dc:	mov	w1, #0x62                  	// #98
 3e0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 3e4:	add	x0, x0, #0x0
 3e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3ec:	mov	x4, #0x0                   	// #0
 3f0:	mov	x3, #0x0                   	// #0
 3f4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 3f8:	add	x2, x2, #0x0
 3fc:	mov	w1, #0x68                  	// #104
 400:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 404:	add	x0, x0, #0x0
 408:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 40c:	mov	x4, #0x0                   	// #0
 410:	mov	x3, #0x0                   	// #0
 414:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 418:	add	x2, x2, #0x0
 41c:	mov	w1, #0x69                  	// #105
 420:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 424:	add	x0, x0, #0x0
 428:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 42c:	mov	x4, x0
 430:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 434:	add	x2, x2, #0x0
 438:	mov	w1, #0x6a                  	// #106
 43c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 440:	add	x0, x0, #0x0
 444:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 448:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 44c:	add	x2, x2, #0x0
 450:	mov	w1, #0x6b                  	// #107
 454:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 458:	add	x0, x0, #0x0
 45c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 460:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 464:	b	2ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x2ac>
 468:	mov	x4, #0x100000              	// #1048576
 46c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 470:	add	x2, x2, #0x0
 474:	mov	w1, #0x29                  	// #41
 478:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 47c:	add	x0, x0, #0x0
 480:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 484:	add	x1, x23, #0x80, lsl #12
 488:	add	x1, x1, #0xc00
 48c:	add	x20, x1, #0x1d0
 490:	ldr	x1, [x1, #464]
 494:	mov	x2, #0x20000               	// #131072
 498:	add	x1, x1, x0, lsl #3
 49c:	add	x0, x23, #0x80, lsl #12
 4a0:	add	x0, x0, #0xdd0
 4a4:	bl	0 <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>
 4a8:	ldr	x0, [x20, #32]
 4ac:	add	x0, x0, #0x4, lsl #12
 4b0:	str	x0, [x20, #32]
 4b4:	b	2d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x2d8>
 4b8:	mov	x4, #0x0                   	// #0
 4bc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 4c0:	add	x2, x2, #0x0
 4c4:	mov	w1, #0x42                  	// #66
 4c8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
 4cc:	add	x0, x0, #0x0
 4d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4d4:	ldp	x21, x22, [sp, #16]
 4d8:	ldp	x23, x24, [sp, #32]
 4dc:	ldr	x30, [sp, #48]
 4e0:	ldp	x19, x20, [sp], #64
 4e4:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x26, [sp, #48]
  10:	str	x30, [sp, #64]
  14:	mov	x21, x0
  18:	mov	x20, x1
  1c:	mov	x23, x2
  20:	mov	x22, x3
  24:	ldr	x6, [x1]
  28:	ldr	x19, [x1, #8]
  2c:	lsr	x19, x19, #1
  30:	cmp	x19, x6
  34:	csel	x19, x19, x6, ls  // ls = plast
  38:	sub	x24, x6, x19
  3c:	add	x0, x0, x3, lsl #10
  40:	ldr	x25, [x0, #24]
  44:	cbnz	x25, b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0xb8>
  48:	add	x0, x24, #0x4
  4c:	ldr	x3, [x1, x0, lsl #3]
  50:	cbz	x3, 150 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x150>
  54:	add	x6, x24, #0x4
  58:	add	x6, x20, x6, lsl #3
  5c:	str	x19, [x3, #8]
  60:	cbz	x19, 80 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x80>
  64:	mov	x4, #0x0                   	// #0
  68:	add	x1, x3, #0x10
  6c:	ldr	x5, [x6, x4, lsl #3]
  70:	str	x5, [x1, x4, lsl #3]
  74:	add	x4, x4, #0x1
  78:	cmp	x4, x19
  7c:	b.ne	6c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x6c>  // b.any
  80:	ldr	x0, [x20]
  84:	sub	x19, x0, x19
  88:	str	x19, [x20]
  8c:	mov	x2, x22
  90:	add	x1, x21, #0xd, lsl #12
  94:	add	x1, x1, #0x800
  98:	mov	x0, x23
  9c:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
  a0:	ldp	x21, x22, [sp, #16]
  a4:	ldp	x23, x24, [sp, #32]
  a8:	ldp	x25, x26, [sp, #48]
  ac:	ldr	x30, [sp, #64]
  b0:	ldp	x19, x20, [sp], #80
  b4:	ret
  b8:	cmp	x25, #0x35
  bc:	b.hi	11c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x11c>  // b.pmore
  c0:	lsl	x26, x25, #10
  c4:	add	x1, x21, x26
  c8:	ldr	x0, [x21, x26]
  cc:	cbz	x0, 13c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x13c>
  d0:	ldr	x2, [x21, x26]
  d4:	sub	x1, x2, #0x1
  d8:	str	x1, [x21, x26]
  dc:	lsl	x0, x25, #7
  e0:	add	x1, x0, x1
  e4:	add	x1, x1, #0x4
  e8:	ldr	x3, [x21, x1, lsl #3]
  ec:	add	x0, x0, x2
  f0:	add	x0, x0, #0x2
  f4:	ldr	x0, [x21, x0, lsl #3]
  f8:	prfm	pldl1keep, [x0]
  fc:	add	x1, x21, #0xd, lsl #12
 100:	add	x1, x1, #0x800
 104:	ldr	x0, [x1, #16]
 108:	add	x25, x21, x25, lsl #10
 10c:	ldr	x2, [x25, #16]
 110:	add	x0, x0, x2
 114:	str	x0, [x1, #16]
 118:	b	50 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x50>
 11c:	mov	x4, #0x36                  	// #54
 120:	mov	x3, x25
 124:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
 128:	add	x2, x2, #0x0
 12c:	mov	w1, #0xa0                  	// #160
 130:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
 134:	add	x0, x0, #0x0
 138:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 13c:	mov	x3, x25
 140:	mov	x0, x21
 144:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
 148:	and	w0, w0, #0xff
 14c:	cbnz	w0, d0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0xd0>
 150:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 154:	ldr	x0, [x0]
 158:	ldr	x1, [x0]
 15c:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
 160:	add	x0, x0, #0x0
 164:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 168:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>:
   0:	cbz	x2, 354 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x354>
   4:	stp	x19, x20, [sp, #-48]!
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #40]
  10:	mov	x20, x0
  14:	mov	x21, x1
  18:	mov	x19, x2
  1c:	mov	x0, #0xffffffffffff        	// #281474976710655
  20:	cmp	x2, x0
  24:	b.ls	124 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x124>  // b.plast
  28:	add	x0, x20, #0x80, lsl #12
  2c:	add	x0, x0, #0xc00
  30:	ldr	x2, [x0, #448]
  34:	sub	x0, x2, #0x1
  38:	tst	x19, x0
  3c:	b.ne	2c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x2c0>  // b.any
  40:	sub	x19, x19, x2
  44:	add	x0, x20, #0x81, lsl #12
  48:	add	x0, x0, #0x28
  4c:	mov	w2, #0x1                   	// #1
  50:	ldxrb	w1, [x0]
  54:	stxrb	w3, w2, [x0]
  58:	cbnz	w3, 50 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x50>
  5c:	dmb	ish
  60:	and	w1, w1, #0xff
  64:	cbnz	w1, 2e4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x2e4>
  68:	ldr	x1, [x19, #24]
  6c:	add	x0, x20, #0x80, lsl #12
  70:	add	x0, x0, #0xdc0
  74:	ldr	x2, [x0, #8]
  78:	ldr	x3, [x2, x1, lsl #3]
  7c:	cmp	x3, x19
  80:	b.ne	2ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x2ec>  // b.any
  84:	add	x0, x20, #0x80, lsl #12
  88:	add	x0, x0, #0xdc0
  8c:	ldr	x4, [x0, #56]
  90:	cmp	x1, x4
  94:	b.cs	30c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x30c>  // b.hs, b.nlast
  98:	sub	x4, x4, #0x1
  9c:	add	x0, x20, #0x80, lsl #12
  a0:	add	x0, x0, #0xdc0
  a4:	str	x4, [x0, #56]
  a8:	ldr	x3, [x2, x4, lsl #3]
  ac:	str	x3, [x2, x1, lsl #3]
  b0:	ldr	x2, [x0, #8]
  b4:	ldr	x2, [x2, x1, lsl #3]
  b8:	str	x1, [x2, #24]
  bc:	strb	wzr, [x0, #64]
  c0:	ldr	x1, [x0, #80]
  c4:	add	x1, x1, #0x1
  c8:	str	x1, [x0, #80]
  cc:	ldr	x1, [x0, #88]
  d0:	ldr	x2, [x19, #8]
  d4:	sub	x1, x1, x2
  d8:	str	x1, [x0, #88]
  dc:	add	x20, x20, #0x81, lsl #12
  e0:	ldr	x1, [x20, #64]
  e4:	ldr	x2, [x19, #8]
  e8:	sub	x1, x1, x2
  ec:	str	x1, [x20, #64]
  f0:	ldr	x1, [x20, #72]
  f4:	ldr	x2, [x19, #8]
  f8:	sub	x1, x1, x2
  fc:	str	x1, [x20, #72]
 100:	dmb	ish
 104:	strb	wzr, [x20, #40]
 108:	ldr	x1, [x19, #8]
 10c:	ldr	x0, [x19]
 110:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 114:	ldp	x21, x22, [sp, #16]
 118:	ldr	x30, [sp, #40]
 11c:	ldp	x19, x20, [sp], #48
 120:	ret
 124:	lsr	x0, x2, #20
 128:	lsr	x2, x2, #32
 12c:	ldr	x1, [x20, x2, lsl #3]
 130:	dmb	ish
 134:	cbz	x1, 28 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x28>
 138:	and	x0, x0, #0xfff
 13c:	ldrb	w1, [x1, x0]
 140:	cbz	w1, 28 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x28>
 144:	str	x23, [sp, #32]
 148:	ldr	x1, [x20, x2, lsl #3]
 14c:	dmb	ish
 150:	cbz	x1, 1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x1c0>
 154:	ldrb	w22, [x1, x0]
 158:	cbz	x22, 1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x1c0>
 15c:	cmp	x22, #0x35
 160:	b.hi	1e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x1e0>  // b.pmore
 164:	lsl	x23, x22, #10
 168:	add	x1, x21, x23
 16c:	ldr	x6, [x1, #8]
 170:	cbz	x6, 200 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x200>
 174:	ldr	x2, [x21, x23]
 178:	ldr	x0, [x1, #8]
 17c:	cmp	x2, x0
 180:	b.eq	2ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x2ac>  // b.none
 184:	ldr	x0, [x21, x23]
 188:	add	x1, x0, #0x1
 18c:	str	x1, [x21, x23]
 190:	add	x0, x0, x22, lsl #7
 194:	add	x0, x0, #0x4
 198:	str	x19, [x21, x0, lsl #3]
 19c:	add	x2, x21, #0xd, lsl #12
 1a0:	add	x2, x2, #0x800
 1a4:	ldr	x0, [x2, #16]
 1a8:	add	x1, x21, x22, lsl #10
 1ac:	ldr	x1, [x1, #16]
 1b0:	sub	x0, x0, x1
 1b4:	str	x0, [x2, #16]
 1b8:	ldr	x23, [sp, #32]
 1bc:	b	114 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x114>
 1c0:	mov	x4, #0x0                   	// #0
 1c4:	mov	x3, #0x0                   	// #0
 1c8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 1cc:	add	x2, x2, #0x0
 1d0:	mov	w1, #0xae                  	// #174
 1d4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e0:	mov	x4, #0x36                  	// #54
 1e4:	mov	x3, x22
 1e8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 1ec:	add	x2, x2, #0x0
 1f0:	mov	w1, #0xaf                  	// #175
 1f4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 1f8:	add	x0, x0, #0x0
 1fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 200:	add	x3, x21, #0x408
 204:	mov	x2, #0x1                   	// #1
 208:	mov	x7, #0x40                  	// #64
 20c:	mov	x14, #0x200                 	// #512
 210:	mov	x13, x6
 214:	mov	x8, #0x14                  	// #20
 218:	mov	w11, #0x4000                	// #16384
 21c:	mov	x10, x2
 220:	mov	x9, #0x3e                  	// #62
 224:	mov	x12, #0x100                 	// #256
 228:	b	294 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x294>
 22c:	sub	x5, x2, #0x10
 230:	lsr	x0, x5, #2
 234:	lsl	x0, x12, x0
 238:	lsr	x4, x0, #2
 23c:	and	x5, x5, #0x3
 240:	madd	x4, x4, x5, x0
 244:	cbz	x4, 32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x32c>
 248:	udiv	w5, w11, w4
 24c:	mov	w0, w5
 250:	cmp	w5, #0x40
 254:	csel	x0, x0, x7, ls  // ls = plast
 258:	cmp	x0, #0x0
 25c:	csel	x0, x0, x10, ne  // ne = any
 260:	cmp	x0, #0x3e
 264:	csel	x0, x0, x9, ls  // ls = plast
 268:	lsl	x5, x0, #1
 26c:	str	x5, [x3]
 270:	str	x4, [x3, #8]
 274:	add	x0, x0, #0x2
 278:	cmp	x4, x0, lsl #3
 27c:	csel	x0, x6, x8, cs  // cs = hs, nlast
 280:	str	x0, [x3, #16]
 284:	add	x2, x2, #0x1
 288:	add	x3, x3, #0x400
 28c:	cmp	x2, #0x36
 290:	b.eq	174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x174>  // b.none
 294:	cmp	x2, #0x35
 298:	b.eq	344 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x344>  // b.none
 29c:	lsl	x4, x2, #4
 2a0:	cmp	x2, #0x10
 2a4:	b.hi	22c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x22c>  // b.pmore
 2a8:	b	244 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x244>
 2ac:	mov	x3, x22
 2b0:	mov	x2, x20
 2b4:	mov	x0, x21
 2b8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 2bc:	b	184 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x184>
 2c0:	str	x23, [sp, #32]
 2c4:	mov	x4, #0x0                   	// #0
 2c8:	mov	x3, #0x0                   	// #0
 2cc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 2d0:	add	x2, x2, #0x0
 2d4:	mov	w1, #0x123                 	// #291
 2d8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 2dc:	add	x0, x0, #0x0
 2e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 2e8:	b	68 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x68>
 2ec:	str	x23, [sp, #32]
 2f0:	mov	x4, x19
 2f4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 2f8:	add	x2, x2, #0x0
 2fc:	mov	w1, #0x88                  	// #136
 300:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 304:	add	x0, x0, #0x0
 308:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 30c:	str	x23, [sp, #32]
 310:	mov	x3, x1
 314:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 318:	add	x2, x2, #0x0
 31c:	mov	w1, #0x89                  	// #137
 320:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 324:	add	x0, x0, #0x0
 328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 32c:	str	xzr, [x3]
 330:	str	xzr, [x3, #8]
 334:	str	x8, [x3, #16]
 338:	add	x2, x2, #0x1
 33c:	add	x3, x3, #0x400
 340:	b	294 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x294>
 344:	str	x7, [x3]
 348:	str	x14, [x3, #8]
 34c:	mov	x0, x13
 350:	b	280 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x280>
 354:	ret

lsan_interceptors.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__interceptor_mallopt>:
       0:	mov	w0, #0xffffffff            	// #-1
       4:	ret

0000000000000008 <__interceptor_malloc>:
       8:	sub	sp, sp, #0x860
       c:	stp	x29, x30, [sp]
      10:	mov	x29, sp
      14:	stp	x19, x20, [sp, #16]
      18:	stp	x21, x22, [sp, #32]
      1c:	str	x23, [sp, #48]
      20:	mov	x20, x0
      24:	adrp	x1, 0 <lsan_init_is_running>
      28:	ldr	x1, [x1]
      2c:	ldrb	w0, [x1]
      30:	cbnz	w0, c0 <__interceptor_malloc+0xb8>
      34:	adrp	x0, 0 <lsan_inited>
      38:	ldr	x0, [x0]
      3c:	ldrb	w0, [x0]
      40:	cbz	w0, e0 <__interceptor_malloc+0xd8>
      44:	add	x0, x29, #0x58
      48:	str	x0, [x29, #72]
      4c:	str	wzr, [x29, #80]
      50:	str	wzr, [x29, #84]
      54:	str	xzr, [x29, #2136]
      58:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
      5c:	ldr	x19, [x19]
      60:	ldrsw	x23, [x19, #36]
      64:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
      68:	mov	x21, x0
      6c:	ldrb	w22, [x19, #34]
      70:	mov	x6, #0x0                   	// #0
      74:	mov	x5, #0x0                   	// #0
      78:	cbnz	w22, e8 <__interceptor_malloc+0xe0>
      7c:	add	x19, x29, #0x48
      80:	mov	w7, w22
      84:	mov	x4, #0x0                   	// #0
      88:	mov	x3, x29
      8c:	mov	x2, x21
      90:	mov	w1, w23
      94:	mov	x0, x19
      98:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
      9c:	mov	x1, x19
      a0:	mov	x0, x20
      a4:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
      a8:	ldp	x19, x20, [sp, #16]
      ac:	ldp	x21, x22, [sp, #32]
      b0:	ldr	x23, [sp, #48]
      b4:	ldp	x29, x30, [sp]
      b8:	add	sp, sp, #0x860
      bc:	ret
      c0:	mov	x4, #0x0                   	// #0
      c4:	mov	x3, #0x0                   	// #0
      c8:	adrp	x2, 0 <__interceptor_mallopt>
      cc:	add	x2, x2, #0x0
      d0:	mov	w1, #0x34                  	// #52
      d4:	adrp	x0, 0 <__interceptor_mallopt>
      d8:	add	x0, x0, #0x0
      dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      e0:	bl	0 <__lsan_init>
      e4:	b	44 <__interceptor_malloc+0x3c>
      e8:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
      ec:	cbz	x0, fc <__interceptor_malloc+0xf4>
      f0:	ldr	x5, [x0, #152]
      f4:	ldr	x6, [x0, #144]
      f8:	b	7c <__interceptor_malloc+0x74>
      fc:	mov	x6, #0x0                   	// #0
     100:	mov	x5, #0x0                   	// #0
     104:	b	7c <__interceptor_malloc+0x74>

0000000000000108 <__interceptor_cfree>:
     108:	stp	x19, x30, [sp, #-16]!
     10c:	mov	x19, x0
     110:	adrp	x1, 0 <lsan_init_is_running>
     114:	ldr	x1, [x1]
     118:	ldrb	w0, [x1]
     11c:	cbnz	w0, 140 <__interceptor_cfree+0x38>
     120:	adrp	x0, 0 <lsan_inited>
     124:	ldr	x0, [x0]
     128:	ldrb	w0, [x0]
     12c:	cbz	w0, 160 <__interceptor_cfree+0x58>
     130:	mov	x0, x19
     134:	bl	0 <_ZN6__lsan9lsan_freeEPv>
     138:	ldp	x19, x30, [sp], #16
     13c:	ret
     140:	mov	x4, #0x0                   	// #0
     144:	mov	x3, #0x0                   	// #0
     148:	adrp	x2, 0 <__interceptor_mallopt>
     14c:	add	x2, x2, #0x0
     150:	mov	w1, #0x3a                  	// #58
     154:	adrp	x0, 0 <__interceptor_mallopt>
     158:	add	x0, x0, #0x0
     15c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     160:	bl	0 <__lsan_init>
     164:	b	130 <__interceptor_cfree+0x28>

0000000000000168 <__interceptor_calloc>:
     168:	sub	sp, sp, #0x860
     16c:	stp	x29, x30, [sp]
     170:	mov	x29, sp
     174:	stp	x19, x20, [sp, #16]
     178:	mov	x20, x0
     17c:	mov	x19, x1
     180:	adrp	x2, 0 <lsan_init_is_running>
     184:	ldr	x2, [x2]
     188:	ldrb	w0, [x2]
     18c:	cbz	w0, 1f4 <__interceptor_calloc+0x8c>
     190:	adrp	x1, 0 <__interceptor_mallopt>
     194:	ldr	x3, [x1]
     198:	adrp	x2, 0 <__interceptor_mallopt>
     19c:	add	x2, x2, #0x0
     1a0:	add	x0, x2, x3, lsl #3
     1a4:	mul	x19, x20, x19
     1a8:	add	x19, x19, #0x7
     1ac:	add	x19, x3, x19, lsr #3
     1b0:	str	x19, [x1]
     1b4:	cmp	x19, #0x3ff
     1b8:	b.hi	1cc <__interceptor_calloc+0x64>  // b.pmore
     1bc:	ldp	x19, x20, [sp, #16]
     1c0:	ldp	x29, x30, [sp]
     1c4:	add	sp, sp, #0x860
     1c8:	ret
     1cc:	stp	x21, x22, [x29, #32]
     1d0:	stp	x23, x24, [x29, #48]
     1d4:	mov	x4, #0x0                   	// #0
     1d8:	mov	x3, #0x0                   	// #0
     1dc:	adrp	x2, 0 <__interceptor_mallopt>
     1e0:	add	x2, x2, #0x0
     1e4:	mov	w1, #0x47                  	// #71
     1e8:	adrp	x0, 0 <__interceptor_mallopt>
     1ec:	add	x0, x0, #0x0
     1f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     1f4:	stp	x21, x22, [x29, #32]
     1f8:	stp	x23, x24, [x29, #48]
     1fc:	adrp	x0, 0 <lsan_inited>
     200:	ldr	x0, [x0]
     204:	ldrb	w0, [x0]
     208:	cbz	w0, 280 <__interceptor_calloc+0x118>
     20c:	add	x0, x29, #0x58
     210:	str	x0, [x29, #72]
     214:	str	wzr, [x29, #80]
     218:	str	wzr, [x29, #84]
     21c:	str	xzr, [x29, #2136]
     220:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     224:	ldr	x21, [x21]
     228:	ldrsw	x24, [x21, #36]
     22c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     230:	mov	x22, x0
     234:	ldrb	w23, [x21, #34]
     238:	mov	x6, #0x0                   	// #0
     23c:	mov	x5, #0x0                   	// #0
     240:	cbnz	w23, 288 <__interceptor_calloc+0x120>
     244:	add	x21, x29, #0x48
     248:	mov	w7, w23
     24c:	mov	x4, #0x0                   	// #0
     250:	mov	x3, x29
     254:	mov	x2, x22
     258:	mov	w1, w24
     25c:	mov	x0, x21
     260:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     264:	mov	x2, x21
     268:	mov	x1, x19
     26c:	mov	x0, x20
     270:	bl	0 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE>
     274:	ldp	x21, x22, [x29, #32]
     278:	ldp	x23, x24, [x29, #48]
     27c:	b	1bc <__interceptor_calloc+0x54>
     280:	bl	0 <__lsan_init>
     284:	b	20c <__interceptor_calloc+0xa4>
     288:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     28c:	cbz	x0, 29c <__interceptor_calloc+0x134>
     290:	ldr	x5, [x0, #152]
     294:	ldr	x6, [x0, #144]
     298:	b	244 <__interceptor_calloc+0xdc>
     29c:	mov	x6, #0x0                   	// #0
     2a0:	mov	x5, #0x0                   	// #0
     2a4:	b	244 <__interceptor_calloc+0xdc>

00000000000002a8 <__interceptor_realloc>:
     2a8:	sub	sp, sp, #0x860
     2ac:	stp	x29, x30, [sp]
     2b0:	mov	x29, sp
     2b4:	stp	x19, x20, [sp, #16]
     2b8:	stp	x21, x22, [sp, #32]
     2bc:	stp	x23, x24, [sp, #48]
     2c0:	mov	x20, x0
     2c4:	adrp	x2, 0 <lsan_init_is_running>
     2c8:	ldr	x2, [x2]
     2cc:	ldrb	w0, [x2]
     2d0:	cbnz	w0, 368 <__interceptor_realloc+0xc0>
     2d4:	mov	x21, x1
     2d8:	adrp	x0, 0 <lsan_inited>
     2dc:	ldr	x0, [x0]
     2e0:	ldrb	w0, [x0]
     2e4:	cbz	w0, 388 <__interceptor_realloc+0xe0>
     2e8:	add	x0, x29, #0x58
     2ec:	str	x0, [x29, #72]
     2f0:	str	wzr, [x29, #80]
     2f4:	str	wzr, [x29, #84]
     2f8:	str	xzr, [x29, #2136]
     2fc:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     300:	ldr	x19, [x19]
     304:	ldrsw	x24, [x19, #36]
     308:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     30c:	mov	x22, x0
     310:	ldrb	w23, [x19, #34]
     314:	mov	x6, #0x0                   	// #0
     318:	mov	x5, #0x0                   	// #0
     31c:	cbnz	w23, 390 <__interceptor_realloc+0xe8>
     320:	add	x19, x29, #0x48
     324:	mov	w7, w23
     328:	mov	x4, #0x0                   	// #0
     32c:	mov	x3, x29
     330:	mov	x2, x22
     334:	mov	w1, w24
     338:	mov	x0, x19
     33c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     340:	mov	x2, x19
     344:	mov	x1, x21
     348:	mov	x0, x20
     34c:	bl	0 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE>
     350:	ldp	x19, x20, [sp, #16]
     354:	ldp	x21, x22, [sp, #32]
     358:	ldp	x23, x24, [sp, #48]
     35c:	ldp	x29, x30, [sp]
     360:	add	sp, sp, #0x860
     364:	ret
     368:	mov	x4, #0x0                   	// #0
     36c:	mov	x3, #0x0                   	// #0
     370:	adrp	x2, 0 <__interceptor_mallopt>
     374:	add	x2, x2, #0x0
     378:	mov	w1, #0x50                  	// #80
     37c:	adrp	x0, 0 <__interceptor_mallopt>
     380:	add	x0, x0, #0x0
     384:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     388:	bl	0 <__lsan_init>
     38c:	b	2e8 <__interceptor_realloc+0x40>
     390:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     394:	cbz	x0, 3a4 <__interceptor_realloc+0xfc>
     398:	ldr	x5, [x0, #152]
     39c:	ldr	x6, [x0, #144]
     3a0:	b	320 <__interceptor_realloc+0x78>
     3a4:	mov	x6, #0x0                   	// #0
     3a8:	mov	x5, #0x0                   	// #0
     3ac:	b	320 <__interceptor_realloc+0x78>

00000000000003b0 <__interceptor_posix_memalign>:
     3b0:	sub	sp, sp, #0x870
     3b4:	stp	x29, x30, [sp]
     3b8:	mov	x29, sp
     3bc:	stp	x19, x20, [sp, #16]
     3c0:	stp	x21, x22, [sp, #32]
     3c4:	stp	x23, x24, [sp, #48]
     3c8:	str	x25, [sp, #64]
     3cc:	mov	x20, x0
     3d0:	adrp	x3, 0 <lsan_init_is_running>
     3d4:	ldr	x3, [x3]
     3d8:	ldrb	w0, [x3]
     3dc:	cbnz	w0, 480 <__interceptor_posix_memalign+0xd0>
     3e0:	mov	x21, x1
     3e4:	mov	x22, x2
     3e8:	adrp	x0, 0 <lsan_inited>
     3ec:	ldr	x0, [x0]
     3f0:	ldrb	w0, [x0]
     3f4:	cbz	w0, 4a0 <__interceptor_posix_memalign+0xf0>
     3f8:	add	x0, x29, #0x68
     3fc:	str	x0, [x29, #88]
     400:	str	wzr, [x29, #96]
     404:	str	wzr, [x29, #100]
     408:	str	xzr, [x29, #2152]
     40c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     410:	ldr	x19, [x19]
     414:	ldrsw	x25, [x19, #36]
     418:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     41c:	mov	x23, x0
     420:	ldrb	w24, [x19, #34]
     424:	mov	x6, #0x0                   	// #0
     428:	mov	x5, #0x0                   	// #0
     42c:	cbnz	w24, 4a8 <__interceptor_posix_memalign+0xf8>
     430:	add	x19, x29, #0x58
     434:	mov	w7, w24
     438:	mov	x4, #0x0                   	// #0
     43c:	mov	x3, x29
     440:	mov	x2, x23
     444:	mov	w1, w25
     448:	mov	x0, x19
     44c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     450:	mov	x3, x19
     454:	mov	x2, x22
     458:	mov	x1, x21
     45c:	mov	x0, x20
     460:	bl	0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE>
     464:	ldp	x19, x20, [sp, #16]
     468:	ldp	x21, x22, [sp, #32]
     46c:	ldp	x23, x24, [sp, #48]
     470:	ldr	x25, [sp, #64]
     474:	ldp	x29, x30, [sp]
     478:	add	sp, sp, #0x870
     47c:	ret
     480:	mov	x4, #0x0                   	// #0
     484:	mov	x3, #0x0                   	// #0
     488:	adrp	x2, 0 <__interceptor_mallopt>
     48c:	add	x2, x2, #0x0
     490:	mov	w1, #0x56                  	// #86
     494:	adrp	x0, 0 <__interceptor_mallopt>
     498:	add	x0, x0, #0x0
     49c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     4a0:	bl	0 <__lsan_init>
     4a4:	b	3f8 <__interceptor_posix_memalign+0x48>
     4a8:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     4ac:	cbz	x0, 4bc <__interceptor_posix_memalign+0x10c>
     4b0:	ldr	x5, [x0, #152]
     4b4:	ldr	x6, [x0, #144]
     4b8:	b	430 <__interceptor_posix_memalign+0x80>
     4bc:	mov	x6, #0x0                   	// #0
     4c0:	mov	x5, #0x0                   	// #0
     4c4:	b	430 <__interceptor_posix_memalign+0x80>

00000000000004c8 <__interceptor_valloc>:
     4c8:	sub	sp, sp, #0x860
     4cc:	stp	x29, x30, [sp]
     4d0:	mov	x29, sp
     4d4:	stp	x19, x20, [sp, #16]
     4d8:	stp	x21, x22, [sp, #32]
     4dc:	str	x23, [sp, #48]
     4e0:	mov	x20, x0
     4e4:	adrp	x1, 0 <lsan_init_is_running>
     4e8:	ldr	x1, [x1]
     4ec:	ldrb	w0, [x1]
     4f0:	cbnz	w0, 580 <__interceptor_valloc+0xb8>
     4f4:	adrp	x0, 0 <lsan_inited>
     4f8:	ldr	x0, [x0]
     4fc:	ldrb	w0, [x0]
     500:	cbz	w0, 5a0 <__interceptor_valloc+0xd8>
     504:	add	x0, x29, #0x58
     508:	str	x0, [x29, #72]
     50c:	str	wzr, [x29, #80]
     510:	str	wzr, [x29, #84]
     514:	str	xzr, [x29, #2136]
     518:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     51c:	ldr	x19, [x19]
     520:	ldrsw	x23, [x19, #36]
     524:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     528:	mov	x21, x0
     52c:	ldrb	w22, [x19, #34]
     530:	mov	x6, #0x0                   	// #0
     534:	mov	x5, #0x0                   	// #0
     538:	cbnz	w22, 5a8 <__interceptor_valloc+0xe0>
     53c:	add	x19, x29, #0x48
     540:	mov	w7, w22
     544:	mov	x4, #0x0                   	// #0
     548:	mov	x3, x29
     54c:	mov	x2, x21
     550:	mov	w1, w23
     554:	mov	x0, x19
     558:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     55c:	mov	x1, x19
     560:	mov	x0, x20
     564:	bl	0 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE>
     568:	ldp	x19, x20, [sp, #16]
     56c:	ldp	x21, x22, [sp, #32]
     570:	ldr	x23, [sp, #48]
     574:	ldp	x29, x30, [sp]
     578:	add	sp, sp, #0x860
     57c:	ret
     580:	mov	x4, #0x0                   	// #0
     584:	mov	x3, #0x0                   	// #0
     588:	adrp	x2, 0 <__interceptor_mallopt>
     58c:	add	x2, x2, #0x0
     590:	mov	w1, #0x5c                  	// #92
     594:	adrp	x0, 0 <__interceptor_mallopt>
     598:	add	x0, x0, #0x0
     59c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5a0:	bl	0 <__lsan_init>
     5a4:	b	504 <__interceptor_valloc+0x3c>
     5a8:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     5ac:	cbz	x0, 5bc <__interceptor_valloc+0xf4>
     5b0:	ldr	x5, [x0, #152]
     5b4:	ldr	x6, [x0, #144]
     5b8:	b	53c <__interceptor_valloc+0x74>
     5bc:	mov	x6, #0x0                   	// #0
     5c0:	mov	x5, #0x0                   	// #0
     5c4:	b	53c <__interceptor_valloc+0x74>

00000000000005c8 <__interceptor_memalign>:
     5c8:	sub	sp, sp, #0x860
     5cc:	stp	x29, x30, [sp]
     5d0:	mov	x29, sp
     5d4:	stp	x19, x20, [sp, #16]
     5d8:	stp	x21, x22, [sp, #32]
     5dc:	stp	x23, x24, [sp, #48]
     5e0:	mov	x20, x0
     5e4:	adrp	x2, 0 <lsan_init_is_running>
     5e8:	ldr	x2, [x2]
     5ec:	ldrb	w0, [x2]
     5f0:	cbnz	w0, 688 <__interceptor_memalign+0xc0>
     5f4:	mov	x21, x1
     5f8:	adrp	x0, 0 <lsan_inited>
     5fc:	ldr	x0, [x0]
     600:	ldrb	w0, [x0]
     604:	cbz	w0, 6a8 <__interceptor_memalign+0xe0>
     608:	add	x0, x29, #0x58
     60c:	str	x0, [x29, #72]
     610:	str	wzr, [x29, #80]
     614:	str	wzr, [x29, #84]
     618:	str	xzr, [x29, #2136]
     61c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     620:	ldr	x19, [x19]
     624:	ldrsw	x24, [x19, #36]
     628:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     62c:	mov	x22, x0
     630:	ldrb	w23, [x19, #34]
     634:	mov	x6, #0x0                   	// #0
     638:	mov	x5, #0x0                   	// #0
     63c:	cbnz	w23, 6b0 <__interceptor_memalign+0xe8>
     640:	add	x19, x29, #0x48
     644:	mov	w7, w23
     648:	mov	x4, #0x0                   	// #0
     64c:	mov	x3, x29
     650:	mov	x2, x22
     654:	mov	w1, w24
     658:	mov	x0, x19
     65c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     660:	mov	x2, x19
     664:	mov	x1, x21
     668:	mov	x0, x20
     66c:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
     670:	ldp	x19, x20, [sp, #16]
     674:	ldp	x21, x22, [sp, #32]
     678:	ldp	x23, x24, [sp, #48]
     67c:	ldp	x29, x30, [sp]
     680:	add	sp, sp, #0x860
     684:	ret
     688:	mov	x4, #0x0                   	// #0
     68c:	mov	x3, #0x0                   	// #0
     690:	adrp	x2, 0 <__interceptor_mallopt>
     694:	add	x2, x2, #0x0
     698:	mov	w1, #0x64                  	// #100
     69c:	adrp	x0, 0 <__interceptor_mallopt>
     6a0:	add	x0, x0, #0x0
     6a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6a8:	bl	0 <__lsan_init>
     6ac:	b	608 <__interceptor_memalign+0x40>
     6b0:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     6b4:	cbz	x0, 6c4 <__interceptor_memalign+0xfc>
     6b8:	ldr	x5, [x0, #152]
     6bc:	ldr	x6, [x0, #144]
     6c0:	b	640 <__interceptor_memalign+0x78>
     6c4:	mov	x6, #0x0                   	// #0
     6c8:	mov	x5, #0x0                   	// #0
     6cc:	b	640 <__interceptor_memalign+0x78>

00000000000006d0 <__interceptor___libc_memalign>:
     6d0:	sub	sp, sp, #0x860
     6d4:	stp	x29, x30, [sp]
     6d8:	mov	x29, sp
     6dc:	stp	x19, x20, [sp, #16]
     6e0:	stp	x21, x22, [sp, #32]
     6e4:	stp	x23, x24, [sp, #48]
     6e8:	mov	x21, x0
     6ec:	mov	x19, x1
     6f0:	adrp	x1, 0 <lsan_init_is_running>
     6f4:	ldr	x1, [x1]
     6f8:	ldrb	w0, [x1]
     6fc:	cbnz	w0, 7a0 <__interceptor___libc_memalign+0xd0>
     700:	adrp	x0, 0 <lsan_inited>
     704:	ldr	x0, [x0]
     708:	ldrb	w0, [x0]
     70c:	cbz	w0, 7c0 <__interceptor___libc_memalign+0xf0>
     710:	add	x0, x29, #0x58
     714:	str	x0, [x29, #72]
     718:	str	wzr, [x29, #80]
     71c:	str	wzr, [x29, #84]
     720:	str	xzr, [x29, #2136]
     724:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     728:	ldr	x20, [x20]
     72c:	ldrsw	x24, [x20, #36]
     730:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     734:	mov	x22, x0
     738:	ldrb	w23, [x20, #34]
     73c:	mov	x6, #0x0                   	// #0
     740:	mov	x5, #0x0                   	// #0
     744:	cbnz	w23, 7c8 <__interceptor___libc_memalign+0xf8>
     748:	add	x20, x29, #0x48
     74c:	mov	w7, w23
     750:	mov	x4, #0x0                   	// #0
     754:	mov	x3, x29
     758:	mov	x2, x22
     75c:	mov	w1, w24
     760:	mov	x0, x20
     764:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     768:	mov	x2, x20
     76c:	mov	x1, x19
     770:	mov	x0, x21
     774:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
     778:	mov	x20, x0
     77c:	mov	x1, x19
     780:	bl	0 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>
     784:	mov	x0, x20
     788:	ldp	x19, x20, [sp, #16]
     78c:	ldp	x21, x22, [sp, #32]
     790:	ldp	x23, x24, [sp, #48]
     794:	ldp	x29, x30, [sp]
     798:	add	sp, sp, #0x860
     79c:	ret
     7a0:	mov	x4, #0x0                   	// #0
     7a4:	mov	x3, #0x0                   	// #0
     7a8:	adrp	x2, 0 <__interceptor_mallopt>
     7ac:	add	x2, x2, #0x0
     7b0:	mov	w1, #0x6b                  	// #107
     7b4:	adrp	x0, 0 <__interceptor_mallopt>
     7b8:	add	x0, x0, #0x0
     7bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7c0:	bl	0 <__lsan_init>
     7c4:	b	710 <__interceptor___libc_memalign+0x40>
     7c8:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     7cc:	cbz	x0, 7dc <__interceptor___libc_memalign+0x10c>
     7d0:	ldr	x5, [x0, #152]
     7d4:	ldr	x6, [x0, #144]
     7d8:	b	748 <__interceptor___libc_memalign+0x78>
     7dc:	mov	x6, #0x0                   	// #0
     7e0:	mov	x5, #0x0                   	// #0
     7e4:	b	748 <__interceptor___libc_memalign+0x78>

00000000000007e8 <__interceptor_aligned_alloc>:
     7e8:	sub	sp, sp, #0x860
     7ec:	stp	x29, x30, [sp]
     7f0:	mov	x29, sp
     7f4:	stp	x19, x20, [sp, #16]
     7f8:	stp	x21, x22, [sp, #32]
     7fc:	stp	x23, x24, [sp, #48]
     800:	mov	x20, x0
     804:	adrp	x2, 0 <lsan_init_is_running>
     808:	ldr	x2, [x2]
     80c:	ldrb	w0, [x2]
     810:	cbnz	w0, 8a8 <__interceptor_aligned_alloc+0xc0>
     814:	mov	x21, x1
     818:	adrp	x0, 0 <lsan_inited>
     81c:	ldr	x0, [x0]
     820:	ldrb	w0, [x0]
     824:	cbz	w0, 8c8 <__interceptor_aligned_alloc+0xe0>
     828:	add	x0, x29, #0x58
     82c:	str	x0, [x29, #72]
     830:	str	wzr, [x29, #80]
     834:	str	wzr, [x29, #84]
     838:	str	xzr, [x29, #2136]
     83c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     840:	ldr	x19, [x19]
     844:	ldrsw	x24, [x19, #36]
     848:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     84c:	mov	x22, x0
     850:	ldrb	w23, [x19, #34]
     854:	mov	x6, #0x0                   	// #0
     858:	mov	x5, #0x0                   	// #0
     85c:	cbnz	w23, 8d0 <__interceptor_aligned_alloc+0xe8>
     860:	add	x19, x29, #0x48
     864:	mov	w7, w23
     868:	mov	x4, #0x0                   	// #0
     86c:	mov	x3, x29
     870:	mov	x2, x22
     874:	mov	w1, w24
     878:	mov	x0, x19
     87c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     880:	mov	x2, x19
     884:	mov	x1, x21
     888:	mov	x0, x20
     88c:	bl	0 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE>
     890:	ldp	x19, x20, [sp, #16]
     894:	ldp	x21, x22, [sp, #32]
     898:	ldp	x23, x24, [sp, #48]
     89c:	ldp	x29, x30, [sp]
     8a0:	add	sp, sp, #0x860
     8a4:	ret
     8a8:	mov	x4, #0x0                   	// #0
     8ac:	mov	x3, #0x0                   	// #0
     8b0:	adrp	x2, 0 <__interceptor_mallopt>
     8b4:	add	x2, x2, #0x0
     8b8:	mov	w1, #0x79                  	// #121
     8bc:	adrp	x0, 0 <__interceptor_mallopt>
     8c0:	add	x0, x0, #0x0
     8c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     8c8:	bl	0 <__lsan_init>
     8cc:	b	828 <__interceptor_aligned_alloc+0x40>
     8d0:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     8d4:	cbz	x0, 8e4 <__interceptor_aligned_alloc+0xfc>
     8d8:	ldr	x5, [x0, #152]
     8dc:	ldr	x6, [x0, #144]
     8e0:	b	860 <__interceptor_aligned_alloc+0x78>
     8e4:	mov	x6, #0x0                   	// #0
     8e8:	mov	x5, #0x0                   	// #0
     8ec:	b	860 <__interceptor_aligned_alloc+0x78>

00000000000008f0 <__interceptor_malloc_usable_size>:
     8f0:	stp	x19, x30, [sp, #-16]!
     8f4:	mov	x19, x0
     8f8:	adrp	x1, 0 <lsan_init_is_running>
     8fc:	ldr	x1, [x1]
     900:	ldrb	w0, [x1]
     904:	cbnz	w0, 928 <__interceptor_malloc_usable_size+0x38>
     908:	adrp	x0, 0 <lsan_inited>
     90c:	ldr	x0, [x0]
     910:	ldrb	w0, [x0]
     914:	cbz	w0, 948 <__interceptor_malloc_usable_size+0x58>
     918:	mov	x0, x19
     91c:	bl	0 <_ZN6__lsan19GetMallocUsableSizeEPKv>
     920:	ldp	x19, x30, [sp], #16
     924:	ret
     928:	mov	x4, #0x0                   	// #0
     92c:	mov	x3, #0x0                   	// #0
     930:	adrp	x2, 0 <__interceptor_mallopt>
     934:	add	x2, x2, #0x0
     938:	mov	w1, #0x84                  	// #132
     93c:	adrp	x0, 0 <__interceptor_mallopt>
     940:	add	x0, x0, #0x0
     944:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     948:	bl	0 <__lsan_init>
     94c:	b	918 <__interceptor_malloc_usable_size+0x28>

0000000000000950 <__interceptor_mallinfo>:
     950:	str	x30, [sp, #-16]!
     954:	mov	x0, x8
     958:	mov	x2, #0x28                  	// #40
     95c:	mov	w1, #0x0                   	// #0
     960:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     964:	ldr	x30, [sp], #16
     968:	ret

000000000000096c <__interceptor_pvalloc>:
     96c:	sub	sp, sp, #0x860
     970:	stp	x29, x30, [sp]
     974:	mov	x29, sp
     978:	stp	x19, x20, [sp, #16]
     97c:	stp	x21, x22, [sp, #32]
     980:	str	x23, [sp, #48]
     984:	mov	x20, x0
     988:	adrp	x1, 0 <lsan_init_is_running>
     98c:	ldr	x1, [x1]
     990:	ldrb	w0, [x1]
     994:	cbnz	w0, a24 <__interceptor_pvalloc+0xb8>
     998:	adrp	x0, 0 <lsan_inited>
     99c:	ldr	x0, [x0]
     9a0:	ldrb	w0, [x0]
     9a4:	cbz	w0, a44 <__interceptor_pvalloc+0xd8>
     9a8:	add	x0, x29, #0x58
     9ac:	str	x0, [x29, #72]
     9b0:	str	wzr, [x29, #80]
     9b4:	str	wzr, [x29, #84]
     9b8:	str	xzr, [x29, #2136]
     9bc:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     9c0:	ldr	x19, [x19]
     9c4:	ldrsw	x23, [x19, #36]
     9c8:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     9cc:	mov	x21, x0
     9d0:	ldrb	w22, [x19, #34]
     9d4:	mov	x6, #0x0                   	// #0
     9d8:	mov	x5, #0x0                   	// #0
     9dc:	cbnz	w22, a4c <__interceptor_pvalloc+0xe0>
     9e0:	add	x19, x29, #0x48
     9e4:	mov	w7, w22
     9e8:	mov	x4, #0x0                   	// #0
     9ec:	mov	x3, x29
     9f0:	mov	x2, x21
     9f4:	mov	w1, w23
     9f8:	mov	x0, x19
     9fc:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     a00:	mov	x1, x19
     a04:	mov	x0, x20
     a08:	bl	0 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE>
     a0c:	ldp	x19, x20, [sp, #16]
     a10:	ldp	x21, x22, [sp, #32]
     a14:	ldr	x23, [sp, #48]
     a18:	ldp	x29, x30, [sp]
     a1c:	add	sp, sp, #0x860
     a20:	ret
     a24:	mov	x4, #0x0                   	// #0
     a28:	mov	x3, #0x0                   	// #0
     a2c:	adrp	x2, 0 <__interceptor_mallopt>
     a30:	add	x2, x2, #0x0
     a34:	mov	w1, #0xa4                  	// #164
     a38:	adrp	x0, 0 <__interceptor_mallopt>
     a3c:	add	x0, x0, #0x0
     a40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     a44:	bl	0 <__lsan_init>
     a48:	b	9a8 <__interceptor_pvalloc+0x3c>
     a4c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     a50:	cbz	x0, a60 <__interceptor_pvalloc+0xf4>
     a54:	ldr	x5, [x0, #152]
     a58:	ldr	x6, [x0, #144]
     a5c:	b	9e0 <__interceptor_pvalloc+0x74>
     a60:	mov	x6, #0x0                   	// #0
     a64:	mov	x5, #0x0                   	// #0
     a68:	b	9e0 <__interceptor_pvalloc+0x74>

0000000000000a6c <__lsan_thread_start_func>:
     a6c:	stp	x19, x20, [sp, #-48]!
     a70:	stp	x21, x22, [sp, #16]
     a74:	str	x30, [sp, #32]
     a78:	mov	x20, x0
     a7c:	ldr	x21, [x0]
     a80:	ldr	x22, [x0, #8]
     a84:	mov	x1, #0x4                   	// #4
     a88:	adrp	x0, 0 <__interceptor_mallopt>
     a8c:	ldr	w0, [x0]
     a90:	bl	0 <pthread_setspecific>
     a94:	cbnz	w0, aac <__lsan_thread_start_func+0x40>
     a98:	ldr	x19, [x20, #16]
     a9c:	dmb	ish
     aa0:	cbnz	w19, abc <__lsan_thread_start_func+0x50>
     aa4:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     aa8:	b	a98 <__lsan_thread_start_func+0x2c>
     aac:	adrp	x0, 0 <__interceptor_mallopt>
     ab0:	add	x0, x0, #0x0
     ab4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ab8:	bl	0 <_ZN11__sanitizer3DieEv>
     abc:	mov	w0, w19
     ac0:	bl	0 <_ZN6__lsan16SetCurrentThreadEj>
     ac4:	bl	0 <_ZN11__sanitizer6GetTidEv>
     ac8:	mov	w2, #0x0                   	// #0
     acc:	mov	x1, x0
     ad0:	mov	w0, w19
     ad4:	bl	0 <_ZN6__lsan11ThreadStartEjyb>
     ad8:	dmb	ish
     adc:	str	xzr, [x20, #16]
     ae0:	mov	x0, x22
     ae4:	blr	x21
     ae8:	ldp	x21, x22, [sp, #16]
     aec:	ldr	x30, [sp, #32]
     af0:	ldp	x19, x20, [sp], #48
     af4:	ret

0000000000000af8 <__interceptor_pthread_create>:
     af8:	stp	x19, x20, [sp, #-208]!
     afc:	stp	x21, x22, [sp, #16]
     b00:	str	x30, [sp, #32]
     b04:	mov	x21, x0
     b08:	adrp	x0, 0 <lsan_init_is_running>
     b0c:	ldr	x0, [x0]
     b10:	ldrb	w0, [x0]
     b14:	cbnz	w0, bb0 <__interceptor_pthread_create+0xb8>
     b18:	mov	x19, x1
     b1c:	mov	x22, x2
     b20:	mov	x20, x3
     b24:	adrp	x0, 0 <lsan_inited>
     b28:	ldr	x0, [x0]
     b2c:	ldrb	w0, [x0]
     b30:	cbz	w0, bd0 <__interceptor_pthread_create+0xd8>
     b34:	bl	0 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>
     b38:	cbz	x19, bd8 <__interceptor_pthread_create+0xe0>
     b3c:	mov	x0, x19
     b40:	bl	0 <_ZN11__sanitizer15AdjustStackSizeEPv>
     b44:	str	wzr, [sp, #76]
     b48:	add	x1, sp, #0x4c
     b4c:	mov	x0, x19
     b50:	bl	0 <pthread_attr_getdetachstate>
     b54:	str	x22, [sp, #48]
     b58:	str	x20, [sp, #56]
     b5c:	str	xzr, [sp, #64]
     b60:	bl	0 <_ZN6__lsan19DisableInThisThreadEv>
     b64:	adrp	x0, 0 <__interceptor_mallopt>
     b68:	ldr	x4, [x0]
     b6c:	add	x3, sp, #0x30
     b70:	adrp	x2, a6c <__lsan_thread_start_func>
     b74:	add	x2, x2, #0x0
     b78:	mov	x1, x19
     b7c:	mov	x0, x21
     b80:	blr	x4
     b84:	mov	w20, w0
     b88:	bl	0 <_ZN6__lsan18EnableInThisThreadEv>
     b8c:	cbz	w20, be8 <__interceptor_pthread_create+0xf0>
     b90:	add	x0, sp, #0x50
     b94:	cmp	x19, x0
     b98:	b.eq	c50 <__interceptor_pthread_create+0x158>  // b.none
     b9c:	mov	w0, w20
     ba0:	ldp	x21, x22, [sp, #16]
     ba4:	ldr	x30, [sp, #32]
     ba8:	ldp	x19, x20, [sp], #208
     bac:	ret
     bb0:	mov	x4, #0x0                   	// #0
     bb4:	mov	x3, #0x0                   	// #0
     bb8:	adrp	x2, 0 <__interceptor_mallopt>
     bbc:	add	x2, x2, #0x0
     bc0:	mov	w1, #0x173                 	// #371
     bc4:	adrp	x0, 0 <__interceptor_mallopt>
     bc8:	add	x0, x0, #0x0
     bcc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bd0:	bl	0 <__lsan_init>
     bd4:	b	b34 <__interceptor_pthread_create+0x3c>
     bd8:	add	x19, sp, #0x50
     bdc:	mov	x0, x19
     be0:	bl	0 <pthread_attr_init>
     be4:	b	b3c <__interceptor_pthread_create+0x44>
     be8:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
     bec:	mov	w22, w0
     bf0:	ldr	x21, [x21]
     bf4:	ldr	w0, [sp, #76]
     bf8:	bl	0 <_ZN11__sanitizer15IsStateDetachedEi>
     bfc:	mov	w2, w0
     c00:	mov	x1, x21
     c04:	mov	w0, w22
     c08:	bl	0 <_ZN6__lsan12ThreadCreateEjmb>
     c0c:	sxtw	x1, w0
     c10:	cbz	w0, c30 <__interceptor_pthread_create+0x138>
     c14:	dmb	ish
     c18:	str	x1, [sp, #64]
     c1c:	ldr	x1, [sp, #64]
     c20:	dmb	ish
     c24:	cbz	x1, b90 <__interceptor_pthread_create+0x98>
     c28:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     c2c:	b	c1c <__interceptor_pthread_create+0x124>
     c30:	mov	x4, #0x0                   	// #0
     c34:	mov	x3, #0x0                   	// #0
     c38:	adrp	x2, 0 <__interceptor_mallopt>
     c3c:	add	x2, x2, #0x0
     c40:	mov	w1, #0x18d                 	// #397
     c44:	adrp	x0, 0 <__interceptor_mallopt>
     c48:	add	x0, x0, #0x0
     c4c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c50:	bl	0 <pthread_attr_destroy>
     c54:	b	b9c <__interceptor_pthread_create+0xa4>

0000000000000c58 <__interceptor_pthread_join>:
     c58:	stp	x19, x20, [sp, #-32]!
     c5c:	stp	x21, x30, [sp, #16]
     c60:	mov	x19, x0
     c64:	adrp	x0, 0 <lsan_init_is_running>
     c68:	ldr	x0, [x0]
     c6c:	ldrb	w0, [x0]
     c70:	cbnz	w0, cc0 <__interceptor_pthread_join+0x68>
     c74:	mov	x21, x1
     c78:	adrp	x0, 0 <lsan_inited>
     c7c:	ldr	x0, [x0]
     c80:	ldrb	w0, [x0]
     c84:	cbz	w0, ce0 <__interceptor_pthread_join+0x88>
     c88:	mov	x0, x19
     c8c:	bl	0 <_ZN6__lsan9ThreadTidEm>
     c90:	mov	w20, w0
     c94:	adrp	x0, 0 <__interceptor_mallopt>
     c98:	ldr	x2, [x0]
     c9c:	mov	x1, x21
     ca0:	mov	x0, x19
     ca4:	blr	x2
     ca8:	mov	w19, w0
     cac:	cbz	w0, ce8 <__interceptor_pthread_join+0x90>
     cb0:	mov	w0, w19
     cb4:	ldp	x21, x30, [sp, #16]
     cb8:	ldp	x19, x20, [sp], #32
     cbc:	ret
     cc0:	mov	x4, #0x0                   	// #0
     cc4:	mov	x3, #0x0                   	// #0
     cc8:	adrp	x2, 0 <__interceptor_mallopt>
     ccc:	add	x2, x2, #0x0
     cd0:	mov	w1, #0x198                 	// #408
     cd4:	adrp	x0, 0 <__interceptor_mallopt>
     cd8:	add	x0, x0, #0x0
     cdc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ce0:	bl	0 <__lsan_init>
     ce4:	b	c88 <__interceptor_pthread_join+0x30>
     ce8:	mov	w0, w20
     cec:	bl	0 <_ZN6__lsan10ThreadJoinEj>
     cf0:	b	cb0 <__interceptor_pthread_join+0x58>

0000000000000cf4 <__interceptor__exit>:
     cf4:	stp	x19, x30, [sp, #-16]!
     cf8:	mov	w19, w0
     cfc:	cbz	w0, d18 <__interceptor__exit+0x24>
     d00:	adrp	x0, 0 <__interceptor_mallopt>
     d04:	ldr	x1, [x0]
     d08:	mov	w0, w19
     d0c:	blr	x1
     d10:	ldp	x19, x30, [sp], #16
     d14:	ret
     d18:	bl	0 <_ZN6__lsan16HasReportedLeaksEv>
     d1c:	and	w0, w0, #0xff
     d20:	cbz	w0, d00 <__interceptor__exit+0xc>
     d24:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d28:	ldr	x0, [x0]
     d2c:	ldr	w19, [x0, #216]
     d30:	b	d00 <__interceptor__exit+0xc>

0000000000000d34 <__interceptor_signal>:
     d34:	stp	x19, x20, [sp, #-32]!
     d38:	str	x30, [sp, #16]
     d3c:	mov	w19, w0
     d40:	mov	x20, x1
     d44:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
     d48:	cmp	w0, #0x2
     d4c:	b.eq	d70 <__interceptor_signal+0x3c>  // b.none
     d50:	adrp	x0, 0 <__interceptor_mallopt>
     d54:	ldr	x2, [x0]
     d58:	mov	x1, x20
     d5c:	mov	w0, w19
     d60:	blr	x2
     d64:	ldr	x30, [sp, #16]
     d68:	ldp	x19, x20, [sp], #32
     d6c:	ret
     d70:	mov	x0, #0x0                   	// #0
     d74:	b	d64 <__interceptor_signal+0x30>

0000000000000d78 <__interceptor_sigaction>:
     d78:	stp	x19, x20, [sp, #-32]!
     d7c:	stp	x21, x30, [sp, #16]
     d80:	mov	w19, w0
     d84:	mov	x20, x1
     d88:	mov	x21, x2
     d8c:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
     d90:	cmp	w0, #0x2
     d94:	b.eq	dbc <__interceptor_sigaction+0x44>  // b.none
     d98:	adrp	x0, 0 <__interceptor_mallopt>
     d9c:	ldr	x3, [x0]
     da0:	mov	x2, x21
     da4:	mov	x1, x20
     da8:	mov	w0, w19
     dac:	blr	x3
     db0:	ldp	x21, x30, [sp, #16]
     db4:	ldp	x19, x20, [sp], #32
     db8:	ret
     dbc:	mov	w0, #0x0                   	// #0
     dc0:	b	db0 <__interceptor_sigaction+0x38>

0000000000000dc4 <_ZL15thread_finalizePv>:
     dc4:	str	x30, [sp, #-16]!
     dc8:	cmp	x0, #0x1
     dcc:	b.ls	dfc <_ZL15thread_finalizePv+0x38>  // b.plast
     dd0:	sub	x1, x0, #0x1
     dd4:	adrp	x0, 0 <__interceptor_mallopt>
     dd8:	ldr	w0, [x0]
     ddc:	bl	0 <pthread_setspecific>
     de0:	cbnz	w0, dec <_ZL15thread_finalizePv+0x28>
     de4:	ldr	x30, [sp], #16
     de8:	ret
     dec:	adrp	x0, 0 <__interceptor_mallopt>
     df0:	add	x0, x0, #0x0
     df4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     df8:	bl	0 <_ZN11__sanitizer3DieEv>
     dfc:	bl	0 <_ZN6__lsan12ThreadFinishEv>
     e00:	b	de4 <_ZL15thread_finalizePv+0x20>

0000000000000e04 <__interceptor_mcheck>:
     e04:	mov	w0, #0x0                   	// #0
     e08:	ret

0000000000000e0c <__interceptor_mcheck_pedantic>:
     e0c:	mov	w0, #0x0                   	// #0
     e10:	ret

0000000000000e14 <__interceptor_mprobe>:
     e14:	mov	w0, #0x0                   	// #0
     e18:	ret

0000000000000e1c <_Znwm>:
     e1c:	sub	sp, sp, #0x860
     e20:	stp	x29, x30, [sp]
     e24:	mov	x29, sp
     e28:	stp	x19, x20, [sp, #16]
     e2c:	stp	x21, x22, [sp, #32]
     e30:	str	x23, [sp, #48]
     e34:	mov	x20, x0
     e38:	adrp	x1, 0 <lsan_init_is_running>
     e3c:	ldr	x1, [x1]
     e40:	ldrb	w0, [x1]
     e44:	cbnz	w0, ed8 <_Znwm+0xbc>
     e48:	adrp	x0, 0 <lsan_inited>
     e4c:	ldr	x0, [x0]
     e50:	ldrb	w0, [x0]
     e54:	cbz	w0, ef8 <_Znwm+0xdc>
     e58:	add	x0, x29, #0x58
     e5c:	str	x0, [x29, #72]
     e60:	str	wzr, [x29, #80]
     e64:	str	wzr, [x29, #84]
     e68:	str	xzr, [x29, #2136]
     e6c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     e70:	ldr	x19, [x19]
     e74:	ldrsw	x23, [x19, #36]
     e78:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     e7c:	mov	x21, x0
     e80:	ldrb	w22, [x19, #34]
     e84:	mov	x6, #0x0                   	// #0
     e88:	mov	x5, #0x0                   	// #0
     e8c:	cbnz	w22, f00 <_Znwm+0xe4>
     e90:	add	x19, x29, #0x48
     e94:	mov	w7, w22
     e98:	mov	x4, #0x0                   	// #0
     e9c:	mov	x3, x29
     ea0:	mov	x2, x21
     ea4:	mov	w1, w23
     ea8:	mov	x0, x19
     eac:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     eb0:	mov	x1, x19
     eb4:	mov	x0, x20
     eb8:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
     ebc:	cbz	x0, f20 <_Znwm+0x104>
     ec0:	ldp	x19, x20, [sp, #16]
     ec4:	ldp	x21, x22, [sp, #32]
     ec8:	ldr	x23, [sp, #48]
     ecc:	ldp	x29, x30, [sp]
     ed0:	add	sp, sp, #0x860
     ed4:	ret
     ed8:	mov	x4, #0x0                   	// #0
     edc:	mov	x3, #0x0                   	// #0
     ee0:	adrp	x2, 0 <__interceptor_mallopt>
     ee4:	add	x2, x2, #0x0
     ee8:	mov	w1, #0xde                  	// #222
     eec:	adrp	x0, 0 <__interceptor_mallopt>
     ef0:	add	x0, x0, #0x0
     ef4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ef8:	bl	0 <__lsan_init>
     efc:	b	e58 <_Znwm+0x3c>
     f00:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     f04:	cbz	x0, f14 <_Znwm+0xf8>
     f08:	ldr	x5, [x0, #152]
     f0c:	ldr	x6, [x0, #144]
     f10:	b	e90 <_Znwm+0x74>
     f14:	mov	x6, #0x0                   	// #0
     f18:	mov	x5, #0x0                   	// #0
     f1c:	b	e90 <_Znwm+0x74>
     f20:	add	x1, x29, #0x48
     f24:	mov	x0, x20
     f28:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>

0000000000000f2c <_Znam>:
     f2c:	sub	sp, sp, #0x860
     f30:	stp	x29, x30, [sp]
     f34:	mov	x29, sp
     f38:	stp	x19, x20, [sp, #16]
     f3c:	stp	x21, x22, [sp, #32]
     f40:	str	x23, [sp, #48]
     f44:	mov	x20, x0
     f48:	adrp	x1, 0 <lsan_init_is_running>
     f4c:	ldr	x1, [x1]
     f50:	ldrb	w0, [x1]
     f54:	cbnz	w0, fe8 <_Znam+0xbc>
     f58:	adrp	x0, 0 <lsan_inited>
     f5c:	ldr	x0, [x0]
     f60:	ldrb	w0, [x0]
     f64:	cbz	w0, 1008 <_Znam+0xdc>
     f68:	add	x0, x29, #0x58
     f6c:	str	x0, [x29, #72]
     f70:	str	wzr, [x29, #80]
     f74:	str	wzr, [x29, #84]
     f78:	str	xzr, [x29, #2136]
     f7c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     f80:	ldr	x19, [x19]
     f84:	ldrsw	x23, [x19, #36]
     f88:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     f8c:	mov	x21, x0
     f90:	ldrb	w22, [x19, #34]
     f94:	mov	x6, #0x0                   	// #0
     f98:	mov	x5, #0x0                   	// #0
     f9c:	cbnz	w22, 1010 <_Znam+0xe4>
     fa0:	add	x19, x29, #0x48
     fa4:	mov	w7, w22
     fa8:	mov	x4, #0x0                   	// #0
     fac:	mov	x3, x29
     fb0:	mov	x2, x21
     fb4:	mov	w1, w23
     fb8:	mov	x0, x19
     fbc:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     fc0:	mov	x1, x19
     fc4:	mov	x0, x20
     fc8:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
     fcc:	cbz	x0, 1030 <_Znam+0x104>
     fd0:	ldp	x19, x20, [sp, #16]
     fd4:	ldp	x21, x22, [sp, #32]
     fd8:	ldr	x23, [sp, #48]
     fdc:	ldp	x29, x30, [sp]
     fe0:	add	sp, sp, #0x860
     fe4:	ret
     fe8:	mov	x4, #0x0                   	// #0
     fec:	mov	x3, #0x0                   	// #0
     ff0:	adrp	x2, 0 <__interceptor_mallopt>
     ff4:	add	x2, x2, #0x0
     ff8:	mov	w1, #0xe0                  	// #224
     ffc:	adrp	x0, 0 <__interceptor_mallopt>
    1000:	add	x0, x0, #0x0
    1004:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1008:	bl	0 <__lsan_init>
    100c:	b	f68 <_Znam+0x3c>
    1010:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1014:	cbz	x0, 1024 <_Znam+0xf8>
    1018:	ldr	x5, [x0, #152]
    101c:	ldr	x6, [x0, #144]
    1020:	b	fa0 <_Znam+0x74>
    1024:	mov	x6, #0x0                   	// #0
    1028:	mov	x5, #0x0                   	// #0
    102c:	b	fa0 <_Znam+0x74>
    1030:	add	x1, x29, #0x48
    1034:	mov	x0, x20
    1038:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>

000000000000103c <_ZnwmRKSt9nothrow_t>:
    103c:	sub	sp, sp, #0x860
    1040:	stp	x29, x30, [sp]
    1044:	mov	x29, sp
    1048:	stp	x19, x20, [sp, #16]
    104c:	stp	x21, x22, [sp, #32]
    1050:	str	x23, [sp, #48]
    1054:	mov	x20, x0
    1058:	adrp	x1, 0 <lsan_init_is_running>
    105c:	ldr	x1, [x1]
    1060:	ldrb	w0, [x1]
    1064:	cbnz	w0, 10f4 <_ZnwmRKSt9nothrow_t+0xb8>
    1068:	adrp	x0, 0 <lsan_inited>
    106c:	ldr	x0, [x0]
    1070:	ldrb	w0, [x0]
    1074:	cbz	w0, 1114 <_ZnwmRKSt9nothrow_t+0xd8>
    1078:	add	x0, x29, #0x58
    107c:	str	x0, [x29, #72]
    1080:	str	wzr, [x29, #80]
    1084:	str	wzr, [x29, #84]
    1088:	str	xzr, [x29, #2136]
    108c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1090:	ldr	x19, [x19]
    1094:	ldrsw	x23, [x19, #36]
    1098:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    109c:	mov	x21, x0
    10a0:	ldrb	w22, [x19, #34]
    10a4:	mov	x6, #0x0                   	// #0
    10a8:	mov	x5, #0x0                   	// #0
    10ac:	cbnz	w22, 111c <_ZnwmRKSt9nothrow_t+0xe0>
    10b0:	add	x19, x29, #0x48
    10b4:	mov	w7, w22
    10b8:	mov	x4, #0x0                   	// #0
    10bc:	mov	x3, x29
    10c0:	mov	x2, x21
    10c4:	mov	w1, w23
    10c8:	mov	x0, x19
    10cc:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    10d0:	mov	x1, x19
    10d4:	mov	x0, x20
    10d8:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
    10dc:	ldp	x19, x20, [sp, #16]
    10e0:	ldp	x21, x22, [sp, #32]
    10e4:	ldr	x23, [sp, #48]
    10e8:	ldp	x29, x30, [sp]
    10ec:	add	sp, sp, #0x860
    10f0:	ret
    10f4:	mov	x4, #0x0                   	// #0
    10f8:	mov	x3, #0x0                   	// #0
    10fc:	adrp	x2, 0 <__interceptor_mallopt>
    1100:	add	x2, x2, #0x0
    1104:	mov	w1, #0xe3                  	// #227
    1108:	adrp	x0, 0 <__interceptor_mallopt>
    110c:	add	x0, x0, #0x0
    1110:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1114:	bl	0 <__lsan_init>
    1118:	b	1078 <_ZnwmRKSt9nothrow_t+0x3c>
    111c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1120:	cbz	x0, 1130 <_ZnwmRKSt9nothrow_t+0xf4>
    1124:	ldr	x5, [x0, #152]
    1128:	ldr	x6, [x0, #144]
    112c:	b	10b0 <_ZnwmRKSt9nothrow_t+0x74>
    1130:	mov	x6, #0x0                   	// #0
    1134:	mov	x5, #0x0                   	// #0
    1138:	b	10b0 <_ZnwmRKSt9nothrow_t+0x74>

000000000000113c <_ZnamRKSt9nothrow_t>:
    113c:	sub	sp, sp, #0x860
    1140:	stp	x29, x30, [sp]
    1144:	mov	x29, sp
    1148:	stp	x19, x20, [sp, #16]
    114c:	stp	x21, x22, [sp, #32]
    1150:	str	x23, [sp, #48]
    1154:	mov	x20, x0
    1158:	adrp	x1, 0 <lsan_init_is_running>
    115c:	ldr	x1, [x1]
    1160:	ldrb	w0, [x1]
    1164:	cbnz	w0, 11f4 <_ZnamRKSt9nothrow_t+0xb8>
    1168:	adrp	x0, 0 <lsan_inited>
    116c:	ldr	x0, [x0]
    1170:	ldrb	w0, [x0]
    1174:	cbz	w0, 1214 <_ZnamRKSt9nothrow_t+0xd8>
    1178:	add	x0, x29, #0x58
    117c:	str	x0, [x29, #72]
    1180:	str	wzr, [x29, #80]
    1184:	str	wzr, [x29, #84]
    1188:	str	xzr, [x29, #2136]
    118c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1190:	ldr	x19, [x19]
    1194:	ldrsw	x23, [x19, #36]
    1198:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    119c:	mov	x21, x0
    11a0:	ldrb	w22, [x19, #34]
    11a4:	mov	x6, #0x0                   	// #0
    11a8:	mov	x5, #0x0                   	// #0
    11ac:	cbnz	w22, 121c <_ZnamRKSt9nothrow_t+0xe0>
    11b0:	add	x19, x29, #0x48
    11b4:	mov	w7, w22
    11b8:	mov	x4, #0x0                   	// #0
    11bc:	mov	x3, x29
    11c0:	mov	x2, x21
    11c4:	mov	w1, w23
    11c8:	mov	x0, x19
    11cc:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    11d0:	mov	x1, x19
    11d4:	mov	x0, x20
    11d8:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
    11dc:	ldp	x19, x20, [sp, #16]
    11e0:	ldp	x21, x22, [sp, #32]
    11e4:	ldr	x23, [sp, #48]
    11e8:	ldp	x29, x30, [sp]
    11ec:	add	sp, sp, #0x860
    11f0:	ret
    11f4:	mov	x4, #0x0                   	// #0
    11f8:	mov	x3, #0x0                   	// #0
    11fc:	adrp	x2, 0 <__interceptor_mallopt>
    1200:	add	x2, x2, #0x0
    1204:	mov	w1, #0xe6                  	// #230
    1208:	adrp	x0, 0 <__interceptor_mallopt>
    120c:	add	x0, x0, #0x0
    1210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1214:	bl	0 <__lsan_init>
    1218:	b	1178 <_ZnamRKSt9nothrow_t+0x3c>
    121c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1220:	cbz	x0, 1230 <_ZnamRKSt9nothrow_t+0xf4>
    1224:	ldr	x5, [x0, #152]
    1228:	ldr	x6, [x0, #144]
    122c:	b	11b0 <_ZnamRKSt9nothrow_t+0x74>
    1230:	mov	x6, #0x0                   	// #0
    1234:	mov	x5, #0x0                   	// #0
    1238:	b	11b0 <_ZnamRKSt9nothrow_t+0x74>

000000000000123c <_ZnwmSt11align_val_t>:
    123c:	sub	sp, sp, #0x860
    1240:	stp	x29, x30, [sp]
    1244:	mov	x29, sp
    1248:	stp	x19, x20, [sp, #16]
    124c:	stp	x21, x22, [sp, #32]
    1250:	stp	x23, x24, [sp, #48]
    1254:	mov	x20, x0
    1258:	adrp	x2, 0 <lsan_init_is_running>
    125c:	ldr	x2, [x2]
    1260:	ldrb	w0, [x2]
    1264:	cbnz	w0, 1300 <_ZnwmSt11align_val_t+0xc4>
    1268:	mov	x21, x1
    126c:	adrp	x0, 0 <lsan_inited>
    1270:	ldr	x0, [x0]
    1274:	ldrb	w0, [x0]
    1278:	cbz	w0, 1320 <_ZnwmSt11align_val_t+0xe4>
    127c:	add	x0, x29, #0x58
    1280:	str	x0, [x29, #72]
    1284:	str	wzr, [x29, #80]
    1288:	str	wzr, [x29, #84]
    128c:	str	xzr, [x29, #2136]
    1290:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1294:	ldr	x19, [x19]
    1298:	ldrsw	x24, [x19, #36]
    129c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    12a0:	mov	x22, x0
    12a4:	ldrb	w23, [x19, #34]
    12a8:	mov	x6, #0x0                   	// #0
    12ac:	mov	x5, #0x0                   	// #0
    12b0:	cbnz	w23, 1328 <_ZnwmSt11align_val_t+0xec>
    12b4:	add	x19, x29, #0x48
    12b8:	mov	w7, w23
    12bc:	mov	x4, #0x0                   	// #0
    12c0:	mov	x3, x29
    12c4:	mov	x2, x22
    12c8:	mov	w1, w24
    12cc:	mov	x0, x19
    12d0:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    12d4:	mov	x2, x19
    12d8:	mov	x1, x20
    12dc:	mov	x0, x21
    12e0:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    12e4:	cbz	x0, 1348 <_ZnwmSt11align_val_t+0x10c>
    12e8:	ldp	x19, x20, [sp, #16]
    12ec:	ldp	x21, x22, [sp, #32]
    12f0:	ldp	x23, x24, [sp, #48]
    12f4:	ldp	x29, x30, [sp]
    12f8:	add	sp, sp, #0x860
    12fc:	ret
    1300:	mov	x4, #0x0                   	// #0
    1304:	mov	x3, #0x0                   	// #0
    1308:	adrp	x2, 0 <__interceptor_mallopt>
    130c:	add	x2, x2, #0x0
    1310:	mov	w1, #0xe9                  	// #233
    1314:	adrp	x0, 0 <__interceptor_mallopt>
    1318:	add	x0, x0, #0x0
    131c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1320:	bl	0 <__lsan_init>
    1324:	b	127c <_ZnwmSt11align_val_t+0x40>
    1328:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    132c:	cbz	x0, 133c <_ZnwmSt11align_val_t+0x100>
    1330:	ldr	x5, [x0, #152]
    1334:	ldr	x6, [x0, #144]
    1338:	b	12b4 <_ZnwmSt11align_val_t+0x78>
    133c:	mov	x6, #0x0                   	// #0
    1340:	mov	x5, #0x0                   	// #0
    1344:	b	12b4 <_ZnwmSt11align_val_t+0x78>
    1348:	add	x1, x29, #0x48
    134c:	mov	x0, x20
    1350:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>

0000000000001354 <_ZnamSt11align_val_t>:
    1354:	sub	sp, sp, #0x860
    1358:	stp	x29, x30, [sp]
    135c:	mov	x29, sp
    1360:	stp	x19, x20, [sp, #16]
    1364:	stp	x21, x22, [sp, #32]
    1368:	stp	x23, x24, [sp, #48]
    136c:	mov	x20, x0
    1370:	adrp	x2, 0 <lsan_init_is_running>
    1374:	ldr	x2, [x2]
    1378:	ldrb	w0, [x2]
    137c:	cbnz	w0, 1418 <_ZnamSt11align_val_t+0xc4>
    1380:	mov	x21, x1
    1384:	adrp	x0, 0 <lsan_inited>
    1388:	ldr	x0, [x0]
    138c:	ldrb	w0, [x0]
    1390:	cbz	w0, 1438 <_ZnamSt11align_val_t+0xe4>
    1394:	add	x0, x29, #0x58
    1398:	str	x0, [x29, #72]
    139c:	str	wzr, [x29, #80]
    13a0:	str	wzr, [x29, #84]
    13a4:	str	xzr, [x29, #2136]
    13a8:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    13ac:	ldr	x19, [x19]
    13b0:	ldrsw	x24, [x19, #36]
    13b4:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    13b8:	mov	x22, x0
    13bc:	ldrb	w23, [x19, #34]
    13c0:	mov	x6, #0x0                   	// #0
    13c4:	mov	x5, #0x0                   	// #0
    13c8:	cbnz	w23, 1440 <_ZnamSt11align_val_t+0xec>
    13cc:	add	x19, x29, #0x48
    13d0:	mov	w7, w23
    13d4:	mov	x4, #0x0                   	// #0
    13d8:	mov	x3, x29
    13dc:	mov	x2, x22
    13e0:	mov	w1, w24
    13e4:	mov	x0, x19
    13e8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    13ec:	mov	x2, x19
    13f0:	mov	x1, x20
    13f4:	mov	x0, x21
    13f8:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    13fc:	cbz	x0, 1460 <_ZnamSt11align_val_t+0x10c>
    1400:	ldp	x19, x20, [sp, #16]
    1404:	ldp	x21, x22, [sp, #32]
    1408:	ldp	x23, x24, [sp, #48]
    140c:	ldp	x29, x30, [sp]
    1410:	add	sp, sp, #0x860
    1414:	ret
    1418:	mov	x4, #0x0                   	// #0
    141c:	mov	x3, #0x0                   	// #0
    1420:	adrp	x2, 0 <__interceptor_mallopt>
    1424:	add	x2, x2, #0x0
    1428:	mov	w1, #0xec                  	// #236
    142c:	adrp	x0, 0 <__interceptor_mallopt>
    1430:	add	x0, x0, #0x0
    1434:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1438:	bl	0 <__lsan_init>
    143c:	b	1394 <_ZnamSt11align_val_t+0x40>
    1440:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1444:	cbz	x0, 1454 <_ZnamSt11align_val_t+0x100>
    1448:	ldr	x5, [x0, #152]
    144c:	ldr	x6, [x0, #144]
    1450:	b	13cc <_ZnamSt11align_val_t+0x78>
    1454:	mov	x6, #0x0                   	// #0
    1458:	mov	x5, #0x0                   	// #0
    145c:	b	13cc <_ZnamSt11align_val_t+0x78>
    1460:	add	x1, x29, #0x48
    1464:	mov	x0, x20
    1468:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>

000000000000146c <_ZnwmSt11align_val_tRKSt9nothrow_t>:
    146c:	sub	sp, sp, #0x860
    1470:	stp	x29, x30, [sp]
    1474:	mov	x29, sp
    1478:	stp	x19, x20, [sp, #16]
    147c:	stp	x21, x22, [sp, #32]
    1480:	stp	x23, x24, [sp, #48]
    1484:	mov	x21, x0
    1488:	adrp	x2, 0 <lsan_init_is_running>
    148c:	ldr	x2, [x2]
    1490:	ldrb	w0, [x2]
    1494:	cbnz	w0, 152c <_ZnwmSt11align_val_tRKSt9nothrow_t+0xc0>
    1498:	mov	x20, x1
    149c:	adrp	x0, 0 <lsan_inited>
    14a0:	ldr	x0, [x0]
    14a4:	ldrb	w0, [x0]
    14a8:	cbz	w0, 154c <_ZnwmSt11align_val_tRKSt9nothrow_t+0xe0>
    14ac:	add	x0, x29, #0x58
    14b0:	str	x0, [x29, #72]
    14b4:	str	wzr, [x29, #80]
    14b8:	str	wzr, [x29, #84]
    14bc:	str	xzr, [x29, #2136]
    14c0:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    14c4:	ldr	x19, [x19]
    14c8:	ldrsw	x24, [x19, #36]
    14cc:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    14d0:	mov	x22, x0
    14d4:	ldrb	w23, [x19, #34]
    14d8:	mov	x6, #0x0                   	// #0
    14dc:	mov	x5, #0x0                   	// #0
    14e0:	cbnz	w23, 1554 <_ZnwmSt11align_val_tRKSt9nothrow_t+0xe8>
    14e4:	add	x19, x29, #0x48
    14e8:	mov	w7, w23
    14ec:	mov	x4, #0x0                   	// #0
    14f0:	mov	x3, x29
    14f4:	mov	x2, x22
    14f8:	mov	w1, w24
    14fc:	mov	x0, x19
    1500:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    1504:	mov	x2, x19
    1508:	mov	x1, x21
    150c:	mov	x0, x20
    1510:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    1514:	ldp	x19, x20, [sp, #16]
    1518:	ldp	x21, x22, [sp, #32]
    151c:	ldp	x23, x24, [sp, #48]
    1520:	ldp	x29, x30, [sp]
    1524:	add	sp, sp, #0x860
    1528:	ret
    152c:	mov	x4, #0x0                   	// #0
    1530:	mov	x3, #0x0                   	// #0
    1534:	adrp	x2, 0 <__interceptor_mallopt>
    1538:	add	x2, x2, #0x0
    153c:	mov	w1, #0xef                  	// #239
    1540:	adrp	x0, 0 <__interceptor_mallopt>
    1544:	add	x0, x0, #0x0
    1548:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    154c:	bl	0 <__lsan_init>
    1550:	b	14ac <_ZnwmSt11align_val_tRKSt9nothrow_t+0x40>
    1554:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1558:	cbz	x0, 1568 <_ZnwmSt11align_val_tRKSt9nothrow_t+0xfc>
    155c:	ldr	x5, [x0, #152]
    1560:	ldr	x6, [x0, #144]
    1564:	b	14e4 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x78>
    1568:	mov	x6, #0x0                   	// #0
    156c:	mov	x5, #0x0                   	// #0
    1570:	b	14e4 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x78>

0000000000001574 <_ZnamSt11align_val_tRKSt9nothrow_t>:
    1574:	sub	sp, sp, #0x860
    1578:	stp	x29, x30, [sp]
    157c:	mov	x29, sp
    1580:	stp	x19, x20, [sp, #16]
    1584:	stp	x21, x22, [sp, #32]
    1588:	stp	x23, x24, [sp, #48]
    158c:	mov	x21, x0
    1590:	adrp	x2, 0 <lsan_init_is_running>
    1594:	ldr	x2, [x2]
    1598:	ldrb	w0, [x2]
    159c:	cbnz	w0, 1634 <_ZnamSt11align_val_tRKSt9nothrow_t+0xc0>
    15a0:	mov	x20, x1
    15a4:	adrp	x0, 0 <lsan_inited>
    15a8:	ldr	x0, [x0]
    15ac:	ldrb	w0, [x0]
    15b0:	cbz	w0, 1654 <_ZnamSt11align_val_tRKSt9nothrow_t+0xe0>
    15b4:	add	x0, x29, #0x58
    15b8:	str	x0, [x29, #72]
    15bc:	str	wzr, [x29, #80]
    15c0:	str	wzr, [x29, #84]
    15c4:	str	xzr, [x29, #2136]
    15c8:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    15cc:	ldr	x19, [x19]
    15d0:	ldrsw	x24, [x19, #36]
    15d4:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    15d8:	mov	x22, x0
    15dc:	ldrb	w23, [x19, #34]
    15e0:	mov	x6, #0x0                   	// #0
    15e4:	mov	x5, #0x0                   	// #0
    15e8:	cbnz	w23, 165c <_ZnamSt11align_val_tRKSt9nothrow_t+0xe8>
    15ec:	add	x19, x29, #0x48
    15f0:	mov	w7, w23
    15f4:	mov	x4, #0x0                   	// #0
    15f8:	mov	x3, x29
    15fc:	mov	x2, x22
    1600:	mov	w1, w24
    1604:	mov	x0, x19
    1608:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    160c:	mov	x2, x19
    1610:	mov	x1, x21
    1614:	mov	x0, x20
    1618:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    161c:	ldp	x19, x20, [sp, #16]
    1620:	ldp	x21, x22, [sp, #32]
    1624:	ldp	x23, x24, [sp, #48]
    1628:	ldp	x29, x30, [sp]
    162c:	add	sp, sp, #0x860
    1630:	ret
    1634:	mov	x4, #0x0                   	// #0
    1638:	mov	x3, #0x0                   	// #0
    163c:	adrp	x2, 0 <__interceptor_mallopt>
    1640:	add	x2, x2, #0x0
    1644:	mov	w1, #0xf2                  	// #242
    1648:	adrp	x0, 0 <__interceptor_mallopt>
    164c:	add	x0, x0, #0x0
    1650:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1654:	bl	0 <__lsan_init>
    1658:	b	15b4 <_ZnamSt11align_val_tRKSt9nothrow_t+0x40>
    165c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1660:	cbz	x0, 1670 <_ZnamSt11align_val_tRKSt9nothrow_t+0xfc>
    1664:	ldr	x5, [x0, #152]
    1668:	ldr	x6, [x0, #144]
    166c:	b	15ec <_ZnamSt11align_val_tRKSt9nothrow_t+0x78>
    1670:	mov	x6, #0x0                   	// #0
    1674:	mov	x5, #0x0                   	// #0
    1678:	b	15ec <_ZnamSt11align_val_tRKSt9nothrow_t+0x78>

000000000000167c <_ZdlPv>:
    167c:	stp	x19, x30, [sp, #-16]!
    1680:	mov	x19, x0
    1684:	adrp	x1, 0 <lsan_init_is_running>
    1688:	ldr	x1, [x1]
    168c:	ldrb	w0, [x1]
    1690:	cbnz	w0, 16b4 <_ZdlPv+0x38>
    1694:	adrp	x0, 0 <lsan_inited>
    1698:	ldr	x0, [x0]
    169c:	ldrb	w0, [x0]
    16a0:	cbz	w0, 16d4 <_ZdlPv+0x58>
    16a4:	mov	x0, x19
    16a8:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    16ac:	ldp	x19, x30, [sp], #16
    16b0:	ret
    16b4:	mov	x4, #0x0                   	// #0
    16b8:	mov	x3, #0x0                   	// #0
    16bc:	adrp	x2, 0 <__interceptor_mallopt>
    16c0:	add	x2, x2, #0x0
    16c4:	mov	w1, #0xf5                  	// #245
    16c8:	adrp	x0, 0 <__interceptor_mallopt>
    16cc:	add	x0, x0, #0x0
    16d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    16d4:	bl	0 <__lsan_init>
    16d8:	b	16a4 <_ZdlPv+0x28>

00000000000016dc <_ZdaPv>:
    16dc:	stp	x19, x30, [sp, #-16]!
    16e0:	mov	x19, x0
    16e4:	adrp	x1, 0 <lsan_init_is_running>
    16e8:	ldr	x1, [x1]
    16ec:	ldrb	w0, [x1]
    16f0:	cbnz	w0, 1714 <_ZdaPv+0x38>
    16f4:	adrp	x0, 0 <lsan_inited>
    16f8:	ldr	x0, [x0]
    16fc:	ldrb	w0, [x0]
    1700:	cbz	w0, 1734 <_ZdaPv+0x58>
    1704:	mov	x0, x19
    1708:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    170c:	ldp	x19, x30, [sp], #16
    1710:	ret
    1714:	mov	x4, #0x0                   	// #0
    1718:	mov	x3, #0x0                   	// #0
    171c:	adrp	x2, 0 <__interceptor_mallopt>
    1720:	add	x2, x2, #0x0
    1724:	mov	w1, #0xf7                  	// #247
    1728:	adrp	x0, 0 <__interceptor_mallopt>
    172c:	add	x0, x0, #0x0
    1730:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1734:	bl	0 <__lsan_init>
    1738:	b	1704 <_ZdaPv+0x28>

000000000000173c <_ZdlPvRKSt9nothrow_t>:
    173c:	stp	x19, x30, [sp, #-16]!
    1740:	mov	x19, x0
    1744:	adrp	x1, 0 <lsan_init_is_running>
    1748:	ldr	x1, [x1]
    174c:	ldrb	w0, [x1]
    1750:	cbnz	w0, 1774 <_ZdlPvRKSt9nothrow_t+0x38>
    1754:	adrp	x0, 0 <lsan_inited>
    1758:	ldr	x0, [x0]
    175c:	ldrb	w0, [x0]
    1760:	cbz	w0, 1794 <_ZdlPvRKSt9nothrow_t+0x58>
    1764:	mov	x0, x19
    1768:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    176c:	ldp	x19, x30, [sp], #16
    1770:	ret
    1774:	mov	x4, #0x0                   	// #0
    1778:	mov	x3, #0x0                   	// #0
    177c:	adrp	x2, 0 <__interceptor_mallopt>
    1780:	add	x2, x2, #0x0
    1784:	mov	w1, #0xf9                  	// #249
    1788:	adrp	x0, 0 <__interceptor_mallopt>
    178c:	add	x0, x0, #0x0
    1790:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1794:	bl	0 <__lsan_init>
    1798:	b	1764 <_ZdlPvRKSt9nothrow_t+0x28>

000000000000179c <_ZdaPvRKSt9nothrow_t>:
    179c:	stp	x19, x30, [sp, #-16]!
    17a0:	mov	x19, x0
    17a4:	adrp	x1, 0 <lsan_init_is_running>
    17a8:	ldr	x1, [x1]
    17ac:	ldrb	w0, [x1]
    17b0:	cbnz	w0, 17d4 <_ZdaPvRKSt9nothrow_t+0x38>
    17b4:	adrp	x0, 0 <lsan_inited>
    17b8:	ldr	x0, [x0]
    17bc:	ldrb	w0, [x0]
    17c0:	cbz	w0, 17f4 <_ZdaPvRKSt9nothrow_t+0x58>
    17c4:	mov	x0, x19
    17c8:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    17cc:	ldp	x19, x30, [sp], #16
    17d0:	ret
    17d4:	mov	x4, #0x0                   	// #0
    17d8:	mov	x3, #0x0                   	// #0
    17dc:	adrp	x2, 0 <__interceptor_mallopt>
    17e0:	add	x2, x2, #0x0
    17e4:	mov	w1, #0xfc                  	// #252
    17e8:	adrp	x0, 0 <__interceptor_mallopt>
    17ec:	add	x0, x0, #0x0
    17f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    17f4:	bl	0 <__lsan_init>
    17f8:	b	17c4 <_ZdaPvRKSt9nothrow_t+0x28>

00000000000017fc <_ZdlPvm>:
    17fc:	stp	x19, x30, [sp, #-16]!
    1800:	mov	x19, x0
    1804:	adrp	x1, 0 <lsan_init_is_running>
    1808:	ldr	x1, [x1]
    180c:	ldrb	w0, [x1]
    1810:	cbnz	w0, 1834 <_ZdlPvm+0x38>
    1814:	adrp	x0, 0 <lsan_inited>
    1818:	ldr	x0, [x0]
    181c:	ldrb	w0, [x0]
    1820:	cbz	w0, 1854 <_ZdlPvm+0x58>
    1824:	mov	x0, x19
    1828:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    182c:	ldp	x19, x30, [sp], #16
    1830:	ret
    1834:	mov	x4, #0x0                   	// #0
    1838:	mov	x3, #0x0                   	// #0
    183c:	adrp	x2, 0 <__interceptor_mallopt>
    1840:	add	x2, x2, #0x0
    1844:	mov	w1, #0xff                  	// #255
    1848:	adrp	x0, 0 <__interceptor_mallopt>
    184c:	add	x0, x0, #0x0
    1850:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1854:	bl	0 <__lsan_init>
    1858:	b	1824 <_ZdlPvm+0x28>

000000000000185c <_ZdaPvm>:
    185c:	stp	x19, x30, [sp, #-16]!
    1860:	mov	x19, x0
    1864:	adrp	x1, 0 <lsan_init_is_running>
    1868:	ldr	x1, [x1]
    186c:	ldrb	w0, [x1]
    1870:	cbnz	w0, 1894 <_ZdaPvm+0x38>
    1874:	adrp	x0, 0 <lsan_inited>
    1878:	ldr	x0, [x0]
    187c:	ldrb	w0, [x0]
    1880:	cbz	w0, 18b4 <_ZdaPvm+0x58>
    1884:	mov	x0, x19
    1888:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    188c:	ldp	x19, x30, [sp], #16
    1890:	ret
    1894:	mov	x4, #0x0                   	// #0
    1898:	mov	x3, #0x0                   	// #0
    189c:	adrp	x2, 0 <__interceptor_mallopt>
    18a0:	add	x2, x2, #0x0
    18a4:	mov	w1, #0x102                 	// #258
    18a8:	adrp	x0, 0 <__interceptor_mallopt>
    18ac:	add	x0, x0, #0x0
    18b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    18b4:	bl	0 <__lsan_init>
    18b8:	b	1884 <_ZdaPvm+0x28>

00000000000018bc <_ZdlPvSt11align_val_t>:
    18bc:	stp	x19, x30, [sp, #-16]!
    18c0:	mov	x19, x0
    18c4:	adrp	x1, 0 <lsan_init_is_running>
    18c8:	ldr	x1, [x1]
    18cc:	ldrb	w0, [x1]
    18d0:	cbnz	w0, 18f4 <_ZdlPvSt11align_val_t+0x38>
    18d4:	adrp	x0, 0 <lsan_inited>
    18d8:	ldr	x0, [x0]
    18dc:	ldrb	w0, [x0]
    18e0:	cbz	w0, 1914 <_ZdlPvSt11align_val_t+0x58>
    18e4:	mov	x0, x19
    18e8:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    18ec:	ldp	x19, x30, [sp], #16
    18f0:	ret
    18f4:	mov	x4, #0x0                   	// #0
    18f8:	mov	x3, #0x0                   	// #0
    18fc:	adrp	x2, 0 <__interceptor_mallopt>
    1900:	add	x2, x2, #0x0
    1904:	mov	w1, #0x105                 	// #261
    1908:	adrp	x0, 0 <__interceptor_mallopt>
    190c:	add	x0, x0, #0x0
    1910:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1914:	bl	0 <__lsan_init>
    1918:	b	18e4 <_ZdlPvSt11align_val_t+0x28>

000000000000191c <_ZdaPvSt11align_val_t>:
    191c:	stp	x19, x30, [sp, #-16]!
    1920:	mov	x19, x0
    1924:	adrp	x1, 0 <lsan_init_is_running>
    1928:	ldr	x1, [x1]
    192c:	ldrb	w0, [x1]
    1930:	cbnz	w0, 1954 <_ZdaPvSt11align_val_t+0x38>
    1934:	adrp	x0, 0 <lsan_inited>
    1938:	ldr	x0, [x0]
    193c:	ldrb	w0, [x0]
    1940:	cbz	w0, 1974 <_ZdaPvSt11align_val_t+0x58>
    1944:	mov	x0, x19
    1948:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    194c:	ldp	x19, x30, [sp], #16
    1950:	ret
    1954:	mov	x4, #0x0                   	// #0
    1958:	mov	x3, #0x0                   	// #0
    195c:	adrp	x2, 0 <__interceptor_mallopt>
    1960:	add	x2, x2, #0x0
    1964:	mov	w1, #0x108                 	// #264
    1968:	adrp	x0, 0 <__interceptor_mallopt>
    196c:	add	x0, x0, #0x0
    1970:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1974:	bl	0 <__lsan_init>
    1978:	b	1944 <_ZdaPvSt11align_val_t+0x28>

000000000000197c <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
    197c:	stp	x19, x30, [sp, #-16]!
    1980:	mov	x19, x0
    1984:	adrp	x1, 0 <lsan_init_is_running>
    1988:	ldr	x1, [x1]
    198c:	ldrb	w0, [x1]
    1990:	cbnz	w0, 19b4 <_ZdlPvSt11align_val_tRKSt9nothrow_t+0x38>
    1994:	adrp	x0, 0 <lsan_inited>
    1998:	ldr	x0, [x0]
    199c:	ldrb	w0, [x0]
    19a0:	cbz	w0, 19d4 <_ZdlPvSt11align_val_tRKSt9nothrow_t+0x58>
    19a4:	mov	x0, x19
    19a8:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    19ac:	ldp	x19, x30, [sp], #16
    19b0:	ret
    19b4:	mov	x4, #0x0                   	// #0
    19b8:	mov	x3, #0x0                   	// #0
    19bc:	adrp	x2, 0 <__interceptor_mallopt>
    19c0:	add	x2, x2, #0x0
    19c4:	mov	w1, #0x10b                 	// #267
    19c8:	adrp	x0, 0 <__interceptor_mallopt>
    19cc:	add	x0, x0, #0x0
    19d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    19d4:	bl	0 <__lsan_init>
    19d8:	b	19a4 <_ZdlPvSt11align_val_tRKSt9nothrow_t+0x28>

00000000000019dc <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
    19dc:	stp	x19, x30, [sp, #-16]!
    19e0:	mov	x19, x0
    19e4:	adrp	x1, 0 <lsan_init_is_running>
    19e8:	ldr	x1, [x1]
    19ec:	ldrb	w0, [x1]
    19f0:	cbnz	w0, 1a14 <_ZdaPvSt11align_val_tRKSt9nothrow_t+0x38>
    19f4:	adrp	x0, 0 <lsan_inited>
    19f8:	ldr	x0, [x0]
    19fc:	ldrb	w0, [x0]
    1a00:	cbz	w0, 1a34 <_ZdaPvSt11align_val_tRKSt9nothrow_t+0x58>
    1a04:	mov	x0, x19
    1a08:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    1a0c:	ldp	x19, x30, [sp], #16
    1a10:	ret
    1a14:	mov	x4, #0x0                   	// #0
    1a18:	mov	x3, #0x0                   	// #0
    1a1c:	adrp	x2, 0 <__interceptor_mallopt>
    1a20:	add	x2, x2, #0x0
    1a24:	mov	w1, #0x10e                 	// #270
    1a28:	adrp	x0, 0 <__interceptor_mallopt>
    1a2c:	add	x0, x0, #0x0
    1a30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1a34:	bl	0 <__lsan_init>
    1a38:	b	1a04 <_ZdaPvSt11align_val_tRKSt9nothrow_t+0x28>

0000000000001a3c <_ZdlPvmSt11align_val_t>:
    1a3c:	stp	x19, x30, [sp, #-16]!
    1a40:	mov	x19, x0
    1a44:	adrp	x1, 0 <lsan_init_is_running>
    1a48:	ldr	x1, [x1]
    1a4c:	ldrb	w0, [x1]
    1a50:	cbnz	w0, 1a74 <_ZdlPvmSt11align_val_t+0x38>
    1a54:	adrp	x0, 0 <lsan_inited>
    1a58:	ldr	x0, [x0]
    1a5c:	ldrb	w0, [x0]
    1a60:	cbz	w0, 1a94 <_ZdlPvmSt11align_val_t+0x58>
    1a64:	mov	x0, x19
    1a68:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    1a6c:	ldp	x19, x30, [sp], #16
    1a70:	ret
    1a74:	mov	x4, #0x0                   	// #0
    1a78:	mov	x3, #0x0                   	// #0
    1a7c:	adrp	x2, 0 <__interceptor_mallopt>
    1a80:	add	x2, x2, #0x0
    1a84:	mov	w1, #0x111                 	// #273
    1a88:	adrp	x0, 0 <__interceptor_mallopt>
    1a8c:	add	x0, x0, #0x0
    1a90:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1a94:	bl	0 <__lsan_init>
    1a98:	b	1a64 <_ZdlPvmSt11align_val_t+0x28>

0000000000001a9c <_ZdaPvmSt11align_val_t>:
    1a9c:	stp	x19, x30, [sp, #-16]!
    1aa0:	mov	x19, x0
    1aa4:	adrp	x1, 0 <lsan_init_is_running>
    1aa8:	ldr	x1, [x1]
    1aac:	ldrb	w0, [x1]
    1ab0:	cbnz	w0, 1ad4 <_ZdaPvmSt11align_val_t+0x38>
    1ab4:	adrp	x0, 0 <lsan_inited>
    1ab8:	ldr	x0, [x0]
    1abc:	ldrb	w0, [x0]
    1ac0:	cbz	w0, 1af4 <_ZdaPvmSt11align_val_t+0x58>
    1ac4:	mov	x0, x19
    1ac8:	bl	0 <_ZN6__lsan9lsan_freeEPv>
    1acc:	ldp	x19, x30, [sp], #16
    1ad0:	ret
    1ad4:	mov	x4, #0x0                   	// #0
    1ad8:	mov	x3, #0x0                   	// #0
    1adc:	adrp	x2, 0 <__interceptor_mallopt>
    1ae0:	add	x2, x2, #0x0
    1ae4:	mov	w1, #0x114                 	// #276
    1ae8:	adrp	x0, 0 <__interceptor_mallopt>
    1aec:	add	x0, x0, #0x0
    1af0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1af4:	bl	0 <__lsan_init>
    1af8:	b	1ac4 <_ZdaPvmSt11align_val_t+0x28>

0000000000001afc <_ZN11__sanitizer14real_sigactionEiPKvPv>:
    1afc:	str	x30, [sp, #-16]!
    1b00:	adrp	x3, 0 <__interceptor_mallopt>
    1b04:	ldr	x3, [x3]
    1b08:	blr	x3
    1b0c:	ldr	x30, [sp], #16
    1b10:	ret

0000000000001b14 <_ZN6__lsan22InitializeInterceptorsEv>:
    1b14:	stp	x19, x30, [sp, #-16]!
    1b18:	adrp	x0, 0 <__interceptor_mallopt>
    1b1c:	ldrb	w0, [x0]
    1b20:	cbnz	w0, 1db0 <_ZN6__lsan22InitializeInterceptorsEv+0x29c>
    1b24:	adrp	x19, 0 <__interceptor_mallopt>
    1b28:	add	x19, x19, #0x0
    1b2c:	mov	w0, #0x1                   	// #1
    1b30:	strb	w0, [x19, #56]
    1b34:	adrp	x3, d34 <__interceptor_signal>
    1b38:	ldr	x3, [x3]
    1b3c:	adrp	x2, d34 <__interceptor_signal>
    1b40:	ldr	x2, [x2]
    1b44:	add	x1, x19, #0x28
    1b48:	adrp	x0, 0 <__interceptor_mallopt>
    1b4c:	add	x0, x0, #0x0
    1b50:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b54:	adrp	x3, d78 <__interceptor_sigaction>
    1b58:	ldr	x3, [x3]
    1b5c:	adrp	x2, d78 <__interceptor_sigaction>
    1b60:	ldr	x2, [x2]
    1b64:	add	x1, x19, #0x30
    1b68:	adrp	x0, 0 <__interceptor_mallopt>
    1b6c:	add	x0, x0, #0x0
    1b70:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b74:	adrp	x3, 8 <__interceptor_malloc>
    1b78:	ldr	x3, [x3]
    1b7c:	adrp	x2, 8 <__interceptor_malloc>
    1b80:	ldr	x2, [x2]
    1b84:	add	x1, x19, #0x40
    1b88:	adrp	x0, 0 <__interceptor_mallopt>
    1b8c:	add	x0, x0, #0x0
    1b90:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b94:	adrp	x3, 108 <__interceptor_cfree>
    1b98:	ldr	x3, [x3]
    1b9c:	adrp	x2, 108 <__interceptor_cfree>
    1ba0:	ldr	x2, [x2]
    1ba4:	add	x1, x19, #0x48
    1ba8:	adrp	x0, 0 <__interceptor_mallopt>
    1bac:	add	x0, x0, #0x0
    1bb0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1bb4:	adrp	x3, 108 <__interceptor_cfree>
    1bb8:	ldr	x3, [x3]
    1bbc:	adrp	x2, 108 <__interceptor_cfree>
    1bc0:	ldr	x2, [x2]
    1bc4:	add	x1, x19, #0x50
    1bc8:	adrp	x0, 0 <__interceptor_mallopt>
    1bcc:	add	x0, x0, #0x0
    1bd0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1bd4:	adrp	x3, 168 <__interceptor_calloc>
    1bd8:	ldr	x3, [x3]
    1bdc:	adrp	x2, 168 <__interceptor_calloc>
    1be0:	ldr	x2, [x2]
    1be4:	add	x1, x19, #0x58
    1be8:	adrp	x0, 0 <__interceptor_mallopt>
    1bec:	add	x0, x0, #0x0
    1bf0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1bf4:	adrp	x3, 2a8 <__interceptor_realloc>
    1bf8:	ldr	x3, [x3]
    1bfc:	adrp	x2, 2a8 <__interceptor_realloc>
    1c00:	ldr	x2, [x2]
    1c04:	add	x1, x19, #0x60
    1c08:	adrp	x0, 0 <__interceptor_mallopt>
    1c0c:	add	x0, x0, #0x0
    1c10:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1c14:	adrp	x3, 5c8 <__interceptor_memalign>
    1c18:	ldr	x3, [x3]
    1c1c:	adrp	x2, 5c8 <__interceptor_memalign>
    1c20:	ldr	x2, [x2]
    1c24:	add	x1, x19, #0x68
    1c28:	adrp	x0, 0 <__interceptor_mallopt>
    1c2c:	add	x0, x0, #0x0
    1c30:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1c34:	adrp	x3, 6d0 <__interceptor___libc_memalign>
    1c38:	ldr	x3, [x3]
    1c3c:	adrp	x2, 6d0 <__interceptor___libc_memalign>
    1c40:	ldr	x2, [x2]
    1c44:	add	x1, x19, #0x70
    1c48:	adrp	x0, 0 <__interceptor_mallopt>
    1c4c:	add	x0, x0, #0x0
    1c50:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1c54:	adrp	x3, 7e8 <__interceptor_aligned_alloc>
    1c58:	ldr	x3, [x3]
    1c5c:	adrp	x2, 7e8 <__interceptor_aligned_alloc>
    1c60:	ldr	x2, [x2]
    1c64:	add	x1, x19, #0x78
    1c68:	adrp	x0, 0 <__interceptor_mallopt>
    1c6c:	add	x0, x0, #0x0
    1c70:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1c74:	adrp	x3, 3b0 <__interceptor_posix_memalign>
    1c78:	ldr	x3, [x3]
    1c7c:	adrp	x2, 3b0 <__interceptor_posix_memalign>
    1c80:	ldr	x2, [x2]
    1c84:	add	x1, x19, #0x80
    1c88:	adrp	x0, 0 <__interceptor_mallopt>
    1c8c:	add	x0, x0, #0x0
    1c90:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1c94:	adrp	x3, 4c8 <__interceptor_valloc>
    1c98:	ldr	x3, [x3]
    1c9c:	adrp	x2, 4c8 <__interceptor_valloc>
    1ca0:	ldr	x2, [x2]
    1ca4:	add	x1, x19, #0x88
    1ca8:	adrp	x0, 0 <__interceptor_mallopt>
    1cac:	add	x0, x0, #0x0
    1cb0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1cb4:	adrp	x3, 96c <__interceptor_pvalloc>
    1cb8:	ldr	x3, [x3]
    1cbc:	adrp	x2, 96c <__interceptor_pvalloc>
    1cc0:	ldr	x2, [x2]
    1cc4:	add	x1, x19, #0x90
    1cc8:	adrp	x0, 0 <__interceptor_mallopt>
    1ccc:	add	x0, x0, #0x0
    1cd0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1cd4:	adrp	x3, 8f0 <__interceptor_malloc_usable_size>
    1cd8:	ldr	x3, [x3]
    1cdc:	adrp	x2, 8f0 <__interceptor_malloc_usable_size>
    1ce0:	ldr	x2, [x2]
    1ce4:	add	x1, x19, #0x98
    1ce8:	adrp	x0, 0 <__interceptor_mallopt>
    1cec:	add	x0, x0, #0x0
    1cf0:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1cf4:	adrp	x3, 950 <__interceptor_mallinfo>
    1cf8:	ldr	x3, [x3]
    1cfc:	adrp	x2, 950 <__interceptor_mallinfo>
    1d00:	ldr	x2, [x2]
    1d04:	add	x1, x19, #0xa0
    1d08:	adrp	x0, 0 <__interceptor_mallopt>
    1d0c:	add	x0, x0, #0x0
    1d10:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1d14:	adrp	x3, 0 <__interceptor_mallopt>
    1d18:	ldr	x3, [x3]
    1d1c:	adrp	x2, 0 <__interceptor_mallopt>
    1d20:	ldr	x2, [x2]
    1d24:	add	x1, x19, #0xa8
    1d28:	adrp	x0, 0 <__interceptor_mallopt>
    1d2c:	add	x0, x0, #0x0
    1d30:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1d34:	adrp	x3, af8 <__interceptor_pthread_create>
    1d38:	ldr	x3, [x3]
    1d3c:	adrp	x2, af8 <__interceptor_pthread_create>
    1d40:	ldr	x2, [x2]
    1d44:	add	x1, x19, #0x10
    1d48:	adrp	x0, 0 <__interceptor_mallopt>
    1d4c:	add	x0, x0, #0x0
    1d50:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1d54:	adrp	x3, c58 <__interceptor_pthread_join>
    1d58:	ldr	x3, [x3]
    1d5c:	adrp	x2, c58 <__interceptor_pthread_join>
    1d60:	ldr	x2, [x2]
    1d64:	add	x1, x19, #0x18
    1d68:	adrp	x0, 0 <__interceptor_mallopt>
    1d6c:	add	x0, x0, #0x0
    1d70:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1d74:	adrp	x3, cf4 <__interceptor__exit>
    1d78:	ldr	x3, [x3]
    1d7c:	adrp	x2, cf4 <__interceptor__exit>
    1d80:	ldr	x2, [x2]
    1d84:	add	x1, x19, #0x20
    1d88:	adrp	x0, 0 <__interceptor_mallopt>
    1d8c:	add	x0, x0, #0x0
    1d90:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1d94:	adrp	x1, 0 <__interceptor_mallopt>
    1d98:	add	x1, x1, #0x0
    1d9c:	add	x0, x19, #0x8
    1da0:	bl	0 <pthread_key_create>
    1da4:	cbnz	w0, 1dd0 <_ZN6__lsan22InitializeInterceptorsEv+0x2bc>
    1da8:	ldp	x19, x30, [sp], #16
    1dac:	ret
    1db0:	mov	x4, #0x0                   	// #0
    1db4:	mov	x3, #0x0                   	// #0
    1db8:	adrp	x2, 0 <__interceptor_mallopt>
    1dbc:	add	x2, x2, #0x0
    1dc0:	mov	w1, #0x4f                  	// #79
    1dc4:	adrp	x0, 0 <__interceptor_mallopt>
    1dc8:	add	x0, x0, #0x0
    1dcc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1dd0:	adrp	x0, 0 <__interceptor_mallopt>
    1dd4:	add	x0, x0, #0x0
    1dd8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1ddc:	bl	0 <_ZN11__sanitizer3DieEv>

lsan_thread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsan13ThreadContext9OnStartedEPv>:
   0:	ldr	x2, [x1]
   4:	str	x2, [x0, #144]
   8:	ldr	x2, [x1, #8]
   c:	str	x2, [x0, #152]
  10:	ldr	x2, [x1, #32]
  14:	str	x2, [x0, #176]
  18:	ldr	x2, [x1, #40]
  1c:	str	x2, [x0, #184]
  20:	ldr	x2, [x1, #16]
  24:	str	x2, [x0, #160]
  28:	ldr	x2, [x1, #24]
  2c:	str	x2, [x0, #168]
  30:	ldr	x1, [x1, #48]
  34:	str	x1, [x0, #192]
  38:	ret

000000000000003c <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv>:
  3c:	ldr	x2, [x0, #40]
  40:	cmp	x1, x2
  44:	b.eq	50 <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv+0x14>  // b.none
  48:	mov	w0, #0x0                   	// #0
  4c:	ret
  50:	ldr	w0, [x0, #112]
  54:	cmp	w0, #0x0
  58:	cset	w0, ne  // ne = any
  5c:	b	4c <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv+0x10>

0000000000000060 <_ZN6__lsan13ThreadContext10OnFinishedEv>:
  60:	str	x30, [sp, #-16]!
  64:	bl	0 <_ZN6__lsan21AllocatorThreadFinishEv>
  68:	bl	0 <_ZN11__sanitizer12DTLS_DestroyEv>
  6c:	ldr	x30, [sp], #16
  70:	ret

0000000000000074 <_ZN6__lsan24InitializeThreadRegistryEv>:
  74:	stp	x19, x30, [sp, #-16]!
  78:	adrp	x19, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  7c:	add	x19, x19, #0x0
  80:	mov	w4, #0x0                   	// #0
  84:	mov	w3, #0x40                  	// #64
  88:	mov	w2, #0x2000                	// #8192
  8c:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  90:	add	x1, x1, #0x0
  94:	mov	x0, x19
  98:	bl	0 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>
  9c:	str	x19, [x19, #208]
  a0:	ldp	x19, x30, [sp], #16
  a4:	ret

00000000000000a8 <_ZN6__lsan13ThreadContextC1Ei>:
  a8:	stp	x19, x30, [sp, #-16]!
  ac:	mov	x19, x0
  b0:	bl	0 <_ZN11__sanitizer17ThreadContextBaseC2Ej>
  b4:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  b8:	add	x0, x0, #0x0
  bc:	str	x0, [x19]
  c0:	str	xzr, [x19, #144]
  c4:	str	xzr, [x19, #152]
  c8:	str	xzr, [x19, #160]
  cc:	str	xzr, [x19, #168]
  d0:	str	xzr, [x19, #176]
  d4:	str	xzr, [x19, #184]
  d8:	str	xzr, [x19, #192]
  dc:	ldp	x19, x30, [sp], #16
  e0:	ret

00000000000000e4 <_ZN6__lsanL19CreateThreadContextEj>:
  e4:	stp	x19, x20, [sp, #-32]!
  e8:	str	x30, [sp, #16]
  ec:	mov	w20, w0
  f0:	mov	w2, #0x0                   	// #0
  f4:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  f8:	add	x1, x1, #0x0
  fc:	mov	x0, #0xc8                  	// #200
 100:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 104:	mov	x19, x0
 108:	mov	w1, w20
 10c:	bl	a8 <_ZN6__lsan13ThreadContextC1Ei>
 110:	mov	x0, x19
 114:	ldr	x30, [sp, #16]
 118:	ldp	x19, x20, [sp], #32
 11c:	ret

0000000000000120 <_ZN6__lsan12ThreadCreateEjmb>:
 120:	str	x30, [sp, #-16]!
 124:	mov	x4, #0x0                   	// #0
 128:	mov	w3, w0
 12c:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 130:	ldr	x0, [x0]
 134:	bl	0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>
 138:	ldr	x30, [sp], #16
 13c:	ret

0000000000000140 <_ZN6__lsan11ThreadStartEjyb>:
 140:	stp	x19, x20, [sp, #-128]!
 144:	stp	x21, x22, [sp, #16]
 148:	str	x30, [sp, #32]
 14c:	mov	w20, w0
 150:	mov	x21, x1
 154:	and	w22, w2, #0xff
 158:	str	xzr, [sp, #64]
 15c:	str	xzr, [sp, #56]
 160:	add	x19, sp, #0x48
 164:	cmp	w0, #0x0
 168:	add	x4, sp, #0x38
 16c:	add	x3, sp, #0x68
 170:	add	x2, sp, #0x40
 174:	mov	x1, x19
 178:	cset	w0, eq  // eq = none
 17c:	bl	0 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>
 180:	ldr	x0, [sp, #72]
 184:	ldr	x1, [sp, #64]
 188:	add	x0, x0, x1
 18c:	str	x0, [sp, #80]
 190:	ldr	x0, [sp, #104]
 194:	ldr	x1, [sp, #56]
 198:	add	x0, x0, x1
 19c:	str	x0, [sp, #112]
 1a0:	add	x1, x19, #0x18
 1a4:	add	x0, x19, #0x10
 1a8:	bl	0 <_ZN6__lsan22GetAllocatorCacheRangeEPmS0_>
 1ac:	bl	0 <_ZN11__sanitizer8DTLS_GetEv>
 1b0:	str	x0, [sp, #120]
 1b4:	mov	x4, x19
 1b8:	mov	w3, w22
 1bc:	mov	x2, x21
 1c0:	mov	w1, w20
 1c4:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 1c8:	ldr	x0, [x0]
 1cc:	bl	0 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>
 1d0:	ldp	x21, x22, [sp, #16]
 1d4:	ldr	x30, [sp, #32]
 1d8:	ldp	x19, x20, [sp], #128
 1dc:	ret

00000000000001e0 <_ZN6__lsan12ThreadFinishEv>:
 1e0:	stp	x19, x30, [sp, #-16]!
 1e4:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 1e8:	ldr	x19, [x0]
 1ec:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 1f0:	mov	w1, w0
 1f4:	mov	x0, x19
 1f8:	bl	0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>
 1fc:	mov	w0, #0xffffffff            	// #-1
 200:	bl	0 <_ZN6__lsan16SetCurrentThreadEj>
 204:	ldp	x19, x30, [sp], #16
 208:	ret

000000000000020c <_ZN6__lsan20CurrentThreadContextEv>:
 20c:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 210:	ldr	x0, [x0]
 214:	cbz	x0, 24c <_ZN6__lsan20CurrentThreadContextEv+0x40>
 218:	stp	x19, x30, [sp, #-16]!
 21c:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 220:	cmn	w0, #0x1
 224:	b.eq	244 <_ZN6__lsan20CurrentThreadContextEv+0x38>  // b.none
 228:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 22c:	ldr	x19, [x0]
 230:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 234:	ldr	x1, [x19, #152]
 238:	ldr	x0, [x1, w0, uxtw #3]
 23c:	ldp	x19, x30, [sp], #16
 240:	ret
 244:	mov	x0, #0x0                   	// #0
 248:	b	23c <_ZN6__lsan20CurrentThreadContextEv+0x30>
 24c:	ret

0000000000000250 <_ZN6__lsan9ThreadTidEm>:
 250:	str	x30, [sp, #-16]!
 254:	mov	x2, x0
 258:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 25c:	add	x1, x1, #0x0
 260:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 264:	ldr	x0, [x0]
 268:	bl	0 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>
 26c:	ldr	x30, [sp], #16
 270:	ret

0000000000000274 <_ZN6__lsan10ThreadJoinEj>:
 274:	str	x30, [sp, #-16]!
 278:	cmn	w0, #0x1
 27c:	b.eq	29c <_ZN6__lsan10ThreadJoinEj+0x28>  // b.none
 280:	mov	w1, w0
 284:	mov	x2, #0x0                   	// #0
 288:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 28c:	ldr	x0, [x0]
 290:	bl	0 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>
 294:	ldr	x30, [sp], #16
 298:	ret
 29c:	mov	x4, #0xffffffff            	// #4294967295
 2a0:	mov	x3, x4
 2a4:	adrp	x2, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 2a8:	add	x2, x2, #0x0
 2ac:	mov	w1, #0x75                  	// #117
 2b0:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 2b4:	add	x0, x0, #0x0
 2b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002bc <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>:
 2bc:	stp	x19, x30, [sp, #-16]!
 2c0:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 2c4:	cbz	w0, 2d0 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv+0x14>
 2c8:	ldp	x19, x30, [sp], #16
 2cc:	ret
 2d0:	bl	20c <_ZN6__lsan20CurrentThreadContextEv>
 2d4:	mov	x19, x0
 2d8:	bl	0 <_ZN11__sanitizer6GetTidEv>
 2dc:	str	x0, [x19, #32]
 2e0:	b	2c8 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv+0xc>

00000000000002e4 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE>:
 2e4:	stp	x19, x20, [sp, #-64]!
 2e8:	stp	x21, x22, [sp, #16]
 2ec:	stp	x23, x24, [sp, #32]
 2f0:	stp	x25, x30, [sp, #48]
 2f4:	mov	x25, x1
 2f8:	mov	x24, x2
 2fc:	mov	x23, x3
 300:	mov	x22, x4
 304:	mov	x21, x5
 308:	mov	x20, x6
 30c:	mov	x19, x7
 310:	mov	x1, x0
 314:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 318:	ldr	x0, [x0]
 31c:	bl	0 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>
 320:	cbz	x0, 374 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE+0x90>
 324:	ldr	x1, [x0, #144]
 328:	str	x1, [x25]
 32c:	ldr	x1, [x0, #152]
 330:	str	x1, [x24]
 334:	ldr	x1, [x0, #176]
 338:	str	x1, [x23]
 33c:	ldr	x1, [x0, #184]
 340:	str	x1, [x22]
 344:	ldr	x1, [x0, #160]
 348:	str	x1, [x21]
 34c:	ldr	x1, [x0, #168]
 350:	str	x1, [x20]
 354:	ldr	x0, [x0, #192]
 358:	str	x0, [x19]
 35c:	mov	w0, #0x1                   	// #1
 360:	ldp	x21, x22, [sp, #16]
 364:	ldp	x23, x24, [sp, #32]
 368:	ldp	x25, x30, [sp, #48]
 36c:	ldp	x19, x20, [sp], #64
 370:	ret
 374:	mov	w0, #0x0                   	// #0
 378:	b	360 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE+0x7c>

000000000000037c <_ZN6__lsan22ForEachExtraStackRangeEyPFvmmPvES0_>:
 37c:	ret

0000000000000380 <_ZN6__lsan18LockThreadRegistryEv>:
 380:	str	x30, [sp, #-16]!
 384:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 388:	ldr	x0, [x0]
 38c:	add	x0, x0, #0x18
 390:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 394:	ldr	x30, [sp], #16
 398:	ret

000000000000039c <_ZN6__lsan20UnlockThreadRegistryEv>:
 39c:	str	x30, [sp, #-16]!
 3a0:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 3a4:	ldr	x0, [x0]
 3a8:	add	x0, x0, #0x18
 3ac:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 3b0:	ldr	x30, [sp], #16
 3b4:	ret

00000000000003b8 <_ZN6__lsan23GetThreadRegistryLockedEv>:
 3b8:	stp	x19, x30, [sp, #-16]!
 3bc:	adrp	x19, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 3c0:	add	x19, x19, #0x0
 3c4:	ldr	x0, [x19, #208]
 3c8:	add	x0, x0, #0x18
 3cc:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 3d0:	ldr	x0, [x19, #208]
 3d4:	ldp	x19, x30, [sp], #16
 3d8:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

sancov_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sancov_default_options>:
   0:	adrp	x0, 0 <__sancov_default_options>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <_ZN8__sancov11SancovFlags11SetDefaultsEv>:
   c:	mov	w1, #0x1                   	// #1
  10:	strb	w1, [x0]
  14:	strb	wzr, [x0, #1]
  18:	ret

000000000000001c <_ZN8__sancov21InitializeSancovFlagsEv>:
  1c:	stp	x19, x20, [sp, #-80]!
  20:	stp	x21, x22, [sp, #16]
  24:	str	x30, [sp, #32]
  28:	adrp	x0, 0 <__sancov_default_options>
  2c:	add	x20, x0, #0x0
  30:	mov	w1, #0x1                   	// #1
  34:	strb	w1, [x0]
  38:	strb	wzr, [x20, #1]
  3c:	add	x19, sp, #0x30
  40:	mov	x0, x19
  44:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
  48:	adrp	x22, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  4c:	ldr	x22, [x22]
  50:	mov	x1, #0x10                  	// #16
  54:	mov	x0, x22
  58:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  5c:	mov	x2, x0
  60:	adrp	x21, 0 <__sancov_default_options>
  64:	add	x21, x21, #0x0
  68:	str	x21, [x0]
  6c:	str	x20, [x0, #8]
  70:	adrp	x3, 0 <__sancov_default_options>
  74:	add	x3, x3, #0x0
  78:	adrp	x1, 0 <__sancov_default_options>
  7c:	add	x1, x1, #0x0
  80:	mov	x0, x19
  84:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  88:	mov	x1, #0x10                  	// #16
  8c:	mov	x0, x22
  90:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  94:	mov	x2, x0
  98:	str	x21, [x0]
  9c:	add	x0, x20, #0x1
  a0:	str	x0, [x2, #8]
  a4:	adrp	x3, 0 <__sancov_default_options>
  a8:	add	x3, x3, #0x0
  ac:	adrp	x1, 0 <__sancov_default_options>
  b0:	add	x1, x1, #0x0
  b4:	mov	x0, x19
  b8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  bc:	bl	0 <__sancov_default_options>
  c0:	mov	x1, x0
  c4:	mov	x0, x19
  c8:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  cc:	adrp	x0, 0 <__sancov_default_options>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  d8:	mov	x1, x0
  dc:	mov	x0, x19
  e0:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  e4:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  e8:	ldrb	w0, [x20, #1]
  ec:	cbnz	w0, 100 <_ZN8__sancov21InitializeSancovFlagsEv+0xe4>
  f0:	ldp	x21, x22, [sp, #16]
  f4:	ldr	x30, [sp, #32]
  f8:	ldp	x19, x20, [sp], #80
  fc:	ret
 100:	add	x0, sp, #0x30
 104:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 108:	b	f0 <_ZN8__sancov21InitializeSancovFlagsEv+0xd4>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	ldr	x20, [x0, #8]
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 38 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x38>
  24:	strb	wzr, [x20]
  28:	mov	w0, #0x1                   	// #1
  2c:	ldr	x30, [sp, #16]
  30:	ldp	x19, x20, [sp], #32
  34:	ret
  38:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  3c:	add	x1, x1, #0x0
  40:	mov	x0, x19
  44:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  48:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  4c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  5c:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  60:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  64:	add	x1, x1, #0x0
  68:	mov	x0, x19
  6c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  70:	cbnz	w0, 80 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x80>
  74:	mov	w0, #0x1                   	// #1
  78:	strb	w0, [x20]
  7c:	b	28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  80:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  84:	add	x1, x1, #0x0
  88:	mov	x0, x19
  8c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  90:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  94:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  98:	add	x1, x1, #0x0
  9c:	mov	x0, x19
  a0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a4:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  a8:	mov	x1, x19
  ac:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b0:	add	x0, x0, #0x0
  b4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  b8:	mov	w0, #0x0                   	// #0
  bc:	b	2c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x2c>

sanitizer_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
   8:	mov	w2, #0x1                   	// #1
   c:	strb	w2, [x1]
  10:	mov	x2, x0
  14:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  18:	ldr	x0, [x0]
  1c:	ldr	x1, [x0]
  20:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000030 <_ZN11__sanitizer18internal_allocatorEv>:
  30:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  34:	add	x0, x0, #0x0
  38:	ldrb	w0, [x0, #8]
  3c:	and	w0, w0, #0xff
  40:	dmb	ish
  44:	cbz	w0, 54 <_ZN11__sanitizer18internal_allocatorEv+0x24>
  48:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  4c:	add	x0, x0, #0x0
  50:	ret
  54:	stp	x19, x20, [sp, #-32]!
  58:	str	x30, [sp, #16]
  5c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  60:	add	x0, x0, #0x0
  64:	add	x0, x0, #0x10
  68:	mov	w2, #0x1                   	// #1
  6c:	ldxrb	w1, [x0]
  70:	stxrb	w3, w2, [x0]
  74:	cbnz	w3, 6c <_ZN11__sanitizer18internal_allocatorEv+0x3c>
  78:	dmb	ish
  7c:	and	w0, w1, #0xff
  80:	cbnz	w0, bc <_ZN11__sanitizer18internal_allocatorEv+0x8c>
  84:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  88:	add	x0, x0, #0x0
  8c:	ldrb	w0, [x0, #8]
  90:	and	w0, w0, #0xff
  94:	cbz	w0, d0 <_ZN11__sanitizer18internal_allocatorEv+0xa0>
  98:	dmb	ish
  9c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  a0:	add	x0, x0, #0x0
  a4:	strb	wzr, [x0, #16]
  a8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  ac:	add	x0, x0, #0x0
  b0:	ldr	x30, [sp, #16]
  b4:	ldp	x19, x20, [sp], #32
  b8:	ret
  bc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  c0:	add	x0, x0, #0x0
  c4:	add	x0, x0, #0x10
  c8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  cc:	b	84 <_ZN11__sanitizer18internal_allocatorEv+0x54>
  d0:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  d4:	add	x19, x19, #0x0
  d8:	mov	x2, #0x80000               	// #524288
  dc:	mov	w1, #0x0                   	// #0
  e0:	mov	x0, x19
  e4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  e8:	add	x19, x19, #0x80, lsl #12
  ec:	strb	wzr, [x19]
  f0:	mov	x2, #0xd80                 	// #3456
  f4:	mov	w1, #0x0                   	// #0
  f8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  fc:	add	x0, x0, #0x0
 100:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 104:	mov	x2, #0x248                 	// #584
 108:	movk	x2, #0x4, lsl #16
 10c:	mov	w1, #0x0                   	// #0
 110:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 114:	add	x0, x0, #0x0
 118:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 11c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 120:	ldr	x0, [x0]
 124:	ldr	x0, [x0]
 128:	cbz	x0, 190 <_ZN11__sanitizer18internal_allocatorEv+0x160>
 12c:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 130:	add	x19, x19, #0x0
 134:	add	x1, x19, #0x80, lsl #12
 138:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 13c:	ldr	x0, [x0]
 140:	ldr	x0, [x0]
 144:	str	x0, [x1, #3520]
 148:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 14c:	add	x0, x0, #0x0
 150:	str	x0, [x1, #3528]
 154:	mov	x2, #0x28                  	// #40
 158:	mov	w1, #0x0                   	// #0
 15c:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 160:	add	x0, x20, #0x0
 164:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 168:	add	x19, x19, #0xc0, lsl #12
 16c:	add	x20, x20, #0x0
 170:	str	x20, [x19, #4104]
 174:	str	x20, [x19, #4112]
 178:	dmb	ish
 17c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 180:	add	x0, x0, #0x0
 184:	mov	w1, #0x1                   	// #1
 188:	strb	w1, [x0, #8]
 18c:	b	98 <_ZN11__sanitizer18internal_allocatorEv+0x68>
 190:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 194:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 198:	ldr	x1, [x1]
 19c:	str	x0, [x1]
 1a0:	b	12c <_ZN11__sanitizer18internal_allocatorEv+0xfc>

00000000000001a4 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>:
 1a4:	stp	x19, x20, [sp, #-32]!
 1a8:	str	x30, [sp, #24]
 1ac:	mov	x20, x0
 1b0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1b4:	ldr	x2, [x0]
 1b8:	sub	x19, x2, #0x1
 1bc:	tst	x2, x19
 1c0:	b.ne	26c <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xc8>  // b.any
 1c4:	add	x1, x1, x19
 1c8:	neg	x2, x2
 1cc:	and	x19, x1, x2
 1d0:	ldr	x0, [x20, #8]
 1d4:	ldr	x1, [x20]
 1d8:	sub	x1, x1, x0
 1dc:	cmp	x1, x19
 1e0:	b.ge	258 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xb4>  // b.tcont
 1e4:	str	x21, [sp, #16]
 1e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1ec:	ldr	x0, [x0]
 1f0:	ldr	x0, [x0]
 1f4:	cbz	x0, 280 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xdc>
 1f8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1fc:	ldr	x0, [x0]
 200:	ldr	x21, [x0]
 204:	cmp	x21, x19
 208:	csel	x21, x21, x19, cs  // cs = hs, nlast
 20c:	mov	w2, #0x0                   	// #0
 210:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 214:	add	x1, x1, #0x0
 218:	mov	x0, x21
 21c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 220:	str	x0, [x20, #8]
 224:	add	x1, x0, x21
 228:	str	x1, [x20]
 22c:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 230:	ldr	x2, [x1]
 234:	cbz	x2, 240 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x9c>
 238:	mov	x1, x21
 23c:	blr	x2
 240:	ldr	x0, [x20, #8]
 244:	ldr	x1, [x20]
 248:	sub	x1, x1, x0
 24c:	cmp	x19, x1
 250:	b.gt	294 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xf0>
 254:	ldr	x21, [sp, #16]
 258:	add	x19, x0, x19
 25c:	str	x19, [x20, #8]
 260:	ldr	x30, [sp, #24]
 264:	ldp	x19, x20, [sp], #32
 268:	ret
 26c:	str	x21, [sp, #16]
 270:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 274:	add	x0, x0, #0x0
 278:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 27c:	bl	0 <_ZN11__sanitizer3DieEv>
 280:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 284:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 288:	ldr	x1, [x1]
 28c:	str	x0, [x1]
 290:	b	1f8 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x54>
 294:	mov	x4, #0x0                   	// #0
 298:	mov	x3, #0x0                   	// #0
 29c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2a0:	add	x2, x2, #0x0
 2a4:	mov	w1, #0xd4                  	// #212
 2a8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2ac:	add	x0, x0, #0x0
 2b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002b4 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm>:
 2b4:	sub	x1, x0, #0x1
 2b8:	tst	x1, x0
 2bc:	b.ne	2d8 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm+0x24>  // b.any
 2c0:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2c4:	ldr	x1, [x2]
 2c8:	cmp	x1, x0
 2cc:	csel	x0, x1, x0, cs  // cs = hs, nlast
 2d0:	str	x0, [x2]
 2d4:	ret
 2d8:	str	x30, [sp, #-16]!
 2dc:	mov	x4, #0x0                   	// #0
 2e0:	mov	x3, #0x0                   	// #0
 2e4:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2e8:	add	x2, x2, #0x0
 2ec:	mov	w1, #0xdb                  	// #219
 2f0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2f4:	add	x0, x0, #0x0
 2f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002fc <_ZN11__sanitizer27SetLowLevelAllocateCallbackEPFvmmE>:
 2fc:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 300:	str	x0, [x1]
 304:	ret

0000000000000308 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>:
 308:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 30c:	ldrb	w0, [x0]
 310:	ands	w0, w0, #0xff
 314:	cset	w0, ne  // ne = any
 318:	ret

000000000000031c <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>:
 31c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 320:	mov	w1, #0x1                   	// #1
 324:	strb	w1, [x0]
 328:	ret

000000000000032c <_ZN11__sanitizer22AllocatorMayReturnNullEv>:
 32c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 330:	add	x0, x0, #0x0
 334:	ldrb	w0, [x0, #32]
 338:	ands	w0, w0, #0xff
 33c:	cset	w0, ne  // ne = any
 340:	ret

0000000000000344 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>:
 344:	and	w0, w0, #0xff
 348:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 34c:	add	x1, x1, #0x0
 350:	strb	w0, [x1, #32]
 354:	ret

0000000000000358 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>:
 358:	str	x30, [sp, #-16]!
 35c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 360:	add	x0, x0, #0x0
 364:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 368:	ldr	x30, [sp], #16
 36c:	ret

0000000000000370 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>:
 370:	cmn	x0, #0x9
 374:	b.hi	440 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xd0>  // b.pmore
 378:	stp	x19, x20, [sp, #-32]!
 37c:	stp	x21, x30, [sp, #16]
 380:	mov	x21, x1
 384:	add	x20, x0, #0x8
 388:	cmp	x2, #0x0
 38c:	mov	x0, #0x8                   	// #8
 390:	csel	x19, x2, x0, ne  // ne = any
 394:	cbz	x1, 3d0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x60>
 398:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 39c:	mov	x3, x19
 3a0:	mov	x2, x20
 3a4:	mov	x1, x21
 3a8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3ac:	cbz	x0, 438 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xc8>
 3b0:	mov	x1, #0xc041                	// #49217
 3b4:	movk	x1, #0xbceb, lsl #16
 3b8:	movk	x1, #0xb03a, lsl #32
 3bc:	movk	x1, #0x6a6c, lsl #48
 3c0:	str	x1, [x0], #8
 3c4:	ldp	x21, x30, [sp, #16]
 3c8:	ldp	x19, x20, [sp], #32
 3cc:	ret
 3d0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3d4:	add	x0, x0, #0x0
 3d8:	add	x0, x0, #0x28
 3dc:	mov	w2, #0x1                   	// #1
 3e0:	ldxrb	w1, [x0]
 3e4:	stxrb	w3, w2, [x0]
 3e8:	cbnz	w3, 3e0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x70>
 3ec:	dmb	ish
 3f0:	and	w0, w1, #0xff
 3f4:	cbnz	w0, 424 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xb4>
 3f8:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 3fc:	mov	x3, x19
 400:	mov	x2, x20
 404:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 408:	add	x1, x1, #0x0
 40c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 410:	dmb	ish
 414:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 418:	add	x1, x1, #0x0
 41c:	strb	wzr, [x1, #40]
 420:	b	3ac <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x3c>
 424:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 428:	add	x0, x0, #0x0
 42c:	add	x0, x0, #0x28
 430:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 434:	b	3f8 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x88>
 438:	mov	x0, x20
 43c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 440:	mov	x0, #0x0                   	// #0
 444:	ret

0000000000000448 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 448:	stp	x19, x20, [sp, #-32]!
 44c:	str	x30, [sp, #16]
 450:	mov	x3, x1
 454:	mov	x1, x2
 458:	cbz	x0, 464 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1c>
 45c:	umulh	x2, x3, x0
 460:	cbnz	x2, 498 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x50>
 464:	mul	x19, x0, x3
 468:	mov	x2, #0x0                   	// #0
 46c:	mov	x0, x19
 470:	bl	370 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 474:	mov	x20, x0
 478:	cbz	x0, 488 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x40>
 47c:	mov	x2, x19
 480:	mov	w1, #0x0                   	// #0
 484:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 488:	mov	x0, x20
 48c:	ldr	x30, [sp, #16]
 490:	ldp	x19, x20, [sp], #32
 494:	ret
 498:	mov	x2, x0
 49c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 4a0:	ldr	x0, [x0]
 4a4:	ldr	x1, [x0]
 4a8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4ac:	add	x0, x0, #0x0
 4b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4b4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000004b8 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 4b8:	stp	x19, x20, [sp, #-32]!
 4bc:	str	x30, [sp, #24]
 4c0:	mov	x19, x1
 4c4:	mov	x20, x2
 4c8:	cbz	x0, 534 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x7c>
 4cc:	cmn	x1, #0x9
 4d0:	b.hi	5e8 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x130>  // b.pmore
 4d4:	str	x21, [sp, #16]
 4d8:	sub	x21, x0, #0x8
 4dc:	add	x19, x1, #0x8
 4e0:	ldur	x4, [x0, #-8]
 4e4:	mov	x0, #0xc041                	// #49217
 4e8:	movk	x0, #0xbceb, lsl #16
 4ec:	movk	x0, #0xb03a, lsl #32
 4f0:	movk	x0, #0x6a6c, lsl #48
 4f4:	cmp	x4, x0
 4f8:	b.ne	548 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x90>  // b.any
 4fc:	cbz	x2, 570 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xb8>
 500:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 504:	mov	x4, #0x8                   	// #8
 508:	mov	x3, x19
 50c:	mov	x2, x21
 510:	mov	x1, x20
 514:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 518:	mov	x1, x0
 51c:	add	x0, x1, #0x8
 520:	cbz	x1, 5e0 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x128>
 524:	ldr	x21, [sp, #16]
 528:	ldr	x30, [sp, #24]
 52c:	ldp	x19, x20, [sp], #32
 530:	ret
 534:	mov	x2, #0x0                   	// #0
 538:	mov	x1, x20
 53c:	mov	x0, x19
 540:	bl	370 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 544:	b	528 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x70>
 548:	mov	x3, #0xc041                	// #49217
 54c:	movk	x3, #0xbceb, lsl #16
 550:	movk	x3, #0xb03a, lsl #32
 554:	movk	x3, #0x6a6c, lsl #48
 558:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 55c:	add	x2, x2, #0x0
 560:	mov	w1, #0xa5                  	// #165
 564:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 568:	add	x0, x0, #0x0
 56c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 570:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 574:	add	x0, x0, #0x0
 578:	add	x0, x0, #0x28
 57c:	mov	w2, #0x1                   	// #1
 580:	ldxrb	w1, [x0]
 584:	stxrb	w3, w2, [x0]
 588:	cbnz	w3, 580 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xc8>
 58c:	dmb	ish
 590:	and	w0, w1, #0xff
 594:	cbnz	w0, 5cc <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x114>
 598:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 59c:	mov	x4, #0x8                   	// #8
 5a0:	mov	x3, x19
 5a4:	mov	x2, x21
 5a8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5ac:	add	x1, x1, #0x0
 5b0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5b4:	mov	x1, x0
 5b8:	dmb	ish
 5bc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5c0:	add	x0, x0, #0x0
 5c4:	strb	wzr, [x0, #40]
 5c8:	b	51c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x64>
 5cc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5d0:	add	x0, x0, #0x0
 5d4:	add	x0, x0, #0x28
 5d8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5dc:	b	598 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xe0>
 5e0:	mov	x0, x19
 5e4:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5e8:	mov	x0, #0x0                   	// #0
 5ec:	b	528 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x70>

00000000000005f0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 5f0:	cbz	x0, 6d0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xe0>
 5f4:	stp	x19, x20, [sp, #-32]!
 5f8:	str	x30, [sp, #16]
 5fc:	mov	x19, x1
 600:	sub	x20, x0, #0x8
 604:	ldur	x4, [x0, #-8]
 608:	mov	x1, #0xc041                	// #49217
 60c:	movk	x1, #0xbceb, lsl #16
 610:	movk	x1, #0xb03a, lsl #32
 614:	movk	x1, #0x6a6c, lsl #48
 618:	cmp	x4, x1
 61c:	b.ne	644 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x54>  // b.any
 620:	stur	xzr, [x0, #-8]
 624:	cbz	x19, 66c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x7c>
 628:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 62c:	mov	x2, x20
 630:	mov	x1, x19
 634:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 638:	ldr	x30, [sp, #16]
 63c:	ldp	x19, x20, [sp], #32
 640:	ret
 644:	mov	x3, #0xc041                	// #49217
 648:	movk	x3, #0xbceb, lsl #16
 64c:	movk	x3, #0xb03a, lsl #32
 650:	movk	x3, #0x6a6c, lsl #48
 654:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 658:	add	x2, x2, #0x0
 65c:	mov	w1, #0xbd                  	// #189
 660:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 664:	add	x0, x0, #0x0
 668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 66c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 670:	add	x0, x0, #0x0
 674:	add	x0, x0, #0x28
 678:	mov	w2, #0x1                   	// #1
 67c:	ldxrb	w1, [x0]
 680:	stxrb	w3, w2, [x0]
 684:	cbnz	w3, 67c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x8c>
 688:	dmb	ish
 68c:	and	w0, w1, #0xff
 690:	cbnz	w0, 6bc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xcc>
 694:	bl	30 <_ZN11__sanitizer18internal_allocatorEv>
 698:	mov	x2, x20
 69c:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6a0:	add	x1, x1, #0x0
 6a4:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6a8:	dmb	ish
 6ac:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6b0:	add	x0, x0, #0x0
 6b4:	strb	wzr, [x0, #40]
 6b8:	b	638 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x48>
 6bc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6c0:	add	x0, x0, #0x0
 6c4:	add	x0, x0, #0x28
 6c8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6cc:	b	694 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xa4>
 6d0:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x21, x0
  10:	ldr	x0, [x3, #8]
  14:	cbz	x0, 8c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0x8c>
  18:	mov	x19, x2
  1c:	mov	x20, x3
  20:	add	x22, x2, #0x2, lsl #12
  24:	add	x22, x22, #0x1
  28:	lsl	x22, x22, #6
  2c:	add	x0, x21, x22
  30:	mov	w2, #0x1                   	// #1
  34:	ldxrb	w1, [x0]
  38:	stxrb	w3, w2, [x0]
  3c:	cbnz	w3, 34 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0x34>
  40:	dmb	ish
  44:	and	w1, w1, #0xff
  48:	cbnz	w1, ac <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0xac>
  4c:	add	x1, x21, x19, lsl #6
  50:	add	x0, x1, #0x80, lsl #12
  54:	ldr	x0, [x0, #72]
  58:	cbnz	x0, b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0xb4>
  5c:	str	xzr, [x20]
  60:	add	x19, x1, #0x80, lsl #12
  64:	str	x20, [x19, #88]
  68:	str	x20, [x19, #80]
  6c:	mov	x0, #0x1                   	// #1
  70:	str	x0, [x19, #72]
  74:	dmb	ish
  78:	strb	wzr, [x21, x22]
  7c:	ldp	x21, x22, [sp, #16]
  80:	ldr	x30, [sp, #32]
  84:	ldp	x19, x20, [sp], #48
  88:	ret
  8c:	mov	x4, #0x0                   	// #0
  90:	mov	x3, #0x0                   	// #0
  94:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE>
  98:	add	x2, x2, #0x0
  9c:	mov	w1, #0xad                  	// #173
  a0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE>
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ac:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE>
  b0:	b	4c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0x4c>
  b4:	add	x1, x1, #0x80, lsl #12
  b8:	ldr	x0, [x1, #80]
  bc:	str	x0, [x20]
  c0:	str	x20, [x1, #80]
  c4:	ldr	x0, [x1, #72]
  c8:	add	x0, x0, #0x1
  cc:	str	x0, [x1, #72]
  d0:	b	74 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE+0x74>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>:
   0:	sub	sp, sp, #0x210
   4:	stp	x19, x20, [sp]
   8:	stp	x21, x22, [sp, #16]
   c:	stp	x23, x24, [sp, #32]
  10:	str	x30, [sp, #80]
  14:	str	x0, [sp, #112]
  18:	mov	x19, x1
  1c:	mov	x23, x2
  20:	mov	x21, x3
  24:	str	x4, [sp, #104]
  28:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
  2c:	ldr	x2, [x0]
  30:	mov	x1, #0x100000              	// #1048576
  34:	mov	x0, x1
  38:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  3c:	cbz	x0, 57c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x57c>
  40:	stp	x25, x26, [sp, #48]
  44:	stp	x27, x28, [sp, #64]
  48:	mov	x20, x0
  4c:	ldr	x0, [x19, #24]
  50:	add	x0, x0, #0x100, lsl #12
  54:	str	x0, [x19, #24]
  58:	tst	x20, #0xfffff
  5c:	b.ne	140 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x140>  // b.any
  60:	lsr	x19, x20, #20
  64:	mov	x0, #0xfffffff             	// #268435455
  68:	cmp	x0, x20, lsr #20
  6c:	b.cc	160 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x160>  // b.lo, b.ul, b.last
  70:	ldrb	w22, [sp, #104]
  74:	lsr	x24, x19, #12
  78:	ldr	x0, [sp, #112]
  7c:	ldr	x0, [x0, x24, lsl #3]
  80:	dmb	ish
  84:	mov	x1, x0
  88:	cbz	x0, 180 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x180>
  8c:	and	x19, x19, #0xfff
  90:	ldrb	w0, [x1, x19]
  94:	str	x0, [sp, #136]
  98:	cbnz	x0, 1fc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1fc>
  9c:	strb	w22, [x1, x19]
  a0:	ldr	x0, [sp, #104]
  a4:	cmp	x0, #0x35
  a8:	b.eq	21c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x21c>  // b.none
  ac:	lsl	x26, x0, #4
  b0:	cmp	x0, #0x10
  b4:	b.ls	d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xd8>  // b.plast
  b8:	ldr	x0, [sp, #104]
  bc:	sub	x1, x0, #0x10
  c0:	lsr	x26, x1, #2
  c4:	mov	x0, #0x100                 	// #256
  c8:	lsl	x0, x0, x26
  cc:	lsr	x26, x0, #2
  d0:	and	x1, x1, #0x3
  d4:	madd	x26, x26, x1, x0
  d8:	mov	x27, #0x100000              	// #1048576
  dc:	udiv	x27, x27, x26
  e0:	cbz	x26, 598 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x598>
  e4:	mov	w0, #0x4000                	// #16384
  e8:	udiv	w0, w0, w26
  ec:	mov	w22, w0
  f0:	cmp	w0, #0x40
  f4:	mov	x0, #0x40                  	// #64
  f8:	csel	x22, x22, x0, ls  // ls = plast
  fc:	cmp	x22, #0x0
 100:	csinc	x22, x22, xzr, ne  // ne = any
 104:	cmp	x22, #0x3e
 108:	mov	x0, #0x3e                  	// #62
 10c:	csel	x22, x22, x0, ls  // ls = plast
 110:	madd	x27, x27, x26, x20
 114:	cmp	x20, x27
 118:	b.cs	5a8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x5a8>  // b.hs, b.nlast
 11c:	str	x20, [sp, #144]
 120:	mov	x0, #0x0                   	// #0
 124:	mov	x19, #0x1                   	// #1
 128:	add	x28, sp, #0x90
 12c:	add	x25, sp, #0x210
 130:	ldr	x1, [sp, #104]
 134:	add	x1, x23, x1, lsl #10
 138:	str	x1, [sp, #96]
 13c:	b	370 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x370>
 140:	mov	x4, #0x0                   	// #0
 144:	mov	x3, #0x0                   	// #0
 148:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 14c:	add	x2, x2, #0x0
 150:	mov	w1, #0x126                 	// #294
 154:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 158:	add	x0, x0, #0x0
 15c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 160:	mov	x4, #0x10000000            	// #268435456
 164:	mov	x3, x19
 168:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 16c:	add	x2, x2, #0x0
 170:	mov	w1, #0x116                 	// #278
 174:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 178:	add	x0, x0, #0x0
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	ldr	x0, [sp, #112]
 184:	add	x0, x0, #0x80, lsl #12
 188:	mov	w2, #0x1                   	// #1
 18c:	ldxrb	w1, [x0]
 190:	stxrb	w3, w2, [x0]
 194:	cbnz	w3, 18c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x18c>
 198:	dmb	ish
 19c:	and	w1, w1, #0xff
 1a0:	cbnz	w1, 1cc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1cc>
 1a4:	ldr	x0, [sp, #112]
 1a8:	ldr	x0, [x0, x24, lsl #3]
 1ac:	dmb	ish
 1b0:	mov	x1, x0
 1b4:	cbz	x0, 1d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1d4>
 1b8:	dmb	ish
 1bc:	ldr	x0, [sp, #112]
 1c0:	add	x0, x0, #0x80, lsl #12
 1c4:	strb	wzr, [x0]
 1c8:	b	8c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x8c>
 1cc:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 1d0:	b	1a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1a4>
 1d4:	mov	w2, #0x0                   	// #0
 1d8:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, #0x1000                	// #4096
 1e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1e8:	mov	x1, x0
 1ec:	dmb	ish
 1f0:	ldr	x0, [sp, #112]
 1f4:	str	x1, [x0, x24, lsl #3]
 1f8:	b	1b8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1b8>
 1fc:	mov	x4, x0
 200:	mov	x3, #0x0                   	// #0
 204:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 208:	add	x2, x2, #0x0
 20c:	mov	w1, #0x42                  	// #66
 210:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 214:	add	x0, x0, #0x0
 218:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 21c:	mov	x26, #0x200                 	// #512
 220:	mov	x27, #0x800                 	// #2048
 224:	b	e4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xe4>
 228:	ldr	x0, [sp, #96]
 22c:	ldr	x24, [x0, #24]
 230:	cbnz	x24, 244 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x244>
 234:	ldr	x0, [x19]
 238:	cbz	x0, 2e4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2e4>
 23c:	str	xzr, [x0, #8]
 240:	b	324 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x324>
 244:	cmp	x24, #0x35
 248:	b.hi	2ac <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2ac>  // b.pmore
 24c:	lsl	x0, x24, #10
 250:	str	x0, [sp, #128]
 254:	add	x1, x23, x0
 258:	ldr	x0, [x23, x0]
 25c:	cbz	x0, 2cc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2cc>
 260:	ldr	x1, [sp, #128]
 264:	ldr	x2, [x23, x1]
 268:	sub	x0, x2, #0x1
 26c:	str	x0, [x23, x1]
 270:	lsl	x1, x24, #7
 274:	add	x0, x1, x0
 278:	add	x0, x0, #0x4
 27c:	ldr	x0, [x23, x0, lsl #3]
 280:	add	x1, x1, x2
 284:	add	x1, x1, #0x2
 288:	ldr	x1, [x23, x1, lsl #3]
 28c:	prfm	pldl1keep, [x1]
 290:	ldr	x3, [sp, #120]
 294:	ldr	x1, [x3, #16]
 298:	add	x24, x23, x24, lsl #10
 29c:	ldr	x2, [x24, #16]
 2a0:	add	x1, x1, x2
 2a4:	str	x1, [x3, #16]
 2a8:	b	238 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x238>
 2ac:	mov	x4, #0x36                  	// #54
 2b0:	mov	x3, x24
 2b4:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 2b8:	add	x2, x2, #0x0
 2bc:	mov	w1, #0xa0                  	// #160
 2c0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 2c4:	add	x0, x0, #0x0
 2c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2cc:	mov	x3, x24
 2d0:	ldr	x2, [sp, #112]
 2d4:	mov	x0, x23
 2d8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 2dc:	and	w0, w0, #0xff
 2e0:	cbnz	w0, 260 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x260>
 2e4:	mov	w0, #0x0                   	// #0
 2e8:	ldp	x25, x26, [sp, #48]
 2ec:	ldp	x27, x28, [sp, #64]
 2f0:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 2f4:	str	xzr, [x0]
 2f8:	ldr	x2, [x21, #24]
 2fc:	str	x0, [x2]
 300:	str	x0, [x21, #24]
 304:	ldr	x0, [x21, #8]
 308:	add	x0, x0, #0x1
 30c:	str	x0, [x21, #8]
 310:	mov	x0, #0x0                   	// #0
 314:	add	x19, x19, #0x8
 318:	cmp	x25, x19
 31c:	b.eq	368 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x368>  // b.none
 320:	cbz	x0, 228 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x228>
 324:	ldr	x3, [x19]
 328:	ldr	x1, [x0, #8]
 32c:	add	x2, x1, #0x1
 330:	str	x2, [x0, #8]
 334:	add	x1, x1, #0x2
 338:	str	x3, [x0, x1, lsl #3]
 33c:	cmp	x22, x2
 340:	b.ne	314 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x314>  // b.any
 344:	ldr	x1, [x21, #8]
 348:	cbnz	x1, 2f4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2f4>
 34c:	str	xzr, [x0]
 350:	str	x0, [x21, #24]
 354:	str	x0, [x21, #16]
 358:	mov	x0, #0x1                   	// #1
 35c:	str	x0, [x21, #8]
 360:	mov	x0, #0x0                   	// #0
 364:	b	314 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x314>
 368:	ldr	x1, [sp, #136]
 36c:	mov	x19, x1
 370:	add	x20, x20, x26
 374:	cmp	x20, x27
 378:	b.cs	3a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3a0>  // b.hs, b.nlast
 37c:	add	x1, x19, #0x1
 380:	str	x20, [x28, x19, lsl #3]
 384:	cmp	x19, #0x2f
 388:	b.ne	36c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x36c>  // b.any
 38c:	add	x19, sp, #0x90
 390:	add	x1, x23, #0xd, lsl #12
 394:	add	x1, x1, #0x800
 398:	str	x1, [sp, #120]
 39c:	b	320 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x320>
 3a0:	cbnz	x19, 3d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d8>
 3a4:	cbz	x0, 5b8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x5b8>
 3a8:	ldr	x1, [x0, #8]
 3ac:	cbz	x1, 530 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x530>
 3b0:	ldr	x1, [x21, #8]
 3b4:	cbnz	x1, 550 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x550>
 3b8:	str	xzr, [x0]
 3bc:	str	x0, [x21, #24]
 3c0:	str	x0, [x21, #16]
 3c4:	mov	x0, #0x1                   	// #1
 3c8:	str	x0, [x21, #8]
 3cc:	ldp	x25, x26, [sp, #48]
 3d0:	ldp	x27, x28, [sp, #64]
 3d4:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 3d8:	mov	x20, #0x1                   	// #1
 3dc:	ldr	x1, [sp, #104]
 3e0:	add	x26, x23, x1, lsl #10
 3e4:	add	x28, x23, #0xd, lsl #12
 3e8:	add	x28, x28, #0x800
 3ec:	add	x24, sp, #0x90
 3f0:	b	4e4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4e4>
 3f4:	ldr	x25, [x26, #24]
 3f8:	cbnz	x25, 410 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x410>
 3fc:	add	x0, x24, x20, lsl #3
 400:	ldur	x0, [x0, #-8]
 404:	cbz	x0, 4a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4a4>
 408:	str	xzr, [x0, #8]
 40c:	b	4e8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4e8>
 410:	cmp	x25, #0x35
 414:	b.hi	46c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x46c>  // b.pmore
 418:	lsl	x27, x25, #10
 41c:	add	x1, x23, x27
 420:	ldr	x0, [x23, x27]
 424:	cbz	x0, 48c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x48c>
 428:	ldr	x2, [x23, x27]
 42c:	sub	x0, x2, #0x1
 430:	str	x0, [x23, x27]
 434:	lsl	x1, x25, #7
 438:	add	x0, x1, x0
 43c:	add	x0, x0, #0x4
 440:	ldr	x0, [x23, x0, lsl #3]
 444:	add	x1, x1, x2
 448:	add	x1, x1, #0x2
 44c:	ldr	x1, [x23, x1, lsl #3]
 450:	prfm	pldl1keep, [x1]
 454:	ldr	x1, [x28, #16]
 458:	add	x25, x23, x25, lsl #10
 45c:	ldr	x2, [x25, #16]
 460:	add	x1, x1, x2
 464:	str	x1, [x28, #16]
 468:	b	404 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x404>
 46c:	mov	x4, #0x36                  	// #54
 470:	mov	x3, x25
 474:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 478:	add	x2, x2, #0x0
 47c:	mov	w1, #0xa0                  	// #160
 480:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 484:	add	x0, x0, #0x0
 488:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 48c:	mov	x3, x25
 490:	ldr	x2, [sp, #112]
 494:	mov	x0, x23
 498:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 49c:	and	w0, w0, #0xff
 4a0:	cbnz	w0, 428 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x428>
 4a4:	mov	w0, #0x0                   	// #0
 4a8:	ldp	x25, x26, [sp, #48]
 4ac:	ldp	x27, x28, [sp, #64]
 4b0:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 4b4:	str	xzr, [x0]
 4b8:	ldr	x2, [x21, #24]
 4bc:	str	x0, [x2]
 4c0:	str	x0, [x21, #24]
 4c4:	ldr	x0, [x21, #8]
 4c8:	add	x0, x0, #0x1
 4cc:	str	x0, [x21, #8]
 4d0:	mov	x0, #0x0                   	// #0
 4d4:	add	x1, x20, #0x1
 4d8:	cmp	x19, x20
 4dc:	b.eq	3a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3a4>  // b.none
 4e0:	mov	x20, x1
 4e4:	cbz	x0, 3f4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3f4>
 4e8:	add	x1, x24, x20, lsl #3
 4ec:	ldur	x3, [x1, #-8]
 4f0:	ldr	x1, [x0, #8]
 4f4:	add	x2, x1, #0x1
 4f8:	str	x2, [x0, #8]
 4fc:	add	x1, x1, #0x2
 500:	str	x3, [x0, x1, lsl #3]
 504:	cmp	x22, x2
 508:	b.ne	4d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4d4>  // b.any
 50c:	ldr	x1, [x21, #8]
 510:	cbnz	x1, 4b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4b4>
 514:	str	xzr, [x0]
 518:	str	x0, [x21, #24]
 51c:	str	x0, [x21, #16]
 520:	mov	x0, #0x1                   	// #1
 524:	str	x0, [x21, #8]
 528:	mov	x0, #0x0                   	// #0
 52c:	b	4d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4d4>
 530:	mov	x4, #0x0                   	// #0
 534:	mov	x3, #0x0                   	// #0
 538:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 53c:	add	x2, x2, #0x0
 540:	mov	w1, #0x169                 	// #361
 544:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 548:	add	x0, x0, #0x0
 54c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 550:	str	xzr, [x0]
 554:	ldr	x2, [x21, #24]
 558:	str	x0, [x2]
 55c:	str	x0, [x21, #24]
 560:	ldr	x0, [x21, #8]
 564:	add	x0, x0, #0x1
 568:	str	x0, [x21, #8]
 56c:	mov	w0, #0x1                   	// #1
 570:	ldp	x25, x26, [sp, #48]
 574:	ldp	x27, x28, [sp, #64]
 578:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 57c:	mov	w0, #0x0                   	// #0
 580:	ldp	x19, x20, [sp]
 584:	ldp	x21, x22, [sp, #16]
 588:	ldp	x23, x24, [sp, #32]
 58c:	ldr	x30, [sp, #80]
 590:	add	sp, sp, #0x210
 594:	ret
 598:	mov	w0, #0x1                   	// #1
 59c:	ldp	x25, x26, [sp, #48]
 5a0:	ldp	x27, x28, [sp, #64]
 5a4:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 5a8:	mov	w0, #0x1                   	// #1
 5ac:	ldp	x25, x26, [sp, #48]
 5b0:	ldp	x27, x28, [sp, #64]
 5b4:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>
 5b8:	mov	w0, #0x1                   	// #1
 5bc:	ldp	x25, x26, [sp, #48]
 5c0:	ldp	x27, x28, [sp, #64]
 5c4:	b	580 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x580>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x30, [sp, #48]
  10:	mov	x21, x0
  14:	mov	x24, x1
  18:	mov	x25, x2
  1c:	mov	x19, x3
  20:	add	x22, x3, #0x2, lsl #12
  24:	add	x22, x22, #0x1
  28:	lsl	x22, x22, #6
  2c:	add	x23, x0, x22
  30:	mov	w1, #0x1                   	// #1
  34:	ldxrb	w0, [x23]
  38:	stxrb	w2, w1, [x23]
  3c:	cbnz	w2, 34 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x34>
  40:	dmb	ish
  44:	and	w0, w0, #0xff
  48:	cbnz	w0, 94 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x94>
  4c:	add	x20, x21, x19, lsl #6
  50:	add	x0, x20, #0x80, lsl #12
  54:	ldr	x4, [x0, #72]
  58:	cbnz	x4, d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xd4>
  5c:	mov	x4, x19
  60:	mov	x3, x23
  64:	mov	x2, x25
  68:	mov	x1, x24
  6c:	mov	x0, x21
  70:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  74:	and	w0, w0, #0xff
  78:	cbz	w0, cc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xcc>
  7c:	add	x0, x20, #0x80, lsl #12
  80:	ldr	x4, [x0, #72]
  84:	cbz	x4, a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xa0>
  88:	add	x0, x20, #0x80, lsl #12
  8c:	ldr	x0, [x0, #80]
  90:	b	dc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xdc>
  94:	mov	x0, x23
  98:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  9c:	b	4c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x4c>
  a0:	mov	x3, #0x0                   	// #0
  a4:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  a8:	add	x2, x2, #0x0
  ac:	mov	w1, #0x40                  	// #64
  b0:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  b4:	add	x0, x0, #0x0
  b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  bc:	add	x19, x21, x19, lsl #6
  c0:	add	x19, x19, #0x80, lsl #12
  c4:	str	xzr, [x19, #88]
  c8:	b	ec <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xec>
  cc:	mov	x0, #0x0                   	// #0
  d0:	b	f8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xf8>
  d4:	add	x0, x20, #0x80, lsl #12
  d8:	ldr	x0, [x0, #80]
  dc:	ldr	x1, [x0]
  e0:	add	x2, x20, #0x80, lsl #12
  e4:	str	x1, [x2, #80]
  e8:	cbz	x1, bc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xbc>
  ec:	add	x20, x20, #0x80, lsl #12
  f0:	sub	x4, x4, #0x1
  f4:	str	x4, [x20, #72]
  f8:	dmb	ish
  fc:	strb	wzr, [x21, x22]
 100:	ldp	x21, x22, [sp, #16]
 104:	ldp	x23, x24, [sp, #32]
 108:	ldp	x25, x30, [sp, #48]
 10c:	ldp	x19, x20, [sp], #64
 110:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x30, [sp, #32]
   c:	mov	x19, x0
  10:	mov	x21, x1
  14:	mov	x22, x2
  18:	mov	x20, x3
  1c:	ldr	x2, [x1, #8]
  20:	cbz	x2, 94 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x94>
  24:	mov	x3, x20
  28:	mov	x2, x19
  2c:	add	x1, x19, #0xd, lsl #12
  30:	add	x1, x1, #0x800
  34:	mov	x0, x22
  38:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  3c:	mov	x23, x0
  40:	cbz	x0, 2a0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2a0>
  44:	ldr	x2, [x0, #8]
  48:	mov	x4, #0x0                   	// #0
  4c:	add	x3, x0, #0x10
  50:	add	x0, x21, #0x20
  54:	cbz	x2, 140 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x140>
  58:	ldr	x1, [x3, x4, lsl #3]
  5c:	str	x1, [x0, x4, lsl #3]
  60:	add	x4, x4, #0x1
  64:	cmp	x2, x4
  68:	b.ne	58 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x58>  // b.any
  6c:	ldr	x0, [x23, #8]
  70:	str	x0, [x21]
  74:	add	x20, x19, x20, lsl #10
  78:	ldr	x20, [x20, #24]
  7c:	mov	w0, #0x1                   	// #1
  80:	cbnz	x20, 15c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x15c>
  84:	ldp	x21, x22, [sp, #16]
  88:	ldp	x23, x30, [sp, #32]
  8c:	ldp	x19, x20, [sp], #48
  90:	ret
  94:	add	x6, x0, #0x408
  98:	mov	x5, #0x1                   	// #1
  9c:	mov	x3, #0x40                  	// #64
  a0:	mov	x14, #0x200                 	// #512
  a4:	mov	x13, x2
  a8:	mov	x8, #0x14                  	// #20
  ac:	mov	w11, #0x4000                	// #16384
  b0:	mov	x10, x5
  b4:	mov	x9, #0x3e                  	// #62
  b8:	mov	x12, #0x100                 	// #256
  bc:	b	128 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x128>
  c0:	sub	x1, x5, #0x10
  c4:	lsr	x0, x1, #2
  c8:	lsl	x0, x12, x0
  cc:	lsr	x7, x0, #2
  d0:	and	x1, x1, #0x3
  d4:	madd	x7, x7, x1, x0
  d8:	cbz	x7, 2c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2c0>
  dc:	udiv	w0, w11, w7
  e0:	mov	w4, w0
  e4:	cmp	w0, #0x40
  e8:	csel	x4, x4, x3, ls  // ls = plast
  ec:	cmp	x4, #0x0
  f0:	csel	x4, x4, x10, ne  // ne = any
  f4:	cmp	x4, #0x3e
  f8:	csel	x4, x4, x9, ls  // ls = plast
  fc:	lsl	x0, x4, #1
 100:	str	x0, [x6]
 104:	str	x7, [x6, #8]
 108:	add	x4, x4, #0x2
 10c:	cmp	x7, x4, lsl #3
 110:	csel	x0, x2, x8, cs  // cs = hs, nlast
 114:	str	x0, [x6, #16]
 118:	add	x5, x5, #0x1
 11c:	add	x6, x6, #0x400
 120:	cmp	x5, #0x36
 124:	b.eq	24 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x24>  // b.none
 128:	cmp	x5, #0x35
 12c:	b.eq	2e8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2e8>  // b.none
 130:	lsl	x7, x5, #4
 134:	cmp	x5, #0x10
 138:	b.hi	c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xc0>  // b.pmore
 13c:	b	d8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xd8>
 140:	mov	x3, #0x0                   	// #0
 144:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 148:	add	x2, x2, #0x0
 14c:	mov	w1, #0xf6                  	// #246
 150:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 154:	add	x0, x0, #0x0
 158:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 15c:	cmp	x20, #0x35
 160:	b.hi	1c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1c0>  // b.pmore
 164:	lsl	x21, x20, #10
 168:	add	x1, x19, x21
 16c:	ldr	x6, [x1, #8]
 170:	cbz	x6, 1e0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1e0>
 174:	ldr	x2, [x19, x21]
 178:	ldr	x0, [x1, #8]
 17c:	cmp	x2, x0
 180:	b.eq	28c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28c>  // b.none
 184:	ldr	x0, [x19, x21]
 188:	add	x1, x0, #0x1
 18c:	str	x1, [x19, x21]
 190:	add	x0, x0, x20, lsl #7
 194:	add	x0, x0, #0x4
 198:	str	x23, [x19, x0, lsl #3]
 19c:	add	x1, x19, #0xd, lsl #12
 1a0:	add	x1, x1, #0x800
 1a4:	ldr	x0, [x1, #16]
 1a8:	add	x19, x19, x20, lsl #10
 1ac:	ldr	x2, [x19, #16]
 1b0:	sub	x0, x0, x2
 1b4:	str	x0, [x1, #16]
 1b8:	mov	w0, #0x1                   	// #1
 1bc:	b	84 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x84>
 1c0:	mov	x4, #0x36                  	// #54
 1c4:	mov	x3, x20
 1c8:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 1cc:	add	x2, x2, #0x0
 1d0:	mov	w1, #0xaf                  	// #175
 1d4:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e0:	add	x3, x19, #0x408
 1e4:	mov	x0, #0x1                   	// #1
 1e8:	mov	x7, #0x40                  	// #64
 1ec:	mov	x14, #0x200                 	// #512
 1f0:	mov	x13, x6
 1f4:	mov	x8, #0x14                  	// #20
 1f8:	mov	w11, #0x4000                	// #16384
 1fc:	mov	x10, x0
 200:	mov	x9, #0x3e                  	// #62
 204:	mov	x12, #0x100                 	// #256
 208:	b	25c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x25c>
 20c:	cbz	x4, 2a8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2a8>
 210:	udiv	w5, w11, w4
 214:	mov	w2, w5
 218:	cmp	w5, #0x40
 21c:	csel	x2, x2, x7, ls  // ls = plast
 220:	cmp	x2, #0x0
 224:	csel	x2, x2, x10, ne  // ne = any
 228:	cmp	x2, #0x3e
 22c:	csel	x2, x2, x9, ls  // ls = plast
 230:	lsl	x5, x2, #1
 234:	str	x5, [x3]
 238:	str	x4, [x3, #8]
 23c:	add	x2, x2, #0x2
 240:	cmp	x4, x2, lsl #3
 244:	csel	x2, x6, x8, cs  // cs = hs, nlast
 248:	str	x2, [x3, #16]
 24c:	add	x0, x0, #0x1
 250:	add	x3, x3, #0x400
 254:	cmp	x0, #0x36
 258:	b.eq	174 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x174>  // b.none
 25c:	cmp	x0, #0x35
 260:	b.eq	2d8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2d8>  // b.none
 264:	lsl	x4, x0, #4
 268:	cmp	x0, #0x10
 26c:	b.ls	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x20c>  // b.plast
 270:	sub	x5, x0, #0x10
 274:	lsr	x2, x5, #2
 278:	lsl	x2, x12, x2
 27c:	lsr	x4, x2, #2
 280:	and	x5, x5, #0x3
 284:	madd	x4, x4, x5, x2
 288:	b	20c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x20c>
 28c:	mov	x3, x20
 290:	mov	x2, x22
 294:	mov	x0, x19
 298:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 29c:	b	184 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x184>
 2a0:	mov	w0, #0x0                   	// #0
 2a4:	b	84 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x84>
 2a8:	str	xzr, [x3]
 2ac:	str	xzr, [x3, #8]
 2b0:	str	x8, [x3, #16]
 2b4:	add	x0, x0, #0x1
 2b8:	add	x3, x3, #0x400
 2bc:	b	25c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x25c>
 2c0:	str	xzr, [x6]
 2c4:	str	xzr, [x6, #8]
 2c8:	str	x8, [x6, #16]
 2cc:	add	x5, x5, #0x1
 2d0:	add	x6, x6, #0x400
 2d4:	b	128 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x128>
 2d8:	str	x7, [x3]
 2dc:	str	x14, [x3, #8]
 2e0:	mov	x2, x13
 2e4:	b	248 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x248>
 2e8:	str	x3, [x6]
 2ec:	str	x14, [x6, #8]
 2f0:	mov	x0, x13
 2f4:	b	114 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x114>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x23, x24, [sp, #32]
   8:	str	x30, [sp, #48]
   c:	mov	x23, x0
  10:	mov	x19, x3
  14:	cmp	x2, #0x0
  18:	csinc	x20, x2, xzr, ne  // ne = any
  1c:	adds	x0, x20, x3
  20:	b.cs	f4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xf4>  // b.hs, b.nlast
  24:	stp	x21, x22, [sp, #16]
  28:	mov	x21, x1
  2c:	cmp	x3, #0x8
  30:	b.hi	118 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x118>  // b.pmore
  34:	cmp	x2, #0x20, lsl #12
  38:	b.hi	1c4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1c4>  // b.pmore
  3c:	cmp	x20, #0x100
  40:	b.ls	158 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x158>  // b.plast
  44:	clz	x0, x20
  48:	mov	w22, #0x3f                  	// #63
  4c:	sub	w22, w22, w0
  50:	sub	w0, w22, #0x2
  54:	mov	w1, #0x1                   	// #1
  58:	lsl	w1, w1, w0
  5c:	sub	w1, w1, #0x1
  60:	tst	x1, x20
  64:	lsr	x0, x20, x0
  68:	and	x0, x0, #0x3
  6c:	cinc	x0, x0, ne  // ne = any
  70:	add	x22, x0, w22, sxtw #2
  74:	sub	x22, x22, #0x10
  78:	cmp	x22, #0x35
  7c:	b.hi	188 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x188>  // b.pmore
  80:	lsl	x20, x22, #10
  84:	add	x1, x21, x20
  88:	ldr	x0, [x21, x20]
  8c:	cbz	x0, 1a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1a8>
  90:	ldr	x2, [x21, x20]
  94:	sub	x0, x2, #0x1
  98:	str	x0, [x21, x20]
  9c:	lsl	x1, x22, #7
  a0:	add	x0, x1, x0
  a4:	add	x0, x0, #0x4
  a8:	ldr	x0, [x21, x0, lsl #3]
  ac:	add	x1, x1, x2
  b0:	add	x1, x1, #0x2
  b4:	ldr	x1, [x21, x1, lsl #3]
  b8:	prfm	pldl1keep, [x1]
  bc:	add	x2, x21, #0xd, lsl #12
  c0:	add	x2, x2, #0x800
  c4:	ldr	x1, [x2, #16]
  c8:	add	x21, x21, x22, lsl #10
  cc:	ldr	x3, [x21, #16]
  d0:	add	x1, x1, x3
  d4:	str	x1, [x2, #16]
  d8:	cmp	x19, #0x8
  dc:	b.ls	484 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x484>  // b.plast
  e0:	sub	x19, x19, #0x1
  e4:	ands	x3, x0, x19
  e8:	b.ne	468 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x468>  // b.any
  ec:	ldp	x21, x22, [sp, #16]
  f0:	b	488 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x488>
  f4:	mov	x2, x20
  f8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  fc:	ldr	x0, [x0]
 100:	ldr	x1, [x0]
 104:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 108:	add	x0, x0, #0x0
 10c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 110:	mov	x0, #0x0                   	// #0
 114:	b	488 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x488>
 118:	sub	x24, x3, #0x1
 11c:	tst	x3, x24
 120:	b.ne	148 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x148>  // b.any
 124:	sub	x0, x0, #0x1
 128:	neg	x1, x3
 12c:	and	x0, x0, x1
 130:	cmp	x0, #0x20, lsl #12
 134:	mov	x1, #0x20000               	// #131072
 138:	ccmp	x3, x1, #0x2, ls  // ls = plast
 13c:	b.hi	1d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1d0>  // b.pmore
 140:	mov	x20, x0
 144:	b	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3c>
 148:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 154:	bl	0 <_ZN11__sanitizer3DieEv>
 158:	add	x20, x20, #0xf
 15c:	lsr	x22, x20, #4
 160:	cmp	xzr, x20, lsr #4
 164:	b.ne	80 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x80>  // b.any
 168:	mov	x4, #0x0                   	// #0
 16c:	mov	x3, #0x0                   	// #0
 170:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 174:	add	x2, x2, #0x0
 178:	mov	w1, #0x9f                  	// #159
 17c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 180:	add	x0, x0, #0x0
 184:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 188:	mov	x4, #0x36                  	// #54
 18c:	mov	x3, x22
 190:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 194:	add	x2, x2, #0x0
 198:	mov	w1, #0xa0                  	// #160
 19c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 1a0:	add	x0, x0, #0x0
 1a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1a8:	mov	x3, x22
 1ac:	mov	x2, x23
 1b0:	mov	x0, x21
 1b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 1b8:	and	w0, w0, #0xff
 1bc:	cbnz	w0, 90 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x90>
 1c0:	b	3a4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3a4>
 1c4:	sub	x24, x3, #0x1
 1c8:	tst	x3, x24
 1cc:	b.ne	354 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x354>  // b.any
 1d0:	add	x0, x23, #0x80, lsl #12
 1d4:	add	x0, x0, #0xc00
 1d8:	ldr	x0, [x0, #448]
 1dc:	sub	x21, x0, #0x1
 1e0:	tst	x0, x21
 1e4:	b.ne	374 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x374>  // b.any
 1e8:	add	x21, x20, x21
 1ec:	neg	x1, x0
 1f0:	and	x21, x21, x1
 1f4:	add	x21, x21, x0
 1f8:	add	x1, x21, x19
 1fc:	cmp	x19, x0
 200:	csel	x21, x1, x21, hi  // hi = pmore
 204:	cmp	x20, x21
 208:	b.hi	384 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x384>  // b.pmore
 20c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 210:	ldr	x1, [x0]
 214:	mov	x0, x21
 218:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 21c:	cbz	x0, 3a4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3a4>
 220:	add	x1, x23, #0x80, lsl #12
 224:	add	x1, x1, #0xc00
 228:	ldr	x1, [x1, #448]
 22c:	sub	x2, x1, #0x1
 230:	tst	x0, x2
 234:	b.ne	3b0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3b0>  // b.any
 238:	add	x22, x0, x1
 23c:	ands	x3, x24, x22
 240:	b.eq	254 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x254>  // b.none
 244:	add	x22, x19, x22
 248:	sub	x22, x22, x3
 24c:	tst	x24, x22
 250:	b.ne	3d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3d0>  // b.any
 254:	tst	x22, x2
 258:	b.ne	3f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3f0>  // b.any
 25c:	add	x3, x20, x22
 260:	cmp	x0, x3
 264:	b.hi	410 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x410>  // b.pmore
 268:	add	x4, x21, x0
 26c:	cmp	x4, x3
 270:	b.cc	42c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x42c>  // b.lo, b.ul, b.last
 274:	sub	x24, x22, x1
 278:	str	x20, [x24, #16]
 27c:	str	x0, [x24]
 280:	str	x21, [x24, #8]
 284:	add	x0, x23, #0xc1, lsl #12
 288:	mov	w2, #0x1                   	// #1
 28c:	ldxrb	w1, [x0]
 290:	stxrb	w3, w2, [x0]
 294:	cbnz	w3, 28c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x28c>
 298:	dmb	ish
 29c:	and	w1, w1, #0xff
 2a0:	cbnz	w1, 444 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x444>
 2a4:	add	x0, x23, #0xc0, lsl #12
 2a8:	add	x0, x0, #0xdc0
 2ac:	ldr	x3, [x0, #16]
 2b0:	mov	x0, #0x7fff                	// #32767
 2b4:	cmp	x3, x0
 2b8:	b.hi	44c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x44c>  // b.pmore
 2bc:	clz	x4, x21
 2c0:	add	x2, x23, #0x80, lsl #12
 2c4:	add	x2, x2, #0xdc0
 2c8:	add	x1, x2, #0x40, lsl #12
 2cc:	add	x0, x3, #0x1
 2d0:	str	x0, [x1, #16]
 2d4:	str	x3, [x24, #24]
 2d8:	ldr	x0, [x2, #8]
 2dc:	str	x24, [x0, x3, lsl #3]
 2e0:	strb	wzr, [x1, #24]
 2e4:	ldr	x2, [x1, #32]
 2e8:	add	x2, x2, #0x1
 2ec:	str	x2, [x1, #32]
 2f0:	ldr	x2, [x1, #48]
 2f4:	add	x2, x21, x2
 2f8:	str	x2, [x1, #48]
 2fc:	ldr	x3, [x1, #56]
 300:	cmp	x3, x2
 304:	csel	x2, x3, x2, cs  // cs = hs, nlast
 308:	str	x2, [x1, #56]
 30c:	mov	w0, #0x3f                  	// #63
 310:	sub	w0, w0, w4
 314:	add	x0, x23, w0, sxtw #3
 318:	add	x0, x0, #0xc0, lsl #12
 31c:	ldr	x1, [x0, #3584]
 320:	add	x1, x1, #0x1
 324:	str	x1, [x0, #3584]
 328:	add	x0, x23, #0xc1, lsl #12
 32c:	ldr	x2, [x0, #24]
 330:	add	x2, x21, x2
 334:	str	x2, [x0, #24]
 338:	ldr	x2, [x0, #32]
 33c:	add	x21, x21, x2
 340:	str	x21, [x0, #32]
 344:	dmb	ish
 348:	strb	wzr, [x0]
 34c:	mov	x0, x22
 350:	b	d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xd8>
 354:	mov	x4, #0x0                   	// #0
 358:	mov	x3, #0x0                   	// #0
 35c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 360:	add	x2, x2, #0x0
 364:	mov	w1, #0x53                  	// #83
 368:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 36c:	add	x0, x0, #0x0
 370:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 374:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 378:	add	x0, x0, #0x0
 37c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 380:	bl	0 <_ZN11__sanitizer3DieEv>
 384:	mov	x3, x19
 388:	mov	x2, x21
 38c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 390:	ldr	x0, [x0]
 394:	ldr	x1, [x0]
 398:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 39c:	add	x0, x0, #0x0
 3a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3a4:	mov	x0, #0x0                   	// #0
 3a8:	ldp	x21, x22, [sp, #16]
 3ac:	b	488 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x488>
 3b0:	mov	x4, #0x0                   	// #0
 3b4:	mov	x3, #0x0                   	// #0
 3b8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3bc:	add	x2, x2, #0x0
 3c0:	mov	w1, #0x62                  	// #98
 3c4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3c8:	add	x0, x0, #0x0
 3cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d0:	mov	x4, #0x0                   	// #0
 3d4:	mov	x3, #0x0                   	// #0
 3d8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3dc:	add	x2, x2, #0x0
 3e0:	mov	w1, #0x68                  	// #104
 3e4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3e8:	add	x0, x0, #0x0
 3ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f0:	mov	x4, #0x0                   	// #0
 3f4:	mov	x3, #0x0                   	// #0
 3f8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3fc:	add	x2, x2, #0x0
 400:	mov	w1, #0x69                  	// #105
 404:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 408:	add	x0, x0, #0x0
 40c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 410:	mov	x4, x0
 414:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 418:	add	x2, x2, #0x0
 41c:	mov	w1, #0x6a                  	// #106
 420:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 424:	add	x0, x0, #0x0
 428:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 42c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 430:	add	x2, x2, #0x0
 434:	mov	w1, #0x6b                  	// #107
 438:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 43c:	add	x0, x0, #0x0
 440:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 444:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 448:	b	2a4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2a4>
 44c:	mov	x4, #0x8000                	// #32768
 450:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 454:	add	x2, x2, #0x0
 458:	mov	w1, #0x15                  	// #21
 45c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 460:	add	x0, x0, #0x0
 464:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 468:	mov	x4, #0x0                   	// #0
 46c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 470:	add	x2, x2, #0x0
 474:	mov	w1, #0x42                  	// #66
 478:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 47c:	add	x0, x0, #0x0
 480:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 484:	ldp	x21, x22, [sp, #16]
 488:	ldp	x23, x24, [sp, #32]
 48c:	ldr	x30, [sp, #48]
 490:	ldp	x19, x20, [sp], #64
 494:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x26, [sp, #48]
  10:	str	x30, [sp, #64]
  14:	mov	x21, x0
  18:	mov	x20, x1
  1c:	mov	x23, x2
  20:	mov	x22, x3
  24:	ldr	x6, [x1]
  28:	ldr	x19, [x1, #8]
  2c:	lsr	x19, x19, #1
  30:	cmp	x19, x6
  34:	csel	x19, x19, x6, ls  // ls = plast
  38:	sub	x24, x6, x19
  3c:	add	x0, x0, x3, lsl #10
  40:	ldr	x25, [x0, #24]
  44:	cbnz	x25, b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xb8>
  48:	add	x0, x24, #0x4
  4c:	ldr	x3, [x1, x0, lsl #3]
  50:	cbz	x3, 150 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x150>
  54:	add	x6, x24, #0x4
  58:	add	x6, x20, x6, lsl #3
  5c:	str	x19, [x3, #8]
  60:	cbz	x19, 80 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x80>
  64:	mov	x4, #0x0                   	// #0
  68:	add	x1, x3, #0x10
  6c:	ldr	x5, [x6, x4, lsl #3]
  70:	str	x5, [x1, x4, lsl #3]
  74:	add	x4, x4, #0x1
  78:	cmp	x4, x19
  7c:	b.ne	6c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x6c>  // b.any
  80:	ldr	x0, [x20]
  84:	sub	x19, x0, x19
  88:	str	x19, [x20]
  8c:	mov	x2, x22
  90:	add	x1, x21, #0xd, lsl #12
  94:	add	x1, x1, #0x800
  98:	mov	x0, x23
  9c:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
  a0:	ldp	x21, x22, [sp, #16]
  a4:	ldp	x23, x24, [sp, #32]
  a8:	ldp	x25, x26, [sp, #48]
  ac:	ldr	x30, [sp, #64]
  b0:	ldp	x19, x20, [sp], #80
  b4:	ret
  b8:	cmp	x25, #0x35
  bc:	b.hi	11c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x11c>  // b.pmore
  c0:	lsl	x26, x25, #10
  c4:	add	x1, x21, x26
  c8:	ldr	x0, [x21, x26]
  cc:	cbz	x0, 13c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x13c>
  d0:	ldr	x2, [x21, x26]
  d4:	sub	x1, x2, #0x1
  d8:	str	x1, [x21, x26]
  dc:	lsl	x0, x25, #7
  e0:	add	x1, x0, x1
  e4:	add	x1, x1, #0x4
  e8:	ldr	x3, [x21, x1, lsl #3]
  ec:	add	x0, x0, x2
  f0:	add	x0, x0, #0x2
  f4:	ldr	x0, [x21, x0, lsl #3]
  f8:	prfm	pldl1keep, [x0]
  fc:	add	x1, x21, #0xd, lsl #12
 100:	add	x1, x1, #0x800
 104:	ldr	x0, [x1, #16]
 108:	add	x25, x21, x25, lsl #10
 10c:	ldr	x2, [x25, #16]
 110:	add	x0, x0, x2
 114:	str	x0, [x1, #16]
 118:	b	50 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x50>
 11c:	mov	x4, #0x36                  	// #54
 120:	mov	x3, x25
 124:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 128:	add	x2, x2, #0x0
 12c:	mov	w1, #0xa0                  	// #160
 130:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 134:	add	x0, x0, #0x0
 138:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 13c:	mov	x3, x25
 140:	mov	x0, x21
 144:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 148:	and	w0, w0, #0xff
 14c:	cbnz	w0, d0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xd0>
 150:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 154:	ldr	x0, [x0]
 158:	ldr	x1, [x0]
 15c:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 160:	add	x0, x0, #0x0
 164:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 168:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>:
   0:	cbz	x2, 354 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x354>
   4:	stp	x19, x20, [sp, #-48]!
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #40]
  10:	mov	x20, x0
  14:	mov	x21, x1
  18:	mov	x19, x2
  1c:	mov	x0, #0xffffffffffff        	// #281474976710655
  20:	cmp	x2, x0
  24:	b.ls	124 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x124>  // b.plast
  28:	add	x0, x20, #0x80, lsl #12
  2c:	add	x0, x0, #0xc00
  30:	ldr	x2, [x0, #448]
  34:	sub	x0, x2, #0x1
  38:	tst	x19, x0
  3c:	b.ne	2c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x2c0>  // b.any
  40:	sub	x19, x19, x2
  44:	add	x0, x20, #0xc1, lsl #12
  48:	mov	w2, #0x1                   	// #1
  4c:	ldxrb	w1, [x0]
  50:	stxrb	w3, w2, [x0]
  54:	cbnz	w3, 4c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x4c>
  58:	dmb	ish
  5c:	and	w1, w1, #0xff
  60:	cbnz	w1, 2e4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x2e4>
  64:	ldr	x1, [x19, #24]
  68:	add	x0, x20, #0x80, lsl #12
  6c:	add	x0, x0, #0xdc0
  70:	ldr	x2, [x0, #8]
  74:	ldr	x3, [x2, x1, lsl #3]
  78:	cmp	x3, x19
  7c:	b.ne	2ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x2ec>  // b.any
  80:	add	x0, x20, #0xc0, lsl #12
  84:	add	x0, x0, #0xdc0
  88:	ldr	x4, [x0, #16]
  8c:	cmp	x1, x4
  90:	b.cs	30c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x30c>  // b.hs, b.nlast
  94:	sub	x4, x4, #0x1
  98:	add	x3, x20, #0x80, lsl #12
  9c:	add	x3, x3, #0xdc0
  a0:	add	x0, x3, #0x40, lsl #12
  a4:	str	x4, [x0, #16]
  a8:	ldr	x4, [x2, x4, lsl #3]
  ac:	str	x4, [x2, x1, lsl #3]
  b0:	ldr	x2, [x3, #8]
  b4:	ldr	x2, [x2, x1, lsl #3]
  b8:	str	x1, [x2, #24]
  bc:	strb	wzr, [x0, #24]
  c0:	ldr	x1, [x0, #40]
  c4:	add	x1, x1, #0x1
  c8:	str	x1, [x0, #40]
  cc:	ldr	x1, [x0, #48]
  d0:	ldr	x2, [x19, #8]
  d4:	sub	x1, x1, x2
  d8:	str	x1, [x0, #48]
  dc:	add	x20, x20, #0xc1, lsl #12
  e0:	ldr	x1, [x20, #24]
  e4:	ldr	x2, [x19, #8]
  e8:	sub	x1, x1, x2
  ec:	str	x1, [x20, #24]
  f0:	ldr	x1, [x20, #32]
  f4:	ldr	x2, [x19, #8]
  f8:	sub	x1, x1, x2
  fc:	str	x1, [x20, #32]
 100:	dmb	ish
 104:	strb	wzr, [x20]
 108:	ldr	x1, [x19, #8]
 10c:	ldr	x0, [x19]
 110:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 114:	ldp	x21, x22, [sp, #16]
 118:	ldr	x30, [sp, #40]
 11c:	ldp	x19, x20, [sp], #48
 120:	ret
 124:	lsr	x0, x2, #20
 128:	lsr	x2, x2, #32
 12c:	ldr	x1, [x20, x2, lsl #3]
 130:	dmb	ish
 134:	cbz	x1, 28 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x28>
 138:	and	x0, x0, #0xfff
 13c:	ldrb	w1, [x1, x0]
 140:	cbz	w1, 28 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x28>
 144:	str	x23, [sp, #32]
 148:	ldr	x1, [x20, x2, lsl #3]
 14c:	dmb	ish
 150:	cbz	x1, 1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x1c0>
 154:	ldrb	w22, [x1, x0]
 158:	cbz	x22, 1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x1c0>
 15c:	cmp	x22, #0x35
 160:	b.hi	1e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x1e0>  // b.pmore
 164:	lsl	x23, x22, #10
 168:	add	x1, x21, x23
 16c:	ldr	x6, [x1, #8]
 170:	cbz	x6, 200 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x200>
 174:	ldr	x2, [x21, x23]
 178:	ldr	x0, [x1, #8]
 17c:	cmp	x2, x0
 180:	b.eq	2ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x2ac>  // b.none
 184:	ldr	x0, [x21, x23]
 188:	add	x1, x0, #0x1
 18c:	str	x1, [x21, x23]
 190:	add	x0, x0, x22, lsl #7
 194:	add	x0, x0, #0x4
 198:	str	x19, [x21, x0, lsl #3]
 19c:	add	x2, x21, #0xd, lsl #12
 1a0:	add	x2, x2, #0x800
 1a4:	ldr	x0, [x2, #16]
 1a8:	add	x1, x21, x22, lsl #10
 1ac:	ldr	x1, [x1, #16]
 1b0:	sub	x0, x0, x1
 1b4:	str	x0, [x2, #16]
 1b8:	ldr	x23, [sp, #32]
 1bc:	b	114 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x114>
 1c0:	mov	x4, #0x0                   	// #0
 1c4:	mov	x3, #0x0                   	// #0
 1c8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 1cc:	add	x2, x2, #0x0
 1d0:	mov	w1, #0xae                  	// #174
 1d4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e0:	mov	x4, #0x36                  	// #54
 1e4:	mov	x3, x22
 1e8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 1ec:	add	x2, x2, #0x0
 1f0:	mov	w1, #0xaf                  	// #175
 1f4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 1f8:	add	x0, x0, #0x0
 1fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 200:	add	x3, x21, #0x408
 204:	mov	x2, #0x1                   	// #1
 208:	mov	x7, #0x40                  	// #64
 20c:	mov	x14, #0x200                 	// #512
 210:	mov	x13, x6
 214:	mov	x8, #0x14                  	// #20
 218:	mov	w11, #0x4000                	// #16384
 21c:	mov	x10, x2
 220:	mov	x9, #0x3e                  	// #62
 224:	mov	x12, #0x100                 	// #256
 228:	b	294 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x294>
 22c:	sub	x5, x2, #0x10
 230:	lsr	x0, x5, #2
 234:	lsl	x0, x12, x0
 238:	lsr	x4, x0, #2
 23c:	and	x5, x5, #0x3
 240:	madd	x4, x4, x5, x0
 244:	cbz	x4, 32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x32c>
 248:	udiv	w5, w11, w4
 24c:	mov	w0, w5
 250:	cmp	w5, #0x40
 254:	csel	x0, x0, x7, ls  // ls = plast
 258:	cmp	x0, #0x0
 25c:	csel	x0, x0, x10, ne  // ne = any
 260:	cmp	x0, #0x3e
 264:	csel	x0, x0, x9, ls  // ls = plast
 268:	lsl	x5, x0, #1
 26c:	str	x5, [x3]
 270:	str	x4, [x3, #8]
 274:	add	x0, x0, #0x2
 278:	cmp	x4, x0, lsl #3
 27c:	csel	x0, x6, x8, cs  // cs = hs, nlast
 280:	str	x0, [x3, #16]
 284:	add	x2, x2, #0x1
 288:	add	x3, x3, #0x400
 28c:	cmp	x2, #0x36
 290:	b.eq	174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x174>  // b.none
 294:	cmp	x2, #0x35
 298:	b.eq	344 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x344>  // b.none
 29c:	lsl	x4, x2, #4
 2a0:	cmp	x2, #0x10
 2a4:	b.hi	22c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x22c>  // b.pmore
 2a8:	b	244 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x244>
 2ac:	mov	x3, x22
 2b0:	mov	x2, x20
 2b4:	mov	x0, x21
 2b8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 2bc:	b	184 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x184>
 2c0:	str	x23, [sp, #32]
 2c4:	mov	x4, #0x0                   	// #0
 2c8:	mov	x3, #0x0                   	// #0
 2cc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 2d0:	add	x2, x2, #0x0
 2d4:	mov	w1, #0x123                 	// #291
 2d8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 2dc:	add	x0, x0, #0x0
 2e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 2e8:	b	64 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x64>
 2ec:	str	x23, [sp, #32]
 2f0:	mov	x4, x19
 2f4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 2f8:	add	x2, x2, #0x0
 2fc:	mov	w1, #0x88                  	// #136
 300:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 304:	add	x0, x0, #0x0
 308:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 30c:	str	x23, [sp, #32]
 310:	mov	x3, x1
 314:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 318:	add	x2, x2, #0x0
 31c:	mov	w1, #0x89                  	// #137
 320:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 324:	add	x0, x0, #0x0
 328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 32c:	str	xzr, [x3]
 330:	str	xzr, [x3, #8]
 334:	str	x8, [x3, #16]
 338:	add	x2, x2, #0x1
 33c:	add	x3, x3, #0x400
 340:	b	294 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x294>
 344:	str	x7, [x3]
 348:	str	x14, [x3, #8]
 34c:	mov	x0, x13
 350:	b	280 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x280>
 354:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	str	x30, [sp, #56]
  10:	mov	x20, x0
  14:	mov	x22, x1
  18:	mov	x21, x3
  1c:	mov	x24, x4
  20:	cbz	x2, 88 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x88>
  24:	mov	x19, x2
  28:	cbz	x3, 9c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x9c>
  2c:	str	x25, [sp, #48]
  30:	mov	x23, x2
  34:	mov	x0, #0xffffffffffff        	// #281474976710655
  38:	cmp	x2, x0
  3c:	b.ls	a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xa8>  // b.plast
  40:	add	x0, x20, #0xc1, lsl #12
  44:	mov	w2, #0x1                   	// #1
  48:	ldxrb	w1, [x0]
  4c:	stxrb	w3, w2, [x0]
  50:	cbnz	w3, 48 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x48>
  54:	dmb	ish
  58:	and	w1, w1, #0xff
  5c:	cbnz	w1, 140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
  60:	add	x0, x20, #0xc0, lsl #12
  64:	add	x0, x0, #0xdc0
  68:	ldr	x0, [x0, #16]
  6c:	cbz	x0, 2e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2e0>
  70:	add	x1, x20, #0x80, lsl #12
  74:	add	x1, x1, #0xdc0
  78:	ldr	x2, [x1, #8]
  7c:	add	x1, x2, x0, lsl #3
  80:	mov	x0, #0x0                   	// #0
  84:	b	154 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x154>
  88:	mov	x3, x4
  8c:	mov	x2, x21
  90:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  94:	mov	x23, x0
  98:	b	250 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x250>
  9c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  a0:	mov	x23, #0x0                   	// #0
  a4:	b	250 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x250>
  a8:	lsr	x1, x2, #20
  ac:	lsr	x0, x2, #32
  b0:	ldr	x0, [x20, x0, lsl #3]
  b4:	dmb	ish
  b8:	cbz	x0, 40 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x40>
  bc:	and	x1, x1, #0xfff
  c0:	ldrb	w0, [x0, x1]
  c4:	cbz	w0, 40 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x40>
  c8:	lsr	x0, x19, #20
  cc:	lsr	x2, x19, #32
  d0:	ldr	x1, [x20, x2, lsl #3]
  d4:	dmb	ish
  d8:	cbz	x1, 1dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1dc>
  dc:	and	x0, x0, #0xfff
  e0:	ldrb	w1, [x1, x0]
  e4:	cbz	w1, 1dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1dc>
  e8:	ldr	x1, [x20, x2, lsl #3]
  ec:	dmb	ish
  f0:	cbz	x1, 318 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x318>
  f4:	ldrb	w1, [x1, x0]
  f8:	cbz	w1, 318 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x318>
  fc:	ldr	x1, [x20, x2, lsl #3]
 100:	dmb	ish
 104:	cbz	x1, 338 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x338>
 108:	ldrb	w1, [x1, x0]
 10c:	mov	x25, #0x200                 	// #512
 110:	cmp	x1, #0x35
 114:	b.eq	210 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x210>  // b.none
 118:	cmp	x1, #0x10
 11c:	b.ls	338 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x338>  // b.plast
 120:	sub	x1, x1, #0x10
 124:	lsr	x25, x1, #2
 128:	mov	x0, #0x100                 	// #256
 12c:	lsl	x0, x0, x25
 130:	lsr	x25, x0, #2
 134:	and	x1, x1, #0x3
 138:	madd	x25, x25, x1, x0
 13c:	b	210 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x210>
 140:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 144:	b	60 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x60>
 148:	add	x2, x2, #0x8
 14c:	cmp	x1, x2
 150:	b.eq	174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>  // b.none
 154:	ldr	x3, [x2]
 158:	cmp	x23, x3
 15c:	b.cc	148 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x148>  // b.lo, b.ul, b.last
 160:	sub	x5, x23, x3
 164:	sub	x4, x23, x0
 168:	cmp	x5, x4
 16c:	csel	x0, x0, x3, cs  // cs = hs, nlast
 170:	b	148 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x148>
 174:	cbz	x0, 2e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2e8>
 178:	ldr	x4, [x0]
 17c:	cmp	x4, x0
 180:	b.hi	268 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x268>  // b.pmore
 184:	ldr	x1, [x0, #8]
 188:	add	x4, x4, x1
 18c:	cmp	x4, x0
 190:	b.ls	284 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x284>  // b.plast
 194:	cmp	x19, x0
 198:	b.cc	2a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2a0>  // b.lo, b.ul, b.last
 19c:	cmp	x19, x4
 1a0:	b.cs	2f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2f0>  // b.hs, b.nlast
 1a4:	add	x1, x20, #0x80, lsl #12
 1a8:	add	x1, x1, #0xc00
 1ac:	ldr	x1, [x1, #448]
 1b0:	sub	x2, x1, #0x1
 1b4:	add	x1, x0, x1
 1b8:	tst	x2, x0
 1bc:	b.ne	2c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2c0>  // b.any
 1c0:	dmb	ish
 1c4:	add	x0, x20, #0xc1, lsl #12
 1c8:	strb	wzr, [x0]
 1cc:	cbz	x1, 2f8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2f8>
 1d0:	mov	x0, #0xffffffffffff        	// #281474976710655
 1d4:	cmp	x19, x0
 1d8:	b.ls	c8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xc8>  // b.plast
 1dc:	add	x0, x20, #0x80, lsl #12
 1e0:	add	x0, x0, #0xc00
 1e4:	ldr	x0, [x0, #448]
 1e8:	sub	x1, x0, #0x1
 1ec:	tst	x19, x1
 1f0:	b.ne	340 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x340>  // b.any
 1f4:	sub	x2, x19, x0
 1f8:	ldr	x25, [x2, #16]
 1fc:	add	x25, x25, x1
 200:	neg	x2, x0
 204:	and	x25, x25, x2
 208:	tst	x0, x1
 20c:	b.ne	360 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x360>  // b.any
 210:	mov	x3, x24
 214:	mov	x2, x21
 218:	mov	x1, x22
 21c:	mov	x0, x20
 220:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 224:	mov	x23, x0
 228:	cbz	x0, 23c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x23c>
 22c:	cmp	x21, x25
 230:	csel	x2, x21, x25, ls  // ls = plast
 234:	mov	x1, x19
 238:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 23c:	mov	x2, x19
 240:	mov	x1, x22
 244:	mov	x0, x20
 248:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 24c:	ldr	x25, [sp, #48]
 250:	mov	x0, x23
 254:	ldp	x21, x22, [sp, #16]
 258:	ldp	x23, x24, [sp, #32]
 25c:	ldr	x30, [sp, #56]
 260:	ldp	x19, x20, [sp], #64
 264:	ret
 268:	mov	x3, x0
 26c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 270:	add	x2, x2, #0x0
 274:	mov	w1, #0xc1                  	// #193
 278:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 27c:	add	x0, x0, #0x0
 280:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 284:	mov	x3, x0
 288:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 28c:	add	x2, x2, #0x0
 290:	mov	w1, #0xc2                  	// #194
 294:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 298:	add	x0, x0, #0x0
 29c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2a0:	mov	x4, x19
 2a4:	mov	x3, x0
 2a8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2ac:	add	x2, x2, #0x0
 2b0:	mov	w1, #0xc3                  	// #195
 2b4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2b8:	add	x0, x0, #0x0
 2bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2c0:	mov	x4, #0x0                   	// #0
 2c4:	mov	x3, #0x0                   	// #0
 2c8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2cc:	add	x2, x2, #0x0
 2d0:	mov	w1, #0x12b                 	// #299
 2d4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2d8:	add	x0, x0, #0x0
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e0:	mov	x1, #0x0                   	// #0
 2e4:	b	1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1c0>
 2e8:	mov	x1, #0x0                   	// #0
 2ec:	b	1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1c0>
 2f0:	mov	x1, #0x0                   	// #0
 2f4:	b	1c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1c0>
 2f8:	mov	x4, #0x0                   	// #0
 2fc:	mov	x3, #0x0                   	// #0
 300:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 304:	add	x2, x2, #0x0
 308:	mov	w1, #0x62                  	// #98
 30c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 310:	add	x0, x0, #0x0
 314:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 318:	mov	x4, #0x0                   	// #0
 31c:	mov	x3, #0x0                   	// #0
 320:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 324:	add	x2, x2, #0x0
 328:	mov	w1, #0xcc                  	// #204
 32c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 330:	add	x0, x0, #0x0
 334:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 338:	lsl	x25, x1, #4
 33c:	b	210 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x210>
 340:	mov	x4, #0x0                   	// #0
 344:	mov	x3, #0x0                   	// #0
 348:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 34c:	add	x2, x2, #0x0
 350:	mov	w1, #0x123                 	// #291
 354:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 358:	add	x0, x0, #0x0
 35c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 360:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 364:	add	x0, x0, #0x0
 368:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 36c:	bl	0 <_ZN11__sanitizer3DieEv>

sanitizer_allocator_checks.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer16SetErrnoToENOMEMEv>:
   0:	str	x30, [sp, #-16]!
   4:	bl	0 <__errno_location>
   8:	mov	w1, #0xc                   	// #12
   c:	str	w1, [x0]
  10:	ldr	x30, [sp], #16
  14:	ret

sanitizer_allocator_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	x21, x1
  10:	add	x19, sp, #0x20
  14:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  18:	add	x1, x1, #0x0
  1c:	mov	x0, x19
  20:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  24:	mov	x3, x21
  28:	mov	x2, x20
  2c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  30:	ldr	x0, [x0]
  34:	ldr	x1, [x0]
  38:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  44:	mov	x0, x19
  48:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000050 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>:
  50:	stp	x19, x20, [sp, #-64]!
  54:	str	x30, [sp, #16]
  58:	mov	x19, x0
  5c:	mov	x2, x1
  60:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  64:	add	x1, x1, #0x0
  68:	add	x0, sp, #0x20
  6c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  70:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  74:	ldr	x0, [x0]
  78:	ldr	x20, [x0]
  7c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  80:	ldr	x0, [x0]
  84:	ldr	x0, [x0]
  88:	cbz	x0, b8 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x68>
  8c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  90:	ldr	x0, [x0]
  94:	ldr	x3, [x0]
  98:	mov	x2, x19
  9c:	mov	x1, x20
  a0:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  ac:	add	x0, sp, #0x20
  b0:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  b4:	bl	0 <_ZN11__sanitizer3DieEv>
  b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  bc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
  c0:	ldr	x1, [x1]
  c4:	str	x0, [x1]
  c8:	b	8c <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x3c>

00000000000000cc <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>:
  cc:	stp	x19, x20, [sp, #-64]!
  d0:	str	x30, [sp, #16]
  d4:	mov	x20, x0
  d8:	add	x19, sp, #0x20
  dc:	mov	x2, x1
  e0:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  e4:	add	x1, x1, #0x0
  e8:	mov	x0, x19
  ec:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  f0:	mov	x2, x20
  f4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  f8:	ldr	x0, [x0]
  fc:	ldr	x1, [x0]
 100:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 104:	add	x0, x0, #0x0
 108:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 10c:	mov	x0, x19
 110:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 114:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000118 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>:
 118:	stp	x19, x20, [sp, #-64]!
 11c:	stp	x21, x30, [sp, #16]
 120:	mov	x21, x0
 124:	mov	x20, x1
 128:	add	x19, sp, #0x20
 12c:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 130:	add	x1, x1, #0x0
 134:	mov	x0, x19
 138:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 13c:	mov	x3, x21
 140:	mov	x2, x20
 144:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 148:	ldr	x0, [x0]
 14c:	ldr	x1, [x0]
 150:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 154:	add	x0, x0, #0x0
 158:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 15c:	mov	x0, x19
 160:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 164:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000168 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>:
 168:	stp	x19, x20, [sp, #-64]!
 16c:	str	x30, [sp, #16]
 170:	mov	x20, x0
 174:	add	x19, sp, #0x20
 178:	mov	x2, x1
 17c:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 180:	add	x1, x1, #0x0
 184:	mov	x0, x19
 188:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 18c:	mov	x3, #0x8                   	// #8
 190:	mov	x2, x20
 194:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 198:	ldr	x0, [x0]
 19c:	ldr	x1, [x0]
 1a0:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1a4:	add	x0, x0, #0x0
 1a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1ac:	mov	x0, x19
 1b0:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1b4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001b8 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>:
 1b8:	stp	x19, x20, [sp, #-64]!
 1bc:	stp	x21, x30, [sp, #16]
 1c0:	mov	x20, x0
 1c4:	mov	x21, x1
 1c8:	add	x19, sp, #0x20
 1cc:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1d0:	add	x1, x1, #0x0
 1d4:	mov	x0, x19
 1d8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1dc:	mov	x3, x21
 1e0:	mov	x2, x20
 1e4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1e8:	ldr	x0, [x0]
 1ec:	ldr	x1, [x0]
 1f0:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1f4:	add	x0, x0, #0x0
 1f8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1fc:	mov	x0, x19
 200:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 204:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000208 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>:
 208:	stp	x19, x20, [sp, #-64]!
 20c:	str	x30, [sp, #16]
 210:	mov	x20, x0
 214:	add	x19, sp, #0x20
 218:	mov	x2, x1
 21c:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 220:	add	x1, x1, #0x0
 224:	mov	x0, x19
 228:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 22c:	mov	x2, x20
 230:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 234:	ldr	x0, [x0]
 238:	ldr	x1, [x0]
 23c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 240:	add	x0, x0, #0x0
 244:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 248:	mov	x0, x19
 24c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 250:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportC2EPKcPKNS_10StackTraceE:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x19, x0
   c:	mov	x21, x1
  10:	mov	x20, x2
  14:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
  18:	str	x21, [x19, #8]
  1c:	str	x20, [x19, #16]
  20:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
  24:	ands	w2, w0, #0xff
  28:	strb	w0, [x19, #24]
  2c:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  30:	add	x0, x0, #0x0
  34:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  38:	add	x1, x1, #0x0
  3c:	csel	x1, x1, x0, ne  // ne = any
  40:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  44:	add	x0, x0, #0x0
  48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportD2Ev:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	ldrb	w2, [x0, #24]
   c:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  10:	add	x0, x0, #0x0
  14:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  18:	add	x1, x1, #0x0
  1c:	cmp	w2, #0x0
  20:	csel	x1, x1, x0, ne  // ne = any
  24:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  30:	ldr	x0, [x19, #16]
  34:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  38:	bl	0 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>
  3c:	mov	x2, #0x0                   	// #0
  40:	ldr	x1, [x19, #16]
  44:	ldr	x0, [x19, #8]
  48:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
  4c:	mov	x0, x19
  50:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>
  54:	ldp	x19, x30, [sp], #16
  58:	ret

sanitizer_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>:
   0:	str	x30, [sp, #-16]!
   4:	tst	w4, #0xff
   8:	b.ne	18 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x18>  // b.any
   c:	adrp	x4, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  10:	ldr	w4, [x4]
  14:	cbz	w4, 28 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x28>
  18:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  24:	bl	0 <_ZN11__sanitizer3DieEv>
  28:	adrp	x4, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  2c:	mov	w5, #0x1                   	// #1
  30:	str	w5, [x4]
  34:	mov	w6, w3
  38:	mov	x5, x1
  3c:	mov	x4, x0
  40:	mov	x3, x0
  44:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  48:	ldr	x1, [x0]
  4c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  50:	add	x0, x0, #0x0
  54:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  58:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
  5c:	mov	x4, #0x0                   	// #0
  60:	mov	x3, #0x0                   	// #0
  64:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  68:	add	x2, x2, #0x0
  6c:	mov	w1, #0x35                  	// #53
  70:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  74:	add	x0, x0, #0x0
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000007c <_ZN11__sanitizer15StripPathPrefixEPKcS1_>:
  7c:	stp	x19, x20, [sp, #-32]!
  80:	str	x30, [sp, #24]
  84:	mov	x19, x0
  88:	cbz	x0, c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x48>
  8c:	mov	x20, x1
  90:	cbz	x1, c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x48>
  94:	str	x21, [sp, #16]
  98:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  9c:	mov	x21, x0
  a0:	mov	x0, x19
  a4:	cbz	x21, b4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x38>
  a8:	mov	x0, x20
  ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  b0:	add	x0, x21, x0
  b4:	ldrb	w1, [x0]
  b8:	cmp	w1, #0x2e
  bc:	b.eq	d0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x54>  // b.none
  c0:	ldr	x21, [sp, #16]
  c4:	ldr	x30, [sp, #24]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret
  d0:	ldrb	w2, [x0, #1]
  d4:	add	x1, x0, #0x2
  d8:	cmp	w2, #0x2f
  dc:	csel	x0, x1, x0, eq  // eq = none
  e0:	ldr	x21, [sp, #16]
  e4:	b	c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x48>

00000000000000e8 <_ZN11__sanitizer15StripModuleNameEPKc>:
  e8:	stp	x19, x30, [sp, #-16]!
  ec:	mov	x19, x0
  f0:	cbz	x0, 104 <_ZN11__sanitizer15StripModuleNameEPKc+0x1c>
  f4:	mov	w1, #0x2f                  	// #47
  f8:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
  fc:	cmp	x0, #0x0
 100:	csinc	x19, x19, x0, eq  // eq = none
 104:	mov	x0, x19
 108:	ldp	x19, x30, [sp], #16
 10c:	ret

0000000000000110 <_ZN11__sanitizerL15ReadProcessNameEPcm>:
 110:	stp	x19, x20, [sp, #-32]!
 114:	stp	x21, x30, [sp, #16]
 118:	mov	x19, x0
 11c:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
 120:	mov	x0, x19
 124:	bl	e8 <_ZN11__sanitizer15StripModuleNameEPKc>
 128:	mov	x21, x0
 12c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 130:	mov	x20, x0
 134:	cmp	x19, x21
 138:	b.eq	150 <_ZN11__sanitizerL15ReadProcessNameEPcm+0x40>  // b.none
 13c:	mov	x2, x0
 140:	mov	x1, x21
 144:	mov	x0, x19
 148:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 14c:	strb	wzr, [x19, x20]
 150:	mov	x0, x20
 154:	ldp	x21, x30, [sp, #16]
 158:	ldp	x19, x20, [sp], #32
 15c:	ret

0000000000000160 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>:
 160:	cbz	x0, 20c <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0xac>
 164:	stp	x19, x20, [sp, #-32]!
 168:	str	x30, [sp, #16]
 16c:	ldrb	w1, [x0]
 170:	cbz	w1, 204 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0xa4>
 174:	mov	x19, x0
 178:	mov	w20, #0x6d                  	// #109
 17c:	b	1ec <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x8c>
 180:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 184:	add	x2, x2, #0x0
 188:	mov	w1, #0x68                  	// #104
 18c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 190:	add	x0, x0, #0x0
 194:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 198:	ldrb	w2, [x0, #1]
 19c:	cmp	w2, #0x5b
 1a0:	b.ne	1f4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x94>  // b.any
 1a4:	mov	w1, w20
 1a8:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 1ac:	ldrb	w1, [x0]
 1b0:	cbnz	w1, 1c4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x64>
 1b4:	strb	wzr, [x19]
 1b8:	ldr	x30, [sp, #16]
 1bc:	ldp	x19, x20, [sp], #32
 1c0:	ret
 1c4:	add	x0, x0, #0x1
 1c8:	b	1d4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x74>
 1cc:	add	x19, x19, #0x1
 1d0:	add	x0, x0, #0x1
 1d4:	ldrb	w1, [x0]
 1d8:	cbz	w1, 1b4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x54>
 1dc:	mov	x3, x0
 1e0:	mov	x4, x19
 1e4:	cmp	x0, x19
 1e8:	b.cc	180 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x20>  // b.lo, b.ul, b.last
 1ec:	cmp	w1, #0x1b
 1f0:	b.eq	198 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x38>  // b.none
 1f4:	cmp	x0, x19
 1f8:	b.eq	1cc <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x6c>  // b.none
 1fc:	strb	w1, [x19]
 200:	b	1cc <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x6c>
 204:	mov	x19, x0
 208:	b	1b4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x54>
 20c:	ret

0000000000000210 <_ZN11__sanitizer12LoadedModule5clearEv>:
 210:	stp	x19, x30, [sp, #-16]!
 214:	mov	x19, x0
 218:	mov	x1, #0x0                   	// #0
 21c:	ldr	x0, [x0]
 220:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 224:	str	xzr, [x19, #8]
 228:	str	xzr, [x19, #16]
 22c:	str	xzr, [x19]
 230:	str	wzr, [x19, #24]
 234:	mov	x2, #0x10                  	// #16
 238:	mov	w1, #0x0                   	// #0
 23c:	add	x0, x19, #0x1c
 240:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 244:	strb	wzr, [x19, #44]
 248:	ldr	x1, [x19, #48]
 24c:	cbnz	x1, 270 <_ZN11__sanitizer12LoadedModule5clearEv+0x60>
 250:	ldp	x19, x30, [sp], #16
 254:	ret
 258:	sub	x1, x1, #0x1
 25c:	str	x1, [x19, #48]
 260:	mov	x1, #0x0                   	// #0
 264:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 268:	ldr	x1, [x19, #48]
 26c:	cbz	x1, 250 <_ZN11__sanitizer12LoadedModule5clearEv+0x40>
 270:	ldr	x0, [x19, #56]
 274:	ldr	x2, [x0]
 278:	str	x2, [x19, #56]
 27c:	cbnz	x2, 258 <_ZN11__sanitizer12LoadedModule5clearEv+0x48>
 280:	str	xzr, [x19, #64]
 284:	b	258 <_ZN11__sanitizer12LoadedModule5clearEv+0x48>

0000000000000288 <_ZN11__sanitizer12LoadedModule3setEPKcm>:
 288:	stp	x19, x20, [sp, #-32]!
 28c:	stp	x21, x30, [sp, #16]
 290:	mov	x19, x0
 294:	mov	x21, x1
 298:	mov	x20, x2
 29c:	bl	210 <_ZN11__sanitizer12LoadedModule5clearEv>
 2a0:	mov	x0, x21
 2a4:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2a8:	str	x0, [x19]
 2ac:	str	x20, [x19, #8]
 2b0:	ldp	x21, x30, [sp, #16]
 2b4:	ldp	x19, x20, [sp], #32
 2b8:	ret

00000000000002bc <_ZN11__sanitizer12LoadedModule3setEPKcmNS_10ModuleArchEPhb>:
 2bc:	stp	x19, x20, [sp, #-48]!
 2c0:	stp	x21, x22, [sp, #16]
 2c4:	str	x30, [sp, #32]
 2c8:	mov	x19, x0
 2cc:	mov	w21, w3
 2d0:	mov	x20, x4
 2d4:	and	w22, w5, #0xff
 2d8:	bl	288 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 2dc:	str	w21, [x19, #24]
 2e0:	mov	x2, #0x10                  	// #16
 2e4:	mov	x1, x20
 2e8:	add	x0, x19, #0x1c
 2ec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2f0:	strb	w22, [x19, #44]
 2f4:	ldp	x21, x22, [sp, #16]
 2f8:	ldr	x30, [sp, #32]
 2fc:	ldp	x19, x20, [sp], #48
 300:	ret

0000000000000304 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>:
 304:	stp	x19, x20, [sp, #-64]!
 308:	stp	x21, x22, [sp, #16]
 30c:	stp	x23, x24, [sp, #32]
 310:	stp	x25, x30, [sp, #48]
 314:	mov	x20, x0
 318:	mov	x23, x1
 31c:	mov	x22, x2
 320:	and	w24, w3, #0xff
 324:	and	w25, w4, #0xff
 328:	mov	x21, x5
 32c:	mov	x2, #0x0                   	// #0
 330:	mov	x1, #0x0                   	// #0
 334:	mov	x0, #0x30                  	// #48
 338:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 33c:	mov	x19, x0
 340:	str	xzr, [x0]
 344:	str	x23, [x0, #8]
 348:	str	x22, [x0, #16]
 34c:	strb	w24, [x0, #24]
 350:	strb	w25, [x0, #25]
 354:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 358:	add	x1, x1, #0x0
 35c:	cmp	x21, #0x0
 360:	mov	x2, #0x10                  	// #16
 364:	csel	x1, x1, x21, eq  // eq = none
 368:	add	x0, x0, #0x1a
 36c:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 370:	ldr	x0, [x20, #48]
 374:	cbnz	x0, 3b4 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0xb0>
 378:	str	xzr, [x19]
 37c:	str	x19, [x20, #64]
 380:	str	x19, [x20, #56]
 384:	mov	x0, #0x1                   	// #1
 388:	str	x0, [x20, #48]
 38c:	cbz	w24, 3a0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x9c>
 390:	ldr	x0, [x20, #16]
 394:	cmp	x0, x22
 398:	b.cs	3a0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x9c>  // b.hs, b.nlast
 39c:	str	x22, [x20, #16]
 3a0:	ldp	x21, x22, [sp, #16]
 3a4:	ldp	x23, x24, [sp, #32]
 3a8:	ldp	x25, x30, [sp, #48]
 3ac:	ldp	x19, x20, [sp], #64
 3b0:	ret
 3b4:	str	xzr, [x19]
 3b8:	ldr	x1, [x20, #64]
 3bc:	str	x19, [x1]
 3c0:	str	x19, [x20, #64]
 3c4:	ldr	x0, [x20, #48]
 3c8:	add	x0, x0, #0x1
 3cc:	str	x0, [x20, #48]
 3d0:	b	38c <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x88>

00000000000003d4 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>:
 3d4:	ldr	x0, [x0, #56]
 3d8:	cbnz	x0, 3ec <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x18>
 3dc:	mov	w0, #0x0                   	// #0
 3e0:	b	408 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x34>
 3e4:	ldr	x0, [x0]
 3e8:	cbz	x0, 408 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x34>
 3ec:	ldr	x2, [x0, #8]
 3f0:	cmp	x2, x1
 3f4:	b.hi	3e4 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x10>  // b.pmore
 3f8:	ldr	x2, [x0, #16]
 3fc:	cmp	x2, x1
 400:	b.ls	3e4 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x10>  // b.plast
 404:	mov	w0, #0x1                   	// #1
 408:	ret

000000000000040c <_ZN11__sanitizer17IncreaseTotalMmapEm>:
 40c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 410:	ldr	x1, [x1]
 414:	ldr	x1, [x1, #128]
 418:	cbz	x1, 454 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x48>
 41c:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 420:	add	x1, x1, #0x0
 424:	add	x1, x1, #0x8
 428:	ldxr	x2, [x1]
 42c:	add	x3, x2, x0
 430:	stlxr	w4, x3, [x1]
 434:	cbnz	w4, 428 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x1c>
 438:	dmb	ish
 43c:	add	x0, x2, x0
 440:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 444:	ldr	x1, [x1]
 448:	ldr	x1, [x1, #128]
 44c:	cmp	x1, x0, lsr #20
 450:	b.ls	458 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x4c>  // b.plast
 454:	ret
 458:	str	x30, [sp, #-16]!
 45c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 460:	add	x0, x0, #0x0
 464:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 468:	bl	0 <_ZN11__sanitizer3DieEv>

000000000000046c <_ZN11__sanitizer17DecreaseTotalMmapEm>:
 46c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 470:	ldr	x1, [x1]
 474:	ldr	x1, [x1, #128]
 478:	cbz	x1, 4a0 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x34>
 47c:	neg	x0, x0
 480:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 484:	add	x1, x1, #0x0
 488:	add	x1, x1, #0x8
 48c:	ldxr	x2, [x1]
 490:	add	x2, x2, x0
 494:	stlxr	w3, x2, [x1]
 498:	cbnz	w3, 48c <_ZN11__sanitizer17DecreaseTotalMmapEm+0x20>
 49c:	dmb	ish
 4a0:	ret

00000000000004a4 <_ZN11__sanitizer13TemplateMatchEPKcS1_>:
 4a4:	cbz	x1, 64c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1a8>
 4a8:	stp	x19, x20, [sp, #-96]!
 4ac:	stp	x23, x24, [sp, #32]
 4b0:	str	x30, [sp, #80]
 4b4:	mov	x19, x0
 4b8:	mov	x23, x1
 4bc:	ldrb	w1, [x1]
 4c0:	mov	w0, #0x0                   	// #0
 4c4:	cbz	w1, 678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 4c8:	mov	w0, #0x1                   	// #1
 4cc:	cbz	x19, 678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 4d0:	stp	x21, x22, [sp, #16]
 4d4:	stp	x25, x26, [sp, #48]
 4d8:	stp	x27, x28, [sp, #64]
 4dc:	ldrb	w0, [x19]
 4e0:	mov	w24, #0x0                   	// #0
 4e4:	cmp	w0, #0x5e
 4e8:	b.eq	504 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x60>  // b.none
 4ec:	mov	w1, #0x0                   	// #0
 4f0:	mov	w26, #0x2a                  	// #42
 4f4:	mov	w25, #0x24                  	// #36
 4f8:	mov	w28, #0x1                   	// #1
 4fc:	mov	w27, #0x0                   	// #0
 500:	b	5bc <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x118>
 504:	add	x19, x19, #0x1
 508:	mov	w24, #0x1                   	// #1
 50c:	b	4ec <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x48>
 510:	add	x19, x19, #0x1
 514:	mov	x0, x23
 518:	mov	w1, w28
 51c:	b	5b4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x110>
 520:	ldrb	w0, [x23]
 524:	cmp	w0, #0x0
 528:	cset	w0, eq  // eq = none
 52c:	orr	w1, w1, w0
 530:	and	w0, w1, #0xff
 534:	ldp	x21, x22, [sp, #16]
 538:	ldp	x25, x26, [sp, #48]
 53c:	ldp	x27, x28, [sp, #64]
 540:	b	678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 544:	cbnz	x0, 60c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x168>
 548:	mov	x1, x19
 54c:	mov	x0, x23
 550:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 554:	mov	x21, x0
 558:	mov	x0, x19
 55c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 560:	add	x0, x21, x0
 564:	mov	x19, x22
 568:	b	59c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf8>
 56c:	strb	wzr, [x20]
 570:	mov	x1, x19
 574:	mov	x0, x23
 578:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 57c:	mov	x21, x0
 580:	mov	x0, x19
 584:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 588:	add	x0, x21, x0
 58c:	mov	x19, x20
 590:	cmp	x20, x22
 594:	csel	w1, w25, w26, eq  // eq = none
 598:	strb	w1, [x19]
 59c:	cbz	x21, 69c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1f8>
 5a0:	cmp	x23, x21
 5a4:	cset	w1, ne  // ne = any
 5a8:	ands	w1, w24, w1
 5ac:	b.ne	638 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x194>  // b.any
 5b0:	cbz	x19, 654 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1b0>
 5b4:	mov	x23, x0
 5b8:	mov	w24, w27
 5bc:	ldrb	w0, [x19]
 5c0:	cbz	w0, 668 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1c4>
 5c4:	cmp	w0, #0x2a
 5c8:	b.eq	510 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x6c>  // b.none
 5cc:	cmp	w0, #0x24
 5d0:	b.eq	520 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x7c>  // b.none
 5d4:	ldrb	w0, [x23]
 5d8:	cbz	w0, 688 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1e4>
 5dc:	mov	w1, w26
 5e0:	mov	x0, x19
 5e4:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 5e8:	mov	x20, x0
 5ec:	mov	w1, w25
 5f0:	mov	x0, x19
 5f4:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 5f8:	mov	x22, x0
 5fc:	cbz	x20, 544 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 600:	cmp	x0, #0x0
 604:	ccmp	x20, x0, #0x0, ne  // ne = any
 608:	b.ls	56c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xc8>  // b.plast
 60c:	strb	wzr, [x22]
 610:	mov	x1, x19
 614:	mov	x0, x23
 618:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 61c:	mov	x21, x0
 620:	mov	x0, x19
 624:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 628:	add	x0, x21, x0
 62c:	mov	x19, x22
 630:	mov	w1, w25
 634:	b	598 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf4>
 638:	mov	w0, #0x0                   	// #0
 63c:	ldp	x21, x22, [sp, #16]
 640:	ldp	x25, x26, [sp, #48]
 644:	ldp	x27, x28, [sp, #64]
 648:	b	678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 64c:	mov	w0, #0x0                   	// #0
 650:	ret
 654:	mov	w0, #0x1                   	// #1
 658:	ldp	x21, x22, [sp, #16]
 65c:	ldp	x25, x26, [sp, #48]
 660:	ldp	x27, x28, [sp, #64]
 664:	b	678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 668:	mov	w0, #0x1                   	// #1
 66c:	ldp	x21, x22, [sp, #16]
 670:	ldp	x25, x26, [sp, #48]
 674:	ldp	x27, x28, [sp, #64]
 678:	ldp	x23, x24, [sp, #32]
 67c:	ldr	x30, [sp, #80]
 680:	ldp	x19, x20, [sp], #96
 684:	ret
 688:	mov	w0, #0x0                   	// #0
 68c:	ldp	x21, x22, [sp, #16]
 690:	ldp	x25, x26, [sp, #48]
 694:	ldp	x27, x28, [sp, #64]
 698:	b	678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>
 69c:	mov	w0, #0x0                   	// #0
 6a0:	ldp	x21, x22, [sp, #16]
 6a4:	ldp	x25, x26, [sp, #48]
 6a8:	ldp	x27, x28, [sp, #64]
 6ac:	b	678 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x1d4>

00000000000006b0 <_ZN11__sanitizer14GetProcessNameEv>:
 6b0:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6b4:	add	x0, x0, #0x0
 6b8:	ret

00000000000006bc <_ZN11__sanitizer17UpdateProcessNameEv>:
 6bc:	str	x30, [sp, #-16]!
 6c0:	mov	x1, #0x1000                	// #4096
 6c4:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6c8:	add	x0, x0, #0x0
 6cc:	bl	110 <_ZN11__sanitizerL15ReadProcessNameEPcm>
 6d0:	ldr	x30, [sp], #16
 6d4:	ret

00000000000006d8 <_ZN11__sanitizer15CacheBinaryNameEv>:
 6d8:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6dc:	ldrb	w0, [x0]
 6e0:	cbz	w0, 6e8 <_ZN11__sanitizer15CacheBinaryNameEv+0x10>
 6e4:	ret
 6e8:	str	x30, [sp, #-16]!
 6ec:	mov	x1, #0x1000                	// #4096
 6f0:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6f4:	add	x0, x0, #0x0
 6f8:	bl	0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
 6fc:	mov	x1, #0x1000                	// #4096
 700:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 704:	add	x0, x0, #0x0
 708:	bl	110 <_ZN11__sanitizerL15ReadProcessNameEPcm>
 70c:	ldr	x30, [sp], #16
 710:	ret

0000000000000714 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>:
 714:	stp	x19, x20, [sp, #-32]!
 718:	str	x30, [sp, #16]
 71c:	mov	x20, x0
 720:	mov	x19, x1
 724:	bl	6d8 <_ZN11__sanitizer15CacheBinaryNameEv>
 728:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 72c:	add	x0, x0, #0x0
 730:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 734:	cbnz	x19, 748 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x34>
 738:	mov	x0, x19
 73c:	ldr	x30, [sp, #16]
 740:	ldp	x19, x20, [sp], #32
 744:	ret
 748:	sub	x19, x19, #0x1
 74c:	cmp	x19, x0
 750:	csel	x19, x19, x0, ls  // ls = plast
 754:	mov	x2, x19
 758:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 75c:	add	x1, x1, #0x0
 760:	mov	x0, x20
 764:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 768:	strb	wzr, [x20, x19]
 76c:	b	738 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x24>

0000000000000770 <_ZN11__sanitizer12PrintCmdlineEv>:
 770:	stp	x19, x20, [sp, #-32]!
 774:	str	x30, [sp, #16]
 778:	bl	0 <_ZN11__sanitizer7GetArgvEv>
 77c:	cbz	x0, 7c0 <_ZN11__sanitizer12PrintCmdlineEv+0x50>
 780:	mov	x19, x0
 784:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 788:	add	x0, x0, #0x0
 78c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 790:	ldr	x1, [x19]
 794:	cbz	x1, 7b4 <_ZN11__sanitizer12PrintCmdlineEv+0x44>
 798:	add	x19, x19, #0x8
 79c:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 7a0:	add	x20, x20, #0x0
 7a4:	mov	x0, x20
 7a8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7ac:	ldr	x1, [x19], #8
 7b0:	cbnz	x1, 7a4 <_ZN11__sanitizer12PrintCmdlineEv+0x34>
 7b4:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 7b8:	add	x0, x0, #0x0
 7bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7c0:	ldr	x30, [sp, #16]
 7c4:	ldp	x19, x20, [sp], #32
 7c8:	ret

00000000000007cc <_ZN11__sanitizer14RunMallocHooksEPKvm>:
 7cc:	stp	x19, x20, [sp, #-48]!
 7d0:	stp	x21, x22, [sp, #16]
 7d4:	str	x30, [sp, #32]
 7d8:	mov	x22, x0
 7dc:	mov	x21, x1
 7e0:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 7e4:	add	x20, x20, #0x0
 7e8:	add	x19, x20, #0x10
 7ec:	add	x20, x20, #0x60
 7f0:	ldr	x2, [x19]
 7f4:	cbz	x2, 810 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x44>
 7f8:	mov	x1, x21
 7fc:	mov	x0, x22
 800:	blr	x2
 804:	add	x19, x19, #0x10
 808:	cmp	x19, x20
 80c:	b.ne	7f0 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x24>  // b.any
 810:	ldp	x21, x22, [sp, #16]
 814:	ldr	x30, [sp, #32]
 818:	ldp	x19, x20, [sp], #48
 81c:	ret

0000000000000820 <_ZN11__sanitizer12RunFreeHooksEPKv>:
 820:	stp	x19, x20, [sp, #-32]!
 824:	stp	x21, x30, [sp, #16]
 828:	mov	x21, x0
 82c:	mov	x19, #0x0                   	// #0
 830:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 834:	add	x20, x20, #0x0
 838:	add	x20, x20, #0x10
 83c:	add	x1, x20, x19
 840:	ldr	x1, [x1, #8]
 844:	cbz	x1, 85c <_ZN11__sanitizer12RunFreeHooksEPKv+0x3c>
 848:	mov	x0, x21
 84c:	blr	x1
 850:	add	x19, x19, #0x10
 854:	cmp	x19, #0x50
 858:	b.ne	83c <_ZN11__sanitizer12RunFreeHooksEPKv+0x1c>  // b.any
 85c:	ldp	x21, x30, [sp, #16]
 860:	ldp	x19, x20, [sp], #32
 864:	ret

0000000000000868 <__sanitizer_report_error_summary>:
 868:	str	x30, [sp, #-16]!
 86c:	mov	x1, x0
 870:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 874:	add	x0, x0, #0x0
 878:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 87c:	ldr	x30, [sp], #16
 880:	ret

0000000000000884 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>:
 884:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 888:	ldr	x2, [x2]
 88c:	ldrb	w2, [x2, #60]
 890:	cbnz	w2, 898 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x14>
 894:	ret
 898:	stp	x19, x20, [sp, #-80]!
 89c:	stp	x21, x22, [sp, #16]
 8a0:	str	x30, [sp, #32]
 8a4:	mov	x20, x0
 8a8:	mov	x19, x1
 8ac:	str	xzr, [sp, #56]
 8b0:	str	xzr, [sp, #64]
 8b4:	str	xzr, [sp, #48]
 8b8:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 8bc:	ldr	x0, [x0]
 8c0:	cbz	x0, 9a8 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x124>
 8c4:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 8c8:	ldr	x2, [x0]
 8cc:	sub	x0, x2, #0x1
 8d0:	tst	x0, x2
 8d4:	b.ne	9b8 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x134>  // b.any
 8d8:	add	x21, x2, #0x3ff
 8dc:	neg	x2, x2
 8e0:	and	x21, x21, x2
 8e4:	mov	w2, #0x0                   	// #0
 8e8:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 8ec:	add	x1, x1, #0x0
 8f0:	mov	x0, x21
 8f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 8f8:	mov	x22, x0
 8fc:	ldr	x2, [sp, #64]
 900:	ldr	x1, [sp, #48]
 904:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 908:	ldr	x1, [sp, #56]
 90c:	ldr	x0, [sp, #48]
 910:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 914:	str	x22, [sp, #48]
 918:	str	x21, [sp, #56]
 91c:	ldr	x0, [sp, #64]
 920:	cmp	x0, #0x3ff
 924:	b.hi	94c <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xc8>  // b.pmore
 928:	cmp	x21, #0x3ff
 92c:	b.ls	9c8 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x144>  // b.plast
 930:	ldr	x0, [sp, #64]
 934:	mov	x2, #0x400                 	// #1024
 938:	sub	x2, x2, x0
 93c:	mov	w1, #0x0                   	// #0
 940:	ldr	x3, [sp, #48]
 944:	add	x0, x3, x0
 948:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 94c:	mov	x0, #0x400                 	// #1024
 950:	str	x0, [sp, #64]
 954:	str	xzr, [sp, #72]
 958:	ldr	x0, [sp, #48]
 95c:	strb	wzr, [x0]
 960:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 964:	ldr	x2, [x0]
 968:	cmp	x19, #0x0
 96c:	mov	x3, x20
 970:	csel	x2, x2, x19, eq  // eq = none
 974:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 978:	add	x1, x1, #0x0
 97c:	add	x0, sp, #0x30
 980:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 984:	ldr	x0, [sp, #48]
 988:	bl	868 <__sanitizer_report_error_summary>
 98c:	ldr	x1, [sp, #56]
 990:	ldr	x0, [sp, #48]
 994:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 998:	ldp	x21, x22, [sp, #16]
 99c:	ldr	x30, [sp, #32]
 9a0:	ldp	x19, x20, [sp], #80
 9a4:	ret
 9a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9ac:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9b0:	str	x0, [x1]
 9b4:	b	8c4 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x40>
 9b8:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9bc:	add	x0, x0, #0x0
 9c0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9c4:	bl	0 <_ZN11__sanitizer3DieEv>
 9c8:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9cc:	ldr	x0, [x0]
 9d0:	cbz	x0, a30 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x1ac>
 9d4:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9d8:	ldr	x0, [x0]
 9dc:	sub	x1, x0, #0x1
 9e0:	tst	x1, x0
 9e4:	b.ne	a40 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x1bc>  // b.any
 9e8:	add	x21, x0, #0x3ff
 9ec:	neg	x0, x0
 9f0:	and	x21, x21, x0
 9f4:	mov	w2, #0x0                   	// #0
 9f8:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9fc:	add	x1, x1, #0x0
 a00:	mov	x0, x21
 a04:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a08:	mov	x22, x0
 a0c:	ldr	x2, [sp, #64]
 a10:	ldr	x1, [sp, #48]
 a14:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a18:	ldr	x1, [sp, #56]
 a1c:	ldr	x0, [sp, #48]
 a20:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a24:	str	x22, [sp, #48]
 a28:	str	x21, [sp, #56]
 a2c:	b	930 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xac>
 a30:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a34:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a38:	str	x0, [x1]
 a3c:	b	9d4 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x150>
 a40:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a44:	add	x0, x0, #0x0
 a48:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000a50 <__sanitizer_acquire_crash_state>:
 a50:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a54:	add	x0, x0, #0x0
 a58:	add	x0, x0, #0x68
 a5c:	mov	w2, #0x1                   	// #1
 a60:	ldxrb	w1, [x0]
 a64:	stxrb	w3, w2, [x0]
 a68:	cbnz	w3, a60 <__sanitizer_acquire_crash_state+0x10>
 a6c:	dmb	ish
 a70:	ands	w0, w1, #0xff
 a74:	cset	w0, eq  // eq = none
 a78:	ret

0000000000000a7c <__sanitizer_install_malloc_and_free_hooks>:
 a7c:	cmp	x0, #0x0
 a80:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 a84:	b.eq	ae0 <__sanitizer_install_malloc_and_free_hooks+0x64>  // b.none
 a88:	mov	x2, #0x0                   	// #0
 a8c:	adrp	x3, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a90:	add	x3, x3, #0x0
 a94:	add	x3, x3, #0x10
 a98:	mov	w4, w2
 a9c:	lsl	x5, x2, #4
 aa0:	ldr	x5, [x5, x3]
 aa4:	cbz	x5, abc <__sanitizer_install_malloc_and_free_hooks+0x40>
 aa8:	add	x2, x2, #0x1
 aac:	cmp	x2, #0x5
 ab0:	b.ne	a98 <__sanitizer_install_malloc_and_free_hooks+0x1c>  // b.any
 ab4:	mov	w0, #0x0                   	// #0
 ab8:	ret
 abc:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 ac0:	add	x2, x2, #0x0
 ac4:	add	x2, x2, #0x10
 ac8:	sbfiz	x3, x4, #4, #32
 acc:	add	x5, x2, x3
 ad0:	str	x0, [x2, x3]
 ad4:	str	x1, [x5, #8]
 ad8:	add	w0, w4, #0x1
 adc:	b	ab8 <__sanitizer_install_malloc_and_free_hooks+0x3c>
 ae0:	mov	w0, #0x0                   	// #0
 ae4:	b	ab8 <__sanitizer_install_malloc_and_free_hooks+0x3c>

sanitizer_common_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>:
   0:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
   4:	ldr	x3, [x1]
   8:	cbnz	x3, 18 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE+0x18>
   c:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  10:	str	x0, [x1]
  14:	ret
  18:	str	x30, [sp, #-16]!
  1c:	mov	x4, #0x0                   	// #0
  20:	adrp	x2, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  24:	add	x2, x2, #0x0
  28:	mov	w1, #0x16                  	// #22
  2c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000038 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  38:	mov	x0, #0x0                   	// #0
  3c:	ret

0000000000000040 <_ZN11__sanitizer16BackgroundThreadEPv>:
  40:	stp	x19, x20, [sp, #-128]!
  44:	stp	x21, x22, [sp, #16]
  48:	stp	x23, x24, [sp, #32]
  4c:	stp	x25, x26, [sp, #48]
  50:	stp	x27, x28, [sp, #64]
  54:	str	x30, [sp, #80]
  58:	stp	d8, d9, [sp, #96]
  5c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  60:	ldr	x0, [x0]
  64:	ldr	x21, [x0, #136]
  68:	ldr	x22, [x0, #144]
  6c:	ldrb	w27, [x0, #152]
  70:	fmov	d8, xzr
  74:	mov	w24, #0x0                   	// #0
  78:	mov	x26, #0x0                   	// #0
  7c:	mov	x23, #0x0                   	// #0
  80:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
  84:	ldr	x25, [x25]
  88:	mov	x28, #0xcccccccccccccccc    	// #-3689348814741910324
  8c:	movk	x28, #0xcccd
  90:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  94:	ldr	x0, [x0]
  98:	str	x0, [sp, #120]
  9c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  a0:	ldr	d9, [x0]
  a4:	b	168 <_ZN11__sanitizer16BackgroundThreadEPv+0x128>
  a8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  ac:	ldr	x0, [x0]
  b0:	mov	x2, x19
  b4:	ldr	x1, [x0]
  b8:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c4:	mov	x23, x19
  c8:	b	198 <_ZN11__sanitizer16BackgroundThreadEPv+0x158>
  cc:	lsr	x3, x3, #20
  d0:	ldr	x2, [x20]
  d4:	ldr	x0, [sp, #120]
  d8:	ldr	x1, [x0]
  dc:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  e0:	add	x0, x0, #0x0
  e4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  e8:	ldr	x26, [x20, #8]
  ec:	b	1c0 <_ZN11__sanitizer16BackgroundThreadEPv+0x180>
  f0:	mov	x3, x19
  f4:	mov	x2, x21
  f8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  fc:	ldr	x0, [x0]
 100:	ldr	x1, [x0]
 104:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 108:	add	x0, x0, #0x0
 10c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 110:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
 114:	bl	0 <_ZN11__sanitizer3DieEv>
 118:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 11c:	ldr	x0, [x0]
 120:	mov	x3, x19
 124:	mov	x2, x22
 128:	ldr	x1, [x0]
 12c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 130:	add	x0, x0, #0x0
 134:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 138:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 13c:	ldr	x1, [x0]
 140:	mov	w24, w20
 144:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 148:	mov	w0, #0x1                   	// #1
 14c:	blr	x1
 150:	cbz	w27, 168 <_ZN11__sanitizer16BackgroundThreadEPv+0x128>
 154:	ucvtf	d1, x19
 158:	ucvtf	d0, d8
 15c:	fmul	d0, d0, d9
 160:	fcmpe	d1, d0
 164:	b.gt	20c <_ZN11__sanitizer16BackgroundThreadEPv+0x1cc>
 168:	mov	w0, #0x64                  	// #100
 16c:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
 170:	bl	0 <_ZN11__sanitizer6GetRSSEv>
 174:	lsr	x19, x0, #20
 178:	ldr	w0, [x25]
 17c:	cbz	w0, 1c0 <_ZN11__sanitizer16BackgroundThreadEPv+0x180>
 180:	add	x0, x23, x23, lsl #1
 184:	lsl	x0, x0, #2
 188:	sub	x0, x0, x23
 18c:	umulh	x0, x0, x28
 190:	cmp	x19, x0, lsr #3
 194:	b.hi	a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>  // b.pmore
 198:	bl	38 <_ZN11__sanitizer18StackDepotGetStatsEv>
 19c:	mov	x20, x0
 1a0:	cbz	x0, 1c0 <_ZN11__sanitizer16BackgroundThreadEPv+0x180>
 1a4:	ldr	x3, [x0, #8]
 1a8:	add	x0, x26, x26, lsl #1
 1ac:	lsl	x0, x0, #2
 1b0:	sub	x0, x0, x26
 1b4:	umulh	x0, x0, x28
 1b8:	cmp	x3, x0, lsr #3
 1bc:	b.hi	cc <_ZN11__sanitizer16BackgroundThreadEPv+0x8c>  // b.pmore
 1c0:	cmp	x21, #0x0
 1c4:	ccmp	x21, x19, #0x2, ne  // ne = any
 1c8:	b.cc	f0 <_ZN11__sanitizer16BackgroundThreadEPv+0xb0>  // b.lo, b.ul, b.last
 1cc:	cbz	x22, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 1d0:	cmp	x22, x19
 1d4:	cset	w20, cc  // cc = lo, ul, last
 1d8:	eor	w0, w24, #0x1
 1dc:	ands	w20, w20, w0
 1e0:	b.ne	118 <_ZN11__sanitizer16BackgroundThreadEPv+0xd8>  // b.any
 1e4:	cmp	w24, #0x0
 1e8:	ccmp	x22, x19, #0x0, ne  // ne = any
 1ec:	b.cc	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>  // b.lo, b.ul, b.last
 1f0:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1f4:	ldr	x1, [x0]
 1f8:	mov	w24, w20
 1fc:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 200:	mov	w0, #0x0                   	// #0
 204:	blr	x1
 208:	b	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 20c:	mov	x1, x19
 210:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 214:	add	x0, x0, #0x0
 218:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 21c:	mov	x1, #0x14                  	// #20
 220:	mov	x0, #0x5a                  	// #90
 224:	bl	0 <__sanitizer_print_memory_profile>
 228:	fmov	d8, x19
 22c:	b	168 <_ZN11__sanitizer16BackgroundThreadEPv+0x128>

0000000000000230 <_ZN11__sanitizer13WriteToSyslogEPKc>:
 230:	stp	x19, x20, [sp, #-80]!
 234:	stp	x21, x22, [sp, #16]
 238:	str	x30, [sp, #32]
 23c:	mov	x20, x0
 240:	str	xzr, [sp, #56]
 244:	str	xzr, [sp, #64]
 248:	str	xzr, [sp, #48]
 24c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 250:	ldr	x1, [x1]
 254:	ldr	x0, [x1]
 258:	cbz	x0, 344 <_ZN11__sanitizer13WriteToSyslogEPKc+0x114>
 25c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 260:	ldr	x0, [x0]
 264:	ldr	x1, [x0]
 268:	sub	x0, x1, #0x1
 26c:	tst	x0, x1
 270:	b.ne	358 <_ZN11__sanitizer13WriteToSyslogEPKc+0x128>  // b.any
 274:	mov	x22, #0xffff                	// #65535
 278:	add	x19, x1, x22
 27c:	neg	x1, x1
 280:	and	x19, x19, x1
 284:	mov	w2, #0x0                   	// #0
 288:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 28c:	add	x1, x1, #0x0
 290:	mov	x0, x19
 294:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 298:	mov	x21, x0
 29c:	ldr	x2, [sp, #64]
 2a0:	ldr	x1, [sp, #48]
 2a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2a8:	ldr	x1, [sp, #56]
 2ac:	ldr	x0, [sp, #48]
 2b0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2b4:	str	x21, [sp, #48]
 2b8:	str	x19, [sp, #56]
 2bc:	ldr	x0, [sp, #64]
 2c0:	cmp	x0, x22
 2c4:	b.hi	2ec <_ZN11__sanitizer13WriteToSyslogEPKc+0xbc>  // b.pmore
 2c8:	cmp	x19, x22
 2cc:	b.ls	368 <_ZN11__sanitizer13WriteToSyslogEPKc+0x138>  // b.plast
 2d0:	ldr	x0, [sp, #64]
 2d4:	mov	x2, #0x10000               	// #65536
 2d8:	sub	x2, x2, x0
 2dc:	mov	w1, #0x0                   	// #0
 2e0:	ldr	x3, [sp, #48]
 2e4:	add	x0, x3, x0
 2e8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2ec:	mov	x0, #0x10000               	// #65536
 2f0:	str	x0, [sp, #64]
 2f4:	str	xzr, [sp, #72]
 2f8:	ldr	x0, [sp, #48]
 2fc:	strb	wzr, [x0]
 300:	mov	x2, x20
 304:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 308:	add	x1, x1, #0x0
 30c:	add	x0, sp, #0x30
 310:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 314:	ldr	x20, [sp, #48]
 318:	mov	w21, #0xa                   	// #10
 31c:	mov	w1, w21
 320:	mov	x0, x20
 324:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 328:	mov	x19, x0
 32c:	cbz	x0, 400 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1d0>
 330:	strb	wzr, [x0]
 334:	mov	x0, x20
 338:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 33c:	add	x20, x19, #0x1
 340:	b	31c <_ZN11__sanitizer13WriteToSyslogEPKc+0xec>
 344:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 348:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 34c:	ldr	x1, [x1]
 350:	str	x0, [x1]
 354:	b	25c <_ZN11__sanitizer13WriteToSyslogEPKc+0x2c>
 358:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 35c:	add	x0, x0, #0x0
 360:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 364:	bl	0 <_ZN11__sanitizer3DieEv>
 368:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 36c:	ldr	x0, [x0]
 370:	ldr	x0, [x0]
 374:	cbz	x0, 3dc <_ZN11__sanitizer13WriteToSyslogEPKc+0x1ac>
 378:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 37c:	ldr	x0, [x0]
 380:	ldr	x0, [x0]
 384:	sub	x1, x0, #0x1
 388:	tst	x1, x0
 38c:	b.ne	3f0 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1c0>  // b.any
 390:	add	x19, x0, #0xf, lsl #12
 394:	add	x19, x19, #0xfff
 398:	neg	x0, x0
 39c:	and	x19, x19, x0
 3a0:	mov	w2, #0x0                   	// #0
 3a4:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 3a8:	add	x1, x1, #0x0
 3ac:	mov	x0, x19
 3b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3b4:	mov	x21, x0
 3b8:	ldr	x2, [sp, #64]
 3bc:	ldr	x1, [sp, #48]
 3c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3c4:	ldr	x1, [sp, #56]
 3c8:	ldr	x0, [sp, #48]
 3cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3d0:	str	x21, [sp, #48]
 3d4:	str	x19, [sp, #56]
 3d8:	b	2d0 <_ZN11__sanitizer13WriteToSyslogEPKc+0xa0>
 3dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3e0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3e4:	ldr	x1, [x1]
 3e8:	str	x0, [x1]
 3ec:	b	378 <_ZN11__sanitizer13WriteToSyslogEPKc+0x148>
 3f0:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 3f4:	add	x0, x0, #0x0
 3f8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3fc:	bl	0 <_ZN11__sanitizer3DieEv>
 400:	ldrb	w0, [x20]
 404:	cbnz	w0, 424 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1f4>
 408:	ldr	x1, [sp, #56]
 40c:	ldr	x0, [sp, #48]
 410:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 414:	ldp	x21, x22, [sp, #16]
 418:	ldr	x30, [sp, #32]
 41c:	ldp	x19, x20, [sp], #80
 420:	ret
 424:	mov	x0, x20
 428:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 42c:	b	408 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1d8>

0000000000000430 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv>:
 430:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 434:	ldr	x0, [x0]
 438:	ldr	x1, [x0, #136]
 43c:	ldr	x0, [x0, #144]
 440:	orr	x0, x1, x0
 444:	cbnz	x0, 458 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x28>
 448:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 44c:	ldr	x0, [x0]
 450:	ldrb	w0, [x0, #152]
 454:	cbz	w0, 480 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x50>
 458:	adrp	x0, 0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
 45c:	ldr	x0, [x0]
 460:	cbz	x0, 480 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x50>
 464:	str	x30, [sp, #-16]!
 468:	mov	x1, #0x0                   	// #0
 46c:	adrp	x0, 40 <_ZN11__sanitizer16BackgroundThreadEPv>
 470:	add	x0, x0, #0x0
 474:	bl	0 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>
 478:	ldr	x30, [sp], #16
 47c:	ret
 480:	ret

0000000000000484 <_ZN11__sanitizer21SetSandboxingCallbackEPFvvE>:
 484:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 488:	str	x0, [x1]
 48c:	ret

0000000000000490 <__sanitizer_sandbox_on_notify>:
 490:	str	x30, [sp, #-16]!
 494:	bl	0 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>
 498:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 49c:	ldr	x0, [x0]
 4a0:	cbz	x0, 4a8 <__sanitizer_sandbox_on_notify+0x18>
 4a4:	blr	x0
 4a8:	ldr	x30, [sp], #16
 4ac:	ret

sanitizer_coverage_libcdep_new.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x30, [sp, #32]
   c:	mov	x20, x0
  10:	mov	x0, x1
  14:	mov	x22, x2
  18:	mov	x21, x3
  1c:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
  20:	cbz	x0, dc <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xdc>
  24:	mov	x19, x0
  28:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  2c:	ldr	x0, [x0]
  30:	ldr	x23, [x0, #168]
  34:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  38:	adrp	x6, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  3c:	add	x6, x6, #0x0
  40:	mov	x5, x0
  44:	mov	x4, x19
  48:	mov	x3, x23
  4c:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  50:	add	x2, x2, #0x0
  54:	mov	x1, #0x1000                	// #4096
  58:	mov	x0, x20
  5c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  60:	add	x2, sp, #0x3c
  64:	mov	w1, #0x1                   	// #1
  68:	mov	x0, x20
  6c:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
  70:	mov	w19, w0
  74:	cmn	w0, #0x1
  78:	b.eq	fc <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xfc>  // b.none
  7c:	mov	x4, #0x0                   	// #0
  80:	mov	x3, #0x0                   	// #0
  84:	mov	x2, #0x8                   	// #8
  88:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  8c:	add	x1, x1, #0x0
  90:	mov	w0, w19
  94:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  98:	mov	x4, #0x0                   	// #0
  9c:	mov	x3, #0x0                   	// #0
  a0:	lsl	x2, x21, #3
  a4:	mov	x1, x22
  a8:	mov	w0, w19
  ac:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  b0:	mov	w0, w19
  b4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  b8:	mov	x2, x21
  bc:	mov	x1, x20
  c0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  cc:	ldp	x21, x22, [sp, #16]
  d0:	ldp	x23, x30, [sp, #32]
  d4:	ldp	x19, x20, [sp], #64
  d8:	ret
  dc:	mov	x4, #0x0                   	// #0
  e0:	mov	x3, #0x0                   	// #0
  e4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  e8:	add	x2, x2, #0x0
  ec:	mov	w1, #0x28                  	// #40
  f0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  f4:	add	x0, x0, #0x0
  f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  fc:	ldr	w2, [sp, #60]
 100:	mov	x1, x20
 104:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 108:	add	x0, x0, #0x0
 10c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 110:	b	7c <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0x7c>

0000000000000114 <_ZN11__sanitizer18InitializeCoverageEbPKc>:
 114:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 118:	ldrb	w1, [x1]
 11c:	cbz	w1, 124 <_ZN11__sanitizer18InitializeCoverageEbPKc+0x10>
 120:	ret
 124:	stp	x19, x30, [sp, #-16]!
 128:	and	w0, w0, #0xff
 12c:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 130:	strb	w0, [x1]
 134:	adrp	x19, 628 <__sanitizer_cov_dump>
 138:	ldr	x19, [x19]
 13c:	mov	x0, x19
 140:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 144:	mov	x0, x19
 148:	bl	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 14c:	ldp	x19, x30, [sp], #16
 150:	ret

0000000000000154 <__sanitizer_cov_trace_pc_guard>:
 154:	ldr	w1, [x0]
 158:	cbnz	w1, 160 <__sanitizer_cov_trace_pc_guard+0xc>
 15c:	ret
 160:	ldr	w3, [x0]
 164:	cbz	w3, 15c <__sanitizer_cov_trace_pc_guard+0x8>
 168:	str	x30, [sp, #-16]!
 16c:	sub	w3, w3, #0x1
 170:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 174:	ldr	x4, [x0]
 178:	cmp	x3, x4
 17c:	b.cs	1a0 <__sanitizer_cov_trace_pc_guard+0x4c>  // b.hs, b.nlast
 180:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 184:	ldr	x0, [x0]
 188:	ldr	x1, [x0, x3, lsl #3]
 18c:	cbnz	x1, 198 <__sanitizer_cov_trace_pc_guard+0x44>
 190:	sub	x30, x30, #0x1
 194:	str	x30, [x0, x3, lsl #3]
 198:	ldr	x30, [sp], #16
 19c:	ret
 1a0:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1a4:	add	x2, x2, #0x0
 1a8:	mov	w1, #0x1b6                 	// #438
 1ac:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1b0:	add	x0, x0, #0x0
 1b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001b8 <__sanitizer_cov_trace_pc_guard_init>:
 1b8:	cmp	x0, x1
 1bc:	b.eq	3ac <__sanitizer_cov_trace_pc_guard_init+0x1f4>  // b.none
 1c0:	stp	x19, x20, [sp, #-48]!
 1c4:	str	x30, [sp, #32]
 1c8:	mov	x19, x0
 1cc:	mov	x20, x1
 1d0:	ldr	w0, [x0]
 1d4:	cbz	w0, 1e4 <__sanitizer_cov_trace_pc_guard_init+0x2c>
 1d8:	ldr	x30, [sp, #32]
 1dc:	ldp	x19, x20, [sp], #48
 1e0:	ret
 1e4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1e8:	ldrb	w0, [x0]
 1ec:	cbz	w0, 284 <__sanitizer_cov_trace_pc_guard_init+0xcc>
 1f0:	mov	x2, x19
 1f4:	cmp	x19, x20
 1f8:	b.eq	2dc <__sanitizer_cov_trace_pc_guard_init+0x124>  // b.none
 1fc:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 200:	ldr	x1, [x0]
 204:	mov	w0, w1
 208:	b.cs	230 <__sanitizer_cov_trace_pc_guard_init+0x78>  // b.hs, b.nlast
 20c:	add	w0, w0, #0x1
 210:	str	w0, [x19], #4
 214:	cmp	x20, x19
 218:	b.hi	20c <__sanitizer_cov_trace_pc_guard_init+0x54>  // b.pmore
 21c:	add	w1, w1, #0x1
 220:	sub	x20, x20, #0x1
 224:	sub	x20, x20, x2
 228:	lsr	x20, x20, #2
 22c:	add	w0, w1, w20
 230:	mov	w19, w0
 234:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 238:	ldr	x1, [x1]
 23c:	cmp	x1, w0, uxtw
 240:	b.cs	278 <__sanitizer_cov_trace_pc_guard_init+0xc0>  // b.hs, b.nlast
 244:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 248:	ldr	x0, [x0]
 24c:	cmp	x19, x0, lsr #3
 250:	b.hi	300 <__sanitizer_cov_trace_pc_guard_init+0x148>  // b.pmore
 254:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 258:	add	x1, x1, #0x0
 25c:	ldr	x0, [x1, #32]
 260:	sub	x2, x19, x0
 264:	ldr	x3, [x1, #16]
 268:	lsl	x2, x2, #3
 26c:	mov	w1, #0x0                   	// #0
 270:	add	x0, x3, x0, lsl #3
 274:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 278:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 27c:	str	x19, [x0]
 280:	b	1d8 <__sanitizer_cov_trace_pc_guard_init+0x20>
 284:	stp	x21, x22, [sp, #16]
 288:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 28c:	add	x0, x0, #0x0
 290:	add	x21, x0, #0x8
 294:	mov	w1, #0x1                   	// #1
 298:	strb	w1, [x0, #8]
 29c:	bl	0 <_ZN8__sancov21InitializeSancovFlagsEv>
 2a0:	str	xzr, [x21, #16]
 2a4:	str	xzr, [x21, #24]
 2a8:	str	xzr, [x21, #8]
 2ac:	ldr	w0, [x19]
 2b0:	cbnz	w0, 2bc <__sanitizer_cov_trace_pc_guard_init+0x104>
 2b4:	ldp	x21, x22, [sp, #16]
 2b8:	b	1f0 <__sanitizer_cov_trace_pc_guard_init+0x38>
 2bc:	mov	x4, #0x0                   	// #0
 2c0:	mov	x3, #0x0                   	// #0
 2c4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2c8:	add	x2, x2, #0x0
 2cc:	mov	w1, #0x77                  	// #119
 2d0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2d4:	add	x0, x0, #0x0
 2d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2dc:	stp	x21, x22, [sp, #16]
 2e0:	mov	x4, x20
 2e4:	mov	x3, x19
 2e8:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2ec:	add	x2, x2, #0x0
 2f0:	mov	w1, #0x78                  	// #120
 2f4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2f8:	add	x0, x0, #0x0
 2fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 300:	stp	x21, x22, [sp, #16]
 304:	lsl	x20, x19, #3
 308:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 30c:	ldr	x0, [x0]
 310:	ldr	x0, [x0]
 314:	cbz	x0, 388 <__sanitizer_cov_trace_pc_guard_init+0x1d0>
 318:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 31c:	ldr	x0, [x0]
 320:	ldr	x0, [x0]
 324:	sub	x21, x0, #0x1
 328:	tst	x0, x21
 32c:	b.ne	39c <__sanitizer_cov_trace_pc_guard_init+0x1e4>  // b.any
 330:	add	x20, x20, x21
 334:	neg	x21, x0
 338:	and	x21, x20, x21
 33c:	mov	w2, #0x0                   	// #0
 340:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 344:	add	x1, x1, #0x0
 348:	mov	x0, x21
 34c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 350:	mov	x22, x0
 354:	adrp	x20, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 358:	add	x20, x20, #0x0
 35c:	ldr	x2, [x20, #32]
 360:	lsl	x2, x2, #3
 364:	ldr	x1, [x20, #16]
 368:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 36c:	ldr	x1, [x20, #24]
 370:	ldr	x0, [x20, #16]
 374:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 378:	str	x22, [x20, #16]
 37c:	str	x21, [x20, #24]
 380:	ldp	x21, x22, [sp, #16]
 384:	b	254 <__sanitizer_cov_trace_pc_guard_init+0x9c>
 388:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 38c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 390:	ldr	x1, [x1]
 394:	str	x0, [x1]
 398:	b	318 <__sanitizer_cov_trace_pc_guard_init+0x160>
 39c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3a0:	add	x0, x0, #0x0
 3a4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3a8:	bl	0 <_ZN11__sanitizer3DieEv>
 3ac:	ret

00000000000003b0 <__sanitizer_cov_reset>:
 3b0:	str	x30, [sp, #-16]!
 3b4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3b8:	ldr	x2, [x0]
 3bc:	cbz	x2, 3dc <__sanitizer_cov_reset+0x2c>
 3c0:	lsl	x2, x2, #3
 3c4:	mov	w1, #0x0                   	// #0
 3c8:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3cc:	ldr	x0, [x0]
 3d0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 3d4:	ldr	x30, [sp], #16
 3d8:	ret
 3dc:	mov	x4, #0x0                   	// #0
 3e0:	mov	x3, #0x0                   	// #0
 3e4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3e8:	add	x2, x2, #0x0
 3ec:	mov	w1, #0x1b6                 	// #438
 3f0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3f4:	add	x0, x0, #0x0
 3f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000003fc <__sanitizer_cov_trace_cmp>:
 3fc:	ret

0000000000000400 <__sanitizer_cov_trace_cmp1>:
 400:	ret

0000000000000404 <__sanitizer_cov_trace_cmp2>:
 404:	ret

0000000000000408 <__sanitizer_cov_trace_cmp4>:
 408:	ret

000000000000040c <__sanitizer_cov_trace_cmp8>:
 40c:	ret

0000000000000410 <__sanitizer_cov_trace_const_cmp1>:
 410:	ret

0000000000000414 <__sanitizer_cov_trace_const_cmp2>:
 414:	ret

0000000000000418 <__sanitizer_cov_trace_const_cmp4>:
 418:	ret

000000000000041c <__sanitizer_cov_trace_const_cmp8>:
 41c:	ret

0000000000000420 <__sanitizer_cov_trace_switch>:
 420:	ret

0000000000000424 <__sanitizer_cov_trace_div4>:
 424:	ret

0000000000000428 <__sanitizer_cov_trace_div8>:
 428:	ret

000000000000042c <__sanitizer_cov_trace_gep>:
 42c:	ret

0000000000000430 <__sanitizer_cov_trace_pc_indir>:
 430:	ret

0000000000000434 <__sanitizer_cov_8bit_counters_init>:
 434:	ret

0000000000000438 <__sanitizer_cov_pcs_init>:
 438:	ret

000000000000043c <__sanitizer_dump_coverage>:
 43c:	cbnz	x1, 444 <__sanitizer_dump_coverage+0x8>
 440:	ret
 444:	stp	x19, x20, [sp, #-128]!
 448:	stp	x21, x22, [sp, #16]
 44c:	stp	x23, x24, [sp, #32]
 450:	stp	x25, x26, [sp, #48]
 454:	stp	x27, x28, [sp, #64]
 458:	str	x30, [sp, #80]
 45c:	mov	x22, x0
 460:	mov	x20, x1
 464:	mov	x2, #0x0                   	// #0
 468:	mov	x1, #0x0                   	// #0
 46c:	mov	x0, #0x1000                	// #4096
 470:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 474:	str	x0, [sp, #112]
 478:	mov	x2, #0x0                   	// #0
 47c:	mov	x1, #0x0                   	// #0
 480:	mov	x0, #0x1000                	// #4096
 484:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 488:	mov	x26, x0
 48c:	lsl	x19, x20, #3
 490:	mov	x2, #0x0                   	// #0
 494:	mov	x1, #0x0                   	// #0
 498:	mov	x0, x19
 49c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 4a0:	mov	x21, x0
 4a4:	mov	x2, x19
 4a8:	mov	x1, x22
 4ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4b0:	mov	w2, #0x0                   	// #0
 4b4:	mov	x1, x20
 4b8:	mov	x0, x21
 4bc:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 4c0:	str	xzr, [sp, #104]
 4c4:	mov	w25, #0x0                   	// #0
 4c8:	mov	x28, #0x0                   	// #0
 4cc:	mov	x19, #0x0                   	// #0
 4d0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 4d4:	add	x0, x0, #0x0
 4d8:	str	x0, [sp, #120]
 4dc:	b	51c <__sanitizer_dump_coverage+0xe0>
 4e0:	mov	x1, x22
 4e4:	ldr	x0, [sp, #120]
 4e8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 4ec:	b	510 <__sanitizer_dump_coverage+0xd4>
 4f0:	ldr	x0, [sp, #104]
 4f4:	sub	x3, x19, x0
 4f8:	add	x2, x21, x0, lsl #3
 4fc:	mov	x1, x26
 500:	ldr	x0, [sp, #112]
 504:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 508:	b	560 <__sanitizer_dump_coverage+0x124>
 50c:	mov	w25, #0x1                   	// #1
 510:	add	x19, x19, #0x1
 514:	cmp	x20, x19
 518:	b.eq	584 <__sanitizer_dump_coverage+0x148>  // b.none
 51c:	add	x27, x21, x19, lsl #3
 520:	ldr	x22, [x21, x19, lsl #3]
 524:	cbz	x22, 510 <__sanitizer_dump_coverage+0xd4>
 528:	mov	x3, x27
 52c:	mov	x2, #0x0                   	// #0
 530:	mov	x1, #0x0                   	// #0
 534:	mov	x0, x22
 538:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 53c:	cbz	w0, 4e0 <__sanitizer_dump_coverage+0xa4>
 540:	ldr	x24, [x21, x19, lsl #3]
 544:	sub	x24, x22, x24
 548:	cmp	x24, x28
 54c:	cset	w23, ne  // ne = any
 550:	eor	w0, w25, #0x1
 554:	orr	w23, w23, w0
 558:	cbz	w23, 50c <__sanitizer_dump_coverage+0xd0>
 55c:	cbnz	w25, 4f0 <__sanitizer_dump_coverage+0xb4>
 560:	mov	x3, x27
 564:	mov	x2, #0x1000                	// #4096
 568:	mov	x1, x26
 56c:	mov	x0, x22
 570:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 574:	str	x19, [sp, #104]
 578:	mov	x28, x24
 57c:	mov	w25, w23
 580:	b	510 <__sanitizer_dump_coverage+0xd4>
 584:	cbnz	w25, 5c8 <__sanitizer_dump_coverage+0x18c>
 588:	mov	x1, #0x0                   	// #0
 58c:	ldr	x0, [sp, #112]
 590:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 594:	mov	x1, #0x0                   	// #0
 598:	mov	x0, x26
 59c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 5a0:	mov	x1, #0x0                   	// #0
 5a4:	mov	x0, x21
 5a8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 5ac:	ldp	x21, x22, [sp, #16]
 5b0:	ldp	x23, x24, [sp, #32]
 5b4:	ldp	x25, x26, [sp, #48]
 5b8:	ldp	x27, x28, [sp, #64]
 5bc:	ldr	x30, [sp, #80]
 5c0:	ldp	x19, x20, [sp], #128
 5c4:	ret
 5c8:	ldr	x0, [sp, #104]
 5cc:	sub	x3, x19, x0
 5d0:	add	x2, x21, x0, lsl #3
 5d4:	mov	x1, x26
 5d8:	ldr	x0, [sp, #112]
 5dc:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 5e0:	b	588 <__sanitizer_dump_coverage+0x14c>

00000000000005e4 <__sanitizer_dump_trace_pc_guard_coverage>:
 5e4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 5e8:	ldrb	w0, [x0]
 5ec:	cbz	w0, 600 <__sanitizer_dump_trace_pc_guard_coverage+0x1c>
 5f0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 5f4:	ldr	x0, [x0]
 5f8:	ldrb	w0, [x0, #161]
 5fc:	cbnz	w0, 604 <__sanitizer_dump_trace_pc_guard_coverage+0x20>
 600:	ret
 604:	str	x30, [sp, #-16]!
 608:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 60c:	add	x0, x0, #0x0
 610:	ldr	x1, [x0, #32]
 614:	add	x0, x0, #0x8
 618:	ldr	x0, [x0, #8]
 61c:	bl	43c <__sanitizer_dump_coverage>
 620:	ldr	x30, [sp], #16
 624:	ret

0000000000000628 <__sanitizer_cov_dump>:
 628:	str	x30, [sp, #-16]!
 62c:	bl	5e4 <__sanitizer_dump_trace_pc_guard_coverage>
 630:	ldr	x30, [sp], #16
 634:	ret

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	118 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x118>  // b.plast
   8:	mov	x7, #0x1                   	// #1
   c:	b	20 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x20>
  10:	add	x2, x7, #0x1
  14:	cmp	x1, x2
  18:	b.ls	58 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x58>  // b.plast
  1c:	add	x7, x7, #0x1
  20:	cbz	x7, 1c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x1c>
  24:	mov	x2, x7
  28:	sub	x3, x2, #0x1
  2c:	mov	x5, x2
  30:	lsr	x2, x3, #1
  34:	ldr	x6, [x0, x2, lsl #3]
  38:	ldr	x4, [x0, x5, lsl #3]
  3c:	cmp	x4, x6
  40:	b.ls	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>  // b.plast
  44:	str	x6, [x0, x5, lsl #3]
  48:	str	x4, [x0, x2, lsl #3]
  4c:	cmp	x3, #0x1
  50:	b.hi	28 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x28>  // b.pmore
  54:	b	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  58:	sub	x3, x1, #0x1
  5c:	mov	x8, #0x0                   	// #0
  60:	b	84 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x84>
  64:	lsl	x5, x5, #4
  68:	ldr	x5, [x0, x5]
  6c:	cmp	x6, x5
  70:	csel	x1, x1, x4, cc  // cc = lo, ul, last
  74:	b	bc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xbc>
  78:	cmp	x3, #0x1
  7c:	b.eq	118 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x118>  // b.none
  80:	sub	x3, x3, #0x1
  84:	ldr	x1, [x0]
  88:	ldr	x2, [x0, x3, lsl #3]
  8c:	str	x2, [x0]
  90:	str	x1, [x0, x3, lsl #3]
  94:	cbz	x3, 80 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x80>
  98:	mov	x2, x8
  9c:	b	e0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe0>
  a0:	cmp	x3, x1
  a4:	b.ls	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.plast
  a8:	lsl	x5, x5, #4
  ac:	ldr	x6, [x0, x2, lsl #3]
  b0:	ldr	x4, [x0, x5]
  b4:	cmp	x6, x4
  b8:	b.cs	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  bc:	cmp	x1, x2
  c0:	b.eq	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.none
  c4:	ldr	x4, [x0, x2, lsl #3]
  c8:	ldr	x5, [x0, x1, lsl #3]
  cc:	str	x5, [x0, x2, lsl #3]
  d0:	str	x4, [x0, x1, lsl #3]
  d4:	cmp	x1, x3
  d8:	b.cs	78 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x78>  // b.hs, b.nlast
  dc:	mov	x2, x1
  e0:	lsl	x1, x2, #1
  e4:	add	x4, x1, #0x1
  e8:	add	x5, x2, #0x1
  ec:	add	x1, x1, #0x2
  f0:	cmp	x3, x4
  f4:	b.ls	a0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa0>  // b.plast
  f8:	ldr	x7, [x0, x2, lsl #3]
  fc:	ldr	x6, [x0, x4, lsl #3]
 100:	cmp	x7, x6
 104:	b.cs	a0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa0>  // b.hs, b.nlast
 108:	cmp	x3, x1
 10c:	b.hi	64 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x64>  // b.pmore
 110:	mov	x1, x4
 114:	b	bc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xbc>
 118:	ret

sanitizer_deadlock_detector1.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>:
       0:	mov	x0, #0x0                   	// #0
       4:	ret

0000000000000008 <_ZN11__sanitizer2DD21DestroyPhysicalThreadEPNS_16DDPhysicalThreadE>:
       8:	ret

000000000000000c <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE>:
       c:	stp	x19, x30, [sp, #-16]!
      10:	mov	x0, x1
      14:	mov	x19, x2
      18:	str	xzr, [x2]
      1c:	ldr	x1, [x1]
      20:	ldr	x1, [x1]
      24:	blr	x1
      28:	str	w0, [x19, #8]
      2c:	ldp	x19, x30, [sp], #16
      30:	ret

0000000000000034 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE>:
      34:	ldr	x0, [x1, #16]
      38:	ldrb	w2, [x0, #2224]
      3c:	cbz	w2, 50 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x1c>
      40:	strb	wzr, [x0, #2224]
      44:	ldr	x0, [x1, #16]
      48:	add	x0, x0, #0x628
      4c:	ret
      50:	mov	x0, #0x0                   	// #0
      54:	b	4c <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x18>

0000000000000058 <_ZN11__sanitizer2DD19CreateLogicalThreadEy>:
      58:	stp	x19, x30, [sp, #-16]!
      5c:	mov	x19, x1
      60:	mov	x2, #0x0                   	// #0
      64:	mov	x1, #0x0                   	// #0
      68:	mov	x0, #0x8b8                 	// #2232
      6c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
      70:	mov	x3, x0
      74:	str	x19, [x3], #8
      78:	str	xzr, [x0, #8]
      7c:	str	xzr, [x3, #520]
      80:	str	xzr, [x3, #1040]
      84:	str	xzr, [x3, #1560]
      88:	strb	wzr, [x0, #2224]
      8c:	ldp	x19, x30, [sp], #16
      90:	ret

0000000000000094 <_ZN11__sanitizer2DD20DestroyLogicalThreadEPNS_15DDLogicalThreadE>:
      94:	str	x30, [sp, #-16]!
      98:	mov	x0, x1
      9c:	mov	x1, #0x0                   	// #0
      a0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
      a4:	ldr	x30, [sp], #16
      a8:	ret

00000000000000ac <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb>:
      ac:	ldr	x1, [x1, #16]
      b0:	ldr	x2, [x2]
      b4:	and	x0, x2, #0xfffffffffffff000
      b8:	ldr	x3, [x1, #528]
      bc:	cmp	x3, x0
      c0:	b.eq	c8 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>  // b.none
      c4:	ret
      c8:	and	x4, x2, #0xfff
      cc:	ldr	x6, [x1, #1048]
      d0:	cbz	x6, f8 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x4c>
      d4:	sub	x7, x6, #0x1
      d8:	mov	x0, x7
      dc:	tbnz	x7, #63, f8 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x4c>
      e0:	add	x5, x1, #0x218
      e4:	ldr	x3, [x5, x0, lsl #3]
      e8:	cmp	x4, x3
      ec:	b.eq	16c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xc0>  // b.none
      f0:	subs	x0, x0, #0x1
      f4:	b.pl	e4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x38>  // b.nfrst
      f8:	lsr	x3, x4, #6
      fc:	ldr	x6, [x1, #8]
     100:	mov	x0, #0x1                   	// #1
     104:	lsl	x0, x0, x3
     108:	tst	x6, x0
     10c:	b.eq	c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     110:	add	x3, x1, x3, lsl #3
     114:	ldr	x7, [x3, #16]
     118:	mov	x5, #0x1                   	// #1
     11c:	lsl	x2, x5, x2
     120:	bic	x2, x7, x2
     124:	str	x2, [x3, #16]
     128:	cbz	x2, 18c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xe0>
     12c:	cmp	x7, x2
     130:	b.eq	c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     134:	ldr	x7, [x1, #1568]
     138:	cbz	x7, c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     13c:	sub	x8, x7, #0x1
     140:	mov	x0, x8
     144:	tbnz	x8, #63, c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     148:	add	x5, x1, #0x420
     14c:	mov	w6, w4
     150:	lsl	x2, x0, #3
     154:	ldr	w2, [x5, x2]
     158:	cmp	w2, w4
     15c:	b.eq	198 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xec>  // b.none
     160:	subs	x0, x0, #0x1
     164:	b.pl	14c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xa0>  // b.nfrst
     168:	b	c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     16c:	add	x2, x1, #0x8
     170:	str	x7, [x1, #1048]
     174:	add	x1, x1, x6, lsl #3
     178:	ldr	x4, [x1, #528]
     17c:	add	x0, x0, #0x42
     180:	str	x4, [x2, x0, lsl #3]
     184:	str	x3, [x1, #528]
     188:	b	c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     18c:	bic	x0, x6, x0
     190:	str	x0, [x1, #8]
     194:	b	12c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x80>
     198:	add	x1, x1, #0x8
     19c:	add	x2, x7, #0x82
     1a0:	lsl	x2, x2, #3
     1a4:	add	x4, x1, x2
     1a8:	add	x3, x1, x0, lsl #3
     1ac:	ldr	w3, [x3, #1052]
     1b0:	add	x0, x1, x0, lsl #3
     1b4:	add	x8, x1, x8, lsl #3
     1b8:	ldr	x5, [x8, #1048]
     1bc:	str	x5, [x0, #1048]
     1c0:	str	w6, [x1, x2]
     1c4:	str	w3, [x4, #4]
     1c8:	ldr	x0, [x1, #1560]
     1cc:	sub	x0, x0, #0x1
     1d0:	str	x0, [x1, #1560]
     1d4:	b	c4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>

00000000000001d8 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE>:
     1d8:	ldr	x1, [x2]
     1dc:	cbnz	x1, 1e4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xc>
     1e0:	ret
     1e4:	stp	x19, x20, [sp, #-32]!
     1e8:	str	x30, [sp, #16]
     1ec:	mov	x20, x0
     1f0:	mov	x19, x2
     1f4:	add	x0, x0, #0x8
     1f8:	mov	w2, #0x1                   	// #1
     1fc:	ldxrb	w1, [x0]
     200:	stxrb	w3, w2, [x0]
     204:	cbnz	w3, 1fc <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x24>
     208:	dmb	ish
     20c:	and	w1, w1, #0xff
     210:	cbnz	w1, 244 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x6c>
     214:	ldr	x3, [x19]
     218:	cbz	x3, 22c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
     21c:	and	x0, x3, #0xfffffffffffff000
     220:	ldr	x1, [x20, #16]
     224:	cmp	x0, x1
     228:	b.eq	24c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x74>  // b.none
     22c:	str	xzr, [x19]
     230:	dmb	ish
     234:	strb	wzr, [x20, #8]
     238:	ldr	x30, [sp, #16]
     23c:	ldp	x19, x20, [sp], #32
     240:	ret
     244:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     248:	b	214 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x3c>
     24c:	cmp	x3, #0xfff
     250:	b.ls	2b0 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xd8>  // b.plast
     254:	and	x4, x3, #0xfff
     258:	ubfx	x1, x3, #6, #6
     25c:	and	x3, x3, #0x3f
     260:	mov	x0, #0x1                   	// #1
     264:	lsl	x0, x0, x1
     268:	ldr	x2, [x20, #24]
     26c:	tst	x0, x2
     270:	b.ne	2cc <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xf4>  // b.any
     274:	ldr	x2, [x20, #544]
     278:	tst	x0, x2
     27c:	b.eq	304 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x12c>  // b.none
     280:	add	x1, x20, x1, lsl #3
     284:	ldr	x2, [x1, #552]
     288:	mov	x0, #0x1                   	// #1
     28c:	lsl	x3, x0, x3
     290:	orr	x0, x3, x2
     294:	str	x0, [x1, #552]
     298:	cmp	x2, x0
     29c:	b.eq	318 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x140>  // b.none
     2a0:	add	x0, x20, #0x630
     2a4:	add	x4, x4, x4, lsl #6
     2a8:	str	xzr, [x0, x4, lsl #3]
     2ac:	b	22c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
     2b0:	mov	x4, #0x1000                	// #4096
     2b4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2b8:	add	x2, x2, #0x0
     2bc:	mov	w1, #0x172                 	// #370
     2c0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2c4:	add	x0, x0, #0x0
     2c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     2cc:	add	x5, x20, x1, lsl #3
     2d0:	mov	x2, #0x1                   	// #1
     2d4:	lsl	x2, x2, x3
     2d8:	ldr	x5, [x5, #32]
     2dc:	tst	x2, x5
     2e0:	b.eq	274 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x9c>  // b.none
     2e4:	mov	x4, #0x0                   	// #0
     2e8:	mov	x3, #0x0                   	// #0
     2ec:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2f0:	add	x2, x2, #0x0
     2f4:	mov	w1, #0xc0                  	// #192
     2f8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2fc:	add	x0, x0, #0x0
     300:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     304:	orr	x0, x0, x2
     308:	str	x0, [x20, #544]
     30c:	add	x0, x20, x1, lsl #3
     310:	str	xzr, [x0, #552]
     314:	b	280 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xa8>
     318:	mov	x4, #0x0                   	// #0
     31c:	mov	x3, #0x0                   	// #0
     320:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     324:	add	x2, x2, #0x0
     328:	mov	w1, #0xc1                  	// #193
     32c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     330:	add	x0, x0, #0x0
     334:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000338 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>:
     338:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     33c:	add	x2, x2, #0x0
     340:	str	x2, [x0]
     344:	strb	wzr, [x0, #8]
     348:	add	x2, x0, #0x410, lsl #12
     34c:	ldrb	w1, [x1]
     350:	strb	w1, [x2, #2632]
     354:	str	xzr, [x0, #16]
     358:	str	xzr, [x0, #24]
     35c:	str	xzr, [x0, #544]
     360:	add	x1, x0, #0x630
     364:	add	x2, x0, #0x208, lsl #12
     368:	add	x2, x2, #0x630
     36c:	str	xzr, [x1]
     370:	add	x1, x1, #0x208
     374:	cmp	x2, x1
     378:	b.ne	36c <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE+0x34>  // b.any
     37c:	add	x0, x0, #0x10
     380:	add	x0, x0, #0x410, lsl #12
     384:	str	xzr, [x0, #2608]
     388:	ret

000000000000038c <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE>:
     38c:	stp	x19, x20, [sp, #-32]!
     390:	str	x30, [sp, #16]
     394:	mov	x20, x0
     398:	mov	w2, #0x0                   	// #0
     39c:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     3a0:	add	x1, x1, #0x0
     3a4:	mov	x0, #0xa50                 	// #2640
     3a8:	movk	x0, #0x41, lsl #16
     3ac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     3b0:	mov	x19, x0
     3b4:	mov	x1, x20
     3b8:	bl	338 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>
     3bc:	mov	x0, x19
     3c0:	ldr	x30, [sp, #16]
     3c4:	ldp	x19, x20, [sp], #32
     3c8:	ret

00000000000003cc <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>:
     3cc:	ldr	x3, [x2]
     3d0:	cbz	x3, 3e4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x18>
     3d4:	and	x3, x3, #0xfffffffffffff000
     3d8:	ldr	x4, [x0, #16]
     3dc:	cmp	x3, x4
     3e0:	b.eq	874 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x4a8>  // b.none
     3e4:	stp	x19, x30, [sp, #-16]!
     3e8:	ldr	x8, [x0, #24]
     3ec:	cbnz	x8, 4b4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xe8>
     3f0:	ldr	x3, [x0, #544]
     3f4:	cbnz	x3, 838 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x46c>
     3f8:	ldr	x4, [x0, #16]
     3fc:	add	x4, x4, #0x1, lsl #12
     400:	str	x4, [x0, #16]
     404:	str	xzr, [x0, #544]
     408:	add	x3, x0, #0x20
     40c:	add	x6, x0, #0x220
     410:	mov	x5, #0xffffffffffffffff    	// #-1
     414:	str	x5, [x3], #8
     418:	cmp	x3, x6
     41c:	b.ne	414 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x48>  // b.any
     420:	add	x3, x0, #0x630
     424:	add	x5, x0, #0x208, lsl #12
     428:	add	x5, x5, #0x630
     42c:	str	xzr, [x3]
     430:	add	x3, x3, #0x208
     434:	cmp	x3, x5
     438:	b.ne	42c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x60>  // b.any
     43c:	add	x3, x0, #0x10
     440:	add	x3, x3, #0x410, lsl #12
     444:	str	xzr, [x3, #2608]
     448:	mov	x3, #0xfffffffffffffffe    	// #-2
     44c:	str	x3, [x0, #24]
     450:	ldr	x3, [x0, #32]
     454:	cbz	x3, 7f0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x424>
     458:	rbit	x6, x3
     45c:	clz	x6, x6
     460:	mov	x5, #0x1                   	// #1
     464:	lsl	x5, x5, x6
     468:	bic	x3, x3, x5
     46c:	str	x3, [x0, #32]
     470:	cbnz	x3, 80c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x440>
     474:	add	x3, x0, #0x10
     478:	add	x5, x6, #0x41, lsl #12
     47c:	add	x5, x5, #0x146
     480:	str	x2, [x3, x5, lsl #3]
     484:	add	x4, x4, x6
     488:	str	x4, [x2]
     48c:	ldr	x2, [x0, #16]
     490:	ldr	x0, [x1, #528]
     494:	cmp	x2, x0
     498:	b.eq	4ac <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xe0>  // b.none
     49c:	str	xzr, [x1, #8]
     4a0:	str	x2, [x1, #528]
     4a4:	str	xzr, [x1, #1048]
     4a8:	str	xzr, [x1, #1568]
     4ac:	ldp	x19, x30, [sp], #16
     4b0:	ret
     4b4:	rbit	x3, x8
     4b8:	clz	x3, x3
     4bc:	mov	x6, #0x1                   	// #1
     4c0:	lsl	x6, x6, x3
     4c4:	bic	x4, x8, x6
     4c8:	str	x4, [x0, #24]
     4cc:	add	x9, x0, x3, lsl #3
     4d0:	ldr	x7, [x9, #32]
     4d4:	cbz	x7, 514 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x148>
     4d8:	rbit	x4, x7
     4dc:	clz	x4, x4
     4e0:	mov	x5, #0x1                   	// #1
     4e4:	lsl	x5, x5, x4
     4e8:	bic	x5, x7, x5
     4ec:	str	x5, [x9, #32]
     4f0:	cbnz	x5, 534 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x168>
     4f4:	add	x4, x4, x3, lsl #6
     4f8:	add	x3, x0, #0x10
     4fc:	add	x5, x4, #0x41, lsl #12
     500:	add	x5, x5, #0x146
     504:	str	x2, [x3, x5, lsl #3]
     508:	ldr	x3, [x0, #16]
     50c:	add	x4, x4, x3
     510:	b	488 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xbc>
     514:	mov	x4, #0x0                   	// #0
     518:	mov	x3, #0x0                   	// #0
     51c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     520:	add	x2, x2, #0x0
     524:	mov	w1, #0x30                  	// #48
     528:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     52c:	add	x0, x0, #0x0
     530:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     534:	orr	x6, x8, x6
     538:	str	x6, [x0, #24]
     53c:	b	4f4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x128>
     540:	ldr	x3, [x0, #24]
     544:	cbnz	x3, 818 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x44c>
     548:	ldr	x15, [x0, #544]
     54c:	add	x7, x0, #0x630
     550:	mov	x13, #0x1                   	// #1
     554:	add	x12, x0, #0x220
     558:	mov	x11, x7
     55c:	mov	x14, x7
     560:	ldr	x4, [x7]
     564:	and	x4, x15, x4
     568:	add	x9, x8, x8, lsl #6
     56c:	cbz	x4, 6c4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2f8>
     570:	rbit	x3, x4
     574:	clz	x3, x3
     578:	lsl	x5, x13, x3
     57c:	mvn	x10, x5
     580:	bic	x4, x4, x5
     584:	add	x5, x12, x3, lsl #3
     588:	ldr	x5, [x5, #8]
     58c:	add	x3, x9, x3
     590:	add	x3, x11, x3, lsl #3
     594:	ldr	x6, [x3, #8]
     598:	bic	x5, x6, x5
     59c:	str	x5, [x3, #8]
     5a0:	cbnz	x5, 56c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x1a0>
     5a4:	ldr	x3, [x14]
     5a8:	and	x10, x3, x10
     5ac:	str	x10, [x14]
     5b0:	b	56c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x1a0>
     5b4:	mov	x4, #0x1000                	// #4096
     5b8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     5bc:	add	x2, x2, #0x0
     5c0:	mov	w1, #0x143                 	// #323
     5c4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     5c8:	add	x0, x0, #0x0
     5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5d0:	lsl	x9, x12, x10
     5d4:	add	x3, x3, x6, lsl #6
     5d8:	add	x3, x15, x3, lsl #3
     5dc:	ldr	x6, [x3, #8]
     5e0:	tst	x9, x6
     5e4:	b.eq	668 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x29c>  // b.none
     5e8:	ldr	x3, [x13, #2608]
     5ec:	add	x3, x3, x16
     5f0:	lsl	x3, x3, #4
     5f4:	add	x9, x14, x3
     5f8:	ldrh	w19, [x5, #2]
     5fc:	ldr	w30, [x5, #4]
     600:	ldr	w18, [x5, #8]
     604:	ldr	w17, [x5, #12]
     608:	ldp	x6, x7, [x9]
     60c:	stp	x6, x7, [x5]
     610:	strh	w10, [x14, x3]
     614:	strh	w19, [x9, #2]
     618:	str	w30, [x9, #4]
     61c:	str	w18, [x9, #8]
     620:	str	w17, [x9, #12]
     624:	ldr	x3, [x13, #2608]
     628:	sub	x3, x3, #0x1
     62c:	str	x3, [x13, #2608]
     630:	sub	x4, x4, #0x10
     634:	subs	x11, x11, #0x1
     638:	b.mi	540 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x174>  // b.first
     63c:	mov	x5, x4
     640:	ldrh	w10, [x4]
     644:	and	x3, x10, #0xffff
     648:	cmp	x3, #0x1, lsl #12
     64c:	b.hi	5b4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x1e8>  // b.pmore
     650:	lsr	x6, x3, #12
     654:	ubfx	x3, x3, #6, #6
     658:	ldr	x7, [x15, x6, lsl #3]
     65c:	lsl	x9, x12, x3
     660:	tst	x9, x7
     664:	b.ne	5d0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x204>  // b.any
     668:	ldrh	w6, [x5, #2]
     66c:	and	x3, x6, #0xffff
     670:	cmp	x3, #0x1, lsl #12
     674:	b.hi	6a8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2dc>  // b.pmore
     678:	ubfx	x9, x3, #6, #6
     67c:	lsl	x17, x12, x9
     680:	tst	x17, x7
     684:	b.eq	630 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x264>  // b.none
     688:	lsr	x3, x3, #12
     68c:	add	x3, x9, x3, lsl #6
     690:	add	x3, x15, x3, lsl #3
     694:	lsl	x6, x12, x6
     698:	ldr	x3, [x3, #8]
     69c:	tst	x6, x3
     6a0:	b.ne	5e8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x21c>  // b.any
     6a4:	b	630 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x264>
     6a8:	mov	x4, #0x1000                	// #4096
     6ac:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     6b0:	add	x2, x2, #0x0
     6b4:	mov	w1, #0x143                 	// #323
     6b8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     6bc:	add	x0, x0, #0x0
     6c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6c4:	add	x8, x8, #0x1
     6c8:	add	x7, x7, #0x208
     6cc:	cmp	x8, #0x1, lsl #12
     6d0:	b.ne	55c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x190>  // b.any
     6d4:	ldr	x4, [x0, #544]
     6d8:	cbz	x4, 73c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x370>
     6dc:	rbit	x3, x4
     6e0:	clz	x3, x3
     6e4:	mov	x6, x0
     6e8:	ldr	x5, [x6, #24]!
     6ec:	mov	x9, #0x1                   	// #1
     6f0:	b	718 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x34c>
     6f4:	add	x3, x0, x3, lsl #3
     6f8:	ldr	x5, [x3, #32]
     6fc:	ldr	x7, [x3, #552]
     700:	orr	x5, x5, x7
     704:	str	x5, [x3, #32]
     708:	cbz	x4, 738 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x36c>
     70c:	rbit	x3, x4
     710:	clz	x3, x3
     714:	mov	x5, x8
     718:	lsl	x7, x9, x3
     71c:	bic	x4, x4, x7
     720:	orr	x8, x5, x7
     724:	bics	xzr, x7, x5
     728:	b.eq	6f4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x328>  // b.none
     72c:	add	x5, x6, x3, lsl #3
     730:	str	xzr, [x5, #8]
     734:	b	6f4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x328>
     738:	str	x8, [x0, #24]
     73c:	str	xzr, [x0, #544]
     740:	ldr	x4, [x0, #24]
     744:	cbnz	x4, 764 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x398>
     748:	mov	x3, #0x0                   	// #0
     74c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     750:	add	x2, x2, #0x0
     754:	mov	w1, #0xbf                  	// #191
     758:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     75c:	add	x0, x0, #0x0
     760:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     764:	rbit	x3, x4
     768:	clz	x3, x3
     76c:	mov	x6, #0x1                   	// #1
     770:	lsl	x6, x6, x3
     774:	bic	x5, x4, x6
     778:	str	x5, [x0, #24]
     77c:	add	x9, x0, x3, lsl #3
     780:	ldr	x7, [x9, #32]
     784:	cbz	x7, 7c4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3f8>
     788:	rbit	x8, x7
     78c:	clz	x8, x8
     790:	mov	x5, #0x1                   	// #1
     794:	lsl	x5, x5, x8
     798:	bic	x5, x7, x5
     79c:	str	x5, [x9, #32]
     7a0:	cbnz	x5, 7e4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x418>
     7a4:	add	x4, x8, x3, lsl #6
     7a8:	add	x3, x0, #0x10
     7ac:	add	x5, x4, #0x41, lsl #12
     7b0:	add	x5, x5, #0x146
     7b4:	str	x2, [x3, x5, lsl #3]
     7b8:	ldr	x3, [x0, #16]
     7bc:	add	x4, x4, x3
     7c0:	b	488 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xbc>
     7c4:	mov	x4, #0x0                   	// #0
     7c8:	mov	x3, #0x0                   	// #0
     7cc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7d0:	add	x2, x2, #0x0
     7d4:	mov	w1, #0x30                  	// #48
     7d8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7dc:	add	x0, x0, #0x0
     7e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7e4:	orr	x4, x4, x6
     7e8:	str	x4, [x0, #24]
     7ec:	b	7a4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3d8>
     7f0:	mov	x4, #0x0                   	// #0
     7f4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7f8:	add	x2, x2, #0x0
     7fc:	mov	w1, #0x30                  	// #48
     800:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     804:	add	x0, x0, #0x0
     808:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     80c:	mov	x3, #0xffffffffffffffff    	// #-1
     810:	str	x3, [x0, #24]
     814:	b	474 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xa8>
     818:	mov	x4, #0x0                   	// #0
     81c:	mov	x3, #0x0                   	// #0
     820:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     824:	add	x2, x2, #0x0
     828:	mov	w1, #0xa7                  	// #167
     82c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     830:	add	x0, x0, #0x0
     834:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     838:	add	x3, x0, #0x10
     83c:	add	x3, x3, #0x410, lsl #12
     840:	ldr	x4, [x3, #2608]
     844:	subs	x11, x4, #0x1
     848:	b.mi	548 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x17c>  // b.first
     84c:	add	x4, x4, #0x21, lsl #12
     850:	add	x4, x4, #0xa3
     854:	add	x4, x0, x4, lsl #4
     858:	add	x15, x0, #0x220
     85c:	mov	x12, #0x1                   	// #1
     860:	add	x14, x0, #0x10
     864:	add	x13, x14, #0x410, lsl #12
     868:	mov	x16, #0x10a2                	// #4258
     86c:	movk	x16, #0x2, lsl #16
     870:	b	63c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x270>
     874:	ldr	x2, [x0, #16]
     878:	ldr	x0, [x1, #528]
     87c:	cmp	x2, x0
     880:	b.eq	894 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x4c8>  // b.none
     884:	str	xzr, [x1, #8]
     888:	str	x2, [x1, #528]
     88c:	str	xzr, [x1, #1048]
     890:	str	xzr, [x1, #1568]
     894:	ret

0000000000000898 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb>:
     898:	stp	x19, x20, [sp, #-64]!
     89c:	stp	x21, x22, [sp, #16]
     8a0:	stp	x23, x24, [sp, #32]
     8a4:	stp	x25, x30, [sp, #48]
     8a8:	mov	x20, x0
     8ac:	mov	x21, x1
     8b0:	mov	x22, x2
     8b4:	and	w24, w3, #0xff
     8b8:	and	w25, w4, #0xff
     8bc:	ldr	x19, [x1, #16]
     8c0:	add	x0, x0, #0x410, lsl #12
     8c4:	ldrb	w0, [x0, #2632]
     8c8:	mov	w23, #0x0                   	// #0
     8cc:	cbz	w0, 8e4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x4c>
     8d0:	ldr	x0, [x1]
     8d4:	ldr	x1, [x0]
     8d8:	mov	x0, x21
     8dc:	blr	x1
     8e0:	mov	w23, w0
     8e4:	ldr	x1, [x19, #8]
     8e8:	cbnz	x1, 904 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x6c>
     8ec:	ldr	x0, [x19, #528]
     8f0:	cbz	x0, 904 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x6c>
     8f4:	ldr	x2, [x22]
     8f8:	and	x3, x2, #0xfffffffffffff000
     8fc:	cmp	x0, x3
     900:	b.eq	a4c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1b4>  // b.none
     904:	ldr	x0, [x22]
     908:	cbnz	x0, b10 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x278>
     90c:	add	x0, x20, #0x8
     910:	mov	w2, #0x1                   	// #1
     914:	ldxrb	w1, [x0]
     918:	stxrb	w3, w2, [x0]
     91c:	cbnz	w3, 914 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x7c>
     920:	dmb	ish
     924:	and	w1, w1, #0xff
     928:	cbnz	w1, c14 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x37c>
     92c:	mov	x2, x22
     930:	mov	x1, x19
     934:	mov	x0, x20
     938:	bl	3cc <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
     93c:	cbnz	w24, c1c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x384>
     940:	cbnz	w25, 98c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xf4>
     944:	ldr	x25, [x22]
     948:	mov	w24, w23
     94c:	cbnz	w23, 964 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xcc>
     950:	ldr	x0, [x21]
     954:	ldr	x1, [x0]
     958:	mov	x0, x21
     95c:	blr	x1
     960:	mov	w24, w0
     964:	ldr	x0, [x21]
     968:	ldr	x1, [x0, #8]
     96c:	mov	x0, x21
     970:	blr	x1
     974:	mov	w4, w0
     978:	mov	w3, w24
     97c:	mov	x2, x25
     980:	add	x1, x19, #0x8
     984:	add	x0, x20, #0x10
     988:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     98c:	ldr	x1, [x22]
     990:	ldr	x2, [x20, #16]
     994:	ldr	x0, [x19, #528]
     998:	cmp	x2, x0
     99c:	b.eq	9b0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x118>  // b.none
     9a0:	str	xzr, [x19, #8]
     9a4:	str	x2, [x19, #528]
     9a8:	str	xzr, [x19, #1048]
     9ac:	str	xzr, [x19, #1568]
     9b0:	cmp	x1, #0xfff
     9b4:	b.ls	cf8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x460>  // b.plast
     9b8:	ldr	x3, [x20, #16]
     9bc:	and	x4, x1, #0xfffffffffffff000
     9c0:	cmp	x3, x4
     9c4:	b.ne	d18 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x480>  // b.any
     9c8:	and	x4, x1, #0xfff
     9cc:	ldr	x0, [x19, #528]
     9d0:	cmp	x0, x3
     9d4:	b.ne	d30 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x498>  // b.any
     9d8:	lsr	x0, x4, #6
     9dc:	ldr	x3, [x19, #8]
     9e0:	mov	x2, #0x1                   	// #1
     9e4:	lsl	x2, x2, x0
     9e8:	tst	x3, x2
     9ec:	b.eq	d50 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x4b8>  // b.none
     9f0:	add	x0, x19, x0, lsl #3
     9f4:	ldr	x3, [x0, #16]
     9f8:	mov	x2, #0x1                   	// #1
     9fc:	lsl	x1, x2, x1
     a00:	orr	x1, x1, x3
     a04:	str	x1, [x0, #16]
     a08:	cmp	x3, x1
     a0c:	b.ne	d80 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x4e8>  // b.any
     a10:	ldr	x3, [x19, #1048]
     a14:	cmp	x3, #0x3f
     a18:	b.hi	d64 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x4cc>  // b.pmore
     a1c:	add	x0, x3, #0x1
     a20:	str	x0, [x19, #1048]
     a24:	add	x19, x19, #0x8
     a28:	add	x3, x3, #0x42
     a2c:	str	x4, [x19, x3, lsl #3]
     a30:	dmb	ish
     a34:	strb	wzr, [x20, #8]
     a38:	ldp	x21, x22, [sp, #16]
     a3c:	ldp	x23, x24, [sp, #32]
     a40:	ldp	x25, x30, [sp, #48]
     a44:	ldp	x19, x20, [sp], #64
     a48:	ret
     a4c:	and	x4, x2, #0xfff
     a50:	ubfx	x0, x2, #6, #6
     a54:	mov	x1, #0x1                   	// #1
     a58:	lsl	x3, x1, x0
     a5c:	str	x3, [x19, #8]
     a60:	lsl	x0, x0, #3
     a64:	add	x3, x19, x0
     a68:	mov	x0, x3
     a6c:	mov	x3, #0x0                   	// #0
     a70:	lsl	x2, x1, x2
     a74:	orr	x2, x2, x3
     a78:	str	x2, [x0, #16]
     a7c:	cmp	x3, x2
     a80:	b.ne	ac4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x22c>  // b.any
     a84:	ldr	x3, [x19, #1048]
     a88:	cmp	x3, #0x3f
     a8c:	b.hi	aa8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x210>  // b.pmore
     a90:	add	x0, x3, #0x1
     a94:	str	x0, [x19, #1048]
     a98:	add	x19, x19, #0x8
     a9c:	add	x3, x3, #0x42
     aa0:	str	x4, [x19, x3, lsl #3]
     aa4:	b	a38 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1a0>
     aa8:	mov	x4, #0x40                  	// #64
     aac:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ab0:	add	x2, x2, #0x0
     ab4:	mov	w1, #0x3f                  	// #63
     ab8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     abc:	add	x0, x0, #0x0
     ac0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ac4:	ldr	x3, [x19, #1568]
     ac8:	cmp	x3, #0x3f
     acc:	b.hi	af4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x25c>  // b.pmore
     ad0:	add	x0, x3, #0x1
     ad4:	str	x0, [x19, #1568]
     ad8:	add	x19, x19, #0x8
     adc:	add	x0, x3, #0x83
     ae0:	lsl	x0, x0, #3
     ae4:	add	x1, x19, x0
     ae8:	str	w4, [x19, x0]
     aec:	str	w23, [x1, #4]
     af0:	b	a38 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1a0>
     af4:	mov	x4, #0x40                  	// #64
     af8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     afc:	add	x2, x2, #0x0
     b00:	mov	w1, #0x43                  	// #67
     b04:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     b08:	add	x0, x0, #0x0
     b0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b10:	ldr	x2, [x19, #528]
     b14:	ldr	x3, [x20, #16]
     b18:	cmp	x2, x3
     b1c:	b.ne	90c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x74>  // b.any
     b20:	and	x3, x0, #0xfffffffffffff000
     b24:	cmp	x2, x3
     b28:	b.ne	90c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x74>  // b.any
     b2c:	and	x4, x0, #0xfff
     b30:	ldr	x8, [x19, #1568]
     b34:	cbz	x8, dcc <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x534>
     b38:	lsr	x9, x4, #6
     b3c:	mov	x2, #0x1                   	// #1
     b40:	lsl	x11, x2, x9
     b44:	lsl	x5, x2, x0
     b48:	mov	x3, #0x0                   	// #0
     b4c:	add	x10, x19, #0x420
     b50:	add	x6, x20, #0x630
     b54:	b	b7c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2e4>
     b58:	add	x2, x2, x2, lsl #6
     b5c:	add	x2, x2, x9
     b60:	add	x2, x6, x2, lsl #3
     b64:	ldr	x2, [x2, #8]
     b68:	tst	x5, x2
     b6c:	b.eq	90c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x74>  // b.none
     b70:	add	x3, x3, #0x1
     b74:	cmp	x8, x3
     b78:	b.eq	dcc <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x534>  // b.none
     b7c:	lsl	x2, x3, #3
     b80:	ldr	w2, [x10, x2]
     b84:	add	x7, x2, x2, lsl #6
     b88:	ldr	x7, [x6, x7, lsl #3]
     b8c:	tst	x11, x7
     b90:	b.eq	90c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x74>  // b.none
     b94:	b	b58 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2c0>
     b98:	orr	x1, x1, x3
     b9c:	str	x1, [x19, #8]
     ba0:	add	x1, x19, x2, lsl #3
     ba4:	str	xzr, [x1, #16]
     ba8:	b	de0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x548>
     bac:	mov	x4, #0x40                  	// #64
     bb0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bb4:	add	x2, x2, #0x0
     bb8:	mov	w1, #0x3f                  	// #63
     bbc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bc0:	add	x0, x0, #0x0
     bc4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bc8:	ldr	x3, [x19, #1568]
     bcc:	cmp	x3, #0x3f
     bd0:	b.hi	bf8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x360>  // b.pmore
     bd4:	add	x0, x3, #0x1
     bd8:	str	x0, [x19, #1568]
     bdc:	add	x19, x19, #0x8
     be0:	add	x0, x3, #0x83
     be4:	lsl	x0, x0, #3
     be8:	add	x1, x19, x0
     bec:	str	w4, [x19, x0]
     bf0:	str	w23, [x1, #4]
     bf4:	b	a38 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1a0>
     bf8:	mov	x4, #0x40                  	// #64
     bfc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c00:	add	x2, x2, #0x0
     c04:	mov	w1, #0x43                  	// #67
     c08:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c0c:	add	x0, x0, #0x0
     c10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c14:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c18:	b	92c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x94>
     c1c:	ldr	x0, [x22]
     c20:	ldr	x1, [x20, #16]
     c24:	ldr	x3, [x19, #528]
     c28:	cmp	x1, x3
     c2c:	b.ne	c68 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3d0>  // b.any
     c30:	cmp	x0, #0xfff
     c34:	b.ls	c84 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3ec>  // b.plast
     c38:	and	x4, x0, #0xfffffffffffff000
     c3c:	cmp	x1, x4
     c40:	b.ne	ca4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x40c>  // b.any
     c44:	ubfx	x2, x0, #6, #6
     c48:	mov	x1, #0x1                   	// #1
     c4c:	lsl	x1, x1, x2
     c50:	ldr	x3, [x19, #8]
     c54:	tst	x1, x3
     c58:	b.ne	cc0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x428>  // b.any
     c5c:	cbz	w25, 944 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xac>
     c60:	ldr	x1, [x22]
     c64:	b	9b0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x118>
     c68:	mov	x4, x1
     c6c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c70:	add	x2, x2, #0x0
     c74:	mov	w1, #0x6c                  	// #108
     c78:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c7c:	add	x0, x0, #0x0
     c80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c84:	mov	x4, #0x1000                	// #4096
     c88:	mov	x3, x0
     c8c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c90:	add	x2, x2, #0x0
     c94:	mov	w1, #0x172                 	// #370
     c98:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c9c:	add	x0, x0, #0x0
     ca0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ca4:	mov	x3, x1
     ca8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cac:	add	x2, x2, #0x0
     cb0:	mov	w1, #0x173                 	// #371
     cb4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cb8:	add	x0, x0, #0x0
     cbc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cc0:	mov	x1, #0x1                   	// #1
     cc4:	lsl	x0, x1, x0
     cc8:	add	x2, x19, x2, lsl #3
     ccc:	ldr	x1, [x2, #16]
     cd0:	tst	x0, x1
     cd4:	b.eq	c5c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3c4>  // b.none
     cd8:	mov	x4, #0x0                   	// #0
     cdc:	mov	x3, #0x0                   	// #0
     ce0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ce4:	add	x2, x2, #0x0
     ce8:	mov	w1, #0xa5                  	// #165
     cec:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cf0:	add	x0, x0, #0x0
     cf4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     cf8:	mov	x4, #0x1000                	// #4096
     cfc:	mov	x3, x1
     d00:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d04:	add	x2, x2, #0x0
     d08:	mov	w1, #0x172                 	// #370
     d0c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d10:	add	x0, x0, #0x0
     d14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d18:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d1c:	add	x2, x2, #0x0
     d20:	mov	w1, #0x173                 	// #371
     d24:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d28:	add	x0, x0, #0x0
     d2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d30:	mov	x4, x3
     d34:	mov	x3, x0
     d38:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d3c:	add	x2, x2, #0x0
     d40:	mov	w1, #0x3c                  	// #60
     d44:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d48:	add	x0, x0, #0x0
     d4c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d50:	orr	x2, x3, x2
     d54:	str	x2, [x19, #8]
     d58:	add	x2, x19, x0, lsl #3
     d5c:	str	xzr, [x2, #16]
     d60:	b	9f0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x158>
     d64:	mov	x4, #0x40                  	// #64
     d68:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d6c:	add	x2, x2, #0x0
     d70:	mov	w1, #0x3f                  	// #63
     d74:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d78:	add	x0, x0, #0x0
     d7c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d80:	ldr	x3, [x19, #1568]
     d84:	cmp	x3, #0x3f
     d88:	b.hi	db0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x518>  // b.pmore
     d8c:	add	x0, x3, #0x1
     d90:	str	x0, [x19, #1568]
     d94:	add	x19, x19, #0x8
     d98:	add	x3, x3, #0x83
     d9c:	lsl	x3, x3, #3
     da0:	add	x0, x19, x3
     da4:	str	w4, [x19, x3]
     da8:	str	w23, [x0, #4]
     dac:	b	a30 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x198>
     db0:	mov	x4, #0x40                  	// #64
     db4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     db8:	add	x2, x2, #0x0
     dbc:	mov	w1, #0x43                  	// #67
     dc0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     dc4:	add	x0, x0, #0x0
     dc8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     dcc:	lsr	x2, x4, #6
     dd0:	mov	x3, #0x1                   	// #1
     dd4:	lsl	x3, x3, x2
     dd8:	tst	x1, x3
     ddc:	b.eq	b98 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x300>  // b.none
     de0:	add	x2, x19, x2, lsl #3
     de4:	ldr	x3, [x2, #16]
     de8:	mov	x1, #0x1                   	// #1
     dec:	lsl	x0, x1, x0
     df0:	orr	x0, x0, x3
     df4:	str	x0, [x2, #16]
     df8:	cmp	x3, x0
     dfc:	b.ne	bc8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x330>  // b.any
     e00:	ldr	x3, [x19, #1048]
     e04:	cmp	x3, #0x3f
     e08:	b.hi	bac <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x314>  // b.pmore
     e0c:	add	x0, x3, #0x1
     e10:	str	x0, [x19, #1048]
     e14:	add	x19, x19, #0x8
     e18:	add	x3, x3, #0x42
     e1c:	str	x4, [x19, x3, lsl #3]
     e20:	b	a38 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1a0>

0000000000000e24 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>:
     e24:	stp	x19, x20, [sp, #-320]!
     e28:	stp	x21, x22, [sp, #16]
     e2c:	stp	x23, x24, [sp, #32]
     e30:	stp	x25, x26, [sp, #48]
     e34:	stp	x27, x28, [sp, #64]
     e38:	str	x30, [sp, #80]
     e3c:	ldr	x22, [x1, #16]
     e40:	ldr	x25, [x2]
     e44:	ldr	x5, [x0, #16]
     e48:	ldr	x3, [x22, #528]
     e4c:	cmp	x5, x3
     e50:	b.ne	ec8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xa4>  // b.any
     e54:	mov	x19, x0
     e58:	mov	x21, x2
     e5c:	str	xzr, [x0, #1064]
     e60:	ldr	x1, [x22, #8]
     e64:	rbit	x0, x1
     e68:	clz	x0, x0
     e6c:	mov	x3, #0x1                   	// #1
     e70:	add	x6, x22, #0x8
     e74:	cbz	x1, ee4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xc0>
     e78:	lsl	x2, x3, x0
     e7c:	bic	x1, x1, x2
     e80:	ldr	x4, [x19, #1064]
     e84:	orr	x2, x4, x2
     e88:	str	x2, [x19, #1064]
     e8c:	cmp	x4, x2
     e90:	b.eq	e9c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x78>  // b.none
     e94:	add	x2, x19, x0, lsl #3
     e98:	str	xzr, [x2, #1072]
     e9c:	lsl	x0, x0, #3
     ea0:	add	x4, x19, x0
     ea4:	add	x0, x6, x0
     ea8:	ldr	x2, [x4, #1072]
     eac:	ldr	x0, [x0, #8]
     eb0:	orr	x0, x2, x0
     eb4:	str	x0, [x4, #1072]
     eb8:	cbz	x1, ee4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xc0>
     ebc:	rbit	x0, x1
     ec0:	clz	x0, x0
     ec4:	b	e78 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
     ec8:	mov	x4, x5
     ecc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ed0:	add	x2, x2, #0x0
     ed4:	mov	w1, #0x6c                  	// #108
     ed8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     edc:	add	x0, x0, #0x0
     ee0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ee4:	cmp	x25, #0xfff
     ee8:	b.ls	f54 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x130>  // b.plast
     eec:	and	x4, x25, #0xfffffffffffff000
     ef0:	cmp	x5, x4
     ef4:	b.ne	f74 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x150>  // b.any
     ef8:	and	x27, x25, #0xfff
     efc:	ubfx	x0, x25, #6, #6
     f00:	mov	x2, x0
     f04:	str	x0, [sp, #112]
     f08:	and	x1, x25, #0x3f
     f0c:	mov	x0, #0x1                   	// #1
     f10:	lsl	x0, x0, x2
     f14:	mov	x2, x0
     f18:	str	x0, [sp, #104]
     f1c:	ldr	x0, [x19, #1064]
     f20:	tst	x2, x0
     f24:	b.ne	f90 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x16c>  // b.any
     f28:	add	x0, x19, #0x630
     f2c:	str	x0, [sp, #128]
     f30:	mov	x24, #0x1                   	// #1
     f34:	lsl	x0, x24, x1
     f38:	str	x0, [sp, #152]
     f3c:	add	x0, x27, x27, lsl #6
     f40:	add	x0, x0, x24
     f44:	str	x0, [sp, #144]
     f48:	add	x26, x27, x27, lsl #6
     f4c:	add	x26, x19, x26, lsl #3
     f50:	b	1054 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x230>
     f54:	mov	x4, #0x1000                	// #4096
     f58:	mov	x3, x25
     f5c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f60:	add	x2, x2, #0x0
     f64:	mov	w1, #0x172                 	// #370
     f68:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f6c:	add	x0, x0, #0x0
     f70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f74:	mov	x3, x5
     f78:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f7c:	add	x2, x2, #0x0
     f80:	mov	w1, #0x173                 	// #371
     f84:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f88:	add	x0, x0, #0x0
     f8c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f90:	ldr	x0, [sp, #112]
     f94:	add	x2, x19, x0, lsl #3
     f98:	mov	x0, #0x1                   	// #1
     f9c:	lsl	x0, x0, x1
     fa0:	ldr	x2, [x2, #1072]
     fa4:	tst	x0, x2
     fa8:	b.eq	f28 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x104>  // b.none
     fac:	mov	x4, #0x0                   	// #0
     fb0:	mov	x3, #0x0                   	// #0
     fb4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fb8:	add	x2, x2, #0x0
     fbc:	mov	w1, #0x13e                 	// #318
     fc0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fc4:	add	x0, x0, #0x0
     fc8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fcc:	ldr	x0, [sp, #112]
     fd0:	add	x0, x19, x0, lsl #3
     fd4:	ldr	x23, [x0, #1072]
     fd8:	mov	x1, #0x1                   	// #1
     fdc:	ldr	x0, [sp, #152]
     fe0:	ands	x23, x0, x23
     fe4:	b.eq	1030 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x20c>  // b.none
     fe8:	cmp	x24, x1
     fec:	b.ne	1048 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x224>  // b.any
     ff0:	cbz	x1, 1294 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x470>
     ff4:	mov	x0, #0x1                   	// #1
     ff8:	add	x4, sp, #0xa0
     ffc:	add	x2, x4, x0, lsl #3
    1000:	ldur	x3, [x2, #-8]
    1004:	cmp	x3, #0xfff
    1008:	b.hi	1128 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x304>  // b.pmore
    100c:	add	x5, x4, x0, lsl #3
    1010:	ldr	x2, [x19, #16]
    1014:	add	x2, x2, x3
    1018:	stur	x2, [x5, #-8]
    101c:	add	x2, x0, #0x1
    1020:	cmp	x1, x0
    1024:	b.eq	12bc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x498>  // b.none
    1028:	mov	x0, x2
    102c:	b	ffc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1d8>
    1030:	mov	x28, x23
    1034:	mov	x20, x23
    1038:	str	x23, [sp, #120]
    103c:	b	1074 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x250>
    1040:	ldr	x20, [x26, #1584]
    1044:	cbnz	x20, 1378 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x554>
    1048:	add	x24, x24, #0x1
    104c:	cmp	x24, #0x15
    1050:	b.eq	1294 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x470>  // b.none
    1054:	str	x27, [sp, #160]
    1058:	ldr	x23, [x19, #1064]
    105c:	ldr	x0, [sp, #104]
    1060:	ands	x23, x0, x23
    1064:	b.ne	fcc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1a8>  // b.any
    1068:	mov	x28, x23
    106c:	mov	x20, x23
    1070:	str	x23, [sp, #120]
    1074:	sub	x0, x24, #0x1
    1078:	str	x0, [sp, #136]
    107c:	cbnz	x20, 1088 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x264>
    1080:	cbz	x23, 1040 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x21c>
    1084:	b	1048 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x224>
    1088:	cbnz	x28, 10bc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x298>
    108c:	rbit	x1, x20
    1090:	clz	x1, x1
    1094:	str	x1, [sp, #120]
    1098:	mov	x0, #0x1                   	// #1
    109c:	lsl	x0, x0, x1
    10a0:	bic	x20, x20, x0
    10a4:	ldr	x0, [sp, #144]
    10a8:	add	x0, x0, x23, lsl #6
    10ac:	add	x0, x0, x1
    10b0:	add	x0, x19, x0, lsl #3
    10b4:	ldr	x28, [x0, #1584]
    10b8:	cbz	x28, 1108 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2e4>
    10bc:	rbit	x1, x28
    10c0:	clz	x1, x1
    10c4:	mov	x0, #0x1                   	// #1
    10c8:	lsl	x0, x0, x1
    10cc:	bic	x28, x28, x0
    10d0:	ldr	x0, [sp, #120]
    10d4:	add	x0, x0, x23, lsl #6
    10d8:	orr	x2, x28, x20
    10dc:	cmp	x2, #0x0
    10e0:	cinc	x23, x23, eq  // eq = none
    10e4:	ldr	x4, [sp, #136]
    10e8:	add	x3, sp, #0xa8
    10ec:	add	x2, x19, #0x428
    10f0:	add	x1, x1, x0, lsl #6
    10f4:	ldr	x0, [sp, #128]
    10f8:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    10fc:	cbz	x0, 107c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x258>
    1100:	add	x1, x0, #0x1
    1104:	b	fe8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1c4>
    1108:	mov	x4, #0x0                   	// #0
    110c:	mov	x3, #0x0                   	// #0
    1110:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1114:	add	x2, x2, #0x0
    1118:	mov	w1, #0x132                 	// #306
    111c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1120:	add	x0, x0, #0x0
    1124:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1128:	mov	x4, #0x1000                	// #4096
    112c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1130:	add	x2, x2, #0x0
    1134:	mov	w1, #0x16f                 	// #367
    1138:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    113c:	add	x0, x0, #0x0
    1140:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1144:	mov	x4, x25
    1148:	mov	x3, x0
    114c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1150:	add	x2, x2, #0x0
    1154:	mov	w1, #0x143                 	// #323
    1158:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    115c:	add	x0, x0, #0x0
    1160:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1164:	mov	x4, x0
    1168:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    116c:	add	x2, x2, #0x0
    1170:	mov	w1, #0x7f                  	// #127
    1174:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1178:	add	x0, x0, #0x0
    117c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1180:	mov	x4, #0x1000                	// #4096
    1184:	mov	x3, x5
    1188:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    118c:	add	x2, x2, #0x0
    1190:	mov	w1, #0x172                 	// #370
    1194:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1198:	add	x0, x0, #0x0
    119c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11a0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11a4:	add	x2, x2, #0x0
    11a8:	mov	w1, #0x173                 	// #371
    11ac:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11b0:	add	x0, x0, #0x0
    11b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11b8:	mov	x4, #0x1000                	// #4096
    11bc:	mov	x3, x6
    11c0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11c4:	add	x2, x2, #0x0
    11c8:	mov	w1, #0x172                 	// #370
    11cc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11d0:	add	x0, x0, #0x0
    11d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11d8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11dc:	add	x2, x2, #0x0
    11e0:	mov	w1, #0x173                 	// #371
    11e4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11e8:	add	x0, x0, #0x0
    11ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11f0:	add	x0, x0, #0x1
    11f4:	add	x2, x2, #0x10
    11f8:	cmp	x4, x0
    11fc:	b.eq	1230 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x40c>  // b.none
    1200:	ldrh	w3, [x2]
    1204:	cmp	x5, x3
    1208:	b.ne	11f0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3cc>  // b.any
    120c:	ldrh	w3, [x2, #2]
    1210:	cmp	x6, x3
    1214:	b.ne	11f0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3cc>  // b.any
    1218:	add	x0, x19, x0, lsl #4
    121c:	add	x0, x0, #0x210, lsl #12
    1220:	ldr	w3, [x0, #2628]
    1224:	ldr	w4, [x0, #2632]
    1228:	ldr	w2, [x0, #2636]
    122c:	b	123c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x418>
    1230:	mov	w2, w14
    1234:	mov	w4, w10
    1238:	mov	w3, w13
    123c:	add	x5, x5, x11
    1240:	ldr	x5, [x8, x5, lsl #3]
    1244:	add	x0, x6, x11
    1248:	ldr	x0, [x8, x0, lsl #3]
    124c:	sxtw	x2, w2
    1250:	str	x2, [x22]
    1254:	ldr	x2, [x5, #16]
    1258:	str	x2, [x22, #8]
    125c:	ldr	x0, [x0, #16]
    1260:	str	x0, [x22, #16]
    1264:	str	w4, [x22, #24]
    1268:	str	w3, [x22, #28]
    126c:	add	x0, x7, #0x1
    1270:	add	x22, x22, #0x20
    1274:	cmp	x7, x1
    1278:	b.eq	12a0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x47c>  // b.none
    127c:	mov	x7, x0
    1280:	b	131c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x4f8>
    1284:	mov	w2, w14
    1288:	mov	w4, w10
    128c:	mov	w3, w13
    1290:	b	123c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x418>
    1294:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1298:	add	x0, x0, #0x0
    129c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    12a0:	ldp	x21, x22, [sp, #16]
    12a4:	ldp	x23, x24, [sp, #32]
    12a8:	ldp	x25, x26, [sp, #48]
    12ac:	ldp	x27, x28, [sp, #64]
    12b0:	ldr	x30, [sp, #80]
    12b4:	ldp	x19, x20, [sp], #320
    12b8:	ret
    12bc:	ldr	x0, [sp, #160]
    12c0:	cmp	x25, x0
    12c4:	b.ne	1144 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x320>  // b.any
    12c8:	ldr	x3, [x21]
    12cc:	cmp	x3, x0
    12d0:	b.ne	1164 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x340>  // b.any
    12d4:	mov	w0, #0x1                   	// #1
    12d8:	strb	w0, [x22, #2224]
    12dc:	cmp	x1, #0x14
    12e0:	mov	x0, #0x14                  	// #20
    12e4:	csel	x1, x1, x0, ls  // ls = plast
    12e8:	str	w1, [x22, #1576]
    12ec:	add	x22, x22, #0x630
    12f0:	mov	x7, #0x1                   	// #1
    12f4:	add	x9, sp, #0xa0
    12f8:	add	x8, x19, #0x10
    12fc:	add	x15, x8, #0x410, lsl #12
    1300:	mov	w14, #0x0                   	// #0
    1304:	mov	w10, #0xffffffff            	// #-1
    1308:	mov	w13, w10
    130c:	mov	x12, #0xa40                 	// #2624
    1310:	movk	x12, #0x21, lsl #16
    1314:	mov	x11, #0x1146                	// #4422
    1318:	movk	x11, #0x4, lsl #16
    131c:	add	x0, x9, x7, lsl #3
    1320:	ldur	x5, [x0, #-8]
    1324:	udiv	x0, x7, x1
    1328:	msub	x0, x0, x1, x7
    132c:	cmp	x5, #0xfff
    1330:	b.ls	1180 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x35c>  // b.plast
    1334:	ldr	x3, [x8]
    1338:	and	x4, x5, #0xfffffffffffff000
    133c:	cmp	x3, x4
    1340:	b.ne	11a0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x37c>  // b.any
    1344:	ldr	x6, [x9, x0, lsl #3]
    1348:	and	x5, x5, #0xfff
    134c:	cmp	x6, #0xfff
    1350:	b.ls	11b8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x394>  // b.plast
    1354:	and	x4, x6, #0xfffffffffffff000
    1358:	cmp	x4, x3
    135c:	b.ne	11d8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3b4>  // b.any
    1360:	and	x6, x6, #0xfff
    1364:	ldr	x4, [x15, #2608]
    1368:	cbz	x4, 1284 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x460>
    136c:	add	x2, x19, x12
    1370:	mov	x0, #0x0                   	// #0
    1374:	b	1200 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3dc>
    1378:	cbz	x28, 1384 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x560>
    137c:	mov	x20, x23
    1380:	b	10bc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x298>
    1384:	mov	x23, x28
    1388:	b	108c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x268>

000000000000138c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb>:
    138c:	stp	x19, x20, [sp, #-64]!
    1390:	stp	x21, x22, [sp, #16]
    1394:	str	x30, [sp, #48]
    1398:	mov	x19, x0
    139c:	ldr	x21, [x1, #16]
    13a0:	ldr	x0, [x21, #8]
    13a4:	cbnz	x0, 16f8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x36c>
    13a8:	ldp	x21, x22, [sp, #16]
    13ac:	ldr	x30, [sp, #48]
    13b0:	ldp	x19, x20, [sp], #64
    13b4:	ret
    13b8:	and	x2, x0, #0xfffffffffffff000
    13bc:	cmp	x1, x2
    13c0:	b.ne	171c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x390>  // b.any
    13c4:	and	x3, x0, #0xfff
    13c8:	ldr	x6, [x21, #1568]
    13cc:	cbz	x6, 1820 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x494>
    13d0:	lsr	x3, x3, #6
    13d4:	mov	x1, #0x1                   	// #1
    13d8:	lsl	x8, x1, x3
    13dc:	lsl	x2, x1, x0
    13e0:	mov	x1, #0x0                   	// #0
    13e4:	add	x7, x21, #0x420
    13e8:	add	x4, x19, #0x630
    13ec:	b	1414 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x88>
    13f0:	add	x0, x0, x0, lsl #6
    13f4:	add	x0, x0, x3
    13f8:	add	x0, x4, x0, lsl #3
    13fc:	ldr	x0, [x0, #8]
    1400:	tst	x2, x0
    1404:	b.eq	171c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x390>  // b.none
    1408:	add	x1, x1, #0x1
    140c:	cmp	x6, x1
    1410:	b.eq	1430 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xa4>  // b.none
    1414:	lsl	x0, x1, #3
    1418:	ldr	w0, [x7, x0]
    141c:	add	x5, x0, x0, lsl #6
    1420:	ldr	x5, [x4, x5, lsl #3]
    1424:	tst	x8, x5
    1428:	b.eq	171c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x390>  // b.none
    142c:	b	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x64>
    1430:	ldp	x23, x24, [sp, #32]
    1434:	b	13a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>
    1438:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    143c:	b	173c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3b0>
    1440:	mov	x4, x1
    1444:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1448:	add	x2, x2, #0x0
    144c:	mov	w1, #0x6c                  	// #108
    1450:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1454:	add	x0, x0, #0x0
    1458:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    145c:	mov	x4, #0x1000                	// #4096
    1460:	mov	x3, x0
    1464:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1468:	add	x2, x2, #0x0
    146c:	mov	w1, #0x172                 	// #370
    1470:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1474:	add	x0, x0, #0x0
    1478:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    147c:	mov	x3, x1
    1480:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1484:	add	x2, x2, #0x0
    1488:	mov	w1, #0x173                 	// #371
    148c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1490:	add	x0, x0, #0x0
    1494:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1498:	add	x4, x21, x5, lsl #3
    149c:	mov	x2, #0x1                   	// #1
    14a0:	lsl	x2, x2, x0
    14a4:	ldr	x4, [x4, #16]
    14a8:	tst	x2, x4
    14ac:	b.eq	1794 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x408>  // b.none
    14b0:	dmb	ish
    14b4:	strb	wzr, [x19, #8]
    14b8:	ldp	x23, x24, [sp, #32]
    14bc:	b	13a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>
    14c0:	add	x2, x19, #0x208, lsl #12
    14c4:	add	x2, x2, #0x630
    14c8:	str	x8, [x2]
    14cc:	add	x2, x19, #0x208, lsl #12
    14d0:	add	x2, x2, #0x800
    14d4:	str	x1, [x2, #56]
    14d8:	add	x1, x19, x5, lsl #3
    14dc:	add	x1, x1, #0x208, lsl #12
    14e0:	mov	x2, #0x1                   	// #1
    14e4:	lsl	x0, x2, x0
    14e8:	str	x0, [x1, #2112]
    14ec:	add	x0, x19, #0x208, lsl #12
    14f0:	add	x0, x0, #0x800
    14f4:	sub	x1, x0, #0x1d0
    14f8:	mov	x4, x2
    14fc:	add	x9, x19, #0x208, lsl #12
    1500:	add	x3, x0, #0x38
    1504:	mov	x12, #0x208                 	// #520
    1508:	add	x11, x19, #0x630
    150c:	ldr	x0, [x1]
    1510:	cbnz	x0, 157c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1f0>
    1514:	add	x0, x19, #0x208, lsl #12
    1518:	add	x0, x0, #0x800
    151c:	ldr	x1, [x0, #56]
    1520:	ldr	x0, [x21, #8]
    1524:	and	x0, x1, x0
    1528:	rbit	x2, x0
    152c:	clz	x2, x2
    1530:	cbz	x0, 16e8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x35c>
    1534:	mov	x5, #0x1                   	// #1
    1538:	add	x4, x21, #0x8
    153c:	add	x3, x19, #0x208, lsl #12
    1540:	add	x3, x3, #0x838
    1544:	lsl	x6, x5, x2
    1548:	bic	x0, x0, x6
    154c:	tst	x1, x6
    1550:	b.eq	156c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1e0>  // b.none
    1554:	add	x6, x4, x2, lsl #3
    1558:	add	x2, x3, x2, lsl #3
    155c:	ldr	x6, [x6, #8]
    1560:	ldr	x2, [x2, #8]
    1564:	tst	x6, x2
    1568:	b.ne	1698 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x30c>  // b.any
    156c:	cbz	x0, 16e8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x35c>
    1570:	rbit	x2, x0
    1574:	clz	x2, x2
    1578:	b	1544 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1b8>
    157c:	rbit	x2, x0
    1580:	clz	x2, x2
    1584:	lsl	x8, x4, x2
    1588:	bic	x5, x0, x8
    158c:	str	x5, [x1]
    1590:	add	x5, x19, x2, lsl #3
    1594:	add	x6, x5, #0x208, lsl #12
    1598:	ldr	x6, [x6, #1592]
    159c:	cbz	x6, 1604 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x278>
    15a0:	rbit	x13, x6
    15a4:	clz	x13, x13
    15a8:	lsl	x7, x4, x13
    15ac:	bic	x6, x6, x7
    15b0:	add	x5, x5, #0x208, lsl #12
    15b4:	str	x6, [x5, #1592]
    15b8:	cbnz	x6, 1624 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x298>
    15bc:	add	x2, x13, x2, lsl #6
    15c0:	lsr	x0, x2, #6
    15c4:	and	x5, x2, #0x3f
    15c8:	ldr	x6, [x9, #2104]
    15cc:	lsl	x7, x4, x0
    15d0:	tst	x6, x7
    15d4:	b.eq	1630 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2a4>  // b.none
    15d8:	add	x0, x3, x0, lsl #3
    15dc:	ldr	x6, [x0, #8]
    15e0:	lsl	x5, x4, x5
    15e4:	orr	x5, x5, x6
    15e8:	str	x5, [x0, #8]
    15ec:	cmp	x6, x5
    15f0:	b.eq	150c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x180>  // b.none
    15f4:	mul	x0, x2, x12
    15f8:	ldr	x6, [x10, x0]
    15fc:	add	x2, x2, x2, lsl #6
    1600:	b	1664 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2d8>
    1604:	mov	x4, #0x0                   	// #0
    1608:	mov	x3, #0x0                   	// #0
    160c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1610:	add	x2, x2, #0x0
    1614:	mov	w1, #0x30                  	// #48
    1618:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    161c:	add	x0, x0, #0x0
    1620:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1624:	orr	x0, x0, x8
    1628:	str	x0, [x1]
    162c:	b	15bc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x230>
    1630:	orr	x6, x6, x7
    1634:	str	x6, [x9, #2104]
    1638:	add	x6, x3, x0, lsl #3
    163c:	str	xzr, [x6, #8]
    1640:	b	15d8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x24c>
    1644:	add	x5, x19, x0, lsl #3
    1648:	add	x5, x5, #0x208, lsl #12
    164c:	add	x0, x2, x0
    1650:	add	x0, x11, x0, lsl #3
    1654:	ldr	x7, [x5, #1592]
    1658:	ldr	x0, [x0, #8]
    165c:	orr	x0, x7, x0
    1660:	str	x0, [x5, #1592]
    1664:	cbz	x6, 150c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x180>
    1668:	rbit	x0, x6
    166c:	clz	x0, x0
    1670:	lsl	x5, x4, x0
    1674:	bic	x6, x6, x5
    1678:	ldr	x7, [x1]
    167c:	orr	x5, x7, x5
    1680:	str	x5, [x1]
    1684:	cmp	x7, x5
    1688:	b.eq	1644 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2b8>  // b.none
    168c:	add	x5, x1, x0, lsl #3
    1690:	str	xzr, [x5, #8]
    1694:	b	1644 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2b8>
    1698:	ldr	x23, [x22]
    169c:	ldr	x0, [x20]
    16a0:	ldr	x1, [x0]
    16a4:	mov	x0, x20
    16a8:	blr	x1
    16ac:	mov	w24, w0
    16b0:	ldr	x0, [x20]
    16b4:	ldr	x1, [x0, #8]
    16b8:	mov	x0, x20
    16bc:	blr	x1
    16c0:	mov	w4, w0
    16c4:	mov	w3, w24
    16c8:	mov	x2, x23
    16cc:	add	x1, x21, #0x8
    16d0:	add	x0, x19, #0x10
    16d4:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    16d8:	mov	x2, x22
    16dc:	mov	x1, x20
    16e0:	mov	x0, x19
    16e4:	bl	e24 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>
    16e8:	dmb	ish
    16ec:	strb	wzr, [x19, #8]
    16f0:	ldp	x23, x24, [sp, #32]
    16f4:	b	13a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>
    16f8:	stp	x23, x24, [sp, #32]
    16fc:	mov	x20, x1
    1700:	mov	x22, x2
    1704:	ldr	x0, [x2]
    1708:	cbz	x0, 171c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x390>
    170c:	ldr	x1, [x21, #528]
    1710:	ldr	x2, [x19, #16]
    1714:	cmp	x1, x2
    1718:	b.eq	13b8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2c>  // b.none
    171c:	add	x0, x19, #0x8
    1720:	mov	w2, #0x1                   	// #1
    1724:	ldxrb	w1, [x0]
    1728:	stxrb	w3, w2, [x0]
    172c:	cbnz	w3, 1724 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x398>
    1730:	dmb	ish
    1734:	and	w1, w1, #0xff
    1738:	cbnz	w1, 1438 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xac>
    173c:	mov	x2, x22
    1740:	mov	x1, x21
    1744:	mov	x0, x19
    1748:	bl	3cc <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
    174c:	ldr	x0, [x22]
    1750:	ldr	x1, [x19, #16]
    1754:	ldr	x3, [x21, #528]
    1758:	cmp	x1, x3
    175c:	b.ne	1440 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xb4>  // b.any
    1760:	cmp	x0, #0xfff
    1764:	b.ls	145c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xd0>  // b.plast
    1768:	and	x4, x0, #0xfffffffffffff000
    176c:	cmp	x1, x4
    1770:	b.ne	147c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xf0>  // b.any
    1774:	and	x3, x0, #0xfff
    1778:	ubfx	x5, x0, #6, #6
    177c:	and	x0, x0, #0x3f
    1780:	mov	x1, #0x1                   	// #1
    1784:	lsl	x1, x1, x5
    1788:	ldr	x2, [x21, #8]
    178c:	tst	x1, x2
    1790:	b.ne	1498 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x10c>  // b.any
    1794:	add	x2, x19, #0x208, lsl #12
    1798:	add	x2, x2, #0x630
    179c:	str	xzr, [x2]
    17a0:	add	x10, x19, #0x630
    17a4:	add	x2, x3, x3, lsl #6
    17a8:	ldr	x4, [x10, x2, lsl #3]
    17ac:	rbit	x2, x4
    17b0:	clz	x2, x2
    17b4:	mov	x7, #0x0                   	// #0
    17b8:	cbz	x4, 14cc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x140>
    17bc:	mov	x9, #0x1                   	// #1
    17c0:	add	x12, x19, #0x208, lsl #12
    17c4:	add	x12, x12, #0x630
    17c8:	mov	x11, x10
    17cc:	add	x3, x3, x3, lsl #6
    17d0:	lsl	x6, x9, x2
    17d4:	bic	x4, x4, x6
    17d8:	orr	x8, x6, x7
    17dc:	bics	xzr, x6, x7
    17e0:	b.eq	17ec <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x460>  // b.none
    17e4:	add	x6, x12, x2, lsl #3
    17e8:	str	xzr, [x6, #8]
    17ec:	add	x6, x19, x2, lsl #3
    17f0:	add	x6, x6, #0x208, lsl #12
    17f4:	add	x2, x3, x2
    17f8:	add	x2, x11, x2, lsl #3
    17fc:	ldr	x7, [x6, #1592]
    1800:	ldr	x2, [x2, #8]
    1804:	orr	x2, x7, x2
    1808:	str	x2, [x6, #1592]
    180c:	cbz	x4, 14c0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x134>
    1810:	rbit	x2, x4
    1814:	clz	x2, x2
    1818:	mov	x7, x8
    181c:	b	17d0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x444>
    1820:	ldp	x23, x24, [sp, #32]
    1824:	b	13a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>:
   0:	sub	sp, sp, #0x150
   4:	str	x30, [sp]
   8:	ldr	x5, [x0]
   c:	ldr	x6, [x1, #520]
  10:	cmp	x5, x6
  14:	b.eq	28 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x28>  // b.none
  18:	str	xzr, [x1]
  1c:	str	x5, [x1, #520]
  20:	str	xzr, [x1, #1040]
  24:	str	xzr, [x1, #1560]
  28:	cmp	x2, #0xfff
  2c:	b.ls	c8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xc8>  // b.plast
  30:	ldr	x5, [x0]
  34:	and	x6, x2, #0xfffffffffffff000
  38:	cmp	x5, x6
  3c:	b.ne	e8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xe8>  // b.any
  40:	ldr	x6, [x1, #520]
  44:	cmp	x6, x5
  48:	b.ne	108 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x108>  // b.any
  4c:	add	x5, x0, #0x208, lsl #12
  50:	add	x5, x5, #0x620
  54:	str	xzr, [x5]
  58:	ldr	x6, [x1]
  5c:	rbit	x5, x6
  60:	clz	x5, x5
  64:	cbz	x6, 128 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x128>
  68:	mov	x10, #0x1                   	// #1
  6c:	add	x9, x0, #0x208, lsl #12
  70:	add	x9, x9, #0x620
  74:	lsl	x7, x10, x5
  78:	bic	x6, x6, x7
  7c:	ldr	x8, [x9]
  80:	orr	x7, x8, x7
  84:	str	x7, [x9]
  88:	cmp	x8, x7
  8c:	b.eq	98 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x98>  // b.none
  90:	add	x7, x9, x5, lsl #3
  94:	str	xzr, [x7, #8]
  98:	lsl	x5, x5, #3
  9c:	add	x7, x0, x5
  a0:	add	x7, x7, #0x208, lsl #12
  a4:	add	x5, x1, x5
  a8:	ldr	x8, [x7, #1576]
  ac:	ldr	x5, [x5, #8]
  b0:	orr	x5, x8, x5
  b4:	str	x5, [x7, #1576]
  b8:	cbz	x6, 128 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x128>
  bc:	rbit	x5, x6
  c0:	clz	x5, x5
  c4:	b	74 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x74>
  c8:	mov	x4, #0x1000                	// #4096
  cc:	mov	x3, x2
  d0:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  d4:	add	x2, x2, #0x0
  d8:	mov	w1, #0x172                 	// #370
  dc:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  e0:	add	x0, x0, #0x0
  e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  e8:	mov	x4, x6
  ec:	mov	x3, x5
  f0:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  f4:	add	x2, x2, #0x0
  f8:	mov	w1, #0x173                 	// #371
  fc:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 100:	add	x0, x0, #0x0
 104:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 108:	mov	x4, x5
 10c:	mov	x3, x6
 110:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 114:	add	x2, x2, #0x0
 118:	mov	w1, #0x6c                  	// #108
 11c:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 120:	add	x0, x0, #0x0
 124:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 128:	and	x5, x2, #0xfff
 12c:	ubfx	x14, x2, #6, #6
 130:	mov	x6, #0x1                   	// #1
 134:	lsl	x17, x6, x14
 138:	lsl	x11, x6, x2
 13c:	mov	x12, #0x0                   	// #0
 140:	add	x6, x0, #0x208, lsl #12
 144:	add	x6, x6, #0x620
 148:	mov	x13, #0x1                   	// #1
 14c:	add	x18, x0, #0x620
 150:	add	x30, sp, #0x10
 154:	ldr	x9, [x6]
 158:	cbnz	x9, 1a4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1a4>
 15c:	cbz	x12, 2ec <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2ec>
 160:	mov	x6, #0x1                   	// #1
 164:	add	x14, x0, #0x410, lsl #12
 168:	mov	x15, #0x1ffff               	// #131071
 16c:	add	x17, sp, #0x10
 170:	and	w13, w5, #0xffff
 174:	mov	x16, #0x10a3                	// #4259
 178:	movk	x16, #0x2, lsl #16
 17c:	mov	w18, #0x0                   	// #0
 180:	add	x8, x1, #0x418
 184:	ldr	x7, [x14, #2608]
 188:	cmp	x7, x15
 18c:	b.ls	274 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x274>  // b.plast
 190:	add	x2, x6, #0x1
 194:	cmp	x12, x6
 198:	b.eq	2ec <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2ec>  // b.none
 19c:	mov	x6, x2
 1a0:	b	184 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x184>
 1a4:	rbit	x2, x9
 1a8:	clz	x2, x2
 1ac:	lsl	x15, x13, x2
 1b0:	bic	x7, x9, x15
 1b4:	str	x7, [x6]
 1b8:	add	x7, x0, x2, lsl #3
 1bc:	add	x8, x7, #0x208, lsl #12
 1c0:	ldr	x10, [x8, #1576]
 1c4:	cbz	x10, 22c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x22c>
 1c8:	rbit	x16, x10
 1cc:	clz	x16, x16
 1d0:	lsl	x8, x13, x16
 1d4:	bic	x8, x10, x8
 1d8:	add	x7, x7, #0x208, lsl #12
 1dc:	str	x8, [x7, #1576]
 1e0:	cbnz	x8, 24c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x24c>
 1e4:	add	x2, x16, x2, lsl #6
 1e8:	add	x7, x2, x2, lsl #6
 1ec:	add	x7, x0, x7, lsl #3
 1f0:	ldr	x8, [x7, #1568]
 1f4:	tst	x8, x17
 1f8:	b.eq	258 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x258>  // b.none
 1fc:	add	x7, x2, x2, lsl #6
 200:	add	x7, x7, x14
 204:	add	x7, x18, x7, lsl #3
 208:	ldr	x9, [x7, #8]
 20c:	orr	x8, x9, x11
 210:	str	x8, [x7, #8]
 214:	cmp	x12, #0x27
 218:	ccmp	x9, x8, #0x4, ls  // ls = plast
 21c:	b.eq	154 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x154>  // b.none
 220:	str	x2, [x30, x12, lsl #3]
 224:	add	x12, x12, #0x1
 228:	b	154 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x154>
 22c:	mov	x4, #0x0                   	// #0
 230:	mov	x3, #0x0                   	// #0
 234:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 238:	add	x2, x2, #0x0
 23c:	mov	w1, #0x30                  	// #48
 240:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 244:	add	x0, x0, #0x0
 248:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 24c:	orr	x9, x9, x15
 250:	str	x9, [x6]
 254:	b	1e4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1e4>
 258:	orr	x8, x8, x17
 25c:	str	x8, [x7, #1568]
 260:	add	x7, x2, x2, lsl #6
 264:	add	x7, x7, x14
 268:	add	x7, x18, x7, lsl #3
 26c:	str	xzr, [x7, #8]
 270:	b	1fc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1fc>
 274:	add	x2, x17, x6, lsl #3
 278:	ldur	x10, [x2, #-8]
 27c:	and	w30, w10, #0xffff
 280:	ldr	x11, [x1, #1560]
 284:	cbz	x11, 2e4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2e4>
 288:	mov	x2, x9
 28c:	lsl	x5, x2, #3
 290:	ldr	w5, [x8, x5]
 294:	cmp	w5, w10
 298:	b.eq	2b0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2b0>  // b.none
 29c:	add	x2, x2, #0x1
 2a0:	cmp	x2, x11
 2a4:	b.ne	28c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x28c>  // b.any
 2a8:	mov	w10, w18
 2ac:	b	2b8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2b8>
 2b0:	add	x2, x1, x2, lsl #3
 2b4:	ldr	w10, [x2, #1052]
 2b8:	add	x2, x7, #0x1
 2bc:	str	x2, [x14, #2608]
 2c0:	add	x2, x7, x16
 2c4:	lsl	x2, x2, #4
 2c8:	add	x5, x0, x2
 2cc:	strh	w30, [x0, x2]
 2d0:	strh	w13, [x5, #2]
 2d4:	str	w10, [x5, #4]
 2d8:	str	w3, [x5, #8]
 2dc:	str	w4, [x5, #12]
 2e0:	b	190 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x190>
 2e4:	mov	w10, w18
 2e8:	b	2b8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2b8>
 2ec:	mov	x0, x12
 2f0:	ldr	x30, [sp]
 2f4:	add	sp, sp, #0x150
 2f8:	ret

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	str	x30, [sp, #80]
   8:	mov	x20, x0
   c:	mov	x0, x4
  10:	cbnz	x4, 20 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x20>
  14:	ldr	x30, [sp, #80]
  18:	ldp	x19, x20, [sp], #112
  1c:	ret
  20:	stp	x21, x22, [sp, #16]
  24:	stp	x23, x24, [sp, #32]
  28:	mov	x22, x2
  2c:	mov	x23, x3
  30:	str	x1, [x3]
  34:	cmp	x1, #0x1, lsl #12
  38:	b.hi	b4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xb4>  // b.pmore
  3c:	lsr	x3, x1, #12
  40:	ubfx	x4, x1, #6, #6
  44:	mov	x2, #0x1                   	// #1
  48:	lsl	x2, x2, x4
  4c:	ldr	x5, [x22, x3, lsl #3]
  50:	tst	x2, x5
  54:	b.ne	dc <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xdc>  // b.any
  58:	stp	x25, x26, [sp, #48]
  5c:	stp	x27, x28, [sp, #64]
  60:	add	x2, x1, x1, lsl #6
  64:	add	x2, x2, #0x1
  68:	str	x2, [sp, #104]
  6c:	mov	x24, #0x0                   	// #0
  70:	mov	x26, #0x0                   	// #0
  74:	mov	x27, #0x0                   	// #0
  78:	mov	x25, #0x0                   	// #0
  7c:	mov	x28, #0x1                   	// #1
  80:	add	x1, x1, x1, lsl #6
  84:	lsl	x19, x1, #3
  88:	sub	x21, x0, #0x1
  8c:	cbnz	x26, 108 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x108>
  90:	cbnz	x25, 9c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x9c>
  94:	ldr	x0, [x20, x19]
  98:	cbnz	x0, 1a4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1a4>
  9c:	mov	x0, x26
  a0:	ldp	x21, x22, [sp, #16]
  a4:	ldp	x23, x24, [sp, #32]
  a8:	ldp	x25, x26, [sp, #48]
  ac:	ldp	x27, x28, [sp, #64]
  b0:	b	14 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x14>
  b4:	stp	x25, x26, [sp, #48]
  b8:	stp	x27, x28, [sp, #64]
  bc:	mov	x4, #0x1000                	// #4096
  c0:	mov	x3, x1
  c4:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
  c8:	add	x2, x2, #0x0
  cc:	mov	w1, #0x143                 	// #323
  d0:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
  d4:	add	x0, x0, #0x0
  d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  dc:	mov	x5, #0x1                   	// #1
  e0:	lsl	x5, x5, x1
  e4:	add	x2, x4, x3, lsl #6
  e8:	add	x2, x22, x2, lsl #3
  ec:	ldr	x2, [x2, #8]
  f0:	tst	x5, x2
  f4:	b.eq	58 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x58>  // b.none
  f8:	mov	x0, #0x1                   	// #1
  fc:	ldp	x21, x22, [sp, #16]
 100:	ldp	x23, x24, [sp, #32]
 104:	b	14 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x14>
 108:	cbnz	x24, 130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x130>
 10c:	rbit	x27, x26
 110:	clz	x27, x27
 114:	lsl	x0, x28, x27
 118:	bic	x26, x26, x0
 11c:	ldr	x0, [sp, #104]
 120:	add	x0, x0, x25, lsl #6
 124:	add	x0, x0, x27
 128:	ldr	x24, [x20, x0, lsl #3]
 12c:	cbz	x24, 184 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x184>
 130:	rbit	x0, x24
 134:	clz	x0, x0
 138:	lsl	x1, x28, x0
 13c:	bic	x24, x24, x1
 140:	add	x1, x27, x25, lsl #6
 144:	orr	x2, x26, x24
 148:	cmp	x2, #0x0
 14c:	cinc	x25, x25, eq  // eq = none
 150:	mov	x4, x21
 154:	add	x3, x23, #0x8
 158:	mov	x2, x22
 15c:	add	x1, x0, x1, lsl #6
 160:	mov	x0, x20
 164:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 168:	cbz	x0, 8c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x8c>
 16c:	add	x0, x0, #0x1
 170:	ldp	x21, x22, [sp, #16]
 174:	ldp	x23, x24, [sp, #32]
 178:	ldp	x25, x26, [sp, #48]
 17c:	ldp	x27, x28, [sp, #64]
 180:	b	14 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x14>
 184:	mov	x4, #0x0                   	// #0
 188:	mov	x3, #0x0                   	// #0
 18c:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 190:	add	x2, x2, #0x0
 194:	mov	w1, #0x132                 	// #306
 198:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1a4:	mov	x26, x25
 1a8:	cbnz	x24, 130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x130>
 1ac:	mov	x26, x0
 1b0:	mov	x25, x24
 1b4:	b	10c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x10c>

sanitizer_deadlock_detector2.o:     file format elf64-littleaarch64


sanitizer_errno.o:     file format elf64-littleaarch64


sanitizer_file.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x3, #0x0                   	// #0
   c:	mov	x2, x1
  10:	mov	x1, x0
  14:	mov	w0, #0x2                   	// #2
  18:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  1c:	ldr	x30, [sp], #16
  20:	ret

0000000000000024 <_ZN11__sanitizer8RawWriteEPKc>:
  24:	stp	x19, x30, [sp, #-16]!
  28:	mov	x19, x0
  2c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  30:	mov	x2, x0
  34:	mov	x1, x19
  38:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>
  44:	ldp	x19, x30, [sp], #16
  48:	ret

000000000000004c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>:
  4c:	stp	x19, x20, [sp, #-32]!
  50:	str	x30, [sp, #24]
  54:	mov	x19, x0
  58:	ldr	x0, [x0]
  5c:	ldrb	w3, [x0]
  60:	and	x3, x3, #0xff
  64:	cmp	x3, #0x1
  68:	b.ne	134 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xe8>  // b.any
  6c:	ldr	w0, [x19, #8]
  70:	sub	w0, w0, #0x1
  74:	cmp	w0, #0x1
  78:	b.ls	128 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xdc>  // b.plast
  7c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  80:	mov	x20, x0
  84:	adrp	x0, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
  88:	ldr	x0, [x0]
  8c:	ldr	x0, [x0]
  90:	cmp	x0, x20
  94:	b.eq	154 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x108>  // b.none
  98:	ldr	w0, [x19, #8]
  9c:	cmn	w0, #0x1
  a0:	b.eq	164 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x118>  // b.none
  a4:	ldr	x1, [x19, #8208]
  a8:	cmp	x1, x20
  ac:	b.eq	128 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xdc>  // b.none
  b0:	str	x21, [sp, #16]
  b4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  b8:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
  bc:	mov	x4, x0
  c0:	cmp	x0, #0x0
  c4:	cset	w1, ne  // ne = any
  c8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  cc:	ldr	x0, [x0]
  d0:	ldrb	w0, [x0, #48]
  d4:	tst	w1, w0
  d8:	b.ne	16c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x120>  // b.any
  dc:	mov	x4, x20
  e0:	add	x3, x19, #0xc
  e4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  e8:	add	x2, x2, #0x0
  ec:	mov	x1, #0x1000                	// #4096
  f0:	add	x0, x19, #0x1, lsl #12
  f4:	add	x0, x0, #0xc
  f8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  fc:	add	x21, x19, #0x1, lsl #12
 100:	add	x21, x21, #0xc
 104:	mov	x2, #0x0                   	// #0
 108:	mov	w1, #0x1                   	// #1
 10c:	mov	x0, x21
 110:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 114:	str	w0, [x19, #8]
 118:	cmn	w0, #0x1
 11c:	b.eq	190 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x144>  // b.none
 120:	str	x20, [x19, #8208]
 124:	ldr	x21, [sp, #16]
 128:	ldr	x30, [sp, #24]
 12c:	ldp	x19, x20, [sp], #32
 130:	ret
 134:	str	x21, [sp, #16]
 138:	mov	x4, #0x1                   	// #1
 13c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 140:	add	x2, x2, #0x0
 144:	mov	w1, #0x2a                  	// #42
 148:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 154:	adrp	x0, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
 158:	ldr	x0, [x0]
 15c:	ldr	x20, [x0]
 160:	b	98 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x4c>
 164:	str	x21, [sp, #16]
 168:	b	b8 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x6c>
 16c:	mov	x5, x20
 170:	add	x3, x19, #0xc
 174:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 178:	add	x2, x2, #0x0
 17c:	mov	x1, #0x1000                	// #4096
 180:	add	x0, x19, #0x1, lsl #12
 184:	add	x0, x0, #0xc
 188:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 18c:	b	fc <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xb0>
 190:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 194:	add	x19, x19, #0x0
 198:	mov	x0, x19
 19c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1a0:	mov	x4, #0x0                   	// #0
 1a4:	mov	x3, #0x0                   	// #0
 1a8:	mov	x2, x0
 1ac:	mov	x1, x19
 1b0:	mov	w0, #0x2                   	// #2
 1b4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1b8:	mov	x0, x21
 1bc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1c0:	mov	x4, #0x0                   	// #0
 1c4:	mov	x3, #0x0                   	// #0
 1c8:	mov	x2, x0
 1cc:	mov	x1, x21
 1d0:	mov	w0, #0x2                   	// #2
 1d4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1d8:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001dc <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>:
 1dc:	cbz	x1, 2f8 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x11c>
 1e0:	sub	sp, sp, #0x30
 1e4:	stp	x19, x20, [sp, #16]
 1e8:	stp	x21, x30, [sp, #32]
 1ec:	mov	x19, x0
 1f0:	mov	x20, x1
 1f4:	mov	x0, x1
 1f8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1fc:	cmp	x0, #0xf9c
 200:	b.hi	274 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x98>  // b.pmore
 204:	ldr	x21, [x19]
 208:	mov	w1, #0x1                   	// #1
 20c:	ldxrb	w0, [x21]
 210:	stxrb	w2, w1, [x21]
 214:	cbnz	w2, 20c <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x30>
 218:	dmb	ish
 21c:	and	w0, w0, #0xff
 220:	cbnz	w0, 2a8 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xcc>
 224:	ldr	w0, [x19, #8]
 228:	sub	w1, w0, #0x1
 22c:	cmp	w1, #0x1
 230:	ccmn	w0, #0x1, #0x4, hi  // hi = pmore
 234:	b.ne	2b4 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xd8>  // b.any
 238:	mov	w0, #0xffffffff            	// #-1
 23c:	str	w0, [x19, #8]
 240:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 244:	add	x1, x1, #0x0
 248:	mov	x0, x20
 24c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 250:	cbnz	w0, 2bc <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xe0>
 254:	mov	w0, #0x1                   	// #1
 258:	str	w0, [x19, #8]
 25c:	dmb	ish
 260:	strb	wzr, [x21]
 264:	ldp	x19, x20, [sp, #16]
 268:	ldp	x21, x30, [sp, #32]
 26c:	add	sp, sp, #0x30
 270:	ret
 274:	ldrb	w0, [x20, #7]
 278:	str	w0, [sp]
 27c:	ldrb	w7, [x20, #6]
 280:	ldrb	w6, [x20, #5]
 284:	ldrb	w5, [x20, #4]
 288:	ldrb	w4, [x20, #3]
 28c:	ldrb	w3, [x20, #2]
 290:	ldrb	w2, [x20, #1]
 294:	ldrb	w1, [x20]
 298:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 29c:	add	x0, x0, #0x0
 2a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2a4:	bl	0 <_ZN11__sanitizer3DieEv>
 2a8:	mov	x0, x21
 2ac:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2b0:	b	224 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x48>
 2b4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 2b8:	b	238 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x5c>
 2bc:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2c0:	add	x1, x1, #0x0
 2c4:	mov	x0, x20
 2c8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 2cc:	cbnz	w0, 2dc <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x100>
 2d0:	mov	w0, #0x2                   	// #2
 2d4:	str	w0, [x19, #8]
 2d8:	b	25c <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x80>
 2dc:	mov	x3, x20
 2e0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2e4:	add	x2, x2, #0x0
 2e8:	mov	x1, #0x1000                	// #4096
 2ec:	add	x0, x19, #0xc
 2f0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 2f4:	b	25c <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x80>
 2f8:	ret

00000000000002fc <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>:
 2fc:	stp	x19, x20, [sp, #-128]!
 300:	str	x30, [sp, #80]
 304:	str	x0, [sp, #104]
 308:	str	xzr, [x1]
 30c:	str	xzr, [x2]
 310:	str	xzr, [x3]
 314:	mov	w19, #0x1                   	// #1
 318:	cbz	x4, 3ec <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xf0>
 31c:	stp	x21, x22, [sp, #16]
 320:	stp	x23, x24, [sp, #32]
 324:	stp	x25, x26, [sp, #48]
 328:	stp	x27, x28, [sp, #64]
 32c:	mov	x23, x1
 330:	mov	x27, x2
 334:	mov	x21, x3
 338:	mov	x24, x4
 33c:	mov	x25, x5
 340:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 344:	ldr	x0, [x0]
 348:	ldr	x0, [x0]
 34c:	cbz	x0, 374 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x78>
 350:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 354:	ldr	x0, [x0]
 358:	ldr	x20, [x0]
 35c:	cmp	x20, x24
 360:	csel	x20, x20, x24, ls  // ls = plast
 364:	adrp	x28, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 368:	add	x28, x28, #0x0
 36c:	add	x26, sp, #0x78
 370:	b	410 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x114>
 374:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 378:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 37c:	ldr	x1, [x1]
 380:	str	x0, [x1]
 384:	b	350 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x54>
 388:	ldr	x1, [x27]
 38c:	ldr	x0, [x23]
 390:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 394:	mov	w19, #0x0                   	// #0
 398:	ldp	x21, x22, [sp, #16]
 39c:	ldp	x23, x24, [sp, #32]
 3a0:	ldp	x25, x26, [sp, #48]
 3a4:	ldp	x27, x28, [sp, #64]
 3a8:	b	3ec <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xf0>
 3ac:	ldr	x1, [x27]
 3b0:	ldr	x0, [x23]
 3b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3b8:	mov	w0, w22
 3bc:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 3c0:	ldp	x21, x22, [sp, #16]
 3c4:	ldp	x23, x24, [sp, #32]
 3c8:	ldp	x25, x26, [sp, #48]
 3cc:	ldp	x27, x28, [sp, #64]
 3d0:	b	3ec <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xf0>
 3d4:	mov	w0, w22
 3d8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 3dc:	ldp	x21, x22, [sp, #16]
 3e0:	ldp	x23, x24, [sp, #32]
 3e4:	ldp	x25, x26, [sp, #48]
 3e8:	ldp	x27, x28, [sp, #64]
 3ec:	mov	w0, w19
 3f0:	ldr	x30, [sp, #80]
 3f4:	ldp	x19, x20, [sp], #128
 3f8:	ret
 3fc:	mov	w0, w22
 400:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 404:	lsl	x20, x20, #1
 408:	cmp	x20, x24
 40c:	csel	x20, x20, x24, ls  // ls = plast
 410:	ldr	x1, [x27]
 414:	ldr	x0, [x23]
 418:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 41c:	mov	w2, #0x0                   	// #0
 420:	mov	x1, x28
 424:	mov	x0, x20
 428:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 42c:	str	x0, [x23]
 430:	str	x20, [x27]
 434:	mov	x2, x25
 438:	mov	w1, #0x0                   	// #0
 43c:	ldr	x0, [sp, #104]
 440:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 444:	mov	w22, w0
 448:	cmn	w0, #0x1
 44c:	b.eq	388 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x8c>  // b.none
 450:	str	xzr, [x21]
 454:	cbz	x20, 3fc <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x100>
 458:	mov	x1, #0x0                   	// #0
 45c:	ldr	x0, [x23]
 460:	mov	x4, x25
 464:	mov	x3, x26
 468:	sub	x2, x20, x1
 46c:	add	x1, x0, x1
 470:	mov	w0, w22
 474:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 478:	ands	w19, w0, #0xff
 47c:	b.eq	3ac <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xb0>  // b.none
 480:	ldr	x0, [sp, #120]
 484:	ldr	x1, [x21]
 488:	add	x1, x0, x1
 48c:	str	x1, [x21]
 490:	cmp	x0, #0x0
 494:	cset	w19, eq  // eq = none
 498:	cmp	x1, x24
 49c:	csinc	w19, w19, wzr, ne  // ne = any
 4a0:	cbnz	w19, 3d4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xd8>
 4a4:	cmp	x1, x20
 4a8:	b.cc	45c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x160>  // b.lo, b.ul, b.last
 4ac:	b	3fc <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x100>

00000000000004b0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>:
 4b0:	stp	x19, x20, [sp, #-144]!
 4b4:	stp	x21, x22, [sp, #16]
 4b8:	str	x30, [sp, #80]
 4bc:	str	xzr, [x1, #16]
 4c0:	cbz	x2, 804 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x354>
 4c4:	stp	x23, x24, [sp, #32]
 4c8:	stp	x25, x26, [sp, #48]
 4cc:	stp	x27, x28, [sp, #64]
 4d0:	mov	x20, x0
 4d4:	mov	x19, x1
 4d8:	mov	x21, x2
 4dc:	mov	x23, x3
 4e0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4e4:	ldr	x0, [x0]
 4e8:	ldr	x0, [x0]
 4ec:	cbz	x0, 53c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x8c>
 4f0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4f4:	ldr	x0, [x0]
 4f8:	ldr	x27, [x0]
 4fc:	mov	x2, x23
 500:	mov	w1, #0x0                   	// #0
 504:	mov	x0, x20
 508:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 50c:	mov	w25, w0
 510:	cmn	w0, #0x1
 514:	b.eq	81c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x36c>  // b.none
 518:	mov	x20, #0x0                   	// #0
 51c:	adrp	x28, 0 <_ZN11__sanitizer14PageSizeCachedE>
 520:	ldr	x0, [x28]
 524:	str	x0, [sp, #104]
 528:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 52c:	add	x0, x0, #0x0
 530:	str	x0, [sp, #112]
 534:	add	x26, sp, #0x88
 538:	b	5e4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x134>
 53c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 540:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 544:	ldr	x1, [x1]
 548:	str	x0, [x1]
 54c:	b	4f0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x40>
 550:	lsl	x22, x20, #1
 554:	cmp	x22, x27
 558:	csel	x22, x22, x27, cs  // cs = hs, nlast
 55c:	cmp	x22, x21
 560:	csel	x22, x22, x21, ls  // ls = plast
 564:	cmp	x0, x22
 568:	b.cs	590 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xe0>  // b.hs, b.nlast
 56c:	ldr	x0, [x19, #8]
 570:	cmp	x0, x22
 574:	b.cc	5f8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x148>  // b.lo, b.ul, b.last
 578:	ldr	x0, [x19, #16]
 57c:	ldr	x3, [x19]
 580:	sub	x2, x22, x0
 584:	mov	w1, #0x0                   	// #0
 588:	add	x0, x3, x0
 58c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 590:	str	x22, [x19, #16]
 594:	mov	x2, x22
 598:	cmp	x22, x20
 59c:	b.ls	6a4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1f4>  // b.plast
 5a0:	cmp	x21, x2
 5a4:	b.cc	6c4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x214>  // b.lo, b.ul, b.last
 5a8:	ldr	x1, [x19]
 5ac:	mov	x4, x23
 5b0:	mov	x3, x26
 5b4:	sub	x2, x2, x20
 5b8:	add	x1, x1, x20
 5bc:	mov	w0, w25
 5c0:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 5c4:	ands	w22, w0, #0xff
 5c8:	b.eq	6e4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x234>  // b.none
 5cc:	ldr	x0, [sp, #136]
 5d0:	add	x24, x0, x20
 5d4:	cbz	x0, 6fc <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x24c>
 5d8:	cmp	x21, x24
 5dc:	b.ls	700 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x250>  // b.plast
 5e0:	mov	x20, x24
 5e4:	ldr	x0, [x19, #16]
 5e8:	cmp	x0, x20
 5ec:	b.ls	550 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xa0>  // b.plast
 5f0:	ldr	x2, [x19, #16]
 5f4:	b	5a0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xf0>
 5f8:	cbz	x22, 664 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1b4>
 5fc:	ldr	x0, [sp, #104]
 600:	ldr	x0, [x0]
 604:	cbz	x0, 684 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1d4>
 608:	ldr	x0, [x28]
 60c:	ldr	x0, [x0]
 610:	sub	x24, x0, #0x1
 614:	tst	x0, x24
 618:	b.ne	694 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1e4>  // b.any
 61c:	add	x24, x22, x24
 620:	neg	x0, x0
 624:	and	x24, x24, x0
 628:	mov	w2, #0x0                   	// #0
 62c:	ldr	x1, [sp, #112]
 630:	mov	x0, x24
 634:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 638:	str	x0, [sp, #120]
 63c:	ldr	x2, [x19, #16]
 640:	ldr	x1, [x19]
 644:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 648:	ldr	x1, [x19, #8]
 64c:	ldr	x0, [x19]
 650:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 654:	ldr	x0, [sp, #120]
 658:	str	x0, [x19]
 65c:	str	x24, [x19, #8]
 660:	b	578 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xc8>
 664:	mov	x4, #0x0                   	// #0
 668:	mov	x3, #0x0                   	// #0
 66c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 670:	add	x2, x2, #0x0
 674:	mov	w1, #0x1fc                 	// #508
 678:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 67c:	add	x0, x0, #0x0
 680:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 684:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 688:	ldr	x1, [x28]
 68c:	str	x0, [x1]
 690:	b	608 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x158>
 694:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 698:	add	x0, x0, #0x0
 69c:	bl	24 <_ZN11__sanitizer8RawWriteEPKc>
 6a0:	bl	0 <_ZN11__sanitizer3DieEv>
 6a4:	mov	x4, x22
 6a8:	mov	x3, x20
 6ac:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 6b0:	add	x2, x2, #0x0
 6b4:	mov	w1, #0x98                  	// #152
 6b8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 6bc:	add	x0, x0, #0x0
 6c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6c4:	mov	x4, x21
 6c8:	mov	x3, x2
 6cc:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 6d0:	add	x2, x2, #0x0
 6d4:	mov	w1, #0x99                  	// #153
 6d8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 6dc:	add	x0, x0, #0x0
 6e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6e4:	mov	w0, w25
 6e8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 6ec:	ldp	x23, x24, [sp, #32]
 6f0:	ldp	x25, x26, [sp, #48]
 6f4:	ldp	x27, x28, [sp, #64]
 6f8:	b	808 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x358>
 6fc:	mov	x24, x20
 700:	mov	w0, w25
 704:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 708:	ldr	x0, [x19, #16]
 70c:	cmp	x24, x0
 710:	b.ls	738 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x288>  // b.plast
 714:	ldr	x0, [x19, #8]
 718:	cmp	x24, x0
 71c:	b.hi	74c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x29c>  // b.pmore
 720:	ldr	x0, [x19, #16]
 724:	ldr	x3, [x19]
 728:	sub	x2, x24, x0
 72c:	mov	w1, #0x0                   	// #0
 730:	add	x0, x3, x0
 734:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 738:	str	x24, [x19, #16]
 73c:	ldp	x23, x24, [sp, #32]
 740:	ldp	x25, x26, [sp, #48]
 744:	ldp	x27, x28, [sp, #64]
 748:	b	808 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x358>
 74c:	cbz	x24, 7c0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x310>
 750:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 754:	ldr	x0, [x0]
 758:	ldr	x0, [x0]
 75c:	cbz	x0, 7e0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x330>
 760:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 764:	ldr	x0, [x0]
 768:	ldr	x1, [x0]
 76c:	sub	x0, x1, #0x1
 770:	tst	x1, x0
 774:	b.ne	7f4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x344>  // b.any
 778:	add	x0, x24, x0
 77c:	neg	x1, x1
 780:	and	x20, x0, x1
 784:	mov	w2, #0x0                   	// #0
 788:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 78c:	add	x1, x1, #0x0
 790:	mov	x0, x20
 794:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 798:	mov	x21, x0
 79c:	ldr	x2, [x19, #16]
 7a0:	ldr	x1, [x19]
 7a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7a8:	ldr	x1, [x19, #8]
 7ac:	ldr	x0, [x19]
 7b0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7b4:	str	x21, [x19]
 7b8:	str	x20, [x19, #8]
 7bc:	b	720 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x270>
 7c0:	mov	x4, #0x0                   	// #0
 7c4:	mov	x3, #0x0                   	// #0
 7c8:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7cc:	add	x2, x2, #0x0
 7d0:	mov	w1, #0x1fc                 	// #508
 7d4:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7d8:	add	x0, x0, #0x0
 7dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7e0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 7e4:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7e8:	ldr	x1, [x1]
 7ec:	str	x0, [x1]
 7f0:	b	760 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2b0>
 7f4:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7f8:	add	x0, x0, #0x0
 7fc:	bl	24 <_ZN11__sanitizer8RawWriteEPKc>
 800:	bl	0 <_ZN11__sanitizer3DieEv>
 804:	mov	w22, #0x1                   	// #1
 808:	mov	w0, w22
 80c:	ldp	x21, x22, [sp, #16]
 810:	ldr	x30, [sp, #80]
 814:	ldp	x19, x20, [sp], #144
 818:	ret
 81c:	mov	w22, #0x0                   	// #0
 820:	ldp	x23, x24, [sp, #32]
 824:	ldp	x25, x26, [sp, #48]
 828:	ldp	x27, x28, [sp, #64]
 82c:	b	808 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x358>

0000000000000830 <_ZN11__sanitizer16FindPathToBinaryEPKc>:
 830:	stp	x19, x20, [sp, #-96]!
 834:	stp	x23, x24, [sp, #32]
 838:	str	x30, [sp, #80]
 83c:	mov	x24, x0
 840:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 844:	and	w0, w0, #0xff
 848:	cbz	w0, 86c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x3c>
 84c:	mov	x0, x24
 850:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 854:	mov	x20, x0
 858:	mov	x0, x20
 85c:	ldp	x23, x24, [sp, #32]
 860:	ldr	x30, [sp, #80]
 864:	ldp	x19, x20, [sp], #96
 868:	ret
 86c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 870:	add	x0, x0, #0x0
 874:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 878:	mov	x20, x0
 87c:	cbz	x0, 858 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x28>
 880:	stp	x21, x22, [sp, #16]
 884:	stp	x25, x26, [sp, #48]
 888:	stp	x27, x28, [sp, #64]
 88c:	mov	x0, x24
 890:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 894:	mov	x25, x0
 898:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 89c:	ldr	x0, [x0]
 8a0:	ldr	x0, [x0]
 8a4:	cbz	x0, 920 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xf0>
 8a8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 8ac:	ldr	x0, [x0]
 8b0:	ldr	x0, [x0]
 8b4:	sub	x1, x0, #0x1
 8b8:	tst	x1, x0
 8bc:	b.ne	934 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x104>  // b.any
 8c0:	add	x27, x0, #0xfff
 8c4:	neg	x0, x0
 8c8:	and	x27, x27, x0
 8cc:	mov	w2, #0x0                   	// #0
 8d0:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 8d4:	add	x1, x1, #0x0
 8d8:	mov	x0, x27
 8dc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 8e0:	mov	x23, x0
 8e4:	mov	x2, #0x0                   	// #0
 8e8:	mov	x1, #0x0                   	// #0
 8ec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 8f0:	mov	x1, #0x0                   	// #0
 8f4:	mov	x0, #0x0                   	// #0
 8f8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8fc:	cmp	x27, #0xfff
 900:	b.ls	944 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x114>  // b.plast
 904:	mov	x2, #0x1000                	// #4096
 908:	mov	w1, #0x0                   	// #0
 90c:	mov	x0, x23
 910:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 914:	mov	w26, #0x3a                  	// #58
 918:	mov	w28, #0x2f                  	// #47
 91c:	b	a44 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x214>
 920:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 924:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 928:	ldr	x1, [x1]
 92c:	str	x0, [x1]
 930:	b	8a8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x78>
 934:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 938:	add	x0, x0, #0x0
 93c:	bl	24 <_ZN11__sanitizer8RawWriteEPKc>
 940:	bl	0 <_ZN11__sanitizer3DieEv>
 944:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 948:	ldr	x0, [x0]
 94c:	ldr	x0, [x0]
 950:	cbz	x0, 9b4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x184>
 954:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 958:	ldr	x0, [x0]
 95c:	ldr	x0, [x0]
 960:	sub	x1, x0, #0x1
 964:	tst	x1, x0
 968:	b.ne	9c8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x198>  // b.any
 96c:	add	x19, x0, #0xfff
 970:	neg	x0, x0
 974:	and	x19, x19, x0
 978:	mov	w2, #0x0                   	// #0
 97c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 980:	add	x1, x1, #0x0
 984:	mov	x0, x19
 988:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 98c:	mov	x21, x0
 990:	mov	x2, #0x0                   	// #0
 994:	mov	x1, x23
 998:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 99c:	mov	x1, x27
 9a0:	mov	x0, x23
 9a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9a8:	mov	x27, x19
 9ac:	mov	x23, x21
 9b0:	b	904 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xd4>
 9b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9b8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9bc:	ldr	x1, [x1]
 9c0:	str	x0, [x1]
 9c4:	b	954 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x124>
 9c8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9cc:	add	x0, x0, #0x0
 9d0:	bl	24 <_ZN11__sanitizer8RawWriteEPKc>
 9d4:	bl	0 <_ZN11__sanitizer3DieEv>
 9d8:	mov	x4, #0x1000                	// #4096
 9dc:	mov	x3, x21
 9e0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9e4:	add	x2, x2, #0x0
 9e8:	mov	w1, #0x1b6                 	// #438
 9ec:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9f0:	add	x0, x0, #0x0
 9f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9f8:	mov	x4, #0x1000                	// #4096
 9fc:	mov	x3, x4
 a00:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a04:	add	x2, x2, #0x0
 a08:	mov	w1, #0x1b6                 	// #438
 a0c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a10:	add	x0, x0, #0x0
 a14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a18:	mov	x4, #0x1000                	// #4096
 a1c:	mov	x3, #0xffffffffffffffff    	// #-1
 a20:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a24:	add	x2, x2, #0x0
 a28:	mov	w1, #0x1b6                 	// #438
 a2c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a30:	add	x0, x0, #0x0
 a34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a38:	ldrb	w0, [x19]
 a3c:	cbz	w0, ad0 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x2a0>
 a40:	add	x20, x19, #0x1
 a44:	mov	w1, w26
 a48:	mov	x0, x20
 a4c:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 a50:	mov	x19, x0
 a54:	sub	x21, x0, x20
 a58:	add	x22, x25, x21
 a5c:	add	x0, x22, #0x2
 a60:	cmp	x0, #0x1, lsl #12
 a64:	b.hi	a38 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x208>  // b.pmore
 a68:	mov	x2, x21
 a6c:	mov	x1, x20
 a70:	mov	x0, x23
 a74:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a78:	cmp	x21, #0xfff
 a7c:	b.hi	9d8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1a8>  // b.pmore
 a80:	strb	w28, [x23, x21]
 a84:	add	x21, x21, #0x1
 a88:	cmp	x21, #0xfff
 a8c:	b.hi	9f8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1c8>  // b.pmore
 a90:	mov	x2, x25
 a94:	mov	x1, x24
 a98:	add	x0, x23, x21
 a9c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 aa0:	add	x22, x22, #0x1
 aa4:	cmp	x22, #0xfff
 aa8:	b.hi	a18 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1e8>  // b.pmore
 aac:	strb	wzr, [x23, x22]
 ab0:	mov	x0, x23
 ab4:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 ab8:	and	w0, w0, #0xff
 abc:	cbz	w0, a38 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x208>
 ac0:	mov	x0, x23
 ac4:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 ac8:	mov	x20, x0
 acc:	b	ad4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x2a4>
 ad0:	mov	x20, #0x0                   	// #0
 ad4:	mov	x1, x27
 ad8:	mov	x0, x23
 adc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ae0:	ldp	x21, x22, [sp, #16]
 ae4:	ldp	x25, x26, [sp, #48]
 ae8:	ldp	x27, x28, [sp, #64]
 aec:	b	858 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x28>

0000000000000af0 <__sanitizer_set_report_path>:
 af0:	str	x30, [sp, #-16]!
 af4:	mov	x1, x0
 af8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 afc:	add	x0, x0, #0x0
 b00:	bl	1dc <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>
 b04:	ldr	x30, [sp], #16
 b08:	ret

0000000000000b0c <__sanitizer_set_report_fd>:
 b0c:	stp	x19, x30, [sp, #-16]!
 b10:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 b14:	add	x19, x19, #0x0
 b18:	str	w0, [x19, #8]
 b1c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 b20:	str	x0, [x19, #8208]
 b24:	ldp	x19, x30, [sp], #16
 b28:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

sanitizer_flag_parser.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
   4:	ldr	w1, [x0]
   8:	cbnz	w1, 10 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x10>
   c:	ret
  10:	stp	x19, x20, [sp, #-32]!
  14:	str	x30, [sp, #24]
  18:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  24:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  28:	ldr	w0, [x0]
  2c:	cmp	w0, #0x0
  30:	b.le	6c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x6c>
  34:	str	x21, [sp, #16]
  38:	mov	x19, #0x0                   	// #0
  3c:	adrp	x20, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  40:	add	x20, x20, #0x0
  44:	adrp	x21, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  48:	add	x21, x21, #0x0
  4c:	ldr	x1, [x20, x19, lsl #3]
  50:	mov	x0, x21
  54:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  58:	add	x19, x19, #0x1
  5c:	ldr	w0, [x20, #160]
  60:	cmp	w0, w19
  64:	b.gt	4c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x4c>
  68:	ldr	x21, [sp, #16]
  6c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  70:	str	wzr, [x0]
  74:	ldr	x30, [sp, #24]
  78:	ldp	x19, x20, [sp], #32
  7c:	ret

0000000000000080 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>:
  80:	stp	x19, x20, [sp, #-32]!
  84:	stp	x21, x30, [sp, #16]
  88:	mov	x21, x1
  8c:	mov	x1, x2
  90:	mov	x0, x21
  94:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
  98:	mov	x19, x0
  9c:	add	x1, x0, #0x1
  a0:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  a4:	add	x0, x0, #0x0
  a8:	add	x0, x0, #0xa8
  ac:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  b0:	mov	x20, x0
  b4:	mov	x2, x19
  b8:	mov	x1, x21
  bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c0:	strb	wzr, [x20, x19]
  c4:	mov	x0, x20
  c8:	ldp	x21, x30, [sp, #16]
  cc:	ldp	x19, x20, [sp], #32
  d0:	ret

00000000000000d4 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>:
  d4:	stp	x19, x20, [sp, #-48]!
  d8:	stp	x21, x22, [sp, #16]
  dc:	str	x30, [sp, #32]
  e0:	mov	x21, x0
  e4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  e8:	ldr	x0, [x0]
  ec:	ldr	x1, [x0]
  f0:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  f4:	add	x0, x0, #0x0
  f8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  fc:	ldr	w0, [x21, #8]
 100:	cmp	w0, #0x0
 104:	b.le	144 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x70>
 108:	mov	x19, #0x0                   	// #0
 10c:	mov	w20, #0x0                   	// #0
 110:	adrp	x22, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 114:	add	x22, x22, #0x0
 118:	ldr	x1, [x21]
 11c:	add	x0, x1, x19
 120:	ldr	x2, [x0, #8]
 124:	ldr	x1, [x1, x19]
 128:	mov	x0, x22
 12c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 130:	add	w20, w20, #0x1
 134:	add	x19, x19, #0x18
 138:	ldr	w0, [x21, #8]
 13c:	cmp	w0, w20
 140:	b.gt	118 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x44>
 144:	ldp	x21, x22, [sp, #16]
 148:	ldr	x30, [sp, #32]
 14c:	ldp	x19, x20, [sp], #48
 150:	ret

0000000000000154 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>:
 154:	str	x30, [sp, #-16]!
 158:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 164:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000168 <_ZN11__sanitizer10FlagParser8is_spaceEc>:
 168:	and	w1, w1, #0xff
 16c:	cmp	w1, #0x20
 170:	cset	w0, eq  // eq = none
 174:	cmp	w1, #0x2c
 178:	csinc	w0, w0, wzr, ne  // ne = any
 17c:	cbnz	w0, 1a4 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x3c>
 180:	cmp	w1, #0x3a
 184:	cset	w0, eq  // eq = none
 188:	cmp	w1, #0xa
 18c:	csinc	w0, w0, wzr, ne  // ne = any
 190:	cbnz	w0, 1a4 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x3c>
 194:	and	w1, w1, #0xfffffffb
 198:	and	w1, w1, #0xff
 19c:	cmp	w1, #0x9
 1a0:	cset	w0, eq  // eq = none
 1a4:	ret

00000000000001a8 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>:
 1a8:	stp	x19, x20, [sp, #-32]!
 1ac:	stp	x21, x30, [sp, #16]
 1b0:	mov	x20, x0
 1b4:	ldr	x21, [x0, #16]
 1b8:	ldr	x19, [x20, #24]
 1bc:	ldrb	w1, [x21, x19]
 1c0:	mov	x0, x20
 1c4:	bl	168 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 1c8:	and	w0, w0, #0xff
 1cc:	cbz	w0, 1dc <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x34>
 1d0:	add	x19, x19, #0x1
 1d4:	str	x19, [x20, #24]
 1d8:	b	1b8 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x10>
 1dc:	ldp	x21, x30, [sp, #16]
 1e0:	ldp	x19, x20, [sp], #32
 1e4:	ret

00000000000001e8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>:
 1e8:	stp	x19, x20, [sp, #-48]!
 1ec:	stp	x21, x22, [sp, #16]
 1f0:	str	x30, [sp, #40]
 1f4:	mov	x21, x0
 1f8:	mov	x22, x1
 1fc:	ldr	w0, [x0, #8]
 200:	cmp	w0, #0x0
 204:	b.le	244 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x5c>
 208:	str	x23, [sp, #32]
 20c:	mov	x23, x2
 210:	mov	x19, #0x0                   	// #0
 214:	mov	w20, #0x0                   	// #0
 218:	ldr	x0, [x21]
 21c:	ldr	x1, [x0, x19]
 220:	mov	x0, x22
 224:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 228:	cbz	w0, 274 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x8c>
 22c:	add	w20, w20, #0x1
 230:	add	x19, x19, #0x18
 234:	ldr	w0, [x21, #8]
 238:	cmp	w0, w20
 23c:	b.gt	218 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x30>
 240:	ldr	x23, [sp, #32]
 244:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 248:	ldr	w1, [x0]
 24c:	sxtw	x3, w1
 250:	cmp	x3, #0x13
 254:	b.hi	2a8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0xc0>  // b.pmore
 258:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 25c:	add	x0, x0, #0x0
 260:	add	w2, w1, #0x1
 264:	str	w2, [x0, #160]
 268:	str	x22, [x0, w1, sxtw #3]
 26c:	mov	w0, #0x1                   	// #1
 270:	b	298 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0xb0>
 274:	ldr	x0, [x21]
 278:	add	x19, x0, x19
 27c:	ldr	x0, [x19, #16]
 280:	ldr	x1, [x0]
 284:	ldr	x2, [x1]
 288:	mov	x1, x23
 28c:	blr	x2
 290:	and	w0, w0, #0xff
 294:	ldr	x23, [sp, #32]
 298:	ldp	x21, x22, [sp, #16]
 29c:	ldr	x30, [sp, #40]
 2a0:	ldp	x19, x20, [sp], #48
 2a4:	ret
 2a8:	str	x23, [sp, #32]
 2ac:	mov	x4, #0x14                  	// #20
 2b0:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2b4:	add	x2, x2, #0x0
 2b8:	mov	w1, #0x1e                  	// #30
 2bc:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2c0:	add	x0, x0, #0x0
 2c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002c8 <_ZN11__sanitizer10FlagParser10parse_flagEv>:
 2c8:	stp	x19, x20, [sp, #-64]!
 2cc:	stp	x21, x22, [sp, #16]
 2d0:	stp	x23, x24, [sp, #32]
 2d4:	str	x30, [sp, #48]
 2d8:	mov	x19, x0
 2dc:	ldr	x23, [x0, #24]
 2e0:	ldr	x22, [x0, #16]
 2e4:	add	x24, x22, x23
 2e8:	ldrb	w20, [x22, x23]
 2ec:	cmp	w20, #0x3d
 2f0:	ccmp	w20, #0x0, #0x4, ne  // ne = any
 2f4:	b.eq	3d4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x10c>  // b.none
 2f8:	mov	x21, x23
 2fc:	mov	w1, w20
 300:	mov	x0, x19
 304:	bl	168 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 308:	and	w0, w0, #0xff
 30c:	cbnz	w0, 328 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x60>
 310:	add	x21, x21, #0x1
 314:	str	x21, [x19, #24]
 318:	ldrb	w20, [x22, x21]
 31c:	cmp	w20, #0x3d
 320:	ccmp	w20, #0x0, #0x4, ne  // ne = any
 324:	b.ne	2fc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x34>  // b.any
 328:	cmp	w20, #0x3d
 32c:	b.ne	3dc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x114>  // b.any
 330:	sub	x2, x21, x23
 334:	mov	x1, x24
 338:	mov	x0, x19
 33c:	bl	80 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 340:	mov	x23, x0
 344:	ldr	x3, [x19, #24]
 348:	add	x22, x3, #0x1
 34c:	str	x22, [x19, #24]
 350:	ldr	x21, [x19, #16]
 354:	add	x24, x21, x22
 358:	ldrb	w1, [x21, x22]
 35c:	cmp	w1, #0x27
 360:	mov	w0, #0x22                  	// #34
 364:	ccmp	w1, w0, #0x4, ne  // ne = any
 368:	b.ne	3fc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x134>  // b.any
 36c:	add	x4, x3, #0x2
 370:	str	x4, [x19, #24]
 374:	ldrb	w2, [x21, x22]
 378:	add	x1, x21, x4
 37c:	ldrb	w0, [x21, x4]
 380:	cmp	w0, #0x0
 384:	ccmp	w2, w0, #0x4, ne  // ne = any
 388:	b.eq	3ac <_ZN11__sanitizer10FlagParser10parse_flagEv+0xe4>  // b.none
 38c:	add	x3, x3, #0x3
 390:	str	x3, [x19, #24]
 394:	ldrb	w0, [x21, x3]
 398:	mov	x4, x3
 39c:	add	x3, x3, #0x1
 3a0:	cmp	w0, #0x0
 3a4:	ccmp	w0, w2, #0x4, ne  // ne = any
 3a8:	b.ne	390 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xc8>  // b.any
 3ac:	cbz	w0, 3ec <_ZN11__sanitizer10FlagParser10parse_flagEv+0x124>
 3b0:	mvn	x2, x22
 3b4:	add	x2, x2, x4
 3b8:	mov	x0, x19
 3bc:	bl	80 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 3c0:	mov	x2, x0
 3c4:	ldr	x0, [x19, #24]
 3c8:	add	x0, x0, #0x1
 3cc:	str	x0, [x19, #24]
 3d0:	b	438 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x170>
 3d4:	mov	x21, x23
 3d8:	b	328 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x60>
 3dc:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 3e0:	add	x1, x1, #0x0
 3e4:	mov	x0, x19
 3e8:	bl	154 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 3ec:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 3f0:	add	x1, x1, #0x0
 3f4:	mov	x0, x19
 3f8:	bl	154 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 3fc:	cbz	w1, 470 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x1a8>
 400:	mov	x20, x22
 404:	mov	x0, x19
 408:	bl	168 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 40c:	and	w0, w0, #0xff
 410:	cbnz	w0, 424 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x15c>
 414:	add	x20, x20, #0x1
 418:	str	x20, [x19, #24]
 41c:	ldrb	w1, [x21, x20]
 420:	cbnz	w1, 404 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x13c>
 424:	sub	x2, x20, x22
 428:	mov	x1, x24
 42c:	mov	x0, x19
 430:	bl	80 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 434:	mov	x2, x0
 438:	mov	x1, x23
 43c:	mov	x0, x19
 440:	bl	1e8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>
 444:	and	w0, w0, #0xff
 448:	cbz	w0, 460 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x198>
 44c:	ldp	x21, x22, [sp, #16]
 450:	ldp	x23, x24, [sp, #32]
 454:	ldr	x30, [sp, #48]
 458:	ldp	x19, x20, [sp], #64
 45c:	ret
 460:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 464:	add	x1, x1, #0x0
 468:	mov	x0, x19
 46c:	bl	154 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 470:	mov	x20, x22
 474:	b	424 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x15c>

0000000000000478 <_ZN11__sanitizer10FlagParser11parse_flagsEv>:
 478:	stp	x19, x30, [sp, #-16]!
 47c:	mov	x19, x0
 480:	mov	x0, x19
 484:	bl	1a8 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>
 488:	ldr	x1, [x19, #16]
 48c:	ldr	x0, [x19, #24]
 490:	ldrb	w0, [x1, x0]
 494:	cbz	w0, 4a4 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x2c>
 498:	mov	x0, x19
 49c:	bl	2c8 <_ZN11__sanitizer10FlagParser10parse_flagEv>
 4a0:	b	480 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x8>
 4a4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4a8:	ldr	x0, [x0]
 4ac:	ldr	w0, [x0, #36]
 4b0:	cmp	w0, #0x0
 4b4:	b.le	4c0 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x48>
 4b8:	ldp	x19, x30, [sp], #16
 4bc:	ret
 4c0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4c4:	ldr	x0, [x0]
 4c8:	mov	w1, #0x1                   	// #1
 4cc:	str	w1, [x0, #36]
 4d0:	b	4b8 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x40>

00000000000004d4 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>:
 4d4:	cbz	x1, 50c <_ZN11__sanitizer10FlagParser11ParseStringEPKc+0x38>
 4d8:	stp	x19, x20, [sp, #-32]!
 4dc:	stp	x21, x30, [sp, #16]
 4e0:	mov	x19, x0
 4e4:	ldr	x21, [x0, #16]
 4e8:	ldr	x20, [x0, #24]
 4ec:	str	x1, [x0, #16]
 4f0:	str	xzr, [x0, #24]
 4f4:	bl	478 <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 4f8:	str	x21, [x19, #16]
 4fc:	str	x20, [x19, #24]
 500:	ldp	x21, x30, [sp, #16]
 504:	ldp	x19, x20, [sp], #32
 508:	ret
 50c:	ret

0000000000000510 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>:
 510:	stp	x19, x20, [sp, #-80]!
 514:	stp	x21, x22, [sp, #16]
 518:	str	x30, [sp, #32]
 51c:	mov	x21, x0
 520:	mov	x20, x1
 524:	and	w22, w2, #0xff
 528:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 52c:	ldr	x1, [x1]
 530:	ldr	x0, [x1]
 534:	cbz	x0, 588 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x78>
 538:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 53c:	ldr	x1, [x1]
 540:	ldr	x0, [x1]
 544:	cmp	x0, #0x8, lsl #12
 548:	add	x5, sp, #0x3c
 54c:	mov	x4, #0x8000                	// #32768
 550:	csel	x4, x0, x4, cs  // cs = hs, nlast
 554:	add	x3, sp, #0x30
 558:	add	x2, sp, #0x40
 55c:	add	x1, sp, #0x48
 560:	mov	x0, x20
 564:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 568:	ands	w19, w0, #0xff
 56c:	b.ne	5b4 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0xa4>  // b.any
 570:	cbz	w22, 59c <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x8c>
 574:	mov	w0, w22
 578:	ldp	x21, x22, [sp, #16]
 57c:	ldr	x30, [sp, #32]
 580:	ldp	x19, x20, [sp], #80
 584:	ret
 588:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 58c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 590:	ldr	x1, [x1]
 594:	str	x0, [x1]
 598:	b	538 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x28>
 59c:	ldr	w2, [sp, #60]
 5a0:	mov	x1, x20
 5a4:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 5a8:	add	x0, x0, #0x0
 5ac:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 5b0:	b	574 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x64>
 5b4:	ldr	x1, [sp, #72]
 5b8:	mov	x0, x21
 5bc:	bl	4d4 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 5c0:	ldr	x1, [sp, #64]
 5c4:	ldr	x0, [sp, #72]
 5c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5cc:	mov	w22, w19
 5d0:	b	574 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x64>

00000000000005d4 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>:
 5d4:	ldrsw	x5, [x0, #8]
 5d8:	cmp	x5, #0xc7
 5dc:	b.hi	624 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_+0x50>  // b.pmore
 5e0:	ldr	x4, [x0]
 5e4:	add	x5, x5, x5, lsl #1
 5e8:	str	x1, [x4, x5, lsl #3]
 5ec:	ldrsw	x1, [x0, #8]
 5f0:	ldr	x4, [x0]
 5f4:	add	x1, x1, x1, lsl #1
 5f8:	add	x1, x4, x1, lsl #3
 5fc:	str	x3, [x1, #8]
 600:	ldrsw	x1, [x0, #8]
 604:	ldr	x3, [x0]
 608:	add	x1, x1, x1, lsl #1
 60c:	add	x1, x3, x1, lsl #3
 610:	str	x2, [x1, #16]
 614:	ldr	w1, [x0, #8]
 618:	add	w1, w1, #0x1
 61c:	str	w1, [x0, #8]
 620:	ret
 624:	str	x30, [sp, #-16]!
 628:	mov	x4, #0xc8                  	// #200
 62c:	mov	x3, x5
 630:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 634:	add	x2, x2, #0x0
 638:	mov	w1, #0x9e                  	// #158
 63c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 640:	add	x0, x0, #0x0
 644:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000648 <_ZN11__sanitizer10FlagParserC1Ev>:
 648:	stp	x19, x30, [sp, #-16]!
 64c:	mov	x19, x0
 650:	str	wzr, [x0, #8]
 654:	str	xzr, [x0, #16]
 658:	str	xzr, [x0, #24]
 65c:	mov	x1, #0x12c0                	// #4800
 660:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 664:	add	x0, x0, #0x0
 668:	add	x0, x0, #0xa8
 66c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 670:	str	x0, [x19]
 674:	ldp	x19, x30, [sp], #16
 678:	ret

sanitizer_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	mov	x21, x2
  18:	mov	x22, x3
  1c:	mov	x1, #0x10                  	// #16
  20:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  24:	ldr	x0, [x0]
  28:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  2c:	mov	x2, x0
  30:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  34:	add	x0, x0, #0x0
  38:	str	x0, [x2]
  3c:	str	x22, [x2, #8]
  40:	mov	x3, x21
  44:	mov	x1, x20
  48:	mov	x0, x19
  4c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  50:	ldp	x21, x22, [sp, #16]
  54:	ldr	x30, [sp, #32]
  58:	ldp	x19, x20, [sp], #48
  5c:	ret

0000000000000060 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>:
  60:	stp	x19, x20, [sp, #-48]!
  64:	stp	x21, x22, [sp, #16]
  68:	str	x30, [sp, #32]
  6c:	mov	x19, x0
  70:	mov	x20, x1
  74:	mov	x21, x2
  78:	mov	x22, x3
  7c:	mov	x1, #0x10                  	// #16
  80:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  84:	ldr	x0, [x0]
  88:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  8c:	mov	x2, x0
  90:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  94:	add	x0, x0, #0x0
  98:	str	x0, [x2]
  9c:	str	x22, [x2, #8]
  a0:	mov	x3, x21
  a4:	mov	x1, x20
  a8:	mov	x0, x19
  ac:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldr	x30, [sp, #32]
  b8:	ldp	x19, x20, [sp], #48
  bc:	ret

00000000000000c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>:
  c0:	stp	x19, x20, [sp, #-48]!
  c4:	stp	x21, x22, [sp, #16]
  c8:	str	x30, [sp, #32]
  cc:	mov	x19, x0
  d0:	mov	x20, x1
  d4:	mov	x21, x2
  d8:	mov	x22, x3
  dc:	mov	x1, #0x10                  	// #16
  e0:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  e4:	ldr	x0, [x0]
  e8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  ec:	mov	x2, x0
  f0:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  f4:	add	x0, x0, #0x0
  f8:	str	x0, [x2]
  fc:	str	x22, [x2, #8]
 100:	mov	x3, x21
 104:	mov	x1, x20
 108:	mov	x0, x19
 10c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 110:	ldp	x21, x22, [sp, #16]
 114:	ldr	x30, [sp, #32]
 118:	ldp	x19, x20, [sp], #48
 11c:	ret

0000000000000120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>:
 120:	stp	x19, x20, [sp, #-48]!
 124:	stp	x21, x22, [sp, #16]
 128:	str	x30, [sp, #32]
 12c:	mov	x19, x0
 130:	mov	x20, x1
 134:	mov	x21, x2
 138:	mov	x22, x3
 13c:	mov	x1, #0x10                  	// #16
 140:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 144:	ldr	x0, [x0]
 148:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 14c:	mov	x2, x0
 150:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 154:	add	x0, x0, #0x0
 158:	str	x0, [x2]
 15c:	str	x22, [x2, #8]
 160:	mov	x3, x21
 164:	mov	x1, x20
 168:	mov	x0, x19
 16c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 170:	ldp	x21, x22, [sp, #16]
 174:	ldr	x30, [sp, #32]
 178:	ldp	x19, x20, [sp], #48
 17c:	ret

0000000000000180 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>:
 180:	stp	x19, x20, [sp, #-48]!
 184:	stp	x21, x22, [sp, #16]
 188:	str	x30, [sp, #32]
 18c:	mov	x19, x0
 190:	mov	x20, x1
 194:	mov	x21, x2
 198:	mov	x22, x3
 19c:	mov	x1, #0x10                  	// #16
 1a0:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 1a4:	ldr	x0, [x0]
 1a8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 1ac:	mov	x2, x0
 1b0:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1b4:	add	x0, x0, #0x0
 1b8:	str	x0, [x2]
 1bc:	str	x22, [x2, #8]
 1c0:	mov	x3, x21
 1c4:	mov	x1, x20
 1c8:	mov	x0, x19
 1cc:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 1d0:	ldp	x21, x22, [sp, #16]
 1d4:	ldr	x30, [sp, #32]
 1d8:	ldp	x19, x20, [sp], #48
 1dc:	ret

00000000000001e0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>:
 1e0:	mov	w1, #0x1                   	// #1
 1e4:	strb	w1, [x0]
 1e8:	str	xzr, [x0, #8]
 1ec:	strb	wzr, [x0, #16]
 1f0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1f4:	add	x2, x2, #0x0
 1f8:	str	x2, [x0, #24]
 1fc:	strb	wzr, [x0, #32]
 200:	strb	wzr, [x0, #33]
 204:	strb	w1, [x0, #34]
 208:	strb	wzr, [x0, #35]
 20c:	mov	w2, #0x1                   	// #1
 210:	str	w2, [x0, #36]
 214:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 218:	add	x3, x3, #0x0
 21c:	str	x3, [x0, #40]
 220:	strb	wzr, [x0, #48]
 224:	strb	wzr, [x0, #49]
 228:	str	wzr, [x0, #52]
 22c:	strb	w1, [x0, #56]
 230:	strb	w1, [x0, #57]
 234:	strb	w1, [x0, #58]
 238:	strb	wzr, [x0, #59]
 23c:	strb	w1, [x0, #60]
 240:	str	wzr, [x0, #64]
 244:	strb	w1, [x0, #68]
 248:	str	w2, [x0, #72]
 24c:	str	w2, [x0, #76]
 250:	str	wzr, [x0, #80]
 254:	str	wzr, [x0, #84]
 258:	str	wzr, [x0, #88]
 25c:	str	w2, [x0, #92]
 260:	strb	w1, [x0, #96]
 264:	strb	w1, [x0, #97]
 268:	strb	wzr, [x0, #98]
 26c:	mov	x3, #0x10000               	// #65536
 270:	str	x3, [x0, #104]
 274:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 278:	add	x3, x3, #0x0
 27c:	str	x3, [x0, #112]
 280:	strb	wzr, [x0, #120]
 284:	strb	wzr, [x0, #121]
 288:	strb	wzr, [x0, #122]
 28c:	str	xzr, [x0, #128]
 290:	str	xzr, [x0, #136]
 294:	str	xzr, [x0, #144]
 298:	strb	wzr, [x0, #152]
 29c:	mov	w3, #0x1388                	// #5000
 2a0:	str	w3, [x0, #156]
 2a4:	strb	w1, [x0, #160]
 2a8:	strb	wzr, [x0, #161]
 2ac:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 2b0:	add	x3, x3, #0x0
 2b4:	str	x3, [x0, #168]
 2b8:	strb	wzr, [x0, #176]
 2bc:	strb	w1, [x0, #177]
 2c0:	strb	w1, [x0, #178]
 2c4:	strb	w1, [x0, #179]
 2c8:	strb	w1, [x0, #180]
 2cc:	strb	wzr, [x0, #181]
 2d0:	str	wzr, [x0, #184]
 2d4:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 2d8:	add	x3, x3, #0x0
 2dc:	str	x3, [x0, #192]
 2e0:	strb	w1, [x0, #200]
 2e4:	strb	wzr, [x0, #201]
 2e8:	strb	w1, [x0, #202]
 2ec:	strb	w1, [x0, #203]
 2f0:	strb	w1, [x0, #204]
 2f4:	strb	w1, [x0, #205]
 2f8:	strb	w1, [x0, #206]
 2fc:	strb	w1, [x0, #207]
 300:	strb	w1, [x0, #208]
 304:	strb	w1, [x0, #209]
 308:	strb	w1, [x0, #210]
 30c:	strb	w1, [x0, #211]
 310:	strb	w1, [x0, #212]
 314:	strb	w1, [x0, #213]
 318:	strb	w1, [x0, #214]
 31c:	strb	wzr, [x0, #215]
 320:	str	w2, [x0, #216]
 324:	strb	wzr, [x0, #220]
 328:	strb	w1, [x0, #221]
 32c:	strb	wzr, [x0, #222]
 330:	strb	wzr, [x0, #223]
 334:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 338:	add	x2, x2, #0x0
 33c:	str	x2, [x0, #224]
 340:	strb	wzr, [x0, #232]
 344:	strb	w1, [x0, #233]
 348:	strb	wzr, [x0, #234]
 34c:	ret

0000000000000350 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>:
 350:	str	x30, [sp, #-16]!
 354:	mov	x2, #0xf0                  	// #240
 358:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 35c:	ldr	x30, [sp], #16
 360:	ret

0000000000000364 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>:
 364:	stp	x19, x20, [sp, #-96]!
 368:	stp	x21, x22, [sp, #16]
 36c:	stp	x23, x24, [sp, #32]
 370:	str	x30, [sp, #48]
 374:	mov	x21, x0
 378:	mov	x19, x1
 37c:	add	x23, x1, x2
 380:	ldrb	w0, [x0]
 384:	cbz	w0, 494 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x130>
 388:	sub	x20, x23, #0x1
 38c:	cmp	x1, x20
 390:	b.cs	4c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x15c>  // b.hs, b.nlast
 394:	mov	w24, #0x25                  	// #37
 398:	mov	w22, #0x6667                	// #26215
 39c:	movk	w22, #0x6666, lsl #16
 3a0:	b	3bc <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x58>
 3a4:	add	x21, x21, #0x1
 3a8:	strb	w0, [x19], #1
 3ac:	ldrb	w0, [x21]
 3b0:	cbz	w0, 494 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x130>
 3b4:	cmp	x19, x20
 3b8:	b.cs	4c0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x15c>  // b.hs, b.nlast
 3bc:	cmp	w0, #0x25
 3c0:	b.ne	3a4 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x40>  // b.any
 3c4:	ldrb	w0, [x21, #1]
 3c8:	cmp	w0, #0x62
 3cc:	b.eq	3e4 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x80>  // b.none
 3d0:	cmp	w0, #0x70
 3d4:	b.eq	438 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xd4>  // b.none
 3d8:	add	x21, x21, #0x1
 3dc:	strb	w24, [x19], #1
 3e0:	b	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x48>
 3e4:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 3e8:	cbz	x0, 418 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb4>
 3ec:	ldrb	w1, [x0]
 3f0:	cmp	w1, #0x0
 3f4:	ccmp	x20, x19, #0x0, ne  // ne = any
 3f8:	b.ls	410 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xac>  // b.plast
 3fc:	strb	w1, [x19], #1
 400:	ldrb	w1, [x0, #1]!
 404:	cmp	w1, #0x0
 408:	ccmp	x19, x20, #0x2, ne  // ne = any
 40c:	b.cc	3fc <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x98>  // b.lo, b.ul, b.last
 410:	add	x21, x21, #0x2
 414:	b	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x48>
 418:	mov	x4, #0x0                   	// #0
 41c:	mov	x3, #0x0                   	// #0
 420:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 424:	add	x2, x2, #0x0
 428:	mov	w1, #0x2e                  	// #46
 42c:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 430:	add	x0, x0, #0x0
 434:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 438:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 43c:	add	x2, sp, #0x60
 440:	smull	x3, w0, w22
 444:	asr	x3, x3, #34
 448:	sub	w3, w3, w0, asr #31
 44c:	add	w1, w3, w3, lsl #2
 450:	sub	w1, w0, w1, lsl #1
 454:	add	w1, w1, #0x30
 458:	strb	w1, [x2, #-1]!
 45c:	mov	w0, w3
 460:	cbnz	w3, 440 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xdc>
 464:	cmp	x20, x19
 468:	add	x0, sp, #0x60
 46c:	ccmp	x0, x2, #0x0, hi  // hi = pmore
 470:	b.ls	48c <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x128>  // b.plast
 474:	ldrb	w0, [x2], #1
 478:	strb	w0, [x19], #1
 47c:	cmp	x19, x20
 480:	add	x0, sp, #0x60
 484:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
 488:	b.hi	474 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x110>  // b.pmore
 48c:	add	x21, x21, #0x2
 490:	b	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x48>
 494:	sub	x23, x23, #0x1
 498:	cmp	x19, x23
 49c:	b.cs	4b8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x154>  // b.hs, b.nlast
 4a0:	strb	wzr, [x19]
 4a4:	ldp	x21, x22, [sp, #16]
 4a8:	ldp	x23, x24, [sp, #32]
 4ac:	ldr	x30, [sp, #48]
 4b0:	ldp	x19, x20, [sp], #96
 4b4:	ret
 4b8:	mov	x3, #0x0                   	// #0
 4bc:	b	4c8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x164>
 4c0:	cmp	x19, x20
 4c4:	cset	x3, cc  // cc = lo, ul, last
 4c8:	mov	x4, #0x0                   	// #0
 4cc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4d0:	add	x2, x2, #0x0
 4d4:	mov	w1, #0x46                  	// #70
 4d8:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4dc:	add	x0, x0, #0x0
 4e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000004e4 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 4e4:	stp	x19, x20, [sp, #-32]!
 4e8:	stp	x21, x30, [sp, #16]
 4ec:	mov	x19, x0
 4f0:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 4f4:	ldr	x21, [x21]
 4f8:	mov	x1, #0x18                  	// #24
 4fc:	mov	x0, x21
 500:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 504:	mov	x2, x0
 508:	adrp	x20, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 50c:	add	x20, x20, #0x0
 510:	str	x20, [x0]
 514:	str	x19, [x0, #8]
 518:	strb	wzr, [x0, #16]
 51c:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 520:	add	x3, x3, #0x0
 524:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 528:	add	x1, x1, #0x0
 52c:	mov	x0, x19
 530:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 534:	mov	x1, #0x18                  	// #24
 538:	mov	x0, x21
 53c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 540:	mov	x2, x0
 544:	str	x20, [x0]
 548:	str	x19, [x0, #8]
 54c:	mov	w0, #0x1                   	// #1
 550:	strb	w0, [x2, #16]
 554:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 558:	add	x3, x3, #0x0
 55c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 560:	add	x1, x1, #0x0
 564:	mov	x0, x19
 568:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 56c:	ldp	x21, x30, [sp, #16]
 570:	ldp	x19, x20, [sp], #32
 574:	ret

0000000000000578 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 578:	stp	x19, x20, [sp, #-32]!
 57c:	str	x30, [sp, #16]
 580:	mov	x20, x0
 584:	mov	x19, x1
 588:	mov	x3, x1
 58c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 590:	add	x2, x2, #0x0
 594:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 598:	add	x1, x1, #0x0
 59c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5a0:	add	x3, x19, #0x8
 5a4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5a8:	add	x2, x2, #0x0
 5ac:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5b0:	add	x1, x1, #0x0
 5b4:	mov	x0, x20
 5b8:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 5bc:	add	x3, x19, #0x10
 5c0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5c4:	add	x2, x2, #0x0
 5c8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5cc:	add	x1, x1, #0x0
 5d0:	mov	x0, x20
 5d4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5d8:	add	x3, x19, #0x18
 5dc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5e0:	add	x2, x2, #0x0
 5e4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5e8:	add	x1, x1, #0x0
 5ec:	mov	x0, x20
 5f0:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 5f4:	add	x3, x19, #0x20
 5f8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5fc:	add	x2, x2, #0x0
 600:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 604:	add	x1, x1, #0x0
 608:	mov	x0, x20
 60c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 610:	add	x3, x19, #0x21
 614:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 618:	add	x2, x2, #0x0
 61c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 620:	add	x1, x1, #0x0
 624:	mov	x0, x20
 628:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 62c:	add	x3, x19, #0x22
 630:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 634:	add	x2, x2, #0x0
 638:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 63c:	add	x1, x1, #0x0
 640:	mov	x0, x20
 644:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 648:	add	x3, x19, #0x23
 64c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 650:	add	x2, x2, #0x0
 654:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 658:	add	x1, x1, #0x0
 65c:	mov	x0, x20
 660:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 664:	add	x3, x19, #0x24
 668:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 66c:	add	x2, x2, #0x0
 670:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 674:	add	x1, x1, #0x0
 678:	mov	x0, x20
 67c:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 680:	add	x3, x19, #0x28
 684:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 688:	add	x2, x2, #0x0
 68c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 690:	add	x1, x1, #0x0
 694:	mov	x0, x20
 698:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 69c:	add	x3, x19, #0x30
 6a0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6a4:	add	x2, x2, #0x0
 6a8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6ac:	add	x1, x1, #0x0
 6b0:	mov	x0, x20
 6b4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6b8:	add	x3, x19, #0x31
 6bc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6c0:	add	x2, x2, #0x0
 6c4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6c8:	add	x1, x1, #0x0
 6cc:	mov	x0, x20
 6d0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6d4:	add	x3, x19, #0x34
 6d8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6dc:	add	x2, x2, #0x0
 6e0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6e4:	add	x1, x1, #0x0
 6e8:	mov	x0, x20
 6ec:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 6f0:	add	x3, x19, #0x38
 6f4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6f8:	add	x2, x2, #0x0
 6fc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 700:	add	x1, x1, #0x0
 704:	mov	x0, x20
 708:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 70c:	add	x3, x19, #0x39
 710:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 714:	add	x2, x2, #0x0
 718:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 71c:	add	x1, x1, #0x0
 720:	mov	x0, x20
 724:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 728:	add	x3, x19, #0x3a
 72c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 730:	add	x2, x2, #0x0
 734:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 738:	add	x1, x1, #0x0
 73c:	mov	x0, x20
 740:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 744:	add	x3, x19, #0x3b
 748:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 74c:	add	x2, x2, #0x0
 750:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 754:	add	x1, x1, #0x0
 758:	mov	x0, x20
 75c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 760:	add	x3, x19, #0x3c
 764:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 768:	add	x2, x2, #0x0
 76c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 770:	add	x1, x1, #0x0
 774:	mov	x0, x20
 778:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 77c:	add	x3, x19, #0x40
 780:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 784:	add	x2, x2, #0x0
 788:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 78c:	add	x1, x1, #0x0
 790:	mov	x0, x20
 794:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 798:	add	x3, x19, #0x44
 79c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7a0:	add	x2, x2, #0x0
 7a4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7a8:	add	x1, x1, #0x0
 7ac:	mov	x0, x20
 7b0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7b4:	add	x3, x19, #0x48
 7b8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7bc:	add	x2, x2, #0x0
 7c0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7c4:	add	x1, x1, #0x0
 7c8:	mov	x0, x20
 7cc:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 7d0:	add	x3, x19, #0x4c
 7d4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7d8:	add	x2, x2, #0x0
 7dc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7e0:	add	x1, x1, #0x0
 7e4:	mov	x0, x20
 7e8:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 7ec:	add	x3, x19, #0x50
 7f0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7f4:	add	x2, x2, #0x0
 7f8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7fc:	add	x1, x1, #0x0
 800:	mov	x0, x20
 804:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 808:	add	x3, x19, #0x54
 80c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 810:	add	x2, x2, #0x0
 814:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 818:	add	x1, x1, #0x0
 81c:	mov	x0, x20
 820:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 824:	add	x3, x19, #0x58
 828:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 82c:	add	x2, x2, #0x0
 830:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 834:	add	x1, x1, #0x0
 838:	mov	x0, x20
 83c:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 840:	add	x3, x19, #0x5c
 844:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 848:	add	x2, x2, #0x0
 84c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 850:	add	x1, x1, #0x0
 854:	mov	x0, x20
 858:	bl	120 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 85c:	add	x3, x19, #0x60
 860:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 864:	add	x2, x2, #0x0
 868:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 86c:	add	x1, x1, #0x0
 870:	mov	x0, x20
 874:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 878:	add	x3, x19, #0x61
 87c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 880:	add	x2, x2, #0x0
 884:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 888:	add	x1, x1, #0x0
 88c:	mov	x0, x20
 890:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 894:	add	x3, x19, #0x62
 898:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 89c:	add	x2, x2, #0x0
 8a0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8a4:	add	x1, x1, #0x0
 8a8:	mov	x0, x20
 8ac:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8b0:	add	x3, x19, #0x68
 8b4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8b8:	add	x2, x2, #0x0
 8bc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8c0:	add	x1, x1, #0x0
 8c4:	mov	x0, x20
 8c8:	bl	180 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 8cc:	add	x3, x19, #0x70
 8d0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8d4:	add	x2, x2, #0x0
 8d8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8dc:	add	x1, x1, #0x0
 8e0:	mov	x0, x20
 8e4:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 8e8:	add	x3, x19, #0x78
 8ec:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8f0:	add	x2, x2, #0x0
 8f4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8f8:	add	x1, x1, #0x0
 8fc:	mov	x0, x20
 900:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 904:	add	x3, x19, #0x79
 908:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 90c:	add	x2, x2, #0x0
 910:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 914:	add	x1, x1, #0x0
 918:	mov	x0, x20
 91c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 920:	add	x3, x19, #0x7a
 924:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 928:	add	x2, x2, #0x0
 92c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 930:	add	x1, x1, #0x0
 934:	mov	x0, x20
 938:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 93c:	add	x3, x19, #0x80
 940:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 944:	add	x2, x2, #0x0
 948:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 94c:	add	x1, x1, #0x0
 950:	mov	x0, x20
 954:	bl	180 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 958:	add	x3, x19, #0x88
 95c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 960:	add	x2, x2, #0x0
 964:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 968:	add	x1, x1, #0x0
 96c:	mov	x0, x20
 970:	bl	180 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 974:	add	x3, x19, #0x90
 978:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 97c:	add	x2, x2, #0x0
 980:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 984:	add	x1, x1, #0x0
 988:	mov	x0, x20
 98c:	bl	180 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 990:	add	x3, x19, #0x98
 994:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 998:	add	x2, x2, #0x0
 99c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9a0:	add	x1, x1, #0x0
 9a4:	mov	x0, x20
 9a8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9ac:	add	x3, x19, #0x9c
 9b0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9b4:	add	x2, x2, #0x0
 9b8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9bc:	add	x1, x1, #0x0
 9c0:	mov	x0, x20
 9c4:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 9c8:	add	x3, x19, #0xa0
 9cc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9d0:	add	x2, x2, #0x0
 9d4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9d8:	add	x1, x1, #0x0
 9dc:	mov	x0, x20
 9e0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9e4:	add	x3, x19, #0xa1
 9e8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9ec:	add	x2, x2, #0x0
 9f0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9f4:	add	x1, x1, #0x0
 9f8:	mov	x0, x20
 9fc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a00:	add	x3, x19, #0xa8
 a04:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a08:	add	x2, x2, #0x0
 a0c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a10:	add	x1, x1, #0x0
 a14:	mov	x0, x20
 a18:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 a1c:	add	x3, x19, #0xb0
 a20:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a24:	add	x2, x2, #0x0
 a28:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a2c:	add	x1, x1, #0x0
 a30:	mov	x0, x20
 a34:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a38:	add	x3, x19, #0xb1
 a3c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a40:	add	x2, x2, #0x0
 a44:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a48:	add	x1, x1, #0x0
 a4c:	mov	x0, x20
 a50:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a54:	add	x3, x19, #0xb2
 a58:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a5c:	add	x2, x2, #0x0
 a60:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a64:	add	x1, x1, #0x0
 a68:	mov	x0, x20
 a6c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a70:	add	x3, x19, #0xb3
 a74:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a78:	add	x2, x2, #0x0
 a7c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a80:	add	x1, x1, #0x0
 a84:	mov	x0, x20
 a88:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a8c:	add	x3, x19, #0xb4
 a90:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a94:	add	x2, x2, #0x0
 a98:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a9c:	add	x1, x1, #0x0
 aa0:	mov	x0, x20
 aa4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aa8:	add	x3, x19, #0xb5
 aac:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ab0:	add	x2, x2, #0x0
 ab4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ab8:	add	x1, x1, #0x0
 abc:	mov	x0, x20
 ac0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ac4:	add	x3, x19, #0xb8
 ac8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 acc:	add	x2, x2, #0x0
 ad0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ad4:	add	x1, x1, #0x0
 ad8:	mov	x0, x20
 adc:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 ae0:	add	x3, x19, #0xc0
 ae4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ae8:	add	x2, x2, #0x0
 aec:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 af0:	add	x1, x1, #0x0
 af4:	mov	x0, x20
 af8:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 afc:	add	x3, x19, #0xc8
 b00:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b04:	add	x2, x2, #0x0
 b08:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b0c:	add	x1, x1, #0x0
 b10:	mov	x0, x20
 b14:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b18:	add	x3, x19, #0xc9
 b1c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b20:	add	x2, x2, #0x0
 b24:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b28:	add	x1, x1, #0x0
 b2c:	mov	x0, x20
 b30:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b34:	add	x3, x19, #0xca
 b38:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b3c:	add	x2, x2, #0x0
 b40:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b44:	add	x1, x1, #0x0
 b48:	mov	x0, x20
 b4c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b50:	add	x3, x19, #0xcb
 b54:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b58:	add	x2, x2, #0x0
 b5c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b60:	add	x1, x1, #0x0
 b64:	mov	x0, x20
 b68:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b6c:	add	x3, x19, #0xcc
 b70:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b74:	add	x2, x2, #0x0
 b78:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b7c:	add	x1, x1, #0x0
 b80:	mov	x0, x20
 b84:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b88:	add	x3, x19, #0xcd
 b8c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b90:	add	x2, x2, #0x0
 b94:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b98:	add	x1, x1, #0x0
 b9c:	mov	x0, x20
 ba0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ba4:	add	x3, x19, #0xce
 ba8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bac:	add	x2, x2, #0x0
 bb0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bb4:	add	x1, x1, #0x0
 bb8:	mov	x0, x20
 bbc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bc0:	add	x3, x19, #0xcf
 bc4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bc8:	add	x2, x2, #0x0
 bcc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bd0:	add	x1, x1, #0x0
 bd4:	mov	x0, x20
 bd8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bdc:	add	x3, x19, #0xd0
 be0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 be4:	add	x2, x2, #0x0
 be8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bec:	add	x1, x1, #0x0
 bf0:	mov	x0, x20
 bf4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bf8:	add	x3, x19, #0xd1
 bfc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c00:	add	x2, x2, #0x0
 c04:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c08:	add	x1, x1, #0x0
 c0c:	mov	x0, x20
 c10:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c14:	add	x3, x19, #0xd2
 c18:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c1c:	add	x2, x2, #0x0
 c20:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c24:	add	x1, x1, #0x0
 c28:	mov	x0, x20
 c2c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c30:	add	x3, x19, #0xd3
 c34:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c38:	add	x2, x2, #0x0
 c3c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c40:	add	x1, x1, #0x0
 c44:	mov	x0, x20
 c48:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c4c:	add	x3, x19, #0xd4
 c50:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c54:	add	x2, x2, #0x0
 c58:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c5c:	add	x1, x1, #0x0
 c60:	mov	x0, x20
 c64:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c68:	add	x3, x19, #0xd5
 c6c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c70:	add	x2, x2, #0x0
 c74:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c78:	add	x1, x1, #0x0
 c7c:	mov	x0, x20
 c80:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c84:	add	x3, x19, #0xd6
 c88:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c8c:	add	x2, x2, #0x0
 c90:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c94:	add	x1, x1, #0x0
 c98:	mov	x0, x20
 c9c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ca0:	add	x3, x19, #0xd7
 ca4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ca8:	add	x2, x2, #0x0
 cac:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cb0:	add	x1, x1, #0x0
 cb4:	mov	x0, x20
 cb8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cbc:	add	x3, x19, #0xd8
 cc0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cc4:	add	x2, x2, #0x0
 cc8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ccc:	add	x1, x1, #0x0
 cd0:	mov	x0, x20
 cd4:	bl	c0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 cd8:	add	x3, x19, #0xdc
 cdc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ce0:	add	x2, x2, #0x0
 ce4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ce8:	add	x1, x1, #0x0
 cec:	mov	x0, x20
 cf0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cf4:	add	x3, x19, #0xdd
 cf8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cfc:	add	x2, x2, #0x0
 d00:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d04:	add	x1, x1, #0x0
 d08:	mov	x0, x20
 d0c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d10:	add	x3, x19, #0xde
 d14:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d18:	add	x2, x2, #0x0
 d1c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d20:	add	x1, x1, #0x0
 d24:	mov	x0, x20
 d28:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d2c:	add	x3, x19, #0xdf
 d30:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d34:	add	x2, x2, #0x0
 d38:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d3c:	add	x1, x1, #0x0
 d40:	mov	x0, x20
 d44:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d48:	add	x3, x19, #0xe0
 d4c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d50:	add	x2, x2, #0x0
 d54:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d58:	add	x1, x1, #0x0
 d5c:	mov	x0, x20
 d60:	bl	60 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 d64:	add	x3, x19, #0xe8
 d68:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d6c:	add	x2, x2, #0x0
 d70:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d74:	add	x1, x1, #0x0
 d78:	mov	x0, x20
 d7c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d80:	add	x3, x19, #0xe9
 d84:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d88:	add	x2, x2, #0x0
 d8c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d90:	add	x1, x1, #0x0
 d94:	mov	x0, x20
 d98:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 d9c:	add	x3, x19, #0xea
 da0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 da4:	add	x2, x2, #0x0
 da8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 dac:	add	x1, x1, #0x0
 db0:	mov	x0, x20
 db4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 db8:	mov	x1, x19
 dbc:	mov	x0, x20
 dc0:	bl	4e4 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 dc4:	ldr	x30, [sp, #16]
 dc8:	ldp	x19, x20, [sp], #32
 dcc:	ret

0000000000000dd0 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>:
 dd0:	ldrb	w1, [x0, #161]
 dd4:	ldrb	w2, [x0, #223]
 dd8:	orr	w1, w1, w2
 ddc:	strb	w1, [x0, #161]
 de0:	ldr	w1, [x0, #52]
 de4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 de8:	ldr	x0, [x0]
 dec:	str	w1, [x0]
 df0:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	ldr	x0, [x0, #8]
   4:	str	x1, [x0]
   8:	mov	w0, #0x1                   	// #1
   c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	mov	w1, #0x0                   	// #0
  24:	cbnz	w0, 40 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x40>
  28:	ldr	x0, [x20, #8]
  2c:	str	w1, [x0]
  30:	mov	w0, #0x1                   	// #1
  34:	ldr	x30, [sp, #16]
  38:	ldp	x19, x20, [sp], #32
  3c:	ret
  40:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  44:	add	x1, x1, #0x0
  48:	mov	x0, x19
  4c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  50:	mov	w1, #0x0                   	// #0
  54:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  58:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  5c:	add	x1, x1, #0x0
  60:	mov	x0, x19
  64:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  68:	mov	w1, #0x0                   	// #0
  6c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  70:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  74:	add	x1, x1, #0x0
  78:	mov	x0, x19
  7c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  80:	mov	w1, #0x1                   	// #1
  84:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  88:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  8c:	add	x1, x1, #0x0
  90:	mov	x0, x19
  94:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  98:	mov	w1, #0x1                   	// #1
  9c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  a0:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  a4:	add	x1, x1, #0x0
  a8:	mov	x0, x19
  ac:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  b0:	cbz	w0, 108 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x108>
  b4:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  b8:	add	x1, x1, #0x0
  bc:	mov	x0, x19
  c0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  c4:	cbnz	w0, dc <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xdc>
  c8:	ldr	x0, [x20, #8]
  cc:	mov	w1, #0x2                   	// #2
  d0:	str	w1, [x0]
  d4:	mov	w0, #0x1                   	// #1
  d8:	b	34 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x34>
  dc:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  e0:	add	x1, x1, #0x0
  e4:	mov	x0, x19
  e8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ec:	cbz	w0, c8 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xc8>
  f0:	mov	x1, x19
  f4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 100:	mov	w0, #0x0                   	// #0
 104:	b	34 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x34>
 108:	mov	w1, #0x1                   	// #1
 10c:	b	28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerImE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	w2, #0xa                   	// #10
  14:	add	x1, sp, #0x28
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	x0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	b	3c <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc+0x3c>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	w2, #0xa                   	// #10
  14:	add	x1, sp, #0x28
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	w0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	b	3c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x3c>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	ldr	x20, [x0, #8]
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 38 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x38>
  24:	strb	wzr, [x20]
  28:	mov	w0, #0x1                   	// #1
  2c:	ldr	x30, [sp, #16]
  30:	ldp	x19, x20, [sp], #32
  34:	ret
  38:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  3c:	add	x1, x1, #0x0
  40:	mov	x0, x19
  44:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  48:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  4c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  5c:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  60:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  64:	add	x1, x1, #0x0
  68:	mov	x0, x19
  6c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  70:	cbnz	w0, 80 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x80>
  74:	mov	w0, #0x1                   	// #1
  78:	strb	w0, [x20]
  7c:	b	28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  80:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  84:	add	x1, x1, #0x0
  88:	mov	x0, x19
  8c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  90:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  94:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  98:	add	x1, x1, #0x0
  9c:	mov	x0, x19
  a0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a4:	cbz	w0, 74 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x74>
  a8:	mov	x1, x19
  ac:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b0:	add	x0, x0, #0x0
  b4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  b8:	mov	w0, #0x0                   	// #0
  bc:	b	2c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x2c>

Disassembly of section .text._ZN11__sanitizer18FlagHandlerInclude5ParseEPKc:

0000000000000000 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #24]
   8:	mov	x20, x0
   c:	mov	x19, x1
  10:	mov	w1, #0x25                  	// #37
  14:	mov	x0, x19
  18:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
  1c:	cbz	x0, 80 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc+0x80>
  20:	str	x21, [sp, #16]
  24:	mov	w2, #0x0                   	// #0
  28:	adrp	x1, 0 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>
  2c:	add	x1, x1, #0x0
  30:	mov	x0, #0x1000                	// #4096
  34:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  38:	mov	x21, x0
  3c:	mov	x2, #0x1000                	// #4096
  40:	mov	x1, x0
  44:	mov	x0, x19
  48:	bl	364 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>
  4c:	ldrb	w2, [x20, #16]
  50:	mov	x1, x21
  54:	ldr	x0, [x20, #8]
  58:	bl	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  5c:	and	w19, w0, #0xff
  60:	mov	x1, #0x1000                	// #4096
  64:	mov	x0, x21
  68:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  6c:	ldr	x21, [sp, #16]
  70:	mov	w0, w19
  74:	ldr	x30, [sp, #24]
  78:	ldp	x19, x20, [sp], #32
  7c:	ret
  80:	ldrb	w2, [x20, #16]
  84:	mov	x1, x19
  88:	ldr	x0, [x20, #8]
  8c:	bl	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  90:	and	w19, w0, #0xff
  94:	b	70 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc+0x70>

sanitizer_libc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer15internal_memchrEPKvim>:
   0:	cbz	x2, 28 <_ZN11__sanitizer15internal_memchrEPKvim+0x28>
   4:	add	x3, x0, x2
   8:	ldrb	w2, [x0]
   c:	cmp	w2, w1
  10:	b.eq	24 <_ZN11__sanitizer15internal_memchrEPKvim+0x24>  // b.none
  14:	add	x0, x0, #0x1
  18:	cmp	x3, x0
  1c:	b.ne	8 <_ZN11__sanitizer15internal_memchrEPKvim+0x8>  // b.any
  20:	mov	x0, #0x0                   	// #0
  24:	ret
  28:	mov	x0, #0x0                   	// #0
  2c:	b	24 <_ZN11__sanitizer15internal_memchrEPKvim+0x24>

0000000000000030 <_ZN11__sanitizer16internal_memrchrEPKvim>:
  30:	mov	x3, x0
  34:	cbz	x2, 5c <_ZN11__sanitizer16internal_memrchrEPKvim+0x2c>
  38:	add	x4, x0, x2
  3c:	mov	x0, #0x0                   	// #0
  40:	ldrb	w2, [x3]
  44:	cmp	w2, w1
  48:	csel	x0, x0, x3, ne  // ne = any
  4c:	add	x3, x3, #0x1
  50:	cmp	x4, x3
  54:	b.ne	40 <_ZN11__sanitizer16internal_memrchrEPKvim+0x10>  // b.any
  58:	ret
  5c:	mov	x0, #0x0                   	// #0
  60:	b	58 <_ZN11__sanitizer16internal_memrchrEPKvim+0x28>

0000000000000064 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>:
  64:	cbz	x2, 9c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x38>
  68:	mov	x3, #0x0                   	// #0
  6c:	ldrb	w5, [x0, x3]
  70:	ldrb	w4, [x1, x3]
  74:	cmp	w5, w4
  78:	b.ne	90 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x2c>  // b.any
  7c:	add	x3, x3, #0x1
  80:	cmp	x2, x3
  84:	b.ne	6c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x8>  // b.any
  88:	mov	w0, #0x0                   	// #0
  8c:	b	98 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>
  90:	mov	w0, #0x1                   	// #1
  94:	cneg	w0, w0, cc  // cc = lo, ul, last
  98:	ret
  9c:	mov	w0, #0x0                   	// #0
  a0:	b	98 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>

00000000000000a4 <_ZN11__sanitizer15internal_memcpyEPvPKvm>:
  a4:	cbz	x2, c0 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x1c>
  a8:	mov	x3, #0x0                   	// #0
  ac:	ldrb	w4, [x1, x3]
  b0:	strb	w4, [x0, x3]
  b4:	add	x3, x3, #0x1
  b8:	cmp	x2, x3
  bc:	b.ne	ac <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x8>  // b.any
  c0:	ret

00000000000000c4 <_ZN11__sanitizer16internal_memmoveEPvPKvm>:
  c4:	cmp	x0, x1
  c8:	b.cs	f0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x2c>  // b.hs, b.nlast
  cc:	cmp	x2, #0x0
  d0:	b.le	ec <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x28>
  d4:	mov	x3, #0x0                   	// #0
  d8:	ldrb	w4, [x1, x3]
  dc:	strb	w4, [x0, x3]
  e0:	add	x3, x3, #0x1
  e4:	cmp	x2, x3
  e8:	b.ne	d8 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x14>  // b.any
  ec:	ret
  f0:	cmp	x2, #0x0
  f4:	ccmp	x0, x1, #0x0, gt
  f8:	b.ls	ec <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x28>  // b.plast
  fc:	sub	x2, x2, #0x1
 100:	ldrb	w3, [x1, x2]
 104:	strb	w3, [x0, x2]
 108:	subs	x2, x2, #0x1
 10c:	b.pl	100 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x3c>  // b.nfrst
 110:	b	ec <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x28>

0000000000000114 <_ZN11__sanitizer15internal_memsetEPvim>:
 114:	orr	x3, x0, x2
 118:	tst	x3, #0xf
 11c:	b.eq	140 <_ZN11__sanitizer15internal_memsetEPvim+0x2c>  // b.none
 120:	cbz	x2, 13c <_ZN11__sanitizer15internal_memsetEPvim+0x28>
 124:	add	x3, x0, x2
 128:	mov	x2, x0
 12c:	and	w1, w1, #0xff
 130:	strb	w1, [x2], #1
 134:	cmp	x3, x2
 138:	b.ne	130 <_ZN11__sanitizer15internal_memsetEPvim+0x1c>  // b.any
 13c:	ret
 140:	and	x2, x2, #0xfffffffffffffff8
 144:	add	x2, x0, x2
 148:	sxtw	x3, w1
 14c:	sbfiz	x1, x1, #8, #32
 150:	orr	x1, x1, x3
 154:	orr	x1, x1, x1, lsl #16
 158:	orr	x1, x1, x1, lsl #32
 15c:	cmp	x0, x2
 160:	b.cs	13c <_ZN11__sanitizer15internal_memsetEPvim+0x28>  // b.hs, b.nlast
 164:	mov	x3, x0
 168:	str	x1, [x3, #8]
 16c:	str	x1, [x3], #16
 170:	cmp	x2, x3
 174:	b.hi	168 <_ZN11__sanitizer15internal_memsetEPvim+0x54>  // b.pmore
 178:	b	13c <_ZN11__sanitizer15internal_memsetEPvim+0x28>

000000000000017c <_ZN11__sanitizer15internal_strcmpEPKcS1_>:
 17c:	ldrb	w3, [x0]
 180:	ldrb	w4, [x1]
 184:	mov	x2, #0x1                   	// #1
 188:	cmp	w3, w4
 18c:	b.ne	1a8 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x2c>  // b.any
 190:	cbz	w3, 1b8 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x3c>
 194:	ldrb	w3, [x0, x2]
 198:	ldrb	w4, [x1, x2]
 19c:	add	x2, x2, #0x1
 1a0:	cmp	w3, w4
 1a4:	b.eq	190 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x14>  // b.none
 1a8:	mov	w0, #0x1                   	// #1
 1ac:	cmp	w3, w4
 1b0:	cneg	w0, w0, cc  // cc = lo, ul, last
 1b4:	ret
 1b8:	mov	w0, #0x0                   	// #0
 1bc:	b	1b4 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x38>

00000000000001c0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>:
 1c0:	cbz	x2, 1fc <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x3c>
 1c4:	mov	x3, #0x0                   	// #0
 1c8:	ldrb	w4, [x0, x3]
 1cc:	ldrb	w5, [x1, x3]
 1d0:	cmp	w4, w5
 1d4:	b.ne	1f0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x30>  // b.any
 1d8:	cbz	w4, 204 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x44>
 1dc:	add	x3, x3, #0x1
 1e0:	cmp	x2, x3
 1e4:	b.ne	1c8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x8>  // b.any
 1e8:	mov	w0, #0x0                   	// #0
 1ec:	b	1f8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
 1f0:	mov	w0, #0x1                   	// #1
 1f4:	cneg	w0, w0, cc  // cc = lo, ul, last
 1f8:	ret
 1fc:	mov	w0, #0x0                   	// #0
 200:	b	1f8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
 204:	mov	w0, #0x0                   	// #0
 208:	b	1f8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>

000000000000020c <_ZN11__sanitizer15internal_strchrEPKci>:
 20c:	ldrb	w2, [x0]
 210:	and	w3, w1, #0xff
 214:	cmp	w2, w1, uxtb
 218:	b.eq	234 <_ZN11__sanitizer15internal_strchrEPKci+0x28>  // b.none
 21c:	cbz	w2, 230 <_ZN11__sanitizer15internal_strchrEPKci+0x24>
 220:	ldrb	w2, [x0, #1]!
 224:	cmp	w2, w3
 228:	b.ne	21c <_ZN11__sanitizer15internal_strchrEPKci+0x10>  // b.any
 22c:	b	234 <_ZN11__sanitizer15internal_strchrEPKci+0x28>
 230:	mov	x0, #0x0                   	// #0
 234:	ret

0000000000000238 <_ZN11__sanitizer16internal_strcspnEPKcS1_>:
 238:	stp	x19, x20, [sp, #-32]!
 23c:	stp	x21, x30, [sp, #16]
 240:	mov	x21, x1
 244:	ldrb	w1, [x0]
 248:	cbz	w1, 27c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x44>
 24c:	mov	x20, x0
 250:	mov	x19, #0x0                   	// #0
 254:	mov	x0, x21
 258:	bl	20c <_ZN11__sanitizer15internal_strchrEPKci>
 25c:	cbnz	x0, 26c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x34>
 260:	add	x19, x19, #0x1
 264:	ldrb	w1, [x20, x19]
 268:	cbnz	w1, 254 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x1c>
 26c:	mov	x0, x19
 270:	ldp	x21, x30, [sp, #16]
 274:	ldp	x19, x20, [sp], #32
 278:	ret
 27c:	mov	x19, #0x0                   	// #0
 280:	b	26c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x34>

0000000000000284 <_ZN11__sanitizer16internal_strrchrEPKci>:
 284:	mov	x2, x0
 288:	ldrb	w3, [x0]
 28c:	cbz	w3, 2a8 <_ZN11__sanitizer16internal_strrchrEPKci+0x24>
 290:	mov	x0, #0x0                   	// #0
 294:	cmp	w3, w1
 298:	csel	x0, x0, x2, ne  // ne = any
 29c:	ldrb	w3, [x2, #1]!
 2a0:	cbnz	w3, 294 <_ZN11__sanitizer16internal_strrchrEPKci+0x10>
 2a4:	ret
 2a8:	mov	x0, #0x0                   	// #0
 2ac:	b	2a4 <_ZN11__sanitizer16internal_strrchrEPKci+0x20>

00000000000002b0 <_ZN11__sanitizer15internal_strlenEPKc>:
 2b0:	mov	x2, x0
 2b4:	ldrb	w0, [x0]
 2b8:	cbz	w0, 2d0 <_ZN11__sanitizer15internal_strlenEPKc+0x20>
 2bc:	mov	x0, #0x0                   	// #0
 2c0:	add	x0, x0, #0x1
 2c4:	ldrb	w1, [x2, x0]
 2c8:	cbnz	w1, 2c0 <_ZN11__sanitizer15internal_strlenEPKc+0x10>
 2cc:	ret
 2d0:	mov	x0, #0x0                   	// #0
 2d4:	b	2cc <_ZN11__sanitizer15internal_strlenEPKc+0x1c>

00000000000002d8 <_ZN11__sanitizer15internal_strdupEPKc>:
 2d8:	stp	x19, x20, [sp, #-32]!
 2dc:	stp	x21, x30, [sp, #16]
 2e0:	mov	x21, x0
 2e4:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 2e8:	mov	x19, x0
 2ec:	mov	x2, #0x0                   	// #0
 2f0:	mov	x1, #0x0                   	// #0
 2f4:	add	x0, x0, #0x1
 2f8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 2fc:	mov	x20, x0
 300:	mov	x2, x19
 304:	mov	x1, x21
 308:	bl	a4 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 30c:	strb	wzr, [x20, x19]
 310:	mov	x0, x20
 314:	ldp	x21, x30, [sp, #16]
 318:	ldp	x19, x20, [sp], #32
 31c:	ret

0000000000000320 <_ZN11__sanitizer18internal_strchrnulEPKci>:
 320:	stp	x19, x30, [sp, #-16]!
 324:	mov	x19, x0
 328:	bl	20c <_ZN11__sanitizer15internal_strchrEPKci>
 32c:	cbz	x0, 338 <_ZN11__sanitizer18internal_strchrnulEPKci+0x18>
 330:	ldp	x19, x30, [sp], #16
 334:	ret
 338:	mov	x0, x19
 33c:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 340:	add	x0, x19, x0
 344:	b	330 <_ZN11__sanitizer18internal_strchrnulEPKci+0x10>

0000000000000348 <_ZN11__sanitizer16internal_strncatEPcPKcm>:
 348:	stp	x19, x20, [sp, #-32]!
 34c:	stp	x21, x30, [sp, #16]
 350:	mov	x21, x0
 354:	mov	x20, x1
 358:	mov	x19, x2
 35c:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 360:	cbz	x19, 39c <_ZN11__sanitizer16internal_strncatEPcPKcm+0x54>
 364:	mov	x3, #0x0                   	// #0
 368:	add	x1, x21, x0
 36c:	ldrb	w4, [x20, x3]
 370:	cbz	w4, 384 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x3c>
 374:	strb	w4, [x1, x3]
 378:	add	x3, x3, #0x1
 37c:	cmp	x19, x3
 380:	b.ne	36c <_ZN11__sanitizer16internal_strncatEPcPKcm+0x24>  // b.any
 384:	add	x0, x21, x0
 388:	strb	wzr, [x0, x3]
 38c:	mov	x0, x21
 390:	ldp	x21, x30, [sp, #16]
 394:	ldp	x19, x20, [sp], #32
 398:	ret
 39c:	mov	x3, x19
 3a0:	b	384 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x3c>

00000000000003a4 <_ZN11__sanitizer16internal_strlcpyEPcPKcm>:
 3a4:	stp	x19, x20, [sp, #-48]!
 3a8:	stp	x21, x22, [sp, #16]
 3ac:	str	x30, [sp, #32]
 3b0:	mov	x22, x0
 3b4:	mov	x21, x1
 3b8:	mov	x19, x2
 3bc:	mov	x0, x1
 3c0:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 3c4:	mov	x20, x0
 3c8:	cmp	x0, x19
 3cc:	b.cc	3e8 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x44>  // b.lo, b.ul, b.last
 3d0:	cbnz	x19, 3fc <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x58>
 3d4:	mov	x0, x20
 3d8:	ldp	x21, x22, [sp, #16]
 3dc:	ldr	x30, [sp, #32]
 3e0:	ldp	x19, x20, [sp], #48
 3e4:	ret
 3e8:	add	x2, x0, #0x1
 3ec:	mov	x1, x21
 3f0:	mov	x0, x22
 3f4:	bl	c4 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 3f8:	b	3d4 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x30>
 3fc:	sub	x19, x19, #0x1
 400:	mov	x2, x19
 404:	mov	x1, x21
 408:	mov	x0, x22
 40c:	bl	c4 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 410:	strb	wzr, [x22, x19]
 414:	b	3d4 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x30>

0000000000000418 <_ZN11__sanitizer16internal_strncpyEPcPKcm>:
 418:	stp	x19, x30, [sp, #-16]!
 41c:	mov	x19, x0
 420:	cbz	x2, 45c <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x44>
 424:	mov	x0, #0x0                   	// #0
 428:	ldrb	w4, [x1, x0]
 42c:	cbz	w4, 440 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x28>
 430:	strb	w4, [x19, x0]
 434:	add	x0, x0, #0x1
 438:	cmp	x2, x0
 43c:	b.ne	428 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x10>  // b.any
 440:	sub	x2, x2, x0
 444:	mov	w1, #0x0                   	// #0
 448:	add	x0, x19, x0
 44c:	bl	114 <_ZN11__sanitizer15internal_memsetEPvim>
 450:	mov	x0, x19
 454:	ldp	x19, x30, [sp], #16
 458:	ret
 45c:	mov	x0, x2
 460:	b	440 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x28>

0000000000000464 <_ZN11__sanitizer16internal_strnlenEPKcm>:
 464:	mov	x3, x0
 468:	cbz	x1, 488 <_ZN11__sanitizer16internal_strnlenEPKcm+0x24>
 46c:	mov	x0, #0x0                   	// #0
 470:	ldrb	w2, [x3, x0]
 474:	cbz	w2, 484 <_ZN11__sanitizer16internal_strnlenEPKcm+0x20>
 478:	add	x0, x0, #0x1
 47c:	cmp	x1, x0
 480:	b.ne	470 <_ZN11__sanitizer16internal_strnlenEPKcm+0xc>  // b.any
 484:	ret
 488:	mov	x0, x1
 48c:	b	484 <_ZN11__sanitizer16internal_strnlenEPKcm+0x20>

0000000000000490 <_ZN11__sanitizer16internal_strlcatEPcPKcm>:
 490:	stp	x19, x20, [sp, #-48]!
 494:	stp	x21, x22, [sp, #16]
 498:	stp	x23, x30, [sp, #32]
 49c:	mov	x22, x0
 4a0:	mov	x23, x1
 4a4:	mov	x21, x2
 4a8:	mov	x0, x1
 4ac:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 4b0:	mov	x19, x0
 4b4:	mov	x1, x21
 4b8:	mov	x0, x22
 4bc:	bl	464 <_ZN11__sanitizer16internal_strnlenEPKcm>
 4c0:	mov	x20, x0
 4c4:	cmp	x21, x0
 4c8:	b.eq	4fc <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x6c>  // b.none
 4cc:	sub	x2, x21, x0
 4d0:	cmp	x2, x19
 4d4:	b.ls	504 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x74>  // b.plast
 4d8:	add	x2, x19, #0x1
 4dc:	mov	x1, x23
 4e0:	add	x0, x22, x0
 4e4:	bl	c4 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 4e8:	add	x0, x19, x20
 4ec:	ldp	x21, x22, [sp, #16]
 4f0:	ldp	x23, x30, [sp, #32]
 4f4:	ldp	x19, x20, [sp], #48
 4f8:	ret
 4fc:	add	x0, x19, x0
 500:	b	4ec <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x5c>
 504:	sub	x2, x2, #0x1
 508:	mov	x1, x23
 50c:	add	x0, x22, x0
 510:	bl	c4 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 514:	add	x21, x22, x21
 518:	sturb	wzr, [x21, #-1]
 51c:	b	4e8 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x58>

0000000000000520 <_ZN11__sanitizer15internal_strstrEPKcS1_>:
 520:	stp	x19, x20, [sp, #-64]!
 524:	stp	x21, x22, [sp, #16]
 528:	stp	x23, x24, [sp, #32]
 52c:	str	x30, [sp, #48]
 530:	mov	x24, x0
 534:	mov	x23, x1
 538:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 53c:	mov	x21, x0
 540:	mov	x0, x23
 544:	bl	2b0 <_ZN11__sanitizer15internal_strlenEPKc>
 548:	cmp	x21, x0
 54c:	b.cc	59c <_ZN11__sanitizer15internal_strstrEPKcS1_+0x7c>  // b.lo, b.ul, b.last
 550:	mov	x22, x0
 554:	sub	x21, x21, x0
 558:	mov	x19, #0x0                   	// #0
 55c:	add	x20, x24, x19
 560:	mov	x2, x22
 564:	mov	x1, x23
 568:	mov	x0, x20
 56c:	bl	64 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
 570:	cbz	w0, 584 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x64>
 574:	add	x19, x19, #0x1
 578:	cmp	x19, x21
 57c:	b.ls	55c <_ZN11__sanitizer15internal_strstrEPKcS1_+0x3c>  // b.plast
 580:	mov	x20, #0x0                   	// #0
 584:	mov	x0, x20
 588:	ldp	x21, x22, [sp, #16]
 58c:	ldp	x23, x24, [sp, #32]
 590:	ldr	x30, [sp, #48]
 594:	ldp	x19, x20, [sp], #64
 598:	ret
 59c:	mov	x20, #0x0                   	// #0
 5a0:	b	584 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x64>

00000000000005a4 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>:
 5a4:	cmp	w2, #0xa
 5a8:	b.eq	5d4 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x30>  // b.none
 5ac:	str	x30, [sp, #-16]!
 5b0:	sxtw	x3, w2
 5b4:	mov	x4, #0xa                   	// #10
 5b8:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 5bc:	add	x2, x2, #0x0
 5c0:	mov	w1, #0xe5                  	// #229
 5c4:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 5c8:	add	x0, x0, #0x0
 5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d0:	add	x0, x0, #0x1
 5d4:	ldrb	w2, [x0]
 5d8:	cmp	w2, #0x20
 5dc:	b.eq	5d0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x2c>  // b.none
 5e0:	sub	w3, w2, #0x9
 5e4:	and	w3, w3, #0xff
 5e8:	cmp	w3, #0x4
 5ec:	b.ls	5d0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x2c>  // b.plast
 5f0:	cmp	w2, #0x2b
 5f4:	b.eq	680 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xdc>  // b.none
 5f8:	mov	x4, x0
 5fc:	mov	w7, #0x1                   	// #1
 600:	cmp	w2, #0x2d
 604:	b.eq	68c <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xe8>  // b.none
 608:	ldrb	w2, [x4]
 60c:	sub	w3, w2, #0x30
 610:	cmp	w3, #0x9
 614:	b.hi	6ac <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x108>  // b.pmore
 618:	mov	x3, #0x0                   	// #0
 61c:	mov	x6, #0x9999999999999999    	// #-7378697629483820647
 620:	movk	x6, #0x1999, lsl #48
 624:	mov	x5, #0xffffffffffffffff    	// #-1
 628:	add	x0, x3, x3, lsl #2
 62c:	lsl	x0, x0, #1
 630:	cmp	x3, x6
 634:	csel	x0, x0, x5, ls  // ls = plast
 638:	sub	w2, w2, #0x30
 63c:	sxtw	x2, w2
 640:	mvn	x3, x2
 644:	add	x2, x2, x0
 648:	cmp	x3, x0
 64c:	csel	x3, x2, x5, cs  // cs = hs, nlast
 650:	ldrb	w2, [x4, #1]!
 654:	sub	w0, w2, #0x30
 658:	cmp	w0, #0x9
 65c:	b.ls	628 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x84>  // b.plast
 660:	cbz	x1, 668 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xc4>
 664:	str	x4, [x1]
 668:	cmp	w7, #0x0
 66c:	b.le	698 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xf4>
 670:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
 674:	cmp	x3, x0
 678:	csel	x0, x3, x0, ls  // ls = plast
 67c:	ret
 680:	add	x4, x0, #0x1
 684:	mov	w7, #0x1                   	// #1
 688:	b	608 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x64>
 68c:	add	x4, x0, #0x1
 690:	mov	w7, #0xffffffff            	// #-1
 694:	b	608 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x64>
 698:	mov	x1, x3
 69c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 6a0:	tbnz	x3, #63, 6cc <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x128>
 6a4:	neg	x0, x1
 6a8:	ret
 6ac:	cbz	x1, 6bc <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x118>
 6b0:	mov	x4, x0
 6b4:	mov	x3, #0x0                   	// #0
 6b8:	b	664 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xc0>
 6bc:	cmp	w7, #0x0
 6c0:	b.le	6a4 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x100>
 6c4:	mov	x3, #0x0                   	// #0
 6c8:	b	670 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xcc>
 6cc:	ret

00000000000006d0 <_ZN11__sanitizer14internal_atollEPKc>:
 6d0:	str	x30, [sp, #-16]!
 6d4:	mov	w2, #0xa                   	// #10
 6d8:	mov	x1, #0x0                   	// #0
 6dc:	bl	5a4 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
 6e0:	ldr	x30, [sp], #16
 6e4:	ret

00000000000006e8 <_ZN11__sanitizer11mem_is_zeroEPKcm>:
 6e8:	mov	x2, #0x10000000000         	// #1099511627776
 6ec:	cmp	x1, x2
 6f0:	b.hi	770 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x88>  // b.pmore
 6f4:	add	x5, x0, x1
 6f8:	add	x2, x0, #0x7
 6fc:	and	x2, x2, #0xfffffffffffffff8
 700:	and	x4, x5, #0xfffffffffffffff8
 704:	cmp	x0, x2
 708:	mov	x3, x0
 70c:	mov	x1, #0x0                   	// #0
 710:	ccmp	x0, x5, #0x2, cc  // cc = lo, ul, last
 714:	b.cs	72c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x44>  // b.hs, b.nlast
 718:	ldrb	w6, [x3], #1
 71c:	orr	x1, x1, x6
 720:	cmp	x2, x3
 724:	ccmp	x5, x3, #0x0, hi  // hi = pmore
 728:	b.hi	718 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30>  // b.pmore
 72c:	cmp	x2, x4
 730:	b.cs	744 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x5c>  // b.hs, b.nlast
 734:	ldr	x3, [x2], #8
 738:	orr	x1, x1, x3
 73c:	cmp	x4, x2
 740:	b.hi	734 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x4c>  // b.pmore
 744:	cmp	x0, x4
 748:	b.hi	764 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x7c>  // b.pmore
 74c:	cmp	x5, x4
 750:	b.ls	764 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x7c>  // b.plast
 754:	ldrb	w0, [x4], #1
 758:	orr	x1, x1, x0
 75c:	cmp	x5, x4
 760:	b.hi	754 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x6c>  // b.pmore
 764:	cmp	x1, #0x0
 768:	cset	w0, eq  // eq = none
 76c:	ret
 770:	str	x30, [sp, #-16]!
 774:	mov	x4, x2
 778:	mov	x3, x1
 77c:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 780:	add	x2, x2, #0x0
 784:	mov	w1, #0x104                 	// #260
 788:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 78c:	add	x0, x0, #0x0
 790:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_libignore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>:
   0:	str	x30, [sp, #-16]!
   4:	add	x0, x0, #0x4, lsl #12
   8:	add	x0, x0, #0x810
   c:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
  10:	ldr	x30, [sp], #16
  14:	ret

0000000000000018 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc>:
  18:	stp	x19, x20, [sp, #-48]!
  1c:	stp	x21, x22, [sp, #16]
  20:	str	x30, [sp, #32]
  24:	mov	x20, x0
  28:	mov	x21, x1
  2c:	add	x22, x0, #0x4, lsl #12
  30:	add	x22, x22, #0x810
  34:	mov	x0, x22
  38:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  3c:	ldr	x19, [x20, #18536]
  40:	cmp	x19, #0x3ff
  44:	b.hi	88 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc+0x70>  // b.pmore
  48:	add	x0, x19, #0x1
  4c:	str	x0, [x20, #18536]
  50:	mov	x0, x21
  54:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  58:	add	x1, x20, x19, lsl #5
  5c:	str	x0, [x1, #18544]
  60:	str	xzr, [x1, #18552]
  64:	str	xzr, [x1, #18560]
  68:	add	x1, x1, #0x4, lsl #12
  6c:	strb	wzr, [x1, #2184]
  70:	mov	x0, x22
  74:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
  78:	ldp	x21, x22, [sp, #16]
  7c:	ldr	x30, [sp, #32]
  80:	ldp	x19, x20, [sp], #48
  84:	ret
  88:	mov	x2, #0x400                 	// #1024
  8c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  90:	ldr	x0, [x0]
  94:	ldr	x1, [x0]
  98:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  a4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000000a8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>:
  a8:	stp	x19, x20, [sp, #-176]!
  ac:	str	x30, [sp, #80]
  b0:	mov	x20, x0
  b4:	mov	x19, x1
  b8:	add	x0, x0, #0x4, lsl #12
  bc:	add	x0, x0, #0x810
  c0:	str	x0, [sp, #120]
  c4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  c8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  cc:	ldr	x0, [x0]
  d0:	ldr	x0, [x0]
  d4:	cbz	x0, 190 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xe8>
  d8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  dc:	ldr	x0, [x0]
  e0:	ldr	x0, [x0]
  e4:	sub	x1, x0, #0x1
  e8:	ands	x1, x1, x0
  ec:	str	x1, [sp, #96]
  f0:	b.ne	1a4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xfc>  // b.any
  f4:	stp	x27, x28, [sp, #64]
  f8:	add	x28, x0, #0xfff
  fc:	neg	x0, x0
 100:	and	x28, x28, x0
 104:	mov	w2, #0x0                   	// #0
 108:	adrp	x1, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 10c:	add	x1, x1, #0x0
 110:	mov	x0, x28
 114:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 118:	mov	x27, x0
 11c:	mov	x2, #0x0                   	// #0
 120:	mov	x1, #0x0                   	// #0
 124:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 128:	mov	x1, #0x0                   	// #0
 12c:	mov	x0, #0x0                   	// #0
 130:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 134:	cmp	x28, #0xfff
 138:	b.ls	1c4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x11c>  // b.plast
 13c:	mov	x2, #0x1000                	// #4096
 140:	mov	w1, #0x0                   	// #0
 144:	mov	x0, x27
 148:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 14c:	strb	wzr, [x27]
 150:	cbz	x19, 2bc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x214>
 154:	mov	x2, #0xfff                 	// #4095
 158:	mov	x1, x27
 15c:	mov	x0, x19
 160:	bl	0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>
 164:	cbz	x0, 2bc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x214>
 168:	ldrb	w0, [x27]
 16c:	cbz	w0, 2bc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x214>
 170:	ldr	x0, [x20, #18536]
 174:	cbz	x0, 2bc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x214>
 178:	stp	x21, x22, [sp, #16]
 17c:	stp	x23, x24, [sp, #32]
 180:	add	x21, x20, #0x4, lsl #12
 184:	add	x21, x21, #0x870
 188:	ldr	x22, [sp, #96]
 18c:	b	280 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1d8>
 190:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 194:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 198:	ldr	x1, [x1]
 19c:	str	x0, [x1]
 1a0:	b	d8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x30>
 1a4:	stp	x21, x22, [sp, #16]
 1a8:	stp	x23, x24, [sp, #32]
 1ac:	stp	x25, x26, [sp, #48]
 1b0:	stp	x27, x28, [sp, #64]
 1b4:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 1b8:	add	x0, x0, #0x0
 1bc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1c0:	bl	0 <_ZN11__sanitizer3DieEv>
 1c4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1c8:	ldr	x0, [x0]
 1cc:	ldr	x0, [x0]
 1d0:	cbz	x0, 23c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x194>
 1d4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1d8:	ldr	x0, [x0]
 1dc:	ldr	x0, [x0]
 1e0:	sub	x1, x0, #0x1
 1e4:	tst	x1, x0
 1e8:	b.ne	250 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1a8>  // b.any
 1ec:	stp	x21, x22, [sp, #16]
 1f0:	add	x21, x0, #0xfff
 1f4:	neg	x0, x0
 1f8:	and	x21, x21, x0
 1fc:	mov	w2, #0x0                   	// #0
 200:	adrp	x1, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 204:	add	x1, x1, #0x0
 208:	mov	x0, x21
 20c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 210:	mov	x22, x0
 214:	mov	x2, #0x0                   	// #0
 218:	mov	x1, x27
 21c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 220:	mov	x1, x28
 224:	mov	x0, x27
 228:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 22c:	mov	x28, x21
 230:	mov	x27, x22
 234:	ldp	x21, x22, [sp, #16]
 238:	b	13c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x94>
 23c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 240:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 244:	ldr	x1, [x1]
 248:	str	x0, [x1]
 24c:	b	1d4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x12c>
 250:	stp	x21, x22, [sp, #16]
 254:	stp	x23, x24, [sp, #32]
 258:	stp	x25, x26, [sp, #48]
 25c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 260:	add	x0, x0, #0x0
 264:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 268:	bl	0 <_ZN11__sanitizer3DieEv>
 26c:	add	x22, x22, #0x1
 270:	add	x21, x21, #0x20
 274:	ldr	x0, [x20, #18536]
 278:	cmp	x0, x22
 27c:	b.ls	2b4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x20c>  // b.plast
 280:	ldrb	w0, [x21, #24]
 284:	cbnz	w0, 26c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c4>
 288:	ldr	x0, [x21, #16]
 28c:	cbnz	x0, 26c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c4>
 290:	mov	x1, x19
 294:	ldr	x0, [x21]
 298:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 29c:	and	w0, w0, #0xff
 2a0:	cbz	w0, 26c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c4>
 2a4:	mov	x0, x27
 2a8:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2ac:	str	x0, [x21, #16]
 2b0:	b	26c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c4>
 2b4:	ldp	x21, x22, [sp, #16]
 2b8:	ldp	x23, x24, [sp, #32]
 2bc:	strb	wzr, [sp, #168]
 2c0:	add	x0, sp, #0x90
 2c4:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 2c8:	ldr	x0, [x20, #18536]
 2cc:	cbnz	x0, 314 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x26c>
 2d0:	add	x0, x20, #0xc, lsl #12
 2d4:	ldrb	w0, [x0, #2160]
 2d8:	cbz	w0, 630 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x588>
 2dc:	stp	x21, x22, [sp, #16]
 2e0:	ldr	x21, [sp, #144]
 2e4:	ldr	x22, [sp, #160]
 2e8:	add	x22, x22, x22, lsl #3
 2ec:	add	x22, x21, x22, lsl #3
 2f0:	cmp	x22, x21
 2f4:	b.eq	680 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x5d8>  // b.none
 2f8:	stp	x23, x24, [sp, #32]
 2fc:	stp	x25, x26, [sp, #48]
 300:	adrp	x23, 0 <_ZN11__sanitizer17current_verbosityE>
 304:	ldr	x23, [x23]
 308:	adrp	x25, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 30c:	add	x25, x25, #0x0
 310:	b	60c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x564>
 314:	stp	x21, x22, [sp, #16]
 318:	stp	x23, x24, [sp, #32]
 31c:	stp	x25, x26, [sp, #48]
 320:	add	x25, x20, #0x4, lsl #12
 324:	add	x25, x25, #0x870
 328:	ldr	x0, [sp, #96]
 32c:	str	x0, [sp, #136]
 330:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 334:	ldr	x0, [x0]
 338:	str	x0, [sp, #112]
 33c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 340:	add	x0, x0, #0x0
 344:	str	x0, [sp, #128]
 348:	ldr	x22, [sp, #144]
 34c:	ldr	x0, [sp, #160]
 350:	add	x0, x0, x0, lsl #3
 354:	add	x0, x22, x0, lsl #3
 358:	str	x0, [sp, #104]
 35c:	cmp	x22, x0
 360:	b.eq	484 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3dc>  // b.none
 364:	mov	w24, #0x0                   	// #0
 368:	b	474 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3cc>
 36c:	ldr	x0, [sp, #136]
 370:	add	x20, x20, x0, lsl #5
 374:	ldr	x4, [x26]
 378:	ldr	x3, [x20, #18552]
 37c:	ldr	x2, [x20, #18544]
 380:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 384:	ldr	x0, [x0]
 388:	ldr	x1, [x0]
 38c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 390:	add	x0, x0, #0x0
 394:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 398:	bl	0 <_ZN11__sanitizer3DieEv>
 39c:	ldr	x2, [x26]
 3a0:	ldr	x1, [x23]
 3a4:	ldr	x0, [sp, #128]
 3a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3ac:	b	420 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x378>
 3b0:	mov	x4, #0x80                  	// #128
 3b4:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 3b8:	add	x2, x2, #0x0
 3bc:	mov	w1, #0x52                  	// #82
 3c0:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 3c4:	add	x0, x0, #0x0
 3c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3cc:	ldr	x19, [x19]
 3d0:	cbz	x19, 464 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3bc>
 3d4:	ldrb	w21, [x19, #24]
 3d8:	cbz	w21, 3cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x324>
 3dc:	mov	x23, x25
 3e0:	ldr	x1, [x26]
 3e4:	ldr	x0, [x25]
 3e8:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 3ec:	and	w0, w0, #0xff
 3f0:	cbnz	w0, 408 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x360>
 3f4:	ldr	x0, [x25, #16]
 3f8:	cbz	x0, 3cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x324>
 3fc:	ldr	x1, [x26]
 400:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 404:	cbnz	w0, 3cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x324>
 408:	cbnz	w24, 36c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2c4>
 40c:	ldrb	w24, [x23, #24]
 410:	cbnz	w24, 3cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x324>
 414:	ldr	x0, [sp, #112]
 418:	ldr	w0, [x0]
 41c:	cbnz	w0, 39c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2f4>
 420:	mov	w0, #0x1                   	// #1
 424:	strb	w0, [x23, #24]
 428:	ldr	x0, [x26]
 42c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 430:	str	x0, [x23, #8]
 434:	ldr	x3, [x20]
 438:	cmp	x3, #0x7f
 43c:	b.hi	3b0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x308>  // b.pmore
 440:	ldr	x1, [x19, #8]
 444:	add	x0, x20, x3, lsl #4
 448:	str	x1, [x0, #8]
 44c:	ldr	x1, [x19, #16]
 450:	str	x1, [x0, #16]
 454:	add	x3, x3, #0x1
 458:	dmb	ish
 45c:	str	x3, [x20]
 460:	mov	w24, w21
 464:	add	x22, x22, #0x48
 468:	ldr	x0, [sp, #104]
 46c:	cmp	x0, x22
 470:	b.eq	488 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3e0>  // b.none
 474:	mov	x26, x22
 478:	ldr	x19, [x22, #56]
 47c:	cbnz	x19, 3d4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x32c>
 480:	b	464 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3bc>
 484:	mov	w24, #0x0                   	// #0
 488:	ldrb	w0, [x25, #24]
 48c:	eor	w0, w0, #0x1
 490:	orr	w24, w24, w0
 494:	tst	w24, #0xff
 498:	b.eq	4cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x424>  // b.none
 49c:	ldr	x0, [sp, #136]
 4a0:	add	x0, x0, #0x1
 4a4:	mov	x1, x0
 4a8:	str	x0, [sp, #136]
 4ac:	add	x25, x25, #0x20
 4b0:	ldr	x0, [x20, #18536]
 4b4:	cmp	x0, x1
 4b8:	b.hi	348 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2a0>  // b.pmore
 4bc:	ldp	x21, x22, [sp, #16]
 4c0:	ldp	x23, x24, [sp, #32]
 4c4:	ldp	x25, x26, [sp, #48]
 4c8:	b	2d0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x228>
 4cc:	ldr	x0, [sp, #136]
 4d0:	add	x20, x20, x0, lsl #5
 4d4:	ldr	x3, [x20, #18544]
 4d8:	ldr	x2, [x20, #18552]
 4dc:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 4e0:	ldr	x0, [x0]
 4e4:	ldr	x1, [x0]
 4e8:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 4ec:	add	x0, x0, #0x0
 4f0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4f4:	bl	0 <_ZN11__sanitizer3DieEv>
 4f8:	add	x1, x1, #0x1
 4fc:	add	x0, x0, #0x10
 500:	cmp	x4, x1
 504:	b.eq	568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c0>  // b.none
 508:	ldr	x2, [x0]
 50c:	cmp	x3, x2
 510:	b.cc	4f8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x450>  // b.lo, b.ul, b.last
 514:	ldr	x2, [x0, #8]
 518:	cmp	x3, x2
 51c:	b.cs	4f8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x450>  // b.hs, b.nlast
 520:	ldr	x1, [x19, #16]
 524:	sub	x1, x1, #0x1
 528:	ldr	x3, [x20, #2056]
 52c:	dmb	ish
 530:	cbz	x3, 568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c0>
 534:	ldr	x0, [sp, #96]
 538:	b	54c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4a4>
 53c:	add	x0, x0, #0x1
 540:	add	x5, x5, #0x10
 544:	cmp	x3, x0
 548:	b.eq	568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c0>  // b.none
 54c:	ldr	x2, [x5]
 550:	cmp	x1, x2
 554:	b.cc	53c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>  // b.lo, b.ul, b.last
 558:	ldr	x2, [x5, #8]
 55c:	cmp	x1, x2
 560:	b.cc	59c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4f4>  // b.lo, b.ul, b.last
 564:	b	53c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>
 568:	ldr	w0, [x23]
 56c:	cbnz	w0, 5cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x524>
 570:	ldr	x3, [x20, #2056]
 574:	cmp	x3, #0x3ff
 578:	b.hi	5e4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x53c>  // b.pmore
 57c:	ldr	x1, [x19, #8]
 580:	add	x0, x20, x3, lsl #4
 584:	str	x1, [x0, #2064]
 588:	ldr	x1, [x19, #16]
 58c:	str	x1, [x0, #2072]
 590:	add	x3, x3, #0x1
 594:	dmb	ish
 598:	str	x3, [x20, #2056]
 59c:	ldr	x19, [x19]
 5a0:	cbz	x19, 600 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x558>
 5a4:	ldrb	w0, [x19, #24]
 5a8:	cbz	w0, 59c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4f4>
 5ac:	ldr	x3, [x19, #8]
 5b0:	ldr	x4, [x20, #2056]
 5b4:	dmb	ish
 5b8:	cbz	x4, 568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c0>
 5bc:	add	x5, x20, #0x810
 5c0:	mov	x0, x5
 5c4:	ldr	x1, [sp, #96]
 5c8:	b	508 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 5cc:	ldr	x3, [x24]
 5d0:	ldr	x2, [x19, #16]
 5d4:	ldr	x1, [x19, #8]
 5d8:	mov	x0, x25
 5dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5e0:	b	570 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c8>
 5e4:	mov	x4, #0x400                 	// #1024
 5e8:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5ec:	add	x2, x2, #0x0
 5f0:	mov	w1, #0x6f                  	// #111
 5f4:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5f8:	add	x0, x0, #0x0
 5fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 600:	add	x21, x21, #0x48
 604:	cmp	x22, x21
 608:	b.eq	624 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x57c>  // b.none
 60c:	mov	x24, x21
 610:	ldrb	w0, [x21, #44]
 614:	cbz	w0, 600 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x558>
 618:	ldr	x19, [x21, #56]
 61c:	cbnz	x19, 5a4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4fc>
 620:	b	600 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x558>
 624:	ldp	x21, x22, [sp, #16]
 628:	ldp	x23, x24, [sp, #32]
 62c:	ldp	x25, x26, [sp, #48]
 630:	ldr	x19, [sp, #144]
 634:	ldr	x20, [sp, #160]
 638:	add	x20, x20, x20, lsl #3
 63c:	add	x20, x19, x20, lsl #3
 640:	cmp	x19, x20
 644:	b.eq	65c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x5b4>  // b.none
 648:	mov	x0, x19
 64c:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 650:	add	x19, x19, #0x48
 654:	cmp	x20, x19
 658:	b.ne	648 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x5a0>  // b.any
 65c:	mov	x1, x28
 660:	mov	x0, x27
 664:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 668:	ldr	x0, [sp, #120]
 66c:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 670:	ldp	x27, x28, [sp, #64]
 674:	ldr	x30, [sp, #80]
 678:	ldp	x19, x20, [sp], #176
 67c:	ret
 680:	ldp	x21, x22, [sp, #16]
 684:	b	65c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x5b4>

0000000000000688 <_ZN11__sanitizer9LibIgnore17OnLibraryUnloadedEv>:
 688:	str	x30, [sp, #-16]!
 68c:	mov	x1, #0x0                   	// #0
 690:	bl	a8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>
 694:	ldr	x30, [sp], #16
 698:	ret

sanitizer_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>:
       0:	stp	x19, x20, [sp, #-64]!
       4:	stp	x21, x30, [sp, #16]
       8:	mov	x21, x0
       c:	mov	x20, x1
      10:	mov	w19, w2
      14:	mov	w2, #0x0                   	// #0
      18:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
      1c:	add	x1, x1, #0x0
      20:	sbfiz	x0, x19, #3, #32
      24:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      28:	str	x0, [x20]
      2c:	mov	x5, #0x0                   	// #0
      30:	mov	x4, #0x100000              	// #1048576
      34:	add	x3, sp, #0x28
      38:	add	x2, sp, #0x30
      3c:	add	x1, sp, #0x38
      40:	mov	x0, x21
      44:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
      48:	and	w0, w0, #0xff
      4c:	cbz	w0, 70 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0x70>
      50:	ldr	x0, [x20]
      54:	ldr	x1, [sp, #56]
      58:	str	x1, [x0]
      5c:	mov	x0, #0x1                   	// #1
      60:	mov	w6, w0
      64:	sub	w5, w19, #0x1
      68:	sxtw	x5, w5
      6c:	b	8c <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0x8c>
      70:	ldr	x0, [x20]
      74:	str	xzr, [x0]
      78:	ldp	x21, x30, [sp, #16]
      7c:	ldp	x19, x20, [sp], #64
      80:	ret
      84:	add	w6, w6, #0x1
      88:	add	x0, x0, #0x1
      8c:	ldr	x2, [sp, #56]
      90:	ldrb	w3, [x2, x0]
      94:	cbnz	w3, 88 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0x88>
      98:	add	x3, x0, #0x1
      9c:	add	x4, x2, x3
      a0:	ldrb	w1, [x2, x3]
      a4:	cbz	w1, d8 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0xd8>
      a8:	sxtw	x3, w6
      ac:	ldr	x1, [x20]
      b0:	str	x4, [x1, x3, lsl #3]
      b4:	mov	x4, x5
      b8:	cmp	x3, x5
      bc:	b.ls	84 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0x84>  // b.plast
      c0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
      c4:	add	x2, x2, #0x0
      c8:	mov	w1, #0x23f                 	// #575
      cc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
      d0:	add	x0, x0, #0x0
      d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      d8:	ldr	x0, [x20]
      dc:	str	xzr, [x0, w6, sxtw #3]
      e0:	b	78 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci+0x78>

00000000000000e4 <_ZN11__sanitizerL13GetArgsAndEnvEPPPcS2_>:
      e4:	stp	x19, x30, [sp, #-16]!
      e8:	mov	x19, x1
      ec:	adrp	x2, 0 <__libc_stack_end>
      f0:	ldr	x2, [x2]
      f4:	cbz	x2, 11c <_ZN11__sanitizerL13GetArgsAndEnvEPPPcS2_+0x38>
      f8:	ldr	x3, [x2]
      fc:	mov	x1, x3
     100:	ldr	x2, [x1], #8
     104:	str	x1, [x0]
     108:	add	x0, x3, w2, sxtw #3
     10c:	add	x0, x0, #0x10
     110:	str	x0, [x19]
     114:	ldp	x19, x30, [sp], #16
     118:	ret
     11c:	mov	w2, #0x7d0                 	// #2000
     120:	mov	x1, x0
     124:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     128:	add	x0, x0, #0x0
     12c:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     130:	mov	w2, #0x7d0                 	// #2000
     134:	mov	x1, x19
     138:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     13c:	add	x0, x0, #0x0
     140:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     144:	b	114 <_ZN11__sanitizerL13GetArgsAndEnvEPPPcS2_+0x30>

0000000000000148 <_ZN11__sanitizer16internal_iserrorEmPi>:
     148:	mov	x2, x0
     14c:	mov	w0, #0x0                   	// #0
     150:	cmn	x2, #0x1, lsl #12
     154:	b.hi	15c <_ZN11__sanitizer16internal_iserrorEmPi+0x14>  // b.pmore
     158:	ret
     15c:	mov	w0, #0x1                   	// #1
     160:	cbz	x1, 158 <_ZN11__sanitizer16internal_iserrorEmPi+0x10>
     164:	neg	w2, w2
     168:	str	w2, [x1]
     16c:	b	158 <_ZN11__sanitizer16internal_iserrorEmPi+0x10>

0000000000000170 <_ZN11__sanitizer13internal_mmapEPvmiiim>:
     170:	mov	x8, #0xde                  	// #222
     174:	sxtw	x2, w2
     178:	sxtw	x3, w3
     17c:	sxtw	x4, w4
     180:	svc	#0x0
     184:	ret

0000000000000188 <_ZN11__sanitizer15internal_munmapEPvm>:
     188:	mov	x8, #0xd7                  	// #215
     18c:	svc	#0x0
     190:	ret

0000000000000194 <_ZN11__sanitizer17internal_mprotectEPvmi>:
     194:	mov	x8, #0xe2                  	// #226
     198:	sxtw	x2, w2
     19c:	svc	#0x0
     1a0:	ret

00000000000001a4 <_ZN11__sanitizer14internal_closeEi>:
     1a4:	mov	x8, #0x39                  	// #57
     1a8:	sxtw	x0, w0
     1ac:	svc	#0x0
     1b0:	ret

00000000000001b4 <_ZN11__sanitizer13internal_openEPKci>:
     1b4:	mov	x3, x0
     1b8:	mov	w2, w1
     1bc:	mov	x8, #0x38                  	// #56
     1c0:	mov	x0, #0xffffffffffffff9c    	// #-100
     1c4:	mov	x1, x3
     1c8:	sxtw	x2, w2
     1cc:	svc	#0x0
     1d0:	ret

00000000000001d4 <_ZN11__sanitizer13internal_openEPKcij>:
     1d4:	mov	x5, x0
     1d8:	mov	w4, w1
     1dc:	mov	w3, w2
     1e0:	mov	x8, #0x38                  	// #56
     1e4:	mov	x0, #0xffffffffffffff9c    	// #-100
     1e8:	mov	x1, x5
     1ec:	sxtw	x2, w4
     1f0:	mov	w3, w3
     1f4:	svc	#0x0
     1f8:	ret

00000000000001fc <_ZN11__sanitizer13internal_readEiPvm>:
     1fc:	sxtw	x3, w0
     200:	mov	x8, #0x3f                  	// #63
     204:	b	210 <_ZN11__sanitizer13internal_readEiPvm+0x14>
     208:	cmn	w0, #0x4
     20c:	b.ne	220 <_ZN11__sanitizer13internal_readEiPvm+0x24>  // b.any
     210:	mov	x0, x3
     214:	svc	#0x0
     218:	cmn	x0, #0x1, lsl #12
     21c:	b.hi	208 <_ZN11__sanitizer13internal_readEiPvm+0xc>  // b.pmore
     220:	ret

0000000000000224 <_ZN11__sanitizer14internal_writeEiPKvm>:
     224:	sxtw	x3, w0
     228:	mov	x8, #0x40                  	// #64
     22c:	b	238 <_ZN11__sanitizer14internal_writeEiPKvm+0x14>
     230:	cmn	w0, #0x4
     234:	b.ne	248 <_ZN11__sanitizer14internal_writeEiPKvm+0x24>  // b.any
     238:	mov	x0, x3
     23c:	svc	#0x0
     240:	cmn	x0, #0x1, lsl #12
     244:	b.hi	230 <_ZN11__sanitizer14internal_writeEiPKvm+0xc>  // b.pmore
     248:	ret

000000000000024c <_ZN11__sanitizer18internal_ftruncateEim>:
     24c:	sxtw	x2, w0
     250:	mov	x8, #0x2e                  	// #46
     254:	b	260 <_ZN11__sanitizer18internal_ftruncateEim+0x14>
     258:	cmn	w0, #0x4
     25c:	b.ne	270 <_ZN11__sanitizer18internal_ftruncateEim+0x24>  // b.any
     260:	mov	x0, x2
     264:	svc	#0x0
     268:	cmn	x0, #0x1, lsl #12
     26c:	b.hi	258 <_ZN11__sanitizer18internal_ftruncateEim+0xc>  // b.pmore
     270:	ret

0000000000000274 <_ZN11__sanitizer13internal_statEPKcPv>:
     274:	mov	x3, x0
     278:	mov	x2, x1
     27c:	mov	x8, #0x4f                  	// #79
     280:	mov	x0, #0xffffffffffffff9c    	// #-100
     284:	mov	x1, x3
     288:	mov	x3, #0x0                   	// #0
     28c:	svc	#0x0
     290:	ret

0000000000000294 <_ZN11__sanitizer14internal_lstatEPKcPv>:
     294:	mov	x3, x0
     298:	mov	x2, x1
     29c:	mov	x8, #0x4f                  	// #79
     2a0:	mov	x0, #0xffffffffffffff9c    	// #-100
     2a4:	mov	x1, x3
     2a8:	mov	x3, #0x100                 	// #256
     2ac:	svc	#0x0
     2b0:	ret

00000000000002b4 <_ZN11__sanitizer14internal_fstatEiPv>:
     2b4:	mov	x8, #0x50                  	// #80
     2b8:	sxtw	x0, w0
     2bc:	svc	#0x0
     2c0:	ret

00000000000002c4 <_ZN11__sanitizer17internal_filesizeEi>:
     2c4:	str	x30, [sp, #-144]!
     2c8:	add	x1, sp, #0x10
     2cc:	bl	2b4 <_ZN11__sanitizer14internal_fstatEiPv>
     2d0:	cmp	x0, #0x0
     2d4:	ldr	x0, [sp, #64]
     2d8:	csinv	x0, x0, xzr, eq  // eq = none
     2dc:	ldr	x30, [sp], #144
     2e0:	ret

00000000000002e4 <_ZN11__sanitizer13internal_dup2Eii>:
     2e4:	mov	x8, #0x18                  	// #24
     2e8:	sxtw	x0, w0
     2ec:	sxtw	x1, w1
     2f0:	mov	x2, #0x0                   	// #0
     2f4:	svc	#0x0
     2f8:	ret

00000000000002fc <_ZN11__sanitizer17internal_readlinkEPKcPcm>:
     2fc:	mov	x5, x0
     300:	mov	x4, x1
     304:	mov	x3, x2
     308:	mov	x8, #0x4e                  	// #78
     30c:	mov	x0, #0xffffffffffffff9c    	// #-100
     310:	mov	x1, x5
     314:	mov	x2, x4
     318:	svc	#0x0
     31c:	ret

0000000000000320 <_ZN11__sanitizer15internal_unlinkEPKc>:
     320:	mov	x1, x0
     324:	mov	x8, #0x23                  	// #35
     328:	mov	x0, #0xffffffffffffff9c    	// #-100
     32c:	mov	x2, #0x0                   	// #0
     330:	svc	#0x0
     334:	ret

0000000000000338 <_ZN11__sanitizer15internal_renameEPKcS1_>:
     338:	mov	x2, x0
     33c:	mov	x3, x1
     340:	mov	x8, #0x26                  	// #38
     344:	mov	x0, #0xffffffffffffff9c    	// #-100
     348:	mov	x1, x2
     34c:	mov	x2, x0
     350:	svc	#0x0
     354:	ret

0000000000000358 <_ZN11__sanitizer20internal_sched_yieldEv>:
     358:	mov	x8, #0x7c                  	// #124
     35c:	svc	#0x0
     360:	ret

0000000000000364 <_ZN11__sanitizer14internal__exitEi>:
     364:	str	x30, [sp, #-16]!
     368:	mov	x8, #0x5e                  	// #94
     36c:	sxtw	x0, w0
     370:	svc	#0x0
     374:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000378 <_ZN11__sanitizer14internal_sleepEj>:
     378:	sub	sp, sp, #0x10
     37c:	mov	x0, #0x1                   	// #1
     380:	str	x0, [sp]
     384:	str	xzr, [sp, #8]
     388:	mov	x1, sp
     38c:	mov	x8, #0x65                  	// #101
     390:	mov	x0, x1
     394:	svc	#0x0
     398:	cmp	w0, #0x0
     39c:	ldr	w0, [sp]
     3a0:	csel	w0, w0, wzr, ne  // ne = any
     3a4:	add	sp, sp, #0x10
     3a8:	ret

00000000000003ac <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>:
     3ac:	mov	x8, #0xdd                  	// #221
     3b0:	svc	#0x0
     3b4:	ret

00000000000003b8 <_ZN11__sanitizer10FileExistsEPKc>:
     3b8:	sub	sp, sp, #0x80
     3bc:	mov	x1, x0
     3c0:	mov	x8, #0x4f                  	// #79
     3c4:	mov	x0, #0xffffffffffffff9c    	// #-100
     3c8:	mov	x2, sp
     3cc:	mov	x3, #0x0                   	// #0
     3d0:	svc	#0x0
     3d4:	cbnz	x0, 3f0 <_ZN11__sanitizer10FileExistsEPKc+0x38>
     3d8:	ldr	w0, [sp, #16]
     3dc:	and	w0, w0, #0xf000
     3e0:	cmp	w0, #0x8, lsl #12
     3e4:	cset	w0, eq  // eq = none
     3e8:	add	sp, sp, #0x80
     3ec:	ret
     3f0:	mov	w0, #0x0                   	// #0
     3f4:	b	3e8 <_ZN11__sanitizer10FileExistsEPKc+0x30>

00000000000003f8 <_ZN11__sanitizer6GetTidEv>:
     3f8:	mov	x8, #0xb2                  	// #178
     3fc:	svc	#0x0
     400:	ret

0000000000000404 <_ZN11__sanitizer6TgKillEiyi>:
     404:	mov	x8, #0x83                  	// #131
     408:	sxtw	x0, w0
     40c:	sxtw	x2, w2
     410:	svc	#0x0
     414:	ret

0000000000000418 <_ZN11__sanitizer8NanoTimeEv>:
     418:	stp	x19, x30, [sp, #-32]!
     41c:	add	x19, sp, #0x10
     420:	mov	x2, #0x10                  	// #16
     424:	mov	w1, #0x0                   	// #0
     428:	mov	x0, x19
     42c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     430:	mov	x8, #0xa9                  	// #169
     434:	mov	x0, x19
     438:	mov	x1, #0x0                   	// #0
     43c:	svc	#0x0
     440:	ldr	x0, [sp, #24]
     444:	lsl	x1, x0, #5
     448:	sub	x1, x1, x0
     44c:	add	x1, x0, x1, lsl #2
     450:	lsl	x1, x1, #3
     454:	ldr	x2, [sp, #16]
     458:	mov	x0, #0xca00                	// #51712
     45c:	movk	x0, #0x3b9a, lsl #16
     460:	madd	x0, x2, x0, x1
     464:	ldp	x19, x30, [sp], #32
     468:	ret

000000000000046c <_ZN11__sanitizer22internal_clock_gettimeEiPv>:
     46c:	mov	x8, #0x71                  	// #113
     470:	sxtw	x0, w0
     474:	svc	#0x0
     478:	ret

000000000000047c <_ZN11__sanitizer6GetEnvEPKc>:
     47c:	stp	x19, x20, [sp, #-64]!
     480:	stp	x23, x30, [sp, #32]
     484:	mov	x23, x0
     488:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     48c:	ldrb	w0, [x0]
     490:	cbz	w0, 4dc <_ZN11__sanitizer6GetEnvEPKc+0x60>
     494:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     498:	ldr	x19, [x0]
     49c:	cbz	x19, 59c <_ZN11__sanitizer6GetEnvEPKc+0x120>
     4a0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     4a4:	ldr	x0, [x0]
     4a8:	mov	x19, #0x0                   	// #0
     4ac:	cbz	x0, 59c <_ZN11__sanitizer6GetEnvEPKc+0x120>
     4b0:	stp	x21, x22, [sp, #16]
     4b4:	mov	x0, x23
     4b8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     4bc:	mov	x22, x0
     4c0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     4c4:	ldr	x20, [x0]
     4c8:	ldrb	w0, [x20]
     4cc:	cbz	w0, 58c <_ZN11__sanitizer6GetEnvEPKc+0x110>
     4d0:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     4d4:	add	x21, x21, #0x0
     4d8:	b	52c <_ZN11__sanitizer6GetEnvEPKc+0xb0>
     4dc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     4e0:	add	x1, x0, #0x0
     4e4:	mov	w2, #0x1                   	// #1
     4e8:	strb	w2, [x0]
     4ec:	mov	x5, #0x0                   	// #0
     4f0:	mov	x4, #0x4000000             	// #67108864
     4f4:	add	x3, x1, #0x8
     4f8:	add	x2, sp, #0x38
     4fc:	add	x1, x1, #0x10
     500:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     504:	add	x0, x0, #0x0
     508:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
     50c:	and	w0, w0, #0xff
     510:	cbnz	w0, 494 <_ZN11__sanitizer6GetEnvEPKc+0x18>
     514:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     518:	str	xzr, [x0]
     51c:	b	494 <_ZN11__sanitizer6GetEnvEPKc+0x18>
     520:	add	x20, x19, #0x1
     524:	ldrb	w0, [x19, #1]
     528:	cbz	w0, 580 <_ZN11__sanitizer6GetEnvEPKc+0x104>
     52c:	ldr	x1, [x21, #16]
     530:	sub	x1, x20, x1
     534:	ldr	x2, [x21, #8]
     538:	sub	x2, x2, x1
     53c:	mov	w1, #0x0                   	// #0
     540:	mov	x0, x20
     544:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
     548:	mov	x19, x0
     54c:	cbz	x0, 598 <_ZN11__sanitizer6GetEnvEPKc+0x11c>
     550:	mov	x2, x22
     554:	mov	x1, x23
     558:	mov	x0, x20
     55c:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
     560:	cbnz	w0, 520 <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     564:	ldrb	w0, [x20, x22]
     568:	cmp	w0, #0x3d
     56c:	b.ne	520 <_ZN11__sanitizer6GetEnvEPKc+0xa4>  // b.any
     570:	add	x19, x22, #0x1
     574:	add	x19, x20, x19
     578:	ldp	x21, x22, [sp, #16]
     57c:	b	59c <_ZN11__sanitizer6GetEnvEPKc+0x120>
     580:	mov	x19, #0x0                   	// #0
     584:	ldp	x21, x22, [sp, #16]
     588:	b	59c <_ZN11__sanitizer6GetEnvEPKc+0x120>
     58c:	mov	x19, #0x0                   	// #0
     590:	ldp	x21, x22, [sp, #16]
     594:	b	59c <_ZN11__sanitizer6GetEnvEPKc+0x120>
     598:	ldp	x21, x22, [sp, #16]
     59c:	mov	x0, x19
     5a0:	ldp	x23, x30, [sp, #32]
     5a4:	ldp	x19, x20, [sp], #64
     5a8:	ret

00000000000005ac <_ZN11__sanitizer7GetArgvEv>:
     5ac:	str	x30, [sp, #-32]!
     5b0:	add	x1, sp, #0x10
     5b4:	add	x0, sp, #0x18
     5b8:	bl	e4 <_ZN11__sanitizerL13GetArgsAndEnvEPPPcS2_>
     5bc:	ldr	x0, [sp, #24]
     5c0:	ldr	x30, [sp], #32
     5c4:	ret

00000000000005c8 <_ZN11__sanitizer6ReExecEv>:
     5c8:	str	x30, [sp, #-32]!
     5cc:	add	x1, sp, #0x10
     5d0:	add	x0, sp, #0x18
     5d4:	bl	e4 <_ZN11__sanitizerL13GetArgsAndEnvEPPPcS2_>
     5d8:	ldr	x2, [sp, #16]
     5dc:	ldr	x1, [sp, #24]
     5e0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     5e4:	add	x0, x0, #0x0
     5e8:	bl	3ac <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>
     5ec:	cmn	x0, #0x1, lsl #12
     5f0:	b.hi	614 <_ZN11__sanitizer6ReExecEv+0x4c>  // b.pmore
     5f4:	mov	x4, #0x1                   	// #1
     5f8:	mov	x3, #0x0                   	// #0
     5fc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     600:	add	x2, x2, #0x0
     604:	mov	w1, #0x286                 	// #646
     608:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     60c:	add	x0, x0, #0x0
     610:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     614:	neg	w1, w0
     618:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     61c:	add	x0, x0, #0x0
     620:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     624:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000628 <_ZN11__sanitizer13BlockingMutexC1Ev>:
     628:	str	x30, [sp, #-16]!
     62c:	mov	x2, #0x58                  	// #88
     630:	mov	w1, #0x0                   	// #0
     634:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     638:	ldr	x30, [sp], #16
     63c:	ret

0000000000000640 <_ZN11__sanitizer13BlockingMutex4LockEv>:
     640:	ldr	x3, [x0, #80]
     644:	mov	x6, x0
     648:	mov	w1, #0x1                   	// #1
     64c:	cbnz	x3, 6a0 <_ZN11__sanitizer13BlockingMutex4LockEv+0x60>
     650:	ldxr	w0, [x6]
     654:	stxr	w2, w1, [x6]
     658:	cbnz	w2, 650 <_ZN11__sanitizer13BlockingMutex4LockEv+0x10>
     65c:	dmb	ish
     660:	cbz	w0, 6c0 <_ZN11__sanitizer13BlockingMutex4LockEv+0x80>
     664:	mov	w7, #0x2                   	// #2
     668:	mov	x8, #0x62                  	// #98
     66c:	mov	x1, #0x80                  	// #128
     670:	mov	x2, #0x2                   	// #2
     674:	ldxr	w0, [x6]
     678:	stxr	w3, w7, [x6]
     67c:	cbnz	w3, 674 <_ZN11__sanitizer13BlockingMutex4LockEv+0x34>
     680:	dmb	ish
     684:	cbz	w0, 6c0 <_ZN11__sanitizer13BlockingMutex4LockEv+0x80>
     688:	mov	x0, x6
     68c:	mov	x3, #0x0                   	// #0
     690:	mov	x4, #0x0                   	// #0
     694:	mov	x5, #0x0                   	// #0
     698:	svc	#0x0
     69c:	b	674 <_ZN11__sanitizer13BlockingMutex4LockEv+0x34>
     6a0:	str	x30, [sp, #-16]!
     6a4:	mov	x4, #0x0                   	// #0
     6a8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     6ac:	add	x2, x2, #0x0
     6b0:	mov	w1, #0x298                 	// #664
     6b4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     6b8:	add	x0, x0, #0x0
     6bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6c0:	ret

00000000000006c4 <_ZN11__sanitizer13BlockingMutex6UnlockEv>:
     6c4:	dmb	ish
     6c8:	ldxr	w1, [x0]
     6cc:	stxr	w2, wzr, [x0]
     6d0:	cbnz	w2, 6c8 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x4>
     6d4:	dmb	ish
     6d8:	cbz	w1, 6e8 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x24>
     6dc:	cmp	w1, #0x2
     6e0:	b.eq	70c <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x48>  // b.none
     6e4:	ret
     6e8:	str	x30, [sp, #-16]!
     6ec:	mov	x4, #0x0                   	// #0
     6f0:	mov	x3, #0x0                   	// #0
     6f4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     6f8:	add	x2, x2, #0x0
     6fc:	mov	w1, #0x2ab                 	// #683
     700:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     704:	add	x0, x0, #0x0
     708:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     70c:	mov	x8, #0x62                  	// #98
     710:	mov	x1, #0x81                  	// #129
     714:	mov	x2, #0x1                   	// #1
     718:	mov	x3, #0x0                   	// #0
     71c:	mov	x4, #0x0                   	// #0
     720:	mov	x5, #0x0                   	// #0
     724:	svc	#0x0
     728:	b	6e4 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x20>

000000000000072c <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>:
     72c:	ldr	w0, [x0]
     730:	cbz	w0, 738 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv+0xc>
     734:	ret
     738:	str	x30, [sp, #-16]!
     73c:	mov	x4, #0x0                   	// #0
     740:	mov	x3, #0x0                   	// #0
     744:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     748:	add	x2, x2, #0x0
     74c:	mov	w1, #0x2b9                 	// #697
     750:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     754:	add	x0, x0, #0x0
     758:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000075c <_ZN11__sanitizer15internal_ptraceEiiPvS0_>:
     75c:	mov	x8, #0x75                  	// #117
     760:	sxtw	x0, w0
     764:	sxtw	x1, w1
     768:	svc	#0x0
     76c:	ret

0000000000000770 <_ZN11__sanitizer16internal_waitpidEiPii>:
     770:	mov	x8, #0x104                 	// #260
     774:	sxtw	x0, w0
     778:	sxtw	x2, w2
     77c:	mov	x3, #0x0                   	// #0
     780:	svc	#0x0
     784:	ret

0000000000000788 <_ZN11__sanitizer15internal_getpidEv>:
     788:	mov	x8, #0xac                  	// #172
     78c:	svc	#0x0
     790:	ret

0000000000000794 <_ZN11__sanitizer16internal_getppidEv>:
     794:	mov	x8, #0xad                  	// #173
     798:	svc	#0x0
     79c:	ret

00000000000007a0 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>:
     7a0:	mov	x8, #0x3d                  	// #61
     7a4:	sxtw	x0, w0
     7a8:	mov	w2, w2
     7ac:	svc	#0x0
     7b0:	ret

00000000000007b4 <_ZN11__sanitizer14internal_lseekEimi>:
     7b4:	mov	x8, #0x3e                  	// #62
     7b8:	sxtw	x0, w0
     7bc:	sxtw	x2, w2
     7c0:	svc	#0x0
     7c4:	ret

00000000000007c8 <_ZN11__sanitizer14internal_prctlEimmmm>:
     7c8:	mov	x8, #0xa7                  	// #167
     7cc:	sxtw	x0, w0
     7d0:	svc	#0x0
     7d4:	ret

00000000000007d8 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>:
     7d8:	mov	x8, #0x84                  	// #132
     7dc:	svc	#0x0
     7e0:	ret

00000000000007e4 <_ZN11__sanitizer13internal_forkEv>:
     7e4:	mov	x8, #0xdc                  	// #220
     7e8:	mov	x0, #0x11                  	// #17
     7ec:	mov	x1, #0x0                   	// #0
     7f0:	svc	#0x0
     7f4:	ret

00000000000007f8 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>:
     7f8:	stp	x19, x20, [sp, #-112]!
     7fc:	stp	x21, x22, [sp, #16]
     800:	str	x30, [sp, #32]
     804:	mov	w20, w0
     808:	mov	x19, x1
     80c:	mov	x21, x2
     810:	mov	x2, #0x20                  	// #32
     814:	mov	w1, #0x0                   	// #0
     818:	add	x0, sp, #0x50
     81c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     820:	mov	x2, #0x20                  	// #32
     824:	mov	w1, #0x0                   	// #0
     828:	add	x0, sp, #0x30
     82c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     830:	cbz	x19, 8d8 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xe0>
     834:	mov	x1, x19
     838:	ldr	x0, [x1], #8
     83c:	str	x0, [sp, #80]
     840:	add	x22, sp, #0x50
     844:	mov	x2, #0x8                   	// #8
     848:	add	x0, sp, #0x68
     84c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     850:	ldr	w0, [x19, #136]
     854:	orr	w0, w0, #0x4000000
     858:	sxtw	x0, w0
     85c:	str	x0, [sp, #88]
     860:	ldr	x0, [x19, #144]
     864:	str	x0, [sp, #96]
     868:	sxtw	x0, w20
     86c:	mov	x1, x22
     870:	cmp	x21, #0x0
     874:	mov	x8, #0x86                  	// #134
     878:	add	x2, sp, #0x30
     87c:	csel	x2, x2, xzr, ne  // ne = any
     880:	mov	x3, #0x8                   	// #8
     884:	svc	#0x0
     888:	mov	x19, x0
     88c:	cmp	x0, #0x0
     890:	ccmp	x21, #0x0, #0x4, eq  // eq = none
     894:	b.ne	8ac <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xb4>  // b.any
     898:	mov	w0, w19
     89c:	ldp	x21, x22, [sp, #16]
     8a0:	ldr	x30, [sp, #32]
     8a4:	ldp	x19, x20, [sp], #112
     8a8:	ret
     8ac:	mov	x0, x21
     8b0:	ldr	x1, [sp, #48]
     8b4:	str	x1, [x0], #8
     8b8:	mov	x2, x3
     8bc:	add	x1, sp, #0x48
     8c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     8c4:	ldr	x0, [sp, #56]
     8c8:	str	w0, [x21, #136]
     8cc:	ldr	x0, [sp, #64]
     8d0:	str	x0, [x21, #144]
     8d4:	b	898 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xa0>
     8d8:	sxtw	x0, w20
     8dc:	mov	x1, #0x0                   	// #0
     8e0:	b	870 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0x78>

00000000000008e4 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>:
     8e4:	mov	x8, #0x87                  	// #135
     8e8:	sxtw	x0, w0
     8ec:	mov	x3, #0x8                   	// #8
     8f0:	svc	#0x0
     8f4:	ret

00000000000008f8 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>:
     8f8:	str	x30, [sp, #-16]!
     8fc:	mov	x2, #0x80                  	// #128
     900:	mov	w1, #0xff                  	// #255
     904:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     908:	ldr	x30, [sp], #16
     90c:	ret

0000000000000910 <_ZN11__sanitizer20internal_sigemptysetEPNS_20__sanitizer_sigset_tE>:
     910:	str	x30, [sp, #-16]!
     914:	mov	x2, #0x80                  	// #128
     918:	mov	w1, #0x0                   	// #0
     91c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     920:	ldr	x30, [sp], #16
     924:	ret

0000000000000928 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>:
     928:	sub	w1, w1, #0x1
     92c:	sxtw	x3, w1
     930:	cmp	x3, #0x3ff
     934:	b.hi	958 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi+0x30>  // b.pmore
     938:	lsr	x3, x3, #3
     93c:	and	x1, x1, #0x7
     940:	mov	w2, #0x1                   	// #1
     944:	lsl	w1, w2, w1
     948:	ldrb	w2, [x0, x3]
     94c:	bic	w1, w2, w1
     950:	strb	w1, [x0, x3]
     954:	ret
     958:	str	x30, [sp, #-16]!
     95c:	mov	x4, #0x400                 	// #1024
     960:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     964:	add	x2, x2, #0x0
     968:	mov	w1, #0x381                 	// #897
     96c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     970:	add	x0, x0, #0x0
     974:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000978 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi>:
     978:	sub	w1, w1, #0x1
     97c:	sxtw	x3, w1
     980:	cmp	x3, #0x3ff
     984:	b.hi	9a0 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi+0x28>  // b.pmore
     988:	lsr	x3, x3, #3
     98c:	ldrb	w0, [x0, x3]
     990:	and	x1, x1, #0x7
     994:	asr	w0, w0, w1
     998:	and	w0, w0, #0x1
     99c:	ret
     9a0:	str	x30, [sp, #-16]!
     9a4:	mov	x4, #0x400                 	// #1024
     9a8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     9ac:	add	x2, x2, #0x0
     9b0:	mov	w1, #0x38b                 	// #907
     9b4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     9b8:	add	x0, x0, #0x0
     9bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009c0 <_ZN11__sanitizer12ThreadListerD1Ev>:
     9c0:	stp	x19, x30, [sp, #-16]!
     9c4:	mov	x19, x0
     9c8:	ldr	w0, [x0, #4]
     9cc:	sxtw	x1, w0
     9d0:	cmn	x1, #0x1, lsl #12
     9d4:	b.ls	9ec <_ZN11__sanitizer12ThreadListerD1Ev+0x2c>  // b.plast
     9d8:	ldr	x1, [x19, #16]
     9dc:	ldr	x0, [x19, #8]
     9e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     9e4:	ldp	x19, x30, [sp], #16
     9e8:	ret
     9ec:	bl	1a4 <_ZN11__sanitizer14internal_closeEi>
     9f0:	b	9d8 <_ZN11__sanitizer12ThreadListerD1Ev+0x18>

00000000000009f4 <_ZN11__sanitizer20GetMaxVirtualAddressEv>:
     9f4:	stp	x29, x30, [sp, #-16]!
     9f8:	mov	x29, sp
     9fc:	clz	x0, x29
     a00:	neg	w1, w0
     a04:	mov	x0, #0x1                   	// #1
     a08:	lsl	x0, x0, x1
     a0c:	sub	x0, x0, #0x1
     a10:	ldp	x29, x30, [sp], #16
     a14:	ret

0000000000000a18 <_ZN11__sanitizer24GetMaxUserVirtualAddressEv>:
     a18:	str	x30, [sp, #-16]!
     a1c:	bl	9f4 <_ZN11__sanitizer20GetMaxVirtualAddressEv>
     a20:	ldr	x30, [sp], #16
     a24:	ret

0000000000000a28 <_ZN11__sanitizer11GetPageSizeEv>:
     a28:	str	x30, [sp, #-16]!
     a2c:	mov	x0, #0x6                   	// #6
     a30:	bl	0 <getauxval>
     a34:	ldr	x30, [sp], #16
     a38:	ret

0000000000000a3c <_ZN11__sanitizer12ThreadListerC1Ei>:
     a3c:	stp	x19, x20, [sp, #-128]!
     a40:	stp	x21, x22, [sp, #16]
     a44:	stp	x23, x30, [sp, #32]
     a48:	mov	x19, x0
     a4c:	mov	w20, w1
     a50:	str	w1, [x0]
     a54:	mov	w0, #0xffffffff            	// #-1
     a58:	str	w0, [x19, #4]
     a5c:	str	xzr, [x19, #16]
     a60:	str	xzr, [x19, #24]
     a64:	str	xzr, [x19, #8]
     a68:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a6c:	ldr	x0, [x0]
     a70:	ldr	x0, [x0]
     a74:	cbz	x0, b54 <_ZN11__sanitizer12ThreadListerC1Ei+0x118>
     a78:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a7c:	ldr	x0, [x0]
     a80:	ldr	x2, [x0]
     a84:	sub	x0, x2, #0x1
     a88:	tst	x0, x2
     a8c:	b.ne	b68 <_ZN11__sanitizer12ThreadListerC1Ei+0x12c>  // b.any
     a90:	add	x21, x2, #0xfff
     a94:	neg	x2, x2
     a98:	and	x21, x21, x2
     a9c:	mov	w2, #0x0                   	// #0
     aa0:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     aa4:	add	x1, x1, #0x0
     aa8:	mov	x0, x21
     aac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     ab0:	mov	x23, x0
     ab4:	ldr	x2, [x19, #24]
     ab8:	ldr	x1, [x19, #8]
     abc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     ac0:	ldr	x1, [x19, #16]
     ac4:	ldr	x0, [x19, #8]
     ac8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     acc:	str	x23, [x19, #8]
     ad0:	str	x21, [x19, #16]
     ad4:	ldr	x0, [x19, #24]
     ad8:	cmp	x0, #0xfff
     adc:	b.hi	b04 <_ZN11__sanitizer12ThreadListerC1Ei+0xc8>  // b.pmore
     ae0:	cmp	x21, #0xfff
     ae4:	b.ls	b78 <_ZN11__sanitizer12ThreadListerC1Ei+0x13c>  // b.plast
     ae8:	ldr	x0, [x19, #24]
     aec:	ldr	x3, [x19, #8]
     af0:	mov	x2, #0x1000                	// #4096
     af4:	sub	x2, x2, x0
     af8:	mov	w1, #0x0                   	// #0
     afc:	add	x0, x3, x0
     b00:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     b04:	mov	x0, #0x1000                	// #4096
     b08:	str	x0, [x19, #24]
     b0c:	add	x21, sp, #0x30
     b10:	mov	w3, w20
     b14:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     b18:	add	x2, x2, #0x0
     b1c:	mov	x1, #0x50                  	// #80
     b20:	mov	x0, x21
     b24:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     b28:	mov	w1, #0x4000                	// #16384
     b2c:	mov	x0, x21
     b30:	bl	1b4 <_ZN11__sanitizer13internal_openEPKci>
     b34:	str	w0, [x19, #4]
     b38:	sxtw	x0, w0
     b3c:	cmn	x0, #0x1, lsl #12
     b40:	b.hi	c0c <_ZN11__sanitizer12ThreadListerC1Ei+0x1d0>  // b.pmore
     b44:	ldp	x21, x22, [sp, #16]
     b48:	ldp	x23, x30, [sp, #32]
     b4c:	ldp	x19, x20, [sp], #128
     b50:	ret
     b54:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
     b58:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     b5c:	ldr	x1, [x1]
     b60:	str	x0, [x1]
     b64:	b	a78 <_ZN11__sanitizer12ThreadListerC1Ei+0x3c>
     b68:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     b6c:	add	x0, x0, #0x0
     b70:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     b74:	bl	0 <_ZN11__sanitizer3DieEv>
     b78:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     b7c:	ldr	x0, [x0]
     b80:	ldr	x0, [x0]
     b84:	cbz	x0, be8 <_ZN11__sanitizer12ThreadListerC1Ei+0x1ac>
     b88:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     b8c:	ldr	x0, [x0]
     b90:	ldr	x0, [x0]
     b94:	sub	x1, x0, #0x1
     b98:	tst	x1, x0
     b9c:	b.ne	bfc <_ZN11__sanitizer12ThreadListerC1Ei+0x1c0>  // b.any
     ba0:	add	x21, x0, #0xfff
     ba4:	neg	x0, x0
     ba8:	and	x21, x21, x0
     bac:	mov	w2, #0x0                   	// #0
     bb0:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     bb4:	add	x1, x1, #0x0
     bb8:	mov	x0, x21
     bbc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     bc0:	mov	x23, x0
     bc4:	ldr	x2, [x19, #24]
     bc8:	ldr	x1, [x19, #8]
     bcc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     bd0:	ldr	x1, [x19, #16]
     bd4:	ldr	x0, [x19, #8]
     bd8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     bdc:	str	x23, [x19, #8]
     be0:	str	x21, [x19, #16]
     be4:	b	ae8 <_ZN11__sanitizer12ThreadListerC1Ei+0xac>
     be8:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
     bec:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     bf0:	ldr	x1, [x1]
     bf4:	str	x0, [x1]
     bf8:	b	b88 <_ZN11__sanitizer12ThreadListerC1Ei+0x14c>
     bfc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     c00:	add	x0, x0, #0x0
     c04:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c08:	bl	0 <_ZN11__sanitizer3DieEv>
     c0c:	mov	w1, w20
     c10:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     c14:	add	x0, x0, #0x0
     c18:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c1c:	b	b44 <_ZN11__sanitizer12ThreadListerC1Ei+0x108>

0000000000000c20 <_ZN11__sanitizer12ThreadLister7IsAliveEi>:
     c20:	stp	x19, x20, [sp, #-144]!
     c24:	stp	x21, x22, [sp, #16]
     c28:	str	x30, [sp, #32]
     c2c:	mov	x19, x0
     c30:	mov	x21, x0
     c34:	add	x20, sp, #0x38
     c38:	mov	w4, w1
     c3c:	ldr	w3, [x21], #8
     c40:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     c44:	add	x2, x2, #0x0
     c48:	mov	x1, #0x50                  	// #80
     c4c:	mov	x0, x20
     c50:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     c54:	mov	x3, #0x0                   	// #0
     c58:	mov	x2, #0x4000000             	// #67108864
     c5c:	mov	x1, x21
     c60:	mov	x0, x20
     c64:	bl	0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>
     c68:	ands	w0, w0, #0xff
     c6c:	b.eq	c7c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x5c>  // b.none
     c70:	ldr	x3, [x19, #24]
     c74:	mov	w0, #0x0                   	// #0
     c78:	cbnz	x3, c8c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x6c>
     c7c:	ldp	x21, x22, [sp, #16]
     c80:	ldr	x30, [sp, #32]
     c84:	ldp	x19, x20, [sp], #144
     c88:	ret
     c8c:	strb	wzr, [sp, #143]
     c90:	ldr	x4, [x19, #16]
     c94:	cmp	x3, x4
     c98:	b.hi	cfc <_ZN11__sanitizer12ThreadLister7IsAliveEi+0xdc>  // b.pmore
     c9c:	b.eq	d14 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0xf4>  // b.none
     ca0:	ldr	x3, [x19, #8]
     ca4:	ldr	x0, [x19, #24]
     ca8:	add	x2, x0, #0x1
     cac:	str	x2, [x19, #24]
     cb0:	mov	x2, #0x1                   	// #1
     cb4:	add	x1, sp, #0x8f
     cb8:	add	x0, x3, x0
     cbc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     cc0:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     cc4:	add	x1, x1, #0x0
     cc8:	ldr	x0, [x19, #8]
     ccc:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     cd0:	mov	x19, x0
     cd4:	mov	w0, #0x0                   	// #0
     cd8:	cbz	x19, c7c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x5c>
     cdc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     ce0:	add	x0, x0, #0x0
     ce4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     ce8:	add	x0, x19, x0
     cec:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     cf0:	cmp	w0, #0x0
     cf4:	cset	w0, ne  // ne = any
     cf8:	b	c7c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x5c>
     cfc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     d00:	add	x2, x2, #0x0
     d04:	mov	w1, #0x1be                 	// #446
     d08:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     d0c:	add	x0, x0, #0x0
     d10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d14:	adds	x1, x3, #0x1
     d18:	b.eq	dcc <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1ac>  // b.none
     d1c:	tst	x3, x1
     d20:	b.eq	e44 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x224>  // b.none
     d24:	clz	x0, x1
     d28:	mov	w2, #0x3f                  	// #63
     d2c:	sub	w2, w2, w0
     d30:	add	w0, w2, #0x1
     d34:	mov	x20, #0x1                   	// #1
     d38:	lsl	x20, x20, x0
     d3c:	cmp	x1, x20
     d40:	b.cs	dec <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1cc>  // b.hs, b.nlast
     d44:	mov	x4, #0x1                   	// #1
     d48:	lsl	x4, x4, x2
     d4c:	cmp	x1, x4
     d50:	b.ls	e0c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1ec>  // b.plast
     d54:	cmp	x3, x20
     d58:	b.hi	e28 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x208>  // b.pmore
     d5c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d60:	ldr	x0, [x0]
     d64:	ldr	x0, [x0]
     d68:	cbz	x0, e4c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x22c>
     d6c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d70:	ldr	x0, [x0]
     d74:	ldr	x1, [x0]
     d78:	sub	x0, x1, #0x1
     d7c:	tst	x1, x0
     d80:	b.ne	e60 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x240>  // b.any
     d84:	add	x0, x20, x0
     d88:	neg	x20, x1
     d8c:	and	x20, x0, x20
     d90:	mov	w2, #0x0                   	// #0
     d94:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     d98:	add	x1, x1, #0x0
     d9c:	mov	x0, x20
     da0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     da4:	mov	x22, x0
     da8:	ldr	x2, [x19, #24]
     dac:	ldr	x1, [x19, #8]
     db0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     db4:	ldr	x1, [x19, #16]
     db8:	ldr	x0, [x19, #8]
     dbc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     dc0:	str	x22, [x19, #8]
     dc4:	str	x20, [x19, #16]
     dc8:	b	ca0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x80>
     dcc:	mov	x4, #0x0                   	// #0
     dd0:	mov	x3, #0x0                   	// #0
     dd4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     dd8:	add	x2, x2, #0x0
     ddc:	mov	w1, #0x177                 	// #375
     de0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     de4:	add	x0, x0, #0x0
     de8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     dec:	mov	x4, x20
     df0:	mov	x3, x1
     df4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     df8:	add	x2, x2, #0x0
     dfc:	mov	w1, #0x17b                 	// #379
     e00:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e04:	add	x0, x0, #0x0
     e08:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e0c:	mov	x3, x1
     e10:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e14:	add	x2, x2, #0x0
     e18:	mov	w1, #0x17c                 	// #380
     e1c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e20:	add	x0, x0, #0x0
     e24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e28:	mov	x4, x20
     e2c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e30:	add	x2, x2, #0x0
     e34:	mov	w1, #0x1fd                 	// #509
     e38:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e3c:	add	x0, x0, #0x0
     e40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e44:	mov	x20, x1
     e48:	b	d5c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x13c>
     e4c:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
     e50:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e54:	ldr	x1, [x1]
     e58:	str	x0, [x1]
     e5c:	b	d6c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x14c>
     e60:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     e64:	add	x0, x0, #0x0
     e68:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     e6c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>:
     e70:	stp	x19, x20, [sp, #-144]!
     e74:	stp	x23, x24, [sp, #32]
     e78:	str	x30, [sp, #80]
     e7c:	mov	x20, x0
     e80:	mov	x23, x1
     e84:	ldr	w0, [x0, #4]
     e88:	sxtw	x1, w0
     e8c:	mov	w24, #0x0                   	// #0
     e90:	cmn	x1, #0x1, lsl #12
     e94:	b.ls	eac <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3c>  // b.plast
     e98:	mov	w0, w24
     e9c:	ldp	x23, x24, [sp, #32]
     ea0:	ldr	x30, [sp, #80]
     ea4:	ldp	x19, x20, [sp], #144
     ea8:	ret
     eac:	stp	x21, x22, [sp, #16]
     eb0:	stp	x25, x26, [sp, #48]
     eb4:	stp	x27, x28, [sp, #64]
     eb8:	mov	w2, #0x0                   	// #0
     ebc:	mov	x1, #0x0                   	// #0
     ec0:	bl	7b4 <_ZN11__sanitizer14internal_lseekEimi>
     ec4:	str	xzr, [x23, #16]
     ec8:	mov	w26, #0x1                   	// #1
     ecc:	mov	w24, #0x2                   	// #2
     ed0:	adrp	x27, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ed4:	ldr	x0, [x27]
     ed8:	str	x0, [sp, #104]
     edc:	add	x28, sp, #0x88
     ee0:	b	eec <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x7c>
     ee4:	mov	w24, #0x1                   	// #1
     ee8:	mov	w26, #0x0                   	// #0
     eec:	ldr	x19, [x20, #16]
     ef0:	ldr	x0, [x20, #24]
     ef4:	cmp	x19, x0
     ef8:	b.ls	f10 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xa0>  // b.plast
     efc:	ldr	x3, [x20, #8]
     f00:	sub	x2, x19, x0
     f04:	mov	w1, #0x0                   	// #0
     f08:	add	x0, x3, x0
     f0c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     f10:	str	x19, [x20, #24]
     f14:	cmp	x19, #0xfff
     f18:	b.ls	f58 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xe8>  // b.plast
     f1c:	mov	w2, w19
     f20:	ldr	x1, [x20, #8]
     f24:	ldr	w0, [x20, #4]
     f28:	bl	7a0 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>
     f2c:	mov	x22, x0
     f30:	cbz	x0, 12a0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x430>
     f34:	cmn	x0, #0x1, lsl #12
     f38:	b.hi	f78 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x108>  // b.pmore
     f3c:	ldr	x19, [x20, #8]
     f40:	add	x21, x0, x19
     f44:	cmp	x19, x21
     f48:	b.cs	117c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x30c>  // b.hs, b.nlast
     f4c:	adrp	x25, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     f50:	add	x25, x25, #0x0
     f54:	b	fbc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x14c>
     f58:	mov	x4, #0x1000                	// #4096
     f5c:	mov	x3, x19
     f60:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     f64:	add	x2, x2, #0x0
     f68:	mov	w1, #0x3b5                 	// #949
     f6c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     f70:	add	x0, x0, #0x0
     f74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f78:	ldr	w1, [x20]
     f7c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
     f80:	add	x0, x0, #0x0
     f84:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     f88:	mov	w24, #0x0                   	// #0
     f8c:	ldp	x21, x22, [sp, #16]
     f90:	ldp	x25, x26, [sp, #48]
     f94:	ldp	x27, x28, [sp, #64]
     f98:	b	e98 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x28>
     f9c:	mov	w24, #0x1                   	// #1
     fa0:	ldrb	w1, [x0, #19]
     fa4:	sub	w1, w1, #0x30
     fa8:	and	w1, w1, #0xff
     fac:	cmp	w1, #0x9
     fb0:	b.ls	fdc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x16c>  // b.plast
     fb4:	cmp	x21, x19
     fb8:	b.ls	117c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x30c>  // b.plast
     fbc:	mov	x0, x19
     fc0:	ldrh	w1, [x19, #16]
     fc4:	add	x19, x19, x1
     fc8:	ldr	x1, [x0]
     fcc:	cmp	x1, #0x1
     fd0:	b.eq	f9c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x12c>  // b.none
     fd4:	cbz	x1, fb4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x144>
     fd8:	b	fa0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x130>
     fdc:	add	x0, x0, #0x13
     fe0:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     fe4:	str	x0, [sp, #136]
     fe8:	ldr	x3, [x23, #16]
     fec:	ldr	x0, [x23, #8]
     ff0:	lsr	x4, x0, #3
     ff4:	cmp	x3, x0, lsr #3
     ff8:	b.hi	1028 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1b8>  // b.pmore
     ffc:	cmp	x3, x4
    1000:	b.eq	1040 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1d0>  // b.none
    1004:	ldr	x3, [x23]
    1008:	ldr	x0, [x23, #16]
    100c:	add	x1, x0, #0x1
    1010:	str	x1, [x23, #16]
    1014:	mov	x2, #0x8                   	// #8
    1018:	mov	x1, x28
    101c:	add	x0, x3, x0, lsl #3
    1020:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1024:	b	fb4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x144>
    1028:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    102c:	add	x2, x2, #0x0
    1030:	mov	w1, #0x1be                 	// #446
    1034:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1038:	add	x0, x0, #0x0
    103c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1040:	add	x0, x3, #0x1
    1044:	tst	x3, x0
    1048:	b.eq	1154 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2e4>  // b.none
    104c:	clz	x2, x0
    1050:	mov	w1, #0x3f                  	// #63
    1054:	sub	w1, w1, w2
    1058:	add	w2, w1, #0x1
    105c:	mov	x4, #0x1                   	// #1
    1060:	lsl	x4, x4, x2
    1064:	cmp	x0, x4
    1068:	b.cs	1100 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x290>  // b.hs, b.nlast
    106c:	mov	x2, #0x1                   	// #1
    1070:	lsl	x1, x2, x1
    1074:	cmp	x0, x1
    1078:	b.ls	111c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2ac>  // b.plast
    107c:	cmp	x3, x4
    1080:	b.hi	113c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2cc>  // b.pmore
    1084:	lsl	x0, x4, #3
    1088:	str	x0, [sp, #112]
    108c:	ldr	x0, [sp, #104]
    1090:	ldr	x0, [x0]
    1094:	cbz	x0, 115c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2ec>
    1098:	ldr	x0, [x27]
    109c:	ldr	x1, [x0]
    10a0:	sub	x0, x1, #0x1
    10a4:	tst	x1, x0
    10a8:	b.ne	116c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2fc>  // b.any
    10ac:	ldr	x2, [sp, #112]
    10b0:	add	x0, x2, x0
    10b4:	neg	x1, x1
    10b8:	and	x0, x0, x1
    10bc:	mov	w2, #0x0                   	// #0
    10c0:	mov	x1, x25
    10c4:	str	x0, [sp, #120]
    10c8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    10cc:	str	x0, [sp, #112]
    10d0:	ldr	x2, [x23, #16]
    10d4:	lsl	x2, x2, #3
    10d8:	ldr	x1, [x23]
    10dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    10e0:	ldr	x1, [x23, #8]
    10e4:	ldr	x0, [x23]
    10e8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    10ec:	ldr	x1, [sp, #112]
    10f0:	str	x1, [x23]
    10f4:	ldr	x0, [sp, #120]
    10f8:	str	x0, [x23, #8]
    10fc:	b	1004 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x194>
    1100:	mov	x3, x0
    1104:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1108:	add	x2, x2, #0x0
    110c:	mov	w1, #0x17b                 	// #379
    1110:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1114:	add	x0, x0, #0x0
    1118:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    111c:	mov	x4, x1
    1120:	mov	x3, x0
    1124:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1128:	add	x2, x2, #0x0
    112c:	mov	w1, #0x17c                 	// #380
    1130:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1134:	add	x0, x0, #0x0
    1138:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    113c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1140:	add	x2, x2, #0x0
    1144:	mov	w1, #0x1fd                 	// #509
    1148:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    114c:	add	x0, x0, #0x0
    1150:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1154:	mov	x4, x0
    1158:	b	1084 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x214>
    115c:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
    1160:	ldr	x1, [x27]
    1164:	str	x0, [x1]
    1168:	b	1098 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x228>
    116c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1170:	add	x0, x0, #0x0
    1174:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1178:	bl	0 <_ZN11__sanitizer3DieEv>
    117c:	cbz	w26, ee4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x74>
    1180:	ldr	x0, [x20, #24]
    1184:	sub	x1, x0, #0x400
    1188:	cmp	x1, x22
    118c:	b.cc	11b8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x348>  // b.lo, b.ul, b.last
    1190:	ldr	x0, [x23, #16]
    1194:	cbz	x0, ee8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x78>
    1198:	ldr	x1, [x23]
    119c:	add	x0, x1, x0, lsl #3
    11a0:	ldur	w1, [x0, #-8]
    11a4:	mov	x0, x20
    11a8:	bl	c20 <_ZN11__sanitizer12ThreadLister7IsAliveEi>
    11ac:	ands	w0, w0, #0xff
    11b0:	csinc	w24, w24, wzr, ne  // ne = any
    11b4:	b	ee8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x78>
    11b8:	lsl	x19, x0, #1
    11bc:	cmp	x0, x0, lsl #1
    11c0:	b.cs	11e8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x378>  // b.hs, b.nlast
    11c4:	ldr	x0, [x20, #16]
    11c8:	cmp	x19, x0
    11cc:	b.hi	11f4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x384>  // b.pmore
    11d0:	ldr	x0, [x20, #24]
    11d4:	ldr	x3, [x20, #8]
    11d8:	sub	x2, x19, x0
    11dc:	mov	w1, #0x0                   	// #0
    11e0:	add	x0, x3, x0
    11e4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    11e8:	str	x19, [x20, #24]
    11ec:	mov	w24, #0x1                   	// #1
    11f0:	b	ee8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x78>
    11f4:	cbz	x19, 1260 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3f0>
    11f8:	ldr	x0, [x27]
    11fc:	ldr	x0, [x0]
    1200:	cbz	x0, 1280 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x410>
    1204:	ldr	x0, [x27]
    1208:	ldr	x0, [x0]
    120c:	sub	x1, x0, #0x1
    1210:	tst	x0, x1
    1214:	b.ne	1290 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x420>  // b.any
    1218:	add	x1, x19, x1
    121c:	neg	x0, x0
    1220:	and	x21, x1, x0
    1224:	mov	w2, #0x0                   	// #0
    1228:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    122c:	add	x1, x1, #0x0
    1230:	mov	x0, x21
    1234:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1238:	mov	x24, x0
    123c:	ldr	x2, [x20, #24]
    1240:	ldr	x1, [x20, #8]
    1244:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1248:	ldr	x1, [x20, #16]
    124c:	ldr	x0, [x20, #8]
    1250:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1254:	str	x24, [x20, #8]
    1258:	str	x21, [x20, #16]
    125c:	b	11d0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x360>
    1260:	mov	x4, #0x0                   	// #0
    1264:	mov	x3, #0x0                   	// #0
    1268:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    126c:	add	x2, x2, #0x0
    1270:	mov	w1, #0x1fc                 	// #508
    1274:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1278:	add	x0, x0, #0x0
    127c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1280:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
    1284:	ldr	x1, [x27]
    1288:	str	x0, [x1]
    128c:	b	1204 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x394>
    1290:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1294:	add	x0, x0, #0x0
    1298:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    129c:	bl	0 <_ZN11__sanitizer3DieEv>
    12a0:	ldp	x21, x22, [sp, #16]
    12a4:	ldp	x25, x26, [sp, #48]
    12a8:	ldp	x27, x28, [sp, #64]
    12ac:	b	e98 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x28>

00000000000012b0 <_ZN11__sanitizer14ReadBinaryNameEPcm>:
    12b0:	stp	x19, x20, [sp, #-32]!
    12b4:	str	x30, [sp, #16]
    12b8:	mov	x20, x0
    12bc:	mov	x19, x1
    12c0:	mov	x2, x1
    12c4:	mov	x1, x0
    12c8:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    12cc:	add	x0, x0, #0x0
    12d0:	bl	2fc <_ZN11__sanitizer17internal_readlinkEPKcPcm>
    12d4:	cmn	x0, #0x1, lsl #12
    12d8:	b.hi	12e8 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x38>  // b.pmore
    12dc:	ldr	x30, [sp, #16]
    12e0:	ldp	x19, x20, [sp], #32
    12e4:	ret
    12e8:	neg	w1, w0
    12ec:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    12f0:	add	x0, x0, #0x0
    12f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    12f8:	adrp	x3, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    12fc:	add	x3, x3, #0x0
    1300:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1304:	add	x2, x2, #0x0
    1308:	mov	x1, x19
    130c:	mov	x0, x20
    1310:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    1314:	mov	w1, w0
    1318:	sxtw	x0, w0
    131c:	cmp	x19, w1, sxtw
    1320:	b.hi	12dc <_ZN11__sanitizer14ReadBinaryNameEPcm+0x2c>  // b.pmore
    1324:	mov	x4, x19
    1328:	mov	x3, x0
    132c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1330:	add	x2, x2, #0x0
    1334:	mov	w1, #0x470                 	// #1136
    1338:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    133c:	add	x0, x0, #0x0
    1340:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001344 <_ZN11__sanitizer19ReadLongProcessNameEPcm>:
    1344:	stp	x19, x20, [sp, #-64]!
    1348:	str	x30, [sp, #16]
    134c:	mov	x19, x0
    1350:	mov	x20, x1
    1354:	mov	x5, #0x0                   	// #0
    1358:	mov	x4, #0x100000              	// #1048576
    135c:	add	x3, sp, #0x28
    1360:	add	x2, sp, #0x30
    1364:	add	x1, sp, #0x38
    1368:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    136c:	add	x0, x0, #0x0
    1370:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
    1374:	and	w0, w0, #0xff
    1378:	cbz	w0, 13ac <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x68>
    137c:	mov	x2, x20
    1380:	ldr	x1, [sp, #56]
    1384:	mov	x0, x19
    1388:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
    138c:	ldr	x1, [sp, #48]
    1390:	ldr	x0, [sp, #56]
    1394:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1398:	mov	x0, x19
    139c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    13a0:	ldr	x30, [sp, #16]
    13a4:	ldp	x19, x20, [sp], #64
    13a8:	ret
    13ac:	mov	x1, x20
    13b0:	mov	x0, x19
    13b4:	bl	12b0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
    13b8:	b	13a0 <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x5c>

00000000000013bc <_ZN11__sanitizer13LibraryNameIsEPKcS1_>:
    13bc:	stp	x19, x20, [sp, #-32]!
    13c0:	stp	x21, x30, [sp, #16]
    13c4:	mov	x20, x1
    13c8:	ldrb	w1, [x0]
    13cc:	cbz	w1, 1458 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x9c>
    13d0:	mov	x19, x0
    13d4:	ldrb	w2, [x19, #1]!
    13d8:	cbnz	w2, 13d4 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x18>
    13dc:	cmp	x0, x19
    13e0:	b.cs	1408 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x4c>  // b.hs, b.nlast
    13e4:	ldrb	w2, [x19]
    13e8:	cmp	w2, #0x2f
    13ec:	b.eq	1450 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x94>  // b.none
    13f0:	sub	x19, x19, #0x1
    13f4:	cmp	x0, x19
    13f8:	b.ne	13e4 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x28>  // b.any
    13fc:	ldrb	w0, [x19]
    1400:	cmp	w0, #0x2f
    1404:	b.eq	1450 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x94>  // b.none
    1408:	mov	x0, x20
    140c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    1410:	mov	x21, x0
    1414:	mov	x2, x0
    1418:	mov	x1, x20
    141c:	mov	x0, x19
    1420:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
    1424:	mov	w1, #0x0                   	// #0
    1428:	cbnz	w0, 1440 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x84>
    142c:	ldrb	w0, [x19, x21]
    1430:	sub	w0, w0, #0x2d
    1434:	and	w0, w0, #0xff
    1438:	cmp	w0, #0x1
    143c:	cset	w1, ls  // ls = plast
    1440:	mov	w0, w1
    1444:	ldp	x21, x30, [sp, #16]
    1448:	ldp	x19, x20, [sp], #32
    144c:	ret
    1450:	add	x19, x19, #0x1
    1454:	b	1408 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x4c>
    1458:	mov	x19, x0
    145c:	b	1408 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x4c>

0000000000001460 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE>:
    1460:	stp	x19, x20, [sp, #-112]!
    1464:	str	x30, [sp, #80]
    1468:	cbz	x0, 14b8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x58>
    146c:	stp	x23, x24, [sp, #32]
    1470:	stp	x25, x26, [sp, #48]
    1474:	mov	x26, x1
    1478:	ldr	x23, [x0]
    147c:	mov	x25, x23
    1480:	ldr	x19, [x23, #32]
    1484:	add	x19, x23, x19
    1488:	ldrh	w2, [x23, #54]
    148c:	ldrh	w20, [x23, #56]
    1490:	mul	w20, w20, w2
    1494:	add	x20, x19, w20, sxtw
    1498:	cmp	x19, x20
    149c:	b.eq	15b4 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x154>  // b.none
    14a0:	stp	x21, x22, [sp, #16]
    14a4:	stp	x27, x28, [sp, #64]
    14a8:	mov	x0, x19
    14ac:	mov	x3, #0xffffffffffffffff    	// #-1
    14b0:	and	x2, x2, #0xffff
    14b4:	b	14f4 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x94>
    14b8:	stp	x21, x22, [sp, #16]
    14bc:	stp	x23, x24, [sp, #32]
    14c0:	stp	x25, x26, [sp, #48]
    14c4:	stp	x27, x28, [sp, #64]
    14c8:	mov	x4, #0x0                   	// #0
    14cc:	mov	x3, #0x0                   	// #0
    14d0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    14d4:	add	x2, x2, #0x0
    14d8:	mov	w1, #0x495                 	// #1173
    14dc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    14e0:	add	x0, x0, #0x0
    14e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    14e8:	add	x0, x0, x2
    14ec:	cmp	x20, x0
    14f0:	b.eq	15c8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x168>  // b.none
    14f4:	ldr	w1, [x0]
    14f8:	cmp	w1, #0x1
    14fc:	b.ne	14e8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x88>  // b.any
    1500:	ldr	x1, [x0, #16]
    1504:	cmp	x3, x1
    1508:	csel	x3, x3, x1, ls  // ls = plast
    150c:	b	14e8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x88>
    1510:	ldr	x0, [x27]
    1514:	sub	x1, x0, #0x1
    1518:	tst	x1, x0
    151c:	b.ne	159c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x13c>  // b.any
    1520:	add	x1, x1, x24
    1524:	neg	x0, x0
    1528:	and	x1, x1, x0
    152c:	sub	x1, x1, x21
    1530:	mov	x0, x21
    1534:	blr	x26
    1538:	ldrh	w0, [x25, #54]
    153c:	add	x19, x19, x0
    1540:	cmp	x20, x19
    1544:	b.eq	15ac <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x14c>  // b.none
    1548:	ldr	w0, [x19]
    154c:	cmp	w0, #0x1
    1550:	b.ne	1538 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xd8>  // b.any
    1554:	ldr	x22, [x19, #16]
    1558:	add	x22, x23, x22
    155c:	ldr	x24, [x19, #40]
    1560:	add	x24, x22, x24
    1564:	ldr	x0, [x28]
    1568:	neg	x21, x0
    156c:	and	x21, x21, x22
    1570:	cbnz	x0, 1510 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xb0>
    1574:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
    1578:	ldr	x1, [sp, #96]
    157c:	str	x0, [x1]
    1580:	neg	x21, x0
    1584:	and	x21, x21, x22
    1588:	cbnz	x0, 1510 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xb0>
    158c:	bl	a28 <_ZN11__sanitizer11GetPageSizeEv>
    1590:	ldr	x1, [sp, #104]
    1594:	str	x0, [x1]
    1598:	b	1510 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xb0>
    159c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    15a0:	add	x0, x0, #0x0
    15a4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    15a8:	bl	0 <_ZN11__sanitizer3DieEv>
    15ac:	ldp	x21, x22, [sp, #16]
    15b0:	ldp	x27, x28, [sp, #64]
    15b4:	ldp	x23, x24, [sp, #32]
    15b8:	ldp	x25, x26, [sp, #48]
    15bc:	ldr	x30, [sp, #80]
    15c0:	ldp	x19, x20, [sp], #112
    15c4:	ret
    15c8:	sub	x23, x23, x3
    15cc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    15d0:	ldr	x28, [x0]
    15d4:	mov	x27, x28
    15d8:	str	x28, [sp, #96]
    15dc:	str	x28, [sp, #104]
    15e0:	b	1548 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xe8>

00000000000015e4 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>:
    15e4:	cmp	x0, #0x0
    15e8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    15ec:	b.eq	1660 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x7c>  // b.none
    15f0:	str	x30, [sp, #-16]!
    15f4:	ands	x7, x1, #0xf
    15f8:	b.ne	1640 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x5c>  // b.any
    15fc:	stur	x0, [x1, #-16]
    1600:	stur	x3, [x1, #-8]
    1604:	sub	x1, x1, #0x10
    1608:	mov	x0, x2
    160c:	mov	x2, x4
    1610:	mov	x3, x5
    1614:	mov	x4, x6
    1618:	mov	x8, #0xdc                  	// #220
    161c:	svc	#0x0
    1620:	cmp	x0, #0x0
    1624:	b.ne	1638 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x54>  // b.any
    1628:	ldp	x1, x0, [sp], #16
    162c:	blr	x1
    1630:	mov	x8, #0x5d                  	// #93
    1634:	svc	#0x0
    1638:	ldr	x30, [sp], #16
    163c:	ret
    1640:	mov	x4, x7
    1644:	mov	x3, #0x0                   	// #0
    1648:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    164c:	add	x2, x2, #0x0
    1650:	mov	w1, #0x54b                 	// #1355
    1654:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1658:	add	x0, x0, #0x0
    165c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1660:	mov	x0, #0xffffffffffffffea    	// #-22
    1664:	ret

0000000000001668 <_ZN11__sanitizer19GetHandleSignalModeEi>:
    1668:	cmp	w0, #0x7
    166c:	b.eq	1720 <_ZN11__sanitizer19GetHandleSignalModeEi+0xb8>  // b.none
    1670:	cmp	w0, #0x7
    1674:	b.gt	16d8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x70>
    1678:	cmp	w0, #0x5
    167c:	b.eq	1700 <_ZN11__sanitizer19GetHandleSignalModeEi+0x98>  // b.none
    1680:	cmp	w0, #0x6
    1684:	b.ne	16b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x50>  // b.any
    1688:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    168c:	ldr	x0, [x0]
    1690:	ldr	w0, [x0, #80]
    1694:	cmp	w0, #0x1
    1698:	b.ne	16b4 <_ZN11__sanitizer19GetHandleSignalModeEi+0x4c>  // b.any
    169c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16a0:	ldr	x1, [x1]
    16a4:	ldrb	w1, [x1, #96]
    16a8:	cmp	w1, #0x0
    16ac:	mov	w1, #0x2                   	// #2
    16b0:	csel	w0, w0, w1, ne  // ne = any
    16b4:	ret
    16b8:	cmp	w0, #0x4
    16bc:	b.ne	16d0 <_ZN11__sanitizer19GetHandleSignalModeEi+0x68>  // b.any
    16c0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16c4:	ldr	x0, [x0]
    16c8:	ldr	w0, [x0, #84]
    16cc:	b	1694 <_ZN11__sanitizer19GetHandleSignalModeEi+0x2c>
    16d0:	mov	w0, #0x0                   	// #0
    16d4:	b	16b4 <_ZN11__sanitizer19GetHandleSignalModeEi+0x4c>
    16d8:	cmp	w0, #0x8
    16dc:	b.eq	1710 <_ZN11__sanitizer19GetHandleSignalModeEi+0xa8>  // b.none
    16e0:	cmp	w0, #0xb
    16e4:	b.ne	16f8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x90>  // b.any
    16e8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16ec:	ldr	x0, [x0]
    16f0:	ldr	w0, [x0, #72]
    16f4:	b	1694 <_ZN11__sanitizer19GetHandleSignalModeEi+0x2c>
    16f8:	mov	w0, #0x0                   	// #0
    16fc:	b	16b4 <_ZN11__sanitizer19GetHandleSignalModeEi+0x4c>
    1700:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1704:	ldr	x0, [x0]
    1708:	ldr	w0, [x0, #88]
    170c:	b	1694 <_ZN11__sanitizer19GetHandleSignalModeEi+0x2c>
    1710:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1714:	ldr	x0, [x0]
    1718:	ldr	w0, [x0, #92]
    171c:	b	1694 <_ZN11__sanitizer19GetHandleSignalModeEi+0x2c>
    1720:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1724:	ldr	x0, [x0]
    1728:	ldr	w0, [x0, #76]
    172c:	b	1694 <_ZN11__sanitizer19GetHandleSignalModeEi+0x2c>

0000000000001730 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>:
    1730:	stp	x19, x20, [sp, #-320]!
    1734:	stp	x21, x22, [sp, #16]
    1738:	str	x30, [sp, #32]
    173c:	mov	x19, x0
    1740:	mov	x20, x1
    1744:	add	x21, sp, #0xc0
    1748:	mov	x0, x21
    174c:	bl	8f8 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
    1750:	mov	w1, #0x21                  	// #33
    1754:	mov	x0, x21
    1758:	bl	928 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
    175c:	add	x22, sp, #0x40
    1760:	mov	x2, x22
    1764:	mov	x1, x21
    1768:	mov	w0, #0x2                   	// #2
    176c:	bl	8e4 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
    1770:	mov	x3, x20
    1774:	mov	x2, x19
    1778:	mov	x1, #0x0                   	// #0
    177c:	add	x0, sp, #0x38
    1780:	bl	0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
    1784:	mov	x2, #0x0                   	// #0
    1788:	mov	x1, x22
    178c:	mov	w0, #0x2                   	// #2
    1790:	bl	8e4 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
    1794:	ldr	x0, [sp, #56]
    1798:	ldp	x21, x22, [sp, #16]
    179c:	ldr	x30, [sp, #32]
    17a0:	ldp	x19, x20, [sp], #320
    17a4:	ret

00000000000017a8 <_ZN11__sanitizer20internal_join_threadEPv>:
    17a8:	str	x30, [sp, #-16]!
    17ac:	mov	x1, #0x0                   	// #0
    17b0:	bl	0 <_ZN11__sanitizer17real_pthread_joinEPvPS0_>
    17b4:	ldr	x30, [sp], #16
    17b8:	ret

00000000000017bc <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>:
    17bc:	ldr	x0, [x0, #8]
    17c0:	add	x1, x0, #0x1d0
    17c4:	ldr	w0, [x0, #468]
    17c8:	cbz	w0, 17fc <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    17cc:	mov	w3, #0x5201                	// #20993
    17d0:	movk	w3, #0x4553, lsl #16
    17d4:	ldr	w2, [x1]
    17d8:	cmp	w2, w3
    17dc:	b.eq	17f0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x34>  // b.none
    17e0:	add	x1, x1, w0, uxtw
    17e4:	ldr	w0, [x1, #4]
    17e8:	cbnz	w0, 17d4 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x18>
    17ec:	b	17fc <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    17f0:	ldr	x0, [x1, #8]
    17f4:	ubfx	w0, w0, #6, #1
    17f8:	add	w0, w0, #0x1
    17fc:	ret

0000000000001800 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>:
    1800:	ret

0000000000001804 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>:
    1804:	ldr	x1, [x0, #8]
    1808:	ldr	x2, [x1, #440]
    180c:	str	x2, [x0, #24]
    1810:	ldr	x2, [x1, #416]
    1814:	str	x2, [x0, #40]
    1818:	ldr	x1, [x1, #432]
    181c:	str	x1, [x0, #32]
    1820:	ret

0000000000001824 <_ZN11__sanitizer11MaybeReexecEv>:
    1824:	ret

0000000000001828 <_ZN11__sanitizer9CheckASLREv>:
    1828:	ret

000000000000182c <_ZN11__sanitizer14PrintModuleMapEv>:
    182c:	ret

0000000000001830 <_ZN11__sanitizer15CheckNoDeepBindEPKci>:
    1830:	tbnz	w1, #3, 1838 <_ZN11__sanitizer15CheckNoDeepBindEPKci+0x8>
    1834:	ret
    1838:	str	x30, [sp, #-16]!
    183c:	mov	x2, x0
    1840:	mov	x1, x0
    1844:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1848:	add	x0, x0, #0x0
    184c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1850:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000001854 <_ZN11__sanitizer24FindAvailableMemoryRangeEmmmPmS0_>:
    1854:	str	x30, [sp, #-16]!
    1858:	mov	x4, #0x0                   	// #0
    185c:	mov	x3, #0x0                   	// #0
    1860:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1864:	add	x2, x2, #0x0
    1868:	mov	w1, #0x80a                 	// #2058
    186c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1870:	add	x0, x0, #0x0
    1874:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001878 <_ZN11__sanitizer9GetRandomEPvmb>:
    1878:	stp	x19, x20, [sp, #-48]!
    187c:	str	x30, [sp, #32]
    1880:	mov	x20, x1
    1884:	sub	x1, x1, #0x1
    1888:	cmp	x1, #0xff
    188c:	cset	w19, hi  // hi = pmore
    1890:	cmp	x0, #0x0
    1894:	csinc	w19, w19, wzr, ne  // ne = any
    1898:	cbz	w19, 18b0 <_ZN11__sanitizer9GetRandomEPvmb+0x38>
    189c:	mov	w19, #0x0                   	// #0
    18a0:	mov	w0, w19
    18a4:	ldr	x30, [sp, #32]
    18a8:	ldp	x19, x20, [sp], #48
    18ac:	ret
    18b0:	stp	x21, x22, [sp, #16]
    18b4:	mov	x21, x0
    18b8:	and	w2, w2, #0xff
    18bc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    18c0:	add	x0, x0, #0x0
    18c4:	ldrb	w0, [x0, #24]
    18c8:	and	w0, w0, #0xff
    18cc:	cbnz	w0, 18f8 <_ZN11__sanitizer9GetRandomEPvmb+0x80>
    18d0:	eor	w2, w2, #0x1
    18d4:	mov	x8, #0x116                 	// #278
    18d8:	mov	x0, x21
    18dc:	mov	x1, x20
    18e0:	and	x2, x2, #0xff
    18e4:	svc	#0x0
    18e8:	cmn	x0, #0x1, lsl #12
    18ec:	b.hi	191c <_ZN11__sanitizer9GetRandomEPvmb+0xa4>  // b.pmore
    18f0:	cmp	x20, x0
    18f4:	b.eq	1968 <_ZN11__sanitizer9GetRandomEPvmb+0xf0>  // b.none
    18f8:	mov	w1, #0x0                   	// #0
    18fc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1900:	add	x0, x0, #0x0
    1904:	bl	1b4 <_ZN11__sanitizer13internal_openEPKci>
    1908:	mov	x22, x0
    190c:	cmn	x0, #0x1, lsl #12
    1910:	b.ls	1938 <_ZN11__sanitizer9GetRandomEPvmb+0xc0>  // b.plast
    1914:	ldp	x21, x22, [sp, #16]
    1918:	b	18a0 <_ZN11__sanitizer9GetRandomEPvmb+0x28>
    191c:	cmn	w0, #0x26
    1920:	b.ne	18f8 <_ZN11__sanitizer9GetRandomEPvmb+0x80>  // b.any
    1924:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci>
    1928:	add	x0, x0, #0x0
    192c:	mov	w1, #0x1                   	// #1
    1930:	strb	w1, [x0, #24]
    1934:	b	18f8 <_ZN11__sanitizer9GetRandomEPvmb+0x80>
    1938:	mov	x2, x20
    193c:	mov	x1, x21
    1940:	bl	1fc <_ZN11__sanitizer13internal_readEiPvm>
    1944:	cmn	x0, #0x1, lsl #12
    1948:	b.ls	1954 <_ZN11__sanitizer9GetRandomEPvmb+0xdc>  // b.plast
    194c:	ldp	x21, x22, [sp, #16]
    1950:	b	18a0 <_ZN11__sanitizer9GetRandomEPvmb+0x28>
    1954:	mov	w0, w22
    1958:	bl	1a4 <_ZN11__sanitizer14internal_closeEi>
    195c:	mov	w19, #0x1                   	// #1
    1960:	ldp	x21, x22, [sp, #16]
    1964:	b	18a0 <_ZN11__sanitizer9GetRandomEPvmb+0x28>
    1968:	mov	w19, #0x1                   	// #1
    196c:	ldp	x21, x22, [sp, #16]
    1970:	b	18a0 <_ZN11__sanitizer9GetRandomEPvmb+0x28>

sanitizer_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	add	x19, sp, #0x20
  10:	mov	w1, #0x1                   	// #1
  14:	mov	x0, x19
  18:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
  1c:	mov	x1, x20
  20:	mov	x0, x19
  24:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
  28:	mov	x0, x19
  2c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #64
  38:	ret

000000000000003c <_ZN11__sanitizerL19GetRSSFromGetrusageEv>:
  3c:	str	x30, [sp, #-160]!
  40:	add	x1, sp, #0x10
  44:	mov	w0, #0x0                   	// #0
  48:	bl	0 <getrusage>
  4c:	mov	w1, w0
  50:	mov	x0, #0x0                   	// #0
  54:	cbnz	w1, 60 <_ZN11__sanitizerL19GetRSSFromGetrusageEv+0x24>
  58:	ldr	x0, [sp, #48]
  5c:	lsl	x0, x0, #10
  60:	ldr	x30, [sp], #160
  64:	ret

0000000000000068 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>:
  68:	stp	x19, x20, [sp, #-160]!
  6c:	stp	x21, x22, [sp, #16]
  70:	stp	x23, x30, [sp, #32]
  74:	mov	x20, x0
  78:	mov	x22, x2
  7c:	str	xzr, [sp, #136]
  80:	str	xzr, [sp, #144]
  84:	str	xzr, [sp, #128]
  88:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  8c:	ldr	x0, [x0]
  90:	ldr	x0, [x0]
  94:	cbz	x0, 18c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x124>
  98:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  9c:	ldr	x0, [x0]
  a0:	ldr	x1, [x0]
  a4:	sub	x19, x1, #0x1
  a8:	ands	x19, x19, x1
  ac:	b.ne	1a0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x138>  // b.any
  b0:	add	x21, x1, #0xfff
  b4:	neg	x1, x1
  b8:	and	x21, x21, x1
  bc:	mov	w2, #0x0                   	// #0
  c0:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
  c4:	add	x1, x1, #0x0
  c8:	mov	x0, x21
  cc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  d0:	mov	x23, x0
  d4:	ldr	x2, [sp, #144]
  d8:	ldr	x1, [sp, #128]
  dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  e0:	ldr	x1, [sp, #136]
  e4:	ldr	x0, [sp, #128]
  e8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  ec:	str	x23, [sp, #128]
  f0:	str	x21, [sp, #136]
  f4:	ldr	x0, [sp, #144]
  f8:	cmp	x0, #0xfff
  fc:	b.hi	124 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xbc>  // b.pmore
 100:	cmp	x21, #0xfff
 104:	b.ls	1b0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x148>  // b.plast
 108:	ldr	x0, [sp, #144]
 10c:	mov	x2, #0x1000                	// #4096
 110:	sub	x2, x2, x0
 114:	mov	w1, #0x0                   	// #0
 118:	ldr	x3, [sp, #128]
 11c:	add	x0, x3, x0
 120:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 124:	mov	x0, #0x1000                	// #4096
 128:	str	x0, [sp, #144]
 12c:	str	xzr, [sp, #152]
 130:	ldr	x0, [sp, #128]
 134:	strb	wzr, [x0]
 138:	ldrb	w0, [x22, #8]
 13c:	cbnz	w0, 244 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1dc>
 140:	ldr	x2, [x20, #8]
 144:	cbz	x2, 158 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xf0>
 148:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 14c:	add	x1, x1, #0x0
 150:	add	x0, sp, #0x80
 154:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 158:	ldr	x0, [sp, #144]
 15c:	cbz	x0, 258 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1f0>
 160:	ldr	x0, [sp, #128]
 164:	ldrb	w0, [x0]
 168:	cbnz	w0, 278 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x210>
 16c:	ldr	x1, [sp, #136]
 170:	ldr	x0, [sp, #128]
 174:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 178:	mov	w0, #0x0                   	// #0
 17c:	ldp	x21, x22, [sp, #16]
 180:	ldp	x23, x30, [sp, #32]
 184:	ldp	x19, x20, [sp], #160
 188:	ret
 18c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 190:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 194:	ldr	x1, [x1]
 198:	str	x0, [x1]
 19c:	b	98 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x30>
 1a0:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 1a4:	add	x0, x0, #0x0
 1a8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1ac:	bl	0 <_ZN11__sanitizer3DieEv>
 1b0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1b4:	ldr	x0, [x0]
 1b8:	ldr	x0, [x0]
 1bc:	cbz	x0, 220 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1b8>
 1c0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1c4:	ldr	x0, [x0]
 1c8:	ldr	x0, [x0]
 1cc:	sub	x1, x0, #0x1
 1d0:	tst	x1, x0
 1d4:	b.ne	234 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1cc>  // b.any
 1d8:	add	x21, x0, #0xfff
 1dc:	neg	x0, x0
 1e0:	and	x21, x21, x0
 1e4:	mov	w2, #0x0                   	// #0
 1e8:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 1ec:	add	x1, x1, #0x0
 1f0:	mov	x0, x21
 1f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1f8:	mov	x23, x0
 1fc:	ldr	x2, [sp, #144]
 200:	ldr	x1, [sp, #128]
 204:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 208:	ldr	x1, [sp, #136]
 20c:	ldr	x0, [sp, #128]
 210:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 214:	str	x23, [sp, #128]
 218:	str	x21, [sp, #136]
 21c:	b	108 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xa0>
 220:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 224:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 228:	ldr	x1, [x1]
 22c:	str	x0, [x1]
 230:	b	1c0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x158>
 234:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 238:	add	x0, x0, #0x0
 23c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 240:	bl	0 <_ZN11__sanitizer3DieEv>
 244:	strb	wzr, [x22, #8]
 248:	ldr	x1, [sp, #144]
 24c:	ldr	x0, [sp, #128]
 250:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 254:	b	158 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xf0>
 258:	mov	x4, #0x0                   	// #0
 25c:	mov	x3, #0x0                   	// #0
 260:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 264:	add	x2, x2, #0x0
 268:	mov	w1, #0x1b6                 	// #438
 26c:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 270:	add	x0, x0, #0x0
 274:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 278:	str	xzr, [sp, #56]
 27c:	str	xzr, [sp, #64]
 280:	str	xzr, [sp, #72]
 284:	str	wzr, [sp, #80]
 288:	strb	wzr, [sp, #100]
 28c:	add	x21, sp, #0x38
 290:	mov	x2, #0x10                  	// #16
 294:	mov	w1, #0x0                   	// #0
 298:	add	x0, sp, #0x54
 29c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2a0:	str	xzr, [sp, #120]
 2a4:	str	xzr, [sp, #112]
 2a8:	str	xzr, [sp, #104]
 2ac:	ldr	x2, [x20]
 2b0:	ldr	x1, [sp, #128]
 2b4:	mov	x0, x21
 2b8:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 2bc:	ldrh	w0, [x20, #24]
 2c0:	cbz	w0, 328 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2c0>
 2c4:	mov	w21, #0x0                   	// #0
 2c8:	add	x23, sp, #0x38
 2cc:	b	310 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2a8>
 2d0:	ldr	x1, [x20]
 2d4:	ldr	x0, [x2, #16]
 2d8:	add	x1, x1, x0
 2dc:	ldr	w3, [x2, #4]
 2e0:	ldr	x2, [x2, #40]
 2e4:	mov	x5, #0x0                   	// #0
 2e8:	ubfx	x4, x3, #1, #1
 2ec:	and	w3, w3, #0x1
 2f0:	add	x2, x1, x2
 2f4:	mov	x0, x23
 2f8:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 2fc:	add	w21, w21, #0x1
 300:	add	x19, x19, #0x38
 304:	ldrh	w0, [x20, #24]
 308:	cmp	w0, w21
 30c:	b.le	328 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2c0>
 310:	ldr	x0, [x20, #16]
 314:	add	x2, x0, x19
 318:	ldr	w0, [x0, x19]
 31c:	cmp	w0, #0x1
 320:	b.ne	2fc <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x294>  // b.any
 324:	b	2d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x268>
 328:	ldr	x19, [x22]
 32c:	ldr	x3, [x19, #16]
 330:	ldr	x0, [x19, #8]
 334:	mov	x1, #0xe38f                	// #58255
 338:	movk	x1, #0x8e38, lsl #16
 33c:	movk	x1, #0x38e3, lsl #32
 340:	movk	x1, #0xe38e, lsl #48
 344:	umulh	x0, x0, x1
 348:	lsr	x4, x0, #6
 34c:	cmp	x3, x0, lsr #6
 350:	b.hi	384 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x31c>  // b.pmore
 354:	cmp	x3, x4
 358:	b.eq	39c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x334>  // b.none
 35c:	ldr	x3, [x19]
 360:	ldr	x1, [x19, #16]
 364:	add	x0, x1, #0x1
 368:	str	x0, [x19, #16]
 36c:	add	x0, x1, x1, lsl #3
 370:	mov	x2, #0x48                  	// #72
 374:	add	x1, sp, #0x38
 378:	add	x0, x3, x0, lsl #3
 37c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 380:	b	16c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x104>
 384:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 388:	add	x2, x2, #0x0
 38c:	mov	w1, #0x1be                 	// #446
 390:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 394:	add	x0, x0, #0x0
 398:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 39c:	add	x0, x3, #0x1
 3a0:	tst	x3, x0
 3a4:	b.eq	4b4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x44c>  // b.none
 3a8:	clz	x2, x0
 3ac:	mov	w1, #0x3f                  	// #63
 3b0:	sub	w1, w1, w2
 3b4:	add	w2, w1, #0x1
 3b8:	mov	x4, #0x1                   	// #1
 3bc:	lsl	x4, x4, x2
 3c0:	cmp	x0, x4
 3c4:	b.cs	460 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3f8>  // b.hs, b.nlast
 3c8:	mov	x2, #0x1                   	// #1
 3cc:	lsl	x1, x2, x1
 3d0:	cmp	x0, x1
 3d4:	b.ls	47c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x414>  // b.plast
 3d8:	cmp	x3, x4
 3dc:	b.hi	49c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x434>  // b.pmore
 3e0:	add	x4, x4, x4, lsl #3
 3e4:	lsl	x20, x4, #3
 3e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3ec:	ldr	x0, [x0]
 3f0:	ldr	x0, [x0]
 3f4:	cbz	x0, 4bc <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x454>
 3f8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3fc:	ldr	x0, [x0]
 400:	ldr	x0, [x0]
 404:	sub	x1, x0, #0x1
 408:	tst	x0, x1
 40c:	b.ne	4d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x468>  // b.any
 410:	add	x20, x20, x1
 414:	neg	x0, x0
 418:	and	x20, x20, x0
 41c:	mov	w2, #0x0                   	// #0
 420:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 424:	add	x1, x1, #0x0
 428:	mov	x0, x20
 42c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 430:	mov	x21, x0
 434:	ldr	x1, [x19, #16]
 438:	add	x1, x1, x1, lsl #3
 43c:	lsl	x2, x1, #3
 440:	ldr	x1, [x19]
 444:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 448:	ldr	x1, [x19, #8]
 44c:	ldr	x0, [x19]
 450:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 454:	str	x21, [x19]
 458:	str	x20, [x19, #8]
 45c:	b	35c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2f4>
 460:	mov	x3, x0
 464:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 468:	add	x2, x2, #0x0
 46c:	mov	w1, #0x17b                 	// #379
 470:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 474:	add	x0, x0, #0x0
 478:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 47c:	mov	x4, x1
 480:	mov	x3, x0
 484:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 488:	add	x2, x2, #0x0
 48c:	mov	w1, #0x17c                 	// #380
 490:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 494:	add	x0, x0, #0x0
 498:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 49c:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 4a0:	add	x2, x2, #0x0
 4a4:	mov	w1, #0x1fd                 	// #509
 4a8:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 4ac:	add	x0, x0, #0x0
 4b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4b4:	mov	x4, x0
 4b8:	b	3e0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x378>
 4bc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 4c0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4c4:	ldr	x1, [x1]
 4c8:	str	x0, [x1]
 4cc:	b	3f8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x390>
 4d0:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 4d4:	add	x0, x0, #0x0
 4d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4dc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000004e0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>:
 4e0:	str	x30, [sp, #-16]!
 4e4:	adrp	x3, 0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 4e8:	ldr	x3, [x3]
 4ec:	cbz	x3, 4fc <_ZN11__sanitizer18internal_sigactionEiPKvPv+0x1c>
 4f0:	bl	0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 4f4:	ldr	x30, [sp], #16
 4f8:	ret
 4fc:	bl	0 <sigaction>
 500:	b	4f4 <_ZN11__sanitizer18internal_sigactionEiPKvPv+0x14>

0000000000000504 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>:
 504:	stp	x19, x20, [sp, #-272]!
 508:	str	x30, [sp, #48]
 50c:	cbz	x1, 568 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x64>
 510:	stp	x21, x22, [sp, #16]
 514:	and	w0, w0, #0xff
 518:	mov	x20, x1
 51c:	mov	x21, x2
 520:	cbz	x2, 590 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x8c>
 524:	cbz	w0, 634 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x130>
 528:	stp	x23, x24, [sp, #32]
 52c:	add	x1, sp, #0x40
 530:	mov	w0, #0x3                   	// #3
 534:	bl	0 <getrlimit>
 538:	sxtw	x19, w0
 53c:	cbnz	w0, 5b4 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xb0>
 540:	mov	w1, #0x1                   	// #1
 544:	add	x0, sp, #0x50
 548:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 54c:	str	xzr, [sp, #136]
 550:	str	xzr, [sp, #144]
 554:	str	xzr, [sp, #184]
 558:	add	x23, sp, #0x70
 55c:	add	x22, sp, #0x50
 560:	add	x24, sp, #0x40
 564:	b	5d8 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xd4>
 568:	stp	x21, x22, [sp, #16]
 56c:	stp	x23, x24, [sp, #32]
 570:	mov	x4, #0x0                   	// #0
 574:	mov	x3, #0x0                   	// #0
 578:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 57c:	add	x2, x2, #0x0
 580:	mov	w1, #0x5b                  	// #91
 584:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 588:	add	x0, x0, #0x0
 58c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 590:	stp	x23, x24, [sp, #32]
 594:	mov	x4, #0x0                   	// #0
 598:	mov	x3, #0x0                   	// #0
 59c:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 5a0:	add	x2, x2, #0x0
 5a4:	mov	w1, #0x5c                  	// #92
 5a8:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 5ac:	add	x0, x0, #0x0
 5b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5b4:	mov	x4, #0x0                   	// #0
 5b8:	mov	x3, x19
 5bc:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 5c0:	add	x2, x2, #0x0
 5c4:	mov	w1, #0x60                  	// #96
 5c8:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 5cc:	add	x0, x0, #0x0
 5d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d4:	mov	x19, x0
 5d8:	mov	x1, x23
 5dc:	mov	x0, x22
 5e0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 5e4:	and	w0, w0, #0xff
 5e8:	cbz	w0, 5f8 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xf4>
 5ec:	ldr	x0, [sp, #120]
 5f0:	cmp	x24, x0
 5f4:	b.cs	5d4 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xd0>  // b.hs, b.nlast
 5f8:	add	x1, sp, #0x40
 5fc:	ldr	x0, [sp, #112]
 600:	cmp	x1, x0
 604:	b.cc	614 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x110>  // b.lo, b.ul, b.last
 608:	ldr	x0, [sp, #120]
 60c:	cmp	x1, x0
 610:	b.cc	6bc <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x1b8>  // b.lo, b.ul, b.last
 614:	mov	x4, #0x0                   	// #0
 618:	mov	x3, #0x0                   	// #0
 61c:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 620:	add	x2, x2, #0x0
 624:	mov	w1, #0x6a                  	// #106
 628:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 62c:	add	x0, x0, #0x0
 630:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 634:	str	xzr, [sp, #264]
 638:	str	xzr, [sp, #256]
 63c:	add	x19, sp, #0xc0
 640:	mov	x0, x19
 644:	bl	0 <pthread_attr_init>
 648:	bl	0 <pthread_self>
 64c:	mov	x1, x19
 650:	bl	0 <pthread_getattr_np>
 654:	sxtw	x3, w0
 658:	cbnz	w0, 69c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x198>
 65c:	add	x19, sp, #0xc0
 660:	add	x2, sp, #0x108
 664:	add	x1, sp, #0x100
 668:	mov	x0, x19
 66c:	bl	0 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 670:	mov	x0, x19
 674:	bl	0 <pthread_attr_destroy>
 678:	ldr	x1, [sp, #256]
 67c:	ldr	x0, [sp, #264]
 680:	add	x0, x0, x1
 684:	str	x0, [x20]
 688:	str	x1, [x21]
 68c:	ldp	x21, x22, [sp, #16]
 690:	ldr	x30, [sp, #48]
 694:	ldp	x19, x20, [sp], #272
 698:	ret
 69c:	stp	x23, x24, [sp, #32]
 6a0:	mov	x4, #0x0                   	// #0
 6a4:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 6a8:	add	x2, x2, #0x0
 6ac:	mov	w1, #0x88                  	// #136
 6b0:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 6b4:	add	x0, x0, #0x0
 6b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6bc:	ldr	x1, [sp, #64]
 6c0:	mov	x2, #0x40000000            	// #1073741824
 6c4:	cmp	x1, x2
 6c8:	csel	x1, x1, x2, ls  // ls = plast
 6cc:	str	x0, [x20]
 6d0:	sub	x19, x0, x19
 6d4:	cmp	x19, x1
 6d8:	csel	x19, x19, x1, ls  // ls = plast
 6dc:	sub	x19, x0, x19
 6e0:	str	x19, [x21]
 6e4:	add	x0, sp, #0x50
 6e8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 6ec:	ldp	x23, x24, [sp, #32]
 6f0:	b	68c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x188>

00000000000006f4 <_ZN11__sanitizer6SetEnvEPKcS1_>:
 6f4:	stp	x19, x20, [sp, #-48]!
 6f8:	str	x30, [sp, #16]
 6fc:	mov	x19, x0
 700:	mov	x20, x1
 704:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 708:	add	x1, x1, #0x0
 70c:	mov	x0, #0xffffffffffffffff    	// #-1
 710:	bl	0 <dlsym>
 714:	str	x0, [sp, #40]
 718:	cbz	x0, 754 <_ZN11__sanitizer6SetEnvEPKcS1_+0x60>
 71c:	mov	x2, #0x8                   	// #8
 720:	add	x1, sp, #0x28
 724:	add	x0, sp, #0x20
 728:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 72c:	mov	w2, #0x1                   	// #1
 730:	mov	x1, x20
 734:	mov	x0, x19
 738:	ldr	x3, [sp, #32]
 73c:	blr	x3
 740:	cmp	w0, #0x0
 744:	cset	w0, eq  // eq = none
 748:	ldr	x30, [sp, #16]
 74c:	ldp	x19, x20, [sp], #48
 750:	ret
 754:	mov	w0, #0x0                   	// #0
 758:	b	748 <_ZN11__sanitizer6SetEnvEPKcS1_+0x54>

000000000000075c <_ZN11__sanitizer11InitTlsSizeEv>:
 75c:	str	x30, [sp, #-48]!
 760:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 764:	add	x1, x1, #0x0
 768:	mov	x0, #0xffffffffffffffff    	// #-1
 76c:	bl	0 <dlsym>
 770:	str	xzr, [sp, #40]
 774:	str	xzr, [sp, #32]
 778:	str	x0, [sp, #16]
 77c:	mov	x2, #0x8                   	// #8
 780:	add	x1, sp, #0x10
 784:	add	x0, sp, #0x18
 788:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 78c:	ldr	x2, [sp, #24]
 790:	cbz	x2, 7d4 <_ZN11__sanitizer11InitTlsSizeEv+0x78>
 794:	add	x1, sp, #0x20
 798:	add	x0, sp, #0x28
 79c:	blr	x2
 7a0:	ldr	x1, [sp, #32]
 7a4:	cmp	x1, #0xf
 7a8:	b.hi	7f4 <_ZN11__sanitizer11InitTlsSizeEv+0x98>  // b.pmore
 7ac:	ldr	x0, [sp, #40]
 7b0:	mov	x1, #0x10                  	// #16
 7b4:	add	x0, x0, x1
 7b8:	sub	x0, x0, #0x1
 7bc:	neg	x1, x1
 7c0:	and	x0, x0, x1
 7c4:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 7c8:	str	x0, [x1]
 7cc:	ldr	x30, [sp], #48
 7d0:	ret
 7d4:	mov	x4, #0x0                   	// #0
 7d8:	mov	x3, #0x0                   	// #0
 7dc:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 7e0:	add	x2, x2, #0x0
 7e4:	mov	w1, #0xd4                  	// #212
 7e8:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 7ec:	add	x0, x0, #0x0
 7f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7f4:	sub	x0, x1, #0x1
 7f8:	tst	x0, x1
 7fc:	b.ne	808 <_ZN11__sanitizer11InitTlsSizeEv+0xac>  // b.any
 800:	ldr	x0, [sp, #40]
 804:	b	7b4 <_ZN11__sanitizer11InitTlsSizeEv+0x58>
 808:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 80c:	add	x0, x0, #0x0
 810:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 814:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000818 <_ZN11__sanitizer20ThreadDescriptorSizeEv>:
 818:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 81c:	add	x0, x0, #0x0
 820:	ldr	x0, [x0, #8]
 824:	cbnz	x0, 838 <_ZN11__sanitizer20ThreadDescriptorSizeEv+0x20>
 828:	mov	x0, #0x6f0                 	// #1776
 82c:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 830:	add	x1, x1, #0x0
 834:	str	x0, [x1, #8]
 838:	ret

000000000000083c <_ZN11__sanitizer16ThreadSelfOffsetEv>:
 83c:	mov	x0, #0x10                  	// #16
 840:	ret

0000000000000844 <_ZN11__sanitizer10ThreadSelfEv>:
 844:	str	x30, [sp, #-16]!
 848:	bl	818 <_ZN11__sanitizer20ThreadDescriptorSizeEv>
 84c:	mrs	x1, tpidr_el0
 850:	sub	x0, x1, x0
 854:	ldr	x30, [sp], #16
 858:	ret

000000000000085c <_ZN11__sanitizer10GetTlsSizeEv>:
 85c:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 860:	ldr	x0, [x0]
 864:	ret

0000000000000868 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>:
 868:	stp	x19, x20, [sp, #-64]!
 86c:	stp	x21, x22, [sp, #16]
 870:	stp	x23, x30, [sp, #32]
 874:	and	w23, w0, #0xff
 878:	mov	x20, x1
 87c:	mov	x22, x2
 880:	mov	x19, x3
 884:	mov	x21, x4
 888:	bl	844 <_ZN11__sanitizer10ThreadSelfEv>
 88c:	str	x0, [x19]
 890:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 894:	ldr	x0, [x0]
 898:	str	x0, [x21]
 89c:	add	x2, sp, #0x30
 8a0:	add	x1, sp, #0x38
 8a4:	mov	w0, w23
 8a8:	bl	504 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 8ac:	ldr	x1, [sp, #48]
 8b0:	str	x1, [x20]
 8b4:	ldr	x0, [sp, #56]
 8b8:	sub	x0, x0, x1
 8bc:	str	x0, [x22]
 8c0:	cbnz	w23, 90c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xa4>
 8c4:	ldr	x3, [x19]
 8c8:	ldr	x4, [x20]
 8cc:	cmp	x3, x4
 8d0:	b.ls	90c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xa4>  // b.plast
 8d4:	add	x1, x0, x4
 8d8:	cmp	x3, x1
 8dc:	b.cs	90c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xa4>  // b.hs, b.nlast
 8e0:	ldr	x2, [x21]
 8e4:	add	x3, x3, x2
 8e8:	cmp	x4, x3
 8ec:	b.cs	91c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xb4>  // b.hs, b.nlast
 8f0:	cmp	x1, x3
 8f4:	b.cc	934 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>  // b.lo, b.ul, b.last
 8f8:	sub	x0, x0, x2
 8fc:	str	x0, [x22]
 900:	ldr	x1, [x20]
 904:	add	x0, x1, x0
 908:	str	x0, [x19]
 90c:	ldp	x21, x22, [sp, #16]
 910:	ldp	x23, x30, [sp, #32]
 914:	ldp	x19, x20, [sp], #64
 918:	ret
 91c:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 920:	add	x2, x2, #0x0
 924:	mov	w1, #0x203                 	// #515
 928:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 92c:	add	x0, x0, #0x0
 930:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 934:	mov	x4, x1
 938:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 93c:	add	x2, x2, #0x0
 940:	mov	w1, #0x204                 	// #516
 944:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 948:	add	x0, x0, #0x0
 94c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000950 <_ZN11__sanitizer13ListOfModules4initEv>:
 950:	stp	x19, x20, [sp, #-48]!
 954:	stp	x21, x30, [sp, #16]
 958:	mov	x19, x0
 95c:	ldrb	w0, [x0, #24]
 960:	cbz	w0, 9cc <_ZN11__sanitizer13ListOfModules4initEv+0x7c>
 964:	ldr	x20, [x19]
 968:	ldr	x21, [x19, #16]
 96c:	add	x21, x21, x21, lsl #3
 970:	add	x21, x20, x21, lsl #3
 974:	cmp	x20, x21
 978:	b.eq	990 <_ZN11__sanitizer13ListOfModules4initEv+0x40>  // b.none
 97c:	mov	x0, x20
 980:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 984:	add	x20, x20, #0x48
 988:	cmp	x21, x20
 98c:	b.ne	97c <_ZN11__sanitizer13ListOfModules4initEv+0x2c>  // b.any
 990:	str	xzr, [x19, #16]
 994:	mov	w0, #0x1                   	// #1
 998:	strb	w0, [x19, #24]
 99c:	stur	wzr, [sp, #41]
 9a0:	sturh	wzr, [sp, #45]
 9a4:	strb	wzr, [sp, #47]
 9a8:	strb	w0, [sp, #40]
 9ac:	str	x19, [sp, #32]
 9b0:	add	x1, sp, #0x20
 9b4:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 9b8:	add	x0, x0, #0x0
 9bc:	bl	0 <dl_iterate_phdr>
 9c0:	ldp	x21, x30, [sp, #16]
 9c4:	ldp	x19, x20, [sp], #48
 9c8:	ret
 9cc:	str	xzr, [x19, #8]
 9d0:	str	xzr, [x19, #16]
 9d4:	str	xzr, [x19]
 9d8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9dc:	ldr	x0, [x0]
 9e0:	ldr	x0, [x0]
 9e4:	cbz	x0, a54 <_ZN11__sanitizer13ListOfModules4initEv+0x104>
 9e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9ec:	ldr	x0, [x0]
 9f0:	ldr	x1, [x0]
 9f4:	sub	x0, x1, #0x1
 9f8:	tst	x0, x1
 9fc:	b.ne	a68 <_ZN11__sanitizer13ListOfModules4initEv+0x118>  // b.any
 a00:	add	x20, x1, #0x11f, lsl #12
 a04:	add	x20, x20, #0xfff
 a08:	neg	x1, x1
 a0c:	and	x20, x20, x1
 a10:	mov	w2, #0x0                   	// #0
 a14:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 a18:	add	x1, x1, #0x0
 a1c:	mov	x0, x20
 a20:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a24:	mov	x21, x0
 a28:	ldr	x2, [x19, #16]
 a2c:	add	x2, x2, x2, lsl #3
 a30:	lsl	x2, x2, #3
 a34:	ldr	x1, [x19]
 a38:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a3c:	ldr	x1, [x19, #8]
 a40:	ldr	x0, [x19]
 a44:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a48:	str	x21, [x19]
 a4c:	str	x20, [x19, #8]
 a50:	b	994 <_ZN11__sanitizer13ListOfModules4initEv+0x44>
 a54:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a58:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a5c:	ldr	x1, [x1]
 a60:	str	x0, [x1]
 a64:	b	9e8 <_ZN11__sanitizer13ListOfModules4initEv+0x98>
 a68:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 a6c:	add	x0, x0, #0x0
 a70:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a74:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000a78 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>:
 a78:	stp	x19, x20, [sp, #-32]!
 a7c:	stp	x21, x30, [sp, #16]
 a80:	mov	x20, x0
 a84:	ldrb	w0, [x0, #24]
 a88:	cbz	w0, ad8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x60>
 a8c:	ldr	x19, [x20]
 a90:	ldr	x21, [x20, #16]
 a94:	add	x21, x21, x21, lsl #3
 a98:	add	x21, x19, x21, lsl #3
 a9c:	cmp	x19, x21
 aa0:	b.eq	ab8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x40>  // b.none
 aa4:	mov	x0, x19
 aa8:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 aac:	add	x19, x19, #0x48
 ab0:	cmp	x21, x19
 ab4:	b.ne	aa4 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x2c>  // b.any
 ab8:	str	xzr, [x20, #16]
 abc:	mov	w0, #0x1                   	// #1
 ac0:	strb	w0, [x20, #24]
 ac4:	mov	x0, x20
 ac8:	bl	0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 acc:	ldp	x21, x30, [sp, #16]
 ad0:	ldp	x19, x20, [sp], #32
 ad4:	ret
 ad8:	str	xzr, [x20, #8]
 adc:	str	xzr, [x20, #16]
 ae0:	str	xzr, [x20]
 ae4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 ae8:	ldr	x0, [x0]
 aec:	ldr	x0, [x0]
 af0:	cbz	x0, b60 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xe8>
 af4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 af8:	ldr	x0, [x0]
 afc:	ldr	x0, [x0]
 b00:	sub	x1, x0, #0x1
 b04:	tst	x1, x0
 b08:	b.ne	b74 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xfc>  // b.any
 b0c:	add	x19, x0, #0x11f, lsl #12
 b10:	add	x19, x19, #0xfff
 b14:	neg	x0, x0
 b18:	and	x19, x19, x0
 b1c:	mov	w2, #0x0                   	// #0
 b20:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 b24:	add	x1, x1, #0x0
 b28:	mov	x0, x19
 b2c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b30:	mov	x21, x0
 b34:	ldr	x1, [x20, #16]
 b38:	add	x1, x1, x1, lsl #3
 b3c:	lsl	x2, x1, #3
 b40:	ldr	x1, [x20]
 b44:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b48:	ldr	x1, [x20, #8]
 b4c:	ldr	x0, [x20]
 b50:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b54:	str	x21, [x20]
 b58:	str	x19, [x20, #8]
 b5c:	b	abc <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x44>
 b60:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 b64:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 b68:	ldr	x1, [x1]
 b6c:	str	x0, [x1]
 b70:	b	af4 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x7c>
 b74:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 b78:	add	x0, x0, #0x0
 b7c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 b80:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000b84 <_ZN11__sanitizer6GetRSSEv>:
 b84:	stp	x19, x20, [sp, #-96]!
 b88:	str	x30, [sp, #16]
 b8c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 b90:	ldr	x0, [x0]
 b94:	ldrb	w0, [x0, #160]
 b98:	cbnz	w0, bac <_ZN11__sanitizer6GetRSSEv+0x28>
 b9c:	bl	3c <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 ba0:	ldr	x30, [sp, #16]
 ba4:	ldp	x19, x20, [sp], #96
 ba8:	ret
 bac:	mov	x2, #0x0                   	// #0
 bb0:	mov	w1, #0x0                   	// #0
 bb4:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 bb8:	add	x0, x0, #0x0
 bbc:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 bc0:	mov	w19, w0
 bc4:	cmn	w0, #0x1
 bc8:	b.eq	cb4 <_ZN11__sanitizer6GetRSSEv+0x130>  // b.none
 bcc:	mov	x2, #0x3f                  	// #63
 bd0:	add	x1, sp, #0x20
 bd4:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 bd8:	mov	x20, x0
 bdc:	mov	w0, w19
 be0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 be4:	mov	x0, #0x0                   	// #0
 be8:	cmp	x20, #0x0
 bec:	b.le	ba0 <_ZN11__sanitizer6GetRSSEv+0x1c>
 bf0:	add	x0, sp, #0x20
 bf4:	strb	wzr, [x0, x20]
 bf8:	ldrb	w0, [sp, #32]
 bfc:	sub	w0, w0, #0x30
 c00:	and	w0, w0, #0xff
 c04:	cmp	w0, #0x9
 c08:	b.hi	ce0 <_ZN11__sanitizer6GetRSSEv+0x15c>  // b.pmore
 c0c:	add	x1, sp, #0x20
 c10:	ldrb	w0, [x1, #1]!
 c14:	sub	w0, w0, #0x30
 c18:	and	w0, w0, #0xff
 c1c:	cmp	w0, #0x9
 c20:	b.ls	c10 <_ZN11__sanitizer6GetRSSEv+0x8c>  // b.plast
 c24:	ldrb	w2, [x1]
 c28:	sub	w0, w2, #0x30
 c2c:	and	w0, w0, #0xff
 c30:	cmp	w2, #0x0
 c34:	ccmp	w0, #0x9, #0x0, ne  // ne = any
 c38:	b.ls	cc4 <_ZN11__sanitizer6GetRSSEv+0x140>  // b.plast
 c3c:	ldrb	w2, [x1, #1]!
 c40:	sub	w0, w2, #0x30
 c44:	and	w0, w0, #0xff
 c48:	cmp	w2, #0x0
 c4c:	ccmp	w0, #0x9, #0x0, ne  // ne = any
 c50:	b.hi	c3c <_ZN11__sanitizer6GetRSSEv+0xb8>  // b.pmore
 c54:	ldrb	w2, [x1]
 c58:	sub	w0, w2, #0x30
 c5c:	and	w0, w0, #0xff
 c60:	cmp	w0, #0x9
 c64:	b.hi	cbc <_ZN11__sanitizer6GetRSSEv+0x138>  // b.pmore
 c68:	mov	x19, #0x0                   	// #0
 c6c:	add	x19, x19, x19, lsl #2
 c70:	and	x2, x2, #0xff
 c74:	add	x2, x2, x19, lsl #1
 c78:	sub	x19, x2, #0x30
 c7c:	ldrb	w2, [x1, #1]!
 c80:	sub	w0, w2, #0x30
 c84:	and	w0, w0, #0xff
 c88:	cmp	w0, #0x9
 c8c:	b.ls	c6c <_ZN11__sanitizer6GetRSSEv+0xe8>  // b.plast
 c90:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 c94:	ldr	x0, [x0]
 c98:	ldr	x0, [x0]
 c9c:	cbz	x0, ccc <_ZN11__sanitizer6GetRSSEv+0x148>
 ca0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 ca4:	ldr	x0, [x0]
 ca8:	ldr	x0, [x0]
 cac:	mul	x0, x19, x0
 cb0:	b	ba0 <_ZN11__sanitizer6GetRSSEv+0x1c>
 cb4:	bl	3c <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 cb8:	b	ba0 <_ZN11__sanitizer6GetRSSEv+0x1c>
 cbc:	mov	x19, #0x0                   	// #0
 cc0:	b	c90 <_ZN11__sanitizer6GetRSSEv+0x10c>
 cc4:	mov	x19, #0x0                   	// #0
 cc8:	b	c90 <_ZN11__sanitizer6GetRSSEv+0x10c>
 ccc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 cd0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 cd4:	ldr	x1, [x1]
 cd8:	str	x0, [x1]
 cdc:	b	ca0 <_ZN11__sanitizer6GetRSSEv+0x11c>
 ce0:	add	x1, sp, #0x20
 ce4:	b	c24 <_ZN11__sanitizer6GetRSSEv+0xa0>

0000000000000ce8 <_ZN11__sanitizer15GetNumberOfCPUsEv>:
 ce8:	str	x30, [sp, #-144]!
 cec:	add	x2, sp, #0x10
 cf0:	mov	x1, #0x80                  	// #128
 cf4:	mov	w0, #0x0                   	// #0
 cf8:	bl	0 <sched_getaffinity>
 cfc:	cbnz	w0, d14 <_ZN11__sanitizer15GetNumberOfCPUsEv+0x2c>
 d00:	add	x1, sp, #0x10
 d04:	mov	x0, #0x80                  	// #128
 d08:	bl	0 <__sched_cpucount>
 d0c:	ldr	x30, [sp], #144
 d10:	ret
 d14:	sxtw	x3, w0
 d18:	mov	x4, #0x0                   	// #0
 d1c:	adrp	x2, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 d20:	add	x2, x2, #0x0
 d24:	mov	w1, #0x2bb                 	// #699
 d28:	adrp	x0, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 d2c:	add	x0, x0, #0x0
 d30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000d34 <_ZN11__sanitizer14AndroidLogInitEv>:
 d34:	ret

0000000000000d38 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>:
 d38:	str	x30, [sp, #-16]!
 d3c:	mov	x2, x0
 d40:	adrp	x1, 0 <_ZN11__sanitizerL12procmapsInitEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 d44:	add	x1, x1, #0x0
 d48:	mov	w0, #0x6                   	// #6
 d4c:	bl	0 <syslog>
 d50:	ldr	x30, [sp], #16
 d54:	ret

0000000000000d58 <_ZN11__sanitizer15SetAbortMessageEPKc>:
 d58:	ret

0000000000000d5c <_ZN11__sanitizer18LogMessageOnPrintfEPKc>:
 d5c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 d60:	ldr	x1, [x1]
 d64:	ldrb	w1, [x1, #49]
 d68:	cbz	w1, d7c <_ZN11__sanitizer18LogMessageOnPrintfEPKc+0x20>
 d6c:	str	x30, [sp, #-16]!
 d70:	bl	0 <_ZN11__sanitizer13WriteToSyslogEPKc>
 d74:	ldr	x30, [sp], #16
 d78:	ret
 d7c:	ret

0000000000000d80 <_ZN11__sanitizer17MonotonicNanoTimeEv>:
 d80:	str	x30, [sp, #-32]!
 d84:	adrp	x0, 0 <__progname>
 d88:	ldr	x0, [x0]
 d8c:	cbz	x0, da8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x28>
 d90:	adrp	x0, 0 <__progname>
 d94:	ldr	x0, [x0]
 d98:	ldr	x0, [x0]
 d9c:	cbz	x0, da8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x28>
 da0:	ldrb	w0, [x0]
 da4:	cbnz	w0, dd0 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x50>
 da8:	add	x1, sp, #0x10
 dac:	mov	w0, #0x1                   	// #1
 db0:	bl	0 <_ZN11__sanitizer22internal_clock_gettimeEiPv>
 db4:	ldr	x2, [sp, #16]
 db8:	mov	x0, #0xca00                	// #51712
 dbc:	movk	x0, #0x3b9a, lsl #16
 dc0:	ldr	x1, [sp, #24]
 dc4:	madd	x0, x2, x0, x1
 dc8:	ldr	x30, [sp], #32
 dcc:	ret
 dd0:	adrp	x0, 0 <real_clock_gettime>
 dd4:	ldr	x0, [x0]
 dd8:	cbz	x0, dec <_ZN11__sanitizer17MonotonicNanoTimeEv+0x6c>
 ddc:	add	x1, sp, #0x10
 de0:	mov	w0, #0x1                   	// #1
 de4:	bl	0 <real_clock_gettime>
 de8:	b	db4 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x34>
 dec:	add	x1, sp, #0x10
 df0:	mov	w0, #0x1                   	// #1
 df4:	bl	0 <clock_gettime>
 df8:	b	db4 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x34>

sanitizer_linux_s390.o:     file format elf64-littleaarch64


sanitizer_mac.o:     file format elf64-littleaarch64


sanitizer_mac_libcdep.o:     file format elf64-littleaarch64


sanitizer_netbsd.o:     file format elf64-littleaarch64


sanitizer_openbsd.o:     file format elf64-littleaarch64


sanitizer_persistent_allocator.o:     file format elf64-littleaarch64


sanitizer_platform_limits_linux.o:     file format elf64-littleaarch64


sanitizer_platform_limits_openbsd.o:     file format elf64-littleaarch64


sanitizer_platform_limits_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22__sanitizer_in_addr_szEi>:
   0:	cmp	w0, #0x2
   4:	b.eq	18 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x18>  // b.none
   8:	cmp	w0, #0xa
   c:	cset	x0, eq  // eq = none
  10:	lsl	x0, x0, #4
  14:	ret
  18:	mov	x0, #0x4                   	// #4
  1c:	b	14 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x14>

sanitizer_platform_limits_solaris.o:     file format elf64-littleaarch64


sanitizer_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18GetMmapGranularityEv>:
   0:	str	x30, [sp, #-16]!
   4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
   8:	ldr	x30, [sp], #16
   c:	ret

0000000000000010 <_ZN11__sanitizer9MmapOrDieEmPKcb>:
  10:	stp	x19, x20, [sp, #-64]!
  14:	stp	x21, x22, [sp, #16]
  18:	str	x30, [sp, #32]
  1c:	mov	x19, x0
  20:	mov	x20, x1
  24:	and	w21, w2, #0xff
  28:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  2c:	ldr	x0, [x0]
  30:	ldr	x0, [x0]
  34:	cbz	x0, a8 <_ZN11__sanitizer9MmapOrDieEmPKcb+0x98>
  38:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  3c:	ldr	x0, [x0]
  40:	ldr	x2, [x0]
  44:	sub	x0, x2, #0x1
  48:	tst	x2, x0
  4c:	b.ne	bc <_ZN11__sanitizer9MmapOrDieEmPKcb+0xac>  // b.any
  50:	add	x19, x19, x0
  54:	neg	x2, x2
  58:	and	x19, x19, x2
  5c:	mov	x5, #0x0                   	// #0
  60:	mov	w4, #0xffffffff            	// #-1
  64:	mov	w3, #0x22                  	// #34
  68:	mov	w2, #0x3                   	// #3
  6c:	mov	x1, x19
  70:	mov	x0, #0x0                   	// #0
  74:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
  78:	mov	x22, x0
  7c:	add	x1, sp, #0x3c
  80:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
  84:	and	w1, w0, #0xff
  88:	cbnz	w1, cc <_ZN11__sanitizer9MmapOrDieEmPKcb+0xbc>
  8c:	mov	x0, x19
  90:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
  94:	mov	x0, x22
  98:	ldp	x21, x22, [sp, #16]
  9c:	ldr	x30, [sp, #32]
  a0:	ldp	x19, x20, [sp], #64
  a4:	ret
  a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  ac:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
  b0:	ldr	x1, [x1]
  b4:	str	x0, [x1]
  b8:	b	38 <_ZN11__sanitizer9MmapOrDieEmPKcb+0x28>
  bc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  c8:	bl	0 <_ZN11__sanitizer3DieEv>
  cc:	mov	w4, w21
  d0:	ldr	w3, [sp, #60]
  d4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  d8:	add	x2, x2, #0x0
  dc:	mov	x1, x20
  e0:	mov	x0, x19
  e4:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000000e8 <_ZN11__sanitizer10UnmapOrDieEPvm>:
  e8:	cmp	x0, #0x0
  ec:	ccmp	x1, #0x0, #0x4, ne  // ne = any
  f0:	b.ne	f8 <_ZN11__sanitizer10UnmapOrDieEPvm+0x10>  // b.any
  f4:	ret
  f8:	stp	x19, x20, [sp, #-32]!
  fc:	str	x30, [sp, #16]
 100:	mov	x20, x0
 104:	mov	x19, x1
 108:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
 10c:	mov	x1, #0x0                   	// #0
 110:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 114:	and	w0, w0, #0xff
 118:	cbnz	w0, 130 <_ZN11__sanitizer10UnmapOrDieEPvm+0x48>
 11c:	mov	x0, x19
 120:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
 124:	ldr	x30, [sp, #16]
 128:	ldp	x19, x20, [sp], #32
 12c:	ret
 130:	mov	x4, x20
 134:	mov	x3, x19
 138:	mov	x2, x19
 13c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 140:	ldr	x0, [x0]
 144:	ldr	x1, [x0]
 148:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 154:	mov	x4, #0x0                   	// #0
 158:	mov	x3, #0x0                   	// #0
 15c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 160:	add	x2, x2, #0x0
 164:	mov	w1, #0x3c                  	// #60
 168:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 16c:	add	x0, x0, #0x0
 170:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000174 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>:
 174:	stp	x19, x20, [sp, #-48]!
 178:	stp	x21, x30, [sp, #16]
 17c:	mov	x19, x0
 180:	mov	x21, x1
 184:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 188:	ldr	x1, [x1]
 18c:	ldr	x1, [x1]
 190:	cbz	x1, 200 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x8c>
 194:	adrp	x2, 0 <_ZN11__sanitizer14PageSizeCachedE>
 198:	ldr	x2, [x2]
 19c:	ldr	x2, [x2]
 1a0:	sub	x1, x2, #0x1
 1a4:	tst	x2, x1
 1a8:	b.ne	214 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0xa0>  // b.any
 1ac:	add	x19, x19, x1
 1b0:	neg	x2, x2
 1b4:	and	x19, x19, x2
 1b8:	mov	x5, #0x0                   	// #0
 1bc:	mov	w4, #0xffffffff            	// #-1
 1c0:	mov	w3, #0x22                  	// #34
 1c4:	mov	w2, #0x3                   	// #3
 1c8:	mov	x1, x19
 1cc:	mov	x0, #0x0                   	// #0
 1d0:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 1d4:	mov	x20, x0
 1d8:	add	x1, sp, #0x2c
 1dc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 1e0:	and	w0, w0, #0xff
 1e4:	cbnz	w0, 224 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0xb0>
 1e8:	mov	x0, x19
 1ec:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 1f0:	mov	x0, x20
 1f4:	ldp	x21, x30, [sp, #16]
 1f8:	ldp	x19, x20, [sp], #48
 1fc:	ret
 200:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 204:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 208:	ldr	x1, [x1]
 20c:	str	x0, [x1]
 210:	b	194 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x20>
 214:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 218:	add	x0, x0, #0x0
 21c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 220:	bl	0 <_ZN11__sanitizer3DieEv>
 224:	ldr	w3, [sp, #44]
 228:	mov	x0, #0x0                   	// #0
 22c:	cmp	w3, #0xc
 230:	b.eq	1f4 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x80>  // b.none
 234:	mov	w4, #0x0                   	// #0
 238:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 23c:	add	x2, x2, #0x0
 240:	mov	x1, x21
 244:	mov	x0, x19
 248:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

000000000000024c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>:
 24c:	stp	x19, x20, [sp, #-48]!
 250:	stp	x21, x22, [sp, #16]
 254:	stp	x23, x30, [sp, #32]
 258:	mov	x19, x0
 25c:	sub	x0, x0, #0x1
 260:	tst	x0, x19
 264:	b.ne	2bc <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x70>  // b.any
 268:	mov	x20, x1
 26c:	mov	x1, x2
 270:	sub	x22, x20, #0x1
 274:	tst	x20, x22
 278:	b.ne	2dc <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x90>  // b.any
 27c:	add	x21, x19, x20
 280:	mov	x0, x21
 284:	bl	174 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 288:	mov	x23, x0
 28c:	cbz	x0, 2ac <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x60>
 290:	add	x21, x0, x21
 294:	tst	x0, x22
 298:	b.ne	2fc <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xb0>  // b.any
 29c:	add	x0, x23, x19
 2a0:	cmp	x21, x0
 2a4:	b.ne	318 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xcc>  // b.any
 2a8:	mov	x0, x23
 2ac:	ldp	x21, x22, [sp, #16]
 2b0:	ldp	x23, x30, [sp, #32]
 2b4:	ldp	x19, x20, [sp], #48
 2b8:	ret
 2bc:	mov	x4, #0x0                   	// #0
 2c0:	mov	x3, #0x0                   	// #0
 2c4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2c8:	add	x2, x2, #0x0
 2cc:	mov	w1, #0x55                  	// #85
 2d0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2d4:	add	x0, x0, #0x0
 2d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2dc:	mov	x4, #0x0                   	// #0
 2e0:	mov	x3, #0x0                   	// #0
 2e4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2e8:	add	x2, x2, #0x0
 2ec:	mov	w1, #0x56                  	// #86
 2f0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2f4:	add	x0, x0, #0x0
 2f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2fc:	add	x22, x0, x22
 300:	neg	x20, x20
 304:	and	x20, x22, x20
 308:	sub	x1, x20, x0
 30c:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 310:	mov	x23, x20
 314:	b	29c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x50>
 318:	sub	x1, x21, x0
 31c:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 320:	b	2a8 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x5c>

0000000000000324 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc>:
 324:	stp	x19, x20, [sp, #-48]!
 328:	stp	x21, x30, [sp, #16]
 32c:	mov	x19, x0
 330:	mov	x20, x1
 334:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 338:	ldr	x0, [x0]
 33c:	ldr	x0, [x0]
 340:	cbz	x0, 3ac <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x88>
 344:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 348:	ldr	x0, [x0]
 34c:	ldr	x2, [x0]
 350:	sub	x0, x2, #0x1
 354:	tst	x2, x0
 358:	b.ne	3c0 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x9c>  // b.any
 35c:	add	x0, x19, x0
 360:	neg	x1, x2
 364:	mov	x5, #0x0                   	// #0
 368:	mov	w4, #0xffffffff            	// #-1
 36c:	mov	w3, #0x4022                	// #16418
 370:	mov	w2, #0x3                   	// #3
 374:	and	x1, x0, x1
 378:	mov	x0, #0x0                   	// #0
 37c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 380:	mov	x21, x0
 384:	add	x1, sp, #0x2c
 388:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 38c:	and	w1, w0, #0xff
 390:	cbnz	w1, 3d0 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0xac>
 394:	mov	x0, x19
 398:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 39c:	mov	x0, x21
 3a0:	ldp	x21, x30, [sp, #16]
 3a4:	ldp	x19, x20, [sp], #48
 3a8:	ret
 3ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3b0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3b4:	ldr	x1, [x1]
 3b8:	str	x0, [x1]
 3bc:	b	344 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x20>
 3c0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 3c4:	add	x0, x0, #0x0
 3c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3cc:	bl	0 <_ZN11__sanitizer3DieEv>
 3d0:	mov	w4, #0x0                   	// #0
 3d4:	ldr	w3, [sp, #44]
 3d8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 3dc:	add	x2, x2, #0x0
 3e0:	mov	x1, x20
 3e4:	mov	x0, x19
 3e8:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000003ec <_ZN11__sanitizer13MmapFixedImplEmmb>:
 3ec:	stp	x19, x20, [sp, #-96]!
 3f0:	stp	x21, x22, [sp, #16]
 3f4:	str	x30, [sp, #32]
 3f8:	mov	x21, x0
 3fc:	mov	x20, x1
 400:	and	w22, w2, #0xff
 404:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 408:	ldr	x0, [x0]
 40c:	ldr	x0, [x0]
 410:	cbz	x0, 480 <_ZN11__sanitizer13MmapFixedImplEmmb+0x94>
 414:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 418:	ldr	x0, [x0]
 41c:	ldr	x3, [x0]
 420:	neg	x6, x3
 424:	and	x0, x6, x21
 428:	sub	x2, x3, #0x1
 42c:	tst	x3, x2
 430:	b.ne	494 <_ZN11__sanitizer13MmapFixedImplEmmb+0xa8>  // b.any
 434:	add	x1, x20, x2
 438:	mov	x5, #0x0                   	// #0
 43c:	mov	w4, #0xffffffff            	// #-1
 440:	mov	w3, #0x32                  	// #50
 444:	mov	w2, #0x3                   	// #3
 448:	and	x1, x1, x6
 44c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 450:	mov	x19, x0
 454:	add	x1, sp, #0x5c
 458:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 45c:	and	w0, w0, #0xff
 460:	cbnz	w0, 4a4 <_ZN11__sanitizer13MmapFixedImplEmmb+0xb8>
 464:	mov	x0, x20
 468:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 46c:	mov	x0, x19
 470:	ldp	x21, x22, [sp, #16]
 474:	ldr	x30, [sp, #32]
 478:	ldp	x19, x20, [sp], #96
 47c:	ret
 480:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 484:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 488:	ldr	x1, [x1]
 48c:	str	x0, [x1]
 490:	b	414 <_ZN11__sanitizer13MmapFixedImplEmmb+0x28>
 494:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 498:	add	x0, x0, #0x0
 49c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4a0:	bl	0 <_ZN11__sanitizer3DieEv>
 4a4:	cbz	w22, 4bc <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>
 4a8:	ldr	w0, [sp, #92]
 4ac:	cmp	w0, #0xc
 4b0:	b.ne	4bc <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>  // b.any
 4b4:	mov	x0, #0x0                   	// #0
 4b8:	b	470 <_ZN11__sanitizer13MmapFixedImplEmmb+0x84>
 4bc:	add	x19, sp, #0x30
 4c0:	mov	x3, x21
 4c4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 4c8:	add	x2, x2, #0x0
 4cc:	mov	x1, #0x28                  	// #40
 4d0:	mov	x0, x19
 4d4:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 4d8:	mov	w4, #0x0                   	// #0
 4dc:	ldr	w3, [sp, #92]
 4e0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 4e4:	add	x2, x2, #0x0
 4e8:	mov	x1, x19
 4ec:	mov	x0, x20
 4f0:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000004f4 <_ZN11__sanitizer14MmapFixedOrDieEmm>:
 4f4:	str	x30, [sp, #-16]!
 4f8:	mov	w2, #0x0                   	// #0
 4fc:	bl	3ec <_ZN11__sanitizer13MmapFixedImplEmmb>
 500:	ldr	x30, [sp], #16
 504:	ret

0000000000000508 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>:
 508:	str	x30, [sp, #-16]!
 50c:	mov	w2, #0x1                   	// #1
 510:	bl	3ec <_ZN11__sanitizer13MmapFixedImplEmmb>
 514:	ldr	x30, [sp], #16
 518:	ret

000000000000051c <_ZN11__sanitizer16MprotectNoAccessEmm>:
 51c:	str	x30, [sp, #-16]!
 520:	mov	w2, #0x0                   	// #0
 524:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 528:	cmp	w0, #0x0
 52c:	cset	w0, eq  // eq = none
 530:	ldr	x30, [sp], #16
 534:	ret

0000000000000538 <_ZN11__sanitizer16MprotectReadOnlyEmm>:
 538:	str	x30, [sp, #-16]!
 53c:	mov	w2, #0x1                   	// #1
 540:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 544:	cmp	w0, #0x0
 548:	cset	w0, eq  // eq = none
 54c:	ldr	x30, [sp], #16
 550:	ret

0000000000000554 <_ZN11__sanitizer19MprotectMallocZonesEPvi>:
 554:	ret

0000000000000558 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>:
 558:	stp	x19, x20, [sp, #-32]!
 55c:	str	x30, [sp, #16]
 560:	mov	w3, w1
 564:	mov	x20, x2
 568:	mov	w1, #0x241                 	// #577
 56c:	cmp	w3, #0x1
 570:	b.eq	584 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x2c>  // b.none
 574:	cmp	w3, #0x2
 578:	b.eq	5b0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x58>  // b.none
 57c:	cmp	w3, #0x0
 580:	csel	w1, w1, wzr, ne  // ne = any
 584:	mov	w2, #0x1b0                 	// #432
 588:	bl	0 <_ZN11__sanitizer13internal_openEPKcij>
 58c:	mov	x19, x0
 590:	mov	x1, x20
 594:	sxtw	x0, w0
 598:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 59c:	ands	w0, w0, #0xff
 5a0:	csinv	w0, w19, wzr, eq  // eq = none
 5a4:	ldr	x30, [sp, #16]
 5a8:	ldp	x19, x20, [sp], #32
 5ac:	ret
 5b0:	mov	w1, #0x42                  	// #66
 5b4:	b	584 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x2c>

00000000000005b8 <_ZN11__sanitizer9CloseFileEi>:
 5b8:	str	x30, [sp, #-16]!
 5bc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 5c0:	ldr	x30, [sp], #16
 5c4:	ret

00000000000005c8 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>:
 5c8:	stp	x19, x20, [sp, #-32]!
 5cc:	stp	x21, x30, [sp, #16]
 5d0:	mov	x19, x3
 5d4:	mov	x20, x4
 5d8:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 5dc:	mov	x21, x0
 5e0:	mov	x1, x20
 5e4:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 5e8:	and	w1, w0, #0xff
 5ec:	mov	w0, #0x0                   	// #0
 5f0:	cbnz	w1, 600 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x38>
 5f4:	mov	w0, #0x1                   	// #1
 5f8:	cbz	x19, 600 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x38>
 5fc:	str	x21, [x19]
 600:	ldp	x21, x30, [sp, #16]
 604:	ldp	x19, x20, [sp], #32
 608:	ret

000000000000060c <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>:
 60c:	stp	x19, x20, [sp, #-32]!
 610:	stp	x21, x30, [sp, #16]
 614:	mov	x19, x3
 618:	mov	x20, x4
 61c:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 620:	mov	x21, x0
 624:	mov	x1, x20
 628:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 62c:	and	w1, w0, #0xff
 630:	mov	w0, #0x0                   	// #0
 634:	cbnz	w1, 644 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x38>
 638:	mov	w0, #0x1                   	// #1
 63c:	cbz	x19, 644 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x38>
 640:	str	x21, [x19]
 644:	ldp	x21, x30, [sp, #16]
 648:	ldp	x19, x20, [sp], #32
 64c:	ret

0000000000000650 <_ZN11__sanitizer10RenameFileEPKcS1_Pi>:
 650:	stp	x19, x30, [sp, #-16]!
 654:	mov	x19, x2
 658:	bl	0 <_ZN11__sanitizer15internal_renameEPKcS1_>
 65c:	mov	x1, x19
 660:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 664:	and	w0, w0, #0xff
 668:	eor	w0, w0, #0x1
 66c:	ldp	x19, x30, [sp], #16
 670:	ret

0000000000000674 <_ZN11__sanitizer15MapFileToMemoryEPKcPm>:
 674:	stp	x19, x20, [sp, #-48]!
 678:	stp	x21, x22, [sp, #16]
 67c:	str	x30, [sp, #32]
 680:	mov	x21, x1
 684:	mov	x2, #0x0                   	// #0
 688:	mov	w1, #0x0                   	// #0
 68c:	bl	558 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 690:	cmn	w0, #0x1
 694:	b.eq	724 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xb0>  // b.none
 698:	mov	w20, w0
 69c:	bl	0 <_ZN11__sanitizer17internal_filesizeEi>
 6a0:	mov	x19, x0
 6a4:	cmn	x0, #0x1
 6a8:	b.eq	744 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xd0>  // b.none
 6ac:	cbz	x0, 764 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xf0>
 6b0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6b4:	ldr	x0, [x0]
 6b8:	ldr	x0, [x0]
 6bc:	cbz	x0, 784 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x110>
 6c0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6c4:	ldr	x0, [x0]
 6c8:	ldr	x2, [x0]
 6cc:	sub	x1, x2, #0x1
 6d0:	ands	x22, x2, x1
 6d4:	b.ne	798 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x124>  // b.any
 6d8:	add	x19, x19, x1
 6dc:	neg	x2, x2
 6e0:	and	x1, x19, x2
 6e4:	str	x1, [x21]
 6e8:	mov	x5, #0x0                   	// #0
 6ec:	mov	w4, w20
 6f0:	mov	w3, #0x2                   	// #2
 6f4:	mov	w2, #0x1                   	// #1
 6f8:	mov	x0, #0x0                   	// #0
 6fc:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 700:	mov	x19, x0
 704:	mov	x1, #0x0                   	// #0
 708:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 70c:	ands	w0, w0, #0xff
 710:	csel	x0, x22, x19, ne  // ne = any
 714:	ldp	x21, x22, [sp, #16]
 718:	ldr	x30, [sp, #32]
 71c:	ldp	x19, x20, [sp], #48
 720:	ret
 724:	mov	x4, #0x0                   	// #0
 728:	mov	x3, #0x0                   	// #0
 72c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 730:	add	x2, x2, #0x0
 734:	mov	w1, #0xc9                  	// #201
 738:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 73c:	add	x0, x0, #0x0
 740:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 744:	mov	x4, #0xffffffffffffffff    	// #-1
 748:	mov	x3, x4
 74c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 750:	add	x2, x2, #0x0
 754:	mov	w1, #0xcb                  	// #203
 758:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 75c:	add	x0, x0, #0x0
 760:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 764:	mov	x4, #0x0                   	// #0
 768:	mov	x3, #0x0                   	// #0
 76c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 770:	add	x2, x2, #0x0
 774:	mov	w1, #0xcc                  	// #204
 778:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 77c:	add	x0, x0, #0x0
 780:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 784:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 788:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 78c:	ldr	x1, [x1]
 790:	str	x0, [x1]
 794:	b	6c0 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x4c>
 798:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 79c:	add	x0, x0, #0x0
 7a0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 7a4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000007a8 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim>:
 7a8:	stp	x19, x20, [sp, #-64]!
 7ac:	stp	x21, x22, [sp, #16]
 7b0:	str	x30, [sp, #32]
 7b4:	mov	x22, x1
 7b8:	mov	w20, w2
 7bc:	mov	x21, x3
 7c0:	cmp	x0, #0x0
 7c4:	mov	x5, x3
 7c8:	mov	w4, w2
 7cc:	mov	x3, #0x11                  	// #17
 7d0:	csinc	x3, x3, xzr, ne  // ne = any
 7d4:	mov	w2, #0x3                   	// #3
 7d8:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 7dc:	mov	x19, x0
 7e0:	str	wzr, [sp, #60]
 7e4:	add	x1, sp, #0x3c
 7e8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 7ec:	and	w0, w0, #0xff
 7f0:	cbnz	w0, 808 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x60>
 7f4:	mov	x0, x19
 7f8:	ldp	x21, x22, [sp, #16]
 7fc:	ldr	x30, [sp, #32]
 800:	ldp	x19, x20, [sp], #64
 804:	ret
 808:	ldr	w5, [sp, #60]
 80c:	mov	x4, x19
 810:	mov	x3, x22
 814:	mov	x2, x21
 818:	mov	w1, w20
 81c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 820:	add	x0, x0, #0x0
 824:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 828:	mov	x0, #0x0                   	// #0
 82c:	b	7f8 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x50>

0000000000000830 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm>:
 830:	stp	x19, x20, [sp, #-160]!
 834:	stp	x21, x22, [sp, #16]
 838:	stp	x23, x30, [sp, #32]
 83c:	mov	x21, x0
 840:	mov	x20, x1
 844:	mov	w1, #0x1                   	// #1
 848:	add	x0, sp, #0x80
 84c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 850:	str	xzr, [sp, #72]
 854:	str	xzr, [sp, #80]
 858:	str	xzr, [sp, #120]
 85c:	add	x23, sp, #0x30
 860:	add	x22, sp, #0x80
 864:	mov	x1, x23
 868:	mov	x0, x22
 86c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 870:	and	w2, w0, #0xff
 874:	cbz	w2, 91c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xec>
 878:	ldr	x3, [sp, #48]
 87c:	ldr	x2, [sp, #56]
 880:	cmp	x3, x2
 884:	b.eq	864 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x34>  // b.none
 888:	cbz	x2, 8bc <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x8c>
 88c:	sub	x2, x2, #0x1
 890:	cmp	x3, x2
 894:	b.hi	8dc <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xac>  // b.pmore
 898:	cmp	x21, x20
 89c:	b.hi	8fc <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xcc>  // b.pmore
 8a0:	cmp	x2, x21
 8a4:	cset	w19, cc  // cc = lo, ul, last
 8a8:	cmp	x3, x20
 8ac:	cset	w0, hi  // hi = pmore
 8b0:	orr	w19, w19, w0
 8b4:	cbnz	w19, 864 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x34>
 8b8:	b	920 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xf0>
 8bc:	mov	x4, #0x0                   	// #0
 8c0:	mov	x3, #0x0                   	// #0
 8c4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8c8:	add	x2, x2, #0x0
 8cc:	mov	w1, #0xef                  	// #239
 8d0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8d4:	add	x0, x0, #0x0
 8d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 8dc:	mov	x4, #0x0                   	// #0
 8e0:	mov	x3, #0x0                   	// #0
 8e4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8e8:	add	x2, x2, #0x0
 8ec:	mov	w1, #0xe1                  	// #225
 8f0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8f4:	add	x0, x0, #0x0
 8f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 8fc:	mov	x4, #0x0                   	// #0
 900:	mov	x3, #0x0                   	// #0
 904:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 908:	add	x2, x2, #0x0
 90c:	mov	w1, #0xe2                  	// #226
 910:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 914:	add	x0, x0, #0x0
 918:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 91c:	mov	w19, #0x1                   	// #1
 920:	add	x0, sp, #0x80
 924:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 928:	mov	w0, w19
 92c:	ldp	x21, x22, [sp, #16]
 930:	ldp	x23, x30, [sp, #32]
 934:	ldp	x19, x20, [sp], #160
 938:	ret

000000000000093c <_ZN11__sanitizer14DumpProcessMapEv>:
 93c:	stp	x19, x20, [sp, #-160]!
 940:	stp	x21, x22, [sp, #16]
 944:	str	x30, [sp, #32]
 948:	mov	w1, #0x1                   	// #1
 94c:	add	x0, sp, #0x80
 950:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 954:	mov	w2, #0x0                   	// #0
 958:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 95c:	add	x1, x1, #0x0
 960:	mov	x0, #0xfff                 	// #4095
 964:	bl	10 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 968:	mov	x22, x0
 96c:	str	x0, [sp, #72]
 970:	mov	x0, #0xfff                 	// #4095
 974:	str	x0, [sp, #80]
 978:	str	xzr, [sp, #120]
 97c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 980:	add	x0, x0, #0x0
 984:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 988:	add	x21, sp, #0x30
 98c:	add	x20, sp, #0x80
 990:	adrp	x19, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 994:	add	x19, x19, #0x0
 998:	mov	x1, x21
 99c:	mov	x0, x20
 9a0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 9a4:	and	w0, w0, #0xff
 9a8:	cbz	w0, 9c4 <_ZN11__sanitizer14DumpProcessMapEv+0x88>
 9ac:	ldr	x3, [sp, #72]
 9b0:	ldr	x2, [sp, #56]
 9b4:	ldr	x1, [sp, #48]
 9b8:	mov	x0, x19
 9bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 9c0:	b	998 <_ZN11__sanitizer14DumpProcessMapEv+0x5c>
 9c4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 9c8:	add	x0, x0, #0x0
 9cc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 9d0:	mov	x1, #0xfff                 	// #4095
 9d4:	mov	x0, x22
 9d8:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9dc:	add	x0, sp, #0x80
 9e0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 9e4:	ldp	x21, x22, [sp, #16]
 9e8:	ldr	x30, [sp, #32]
 9ec:	ldp	x19, x20, [sp], #160
 9f0:	ret

00000000000009f4 <_ZN11__sanitizer6GetPwdEv>:
 9f4:	str	x30, [sp, #-16]!
 9f8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 9fc:	add	x0, x0, #0x0
 a00:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 a04:	ldr	x30, [sp], #16
 a08:	ret

0000000000000a0c <_ZN11__sanitizer15IsPathSeparatorEc>:
 a0c:	and	w0, w0, #0xff
 a10:	cmp	w0, #0x2f
 a14:	cset	w0, eq  // eq = none
 a18:	ret

0000000000000a1c <_ZN11__sanitizer14IsAbsolutePathEPKc>:
 a1c:	cbz	x0, a30 <_ZN11__sanitizer14IsAbsolutePathEPKc+0x14>
 a20:	ldrb	w0, [x0]
 a24:	cmp	w0, #0x2f
 a28:	cset	w0, eq  // eq = none
 a2c:	ret
 a30:	mov	w0, #0x0                   	// #0
 a34:	b	a2c <_ZN11__sanitizer14IsAbsolutePathEPKc+0x10>

0000000000000a38 <_ZN11__sanitizer10ReportFile5WriteEPKcm>:
 a38:	stp	x19, x20, [sp, #-48]!
 a3c:	stp	x21, x22, [sp, #16]
 a40:	str	x30, [sp, #32]
 a44:	mov	x19, x0
 a48:	mov	x22, x1
 a4c:	mov	x20, x2
 a50:	ldr	x21, [x0]
 a54:	mov	w1, #0x1                   	// #1
 a58:	ldxrb	w0, [x21]
 a5c:	stxrb	w2, w1, [x21]
 a60:	cbnz	w2, a58 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x20>
 a64:	dmb	ish
 a68:	and	w0, w0, #0xff
 a6c:	cbnz	w0, aa8 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x70>
 a70:	mov	x0, x19
 a74:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
 a78:	mov	x2, x20
 a7c:	mov	x1, x22
 a80:	ldr	w0, [x19, #8]
 a84:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 a88:	cmp	x0, x20
 a8c:	b.ne	ab4 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x7c>  // b.any
 a90:	dmb	ish
 a94:	strb	wzr, [x21]
 a98:	ldp	x21, x22, [sp, #16]
 a9c:	ldr	x30, [sp, #32]
 aa0:	ldp	x19, x20, [sp], #48
 aa4:	ret
 aa8:	mov	x0, x21
 aac:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 ab0:	b	a70 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x38>
 ab4:	ldr	w20, [x19, #8]
 ab8:	adrp	x19, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 abc:	add	x19, x19, #0x0
 ac0:	mov	x0, x19
 ac4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 ac8:	mov	x2, x0
 acc:	mov	x1, x19
 ad0:	mov	w0, w20
 ad4:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 ad8:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000adc <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_>:
 adc:	stp	x19, x20, [sp, #-192]!
 ae0:	stp	x21, x22, [sp, #16]
 ae4:	stp	x23, x24, [sp, #32]
 ae8:	stp	x25, x26, [sp, #48]
 aec:	str	x30, [sp, #64]
 af0:	mov	x22, x0
 af4:	mov	x24, x1
 af8:	mov	x23, x2
 afc:	mov	w1, #0x0                   	// #0
 b00:	add	x0, sp, #0xa0
 b04:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 b08:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 b0c:	ldr	x0, [x0]
 b10:	ldr	x0, [x0]
 b14:	cbz	x0, c0c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x130>
 b18:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 b1c:	ldr	x0, [x0]
 b20:	ldr	x3, [x0]
 b24:	sub	x0, x3, #0x1
 b28:	tst	x0, x3
 b2c:	b.ne	c20 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x144>  // b.any
 b30:	add	x26, x3, #0xfff
 b34:	neg	x3, x3
 b38:	and	x26, x26, x3
 b3c:	mov	w2, #0x0                   	// #0
 b40:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 b44:	add	x1, x1, #0x0
 b48:	mov	x0, x26
 b4c:	bl	10 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b50:	mov	x25, x0
 b54:	mov	x2, #0x0                   	// #0
 b58:	mov	x1, #0x0                   	// #0
 b5c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b60:	mov	x1, #0x0                   	// #0
 b64:	mov	x0, #0x0                   	// #0
 b68:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b6c:	cmp	x26, #0xfff
 b70:	b.ls	c30 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x154>  // b.plast
 b74:	mov	x2, #0x1000                	// #4096
 b78:	mov	w1, #0x0                   	// #0
 b7c:	mov	x0, x25
 b80:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 b84:	strb	wzr, [x25]
 b88:	str	x25, [sp, #104]
 b8c:	mov	x0, #0x1000                	// #4096
 b90:	str	x0, [sp, #112]
 b94:	str	xzr, [sp, #152]
 b98:	add	x21, sp, #0x50
 b9c:	add	x20, sp, #0xa0
 ba0:	mov	x1, x21
 ba4:	mov	x0, x20
 ba8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 bac:	ands	w19, w0, #0xff
 bb0:	b.eq	bdc <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x100>  // b.none
 bb4:	ldr	x3, [sp, #120]
 bb8:	tbz	w3, #2, ba0 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xc4>
 bbc:	ldr	x1, [sp, #104]
 bc0:	mov	x0, x22
 bc4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 bc8:	cbnz	w0, ba0 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xc4>
 bcc:	ldr	x0, [sp, #80]
 bd0:	str	x0, [x24]
 bd4:	ldr	x0, [sp, #88]
 bd8:	str	x0, [x23]
 bdc:	mov	x1, x26
 be0:	mov	x0, x25
 be4:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 be8:	add	x0, sp, #0xa0
 bec:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 bf0:	mov	w0, w19
 bf4:	ldp	x21, x22, [sp, #16]
 bf8:	ldp	x23, x24, [sp, #32]
 bfc:	ldp	x25, x26, [sp, #48]
 c00:	ldr	x30, [sp, #64]
 c04:	ldp	x19, x20, [sp], #192
 c08:	ret
 c0c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 c10:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 c14:	ldr	x1, [x1]
 c18:	str	x0, [x1]
 c1c:	b	b18 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x3c>
 c20:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 c24:	add	x0, x0, #0x0
 c28:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 c2c:	bl	0 <_ZN11__sanitizer3DieEv>
 c30:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 c34:	ldr	x0, [x0]
 c38:	ldr	x0, [x0]
 c3c:	cbz	x0, ca0 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1c4>
 c40:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 c44:	ldr	x0, [x0]
 c48:	ldr	x0, [x0]
 c4c:	sub	x1, x0, #0x1
 c50:	tst	x1, x0
 c54:	b.ne	cb4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1d8>  // b.any
 c58:	add	x19, x0, #0xfff
 c5c:	neg	x0, x0
 c60:	and	x19, x19, x0
 c64:	mov	w2, #0x0                   	// #0
 c68:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 c6c:	add	x1, x1, #0x0
 c70:	mov	x0, x19
 c74:	bl	10 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 c78:	mov	x20, x0
 c7c:	mov	x2, #0x0                   	// #0
 c80:	mov	x1, x25
 c84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 c88:	mov	x1, x26
 c8c:	mov	x0, x25
 c90:	bl	e8 <_ZN11__sanitizer10UnmapOrDieEPvm>
 c94:	mov	x26, x19
 c98:	mov	x25, x20
 c9c:	b	b74 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x98>
 ca0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 ca4:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 ca8:	ldr	x1, [x1]
 cac:	str	x0, [x1]
 cb0:	b	c40 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x164>
 cb4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 cb8:	add	x0, x0, #0x0
 cbc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 cc0:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000cc4 <_ZNK11__sanitizer13SignalContext10GetAddressEv>:
 cc4:	ldr	x0, [x0]
 cc8:	ldr	x0, [x0, #16]
 ccc:	ret

0000000000000cd0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>:
 cd0:	ldr	x0, [x0]
 cd4:	ldr	w0, [x0]
 cd8:	cmp	w0, #0xb
 cdc:	cset	w0, eq  // eq = none
 ce0:	ret

0000000000000ce4 <_ZNK11__sanitizer13SignalContext7GetTypeEv>:
 ce4:	ldr	x0, [x0]
 ce8:	ldr	w0, [x0]
 cec:	ret

0000000000000cf0 <_ZNK11__sanitizer13SignalContext8DescribeEv>:
 cf0:	ldr	x0, [x0]
 cf4:	ldr	w0, [x0]
 cf8:	cmp	w0, #0x7
 cfc:	b.eq	d40 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x50>  // b.none
 d00:	cmp	w0, #0x7
 d04:	b.le	d24 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>
 d08:	cmp	w0, #0x8
 d0c:	b.eq	d64 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x74>  // b.none
 d10:	cmp	w0, #0xb
 d14:	b.ne	d70 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x80>  // b.any
 d18:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d1c:	add	x0, x0, #0x0
 d20:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>
 d24:	cmp	w0, #0x4
 d28:	b.eq	d4c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x5c>  // b.none
 d2c:	cmp	w0, #0x6
 d30:	b.ne	d58 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x68>  // b.any
 d34:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d38:	add	x0, x0, #0x0
 d3c:	ret
 d40:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d44:	add	x0, x0, #0x0
 d48:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>
 d4c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d50:	add	x0, x0, #0x0
 d54:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>
 d58:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d5c:	add	x0, x0, #0x0
 d60:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>
 d64:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d68:	add	x0, x0, #0x0
 d6c:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>
 d70:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 d74:	add	x0, x0, #0x0
 d78:	b	d3c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

sanitizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL6setlimEim>:
   0:	stp	x19, x30, [sp, #-32]!
   4:	str	x1, [sp, #16]
   8:	str	x1, [sp, #24]
   c:	add	x1, sp, #0x10
  10:	bl	0 <setrlimit>
  14:	cbnz	w0, 20 <_ZN11__sanitizerL6setlimEim+0x20>
  18:	ldp	x19, x30, [sp], #32
  1c:	ret
  20:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  24:	ldr	x0, [x0]
  28:	ldr	x19, [x0]
  2c:	bl	0 <__errno_location>
  30:	ldr	w2, [x0]
  34:	mov	x1, x19
  38:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  44:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000048 <_ZN11__sanitizerL6getlimEi>:
  48:	str	x30, [sp, #-32]!
  4c:	add	x1, sp, #0x10
  50:	bl	0 <getrlimit>
  54:	cbnz	w0, 64 <_ZN11__sanitizerL6getlimEi+0x1c>
  58:	ldr	x0, [sp, #16]
  5c:	ldr	x30, [sp], #32
  60:	ret
  64:	sxtw	x4, w0
  68:	mov	x3, #0x0                   	// #0
  6c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
  70:	add	x2, x2, #0x0
  74:	mov	w1, #0x5a                  	// #90
  78:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
  7c:	add	x0, x0, #0x0
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000084 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>:
  84:	stp	x19, x20, [sp, #-192]!
  88:	str	x30, [sp, #16]
  8c:	mov	w20, w0
  90:	mov	x19, x1
  94:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
  98:	cbnz	w0, a8 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x24>
  9c:	ldr	x30, [sp, #16]
  a0:	ldp	x19, x20, [sp], #192
  a4:	ret
  a8:	mov	x2, #0x98                  	// #152
  ac:	mov	w1, #0x0                   	// #0
  b0:	add	x0, sp, #0x28
  b4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  b8:	str	x19, [sp, #40]
  bc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  c0:	ldr	x0, [x0]
  c4:	ldrb	w0, [x0, #97]
  c8:	cmp	w0, #0x0
  cc:	mov	w0, #0x4                   	// #4
  d0:	movk	w0, #0x4800, lsl #16
  d4:	mov	w1, #0x4                   	// #4
  d8:	movk	w1, #0x4000, lsl #16
  dc:	csel	w0, w0, w1, ne  // ne = any
  e0:	str	w0, [sp, #176]
  e4:	mov	x2, #0x0                   	// #0
  e8:	add	x1, sp, #0x28
  ec:	mov	w0, w20
  f0:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
  f4:	sxtw	x4, w0
  f8:	cbnz	w0, 120 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x9c>
  fc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 100:	ldr	x0, [x0]
 104:	ldr	w0, [x0]
 108:	cbz	w0, 9c <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x18>
 10c:	mov	w1, w20
 110:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 114:	add	x0, x0, #0x0
 118:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 11c:	b	9c <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x18>
 120:	mov	x3, #0x0                   	// #0
 124:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 128:	add	x2, x2, #0x0
 12c:	mov	w1, #0xd2                  	// #210
 130:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 134:	add	x0, x0, #0x0
 138:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000013c <_ZN11__sanitizer6GetUidEv>:
 13c:	str	x30, [sp, #-16]!
 140:	bl	0 <getuid>
 144:	ldr	x30, [sp], #16
 148:	ret

000000000000014c <_ZN11__sanitizer13GetThreadSelfEv>:
 14c:	str	x30, [sp, #-16]!
 150:	bl	0 <pthread_self>
 154:	ldr	x30, [sp], #16
 158:	ret

000000000000015c <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm>:
 15c:	stp	x19, x20, [sp, #-32]!
 160:	str	x30, [sp, #16]
 164:	mov	x19, x0
 168:	mov	x20, x1
 16c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 170:	ldr	x0, [x0]
 174:	ldr	x0, [x0]
 178:	cbz	x0, 1b8 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x5c>
 17c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 180:	ldr	x0, [x0]
 184:	ldr	x2, [x0]
 188:	sub	x0, x2, #0x1
 18c:	tst	x2, x0
 190:	b.ne	1cc <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x70>  // b.any
 194:	neg	x2, x2
 198:	add	x0, x19, x0
 19c:	and	x0, x0, x2
 1a0:	and	x20, x20, x2
 1a4:	cmp	x20, x0
 1a8:	b.hi	1dc <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x80>  // b.pmore
 1ac:	ldr	x30, [sp, #16]
 1b0:	ldp	x19, x20, [sp], #32
 1b4:	ret
 1b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1bc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1c0:	ldr	x1, [x1]
 1c4:	str	x0, [x1]
 1c8:	b	17c <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x20>
 1cc:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 1d0:	add	x0, x0, #0x0
 1d4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1d8:	bl	0 <_ZN11__sanitizer3DieEv>
 1dc:	mov	w2, #0x4                   	// #4
 1e0:	sub	x1, x20, x0
 1e4:	bl	0 <madvise>
 1e8:	b	1ac <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x50>

00000000000001ec <_ZN11__sanitizer19NoHugePagesInRegionEmm>:
 1ec:	str	x30, [sp, #-16]!
 1f0:	mov	w2, #0xf                   	// #15
 1f4:	bl	0 <madvise>
 1f8:	cmp	w0, #0x0
 1fc:	cset	w0, eq  // eq = none
 200:	ldr	x30, [sp], #16
 204:	ret

0000000000000208 <_ZN11__sanitizer20DontDumpShadowMemoryEmm>:
 208:	str	x30, [sp, #-16]!
 20c:	mov	w2, #0x10                  	// #16
 210:	bl	0 <madvise>
 214:	cmp	w0, #0x0
 218:	cset	w0, eq  // eq = none
 21c:	ldr	x30, [sp], #16
 220:	ret

0000000000000224 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv>:
 224:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 228:	ldr	x0, [x0]
 22c:	ldrb	w0, [x0, #178]
 230:	cbnz	w0, 238 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv+0x14>
 234:	ret
 238:	str	x30, [sp, #-16]!
 23c:	mov	x1, #0x0                   	// #0
 240:	mov	w0, #0x4                   	// #4
 244:	bl	0 <_ZN11__sanitizerL6setlimEim>
 248:	ldr	x30, [sp], #16
 24c:	ret

0000000000000250 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>:
 250:	str	x30, [sp, #-16]!
 254:	mov	w0, #0x3                   	// #3
 258:	bl	48 <_ZN11__sanitizerL6getlimEi>
 25c:	cmn	x0, #0x1
 260:	cset	w0, eq  // eq = none
 264:	ldr	x30, [sp], #16
 268:	ret

000000000000026c <_ZN11__sanitizer24GetStackSizeLimitInBytesEv>:
 26c:	str	x30, [sp, #-16]!
 270:	mov	w0, #0x3                   	// #3
 274:	bl	48 <_ZN11__sanitizerL6getlimEi>
 278:	ldr	x30, [sp], #16
 27c:	ret

0000000000000280 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm>:
 280:	str	x30, [sp, #-16]!
 284:	mov	x1, x0
 288:	mov	w0, #0x3                   	// #3
 28c:	bl	0 <_ZN11__sanitizerL6setlimEim>
 290:	bl	250 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>
 294:	and	w0, w0, #0xff
 298:	cbnz	w0, 2a4 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x24>
 29c:	ldr	x30, [sp], #16
 2a0:	ret
 2a4:	mov	x4, #0x0                   	// #0
 2a8:	mov	x3, #0x0                   	// #0
 2ac:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 2b0:	add	x2, x2, #0x0
 2b4:	mov	w1, #0x7a                  	// #122
 2b8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 2bc:	add	x0, x0, #0x0
 2c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002c4 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>:
 2c4:	str	x30, [sp, #-16]!
 2c8:	mov	w0, #0x9                   	// #9
 2cc:	bl	48 <_ZN11__sanitizerL6getlimEi>
 2d0:	cmn	x0, #0x1
 2d4:	cset	w0, eq  // eq = none
 2d8:	ldr	x30, [sp], #16
 2dc:	ret

00000000000002e0 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv>:
 2e0:	str	x30, [sp, #-16]!
 2e4:	mov	x1, #0xffffffffffffffff    	// #-1
 2e8:	mov	w0, #0x9                   	// #9
 2ec:	bl	0 <_ZN11__sanitizerL6setlimEim>
 2f0:	bl	2c4 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>
 2f4:	and	w0, w0, #0xff
 2f8:	cbz	w0, 304 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x24>
 2fc:	ldr	x30, [sp], #16
 300:	ret
 304:	mov	x4, #0x0                   	// #0
 308:	mov	x3, #0x0                   	// #0
 30c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 310:	add	x2, x2, #0x0
 314:	mov	w1, #0x84                  	// #132
 318:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 31c:	add	x0, x0, #0x0
 320:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000324 <_ZN11__sanitizer15SleepForSecondsEi>:
 324:	str	x30, [sp, #-16]!
 328:	bl	0 <sleep>
 32c:	ldr	x30, [sp], #16
 330:	ret

0000000000000334 <_ZN11__sanitizer14SleepForMillisEi>:
 334:	str	x30, [sp, #-16]!
 338:	mov	w1, #0x3e8                 	// #1000
 33c:	mul	w0, w0, w1
 340:	bl	0 <usleep>
 344:	ldr	x30, [sp], #16
 348:	ret

000000000000034c <_ZN11__sanitizer5AbortEv>:
 34c:	stp	x19, x30, [sp, #-176]!
 350:	mov	w0, #0x6                   	// #6
 354:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
 358:	cbnz	w0, 360 <_ZN11__sanitizer5AbortEv+0x14>
 35c:	bl	0 <abort>
 360:	add	x19, sp, #0x18
 364:	mov	x2, #0x98                  	// #152
 368:	mov	w1, #0x0                   	// #0
 36c:	mov	x0, x19
 370:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 374:	str	xzr, [sp, #24]
 378:	mov	x2, #0x0                   	// #0
 37c:	mov	x1, x19
 380:	mov	w0, #0x6                   	// #6
 384:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
 388:	b	35c <_ZN11__sanitizer5AbortEv+0x10>

000000000000038c <_ZN11__sanitizer6AtexitEPFvvE>:
 38c:	str	x30, [sp, #-16]!
 390:	bl	0 <atexit>
 394:	ldr	x30, [sp], #16
 398:	ret

000000000000039c <_ZN11__sanitizer21SupportsColoredOutputEi>:
 39c:	str	x30, [sp, #-16]!
 3a0:	bl	0 <isatty>
 3a4:	cmp	w0, #0x0
 3a8:	cset	w0, ne  // ne = any
 3ac:	ldr	x30, [sp], #16
 3b0:	ret

00000000000003b4 <_ZN11__sanitizer23SetAlternateSignalStackEv>:
 3b4:	str	x30, [sp, #-64]!
 3b8:	add	x1, sp, #0x10
 3bc:	mov	x0, #0x0                   	// #0
 3c0:	bl	0 <sigaltstack>
 3c4:	cbnz	w0, 3d8 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x24>
 3c8:	ldr	w0, [sp, #24]
 3cc:	tbnz	w0, #1, 3f8 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x44>
 3d0:	ldr	x30, [sp], #64
 3d4:	ret
 3d8:	sxtw	x4, w0
 3dc:	mov	x3, #0x0                   	// #0
 3e0:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 3e4:	add	x2, x2, #0x0
 3e8:	mov	w1, #0xb0                  	// #176
 3ec:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 3f0:	add	x0, x0, #0x0
 3f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f8:	mov	w2, #0x0                   	// #0
 3fc:	adrp	x1, 0 <_ZN11__sanitizerL6setlimEim>
 400:	add	x1, x1, #0x0
 404:	mov	x0, #0x10000               	// #65536
 408:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 40c:	str	x0, [sp, #40]
 410:	str	wzr, [sp, #48]
 414:	mov	x0, #0x10000               	// #65536
 418:	str	x0, [sp, #56]
 41c:	mov	x1, #0x0                   	// #0
 420:	add	x0, sp, #0x28
 424:	bl	0 <sigaltstack>
 428:	sxtw	x4, w0
 42c:	cbz	w0, 3d0 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x1c>
 430:	mov	x3, #0x0                   	// #0
 434:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 438:	add	x2, x2, #0x0
 43c:	mov	w1, #0xbb                  	// #187
 440:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 444:	add	x0, x0, #0x0
 448:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000044c <_ZN11__sanitizer25UnsetAlternateSignalStackEv>:
 44c:	str	x30, [sp, #-64]!
 450:	str	xzr, [sp, #40]
 454:	mov	w0, #0x2                   	// #2
 458:	str	w0, [sp, #48]
 45c:	mov	x0, #0x10000               	// #65536
 460:	str	x0, [sp, #56]
 464:	add	x1, sp, #0x10
 468:	add	x0, sp, #0x28
 46c:	bl	0 <sigaltstack>
 470:	cbnz	w0, 488 <_ZN11__sanitizer25UnsetAlternateSignalStackEv+0x3c>
 474:	ldr	x1, [sp, #32]
 478:	ldr	x0, [sp, #16]
 47c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 480:	ldr	x30, [sp], #64
 484:	ret
 488:	sxtw	x4, w0
 48c:	mov	x3, #0x0                   	// #0
 490:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 494:	add	x2, x2, #0x0
 498:	mov	w1, #0xc3                  	// #195
 49c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 4a0:	add	x0, x0, #0x0
 4a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000004a8 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>:
 4a8:	stp	x19, x30, [sp, #-16]!
 4ac:	mov	x19, x0
 4b0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4b4:	ldr	x0, [x0]
 4b8:	ldrb	w0, [x0, #97]
 4bc:	cbnz	w0, 510 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x68>
 4c0:	mov	x1, x19
 4c4:	mov	w0, #0xb                   	// #11
 4c8:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4cc:	mov	x1, x19
 4d0:	mov	w0, #0x7                   	// #7
 4d4:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4d8:	mov	x1, x19
 4dc:	mov	w0, #0x6                   	// #6
 4e0:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4e4:	mov	x1, x19
 4e8:	mov	w0, #0x8                   	// #8
 4ec:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4f0:	mov	x1, x19
 4f4:	mov	w0, #0x4                   	// #4
 4f8:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 4fc:	mov	x1, x19
 500:	mov	w0, #0x5                   	// #5
 504:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 508:	ldp	x19, x30, [sp], #16
 50c:	ret
 510:	bl	3b4 <_ZN11__sanitizer23SetAlternateSignalStackEv>
 514:	b	4c0 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x18>

0000000000000518 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>:
 518:	stp	x19, x20, [sp, #-32]!
 51c:	str	x30, [sp, #16]
 520:	mov	x19, x0
 524:	ldr	x20, [x0, #16]
 528:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 52c:	ldr	x0, [x0]
 530:	ldr	x0, [x0]
 534:	cbz	x0, 5ac <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x94>
 538:	ldr	x1, [x19, #32]
 53c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 540:	ldr	x0, [x0]
 544:	ldr	x0, [x0]
 548:	add	x20, x20, x0
 54c:	mov	w0, #0x0                   	// #0
 550:	cmp	x20, x1
 554:	b.ls	5a0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x88>  // b.plast
 558:	add	x1, x1, #0xf, lsl #12
 55c:	add	x1, x1, #0xfff
 560:	ldr	x2, [x19, #16]
 564:	cmp	x2, x1
 568:	b.cs	5a0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x88>  // b.hs, b.nlast
 56c:	ldr	x0, [x19]
 570:	ldr	w1, [x0, #8]
 574:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_MAPERRE>
 578:	ldr	x0, [x0]
 57c:	ldr	w2, [x0]
 580:	mov	w0, #0x1                   	// #1
 584:	cmp	w1, w2
 588:	b.eq	5a0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x88>  // b.none
 58c:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_ACCERRE>
 590:	ldr	x0, [x0]
 594:	ldr	w0, [x0]
 598:	cmp	w0, w1
 59c:	cset	w0, eq  // eq = none
 5a0:	ldr	x30, [sp, #16]
 5a4:	ldp	x19, x20, [sp], #32
 5a8:	ret
 5ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5b0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5b4:	ldr	x1, [x1]
 5b8:	str	x0, [x1]
 5bc:	b	538 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x20>

00000000000005c0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>:
 5c0:	stp	x19, x20, [sp, #-48]!
 5c4:	stp	x21, x30, [sp, #16]
 5c8:	mov	x20, x0
 5cc:	mov	x19, x1
 5d0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5d4:	ldr	x1, [x1]
 5d8:	ldr	x0, [x1]
 5dc:	cbz	x0, 61c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x5c>
 5e0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5e4:	ldr	x1, [x1]
 5e8:	ldr	x2, [x1]
 5ec:	add	x2, x2, x2, lsl #2
 5f0:	lsl	x4, x2, #1
 5f4:	cmp	x19, x2, lsl #1
 5f8:	b.cs	630 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x70>  // b.hs, b.nlast
 5fc:	add	x0, sp, #0x28
 600:	bl	0 <pipe>
 604:	mov	w21, #0x0                   	// #0
 608:	cbz	w0, 64c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x8c>
 60c:	mov	w0, w21
 610:	ldp	x21, x30, [sp, #16]
 614:	ldp	x19, x20, [sp], #48
 618:	ret
 61c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 620:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 624:	ldr	x1, [x1]
 628:	str	x0, [x1]
 62c:	b	5e0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x20>
 630:	mov	x3, x19
 634:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 638:	add	x2, x2, #0x0
 63c:	mov	w1, #0x118                 	// #280
 640:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 644:	add	x0, x0, #0x0
 648:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 64c:	mov	x2, x19
 650:	mov	x1, x20
 654:	ldr	w0, [sp, #44]
 658:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 65c:	mov	x20, x0
 660:	add	x1, sp, #0x24
 664:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 668:	and	w1, w0, #0xff
 66c:	cbz	w1, 698 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xd8>
 670:	ldrsw	x4, [sp, #36]
 674:	cmp	x4, #0xe
 678:	b.eq	6a0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xe0>  // b.none
 67c:	mov	x3, #0xe                   	// #14
 680:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 684:	add	x2, x2, #0x0
 688:	mov	w1, #0x121                 	// #289
 68c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 690:	add	x0, x0, #0x0
 694:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 698:	cmp	x19, x20
 69c:	cset	w21, eq  // eq = none
 6a0:	ldr	w0, [sp, #40]
 6a4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 6a8:	ldr	w0, [sp, #44]
 6ac:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 6b0:	b	60c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x4c>

00000000000006b4 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>:
 6b4:	str	x30, [sp, #-16]!
 6b8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 6bc:	ldr	x30, [sp], #16
 6c0:	ret

00000000000006c4 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>:
 6c4:	stp	x19, x20, [sp, #-240]!
 6c8:	str	x30, [sp, #16]
 6cc:	mov	x19, x0
 6d0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 6d4:	ldr	x0, [x0]
 6d8:	ldrb	w0, [x0, #215]
 6dc:	cbz	w0, 7b8 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xf4>
 6e0:	mov	x20, x1
 6e4:	mov	x0, x19
 6e8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 6ec:	cmp	x0, #0xbd
 6f0:	b.hi	760 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x9c>  // b.pmore
 6f4:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 6f8:	add	x5, sp, #0x28
 6fc:	mov	x4, x19
 700:	mov	x3, x0
 704:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 708:	add	x2, x2, #0x0
 70c:	mov	x1, #0xc8                  	// #200
 710:	mov	x19, x5
 714:	mov	x0, x5
 718:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 71c:	mov	w2, #0x1c0                 	// #448
 720:	mov	w1, #0x242                 	// #578
 724:	mov	x0, x19
 728:	bl	0 <shm_open>
 72c:	mov	w19, w0
 730:	mov	x1, x20
 734:	bl	0 <_ZN11__sanitizer18internal_ftruncateEim>
 738:	sxtw	x4, w0
 73c:	cbnz	w0, 780 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xbc>
 740:	add	x0, sp, #0x28
 744:	bl	0 <shm_unlink>
 748:	sxtw	x4, w0
 74c:	cbnz	w0, 79c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xd8>
 750:	mov	w0, w19
 754:	ldr	x30, [sp, #16]
 758:	ldp	x19, x20, [sp], #240
 75c:	ret
 760:	mov	x4, #0x0                   	// #0
 764:	mov	x3, #0x0                   	// #0
 768:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 76c:	add	x2, x2, #0x0
 770:	mov	w1, #0x13c                 	// #316
 774:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 778:	add	x0, x0, #0x0
 77c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 780:	mov	x3, #0x0                   	// #0
 784:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 788:	add	x2, x2, #0x0
 78c:	mov	w1, #0x142                 	// #322
 790:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 794:	add	x0, x0, #0x0
 798:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 79c:	mov	x3, #0x0                   	// #0
 7a0:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 7a4:	add	x2, x2, #0x0
 7a8:	mov	w1, #0x144                 	// #324
 7ac:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 7b0:	add	x0, x0, #0x0
 7b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7b8:	mov	w19, #0xffffffff            	// #-1
 7bc:	b	750 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x8c>

00000000000007c0 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc>:
 7c0:	stp	x19, x20, [sp, #-64]!
 7c4:	stp	x21, x22, [sp, #16]
 7c8:	str	x30, [sp, #32]
 7cc:	mov	x20, x0
 7d0:	mov	x19, x1
 7d4:	cbz	x2, 86c <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xac>
 7d8:	mov	x0, x2
 7dc:	bl	6c4 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 7e0:	mov	w21, w0
 7e4:	cmn	w0, #0x1
 7e8:	mov	w22, #0x4012                	// #16402
 7ec:	mov	w0, #0x4032                	// #16434
 7f0:	csel	w22, w22, w0, ne  // ne = any
 7f4:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7f8:	ldr	x1, [x1]
 7fc:	ldr	x0, [x1]
 800:	cbz	x0, 878 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xb8>
 804:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 808:	ldr	x1, [x1]
 80c:	ldr	x3, [x1]
 810:	neg	x6, x3
 814:	and	x0, x6, x20
 818:	sub	x2, x3, #0x1
 81c:	tst	x3, x2
 820:	b.ne	88c <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xcc>  // b.any
 824:	add	x1, x19, x2
 828:	mov	x5, #0x0                   	// #0
 82c:	mov	w4, w21
 830:	mov	w3, w22
 834:	mov	w2, #0x3                   	// #3
 838:	and	x1, x1, x6
 83c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 840:	add	x1, sp, #0x3c
 844:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 848:	and	w0, w0, #0xff
 84c:	cbnz	w0, 89c <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xdc>
 850:	mov	x0, x19
 854:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 858:	mov	w0, #0x1                   	// #1
 85c:	ldp	x21, x22, [sp, #16]
 860:	ldr	x30, [sp, #32]
 864:	ldp	x19, x20, [sp], #64
 868:	ret
 86c:	mov	w21, #0xffffffff            	// #-1
 870:	mov	w22, #0x4032                	// #16434
 874:	b	7f4 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x34>
 878:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 87c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 880:	ldr	x1, [x1]
 884:	str	x0, [x1]
 888:	b	804 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x44>
 88c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 890:	add	x0, x0, #0x0
 894:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 898:	bl	0 <_ZN11__sanitizer3DieEv>
 89c:	ldr	w5, [sp, #60]
 8a0:	mov	x4, x20
 8a4:	mov	x3, x19
 8a8:	mov	x2, x19
 8ac:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 8b0:	ldr	x0, [x0]
 8b4:	ldr	x1, [x0]
 8b8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 8bc:	add	x0, x0, #0x0
 8c0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8c4:	mov	w0, #0x0                   	// #0
 8c8:	b	85c <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x9c>

00000000000008cc <_ZN11__sanitizer20ReservedAddressRange3MapEmm>:
 8cc:	str	x30, [sp, #-16]!
 8d0:	mov	x0, x1
 8d4:	mov	x1, x2
 8d8:	bl	0 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>
 8dc:	ldr	x30, [sp], #16
 8e0:	ret

00000000000008e4 <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>:
 8e4:	str	x30, [sp, #-16]!
 8e8:	mov	x0, x1
 8ec:	mov	x1, x2
 8f0:	bl	0 <_ZN11__sanitizer14MmapFixedOrDieEmm>
 8f4:	ldr	x30, [sp], #16
 8f8:	ret

00000000000008fc <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm>:
 8fc:	str	x30, [sp, #-16]!
 900:	mov	x5, x0
 904:	mov	x0, x1
 908:	mov	x1, x2
 90c:	ldr	x4, [x5, #8]
 910:	cmp	x2, x4
 914:	b.hi	948 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x4c>  // b.pmore
 918:	ldr	x2, [x5]
 91c:	cmp	x2, x0
 920:	b.eq	964 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x68>  // b.none
 924:	add	x3, x1, x0
 928:	add	x2, x2, x4
 92c:	cmp	x3, x2
 930:	b.ne	978 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x7c>  // b.any
 934:	sub	x4, x4, x1
 938:	str	x4, [x5, #8]
 93c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 940:	ldr	x30, [sp], #16
 944:	ret
 948:	mov	x3, x2
 94c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 950:	add	x2, x2, #0x0
 954:	mov	w1, #0x175                 	// #373
 958:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 95c:	add	x0, x0, #0x0
 960:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 964:	add	x2, x1, x0
 968:	cmp	x1, x4
 96c:	csel	x2, x2, xzr, ne  // ne = any
 970:	str	x2, [x5]
 974:	b	934 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x38>
 978:	mov	x4, x2
 97c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim>
 980:	add	x2, x2, #0x0
 984:	mov	w1, #0x17a                 	// #378
 988:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 98c:	add	x0, x0, #0x0
 990:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000994 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>:
 994:	stp	x19, x20, [sp, #-32]!
 998:	str	x30, [sp, #16]
 99c:	mov	x20, x0
 9a0:	mov	x19, x1
 9a4:	cbz	x2, 9e4 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x50>
 9a8:	mov	x0, x2
 9ac:	bl	6c4 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 9b0:	mov	w4, w0
 9b4:	cmn	w0, #0x1
 9b8:	mov	w3, #0x4012                	// #16402
 9bc:	mov	w0, #0x4032                	// #16434
 9c0:	csel	w3, w3, w0, ne  // ne = any
 9c4:	mov	x5, #0x0                   	// #0
 9c8:	mov	w2, #0x0                   	// #0
 9cc:	mov	x1, x19
 9d0:	mov	x0, x20
 9d4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 9d8:	ldr	x30, [sp, #16]
 9dc:	ldp	x19, x20, [sp], #32
 9e0:	ret
 9e4:	mov	w4, #0xffffffff            	// #-1
 9e8:	mov	w3, #0x4032                	// #16434
 9ec:	b	9c4 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x30>

00000000000009f0 <_ZN11__sanitizer12MmapNoAccessEm>:
 9f0:	str	x30, [sp, #-16]!
 9f4:	mov	x5, #0x0                   	// #0
 9f8:	mov	w4, #0xffffffff            	// #-1
 9fc:	mov	w3, #0x4022                	// #16418
 a00:	mov	w2, #0x0                   	// #0
 a04:	mov	x1, x0
 a08:	mov	x0, #0x0                   	// #0
 a0c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 a10:	ldr	x30, [sp], #16
 a14:	ret

0000000000000a18 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>:
 a18:	stp	x19, x20, [sp, #-32]!
 a1c:	stp	x21, x30, [sp, #16]
 a20:	mov	x19, x0
 a24:	mov	x20, x1
 a28:	mov	x21, x2
 a2c:	cbz	x3, a54 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x3c>
 a30:	mov	x0, x3
 a34:	mov	x2, #0x0                   	// #0
 a38:	bl	994 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>
 a3c:	str	x0, [x19]
 a40:	str	x20, [x19, #8]
 a44:	str	x21, [x19, #16]
 a48:	ldp	x21, x30, [sp, #16]
 a4c:	ldp	x19, x20, [sp], #32
 a50:	ret
 a54:	mov	x0, x1
 a58:	bl	9f0 <_ZN11__sanitizer12MmapNoAccessEm>
 a5c:	b	a3c <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x24>

0000000000000a60 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>:
 a60:	str	x30, [sp, #-16]!
 a64:	adrp	x3, 0 <real_pthread_attr_getstack>
 a68:	ldr	x3, [x3]
 a6c:	cbz	x3, a7c <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm+0x1c>
 a70:	bl	0 <real_pthread_attr_getstack>
 a74:	ldr	x30, [sp], #16
 a78:	ret
 a7c:	bl	0 <pthread_attr_getstack>
 a80:	b	a74 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm+0x14>

0000000000000a84 <_ZN11__sanitizer15AdjustStackSizeEPv>:
 a84:	stp	x19, x20, [sp, #-48]!
 a88:	str	x30, [sp, #16]
 a8c:	mov	x20, x0
 a90:	str	xzr, [sp, #40]
 a94:	str	xzr, [sp, #32]
 a98:	add	x2, sp, #0x20
 a9c:	add	x1, sp, #0x28
 aa0:	bl	a60 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 aa4:	ldr	x0, [sp, #40]
 aa8:	cbz	x0, ab8 <_ZN11__sanitizer15AdjustStackSizeEPv+0x34>
 aac:	ldr	x1, [sp, #32]
 ab0:	cmn	x0, x1
 ab4:	b.ne	b10 <_ZN11__sanitizer15AdjustStackSizeEPv+0x8c>  // b.any
 ab8:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 abc:	add	x19, x0, #0x20, lsl #12
 ac0:	ldr	x1, [sp, #32]
 ac4:	cmp	x19, x1
 ac8:	b.hi	ad8 <_ZN11__sanitizer15AdjustStackSizeEPv+0x54>  // b.pmore
 acc:	ldr	x30, [sp, #16]
 ad0:	ldp	x19, x20, [sp], #48
 ad4:	ret
 ad8:	cbz	x1, acc <_ZN11__sanitizer15AdjustStackSizeEPv+0x48>
 adc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 ae0:	ldr	x0, [x0]
 ae4:	ldr	w0, [x0]
 ae8:	cbnz	w0, afc <_ZN11__sanitizer15AdjustStackSizeEPv+0x78>
 aec:	mov	x1, x19
 af0:	mov	x0, x20
 af4:	bl	0 <pthread_attr_setstacksize>
 af8:	b	acc <_ZN11__sanitizer15AdjustStackSizeEPv+0x48>
 afc:	mov	x2, x19
 b00:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 b04:	add	x0, x0, #0x0
 b08:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 b0c:	b	aec <_ZN11__sanitizer15AdjustStackSizeEPv+0x68>
 b10:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 b14:	add	x2, x0, #0x20, lsl #12
 b18:	ldr	x1, [sp, #32]
 b1c:	cmp	x2, x1
 b20:	b.ls	acc <_ZN11__sanitizer15AdjustStackSizeEPv+0x48>  // b.plast
 b24:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 b28:	add	x0, x0, #0x0
 b2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 b30:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 b34:	add	x0, x0, #0x0
 b38:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 b3c:	b	acc <_ZN11__sanitizer15AdjustStackSizeEPv+0x48>

0000000000000b40 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>:
 b40:	stp	x19, x20, [sp, #-80]!
 b44:	stp	x21, x22, [sp, #16]
 b48:	stp	x23, x24, [sp, #32]
 b4c:	str	x30, [sp, #48]
 b50:	mov	x23, x0
 b54:	mov	x24, x1
 b58:	mov	w22, w2
 b5c:	mov	w21, w3
 b60:	mov	w20, w4
 b64:	bl	0 <_ZN11__sanitizer13internal_forkEv>
 b68:	mov	w19, w0
 b6c:	tbnz	w0, #31, ba4 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x64>
 b70:	cbz	w0, bcc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x8c>
 b74:	cmn	w22, #0x1
 b78:	b.ne	c80 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x140>  // b.any
 b7c:	cmn	w21, #0x1
 b80:	b.ne	c8c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x14c>  // b.any
 b84:	cmn	w20, #0x1
 b88:	b.ne	c98 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x158>  // b.any
 b8c:	mov	w0, w19
 b90:	ldp	x21, x22, [sp, #16]
 b94:	ldp	x23, x24, [sp, #32]
 b98:	ldr	x30, [sp, #48]
 b9c:	ldp	x19, x20, [sp], #80
 ba0:	ret
 ba4:	add	x1, sp, #0x4c
 ba8:	sxtw	x0, w0
 bac:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 bb0:	and	w0, w0, #0xff
 bb4:	cbz	w0, b74 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x34>
 bb8:	ldr	w1, [sp, #76]
 bbc:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 bc0:	add	x0, x0, #0x0
 bc4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 bc8:	b	b74 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x34>
 bcc:	cmn	w22, #0x1
 bd0:	b.ne	c20 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xe0>  // b.any
 bd4:	cmn	w21, #0x1
 bd8:	b.ne	c40 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x100>  // b.any
 bdc:	cmn	w20, #0x1
 be0:	b.ne	c60 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x120>  // b.any
 be4:	mov	w0, #0x4                   	// #4
 be8:	bl	0 <sysconf>
 bec:	mov	w19, w0
 bf0:	cmp	w0, #0x2
 bf4:	b.le	c0c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xcc>
 bf8:	mov	w0, w19
 bfc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c00:	sub	w19, w19, #0x1
 c04:	cmp	w19, #0x2
 c08:	b.ne	bf8 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xb8>  // b.any
 c0c:	mov	x1, x24
 c10:	mov	x0, x23
 c14:	bl	0 <execv>
 c18:	mov	w0, #0x1                   	// #1
 c1c:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 c20:	mov	w0, #0x0                   	// #0
 c24:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c28:	mov	w1, #0x0                   	// #0
 c2c:	mov	w0, w22
 c30:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 c34:	mov	w0, w22
 c38:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c3c:	b	bd4 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x94>
 c40:	mov	w0, #0x1                   	// #1
 c44:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c48:	mov	w1, #0x1                   	// #1
 c4c:	mov	w0, w21
 c50:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 c54:	mov	w0, w21
 c58:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c5c:	b	bdc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x9c>
 c60:	mov	w0, #0x2                   	// #2
 c64:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c68:	mov	w1, #0x2                   	// #2
 c6c:	mov	w0, w20
 c70:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 c74:	mov	w0, w20
 c78:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c7c:	b	be4 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xa4>
 c80:	mov	w0, w22
 c84:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c88:	b	b7c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x3c>
 c8c:	mov	w0, w21
 c90:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 c94:	b	b84 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x44>
 c98:	mov	w0, w20
 c9c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 ca0:	b	b8c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x4c>

0000000000000ca4 <_ZN11__sanitizer16IsProcessRunningEi>:
 ca4:	stp	x19, x30, [sp, #-32]!
 ca8:	mov	w2, #0x1                   	// #1
 cac:	add	x1, sp, #0x1c
 cb0:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 cb4:	mov	x19, x0
 cb8:	add	x1, sp, #0x18
 cbc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 cc0:	and	w1, w0, #0xff
 cc4:	cmp	x19, #0x0
 cc8:	cset	w0, eq  // eq = none
 ccc:	cbnz	w1, cd8 <_ZN11__sanitizer16IsProcessRunningEi+0x34>
 cd0:	ldp	x19, x30, [sp], #32
 cd4:	ret
 cd8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 cdc:	ldr	x0, [x0]
 ce0:	ldr	w1, [x0]
 ce4:	mov	w0, #0x0                   	// #0
 ce8:	cbz	w1, cd0 <_ZN11__sanitizer16IsProcessRunningEi+0x2c>
 cec:	ldr	w1, [sp, #24]
 cf0:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 cf4:	add	x0, x0, #0x0
 cf8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 cfc:	mov	w0, #0x0                   	// #0
 d00:	b	cd0 <_ZN11__sanitizer16IsProcessRunningEi+0x2c>

0000000000000d04 <_ZN11__sanitizer14WaitForProcessEi>:
 d04:	str	x30, [sp, #-32]!
 d08:	mov	w2, #0x0                   	// #0
 d0c:	add	x1, sp, #0x1c
 d10:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 d14:	add	x1, sp, #0x18
 d18:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 d1c:	and	w0, w0, #0xff
 d20:	cbnz	w0, d30 <_ZN11__sanitizer14WaitForProcessEi+0x2c>
 d24:	ldr	w0, [sp, #28]
 d28:	ldr	x30, [sp], #32
 d2c:	ret
 d30:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 d34:	ldr	x0, [x0]
 d38:	ldr	w1, [x0]
 d3c:	mov	w0, #0xffffffff            	// #-1
 d40:	cbz	w1, d28 <_ZN11__sanitizer14WaitForProcessEi+0x24>
 d44:	ldr	w1, [sp, #24]
 d48:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim>
 d4c:	add	x0, x0, #0x0
 d50:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d54:	mov	w0, #0xffffffff            	// #-1
 d58:	b	d28 <_ZN11__sanitizer14WaitForProcessEi+0x24>

0000000000000d5c <_ZN11__sanitizer15IsStateDetachedEi>:
 d5c:	cmp	w0, #0x1
 d60:	cset	w0, eq  // eq = none
 d64:	ret

sanitizer_printf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL10AppendCharEPPcPKcc>:
   0:	and	w2, w2, #0xff
   4:	ldr	x3, [x0]
   8:	cmp	x3, x1
   c:	b.cs	20 <_ZN11__sanitizerL10AppendCharEPPcPKcc+0x20>  // b.hs, b.nlast
  10:	strb	w2, [x3]
  14:	ldr	x1, [x0]
  18:	add	x1, x1, #0x1
  1c:	str	x1, [x0]
  20:	mov	w0, #0x1                   	// #1
  24:	ret

0000000000000028 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>:
  28:	stp	x19, x20, [sp, #-64]!
  2c:	stp	x21, x22, [sp, #16]
  30:	stp	x23, x24, [sp, #32]
  34:	str	x30, [sp, #56]
  38:	mov	x21, x0
  3c:	mov	x22, x1
  40:	mov	w23, w2
  44:	mov	w24, w3
  48:	cbz	x4, 98 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x70>
  4c:	mov	x20, x4
  50:	ldrb	w2, [x4]
  54:	cbz	w2, ac <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x84>
  58:	str	x25, [sp, #48]
  5c:	mvn	w25, w24
  60:	lsr	w25, w25, #31
  64:	cbz	w24, b4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x8c>
  68:	mov	w19, #0x0                   	// #0
  6c:	mov	x1, x22
  70:	mov	x0, x21
  74:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  78:	add	w19, w19, w0
  7c:	ldrb	w2, [x20, #1]!
  80:	cbz	w2, c0 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x98>
  84:	cmp	w25, #0x0
  88:	ccmp	w24, w19, #0x0, ne  // ne = any
  8c:	b.gt	6c <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x44>
  90:	ldr	x25, [sp, #48]
  94:	b	c4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x9c>
  98:	str	x25, [sp, #48]
  9c:	mov	w2, #0x3c                  	// #60
  a0:	adrp	x20, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  a4:	add	x20, x20, #0x0
  a8:	b	5c <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x34>
  ac:	mov	w19, #0x0                   	// #0
  b0:	b	c4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x9c>
  b4:	mov	w19, w24
  b8:	ldr	x25, [sp, #48]
  bc:	b	c4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x9c>
  c0:	ldr	x25, [sp, #48]
  c4:	neg	w0, w19
  c8:	cmp	w23, w0
  cc:	b.ge	f4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xcc>  // b.tcont
  d0:	mov	w20, #0x20                  	// #32
  d4:	mov	w2, w20
  d8:	mov	x1, x22
  dc:	mov	x0, x21
  e0:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  e4:	add	w19, w19, w0
  e8:	neg	w0, w19
  ec:	cmp	w0, w23
  f0:	b.gt	d4 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0xac>
  f4:	mov	w0, w19
  f8:	ldp	x21, x22, [sp, #16]
  fc:	ldp	x23, x24, [sp, #32]
 100:	ldr	x30, [sp, #56]
 104:	ldp	x19, x20, [sp], #64
 108:	ret

000000000000010c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>:
 10c:	stp	x19, x20, [sp, #-352]!
 110:	stp	x21, x22, [sp, #16]
 114:	stp	x23, x24, [sp, #32]
 118:	stp	x25, x26, [sp, #48]
 11c:	stp	x27, x28, [sp, #64]
 120:	str	x30, [sp, #80]
 124:	mov	x22, x0
 128:	and	w26, w3, #0xff
 12c:	and	w0, w7, #0xff
 130:	str	w0, [sp, #108]
 134:	cmp	w26, #0xa
 138:	cset	w0, ne  // ne = any
 13c:	cmp	w0, #0x0
 140:	ccmp	w26, #0x10, #0x4, ne  // ne = any
 144:	b.ne	1ec <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xe0>  // b.any
 148:	mov	x23, x1
 14c:	mov	x19, x2
 150:	and	w20, w4, #0xff
 154:	and	w25, w5, #0xff
 158:	and	w24, w6, #0xff
 15c:	cmp	w0, #0x0
 160:	ccmp	w24, #0x0, #0x4, ne  // ne = any
 164:	b.ne	1fc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xf0>  // b.any
 168:	cmp	x2, #0x0
 16c:	ccmp	w24, #0x0, #0x4, eq  // eq = none
 170:	b.ne	20c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x100>  // b.any
 174:	cmp	w20, #0x1d
 178:	b.hi	21c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x110>  // b.pmore
 17c:	cmp	w20, #0x0
 180:	sub	w0, w20, #0x1
 184:	and	w0, w0, #0xff
 188:	ccmp	w24, #0x0, #0x4, ne  // ne = any
 18c:	csel	w20, w0, w20, ne  // ne = any
 190:	cmp	w24, #0x0
 194:	mov	w21, #0x0                   	// #0
 198:	ccmp	w25, #0x0, #0x4, ne  // ne = any
 19c:	b.ne	22c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x120>  // b.any
 1a0:	mov	x1, #0x1                   	// #1
 1a4:	and	x2, x26, #0xff
 1a8:	add	x6, sp, #0x70
 1ac:	mov	w0, w1
 1b0:	add	x4, x6, x1, lsl #3
 1b4:	udiv	x3, x19, x2
 1b8:	msub	x5, x3, x2, x19
 1bc:	stur	x5, [x4, #-8]
 1c0:	mov	x4, x19
 1c4:	mov	x19, x3
 1c8:	cmp	x2, x4
 1cc:	b.hi	240 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x134>  // b.pmore
 1d0:	add	x1, x1, #0x1
 1d4:	cmp	x1, #0x1f
 1d8:	b.ne	1ac <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xa0>  // b.any
 1dc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 1e0:	add	x0, x0, #0x0
 1e4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1e8:	bl	0 <_ZN11__sanitizer3DieEv>
 1ec:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 1f0:	add	x0, x0, #0x0
 1f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1f8:	bl	0 <_ZN11__sanitizer3DieEv>
 1fc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 200:	add	x0, x0, #0x0
 204:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 208:	bl	0 <_ZN11__sanitizer3DieEv>
 20c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 210:	add	x0, x0, #0x0
 214:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 218:	bl	0 <_ZN11__sanitizer3DieEv>
 21c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 220:	add	x0, x0, #0x0
 224:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 228:	bl	0 <_ZN11__sanitizer3DieEv>
 22c:	mov	w2, #0x2d                  	// #45
 230:	mov	x0, x22
 234:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 238:	mov	w21, w0
 23c:	b	1a0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x94>
 240:	cmp	w20, w1
 244:	b.gt	2bc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1b0>
 248:	sub	w19, w0, #0x1
 24c:	sxtw	x19, w19
 250:	cmp	w0, #0x0
 254:	b.le	2dc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1d0>
 258:	add	x27, sp, #0x70
 25c:	mov	w28, #0x30                  	// #48
 260:	mov	w20, w19
 264:	ldr	x0, [x27, x19, lsl #3]
 268:	cbnz	x0, 2ec <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1e0>
 26c:	cmp	w19, #0x0
 270:	ccmp	w25, #0x0, #0x0, ne  // ne = any
 274:	mov	w0, #0x20                  	// #32
 278:	csel	w2, w28, w0, ne  // ne = any
 27c:	mov	x1, x23
 280:	mov	x0, x22
 284:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 288:	add	w21, w21, w0
 28c:	sub	w20, w19, #0x1
 290:	sub	x19, x19, #0x1
 294:	tbz	w19, #31, 260 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x154>
 298:	eor	w25, w25, #0x1
 29c:	tst	w24, w25
 2a0:	b.eq	358 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x24c>  // b.none
 2a4:	mov	w2, #0x2d                  	// #45
 2a8:	mov	x1, x23
 2ac:	mov	x0, x22
 2b0:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 2b4:	add	w21, w21, w0
 2b8:	b	2f8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1ec>
 2bc:	sub	w2, w20, w1
 2c0:	sbfiz	x2, x2, #3, #32
 2c4:	mov	w1, #0x0                   	// #0
 2c8:	add	x3, sp, #0x70
 2cc:	add	x0, x3, w0, sxtw #3
 2d0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2d4:	mov	w0, w20
 2d8:	b	248 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x13c>
 2dc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 2e0:	add	x0, x0, #0x0
 2e4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2e8:	bl	0 <_ZN11__sanitizer3DieEv>
 2ec:	eor	w25, w25, #0x1
 2f0:	tst	w24, w25
 2f4:	b.ne	2a4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x198>  // b.any
 2f8:	tbnz	w20, #31, 358 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x24c>
 2fc:	ldr	w0, [sp, #108]
 300:	cmp	w0, #0x0
 304:	mov	w19, #0x41                  	// #65
 308:	mov	w0, #0x61                  	// #97
 30c:	csel	w19, w19, w0, ne  // ne = any
 310:	and	w19, w19, #0xff
 314:	sxtw	x20, w20
 318:	add	x24, sp, #0x70
 31c:	sub	w19, w19, #0xa
 320:	ldr	x0, [x24, x20, lsl #3]
 324:	and	w0, w0, #0xff
 328:	add	w1, w0, #0x30
 32c:	and	w1, w1, #0xff
 330:	add	w2, w0, w19
 334:	and	w2, w2, #0xff
 338:	cmp	w0, #0x9
 33c:	csel	w2, w2, w1, hi  // hi = pmore
 340:	mov	x1, x23
 344:	mov	x0, x22
 348:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 34c:	add	w21, w21, w0
 350:	sub	x20, x20, #0x1
 354:	tbz	w20, #31, 320 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x214>
 358:	mov	w0, w21
 35c:	ldp	x21, x22, [sp, #16]
 360:	ldp	x23, x24, [sp, #32]
 364:	ldp	x25, x26, [sp, #48]
 368:	ldp	x27, x28, [sp, #64]
 36c:	ldr	x30, [sp, #80]
 370:	ldp	x19, x20, [sp], #352
 374:	ret

0000000000000378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>:
 378:	stp	x19, x20, [sp, #-144]!
 37c:	stp	x21, x22, [sp, #16]
 380:	stp	x23, x24, [sp, #32]
 384:	stp	x27, x28, [sp, #64]
 388:	str	x30, [sp, #80]
 38c:	str	x0, [sp, #136]
 390:	cbz	x2, 3f0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x78>
 394:	mov	x19, x2
 398:	cmp	w1, #0x0
 39c:	b.le	404 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x8c>
 3a0:	ldr	x28, [sp, #136]
 3a4:	sxtw	x0, w1
 3a8:	str	x0, [sp, #128]
 3ac:	sub	x24, x0, #0x1
 3b0:	add	x24, x28, x24
 3b4:	ldrb	w2, [x2]
 3b8:	cbz	w2, a1c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6a4>
 3bc:	stp	x25, x26, [sp, #48]
 3c0:	ldr	x23, [x3]
 3c4:	ldr	x0, [x3, #8]
 3c8:	str	x0, [sp, #112]
 3cc:	ldr	w25, [x3, #24]
 3d0:	mov	w22, #0x0                   	// #0
 3d4:	mov	w21, #0x0                   	// #0
 3d8:	mov	w26, #0xffffffff            	// #-1
 3dc:	add	x27, sp, #0x88
 3e0:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 3e4:	add	x0, x0, #0x0
 3e8:	str	x0, [sp, #104]
 3ec:	b	438 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xc0>
 3f0:	stp	x25, x26, [sp, #48]
 3f4:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 3f8:	add	x0, x0, #0x0
 3fc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 400:	bl	0 <_ZN11__sanitizer3DieEv>
 404:	stp	x25, x26, [sp, #48]
 408:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 40c:	add	x0, x0, #0x0
 410:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 414:	bl	0 <_ZN11__sanitizer3DieEv>
 418:	mov	x1, x24
 41c:	mov	x0, x27
 420:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 424:	add	w22, w22, w0
 428:	mov	x20, x19
 42c:	add	x19, x20, #0x1
 430:	ldrb	w2, [x20, #1]
 434:	cbz	w2, 9dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x664>
 438:	cmp	w2, #0x25
 43c:	b.ne	418 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xa0>  // b.any
 440:	ldrb	w8, [x19, #1]
 444:	cmp	w8, #0x2d
 448:	cinc	x19, x19, eq  // eq = none
 44c:	ldrb	w1, [x19, #1]!
 450:	sub	w4, w1, #0x30
 454:	and	w4, w4, #0xff
 458:	cmp	w4, #0x9
 45c:	cset	w6, ls  // ls = plast
 460:	cmp	w1, #0x30
 464:	cset	w5, eq  // eq = none
 468:	mov	w0, w21
 46c:	cmp	w4, #0x9
 470:	b.ls	4b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x140>  // b.plast
 474:	ldrb	w1, [x19]
 478:	mov	w3, w26
 47c:	cmp	w1, #0x2e
 480:	b.eq	4dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x164>  // b.none
 484:	ldrb	w1, [x19]
 488:	cmp	w1, #0x7a
 48c:	cset	w2, eq  // eq = none
 490:	cinc	x19, x19, eq  // eq = none
 494:	b.eq	4ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x174>  // b.none
 498:	ldrb	w1, [x19]
 49c:	cmp	w1, #0x6c
 4a0:	b.ne	4ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x174>  // b.any
 4a4:	ldrb	w1, [x19, #1]
 4a8:	mov	w7, #0x1                   	// #1
 4ac:	cmp	w1, #0x6c
 4b0:	b.ne	4ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x174>  // b.any
 4b4:	b	4f0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x178>
 4b8:	add	w0, w0, w0, lsl #2
 4bc:	add	w0, w1, w0, lsl #1
 4c0:	sub	w0, w0, #0x30
 4c4:	ldrb	w1, [x19, #1]!
 4c8:	sub	w2, w1, #0x30
 4cc:	and	w2, w2, #0xff
 4d0:	cmp	w2, #0x9
 4d4:	b.ls	4b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x140>  // b.plast
 4d8:	b	474 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xfc>
 4dc:	ldrb	w1, [x19, #1]
 4e0:	mov	w2, w21
 4e4:	cmp	w1, #0x2a
 4e8:	b.eq	55c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1e4>  // b.none
 4ec:	mov	w7, w21
 4f0:	lsl	w1, w7, #1
 4f4:	add	x20, x19, w1, sxtw
 4f8:	orr	w2, w7, w2
 4fc:	orr	w6, w6, w2
 500:	cmp	w8, #0x2d
 504:	ccmp	w3, #0x0, #0x0, ne  // ne = any
 508:	b.lt	5c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x250>  // b.tstop
 50c:	ldrb	w1, [x19, w1, sxtw]
 510:	cmp	w1, #0x73
 514:	b.ne	5a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x230>  // b.any
 518:	cbnz	w2, 91c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5a4>
 51c:	cmp	w8, #0x2d
 520:	ccmp	w4, #0x9, #0x2, ne  // ne = any
 524:	b.ls	92c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5b4>  // b.plast
 528:	cmp	w8, #0x2d
 52c:	cneg	w0, w0, eq  // eq = none
 530:	tbnz	w25, #31, 94c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5d4>
 534:	add	x2, x23, #0xf
 538:	mov	x1, x23
 53c:	and	x23, x2, #0xfffffffffffffff8
 540:	ldr	x4, [x1]
 544:	mov	w2, w0
 548:	mov	x1, x24
 54c:	mov	x0, x27
 550:	bl	28 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 554:	add	w22, w22, w0
 558:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 55c:	add	x19, x19, #0x2
 560:	tbnz	w25, #31, 578 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x200>
 564:	add	x2, x23, #0xb
 568:	mov	x1, x23
 56c:	and	x23, x2, #0xfffffffffffffff8
 570:	ldr	w3, [x1]
 574:	b	484 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x10c>
 578:	add	w2, w25, #0x8
 57c:	cmp	w2, #0x0
 580:	b.le	598 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x220>
 584:	add	x3, x23, #0xb
 588:	mov	w25, w2
 58c:	mov	x1, x23
 590:	and	x23, x3, #0xfffffffffffffff8
 594:	b	570 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1f8>
 598:	ldr	x1, [sp, #112]
 59c:	add	x1, x1, w25, sxtw
 5a0:	mov	w25, w2
 5a4:	b	570 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1f8>
 5a8:	mov	x4, #0x0                   	// #0
 5ac:	mov	x3, #0x0                   	// #0
 5b0:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 5b4:	add	x2, x2, #0x0
 5b8:	mov	w1, #0xa9                  	// #169
 5bc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 5c0:	add	x0, x0, #0x0
 5c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5c8:	ldrb	w1, [x19, w1, sxtw]
 5cc:	cmp	w1, #0x64
 5d0:	b.eq	710 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x398>  // b.none
 5d4:	b.hi	638 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2c0>  // b.pmore
 5d8:	cmp	w1, #0x58
 5dc:	b.eq	654 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2dc>  // b.none
 5e0:	cmp	w1, #0x63
 5e4:	b.ne	614 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x29c>  // b.any
 5e8:	cbnz	w6, 97c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x604>
 5ec:	tbnz	w25, #31, 98c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x614>
 5f0:	add	x1, x23, #0xb
 5f4:	mov	x0, x23
 5f8:	and	x23, x1, #0xfffffffffffffff8
 5fc:	ldrb	w2, [x0]
 600:	mov	x1, x24
 604:	mov	x0, x27
 608:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 60c:	add	w22, w22, w0
 610:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 614:	cmp	w1, #0x25
 618:	b.ne	9cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x654>  // b.any
 61c:	cbnz	w6, 9bc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x644>
 620:	mov	w2, #0x25                  	// #37
 624:	mov	x1, x24
 628:	mov	x0, x27
 62c:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 630:	add	w22, w22, w0
 634:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 638:	cmp	w1, #0x73
 63c:	b.eq	518 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1a0>  // b.none
 640:	b.ls	6a0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x328>  // b.plast
 644:	cmp	w1, #0x75
 648:	b.eq	654 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2dc>  // b.none
 64c:	cmp	w1, #0x78
 650:	b.ne	9cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x654>  // b.any
 654:	cbz	w7, 848 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4d0>
 658:	tbnz	w25, #31, 818 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4a0>
 65c:	add	x3, x23, #0xf
 660:	mov	x2, x23
 664:	and	x23, x3, #0xfffffffffffffff8
 668:	ldr	x2, [x2]
 66c:	cmp	w1, #0x58
 670:	cset	w7, eq  // eq = none
 674:	cmp	w1, #0x75
 678:	mov	w6, #0x0                   	// #0
 67c:	mov	w4, w0
 680:	mov	w3, #0xa                   	// #10
 684:	mov	w0, #0x10                  	// #16
 688:	csel	w3, w3, w0, eq  // eq = none
 68c:	mov	x1, x24
 690:	mov	x0, x27
 694:	bl	10c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 698:	add	w22, w22, w0
 69c:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 6a0:	cmp	w1, #0x70
 6a4:	b.ne	9cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x654>  // b.any
 6a8:	cbnz	w6, 8dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x564>
 6ac:	tbnz	w25, #31, 8ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x574>
 6b0:	add	x1, x23, #0xf
 6b4:	mov	x0, x23
 6b8:	and	x23, x1, #0xfffffffffffffff8
 6bc:	ldr	x19, [x0]
 6c0:	ldr	x4, [sp, #104]
 6c4:	mov	w3, w26
 6c8:	mov	w2, w21
 6cc:	mov	x1, x24
 6d0:	mov	x0, x27
 6d4:	bl	28 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 6d8:	str	w0, [sp, #124]
 6dc:	mov	w7, #0x0                   	// #0
 6e0:	mov	w6, #0x0                   	// #0
 6e4:	mov	w5, #0x1                   	// #1
 6e8:	mov	w4, #0xc                   	// #12
 6ec:	mov	w3, #0x10                  	// #16
 6f0:	mov	x2, x19
 6f4:	mov	x1, x24
 6f8:	mov	x0, x27
 6fc:	bl	10c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 700:	ldr	w1, [sp, #124]
 704:	add	w0, w1, w0
 708:	add	w22, w22, w0
 70c:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 710:	cbz	w7, 784 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x40c>
 714:	tbnz	w25, #31, 754 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3dc>
 718:	add	x2, x23, #0xf
 71c:	mov	x1, x23
 720:	and	x23, x2, #0xfffffffffffffff8
 724:	ldr	x2, [x1]
 728:	cmp	x2, #0x0
 72c:	mov	w7, #0x0                   	// #0
 730:	lsr	x6, x2, #63
 734:	mov	w4, w0
 738:	mov	w3, #0xa                   	// #10
 73c:	cneg	x2, x2, lt  // lt = tstop
 740:	mov	x1, x24
 744:	mov	x0, x27
 748:	bl	10c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 74c:	add	w22, w22, w0
 750:	b	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb4>
 754:	add	w2, w25, #0x8
 758:	cmp	w2, #0x0
 75c:	b.le	774 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3fc>
 760:	add	x3, x23, #0xf
 764:	mov	w25, w2
 768:	mov	x1, x23
 76c:	and	x23, x3, #0xfffffffffffffff8
 770:	b	724 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3ac>
 774:	ldr	x1, [sp, #112]
 778:	add	x1, x1, w25, sxtw
 77c:	mov	w25, w2
 780:	b	724 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3ac>
 784:	cbnz	w2, 7a0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x428>
 788:	tbnz	w25, #31, 7e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x470>
 78c:	add	x2, x23, #0xb
 790:	mov	x1, x23
 794:	and	x23, x2, #0xfffffffffffffff8
 798:	ldrsw	x2, [x1]
 79c:	b	728 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3b0>
 7a0:	tbnz	w25, #31, 7b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x440>
 7a4:	add	x2, x23, #0xf
 7a8:	mov	x1, x23
 7ac:	and	x23, x2, #0xfffffffffffffff8
 7b0:	ldr	x2, [x1]
 7b4:	b	728 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3b0>
 7b8:	add	w2, w25, #0x8
 7bc:	cmp	w2, #0x0
 7c0:	b.le	7d8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x460>
 7c4:	add	x3, x23, #0xf
 7c8:	mov	w25, w2
 7cc:	mov	x1, x23
 7d0:	and	x23, x3, #0xfffffffffffffff8
 7d4:	b	7b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x438>
 7d8:	ldr	x1, [sp, #112]
 7dc:	add	x1, x1, w25, sxtw
 7e0:	mov	w25, w2
 7e4:	b	7b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x438>
 7e8:	add	w2, w25, #0x8
 7ec:	cmp	w2, #0x0
 7f0:	b.le	808 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x490>
 7f4:	add	x3, x23, #0xb
 7f8:	mov	w25, w2
 7fc:	mov	x1, x23
 800:	and	x23, x3, #0xfffffffffffffff8
 804:	b	798 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x420>
 808:	ldr	x1, [sp, #112]
 80c:	add	x1, x1, w25, sxtw
 810:	mov	w25, w2
 814:	b	798 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x420>
 818:	add	w3, w25, #0x8
 81c:	cmp	w3, #0x0
 820:	b.le	838 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4c0>
 824:	add	x4, x23, #0xf
 828:	mov	w25, w3
 82c:	mov	x2, x23
 830:	and	x23, x4, #0xfffffffffffffff8
 834:	b	668 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f0>
 838:	ldr	x2, [sp, #112]
 83c:	add	x2, x2, w25, sxtw
 840:	mov	w25, w3
 844:	b	668 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f0>
 848:	cbnz	w2, 864 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4ec>
 84c:	tbnz	w25, #31, 8ac <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x534>
 850:	add	x3, x23, #0xb
 854:	mov	x2, x23
 858:	and	x23, x3, #0xfffffffffffffff8
 85c:	ldr	w2, [x2]
 860:	b	66c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f4>
 864:	tbnz	w25, #31, 87c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x504>
 868:	add	x3, x23, #0xf
 86c:	mov	x2, x23
 870:	and	x23, x3, #0xfffffffffffffff8
 874:	ldr	x2, [x2]
 878:	b	66c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f4>
 87c:	add	w3, w25, #0x8
 880:	cmp	w3, #0x0
 884:	b.le	89c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x524>
 888:	add	x4, x23, #0xf
 88c:	mov	w25, w3
 890:	mov	x2, x23
 894:	and	x23, x4, #0xfffffffffffffff8
 898:	b	874 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4fc>
 89c:	ldr	x2, [sp, #112]
 8a0:	add	x2, x2, w25, sxtw
 8a4:	mov	w25, w3
 8a8:	b	874 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4fc>
 8ac:	add	w3, w25, #0x8
 8b0:	cmp	w3, #0x0
 8b4:	b.le	8cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x554>
 8b8:	add	x4, x23, #0xb
 8bc:	mov	w25, w3
 8c0:	mov	x2, x23
 8c4:	and	x23, x4, #0xfffffffffffffff8
 8c8:	b	85c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4e4>
 8cc:	ldr	x2, [sp, #112]
 8d0:	add	x2, x2, w25, sxtw
 8d4:	mov	w25, w3
 8d8:	b	85c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4e4>
 8dc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 8e0:	add	x0, x0, #0x0
 8e4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 8e8:	bl	0 <_ZN11__sanitizer3DieEv>
 8ec:	add	w1, w25, #0x8
 8f0:	cmp	w1, #0x0
 8f4:	b.le	90c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x594>
 8f8:	add	x2, x23, #0xf
 8fc:	mov	w25, w1
 900:	mov	x0, x23
 904:	and	x23, x2, #0xfffffffffffffff8
 908:	b	6bc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x344>
 90c:	ldr	x0, [sp, #112]
 910:	add	x0, x0, w25, sxtw
 914:	mov	w25, w1
 918:	b	6bc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x344>
 91c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 920:	add	x0, x0, #0x0
 924:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 928:	bl	0 <_ZN11__sanitizer3DieEv>
 92c:	mov	x4, #0x0                   	// #0
 930:	mov	x3, #0x0                   	// #0
 934:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 938:	add	x2, x2, #0x0
 93c:	mov	w1, #0xc6                  	// #198
 940:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 944:	add	x0, x0, #0x0
 948:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 94c:	add	w2, w25, #0x8
 950:	cmp	w2, #0x0
 954:	b.le	96c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5f4>
 958:	add	x4, x23, #0xf
 95c:	mov	w25, w2
 960:	mov	x1, x23
 964:	and	x23, x4, #0xfffffffffffffff8
 968:	b	540 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1c8>
 96c:	ldr	x1, [sp, #112]
 970:	add	x1, x1, w25, sxtw
 974:	mov	w25, w2
 978:	b	540 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1c8>
 97c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 980:	add	x0, x0, #0x0
 984:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 988:	bl	0 <_ZN11__sanitizer3DieEv>
 98c:	add	w1, w25, #0x8
 990:	cmp	w1, #0x0
 994:	b.le	9ac <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x634>
 998:	add	x2, x23, #0xb
 99c:	mov	w25, w1
 9a0:	mov	x0, x23
 9a4:	and	x23, x2, #0xfffffffffffffff8
 9a8:	b	5fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x284>
 9ac:	ldr	x0, [sp, #112]
 9b0:	add	x0, x0, w25, sxtw
 9b4:	mov	w25, w1
 9b8:	b	5fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x284>
 9bc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 9c0:	add	x0, x0, #0x0
 9c4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9c8:	bl	0 <_ZN11__sanitizer3DieEv>
 9cc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 9d0:	add	x0, x0, #0x0
 9d4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9d8:	bl	0 <_ZN11__sanitizer3DieEv>
 9dc:	ldp	x25, x26, [sp, #48]
 9e0:	ldr	x0, [sp, #136]
 9e4:	cmp	x0, x24
 9e8:	b.hi	a24 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6ac>  // b.pmore
 9ec:	mov	w2, #0x0                   	// #0
 9f0:	ldr	x0, [sp, #128]
 9f4:	add	x1, x28, x0
 9f8:	add	x0, sp, #0x88
 9fc:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 a00:	mov	w0, w22
 a04:	ldp	x21, x22, [sp, #16]
 a08:	ldp	x23, x24, [sp, #32]
 a0c:	ldp	x27, x28, [sp, #64]
 a10:	ldr	x30, [sp, #80]
 a14:	ldp	x19, x20, [sp], #144
 a18:	ret
 a1c:	mov	w22, #0x0                   	// #0
 a20:	b	9e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x668>
 a24:	stp	x25, x26, [sp, #48]
 a28:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 a2c:	add	x0, x0, #0x0
 a30:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a34:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000a38 <_ZN11__sanitizer26SetPrintfAndReportCallbackEPFvPKcE>:
 a38:	adrp	x1, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 a3c:	str	x0, [x1]
 a40:	ret

0000000000000a44 <OnPrint>:
 a44:	ret

0000000000000a48 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>:
 a48:	sub	sp, sp, #0x100
 a4c:	str	x30, [sp]
 a50:	str	x3, [sp, #216]
 a54:	str	x4, [sp, #224]
 a58:	str	x5, [sp, #232]
 a5c:	str	x6, [sp, #240]
 a60:	str	x7, [sp, #248]
 a64:	str	q0, [sp, #80]
 a68:	str	q1, [sp, #96]
 a6c:	str	q2, [sp, #112]
 a70:	str	q3, [sp, #128]
 a74:	str	q4, [sp, #144]
 a78:	str	q5, [sp, #160]
 a7c:	str	q6, [sp, #176]
 a80:	str	q7, [sp, #192]
 a84:	add	x3, sp, #0x100
 a88:	str	x3, [sp, #48]
 a8c:	str	x3, [sp, #56]
 a90:	add	x3, sp, #0xd0
 a94:	str	x3, [sp, #64]
 a98:	mov	w3, #0xffffffd8            	// #-40
 a9c:	str	w3, [sp, #72]
 aa0:	mov	w3, #0xffffff80            	// #-128
 aa4:	str	w3, [sp, #76]
 aa8:	ldp	x4, x5, [sp, #48]
 aac:	stp	x4, x5, [sp, #16]
 ab0:	ldp	x4, x5, [sp, #64]
 ab4:	stp	x4, x5, [sp, #32]
 ab8:	add	x3, sp, #0x10
 abc:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 ac0:	ldr	x30, [sp]
 ac4:	add	sp, sp, #0x100
 ac8:	ret

0000000000000acc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list>:
 acc:	stp	x19, x20, [sp, #-192]!
 ad0:	stp	x21, x22, [sp, #16]
 ad4:	stp	x23, x24, [sp, #32]
 ad8:	stp	x25, x26, [sp, #48]
 adc:	stp	x27, x28, [sp, #64]
 ae0:	str	x30, [sp, #80]
 ae4:	and	w28, w0, #0xff
 ae8:	mov	x23, x1
 aec:	mov	w22, w2
 af0:	str	x3, [sp, #104]
 af4:	mov	x20, x4
 af8:	ldp	x0, x1, [x4]
 afc:	stp	x0, x1, [sp, #160]
 b00:	ldp	x0, x1, [x4, #16]
 b04:	stp	x0, x1, [sp, #176]
 b08:	mov	x19, x23
 b0c:	mov	w27, #0x0                   	// #0
 b10:	add	x26, sp, #0x80
 b14:	adrp	x24, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 b18:	ldr	x24, [x24]
 b1c:	adrp	x25, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 b20:	add	x25, x25, #0x0
 b24:	cbz	w28, cd4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x208>
 b28:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 b2c:	str	x0, [sp, #112]
 b30:	str	w0, [sp, #124]
 b34:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 b38:	mov	x3, x0
 b3c:	cmp	x0, #0x0
 b40:	cset	w1, ne  // ne = any
 b44:	ldrb	w0, [x24, #48]
 b48:	mov	w21, #0x0                   	// #0
 b4c:	tst	w1, w0
 b50:	b.ne	c28 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x15c>  // b.any
 b54:	sub	w1, w22, w21
 b58:	ldr	w3, [sp, #112]
 b5c:	mov	x2, x25
 b60:	sxtw	x1, w1
 b64:	add	x0, x19, w21, sxtw
 b68:	bl	a48 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 b6c:	add	w21, w21, w0
 b70:	cmp	w22, w21
 b74:	b.gt	cd8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x20c>
 b78:	cbz	w27, d0c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x240>
 b7c:	mov	w0, #0x3fff                	// #16383
 b80:	cmp	w21, w0
 b84:	b.gt	cc4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x1f8>
 b88:	ldp	x0, x1, [x20]
 b8c:	stp	x0, x1, [sp, #128]
 b90:	ldp	x0, x1, [x20, #16]
 b94:	stp	x0, x1, [sp, #144]
 b98:	add	x3, sp, #0x80
 b9c:	ldr	x2, [sp, #104]
 ba0:	sub	w1, w22, w21
 ba4:	add	x0, x19, w21, sxtw
 ba8:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 bac:	add	w0, w0, w21
 bb0:	cmp	w22, w0
 bb4:	b.gt	bc4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xf8>
 bb8:	mov	w1, #0x3fff                	// #16383
 bbc:	cmp	w0, w1
 bc0:	b.gt	d40 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x274>
 bc4:	mov	x0, x19
 bc8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 bcc:	mov	x0, x19
 bd0:	bl	0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>
 bd4:	mov	x0, x19
 bd8:	bl	a44 <OnPrint>
 bdc:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 be0:	ldr	x1, [x0]
 be4:	cbz	x1, bf0 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x124>
 be8:	mov	x0, x19
 bec:	blr	x1
 bf0:	mov	x0, x19
 bf4:	bl	0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>
 bf8:	cmp	x19, x23
 bfc:	b.eq	c0c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x140>  // b.none
 c00:	sxtw	x1, w22
 c04:	mov	x0, x19
 c08:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 c0c:	ldp	x21, x22, [sp, #16]
 c10:	ldp	x23, x24, [sp, #32]
 c14:	ldp	x25, x26, [sp, #48]
 c18:	ldp	x27, x28, [sp, #64]
 c1c:	ldr	x30, [sp, #80]
 c20:	ldp	x19, x20, [sp], #192
 c24:	ret
 c28:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 c2c:	add	x2, x2, #0x0
 c30:	sxtw	x1, w22
 c34:	mov	x0, x19
 c38:	bl	a48 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 c3c:	mov	w21, w0
 c40:	cmp	w22, w0
 c44:	b.gt	b54 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x88>
 c48:	cbz	w27, d0c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x240>
 c4c:	mov	w0, #0x3fff                	// #16383
 c50:	cmp	w21, w0
 c54:	b.gt	cb4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x1e8>
 c58:	sub	w1, w22, w21
 c5c:	ldr	w3, [sp, #124]
 c60:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 c64:	add	x2, x2, #0x0
 c68:	sxtw	x1, w1
 c6c:	add	x0, x19, w21, sxtw
 c70:	bl	a48 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 c74:	add	w21, w21, w0
 c78:	cmp	w22, w21
 c7c:	b.le	b7c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xb0>
 c80:	ldp	x0, x1, [x20]
 c84:	stp	x0, x1, [sp, #128]
 c88:	ldp	x0, x1, [x20, #16]
 c8c:	stp	x0, x1, [sp, #144]
 c90:	add	x3, sp, #0x80
 c94:	ldr	x2, [sp, #104]
 c98:	sub	w1, w22, w21
 c9c:	add	x0, x19, w21, sxtw
 ca0:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 ca4:	add	w0, w21, w0
 ca8:	cmp	w22, w0
 cac:	b.le	bb8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xec>
 cb0:	b	bc4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xf8>
 cb4:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 cb8:	add	x0, x0, #0x0
 cbc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 cc0:	bl	0 <_ZN11__sanitizer3DieEv>
 cc4:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 cc8:	add	x0, x0, #0x0
 ccc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 cd0:	bl	0 <_ZN11__sanitizer3DieEv>
 cd4:	mov	w21, #0x0                   	// #0
 cd8:	ldp	x0, x1, [x20]
 cdc:	stp	x0, x1, [x26]
 ce0:	ldp	x0, x1, [x20, #16]
 ce4:	stp	x0, x1, [x26, #16]
 ce8:	mov	x3, x26
 cec:	ldr	x2, [sp, #104]
 cf0:	sub	w1, w22, w21
 cf4:	add	x0, x19, w21, sxtw
 cf8:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 cfc:	add	w0, w21, w0
 d00:	cmp	w22, w0
 d04:	b.gt	bc4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xf8>
 d08:	cbnz	w27, bb8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0xec>
 d0c:	add	w27, w27, #0x1
 d10:	ldp	x0, x1, [sp, #160]
 d14:	stp	x0, x1, [x20]
 d18:	ldp	x0, x1, [sp, #176]
 d1c:	stp	x0, x1, [x20, #16]
 d20:	mov	w2, #0x0                   	// #0
 d24:	adrp	x1, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 d28:	add	x1, x1, #0x0
 d2c:	mov	x0, #0x4000                	// #16384
 d30:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 d34:	mov	x19, x0
 d38:	mov	w22, #0x4000                	// #16384
 d3c:	b	b24 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list+0x58>
 d40:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 d44:	add	x0, x0, #0x0
 d48:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 d4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000d50 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>:
 d50:	sub	sp, sp, #0x1c0
 d54:	str	x30, [sp]
 d58:	ldp	x4, x5, [x2]
 d5c:	stp	x4, x5, [sp, #16]
 d60:	ldp	x2, x3, [x2, #16]
 d64:	stp	x2, x3, [sp, #32]
 d68:	add	x4, sp, #0x10
 d6c:	mov	x3, x1
 d70:	mov	w2, #0x190                 	// #400
 d74:	add	x1, sp, #0x30
 d78:	bl	acc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list>
 d7c:	ldr	x30, [sp]
 d80:	add	sp, sp, #0x1c0
 d84:	ret

0000000000000d88 <_ZN11__sanitizer6PrintfEPKcz>:
 d88:	sub	sp, sp, #0x110
 d8c:	str	x30, [sp]
 d90:	str	x1, [sp, #216]
 d94:	str	x2, [sp, #224]
 d98:	str	x3, [sp, #232]
 d9c:	str	x4, [sp, #240]
 da0:	str	x5, [sp, #248]
 da4:	str	x6, [sp, #256]
 da8:	str	x7, [sp, #264]
 dac:	str	q0, [sp, #80]
 db0:	str	q1, [sp, #96]
 db4:	str	q2, [sp, #112]
 db8:	str	q3, [sp, #128]
 dbc:	str	q4, [sp, #144]
 dc0:	str	q5, [sp, #160]
 dc4:	str	q6, [sp, #176]
 dc8:	str	q7, [sp, #192]
 dcc:	add	x1, sp, #0x110
 dd0:	str	x1, [sp, #48]
 dd4:	str	x1, [sp, #56]
 dd8:	add	x1, sp, #0xd0
 ddc:	str	x1, [sp, #64]
 de0:	mov	w1, #0xffffffc8            	// #-56
 de4:	str	w1, [sp, #72]
 de8:	mov	w1, #0xffffff80            	// #-128
 dec:	str	w1, [sp, #76]
 df0:	ldp	x2, x3, [sp, #48]
 df4:	stp	x2, x3, [sp, #16]
 df8:	ldp	x2, x3, [sp, #64]
 dfc:	stp	x2, x3, [sp, #32]
 e00:	add	x2, sp, #0x10
 e04:	mov	x1, x0
 e08:	mov	w0, #0x0                   	// #0
 e0c:	bl	d50 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 e10:	ldr	x30, [sp]
 e14:	add	sp, sp, #0x110
 e18:	ret

0000000000000e1c <_ZN11__sanitizer6ReportEPKcz>:
 e1c:	sub	sp, sp, #0x110
 e20:	str	x30, [sp]
 e24:	str	x1, [sp, #216]
 e28:	str	x2, [sp, #224]
 e2c:	str	x3, [sp, #232]
 e30:	str	x4, [sp, #240]
 e34:	str	x5, [sp, #248]
 e38:	str	x6, [sp, #256]
 e3c:	str	x7, [sp, #264]
 e40:	str	q0, [sp, #80]
 e44:	str	q1, [sp, #96]
 e48:	str	q2, [sp, #112]
 e4c:	str	q3, [sp, #128]
 e50:	str	q4, [sp, #144]
 e54:	str	q5, [sp, #160]
 e58:	str	q6, [sp, #176]
 e5c:	str	q7, [sp, #192]
 e60:	add	x1, sp, #0x110
 e64:	str	x1, [sp, #48]
 e68:	str	x1, [sp, #56]
 e6c:	add	x1, sp, #0xd0
 e70:	str	x1, [sp, #64]
 e74:	mov	w1, #0xffffffc8            	// #-56
 e78:	str	w1, [sp, #72]
 e7c:	mov	w1, #0xffffff80            	// #-128
 e80:	str	w1, [sp, #76]
 e84:	ldp	x2, x3, [sp, #48]
 e88:	stp	x2, x3, [sp, #16]
 e8c:	ldp	x2, x3, [sp, #64]
 e90:	stp	x2, x3, [sp, #32]
 e94:	add	x2, sp, #0x10
 e98:	mov	x1, x0
 e9c:	mov	w0, #0x1                   	// #1
 ea0:	bl	d50 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 ea4:	ldr	x30, [sp]
 ea8:	add	sp, sp, #0x110
 eac:	ret

0000000000000eb0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>:
 eb0:	stp	x19, x30, [sp, #-256]!
 eb4:	str	x2, [sp, #208]
 eb8:	str	x3, [sp, #216]
 ebc:	str	x4, [sp, #224]
 ec0:	str	x5, [sp, #232]
 ec4:	str	x6, [sp, #240]
 ec8:	str	x7, [sp, #248]
 ecc:	str	q0, [sp, #80]
 ed0:	str	q1, [sp, #96]
 ed4:	str	q2, [sp, #112]
 ed8:	str	q3, [sp, #128]
 edc:	str	q4, [sp, #144]
 ee0:	str	q5, [sp, #160]
 ee4:	str	q6, [sp, #176]
 ee8:	str	q7, [sp, #192]
 eec:	ldr	x3, [x0, #24]
 ef0:	ldr	x4, [x0, #16]
 ef4:	cmp	x3, x4
 ef8:	b.cs	f84 <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xd4>  // b.hs, b.nlast
 efc:	mov	x19, x0
 f00:	add	x0, sp, #0x100
 f04:	str	x0, [sp, #48]
 f08:	str	x0, [sp, #56]
 f0c:	add	x0, sp, #0xd0
 f10:	str	x0, [sp, #64]
 f14:	mov	w0, #0xffffffd0            	// #-48
 f18:	str	w0, [sp, #72]
 f1c:	mov	w0, #0xffffff80            	// #-128
 f20:	str	w0, [sp, #76]
 f24:	ldr	x0, [x19, #24]
 f28:	ldp	x2, x3, [sp, #48]
 f2c:	stp	x2, x3, [sp, #16]
 f30:	ldp	x2, x3, [sp, #64]
 f34:	stp	x2, x3, [sp, #32]
 f38:	ldr	x5, [x19, #16]
 f3c:	ldr	x4, [x19]
 f40:	add	x3, sp, #0x10
 f44:	mov	x2, x1
 f48:	sub	w1, w5, w0
 f4c:	add	x0, x4, x0
 f50:	bl	378 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 f54:	ldr	x1, [x19]
 f58:	ldr	x0, [x19, #24]
 f5c:	add	x0, x1, x0
 f60:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 f64:	ldr	x3, [x19, #24]
 f68:	add	x3, x0, x3
 f6c:	str	x3, [x19, #24]
 f70:	ldr	x4, [x19, #16]
 f74:	cmp	x3, x4
 f78:	b.cs	f9c <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xec>  // b.hs, b.nlast
 f7c:	ldp	x19, x30, [sp], #256
 f80:	ret
 f84:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 f88:	add	x2, x2, #0x0
 f8c:	mov	w1, #0x15c                 	// #348
 f90:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 f94:	add	x0, x0, #0x0
 f98:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 f9c:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 fa0:	add	x2, x2, #0x0
 fa4:	mov	w1, #0x162                 	// #354
 fa8:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 fac:	add	x0, x0, #0x0
 fb0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_procmaps_bsd.o:     file format elf64-littleaarch64


sanitizer_procmaps_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL14TranslateDigitEc>:
   0:	and	w0, w0, #0xff
   4:	sub	w1, w0, #0x30
   8:	and	w1, w1, #0xff
   c:	cmp	w1, #0x9
  10:	b.ls	3c <_ZN11__sanitizerL14TranslateDigitEc+0x3c>  // b.plast
  14:	sub	w1, w0, #0x61
  18:	and	w1, w1, #0xff
  1c:	cmp	w1, #0x5
  20:	b.ls	44 <_ZN11__sanitizerL14TranslateDigitEc+0x44>  // b.plast
  24:	sub	w1, w0, #0x41
  28:	and	w1, w1, #0xff
  2c:	sub	w0, w0, #0x37
  30:	cmp	w1, #0x6
  34:	csinv	w0, w0, wzr, cc  // cc = lo, ul, last
  38:	ret
  3c:	sub	w0, w0, #0x30
  40:	b	38 <_ZN11__sanitizerL14TranslateDigitEc+0x38>
  44:	sub	w0, w0, #0x57
  48:	b	38 <_ZN11__sanitizerL14TranslateDigitEc+0x38>

000000000000004c <_ZN11__sanitizerL11ParseNumberEPPKci>:
  4c:	stp	x19, x20, [sp, #-48]!
  50:	stp	x21, x22, [sp, #16]
  54:	stp	x23, x30, [sp, #32]
  58:	mov	x20, x0
  5c:	mov	w22, w1
  60:	sub	w0, w1, #0x2
  64:	mov	x21, #0x0                   	// #0
  68:	sxtw	x23, w1
  6c:	cmp	w0, #0xe
  70:	b.hi	a0 <_ZN11__sanitizerL11ParseNumberEPPKci+0x54>  // b.pmore
  74:	ldr	x19, [x20]
  78:	ldrb	w0, [x19]
  7c:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  80:	cmp	w0, #0x0
  84:	ccmp	w22, w0, #0x4, ge  // ge = tcont
  88:	b.le	c0 <_ZN11__sanitizerL11ParseNumberEPPKci+0x74>
  8c:	sxtw	x0, w0
  90:	madd	x21, x23, x21, x0
  94:	add	x19, x19, #0x1
  98:	str	x19, [x20]
  9c:	b	74 <_ZN11__sanitizerL11ParseNumberEPPKci+0x28>
  a0:	mov	x4, #0x0                   	// #0
  a4:	mov	x3, #0x0                   	// #0
  a8:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
  ac:	add	x2, x2, #0x0
  b0:	mov	w1, #0x27                  	// #39
  b4:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  c0:	mov	x0, x21
  c4:	ldp	x21, x22, [sp, #16]
  c8:	ldp	x23, x30, [sp, #32]
  cc:	ldp	x19, x20, [sp], #48
  d0:	ret

00000000000000d4 <_ZN11__sanitizer9IsDecimalEc>:
  d4:	str	x30, [sp, #-16]!
  d8:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  dc:	cmp	w0, #0x9
  e0:	cset	w0, ls  // ls = plast
  e4:	ldr	x30, [sp], #16
  e8:	ret

00000000000000ec <_ZN11__sanitizer12ParseDecimalEPPKc>:
  ec:	str	x30, [sp, #-16]!
  f0:	mov	w1, #0xa                   	// #10
  f4:	bl	4c <_ZN11__sanitizerL11ParseNumberEPPKci>
  f8:	ldr	x30, [sp], #16
  fc:	ret

0000000000000100 <_ZN11__sanitizer5IsHexEc>:
 100:	str	x30, [sp, #-16]!
 104:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 108:	cmp	w0, #0xf
 10c:	cset	w0, ls  // ls = plast
 110:	ldr	x30, [sp], #16
 114:	ret

0000000000000118 <_ZN11__sanitizer8ParseHexEPPKc>:
 118:	str	x30, [sp, #-16]!
 11c:	mov	w1, #0x10                  	// #16
 120:	bl	4c <_ZN11__sanitizerL11ParseNumberEPPKci>
 124:	ldr	x30, [sp], #16
 128:	ret

000000000000012c <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>:
 12c:	str	x30, [sp, #-16]!
 130:	mov	x6, x0
 134:	mov	x0, x1
 138:	ldr	x1, [x6, #72]
 13c:	cbnz	x1, 164 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE+0x38>
 140:	ldr	x3, [x6, #40]
 144:	ubfx	w4, w3, #1, #1
 148:	ubfx	w3, w3, #2, #1
 14c:	mov	x5, #0x0                   	// #0
 150:	ldr	x2, [x6, #8]
 154:	ldr	x1, [x6]
 158:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 15c:	ldr	x30, [sp], #16
 160:	ret
 164:	mov	x4, #0x0                   	// #0
 168:	mov	x3, #0x0                   	// #0
 16c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 170:	add	x2, x2, #0x0
 174:	mov	w1, #0x43                  	// #67
 178:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 17c:	add	x0, x0, #0x0
 180:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000184 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>:
 184:	mov	x1, x0
 188:	ldr	x0, [x0]
 18c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 190:	ldr	x2, [x2]
 194:	cmp	x0, x2
 198:	b.eq	1b0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev+0x2c>  // b.none
 19c:	str	x30, [sp, #-16]!
 1a0:	ldr	x1, [x1, #8]
 1a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1a8:	ldr	x30, [sp], #16
 1ac:	ret
 1b0:	ret

00000000000001b4 <_ZN11__sanitizer19MemoryMappingLayout5ResetEv>:
 1b4:	ldr	x1, [x0]
 1b8:	str	x1, [x0, #24]
 1bc:	ret

00000000000001c0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>:
 1c0:	str	x30, [sp, #-48]!
 1c4:	add	x0, sp, #0x18
 1c8:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 1cc:	ldr	x0, [sp, #32]
 1d0:	cbnz	x0, 1dc <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x1c>
 1d4:	ldr	x30, [sp], #48
 1d8:	ret
 1dc:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 1e0:	add	x0, x0, #0x0
 1e4:	add	x0, x0, #0x18
 1e8:	mov	w2, #0x1                   	// #1
 1ec:	ldxrb	w1, [x0]
 1f0:	stxrb	w3, w2, [x0]
 1f4:	cbnz	w3, 1ec <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x2c>
 1f8:	dmb	ish
 1fc:	and	w0, w1, #0xff
 200:	cbnz	w0, 234 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x74>
 204:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 208:	ldr	x1, [x0]
 20c:	cbnz	x1, 248 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x88>
 210:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 214:	add	x0, x0, #0x0
 218:	ldp	x2, x3, [sp, #24]
 21c:	stp	x2, x3, [x0]
 220:	ldr	x1, [sp, #40]
 224:	str	x1, [x0, #16]
 228:	dmb	ish
 22c:	strb	wzr, [x0, #24]
 230:	b	1d4 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x14>
 234:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 238:	add	x0, x0, #0x0
 23c:	add	x0, x0, #0x18
 240:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 244:	b	204 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x44>
 248:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 24c:	ldr	x0, [x0]
 250:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 254:	b	210 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x50>

0000000000000258 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>:
 258:	stp	x19, x30, [sp, #-16]!
 25c:	mov	x19, x0
 260:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 264:	add	x1, x1, #0x0
 268:	add	x1, x1, #0x18
 26c:	mov	w2, #0x1                   	// #1
 270:	ldxrb	w0, [x1]
 274:	stxrb	w3, w2, [x1]
 278:	cbnz	w3, 270 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x18>
 27c:	dmb	ish
 280:	and	w0, w0, #0xff
 284:	cbnz	w0, 2c4 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x6c>
 288:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 28c:	ldr	x0, [x0]
 290:	cbz	x0, 2ac <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x54>
 294:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 298:	add	x0, x0, #0x0
 29c:	ldp	x2, x3, [x0]
 2a0:	stp	x2, x3, [x19]
 2a4:	ldr	x0, [x0, #16]
 2a8:	str	x0, [x19, #16]
 2ac:	dmb	ish
 2b0:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2b4:	add	x0, x0, #0x0
 2b8:	strb	wzr, [x0, #24]
 2bc:	ldp	x19, x30, [sp], #16
 2c0:	ret
 2c4:	mov	x0, x1
 2c8:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 2cc:	b	288 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x30>

00000000000002d0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>:
 2d0:	stp	x19, x30, [sp, #-16]!
 2d4:	mov	x19, x0
 2d8:	tst	w1, #0xff
 2dc:	b.ne	304 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x34>  // b.any
 2e0:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2e4:	ldr	x0, [x19, #8]
 2e8:	cbz	x0, 324 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x54>
 2ec:	ldr	x0, [x19, #16]
 2f0:	cbz	x0, 344 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x74>
 2f4:	ldr	x0, [x19]
 2f8:	str	x0, [x19, #24]
 2fc:	ldp	x19, x30, [sp], #16
 300:	ret
 304:	bl	1c0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 308:	mov	x0, x19
 30c:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 310:	ldr	x0, [x19, #8]
 314:	cbnz	x0, 2ec <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x1c>
 318:	mov	x0, x19
 31c:	bl	258 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>
 320:	b	2e4 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x14>
 324:	mov	x4, #0x0                   	// #0
 328:	mov	x3, #0x0                   	// #0
 32c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 330:	add	x2, x2, #0x0
 334:	mov	w1, #0x51                  	// #81
 338:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 33c:	add	x0, x0, #0x0
 340:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 344:	mov	x4, #0x0                   	// #0
 348:	mov	x3, #0x0                   	// #0
 34c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 350:	add	x2, x2, #0x0
 354:	mov	w1, #0x52                  	// #82
 358:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 35c:	add	x0, x0, #0x0
 360:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000364 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>:
 364:	stp	x19, x20, [sp, #-272]!
 368:	stp	x21, x22, [sp, #16]
 36c:	stp	x23, x24, [sp, #32]
 370:	stp	x25, x26, [sp, #48]
 374:	stp	x27, x28, [sp, #64]
 378:	str	x30, [sp, #80]
 37c:	mov	x22, x0
 380:	mov	x19, x1
 384:	ldr	x0, [x0]
 388:	str	x0, [x22, #24]
 38c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 390:	ldr	x0, [x0]
 394:	ldr	x0, [x0]
 398:	cbz	x0, 440 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xdc>
 39c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3a0:	ldr	x0, [x0]
 3a4:	ldr	x0, [x0]
 3a8:	sub	x20, x0, #0x1
 3ac:	ands	x20, x20, x0
 3b0:	b.ne	454 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xf0>  // b.any
 3b4:	add	x27, x0, #0xfff
 3b8:	neg	x0, x0
 3bc:	and	x27, x27, x0
 3c0:	mov	w2, #0x0                   	// #0
 3c4:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 3c8:	add	x1, x1, #0x0
 3cc:	mov	x0, x27
 3d0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3d4:	mov	x26, x0
 3d8:	mov	x2, #0x0                   	// #0
 3dc:	mov	x1, #0x0                   	// #0
 3e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e4:	mov	x1, #0x0                   	// #0
 3e8:	mov	x0, #0x0                   	// #0
 3ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3f0:	cmp	x27, #0xfff
 3f4:	b.ls	464 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x100>  // b.plast
 3f8:	mov	x2, #0x1000                	// #4096
 3fc:	mov	w1, #0x0                   	// #0
 400:	mov	x0, x26
 404:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 408:	strb	wzr, [x26]
 40c:	str	x26, [sp, #216]
 410:	mov	x0, #0x1000                	// #4096
 414:	str	x0, [sp, #224]
 418:	str	xzr, [sp, #264]
 41c:	add	x25, sp, #0xc0
 420:	add	x24, sp, #0x78
 424:	add	x0, x24, #0x1c
 428:	str	x0, [sp, #104]
 42c:	mov	x28, #0xe38f                	// #58255
 430:	movk	x28, #0x8e38, lsl #16
 434:	movk	x28, #0x38e3, lsl #32
 438:	movk	x28, #0xe38e, lsl #48
 43c:	b	5f4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x290>
 440:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 444:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 448:	ldr	x1, [x1]
 44c:	str	x0, [x1]
 450:	b	39c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x38>
 454:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 458:	add	x0, x0, #0x0
 45c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 460:	bl	0 <_ZN11__sanitizer3DieEv>
 464:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 468:	ldr	x0, [x0]
 46c:	ldr	x0, [x0]
 470:	cbz	x0, 4d4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x170>
 474:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 478:	ldr	x0, [x0]
 47c:	ldr	x0, [x0]
 480:	sub	x1, x0, #0x1
 484:	tst	x1, x0
 488:	b.ne	4e8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x184>  // b.any
 48c:	add	x21, x0, #0xfff
 490:	neg	x0, x0
 494:	and	x21, x21, x0
 498:	mov	w2, #0x0                   	// #0
 49c:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 4a0:	add	x1, x1, #0x0
 4a4:	mov	x0, x21
 4a8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 4ac:	mov	x23, x0
 4b0:	mov	x2, #0x0                   	// #0
 4b4:	mov	x1, x26
 4b8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4bc:	mov	x1, x27
 4c0:	mov	x0, x26
 4c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4c8:	mov	x27, x21
 4cc:	mov	x26, x23
 4d0:	b	3f8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x94>
 4d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 4d8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4dc:	ldr	x1, [x1]
 4e0:	str	x0, [x1]
 4e4:	b	474 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x110>
 4e8:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 4ec:	add	x0, x0, #0x0
 4f0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4f4:	bl	0 <_ZN11__sanitizer3DieEv>
 4f8:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 4fc:	add	x2, x2, #0x0
 500:	mov	w1, #0x1be                 	// #446
 504:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 508:	add	x0, x0, #0x0
 50c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 510:	mov	x3, x0
 514:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 518:	add	x2, x2, #0x0
 51c:	mov	w1, #0x17b                 	// #379
 520:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 524:	add	x0, x0, #0x0
 528:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 52c:	mov	x4, x1
 530:	mov	x3, x0
 534:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 538:	add	x2, x2, #0x0
 53c:	mov	w1, #0x17c                 	// #380
 540:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 544:	add	x0, x0, #0x0
 548:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 54c:	mov	x4, x0
 550:	add	x4, x4, x4, lsl #3
 554:	lsl	x21, x4, #3
 558:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 55c:	ldr	x0, [x0]
 560:	ldr	x0, [x0]
 564:	cbz	x0, 6f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x38c>
 568:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 56c:	ldr	x0, [x0]
 570:	ldr	x0, [x0]
 574:	sub	x1, x0, #0x1
 578:	tst	x0, x1
 57c:	b.ne	704 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x3a0>  // b.any
 580:	add	x21, x21, x1
 584:	neg	x0, x0
 588:	and	x21, x21, x0
 58c:	mov	w2, #0x0                   	// #0
 590:	adrp	x1, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 594:	add	x1, x1, #0x0
 598:	mov	x0, x21
 59c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5a0:	mov	x23, x0
 5a4:	ldr	x2, [x19, #16]
 5a8:	add	x2, x2, x2, lsl #3
 5ac:	lsl	x2, x2, #3
 5b0:	ldr	x1, [x19]
 5b4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5b8:	ldr	x1, [x19, #8]
 5bc:	ldr	x0, [x19]
 5c0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5c4:	str	x23, [x19]
 5c8:	str	x21, [x19, #8]
 5cc:	ldr	x3, [x19]
 5d0:	ldr	x1, [x19, #16]
 5d4:	add	x0, x1, #0x1
 5d8:	str	x0, [x19, #16]
 5dc:	add	x0, x1, x1, lsl #3
 5e0:	mov	x2, #0x48                  	// #72
 5e4:	mov	x1, x24
 5e8:	add	x0, x3, x0, lsl #3
 5ec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5f0:	add	x20, x20, #0x1
 5f4:	mov	x1, x25
 5f8:	mov	x0, x22
 5fc:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 600:	and	w0, w0, #0xff
 604:	cbz	w0, 714 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x3b0>
 608:	ldr	x23, [sp, #216]
 60c:	ldrb	w0, [x23]
 610:	cbz	w0, 5f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x28c>
 614:	cmp	x20, #0x0
 618:	ldr	x21, [sp, #192]
 61c:	csel	x21, x21, x20, ne  // ne = any
 620:	ldr	x0, [sp, #208]
 624:	sub	x21, x21, x0
 628:	str	xzr, [sp, #120]
 62c:	str	xzr, [sp, #128]
 630:	str	xzr, [sp, #136]
 634:	str	wzr, [sp, #144]
 638:	strb	wzr, [sp, #164]
 63c:	mov	x2, #0x10                  	// #16
 640:	mov	w1, #0x0                   	// #0
 644:	ldr	x0, [sp, #104]
 648:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 64c:	str	xzr, [sp, #184]
 650:	str	xzr, [sp, #176]
 654:	str	xzr, [sp, #168]
 658:	mov	x2, x21
 65c:	mov	x1, x23
 660:	mov	x0, x24
 664:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 668:	mov	x1, x24
 66c:	mov	x0, x25
 670:	bl	12c <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>
 674:	ldr	x3, [x19, #16]
 678:	ldr	x0, [x19, #8]
 67c:	umulh	x0, x0, x28
 680:	lsr	x4, x0, #6
 684:	cmp	x3, x0, lsr #6
 688:	b.hi	4f8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x194>  // b.pmore
 68c:	cmp	x3, x4
 690:	b.ne	5cc <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x268>  // b.any
 694:	add	x0, x3, #0x1
 698:	tst	x3, x0
 69c:	b.eq	54c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1e8>  // b.none
 6a0:	clz	x2, x0
 6a4:	mov	w1, #0x3f                  	// #63
 6a8:	sub	w1, w1, w2
 6ac:	add	w2, w1, #0x1
 6b0:	mov	x4, #0x1                   	// #1
 6b4:	lsl	x4, x4, x2
 6b8:	cmp	x0, x4
 6bc:	b.cs	510 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1ac>  // b.hs, b.nlast
 6c0:	mov	x2, #0x1                   	// #1
 6c4:	lsl	x1, x2, x1
 6c8:	cmp	x0, x1
 6cc:	b.ls	52c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1c8>  // b.plast
 6d0:	cmp	x3, x4
 6d4:	b.ls	550 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1ec>  // b.plast
 6d8:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 6dc:	add	x2, x2, #0x0
 6e0:	mov	w1, #0x1fd                 	// #509
 6e4:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 6e8:	add	x0, x0, #0x0
 6ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6f0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 6f4:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6f8:	ldr	x1, [x1]
 6fc:	str	x0, [x1]
 700:	b	568 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x204>
 704:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 708:	add	x0, x0, #0x0
 70c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 710:	bl	0 <_ZN11__sanitizer3DieEv>
 714:	mov	x1, x27
 718:	mov	x0, x26
 71c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 720:	ldp	x21, x22, [sp, #16]
 724:	ldp	x23, x24, [sp, #32]
 728:	ldp	x25, x26, [sp, #48]
 72c:	ldp	x27, x28, [sp, #64]
 730:	ldr	x30, [sp, #80]
 734:	ldp	x19, x20, [sp], #272
 738:	ret

000000000000073c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m>:
 73c:	stp	x19, x20, [sp, #-112]!
 740:	stp	x23, x24, [sp, #32]
 744:	stp	x25, x26, [sp, #48]
 748:	str	x30, [sp, #72]
 74c:	mov	x24, x0
 750:	mov	x25, x1
 754:	mov	x26, x2
 758:	str	xzr, [sp, #104]
 75c:	str	xzr, [sp, #96]
 760:	str	xzr, [sp, #88]
 764:	mov	x5, #0x0                   	// #0
 768:	mov	x4, #0x4000000             	// #67108864
 76c:	add	x3, sp, #0x58
 770:	add	x2, sp, #0x60
 774:	add	x1, sp, #0x68
 778:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 77c:	add	x0, x0, #0x0
 780:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 784:	and	w0, w0, #0xff
 788:	cbz	w0, 8bc <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x180>
 78c:	ldr	x19, [sp, #104]
 790:	str	x19, [sp, #80]
 794:	ldr	x0, [sp, #88]
 798:	add	x0, x19, x0
 79c:	cmp	x19, x0
 7a0:	b.cs	8a4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x168>  // b.hs, b.nlast
 7a4:	stp	x21, x22, [sp, #16]
 7a8:	str	x27, [sp, #64]
 7ac:	mov	w20, #0x0                   	// #0
 7b0:	mov	x21, #0x0                   	// #0
 7b4:	adrp	x22, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 7b8:	add	x22, x22, #0x0
 7bc:	mov	x23, #0x4                   	// #4
 7c0:	add	x27, sp, #0x50
 7c4:	b	83c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x100>
 7c8:	mov	x0, x27
 7cc:	bl	118 <_ZN11__sanitizer8ParseHexEPPKc>
 7d0:	mov	x21, x0
 7d4:	ldr	x0, [sp, #80]
 7d8:	ldrb	w1, [x0]
 7dc:	cmp	w1, #0x2f
 7e0:	cset	w20, eq  // eq = none
 7e4:	cmp	w20, #0x0
 7e8:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 7ec:	b.ls	810 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xd4>  // b.plast
 7f0:	add	x0, x0, #0x1
 7f4:	str	x0, [sp, #80]
 7f8:	ldrb	w1, [x0], #1
 7fc:	cmp	w1, #0x2f
 800:	cset	w20, eq  // eq = none
 804:	cmp	w20, #0x0
 808:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 80c:	b.hi	7f4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xb8>  // b.pmore
 810:	ldr	x3, [sp, #80]
 814:	add	x19, x3, #0x1
 818:	str	x19, [sp, #80]
 81c:	ldrb	w0, [x3]
 820:	cmp	w0, #0xa
 824:	b.ne	810 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xd4>  // b.any
 828:	ldr	x0, [sp, #104]
 82c:	ldr	x1, [sp, #88]
 830:	add	x1, x0, x1
 834:	cmp	x19, x1
 838:	b.cs	8ac <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x170>  // b.hs, b.nlast
 83c:	ldrb	w0, [x19]
 840:	bl	100 <_ZN11__sanitizer5IsHexEc>
 844:	and	w0, w0, #0xff
 848:	cbnz	w0, 7c8 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x8c>
 84c:	mov	x2, x23
 850:	mov	x1, x22
 854:	mov	x0, x19
 858:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 85c:	cbnz	w0, 810 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xd4>
 860:	ldr	x19, [sp, #80]
 864:	ldrb	w0, [x19]
 868:	bl	d4 <_ZN11__sanitizer9IsDecimalEc>
 86c:	and	w0, w0, #0xff
 870:	cbnz	w0, 880 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x144>
 874:	add	x19, x19, #0x1
 878:	str	x19, [sp, #80]
 87c:	b	860 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x124>
 880:	mov	x0, x27
 884:	bl	ec <_ZN11__sanitizer12ParseDecimalEPPKc>
 888:	mov	x4, x26
 88c:	mov	x3, x25
 890:	mov	w2, w20
 894:	lsl	x1, x0, #10
 898:	mov	x0, x21
 89c:	blr	x24
 8a0:	b	810 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xd4>
 8a4:	mov	x0, x19
 8a8:	b	8b4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x178>
 8ac:	ldp	x21, x22, [sp, #16]
 8b0:	ldr	x27, [sp, #64]
 8b4:	ldr	x1, [sp, #96]
 8b8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8bc:	ldp	x23, x24, [sp, #32]
 8c0:	ldp	x25, x26, [sp, #48]
 8c4:	ldr	x30, [sp, #72]
 8c8:	ldp	x19, x20, [sp], #112
 8cc:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

sanitizer_procmaps_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x5, #0x0                   	// #0
   c:	mov	x4, #0x4000000             	// #67108864
  10:	add	x3, x0, #0x10
  14:	add	x2, x0, #0x8
  18:	mov	x1, x0
  1c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
  28:	and	w0, w0, #0xff
  2c:	cbnz	w0, 3c <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE+0x3c>
  30:	str	xzr, [x19]
  34:	str	xzr, [x19, #8]
  38:	str	xzr, [x19, #16]
  3c:	ldp	x19, x30, [sp], #16
  40:	ret

0000000000000044 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>:
  44:	stp	x19, x20, [sp, #-48]!
  48:	stp	x21, x22, [sp, #16]
  4c:	str	x30, [sp, #40]
  50:	mov	x19, x0
  54:	ldr	x22, [x0]
  58:	ldr	x0, [x0, #16]
  5c:	add	x22, x22, x0
  60:	ldr	x0, [x19, #24]
  64:	cmp	x0, x22
  68:	b.cc	84 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x40>  // b.lo, b.ul, b.last
  6c:	mov	w22, #0x0                   	// #0
  70:	mov	w0, w22
  74:	ldp	x21, x22, [sp, #16]
  78:	ldr	x30, [sp, #40]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret
  84:	str	x23, [sp, #32]
  88:	mov	x20, x1
  8c:	sub	x2, x22, x0
  90:	mov	w1, #0xa                   	// #10
  94:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
  98:	cmp	x0, #0x0
  9c:	csel	x21, x0, x22, ne  // ne = any
  a0:	add	x23, x19, #0x18
  a4:	mov	x0, x23
  a8:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  ac:	str	x0, [x20]
  b0:	ldr	x0, [x19, #24]
  b4:	add	x1, x0, #0x1
  b8:	str	x1, [x19, #24]
  bc:	ldrb	w3, [x0]
  c0:	cmp	x3, #0x2d
  c4:	b.ne	244 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x200>  // b.any
  c8:	mov	x0, x23
  cc:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  d0:	str	x0, [x20, #8]
  d4:	ldr	x0, [x19, #24]
  d8:	add	x1, x0, #0x1
  dc:	str	x1, [x19, #24]
  e0:	ldrb	w3, [x0]
  e4:	cmp	x3, #0x20
  e8:	b.ne	260 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x21c>  // b.any
  ec:	ldrb	w0, [x0, #1]
  f0:	cmp	w0, #0x2d
  f4:	mov	w1, #0x72                  	// #114
  f8:	ccmp	w0, w1, #0x4, ne  // ne = any
  fc:	b.ne	27c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x238>  // b.any
 100:	str	xzr, [x20, #40]
 104:	ldr	x0, [x19, #24]
 108:	add	x1, x0, #0x1
 10c:	str	x1, [x19, #24]
 110:	ldrb	w0, [x0]
 114:	cmp	w0, #0x72
 118:	b.eq	29c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x258>  // b.none
 11c:	ldr	x0, [x19, #24]
 120:	ldrb	w1, [x0]
 124:	cmp	w1, #0x2d
 128:	mov	w2, #0x77                  	// #119
 12c:	ccmp	w1, w2, #0x4, ne  // ne = any
 130:	b.ne	2ac <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x268>  // b.any
 134:	add	x1, x0, #0x1
 138:	str	x1, [x19, #24]
 13c:	ldrb	w0, [x0]
 140:	cmp	w0, #0x77
 144:	b.eq	2cc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x288>  // b.none
 148:	ldr	x0, [x19, #24]
 14c:	ldrb	w1, [x0]
 150:	cmp	w1, #0x2d
 154:	mov	w2, #0x78                  	// #120
 158:	ccmp	w1, w2, #0x4, ne  // ne = any
 15c:	b.ne	2dc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x298>  // b.any
 160:	add	x1, x0, #0x1
 164:	str	x1, [x19, #24]
 168:	ldrb	w0, [x0]
 16c:	cmp	w0, #0x78
 170:	b.eq	2fc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2b8>  // b.none
 174:	ldr	x0, [x19, #24]
 178:	ldrb	w1, [x0]
 17c:	cmp	w1, #0x73
 180:	cset	w22, eq  // eq = none
 184:	cmp	w1, #0x70
 188:	csinc	w22, w22, wzr, ne  // ne = any
 18c:	cbz	w22, 30c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2c8>
 190:	add	x1, x0, #0x1
 194:	str	x1, [x19, #24]
 198:	ldrb	w0, [x0]
 19c:	cmp	w0, #0x73
 1a0:	b.eq	32c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2e8>  // b.none
 1a4:	ldr	x0, [x19, #24]
 1a8:	add	x1, x0, #0x1
 1ac:	str	x1, [x19, #24]
 1b0:	ldrb	w3, [x0]
 1b4:	cmp	x3, #0x20
 1b8:	b.ne	33c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2f8>  // b.any
 1bc:	mov	x0, x23
 1c0:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1c4:	str	x0, [x20, #16]
 1c8:	ldr	x0, [x19, #24]
 1cc:	add	x1, x0, #0x1
 1d0:	str	x1, [x19, #24]
 1d4:	ldrb	w3, [x0]
 1d8:	cmp	x3, #0x20
 1dc:	b.ne	358 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x314>  // b.any
 1e0:	mov	x0, x23
 1e4:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1e8:	ldr	x0, [x19, #24]
 1ec:	add	x1, x0, #0x1
 1f0:	str	x1, [x19, #24]
 1f4:	ldrb	w3, [x0]
 1f8:	cmp	x3, #0x3a
 1fc:	b.ne	374 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x330>  // b.any
 200:	mov	x0, x23
 204:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 208:	ldr	x0, [x19, #24]
 20c:	add	x1, x0, #0x1
 210:	str	x1, [x19, #24]
 214:	ldrb	w3, [x0]
 218:	cmp	x3, #0x20
 21c:	b.ne	390 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x34c>  // b.any
 220:	ldr	x0, [x19, #24]
 224:	ldrb	w0, [x0]
 228:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 22c:	and	w2, w0, #0xff
 230:	cbz	w2, 3ac <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x368>
 234:	ldr	x1, [x19, #24]
 238:	add	x1, x1, #0x1
 23c:	str	x1, [x19, #24]
 240:	b	220 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1dc>
 244:	mov	x4, #0x2d                  	// #45
 248:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 24c:	add	x2, x2, #0x0
 250:	mov	w1, #0x28                  	// #40
 254:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 258:	add	x0, x0, #0x0
 25c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 260:	mov	x4, #0x20                  	// #32
 264:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 268:	add	x2, x2, #0x0
 26c:	mov	w1, #0x2a                  	// #42
 270:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 274:	add	x0, x0, #0x0
 278:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 27c:	mov	x4, #0x0                   	// #0
 280:	mov	x3, #0x0                   	// #0
 284:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 288:	add	x2, x2, #0x0
 28c:	mov	w1, #0x2b                  	// #43
 290:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 294:	add	x0, x0, #0x0
 298:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 29c:	ldr	x0, [x20, #40]
 2a0:	orr	x0, x0, #0x1
 2a4:	str	x0, [x20, #40]
 2a8:	b	11c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0xd8>
 2ac:	mov	x4, #0x0                   	// #0
 2b0:	mov	x3, #0x0                   	// #0
 2b4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2b8:	add	x2, x2, #0x0
 2bc:	mov	w1, #0x2e                  	// #46
 2c0:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2c4:	add	x0, x0, #0x0
 2c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2cc:	ldr	x0, [x20, #40]
 2d0:	orr	x0, x0, #0x2
 2d4:	str	x0, [x20, #40]
 2d8:	b	148 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x104>
 2dc:	mov	x4, #0x0                   	// #0
 2e0:	mov	x3, #0x0                   	// #0
 2e4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2e8:	add	x2, x2, #0x0
 2ec:	mov	w1, #0x30                  	// #48
 2f0:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2f4:	add	x0, x0, #0x0
 2f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2fc:	ldr	x0, [x20, #40]
 300:	orr	x0, x0, #0x4
 304:	str	x0, [x20, #40]
 308:	b	174 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x130>
 30c:	mov	x4, #0x0                   	// #0
 310:	mov	x3, #0x0                   	// #0
 314:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 318:	add	x2, x2, #0x0
 31c:	mov	w1, #0x32                  	// #50
 320:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 324:	add	x0, x0, #0x0
 328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 32c:	ldr	x0, [x20, #40]
 330:	orr	x0, x0, #0x8
 334:	str	x0, [x20, #40]
 338:	b	1a4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x160>
 33c:	mov	x4, #0x20                  	// #32
 340:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 344:	add	x2, x2, #0x0
 348:	mov	w1, #0x34                  	// #52
 34c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 350:	add	x0, x0, #0x0
 354:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 358:	mov	x4, #0x20                  	// #32
 35c:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 360:	add	x2, x2, #0x0
 364:	mov	w1, #0x36                  	// #54
 368:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 36c:	add	x0, x0, #0x0
 370:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 374:	mov	x4, #0x3a                  	// #58
 378:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 37c:	add	x2, x2, #0x0
 380:	mov	w1, #0x38                  	// #56
 384:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 388:	add	x0, x0, #0x0
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	mov	x4, #0x20                  	// #32
 394:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 398:	add	x2, x2, #0x0
 39c:	mov	w1, #0x3a                  	// #58
 3a0:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3a4:	add	x0, x0, #0x0
 3a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3ac:	ldr	x3, [x19, #24]
 3b0:	cmp	x3, x21
 3b4:	b.cs	3d8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x394>  // b.hs, b.nlast
 3b8:	ldrb	w0, [x3]
 3bc:	cmp	w0, #0x20
 3c0:	b.ne	3d8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x394>  // b.any
 3c4:	add	x3, x3, #0x1
 3c8:	str	x3, [x19, #24]
 3cc:	cmp	x3, x21
 3d0:	b.ne	3b8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x374>  // b.any
 3d4:	mov	x3, x21
 3d8:	ldr	x0, [x20, #24]
 3dc:	cbz	x0, 408 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x3c4>
 3e0:	ldr	x23, [x20, #32]
 3e4:	sub	x23, x23, #0x1
 3e8:	sub	x1, x21, x3
 3ec:	cmp	x23, x1
 3f0:	csel	x23, x23, x1, ls  // ls = plast
 3f4:	mov	x2, x23
 3f8:	mov	x1, x3
 3fc:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 400:	ldr	x0, [x20, #24]
 404:	strb	wzr, [x0, x23]
 408:	add	x21, x21, #0x1
 40c:	str	x21, [x19, #24]
 410:	ldr	x23, [sp, #32]
 414:	b	70 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2c>

sanitizer_procmaps_mac.o:     file format elf64-littleaarch64


sanitizer_procmaps_solaris.o:     file format elf64-littleaarch64


sanitizer_rtems.o:     file format elf64-littleaarch64


sanitizer_solaris.o:     file format elf64-littleaarch64


sanitizer_stackdepot.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>:
   0:	ldr	w2, [x0]
   4:	ldr	w0, [x1]
   8:	cmp	w2, w0
   c:	cset	w0, cc  // cc = lo, ul, last
  10:	ret

0000000000000014 <_ZN11__sanitizer16StackDepotHandle2idEv>:
  14:	ldr	x0, [x0]
  18:	ldr	w0, [x0, #8]
  1c:	ret

0000000000000020 <_ZN11__sanitizer16StackDepotHandle9use_countEv>:
  20:	ldr	x0, [x0]
  24:	ldr	w0, [x0, #12]
  28:	and	w0, w0, #0xfffff
  2c:	ret

0000000000000030 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv>:
  30:	ldr	x1, [x0]
  34:	add	x1, x1, #0xc
  38:	ldxr	w0, [x1]
  3c:	add	w2, w0, #0x1
  40:	stlxr	w3, w2, [x1]
  44:	cbnz	w3, 38 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x8>
  48:	dmb	ish
  4c:	and	w0, w0, #0xfffff
  50:	add	w0, w0, #0x1
  54:	mov	w1, #0xfffff               	// #1048575
  58:	cmp	w0, w1
  5c:	b.hi	64 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x34>  // b.pmore
  60:	ret
  64:	str	x30, [sp, #-16]!
  68:	mov	x4, #0x100000              	// #1048576
  6c:	mov	x3, x4
  70:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  74:	add	x2, x2, #0x0
  78:	mov	w1, #0x61                  	// #97
  7c:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  80:	add	x0, x0, #0x0
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000088 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  88:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  8c:	add	x0, x0, #0x0
  90:	ret

0000000000000094 <_ZN11__sanitizer19StackDepotUnlockAllEv>:
  94:	mov	w1, #0x0                   	// #0
  98:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  9c:	add	x0, x0, #0x0
  a0:	sxtw	x3, w1
  a4:	ldr	x2, [x0, x3, lsl #3]
  a8:	and	x2, x2, #0xfffffffffffffffe
  ac:	dmb	ish
  b0:	str	x2, [x0, x3, lsl #3]
  b4:	add	w1, w1, #0x1
  b8:	cmp	w1, #0x100, lsl #12
  bc:	b.ne	a0 <_ZN11__sanitizer19StackDepotUnlockAllEv+0xc>  // b.any
  c0:	ret

00000000000000c4 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>:
  c4:	stp	x19, x20, [sp, #-80]!
  c8:	stp	x21, x22, [sp, #16]
  cc:	str	x30, [sp, #56]
  d0:	ldr	x21, [x0, #16]
  d4:	cbnz	x21, f0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x2c>
  d8:	mov	x0, #0x0                   	// #0
  dc:	mov	x1, #0x0                   	// #0
  e0:	ldp	x21, x22, [sp, #16]
  e4:	ldr	x30, [sp, #56]
  e8:	ldp	x19, x20, [sp], #80
  ec:	ret
  f0:	stp	x23, x24, [sp, #32]
  f4:	str	x25, [sp, #48]
  f8:	mov	x19, x0
  fc:	mov	w24, w1
 100:	stp	xzr, xzr, [sp, #64]
 104:	str	w1, [sp, #64]
 108:	mov	x23, x21
 10c:	mov	x22, #0x0                   	// #0
 110:	add	x25, sp, #0x40
 114:	b	11c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x58>
 118:	mov	x23, x20
 11c:	cmp	x23, x22
 120:	b.ls	174 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xb0>  // b.plast
 124:	add	x0, x23, x22
 128:	lsr	x20, x0, #1
 12c:	cmp	x21, x0, lsr #1
 130:	b.ls	154 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x90>  // b.plast
 134:	ldr	x0, [x19]
 138:	mov	x1, x25
 13c:	add	x0, x0, x20, lsl #4
 140:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 144:	and	w0, w0, #0xff
 148:	cbz	w0, 118 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x54>
 14c:	add	x22, x20, #0x1
 150:	b	11c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x58>
 154:	mov	x4, x21
 158:	mov	x3, x20
 15c:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 160:	add	x2, x2, #0x0
 164:	mov	w1, #0x1ba                 	// #442
 168:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 16c:	add	x0, x0, #0x0
 170:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 174:	cmp	x21, x22
 178:	b.cc	198 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xd4>  // b.lo, b.ul, b.last
 17c:	b.eq	1ac <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xe8>  // b.none
 180:	lsl	x22, x22, #4
 184:	ldr	x0, [x19]
 188:	add	x1, x0, x22
 18c:	ldr	w0, [x0, x22]
 190:	cmp	w0, w24
 194:	b.eq	1cc <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x108>  // b.none
 198:	mov	x0, #0x0                   	// #0
 19c:	mov	x1, #0x0                   	// #0
 1a0:	ldp	x23, x24, [sp, #32]
 1a4:	ldr	x25, [sp, #48]
 1a8:	b	e0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x1c>
 1ac:	mov	x4, x22
 1b0:	mov	x3, x22
 1b4:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 1b8:	add	x2, x2, #0x0
 1bc:	mov	w1, #0x1b6                 	// #438
 1c0:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1cc:	ldr	x2, [x1, #8]
 1d0:	add	x0, x2, #0x18
 1d4:	ldr	w3, [x2, #16]
 1d8:	mov	x1, #0x0                   	// #0
 1dc:	bfxil	x1, x3, #0, #32
 1e0:	ldr	w2, [x2, #20]
 1e4:	bfi	x1, x2, #32, #32
 1e8:	ldp	x23, x24, [sp, #32]
 1ec:	ldr	x25, [sp, #48]
 1f0:	b	e0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x1c>

00000000000001f4 <_ZN11__sanitizer13StackDepotGetEj>:
 1f4:	str	x30, [sp, #-16]!
 1f8:	mov	w1, w0
 1fc:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 200:	add	x0, x0, #0x0
 204:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 208:	ldr	x30, [sp], #16
 20c:	ret

0000000000000210 <_ZN11__sanitizer20StackDepotReverseMapC1Ev>:
 210:	stp	x19, x20, [sp, #-96]!
 214:	stp	x21, x22, [sp, #16]
 218:	stp	x23, x24, [sp, #32]
 21c:	stp	x25, x26, [sp, #48]
 220:	stp	x27, x30, [sp, #64]
 224:	mov	x19, x0
 228:	str	xzr, [x0, #8]
 22c:	str	xzr, [x0, #16]
 230:	str	xzr, [x0]
 234:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 238:	ldr	x0, [x0]
 23c:	ldr	x0, [x0]
 240:	cbz	x0, 2f4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xe4>
 244:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 248:	ldr	x0, [x0]
 24c:	ldr	x0, [x0]
 250:	sub	x1, x0, #0x1
 254:	tst	x1, x0
 258:	b.ne	308 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xf8>  // b.any
 25c:	add	x20, x0, #0xf
 260:	neg	x0, x0
 264:	and	x20, x20, x0
 268:	mov	w2, #0x0                   	// #0
 26c:	adrp	x1, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 270:	add	x1, x1, #0x0
 274:	mov	x0, x20
 278:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 27c:	mov	x21, x0
 280:	ldr	x2, [x19, #16]
 284:	lsl	x2, x2, #4
 288:	ldr	x1, [x19]
 28c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 290:	ldr	x1, [x19, #8]
 294:	ldr	x0, [x19]
 298:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 29c:	str	x21, [x19]
 2a0:	str	x20, [x19, #8]
 2a4:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2a8:	add	x0, x0, #0x0
 2ac:	add	x0, x0, #0x800, lsl #12
 2b0:	ldr	x4, [x0, #1024]
 2b4:	add	x4, x4, #0x64
 2b8:	cmp	x4, x20, lsr #4
 2bc:	b.hi	318 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x108>  // b.pmore
 2c0:	mov	w22, #0x0                   	// #0
 2c4:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2c8:	ldr	x26, [x24]
 2cc:	add	x23, sp, #0x50
 2d0:	sxtw	x1, w22
 2d4:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2d8:	add	x0, x0, #0x0
 2dc:	ldr	x20, [x0, x1, lsl #3]
 2e0:	ands	x20, x20, #0xfffffffffffffffe
 2e4:	b.eq	564 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x354>  // b.none
 2e8:	adrp	x25, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2ec:	add	x25, x25, #0x0
 2f0:	b	4d0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2c0>
 2f4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2f8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2fc:	ldr	x1, [x1]
 300:	str	x0, [x1]
 304:	b	244 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x34>
 308:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 30c:	add	x0, x0, #0x0
 310:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 314:	bl	0 <_ZN11__sanitizer3DieEv>
 318:	ldr	x3, [x19, #16]
 31c:	cmp	x4, x3
 320:	b.cc	39c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x18c>  // b.lo, b.ul, b.last
 324:	lsl	x20, x4, #4
 328:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 32c:	ldr	x0, [x0]
 330:	ldr	x0, [x0]
 334:	cbz	x0, 3b4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1a4>
 338:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 33c:	ldr	x0, [x0]
 340:	ldr	x0, [x0]
 344:	sub	x1, x0, #0x1
 348:	tst	x0, x1
 34c:	b.ne	3c8 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1b8>  // b.any
 350:	add	x20, x20, x1
 354:	neg	x0, x0
 358:	and	x20, x20, x0
 35c:	mov	w2, #0x0                   	// #0
 360:	adrp	x1, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 364:	add	x1, x1, #0x0
 368:	mov	x0, x20
 36c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 370:	mov	x21, x0
 374:	ldr	x2, [x19, #16]
 378:	lsl	x2, x2, #4
 37c:	ldr	x1, [x19]
 380:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 384:	ldr	x1, [x19, #8]
 388:	ldr	x0, [x19]
 38c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 390:	str	x21, [x19]
 394:	str	x20, [x19, #8]
 398:	b	2c0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xb0>
 39c:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3a0:	add	x2, x2, #0x0
 3a4:	mov	w1, #0x1fd                 	// #509
 3a8:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3ac:	add	x0, x0, #0x0
 3b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3b8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3bc:	ldr	x1, [x1]
 3c0:	str	x0, [x1]
 3c4:	b	338 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x128>
 3c8:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3cc:	add	x0, x0, #0x0
 3d0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 3d4:	bl	0 <_ZN11__sanitizer3DieEv>
 3d8:	mov	x3, x0
 3dc:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3e0:	add	x2, x2, #0x0
 3e4:	mov	w1, #0x1be                 	// #446
 3e8:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3ec:	add	x0, x0, #0x0
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3f8:	add	x2, x2, #0x0
 3fc:	mov	w1, #0x17b                 	// #379
 400:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 404:	add	x0, x0, #0x0
 408:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 40c:	mov	x4, x1
 410:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 414:	add	x2, x2, #0x0
 418:	mov	w1, #0x17c                 	// #380
 41c:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 420:	add	x0, x0, #0x0
 424:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 428:	mov	x3, x0
 42c:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 430:	add	x2, x2, #0x0
 434:	mov	w1, #0x1fd                 	// #509
 438:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 43c:	add	x0, x0, #0x0
 440:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 444:	lsl	x21, x3, #4
 448:	ldr	x0, [x26]
 44c:	cbz	x0, 544 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x334>
 450:	ldr	x0, [x24]
 454:	ldr	x0, [x0]
 458:	sub	x1, x0, #0x1
 45c:	tst	x0, x1
 460:	b.ne	554 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x344>  // b.any
 464:	add	x21, x21, x1
 468:	neg	x0, x0
 46c:	and	x21, x21, x0
 470:	mov	w2, #0x0                   	// #0
 474:	mov	x1, x25
 478:	mov	x0, x21
 47c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 480:	mov	x27, x0
 484:	ldr	x2, [x19, #16]
 488:	lsl	x2, x2, #4
 48c:	ldr	x1, [x19]
 490:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 494:	ldr	x1, [x19, #8]
 498:	ldr	x0, [x19]
 49c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4a0:	str	x27, [x19]
 4a4:	str	x21, [x19, #8]
 4a8:	ldr	x3, [x19]
 4ac:	ldr	x0, [x19, #16]
 4b0:	add	x1, x0, #0x1
 4b4:	str	x1, [x19, #16]
 4b8:	mov	x2, #0x10                  	// #16
 4bc:	mov	x1, x23
 4c0:	add	x0, x3, x0, lsl #4
 4c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4c8:	ldr	x20, [x20]
 4cc:	cbz	x20, 564 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x354>
 4d0:	ldr	w0, [x20, #8]
 4d4:	str	w0, [sp, #80]
 4d8:	str	x20, [sp, #88]
 4dc:	ldr	x0, [x19, #16]
 4e0:	ldr	x1, [x19, #8]
 4e4:	lsr	x4, x1, #4
 4e8:	cmp	x0, x1, lsr #4
 4ec:	b.hi	3d8 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1c8>  // b.pmore
 4f0:	cmp	x0, x4
 4f4:	b.ne	4a8 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x298>  // b.any
 4f8:	add	x3, x0, #0x1
 4fc:	tst	x0, x3
 500:	b.eq	444 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x234>  // b.none
 504:	clz	x2, x3
 508:	mov	w1, #0x3f                  	// #63
 50c:	sub	w2, w1, w2
 510:	add	w1, w2, #0x1
 514:	mov	x4, #0x1                   	// #1
 518:	lsl	x4, x4, x1
 51c:	cmp	x3, x4
 520:	b.cs	3f4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1e4>  // b.hs, b.nlast
 524:	mov	x1, #0x1                   	// #1
 528:	lsl	x1, x1, x2
 52c:	cmp	x3, x1
 530:	b.ls	40c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1fc>  // b.plast
 534:	cmp	x0, x4
 538:	b.hi	428 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x218>  // b.pmore
 53c:	mov	x3, x4
 540:	b	444 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x234>
 544:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 548:	ldr	x1, [x24]
 54c:	str	x0, [x1]
 550:	b	450 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x240>
 554:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 558:	add	x0, x0, #0x0
 55c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 560:	bl	0 <_ZN11__sanitizer3DieEv>
 564:	add	w22, w22, #0x1
 568:	cmp	w22, #0x100, lsl #12
 56c:	b.ne	2d0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xc0>  // b.any
 570:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 574:	add	x2, x2, #0x0
 578:	ldr	x1, [x19, #16]
 57c:	ldr	x0, [x19]
 580:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 584:	ldp	x21, x22, [sp, #16]
 588:	ldp	x23, x24, [sp, #32]
 58c:	ldp	x25, x26, [sp, #48]
 590:	ldp	x27, x30, [sp, #64]
 594:	ldp	x19, x20, [sp], #96
 598:	ret

000000000000059c <_ZN11__sanitizer17StackDepotLockAllEv>:
 59c:	stp	x19, x20, [sp, #-32]!
 5a0:	str	x30, [sp, #16]
 5a4:	adrp	x19, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5a8:	add	x19, x19, #0x0
 5ac:	add	x20, x19, #0x800, lsl #12
 5b0:	mov	x0, x19
 5b4:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5b8:	add	x19, x19, #0x8
 5bc:	cmp	x19, x20
 5c0:	b.ne	5b0 <_ZN11__sanitizer17StackDepotLockAllEv+0x14>  // b.any
 5c4:	ldr	x30, [sp, #16]
 5c8:	ldp	x19, x20, [sp], #32
 5cc:	ret

00000000000005d0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>:
 5d0:	str	x30, [sp, #-16]!
 5d4:	mov	x2, x1
 5d8:	mov	x1, x0
 5dc:	mov	x3, #0x0                   	// #0
 5e0:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5e4:	add	x0, x0, #0x0
 5e8:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 5ec:	cbz	x0, 5fc <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x2c>
 5f0:	ldr	w0, [x0, #8]
 5f4:	ldr	x30, [sp], #16
 5f8:	ret
 5fc:	mov	w0, #0x0                   	// #0
 600:	b	5f4 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x24>

0000000000000604 <_ZN11__sanitizer24StackDepotPut_WithHandleENS_10StackTraceE>:
 604:	str	x30, [sp, #-16]!
 608:	mov	x2, x1
 60c:	mov	x1, x0
 610:	mov	x3, #0x0                   	// #0
 614:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 618:	add	x0, x0, #0x0
 61c:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 620:	ldr	x30, [sp], #16
 624:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj>:
   0:	cbnz	w1, 10 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x10>
   4:	mov	x0, #0x0                   	// #0
   8:	mov	x1, #0x0                   	// #0
   c:	ret
  10:	str	x30, [sp, #-16]!
  14:	mov	w4, w1
  18:	and	x3, x1, #0x7fffffff
  1c:	cmp	x3, w1, uxtw
  20:	b.ne	8c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x8c>  // b.any
  24:	lsr	w2, w1, #23
  28:	lsl	x3, x2, #12
  2c:	mov	x4, #0xfffff               	// #1048575
  30:	add	x5, x3, #0xfff
  34:	cmp	x4, x2, lsl #12
  38:	b.cc	70 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x70>  // b.lo, b.ul, b.last
  3c:	ldr	x2, [x0, x3, lsl #3]
  40:	ands	x2, x2, #0xfffffffffffffffe
  44:	b.eq	5c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x5c>  // b.none
  48:	ldr	w4, [x2, #8]
  4c:	cmp	w4, w1
  50:	b.eq	a4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0xa4>  // b.none
  54:	ldr	x2, [x2]
  58:	cbnz	x2, 48 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x48>
  5c:	cmp	x5, x3
  60:	b.eq	c4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0xc4>  // b.none
  64:	add	x3, x3, #0x1
  68:	cmp	x3, #0x100, lsl #12
  6c:	b.ne	3c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0x3c>  // b.any
  70:	mov	x4, #0x100000              	// #1048576
  74:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj>
  78:	add	x2, x2, #0x0
  7c:	mov	w1, #0x91                  	// #145
  80:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj>
  84:	add	x0, x0, #0x0
  88:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  8c:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj>
  90:	add	x2, x2, #0x0
  94:	mov	w1, #0x8c                  	// #140
  98:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  a4:	add	x0, x2, #0x18
  a8:	ldr	w3, [x2, #16]
  ac:	mov	x1, #0x0                   	// #0
  b0:	bfxil	x1, x3, #0, #32
  b4:	ldr	w2, [x2, #20]
  b8:	bfi	x1, x2, #32, #32
  bc:	ldr	x30, [sp], #16
  c0:	ret
  c4:	mov	x0, #0x0                   	// #0
  c8:	mov	x1, #0x0                   	// #0
  cc:	b	bc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3GetEj+0xbc>

Disassembly of section .text._ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	1a8 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x1a8>  // b.plast
   8:	stp	x19, x20, [sp, #-96]!
   c:	stp	x21, x22, [sp, #16]
  10:	stp	x23, x24, [sp, #32]
  14:	stp	x25, x26, [sp, #48]
  18:	stp	x27, x28, [sp, #64]
  1c:	str	x30, [sp, #80]
  20:	mov	x19, x0
  24:	mov	x27, x1
  28:	mov	x26, x2
  2c:	mov	x28, #0x1                   	// #1
  30:	b	44 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x44>
  34:	add	x0, x28, #0x1
  38:	cmp	x27, x0
  3c:	b.ls	a0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xa0>  // b.plast
  40:	add	x28, x28, #0x1
  44:	cbz	x28, 40 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x40>
  48:	mov	x21, x28
  4c:	sub	x24, x21, #0x1
  50:	mov	x20, x21
  54:	lsr	x21, x24, #1
  58:	lsl	x25, x21, #4
  5c:	add	x22, x19, x25
  60:	lsl	x20, x20, #4
  64:	add	x23, x19, x20
  68:	mov	x1, x23
  6c:	mov	x0, x22
  70:	blr	x26
  74:	and	w0, w0, #0xff
  78:	cbz	w0, 34 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x34>
  7c:	ldr	w1, [x19, x20]
  80:	ldr	x0, [x23, #8]
  84:	ldp	x2, x3, [x22]
  88:	stp	x2, x3, [x23]
  8c:	str	w1, [x19, x25]
  90:	str	x0, [x22, #8]
  94:	cmp	x24, #0x1
  98:	b.hi	4c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x4c>  // b.pmore
  9c:	b	34 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x34>
  a0:	sub	x23, x27, #0x1
  a4:	add	x27, x19, x27, lsl #4
  a8:	mov	x24, #0x0                   	// #0
  ac:	b	c0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xc0>
  b0:	cmp	x23, #0x1
  b4:	b.eq	18c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x18c>  // b.none
  b8:	sub	x27, x27, #0x10
  bc:	sub	x23, x23, #0x1
  c0:	ldr	w1, [x19]
  c4:	ldr	x0, [x19, #8]
  c8:	ldp	x2, x3, [x27, #-16]
  cc:	stp	x2, x3, [x19]
  d0:	stur	w1, [x27, #-16]
  d4:	stur	x0, [x27, #-8]
  d8:	cbz	x23, b8 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xb8>
  dc:	mov	x20, x24
  e0:	b	140 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x140>
  e4:	cmp	x23, x22
  e8:	b.ls	b0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xb0>  // b.plast
  ec:	add	x1, x19, x25, lsl #5
  f0:	add	x0, x19, x20, lsl #4
  f4:	blr	x26
  f8:	and	w0, w0, #0xff
  fc:	cbz	w0, b0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xb0>
 100:	mov	x21, x22
 104:	cmp	x21, x20
 108:	b.eq	b0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xb0>  // b.none
 10c:	lsl	x20, x20, #4
 110:	add	x2, x19, x20
 114:	lsl	x1, x21, #4
 118:	add	x0, x19, x1
 11c:	ldr	w6, [x19, x20]
 120:	ldr	x3, [x2, #8]
 124:	ldp	x4, x5, [x0]
 128:	stp	x4, x5, [x2]
 12c:	str	w6, [x19, x1]
 130:	str	x3, [x0, #8]
 134:	cmp	x21, x23
 138:	b.cs	b0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xb0>  // b.hs, b.nlast
 13c:	mov	x20, x21
 140:	lsl	x0, x20, #1
 144:	add	x21, x0, #0x1
 148:	add	x25, x20, #0x1
 14c:	add	x22, x0, #0x2
 150:	cmp	x23, x21
 154:	b.ls	e4 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xe4>  // b.plast
 158:	add	x1, x19, x21, lsl #4
 15c:	add	x0, x19, x20, lsl #4
 160:	blr	x26
 164:	and	w0, w0, #0xff
 168:	cbz	w0, e4 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xe4>
 16c:	cmp	x23, x22
 170:	b.ls	104 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x104>  // b.plast
 174:	add	x1, x19, x25, lsl #5
 178:	add	x0, x19, x21, lsl #4
 17c:	blr	x26
 180:	and	w0, w0, #0xff
 184:	cbz	w0, 104 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x104>
 188:	b	100 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x100>
 18c:	ldp	x21, x22, [sp, #16]
 190:	ldp	x23, x24, [sp, #32]
 194:	ldp	x25, x26, [sp, #48]
 198:	ldp	x27, x28, [sp, #64]
 19c:	ldr	x30, [sp, #80]
 1a0:	ldp	x19, x20, [sp], #96
 1a4:	ret
 1a8:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj>:
   0:	cbz	x0, 64 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x64>
   4:	mov	x8, x2
   8:	mov	x5, x1
   c:	and	w7, w3, #0xfff00000
  10:	b	1c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x1c>
  14:	ldr	x0, [x0]
  18:	cbz	x0, 64 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x64>
  1c:	ldr	w1, [x0, #12]
  20:	and	w1, w1, #0xfff00000
  24:	cmp	w1, w7
  28:	b.ne	14 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x14>  // b.any
  2c:	ldr	x1, [x0, #16]
  30:	cmp	x8, x1
  34:	b.ne	14 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x14>  // b.any
  38:	ldr	w4, [x0, #16]
  3c:	cbz	x4, 64 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x64>
  40:	mov	x1, #0x0                   	// #0
  44:	add	x6, x0, #0x18
  48:	ldr	x3, [x6, x1, lsl #3]
  4c:	ldr	x2, [x5, x1, lsl #3]
  50:	cmp	x3, x2
  54:	b.ne	14 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x14>  // b.any
  58:	add	x1, x1, #0x1
  5c:	cmp	x1, x4
  60:	b.ne	48 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x48>  // b.any
  64:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	b	20 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x20>
  14:	cmp	w19, #0x9
  18:	b.gt	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x58>
  1c:	add	w19, w19, #0x1
  20:	ldr	x1, [x20]
  24:	tbnz	w1, #0, 14 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x14>
  28:	orr	x2, x1, #0x1
  2c:	ldxr	x0, [x20]
  30:	cmp	x0, x1
  34:	b.ne	40 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x40>  // b.any
  38:	stlxr	w3, x2, [x20]
  3c:	cbnz	w3, 2c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x2c>
  40:	dmb	ish
  44:	cmp	x1, x0
  48:	b.ne	14 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x14>  // b.any
  4c:	ldr	x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	1c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x1c>

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>:
   0:	stp	x19, x20, [sp, #-144]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	str	x30, [sp, #80]
  10:	mov	x23, x0
  14:	mov	x21, x2
  18:	mov	x22, x3
  1c:	mov	x20, x1
  20:	mov	w24, w2
  24:	cbz	x3, 2c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2c>
  28:	strb	wzr, [x3]
  2c:	cbz	w24, c8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xc8>
  30:	cbz	x20, c8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xc8>
  34:	stp	x25, x26, [sp, #48]
  38:	stp	x27, x28, [sp, #64]
  3c:	mov	w0, #0xb28c                	// #45708
  40:	movk	w0, #0x9747, lsl #16
  44:	eor	w19, w0, w24, lsl #3
  48:	mov	w25, w24
  4c:	mov	x1, #0x0                   	// #0
  50:	mov	w2, #0xe995                	// #59797
  54:	movk	w2, #0x5bd1, lsl #16
  58:	ldr	x0, [x20, x1, lsl #3]
  5c:	mul	w0, w2, w0
  60:	eor	w0, w0, w0, lsr #24
  64:	mul	w19, w19, w2
  68:	mul	w0, w0, w2
  6c:	eor	w19, w0, w19
  70:	add	x1, x1, #0x1
  74:	cmp	x25, x1
  78:	b.ne	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x58>  // b.any
  7c:	eor	w19, w19, w19, lsr #13
  80:	mov	w0, #0xe995                	// #59797
  84:	movk	w0, #0x5bd1, lsl #16
  88:	mul	w19, w19, w0
  8c:	eor	w19, w19, w19, lsr #15
  90:	and	x26, x19, #0xfffff
  94:	add	x28, x23, x26, lsl #3
  98:	ldr	x27, [x23, x26, lsl #3]
  9c:	and	x27, x27, #0xfffffffffffffffe
  a0:	bfxil	x21, x24, #0, #32
  a4:	mov	w3, w19
  a8:	mov	x1, x20
  ac:	mov	x2, x21
  b0:	mov	x0, x27
  b4:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  b8:	cbz	x0, e0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xe0>
  bc:	ldp	x25, x26, [sp, #48]
  c0:	ldp	x27, x28, [sp, #64]
  c4:	b	cc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xcc>
  c8:	mov	x0, #0x0                   	// #0
  cc:	ldp	x21, x22, [sp, #16]
  d0:	ldp	x23, x24, [sp, #32]
  d4:	ldr	x30, [sp, #80]
  d8:	ldp	x19, x20, [sp], #144
  dc:	ret
  e0:	mov	x0, x28
  e4:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  e8:	str	x0, [sp, #112]
  ec:	cmp	x27, x0
  f0:	b.eq	120 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x120>  // b.none
  f4:	mov	w3, w19
  f8:	mov	x1, x20
  fc:	mov	x2, x21
 100:	mov	x27, x0
 104:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 108:	cbz	x0, 120 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x120>
 10c:	dmb	ish
 110:	str	x27, [x23, x26, lsl #3]
 114:	ldp	x25, x26, [sp, #48]
 118:	ldp	x27, x28, [sp, #64]
 11c:	b	cc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xcc>
 120:	lsr	x2, x26, #12
 124:	add	x0, x2, #0x200, lsl #12
 128:	add	x0, x23, x0, lsl #2
 12c:	ldxr	w3, [x0]
 130:	add	w1, w3, #0x1
 134:	stlxr	w4, w1, [x0]
 138:	cbnz	w4, 12c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x12c>
 13c:	dmb	ish
 140:	add	w4, w3, #0x1
 144:	add	x1, x23, #0x800, lsl #12
 148:	ldr	x0, [x1, #1024]
 14c:	add	x0, x0, #0x1
 150:	str	x0, [x1, #1024]
 154:	add	w3, w3, #0x1
 158:	mov	x0, #0x7fffff              	// #8388607
 15c:	cmp	x3, x0
 160:	b.hi	1cc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1cc>  // b.pmore
 164:	orr	w0, w4, w2, lsl #23
 168:	str	w0, [sp, #140]
 16c:	cbz	w0, 1e8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1e8>
 170:	sub	w27, w24, #0x1
 174:	add	x27, x27, #0x4
 178:	lsl	x27, x27, #3
 17c:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 180:	ldr	x4, [x0]
 184:	add	x2, x4, #0x8
 188:	ldr	x1, [x4, #8]
 18c:	dmb	ish
 190:	ldr	x0, [x4, #16]
 194:	dmb	ish
 198:	cbz	x1, 32c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x32c>
 19c:	add	x3, x27, x1
 1a0:	cmp	x0, x3
 1a4:	b.cc	32c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x32c>  // b.lo, b.ul, b.last
 1a8:	ldxr	x28, [x2]
 1ac:	cmp	x28, x1
 1b0:	b.ne	1bc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1bc>  // b.any
 1b4:	stlxr	w0, x3, [x2]
 1b8:	cbnz	w0, 1a8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1a8>
 1bc:	dmb	ish
 1c0:	cmp	x1, x28
 1c4:	b.ne	188 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x188>  // b.any
 1c8:	b	2c4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2c4>
 1cc:	mov	x4, #0x800000              	// #8388608
 1d0:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 1d4:	add	x2, x2, #0x0
 1d8:	mov	w1, #0x77                  	// #119
 1dc:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 1e0:	add	x0, x0, #0x0
 1e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e8:	mov	x4, #0x0                   	// #0
 1ec:	mov	x3, #0x0                   	// #0
 1f0:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 1f4:	add	x2, x2, #0x0
 1f8:	mov	w1, #0x79                  	// #121
 1fc:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 200:	add	x0, x0, #0x0
 204:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 208:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 20c:	ldr	x0, [x0]
 210:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 214:	b	350 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x350>
 218:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 21c:	ldr	x0, [x0]
 220:	str	x0, [sp, #128]
 224:	str	xzr, [x0, #8]
 228:	cmp	x27, #0x10, lsl #12
 22c:	mov	x0, #0x10000               	// #65536
 230:	csel	x1, x27, x0, cs  // cs = hs, nlast
 234:	mov	x3, x1
 238:	mov	w2, #0x0                   	// #0
 23c:	adrp	x1, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 240:	add	x1, x1, #0x0
 244:	str	x3, [sp, #120]
 248:	mov	x0, x3
 24c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 250:	ldr	x1, [sp, #120]
 254:	add	x1, x1, x0
 258:	dmb	ish
 25c:	ldr	x2, [sp, #128]
 260:	str	x1, [x2, #16]
 264:	dmb	ish
 268:	str	x0, [x2, #8]
 26c:	ldr	x1, [x28, #8]
 270:	dmb	ish
 274:	ldr	x0, [x28, #16]
 278:	dmb	ish
 27c:	cbz	x1, 218 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x218>
 280:	add	x2, x27, x1
 284:	cmp	x0, x2
 288:	b.cc	218 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x218>  // b.lo, b.ul, b.last
 28c:	ldr	x3, [sp, #104]
 290:	ldxr	x0, [x3]
 294:	cmp	x0, x1
 298:	b.ne	2a4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2a4>  // b.any
 29c:	stlxr	w4, x2, [x3]
 2a0:	cbnz	w4, 290 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x290>
 2a4:	dmb	ish
 2a8:	cmp	x1, x0
 2ac:	b.ne	26c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x26c>  // b.any
 2b0:	mov	x28, x0
 2b4:	dmb	ish
 2b8:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 2bc:	ldr	x0, [x0]
 2c0:	strb	wzr, [x0]
 2c4:	add	x1, x23, #0x800, lsl #12
 2c8:	ldr	x0, [x1, #1032]
 2cc:	add	x27, x0, x27
 2d0:	str	x27, [x1, #1032]
 2d4:	ldr	w0, [sp, #140]
 2d8:	str	w0, [x28, #8]
 2dc:	and	w19, w19, #0xfff00000
 2e0:	str	w19, [x28, #12]
 2e4:	str	w24, [x28, #16]
 2e8:	lsr	x21, x21, #32
 2ec:	str	w21, [x28, #20]
 2f0:	lsl	x2, x25, #3
 2f4:	mov	x1, x20
 2f8:	add	x0, x28, #0x18
 2fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 300:	ldr	x0, [sp, #112]
 304:	str	x0, [x28]
 308:	dmb	ish
 30c:	str	x28, [x23, x26, lsl #3]
 310:	cbz	x22, 31c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x31c>
 314:	mov	w0, #0x1                   	// #1
 318:	strb	w0, [x22]
 31c:	mov	x0, x28
 320:	ldp	x25, x26, [sp, #48]
 324:	ldp	x27, x28, [sp, #64]
 328:	b	cc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xcc>
 32c:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 330:	ldr	x0, [x0]
 334:	mov	w2, #0x1                   	// #1
 338:	ldxrb	w1, [x0]
 33c:	stxrb	w3, w2, [x0]
 340:	cbnz	w3, 338 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x338>
 344:	dmb	ish
 348:	and	w0, w1, #0xff
 34c:	cbnz	w0, 208 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x208>
 350:	adrp	x0, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 354:	ldr	x28, [x0]
 358:	add	x0, x28, #0x8
 35c:	str	x0, [sp, #104]
 360:	b	26c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x26c>

sanitizer_stacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>:
   0:	add	x0, x0, #0x4
   4:	ret

0000000000000008 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>:
   8:	str	x30, [sp, #-16]!
   c:	mov	x0, x30
  10:	ldr	x30, [sp], #16
  14:	ret

0000000000000018 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm>:
  18:	stp	x19, x20, [sp, #-32]!
  1c:	stp	x21, x30, [sp, #16]
  20:	mov	x19, x0
  24:	cmp	x3, #0x0
  28:	cinc	w0, w2, ne  // ne = any
  2c:	str	w0, [x19, #8]
  30:	cmp	w0, #0x100
  34:	b.hi	68 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x50>  // b.pmore
  38:	mov	x20, x2
  3c:	mov	x21, x3
  40:	lsl	x2, x2, #3
  44:	add	x0, x19, #0x10
  48:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  4c:	cbz	x21, 58 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x40>
  50:	add	x20, x20, #0x2
  54:	str	x21, [x19, x20, lsl #3]
  58:	str	xzr, [x19, #2064]
  5c:	ldp	x21, x30, [sp, #16]
  60:	ldp	x19, x20, [sp], #32
  64:	ret
  68:	mov	w3, w0
  6c:	mov	x4, #0x100                 	// #256
  70:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  74:	add	x2, x2, #0x0
  78:	mov	w1, #0x22                  	// #34
  7c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  80:	add	x0, x0, #0x0
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000088 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>:
  88:	stp	x19, x20, [sp, #-64]!
  8c:	stp	x21, x22, [sp, #16]
  90:	stp	x23, x24, [sp, #32]
  94:	str	x30, [sp, #48]
  98:	mov	x19, x0
  9c:	mov	x23, x1
  a0:	mov	x22, x2
  a4:	mov	x21, x3
  a8:	mov	x24, x4
  ac:	mov	w20, w5
  b0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  b4:	ldr	x0, [x0]
  b8:	ldr	x0, [x0]
  bc:	cbz	x0, 158 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xd0>
  c0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  c4:	ldr	x0, [x0]
  c8:	ldr	x1, [x0]
  cc:	mov	w3, w20
  d0:	cmp	w20, #0x1
  d4:	b.ls	16c <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xe4>  // b.plast
  d8:	str	x23, [x19, #16]
  dc:	mov	w0, #0x1                   	// #1
  e0:	str	w0, [x19, #8]
  e4:	cmp	x21, #0xfff
  e8:	b.ls	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.plast
  ec:	cmp	x22, x24
  f0:	b.ls	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.plast
  f4:	sub	x21, x21, #0x10
  f8:	cmp	x22, x21
  fc:	b.cs	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.hs, b.nlast
 100:	mov	x0, x22
 104:	mov	w2, #0x1                   	// #1
 108:	tst	x22, #0x7
 10c:	b.ne	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.any
 110:	ldr	x3, [x0, #8]
 114:	cmp	x1, x3
 118:	b.hi	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.pmore
 11c:	cmp	x23, x3
 120:	b.eq	134 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xac>  // b.none
 124:	add	w4, w2, #0x1
 128:	str	w4, [x19, #8]
 12c:	add	x2, x19, w2, uxtw #3
 130:	str	x3, [x2, #16]
 134:	ldr	x0, [x0]
 138:	mov	x3, x0
 13c:	cmp	x22, x0
 140:	b.cc	188 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x100>  // b.lo, b.ul, b.last
 144:	ldp	x21, x22, [sp, #16]
 148:	ldp	x23, x24, [sp, #32]
 14c:	ldr	x30, [sp, #48]
 150:	ldp	x19, x20, [sp], #64
 154:	ret
 158:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 15c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 160:	ldr	x1, [x1]
 164:	str	x0, [x1]
 168:	b	c0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x38>
 16c:	mov	x4, #0x2                   	// #2
 170:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 174:	add	x2, x2, #0x0
 178:	mov	w1, #0x47                  	// #71
 17c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 180:	add	x0, x0, #0x0
 184:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 188:	cmp	x0, x21
 18c:	b.cs	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.hs, b.nlast
 190:	tst	x3, #0x7
 194:	b.ne	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.any
 198:	ldr	w2, [x19, #8]
 19c:	cmp	w2, w20
 1a0:	b.cs	144 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xbc>  // b.hs, b.nlast
 1a4:	mov	x22, x3
 1a8:	b	110 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x88>

00000000000001ac <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>:
 1ac:	ldr	w2, [x0, #8]
 1b0:	cmp	x1, w2, uxtw
 1b4:	b.cs	1e4 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x38>  // b.hs, b.nlast
 1b8:	sub	w2, w2, w1
 1bc:	str	w2, [x0, #8]
 1c0:	mov	w3, w2
 1c4:	cbz	w2, 1e0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x34>
 1c8:	add	x0, x0, #0x10
 1cc:	add	x3, x0, x3, lsl #3
 1d0:	ldr	x2, [x0, x1, lsl #3]
 1d4:	str	x2, [x0], #8
 1d8:	cmp	x0, x3
 1dc:	b.ne	1d0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x24>  // b.any
 1e0:	ret
 1e4:	str	x30, [sp, #-16]!
 1e8:	mov	w4, w2
 1ec:	mov	x3, x1
 1f0:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 1f4:	add	x2, x2, #0x0
 1f8:	mov	w1, #0x78                  	// #120
 1fc:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 200:	add	x0, x0, #0x0
 204:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000208 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>:
 208:	ldr	w8, [x0, #8]
 20c:	cmp	x8, #0x1
 210:	b.ls	260 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x58>  // b.plast
 214:	ldr	x6, [x0]
 218:	mov	x2, #0x1                   	// #1
 21c:	mov	x0, #0x0                   	// #0
 220:	ldr	x4, [x6, x2, lsl #3]
 224:	sub	x5, x1, x4
 228:	sub	x3, x4, x1
 22c:	cmp	x4, x1
 230:	csel	x3, x3, x5, cs  // cs = hs, nlast
 234:	ldr	x5, [x6, x0, lsl #3]
 238:	sub	x7, x1, x5
 23c:	sub	x4, x5, x1
 240:	cmp	x5, x1
 244:	csel	x4, x4, x7, cs  // cs = hs, nlast
 248:	cmp	x4, x3
 24c:	csel	x0, x0, x2, ls  // ls = plast
 250:	add	x2, x2, #0x1
 254:	cmp	x2, x8
 258:	b.ne	220 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x18>  // b.any
 25c:	ret
 260:	mov	x0, #0x0                   	// #0
 264:	b	25c <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x54>

sanitizer_stacktrace_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer10StackTrace5PrintEv>:
   0:	stp	x19, x20, [sp, #-176]!
   4:	stp	x23, x24, [sp, #32]
   8:	str	x30, [sp, #80]
   c:	mov	x23, x0
  10:	ldr	x0, [x0]
  14:	cbz	x0, 7c <_ZNK11__sanitizer10StackTrace5PrintEv+0x7c>
  18:	ldr	w0, [x23, #8]
  1c:	cbz	w0, 7c <_ZNK11__sanitizer10StackTrace5PrintEv+0x7c>
  20:	stp	x21, x22, [sp, #16]
  24:	stp	x25, x26, [sp, #48]
  28:	stp	x27, x28, [sp, #64]
  2c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  30:	ldr	x0, [x0]
  34:	ldr	x0, [x0]
  38:	cbz	x0, 98 <_ZNK11__sanitizer10StackTrace5PrintEv+0x98>
  3c:	lsl	x19, x0, #1
  40:	str	xzr, [sp, #152]
  44:	str	xzr, [sp, #160]
  48:	str	xzr, [sp, #144]
  4c:	cmp	xzr, x0, lsl #1
  50:	b.ne	d8 <_ZNK11__sanitizer10StackTrace5PrintEv+0xd8>  // b.any
  54:	str	xzr, [sp, #160]
  58:	str	xzr, [sp, #168]
  5c:	mov	x4, #0x0                   	// #0
  60:	mov	x3, #0x0                   	// #0
  64:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  68:	add	x2, x2, #0x0
  6c:	mov	w1, #0x1b6                 	// #438
  70:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  74:	add	x0, x0, #0x0
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  7c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  80:	add	x0, x0, #0x0
  84:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  88:	ldp	x23, x24, [sp, #32]
  8c:	ldr	x30, [sp, #80]
  90:	ldp	x19, x20, [sp], #176
  94:	ret
  98:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  9c:	mov	x19, x0
  a0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  a4:	ldr	x0, [x0]
  a8:	str	x19, [x0]
  ac:	lsl	x0, x19, #1
  b0:	str	xzr, [sp, #152]
  b4:	str	xzr, [sp, #160]
  b8:	str	xzr, [sp, #144]
  bc:	cmp	xzr, x19, lsl #1
  c0:	b.eq	54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>  // b.none
  c4:	cbnz	x19, 280 <_ZNK11__sanitizer10StackTrace5PrintEv+0x280>
  c8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  cc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
  d0:	ldr	x1, [x1]
  d4:	str	x0, [x1]
  d8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  dc:	ldr	x0, [x0]
  e0:	ldr	x1, [x0]
  e4:	sub	x0, x1, #0x1
  e8:	tst	x1, x0
  ec:	b.ne	288 <_ZNK11__sanitizer10StackTrace5PrintEv+0x288>  // b.any
  f0:	add	x0, x0, x19
  f4:	neg	x1, x1
  f8:	and	x20, x0, x1
  fc:	mov	w2, #0x0                   	// #0
 100:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 104:	add	x1, x1, #0x0
 108:	mov	x0, x20
 10c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 110:	mov	x21, x0
 114:	ldr	x2, [sp, #160]
 118:	ldr	x1, [sp, #144]
 11c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 120:	ldr	x1, [sp, #152]
 124:	ldr	x0, [sp, #144]
 128:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 12c:	str	x21, [sp, #144]
 130:	str	x20, [sp, #152]
 134:	ldr	x0, [sp, #160]
 138:	cmp	x0, x19
 13c:	b.cs	5a4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x5a4>  // b.hs, b.nlast
 140:	cmp	x19, x20
 144:	b.hi	298 <_ZNK11__sanitizer10StackTrace5PrintEv+0x298>  // b.pmore
 148:	ldr	x0, [sp, #160]
 14c:	sub	x2, x19, x0
 150:	mov	w1, #0x0                   	// #0
 154:	ldr	x3, [sp, #144]
 158:	add	x0, x3, x0
 15c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 160:	str	x19, [sp, #160]
 164:	str	xzr, [sp, #168]
 168:	cbz	x19, 5c <_ZNK11__sanitizer10StackTrace5PrintEv+0x5c>
 16c:	ldr	x0, [sp, #144]
 170:	strb	wzr, [x0]
 174:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 178:	ldr	x0, [x0]
 17c:	ldr	x19, [x0]
 180:	cbz	x19, 32c <_ZNK11__sanitizer10StackTrace5PrintEv+0x32c>
 184:	str	xzr, [sp, #120]
 188:	str	xzr, [sp, #128]
 18c:	str	xzr, [sp, #112]
 190:	sub	x24, x19, #0x1
 194:	ands	x24, x24, x19
 198:	b.ne	378 <_ZNK11__sanitizer10StackTrace5PrintEv+0x378>  // b.any
 19c:	lsl	x20, x19, #1
 1a0:	sub	x20, x20, #0x1
 1a4:	neg	x0, x19
 1a8:	and	x20, x20, x0
 1ac:	mov	w2, #0x0                   	// #0
 1b0:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 1b4:	add	x1, x1, #0x0
 1b8:	mov	x0, x20
 1bc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1c0:	mov	x21, x0
 1c4:	ldr	x2, [sp, #128]
 1c8:	ldr	x1, [sp, #112]
 1cc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1d0:	ldr	x1, [sp, #120]
 1d4:	ldr	x0, [sp, #112]
 1d8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1dc:	str	x21, [sp, #112]
 1e0:	str	x20, [sp, #120]
 1e4:	ldr	x0, [sp, #128]
 1e8:	cmp	x0, x19
 1ec:	b.cs	598 <_ZNK11__sanitizer10StackTrace5PrintEv+0x598>  // b.hs, b.nlast
 1f0:	cmp	x19, x20
 1f4:	b.hi	388 <_ZNK11__sanitizer10StackTrace5PrintEv+0x388>  // b.pmore
 1f8:	ldr	x0, [sp, #128]
 1fc:	sub	x2, x19, x0
 200:	mov	w1, #0x0                   	// #0
 204:	ldr	x3, [sp, #112]
 208:	add	x0, x3, x0
 20c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 210:	str	x19, [sp, #128]
 214:	str	xzr, [sp, #136]
 218:	cbz	x19, 358 <_ZNK11__sanitizer10StackTrace5PrintEv+0x358>
 21c:	ldr	x0, [sp, #112]
 220:	strb	wzr, [x0]
 224:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 228:	ldr	x0, [x0]
 22c:	ldr	w26, [x0, #184]
 230:	ldr	w0, [x23, #8]
 234:	cbz	w0, 548 <_ZNK11__sanitizer10StackTrace5PrintEv+0x548>
 238:	str	x24, [sp, #96]
 23c:	adrp	x25, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 240:	add	x25, x25, #0x0
 244:	add	x27, sp, #0x90
 248:	ldr	x0, [x23]
 24c:	ldr	x1, [sp, #96]
 250:	ldr	x19, [x0, x1, lsl #3]
 254:	cbz	x19, 548 <_ZNK11__sanitizer10StackTrace5PrintEv+0x548>
 258:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 25c:	sub	x1, x19, #0x4
 260:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 264:	str	x0, [sp, #104]
 268:	cbz	x0, 440 <_ZNK11__sanitizer10StackTrace5PrintEv+0x440>
 26c:	ldr	x19, [sp, #104]
 270:	mov	x20, x24
 274:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 278:	ldr	x21, [x21]
 27c:	b	4a0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x4a0>
 280:	mov	x19, x0
 284:	b	d8 <_ZNK11__sanitizer10StackTrace5PrintEv+0xd8>
 288:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 28c:	add	x0, x0, #0x0
 290:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 294:	bl	0 <_ZN11__sanitizer3DieEv>
 298:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 29c:	ldr	x0, [x0]
 2a0:	ldr	x0, [x0]
 2a4:	cbz	x0, 308 <_ZNK11__sanitizer10StackTrace5PrintEv+0x308>
 2a8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2ac:	ldr	x0, [x0]
 2b0:	ldr	x1, [x0]
 2b4:	sub	x0, x1, #0x1
 2b8:	tst	x1, x0
 2bc:	b.ne	31c <_ZNK11__sanitizer10StackTrace5PrintEv+0x31c>  // b.any
 2c0:	add	x0, x19, x0
 2c4:	neg	x1, x1
 2c8:	and	x20, x0, x1
 2cc:	mov	w2, #0x0                   	// #0
 2d0:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 2d4:	add	x1, x1, #0x0
 2d8:	mov	x0, x20
 2dc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2e0:	mov	x21, x0
 2e4:	ldr	x2, [sp, #160]
 2e8:	ldr	x1, [sp, #144]
 2ec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2f0:	ldr	x1, [sp, #152]
 2f4:	ldr	x0, [sp, #144]
 2f8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2fc:	str	x21, [sp, #144]
 300:	str	x20, [sp, #152]
 304:	b	148 <_ZNK11__sanitizer10StackTrace5PrintEv+0x148>
 308:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 30c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 310:	ldr	x1, [x1]
 314:	str	x0, [x1]
 318:	b	2a8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2a8>
 31c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 320:	add	x0, x0, #0x0
 324:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 328:	bl	0 <_ZN11__sanitizer3DieEv>
 32c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 330:	mov	x19, x0
 334:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 338:	ldr	x0, [x0]
 33c:	str	x19, [x0]
 340:	str	xzr, [sp, #120]
 344:	str	xzr, [sp, #128]
 348:	str	xzr, [sp, #112]
 34c:	cbnz	x19, 190 <_ZNK11__sanitizer10StackTrace5PrintEv+0x190>
 350:	str	x19, [sp, #128]
 354:	str	xzr, [sp, #136]
 358:	mov	x4, #0x0                   	// #0
 35c:	mov	x3, #0x0                   	// #0
 360:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 364:	add	x2, x2, #0x0
 368:	mov	w1, #0x1b6                 	// #438
 36c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 370:	add	x0, x0, #0x0
 374:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 378:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 37c:	add	x0, x0, #0x0
 380:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 384:	bl	0 <_ZN11__sanitizer3DieEv>
 388:	cbz	x19, 3fc <_ZNK11__sanitizer10StackTrace5PrintEv+0x3fc>
 38c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 390:	ldr	x0, [x0]
 394:	ldr	x0, [x0]
 398:	cbz	x0, 41c <_ZNK11__sanitizer10StackTrace5PrintEv+0x41c>
 39c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 3a0:	ldr	x0, [x0]
 3a4:	ldr	x1, [x0]
 3a8:	sub	x0, x1, #0x1
 3ac:	tst	x1, x0
 3b0:	b.ne	430 <_ZNK11__sanitizer10StackTrace5PrintEv+0x430>  // b.any
 3b4:	add	x0, x19, x0
 3b8:	neg	x1, x1
 3bc:	and	x20, x0, x1
 3c0:	mov	w2, #0x0                   	// #0
 3c4:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 3c8:	add	x1, x1, #0x0
 3cc:	mov	x0, x20
 3d0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3d4:	mov	x21, x0
 3d8:	ldr	x2, [sp, #128]
 3dc:	ldr	x1, [sp, #112]
 3e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e4:	ldr	x1, [sp, #120]
 3e8:	ldr	x0, [sp, #112]
 3ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3f0:	str	x21, [sp, #112]
 3f4:	str	x20, [sp, #120]
 3f8:	b	1f8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1f8>
 3fc:	mov	x4, #0x0                   	// #0
 400:	mov	x3, #0x0                   	// #0
 404:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 408:	add	x2, x2, #0x0
 40c:	mov	w1, #0x1fc                 	// #508
 410:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 414:	add	x0, x0, #0x0
 418:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 41c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 420:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 424:	ldr	x1, [x1]
 428:	str	x0, [x1]
 42c:	b	39c <_ZNK11__sanitizer10StackTrace5PrintEv+0x39c>
 430:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 434:	add	x0, x0, #0x0
 438:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 43c:	bl	0 <_ZN11__sanitizer3DieEv>
 440:	mov	x4, #0x0                   	// #0
 444:	mov	x3, #0x0                   	// #0
 448:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 44c:	add	x2, x2, #0x0
 450:	mov	w1, #0x22                  	// #34
 454:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 458:	add	x0, x0, #0x0
 45c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 460:	mov	x4, #0x0                   	// #0
 464:	mov	x3, #0x0                   	// #0
 468:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 46c:	add	x2, x2, #0x0
 470:	mov	w1, #0x1b6                 	// #438
 474:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 478:	add	x0, x0, #0x0
 47c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 480:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 484:	add	x1, x1, #0x0
 488:	add	x0, sp, #0x70
 48c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 490:	b	504 <_ZNK11__sanitizer10StackTrace5PrintEv+0x504>
 494:	ldr	x19, [x19]
 498:	cbz	x19, 518 <_ZNK11__sanitizer10StackTrace5PrintEv+0x518>
 49c:	mov	x20, x22
 4a0:	ldr	x0, [sp, #160]
 4a4:	cbz	x0, 460 <_ZNK11__sanitizer10StackTrace5PrintEv+0x460>
 4a8:	ldr	x0, [sp, #144]
 4ac:	strb	wzr, [x0]
 4b0:	str	xzr, [sp, #168]
 4b4:	add	x22, x20, #0x1
 4b8:	mov	x6, x25
 4bc:	ldr	x5, [x21, #24]
 4c0:	ldrb	w4, [x21, #181]
 4c4:	add	x3, x19, #0x8
 4c8:	mov	w2, w20
 4cc:	ldr	x1, [x21, #192]
 4d0:	mov	x0, x27
 4d4:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 4d8:	ldr	x1, [sp, #144]
 4dc:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 4e0:	add	x0, x0, #0x0
 4e4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 4e8:	add	w0, w26, w24
 4ec:	sub	w28, w0, w22
 4f0:	sub	w20, w0, w20
 4f4:	cmp	w20, #0x0
 4f8:	b.le	494 <_ZNK11__sanitizer10StackTrace5PrintEv+0x494>
 4fc:	ldr	x0, [sp, #136]
 500:	cbnz	x0, 480 <_ZNK11__sanitizer10StackTrace5PrintEv+0x480>
 504:	ldr	x1, [x19, #40]
 508:	cbz	x1, 494 <_ZNK11__sanitizer10StackTrace5PrintEv+0x494>
 50c:	add	x0, sp, #0x70
 510:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 514:	b	494 <_ZNK11__sanitizer10StackTrace5PrintEv+0x494>
 518:	ldr	x0, [sp, #104]
 51c:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 520:	ldr	x0, [sp, #96]
 524:	add	x0, x0, #0x1
 528:	mov	x1, x0
 52c:	str	x0, [sp, #96]
 530:	ldr	w0, [x23, #8]
 534:	cmp	x0, x1
 538:	b.ls	548 <_ZNK11__sanitizer10StackTrace5PrintEv+0x548>  // b.plast
 53c:	mov	x24, x22
 540:	mov	w26, w28
 544:	b	248 <_ZNK11__sanitizer10StackTrace5PrintEv+0x248>
 548:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 54c:	add	x0, x0, #0x0
 550:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 554:	ldr	x0, [sp, #136]
 558:	cbnz	x0, 584 <_ZNK11__sanitizer10StackTrace5PrintEv+0x584>
 55c:	ldr	x1, [sp, #120]
 560:	ldr	x0, [sp, #112]
 564:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 568:	ldr	x1, [sp, #152]
 56c:	ldr	x0, [sp, #144]
 570:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 574:	ldp	x21, x22, [sp, #16]
 578:	ldp	x25, x26, [sp, #48]
 57c:	ldp	x27, x28, [sp, #64]
 580:	b	88 <_ZNK11__sanitizer10StackTrace5PrintEv+0x88>
 584:	ldr	x1, [sp, #112]
 588:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 58c:	add	x0, x0, #0x0
 590:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 594:	b	55c <_ZNK11__sanitizer10StackTrace5PrintEv+0x55c>
 598:	str	x19, [sp, #128]
 59c:	str	xzr, [sp, #136]
 5a0:	b	21c <_ZNK11__sanitizer10StackTrace5PrintEv+0x21c>
 5a4:	str	x19, [sp, #160]
 5a8:	str	xzr, [sp, #168]
 5ac:	b	16c <_ZNK11__sanitizer10StackTrace5PrintEv+0x16c>

00000000000005b0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>:
 5b0:	mov	w8, w1
 5b4:	cbnz	w1, 5f0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x40>
 5b8:	str	xzr, [x0, #2064]
 5bc:	str	wzr, [x0, #8]
 5c0:	ret
 5c4:	mov	w2, #0x1                   	// #1
 5c8:	str	w2, [x0, #8]
 5cc:	str	x1, [x0, #16]
 5d0:	ret
 5d4:	mov	w2, w8
 5d8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>
 5dc:	b	624 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x74>
 5e0:	mov	w5, w8
 5e4:	mov	x4, x6
 5e8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>
 5ec:	b	624 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x74>
 5f0:	mov	x1, x2
 5f4:	mov	x2, x3
 5f8:	mov	x3, x5
 5fc:	and	w7, w7, #0xff
 600:	str	x2, [x0, #2064]
 604:	cmp	w8, #0x1
 608:	b.eq	5c4 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x14>  // b.none
 60c:	str	x30, [sp, #-16]!
 610:	cbnz	w7, 5e0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x30>
 614:	cbz	x4, 5d4 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x24>
 618:	mov	w3, w8
 61c:	mov	x2, x4
 620:	bl	0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>
 624:	ldr	x30, [sp], #16
 628:	ret

000000000000062c <__sanitizer_symbolize_pc>:
 62c:	cbnz	x3, 634 <__sanitizer_symbolize_pc+0x8>
 630:	ret
 634:	stp	x19, x20, [sp, #-112]!
 638:	stp	x21, x22, [sp, #16]
 63c:	stp	x23, x24, [sp, #32]
 640:	str	x30, [sp, #72]
 644:	mov	x21, x0
 648:	mov	x23, x1
 64c:	mov	x19, x2
 650:	mov	x20, x3
 654:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 658:	sub	x1, x21, #0x4
 65c:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 660:	mov	x21, x0
 664:	cbz	x0, 74c <__sanitizer_symbolize_pc+0x120>
 668:	stp	x25, x26, [sp, #48]
 66c:	str	x27, [sp, #64]
 670:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 674:	ldr	x0, [x0]
 678:	ldr	x22, [x0]
 67c:	cbz	x22, 76c <__sanitizer_symbolize_pc+0x140>
 680:	str	xzr, [sp, #88]
 684:	str	xzr, [sp, #96]
 688:	str	xzr, [sp, #80]
 68c:	sub	x0, x22, #0x1
 690:	tst	x0, x22
 694:	b.ne	7b8 <__sanitizer_symbolize_pc+0x18c>  // b.any
 698:	lsl	x24, x22, #1
 69c:	sub	x24, x24, #0x1
 6a0:	neg	x0, x22
 6a4:	and	x24, x24, x0
 6a8:	mov	w2, #0x0                   	// #0
 6ac:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 6b0:	add	x1, x1, #0x0
 6b4:	mov	x0, x24
 6b8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6bc:	mov	x25, x0
 6c0:	ldr	x2, [sp, #96]
 6c4:	ldr	x1, [sp, #80]
 6c8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6cc:	ldr	x1, [sp, #88]
 6d0:	ldr	x0, [sp, #80]
 6d4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6d8:	str	x25, [sp, #80]
 6dc:	str	x24, [sp, #88]
 6e0:	ldr	x0, [sp, #96]
 6e4:	cmp	x22, x0
 6e8:	b.ls	974 <__sanitizer_symbolize_pc+0x348>  // b.plast
 6ec:	cmp	x22, x24
 6f0:	b.hi	7c8 <__sanitizer_symbolize_pc+0x19c>  // b.pmore
 6f4:	ldr	x0, [sp, #96]
 6f8:	sub	x2, x22, x0
 6fc:	mov	w1, #0x0                   	// #0
 700:	ldr	x3, [sp, #80]
 704:	add	x0, x3, x0
 708:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 70c:	str	x22, [sp, #96]
 710:	str	xzr, [sp, #104]
 714:	cbz	x22, 798 <__sanitizer_symbolize_pc+0x16c>
 718:	ldr	x0, [sp, #80]
 71c:	strb	wzr, [x0]
 720:	sub	x20, x20, #0x1
 724:	add	x20, x19, x20
 728:	cmp	x19, x20
 72c:	b.cs	920 <__sanitizer_symbolize_pc+0x2f4>  // b.hs, b.nlast
 730:	mov	w22, #0x0                   	// #0
 734:	adrp	x26, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 738:	add	x26, x26, #0x0
 73c:	adrp	x25, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 740:	ldr	x25, [x25]
 744:	add	x27, sp, #0x50
 748:	b	8b4 <__sanitizer_symbolize_pc+0x288>
 74c:	mov	x2, x20
 750:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 754:	add	x1, x1, #0x0
 758:	mov	x0, x19
 75c:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 760:	add	x19, x19, x20
 764:	sturb	wzr, [x19, #-1]
 768:	b	940 <__sanitizer_symbolize_pc+0x314>
 76c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 770:	mov	x22, x0
 774:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 778:	ldr	x0, [x0]
 77c:	str	x22, [x0]
 780:	str	xzr, [sp, #88]
 784:	str	xzr, [sp, #96]
 788:	str	xzr, [sp, #80]
 78c:	cbnz	x22, 68c <__sanitizer_symbolize_pc+0x60>
 790:	str	x22, [sp, #96]
 794:	str	xzr, [sp, #104]
 798:	mov	x4, #0x0                   	// #0
 79c:	mov	x3, #0x0                   	// #0
 7a0:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 7a4:	add	x2, x2, #0x0
 7a8:	mov	w1, #0x1b6                 	// #438
 7ac:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 7b0:	add	x0, x0, #0x0
 7b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7b8:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 7bc:	add	x0, x0, #0x0
 7c0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 7c4:	bl	0 <_ZN11__sanitizer3DieEv>
 7c8:	cbz	x22, 83c <__sanitizer_symbolize_pc+0x210>
 7cc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7d0:	ldr	x0, [x0]
 7d4:	ldr	x0, [x0]
 7d8:	cbz	x0, 85c <__sanitizer_symbolize_pc+0x230>
 7dc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7e0:	ldr	x0, [x0]
 7e4:	ldr	x1, [x0]
 7e8:	sub	x0, x1, #0x1
 7ec:	tst	x1, x0
 7f0:	b.ne	870 <__sanitizer_symbolize_pc+0x244>  // b.any
 7f4:	add	x0, x22, x0
 7f8:	neg	x1, x1
 7fc:	and	x24, x0, x1
 800:	mov	w2, #0x0                   	// #0
 804:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 808:	add	x1, x1, #0x0
 80c:	mov	x0, x24
 810:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 814:	mov	x25, x0
 818:	ldr	x2, [sp, #96]
 81c:	ldr	x1, [sp, #80]
 820:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 824:	ldr	x1, [sp, #88]
 828:	ldr	x0, [sp, #80]
 82c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 830:	str	x25, [sp, #80]
 834:	str	x24, [sp, #88]
 838:	b	6f4 <__sanitizer_symbolize_pc+0xc8>
 83c:	mov	x4, #0x0                   	// #0
 840:	mov	x3, #0x0                   	// #0
 844:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 848:	add	x2, x2, #0x0
 84c:	mov	w1, #0x1fc                 	// #508
 850:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 854:	add	x0, x0, #0x0
 858:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 85c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 860:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 864:	ldr	x1, [x1]
 868:	str	x0, [x1]
 86c:	b	7dc <__sanitizer_symbolize_pc+0x1b0>
 870:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 874:	add	x0, x0, #0x0
 878:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 87c:	bl	0 <_ZN11__sanitizer3DieEv>
 880:	mov	x4, #0x0                   	// #0
 884:	mov	x3, #0x0                   	// #0
 888:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 88c:	add	x2, x2, #0x0
 890:	mov	w1, #0x1b6                 	// #438
 894:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 898:	add	x0, x0, #0x0
 89c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 8a0:	ldr	x21, [x21]
 8a4:	add	w22, w22, #0x1
 8a8:	cmp	x21, #0x0
 8ac:	ccmp	x19, x20, #0x2, ne  // ne = any
 8b0:	b.cs	920 <__sanitizer_symbolize_pc+0x2f4>  // b.hs, b.nlast
 8b4:	ldr	x0, [sp, #96]
 8b8:	cbz	x0, 880 <__sanitizer_symbolize_pc+0x254>
 8bc:	ldr	x0, [sp, #80]
 8c0:	strb	wzr, [x0]
 8c4:	str	xzr, [sp, #104]
 8c8:	mov	x6, x26
 8cc:	ldr	x5, [x25, #24]
 8d0:	ldrb	w4, [x25, #181]
 8d4:	add	x3, x21, #0x8
 8d8:	mov	w2, w22
 8dc:	mov	x1, x23
 8e0:	mov	x0, x27
 8e4:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 8e8:	ldr	x0, [sp, #104]
 8ec:	cbz	x0, 8a0 <__sanitizer_symbolize_pc+0x274>
 8f0:	sub	x24, x20, x19
 8f4:	sub	x24, x24, #0x1
 8f8:	mov	x2, x24
 8fc:	ldr	x1, [sp, #80]
 900:	mov	x0, x19
 904:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 908:	ldr	x0, [sp, #104]
 90c:	cmp	x0, x24
 910:	csel	x24, x0, x24, ls  // ls = plast
 914:	add	x19, x19, x24
 918:	strb	wzr, [x19], #1
 91c:	b	8a0 <__sanitizer_symbolize_pc+0x274>
 920:	cmp	x19, x20
 924:	b.hi	954 <__sanitizer_symbolize_pc+0x328>  // b.pmore
 928:	strb	wzr, [x19]
 92c:	ldr	x1, [sp, #88]
 930:	ldr	x0, [sp, #80]
 934:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 938:	ldp	x25, x26, [sp, #48]
 93c:	ldr	x27, [sp, #64]
 940:	ldp	x21, x22, [sp, #16]
 944:	ldp	x23, x24, [sp, #32]
 948:	ldr	x30, [sp, #72]
 94c:	ldp	x19, x20, [sp], #112
 950:	ret
 954:	mov	x4, #0x0                   	// #0
 958:	mov	x3, #0x0                   	// #0
 95c:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 960:	add	x2, x2, #0x0
 964:	mov	w1, #0x84                  	// #132
 968:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 96c:	add	x0, x0, #0x0
 970:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 974:	str	x22, [sp, #96]
 978:	str	xzr, [sp, #104]
 97c:	b	718 <__sanitizer_symbolize_pc+0xec>

0000000000000980 <__sanitizer_symbolize_global>:
 980:	cbnz	x3, 988 <__sanitizer_symbolize_global+0x8>
 984:	ret
 988:	stp	x19, x20, [sp, #-160]!
 98c:	stp	x21, x22, [sp, #16]
 990:	stp	x23, x24, [sp, #32]
 994:	str	x30, [sp, #48]
 998:	mov	x20, x0
 99c:	mov	x22, x1
 9a0:	mov	x21, x2
 9a4:	mov	x19, x3
 9a8:	strb	wzr, [x2]
 9ac:	add	x23, sp, #0x60
 9b0:	mov	x0, x23
 9b4:	bl	0 <_ZN11__sanitizer8DataInfoC1Ev>
 9b8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 9bc:	mov	x2, x23
 9c0:	mov	x1, x20
 9c4:	bl	0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>
 9c8:	and	w0, w0, #0xff
 9cc:	cbz	w0, ac0 <__sanitizer_symbolize_global+0x140>
 9d0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9d4:	ldr	x0, [x0]
 9d8:	ldr	x20, [x0]
 9dc:	cbz	x20, ad4 <__sanitizer_symbolize_global+0x154>
 9e0:	str	xzr, [sp, #72]
 9e4:	str	xzr, [sp, #80]
 9e8:	str	xzr, [sp, #64]
 9ec:	sub	x0, x20, #0x1
 9f0:	tst	x0, x20
 9f4:	b.ne	b20 <__sanitizer_symbolize_global+0x1a0>  // b.any
 9f8:	lsl	x23, x20, #1
 9fc:	sub	x23, x23, #0x1
 a00:	neg	x0, x20
 a04:	and	x23, x23, x0
 a08:	mov	w2, #0x0                   	// #0
 a0c:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 a10:	add	x1, x1, #0x0
 a14:	mov	x0, x23
 a18:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a1c:	mov	x24, x0
 a20:	ldr	x2, [sp, #80]
 a24:	ldr	x1, [sp, #64]
 a28:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a2c:	ldr	x1, [sp, #72]
 a30:	ldr	x0, [sp, #64]
 a34:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a38:	str	x24, [sp, #64]
 a3c:	str	x23, [sp, #72]
 a40:	ldr	x0, [sp, #80]
 a44:	cmp	x0, x20
 a48:	b.cs	be8 <__sanitizer_symbolize_global+0x268>  // b.hs, b.nlast
 a4c:	cmp	x23, x20
 a50:	b.cc	b30 <__sanitizer_symbolize_global+0x1b0>  // b.lo, b.ul, b.last
 a54:	ldr	x0, [sp, #80]
 a58:	sub	x2, x20, x0
 a5c:	mov	w1, #0x0                   	// #0
 a60:	ldr	x3, [sp, #64]
 a64:	add	x0, x3, x0
 a68:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 a6c:	str	x20, [sp, #80]
 a70:	str	xzr, [sp, #88]
 a74:	cbz	x20, b00 <__sanitizer_symbolize_global+0x180>
 a78:	ldr	x0, [sp, #64]
 a7c:	strb	wzr, [x0]
 a80:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 a84:	ldr	x0, [x0]
 a88:	ldr	x3, [x0, #24]
 a8c:	add	x2, sp, #0x60
 a90:	mov	x1, x22
 a94:	add	x0, sp, #0x40
 a98:	bl	0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 a9c:	mov	x2, x19
 aa0:	ldr	x1, [sp, #64]
 aa4:	mov	x0, x21
 aa8:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 aac:	add	x2, x21, x19
 ab0:	sturb	wzr, [x2, #-1]
 ab4:	ldr	x1, [sp, #72]
 ab8:	ldr	x0, [sp, #64]
 abc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ac0:	ldp	x21, x22, [sp, #16]
 ac4:	ldp	x23, x24, [sp, #32]
 ac8:	ldr	x30, [sp, #48]
 acc:	ldp	x19, x20, [sp], #160
 ad0:	ret
 ad4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 ad8:	mov	x20, x0
 adc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 ae0:	ldr	x0, [x0]
 ae4:	str	x20, [x0]
 ae8:	str	xzr, [sp, #72]
 aec:	str	xzr, [sp, #80]
 af0:	str	xzr, [sp, #64]
 af4:	cbnz	x20, 9ec <__sanitizer_symbolize_global+0x6c>
 af8:	str	x20, [sp, #80]
 afc:	str	xzr, [sp, #88]
 b00:	mov	x4, #0x0                   	// #0
 b04:	mov	x3, #0x0                   	// #0
 b08:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 b0c:	add	x2, x2, #0x0
 b10:	mov	w1, #0x1b6                 	// #438
 b14:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 b18:	add	x0, x0, #0x0
 b1c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b20:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 b24:	add	x0, x0, #0x0
 b28:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 b2c:	bl	0 <_ZN11__sanitizer3DieEv>
 b30:	cbz	x20, ba4 <__sanitizer_symbolize_global+0x224>
 b34:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 b38:	ldr	x0, [x0]
 b3c:	ldr	x0, [x0]
 b40:	cbz	x0, bc4 <__sanitizer_symbolize_global+0x244>
 b44:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 b48:	ldr	x0, [x0]
 b4c:	ldr	x23, [x0]
 b50:	sub	x0, x23, #0x1
 b54:	tst	x23, x0
 b58:	b.ne	bd8 <__sanitizer_symbolize_global+0x258>  // b.any
 b5c:	add	x0, x0, x20
 b60:	neg	x23, x23
 b64:	and	x23, x0, x23
 b68:	mov	w2, #0x0                   	// #0
 b6c:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 b70:	add	x1, x1, #0x0
 b74:	mov	x0, x23
 b78:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b7c:	mov	x24, x0
 b80:	ldr	x2, [sp, #80]
 b84:	ldr	x1, [sp, #64]
 b88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b8c:	ldr	x1, [sp, #72]
 b90:	ldr	x0, [sp, #64]
 b94:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b98:	str	x24, [sp, #64]
 b9c:	str	x23, [sp, #72]
 ba0:	b	a54 <__sanitizer_symbolize_global+0xd4>
 ba4:	mov	x4, #0x0                   	// #0
 ba8:	mov	x3, #0x0                   	// #0
 bac:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 bb0:	add	x2, x2, #0x0
 bb4:	mov	w1, #0x1fc                 	// #508
 bb8:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 bbc:	add	x0, x0, #0x0
 bc0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bc4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 bc8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 bcc:	ldr	x1, [x1]
 bd0:	str	x0, [x1]
 bd4:	b	b44 <__sanitizer_symbolize_global+0x1c4>
 bd8:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 bdc:	add	x0, x0, #0x0
 be0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 be4:	bl	0 <_ZN11__sanitizer3DieEv>
 be8:	str	x20, [sp, #80]
 bec:	str	xzr, [sp, #88]
 bf0:	b	a78 <__sanitizer_symbolize_global+0xf8>

0000000000000bf4 <__sanitizer_get_module_and_offset_for_pc>:
 bf4:	stp	x19, x20, [sp, #-64]!
 bf8:	stp	x21, x22, [sp, #16]
 bfc:	str	x30, [sp, #32]
 c00:	mov	x21, x0
 c04:	mov	x19, x1
 c08:	mov	x20, x2
 c0c:	mov	x22, x3
 c10:	str	xzr, [sp, #56]
 c14:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 c18:	mov	x3, x22
 c1c:	add	x2, sp, #0x38
 c20:	mov	x1, x21
 c24:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 c28:	and	w0, w0, #0xff
 c2c:	cbz	w0, c70 <__sanitizer_get_module_and_offset_for_pc+0x7c>
 c30:	cmp	x19, #0x0
 c34:	mov	w0, #0x1                   	// #1
 c38:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 c3c:	b.ne	c50 <__sanitizer_get_module_and_offset_for_pc+0x5c>  // b.any
 c40:	ldp	x21, x22, [sp, #16]
 c44:	ldr	x30, [sp, #32]
 c48:	ldp	x19, x20, [sp], #64
 c4c:	ret
 c50:	mov	x2, x20
 c54:	ldr	x1, [sp, #56]
 c58:	mov	x0, x19
 c5c:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 c60:	add	x19, x19, x20
 c64:	sturb	wzr, [x19, #-1]
 c68:	mov	w0, #0x1                   	// #1
 c6c:	b	c40 <__sanitizer_get_module_and_offset_for_pc+0x4c>
 c70:	mov	w0, #0x0                   	// #0
 c74:	b	c40 <__sanitizer_get_module_and_offset_for_pc+0x4c>

sanitizer_stacktrace_printer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #24]
   8:	mov	x19, x0
   c:	cbz	x0, 48 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_+0x48>
  10:	mov	x20, x1
  14:	cbz	x1, 48 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_+0x48>
  18:	str	x21, [sp, #16]
  1c:	mov	x0, x1
  20:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  24:	mov	x21, x0
  28:	mov	x2, x0
  2c:	mov	x1, x20
  30:	mov	x0, x19
  34:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
  38:	add	x21, x19, x21
  3c:	cmp	w0, #0x0
  40:	csel	x19, x21, x19, eq  // eq = none
  44:	ldr	x21, [sp, #16]
  48:	mov	x0, x19
  4c:	ldr	x30, [sp, #24]
  50:	ldp	x19, x20, [sp], #32
  54:	ret

0000000000000058 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>:
  58:	stp	x19, x20, [sp, #-80]!
  5c:	stp	x21, x22, [sp, #16]
  60:	str	x30, [sp, #64]
  64:	mov	x22, x2
  68:	ldrb	w2, [x1]
  6c:	cbz	w2, 164 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x10c>
  70:	stp	x23, x24, [sp, #32]
  74:	stp	x25, x26, [sp, #48]
  78:	mov	x21, x0
  7c:	mov	x20, x1
  80:	mov	x24, x3
  84:	adrp	x25, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  88:	add	x25, x25, #0x0
  8c:	adrp	x23, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  90:	add	x23, x23, #0x0
  94:	adrp	x26, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  98:	b	bc <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x64>
  9c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  a0:	add	x1, x1, #0x0
  a4:	mov	x0, x21
  a8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  ac:	mov	x19, x20
  b0:	add	x20, x19, #0x1
  b4:	ldrb	w2, [x19, #1]
  b8:	cbz	w2, 15c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x104>
  bc:	cmp	w2, #0x25
  c0:	b.ne	9c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x44>  // b.any
  c4:	add	x19, x20, #0x1
  c8:	ldrb	w1, [x20, #1]
  cc:	cmp	w1, #0x6c
  d0:	b.eq	134 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xdc>  // b.none
  d4:	b.hi	fc <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xa4>  // b.pmore
  d8:	cmp	w1, #0x25
  dc:	b.eq	124 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xcc>  // b.none
  e0:	cmp	w1, #0x67
  e4:	b.ne	148 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xf0>  // b.any
  e8:	ldr	x2, [x22, #40]
  ec:	mov	x1, x23
  f0:	mov	x0, x21
  f4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  f8:	b	b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x58>
  fc:	cmp	w1, #0x73
 100:	b.ne	148 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xf0>  // b.any
 104:	mov	x1, x24
 108:	ldr	x0, [x22, #24]
 10c:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 110:	mov	x2, x0
 114:	mov	x1, x23
 118:	mov	x0, x21
 11c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 120:	b	b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x58>
 124:	add	x1, x26, #0x0
 128:	mov	x0, x21
 12c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 130:	b	b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x58>
 134:	ldr	x2, [x22, #32]
 138:	mov	x1, x25
 13c:	mov	x0, x21
 140:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 144:	b	b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x58>
 148:	mov	w2, w1
 14c:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 150:	add	x0, x0, #0x0
 154:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 158:	bl	0 <_ZN11__sanitizer3DieEv>
 15c:	ldp	x23, x24, [sp, #32]
 160:	ldp	x25, x26, [sp, #48]
 164:	ldp	x21, x22, [sp, #16]
 168:	ldr	x30, [sp, #64]
 16c:	ldp	x19, x20, [sp], #80
 170:	ret

0000000000000174 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>:
 174:	stp	x19, x20, [sp, #-32]!
 178:	stp	x21, x30, [sp, #16]
 17c:	mov	x21, x0
 180:	mov	x0, x1
 184:	mov	w19, w2
 188:	mov	w20, w3
 18c:	and	w4, w4, #0xff
 190:	mov	x1, x5
 194:	cmp	w2, #0x0
 198:	ccmp	w4, #0x0, #0x4, gt
 19c:	b.ne	1cc <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x58>  // b.any
 1a0:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 1a4:	mov	x2, x0
 1a8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1ac:	add	x1, x1, #0x0
 1b0:	mov	x0, x21
 1b4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1b8:	cmp	w19, #0x0
 1bc:	b.gt	21c <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0xa8>
 1c0:	ldp	x21, x30, [sp, #16]
 1c4:	ldp	x19, x20, [sp], #32
 1c8:	ret
 1cc:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 1d0:	mov	w3, w19
 1d4:	mov	x2, x0
 1d8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1dc:	add	x1, x1, #0x0
 1e0:	mov	x0, x21
 1e4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1e8:	cmp	w20, #0x0
 1ec:	b.gt	204 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x90>
 1f0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1f4:	add	x1, x1, #0x0
 1f8:	mov	x0, x21
 1fc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 200:	b	1c0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x4c>
 204:	mov	w2, w20
 208:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 20c:	add	x1, x1, #0x0
 210:	mov	x0, x21
 214:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 218:	b	1f0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x7c>
 21c:	mov	w2, w19
 220:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 224:	add	x1, x1, #0x0
 228:	mov	x0, x21
 22c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 230:	cmp	w20, #0x0
 234:	b.le	1c0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x4c>
 238:	mov	w2, w20
 23c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 240:	add	x1, x1, #0x0
 244:	mov	x0, x21
 248:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 24c:	b	1c0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x4c>

0000000000000250 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>:
 250:	stp	x19, x20, [sp, #-32]!
 254:	stp	x21, x30, [sp, #16]
 258:	mov	x20, x0
 25c:	mov	x0, x1
 260:	mov	x21, x2
 264:	mov	w19, w3
 268:	mov	x1, x4
 26c:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 270:	mov	x2, x0
 274:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 278:	add	x1, x1, #0x0
 27c:	mov	x0, x20
 280:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 284:	cbnz	w19, 2a8 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x58>
 288:	mov	x2, x21
 28c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 290:	add	x1, x1, #0x0
 294:	mov	x0, x20
 298:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 29c:	ldp	x21, x30, [sp, #16]
 2a0:	ldp	x19, x20, [sp], #32
 2a4:	ret
 2a8:	cmp	w19, #0x4
 2ac:	b.eq	354 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x104>  // b.none
 2b0:	b.hi	2f8 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xa8>  // b.pmore
 2b4:	cmp	w19, #0x2
 2b8:	b.eq	360 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x110>  // b.none
 2bc:	b.ls	2d4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x84>  // b.plast
 2c0:	cmp	w19, #0x3
 2c4:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xe4>  // b.any
 2c8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2cc:	add	x2, x1, #0x0
 2d0:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 2d4:	cmp	w19, #0x1
 2d8:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xe4>  // b.any
 2dc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2e0:	add	x2, x1, #0x0
 2e4:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2e8:	add	x1, x1, #0x0
 2ec:	mov	x0, x20
 2f0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2f4:	b	288 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x38>
 2f8:	cmp	w19, #0x7
 2fc:	b.eq	36c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x11c>  // b.none
 300:	b.ls	318 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xc8>  // b.plast
 304:	cmp	w19, #0x8
 308:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xe4>  // b.any
 30c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 310:	add	x2, x1, #0x0
 314:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 318:	cmp	w19, #0x5
 31c:	b.eq	378 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x128>  // b.none
 320:	cmp	w19, #0x6
 324:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xe4>  // b.any
 328:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 32c:	add	x2, x1, #0x0
 330:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 334:	mov	x4, #0x0                   	// #0
 338:	mov	x3, #0x0                   	// #0
 33c:	adrp	x2, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 340:	add	x2, x2, #0x0
 344:	mov	w1, #0x2a9                 	// #681
 348:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 34c:	add	x0, x0, #0x0
 350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 354:	adrp	x2, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 358:	add	x2, x2, #0x0
 35c:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 360:	adrp	x2, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 364:	add	x2, x2, #0x0
 368:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 36c:	adrp	x2, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 370:	add	x2, x2, #0x0
 374:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>
 378:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 37c:	add	x2, x1, #0x0
 380:	b	2e4 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x94>

0000000000000384 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>:
 384:	stp	x19, x20, [sp, #-96]!
 388:	stp	x21, x22, [sp, #16]
 38c:	stp	x25, x26, [sp, #48]
 390:	stp	x27, x28, [sp, #64]
 394:	str	x30, [sp, #80]
 398:	mov	x20, x0
 39c:	mov	x28, x1
 3a0:	mov	w26, w2
 3a4:	mov	x21, x3
 3a8:	and	w27, w4, #0xff
 3ac:	mov	x22, x5
 3b0:	mov	x25, x6
 3b4:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3b8:	add	x1, x1, #0x0
 3bc:	mov	x0, x28
 3c0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 3c4:	cbz	w0, 3d8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x54>
 3c8:	ldrb	w2, [x28]
 3cc:	cbz	w2, 6d0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x34c>
 3d0:	stp	x23, x24, [sp, #32]
 3d4:	b	3e8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x64>
 3d8:	stp	x23, x24, [sp, #32]
 3dc:	adrp	x28, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3e0:	add	x28, x28, #0x0
 3e4:	mov	w2, #0x20                  	// #32
 3e8:	adrp	x24, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3ec:	add	x24, x24, #0x0
 3f0:	adrp	x23, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3f4:	add	x23, x23, #0x0
 3f8:	b	41c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x98>
 3fc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 400:	add	x1, x1, #0x0
 404:	mov	x0, x20
 408:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 40c:	mov	x19, x28
 410:	add	x28, x19, #0x1
 414:	ldrb	w2, [x19, #1]
 418:	cbz	w2, 6cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x348>
 41c:	cmp	w2, #0x25
 420:	b.ne	3fc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x78>  // b.any
 424:	add	x19, x28, #0x1
 428:	ldrb	w1, [x28, #1]
 42c:	cmp	w1, #0x6c
 430:	b.eq	5c8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x244>  // b.none
 434:	b.hi	4f0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x16c>  // b.pmore
 438:	cmp	w1, #0x4d
 43c:	b.eq	670 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2ec>  // b.none
 440:	b.ls	478 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf4>  // b.plast
 444:	cmp	w1, #0x63
 448:	b.eq	5dc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x258>  // b.none
 44c:	cmp	w1, #0x66
 450:	b.ne	4c8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x144>  // b.any
 454:	mov	x1, x25
 458:	ldr	x0, [x21, #32]
 45c:	bl	0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 460:	mov	x2, x0
 464:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 468:	add	x1, x1, #0x0
 46c:	mov	x0, x20
 470:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 474:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 478:	cmp	w1, #0x46
 47c:	b.eq	5f0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x26c>  // b.none
 480:	cmp	w1, #0x4c
 484:	b.ne	4ac <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x128>  // b.any
 488:	ldr	x1, [x21, #48]
 48c:	cbz	x1, 63c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2b8>
 490:	mov	x5, x22
 494:	mov	w4, w27
 498:	ldr	w3, [x21, #60]
 49c:	ldr	w2, [x21, #56]
 4a0:	mov	x0, x20
 4a4:	bl	174 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 4a8:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 4ac:	cmp	w1, #0x25
 4b0:	b.ne	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x334>  // b.any
 4b4:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 4b8:	add	x1, x1, #0x0
 4bc:	mov	x0, x20
 4c0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 4c4:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 4c8:	cmp	w1, #0x53
 4cc:	b.ne	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x334>  // b.any
 4d0:	mov	x5, x22
 4d4:	mov	w4, w27
 4d8:	ldr	w3, [x21, #60]
 4dc:	ldr	w2, [x21, #56]
 4e0:	ldr	x1, [x21, #48]
 4e4:	mov	x0, x20
 4e8:	bl	174 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 4ec:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 4f0:	cmp	w1, #0x70
 4f4:	b.eq	598 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x214>  // b.none
 4f8:	b.ls	530 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1ac>  // b.plast
 4fc:	cmp	w1, #0x71
 500:	b.eq	5ac <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x228>  // b.none
 504:	cmp	w1, #0x73
 508:	b.ne	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x334>  // b.any
 50c:	mov	x1, x22
 510:	ldr	x0, [x21, #48]
 514:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 518:	mov	x2, x0
 51c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 520:	add	x1, x1, #0x0
 524:	mov	x0, x20
 528:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 52c:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 530:	cmp	w1, #0x6e
 534:	b.eq	580 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1fc>  // b.none
 538:	cmp	w1, #0x6f
 53c:	b.ne	554 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1d0>  // b.any
 540:	ldr	x2, [x21, #16]
 544:	mov	x1, x23
 548:	mov	x0, x20
 54c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 550:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 554:	cmp	w1, #0x6d
 558:	b.ne	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x334>  // b.any
 55c:	mov	x1, x22
 560:	ldr	x0, [x21, #8]
 564:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 568:	mov	x2, x0
 56c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 570:	add	x1, x1, #0x0
 574:	mov	x0, x20
 578:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 57c:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 580:	mov	w2, w26
 584:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 588:	add	x1, x1, #0x0
 58c:	mov	x0, x20
 590:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 594:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 598:	ldr	x2, [x21]
 59c:	mov	x1, x23
 5a0:	mov	x0, x20
 5a4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5a8:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 5ac:	ldr	x2, [x21, #40]
 5b0:	cmn	x2, #0x1
 5b4:	csel	x2, x2, xzr, ne  // ne = any
 5b8:	mov	x1, x23
 5bc:	mov	x0, x20
 5c0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5c4:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 5c8:	ldr	w2, [x21, #56]
 5cc:	mov	x1, x24
 5d0:	mov	x0, x20
 5d4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5d8:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 5dc:	ldr	w2, [x21, #60]
 5e0:	mov	x1, x24
 5e4:	mov	x0, x20
 5e8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5ec:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 5f0:	ldr	x0, [x21, #32]
 5f4:	cbz	x0, 410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 5f8:	mov	x1, x25
 5fc:	bl	0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 600:	mov	x2, x0
 604:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 608:	add	x1, x1, #0x0
 60c:	mov	x0, x20
 610:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 614:	ldr	x0, [x21, #48]
 618:	cbnz	x0, 410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 61c:	ldr	x2, [x21, #40]
 620:	cmn	x2, #0x1
 624:	b.eq	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>  // b.none
 628:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 62c:	add	x1, x1, #0x0
 630:	mov	x0, x20
 634:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 638:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 63c:	ldr	x1, [x21, #8]
 640:	cbz	x1, 65c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2d8>
 644:	mov	x4, x22
 648:	ldr	w3, [x21, #24]
 64c:	ldr	x2, [x21, #16]
 650:	mov	x0, x20
 654:	bl	250 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 658:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 65c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 660:	add	x1, x1, #0x0
 664:	mov	x0, x20
 668:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 66c:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 670:	ldr	x2, [x21]
 674:	tbnz	x2, #60, 410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 678:	ldr	x0, [x21, #8]
 67c:	cbz	x0, 6a4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x320>
 680:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 684:	adrp	x4, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 688:	add	x4, x4, #0x0
 68c:	ldr	w3, [x21, #24]
 690:	ldr	x2, [x21, #16]
 694:	mov	x1, x0
 698:	mov	x0, x20
 69c:	bl	250 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 6a0:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 6a4:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 6a8:	add	x1, x1, #0x0
 6ac:	mov	x0, x20
 6b0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 6b4:	b	410 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 6b8:	mov	w2, w1
 6bc:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 6c0:	add	x0, x0, #0x0
 6c4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 6c8:	bl	0 <_ZN11__sanitizer3DieEv>
 6cc:	ldp	x23, x24, [sp, #32]
 6d0:	ldp	x21, x22, [sp, #16]
 6d4:	ldp	x25, x26, [sp, #48]
 6d8:	ldp	x27, x28, [sp, #64]
 6dc:	ldr	x30, [sp, #80]
 6e0:	ldp	x19, x20, [sp], #96
 6e4:	ret

sanitizer_stacktrace_sparc.o:     file format elf64-littleaarch64


sanitizer_stoptheworld_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>:
       0:	ldr	x0, [x0, #24]
       4:	ret

0000000000000008 <_ZNK11__sanitizer25SuspendedThreadsListLinux13RegisterCountEv>:
       8:	mov	x0, #0x22                  	// #34
       c:	ret

0000000000000010 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>:
      10:	ldr	x4, [x0, #24]
      14:	cmp	x1, x4
      18:	b.cs	28 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm+0x18>  // b.hs, b.nlast
      1c:	ldr	x0, [x0, #8]
      20:	ldr	x0, [x0, x1, lsl #3]
      24:	ret
      28:	str	x30, [sp, #-16]!
      2c:	mov	x3, x1
      30:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      34:	add	x2, x2, #0x0
      38:	mov	w1, #0x202                 	// #514
      3c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      40:	add	x0, x0, #0x0
      44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000048 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_>:
      48:	stp	x19, x20, [sp, #-336]!
      4c:	stp	x21, x30, [sp, #16]
      50:	mov	x20, x2
      54:	mov	x21, x3
      58:	ldr	x2, [x0]
      5c:	ldr	x2, [x2, #24]
      60:	blr	x2
      64:	mov	x19, x0
      68:	add	x0, sp, #0x40
      6c:	str	x0, [sp, #40]
      70:	mov	x0, #0x110                 	// #272
      74:	str	x0, [sp, #48]
      78:	add	x3, sp, #0x28
      7c:	mov	x2, #0x1                   	// #1
      80:	mov	w1, w19
      84:	mov	w0, #0x4204                	// #16900
      88:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
      8c:	add	x1, sp, #0x3c
      90:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
      94:	and	w0, w0, #0xff
      98:	cbz	w0, dc <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x94>
      9c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
      a0:	ldr	x0, [x0]
      a4:	ldr	w0, [x0]
      a8:	cbnz	w0, c4 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x7c>
      ac:	ldr	w0, [sp, #60]
      b0:	cmp	w0, #0x3
      b4:	csetm	w0, eq  // eq = none
      b8:	ldp	x21, x30, [sp, #16]
      bc:	ldp	x19, x20, [sp], #336
      c0:	ret
      c4:	ldr	w2, [sp, #60]
      c8:	mov	w1, w19
      cc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      d0:	add	x0, x0, #0x0
      d4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
      d8:	b	ac <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x64>
      dc:	ldr	x0, [sp, #312]
      e0:	str	x0, [x21]
      e4:	mov	x2, #0x110                 	// #272
      e8:	add	x1, sp, #0x40
      ec:	mov	x0, x20
      f0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
      f4:	mov	w0, #0x1                   	// #1
      f8:	b	b8 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x70>

00000000000000fc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>:
      fc:	stp	x19, x20, [sp, #-96]!
     100:	stp	x21, x22, [sp, #16]
     104:	str	x30, [sp, #64]
     108:	mov	x21, x0
     10c:	add	x22, x0, #0x8
     110:	ldr	x0, [x0, #32]
     114:	cbz	x0, 1cc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xd0>
     118:	stp	x23, x24, [sp, #32]
     11c:	stp	x25, x26, [sp, #48]
     120:	mov	x20, #0x0                   	// #0
     124:	add	x23, sp, #0x5c
     128:	adrp	x24, 0 <_ZN11__sanitizer17current_verbosityE>
     12c:	ldr	x25, [x24]
     130:	adrp	x26, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     134:	add	x26, x26, #0x0
     138:	b	154 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x58>
     13c:	ldr	w0, [x25]
     140:	cbnz	w0, 1b0 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xb4>
     144:	add	x20, x20, #0x1
     148:	ldr	x0, [x21, #32]
     14c:	cmp	x20, x0
     150:	b.cs	1c4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xc8>  // b.hs, b.nlast
     154:	mov	x1, x20
     158:	mov	x0, x22
     15c:	bl	10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
     160:	mov	x19, x0
     164:	mov	x3, #0x0                   	// #0
     168:	mov	x2, #0x0                   	// #0
     16c:	mov	w1, w0
     170:	mov	w0, #0x11                  	// #17
     174:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     178:	mov	x1, x23
     17c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     180:	and	w0, w0, #0xff
     184:	cbnz	w0, 13c <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x40>
     188:	ldr	x0, [x24]
     18c:	ldr	w0, [x0]
     190:	sxtw	x0, w0
     194:	cmp	x0, #0x1
     198:	b.ls	144 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x48>  // b.plast
     19c:	mov	w1, w19
     1a0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     1a4:	add	x0, x0, #0x0
     1a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     1ac:	b	144 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x48>
     1b0:	ldr	w2, [sp, #92]
     1b4:	mov	w1, w19
     1b8:	mov	x0, x26
     1bc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     1c0:	b	144 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x48>
     1c4:	ldp	x23, x24, [sp, #32]
     1c8:	ldp	x25, x26, [sp, #48]
     1cc:	ldp	x21, x22, [sp, #16]
     1d0:	ldr	x30, [sp, #64]
     1d4:	ldp	x19, x20, [sp], #96
     1d8:	ret

00000000000001dc <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>:
     1dc:	stp	x19, x20, [sp, #-48]!
     1e0:	stp	x21, x22, [sp, #16]
     1e4:	str	x30, [sp, #32]
     1e8:	mov	x20, x0
     1ec:	add	x21, x0, #0x8
     1f0:	ldr	x0, [x0, #32]
     1f4:	cbz	x0, 230 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x54>
     1f8:	mov	x19, #0x0                   	// #0
     1fc:	mov	w22, #0x8                   	// #8
     200:	mov	x1, x19
     204:	mov	x0, x21
     208:	bl	10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
     20c:	mov	x3, #0x0                   	// #0
     210:	mov	x2, #0x0                   	// #0
     214:	mov	w1, w0
     218:	mov	w0, w22
     21c:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     220:	add	x19, x19, #0x1
     224:	ldr	x1, [x20, #32]
     228:	cmp	x19, x1
     22c:	b.cc	200 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x24>  // b.lo, b.ul, b.last
     230:	ldp	x21, x22, [sp, #16]
     234:	ldr	x30, [sp, #32]
     238:	ldp	x19, x20, [sp], #48
     23c:	ret

0000000000000240 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv>:
     240:	stp	x19, x20, [sp, #-96]!
     244:	str	x30, [sp, #16]
     248:	mov	w19, w0
     24c:	str	x1, [sp, #40]
     250:	str	x2, [sp, #48]
     254:	add	x20, sp, #0x28
     258:	mov	x0, x20
     25c:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
     260:	str	x0, [sp, #56]
     264:	mov	x0, x20
     268:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
     26c:	strb	w0, [sp, #88]
     270:	mov	x0, x20
     274:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
     278:	str	w0, [sp, #92]
     27c:	mov	x0, x20
     280:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
     284:	ldr	x4, [sp, #72]
     288:	ldr	x3, [sp, #64]
     28c:	ldr	x2, [sp, #56]
     290:	mov	w1, w19
     294:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     298:	add	x0, x0, #0x0
     29c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     2a0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     2a4:	ldr	x20, [x0]
     2a8:	cbz	x20, 2e4 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xa4>
     2ac:	cmp	w19, #0x6
     2b0:	b.eq	2f4 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xb4>  // b.none
     2b4:	mov	x0, x20
     2b8:	bl	fc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     2bc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     2c0:	add	x0, x0, #0x0
     2c4:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
     2c8:	and	w0, w0, #0xff
     2cc:	cbz	w0, 300 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xc0>
     2d0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     2d4:	str	xzr, [x0]
     2d8:	ldr	x0, [x20]
     2dc:	mov	x1, #0x1                   	// #1
     2e0:	str	x1, [x0, #104]
     2e4:	cmp	w19, #0x6
     2e8:	cset	w0, ne  // ne = any
     2ec:	add	w0, w0, #0x1
     2f0:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     2f4:	mov	x0, x20
     2f8:	bl	1dc <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
     2fc:	b	2bc <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0x7c>
     300:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     304:	add	x0, x0, #0x0
     308:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     30c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000310 <_ZN11__sanitizerL23TracerThreadDieCallbackEv>:
     310:	stp	x19, x30, [sp, #-16]!
     314:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     318:	ldr	x19, [x0]
     31c:	cbz	x19, 338 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x28>
     320:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     324:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     328:	ldr	x1, [x1]
     32c:	ldr	x1, [x1]
     330:	cmp	x0, x1
     334:	b.eq	340 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x30>  // b.none
     338:	ldp	x19, x30, [sp], #16
     33c:	ret
     340:	mov	x0, x19
     344:	bl	1dc <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
     348:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     34c:	str	xzr, [x0]
     350:	b	338 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x28>

0000000000000354 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>:
     354:	stp	x19, x20, [sp, #-192]!
     358:	stp	x21, x22, [sp, #16]
     35c:	stp	x23, x24, [sp, #32]
     360:	str	x30, [sp, #48]
     364:	mov	x20, x0
     368:	mov	x19, x1
     36c:	mov	x4, #0x0                   	// #0
     370:	mov	x3, #0x0                   	// #0
     374:	mov	x2, #0x0                   	// #0
     378:	mov	x1, #0x0                   	// #0
     37c:	mov	w0, #0x3                   	// #3
     380:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     384:	mov	x22, x0
     388:	cbz	w0, 4f0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x19c>
     38c:	add	x0, sp, #0x58
     390:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
     394:	str	x20, [sp, #72]
     398:	str	x19, [sp, #80]
     39c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     3a0:	str	x0, [sp, #184]
     3a4:	str	xzr, [sp, #176]
     3a8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     3ac:	ldr	x0, [x0]
     3b0:	ldr	x0, [x0]
     3b4:	cbz	x0, 50c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1b8>
     3b8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     3bc:	ldr	x0, [x0]
     3c0:	ldr	x19, [x0]
     3c4:	add	x24, x19, #0x200, lsl #12
     3c8:	mov	w2, #0x0                   	// #0
     3cc:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     3d0:	add	x1, x1, #0x0
     3d4:	mov	x0, x24
     3d8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     3dc:	mov	x23, x0
     3e0:	mov	x1, x19
     3e4:	bl	0 <_ZN11__sanitizer16MprotectNoAccessEmm>
     3e8:	and	w0, w0, #0xff
     3ec:	cbz	w0, 520 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1cc>
     3f0:	add	x0, sp, #0x58
     3f4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     3f8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     3fc:	add	x0, x0, #0x0
     400:	add	x0, x0, #0x8
     404:	bl	0 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
     408:	mov	x19, #0x0                   	// #0
     40c:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     410:	add	x21, x21, #0x0
     414:	adrp	x20, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     418:	add	x20, x20, #0x0
     41c:	add	x20, x20, #0x8
     420:	ldr	w1, [x21, x19, lsl #2]
     424:	mov	x0, x20
     428:	bl	0 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
     42c:	add	x19, x19, #0x1
     430:	cmp	x19, #0x7
     434:	b.ne	420 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xcc>  // b.any
     438:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     43c:	add	x1, x1, #0x0
     440:	add	x2, x1, #0x88
     444:	add	x1, x1, #0x8
     448:	mov	w0, #0x0                   	// #0
     44c:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     450:	sxtw	x3, w0
     454:	cbnz	w0, 540 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1ec>
     458:	mov	x6, #0x0                   	// #0
     45c:	mov	x5, #0x0                   	// #0
     460:	mov	x4, #0x0                   	// #0
     464:	add	x3, sp, #0x48
     468:	mov	w2, #0x700                 	// #1792
     46c:	movk	w2, #0x80, lsl #16
     470:	add	x1, x23, x24
     474:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     478:	add	x0, x0, #0x0
     47c:	bl	0 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>
     480:	mov	x19, x0
     484:	mov	x2, #0x0                   	// #0
     488:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     48c:	add	x1, x1, #0x0
     490:	add	x1, x1, #0x88
     494:	mov	w0, #0x2                   	// #2
     498:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     49c:	str	wzr, [sp, #68]
     4a0:	add	x1, sp, #0x44
     4a4:	mov	x0, x19
     4a8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     4ac:	and	w0, w0, #0xff
     4b0:	cbz	w0, 570 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x21c>
     4b4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     4b8:	ldr	x0, [x0]
     4bc:	ldr	w0, [x0]
     4c0:	cbnz	w0, 55c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x208>
     4c4:	add	x0, sp, #0x58
     4c8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     4cc:	mov	x1, x24
     4d0:	mov	x0, x23
     4d4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     4d8:	cbz	w22, 634 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2e0>
     4dc:	ldp	x21, x22, [sp, #16]
     4e0:	ldp	x23, x24, [sp, #32]
     4e4:	ldr	x30, [sp, #48]
     4e8:	ldp	x19, x20, [sp], #192
     4ec:	ret
     4f0:	mov	x4, #0x0                   	// #0
     4f4:	mov	x3, #0x0                   	// #0
     4f8:	mov	x2, #0x0                   	// #0
     4fc:	mov	x1, #0x1                   	// #1
     500:	mov	w0, #0x4                   	// #4
     504:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     508:	b	38c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x38>
     50c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     510:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     514:	ldr	x1, [x1]
     518:	str	x0, [x1]
     51c:	b	3b8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x64>
     520:	mov	x4, #0x0                   	// #0
     524:	mov	x3, #0x0                   	// #0
     528:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     52c:	add	x2, x2, #0x0
     530:	mov	w1, #0x152                 	// #338
     534:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     538:	add	x0, x0, #0x0
     53c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     540:	mov	x4, #0x0                   	// #0
     544:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     548:	add	x2, x2, #0x0
     54c:	mov	w1, #0x1ac                 	// #428
     550:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     554:	add	x0, x0, #0x0
     558:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     55c:	ldr	w1, [sp, #68]
     560:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     564:	add	x0, x0, #0x0
     568:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     56c:	b	4c4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x170>
     570:	adrp	x0, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     574:	ldr	x0, [x0]
     578:	str	x19, [x0]
     57c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     580:	adrp	x1, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
     584:	ldr	x1, [x1]
     588:	str	x0, [x1]
     58c:	mov	x4, #0x0                   	// #0
     590:	mov	x3, #0x0                   	// #0
     594:	mov	x2, #0x0                   	// #0
     598:	mov	x1, x19
     59c:	mov	w0, #0x6d61                	// #28001
     5a0:	movk	w0, #0x5961, lsl #16
     5a4:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     5a8:	add	x0, sp, #0x58
     5ac:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     5b0:	ldr	x0, [sp, #176]
     5b4:	cbnz	x0, 5c4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x270>
     5b8:	bl	0 <sched_yield>
     5bc:	ldr	x1, [sp, #176]
     5c0:	cbz	x1, 5b8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x264>
     5c4:	mov	w21, #0x40000000            	// #1073741824
     5c8:	add	x20, sp, #0x44
     5cc:	mov	w2, w21
     5d0:	mov	x1, #0x0                   	// #0
     5d4:	mov	w0, w19
     5d8:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     5dc:	mov	x1, x20
     5e0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     5e4:	and	w0, w0, #0xff
     5e8:	cbz	w0, 608 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2b4>
     5ec:	ldr	w1, [sp, #68]
     5f0:	cmp	w1, #0x4
     5f4:	b.eq	5cc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x278>  // b.none
     5f8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     5fc:	ldr	x0, [x0]
     600:	ldr	w0, [x0]
     604:	cbnz	w0, 624 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2d0>
     608:	adrp	x0, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     60c:	ldr	x0, [x0]
     610:	str	xzr, [x0]
     614:	adrp	x0, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
     618:	ldr	x0, [x0]
     61c:	str	xzr, [x0]
     620:	b	4cc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x178>
     624:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     628:	add	x0, x0, #0x0
     62c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     630:	b	608 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2b4>
     634:	mov	x4, #0x0                   	// #0
     638:	mov	x3, #0x0                   	// #0
     63c:	mov	x2, #0x0                   	// #0
     640:	mov	x1, #0x0                   	// #0
     644:	mov	w0, #0x4                   	// #4
     648:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     64c:	b	4dc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x188>

0000000000000650 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>:
     650:	ldr	x3, [x0, #24]
     654:	cbz	x3, 680 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x30>
     658:	ldr	x4, [x0, #8]
     65c:	mov	x0, #0x0                   	// #0
     660:	ldr	x2, [x4, x0, lsl #3]
     664:	cmp	x2, x1
     668:	b.eq	688 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x38>  // b.none
     66c:	add	x0, x0, #0x1
     670:	cmp	x0, x3
     674:	b.ne	660 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x10>  // b.any
     678:	mov	w0, #0x0                   	// #0
     67c:	b	68c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x3c>
     680:	mov	w0, #0x0                   	// #0
     684:	b	68c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x3c>
     688:	mov	w0, #0x1                   	// #1
     68c:	ret

0000000000000690 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy>:
     690:	stp	x19, x20, [sp, #-64]!
     694:	str	x30, [sp, #32]
     698:	mov	x19, x0
     69c:	str	x1, [sp, #56]
     6a0:	ldr	x3, [x0, #24]
     6a4:	ldr	x0, [x0, #16]
     6a8:	lsr	x4, x0, #3
     6ac:	cmp	x3, x0, lsr #3
     6b0:	b.hi	6e8 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x58>  // b.pmore
     6b4:	cmp	x3, x4
     6b8:	b.eq	704 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x74>  // b.none
     6bc:	ldr	x3, [x19, #8]
     6c0:	ldr	x0, [x19, #24]
     6c4:	add	x2, x0, #0x1
     6c8:	str	x2, [x19, #24]
     6cc:	mov	x2, #0x8                   	// #8
     6d0:	add	x1, sp, #0x38
     6d4:	add	x0, x3, x0, lsl #3
     6d8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     6dc:	ldr	x30, [sp, #32]
     6e0:	ldp	x19, x20, [sp], #64
     6e4:	ret
     6e8:	stp	x21, x22, [sp, #16]
     6ec:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     6f0:	add	x2, x2, #0x0
     6f4:	mov	w1, #0x1be                 	// #446
     6f8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     6fc:	add	x0, x0, #0x0
     700:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     704:	stp	x21, x22, [sp, #16]
     708:	add	x0, x3, #0x1
     70c:	tst	x3, x0
     710:	b.eq	81c <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x18c>  // b.none
     714:	clz	x4, x0
     718:	mov	w1, #0x3f                  	// #63
     71c:	sub	w1, w1, w4
     720:	add	w20, w1, #0x1
     724:	mov	x4, #0x1                   	// #1
     728:	lsl	x4, x4, x20
     72c:	cmp	x0, x4
     730:	b.cs	7c8 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x138>  // b.hs, b.nlast
     734:	mov	x2, #0x1                   	// #1
     738:	lsl	x1, x2, x1
     73c:	cmp	x0, x1
     740:	b.ls	7e4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x154>  // b.plast
     744:	cmp	x3, x4
     748:	b.hi	804 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x174>  // b.pmore
     74c:	lsl	x20, x4, #3
     750:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     754:	ldr	x0, [x0]
     758:	ldr	x0, [x0]
     75c:	cbz	x0, 824 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x194>
     760:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     764:	ldr	x0, [x0]
     768:	ldr	x0, [x0]
     76c:	sub	x1, x0, #0x1
     770:	tst	x0, x1
     774:	b.ne	838 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x1a8>  // b.any
     778:	add	x20, x20, x1
     77c:	neg	x0, x0
     780:	and	x20, x20, x0
     784:	mov	w2, #0x0                   	// #0
     788:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     78c:	add	x1, x1, #0x0
     790:	mov	x0, x20
     794:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     798:	mov	x22, x0
     79c:	ldr	x2, [x19, #24]
     7a0:	lsl	x2, x2, #3
     7a4:	ldr	x1, [x19, #8]
     7a8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     7ac:	ldr	x1, [x19, #16]
     7b0:	ldr	x0, [x19, #8]
     7b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     7b8:	str	x22, [x19, #8]
     7bc:	str	x20, [x19, #16]
     7c0:	ldp	x21, x22, [sp, #16]
     7c4:	b	6bc <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x2c>
     7c8:	mov	x3, x0
     7cc:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     7d0:	add	x2, x2, #0x0
     7d4:	mov	w1, #0x17b                 	// #379
     7d8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     7dc:	add	x0, x0, #0x0
     7e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7e4:	mov	x4, x1
     7e8:	mov	x3, x0
     7ec:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     7f0:	add	x2, x2, #0x0
     7f4:	mov	w1, #0x17c                 	// #380
     7f8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     7fc:	add	x0, x0, #0x0
     800:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     804:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     808:	add	x2, x2, #0x0
     80c:	mov	w1, #0x1fd                 	// #509
     810:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     814:	add	x0, x0, #0x0
     818:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     81c:	mov	x4, x0
     820:	b	74c <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0xbc>
     824:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     828:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     82c:	ldr	x1, [x1]
     830:	str	x0, [x1]
     834:	b	760 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0xd0>
     838:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     83c:	add	x0, x0, #0x0
     840:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     844:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000848 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>:
     848:	stp	x19, x20, [sp, #-96]!
     84c:	stp	x21, x22, [sp, #16]
     850:	str	x30, [sp, #72]
     854:	mov	x20, x1
     858:	add	x21, x0, #0x8
     85c:	mov	x0, x21
     860:	bl	650 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>
     864:	ands	w19, w0, #0xff
     868:	b.eq	884 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x3c>  // b.none
     86c:	mov	w19, #0x0                   	// #0
     870:	mov	w0, w19
     874:	ldp	x21, x22, [sp, #16]
     878:	ldr	x30, [sp, #72]
     87c:	ldp	x19, x20, [sp], #96
     880:	ret
     884:	stp	x23, x24, [sp, #32]
     888:	mov	w23, w20
     88c:	mov	x3, #0x0                   	// #0
     890:	mov	x2, #0x0                   	// #0
     894:	mov	w1, w20
     898:	mov	w0, #0x10                  	// #16
     89c:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     8a0:	add	x1, sp, #0x5c
     8a4:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     8a8:	ands	w22, w0, #0xff
     8ac:	b.ne	964 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x11c>  // b.any
     8b0:	stp	x25, x26, [sp, #48]
     8b4:	str	x27, [sp, #64]
     8b8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     8bc:	ldr	x0, [x0]
     8c0:	ldr	w0, [x0]
     8c4:	sxtw	x0, w0
     8c8:	cmp	x0, #0x1
     8cc:	b.hi	998 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x150>  // b.pmore
     8d0:	add	x25, sp, #0x54
     8d4:	mov	w24, #0x40000000            	// #1073741824
     8d8:	add	x19, sp, #0x58
     8dc:	mov	w26, #0x7                   	// #7
     8e0:	mov	w2, w24
     8e4:	mov	x1, x25
     8e8:	mov	w0, w23
     8ec:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     8f0:	mov	x27, x0
     8f4:	mov	x1, x19
     8f8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     8fc:	and	w1, w0, #0xff
     900:	cbz	w1, 910 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xc8>
     904:	ldr	w0, [sp, #88]
     908:	cmp	w0, #0x4
     90c:	b.eq	8e0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x98>  // b.none
     910:	mov	x1, x19
     914:	mov	x0, x27
     918:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     91c:	and	w0, w0, #0xff
     920:	cbnz	w0, 9ac <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x164>
     924:	ldr	w1, [sp, #84]
     928:	and	w0, w1, #0xff
     92c:	cmp	w0, #0x7f
     930:	b.ne	944 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xfc>  // b.any
     934:	asr	w3, w1, #8
     938:	ubfx	x1, x1, #8, #8
     93c:	cmp	w1, #0x13
     940:	b.ne	9fc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1b4>  // b.any
     944:	mov	x1, x20
     948:	mov	x0, x21
     94c:	bl	690 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy>
     950:	mov	w19, #0x1                   	// #1
     954:	ldp	x23, x24, [sp, #32]
     958:	ldp	x25, x26, [sp, #48]
     95c:	ldr	x27, [sp, #64]
     960:	b	870 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>
     964:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     968:	ldr	x0, [x0]
     96c:	ldr	w0, [x0]
     970:	cbnz	w0, 97c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x134>
     974:	ldp	x23, x24, [sp, #32]
     978:	b	870 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>
     97c:	ldr	w2, [sp, #92]
     980:	mov	x1, x20
     984:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     988:	add	x0, x0, #0x0
     98c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     990:	ldp	x23, x24, [sp, #32]
     994:	b	870 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>
     998:	mov	x1, x20
     99c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     9a0:	add	x0, x0, #0x0
     9a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     9a8:	b	8d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x88>
     9ac:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     9b0:	ldr	x0, [x0]
     9b4:	ldr	w0, [x0]
     9b8:	cbnz	w0, 9e4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x19c>
     9bc:	mov	x3, #0x0                   	// #0
     9c0:	mov	x2, #0x0                   	// #0
     9c4:	mov	w1, w20
     9c8:	mov	w0, #0x11                  	// #17
     9cc:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     9d0:	mov	w19, w22
     9d4:	ldp	x23, x24, [sp, #32]
     9d8:	ldp	x25, x26, [sp, #48]
     9dc:	ldr	x27, [sp, #64]
     9e0:	b	870 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>
     9e4:	ldr	w2, [sp, #88]
     9e8:	mov	x1, x20
     9ec:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     9f0:	add	x0, x0, #0x0
     9f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     9f8:	b	9bc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x174>
     9fc:	and	x3, x3, #0xff
     a00:	mov	x2, #0x0                   	// #0
     a04:	mov	w1, w23
     a08:	mov	w0, w26
     a0c:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     a10:	b	8e0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x98>

0000000000000a14 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>:
     a14:	stp	x19, x20, [sp, #-128]!
     a18:	stp	x21, x22, [sp, #16]
     a1c:	stp	x23, x24, [sp, #32]
     a20:	stp	x25, x30, [sp, #48]
     a24:	mov	x21, x0
     a28:	ldr	w1, [x0, #40]
     a2c:	add	x0, sp, #0x60
     a30:	bl	0 <_ZN11__sanitizer12ThreadListerC1Ei>
     a34:	str	xzr, [sp, #80]
     a38:	str	xzr, [sp, #88]
     a3c:	str	xzr, [sp, #72]
     a40:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a44:	ldr	x0, [x0]
     a48:	ldr	x0, [x0]
     a4c:	cbz	x0, ac8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xb4>
     a50:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a54:	ldr	x0, [x0]
     a58:	ldr	x0, [x0]
     a5c:	sub	x1, x0, #0x1
     a60:	tst	x1, x0
     a64:	b.ne	adc <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xc8>  // b.any
     a68:	add	x19, x0, #0x7
     a6c:	neg	x0, x0
     a70:	and	x19, x19, x0
     a74:	mov	w2, #0x0                   	// #0
     a78:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     a7c:	add	x1, x1, #0x0
     a80:	mov	x0, x19
     a84:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a88:	mov	x20, x0
     a8c:	ldr	x2, [sp, #88]
     a90:	lsl	x2, x2, #3
     a94:	ldr	x1, [sp, #72]
     a98:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a9c:	ldr	x1, [sp, #80]
     aa0:	ldr	x0, [sp, #72]
     aa4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     aa8:	str	x20, [sp, #72]
     aac:	str	x19, [sp, #80]
     ab0:	cmp	x19, #0x3ff
     ab4:	b.ls	aec <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xd8>  // b.plast
     ab8:	mov	w23, #0x0                   	// #0
     abc:	add	x25, sp, #0x48
     ac0:	add	x24, sp, #0x60
     ac4:	b	c4c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x238>
     ac8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     acc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ad0:	ldr	x1, [x1]
     ad4:	str	x0, [x1]
     ad8:	b	a50 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x3c>
     adc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ae0:	add	x0, x0, #0x0
     ae4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ae8:	bl	0 <_ZN11__sanitizer3DieEv>
     aec:	ldr	x3, [sp, #88]
     af0:	cmp	x3, #0x80
     af4:	b.hi	b6c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x158>  // b.pmore
     af8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     afc:	ldr	x0, [x0]
     b00:	ldr	x0, [x0]
     b04:	cbz	x0, b88 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x174>
     b08:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     b0c:	ldr	x0, [x0]
     b10:	ldr	x0, [x0]
     b14:	sub	x1, x0, #0x1
     b18:	tst	x1, x0
     b1c:	b.ne	b9c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x188>  // b.any
     b20:	add	x19, x0, #0x3ff
     b24:	neg	x0, x0
     b28:	and	x19, x19, x0
     b2c:	mov	w2, #0x0                   	// #0
     b30:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b34:	add	x1, x1, #0x0
     b38:	mov	x0, x19
     b3c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     b40:	mov	x20, x0
     b44:	ldr	x2, [sp, #88]
     b48:	lsl	x2, x2, #3
     b4c:	ldr	x1, [sp, #72]
     b50:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b54:	ldr	x1, [sp, #80]
     b58:	ldr	x0, [sp, #72]
     b5c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b60:	str	x20, [sp, #72]
     b64:	str	x19, [sp, #80]
     b68:	b	ab8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xa4>
     b6c:	mov	x4, #0x80                  	// #128
     b70:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b74:	add	x2, x2, #0x0
     b78:	mov	w1, #0x1fd                 	// #509
     b7c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b80:	add	x0, x0, #0x0
     b84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b88:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     b8c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     b90:	ldr	x1, [x1]
     b94:	str	x0, [x1]
     b98:	b	b08 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xf4>
     b9c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ba0:	add	x0, x0, #0x0
     ba4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ba8:	bl	0 <_ZN11__sanitizer3DieEv>
     bac:	mov	x0, x21
     bb0:	bl	fc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     bb4:	mov	w19, #0x0                   	// #0
     bb8:	ldr	x1, [sp, #80]
     bbc:	ldr	x0, [sp, #72]
     bc0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     bc4:	add	x0, sp, #0x60
     bc8:	bl	0 <_ZN11__sanitizer12ThreadListerD1Ev>
     bcc:	mov	w0, w19
     bd0:	ldp	x21, x22, [sp, #16]
     bd4:	ldp	x23, x24, [sp, #32]
     bd8:	ldp	x25, x30, [sp, #48]
     bdc:	ldp	x19, x20, [sp], #128
     be0:	ret
     be4:	mov	w20, #0x1                   	// #1
     be8:	b	c30 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x21c>
     bec:	ldr	x0, [x21, #32]
     bf0:	cmp	x0, #0x0
     bf4:	cset	w19, ne  // ne = any
     bf8:	b	bb8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1a4>
     bfc:	ldr	x19, [sp, #72]
     c00:	ldr	x22, [sp, #88]
     c04:	add	x22, x19, x22, lsl #3
     c08:	cmp	x19, x22
     c0c:	b.eq	bec <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1d8>  // b.none
     c10:	mov	w20, #0x0                   	// #0
     c14:	ldr	x1, [x19], #8
     c18:	mov	x0, x21
     c1c:	bl	848 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>
     c20:	ands	w0, w0, #0xff
     c24:	csel	w20, w20, w0, eq  // eq = none
     c28:	cmp	x22, x19
     c2c:	b.ne	c14 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x200>  // b.any
     c30:	add	w23, w23, #0x1
     c34:	cmp	w23, #0x1d
     c38:	cset	w0, gt
     c3c:	eor	w20, w20, #0x1
     c40:	orr	w20, w0, w20
     c44:	tst	w20, #0xff
     c48:	b.ne	bec <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1d8>  // b.any
     c4c:	mov	x1, x25
     c50:	mov	x0, x24
     c54:	bl	0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>
     c58:	cbz	w0, bac <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x198>
     c5c:	cmp	w0, #0x1
     c60:	b.ne	bfc <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1e8>  // b.any
     c64:	ldr	x19, [sp, #72]
     c68:	ldr	x22, [sp, #88]
     c6c:	add	x22, x19, x22, lsl #3
     c70:	cmp	x22, x19
     c74:	b.eq	be4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1d0>  // b.none
     c78:	mov	w20, #0x1                   	// #1
     c7c:	b	c14 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x200>

0000000000000c80 <_ZN11__sanitizerL12TracerThreadEPv>:
     c80:	stp	x19, x20, [sp, #-304]!
     c84:	stp	x21, x22, [sp, #16]
     c88:	stp	x23, x24, [sp, #32]
     c8c:	stp	x25, x26, [sp, #48]
     c90:	stp	x27, x30, [sp, #64]
     c94:	mov	x20, x0
     c98:	mov	x4, #0x0                   	// #0
     c9c:	mov	x3, #0x0                   	// #0
     ca0:	mov	x2, #0x0                   	// #0
     ca4:	mov	x1, #0x9                   	// #9
     ca8:	mov	w0, #0x1                   	// #1
     cac:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     cb0:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     cb4:	ldr	x1, [x20, #112]
     cb8:	cmp	x0, x1
     cbc:	b.ne	ecc <_ZN11__sanitizerL12TracerThreadEPv+0x24c>  // b.any
     cc0:	add	x19, x20, #0x10
     cc4:	mov	x0, x19
     cc8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     ccc:	mov	x0, x19
     cd0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     cd4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     cd8:	add	x0, x0, #0x0
     cdc:	bl	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
     ce0:	and	w0, w0, #0xff
     ce4:	cbz	w0, ed4 <_ZN11__sanitizerL12TracerThreadEPv+0x254>
     ce8:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     cec:	mov	x21, x0
     cf0:	str	x20, [sp, #256]
     cf4:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     cf8:	add	x1, x1, #0x0
     cfc:	str	x1, [sp, #264]
     d00:	str	xzr, [sp, #280]
     d04:	str	xzr, [sp, #288]
     d08:	str	xzr, [sp, #272]
     d0c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d10:	ldr	x1, [x1]
     d14:	ldr	x0, [x1]
     d18:	cbz	x0, ee4 <_ZN11__sanitizerL12TracerThreadEPv+0x264>
     d1c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d20:	ldr	x0, [x0]
     d24:	ldr	x1, [x0]
     d28:	sub	x0, x1, #0x1
     d2c:	tst	x0, x1
     d30:	b.ne	ef8 <_ZN11__sanitizerL12TracerThreadEPv+0x278>  // b.any
     d34:	add	x19, x1, #0x7
     d38:	neg	x1, x1
     d3c:	and	x19, x19, x1
     d40:	mov	w2, #0x0                   	// #0
     d44:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d48:	add	x1, x1, #0x0
     d4c:	mov	x0, x19
     d50:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     d54:	mov	x22, x0
     d58:	ldr	x2, [sp, #288]
     d5c:	lsl	x2, x2, #3
     d60:	ldr	x1, [sp, #272]
     d64:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     d68:	ldr	x1, [sp, #280]
     d6c:	ldr	x0, [sp, #272]
     d70:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d74:	str	x22, [sp, #272]
     d78:	str	x19, [sp, #280]
     d7c:	mov	x0, #0x1fff                	// #8191
     d80:	cmp	x19, x0
     d84:	b.ls	f08 <_ZN11__sanitizerL12TracerThreadEPv+0x288>  // b.plast
     d88:	str	w21, [sp, #296]
     d8c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d90:	add	x1, sp, #0x100
     d94:	str	x1, [x0]
     d98:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     d9c:	ldr	x0, [x0]
     da0:	ldr	x0, [x0]
     da4:	cbz	x0, fcc <_ZN11__sanitizerL12TracerThreadEPv+0x34c>
     da8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     dac:	ldr	x0, [x0]
     db0:	ldr	x0, [x0]
     db4:	sub	x19, x0, #0x1
     db8:	ands	x19, x19, x0
     dbc:	b.ne	fe0 <_ZN11__sanitizerL12TracerThreadEPv+0x360>  // b.any
     dc0:	mov	x21, #0x1fff                	// #8191
     dc4:	add	x26, x0, x21
     dc8:	neg	x0, x0
     dcc:	and	x26, x26, x0
     dd0:	mov	w2, #0x0                   	// #0
     dd4:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     dd8:	add	x1, x1, #0x0
     ddc:	mov	x0, x26
     de0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     de4:	mov	x25, x0
     de8:	mov	x2, #0x0                   	// #0
     dec:	mov	x1, #0x0                   	// #0
     df0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     df4:	mov	x1, #0x0                   	// #0
     df8:	mov	x0, #0x0                   	// #0
     dfc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     e00:	cmp	x26, x21
     e04:	b.ls	ff0 <_ZN11__sanitizerL12TracerThreadEPv+0x370>  // b.plast
     e08:	mov	x2, #0x2000                	// #8192
     e0c:	mov	w1, #0x0                   	// #0
     e10:	mov	x0, x25
     e14:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e18:	add	x21, sp, #0xe8
     e1c:	mov	x2, #0x18                  	// #24
     e20:	mov	w1, #0x0                   	// #0
     e24:	mov	x0, x21
     e28:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e2c:	str	x25, [sp, #232]
     e30:	mov	x0, #0x2000                	// #8192
     e34:	str	x0, [sp, #248]
     e38:	mov	x1, #0x0                   	// #0
     e3c:	mov	x0, x21
     e40:	bl	0 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>
     e44:	add	x21, sp, #0x50
     e48:	mov	x24, #0x98                  	// #152
     e4c:	adrp	x23, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     e50:	add	x23, x23, #0x0
     e54:	mov	w27, #0x4                   	// #4
     e58:	movk	w27, #0x800, lsl #16
     e5c:	adrp	x22, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     e60:	add	x22, x22, #0x0
     e64:	mov	x2, x24
     e68:	mov	w1, #0x0                   	// #0
     e6c:	mov	x0, x21
     e70:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e74:	str	x23, [sp, #80]
     e78:	str	w27, [sp, #216]
     e7c:	mov	x2, #0x0                   	// #0
     e80:	mov	x1, x21
     e84:	ldr	w0, [x22, x19, lsl #2]
     e88:	bl	0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>
     e8c:	add	x19, x19, #0x1
     e90:	cmp	x19, #0x7
     e94:	b.ne	e64 <_ZN11__sanitizerL12TracerThreadEPv+0x1e4>  // b.any
     e98:	add	x0, sp, #0x100
     e9c:	bl	a14 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>
     ea0:	and	w0, w0, #0xff
     ea4:	cbnz	w0, 1088 <_ZN11__sanitizerL12TracerThreadEPv+0x408>
     ea8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     eac:	ldr	x0, [x0]
     eb0:	ldr	w0, [x0]
     eb4:	mov	w19, #0x3                   	// #3
     eb8:	cbz	w0, 10a8 <_ZN11__sanitizerL12TracerThreadEPv+0x428>
     ebc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ec0:	add	x0, x0, #0x0
     ec4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ec8:	b	10a8 <_ZN11__sanitizerL12TracerThreadEPv+0x428>
     ecc:	mov	w0, #0x4                   	// #4
     ed0:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     ed4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ed8:	add	x0, x0, #0x0
     edc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ee0:	bl	0 <_ZN11__sanitizer3DieEv>
     ee4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ee8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     eec:	ldr	x1, [x1]
     ef0:	str	x0, [x1]
     ef4:	b	d1c <_ZN11__sanitizerL12TracerThreadEPv+0x9c>
     ef8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     efc:	add	x0, x0, #0x0
     f00:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     f04:	bl	0 <_ZN11__sanitizer3DieEv>
     f08:	ldr	x3, [sp, #288]
     f0c:	cmp	x3, #0x400
     f10:	b.hi	f8c <_ZN11__sanitizerL12TracerThreadEPv+0x30c>  // b.pmore
     f14:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     f18:	ldr	x0, [x0]
     f1c:	ldr	x0, [x0]
     f20:	cbz	x0, fa8 <_ZN11__sanitizerL12TracerThreadEPv+0x328>
     f24:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     f28:	ldr	x0, [x0]
     f2c:	ldr	x0, [x0]
     f30:	sub	x1, x0, #0x1
     f34:	tst	x1, x0
     f38:	b.ne	fbc <_ZN11__sanitizerL12TracerThreadEPv+0x33c>  // b.any
     f3c:	add	x19, x0, #0x1, lsl #12
     f40:	add	x19, x19, #0xfff
     f44:	neg	x0, x0
     f48:	and	x19, x19, x0
     f4c:	mov	w2, #0x0                   	// #0
     f50:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     f54:	add	x1, x1, #0x0
     f58:	mov	x0, x19
     f5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     f60:	mov	x22, x0
     f64:	ldr	x2, [sp, #288]
     f68:	lsl	x2, x2, #3
     f6c:	ldr	x1, [sp, #272]
     f70:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     f74:	ldr	x1, [sp, #280]
     f78:	ldr	x0, [sp, #272]
     f7c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     f80:	str	x22, [sp, #272]
     f84:	str	x19, [sp, #280]
     f88:	b	d88 <_ZN11__sanitizerL12TracerThreadEPv+0x108>
     f8c:	mov	x4, #0x400                 	// #1024
     f90:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     f94:	add	x2, x2, #0x0
     f98:	mov	w1, #0x1fd                 	// #509
     f9c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fa0:	add	x0, x0, #0x0
     fa4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fa8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     fac:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     fb0:	ldr	x1, [x1]
     fb4:	str	x0, [x1]
     fb8:	b	f24 <_ZN11__sanitizerL12TracerThreadEPv+0x2a4>
     fbc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fc0:	add	x0, x0, #0x0
     fc4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     fc8:	bl	0 <_ZN11__sanitizer3DieEv>
     fcc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     fd0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     fd4:	ldr	x1, [x1]
     fd8:	str	x0, [x1]
     fdc:	b	da8 <_ZN11__sanitizerL12TracerThreadEPv+0x128>
     fe0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fe4:	add	x0, x0, #0x0
     fe8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     fec:	bl	0 <_ZN11__sanitizer3DieEv>
     ff0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ff4:	ldr	x0, [x0]
     ff8:	ldr	x0, [x0]
     ffc:	cbz	x0, 1064 <_ZN11__sanitizerL12TracerThreadEPv+0x3e4>
    1000:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1004:	ldr	x0, [x0]
    1008:	ldr	x0, [x0]
    100c:	sub	x1, x0, #0x1
    1010:	tst	x1, x0
    1014:	b.ne	1078 <_ZN11__sanitizerL12TracerThreadEPv+0x3f8>  // b.any
    1018:	add	x21, x0, #0x1, lsl #12
    101c:	add	x21, x21, #0xfff
    1020:	neg	x0, x0
    1024:	and	x21, x21, x0
    1028:	mov	w2, #0x0                   	// #0
    102c:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1030:	add	x1, x1, #0x0
    1034:	mov	x0, x21
    1038:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    103c:	mov	x22, x0
    1040:	mov	x2, #0x0                   	// #0
    1044:	mov	x1, x25
    1048:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    104c:	mov	x1, x26
    1050:	mov	x0, x25
    1054:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1058:	mov	x26, x21
    105c:	mov	x25, x22
    1060:	b	e08 <_ZN11__sanitizerL12TracerThreadEPv+0x188>
    1064:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1068:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
    106c:	ldr	x1, [x1]
    1070:	str	x0, [x1]
    1074:	b	1000 <_ZN11__sanitizerL12TracerThreadEPv+0x380>
    1078:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    107c:	add	x0, x0, #0x0
    1080:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1084:	bl	0 <_ZN11__sanitizer3DieEv>
    1088:	add	x19, sp, #0x100
    108c:	ldr	x2, [x20]
    1090:	ldr	x1, [x20, #8]
    1094:	add	x0, sp, #0x108
    1098:	blr	x2
    109c:	mov	x0, x19
    10a0:	bl	fc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
    10a4:	mov	w19, #0x0                   	// #0
    10a8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    10ac:	add	x0, x0, #0x0
    10b0:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
    10b4:	and	w0, w0, #0xff
    10b8:	cbz	w0, 110c <_ZN11__sanitizerL12TracerThreadEPv+0x48c>
    10bc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    10c0:	str	xzr, [x0]
    10c4:	mov	x0, #0x1                   	// #1
    10c8:	str	x0, [x20, #104]
    10cc:	mov	x1, x26
    10d0:	mov	x0, x25
    10d4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    10d8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    10dc:	add	x0, x0, #0x0
    10e0:	str	x0, [sp, #264]
    10e4:	ldr	x1, [sp, #280]
    10e8:	ldr	x0, [sp, #272]
    10ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    10f0:	mov	w0, w19
    10f4:	ldp	x21, x22, [sp, #16]
    10f8:	ldp	x23, x24, [sp, #32]
    10fc:	ldp	x25, x26, [sp, #48]
    1100:	ldp	x27, x30, [sp, #64]
    1104:	ldp	x19, x20, [sp], #304
    1108:	ret
    110c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1110:	add	x0, x0, #0x0
    1114:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1118:	bl	0 <_ZN11__sanitizer3DieEv>

sanitizer_stoptheworld_mac.o:     file format elf64-littleaarch64


sanitizer_suppressions.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18SuppressionContextC1EPPKci>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x19, x0
  10:	str	x1, [x0]
  14:	str	w2, [x0, #8]
  18:	str	xzr, [x0, #24]
  1c:	str	xzr, [x0, #32]
  20:	str	xzr, [x0, #16]
  24:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  28:	ldr	x0, [x0]
  2c:	ldr	x0, [x0]
  30:	cbz	x0, c4 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xc4>
  34:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  38:	ldr	x0, [x0]
  3c:	ldr	x1, [x0]
  40:	sub	x0, x1, #0x1
  44:	tst	x0, x1
  48:	b.ne	d8 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xd8>  // b.any
  4c:	add	x20, x1, #0x1f
  50:	neg	x1, x1
  54:	and	x20, x20, x1
  58:	mov	w2, #0x0                   	// #0
  5c:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  60:	add	x1, x1, #0x0
  64:	mov	x0, x20
  68:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  6c:	mov	x22, x0
  70:	ldr	x2, [x19, #32]
  74:	lsl	x2, x2, #5
  78:	ldr	x1, [x19, #16]
  7c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  80:	ldr	x1, [x19, #24]
  84:	ldr	x0, [x19, #16]
  88:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  8c:	str	x22, [x19, #16]
  90:	str	x20, [x19, #24]
  94:	mov	w0, #0x1                   	// #1
  98:	strb	w0, [x19, #72]
  9c:	ldrsw	x2, [x19, #8]
  a0:	cmp	x2, #0x20
  a4:	b.hi	e8 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xe8>  // b.pmore
  a8:	mov	w1, #0x0                   	// #0
  ac:	add	x0, x19, #0x28
  b0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  b4:	ldp	x21, x22, [sp, #16]
  b8:	ldr	x30, [sp, #32]
  bc:	ldp	x19, x20, [sp], #48
  c0:	ret
  c4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  c8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
  cc:	ldr	x1, [x1]
  d0:	str	x0, [x1]
  d4:	b	34 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0x34>
  d8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  e4:	bl	0 <_ZN11__sanitizer3DieEv>
  e8:	mov	x4, #0x20                  	// #32
  ec:	mov	x3, x2
  f0:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  f4:	add	x2, x2, #0x0
  f8:	mov	w1, #0x1c                  	// #28
  fc:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 100:	add	x0, x0, #0x0
 104:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000108 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>:
 108:	stp	x19, x20, [sp, #-128]!
 10c:	stp	x23, x24, [sp, #32]
 110:	str	x30, [sp, #80]
 114:	mov	x23, x0
 118:	ldrb	w0, [x0, #72]
 11c:	cbz	w0, 14c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x44>
 120:	mov	x19, x1
 124:	cbz	x1, 480 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x378>
 128:	stp	x21, x22, [sp, #16]
 12c:	stp	x25, x26, [sp, #48]
 130:	stp	x27, x28, [sp, #64]
 134:	add	x24, sp, #0x60
 138:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 13c:	ldr	x27, [x26]
 140:	adrp	x25, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 144:	add	x25, x25, #0x0
 148:	b	284 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x17c>
 14c:	stp	x21, x22, [sp, #16]
 150:	stp	x25, x26, [sp, #48]
 154:	stp	x27, x28, [sp, #64]
 158:	mov	x4, #0x0                   	// #0
 15c:	mov	x3, #0x0                   	// #0
 160:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 164:	add	x2, x2, #0x0
 168:	mov	w1, #0x6a                  	// #106
 16c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 170:	add	x0, x0, #0x0
 174:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 178:	mov	x0, x19
 17c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 180:	add	x21, x19, x0
 184:	b	2b8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1b0>
 188:	ldrb	w1, [x2]
 18c:	cbnz	w1, 19c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x94>
 190:	ldrb	w1, [x0]
 194:	cmp	w1, #0x3a
 198:	b.eq	1d8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xd0>  // b.none
 19c:	add	w22, w5, #0x1
 1a0:	add	x4, x4, #0x1
 1a4:	cmp	w6, w4
 1a8:	b.le	1dc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xd4>
 1ac:	mov	w5, w4
 1b0:	mov	w22, w4
 1b4:	ldr	x2, [x7, x4, lsl #3]
 1b8:	mov	x0, x19
 1bc:	ldrb	w3, [x0]
 1c0:	ldrb	w1, [x2]
 1c4:	cmp	w3, w1
 1c8:	b.ne	188 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x80>  // b.any
 1cc:	add	x0, x0, #0x1
 1d0:	add	x2, x2, #0x1
 1d4:	b	1bc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xb4>
 1d8:	add	x19, x0, #0x1
 1dc:	cmp	w22, w6
 1e0:	b.eq	318 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x210>  // b.none
 1e4:	mov	x2, #0x20                  	// #32
 1e8:	mov	w1, #0x0                   	// #0
 1ec:	mov	x0, x24
 1f0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1f4:	mov	x28, x23
 1f8:	ldr	x0, [x28], #16
 1fc:	ldr	x0, [x0, w22, sxtw #3]
 200:	str	x0, [sp, #96]
 204:	sub	x20, x20, x19
 208:	mov	x2, #0x0                   	// #0
 20c:	mov	x1, #0x0                   	// #0
 210:	add	x0, x20, #0x1
 214:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 218:	str	x0, [sp, #104]
 21c:	mov	x2, x20
 220:	mov	x1, x19
 224:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 228:	ldr	x0, [sp, #104]
 22c:	strb	wzr, [x0, x20]
 230:	ldr	x0, [x28, #16]
 234:	ldr	x1, [x28, #8]
 238:	lsr	x4, x1, #5
 23c:	cmp	x0, x1, lsr #5
 240:	b.hi	334 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x22c>  // b.pmore
 244:	cmp	x0, x4
 248:	b.eq	350 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x248>  // b.none
 24c:	ldr	x3, [x23, #16]
 250:	ldr	x0, [x23, #32]
 254:	add	x2, x0, #0x1
 258:	str	x2, [x23, #32]
 25c:	mov	x2, #0x20                  	// #32
 260:	mov	x1, x24
 264:	add	x0, x3, x0, lsl #5
 268:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 26c:	add	x22, x23, w22, sxtw
 270:	mov	w0, #0x1                   	// #1
 274:	strb	w0, [x22, #40]
 278:	ldrb	w0, [x21]
 27c:	cbz	w0, 474 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x36c>
 280:	add	x19, x21, #0x1
 284:	ldrb	w0, [x19]
 288:	cmp	w0, #0x20
 28c:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 290:	b.ne	2a4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x19c>  // b.any
 294:	ldrb	w0, [x19, #1]!
 298:	cmp	w0, #0x20
 29c:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 2a0:	b.eq	294 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x18c>  // b.none
 2a4:	mov	w1, #0xa                   	// #10
 2a8:	mov	x0, x19
 2ac:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 2b0:	mov	x21, x0
 2b4:	cbz	x0, 178 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x70>
 2b8:	cmp	x21, x19
 2bc:	b.eq	278 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x170>  // b.none
 2c0:	ldrb	w0, [x19]
 2c4:	cmp	w0, #0x23
 2c8:	b.eq	278 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x170>  // b.none
 2cc:	mov	x20, x21
 2d0:	ldurb	w1, [x20, #-1]
 2d4:	and	w0, w1, #0xfffffffb
 2d8:	and	w0, w0, #0xff
 2dc:	cmp	w1, #0x20
 2e0:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 2e4:	b.ne	2f8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1f0>  // b.any
 2e8:	sub	x20, x20, #0x1
 2ec:	cmp	x20, x19
 2f0:	b.ne	2d0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1c8>  // b.any
 2f4:	mov	x20, x19
 2f8:	ldr	w6, [x23, #8]
 2fc:	cmp	w6, #0x0
 300:	b.le	310 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x208>
 304:	ldr	x7, [x23]
 308:	mov	x4, #0x0                   	// #0
 30c:	b	1ac <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xa4>
 310:	mov	w22, #0x0                   	// #0
 314:	b	1dc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xd4>
 318:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 31c:	ldr	x0, [x0]
 320:	ldr	x1, [x0]
 324:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 328:	add	x0, x0, #0x0
 32c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 330:	bl	0 <_ZN11__sanitizer3DieEv>
 334:	mov	x3, x0
 338:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 33c:	add	x2, x2, #0x0
 340:	mov	w1, #0x1be                 	// #446
 344:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 348:	add	x0, x0, #0x0
 34c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 350:	add	x3, x0, #0x1
 354:	tst	x0, x3
 358:	b.eq	44c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x344>  // b.none
 35c:	clz	x2, x3
 360:	mov	w1, #0x3f                  	// #63
 364:	sub	w1, w1, w2
 368:	add	w2, w1, #0x1
 36c:	mov	x4, #0x1                   	// #1
 370:	lsl	x4, x4, x2
 374:	cmp	x3, x4
 378:	b.cs	3fc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2f4>  // b.hs, b.nlast
 37c:	mov	x2, #0x1                   	// #1
 380:	lsl	x1, x2, x1
 384:	cmp	x3, x1
 388:	b.ls	414 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x30c>  // b.plast
 38c:	cmp	x0, x4
 390:	b.hi	430 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x328>  // b.pmore
 394:	lsl	x19, x4, #5
 398:	ldr	x0, [x27]
 39c:	cbz	x0, 454 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x34c>
 3a0:	ldr	x0, [x26]
 3a4:	ldr	x0, [x0]
 3a8:	sub	x1, x0, #0x1
 3ac:	tst	x0, x1
 3b0:	b.ne	464 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x35c>  // b.any
 3b4:	add	x19, x19, x1
 3b8:	neg	x0, x0
 3bc:	and	x19, x19, x0
 3c0:	mov	w2, #0x0                   	// #0
 3c4:	mov	x1, x25
 3c8:	mov	x0, x19
 3cc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3d0:	mov	x28, x0
 3d4:	ldr	x2, [x23, #32]
 3d8:	lsl	x2, x2, #5
 3dc:	ldr	x1, [x23, #16]
 3e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e4:	ldr	x1, [x23, #24]
 3e8:	ldr	x0, [x23, #16]
 3ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3f0:	str	x28, [x23, #16]
 3f4:	str	x19, [x23, #24]
 3f8:	b	24c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x144>
 3fc:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 400:	add	x2, x2, #0x0
 404:	mov	w1, #0x17b                 	// #379
 408:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 40c:	add	x0, x0, #0x0
 410:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 414:	mov	x4, x1
 418:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 41c:	add	x2, x2, #0x0
 420:	mov	w1, #0x17c                 	// #380
 424:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 428:	add	x0, x0, #0x0
 42c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 430:	mov	x3, x0
 434:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 438:	add	x2, x2, #0x0
 43c:	mov	w1, #0x1fd                 	// #509
 440:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 444:	add	x0, x0, #0x0
 448:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 44c:	mov	x4, x3
 450:	b	394 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x28c>
 454:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 458:	ldr	x1, [x26]
 45c:	str	x0, [x1]
 460:	b	3a0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x298>
 464:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 468:	add	x0, x0, #0x0
 46c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 470:	bl	0 <_ZN11__sanitizer3DieEv>
 474:	ldp	x21, x22, [sp, #16]
 478:	ldp	x25, x26, [sp, #48]
 47c:	ldp	x27, x28, [sp, #64]
 480:	ldp	x23, x24, [sp, #32]
 484:	ldr	x30, [sp, #80]
 488:	ldp	x19, x20, [sp], #128
 48c:	ret

0000000000000490 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>:
 490:	stp	x19, x20, [sp, #-112]!
 494:	str	x30, [sp, #64]
 498:	mov	x19, x1
 49c:	ldrb	w1, [x1]
 4a0:	cbnz	w1, 4b0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x20>
 4a4:	ldr	x30, [sp, #64]
 4a8:	ldp	x19, x20, [sp], #112
 4ac:	ret
 4b0:	stp	x21, x22, [sp, #16]
 4b4:	mov	x22, x0
 4b8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4bc:	ldr	x0, [x0]
 4c0:	ldr	x0, [x0]
 4c4:	cbz	x0, 59c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x10c>
 4c8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4cc:	ldr	x0, [x0]
 4d0:	ldr	x2, [x0]
 4d4:	sub	x0, x2, #0x1
 4d8:	tst	x0, x2
 4dc:	b.ne	5b0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x120>  // b.any
 4e0:	add	x21, x2, #0xfff
 4e4:	neg	x2, x2
 4e8:	and	x21, x21, x2
 4ec:	mov	w2, #0x0                   	// #0
 4f0:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4f4:	add	x1, x1, #0x0
 4f8:	mov	x0, x21
 4fc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 500:	mov	x20, x0
 504:	mov	x2, #0x0                   	// #0
 508:	mov	x1, #0x0                   	// #0
 50c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 510:	mov	x1, #0x0                   	// #0
 514:	mov	x0, #0x0                   	// #0
 518:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 51c:	cmp	x21, #0xfff
 520:	b.ls	5c8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x138>  // b.plast
 524:	mov	x2, #0x1000                	// #4096
 528:	mov	w1, #0x0                   	// #0
 52c:	mov	x0, x20
 530:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 534:	strb	wzr, [x20]
 538:	mov	x0, x19
 53c:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 540:	and	w0, w0, #0xff
 544:	cbz	w0, 668 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1d8>
 548:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 54c:	ldr	x0, [x0]
 550:	ldr	w0, [x0]
 554:	cbnz	w0, 844 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x3b4>
 558:	mov	x5, #0x0                   	// #0
 55c:	mov	x4, #0x4000000             	// #67108864
 560:	add	x3, sp, #0x58
 564:	add	x2, sp, #0x60
 568:	add	x1, sp, #0x68
 56c:	mov	x0, x19
 570:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 574:	and	w0, w0, #0xff
 578:	cbz	w0, 864 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x3d4>
 57c:	ldr	x1, [sp, #104]
 580:	mov	x0, x22
 584:	bl	108 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
 588:	mov	x1, x21
 58c:	mov	x0, x20
 590:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 594:	ldp	x21, x22, [sp, #16]
 598:	b	4a4 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x14>
 59c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5a0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5a4:	ldr	x1, [x1]
 5a8:	str	x0, [x1]
 5ac:	b	4c8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x38>
 5b0:	stp	x23, x24, [sp, #32]
 5b4:	stp	x25, x26, [sp, #48]
 5b8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 5bc:	add	x0, x0, #0x0
 5c0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5c4:	bl	0 <_ZN11__sanitizer3DieEv>
 5c8:	stp	x23, x24, [sp, #32]
 5cc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5d0:	ldr	x0, [x0]
 5d4:	ldr	x0, [x0]
 5d8:	cbz	x0, 640 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1b0>
 5dc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5e0:	ldr	x0, [x0]
 5e4:	ldr	x0, [x0]
 5e8:	sub	x1, x0, #0x1
 5ec:	tst	x1, x0
 5f0:	b.ne	654 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1c4>  // b.any
 5f4:	add	x23, x0, #0xfff
 5f8:	neg	x0, x0
 5fc:	and	x23, x23, x0
 600:	mov	w2, #0x0                   	// #0
 604:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 608:	add	x1, x1, #0x0
 60c:	mov	x0, x23
 610:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 614:	mov	x24, x0
 618:	mov	x2, #0x0                   	// #0
 61c:	mov	x1, x20
 620:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 624:	mov	x1, x21
 628:	mov	x0, x20
 62c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 630:	mov	x21, x23
 634:	mov	x20, x24
 638:	ldp	x23, x24, [sp, #32]
 63c:	b	524 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x94>
 640:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 644:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 648:	ldr	x1, [x1]
 64c:	str	x0, [x1]
 650:	b	5dc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x14c>
 654:	stp	x25, x26, [sp, #48]
 658:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 65c:	add	x0, x0, #0x0
 660:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 664:	bl	0 <_ZN11__sanitizer3DieEv>
 668:	mov	x0, x19
 66c:	bl	0 <_ZN11__sanitizer14IsAbsolutePathEPKc>
 670:	and	w0, w0, #0xff
 674:	cbnz	w0, 548 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb8>
 678:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 67c:	ldr	x0, [x0]
 680:	ldr	x0, [x0]
 684:	cbz	x0, 720 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x290>
 688:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 68c:	ldr	x0, [x0]
 690:	ldr	x0, [x0]
 694:	sub	x1, x0, #0x1
 698:	tst	x1, x0
 69c:	b.ne	734 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2a4>  // b.any
 6a0:	stp	x23, x24, [sp, #32]
 6a4:	add	x24, x0, #0xfff
 6a8:	neg	x0, x0
 6ac:	and	x24, x24, x0
 6b0:	mov	w2, #0x0                   	// #0
 6b4:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 6b8:	add	x1, x1, #0x0
 6bc:	mov	x0, x24
 6c0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6c4:	mov	x23, x0
 6c8:	mov	x2, #0x0                   	// #0
 6cc:	mov	x1, #0x0                   	// #0
 6d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6d4:	mov	x1, #0x0                   	// #0
 6d8:	mov	x0, #0x0                   	// #0
 6dc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6e0:	cmp	x24, #0xfff
 6e4:	b.ls	74c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2bc>  // b.plast
 6e8:	mov	x2, #0x1000                	// #4096
 6ec:	mov	w1, #0x0                   	// #0
 6f0:	mov	x0, x23
 6f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 6f8:	strb	wzr, [x23]
 6fc:	mov	x1, #0x1000                	// #4096
 700:	mov	x0, x23
 704:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 708:	cbnz	x0, 7e8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x358>
 70c:	mov	x1, x24
 710:	mov	x0, x23
 714:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 718:	ldp	x23, x24, [sp, #32]
 71c:	b	548 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb8>
 720:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 724:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 728:	ldr	x1, [x1]
 72c:	str	x0, [x1]
 730:	b	688 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1f8>
 734:	stp	x23, x24, [sp, #32]
 738:	stp	x25, x26, [sp, #48]
 73c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 740:	add	x0, x0, #0x0
 744:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 748:	bl	0 <_ZN11__sanitizer3DieEv>
 74c:	stp	x25, x26, [sp, #48]
 750:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 754:	ldr	x0, [x0]
 758:	ldr	x0, [x0]
 75c:	cbz	x0, 7c4 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x334>
 760:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 764:	ldr	x0, [x0]
 768:	ldr	x0, [x0]
 76c:	sub	x1, x0, #0x1
 770:	tst	x1, x0
 774:	b.ne	7d8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x348>  // b.any
 778:	add	x25, x0, #0xfff
 77c:	neg	x0, x0
 780:	and	x25, x25, x0
 784:	mov	w2, #0x0                   	// #0
 788:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 78c:	add	x1, x1, #0x0
 790:	mov	x0, x25
 794:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 798:	mov	x26, x0
 79c:	mov	x2, #0x0                   	// #0
 7a0:	mov	x1, x23
 7a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7a8:	mov	x1, x24
 7ac:	mov	x0, x23
 7b0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7b4:	mov	x24, x25
 7b8:	mov	x23, x26
 7bc:	ldp	x25, x26, [sp, #48]
 7c0:	b	6e8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x258>
 7c4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 7c8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7cc:	ldr	x1, [x1]
 7d0:	str	x0, [x1]
 7d4:	b	760 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2d0>
 7d8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 7dc:	add	x0, x0, #0x0
 7e0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 7e4:	bl	0 <_ZN11__sanitizer3DieEv>
 7e8:	stp	x25, x26, [sp, #48]
 7ec:	mov	x0, x23
 7f0:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 7f4:	sub	x2, x0, x23
 7f8:	mov	x25, #0xfff                 	// #4095
 7fc:	cmp	x2, x25
 800:	csel	x2, x2, x25, ls  // ls = plast
 804:	mov	x1, x23
 808:	mov	x0, x20
 80c:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 810:	mov	x0, x20
 814:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 818:	sub	x2, x25, x0
 81c:	mov	x1, x19
 820:	mov	x0, x20
 824:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 828:	mov	x1, x24
 82c:	mov	x0, x23
 830:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 834:	mov	x19, x20
 838:	ldp	x23, x24, [sp, #32]
 83c:	ldp	x25, x26, [sp, #48]
 840:	b	548 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb8>
 844:	mov	x2, x19
 848:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 84c:	ldr	x0, [x0]
 850:	ldr	x1, [x0]
 854:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 858:	add	x0, x0, #0x0
 85c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 860:	b	558 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc8>
 864:	stp	x23, x24, [sp, #32]
 868:	stp	x25, x26, [sp, #48]
 86c:	mov	x2, x19
 870:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 874:	ldr	x0, [x0]
 878:	ldr	x1, [x0]
 87c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 880:	add	x0, x0, #0x0
 884:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 888:	bl	0 <_ZN11__sanitizer3DieEv>

000000000000088c <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>:
 88c:	ldr	x0, [x0, #32]
 890:	ret

0000000000000894 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>:
 894:	stp	x19, x20, [sp, #-48]!
 898:	str	x30, [sp, #32]
 89c:	mov	x20, x0
 8a0:	ldr	w0, [x0, #8]
 8a4:	cmp	w0, #0x0
 8a8:	b.le	900 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x6c>
 8ac:	stp	x21, x22, [sp, #16]
 8b0:	mov	x21, x1
 8b4:	mov	x19, #0x0                   	// #0
 8b8:	ldr	x0, [x20]
 8bc:	ldr	x1, [x0, x19, lsl #3]
 8c0:	mov	x0, x21
 8c4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 8c8:	cbz	w0, 8e8 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x54>
 8cc:	add	x19, x19, #0x1
 8d0:	ldr	w0, [x20, #8]
 8d4:	cmp	w0, w19
 8d8:	b.gt	8b8 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x24>
 8dc:	mov	w0, #0x0                   	// #0
 8e0:	ldp	x21, x22, [sp, #16]
 8e4:	b	8f4 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x60>
 8e8:	add	x20, x20, w19, sxtw
 8ec:	ldrb	w0, [x20, #40]
 8f0:	ldp	x21, x22, [sp, #16]
 8f4:	ldr	x30, [sp, #32]
 8f8:	ldp	x19, x20, [sp], #48
 8fc:	ret
 900:	mov	w0, #0x0                   	// #0
 904:	b	8f4 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x60>

0000000000000908 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>:
 908:	stp	x19, x20, [sp, #-64]!
 90c:	stp	x21, x22, [sp, #16]
 910:	stp	x23, x24, [sp, #32]
 914:	str	x30, [sp, #48]
 918:	mov	x20, x0
 91c:	mov	x22, x1
 920:	mov	x21, x2
 924:	mov	x23, x3
 928:	strb	wzr, [x0, #72]
 92c:	mov	x1, x2
 930:	bl	894 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>
 934:	ands	w0, w0, #0xff
 938:	b.eq	998 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x90>  // b.none
 93c:	ldr	x0, [x20, #32]
 940:	cbz	x0, 9ac <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xa4>
 944:	mov	x19, #0x0                   	// #0
 948:	b	95c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x54>
 94c:	add	x19, x19, #0x1
 950:	ldr	x0, [x20, #32]
 954:	cmp	x0, x19
 958:	b.ls	994 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x8c>  // b.plast
 95c:	lsl	x4, x19, #5
 960:	ldr	x5, [x20, #16]
 964:	add	x24, x5, x4
 968:	mov	x1, x21
 96c:	ldr	x0, [x5, x4]
 970:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 974:	cbnz	w0, 94c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x44>
 978:	mov	x1, x22
 97c:	ldr	x0, [x24, #8]
 980:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 984:	ands	w0, w0, #0xff
 988:	b.eq	94c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x44>  // b.none
 98c:	str	x24, [x23]
 990:	b	998 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x90>
 994:	mov	w0, #0x0                   	// #0
 998:	ldp	x21, x22, [sp, #16]
 99c:	ldp	x23, x24, [sp, #32]
 9a0:	ldr	x30, [sp, #48]
 9a4:	ldp	x19, x20, [sp], #64
 9a8:	ret
 9ac:	mov	w0, #0x0                   	// #0
 9b0:	b	998 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x90>

00000000000009b4 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm>:
 9b4:	ldr	x4, [x0, #32]
 9b8:	cmp	x1, x4
 9bc:	b.cs	9cc <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm+0x18>  // b.hs, b.nlast
 9c0:	ldr	x0, [x0, #16]
 9c4:	add	x0, x0, x1, lsl #5
 9c8:	ret
 9cc:	str	x30, [sp, #-16]!
 9d0:	mov	x3, x1
 9d4:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 9d8:	add	x2, x2, #0x0
 9dc:	mov	w1, #0x9e                  	// #158
 9e0:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 9e4:	add	x0, x0, #0x0
 9e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009ec <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>:
 9ec:	stp	x19, x20, [sp, #-96]!
 9f0:	str	x30, [sp, #72]
 9f4:	mov	x20, x0
 9f8:	ldr	x0, [x0, #32]
 9fc:	cbz	x0, bdc <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1f0>
 a00:	stp	x21, x22, [sp, #16]
 a04:	stp	x23, x24, [sp, #32]
 a08:	stp	x25, x26, [sp, #48]
 a0c:	mov	x21, x1
 a10:	mov	x19, #0x0                   	// #0
 a14:	add	x23, sp, #0x58
 a18:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a1c:	ldr	x25, [x24]
 a20:	adrp	x22, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a24:	add	x22, x22, #0x0
 a28:	b	b20 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x134>
 a2c:	str	x27, [sp, #64]
 a30:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a34:	add	x2, x2, #0x0
 a38:	mov	w1, #0x1be                 	// #446
 a3c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a40:	add	x0, x0, #0x0
 a44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a48:	mov	x3, x0
 a4c:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a50:	add	x2, x2, #0x0
 a54:	mov	w1, #0x17b                 	// #379
 a58:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a5c:	add	x0, x0, #0x0
 a60:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a64:	mov	x4, x1
 a68:	mov	x3, x0
 a6c:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a70:	add	x2, x2, #0x0
 a74:	mov	w1, #0x17c                 	// #380
 a78:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 a7c:	add	x0, x0, #0x0
 a80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a84:	mov	x4, x0
 a88:	lsl	x26, x4, #3
 a8c:	ldr	x0, [x25]
 a90:	cbz	x0, bb0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1c4>
 a94:	ldr	x0, [x24]
 a98:	ldr	x0, [x0]
 a9c:	sub	x1, x0, #0x1
 aa0:	tst	x0, x1
 aa4:	b.ne	bc0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1d4>  // b.any
 aa8:	add	x26, x26, x1
 aac:	neg	x0, x0
 ab0:	and	x26, x26, x0
 ab4:	mov	w2, #0x0                   	// #0
 ab8:	mov	x1, x22
 abc:	mov	x0, x26
 ac0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 ac4:	mov	x27, x0
 ac8:	ldr	x2, [x21, #16]
 acc:	lsl	x2, x2, #3
 ad0:	ldr	x1, [x21]
 ad4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 ad8:	ldr	x1, [x21, #8]
 adc:	ldr	x0, [x21]
 ae0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ae4:	str	x27, [x21]
 ae8:	str	x26, [x21, #8]
 aec:	ldr	x27, [sp, #64]
 af0:	ldr	x3, [x21]
 af4:	ldr	x0, [x21, #16]
 af8:	add	x1, x0, #0x1
 afc:	str	x1, [x21, #16]
 b00:	mov	x2, #0x8                   	// #8
 b04:	mov	x1, x23
 b08:	add	x0, x3, x0, lsl #3
 b0c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 b10:	add	x19, x19, #0x1
 b14:	ldr	x0, [x20, #32]
 b18:	cmp	x0, x19
 b1c:	b.ls	bd0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1e4>  // b.plast
 b20:	ldr	x2, [x20, #16]
 b24:	add	x2, x2, x19, lsl #5
 b28:	ldr	w0, [x2, #16]
 b2c:	cbz	w0, b10 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x124>
 b30:	str	x2, [sp, #88]
 b34:	ldr	x3, [x21, #16]
 b38:	ldr	x0, [x21, #8]
 b3c:	lsr	x4, x0, #3
 b40:	cmp	x3, x0, lsr #3
 b44:	b.hi	a2c <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x40>  // b.pmore
 b48:	cmp	x3, x4
 b4c:	b.ne	af0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x104>  // b.any
 b50:	str	x27, [sp, #64]
 b54:	add	x0, x3, #0x1
 b58:	tst	x3, x0
 b5c:	b.eq	a84 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x98>  // b.none
 b60:	clz	x2, x0
 b64:	mov	w1, #0x3f                  	// #63
 b68:	sub	w1, w1, w2
 b6c:	add	w2, w1, #0x1
 b70:	mov	x4, #0x1                   	// #1
 b74:	lsl	x4, x4, x2
 b78:	cmp	x0, x4
 b7c:	b.cs	a48 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x5c>  // b.hs, b.nlast
 b80:	mov	x2, #0x1                   	// #1
 b84:	lsl	x1, x2, x1
 b88:	cmp	x0, x1
 b8c:	b.ls	a64 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x78>  // b.plast
 b90:	cmp	x3, x4
 b94:	b.ls	a88 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x9c>  // b.plast
 b98:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 b9c:	add	x2, x2, #0x0
 ba0:	mov	w1, #0x1fd                 	// #509
 ba4:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ba8:	add	x0, x0, #0x0
 bac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bb0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 bb4:	ldr	x1, [x24]
 bb8:	str	x0, [x1]
 bbc:	b	a94 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xa8>
 bc0:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 bc4:	add	x0, x0, #0x0
 bc8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 bcc:	bl	0 <_ZN11__sanitizer3DieEv>
 bd0:	ldp	x21, x22, [sp, #16]
 bd4:	ldp	x23, x24, [sp, #32]
 bd8:	ldp	x25, x26, [sp, #48]
 bdc:	ldr	x30, [sp, #72]
 be0:	ldp	x19, x20, [sp], #96
 be4:	ret

sanitizer_symbolizer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer11AddressInfoC1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x2, #0x40                  	// #64
   c:	mov	w1, #0x0                   	// #0
  10:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  14:	mov	x0, #0xffffffffffffffff    	// #-1
  18:	str	x0, [x19, #40]
  1c:	ldp	x19, x30, [sp], #16
  20:	ret

0000000000000024 <_ZN11__sanitizer11AddressInfo5ClearEv>:
  24:	stp	x19, x30, [sp, #-16]!
  28:	mov	x19, x0
  2c:	mov	x1, #0x0                   	// #0
  30:	ldr	x0, [x0, #8]
  34:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  38:	mov	x1, #0x0                   	// #0
  3c:	ldr	x0, [x19, #32]
  40:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  44:	mov	x1, #0x0                   	// #0
  48:	ldr	x0, [x19, #48]
  4c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  50:	mov	x2, #0x40                  	// #64
  54:	mov	w1, #0x0                   	// #0
  58:	mov	x0, x19
  5c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  60:	mov	x0, #0xffffffffffffffff    	// #-1
  64:	str	x0, [x19, #40]
  68:	ldp	x19, x30, [sp], #16
  6c:	ret

0000000000000070 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>:
  70:	stp	x19, x20, [sp, #-32]!
  74:	stp	x21, x30, [sp, #16]
  78:	mov	x19, x0
  7c:	mov	x0, x1
  80:	mov	x21, x2
  84:	mov	w20, w3
  88:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  8c:	str	x0, [x19, #8]
  90:	str	x21, [x19, #16]
  94:	str	w20, [x19, #24]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

00000000000000a4 <_ZN11__sanitizer15SymbolizedStackC1Ev>:
  a4:	str	x30, [sp, #-16]!
  a8:	str	xzr, [x0], #8
  ac:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
  b0:	ldr	x30, [sp], #16
  b4:	ret

00000000000000b8 <_ZN11__sanitizer15SymbolizedStack3NewEm>:
  b8:	stp	x19, x20, [sp, #-32]!
  bc:	str	x30, [sp, #16]
  c0:	mov	x20, x0
  c4:	mov	x2, #0x0                   	// #0
  c8:	mov	x1, #0x0                   	// #0
  cc:	mov	x0, #0x48                  	// #72
  d0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  d4:	mov	x19, x0
  d8:	bl	a4 <_ZN11__sanitizer15SymbolizedStackC1Ev>
  dc:	str	x20, [x19, #8]
  e0:	mov	x0, x19
  e4:	ldr	x30, [sp, #16]
  e8:	ldp	x19, x20, [sp], #32
  ec:	ret

00000000000000f0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>:
  f0:	stp	x19, x30, [sp, #-16]!
  f4:	mov	x19, x0
  f8:	add	x0, x0, #0x8
  fc:	bl	24 <_ZN11__sanitizer11AddressInfo5ClearEv>
 100:	ldr	x0, [x19]
 104:	cbz	x0, 10c <_ZN11__sanitizer15SymbolizedStack8ClearAllEv+0x1c>
 108:	bl	f0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 10c:	mov	x1, #0x0                   	// #0
 110:	mov	x0, x19
 114:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 118:	ldp	x19, x30, [sp], #16
 11c:	ret

0000000000000120 <_ZN11__sanitizer8DataInfoC1Ev>:
 120:	str	x30, [sp, #-16]!
 124:	mov	x2, #0x40                  	// #64
 128:	mov	w1, #0x0                   	// #0
 12c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 130:	ldr	x30, [sp], #16
 134:	ret

0000000000000138 <_ZN11__sanitizer8DataInfo5ClearEv>:
 138:	stp	x19, x30, [sp, #-16]!
 13c:	mov	x19, x0
 140:	mov	x1, #0x0                   	// #0
 144:	ldr	x0, [x0]
 148:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 14c:	mov	x1, #0x0                   	// #0
 150:	ldr	x0, [x19, #24]
 154:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 158:	mov	x1, #0x0                   	// #0
 15c:	ldr	x0, [x19, #40]
 160:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 164:	mov	x2, #0x40                  	// #64
 168:	mov	w1, #0x0                   	// #0
 16c:	mov	x0, x19
 170:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 174:	ldp	x19, x30, [sp], #16
 178:	ret

000000000000017c <_ZN11__sanitizer10Symbolizer20InvalidateModuleListEv>:
 17c:	strb	wzr, [x0, #104]
 180:	ret

0000000000000184 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_>:
 184:	ldr	x3, [x0, #224]
 188:	cbz	x3, 1b0 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x2c>
 18c:	str	x30, [sp, #-16]!
 190:	mov	x4, #0x0                   	// #0
 194:	mov	x3, #0x0                   	// #0
 198:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 19c:	add	x2, x2, #0x0
 1a0:	mov	w1, #0x4e                  	// #78
 1a4:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 1a8:	add	x0, x0, #0x0
 1ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1b0:	ldr	x3, [x0, #232]
 1b4:	cbnz	x3, 18c <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x8>
 1b8:	str	x1, [x0, #224]
 1bc:	str	x2, [x0, #232]
 1c0:	ret

00000000000001c4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>:
 1c4:	stp	x19, x20, [sp, #-48]!
 1c8:	stp	x21, x22, [sp, #16]
 1cc:	str	x30, [sp, #32]
 1d0:	mov	x20, x0
 1d4:	mov	x21, x1
 1d8:	ldr	x0, [x0, #32]
 1dc:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 1e0:	ldr	x0, [x20, #24]
 1e4:	cbz	x0, 1f4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x30>
 1e8:	mov	x1, x21
 1ec:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 1f0:	cbz	w0, 27c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xb8>
 1f4:	ldr	x0, [x20, #16]
 1f8:	mov	x19, #0x0                   	// #0
 1fc:	cbz	x0, 228 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x64>
 200:	lsl	x22, x19, #3
 204:	ldr	x0, [x20]
 208:	mov	x1, x21
 20c:	ldr	x0, [x0, x19, lsl #3]
 210:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 214:	cbz	w0, 284 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xc0>
 218:	add	x19, x19, #0x1
 21c:	ldr	x0, [x20, #16]
 220:	cmp	x19, x0
 224:	b.cc	200 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x3c>  // b.lo, b.ul, b.last
 228:	mov	x0, x21
 22c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 230:	mov	x19, x20
 234:	str	x0, [x19, #24]!
 238:	ldr	x3, [x20, #16]
 23c:	ldr	x0, [x20, #8]
 240:	lsr	x4, x0, #3
 244:	cmp	x3, x0, lsr #3
 248:	b.hi	2c8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x104>  // b.pmore
 24c:	cmp	x3, x4
 250:	b.eq	2e0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x11c>  // b.none
 254:	ldr	x3, [x20]
 258:	ldr	x0, [x20, #16]
 25c:	add	x1, x0, #0x1
 260:	str	x1, [x20, #16]
 264:	mov	x2, #0x8                   	// #8
 268:	mov	x1, x19
 26c:	add	x0, x3, x0, lsl #3
 270:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 274:	ldr	x0, [x20, #24]
 278:	b	29c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xd8>
 27c:	ldr	x0, [x20, #24]
 280:	b	29c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xd8>
 284:	ldr	x4, [x20, #16]
 288:	cmp	x4, x19
 28c:	b.ls	2ac <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xe8>  // b.plast
 290:	ldr	x0, [x20]
 294:	ldr	x0, [x0, x22]
 298:	str	x0, [x20, #24]
 29c:	ldp	x21, x22, [sp, #16]
 2a0:	ldr	x30, [sp, #32]
 2a4:	ldp	x19, x20, [sp], #48
 2a8:	ret
 2ac:	mov	x3, x19
 2b0:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2b4:	add	x2, x2, #0x0
 2b8:	mov	w1, #0x1b6                 	// #438
 2bc:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2c0:	add	x0, x0, #0x0
 2c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2c8:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2cc:	add	x2, x2, #0x0
 2d0:	mov	w1, #0x1be                 	// #446
 2d4:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2d8:	add	x0, x0, #0x0
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e0:	add	x0, x3, #0x1
 2e4:	tst	x3, x0
 2e8:	b.eq	3f0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x22c>  // b.none
 2ec:	clz	x2, x0
 2f0:	mov	w1, #0x3f                  	// #63
 2f4:	sub	w1, w1, w2
 2f8:	add	w2, w1, #0x1
 2fc:	mov	x4, #0x1                   	// #1
 300:	lsl	x4, x4, x2
 304:	cmp	x0, x4
 308:	b.cs	39c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1d8>  // b.hs, b.nlast
 30c:	mov	x2, #0x1                   	// #1
 310:	lsl	x1, x2, x1
 314:	cmp	x0, x1
 318:	b.ls	3b8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1f4>  // b.plast
 31c:	cmp	x3, x4
 320:	b.hi	3d8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x214>  // b.pmore
 324:	lsl	x21, x4, #3
 328:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 32c:	ldr	x0, [x0]
 330:	ldr	x0, [x0]
 334:	cbz	x0, 3f8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x234>
 338:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 33c:	ldr	x0, [x0]
 340:	ldr	x0, [x0]
 344:	sub	x1, x0, #0x1
 348:	tst	x0, x1
 34c:	b.ne	40c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x248>  // b.any
 350:	add	x21, x21, x1
 354:	neg	x0, x0
 358:	and	x21, x21, x0
 35c:	mov	w2, #0x0                   	// #0
 360:	adrp	x1, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 364:	add	x1, x1, #0x0
 368:	mov	x0, x21
 36c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 370:	mov	x22, x0
 374:	ldr	x2, [x20, #16]
 378:	lsl	x2, x2, #3
 37c:	ldr	x1, [x20]
 380:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 384:	ldr	x1, [x20, #8]
 388:	ldr	x0, [x20]
 38c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 390:	str	x22, [x20]
 394:	str	x21, [x20, #8]
 398:	b	254 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x90>
 39c:	mov	x3, x0
 3a0:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3a4:	add	x2, x2, #0x0
 3a8:	mov	w1, #0x17b                 	// #379
 3ac:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3b0:	add	x0, x0, #0x0
 3b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b8:	mov	x4, x1
 3bc:	mov	x3, x0
 3c0:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3c4:	add	x2, x2, #0x0
 3c8:	mov	w1, #0x17c                 	// #380
 3cc:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3d0:	add	x0, x0, #0x0
 3d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d8:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3dc:	add	x2, x2, #0x0
 3e0:	mov	w1, #0x1fd                 	// #509
 3e4:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3e8:	add	x0, x0, #0x0
 3ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f0:	mov	x4, x0
 3f4:	b	324 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x160>
 3f8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3fc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 400:	ldr	x1, [x1]
 404:	str	x0, [x1]
 408:	b	338 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x174>
 40c:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 410:	add	x0, x0, #0x0
 414:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 418:	bl	0 <_ZN11__sanitizer3DieEv>

000000000000041c <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>:
 41c:	stp	x19, x20, [sp, #-48]!
 420:	stp	x21, x22, [sp, #16]
 424:	stp	x23, x30, [sp, #32]
 428:	mov	x19, x0
 42c:	mov	x21, x1
 430:	str	xzr, [x0, #8]
 434:	str	xzr, [x0, #16]
 438:	str	xzr, [x0]
 43c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 440:	ldr	x0, [x0]
 444:	ldr	x0, [x0]
 448:	cbz	x0, 500 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xe4>
 44c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 450:	ldr	x0, [x0]
 454:	ldr	x2, [x0]
 458:	sub	x0, x2, #0x1
 45c:	tst	x0, x2
 460:	b.ne	514 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xf8>  // b.any
 464:	add	x23, x19, #0x70
 468:	add	x20, x2, #0x7
 46c:	neg	x2, x2
 470:	and	x20, x20, x2
 474:	mov	w2, #0x0                   	// #0
 478:	adrp	x1, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 47c:	add	x1, x1, #0x0
 480:	mov	x0, x20
 484:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 488:	mov	x22, x0
 48c:	ldr	x2, [x19, #16]
 490:	lsl	x2, x2, #3
 494:	ldr	x1, [x19]
 498:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 49c:	ldr	x1, [x19, #8]
 4a0:	ldr	x0, [x19]
 4a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4a8:	str	x22, [x19]
 4ac:	str	x20, [x19, #8]
 4b0:	str	xzr, [x19, #24]
 4b4:	str	x23, [x19, #32]
 4b8:	mov	x0, #0x1f3f                	// #7999
 4bc:	cmp	x20, x0
 4c0:	b.ls	524 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x108>  // b.plast
 4c4:	strb	wzr, [x19, #64]
 4c8:	strb	wzr, [x19, #96]
 4cc:	strb	wzr, [x19, #104]
 4d0:	mov	x0, x23
 4d4:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 4d8:	ldp	x0, x1, [x21]
 4dc:	stp	x0, x1, [x19, #200]
 4e0:	ldr	x0, [x21, #16]
 4e4:	str	x0, [x19, #216]
 4e8:	str	xzr, [x19, #224]
 4ec:	str	xzr, [x19, #232]
 4f0:	ldp	x21, x22, [sp, #16]
 4f4:	ldp	x23, x30, [sp, #32]
 4f8:	ldp	x19, x20, [sp], #48
 4fc:	ret
 500:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 504:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 508:	ldr	x1, [x1]
 50c:	str	x0, [x1]
 510:	b	44c <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x30>
 514:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 518:	add	x0, x0, #0x0
 51c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 520:	bl	0 <_ZN11__sanitizer3DieEv>
 524:	ldr	x3, [x19, #16]
 528:	cmp	x3, #0x3e8
 52c:	b.hi	5a8 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x18c>  // b.pmore
 530:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 534:	ldr	x0, [x0]
 538:	ldr	x0, [x0]
 53c:	cbz	x0, 5c4 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x1a8>
 540:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 544:	ldr	x0, [x0]
 548:	ldr	x1, [x0]
 54c:	sub	x0, x1, #0x1
 550:	tst	x0, x1
 554:	b.ne	5d8 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x1bc>  // b.any
 558:	add	x20, x1, #0x1, lsl #12
 55c:	add	x20, x20, #0xf3f
 560:	neg	x1, x1
 564:	and	x20, x20, x1
 568:	mov	w2, #0x0                   	// #0
 56c:	adrp	x1, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 570:	add	x1, x1, #0x0
 574:	mov	x0, x20
 578:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 57c:	mov	x22, x0
 580:	ldr	x2, [x19, #16]
 584:	lsl	x2, x2, #3
 588:	ldr	x1, [x19]
 58c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 590:	ldr	x1, [x19, #8]
 594:	ldr	x0, [x19]
 598:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 59c:	str	x22, [x19]
 5a0:	str	x20, [x19, #8]
 5a4:	b	4c4 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xa8>
 5a8:	mov	x4, #0x3e8                 	// #1000
 5ac:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5b0:	add	x2, x2, #0x0
 5b4:	mov	w1, #0x1fd                 	// #509
 5b8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5bc:	add	x0, x0, #0x0
 5c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5c4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5c8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5cc:	ldr	x1, [x1]
 5d0:	str	x0, [x1]
 5d4:	b	540 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x124>
 5d8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5dc:	add	x0, x0, #0x0
 5e0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5e4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000005e8 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>:
 5e8:	str	x1, [x0]
 5ec:	ldr	x0, [x1, #224]
 5f0:	cbz	x0, 604 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_+0x1c>
 5f4:	str	x30, [sp, #-16]!
 5f8:	blr	x0
 5fc:	ldr	x30, [sp], #16
 600:	ret
 604:	ret

0000000000000608 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>:
 608:	ldr	x0, [x0]
 60c:	ldr	x0, [x0, #232]
 610:	cbz	x0, 624 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev+0x1c>
 614:	str	x30, [sp, #-16]!
 618:	blr	x0
 61c:	ldr	x30, [sp], #16
 620:	ret
 624:	ret

sanitizer_symbolizer_libbacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ErrorCallback>:
   0:	ret

0000000000000004 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   4:	stp	x19, x20, [sp, #-64]!
   8:	str	x30, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	str	x2, [sp, #40]
  18:	str	x2, [sp, #48]
  1c:	str	xzr, [sp, #56]
  20:	add	x4, sp, #0x28
  24:	adrp	x3, 0 <ErrorCallback>
  28:	add	x3, x3, #0x0
  2c:	adrp	x2, 0 <ErrorCallback>
  30:	add	x2, x2, #0x0
  34:	ldr	x0, [x0, #16]
  38:	bl	0 <__asan_backtrace_pcinfo>
  3c:	ldr	x0, [sp, #56]
  40:	cbz	x0, 54 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x50>
  44:	mov	w0, #0x1                   	// #1
  48:	ldr	x30, [sp, #16]
  4c:	ldp	x19, x20, [sp], #64
  50:	ret
  54:	add	x4, sp, #0x28
  58:	adrp	x3, 0 <ErrorCallback>
  5c:	add	x3, x3, #0x0
  60:	adrp	x2, 0 <ErrorCallback>
  64:	add	x2, x2, #0x0
  68:	mov	x1, x20
  6c:	ldr	x0, [x19, #16]
  70:	bl	0 <__asan_backtrace_syminfo>
  74:	ldr	x0, [sp, #56]
  78:	cmp	x0, #0x0
  7c:	cset	w0, ne  // ne = any
  80:	b	48 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x44>

0000000000000084 <_ZN11__sanitizer22LibbacktraceSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
  84:	str	x30, [sp, #-16]!
  88:	mov	x4, x2
  8c:	adrp	x3, 0 <ErrorCallback>
  90:	add	x3, x3, #0x0
  94:	adrp	x2, 0 <ErrorCallback>
  98:	add	x2, x2, #0x0
  9c:	ldr	x0, [x0, #16]
  a0:	bl	0 <__asan_backtrace_syminfo>
  a4:	mov	w0, #0x1                   	// #1
  a8:	ldr	x30, [sp], #16
  ac:	ret

00000000000000b0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc>:
  b0:	stp	x19, x30, [sp, #-48]!
  b4:	str	xzr, [sp, #24]
  b8:	str	xzr, [sp, #32]
  bc:	str	xzr, [sp, #40]
  c0:	add	x3, sp, #0x18
  c4:	adrp	x2, 0 <ErrorCallback>
  c8:	add	x2, x2, #0x0
  cc:	mov	w1, #0x3                   	// #3
  d0:	bl	0 <__asan_cplus_demangle_v3_callback>
  d4:	cbz	w0, 118 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc+0x68>
  d8:	ldr	x0, [sp, #32]
  dc:	add	x0, x0, #0x40
  e0:	ldr	x1, [sp, #40]
  e4:	cmp	x0, x1
  e8:	b.ls	fc <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc+0x4c>  // b.plast
  ec:	ldr	x19, [sp, #24]
  f0:	mov	x0, x19
  f4:	ldp	x19, x30, [sp], #48
  f8:	ret
  fc:	ldr	x0, [sp, #24]
 100:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 104:	mov	x19, x0
 108:	mov	x1, #0x0                   	// #0
 10c:	ldr	x0, [sp, #24]
 110:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 114:	b	f0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc+0x40>
 118:	ldr	x19, [sp, #24]
 11c:	cbz	x19, f0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc+0x40>
 120:	mov	x1, #0x0                   	// #0
 124:	mov	x0, x19
 128:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 12c:	mov	x19, #0x0                   	// #0
 130:	b	f0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc+0x40>

0000000000000134 <CplusV3DemangleCallback>:
 134:	stp	x19, x20, [sp, #-48]!
 138:	stp	x21, x22, [sp, #16]
 13c:	str	x30, [sp, #32]
 140:	mov	x21, x0
 144:	mov	x20, x1
 148:	mov	x19, x2
 14c:	add	x1, x1, #0x1
 150:	ldr	x0, [x2, #8]
 154:	add	x1, x1, x0
 158:	ldr	x0, [x2, #16]
 15c:	cmp	x0, x1
 160:	b.cs	1a4 <CplusV3DemangleCallback+0x70>  // b.hs, b.nlast
 164:	lsl	x0, x0, #1
 168:	cmp	x0, x1
 16c:	csel	x0, x1, x0, cc  // cc = lo, ul, last
 170:	str	x0, [x2, #16]
 174:	mov	x2, #0x0                   	// #0
 178:	mov	x1, #0x0                   	// #0
 17c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 180:	mov	x22, x0
 184:	ldr	x1, [x19]
 188:	cbz	x1, 1a0 <CplusV3DemangleCallback+0x6c>
 18c:	ldr	x2, [x19, #8]
 190:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 194:	mov	x1, #0x0                   	// #0
 198:	ldr	x0, [x19]
 19c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1a0:	str	x22, [x19]
 1a4:	ldr	x3, [x19]
 1a8:	ldr	x0, [x19, #8]
 1ac:	mov	x2, x20
 1b0:	mov	x1, x21
 1b4:	add	x0, x3, x0
 1b8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1bc:	ldr	x0, [x19]
 1c0:	ldr	x1, [x19, #8]
 1c4:	add	x0, x0, x20
 1c8:	strb	wzr, [x0, x1]
 1cc:	ldr	x1, [x19, #8]
 1d0:	add	x20, x1, x20
 1d4:	str	x20, [x19, #8]
 1d8:	ldp	x21, x22, [sp, #16]
 1dc:	ldr	x30, [sp, #32]
 1e0:	ldp	x19, x20, [sp], #48
 1e4:	ret

00000000000001e8 <SymbolizeCodeCallback>:
 1e8:	cbz	x2, 2f8 <SymbolizeCodeCallback+0x110>
 1ec:	stp	x19, x20, [sp, #-48]!
 1f0:	stp	x21, x22, [sp, #16]
 1f4:	str	x30, [sp, #32]
 1f8:	mov	x19, x0
 1fc:	mov	x21, x1
 200:	mov	x20, x2
 204:	ldr	x0, [x0, #8]
 208:	cbz	x0, 260 <SymbolizeCodeCallback+0x78>
 20c:	ldr	x0, [x19, #16]
 210:	cbnz	x0, 280 <SymbolizeCodeCallback+0x98>
 214:	ldr	x0, [x19]
 218:	ldr	x3, [x0, #8]
 21c:	cmp	x21, x3
 220:	b.ne	2b4 <SymbolizeCodeCallback+0xcc>  // b.any
 224:	ldr	x21, [x19, #8]
 228:	ldr	x4, [x21, #8]
 22c:	cmp	x3, x4
 230:	b.ne	2d4 <SymbolizeCodeCallback+0xec>  // b.any
 234:	mov	x0, x20
 238:	bl	b0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc>
 23c:	cbz	x0, 2ec <SymbolizeCodeCallback+0x104>
 240:	str	x0, [x21, #40]
 244:	ldr	x0, [x19, #16]
 248:	add	x0, x0, #0x1
 24c:	str	x0, [x19, #16]
 250:	ldp	x21, x22, [sp, #16]
 254:	ldr	x30, [sp, #32]
 258:	ldp	x19, x20, [sp], #48
 25c:	ret
 260:	mov	x4, #0x0                   	// #0
 264:	mov	x3, #0x0                   	// #0
 268:	adrp	x2, 0 <ErrorCallback>
 26c:	add	x2, x2, #0x0
 270:	mov	w1, #0x5c                  	// #92
 274:	adrp	x0, 0 <ErrorCallback>
 278:	add	x0, x0, #0x0
 27c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 280:	mov	x0, x1
 284:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 288:	mov	x22, x0
 28c:	ldr	x0, [x19]
 290:	ldr	w3, [x0, #32]
 294:	ldr	x2, [x0, #24]
 298:	ldr	x1, [x0, #16]
 29c:	add	x0, x22, #0x8
 2a0:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 2a4:	ldr	x0, [x19, #8]
 2a8:	str	x22, [x0]
 2ac:	str	x22, [x19, #8]
 2b0:	b	214 <SymbolizeCodeCallback+0x2c>
 2b4:	mov	x4, x3
 2b8:	mov	x3, x21
 2bc:	adrp	x2, 0 <ErrorCallback>
 2c0:	add	x2, x2, #0x0
 2c4:	mov	w1, #0x65                  	// #101
 2c8:	adrp	x0, 0 <ErrorCallback>
 2cc:	add	x0, x0, #0x0
 2d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2d4:	adrp	x2, 0 <ErrorCallback>
 2d8:	add	x2, x2, #0x0
 2dc:	mov	w1, #0x66                  	// #102
 2e0:	adrp	x0, 0 <ErrorCallback>
 2e4:	add	x0, x0, #0x0
 2e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2ec:	mov	x0, x20
 2f0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2f4:	b	240 <SymbolizeCodeCallback+0x58>
 2f8:	ret

00000000000002fc <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc>:
 2fc:	str	x30, [sp, #-16]!
 300:	mov	x0, x1
 304:	bl	b0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc>
 308:	ldr	x30, [sp], #16
 30c:	ret

0000000000000310 <SymbolizeDataCallback>:
 310:	cmp	x2, #0x0
 314:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 318:	b.ne	320 <SymbolizeDataCallback+0x10>  // b.any
 31c:	ret
 320:	stp	x19, x20, [sp, #-48]!
 324:	stp	x21, x22, [sp, #16]
 328:	str	x30, [sp, #32]
 32c:	mov	x21, x0
 330:	mov	x19, x2
 334:	mov	x20, x3
 338:	mov	x22, x4
 33c:	mov	x0, x2
 340:	bl	b0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc>
 344:	cbz	x0, 364 <SymbolizeDataCallback+0x54>
 348:	str	x0, [x21, #40]
 34c:	str	x20, [x21, #48]
 350:	str	x22, [x21, #56]
 354:	ldp	x21, x22, [sp, #16]
 358:	ldr	x30, [sp, #32]
 35c:	ldp	x19, x20, [sp], #48
 360:	ret
 364:	mov	x0, x19
 368:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 36c:	b	348 <SymbolizeDataCallback+0x38>

0000000000000370 <SymbolizeCodePCInfoCallback>:
 370:	cbz	x4, 4a8 <SymbolizeCodePCInfoCallback+0x138>
 374:	stp	x19, x20, [sp, #-64]!
 378:	stp	x21, x22, [sp, #16]
 37c:	stp	x23, x24, [sp, #32]
 380:	str	x30, [sp, #48]
 384:	mov	x19, x0
 388:	mov	x21, x1
 38c:	mov	x22, x2
 390:	mov	w23, w3
 394:	mov	x20, x4
 398:	ldr	x0, [x0, #8]
 39c:	cbz	x0, 410 <SymbolizeCodePCInfoCallback+0xa0>
 3a0:	ldr	x0, [x19, #16]
 3a4:	cbnz	x0, 430 <SymbolizeCodePCInfoCallback+0xc0>
 3a8:	ldr	x0, [x19]
 3ac:	ldr	x3, [x0, #8]
 3b0:	cmp	x21, x3
 3b4:	b.ne	464 <SymbolizeCodePCInfoCallback+0xf4>  // b.any
 3b8:	ldr	x21, [x19, #8]
 3bc:	ldr	x4, [x21, #8]
 3c0:	cmp	x3, x4
 3c4:	b.ne	484 <SymbolizeCodePCInfoCallback+0x114>  // b.any
 3c8:	mov	x0, x20
 3cc:	bl	b0 <_ZN11__sanitizer12_GLOBAL__N_115CplusV3DemangleEPKc>
 3d0:	cbz	x0, 49c <SymbolizeCodePCInfoCallback+0x12c>
 3d4:	str	x0, [x21, #40]
 3d8:	cbz	x22, 3e8 <SymbolizeCodePCInfoCallback+0x78>
 3dc:	mov	x0, x22
 3e0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 3e4:	str	x0, [x21, #56]
 3e8:	str	w23, [x21, #64]
 3ec:	ldr	x0, [x19, #16]
 3f0:	add	x0, x0, #0x1
 3f4:	str	x0, [x19, #16]
 3f8:	mov	w0, #0x0                   	// #0
 3fc:	ldp	x21, x22, [sp, #16]
 400:	ldp	x23, x24, [sp, #32]
 404:	ldr	x30, [sp, #48]
 408:	ldp	x19, x20, [sp], #64
 40c:	ret
 410:	mov	x4, #0x0                   	// #0
 414:	mov	x3, #0x0                   	// #0
 418:	adrp	x2, 0 <ErrorCallback>
 41c:	add	x2, x2, #0x0
 420:	mov	w1, #0x5c                  	// #92
 424:	adrp	x0, 0 <ErrorCallback>
 428:	add	x0, x0, #0x0
 42c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 430:	mov	x0, x1
 434:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 438:	mov	x24, x0
 43c:	ldr	x0, [x19]
 440:	ldr	w3, [x0, #32]
 444:	ldr	x2, [x0, #24]
 448:	ldr	x1, [x0, #16]
 44c:	add	x0, x24, #0x8
 450:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 454:	ldr	x0, [x19, #8]
 458:	str	x24, [x0]
 45c:	str	x24, [x19, #8]
 460:	b	3a8 <SymbolizeCodePCInfoCallback+0x38>
 464:	mov	x4, x3
 468:	mov	x3, x21
 46c:	adrp	x2, 0 <ErrorCallback>
 470:	add	x2, x2, #0x0
 474:	mov	w1, #0x65                  	// #101
 478:	adrp	x0, 0 <ErrorCallback>
 47c:	add	x0, x0, #0x0
 480:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 484:	adrp	x2, 0 <ErrorCallback>
 488:	add	x2, x2, #0x0
 48c:	mov	w1, #0x66                  	// #102
 490:	adrp	x0, 0 <ErrorCallback>
 494:	add	x0, x0, #0x0
 498:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 49c:	mov	x0, x20
 4a0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 4a4:	b	3d4 <SymbolizeCodePCInfoCallback+0x64>
 4a8:	mov	w0, #0x0                   	// #0
 4ac:	ret

00000000000004b0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>:
 4b0:	stp	x19, x20, [sp, #-32]!
 4b4:	str	x30, [sp, #16]
 4b8:	mov	x20, x0
 4bc:	mov	x3, #0x0                   	// #0
 4c0:	adrp	x2, 0 <ErrorCallback>
 4c4:	add	x2, x2, #0x0
 4c8:	mov	w1, #0x0                   	// #0
 4cc:	adrp	x0, 0 <ErrorCallback>
 4d0:	add	x0, x0, #0x0
 4d4:	bl	0 <__asan_backtrace_create_state>
 4d8:	mov	x19, x0
 4dc:	cbz	x0, 500 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE+0x50>
 4e0:	mov	x1, #0x18                  	// #24
 4e4:	mov	x0, x20
 4e8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 4ec:	str	xzr, [x0, #8]
 4f0:	adrp	x1, 0 <ErrorCallback>
 4f4:	add	x1, x1, #0x0
 4f8:	str	x1, [x0]
 4fc:	str	x19, [x0, #16]
 500:	ldr	x30, [sp, #16]
 504:	ldp	x19, x20, [sp], #32
 508:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

sanitizer_symbolizer_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x21, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 98 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x98>
  18:	mov	x22, x1
  1c:	mov	x19, #0x0                   	// #0
  20:	mov	x20, #0x0                   	// #0
  24:	ldr	x0, [x21]
  28:	mov	x1, x22
  2c:	add	x0, x0, x19
  30:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
  34:	and	w0, w0, #0xff
  38:	cbnz	w0, 64 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x64>
  3c:	add	x20, x20, #0x1
  40:	add	x19, x19, #0x48
  44:	ldr	x0, [x21, #16]
  48:	cmp	x20, x0
  4c:	b.cc	24 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x24>  // b.lo, b.ul, b.last
  50:	mov	x0, #0x0                   	// #0
  54:	ldp	x21, x22, [sp, #16]
  58:	ldr	x30, [sp, #32]
  5c:	ldp	x19, x20, [sp], #48
  60:	ret
  64:	ldr	x4, [x21, #16]
  68:	cmp	x4, x20
  6c:	b.ls	7c <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x7c>  // b.plast
  70:	ldr	x0, [x21]
  74:	add	x0, x0, x19
  78:	b	54 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x54>
  7c:	mov	x3, x20
  80:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
  84:	add	x2, x2, #0x0
  88:	mov	w1, #0x2f9                 	// #761
  8c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
  90:	add	x0, x0, #0x0
  94:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  98:	mov	x0, #0x0                   	// #0
  9c:	b	54 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x54>

00000000000000a0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>:
  a0:	stp	x19, x20, [sp, #-80]!
  a4:	str	x30, [sp, #56]
  a8:	mov	w20, #0x1                   	// #1
  ac:	cbz	x2, 174 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xd4>
  b0:	stp	x21, x22, [sp, #16]
  b4:	stp	x23, x24, [sp, #32]
  b8:	str	x25, [sp, #48]
  bc:	mov	x21, x0
  c0:	mov	x22, x1
  c4:	mov	x23, x2
  c8:	mov	x19, #0x0                   	// #0
  cc:	add	x25, sp, #0x48
  d0:	sub	x24, x2, #0x1
  d4:	str	xzr, [sp, #72]
  d8:	mov	x4, #0x0                   	// #0
  dc:	mov	x3, x25
  e0:	sub	x2, x24, x19
  e4:	add	x1, x22, x19
  e8:	ldr	w0, [x21, #16]
  ec:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
  f0:	ands	w20, w0, #0xff
  f4:	b.eq	154 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xb4>  // b.none
  f8:	ldr	x0, [sp, #72]
  fc:	cbz	x0, 154 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xb4>
 100:	add	x19, x19, x0
 104:	ldr	x0, [x21]
 108:	ldr	x3, [x0]
 10c:	mov	x2, x19
 110:	mov	x1, x22
 114:	mov	x0, x21
 118:	blr	x3
 11c:	and	w3, w0, #0xff
 120:	cbnz	w3, 140 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xa0>
 124:	add	x0, x19, #0x1
 128:	cmp	x0, x23
 12c:	b.ne	d4 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x34>  // b.any
 130:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 134:	add	x0, x0, #0x0
 138:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 13c:	mov	x19, #0x0                   	// #0
 140:	strb	wzr, [x22, x19]
 144:	ldp	x21, x22, [sp, #16]
 148:	ldp	x23, x24, [sp, #32]
 14c:	ldr	x25, [sp, #48]
 150:	b	174 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xd4>
 154:	ldr	w1, [x21, #16]
 158:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 164:	mov	w20, #0x0                   	// #0
 168:	ldp	x21, x22, [sp, #16]
 16c:	ldp	x23, x24, [sp, #32]
 170:	ldr	x25, [sp, #48]
 174:	mov	w0, w20
 178:	ldr	x30, [sp, #56]
 17c:	ldp	x19, x20, [sp], #80
 180:	ret

0000000000000184 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>:
 184:	str	x30, [sp, #-16]!
 188:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
 18c:	ldr	x0, [x0]
 190:	mov	w2, #0x1                   	// #1
 194:	ldxrb	w1, [x0]
 198:	stxrb	w3, w2, [x0]
 19c:	cbnz	w3, 194 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x10>
 1a0:	dmb	ish
 1a4:	and	w0, w1, #0xff
 1a8:	cbnz	w0, 1d4 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x50>
 1ac:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer11symbolizer_E>
 1b0:	ldr	x0, [x0]
 1b4:	ldr	x0, [x0]
 1b8:	cbz	x0, 1e4 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x60>
 1bc:	dmb	ish
 1c0:	adrp	x1, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
 1c4:	ldr	x1, [x1]
 1c8:	strb	wzr, [x1]
 1cc:	ldr	x30, [sp], #16
 1d0:	ret
 1d4:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
 1d8:	ldr	x0, [x0]
 1dc:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 1e0:	b	1ac <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x28>
 1e4:	bl	0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>
 1e8:	adrp	x1, 0 <_ZN11__sanitizer10Symbolizer11symbolizer_E>
 1ec:	ldr	x1, [x1]
 1f0:	str	x0, [x1]
 1f4:	cbnz	x0, 1bc <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x38>
 1f8:	mov	x4, #0x0                   	// #0
 1fc:	mov	x3, #0x0                   	// #0
 200:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 204:	add	x2, x2, #0x0
 208:	mov	w1, #0x17                  	// #23
 20c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 210:	add	x0, x0, #0x0
 214:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>:
 218:	stp	x19, x20, [sp, #-32]!
 21c:	stp	x21, x30, [sp, #16]
 220:	mov	x20, x0
 224:	mov	x21, x2
 228:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
 22c:	mov	x19, x0
 230:	mov	x2, #0x0                   	// #0
 234:	mov	x1, #0x0                   	// #0
 238:	add	x0, x0, #0x1
 23c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 240:	str	x0, [x21]
 244:	mov	x2, x19
 248:	mov	x1, x20
 24c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 250:	ldr	x0, [x21]
 254:	strb	wzr, [x0, x19]
 258:	add	x0, x20, x19
 25c:	ldrb	w1, [x20, x19]
 260:	cmp	w1, #0x0
 264:	cinc	x0, x0, ne  // ne = any
 268:	ldp	x21, x30, [sp, #16]
 26c:	ldp	x19, x20, [sp], #32
 270:	ret

0000000000000274 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi>:
 274:	stp	x19, x20, [sp, #-48]!
 278:	str	x30, [sp, #16]
 27c:	mov	x20, x2
 280:	add	x2, sp, #0x28
 284:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 288:	mov	x19, x0
 28c:	ldr	x0, [sp, #40]
 290:	cbz	x0, 29c <_ZN11__sanitizer10ExtractIntEPKcS1_Pi+0x28>
 294:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 298:	str	w0, [x20]
 29c:	mov	x1, #0x0                   	// #0
 2a0:	ldr	x0, [sp, #40]
 2a4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2a8:	mov	x0, x19
 2ac:	ldr	x30, [sp, #16]
 2b0:	ldp	x19, x20, [sp], #48
 2b4:	ret

00000000000002b8 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>:
 2b8:	stp	x19, x20, [sp, #-48]!
 2bc:	str	x30, [sp, #16]
 2c0:	mov	x20, x2
 2c4:	add	x2, sp, #0x28
 2c8:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 2cc:	mov	x19, x0
 2d0:	ldr	x0, [sp, #40]
 2d4:	cbz	x0, 2e0 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm+0x28>
 2d8:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 2dc:	str	x0, [x20]
 2e0:	mov	x1, #0x0                   	// #0
 2e4:	ldr	x0, [sp, #40]
 2e8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2ec:	mov	x0, x19
 2f0:	ldr	x30, [sp, #16]
 2f4:	ldp	x19, x20, [sp], #48
 2f8:	ret

00000000000002fc <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc>:
 2fc:	stp	x19, x20, [sp, #-48]!
 300:	stp	x21, x22, [sp, #16]
 304:	str	x30, [sp, #32]
 308:	mov	x20, x0
 30c:	mov	x22, x1
 310:	mov	x21, x2
 314:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 318:	cbz	x0, 368 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x6c>
 31c:	sub	x19, x0, x20
 320:	mov	x2, #0x0                   	// #0
 324:	mov	x1, #0x0                   	// #0
 328:	add	x0, x19, #0x1
 32c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 330:	str	x0, [x21]
 334:	mov	x2, x19
 338:	mov	x1, x20
 33c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 340:	ldr	x0, [x21]
 344:	strb	wzr, [x0, x19]
 348:	add	x21, x20, x19
 34c:	ldrb	w0, [x20, x19]
 350:	cbnz	w0, 378 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x7c>
 354:	mov	x0, x21
 358:	ldp	x21, x22, [sp, #16]
 35c:	ldr	x30, [sp, #32]
 360:	ldp	x19, x20, [sp], #48
 364:	ret
 368:	mov	x0, x20
 36c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 370:	mov	x19, x0
 374:	b	320 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x24>
 378:	mov	x0, x22
 37c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 380:	add	x21, x21, x0
 384:	b	354 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x58>

0000000000000388 <_ZN11__sanitizer10Symbolizer5FlushEv>:
 388:	stp	x19, x20, [sp, #-64]!
 38c:	stp	x21, x22, [sp, #16]
 390:	str	x30, [sp, #32]
 394:	mov	x21, x0
 398:	add	x22, x0, #0x70
 39c:	mov	x0, x22
 3a0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 3a4:	ldr	x19, [x21, #208]
 3a8:	cbz	x19, 3dc <_ZN11__sanitizer10Symbolizer5FlushEv+0x54>
 3ac:	add	x20, sp, #0x38
 3b0:	mov	x1, x21
 3b4:	mov	x0, x20
 3b8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 3bc:	ldr	x1, [x19]
 3c0:	ldr	x1, [x1, #16]
 3c4:	mov	x0, x19
 3c8:	blr	x1
 3cc:	mov	x0, x20
 3d0:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 3d4:	ldr	x19, [x19, #8]
 3d8:	cbnz	x19, 3b0 <_ZN11__sanitizer10Symbolizer5FlushEv+0x28>
 3dc:	mov	x0, x22
 3e0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 3e4:	ldp	x21, x22, [sp, #16]
 3e8:	ldr	x30, [sp, #32]
 3ec:	ldp	x19, x20, [sp], #64
 3f0:	ret

00000000000003f4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc>:
 3f4:	stp	x19, x20, [sp, #-80]!
 3f8:	stp	x21, x22, [sp, #16]
 3fc:	stp	x23, x24, [sp, #32]
 400:	str	x30, [sp, #48]
 404:	mov	x22, x0
 408:	mov	x23, x1
 40c:	add	x24, x0, #0x70
 410:	mov	x0, x24
 414:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 418:	ldr	x19, [x22, #208]
 41c:	cbz	x19, 45c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x68>
 420:	add	x21, sp, #0x48
 424:	mov	x1, x22
 428:	mov	x0, x21
 42c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 430:	ldr	x2, [x19]
 434:	ldr	x2, [x2, #24]
 438:	mov	x1, x23
 43c:	mov	x0, x19
 440:	blr	x2
 444:	mov	x20, x0
 448:	cbnz	x0, 48c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x98>
 44c:	mov	x0, x21
 450:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 454:	ldr	x19, [x19, #8]
 458:	cbnz	x19, 424 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x30>
 45c:	mov	x1, x23
 460:	mov	x0, x22
 464:	bl	0 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>
 468:	mov	x20, x0
 46c:	mov	x0, x24
 470:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 474:	mov	x0, x20
 478:	ldp	x21, x22, [sp, #16]
 47c:	ldp	x23, x24, [sp, #32]
 480:	ldr	x30, [sp, #48]
 484:	ldp	x19, x20, [sp], #80
 488:	ret
 48c:	add	x0, sp, #0x48
 490:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 494:	b	46c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x78>

0000000000000498 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>:
 498:	stp	x19, x20, [sp, #-32]!
 49c:	str	x30, [sp, #16]
 4a0:	mov	x19, x0
 4a4:	add	x20, x0, #0x28
 4a8:	mov	x0, x20
 4ac:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 4b0:	add	x0, x19, #0x48
 4b4:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
 4b8:	ldr	x0, [x19, #56]
 4bc:	cbz	x0, 4d4 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv+0x3c>
 4c0:	mov	w0, #0x1                   	// #1
 4c4:	strb	w0, [x19, #104]
 4c8:	ldr	x30, [sp, #16]
 4cc:	ldp	x19, x20, [sp], #32
 4d0:	ret
 4d4:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 4d8:	add	x0, x0, #0x0
 4dc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4e0:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000004e4 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>:
 4e4:	stp	x19, x20, [sp, #-32]!
 4e8:	str	x30, [sp, #24]
 4ec:	mov	x19, x0
 4f0:	mov	x20, x1
 4f4:	ldrb	w0, [x0, #104]
 4f8:	cbz	w0, 520 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x3c>
 4fc:	str	x21, [sp, #16]
 500:	add	x21, x19, #0x28
 504:	mov	x0, x21
 508:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 50c:	cbz	x0, 554 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x70>
 510:	ldr	x21, [sp, #16]
 514:	ldr	x30, [sp, #24]
 518:	ldp	x19, x20, [sp], #32
 51c:	ret
 520:	mov	x0, x19
 524:	bl	498 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>
 528:	mov	x1, x20
 52c:	add	x0, x19, #0x28
 530:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 534:	cbnz	x0, 514 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x30>
 538:	ldr	x1, [x19, #88]
 53c:	mov	x0, #0x0                   	// #0
 540:	cbz	x1, 514 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x30>
 544:	mov	x1, x20
 548:	add	x0, x19, #0x48
 54c:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 550:	b	514 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x30>
 554:	mov	x0, x19
 558:	bl	498 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>
 55c:	mov	x1, x20
 560:	mov	x0, x21
 564:	bl	0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 568:	cbz	x0, 574 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x90>
 56c:	ldr	x21, [sp, #16]
 570:	b	514 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x30>
 574:	ldr	x21, [sp, #16]
 578:	b	538 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x54>

000000000000057c <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>:
 57c:	stp	x19, x20, [sp, #-48]!
 580:	stp	x21, x22, [sp, #16]
 584:	str	x30, [sp, #32]
 588:	mov	x22, x1
 58c:	mov	x21, x2
 590:	mov	x20, x3
 594:	mov	x19, x4
 598:	bl	4e4 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
 59c:	cbz	x0, 5d0 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x54>
 5a0:	ldr	x1, [x0]
 5a4:	str	x1, [x21]
 5a8:	ldr	x1, [x0, #8]
 5ac:	sub	x1, x22, x1
 5b0:	str	x1, [x20]
 5b4:	ldr	w0, [x0, #24]
 5b8:	str	w0, [x19]
 5bc:	mov	w0, #0x1                   	// #1
 5c0:	ldp	x21, x22, [sp, #16]
 5c4:	ldr	x30, [sp, #32]
 5c8:	ldp	x19, x20, [sp], #48
 5cc:	ret
 5d0:	mov	w0, #0x0                   	// #0
 5d4:	b	5c0 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x44>

00000000000005d8 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>:
 5d8:	stp	x19, x20, [sp, #-64]!
 5dc:	stp	x21, x22, [sp, #16]
 5e0:	stp	x23, x30, [sp, #32]
 5e4:	mov	x19, x0
 5e8:	mov	x21, x1
 5ec:	mov	x20, x2
 5f0:	mov	x22, x3
 5f4:	add	x23, x0, #0x70
 5f8:	mov	x0, x23
 5fc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 600:	str	xzr, [sp, #56]
 604:	add	x4, sp, #0x34
 608:	mov	x3, x22
 60c:	add	x2, sp, #0x38
 610:	mov	x1, x21
 614:	mov	x0, x19
 618:	bl	57c <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 61c:	mov	w21, w0
 620:	tst	w0, #0xff
 624:	b.eq	63c <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x64>  // b.none
 628:	cbz	x20, 63c <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x64>
 62c:	ldr	x1, [sp, #56]
 630:	mov	x0, x19
 634:	bl	0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>
 638:	str	x0, [x20]
 63c:	mov	x0, x23
 640:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 644:	mov	w0, w21
 648:	ldp	x21, x22, [sp, #16]
 64c:	ldp	x23, x30, [sp, #32]
 650:	ldp	x19, x20, [sp], #64
 654:	ret

0000000000000658 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>:
 658:	stp	x19, x20, [sp, #-96]!
 65c:	stp	x21, x22, [sp, #16]
 660:	stp	x23, x24, [sp, #32]
 664:	str	x30, [sp, #48]
 668:	mov	x20, x0
 66c:	mov	x21, x1
 670:	add	x24, x0, #0x70
 674:	mov	x0, x24
 678:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 67c:	mov	x0, x21
 680:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 684:	mov	x23, x0
 688:	add	x4, sp, #0x4c
 68c:	add	x3, sp, #0x50
 690:	add	x2, sp, #0x58
 694:	mov	x1, x21
 698:	mov	x0, x20
 69c:	bl	57c <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 6a0:	and	w0, w0, #0xff
 6a4:	cbnz	w0, 6c8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x70>
 6a8:	mov	x0, x24
 6ac:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 6b0:	mov	x0, x23
 6b4:	ldp	x21, x22, [sp, #16]
 6b8:	ldp	x23, x24, [sp, #32]
 6bc:	ldr	x30, [sp, #48]
 6c0:	ldp	x19, x20, [sp], #96
 6c4:	ret
 6c8:	ldr	w3, [sp, #76]
 6cc:	ldr	x2, [sp, #80]
 6d0:	ldr	x1, [sp, #88]
 6d4:	add	x0, x23, #0x8
 6d8:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 6dc:	ldr	x19, [x20, #208]
 6e0:	cbz	x19, 6a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x50>
 6e4:	add	x22, sp, #0x40
 6e8:	mov	x1, x20
 6ec:	mov	x0, x22
 6f0:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 6f4:	ldr	x0, [x19]
 6f8:	ldr	x3, [x0]
 6fc:	mov	x2, x23
 700:	mov	x1, x21
 704:	mov	x0, x19
 708:	blr	x3
 70c:	and	w2, w0, #0xff
 710:	cbnz	w2, 728 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xd0>
 714:	mov	x0, x22
 718:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 71c:	ldr	x19, [x19, #8]
 720:	cbnz	x19, 6e8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x90>
 724:	b	6a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x50>
 728:	add	x0, sp, #0x40
 72c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 730:	b	6a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x50>

0000000000000734 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>:
 734:	stp	x19, x20, [sp, #-112]!
 738:	stp	x21, x22, [sp, #16]
 73c:	stp	x23, x24, [sp, #32]
 740:	stp	x25, x26, [sp, #48]
 744:	str	x30, [sp, #64]
 748:	mov	x21, x0
 74c:	mov	x24, x1
 750:	mov	x22, x2
 754:	add	x26, x0, #0x70
 758:	mov	x0, x26
 75c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 760:	add	x4, sp, #0x5c
 764:	add	x3, sp, #0x60
 768:	add	x2, sp, #0x68
 76c:	mov	x1, x24
 770:	mov	x0, x21
 774:	bl	57c <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 778:	ands	w25, w0, #0xff
 77c:	b.ne	7a4 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x70>  // b.any
 780:	mov	x0, x26
 784:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 788:	mov	w0, w25
 78c:	ldp	x21, x22, [sp, #16]
 790:	ldp	x23, x24, [sp, #32]
 794:	ldp	x25, x26, [sp, #48]
 798:	ldr	x30, [sp, #64]
 79c:	ldp	x19, x20, [sp], #112
 7a0:	ret
 7a4:	mov	x0, x22
 7a8:	bl	0 <_ZN11__sanitizer8DataInfo5ClearEv>
 7ac:	ldr	x0, [sp, #104]
 7b0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 7b4:	str	x0, [x22]
 7b8:	ldr	x0, [sp, #96]
 7bc:	str	x0, [x22, #8]
 7c0:	ldr	w0, [sp, #92]
 7c4:	str	w0, [x22, #16]
 7c8:	ldr	x19, [x21, #208]
 7cc:	cbz	x19, 780 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x4c>
 7d0:	add	x23, sp, #0x50
 7d4:	mov	x1, x21
 7d8:	mov	x0, x23
 7dc:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 7e0:	ldr	x0, [x19]
 7e4:	ldr	x3, [x0, #8]
 7e8:	mov	x2, x22
 7ec:	mov	x1, x24
 7f0:	mov	x0, x19
 7f4:	blr	x3
 7f8:	ands	w20, w0, #0xff
 7fc:	b.ne	814 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xe0>  // b.any
 800:	mov	x0, x23
 804:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 808:	ldr	x19, [x19, #8]
 80c:	cbnz	x19, 7d4 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xa0>
 810:	b	780 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x4c>
 814:	add	x0, sp, #0x50
 818:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 81c:	mov	w25, w20
 820:	b	780 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x4c>

0000000000000824 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>:
 824:	stp	x19, x20, [sp, #-128]!
 828:	stp	x21, x22, [sp, #16]
 82c:	stp	x23, x24, [sp, #32]
 830:	stp	x25, x26, [sp, #48]
 834:	stp	x27, x28, [sp, #64]
 838:	str	x30, [sp, #80]
 83c:	mov	x21, x0
 840:	mov	x22, x1
 844:	str	x1, [sp, #104]
 848:	mov	w19, #0x1                   	// #1
 84c:	add	x26, sp, #0x70
 850:	adrp	x23, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 854:	add	x23, x23, #0x0
 858:	add	x27, sp, #0x78
 85c:	adrp	x28, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 860:	add	x28, x28, #0x0
 864:	b	9b4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x190>
 868:	mov	x4, #0x0                   	// #0
 86c:	mov	x3, #0x0                   	// #0
 870:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 874:	add	x2, x2, #0x0
 878:	mov	w1, #0x12c                 	// #300
 87c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 880:	add	x0, x0, #0x0
 884:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 888:	mov	x1, #0x0                   	// #0
 88c:	mov	x0, x2
 890:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 894:	ldp	x21, x22, [sp, #16]
 898:	ldp	x23, x24, [sp, #32]
 89c:	ldp	x25, x26, [sp, #48]
 8a0:	ldp	x27, x28, [sp, #64]
 8a4:	ldr	x30, [sp, #80]
 8a8:	ldp	x19, x20, [sp], #128
 8ac:	ret
 8b0:	ldr	x0, [x22, #8]
 8b4:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 8b8:	mov	x20, x0
 8bc:	ldr	w3, [x22, #32]
 8c0:	ldr	x2, [x22, #24]
 8c4:	ldr	x1, [x22, #16]
 8c8:	add	x0, x0, #0x8
 8cc:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 8d0:	ldr	x0, [sp, #104]
 8d4:	str	x20, [x0]
 8d8:	str	x20, [sp, #104]
 8dc:	b	9e4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1c0>
 8e0:	mov	x4, #0x0                   	// #0
 8e4:	mov	x3, #0x0                   	// #0
 8e8:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 8ec:	add	x2, x2, #0x0
 8f0:	mov	w1, #0x10d                 	// #269
 8f4:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 8f8:	add	x0, x0, #0x0
 8fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 900:	ldrb	w0, [x19]
 904:	cmp	w0, #0x3a
 908:	b.ne	96c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x148>  // b.any
 90c:	ldrb	w0, [x19, #1]
 910:	sub	w0, w0, #0x30
 914:	cmp	w0, #0x9
 918:	b.hi	96c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x148>  // b.pmore
 91c:	ldr	w0, [x20, #64]
 920:	str	w0, [x20, #68]
 924:	add	x0, x19, #0x1
 928:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 92c:	str	w0, [x20, #64]
 930:	strb	wzr, [x19], #-1
 934:	subs	w25, w25, #0x1
 938:	b.eq	96c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x148>  // b.none
 93c:	ldr	x1, [sp, #120]
 940:	cmp	x19, x1
 944:	b.ls	900 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xdc>  // b.plast
 948:	ldrb	w0, [x19]
 94c:	sub	w0, w0, #0x30
 950:	cmp	w0, #0x9
 954:	b.hi	900 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xdc>  // b.pmore
 958:	sub	x19, x19, #0x1
 95c:	cmp	x1, x19
 960:	b.ne	948 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x124>  // b.any
 964:	mov	x19, x1
 968:	b	900 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xdc>
 96c:	add	x2, x20, #0x38
 970:	mov	x1, x28
 974:	ldr	x0, [sp, #120]
 978:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 97c:	mov	x1, #0x0                   	// #0
 980:	ldr	x0, [sp, #120]
 984:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 988:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 98c:	add	x1, x1, #0x0
 990:	ldr	x0, [x20, #40]
 994:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 998:	cbz	w0, a28 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x204>
 99c:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 9a0:	add	x1, x1, #0x0
 9a4:	ldr	x0, [x20, #56]
 9a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 9ac:	cbz	w0, a3c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x218>
 9b0:	mov	w19, #0x0                   	// #0
 9b4:	str	xzr, [sp, #112]
 9b8:	mov	x2, x26
 9bc:	mov	x1, x23
 9c0:	mov	x0, x21
 9c4:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 9c8:	mov	x21, x0
 9cc:	ldr	x2, [sp, #112]
 9d0:	cbz	x2, 868 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x44>
 9d4:	ldrb	w0, [x2]
 9d8:	cbz	w0, 888 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x64>
 9dc:	mov	x20, x22
 9e0:	cbz	w19, 8b0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x8c>
 9e4:	ldr	x0, [sp, #112]
 9e8:	str	x0, [x20, #40]
 9ec:	str	xzr, [sp, #120]
 9f0:	mov	x2, x27
 9f4:	mov	x1, x23
 9f8:	mov	x0, x21
 9fc:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 a00:	mov	x21, x0
 a04:	ldr	x0, [sp, #120]
 a08:	cbz	x0, 8e0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xbc>
 a0c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 a10:	cbz	x0, 97c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x158>
 a14:	sub	x0, x0, #0x1
 a18:	ldr	x19, [sp, #120]
 a1c:	add	x19, x19, x0
 a20:	mov	w25, #0x2                   	// #2
 a24:	b	93c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x118>
 a28:	mov	x1, #0x0                   	// #0
 a2c:	ldr	x0, [x20, #40]
 a30:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 a34:	str	xzr, [x20, #40]
 a38:	b	99c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x178>
 a3c:	mov	x1, #0x0                   	// #0
 a40:	ldr	x0, [x20, #56]
 a44:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 a48:	str	xzr, [x20, #56]
 a4c:	b	9b0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x18c>

0000000000000a50 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>:
 a50:	stp	x19, x20, [sp, #-32]!
 a54:	str	x30, [sp, #16]
 a58:	mov	x19, x1
 a5c:	adrp	x20, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 a60:	add	x20, x20, #0x0
 a64:	add	x2, x1, #0x28
 a68:	mov	x1, x20
 a6c:	bl	218 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 a70:	add	x2, x19, #0x30
 a74:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 a78:	add	x1, x1, #0x0
 a7c:	bl	2b8 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>
 a80:	add	x2, x19, #0x38
 a84:	mov	x1, x20
 a88:	bl	2b8 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>
 a8c:	ldr	x30, [sp, #16]
 a90:	ldp	x19, x20, [sp], #32
 a94:	ret

0000000000000a98 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>:
 a98:	str	x30, [sp, #-16]!
 a9c:	adrp	x3, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 aa0:	add	x3, x3, #0x0
 aa4:	str	x3, [x0]
 aa8:	str	x1, [x0, #8]
 aac:	mov	w3, #0xffffffff            	// #-1
 ab0:	str	w3, [x0, #16]
 ab4:	str	w3, [x0, #20]
 ab8:	str	xzr, [x0, #16408]
 abc:	add	x0, x0, #0x4, lsl #12
 ac0:	strb	wzr, [x0, #32]
 ac4:	strb	wzr, [x0, #33]
 ac8:	strb	w2, [x0, #34]
 acc:	cbz	x1, ae0 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x48>
 ad0:	ldrb	w0, [x1]
 ad4:	cbz	w0, b00 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x68>
 ad8:	ldr	x30, [sp], #16
 adc:	ret
 ae0:	mov	x4, #0x0                   	// #0
 ae4:	mov	x3, #0x0                   	// #0
 ae8:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 aec:	add	x2, x2, #0x0
 af0:	mov	w1, #0x18f                 	// #399
 af4:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 af8:	add	x0, x0, #0x0
 afc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b00:	mov	x4, #0x0                   	// #0
 b04:	mov	x3, #0x0                   	// #0
 b08:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 b0c:	add	x2, x2, #0x0
 b10:	mov	w1, #0x190                 	// #400
 b14:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 b18:	add	x0, x0, #0x0
 b1c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000b20 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>:
 b20:	stp	x19, x20, [sp, #-32]!
 b24:	stp	x21, x30, [sp, #16]
 b28:	mov	x19, x0
 b2c:	mov	x21, x1
 b30:	mov	x0, x2
 b34:	str	xzr, [x19, #8]
 b38:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 b3c:	add	x1, x1, #0x0
 b40:	str	x1, [x19]
 b44:	mov	x1, #0x4028                	// #16424
 b48:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 b4c:	mov	x20, x0
 b50:	mov	w2, #0x0                   	// #0
 b54:	mov	x1, x21
 b58:	bl	a98 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>
 b5c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 b60:	add	x0, x0, #0x0
 b64:	str	x0, [x20]
 b68:	str	x20, [x19, #16]
 b6c:	ldp	x21, x30, [sp, #16]
 b70:	ldp	x19, x20, [sp], #32
 b74:	ret

0000000000000b78 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>:
 b78:	stp	x19, x30, [sp, #-16]!
 b7c:	mov	x19, x0
 b80:	ldr	w0, [x0, #16]
 b84:	cmn	w0, #0x1
 b88:	b.ne	ba8 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x30>  // b.any
 b8c:	ldr	w0, [x19, #20]
 b90:	cmn	w0, #0x1
 b94:	b.ne	bb0 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x38>  // b.any
 b98:	mov	x0, x19
 b9c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>
 ba0:	ldp	x19, x30, [sp], #16
 ba4:	ret
 ba8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 bac:	b	b8c <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x14>
 bb0:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 bb4:	b	b98 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x20>

0000000000000bb8 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>:
 bb8:	cbnz	x2, bc4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0xc>
 bbc:	mov	w0, #0x1                   	// #1
 bc0:	ret
 bc4:	stp	x19, x20, [sp, #-48]!
 bc8:	str	x30, [sp, #16]
 bcc:	mov	x20, x0
 bd0:	mov	x19, x2
 bd4:	str	xzr, [sp, #40]
 bd8:	mov	x4, #0x0                   	// #0
 bdc:	add	x3, sp, #0x28
 be0:	ldr	w0, [x0, #20]
 be4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 be8:	ands	w0, w0, #0xff
 bec:	b.eq	bfc <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x44>  // b.none
 bf0:	ldr	x1, [sp, #40]
 bf4:	cmp	x1, x19
 bf8:	b.eq	c10 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x58>  // b.none
 bfc:	ldr	w1, [x20, #20]
 c00:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 c04:	add	x0, x0, #0x0
 c08:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 c0c:	mov	w0, #0x0                   	// #0
 c10:	ldr	x30, [sp, #16]
 c14:	ldp	x19, x20, [sp], #48
 c18:	ret

0000000000000c1c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>:
 c1c:	stp	x19, x20, [sp, #-32]!
 c20:	str	x30, [sp, #16]
 c24:	mov	x19, x0
 c28:	ldr	w0, [x0, #16]
 c2c:	cmn	w0, #0x1
 c30:	b.eq	c98 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x7c>  // b.none
 c34:	mov	x20, x1
 c38:	ldr	w0, [x19, #20]
 c3c:	cmn	w0, #0x1
 c40:	b.eq	ca0 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x84>  // b.none
 c44:	mov	x0, x1
 c48:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 c4c:	mov	x2, x0
 c50:	mov	x1, x20
 c54:	mov	x0, x19
 c58:	bl	bb8 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>
 c5c:	and	w0, w0, #0xff
 c60:	cbz	w0, ca8 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x8c>
 c64:	mov	x0, x19
 c68:	ldr	x1, [x0], #24
 c6c:	ldr	x3, [x1, #16]
 c70:	mov	x2, #0x4000                	// #16384
 c74:	mov	x1, x0
 c78:	mov	x0, x19
 c7c:	blr	x3
 c80:	ands	w0, w0, #0xff
 c84:	add	x19, x19, #0x18
 c88:	csel	x0, x19, xzr, ne  // ne = any
 c8c:	ldr	x30, [sp, #16]
 c90:	ldp	x19, x20, [sp], #32
 c94:	ret
 c98:	mov	x0, #0x0                   	// #0
 c9c:	b	c8c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x70>
 ca0:	mov	x0, #0x0                   	// #0
 ca4:	b	c8c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x70>
 ca8:	mov	x0, #0x0                   	// #0
 cac:	b	c8c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x70>

0000000000000cb0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>:
 cb0:	stp	x19, x20, [sp, #-48]!
 cb4:	str	x30, [sp, #32]
 cb8:	mov	x19, x0
 cbc:	add	x0, x0, #0x4, lsl #12
 cc0:	ldrb	w0, [x0, #32]
 cc4:	cbnz	w0, d94 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xe4>
 cc8:	stp	x21, x22, [sp, #16]
 ccc:	mov	x20, x1
 cd0:	ldr	x22, [x19, #8]
 cd4:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 cd8:	mov	x21, x0
 cdc:	cbz	x0, cfc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x4c>
 ce0:	mov	x0, x22
 ce4:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 ce8:	mov	x1, x0
 cec:	cbz	x0, cfc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x4c>
 cf0:	mov	x0, x21
 cf4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 cf8:	cbz	w0, d4c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x9c>
 cfc:	ldr	x0, [x19, #16408]
 d00:	cmp	x0, #0x4
 d04:	b.hi	d34 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x84>  // b.pmore
 d08:	mov	x1, x20
 d0c:	mov	x0, x19
 d10:	bl	c1c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>
 d14:	cbnz	x0, d9c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xec>
 d18:	mov	x0, x19
 d1c:	bl	b78 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>
 d20:	ldr	x0, [x19, #16408]
 d24:	add	x0, x0, #0x1
 d28:	str	x0, [x19, #16408]
 d2c:	cmp	x0, #0x4
 d30:	b.ls	d08 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x58>  // b.plast
 d34:	add	x0, x19, #0x4, lsl #12
 d38:	ldrb	w1, [x0, #32]
 d3c:	mov	x0, #0x0                   	// #0
 d40:	cbz	w1, d70 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xc0>
 d44:	ldp	x21, x22, [sp, #16]
 d48:	b	da0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
 d4c:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 d50:	add	x0, x0, #0x0
 d54:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d58:	add	x19, x19, #0x4, lsl #12
 d5c:	mov	w0, #0x1                   	// #1
 d60:	strb	w0, [x19, #32]
 d64:	mov	x0, #0x0                   	// #0
 d68:	ldp	x21, x22, [sp, #16]
 d6c:	b	da0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
 d70:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 d74:	add	x0, x0, #0x0
 d78:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d7c:	add	x19, x19, #0x4, lsl #12
 d80:	mov	w0, #0x1                   	// #1
 d84:	strb	w0, [x19, #32]
 d88:	mov	x0, #0x0                   	// #0
 d8c:	ldp	x21, x22, [sp, #16]
 d90:	b	da0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
 d94:	mov	x0, #0x0                   	// #0
 d98:	b	da0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
 d9c:	ldp	x21, x22, [sp, #16]
 da0:	ldr	x30, [sp, #32]
 da4:	ldp	x19, x20, [sp], #48
 da8:	ret

0000000000000dac <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>:
 dac:	stp	x19, x30, [sp, #-16]!
 db0:	cbz	x2, e14 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
 db4:	mov	x19, x0
 db8:	and	w1, w1, #0xff
 dbc:	mov	x5, x3
 dc0:	adrp	x3, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 dc4:	add	x3, x3, #0x0
 dc8:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 dcc:	add	x0, x0, #0x0
 dd0:	cmp	w1, #0x0
 dd4:	csel	x3, x0, x3, ne  // ne = any
 dd8:	cbnz	w4, e48 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x9c>
 ddc:	mov	x4, x2
 de0:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 de4:	add	x2, x2, #0x0
 de8:	mov	x1, #0x4000                	// #16384
 dec:	add	x0, x19, #0x18
 df0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 df4:	mov	w1, #0x3fff                	// #16383
 df8:	cmp	w0, w1
 dfc:	b.gt	e34 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x88>
 e00:	add	x1, x19, #0x18
 e04:	ldr	x0, [x19, #16]
 e08:	bl	cb0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
 e0c:	ldp	x19, x30, [sp], #16
 e10:	ret
 e14:	mov	x4, #0x0                   	// #0
 e18:	mov	x3, #0x0                   	// #0
 e1c:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e20:	add	x2, x2, #0x0
 e24:	mov	w1, #0x173                 	// #371
 e28:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e2c:	add	x0, x0, #0x0
 e30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 e34:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e38:	add	x0, x0, #0x0
 e3c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 e40:	mov	x0, #0x0                   	// #0
 e44:	b	e0c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x60>
 e48:	add	x0, x19, #0x18
 e4c:	cmp	w4, #0x4
 e50:	b.eq	f20 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x174>  // b.none
 e54:	b.hi	ec4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x118>  // b.pmore
 e58:	cmp	w4, #0x2
 e5c:	b.eq	f2c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x180>  // b.none
 e60:	b.ls	e78 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xcc>  // b.plast
 e64:	cmp	w4, #0x3
 e68:	b.ne	f00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x154>  // b.any
 e6c:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e70:	add	x1, x1, #0x0
 e74:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 e78:	cmp	w4, #0x1
 e7c:	b.ne	f00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x154>  // b.any
 e80:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e84:	add	x1, x1, #0x0
 e88:	mov	x6, x5
 e8c:	mov	x5, x1
 e90:	mov	x4, x2
 e94:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 e98:	add	x2, x2, #0x0
 e9c:	mov	x1, #0x4000                	// #16384
 ea0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 ea4:	mov	w1, #0x3fff                	// #16383
 ea8:	cmp	w0, w1
 eac:	b.le	e00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x54>
 eb0:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 eb4:	add	x0, x0, #0x0
 eb8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 ebc:	mov	x0, #0x0                   	// #0
 ec0:	b	e0c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x60>
 ec4:	cmp	w4, #0x7
 ec8:	b.eq	f38 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x18c>  // b.none
 ecc:	b.ls	ee4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x138>  // b.plast
 ed0:	cmp	w4, #0x8
 ed4:	b.ne	f00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x154>  // b.any
 ed8:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 edc:	add	x1, x1, #0x0
 ee0:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 ee4:	cmp	w4, #0x5
 ee8:	b.eq	f44 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x198>  // b.none
 eec:	cmp	w4, #0x6
 ef0:	b.ne	f00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x154>  // b.any
 ef4:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 ef8:	add	x1, x1, #0x0
 efc:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 f00:	mov	x4, #0x0                   	// #0
 f04:	mov	x3, #0x0                   	// #0
 f08:	adrp	x2, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f0c:	add	x2, x2, #0x0
 f10:	mov	w1, #0x2a9                 	// #681
 f14:	adrp	x0, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f18:	add	x0, x0, #0x0
 f1c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 f20:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f24:	add	x1, x1, #0x0
 f28:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 f2c:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f30:	add	x1, x1, #0x0
 f34:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 f38:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f3c:	add	x1, x1, #0x0
 f40:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>
 f44:	adrp	x1, 0 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 f48:	add	x1, x1, #0x0
 f4c:	b	e88 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xdc>

0000000000000f50 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
 f50:	stp	x19, x30, [sp, #-16]!
 f54:	mov	x19, x2
 f58:	ldr	w4, [x2, #32]
 f5c:	ldr	x3, [x2, #24]
 f60:	ldr	x2, [x2, #16]
 f64:	mov	w1, #0x0                   	// #0
 f68:	bl	dac <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
 f6c:	cbnz	x0, f7c <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x2c>
 f70:	mov	w0, #0x0                   	// #0
 f74:	ldp	x19, x30, [sp], #16
 f78:	ret
 f7c:	mov	x1, x19
 f80:	bl	824 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
 f84:	mov	w0, #0x1                   	// #1
 f88:	b	f74 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x24>

0000000000000f8c <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
 f8c:	stp	x19, x20, [sp, #-32]!
 f90:	str	x30, [sp, #16]
 f94:	mov	x20, x1
 f98:	mov	x19, x2
 f9c:	ldr	w4, [x2, #16]
 fa0:	ldr	x3, [x2, #8]
 fa4:	ldr	x2, [x2]
 fa8:	mov	w1, #0x1                   	// #1
 fac:	bl	dac <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
 fb0:	cbnz	x0, fc4 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x38>
 fb4:	mov	w0, #0x0                   	// #0
 fb8:	ldr	x30, [sp, #16]
 fbc:	ldp	x19, x20, [sp], #32
 fc0:	ret
 fc4:	mov	x1, x19
 fc8:	bl	a50 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
 fcc:	ldr	x1, [x19, #48]
 fd0:	add	x1, x20, x1
 fd4:	ldr	x20, [x19, #8]
 fd8:	sub	x1, x1, x20
 fdc:	str	x1, [x19, #48]
 fe0:	mov	w0, #0x1                   	// #1
 fe4:	b	fb8 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x2c>

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	mov	w0, #0x0                   	// #0
   4:	cmp	x2, #0x1
   8:	b.ls	20 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x20>  // b.plast
   c:	add	x0, x1, x2
  10:	ldurb	w3, [x0, #-1]
  14:	mov	w0, #0x0                   	// #0
  18:	cmp	w3, #0xa
  1c:	b.eq	24 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x24>  // b.none
  20:	ret
  24:	add	x1, x1, x2
  28:	ldurb	w0, [x1, #-2]
  2c:	cmp	w0, #0xa
  30:	cset	w0, eq  // eq = none
  34:	b	20 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x20>

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	ldr	x0, [x0]
   8:	ldrb	w4, [x0, #180]
   c:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  10:	add	x3, x0, #0x0
  14:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  18:	add	x0, x0, #0x0
  1c:	cmp	w4, #0x0
  20:	csel	x0, x0, x3, ne  // ne = any
  24:	str	x1, [x2]
  28:	str	x0, [x2, #8]
  2c:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  30:	add	x0, x0, #0x0
  34:	str	x0, [x2, #16]
  38:	str	xzr, [x2, #24]
  3c:	ret

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x3, #0x0                   	// #0
   c:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
  10:	add	x2, x2, #0x0
  14:	mov	w1, #0x57                  	// #87
  18:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x3, #0x0                   	// #0
   c:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
  10:	add	x2, x2, #0x0
  14:	mov	w1, #0x4e                  	// #78
  18:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

sanitizer_symbolizer_mac.o:     file format elf64-littleaarch64


sanitizer_symbolizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>:
   0:	mov	w0, #0x0                   	// #0
   4:	cmp	x2, #0x8
   8:	b.hi	10 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm+0x10>  // b.pmore
   c:	ret
  10:	str	x30, [sp, #-16]!
  14:	mov	x3, x1
  18:	sub	x0, x2, #0x8
  1c:	mov	x2, #0x8                   	// #8
  20:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  24:	add	x1, x1, #0x0
  28:	add	x0, x3, x0
  2c:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  30:	cmp	w0, #0x0
  34:	cset	w0, eq  // eq = none
  38:	ldr	x30, [sp], #16
  3c:	ret

0000000000000040 <_ZN11__sanitizer14DemangleCXXABIEPKc>:
  40:	stp	x19, x30, [sp, #-16]!
  44:	mov	x19, x0
  48:	adrp	x0, 0 <__cxa_demangle>
  4c:	ldr	x0, [x0]
  50:	cbz	x0, 70 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x30>
  54:	mov	x3, #0x0                   	// #0
  58:	mov	x2, #0x0                   	// #0
  5c:	mov	x1, #0x0                   	// #0
  60:	mov	x0, x19
  64:	bl	0 <__cxa_demangle>
  68:	cmp	x0, #0x0
  6c:	csel	x19, x19, x0, eq  // eq = none
  70:	mov	x0, x19
  74:	ldp	x19, x30, [sp], #16
  78:	ret

000000000000007c <_ZN11__sanitizer13DemangleSwiftEPKc>:
  7c:	stp	x19, x20, [sp, #-32]!
  80:	str	x30, [sp, #16]
  84:	mov	x19, x0
  88:	cbz	x0, d8 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>
  8c:	ldrb	w1, [x0]
  90:	mov	x0, #0x0                   	// #0
  94:	cmp	w1, #0x5f
  98:	b.ne	d8 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  9c:	ldrb	w1, [x19, #1]
  a0:	cmp	w1, #0x54
  a4:	b.ne	d8 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  ac:	ldr	x20, [x0]
  b0:	mov	x0, #0x0                   	// #0
  b4:	cbz	x20, d8 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>
  b8:	mov	x0, x19
  bc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  c0:	mov	w4, #0x0                   	// #0
  c4:	mov	x3, #0x0                   	// #0
  c8:	mov	x2, #0x0                   	// #0
  cc:	mov	x1, x0
  d0:	mov	x0, x19
  d4:	blr	x20
  d8:	ldr	x30, [sp, #16]
  dc:	ldp	x19, x20, [sp], #32
  e0:	ret

00000000000000e4 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>:
  e4:	stp	x19, x30, [sp, #-16]!
  e8:	mov	x19, x0
  ec:	cbz	x0, f8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x14>
  f0:	bl	7c <_ZN11__sanitizer13DemangleSwiftEPKc>
  f4:	cbz	x0, 100 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x1c>
  f8:	ldp	x19, x30, [sp], #16
  fc:	ret
 100:	mov	x0, x19
 104:	bl	40 <_ZN11__sanitizer14DemangleCXXABIEPKc>
 108:	b	f8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x14>

000000000000010c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>:
 10c:	stp	x19, x20, [sp, #-128]!
 110:	stp	x21, x22, [sp, #16]
 114:	str	x30, [sp, #48]
 118:	mov	x19, x0
 11c:	ldr	x0, [x0, #8]
 120:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 124:	ands	w20, w0, #0xff
 128:	b.ne	16c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x60>  // b.any
 12c:	add	x0, x19, #0x4, lsl #12
 130:	ldrb	w21, [x0, #33]
 134:	cbz	w21, 14c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x40>
 138:	mov	w0, w20
 13c:	ldp	x21, x22, [sp, #16]
 140:	ldr	x30, [sp, #48]
 144:	ldp	x19, x20, [sp], #128
 148:	ret
 14c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 150:	add	x0, x0, #0x0
 154:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 158:	add	x19, x19, #0x4, lsl #12
 15c:	mov	w0, #0x1                   	// #1
 160:	strb	w0, [x19, #33]
 164:	mov	w20, w21
 168:	b	138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 16c:	stp	x23, x24, [sp, #32]
 170:	mov	x2, #0x8                   	// #8
 174:	mov	w1, #0x0                   	// #0
 178:	add	x0, sp, #0x78
 17c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 180:	mov	x2, #0x8                   	// #8
 184:	mov	w1, #0x0                   	// #0
 188:	add	x0, sp, #0x70
 18c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 190:	add	x24, sp, #0x40
 194:	mov	x20, x24
 198:	mov	x23, #0x0                   	// #0
 19c:	mov	w21, #0x0                   	// #0
 1a0:	b	23c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x130>
 1a4:	cmp	w21, #0x0
 1a8:	b.le	1d0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xc4>
 1ac:	mov	w19, #0x0                   	// #0
 1b0:	ldr	w0, [x24]
 1b4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 1b8:	ldr	w0, [x24, #4]
 1bc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 1c0:	add	w19, w19, #0x1
 1c4:	add	x24, x24, #0x8
 1c8:	cmp	w19, w21
 1cc:	b.ne	1b0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xa4>  // b.any
 1d0:	bl	0 <__errno_location>
 1d4:	ldr	w1, [x0]
 1d8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 1dc:	add	x0, x0, #0x0
 1e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1e4:	mov	w20, #0x0                   	// #0
 1e8:	ldp	x23, x24, [sp, #32]
 1ec:	b	138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 1f0:	cmp	w21, #0x0
 1f4:	b.le	300 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1f4>
 1f8:	mov	w20, #0x0                   	// #0
 1fc:	b	220 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x114>
 200:	ldr	w0, [x24]
 204:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 208:	ldr	w0, [x24, #4]
 20c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 210:	add	w20, w20, #0x1
 214:	add	x24, x24, #0x8
 218:	cmp	w20, w21
 21c:	b.eq	300 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1f4>  // b.none
 220:	cmp	x24, x23
 224:	b.ne	200 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xf4>  // b.any
 228:	b	210 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x104>
 22c:	add	w21, w21, #0x1
 230:	add	x20, x20, #0x8
 234:	cmp	w21, #0x5
 238:	b.eq	39c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x290>  // b.none
 23c:	mov	x22, x20
 240:	mov	x0, x20
 244:	bl	0 <pipe>
 248:	cmn	w0, #0x1
 24c:	b.eq	1a4 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x98>  // b.none
 250:	ldr	w0, [x20]
 254:	cmp	w0, #0x2
 258:	b.le	22c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x120>
 25c:	ldr	w0, [x20, #4]
 260:	cmp	w0, #0x2
 264:	b.le	22c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x120>
 268:	cbnz	x23, 1f0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xe4>
 26c:	mov	x23, x20
 270:	b	22c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x120>
 274:	mov	x4, #0x0                   	// #0
 278:	mov	x3, #0x0                   	// #0
 27c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 280:	add	x2, x2, #0x0
 284:	mov	w1, #0x88                  	// #136
 288:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 28c:	add	x0, x0, #0x0
 290:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 294:	mov	x4, #0x0                   	// #0
 298:	mov	x3, #0x0                   	// #0
 29c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2a0:	add	x2, x2, #0x0
 2a4:	mov	w1, #0xde                  	// #222
 2a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2ac:	add	x0, x0, #0x0
 2b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2b4:	ldr	w0, [sp, #120]
 2b8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2bc:	ldr	w0, [sp, #116]
 2c0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2c4:	ldp	x23, x24, [sp, #32]
 2c8:	b	138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 2cc:	mov	x4, #0x0                   	// #0
 2d0:	mov	x3, #0x0                   	// #0
 2d4:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2d8:	add	x2, x2, #0x0
 2dc:	mov	w1, #0xef                  	// #239
 2e0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2e4:	add	x0, x0, #0x0
 2e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2ec:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2f0:	add	x0, x0, #0x0
 2f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2f8:	ldp	x23, x24, [sp, #32]
 2fc:	b	138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 300:	ldr	w0, [x23]
 304:	str	w0, [sp, #120]
 308:	ldr	w0, [x23, #4]
 30c:	str	w0, [sp, #124]
 310:	ldr	w0, [x22]
 314:	str	w0, [sp, #112]
 318:	ldr	w0, [x22, #4]
 31c:	str	w0, [sp, #116]
 320:	add	x0, x19, #0x4, lsl #12
 324:	ldrb	w20, [x0, #34]
 328:	cbnz	w20, 294 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x188>
 32c:	add	x21, sp, #0x40
 330:	ldr	x0, [x19]
 334:	ldr	x3, [x0, #8]
 338:	mov	x2, x21
 33c:	ldr	x1, [x19, #8]
 340:	mov	x0, x19
 344:	blr	x3
 348:	mov	w4, #0xffffffff            	// #-1
 34c:	ldr	w3, [sp, #124]
 350:	ldr	w2, [sp, #112]
 354:	mov	x1, x21
 358:	ldr	x0, [x19, #8]
 35c:	bl	0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>
 360:	mov	w21, w0
 364:	tbnz	w0, #31, 2b4 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1a8>
 368:	ldr	w0, [sp, #120]
 36c:	str	w0, [x19, #16]
 370:	ldr	w0, [sp, #116]
 374:	str	w0, [x19, #20]
 378:	cbz	w21, 2cc <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1c0>
 37c:	mov	w0, #0xa                   	// #10
 380:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
 384:	mov	w0, w21
 388:	bl	0 <_ZN11__sanitizer16IsProcessRunningEi>
 38c:	ands	w20, w0, #0xff
 390:	b.eq	2ec <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1e0>  // b.none
 394:	ldp	x23, x24, [sp, #32]
 398:	b	138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c>
 39c:	cbnz	x23, 274 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x168>
 3a0:	mov	x4, #0x0                   	// #0
 3a4:	mov	x3, #0x0                   	// #0
 3a8:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 3ac:	add	x2, x2, #0x0
 3b0:	mov	w1, #0x87                  	// #135
 3b4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 3b8:	add	x0, x0, #0x0
 3bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000003c0 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>:
 3c0:	str	x30, [sp, #-16]!
 3c4:	mov	x0, x1
 3c8:	bl	e4 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>
 3cc:	ldr	x30, [sp], #16
 3d0:	ret

00000000000003d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>:
 3d4:	stp	x19, x20, [sp, #-112]!
 3d8:	str	x30, [sp, #32]
 3dc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 3e0:	ldr	x0, [x0]
 3e4:	ldrb	w0, [x0]
 3e8:	cbnz	w0, 468 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x94>
 3ec:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 3f0:	ldr	x0, [x0]
 3f4:	ldr	w1, [x0]
 3f8:	sxtw	x1, w1
 3fc:	mov	x19, #0x0                   	// #0
 400:	mov	x0, #0x0                   	// #0
 404:	cmp	x1, #0x1
 408:	b.hi	454 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x80>  // b.pmore
 40c:	str	x0, [sp, #88]
 410:	str	x19, [sp, #96]
 414:	str	x19, [sp, #104]
 418:	mov	x1, #0xf0                  	// #240
 41c:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 420:	ldr	x0, [x0]
 424:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 428:	mov	x19, x0
 42c:	ldp	x2, x3, [sp, #88]
 430:	stp	x2, x3, [sp, #48]
 434:	ldr	x1, [sp, #104]
 438:	str	x1, [sp, #64]
 43c:	add	x1, sp, #0x30
 440:	bl	0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>
 444:	mov	x0, x19
 448:	ldr	x30, [sp, #32]
 44c:	ldp	x19, x20, [sp], #112
 450:	ret
 454:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 458:	add	x0, x0, #0x0
 45c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 460:	mov	x0, #0x0                   	// #0
 464:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 468:	bl	0 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>
 46c:	and	w0, w0, #0xff
 470:	cbz	w0, 4d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x100>
 474:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 478:	ldr	x0, [x0]
 47c:	ldr	w0, [x0]
 480:	sxtw	x0, w0
 484:	cmp	x0, #0x1
 488:	b.hi	4c4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf0>  // b.pmore
 48c:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 490:	ldr	x0, [x0]
 494:	bl	0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>
 498:	mov	x19, x0
 49c:	cbz	x0, 558 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x184>
 4a0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 4a4:	ldr	x0, [x0]
 4a8:	ldr	w0, [x0]
 4ac:	sxtw	x0, w0
 4b0:	cmp	x0, #0x1
 4b4:	b.hi	548 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x174>  // b.pmore
 4b8:	str	xzr, [x19, #8]
 4bc:	mov	x0, #0x1                   	// #1
 4c0:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 4c4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 4c8:	add	x0, x0, #0x0
 4cc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4d0:	b	48c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xb8>
 4d4:	adrp	x0, 0 <__sanitizer_symbolize_data>
 4d8:	ldr	x0, [x0]
 4dc:	cmp	x0, #0x0
 4e0:	adrp	x0, 0 <__sanitizer_symbolize_code>
 4e4:	ldr	x0, [x0]
 4e8:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 4ec:	b.eq	48c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xb8>  // b.none
 4f0:	mov	x1, #0x4010                	// #16400
 4f4:	adrp	x0, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 4f8:	ldr	x0, [x0]
 4fc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 500:	mov	x19, x0
 504:	str	xzr, [x0, #8]
 508:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 50c:	add	x0, x0, #0x0
 510:	str	x0, [x19]
 514:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 518:	ldr	x0, [x0]
 51c:	ldr	w0, [x0]
 520:	sxtw	x0, w0
 524:	cmp	x0, #0x1
 528:	b.hi	538 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x164>  // b.pmore
 52c:	str	xzr, [x19, #8]
 530:	mov	x0, #0x1                   	// #1
 534:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 538:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 53c:	add	x0, x0, #0x0
 540:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 544:	b	52c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x158>
 548:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 54c:	add	x0, x0, #0x0
 550:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 554:	b	4b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xe4>
 558:	stp	x21, x22, [sp, #16]
 55c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 560:	ldr	x0, [x0]
 564:	ldr	x21, [x0, #8]
 568:	cbz	x21, 618 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x244>
 56c:	mov	x0, x21
 570:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 574:	mov	x20, x0
 578:	ldrb	w0, [x21]
 57c:	cbz	w0, 5e4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x210>
 580:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 584:	add	x1, x1, #0x0
 588:	mov	x0, x20
 58c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 590:	cbnz	w0, 638 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x264>
 594:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 598:	ldr	x0, [x0]
 59c:	ldr	w0, [x0]
 5a0:	sxtw	x0, w0
 5a4:	cmp	x0, #0x1
 5a8:	b.hi	624 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x250>  // b.pmore
 5ac:	adrp	x20, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 5b0:	ldr	x20, [x20]
 5b4:	mov	x1, #0x4018                	// #16408
 5b8:	mov	x0, x20
 5bc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 5c0:	mov	x19, x0
 5c4:	mov	x2, x20
 5c8:	mov	x1, x21
 5cc:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 5d0:	cbz	x19, aa4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x6d0>
 5d4:	str	xzr, [x19, #8]
 5d8:	mov	x0, #0x1                   	// #1
 5dc:	ldp	x21, x22, [sp, #16]
 5e0:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 5e4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 5e8:	ldr	x0, [x0]
 5ec:	ldr	w0, [x0]
 5f0:	sxtw	x0, w0
 5f4:	cmp	x0, #0x1
 5f8:	b.hi	608 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x234>  // b.pmore
 5fc:	mov	x0, #0x0                   	// #0
 600:	ldp	x21, x22, [sp, #16]
 604:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 608:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 60c:	add	x0, x0, #0x0
 610:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 614:	b	5fc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x228>
 618:	adrp	x20, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 61c:	add	x20, x20, #0x0
 620:	b	580 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1ac>
 624:	mov	x1, x21
 628:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 62c:	add	x0, x0, #0x0
 630:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 634:	b	5ac <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1d8>
 638:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 63c:	add	x1, x1, #0x0
 640:	mov	x0, x20
 644:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 648:	cbz	w0, 7b0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x3dc>
 64c:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 650:	add	x1, x1, #0x0
 654:	mov	x0, x20
 658:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 65c:	cbnz	w0, 838 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x464>
 660:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 664:	ldr	x0, [x0]
 668:	ldr	w0, [x0]
 66c:	sxtw	x0, w0
 670:	cmp	x0, #0x1
 674:	b.hi	7c0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x3ec>  // b.pmore
 678:	adrp	x20, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 67c:	ldr	x20, [x20]
 680:	mov	x1, #0x38                  	// #56
 684:	mov	x0, x20
 688:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 68c:	mov	x19, x0
 690:	str	xzr, [x0, #8]
 694:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 698:	add	x0, x0, #0x0
 69c:	str	x0, [x19]
 6a0:	str	x21, [x19, #16]
 6a4:	str	x20, [x19, #24]
 6a8:	str	xzr, [x19, #40]
 6ac:	str	xzr, [x19, #48]
 6b0:	str	xzr, [x19, #32]
 6b4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6b8:	ldr	x0, [x0]
 6bc:	ldr	x0, [x0]
 6c0:	cbz	x0, 7d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x400>
 6c4:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 6c8:	ldr	x0, [x0]
 6cc:	ldr	x0, [x0]
 6d0:	sub	x1, x0, #0x1
 6d4:	tst	x1, x0
 6d8:	b.ne	7e8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x414>  // b.any
 6dc:	add	x20, x0, #0x7
 6e0:	neg	x0, x0
 6e4:	and	x20, x20, x0
 6e8:	mov	w2, #0x0                   	// #0
 6ec:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6f0:	add	x1, x1, #0x0
 6f4:	mov	x0, x20
 6f8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6fc:	mov	x22, x0
 700:	add	x21, x19, #0x20
 704:	ldr	x2, [x21, #16]
 708:	lsl	x2, x2, #3
 70c:	ldr	x1, [x19, #32]
 710:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 714:	ldr	x1, [x21, #8]
 718:	ldr	x0, [x19, #32]
 71c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 720:	str	x22, [x19, #32]
 724:	str	x20, [x21, #8]
 728:	cmp	x20, #0x7f
 72c:	b.hi	5d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x200>  // b.pmore
 730:	ldr	x3, [x19, #48]
 734:	cmp	x3, #0x10
 738:	b.hi	7f8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x424>  // b.pmore
 73c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 740:	ldr	x0, [x0]
 744:	ldr	x0, [x0]
 748:	cbz	x0, 814 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x440>
 74c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 750:	ldr	x0, [x0]
 754:	ldr	x0, [x0]
 758:	sub	x1, x0, #0x1
 75c:	tst	x1, x0
 760:	b.ne	828 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x454>  // b.any
 764:	add	x20, x0, #0x7f
 768:	neg	x0, x0
 76c:	and	x20, x20, x0
 770:	mov	w2, #0x0                   	// #0
 774:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 778:	add	x1, x1, #0x0
 77c:	mov	x0, x20
 780:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 784:	mov	x22, x0
 788:	ldr	x2, [x19, #48]
 78c:	lsl	x2, x2, #3
 790:	ldr	x1, [x19, #32]
 794:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 798:	ldr	x1, [x19, #40]
 79c:	ldr	x0, [x19, #32]
 7a0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7a4:	str	x22, [x19, #32]
 7a8:	str	x20, [x19, #40]
 7ac:	b	5d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x200>
 7b0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 7b4:	add	x0, x0, #0x0
 7b8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 7bc:	bl	0 <_ZN11__sanitizer3DieEv>
 7c0:	mov	x1, x21
 7c4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 7c8:	add	x0, x0, #0x0
 7cc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 7d0:	b	678 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2a4>
 7d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 7d8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7dc:	ldr	x1, [x1]
 7e0:	str	x0, [x1]
 7e4:	b	6c4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2f0>
 7e8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 7ec:	add	x0, x0, #0x0
 7f0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 7f4:	bl	0 <_ZN11__sanitizer3DieEv>
 7f8:	mov	x4, #0x10                  	// #16
 7fc:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 800:	add	x2, x2, #0x0
 804:	mov	w1, #0x1fd                 	// #509
 808:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 80c:	add	x0, x0, #0x0
 810:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 814:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 818:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 81c:	ldr	x1, [x1]
 820:	str	x0, [x1]
 824:	b	74c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x378>
 828:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 82c:	add	x0, x0, #0x0
 830:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 834:	bl	0 <_ZN11__sanitizer3DieEv>
 838:	cbnz	x21, 890 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4bc>
 83c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 840:	add	x0, x0, #0x0
 844:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 848:	mov	x20, x0
 84c:	cbz	x0, 8b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4e4>
 850:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 854:	ldr	x0, [x0]
 858:	ldr	w0, [x0]
 85c:	sxtw	x0, w0
 860:	cmp	x0, #0x1
 864:	b.hi	8a4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4d0>  // b.pmore
 868:	adrp	x21, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 86c:	ldr	x21, [x21]
 870:	mov	x1, #0x4018                	// #16408
 874:	mov	x0, x21
 878:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 87c:	mov	x19, x0
 880:	mov	x2, x21
 884:	mov	x1, x20
 888:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 88c:	b	5d0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1fc>
 890:	mov	x1, x21
 894:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 898:	add	x0, x0, #0x0
 89c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8a0:	bl	0 <_ZN11__sanitizer3DieEv>
 8a4:	mov	x1, x20
 8a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 8ac:	add	x0, x0, #0x0
 8b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8b4:	b	868 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x494>
 8b8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 8bc:	ldr	x0, [x0]
 8c0:	ldrb	w0, [x0, #16]
 8c4:	cbz	w0, 5fc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x228>
 8c8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 8cc:	add	x0, x0, #0x0
 8d0:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 8d4:	mov	x20, x0
 8d8:	cbz	x0, 5fc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x228>
 8dc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 8e0:	ldr	x0, [x0]
 8e4:	ldr	w0, [x0]
 8e8:	sxtw	x0, w0
 8ec:	cmp	x0, #0x1
 8f0:	b.hi	a2c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x658>  // b.pmore
 8f4:	adrp	x21, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 8f8:	ldr	x21, [x21]
 8fc:	mov	x1, #0x38                  	// #56
 900:	mov	x0, x21
 904:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 908:	mov	x19, x0
 90c:	str	xzr, [x0, #8]
 910:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 914:	add	x0, x0, #0x0
 918:	str	x0, [x19]
 91c:	str	x20, [x19, #16]
 920:	str	x21, [x19, #24]
 924:	str	xzr, [x19, #40]
 928:	str	xzr, [x19, #48]
 92c:	str	xzr, [x19, #32]
 930:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 934:	ldr	x0, [x0]
 938:	ldr	x0, [x0]
 93c:	cbz	x0, a40 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x66c>
 940:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 944:	ldr	x0, [x0]
 948:	ldr	x0, [x0]
 94c:	sub	x1, x0, #0x1
 950:	tst	x1, x0
 954:	b.ne	a54 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x680>  // b.any
 958:	add	x20, x0, #0x7
 95c:	neg	x0, x0
 960:	and	x20, x20, x0
 964:	mov	w2, #0x0                   	// #0
 968:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 96c:	add	x1, x1, #0x0
 970:	mov	x0, x20
 974:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 978:	mov	x22, x0
 97c:	add	x21, x19, #0x20
 980:	ldr	x2, [x21, #16]
 984:	lsl	x2, x2, #3
 988:	ldr	x1, [x19, #32]
 98c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 990:	ldr	x1, [x21, #8]
 994:	ldr	x0, [x19, #32]
 998:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 99c:	str	x22, [x19, #32]
 9a0:	str	x20, [x21, #8]
 9a4:	cmp	x20, #0x7f
 9a8:	b.hi	5d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x200>  // b.pmore
 9ac:	ldr	x3, [x19, #48]
 9b0:	cmp	x3, #0x10
 9b4:	b.hi	a64 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x690>  // b.pmore
 9b8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9bc:	ldr	x0, [x0]
 9c0:	ldr	x0, [x0]
 9c4:	cbz	x0, a80 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x6ac>
 9c8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9cc:	ldr	x0, [x0]
 9d0:	ldr	x0, [x0]
 9d4:	sub	x1, x0, #0x1
 9d8:	tst	x1, x0
 9dc:	b.ne	a94 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x6c0>  // b.any
 9e0:	add	x20, x0, #0x7f
 9e4:	neg	x0, x0
 9e8:	and	x20, x20, x0
 9ec:	mov	w2, #0x0                   	// #0
 9f0:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9f4:	add	x1, x1, #0x0
 9f8:	mov	x0, x20
 9fc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a00:	mov	x22, x0
 a04:	ldr	x2, [x19, #48]
 a08:	lsl	x2, x2, #3
 a0c:	ldr	x1, [x19, #32]
 a10:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a14:	ldr	x1, [x19, #40]
 a18:	ldr	x0, [x19, #32]
 a1c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a20:	str	x22, [x19, #32]
 a24:	str	x20, [x19, #40]
 a28:	b	5d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x200>
 a2c:	mov	x1, x20
 a30:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a34:	add	x0, x0, #0x0
 a38:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 a3c:	b	8f4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x520>
 a40:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a44:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a48:	ldr	x1, [x1]
 a4c:	str	x0, [x1]
 a50:	b	940 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x56c>
 a54:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a58:	add	x0, x0, #0x0
 a5c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a60:	bl	0 <_ZN11__sanitizer3DieEv>
 a64:	mov	x4, #0x10                  	// #16
 a68:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a6c:	add	x2, x2, #0x0
 a70:	mov	w1, #0x1fd                 	// #509
 a74:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a78:	add	x0, x0, #0x0
 a7c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a80:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a84:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a88:	ldr	x1, [x1]
 a8c:	str	x0, [x1]
 a90:	b	9c8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x5f4>
 a94:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a98:	add	x0, x0, #0x0
 a9c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 aa0:	bl	0 <_ZN11__sanitizer3DieEv>
 aa4:	mov	x0, #0x0                   	// #0
 aa8:	ldp	x21, x22, [sp, #16]
 aac:	b	40c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>

0000000000000ab0 <_ZN11__sanitizer10Symbolizer14LateInitializeEv>:
 ab0:	str	x30, [sp, #-16]!
 ab4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 ab8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 abc:	add	x1, x1, #0x0
 ac0:	mov	x0, #0x0                   	// #0
 ac4:	bl	0 <dlsym>
 ac8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 acc:	str	x0, [x1]
 ad0:	bl	0 <dlerror>
 ad4:	ldr	x30, [sp], #16
 ad8:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x1, [x2]
   4:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>
   8:	add	x1, x1, #0x0
   c:	str	x1, [x2, #8]
  10:	ldr	x0, [x0, #16424]
  14:	str	x0, [x2, #16]
  18:	str	xzr, [x2, #24]
  1c:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer5FlushEv:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer5FlushEv>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_flush>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 1c <_ZN11__sanitizer18InternalSymbolizer5FlushEv+0x1c>
   c:	str	x30, [sp, #-16]!
  10:	bl	0 <__sanitizer_symbolize_flush>
  14:	ldr	x30, [sp], #16
  18:	ret
  1c:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #24]
   8:	adrp	x0, 0 <__sanitizer_symbolize_demangle>
   c:	ldr	x0, [x0]
  10:	mov	x19, x1
  14:	cbz	x0, 58 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x58>
  18:	str	x21, [sp, #16]
  1c:	mov	x20, x1
  20:	mov	x21, #0x400                 	// #1024
  24:	mov	x2, #0x0                   	// #0
  28:	mov	x1, #0x0                   	// #0
  2c:	mov	x0, x21
  30:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  34:	mov	x19, x0
  38:	mov	w2, w21
  3c:	mov	x1, x0
  40:	mov	x0, x20
  44:	bl	0 <__sanitizer_symbolize_demangle>
  48:	sxtw	x1, w0
  4c:	cmp	x21, w0, sxtw
  50:	b.cc	68 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x68>  // b.lo, b.ul, b.last
  54:	ldr	x21, [sp, #16]
  58:	mov	x0, x19
  5c:	ldr	x30, [sp, #24]
  60:	ldp	x19, x20, [sp], #32
  64:	ret
  68:	add	x21, x1, #0x1
  6c:	mov	x1, #0x0                   	// #0
  70:	mov	x0, x19
  74:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  78:	cmp	x21, #0x20, lsl #12
  7c:	b.ls	24 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x24>  // b.plast
  80:	mov	x19, x20
  84:	ldr	x21, [sp, #16]
  88:	b	58 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x58>

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x20, x1
  10:	mov	x19, x2
  14:	add	x21, x0, #0x10
  18:	mov	w3, #0x4000                	// #16384
  1c:	mov	x2, x21
  20:	ldr	x1, [x19, #8]
  24:	ldr	x0, [x19]
  28:	bl	0 <__sanitizer_symbolize_data>
  2c:	mov	w22, w0
  30:	tst	w0, #0xff
  34:	b.ne	4c <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x4c>  // b.any
  38:	mov	w0, w22
  3c:	ldp	x21, x22, [sp, #16]
  40:	ldr	x30, [sp, #32]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	mov	x0, x21
  54:	bl	0 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
  58:	ldr	x1, [x19, #48]
  5c:	add	x1, x20, x1
  60:	ldr	x20, [x19, #8]
  64:	sub	x1, x1, x20
  68:	str	x1, [x19, #48]
  6c:	b	38 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x38>

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x19, x2
   c:	add	x20, x0, #0x10
  10:	mov	w3, #0x4000                	// #16384
  14:	mov	x2, x20
  18:	ldr	x1, [x19, #24]
  1c:	ldr	x0, [x19, #16]
  20:	bl	0 <__sanitizer_symbolize_code>
  24:	mov	w21, w0
  28:	tst	w0, #0xff
  2c:	b.ne	40 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x40>  // b.any
  30:	mov	w0, w21
  34:	ldp	x21, x30, [sp, #16]
  38:	ldp	x19, x20, [sp], #32
  3c:	ret
  40:	mov	x1, x19
  44:	mov	x0, x20
  48:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  4c:	b	30 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x30>

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-144]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x30, [sp, #48]
  10:	mov	x19, x0
  14:	mov	x22, x2
  18:	ldr	x21, [x2, #16]
  1c:	ldr	x23, [x2, #24]
  20:	str	xzr, [sp, #72]
  24:	ldr	x0, [x0, #48]
  28:	cbz	x0, 100 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x100>
  2c:	mov	x20, #0x0                   	// #0
  30:	lsl	x24, x20, #3
  34:	ldr	x0, [x19, #32]
  38:	ldr	x0, [x0, x20, lsl #3]
  3c:	ldr	x1, [x0, #16424]
  40:	mov	x0, x21
  44:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  48:	cbz	w0, c8 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xc8>
  4c:	add	x20, x20, #0x1
  50:	ldr	x0, [x19, #48]
  54:	cmp	x0, x20
  58:	b.hi	30 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x30>  // b.pmore
  5c:	ldr	x0, [sp, #72]
  60:	cbz	x0, 100 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x100>
  64:	ldr	x0, [sp, #72]
  68:	ldr	x1, [x0, #16424]
  6c:	mov	x0, x21
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	sxtw	x4, w0
  78:	cbnz	w0, 2d0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2d0>
  7c:	add	x19, sp, #0x50
  80:	mov	x4, #0xffffffffffffffff    	// #-1
  84:	mov	x3, x23
  88:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  8c:	add	x2, x2, #0x0
  90:	mov	x1, #0x40                  	// #64
  94:	mov	x0, x19
  98:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  9c:	mov	x1, x19
  a0:	ldr	x0, [sp, #72]
  a4:	bl	0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
  a8:	mov	w1, #0x0                   	// #0
  ac:	cbnz	x0, 2ec <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2ec>
  b0:	mov	w0, w1
  b4:	ldp	x21, x22, [sp, #16]
  b8:	ldp	x23, x24, [sp, #32]
  bc:	ldp	x25, x30, [sp, #48]
  c0:	ldp	x19, x20, [sp], #144
  c4:	ret
  c8:	ldr	x4, [x19, #48]
  cc:	cmp	x4, x20
  d0:	b.ls	e4 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xe4>  // b.plast
  d4:	ldr	x0, [x19, #32]
  d8:	ldr	x0, [x0, x24]
  dc:	str	x0, [sp, #72]
  e0:	b	5c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x5c>
  e4:	mov	x3, x20
  e8:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  ec:	add	x2, x2, #0x0
  f0:	mov	w1, #0x1b6                 	// #438
  f4:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 100:	mov	x1, #0x4030                	// #16432
 104:	ldr	x0, [x19, #24]
 108:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 10c:	mov	x20, x0
 110:	mov	w2, #0x0                   	// #0
 114:	ldr	x1, [x19, #16]
 118:	bl	0 <_ZN11__sanitizer17SymbolizerProcessC2EPKcb>
 11c:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 120:	add	x0, x0, #0x0
 124:	str	x0, [x20]
 128:	mov	x0, x21
 12c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 130:	str	x0, [x20, #16424]
 134:	str	x20, [sp, #72]
 138:	ldr	x3, [x19, #48]
 13c:	ldr	x0, [x19, #40]
 140:	lsr	x4, x0, #3
 144:	cmp	x3, x0, lsr #3
 148:	b.hi	178 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x178>  // b.pmore
 14c:	cmp	x3, x4
 150:	b.eq	190 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x190>  // b.none
 154:	ldr	x3, [x19, #32]
 158:	ldr	x0, [x19, #48]
 15c:	add	x2, x0, #0x1
 160:	str	x2, [x19, #48]
 164:	mov	x2, #0x8                   	// #8
 168:	add	x1, sp, #0x48
 16c:	add	x0, x3, x0, lsl #3
 170:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 174:	b	64 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x64>
 178:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 17c:	add	x2, x2, #0x0
 180:	mov	w1, #0x1be                 	// #446
 184:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 188:	add	x0, x0, #0x0
 18c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 190:	add	x0, x3, #0x1
 194:	tst	x3, x0
 198:	b.eq	2a4 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2a4>  // b.none
 19c:	clz	x2, x0
 1a0:	mov	w1, #0x3f                  	// #63
 1a4:	sub	w1, w1, w2
 1a8:	add	w2, w1, #0x1
 1ac:	mov	x4, #0x1                   	// #1
 1b0:	lsl	x4, x4, x2
 1b4:	cmp	x0, x4
 1b8:	b.cs	250 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x250>  // b.hs, b.nlast
 1bc:	mov	x2, #0x1                   	// #1
 1c0:	lsl	x1, x2, x1
 1c4:	cmp	x0, x1
 1c8:	b.ls	26c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x26c>  // b.plast
 1cc:	cmp	x3, x4
 1d0:	b.hi	28c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x28c>  // b.pmore
 1d4:	lsl	x20, x4, #3
 1d8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1dc:	ldr	x0, [x0]
 1e0:	ldr	x0, [x0]
 1e4:	cbz	x0, 2ac <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2ac>
 1e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1ec:	ldr	x0, [x0]
 1f0:	ldr	x0, [x0]
 1f4:	sub	x1, x0, #0x1
 1f8:	tst	x0, x1
 1fc:	b.ne	2c0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2c0>  // b.any
 200:	add	x20, x20, x1
 204:	neg	x0, x0
 208:	and	x20, x20, x0
 20c:	mov	w2, #0x0                   	// #0
 210:	adrp	x1, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 214:	add	x1, x1, #0x0
 218:	mov	x0, x20
 21c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 220:	mov	x25, x0
 224:	add	x24, x19, #0x20
 228:	ldr	x2, [x24, #16]
 22c:	lsl	x2, x2, #3
 230:	ldr	x1, [x19, #32]
 234:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 238:	ldr	x1, [x24, #8]
 23c:	ldr	x0, [x19, #32]
 240:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 244:	str	x25, [x19, #32]
 248:	str	x20, [x24, #8]
 24c:	b	154 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x154>
 250:	mov	x3, x0
 254:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 258:	add	x2, x2, #0x0
 25c:	mov	w1, #0x17b                 	// #379
 260:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 264:	add	x0, x0, #0x0
 268:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 26c:	mov	x4, x1
 270:	mov	x3, x0
 274:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 278:	add	x2, x2, #0x0
 27c:	mov	w1, #0x17c                 	// #380
 280:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 284:	add	x0, x0, #0x0
 288:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 28c:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 290:	add	x2, x2, #0x0
 294:	mov	w1, #0x1fd                 	// #509
 298:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 29c:	add	x0, x0, #0x0
 2a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2a4:	mov	x4, x0
 2a8:	b	1d4 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1d4>
 2ac:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2b0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2b4:	ldr	x1, [x1]
 2b8:	str	x0, [x1]
 2bc:	b	1e8 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1e8>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2c4:	add	x0, x0, #0x0
 2c8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2cc:	bl	0 <_ZN11__sanitizer3DieEv>
 2d0:	mov	x3, #0x0                   	// #0
 2d4:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2d8:	add	x2, x2, #0x0
 2dc:	mov	w1, #0x15c                 	// #348
 2e0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2e4:	add	x0, x0, #0x0
 2e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2ec:	mov	x1, x22
 2f0:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
 2f4:	mov	w1, #0x1                   	// #1
 2f8:	b	b0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xb0>

Disassembly of section .text._ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm:

0000000000000000 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  10:	mov	w20, w0
  14:	tst	w0, #0xff
  18:	b.eq	24 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x24>  // b.none
  1c:	ldrb	w0, [x19]
  20:	cbnz	w0, 34 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x34>
  24:	mov	w0, w20
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ret
  34:	adrp	x1, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  38:	add	x1, x1, #0x0
  3c:	add	x0, x19, #0x1
  40:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  44:	cbz	x0, 50 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x50>
  48:	strb	wzr, [x0]
  4c:	b	24 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x24>
  50:	mov	x4, #0x0                   	// #0
  54:	mov	x3, #0x0                   	// #0
  58:	adrp	x2, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x11e                 	// #286
  64:	adrp	x0, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_symbolizer_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>:
       0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
       4:	ldr	x3, [x3]
       8:	ldrb	w3, [x3, #60]
       c:	cbnz	w3, 14 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x14>
      10:	ret
      14:	stp	x19, x20, [sp, #-80]!
      18:	stp	x21, x22, [sp, #16]
      1c:	stp	x23, x30, [sp, #32]
      20:	mov	x21, x0
      24:	mov	x20, x1
      28:	mov	x19, x2
      2c:	str	xzr, [sp, #56]
      30:	str	xzr, [sp, #64]
      34:	str	xzr, [sp, #48]
      38:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
      3c:	ldr	x0, [x0]
      40:	ldr	x0, [x0]
      44:	cbz	x0, 158 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x158>
      48:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
      4c:	ldr	x0, [x0]
      50:	ldr	x3, [x0]
      54:	sub	x0, x3, #0x1
      58:	tst	x0, x3
      5c:	b.ne	16c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x16c>  // b.any
      60:	add	x22, x3, #0x3ff
      64:	neg	x3, x3
      68:	and	x22, x22, x3
      6c:	mov	w2, #0x0                   	// #0
      70:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
      74:	add	x1, x1, #0x0
      78:	mov	x0, x22
      7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      80:	mov	x23, x0
      84:	ldr	x2, [sp, #64]
      88:	ldr	x1, [sp, #48]
      8c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
      90:	ldr	x1, [sp, #56]
      94:	ldr	x0, [sp, #48]
      98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
      9c:	str	x23, [sp, #48]
      a0:	str	x22, [sp, #56]
      a4:	ldr	x0, [sp, #64]
      a8:	cmp	x0, #0x3ff
      ac:	b.hi	d4 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0xd4>  // b.pmore
      b0:	cmp	x22, #0x3ff
      b4:	b.ls	17c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x17c>  // b.plast
      b8:	ldr	x0, [sp, #64]
      bc:	mov	x2, #0x400                 	// #1024
      c0:	sub	x2, x2, x0
      c4:	mov	w1, #0x0                   	// #0
      c8:	ldr	x3, [sp, #48]
      cc:	add	x0, x3, x0
      d0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
      d4:	mov	x0, #0x400                 	// #1024
      d8:	str	x0, [sp, #64]
      dc:	str	xzr, [sp, #72]
      e0:	ldr	x0, [sp, #48]
      e4:	strb	wzr, [x0]
      e8:	add	x0, sp, #0x30
      ec:	mov	x2, x21
      f0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
      f4:	add	x1, x1, #0x0
      f8:	mov	x21, x0
      fc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     100:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     104:	ldr	x0, [x0]
     108:	adrp	x6, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     10c:	add	x6, x6, #0x0
     110:	ldr	x5, [x0, #24]
     114:	ldrb	w4, [x0, #181]
     118:	mov	x3, x20
     11c:	mov	w2, #0x0                   	// #0
     120:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     124:	add	x1, x1, #0x0
     128:	mov	x0, x21
     12c:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
     130:	mov	x1, x19
     134:	ldr	x0, [sp, #48]
     138:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     13c:	ldr	x1, [sp, #56]
     140:	ldr	x0, [sp, #48]
     144:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     148:	ldp	x21, x22, [sp, #16]
     14c:	ldp	x23, x30, [sp, #32]
     150:	ldp	x19, x20, [sp], #80
     154:	ret
     158:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     15c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     160:	ldr	x1, [x1]
     164:	str	x0, [x1]
     168:	b	48 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x48>
     16c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     170:	add	x0, x0, #0x0
     174:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     178:	bl	0 <_ZN11__sanitizer3DieEv>
     17c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     180:	ldr	x0, [x0]
     184:	ldr	x0, [x0]
     188:	cbz	x0, 1ec <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x1ec>
     18c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     190:	ldr	x0, [x0]
     194:	ldr	x0, [x0]
     198:	sub	x1, x0, #0x1
     19c:	tst	x1, x0
     1a0:	b.ne	200 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x200>  // b.any
     1a4:	add	x22, x0, #0x3ff
     1a8:	neg	x0, x0
     1ac:	and	x22, x22, x0
     1b0:	mov	w2, #0x0                   	// #0
     1b4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     1b8:	add	x1, x1, #0x0
     1bc:	mov	x0, x22
     1c0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     1c4:	mov	x23, x0
     1c8:	ldr	x2, [sp, #64]
     1cc:	ldr	x1, [sp, #48]
     1d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     1d4:	ldr	x1, [sp, #56]
     1d8:	ldr	x0, [sp, #48]
     1dc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     1e0:	str	x23, [sp, #48]
     1e4:	str	x22, [sp, #56]
     1e8:	b	b8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0xb8>
     1ec:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     1f0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     1f4:	ldr	x1, [x1]
     1f8:	str	x0, [x1]
     1fc:	b	18c <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x18c>
     200:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     204:	add	x0, x0, #0x0
     208:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     20c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000210 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>:
     210:	stp	x19, x20, [sp, #-32]!
     214:	str	x30, [sp, #16]
     218:	mov	x19, x0
     21c:	ldr	x20, [x0]
     220:	mov	w1, #0x1                   	// #1
     224:	ldxrb	w0, [x20]
     228:	stxrb	w2, w1, [x20]
     22c:	cbnz	w2, 224 <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x14>
     230:	dmb	ish
     234:	and	w0, w0, #0xff
     238:	cbnz	w0, 260 <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x50>
     23c:	mov	x0, x19
     240:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     244:	ldr	w0, [x19, #8]
     248:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
     24c:	dmb	ish
     250:	strb	wzr, [x20]
     254:	ldr	x30, [sp, #16]
     258:	ldp	x19, x20, [sp], #32
     25c:	ret
     260:	mov	x0, x20
     264:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     268:	b	23c <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x2c>

000000000000026c <_ZN11__sanitizer15ColorizeReportsEv>:
     26c:	stp	x19, x30, [sp, #-16]!
     270:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     274:	ldr	x0, [x0]
     278:	ldr	x19, [x0, #112]
     27c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     280:	add	x1, x1, #0x0
     284:	mov	x0, x19
     288:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     28c:	mov	w1, #0x1                   	// #1
     290:	cbnz	w0, 2a0 <_ZN11__sanitizer15ColorizeReportsEv+0x34>
     294:	mov	w0, w1
     298:	ldp	x19, x30, [sp], #16
     29c:	ret
     2a0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     2a4:	add	x1, x1, #0x0
     2a8:	mov	x0, x19
     2ac:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     2b0:	mov	w1, #0x0                   	// #0
     2b4:	cbnz	w0, 294 <_ZN11__sanitizer15ColorizeReportsEv+0x28>
     2b8:	adrp	x0, 0 <_ZN11__sanitizer11report_fileE>
     2bc:	ldr	x0, [x0]
     2c0:	bl	210 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
     2c4:	and	w1, w0, #0xff
     2c8:	b	294 <_ZN11__sanitizer15ColorizeReportsEv+0x28>

00000000000002cc <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>:
     2cc:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     2d0:	ldr	x3, [x3]
     2d4:	ldrb	w3, [x3, #60]
     2d8:	cbz	w3, 344 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x78>
     2dc:	stp	x19, x20, [sp, #-32]!
     2e0:	stp	x21, x30, [sp, #16]
     2e4:	mov	x21, x0
     2e8:	mov	x20, x2
     2ec:	ldr	w0, [x1, #8]
     2f0:	cbz	w0, 334 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x68>
     2f4:	ldr	x0, [x1]
     2f8:	ldr	x19, [x0]
     2fc:	sub	x19, x19, #0x4
     300:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     304:	mov	x1, x19
     308:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     30c:	mov	x19, x0
     310:	mov	x2, x20
     314:	add	x1, x0, #0x8
     318:	mov	x0, x21
     31c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     320:	mov	x0, x19
     324:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     328:	ldp	x21, x30, [sp, #16]
     32c:	ldp	x19, x20, [sp], #32
     330:	ret
     334:	mov	x1, #0x0                   	// #0
     338:	mov	x0, x21
     33c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     340:	b	328 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x5c>
     344:	ret

0000000000000348 <_ZN11__sanitizer23StartReportDeadlySignalEv>:
     348:	stp	x19, x30, [sp, #-16]!
     34c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     350:	ldr	x0, [x0]
     354:	ldr	x19, [x0]
     358:	mov	x0, x19
     35c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     360:	mov	x1, x0
     364:	mov	x0, x19
     368:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     36c:	mov	x1, #0xe                   	// #14
     370:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     374:	add	x0, x0, #0x0
     378:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     37c:	ldp	x19, x30, [sp], #16
     380:	ret

0000000000000384 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>:
     384:	stp	x19, x20, [sp, #-208]!
     388:	stp	x21, x22, [sp, #16]
     38c:	stp	x23, x24, [sp, #32]
     390:	str	x30, [sp, #80]
     394:	mov	x19, x0
     398:	mov	w20, w1
     39c:	mov	x21, x2
     3a0:	mov	x22, x3
     3a4:	bl	0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>
     3a8:	and	w0, w0, #0xff
     3ac:	cbz	w0, 4e4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x160>
     3b0:	bl	26c <_ZN11__sanitizer15ColorizeReportsEv>
     3b4:	and	w0, w0, #0xff
     3b8:	cbnz	w0, 8bc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x538>
     3bc:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     3c0:	add	x23, x1, #0x0
     3c4:	mov	x1, x23
     3c8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     3cc:	add	x0, x0, #0x0
     3d0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     3d4:	mov	w7, w20
     3d8:	ldr	x6, [x19, #32]
     3dc:	ldr	x5, [x19, #40]
     3e0:	ldr	x4, [x19, #24]
     3e4:	ldr	x3, [x19, #16]
     3e8:	adrp	x2, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     3ec:	add	x2, x2, #0x0
     3f0:	add	x2, x2, #0x10
     3f4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     3f8:	ldr	x0, [x0]
     3fc:	ldr	x1, [x0]
     400:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     404:	add	x0, x0, #0x0
     408:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     40c:	mov	x1, x23
     410:	b	910 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x58c>
     414:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     418:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     41c:	ldr	x1, [x1]
     420:	str	x0, [x1]
     424:	b	92c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5a8>
     428:	stp	x25, x26, [sp, #48]
     42c:	stp	x27, x28, [sp, #64]
     430:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     434:	add	x0, x0, #0x0
     438:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     43c:	bl	0 <_ZN11__sanitizer3DieEv>
     440:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     444:	ldr	x0, [x0]
     448:	ldr	x0, [x0]
     44c:	cbz	x0, 4b8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x134>
     450:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     454:	ldr	x0, [x0]
     458:	ldr	x0, [x0]
     45c:	sub	x1, x0, #0x1
     460:	tst	x1, x0
     464:	b.ne	4cc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x148>  // b.any
     468:	stp	x25, x26, [sp, #48]
     46c:	add	x24, x0, #0x817
     470:	neg	x0, x0
     474:	and	x24, x24, x0
     478:	mov	w2, #0x0                   	// #0
     47c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     480:	add	x1, x1, #0x0
     484:	mov	x0, x24
     488:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     48c:	mov	x25, x0
     490:	mov	x2, #0x0                   	// #0
     494:	mov	x1, x20
     498:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     49c:	mov	x1, x23
     4a0:	mov	x0, x20
     4a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     4a8:	mov	x23, x24
     4ac:	mov	x20, x25
     4b0:	ldp	x25, x26, [sp, #48]
     4b4:	b	988 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x604>
     4b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     4bc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     4c0:	ldr	x1, [x1]
     4c4:	str	x0, [x1]
     4c8:	b	450 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xcc>
     4cc:	stp	x25, x26, [sp, #48]
     4d0:	stp	x27, x28, [sp, #64]
     4d4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     4d8:	add	x0, x0, #0x0
     4dc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     4e0:	bl	0 <_ZN11__sanitizer3DieEv>
     4e4:	stp	x25, x26, [sp, #48]
     4e8:	stp	x27, x28, [sp, #64]
     4ec:	bl	26c <_ZN11__sanitizer15ColorizeReportsEv>
     4f0:	and	w0, w0, #0xff
     4f4:	cbnz	w0, b40 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7bc>
     4f8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     4fc:	add	x24, x1, #0x0
     500:	mov	x1, x24
     504:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     508:	add	x0, x0, #0x0
     50c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     510:	mov	x0, x19
     514:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
     518:	mov	x23, x0
     51c:	mov	w7, w20
     520:	ldr	x6, [x19, #32]
     524:	ldr	x5, [x19, #40]
     528:	ldr	x4, [x19, #24]
     52c:	ldr	x3, [x19, #16]
     530:	mov	x2, x0
     534:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     538:	ldr	x0, [x0]
     53c:	ldr	x1, [x0]
     540:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     544:	add	x0, x0, #0x0
     548:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     54c:	mov	x1, x24
     550:	b	b98 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x814>
     554:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     558:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     55c:	ldr	x1, [x1]
     560:	str	x0, [x1]
     564:	b	bb8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x834>
     568:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     56c:	add	x0, x0, #0x0
     570:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     574:	b	bcc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x848>
     578:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     57c:	add	x1, x1, #0x0
     580:	b	bf8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x874>
     584:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     588:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     58c:	ldr	x1, [x1]
     590:	str	x0, [x1]
     594:	b	c18 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x894>
     598:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     59c:	add	x0, x0, #0x0
     5a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     5a4:	b	c2c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8a8>
     5a8:	add	x0, sp, #0x60
     5ac:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     5b0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     5b4:	ldr	x0, [x0]
     5b8:	ldr	x0, [x0]
     5bc:	cbz	x0, 6d4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x350>
     5c0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     5c4:	ldr	x0, [x0]
     5c8:	ldr	x0, [x0]
     5cc:	sub	x1, x0, #0x1
     5d0:	tst	x1, x0
     5d4:	b.ne	6e8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x364>  // b.any
     5d8:	add	x24, x0, #0x817
     5dc:	neg	x0, x0
     5e0:	and	x24, x24, x0
     5e4:	mov	w2, #0x0                   	// #0
     5e8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     5ec:	add	x1, x1, #0x0
     5f0:	mov	x0, x24
     5f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     5f8:	mov	x20, x0
     5fc:	mov	x2, #0x0                   	// #0
     600:	mov	x1, #0x0                   	// #0
     604:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     608:	mov	x1, #0x0                   	// #0
     60c:	mov	x0, #0x0                   	// #0
     610:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     614:	cmp	x24, #0x817
     618:	b.ls	6f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x374>  // b.plast
     61c:	mov	x2, #0x818                 	// #2072
     620:	mov	w1, #0x0                   	// #0
     624:	mov	x0, x20
     628:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     62c:	add	x0, x20, #0x10
     630:	str	x0, [x20]
     634:	str	wzr, [x20, #8]
     638:	str	wzr, [x20, #12]
     63c:	str	xzr, [x20, #2064]
     640:	mov	x2, x20
     644:	mov	x1, x22
     648:	mov	x0, x19
     64c:	blr	x21
     650:	mov	x0, x20
     654:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     658:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     65c:	ldr	x0, [x0]
     660:	ldrb	w0, [x0, #232]
     664:	cbz	w0, 684 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x300>
     668:	ldr	x22, [x19, #24]
     66c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     670:	ldr	x0, [x0]
     674:	ldr	x0, [x0]
     678:	cbz	x0, 78c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x408>
     67c:	cmp	x22, x0
     680:	b.cs	a54 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6d0>  // b.hs, b.nlast
     684:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     688:	ldr	x0, [x0]
     68c:	ldrb	w0, [x0, #233]
     690:	cbnz	w0, 8b0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x52c>
     694:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     698:	ldr	x0, [x0]
     69c:	ldr	x1, [x0]
     6a0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     6a4:	add	x0, x0, #0x0
     6a8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     6ac:	mov	x2, #0x0                   	// #0
     6b0:	mov	x1, x20
     6b4:	mov	x0, x23
     6b8:	bl	2cc <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
     6bc:	mov	x1, x24
     6c0:	mov	x0, x20
     6c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     6c8:	ldp	x25, x26, [sp, #48]
     6cc:	ldp	x27, x28, [sp, #64]
     6d0:	b	9e8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x664>
     6d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     6d8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     6dc:	ldr	x1, [x1]
     6e0:	str	x0, [x1]
     6e4:	b	5c0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x23c>
     6e8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     6ec:	add	x0, x0, #0x0
     6f0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     6f4:	bl	0 <_ZN11__sanitizer3DieEv>
     6f8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     6fc:	ldr	x0, [x0]
     700:	ldr	x0, [x0]
     704:	cbz	x0, 768 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3e4>
     708:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     70c:	ldr	x0, [x0]
     710:	ldr	x0, [x0]
     714:	sub	x1, x0, #0x1
     718:	tst	x1, x0
     71c:	b.ne	77c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3f8>  // b.any
     720:	add	x25, x0, #0x817
     724:	neg	x0, x0
     728:	and	x25, x25, x0
     72c:	mov	w2, #0x0                   	// #0
     730:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     734:	add	x1, x1, #0x0
     738:	mov	x0, x25
     73c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     740:	mov	x26, x0
     744:	mov	x2, #0x0                   	// #0
     748:	mov	x1, x20
     74c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     750:	mov	x1, x24
     754:	mov	x0, x20
     758:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     75c:	mov	x24, x25
     760:	mov	x20, x26
     764:	b	61c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x298>
     768:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     76c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     770:	ldr	x1, [x1]
     774:	str	x0, [x1]
     778:	b	708 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x384>
     77c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     780:	add	x0, x0, #0x0
     784:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     788:	bl	0 <_ZN11__sanitizer3DieEv>
     78c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     790:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     794:	ldr	x1, [x1]
     798:	str	x0, [x1]
     79c:	cmp	x22, x0
     7a0:	b.cc	684 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x300>  // b.lo, b.ul, b.last
     7a4:	str	xzr, [sp, #136]
     7a8:	str	xzr, [sp, #144]
     7ac:	str	xzr, [sp, #128]
     7b0:	cbnz	x0, a60 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6dc>
     7b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     7b8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     7bc:	ldr	x1, [x1]
     7c0:	str	x0, [x1]
     7c4:	b	a60 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6dc>
     7c8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     7cc:	add	x0, x0, #0x0
     7d0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     7d4:	bl	0 <_ZN11__sanitizer3DieEv>
     7d8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     7dc:	ldr	x0, [x0]
     7e0:	ldr	x0, [x0]
     7e4:	cbz	x0, 848 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4c4>
     7e8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     7ec:	ldr	x0, [x0]
     7f0:	ldr	x0, [x0]
     7f4:	sub	x1, x0, #0x1
     7f8:	tst	x1, x0
     7fc:	b.ne	85c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4d8>  // b.any
     800:	add	x21, x0, #0x3ff
     804:	neg	x0, x0
     808:	and	x21, x21, x0
     80c:	mov	w2, #0x0                   	// #0
     810:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     814:	add	x1, x1, #0x0
     818:	mov	x0, x21
     81c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     820:	mov	x25, x0
     824:	ldr	x2, [sp, #144]
     828:	ldr	x1, [sp, #128]
     82c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     830:	ldr	x1, [sp, #136]
     834:	ldr	x0, [sp, #128]
     838:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     83c:	str	x25, [sp, #128]
     840:	str	x21, [sp, #136]
     844:	b	ad0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x74c>
     848:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     84c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     850:	ldr	x1, [x1]
     854:	str	x0, [x1]
     858:	b	7e8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x464>
     85c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     860:	add	x0, x0, #0x0
     864:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     868:	bl	0 <_ZN11__sanitizer3DieEv>
     86c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     870:	add	x1, x1, #0x0
     874:	add	x0, sp, #0x80
     878:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     87c:	ldr	x1, [sp, #128]
     880:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     884:	add	x0, x0, #0x0
     888:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     88c:	ldr	x1, [sp, #136]
     890:	ldr	x0, [sp, #128]
     894:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     898:	b	684 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x300>
     89c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     8a0:	add	x1, x1, #0x0
     8a4:	add	x0, sp, #0x80
     8a8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     8ac:	b	87c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4f8>
     8b0:	ldr	x0, [x19, #8]
     8b4:	bl	0 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>
     8b8:	b	694 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x310>
     8bc:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     8c0:	add	x1, x1, #0x0
     8c4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     8c8:	add	x0, x0, #0x0
     8cc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     8d0:	mov	w7, w20
     8d4:	ldr	x6, [x19, #32]
     8d8:	ldr	x5, [x19, #40]
     8dc:	ldr	x4, [x19, #24]
     8e0:	ldr	x3, [x19, #16]
     8e4:	adrp	x2, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     8e8:	add	x2, x2, #0x0
     8ec:	add	x2, x2, #0x10
     8f0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     8f4:	ldr	x0, [x0]
     8f8:	ldr	x1, [x0]
     8fc:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     900:	add	x0, x0, #0x0
     904:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     908:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     90c:	add	x1, x1, #0x0
     910:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     914:	add	x0, x0, #0x0
     918:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     91c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     920:	ldr	x0, [x0]
     924:	ldr	x0, [x0]
     928:	cbz	x0, 414 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x90>
     92c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     930:	ldr	x0, [x0]
     934:	ldr	x2, [x0]
     938:	sub	x0, x2, #0x1
     93c:	tst	x0, x2
     940:	b.ne	428 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xa4>  // b.any
     944:	add	x23, x2, #0x817
     948:	neg	x2, x2
     94c:	and	x23, x23, x2
     950:	mov	w2, #0x0                   	// #0
     954:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     958:	add	x1, x1, #0x0
     95c:	mov	x0, x23
     960:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     964:	mov	x20, x0
     968:	mov	x2, #0x0                   	// #0
     96c:	mov	x1, #0x0                   	// #0
     970:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     974:	mov	x1, #0x0                   	// #0
     978:	mov	x0, #0x0                   	// #0
     97c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     980:	cmp	x23, #0x817
     984:	b.ls	440 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xbc>  // b.plast
     988:	mov	x2, #0x818                 	// #2072
     98c:	mov	w1, #0x0                   	// #0
     990:	mov	x0, x20
     994:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     998:	add	x0, x20, #0x10
     99c:	str	x0, [x20]
     9a0:	str	wzr, [x20, #8]
     9a4:	str	wzr, [x20, #12]
     9a8:	str	xzr, [x20, #2064]
     9ac:	mov	x2, x20
     9b0:	mov	x1, x22
     9b4:	mov	x0, x19
     9b8:	blr	x21
     9bc:	mov	x0, x20
     9c0:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     9c4:	mov	x2, #0x0                   	// #0
     9c8:	mov	x1, x20
     9cc:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     9d0:	add	x0, x0, #0x0
     9d4:	add	x0, x0, #0x10
     9d8:	bl	2cc <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
     9dc:	mov	x1, x23
     9e0:	mov	x0, x20
     9e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     9e8:	ldp	x21, x22, [sp, #16]
     9ec:	ldp	x23, x24, [sp, #32]
     9f0:	ldr	x30, [sp, #80]
     9f4:	ldp	x19, x20, [sp], #208
     9f8:	ret
     9fc:	asr	w4, w21, #4
     a00:	and	w5, w21, #0xf
     a04:	mov	x3, x28
     a08:	adrp	x6, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     a0c:	add	x6, x6, #0x0
     a10:	mov	x2, x25
     a14:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     a18:	add	x1, x1, #0x0
     a1c:	add	x0, sp, #0x80
     a20:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     a24:	add	x22, x22, #0x1
     a28:	cmp	x26, x22
     a2c:	b.eq	86c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4e8>  // b.none
     a30:	ldrb	w21, [x22]
     a34:	bl	26c <_ZN11__sanitizer15ColorizeReportsEv>
     a38:	and	w0, w0, #0xff
     a3c:	cbnz	w0, 9fc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x678>
     a40:	asr	w4, w21, #4
     a44:	and	w5, w21, #0xf
     a48:	mov	x3, x27
     a4c:	mov	x6, x25
     a50:	b	a10 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x68c>
     a54:	str	xzr, [sp, #136]
     a58:	str	xzr, [sp, #144]
     a5c:	str	xzr, [sp, #128]
     a60:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a64:	ldr	x0, [x0]
     a68:	ldr	x0, [x0]
     a6c:	sub	x1, x0, #0x1
     a70:	tst	x1, x0
     a74:	b.ne	7c8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x444>  // b.any
     a78:	add	x21, x0, #0x3ff
     a7c:	neg	x0, x0
     a80:	and	x21, x21, x0
     a84:	mov	w2, #0x0                   	// #0
     a88:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     a8c:	add	x1, x1, #0x0
     a90:	mov	x0, x21
     a94:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a98:	mov	x25, x0
     a9c:	ldr	x2, [sp, #144]
     aa0:	ldr	x1, [sp, #128]
     aa4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     aa8:	ldr	x1, [sp, #136]
     aac:	ldr	x0, [sp, #128]
     ab0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     ab4:	str	x25, [sp, #128]
     ab8:	str	x21, [sp, #136]
     abc:	ldr	x0, [sp, #144]
     ac0:	cmp	x0, #0x3ff
     ac4:	b.hi	aec <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x768>  // b.pmore
     ac8:	cmp	x21, #0x3ff
     acc:	b.ls	7d8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x454>  // b.plast
     ad0:	ldr	x0, [sp, #144]
     ad4:	mov	x2, #0x400                 	// #1024
     ad8:	sub	x2, x2, x0
     adc:	mov	w1, #0x0                   	// #0
     ae0:	ldr	x3, [sp, #128]
     ae4:	add	x0, x3, x0
     ae8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     aec:	mov	x0, #0x400                 	// #1024
     af0:	str	x0, [sp, #144]
     af4:	str	xzr, [sp, #152]
     af8:	ldr	x0, [sp, #128]
     afc:	strb	wzr, [x0]
     b00:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b04:	add	x1, x1, #0x0
     b08:	add	x0, sp, #0x80
     b0c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     b10:	mov	x1, #0x10                  	// #16
     b14:	mov	x0, x22
     b18:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
     b1c:	and	w0, w0, #0xff
     b20:	cbz	w0, 89c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x518>
     b24:	add	x26, x22, #0x10
     b28:	adrp	x28, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b2c:	add	x28, x28, #0x0
     b30:	adrp	x27, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b34:	add	x27, x27, #0x0
     b38:	mov	x25, x27
     b3c:	b	a30 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6ac>
     b40:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b44:	add	x1, x1, #0x0
     b48:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b4c:	add	x0, x0, #0x0
     b50:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     b54:	mov	x0, x19
     b58:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
     b5c:	mov	x23, x0
     b60:	mov	w7, w20
     b64:	ldr	x6, [x19, #32]
     b68:	ldr	x5, [x19, #40]
     b6c:	ldr	x4, [x19, #24]
     b70:	ldr	x3, [x19, #16]
     b74:	mov	x2, x0
     b78:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     b7c:	ldr	x0, [x0]
     b80:	ldr	x1, [x0]
     b84:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b88:	add	x0, x0, #0x0
     b8c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     b90:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b94:	add	x1, x1, #0x0
     b98:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     b9c:	add	x0, x0, #0x0
     ba0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     ba4:	ldr	x20, [x19, #24]
     ba8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     bac:	ldr	x0, [x0]
     bb0:	ldr	x0, [x0]
     bb4:	cbz	x0, 554 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1d0>
     bb8:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     bbc:	ldr	x0, [x0]
     bc0:	ldr	x0, [x0]
     bc4:	cmp	x20, x0
     bc8:	b.cc	568 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1e4>  // b.lo, b.ul, b.last
     bcc:	ldrb	w0, [x19, #48]
     bd0:	cbz	w0, c2c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8a8>
     bd4:	ldr	w0, [x19, #52]
     bd8:	cmp	w0, #0x2
     bdc:	b.eq	578 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1f4>  // b.none
     be0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     be4:	add	x2, x1, #0x0
     be8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     bec:	add	x1, x1, #0x0
     bf0:	cmp	w0, #0x1
     bf4:	csel	x1, x1, x2, eq  // eq = none
     bf8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     bfc:	add	x0, x0, #0x0
     c00:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c04:	ldr	x20, [x19, #16]
     c08:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     c0c:	ldr	x0, [x0]
     c10:	ldr	x0, [x0]
     c14:	cbz	x0, 584 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x200>
     c18:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     c1c:	ldr	x0, [x0]
     c20:	ldr	x0, [x0]
     c24:	cmp	x20, x0
     c28:	b.cc	598 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x214>  // b.lo, b.ul, b.last
     c2c:	ldr	x20, [x19, #24]
     c30:	mov	w1, #0x1                   	// #1
     c34:	add	x0, sp, #0x60
     c38:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
     c3c:	str	xzr, [sp, #152]
     c40:	str	xzr, [sp, #160]
     c44:	str	xzr, [sp, #200]
     c48:	add	x26, sp, #0x80
     c4c:	add	x25, sp, #0x60
     c50:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     c54:	add	x24, x24, #0x0
     c58:	mov	x1, x26
     c5c:	mov	x0, x25
     c60:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     c64:	and	w1, w0, #0xff
     c68:	cbz	w1, 5a8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x224>
     c6c:	ldr	x0, [sp, #128]
     c70:	cmp	x20, x0
     c74:	b.cc	c58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8d4>  // b.lo, b.ul, b.last
     c78:	ldr	x0, [sp, #136]
     c7c:	cmp	x20, x0
     c80:	b.cs	c58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8d4>  // b.hs, b.nlast
     c84:	ldr	x0, [sp, #168]
     c88:	tbnz	w0, #2, c58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8d4>
     c8c:	mov	x0, x24
     c90:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c94:	b	c58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8d4>

0000000000000c98 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>:
     c98:	stp	x19, x20, [sp, #-32]!
     c9c:	str	x30, [sp, #16]
     ca0:	bl	0 <_ZN11__sanitizer13GetThreadSelfEv>
     ca4:	mov	x20, x0
     ca8:	adrp	x19, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     cac:	add	x19, x19, #0x0
     cb0:	b	cd4 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x3c>
     cb4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     cb8:	add	x0, x0, #0x0
     cbc:	add	x0, x0, #0x8
     cc0:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     cc4:	b	d14 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x7c>
     cc8:	cmp	x20, x1
     ccc:	b.eq	d20 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x88>  // b.none
     cd0:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     cd4:	ldxr	x1, [x19]
     cd8:	cbnz	x1, ce4 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x4c>
     cdc:	stlxr	w0, x20, [x19]
     ce0:	cbnz	w0, cd4 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x3c>
     ce4:	dmb	ish
     ce8:	cbnz	x1, cc8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x30>
     cec:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     cf0:	add	x0, x0, #0x0
     cf4:	add	x0, x0, #0x8
     cf8:	mov	w2, #0x1                   	// #1
     cfc:	ldxrb	w1, [x0]
     d00:	stxrb	w3, w2, [x0]
     d04:	cbnz	w3, cfc <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x64>
     d08:	dmb	ish
     d0c:	and	w0, w1, #0xff
     d10:	cbnz	w0, cb4 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x1c>
     d14:	ldr	x30, [sp, #16]
     d18:	ldp	x19, x20, [sp], #32
     d1c:	ret
     d20:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     d24:	ldr	x0, [x0]
     d28:	ldr	x19, [x0]
     d2c:	mov	x0, x19
     d30:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     d34:	mov	x1, x0
     d38:	mov	x0, x19
     d3c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     d40:	mov	x1, #0x2b                  	// #43
     d44:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     d48:	add	x0, x0, #0x0
     d4c:	add	x0, x0, #0x20
     d50:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     d54:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d58:	ldr	x0, [x0]
     d5c:	ldr	w0, [x0, #216]
     d60:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000000d64 <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>:
     d64:	stp	x19, x20, [sp, #-112]!
     d68:	stp	x21, x22, [sp, #16]
     d6c:	stp	x23, x30, [sp, #32]
     d70:	mov	x23, x0
     d74:	mov	x19, x1
     d78:	mov	w20, w2
     d7c:	mov	x21, x3
     d80:	mov	x22, x4
     d84:	bl	348 <_ZN11__sanitizer23StartReportDeadlySignalEv>
     d88:	add	x0, sp, #0x68
     d8c:	bl	c98 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
     d90:	str	x23, [sp, #48]
     d94:	str	x19, [sp, #56]
     d98:	add	x19, sp, #0x30
     d9c:	mov	x0, x19
     da0:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
     da4:	str	x0, [sp, #64]
     da8:	mov	x0, x19
     dac:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
     db0:	strb	w0, [sp, #96]
     db4:	mov	x0, x19
     db8:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
     dbc:	str	w0, [sp, #100]
     dc0:	mov	x0, x19
     dc4:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
     dc8:	mov	x3, x22
     dcc:	mov	x2, x21
     dd0:	mov	w1, w20
     dd4:	mov	x0, x19
     dd8:	bl	384 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>
     ddc:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     de0:	add	x0, x0, #0x0
     de4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     de8:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000dec <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>:
     dec:	dmb	ish
     df0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     df4:	add	x1, x0, #0x0
     df8:	strb	wzr, [x1, #8]
     dfc:	str	xzr, [x0]
     e00:	ret

0000000000000e04 <_ZN11__sanitizer19ReportMmapWriteExecEi>:
     e04:	and	w0, w0, #0x6
     e08:	cmp	w0, #0x6
     e0c:	b.eq	e14 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x10>  // b.none
     e10:	ret
     e14:	stp	x29, x30, [sp, #-96]!
     e18:	mov	x29, sp
     e1c:	stp	x19, x20, [sp, #16]
     e20:	stp	x21, x22, [sp, #32]
     e24:	stp	x23, x24, [sp, #48]
     e28:	mov	x20, x30
     e2c:	add	x0, x29, #0x58
     e30:	bl	c98 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
     e34:	bl	26c <_ZN11__sanitizer15ColorizeReportsEv>
     e38:	and	w22, w0, #0xff
     e3c:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e40:	ldr	x1, [x1]
     e44:	ldr	x0, [x1]
     e48:	cbz	x0, f44 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x140>
     e4c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e50:	ldr	x0, [x0]
     e54:	ldr	x2, [x0]
     e58:	sub	x0, x2, #0x1
     e5c:	tst	x0, x2
     e60:	b.ne	f58 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x154>  // b.any
     e64:	add	x21, x2, #0x817
     e68:	neg	x2, x2
     e6c:	and	x21, x21, x2
     e70:	mov	w2, #0x0                   	// #0
     e74:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     e78:	add	x1, x1, #0x0
     e7c:	mov	x0, x21
     e80:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     e84:	mov	x19, x0
     e88:	mov	x2, #0x0                   	// #0
     e8c:	mov	x1, #0x0                   	// #0
     e90:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     e94:	mov	x1, #0x0                   	// #0
     e98:	mov	x0, #0x0                   	// #0
     e9c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     ea0:	cmp	x21, #0x817
     ea4:	b.ls	f68 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x164>  // b.plast
     ea8:	mov	x2, #0x818                 	// #2072
     eac:	mov	w1, #0x0                   	// #0
     eb0:	mov	x0, x19
     eb4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     eb8:	add	x0, x19, #0x10
     ebc:	str	x0, [x19]
     ec0:	str	wzr, [x19, #8]
     ec4:	str	wzr, [x19, #12]
     ec8:	str	xzr, [x19, #2064]
     ecc:	str	xzr, [x29, #80]
     ed0:	str	xzr, [x29, #72]
     ed4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     ed8:	ldr	x0, [x0]
     edc:	ldrb	w23, [x0, #33]
     ee0:	cbnz	w23, ffc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1f8>
     ee4:	mov	w7, w23
     ee8:	ldr	x6, [x29, #72]
     eec:	ldr	x5, [x29, #80]
     ef0:	mov	x4, #0x0                   	// #0
     ef4:	mov	x3, x29
     ef8:	mov	x2, x20
     efc:	mov	w1, #0x100                 	// #256
     f00:	mov	x0, x19
     f04:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     f08:	cbnz	w22, 1010 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x20c>
     f0c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     f10:	add	x20, x1, #0x0
     f14:	mov	x1, x20
     f18:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     f1c:	add	x0, x0, #0x0
     f20:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     f24:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     f28:	ldr	x0, [x0]
     f2c:	ldr	x1, [x0]
     f30:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     f34:	add	x0, x0, #0x0
     f38:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     f3c:	mov	x1, x20
     f40:	b	1044 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x240>
     f44:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     f48:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     f4c:	ldr	x1, [x1]
     f50:	str	x0, [x1]
     f54:	b	e4c <_ZN11__sanitizer19ReportMmapWriteExecEi+0x48>
     f58:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     f5c:	add	x0, x0, #0x0
     f60:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     f64:	bl	0 <_ZN11__sanitizer3DieEv>
     f68:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     f6c:	ldr	x0, [x0]
     f70:	ldr	x0, [x0]
     f74:	cbz	x0, fd8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1d4>
     f78:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
     f7c:	ldr	x0, [x0]
     f80:	ldr	x0, [x0]
     f84:	sub	x1, x0, #0x1
     f88:	tst	x1, x0
     f8c:	b.ne	fec <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1e8>  // b.any
     f90:	add	x23, x0, #0x817
     f94:	neg	x0, x0
     f98:	and	x23, x23, x0
     f9c:	mov	w2, #0x0                   	// #0
     fa0:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     fa4:	add	x1, x1, #0x0
     fa8:	mov	x0, x23
     fac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     fb0:	mov	x24, x0
     fb4:	mov	x2, #0x0                   	// #0
     fb8:	mov	x1, x19
     fbc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     fc0:	mov	x1, x21
     fc4:	mov	x0, x19
     fc8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     fcc:	mov	x21, x23
     fd0:	mov	x19, x24
     fd4:	b	ea8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0xa4>
     fd8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     fdc:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
     fe0:	ldr	x1, [x1]
     fe4:	str	x0, [x1]
     fe8:	b	f78 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x174>
     fec:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
     ff0:	add	x0, x0, #0x0
     ff4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ff8:	bl	0 <_ZN11__sanitizer3DieEv>
     ffc:	add	x2, x29, #0x48
    1000:	add	x1, x29, #0x50
    1004:	mov	w0, #0x0                   	// #0
    1008:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
    100c:	b	ee4 <_ZN11__sanitizer19ReportMmapWriteExecEi+0xe0>
    1010:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1014:	add	x1, x1, #0x0
    1018:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    101c:	add	x0, x0, #0x0
    1020:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1024:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
    1028:	ldr	x0, [x0]
    102c:	ldr	x1, [x0]
    1030:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1034:	add	x0, x0, #0x0
    1038:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    103c:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1040:	add	x1, x1, #0x0
    1044:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1048:	add	x0, x0, #0x0
    104c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1050:	mov	x0, x19
    1054:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
    1058:	mov	x2, #0x0                   	// #0
    105c:	mov	x1, x19
    1060:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1064:	add	x0, x0, #0x0
    1068:	bl	2cc <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
    106c:	mov	x1, x21
    1070:	mov	x0, x19
    1074:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1078:	add	x0, x29, #0x58
    107c:	bl	dec <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>
    1080:	ldp	x19, x20, [sp, #16]
    1084:	ldp	x21, x22, [sp, #32]
    1088:	ldp	x23, x24, [sp, #48]
    108c:	ldp	x29, x30, [sp], #96
    1090:	ret

0000000000001094 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>:
    1094:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1098:	add	x0, x0, #0x0
    109c:	ldrb	w3, [x0, #8]
    10a0:	and	x3, x3, #0xff
    10a4:	cmp	x3, #0x1
    10a8:	b.ne	10b0 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv+0x1c>  // b.any
    10ac:	ret
    10b0:	str	x30, [sp, #-16]!
    10b4:	mov	x4, #0x1                   	// #1
    10b8:	adrp	x2, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    10bc:	add	x2, x2, #0x0
    10c0:	mov	w1, #0x2a                  	// #42
    10c4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    10c8:	add	x0, x0, #0x0
    10cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	x20, x0
   c:	mov	w19, #0x0                   	// #0
  10:	mov	w21, #0x1                   	// #1
  14:	b	3c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x3c>
  18:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  1c:	b	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>
  20:	ldxrb	w0, [x20]
  24:	stxrb	w1, w21, [x20]
  28:	cbnz	w1, 20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  2c:	dmb	ish
  30:	and	w0, w0, #0xff
  34:	cbz	w0, 54 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x54>
  38:	add	w19, w19, #0x1
  3c:	cmp	w19, #0x9
  40:	b.gt	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  44:	ldrb	w1, [x20]
  48:	and	w1, w1, #0xff
  4c:	cbnz	w1, 38 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x38>
  50:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

sanitizer_symbolizer_win.o:     file format elf64-littleaarch64


sanitizer_termination.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer14AddDieCallbackEPFvvE>:
   0:	mov	x1, #0x0                   	// #0
   4:	adrp	x3, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
   8:	add	x3, x3, #0x0
   c:	mov	w4, w1
  10:	ldr	x2, [x3, x1, lsl #3]
  14:	cbz	x2, 2c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x2c>
  18:	add	x1, x1, #0x1
  1c:	cmp	x1, #0x5
  20:	b.ne	c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0xc>  // b.any
  24:	mov	w0, #0x0                   	// #0
  28:	ret
  2c:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  30:	add	x1, x1, #0x0
  34:	str	x0, [x1, w4, sxtw #3]
  38:	mov	w0, #0x1                   	// #1
  3c:	b	28 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x28>

0000000000000040 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>:
  40:	mov	x1, #0x0                   	// #0
  44:	adrp	x3, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  48:	add	x3, x3, #0x0
  4c:	ldr	x2, [x3, x1, lsl #3]
  50:	cmp	x2, x0
  54:	b.eq	6c <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x2c>  // b.none
  58:	add	x1, x1, #0x1
  5c:	cmp	x1, #0x5
  60:	b.ne	4c <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0xc>  // b.any
  64:	mov	w0, #0x0                   	// #0
  68:	ret
  6c:	stp	x19, x30, [sp, #-16]!
  70:	sbfiz	x0, x1, #3, #32
  74:	mov	w2, #0x4                   	// #4
  78:	sub	w2, w2, w1
  7c:	adrp	x19, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  80:	add	x19, x19, #0x0
  84:	add	x1, x0, #0x8
  88:	sbfiz	x2, x2, #3, #32
  8c:	add	x1, x19, x1
  90:	add	x0, x19, x0
  94:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
  98:	str	xzr, [x19, #32]
  9c:	mov	w0, #0x1                   	// #1
  a0:	ldp	x19, x30, [sp], #16
  a4:	ret

00000000000000a8 <_ZN11__sanitizer18SetUserDieCallbackEPFvvE>:
  a8:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  ac:	str	x0, [x1]
  b0:	ret

00000000000000b4 <_ZN11__sanitizer3DieEv>:
  b4:	stp	x19, x20, [sp, #-32]!
  b8:	str	x30, [sp, #16]
  bc:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  c0:	ldr	x0, [x0]
  c4:	cbz	x0, cc <_ZN11__sanitizer3DieEv+0x18>
  c8:	blr	x0
  cc:	mov	x19, #0x4                   	// #4
  d0:	adrp	x20, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  d4:	add	x20, x20, #0x0
  d8:	b	e8 <_ZN11__sanitizer3DieEv+0x34>
  dc:	sub	x19, x19, #0x1
  e0:	cmn	x19, #0x1
  e4:	b.eq	f8 <_ZN11__sanitizer3DieEv+0x44>  // b.none
  e8:	ldr	x0, [x20, x19, lsl #3]
  ec:	cbz	x0, dc <_ZN11__sanitizer3DieEv+0x28>
  f0:	blr	x0
  f4:	b	dc <_ZN11__sanitizer3DieEv+0x28>
  f8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  fc:	ldr	x0, [x0]
 100:	ldrb	w0, [x0, #220]
 104:	cbz	w0, 10c <_ZN11__sanitizer3DieEv+0x58>
 108:	bl	0 <_ZN11__sanitizer5AbortEv>
 10c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 110:	ldr	x0, [x0]
 114:	ldr	w0, [x0, #216]
 118:	bl	0 <_ZN11__sanitizer14internal__exitEi>

000000000000011c <_ZN11__sanitizer22SetCheckFailedCallbackEPFvPKciS1_yyE>:
 11c:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 120:	str	x0, [x1]
 124:	ret

0000000000000128 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>:
 128:	stp	x19, x20, [sp, #-48]!
 12c:	stp	x21, x22, [sp, #16]
 130:	stp	x23, x30, [sp, #32]
 134:	mov	x19, x0
 138:	mov	w20, w1
 13c:	mov	x21, x2
 140:	mov	x22, x3
 144:	mov	x23, x4
 148:	adrp	x5, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 14c:	add	x5, x5, #0x0
 150:	add	x5, x5, #0x38
 154:	ldxr	w0, [x5]
 158:	add	w1, w0, #0x1
 15c:	stlxr	w2, w1, [x5]
 160:	cbnz	w2, 154 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x2c>
 164:	dmb	ish
 168:	cmp	w0, #0xa
 16c:	b.hi	1b8 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x90>  // b.pmore
 170:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 174:	ldr	x5, [x0]
 178:	cbz	x5, 194 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x6c>
 17c:	mov	x4, x23
 180:	mov	x3, x22
 184:	mov	x2, x21
 188:	mov	w1, w20
 18c:	mov	x0, x19
 190:	blr	x5
 194:	mov	x5, x23
 198:	mov	x4, x22
 19c:	mov	x3, x21
 1a0:	mov	w2, w20
 1a4:	mov	x1, x19
 1a8:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 1ac:	add	x0, x0, #0x0
 1b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1b4:	bl	b4 <_ZN11__sanitizer3DieEv>
 1b8:	mov	w0, #0x2                   	// #2
 1bc:	bl	0 <_ZN11__sanitizer15SleepForSecondsEi>
 1c0:	brk	#0x3e8

00000000000001c4 <__sanitizer_set_death_callback>:
 1c4:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 1c8:	str	x0, [x1]
 1cc:	ret

sanitizer_thread_registry.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>:
   0:	ldr	x2, [x0, #32]
   4:	cmp	x1, x2
   8:	b.eq	14 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv+0x14>  // b.none
   c:	mov	w0, #0x0                   	// #0
  10:	ret
  14:	ldr	w0, [x0, #112]
  18:	tst	w0, #0xfffffffb
  1c:	cset	w0, ne  // ne = any
  20:	b	10 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv+0x10>

0000000000000024 <_ZN11__sanitizer17ThreadContextBaseC1Ej>:
  24:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  28:	add	x2, x2, #0x0
  2c:	str	x2, [x0]
  30:	str	w1, [x0, #8]
  34:	str	xzr, [x0, #16]
  38:	str	wzr, [x0, #24]
  3c:	str	xzr, [x0, #32]
  40:	str	xzr, [x0, #40]
  44:	str	wzr, [x0, #112]
  48:	strb	wzr, [x0, #116]
  4c:	strb	wzr, [x0, #117]
  50:	str	wzr, [x0, #120]
  54:	str	xzr, [x0, #128]
  58:	strb	wzr, [x0, #48]
  5c:	dmb	ish
  60:	str	wzr, [x0, #136]
  64:	ret

0000000000000068 <_ZN11__sanitizer17ThreadContextBaseD1Ev>:
  68:	str	x30, [sp, #-16]!
  6c:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  70:	add	x1, x1, #0x0
  74:	str	x1, [x0]
  78:	mov	x4, #0x0                   	// #0
  7c:	mov	x3, #0x0                   	// #0
  80:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  84:	add	x2, x2, #0x0
  88:	mov	w1, #0x1b                  	// #27
  8c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  90:	add	x0, x0, #0x0
  94:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000098 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>:
  98:	strb	wzr, [x0, #48]
  9c:	cbz	x1, c0 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc+0x28>
  a0:	stp	x19, x30, [sp, #-16]!
  a4:	mov	x19, x0
  a8:	mov	x2, #0x40                  	// #64
  ac:	add	x0, x0, #0x30
  b0:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
  b4:	strb	wzr, [x19, #111]
  b8:	ldp	x19, x30, [sp], #16
  bc:	ret
  c0:	ret

00000000000000c4 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>:
  c4:	str	x30, [sp, #-16]!
  c8:	ldr	w1, [x0, #112]
  cc:	sub	w1, w1, #0x2
  d0:	cmp	w1, #0x1
  d4:	b.hi	f8 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x34>  // b.pmore
  d8:	mov	w1, #0x4                   	// #4
  dc:	str	w1, [x0, #112]
  e0:	str	xzr, [x0, #40]
  e4:	ldr	x1, [x0]
  e8:	ldr	x1, [x1]
  ec:	blr	x1
  f0:	ldr	x30, [sp], #16
  f4:	ret
  f8:	mov	x4, #0x0                   	// #0
  fc:	mov	x3, #0x0                   	// #0
 100:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 104:	add	x2, x2, #0x0
 108:	mov	w1, #0x27                  	// #39
 10c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 110:	add	x0, x0, #0x0
 114:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000118 <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>:
 118:	dmb	ish
 11c:	mov	w1, #0x1                   	// #1
 120:	str	w1, [x0, #136]
 124:	ret

0000000000000128 <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>:
 128:	ldr	w0, [x0, #136]
 12c:	dmb	ish
 130:	cmp	w0, #0x0
 134:	cset	w0, ne  // ne = any
 138:	ret

000000000000013c <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>:
 13c:	str	x30, [sp, #-16]!
 140:	ldrb	w2, [x0, #116]
 144:	cbnz	w2, 174 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x38>
 148:	ldr	w4, [x0, #112]
 14c:	cmp	x4, #0x3
 150:	b.ne	194 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x58>  // b.any
 154:	mov	w2, #0x4                   	// #4
 158:	str	w2, [x0, #112]
 15c:	str	xzr, [x0, #40]
 160:	ldr	x2, [x0]
 164:	ldr	x2, [x2, #8]
 168:	blr	x2
 16c:	ldr	x30, [sp], #16
 170:	ret
 174:	mov	x4, #0x1                   	// #1
 178:	mov	x3, #0x0                   	// #0
 17c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 180:	add	x2, x2, #0x0
 184:	mov	w1, #0x38                  	// #56
 188:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 18c:	add	x0, x0, #0x0
 190:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 194:	mov	x3, #0x3                   	// #3
 198:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 19c:	add	x2, x2, #0x0
 1a0:	mov	w1, #0x39                  	// #57
 1a4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 1a8:	add	x0, x0, #0x0
 1ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001b0 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>:
 1b0:	str	x30, [sp, #-16]!
 1b4:	ldrb	w1, [x0, #116]
 1b8:	cbz	w1, 1c8 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x18>
 1bc:	ldr	w1, [x0, #112]
 1c0:	cmp	w1, #0x1
 1c4:	b.ne	1d0 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x20>  // b.any
 1c8:	mov	w1, #0x3                   	// #3
 1cc:	str	w1, [x0, #112]
 1d0:	ldr	x1, [x0]
 1d4:	ldr	x1, [x1, #16]
 1d8:	blr	x1
 1dc:	ldr	x30, [sp], #16
 1e0:	ret

00000000000001e4 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>:
 1e4:	str	x30, [sp, #-16]!
 1e8:	mov	w5, #0x2                   	// #2
 1ec:	str	w5, [x0, #112]
 1f0:	str	x1, [x0, #32]
 1f4:	strb	w2, [x0, #117]
 1f8:	ldr	x1, [x0]
 1fc:	ldr	x2, [x1, #24]
 200:	mov	x1, x3
 204:	blr	x2
 208:	ldr	x30, [sp], #16
 20c:	ret

0000000000000210 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>:
 210:	str	x30, [sp, #-16]!
 214:	mov	w6, #0x1                   	// #1
 218:	str	w6, [x0, #112]
 21c:	str	x1, [x0, #40]
 220:	str	x2, [x0, #16]
 224:	strb	w3, [x0, #116]
 228:	ldr	w1, [x0, #8]
 22c:	cbz	w1, 234 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x24>
 230:	str	w4, [x0, #120]
 234:	ldr	x1, [x0]
 238:	ldr	x2, [x1, #32]
 23c:	mov	x1, x5
 240:	blr	x2
 244:	ldr	x30, [sp], #16
 248:	ret

000000000000024c <_ZN11__sanitizer17ThreadContextBase5ResetEv>:
 24c:	stp	x19, x30, [sp, #-16]!
 250:	mov	x19, x0
 254:	str	wzr, [x0, #112]
 258:	mov	x1, #0x0                   	// #0
 25c:	bl	98 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>
 260:	dmb	ish
 264:	str	wzr, [x19, #136]
 268:	ldr	x0, [x19]
 26c:	ldr	x1, [x0, #40]
 270:	mov	x0, x19
 274:	blr	x1
 278:	ldp	x19, x30, [sp], #16
 27c:	ret

0000000000000280 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>:
 280:	stp	x19, x30, [sp, #-16]!
 284:	mov	x19, x0
 288:	str	x1, [x0]
 28c:	str	w2, [x0, #8]
 290:	str	w3, [x0, #12]
 294:	str	w4, [x0, #16]
 298:	add	x0, x0, #0x18
 29c:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 2a0:	str	wzr, [x19, #112]
 2a4:	str	xzr, [x19, #120]
 2a8:	str	xzr, [x19, #128]
 2ac:	str	xzr, [x19, #136]
 2b0:	str	xzr, [x19, #144]
 2b4:	ldr	w0, [x19, #8]
 2b8:	mov	w2, #0x0                   	// #0
 2bc:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 2c0:	add	x1, x1, #0x0
 2c4:	lsl	x0, x0, #3
 2c8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2cc:	str	x0, [x19, #152]
 2d0:	str	xzr, [x19, #176]
 2d4:	str	xzr, [x19, #168]
 2d8:	str	xzr, [x19, #160]
 2dc:	str	xzr, [x19, #200]
 2e0:	str	xzr, [x19, #192]
 2e4:	str	xzr, [x19, #184]
 2e8:	ldp	x19, x30, [sp], #16
 2ec:	ret

00000000000002f0 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_>:
 2f0:	stp	x19, x20, [sp, #-48]!
 2f4:	stp	x21, x22, [sp, #16]
 2f8:	stp	x23, x30, [sp, #32]
 2fc:	mov	x19, x0
 300:	mov	x22, x1
 304:	mov	x21, x2
 308:	mov	x20, x3
 30c:	add	x23, x0, #0x18
 310:	mov	x0, x23
 314:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 318:	cbz	x22, 324 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x34>
 31c:	ldr	w0, [x19, #112]
 320:	str	x0, [x22]
 324:	cbz	x21, 330 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x40>
 328:	ldr	x0, [x19, #144]
 32c:	str	x0, [x21]
 330:	cbz	x20, 33c <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x4c>
 334:	ldr	x0, [x19, #128]
 338:	str	x0, [x20]
 33c:	mov	x0, x23
 340:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 344:	ldp	x21, x22, [sp, #16]
 348:	ldp	x23, x30, [sp, #32]
 34c:	ldp	x19, x20, [sp], #48
 350:	ret

0000000000000354 <_ZN11__sanitizer14ThreadRegistry18GetMaxAliveThreadsEv>:
 354:	stp	x19, x20, [sp, #-32]!
 358:	str	x30, [sp, #16]
 35c:	mov	x19, x0
 360:	add	x20, x0, #0x18
 364:	mov	x0, x20
 368:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 36c:	ldr	x19, [x19, #136]
 370:	mov	x0, x20
 374:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 378:	mov	x0, x19
 37c:	ldr	x30, [sp, #16]
 380:	ldp	x19, x20, [sp], #32
 384:	ret

0000000000000388 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>:
 388:	stp	x19, x20, [sp, #-48]!
 38c:	stp	x21, x22, [sp, #16]
 390:	str	x30, [sp, #32]
 394:	mov	x20, x0
 398:	mov	x21, x1
 39c:	mov	x22, x2
 3a0:	add	x0, x0, #0x18
 3a4:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 3a8:	ldr	w0, [x20, #112]
 3ac:	cbz	w0, 3e0 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x58>
 3b0:	mov	w19, #0x0                   	// #0
 3b4:	b	3c8 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x40>
 3b8:	add	w19, w19, #0x1
 3bc:	ldr	w0, [x20, #112]
 3c0:	cmp	w0, w19
 3c4:	b.ls	3e0 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x58>  // b.plast
 3c8:	ldr	x0, [x20, #152]
 3cc:	ldr	x0, [x0, w19, uxtw #3]
 3d0:	cbz	x0, 3b8 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x30>
 3d4:	mov	x1, x22
 3d8:	blr	x21
 3dc:	b	3b8 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x30>
 3e0:	ldp	x21, x22, [sp, #16]
 3e4:	ldr	x30, [sp, #32]
 3e8:	ldp	x19, x20, [sp], #48
 3ec:	ret

00000000000003f0 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>:
 3f0:	stp	x19, x20, [sp, #-64]!
 3f4:	stp	x21, x22, [sp, #16]
 3f8:	stp	x23, x24, [sp, #32]
 3fc:	str	x30, [sp, #48]
 400:	mov	x21, x0
 404:	mov	x22, x1
 408:	mov	x23, x2
 40c:	add	x24, x0, #0x18
 410:	mov	x0, x24
 414:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 418:	ldr	w0, [x21, #112]
 41c:	cbz	w0, 484 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x94>
 420:	mov	w19, #0x0                   	// #0
 424:	b	438 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x48>
 428:	add	w19, w19, #0x1
 42c:	ldr	w0, [x21, #112]
 430:	cmp	w0, w19
 434:	b.ls	460 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x70>  // b.plast
 438:	ldr	x0, [x21, #152]
 43c:	ldr	x20, [x0, w19, uxtw #3]
 440:	cbz	x20, 428 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x38>
 444:	mov	x1, x23
 448:	mov	x0, x20
 44c:	blr	x22
 450:	and	w0, w0, #0xff
 454:	cbz	w0, 428 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x38>
 458:	ldr	w19, [x20, #8]
 45c:	b	464 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x74>
 460:	mov	w19, #0xffffffff            	// #-1
 464:	mov	x0, x24
 468:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 46c:	mov	w0, w19
 470:	ldp	x21, x22, [sp, #16]
 474:	ldp	x23, x24, [sp, #32]
 478:	ldr	x30, [sp, #48]
 47c:	ldp	x19, x20, [sp], #64
 480:	ret
 484:	mov	w19, #0xffffffff            	// #-1
 488:	b	464 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x74>

000000000000048c <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>:
 48c:	stp	x19, x20, [sp, #-48]!
 490:	stp	x21, x22, [sp, #16]
 494:	stp	x23, x30, [sp, #32]
 498:	mov	x21, x0
 49c:	mov	x22, x1
 4a0:	mov	x23, x2
 4a4:	add	x0, x0, #0x18
 4a8:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 4ac:	ldr	w0, [x21, #112]
 4b0:	cbz	w0, 508 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x7c>
 4b4:	mov	w19, #0x0                   	// #0
 4b8:	b	4cc <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x40>
 4bc:	add	w19, w19, #0x1
 4c0:	ldr	w0, [x21, #112]
 4c4:	cmp	w0, w19
 4c8:	b.ls	4f0 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x64>  // b.plast
 4cc:	ldr	x0, [x21, #152]
 4d0:	ldr	x20, [x0, w19, uxtw #3]
 4d4:	cbz	x20, 4bc <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x30>
 4d8:	mov	x1, x23
 4dc:	mov	x0, x20
 4e0:	blr	x22
 4e4:	and	w0, w0, #0xff
 4e8:	cbz	w0, 4bc <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x30>
 4ec:	b	4f4 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x68>
 4f0:	mov	x20, #0x0                   	// #0
 4f4:	mov	x0, x20
 4f8:	ldp	x21, x22, [sp, #16]
 4fc:	ldp	x23, x30, [sp, #32]
 500:	ldp	x19, x20, [sp], #48
 504:	ret
 508:	mov	x20, #0x0                   	// #0
 50c:	b	4f4 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x68>

0000000000000510 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>:
 510:	str	x30, [sp, #-16]!
 514:	mov	x2, x1
 518:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 51c:	add	x1, x1, #0x0
 520:	bl	48c <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>
 524:	ldr	x30, [sp], #16
 528:	ret

000000000000052c <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc>:
 52c:	stp	x19, x20, [sp, #-48]!
 530:	stp	x21, x22, [sp, #16]
 534:	str	x30, [sp, #32]
 538:	mov	x19, x0
 53c:	mov	w20, w1
 540:	mov	x21, x2
 544:	add	x22, x0, #0x18
 548:	mov	x0, x22
 54c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 550:	mov	w3, w20
 554:	ldr	w4, [x19, #112]
 558:	cmp	x4, w20, uxtw
 55c:	b.ls	598 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x6c>  // b.plast
 560:	ldr	x0, [x19, #152]
 564:	ldr	x0, [x0, x3, lsl #3]
 568:	cbz	x0, 5b0 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x84>
 56c:	ldr	w4, [x0, #112]
 570:	cmp	x4, #0x2
 574:	b.ne	5d0 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0xa4>  // b.any
 578:	mov	x1, x21
 57c:	bl	98 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>
 580:	mov	x0, x22
 584:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 588:	ldp	x21, x22, [sp, #16]
 58c:	ldr	x30, [sp, #32]
 590:	ldp	x19, x20, [sp], #48
 594:	ret
 598:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 59c:	add	x2, x2, #0x0
 5a0:	mov	w1, #0xd7                  	// #215
 5a4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5a8:	add	x0, x0, #0x0
 5ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5b0:	mov	x4, #0x0                   	// #0
 5b4:	mov	x3, #0x0                   	// #0
 5b8:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5bc:	add	x2, x2, #0x0
 5c0:	mov	w1, #0xd9                  	// #217
 5c4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5c8:	add	x0, x0, #0x0
 5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d0:	mov	x3, #0x2                   	// #2
 5d4:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5d8:	add	x2, x2, #0x0
 5dc:	mov	w1, #0xda                  	// #218
 5e0:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5e4:	add	x0, x0, #0x0
 5e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000005ec <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc>:
 5ec:	stp	x19, x20, [sp, #-48]!
 5f0:	stp	x21, x22, [sp, #16]
 5f4:	str	x30, [sp, #32]
 5f8:	mov	x20, x0
 5fc:	mov	x19, x1
 600:	mov	x21, x2
 604:	add	x22, x0, #0x18
 608:	mov	x0, x22
 60c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 610:	ldr	w5, [x20, #112]
 614:	cbz	w5, 660 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x74>
 618:	ldr	x6, [x20, #152]
 61c:	mov	x3, #0x0                   	// #0
 620:	b	630 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x44>
 624:	add	x3, x3, #0x1
 628:	cmp	w5, w3
 62c:	b.ls	660 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x74>  // b.plast
 630:	ldr	x0, [x6, x3, lsl #3]
 634:	cbz	x0, 624 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
 638:	ldr	x4, [x0, #40]
 63c:	cmp	x4, x19
 640:	b.ne	624 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>  // b.any
 644:	ldr	w1, [x0, #112]
 648:	cbz	w1, 624 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
 64c:	mov	x1, x21
 650:	bl	98 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>
 654:	mov	x0, x22
 658:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 65c:	b	668 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>
 660:	mov	x0, x22
 664:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 668:	ldp	x21, x22, [sp, #16]
 66c:	ldr	x30, [sp, #32]
 670:	ldp	x19, x20, [sp], #48
 674:	ret

0000000000000678 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>:
 678:	stp	x19, x20, [sp, #-64]!
 67c:	stp	x21, x22, [sp, #16]
 680:	stp	x23, x24, [sp, #32]
 684:	str	x30, [sp, #48]
 688:	mov	x19, x0
 68c:	mov	w20, w1
 690:	mov	x21, x2
 694:	and	w24, w3, #0xff
 698:	mov	x22, x4
 69c:	add	x23, x0, #0x18
 6a0:	mov	x0, x23
 6a4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 6a8:	ldr	x0, [x19, #144]
 6ac:	add	x0, x0, #0x1
 6b0:	str	x0, [x19, #144]
 6b4:	mov	w3, w20
 6b8:	ldr	w4, [x19, #112]
 6bc:	cmp	x4, w20, uxtw
 6c0:	b.ls	708 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0x90>  // b.plast
 6c4:	ldr	x0, [x19, #152]
 6c8:	ldr	x0, [x0, x3, lsl #3]
 6cc:	cbz	x0, 720 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xa8>
 6d0:	ldr	w4, [x0, #112]
 6d4:	cmp	x4, #0x1
 6d8:	b.ne	740 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xc8>  // b.any
 6dc:	mov	x3, x22
 6e0:	mov	w2, w24
 6e4:	mov	x1, x21
 6e8:	bl	1e4 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>
 6ec:	mov	x0, x23
 6f0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 6f4:	ldp	x21, x22, [sp, #16]
 6f8:	ldp	x23, x24, [sp, #32]
 6fc:	ldr	x30, [sp, #48]
 700:	ldp	x19, x20, [sp], #64
 704:	ret
 708:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 70c:	add	x2, x2, #0x0
 710:	mov	w1, #0x134                 	// #308
 714:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 718:	add	x0, x0, #0x0
 71c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 720:	mov	x4, #0x0                   	// #0
 724:	mov	x3, #0x0                   	// #0
 728:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 72c:	add	x2, x2, #0x0
 730:	mov	w1, #0x136                 	// #310
 734:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 738:	add	x0, x0, #0x0
 73c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 740:	mov	x3, #0x1                   	// #1
 744:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 748:	add	x2, x2, #0x0
 74c:	mov	w1, #0x137                 	// #311
 750:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 754:	add	x0, x0, #0x0
 758:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000075c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>:
 75c:	stp	x19, x20, [sp, #-32]!
 760:	str	x30, [sp, #16]
 764:	mov	x19, x0
 768:	ldr	w0, [x1, #8]
 76c:	cbz	w0, 79c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x40>
 770:	ldr	x0, [x19, #160]
 774:	cbnz	x0, 7a8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x4c>
 778:	str	xzr, [x1, #128]
 77c:	str	x1, [x19, #176]
 780:	str	x1, [x19, #168]
 784:	mov	x0, #0x1                   	// #1
 788:	str	x0, [x19, #160]
 78c:	ldr	x0, [x19, #160]
 790:	ldr	w1, [x19, #12]
 794:	cmp	x1, x0
 798:	b.cc	7c8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x6c>  // b.lo, b.ul, b.last
 79c:	ldr	x30, [sp, #16]
 7a0:	ldp	x19, x20, [sp], #32
 7a4:	ret
 7a8:	str	xzr, [x1, #128]
 7ac:	ldr	x2, [x19, #176]
 7b0:	str	x1, [x2, #128]
 7b4:	str	x1, [x19, #176]
 7b8:	ldr	x0, [x19, #160]
 7bc:	add	x0, x0, #0x1
 7c0:	str	x0, [x19, #160]
 7c4:	b	78c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x30>
 7c8:	ldr	x20, [x19, #168]
 7cc:	ldr	x1, [x20, #128]
 7d0:	str	x1, [x19, #168]
 7d4:	cbz	x1, 830 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xd4>
 7d8:	sub	x0, x0, #0x1
 7dc:	str	x0, [x19, #160]
 7e0:	ldr	w3, [x20, #112]
 7e4:	cmp	x3, #0x4
 7e8:	b.ne	838 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xdc>  // b.any
 7ec:	mov	x0, x20
 7f0:	bl	24c <_ZN11__sanitizer17ThreadContextBase5ResetEv>
 7f4:	ldr	w0, [x20, #24]
 7f8:	add	w0, w0, #0x1
 7fc:	str	w0, [x20, #24]
 800:	ldr	w1, [x19, #16]
 804:	cmp	w1, #0x0
 808:	ccmp	w0, w1, #0x0, ne  // ne = any
 80c:	b.cs	79c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x40>  // b.hs, b.nlast
 810:	ldr	x0, [x19, #184]
 814:	cbnz	x0, 854 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xf8>
 818:	str	xzr, [x20, #128]
 81c:	str	x20, [x19, #200]
 820:	str	x20, [x19, #192]
 824:	mov	x0, #0x1                   	// #1
 828:	str	x0, [x19, #184]
 82c:	b	79c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x40>
 830:	str	xzr, [x19, #176]
 834:	b	7d8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x7c>
 838:	mov	x4, #0x4                   	// #4
 83c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 840:	add	x2, x2, #0x0
 844:	mov	w1, #0x143                 	// #323
 848:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 84c:	add	x0, x0, #0x0
 850:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 854:	str	xzr, [x20, #128]
 858:	ldr	x1, [x19, #200]
 85c:	str	x20, [x1, #128]
 860:	str	x20, [x19, #200]
 864:	ldr	x0, [x19, #184]
 868:	add	x0, x0, #0x1
 86c:	str	x0, [x19, #184]
 870:	b	79c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x40>

0000000000000874 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv>:
 874:	stp	x19, x20, [sp, #-48]!
 878:	stp	x21, x22, [sp, #16]
 87c:	str	x30, [sp, #32]
 880:	mov	x19, x0
 884:	mov	w20, w1
 888:	mov	x21, x2
 88c:	add	x22, x0, #0x18
 890:	mov	x0, x22
 894:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 898:	mov	w3, w20
 89c:	ldr	w4, [x19, #112]
 8a0:	cmp	x4, w20, uxtw
 8a4:	b.ls	8fc <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x88>  // b.plast
 8a8:	ldr	x0, [x19, #152]
 8ac:	ldr	x20, [x0, x3, lsl #3]
 8b0:	cbz	x20, 914 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xa0>
 8b4:	ldr	w0, [x20, #112]
 8b8:	cbz	w0, 934 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xc0>
 8bc:	ldr	x0, [x20]
 8c0:	ldr	x2, [x0, #48]
 8c4:	mov	x1, x21
 8c8:	mov	x0, x20
 8cc:	blr	x2
 8d0:	ldr	w0, [x20, #112]
 8d4:	cmp	w0, #0x3
 8d8:	b.eq	958 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xe4>  // b.none
 8dc:	mov	w0, #0x1                   	// #1
 8e0:	strb	w0, [x20, #116]
 8e4:	mov	x0, x22
 8e8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 8ec:	ldp	x21, x22, [sp, #16]
 8f0:	ldr	x30, [sp, #32]
 8f4:	ldp	x19, x20, [sp], #48
 8f8:	ret
 8fc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 900:	add	x2, x2, #0x0
 904:	mov	w1, #0xed                  	// #237
 908:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 90c:	add	x0, x0, #0x0
 910:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 914:	mov	x4, #0x0                   	// #0
 918:	mov	x3, #0x0                   	// #0
 91c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 920:	add	x2, x2, #0x0
 924:	mov	w1, #0xef                  	// #239
 928:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 92c:	add	x0, x0, #0x0
 930:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 934:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 938:	ldr	x0, [x0]
 93c:	ldr	x1, [x0]
 940:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 944:	add	x0, x0, #0x0
 948:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 94c:	mov	x0, x22
 950:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 954:	b	8ec <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x78>
 958:	mov	x0, x20
 95c:	bl	c4 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 960:	mov	x1, x20
 964:	mov	x0, x19
 968:	bl	75c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 96c:	b	8e4 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>

0000000000000970 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>:
 970:	stp	x19, x20, [sp, #-64]!
 974:	stp	x21, x22, [sp, #16]
 978:	stp	x23, x24, [sp, #32]
 97c:	str	x30, [sp, #48]
 980:	mov	x20, x0
 984:	mov	x24, x2
 988:	mov	w23, w1
 98c:	ubfiz	x21, x1, #3, #32
 990:	add	x22, x0, #0x18
 994:	mov	x0, x22
 998:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 99c:	ldr	w4, [x20, #112]
 9a0:	cmp	x23, x4
 9a4:	b.cs	9dc <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x6c>  // b.hs, b.nlast
 9a8:	ldr	x0, [x20, #152]
 9ac:	ldr	x19, [x0, x21]
 9b0:	cbz	x19, 9f8 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x88>
 9b4:	ldr	w0, [x19, #112]
 9b8:	cbz	w0, a18 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xa8>
 9bc:	mov	x0, x19
 9c0:	bl	128 <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>
 9c4:	and	w3, w0, #0xff
 9c8:	cbnz	w3, a3c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xcc>
 9cc:	mov	x0, x22
 9d0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 9d4:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 9d8:	b	994 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x24>
 9dc:	mov	x3, x23
 9e0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 9e4:	add	x2, x2, #0x0
 9e8:	mov	w1, #0x102                 	// #258
 9ec:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 9f0:	add	x0, x0, #0x0
 9f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9f8:	mov	x4, #0x0                   	// #0
 9fc:	mov	x3, #0x0                   	// #0
 a00:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a04:	add	x2, x2, #0x0
 a08:	mov	w1, #0x104                 	// #260
 a0c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a10:	add	x0, x0, #0x0
 a14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a18:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 a1c:	ldr	x0, [x0]
 a20:	ldr	x1, [x0]
 a24:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a28:	add	x0, x0, #0x0
 a2c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 a30:	mov	x0, x22
 a34:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 a38:	b	a5c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xec>
 a3c:	mov	x1, x24
 a40:	mov	x0, x19
 a44:	bl	13c <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>
 a48:	mov	x1, x19
 a4c:	mov	x0, x20
 a50:	bl	75c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 a54:	mov	x0, x22
 a58:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 a5c:	ldp	x21, x22, [sp, #16]
 a60:	ldp	x23, x24, [sp, #32]
 a64:	ldr	x30, [sp, #48]
 a68:	ldp	x19, x20, [sp], #64
 a6c:	ret

0000000000000a70 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>:
 a70:	stp	x19, x20, [sp, #-48]!
 a74:	stp	x21, x22, [sp, #16]
 a78:	str	x30, [sp, #32]
 a7c:	mov	x19, x0
 a80:	mov	w20, w1
 a84:	add	x21, x0, #0x18
 a88:	mov	x0, x21
 a8c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 a90:	ldr	x0, [x19, #128]
 a94:	cbz	x0, af4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x84>
 a98:	sub	x0, x0, #0x1
 a9c:	str	x0, [x19, #128]
 aa0:	mov	w3, w20
 aa4:	ldr	w4, [x19, #112]
 aa8:	cmp	x4, w20, uxtw
 aac:	b.ls	b14 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xa4>  // b.plast
 ab0:	ldr	x0, [x19, #152]
 ab4:	ldr	x20, [x0, x3, lsl #3]
 ab8:	cbz	x20, b2c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xbc>
 abc:	ldr	w0, [x20, #112]
 ac0:	cmp	w0, #0x2
 ac4:	b.eq	b4c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xdc>  // b.none
 ac8:	mov	w3, w0
 acc:	cmp	w0, #0x1
 ad0:	b.ne	bac <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x13c>  // b.any
 ad4:	mov	x0, x20
 ad8:	bl	1b0 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>
 adc:	mov	x0, x20
 ae0:	bl	c4 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 ae4:	mov	x1, x20
 ae8:	mov	x0, x19
 aec:	bl	75c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 af0:	b	b6c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xfc>
 af4:	mov	x4, #0x0                   	// #0
 af8:	mov	x3, #0x0                   	// #0
 afc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b00:	add	x2, x2, #0x0
 b04:	mov	w1, #0x11a                 	// #282
 b08:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b0c:	add	x0, x0, #0x0
 b10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b14:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b18:	add	x2, x2, #0x0
 b1c:	mov	w1, #0x11c                 	// #284
 b20:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b24:	add	x0, x0, #0x0
 b28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b2c:	mov	x4, #0x0                   	// #0
 b30:	mov	x3, #0x0                   	// #0
 b34:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b38:	add	x2, x2, #0x0
 b3c:	mov	w1, #0x11e                 	// #286
 b40:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b44:	add	x0, x0, #0x0
 b48:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b4c:	ldr	x0, [x19, #144]
 b50:	cbz	x0, b8c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x11c>
 b54:	ldrb	w22, [x20, #116]
 b58:	sub	x0, x0, #0x1
 b5c:	str	x0, [x19, #144]
 b60:	mov	x0, x20
 b64:	bl	1b0 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>
 b68:	cbnz	w22, adc <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x6c>
 b6c:	mov	x0, x20
 b70:	bl	118 <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>
 b74:	mov	x0, x21
 b78:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 b7c:	ldp	x21, x22, [sp, #16]
 b80:	ldr	x30, [sp, #32]
 b84:	ldp	x19, x20, [sp], #48
 b88:	ret
 b8c:	mov	x4, #0x0                   	// #0
 b90:	mov	x3, #0x0                   	// #0
 b94:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b98:	add	x2, x2, #0x0
 b9c:	mov	w1, #0x121                 	// #289
 ba0:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ba4:	add	x0, x0, #0x0
 ba8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bac:	mov	x4, #0x1                   	// #1
 bb0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 bb4:	add	x2, x2, #0x0
 bb8:	mov	w1, #0x125                 	// #293
 bbc:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 bc0:	add	x0, x0, #0x0
 bc4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000bc8 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>:
 bc8:	mov	x1, x0
 bcc:	ldr	x2, [x0, #184]
 bd0:	mov	x0, #0x0                   	// #0
 bd4:	cbz	x2, bf0 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x28>
 bd8:	ldr	x0, [x1, #192]
 bdc:	ldr	x3, [x0, #128]
 be0:	str	x3, [x1, #192]
 be4:	cbz	x3, bf4 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x2c>
 be8:	sub	x2, x2, #0x1
 bec:	str	x2, [x1, #184]
 bf0:	ret
 bf4:	str	xzr, [x1, #200]
 bf8:	b	be8 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x20>

0000000000000bfc <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>:
 bfc:	stp	x19, x20, [sp, #-64]!
 c00:	stp	x21, x22, [sp, #16]
 c04:	stp	x23, x24, [sp, #32]
 c08:	stp	x25, x30, [sp, #48]
 c0c:	mov	x19, x0
 c10:	mov	x21, x1
 c14:	and	w25, w2, #0xff
 c18:	mov	w22, w3
 c1c:	mov	x23, x4
 c20:	add	x24, x0, #0x18
 c24:	mov	x0, x24
 c28:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 c2c:	mov	x0, x19
 c30:	bl	bc8 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>
 c34:	cbz	x0, cc8 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xcc>
 c38:	ldr	w20, [x0, #8]
 c3c:	mov	w3, w20
 c40:	mov	x1, #0xffffffff            	// #4294967295
 c44:	cmp	x1, w20, uxtw
 c48:	b.eq	d34 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x138>  // b.none
 c4c:	ldr	w4, [x19, #8]
 c50:	cmp	x3, x4
 c54:	b.cs	d54 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x158>  // b.hs, b.nlast
 c58:	ldr	w3, [x0, #112]
 c5c:	cbnz	x3, d6c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x170>
 c60:	ldr	x2, [x19, #128]
 c64:	add	x3, x2, #0x1
 c68:	str	x3, [x19, #128]
 c6c:	ldr	x1, [x19, #136]
 c70:	cmp	x3, x1
 c74:	b.ls	c88 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x8c>  // b.plast
 c78:	add	x4, x1, #0x1
 c7c:	str	x4, [x19, #136]
 c80:	cmp	x2, x1
 c84:	b.ne	d88 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x18c>  // b.any
 c88:	ldr	x2, [x19, #120]
 c8c:	add	x1, x2, #0x1
 c90:	str	x1, [x19, #120]
 c94:	mov	x5, x23
 c98:	mov	w4, w22
 c9c:	mov	w3, w25
 ca0:	mov	x1, x21
 ca4:	bl	210 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>
 ca8:	mov	x0, x24
 cac:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 cb0:	mov	w0, w20
 cb4:	ldp	x21, x22, [sp, #16]
 cb8:	ldp	x23, x24, [sp, #32]
 cbc:	ldp	x25, x30, [sp, #48]
 cc0:	ldp	x19, x20, [sp], #64
 cc4:	ret
 cc8:	ldr	w20, [x19, #112]
 ccc:	ldr	w2, [x19, #8]
 cd0:	cmp	w20, w2
 cd4:	b.cs	d18 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x11c>  // b.hs, b.nlast
 cd8:	add	w0, w20, #0x1
 cdc:	str	w0, [x19, #112]
 ce0:	ldr	x1, [x19]
 ce4:	mov	w0, w20
 ce8:	blr	x1
 cec:	ldr	x1, [x19, #152]
 cf0:	str	x0, [x1, w20, uxtw #3]
 cf4:	cbnz	x0, c3c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x40>
 cf8:	mov	x4, #0x0                   	// #0
 cfc:	mov	x3, #0x0                   	// #0
 d00:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d04:	add	x2, x2, #0x0
 d08:	mov	w1, #0x9c                  	// #156
 d0c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d10:	add	x0, x0, #0x0
 d14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d18:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 d1c:	ldr	x0, [x0]
 d20:	ldr	x1, [x0]
 d24:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d28:	add	x0, x0, #0x0
 d2c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d30:	bl	0 <_ZN11__sanitizer3DieEv>
 d34:	mov	x4, x1
 d38:	mov	x3, x1
 d3c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d40:	add	x2, x2, #0x0
 d44:	mov	w1, #0x9d                  	// #157
 d48:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d4c:	add	x0, x0, #0x0
 d50:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d54:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d58:	add	x2, x2, #0x0
 d5c:	mov	w1, #0x9e                  	// #158
 d60:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d64:	add	x0, x0, #0x0
 d68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d6c:	mov	x4, #0x0                   	// #0
 d70:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d74:	add	x2, x2, #0x0
 d78:	mov	w1, #0x9f                  	// #159
 d7c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d80:	add	x0, x0, #0x0
 d84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d88:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d8c:	add	x2, x2, #0x0
 d90:	mov	w1, #0xa3                  	// #163
 d94:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 d98:	add	x0, x0, #0x0
 d9c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnFinishedEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnFinishedEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnStartedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnStartedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

sanitizer_tls_get_addr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12DTLS_DestroyEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	ldr	x0, [x0]
   8:	ldrb	w0, [x0, #121]
   c:	cbz	w0, e4 <_ZN11__sanitizer12DTLS_DestroyEv+0xe4>
  10:	stp	x19, x20, [sp, #-32]!
  14:	str	x30, [sp, #16]
  18:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
  1c:	ldr	x0, [x0]
  20:	ldr	w0, [x0]
  24:	sxtw	x0, w0
  28:	cmp	x0, #0x1
  2c:	b.hi	a8 <_ZN11__sanitizer12DTLS_DestroyEv+0xa8>  // b.pmore
  30:	mrs	x0, tpidr_el0
  34:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  38:	ldr	x1, [x1]
  3c:	ldr	x19, [x0, x1]
  40:	mov	x2, #0xffffffffffffffff    	// #-1
  44:	str	x2, [x0, x1]
  48:	cbz	x19, 9c <_ZN11__sanitizer12DTLS_DestroyEv+0x9c>
  4c:	mov	x0, x1
  50:	mrs	x1, tpidr_el0
  54:	add	x0, x1, x0
  58:	ldr	x20, [x0, #8]
  5c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
  60:	ldr	x0, [x0]
  64:	ldr	w0, [x0]
  68:	sxtw	x0, w0
  6c:	cmp	x0, #0x1
  70:	b.hi	cc <_ZN11__sanitizer12DTLS_DestroyEv+0xcc>  // b.pmore
  74:	lsl	x1, x19, #4
  78:	mov	x0, x20
  7c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  80:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  84:	add	x0, x0, #0x0
  88:	ldxr	x1, [x0]
  8c:	sub	x1, x1, #0x1
  90:	stlxr	w2, x1, [x0]
  94:	cbnz	w2, 88 <_ZN11__sanitizer12DTLS_DestroyEv+0x88>
  98:	dmb	ish
  9c:	ldr	x30, [sp, #16]
  a0:	ldp	x19, x20, [sp], #32
  a4:	ret
  a8:	mrs	x1, tpidr_el0
  ac:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  b0:	ldr	x0, [x0]
  b4:	ldr	x2, [x1, x0]
  b8:	add	x1, x1, x0
  bc:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  c8:	b	30 <_ZN11__sanitizer12DTLS_DestroyEv+0x30>
  cc:	mov	x2, x19
  d0:	mov	x1, x20
  d4:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  e0:	b	74 <_ZN11__sanitizer12DTLS_DestroyEv+0x74>
  e4:	ret

00000000000000e8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm>:
  e8:	stp	x19, x20, [sp, #-144]!
  ec:	str	x30, [sp, #80]
  f0:	mov	x20, x0
  f4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  f8:	ldr	x0, [x0]
  fc:	ldrb	w0, [x0, #121]
 100:	cbz	w0, 4e8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x400>
 104:	stp	x21, x22, [sp, #16]
 108:	stp	x23, x24, [sp, #32]
 10c:	mov	x21, x1
 110:	mov	x22, x2
 114:	mov	x23, x3
 118:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 11c:	ldr	x0, [x0]
 120:	mrs	x1, tpidr_el0
 124:	ldr	x0, [x1, x0]
 128:	cmn	x0, #0x1
 12c:	b.eq	4f0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x408>  // b.none
 130:	ldr	x19, [x20]
 134:	add	x3, x19, #0x1
 138:	cmp	x0, x3
 13c:	b.cc	1e4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xfc>  // b.lo, b.ul, b.last
 140:	lsl	x19, x19, #4
 144:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 148:	ldr	x0, [x0]
 14c:	mrs	x1, tpidr_el0
 150:	add	x0, x1, x0
 154:	ldr	x0, [x0, #8]
 158:	ldr	x24, [x0, x19]
 15c:	cbnz	x24, 500 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x418>
 160:	ldr	x3, [x20, #8]
 164:	sub	x5, x21, x3
 168:	str	x5, [sp, #136]
 16c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 170:	ldr	x0, [x0]
 174:	ldr	w0, [x0]
 178:	sxtw	x0, w0
 17c:	cmp	x0, #0x1
 180:	b.hi	3e0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2f8>  // b.pmore
 184:	ldr	x1, [sp, #136]
 188:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 18c:	ldr	x0, [x0]
 190:	mrs	x2, tpidr_el0
 194:	add	x0, x2, x0
 198:	ldr	x0, [x0, #24]
 19c:	cmp	x0, x1
 1a0:	b.eq	408 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x320>  // b.none
 1a4:	cmp	x1, x23
 1a8:	ccmp	x1, x22, #0x0, cc  // cc = lo, ul, last
 1ac:	b.cs	488 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x3a0>  // b.hs, b.nlast
 1b0:	and	x0, x1, #0xfff
 1b4:	cmp	x0, #0x10
 1b8:	b.eq	4b0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x3c8>  // b.none
 1bc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 1c0:	ldr	x0, [x0]
 1c4:	ldr	w0, [x0]
 1c8:	sxtw	x0, w0
 1cc:	cmp	x0, #0x1
 1d0:	b.ls	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>  // b.plast
 1d4:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1e0:	b	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>
 1e4:	stp	x25, x26, [sp, #48]
 1e8:	tst	x3, x19
 1ec:	b.eq	2f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x20c>  // b.none
 1f0:	clz	x0, x3
 1f4:	mov	w4, #0x3f                  	// #63
 1f8:	sub	w4, w4, w0
 1fc:	add	w0, w4, #0x1
 200:	mov	x24, #0x1                   	// #1
 204:	lsl	x24, x24, x0
 208:	cmp	x3, x24
 20c:	b.cs	2b8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1d0>  // b.hs, b.nlast
 210:	mov	x0, #0x1                   	// #1
 214:	lsl	x4, x0, x4
 218:	cmp	x3, x4
 21c:	b.ls	2d8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1f0>  // b.plast
 220:	cmp	x24, #0x100
 224:	mov	x4, #0x100                 	// #256
 228:	csel	x24, x24, x4, cs  // cs = hs, nlast
 22c:	mov	w2, #0x0                   	// #0
 230:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 234:	add	x1, x1, #0x0
 238:	lsl	x0, x24, #4
 23c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 240:	mov	x25, x0
 244:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 248:	add	x0, x0, #0x0
 24c:	ldxr	x26, [x0]
 250:	add	x1, x26, #0x1
 254:	stlxr	w2, x1, [x0]
 258:	cbnz	w2, 24c <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x164>
 25c:	dmb	ish
 260:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 264:	ldr	x0, [x0]
 268:	ldr	w0, [x0]
 26c:	sxtw	x0, w0
 270:	cmp	x0, #0x1
 274:	b.hi	2fc <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x214>  // b.pmore
 278:	mov	x0, #0xfffff               	// #1048575
 27c:	cmp	x26, x0
 280:	b.hi	320 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x238>  // b.pmore
 284:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 288:	ldr	x0, [x0]
 28c:	mrs	x1, tpidr_el0
 290:	ldr	x26, [x1, x0]
 294:	cbnz	x26, 344 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x25c>
 298:	mrs	x0, tpidr_el0
 29c:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 2a0:	ldr	x1, [x1]
 2a4:	add	x2, x0, x1
 2a8:	str	x25, [x2, #8]
 2ac:	str	x24, [x0, x1]
 2b0:	ldp	x25, x26, [sp, #48]
 2b4:	b	140 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x58>
 2b8:	stp	x27, x28, [sp, #64]
 2bc:	mov	x4, x24
 2c0:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 2c4:	add	x2, x2, #0x0
 2c8:	mov	w1, #0x17b                 	// #379
 2cc:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 2d0:	add	x0, x0, #0x0
 2d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2d8:	stp	x27, x28, [sp, #64]
 2dc:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 2e0:	add	x2, x2, #0x0
 2e4:	mov	w1, #0x17c                 	// #380
 2e8:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 2ec:	add	x0, x0, #0x0
 2f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2f4:	mov	x24, x3
 2f8:	b	220 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x138>
 2fc:	mov	x2, x26
 300:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 304:	ldr	x0, [x0]
 308:	mrs	x1, tpidr_el0
 30c:	add	x1, x1, x0
 310:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 314:	add	x0, x0, #0x0
 318:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 31c:	b	278 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x190>
 320:	stp	x27, x28, [sp, #64]
 324:	mov	x4, #0x100000              	// #1048576
 328:	mov	x3, x26
 32c:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 330:	add	x2, x2, #0x0
 334:	mov	w1, #0x3c                  	// #60
 338:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 33c:	add	x0, x0, #0x0
 340:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 344:	stp	x27, x28, [sp, #64]
 348:	str	x1, [sp, #120]
 34c:	str	x0, [sp, #112]
 350:	add	x28, x1, x0
 354:	ldr	x27, [x28, #8]
 358:	lsl	x2, x26, #4
 35c:	str	x2, [sp, #104]
 360:	mov	x1, x27
 364:	mov	x0, x25
 368:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 36c:	str	x25, [x28, #8]
 370:	ldr	x1, [sp, #120]
 374:	ldr	x0, [sp, #112]
 378:	str	x24, [x1, x0]
 37c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 380:	ldr	x0, [x0]
 384:	ldr	w0, [x0]
 388:	sxtw	x0, w0
 38c:	cmp	x0, #0x1
 390:	b.hi	3c8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2e0>  // b.pmore
 394:	ldr	x1, [sp, #104]
 398:	mov	x0, x27
 39c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3a0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3a4:	add	x0, x0, #0x0
 3a8:	ldxr	x1, [x0]
 3ac:	sub	x1, x1, #0x1
 3b0:	stlxr	w2, x1, [x0]
 3b4:	cbnz	w2, 3a8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2c0>
 3b8:	dmb	ish
 3bc:	ldp	x25, x26, [sp, #48]
 3c0:	ldp	x27, x28, [sp, #64]
 3c4:	b	140 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x58>
 3c8:	mov	x2, x26
 3cc:	mov	x1, x27
 3d0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3d4:	add	x0, x0, #0x0
 3d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3dc:	b	394 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2ac>
 3e0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3e4:	ldr	x7, [x0]
 3e8:	add	x6, sp, #0x88
 3ec:	mov	x4, x21
 3f0:	ldr	x2, [x20]
 3f4:	mov	x1, x20
 3f8:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3fc:	add	x0, x0, #0x0
 400:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 404:	b	184 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x9c>
 408:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 40c:	ldr	x0, [x0]
 410:	add	x0, x2, x0
 414:	ldr	x24, [x0, #16]
 418:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 41c:	ldr	x0, [x0]
 420:	ldr	w0, [x0]
 424:	sxtw	x0, w0
 428:	cmp	x0, #0x1
 42c:	b.hi	474 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x38c>  // b.pmore
 430:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 434:	ldr	x1, [x1]
 438:	mrs	x2, tpidr_el0
 43c:	add	x1, x2, x1
 440:	ldr	x0, [x1, #8]
 444:	ldr	x2, [sp, #136]
 448:	str	x2, [x0, x19]
 44c:	ldr	x0, [x1, #8]
 450:	add	x0, x0, x19
 454:	str	x24, [x0, #8]
 458:	ldr	x0, [x1, #8]
 45c:	add	x0, x0, x19
 460:	ldp	x21, x22, [sp, #16]
 464:	ldp	x23, x24, [sp, #32]
 468:	ldr	x30, [sp, #80]
 46c:	ldp	x19, x20, [sp], #144
 470:	ret
 474:	mov	x2, x24
 478:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 47c:	add	x0, x0, #0x0
 480:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 484:	b	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>
 488:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 48c:	ldr	x0, [x0]
 490:	ldr	w0, [x0]
 494:	sxtw	x0, w0
 498:	cmp	x0, #0x1
 49c:	b.ls	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>  // b.plast
 4a0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 4a4:	add	x0, x0, #0x0
 4a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4ac:	b	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>
 4b0:	ldur	x24, [x1, #-16]
 4b4:	ldur	x1, [x1, #-8]
 4b8:	str	x1, [sp, #136]
 4bc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 4c0:	ldr	x0, [x0]
 4c4:	ldr	w0, [x0]
 4c8:	sxtw	x0, w0
 4cc:	cmp	x0, #0x1
 4d0:	b.ls	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>  // b.plast
 4d4:	mov	x2, x24
 4d8:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 4dc:	add	x0, x0, #0x0
 4e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 4e4:	b	430 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x348>
 4e8:	mov	x0, #0x0                   	// #0
 4ec:	b	468 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x380>
 4f0:	mov	x0, #0x0                   	// #0
 4f4:	ldp	x21, x22, [sp, #16]
 4f8:	ldp	x23, x24, [sp, #32]
 4fc:	b	468 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x380>
 500:	mov	x0, #0x0                   	// #0
 504:	ldp	x21, x22, [sp, #16]
 508:	ldp	x23, x24, [sp, #32]
 50c:	b	468 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x380>

0000000000000510 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>:
 510:	stp	x19, x20, [sp, #-32]!
 514:	str	x30, [sp, #16]
 518:	mov	x20, x0
 51c:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 520:	ldr	x2, [x2]
 524:	ldrb	w0, [x2, #121]
 528:	cbz	w0, 560 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x50>
 52c:	mov	x19, x1
 530:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 534:	ldr	x0, [x0]
 538:	ldr	w0, [x0]
 53c:	sxtw	x0, w0
 540:	cmp	x0, #0x1
 544:	b.hi	56c <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x5c>  // b.pmore
 548:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 54c:	ldr	x0, [x0]
 550:	mrs	x1, tpidr_el0
 554:	add	x0, x1, x0
 558:	str	x20, [x0, #24]
 55c:	str	x19, [x0, #16]
 560:	ldr	x30, [sp, #16]
 564:	ldp	x19, x20, [sp], #32
 568:	ret
 56c:	mov	x2, x1
 570:	mov	x1, x20
 574:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 578:	add	x0, x0, #0x0
 57c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 580:	b	548 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x38>

0000000000000584 <_ZN11__sanitizer8DTLS_GetEv>:
 584:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 588:	ldr	x0, [x0]
 58c:	mrs	x1, tpidr_el0
 590:	add	x0, x1, x0
 594:	ret

0000000000000598 <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>:
 598:	ldr	x0, [x0]
 59c:	cmn	x0, #0x1
 5a0:	cset	w0, eq  // eq = none
 5a4:	ret

sanitizer_unwind_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	str	x30, [sp, #16]
   8:	mov	x19, x1
   c:	ldr	x1, [x1]
  10:	ldr	w3, [x1, #8]
  14:	ldr	w4, [x19, #8]
  18:	cmp	x3, x4
  1c:	b.cs	8c <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x8c>  // b.hs, b.nlast
  20:	bl	0 <_Unwind_GetIP>
  24:	mov	x20, x0
  28:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  2c:	ldr	x0, [x0]
  30:	ldr	x0, [x0]
  34:	cbz	x0, a4 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0xa4>
  38:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  3c:	ldr	x0, [x0]
  40:	ldr	x1, [x0]
  44:	mov	w0, #0x4                   	// #4
  48:	cmp	x1, x20
  4c:	b.hi	80 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x80>  // b.pmore
  50:	ldr	x1, [x19]
  54:	ldr	w0, [x1, #8]
  58:	add	w2, w0, #0x1
  5c:	str	w2, [x1, #8]
  60:	add	x0, x1, w0, uxtw #3
  64:	str	x20, [x0, #16]
  68:	ldr	x0, [x19]
  6c:	ldr	w1, [x0, #8]
  70:	ldr	w0, [x19, #8]
  74:	cmp	w1, w0
  78:	cset	w0, eq  // eq = none
  7c:	lsl	w0, w0, #2
  80:	ldr	x30, [sp, #16]
  84:	ldp	x19, x20, [sp], #32
  88:	ret
  8c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  90:	add	x2, x2, #0x0
  94:	mov	w1, #0x6d                  	// #109
  98:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  a4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  a8:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
  ac:	ldr	x1, [x1]
  b0:	str	x0, [x1]
  b4:	b	38 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x38>

00000000000000b8 <_ZN11__sanitizer12Unwind_GetIPEP15_Unwind_Context>:
  b8:	str	x30, [sp, #-16]!
  bc:	bl	0 <_Unwind_GetIP>
  c0:	ldr	x30, [sp], #16
  c4:	ret

00000000000000c8 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>:
  c8:	stp	x19, x20, [sp, #-48]!
  cc:	str	x30, [sp, #16]
  d0:	cmp	w2, #0x1
  d4:	b.ls	144 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x7c>  // b.plast
  d8:	mov	x19, x0
  dc:	mov	x20, x1
  e0:	str	wzr, [x0, #8]
  e4:	str	x0, [sp, #32]
  e8:	add	w2, w2, #0x1
  ec:	cmp	w2, #0x100
  f0:	mov	w0, #0x100                 	// #256
  f4:	csel	w2, w2, w0, ls  // ls = plast
  f8:	str	w2, [sp, #40]
  fc:	add	x1, sp, #0x20
 100:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 104:	add	x0, x0, #0x0
 108:	bl	0 <_Unwind_Backtrace>
 10c:	mov	x1, x20
 110:	mov	x0, x19
 114:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>
 118:	mov	x1, x0
 11c:	cbnz	x0, 12c <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x64>
 120:	ldr	w0, [x19, #8]
 124:	cmp	w0, #0x1
 128:	cset	x1, hi  // hi = pmore
 12c:	mov	x0, x19
 130:	bl	0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>
 134:	str	x20, [x19, #16]
 138:	ldr	x30, [sp, #16]
 13c:	ldp	x19, x20, [sp], #48
 140:	ret
 144:	mov	w3, w2
 148:	mov	x4, #0x2                   	// #2
 14c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 150:	add	x2, x2, #0x0
 154:	mov	w1, #0x7a                  	// #122
 158:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000164 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>:
 164:	stp	x19, x20, [sp, #-80]!
 168:	stp	x23, x24, [sp, #32]
 16c:	str	x30, [sp, #64]
 170:	mov	w24, w3
 174:	cmp	w3, #0x1
 178:	b.ls	284 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x120>  // b.plast
 17c:	mov	x19, x0
 180:	mov	x20, x2
 184:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 188:	ldr	x0, [x0]
 18c:	cbz	x0, 2ac <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x148>
 190:	stp	x21, x22, [sp, #16]
 194:	stp	x25, x26, [sp, #48]
 198:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 19c:	ldr	x0, [x0]
 1a0:	blr	x0
 1a4:	mov	x23, x0
 1a8:	cbz	x0, 2bc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x158>
 1ac:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1b0:	ldr	x0, [x0]
 1b4:	ldr	x0, [x0]
 1b8:	cbz	x0, 2dc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x178>
 1bc:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1c0:	ldr	x0, [x0]
 1c4:	ldr	x0, [x0]
 1c8:	sub	x1, x0, #0x1
 1cc:	tst	x1, x0
 1d0:	b.ne	2f0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x18c>  // b.any
 1d4:	mov	x25, #0x17ff                	// #6143
 1d8:	add	x22, x0, x25
 1dc:	neg	x0, x0
 1e0:	and	x22, x22, x0
 1e4:	mov	w2, #0x0                   	// #0
 1e8:	adrp	x1, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 1ec:	add	x1, x1, #0x0
 1f0:	mov	x0, x22
 1f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1f8:	mov	x21, x0
 1fc:	mov	x2, #0x0                   	// #0
 200:	mov	x1, #0x0                   	// #0
 204:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 208:	mov	x1, #0x0                   	// #0
 20c:	mov	x0, #0x0                   	// #0
 210:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 214:	cmp	x22, x25
 218:	b.ls	300 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x19c>  // b.plast
 21c:	mov	x2, #0x1800                	// #6144
 220:	mov	w1, #0x0                   	// #0
 224:	mov	x0, x21
 228:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 22c:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 230:	add	x25, x0, #0x0
 234:	ldr	x6, [x0]
 238:	mov	x5, x24
 23c:	mov	x4, #0x0                   	// #0
 240:	mov	x3, x21
 244:	mov	x2, x23
 248:	mov	x1, x20
 24c:	mov	x0, #0x0                   	// #0
 250:	blr	x6
 254:	mov	x20, x0
 258:	ldr	x1, [x25, #16]
 25c:	mov	x0, x23
 260:	blr	x1
 264:	tbnz	x20, #63, 398 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x234>
 268:	cmp	x20, #0x100
 26c:	b.hi	3b0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x24c>  // b.pmore
 270:	str	wzr, [x19, #8]
 274:	mov	x4, x21
 278:	mov	x3, #0x0                   	// #0
 27c:	cbnz	x20, 3d4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x270>
 280:	b	3fc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x298>
 284:	stp	x21, x22, [sp, #16]
 288:	stp	x25, x26, [sp, #48]
 28c:	mov	x4, #0x2                   	// #2
 290:	mov	x3, x24
 294:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 298:	add	x2, x2, #0x0
 29c:	mov	w1, #0x94                  	// #148
 2a0:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2a4:	add	x0, x0, #0x0
 2a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2ac:	mov	w2, w3
 2b0:	mov	x0, x19
 2b4:	bl	c8 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>
 2b8:	b	410 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x2ac>
 2bc:	mov	x4, #0x0                   	// #0
 2c0:	mov	x3, #0x0                   	// #0
 2c4:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2c8:	add	x2, x2, #0x0
 2cc:	mov	w1, #0x9b                  	// #155
 2d0:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2d4:	add	x0, x0, #0x0
 2d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2e0:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 2e4:	ldr	x1, [x1]
 2e8:	str	x0, [x1]
 2ec:	b	1bc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x58>
 2f0:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2f4:	add	x0, x0, #0x0
 2f8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2fc:	bl	0 <_ZN11__sanitizer3DieEv>
 300:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 304:	ldr	x0, [x0]
 308:	ldr	x0, [x0]
 30c:	cbz	x0, 374 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x210>
 310:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 314:	ldr	x0, [x0]
 318:	ldr	x0, [x0]
 31c:	sub	x1, x0, #0x1
 320:	tst	x1, x0
 324:	b.ne	388 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x224>  // b.any
 328:	add	x25, x0, #0x1, lsl #12
 32c:	add	x25, x25, #0x7ff
 330:	neg	x0, x0
 334:	and	x25, x25, x0
 338:	mov	w2, #0x0                   	// #0
 33c:	adrp	x1, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 340:	add	x1, x1, #0x0
 344:	mov	x0, x25
 348:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 34c:	mov	x26, x0
 350:	mov	x2, #0x0                   	// #0
 354:	mov	x1, x21
 358:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 35c:	mov	x1, x22
 360:	mov	x0, x21
 364:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 368:	mov	x22, x25
 36c:	mov	x21, x26
 370:	b	21c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0xb8>
 374:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 378:	adrp	x1, 0 <_ZN11__sanitizer14PageSizeCachedE>
 37c:	ldr	x1, [x1]
 380:	str	x0, [x1]
 384:	b	310 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1ac>
 388:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 38c:	add	x0, x0, #0x0
 390:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 394:	bl	0 <_ZN11__sanitizer3DieEv>
 398:	mov	x1, x22
 39c:	mov	x0, x21
 3a0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3a4:	ldp	x21, x22, [sp, #16]
 3a8:	ldp	x25, x26, [sp, #48]
 3ac:	b	410 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x2ac>
 3b0:	mov	x4, #0x100                 	// #256
 3b4:	mov	x3, x20
 3b8:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3bc:	add	x2, x2, #0x0
 3c0:	mov	w1, #0xa3                  	// #163
 3c4:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3c8:	add	x0, x0, #0x0
 3cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d0:	add	x4, x4, #0x18
 3d4:	ldr	x2, [x4]
 3d8:	ldr	w1, [x19, #8]
 3dc:	add	w0, w1, #0x1
 3e0:	str	w0, [x19, #8]
 3e4:	add	x1, x19, w1, uxtw #3
 3e8:	add	x2, x2, #0x2
 3ec:	str	x2, [x1, #16]
 3f0:	add	x3, x3, #0x1
 3f4:	cmp	x20, x3
 3f8:	b.gt	3d0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x26c>
 3fc:	mov	x1, x22
 400:	mov	x0, x21
 404:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 408:	ldp	x21, x22, [sp, #16]
 40c:	ldp	x25, x26, [sp, #48]
 410:	ldp	x23, x24, [sp, #32]
 414:	ldr	x30, [sp, #64]
 418:	ldp	x19, x20, [sp], #80
 41c:	ret

sanitizer_unwind_win.o:     file format elf64-littleaarch64


sanitizer_win.o:     file format elf64-littleaarch64


interception_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	mov	x20, x0
  10:	mov	x19, x1
  14:	mov	x22, x2
  18:	mov	x21, x3
  1c:	mov	x1, x0
  20:	mov	x0, #0xffffffffffffffff    	// #-1
  24:	bl	0 <dlsym>
  28:	str	x0, [x19]
  2c:	cbz	x0, 48 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm+0x48>
  30:	cmp	x22, x21
  34:	cset	w0, eq  // eq = none
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #32]
  40:	ldp	x19, x20, [sp], #48
  44:	ret
  48:	mov	x1, x20
  4c:	bl	0 <dlsym>
  50:	str	x0, [x19]
  54:	b	30 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm+0x30>

0000000000000058 <_ZN14__interception14GetFuncAddrVerEPKcS1_>:
  58:	str	x30, [sp, #-16]!
  5c:	mov	x2, x1
  60:	mov	x1, x0
  64:	mov	x0, #0xffffffffffffffff    	// #-1
  68:	bl	0 <dlvsym>
  6c:	ldr	x30, [sp], #16
  70:	ret

interception_mac.o:     file format elf64-littleaarch64


interception_type_test.o:     file format elf64-littleaarch64


interception_win.o:     file format elf64-littleaarch64


atomic.o:     file format elf64-littleaarch64


bridge.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_internal_memcpy>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

0000000000000014 <__asan_internal_memset>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <__asan_internal_memcmp>:
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  34:	ldp	x29, x30, [sp], #16
  38:	ret

000000000000003c <__asan_internal_strcmp>:
  3c:	stp	x29, x30, [sp, #-16]!
  40:	mov	x29, sp
  44:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  48:	ldp	x29, x30, [sp], #16
  4c:	ret

0000000000000050 <__asan_internal_strncmp>:
  50:	stp	x29, x30, [sp, #-16]!
  54:	mov	x29, sp
  58:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
  5c:	ldp	x29, x30, [sp], #16
  60:	ret

0000000000000064 <__asan_internal_strlen>:
  64:	stp	x29, x30, [sp, #-16]!
  68:	mov	x29, sp
  6c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  70:	ldp	x29, x30, [sp], #16
  74:	ret

0000000000000078 <__asan_internal_strnlen>:
  78:	stp	x29, x30, [sp, #-16]!
  7c:	mov	x29, sp
  80:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
  84:	ldp	x29, x30, [sp], #16
  88:	ret

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_fnqual_component_type>:
       0:	sub	w0, w0, #0x1c
       4:	cmp	w0, #0x34
       8:	b.hi	28 <is_fnqual_component_type+0x28>  // b.pmore
       c:	mov	x1, #0x1                   	// #1
      10:	lsl	x0, x1, x0
      14:	mov	x1, #0x1f                  	// #31
      18:	movk	x1, #0x1a, lsl #48
      1c:	tst	x0, x1
      20:	cset	w0, ne  // ne = any
      24:	b	2c <is_fnqual_component_type+0x2c>
      28:	mov	w0, #0x0                   	// #0
      2c:	ret

0000000000000030 <d_make_empty>:
      30:	mov	x2, x0
      34:	ldr	w1, [x0, #40]
      38:	ldr	w0, [x0, #44]
      3c:	cmp	w1, w0
      40:	b.ge	68 <d_make_empty+0x38>  // b.tcont
      44:	sbfiz	x0, x1, #1, #32
      48:	add	x1, x0, w1, sxtw
      4c:	ldr	x0, [x2, #32]
      50:	add	x0, x0, x1, lsl #3
      54:	str	wzr, [x0, #4]
      58:	ldr	w1, [x2, #40]
      5c:	add	w1, w1, #0x1
      60:	str	w1, [x2, #40]
      64:	ret
      68:	mov	x0, #0x0                   	// #0
      6c:	b	64 <d_make_empty+0x34>

0000000000000070 <d_make_comp>:
      70:	stp	x29, x30, [sp, #-48]!
      74:	mov	x29, sp
      78:	stp	x19, x20, [sp, #16]
      7c:	mov	w19, w1
      80:	sub	w1, w1, #0x1
      84:	cmp	w1, #0x4f
      88:	b.hi	104 <d_make_comp+0x94>  // b.pmore
      8c:	str	x21, [sp, #32]
      90:	mov	x21, x2
      94:	mov	x20, x3
      98:	adrp	x2, 0 <is_fnqual_component_type>
      9c:	add	x2, x2, #0x0
      a0:	ldrb	w1, [x2, w1, uxtw]
      a4:	adr	x2, b0 <d_make_comp+0x40>
      a8:	add	x1, x2, w1, sxtb #2
      ac:	br	x1
      b0:	cmp	x21, #0x0
      b4:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      b8:	b.ne	cc <d_make_comp+0x5c>  // b.any
      bc:	mov	x0, #0x0                   	// #0
      c0:	ldr	x21, [sp, #32]
      c4:	b	e4 <d_make_comp+0x74>
      c8:	cbz	x21, 10c <d_make_comp+0x9c>
      cc:	bl	30 <d_make_empty>
      d0:	cbz	x0, 118 <d_make_comp+0xa8>
      d4:	str	w19, [x0]
      d8:	str	x21, [x0, #8]
      dc:	str	x20, [x0, #16]
      e0:	ldr	x21, [sp, #32]
      e4:	ldp	x19, x20, [sp, #16]
      e8:	ldp	x29, x30, [sp], #48
      ec:	ret
      f0:	cbnz	x3, cc <d_make_comp+0x5c>
      f4:	mov	x0, x3
      f8:	ldr	x21, [sp, #32]
      fc:	b	e4 <d_make_comp+0x74>
     100:	ldr	x21, [sp, #32]
     104:	mov	x0, #0x0                   	// #0
     108:	b	e4 <d_make_comp+0x74>
     10c:	mov	x0, x21
     110:	ldr	x21, [sp, #32]
     114:	b	e4 <d_make_comp+0x74>
     118:	ldr	x21, [sp, #32]
     11c:	b	e4 <d_make_comp+0x74>

0000000000000120 <d_make_builtin_type>:
     120:	stp	x29, x30, [sp, #-32]!
     124:	mov	x29, sp
     128:	str	x19, [sp, #16]
     12c:	mov	x19, x1
     130:	cbz	x1, 154 <d_make_builtin_type+0x34>
     134:	bl	30 <d_make_empty>
     138:	cbz	x0, 148 <d_make_builtin_type+0x28>
     13c:	mov	w1, #0x27                  	// #39
     140:	str	w1, [x0]
     144:	str	x19, [x0, #8]
     148:	ldr	x19, [sp, #16]
     14c:	ldp	x29, x30, [sp], #32
     150:	ret
     154:	mov	x0, x1
     158:	b	148 <d_make_builtin_type+0x28>

000000000000015c <is_ctor_dtor_or_conversion>:
     15c:	cbz	x0, 1b0 <is_ctor_dtor_or_conversion+0x54>
     160:	mov	x2, x0
     164:	ldr	w1, [x0]
     168:	cmp	w1, #0x8
     16c:	b.hi	1a4 <is_ctor_dtor_or_conversion+0x48>  // b.pmore
     170:	cmp	w1, #0x6
     174:	b.hi	1b8 <is_ctor_dtor_or_conversion+0x5c>  // b.pmore
     178:	sub	w1, w1, #0x1
     17c:	mov	w0, #0x0                   	// #0
     180:	cmp	w1, #0x1
     184:	b.hi	1a0 <is_ctor_dtor_or_conversion+0x44>  // b.pmore
     188:	stp	x29, x30, [sp, #-16]!
     18c:	mov	x29, sp
     190:	ldr	x0, [x2, #16]
     194:	bl	15c <is_ctor_dtor_or_conversion>
     198:	ldp	x29, x30, [sp], #16
     19c:	ret
     1a0:	ret
     1a4:	cmp	w1, #0x35
     1a8:	cset	w0, eq  // eq = none
     1ac:	ret
     1b0:	mov	w0, #0x0                   	// #0
     1b4:	ret
     1b8:	mov	w0, #0x1                   	// #1
     1bc:	ret

00000000000001c0 <has_return_type>:
     1c0:	cbz	x0, 250 <has_return_type+0x90>
     1c4:	stp	x29, x30, [sp, #-16]!
     1c8:	mov	x29, sp
     1cc:	ldr	w1, [x0]
     1d0:	cmp	w1, #0x4
     1d4:	b.eq	230 <has_return_type+0x70>  // b.none
     1d8:	b.ls	208 <has_return_type+0x48>  // b.plast
     1dc:	sub	w1, w1, #0x1c
     1e0:	cmp	w1, #0x34
     1e4:	b.hi	228 <has_return_type+0x68>  // b.pmore
     1e8:	mov	x2, #0x1                   	// #1
     1ec:	lsl	x1, x2, x1
     1f0:	mov	x2, #0x1f                  	// #31
     1f4:	movk	x2, #0x1a, lsl #48
     1f8:	tst	x1, x2
     1fc:	b.ne	244 <has_return_type+0x84>  // b.any
     200:	mov	w0, #0x0                   	// #0
     204:	b	220 <has_return_type+0x60>
     208:	cmp	w1, #0x2
     20c:	b.ne	21c <has_return_type+0x5c>  // b.any
     210:	ldr	x0, [x0, #16]
     214:	bl	1c0 <has_return_type>
     218:	b	220 <has_return_type+0x60>
     21c:	mov	w0, #0x0                   	// #0
     220:	ldp	x29, x30, [sp], #16
     224:	ret
     228:	mov	w0, #0x0                   	// #0
     22c:	b	220 <has_return_type+0x60>
     230:	ldr	x0, [x0, #8]
     234:	bl	15c <is_ctor_dtor_or_conversion>
     238:	cmp	w0, #0x0
     23c:	cset	w0, eq  // eq = none
     240:	b	220 <has_return_type+0x60>
     244:	ldr	x0, [x0, #8]
     248:	bl	1c0 <has_return_type>
     24c:	b	220 <has_return_type+0x60>
     250:	mov	w0, #0x0                   	// #0
     254:	ret

0000000000000258 <d_number>:
     258:	mov	x4, x0
     25c:	ldr	x1, [x0, #24]
     260:	ldrb	w0, [x1]
     264:	cmp	w0, #0x6e
     268:	b.eq	2e8 <d_number+0x90>  // b.none
     26c:	sub	w1, w0, #0x30
     270:	and	w1, w1, #0xff
     274:	cmp	w1, #0x9
     278:	b.hi	320 <d_number+0xc8>  // b.pmore
     27c:	mov	w7, #0x0                   	// #0
     280:	mov	w3, w0
     284:	mov	w0, #0x0                   	// #0
     288:	mov	w6, #0x7fffffff            	// #2147483647
     28c:	mov	w5, #0x6667                	// #26215
     290:	movk	w5, #0x6666, lsl #16
     294:	add	w0, w0, w0, lsl #2
     298:	add	w0, w3, w0, lsl #1
     29c:	sub	w0, w0, #0x30
     2a0:	ldr	x1, [x4, #24]
     2a4:	add	x2, x1, #0x1
     2a8:	str	x2, [x4, #24]
     2ac:	ldrb	w1, [x1, #1]
     2b0:	sub	w2, w1, #0x30
     2b4:	and	w2, w2, #0xff
     2b8:	cmp	w2, #0x9
     2bc:	b.hi	30c <d_number+0xb4>  // b.pmore
     2c0:	mov	w3, w1
     2c4:	sub	w1, w1, #0x30
     2c8:	sub	w1, w6, w1
     2cc:	smull	x2, w1, w5
     2d0:	asr	x2, x2, #34
     2d4:	sub	w1, w2, w1, asr #31
     2d8:	cmp	w1, w0
     2dc:	b.ge	294 <d_number+0x3c>  // b.tcont
     2e0:	mov	w0, #0xffffffff            	// #-1
     2e4:	ret
     2e8:	add	x0, x1, #0x1
     2ec:	str	x0, [x4, #24]
     2f0:	ldrb	w0, [x1, #1]
     2f4:	sub	w1, w0, #0x30
     2f8:	and	w1, w1, #0xff
     2fc:	cmp	w1, #0x9
     300:	b.hi	318 <d_number+0xc0>  // b.pmore
     304:	mov	w7, #0x1                   	// #1
     308:	b	280 <d_number+0x28>
     30c:	cbz	w7, 2e4 <d_number+0x8c>
     310:	neg	w0, w0
     314:	b	2e4 <d_number+0x8c>
     318:	mov	w0, #0x0                   	// #0
     31c:	b	310 <d_number+0xb8>
     320:	mov	w0, #0x0                   	// #0
     324:	b	2e4 <d_number+0x8c>

0000000000000328 <d_number_component>:
     328:	stp	x29, x30, [sp, #-32]!
     32c:	mov	x29, sp
     330:	stp	x19, x20, [sp, #16]
     334:	mov	x20, x0
     338:	bl	30 <d_make_empty>
     33c:	mov	x19, x0
     340:	cbz	x0, 35c <d_number_component+0x34>
     344:	mov	w0, #0x42                  	// #66
     348:	str	w0, [x19]
     34c:	mov	x0, x20
     350:	bl	258 <d_number>
     354:	sxtw	x0, w0
     358:	str	x0, [x19, #8]
     35c:	mov	x0, x19
     360:	ldp	x19, x20, [sp, #16]
     364:	ldp	x29, x30, [sp], #32
     368:	ret

000000000000036c <d_call_offset>:
     36c:	stp	x29, x30, [sp, #-32]!
     370:	mov	x29, sp
     374:	str	x19, [sp, #16]
     378:	mov	x19, x0
     37c:	cbnz	w1, 39c <d_call_offset+0x30>
     380:	ldr	x2, [x0, #24]
     384:	ldrb	w3, [x2]
     388:	mov	w0, w1
     38c:	cbz	w3, 3b0 <d_call_offset+0x44>
     390:	add	x0, x2, #0x1
     394:	str	x0, [x19, #24]
     398:	ldrb	w1, [x2]
     39c:	cmp	w1, #0x68
     3a0:	b.eq	3bc <d_call_offset+0x50>  // b.none
     3a4:	mov	w0, #0x0                   	// #0
     3a8:	cmp	w1, #0x76
     3ac:	b.eq	3e8 <d_call_offset+0x7c>  // b.none
     3b0:	ldr	x19, [sp, #16]
     3b4:	ldp	x29, x30, [sp], #32
     3b8:	ret
     3bc:	mov	x0, x19
     3c0:	bl	258 <d_number>
     3c4:	ldr	x1, [x19, #24]
     3c8:	ldrb	w2, [x1]
     3cc:	mov	w0, #0x0                   	// #0
     3d0:	cmp	w2, #0x5f
     3d4:	b.ne	3b0 <d_call_offset+0x44>  // b.any
     3d8:	add	x1, x1, #0x1
     3dc:	str	x1, [x19, #24]
     3e0:	mov	w0, #0x1                   	// #1
     3e4:	b	3b0 <d_call_offset+0x44>
     3e8:	mov	x0, x19
     3ec:	bl	258 <d_number>
     3f0:	ldr	x1, [x19, #24]
     3f4:	ldrb	w2, [x1]
     3f8:	mov	w0, #0x0                   	// #0
     3fc:	cmp	w2, #0x5f
     400:	b.ne	3b0 <d_call_offset+0x44>  // b.any
     404:	add	x1, x1, #0x1
     408:	str	x1, [x19, #24]
     40c:	mov	x0, x19
     410:	bl	258 <d_number>
     414:	b	3c4 <d_call_offset+0x58>

0000000000000418 <next_is_type_qual>:
     418:	ldr	x2, [x0, #24]
     41c:	ldrb	w1, [x2]
     420:	cmp	w1, #0x72
     424:	mov	w0, #0x56                  	// #86
     428:	ccmp	w1, w0, #0x4, ne  // ne = any
     42c:	mov	w0, #0x4b                  	// #75
     430:	ccmp	w1, w0, #0x4, ne  // ne = any
     434:	mov	w0, #0x1                   	// #1
     438:	b.eq	448 <next_is_type_qual+0x30>  // b.none
     43c:	mov	w0, #0x0                   	// #0
     440:	cmp	w1, #0x44
     444:	b.eq	44c <next_is_type_qual+0x34>  // b.none
     448:	ret
     44c:	ldrb	w0, [x2, #1]
     450:	and	w1, w0, #0xffffffdf
     454:	and	w1, w1, #0xff
     458:	sub	w0, w0, #0x77
     45c:	and	w0, w0, #0xff
     460:	cmp	w1, #0x4f
     464:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     468:	cset	w0, ls  // ls = plast
     46c:	b	448 <next_is_type_qual+0x30>

0000000000000470 <d_ref_qualifier>:
     470:	mov	x2, x1
     474:	ldr	x3, [x0, #24]
     478:	ldrb	w1, [x3]
     47c:	cmp	w1, #0x52
     480:	mov	w4, #0x4f                  	// #79
     484:	ccmp	w1, w4, #0x4, ne  // ne = any
     488:	b.ne	4d4 <d_ref_qualifier+0x64>  // b.any
     48c:	stp	x29, x30, [sp, #-16]!
     490:	mov	x29, sp
     494:	cmp	w1, #0x52
     498:	b.eq	4c4 <d_ref_qualifier+0x54>  // b.none
     49c:	ldr	w4, [x0, #72]
     4a0:	add	w4, w4, #0x3
     4a4:	mov	w1, #0x20                  	// #32
     4a8:	str	w4, [x0, #72]
     4ac:	add	x3, x3, #0x1
     4b0:	str	x3, [x0, #24]
     4b4:	mov	x3, #0x0                   	// #0
     4b8:	bl	70 <d_make_comp>
     4bc:	ldp	x29, x30, [sp], #16
     4c0:	ret
     4c4:	ldr	w4, [x0, #72]
     4c8:	add	w4, w4, #0x2
     4cc:	mov	w1, #0x1f                  	// #31
     4d0:	b	4a8 <d_ref_qualifier+0x38>
     4d4:	mov	x0, x2
     4d8:	ret

00000000000004dc <d_compact_number>:
     4dc:	stp	x29, x30, [sp, #-32]!
     4e0:	mov	x29, sp
     4e4:	str	x19, [sp, #16]
     4e8:	mov	x19, x0
     4ec:	ldr	x1, [x0, #24]
     4f0:	ldrb	w0, [x1]
     4f4:	cmp	w0, #0x5f
     4f8:	b.eq	538 <d_compact_number+0x5c>  // b.none
     4fc:	cmp	w0, #0x6e
     500:	b.eq	540 <d_compact_number+0x64>  // b.none
     504:	mov	x0, x19
     508:	bl	258 <d_number>
     50c:	adds	w0, w0, #0x1
     510:	b.mi	548 <d_compact_number+0x6c>  // b.first
     514:	ldr	x1, [x19, #24]
     518:	ldrb	w2, [x1]
     51c:	cmp	w2, #0x5f
     520:	b.ne	550 <d_compact_number+0x74>  // b.any
     524:	add	x1, x1, #0x1
     528:	str	x1, [x19, #24]
     52c:	ldr	x19, [sp, #16]
     530:	ldp	x29, x30, [sp], #32
     534:	ret
     538:	mov	w0, #0x0                   	// #0
     53c:	b	524 <d_compact_number+0x48>
     540:	mov	w0, #0xffffffff            	// #-1
     544:	b	52c <d_compact_number+0x50>
     548:	mov	w0, #0xffffffff            	// #-1
     54c:	b	52c <d_compact_number+0x50>
     550:	mov	w0, #0xffffffff            	// #-1
     554:	b	52c <d_compact_number+0x50>

0000000000000558 <d_template_param>:
     558:	stp	x29, x30, [sp, #-32]!
     55c:	mov	x29, sp
     560:	stp	x19, x20, [sp, #16]
     564:	mov	x19, x0
     568:	ldr	x0, [x0, #24]
     56c:	ldrb	w1, [x0]
     570:	cmp	w1, #0x54
     574:	b.ne	5b4 <d_template_param+0x5c>  // b.any
     578:	add	x0, x0, #0x1
     57c:	str	x0, [x19, #24]
     580:	mov	x0, x19
     584:	bl	4dc <d_compact_number>
     588:	mov	w20, w0
     58c:	mov	x0, #0x0                   	// #0
     590:	tbnz	w20, #31, 5b8 <d_template_param+0x60>
     594:	mov	x0, x19
     598:	bl	30 <d_make_empty>
     59c:	cbz	x0, 5b8 <d_template_param+0x60>
     5a0:	mov	w1, #0x5                   	// #5
     5a4:	str	w1, [x0]
     5a8:	sxtw	x20, w20
     5ac:	str	x20, [x0, #8]
     5b0:	b	5b8 <d_template_param+0x60>
     5b4:	mov	x0, #0x0                   	// #0
     5b8:	ldp	x19, x20, [sp, #16]
     5bc:	ldp	x29, x30, [sp], #32
     5c0:	ret

00000000000005c4 <op_is_new_cast>:
     5c4:	ldr	x0, [x0, #8]
     5c8:	ldr	x0, [x0]
     5cc:	ldrb	w1, [x0, #1]
     5d0:	cmp	w1, #0x63
     5d4:	b.eq	5e0 <op_is_new_cast+0x1c>  // b.none
     5d8:	mov	w0, #0x0                   	// #0
     5dc:	ret
     5e0:	ldrb	w0, [x0]
     5e4:	sub	w1, w0, #0x63
     5e8:	and	w1, w1, #0xff
     5ec:	sub	w0, w0, #0x72
     5f0:	and	w0, w0, #0xff
     5f4:	cmp	w1, #0x1
     5f8:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
     5fc:	cset	w0, ls  // ls = plast
     600:	b	5dc <op_is_new_cast+0x18>

0000000000000604 <d_discriminator>:
     604:	stp	x29, x30, [sp, #-32]!
     608:	mov	x29, sp
     60c:	stp	x19, x20, [sp, #16]
     610:	mov	x19, x0
     614:	ldr	x0, [x0, #24]
     618:	ldrb	w1, [x0]
     61c:	cmp	w1, #0x5f
     620:	b.ne	694 <d_discriminator+0x90>  // b.any
     624:	add	x1, x0, #0x1
     628:	str	x1, [x19, #24]
     62c:	ldrb	w1, [x0, #1]
     630:	mov	w20, #0x1                   	// #1
     634:	cmp	w1, #0x5f
     638:	b.eq	684 <d_discriminator+0x80>  // b.none
     63c:	mov	x0, x19
     640:	bl	258 <d_number>
     644:	mov	w1, w0
     648:	mov	w0, #0x0                   	// #0
     64c:	tbnz	w1, #31, 698 <d_discriminator+0x94>
     650:	cmp	w20, #0x1
     654:	mov	w0, #0x1                   	// #1
     658:	ccmp	w1, #0x9, #0x4, gt
     65c:	b.le	698 <d_discriminator+0x94>
     660:	ldr	x1, [x19, #24]
     664:	ldrb	w2, [x1]
     668:	mov	w0, #0x0                   	// #0
     66c:	cmp	w2, #0x5f
     670:	b.ne	698 <d_discriminator+0x94>  // b.any
     674:	add	x1, x1, #0x1
     678:	str	x1, [x19, #24]
     67c:	mov	w0, #0x1                   	// #1
     680:	b	698 <d_discriminator+0x94>
     684:	add	x0, x0, #0x2
     688:	str	x0, [x19, #24]
     68c:	mov	w20, #0x2                   	// #2
     690:	b	63c <d_discriminator+0x38>
     694:	mov	w0, #0x1                   	// #1
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x29, x30, [sp], #32
     6a0:	ret

00000000000006a4 <d_add_substitution>:
     6a4:	mov	x2, x0
     6a8:	cbz	x1, 6dc <d_add_substitution+0x38>
     6ac:	ldr	w3, [x0, #56]
     6b0:	ldr	w4, [x0, #60]
     6b4:	mov	w0, #0x0                   	// #0
     6b8:	cmp	w3, w4
     6bc:	b.ge	6d8 <d_add_substitution+0x34>  // b.tcont
     6c0:	ldr	x0, [x2, #48]
     6c4:	str	x1, [x0, w3, sxtw #3]
     6c8:	ldr	w0, [x2, #56]
     6cc:	add	w0, w0, #0x1
     6d0:	str	w0, [x2, #56]
     6d4:	mov	w0, #0x1                   	// #1
     6d8:	ret
     6dc:	mov	w0, #0x0                   	// #0
     6e0:	b	6d8 <d_add_substitution+0x34>

00000000000006e4 <d_count_templates_scopes>:
     6e4:	cbz	x1, 7f8 <d_count_templates_scopes+0x114>
     6e8:	stp	x29, x30, [sp, #-32]!
     6ec:	mov	x29, sp
     6f0:	stp	x19, x20, [sp, #16]
     6f4:	mov	x20, x0
     6f8:	mov	x19, x1
     6fc:	ldr	w1, [x1]
     700:	sub	w1, w1, #0x1
     704:	cmp	w1, #0x4f
     708:	b.hi	73c <d_count_templates_scopes+0x58>  // b.pmore
     70c:	adrp	x0, 0 <is_fnqual_component_type>
     710:	add	x0, x0, #0x0
     714:	ldrb	w0, [x0, w1, uxtw]
     718:	adr	x1, 724 <d_count_templates_scopes+0x40>
     71c:	add	x0, x1, w0, sxtb #2
     720:	br	x0
     724:	ldr	w0, [x20, #364]
     728:	add	w0, w0, #0x1
     72c:	str	w0, [x20, #364]
     730:	ldr	w0, [x20, #308]
     734:	cmp	w0, #0x800
     738:	b.le	768 <d_count_templates_scopes+0x84>
     73c:	ldp	x19, x20, [sp, #16]
     740:	ldp	x29, x30, [sp], #32
     744:	ret
     748:	ldr	x0, [x19, #8]
     74c:	ldr	w0, [x0]
     750:	cmp	w0, #0x5
     754:	b.ne	730 <d_count_templates_scopes+0x4c>  // b.any
     758:	ldr	w0, [x20, #348]
     75c:	add	w0, w0, #0x1
     760:	str	w0, [x20, #348]
     764:	b	730 <d_count_templates_scopes+0x4c>
     768:	add	w0, w0, #0x1
     76c:	str	w0, [x20, #308]
     770:	ldr	x1, [x19, #8]
     774:	mov	x0, x20
     778:	bl	6e4 <d_count_templates_scopes>
     77c:	ldr	x1, [x19, #16]
     780:	mov	x0, x20
     784:	bl	6e4 <d_count_templates_scopes>
     788:	ldr	w0, [x20, #308]
     78c:	sub	w0, w0, #0x1
     790:	str	w0, [x20, #308]
     794:	b	73c <d_count_templates_scopes+0x58>
     798:	ldr	x1, [x19, #16]
     79c:	mov	x0, x20
     7a0:	bl	6e4 <d_count_templates_scopes>
     7a4:	b	73c <d_count_templates_scopes+0x58>
     7a8:	ldr	x1, [x19, #16]
     7ac:	mov	x0, x20
     7b0:	bl	6e4 <d_count_templates_scopes>
     7b4:	b	73c <d_count_templates_scopes+0x58>
     7b8:	ldr	x1, [x19, #16]
     7bc:	mov	x0, x20
     7c0:	bl	6e4 <d_count_templates_scopes>
     7c4:	b	73c <d_count_templates_scopes+0x58>
     7c8:	ldr	x1, [x19, #8]
     7cc:	mov	x0, x20
     7d0:	bl	6e4 <d_count_templates_scopes>
     7d4:	b	73c <d_count_templates_scopes+0x58>
     7d8:	ldr	x1, [x19, #8]
     7dc:	mov	x0, x20
     7e0:	bl	6e4 <d_count_templates_scopes>
     7e4:	b	73c <d_count_templates_scopes+0x58>
     7e8:	ldr	x1, [x19, #8]
     7ec:	mov	x0, x20
     7f0:	bl	6e4 <d_count_templates_scopes>
     7f4:	b	73c <d_count_templates_scopes+0x58>
     7f8:	ret

00000000000007fc <d_append_buffer>:
     7fc:	cbz	x2, 898 <d_append_buffer+0x9c>
     800:	stp	x29, x30, [sp, #-64]!
     804:	mov	x29, sp
     808:	stp	x19, x20, [sp, #16]
     80c:	stp	x21, x22, [sp, #32]
     810:	str	x23, [sp, #48]
     814:	mov	x19, x0
     818:	mov	x20, x1
     81c:	add	x22, x1, x2
     820:	mov	x23, #0xff                  	// #255
     824:	b	848 <d_append_buffer+0x4c>
     828:	ldr	x0, [x19, #256]
     82c:	add	x1, x0, #0x1
     830:	str	x1, [x19, #256]
     834:	strb	w21, [x19, x0]
     838:	strb	w21, [x19, #264]
     83c:	add	x20, x20, #0x1
     840:	cmp	x20, x22
     844:	b.eq	884 <d_append_buffer+0x88>  // b.none
     848:	ldrb	w21, [x20]
     84c:	ldr	x0, [x19, #256]
     850:	cmp	x0, #0xff
     854:	b.ne	828 <d_append_buffer+0x2c>  // b.any
     858:	strb	wzr, [x19, #255]
     85c:	ldr	x3, [x19, #272]
     860:	ldr	x2, [x19, #280]
     864:	mov	x1, x23
     868:	mov	x0, x19
     86c:	blr	x3
     870:	str	xzr, [x19, #256]
     874:	ldr	x0, [x19, #320]
     878:	add	x0, x0, #0x1
     87c:	str	x0, [x19, #320]
     880:	b	828 <d_append_buffer+0x2c>
     884:	ldp	x19, x20, [sp, #16]
     888:	ldp	x21, x22, [sp, #32]
     88c:	ldr	x23, [sp, #48]
     890:	ldp	x29, x30, [sp], #64
     894:	ret
     898:	ret

000000000000089c <d_index_template_argument>:
     89c:	tbnz	w1, #31, 8c8 <d_index_template_argument+0x2c>
     8a0:	cbz	x0, 8c8 <d_index_template_argument+0x2c>
     8a4:	ldr	w2, [x0]
     8a8:	cmp	w2, #0x2f
     8ac:	b.ne	8cc <d_index_template_argument+0x30>  // b.any
     8b0:	cbz	w1, 8c4 <d_index_template_argument+0x28>
     8b4:	sub	w1, w1, #0x1
     8b8:	ldr	x0, [x0, #16]
     8bc:	cbnz	x0, 8a4 <d_index_template_argument+0x8>
     8c0:	b	8c8 <d_index_template_argument+0x2c>
     8c4:	ldr	x0, [x0, #8]
     8c8:	ret
     8cc:	mov	x0, #0x0                   	// #0
     8d0:	b	8c8 <d_index_template_argument+0x2c>

00000000000008d4 <d_lookup_template_argument>:
     8d4:	mov	x2, x0
     8d8:	ldr	x0, [x0, #288]
     8dc:	cbz	x0, 900 <d_lookup_template_argument+0x2c>
     8e0:	stp	x29, x30, [sp, #-16]!
     8e4:	mov	x29, sp
     8e8:	ldr	x0, [x0, #8]
     8ec:	ldr	w1, [x1, #8]
     8f0:	ldr	x0, [x0, #16]
     8f4:	bl	89c <d_index_template_argument>
     8f8:	ldp	x29, x30, [sp], #16
     8fc:	ret
     900:	mov	w1, #0x1                   	// #1
     904:	str	w1, [x2, #304]
     908:	ret

000000000000090c <d_find_pack>:
     90c:	stp	x29, x30, [sp, #-32]!
     910:	mov	x29, sp
     914:	stp	x19, x20, [sp, #16]
     918:	mov	x19, x1
     91c:	cbz	x1, 9e4 <d_find_pack+0xd8>
     920:	mov	x20, x0
     924:	ldr	w2, [x1]
     928:	cmp	w2, #0x8
     92c:	b.eq	9b8 <d_find_pack+0xac>  // b.none
     930:	b.hi	970 <d_find_pack+0x64>  // b.pmore
     934:	cmp	w2, #0x6
     938:	b.eq	9ec <d_find_pack+0xe0>  // b.none
     93c:	b.ls	94c <d_find_pack+0x40>  // b.plast
     940:	ldr	x1, [x1, #16]
     944:	bl	90c <d_find_pack>
     948:	b	9ac <d_find_pack+0xa0>
     94c:	cbz	w2, 9f4 <d_find_pack+0xe8>
     950:	cmp	w2, #0x5
     954:	b.ne	9c4 <d_find_pack+0xb8>  // b.any
     958:	bl	8d4 <d_lookup_template_argument>
     95c:	cbz	x0, 9ac <d_find_pack+0xa0>
     960:	ldr	w1, [x0]
     964:	cmp	w1, #0x2f
     968:	csel	x0, x0, xzr, eq  // eq = none
     96c:	b	9ac <d_find_pack+0xa0>
     970:	sub	w2, w2, #0x18
     974:	cmp	w2, #0x34
     978:	b.hi	9c4 <d_find_pack+0xb8>  // b.pmore
     97c:	mov	x1, #0x1                   	// #1
     980:	lsl	x2, x1, x2
     984:	mov	x0, #0x8001                	// #32769
     988:	movk	x0, #0x410, lsl #16
     98c:	movk	x0, #0xc600, lsl #32
     990:	movk	x0, #0x19, lsl #48
     994:	tst	x2, x0
     998:	b.ne	9fc <d_find_pack+0xf0>  // b.any
     99c:	tbz	w2, #27, 9c4 <d_find_pack+0xb8>
     9a0:	ldr	x1, [x19, #16]
     9a4:	mov	x0, x20
     9a8:	bl	90c <d_find_pack>
     9ac:	ldp	x19, x20, [sp, #16]
     9b0:	ldp	x29, x30, [sp], #32
     9b4:	ret
     9b8:	ldr	x1, [x1, #16]
     9bc:	bl	90c <d_find_pack>
     9c0:	b	9ac <d_find_pack+0xa0>
     9c4:	ldr	x1, [x19, #8]
     9c8:	mov	x0, x20
     9cc:	bl	90c <d_find_pack>
     9d0:	cbnz	x0, 9ac <d_find_pack+0xa0>
     9d4:	ldr	x1, [x19, #16]
     9d8:	mov	x0, x20
     9dc:	bl	90c <d_find_pack>
     9e0:	b	9ac <d_find_pack+0xa0>
     9e4:	mov	x0, x1
     9e8:	b	9ac <d_find_pack+0xa0>
     9ec:	mov	x0, #0x0                   	// #0
     9f0:	b	9ac <d_find_pack+0xa0>
     9f4:	mov	x0, #0x0                   	// #0
     9f8:	b	9ac <d_find_pack+0xa0>
     9fc:	mov	x0, #0x0                   	// #0
     a00:	b	9ac <d_find_pack+0xa0>

0000000000000a04 <d_pack_length>:
     a04:	mov	x1, x0
     a08:	mov	w0, #0x0                   	// #0
     a0c:	cbz	x1, a30 <d_pack_length+0x2c>
     a10:	ldr	w2, [x1]
     a14:	cmp	w2, #0x2f
     a18:	b.ne	a30 <d_pack_length+0x2c>  // b.any
     a1c:	ldr	x2, [x1, #8]
     a20:	cbz	x2, a30 <d_pack_length+0x2c>
     a24:	add	w0, w0, #0x1
     a28:	ldr	x1, [x1, #16]
     a2c:	cbnz	x1, a10 <d_pack_length+0xc>
     a30:	ret

0000000000000a34 <d_growable_string_callback_adapter>:
     a34:	stp	x29, x30, [sp, #-48]!
     a38:	mov	x29, sp
     a3c:	stp	x19, x20, [sp, #16]
     a40:	stp	x21, x22, [sp, #32]
     a44:	mov	x22, x0
     a48:	mov	x21, x1
     a4c:	mov	x19, x2
     a50:	add	x2, x1, #0x1
     a54:	ldr	x3, [x19, #8]
     a58:	add	x2, x2, x3
     a5c:	ldr	x20, [x19, #16]
     a60:	cmp	x2, x20
     a64:	b.hi	ab4 <d_growable_string_callback_adapter+0x80>  // b.pmore
     a68:	ldr	w0, [x19, #24]
     a6c:	cbnz	w0, aa4 <d_growable_string_callback_adapter+0x70>
     a70:	ldr	x3, [x19]
     a74:	ldr	x0, [x19, #8]
     a78:	mov	x2, x21
     a7c:	mov	x1, x22
     a80:	add	x0, x3, x0
     a84:	bl	0 <__asan_internal_memcpy>
     a88:	ldr	x0, [x19]
     a8c:	ldr	x1, [x19, #8]
     a90:	add	x0, x0, x21
     a94:	strb	wzr, [x0, x1]
     a98:	ldr	x1, [x19, #8]
     a9c:	add	x21, x1, x21
     aa0:	str	x21, [x19, #8]
     aa4:	ldp	x19, x20, [sp, #16]
     aa8:	ldp	x21, x22, [sp, #32]
     aac:	ldp	x29, x30, [sp], #48
     ab0:	ret
     ab4:	ldr	w0, [x19, #24]
     ab8:	cbnz	w0, aa4 <d_growable_string_callback_adapter+0x70>
     abc:	cbnz	x20, acc <d_growable_string_callback_adapter+0x98>
     ac0:	mov	x20, #0x2                   	// #2
     ac4:	cmp	x2, x20
     ac8:	b.ls	ad8 <d_growable_string_callback_adapter+0xa4>  // b.plast
     acc:	lsl	x20, x20, #1
     ad0:	cmp	x2, x20
     ad4:	b.hi	acc <d_growable_string_callback_adapter+0x98>  // b.pmore
     ad8:	mov	x1, x20
     adc:	ldr	x0, [x19]
     ae0:	bl	0 <realloc>
     ae4:	cbz	x0, af4 <d_growable_string_callback_adapter+0xc0>
     ae8:	str	x0, [x19]
     aec:	str	x20, [x19, #16]
     af0:	b	a68 <d_growable_string_callback_adapter+0x34>
     af4:	ldr	x0, [x19]
     af8:	bl	0 <free>
     afc:	str	xzr, [x19]
     b00:	str	xzr, [x19, #8]
     b04:	str	xzr, [x19, #16]
     b08:	mov	w0, #0x1                   	// #1
     b0c:	str	w0, [x19, #24]
     b10:	b	aa4 <d_growable_string_callback_adapter+0x70>

0000000000000b14 <d_append_num>:
     b14:	stp	x29, x30, [sp, #-96]!
     b18:	mov	x29, sp
     b1c:	stp	x19, x20, [sp, #16]
     b20:	mov	x19, x0
     b24:	add	x20, sp, #0x40
     b28:	mov	w2, w1
     b2c:	adrp	x1, 0 <is_fnqual_component_type>
     b30:	add	x1, x1, #0x0
     b34:	mov	x0, x20
     b38:	bl	0 <sprintf>
     b3c:	mov	x0, x20
     b40:	bl	0 <__asan_internal_strlen>
     b44:	cbz	x0, bc4 <d_append_num+0xb0>
     b48:	stp	x21, x22, [sp, #32]
     b4c:	str	x23, [sp, #48]
     b50:	add	x21, sp, #0x40
     b54:	add	x20, x0, x21
     b58:	mov	x23, #0xff                  	// #255
     b5c:	b	b80 <d_append_num+0x6c>
     b60:	ldr	x0, [x19, #256]
     b64:	add	x1, x0, #0x1
     b68:	str	x1, [x19, #256]
     b6c:	strb	w22, [x19, x0]
     b70:	strb	w22, [x19, #264]
     b74:	add	x21, x21, #0x1
     b78:	cmp	x21, x20
     b7c:	b.eq	bbc <d_append_num+0xa8>  // b.none
     b80:	ldrb	w22, [x21]
     b84:	ldr	x0, [x19, #256]
     b88:	cmp	x0, #0xff
     b8c:	b.ne	b60 <d_append_num+0x4c>  // b.any
     b90:	strb	wzr, [x19, #255]
     b94:	ldr	x3, [x19, #272]
     b98:	ldr	x2, [x19, #280]
     b9c:	mov	x1, x23
     ba0:	mov	x0, x19
     ba4:	blr	x3
     ba8:	str	xzr, [x19, #256]
     bac:	ldr	x0, [x19, #320]
     bb0:	add	x0, x0, #0x1
     bb4:	str	x0, [x19, #320]
     bb8:	b	b60 <d_append_num+0x4c>
     bbc:	ldp	x21, x22, [sp, #32]
     bc0:	ldr	x23, [sp, #48]
     bc4:	ldp	x19, x20, [sp, #16]
     bc8:	ldp	x29, x30, [sp], #96
     bcc:	ret

0000000000000bd0 <d_print_comp_inner>:
     bd0:	stp	x29, x30, [sp, #-256]!
     bd4:	mov	x29, sp
     bd8:	stp	x19, x20, [sp, #16]
     bdc:	mov	x19, x0
     be0:	cbz	x2, c20 <d_print_comp_inner+0x50>
     be4:	stp	x21, x22, [sp, #32]
     be8:	mov	w20, w1
     bec:	mov	x22, x2
     bf0:	ldr	w21, [x0, #304]
     bf4:	cbnz	w21, 4f54 <d_print_comp_inner+0x4384>
     bf8:	ldr	w0, [x2]
     bfc:	cmp	w0, #0x50
     c00:	b.hi	4e6c <d_print_comp_inner+0x429c>  // b.pmore
     c04:	stp	x23, x24, [sp, #48]
     c08:	adrp	x1, 0 <is_fnqual_component_type>
     c0c:	add	x1, x1, #0x0
     c10:	ldrh	w1, [x1, w0, uxtw #1]
     c14:	adr	x2, c20 <d_print_comp_inner+0x50>
     c18:	add	x1, x2, w1, sxth #2
     c1c:	br	x1
     c20:	mov	w0, #0x1                   	// #1
     c24:	str	w0, [x19, #304]
     c28:	b	4f58 <d_print_comp_inner+0x4388>
     c2c:	tbnz	w20, #2, cb4 <d_print_comp_inner+0xe4>
     c30:	ldr	x1, [x22, #8]
     c34:	ldrsw	x0, [x22, #16]
     c38:	cbz	x0, 4f64 <d_print_comp_inner+0x4394>
     c3c:	mov	x20, x1
     c40:	add	x22, x1, x0
     c44:	mov	x23, #0xff                  	// #255
     c48:	b	c6c <d_print_comp_inner+0x9c>
     c4c:	ldr	x0, [x19, #256]
     c50:	add	x1, x0, #0x1
     c54:	str	x1, [x19, #256]
     c58:	strb	w21, [x19, x0]
     c5c:	strb	w21, [x19, #264]
     c60:	add	x20, x20, #0x1
     c64:	cmp	x22, x20
     c68:	b.eq	ca8 <d_print_comp_inner+0xd8>  // b.none
     c6c:	ldrb	w21, [x20]
     c70:	ldr	x0, [x19, #256]
     c74:	cmp	x0, #0xff
     c78:	b.ne	c4c <d_print_comp_inner+0x7c>  // b.any
     c7c:	strb	wzr, [x19, #255]
     c80:	ldr	x3, [x19, #272]
     c84:	ldr	x2, [x19, #280]
     c88:	mov	x1, x23
     c8c:	mov	x0, x19
     c90:	blr	x3
     c94:	str	xzr, [x19, #256]
     c98:	ldr	x0, [x19, #320]
     c9c:	add	x0, x0, #0x1
     ca0:	str	x0, [x19, #320]
     ca4:	b	c4c <d_print_comp_inner+0x7c>
     ca8:	ldp	x21, x22, [sp, #32]
     cac:	ldp	x23, x24, [sp, #48]
     cb0:	b	4f58 <d_print_comp_inner+0x4388>
     cb4:	ldr	x20, [x22, #8]
     cb8:	ldrsw	x22, [x22, #16]
     cbc:	add	x22, x20, x22
     cc0:	cmp	x20, x22
     cc4:	b.cs	4f70 <d_print_comp_inner+0x43a0>  // b.hs, b.nlast
     cc8:	mov	x23, #0xff                  	// #255
     ccc:	mov	x24, #0x0                   	// #0
     cd0:	b	d78 <d_print_comp_inner+0x1a8>
     cd4:	sub	w1, w0, #0x41
     cd8:	and	w1, w1, #0xff
     cdc:	cmp	w1, #0x5
     ce0:	b.hi	d18 <d_print_comp_inner+0x148>  // b.pmore
     ce4:	sub	w0, w0, #0x37
     ce8:	sxtw	x0, w0
     cec:	add	x2, x0, x2, lsl #4
     cf0:	add	x21, x21, #0x1
     cf4:	cmp	x22, x21
     cf8:	b.eq	d48 <d_print_comp_inner+0x178>  // b.none
     cfc:	ldrb	w0, [x21]
     d00:	sub	w1, w0, #0x30
     d04:	and	w1, w1, #0xff
     d08:	cmp	w1, #0x9
     d0c:	b.hi	cd4 <d_print_comp_inner+0x104>  // b.pmore
     d10:	sub	w0, w0, #0x30
     d14:	b	ce8 <d_print_comp_inner+0x118>
     d18:	sub	w1, w0, #0x61
     d1c:	and	w1, w1, #0xff
     d20:	cmp	w1, #0x5
     d24:	b.hi	d30 <d_print_comp_inner+0x160>  // b.pmore
     d28:	sub	w0, w0, #0x57
     d2c:	b	ce8 <d_print_comp_inner+0x118>
     d30:	cmp	x22, x21
     d34:	b.ls	d48 <d_print_comp_inner+0x178>  // b.plast
     d38:	ldrb	w0, [x21]
     d3c:	cmp	w0, #0x5f
     d40:	ccmp	x2, x23, #0x2, eq  // eq = none
     d44:	b.ls	dbc <d_print_comp_inner+0x1ec>  // b.plast
     d48:	ldrb	w21, [x20]
     d4c:	ldr	x0, [x19, #256]
     d50:	cmp	x0, #0xff
     d54:	b.eq	e14 <d_print_comp_inner+0x244>  // b.none
     d58:	ldr	x0, [x19, #256]
     d5c:	add	x1, x0, #0x1
     d60:	str	x1, [x19, #256]
     d64:	strb	w21, [x19, x0]
     d68:	strb	w21, [x19, #264]
     d6c:	add	x20, x20, #0x1
     d70:	cmp	x22, x20
     d74:	b.ls	e40 <d_print_comp_inner+0x270>  // b.plast
     d78:	sub	x0, x22, x20
     d7c:	cmp	x0, #0x3
     d80:	b.le	d48 <d_print_comp_inner+0x178>
     d84:	ldrb	w0, [x20]
     d88:	cmp	w0, #0x5f
     d8c:	b.ne	d48 <d_print_comp_inner+0x178>  // b.any
     d90:	ldrb	w0, [x20, #1]
     d94:	cmp	w0, #0x5f
     d98:	b.ne	d48 <d_print_comp_inner+0x178>  // b.any
     d9c:	ldrb	w0, [x20, #2]
     da0:	cmp	w0, #0x55
     da4:	b.ne	d48 <d_print_comp_inner+0x178>  // b.any
     da8:	add	x21, x20, #0x3
     dac:	cmp	x22, x21
     db0:	b.ls	d48 <d_print_comp_inner+0x178>  // b.plast
     db4:	mov	x2, x24
     db8:	b	cfc <d_print_comp_inner+0x12c>
     dbc:	and	w20, w2, #0xff
     dc0:	ldr	x0, [x19, #256]
     dc4:	cmp	x0, #0xff
     dc8:	b.eq	de8 <d_print_comp_inner+0x218>  // b.none
     dcc:	ldr	x0, [x19, #256]
     dd0:	add	x1, x0, #0x1
     dd4:	str	x1, [x19, #256]
     dd8:	strb	w20, [x19, x0]
     ddc:	strb	w20, [x19, #264]
     de0:	mov	x20, x21
     de4:	b	d6c <d_print_comp_inner+0x19c>
     de8:	strb	wzr, [x19, #255]
     dec:	ldr	x3, [x19, #272]
     df0:	ldr	x2, [x19, #280]
     df4:	mov	x1, x23
     df8:	mov	x0, x19
     dfc:	blr	x3
     e00:	str	xzr, [x19, #256]
     e04:	ldr	x0, [x19, #320]
     e08:	add	x0, x0, #0x1
     e0c:	str	x0, [x19, #320]
     e10:	b	dcc <d_print_comp_inner+0x1fc>
     e14:	strb	wzr, [x19, #255]
     e18:	ldr	x3, [x19, #272]
     e1c:	ldr	x2, [x19, #280]
     e20:	mov	x1, x23
     e24:	mov	x0, x19
     e28:	blr	x3
     e2c:	str	xzr, [x19, #256]
     e30:	ldr	x0, [x19, #320]
     e34:	add	x0, x0, #0x1
     e38:	str	x0, [x19, #320]
     e3c:	b	d58 <d_print_comp_inner+0x188>
     e40:	ldp	x21, x22, [sp, #32]
     e44:	ldp	x23, x24, [sp, #48]
     e48:	b	4f58 <d_print_comp_inner+0x4388>
     e4c:	ldr	x2, [x22, #8]
     e50:	mov	w1, w20
     e54:	mov	x0, x19
     e58:	bl	5050 <d_print_comp>
     e5c:	adrp	x0, 0 <is_fnqual_component_type>
     e60:	add	x0, x0, #0x0
     e64:	bl	0 <__asan_internal_strlen>
     e68:	cbz	x0, ee4 <d_print_comp_inner+0x314>
     e6c:	stp	x25, x26, [sp, #64]
     e70:	adrp	x21, 0 <is_fnqual_component_type>
     e74:	add	x21, x21, #0x0
     e78:	add	x24, x0, x21
     e7c:	mov	x25, #0xff                  	// #255
     e80:	b	ea4 <d_print_comp_inner+0x2d4>
     e84:	ldr	x0, [x19, #256]
     e88:	add	x1, x0, #0x1
     e8c:	str	x1, [x19, #256]
     e90:	strb	w23, [x19, x0]
     e94:	strb	w23, [x19, #264]
     e98:	add	x21, x21, #0x1
     e9c:	cmp	x21, x24
     ea0:	b.eq	ee0 <d_print_comp_inner+0x310>  // b.none
     ea4:	ldrb	w23, [x21]
     ea8:	ldr	x0, [x19, #256]
     eac:	cmp	x0, #0xff
     eb0:	b.ne	e84 <d_print_comp_inner+0x2b4>  // b.any
     eb4:	strb	wzr, [x19, #255]
     eb8:	ldr	x3, [x19, #272]
     ebc:	ldr	x2, [x19, #280]
     ec0:	mov	x1, x25
     ec4:	mov	x0, x19
     ec8:	blr	x3
     ecc:	str	xzr, [x19, #256]
     ed0:	ldr	x0, [x19, #320]
     ed4:	add	x0, x0, #0x1
     ed8:	str	x0, [x19, #320]
     edc:	b	e84 <d_print_comp_inner+0x2b4>
     ee0:	ldp	x25, x26, [sp, #64]
     ee4:	ldr	x2, [x22, #16]
     ee8:	mov	w1, w20
     eec:	mov	x0, x19
     ef0:	bl	5050 <d_print_comp>
     ef4:	ldr	x0, [x19, #256]
     ef8:	cmp	x0, #0xff
     efc:	b.eq	f24 <d_print_comp_inner+0x354>  // b.none
     f00:	ldr	x1, [x19, #256]
     f04:	add	x0, x1, #0x1
     f08:	str	x0, [x19, #256]
     f0c:	mov	w0, #0x5d                  	// #93
     f10:	strb	w0, [x19, x1]
     f14:	strb	w0, [x19, #264]
     f18:	ldp	x21, x22, [sp, #32]
     f1c:	ldp	x23, x24, [sp, #48]
     f20:	b	4f58 <d_print_comp_inner+0x4388>
     f24:	strb	wzr, [x19, #255]
     f28:	ldr	x3, [x19, #272]
     f2c:	ldr	x2, [x19, #280]
     f30:	mov	x1, #0xff                  	// #255
     f34:	mov	x0, x19
     f38:	blr	x3
     f3c:	str	xzr, [x19, #256]
     f40:	ldr	x0, [x19, #320]
     f44:	add	x0, x0, #0x1
     f48:	str	x0, [x19, #320]
     f4c:	b	f00 <d_print_comp_inner+0x330>
     f50:	ldr	x2, [x22, #8]
     f54:	mov	w1, w20
     f58:	mov	x0, x19
     f5c:	bl	5050 <d_print_comp>
     f60:	tbz	w20, #2, fb4 <d_print_comp_inner+0x3e4>
     f64:	ldr	x0, [x19, #256]
     f68:	cmp	x0, #0xff
     f6c:	b.eq	1040 <d_print_comp_inner+0x470>  // b.none
     f70:	ldr	x1, [x19, #256]
     f74:	add	x0, x1, #0x1
     f78:	str	x0, [x19, #256]
     f7c:	mov	w0, #0x2e                  	// #46
     f80:	strb	w0, [x19, x1]
     f84:	strb	w0, [x19, #264]
     f88:	ldr	x23, [x22, #16]
     f8c:	ldr	w0, [x23]
     f90:	cmp	w0, #0x47
     f94:	b.eq	106c <d_print_comp_inner+0x49c>  // b.none
     f98:	mov	x2, x23
     f9c:	mov	w1, w20
     fa0:	mov	x0, x19
     fa4:	bl	5050 <d_print_comp>
     fa8:	ldp	x21, x22, [sp, #32]
     fac:	ldp	x23, x24, [sp, #48]
     fb0:	b	4f58 <d_print_comp_inner+0x4388>
     fb4:	adrp	x0, 0 <is_fnqual_component_type>
     fb8:	add	x0, x0, #0x0
     fbc:	bl	0 <__asan_internal_strlen>
     fc0:	cbz	x0, f88 <d_print_comp_inner+0x3b8>
     fc4:	stp	x25, x26, [sp, #64]
     fc8:	adrp	x21, 0 <is_fnqual_component_type>
     fcc:	add	x21, x21, #0x0
     fd0:	add	x24, x0, x21
     fd4:	mov	x25, #0xff                  	// #255
     fd8:	b	ffc <d_print_comp_inner+0x42c>
     fdc:	ldr	x0, [x19, #256]
     fe0:	add	x1, x0, #0x1
     fe4:	str	x1, [x19, #256]
     fe8:	strb	w23, [x19, x0]
     fec:	strb	w23, [x19, #264]
     ff0:	add	x21, x21, #0x1
     ff4:	cmp	x21, x24
     ff8:	b.eq	1038 <d_print_comp_inner+0x468>  // b.none
     ffc:	ldrb	w23, [x21]
    1000:	ldr	x0, [x19, #256]
    1004:	cmp	x0, #0xff
    1008:	b.ne	fdc <d_print_comp_inner+0x40c>  // b.any
    100c:	strb	wzr, [x19, #255]
    1010:	ldr	x3, [x19, #272]
    1014:	ldr	x2, [x19, #280]
    1018:	mov	x1, x25
    101c:	mov	x0, x19
    1020:	blr	x3
    1024:	str	xzr, [x19, #256]
    1028:	ldr	x0, [x19, #320]
    102c:	add	x0, x0, #0x1
    1030:	str	x0, [x19, #320]
    1034:	b	fdc <d_print_comp_inner+0x40c>
    1038:	ldp	x25, x26, [sp, #64]
    103c:	b	f88 <d_print_comp_inner+0x3b8>
    1040:	strb	wzr, [x19, #255]
    1044:	ldr	x3, [x19, #272]
    1048:	ldr	x2, [x19, #280]
    104c:	mov	x1, #0xff                  	// #255
    1050:	mov	x0, x19
    1054:	blr	x3
    1058:	str	xzr, [x19, #256]
    105c:	ldr	x0, [x19, #320]
    1060:	add	x0, x0, #0x1
    1064:	str	x0, [x19, #320]
    1068:	b	f70 <d_print_comp_inner+0x3a0>
    106c:	stp	x25, x26, [sp, #64]
    1070:	adrp	x0, 0 <is_fnqual_component_type>
    1074:	add	x0, x0, #0x0
    1078:	bl	0 <__asan_internal_strlen>
    107c:	cbz	x0, 10f0 <d_print_comp_inner+0x520>
    1080:	adrp	x21, 0 <is_fnqual_component_type>
    1084:	add	x21, x21, #0x0
    1088:	add	x24, x0, x21
    108c:	mov	x25, #0xff                  	// #255
    1090:	b	10b4 <d_print_comp_inner+0x4e4>
    1094:	ldr	x0, [x19, #256]
    1098:	add	x1, x0, #0x1
    109c:	str	x1, [x19, #256]
    10a0:	strb	w22, [x19, x0]
    10a4:	strb	w22, [x19, #264]
    10a8:	add	x21, x21, #0x1
    10ac:	cmp	x24, x21
    10b0:	b.eq	10f0 <d_print_comp_inner+0x520>  // b.none
    10b4:	ldrb	w22, [x21]
    10b8:	ldr	x0, [x19, #256]
    10bc:	cmp	x0, #0xff
    10c0:	b.ne	1094 <d_print_comp_inner+0x4c4>  // b.any
    10c4:	strb	wzr, [x19, #255]
    10c8:	ldr	x3, [x19, #272]
    10cc:	ldr	x2, [x19, #280]
    10d0:	mov	x1, x25
    10d4:	mov	x0, x19
    10d8:	blr	x3
    10dc:	str	xzr, [x19, #256]
    10e0:	ldr	x0, [x19, #320]
    10e4:	add	x0, x0, #0x1
    10e8:	str	x0, [x19, #320]
    10ec:	b	1094 <d_print_comp_inner+0x4c4>
    10f0:	ldr	w2, [x23, #16]
    10f4:	add	x21, sp, #0x80
    10f8:	add	w2, w2, #0x1
    10fc:	adrp	x1, 0 <is_fnqual_component_type>
    1100:	add	x1, x1, #0x0
    1104:	mov	x0, x21
    1108:	bl	0 <sprintf>
    110c:	mov	x0, x21
    1110:	bl	0 <__asan_internal_strlen>
    1114:	cbz	x0, 1184 <d_print_comp_inner+0x5b4>
    1118:	add	x21, sp, #0x80
    111c:	add	x24, x0, x21
    1120:	mov	x25, #0xff                  	// #255
    1124:	b	1148 <d_print_comp_inner+0x578>
    1128:	ldr	x0, [x19, #256]
    112c:	add	x1, x0, #0x1
    1130:	str	x1, [x19, #256]
    1134:	strb	w22, [x19, x0]
    1138:	strb	w22, [x19, #264]
    113c:	add	x21, x21, #0x1
    1140:	cmp	x21, x24
    1144:	b.eq	1184 <d_print_comp_inner+0x5b4>  // b.none
    1148:	ldrb	w22, [x21]
    114c:	ldr	x0, [x19, #256]
    1150:	cmp	x0, #0xff
    1154:	b.ne	1128 <d_print_comp_inner+0x558>  // b.any
    1158:	strb	wzr, [x19, #255]
    115c:	ldr	x3, [x19, #272]
    1160:	ldr	x2, [x19, #280]
    1164:	mov	x1, x25
    1168:	mov	x0, x19
    116c:	blr	x3
    1170:	str	xzr, [x19, #256]
    1174:	ldr	x0, [x19, #320]
    1178:	add	x0, x0, #0x1
    117c:	str	x0, [x19, #320]
    1180:	b	1128 <d_print_comp_inner+0x558>
    1184:	adrp	x0, 0 <is_fnqual_component_type>
    1188:	add	x0, x0, #0x0
    118c:	bl	0 <__asan_internal_strlen>
    1190:	cbz	x0, 1204 <d_print_comp_inner+0x634>
    1194:	adrp	x21, 0 <is_fnqual_component_type>
    1198:	add	x21, x21, #0x0
    119c:	add	x24, x21, x0
    11a0:	mov	x25, #0xff                  	// #255
    11a4:	b	11c8 <d_print_comp_inner+0x5f8>
    11a8:	ldr	x0, [x19, #256]
    11ac:	add	x1, x0, #0x1
    11b0:	str	x1, [x19, #256]
    11b4:	strb	w22, [x19, x0]
    11b8:	strb	w22, [x19, #264]
    11bc:	add	x21, x21, #0x1
    11c0:	cmp	x21, x24
    11c4:	b.eq	1204 <d_print_comp_inner+0x634>  // b.none
    11c8:	ldrb	w22, [x21]
    11cc:	ldr	x0, [x19, #256]
    11d0:	cmp	x0, #0xff
    11d4:	b.ne	11a8 <d_print_comp_inner+0x5d8>  // b.any
    11d8:	strb	wzr, [x19, #255]
    11dc:	ldr	x3, [x19, #272]
    11e0:	ldr	x2, [x19, #280]
    11e4:	mov	x1, x25
    11e8:	mov	x0, x19
    11ec:	blr	x3
    11f0:	str	xzr, [x19, #256]
    11f4:	ldr	x0, [x19, #320]
    11f8:	add	x0, x0, #0x1
    11fc:	str	x0, [x19, #320]
    1200:	b	11a8 <d_print_comp_inner+0x5d8>
    1204:	ldr	x23, [x23, #8]
    1208:	ldp	x25, x26, [sp, #64]
    120c:	b	f98 <d_print_comp_inner+0x3c8>
    1210:	stp	x25, x26, [sp, #64]
    1214:	ldr	x26, [x19, #296]
    1218:	str	xzr, [x19, #296]
    121c:	ldr	x21, [x22, #8]
    1220:	cbz	x21, 1294 <d_print_comp_inner+0x6c4>
    1224:	stp	x27, x28, [sp, #80]
    1228:	ldr	x24, [x19, #288]
    122c:	add	x25, sp, #0x80
    1230:	mov	w23, #0x0                   	// #0
    1234:	ldr	x0, [x19, #296]
    1238:	str	x0, [x25]
    123c:	str	x25, [x19, #296]
    1240:	str	x21, [x25, #8]
    1244:	str	wzr, [x25, #16]
    1248:	str	x24, [x25, #24]
    124c:	add	w23, w23, #0x1
    1250:	ldr	w27, [x21]
    1254:	mov	w0, w27
    1258:	bl	0 <is_fnqual_component_type>
    125c:	cbz	w0, 4e7c <d_print_comp_inner+0x42ac>
    1260:	ldr	x21, [x21, #8]
    1264:	cbz	x21, 1290 <d_print_comp_inner+0x6c0>
    1268:	add	x25, x25, #0x20
    126c:	cmp	w23, #0x4
    1270:	b.ne	1234 <d_print_comp_inner+0x664>  // b.any
    1274:	mov	w0, #0x1                   	// #1
    1278:	str	w0, [x19, #304]
    127c:	ldp	x21, x22, [sp, #32]
    1280:	ldp	x23, x24, [sp, #48]
    1284:	ldp	x25, x26, [sp, #64]
    1288:	ldp	x27, x28, [sp, #80]
    128c:	b	4f58 <d_print_comp_inner+0x4388>
    1290:	ldp	x27, x28, [sp, #80]
    1294:	mov	w0, #0x1                   	// #1
    1298:	str	w0, [x19, #304]
    129c:	ldp	x21, x22, [sp, #32]
    12a0:	ldp	x23, x24, [sp, #48]
    12a4:	ldp	x25, x26, [sp, #64]
    12a8:	b	4f58 <d_print_comp_inner+0x4388>
    12ac:	ldr	x21, [x21, #16]
    12b0:	ldr	w0, [x21]
    12b4:	cmp	w0, #0x47
    12b8:	b.eq	133c <d_print_comp_inner+0x76c>  // b.none
    12bc:	ubfiz	x0, x23, #5, #32
    12c0:	add	x25, sp, #0x80
    12c4:	add	x25, x25, x0
    12c8:	add	x28, sp, #0x80
    12cc:	add	x27, sp, #0x88
    12d0:	add	x0, sp, #0x90
    12d4:	str	x0, [sp, #96]
    12d8:	add	x0, sp, #0x98
    12dc:	str	x0, [sp, #104]
    12e0:	ldr	w0, [x21]
    12e4:	bl	0 <is_fnqual_component_type>
    12e8:	cbz	w0, 4e84 <d_print_comp_inner+0x42b4>
    12ec:	cmp	w23, #0x3
    12f0:	b.hi	1360 <d_print_comp_inner+0x790>  // b.pmore
    12f4:	sub	w0, w23, #0x1
    12f8:	lsl	x0, x0, #5
    12fc:	add	x1, x28, x0
    1300:	ldp	x2, x3, [x1]
    1304:	stp	x2, x3, [x25]
    1308:	ldp	x2, x3, [x1, #16]
    130c:	stp	x2, x3, [x25, #16]
    1310:	str	x1, [x25]
    1314:	str	x25, [x19, #296]
    1318:	str	x21, [x27, x0]
    131c:	ldr	x1, [sp, #96]
    1320:	str	wzr, [x1, x0]
    1324:	ldr	x1, [sp, #104]
    1328:	str	x24, [x1, x0]
    132c:	add	w23, w23, #0x1
    1330:	ldr	x21, [x21, #8]
    1334:	add	x25, x25, #0x20
    1338:	b	12e0 <d_print_comp_inner+0x710>
    133c:	ldr	x21, [x21, #8]
    1340:	cbnz	x21, 12bc <d_print_comp_inner+0x6ec>
    1344:	mov	w0, #0x1                   	// #1
    1348:	str	w0, [x19, #304]
    134c:	ldp	x21, x22, [sp, #32]
    1350:	ldp	x23, x24, [sp, #48]
    1354:	ldp	x25, x26, [sp, #64]
    1358:	ldp	x27, x28, [sp, #80]
    135c:	b	4f58 <d_print_comp_inner+0x4388>
    1360:	mov	w0, #0x1                   	// #1
    1364:	str	w0, [x19, #304]
    1368:	ldp	x21, x22, [sp, #32]
    136c:	ldp	x23, x24, [sp, #48]
    1370:	ldp	x25, x26, [sp, #64]
    1374:	ldp	x27, x28, [sp, #80]
    1378:	b	4f58 <d_print_comp_inner+0x4388>
    137c:	str	x24, [sp, #112]
    1380:	add	x0, sp, #0x70
    1384:	str	x0, [x19, #288]
    1388:	str	x21, [sp, #120]
    138c:	b	4e90 <d_print_comp_inner+0x42c0>
    1390:	ldr	x0, [sp, #112]
    1394:	str	x0, [x19, #288]
    1398:	b	4eac <d_print_comp_inner+0x42dc>
    139c:	ldr	x0, [x19, #256]
    13a0:	add	x1, x0, #0x1
    13a4:	str	x1, [x19, #256]
    13a8:	strb	w22, [x19, x0]
    13ac:	strb	w22, [x19, #264]
    13b0:	ldr	x2, [x24, #8]
    13b4:	mov	w1, w20
    13b8:	mov	x0, x19
    13bc:	bl	50ec <d_print_mod>
    13c0:	sub	x21, x21, #0x20
    13c4:	cbz	w23, 1410 <d_print_comp_inner+0x840>
    13c8:	sub	w23, w23, #0x1
    13cc:	mov	x24, x21
    13d0:	ldr	w0, [x21, #16]
    13d4:	cbnz	w0, 13c0 <d_print_comp_inner+0x7f0>
    13d8:	ldr	x0, [x19, #256]
    13dc:	cmp	x0, #0xff
    13e0:	b.ne	139c <d_print_comp_inner+0x7cc>  // b.any
    13e4:	strb	wzr, [x19, #255]
    13e8:	ldr	x3, [x19, #272]
    13ec:	ldr	x2, [x19, #280]
    13f0:	mov	x1, x25
    13f4:	mov	x0, x19
    13f8:	blr	x3
    13fc:	str	xzr, [x19, #256]
    1400:	ldr	x0, [x19, #320]
    1404:	add	x0, x0, #0x1
    1408:	str	x0, [x19, #320]
    140c:	b	139c <d_print_comp_inner+0x7cc>
    1410:	str	x26, [x19, #296]
    1414:	ldp	x21, x22, [sp, #32]
    1418:	ldp	x23, x24, [sp, #48]
    141c:	ldp	x25, x26, [sp, #64]
    1420:	ldp	x27, x28, [sp, #80]
    1424:	b	4f58 <d_print_comp_inner+0x4388>
    1428:	ldr	x23, [x19, #368]
    142c:	str	x22, [x19, #368]
    1430:	ldr	x24, [x19, #296]
    1434:	str	xzr, [x19, #296]
    1438:	ldr	x21, [x22, #8]
    143c:	tbz	w20, #2, 1454 <d_print_comp_inner+0x884>
    1440:	ldr	w0, [x21]
    1444:	cbnz	w0, 1454 <d_print_comp_inner+0x884>
    1448:	ldr	w0, [x21, #16]
    144c:	cmp	w0, #0x6
    1450:	b.eq	14e8 <d_print_comp_inner+0x918>  // b.none
    1454:	mov	x2, x21
    1458:	mov	w1, w20
    145c:	mov	x0, x19
    1460:	bl	5050 <d_print_comp>
    1464:	ldrb	w0, [x19, #264]
    1468:	cmp	w0, #0x3c
    146c:	b.eq	1534 <d_print_comp_inner+0x964>  // b.none
    1470:	ldr	x0, [x19, #256]
    1474:	cmp	x0, #0xff
    1478:	b.eq	1588 <d_print_comp_inner+0x9b8>  // b.none
    147c:	ldr	x1, [x19, #256]
    1480:	add	x0, x1, #0x1
    1484:	str	x0, [x19, #256]
    1488:	mov	w0, #0x3c                  	// #60
    148c:	strb	w0, [x19, x1]
    1490:	strb	w0, [x19, #264]
    1494:	ldr	x2, [x22, #16]
    1498:	mov	w1, w20
    149c:	mov	x0, x19
    14a0:	bl	5050 <d_print_comp>
    14a4:	ldrb	w0, [x19, #264]
    14a8:	cmp	w0, #0x3e
    14ac:	b.eq	15b4 <d_print_comp_inner+0x9e4>  // b.none
    14b0:	ldr	x0, [x19, #256]
    14b4:	cmp	x0, #0xff
    14b8:	b.eq	1608 <d_print_comp_inner+0xa38>  // b.none
    14bc:	ldr	x1, [x19, #256]
    14c0:	add	x0, x1, #0x1
    14c4:	str	x0, [x19, #256]
    14c8:	mov	w0, #0x3e                  	// #62
    14cc:	strb	w0, [x19, x1]
    14d0:	strb	w0, [x19, #264]
    14d4:	str	x24, [x19, #296]
    14d8:	str	x23, [x19, #368]
    14dc:	ldp	x21, x22, [sp, #32]
    14e0:	ldp	x23, x24, [sp, #48]
    14e4:	b	4f58 <d_print_comp_inner+0x4388>
    14e8:	mov	x2, #0x6                   	// #6
    14ec:	adrp	x1, 0 <is_fnqual_component_type>
    14f0:	add	x1, x1, #0x0
    14f4:	ldr	x0, [x21, #8]
    14f8:	bl	0 <__asan_internal_strncmp>
    14fc:	cbnz	w0, 1454 <d_print_comp_inner+0x884>
    1500:	ldr	x2, [x22, #16]
    1504:	mov	w1, w20
    1508:	mov	x0, x19
    150c:	bl	5050 <d_print_comp>
    1510:	adrp	x20, 0 <is_fnqual_component_type>
    1514:	add	x20, x20, #0x0
    1518:	mov	x0, x20
    151c:	bl	0 <__asan_internal_strlen>
    1520:	mov	x2, x0
    1524:	mov	x1, x20
    1528:	mov	x0, x19
    152c:	bl	7fc <d_append_buffer>
    1530:	b	14d4 <d_print_comp_inner+0x904>
    1534:	ldr	x0, [x19, #256]
    1538:	cmp	x0, #0xff
    153c:	b.eq	155c <d_print_comp_inner+0x98c>  // b.none
    1540:	ldr	x1, [x19, #256]
    1544:	add	x0, x1, #0x1
    1548:	str	x0, [x19, #256]
    154c:	mov	w0, #0x20                  	// #32
    1550:	strb	w0, [x19, x1]
    1554:	strb	w0, [x19, #264]
    1558:	b	1470 <d_print_comp_inner+0x8a0>
    155c:	strb	wzr, [x19, #255]
    1560:	ldr	x3, [x19, #272]
    1564:	ldr	x2, [x19, #280]
    1568:	mov	x1, #0xff                  	// #255
    156c:	mov	x0, x19
    1570:	blr	x3
    1574:	str	xzr, [x19, #256]
    1578:	ldr	x0, [x19, #320]
    157c:	add	x0, x0, #0x1
    1580:	str	x0, [x19, #320]
    1584:	b	1540 <d_print_comp_inner+0x970>
    1588:	strb	wzr, [x19, #255]
    158c:	ldr	x3, [x19, #272]
    1590:	ldr	x2, [x19, #280]
    1594:	mov	x1, #0xff                  	// #255
    1598:	mov	x0, x19
    159c:	blr	x3
    15a0:	str	xzr, [x19, #256]
    15a4:	ldr	x0, [x19, #320]
    15a8:	add	x0, x0, #0x1
    15ac:	str	x0, [x19, #320]
    15b0:	b	147c <d_print_comp_inner+0x8ac>
    15b4:	ldr	x0, [x19, #256]
    15b8:	cmp	x0, #0xff
    15bc:	b.eq	15dc <d_print_comp_inner+0xa0c>  // b.none
    15c0:	ldr	x1, [x19, #256]
    15c4:	add	x0, x1, #0x1
    15c8:	str	x0, [x19, #256]
    15cc:	mov	w0, #0x20                  	// #32
    15d0:	strb	w0, [x19, x1]
    15d4:	strb	w0, [x19, #264]
    15d8:	b	14b0 <d_print_comp_inner+0x8e0>
    15dc:	strb	wzr, [x19, #255]
    15e0:	ldr	x3, [x19, #272]
    15e4:	ldr	x2, [x19, #280]
    15e8:	mov	x1, #0xff                  	// #255
    15ec:	mov	x0, x19
    15f0:	blr	x3
    15f4:	str	xzr, [x19, #256]
    15f8:	ldr	x0, [x19, #320]
    15fc:	add	x0, x0, #0x1
    1600:	str	x0, [x19, #320]
    1604:	b	15c0 <d_print_comp_inner+0x9f0>
    1608:	strb	wzr, [x19, #255]
    160c:	ldr	x3, [x19, #272]
    1610:	ldr	x2, [x19, #280]
    1614:	mov	x1, #0xff                  	// #255
    1618:	mov	x0, x19
    161c:	blr	x3
    1620:	str	xzr, [x19, #256]
    1624:	ldr	x0, [x19, #320]
    1628:	add	x0, x0, #0x1
    162c:	str	x0, [x19, #320]
    1630:	b	14bc <d_print_comp_inner+0x8ec>
    1634:	ldr	w0, [x19, #312]
    1638:	cbz	w0, 174c <d_print_comp_inner+0xb7c>
    163c:	adrp	x20, 0 <is_fnqual_component_type>
    1640:	add	x20, x20, #0x0
    1644:	add	x23, x20, #0x5
    1648:	mov	x24, #0xff                  	// #255
    164c:	b	1670 <d_print_comp_inner+0xaa0>
    1650:	ldr	x0, [x19, #256]
    1654:	add	x1, x0, #0x1
    1658:	str	x1, [x19, #256]
    165c:	strb	w21, [x19, x0]
    1660:	strb	w21, [x19, #264]
    1664:	add	x20, x20, #0x1
    1668:	cmp	x23, x20
    166c:	b.eq	16ac <d_print_comp_inner+0xadc>  // b.none
    1670:	ldrb	w21, [x20]
    1674:	ldr	x0, [x19, #256]
    1678:	cmp	x0, #0xff
    167c:	b.ne	1650 <d_print_comp_inner+0xa80>  // b.any
    1680:	strb	wzr, [x19, #255]
    1684:	ldr	x3, [x19, #272]
    1688:	ldr	x2, [x19, #280]
    168c:	mov	x1, x24
    1690:	mov	x0, x19
    1694:	blr	x3
    1698:	str	xzr, [x19, #256]
    169c:	ldr	x0, [x19, #320]
    16a0:	add	x0, x0, #0x1
    16a4:	str	x0, [x19, #320]
    16a8:	b	1650 <d_print_comp_inner+0xa80>
    16ac:	ldr	x2, [x22, #8]
    16b0:	add	x20, sp, #0x80
    16b4:	add	w2, w2, #0x1
    16b8:	adrp	x1, 0 <is_fnqual_component_type>
    16bc:	add	x1, x1, #0x0
    16c0:	mov	x0, x20
    16c4:	bl	0 <sprintf>
    16c8:	mov	x0, x20
    16cc:	bl	0 <__asan_internal_strlen>
    16d0:	cbz	x0, 4f7c <d_print_comp_inner+0x43ac>
    16d4:	add	x20, sp, #0x80
    16d8:	add	x22, x0, x20
    16dc:	mov	x23, #0xff                  	// #255
    16e0:	b	1704 <d_print_comp_inner+0xb34>
    16e4:	ldr	x0, [x19, #256]
    16e8:	add	x1, x0, #0x1
    16ec:	str	x1, [x19, #256]
    16f0:	strb	w21, [x19, x0]
    16f4:	strb	w21, [x19, #264]
    16f8:	add	x20, x20, #0x1
    16fc:	cmp	x22, x20
    1700:	b.eq	1740 <d_print_comp_inner+0xb70>  // b.none
    1704:	ldrb	w21, [x20]
    1708:	ldr	x0, [x19, #256]
    170c:	cmp	x0, #0xff
    1710:	b.ne	16e4 <d_print_comp_inner+0xb14>  // b.any
    1714:	strb	wzr, [x19, #255]
    1718:	ldr	x3, [x19, #272]
    171c:	ldr	x2, [x19, #280]
    1720:	mov	x1, x23
    1724:	mov	x0, x19
    1728:	blr	x3
    172c:	str	xzr, [x19, #256]
    1730:	ldr	x0, [x19, #320]
    1734:	add	x0, x0, #0x1
    1738:	str	x0, [x19, #320]
    173c:	b	16e4 <d_print_comp_inner+0xb14>
    1740:	ldp	x21, x22, [sp, #32]
    1744:	ldp	x23, x24, [sp, #48]
    1748:	b	4f58 <d_print_comp_inner+0x4388>
    174c:	mov	x1, x22
    1750:	mov	x0, x19
    1754:	bl	8d4 <d_lookup_template_argument>
    1758:	cbz	x0, 17a0 <d_print_comp_inner+0xbd0>
    175c:	ldr	w1, [x0]
    1760:	cmp	w1, #0x2f
    1764:	b.eq	1794 <d_print_comp_inner+0xbc4>  // b.none
    1768:	ldr	x21, [x19, #288]
    176c:	ldr	x1, [x21]
    1770:	str	x1, [x19, #288]
    1774:	mov	x2, x0
    1778:	mov	w1, w20
    177c:	mov	x0, x19
    1780:	bl	5050 <d_print_comp>
    1784:	str	x21, [x19, #288]
    1788:	ldp	x21, x22, [sp, #32]
    178c:	ldp	x23, x24, [sp, #48]
    1790:	b	4f58 <d_print_comp_inner+0x4388>
    1794:	ldr	w1, [x19, #316]
    1798:	bl	89c <d_index_template_argument>
    179c:	cbnz	x0, 1768 <d_print_comp_inner+0xb98>
    17a0:	mov	w0, #0x1                   	// #1
    17a4:	str	w0, [x19, #304]
    17a8:	ldp	x21, x22, [sp, #32]
    17ac:	ldp	x23, x24, [sp, #48]
    17b0:	b	4f58 <d_print_comp_inner+0x4388>
    17b4:	adrp	x0, 0 <is_fnqual_component_type>
    17b8:	add	x0, x0, #0x0
    17bc:	bl	0 <__asan_internal_strlen>
    17c0:	cbz	x0, 183c <d_print_comp_inner+0xc6c>
    17c4:	stp	x25, x26, [sp, #64]
    17c8:	adrp	x21, 0 <is_fnqual_component_type>
    17cc:	add	x21, x21, #0x0
    17d0:	add	x24, x0, x21
    17d4:	mov	x25, #0xff                  	// #255
    17d8:	b	17fc <d_print_comp_inner+0xc2c>
    17dc:	ldr	x0, [x19, #256]
    17e0:	add	x1, x0, #0x1
    17e4:	str	x1, [x19, #256]
    17e8:	strb	w23, [x19, x0]
    17ec:	strb	w23, [x19, #264]
    17f0:	add	x21, x21, #0x1
    17f4:	cmp	x21, x24
    17f8:	b.eq	1838 <d_print_comp_inner+0xc68>  // b.none
    17fc:	ldrb	w23, [x21]
    1800:	ldr	x0, [x19, #256]
    1804:	cmp	x0, #0xff
    1808:	b.ne	17dc <d_print_comp_inner+0xc0c>  // b.any
    180c:	strb	wzr, [x19, #255]
    1810:	ldr	x3, [x19, #272]
    1814:	ldr	x2, [x19, #280]
    1818:	mov	x1, x25
    181c:	mov	x0, x19
    1820:	blr	x3
    1824:	str	xzr, [x19, #256]
    1828:	ldr	x0, [x19, #320]
    182c:	add	x0, x0, #0x1
    1830:	str	x0, [x19, #320]
    1834:	b	17dc <d_print_comp_inner+0xc0c>
    1838:	ldp	x25, x26, [sp, #64]
    183c:	ldr	x2, [x22, #8]
    1840:	mov	w1, w20
    1844:	mov	x0, x19
    1848:	bl	5050 <d_print_comp>
    184c:	ldp	x21, x22, [sp, #32]
    1850:	ldp	x23, x24, [sp, #48]
    1854:	b	4f58 <d_print_comp_inner+0x4388>
    1858:	ldr	x2, [x22, #16]
    185c:	mov	w1, w20
    1860:	mov	x0, x19
    1864:	bl	5050 <d_print_comp>
    1868:	ldp	x21, x22, [sp, #32]
    186c:	ldp	x23, x24, [sp, #48]
    1870:	b	4f58 <d_print_comp_inner+0x4388>
    1874:	ldr	x0, [x19, #256]
    1878:	cmp	x0, #0xff
    187c:	b.eq	18b4 <d_print_comp_inner+0xce4>  // b.none
    1880:	ldr	x1, [x19, #256]
    1884:	add	x0, x1, #0x1
    1888:	str	x0, [x19, #256]
    188c:	mov	w0, #0x7e                  	// #126
    1890:	strb	w0, [x19, x1]
    1894:	strb	w0, [x19, #264]
    1898:	ldr	x2, [x22, #16]
    189c:	mov	w1, w20
    18a0:	mov	x0, x19
    18a4:	bl	5050 <d_print_comp>
    18a8:	ldp	x21, x22, [sp, #32]
    18ac:	ldp	x23, x24, [sp, #48]
    18b0:	b	4f58 <d_print_comp_inner+0x4388>
    18b4:	strb	wzr, [x19, #255]
    18b8:	ldr	x3, [x19, #272]
    18bc:	ldr	x2, [x19, #280]
    18c0:	mov	x1, #0xff                  	// #255
    18c4:	mov	x0, x19
    18c8:	blr	x3
    18cc:	str	xzr, [x19, #256]
    18d0:	ldr	x0, [x19, #320]
    18d4:	add	x0, x0, #0x1
    18d8:	str	x0, [x19, #320]
    18dc:	b	1880 <d_print_comp_inner+0xcb0>
    18e0:	adrp	x0, 0 <is_fnqual_component_type>
    18e4:	add	x0, x0, #0x0
    18e8:	bl	0 <__asan_internal_strlen>
    18ec:	cbz	x0, 1968 <d_print_comp_inner+0xd98>
    18f0:	stp	x25, x26, [sp, #64]
    18f4:	adrp	x21, 0 <is_fnqual_component_type>
    18f8:	add	x21, x21, #0x0
    18fc:	add	x24, x0, x21
    1900:	mov	x25, #0xff                  	// #255
    1904:	b	1928 <d_print_comp_inner+0xd58>
    1908:	ldr	x0, [x19, #256]
    190c:	add	x1, x0, #0x1
    1910:	str	x1, [x19, #256]
    1914:	strb	w23, [x19, x0]
    1918:	strb	w23, [x19, #264]
    191c:	add	x21, x21, #0x1
    1920:	cmp	x24, x21
    1924:	b.eq	1964 <d_print_comp_inner+0xd94>  // b.none
    1928:	ldrb	w23, [x21]
    192c:	ldr	x0, [x19, #256]
    1930:	cmp	x0, #0xff
    1934:	b.ne	1908 <d_print_comp_inner+0xd38>  // b.any
    1938:	strb	wzr, [x19, #255]
    193c:	ldr	x3, [x19, #272]
    1940:	ldr	x2, [x19, #280]
    1944:	mov	x1, x25
    1948:	mov	x0, x19
    194c:	blr	x3
    1950:	str	xzr, [x19, #256]
    1954:	ldr	x0, [x19, #320]
    1958:	add	x0, x0, #0x1
    195c:	str	x0, [x19, #320]
    1960:	b	1908 <d_print_comp_inner+0xd38>
    1964:	ldp	x25, x26, [sp, #64]
    1968:	ldr	x2, [x22, #8]
    196c:	mov	w1, w20
    1970:	mov	x0, x19
    1974:	bl	5050 <d_print_comp>
    1978:	ldp	x21, x22, [sp, #32]
    197c:	ldp	x23, x24, [sp, #48]
    1980:	b	4f58 <d_print_comp_inner+0x4388>
    1984:	adrp	x0, 0 <is_fnqual_component_type>
    1988:	add	x0, x0, #0x0
    198c:	bl	0 <__asan_internal_strlen>
    1990:	cbz	x0, 1a0c <d_print_comp_inner+0xe3c>
    1994:	stp	x25, x26, [sp, #64]
    1998:	adrp	x21, 0 <is_fnqual_component_type>
    199c:	add	x21, x21, #0x0
    19a0:	add	x24, x0, x21
    19a4:	mov	x25, #0xff                  	// #255
    19a8:	b	19cc <d_print_comp_inner+0xdfc>
    19ac:	ldr	x0, [x19, #256]
    19b0:	add	x1, x0, #0x1
    19b4:	str	x1, [x19, #256]
    19b8:	strb	w23, [x19, x0]
    19bc:	strb	w23, [x19, #264]
    19c0:	add	x21, x21, #0x1
    19c4:	cmp	x21, x24
    19c8:	b.eq	1a08 <d_print_comp_inner+0xe38>  // b.none
    19cc:	ldrb	w23, [x21]
    19d0:	ldr	x0, [x19, #256]
    19d4:	cmp	x0, #0xff
    19d8:	b.ne	19ac <d_print_comp_inner+0xddc>  // b.any
    19dc:	strb	wzr, [x19, #255]
    19e0:	ldr	x3, [x19, #272]
    19e4:	ldr	x2, [x19, #280]
    19e8:	mov	x1, x25
    19ec:	mov	x0, x19
    19f0:	blr	x3
    19f4:	str	xzr, [x19, #256]
    19f8:	ldr	x0, [x19, #320]
    19fc:	add	x0, x0, #0x1
    1a00:	str	x0, [x19, #320]
    1a04:	b	19ac <d_print_comp_inner+0xddc>
    1a08:	ldp	x25, x26, [sp, #64]
    1a0c:	ldr	x2, [x22, #8]
    1a10:	mov	w1, w20
    1a14:	mov	x0, x19
    1a18:	bl	5050 <d_print_comp>
    1a1c:	ldp	x21, x22, [sp, #32]
    1a20:	ldp	x23, x24, [sp, #48]
    1a24:	b	4f58 <d_print_comp_inner+0x4388>
    1a28:	stp	x25, x26, [sp, #64]
    1a2c:	adrp	x0, 0 <is_fnqual_component_type>
    1a30:	add	x0, x0, #0x0
    1a34:	bl	0 <__asan_internal_strlen>
    1a38:	cbz	x0, 1aac <d_print_comp_inner+0xedc>
    1a3c:	adrp	x21, 0 <is_fnqual_component_type>
    1a40:	add	x21, x21, #0x0
    1a44:	add	x24, x0, x21
    1a48:	mov	x25, #0xff                  	// #255
    1a4c:	b	1a70 <d_print_comp_inner+0xea0>
    1a50:	ldr	x0, [x19, #256]
    1a54:	add	x1, x0, #0x1
    1a58:	str	x1, [x19, #256]
    1a5c:	strb	w23, [x19, x0]
    1a60:	strb	w23, [x19, #264]
    1a64:	add	x21, x21, #0x1
    1a68:	cmp	x21, x24
    1a6c:	b.eq	1aac <d_print_comp_inner+0xedc>  // b.none
    1a70:	ldrb	w23, [x21]
    1a74:	ldr	x0, [x19, #256]
    1a78:	cmp	x0, #0xff
    1a7c:	b.ne	1a50 <d_print_comp_inner+0xe80>  // b.any
    1a80:	strb	wzr, [x19, #255]
    1a84:	ldr	x3, [x19, #272]
    1a88:	ldr	x2, [x19, #280]
    1a8c:	mov	x1, x25
    1a90:	mov	x0, x19
    1a94:	blr	x3
    1a98:	str	xzr, [x19, #256]
    1a9c:	ldr	x0, [x19, #320]
    1aa0:	add	x0, x0, #0x1
    1aa4:	str	x0, [x19, #320]
    1aa8:	b	1a50 <d_print_comp_inner+0xe80>
    1aac:	ldr	x2, [x22, #8]
    1ab0:	mov	w1, w20
    1ab4:	mov	x0, x19
    1ab8:	bl	5050 <d_print_comp>
    1abc:	adrp	x0, 0 <is_fnqual_component_type>
    1ac0:	add	x0, x0, #0x0
    1ac4:	bl	0 <__asan_internal_strlen>
    1ac8:	cbz	x0, 1b3c <d_print_comp_inner+0xf6c>
    1acc:	adrp	x21, 0 <is_fnqual_component_type>
    1ad0:	add	x21, x21, #0x0
    1ad4:	add	x24, x0, x21
    1ad8:	mov	x25, #0xff                  	// #255
    1adc:	b	1b00 <d_print_comp_inner+0xf30>
    1ae0:	ldr	x0, [x19, #256]
    1ae4:	add	x1, x0, #0x1
    1ae8:	str	x1, [x19, #256]
    1aec:	strb	w23, [x19, x0]
    1af0:	strb	w23, [x19, #264]
    1af4:	add	x21, x21, #0x1
    1af8:	cmp	x21, x24
    1afc:	b.eq	1b3c <d_print_comp_inner+0xf6c>  // b.none
    1b00:	ldrb	w23, [x21]
    1b04:	ldr	x0, [x19, #256]
    1b08:	cmp	x0, #0xff
    1b0c:	b.ne	1ae0 <d_print_comp_inner+0xf10>  // b.any
    1b10:	strb	wzr, [x19, #255]
    1b14:	ldr	x3, [x19, #272]
    1b18:	ldr	x2, [x19, #280]
    1b1c:	mov	x1, x25
    1b20:	mov	x0, x19
    1b24:	blr	x3
    1b28:	str	xzr, [x19, #256]
    1b2c:	ldr	x0, [x19, #320]
    1b30:	add	x0, x0, #0x1
    1b34:	str	x0, [x19, #320]
    1b38:	b	1ae0 <d_print_comp_inner+0xf10>
    1b3c:	ldr	x2, [x22, #16]
    1b40:	mov	w1, w20
    1b44:	mov	x0, x19
    1b48:	bl	5050 <d_print_comp>
    1b4c:	ldp	x21, x22, [sp, #32]
    1b50:	ldp	x23, x24, [sp, #48]
    1b54:	ldp	x25, x26, [sp, #64]
    1b58:	b	4f58 <d_print_comp_inner+0x4388>
    1b5c:	adrp	x0, 0 <is_fnqual_component_type>
    1b60:	add	x0, x0, #0x0
    1b64:	bl	0 <__asan_internal_strlen>
    1b68:	cbz	x0, 1be4 <d_print_comp_inner+0x1014>
    1b6c:	stp	x25, x26, [sp, #64]
    1b70:	adrp	x21, 0 <is_fnqual_component_type>
    1b74:	add	x21, x21, #0x0
    1b78:	add	x24, x0, x21
    1b7c:	mov	x25, #0xff                  	// #255
    1b80:	b	1ba4 <d_print_comp_inner+0xfd4>
    1b84:	ldr	x0, [x19, #256]
    1b88:	add	x1, x0, #0x1
    1b8c:	str	x1, [x19, #256]
    1b90:	strb	w23, [x19, x0]
    1b94:	strb	w23, [x19, #264]
    1b98:	add	x21, x21, #0x1
    1b9c:	cmp	x21, x24
    1ba0:	b.eq	1be0 <d_print_comp_inner+0x1010>  // b.none
    1ba4:	ldrb	w23, [x21]
    1ba8:	ldr	x0, [x19, #256]
    1bac:	cmp	x0, #0xff
    1bb0:	b.ne	1b84 <d_print_comp_inner+0xfb4>  // b.any
    1bb4:	strb	wzr, [x19, #255]
    1bb8:	ldr	x3, [x19, #272]
    1bbc:	ldr	x2, [x19, #280]
    1bc0:	mov	x1, x25
    1bc4:	mov	x0, x19
    1bc8:	blr	x3
    1bcc:	str	xzr, [x19, #256]
    1bd0:	ldr	x0, [x19, #320]
    1bd4:	add	x0, x0, #0x1
    1bd8:	str	x0, [x19, #320]
    1bdc:	b	1b84 <d_print_comp_inner+0xfb4>
    1be0:	ldp	x25, x26, [sp, #64]
    1be4:	ldr	x2, [x22, #8]
    1be8:	mov	w1, w20
    1bec:	mov	x0, x19
    1bf0:	bl	5050 <d_print_comp>
    1bf4:	ldp	x21, x22, [sp, #32]
    1bf8:	ldp	x23, x24, [sp, #48]
    1bfc:	b	4f58 <d_print_comp_inner+0x4388>
    1c00:	adrp	x0, 0 <is_fnqual_component_type>
    1c04:	add	x0, x0, #0x0
    1c08:	bl	0 <__asan_internal_strlen>
    1c0c:	cbz	x0, 1c88 <d_print_comp_inner+0x10b8>
    1c10:	stp	x25, x26, [sp, #64]
    1c14:	adrp	x21, 0 <is_fnqual_component_type>
    1c18:	add	x21, x21, #0x0
    1c1c:	add	x24, x0, x21
    1c20:	mov	x25, #0xff                  	// #255
    1c24:	b	1c48 <d_print_comp_inner+0x1078>
    1c28:	ldr	x0, [x19, #256]
    1c2c:	add	x1, x0, #0x1
    1c30:	str	x1, [x19, #256]
    1c34:	strb	w23, [x19, x0]
    1c38:	strb	w23, [x19, #264]
    1c3c:	add	x21, x21, #0x1
    1c40:	cmp	x21, x24
    1c44:	b.eq	1c84 <d_print_comp_inner+0x10b4>  // b.none
    1c48:	ldrb	w23, [x21]
    1c4c:	ldr	x0, [x19, #256]
    1c50:	cmp	x0, #0xff
    1c54:	b.ne	1c28 <d_print_comp_inner+0x1058>  // b.any
    1c58:	strb	wzr, [x19, #255]
    1c5c:	ldr	x3, [x19, #272]
    1c60:	ldr	x2, [x19, #280]
    1c64:	mov	x1, x25
    1c68:	mov	x0, x19
    1c6c:	blr	x3
    1c70:	str	xzr, [x19, #256]
    1c74:	ldr	x0, [x19, #320]
    1c78:	add	x0, x0, #0x1
    1c7c:	str	x0, [x19, #320]
    1c80:	b	1c28 <d_print_comp_inner+0x1058>
    1c84:	ldp	x25, x26, [sp, #64]
    1c88:	ldr	x2, [x22, #8]
    1c8c:	mov	w1, w20
    1c90:	mov	x0, x19
    1c94:	bl	5050 <d_print_comp>
    1c98:	ldp	x21, x22, [sp, #32]
    1c9c:	ldp	x23, x24, [sp, #48]
    1ca0:	b	4f58 <d_print_comp_inner+0x4388>
    1ca4:	adrp	x0, 0 <is_fnqual_component_type>
    1ca8:	add	x0, x0, #0x0
    1cac:	bl	0 <__asan_internal_strlen>
    1cb0:	cbz	x0, 1d2c <d_print_comp_inner+0x115c>
    1cb4:	stp	x25, x26, [sp, #64]
    1cb8:	adrp	x21, 0 <is_fnqual_component_type>
    1cbc:	add	x21, x21, #0x0
    1cc0:	add	x24, x0, x21
    1cc4:	mov	x25, #0xff                  	// #255
    1cc8:	b	1cec <d_print_comp_inner+0x111c>
    1ccc:	ldr	x0, [x19, #256]
    1cd0:	add	x1, x0, #0x1
    1cd4:	str	x1, [x19, #256]
    1cd8:	strb	w23, [x19, x0]
    1cdc:	strb	w23, [x19, #264]
    1ce0:	add	x21, x21, #0x1
    1ce4:	cmp	x21, x24
    1ce8:	b.eq	1d28 <d_print_comp_inner+0x1158>  // b.none
    1cec:	ldrb	w23, [x21]
    1cf0:	ldr	x0, [x19, #256]
    1cf4:	cmp	x0, #0xff
    1cf8:	b.ne	1ccc <d_print_comp_inner+0x10fc>  // b.any
    1cfc:	strb	wzr, [x19, #255]
    1d00:	ldr	x3, [x19, #272]
    1d04:	ldr	x2, [x19, #280]
    1d08:	mov	x1, x25
    1d0c:	mov	x0, x19
    1d10:	blr	x3
    1d14:	str	xzr, [x19, #256]
    1d18:	ldr	x0, [x19, #320]
    1d1c:	add	x0, x0, #0x1
    1d20:	str	x0, [x19, #320]
    1d24:	b	1ccc <d_print_comp_inner+0x10fc>
    1d28:	ldp	x25, x26, [sp, #64]
    1d2c:	ldr	x2, [x22, #8]
    1d30:	mov	w1, w20
    1d34:	mov	x0, x19
    1d38:	bl	5050 <d_print_comp>
    1d3c:	ldp	x21, x22, [sp, #32]
    1d40:	ldp	x23, x24, [sp, #48]
    1d44:	b	4f58 <d_print_comp_inner+0x4388>
    1d48:	adrp	x0, 0 <is_fnqual_component_type>
    1d4c:	add	x0, x0, #0x0
    1d50:	bl	0 <__asan_internal_strlen>
    1d54:	cbz	x0, 1dd0 <d_print_comp_inner+0x1200>
    1d58:	stp	x25, x26, [sp, #64]
    1d5c:	adrp	x21, 0 <is_fnqual_component_type>
    1d60:	add	x21, x21, #0x0
    1d64:	add	x24, x0, x21
    1d68:	mov	x25, #0xff                  	// #255
    1d6c:	b	1d90 <d_print_comp_inner+0x11c0>
    1d70:	ldr	x0, [x19, #256]
    1d74:	add	x1, x0, #0x1
    1d78:	str	x1, [x19, #256]
    1d7c:	strb	w23, [x19, x0]
    1d80:	strb	w23, [x19, #264]
    1d84:	add	x21, x21, #0x1
    1d88:	cmp	x24, x21
    1d8c:	b.eq	1dcc <d_print_comp_inner+0x11fc>  // b.none
    1d90:	ldrb	w23, [x21]
    1d94:	ldr	x0, [x19, #256]
    1d98:	cmp	x0, #0xff
    1d9c:	b.ne	1d70 <d_print_comp_inner+0x11a0>  // b.any
    1da0:	strb	wzr, [x19, #255]
    1da4:	ldr	x3, [x19, #272]
    1da8:	ldr	x2, [x19, #280]
    1dac:	mov	x1, x25
    1db0:	mov	x0, x19
    1db4:	blr	x3
    1db8:	str	xzr, [x19, #256]
    1dbc:	ldr	x0, [x19, #320]
    1dc0:	add	x0, x0, #0x1
    1dc4:	str	x0, [x19, #320]
    1dc8:	b	1d70 <d_print_comp_inner+0x11a0>
    1dcc:	ldp	x25, x26, [sp, #64]
    1dd0:	ldr	x2, [x22, #8]
    1dd4:	mov	w1, w20
    1dd8:	mov	x0, x19
    1ddc:	bl	5050 <d_print_comp>
    1de0:	ldp	x21, x22, [sp, #32]
    1de4:	ldp	x23, x24, [sp, #48]
    1de8:	b	4f58 <d_print_comp_inner+0x4388>
    1dec:	adrp	x0, 0 <is_fnqual_component_type>
    1df0:	add	x0, x0, #0x0
    1df4:	bl	0 <__asan_internal_strlen>
    1df8:	cbz	x0, 1e74 <d_print_comp_inner+0x12a4>
    1dfc:	stp	x25, x26, [sp, #64]
    1e00:	adrp	x21, 0 <is_fnqual_component_type>
    1e04:	add	x21, x21, #0x0
    1e08:	add	x24, x21, x0
    1e0c:	mov	x25, #0xff                  	// #255
    1e10:	b	1e34 <d_print_comp_inner+0x1264>
    1e14:	ldr	x0, [x19, #256]
    1e18:	add	x1, x0, #0x1
    1e1c:	str	x1, [x19, #256]
    1e20:	strb	w23, [x19, x0]
    1e24:	strb	w23, [x19, #264]
    1e28:	add	x21, x21, #0x1
    1e2c:	cmp	x24, x21
    1e30:	b.eq	1e70 <d_print_comp_inner+0x12a0>  // b.none
    1e34:	ldrb	w23, [x21]
    1e38:	ldr	x0, [x19, #256]
    1e3c:	cmp	x0, #0xff
    1e40:	b.ne	1e14 <d_print_comp_inner+0x1244>  // b.any
    1e44:	strb	wzr, [x19, #255]
    1e48:	ldr	x3, [x19, #272]
    1e4c:	ldr	x2, [x19, #280]
    1e50:	mov	x1, x25
    1e54:	mov	x0, x19
    1e58:	blr	x3
    1e5c:	str	xzr, [x19, #256]
    1e60:	ldr	x0, [x19, #320]
    1e64:	add	x0, x0, #0x1
    1e68:	str	x0, [x19, #320]
    1e6c:	b	1e14 <d_print_comp_inner+0x1244>
    1e70:	ldp	x25, x26, [sp, #64]
    1e74:	ldr	x2, [x22, #8]
    1e78:	mov	w1, w20
    1e7c:	mov	x0, x19
    1e80:	bl	5050 <d_print_comp>
    1e84:	ldp	x21, x22, [sp, #32]
    1e88:	ldp	x23, x24, [sp, #48]
    1e8c:	b	4f58 <d_print_comp_inner+0x4388>
    1e90:	adrp	x0, 0 <is_fnqual_component_type>
    1e94:	add	x0, x0, #0x0
    1e98:	bl	0 <__asan_internal_strlen>
    1e9c:	cbz	x0, 1f18 <d_print_comp_inner+0x1348>
    1ea0:	stp	x25, x26, [sp, #64]
    1ea4:	adrp	x21, 0 <is_fnqual_component_type>
    1ea8:	add	x21, x21, #0x0
    1eac:	add	x24, x0, x21
    1eb0:	mov	x25, #0xff                  	// #255
    1eb4:	b	1ed8 <d_print_comp_inner+0x1308>
    1eb8:	ldr	x0, [x19, #256]
    1ebc:	add	x1, x0, #0x1
    1ec0:	str	x1, [x19, #256]
    1ec4:	strb	w23, [x19, x0]
    1ec8:	strb	w23, [x19, #264]
    1ecc:	add	x21, x21, #0x1
    1ed0:	cmp	x21, x24
    1ed4:	b.eq	1f14 <d_print_comp_inner+0x1344>  // b.none
    1ed8:	ldrb	w23, [x21]
    1edc:	ldr	x0, [x19, #256]
    1ee0:	cmp	x0, #0xff
    1ee4:	b.ne	1eb8 <d_print_comp_inner+0x12e8>  // b.any
    1ee8:	strb	wzr, [x19, #255]
    1eec:	ldr	x3, [x19, #272]
    1ef0:	ldr	x2, [x19, #280]
    1ef4:	mov	x1, x25
    1ef8:	mov	x0, x19
    1efc:	blr	x3
    1f00:	str	xzr, [x19, #256]
    1f04:	ldr	x0, [x19, #320]
    1f08:	add	x0, x0, #0x1
    1f0c:	str	x0, [x19, #320]
    1f10:	b	1eb8 <d_print_comp_inner+0x12e8>
    1f14:	ldp	x25, x26, [sp, #64]
    1f18:	ldr	x2, [x22, #8]
    1f1c:	mov	w1, w20
    1f20:	mov	x0, x19
    1f24:	bl	5050 <d_print_comp>
    1f28:	ldp	x21, x22, [sp, #32]
    1f2c:	ldp	x23, x24, [sp, #48]
    1f30:	b	4f58 <d_print_comp_inner+0x4388>
    1f34:	adrp	x0, 0 <is_fnqual_component_type>
    1f38:	add	x0, x0, #0x0
    1f3c:	bl	0 <__asan_internal_strlen>
    1f40:	cbz	x0, 1fbc <d_print_comp_inner+0x13ec>
    1f44:	stp	x25, x26, [sp, #64]
    1f48:	adrp	x21, 0 <is_fnqual_component_type>
    1f4c:	add	x21, x21, #0x0
    1f50:	add	x24, x0, x21
    1f54:	mov	x25, #0xff                  	// #255
    1f58:	b	1f7c <d_print_comp_inner+0x13ac>
    1f5c:	ldr	x0, [x19, #256]
    1f60:	add	x1, x0, #0x1
    1f64:	str	x1, [x19, #256]
    1f68:	strb	w23, [x19, x0]
    1f6c:	strb	w23, [x19, #264]
    1f70:	add	x21, x21, #0x1
    1f74:	cmp	x21, x24
    1f78:	b.eq	1fb8 <d_print_comp_inner+0x13e8>  // b.none
    1f7c:	ldrb	w23, [x21]
    1f80:	ldr	x0, [x19, #256]
    1f84:	cmp	x0, #0xff
    1f88:	b.ne	1f5c <d_print_comp_inner+0x138c>  // b.any
    1f8c:	strb	wzr, [x19, #255]
    1f90:	ldr	x3, [x19, #272]
    1f94:	ldr	x2, [x19, #280]
    1f98:	mov	x1, x25
    1f9c:	mov	x0, x19
    1fa0:	blr	x3
    1fa4:	str	xzr, [x19, #256]
    1fa8:	ldr	x0, [x19, #320]
    1fac:	add	x0, x0, #0x1
    1fb0:	str	x0, [x19, #320]
    1fb4:	b	1f5c <d_print_comp_inner+0x138c>
    1fb8:	ldp	x25, x26, [sp, #64]
    1fbc:	ldr	x2, [x22, #8]
    1fc0:	mov	w1, w20
    1fc4:	mov	x0, x19
    1fc8:	bl	5050 <d_print_comp>
    1fcc:	ldp	x21, x22, [sp, #32]
    1fd0:	ldp	x23, x24, [sp, #48]
    1fd4:	b	4f58 <d_print_comp_inner+0x4388>
    1fd8:	adrp	x0, 0 <is_fnqual_component_type>
    1fdc:	add	x0, x0, #0x0
    1fe0:	bl	0 <__asan_internal_strlen>
    1fe4:	cbz	x0, 2060 <d_print_comp_inner+0x1490>
    1fe8:	stp	x25, x26, [sp, #64]
    1fec:	adrp	x21, 0 <is_fnqual_component_type>
    1ff0:	add	x21, x21, #0x0
    1ff4:	add	x24, x0, x21
    1ff8:	mov	x25, #0xff                  	// #255
    1ffc:	b	2020 <d_print_comp_inner+0x1450>
    2000:	ldr	x0, [x19, #256]
    2004:	add	x1, x0, #0x1
    2008:	str	x1, [x19, #256]
    200c:	strb	w23, [x19, x0]
    2010:	strb	w23, [x19, #264]
    2014:	add	x21, x21, #0x1
    2018:	cmp	x21, x24
    201c:	b.eq	205c <d_print_comp_inner+0x148c>  // b.none
    2020:	ldrb	w23, [x21]
    2024:	ldr	x0, [x19, #256]
    2028:	cmp	x0, #0xff
    202c:	b.ne	2000 <d_print_comp_inner+0x1430>  // b.any
    2030:	strb	wzr, [x19, #255]
    2034:	ldr	x3, [x19, #272]
    2038:	ldr	x2, [x19, #280]
    203c:	mov	x1, x25
    2040:	mov	x0, x19
    2044:	blr	x3
    2048:	str	xzr, [x19, #256]
    204c:	ldr	x0, [x19, #320]
    2050:	add	x0, x0, #0x1
    2054:	str	x0, [x19, #320]
    2058:	b	2000 <d_print_comp_inner+0x1430>
    205c:	ldp	x25, x26, [sp, #64]
    2060:	ldr	x2, [x22, #8]
    2064:	mov	w1, w20
    2068:	mov	x0, x19
    206c:	bl	5050 <d_print_comp>
    2070:	ldp	x21, x22, [sp, #32]
    2074:	ldp	x23, x24, [sp, #48]
    2078:	b	4f58 <d_print_comp_inner+0x4388>
    207c:	adrp	x0, 0 <is_fnqual_component_type>
    2080:	add	x0, x0, #0x0
    2084:	bl	0 <__asan_internal_strlen>
    2088:	cbz	x0, 2104 <d_print_comp_inner+0x1534>
    208c:	stp	x25, x26, [sp, #64]
    2090:	adrp	x21, 0 <is_fnqual_component_type>
    2094:	add	x21, x21, #0x0
    2098:	add	x24, x0, x21
    209c:	mov	x25, #0xff                  	// #255
    20a0:	b	20c4 <d_print_comp_inner+0x14f4>
    20a4:	ldr	x0, [x19, #256]
    20a8:	add	x1, x0, #0x1
    20ac:	str	x1, [x19, #256]
    20b0:	strb	w23, [x19, x0]
    20b4:	strb	w23, [x19, #264]
    20b8:	add	x21, x21, #0x1
    20bc:	cmp	x24, x21
    20c0:	b.eq	2100 <d_print_comp_inner+0x1530>  // b.none
    20c4:	ldrb	w23, [x21]
    20c8:	ldr	x0, [x19, #256]
    20cc:	cmp	x0, #0xff
    20d0:	b.ne	20a4 <d_print_comp_inner+0x14d4>  // b.any
    20d4:	strb	wzr, [x19, #255]
    20d8:	ldr	x3, [x19, #272]
    20dc:	ldr	x2, [x19, #280]
    20e0:	mov	x1, x25
    20e4:	mov	x0, x19
    20e8:	blr	x3
    20ec:	str	xzr, [x19, #256]
    20f0:	ldr	x0, [x19, #320]
    20f4:	add	x0, x0, #0x1
    20f8:	str	x0, [x19, #320]
    20fc:	b	20a4 <d_print_comp_inner+0x14d4>
    2100:	ldp	x25, x26, [sp, #64]
    2104:	ldr	x2, [x22, #8]
    2108:	mov	w1, w20
    210c:	mov	x0, x19
    2110:	bl	5050 <d_print_comp>
    2114:	ldp	x21, x22, [sp, #32]
    2118:	ldp	x23, x24, [sp, #48]
    211c:	b	4f58 <d_print_comp_inner+0x4388>
    2120:	adrp	x0, 0 <is_fnqual_component_type>
    2124:	add	x0, x0, #0x0
    2128:	bl	0 <__asan_internal_strlen>
    212c:	cbz	x0, 21a8 <d_print_comp_inner+0x15d8>
    2130:	stp	x25, x26, [sp, #64]
    2134:	adrp	x21, 0 <is_fnqual_component_type>
    2138:	add	x21, x21, #0x0
    213c:	add	x24, x0, x21
    2140:	mov	x25, #0xff                  	// #255
    2144:	b	2168 <d_print_comp_inner+0x1598>
    2148:	ldr	x0, [x19, #256]
    214c:	add	x1, x0, #0x1
    2150:	str	x1, [x19, #256]
    2154:	strb	w23, [x19, x0]
    2158:	strb	w23, [x19, #264]
    215c:	add	x21, x21, #0x1
    2160:	cmp	x21, x24
    2164:	b.eq	21a4 <d_print_comp_inner+0x15d4>  // b.none
    2168:	ldrb	w23, [x21]
    216c:	ldr	x0, [x19, #256]
    2170:	cmp	x0, #0xff
    2174:	b.ne	2148 <d_print_comp_inner+0x1578>  // b.any
    2178:	strb	wzr, [x19, #255]
    217c:	ldr	x3, [x19, #272]
    2180:	ldr	x2, [x19, #280]
    2184:	mov	x1, x25
    2188:	mov	x0, x19
    218c:	blr	x3
    2190:	str	xzr, [x19, #256]
    2194:	ldr	x0, [x19, #320]
    2198:	add	x0, x0, #0x1
    219c:	str	x0, [x19, #320]
    21a0:	b	2148 <d_print_comp_inner+0x1578>
    21a4:	ldp	x25, x26, [sp, #64]
    21a8:	ldr	x2, [x22, #8]
    21ac:	mov	w1, w20
    21b0:	mov	x0, x19
    21b4:	bl	5050 <d_print_comp>
    21b8:	ldp	x21, x22, [sp, #32]
    21bc:	ldp	x23, x24, [sp, #48]
    21c0:	b	4f58 <d_print_comp_inner+0x4388>
    21c4:	stp	x25, x26, [sp, #64]
    21c8:	adrp	x0, 0 <is_fnqual_component_type>
    21cc:	add	x0, x0, #0x0
    21d0:	bl	0 <__asan_internal_strlen>
    21d4:	cbz	x0, 2248 <d_print_comp_inner+0x1678>
    21d8:	adrp	x21, 0 <is_fnqual_component_type>
    21dc:	add	x21, x21, #0x0
    21e0:	add	x24, x0, x21
    21e4:	mov	x25, #0xff                  	// #255
    21e8:	b	220c <d_print_comp_inner+0x163c>
    21ec:	ldr	x0, [x19, #256]
    21f0:	add	x1, x0, #0x1
    21f4:	str	x1, [x19, #256]
    21f8:	strb	w23, [x19, x0]
    21fc:	strb	w23, [x19, #264]
    2200:	add	x21, x21, #0x1
    2204:	cmp	x24, x21
    2208:	b.eq	2248 <d_print_comp_inner+0x1678>  // b.none
    220c:	ldrb	w23, [x21]
    2210:	ldr	x0, [x19, #256]
    2214:	cmp	x0, #0xff
    2218:	b.ne	21ec <d_print_comp_inner+0x161c>  // b.any
    221c:	strb	wzr, [x19, #255]
    2220:	ldr	x3, [x19, #272]
    2224:	ldr	x2, [x19, #280]
    2228:	mov	x1, x25
    222c:	mov	x0, x19
    2230:	blr	x3
    2234:	str	xzr, [x19, #256]
    2238:	ldr	x0, [x19, #320]
    223c:	add	x0, x0, #0x1
    2240:	str	x0, [x19, #320]
    2244:	b	21ec <d_print_comp_inner+0x161c>
    2248:	ldr	x2, [x22, #16]
    224c:	mov	w1, w20
    2250:	mov	x0, x19
    2254:	bl	5050 <d_print_comp>
    2258:	adrp	x0, 0 <is_fnqual_component_type>
    225c:	add	x0, x0, #0x0
    2260:	bl	0 <__asan_internal_strlen>
    2264:	cbz	x0, 22d8 <d_print_comp_inner+0x1708>
    2268:	adrp	x21, 0 <is_fnqual_component_type>
    226c:	add	x21, x21, #0x0
    2270:	add	x24, x0, x21
    2274:	mov	x25, #0xff                  	// #255
    2278:	b	229c <d_print_comp_inner+0x16cc>
    227c:	ldr	x0, [x19, #256]
    2280:	add	x1, x0, #0x1
    2284:	str	x1, [x19, #256]
    2288:	strb	w23, [x19, x0]
    228c:	strb	w23, [x19, #264]
    2290:	add	x21, x21, #0x1
    2294:	cmp	x24, x21
    2298:	b.eq	22d8 <d_print_comp_inner+0x1708>  // b.none
    229c:	ldrb	w23, [x21]
    22a0:	ldr	x0, [x19, #256]
    22a4:	cmp	x0, #0xff
    22a8:	b.ne	227c <d_print_comp_inner+0x16ac>  // b.any
    22ac:	strb	wzr, [x19, #255]
    22b0:	ldr	x3, [x19, #272]
    22b4:	ldr	x2, [x19, #280]
    22b8:	mov	x1, x25
    22bc:	mov	x0, x19
    22c0:	blr	x3
    22c4:	str	xzr, [x19, #256]
    22c8:	ldr	x0, [x19, #320]
    22cc:	add	x0, x0, #0x1
    22d0:	str	x0, [x19, #320]
    22d4:	b	227c <d_print_comp_inner+0x16ac>
    22d8:	ldr	x2, [x22, #8]
    22dc:	mov	w1, w20
    22e0:	mov	x0, x19
    22e4:	bl	5050 <d_print_comp>
    22e8:	ldp	x21, x22, [sp, #32]
    22ec:	ldp	x23, x24, [sp, #48]
    22f0:	ldp	x25, x26, [sp, #64]
    22f4:	b	4f58 <d_print_comp_inner+0x4388>
    22f8:	adrp	x0, 0 <is_fnqual_component_type>
    22fc:	add	x0, x0, #0x0
    2300:	bl	0 <__asan_internal_strlen>
    2304:	cbz	x0, 2380 <d_print_comp_inner+0x17b0>
    2308:	stp	x25, x26, [sp, #64]
    230c:	adrp	x21, 0 <is_fnqual_component_type>
    2310:	add	x21, x21, #0x0
    2314:	add	x24, x0, x21
    2318:	mov	x25, #0xff                  	// #255
    231c:	b	2340 <d_print_comp_inner+0x1770>
    2320:	ldr	x0, [x19, #256]
    2324:	add	x1, x0, #0x1
    2328:	str	x1, [x19, #256]
    232c:	strb	w23, [x19, x0]
    2330:	strb	w23, [x19, #264]
    2334:	add	x21, x21, #0x1
    2338:	cmp	x24, x21
    233c:	b.eq	237c <d_print_comp_inner+0x17ac>  // b.none
    2340:	ldrb	w23, [x21]
    2344:	ldr	x0, [x19, #256]
    2348:	cmp	x0, #0xff
    234c:	b.ne	2320 <d_print_comp_inner+0x1750>  // b.any
    2350:	strb	wzr, [x19, #255]
    2354:	ldr	x3, [x19, #272]
    2358:	ldr	x2, [x19, #280]
    235c:	mov	x1, x25
    2360:	mov	x0, x19
    2364:	blr	x3
    2368:	str	xzr, [x19, #256]
    236c:	ldr	x0, [x19, #320]
    2370:	add	x0, x0, #0x1
    2374:	str	x0, [x19, #320]
    2378:	b	2320 <d_print_comp_inner+0x1750>
    237c:	ldp	x25, x26, [sp, #64]
    2380:	ldr	x2, [x22, #8]
    2384:	mov	w1, w20
    2388:	mov	x0, x19
    238c:	bl	5050 <d_print_comp>
    2390:	ldp	x21, x22, [sp, #32]
    2394:	ldp	x23, x24, [sp, #48]
    2398:	b	4f58 <d_print_comp_inner+0x4388>
    239c:	adrp	x0, 0 <is_fnqual_component_type>
    23a0:	add	x0, x0, #0x0
    23a4:	bl	0 <__asan_internal_strlen>
    23a8:	cbz	x0, 2424 <d_print_comp_inner+0x1854>
    23ac:	stp	x25, x26, [sp, #64]
    23b0:	adrp	x21, 0 <is_fnqual_component_type>
    23b4:	add	x21, x21, #0x0
    23b8:	add	x24, x0, x21
    23bc:	mov	x25, #0xff                  	// #255
    23c0:	b	23e4 <d_print_comp_inner+0x1814>
    23c4:	ldr	x0, [x19, #256]
    23c8:	add	x1, x0, #0x1
    23cc:	str	x1, [x19, #256]
    23d0:	strb	w23, [x19, x0]
    23d4:	strb	w23, [x19, #264]
    23d8:	add	x21, x21, #0x1
    23dc:	cmp	x21, x24
    23e0:	b.eq	2420 <d_print_comp_inner+0x1850>  // b.none
    23e4:	ldrb	w23, [x21]
    23e8:	ldr	x0, [x19, #256]
    23ec:	cmp	x0, #0xff
    23f0:	b.ne	23c4 <d_print_comp_inner+0x17f4>  // b.any
    23f4:	strb	wzr, [x19, #255]
    23f8:	ldr	x3, [x19, #272]
    23fc:	ldr	x2, [x19, #280]
    2400:	mov	x1, x25
    2404:	mov	x0, x19
    2408:	blr	x3
    240c:	str	xzr, [x19, #256]
    2410:	ldr	x0, [x19, #320]
    2414:	add	x0, x0, #0x1
    2418:	str	x0, [x19, #320]
    241c:	b	23c4 <d_print_comp_inner+0x17f4>
    2420:	ldp	x25, x26, [sp, #64]
    2424:	ldr	x2, [x22, #8]
    2428:	mov	w1, w20
    242c:	mov	x0, x19
    2430:	bl	5050 <d_print_comp>
    2434:	ldp	x21, x22, [sp, #32]
    2438:	ldp	x23, x24, [sp, #48]
    243c:	b	4f58 <d_print_comp_inner+0x4388>
    2440:	adrp	x0, 0 <is_fnqual_component_type>
    2444:	add	x0, x0, #0x0
    2448:	bl	0 <__asan_internal_strlen>
    244c:	cbz	x0, 24c8 <d_print_comp_inner+0x18f8>
    2450:	stp	x25, x26, [sp, #64]
    2454:	adrp	x21, 0 <is_fnqual_component_type>
    2458:	add	x21, x21, #0x0
    245c:	add	x24, x0, x21
    2460:	mov	x25, #0xff                  	// #255
    2464:	b	2488 <d_print_comp_inner+0x18b8>
    2468:	ldr	x0, [x19, #256]
    246c:	add	x1, x0, #0x1
    2470:	str	x1, [x19, #256]
    2474:	strb	w23, [x19, x0]
    2478:	strb	w23, [x19, #264]
    247c:	add	x21, x21, #0x1
    2480:	cmp	x21, x24
    2484:	b.eq	24c4 <d_print_comp_inner+0x18f4>  // b.none
    2488:	ldrb	w23, [x21]
    248c:	ldr	x0, [x19, #256]
    2490:	cmp	x0, #0xff
    2494:	b.ne	2468 <d_print_comp_inner+0x1898>  // b.any
    2498:	strb	wzr, [x19, #255]
    249c:	ldr	x3, [x19, #272]
    24a0:	ldr	x2, [x19, #280]
    24a4:	mov	x1, x25
    24a8:	mov	x0, x19
    24ac:	blr	x3
    24b0:	str	xzr, [x19, #256]
    24b4:	ldr	x0, [x19, #320]
    24b8:	add	x0, x0, #0x1
    24bc:	str	x0, [x19, #320]
    24c0:	b	2468 <d_print_comp_inner+0x1898>
    24c4:	ldp	x25, x26, [sp, #64]
    24c8:	ldr	x2, [x22, #8]
    24cc:	mov	w1, w20
    24d0:	mov	x0, x19
    24d4:	bl	5050 <d_print_comp>
    24d8:	ldp	x21, x22, [sp, #32]
    24dc:	ldp	x23, x24, [sp, #48]
    24e0:	b	4f58 <d_print_comp_inner+0x4388>
    24e4:	ldr	x1, [x22, #8]
    24e8:	ldrsw	x0, [x22, #16]
    24ec:	cbz	x0, 4f88 <d_print_comp_inner+0x43b8>
    24f0:	mov	x20, x1
    24f4:	add	x22, x1, x0
    24f8:	mov	x23, #0xff                  	// #255
    24fc:	b	2520 <d_print_comp_inner+0x1950>
    2500:	ldr	x0, [x19, #256]
    2504:	add	x1, x0, #0x1
    2508:	str	x1, [x19, #256]
    250c:	strb	w21, [x19, x0]
    2510:	strb	w21, [x19, #264]
    2514:	add	x20, x20, #0x1
    2518:	cmp	x22, x20
    251c:	b.eq	255c <d_print_comp_inner+0x198c>  // b.none
    2520:	ldrb	w21, [x20]
    2524:	ldr	x0, [x19, #256]
    2528:	cmp	x0, #0xff
    252c:	b.ne	2500 <d_print_comp_inner+0x1930>  // b.any
    2530:	strb	wzr, [x19, #255]
    2534:	ldr	x3, [x19, #272]
    2538:	ldr	x2, [x19, #280]
    253c:	mov	x1, x23
    2540:	mov	x0, x19
    2544:	blr	x3
    2548:	str	xzr, [x19, #256]
    254c:	ldr	x0, [x19, #320]
    2550:	add	x0, x0, #0x1
    2554:	str	x0, [x19, #320]
    2558:	b	2500 <d_print_comp_inner+0x1930>
    255c:	ldp	x21, x22, [sp, #32]
    2560:	ldp	x23, x24, [sp, #48]
    2564:	b	4f58 <d_print_comp_inner+0x4388>
    2568:	ldr	x1, [x19, #296]
    256c:	cbnz	x1, 257c <d_print_comp_inner+0x19ac>
    2570:	b	4ed4 <d_print_comp_inner+0x4304>
    2574:	ldr	x1, [x1]
    2578:	cbz	x1, 4ed4 <d_print_comp_inner+0x4304>
    257c:	ldr	w2, [x1, #16]
    2580:	cbnz	w2, 2574 <d_print_comp_inner+0x19a4>
    2584:	ldr	x3, [x1, #8]
    2588:	ldr	w3, [x3]
    258c:	sub	w4, w3, #0x19
    2590:	cmp	w4, #0x2
    2594:	b.hi	4ec8 <d_print_comp_inner+0x42f8>  // b.pmore
    2598:	cmp	w0, w3
    259c:	b.ne	2574 <d_print_comp_inner+0x19a4>  // b.any
    25a0:	ldr	x2, [x22, #8]
    25a4:	mov	w1, w20
    25a8:	mov	x0, x19
    25ac:	bl	5050 <d_print_comp>
    25b0:	ldp	x21, x22, [sp, #32]
    25b4:	ldp	x23, x24, [sp, #48]
    25b8:	b	4f58 <d_print_comp_inner+0x4388>
    25bc:	ldr	x0, [x22, #8]
    25c0:	ldr	w24, [x19, #312]
    25c4:	cbnz	w24, 25d8 <d_print_comp_inner+0x1a08>
    25c8:	ldr	w1, [x0]
    25cc:	mov	w21, w24
    25d0:	cmp	w1, #0x5
    25d4:	b.eq	2600 <d_print_comp_inner+0x1a30>  // b.none
    25d8:	ldr	w1, [x0]
    25dc:	cmp	w1, #0x23
    25e0:	b.eq	4ed0 <d_print_comp_inner+0x4300>  // b.none
    25e4:	ldr	w2, [x22]
    25e8:	cmp	w1, w2
    25ec:	b.eq	4efc <d_print_comp_inner+0x432c>  // b.none
    25f0:	cmp	w1, #0x24
    25f4:	b.ne	4ed4 <d_print_comp_inner+0x4304>  // b.any
    25f8:	ldr	x2, [x0, #8]
    25fc:	b	272c <d_print_comp_inner+0x1b5c>
    2600:	ldr	w5, [x19, #344]
    2604:	cmp	w5, #0x0
    2608:	b.le	2638 <d_print_comp_inner+0x1a68>
    260c:	ldr	x1, [x19, #336]
    2610:	sub	w3, w5, #0x1
    2614:	add	x2, x1, #0x10
    2618:	add	x3, x2, x3, lsl #4
    261c:	mov	x4, x1
    2620:	ldr	x2, [x1]
    2624:	cmp	x0, x2
    2628:	b.eq	4f04 <d_print_comp_inner+0x4334>  // b.none
    262c:	add	x1, x1, #0x10
    2630:	cmp	x3, x1
    2634:	b.ne	261c <d_print_comp_inner+0x1a4c>  // b.any
    2638:	ldr	w1, [x19, #348]
    263c:	cmp	w1, w5
    2640:	b.le	26f4 <d_print_comp_inner+0x1b24>
    2644:	sbfiz	x3, x5, #4, #32
    2648:	ldr	x2, [x19, #336]
    264c:	add	x1, x2, w5, sxtw #4
    2650:	add	w5, w5, #0x1
    2654:	str	w5, [x19, #344]
    2658:	str	x0, [x2, x3]
    265c:	add	x1, x1, #0x8
    2660:	ldr	x2, [x19, #288]
    2664:	cbz	x2, 26a0 <d_print_comp_inner+0x1ad0>
    2668:	ldr	w4, [x19, #360]
    266c:	ldr	w3, [x19, #364]
    2670:	cmp	w4, w3
    2674:	b.ge	2708 <d_print_comp_inner+0x1b38>  // b.tcont
    2678:	ldr	x3, [x19, #352]
    267c:	add	x3, x3, w4, sxtw #4
    2680:	add	w4, w4, #0x1
    2684:	str	w4, [x19, #360]
    2688:	ldr	x4, [x2, #8]
    268c:	str	x4, [x3, #8]
    2690:	str	x3, [x1]
    2694:	mov	x1, x3
    2698:	ldr	x2, [x2]
    269c:	cbnz	x2, 2668 <d_print_comp_inner+0x1a98>
    26a0:	str	xzr, [x1]
    26a4:	ldr	w1, [x19, #304]
    26a8:	cbnz	w1, 271c <d_print_comp_inner+0x1b4c>
    26ac:	mov	x1, x0
    26b0:	mov	x0, x19
    26b4:	bl	8d4 <d_lookup_template_argument>
    26b8:	cbz	x0, 26e0 <d_print_comp_inner+0x1b10>
    26bc:	mov	w21, w24
    26c0:	ldr	w1, [x0]
    26c4:	cmp	w1, #0x2f
    26c8:	b.ne	25d8 <d_print_comp_inner+0x1a08>  // b.any
    26cc:	ldr	w1, [x19, #316]
    26d0:	bl	89c <d_index_template_argument>
    26d4:	cbnz	x0, 25d8 <d_print_comp_inner+0x1a08>
    26d8:	cbz	w21, 26e0 <d_print_comp_inner+0x1b10>
    26dc:	str	x23, [x19, #288]
    26e0:	mov	w0, #0x1                   	// #1
    26e4:	str	w0, [x19, #304]
    26e8:	ldp	x21, x22, [sp, #32]
    26ec:	ldp	x23, x24, [sp, #48]
    26f0:	b	4f58 <d_print_comp_inner+0x4388>
    26f4:	mov	w0, #0x1                   	// #1
    26f8:	str	w0, [x19, #304]
    26fc:	ldp	x21, x22, [sp, #32]
    2700:	ldp	x23, x24, [sp, #48]
    2704:	b	4f58 <d_print_comp_inner+0x4388>
    2708:	mov	w0, #0x1                   	// #1
    270c:	str	w0, [x19, #304]
    2710:	ldp	x21, x22, [sp, #32]
    2714:	ldp	x23, x24, [sp, #48]
    2718:	b	4f58 <d_print_comp_inner+0x4388>
    271c:	ldp	x21, x22, [sp, #32]
    2720:	ldp	x23, x24, [sp, #48]
    2724:	b	4f58 <d_print_comp_inner+0x4388>
    2728:	mov	x2, #0x0                   	// #0
    272c:	ldr	x0, [x19, #296]
    2730:	str	x0, [sp, #128]
    2734:	add	x0, sp, #0x80
    2738:	str	x0, [x19, #296]
    273c:	str	x22, [sp, #136]
    2740:	str	wzr, [sp, #144]
    2744:	ldr	x0, [x19, #288]
    2748:	str	x0, [sp, #152]
    274c:	cbz	x2, 4ef4 <d_print_comp_inner+0x4324>
    2750:	mov	w1, w20
    2754:	mov	x0, x19
    2758:	bl	5050 <d_print_comp>
    275c:	ldr	w0, [sp, #144]
    2760:	cbz	w0, 2780 <d_print_comp_inner+0x1bb0>
    2764:	ldr	x0, [sp, #128]
    2768:	str	x0, [x19, #296]
    276c:	cbz	w21, 4f94 <d_print_comp_inner+0x43c4>
    2770:	str	x23, [x19, #288]
    2774:	ldp	x21, x22, [sp, #32]
    2778:	ldp	x23, x24, [sp, #48]
    277c:	b	4f58 <d_print_comp_inner+0x4388>
    2780:	mov	x2, x22
    2784:	mov	w1, w20
    2788:	mov	x0, x19
    278c:	bl	50ec <d_print_mod>
    2790:	b	2764 <d_print_comp_inner+0x1b94>
    2794:	tbnz	w20, #2, 2820 <d_print_comp_inner+0x1c50>
    2798:	ldr	x0, [x22, #8]
    279c:	ldr	x22, [x0]
    27a0:	ldrsw	x0, [x0, #8]
    27a4:	cbz	x0, 4fa0 <d_print_comp_inner+0x43d0>
    27a8:	mov	x20, x22
    27ac:	add	x22, x22, x0
    27b0:	mov	x23, #0xff                  	// #255
    27b4:	b	27d8 <d_print_comp_inner+0x1c08>
    27b8:	ldr	x0, [x19, #256]
    27bc:	add	x1, x0, #0x1
    27c0:	str	x1, [x19, #256]
    27c4:	strb	w21, [x19, x0]
    27c8:	strb	w21, [x19, #264]
    27cc:	add	x20, x20, #0x1
    27d0:	cmp	x20, x22
    27d4:	b.eq	2814 <d_print_comp_inner+0x1c44>  // b.none
    27d8:	ldrb	w21, [x20]
    27dc:	ldr	x0, [x19, #256]
    27e0:	cmp	x0, #0xff
    27e4:	b.ne	27b8 <d_print_comp_inner+0x1be8>  // b.any
    27e8:	strb	wzr, [x19, #255]
    27ec:	ldr	x3, [x19, #272]
    27f0:	ldr	x2, [x19, #280]
    27f4:	mov	x1, x23
    27f8:	mov	x0, x19
    27fc:	blr	x3
    2800:	str	xzr, [x19, #256]
    2804:	ldr	x0, [x19, #320]
    2808:	add	x0, x0, #0x1
    280c:	str	x0, [x19, #320]
    2810:	b	27b8 <d_print_comp_inner+0x1be8>
    2814:	ldp	x21, x22, [sp, #32]
    2818:	ldp	x23, x24, [sp, #48]
    281c:	b	4f58 <d_print_comp_inner+0x4388>
    2820:	ldr	x0, [x22, #8]
    2824:	ldr	x22, [x0, #16]
    2828:	ldrsw	x0, [x0, #24]
    282c:	cbz	x0, 4fac <d_print_comp_inner+0x43dc>
    2830:	mov	x20, x22
    2834:	add	x22, x22, x0
    2838:	mov	x23, #0xff                  	// #255
    283c:	b	2860 <d_print_comp_inner+0x1c90>
    2840:	ldr	x0, [x19, #256]
    2844:	add	x1, x0, #0x1
    2848:	str	x1, [x19, #256]
    284c:	strb	w21, [x19, x0]
    2850:	strb	w21, [x19, #264]
    2854:	add	x20, x20, #0x1
    2858:	cmp	x22, x20
    285c:	b.eq	289c <d_print_comp_inner+0x1ccc>  // b.none
    2860:	ldrb	w21, [x20]
    2864:	ldr	x0, [x19, #256]
    2868:	cmp	x0, #0xff
    286c:	b.ne	2840 <d_print_comp_inner+0x1c70>  // b.any
    2870:	strb	wzr, [x19, #255]
    2874:	ldr	x3, [x19, #272]
    2878:	ldr	x2, [x19, #280]
    287c:	mov	x1, x23
    2880:	mov	x0, x19
    2884:	blr	x3
    2888:	str	xzr, [x19, #256]
    288c:	ldr	x0, [x19, #320]
    2890:	add	x0, x0, #0x1
    2894:	str	x0, [x19, #320]
    2898:	b	2840 <d_print_comp_inner+0x1c70>
    289c:	ldp	x21, x22, [sp, #32]
    28a0:	ldp	x23, x24, [sp, #48]
    28a4:	b	4f58 <d_print_comp_inner+0x4388>
    28a8:	ldr	x2, [x22, #8]
    28ac:	mov	w1, w20
    28b0:	mov	x0, x19
    28b4:	bl	5050 <d_print_comp>
    28b8:	ldp	x21, x22, [sp, #32]
    28bc:	ldp	x23, x24, [sp, #48]
    28c0:	b	4f58 <d_print_comp_inner+0x4388>
    28c4:	and	w21, w20, #0x20
    28c8:	tbnz	w20, #5, 28e8 <d_print_comp_inner+0x1d18>
    28cc:	ldr	x0, [x22, #8]
    28d0:	cbz	x0, 29b8 <d_print_comp_inner+0x1de8>
    28d4:	tbz	w20, #6, 2920 <d_print_comp_inner+0x1d50>
    28d8:	cbz	w21, 29b8 <d_print_comp_inner+0x1de8>
    28dc:	ldp	x21, x22, [sp, #32]
    28e0:	ldp	x23, x24, [sp, #48]
    28e4:	b	4f58 <d_print_comp_inner+0x4388>
    28e8:	and	w23, w20, #0xffffff9f
    28ec:	ldr	x3, [x19, #296]
    28f0:	mov	x2, x22
    28f4:	mov	w1, w23
    28f8:	mov	x0, x19
    28fc:	bl	5bb0 <d_print_function_type>
    2900:	ldr	x2, [x22, #8]
    2904:	cbz	x2, 28d8 <d_print_comp_inner+0x1d08>
    2908:	mov	w1, w23
    290c:	mov	x0, x19
    2910:	bl	5050 <d_print_comp>
    2914:	ldp	x21, x22, [sp, #32]
    2918:	ldp	x23, x24, [sp, #48]
    291c:	b	4f58 <d_print_comp_inner+0x4388>
    2920:	ldr	x0, [x19, #296]
    2924:	str	x0, [sp, #128]
    2928:	add	x0, sp, #0x80
    292c:	str	x0, [x19, #296]
    2930:	str	x22, [sp, #136]
    2934:	str	wzr, [sp, #144]
    2938:	ldr	x0, [x19, #288]
    293c:	str	x0, [sp, #152]
    2940:	ldr	x2, [x22, #8]
    2944:	and	w1, w20, #0xffffff9f
    2948:	mov	x0, x19
    294c:	bl	5050 <d_print_comp>
    2950:	ldr	x0, [sp, #128]
    2954:	str	x0, [x19, #296]
    2958:	ldr	w0, [sp, #144]
    295c:	cbnz	w0, 4fb8 <d_print_comp_inner+0x43e8>
    2960:	cbnz	w21, 28d8 <d_print_comp_inner+0x1d08>
    2964:	ldr	x0, [x19, #256]
    2968:	cmp	x0, #0xff
    296c:	b.eq	298c <d_print_comp_inner+0x1dbc>  // b.none
    2970:	ldr	x1, [x19, #256]
    2974:	add	x0, x1, #0x1
    2978:	str	x0, [x19, #256]
    297c:	mov	w0, #0x20                  	// #32
    2980:	strb	w0, [x19, x1]
    2984:	strb	w0, [x19, #264]
    2988:	b	28d8 <d_print_comp_inner+0x1d08>
    298c:	strb	wzr, [x19, #255]
    2990:	ldr	x3, [x19, #272]
    2994:	ldr	x2, [x19, #280]
    2998:	mov	x1, #0xff                  	// #255
    299c:	mov	x0, x19
    29a0:	blr	x3
    29a4:	str	xzr, [x19, #256]
    29a8:	ldr	x0, [x19, #320]
    29ac:	add	x0, x0, #0x1
    29b0:	str	x0, [x19, #320]
    29b4:	b	2970 <d_print_comp_inner+0x1da0>
    29b8:	ldr	x3, [x19, #296]
    29bc:	mov	x2, x22
    29c0:	and	w1, w20, #0xffffff9f
    29c4:	mov	x0, x19
    29c8:	bl	5bb0 <d_print_function_type>
    29cc:	ldp	x21, x22, [sp, #32]
    29d0:	ldp	x23, x24, [sp, #48]
    29d4:	b	4f58 <d_print_comp_inner+0x4388>
    29d8:	ldr	x23, [x19, #296]
    29dc:	str	x23, [sp, #128]
    29e0:	add	x0, sp, #0x80
    29e4:	str	x0, [x19, #296]
    29e8:	str	x22, [sp, #136]
    29ec:	str	wzr, [sp, #144]
    29f0:	ldr	x0, [x19, #288]
    29f4:	str	x0, [sp, #152]
    29f8:	mov	x0, x23
    29fc:	mov	w21, #0x1                   	// #1
    2a00:	add	x3, sp, #0x80
    2a04:	mov	w6, w21
    2a08:	cbnz	x23, 2a50 <d_print_comp_inner+0x1e80>
    2a0c:	ldr	x2, [x22, #16]
    2a10:	mov	w1, w20
    2a14:	mov	x0, x19
    2a18:	bl	5050 <d_print_comp>
    2a1c:	str	xzr, [x19, #296]
    2a20:	ldr	w0, [sp, #144]
    2a24:	cbz	w0, 2af4 <d_print_comp_inner+0x1f24>
    2a28:	ldp	x21, x22, [sp, #32]
    2a2c:	ldp	x23, x24, [sp, #48]
    2a30:	b	4f58 <d_print_comp_inner+0x4388>
    2a34:	mov	w0, #0x1                   	// #1
    2a38:	str	w0, [x19, #304]
    2a3c:	ldp	x21, x22, [sp, #32]
    2a40:	ldp	x23, x24, [sp, #48]
    2a44:	b	4f58 <d_print_comp_inner+0x4388>
    2a48:	ldr	x0, [x0]
    2a4c:	cbz	x0, 2aa4 <d_print_comp_inner+0x1ed4>
    2a50:	ldr	x1, [x0, #8]
    2a54:	ldr	w1, [x1]
    2a58:	sub	w1, w1, #0x19
    2a5c:	cmp	w1, #0x2
    2a60:	b.hi	2aa4 <d_print_comp_inner+0x1ed4>  // b.pmore
    2a64:	ldr	w1, [x0, #16]
    2a68:	cbnz	w1, 2a48 <d_print_comp_inner+0x1e78>
    2a6c:	cmp	w21, #0x3
    2a70:	b.hi	2a34 <d_print_comp_inner+0x1e64>  // b.pmore
    2a74:	ubfiz	x2, x21, #5, #32
    2a78:	add	x1, x3, x2
    2a7c:	ldp	x4, x5, [x0]
    2a80:	stp	x4, x5, [x1]
    2a84:	ldp	x4, x5, [x0, #16]
    2a88:	stp	x4, x5, [x1, #16]
    2a8c:	ldr	x4, [x19, #296]
    2a90:	str	x4, [x3, x2]
    2a94:	str	x1, [x19, #296]
    2a98:	str	w6, [x0, #16]
    2a9c:	add	w21, w21, #0x1
    2aa0:	b	2a48 <d_print_comp_inner+0x1e78>
    2aa4:	ldr	x2, [x22, #16]
    2aa8:	mov	w1, w20
    2aac:	mov	x0, x19
    2ab0:	bl	5050 <d_print_comp>
    2ab4:	str	x23, [x19, #296]
    2ab8:	ldr	w0, [sp, #144]
    2abc:	cbnz	w0, 4fc4 <d_print_comp_inner+0x43f4>
    2ac0:	cmp	w21, #0x1
    2ac4:	b.ls	2af4 <d_print_comp_inner+0x1f24>  // b.plast
    2ac8:	sub	w23, w21, #0x1
    2acc:	add	x0, sp, #0x80
    2ad0:	add	x23, x0, x23, lsl #5
    2ad4:	sub	w21, w21, #0x1
    2ad8:	ldr	x2, [x23, #8]
    2adc:	mov	w1, w20
    2ae0:	mov	x0, x19
    2ae4:	bl	50ec <d_print_mod>
    2ae8:	sub	x23, x23, #0x20
    2aec:	cmp	w21, #0x1
    2af0:	b.ne	2ad4 <d_print_comp_inner+0x1f04>  // b.any
    2af4:	ldr	x3, [x19, #296]
    2af8:	mov	x2, x22
    2afc:	mov	w1, w20
    2b00:	mov	x0, x19
    2b04:	bl	623c <d_print_array_type>
    2b08:	ldp	x21, x22, [sp, #32]
    2b0c:	ldp	x23, x24, [sp, #48]
    2b10:	b	4f58 <d_print_comp_inner+0x4388>
    2b14:	ldr	x0, [x19, #296]
    2b18:	str	x0, [sp, #128]
    2b1c:	add	x0, sp, #0x80
    2b20:	str	x0, [x19, #296]
    2b24:	str	x22, [sp, #136]
    2b28:	str	wzr, [sp, #144]
    2b2c:	ldr	x0, [x19, #288]
    2b30:	str	x0, [sp, #152]
    2b34:	ldr	x2, [x22, #16]
    2b38:	mov	w1, w20
    2b3c:	mov	x0, x19
    2b40:	bl	5050 <d_print_comp>
    2b44:	ldr	w0, [sp, #144]
    2b48:	cbz	w0, 2b60 <d_print_comp_inner+0x1f90>
    2b4c:	ldr	x0, [sp, #128]
    2b50:	str	x0, [x19, #296]
    2b54:	ldp	x21, x22, [sp, #32]
    2b58:	ldp	x23, x24, [sp, #48]
    2b5c:	b	4f58 <d_print_comp_inner+0x4388>
    2b60:	mov	x2, x22
    2b64:	mov	w1, w20
    2b68:	mov	x0, x19
    2b6c:	bl	50ec <d_print_mod>
    2b70:	b	2b4c <d_print_comp_inner+0x1f7c>
    2b74:	ldrsh	w0, [x22, #18]
    2b78:	cbnz	w0, 2bf4 <d_print_comp_inner+0x2024>
    2b7c:	ldr	x2, [x22, #8]
    2b80:	ldr	x1, [x2, #8]
    2b84:	adrp	x0, 188 <is_ctor_dtor_or_conversion+0x2c>
    2b88:	ldr	x0, [x0]
    2b8c:	add	x0, x0, #0x100
    2b90:	cmp	x1, x0
    2b94:	b.eq	2bc8 <d_print_comp_inner+0x1ff8>  // b.none
    2b98:	mov	w1, w20
    2b9c:	mov	x0, x19
    2ba0:	bl	5050 <d_print_comp>
    2ba4:	ldr	x0, [x19, #256]
    2ba8:	cmp	x0, #0xff
    2bac:	b.eq	2c80 <d_print_comp_inner+0x20b0>  // b.none
    2bb0:	ldr	x1, [x19, #256]
    2bb4:	add	x0, x1, #0x1
    2bb8:	str	x0, [x19, #256]
    2bbc:	mov	w0, #0x20                  	// #32
    2bc0:	strb	w0, [x19, x1]
    2bc4:	strb	w0, [x19, #264]
    2bc8:	ldrsh	w0, [x22, #16]
    2bcc:	cbz	w0, 2d14 <d_print_comp_inner+0x2144>
    2bd0:	adrp	x0, 0 <is_fnqual_component_type>
    2bd4:	add	x0, x0, #0x0
    2bd8:	bl	0 <__asan_internal_strlen>
    2bdc:	cbz	x0, 4fd0 <d_print_comp_inner+0x4400>
    2be0:	adrp	x20, 0 <is_fnqual_component_type>
    2be4:	add	x20, x20, #0x0
    2be8:	add	x22, x0, x20
    2bec:	mov	x23, #0xff                  	// #255
    2bf0:	b	2ccc <d_print_comp_inner+0x20fc>
    2bf4:	adrp	x0, 0 <is_fnqual_component_type>
    2bf8:	add	x0, x0, #0x0
    2bfc:	bl	0 <__asan_internal_strlen>
    2c00:	cbz	x0, 2b7c <d_print_comp_inner+0x1fac>
    2c04:	stp	x25, x26, [sp, #64]
    2c08:	adrp	x21, 0 <is_fnqual_component_type>
    2c0c:	add	x21, x21, #0x0
    2c10:	add	x24, x0, x21
    2c14:	mov	x25, #0xff                  	// #255
    2c18:	b	2c3c <d_print_comp_inner+0x206c>
    2c1c:	ldr	x0, [x19, #256]
    2c20:	add	x1, x0, #0x1
    2c24:	str	x1, [x19, #256]
    2c28:	strb	w23, [x19, x0]
    2c2c:	strb	w23, [x19, #264]
    2c30:	add	x21, x21, #0x1
    2c34:	cmp	x21, x24
    2c38:	b.eq	2c78 <d_print_comp_inner+0x20a8>  // b.none
    2c3c:	ldrb	w23, [x21]
    2c40:	ldr	x0, [x19, #256]
    2c44:	cmp	x0, #0xff
    2c48:	b.ne	2c1c <d_print_comp_inner+0x204c>  // b.any
    2c4c:	strb	wzr, [x19, #255]
    2c50:	ldr	x3, [x19, #272]
    2c54:	ldr	x2, [x19, #280]
    2c58:	mov	x1, x25
    2c5c:	mov	x0, x19
    2c60:	blr	x3
    2c64:	str	xzr, [x19, #256]
    2c68:	ldr	x0, [x19, #320]
    2c6c:	add	x0, x0, #0x1
    2c70:	str	x0, [x19, #320]
    2c74:	b	2c1c <d_print_comp_inner+0x204c>
    2c78:	ldp	x25, x26, [sp, #64]
    2c7c:	b	2b7c <d_print_comp_inner+0x1fac>
    2c80:	strb	wzr, [x19, #255]
    2c84:	ldr	x3, [x19, #272]
    2c88:	ldr	x2, [x19, #280]
    2c8c:	mov	x1, #0xff                  	// #255
    2c90:	mov	x0, x19
    2c94:	blr	x3
    2c98:	str	xzr, [x19, #256]
    2c9c:	ldr	x0, [x19, #320]
    2ca0:	add	x0, x0, #0x1
    2ca4:	str	x0, [x19, #320]
    2ca8:	b	2bb0 <d_print_comp_inner+0x1fe0>
    2cac:	ldr	x0, [x19, #256]
    2cb0:	add	x1, x0, #0x1
    2cb4:	str	x1, [x19, #256]
    2cb8:	strb	w21, [x19, x0]
    2cbc:	strb	w21, [x19, #264]
    2cc0:	add	x20, x20, #0x1
    2cc4:	cmp	x20, x22
    2cc8:	b.eq	2d08 <d_print_comp_inner+0x2138>  // b.none
    2ccc:	ldrb	w21, [x20]
    2cd0:	ldr	x0, [x19, #256]
    2cd4:	cmp	x0, #0xff
    2cd8:	b.ne	2cac <d_print_comp_inner+0x20dc>  // b.any
    2cdc:	strb	wzr, [x19, #255]
    2ce0:	ldr	x3, [x19, #272]
    2ce4:	ldr	x2, [x19, #280]
    2ce8:	mov	x1, x23
    2cec:	mov	x0, x19
    2cf0:	blr	x3
    2cf4:	str	xzr, [x19, #256]
    2cf8:	ldr	x0, [x19, #320]
    2cfc:	add	x0, x0, #0x1
    2d00:	str	x0, [x19, #320]
    2d04:	b	2cac <d_print_comp_inner+0x20dc>
    2d08:	ldp	x21, x22, [sp, #32]
    2d0c:	ldp	x23, x24, [sp, #48]
    2d10:	b	4f58 <d_print_comp_inner+0x4388>
    2d14:	adrp	x0, 0 <is_fnqual_component_type>
    2d18:	add	x0, x0, #0x0
    2d1c:	bl	0 <__asan_internal_strlen>
    2d20:	cbz	x0, 4fdc <d_print_comp_inner+0x440c>
    2d24:	adrp	x20, 0 <is_fnqual_component_type>
    2d28:	add	x20, x20, #0x0
    2d2c:	add	x22, x0, x20
    2d30:	mov	x23, #0xff                  	// #255
    2d34:	b	2d58 <d_print_comp_inner+0x2188>
    2d38:	ldr	x0, [x19, #256]
    2d3c:	add	x1, x0, #0x1
    2d40:	str	x1, [x19, #256]
    2d44:	strb	w21, [x19, x0]
    2d48:	strb	w21, [x19, #264]
    2d4c:	add	x20, x20, #0x1
    2d50:	cmp	x20, x22
    2d54:	b.eq	2d94 <d_print_comp_inner+0x21c4>  // b.none
    2d58:	ldrb	w21, [x20]
    2d5c:	ldr	x0, [x19, #256]
    2d60:	cmp	x0, #0xff
    2d64:	b.ne	2d38 <d_print_comp_inner+0x2168>  // b.any
    2d68:	strb	wzr, [x19, #255]
    2d6c:	ldr	x3, [x19, #272]
    2d70:	ldr	x2, [x19, #280]
    2d74:	mov	x1, x23
    2d78:	mov	x0, x19
    2d7c:	blr	x3
    2d80:	str	xzr, [x19, #256]
    2d84:	ldr	x0, [x19, #320]
    2d88:	add	x0, x0, #0x1
    2d8c:	str	x0, [x19, #320]
    2d90:	b	2d38 <d_print_comp_inner+0x2168>
    2d94:	ldp	x21, x22, [sp, #32]
    2d98:	ldp	x23, x24, [sp, #48]
    2d9c:	b	4f58 <d_print_comp_inner+0x4388>
    2da0:	ldr	x2, [x22, #8]
    2da4:	cbz	x2, 2db4 <d_print_comp_inner+0x21e4>
    2da8:	mov	w1, w20
    2dac:	mov	x0, x19
    2db0:	bl	5050 <d_print_comp>
    2db4:	ldr	x0, [x22, #16]
    2db8:	cbz	x0, 4fe8 <d_print_comp_inner+0x4418>
    2dbc:	ldr	x1, [x19, #256]
    2dc0:	cmp	x1, #0xfd
    2dc4:	b.ls	2dec <d_print_comp_inner+0x221c>  // b.plast
    2dc8:	strb	wzr, [x19, x1]
    2dcc:	ldr	x3, [x19, #272]
    2dd0:	ldr	x2, [x19, #280]
    2dd4:	mov	x0, x19
    2dd8:	blr	x3
    2ddc:	str	xzr, [x19, #256]
    2de0:	ldr	x0, [x19, #320]
    2de4:	add	x0, x0, #0x1
    2de8:	str	x0, [x19, #320]
    2dec:	adrp	x0, 0 <is_fnqual_component_type>
    2df0:	add	x0, x0, #0x0
    2df4:	bl	0 <__asan_internal_strlen>
    2df8:	cbz	x0, 2e74 <d_print_comp_inner+0x22a4>
    2dfc:	stp	x25, x26, [sp, #64]
    2e00:	adrp	x21, 0 <is_fnqual_component_type>
    2e04:	add	x21, x21, #0x0
    2e08:	add	x24, x0, x21
    2e0c:	mov	x25, #0xff                  	// #255
    2e10:	b	2e34 <d_print_comp_inner+0x2264>
    2e14:	ldr	x0, [x19, #256]
    2e18:	add	x1, x0, #0x1
    2e1c:	str	x1, [x19, #256]
    2e20:	strb	w23, [x19, x0]
    2e24:	strb	w23, [x19, #264]
    2e28:	add	x21, x21, #0x1
    2e2c:	cmp	x21, x24
    2e30:	b.eq	2e70 <d_print_comp_inner+0x22a0>  // b.none
    2e34:	ldrb	w23, [x21]
    2e38:	ldr	x0, [x19, #256]
    2e3c:	cmp	x0, #0xff
    2e40:	b.ne	2e14 <d_print_comp_inner+0x2244>  // b.any
    2e44:	strb	wzr, [x19, #255]
    2e48:	ldr	x3, [x19, #272]
    2e4c:	ldr	x2, [x19, #280]
    2e50:	mov	x1, x25
    2e54:	mov	x0, x19
    2e58:	blr	x3
    2e5c:	str	xzr, [x19, #256]
    2e60:	ldr	x0, [x19, #320]
    2e64:	add	x0, x0, #0x1
    2e68:	str	x0, [x19, #320]
    2e6c:	b	2e14 <d_print_comp_inner+0x2244>
    2e70:	ldp	x25, x26, [sp, #64]
    2e74:	ldr	x23, [x19, #256]
    2e78:	ldr	x21, [x19, #320]
    2e7c:	ldr	x2, [x22, #16]
    2e80:	mov	w1, w20
    2e84:	mov	x0, x19
    2e88:	bl	5050 <d_print_comp>
    2e8c:	ldr	x0, [x19, #320]
    2e90:	cmp	x0, x21
    2e94:	b.eq	2ea4 <d_print_comp_inner+0x22d4>  // b.none
    2e98:	ldp	x21, x22, [sp, #32]
    2e9c:	ldp	x23, x24, [sp, #48]
    2ea0:	b	4f58 <d_print_comp_inner+0x4388>
    2ea4:	ldr	x0, [x19, #256]
    2ea8:	cmp	x0, x23
    2eac:	b.eq	2ebc <d_print_comp_inner+0x22ec>  // b.none
    2eb0:	ldp	x21, x22, [sp, #32]
    2eb4:	ldp	x23, x24, [sp, #48]
    2eb8:	b	4f58 <d_print_comp_inner+0x4388>
    2ebc:	sub	x0, x0, #0x2
    2ec0:	str	x0, [x19, #256]
    2ec4:	ldp	x21, x22, [sp, #32]
    2ec8:	ldp	x23, x24, [sp, #48]
    2ecc:	b	4f58 <d_print_comp_inner+0x4388>
    2ed0:	ldr	x2, [x22, #8]
    2ed4:	ldr	x21, [x22, #16]
    2ed8:	cbz	x2, 2ee8 <d_print_comp_inner+0x2318>
    2edc:	mov	w1, w20
    2ee0:	mov	x0, x19
    2ee4:	bl	5050 <d_print_comp>
    2ee8:	ldr	x0, [x19, #256]
    2eec:	cmp	x0, #0xff
    2ef0:	b.eq	2f4c <d_print_comp_inner+0x237c>  // b.none
    2ef4:	ldr	x1, [x19, #256]
    2ef8:	add	x0, x1, #0x1
    2efc:	str	x0, [x19, #256]
    2f00:	mov	w0, #0x7b                  	// #123
    2f04:	strb	w0, [x19, x1]
    2f08:	strb	w0, [x19, #264]
    2f0c:	mov	x2, x21
    2f10:	mov	w1, w20
    2f14:	mov	x0, x19
    2f18:	bl	5050 <d_print_comp>
    2f1c:	ldr	x0, [x19, #256]
    2f20:	cmp	x0, #0xff
    2f24:	b.eq	2f78 <d_print_comp_inner+0x23a8>  // b.none
    2f28:	ldr	x1, [x19, #256]
    2f2c:	add	x0, x1, #0x1
    2f30:	str	x0, [x19, #256]
    2f34:	mov	w0, #0x7d                  	// #125
    2f38:	strb	w0, [x19, x1]
    2f3c:	strb	w0, [x19, #264]
    2f40:	ldp	x21, x22, [sp, #32]
    2f44:	ldp	x23, x24, [sp, #48]
    2f48:	b	4f58 <d_print_comp_inner+0x4388>
    2f4c:	strb	wzr, [x19, #255]
    2f50:	ldr	x3, [x19, #272]
    2f54:	ldr	x2, [x19, #280]
    2f58:	mov	x1, #0xff                  	// #255
    2f5c:	mov	x0, x19
    2f60:	blr	x3
    2f64:	str	xzr, [x19, #256]
    2f68:	ldr	x0, [x19, #320]
    2f6c:	add	x0, x0, #0x1
    2f70:	str	x0, [x19, #320]
    2f74:	b	2ef4 <d_print_comp_inner+0x2324>
    2f78:	strb	wzr, [x19, #255]
    2f7c:	ldr	x3, [x19, #272]
    2f80:	ldr	x2, [x19, #280]
    2f84:	mov	x1, #0xff                  	// #255
    2f88:	mov	x0, x19
    2f8c:	blr	x3
    2f90:	str	xzr, [x19, #256]
    2f94:	ldr	x0, [x19, #320]
    2f98:	add	x0, x0, #0x1
    2f9c:	str	x0, [x19, #320]
    2fa0:	b	2f28 <d_print_comp_inner+0x2358>
    2fa4:	ldr	x24, [x22, #8]
    2fa8:	ldr	w23, [x24, #16]
    2fac:	adrp	x0, 0 <is_fnqual_component_type>
    2fb0:	add	x0, x0, #0x0
    2fb4:	bl	0 <__asan_internal_strlen>
    2fb8:	cbz	x0, 3034 <d_print_comp_inner+0x2464>
    2fbc:	stp	x25, x26, [sp, #64]
    2fc0:	adrp	x20, 0 <is_fnqual_component_type>
    2fc4:	add	x20, x20, #0x0
    2fc8:	add	x22, x0, x20
    2fcc:	mov	x25, #0xff                  	// #255
    2fd0:	b	2ff4 <d_print_comp_inner+0x2424>
    2fd4:	ldr	x0, [x19, #256]
    2fd8:	add	x1, x0, #0x1
    2fdc:	str	x1, [x19, #256]
    2fe0:	strb	w21, [x19, x0]
    2fe4:	strb	w21, [x19, #264]
    2fe8:	add	x20, x20, #0x1
    2fec:	cmp	x20, x22
    2ff0:	b.eq	3030 <d_print_comp_inner+0x2460>  // b.none
    2ff4:	ldrb	w21, [x20]
    2ff8:	ldr	x0, [x19, #256]
    2ffc:	cmp	x0, #0xff
    3000:	b.ne	2fd4 <d_print_comp_inner+0x2404>  // b.any
    3004:	strb	wzr, [x19, #255]
    3008:	ldr	x3, [x19, #272]
    300c:	ldr	x2, [x19, #280]
    3010:	mov	x1, x25
    3014:	mov	x0, x19
    3018:	blr	x3
    301c:	str	xzr, [x19, #256]
    3020:	ldr	x0, [x19, #320]
    3024:	add	x0, x0, #0x1
    3028:	str	x0, [x19, #320]
    302c:	b	2fd4 <d_print_comp_inner+0x2404>
    3030:	ldp	x25, x26, [sp, #64]
    3034:	ldr	x0, [x24, #8]
    3038:	ldrb	w0, [x0]
    303c:	sub	w0, w0, #0x61
    3040:	and	w0, w0, #0xff
    3044:	cmp	w0, #0x19
    3048:	b.hi	3070 <d_print_comp_inner+0x24a0>  // b.pmore
    304c:	ldr	x0, [x19, #256]
    3050:	cmp	x0, #0xff
    3054:	b.eq	30a0 <d_print_comp_inner+0x24d0>  // b.none
    3058:	ldr	x1, [x19, #256]
    305c:	add	x0, x1, #0x1
    3060:	str	x0, [x19, #256]
    3064:	mov	w0, #0x20                  	// #32
    3068:	strb	w0, [x19, x1]
    306c:	strb	w0, [x19, #264]
    3070:	ldr	x22, [x24, #8]
    3074:	add	x0, x22, w23, sxtw
    3078:	ldurb	w0, [x0, #-1]
    307c:	cmp	w0, #0x20
    3080:	cset	w0, eq  // eq = none
    3084:	sub	w23, w23, w0
    3088:	sxtw	x0, w23
    308c:	cbz	w23, 4ff4 <d_print_comp_inner+0x4424>
    3090:	mov	x20, x22
    3094:	add	x22, x22, x0
    3098:	mov	x23, #0xff                  	// #255
    309c:	b	30ec <d_print_comp_inner+0x251c>
    30a0:	strb	wzr, [x19, #255]
    30a4:	ldr	x3, [x19, #272]
    30a8:	ldr	x2, [x19, #280]
    30ac:	mov	x1, #0xff                  	// #255
    30b0:	mov	x0, x19
    30b4:	blr	x3
    30b8:	str	xzr, [x19, #256]
    30bc:	ldr	x0, [x19, #320]
    30c0:	add	x0, x0, #0x1
    30c4:	str	x0, [x19, #320]
    30c8:	b	3058 <d_print_comp_inner+0x2488>
    30cc:	ldr	x0, [x19, #256]
    30d0:	add	x1, x0, #0x1
    30d4:	str	x1, [x19, #256]
    30d8:	strb	w21, [x19, x0]
    30dc:	strb	w21, [x19, #264]
    30e0:	add	x20, x20, #0x1
    30e4:	cmp	x20, x22
    30e8:	b.eq	3128 <d_print_comp_inner+0x2558>  // b.none
    30ec:	ldrb	w21, [x20]
    30f0:	ldr	x0, [x19, #256]
    30f4:	cmp	x0, #0xff
    30f8:	b.ne	30cc <d_print_comp_inner+0x24fc>  // b.any
    30fc:	strb	wzr, [x19, #255]
    3100:	ldr	x3, [x19, #272]
    3104:	ldr	x2, [x19, #280]
    3108:	mov	x1, x23
    310c:	mov	x0, x19
    3110:	blr	x3
    3114:	str	xzr, [x19, #256]
    3118:	ldr	x0, [x19, #320]
    311c:	add	x0, x0, #0x1
    3120:	str	x0, [x19, #320]
    3124:	b	30cc <d_print_comp_inner+0x24fc>
    3128:	ldp	x21, x22, [sp, #32]
    312c:	ldp	x23, x24, [sp, #48]
    3130:	b	4f58 <d_print_comp_inner+0x4388>
    3134:	adrp	x0, 0 <is_fnqual_component_type>
    3138:	add	x0, x0, #0x0
    313c:	bl	0 <__asan_internal_strlen>
    3140:	cbz	x0, 31bc <d_print_comp_inner+0x25ec>
    3144:	stp	x25, x26, [sp, #64]
    3148:	adrp	x21, 0 <is_fnqual_component_type>
    314c:	add	x21, x21, #0x0
    3150:	add	x24, x0, x21
    3154:	mov	x25, #0xff                  	// #255
    3158:	b	317c <d_print_comp_inner+0x25ac>
    315c:	ldr	x0, [x19, #256]
    3160:	add	x1, x0, #0x1
    3164:	str	x1, [x19, #256]
    3168:	strb	w23, [x19, x0]
    316c:	strb	w23, [x19, #264]
    3170:	add	x21, x21, #0x1
    3174:	cmp	x21, x24
    3178:	b.eq	31b8 <d_print_comp_inner+0x25e8>  // b.none
    317c:	ldrb	w23, [x21]
    3180:	ldr	x0, [x19, #256]
    3184:	cmp	x0, #0xff
    3188:	b.ne	315c <d_print_comp_inner+0x258c>  // b.any
    318c:	strb	wzr, [x19, #255]
    3190:	ldr	x3, [x19, #272]
    3194:	ldr	x2, [x19, #280]
    3198:	mov	x1, x25
    319c:	mov	x0, x19
    31a0:	blr	x3
    31a4:	str	xzr, [x19, #256]
    31a8:	ldr	x0, [x19, #320]
    31ac:	add	x0, x0, #0x1
    31b0:	str	x0, [x19, #320]
    31b4:	b	315c <d_print_comp_inner+0x258c>
    31b8:	ldp	x25, x26, [sp, #64]
    31bc:	ldr	x2, [x22, #16]
    31c0:	mov	w1, w20
    31c4:	mov	x0, x19
    31c8:	bl	5050 <d_print_comp>
    31cc:	ldp	x21, x22, [sp, #32]
    31d0:	ldp	x23, x24, [sp, #48]
    31d4:	b	4f58 <d_print_comp_inner+0x4388>
    31d8:	adrp	x0, 0 <is_fnqual_component_type>
    31dc:	add	x0, x0, #0x0
    31e0:	bl	0 <__asan_internal_strlen>
    31e4:	cbz	x0, 3260 <d_print_comp_inner+0x2690>
    31e8:	stp	x25, x26, [sp, #64]
    31ec:	adrp	x21, 0 <is_fnqual_component_type>
    31f0:	add	x21, x21, #0x0
    31f4:	add	x24, x0, x21
    31f8:	mov	x25, #0xff                  	// #255
    31fc:	b	3220 <d_print_comp_inner+0x2650>
    3200:	ldr	x0, [x19, #256]
    3204:	add	x1, x0, #0x1
    3208:	str	x1, [x19, #256]
    320c:	strb	w23, [x19, x0]
    3210:	strb	w23, [x19, #264]
    3214:	add	x21, x21, #0x1
    3218:	cmp	x21, x24
    321c:	b.eq	325c <d_print_comp_inner+0x268c>  // b.none
    3220:	ldrb	w23, [x21]
    3224:	ldr	x0, [x19, #256]
    3228:	cmp	x0, #0xff
    322c:	b.ne	3200 <d_print_comp_inner+0x2630>  // b.any
    3230:	strb	wzr, [x19, #255]
    3234:	ldr	x3, [x19, #272]
    3238:	ldr	x2, [x19, #280]
    323c:	mov	x1, x25
    3240:	mov	x0, x19
    3244:	blr	x3
    3248:	str	xzr, [x19, #256]
    324c:	ldr	x0, [x19, #320]
    3250:	add	x0, x0, #0x1
    3254:	str	x0, [x19, #320]
    3258:	b	3200 <d_print_comp_inner+0x2630>
    325c:	ldp	x25, x26, [sp, #64]
    3260:	ldr	x0, [x19, #368]
    3264:	cbz	x0, 327c <d_print_comp_inner+0x26ac>
    3268:	ldr	x1, [x19, #288]
    326c:	str	x1, [sp, #128]
    3270:	add	x1, sp, #0x80
    3274:	str	x1, [x19, #288]
    3278:	str	x0, [sp, #136]
    327c:	ldr	x2, [x22, #8]
    3280:	ldr	w0, [x2]
    3284:	cmp	w0, #0x4
    3288:	b.eq	32b4 <d_print_comp_inner+0x26e4>  // b.none
    328c:	mov	w1, w20
    3290:	mov	x0, x19
    3294:	bl	5050 <d_print_comp>
    3298:	ldr	x0, [x19, #368]
    329c:	cbz	x0, 5000 <d_print_comp_inner+0x4430>
    32a0:	ldr	x0, [sp, #128]
    32a4:	str	x0, [x19, #288]
    32a8:	ldp	x21, x22, [sp, #32]
    32ac:	ldp	x23, x24, [sp, #48]
    32b0:	b	4f58 <d_print_comp_inner+0x4388>
    32b4:	ldr	x2, [x2, #8]
    32b8:	mov	w1, w20
    32bc:	mov	x0, x19
    32c0:	bl	5050 <d_print_comp>
    32c4:	ldr	x0, [x19, #368]
    32c8:	cbz	x0, 32d4 <d_print_comp_inner+0x2704>
    32cc:	ldr	x0, [sp, #128]
    32d0:	str	x0, [x19, #288]
    32d4:	ldrb	w0, [x19, #264]
    32d8:	cmp	w0, #0x3c
    32dc:	b.eq	3354 <d_print_comp_inner+0x2784>  // b.none
    32e0:	ldr	x0, [x19, #256]
    32e4:	cmp	x0, #0xff
    32e8:	b.eq	33a8 <d_print_comp_inner+0x27d8>  // b.none
    32ec:	ldr	x1, [x19, #256]
    32f0:	add	x0, x1, #0x1
    32f4:	str	x0, [x19, #256]
    32f8:	mov	w0, #0x3c                  	// #60
    32fc:	strb	w0, [x19, x1]
    3300:	strb	w0, [x19, #264]
    3304:	ldr	x0, [x22, #8]
    3308:	ldr	x2, [x0, #16]
    330c:	mov	w1, w20
    3310:	mov	x0, x19
    3314:	bl	5050 <d_print_comp>
    3318:	ldrb	w0, [x19, #264]
    331c:	cmp	w0, #0x3e
    3320:	b.eq	33d4 <d_print_comp_inner+0x2804>  // b.none
    3324:	ldr	x0, [x19, #256]
    3328:	cmp	x0, #0xff
    332c:	b.eq	3428 <d_print_comp_inner+0x2858>  // b.none
    3330:	ldr	x1, [x19, #256]
    3334:	add	x0, x1, #0x1
    3338:	str	x0, [x19, #256]
    333c:	mov	w0, #0x3e                  	// #62
    3340:	strb	w0, [x19, x1]
    3344:	strb	w0, [x19, #264]
    3348:	ldp	x21, x22, [sp, #32]
    334c:	ldp	x23, x24, [sp, #48]
    3350:	b	4f58 <d_print_comp_inner+0x4388>
    3354:	ldr	x0, [x19, #256]
    3358:	cmp	x0, #0xff
    335c:	b.eq	337c <d_print_comp_inner+0x27ac>  // b.none
    3360:	ldr	x1, [x19, #256]
    3364:	add	x0, x1, #0x1
    3368:	str	x0, [x19, #256]
    336c:	mov	w0, #0x20                  	// #32
    3370:	strb	w0, [x19, x1]
    3374:	strb	w0, [x19, #264]
    3378:	b	32e0 <d_print_comp_inner+0x2710>
    337c:	strb	wzr, [x19, #255]
    3380:	ldr	x3, [x19, #272]
    3384:	ldr	x2, [x19, #280]
    3388:	mov	x1, #0xff                  	// #255
    338c:	mov	x0, x19
    3390:	blr	x3
    3394:	str	xzr, [x19, #256]
    3398:	ldr	x0, [x19, #320]
    339c:	add	x0, x0, #0x1
    33a0:	str	x0, [x19, #320]
    33a4:	b	3360 <d_print_comp_inner+0x2790>
    33a8:	strb	wzr, [x19, #255]
    33ac:	ldr	x3, [x19, #272]
    33b0:	ldr	x2, [x19, #280]
    33b4:	mov	x1, #0xff                  	// #255
    33b8:	mov	x0, x19
    33bc:	blr	x3
    33c0:	str	xzr, [x19, #256]
    33c4:	ldr	x0, [x19, #320]
    33c8:	add	x0, x0, #0x1
    33cc:	str	x0, [x19, #320]
    33d0:	b	32ec <d_print_comp_inner+0x271c>
    33d4:	ldr	x0, [x19, #256]
    33d8:	cmp	x0, #0xff
    33dc:	b.eq	33fc <d_print_comp_inner+0x282c>  // b.none
    33e0:	ldr	x1, [x19, #256]
    33e4:	add	x0, x1, #0x1
    33e8:	str	x0, [x19, #256]
    33ec:	mov	w0, #0x20                  	// #32
    33f0:	strb	w0, [x19, x1]
    33f4:	strb	w0, [x19, #264]
    33f8:	b	3324 <d_print_comp_inner+0x2754>
    33fc:	strb	wzr, [x19, #255]
    3400:	ldr	x3, [x19, #272]
    3404:	ldr	x2, [x19, #280]
    3408:	mov	x1, #0xff                  	// #255
    340c:	mov	x0, x19
    3410:	blr	x3
    3414:	str	xzr, [x19, #256]
    3418:	ldr	x0, [x19, #320]
    341c:	add	x0, x0, #0x1
    3420:	str	x0, [x19, #320]
    3424:	b	33e0 <d_print_comp_inner+0x2810>
    3428:	strb	wzr, [x19, #255]
    342c:	ldr	x3, [x19, #272]
    3430:	ldr	x2, [x19, #280]
    3434:	mov	x1, #0xff                  	// #255
    3438:	mov	x0, x19
    343c:	blr	x3
    3440:	str	xzr, [x19, #256]
    3444:	ldr	x0, [x19, #320]
    3448:	add	x0, x0, #0x1
    344c:	str	x0, [x19, #320]
    3450:	b	3330 <d_print_comp_inner+0x2760>
    3454:	ldr	x2, [x22, #8]
    3458:	mov	w1, w20
    345c:	mov	x0, x19
    3460:	bl	64ac <d_print_expr_op>
    3464:	ldp	x21, x22, [sp, #32]
    3468:	ldp	x23, x24, [sp, #48]
    346c:	b	4f58 <d_print_comp_inner+0x4388>
    3470:	ldr	x23, [x22, #8]
    3474:	ldr	x21, [x22, #16]
    3478:	ldr	w0, [x23]
    347c:	cmp	w0, #0x32
    3480:	b.eq	3534 <d_print_comp_inner+0x2964>  // b.none
    3484:	mov	x24, #0x0                   	// #0
    3488:	ldr	w0, [x23]
    348c:	cmp	w0, #0x34
    3490:	b.ne	3670 <d_print_comp_inner+0x2aa0>  // b.any
    3494:	ldr	x0, [x19, #256]
    3498:	cmp	x0, #0xff
    349c:	b.eq	3684 <d_print_comp_inner+0x2ab4>  // b.none
    34a0:	ldr	x1, [x19, #256]
    34a4:	add	x0, x1, #0x1
    34a8:	str	x0, [x19, #256]
    34ac:	mov	w0, #0x28                  	// #40
    34b0:	strb	w0, [x19, x1]
    34b4:	strb	w0, [x19, #264]
    34b8:	ldr	x2, [x23, #8]
    34bc:	mov	w1, w20
    34c0:	mov	x0, x19
    34c4:	bl	5050 <d_print_comp>
    34c8:	ldr	x0, [x19, #256]
    34cc:	cmp	x0, #0xff
    34d0:	b.eq	36b0 <d_print_comp_inner+0x2ae0>  // b.none
    34d4:	ldr	x1, [x19, #256]
    34d8:	add	x0, x1, #0x1
    34dc:	str	x0, [x19, #256]
    34e0:	mov	w0, #0x29                  	// #41
    34e4:	strb	w0, [x19, x1]
    34e8:	strb	w0, [x19, #264]
    34ec:	cbz	x24, 3518 <d_print_comp_inner+0x2948>
    34f0:	adrp	x1, 0 <is_fnqual_component_type>
    34f4:	add	x1, x1, #0x0
    34f8:	mov	x0, x24
    34fc:	bl	0 <__asan_internal_strcmp>
    3500:	cbz	w0, 36dc <d_print_comp_inner+0x2b0c>
    3504:	adrp	x1, 0 <is_fnqual_component_type>
    3508:	add	x1, x1, #0x0
    350c:	mov	x0, x24
    3510:	bl	0 <__asan_internal_strcmp>
    3514:	cbz	w0, 36f8 <d_print_comp_inner+0x2b28>
    3518:	mov	x2, x21
    351c:	mov	w1, w20
    3520:	mov	x0, x19
    3524:	bl	6574 <d_print_subexpr>
    3528:	ldp	x21, x22, [sp, #32]
    352c:	ldp	x23, x24, [sp, #48]
    3530:	b	4f58 <d_print_comp_inner+0x4388>
    3534:	ldr	x0, [x23, #8]
    3538:	ldr	x24, [x0]
    353c:	adrp	x1, 0 <is_fnqual_component_type>
    3540:	add	x1, x1, #0x0
    3544:	mov	x0, x24
    3548:	bl	0 <__asan_internal_strcmp>
    354c:	cbnz	w0, 355c <d_print_comp_inner+0x298c>
    3550:	ldr	w0, [x21]
    3554:	cmp	w0, #0x3
    3558:	b.eq	35b4 <d_print_comp_inner+0x29e4>  // b.none
    355c:	ldr	w0, [x21]
    3560:	cmp	w0, #0x39
    3564:	b.eq	35d8 <d_print_comp_inner+0x2a08>  // b.none
    3568:	cbz	x24, 3484 <d_print_comp_inner+0x28b4>
    356c:	adrp	x1, 0 <is_fnqual_component_type>
    3570:	add	x1, x1, #0x0
    3574:	mov	x0, x24
    3578:	bl	0 <__asan_internal_strcmp>
    357c:	cbz	w0, 3604 <d_print_comp_inner+0x2a34>
    3580:	adrp	x1, 0 <is_fnqual_component_type>
    3584:	add	x1, x1, #0x0
    3588:	mov	x0, x24
    358c:	bl	0 <__asan_internal_strcmp>
    3590:	mov	w22, w0
    3594:	cbnz	w0, 3488 <d_print_comp_inner+0x28b8>
    3598:	cbnz	x21, 3648 <d_print_comp_inner+0x2a78>
    359c:	mov	w1, w22
    35a0:	mov	x0, x19
    35a4:	bl	b14 <d_append_num>
    35a8:	ldp	x21, x22, [sp, #32]
    35ac:	ldp	x23, x24, [sp, #48]
    35b0:	b	4f58 <d_print_comp_inner+0x4388>
    35b4:	ldr	x0, [x21, #8]
    35b8:	ldr	w1, [x0]
    35bc:	cmp	w1, #0x1
    35c0:	b.ne	3568 <d_print_comp_inner+0x2998>  // b.any
    35c4:	ldr	x1, [x21, #16]
    35c8:	ldr	w1, [x1]
    35cc:	cmp	w1, #0x29
    35d0:	csel	x21, x21, x0, ne  // ne = any
    35d4:	b	3568 <d_print_comp_inner+0x2998>
    35d8:	ldr	x2, [x21, #8]
    35dc:	mov	w1, w20
    35e0:	mov	x0, x19
    35e4:	bl	6574 <d_print_subexpr>
    35e8:	mov	x2, x23
    35ec:	mov	w1, w20
    35f0:	mov	x0, x19
    35f4:	bl	64ac <d_print_expr_op>
    35f8:	ldp	x21, x22, [sp, #32]
    35fc:	ldp	x23, x24, [sp, #48]
    3600:	b	4f58 <d_print_comp_inner+0x4388>
    3604:	mov	x1, x21
    3608:	mov	x0, x19
    360c:	bl	90c <d_find_pack>
    3610:	bl	a04 <d_pack_length>
    3614:	mov	w1, w0
    3618:	mov	x0, x19
    361c:	bl	b14 <d_append_num>
    3620:	ldp	x21, x22, [sp, #32]
    3624:	ldp	x23, x24, [sp, #48]
    3628:	b	4f58 <d_print_comp_inner+0x4388>
    362c:	ldr	x1, [x0, #8]
    3630:	mov	x0, x19
    3634:	bl	90c <d_find_pack>
    3638:	bl	a04 <d_pack_length>
    363c:	add	w22, w22, w0
    3640:	ldr	x21, [x21, #16]
    3644:	cbz	x21, 359c <d_print_comp_inner+0x29cc>
    3648:	ldr	w0, [x21]
    364c:	cmp	w0, #0x2f
    3650:	b.ne	359c <d_print_comp_inner+0x29cc>  // b.any
    3654:	ldr	x0, [x21, #8]
    3658:	cbz	x0, 359c <d_print_comp_inner+0x29cc>
    365c:	ldr	w1, [x0]
    3660:	cmp	w1, #0x4b
    3664:	b.eq	362c <d_print_comp_inner+0x2a5c>  // b.none
    3668:	add	w22, w22, #0x1
    366c:	b	3640 <d_print_comp_inner+0x2a70>
    3670:	mov	x2, x23
    3674:	mov	w1, w20
    3678:	mov	x0, x19
    367c:	bl	64ac <d_print_expr_op>
    3680:	b	34ec <d_print_comp_inner+0x291c>
    3684:	strb	wzr, [x19, #255]
    3688:	ldr	x3, [x19, #272]
    368c:	ldr	x2, [x19, #280]
    3690:	mov	x1, #0xff                  	// #255
    3694:	mov	x0, x19
    3698:	blr	x3
    369c:	str	xzr, [x19, #256]
    36a0:	ldr	x0, [x19, #320]
    36a4:	add	x0, x0, #0x1
    36a8:	str	x0, [x19, #320]
    36ac:	b	34a0 <d_print_comp_inner+0x28d0>
    36b0:	strb	wzr, [x19, #255]
    36b4:	ldr	x3, [x19, #272]
    36b8:	ldr	x2, [x19, #280]
    36bc:	mov	x1, #0xff                  	// #255
    36c0:	mov	x0, x19
    36c4:	blr	x3
    36c8:	str	xzr, [x19, #256]
    36cc:	ldr	x0, [x19, #320]
    36d0:	add	x0, x0, #0x1
    36d4:	str	x0, [x19, #320]
    36d8:	b	34d4 <d_print_comp_inner+0x2904>
    36dc:	mov	x2, x21
    36e0:	mov	w1, w20
    36e4:	mov	x0, x19
    36e8:	bl	5050 <d_print_comp>
    36ec:	ldp	x21, x22, [sp, #32]
    36f0:	ldp	x23, x24, [sp, #48]
    36f4:	b	4f58 <d_print_comp_inner+0x4388>
    36f8:	ldr	x0, [x19, #256]
    36fc:	cmp	x0, #0xff
    3700:	b.eq	375c <d_print_comp_inner+0x2b8c>  // b.none
    3704:	ldr	x1, [x19, #256]
    3708:	add	x0, x1, #0x1
    370c:	str	x0, [x19, #256]
    3710:	mov	w0, #0x28                  	// #40
    3714:	strb	w0, [x19, x1]
    3718:	strb	w0, [x19, #264]
    371c:	mov	x2, x21
    3720:	mov	w1, w20
    3724:	mov	x0, x19
    3728:	bl	5050 <d_print_comp>
    372c:	ldr	x0, [x19, #256]
    3730:	cmp	x0, #0xff
    3734:	b.eq	3788 <d_print_comp_inner+0x2bb8>  // b.none
    3738:	ldr	x1, [x19, #256]
    373c:	add	x0, x1, #0x1
    3740:	str	x0, [x19, #256]
    3744:	mov	w0, #0x29                  	// #41
    3748:	strb	w0, [x19, x1]
    374c:	strb	w0, [x19, #264]
    3750:	ldp	x21, x22, [sp, #32]
    3754:	ldp	x23, x24, [sp, #48]
    3758:	b	4f58 <d_print_comp_inner+0x4388>
    375c:	strb	wzr, [x19, #255]
    3760:	ldr	x3, [x19, #272]
    3764:	ldr	x2, [x19, #280]
    3768:	mov	x1, #0xff                  	// #255
    376c:	mov	x0, x19
    3770:	blr	x3
    3774:	str	xzr, [x19, #256]
    3778:	ldr	x0, [x19, #320]
    377c:	add	x0, x0, #0x1
    3780:	str	x0, [x19, #320]
    3784:	b	3704 <d_print_comp_inner+0x2b34>
    3788:	strb	wzr, [x19, #255]
    378c:	ldr	x3, [x19, #272]
    3790:	ldr	x2, [x19, #280]
    3794:	mov	x1, #0xff                  	// #255
    3798:	mov	x0, x19
    379c:	blr	x3
    37a0:	str	xzr, [x19, #256]
    37a4:	ldr	x0, [x19, #320]
    37a8:	add	x0, x0, #0x1
    37ac:	str	x0, [x19, #320]
    37b0:	b	3738 <d_print_comp_inner+0x2b68>
    37b4:	ldr	x0, [x22, #16]
    37b8:	ldr	w0, [x0]
    37bc:	cmp	w0, #0x39
    37c0:	b.eq	37d8 <d_print_comp_inner+0x2c08>  // b.none
    37c4:	mov	w0, #0x1                   	// #1
    37c8:	str	w0, [x19, #304]
    37cc:	ldp	x21, x22, [sp, #32]
    37d0:	ldp	x23, x24, [sp, #48]
    37d4:	b	4f58 <d_print_comp_inner+0x4388>
    37d8:	ldr	x21, [x22, #8]
    37dc:	mov	x0, x21
    37e0:	bl	5c4 <op_is_new_cast>
    37e4:	cbnz	w0, 38e4 <d_print_comp_inner+0x2d14>
    37e8:	mov	x2, x22
    37ec:	mov	w1, w20
    37f0:	mov	x0, x19
    37f4:	bl	6670 <d_maybe_print_fold_expression>
    37f8:	cbnz	w0, 500c <d_print_comp_inner+0x443c>
    37fc:	ldr	x0, [x22, #8]
    3800:	ldr	w1, [x0]
    3804:	cmp	w1, #0x32
    3808:	b.eq	3a50 <d_print_comp_inner+0x2e80>  // b.none
    380c:	ldr	x0, [x22, #8]
    3810:	ldr	x0, [x0, #8]
    3814:	adrp	x1, 0 <is_fnqual_component_type>
    3818:	add	x1, x1, #0x0
    381c:	ldr	x0, [x0]
    3820:	bl	0 <__asan_internal_strcmp>
    3824:	cbnz	w0, 383c <d_print_comp_inner+0x2c6c>
    3828:	ldr	x0, [x22, #16]
    382c:	ldr	x0, [x0, #8]
    3830:	ldr	w1, [x0]
    3834:	cmp	w1, #0x3
    3838:	b.eq	3ac4 <d_print_comp_inner+0x2ef4>  // b.none
    383c:	ldr	x0, [x22, #16]
    3840:	ldr	x2, [x0, #8]
    3844:	mov	w1, w20
    3848:	mov	x0, x19
    384c:	bl	6574 <d_print_subexpr>
    3850:	ldr	x0, [x22, #8]
    3854:	ldr	x0, [x0, #8]
    3858:	adrp	x1, 0 <is_fnqual_component_type>
    385c:	add	x1, x1, #0x0
    3860:	ldr	x0, [x0]
    3864:	bl	0 <__asan_internal_strcmp>
    3868:	cbnz	w0, 3b48 <d_print_comp_inner+0x2f78>
    386c:	ldr	x0, [x19, #256]
    3870:	cmp	x0, #0xff
    3874:	b.eq	3af0 <d_print_comp_inner+0x2f20>  // b.none
    3878:	ldr	x1, [x19, #256]
    387c:	add	x0, x1, #0x1
    3880:	str	x0, [x19, #256]
    3884:	mov	w0, #0x5b                  	// #91
    3888:	strb	w0, [x19, x1]
    388c:	strb	w0, [x19, #264]
    3890:	ldr	x0, [x22, #16]
    3894:	ldr	x2, [x0, #16]
    3898:	mov	w1, w20
    389c:	mov	x0, x19
    38a0:	bl	5050 <d_print_comp>
    38a4:	ldr	x0, [x19, #256]
    38a8:	cmp	x0, #0xff
    38ac:	b.eq	3b1c <d_print_comp_inner+0x2f4c>  // b.none
    38b0:	ldr	x1, [x19, #256]
    38b4:	add	x0, x1, #0x1
    38b8:	str	x0, [x19, #256]
    38bc:	mov	w0, #0x5d                  	// #93
    38c0:	strb	w0, [x19, x1]
    38c4:	strb	w0, [x19, #264]
    38c8:	ldr	x0, [x22, #8]
    38cc:	ldr	w1, [x0]
    38d0:	cmp	w1, #0x32
    38d4:	b.eq	3b90 <d_print_comp_inner+0x2fc0>  // b.none
    38d8:	ldp	x21, x22, [sp, #32]
    38dc:	ldp	x23, x24, [sp, #48]
    38e0:	b	4f58 <d_print_comp_inner+0x4388>
    38e4:	mov	x2, x21
    38e8:	mov	w1, w20
    38ec:	mov	x0, x19
    38f0:	bl	64ac <d_print_expr_op>
    38f4:	ldr	x0, [x19, #256]
    38f8:	cmp	x0, #0xff
    38fc:	b.eq	3954 <d_print_comp_inner+0x2d84>  // b.none
    3900:	ldr	x1, [x19, #256]
    3904:	add	x0, x1, #0x1
    3908:	str	x0, [x19, #256]
    390c:	mov	w0, #0x3c                  	// #60
    3910:	strb	w0, [x19, x1]
    3914:	strb	w0, [x19, #264]
    3918:	ldr	x0, [x22, #16]
    391c:	ldr	x2, [x0, #8]
    3920:	mov	w1, w20
    3924:	mov	x0, x19
    3928:	bl	5050 <d_print_comp>
    392c:	adrp	x0, 0 <is_fnqual_component_type>
    3930:	add	x0, x0, #0x0
    3934:	bl	0 <__asan_internal_strlen>
    3938:	cbz	x0, 39e0 <d_print_comp_inner+0x2e10>
    393c:	stp	x25, x26, [sp, #64]
    3940:	adrp	x21, 0 <is_fnqual_component_type>
    3944:	add	x21, x21, #0x0
    3948:	add	x24, x0, x21
    394c:	mov	x25, #0xff                  	// #255
    3950:	b	39a0 <d_print_comp_inner+0x2dd0>
    3954:	strb	wzr, [x19, #255]
    3958:	ldr	x3, [x19, #272]
    395c:	ldr	x2, [x19, #280]
    3960:	mov	x1, #0xff                  	// #255
    3964:	mov	x0, x19
    3968:	blr	x3
    396c:	str	xzr, [x19, #256]
    3970:	ldr	x0, [x19, #320]
    3974:	add	x0, x0, #0x1
    3978:	str	x0, [x19, #320]
    397c:	b	3900 <d_print_comp_inner+0x2d30>
    3980:	ldr	x0, [x19, #256]
    3984:	add	x1, x0, #0x1
    3988:	str	x1, [x19, #256]
    398c:	strb	w23, [x19, x0]
    3990:	strb	w23, [x19, #264]
    3994:	add	x21, x21, #0x1
    3998:	cmp	x21, x24
    399c:	b.eq	39dc <d_print_comp_inner+0x2e0c>  // b.none
    39a0:	ldrb	w23, [x21]
    39a4:	ldr	x0, [x19, #256]
    39a8:	cmp	x0, #0xff
    39ac:	b.ne	3980 <d_print_comp_inner+0x2db0>  // b.any
    39b0:	strb	wzr, [x19, #255]
    39b4:	ldr	x3, [x19, #272]
    39b8:	ldr	x2, [x19, #280]
    39bc:	mov	x1, x25
    39c0:	mov	x0, x19
    39c4:	blr	x3
    39c8:	str	xzr, [x19, #256]
    39cc:	ldr	x0, [x19, #320]
    39d0:	add	x0, x0, #0x1
    39d4:	str	x0, [x19, #320]
    39d8:	b	3980 <d_print_comp_inner+0x2db0>
    39dc:	ldp	x25, x26, [sp, #64]
    39e0:	ldr	x0, [x22, #16]
    39e4:	ldr	x2, [x0, #16]
    39e8:	mov	w1, w20
    39ec:	mov	x0, x19
    39f0:	bl	5050 <d_print_comp>
    39f4:	ldr	x0, [x19, #256]
    39f8:	cmp	x0, #0xff
    39fc:	b.eq	3a24 <d_print_comp_inner+0x2e54>  // b.none
    3a00:	ldr	x1, [x19, #256]
    3a04:	add	x0, x1, #0x1
    3a08:	str	x0, [x19, #256]
    3a0c:	mov	w0, #0x29                  	// #41
    3a10:	strb	w0, [x19, x1]
    3a14:	strb	w0, [x19, #264]
    3a18:	ldp	x21, x22, [sp, #32]
    3a1c:	ldp	x23, x24, [sp, #48]
    3a20:	b	4f58 <d_print_comp_inner+0x4388>
    3a24:	strb	wzr, [x19, #255]
    3a28:	ldr	x3, [x19, #272]
    3a2c:	ldr	x2, [x19, #280]
    3a30:	mov	x1, #0xff                  	// #255
    3a34:	mov	x0, x19
    3a38:	blr	x3
    3a3c:	str	xzr, [x19, #256]
    3a40:	ldr	x0, [x19, #320]
    3a44:	add	x0, x0, #0x1
    3a48:	str	x0, [x19, #320]
    3a4c:	b	3a00 <d_print_comp_inner+0x2e30>
    3a50:	ldr	x0, [x0, #8]
    3a54:	ldr	w1, [x0, #16]
    3a58:	cmp	w1, #0x1
    3a5c:	b.ne	380c <d_print_comp_inner+0x2c3c>  // b.any
    3a60:	ldr	x0, [x0, #8]
    3a64:	ldrb	w0, [x0]
    3a68:	cmp	w0, #0x3e
    3a6c:	b.ne	380c <d_print_comp_inner+0x2c3c>  // b.any
    3a70:	ldr	x0, [x19, #256]
    3a74:	cmp	x0, #0xff
    3a78:	b.eq	3a98 <d_print_comp_inner+0x2ec8>  // b.none
    3a7c:	ldr	x1, [x19, #256]
    3a80:	add	x0, x1, #0x1
    3a84:	str	x0, [x19, #256]
    3a88:	mov	w0, #0x28                  	// #40
    3a8c:	strb	w0, [x19, x1]
    3a90:	strb	w0, [x19, #264]
    3a94:	b	380c <d_print_comp_inner+0x2c3c>
    3a98:	strb	wzr, [x19, #255]
    3a9c:	ldr	x3, [x19, #272]
    3aa0:	ldr	x2, [x19, #280]
    3aa4:	mov	x1, #0xff                  	// #255
    3aa8:	mov	x0, x19
    3aac:	blr	x3
    3ab0:	str	xzr, [x19, #256]
    3ab4:	ldr	x0, [x19, #320]
    3ab8:	add	x0, x0, #0x1
    3abc:	str	x0, [x19, #320]
    3ac0:	b	3a7c <d_print_comp_inner+0x2eac>
    3ac4:	ldr	x1, [x0, #16]
    3ac8:	ldr	w1, [x1]
    3acc:	cmp	w1, #0x29
    3ad0:	b.eq	3adc <d_print_comp_inner+0x2f0c>  // b.none
    3ad4:	mov	w1, #0x1                   	// #1
    3ad8:	str	w1, [x19, #304]
    3adc:	ldr	x2, [x0, #8]
    3ae0:	mov	w1, w20
    3ae4:	mov	x0, x19
    3ae8:	bl	6574 <d_print_subexpr>
    3aec:	b	3850 <d_print_comp_inner+0x2c80>
    3af0:	strb	wzr, [x19, #255]
    3af4:	ldr	x3, [x19, #272]
    3af8:	ldr	x2, [x19, #280]
    3afc:	mov	x1, #0xff                  	// #255
    3b00:	mov	x0, x19
    3b04:	blr	x3
    3b08:	str	xzr, [x19, #256]
    3b0c:	ldr	x0, [x19, #320]
    3b10:	add	x0, x0, #0x1
    3b14:	str	x0, [x19, #320]
    3b18:	b	3878 <d_print_comp_inner+0x2ca8>
    3b1c:	strb	wzr, [x19, #255]
    3b20:	ldr	x3, [x19, #272]
    3b24:	ldr	x2, [x19, #280]
    3b28:	mov	x1, #0xff                  	// #255
    3b2c:	mov	x0, x19
    3b30:	blr	x3
    3b34:	str	xzr, [x19, #256]
    3b38:	ldr	x0, [x19, #320]
    3b3c:	add	x0, x0, #0x1
    3b40:	str	x0, [x19, #320]
    3b44:	b	38b0 <d_print_comp_inner+0x2ce0>
    3b48:	ldr	x0, [x22, #8]
    3b4c:	ldr	x0, [x0, #8]
    3b50:	adrp	x1, 0 <is_fnqual_component_type>
    3b54:	add	x1, x1, #0x0
    3b58:	ldr	x0, [x0]
    3b5c:	bl	0 <__asan_internal_strcmp>
    3b60:	cbnz	w0, 3b7c <d_print_comp_inner+0x2fac>
    3b64:	ldr	x0, [x22, #16]
    3b68:	ldr	x2, [x0, #16]
    3b6c:	mov	w1, w20
    3b70:	mov	x0, x19
    3b74:	bl	6574 <d_print_subexpr>
    3b78:	b	38c8 <d_print_comp_inner+0x2cf8>
    3b7c:	ldr	x2, [x22, #8]
    3b80:	mov	w1, w20
    3b84:	mov	x0, x19
    3b88:	bl	64ac <d_print_expr_op>
    3b8c:	b	3b64 <d_print_comp_inner+0x2f94>
    3b90:	ldr	x0, [x0, #8]
    3b94:	ldr	w1, [x0, #16]
    3b98:	cmp	w1, #0x1
    3b9c:	b.eq	3bac <d_print_comp_inner+0x2fdc>  // b.none
    3ba0:	ldp	x21, x22, [sp, #32]
    3ba4:	ldp	x23, x24, [sp, #48]
    3ba8:	b	4f58 <d_print_comp_inner+0x4388>
    3bac:	ldr	x0, [x0, #8]
    3bb0:	ldrb	w0, [x0]
    3bb4:	cmp	w0, #0x3e
    3bb8:	b.eq	3bc8 <d_print_comp_inner+0x2ff8>  // b.none
    3bbc:	ldp	x21, x22, [sp, #32]
    3bc0:	ldp	x23, x24, [sp, #48]
    3bc4:	b	4f58 <d_print_comp_inner+0x4388>
    3bc8:	ldr	x0, [x19, #256]
    3bcc:	cmp	x0, #0xff
    3bd0:	b.eq	3bf8 <d_print_comp_inner+0x3028>  // b.none
    3bd4:	ldr	x1, [x19, #256]
    3bd8:	add	x0, x1, #0x1
    3bdc:	str	x0, [x19, #256]
    3be0:	mov	w0, #0x29                  	// #41
    3be4:	strb	w0, [x19, x1]
    3be8:	strb	w0, [x19, #264]
    3bec:	ldp	x21, x22, [sp, #32]
    3bf0:	ldp	x23, x24, [sp, #48]
    3bf4:	b	4f58 <d_print_comp_inner+0x4388>
    3bf8:	strb	wzr, [x19, #255]
    3bfc:	ldr	x3, [x19, #272]
    3c00:	ldr	x2, [x19, #280]
    3c04:	mov	x1, #0xff                  	// #255
    3c08:	mov	x0, x19
    3c0c:	blr	x3
    3c10:	str	xzr, [x19, #256]
    3c14:	ldr	x0, [x19, #320]
    3c18:	add	x0, x0, #0x1
    3c1c:	str	x0, [x19, #320]
    3c20:	b	3bd4 <d_print_comp_inner+0x3004>
    3c24:	mov	w0, #0x1                   	// #1
    3c28:	str	w0, [x19, #304]
    3c2c:	ldp	x21, x22, [sp, #32]
    3c30:	ldp	x23, x24, [sp, #48]
    3c34:	b	4f58 <d_print_comp_inner+0x4388>
    3c38:	ldr	x0, [x22, #16]
    3c3c:	ldr	w1, [x0]
    3c40:	cmp	w1, #0x3b
    3c44:	b.ne	3c58 <d_print_comp_inner+0x3088>  // b.any
    3c48:	ldr	x0, [x0, #16]
    3c4c:	ldr	w0, [x0]
    3c50:	cmp	w0, #0x3c
    3c54:	b.eq	3c6c <d_print_comp_inner+0x309c>  // b.none
    3c58:	mov	w0, #0x1                   	// #1
    3c5c:	str	w0, [x19, #304]
    3c60:	ldp	x21, x22, [sp, #32]
    3c64:	ldp	x23, x24, [sp, #48]
    3c68:	b	4f58 <d_print_comp_inner+0x4388>
    3c6c:	mov	x2, x22
    3c70:	mov	w1, w20
    3c74:	mov	x0, x19
    3c78:	bl	6670 <d_maybe_print_fold_expression>
    3c7c:	cbz	w0, 3c8c <d_print_comp_inner+0x30bc>
    3c80:	ldp	x21, x22, [sp, #32]
    3c84:	ldp	x23, x24, [sp, #48]
    3c88:	b	4f58 <d_print_comp_inner+0x4388>
    3c8c:	ldr	x21, [x22, #8]
    3c90:	ldr	x0, [x22, #16]
    3c94:	ldr	x23, [x0, #8]
    3c98:	ldr	x0, [x0, #16]
    3c9c:	ldr	x24, [x0, #8]
    3ca0:	ldr	x22, [x0, #16]
    3ca4:	ldr	x0, [x21, #8]
    3ca8:	adrp	x1, 0 <is_fnqual_component_type>
    3cac:	add	x1, x1, #0x0
    3cb0:	ldr	x0, [x0]
    3cb4:	bl	0 <__asan_internal_strcmp>
    3cb8:	cbnz	w0, 3d28 <d_print_comp_inner+0x3158>
    3cbc:	mov	x2, x23
    3cc0:	mov	w1, w20
    3cc4:	mov	x0, x19
    3cc8:	bl	6574 <d_print_subexpr>
    3ccc:	mov	x2, x21
    3cd0:	mov	w1, w20
    3cd4:	mov	x0, x19
    3cd8:	bl	64ac <d_print_expr_op>
    3cdc:	mov	x2, x24
    3ce0:	mov	w1, w20
    3ce4:	mov	x0, x19
    3ce8:	bl	6574 <d_print_subexpr>
    3cec:	adrp	x21, 0 <is_fnqual_component_type>
    3cf0:	add	x21, x21, #0x0
    3cf4:	mov	x0, x21
    3cf8:	bl	0 <__asan_internal_strlen>
    3cfc:	mov	x2, x0
    3d00:	mov	x1, x21
    3d04:	mov	x0, x19
    3d08:	bl	7fc <d_append_buffer>
    3d0c:	mov	x2, x22
    3d10:	mov	w1, w20
    3d14:	mov	x0, x19
    3d18:	bl	6574 <d_print_subexpr>
    3d1c:	ldp	x21, x22, [sp, #32]
    3d20:	ldp	x23, x24, [sp, #48]
    3d24:	b	4f58 <d_print_comp_inner+0x4388>
    3d28:	adrp	x21, 0 <is_fnqual_component_type>
    3d2c:	add	x21, x21, #0x0
    3d30:	mov	x0, x21
    3d34:	bl	0 <__asan_internal_strlen>
    3d38:	mov	x2, x0
    3d3c:	mov	x1, x21
    3d40:	mov	x0, x19
    3d44:	bl	7fc <d_append_buffer>
    3d48:	ldr	x0, [x23, #8]
    3d4c:	cbz	x0, 3d84 <d_print_comp_inner+0x31b4>
    3d50:	mov	x2, x23
    3d54:	mov	w1, w20
    3d58:	mov	x0, x19
    3d5c:	bl	6574 <d_print_subexpr>
    3d60:	ldr	x0, [x19, #256]
    3d64:	cmp	x0, #0xff
    3d68:	b.eq	3db4 <d_print_comp_inner+0x31e4>  // b.none
    3d6c:	ldr	x1, [x19, #256]
    3d70:	add	x0, x1, #0x1
    3d74:	str	x0, [x19, #256]
    3d78:	mov	w0, #0x20                  	// #32
    3d7c:	strb	w0, [x19, x1]
    3d80:	strb	w0, [x19, #264]
    3d84:	mov	x2, x24
    3d88:	mov	w1, w20
    3d8c:	mov	x0, x19
    3d90:	bl	5050 <d_print_comp>
    3d94:	cbz	x22, 5018 <d_print_comp_inner+0x4448>
    3d98:	mov	x2, x22
    3d9c:	mov	w1, w20
    3da0:	mov	x0, x19
    3da4:	bl	6574 <d_print_subexpr>
    3da8:	ldp	x21, x22, [sp, #32]
    3dac:	ldp	x23, x24, [sp, #48]
    3db0:	b	4f58 <d_print_comp_inner+0x4388>
    3db4:	strb	wzr, [x19, #255]
    3db8:	ldr	x3, [x19, #272]
    3dbc:	ldr	x2, [x19, #280]
    3dc0:	mov	x1, #0xff                  	// #255
    3dc4:	mov	x0, x19
    3dc8:	blr	x3
    3dcc:	str	xzr, [x19, #256]
    3dd0:	ldr	x0, [x19, #320]
    3dd4:	add	x0, x0, #0x1
    3dd8:	str	x0, [x19, #320]
    3ddc:	b	3d6c <d_print_comp_inner+0x319c>
    3de0:	mov	w0, #0x1                   	// #1
    3de4:	str	w0, [x19, #304]
    3de8:	ldp	x21, x22, [sp, #32]
    3dec:	ldp	x23, x24, [sp, #48]
    3df0:	b	4f58 <d_print_comp_inner+0x4388>
    3df4:	ldr	x1, [x22, #8]
    3df8:	ldr	w2, [x1]
    3dfc:	mov	w21, #0x0                   	// #0
    3e00:	cmp	w2, #0x27
    3e04:	b.eq	3e8c <d_print_comp_inner+0x32bc>  // b.none
    3e08:	ldr	x0, [x19, #256]
    3e0c:	cmp	x0, #0xff
    3e10:	b.eq	4118 <d_print_comp_inner+0x3548>  // b.none
    3e14:	ldr	x1, [x19, #256]
    3e18:	add	x0, x1, #0x1
    3e1c:	str	x0, [x19, #256]
    3e20:	mov	w0, #0x28                  	// #40
    3e24:	strb	w0, [x19, x1]
    3e28:	strb	w0, [x19, #264]
    3e2c:	ldr	x2, [x22, #8]
    3e30:	mov	w1, w20
    3e34:	mov	x0, x19
    3e38:	bl	5050 <d_print_comp>
    3e3c:	ldr	x0, [x19, #256]
    3e40:	cmp	x0, #0xff
    3e44:	b.eq	4144 <d_print_comp_inner+0x3574>  // b.none
    3e48:	add	x2, x0, #0x1
    3e4c:	str	x2, [x19, #256]
    3e50:	mov	w1, #0x29                  	// #41
    3e54:	strb	w1, [x19, x0]
    3e58:	strb	w1, [x19, #264]
    3e5c:	ldr	w0, [x22]
    3e60:	cmp	w0, #0x3e
    3e64:	b.eq	4194 <d_print_comp_inner+0x35c4>  // b.none
    3e68:	cmp	w21, #0x8
    3e6c:	b.eq	41e0 <d_print_comp_inner+0x3610>  // b.none
    3e70:	ldr	x2, [x22, #16]
    3e74:	mov	w1, w20
    3e78:	mov	x0, x19
    3e7c:	bl	5050 <d_print_comp>
    3e80:	ldp	x21, x22, [sp, #32]
    3e84:	ldp	x23, x24, [sp, #48]
    3e88:	b	4f58 <d_print_comp_inner+0x4388>
    3e8c:	ldr	x1, [x1, #8]
    3e90:	ldr	w21, [x1, #28]
    3e94:	cmp	w21, #0x6
    3e98:	b.ls	3f04 <d_print_comp_inner+0x3334>  // b.plast
    3e9c:	cmp	w21, #0x7
    3ea0:	b.ne	3e08 <d_print_comp_inner+0x3238>  // b.any
    3ea4:	ldr	x1, [x22, #16]
    3ea8:	ldr	w2, [x1]
    3eac:	cbnz	w2, 3e08 <d_print_comp_inner+0x3238>
    3eb0:	ldr	w2, [x1, #16]
    3eb4:	cmp	w0, #0x3d
    3eb8:	ccmp	w2, #0x1, #0x0, eq  // eq = none
    3ebc:	b.ne	3e08 <d_print_comp_inner+0x3238>  // b.any
    3ec0:	ldr	x0, [x1, #8]
    3ec4:	ldrb	w0, [x0]
    3ec8:	cmp	w0, #0x30
    3ecc:	b.eq	40ec <d_print_comp_inner+0x351c>  // b.none
    3ed0:	cmp	w0, #0x31
    3ed4:	b.ne	3e08 <d_print_comp_inner+0x3238>  // b.any
    3ed8:	adrp	x20, 0 <is_fnqual_component_type>
    3edc:	add	x20, x20, #0x0
    3ee0:	mov	x0, x20
    3ee4:	bl	0 <__asan_internal_strlen>
    3ee8:	mov	x2, x0
    3eec:	mov	x1, x20
    3ef0:	mov	x0, x19
    3ef4:	bl	7fc <d_append_buffer>
    3ef8:	ldp	x21, x22, [sp, #32]
    3efc:	ldp	x23, x24, [sp, #48]
    3f00:	b	4f58 <d_print_comp_inner+0x4388>
    3f04:	cbz	w21, 3e08 <d_print_comp_inner+0x3238>
    3f08:	ldr	x1, [x22, #16]
    3f0c:	ldr	w1, [x1]
    3f10:	cbnz	w1, 3e08 <d_print_comp_inner+0x3238>
    3f14:	cmp	w0, #0x3e
    3f18:	b.eq	3f6c <d_print_comp_inner+0x339c>  // b.none
    3f1c:	ldr	x2, [x22, #16]
    3f20:	mov	w1, w20
    3f24:	mov	x0, x19
    3f28:	bl	5050 <d_print_comp>
    3f2c:	cmp	w21, #0x4
    3f30:	b.eq	4094 <d_print_comp_inner+0x34c4>  // b.none
    3f34:	b.ls	3fc0 <d_print_comp_inner+0x33f0>  // b.plast
    3f38:	cmp	w21, #0x5
    3f3c:	b.eq	40c0 <d_print_comp_inner+0x34f0>  // b.none
    3f40:	adrp	x20, 0 <is_fnqual_component_type>
    3f44:	add	x20, x20, #0x0
    3f48:	mov	x0, x20
    3f4c:	bl	0 <__asan_internal_strlen>
    3f50:	mov	x2, x0
    3f54:	mov	x1, x20
    3f58:	mov	x0, x19
    3f5c:	bl	7fc <d_append_buffer>
    3f60:	ldp	x21, x22, [sp, #32]
    3f64:	ldp	x23, x24, [sp, #48]
    3f68:	b	4f58 <d_print_comp_inner+0x4388>
    3f6c:	ldr	x0, [x19, #256]
    3f70:	cmp	x0, #0xff
    3f74:	b.eq	3f94 <d_print_comp_inner+0x33c4>  // b.none
    3f78:	ldr	x1, [x19, #256]
    3f7c:	add	x0, x1, #0x1
    3f80:	str	x0, [x19, #256]
    3f84:	mov	w0, #0x2d                  	// #45
    3f88:	strb	w0, [x19, x1]
    3f8c:	strb	w0, [x19, #264]
    3f90:	b	3f1c <d_print_comp_inner+0x334c>
    3f94:	strb	wzr, [x19, #255]
    3f98:	ldr	x3, [x19, #272]
    3f9c:	ldr	x2, [x19, #280]
    3fa0:	mov	x1, #0xff                  	// #255
    3fa4:	mov	x0, x19
    3fa8:	blr	x3
    3fac:	str	xzr, [x19, #256]
    3fb0:	ldr	x0, [x19, #320]
    3fb4:	add	x0, x0, #0x1
    3fb8:	str	x0, [x19, #320]
    3fbc:	b	3f78 <d_print_comp_inner+0x33a8>
    3fc0:	cmp	w21, #0x2
    3fc4:	b.eq	400c <d_print_comp_inner+0x343c>  // b.none
    3fc8:	cmp	w21, #0x3
    3fcc:	b.ne	4000 <d_print_comp_inner+0x3430>  // b.any
    3fd0:	ldr	x0, [x19, #256]
    3fd4:	cmp	x0, #0xff
    3fd8:	b.eq	4068 <d_print_comp_inner+0x3498>  // b.none
    3fdc:	ldr	x1, [x19, #256]
    3fe0:	add	x0, x1, #0x1
    3fe4:	str	x0, [x19, #256]
    3fe8:	mov	w0, #0x6c                  	// #108
    3fec:	strb	w0, [x19, x1]
    3ff0:	strb	w0, [x19, #264]
    3ff4:	ldp	x21, x22, [sp, #32]
    3ff8:	ldp	x23, x24, [sp, #48]
    3ffc:	b	4f58 <d_print_comp_inner+0x4388>
    4000:	ldp	x21, x22, [sp, #32]
    4004:	ldp	x23, x24, [sp, #48]
    4008:	b	4f58 <d_print_comp_inner+0x4388>
    400c:	ldr	x0, [x19, #256]
    4010:	cmp	x0, #0xff
    4014:	b.eq	403c <d_print_comp_inner+0x346c>  // b.none
    4018:	ldr	x1, [x19, #256]
    401c:	add	x0, x1, #0x1
    4020:	str	x0, [x19, #256]
    4024:	mov	w0, #0x75                  	// #117
    4028:	strb	w0, [x19, x1]
    402c:	strb	w0, [x19, #264]
    4030:	ldp	x21, x22, [sp, #32]
    4034:	ldp	x23, x24, [sp, #48]
    4038:	b	4f58 <d_print_comp_inner+0x4388>
    403c:	strb	wzr, [x19, #255]
    4040:	ldr	x3, [x19, #272]
    4044:	ldr	x2, [x19, #280]
    4048:	mov	x1, #0xff                  	// #255
    404c:	mov	x0, x19
    4050:	blr	x3
    4054:	str	xzr, [x19, #256]
    4058:	ldr	x0, [x19, #320]
    405c:	add	x0, x0, #0x1
    4060:	str	x0, [x19, #320]
    4064:	b	4018 <d_print_comp_inner+0x3448>
    4068:	strb	wzr, [x19, #255]
    406c:	ldr	x3, [x19, #272]
    4070:	ldr	x2, [x19, #280]
    4074:	mov	x1, #0xff                  	// #255
    4078:	mov	x0, x19
    407c:	blr	x3
    4080:	str	xzr, [x19, #256]
    4084:	ldr	x0, [x19, #320]
    4088:	add	x0, x0, #0x1
    408c:	str	x0, [x19, #320]
    4090:	b	3fdc <d_print_comp_inner+0x340c>
    4094:	adrp	x20, 0 <is_fnqual_component_type>
    4098:	add	x20, x20, #0x0
    409c:	mov	x0, x20
    40a0:	bl	0 <__asan_internal_strlen>
    40a4:	mov	x2, x0
    40a8:	mov	x1, x20
    40ac:	mov	x0, x19
    40b0:	bl	7fc <d_append_buffer>
    40b4:	ldp	x21, x22, [sp, #32]
    40b8:	ldp	x23, x24, [sp, #48]
    40bc:	b	4f58 <d_print_comp_inner+0x4388>
    40c0:	adrp	x20, 0 <is_fnqual_component_type>
    40c4:	add	x20, x20, #0x0
    40c8:	mov	x0, x20
    40cc:	bl	0 <__asan_internal_strlen>
    40d0:	mov	x2, x0
    40d4:	mov	x1, x20
    40d8:	mov	x0, x19
    40dc:	bl	7fc <d_append_buffer>
    40e0:	ldp	x21, x22, [sp, #32]
    40e4:	ldp	x23, x24, [sp, #48]
    40e8:	b	4f58 <d_print_comp_inner+0x4388>
    40ec:	adrp	x20, 0 <is_fnqual_component_type>
    40f0:	add	x20, x20, #0x0
    40f4:	mov	x0, x20
    40f8:	bl	0 <__asan_internal_strlen>
    40fc:	mov	x2, x0
    4100:	mov	x1, x20
    4104:	mov	x0, x19
    4108:	bl	7fc <d_append_buffer>
    410c:	ldp	x21, x22, [sp, #32]
    4110:	ldp	x23, x24, [sp, #48]
    4114:	b	4f58 <d_print_comp_inner+0x4388>
    4118:	strb	wzr, [x19, #255]
    411c:	ldr	x3, [x19, #272]
    4120:	ldr	x2, [x19, #280]
    4124:	mov	x1, #0xff                  	// #255
    4128:	mov	x0, x19
    412c:	blr	x3
    4130:	str	xzr, [x19, #256]
    4134:	ldr	x0, [x19, #320]
    4138:	add	x0, x0, #0x1
    413c:	str	x0, [x19, #320]
    4140:	b	3e14 <d_print_comp_inner+0x3244>
    4144:	strb	wzr, [x19, #255]
    4148:	ldr	x3, [x19, #272]
    414c:	ldr	x2, [x19, #280]
    4150:	mov	x1, #0xff                  	// #255
    4154:	mov	x0, x19
    4158:	blr	x3
    415c:	ldr	x0, [x19, #320]
    4160:	add	x0, x0, #0x1
    4164:	str	x0, [x19, #320]
    4168:	mov	x0, #0x1                   	// #1
    416c:	str	x0, [x19, #256]
    4170:	mov	w0, #0x29                  	// #41
    4174:	strb	w0, [x19]
    4178:	strb	w0, [x19, #264]
    417c:	ldr	w0, [x22]
    4180:	cmp	w0, #0x3e
    4184:	b.eq	41c4 <d_print_comp_inner+0x35f4>  // b.none
    4188:	cmp	w21, #0x8
    418c:	b.ne	3e70 <d_print_comp_inner+0x32a0>  // b.any
    4190:	b	41ec <d_print_comp_inner+0x361c>
    4194:	cmp	x2, #0xff
    4198:	b.ne	41c4 <d_print_comp_inner+0x35f4>  // b.any
    419c:	strb	wzr, [x19, #255]
    41a0:	ldr	x3, [x19, #272]
    41a4:	ldr	x2, [x19, #280]
    41a8:	mov	x1, #0xff                  	// #255
    41ac:	mov	x0, x19
    41b0:	blr	x3
    41b4:	str	xzr, [x19, #256]
    41b8:	ldr	x0, [x19, #320]
    41bc:	add	x0, x0, #0x1
    41c0:	str	x0, [x19, #320]
    41c4:	ldr	x1, [x19, #256]
    41c8:	add	x0, x1, #0x1
    41cc:	str	x0, [x19, #256]
    41d0:	mov	w0, #0x2d                  	// #45
    41d4:	strb	w0, [x19, x1]
    41d8:	strb	w0, [x19, #264]
    41dc:	b	3e68 <d_print_comp_inner+0x3298>
    41e0:	ldr	x0, [x19, #256]
    41e4:	cmp	x0, #0xff
    41e8:	b.eq	4244 <d_print_comp_inner+0x3674>  // b.none
    41ec:	ldr	x1, [x19, #256]
    41f0:	add	x0, x1, #0x1
    41f4:	str	x0, [x19, #256]
    41f8:	mov	w0, #0x5b                  	// #91
    41fc:	strb	w0, [x19, x1]
    4200:	strb	w0, [x19, #264]
    4204:	ldr	x2, [x22, #16]
    4208:	mov	w1, w20
    420c:	mov	x0, x19
    4210:	bl	5050 <d_print_comp>
    4214:	ldr	x0, [x19, #256]
    4218:	cmp	x0, #0xff
    421c:	b.eq	4270 <d_print_comp_inner+0x36a0>  // b.none
    4220:	ldr	x1, [x19, #256]
    4224:	add	x0, x1, #0x1
    4228:	str	x0, [x19, #256]
    422c:	mov	w0, #0x5d                  	// #93
    4230:	strb	w0, [x19, x1]
    4234:	strb	w0, [x19, #264]
    4238:	ldp	x21, x22, [sp, #32]
    423c:	ldp	x23, x24, [sp, #48]
    4240:	b	4f58 <d_print_comp_inner+0x4388>
    4244:	strb	wzr, [x19, #255]
    4248:	ldr	x3, [x19, #272]
    424c:	ldr	x2, [x19, #280]
    4250:	mov	x1, #0xff                  	// #255
    4254:	mov	x0, x19
    4258:	blr	x3
    425c:	str	xzr, [x19, #256]
    4260:	ldr	x0, [x19, #320]
    4264:	add	x0, x0, #0x1
    4268:	str	x0, [x19, #320]
    426c:	b	41ec <d_print_comp_inner+0x361c>
    4270:	strb	wzr, [x19, #255]
    4274:	ldr	x3, [x19, #272]
    4278:	ldr	x2, [x19, #280]
    427c:	mov	x1, #0xff                  	// #255
    4280:	mov	x0, x19
    4284:	blr	x3
    4288:	str	xzr, [x19, #256]
    428c:	ldr	x0, [x19, #320]
    4290:	add	x0, x0, #0x1
    4294:	str	x0, [x19, #320]
    4298:	b	4220 <d_print_comp_inner+0x3650>
    429c:	add	x20, sp, #0x80
    42a0:	ldr	w2, [x22, #8]
    42a4:	adrp	x1, 0 <is_fnqual_component_type>
    42a8:	add	x1, x1, #0x0
    42ac:	mov	x0, x20
    42b0:	bl	0 <sprintf>
    42b4:	mov	x0, x20
    42b8:	bl	0 <__asan_internal_strlen>
    42bc:	cbz	x0, 5024 <d_print_comp_inner+0x4454>
    42c0:	add	x20, sp, #0x80
    42c4:	add	x22, x0, x20
    42c8:	mov	x23, #0xff                  	// #255
    42cc:	b	42f0 <d_print_comp_inner+0x3720>
    42d0:	ldr	x0, [x19, #256]
    42d4:	add	x1, x0, #0x1
    42d8:	str	x1, [x19, #256]
    42dc:	strb	w21, [x19, x0]
    42e0:	strb	w21, [x19, #264]
    42e4:	add	x20, x20, #0x1
    42e8:	cmp	x20, x22
    42ec:	b.eq	432c <d_print_comp_inner+0x375c>  // b.none
    42f0:	ldrb	w21, [x20]
    42f4:	ldr	x0, [x19, #256]
    42f8:	cmp	x0, #0xff
    42fc:	b.ne	42d0 <d_print_comp_inner+0x3700>  // b.any
    4300:	strb	wzr, [x19, #255]
    4304:	ldr	x3, [x19, #272]
    4308:	ldr	x2, [x19, #280]
    430c:	mov	x1, x23
    4310:	mov	x0, x19
    4314:	blr	x3
    4318:	str	xzr, [x19, #256]
    431c:	ldr	x0, [x19, #320]
    4320:	add	x0, x0, #0x1
    4324:	str	x0, [x19, #320]
    4328:	b	42d0 <d_print_comp_inner+0x3700>
    432c:	ldp	x21, x22, [sp, #32]
    4330:	ldp	x23, x24, [sp, #48]
    4334:	b	4f58 <d_print_comp_inner+0x4388>
    4338:	adrp	x0, 0 <is_fnqual_component_type>
    433c:	add	x0, x0, #0x0
    4340:	bl	0 <__asan_internal_strlen>
    4344:	cbz	x0, 43c0 <d_print_comp_inner+0x37f0>
    4348:	stp	x25, x26, [sp, #64]
    434c:	adrp	x21, 0 <is_fnqual_component_type>
    4350:	add	x21, x21, #0x0
    4354:	add	x24, x0, x21
    4358:	mov	x25, #0xff                  	// #255
    435c:	b	4380 <d_print_comp_inner+0x37b0>
    4360:	ldr	x0, [x19, #256]
    4364:	add	x1, x0, #0x1
    4368:	str	x1, [x19, #256]
    436c:	strb	w23, [x19, x0]
    4370:	strb	w23, [x19, #264]
    4374:	add	x21, x21, #0x1
    4378:	cmp	x21, x24
    437c:	b.eq	43bc <d_print_comp_inner+0x37ec>  // b.none
    4380:	ldrb	w23, [x21]
    4384:	ldr	x0, [x19, #256]
    4388:	cmp	x0, #0xff
    438c:	b.ne	4360 <d_print_comp_inner+0x3790>  // b.any
    4390:	strb	wzr, [x19, #255]
    4394:	ldr	x3, [x19, #272]
    4398:	ldr	x2, [x19, #280]
    439c:	mov	x1, x25
    43a0:	mov	x0, x19
    43a4:	blr	x3
    43a8:	str	xzr, [x19, #256]
    43ac:	ldr	x0, [x19, #320]
    43b0:	add	x0, x0, #0x1
    43b4:	str	x0, [x19, #320]
    43b8:	b	4360 <d_print_comp_inner+0x3790>
    43bc:	ldp	x25, x26, [sp, #64]
    43c0:	ldr	x2, [x22, #8]
    43c4:	mov	w1, w20
    43c8:	mov	x0, x19
    43cc:	bl	5050 <d_print_comp>
    43d0:	ldp	x21, x22, [sp, #32]
    43d4:	ldp	x23, x24, [sp, #48]
    43d8:	b	4f58 <d_print_comp_inner+0x4388>
    43dc:	ldr	x2, [x22, #8]
    43e0:	mov	w1, w20
    43e4:	mov	x0, x19
    43e8:	bl	5050 <d_print_comp>
    43ec:	ldr	x2, [x22, #16]
    43f0:	mov	w1, w20
    43f4:	mov	x0, x19
    43f8:	bl	5050 <d_print_comp>
    43fc:	ldp	x21, x22, [sp, #32]
    4400:	ldp	x23, x24, [sp, #48]
    4404:	b	4f58 <d_print_comp_inner+0x4388>
    4408:	ldrb	w20, [x22, #8]
    440c:	ldr	x0, [x19, #256]
    4410:	cmp	x0, #0xff
    4414:	b.eq	4438 <d_print_comp_inner+0x3868>  // b.none
    4418:	ldr	x0, [x19, #256]
    441c:	add	x1, x0, #0x1
    4420:	str	x1, [x19, #256]
    4424:	strb	w20, [x19, x0]
    4428:	strb	w20, [x19, #264]
    442c:	ldp	x21, x22, [sp, #32]
    4430:	ldp	x23, x24, [sp, #48]
    4434:	b	4f58 <d_print_comp_inner+0x4388>
    4438:	strb	wzr, [x19, #255]
    443c:	ldr	x3, [x19, #272]
    4440:	ldr	x2, [x19, #280]
    4444:	mov	x1, #0xff                  	// #255
    4448:	mov	x0, x19
    444c:	blr	x3
    4450:	str	xzr, [x19, #256]
    4454:	ldr	x0, [x19, #320]
    4458:	add	x0, x0, #0x1
    445c:	str	x0, [x19, #320]
    4460:	b	4418 <d_print_comp_inner+0x3848>
    4464:	adrp	x0, 0 <is_fnqual_component_type>
    4468:	add	x0, x0, #0x0
    446c:	bl	0 <__asan_internal_strlen>
    4470:	cbz	x0, 44ec <d_print_comp_inner+0x391c>
    4474:	stp	x25, x26, [sp, #64]
    4478:	adrp	x21, 0 <is_fnqual_component_type>
    447c:	add	x21, x21, #0x0
    4480:	add	x24, x0, x21
    4484:	mov	x25, #0xff                  	// #255
    4488:	b	44ac <d_print_comp_inner+0x38dc>
    448c:	ldr	x0, [x19, #256]
    4490:	add	x1, x0, #0x1
    4494:	str	x1, [x19, #256]
    4498:	strb	w23, [x19, x0]
    449c:	strb	w23, [x19, #264]
    44a0:	add	x21, x21, #0x1
    44a4:	cmp	x21, x24
    44a8:	b.eq	44e8 <d_print_comp_inner+0x3918>  // b.none
    44ac:	ldrb	w23, [x21]
    44b0:	ldr	x0, [x19, #256]
    44b4:	cmp	x0, #0xff
    44b8:	b.ne	448c <d_print_comp_inner+0x38bc>  // b.any
    44bc:	strb	wzr, [x19, #255]
    44c0:	ldr	x3, [x19, #272]
    44c4:	ldr	x2, [x19, #280]
    44c8:	mov	x1, x25
    44cc:	mov	x0, x19
    44d0:	blr	x3
    44d4:	str	xzr, [x19, #256]
    44d8:	ldr	x0, [x19, #320]
    44dc:	add	x0, x0, #0x1
    44e0:	str	x0, [x19, #320]
    44e4:	b	448c <d_print_comp_inner+0x38bc>
    44e8:	ldp	x25, x26, [sp, #64]
    44ec:	ldr	x2, [x22, #8]
    44f0:	mov	w1, w20
    44f4:	mov	x0, x19
    44f8:	bl	5050 <d_print_comp>
    44fc:	ldr	x0, [x19, #256]
    4500:	cmp	x0, #0xff
    4504:	b.eq	452c <d_print_comp_inner+0x395c>  // b.none
    4508:	ldr	x1, [x19, #256]
    450c:	add	x0, x1, #0x1
    4510:	str	x0, [x19, #256]
    4514:	mov	w0, #0x29                  	// #41
    4518:	strb	w0, [x19, x1]
    451c:	strb	w0, [x19, #264]
    4520:	ldp	x21, x22, [sp, #32]
    4524:	ldp	x23, x24, [sp, #48]
    4528:	b	4f58 <d_print_comp_inner+0x4388>
    452c:	strb	wzr, [x19, #255]
    4530:	ldr	x3, [x19, #272]
    4534:	ldr	x2, [x19, #280]
    4538:	mov	x1, #0xff                  	// #255
    453c:	mov	x0, x19
    4540:	blr	x3
    4544:	str	xzr, [x19, #256]
    4548:	ldr	x0, [x19, #320]
    454c:	add	x0, x0, #0x1
    4550:	str	x0, [x19, #320]
    4554:	b	4508 <d_print_comp_inner+0x3938>
    4558:	ldr	x1, [x22, #8]
    455c:	mov	x0, x19
    4560:	bl	90c <d_find_pack>
    4564:	cbz	x0, 459c <d_print_comp_inner+0x39cc>
    4568:	stp	x25, x26, [sp, #64]
    456c:	stp	x27, x28, [sp, #80]
    4570:	bl	a04 <d_pack_length>
    4574:	mov	w25, w0
    4578:	ldr	x27, [x22, #8]
    457c:	cmp	w0, #0x0
    4580:	b.le	5030 <d_print_comp_inner+0x4460>
    4584:	sub	w28, w0, #0x1
    4588:	adrp	x0, 0 <is_fnqual_component_type>
    458c:	add	x0, x0, #0x0
    4590:	str	x0, [sp, #96]
    4594:	mov	x26, #0xff                  	// #255
    4598:	b	4640 <d_print_comp_inner+0x3a70>
    459c:	ldr	x2, [x22, #8]
    45a0:	mov	w1, w20
    45a4:	mov	x0, x19
    45a8:	bl	6574 <d_print_subexpr>
    45ac:	adrp	x20, 0 <is_fnqual_component_type>
    45b0:	add	x20, x20, #0x0
    45b4:	mov	x0, x20
    45b8:	bl	0 <__asan_internal_strlen>
    45bc:	mov	x2, x0
    45c0:	mov	x1, x20
    45c4:	mov	x0, x19
    45c8:	bl	7fc <d_append_buffer>
    45cc:	ldp	x21, x22, [sp, #32]
    45d0:	ldp	x23, x24, [sp, #48]
    45d4:	b	4f58 <d_print_comp_inner+0x4388>
    45d8:	ldr	x0, [x19, #256]
    45dc:	add	x1, x0, #0x1
    45e0:	str	x1, [x19, #256]
    45e4:	strb	w23, [x19, x0]
    45e8:	strb	w23, [x19, #264]
    45ec:	add	x22, x22, #0x1
    45f0:	cmp	x22, x24
    45f4:	b.eq	4634 <d_print_comp_inner+0x3a64>  // b.none
    45f8:	ldrb	w23, [x22]
    45fc:	ldr	x0, [x19, #256]
    4600:	cmp	x0, #0xff
    4604:	b.ne	45d8 <d_print_comp_inner+0x3a08>  // b.any
    4608:	strb	wzr, [x19, #255]
    460c:	ldr	x3, [x19, #272]
    4610:	ldr	x2, [x19, #280]
    4614:	mov	x1, x26
    4618:	mov	x0, x19
    461c:	blr	x3
    4620:	str	xzr, [x19, #256]
    4624:	ldr	x0, [x19, #320]
    4628:	add	x0, x0, #0x1
    462c:	str	x0, [x19, #320]
    4630:	b	45d8 <d_print_comp_inner+0x3a08>
    4634:	add	w21, w21, #0x1
    4638:	cmp	w25, w21
    463c:	b.eq	4678 <d_print_comp_inner+0x3aa8>  // b.none
    4640:	str	w21, [x19, #316]
    4644:	mov	x2, x27
    4648:	mov	w1, w20
    464c:	mov	x0, x19
    4650:	bl	5050 <d_print_comp>
    4654:	cmp	w28, w21
    4658:	b.le	4634 <d_print_comp_inner+0x3a64>
    465c:	ldr	x0, [sp, #96]
    4660:	bl	0 <__asan_internal_strlen>
    4664:	cbz	x0, 4634 <d_print_comp_inner+0x3a64>
    4668:	adrp	x1, 0 <is_fnqual_component_type>
    466c:	add	x22, x1, #0x0
    4670:	add	x24, x0, x22
    4674:	b	45f8 <d_print_comp_inner+0x3a28>
    4678:	ldp	x21, x22, [sp, #32]
    467c:	ldp	x23, x24, [sp, #48]
    4680:	ldp	x25, x26, [sp, #64]
    4684:	ldp	x27, x28, [sp, #80]
    4688:	b	4f58 <d_print_comp_inner+0x4388>
    468c:	ldr	x23, [x22, #8]
    4690:	cbnz	x23, 4720 <d_print_comp_inner+0x3b50>
    4694:	adrp	x0, 0 <is_fnqual_component_type>
    4698:	add	x0, x0, #0x0
    469c:	bl	0 <__asan_internal_strlen>
    46a0:	cbz	x0, 5044 <d_print_comp_inner+0x4474>
    46a4:	adrp	x20, 0 <is_fnqual_component_type>
    46a8:	add	x20, x20, #0x0
    46ac:	add	x22, x0, x20
    46b0:	mov	x23, #0xff                  	// #255
    46b4:	b	46d8 <d_print_comp_inner+0x3b08>
    46b8:	ldr	x0, [x19, #256]
    46bc:	add	x1, x0, #0x1
    46c0:	str	x1, [x19, #256]
    46c4:	strb	w21, [x19, x0]
    46c8:	strb	w21, [x19, #264]
    46cc:	add	x20, x20, #0x1
    46d0:	cmp	x22, x20
    46d4:	b.eq	4714 <d_print_comp_inner+0x3b44>  // b.none
    46d8:	ldrb	w21, [x20]
    46dc:	ldr	x0, [x19, #256]
    46e0:	cmp	x0, #0xff
    46e4:	b.ne	46b8 <d_print_comp_inner+0x3ae8>  // b.any
    46e8:	strb	wzr, [x19, #255]
    46ec:	ldr	x3, [x19, #272]
    46f0:	ldr	x2, [x19, #280]
    46f4:	mov	x1, x23
    46f8:	mov	x0, x19
    46fc:	blr	x3
    4700:	str	xzr, [x19, #256]
    4704:	ldr	x0, [x19, #320]
    4708:	add	x0, x0, #0x1
    470c:	str	x0, [x19, #320]
    4710:	b	46b8 <d_print_comp_inner+0x3ae8>
    4714:	ldp	x21, x22, [sp, #32]
    4718:	ldp	x23, x24, [sp, #48]
    471c:	b	4f58 <d_print_comp_inner+0x4388>
    4720:	adrp	x0, 0 <is_fnqual_component_type>
    4724:	add	x0, x0, #0x0
    4728:	bl	0 <__asan_internal_strlen>
    472c:	cbz	x0, 47a0 <d_print_comp_inner+0x3bd0>
    4730:	adrp	x20, 0 <is_fnqual_component_type>
    4734:	add	x20, x20, #0x0
    4738:	add	x22, x0, x20
    473c:	mov	x24, #0xff                  	// #255
    4740:	b	4764 <d_print_comp_inner+0x3b94>
    4744:	ldr	x0, [x19, #256]
    4748:	add	x1, x0, #0x1
    474c:	str	x1, [x19, #256]
    4750:	strb	w21, [x19, x0]
    4754:	strb	w21, [x19, #264]
    4758:	add	x20, x20, #0x1
    475c:	cmp	x22, x20
    4760:	b.eq	47a0 <d_print_comp_inner+0x3bd0>  // b.none
    4764:	ldrb	w21, [x20]
    4768:	ldr	x0, [x19, #256]
    476c:	cmp	x0, #0xff
    4770:	b.ne	4744 <d_print_comp_inner+0x3b74>  // b.any
    4774:	strb	wzr, [x19, #255]
    4778:	ldr	x3, [x19, #272]
    477c:	ldr	x2, [x19, #280]
    4780:	mov	x1, x24
    4784:	mov	x0, x19
    4788:	blr	x3
    478c:	str	xzr, [x19, #256]
    4790:	ldr	x0, [x19, #320]
    4794:	add	x0, x0, #0x1
    4798:	str	x0, [x19, #320]
    479c:	b	4744 <d_print_comp_inner+0x3b74>
    47a0:	add	x20, sp, #0x80
    47a4:	mov	w2, w23
    47a8:	adrp	x1, 0 <is_fnqual_component_type>
    47ac:	add	x1, x1, #0x0
    47b0:	mov	x0, x20
    47b4:	bl	0 <sprintf>
    47b8:	mov	x0, x20
    47bc:	bl	0 <__asan_internal_strlen>
    47c0:	cbz	x0, 4830 <d_print_comp_inner+0x3c60>
    47c4:	add	x20, sp, #0x80
    47c8:	add	x22, x0, x20
    47cc:	mov	x23, #0xff                  	// #255
    47d0:	b	47f4 <d_print_comp_inner+0x3c24>
    47d4:	ldr	x0, [x19, #256]
    47d8:	add	x1, x0, #0x1
    47dc:	str	x1, [x19, #256]
    47e0:	strb	w21, [x19, x0]
    47e4:	strb	w21, [x19, #264]
    47e8:	add	x20, x20, #0x1
    47ec:	cmp	x22, x20
    47f0:	b.eq	4830 <d_print_comp_inner+0x3c60>  // b.none
    47f4:	ldrb	w21, [x20]
    47f8:	ldr	x0, [x19, #256]
    47fc:	cmp	x0, #0xff
    4800:	b.ne	47d4 <d_print_comp_inner+0x3c04>  // b.any
    4804:	strb	wzr, [x19, #255]
    4808:	ldr	x3, [x19, #272]
    480c:	ldr	x2, [x19, #280]
    4810:	mov	x1, x23
    4814:	mov	x0, x19
    4818:	blr	x3
    481c:	str	xzr, [x19, #256]
    4820:	ldr	x0, [x19, #320]
    4824:	add	x0, x0, #0x1
    4828:	str	x0, [x19, #320]
    482c:	b	47d4 <d_print_comp_inner+0x3c04>
    4830:	ldr	x0, [x19, #256]
    4834:	cmp	x0, #0xff
    4838:	b.eq	4860 <d_print_comp_inner+0x3c90>  // b.none
    483c:	ldr	x1, [x19, #256]
    4840:	add	x0, x1, #0x1
    4844:	str	x0, [x19, #256]
    4848:	mov	w0, #0x7d                  	// #125
    484c:	strb	w0, [x19, x1]
    4850:	strb	w0, [x19, #264]
    4854:	ldp	x21, x22, [sp, #32]
    4858:	ldp	x23, x24, [sp, #48]
    485c:	b	4f58 <d_print_comp_inner+0x4388>
    4860:	strb	wzr, [x19, #255]
    4864:	ldr	x3, [x19, #272]
    4868:	ldr	x2, [x19, #280]
    486c:	mov	x1, #0xff                  	// #255
    4870:	mov	x0, x19
    4874:	blr	x3
    4878:	str	xzr, [x19, #256]
    487c:	ldr	x0, [x19, #320]
    4880:	add	x0, x0, #0x1
    4884:	str	x0, [x19, #320]
    4888:	b	483c <d_print_comp_inner+0x3c6c>
    488c:	adrp	x0, 0 <is_fnqual_component_type>
    4890:	add	x0, x0, #0x0
    4894:	bl	0 <__asan_internal_strlen>
    4898:	cbz	x0, 4914 <d_print_comp_inner+0x3d44>
    489c:	stp	x25, x26, [sp, #64]
    48a0:	adrp	x21, 0 <is_fnqual_component_type>
    48a4:	add	x21, x21, #0x0
    48a8:	add	x24, x0, x21
    48ac:	mov	x25, #0xff                  	// #255
    48b0:	b	48d4 <d_print_comp_inner+0x3d04>
    48b4:	ldr	x0, [x19, #256]
    48b8:	add	x1, x0, #0x1
    48bc:	str	x1, [x19, #256]
    48c0:	strb	w23, [x19, x0]
    48c4:	strb	w23, [x19, #264]
    48c8:	add	x21, x21, #0x1
    48cc:	cmp	x21, x24
    48d0:	b.eq	4910 <d_print_comp_inner+0x3d40>  // b.none
    48d4:	ldrb	w23, [x21]
    48d8:	ldr	x0, [x19, #256]
    48dc:	cmp	x0, #0xff
    48e0:	b.ne	48b4 <d_print_comp_inner+0x3ce4>  // b.any
    48e4:	strb	wzr, [x19, #255]
    48e8:	ldr	x3, [x19, #272]
    48ec:	ldr	x2, [x19, #280]
    48f0:	mov	x1, x25
    48f4:	mov	x0, x19
    48f8:	blr	x3
    48fc:	str	xzr, [x19, #256]
    4900:	ldr	x0, [x19, #320]
    4904:	add	x0, x0, #0x1
    4908:	str	x0, [x19, #320]
    490c:	b	48b4 <d_print_comp_inner+0x3ce4>
    4910:	ldp	x25, x26, [sp, #64]
    4914:	ldr	x2, [x22, #8]
    4918:	mov	w1, w20
    491c:	mov	x0, x19
    4920:	bl	5050 <d_print_comp>
    4924:	ldp	x21, x22, [sp, #32]
    4928:	ldp	x23, x24, [sp, #48]
    492c:	b	4f58 <d_print_comp_inner+0x4388>
    4930:	adrp	x0, 0 <is_fnqual_component_type>
    4934:	add	x0, x0, #0x0
    4938:	bl	0 <__asan_internal_strlen>
    493c:	cbz	x0, 49b8 <d_print_comp_inner+0x3de8>
    4940:	stp	x25, x26, [sp, #64]
    4944:	adrp	x21, 0 <is_fnqual_component_type>
    4948:	add	x21, x21, #0x0
    494c:	add	x24, x0, x21
    4950:	mov	x25, #0xff                  	// #255
    4954:	b	4978 <d_print_comp_inner+0x3da8>
    4958:	ldr	x0, [x19, #256]
    495c:	add	x1, x0, #0x1
    4960:	str	x1, [x19, #256]
    4964:	strb	w23, [x19, x0]
    4968:	strb	w23, [x19, #264]
    496c:	add	x21, x21, #0x1
    4970:	cmp	x21, x24
    4974:	b.eq	49b4 <d_print_comp_inner+0x3de4>  // b.none
    4978:	ldrb	w23, [x21]
    497c:	ldr	x0, [x19, #256]
    4980:	cmp	x0, #0xff
    4984:	b.ne	4958 <d_print_comp_inner+0x3d88>  // b.any
    4988:	strb	wzr, [x19, #255]
    498c:	ldr	x3, [x19, #272]
    4990:	ldr	x2, [x19, #280]
    4994:	mov	x1, x25
    4998:	mov	x0, x19
    499c:	blr	x3
    49a0:	str	xzr, [x19, #256]
    49a4:	ldr	x0, [x19, #320]
    49a8:	add	x0, x0, #0x1
    49ac:	str	x0, [x19, #320]
    49b0:	b	4958 <d_print_comp_inner+0x3d88>
    49b4:	ldp	x25, x26, [sp, #64]
    49b8:	ldr	x2, [x22, #8]
    49bc:	mov	w1, w20
    49c0:	mov	x0, x19
    49c4:	bl	5050 <d_print_comp>
    49c8:	ldp	x21, x22, [sp, #32]
    49cc:	ldp	x23, x24, [sp, #48]
    49d0:	b	4f58 <d_print_comp_inner+0x4388>
    49d4:	adrp	x0, 0 <is_fnqual_component_type>
    49d8:	add	x0, x0, #0x0
    49dc:	bl	0 <__asan_internal_strlen>
    49e0:	cbz	x0, 4a5c <d_print_comp_inner+0x3e8c>
    49e4:	stp	x25, x26, [sp, #64]
    49e8:	adrp	x21, 0 <is_fnqual_component_type>
    49ec:	add	x21, x21, #0x0
    49f0:	add	x24, x0, x21
    49f4:	mov	x25, #0xff                  	// #255
    49f8:	b	4a1c <d_print_comp_inner+0x3e4c>
    49fc:	ldr	x0, [x19, #256]
    4a00:	add	x1, x0, #0x1
    4a04:	str	x1, [x19, #256]
    4a08:	strb	w23, [x19, x0]
    4a0c:	strb	w23, [x19, #264]
    4a10:	add	x21, x21, #0x1
    4a14:	cmp	x21, x24
    4a18:	b.eq	4a58 <d_print_comp_inner+0x3e88>  // b.none
    4a1c:	ldrb	w23, [x21]
    4a20:	ldr	x0, [x19, #256]
    4a24:	cmp	x0, #0xff
    4a28:	b.ne	49fc <d_print_comp_inner+0x3e2c>  // b.any
    4a2c:	strb	wzr, [x19, #255]
    4a30:	ldr	x3, [x19, #272]
    4a34:	ldr	x2, [x19, #280]
    4a38:	mov	x1, x25
    4a3c:	mov	x0, x19
    4a40:	blr	x3
    4a44:	str	xzr, [x19, #256]
    4a48:	ldr	x0, [x19, #320]
    4a4c:	add	x0, x0, #0x1
    4a50:	str	x0, [x19, #320]
    4a54:	b	49fc <d_print_comp_inner+0x3e2c>
    4a58:	ldp	x25, x26, [sp, #64]
    4a5c:	ldr	w0, [x19, #312]
    4a60:	add	w0, w0, #0x1
    4a64:	str	w0, [x19, #312]
    4a68:	ldr	x2, [x22, #8]
    4a6c:	mov	w1, w20
    4a70:	mov	x0, x19
    4a74:	bl	5050 <d_print_comp>
    4a78:	ldr	w0, [x19, #312]
    4a7c:	sub	w0, w0, #0x1
    4a80:	str	w0, [x19, #312]
    4a84:	adrp	x0, 0 <is_fnqual_component_type>
    4a88:	add	x0, x0, #0x0
    4a8c:	bl	0 <__asan_internal_strlen>
    4a90:	cbz	x0, 4b04 <d_print_comp_inner+0x3f34>
    4a94:	adrp	x20, 0 <is_fnqual_component_type>
    4a98:	add	x20, x20, #0x0
    4a9c:	add	x23, x0, x20
    4aa0:	mov	x24, #0xff                  	// #255
    4aa4:	b	4ac8 <d_print_comp_inner+0x3ef8>
    4aa8:	ldr	x0, [x19, #256]
    4aac:	add	x1, x0, #0x1
    4ab0:	str	x1, [x19, #256]
    4ab4:	strb	w21, [x19, x0]
    4ab8:	strb	w21, [x19, #264]
    4abc:	add	x20, x20, #0x1
    4ac0:	cmp	x20, x23
    4ac4:	b.eq	4b04 <d_print_comp_inner+0x3f34>  // b.none
    4ac8:	ldrb	w21, [x20]
    4acc:	ldr	x0, [x19, #256]
    4ad0:	cmp	x0, #0xff
    4ad4:	b.ne	4aa8 <d_print_comp_inner+0x3ed8>  // b.any
    4ad8:	strb	wzr, [x19, #255]
    4adc:	ldr	x3, [x19, #272]
    4ae0:	ldr	x2, [x19, #280]
    4ae4:	mov	x1, x24
    4ae8:	mov	x0, x19
    4aec:	blr	x3
    4af0:	str	xzr, [x19, #256]
    4af4:	ldr	x0, [x19, #320]
    4af8:	add	x0, x0, #0x1
    4afc:	str	x0, [x19, #320]
    4b00:	b	4aa8 <d_print_comp_inner+0x3ed8>
    4b04:	ldr	w2, [x22, #16]
    4b08:	add	x20, sp, #0x80
    4b0c:	add	w2, w2, #0x1
    4b10:	adrp	x1, 0 <is_fnqual_component_type>
    4b14:	add	x1, x1, #0x0
    4b18:	mov	x0, x20
    4b1c:	bl	0 <sprintf>
    4b20:	mov	x0, x20
    4b24:	bl	0 <__asan_internal_strlen>
    4b28:	cbz	x0, 4b98 <d_print_comp_inner+0x3fc8>
    4b2c:	add	x20, sp, #0x80
    4b30:	add	x22, x0, x20
    4b34:	mov	x23, #0xff                  	// #255
    4b38:	b	4b5c <d_print_comp_inner+0x3f8c>
    4b3c:	ldr	x0, [x19, #256]
    4b40:	add	x1, x0, #0x1
    4b44:	str	x1, [x19, #256]
    4b48:	strb	w21, [x19, x0]
    4b4c:	strb	w21, [x19, #264]
    4b50:	add	x20, x20, #0x1
    4b54:	cmp	x20, x22
    4b58:	b.eq	4b98 <d_print_comp_inner+0x3fc8>  // b.none
    4b5c:	ldrb	w21, [x20]
    4b60:	ldr	x0, [x19, #256]
    4b64:	cmp	x0, #0xff
    4b68:	b.ne	4b3c <d_print_comp_inner+0x3f6c>  // b.any
    4b6c:	strb	wzr, [x19, #255]
    4b70:	ldr	x3, [x19, #272]
    4b74:	ldr	x2, [x19, #280]
    4b78:	mov	x1, x23
    4b7c:	mov	x0, x19
    4b80:	blr	x3
    4b84:	str	xzr, [x19, #256]
    4b88:	ldr	x0, [x19, #320]
    4b8c:	add	x0, x0, #0x1
    4b90:	str	x0, [x19, #320]
    4b94:	b	4b3c <d_print_comp_inner+0x3f6c>
    4b98:	ldr	x0, [x19, #256]
    4b9c:	cmp	x0, #0xff
    4ba0:	b.eq	4bc8 <d_print_comp_inner+0x3ff8>  // b.none
    4ba4:	ldr	x1, [x19, #256]
    4ba8:	add	x0, x1, #0x1
    4bac:	str	x0, [x19, #256]
    4bb0:	mov	w0, #0x7d                  	// #125
    4bb4:	strb	w0, [x19, x1]
    4bb8:	strb	w0, [x19, #264]
    4bbc:	ldp	x21, x22, [sp, #32]
    4bc0:	ldp	x23, x24, [sp, #48]
    4bc4:	b	4f58 <d_print_comp_inner+0x4388>
    4bc8:	strb	wzr, [x19, #255]
    4bcc:	ldr	x3, [x19, #272]
    4bd0:	ldr	x2, [x19, #280]
    4bd4:	mov	x1, #0xff                  	// #255
    4bd8:	mov	x0, x19
    4bdc:	blr	x3
    4be0:	str	xzr, [x19, #256]
    4be4:	ldr	x0, [x19, #320]
    4be8:	add	x0, x0, #0x1
    4bec:	str	x0, [x19, #320]
    4bf0:	b	4ba4 <d_print_comp_inner+0x3fd4>
    4bf4:	adrp	x0, 0 <is_fnqual_component_type>
    4bf8:	add	x0, x0, #0x0
    4bfc:	bl	0 <__asan_internal_strlen>
    4c00:	cbz	x0, 4c74 <d_print_comp_inner+0x40a4>
    4c04:	adrp	x20, 0 <is_fnqual_component_type>
    4c08:	add	x20, x20, #0x0
    4c0c:	add	x23, x0, x20
    4c10:	mov	x24, #0xff                  	// #255
    4c14:	b	4c38 <d_print_comp_inner+0x4068>
    4c18:	ldr	x0, [x19, #256]
    4c1c:	add	x1, x0, #0x1
    4c20:	str	x1, [x19, #256]
    4c24:	strb	w21, [x19, x0]
    4c28:	strb	w21, [x19, #264]
    4c2c:	add	x20, x20, #0x1
    4c30:	cmp	x20, x23
    4c34:	b.eq	4c74 <d_print_comp_inner+0x40a4>  // b.none
    4c38:	ldrb	w21, [x20]
    4c3c:	ldr	x0, [x19, #256]
    4c40:	cmp	x0, #0xff
    4c44:	b.ne	4c18 <d_print_comp_inner+0x4048>  // b.any
    4c48:	strb	wzr, [x19, #255]
    4c4c:	ldr	x3, [x19, #272]
    4c50:	ldr	x2, [x19, #280]
    4c54:	mov	x1, x24
    4c58:	mov	x0, x19
    4c5c:	blr	x3
    4c60:	str	xzr, [x19, #256]
    4c64:	ldr	x0, [x19, #320]
    4c68:	add	x0, x0, #0x1
    4c6c:	str	x0, [x19, #320]
    4c70:	b	4c18 <d_print_comp_inner+0x4048>
    4c74:	ldr	x2, [x22, #8]
    4c78:	add	x20, sp, #0x80
    4c7c:	add	w2, w2, #0x1
    4c80:	adrp	x1, 0 <is_fnqual_component_type>
    4c84:	add	x1, x1, #0x0
    4c88:	mov	x0, x20
    4c8c:	bl	0 <sprintf>
    4c90:	mov	x0, x20
    4c94:	bl	0 <__asan_internal_strlen>
    4c98:	cbz	x0, 4d08 <d_print_comp_inner+0x4138>
    4c9c:	add	x20, sp, #0x80
    4ca0:	add	x22, x0, x20
    4ca4:	mov	x23, #0xff                  	// #255
    4ca8:	b	4ccc <d_print_comp_inner+0x40fc>
    4cac:	ldr	x0, [x19, #256]
    4cb0:	add	x1, x0, #0x1
    4cb4:	str	x1, [x19, #256]
    4cb8:	strb	w21, [x19, x0]
    4cbc:	strb	w21, [x19, #264]
    4cc0:	add	x20, x20, #0x1
    4cc4:	cmp	x20, x22
    4cc8:	b.eq	4d08 <d_print_comp_inner+0x4138>  // b.none
    4ccc:	ldrb	w21, [x20]
    4cd0:	ldr	x0, [x19, #256]
    4cd4:	cmp	x0, #0xff
    4cd8:	b.ne	4cac <d_print_comp_inner+0x40dc>  // b.any
    4cdc:	strb	wzr, [x19, #255]
    4ce0:	ldr	x3, [x19, #272]
    4ce4:	ldr	x2, [x19, #280]
    4ce8:	mov	x1, x23
    4cec:	mov	x0, x19
    4cf0:	blr	x3
    4cf4:	str	xzr, [x19, #256]
    4cf8:	ldr	x0, [x19, #320]
    4cfc:	add	x0, x0, #0x1
    4d00:	str	x0, [x19, #320]
    4d04:	b	4cac <d_print_comp_inner+0x40dc>
    4d08:	ldr	x0, [x19, #256]
    4d0c:	cmp	x0, #0xff
    4d10:	b.eq	4d38 <d_print_comp_inner+0x4168>  // b.none
    4d14:	ldr	x1, [x19, #256]
    4d18:	add	x0, x1, #0x1
    4d1c:	str	x0, [x19, #256]
    4d20:	mov	w0, #0x7d                  	// #125
    4d24:	strb	w0, [x19, x1]
    4d28:	strb	w0, [x19, #264]
    4d2c:	ldp	x21, x22, [sp, #32]
    4d30:	ldp	x23, x24, [sp, #48]
    4d34:	b	4f58 <d_print_comp_inner+0x4388>
    4d38:	strb	wzr, [x19, #255]
    4d3c:	ldr	x3, [x19, #272]
    4d40:	ldr	x2, [x19, #280]
    4d44:	mov	x1, #0xff                  	// #255
    4d48:	mov	x0, x19
    4d4c:	blr	x3
    4d50:	str	xzr, [x19, #256]
    4d54:	ldr	x0, [x19, #320]
    4d58:	add	x0, x0, #0x1
    4d5c:	str	x0, [x19, #320]
    4d60:	b	4d14 <d_print_comp_inner+0x4144>
    4d64:	ldr	x2, [x22, #8]
    4d68:	mov	w1, w20
    4d6c:	mov	x0, x19
    4d70:	bl	5050 <d_print_comp>
    4d74:	adrp	x0, 0 <is_fnqual_component_type>
    4d78:	add	x0, x0, #0x0
    4d7c:	bl	0 <__asan_internal_strlen>
    4d80:	cbz	x0, 4dfc <d_print_comp_inner+0x422c>
    4d84:	stp	x25, x26, [sp, #64]
    4d88:	adrp	x21, 0 <is_fnqual_component_type>
    4d8c:	add	x21, x21, #0x0
    4d90:	add	x24, x0, x21
    4d94:	mov	x25, #0xff                  	// #255
    4d98:	b	4dbc <d_print_comp_inner+0x41ec>
    4d9c:	ldr	x0, [x19, #256]
    4da0:	add	x1, x0, #0x1
    4da4:	str	x1, [x19, #256]
    4da8:	strb	w23, [x19, x0]
    4dac:	strb	w23, [x19, #264]
    4db0:	add	x21, x21, #0x1
    4db4:	cmp	x21, x24
    4db8:	b.eq	4df8 <d_print_comp_inner+0x4228>  // b.none
    4dbc:	ldrb	w23, [x21]
    4dc0:	ldr	x0, [x19, #256]
    4dc4:	cmp	x0, #0xff
    4dc8:	b.ne	4d9c <d_print_comp_inner+0x41cc>  // b.any
    4dcc:	strb	wzr, [x19, #255]
    4dd0:	ldr	x3, [x19, #272]
    4dd4:	ldr	x2, [x19, #280]
    4dd8:	mov	x1, x25
    4ddc:	mov	x0, x19
    4de0:	blr	x3
    4de4:	str	xzr, [x19, #256]
    4de8:	ldr	x0, [x19, #320]
    4dec:	add	x0, x0, #0x1
    4df0:	str	x0, [x19, #320]
    4df4:	b	4d9c <d_print_comp_inner+0x41cc>
    4df8:	ldp	x25, x26, [sp, #64]
    4dfc:	ldr	x2, [x22, #16]
    4e00:	mov	w1, w20
    4e04:	mov	x0, x19
    4e08:	bl	5050 <d_print_comp>
    4e0c:	ldr	x0, [x19, #256]
    4e10:	cmp	x0, #0xff
    4e14:	b.eq	4e3c <d_print_comp_inner+0x426c>  // b.none
    4e18:	ldr	x1, [x19, #256]
    4e1c:	add	x0, x1, #0x1
    4e20:	str	x0, [x19, #256]
    4e24:	mov	w0, #0x5d                  	// #93
    4e28:	strb	w0, [x19, x1]
    4e2c:	strb	w0, [x19, #264]
    4e30:	ldp	x21, x22, [sp, #32]
    4e34:	ldp	x23, x24, [sp, #48]
    4e38:	b	4f58 <d_print_comp_inner+0x4388>
    4e3c:	strb	wzr, [x19, #255]
    4e40:	ldr	x3, [x19, #272]
    4e44:	ldr	x2, [x19, #280]
    4e48:	mov	x1, #0xff                  	// #255
    4e4c:	mov	x0, x19
    4e50:	blr	x3
    4e54:	str	xzr, [x19, #256]
    4e58:	ldr	x0, [x19, #320]
    4e5c:	add	x0, x0, #0x1
    4e60:	str	x0, [x19, #320]
    4e64:	b	4e18 <d_print_comp_inner+0x4248>
    4e68:	ldp	x23, x24, [sp, #48]
    4e6c:	mov	w0, #0x1                   	// #1
    4e70:	str	w0, [x19, #304]
    4e74:	ldp	x21, x22, [sp, #32]
    4e78:	b	4f58 <d_print_comp_inner+0x4388>
    4e7c:	cmp	w27, #0x2
    4e80:	b.eq	12ac <d_print_comp_inner+0x6dc>  // b.none
    4e84:	ldr	w0, [x21]
    4e88:	cmp	w0, #0x4
    4e8c:	b.eq	137c <d_print_comp_inner+0x7ac>  // b.none
    4e90:	ldr	x2, [x22, #16]
    4e94:	mov	w1, w20
    4e98:	mov	x0, x19
    4e9c:	bl	5050 <d_print_comp>
    4ea0:	ldr	w0, [x21]
    4ea4:	cmp	w0, #0x4
    4ea8:	b.eq	1390 <d_print_comp_inner+0x7c0>  // b.none
    4eac:	cbz	w23, 1410 <d_print_comp_inner+0x840>
    4eb0:	sub	w21, w23, #0x1
    4eb4:	add	x0, sp, #0x80
    4eb8:	add	x21, x0, x21, lsl #5
    4ebc:	mov	w22, #0x20                  	// #32
    4ec0:	mov	x25, #0xff                  	// #255
    4ec4:	b	13c8 <d_print_comp_inner+0x7f8>
    4ec8:	mov	w21, w2
    4ecc:	b	4ed4 <d_print_comp_inner+0x4304>
    4ed0:	mov	x22, x0
    4ed4:	ldr	x0, [x19, #296]
    4ed8:	str	x0, [sp, #128]
    4edc:	add	x0, sp, #0x80
    4ee0:	str	x0, [x19, #296]
    4ee4:	str	x22, [sp, #136]
    4ee8:	str	wzr, [sp, #144]
    4eec:	ldr	x0, [x19, #288]
    4ef0:	str	x0, [sp, #152]
    4ef4:	ldr	x2, [x22, #8]
    4ef8:	b	2750 <d_print_comp_inner+0x1b80>
    4efc:	mov	x22, x0
    4f00:	b	4ed4 <d_print_comp_inner+0x4304>
    4f04:	ldr	x3, [x19, #328]
    4f08:	mov	x1, x3
    4f0c:	cbz	x3, 4f30 <d_print_comp_inner+0x4360>
    4f10:	ldr	x2, [x1]
    4f14:	cmp	x2, x0
    4f18:	b.eq	26ac <d_print_comp_inner+0x1adc>  // b.none
    4f1c:	cmp	x3, x1
    4f20:	ccmp	x2, x22, #0x0, ne  // ne = any
    4f24:	b.eq	26ac <d_print_comp_inner+0x1adc>  // b.none
    4f28:	ldr	x1, [x1, #8]
    4f2c:	cbnz	x1, 4f10 <d_print_comp_inner+0x4340>
    4f30:	ldr	x23, [x19, #288]
    4f34:	ldr	x1, [x4, #8]
    4f38:	str	x1, [x19, #288]
    4f3c:	mov	x1, x0
    4f40:	mov	x0, x19
    4f44:	bl	8d4 <d_lookup_template_argument>
    4f48:	cbz	x0, 26dc <d_print_comp_inner+0x1b0c>
    4f4c:	mov	w21, #0x1                   	// #1
    4f50:	b	26c0 <d_print_comp_inner+0x1af0>
    4f54:	ldp	x21, x22, [sp, #32]
    4f58:	ldp	x19, x20, [sp, #16]
    4f5c:	ldp	x29, x30, [sp], #256
    4f60:	ret
    4f64:	ldp	x21, x22, [sp, #32]
    4f68:	ldp	x23, x24, [sp, #48]
    4f6c:	b	4f58 <d_print_comp_inner+0x4388>
    4f70:	ldp	x21, x22, [sp, #32]
    4f74:	ldp	x23, x24, [sp, #48]
    4f78:	b	4f58 <d_print_comp_inner+0x4388>
    4f7c:	ldp	x21, x22, [sp, #32]
    4f80:	ldp	x23, x24, [sp, #48]
    4f84:	b	4f58 <d_print_comp_inner+0x4388>
    4f88:	ldp	x21, x22, [sp, #32]
    4f8c:	ldp	x23, x24, [sp, #48]
    4f90:	b	4f58 <d_print_comp_inner+0x4388>
    4f94:	ldp	x21, x22, [sp, #32]
    4f98:	ldp	x23, x24, [sp, #48]
    4f9c:	b	4f58 <d_print_comp_inner+0x4388>
    4fa0:	ldp	x21, x22, [sp, #32]
    4fa4:	ldp	x23, x24, [sp, #48]
    4fa8:	b	4f58 <d_print_comp_inner+0x4388>
    4fac:	ldp	x21, x22, [sp, #32]
    4fb0:	ldp	x23, x24, [sp, #48]
    4fb4:	b	4f58 <d_print_comp_inner+0x4388>
    4fb8:	ldp	x21, x22, [sp, #32]
    4fbc:	ldp	x23, x24, [sp, #48]
    4fc0:	b	4f58 <d_print_comp_inner+0x4388>
    4fc4:	ldp	x21, x22, [sp, #32]
    4fc8:	ldp	x23, x24, [sp, #48]
    4fcc:	b	4f58 <d_print_comp_inner+0x4388>
    4fd0:	ldp	x21, x22, [sp, #32]
    4fd4:	ldp	x23, x24, [sp, #48]
    4fd8:	b	4f58 <d_print_comp_inner+0x4388>
    4fdc:	ldp	x21, x22, [sp, #32]
    4fe0:	ldp	x23, x24, [sp, #48]
    4fe4:	b	4f58 <d_print_comp_inner+0x4388>
    4fe8:	ldp	x21, x22, [sp, #32]
    4fec:	ldp	x23, x24, [sp, #48]
    4ff0:	b	4f58 <d_print_comp_inner+0x4388>
    4ff4:	ldp	x21, x22, [sp, #32]
    4ff8:	ldp	x23, x24, [sp, #48]
    4ffc:	b	4f58 <d_print_comp_inner+0x4388>
    5000:	ldp	x21, x22, [sp, #32]
    5004:	ldp	x23, x24, [sp, #48]
    5008:	b	4f58 <d_print_comp_inner+0x4388>
    500c:	ldp	x21, x22, [sp, #32]
    5010:	ldp	x23, x24, [sp, #48]
    5014:	b	4f58 <d_print_comp_inner+0x4388>
    5018:	ldp	x21, x22, [sp, #32]
    501c:	ldp	x23, x24, [sp, #48]
    5020:	b	4f58 <d_print_comp_inner+0x4388>
    5024:	ldp	x21, x22, [sp, #32]
    5028:	ldp	x23, x24, [sp, #48]
    502c:	b	4f58 <d_print_comp_inner+0x4388>
    5030:	ldp	x21, x22, [sp, #32]
    5034:	ldp	x23, x24, [sp, #48]
    5038:	ldp	x25, x26, [sp, #64]
    503c:	ldp	x27, x28, [sp, #80]
    5040:	b	4f58 <d_print_comp_inner+0x4388>
    5044:	ldp	x21, x22, [sp, #32]
    5048:	ldp	x23, x24, [sp, #48]
    504c:	b	4f58 <d_print_comp_inner+0x4388>

0000000000005050 <d_print_comp>:
    5050:	stp	x29, x30, [sp, #-48]!
    5054:	mov	x29, sp
    5058:	stp	x19, x20, [sp, #16]
    505c:	mov	x19, x0
    5060:	cbz	x2, 5080 <d_print_comp+0x30>
    5064:	mov	x20, x2
    5068:	ldr	w0, [x2, #4]
    506c:	cmp	w0, #0x1
    5070:	b.gt	5080 <d_print_comp+0x30>
    5074:	ldr	w2, [x19, #308]
    5078:	cmp	w2, #0x400
    507c:	b.le	5094 <d_print_comp+0x44>
    5080:	mov	w0, #0x1                   	// #1
    5084:	str	w0, [x19, #304]
    5088:	ldp	x19, x20, [sp, #16]
    508c:	ldp	x29, x30, [sp], #48
    5090:	ret
    5094:	add	w0, w0, #0x1
    5098:	str	w0, [x20, #4]
    509c:	ldr	w0, [x19, #308]
    50a0:	add	w0, w0, #0x1
    50a4:	str	w0, [x19, #308]
    50a8:	str	x20, [sp, #32]
    50ac:	ldr	x0, [x19, #328]
    50b0:	str	x0, [sp, #40]
    50b4:	add	x0, sp, #0x20
    50b8:	str	x0, [x19, #328]
    50bc:	mov	x2, x20
    50c0:	mov	x0, x19
    50c4:	bl	bd0 <d_print_comp_inner>
    50c8:	ldr	x0, [sp, #40]
    50cc:	str	x0, [x19, #328]
    50d0:	ldr	w0, [x20, #4]
    50d4:	sub	w0, w0, #0x1
    50d8:	str	w0, [x20, #4]
    50dc:	ldr	w0, [x19, #308]
    50e0:	sub	w0, w0, #0x1
    50e4:	str	w0, [x19, #308]
    50e8:	b	5088 <d_print_comp+0x38>

00000000000050ec <d_print_mod>:
    50ec:	stp	x29, x30, [sp, #-80]!
    50f0:	mov	x29, sp
    50f4:	stp	x19, x20, [sp, #16]
    50f8:	stp	x21, x22, [sp, #32]
    50fc:	mov	x19, x0
    5100:	mov	w21, w1
    5104:	mov	x20, x2
    5108:	ldr	w0, [x2]
    510c:	sub	w0, w0, #0x3
    5110:	cmp	w0, #0x4d
    5114:	b.hi	5b44 <d_print_mod+0xa58>  // b.pmore
    5118:	stp	x23, x24, [sp, #48]
    511c:	adrp	x1, 0 <is_fnqual_component_type>
    5120:	add	x1, x1, #0x0
    5124:	ldrh	w0, [x1, w0, uxtw #1]
    5128:	adr	x1, 5134 <d_print_mod+0x48>
    512c:	add	x0, x1, w0, sxth #2
    5130:	br	x0
    5134:	adrp	x0, 0 <is_fnqual_component_type>
    5138:	add	x0, x0, #0x0
    513c:	bl	0 <__asan_internal_strlen>
    5140:	cbz	x0, 5b58 <d_print_mod+0xa6c>
    5144:	adrp	x20, 0 <is_fnqual_component_type>
    5148:	add	x20, x20, #0x0
    514c:	add	x22, x0, x20
    5150:	mov	x23, #0xff                  	// #255
    5154:	b	5178 <d_print_mod+0x8c>
    5158:	ldr	x0, [x19, #256]
    515c:	add	x1, x0, #0x1
    5160:	str	x1, [x19, #256]
    5164:	strb	w21, [x19, x0]
    5168:	strb	w21, [x19, #264]
    516c:	add	x20, x20, #0x1
    5170:	cmp	x20, x22
    5174:	b.eq	51b4 <d_print_mod+0xc8>  // b.none
    5178:	ldrb	w21, [x20]
    517c:	ldr	x0, [x19, #256]
    5180:	cmp	x0, #0xff
    5184:	b.ne	5158 <d_print_mod+0x6c>  // b.any
    5188:	strb	wzr, [x19, #255]
    518c:	ldr	x3, [x19, #272]
    5190:	ldr	x2, [x19, #280]
    5194:	mov	x1, x23
    5198:	mov	x0, x19
    519c:	blr	x3
    51a0:	str	xzr, [x19, #256]
    51a4:	ldr	x0, [x19, #320]
    51a8:	add	x0, x0, #0x1
    51ac:	str	x0, [x19, #320]
    51b0:	b	5158 <d_print_mod+0x6c>
    51b4:	ldp	x23, x24, [sp, #48]
    51b8:	b	56f4 <d_print_mod+0x608>
    51bc:	adrp	x0, 0 <is_fnqual_component_type>
    51c0:	add	x0, x0, #0x0
    51c4:	bl	0 <__asan_internal_strlen>
    51c8:	cbz	x0, 5b60 <d_print_mod+0xa74>
    51cc:	adrp	x20, 0 <is_fnqual_component_type>
    51d0:	add	x20, x20, #0x0
    51d4:	add	x22, x0, x20
    51d8:	mov	x23, #0xff                  	// #255
    51dc:	b	5200 <d_print_mod+0x114>
    51e0:	ldr	x0, [x19, #256]
    51e4:	add	x1, x0, #0x1
    51e8:	str	x1, [x19, #256]
    51ec:	strb	w21, [x19, x0]
    51f0:	strb	w21, [x19, #264]
    51f4:	add	x20, x20, #0x1
    51f8:	cmp	x22, x20
    51fc:	b.eq	523c <d_print_mod+0x150>  // b.none
    5200:	ldrb	w21, [x20]
    5204:	ldr	x0, [x19, #256]
    5208:	cmp	x0, #0xff
    520c:	b.ne	51e0 <d_print_mod+0xf4>  // b.any
    5210:	strb	wzr, [x19, #255]
    5214:	ldr	x3, [x19, #272]
    5218:	ldr	x2, [x19, #280]
    521c:	mov	x1, x23
    5220:	mov	x0, x19
    5224:	blr	x3
    5228:	str	xzr, [x19, #256]
    522c:	ldr	x0, [x19, #320]
    5230:	add	x0, x0, #0x1
    5234:	str	x0, [x19, #320]
    5238:	b	51e0 <d_print_mod+0xf4>
    523c:	ldp	x23, x24, [sp, #48]
    5240:	b	56f4 <d_print_mod+0x608>
    5244:	adrp	x0, 0 <is_fnqual_component_type>
    5248:	add	x0, x0, #0x0
    524c:	bl	0 <__asan_internal_strlen>
    5250:	cbz	x0, 5b68 <d_print_mod+0xa7c>
    5254:	adrp	x20, 0 <is_fnqual_component_type>
    5258:	add	x20, x20, #0x0
    525c:	add	x22, x0, x20
    5260:	mov	x23, #0xff                  	// #255
    5264:	b	5288 <d_print_mod+0x19c>
    5268:	ldr	x0, [x19, #256]
    526c:	add	x1, x0, #0x1
    5270:	str	x1, [x19, #256]
    5274:	strb	w21, [x19, x0]
    5278:	strb	w21, [x19, #264]
    527c:	add	x20, x20, #0x1
    5280:	cmp	x20, x22
    5284:	b.eq	52c4 <d_print_mod+0x1d8>  // b.none
    5288:	ldrb	w21, [x20]
    528c:	ldr	x0, [x19, #256]
    5290:	cmp	x0, #0xff
    5294:	b.ne	5268 <d_print_mod+0x17c>  // b.any
    5298:	strb	wzr, [x19, #255]
    529c:	ldr	x3, [x19, #272]
    52a0:	ldr	x2, [x19, #280]
    52a4:	mov	x1, x23
    52a8:	mov	x0, x19
    52ac:	blr	x3
    52b0:	str	xzr, [x19, #256]
    52b4:	ldr	x0, [x19, #320]
    52b8:	add	x0, x0, #0x1
    52bc:	str	x0, [x19, #320]
    52c0:	b	5268 <d_print_mod+0x17c>
    52c4:	ldp	x23, x24, [sp, #48]
    52c8:	b	56f4 <d_print_mod+0x608>
    52cc:	adrp	x0, 0 <is_fnqual_component_type>
    52d0:	add	x0, x0, #0x0
    52d4:	bl	0 <__asan_internal_strlen>
    52d8:	cbz	x0, 5b70 <d_print_mod+0xa84>
    52dc:	adrp	x20, 0 <is_fnqual_component_type>
    52e0:	add	x20, x20, #0x0
    52e4:	add	x22, x0, x20
    52e8:	mov	x23, #0xff                  	// #255
    52ec:	b	5310 <d_print_mod+0x224>
    52f0:	ldr	x0, [x19, #256]
    52f4:	add	x1, x0, #0x1
    52f8:	str	x1, [x19, #256]
    52fc:	strb	w21, [x19, x0]
    5300:	strb	w21, [x19, #264]
    5304:	add	x20, x20, #0x1
    5308:	cmp	x20, x22
    530c:	b.eq	534c <d_print_mod+0x260>  // b.none
    5310:	ldrb	w21, [x20]
    5314:	ldr	x0, [x19, #256]
    5318:	cmp	x0, #0xff
    531c:	b.ne	52f0 <d_print_mod+0x204>  // b.any
    5320:	strb	wzr, [x19, #255]
    5324:	ldr	x3, [x19, #272]
    5328:	ldr	x2, [x19, #280]
    532c:	mov	x1, x23
    5330:	mov	x0, x19
    5334:	blr	x3
    5338:	str	xzr, [x19, #256]
    533c:	ldr	x0, [x19, #320]
    5340:	add	x0, x0, #0x1
    5344:	str	x0, [x19, #320]
    5348:	b	52f0 <d_print_mod+0x204>
    534c:	ldp	x23, x24, [sp, #48]
    5350:	b	56f4 <d_print_mod+0x608>
    5354:	adrp	x0, 0 <is_fnqual_component_type>
    5358:	add	x0, x0, #0x0
    535c:	bl	0 <__asan_internal_strlen>
    5360:	cbz	x0, 53dc <d_print_mod+0x2f0>
    5364:	str	x25, [sp, #64]
    5368:	adrp	x22, 0 <is_fnqual_component_type>
    536c:	add	x22, x22, #0x0
    5370:	add	x24, x0, x22
    5374:	mov	x25, #0xff                  	// #255
    5378:	b	539c <d_print_mod+0x2b0>
    537c:	ldr	x0, [x19, #256]
    5380:	add	x1, x0, #0x1
    5384:	str	x1, [x19, #256]
    5388:	strb	w23, [x19, x0]
    538c:	strb	w23, [x19, #264]
    5390:	add	x22, x22, #0x1
    5394:	cmp	x22, x24
    5398:	b.eq	53d8 <d_print_mod+0x2ec>  // b.none
    539c:	ldrb	w23, [x22]
    53a0:	ldr	x0, [x19, #256]
    53a4:	cmp	x0, #0xff
    53a8:	b.ne	537c <d_print_mod+0x290>  // b.any
    53ac:	strb	wzr, [x19, #255]
    53b0:	ldr	x3, [x19, #272]
    53b4:	ldr	x2, [x19, #280]
    53b8:	mov	x1, x25
    53bc:	mov	x0, x19
    53c0:	blr	x3
    53c4:	str	xzr, [x19, #256]
    53c8:	ldr	x0, [x19, #320]
    53cc:	add	x0, x0, #0x1
    53d0:	str	x0, [x19, #320]
    53d4:	b	537c <d_print_mod+0x290>
    53d8:	ldr	x25, [sp, #64]
    53dc:	ldr	x0, [x20, #16]
    53e0:	cbz	x0, 5b78 <d_print_mod+0xa8c>
    53e4:	ldr	x0, [x19, #256]
    53e8:	cmp	x0, #0xff
    53ec:	b.eq	5444 <d_print_mod+0x358>  // b.none
    53f0:	ldr	x1, [x19, #256]
    53f4:	add	x0, x1, #0x1
    53f8:	str	x0, [x19, #256]
    53fc:	mov	w0, #0x28                  	// #40
    5400:	strb	w0, [x19, x1]
    5404:	strb	w0, [x19, #264]
    5408:	ldr	x2, [x20, #16]
    540c:	mov	w1, w21
    5410:	mov	x0, x19
    5414:	bl	5050 <d_print_comp>
    5418:	ldr	x0, [x19, #256]
    541c:	cmp	x0, #0xff
    5420:	b.eq	5470 <d_print_mod+0x384>  // b.none
    5424:	ldr	x1, [x19, #256]
    5428:	add	x0, x1, #0x1
    542c:	str	x0, [x19, #256]
    5430:	mov	w0, #0x29                  	// #41
    5434:	strb	w0, [x19, x1]
    5438:	strb	w0, [x19, #264]
    543c:	ldp	x23, x24, [sp, #48]
    5440:	b	56f4 <d_print_mod+0x608>
    5444:	strb	wzr, [x19, #255]
    5448:	ldr	x3, [x19, #272]
    544c:	ldr	x2, [x19, #280]
    5450:	mov	x1, #0xff                  	// #255
    5454:	mov	x0, x19
    5458:	blr	x3
    545c:	str	xzr, [x19, #256]
    5460:	ldr	x0, [x19, #320]
    5464:	add	x0, x0, #0x1
    5468:	str	x0, [x19, #320]
    546c:	b	53f0 <d_print_mod+0x304>
    5470:	strb	wzr, [x19, #255]
    5474:	ldr	x3, [x19, #272]
    5478:	ldr	x2, [x19, #280]
    547c:	mov	x1, #0xff                  	// #255
    5480:	mov	x0, x19
    5484:	blr	x3
    5488:	str	xzr, [x19, #256]
    548c:	ldr	x0, [x19, #320]
    5490:	add	x0, x0, #0x1
    5494:	str	x0, [x19, #320]
    5498:	b	5424 <d_print_mod+0x338>
    549c:	adrp	x0, 0 <is_fnqual_component_type>
    54a0:	add	x0, x0, #0x0
    54a4:	bl	0 <__asan_internal_strlen>
    54a8:	cbz	x0, 5524 <d_print_mod+0x438>
    54ac:	str	x25, [sp, #64]
    54b0:	adrp	x22, 0 <is_fnqual_component_type>
    54b4:	add	x22, x22, #0x0
    54b8:	add	x24, x0, x22
    54bc:	mov	x25, #0xff                  	// #255
    54c0:	b	54e4 <d_print_mod+0x3f8>
    54c4:	ldr	x0, [x19, #256]
    54c8:	add	x1, x0, #0x1
    54cc:	str	x1, [x19, #256]
    54d0:	strb	w23, [x19, x0]
    54d4:	strb	w23, [x19, #264]
    54d8:	add	x22, x22, #0x1
    54dc:	cmp	x22, x24
    54e0:	b.eq	5520 <d_print_mod+0x434>  // b.none
    54e4:	ldrb	w23, [x22]
    54e8:	ldr	x0, [x19, #256]
    54ec:	cmp	x0, #0xff
    54f0:	b.ne	54c4 <d_print_mod+0x3d8>  // b.any
    54f4:	strb	wzr, [x19, #255]
    54f8:	ldr	x3, [x19, #272]
    54fc:	ldr	x2, [x19, #280]
    5500:	mov	x1, x25
    5504:	mov	x0, x19
    5508:	blr	x3
    550c:	str	xzr, [x19, #256]
    5510:	ldr	x0, [x19, #320]
    5514:	add	x0, x0, #0x1
    5518:	str	x0, [x19, #320]
    551c:	b	54c4 <d_print_mod+0x3d8>
    5520:	ldr	x25, [sp, #64]
    5524:	ldr	x0, [x20, #16]
    5528:	cbz	x0, 5b80 <d_print_mod+0xa94>
    552c:	ldr	x0, [x19, #256]
    5530:	cmp	x0, #0xff
    5534:	b.eq	558c <d_print_mod+0x4a0>  // b.none
    5538:	ldr	x1, [x19, #256]
    553c:	add	x0, x1, #0x1
    5540:	str	x0, [x19, #256]
    5544:	mov	w0, #0x28                  	// #40
    5548:	strb	w0, [x19, x1]
    554c:	strb	w0, [x19, #264]
    5550:	ldr	x2, [x20, #16]
    5554:	mov	w1, w21
    5558:	mov	x0, x19
    555c:	bl	5050 <d_print_comp>
    5560:	ldr	x0, [x19, #256]
    5564:	cmp	x0, #0xff
    5568:	b.eq	55b8 <d_print_mod+0x4cc>  // b.none
    556c:	ldr	x1, [x19, #256]
    5570:	add	x0, x1, #0x1
    5574:	str	x0, [x19, #256]
    5578:	mov	w0, #0x29                  	// #41
    557c:	strb	w0, [x19, x1]
    5580:	strb	w0, [x19, #264]
    5584:	ldp	x23, x24, [sp, #48]
    5588:	b	56f4 <d_print_mod+0x608>
    558c:	strb	wzr, [x19, #255]
    5590:	ldr	x3, [x19, #272]
    5594:	ldr	x2, [x19, #280]
    5598:	mov	x1, #0xff                  	// #255
    559c:	mov	x0, x19
    55a0:	blr	x3
    55a4:	str	xzr, [x19, #256]
    55a8:	ldr	x0, [x19, #320]
    55ac:	add	x0, x0, #0x1
    55b0:	str	x0, [x19, #320]
    55b4:	b	5538 <d_print_mod+0x44c>
    55b8:	strb	wzr, [x19, #255]
    55bc:	ldr	x3, [x19, #272]
    55c0:	ldr	x2, [x19, #280]
    55c4:	mov	x1, #0xff                  	// #255
    55c8:	mov	x0, x19
    55cc:	blr	x3
    55d0:	str	xzr, [x19, #256]
    55d4:	ldr	x0, [x19, #320]
    55d8:	add	x0, x0, #0x1
    55dc:	str	x0, [x19, #320]
    55e0:	b	556c <d_print_mod+0x480>
    55e4:	ldr	x0, [x19, #256]
    55e8:	cmp	x0, #0xff
    55ec:	b.eq	5620 <d_print_mod+0x534>  // b.none
    55f0:	ldr	x1, [x19, #256]
    55f4:	add	x0, x1, #0x1
    55f8:	str	x0, [x19, #256]
    55fc:	mov	w0, #0x20                  	// #32
    5600:	strb	w0, [x19, x1]
    5604:	strb	w0, [x19, #264]
    5608:	ldr	x2, [x20, #16]
    560c:	mov	w1, w21
    5610:	mov	x0, x19
    5614:	bl	5050 <d_print_comp>
    5618:	ldp	x23, x24, [sp, #48]
    561c:	b	56f4 <d_print_mod+0x608>
    5620:	strb	wzr, [x19, #255]
    5624:	ldr	x3, [x19, #272]
    5628:	ldr	x2, [x19, #280]
    562c:	mov	x1, #0xff                  	// #255
    5630:	mov	x0, x19
    5634:	blr	x3
    5638:	str	xzr, [x19, #256]
    563c:	ldr	x0, [x19, #320]
    5640:	add	x0, x0, #0x1
    5644:	str	x0, [x19, #320]
    5648:	b	55f0 <d_print_mod+0x504>
    564c:	tbnz	w21, #2, 5b88 <d_print_mod+0xa9c>
    5650:	ldr	x0, [x19, #256]
    5654:	cmp	x0, #0xff
    5658:	b.eq	567c <d_print_mod+0x590>  // b.none
    565c:	ldr	x1, [x19, #256]
    5660:	add	x0, x1, #0x1
    5664:	str	x0, [x19, #256]
    5668:	mov	w0, #0x2a                  	// #42
    566c:	strb	w0, [x19, x1]
    5670:	strb	w0, [x19, #264]
    5674:	ldp	x23, x24, [sp, #48]
    5678:	b	56f4 <d_print_mod+0x608>
    567c:	strb	wzr, [x19, #255]
    5680:	ldr	x3, [x19, #272]
    5684:	ldr	x2, [x19, #280]
    5688:	mov	x1, #0xff                  	// #255
    568c:	mov	x0, x19
    5690:	blr	x3
    5694:	str	xzr, [x19, #256]
    5698:	ldr	x0, [x19, #320]
    569c:	add	x0, x0, #0x1
    56a0:	str	x0, [x19, #320]
    56a4:	b	565c <d_print_mod+0x570>
    56a8:	ldr	x0, [x19, #256]
    56ac:	cmp	x0, #0xff
    56b0:	b.eq	5704 <d_print_mod+0x618>  // b.none
    56b4:	ldr	x1, [x19, #256]
    56b8:	add	x0, x1, #0x1
    56bc:	str	x0, [x19, #256]
    56c0:	mov	w0, #0x20                  	// #32
    56c4:	strb	w0, [x19, x1]
    56c8:	strb	w0, [x19, #264]
    56cc:	ldr	x0, [x19, #256]
    56d0:	cmp	x0, #0xff
    56d4:	b.eq	5730 <d_print_mod+0x644>  // b.none
    56d8:	ldr	x1, [x19, #256]
    56dc:	add	x0, x1, #0x1
    56e0:	str	x0, [x19, #256]
    56e4:	mov	w0, #0x26                  	// #38
    56e8:	strb	w0, [x19, x1]
    56ec:	strb	w0, [x19, #264]
    56f0:	ldp	x23, x24, [sp, #48]
    56f4:	ldp	x19, x20, [sp, #16]
    56f8:	ldp	x21, x22, [sp, #32]
    56fc:	ldp	x29, x30, [sp], #80
    5700:	ret
    5704:	strb	wzr, [x19, #255]
    5708:	ldr	x3, [x19, #272]
    570c:	ldr	x2, [x19, #280]
    5710:	mov	x1, #0xff                  	// #255
    5714:	mov	x0, x19
    5718:	blr	x3
    571c:	str	xzr, [x19, #256]
    5720:	ldr	x0, [x19, #320]
    5724:	add	x0, x0, #0x1
    5728:	str	x0, [x19, #320]
    572c:	b	56b4 <d_print_mod+0x5c8>
    5730:	strb	wzr, [x19, #255]
    5734:	ldr	x3, [x19, #272]
    5738:	ldr	x2, [x19, #280]
    573c:	mov	x1, #0xff                  	// #255
    5740:	mov	x0, x19
    5744:	blr	x3
    5748:	str	xzr, [x19, #256]
    574c:	ldr	x0, [x19, #320]
    5750:	add	x0, x0, #0x1
    5754:	str	x0, [x19, #320]
    5758:	b	56d8 <d_print_mod+0x5ec>
    575c:	ldr	x0, [x19, #256]
    5760:	cmp	x0, #0xff
    5764:	b.eq	57a4 <d_print_mod+0x6b8>  // b.none
    5768:	ldr	x1, [x19, #256]
    576c:	add	x0, x1, #0x1
    5770:	str	x0, [x19, #256]
    5774:	mov	w0, #0x20                  	// #32
    5778:	strb	w0, [x19, x1]
    577c:	strb	w0, [x19, #264]
    5780:	adrp	x0, 0 <is_fnqual_component_type>
    5784:	add	x0, x0, #0x0
    5788:	bl	0 <__asan_internal_strlen>
    578c:	cbz	x0, 5b90 <d_print_mod+0xaa4>
    5790:	adrp	x20, 0 <is_fnqual_component_type>
    5794:	add	x20, x20, #0x0
    5798:	add	x22, x0, x20
    579c:	mov	x23, #0xff                  	// #255
    57a0:	b	57f0 <d_print_mod+0x704>
    57a4:	strb	wzr, [x19, #255]
    57a8:	ldr	x3, [x19, #272]
    57ac:	ldr	x2, [x19, #280]
    57b0:	mov	x1, #0xff                  	// #255
    57b4:	mov	x0, x19
    57b8:	blr	x3
    57bc:	str	xzr, [x19, #256]
    57c0:	ldr	x0, [x19, #320]
    57c4:	add	x0, x0, #0x1
    57c8:	str	x0, [x19, #320]
    57cc:	b	5768 <d_print_mod+0x67c>
    57d0:	ldr	x0, [x19, #256]
    57d4:	add	x1, x0, #0x1
    57d8:	str	x1, [x19, #256]
    57dc:	strb	w21, [x19, x0]
    57e0:	strb	w21, [x19, #264]
    57e4:	add	x20, x20, #0x1
    57e8:	cmp	x20, x22
    57ec:	b.eq	582c <d_print_mod+0x740>  // b.none
    57f0:	ldrb	w21, [x20]
    57f4:	ldr	x0, [x19, #256]
    57f8:	cmp	x0, #0xff
    57fc:	b.ne	57d0 <d_print_mod+0x6e4>  // b.any
    5800:	strb	wzr, [x19, #255]
    5804:	ldr	x3, [x19, #272]
    5808:	ldr	x2, [x19, #280]
    580c:	mov	x1, x23
    5810:	mov	x0, x19
    5814:	blr	x3
    5818:	str	xzr, [x19, #256]
    581c:	ldr	x0, [x19, #320]
    5820:	add	x0, x0, #0x1
    5824:	str	x0, [x19, #320]
    5828:	b	57d0 <d_print_mod+0x6e4>
    582c:	ldp	x23, x24, [sp, #48]
    5830:	b	56f4 <d_print_mod+0x608>
    5834:	adrp	x0, 0 <is_fnqual_component_type>
    5838:	add	x0, x0, #0x0
    583c:	bl	0 <__asan_internal_strlen>
    5840:	cbz	x0, 5b98 <d_print_mod+0xaac>
    5844:	adrp	x20, 0 <is_fnqual_component_type>
    5848:	add	x20, x20, #0x0
    584c:	add	x22, x0, x20
    5850:	mov	x23, #0xff                  	// #255
    5854:	b	5878 <d_print_mod+0x78c>
    5858:	ldr	x0, [x19, #256]
    585c:	add	x1, x0, #0x1
    5860:	str	x1, [x19, #256]
    5864:	strb	w21, [x19, x0]
    5868:	strb	w21, [x19, #264]
    586c:	add	x20, x20, #0x1
    5870:	cmp	x22, x20
    5874:	b.eq	58b4 <d_print_mod+0x7c8>  // b.none
    5878:	ldrb	w21, [x20]
    587c:	ldr	x0, [x19, #256]
    5880:	cmp	x0, #0xff
    5884:	b.ne	5858 <d_print_mod+0x76c>  // b.any
    5888:	strb	wzr, [x19, #255]
    588c:	ldr	x3, [x19, #272]
    5890:	ldr	x2, [x19, #280]
    5894:	mov	x1, x23
    5898:	mov	x0, x19
    589c:	blr	x3
    58a0:	str	xzr, [x19, #256]
    58a4:	ldr	x0, [x19, #320]
    58a8:	add	x0, x0, #0x1
    58ac:	str	x0, [x19, #320]
    58b0:	b	5858 <d_print_mod+0x76c>
    58b4:	ldp	x23, x24, [sp, #48]
    58b8:	b	56f4 <d_print_mod+0x608>
    58bc:	adrp	x0, 0 <is_fnqual_component_type>
    58c0:	add	x0, x0, #0x0
    58c4:	bl	0 <__asan_internal_strlen>
    58c8:	cbz	x0, 5ba0 <d_print_mod+0xab4>
    58cc:	adrp	x20, 0 <is_fnqual_component_type>
    58d0:	add	x20, x20, #0x0
    58d4:	add	x22, x0, x20
    58d8:	mov	x23, #0xff                  	// #255
    58dc:	b	5900 <d_print_mod+0x814>
    58e0:	ldr	x0, [x19, #256]
    58e4:	add	x1, x0, #0x1
    58e8:	str	x1, [x19, #256]
    58ec:	strb	w21, [x19, x0]
    58f0:	strb	w21, [x19, #264]
    58f4:	add	x20, x20, #0x1
    58f8:	cmp	x20, x22
    58fc:	b.eq	593c <d_print_mod+0x850>  // b.none
    5900:	ldrb	w21, [x20]
    5904:	ldr	x0, [x19, #256]
    5908:	cmp	x0, #0xff
    590c:	b.ne	58e0 <d_print_mod+0x7f4>  // b.any
    5910:	strb	wzr, [x19, #255]
    5914:	ldr	x3, [x19, #272]
    5918:	ldr	x2, [x19, #280]
    591c:	mov	x1, x23
    5920:	mov	x0, x19
    5924:	blr	x3
    5928:	str	xzr, [x19, #256]
    592c:	ldr	x0, [x19, #320]
    5930:	add	x0, x0, #0x1
    5934:	str	x0, [x19, #320]
    5938:	b	58e0 <d_print_mod+0x7f4>
    593c:	ldp	x23, x24, [sp, #48]
    5940:	b	56f4 <d_print_mod+0x608>
    5944:	ldrb	w0, [x19, #264]
    5948:	cmp	w0, #0x28
    594c:	b.eq	5974 <d_print_mod+0x888>  // b.none
    5950:	ldr	x0, [x19, #256]
    5954:	cmp	x0, #0xff
    5958:	b.eq	59a8 <d_print_mod+0x8bc>  // b.none
    595c:	ldr	x1, [x19, #256]
    5960:	add	x0, x1, #0x1
    5964:	str	x0, [x19, #256]
    5968:	mov	w0, #0x20                  	// #32
    596c:	strb	w0, [x19, x1]
    5970:	strb	w0, [x19, #264]
    5974:	ldr	x2, [x20, #8]
    5978:	mov	w1, w21
    597c:	mov	x0, x19
    5980:	bl	5050 <d_print_comp>
    5984:	adrp	x0, 0 <is_fnqual_component_type>
    5988:	add	x0, x0, #0x0
    598c:	bl	0 <__asan_internal_strlen>
    5990:	cbz	x0, 5ba8 <d_print_mod+0xabc>
    5994:	adrp	x20, 0 <is_fnqual_component_type>
    5998:	add	x20, x20, #0x0
    599c:	add	x22, x0, x20
    59a0:	mov	x23, #0xff                  	// #255
    59a4:	b	59f4 <d_print_mod+0x908>
    59a8:	strb	wzr, [x19, #255]
    59ac:	ldr	x3, [x19, #272]
    59b0:	ldr	x2, [x19, #280]
    59b4:	mov	x1, #0xff                  	// #255
    59b8:	mov	x0, x19
    59bc:	blr	x3
    59c0:	str	xzr, [x19, #256]
    59c4:	ldr	x0, [x19, #320]
    59c8:	add	x0, x0, #0x1
    59cc:	str	x0, [x19, #320]
    59d0:	b	595c <d_print_mod+0x870>
    59d4:	ldr	x0, [x19, #256]
    59d8:	add	x1, x0, #0x1
    59dc:	str	x1, [x19, #256]
    59e0:	strb	w21, [x19, x0]
    59e4:	strb	w21, [x19, #264]
    59e8:	add	x20, x20, #0x1
    59ec:	cmp	x22, x20
    59f0:	b.eq	5a30 <d_print_mod+0x944>  // b.none
    59f4:	ldrb	w21, [x20]
    59f8:	ldr	x0, [x19, #256]
    59fc:	cmp	x0, #0xff
    5a00:	b.ne	59d4 <d_print_mod+0x8e8>  // b.any
    5a04:	strb	wzr, [x19, #255]
    5a08:	ldr	x3, [x19, #272]
    5a0c:	ldr	x2, [x19, #280]
    5a10:	mov	x1, x23
    5a14:	mov	x0, x19
    5a18:	blr	x3
    5a1c:	str	xzr, [x19, #256]
    5a20:	ldr	x0, [x19, #320]
    5a24:	add	x0, x0, #0x1
    5a28:	str	x0, [x19, #320]
    5a2c:	b	59d4 <d_print_mod+0x8e8>
    5a30:	ldp	x23, x24, [sp, #48]
    5a34:	b	56f4 <d_print_mod+0x608>
    5a38:	ldr	x2, [x2, #8]
    5a3c:	mov	w1, w21
    5a40:	mov	x0, x19
    5a44:	bl	5050 <d_print_comp>
    5a48:	ldp	x23, x24, [sp, #48]
    5a4c:	b	56f4 <d_print_mod+0x608>
    5a50:	adrp	x0, 0 <is_fnqual_component_type>
    5a54:	add	x0, x0, #0x0
    5a58:	bl	0 <__asan_internal_strlen>
    5a5c:	cbz	x0, 5ad8 <d_print_mod+0x9ec>
    5a60:	str	x25, [sp, #64]
    5a64:	adrp	x22, 0 <is_fnqual_component_type>
    5a68:	add	x22, x22, #0x0
    5a6c:	add	x24, x0, x22
    5a70:	mov	x25, #0xff                  	// #255
    5a74:	b	5a98 <d_print_mod+0x9ac>
    5a78:	ldr	x0, [x19, #256]
    5a7c:	add	x1, x0, #0x1
    5a80:	str	x1, [x19, #256]
    5a84:	strb	w23, [x19, x0]
    5a88:	strb	w23, [x19, #264]
    5a8c:	add	x22, x22, #0x1
    5a90:	cmp	x22, x24
    5a94:	b.eq	5ad4 <d_print_mod+0x9e8>  // b.none
    5a98:	ldrb	w23, [x22]
    5a9c:	ldr	x0, [x19, #256]
    5aa0:	cmp	x0, #0xff
    5aa4:	b.ne	5a78 <d_print_mod+0x98c>  // b.any
    5aa8:	strb	wzr, [x19, #255]
    5aac:	ldr	x3, [x19, #272]
    5ab0:	ldr	x2, [x19, #280]
    5ab4:	mov	x1, x25
    5ab8:	mov	x0, x19
    5abc:	blr	x3
    5ac0:	str	xzr, [x19, #256]
    5ac4:	ldr	x0, [x19, #320]
    5ac8:	add	x0, x0, #0x1
    5acc:	str	x0, [x19, #320]
    5ad0:	b	5a78 <d_print_mod+0x98c>
    5ad4:	ldr	x25, [sp, #64]
    5ad8:	ldr	x2, [x20, #8]
    5adc:	mov	w1, w21
    5ae0:	mov	x0, x19
    5ae4:	bl	5050 <d_print_comp>
    5ae8:	ldr	x0, [x19, #256]
    5aec:	cmp	x0, #0xff
    5af0:	b.eq	5b14 <d_print_mod+0xa28>  // b.none
    5af4:	ldr	x1, [x19, #256]
    5af8:	add	x0, x1, #0x1
    5afc:	str	x0, [x19, #256]
    5b00:	mov	w0, #0x29                  	// #41
    5b04:	strb	w0, [x19, x1]
    5b08:	strb	w0, [x19, #264]
    5b0c:	ldp	x23, x24, [sp, #48]
    5b10:	b	56f4 <d_print_mod+0x608>
    5b14:	strb	wzr, [x19, #255]
    5b18:	ldr	x3, [x19, #272]
    5b1c:	ldr	x2, [x19, #280]
    5b20:	mov	x1, #0xff                  	// #255
    5b24:	mov	x0, x19
    5b28:	blr	x3
    5b2c:	str	xzr, [x19, #256]
    5b30:	ldr	x0, [x19, #320]
    5b34:	add	x0, x0, #0x1
    5b38:	str	x0, [x19, #320]
    5b3c:	b	5af4 <d_print_mod+0xa08>
    5b40:	ldp	x23, x24, [sp, #48]
    5b44:	mov	x2, x20
    5b48:	mov	w1, w21
    5b4c:	mov	x0, x19
    5b50:	bl	5050 <d_print_comp>
    5b54:	b	56f4 <d_print_mod+0x608>
    5b58:	ldp	x23, x24, [sp, #48]
    5b5c:	b	56f4 <d_print_mod+0x608>
    5b60:	ldp	x23, x24, [sp, #48]
    5b64:	b	56f4 <d_print_mod+0x608>
    5b68:	ldp	x23, x24, [sp, #48]
    5b6c:	b	56f4 <d_print_mod+0x608>
    5b70:	ldp	x23, x24, [sp, #48]
    5b74:	b	56f4 <d_print_mod+0x608>
    5b78:	ldp	x23, x24, [sp, #48]
    5b7c:	b	56f4 <d_print_mod+0x608>
    5b80:	ldp	x23, x24, [sp, #48]
    5b84:	b	56f4 <d_print_mod+0x608>
    5b88:	ldp	x23, x24, [sp, #48]
    5b8c:	b	56f4 <d_print_mod+0x608>
    5b90:	ldp	x23, x24, [sp, #48]
    5b94:	b	56f4 <d_print_mod+0x608>
    5b98:	ldp	x23, x24, [sp, #48]
    5b9c:	b	56f4 <d_print_mod+0x608>
    5ba0:	ldp	x23, x24, [sp, #48]
    5ba4:	b	56f4 <d_print_mod+0x608>
    5ba8:	ldp	x23, x24, [sp, #48]
    5bac:	b	56f4 <d_print_mod+0x608>

0000000000005bb0 <d_print_function_type>:
    5bb0:	stp	x29, x30, [sp, #-64]!
    5bb4:	mov	x29, sp
    5bb8:	stp	x19, x20, [sp, #16]
    5bbc:	stp	x21, x22, [sp, #32]
    5bc0:	str	x23, [sp, #48]
    5bc4:	mov	x19, x0
    5bc8:	mov	w21, w1
    5bcc:	mov	x22, x2
    5bd0:	mov	x20, x3
    5bd4:	cbz	x3, 5c1c <d_print_function_type+0x6c>
    5bd8:	mov	x1, x3
    5bdc:	mov	x3, #0x1                   	// #1
    5be0:	mov	x2, #0xe000000             	// #234881024
    5be4:	movk	x2, #0x862, lsl #32
    5be8:	ldr	w0, [x1, #16]
    5bec:	cbnz	w0, 5c1c <d_print_function_type+0x6c>
    5bf0:	ldr	x0, [x1, #8]
    5bf4:	ldr	w0, [x0]
    5bf8:	cmp	w0, #0x2b
    5bfc:	b.hi	5c14 <d_print_function_type+0x64>  // b.pmore
    5c00:	lsl	x0, x3, x0
    5c04:	tst	x0, x2
    5c08:	b.ne	5c50 <d_print_function_type+0xa0>  // b.any
    5c0c:	tst	x0, #0x1c00000000
    5c10:	b.ne	5c3c <d_print_function_type+0x8c>  // b.any
    5c14:	ldr	x1, [x1]
    5c18:	cbnz	x1, 5be8 <d_print_function_type+0x38>
    5c1c:	ldr	x23, [x19, #296]
    5c20:	str	xzr, [x19, #296]
    5c24:	mov	w3, #0x0                   	// #0
    5c28:	mov	x2, x20
    5c2c:	mov	w1, w21
    5c30:	mov	x0, x19
    5c34:	bl	5e48 <d_print_mod_list>
    5c38:	b	5ce4 <d_print_function_type+0x134>
    5c3c:	ldrb	w0, [x19, #264]
    5c40:	and	w0, w0, #0xfffffffd
    5c44:	and	w0, w0, #0xff
    5c48:	cmp	w0, #0x28
    5c4c:	b.eq	5c80 <d_print_function_type+0xd0>  // b.none
    5c50:	ldrb	w0, [x19, #264]
    5c54:	cmp	w0, #0x20
    5c58:	b.eq	5c80 <d_print_function_type+0xd0>  // b.none
    5c5c:	ldr	x0, [x19, #256]
    5c60:	cmp	x0, #0xff
    5c64:	b.eq	5d6c <d_print_function_type+0x1bc>  // b.none
    5c68:	ldr	x1, [x19, #256]
    5c6c:	add	x0, x1, #0x1
    5c70:	str	x0, [x19, #256]
    5c74:	mov	w0, #0x20                  	// #32
    5c78:	strb	w0, [x19, x1]
    5c7c:	strb	w0, [x19, #264]
    5c80:	ldr	x0, [x19, #256]
    5c84:	cmp	x0, #0xff
    5c88:	b.eq	5d98 <d_print_function_type+0x1e8>  // b.none
    5c8c:	ldr	x1, [x19, #256]
    5c90:	add	x0, x1, #0x1
    5c94:	str	x0, [x19, #256]
    5c98:	mov	w0, #0x28                  	// #40
    5c9c:	strb	w0, [x19, x1]
    5ca0:	strb	w0, [x19, #264]
    5ca4:	ldr	x23, [x19, #296]
    5ca8:	str	xzr, [x19, #296]
    5cac:	mov	w3, #0x0                   	// #0
    5cb0:	mov	x2, x20
    5cb4:	mov	w1, w21
    5cb8:	mov	x0, x19
    5cbc:	bl	5e48 <d_print_mod_list>
    5cc0:	ldr	x0, [x19, #256]
    5cc4:	cmp	x0, #0xff
    5cc8:	b.eq	5dc4 <d_print_function_type+0x214>  // b.none
    5ccc:	ldr	x1, [x19, #256]
    5cd0:	add	x0, x1, #0x1
    5cd4:	str	x0, [x19, #256]
    5cd8:	mov	w0, #0x29                  	// #41
    5cdc:	strb	w0, [x19, x1]
    5ce0:	strb	w0, [x19, #264]
    5ce4:	ldr	x0, [x19, #256]
    5ce8:	cmp	x0, #0xff
    5cec:	b.eq	5df0 <d_print_function_type+0x240>  // b.none
    5cf0:	ldr	x1, [x19, #256]
    5cf4:	add	x0, x1, #0x1
    5cf8:	str	x0, [x19, #256]
    5cfc:	mov	w0, #0x28                  	// #40
    5d00:	strb	w0, [x19, x1]
    5d04:	strb	w0, [x19, #264]
    5d08:	ldr	x2, [x22, #16]
    5d0c:	cbz	x2, 5d1c <d_print_function_type+0x16c>
    5d10:	mov	w1, w21
    5d14:	mov	x0, x19
    5d18:	bl	5050 <d_print_comp>
    5d1c:	ldr	x0, [x19, #256]
    5d20:	cmp	x0, #0xff
    5d24:	b.eq	5e1c <d_print_function_type+0x26c>  // b.none
    5d28:	ldr	x1, [x19, #256]
    5d2c:	add	x0, x1, #0x1
    5d30:	str	x0, [x19, #256]
    5d34:	mov	w0, #0x29                  	// #41
    5d38:	strb	w0, [x19, x1]
    5d3c:	strb	w0, [x19, #264]
    5d40:	mov	w3, #0x1                   	// #1
    5d44:	mov	x2, x20
    5d48:	mov	w1, w21
    5d4c:	mov	x0, x19
    5d50:	bl	5e48 <d_print_mod_list>
    5d54:	str	x23, [x19, #296]
    5d58:	ldp	x19, x20, [sp, #16]
    5d5c:	ldp	x21, x22, [sp, #32]
    5d60:	ldr	x23, [sp, #48]
    5d64:	ldp	x29, x30, [sp], #64
    5d68:	ret
    5d6c:	strb	wzr, [x19, #255]
    5d70:	ldr	x3, [x19, #272]
    5d74:	ldr	x2, [x19, #280]
    5d78:	mov	x1, #0xff                  	// #255
    5d7c:	mov	x0, x19
    5d80:	blr	x3
    5d84:	str	xzr, [x19, #256]
    5d88:	ldr	x0, [x19, #320]
    5d8c:	add	x0, x0, #0x1
    5d90:	str	x0, [x19, #320]
    5d94:	b	5c68 <d_print_function_type+0xb8>
    5d98:	strb	wzr, [x19, #255]
    5d9c:	ldr	x3, [x19, #272]
    5da0:	ldr	x2, [x19, #280]
    5da4:	mov	x1, #0xff                  	// #255
    5da8:	mov	x0, x19
    5dac:	blr	x3
    5db0:	str	xzr, [x19, #256]
    5db4:	ldr	x0, [x19, #320]
    5db8:	add	x0, x0, #0x1
    5dbc:	str	x0, [x19, #320]
    5dc0:	b	5c8c <d_print_function_type+0xdc>
    5dc4:	strb	wzr, [x19, #255]
    5dc8:	ldr	x3, [x19, #272]
    5dcc:	ldr	x2, [x19, #280]
    5dd0:	mov	x1, #0xff                  	// #255
    5dd4:	mov	x0, x19
    5dd8:	blr	x3
    5ddc:	str	xzr, [x19, #256]
    5de0:	ldr	x0, [x19, #320]
    5de4:	add	x0, x0, #0x1
    5de8:	str	x0, [x19, #320]
    5dec:	b	5ccc <d_print_function_type+0x11c>
    5df0:	strb	wzr, [x19, #255]
    5df4:	ldr	x3, [x19, #272]
    5df8:	ldr	x2, [x19, #280]
    5dfc:	mov	x1, #0xff                  	// #255
    5e00:	mov	x0, x19
    5e04:	blr	x3
    5e08:	str	xzr, [x19, #256]
    5e0c:	ldr	x0, [x19, #320]
    5e10:	add	x0, x0, #0x1
    5e14:	str	x0, [x19, #320]
    5e18:	b	5cf0 <d_print_function_type+0x140>
    5e1c:	strb	wzr, [x19, #255]
    5e20:	ldr	x3, [x19, #272]
    5e24:	ldr	x2, [x19, #280]
    5e28:	mov	x1, #0xff                  	// #255
    5e2c:	mov	x0, x19
    5e30:	blr	x3
    5e34:	str	xzr, [x19, #256]
    5e38:	ldr	x0, [x19, #320]
    5e3c:	add	x0, x0, #0x1
    5e40:	str	x0, [x19, #320]
    5e44:	b	5d28 <d_print_function_type+0x178>

0000000000005e48 <d_print_mod_list>:
    5e48:	cbz	x2, 6238 <d_print_mod_list+0x3f0>
    5e4c:	stp	x29, x30, [sp, #-112]!
    5e50:	mov	x29, sp
    5e54:	stp	x19, x20, [sp, #16]
    5e58:	stp	x21, x22, [sp, #32]
    5e5c:	mov	x19, x0
    5e60:	mov	w22, w1
    5e64:	mov	x20, x2
    5e68:	mov	w21, w3
    5e6c:	ldr	w0, [x0, #304]
    5e70:	cbnz	w0, 5ef0 <d_print_mod_list+0xa8>
    5e74:	ldr	w0, [x2, #16]
    5e78:	cbnz	w0, 5f00 <d_print_mod_list+0xb8>
    5e7c:	cbnz	w3, 5e90 <d_print_mod_list+0x48>
    5e80:	ldr	x0, [x2, #8]
    5e84:	ldr	w0, [x0]
    5e88:	bl	0 <is_fnqual_component_type>
    5e8c:	cbnz	w0, 5f00 <d_print_mod_list+0xb8>
    5e90:	stp	x23, x24, [sp, #48]
    5e94:	mov	w0, #0x1                   	// #1
    5e98:	str	w0, [x20, #16]
    5e9c:	ldr	x23, [x19, #288]
    5ea0:	ldr	x0, [x20, #24]
    5ea4:	str	x0, [x19, #288]
    5ea8:	ldr	x2, [x20, #8]
    5eac:	ldr	w0, [x2]
    5eb0:	cmp	w0, #0x29
    5eb4:	b.eq	5f18 <d_print_mod_list+0xd0>  // b.none
    5eb8:	cmp	w0, #0x2a
    5ebc:	b.eq	5f34 <d_print_mod_list+0xec>  // b.none
    5ec0:	cmp	w0, #0x2
    5ec4:	b.eq	5f50 <d_print_mod_list+0x108>  // b.none
    5ec8:	mov	w1, w22
    5ecc:	mov	x0, x19
    5ed0:	bl	50ec <d_print_mod>
    5ed4:	str	x23, [x19, #288]
    5ed8:	mov	w3, w21
    5edc:	ldr	x2, [x20]
    5ee0:	mov	w1, w22
    5ee4:	mov	x0, x19
    5ee8:	bl	5e48 <d_print_mod_list>
    5eec:	ldp	x23, x24, [sp, #48]
    5ef0:	ldp	x19, x20, [sp, #16]
    5ef4:	ldp	x21, x22, [sp, #32]
    5ef8:	ldp	x29, x30, [sp], #112
    5efc:	ret
    5f00:	mov	w3, w21
    5f04:	ldr	x2, [x20]
    5f08:	mov	w1, w22
    5f0c:	mov	x0, x19
    5f10:	bl	5e48 <d_print_mod_list>
    5f14:	b	5ef0 <d_print_mod_list+0xa8>
    5f18:	ldr	x3, [x20]
    5f1c:	mov	w1, w22
    5f20:	mov	x0, x19
    5f24:	bl	5bb0 <d_print_function_type>
    5f28:	str	x23, [x19, #288]
    5f2c:	ldp	x23, x24, [sp, #48]
    5f30:	b	5ef0 <d_print_mod_list+0xa8>
    5f34:	ldr	x3, [x20]
    5f38:	mov	w1, w22
    5f3c:	mov	x0, x19
    5f40:	bl	623c <d_print_array_type>
    5f44:	str	x23, [x19, #288]
    5f48:	ldp	x23, x24, [sp, #48]
    5f4c:	b	5ef0 <d_print_mod_list+0xa8>
    5f50:	ldr	x21, [x19, #296]
    5f54:	str	xzr, [x19, #296]
    5f58:	ldr	x0, [x20, #8]
    5f5c:	ldr	x2, [x0, #8]
    5f60:	mov	w1, w22
    5f64:	mov	x0, x19
    5f68:	bl	5050 <d_print_comp>
    5f6c:	str	x21, [x19, #296]
    5f70:	tbz	w22, #2, 5fc0 <d_print_mod_list+0x178>
    5f74:	ldr	x0, [x19, #256]
    5f78:	cmp	x0, #0xff
    5f7c:	b.eq	604c <d_print_mod_list+0x204>  // b.none
    5f80:	ldr	x1, [x19, #256]
    5f84:	add	x0, x1, #0x1
    5f88:	str	x0, [x19, #256]
    5f8c:	mov	w0, #0x2e                  	// #46
    5f90:	strb	w0, [x19, x1]
    5f94:	strb	w0, [x19, #264]
    5f98:	ldr	x0, [x20, #8]
    5f9c:	ldr	x20, [x0, #16]
    5fa0:	ldr	w0, [x20]
    5fa4:	cmp	w0, #0x47
    5fa8:	b.eq	6078 <d_print_mod_list+0x230>  // b.none
    5fac:	ldr	w0, [x20]
    5fb0:	bl	0 <is_fnqual_component_type>
    5fb4:	cbz	w0, 621c <d_print_mod_list+0x3d4>
    5fb8:	ldr	x20, [x20, #8]
    5fbc:	b	5fac <d_print_mod_list+0x164>
    5fc0:	adrp	x0, 0 <is_fnqual_component_type>
    5fc4:	add	x0, x0, #0x0
    5fc8:	bl	0 <__asan_internal_strlen>
    5fcc:	cbz	x0, 5f98 <d_print_mod_list+0x150>
    5fd0:	stp	x25, x26, [sp, #64]
    5fd4:	adrp	x21, 0 <is_fnqual_component_type>
    5fd8:	add	x21, x21, #0x0
    5fdc:	add	x25, x0, x21
    5fe0:	mov	x26, #0xff                  	// #255
    5fe4:	b	6008 <d_print_mod_list+0x1c0>
    5fe8:	ldr	x0, [x19, #256]
    5fec:	add	x1, x0, #0x1
    5ff0:	str	x1, [x19, #256]
    5ff4:	strb	w24, [x19, x0]
    5ff8:	strb	w24, [x19, #264]
    5ffc:	add	x21, x21, #0x1
    6000:	cmp	x21, x25
    6004:	b.eq	6044 <d_print_mod_list+0x1fc>  // b.none
    6008:	ldrb	w24, [x21]
    600c:	ldr	x0, [x19, #256]
    6010:	cmp	x0, #0xff
    6014:	b.ne	5fe8 <d_print_mod_list+0x1a0>  // b.any
    6018:	strb	wzr, [x19, #255]
    601c:	ldr	x3, [x19, #272]
    6020:	ldr	x2, [x19, #280]
    6024:	mov	x1, x26
    6028:	mov	x0, x19
    602c:	blr	x3
    6030:	str	xzr, [x19, #256]
    6034:	ldr	x0, [x19, #320]
    6038:	add	x0, x0, #0x1
    603c:	str	x0, [x19, #320]
    6040:	b	5fe8 <d_print_mod_list+0x1a0>
    6044:	ldp	x25, x26, [sp, #64]
    6048:	b	5f98 <d_print_mod_list+0x150>
    604c:	strb	wzr, [x19, #255]
    6050:	ldr	x3, [x19, #272]
    6054:	ldr	x2, [x19, #280]
    6058:	mov	x1, #0xff                  	// #255
    605c:	mov	x0, x19
    6060:	blr	x3
    6064:	str	xzr, [x19, #256]
    6068:	ldr	x0, [x19, #320]
    606c:	add	x0, x0, #0x1
    6070:	str	x0, [x19, #320]
    6074:	b	5f80 <d_print_mod_list+0x138>
    6078:	stp	x25, x26, [sp, #64]
    607c:	adrp	x0, 0 <is_fnqual_component_type>
    6080:	add	x0, x0, #0x0
    6084:	bl	0 <__asan_internal_strlen>
    6088:	cbz	x0, 60fc <d_print_mod_list+0x2b4>
    608c:	adrp	x21, 0 <is_fnqual_component_type>
    6090:	add	x21, x21, #0x0
    6094:	add	x25, x0, x21
    6098:	mov	x26, #0xff                  	// #255
    609c:	b	60c0 <d_print_mod_list+0x278>
    60a0:	ldr	x0, [x19, #256]
    60a4:	add	x1, x0, #0x1
    60a8:	str	x1, [x19, #256]
    60ac:	strb	w24, [x19, x0]
    60b0:	strb	w24, [x19, #264]
    60b4:	add	x21, x21, #0x1
    60b8:	cmp	x21, x25
    60bc:	b.eq	60fc <d_print_mod_list+0x2b4>  // b.none
    60c0:	ldrb	w24, [x21]
    60c4:	ldr	x0, [x19, #256]
    60c8:	cmp	x0, #0xff
    60cc:	b.ne	60a0 <d_print_mod_list+0x258>  // b.any
    60d0:	strb	wzr, [x19, #255]
    60d4:	ldr	x3, [x19, #272]
    60d8:	ldr	x2, [x19, #280]
    60dc:	mov	x1, x26
    60e0:	mov	x0, x19
    60e4:	blr	x3
    60e8:	str	xzr, [x19, #256]
    60ec:	ldr	x0, [x19, #320]
    60f0:	add	x0, x0, #0x1
    60f4:	str	x0, [x19, #320]
    60f8:	b	60a0 <d_print_mod_list+0x258>
    60fc:	ldr	w2, [x20, #16]
    6100:	add	x21, sp, #0x50
    6104:	add	w2, w2, #0x1
    6108:	adrp	x1, 0 <is_fnqual_component_type>
    610c:	add	x1, x1, #0x0
    6110:	mov	x0, x21
    6114:	bl	0 <sprintf>
    6118:	mov	x0, x21
    611c:	bl	0 <__asan_internal_strlen>
    6120:	cbz	x0, 6190 <d_print_mod_list+0x348>
    6124:	add	x21, sp, #0x50
    6128:	add	x25, x0, x21
    612c:	mov	x26, #0xff                  	// #255
    6130:	b	6154 <d_print_mod_list+0x30c>
    6134:	ldr	x0, [x19, #256]
    6138:	add	x1, x0, #0x1
    613c:	str	x1, [x19, #256]
    6140:	strb	w24, [x19, x0]
    6144:	strb	w24, [x19, #264]
    6148:	add	x21, x21, #0x1
    614c:	cmp	x21, x25
    6150:	b.eq	6190 <d_print_mod_list+0x348>  // b.none
    6154:	ldrb	w24, [x21]
    6158:	ldr	x0, [x19, #256]
    615c:	cmp	x0, #0xff
    6160:	b.ne	6134 <d_print_mod_list+0x2ec>  // b.any
    6164:	strb	wzr, [x19, #255]
    6168:	ldr	x3, [x19, #272]
    616c:	ldr	x2, [x19, #280]
    6170:	mov	x1, x26
    6174:	mov	x0, x19
    6178:	blr	x3
    617c:	str	xzr, [x19, #256]
    6180:	ldr	x0, [x19, #320]
    6184:	add	x0, x0, #0x1
    6188:	str	x0, [x19, #320]
    618c:	b	6134 <d_print_mod_list+0x2ec>
    6190:	adrp	x0, 0 <is_fnqual_component_type>
    6194:	add	x0, x0, #0x0
    6198:	bl	0 <__asan_internal_strlen>
    619c:	cbz	x0, 6210 <d_print_mod_list+0x3c8>
    61a0:	adrp	x21, 0 <is_fnqual_component_type>
    61a4:	add	x21, x21, #0x0
    61a8:	add	x25, x21, x0
    61ac:	mov	x26, #0xff                  	// #255
    61b0:	b	61d4 <d_print_mod_list+0x38c>
    61b4:	ldr	x0, [x19, #256]
    61b8:	add	x1, x0, #0x1
    61bc:	str	x1, [x19, #256]
    61c0:	strb	w24, [x19, x0]
    61c4:	strb	w24, [x19, #264]
    61c8:	add	x21, x21, #0x1
    61cc:	cmp	x25, x21
    61d0:	b.eq	6210 <d_print_mod_list+0x3c8>  // b.none
    61d4:	ldrb	w24, [x21]
    61d8:	ldr	x0, [x19, #256]
    61dc:	cmp	x0, #0xff
    61e0:	b.ne	61b4 <d_print_mod_list+0x36c>  // b.any
    61e4:	strb	wzr, [x19, #255]
    61e8:	ldr	x3, [x19, #272]
    61ec:	ldr	x2, [x19, #280]
    61f0:	mov	x1, x26
    61f4:	mov	x0, x19
    61f8:	blr	x3
    61fc:	str	xzr, [x19, #256]
    6200:	ldr	x0, [x19, #320]
    6204:	add	x0, x0, #0x1
    6208:	str	x0, [x19, #320]
    620c:	b	61b4 <d_print_mod_list+0x36c>
    6210:	ldr	x20, [x20, #8]
    6214:	ldp	x25, x26, [sp, #64]
    6218:	b	5fac <d_print_mod_list+0x164>
    621c:	mov	x2, x20
    6220:	mov	w1, w22
    6224:	mov	x0, x19
    6228:	bl	5050 <d_print_comp>
    622c:	str	x23, [x19, #288]
    6230:	ldp	x23, x24, [sp, #48]
    6234:	b	5ef0 <d_print_mod_list+0xa8>
    6238:	ret

000000000000623c <d_print_array_type>:
    623c:	stp	x29, x30, [sp, #-80]!
    6240:	mov	x29, sp
    6244:	stp	x19, x20, [sp, #16]
    6248:	stp	x21, x22, [sp, #32]
    624c:	stp	x23, x24, [sp, #48]
    6250:	mov	x19, x0
    6254:	mov	w22, w1
    6258:	mov	x24, x2
    625c:	cbz	x3, 6368 <d_print_array_type+0x12c>
    6260:	mov	x21, x3
    6264:	mov	x0, x3
    6268:	ldr	w20, [x0, #16]
    626c:	cbz	w20, 6298 <d_print_array_type+0x5c>
    6270:	ldr	x0, [x0]
    6274:	cbnz	x0, 6268 <d_print_array_type+0x2c>
    6278:	mov	w20, #0x1                   	// #1
    627c:	mov	w3, #0x0                   	// #0
    6280:	mov	x2, x21
    6284:	mov	w1, w22
    6288:	mov	x0, x19
    628c:	bl	5e48 <d_print_mod_list>
    6290:	cbz	w20, 638c <d_print_array_type+0x150>
    6294:	b	6368 <d_print_array_type+0x12c>
    6298:	ldr	x0, [x0, #8]
    629c:	ldr	w0, [x0]
    62a0:	cmp	w0, #0x2a
    62a4:	b.eq	627c <d_print_array_type+0x40>  // b.none
    62a8:	adrp	x0, 0 <is_fnqual_component_type>
    62ac:	add	x0, x0, #0x0
    62b0:	bl	0 <__asan_internal_strlen>
    62b4:	cbz	x0, 6330 <d_print_array_type+0xf4>
    62b8:	stp	x25, x26, [sp, #64]
    62bc:	adrp	x20, 0 <is_fnqual_component_type>
    62c0:	add	x20, x20, #0x0
    62c4:	add	x25, x0, x20
    62c8:	mov	x26, #0xff                  	// #255
    62cc:	b	62f0 <d_print_array_type+0xb4>
    62d0:	ldr	x0, [x19, #256]
    62d4:	add	x1, x0, #0x1
    62d8:	str	x1, [x19, #256]
    62dc:	strb	w23, [x19, x0]
    62e0:	strb	w23, [x19, #264]
    62e4:	add	x20, x20, #0x1
    62e8:	cmp	x25, x20
    62ec:	b.eq	632c <d_print_array_type+0xf0>  // b.none
    62f0:	ldrb	w23, [x20]
    62f4:	ldr	x0, [x19, #256]
    62f8:	cmp	x0, #0xff
    62fc:	b.ne	62d0 <d_print_array_type+0x94>  // b.any
    6300:	strb	wzr, [x19, #255]
    6304:	ldr	x3, [x19, #272]
    6308:	ldr	x2, [x19, #280]
    630c:	mov	x1, x26
    6310:	mov	x0, x19
    6314:	blr	x3
    6318:	str	xzr, [x19, #256]
    631c:	ldr	x0, [x19, #320]
    6320:	add	x0, x0, #0x1
    6324:	str	x0, [x19, #320]
    6328:	b	62d0 <d_print_array_type+0x94>
    632c:	ldp	x25, x26, [sp, #64]
    6330:	mov	w3, #0x0                   	// #0
    6334:	mov	x2, x21
    6338:	mov	w1, w22
    633c:	mov	x0, x19
    6340:	bl	5e48 <d_print_mod_list>
    6344:	ldr	x0, [x19, #256]
    6348:	cmp	x0, #0xff
    634c:	b.eq	63fc <d_print_array_type+0x1c0>  // b.none
    6350:	ldr	x1, [x19, #256]
    6354:	add	x0, x1, #0x1
    6358:	str	x0, [x19, #256]
    635c:	mov	w0, #0x29                  	// #41
    6360:	strb	w0, [x19, x1]
    6364:	strb	w0, [x19, #264]
    6368:	ldr	x0, [x19, #256]
    636c:	cmp	x0, #0xff
    6370:	b.eq	6428 <d_print_array_type+0x1ec>  // b.none
    6374:	ldr	x1, [x19, #256]
    6378:	add	x0, x1, #0x1
    637c:	str	x0, [x19, #256]
    6380:	mov	w0, #0x20                  	// #32
    6384:	strb	w0, [x19, x1]
    6388:	strb	w0, [x19, #264]
    638c:	ldr	x0, [x19, #256]
    6390:	cmp	x0, #0xff
    6394:	b.eq	6454 <d_print_array_type+0x218>  // b.none
    6398:	ldr	x1, [x19, #256]
    639c:	add	x0, x1, #0x1
    63a0:	str	x0, [x19, #256]
    63a4:	mov	w0, #0x5b                  	// #91
    63a8:	strb	w0, [x19, x1]
    63ac:	strb	w0, [x19, #264]
    63b0:	ldr	x2, [x24, #8]
    63b4:	cbz	x2, 63c4 <d_print_array_type+0x188>
    63b8:	mov	w1, w22
    63bc:	mov	x0, x19
    63c0:	bl	5050 <d_print_comp>
    63c4:	ldr	x0, [x19, #256]
    63c8:	cmp	x0, #0xff
    63cc:	b.eq	6480 <d_print_array_type+0x244>  // b.none
    63d0:	ldr	x1, [x19, #256]
    63d4:	add	x0, x1, #0x1
    63d8:	str	x0, [x19, #256]
    63dc:	mov	w0, #0x5d                  	// #93
    63e0:	strb	w0, [x19, x1]
    63e4:	strb	w0, [x19, #264]
    63e8:	ldp	x19, x20, [sp, #16]
    63ec:	ldp	x21, x22, [sp, #32]
    63f0:	ldp	x23, x24, [sp, #48]
    63f4:	ldp	x29, x30, [sp], #80
    63f8:	ret
    63fc:	strb	wzr, [x19, #255]
    6400:	ldr	x3, [x19, #272]
    6404:	ldr	x2, [x19, #280]
    6408:	mov	x1, #0xff                  	// #255
    640c:	mov	x0, x19
    6410:	blr	x3
    6414:	str	xzr, [x19, #256]
    6418:	ldr	x0, [x19, #320]
    641c:	add	x0, x0, #0x1
    6420:	str	x0, [x19, #320]
    6424:	b	6350 <d_print_array_type+0x114>
    6428:	strb	wzr, [x19, #255]
    642c:	ldr	x3, [x19, #272]
    6430:	ldr	x2, [x19, #280]
    6434:	mov	x1, #0xff                  	// #255
    6438:	mov	x0, x19
    643c:	blr	x3
    6440:	str	xzr, [x19, #256]
    6444:	ldr	x0, [x19, #320]
    6448:	add	x0, x0, #0x1
    644c:	str	x0, [x19, #320]
    6450:	b	6374 <d_print_array_type+0x138>
    6454:	strb	wzr, [x19, #255]
    6458:	ldr	x3, [x19, #272]
    645c:	ldr	x2, [x19, #280]
    6460:	mov	x1, #0xff                  	// #255
    6464:	mov	x0, x19
    6468:	blr	x3
    646c:	str	xzr, [x19, #256]
    6470:	ldr	x0, [x19, #320]
    6474:	add	x0, x0, #0x1
    6478:	str	x0, [x19, #320]
    647c:	b	6398 <d_print_array_type+0x15c>
    6480:	strb	wzr, [x19, #255]
    6484:	ldr	x3, [x19, #272]
    6488:	ldr	x2, [x19, #280]
    648c:	mov	x1, #0xff                  	// #255
    6490:	mov	x0, x19
    6494:	blr	x3
    6498:	str	xzr, [x19, #256]
    649c:	ldr	x0, [x19, #320]
    64a0:	add	x0, x0, #0x1
    64a4:	str	x0, [x19, #320]
    64a8:	b	63d0 <d_print_array_type+0x194>

00000000000064ac <d_print_expr_op>:
    64ac:	stp	x29, x30, [sp, #-64]!
    64b0:	mov	x29, sp
    64b4:	stp	x19, x20, [sp, #16]
    64b8:	mov	x19, x0
    64bc:	ldr	w0, [x2]
    64c0:	cmp	w0, #0x32
    64c4:	b.eq	64dc <d_print_expr_op+0x30>  // b.none
    64c8:	mov	x0, x19
    64cc:	bl	5050 <d_print_comp>
    64d0:	ldp	x19, x20, [sp, #16]
    64d4:	ldp	x29, x30, [sp], #64
    64d8:	ret
    64dc:	stp	x21, x22, [sp, #32]
    64e0:	ldr	x0, [x2, #8]
    64e4:	ldr	x22, [x0, #8]
    64e8:	ldrsw	x0, [x0, #16]
    64ec:	cbz	x0, 656c <d_print_expr_op+0xc0>
    64f0:	str	x23, [sp, #48]
    64f4:	mov	x20, x22
    64f8:	add	x22, x22, x0
    64fc:	mov	x23, #0xff                  	// #255
    6500:	b	6524 <d_print_expr_op+0x78>
    6504:	ldr	x0, [x19, #256]
    6508:	add	x1, x0, #0x1
    650c:	str	x1, [x19, #256]
    6510:	strb	w21, [x19, x0]
    6514:	strb	w21, [x19, #264]
    6518:	add	x20, x20, #0x1
    651c:	cmp	x20, x22
    6520:	b.eq	6560 <d_print_expr_op+0xb4>  // b.none
    6524:	ldrb	w21, [x20]
    6528:	ldr	x0, [x19, #256]
    652c:	cmp	x0, #0xff
    6530:	b.ne	6504 <d_print_expr_op+0x58>  // b.any
    6534:	strb	wzr, [x19, #255]
    6538:	ldr	x3, [x19, #272]
    653c:	ldr	x2, [x19, #280]
    6540:	mov	x1, x23
    6544:	mov	x0, x19
    6548:	blr	x3
    654c:	str	xzr, [x19, #256]
    6550:	ldr	x0, [x19, #320]
    6554:	add	x0, x0, #0x1
    6558:	str	x0, [x19, #320]
    655c:	b	6504 <d_print_expr_op+0x58>
    6560:	ldp	x21, x22, [sp, #32]
    6564:	ldr	x23, [sp, #48]
    6568:	b	64d0 <d_print_expr_op+0x24>
    656c:	ldp	x21, x22, [sp, #32]
    6570:	b	64d0 <d_print_expr_op+0x24>

0000000000006574 <d_print_subexpr>:
    6574:	stp	x29, x30, [sp, #-48]!
    6578:	mov	x29, sp
    657c:	stp	x19, x20, [sp, #16]
    6580:	str	x21, [sp, #32]
    6584:	mov	x19, x0
    6588:	mov	w21, w1
    658c:	mov	x20, x2
    6590:	ldr	w0, [x2]
    6594:	cmp	w0, #0x31
    6598:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    659c:	ccmp	w0, #0x6, #0x4, hi  // hi = pmore
    65a0:	b.ne	65b0 <d_print_subexpr+0x3c>  // b.any
    65a4:	mov	x0, x19
    65a8:	bl	5050 <d_print_comp>
    65ac:	b	6608 <d_print_subexpr+0x94>
    65b0:	ldr	x0, [x19, #256]
    65b4:	cmp	x0, #0xff
    65b8:	b.eq	6618 <d_print_subexpr+0xa4>  // b.none
    65bc:	ldr	x1, [x19, #256]
    65c0:	add	x0, x1, #0x1
    65c4:	str	x0, [x19, #256]
    65c8:	mov	w0, #0x28                  	// #40
    65cc:	strb	w0, [x19, x1]
    65d0:	strb	w0, [x19, #264]
    65d4:	mov	x2, x20
    65d8:	mov	w1, w21
    65dc:	mov	x0, x19
    65e0:	bl	5050 <d_print_comp>
    65e4:	ldr	x0, [x19, #256]
    65e8:	cmp	x0, #0xff
    65ec:	b.eq	6644 <d_print_subexpr+0xd0>  // b.none
    65f0:	ldr	x1, [x19, #256]
    65f4:	add	x0, x1, #0x1
    65f8:	str	x0, [x19, #256]
    65fc:	mov	w0, #0x29                  	// #41
    6600:	strb	w0, [x19, x1]
    6604:	strb	w0, [x19, #264]
    6608:	ldp	x19, x20, [sp, #16]
    660c:	ldr	x21, [sp, #32]
    6610:	ldp	x29, x30, [sp], #48
    6614:	ret
    6618:	strb	wzr, [x19, #255]
    661c:	ldr	x3, [x19, #272]
    6620:	ldr	x2, [x19, #280]
    6624:	mov	x1, #0xff                  	// #255
    6628:	mov	x0, x19
    662c:	blr	x3
    6630:	str	xzr, [x19, #256]
    6634:	ldr	x0, [x19, #320]
    6638:	add	x0, x0, #0x1
    663c:	str	x0, [x19, #320]
    6640:	b	65bc <d_print_subexpr+0x48>
    6644:	strb	wzr, [x19, #255]
    6648:	ldr	x3, [x19, #272]
    664c:	ldr	x2, [x19, #280]
    6650:	mov	x1, #0xff                  	// #255
    6654:	mov	x0, x19
    6658:	blr	x3
    665c:	str	xzr, [x19, #256]
    6660:	ldr	x0, [x19, #320]
    6664:	add	x0, x0, #0x1
    6668:	str	x0, [x19, #320]
    666c:	b	65f0 <d_print_subexpr+0x7c>

0000000000006670 <d_maybe_print_fold_expression>:
    6670:	stp	x29, x30, [sp, #-96]!
    6674:	mov	x29, sp
    6678:	stp	x19, x20, [sp, #16]
    667c:	stp	x21, x22, [sp, #32]
    6680:	mov	x19, x0
    6684:	mov	w21, w1
    6688:	ldr	x0, [x2, #8]
    668c:	ldr	x0, [x0, #8]
    6690:	ldr	x0, [x0]
    6694:	ldrb	w1, [x0]
    6698:	cmp	w1, #0x66
    669c:	b.ne	6a78 <d_maybe_print_fold_expression+0x408>  // b.any
    66a0:	stp	x23, x24, [sp, #48]
    66a4:	stp	x25, x26, [sp, #64]
    66a8:	ldr	x1, [x2, #16]
    66ac:	ldr	x24, [x1, #8]
    66b0:	ldr	x25, [x1, #16]
    66b4:	ldr	w1, [x25]
    66b8:	mov	x26, #0x0                   	// #0
    66bc:	cmp	w1, #0x3c
    66c0:	b.eq	675c <d_maybe_print_fold_expression+0xec>  // b.none
    66c4:	ldr	w23, [x19, #316]
    66c8:	mov	w1, #0xffffffff            	// #-1
    66cc:	str	w1, [x19, #316]
    66d0:	ldrb	w0, [x0, #1]
    66d4:	cmp	w0, #0x6c
    66d8:	b.eq	67d8 <d_maybe_print_fold_expression+0x168>  // b.none
    66dc:	b.hi	6768 <d_maybe_print_fold_expression+0xf8>  // b.pmore
    66e0:	cmp	w0, #0x4c
    66e4:	b.eq	66f0 <d_maybe_print_fold_expression+0x80>  // b.none
    66e8:	cmp	w0, #0x52
    66ec:	b.ne	68a4 <d_maybe_print_fold_expression+0x234>  // b.any
    66f0:	ldr	x0, [x19, #256]
    66f4:	cmp	x0, #0xff
    66f8:	b.eq	6978 <d_maybe_print_fold_expression+0x308>  // b.none
    66fc:	ldr	x1, [x19, #256]
    6700:	add	x0, x1, #0x1
    6704:	str	x0, [x19, #256]
    6708:	mov	w0, #0x28                  	// #40
    670c:	strb	w0, [x19, x1]
    6710:	strb	w0, [x19, #264]
    6714:	mov	x2, x25
    6718:	mov	w1, w21
    671c:	mov	x0, x19
    6720:	bl	6574 <d_print_subexpr>
    6724:	mov	x2, x24
    6728:	mov	w1, w21
    672c:	mov	x0, x19
    6730:	bl	64ac <d_print_expr_op>
    6734:	adrp	x0, 0 <is_fnqual_component_type>
    6738:	add	x0, x0, #0x0
    673c:	bl	0 <__asan_internal_strlen>
    6740:	cbz	x0, 6a04 <d_maybe_print_fold_expression+0x394>
    6744:	str	x27, [sp, #80]
    6748:	adrp	x20, 0 <is_fnqual_component_type>
    674c:	add	x20, x20, #0x0
    6750:	add	x25, x0, x20
    6754:	mov	x27, #0xff                  	// #255
    6758:	b	69c4 <d_maybe_print_fold_expression+0x354>
    675c:	ldr	x26, [x25, #16]
    6760:	ldr	x25, [x25, #8]
    6764:	b	66c4 <d_maybe_print_fold_expression+0x54>
    6768:	cmp	w0, #0x72
    676c:	b.ne	68a4 <d_maybe_print_fold_expression+0x234>  // b.any
    6770:	ldr	x0, [x19, #256]
    6774:	cmp	x0, #0xff
    6778:	b.eq	68f0 <d_maybe_print_fold_expression+0x280>  // b.none
    677c:	ldr	x1, [x19, #256]
    6780:	add	x0, x1, #0x1
    6784:	str	x0, [x19, #256]
    6788:	mov	w0, #0x28                  	// #40
    678c:	strb	w0, [x19, x1]
    6790:	strb	w0, [x19, #264]
    6794:	mov	x2, x25
    6798:	mov	w1, w21
    679c:	mov	x0, x19
    67a0:	bl	6574 <d_print_subexpr>
    67a4:	mov	x2, x24
    67a8:	mov	w1, w21
    67ac:	mov	x0, x19
    67b0:	bl	64ac <d_print_expr_op>
    67b4:	adrp	x0, 0 <is_fnqual_component_type>
    67b8:	add	x0, x0, #0x0
    67bc:	bl	0 <__asan_internal_strlen>
    67c0:	cbz	x0, 68a4 <d_maybe_print_fold_expression+0x234>
    67c4:	adrp	x20, 0 <is_fnqual_component_type>
    67c8:	add	x20, x20, #0x0
    67cc:	add	x22, x0, x20
    67d0:	mov	x24, #0xff                  	// #255
    67d4:	b	693c <d_maybe_print_fold_expression+0x2cc>
    67d8:	adrp	x0, 0 <is_fnqual_component_type>
    67dc:	add	x0, x0, #0x0
    67e0:	bl	0 <__asan_internal_strlen>
    67e4:	cbz	x0, 6860 <d_maybe_print_fold_expression+0x1f0>
    67e8:	str	x27, [sp, #80]
    67ec:	adrp	x20, 0 <is_fnqual_component_type>
    67f0:	add	x20, x20, #0x0
    67f4:	add	x26, x0, x20
    67f8:	mov	x27, #0xff                  	// #255
    67fc:	b	6820 <d_maybe_print_fold_expression+0x1b0>
    6800:	ldr	x0, [x19, #256]
    6804:	add	x1, x0, #0x1
    6808:	str	x1, [x19, #256]
    680c:	strb	w22, [x19, x0]
    6810:	strb	w22, [x19, #264]
    6814:	add	x20, x20, #0x1
    6818:	cmp	x26, x20
    681c:	b.eq	685c <d_maybe_print_fold_expression+0x1ec>  // b.none
    6820:	ldrb	w22, [x20]
    6824:	ldr	x0, [x19, #256]
    6828:	cmp	x0, #0xff
    682c:	b.ne	6800 <d_maybe_print_fold_expression+0x190>  // b.any
    6830:	strb	wzr, [x19, #255]
    6834:	ldr	x3, [x19, #272]
    6838:	ldr	x2, [x19, #280]
    683c:	mov	x1, x27
    6840:	mov	x0, x19
    6844:	blr	x3
    6848:	str	xzr, [x19, #256]
    684c:	ldr	x0, [x19, #320]
    6850:	add	x0, x0, #0x1
    6854:	str	x0, [x19, #320]
    6858:	b	6800 <d_maybe_print_fold_expression+0x190>
    685c:	ldr	x27, [sp, #80]
    6860:	mov	x2, x24
    6864:	mov	w1, w21
    6868:	mov	x0, x19
    686c:	bl	64ac <d_print_expr_op>
    6870:	mov	x2, x25
    6874:	mov	w1, w21
    6878:	mov	x0, x19
    687c:	bl	6574 <d_print_subexpr>
    6880:	ldr	x0, [x19, #256]
    6884:	cmp	x0, #0xff
    6888:	b.eq	68c4 <d_maybe_print_fold_expression+0x254>  // b.none
    688c:	ldr	x1, [x19, #256]
    6890:	add	x0, x1, #0x1
    6894:	str	x0, [x19, #256]
    6898:	mov	w0, #0x29                  	// #41
    689c:	strb	w0, [x19, x1]
    68a0:	strb	w0, [x19, #264]
    68a4:	str	w23, [x19, #316]
    68a8:	mov	w0, #0x1                   	// #1
    68ac:	ldp	x23, x24, [sp, #48]
    68b0:	ldp	x25, x26, [sp, #64]
    68b4:	ldp	x19, x20, [sp, #16]
    68b8:	ldp	x21, x22, [sp, #32]
    68bc:	ldp	x29, x30, [sp], #96
    68c0:	ret
    68c4:	strb	wzr, [x19, #255]
    68c8:	ldr	x3, [x19, #272]
    68cc:	ldr	x2, [x19, #280]
    68d0:	mov	x1, #0xff                  	// #255
    68d4:	mov	x0, x19
    68d8:	blr	x3
    68dc:	str	xzr, [x19, #256]
    68e0:	ldr	x0, [x19, #320]
    68e4:	add	x0, x0, #0x1
    68e8:	str	x0, [x19, #320]
    68ec:	b	688c <d_maybe_print_fold_expression+0x21c>
    68f0:	strb	wzr, [x19, #255]
    68f4:	ldr	x3, [x19, #272]
    68f8:	ldr	x2, [x19, #280]
    68fc:	mov	x1, #0xff                  	// #255
    6900:	mov	x0, x19
    6904:	blr	x3
    6908:	str	xzr, [x19, #256]
    690c:	ldr	x0, [x19, #320]
    6910:	add	x0, x0, #0x1
    6914:	str	x0, [x19, #320]
    6918:	b	677c <d_maybe_print_fold_expression+0x10c>
    691c:	ldr	x0, [x19, #256]
    6920:	add	x1, x0, #0x1
    6924:	str	x1, [x19, #256]
    6928:	strb	w21, [x19, x0]
    692c:	strb	w21, [x19, #264]
    6930:	add	x20, x20, #0x1
    6934:	cmp	x20, x22
    6938:	b.eq	68a4 <d_maybe_print_fold_expression+0x234>  // b.none
    693c:	ldrb	w21, [x20]
    6940:	ldr	x0, [x19, #256]
    6944:	cmp	x0, #0xff
    6948:	b.ne	691c <d_maybe_print_fold_expression+0x2ac>  // b.any
    694c:	strb	wzr, [x19, #255]
    6950:	ldr	x3, [x19, #272]
    6954:	ldr	x2, [x19, #280]
    6958:	mov	x1, x24
    695c:	mov	x0, x19
    6960:	blr	x3
    6964:	str	xzr, [x19, #256]
    6968:	ldr	x0, [x19, #320]
    696c:	add	x0, x0, #0x1
    6970:	str	x0, [x19, #320]
    6974:	b	691c <d_maybe_print_fold_expression+0x2ac>
    6978:	strb	wzr, [x19, #255]
    697c:	ldr	x3, [x19, #272]
    6980:	ldr	x2, [x19, #280]
    6984:	mov	x1, #0xff                  	// #255
    6988:	mov	x0, x19
    698c:	blr	x3
    6990:	str	xzr, [x19, #256]
    6994:	ldr	x0, [x19, #320]
    6998:	add	x0, x0, #0x1
    699c:	str	x0, [x19, #320]
    69a0:	b	66fc <d_maybe_print_fold_expression+0x8c>
    69a4:	ldr	x0, [x19, #256]
    69a8:	add	x1, x0, #0x1
    69ac:	str	x1, [x19, #256]
    69b0:	strb	w22, [x19, x0]
    69b4:	strb	w22, [x19, #264]
    69b8:	add	x20, x20, #0x1
    69bc:	cmp	x20, x25
    69c0:	b.eq	6a00 <d_maybe_print_fold_expression+0x390>  // b.none
    69c4:	ldrb	w22, [x20]
    69c8:	ldr	x0, [x19, #256]
    69cc:	cmp	x0, #0xff
    69d0:	b.ne	69a4 <d_maybe_print_fold_expression+0x334>  // b.any
    69d4:	strb	wzr, [x19, #255]
    69d8:	ldr	x3, [x19, #272]
    69dc:	ldr	x2, [x19, #280]
    69e0:	mov	x1, x27
    69e4:	mov	x0, x19
    69e8:	blr	x3
    69ec:	str	xzr, [x19, #256]
    69f0:	ldr	x0, [x19, #320]
    69f4:	add	x0, x0, #0x1
    69f8:	str	x0, [x19, #320]
    69fc:	b	69a4 <d_maybe_print_fold_expression+0x334>
    6a00:	ldr	x27, [sp, #80]
    6a04:	mov	x2, x24
    6a08:	mov	w1, w21
    6a0c:	mov	x0, x19
    6a10:	bl	64ac <d_print_expr_op>
    6a14:	mov	x2, x26
    6a18:	mov	w1, w21
    6a1c:	mov	x0, x19
    6a20:	bl	6574 <d_print_subexpr>
    6a24:	ldr	x0, [x19, #256]
    6a28:	cmp	x0, #0xff
    6a2c:	b.eq	6a4c <d_maybe_print_fold_expression+0x3dc>  // b.none
    6a30:	ldr	x1, [x19, #256]
    6a34:	add	x0, x1, #0x1
    6a38:	str	x0, [x19, #256]
    6a3c:	mov	w0, #0x29                  	// #41
    6a40:	strb	w0, [x19, x1]
    6a44:	strb	w0, [x19, #264]
    6a48:	b	68a4 <d_maybe_print_fold_expression+0x234>
    6a4c:	strb	wzr, [x19, #255]
    6a50:	ldr	x3, [x19, #272]
    6a54:	ldr	x2, [x19, #280]
    6a58:	mov	x1, #0xff                  	// #255
    6a5c:	mov	x0, x19
    6a60:	blr	x3
    6a64:	str	xzr, [x19, #256]
    6a68:	ldr	x0, [x19, #320]
    6a6c:	add	x0, x0, #0x1
    6a70:	str	x0, [x19, #320]
    6a74:	b	6a30 <d_maybe_print_fold_expression+0x3c0>
    6a78:	mov	w0, #0x0                   	// #0
    6a7c:	b	68b4 <d_maybe_print_fold_expression+0x244>

0000000000006a80 <__asan_cplus_demangle_fill_name>:
    6a80:	cmp	x1, #0x0
    6a84:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    6a88:	ccmp	x0, #0x0, #0x4, gt
    6a8c:	b.ne	6a98 <__asan_cplus_demangle_fill_name+0x18>  // b.any
    6a90:	mov	w0, #0x0                   	// #0
    6a94:	ret
    6a98:	str	wzr, [x0, #4]
    6a9c:	str	wzr, [x0]
    6aa0:	str	x1, [x0, #8]
    6aa4:	str	w2, [x0, #16]
    6aa8:	mov	w0, #0x1                   	// #1
    6aac:	b	6a94 <__asan_cplus_demangle_fill_name+0x14>

0000000000006ab0 <d_make_name>:
    6ab0:	stp	x29, x30, [sp, #-48]!
    6ab4:	mov	x29, sp
    6ab8:	stp	x19, x20, [sp, #16]
    6abc:	str	x21, [sp, #32]
    6ac0:	mov	x20, x1
    6ac4:	mov	w21, w2
    6ac8:	bl	30 <d_make_empty>
    6acc:	mov	x19, x0
    6ad0:	mov	w2, w21
    6ad4:	mov	x1, x20
    6ad8:	bl	6a80 <__asan_cplus_demangle_fill_name>
    6adc:	cmp	w0, #0x0
    6ae0:	csel	x0, x19, xzr, ne  // ne = any
    6ae4:	ldp	x19, x20, [sp, #16]
    6ae8:	ldr	x21, [sp, #32]
    6aec:	ldp	x29, x30, [sp], #48
    6af0:	ret

0000000000006af4 <d_source_name>:
    6af4:	stp	x29, x30, [sp, #-48]!
    6af8:	mov	x29, sp
    6afc:	stp	x19, x20, [sp, #16]
    6b00:	mov	x19, x0
    6b04:	bl	258 <d_number>
    6b08:	cmp	w0, #0x0
    6b0c:	b.le	6bf0 <d_source_name+0xfc>
    6b10:	str	x21, [sp, #32]
    6b14:	mov	w20, w0
    6b18:	ldr	x21, [x19, #24]
    6b1c:	ldr	x0, [x19, #8]
    6b20:	sub	x0, x0, x21
    6b24:	cmp	x0, w20, sxtw
    6b28:	b.lt	6be8 <d_source_name+0xf4>  // b.tstop
    6b2c:	add	x0, x21, w20, sxtw
    6b30:	str	x0, [x19, #24]
    6b34:	ldr	w1, [x19, #16]
    6b38:	tbz	w1, #2, 6b48 <d_source_name+0x54>
    6b3c:	ldrb	w1, [x21, w20, sxtw]
    6b40:	cmp	w1, #0x24
    6b44:	b.eq	6bb4 <d_source_name+0xc0>  // b.none
    6b48:	cmp	w20, #0x9
    6b4c:	b.le	6b90 <d_source_name+0x9c>
    6b50:	mov	x2, #0x8                   	// #8
    6b54:	adrp	x1, 0 <is_fnqual_component_type>
    6b58:	add	x1, x1, #0x0
    6b5c:	mov	x0, x21
    6b60:	bl	0 <__asan_internal_memcmp>
    6b64:	cbnz	w0, 6b90 <d_source_name+0x9c>
    6b68:	ldrb	w0, [x21, #8]
    6b6c:	cmp	w0, #0x2e
    6b70:	mov	w1, #0x5f                  	// #95
    6b74:	ccmp	w0, w1, #0x4, ne  // ne = any
    6b78:	mov	w1, #0x24                  	// #36
    6b7c:	ccmp	w0, w1, #0x4, ne  // ne = any
    6b80:	b.ne	6b90 <d_source_name+0x9c>  // b.any
    6b84:	ldrb	w0, [x21, #9]
    6b88:	cmp	w0, #0x4e
    6b8c:	b.eq	6bc0 <d_source_name+0xcc>  // b.none
    6b90:	mov	w2, w20
    6b94:	mov	x1, x21
    6b98:	mov	x0, x19
    6b9c:	bl	6ab0 <d_make_name>
    6ba0:	str	x0, [x19, #64]
    6ba4:	ldr	x21, [sp, #32]
    6ba8:	ldp	x19, x20, [sp, #16]
    6bac:	ldp	x29, x30, [sp], #48
    6bb0:	ret
    6bb4:	add	x0, x0, #0x1
    6bb8:	str	x0, [x19, #24]
    6bbc:	b	6b48 <d_source_name+0x54>
    6bc0:	ldr	w0, [x19, #72]
    6bc4:	add	w0, w0, #0x16
    6bc8:	sub	w20, w0, w20
    6bcc:	str	w20, [x19, #72]
    6bd0:	mov	w2, #0x15                  	// #21
    6bd4:	adrp	x1, 0 <is_fnqual_component_type>
    6bd8:	add	x1, x1, #0x0
    6bdc:	mov	x0, x19
    6be0:	bl	6ab0 <d_make_name>
    6be4:	b	6ba0 <d_source_name+0xac>
    6be8:	mov	x0, #0x0                   	// #0
    6bec:	b	6ba0 <d_source_name+0xac>
    6bf0:	mov	x0, #0x0                   	// #0
    6bf4:	b	6ba8 <d_source_name+0xb4>

0000000000006bf8 <d_abi_tags>:
    6bf8:	stp	x29, x30, [sp, #-48]!
    6bfc:	mov	x29, sp
    6c00:	stp	x19, x20, [sp, #16]
    6c04:	stp	x21, x22, [sp, #32]
    6c08:	mov	x19, x0
    6c0c:	mov	x20, x1
    6c10:	ldr	x22, [x0, #64]
    6c14:	ldr	x2, [x0, #24]
    6c18:	ldrb	w0, [x2]
    6c1c:	cmp	w0, #0x42
    6c20:	b.ne	6c60 <d_abi_tags+0x68>  // b.any
    6c24:	mov	w21, #0x4c                  	// #76
    6c28:	add	x2, x2, #0x1
    6c2c:	str	x2, [x19, #24]
    6c30:	mov	x0, x19
    6c34:	bl	6af4 <d_source_name>
    6c38:	mov	x3, x0
    6c3c:	mov	x2, x20
    6c40:	mov	w1, w21
    6c44:	mov	x0, x19
    6c48:	bl	70 <d_make_comp>
    6c4c:	mov	x20, x0
    6c50:	ldr	x2, [x19, #24]
    6c54:	ldrb	w0, [x2]
    6c58:	cmp	w0, #0x42
    6c5c:	b.eq	6c28 <d_abi_tags+0x30>  // b.none
    6c60:	str	x22, [x19, #64]
    6c64:	mov	x0, x20
    6c68:	ldp	x19, x20, [sp, #16]
    6c6c:	ldp	x21, x22, [sp, #32]
    6c70:	ldp	x29, x30, [sp], #48
    6c74:	ret

0000000000006c78 <d_substitution>:
    6c78:	stp	x29, x30, [sp, #-64]!
    6c7c:	mov	x29, sp
    6c80:	stp	x19, x20, [sp, #16]
    6c84:	mov	x19, x0
    6c88:	ldr	x0, [x0, #24]
    6c8c:	ldrb	w2, [x0]
    6c90:	mov	x20, #0x0                   	// #0
    6c94:	cmp	w2, #0x53
    6c98:	b.ne	6cf0 <d_substitution+0x78>  // b.any
    6c9c:	add	x2, x0, #0x1
    6ca0:	str	x2, [x19, #24]
    6ca4:	ldrb	w2, [x0, #1]
    6ca8:	cbz	w2, 6d94 <d_substitution+0x11c>
    6cac:	add	x2, x0, #0x2
    6cb0:	str	x2, [x19, #24]
    6cb4:	ldrb	w2, [x0, #1]
    6cb8:	sub	w0, w2, #0x30
    6cbc:	and	w0, w0, #0xff
    6cc0:	cmp	w2, #0x5f
    6cc4:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    6cc8:	b.hi	6d00 <d_substitution+0x88>  // b.pmore
    6ccc:	mov	w1, #0x0                   	// #0
    6cd0:	cmp	w2, #0x5f
    6cd4:	b.ne	6d6c <d_substitution+0xf4>  // b.any
    6cd8:	ldr	w0, [x19, #56]
    6cdc:	mov	x20, #0x0                   	// #0
    6ce0:	cmp	w0, w1
    6ce4:	b.ls	6cf0 <d_substitution+0x78>  // b.plast
    6ce8:	ldr	x0, [x19, #48]
    6cec:	ldr	x20, [x0, w1, uxtw #3]
    6cf0:	mov	x0, x20
    6cf4:	ldp	x19, x20, [sp, #16]
    6cf8:	ldp	x29, x30, [sp], #64
    6cfc:	ret
    6d00:	sub	w3, w2, #0x41
    6d04:	and	w3, w3, #0xff
    6d08:	mov	w0, #0x0                   	// #0
    6d0c:	cmp	w3, #0x19
    6d10:	b.ls	6d20 <d_substitution+0xa8>  // b.plast
    6d14:	stp	x21, x22, [sp, #32]
    6d18:	b	6d98 <d_substitution+0x120>
    6d1c:	mov	w0, w1
    6d20:	sub	w1, w2, #0x30
    6d24:	and	w1, w1, #0xff
    6d28:	cmp	w1, #0x9
    6d2c:	b.hi	6d74 <d_substitution+0xfc>  // b.pmore
    6d30:	add	w1, w0, w0, lsl #3
    6d34:	add	w1, w2, w1, lsl #2
    6d38:	sub	w1, w1, #0x30
    6d3c:	cmp	w0, w1
    6d40:	b.hi	6eb8 <d_substitution+0x240>  // b.pmore
    6d44:	ldr	x0, [x19, #24]
    6d48:	ldrb	w2, [x0]
    6d4c:	cbz	w2, 6d1c <d_substitution+0xa4>
    6d50:	add	x2, x0, #0x1
    6d54:	str	x2, [x19, #24]
    6d58:	ldrb	w2, [x0]
    6d5c:	cmp	w2, #0x5f
    6d60:	b.ne	6d1c <d_substitution+0xa4>  // b.any
    6d64:	add	w1, w1, #0x1
    6d68:	b	6cd8 <d_substitution+0x60>
    6d6c:	mov	w0, #0x0                   	// #0
    6d70:	b	6d20 <d_substitution+0xa8>
    6d74:	sub	w1, w2, #0x41
    6d78:	and	w1, w1, #0xff
    6d7c:	cmp	w1, #0x19
    6d80:	b.hi	6eb0 <d_substitution+0x238>  // b.pmore
    6d84:	add	w1, w0, w0, lsl #3
    6d88:	add	w1, w2, w1, lsl #2
    6d8c:	sub	w1, w1, #0x37
    6d90:	b	6d3c <d_substitution+0xc4>
    6d94:	stp	x21, x22, [sp, #32]
    6d98:	ldr	w21, [x19, #16]
    6d9c:	ands	w0, w21, #0x8
    6da0:	ubfx	x21, x21, #3, #1
    6da4:	ccmp	w1, #0x0, #0x4, eq  // eq = none
    6da8:	b.eq	6dc4 <d_substitution+0x14c>  // b.none
    6dac:	ldr	x0, [x19, #24]
    6db0:	ldrb	w0, [x0]
    6db4:	sub	w0, w0, #0x43
    6db8:	and	w0, w0, #0xff
    6dbc:	cmp	w0, #0x1
    6dc0:	csinc	w21, w21, wzr, hi  // hi = pmore
    6dc4:	adrp	x20, 0 <is_fnqual_component_type>
    6dc8:	add	x20, x20, #0x0
    6dcc:	add	x1, x20, #0x188
    6dd0:	ldrb	w0, [x20]
    6dd4:	cmp	w0, w2
    6dd8:	b.eq	6df4 <d_substitution+0x17c>  // b.none
    6ddc:	add	x20, x20, #0x38
    6de0:	cmp	x20, x1
    6de4:	b.ne	6dd0 <d_substitution+0x158>  // b.any
    6de8:	mov	x20, #0x0                   	// #0
    6dec:	ldp	x21, x22, [sp, #32]
    6df0:	b	6cf0 <d_substitution+0x78>
    6df4:	ldr	x22, [x20, #40]
    6df8:	cbz	x22, 6e28 <d_substitution+0x1b0>
    6dfc:	str	x23, [sp, #48]
    6e00:	ldr	w23, [x20, #48]
    6e04:	mov	x0, x19
    6e08:	bl	30 <d_make_empty>
    6e0c:	cbz	x0, 6e20 <d_substitution+0x1a8>
    6e10:	mov	w1, #0x18                  	// #24
    6e14:	str	w1, [x0]
    6e18:	str	x22, [x0, #8]
    6e1c:	str	w23, [x0, #16]
    6e20:	str	x0, [x19, #64]
    6e24:	ldr	x23, [sp, #48]
    6e28:	cbz	w21, 6e78 <d_substitution+0x200>
    6e2c:	ldr	x22, [x20, #24]
    6e30:	ldr	w21, [x20, #32]
    6e34:	ldr	w0, [x19, #72]
    6e38:	add	w0, w0, w21
    6e3c:	str	w0, [x19, #72]
    6e40:	mov	x0, x19
    6e44:	bl	30 <d_make_empty>
    6e48:	mov	x20, x0
    6e4c:	cbz	x0, 6e60 <d_substitution+0x1e8>
    6e50:	mov	w0, #0x18                  	// #24
    6e54:	str	w0, [x20]
    6e58:	str	x22, [x20, #8]
    6e5c:	str	w21, [x20, #16]
    6e60:	ldr	x0, [x19, #24]
    6e64:	ldrb	w0, [x0]
    6e68:	cmp	w0, #0x42
    6e6c:	b.eq	6e84 <d_substitution+0x20c>  // b.none
    6e70:	ldp	x21, x22, [sp, #32]
    6e74:	b	6cf0 <d_substitution+0x78>
    6e78:	ldr	x22, [x20, #8]
    6e7c:	ldr	w21, [x20, #16]
    6e80:	b	6e34 <d_substitution+0x1bc>
    6e84:	mov	x1, x20
    6e88:	mov	x0, x19
    6e8c:	bl	6bf8 <d_abi_tags>
    6e90:	mov	x20, x0
    6e94:	mov	x1, x0
    6e98:	mov	x0, x19
    6e9c:	bl	6a4 <d_add_substitution>
    6ea0:	cmp	w0, #0x0
    6ea4:	csel	x20, x20, xzr, ne  // ne = any
    6ea8:	ldp	x21, x22, [sp, #32]
    6eac:	b	6cf0 <d_substitution+0x78>
    6eb0:	mov	x20, #0x0                   	// #0
    6eb4:	b	6cf0 <d_substitution+0x78>
    6eb8:	mov	x20, #0x0                   	// #0
    6ebc:	b	6cf0 <d_substitution+0x78>

0000000000006ec0 <__asan_cplus_demangle_fill_extended_operator>:
    6ec0:	cmp	w1, #0x0
    6ec4:	ccmp	x2, #0x0, #0x4, ge  // ge = tcont
    6ec8:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    6ecc:	b.eq	6eec <__asan_cplus_demangle_fill_extended_operator+0x2c>  // b.none
    6ed0:	str	wzr, [x0, #4]
    6ed4:	mov	w3, #0x33                  	// #51
    6ed8:	str	w3, [x0]
    6edc:	str	w1, [x0, #8]
    6ee0:	str	x2, [x0, #16]
    6ee4:	mov	w0, #0x1                   	// #1
    6ee8:	ret
    6eec:	mov	w0, #0x0                   	// #0
    6ef0:	b	6ee8 <__asan_cplus_demangle_fill_extended_operator+0x28>

0000000000006ef4 <__asan_cplus_demangle_fill_ctor>:
    6ef4:	mov	x3, x0
    6ef8:	cmp	x0, #0x0
    6efc:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    6f00:	mov	w0, #0x0                   	// #0
    6f04:	b.eq	6f30 <__asan_cplus_demangle_fill_ctor+0x3c>  // b.none
    6f08:	sub	w4, w1, #0x1
    6f0c:	mov	w0, #0x0                   	// #0
    6f10:	cmp	w4, #0x4
    6f14:	b.hi	6f30 <__asan_cplus_demangle_fill_ctor+0x3c>  // b.pmore
    6f18:	str	wzr, [x3, #4]
    6f1c:	mov	w0, #0x7                   	// #7
    6f20:	str	w0, [x3]
    6f24:	str	w1, [x3, #8]
    6f28:	str	x2, [x3, #16]
    6f2c:	mov	w0, #0x1                   	// #1
    6f30:	ret

0000000000006f34 <__asan_cplus_demangle_fill_dtor>:
    6f34:	mov	x3, x0
    6f38:	cmp	x0, #0x0
    6f3c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    6f40:	mov	w0, #0x0                   	// #0
    6f44:	b.eq	6f70 <__asan_cplus_demangle_fill_dtor+0x3c>  // b.none
    6f48:	sub	w4, w1, #0x1
    6f4c:	mov	w0, #0x0                   	// #0
    6f50:	cmp	w4, #0x4
    6f54:	b.hi	6f70 <__asan_cplus_demangle_fill_dtor+0x3c>  // b.pmore
    6f58:	str	wzr, [x3, #4]
    6f5c:	mov	w0, #0x8                   	// #8
    6f60:	str	w0, [x3]
    6f64:	str	w1, [x3, #8]
    6f68:	str	x2, [x3, #16]
    6f6c:	mov	w0, #0x1                   	// #1
    6f70:	ret

0000000000006f74 <__asan_cplus_demangle_type>:
    6f74:	stp	x29, x30, [sp, #-80]!
    6f78:	mov	x29, sp
    6f7c:	stp	x19, x20, [sp, #16]
    6f80:	mov	x19, x0
    6f84:	bl	418 <next_is_type_qual>
    6f88:	cbnz	w0, 6fb8 <__asan_cplus_demangle_type+0x44>
    6f8c:	ldr	x0, [x19, #24]
    6f90:	ldrb	w2, [x0]
    6f94:	sub	w1, w2, #0x30
    6f98:	cmp	w1, #0x4a
    6f9c:	b.hi	78bc <__asan_cplus_demangle_type+0x948>  // b.pmore
    6fa0:	adrp	x3, 0 <is_fnqual_component_type>
    6fa4:	add	x3, x3, #0x0
    6fa8:	ldrh	w1, [x3, w1, uxtw #1]
    6fac:	adr	x3, 6fb8 <__asan_cplus_demangle_type+0x44>
    6fb0:	add	x1, x3, w1, sxth #2
    6fb4:	br	x1
    6fb8:	mov	w2, #0x0                   	// #0
    6fbc:	add	x1, sp, #0x48
    6fc0:	mov	x0, x19
    6fc4:	bl	8a28 <d_cv_qualifiers>
    6fc8:	mov	x20, x0
    6fcc:	cbz	x0, 70cc <__asan_cplus_demangle_type+0x158>
    6fd0:	ldr	x0, [x19, #24]
    6fd4:	ldrb	w0, [x0]
    6fd8:	cmp	w0, #0x46
    6fdc:	b.eq	7020 <__asan_cplus_demangle_type+0xac>  // b.none
    6fe0:	mov	x0, x19
    6fe4:	bl	6f74 <__asan_cplus_demangle_type>
    6fe8:	str	x0, [x20]
    6fec:	ldr	x0, [x20]
    6ff0:	cbz	x0, 78b4 <__asan_cplus_demangle_type+0x940>
    6ff4:	ldr	w1, [x0]
    6ff8:	sub	w1, w1, #0x1f
    6ffc:	cmp	w1, #0x1
    7000:	b.ls	7030 <__asan_cplus_demangle_type+0xbc>  // b.plast
    7004:	ldr	x1, [sp, #72]
    7008:	mov	x0, x19
    700c:	bl	6a4 <d_add_substitution>
    7010:	cmp	w0, #0x0
    7014:	ldr	x20, [sp, #72]
    7018:	csel	x20, x20, xzr, ne  // ne = any
    701c:	b	70cc <__asan_cplus_demangle_type+0x158>
    7020:	mov	x0, x19
    7024:	bl	8118 <d_function_type>
    7028:	str	x0, [x20]
    702c:	b	6fec <__asan_cplus_demangle_type+0x78>
    7030:	ldr	x1, [x0, #8]
    7034:	ldr	x2, [sp, #72]
    7038:	str	x2, [x0, #8]
    703c:	ldr	x0, [x20]
    7040:	str	x0, [sp, #72]
    7044:	str	x1, [x20]
    7048:	b	7004 <__asan_cplus_demangle_type+0x90>
    704c:	sub	w2, w2, #0x61
    7050:	sbfiz	x2, x2, #5, #32
    7054:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    7058:	ldr	x1, [x1]
    705c:	add	x1, x1, x2
    7060:	mov	x0, x19
    7064:	bl	120 <d_make_builtin_type>
    7068:	str	x0, [sp, #72]
    706c:	ldr	x1, [x0, #8]
    7070:	ldr	w0, [x19, #72]
    7074:	ldr	w1, [x1, #8]
    7078:	add	w0, w0, w1
    707c:	str	w0, [x19, #72]
    7080:	ldr	x0, [x19, #24]
    7084:	add	x0, x0, #0x1
    7088:	str	x0, [x19, #24]
    708c:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7090:	add	x0, x0, #0x1
    7094:	str	x0, [x19, #24]
    7098:	mov	x0, x19
    709c:	bl	6af4 <d_source_name>
    70a0:	mov	x3, #0x0                   	// #0
    70a4:	mov	x2, x0
    70a8:	mov	w1, #0x28                  	// #40
    70ac:	mov	x0, x19
    70b0:	bl	70 <d_make_comp>
    70b4:	str	x0, [sp, #72]
    70b8:	ldr	x1, [sp, #72]
    70bc:	mov	x0, x19
    70c0:	bl	6a4 <d_add_substitution>
    70c4:	cbz	w0, 78cc <__asan_cplus_demangle_type+0x958>
    70c8:	ldr	x20, [sp, #72]
    70cc:	mov	x0, x20
    70d0:	ldp	x19, x20, [sp, #16]
    70d4:	ldp	x29, x30, [sp], #80
    70d8:	ret
    70dc:	mov	x0, x19
    70e0:	bl	8118 <d_function_type>
    70e4:	str	x0, [sp, #72]
    70e8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    70ec:	mov	x0, x19
    70f0:	bl	8cbc <d_name>
    70f4:	str	x0, [sp, #72]
    70f8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    70fc:	add	x1, x0, #0x1
    7100:	str	x1, [x19, #24]
    7104:	ldrb	w0, [x0, #1]
    7108:	cmp	w0, #0x5f
    710c:	b.eq	71a8 <__asan_cplus_demangle_type+0x234>  // b.none
    7110:	sub	w0, w0, #0x30
    7114:	and	w0, w0, #0xff
    7118:	cmp	w0, #0x9
    711c:	b.hi	7194 <__asan_cplus_demangle_type+0x220>  // b.pmore
    7120:	ldr	x0, [x19, #24]
    7124:	add	x2, x0, #0x1
    7128:	str	x2, [x19, #24]
    712c:	ldrb	w0, [x0, #1]
    7130:	sub	w0, w0, #0x30
    7134:	and	w0, w0, #0xff
    7138:	cmp	w0, #0x9
    713c:	b.ls	7120 <__asan_cplus_demangle_type+0x1ac>  // b.plast
    7140:	sub	w2, w2, w1
    7144:	mov	x0, x19
    7148:	bl	6ab0 <d_make_name>
    714c:	mov	x20, x0
    7150:	cbz	x0, 718c <__asan_cplus_demangle_type+0x218>
    7154:	ldr	x0, [x19, #24]
    7158:	ldrb	w1, [x0]
    715c:	cmp	w1, #0x5f
    7160:	b.ne	71b0 <__asan_cplus_demangle_type+0x23c>  // b.any
    7164:	add	x0, x0, #0x1
    7168:	str	x0, [x19, #24]
    716c:	mov	x0, x19
    7170:	bl	6f74 <__asan_cplus_demangle_type>
    7174:	mov	x3, x0
    7178:	mov	x2, x20
    717c:	mov	w1, #0x2a                  	// #42
    7180:	mov	x0, x19
    7184:	bl	70 <d_make_comp>
    7188:	mov	x20, x0
    718c:	str	x20, [sp, #72]
    7190:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7194:	mov	x0, x19
    7198:	bl	81f0 <d_expression>
    719c:	mov	x20, x0
    71a0:	cbnz	x0, 7154 <__asan_cplus_demangle_type+0x1e0>
    71a4:	b	718c <__asan_cplus_demangle_type+0x218>
    71a8:	mov	x20, #0x0                   	// #0
    71ac:	b	7154 <__asan_cplus_demangle_type+0x1e0>
    71b0:	mov	x20, #0x0                   	// #0
    71b4:	b	718c <__asan_cplus_demangle_type+0x218>
    71b8:	add	x0, x0, #0x1
    71bc:	str	x0, [x19, #24]
    71c0:	mov	x0, x19
    71c4:	bl	6f74 <__asan_cplus_demangle_type>
    71c8:	mov	x20, x0
    71cc:	cbz	x0, 71f4 <__asan_cplus_demangle_type+0x280>
    71d0:	mov	x0, x19
    71d4:	bl	6f74 <__asan_cplus_demangle_type>
    71d8:	mov	x3, x0
    71dc:	cbz	x0, 71fc <__asan_cplus_demangle_type+0x288>
    71e0:	mov	x2, x20
    71e4:	mov	w1, #0x2b                  	// #43
    71e8:	mov	x0, x19
    71ec:	bl	70 <d_make_comp>
    71f0:	mov	x20, x0
    71f4:	str	x20, [sp, #72]
    71f8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    71fc:	mov	x20, x0
    7200:	b	71f4 <__asan_cplus_demangle_type+0x280>
    7204:	mov	x0, x19
    7208:	bl	558 <d_template_param>
    720c:	str	x0, [sp, #72]
    7210:	ldr	x20, [x19, #24]
    7214:	ldrb	w1, [x20]
    7218:	cmp	w1, #0x49
    721c:	b.ne	70b8 <__asan_cplus_demangle_type+0x144>  // b.any
    7220:	ldr	w1, [x19, #80]
    7224:	cbnz	w1, 7264 <__asan_cplus_demangle_type+0x2f0>
    7228:	mov	x1, x0
    722c:	mov	x0, x19
    7230:	bl	6a4 <d_add_substitution>
    7234:	mov	x20, #0x0                   	// #0
    7238:	cbz	w0, 70cc <__asan_cplus_demangle_type+0x158>
    723c:	ldr	x20, [sp, #72]
    7240:	mov	x0, x19
    7244:	bl	9e28 <d_template_args>
    7248:	mov	x3, x0
    724c:	mov	x2, x20
    7250:	mov	w1, #0x4                   	// #4
    7254:	mov	x0, x19
    7258:	bl	70 <d_make_comp>
    725c:	str	x0, [sp, #72]
    7260:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7264:	stp	x21, x22, [sp, #32]
    7268:	stp	x23, x24, [sp, #48]
    726c:	ldr	w24, [x19, #40]
    7270:	ldr	w23, [x19, #56]
    7274:	ldr	w22, [x19, #72]
    7278:	mov	x0, x19
    727c:	bl	9e28 <d_template_args>
    7280:	mov	x21, x0
    7284:	ldr	x0, [x19, #24]
    7288:	ldrb	w0, [x0]
    728c:	cmp	w0, #0x49
    7290:	b.eq	72b0 <__asan_cplus_demangle_type+0x33c>  // b.none
    7294:	str	x20, [x19, #24]
    7298:	str	w24, [x19, #40]
    729c:	str	w23, [x19, #56]
    72a0:	str	w22, [x19, #72]
    72a4:	ldp	x21, x22, [sp, #32]
    72a8:	ldp	x23, x24, [sp, #48]
    72ac:	b	70b8 <__asan_cplus_demangle_type+0x144>
    72b0:	ldr	x1, [sp, #72]
    72b4:	mov	x0, x19
    72b8:	bl	6a4 <d_add_substitution>
    72bc:	cbz	w0, 72e4 <__asan_cplus_demangle_type+0x370>
    72c0:	mov	x3, x21
    72c4:	ldr	x2, [sp, #72]
    72c8:	mov	w1, #0x4                   	// #4
    72cc:	mov	x0, x19
    72d0:	bl	70 <d_make_comp>
    72d4:	str	x0, [sp, #72]
    72d8:	ldp	x21, x22, [sp, #32]
    72dc:	ldp	x23, x24, [sp, #48]
    72e0:	b	70b8 <__asan_cplus_demangle_type+0x144>
    72e4:	mov	x20, #0x0                   	// #0
    72e8:	ldp	x21, x22, [sp, #32]
    72ec:	ldp	x23, x24, [sp, #48]
    72f0:	b	70cc <__asan_cplus_demangle_type+0x158>
    72f4:	ldrb	w0, [x0, #1]
    72f8:	sub	w1, w0, #0x30
    72fc:	and	w1, w1, #0xff
    7300:	cmp	w0, #0x5f
    7304:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    7308:	b.ls	731c <__asan_cplus_demangle_type+0x3a8>  // b.plast
    730c:	sub	w0, w0, #0x41
    7310:	and	w0, w0, #0xff
    7314:	cmp	w0, #0x19
    7318:	b.hi	7364 <__asan_cplus_demangle_type+0x3f0>  // b.pmore
    731c:	mov	w1, #0x0                   	// #0
    7320:	mov	x0, x19
    7324:	bl	6c78 <d_substitution>
    7328:	mov	x20, x0
    732c:	str	x0, [sp, #72]
    7330:	ldr	x0, [x19, #24]
    7334:	ldrb	w0, [x0]
    7338:	cmp	w0, #0x49
    733c:	b.ne	70c8 <__asan_cplus_demangle_type+0x154>  // b.any
    7340:	mov	x0, x19
    7344:	bl	9e28 <d_template_args>
    7348:	mov	x3, x0
    734c:	mov	x2, x20
    7350:	mov	w1, #0x4                   	// #4
    7354:	mov	x0, x19
    7358:	bl	70 <d_make_comp>
    735c:	str	x0, [sp, #72]
    7360:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7364:	mov	x0, x19
    7368:	bl	8cbc <d_name>
    736c:	str	x0, [sp, #72]
    7370:	cbz	x0, 70b8 <__asan_cplus_demangle_type+0x144>
    7374:	ldr	w0, [x0]
    7378:	cmp	w0, #0x18
    737c:	b.ne	70b8 <__asan_cplus_demangle_type+0x144>  // b.any
    7380:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7384:	add	x0, x0, #0x1
    7388:	str	x0, [x19, #24]
    738c:	mov	x0, x19
    7390:	bl	6f74 <__asan_cplus_demangle_type>
    7394:	mov	x3, #0x0                   	// #0
    7398:	mov	x2, x0
    739c:	mov	w1, #0x24                  	// #36
    73a0:	mov	x0, x19
    73a4:	bl	70 <d_make_comp>
    73a8:	str	x0, [sp, #72]
    73ac:	b	70b8 <__asan_cplus_demangle_type+0x144>
    73b0:	add	x0, x0, #0x1
    73b4:	str	x0, [x19, #24]
    73b8:	mov	x0, x19
    73bc:	bl	6f74 <__asan_cplus_demangle_type>
    73c0:	mov	x3, #0x0                   	// #0
    73c4:	mov	x2, x0
    73c8:	mov	w1, #0x22                  	// #34
    73cc:	mov	x0, x19
    73d0:	bl	70 <d_make_comp>
    73d4:	str	x0, [sp, #72]
    73d8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    73dc:	add	x0, x0, #0x1
    73e0:	str	x0, [x19, #24]
    73e4:	mov	x0, x19
    73e8:	bl	6f74 <__asan_cplus_demangle_type>
    73ec:	mov	x3, #0x0                   	// #0
    73f0:	mov	x2, x0
    73f4:	mov	w1, #0x23                  	// #35
    73f8:	mov	x0, x19
    73fc:	bl	70 <d_make_comp>
    7400:	str	x0, [sp, #72]
    7404:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7408:	add	x0, x0, #0x1
    740c:	str	x0, [x19, #24]
    7410:	mov	x0, x19
    7414:	bl	6f74 <__asan_cplus_demangle_type>
    7418:	mov	x3, #0x0                   	// #0
    741c:	mov	x2, x0
    7420:	mov	w1, #0x25                  	// #37
    7424:	mov	x0, x19
    7428:	bl	70 <d_make_comp>
    742c:	str	x0, [sp, #72]
    7430:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7434:	add	x0, x0, #0x1
    7438:	str	x0, [x19, #24]
    743c:	mov	x0, x19
    7440:	bl	6f74 <__asan_cplus_demangle_type>
    7444:	mov	x3, #0x0                   	// #0
    7448:	mov	x2, x0
    744c:	mov	w1, #0x26                  	// #38
    7450:	mov	x0, x19
    7454:	bl	70 <d_make_comp>
    7458:	str	x0, [sp, #72]
    745c:	b	70b8 <__asan_cplus_demangle_type+0x144>
    7460:	add	x0, x0, #0x1
    7464:	str	x0, [x19, #24]
    7468:	mov	x0, x19
    746c:	bl	6af4 <d_source_name>
    7470:	mov	x20, x0
    7474:	str	x0, [sp, #72]
    7478:	ldr	x0, [x19, #24]
    747c:	ldrb	w0, [x0]
    7480:	cmp	w0, #0x49
    7484:	b.eq	74ac <__asan_cplus_demangle_type+0x538>  // b.none
    7488:	mov	x0, x19
    748c:	bl	6f74 <__asan_cplus_demangle_type>
    7490:	ldr	x3, [sp, #72]
    7494:	mov	x2, x0
    7498:	mov	w1, #0x21                  	// #33
    749c:	mov	x0, x19
    74a0:	bl	70 <d_make_comp>
    74a4:	str	x0, [sp, #72]
    74a8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    74ac:	mov	x0, x19
    74b0:	bl	9e28 <d_template_args>
    74b4:	mov	x3, x0
    74b8:	mov	x2, x20
    74bc:	mov	w1, #0x4                   	// #4
    74c0:	mov	x0, x19
    74c4:	bl	70 <d_make_comp>
    74c8:	str	x0, [sp, #72]
    74cc:	b	7488 <__asan_cplus_demangle_type+0x514>
    74d0:	add	x1, x0, #0x1
    74d4:	str	x1, [x19, #24]
    74d8:	ldrb	w1, [x0, #1]
    74dc:	mov	x20, #0x0                   	// #0
    74e0:	cbz	w1, 70cc <__asan_cplus_demangle_type+0x158>
    74e4:	add	x1, x0, #0x2
    74e8:	str	x1, [x19, #24]
    74ec:	ldrb	w1, [x0, #1]
    74f0:	cmp	w1, #0x68
    74f4:	b.eq	77c8 <__asan_cplus_demangle_type+0x854>  // b.none
    74f8:	b.hi	7640 <__asan_cplus_demangle_type+0x6cc>  // b.pmore
    74fc:	cmp	w1, #0x63
    7500:	b.eq	777c <__asan_cplus_demangle_type+0x808>  // b.none
    7504:	b.ls	7548 <__asan_cplus_demangle_type+0x5d4>  // b.plast
    7508:	cmp	w1, #0x65
    750c:	b.eq	7798 <__asan_cplus_demangle_type+0x824>  // b.none
    7510:	cmp	w1, #0x66
    7514:	b.ne	7604 <__asan_cplus_demangle_type+0x690>  // b.any
    7518:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    751c:	ldr	x1, [x1]
    7520:	add	x1, x1, #0x340
    7524:	mov	x0, x19
    7528:	bl	120 <d_make_builtin_type>
    752c:	str	x0, [sp, #72]
    7530:	ldr	x1, [x0, #8]
    7534:	ldr	w0, [x19, #72]
    7538:	ldr	w1, [x1, #8]
    753c:	add	w0, w0, w1
    7540:	str	w0, [x19, #72]
    7544:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7548:	cmp	w1, #0x54
    754c:	b.eq	7730 <__asan_cplus_demangle_type+0x7bc>  // b.none
    7550:	cmp	w1, #0x61
    7554:	b.ne	7574 <__asan_cplus_demangle_type+0x600>  // b.any
    7558:	mov	w2, #0x4                   	// #4
    755c:	adrp	x1, 0 <is_fnqual_component_type>
    7560:	add	x1, x1, #0x0
    7564:	mov	x0, x19
    7568:	bl	6ab0 <d_make_name>
    756c:	str	x0, [sp, #72]
    7570:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7574:	cmp	w1, #0x46
    7578:	b.ne	70cc <__asan_cplus_demangle_type+0x158>  // b.any
    757c:	mov	x0, x19
    7580:	bl	30 <d_make_empty>
    7584:	str	x0, [sp, #72]
    7588:	mov	w1, #0x2c                  	// #44
    758c:	str	w1, [x0]
    7590:	ldr	x0, [x19, #24]
    7594:	ldrb	w0, [x0]
    7598:	sub	w0, w0, #0x30
    759c:	and	w0, w0, #0xff
    75a0:	cmp	w0, #0x9
    75a4:	cset	w2, ls  // ls = plast
    75a8:	ldr	x1, [sp, #72]
    75ac:	strh	w2, [x1, #16]
    75b0:	b.ls	7858 <__asan_cplus_demangle_type+0x8e4>  // b.plast
    75b4:	ldr	x20, [sp, #72]
    75b8:	mov	x0, x19
    75bc:	bl	6f74 <__asan_cplus_demangle_type>
    75c0:	str	x0, [x20, #8]
    75c4:	ldr	x0, [sp, #72]
    75c8:	ldr	x20, [x0, #8]
    75cc:	cbz	x20, 70cc <__asan_cplus_demangle_type+0x158>
    75d0:	mov	x0, x19
    75d4:	bl	258 <d_number>
    75d8:	ldr	x1, [x19, #24]
    75dc:	ldrb	w0, [x1]
    75e0:	cbz	w0, 75f0 <__asan_cplus_demangle_type+0x67c>
    75e4:	add	x0, x1, #0x1
    75e8:	str	x0, [x19, #24]
    75ec:	ldrb	w0, [x1]
    75f0:	cmp	w0, #0x73
    75f4:	cset	w1, eq  // eq = none
    75f8:	ldr	x0, [sp, #72]
    75fc:	strh	w1, [x0, #18]
    7600:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7604:	mov	x20, #0x0                   	// #0
    7608:	cmp	w1, #0x64
    760c:	b.ne	70cc <__asan_cplus_demangle_type+0x158>  // b.any
    7610:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    7614:	ldr	x1, [x1]
    7618:	add	x1, x1, #0x360
    761c:	mov	x0, x19
    7620:	bl	120 <d_make_builtin_type>
    7624:	str	x0, [sp, #72]
    7628:	ldr	x1, [x0, #8]
    762c:	ldr	w0, [x19, #72]
    7630:	ldr	w1, [x1, #8]
    7634:	add	w0, w0, w1
    7638:	str	w0, [x19, #72]
    763c:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7640:	cmp	w1, #0x73
    7644:	b.eq	7828 <__asan_cplus_demangle_type+0x8b4>  // b.none
    7648:	b.ls	76b8 <__asan_cplus_demangle_type+0x744>  // b.plast
    764c:	cmp	w1, #0x75
    7650:	b.eq	77f8 <__asan_cplus_demangle_type+0x884>  // b.none
    7654:	cmp	w1, #0x76
    7658:	b.ne	7728 <__asan_cplus_demangle_type+0x7b4>  // b.any
    765c:	ldrb	w1, [x0, #2]
    7660:	cmp	w1, #0x5f
    7664:	b.eq	7864 <__asan_cplus_demangle_type+0x8f0>  // b.none
    7668:	mov	x0, x19
    766c:	bl	328 <d_number_component>
    7670:	mov	x20, x0
    7674:	cbz	x20, 76b0 <__asan_cplus_demangle_type+0x73c>
    7678:	ldr	x0, [x19, #24]
    767c:	ldrb	w1, [x0]
    7680:	cmp	w1, #0x5f
    7684:	b.ne	787c <__asan_cplus_demangle_type+0x908>  // b.any
    7688:	add	x0, x0, #0x1
    768c:	str	x0, [x19, #24]
    7690:	mov	x0, x19
    7694:	bl	6f74 <__asan_cplus_demangle_type>
    7698:	mov	x3, x0
    769c:	mov	x2, x20
    76a0:	mov	w1, #0x2d                  	// #45
    76a4:	mov	x0, x19
    76a8:	bl	70 <d_make_comp>
    76ac:	mov	x20, x0
    76b0:	str	x20, [sp, #72]
    76b4:	b	70b8 <__asan_cplus_demangle_type+0x144>
    76b8:	cmp	w1, #0x6e
    76bc:	b.eq	7884 <__asan_cplus_demangle_type+0x910>  // b.none
    76c0:	cmp	w1, #0x70
    76c4:	b.ne	76ec <__asan_cplus_demangle_type+0x778>  // b.any
    76c8:	mov	x0, x19
    76cc:	bl	6f74 <__asan_cplus_demangle_type>
    76d0:	mov	x3, #0x0                   	// #0
    76d4:	mov	x2, x0
    76d8:	mov	w1, #0x4b                  	// #75
    76dc:	mov	x0, x19
    76e0:	bl	70 <d_make_comp>
    76e4:	str	x0, [sp, #72]
    76e8:	b	70b8 <__asan_cplus_demangle_type+0x144>
    76ec:	mov	x20, #0x0                   	// #0
    76f0:	cmp	w1, #0x69
    76f4:	b.ne	70cc <__asan_cplus_demangle_type+0x158>  // b.any
    76f8:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    76fc:	ldr	x1, [x1]
    7700:	add	x1, x1, #0x400
    7704:	mov	x0, x19
    7708:	bl	120 <d_make_builtin_type>
    770c:	str	x0, [sp, #72]
    7710:	ldr	x1, [x0, #8]
    7714:	ldr	w0, [x19, #72]
    7718:	ldr	w1, [x1, #8]
    771c:	add	w0, w0, w1
    7720:	str	w0, [x19, #72]
    7724:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7728:	cmp	w1, #0x74
    772c:	b.ne	78c4 <__asan_cplus_demangle_type+0x950>  // b.any
    7730:	mov	x0, x19
    7734:	bl	81f0 <d_expression>
    7738:	mov	x3, #0x0                   	// #0
    773c:	mov	x2, x0
    7740:	mov	w1, #0x43                  	// #67
    7744:	mov	x0, x19
    7748:	bl	70 <d_make_comp>
    774c:	str	x0, [sp, #72]
    7750:	cbz	x0, 70b8 <__asan_cplus_demangle_type+0x144>
    7754:	ldr	x0, [x19, #24]
    7758:	ldrb	w1, [x0]
    775c:	cbz	w1, 7774 <__asan_cplus_demangle_type+0x800>
    7760:	add	x1, x0, #0x1
    7764:	str	x1, [x19, #24]
    7768:	ldrb	w0, [x0]
    776c:	cmp	w0, #0x45
    7770:	b.eq	70b8 <__asan_cplus_demangle_type+0x144>  // b.none
    7774:	str	xzr, [sp, #72]
    7778:	b	70b8 <__asan_cplus_demangle_type+0x144>
    777c:	mov	w2, #0xe                   	// #14
    7780:	adrp	x1, 0 <is_fnqual_component_type>
    7784:	add	x1, x1, #0x0
    7788:	mov	x0, x19
    778c:	bl	6ab0 <d_make_name>
    7790:	str	x0, [sp, #72]
    7794:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7798:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    779c:	ldr	x1, [x1]
    77a0:	add	x1, x1, #0x380
    77a4:	mov	x0, x19
    77a8:	bl	120 <d_make_builtin_type>
    77ac:	str	x0, [sp, #72]
    77b0:	ldr	x1, [x0, #8]
    77b4:	ldr	w0, [x19, #72]
    77b8:	ldr	w1, [x1, #8]
    77bc:	add	w0, w0, w1
    77c0:	str	w0, [x19, #72]
    77c4:	b	70c8 <__asan_cplus_demangle_type+0x154>
    77c8:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    77cc:	ldr	x1, [x1]
    77d0:	add	x1, x1, #0x3a0
    77d4:	mov	x0, x19
    77d8:	bl	120 <d_make_builtin_type>
    77dc:	str	x0, [sp, #72]
    77e0:	ldr	x1, [x0, #8]
    77e4:	ldr	w0, [x19, #72]
    77e8:	ldr	w1, [x1, #8]
    77ec:	add	w0, w0, w1
    77f0:	str	w0, [x19, #72]
    77f4:	b	70c8 <__asan_cplus_demangle_type+0x154>
    77f8:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    77fc:	ldr	x1, [x1]
    7800:	add	x1, x1, #0x3c0
    7804:	mov	x0, x19
    7808:	bl	120 <d_make_builtin_type>
    780c:	str	x0, [sp, #72]
    7810:	ldr	x1, [x0, #8]
    7814:	ldr	w0, [x19, #72]
    7818:	ldr	w1, [x1, #8]
    781c:	add	w0, w0, w1
    7820:	str	w0, [x19, #72]
    7824:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7828:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    782c:	ldr	x1, [x1]
    7830:	add	x1, x1, #0x3e0
    7834:	mov	x0, x19
    7838:	bl	120 <d_make_builtin_type>
    783c:	str	x0, [sp, #72]
    7840:	ldr	x1, [x0, #8]
    7844:	ldr	w0, [x19, #72]
    7848:	ldr	w1, [x1, #8]
    784c:	add	w0, w0, w1
    7850:	str	w0, [x19, #72]
    7854:	b	70c8 <__asan_cplus_demangle_type+0x154>
    7858:	mov	x0, x19
    785c:	bl	258 <d_number>
    7860:	b	75b4 <__asan_cplus_demangle_type+0x640>
    7864:	add	x0, x0, #0x3
    7868:	str	x0, [x19, #24]
    786c:	mov	x0, x19
    7870:	bl	81f0 <d_expression>
    7874:	mov	x20, x0
    7878:	b	7674 <__asan_cplus_demangle_type+0x700>
    787c:	mov	x20, #0x0                   	// #0
    7880:	b	76b0 <__asan_cplus_demangle_type+0x73c>
    7884:	adrp	x1, 188 <is_ctor_dtor_or_conversion+0x2c>
    7888:	ldr	x1, [x1]
    788c:	add	x1, x1, #0x420
    7890:	mov	x0, x19
    7894:	bl	120 <d_make_builtin_type>
    7898:	str	x0, [sp, #72]
    789c:	ldr	x1, [x0, #8]
    78a0:	ldr	w0, [x19, #72]
    78a4:	ldr	w1, [x1, #8]
    78a8:	add	w0, w0, w1
    78ac:	str	w0, [x19, #72]
    78b0:	b	70c8 <__asan_cplus_demangle_type+0x154>
    78b4:	mov	x20, x0
    78b8:	b	70cc <__asan_cplus_demangle_type+0x158>
    78bc:	mov	x20, #0x0                   	// #0
    78c0:	b	70cc <__asan_cplus_demangle_type+0x158>
    78c4:	mov	x20, #0x0                   	// #0
    78c8:	b	70cc <__asan_cplus_demangle_type+0x158>
    78cc:	mov	x20, #0x0                   	// #0
    78d0:	b	70cc <__asan_cplus_demangle_type+0x158>

00000000000078d4 <d_parmlist>:
    78d4:	stp	x29, x30, [sp, #-64]!
    78d8:	mov	x29, sp
    78dc:	stp	x19, x20, [sp, #16]
    78e0:	mov	x19, x0
    78e4:	str	xzr, [sp, #56]
    78e8:	ldr	x0, [x0, #24]
    78ec:	ldrb	w1, [x0]
    78f0:	cmp	w1, #0x45
    78f4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    78f8:	mov	w2, #0x2e                  	// #46
    78fc:	ccmp	w1, w2, #0x4, ne  // ne = any
    7900:	b.eq	79e8 <d_parmlist+0x114>  // b.none
    7904:	stp	x21, x22, [sp, #32]
    7908:	add	x21, sp, #0x38
    790c:	mov	w22, #0x4f                  	// #79
    7910:	mov	w20, w2
    7914:	b	7960 <d_parmlist+0x8c>
    7918:	mov	x0, x19
    791c:	bl	6f74 <__asan_cplus_demangle_type>
    7920:	mov	x2, x0
    7924:	cbz	x0, 79f0 <d_parmlist+0x11c>
    7928:	mov	x3, #0x0                   	// #0
    792c:	mov	w1, w20
    7930:	mov	x0, x19
    7934:	bl	70 <d_make_comp>
    7938:	mov	x2, x0
    793c:	str	x0, [x21]
    7940:	cbz	x0, 79f8 <d_parmlist+0x124>
    7944:	add	x21, x0, #0x10
    7948:	ldr	x0, [x19, #24]
    794c:	ldrb	w1, [x0]
    7950:	cmp	w1, #0x45
    7954:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    7958:	ccmp	w1, w20, #0x4, ne  // ne = any
    795c:	b.eq	7978 <d_parmlist+0xa4>  // b.none
    7960:	cmp	w1, #0x52
    7964:	ccmp	w1, w22, #0x4, ne  // ne = any
    7968:	b.ne	7918 <d_parmlist+0x44>  // b.any
    796c:	ldrb	w0, [x0, #1]
    7970:	cmp	w0, #0x45
    7974:	b.ne	7918 <d_parmlist+0x44>  // b.any
    7978:	ldr	x2, [sp, #56]
    797c:	cbz	x2, 7a00 <d_parmlist+0x12c>
    7980:	ldr	x0, [x2, #16]
    7984:	cbz	x0, 799c <d_parmlist+0xc8>
    7988:	ldp	x21, x22, [sp, #32]
    798c:	mov	x0, x2
    7990:	ldp	x19, x20, [sp, #16]
    7994:	ldp	x29, x30, [sp], #64
    7998:	ret
    799c:	ldr	x0, [x2, #8]
    79a0:	ldr	w1, [x0]
    79a4:	cmp	w1, #0x27
    79a8:	b.eq	79b4 <d_parmlist+0xe0>  // b.none
    79ac:	ldp	x21, x22, [sp, #32]
    79b0:	b	798c <d_parmlist+0xb8>
    79b4:	ldr	x0, [x0, #8]
    79b8:	ldr	w1, [x0, #28]
    79bc:	cmp	w1, #0x9
    79c0:	b.eq	79cc <d_parmlist+0xf8>  // b.none
    79c4:	ldp	x21, x22, [sp, #32]
    79c8:	b	798c <d_parmlist+0xb8>
    79cc:	ldr	w1, [x19, #72]
    79d0:	ldr	w0, [x0, #8]
    79d4:	sub	w0, w1, w0
    79d8:	str	w0, [x19, #72]
    79dc:	str	xzr, [x2, #8]
    79e0:	ldp	x21, x22, [sp, #32]
    79e4:	b	798c <d_parmlist+0xb8>
    79e8:	mov	x2, #0x0                   	// #0
    79ec:	b	798c <d_parmlist+0xb8>
    79f0:	ldp	x21, x22, [sp, #32]
    79f4:	b	798c <d_parmlist+0xb8>
    79f8:	ldp	x21, x22, [sp, #32]
    79fc:	b	798c <d_parmlist+0xb8>
    7a00:	ldp	x21, x22, [sp, #32]
    7a04:	b	798c <d_parmlist+0xb8>

0000000000007a08 <d_operator_name>:
    7a08:	stp	x29, x30, [sp, #-48]!
    7a0c:	mov	x29, sp
    7a10:	stp	x19, x20, [sp, #16]
    7a14:	stp	x21, x22, [sp, #32]
    7a18:	mov	x20, x0
    7a1c:	ldr	x0, [x0, #24]
    7a20:	ldrb	w19, [x0]
    7a24:	cbz	w19, 7a90 <d_operator_name+0x88>
    7a28:	add	x1, x0, #0x1
    7a2c:	str	x1, [x20, #24]
    7a30:	ldrb	w6, [x0]
    7a34:	ldrb	w19, [x0, #1]
    7a38:	cbz	w19, 7ba4 <d_operator_name+0x19c>
    7a3c:	add	x1, x0, #0x2
    7a40:	str	x1, [x20, #24]
    7a44:	ldrb	w19, [x0, #1]
    7a48:	cmp	w6, #0x76
    7a4c:	b.ne	7a94 <d_operator_name+0x8c>  // b.any
    7a50:	sub	w0, w19, #0x30
    7a54:	and	w0, w0, #0xff
    7a58:	cmp	w0, #0x9
    7a5c:	b.hi	7aa4 <d_operator_name+0x9c>  // b.pmore
    7a60:	mov	x0, x20
    7a64:	bl	6af4 <d_source_name>
    7a68:	mov	x21, x0
    7a6c:	mov	x0, x20
    7a70:	bl	30 <d_make_empty>
    7a74:	mov	x22, x0
    7a78:	mov	x2, x21
    7a7c:	sub	w1, w19, #0x30
    7a80:	bl	6ec0 <__asan_cplus_demangle_fill_extended_operator>
    7a84:	cmp	w0, #0x0
    7a88:	csel	x22, x22, xzr, ne  // ne = any
    7a8c:	b	7b90 <d_operator_name+0x188>
    7a90:	mov	w6, w19
    7a94:	cmp	w6, #0x63
    7a98:	mov	w0, #0x76                  	// #118
    7a9c:	ccmp	w19, w0, #0x0, eq  // eq = none
    7aa0:	b.eq	7ab8 <d_operator_name+0xb0>  // b.none
    7aa4:	mov	w4, #0x43                  	// #67
    7aa8:	mov	w3, #0x0                   	// #0
    7aac:	adrp	x5, 5c8 <op_is_new_cast+0x4>
    7ab0:	ldr	x5, [x5]
    7ab4:	b	7b30 <d_operator_name+0x128>
    7ab8:	ldr	w19, [x20, #80]
    7abc:	ldr	w0, [x20, #76]
    7ac0:	cmp	w0, #0x0
    7ac4:	cset	w0, eq  // eq = none
    7ac8:	str	w0, [x20, #80]
    7acc:	mov	x0, x20
    7ad0:	bl	6f74 <__asan_cplus_demangle_type>
    7ad4:	mov	x2, x0
    7ad8:	ldr	w0, [x20, #80]
    7adc:	cbz	w0, 7afc <d_operator_name+0xf4>
    7ae0:	mov	x3, #0x0                   	// #0
    7ae4:	mov	w1, #0x35                  	// #53
    7ae8:	mov	x0, x20
    7aec:	bl	70 <d_make_comp>
    7af0:	mov	x22, x0
    7af4:	str	w19, [x20, #80]
    7af8:	b	7b90 <d_operator_name+0x188>
    7afc:	mov	x3, #0x0                   	// #0
    7b00:	mov	w1, #0x34                  	// #52
    7b04:	mov	x0, x20
    7b08:	bl	70 <d_make_comp>
    7b0c:	mov	x22, x0
    7b10:	b	7af4 <d_operator_name+0xec>
    7b14:	ldrb	w0, [x0, #1]
    7b18:	cmp	w0, w19
    7b1c:	b.eq	7b64 <d_operator_name+0x15c>  // b.none
    7b20:	b.hi	7b84 <d_operator_name+0x17c>  // b.pmore
    7b24:	add	w3, w1, #0x1
    7b28:	cmp	w3, w4
    7b2c:	b.eq	7b8c <d_operator_name+0x184>  // b.none
    7b30:	sub	w1, w4, w3
    7b34:	add	w1, w1, w1, lsr #31
    7b38:	add	w1, w3, w1, asr #1
    7b3c:	sbfiz	x2, x1, #1, #32
    7b40:	add	x2, x2, w1, sxtw
    7b44:	add	x21, x5, x2, lsl #3
    7b48:	ldr	x0, [x5, x2, lsl #3]
    7b4c:	ldrb	w2, [x0]
    7b50:	cmp	w2, w6
    7b54:	b.eq	7b14 <d_operator_name+0x10c>  // b.none
    7b58:	b.ls	7b24 <d_operator_name+0x11c>  // b.plast
    7b5c:	mov	w4, w1
    7b60:	b	7b28 <d_operator_name+0x120>
    7b64:	mov	x0, x20
    7b68:	bl	30 <d_make_empty>
    7b6c:	mov	x22, x0
    7b70:	cbz	x0, 7b90 <d_operator_name+0x188>
    7b74:	mov	w0, #0x32                  	// #50
    7b78:	str	w0, [x22]
    7b7c:	str	x21, [x22, #8]
    7b80:	b	7b90 <d_operator_name+0x188>
    7b84:	mov	w4, w1
    7b88:	b	7b28 <d_operator_name+0x120>
    7b8c:	mov	x22, #0x0                   	// #0
    7b90:	mov	x0, x22
    7b94:	ldp	x19, x20, [sp, #16]
    7b98:	ldp	x21, x22, [sp, #32]
    7b9c:	ldp	x29, x30, [sp], #48
    7ba0:	ret
    7ba4:	cmp	w6, #0x76
    7ba8:	b.eq	7aa4 <d_operator_name+0x9c>  // b.none
    7bac:	b	7a94 <d_operator_name+0x8c>

0000000000007bb0 <d_unqualified_name>:
    7bb0:	stp	x29, x30, [sp, #-48]!
    7bb4:	mov	x29, sp
    7bb8:	stp	x19, x20, [sp, #16]
    7bbc:	mov	x19, x0
    7bc0:	ldr	x2, [x0, #24]
    7bc4:	ldrb	w1, [x2]
    7bc8:	sub	w0, w1, #0x30
    7bcc:	and	w0, w0, #0xff
    7bd0:	cmp	w0, #0x9
    7bd4:	b.ls	7c60 <d_unqualified_name+0xb0>  // b.plast
    7bd8:	sub	w0, w1, #0x61
    7bdc:	and	w0, w0, #0xff
    7be0:	cmp	w0, #0x19
    7be4:	b.hi	7ca4 <d_unqualified_name+0xf4>  // b.pmore
    7be8:	cmp	w1, #0x6f
    7bec:	b.eq	7c8c <d_unqualified_name+0xdc>  // b.none
    7bf0:	mov	x0, x19
    7bf4:	bl	7a08 <d_operator_name>
    7bf8:	mov	x20, x0
    7bfc:	cbz	x0, 7c6c <d_unqualified_name+0xbc>
    7c00:	ldr	w0, [x0]
    7c04:	cmp	w0, #0x32
    7c08:	b.ne	7c6c <d_unqualified_name+0xbc>  // b.any
    7c0c:	ldr	x2, [x20, #8]
    7c10:	ldr	w0, [x19, #72]
    7c14:	add	w1, w0, #0x7
    7c18:	ldr	w0, [x2, #16]
    7c1c:	add	w0, w0, w1
    7c20:	str	w0, [x19, #72]
    7c24:	ldr	x0, [x20, #8]
    7c28:	adrp	x1, 0 <is_fnqual_component_type>
    7c2c:	add	x1, x1, #0x0
    7c30:	ldr	x0, [x0]
    7c34:	bl	0 <__asan_internal_strcmp>
    7c38:	cbnz	w0, 7c6c <d_unqualified_name+0xbc>
    7c3c:	mov	x0, x19
    7c40:	bl	6af4 <d_source_name>
    7c44:	mov	x3, x0
    7c48:	mov	x2, x20
    7c4c:	mov	w1, #0x37                  	// #55
    7c50:	mov	x0, x19
    7c54:	bl	70 <d_make_comp>
    7c58:	mov	x20, x0
    7c5c:	b	7c6c <d_unqualified_name+0xbc>
    7c60:	mov	x0, x19
    7c64:	bl	6af4 <d_source_name>
    7c68:	mov	x20, x0
    7c6c:	ldr	x0, [x19, #24]
    7c70:	ldrb	w0, [x0]
    7c74:	cmp	w0, #0x42
    7c78:	b.eq	8004 <d_unqualified_name+0x454>  // b.none
    7c7c:	mov	x0, x20
    7c80:	ldp	x19, x20, [sp, #16]
    7c84:	ldp	x29, x30, [sp], #48
    7c88:	ret
    7c8c:	ldrb	w0, [x2, #1]
    7c90:	cmp	w0, #0x6e
    7c94:	b.ne	7bf0 <d_unqualified_name+0x40>  // b.any
    7c98:	add	x2, x2, #0x2
    7c9c:	str	x2, [x19, #24]
    7ca0:	b	7bf0 <d_unqualified_name+0x40>
    7ca4:	sub	w0, w1, #0x43
    7ca8:	and	w0, w0, #0xff
    7cac:	cmp	w0, #0x1
    7cb0:	b.ls	7d4c <d_unqualified_name+0x19c>  // b.plast
    7cb4:	cmp	w1, #0x4c
    7cb8:	b.eq	7f10 <d_unqualified_name+0x360>  // b.none
    7cbc:	mov	x20, #0x0                   	// #0
    7cc0:	cmp	w1, #0x55
    7cc4:	b.ne	7c7c <d_unqualified_name+0xcc>  // b.any
    7cc8:	ldrb	w0, [x2, #1]
    7ccc:	cmp	w0, #0x6c
    7cd0:	b.eq	7f3c <d_unqualified_name+0x38c>  // b.none
    7cd4:	cmp	w0, #0x74
    7cd8:	b.ne	7c7c <d_unqualified_name+0xcc>  // b.any
    7cdc:	add	x0, x2, #0x1
    7ce0:	str	x0, [x19, #24]
    7ce4:	ldrb	w0, [x2, #1]
    7ce8:	mov	x20, #0x0                   	// #0
    7cec:	cmp	w0, #0x74
    7cf0:	b.ne	7c6c <d_unqualified_name+0xbc>  // b.any
    7cf4:	stp	x21, x22, [sp, #32]
    7cf8:	add	x2, x2, #0x2
    7cfc:	str	x2, [x19, #24]
    7d00:	mov	x0, x19
    7d04:	bl	4dc <d_compact_number>
    7d08:	mov	w21, w0
    7d0c:	tbnz	w0, #31, 7ffc <d_unqualified_name+0x44c>
    7d10:	mov	x0, x19
    7d14:	bl	30 <d_make_empty>
    7d18:	mov	x20, x0
    7d1c:	cbz	x0, 7d30 <d_unqualified_name+0x180>
    7d20:	mov	w0, #0x48                  	// #72
    7d24:	str	w0, [x20]
    7d28:	sxtw	x21, w21
    7d2c:	str	x21, [x20, #8]
    7d30:	mov	x1, x20
    7d34:	mov	x0, x19
    7d38:	bl	6a4 <d_add_substitution>
    7d3c:	cmp	w0, #0x0
    7d40:	csel	x20, x20, xzr, ne  // ne = any
    7d44:	ldp	x21, x22, [sp, #32]
    7d48:	b	7c6c <d_unqualified_name+0xbc>
    7d4c:	stp	x21, x22, [sp, #32]
    7d50:	ldr	x21, [x19, #64]
    7d54:	cbz	x21, 7d98 <d_unqualified_name+0x1e8>
    7d58:	ldr	w0, [x21]
    7d5c:	cbnz	w0, 7d90 <d_unqualified_name+0x1e0>
    7d60:	ldr	w0, [x19, #72]
    7d64:	ldr	w1, [x21, #16]
    7d68:	add	w0, w0, w1
    7d6c:	str	w0, [x19, #72]
    7d70:	ldrb	w0, [x2]
    7d74:	cmp	w0, #0x43
    7d78:	b.eq	7ddc <d_unqualified_name+0x22c>  // b.none
    7d7c:	cmp	w0, #0x44
    7d80:	b.eq	7da0 <d_unqualified_name+0x1f0>  // b.none
    7d84:	mov	x20, #0x0                   	// #0
    7d88:	ldp	x21, x22, [sp, #32]
    7d8c:	b	7c6c <d_unqualified_name+0xbc>
    7d90:	cmp	w0, #0x18
    7d94:	b.eq	7dc8 <d_unqualified_name+0x218>  // b.none
    7d98:	cmp	w1, #0x43
    7d9c:	b.eq	7ddc <d_unqualified_name+0x22c>  // b.none
    7da0:	ldrb	w0, [x2, #1]
    7da4:	cmp	w0, #0x32
    7da8:	b.eq	7ef8 <d_unqualified_name+0x348>  // b.none
    7dac:	b.ls	7ea8 <d_unqualified_name+0x2f8>  // b.plast
    7db0:	cmp	w0, #0x34
    7db4:	b.eq	7f08 <d_unqualified_name+0x358>  // b.none
    7db8:	cmp	w0, #0x35
    7dbc:	b.ne	7fd4 <d_unqualified_name+0x424>  // b.any
    7dc0:	mov	w22, #0x5                   	// #5
    7dc4:	b	7ebc <d_unqualified_name+0x30c>
    7dc8:	ldr	w0, [x19, #72]
    7dcc:	ldr	w1, [x21, #16]
    7dd0:	add	w0, w0, w1
    7dd4:	str	w0, [x19, #72]
    7dd8:	b	7d70 <d_unqualified_name+0x1c0>
    7ddc:	ldrb	w0, [x2, #1]
    7de0:	cmp	w0, #0x49
    7de4:	b.eq	7e10 <d_unqualified_name+0x260>  // b.none
    7de8:	cmp	w0, #0x33
    7dec:	b.eq	7e84 <d_unqualified_name+0x2d4>  // b.none
    7df0:	b.ls	8018 <d_unqualified_name+0x468>  // b.plast
    7df4:	cmp	w0, #0x34
    7df8:	b.eq	7e9c <d_unqualified_name+0x2ec>  // b.none
    7dfc:	mov	w1, #0x0                   	// #0
    7e00:	cmp	w0, #0x35
    7e04:	b.ne	8074 <d_unqualified_name+0x4c4>  // b.any
    7e08:	mov	w21, #0x5                   	// #5
    7e0c:	b	8030 <d_unqualified_name+0x480>
    7e10:	add	x1, x2, #0x1
    7e14:	str	x1, [x19, #24]
    7e18:	ldrb	w0, [x2, #2]
    7e1c:	cmp	w0, #0x33
    7e20:	b.eq	7e78 <d_unqualified_name+0x2c8>  // b.none
    7e24:	b.hi	7e50 <d_unqualified_name+0x2a0>  // b.pmore
    7e28:	cmp	w0, #0x31
    7e2c:	b.eq	8080 <d_unqualified_name+0x4d0>  // b.none
    7e30:	cmp	w0, #0x32
    7e34:	b.ne	7e44 <d_unqualified_name+0x294>  // b.any
    7e38:	mov	x2, x1
    7e3c:	mov	w1, #0x1                   	// #1
    7e40:	b	802c <d_unqualified_name+0x47c>
    7e44:	mov	x20, #0x0                   	// #0
    7e48:	ldp	x21, x22, [sp, #32]
    7e4c:	b	7c6c <d_unqualified_name+0xbc>
    7e50:	cmp	w0, #0x34
    7e54:	b.eq	7e90 <d_unqualified_name+0x2e0>  // b.none
    7e58:	cmp	w0, #0x35
    7e5c:	b.ne	7e6c <d_unqualified_name+0x2bc>  // b.any
    7e60:	mov	x2, x1
    7e64:	mov	w1, #0x1                   	// #1
    7e68:	b	7e08 <d_unqualified_name+0x258>
    7e6c:	mov	x20, #0x0                   	// #0
    7e70:	ldp	x21, x22, [sp, #32]
    7e74:	b	7c6c <d_unqualified_name+0xbc>
    7e78:	mov	x2, x1
    7e7c:	mov	w1, #0x1                   	// #1
    7e80:	b	7e88 <d_unqualified_name+0x2d8>
    7e84:	mov	w1, #0x0                   	// #0
    7e88:	mov	w21, #0x3                   	// #3
    7e8c:	b	8030 <d_unqualified_name+0x480>
    7e90:	mov	x2, x1
    7e94:	mov	w1, #0x1                   	// #1
    7e98:	b	7ea0 <d_unqualified_name+0x2f0>
    7e9c:	mov	w1, #0x0                   	// #0
    7ea0:	mov	w21, #0x4                   	// #4
    7ea4:	b	8030 <d_unqualified_name+0x480>
    7ea8:	cmp	w0, #0x30
    7eac:	b.eq	7f00 <d_unqualified_name+0x350>  // b.none
    7eb0:	mov	w22, #0x2                   	// #2
    7eb4:	cmp	w0, #0x31
    7eb8:	b.ne	7eec <d_unqualified_name+0x33c>  // b.any
    7ebc:	add	x2, x2, #0x2
    7ec0:	str	x2, [x19, #24]
    7ec4:	mov	x0, x19
    7ec8:	bl	30 <d_make_empty>
    7ecc:	mov	x20, x0
    7ed0:	mov	x2, x21
    7ed4:	mov	w1, w22
    7ed8:	bl	6f34 <__asan_cplus_demangle_fill_dtor>
    7edc:	cmp	w0, #0x0
    7ee0:	csel	x20, x20, xzr, ne  // ne = any
    7ee4:	ldp	x21, x22, [sp, #32]
    7ee8:	b	7c6c <d_unqualified_name+0xbc>
    7eec:	mov	x20, #0x0                   	// #0
    7ef0:	ldp	x21, x22, [sp, #32]
    7ef4:	b	7c6c <d_unqualified_name+0xbc>
    7ef8:	mov	w22, #0x3                   	// #3
    7efc:	b	7ebc <d_unqualified_name+0x30c>
    7f00:	mov	w22, #0x1                   	// #1
    7f04:	b	7ebc <d_unqualified_name+0x30c>
    7f08:	mov	w22, #0x4                   	// #4
    7f0c:	b	7ebc <d_unqualified_name+0x30c>
    7f10:	add	x2, x2, #0x1
    7f14:	str	x2, [x19, #24]
    7f18:	mov	x0, x19
    7f1c:	bl	6af4 <d_source_name>
    7f20:	mov	x20, x0
    7f24:	cbz	x0, 7c7c <d_unqualified_name+0xcc>
    7f28:	mov	x0, x19
    7f2c:	bl	604 <d_discriminator>
    7f30:	cbnz	w0, 7c6c <d_unqualified_name+0xbc>
    7f34:	mov	x20, #0x0                   	// #0
    7f38:	b	7c7c <d_unqualified_name+0xcc>
    7f3c:	add	x0, x2, #0x1
    7f40:	str	x0, [x19, #24]
    7f44:	ldrb	w0, [x2, #1]
    7f48:	mov	x20, #0x0                   	// #0
    7f4c:	cmp	w0, #0x6c
    7f50:	b.ne	7c6c <d_unqualified_name+0xbc>  // b.any
    7f54:	stp	x21, x22, [sp, #32]
    7f58:	add	x2, x2, #0x2
    7f5c:	str	x2, [x19, #24]
    7f60:	mov	x0, x19
    7f64:	bl	78d4 <d_parmlist>
    7f68:	mov	x21, x0
    7f6c:	cbz	x0, 7fe0 <d_unqualified_name+0x430>
    7f70:	ldr	x0, [x19, #24]
    7f74:	ldrb	w1, [x0]
    7f78:	cmp	w1, #0x45
    7f7c:	b.ne	7fec <d_unqualified_name+0x43c>  // b.any
    7f80:	add	x0, x0, #0x1
    7f84:	str	x0, [x19, #24]
    7f88:	mov	x0, x19
    7f8c:	bl	4dc <d_compact_number>
    7f90:	mov	w22, w0
    7f94:	tbnz	w0, #31, 7ff4 <d_unqualified_name+0x444>
    7f98:	mov	x0, x19
    7f9c:	bl	30 <d_make_empty>
    7fa0:	mov	x20, x0
    7fa4:	cbz	x0, 7fb8 <d_unqualified_name+0x408>
    7fa8:	mov	w0, #0x46                  	// #70
    7fac:	str	w0, [x20]
    7fb0:	str	x21, [x20, #8]
    7fb4:	str	w22, [x20, #16]
    7fb8:	mov	x1, x20
    7fbc:	mov	x0, x19
    7fc0:	bl	6a4 <d_add_substitution>
    7fc4:	cmp	w0, #0x0
    7fc8:	csel	x20, x20, xzr, ne  // ne = any
    7fcc:	ldp	x21, x22, [sp, #32]
    7fd0:	b	7c6c <d_unqualified_name+0xbc>
    7fd4:	mov	x20, #0x0                   	// #0
    7fd8:	ldp	x21, x22, [sp, #32]
    7fdc:	b	7c6c <d_unqualified_name+0xbc>
    7fe0:	mov	x20, x0
    7fe4:	ldp	x21, x22, [sp, #32]
    7fe8:	b	7c6c <d_unqualified_name+0xbc>
    7fec:	ldp	x21, x22, [sp, #32]
    7ff0:	b	7c6c <d_unqualified_name+0xbc>
    7ff4:	ldp	x21, x22, [sp, #32]
    7ff8:	b	7c6c <d_unqualified_name+0xbc>
    7ffc:	ldp	x21, x22, [sp, #32]
    8000:	b	7c6c <d_unqualified_name+0xbc>
    8004:	mov	x1, x20
    8008:	mov	x0, x19
    800c:	bl	6bf8 <d_abi_tags>
    8010:	mov	x20, x0
    8014:	b	7c7c <d_unqualified_name+0xcc>
    8018:	cmp	w0, #0x31
    801c:	b.eq	8098 <d_unqualified_name+0x4e8>  // b.none
    8020:	mov	w1, #0x0                   	// #0
    8024:	cmp	w0, #0x32
    8028:	b.ne	8068 <d_unqualified_name+0x4b8>  // b.any
    802c:	mov	w21, #0x2                   	// #2
    8030:	add	x2, x2, #0x2
    8034:	str	x2, [x19, #24]
    8038:	cbnz	w1, 808c <d_unqualified_name+0x4dc>
    803c:	ldr	x22, [x19, #64]
    8040:	mov	x0, x19
    8044:	bl	30 <d_make_empty>
    8048:	mov	x20, x0
    804c:	mov	x2, x22
    8050:	mov	w1, w21
    8054:	bl	6ef4 <__asan_cplus_demangle_fill_ctor>
    8058:	cmp	w0, #0x0
    805c:	csel	x20, x20, xzr, ne  // ne = any
    8060:	ldp	x21, x22, [sp, #32]
    8064:	b	7c6c <d_unqualified_name+0xbc>
    8068:	mov	x20, #0x0                   	// #0
    806c:	ldp	x21, x22, [sp, #32]
    8070:	b	7c7c <d_unqualified_name+0xcc>
    8074:	mov	x20, #0x0                   	// #0
    8078:	ldp	x21, x22, [sp, #32]
    807c:	b	7c7c <d_unqualified_name+0xcc>
    8080:	add	x2, x2, #0x3
    8084:	str	x2, [x19, #24]
    8088:	mov	w21, #0x1                   	// #1
    808c:	mov	x0, x19
    8090:	bl	6f74 <__asan_cplus_demangle_type>
    8094:	b	803c <d_unqualified_name+0x48c>
    8098:	add	x2, x2, #0x2
    809c:	str	x2, [x19, #24]
    80a0:	mov	w21, #0x1                   	// #1
    80a4:	b	803c <d_unqualified_name+0x48c>

00000000000080a8 <d_bare_function_type>:
    80a8:	stp	x29, x30, [sp, #-32]!
    80ac:	mov	x29, sp
    80b0:	stp	x19, x20, [sp, #16]
    80b4:	mov	x19, x0
    80b8:	ldr	x0, [x0, #24]
    80bc:	ldrb	w2, [x0]
    80c0:	cmp	w2, #0x4a
    80c4:	b.eq	80d4 <d_bare_function_type+0x2c>  // b.none
    80c8:	cbnz	w1, 80dc <d_bare_function_type+0x34>
    80cc:	mov	x20, #0x0                   	// #0
    80d0:	b	80ec <d_bare_function_type+0x44>
    80d4:	add	x0, x0, #0x1
    80d8:	str	x0, [x19, #24]
    80dc:	mov	x0, x19
    80e0:	bl	6f74 <__asan_cplus_demangle_type>
    80e4:	mov	x20, x0
    80e8:	cbz	x0, 810c <d_bare_function_type+0x64>
    80ec:	mov	x0, x19
    80f0:	bl	78d4 <d_parmlist>
    80f4:	cbz	x0, 810c <d_bare_function_type+0x64>
    80f8:	mov	x3, x0
    80fc:	mov	x2, x20
    8100:	mov	w1, #0x29                  	// #41
    8104:	mov	x0, x19
    8108:	bl	70 <d_make_comp>
    810c:	ldp	x19, x20, [sp, #16]
    8110:	ldp	x29, x30, [sp], #32
    8114:	ret

0000000000008118 <d_function_type>:
    8118:	stp	x29, x30, [sp, #-32]!
    811c:	mov	x29, sp
    8120:	str	x19, [sp, #16]
    8124:	mov	x19, x0
    8128:	ldr	w0, [x0, #16]
    812c:	tbnz	w0, #18, 81d8 <d_function_type+0xc0>
    8130:	ldr	w0, [x19, #84]
    8134:	cmp	w0, #0x800
    8138:	b.hi	81d0 <d_function_type+0xb8>  // b.pmore
    813c:	add	w0, w0, #0x1
    8140:	str	w0, [x19, #84]
    8144:	ldr	x1, [x19, #24]
    8148:	ldrb	w2, [x1]
    814c:	mov	x0, #0x0                   	// #0
    8150:	cmp	w2, #0x46
    8154:	b.eq	8170 <d_function_type+0x58>  // b.none
    8158:	ldr	w1, [x19, #84]
    815c:	sub	w1, w1, #0x1
    8160:	str	w1, [x19, #84]
    8164:	ldr	x19, [sp, #16]
    8168:	ldp	x29, x30, [sp], #32
    816c:	ret
    8170:	add	x0, x1, #0x1
    8174:	str	x0, [x19, #24]
    8178:	ldrb	w2, [x1, #1]
    817c:	add	x1, x1, #0x2
    8180:	cmp	w2, #0x59
    8184:	csel	x1, x1, x0, eq  // eq = none
    8188:	str	x1, [x19, #24]
    818c:	mov	w1, #0x1                   	// #1
    8190:	mov	x0, x19
    8194:	bl	80a8 <d_bare_function_type>
    8198:	mov	x1, x0
    819c:	mov	x0, x19
    81a0:	bl	470 <d_ref_qualifier>
    81a4:	ldr	x1, [x19, #24]
    81a8:	ldrb	w2, [x1]
    81ac:	cmp	w2, #0x45
    81b0:	b.eq	81c4 <d_function_type+0xac>  // b.none
    81b4:	mov	x0, #0x0                   	// #0
    81b8:	ldr	w1, [x19, #16]
    81bc:	tbz	w1, #18, 8158 <d_function_type+0x40>
    81c0:	b	8164 <d_function_type+0x4c>
    81c4:	add	x1, x1, #0x1
    81c8:	str	x1, [x19, #24]
    81cc:	b	81b8 <d_function_type+0xa0>
    81d0:	mov	x0, #0x0                   	// #0
    81d4:	b	8164 <d_function_type+0x4c>
    81d8:	ldr	x1, [x19, #24]
    81dc:	ldrb	w0, [x1]
    81e0:	cmp	w0, #0x46
    81e4:	b.eq	8170 <d_function_type+0x58>  // b.none
    81e8:	mov	x0, #0x0                   	// #0
    81ec:	b	8164 <d_function_type+0x4c>

00000000000081f0 <d_expression>:
    81f0:	stp	x29, x30, [sp, #-64]!
    81f4:	mov	x29, sp
    81f8:	stp	x19, x20, [sp, #16]
    81fc:	stp	x21, x22, [sp, #32]
    8200:	mov	x19, x0
    8204:	ldr	w21, [x0, #76]
    8208:	mov	w0, #0x1                   	// #1
    820c:	str	w0, [x19, #76]
    8210:	ldr	x0, [x19, #24]
    8214:	ldrb	w1, [x0]
    8218:	cmp	w1, #0x4c
    821c:	b.eq	8280 <d_expression+0x90>  // b.none
    8220:	cmp	w1, #0x54
    8224:	b.eq	8290 <d_expression+0xa0>  // b.none
    8228:	cmp	w1, #0x73
    822c:	b.eq	82a0 <d_expression+0xb0>  // b.none
    8230:	cmp	w1, #0x66
    8234:	b.eq	83cc <d_expression+0x1dc>  // b.none
    8238:	sub	w2, w1, #0x30
    823c:	and	w2, w2, #0xff
    8240:	cmp	w2, #0x9
    8244:	b.hi	8480 <d_expression+0x290>  // b.pmore
    8248:	mov	x0, x19
    824c:	bl	7bb0 <d_unqualified_name>
    8250:	mov	x20, x0
    8254:	cbz	x0, 8268 <d_expression+0x78>
    8258:	ldr	x0, [x19, #24]
    825c:	ldrb	w0, [x0]
    8260:	cmp	w0, #0x49
    8264:	b.eq	84a0 <d_expression+0x2b0>  // b.none
    8268:	str	w21, [x19, #76]
    826c:	mov	x0, x20
    8270:	ldp	x19, x20, [sp, #16]
    8274:	ldp	x21, x22, [sp, #32]
    8278:	ldp	x29, x30, [sp], #64
    827c:	ret
    8280:	mov	x0, x19
    8284:	bl	9b8c <d_expr_primary>
    8288:	mov	x20, x0
    828c:	b	8268 <d_expression+0x78>
    8290:	mov	x0, x19
    8294:	bl	558 <d_template_param>
    8298:	mov	x20, x0
    829c:	b	8268 <d_expression+0x78>
    82a0:	ldrb	w2, [x0, #1]
    82a4:	cmp	w2, #0x72
    82a8:	b.eq	831c <d_expression+0x12c>  // b.none
    82ac:	cmp	w2, #0x70
    82b0:	b.eq	83a0 <d_expression+0x1b0>  // b.none
    82b4:	cmp	w1, #0x69
    82b8:	mov	w2, #0x74                  	// #116
    82bc:	ccmp	w1, w2, #0x4, ne  // ne = any
    82c0:	b.ne	83d8 <d_expression+0x1e8>  // b.any
    82c4:	ldrb	w2, [x0, #1]
    82c8:	cmp	w2, #0x6c
    82cc:	b.ne	83d8 <d_expression+0x1e8>  // b.any
    82d0:	add	x0, x0, #0x2
    82d4:	str	x0, [x19, #24]
    82d8:	mov	x22, #0x0                   	// #0
    82dc:	cmp	w1, #0x74
    82e0:	b.eq	84c4 <d_expression+0x2d4>  // b.none
    82e4:	ldr	x0, [x19, #24]
    82e8:	ldrb	w0, [x0, #1]
    82ec:	mov	x20, #0x0                   	// #0
    82f0:	cbz	w0, 8268 <d_expression+0x78>
    82f4:	mov	w1, #0x45                  	// #69
    82f8:	mov	x0, x19
    82fc:	bl	897c <d_exprlist>
    8300:	mov	x3, x0
    8304:	mov	x2, x22
    8308:	mov	w1, #0x31                  	// #49
    830c:	mov	x0, x19
    8310:	bl	70 <d_make_comp>
    8314:	mov	x20, x0
    8318:	b	8268 <d_expression+0x78>
    831c:	add	x0, x0, #0x2
    8320:	str	x0, [x19, #24]
    8324:	mov	x0, x19
    8328:	bl	6f74 <__asan_cplus_demangle_type>
    832c:	mov	x20, x0
    8330:	mov	x0, x19
    8334:	bl	7bb0 <d_unqualified_name>
    8338:	mov	x22, x0
    833c:	ldr	x0, [x19, #24]
    8340:	ldrb	w0, [x0]
    8344:	cmp	w0, #0x49
    8348:	b.eq	8368 <d_expression+0x178>  // b.none
    834c:	mov	x3, x22
    8350:	mov	x2, x20
    8354:	mov	w1, #0x1                   	// #1
    8358:	mov	x0, x19
    835c:	bl	70 <d_make_comp>
    8360:	mov	x20, x0
    8364:	b	8268 <d_expression+0x78>
    8368:	mov	x0, x19
    836c:	bl	9e28 <d_template_args>
    8370:	mov	x3, x0
    8374:	mov	x2, x22
    8378:	mov	w1, #0x4                   	// #4
    837c:	mov	x0, x19
    8380:	bl	70 <d_make_comp>
    8384:	mov	x3, x0
    8388:	mov	x2, x20
    838c:	mov	w1, #0x1                   	// #1
    8390:	mov	x0, x19
    8394:	bl	70 <d_make_comp>
    8398:	mov	x20, x0
    839c:	b	8268 <d_expression+0x78>
    83a0:	add	x0, x0, #0x2
    83a4:	str	x0, [x19, #24]
    83a8:	mov	x0, x19
    83ac:	bl	9e64 <d_expression_1>
    83b0:	mov	x3, #0x0                   	// #0
    83b4:	mov	x2, x0
    83b8:	mov	w1, #0x4b                  	// #75
    83bc:	mov	x0, x19
    83c0:	bl	70 <d_make_comp>
    83c4:	mov	x20, x0
    83c8:	b	8268 <d_expression+0x78>
    83cc:	ldrb	w1, [x0, #1]
    83d0:	cmp	w1, #0x70
    83d4:	b.eq	841c <d_expression+0x22c>  // b.none
    83d8:	mov	x0, x19
    83dc:	bl	7a08 <d_operator_name>
    83e0:	mov	x20, x0
    83e4:	cbz	x0, 8268 <d_expression+0x78>
    83e8:	ldr	w0, [x0]
    83ec:	mov	x22, #0x0                   	// #0
    83f0:	cmp	w0, #0x32
    83f4:	b.eq	84d4 <d_expression+0x2e4>  // b.none
    83f8:	ldr	w0, [x20]
    83fc:	cmp	w0, #0x33
    8400:	b.eq	85c0 <d_expression+0x3d0>  // b.none
    8404:	cmp	w0, #0x34
    8408:	b.eq	8548 <d_expression+0x358>  // b.none
    840c:	cmp	w0, #0x32
    8410:	b.eq	8528 <d_expression+0x338>  // b.none
    8414:	mov	x20, #0x0                   	// #0
    8418:	b	8268 <d_expression+0x78>
    841c:	add	x1, x0, #0x2
    8420:	str	x1, [x19, #24]
    8424:	ldrb	w1, [x0, #2]
    8428:	cmp	w1, #0x54
    842c:	b.eq	8470 <d_expression+0x280>  // b.none
    8430:	mov	x0, x19
    8434:	bl	4dc <d_compact_number>
    8438:	mvn	x1, x0
    843c:	mov	x20, #0x0                   	// #0
    8440:	tst	x1, #0x7fffffff
    8444:	b.eq	8268 <d_expression+0x78>  // b.none
    8448:	add	w22, w0, #0x1
    844c:	mov	x0, x19
    8450:	bl	30 <d_make_empty>
    8454:	mov	x20, x0
    8458:	cbz	x0, 8268 <d_expression+0x78>
    845c:	mov	w0, #0x6                   	// #6
    8460:	str	w0, [x20]
    8464:	sxtw	x0, w22
    8468:	str	x0, [x20, #8]
    846c:	b	8268 <d_expression+0x78>
    8470:	add	x0, x0, #0x3
    8474:	str	x0, [x19, #24]
    8478:	mov	w22, #0x0                   	// #0
    847c:	b	844c <d_expression+0x25c>
    8480:	cmp	w1, #0x6f
    8484:	b.ne	82b4 <d_expression+0xc4>  // b.any
    8488:	ldrb	w1, [x0, #1]
    848c:	cmp	w1, #0x6e
    8490:	b.ne	83d8 <d_expression+0x1e8>  // b.any
    8494:	add	x0, x0, #0x2
    8498:	str	x0, [x19, #24]
    849c:	b	8248 <d_expression+0x58>
    84a0:	mov	x0, x19
    84a4:	bl	9e28 <d_template_args>
    84a8:	mov	x3, x0
    84ac:	mov	x2, x20
    84b0:	mov	w1, #0x4                   	// #4
    84b4:	mov	x0, x19
    84b8:	bl	70 <d_make_comp>
    84bc:	mov	x20, x0
    84c0:	b	8268 <d_expression+0x78>
    84c4:	mov	x0, x19
    84c8:	bl	6f74 <__asan_cplus_demangle_type>
    84cc:	mov	x22, x0
    84d0:	b	82e4 <d_expression+0xf4>
    84d4:	ldr	x0, [x20, #8]
    84d8:	ldr	x22, [x0]
    84dc:	ldr	w0, [x0, #16]
    84e0:	sub	w1, w0, #0x2
    84e4:	ldr	w0, [x19, #72]
    84e8:	add	w0, w0, w1
    84ec:	str	w0, [x19, #72]
    84f0:	adrp	x1, 0 <is_fnqual_component_type>
    84f4:	add	x1, x1, #0x0
    84f8:	mov	x0, x22
    84fc:	bl	0 <__asan_internal_strcmp>
    8500:	cbnz	w0, 83f8 <d_expression+0x208>
    8504:	mov	x0, x19
    8508:	bl	6f74 <__asan_cplus_demangle_type>
    850c:	mov	x3, x0
    8510:	mov	x2, x20
    8514:	mov	w1, #0x37                  	// #55
    8518:	mov	x0, x19
    851c:	bl	70 <d_make_comp>
    8520:	mov	x20, x0
    8524:	b	8268 <d_expression+0x78>
    8528:	ldr	x1, [x20, #8]
    852c:	ldr	w1, [x1, #20]
    8530:	cmp	w1, #0x2
    8534:	b.eq	86dc <d_expression+0x4ec>  // b.none
    8538:	b.gt	85d0 <d_expression+0x3e0>
    853c:	cbz	w1, 8678 <d_expression+0x488>
    8540:	cmp	w1, #0x1
    8544:	b.ne	85c8 <d_expression+0x3d8>  // b.any
    8548:	str	x23, [sp, #48]
    854c:	cbz	x22, 892c <d_expression+0x73c>
    8550:	ldrb	w0, [x22]
    8554:	cmp	w0, #0x70
    8558:	mov	w1, #0x6d                  	// #109
    855c:	ccmp	w0, w1, #0x4, ne  // ne = any
    8560:	b.ne	8570 <d_expression+0x380>  // b.any
    8564:	ldrb	w1, [x22, #1]
    8568:	cmp	w1, w0
    856c:	b.eq	8694 <d_expression+0x4a4>  // b.none
    8570:	ldr	w0, [x20]
    8574:	mov	w23, #0x0                   	// #0
    8578:	cmp	w0, #0x34
    857c:	b.eq	8950 <d_expression+0x760>  // b.none
    8580:	adrp	x1, 0 <is_fnqual_component_type>
    8584:	add	x1, x1, #0x0
    8588:	mov	x0, x22
    858c:	bl	0 <__asan_internal_strcmp>
    8590:	cbz	w0, 86b4 <d_expression+0x4c4>
    8594:	mov	x0, x19
    8598:	bl	9e64 <d_expression_1>
    859c:	mov	x3, x0
    85a0:	cbnz	w23, 86c4 <d_expression+0x4d4>
    85a4:	mov	x2, x20
    85a8:	mov	w1, #0x37                  	// #55
    85ac:	mov	x0, x19
    85b0:	bl	70 <d_make_comp>
    85b4:	mov	x20, x0
    85b8:	ldr	x23, [sp, #48]
    85bc:	b	8268 <d_expression+0x78>
    85c0:	ldr	w1, [x20, #8]
    85c4:	b	8530 <d_expression+0x340>
    85c8:	mov	x20, #0x0                   	// #0
    85cc:	b	8268 <d_expression+0x78>
    85d0:	cmp	w1, #0x3
    85d4:	b.ne	8670 <d_expression+0x480>  // b.any
    85d8:	cbz	x22, 88f4 <d_expression+0x704>
    85dc:	str	x23, [sp, #48]
    85e0:	adrp	x1, 0 <is_fnqual_component_type>
    85e4:	add	x1, x1, #0x0
    85e8:	mov	x0, x22
    85ec:	bl	0 <__asan_internal_strcmp>
    85f0:	cbz	w0, 87f8 <d_expression+0x608>
    85f4:	ldrb	w0, [x22]
    85f8:	cmp	w0, #0x66
    85fc:	b.eq	8864 <d_expression+0x674>  // b.none
    8600:	cmp	w0, #0x6e
    8604:	b.ne	8908 <d_expression+0x718>  // b.any
    8608:	ldrb	w0, [x22, #1]
    860c:	cmp	w0, #0x77
    8610:	mov	w1, #0x61                  	// #97
    8614:	ccmp	w0, w1, #0x4, ne  // ne = any
    8618:	b.ne	8914 <d_expression+0x724>  // b.any
    861c:	mov	w1, #0x5f                  	// #95
    8620:	mov	x0, x19
    8624:	bl	897c <d_exprlist>
    8628:	mov	x22, x0
    862c:	mov	x0, x19
    8630:	bl	6f74 <__asan_cplus_demangle_type>
    8634:	mov	x23, x0
    8638:	ldr	x0, [x19, #24]
    863c:	ldrb	w1, [x0]
    8640:	cmp	w1, #0x45
    8644:	b.eq	8898 <d_expression+0x6a8>  // b.none
    8648:	cmp	w1, #0x70
    864c:	b.eq	88a8 <d_expression+0x6b8>  // b.none
    8650:	cmp	w1, #0x69
    8654:	b.ne	8920 <d_expression+0x730>  // b.any
    8658:	ldrb	w0, [x0, #1]
    865c:	cmp	w0, #0x6c
    8660:	b.eq	88dc <d_expression+0x6ec>  // b.none
    8664:	mov	x20, #0x0                   	// #0
    8668:	ldr	x23, [sp, #48]
    866c:	b	8268 <d_expression+0x78>
    8670:	mov	x20, #0x0                   	// #0
    8674:	b	8268 <d_expression+0x78>
    8678:	mov	x3, #0x0                   	// #0
    867c:	mov	x2, x20
    8680:	mov	w1, #0x36                  	// #54
    8684:	mov	x0, x19
    8688:	bl	70 <d_make_comp>
    868c:	mov	x20, x0
    8690:	b	8268 <d_expression+0x78>
    8694:	ldr	x0, [x19, #24]
    8698:	ldrb	w1, [x0]
    869c:	mov	w23, #0x1                   	// #1
    86a0:	cmp	w1, #0x5f
    86a4:	b.ne	8580 <d_expression+0x390>  // b.any
    86a8:	add	x0, x0, #0x1
    86ac:	str	x0, [x19, #24]
    86b0:	b	8570 <d_expression+0x380>
    86b4:	mov	x0, x19
    86b8:	bl	9d78 <d_template_args_1>
    86bc:	mov	x3, x0
    86c0:	b	85a0 <d_expression+0x3b0>
    86c4:	mov	x2, x3
    86c8:	mov	w1, #0x39                  	// #57
    86cc:	mov	x0, x19
    86d0:	bl	70 <d_make_comp>
    86d4:	mov	x3, x0
    86d8:	b	85a4 <d_expression+0x3b4>
    86dc:	cbz	x22, 88ec <d_expression+0x6fc>
    86e0:	str	x23, [sp, #48]
    86e4:	mov	x0, x20
    86e8:	bl	5c4 <op_is_new_cast>
    86ec:	cbnz	w0, 8760 <d_expression+0x570>
    86f0:	ldrb	w0, [x22]
    86f4:	cmp	w0, #0x66
    86f8:	b.eq	8770 <d_expression+0x580>  // b.none
    86fc:	mov	x0, x19
    8700:	bl	9e64 <d_expression_1>
    8704:	mov	x23, x0
    8708:	adrp	x1, 0 <is_fnqual_component_type>
    870c:	add	x1, x1, #0x0
    8710:	mov	x0, x22
    8714:	bl	0 <__asan_internal_strcmp>
    8718:	cbnz	w0, 8780 <d_expression+0x590>
    871c:	mov	w1, #0x45                  	// #69
    8720:	mov	x0, x19
    8724:	bl	897c <d_exprlist>
    8728:	mov	x22, x0
    872c:	mov	x3, x22
    8730:	mov	x2, x23
    8734:	mov	w1, #0x39                  	// #57
    8738:	mov	x0, x19
    873c:	bl	70 <d_make_comp>
    8740:	mov	x3, x0
    8744:	mov	x2, x20
    8748:	mov	w1, #0x38                  	// #56
    874c:	mov	x0, x19
    8750:	bl	70 <d_make_comp>
    8754:	mov	x20, x0
    8758:	ldr	x23, [sp, #48]
    875c:	b	8268 <d_expression+0x78>
    8760:	mov	x0, x19
    8764:	bl	6f74 <__asan_cplus_demangle_type>
    8768:	mov	x23, x0
    876c:	b	8708 <d_expression+0x518>
    8770:	mov	x0, x19
    8774:	bl	7a08 <d_operator_name>
    8778:	mov	x23, x0
    877c:	b	8708 <d_expression+0x518>
    8780:	adrp	x1, 0 <is_fnqual_component_type>
    8784:	add	x1, x1, #0x0
    8788:	mov	x0, x22
    878c:	bl	0 <__asan_internal_strcmp>
    8790:	cbz	w0, 87a8 <d_expression+0x5b8>
    8794:	adrp	x1, 0 <is_fnqual_component_type>
    8798:	add	x1, x1, #0x0
    879c:	mov	x0, x22
    87a0:	bl	0 <__asan_internal_strcmp>
    87a4:	cbnz	w0, 87e8 <d_expression+0x5f8>
    87a8:	mov	x0, x19
    87ac:	bl	7bb0 <d_unqualified_name>
    87b0:	mov	x22, x0
    87b4:	ldr	x0, [x19, #24]
    87b8:	ldrb	w0, [x0]
    87bc:	cmp	w0, #0x49
    87c0:	b.ne	872c <d_expression+0x53c>  // b.any
    87c4:	mov	x0, x19
    87c8:	bl	9e28 <d_template_args>
    87cc:	mov	x3, x0
    87d0:	mov	x2, x22
    87d4:	mov	w1, #0x4                   	// #4
    87d8:	mov	x0, x19
    87dc:	bl	70 <d_make_comp>
    87e0:	mov	x22, x0
    87e4:	b	872c <d_expression+0x53c>
    87e8:	mov	x0, x19
    87ec:	bl	9e64 <d_expression_1>
    87f0:	mov	x22, x0
    87f4:	b	872c <d_expression+0x53c>
    87f8:	mov	x0, x19
    87fc:	bl	9e64 <d_expression_1>
    8800:	mov	x22, x0
    8804:	mov	x0, x19
    8808:	bl	9e64 <d_expression_1>
    880c:	mov	x23, x0
    8810:	mov	x0, x19
    8814:	bl	9e64 <d_expression_1>
    8818:	mov	x3, x0
    881c:	cbz	x0, 88fc <d_expression+0x70c>
    8820:	mov	x2, x23
    8824:	mov	w1, #0x3c                  	// #60
    8828:	mov	x0, x19
    882c:	bl	70 <d_make_comp>
    8830:	mov	x3, x0
    8834:	mov	x2, x22
    8838:	mov	w1, #0x3b                  	// #59
    883c:	mov	x0, x19
    8840:	bl	70 <d_make_comp>
    8844:	mov	x3, x0
    8848:	mov	x2, x20
    884c:	mov	w1, #0x3a                  	// #58
    8850:	mov	x0, x19
    8854:	bl	70 <d_make_comp>
    8858:	mov	x20, x0
    885c:	ldr	x23, [sp, #48]
    8860:	b	8268 <d_expression+0x78>
    8864:	mov	x0, x19
    8868:	bl	7a08 <d_operator_name>
    886c:	mov	x22, x0
    8870:	mov	x0, x19
    8874:	bl	9e64 <d_expression_1>
    8878:	mov	x23, x0
    887c:	mov	x0, x19
    8880:	bl	9e64 <d_expression_1>
    8884:	mov	x3, x0
    8888:	cbnz	x0, 8820 <d_expression+0x630>
    888c:	mov	x20, x0
    8890:	ldr	x23, [sp, #48]
    8894:	b	8268 <d_expression+0x78>
    8898:	add	x0, x0, #0x1
    889c:	str	x0, [x19, #24]
    88a0:	mov	x3, #0x0                   	// #0
    88a4:	b	8820 <d_expression+0x630>
    88a8:	ldrb	w1, [x0, #1]
    88ac:	cmp	w1, #0x69
    88b0:	b.eq	88c0 <d_expression+0x6d0>  // b.none
    88b4:	mov	x20, #0x0                   	// #0
    88b8:	ldr	x23, [sp, #48]
    88bc:	b	8268 <d_expression+0x78>
    88c0:	add	x0, x0, #0x2
    88c4:	str	x0, [x19, #24]
    88c8:	mov	w1, #0x45                  	// #69
    88cc:	mov	x0, x19
    88d0:	bl	897c <d_exprlist>
    88d4:	mov	x3, x0
    88d8:	b	8820 <d_expression+0x630>
    88dc:	mov	x0, x19
    88e0:	bl	9e64 <d_expression_1>
    88e4:	mov	x3, x0
    88e8:	b	8820 <d_expression+0x630>
    88ec:	mov	x20, x22
    88f0:	b	8268 <d_expression+0x78>
    88f4:	mov	x20, x22
    88f8:	b	8268 <d_expression+0x78>
    88fc:	mov	x20, x0
    8900:	ldr	x23, [sp, #48]
    8904:	b	8268 <d_expression+0x78>
    8908:	mov	x20, #0x0                   	// #0
    890c:	ldr	x23, [sp, #48]
    8910:	b	8268 <d_expression+0x78>
    8914:	mov	x20, #0x0                   	// #0
    8918:	ldr	x23, [sp, #48]
    891c:	b	8268 <d_expression+0x78>
    8920:	mov	x20, #0x0                   	// #0
    8924:	ldr	x23, [sp, #48]
    8928:	b	8268 <d_expression+0x78>
    892c:	mov	w23, #0x0                   	// #0
    8930:	cmp	w0, #0x34
    8934:	b.ne	8594 <d_expression+0x3a4>  // b.any
    8938:	ldr	x0, [x19, #24]
    893c:	ldrb	w1, [x0]
    8940:	cmp	w1, #0x5f
    8944:	b.eq	8960 <d_expression+0x770>  // b.none
    8948:	mov	w23, #0x0                   	// #0
    894c:	b	8594 <d_expression+0x3a4>
    8950:	ldr	x0, [x19, #24]
    8954:	ldrb	w1, [x0]
    8958:	cmp	w1, #0x5f
    895c:	b.ne	8580 <d_expression+0x390>  // b.any
    8960:	add	x0, x0, #0x1
    8964:	str	x0, [x19, #24]
    8968:	mov	w1, #0x45                  	// #69
    896c:	mov	x0, x19
    8970:	bl	897c <d_exprlist>
    8974:	mov	x3, x0
    8978:	b	85a4 <d_expression+0x3b4>

000000000000897c <d_exprlist>:
    897c:	stp	x29, x30, [sp, #-64]!
    8980:	mov	x29, sp
    8984:	stp	x19, x20, [sp, #16]
    8988:	stp	x21, x22, [sp, #32]
    898c:	mov	x19, x0
    8990:	and	w22, w1, #0xff
    8994:	str	xzr, [sp, #56]
    8998:	ldr	x0, [x0, #24]
    899c:	ldrb	w2, [x0]
    89a0:	add	x20, sp, #0x38
    89a4:	mov	w21, #0x2e                  	// #46
    89a8:	cmp	w2, w1, uxtb
    89ac:	b.eq	8a08 <d_exprlist+0x8c>  // b.none
    89b0:	mov	x0, x19
    89b4:	bl	81f0 <d_expression>
    89b8:	cbz	x0, 89f8 <d_exprlist+0x7c>
    89bc:	mov	x3, #0x0                   	// #0
    89c0:	mov	x2, x0
    89c4:	mov	w1, w21
    89c8:	mov	x0, x19
    89cc:	bl	70 <d_make_comp>
    89d0:	str	x0, [x20]
    89d4:	cbz	x0, 89f8 <d_exprlist+0x7c>
    89d8:	add	x20, x0, #0x10
    89dc:	ldr	x0, [x19, #24]
    89e0:	ldrb	w1, [x0]
    89e4:	cmp	w1, w22
    89e8:	b.ne	89b0 <d_exprlist+0x34>  // b.any
    89ec:	add	x0, x0, #0x1
    89f0:	str	x0, [x19, #24]
    89f4:	ldr	x0, [sp, #56]
    89f8:	ldp	x19, x20, [sp, #16]
    89fc:	ldp	x21, x22, [sp, #32]
    8a00:	ldp	x29, x30, [sp], #64
    8a04:	ret
    8a08:	add	x0, x0, #0x1
    8a0c:	str	x0, [x19, #24]
    8a10:	mov	x3, #0x0                   	// #0
    8a14:	mov	x2, #0x0                   	// #0
    8a18:	mov	w1, w21
    8a1c:	mov	x0, x19
    8a20:	bl	70 <d_make_comp>
    8a24:	b	89f8 <d_exprlist+0x7c>

0000000000008a28 <d_cv_qualifiers>:
    8a28:	stp	x29, x30, [sp, #-112]!
    8a2c:	mov	x29, sp
    8a30:	stp	x19, x20, [sp, #16]
    8a34:	stp	x21, x22, [sp, #32]
    8a38:	stp	x23, x24, [sp, #48]
    8a3c:	stp	x25, x26, [sp, #64]
    8a40:	stp	x27, x28, [sp, #80]
    8a44:	mov	x19, x0
    8a48:	mov	x23, x1
    8a4c:	mov	w26, w2
    8a50:	ldr	x0, [x0, #24]
    8a54:	ldrb	w20, [x0]
    8a58:	cmp	w2, #0x0
    8a5c:	mov	w0, #0x1e                  	// #30
    8a60:	mov	w1, #0x1b                  	// #27
    8a64:	csel	w0, w0, w1, ne  // ne = any
    8a68:	mov	w25, #0x1d                  	// #29
    8a6c:	mov	w1, #0x1a                  	// #26
    8a70:	csel	w25, w25, w1, ne  // ne = any
    8a74:	mov	w24, #0x1c                  	// #28
    8a78:	mov	w1, #0x19                  	// #25
    8a7c:	csel	w24, w24, w1, ne  // ne = any
    8a80:	mov	x21, x23
    8a84:	mov	w28, #0x50                  	// #80
    8a88:	mov	x22, #0x0                   	// #0
    8a8c:	mov	w27, #0x4f                  	// #79
    8a90:	str	w0, [sp, #108]
    8a94:	b	8ad0 <d_cv_qualifiers+0xa8>
    8a98:	ldr	w0, [x19, #72]
    8a9c:	add	w0, w0, #0x9
    8aa0:	str	w0, [x19, #72]
    8aa4:	mov	w1, w24
    8aa8:	mov	x3, x22
    8aac:	mov	x2, x22
    8ab0:	mov	x0, x19
    8ab4:	bl	70 <d_make_comp>
    8ab8:	mov	x3, x0
    8abc:	str	x0, [x21]
    8ac0:	cbz	x0, 8c7c <d_cv_qualifiers+0x254>
    8ac4:	add	x21, x0, #0x8
    8ac8:	ldr	x0, [x19, #24]
    8acc:	ldrb	w20, [x0]
    8ad0:	mov	x0, x19
    8ad4:	bl	418 <next_is_type_qual>
    8ad8:	cbz	w0, 8c04 <d_cv_qualifiers+0x1dc>
    8adc:	ldr	x0, [x19, #24]
    8ae0:	add	x1, x0, #0x1
    8ae4:	str	x1, [x19, #24]
    8ae8:	cmp	w20, #0x72
    8aec:	b.eq	8a98 <d_cv_qualifiers+0x70>  // b.none
    8af0:	cmp	w20, #0x56
    8af4:	b.eq	8b78 <d_cv_qualifiers+0x150>  // b.none
    8af8:	cmp	w20, #0x4b
    8afc:	b.eq	8b90 <d_cv_qualifiers+0x168>  // b.none
    8b00:	ldrb	w1, [x0, #1]
    8b04:	cbz	w1, 8c78 <d_cv_qualifiers+0x250>
    8b08:	add	x1, x0, #0x2
    8b0c:	str	x1, [x19, #24]
    8b10:	ldrb	w2, [x0, #1]
    8b14:	cmp	w2, #0x78
    8b18:	b.eq	8ba8 <d_cv_qualifiers+0x180>  // b.none
    8b1c:	and	w0, w2, #0xffffffdf
    8b20:	and	w0, w0, #0xff
    8b24:	cmp	w0, #0x4f
    8b28:	b.ne	8bc0 <d_cv_qualifiers+0x198>  // b.any
    8b2c:	ldr	w0, [x19, #72]
    8b30:	add	w0, w0, #0x9
    8b34:	str	w0, [x19, #72]
    8b38:	mov	x3, x22
    8b3c:	mov	w1, w27
    8b40:	cmp	w2, #0x4f
    8b44:	b.ne	8aac <d_cv_qualifiers+0x84>  // b.any
    8b48:	mov	x0, x19
    8b4c:	bl	81f0 <d_expression>
    8b50:	mov	x3, x0
    8b54:	cbz	x0, 8c7c <d_cv_qualifiers+0x254>
    8b58:	ldr	x0, [x19, #24]
    8b5c:	ldrb	w1, [x0]
    8b60:	cmp	w1, #0x45
    8b64:	b.ne	8c9c <d_cv_qualifiers+0x274>  // b.any
    8b68:	add	x0, x0, #0x1
    8b6c:	str	x0, [x19, #24]
    8b70:	mov	w1, w27
    8b74:	b	8aac <d_cv_qualifiers+0x84>
    8b78:	ldr	w0, [x19, #72]
    8b7c:	add	w0, w0, #0x9
    8b80:	str	w0, [x19, #72]
    8b84:	mov	w1, w25
    8b88:	mov	x3, x22
    8b8c:	b	8aac <d_cv_qualifiers+0x84>
    8b90:	ldr	w0, [x19, #72]
    8b94:	add	w0, w0, #0x6
    8b98:	str	w0, [x19, #72]
    8b9c:	ldr	w1, [sp, #108]
    8ba0:	mov	x3, x22
    8ba4:	b	8aac <d_cv_qualifiers+0x84>
    8ba8:	ldr	w0, [x19, #72]
    8bac:	add	w0, w0, #0x11
    8bb0:	str	w0, [x19, #72]
    8bb4:	mov	x3, x22
    8bb8:	mov	w1, #0x4d                  	// #77
    8bbc:	b	8aac <d_cv_qualifiers+0x84>
    8bc0:	cmp	w2, #0x77
    8bc4:	b.ne	8ca4 <d_cv_qualifiers+0x27c>  // b.any
    8bc8:	ldr	w0, [x19, #72]
    8bcc:	add	w0, w0, #0x6
    8bd0:	str	w0, [x19, #72]
    8bd4:	mov	x0, x19
    8bd8:	bl	78d4 <d_parmlist>
    8bdc:	mov	x3, x0
    8be0:	cbz	x0, 8c7c <d_cv_qualifiers+0x254>
    8be4:	ldr	x0, [x19, #24]
    8be8:	ldrb	w1, [x0]
    8bec:	cmp	w1, #0x45
    8bf0:	b.ne	8cac <d_cv_qualifiers+0x284>  // b.any
    8bf4:	add	x0, x0, #0x1
    8bf8:	str	x0, [x19, #24]
    8bfc:	mov	w1, w28
    8c00:	b	8aac <d_cv_qualifiers+0x84>
    8c04:	cmp	w20, #0x46
    8c08:	mov	x3, x21
    8c0c:	ccmp	w26, #0x0, #0x0, eq  // eq = none
    8c10:	b.ne	8c7c <d_cv_qualifiers+0x254>  // b.any
    8c14:	cmp	x21, x23
    8c18:	b.eq	8cb4 <d_cv_qualifiers+0x28c>  // b.none
    8c1c:	mov	w4, #0x1d                  	// #29
    8c20:	mov	w3, #0x1e                  	// #30
    8c24:	mov	w2, #0x1c                  	// #28
    8c28:	b	8c40 <d_cv_qualifiers+0x218>
    8c2c:	str	w4, [x1]
    8c30:	ldr	x23, [x23]
    8c34:	add	x23, x23, #0x8
    8c38:	cmp	x21, x23
    8c3c:	b.eq	8c70 <d_cv_qualifiers+0x248>  // b.none
    8c40:	ldr	x1, [x23]
    8c44:	ldr	w0, [x1]
    8c48:	cmp	w0, #0x1a
    8c4c:	b.eq	8c2c <d_cv_qualifiers+0x204>  // b.none
    8c50:	cmp	w0, #0x1b
    8c54:	b.eq	8c68 <d_cv_qualifiers+0x240>  // b.none
    8c58:	cmp	w0, #0x19
    8c5c:	b.ne	8c30 <d_cv_qualifiers+0x208>  // b.any
    8c60:	str	w2, [x1]
    8c64:	b	8c30 <d_cv_qualifiers+0x208>
    8c68:	str	w3, [x1]
    8c6c:	b	8c30 <d_cv_qualifiers+0x208>
    8c70:	mov	x3, x23
    8c74:	b	8c7c <d_cv_qualifiers+0x254>
    8c78:	mov	x3, #0x0                   	// #0
    8c7c:	mov	x0, x3
    8c80:	ldp	x19, x20, [sp, #16]
    8c84:	ldp	x21, x22, [sp, #32]
    8c88:	ldp	x23, x24, [sp, #48]
    8c8c:	ldp	x25, x26, [sp, #64]
    8c90:	ldp	x27, x28, [sp, #80]
    8c94:	ldp	x29, x30, [sp], #112
    8c98:	ret
    8c9c:	mov	x3, #0x0                   	// #0
    8ca0:	b	8c7c <d_cv_qualifiers+0x254>
    8ca4:	mov	x3, #0x0                   	// #0
    8ca8:	b	8c7c <d_cv_qualifiers+0x254>
    8cac:	mov	x3, #0x0                   	// #0
    8cb0:	b	8c7c <d_cv_qualifiers+0x254>
    8cb4:	mov	x3, x23
    8cb8:	b	8c7c <d_cv_qualifiers+0x254>

0000000000008cbc <d_name>:
    8cbc:	stp	x29, x30, [sp, #-112]!
    8cc0:	mov	x29, sp
    8cc4:	stp	x19, x20, [sp, #16]
    8cc8:	stp	x21, x22, [sp, #32]
    8ccc:	mov	x19, x0
    8cd0:	ldr	x1, [x0, #24]
    8cd4:	ldrb	w0, [x1]
    8cd8:	cmp	w0, #0x55
    8cdc:	b.eq	90b8 <d_name+0x3fc>  // b.none
    8ce0:	b.hi	8d44 <d_name+0x88>  // b.pmore
    8ce4:	cmp	w0, #0x4e
    8ce8:	b.eq	8dd8 <d_name+0x11c>  // b.none
    8cec:	cmp	w0, #0x53
    8cf0:	b.ne	914c <d_name+0x490>  // b.any
    8cf4:	ldrb	w0, [x1, #1]
    8cf8:	cmp	w0, #0x74
    8cfc:	b.eq	90d8 <d_name+0x41c>  // b.none
    8d00:	mov	w1, #0x0                   	// #0
    8d04:	mov	x0, x19
    8d08:	bl	6c78 <d_substitution>
    8d0c:	mov	x22, x0
    8d10:	ldr	x0, [x19, #24]
    8d14:	ldrb	w0, [x0]
    8d18:	cmp	w0, #0x49
    8d1c:	b.ne	90c4 <d_name+0x408>  // b.any
    8d20:	mov	x0, x19
    8d24:	bl	9e28 <d_template_args>
    8d28:	mov	x3, x0
    8d2c:	mov	x2, x22
    8d30:	mov	w1, #0x4                   	// #4
    8d34:	mov	x0, x19
    8d38:	bl	70 <d_make_comp>
    8d3c:	mov	x22, x0
    8d40:	b	90c4 <d_name+0x408>
    8d44:	cmp	w0, #0x5a
    8d48:	b.ne	914c <d_name+0x490>  // b.any
    8d4c:	add	x1, x1, #0x1
    8d50:	str	x1, [x19, #24]
    8d54:	mov	w1, #0x0                   	// #0
    8d58:	mov	x0, x19
    8d5c:	bl	9204 <d_encoding>
    8d60:	mov	x22, x0
    8d64:	cbz	x0, 90c4 <d_name+0x408>
    8d68:	ldr	x0, [x19, #24]
    8d6c:	ldrb	w1, [x0]
    8d70:	cmp	w1, #0x45
    8d74:	b.ne	919c <d_name+0x4e0>  // b.any
    8d78:	add	x1, x0, #0x1
    8d7c:	str	x1, [x19, #24]
    8d80:	ldrb	w1, [x0, #1]
    8d84:	cmp	w1, #0x73
    8d88:	b.eq	8ff0 <d_name+0x334>  // b.none
    8d8c:	cmp	w1, #0x64
    8d90:	b.eq	9020 <d_name+0x364>  // b.none
    8d94:	mov	x0, x19
    8d98:	bl	8cbc <d_name>
    8d9c:	mov	x3, x0
    8da0:	cbz	x0, 8db4 <d_name+0xf8>
    8da4:	ldr	w0, [x0]
    8da8:	sub	w0, w0, #0x46
    8dac:	tst	w0, #0xfffffffd
    8db0:	b.ne	905c <d_name+0x3a0>  // b.any
    8db4:	ldr	w0, [x22]
    8db8:	cmp	w0, #0x3
    8dbc:	b.eq	90a0 <d_name+0x3e4>  // b.none
    8dc0:	mov	x2, x22
    8dc4:	mov	w1, #0x2                   	// #2
    8dc8:	mov	x0, x19
    8dcc:	bl	70 <d_make_comp>
    8dd0:	mov	x22, x0
    8dd4:	b	90c4 <d_name+0x408>
    8dd8:	add	x1, x1, #0x1
    8ddc:	str	x1, [x19, #24]
    8de0:	mov	w2, #0x1                   	// #1
    8de4:	add	x1, sp, #0x68
    8de8:	mov	x0, x19
    8dec:	bl	8a28 <d_cv_qualifiers>
    8df0:	mov	x22, x0
    8df4:	cbz	x0, 90c4 <d_name+0x408>
    8df8:	stp	x27, x28, [sp, #80]
    8dfc:	mov	x1, #0x0                   	// #0
    8e00:	mov	x0, x19
    8e04:	bl	470 <d_ref_qualifier>
    8e08:	mov	x27, x0
    8e0c:	ldr	x0, [x19, #24]
    8e10:	ldrb	w20, [x0]
    8e14:	cbz	w20, 91cc <d_name+0x510>
    8e18:	stp	x23, x24, [sp, #48]
    8e1c:	stp	x25, x26, [sp, #64]
    8e20:	mov	x23, #0x0                   	// #0
    8e24:	mov	w24, #0x1                   	// #1
    8e28:	mov	w26, #0x55                  	// #85
    8e2c:	mov	w25, #0x4c                  	// #76
    8e30:	mov	w28, #0x4                   	// #4
    8e34:	b	8eac <d_name+0x1f0>
    8e38:	ldrb	w0, [x0, #1]
    8e3c:	and	w0, w0, #0xffffffdf
    8e40:	and	w0, w0, #0xff
    8e44:	cmp	w0, #0x54
    8e48:	b.ne	8ef8 <d_name+0x23c>  // b.any
    8e4c:	mov	x0, x19
    8e50:	bl	6f74 <__asan_cplus_demangle_type>
    8e54:	mov	x21, x0
    8e58:	mov	w1, w24
    8e5c:	cbz	x23, 8e7c <d_name+0x1c0>
    8e60:	mov	x3, x21
    8e64:	mov	x2, x23
    8e68:	mov	x0, x19
    8e6c:	bl	70 <d_make_comp>
    8e70:	mov	x21, x0
    8e74:	cmp	w20, #0x53
    8e78:	b.eq	8e9c <d_name+0x1e0>  // b.none
    8e7c:	ldr	x0, [x19, #24]
    8e80:	ldrb	w20, [x0]
    8e84:	cmp	w20, #0x45
    8e88:	b.eq	8ea8 <d_name+0x1ec>  // b.none
    8e8c:	mov	x1, x21
    8e90:	mov	x0, x19
    8e94:	bl	6a4 <d_add_substitution>
    8e98:	cbz	w0, 8f88 <d_name+0x2cc>
    8e9c:	ldr	x0, [x19, #24]
    8ea0:	ldrb	w20, [x0]
    8ea4:	cbz	w20, 91c4 <d_name+0x508>
    8ea8:	mov	x23, x21
    8eac:	cmp	w20, #0x44
    8eb0:	b.eq	8e38 <d_name+0x17c>  // b.none
    8eb4:	sub	w2, w20, #0x30
    8eb8:	and	w2, w2, #0xff
    8ebc:	sub	w1, w20, #0x61
    8ec0:	and	w1, w1, #0xff
    8ec4:	cmp	w2, #0x9
    8ec8:	ccmp	w1, #0x19, #0x0, hi  // hi = pmore
    8ecc:	b.ls	8ee0 <d_name+0x224>  // b.plast
    8ed0:	cmp	w20, #0x43
    8ed4:	ccmp	w20, w26, #0x4, ne  // ne = any
    8ed8:	ccmp	w20, w25, #0x4, ne  // ne = any
    8edc:	b.ne	8f08 <d_name+0x24c>  // b.any
    8ee0:	mov	x0, x19
    8ee4:	bl	7bb0 <d_unqualified_name>
    8ee8:	mov	x21, x0
    8eec:	mov	w1, w24
    8ef0:	cbnz	x23, 8e60 <d_name+0x1a4>
    8ef4:	b	8e74 <d_name+0x1b8>
    8ef8:	mov	x0, x19
    8efc:	bl	7bb0 <d_unqualified_name>
    8f00:	mov	x21, x0
    8f04:	b	8e58 <d_name+0x19c>
    8f08:	cmp	w20, #0x53
    8f0c:	b.eq	8f44 <d_name+0x288>  // b.none
    8f10:	cmp	w20, #0x49
    8f14:	b.eq	8f60 <d_name+0x2a4>  // b.none
    8f18:	cmp	w20, #0x54
    8f1c:	b.eq	8f78 <d_name+0x2bc>  // b.none
    8f20:	cmp	w20, #0x45
    8f24:	b.eq	8f94 <d_name+0x2d8>  // b.none
    8f28:	cmp	w20, #0x4d
    8f2c:	ccmp	x23, #0x0, #0x4, eq  // eq = none
    8f30:	b.eq	91e8 <d_name+0x52c>  // b.none
    8f34:	add	x0, x0, #0x1
    8f38:	str	x0, [x19, #24]
    8f3c:	mov	x21, x23
    8f40:	b	8e9c <d_name+0x1e0>
    8f44:	mov	w1, w24
    8f48:	mov	x0, x19
    8f4c:	bl	6c78 <d_substitution>
    8f50:	mov	x21, x0
    8f54:	mov	w1, w24
    8f58:	cbnz	x23, 8e60 <d_name+0x1a4>
    8f5c:	b	8e9c <d_name+0x1e0>
    8f60:	cbz	x23, 91dc <d_name+0x520>
    8f64:	mov	x0, x19
    8f68:	bl	9e28 <d_template_args>
    8f6c:	mov	x21, x0
    8f70:	mov	w1, w28
    8f74:	b	8e60 <d_name+0x1a4>
    8f78:	mov	x0, x19
    8f7c:	bl	558 <d_template_param>
    8f80:	mov	x21, x0
    8f84:	b	8e58 <d_name+0x19c>
    8f88:	ldp	x23, x24, [sp, #48]
    8f8c:	ldp	x25, x26, [sp, #64]
    8f90:	b	91cc <d_name+0x510>
    8f94:	str	x23, [x22]
    8f98:	cbz	x23, 8fdc <d_name+0x320>
    8f9c:	cbz	x27, 8fac <d_name+0x2f0>
    8fa0:	ldr	x0, [sp, #104]
    8fa4:	str	x0, [x27, #8]
    8fa8:	str	x27, [sp, #104]
    8fac:	ldr	x0, [x19, #24]
    8fb0:	ldrb	w1, [x0]
    8fb4:	mov	x22, #0x0                   	// #0
    8fb8:	cmp	w1, #0x45
    8fbc:	b.ne	91f4 <d_name+0x538>  // b.any
    8fc0:	add	x0, x0, #0x1
    8fc4:	str	x0, [x19, #24]
    8fc8:	ldr	x22, [sp, #104]
    8fcc:	ldp	x23, x24, [sp, #48]
    8fd0:	ldp	x25, x26, [sp, #64]
    8fd4:	ldp	x27, x28, [sp, #80]
    8fd8:	b	90c4 <d_name+0x408>
    8fdc:	mov	x22, x23
    8fe0:	ldp	x23, x24, [sp, #48]
    8fe4:	ldp	x25, x26, [sp, #64]
    8fe8:	ldp	x27, x28, [sp, #80]
    8fec:	b	90c4 <d_name+0x408>
    8ff0:	add	x0, x0, #0x2
    8ff4:	str	x0, [x19, #24]
    8ff8:	mov	x0, x19
    8ffc:	bl	604 <d_discriminator>
    9000:	cbz	w0, 91a4 <d_name+0x4e8>
    9004:	mov	w2, #0xe                   	// #14
    9008:	adrp	x1, 0 <is_fnqual_component_type>
    900c:	add	x1, x1, #0x0
    9010:	mov	x0, x19
    9014:	bl	6ab0 <d_make_name>
    9018:	mov	x3, x0
    901c:	b	8db4 <d_name+0xf8>
    9020:	add	x0, x0, #0x2
    9024:	str	x0, [x19, #24]
    9028:	mov	x0, x19
    902c:	bl	4dc <d_compact_number>
    9030:	mov	w20, w0
    9034:	tbnz	w0, #31, 91ac <d_name+0x4f0>
    9038:	mov	x0, x19
    903c:	bl	8cbc <d_name>
    9040:	mov	x21, x0
    9044:	cbz	x0, 9074 <d_name+0x3b8>
    9048:	ldr	w0, [x0]
    904c:	sub	w0, w0, #0x46
    9050:	tst	w0, #0xfffffffd
    9054:	b.eq	9074 <d_name+0x3b8>  // b.none
    9058:	b	9064 <d_name+0x3a8>
    905c:	mov	x21, x3
    9060:	mov	w20, #0xffffffff            	// #-1
    9064:	mov	x0, x19
    9068:	bl	604 <d_discriminator>
    906c:	cbz	w0, 91b4 <d_name+0x4f8>
    9070:	tbnz	w20, #31, 9098 <d_name+0x3dc>
    9074:	mov	x0, x19
    9078:	bl	30 <d_make_empty>
    907c:	mov	x3, x0
    9080:	cbz	x0, 8db4 <d_name+0xf8>
    9084:	mov	w0, #0x47                  	// #71
    9088:	str	w0, [x3]
    908c:	str	w20, [x3, #16]
    9090:	str	x21, [x3, #8]
    9094:	b	8db4 <d_name+0xf8>
    9098:	mov	x3, x21
    909c:	b	8db4 <d_name+0xf8>
    90a0:	ldr	x0, [x22, #16]
    90a4:	ldr	w1, [x0]
    90a8:	cmp	w1, #0x29
    90ac:	b.ne	8dc0 <d_name+0x104>  // b.any
    90b0:	str	xzr, [x0, #8]
    90b4:	b	8dc0 <d_name+0x104>
    90b8:	mov	x0, x19
    90bc:	bl	7bb0 <d_unqualified_name>
    90c0:	mov	x22, x0
    90c4:	mov	x0, x22
    90c8:	ldp	x19, x20, [sp, #16]
    90cc:	ldp	x21, x22, [sp, #32]
    90d0:	ldp	x29, x30, [sp], #112
    90d4:	ret
    90d8:	add	x1, x1, #0x2
    90dc:	str	x1, [x19, #24]
    90e0:	mov	w2, #0x3                   	// #3
    90e4:	adrp	x1, 0 <is_fnqual_component_type>
    90e8:	add	x1, x1, #0x0
    90ec:	mov	x0, x19
    90f0:	bl	6ab0 <d_make_name>
    90f4:	mov	x20, x0
    90f8:	mov	x0, x19
    90fc:	bl	7bb0 <d_unqualified_name>
    9100:	mov	x3, x0
    9104:	mov	x2, x20
    9108:	mov	w1, #0x1                   	// #1
    910c:	mov	x0, x19
    9110:	bl	70 <d_make_comp>
    9114:	mov	x22, x0
    9118:	ldr	w0, [x19, #72]
    911c:	add	w0, w0, #0x3
    9120:	str	w0, [x19, #72]
    9124:	ldr	x0, [x19, #24]
    9128:	ldrb	w0, [x0]
    912c:	cmp	w0, #0x49
    9130:	b.ne	90c4 <d_name+0x408>  // b.any
    9134:	mov	x1, x22
    9138:	mov	x0, x19
    913c:	bl	6a4 <d_add_substitution>
    9140:	cbnz	w0, 8d20 <d_name+0x64>
    9144:	mov	x22, #0x0                   	// #0
    9148:	b	90c4 <d_name+0x408>
    914c:	mov	x0, x19
    9150:	bl	7bb0 <d_unqualified_name>
    9154:	mov	x22, x0
    9158:	ldr	x0, [x19, #24]
    915c:	ldrb	w0, [x0]
    9160:	cmp	w0, #0x49
    9164:	b.ne	90c4 <d_name+0x408>  // b.any
    9168:	mov	x1, x22
    916c:	mov	x0, x19
    9170:	bl	6a4 <d_add_substitution>
    9174:	cbz	w0, 91bc <d_name+0x500>
    9178:	mov	x0, x19
    917c:	bl	9e28 <d_template_args>
    9180:	mov	x3, x0
    9184:	mov	x2, x22
    9188:	mov	w1, #0x4                   	// #4
    918c:	mov	x0, x19
    9190:	bl	70 <d_make_comp>
    9194:	mov	x22, x0
    9198:	b	90c4 <d_name+0x408>
    919c:	mov	x22, #0x0                   	// #0
    91a0:	b	90c4 <d_name+0x408>
    91a4:	mov	x22, #0x0                   	// #0
    91a8:	b	90c4 <d_name+0x408>
    91ac:	mov	x22, #0x0                   	// #0
    91b0:	b	90c4 <d_name+0x408>
    91b4:	mov	x22, #0x0                   	// #0
    91b8:	b	90c4 <d_name+0x408>
    91bc:	mov	x22, #0x0                   	// #0
    91c0:	b	90c4 <d_name+0x408>
    91c4:	ldp	x23, x24, [sp, #48]
    91c8:	ldp	x25, x26, [sp, #64]
    91cc:	str	xzr, [x22]
    91d0:	mov	x22, #0x0                   	// #0
    91d4:	ldp	x27, x28, [sp, #80]
    91d8:	b	90c4 <d_name+0x408>
    91dc:	ldp	x23, x24, [sp, #48]
    91e0:	ldp	x25, x26, [sp, #64]
    91e4:	b	91cc <d_name+0x510>
    91e8:	ldp	x23, x24, [sp, #48]
    91ec:	ldp	x25, x26, [sp, #64]
    91f0:	b	91cc <d_name+0x510>
    91f4:	ldp	x23, x24, [sp, #48]
    91f8:	ldp	x25, x26, [sp, #64]
    91fc:	ldp	x27, x28, [sp, #80]
    9200:	b	90c4 <d_name+0x408>

0000000000009204 <d_encoding>:
    9204:	stp	x29, x30, [sp, #-96]!
    9208:	mov	x29, sp
    920c:	stp	x19, x20, [sp, #16]
    9210:	mov	x19, x0
    9214:	ldr	x0, [x0, #24]
    9218:	ldrb	w2, [x0]
    921c:	cmp	w2, #0x47
    9220:	mov	w3, #0x54                  	// #84
    9224:	ccmp	w2, w3, #0x4, ne  // ne = any
    9228:	b.ne	984c <d_encoding+0x648>  // b.any
    922c:	ldr	w2, [x19, #72]
    9230:	add	w1, w2, #0x14
    9234:	str	w1, [x19, #72]
    9238:	ldrb	w1, [x0]
    923c:	cmp	w1, w3
    9240:	b.eq	92f0 <d_encoding+0xec>  // b.none
    9244:	mov	x20, #0x0                   	// #0
    9248:	cmp	w1, #0x47
    924c:	b.ne	9888 <d_encoding+0x684>  // b.any
    9250:	add	x1, x0, #0x1
    9254:	str	x1, [x19, #24]
    9258:	ldrb	w1, [x0, #1]
    925c:	cbz	w1, 994c <d_encoding+0x748>
    9260:	add	x1, x0, #0x2
    9264:	str	x1, [x19, #24]
    9268:	ldrb	w1, [x0, #1]
    926c:	cmp	w1, #0x54
    9270:	b.eq	96b0 <d_encoding+0x4ac>  // b.none
    9274:	cmp	w1, #0x54
    9278:	b.ls	9620 <d_encoding+0x41c>  // b.plast
    927c:	cmp	w1, #0x56
    9280:	b.eq	9664 <d_encoding+0x460>  // b.none
    9284:	mov	x20, #0x0                   	// #0
    9288:	cmp	w1, #0x72
    928c:	b.ne	9888 <d_encoding+0x684>  // b.any
    9290:	mov	x0, x19
    9294:	bl	258 <d_number>
    9298:	cmp	w0, #0x1
    929c:	b.le	9954 <d_encoding+0x750>
    92a0:	ldr	x1, [x19, #24]
    92a4:	ldrb	w2, [x1]
    92a8:	cbz	w2, 995c <d_encoding+0x758>
    92ac:	stp	x21, x22, [sp, #32]
    92b0:	add	x21, x1, #0x1
    92b4:	str	x21, [x19, #24]
    92b8:	ldrb	w1, [x1]
    92bc:	mov	x20, #0x0                   	// #0
    92c0:	cmp	w1, #0x5f
    92c4:	b.ne	99c0 <d_encoding+0x7bc>  // b.any
    92c8:	stp	x23, x24, [sp, #48]
    92cc:	stp	x25, x26, [sp, #64]
    92d0:	stp	x27, x28, [sp, #80]
    92d4:	sub	w22, w0, #0x1
    92d8:	mov	x24, #0x0                   	// #0
    92dc:	mov	w26, #0x41                  	// #65
    92e0:	mov	w28, #0x2f                  	// #47
    92e4:	mov	w27, #0x2e                  	// #46
    92e8:	mov	w25, #0x40                  	// #64
    92ec:	b	979c <d_encoding+0x598>
    92f0:	add	x1, x0, #0x1
    92f4:	str	x1, [x19, #24]
    92f8:	ldrb	w1, [x0, #1]
    92fc:	mov	x20, #0x0                   	// #0
    9300:	cbz	w1, 9888 <d_encoding+0x684>
    9304:	add	x1, x0, #0x2
    9308:	str	x1, [x19, #24]
    930c:	ldrb	w0, [x0, #1]
    9310:	cmp	w0, #0x53
    9314:	b.eq	94dc <d_encoding+0x2d8>  // b.none
    9318:	b.ls	9378 <d_encoding+0x174>  // b.plast
    931c:	cmp	w0, #0x63
    9320:	b.eq	953c <d_encoding+0x338>  // b.none
    9324:	b.ls	9420 <d_encoding+0x21c>  // b.plast
    9328:	cmp	w0, #0x68
    932c:	b.eq	9500 <d_encoding+0x2fc>  // b.none
    9330:	mov	x20, #0x0                   	// #0
    9334:	cmp	w0, #0x76
    9338:	b.ne	9888 <d_encoding+0x684>  // b.any
    933c:	mov	w1, #0x76                  	// #118
    9340:	mov	x0, x19
    9344:	bl	36c <d_call_offset>
    9348:	mov	x20, #0x0                   	// #0
    934c:	cbz	w0, 9888 <d_encoding+0x684>
    9350:	mov	w1, #0x0                   	// #0
    9354:	mov	x0, x19
    9358:	bl	9204 <d_encoding>
    935c:	mov	x3, #0x0                   	// #0
    9360:	mov	x2, x0
    9364:	mov	w1, #0x10                  	// #16
    9368:	mov	x0, x19
    936c:	bl	70 <d_make_comp>
    9370:	mov	x20, x0
    9374:	b	9888 <d_encoding+0x684>
    9378:	cmp	w0, #0x48
    937c:	b.eq	95fc <d_encoding+0x3f8>  // b.none
    9380:	b.ls	93bc <d_encoding+0x1b8>  // b.plast
    9384:	cmp	w0, #0x49
    9388:	b.eq	94b8 <d_encoding+0x2b4>  // b.none
    938c:	mov	x20, #0x0                   	// #0
    9390:	cmp	w0, #0x4a
    9394:	b.ne	9888 <d_encoding+0x684>  // b.any
    9398:	mov	x0, x19
    939c:	bl	6f74 <__asan_cplus_demangle_type>
    93a0:	mov	x3, #0x0                   	// #0
    93a4:	mov	x2, x0
    93a8:	mov	w1, #0x12                  	// #18
    93ac:	mov	x0, x19
    93b0:	bl	70 <d_make_comp>
    93b4:	mov	x20, x0
    93b8:	b	9888 <d_encoding+0x684>
    93bc:	cmp	w0, #0x43
    93c0:	b.eq	9588 <d_encoding+0x384>  // b.none
    93c4:	cmp	w0, #0x46
    93c8:	b.ne	93f0 <d_encoding+0x1ec>  // b.any
    93cc:	mov	x0, x19
    93d0:	bl	6f74 <__asan_cplus_demangle_type>
    93d4:	mov	x3, #0x0                   	// #0
    93d8:	mov	x2, x0
    93dc:	mov	w1, #0xe                   	// #14
    93e0:	mov	x0, x19
    93e4:	bl	70 <d_make_comp>
    93e8:	mov	x20, x0
    93ec:	b	9888 <d_encoding+0x684>
    93f0:	mov	x20, #0x0                   	// #0
    93f4:	cmp	w0, #0x41
    93f8:	b.ne	9888 <d_encoding+0x684>  // b.any
    93fc:	mov	x0, x19
    9400:	bl	9cdc <d_template_arg>
    9404:	mov	x3, #0x0                   	// #0
    9408:	mov	x2, x0
    940c:	mov	w1, #0x30                  	// #48
    9410:	mov	x0, x19
    9414:	bl	70 <d_make_comp>
    9418:	mov	x20, x0
    941c:	b	9888 <d_encoding+0x684>
    9420:	cmp	w0, #0x56
    9424:	b.eq	948c <d_encoding+0x288>  // b.none
    9428:	cmp	w0, #0x57
    942c:	b.ne	9454 <d_encoding+0x250>  // b.any
    9430:	mov	x0, x19
    9434:	bl	8cbc <d_name>
    9438:	mov	x3, #0x0                   	// #0
    943c:	mov	x2, x0
    9440:	mov	w1, #0x15                  	// #21
    9444:	mov	x0, x19
    9448:	bl	70 <d_make_comp>
    944c:	mov	x20, x0
    9450:	b	9888 <d_encoding+0x684>
    9454:	mov	x20, #0x0                   	// #0
    9458:	cmp	w0, #0x54
    945c:	b.ne	9888 <d_encoding+0x684>  // b.any
    9460:	add	w2, w2, #0xa
    9464:	str	w2, [x19, #72]
    9468:	mov	x0, x19
    946c:	bl	6f74 <__asan_cplus_demangle_type>
    9470:	mov	x3, #0x0                   	// #0
    9474:	mov	x2, x0
    9478:	mov	w1, #0xa                   	// #10
    947c:	mov	x0, x19
    9480:	bl	70 <d_make_comp>
    9484:	mov	x20, x0
    9488:	b	9888 <d_encoding+0x684>
    948c:	add	w2, w2, #0xf
    9490:	str	w2, [x19, #72]
    9494:	mov	x0, x19
    9498:	bl	6f74 <__asan_cplus_demangle_type>
    949c:	mov	x3, #0x0                   	// #0
    94a0:	mov	x2, x0
    94a4:	mov	w1, #0x9                   	// #9
    94a8:	mov	x0, x19
    94ac:	bl	70 <d_make_comp>
    94b0:	mov	x20, x0
    94b4:	b	9888 <d_encoding+0x684>
    94b8:	mov	x0, x19
    94bc:	bl	6f74 <__asan_cplus_demangle_type>
    94c0:	mov	x3, #0x0                   	// #0
    94c4:	mov	x2, x0
    94c8:	mov	w1, #0xc                   	// #12
    94cc:	mov	x0, x19
    94d0:	bl	70 <d_make_comp>
    94d4:	mov	x20, x0
    94d8:	b	9888 <d_encoding+0x684>
    94dc:	mov	x0, x19
    94e0:	bl	6f74 <__asan_cplus_demangle_type>
    94e4:	mov	x3, #0x0                   	// #0
    94e8:	mov	x2, x0
    94ec:	mov	w1, #0xd                   	// #13
    94f0:	mov	x0, x19
    94f4:	bl	70 <d_make_comp>
    94f8:	mov	x20, x0
    94fc:	b	9888 <d_encoding+0x684>
    9500:	mov	w1, #0x68                  	// #104
    9504:	mov	x0, x19
    9508:	bl	36c <d_call_offset>
    950c:	mov	x20, #0x0                   	// #0
    9510:	cbz	w0, 9888 <d_encoding+0x684>
    9514:	mov	w1, #0x0                   	// #0
    9518:	mov	x0, x19
    951c:	bl	9204 <d_encoding>
    9520:	mov	x3, #0x0                   	// #0
    9524:	mov	x2, x0
    9528:	mov	w1, #0xf                   	// #15
    952c:	mov	x0, x19
    9530:	bl	70 <d_make_comp>
    9534:	mov	x20, x0
    9538:	b	9888 <d_encoding+0x684>
    953c:	mov	w1, #0x0                   	// #0
    9540:	mov	x0, x19
    9544:	bl	36c <d_call_offset>
    9548:	mov	x20, #0x0                   	// #0
    954c:	cbz	w0, 9888 <d_encoding+0x684>
    9550:	mov	w1, #0x0                   	// #0
    9554:	mov	x0, x19
    9558:	bl	36c <d_call_offset>
    955c:	cbz	w0, 9888 <d_encoding+0x684>
    9560:	mov	w1, #0x0                   	// #0
    9564:	mov	x0, x19
    9568:	bl	9204 <d_encoding>
    956c:	mov	x3, #0x0                   	// #0
    9570:	mov	x2, x0
    9574:	mov	w1, #0x11                  	// #17
    9578:	mov	x0, x19
    957c:	bl	70 <d_make_comp>
    9580:	mov	x20, x0
    9584:	b	9888 <d_encoding+0x684>
    9588:	stp	x21, x22, [sp, #32]
    958c:	mov	x0, x19
    9590:	bl	6f74 <__asan_cplus_demangle_type>
    9594:	mov	x21, x0
    9598:	mov	x0, x19
    959c:	bl	258 <d_number>
    95a0:	tbnz	w0, #31, 9940 <d_encoding+0x73c>
    95a4:	ldr	x0, [x19, #24]
    95a8:	ldrb	w1, [x0]
    95ac:	mov	x20, #0x0                   	// #0
    95b0:	cmp	w1, #0x5f
    95b4:	b.eq	95c0 <d_encoding+0x3bc>  // b.none
    95b8:	ldp	x21, x22, [sp, #32]
    95bc:	b	9888 <d_encoding+0x684>
    95c0:	add	x0, x0, #0x1
    95c4:	str	x0, [x19, #24]
    95c8:	mov	x0, x19
    95cc:	bl	6f74 <__asan_cplus_demangle_type>
    95d0:	ldr	w1, [x19, #72]
    95d4:	add	w1, w1, #0x5
    95d8:	str	w1, [x19, #72]
    95dc:	mov	x3, x21
    95e0:	mov	x2, x0
    95e4:	mov	w1, #0xb                   	// #11
    95e8:	mov	x0, x19
    95ec:	bl	70 <d_make_comp>
    95f0:	mov	x20, x0
    95f4:	ldp	x21, x22, [sp, #32]
    95f8:	b	9888 <d_encoding+0x684>
    95fc:	mov	x0, x19
    9600:	bl	8cbc <d_name>
    9604:	mov	x3, #0x0                   	// #0
    9608:	mov	x2, x0
    960c:	mov	w1, #0x14                  	// #20
    9610:	mov	x0, x19
    9614:	bl	70 <d_make_comp>
    9618:	mov	x20, x0
    961c:	b	9888 <d_encoding+0x684>
    9620:	cmp	w1, #0x41
    9624:	b.eq	9688 <d_encoding+0x484>  // b.none
    9628:	mov	x20, #0x0                   	// #0
    962c:	cmp	w1, #0x52
    9630:	b.ne	9888 <d_encoding+0x684>  // b.any
    9634:	mov	x0, x19
    9638:	bl	8cbc <d_name>
    963c:	mov	x20, x0
    9640:	mov	x0, x19
    9644:	bl	328 <d_number_component>
    9648:	mov	x3, x0
    964c:	mov	x2, x20
    9650:	mov	w1, #0x16                  	// #22
    9654:	mov	x0, x19
    9658:	bl	70 <d_make_comp>
    965c:	mov	x20, x0
    9660:	b	9888 <d_encoding+0x684>
    9664:	mov	x0, x19
    9668:	bl	8cbc <d_name>
    966c:	mov	x3, #0x0                   	// #0
    9670:	mov	x2, x0
    9674:	mov	w1, #0x13                  	// #19
    9678:	mov	x0, x19
    967c:	bl	70 <d_make_comp>
    9680:	mov	x20, x0
    9684:	b	9888 <d_encoding+0x684>
    9688:	mov	w1, #0x0                   	// #0
    968c:	mov	x0, x19
    9690:	bl	9204 <d_encoding>
    9694:	mov	x3, #0x0                   	// #0
    9698:	mov	x2, x0
    969c:	mov	w1, #0x17                  	// #23
    96a0:	mov	x0, x19
    96a4:	bl	70 <d_make_comp>
    96a8:	mov	x20, x0
    96ac:	b	9888 <d_encoding+0x684>
    96b0:	ldrb	w1, [x0, #2]
    96b4:	cbz	w1, 96cc <d_encoding+0x4c8>
    96b8:	add	x1, x0, #0x3
    96bc:	str	x1, [x19, #24]
    96c0:	ldrb	w0, [x0, #2]
    96c4:	cmp	w0, #0x6e
    96c8:	b.eq	96f4 <d_encoding+0x4f0>  // b.none
    96cc:	mov	w1, #0x0                   	// #0
    96d0:	mov	x0, x19
    96d4:	bl	9204 <d_encoding>
    96d8:	mov	x3, #0x0                   	// #0
    96dc:	mov	x2, x0
    96e0:	mov	w1, #0x49                  	// #73
    96e4:	mov	x0, x19
    96e8:	bl	70 <d_make_comp>
    96ec:	mov	x20, x0
    96f0:	b	9888 <d_encoding+0x684>
    96f4:	mov	w1, #0x0                   	// #0
    96f8:	mov	x0, x19
    96fc:	bl	9204 <d_encoding>
    9700:	mov	x3, #0x0                   	// #0
    9704:	mov	x2, x0
    9708:	mov	w1, #0x4a                  	// #74
    970c:	mov	x0, x19
    9710:	bl	70 <d_make_comp>
    9714:	mov	x20, x0
    9718:	b	9888 <d_encoding+0x684>
    971c:	mov	x0, #0x1                   	// #1
    9720:	mov	w23, #0x0                   	// #0
    9724:	cmp	w22, #0x0
    9728:	b.le	974c <d_encoding+0x548>
    972c:	mov	w23, w0
    9730:	cmp	w22, w0
    9734:	b.le	974c <d_encoding+0x548>
    9738:	ldrb	w1, [x21, x0]
    973c:	add	x0, x0, #0x1
    9740:	cmp	w1, #0x24
    9744:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    9748:	b.ne	972c <d_encoding+0x528>  // b.any
    974c:	mov	w2, w23
    9750:	mov	x1, x21
    9754:	mov	x0, x19
    9758:	bl	6ab0 <d_make_name>
    975c:	mov	x20, x0
    9760:	ldr	x21, [x19, #24]
    9764:	add	x21, x21, w23, sxtw
    9768:	str	x21, [x19, #24]
    976c:	sub	w22, w22, w23
    9770:	cbz	x0, 99c8 <d_encoding+0x7c4>
    9774:	cbz	x24, 9818 <d_encoding+0x614>
    9778:	mov	x3, x20
    977c:	mov	x2, x24
    9780:	mov	w1, w25
    9784:	mov	x0, x19
    9788:	bl	70 <d_make_comp>
    978c:	mov	x24, x0
    9790:	cbz	x0, 997c <d_encoding+0x778>
    9794:	cmp	w22, #0x0
    9798:	b.le	9820 <d_encoding+0x61c>
    979c:	ldrb	w0, [x21]
    97a0:	cbz	w0, 9964 <d_encoding+0x760>
    97a4:	cmp	w0, #0x24
    97a8:	b.ne	971c <d_encoding+0x518>  // b.any
    97ac:	ldrb	w21, [x21, #1]
    97b0:	cmp	w21, #0x53
    97b4:	b.eq	97e0 <d_encoding+0x5dc>  // b.none
    97b8:	cmp	w21, #0x5f
    97bc:	b.eq	97e8 <d_encoding+0x5e4>  // b.none
    97c0:	cmp	w21, #0x24
    97c4:	b.eq	97ec <d_encoding+0x5e8>  // b.none
    97c8:	mov	x20, #0x0                   	// #0
    97cc:	ldp	x21, x22, [sp, #32]
    97d0:	ldp	x23, x24, [sp, #48]
    97d4:	ldp	x25, x26, [sp, #64]
    97d8:	ldp	x27, x28, [sp, #80]
    97dc:	b	9888 <d_encoding+0x684>
    97e0:	mov	w21, w28
    97e4:	b	97ec <d_encoding+0x5e8>
    97e8:	mov	w21, w27
    97ec:	mov	x0, x19
    97f0:	bl	30 <d_make_empty>
    97f4:	mov	x20, x0
    97f8:	cbz	x0, 99a0 <d_encoding+0x79c>
    97fc:	str	w26, [x0]
    9800:	str	w21, [x0, #8]
    9804:	ldr	x21, [x19, #24]
    9808:	add	x21, x21, #0x2
    980c:	str	x21, [x19, #24]
    9810:	sub	w22, w22, #0x2
    9814:	b	9774 <d_encoding+0x570>
    9818:	mov	x24, x20
    981c:	b	9794 <d_encoding+0x590>
    9820:	mov	x3, #0x0                   	// #0
    9824:	mov	x2, x24
    9828:	mov	w1, #0x3f                  	// #63
    982c:	mov	x0, x19
    9830:	bl	70 <d_make_comp>
    9834:	mov	x20, x0
    9838:	ldp	x21, x22, [sp, #32]
    983c:	ldp	x23, x24, [sp, #48]
    9840:	ldp	x25, x26, [sp, #64]
    9844:	ldp	x27, x28, [sp, #80]
    9848:	b	9888 <d_encoding+0x684>
    984c:	stp	x21, x22, [sp, #32]
    9850:	mov	w21, w1
    9854:	mov	x0, x19
    9858:	bl	8cbc <d_name>
    985c:	mov	x20, x0
    9860:	cbz	x0, 99dc <d_encoding+0x7d8>
    9864:	cbz	w21, 9870 <d_encoding+0x66c>
    9868:	ldr	w0, [x19, #16]
    986c:	tbz	w0, #0, 9898 <d_encoding+0x694>
    9870:	ldr	x0, [x19, #24]
    9874:	ldrb	w0, [x0]
    9878:	cmp	w0, #0x45
    987c:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    9880:	b.ne	98e4 <d_encoding+0x6e0>  // b.any
    9884:	ldp	x21, x22, [sp, #32]
    9888:	mov	x0, x20
    988c:	ldp	x19, x20, [sp, #16]
    9890:	ldp	x29, x30, [sp], #96
    9894:	ret
    9898:	ldr	w19, [x20]
    989c:	mov	w0, w19
    98a0:	bl	0 <is_fnqual_component_type>
    98a4:	cbz	w0, 98b0 <d_encoding+0x6ac>
    98a8:	ldr	x20, [x20, #8]
    98ac:	b	9898 <d_encoding+0x694>
    98b0:	cmp	w19, #0x2
    98b4:	b.eq	98c0 <d_encoding+0x6bc>  // b.none
    98b8:	ldp	x21, x22, [sp, #32]
    98bc:	b	9888 <d_encoding+0x684>
    98c0:	ldr	x19, [x20, #16]
    98c4:	ldr	w0, [x19]
    98c8:	bl	0 <is_fnqual_component_type>
    98cc:	cbz	w0, 98dc <d_encoding+0x6d8>
    98d0:	ldr	x0, [x19, #8]
    98d4:	str	x0, [x20, #16]
    98d8:	b	98c0 <d_encoding+0x6bc>
    98dc:	ldp	x21, x22, [sp, #32]
    98e0:	b	9888 <d_encoding+0x684>
    98e4:	mov	x0, x20
    98e8:	bl	1c0 <has_return_type>
    98ec:	mov	w1, w0
    98f0:	mov	x0, x19
    98f4:	bl	80a8 <d_bare_function_type>
    98f8:	mov	x3, x0
    98fc:	cbz	x0, 9994 <d_encoding+0x790>
    9900:	cbnz	w21, 9910 <d_encoding+0x70c>
    9904:	ldr	w0, [x20]
    9908:	cmp	w0, #0x2
    990c:	b.eq	992c <d_encoding+0x728>  // b.none
    9910:	mov	x2, x20
    9914:	mov	w1, #0x3                   	// #3
    9918:	mov	x0, x19
    991c:	bl	70 <d_make_comp>
    9920:	mov	x20, x0
    9924:	ldp	x21, x22, [sp, #32]
    9928:	b	9888 <d_encoding+0x684>
    992c:	ldr	w0, [x3]
    9930:	cmp	w0, #0x29
    9934:	b.ne	9910 <d_encoding+0x70c>  // b.any
    9938:	str	xzr, [x3, #8]
    993c:	b	9910 <d_encoding+0x70c>
    9940:	mov	x20, #0x0                   	// #0
    9944:	ldp	x21, x22, [sp, #32]
    9948:	b	9888 <d_encoding+0x684>
    994c:	mov	x20, #0x0                   	// #0
    9950:	b	9888 <d_encoding+0x684>
    9954:	mov	x20, #0x0                   	// #0
    9958:	b	9888 <d_encoding+0x684>
    995c:	mov	x20, #0x0                   	// #0
    9960:	b	9888 <d_encoding+0x684>
    9964:	mov	x20, #0x0                   	// #0
    9968:	ldp	x21, x22, [sp, #32]
    996c:	ldp	x23, x24, [sp, #48]
    9970:	ldp	x25, x26, [sp, #64]
    9974:	ldp	x27, x28, [sp, #80]
    9978:	b	9888 <d_encoding+0x684>
    997c:	mov	x20, x0
    9980:	ldp	x21, x22, [sp, #32]
    9984:	ldp	x23, x24, [sp, #48]
    9988:	ldp	x25, x26, [sp, #64]
    998c:	ldp	x27, x28, [sp, #80]
    9990:	b	9888 <d_encoding+0x684>
    9994:	mov	x20, x0
    9998:	ldp	x21, x22, [sp, #32]
    999c:	b	9888 <d_encoding+0x684>
    99a0:	ldr	x0, [x19, #24]
    99a4:	add	x0, x0, #0x2
    99a8:	str	x0, [x19, #24]
    99ac:	ldp	x21, x22, [sp, #32]
    99b0:	ldp	x23, x24, [sp, #48]
    99b4:	ldp	x25, x26, [sp, #64]
    99b8:	ldp	x27, x28, [sp, #80]
    99bc:	b	9888 <d_encoding+0x684>
    99c0:	ldp	x21, x22, [sp, #32]
    99c4:	b	9888 <d_encoding+0x684>
    99c8:	ldp	x21, x22, [sp, #32]
    99cc:	ldp	x23, x24, [sp, #48]
    99d0:	ldp	x25, x26, [sp, #64]
    99d4:	ldp	x27, x28, [sp, #80]
    99d8:	b	9888 <d_encoding+0x684>
    99dc:	ldp	x21, x22, [sp, #32]
    99e0:	b	9888 <d_encoding+0x684>

00000000000099e4 <__asan_cplus_demangle_mangled_name>:
    99e4:	stp	x29, x30, [sp, #-48]!
    99e8:	mov	x29, sp
    99ec:	stp	x19, x20, [sp, #16]
    99f0:	str	x21, [sp, #32]
    99f4:	mov	x19, x0
    99f8:	mov	w21, w1
    99fc:	ldr	x0, [x0, #24]
    9a00:	ldrb	w1, [x0]
    9a04:	cmp	w1, #0x5f
    9a08:	b.eq	9a60 <__asan_cplus_demangle_mangled_name+0x7c>  // b.none
    9a0c:	cbnz	w21, 9b74 <__asan_cplus_demangle_mangled_name+0x190>
    9a10:	ldr	x0, [x19, #24]
    9a14:	ldrb	w1, [x0]
    9a18:	mov	x20, #0x0                   	// #0
    9a1c:	cmp	w1, #0x5a
    9a20:	b.ne	9b78 <__asan_cplus_demangle_mangled_name+0x194>  // b.any
    9a24:	add	x0, x0, #0x1
    9a28:	str	x0, [x19, #24]
    9a2c:	mov	w1, w21
    9a30:	mov	x0, x19
    9a34:	bl	9204 <d_encoding>
    9a38:	mov	x20, x0
    9a3c:	cbz	w21, 9b78 <__asan_cplus_demangle_mangled_name+0x194>
    9a40:	ldr	w0, [x19, #16]
    9a44:	tbz	w0, #0, 9b78 <__asan_cplus_demangle_mangled_name+0x194>
    9a48:	ldr	x1, [x19, #24]
    9a4c:	ldrb	w0, [x1]
    9a50:	mov	w21, #0x4e                  	// #78
    9a54:	cmp	w0, #0x2e
    9a58:	b.eq	9b34 <__asan_cplus_demangle_mangled_name+0x150>  // b.none
    9a5c:	b	9b78 <__asan_cplus_demangle_mangled_name+0x194>
    9a60:	add	x0, x0, #0x1
    9a64:	str	x0, [x19, #24]
    9a68:	b	9a10 <__asan_cplus_demangle_mangled_name+0x2c>
    9a6c:	add	x3, x1, #0x2
    9a70:	ldrb	w2, [x1, #2]
    9a74:	sub	w0, w2, #0x61
    9a78:	and	w0, w0, #0xff
    9a7c:	cmp	w2, #0x5f
    9a80:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    9a84:	b.hi	9b60 <__asan_cplus_demangle_mangled_name+0x17c>  // b.pmore
    9a88:	ldrb	w2, [x3, #1]!
    9a8c:	sub	w0, w2, #0x61
    9a90:	and	w0, w0, #0xff
    9a94:	cmp	w2, #0x5f
    9a98:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    9a9c:	b.ls	9a88 <__asan_cplus_demangle_mangled_name+0xa4>  // b.plast
    9aa0:	b	9b60 <__asan_cplus_demangle_mangled_name+0x17c>
    9aa4:	ldrb	w0, [x2, #1]!
    9aa8:	sub	w0, w0, #0x30
    9aac:	and	w0, w0, #0xff
    9ab0:	cmp	w0, #0x9
    9ab4:	b.ls	9aa4 <__asan_cplus_demangle_mangled_name+0xc0>  // b.plast
    9ab8:	ldrb	w0, [x2]
    9abc:	cmp	w0, #0x2e
    9ac0:	b.ne	9afc <__asan_cplus_demangle_mangled_name+0x118>  // b.any
    9ac4:	mov	x3, x2
    9ac8:	ldrb	w0, [x3, #1]
    9acc:	sub	w0, w0, #0x30
    9ad0:	and	w0, w0, #0xff
    9ad4:	cmp	w0, #0x9
    9ad8:	b.hi	9af8 <__asan_cplus_demangle_mangled_name+0x114>  // b.pmore
    9adc:	add	x2, x3, #0x2
    9ae0:	ldrb	w0, [x3, #2]
    9ae4:	sub	w0, w0, #0x30
    9ae8:	and	w0, w0, #0xff
    9aec:	cmp	w0, #0x9
    9af0:	b.ls	9aa4 <__asan_cplus_demangle_mangled_name+0xc0>  // b.plast
    9af4:	b	9ab8 <__asan_cplus_demangle_mangled_name+0xd4>
    9af8:	mov	x2, x3
    9afc:	str	x2, [x19, #24]
    9b00:	sub	w2, w2, w1
    9b04:	mov	x0, x19
    9b08:	bl	6ab0 <d_make_name>
    9b0c:	mov	x3, x0
    9b10:	mov	x2, x20
    9b14:	mov	w1, w21
    9b18:	mov	x0, x19
    9b1c:	bl	70 <d_make_comp>
    9b20:	mov	x20, x0
    9b24:	ldr	x1, [x19, #24]
    9b28:	ldrb	w0, [x1]
    9b2c:	cmp	w0, #0x2e
    9b30:	b.ne	9b78 <__asan_cplus_demangle_mangled_name+0x194>  // b.any
    9b34:	ldrb	w0, [x1, #1]
    9b38:	sub	w2, w0, #0x61
    9b3c:	and	w2, w2, #0xff
    9b40:	cmp	w0, #0x5f
    9b44:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    9b48:	b.ls	9a6c <__asan_cplus_demangle_mangled_name+0x88>  // b.plast
    9b4c:	sub	w0, w0, #0x30
    9b50:	and	w0, w0, #0xff
    9b54:	cmp	w0, #0x9
    9b58:	b.hi	9b78 <__asan_cplus_demangle_mangled_name+0x194>  // b.pmore
    9b5c:	mov	x3, x1
    9b60:	ldrb	w0, [x3]
    9b64:	mov	x2, x3
    9b68:	cmp	w0, #0x2e
    9b6c:	b.eq	9ac8 <__asan_cplus_demangle_mangled_name+0xe4>  // b.none
    9b70:	b	9afc <__asan_cplus_demangle_mangled_name+0x118>
    9b74:	mov	x20, #0x0                   	// #0
    9b78:	mov	x0, x20
    9b7c:	ldp	x19, x20, [sp, #16]
    9b80:	ldr	x21, [sp, #32]
    9b84:	ldp	x29, x30, [sp], #48
    9b88:	ret

0000000000009b8c <d_expr_primary>:
    9b8c:	stp	x29, x30, [sp, #-48]!
    9b90:	mov	x29, sp
    9b94:	stp	x19, x20, [sp, #16]
    9b98:	mov	x19, x0
    9b9c:	ldr	x0, [x0, #24]
    9ba0:	ldrb	w1, [x0]
    9ba4:	mov	x20, #0x0                   	// #0
    9ba8:	cmp	w1, #0x4c
    9bac:	b.ne	9bf4 <d_expr_primary+0x68>  // b.any
    9bb0:	add	x1, x0, #0x1
    9bb4:	str	x1, [x19, #24]
    9bb8:	ldrb	w0, [x0, #1]
    9bbc:	cmp	w0, #0x5f
    9bc0:	mov	w1, #0x5a                  	// #90
    9bc4:	ccmp	w0, w1, #0x4, ne  // ne = any
    9bc8:	b.ne	9c04 <d_expr_primary+0x78>  // b.any
    9bcc:	mov	w1, #0x0                   	// #0
    9bd0:	mov	x0, x19
    9bd4:	bl	99e4 <__asan_cplus_demangle_mangled_name>
    9bd8:	mov	x20, x0
    9bdc:	ldr	x0, [x19, #24]
    9be0:	ldrb	w1, [x0]
    9be4:	cmp	w1, #0x45
    9be8:	b.ne	9cd4 <d_expr_primary+0x148>  // b.any
    9bec:	add	x0, x0, #0x1
    9bf0:	str	x0, [x19, #24]
    9bf4:	mov	x0, x20
    9bf8:	ldp	x19, x20, [sp, #16]
    9bfc:	ldp	x29, x30, [sp], #48
    9c00:	ret
    9c04:	mov	x0, x19
    9c08:	bl	6f74 <__asan_cplus_demangle_type>
    9c0c:	mov	x20, x0
    9c10:	cbz	x0, 9bf4 <d_expr_primary+0x68>
    9c14:	str	x21, [sp, #32]
    9c18:	ldr	w0, [x0]
    9c1c:	cmp	w0, #0x27
    9c20:	b.eq	9c90 <d_expr_primary+0x104>  // b.none
    9c24:	ldr	x0, [x19, #24]
    9c28:	ldrb	w1, [x0]
    9c2c:	mov	w21, #0x3d                  	// #61
    9c30:	cmp	w1, #0x6e
    9c34:	b.eq	9cb0 <d_expr_primary+0x124>  // b.none
    9c38:	ldr	x1, [x19, #24]
    9c3c:	ldrb	w4, [x1]
    9c40:	cmp	w4, #0x45
    9c44:	b.eq	9cc0 <d_expr_primary+0x134>  // b.none
    9c48:	add	x3, x1, #0x1
    9c4c:	cbz	w4, 9cc8 <d_expr_primary+0x13c>
    9c50:	mov	x2, x3
    9c54:	str	x3, [x19, #24]
    9c58:	ldrb	w4, [x3], #1
    9c5c:	cmp	w4, #0x45
    9c60:	b.ne	9c4c <d_expr_primary+0xc0>  // b.any
    9c64:	sub	w2, w2, w1
    9c68:	mov	x0, x19
    9c6c:	bl	6ab0 <d_make_name>
    9c70:	mov	x3, x0
    9c74:	mov	x2, x20
    9c78:	mov	w1, w21
    9c7c:	mov	x0, x19
    9c80:	bl	70 <d_make_comp>
    9c84:	mov	x20, x0
    9c88:	ldr	x21, [sp, #32]
    9c8c:	b	9bdc <d_expr_primary+0x50>
    9c90:	ldr	x0, [x20, #8]
    9c94:	ldr	w1, [x0, #28]
    9c98:	cbz	w1, 9c24 <d_expr_primary+0x98>
    9c9c:	ldr	w1, [x19, #72]
    9ca0:	ldr	w0, [x0, #8]
    9ca4:	sub	w0, w1, w0
    9ca8:	str	w0, [x19, #72]
    9cac:	b	9c24 <d_expr_primary+0x98>
    9cb0:	add	x0, x0, #0x1
    9cb4:	str	x0, [x19, #24]
    9cb8:	mov	w21, #0x3e                  	// #62
    9cbc:	b	9c38 <d_expr_primary+0xac>
    9cc0:	mov	x2, x1
    9cc4:	b	9c64 <d_expr_primary+0xd8>
    9cc8:	mov	x20, #0x0                   	// #0
    9ccc:	ldr	x21, [sp, #32]
    9cd0:	b	9bf4 <d_expr_primary+0x68>
    9cd4:	mov	x20, #0x0                   	// #0
    9cd8:	b	9bf4 <d_expr_primary+0x68>

0000000000009cdc <d_template_arg>:
    9cdc:	stp	x29, x30, [sp, #-32]!
    9ce0:	mov	x29, sp
    9ce4:	str	x19, [sp, #16]
    9ce8:	mov	x19, x0
    9cec:	ldr	x0, [x0, #24]
    9cf0:	ldrb	w1, [x0]
    9cf4:	cmp	w1, #0x4c
    9cf8:	b.eq	9d50 <d_template_arg+0x74>  // b.none
    9cfc:	b.hi	9d1c <d_template_arg+0x40>  // b.pmore
    9d00:	sub	w1, w1, #0x49
    9d04:	and	w1, w1, #0xff
    9d08:	cmp	w1, #0x1
    9d0c:	b.hi	9d64 <d_template_arg+0x88>  // b.pmore
    9d10:	mov	x0, x19
    9d14:	bl	9e28 <d_template_args>
    9d18:	b	9d58 <d_template_arg+0x7c>
    9d1c:	cmp	w1, #0x58
    9d20:	b.ne	9d64 <d_template_arg+0x88>  // b.any
    9d24:	add	x0, x0, #0x1
    9d28:	str	x0, [x19, #24]
    9d2c:	mov	x0, x19
    9d30:	bl	81f0 <d_expression>
    9d34:	ldr	x1, [x19, #24]
    9d38:	ldrb	w2, [x1]
    9d3c:	cmp	w2, #0x45
    9d40:	b.ne	9d70 <d_template_arg+0x94>  // b.any
    9d44:	add	x1, x1, #0x1
    9d48:	str	x1, [x19, #24]
    9d4c:	b	9d58 <d_template_arg+0x7c>
    9d50:	mov	x0, x19
    9d54:	bl	9b8c <d_expr_primary>
    9d58:	ldr	x19, [sp, #16]
    9d5c:	ldp	x29, x30, [sp], #32
    9d60:	ret
    9d64:	mov	x0, x19
    9d68:	bl	6f74 <__asan_cplus_demangle_type>
    9d6c:	b	9d58 <d_template_arg+0x7c>
    9d70:	mov	x0, #0x0                   	// #0
    9d74:	b	9d58 <d_template_arg+0x7c>

0000000000009d78 <d_template_args_1>:
    9d78:	stp	x29, x30, [sp, #-64]!
    9d7c:	mov	x29, sp
    9d80:	stp	x19, x20, [sp, #16]
    9d84:	stp	x21, x22, [sp, #32]
    9d88:	mov	x19, x0
    9d8c:	ldr	x22, [x0, #64]
    9d90:	ldr	x0, [x0, #24]
    9d94:	ldrb	w1, [x0]
    9d98:	cmp	w1, #0x45
    9d9c:	b.eq	9e08 <d_template_args_1+0x90>  // b.none
    9da0:	str	xzr, [sp, #56]
    9da4:	add	x20, sp, #0x38
    9da8:	mov	w21, #0x2f                  	// #47
    9dac:	mov	x0, x19
    9db0:	bl	9cdc <d_template_arg>
    9db4:	cbz	x0, 9df8 <d_template_args_1+0x80>
    9db8:	mov	x3, #0x0                   	// #0
    9dbc:	mov	x2, x0
    9dc0:	mov	w1, w21
    9dc4:	mov	x0, x19
    9dc8:	bl	70 <d_make_comp>
    9dcc:	str	x0, [x20]
    9dd0:	cbz	x0, 9df8 <d_template_args_1+0x80>
    9dd4:	add	x20, x0, #0x10
    9dd8:	ldr	x0, [x19, #24]
    9ddc:	ldrb	w1, [x0]
    9de0:	cmp	w1, #0x45
    9de4:	b.ne	9dac <d_template_args_1+0x34>  // b.any
    9de8:	add	x0, x0, #0x1
    9dec:	str	x0, [x19, #24]
    9df0:	str	x22, [x19, #64]
    9df4:	ldr	x0, [sp, #56]
    9df8:	ldp	x19, x20, [sp, #16]
    9dfc:	ldp	x21, x22, [sp, #32]
    9e00:	ldp	x29, x30, [sp], #64
    9e04:	ret
    9e08:	add	x0, x0, #0x1
    9e0c:	str	x0, [x19, #24]
    9e10:	mov	x3, #0x0                   	// #0
    9e14:	mov	x2, #0x0                   	// #0
    9e18:	mov	w1, #0x2f                  	// #47
    9e1c:	mov	x0, x19
    9e20:	bl	70 <d_make_comp>
    9e24:	b	9df8 <d_template_args_1+0x80>

0000000000009e28 <d_template_args>:
    9e28:	ldr	x2, [x0, #24]
    9e2c:	ldrb	w1, [x2]
    9e30:	sub	w1, w1, #0x49
    9e34:	and	w1, w1, #0xff
    9e38:	cmp	w1, #0x1
    9e3c:	b.hi	9e5c <d_template_args+0x34>  // b.pmore
    9e40:	stp	x29, x30, [sp, #-16]!
    9e44:	mov	x29, sp
    9e48:	add	x2, x2, #0x1
    9e4c:	str	x2, [x0, #24]
    9e50:	bl	9d78 <d_template_args_1>
    9e54:	ldp	x29, x30, [sp], #16
    9e58:	ret
    9e5c:	mov	x0, #0x0                   	// #0
    9e60:	ret

0000000000009e64 <d_expression_1>:
    9e64:	stp	x29, x30, [sp, #-48]!
    9e68:	mov	x29, sp
    9e6c:	stp	x19, x20, [sp, #16]
    9e70:	mov	x19, x0
    9e74:	ldr	x0, [x0, #24]
    9e78:	ldrb	w1, [x0]
    9e7c:	cmp	w1, #0x4c
    9e80:	b.eq	9edc <d_expression_1+0x78>  // b.none
    9e84:	cmp	w1, #0x54
    9e88:	b.eq	9eec <d_expression_1+0x88>  // b.none
    9e8c:	cmp	w1, #0x73
    9e90:	b.eq	9efc <d_expression_1+0x98>  // b.none
    9e94:	cmp	w1, #0x66
    9e98:	b.eq	a03c <d_expression_1+0x1d8>  // b.none
    9e9c:	sub	w2, w1, #0x30
    9ea0:	and	w2, w2, #0xff
    9ea4:	cmp	w2, #0x9
    9ea8:	b.hi	a100 <d_expression_1+0x29c>  // b.pmore
    9eac:	mov	x0, x19
    9eb0:	bl	7bb0 <d_unqualified_name>
    9eb4:	mov	x20, x0
    9eb8:	cbz	x0, 9ecc <d_expression_1+0x68>
    9ebc:	ldr	x0, [x19, #24]
    9ec0:	ldrb	w0, [x0]
    9ec4:	cmp	w0, #0x49
    9ec8:	b.eq	a120 <d_expression_1+0x2bc>  // b.none
    9ecc:	mov	x0, x20
    9ed0:	ldp	x19, x20, [sp, #16]
    9ed4:	ldp	x29, x30, [sp], #48
    9ed8:	ret
    9edc:	mov	x0, x19
    9ee0:	bl	9b8c <d_expr_primary>
    9ee4:	mov	x20, x0
    9ee8:	b	9ecc <d_expression_1+0x68>
    9eec:	mov	x0, x19
    9ef0:	bl	558 <d_template_param>
    9ef4:	mov	x20, x0
    9ef8:	b	9ecc <d_expression_1+0x68>
    9efc:	ldrb	w2, [x0, #1]
    9f00:	cmp	w2, #0x72
    9f04:	b.eq	9f80 <d_expression_1+0x11c>  // b.none
    9f08:	cmp	w2, #0x70
    9f0c:	b.eq	a010 <d_expression_1+0x1ac>  // b.none
    9f10:	cmp	w1, #0x69
    9f14:	mov	w2, #0x74                  	// #116
    9f18:	ccmp	w1, w2, #0x4, ne  // ne = any
    9f1c:	b.ne	a048 <d_expression_1+0x1e4>  // b.any
    9f20:	ldrb	w2, [x0, #1]
    9f24:	cmp	w2, #0x6c
    9f28:	b.ne	a048 <d_expression_1+0x1e4>  // b.any
    9f2c:	stp	x21, x22, [sp, #32]
    9f30:	add	x0, x0, #0x2
    9f34:	str	x0, [x19, #24]
    9f38:	mov	x21, #0x0                   	// #0
    9f3c:	cmp	w1, #0x74
    9f40:	b.eq	a144 <d_expression_1+0x2e0>  // b.none
    9f44:	ldr	x0, [x19, #24]
    9f48:	ldrb	w0, [x0, #1]
    9f4c:	mov	x20, #0x0                   	// #0
    9f50:	cbz	w0, a618 <d_expression_1+0x7b4>
    9f54:	mov	w1, #0x45                  	// #69
    9f58:	mov	x0, x19
    9f5c:	bl	897c <d_exprlist>
    9f60:	mov	x3, x0
    9f64:	mov	x2, x21
    9f68:	mov	w1, #0x31                  	// #49
    9f6c:	mov	x0, x19
    9f70:	bl	70 <d_make_comp>
    9f74:	mov	x20, x0
    9f78:	ldp	x21, x22, [sp, #32]
    9f7c:	b	9ecc <d_expression_1+0x68>
    9f80:	stp	x21, x22, [sp, #32]
    9f84:	add	x0, x0, #0x2
    9f88:	str	x0, [x19, #24]
    9f8c:	mov	x0, x19
    9f90:	bl	6f74 <__asan_cplus_demangle_type>
    9f94:	mov	x20, x0
    9f98:	mov	x0, x19
    9f9c:	bl	7bb0 <d_unqualified_name>
    9fa0:	mov	x21, x0
    9fa4:	ldr	x0, [x19, #24]
    9fa8:	ldrb	w0, [x0]
    9fac:	cmp	w0, #0x49
    9fb0:	b.eq	9fd4 <d_expression_1+0x170>  // b.none
    9fb4:	mov	x3, x21
    9fb8:	mov	x2, x20
    9fbc:	mov	w1, #0x1                   	// #1
    9fc0:	mov	x0, x19
    9fc4:	bl	70 <d_make_comp>
    9fc8:	mov	x20, x0
    9fcc:	ldp	x21, x22, [sp, #32]
    9fd0:	b	9ecc <d_expression_1+0x68>
    9fd4:	mov	x0, x19
    9fd8:	bl	9e28 <d_template_args>
    9fdc:	mov	x3, x0
    9fe0:	mov	x2, x21
    9fe4:	mov	w1, #0x4                   	// #4
    9fe8:	mov	x0, x19
    9fec:	bl	70 <d_make_comp>
    9ff0:	mov	x3, x0
    9ff4:	mov	x2, x20
    9ff8:	mov	w1, #0x1                   	// #1
    9ffc:	mov	x0, x19
    a000:	bl	70 <d_make_comp>
    a004:	mov	x20, x0
    a008:	ldp	x21, x22, [sp, #32]
    a00c:	b	9ecc <d_expression_1+0x68>
    a010:	add	x0, x0, #0x2
    a014:	str	x0, [x19, #24]
    a018:	mov	x0, x19
    a01c:	bl	9e64 <d_expression_1>
    a020:	mov	x3, #0x0                   	// #0
    a024:	mov	x2, x0
    a028:	mov	w1, #0x4b                  	// #75
    a02c:	mov	x0, x19
    a030:	bl	70 <d_make_comp>
    a034:	mov	x20, x0
    a038:	b	9ecc <d_expression_1+0x68>
    a03c:	ldrb	w1, [x0, #1]
    a040:	cmp	w1, #0x70
    a044:	b.eq	a094 <d_expression_1+0x230>  // b.none
    a048:	mov	x0, x19
    a04c:	bl	7a08 <d_operator_name>
    a050:	mov	x20, x0
    a054:	cbz	x0, 9ecc <d_expression_1+0x68>
    a058:	stp	x21, x22, [sp, #32]
    a05c:	ldr	w0, [x0]
    a060:	mov	x21, #0x0                   	// #0
    a064:	cmp	w0, #0x32
    a068:	b.eq	a154 <d_expression_1+0x2f0>  // b.none
    a06c:	ldr	w0, [x20]
    a070:	cmp	w0, #0x33
    a074:	b.eq	a240 <d_expression_1+0x3dc>  // b.none
    a078:	cmp	w0, #0x34
    a07c:	b.eq	a1cc <d_expression_1+0x368>  // b.none
    a080:	cmp	w0, #0x32
    a084:	b.eq	a1ac <d_expression_1+0x348>  // b.none
    a088:	mov	x20, #0x0                   	// #0
    a08c:	ldp	x21, x22, [sp, #32]
    a090:	b	9ecc <d_expression_1+0x68>
    a094:	stp	x21, x22, [sp, #32]
    a098:	add	x1, x0, #0x2
    a09c:	str	x1, [x19, #24]
    a0a0:	ldrb	w1, [x0, #2]
    a0a4:	cmp	w1, #0x54
    a0a8:	b.eq	a0f0 <d_expression_1+0x28c>  // b.none
    a0ac:	mov	x0, x19
    a0b0:	bl	4dc <d_compact_number>
    a0b4:	mvn	x1, x0
    a0b8:	mov	x20, #0x0                   	// #0
    a0bc:	tst	x1, #0x7fffffff
    a0c0:	b.eq	a608 <d_expression_1+0x7a4>  // b.none
    a0c4:	add	w21, w0, #0x1
    a0c8:	mov	x0, x19
    a0cc:	bl	30 <d_make_empty>
    a0d0:	mov	x20, x0
    a0d4:	cbz	x0, a610 <d_expression_1+0x7ac>
    a0d8:	mov	w0, #0x6                   	// #6
    a0dc:	str	w0, [x20]
    a0e0:	sxtw	x0, w21
    a0e4:	str	x0, [x20, #8]
    a0e8:	ldp	x21, x22, [sp, #32]
    a0ec:	b	9ecc <d_expression_1+0x68>
    a0f0:	add	x0, x0, #0x3
    a0f4:	str	x0, [x19, #24]
    a0f8:	mov	w21, #0x0                   	// #0
    a0fc:	b	a0c8 <d_expression_1+0x264>
    a100:	cmp	w1, #0x6f
    a104:	b.ne	9f10 <d_expression_1+0xac>  // b.any
    a108:	ldrb	w1, [x0, #1]
    a10c:	cmp	w1, #0x6e
    a110:	b.ne	a048 <d_expression_1+0x1e4>  // b.any
    a114:	add	x0, x0, #0x2
    a118:	str	x0, [x19, #24]
    a11c:	b	9eac <d_expression_1+0x48>
    a120:	mov	x0, x19
    a124:	bl	9e28 <d_template_args>
    a128:	mov	x3, x0
    a12c:	mov	x2, x20
    a130:	mov	w1, #0x4                   	// #4
    a134:	mov	x0, x19
    a138:	bl	70 <d_make_comp>
    a13c:	mov	x20, x0
    a140:	b	9ecc <d_expression_1+0x68>
    a144:	mov	x0, x19
    a148:	bl	6f74 <__asan_cplus_demangle_type>
    a14c:	mov	x21, x0
    a150:	b	9f44 <d_expression_1+0xe0>
    a154:	ldr	x0, [x20, #8]
    a158:	ldr	x21, [x0]
    a15c:	ldr	w0, [x0, #16]
    a160:	sub	w1, w0, #0x2
    a164:	ldr	w0, [x19, #72]
    a168:	add	w0, w0, w1
    a16c:	str	w0, [x19, #72]
    a170:	adrp	x1, 0 <is_fnqual_component_type>
    a174:	add	x1, x1, #0x0
    a178:	mov	x0, x21
    a17c:	bl	0 <__asan_internal_strcmp>
    a180:	cbnz	w0, a06c <d_expression_1+0x208>
    a184:	mov	x0, x19
    a188:	bl	6f74 <__asan_cplus_demangle_type>
    a18c:	mov	x3, x0
    a190:	mov	x2, x20
    a194:	mov	w1, #0x37                  	// #55
    a198:	mov	x0, x19
    a19c:	bl	70 <d_make_comp>
    a1a0:	mov	x20, x0
    a1a4:	ldp	x21, x22, [sp, #32]
    a1a8:	b	9ecc <d_expression_1+0x68>
    a1ac:	ldr	x1, [x20, #8]
    a1b0:	ldr	w1, [x1, #20]
    a1b4:	cmp	w1, #0x2
    a1b8:	b.eq	a364 <d_expression_1+0x500>  // b.none
    a1bc:	b.gt	a254 <d_expression_1+0x3f0>
    a1c0:	cbz	w1, a2fc <d_expression_1+0x498>
    a1c4:	cmp	w1, #0x1
    a1c8:	b.ne	a248 <d_expression_1+0x3e4>  // b.any
    a1cc:	cbz	x21, a5b8 <d_expression_1+0x754>
    a1d0:	ldrb	w0, [x21]
    a1d4:	cmp	w0, #0x70
    a1d8:	mov	w1, #0x6d                  	// #109
    a1dc:	ccmp	w0, w1, #0x4, ne  // ne = any
    a1e0:	b.ne	a1f0 <d_expression_1+0x38c>  // b.any
    a1e4:	ldrb	w1, [x21, #1]
    a1e8:	cmp	w1, w0
    a1ec:	b.eq	a31c <d_expression_1+0x4b8>  // b.none
    a1f0:	ldr	w0, [x20]
    a1f4:	mov	w22, #0x0                   	// #0
    a1f8:	cmp	w0, #0x34
    a1fc:	b.eq	a5dc <d_expression_1+0x778>  // b.none
    a200:	adrp	x1, 0 <is_fnqual_component_type>
    a204:	add	x1, x1, #0x0
    a208:	mov	x0, x21
    a20c:	bl	0 <__asan_internal_strcmp>
    a210:	cbz	w0, a33c <d_expression_1+0x4d8>
    a214:	mov	x0, x19
    a218:	bl	9e64 <d_expression_1>
    a21c:	mov	x3, x0
    a220:	cbnz	w22, a34c <d_expression_1+0x4e8>
    a224:	mov	x2, x20
    a228:	mov	w1, #0x37                  	// #55
    a22c:	mov	x0, x19
    a230:	bl	70 <d_make_comp>
    a234:	mov	x20, x0
    a238:	ldp	x21, x22, [sp, #32]
    a23c:	b	9ecc <d_expression_1+0x68>
    a240:	ldr	w1, [x20, #8]
    a244:	b	a1b4 <d_expression_1+0x350>
    a248:	mov	x20, #0x0                   	// #0
    a24c:	ldp	x21, x22, [sp, #32]
    a250:	b	9ecc <d_expression_1+0x68>
    a254:	cmp	w1, #0x3
    a258:	b.ne	a2f0 <d_expression_1+0x48c>  // b.any
    a25c:	cbz	x21, a57c <d_expression_1+0x718>
    a260:	adrp	x1, 0 <is_fnqual_component_type>
    a264:	add	x1, x1, #0x0
    a268:	mov	x0, x21
    a26c:	bl	0 <__asan_internal_strcmp>
    a270:	cbz	w0, a47c <d_expression_1+0x618>
    a274:	ldrb	w0, [x21]
    a278:	cmp	w0, #0x66
    a27c:	b.eq	a4e8 <d_expression_1+0x684>  // b.none
    a280:	cmp	w0, #0x6e
    a284:	b.ne	a594 <d_expression_1+0x730>  // b.any
    a288:	ldrb	w0, [x21, #1]
    a28c:	cmp	w0, #0x77
    a290:	mov	w1, #0x61                  	// #97
    a294:	ccmp	w0, w1, #0x4, ne  // ne = any
    a298:	b.ne	a5a0 <d_expression_1+0x73c>  // b.any
    a29c:	mov	w1, #0x5f                  	// #95
    a2a0:	mov	x0, x19
    a2a4:	bl	897c <d_exprlist>
    a2a8:	mov	x21, x0
    a2ac:	mov	x0, x19
    a2b0:	bl	6f74 <__asan_cplus_demangle_type>
    a2b4:	mov	x22, x0
    a2b8:	ldr	x0, [x19, #24]
    a2bc:	ldrb	w1, [x0]
    a2c0:	cmp	w1, #0x45
    a2c4:	b.eq	a51c <d_expression_1+0x6b8>  // b.none
    a2c8:	cmp	w1, #0x70
    a2cc:	b.eq	a52c <d_expression_1+0x6c8>  // b.none
    a2d0:	cmp	w1, #0x69
    a2d4:	b.ne	a5ac <d_expression_1+0x748>  // b.any
    a2d8:	ldrb	w0, [x0, #1]
    a2dc:	cmp	w0, #0x6c
    a2e0:	b.eq	a560 <d_expression_1+0x6fc>  // b.none
    a2e4:	mov	x20, #0x0                   	// #0
    a2e8:	ldp	x21, x22, [sp, #32]
    a2ec:	b	9ecc <d_expression_1+0x68>
    a2f0:	mov	x20, #0x0                   	// #0
    a2f4:	ldp	x21, x22, [sp, #32]
    a2f8:	b	9ecc <d_expression_1+0x68>
    a2fc:	mov	x3, #0x0                   	// #0
    a300:	mov	x2, x20
    a304:	mov	w1, #0x36                  	// #54
    a308:	mov	x0, x19
    a30c:	bl	70 <d_make_comp>
    a310:	mov	x20, x0
    a314:	ldp	x21, x22, [sp, #32]
    a318:	b	9ecc <d_expression_1+0x68>
    a31c:	ldr	x0, [x19, #24]
    a320:	ldrb	w1, [x0]
    a324:	mov	w22, #0x1                   	// #1
    a328:	cmp	w1, #0x5f
    a32c:	b.ne	a200 <d_expression_1+0x39c>  // b.any
    a330:	add	x0, x0, #0x1
    a334:	str	x0, [x19, #24]
    a338:	b	a1f0 <d_expression_1+0x38c>
    a33c:	mov	x0, x19
    a340:	bl	9d78 <d_template_args_1>
    a344:	mov	x3, x0
    a348:	b	a220 <d_expression_1+0x3bc>
    a34c:	mov	x2, x3
    a350:	mov	w1, #0x39                  	// #57
    a354:	mov	x0, x19
    a358:	bl	70 <d_make_comp>
    a35c:	mov	x3, x0
    a360:	b	a224 <d_expression_1+0x3c0>
    a364:	cbz	x21, a570 <d_expression_1+0x70c>
    a368:	mov	x0, x20
    a36c:	bl	5c4 <op_is_new_cast>
    a370:	cbnz	w0, a3e4 <d_expression_1+0x580>
    a374:	ldrb	w0, [x21]
    a378:	cmp	w0, #0x66
    a37c:	b.eq	a3f4 <d_expression_1+0x590>  // b.none
    a380:	mov	x0, x19
    a384:	bl	9e64 <d_expression_1>
    a388:	mov	x22, x0
    a38c:	adrp	x1, 0 <is_fnqual_component_type>
    a390:	add	x1, x1, #0x0
    a394:	mov	x0, x21
    a398:	bl	0 <__asan_internal_strcmp>
    a39c:	cbnz	w0, a404 <d_expression_1+0x5a0>
    a3a0:	mov	w1, #0x45                  	// #69
    a3a4:	mov	x0, x19
    a3a8:	bl	897c <d_exprlist>
    a3ac:	mov	x21, x0
    a3b0:	mov	x3, x21
    a3b4:	mov	x2, x22
    a3b8:	mov	w1, #0x39                  	// #57
    a3bc:	mov	x0, x19
    a3c0:	bl	70 <d_make_comp>
    a3c4:	mov	x3, x0
    a3c8:	mov	x2, x20
    a3cc:	mov	w1, #0x38                  	// #56
    a3d0:	mov	x0, x19
    a3d4:	bl	70 <d_make_comp>
    a3d8:	mov	x20, x0
    a3dc:	ldp	x21, x22, [sp, #32]
    a3e0:	b	9ecc <d_expression_1+0x68>
    a3e4:	mov	x0, x19
    a3e8:	bl	6f74 <__asan_cplus_demangle_type>
    a3ec:	mov	x22, x0
    a3f0:	b	a38c <d_expression_1+0x528>
    a3f4:	mov	x0, x19
    a3f8:	bl	7a08 <d_operator_name>
    a3fc:	mov	x22, x0
    a400:	b	a38c <d_expression_1+0x528>
    a404:	adrp	x1, 0 <is_fnqual_component_type>
    a408:	add	x1, x1, #0x0
    a40c:	mov	x0, x21
    a410:	bl	0 <__asan_internal_strcmp>
    a414:	cbz	w0, a42c <d_expression_1+0x5c8>
    a418:	adrp	x1, 0 <is_fnqual_component_type>
    a41c:	add	x1, x1, #0x0
    a420:	mov	x0, x21
    a424:	bl	0 <__asan_internal_strcmp>
    a428:	cbnz	w0, a46c <d_expression_1+0x608>
    a42c:	mov	x0, x19
    a430:	bl	7bb0 <d_unqualified_name>
    a434:	mov	x21, x0
    a438:	ldr	x0, [x19, #24]
    a43c:	ldrb	w0, [x0]
    a440:	cmp	w0, #0x49
    a444:	b.ne	a3b0 <d_expression_1+0x54c>  // b.any
    a448:	mov	x0, x19
    a44c:	bl	9e28 <d_template_args>
    a450:	mov	x3, x0
    a454:	mov	x2, x21
    a458:	mov	w1, #0x4                   	// #4
    a45c:	mov	x0, x19
    a460:	bl	70 <d_make_comp>
    a464:	mov	x21, x0
    a468:	b	a3b0 <d_expression_1+0x54c>
    a46c:	mov	x0, x19
    a470:	bl	9e64 <d_expression_1>
    a474:	mov	x21, x0
    a478:	b	a3b0 <d_expression_1+0x54c>
    a47c:	mov	x0, x19
    a480:	bl	9e64 <d_expression_1>
    a484:	mov	x21, x0
    a488:	mov	x0, x19
    a48c:	bl	9e64 <d_expression_1>
    a490:	mov	x22, x0
    a494:	mov	x0, x19
    a498:	bl	9e64 <d_expression_1>
    a49c:	mov	x3, x0
    a4a0:	cbz	x0, a588 <d_expression_1+0x724>
    a4a4:	mov	x2, x22
    a4a8:	mov	w1, #0x3c                  	// #60
    a4ac:	mov	x0, x19
    a4b0:	bl	70 <d_make_comp>
    a4b4:	mov	x3, x0
    a4b8:	mov	x2, x21
    a4bc:	mov	w1, #0x3b                  	// #59
    a4c0:	mov	x0, x19
    a4c4:	bl	70 <d_make_comp>
    a4c8:	mov	x3, x0
    a4cc:	mov	x2, x20
    a4d0:	mov	w1, #0x3a                  	// #58
    a4d4:	mov	x0, x19
    a4d8:	bl	70 <d_make_comp>
    a4dc:	mov	x20, x0
    a4e0:	ldp	x21, x22, [sp, #32]
    a4e4:	b	9ecc <d_expression_1+0x68>
    a4e8:	mov	x0, x19
    a4ec:	bl	7a08 <d_operator_name>
    a4f0:	mov	x21, x0
    a4f4:	mov	x0, x19
    a4f8:	bl	9e64 <d_expression_1>
    a4fc:	mov	x22, x0
    a500:	mov	x0, x19
    a504:	bl	9e64 <d_expression_1>
    a508:	mov	x3, x0
    a50c:	cbnz	x0, a4a4 <d_expression_1+0x640>
    a510:	mov	x20, x0
    a514:	ldp	x21, x22, [sp, #32]
    a518:	b	9ecc <d_expression_1+0x68>
    a51c:	add	x0, x0, #0x1
    a520:	str	x0, [x19, #24]
    a524:	mov	x3, #0x0                   	// #0
    a528:	b	a4a4 <d_expression_1+0x640>
    a52c:	ldrb	w1, [x0, #1]
    a530:	cmp	w1, #0x69
    a534:	b.eq	a544 <d_expression_1+0x6e0>  // b.none
    a538:	mov	x20, #0x0                   	// #0
    a53c:	ldp	x21, x22, [sp, #32]
    a540:	b	9ecc <d_expression_1+0x68>
    a544:	add	x0, x0, #0x2
    a548:	str	x0, [x19, #24]
    a54c:	mov	w1, #0x45                  	// #69
    a550:	mov	x0, x19
    a554:	bl	897c <d_exprlist>
    a558:	mov	x3, x0
    a55c:	b	a4a4 <d_expression_1+0x640>
    a560:	mov	x0, x19
    a564:	bl	9e64 <d_expression_1>
    a568:	mov	x3, x0
    a56c:	b	a4a4 <d_expression_1+0x640>
    a570:	mov	x20, x21
    a574:	ldp	x21, x22, [sp, #32]
    a578:	b	9ecc <d_expression_1+0x68>
    a57c:	mov	x20, x21
    a580:	ldp	x21, x22, [sp, #32]
    a584:	b	9ecc <d_expression_1+0x68>
    a588:	mov	x20, x0
    a58c:	ldp	x21, x22, [sp, #32]
    a590:	b	9ecc <d_expression_1+0x68>
    a594:	mov	x20, #0x0                   	// #0
    a598:	ldp	x21, x22, [sp, #32]
    a59c:	b	9ecc <d_expression_1+0x68>
    a5a0:	mov	x20, #0x0                   	// #0
    a5a4:	ldp	x21, x22, [sp, #32]
    a5a8:	b	9ecc <d_expression_1+0x68>
    a5ac:	mov	x20, #0x0                   	// #0
    a5b0:	ldp	x21, x22, [sp, #32]
    a5b4:	b	9ecc <d_expression_1+0x68>
    a5b8:	mov	w22, #0x0                   	// #0
    a5bc:	cmp	w0, #0x34
    a5c0:	b.ne	a214 <d_expression_1+0x3b0>  // b.any
    a5c4:	ldr	x0, [x19, #24]
    a5c8:	ldrb	w1, [x0]
    a5cc:	cmp	w1, #0x5f
    a5d0:	b.eq	a5ec <d_expression_1+0x788>  // b.none
    a5d4:	mov	w22, #0x0                   	// #0
    a5d8:	b	a214 <d_expression_1+0x3b0>
    a5dc:	ldr	x0, [x19, #24]
    a5e0:	ldrb	w1, [x0]
    a5e4:	cmp	w1, #0x5f
    a5e8:	b.ne	a200 <d_expression_1+0x39c>  // b.any
    a5ec:	add	x0, x0, #0x1
    a5f0:	str	x0, [x19, #24]
    a5f4:	mov	w1, #0x45                  	// #69
    a5f8:	mov	x0, x19
    a5fc:	bl	897c <d_exprlist>
    a600:	mov	x3, x0
    a604:	b	a224 <d_expression_1+0x3c0>
    a608:	ldp	x21, x22, [sp, #32]
    a60c:	b	9ecc <d_expression_1+0x68>
    a610:	ldp	x21, x22, [sp, #32]
    a614:	b	9ecc <d_expression_1+0x68>
    a618:	ldp	x21, x22, [sp, #32]
    a61c:	b	9ecc <d_expression_1+0x68>

000000000000a620 <__asan_cplus_demangle_print_callback>:
    a620:	stp	x29, x30, [sp, #-432]!
    a624:	mov	x29, sp
    a628:	stp	x19, x20, [sp, #16]
    a62c:	stp	x21, x22, [sp, #32]
    a630:	mov	w20, w0
    a634:	mov	x21, x1
    a638:	str	xzr, [x29, #312]
    a63c:	strb	wzr, [x29, #320]
    a640:	str	xzr, [x29, #344]
    a644:	str	xzr, [x29, #352]
    a648:	str	wzr, [x29, #372]
    a64c:	str	xzr, [x29, #376]
    a650:	str	x2, [x29, #328]
    a654:	str	x3, [x29, #336]
    a658:	str	wzr, [x29, #360]
    a65c:	str	wzr, [x29, #364]
    a660:	str	wzr, [x29, #368]
    a664:	str	xzr, [x29, #384]
    a668:	str	xzr, [x29, #392]
    a66c:	str	wzr, [x29, #400]
    a670:	str	wzr, [x29, #404]
    a674:	str	xzr, [x29, #408]
    a678:	str	wzr, [x29, #416]
    a67c:	str	wzr, [x29, #420]
    a680:	add	x0, x29, #0x38
    a684:	bl	6e4 <d_count_templates_scopes>
    a688:	ldr	w0, [x29, #364]
    a68c:	cmp	w0, #0x7ff
    a690:	b.gt	a698 <__asan_cplus_demangle_print_callback+0x78>
    a694:	str	wzr, [x29, #364]
    a698:	ldr	w3, [x29, #404]
    a69c:	ldr	w2, [x29, #420]
    a6a0:	mul	w2, w3, w2
    a6a4:	str	w2, [x29, #420]
    a6a8:	str	xzr, [x29, #424]
    a6ac:	mov	x22, sp
    a6b0:	mov	w0, #0x1                   	// #1
    a6b4:	cmp	w3, #0x0
    a6b8:	csel	w3, w3, w0, gt
    a6bc:	sub	sp, sp, w3, sxtw #4
    a6c0:	mov	x1, sp
    a6c4:	cmp	w2, #0x0
    a6c8:	csel	w2, w2, w0, gt
    a6cc:	sub	sp, sp, w2, sxtw #4
    a6d0:	str	x1, [x29, #392]
    a6d4:	mov	x0, sp
    a6d8:	str	x0, [x29, #408]
    a6dc:	add	x19, x29, #0x38
    a6e0:	mov	x2, x21
    a6e4:	mov	w1, w20
    a6e8:	mov	x0, x19
    a6ec:	bl	5050 <d_print_comp>
    a6f0:	mov	sp, x22
    a6f4:	ldr	x1, [x29, #312]
    a6f8:	strb	wzr, [x19, x1]
    a6fc:	ldr	x2, [x29, #336]
    a700:	mov	x0, x19
    a704:	ldr	x3, [x29, #328]
    a708:	blr	x3
    a70c:	ldr	w0, [x29, #360]
    a710:	cmp	w0, #0x0
    a714:	cset	w0, eq  // eq = none
    a718:	mov	sp, x29
    a71c:	ldp	x19, x20, [sp, #16]
    a720:	ldp	x21, x22, [sp, #32]
    a724:	ldp	x29, x30, [sp], #432
    a728:	ret

000000000000a72c <__asan_cplus_demangle_print>:
    a72c:	stp	x29, x30, [sp, #-80]!
    a730:	mov	x29, sp
    a734:	stp	x19, x20, [sp, #16]
    a738:	stp	x21, x22, [sp, #32]
    a73c:	mov	w19, w0
    a740:	mov	x20, x1
    a744:	mov	x22, x3
    a748:	str	xzr, [sp, #48]
    a74c:	str	xzr, [sp, #56]
    a750:	str	xzr, [sp, #64]
    a754:	str	wzr, [sp, #72]
    a758:	cbnz	w2, a7a0 <__asan_cplus_demangle_print+0x74>
    a75c:	add	x3, sp, #0x30
    a760:	adrp	x2, 0 <is_fnqual_component_type>
    a764:	add	x2, x2, #0x0
    a768:	mov	x1, x20
    a76c:	mov	w0, w19
    a770:	bl	a620 <__asan_cplus_demangle_print_callback>
    a774:	cbz	w0, a7e8 <__asan_cplus_demangle_print+0xbc>
    a778:	ldr	w0, [sp, #72]
    a77c:	cmp	w0, #0x0
    a780:	ldr	x0, [sp, #64]
    a784:	csinc	x0, x0, xzr, eq  // eq = none
    a788:	str	x0, [x22]
    a78c:	ldr	x0, [sp, #48]
    a790:	ldp	x19, x20, [sp, #16]
    a794:	ldp	x21, x22, [sp, #32]
    a798:	ldp	x29, x30, [sp], #80
    a79c:	ret
    a7a0:	sxtw	x0, w2
    a7a4:	cmp	x0, #0x2
    a7a8:	b.ls	a7d4 <__asan_cplus_demangle_print+0xa8>  // b.plast
    a7ac:	mov	x21, #0x2                   	// #2
    a7b0:	lsl	x21, x21, #1
    a7b4:	cmp	x0, x21
    a7b8:	b.hi	a7b0 <__asan_cplus_demangle_print+0x84>  // b.pmore
    a7bc:	mov	x0, x21
    a7c0:	bl	0 <malloc>
    a7c4:	cbz	x0, a7dc <__asan_cplus_demangle_print+0xb0>
    a7c8:	str	x0, [sp, #48]
    a7cc:	str	x21, [sp, #64]
    a7d0:	b	a75c <__asan_cplus_demangle_print+0x30>
    a7d4:	mov	x21, #0x2                   	// #2
    a7d8:	b	a7bc <__asan_cplus_demangle_print+0x90>
    a7dc:	mov	w0, #0x1                   	// #1
    a7e0:	str	w0, [sp, #72]
    a7e4:	b	a75c <__asan_cplus_demangle_print+0x30>
    a7e8:	ldr	x0, [sp, #48]
    a7ec:	bl	0 <free>
    a7f0:	str	xzr, [x22]
    a7f4:	mov	x0, #0x0                   	// #0
    a7f8:	b	a790 <__asan_cplus_demangle_print+0x64>

000000000000a7fc <__asan_cplus_demangle_init_info>:
    a7fc:	str	x0, [x3]
    a800:	add	x4, x0, x2
    a804:	str	x4, [x3, #8]
    a808:	str	w1, [x3, #16]
    a80c:	str	x0, [x3, #24]
    a810:	lsl	w0, w2, #1
    a814:	str	w0, [x3, #44]
    a818:	str	wzr, [x3, #40]
    a81c:	str	w2, [x3, #60]
    a820:	str	wzr, [x3, #56]
    a824:	str	xzr, [x3, #64]
    a828:	str	wzr, [x3, #72]
    a82c:	str	wzr, [x3, #76]
    a830:	str	wzr, [x3, #80]
    a834:	str	wzr, [x3, #84]
    a838:	ret

000000000000a83c <d_demangle_callback>:
    a83c:	stp	x29, x30, [sp, #-160]!
    a840:	mov	x29, sp
    a844:	stp	x19, x20, [sp, #16]
    a848:	stp	x21, x22, [sp, #32]
    a84c:	stp	x23, x24, [sp, #48]
    a850:	mov	x19, x0
    a854:	mov	w20, w1
    a858:	mov	x22, x2
    a85c:	mov	x23, x3
    a860:	ldrb	w0, [x0]
    a864:	cmp	w0, #0x5f
    a868:	b.ne	a878 <d_demangle_callback+0x3c>  // b.any
    a86c:	ldrb	w0, [x19, #1]
    a870:	cmp	w0, #0x5a
    a874:	b.eq	a9dc <d_demangle_callback+0x1a0>  // b.none
    a878:	mov	x2, #0x8                   	// #8
    a87c:	adrp	x1, 0 <is_fnqual_component_type>
    a880:	add	x1, x1, #0x0
    a884:	mov	x0, x19
    a888:	bl	0 <__asan_internal_strncmp>
    a88c:	cbnz	w0, a8cc <d_demangle_callback+0x90>
    a890:	ldrb	w0, [x19, #8]
    a894:	cmp	w0, #0x2e
    a898:	mov	w1, #0x5f                  	// #95
    a89c:	ccmp	w0, w1, #0x4, ne  // ne = any
    a8a0:	mov	w1, #0x24                  	// #36
    a8a4:	ccmp	w0, w1, #0x4, ne  // ne = any
    a8a8:	b.ne	a8cc <d_demangle_callback+0x90>  // b.any
    a8ac:	ldrb	w0, [x19, #9]
    a8b0:	cmp	w0, #0x44
    a8b4:	mov	w1, #0x49                  	// #73
    a8b8:	ccmp	w0, w1, #0x4, ne  // ne = any
    a8bc:	b.ne	a8cc <d_demangle_callback+0x90>  // b.any
    a8c0:	ldrb	w1, [x19, #10]
    a8c4:	cmp	w1, #0x5f
    a8c8:	b.eq	a9cc <d_demangle_callback+0x190>  // b.none
    a8cc:	and	w0, w20, #0x10
    a8d0:	mov	w21, #0x0                   	// #0
    a8d4:	tbz	w20, #4, aa28 <d_demangle_callback+0x1ec>
    a8d8:	mov	x0, x19
    a8dc:	bl	0 <__asan_internal_strlen>
    a8e0:	add	x3, x29, #0x48
    a8e4:	mov	x2, x0
    a8e8:	mov	w1, w20
    a8ec:	mov	x0, x19
    a8f0:	bl	a7fc <__asan_cplus_demangle_init_info>
    a8f4:	and	w0, w20, #0x40000
    a8f8:	tbnz	w20, #18, a908 <d_demangle_callback+0xcc>
    a8fc:	ldr	w1, [x29, #116]
    a900:	cmp	w1, #0x800
    a904:	b.hi	aa28 <d_demangle_callback+0x1ec>  // b.pmore
    a908:	mov	x19, sp
    a90c:	ldrsw	x0, [x29, #116]
    a910:	add	x0, x0, x0, lsl #1
    a914:	lsl	x0, x0, #3
    a918:	add	x0, x0, #0xf
    a91c:	and	x0, x0, #0xfffffffffffffff0
    a920:	sub	sp, sp, x0
    a924:	mov	x1, sp
    a928:	ldrsw	x0, [x29, #132]
    a92c:	lsl	x0, x0, #3
    a930:	add	x0, x0, #0xf
    a934:	and	x0, x0, #0xfffffffffffffff0
    a938:	sub	sp, sp, x0
    a93c:	str	x1, [x29, #104]
    a940:	mov	x0, sp
    a944:	str	x0, [x29, #120]
    a948:	cmp	w21, #0x1
    a94c:	b.eq	aa40 <d_demangle_callback+0x204>  // b.none
    a950:	b.ls	a9e4 <d_demangle_callback+0x1a8>  // b.plast
    a954:	ldr	x0, [x29, #96]
    a958:	add	x24, x0, #0xb
    a95c:	str	x24, [x29, #96]
    a960:	cmp	w21, #0x2
    a964:	cset	w1, ne  // ne = any
    a968:	add	w21, w1, #0x44
    a96c:	ldrb	w1, [x0, #11]
    a970:	cmp	w1, #0x5f
    a974:	b.ne	a984 <d_demangle_callback+0x148>  // b.any
    a978:	ldrb	w1, [x0, #12]
    a97c:	cmp	w1, #0x5a
    a980:	b.eq	aa54 <d_demangle_callback+0x218>  // b.none
    a984:	mov	x0, x24
    a988:	bl	0 <__asan_internal_strlen>
    a98c:	mov	w2, w0
    a990:	mov	x1, x24
    a994:	add	x0, x29, #0x48
    a998:	bl	6ab0 <d_make_name>
    a99c:	mov	x2, x0
    a9a0:	mov	x3, #0x0                   	// #0
    a9a4:	mov	w1, w21
    a9a8:	add	x0, x29, #0x48
    a9ac:	bl	70 <d_make_comp>
    a9b0:	mov	x21, x0
    a9b4:	ldr	x0, [x29, #96]
    a9b8:	bl	0 <__asan_internal_strlen>
    a9bc:	ldr	x1, [x29, #96]
    a9c0:	add	x1, x1, x0
    a9c4:	str	x1, [x29, #96]
    a9c8:	b	a9f4 <d_demangle_callback+0x1b8>
    a9cc:	cmp	w0, #0x49
    a9d0:	cset	w21, ne  // ne = any
    a9d4:	add	w21, w21, #0x2
    a9d8:	b	a8d8 <d_demangle_callback+0x9c>
    a9dc:	mov	w21, #0x1                   	// #1
    a9e0:	b	a8d8 <d_demangle_callback+0x9c>
    a9e4:	cbnz	w21, aa70 <d_demangle_callback+0x234>
    a9e8:	add	x0, x29, #0x48
    a9ec:	bl	6f74 <__asan_cplus_demangle_type>
    a9f0:	mov	x21, x0
    a9f4:	tbz	w20, #0, aa08 <d_demangle_callback+0x1cc>
    a9f8:	ldr	x0, [x29, #96]
    a9fc:	ldrb	w1, [x0]
    aa00:	mov	w0, #0x0                   	// #0
    aa04:	cbnz	w1, aa24 <d_demangle_callback+0x1e8>
    aa08:	mov	w0, #0x0                   	// #0
    aa0c:	cbz	x21, aa24 <d_demangle_callback+0x1e8>
    aa10:	mov	x3, x23
    aa14:	mov	x2, x22
    aa18:	mov	x1, x21
    aa1c:	mov	w0, w20
    aa20:	bl	a620 <__asan_cplus_demangle_print_callback>
    aa24:	mov	sp, x19
    aa28:	mov	sp, x29
    aa2c:	ldp	x19, x20, [sp, #16]
    aa30:	ldp	x21, x22, [sp, #32]
    aa34:	ldp	x23, x24, [sp, #48]
    aa38:	ldp	x29, x30, [sp], #160
    aa3c:	ret
    aa40:	mov	w1, #0x1                   	// #1
    aa44:	add	x0, x29, #0x48
    aa48:	bl	99e4 <__asan_cplus_demangle_mangled_name>
    aa4c:	mov	x21, x0
    aa50:	b	a9f4 <d_demangle_callback+0x1b8>
    aa54:	add	x0, x0, #0xd
    aa58:	str	x0, [x29, #96]
    aa5c:	mov	w1, #0x0                   	// #0
    aa60:	add	x0, x29, #0x48
    aa64:	bl	9204 <d_encoding>
    aa68:	mov	x2, x0
    aa6c:	b	a9a0 <d_demangle_callback+0x164>
    aa70:	bl	0 <abort>

000000000000aa74 <d_demangle>:
    aa74:	stp	x29, x30, [sp, #-64]!
    aa78:	mov	x29, sp
    aa7c:	str	x19, [sp, #16]
    aa80:	mov	x19, x2
    aa84:	str	xzr, [sp, #32]
    aa88:	str	xzr, [sp, #40]
    aa8c:	str	xzr, [sp, #48]
    aa90:	str	wzr, [sp, #56]
    aa94:	add	x3, sp, #0x20
    aa98:	adrp	x2, 0 <is_fnqual_component_type>
    aa9c:	add	x2, x2, #0x0
    aaa0:	bl	a83c <d_demangle_callback>
    aaa4:	cbz	w0, aacc <d_demangle+0x58>
    aaa8:	ldr	w0, [sp, #56]
    aaac:	cmp	w0, #0x0
    aab0:	ldr	x0, [sp, #48]
    aab4:	csinc	x0, x0, xzr, eq  // eq = none
    aab8:	str	x0, [x19]
    aabc:	ldr	x0, [sp, #32]
    aac0:	ldr	x19, [sp, #16]
    aac4:	ldp	x29, x30, [sp], #64
    aac8:	ret
    aacc:	ldr	x0, [sp, #32]
    aad0:	bl	0 <free>
    aad4:	str	xzr, [x19]
    aad8:	mov	x0, #0x0                   	// #0
    aadc:	b	aac0 <d_demangle+0x4c>

000000000000aae0 <is_ctor_or_dtor>:
    aae0:	stp	x29, x30, [sp, #-144]!
    aae4:	mov	x29, sp
    aae8:	stp	x19, x20, [sp, #16]
    aaec:	stp	x21, x22, [sp, #32]
    aaf0:	mov	x22, x0
    aaf4:	mov	x20, x1
    aaf8:	mov	x19, x2
    aafc:	str	wzr, [x1]
    ab00:	str	wzr, [x2]
    ab04:	bl	0 <__asan_internal_strlen>
    ab08:	add	x21, x29, #0x38
    ab0c:	mov	x3, x21
    ab10:	mov	x2, x0
    ab14:	mov	w1, #0x4000                	// #16384
    ab18:	mov	x0, x22
    ab1c:	bl	a7fc <__asan_cplus_demangle_init_info>
    ab20:	ldrsw	x0, [x29, #100]
    ab24:	add	x0, x0, x0, lsl #1
    ab28:	lsl	x0, x0, #3
    ab2c:	add	x0, x0, #0xf
    ab30:	and	x0, x0, #0xfffffffffffffff0
    ab34:	sub	sp, sp, x0
    ab38:	mov	x1, sp
    ab3c:	ldrsw	x0, [x29, #116]
    ab40:	lsl	x0, x0, #3
    ab44:	add	x0, x0, #0xf
    ab48:	and	x0, x0, #0xfffffffffffffff0
    ab4c:	sub	sp, sp, x0
    ab50:	str	x1, [x29, #88]
    ab54:	mov	x0, sp
    ab58:	str	x0, [x29, #104]
    ab5c:	mov	w1, #0x1                   	// #1
    ab60:	mov	x0, x21
    ab64:	bl	99e4 <__asan_cplus_demangle_mangled_name>
    ab68:	cbz	x0, abf0 <is_ctor_or_dtor+0x110>
    ab6c:	ldr	w3, [x0]
    ab70:	cmp	w3, #0x7
    ab74:	b.eq	abe0 <is_ctor_or_dtor+0x100>  // b.none
    ab78:	b.hi	abb8 <is_ctor_or_dtor+0xd8>  // b.pmore
    ab7c:	cmp	w3, #0x2
    ab80:	b.ls	ab9c <is_ctor_or_dtor+0xbc>  // b.plast
    ab84:	sub	w3, w3, #0x3
    ab88:	cmp	w3, #0x1
    ab8c:	b.hi	abf8 <is_ctor_or_dtor+0x118>  // b.pmore
    ab90:	ldr	x0, [x0, #8]
    ab94:	cbnz	x0, ab6c <is_ctor_or_dtor+0x8c>
    ab98:	b	aba4 <is_ctor_or_dtor+0xc4>
    ab9c:	cbnz	w3, abd8 <is_ctor_or_dtor+0xf8>
    aba0:	mov	w0, #0x0                   	// #0
    aba4:	mov	sp, x29
    aba8:	ldp	x19, x20, [sp, #16]
    abac:	ldp	x21, x22, [sp, #32]
    abb0:	ldp	x29, x30, [sp], #144
    abb4:	ret
    abb8:	cmp	w3, #0x8
    abbc:	b.ne	abd0 <is_ctor_or_dtor+0xf0>  // b.any
    abc0:	ldr	w0, [x0, #8]
    abc4:	str	w0, [x19]
    abc8:	mov	w0, #0x1                   	// #1
    abcc:	b	aba4 <is_ctor_or_dtor+0xc4>
    abd0:	mov	w0, #0x0                   	// #0
    abd4:	b	aba4 <is_ctor_or_dtor+0xc4>
    abd8:	ldr	x0, [x0, #16]
    abdc:	b	ab94 <is_ctor_or_dtor+0xb4>
    abe0:	ldr	w0, [x0, #8]
    abe4:	str	w0, [x20]
    abe8:	mov	w0, #0x1                   	// #1
    abec:	b	aba4 <is_ctor_or_dtor+0xc4>
    abf0:	mov	w0, #0x0                   	// #0
    abf4:	b	aba4 <is_ctor_or_dtor+0xc4>
    abf8:	mov	w0, #0x0                   	// #0
    abfc:	b	aba4 <is_ctor_or_dtor+0xc4>

000000000000ac00 <__asan_cplus_demangle_v3>:
    ac00:	stp	x29, x30, [sp, #-32]!
    ac04:	mov	x29, sp
    ac08:	add	x2, sp, #0x18
    ac0c:	bl	aa74 <d_demangle>
    ac10:	ldp	x29, x30, [sp], #32
    ac14:	ret

000000000000ac18 <__asan_cplus_demangle_v3_callback>:
    ac18:	stp	x29, x30, [sp, #-16]!
    ac1c:	mov	x29, sp
    ac20:	bl	a83c <d_demangle_callback>
    ac24:	ldp	x29, x30, [sp], #16
    ac28:	ret

000000000000ac2c <__asan_java_demangle_v3>:
    ac2c:	stp	x29, x30, [sp, #-32]!
    ac30:	mov	x29, sp
    ac34:	add	x2, sp, #0x18
    ac38:	mov	w1, #0x25                  	// #37
    ac3c:	bl	aa74 <d_demangle>
    ac40:	ldp	x29, x30, [sp], #32
    ac44:	ret

000000000000ac48 <__asan_java_demangle_v3_callback>:
    ac48:	stp	x29, x30, [sp, #-16]!
    ac4c:	mov	x29, sp
    ac50:	mov	x3, x2
    ac54:	mov	x2, x1
    ac58:	mov	w1, #0x25                  	// #37
    ac5c:	bl	a83c <d_demangle_callback>
    ac60:	ldp	x29, x30, [sp], #16
    ac64:	ret

000000000000ac68 <__asan_is_gnu_v3_mangled_ctor>:
    ac68:	stp	x29, x30, [sp, #-32]!
    ac6c:	mov	x29, sp
    ac70:	add	x2, sp, #0x18
    ac74:	add	x1, sp, #0x1c
    ac78:	bl	aae0 <is_ctor_or_dtor>
    ac7c:	cmp	w0, #0x0
    ac80:	ldr	w0, [sp, #28]
    ac84:	csel	w0, w0, wzr, ne  // ne = any
    ac88:	ldp	x29, x30, [sp], #32
    ac8c:	ret

000000000000ac90 <__asan_is_gnu_v3_mangled_dtor>:
    ac90:	stp	x29, x30, [sp, #-32]!
    ac94:	mov	x29, sp
    ac98:	add	x2, sp, #0x18
    ac9c:	add	x1, sp, #0x1c
    aca0:	bl	aae0 <is_ctor_or_dtor>
    aca4:	cmp	w0, #0x0
    aca8:	ldr	w0, [sp, #24]
    acac:	csel	w0, w0, wzr, ne  // ne = any
    acb0:	ldp	x29, x30, [sp], #32
    acb4:	ret

dwarf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_highest_address>:
       0:	cmp	w1, #0x4
       4:	b.eq	5c <is_highest_address+0x5c>  // b.none
       8:	b.gt	34 <is_highest_address+0x34>
       c:	cmp	w1, #0x1
      10:	b.eq	50 <is_highest_address+0x50>  // b.none
      14:	cmp	w1, #0x2
      18:	b.ne	2c <is_highest_address+0x2c>  // b.any
      1c:	mov	x1, #0xffff                	// #65535
      20:	cmp	x0, x1
      24:	cset	w0, eq  // eq = none
      28:	b	4c <is_highest_address+0x4c>
      2c:	mov	w0, #0x0                   	// #0
      30:	b	4c <is_highest_address+0x4c>
      34:	cmp	w1, #0x8
      38:	b.ne	48 <is_highest_address+0x48>  // b.any
      3c:	cmn	x0, #0x1
      40:	cset	w0, eq  // eq = none
      44:	b	4c <is_highest_address+0x4c>
      48:	mov	w0, #0x0                   	// #0
      4c:	ret
      50:	cmp	x0, #0xff
      54:	cset	w0, eq  // eq = none
      58:	b	4c <is_highest_address+0x4c>
      5c:	mov	x1, #0xffffffff            	// #4294967295
      60:	cmp	x0, x1
      64:	cset	w0, eq  // eq = none
      68:	b	4c <is_highest_address+0x4c>

000000000000006c <find_unit>:
      6c:	mov	x4, #0x0                   	// #0
      70:	b	78 <find_unit+0xc>
      74:	mov	x1, x3
      78:	cmp	x1, x4
      7c:	b.ls	b0 <find_unit+0x44>  // b.plast
      80:	add	x3, x1, x4
      84:	lsr	x3, x3, #1
      88:	add	x7, x0, x3, lsl #3
      8c:	ldr	x5, [x0, x3, lsl #3]
      90:	ldr	x6, [x5, #24]
      94:	cmp	x6, x2
      98:	b.hi	74 <find_unit+0x8>  // b.pmore
      9c:	ldr	x4, [x5, #32]
      a0:	cmp	x4, x2
      a4:	b.hi	b8 <find_unit+0x4c>  // b.pmore
      a8:	add	x4, x3, #0x1
      ac:	b	78 <find_unit+0xc>
      b0:	mov	x0, #0x0                   	// #0
      b4:	b	bc <find_unit+0x50>
      b8:	ldr	x0, [x7]
      bc:	ret

00000000000000c0 <unit_addrs_compare>:
      c0:	mov	x2, x0
      c4:	ldr	x4, [x0]
      c8:	ldr	x3, [x1]
      cc:	mov	w0, #0xffffffff            	// #-1
      d0:	cmp	x4, x3
      d4:	b.cc	118 <unit_addrs_compare+0x58>  // b.lo, b.ul, b.last
      d8:	mov	w0, #0x1                   	// #1
      dc:	b.hi	118 <unit_addrs_compare+0x58>  // b.pmore
      e0:	ldr	x4, [x2, #8]
      e4:	ldr	x3, [x1, #8]
      e8:	cmp	x4, x3
      ec:	b.cc	118 <unit_addrs_compare+0x58>  // b.lo, b.ul, b.last
      f0:	mov	w0, #0xffffffff            	// #-1
      f4:	b.hi	118 <unit_addrs_compare+0x58>  // b.pmore
      f8:	ldr	x0, [x2, #16]
      fc:	ldr	x2, [x0, #56]
     100:	ldr	x0, [x1, #16]
     104:	ldr	x1, [x0, #56]
     108:	mov	w0, #0xffffffff            	// #-1
     10c:	cmp	x2, x1
     110:	b.lt	118 <unit_addrs_compare+0x58>  // b.tstop
     114:	cset	w0, gt
     118:	ret

000000000000011c <line_compare>:
     11c:	mov	x2, x0
     120:	ldr	x4, [x0]
     124:	ldr	x3, [x1]
     128:	mov	w0, #0xffffffff            	// #-1
     12c:	cmp	x4, x3
     130:	b.cc	154 <line_compare+0x38>  // b.lo, b.ul, b.last
     134:	mov	w0, #0x1                   	// #1
     138:	b.hi	154 <line_compare+0x38>  // b.pmore
     13c:	ldr	w2, [x2, #20]
     140:	ldr	w1, [x1, #20]
     144:	mov	w0, #0xffffffff            	// #-1
     148:	cmp	w2, w1
     14c:	b.lt	154 <line_compare+0x38>  // b.tstop
     150:	cset	w0, gt
     154:	ret

0000000000000158 <abbrev_compare>:
     158:	ldr	x2, [x0]
     15c:	ldr	x0, [x1]
     160:	cmp	x2, x0
     164:	b.cc	170 <abbrev_compare+0x18>  // b.lo, b.ul, b.last
     168:	cset	w0, hi  // hi = pmore
     16c:	ret
     170:	mov	w0, #0xffffffff            	// #-1
     174:	b	16c <abbrev_compare+0x14>

0000000000000178 <report_inlined_functions>:
     178:	ldr	x7, [x1, #32]
     17c:	cbz	x7, 218 <report_inlined_functions+0xa0>
     180:	stp	x29, x30, [sp, #-64]!
     184:	mov	x29, sp
     188:	stp	x19, x20, [sp, #16]
     18c:	stp	x21, x22, [sp, #32]
     190:	stp	x23, x24, [sp, #48]
     194:	mov	x19, x0
     198:	mov	x22, x2
     19c:	mov	x23, x3
     1a0:	mov	x20, x4
     1a4:	mov	x21, x5
     1a8:	ldr	x2, [x1, #24]
     1ac:	mov	x4, x7
     1b0:	mov	x3, #0x0                   	// #0
     1b4:	b	1bc <report_inlined_functions+0x44>
     1b8:	mov	x4, x0
     1bc:	cmp	x4, x3
     1c0:	b.ls	200 <report_inlined_functions+0x88>  // b.plast
     1c4:	add	x1, x4, x3
     1c8:	lsr	x0, x1, #1
     1cc:	and	x1, x1, #0xfffffffffffffffe
     1d0:	add	x1, x1, x0
     1d4:	lsl	x6, x1, #3
     1d8:	mov	x5, x6
     1dc:	add	x6, x2, x6
     1e0:	ldr	x1, [x2, x1, lsl #3]
     1e4:	cmp	x1, x19
     1e8:	b.hi	1b8 <report_inlined_functions+0x40>  // b.pmore
     1ec:	ldr	x1, [x6, #8]
     1f0:	cmp	x1, x19
     1f4:	b.hi	220 <report_inlined_functions+0xa8>  // b.pmore
     1f8:	add	x3, x0, #0x1
     1fc:	b	1bc <report_inlined_functions+0x44>
     200:	mov	w0, #0x0                   	// #0
     204:	ldp	x19, x20, [sp, #16]
     208:	ldp	x21, x22, [sp, #32]
     20c:	ldp	x23, x24, [sp, #48]
     210:	ldp	x29, x30, [sp], #64
     214:	ret
     218:	mov	w0, #0x0                   	// #0
     21c:	ret
     220:	asr	x0, x5, #3
     224:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
     228:	movk	x5, #0xaaab
     22c:	mul	x0, x0, x5
     230:	add	x0, x0, #0x1
     234:	mov	x1, x5
     238:	cmp	x7, x0
     23c:	b.ls	274 <report_inlined_functions+0xfc>  // b.plast
     240:	ldr	x0, [x6, #24]
     244:	cmp	x0, x19
     248:	b.hi	274 <report_inlined_functions+0xfc>  // b.pmore
     24c:	ldr	x0, [x6, #32]
     250:	cmp	x0, x19
     254:	b.ls	274 <report_inlined_functions+0xfc>  // b.plast
     258:	add	x6, x6, #0x18
     25c:	sub	x0, x6, x2
     260:	asr	x0, x0, #3
     264:	mul	x0, x0, x1
     268:	add	x0, x0, #0x1
     26c:	cmp	x7, x0
     270:	b.hi	240 <report_inlined_functions+0xc8>  // b.pmore
     274:	ldr	x24, [x6, #16]
     278:	mov	x5, x21
     27c:	mov	x4, x20
     280:	mov	x3, x23
     284:	mov	x2, x22
     288:	mov	x1, x24
     28c:	mov	x0, x19
     290:	bl	178 <report_inlined_functions>
     294:	cbnz	w0, 204 <report_inlined_functions+0x8c>
     298:	ldr	x4, [x24]
     29c:	ldr	w3, [x21]
     2a0:	ldr	x2, [x20]
     2a4:	mov	x1, x19
     2a8:	mov	x0, x23
     2ac:	blr	x22
     2b0:	cbnz	w0, 204 <report_inlined_functions+0x8c>
     2b4:	ldr	x1, [x24, #8]
     2b8:	str	x1, [x20]
     2bc:	ldr	w1, [x24, #16]
     2c0:	str	w1, [x21]
     2c4:	b	204 <report_inlined_functions+0x8c>

00000000000002c8 <lookup_abbrev>:
     2c8:	stp	x29, x30, [sp, #-112]!
     2cc:	mov	x29, sp
     2d0:	stp	x19, x20, [sp, #16]
     2d4:	stp	x23, x24, [sp, #48]
     2d8:	stp	x25, x26, [sp, #64]
     2dc:	mov	x19, x0
     2e0:	mov	x20, x1
     2e4:	mov	x24, x2
     2e8:	mov	x25, x3
     2ec:	sub	x1, x1, #0x1
     2f0:	ldr	x0, [x0]
     2f4:	cmp	x1, x0
     2f8:	b.cs	318 <lookup_abbrev+0x50>  // b.hs, b.nlast
     2fc:	lsl	x0, x20, #5
     300:	sub	x0, x0, #0x20
     304:	ldr	x1, [x19, #8]
     308:	add	x26, x1, x0
     30c:	ldr	x0, [x1, x0]
     310:	cmp	x0, x20
     314:	b.eq	384 <lookup_abbrev+0xbc>  // b.none
     318:	stp	x21, x22, [sp, #32]
     31c:	mov	x2, #0x20                  	// #32
     320:	mov	w1, #0x0                   	// #0
     324:	add	x0, sp, #0x50
     328:	bl	0 <__asan_internal_memset>
     32c:	str	x20, [sp, #80]
     330:	ldr	x23, [x19, #8]
     334:	ldr	x21, [x19]
     338:	mov	x20, #0x0                   	// #0
     33c:	add	x22, sp, #0x50
     340:	b	348 <lookup_abbrev+0x80>
     344:	mov	x21, x19
     348:	cmp	x21, x20
     34c:	b.ls	39c <lookup_abbrev+0xd4>  // b.plast
     350:	add	x19, x21, x20
     354:	lsr	x19, x19, #1
     358:	add	x26, x23, x19, lsl #5
     35c:	mov	x1, x26
     360:	mov	x0, x22
     364:	bl	158 <abbrev_compare>
     368:	tbnz	w0, #31, 344 <lookup_abbrev+0x7c>
     36c:	cmp	w0, #0x0
     370:	b.le	37c <lookup_abbrev+0xb4>
     374:	add	x20, x19, #0x1
     378:	b	348 <lookup_abbrev+0x80>
     37c:	cbz	x26, 39c <lookup_abbrev+0xd4>
     380:	ldp	x21, x22, [sp, #32]
     384:	mov	x0, x26
     388:	ldp	x19, x20, [sp, #16]
     38c:	ldp	x23, x24, [sp, #48]
     390:	ldp	x25, x26, [sp, #64]
     394:	ldp	x29, x30, [sp], #112
     398:	ret
     39c:	mov	w2, #0x0                   	// #0
     3a0:	adrp	x1, 0 <is_highest_address>
     3a4:	add	x1, x1, #0x0
     3a8:	mov	x0, x25
     3ac:	blr	x24
     3b0:	mov	x26, #0x0                   	// #0
     3b4:	ldp	x21, x22, [sp, #32]
     3b8:	b	384 <lookup_abbrev+0xbc>

00000000000003bc <add_line>:
     3bc:	stp	x29, x30, [sp, #-64]!
     3c0:	mov	x29, sp
     3c4:	stp	x19, x20, [sp, #16]
     3c8:	stp	x21, x22, [sp, #32]
     3cc:	str	x23, [sp, #48]
     3d0:	mov	x23, x1
     3d4:	mov	x20, x2
     3d8:	mov	x21, x3
     3dc:	mov	w22, w4
     3e0:	mov	x2, x5
     3e4:	mov	x3, x6
     3e8:	mov	x19, x7
     3ec:	ldr	x7, [x7, #24]
     3f0:	cbz	x7, 414 <add_line+0x58>
     3f4:	add	x7, x7, x7, lsl #1
     3f8:	lsl	x7, x7, #3
     3fc:	sub	x7, x7, #0x18
     400:	ldr	x1, [x19]
     404:	add	x4, x1, x7
     408:	ldr	x1, [x1, x7]
     40c:	cmp	x1, x20
     410:	b.eq	468 <add_line+0xac>  // b.none
     414:	mov	x4, x19
     418:	mov	x1, #0x18                  	// #24
     41c:	bl	0 <__asan_backtrace_vector_grow>
     420:	cbz	x0, 488 <add_line+0xcc>
     424:	ldr	x2, [x23, #16]
     428:	add	x20, x2, x20
     42c:	str	x20, [x0]
     430:	str	x21, [x0, #8]
     434:	str	w22, [x0, #16]
     438:	ldr	x1, [x19, #24]
     43c:	str	w1, [x0, #20]
     440:	ldr	x0, [x19, #24]
     444:	add	x0, x0, #0x1
     448:	str	x0, [x19, #24]
     44c:	mov	w1, #0x1                   	// #1
     450:	mov	w0, w1
     454:	ldp	x19, x20, [sp, #16]
     458:	ldp	x21, x22, [sp, #32]
     45c:	ldr	x23, [sp, #48]
     460:	ldp	x29, x30, [sp], #64
     464:	ret
     468:	ldr	x1, [x4, #8]
     46c:	cmp	x1, x21
     470:	b.ne	414 <add_line+0x58>  // b.any
     474:	ldr	w4, [x4, #16]
     478:	mov	w1, #0x1                   	// #1
     47c:	cmp	w4, w22
     480:	b.ne	414 <add_line+0x58>  // b.any
     484:	b	450 <add_line+0x94>
     488:	mov	w1, #0x0                   	// #0
     48c:	b	450 <add_line+0x94>

0000000000000490 <add_function_range>:
     490:	stp	x29, x30, [sp, #-48]!
     494:	mov	x29, sp
     498:	stp	x19, x20, [sp, #16]
     49c:	stp	x21, x22, [sp, #32]
     4a0:	mov	x22, x2
     4a4:	mov	x2, x5
     4a8:	mov	x19, x7
     4ac:	ldr	x21, [x1, #16]
     4b0:	add	x20, x21, x3
     4b4:	add	x21, x21, x4
     4b8:	ldr	x1, [x7, #24]
     4bc:	cbz	x1, 4f8 <add_function_range+0x68>
     4c0:	add	x1, x1, x1, lsl #1
     4c4:	lsl	x1, x1, #3
     4c8:	sub	x1, x1, #0x18
     4cc:	ldr	x3, [x7]
     4d0:	add	x1, x3, x1
     4d4:	ldr	x3, [x1, #8]
     4d8:	cmp	x3, x20
     4dc:	b.eq	4ec <add_function_range+0x5c>  // b.none
     4e0:	add	x4, x3, #0x1
     4e4:	cmp	x4, x20
     4e8:	b.ne	4f8 <add_function_range+0x68>  // b.any
     4ec:	ldr	x4, [x1, #16]
     4f0:	cmp	x4, x22
     4f4:	b.eq	538 <add_function_range+0xa8>  // b.none
     4f8:	mov	x4, x19
     4fc:	mov	x3, x6
     500:	mov	x1, #0x18                  	// #24
     504:	bl	0 <__asan_backtrace_vector_grow>
     508:	cbz	x0, 54c <add_function_range+0xbc>
     50c:	str	x20, [x0]
     510:	str	x21, [x0, #8]
     514:	str	x22, [x0, #16]
     518:	ldr	x0, [x19, #24]
     51c:	add	x0, x0, #0x1
     520:	str	x0, [x19, #24]
     524:	mov	w0, #0x1                   	// #1
     528:	ldp	x19, x20, [sp, #16]
     52c:	ldp	x21, x22, [sp, #32]
     530:	ldp	x29, x30, [sp], #48
     534:	ret
     538:	mov	w0, #0x1                   	// #1
     53c:	cmp	x3, x21
     540:	b.cs	528 <add_function_range+0x98>  // b.hs, b.nlast
     544:	str	x21, [x1, #8]
     548:	b	528 <add_function_range+0x98>
     54c:	mov	w0, #0x0                   	// #0
     550:	b	528 <add_function_range+0x98>

0000000000000554 <add_unit_addr>:
     554:	stp	x29, x30, [sp, #-48]!
     558:	mov	x29, sp
     55c:	stp	x19, x20, [sp, #16]
     560:	stp	x21, x22, [sp, #32]
     564:	mov	x19, x2
     568:	mov	x2, x3
     56c:	mov	x3, x4
     570:	mov	x20, x5
     574:	ldr	x21, [x19]
     578:	add	x21, x1, x21
     57c:	ldr	x22, [x19, #8]
     580:	add	x22, x1, x22
     584:	ldr	x1, [x5, #24]
     588:	cbz	x1, 5c8 <add_unit_addr+0x74>
     58c:	add	x1, x1, x1, lsl #1
     590:	lsl	x1, x1, #3
     594:	sub	x1, x1, #0x18
     598:	ldr	x4, [x5]
     59c:	add	x1, x4, x1
     5a0:	ldr	x4, [x1, #8]
     5a4:	cmp	x21, x4
     5a8:	b.eq	5b8 <add_unit_addr+0x64>  // b.none
     5ac:	add	x5, x4, #0x1
     5b0:	cmp	x21, x5
     5b4:	b.ne	5c8 <add_unit_addr+0x74>  // b.any
     5b8:	ldr	x6, [x19, #16]
     5bc:	ldr	x5, [x1, #16]
     5c0:	cmp	x6, x5
     5c4:	b.eq	610 <add_unit_addr+0xbc>  // b.none
     5c8:	mov	x4, x20
     5cc:	mov	x1, #0x18                  	// #24
     5d0:	bl	0 <__asan_backtrace_vector_grow>
     5d4:	cbz	x0, 624 <add_unit_addr+0xd0>
     5d8:	str	x21, [x19]
     5dc:	str	x22, [x19, #8]
     5e0:	ldp	x2, x3, [x19]
     5e4:	stp	x2, x3, [x0]
     5e8:	ldr	x1, [x19, #16]
     5ec:	str	x1, [x0, #16]
     5f0:	ldr	x0, [x20, #24]
     5f4:	add	x0, x0, #0x1
     5f8:	str	x0, [x20, #24]
     5fc:	mov	w0, #0x1                   	// #1
     600:	ldp	x19, x20, [sp, #16]
     604:	ldp	x21, x22, [sp, #32]
     608:	ldp	x29, x30, [sp], #48
     60c:	ret
     610:	mov	w0, #0x1                   	// #1
     614:	cmp	x22, x4
     618:	b.ls	600 <add_unit_addr+0xac>  // b.plast
     61c:	str	x22, [x1, #8]
     620:	b	600 <add_unit_addr+0xac>
     624:	mov	w0, #0x0                   	// #0
     628:	b	600 <add_unit_addr+0xac>

000000000000062c <dwarf_buf_error>:
     62c:	stp	x29, x30, [sp, #-240]!
     630:	mov	x29, sp
     634:	stp	x19, x20, [sp, #16]
     638:	mov	x19, x0
     63c:	ldr	x5, [x0, #16]
     640:	ldr	x0, [x0, #8]
     644:	add	x20, sp, #0x28
     648:	sub	w5, w5, w0
     64c:	ldr	x4, [x19]
     650:	mov	x3, x1
     654:	adrp	x2, 0 <is_highest_address>
     658:	add	x2, x2, #0x0
     65c:	mov	x1, #0xc8                  	// #200
     660:	mov	x0, x20
     664:	bl	0 <snprintf>
     668:	ldr	x3, [x19, #40]
     66c:	mov	w2, #0x0                   	// #0
     670:	mov	x1, x20
     674:	ldr	x0, [x19, #48]
     678:	blr	x3
     67c:	ldp	x19, x20, [sp, #16]
     680:	ldp	x29, x30, [sp], #240
     684:	ret

0000000000000688 <advance>:
     688:	stp	x29, x30, [sp, #-32]!
     68c:	mov	x29, sp
     690:	str	x19, [sp, #16]
     694:	mov	x19, x0
     698:	ldr	x0, [x0, #24]
     69c:	cmp	x1, x0
     6a0:	b.ls	6d0 <advance+0x48>  // b.plast
     6a4:	ldr	w0, [x19, #56]
     6a8:	cbz	w0, 6b4 <advance+0x2c>
     6ac:	mov	w0, #0x0                   	// #0
     6b0:	b	6e8 <advance+0x60>
     6b4:	adrp	x1, 0 <is_highest_address>
     6b8:	add	x1, x1, #0x0
     6bc:	mov	x0, x19
     6c0:	bl	62c <dwarf_buf_error>
     6c4:	mov	w0, #0x1                   	// #1
     6c8:	str	w0, [x19, #56]
     6cc:	b	6ac <advance+0x24>
     6d0:	ldr	x2, [x19, #16]
     6d4:	add	x2, x2, x1
     6d8:	str	x2, [x19, #16]
     6dc:	sub	x1, x0, x1
     6e0:	str	x1, [x19, #24]
     6e4:	mov	w0, #0x1                   	// #1
     6e8:	ldr	x19, [sp, #16]
     6ec:	ldp	x29, x30, [sp], #32
     6f0:	ret

00000000000006f4 <read_uint32>:
     6f4:	stp	x29, x30, [sp, #-32]!
     6f8:	mov	x29, sp
     6fc:	stp	x19, x20, [sp, #16]
     700:	mov	x19, x0
     704:	ldr	x20, [x0, #16]
     708:	mov	x1, #0x4                   	// #4
     70c:	bl	688 <advance>
     710:	cbz	w0, 764 <read_uint32+0x70>
     714:	ldr	w0, [x19, #32]
     718:	cbz	w0, 740 <read_uint32+0x4c>
     71c:	ldrb	w0, [x20]
     720:	ldrb	w1, [x20, #1]
     724:	lsl	w1, w1, #16
     728:	orr	w0, w1, w0, lsl #24
     72c:	ldrb	w1, [x20, #2]
     730:	ldrb	w2, [x20, #3]
     734:	orr	w1, w2, w1, lsl #8
     738:	orr	w0, w0, w1
     73c:	b	768 <read_uint32+0x74>
     740:	ldrb	w0, [x20, #3]
     744:	ldrb	w1, [x20, #2]
     748:	lsl	w1, w1, #16
     74c:	orr	w0, w1, w0, lsl #24
     750:	ldrb	w1, [x20, #1]
     754:	ldrb	w2, [x20]
     758:	orr	w1, w2, w1, lsl #8
     75c:	orr	w0, w0, w1
     760:	b	768 <read_uint32+0x74>
     764:	mov	w0, #0x0                   	// #0
     768:	ldp	x19, x20, [sp, #16]
     76c:	ldp	x29, x30, [sp], #32
     770:	ret

0000000000000774 <read_uint64>:
     774:	stp	x29, x30, [sp, #-32]!
     778:	mov	x29, sp
     77c:	stp	x19, x20, [sp, #16]
     780:	mov	x20, x0
     784:	ldr	x19, [x0, #16]
     788:	mov	x1, #0x8                   	// #8
     78c:	bl	688 <advance>
     790:	cbz	w0, 834 <read_uint64+0xc0>
     794:	ldr	w0, [x20, #32]
     798:	cbz	w0, 7e8 <read_uint64+0x74>
     79c:	ldrb	w0, [x19]
     7a0:	ldrb	w1, [x19, #1]
     7a4:	lsl	x1, x1, #48
     7a8:	orr	x0, x1, x0, lsl #56
     7ac:	ldrb	w1, [x19, #2]
     7b0:	ldrb	w2, [x19, #3]
     7b4:	lsl	x2, x2, #32
     7b8:	orr	x1, x2, x1, lsl #40
     7bc:	orr	x0, x0, x1
     7c0:	ldrb	w1, [x19, #4]
     7c4:	ldrb	w2, [x19, #5]
     7c8:	lsl	x2, x2, #16
     7cc:	orr	x1, x2, x1, lsl #24
     7d0:	orr	x0, x0, x1
     7d4:	ldrb	w1, [x19, #6]
     7d8:	ldrb	w2, [x19, #7]
     7dc:	orr	x1, x2, x1, lsl #8
     7e0:	orr	x0, x0, x1
     7e4:	b	838 <read_uint64+0xc4>
     7e8:	ldrb	w0, [x19, #7]
     7ec:	ldrb	w1, [x19, #6]
     7f0:	lsl	x1, x1, #48
     7f4:	orr	x0, x1, x0, lsl #56
     7f8:	ldrb	w1, [x19, #5]
     7fc:	ldrb	w2, [x19, #4]
     800:	lsl	x2, x2, #32
     804:	orr	x1, x2, x1, lsl #40
     808:	orr	x0, x0, x1
     80c:	ldrb	w1, [x19, #3]
     810:	ldrb	w2, [x19, #2]
     814:	lsl	x2, x2, #16
     818:	orr	x1, x2, x1, lsl #24
     81c:	orr	x0, x0, x1
     820:	ldrb	w1, [x19, #1]
     824:	ldrb	w2, [x19]
     828:	orr	x1, x2, x1, lsl #8
     82c:	orr	x0, x0, x1
     830:	b	838 <read_uint64+0xc4>
     834:	mov	x0, #0x0                   	// #0
     838:	ldp	x19, x20, [sp, #16]
     83c:	ldp	x29, x30, [sp], #32
     840:	ret

0000000000000844 <read_offset>:
     844:	stp	x29, x30, [sp, #-16]!
     848:	mov	x29, sp
     84c:	cbz	w1, 85c <read_offset+0x18>
     850:	bl	774 <read_uint64>
     854:	ldp	x29, x30, [sp], #16
     858:	ret
     85c:	bl	6f4 <read_uint32>
     860:	mov	w0, w0
     864:	b	854 <read_offset+0x10>

0000000000000868 <read_uint16>:
     868:	stp	x29, x30, [sp, #-32]!
     86c:	mov	x29, sp
     870:	stp	x19, x20, [sp, #16]
     874:	mov	x19, x0
     878:	ldr	x20, [x0, #16]
     87c:	mov	x1, #0x2                   	// #2
     880:	bl	688 <advance>
     884:	cbz	w0, 8b0 <read_uint16+0x48>
     888:	ldr	w0, [x19, #32]
     88c:	cbz	w0, 8a0 <read_uint16+0x38>
     890:	ldrb	w1, [x20]
     894:	ldrb	w0, [x20, #1]
     898:	bfi	w0, w1, #8, #24
     89c:	b	8b4 <read_uint16+0x4c>
     8a0:	ldrb	w1, [x20, #1]
     8a4:	ldrb	w0, [x20]
     8a8:	bfi	w0, w1, #8, #24
     8ac:	b	8b4 <read_uint16+0x4c>
     8b0:	mov	w0, #0x0                   	// #0
     8b4:	ldp	x19, x20, [sp, #16]
     8b8:	ldp	x29, x30, [sp], #32
     8bc:	ret

00000000000008c0 <read_byte>:
     8c0:	stp	x29, x30, [sp, #-32]!
     8c4:	mov	x29, sp
     8c8:	str	x19, [sp, #16]
     8cc:	ldr	x19, [x0, #16]
     8d0:	mov	x1, #0x1                   	// #1
     8d4:	bl	688 <advance>
     8d8:	cbz	w0, 8ec <read_byte+0x2c>
     8dc:	ldrb	w0, [x19]
     8e0:	ldr	x19, [sp, #16]
     8e4:	ldp	x29, x30, [sp], #32
     8e8:	ret
     8ec:	mov	w0, #0x0                   	// #0
     8f0:	b	8e0 <read_byte+0x20>

00000000000008f4 <read_uleb128>:
     8f4:	stp	x29, x30, [sp, #-80]!
     8f8:	mov	x29, sp
     8fc:	stp	x19, x20, [sp, #16]
     900:	stp	x21, x22, [sp, #32]
     904:	stp	x23, x24, [sp, #48]
     908:	stp	x25, x26, [sp, #64]
     90c:	mov	x20, x0
     910:	mov	w24, #0x0                   	// #0
     914:	mov	w19, #0x0                   	// #0
     918:	mov	x22, #0x0                   	// #0
     91c:	mov	x23, #0x1                   	// #1
     920:	adrp	x25, 0 <is_highest_address>
     924:	add	x25, x25, #0x0
     928:	mov	w26, #0x1                   	// #1
     92c:	b	93c <read_uleb128+0x48>
     930:	cbz	w24, 96c <read_uleb128+0x78>
     934:	add	w19, w19, #0x7
     938:	tbz	w21, #7, 984 <read_uleb128+0x90>
     93c:	ldr	x21, [x20, #16]
     940:	mov	x1, x23
     944:	mov	x0, x20
     948:	bl	688 <advance>
     94c:	cbz	w0, 980 <read_uleb128+0x8c>
     950:	ldrb	w21, [x21]
     954:	cmp	w19, #0x3f
     958:	b.hi	930 <read_uleb128+0x3c>  // b.pmore
     95c:	and	x0, x21, #0x7f
     960:	lsl	x0, x0, x19
     964:	orr	x22, x22, x0
     968:	b	934 <read_uleb128+0x40>
     96c:	mov	x1, x25
     970:	mov	x0, x20
     974:	bl	62c <dwarf_buf_error>
     978:	mov	w24, w26
     97c:	b	934 <read_uleb128+0x40>
     980:	mov	x22, #0x0                   	// #0
     984:	mov	x0, x22
     988:	ldp	x19, x20, [sp, #16]
     98c:	ldp	x21, x22, [sp, #32]
     990:	ldp	x23, x24, [sp, #48]
     994:	ldp	x25, x26, [sp, #64]
     998:	ldp	x29, x30, [sp], #80
     99c:	ret

00000000000009a0 <read_address>:
     9a0:	stp	x29, x30, [sp, #-16]!
     9a4:	mov	x29, sp
     9a8:	cmp	w1, #0x4
     9ac:	b.eq	9f0 <read_address+0x50>  // b.none
     9b0:	b.gt	9d0 <read_address+0x30>
     9b4:	cmp	w1, #0x1
     9b8:	b.eq	9e0 <read_address+0x40>  // b.none
     9bc:	cmp	w1, #0x2
     9c0:	b.ne	9fc <read_address+0x5c>  // b.any
     9c4:	bl	868 <read_uint16>
     9c8:	and	x0, x0, #0xffff
     9cc:	b	9e8 <read_address+0x48>
     9d0:	cmp	w1, #0x8
     9d4:	b.ne	9fc <read_address+0x5c>  // b.any
     9d8:	bl	774 <read_uint64>
     9dc:	b	9e8 <read_address+0x48>
     9e0:	bl	8c0 <read_byte>
     9e4:	and	x0, x0, #0xff
     9e8:	ldp	x29, x30, [sp], #16
     9ec:	ret
     9f0:	bl	6f4 <read_uint32>
     9f4:	mov	w0, w0
     9f8:	b	9e8 <read_address+0x48>
     9fc:	adrp	x1, 0 <is_highest_address>
     a00:	add	x1, x1, #0x0
     a04:	bl	62c <dwarf_buf_error>
     a08:	mov	x0, #0x0                   	// #0
     a0c:	b	9e8 <read_address+0x48>

0000000000000a10 <read_sleb128>:
     a10:	stp	x29, x30, [sp, #-80]!
     a14:	mov	x29, sp
     a18:	stp	x19, x20, [sp, #16]
     a1c:	stp	x21, x22, [sp, #32]
     a20:	stp	x23, x24, [sp, #48]
     a24:	stp	x25, x26, [sp, #64]
     a28:	mov	x21, x0
     a2c:	mov	w24, #0x0                   	// #0
     a30:	mov	w19, #0x0                   	// #0
     a34:	mov	x22, #0x0                   	// #0
     a38:	mov	x23, #0x1                   	// #1
     a3c:	adrp	x25, 0 <is_highest_address>
     a40:	add	x25, x25, #0x0
     a44:	mov	w26, #0x1                   	// #1
     a48:	b	a58 <read_sleb128+0x48>
     a4c:	cbz	w24, a88 <read_sleb128+0x78>
     a50:	add	w19, w19, #0x7
     a54:	tbz	w20, #7, a9c <read_sleb128+0x8c>
     a58:	ldr	x20, [x21, #16]
     a5c:	mov	x1, x23
     a60:	mov	x0, x21
     a64:	bl	688 <advance>
     a68:	cbz	w0, abc <read_sleb128+0xac>
     a6c:	ldrb	w20, [x20]
     a70:	cmp	w19, #0x3f
     a74:	b.hi	a4c <read_sleb128+0x3c>  // b.pmore
     a78:	and	x0, x20, #0x7f
     a7c:	lsl	x0, x0, x19
     a80:	orr	x22, x22, x0
     a84:	b	a50 <read_sleb128+0x40>
     a88:	mov	x1, x25
     a8c:	mov	x0, x21
     a90:	bl	62c <dwarf_buf_error>
     a94:	mov	w24, w26
     a98:	b	a50 <read_sleb128+0x40>
     a9c:	and	w20, w20, #0x40
     aa0:	cmp	w19, #0x3f
     aa4:	mov	x0, #0xffffffffffffffff    	// #-1
     aa8:	lsl	x0, x0, x19
     aac:	orr	x0, x22, x0
     ab0:	ccmp	w20, #0x0, #0x4, ls  // ls = plast
     ab4:	csel	x0, x0, x22, ne  // ne = any
     ab8:	b	ac0 <read_sleb128+0xb0>
     abc:	mov	x0, #0x0                   	// #0
     ac0:	ldp	x19, x20, [sp, #16]
     ac4:	ldp	x21, x22, [sp, #32]
     ac8:	ldp	x23, x24, [sp, #48]
     acc:	ldp	x25, x26, [sp, #64]
     ad0:	ldp	x29, x30, [sp], #80
     ad4:	ret

0000000000000ad8 <read_string>:
     ad8:	stp	x29, x30, [sp, #-32]!
     adc:	mov	x29, sp
     ae0:	stp	x19, x20, [sp, #16]
     ae4:	mov	x19, x0
     ae8:	ldr	x20, [x0, #16]
     aec:	ldr	x1, [x0, #24]
     af0:	mov	x0, x20
     af4:	bl	0 <__asan_internal_strnlen>
     af8:	add	x1, x0, #0x1
     afc:	mov	x0, x19
     b00:	bl	688 <advance>
     b04:	cmp	w0, #0x0
     b08:	csel	x0, x20, xzr, ne  // ne = any
     b0c:	ldp	x19, x20, [sp, #16]
     b10:	ldp	x29, x30, [sp], #32
     b14:	ret

0000000000000b18 <read_attribute>:
     b18:	sub	sp, sp, #0x70
     b1c:	stp	x29, x30, [sp, #16]
     b20:	add	x29, sp, #0x10
     b24:	stp	x19, x20, [sp, #32]
     b28:	stp	x21, x22, [sp, #48]
     b2c:	stp	x23, x24, [sp, #64]
     b30:	stp	x25, x26, [sp, #80]
     b34:	str	x27, [sp, #96]
     b38:	mov	w19, w0
     b3c:	mov	x20, x1
     b40:	mov	w22, w2
     b44:	mov	w25, w3
     b48:	mov	w24, w4
     b4c:	mov	x27, x5
     b50:	mov	x26, x6
     b54:	mov	x23, x7
     b58:	ldr	x21, [sp, #112]
     b5c:	mov	x2, #0x10                  	// #16
     b60:	mov	w1, #0x0                   	// #0
     b64:	mov	x0, x21
     b68:	bl	0 <__asan_internal_memset>
     b6c:	cmp	w19, #0x20
     b70:	b.hi	b9c <read_attribute+0x84>  // b.pmore
     b74:	cbz	w19, 1000 <read_attribute+0x4e8>
     b78:	sub	w19, w19, #0x1
     b7c:	cmp	w19, #0x1f
     b80:	b.hi	1000 <read_attribute+0x4e8>  // b.pmore
     b84:	adrp	x1, 0 <is_highest_address>
     b88:	add	x1, x1, #0x0
     b8c:	ldrh	w0, [x1, w19, uxtw #1]
     b90:	adr	x1, b9c <read_attribute+0x84>
     b94:	add	x0, x1, w0, sxth #2
     b98:	br	x0
     b9c:	mov	w0, #0x1f20                	// #7968
     ba0:	cmp	w19, w0
     ba4:	b.eq	fac <read_attribute+0x494>  // b.none
     ba8:	b.ls	bf0 <read_attribute+0xd8>  // b.plast
     bac:	mov	w0, #0x1f21                	// #7969
     bb0:	cmp	w19, w0
     bb4:	b.ne	1000 <read_attribute+0x4e8>  // b.any
     bb8:	mov	w1, w22
     bbc:	mov	x0, x20
     bc0:	bl	844 <read_offset>
     bc4:	cbz	x23, fdc <read_attribute+0x4c4>
     bc8:	ldr	x1, [x23, #112]
     bcc:	cmp	x1, x0
     bd0:	b.ls	fe8 <read_attribute+0x4d0>  // b.plast
     bd4:	mov	w1, #0x4                   	// #4
     bd8:	str	w1, [x21]
     bdc:	ldr	x1, [x23, #104]
     be0:	add	x0, x1, x0
     be4:	str	x0, [x21, #8]
     be8:	mov	w0, #0x1                   	// #1
     bec:	b	c40 <read_attribute+0x128>
     bf0:	mov	w0, #0x1f01                	// #7937
     bf4:	cmp	w19, w0
     bf8:	b.eq	f90 <read_attribute+0x478>  // b.none
     bfc:	mov	w0, #0x1f02                	// #7938
     c00:	cmp	w19, w0
     c04:	b.ne	1000 <read_attribute+0x4e8>  // b.any
     c08:	mov	w0, #0x8                   	// #8
     c0c:	str	w0, [x21]
     c10:	mov	x0, x20
     c14:	bl	8f4 <read_uleb128>
     c18:	str	x0, [x21, #8]
     c1c:	mov	w0, #0x1                   	// #1
     c20:	b	c40 <read_attribute+0x128>
     c24:	mov	w19, #0x1                   	// #1
     c28:	str	w19, [x21]
     c2c:	mov	w1, w24
     c30:	mov	x0, x20
     c34:	bl	9a0 <read_address>
     c38:	str	x0, [x21, #8]
     c3c:	mov	w0, w19
     c40:	ldp	x19, x20, [sp, #32]
     c44:	ldp	x21, x22, [sp, #48]
     c48:	ldp	x23, x24, [sp, #64]
     c4c:	ldp	x25, x26, [sp, #80]
     c50:	ldr	x27, [sp, #96]
     c54:	ldp	x29, x30, [sp, #16]
     c58:	add	sp, sp, #0x70
     c5c:	ret
     c60:	mov	w0, #0xa                   	// #10
     c64:	str	w0, [x21]
     c68:	mov	x0, x20
     c6c:	bl	868 <read_uint16>
     c70:	and	x1, x0, #0xffff
     c74:	mov	x0, x20
     c78:	bl	688 <advance>
     c7c:	b	c40 <read_attribute+0x128>
     c80:	mov	w0, #0xa                   	// #10
     c84:	str	w0, [x21]
     c88:	mov	x0, x20
     c8c:	bl	6f4 <read_uint32>
     c90:	mov	w1, w0
     c94:	mov	x0, x20
     c98:	bl	688 <advance>
     c9c:	b	c40 <read_attribute+0x128>
     ca0:	mov	w0, #0x2                   	// #2
     ca4:	str	w0, [x21]
     ca8:	mov	x0, x20
     cac:	bl	868 <read_uint16>
     cb0:	and	x0, x0, #0xffff
     cb4:	str	x0, [x21, #8]
     cb8:	mov	w0, #0x1                   	// #1
     cbc:	b	c40 <read_attribute+0x128>
     cc0:	mov	w0, #0x2                   	// #2
     cc4:	str	w0, [x21]
     cc8:	mov	x0, x20
     ccc:	bl	6f4 <read_uint32>
     cd0:	mov	w0, w0
     cd4:	str	x0, [x21, #8]
     cd8:	mov	w0, #0x1                   	// #1
     cdc:	b	c40 <read_attribute+0x128>
     ce0:	mov	w0, #0x2                   	// #2
     ce4:	str	w0, [x21]
     ce8:	mov	x0, x20
     cec:	bl	774 <read_uint64>
     cf0:	str	x0, [x21, #8]
     cf4:	mov	w0, #0x1                   	// #1
     cf8:	b	c40 <read_attribute+0x128>
     cfc:	mov	w0, #0x4                   	// #4
     d00:	str	w0, [x21]
     d04:	mov	x0, x20
     d08:	bl	ad8 <read_string>
     d0c:	str	x0, [x21, #8]
     d10:	cmp	x0, #0x0
     d14:	cset	w0, ne  // ne = any
     d18:	b	c40 <read_attribute+0x128>
     d1c:	mov	w0, #0xa                   	// #10
     d20:	str	w0, [x21]
     d24:	mov	x0, x20
     d28:	bl	8f4 <read_uleb128>
     d2c:	mov	x1, x0
     d30:	mov	x0, x20
     d34:	bl	688 <advance>
     d38:	b	c40 <read_attribute+0x128>
     d3c:	mov	w0, #0xa                   	// #10
     d40:	str	w0, [x21]
     d44:	mov	x0, x20
     d48:	bl	8c0 <read_byte>
     d4c:	and	x1, x0, #0xff
     d50:	mov	x0, x20
     d54:	bl	688 <advance>
     d58:	b	c40 <read_attribute+0x128>
     d5c:	mov	w0, #0x2                   	// #2
     d60:	str	w0, [x21]
     d64:	mov	x0, x20
     d68:	bl	8c0 <read_byte>
     d6c:	and	x0, x0, #0xff
     d70:	str	x0, [x21, #8]
     d74:	mov	w0, #0x1                   	// #1
     d78:	b	c40 <read_attribute+0x128>
     d7c:	mov	w0, #0x2                   	// #2
     d80:	str	w0, [x21]
     d84:	mov	x0, x20
     d88:	bl	8c0 <read_byte>
     d8c:	and	x0, x0, #0xff
     d90:	str	x0, [x21, #8]
     d94:	mov	w0, #0x1                   	// #1
     d98:	b	c40 <read_attribute+0x128>
     d9c:	mov	w0, #0x3                   	// #3
     da0:	str	w0, [x21]
     da4:	mov	x0, x20
     da8:	bl	a10 <read_sleb128>
     dac:	str	x0, [x21, #8]
     db0:	mov	w0, #0x1                   	// #1
     db4:	b	c40 <read_attribute+0x128>
     db8:	mov	w1, w22
     dbc:	mov	x0, x20
     dc0:	bl	844 <read_offset>
     dc4:	cmp	x26, x0
     dc8:	b.ls	de4 <read_attribute+0x2cc>  // b.plast
     dcc:	mov	w1, #0x4                   	// #4
     dd0:	str	w1, [x21]
     dd4:	add	x0, x27, x0
     dd8:	str	x0, [x21, #8]
     ddc:	mov	w0, #0x1                   	// #1
     de0:	b	c40 <read_attribute+0x128>
     de4:	adrp	x1, 0 <is_highest_address>
     de8:	add	x1, x1, #0x0
     dec:	mov	x0, x20
     df0:	bl	62c <dwarf_buf_error>
     df4:	mov	w0, #0x0                   	// #0
     df8:	b	c40 <read_attribute+0x128>
     dfc:	mov	w0, #0x2                   	// #2
     e00:	str	w0, [x21]
     e04:	mov	x0, x20
     e08:	bl	8f4 <read_uleb128>
     e0c:	str	x0, [x21, #8]
     e10:	mov	w0, #0x1                   	// #1
     e14:	b	c40 <read_attribute+0x128>
     e18:	mov	w0, #0x6                   	// #6
     e1c:	str	w0, [x21]
     e20:	cmp	w25, #0x2
     e24:	b.eq	e40 <read_attribute+0x328>  // b.none
     e28:	mov	w1, w22
     e2c:	mov	x0, x20
     e30:	bl	844 <read_offset>
     e34:	str	x0, [x21, #8]
     e38:	mov	w0, #0x1                   	// #1
     e3c:	b	c40 <read_attribute+0x128>
     e40:	mov	w1, w24
     e44:	mov	x0, x20
     e48:	bl	9a0 <read_address>
     e4c:	str	x0, [x21, #8]
     e50:	mov	w0, #0x1                   	// #1
     e54:	b	c40 <read_attribute+0x128>
     e58:	mov	w0, #0x5                   	// #5
     e5c:	str	w0, [x21]
     e60:	mov	x0, x20
     e64:	bl	8c0 <read_byte>
     e68:	and	x0, x0, #0xff
     e6c:	str	x0, [x21, #8]
     e70:	mov	w0, #0x1                   	// #1
     e74:	b	c40 <read_attribute+0x128>
     e78:	mov	w0, #0x5                   	// #5
     e7c:	str	w0, [x21]
     e80:	mov	x0, x20
     e84:	bl	868 <read_uint16>
     e88:	and	x0, x0, #0xffff
     e8c:	str	x0, [x21, #8]
     e90:	mov	w0, #0x1                   	// #1
     e94:	b	c40 <read_attribute+0x128>
     e98:	mov	w0, #0x5                   	// #5
     e9c:	str	w0, [x21]
     ea0:	mov	x0, x20
     ea4:	bl	6f4 <read_uint32>
     ea8:	mov	w0, w0
     eac:	str	x0, [x21, #8]
     eb0:	mov	w0, #0x1                   	// #1
     eb4:	b	c40 <read_attribute+0x128>
     eb8:	mov	w0, #0x5                   	// #5
     ebc:	str	w0, [x21]
     ec0:	mov	x0, x20
     ec4:	bl	774 <read_uint64>
     ec8:	str	x0, [x21, #8]
     ecc:	mov	w0, #0x1                   	// #1
     ed0:	b	c40 <read_attribute+0x128>
     ed4:	mov	w0, #0x5                   	// #5
     ed8:	str	w0, [x21]
     edc:	mov	x0, x20
     ee0:	bl	8f4 <read_uleb128>
     ee4:	str	x0, [x21, #8]
     ee8:	mov	w0, #0x1                   	// #1
     eec:	b	c40 <read_attribute+0x128>
     ef0:	mov	x0, x20
     ef4:	bl	8f4 <read_uleb128>
     ef8:	str	x21, [sp]
     efc:	mov	x7, x23
     f00:	mov	x6, x26
     f04:	mov	x5, x27
     f08:	mov	w4, w24
     f0c:	mov	w3, w25
     f10:	mov	w2, w22
     f14:	mov	x1, x20
     f18:	bl	b18 <read_attribute>
     f1c:	b	c40 <read_attribute+0x128>
     f20:	mov	w0, #0x8                   	// #8
     f24:	str	w0, [x21]
     f28:	mov	w1, w22
     f2c:	mov	x0, x20
     f30:	bl	844 <read_offset>
     f34:	str	x0, [x21, #8]
     f38:	mov	w0, #0x1                   	// #1
     f3c:	b	c40 <read_attribute+0x128>
     f40:	mov	w0, #0xb                   	// #11
     f44:	str	w0, [x21]
     f48:	mov	x0, x20
     f4c:	bl	8f4 <read_uleb128>
     f50:	mov	x1, x0
     f54:	mov	x0, x20
     f58:	bl	688 <advance>
     f5c:	b	c40 <read_attribute+0x128>
     f60:	mov	w0, #0x2                   	// #2
     f64:	str	w0, [x21]
     f68:	mov	x0, #0x1                   	// #1
     f6c:	str	x0, [x21, #8]
     f70:	b	c40 <read_attribute+0x128>
     f74:	mov	w0, #0x9                   	// #9
     f78:	str	w0, [x21]
     f7c:	mov	x0, x20
     f80:	bl	774 <read_uint64>
     f84:	str	x0, [x21, #8]
     f88:	mov	w0, #0x1                   	// #1
     f8c:	b	c40 <read_attribute+0x128>
     f90:	mov	w0, #0x8                   	// #8
     f94:	str	w0, [x21]
     f98:	mov	x0, x20
     f9c:	bl	8f4 <read_uleb128>
     fa0:	str	x0, [x21, #8]
     fa4:	mov	w0, #0x1                   	// #1
     fa8:	b	c40 <read_attribute+0x128>
     fac:	mov	w1, w22
     fb0:	mov	x0, x20
     fb4:	bl	844 <read_offset>
     fb8:	str	x0, [x21, #8]
     fbc:	cbz	x23, fd0 <read_attribute+0x4b8>
     fc0:	mov	w0, #0x7                   	// #7
     fc4:	str	w0, [x21]
     fc8:	mov	w0, #0x1                   	// #1
     fcc:	b	c40 <read_attribute+0x128>
     fd0:	str	wzr, [x21]
     fd4:	mov	w0, #0x1                   	// #1
     fd8:	b	c40 <read_attribute+0x128>
     fdc:	str	wzr, [x21]
     fe0:	mov	w0, #0x1                   	// #1
     fe4:	b	c40 <read_attribute+0x128>
     fe8:	adrp	x1, 0 <is_highest_address>
     fec:	add	x1, x1, #0x0
     ff0:	mov	x0, x20
     ff4:	bl	62c <dwarf_buf_error>
     ff8:	mov	w0, #0x0                   	// #0
     ffc:	b	c40 <read_attribute+0x128>
    1000:	adrp	x1, 0 <is_highest_address>
    1004:	add	x1, x1, #0x0
    1008:	mov	x0, x20
    100c:	bl	62c <dwarf_buf_error>
    1010:	mov	w0, #0x0                   	// #0
    1014:	b	c40 <read_attribute+0x128>

0000000000001018 <read_referenced_name>:
    1018:	sub	sp, sp, #0xd0
    101c:	stp	x29, x30, [sp, #16]
    1020:	add	x29, sp, #0x10
    1024:	stp	x19, x20, [sp, #32]
    1028:	stp	x25, x26, [sp, #80]
    102c:	mov	x20, x0
    1030:	mov	x26, x3
    1034:	str	x4, [sp, #120]
    1038:	ldr	x0, [x1, #16]
    103c:	cmp	x0, x2
    1040:	b.hi	10f0 <read_referenced_name+0xd8>  // b.pmore
    1044:	mov	x19, x1
    1048:	sub	x5, x2, x0
    104c:	ldr	x4, [x1, #8]
    1050:	cmp	x5, x4
    1054:	b.cs	10f0 <read_referenced_name+0xd8>  // b.hs, b.nlast
    1058:	adrp	x3, 0 <is_highest_address>
    105c:	add	x3, x3, #0x0
    1060:	str	x3, [sp, #144]
    1064:	ldr	x1, [x20, #56]
    1068:	str	x1, [sp, #152]
    106c:	ldr	x1, [x19]
    1070:	add	x1, x1, x5
    1074:	str	x1, [sp, #160]
    1078:	add	x0, x0, x4
    107c:	sub	x0, x0, x2
    1080:	str	x0, [sp, #168]
    1084:	ldr	w0, [x20, #120]
    1088:	str	w0, [sp, #176]
    108c:	str	x26, [sp, #184]
    1090:	ldr	x0, [sp, #120]
    1094:	str	x0, [sp, #192]
    1098:	str	wzr, [sp, #200]
    109c:	add	x0, sp, #0x90
    10a0:	bl	8f4 <read_uleb128>
    10a4:	mov	x1, x0
    10a8:	cbz	x0, 1120 <read_referenced_name+0x108>
    10ac:	stp	x23, x24, [sp, #64]
    10b0:	ldr	x3, [sp, #120]
    10b4:	mov	x2, x26
    10b8:	add	x0, x19, #0x58
    10bc:	bl	2c8 <lookup_abbrev>
    10c0:	mov	x23, x0
    10c4:	cbz	x0, 123c <read_referenced_name+0x224>
    10c8:	stp	x21, x22, [sp, #48]
    10cc:	ldr	x0, [x0, #16]
    10d0:	mov	x21, #0x0                   	// #0
    10d4:	mov	x25, #0x0                   	// #0
    10d8:	cbz	x0, 122c <read_referenced_name+0x214>
    10dc:	stp	x27, x28, [sp, #96]
    10e0:	add	x27, sp, #0x90
    10e4:	add	x24, sp, #0x80
    10e8:	mov	w28, #0x2007                	// #8199
    10ec:	b	1198 <read_referenced_name+0x180>
    10f0:	mov	w2, #0x0                   	// #0
    10f4:	adrp	x1, 0 <is_highest_address>
    10f8:	add	x1, x1, #0x0
    10fc:	ldr	x0, [sp, #120]
    1100:	blr	x26
    1104:	mov	x25, #0x0                   	// #0
    1108:	mov	x0, x25
    110c:	ldp	x19, x20, [sp, #32]
    1110:	ldp	x25, x26, [sp, #80]
    1114:	ldp	x29, x30, [sp, #16]
    1118:	add	sp, sp, #0xd0
    111c:	ret
    1120:	adrp	x1, 0 <is_highest_address>
    1124:	add	x1, x1, #0x0
    1128:	add	x0, sp, #0x90
    112c:	bl	62c <dwarf_buf_error>
    1130:	mov	x25, #0x0                   	// #0
    1134:	b	1108 <read_referenced_name+0xf0>
    1138:	cmp	w0, #0x6e
    113c:	b.eq	1148 <read_referenced_name+0x130>  // b.none
    1140:	cmp	w0, w28
    1144:	b.ne	1188 <read_referenced_name+0x170>  // b.any
    1148:	ldr	w0, [sp, #128]
    114c:	cmp	w0, #0x4
    1150:	b.ne	1188 <read_referenced_name+0x170>  // b.any
    1154:	ldr	x25, [sp, #136]
    1158:	ldp	x21, x22, [sp, #48]
    115c:	ldp	x23, x24, [sp, #64]
    1160:	ldp	x27, x28, [sp, #96]
    1164:	b	1108 <read_referenced_name+0xf0>
    1168:	ldr	x5, [sp, #120]
    116c:	mov	x4, x26
    1170:	mov	x3, x24
    1174:	mov	x1, x19
    1178:	mov	x0, x20
    117c:	bl	1248 <read_referenced_name_from_attr>
    1180:	cmp	x0, #0x0
    1184:	csel	x25, x25, x0, eq  // eq = none
    1188:	add	x21, x21, #0x1
    118c:	ldr	x0, [x23, #16]
    1190:	cmp	x0, x21
    1194:	b.ls	1208 <read_referenced_name+0x1f0>  // b.plast
    1198:	lsl	x22, x21, #3
    119c:	ldr	x0, [x23, #24]
    11a0:	add	x0, x0, x22
    11a4:	ldr	w0, [x0, #4]
    11a8:	str	x24, [sp]
    11ac:	ldr	x7, [x20, #8]
    11b0:	ldr	x6, [x20, #112]
    11b4:	ldr	x5, [x20, #104]
    11b8:	ldr	w4, [x19, #48]
    11bc:	ldr	w3, [x19, #40]
    11c0:	ldr	w2, [x19, #44]
    11c4:	mov	x1, x27
    11c8:	bl	b18 <read_attribute>
    11cc:	cbz	w0, 1218 <read_referenced_name+0x200>
    11d0:	ldr	x0, [x23, #24]
    11d4:	add	x2, x0, x22
    11d8:	ldr	w0, [x0, x22]
    11dc:	cmp	w0, #0x47
    11e0:	b.eq	1168 <read_referenced_name+0x150>  // b.none
    11e4:	b.hi	1138 <read_referenced_name+0x120>  // b.pmore
    11e8:	cmp	w0, #0x3
    11ec:	b.ne	1188 <read_referenced_name+0x170>  // b.any
    11f0:	cbnz	x25, 1188 <read_referenced_name+0x170>
    11f4:	ldr	w0, [sp, #128]
    11f8:	cmp	w0, #0x4
    11fc:	ldr	x0, [sp, #136]
    1200:	csel	x25, x0, x25, eq  // eq = none
    1204:	b	1188 <read_referenced_name+0x170>
    1208:	ldp	x21, x22, [sp, #48]
    120c:	ldp	x23, x24, [sp, #64]
    1210:	ldp	x27, x28, [sp, #96]
    1214:	b	1108 <read_referenced_name+0xf0>
    1218:	mov	x25, #0x0                   	// #0
    121c:	ldp	x21, x22, [sp, #48]
    1220:	ldp	x23, x24, [sp, #64]
    1224:	ldp	x27, x28, [sp, #96]
    1228:	b	1108 <read_referenced_name+0xf0>
    122c:	mov	x25, #0x0                   	// #0
    1230:	ldp	x21, x22, [sp, #48]
    1234:	ldp	x23, x24, [sp, #64]
    1238:	b	1108 <read_referenced_name+0xf0>
    123c:	mov	x25, x0
    1240:	ldp	x23, x24, [sp, #64]
    1244:	b	1108 <read_referenced_name+0xf0>

0000000000001248 <read_referenced_name_from_attr>:
    1248:	stp	x29, x30, [sp, #-48]!
    124c:	mov	x29, sp
    1250:	stp	x19, x20, [sp, #16]
    1254:	stp	x21, x22, [sp, #32]
    1258:	mov	x19, x0
    125c:	mov	x6, x3
    1260:	mov	x20, x4
    1264:	mov	x21, x5
    1268:	ldr	w3, [x2]
    126c:	cmp	w3, #0x31
    1270:	b.eq	1280 <read_referenced_name_from_attr+0x38>  // b.none
    1274:	mov	x0, #0x0                   	// #0
    1278:	cmp	w3, #0x47
    127c:	b.ne	12b0 <read_referenced_name_from_attr+0x68>  // b.any
    1280:	ldr	w0, [x2, #4]
    1284:	cmp	w0, #0x20
    1288:	b.eq	134c <read_referenced_name_from_attr+0x104>  // b.none
    128c:	ldr	w2, [x6]
    1290:	cmp	w2, #0x6
    1294:	b.eq	12c0 <read_referenced_name_from_attr+0x78>  // b.none
    1298:	cmp	w2, #0x2
    129c:	ccmp	w2, #0x5, #0x4, ne  // ne = any
    12a0:	b.eq	12f8 <read_referenced_name_from_attr+0xb0>  // b.none
    12a4:	mov	x0, #0x0                   	// #0
    12a8:	cmp	w2, #0x7
    12ac:	b.eq	1310 <read_referenced_name_from_attr+0xc8>  // b.none
    12b0:	ldp	x19, x20, [sp, #16]
    12b4:	ldp	x21, x22, [sp, #32]
    12b8:	ldp	x29, x30, [sp], #48
    12bc:	ret
    12c0:	ldr	x22, [x6, #8]
    12c4:	mov	x2, x22
    12c8:	ldr	x1, [x19, #48]
    12cc:	ldr	x0, [x19, #40]
    12d0:	bl	6c <find_unit>
    12d4:	cbz	x0, 12b0 <read_referenced_name_from_attr+0x68>
    12d8:	ldr	x2, [x0, #24]
    12dc:	mov	x4, x21
    12e0:	mov	x3, x20
    12e4:	sub	x2, x22, x2
    12e8:	mov	x1, x0
    12ec:	mov	x0, x19
    12f0:	bl	1018 <read_referenced_name>
    12f4:	b	12b0 <read_referenced_name_from_attr+0x68>
    12f8:	mov	x4, x21
    12fc:	mov	x3, x20
    1300:	ldr	x2, [x6, #8]
    1304:	mov	x0, x19
    1308:	bl	1018 <read_referenced_name>
    130c:	b	12b0 <read_referenced_name_from_attr+0x68>
    1310:	ldr	x19, [x19, #8]
    1314:	ldr	x22, [x6, #8]
    1318:	mov	x2, x22
    131c:	ldr	x1, [x19, #48]
    1320:	ldr	x0, [x19, #40]
    1324:	bl	6c <find_unit>
    1328:	cbz	x0, 12b0 <read_referenced_name_from_attr+0x68>
    132c:	ldr	x2, [x0, #24]
    1330:	mov	x4, x21
    1334:	mov	x3, x20
    1338:	sub	x2, x22, x2
    133c:	mov	x1, x0
    1340:	mov	x0, x19
    1344:	bl	1018 <read_referenced_name>
    1348:	b	12b0 <read_referenced_name_from_attr+0x68>
    134c:	mov	x0, #0x0                   	// #0
    1350:	b	12b0 <read_referenced_name_from_attr+0x68>

0000000000001354 <find_address_ranges>:
    1354:	sub	sp, sp, #0x170
    1358:	stp	x29, x30, [sp, #48]
    135c:	add	x29, sp, #0x30
    1360:	stp	x19, x20, [sp, #64]
    1364:	stp	x21, x22, [sp, #80]
    1368:	stp	x23, x24, [sp, #96]
    136c:	stp	x25, x26, [sp, #112]
    1370:	stp	x27, x28, [sp, #128]
    1374:	str	x0, [sp, #192]
    1378:	str	x1, [sp, #200]
    137c:	mov	x24, x2
    1380:	str	x5, [sp, #224]
    1384:	str	x6, [sp, #184]
    1388:	str	w7, [sp, #236]
    138c:	ldr	x22, [sp, #392]
    1390:	add	x0, sp, #0x130
    1394:	str	x0, [sp, #216]
    1398:	mov	x25, x0
    139c:	add	x0, sp, #0xf0
    13a0:	str	x0, [sp, #208]
    13a4:	str	x25, [sp, #176]
    13a8:	mov	x28, x4
    13ac:	mov	x26, x3
    13b0:	ldr	x27, [sp, #368]
    13b4:	ldr	x0, [x24, #24]
    13b8:	cbz	x0, 17b0 <find_address_ranges+0x45c>
    13bc:	mov	x0, x24
    13c0:	bl	8f4 <read_uleb128>
    13c4:	mov	x1, x0
    13c8:	cbz	x0, 17b8 <find_address_ranges+0x464>
    13cc:	ldr	x3, [sp, #384]
    13d0:	ldr	x2, [sp, #376]
    13d4:	add	x0, x22, #0x58
    13d8:	bl	2c8 <lookup_abbrev>
    13dc:	mov	x20, x0
    13e0:	cbz	x0, 17c0 <find_address_ranges+0x46c>
    13e4:	ldr	x0, [sp, #408]
    13e8:	cbz	x0, 13f8 <find_address_ranges+0xa4>
    13ec:	ldr	w0, [x20, #8]
    13f0:	ldr	x1, [sp, #408]
    13f4:	str	w0, [x1]
    13f8:	ldr	x0, [x20, #16]
    13fc:	cbz	x0, 1628 <find_address_ranges+0x2d4>
    1400:	mov	x21, #0x0                   	// #0
    1404:	str	wzr, [sp, #168]
    1408:	str	xzr, [sp, #160]
    140c:	str	wzr, [sp, #232]
    1410:	mov	w23, #0x0                   	// #0
    1414:	str	xzr, [sp, #152]
    1418:	str	wzr, [sp, #172]
    141c:	str	xzr, [sp, #144]
    1420:	b	14e0 <find_address_ranges+0x18c>
    1424:	cmp	w0, #0x3
    1428:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    142c:	ldr	w0, [x20, #8]
    1430:	cmp	w0, #0x11
    1434:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1438:	ldr	w0, [sp, #304]
    143c:	cmp	w0, #0x4
    1440:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1444:	ldr	x0, [sp, #312]
    1448:	str	x0, [x22, #64]
    144c:	b	14d0 <find_address_ranges+0x17c>
    1450:	cmp	w0, #0x1b
    1454:	b.eq	1578 <find_address_ranges+0x224>  // b.none
    1458:	cmp	w0, #0x55
    145c:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1460:	ldr	w0, [sp, #304]
    1464:	cmp	w0, #0x2
    1468:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    146c:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1470:	ldr	x0, [sp, #312]
    1474:	str	x0, [sp, #160]
    1478:	mov	w0, #0x1                   	// #1
    147c:	str	w0, [sp, #168]
    1480:	b	14d0 <find_address_ranges+0x17c>
    1484:	ldr	w0, [sp, #304]
    1488:	cmp	w0, #0x1
    148c:	b.eq	14b0 <find_address_ranges+0x15c>  // b.none
    1490:	cmp	w0, #0x2
    1494:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1498:	ldr	x0, [sp, #312]
    149c:	str	x0, [sp, #152]
    14a0:	mov	w0, #0x1                   	// #1
    14a4:	str	w0, [sp, #232]
    14a8:	mov	w23, w0
    14ac:	b	14d0 <find_address_ranges+0x17c>
    14b0:	ldr	x0, [sp, #312]
    14b4:	str	x0, [sp, #152]
    14b8:	mov	w0, #0x1                   	// #1
    14bc:	mov	w23, w0
    14c0:	b	14d0 <find_address_ranges+0x17c>
    14c4:	ldr	w0, [x20, #8]
    14c8:	cmp	w0, #0x11
    14cc:	b.eq	155c <find_address_ranges+0x208>  // b.none
    14d0:	add	x21, x21, #0x1
    14d4:	ldr	x0, [x20, #16]
    14d8:	cmp	x0, x21
    14dc:	b.ls	159c <find_address_ranges+0x248>  // b.plast
    14e0:	lsl	x19, x21, #3
    14e4:	ldr	x0, [x20, #24]
    14e8:	add	x0, x0, x19
    14ec:	ldr	w0, [x0, #4]
    14f0:	str	x25, [sp]
    14f4:	mov	x7, x27
    14f8:	mov	x6, x28
    14fc:	mov	x5, x26
    1500:	ldr	w4, [x22, #48]
    1504:	ldr	w3, [x22, #40]
    1508:	ldr	w2, [x22, #44]
    150c:	mov	x1, x24
    1510:	bl	b18 <read_attribute>
    1514:	cbz	w0, 17d0 <find_address_ranges+0x47c>
    1518:	ldr	x0, [x20, #24]
    151c:	ldr	w0, [x0, x19]
    1520:	cmp	w0, #0x12
    1524:	b.eq	1484 <find_address_ranges+0x130>  // b.none
    1528:	b.hi	1450 <find_address_ranges+0xfc>  // b.pmore
    152c:	cmp	w0, #0x10
    1530:	b.eq	14c4 <find_address_ranges+0x170>  // b.none
    1534:	cmp	w0, #0x11
    1538:	b.ne	1424 <find_address_ranges+0xd0>  // b.any
    153c:	ldr	w0, [sp, #304]
    1540:	cmp	w0, #0x1
    1544:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1548:	ldr	x0, [sp, #312]
    154c:	str	x0, [sp, #144]
    1550:	mov	w0, #0x1                   	// #1
    1554:	str	w0, [sp, #172]
    1558:	b	14d0 <find_address_ranges+0x17c>
    155c:	ldr	w0, [sp, #304]
    1560:	cmp	w0, #0x2
    1564:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1568:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    156c:	ldr	x0, [sp, #312]
    1570:	str	x0, [x22, #56]
    1574:	b	14d0 <find_address_ranges+0x17c>
    1578:	ldr	w0, [x20, #8]
    157c:	cmp	w0, #0x11
    1580:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1584:	ldr	w0, [sp, #304]
    1588:	cmp	w0, #0x4
    158c:	b.ne	14d0 <find_address_ranges+0x17c>  // b.any
    1590:	ldr	x0, [sp, #312]
    1594:	str	x0, [x22, #72]
    1598:	b	14d0 <find_address_ranges+0x17c>
    159c:	ldr	w0, [x20, #8]
    15a0:	cmp	w0, #0x2e
    15a4:	ccmp	w0, #0x11, #0x4, ne  // ne = any
    15a8:	b.ne	1628 <find_address_ranges+0x2d4>  // b.any
    15ac:	ldr	w0, [sp, #168]
    15b0:	cbnz	w0, 1684 <find_address_ranges+0x330>
    15b4:	ldr	w0, [sp, #172]
    15b8:	cmp	w0, #0x0
    15bc:	ccmp	w23, #0x0, #0x4, ne  // ne = any
    15c0:	b.eq	1628 <find_address_ranges+0x2d4>  // b.none
    15c4:	ldr	x1, [sp, #152]
    15c8:	ldr	x2, [sp, #144]
    15cc:	add	x0, x1, x2
    15d0:	ldr	w3, [sp, #232]
    15d4:	cmp	w3, #0x0
    15d8:	csel	x0, x0, x1, ne  // ne = any
    15dc:	str	x2, [sp, #304]
    15e0:	str	x0, [sp, #312]
    15e4:	str	x22, [sp, #320]
    15e8:	ldr	x0, [sp, #216]
    15ec:	ldp	x0, x1, [x0]
    15f0:	ldr	x2, [sp, #208]
    15f4:	stp	x0, x1, [x2]
    15f8:	str	x22, [x2, #16]
    15fc:	ldr	x5, [sp, #400]
    1600:	ldr	x4, [sp, #384]
    1604:	ldr	x3, [sp, #376]
    1608:	ldr	x1, [sp, #200]
    160c:	ldr	x0, [sp, #192]
    1610:	bl	554 <add_unit_addr>
    1614:	mov	w19, w0
    1618:	cbz	w0, 17d4 <find_address_ranges+0x480>
    161c:	ldr	w0, [x20, #8]
    1620:	cmp	w0, #0x11
    1624:	b.eq	17c8 <find_address_ranges+0x474>  // b.none
    1628:	ldr	w0, [x20, #12]
    162c:	cbz	w0, 13b4 <find_address_ranges+0x60>
    1630:	str	xzr, [sp, #40]
    1634:	ldr	x0, [sp, #400]
    1638:	str	x0, [sp, #32]
    163c:	str	x22, [sp, #24]
    1640:	ldr	x0, [sp, #384]
    1644:	str	x0, [sp, #16]
    1648:	ldr	x0, [sp, #376]
    164c:	str	x0, [sp, #8]
    1650:	str	x27, [sp]
    1654:	ldr	w7, [sp, #236]
    1658:	ldr	x6, [sp, #184]
    165c:	ldr	x5, [sp, #224]
    1660:	mov	x4, x28
    1664:	mov	x3, x26
    1668:	mov	x2, x24
    166c:	ldr	x1, [sp, #200]
    1670:	ldr	x0, [sp, #192]
    1674:	bl	1354 <find_address_ranges>
    1678:	mov	w19, w0
    167c:	cbnz	w0, 13b4 <find_address_ranges+0x60>
    1680:	b	17d4 <find_address_ranges+0x480>
    1684:	ldr	x0, [sp, #160]
    1688:	ldr	x1, [sp, #184]
    168c:	cmp	x0, x1
    1690:	b.cs	16e0 <find_address_ranges+0x38c>  // b.hs, b.nlast
    1694:	adrp	x0, 0 <is_highest_address>
    1698:	add	x0, x0, #0x0
    169c:	str	x0, [sp, #304]
    16a0:	ldr	x0, [sp, #224]
    16a4:	str	x0, [sp, #312]
    16a8:	ldr	x1, [sp, #160]
    16ac:	add	x0, x0, x1
    16b0:	str	x0, [sp, #320]
    16b4:	ldr	x0, [sp, #184]
    16b8:	sub	x0, x0, x1
    16bc:	str	x0, [sp, #328]
    16c0:	ldr	w0, [sp, #236]
    16c4:	str	w0, [sp, #336]
    16c8:	ldr	x0, [sp, #376]
    16cc:	str	x0, [sp, #344]
    16d0:	ldr	x0, [sp, #384]
    16d4:	str	x0, [sp, #352]
    16d8:	str	wzr, [sp, #360]
    16dc:	b	1704 <find_address_ranges+0x3b0>
    16e0:	mov	w2, #0x0                   	// #0
    16e4:	adrp	x1, 0 <is_highest_address>
    16e8:	add	x1, x1, #0x0
    16ec:	ldr	x0, [sp, #384]
    16f0:	ldr	x3, [sp, #376]
    16f4:	blr	x3
    16f8:	mov	w19, #0x0                   	// #0
    16fc:	b	17d4 <find_address_ranges+0x480>
    1700:	str	x23, [sp, #144]
    1704:	ldr	w19, [sp, #360]
    1708:	cbnz	w19, 16f8 <find_address_ranges+0x3a4>
    170c:	ldr	w1, [x22, #48]
    1710:	ldr	x23, [sp, #176]
    1714:	mov	x0, x23
    1718:	bl	9a0 <read_address>
    171c:	mov	x21, x0
    1720:	ldr	w1, [x22, #48]
    1724:	mov	x0, x23
    1728:	bl	9a0 <read_address>
    172c:	mov	x23, x0
    1730:	orr	x0, x21, x0
    1734:	cbz	x0, 1794 <find_address_ranges+0x440>
    1738:	ldr	w1, [x22, #48]
    173c:	mov	x0, x21
    1740:	bl	0 <is_highest_address>
    1744:	cbnz	w0, 1700 <find_address_ranges+0x3ac>
    1748:	ldr	x0, [sp, #144]
    174c:	add	x21, x21, x0
    1750:	str	x21, [sp, #280]
    1754:	add	x23, x23, x0
    1758:	str	x23, [sp, #288]
    175c:	str	x22, [sp, #296]
    1760:	add	x0, sp, #0x200
    1764:	ldp	x0, x1, [x0, #-232]
    1768:	ldr	x2, [sp, #208]
    176c:	stp	x0, x1, [x2]
    1770:	str	x22, [x2, #16]
    1774:	ldr	x5, [sp, #400]
    1778:	ldr	x4, [sp, #384]
    177c:	ldr	x3, [sp, #376]
    1780:	ldr	x1, [sp, #200]
    1784:	ldr	x0, [sp, #192]
    1788:	bl	554 <add_unit_addr>
    178c:	cbnz	w0, 1704 <find_address_ranges+0x3b0>
    1790:	b	16f8 <find_address_ranges+0x3a4>
    1794:	ldr	w0, [sp, #360]
    1798:	cbnz	w0, 17d4 <find_address_ranges+0x480>
    179c:	ldr	w0, [x20, #8]
    17a0:	cmp	w0, #0x11
    17a4:	b.ne	1628 <find_address_ranges+0x2d4>  // b.any
    17a8:	ldr	w19, [sp, #168]
    17ac:	b	17d4 <find_address_ranges+0x480>
    17b0:	mov	w19, #0x1                   	// #1
    17b4:	b	17d4 <find_address_ranges+0x480>
    17b8:	mov	w19, #0x1                   	// #1
    17bc:	b	17d4 <find_address_ranges+0x480>
    17c0:	mov	w19, #0x0                   	// #0
    17c4:	b	17d4 <find_address_ranges+0x480>
    17c8:	mov	w19, #0x1                   	// #1
    17cc:	b	17d4 <find_address_ranges+0x480>
    17d0:	mov	w19, w0
    17d4:	mov	w0, w19
    17d8:	ldp	x19, x20, [sp, #64]
    17dc:	ldp	x21, x22, [sp, #80]
    17e0:	ldp	x23, x24, [sp, #96]
    17e4:	ldp	x25, x26, [sp, #112]
    17e8:	ldp	x27, x28, [sp, #128]
    17ec:	ldp	x29, x30, [sp, #48]
    17f0:	add	sp, sp, #0x170
    17f4:	ret

00000000000017f8 <function_addrs_compare>:
    17f8:	ldr	x4, [x0]
    17fc:	ldr	x3, [x1]
    1800:	cmp	x4, x3
    1804:	b.cc	184c <function_addrs_compare+0x54>  // b.lo, b.ul, b.last
    1808:	mov	x2, x0
    180c:	mov	w0, #0x1                   	// #1
    1810:	b.hi	185c <function_addrs_compare+0x64>  // b.pmore
    1814:	ldr	x4, [x2, #8]
    1818:	ldr	x3, [x1, #8]
    181c:	cmp	x4, x3
    1820:	b.cc	185c <function_addrs_compare+0x64>  // b.lo, b.ul, b.last
    1824:	b.hi	1854 <function_addrs_compare+0x5c>  // b.pmore
    1828:	stp	x29, x30, [sp, #-16]!
    182c:	mov	x29, sp
    1830:	ldr	x1, [x1, #16]
    1834:	ldr	x0, [x2, #16]
    1838:	ldr	x1, [x1]
    183c:	ldr	x0, [x0]
    1840:	bl	0 <__asan_internal_strcmp>
    1844:	ldp	x29, x30, [sp], #16
    1848:	ret
    184c:	mov	w0, #0xffffffff            	// #-1
    1850:	ret
    1854:	mov	w0, #0xffffffff            	// #-1
    1858:	ret
    185c:	ret

0000000000001860 <read_function_entry>:
    1860:	sub	sp, sp, #0x120
    1864:	stp	x29, x30, [sp, #16]
    1868:	add	x29, sp, #0x10
    186c:	stp	x19, x20, [sp, #32]
    1870:	str	x0, [sp, #176]
    1874:	str	x3, [sp, #184]
    1878:	str	x5, [sp, #208]
    187c:	str	x6, [sp, #112]
    1880:	str	x7, [sp, #120]
    1884:	ldr	x0, [x4, #24]
    1888:	cbz	x0, 1f1c <read_function_entry+0x6bc>
    188c:	stp	x21, x22, [sp, #48]
    1890:	stp	x23, x24, [sp, #64]
    1894:	stp	x25, x26, [sp, #80]
    1898:	stp	x27, x28, [sp, #96]
    189c:	mov	x23, x1
    18a0:	mov	x21, x2
    18a4:	mov	x27, x4
    18a8:	add	x0, x2, #0x58
    18ac:	str	x0, [sp, #136]
    18b0:	add	x28, sp, #0xe0
    18b4:	adrp	x0, 0 <is_highest_address>
    18b8:	add	x0, x0, #0x0
    18bc:	str	x0, [sp, #216]
    18c0:	mov	x0, x27
    18c4:	bl	8f4 <read_uleb128>
    18c8:	mov	x1, x0
    18cc:	cbz	x0, 1f24 <read_function_entry+0x6c4>
    18d0:	ldr	x3, [sp, #120]
    18d4:	ldr	x2, [sp, #112]
    18d8:	ldr	x0, [sp, #136]
    18dc:	bl	2c8 <lookup_abbrev>
    18e0:	mov	x19, x0
    18e4:	cbz	x0, 1f3c <read_function_entry+0x6dc>
    18e8:	ldr	w0, [x0, #8]
    18ec:	cmp	w0, #0x2e
    18f0:	ccmp	w0, #0x3, #0x4, ne  // ne = any
    18f4:	cset	w25, eq  // eq = none
    18f8:	cmp	w0, #0x1d
    18fc:	csinc	w25, w25, wzr, ne  // ne = any
    1900:	b.eq	1958 <read_function_entry+0xf8>  // b.none
    1904:	cbnz	w25, 194c <read_function_entry+0xec>
    1908:	ldr	x0, [sp, #288]
    190c:	str	x0, [sp, #192]
    1910:	mov	x22, #0x0                   	// #0
    1914:	ldr	x26, [x19, #16]
    1918:	cbz	x26, 1c0c <read_function_entry+0x3ac>
    191c:	str	wzr, [sp, #128]
    1920:	str	wzr, [sp, #148]
    1924:	str	xzr, [sp, #160]
    1928:	str	wzr, [sp, #200]
    192c:	str	wzr, [sp, #168]
    1930:	str	xzr, [sp, #152]
    1934:	str	wzr, [sp, #172]
    1938:	mov	x26, #0x0                   	// #0
    193c:	mov	x20, #0x0                   	// #0
    1940:	mov	w0, #0x1                   	// #1
    1944:	str	w0, [sp, #204]
    1948:	b	1a18 <read_function_entry+0x1b8>
    194c:	ldr	x0, [sp, #288]
    1950:	str	x0, [sp, #192]
    1954:	b	1960 <read_function_entry+0x100>
    1958:	ldr	x0, [sp, #296]
    195c:	str	x0, [sp, #192]
    1960:	ldr	x3, [sp, #120]
    1964:	ldr	x2, [sp, #112]
    1968:	mov	x1, #0x28                  	// #40
    196c:	ldr	x0, [sp, #176]
    1970:	bl	0 <__asan_backtrace_alloc>
    1974:	mov	x22, x0
    1978:	cbz	x0, 1f54 <read_function_entry+0x6f4>
    197c:	mov	x2, #0x28                  	// #40
    1980:	mov	w1, #0x0                   	// #0
    1984:	bl	0 <__asan_internal_memset>
    1988:	b	1914 <read_function_entry+0xb4>
    198c:	ldr	x0, [x19, #24]
    1990:	ldr	w0, [x0, x24]
    1994:	cmp	w0, #0x11
    1998:	b.ne	1a5c <read_function_entry+0x1fc>  // b.any
    199c:	ldr	w0, [sp, #224]
    19a0:	cmp	w0, #0x1
    19a4:	b.eq	19bc <read_function_entry+0x15c>  // b.none
    19a8:	cbz	w25, 1a08 <read_function_entry+0x1a8>
    19ac:	ldr	w0, [sp, #224]
    19b0:	cmp	w0, #0x1
    19b4:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    19b8:	b	19c8 <read_function_entry+0x168>
    19bc:	ldr	x0, [sp, #232]
    19c0:	str	x0, [sp, #184]
    19c4:	cbz	w25, 1a08 <read_function_entry+0x1a8>
    19c8:	ldr	x26, [sp, #232]
    19cc:	mov	w0, #0x1                   	// #1
    19d0:	str	w0, [sp, #172]
    19d4:	b	1a08 <read_function_entry+0x1a8>
    19d8:	cmp	w0, #0x3
    19dc:	b.ne	1a00 <read_function_entry+0x1a0>  // b.any
    19e0:	ldr	x0, [x22]
    19e4:	cbnz	x0, 1a08 <read_function_entry+0x1a8>
    19e8:	ldr	w0, [sp, #224]
    19ec:	cmp	w0, #0x4
    19f0:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    19f4:	ldr	x0, [sp, #232]
    19f8:	str	x0, [x22]
    19fc:	b	1a08 <read_function_entry+0x1a8>
    1a00:	cmp	w0, #0x11
    1a04:	b.eq	19ac <read_function_entry+0x14c>  // b.none
    1a08:	add	x20, x20, #0x1
    1a0c:	ldr	x0, [x19, #16]
    1a10:	cmp	x0, x20
    1a14:	b.ls	1c24 <read_function_entry+0x3c4>  // b.plast
    1a18:	lsl	x24, x20, #3
    1a1c:	ldr	x0, [x19, #24]
    1a20:	add	x0, x0, x24
    1a24:	ldr	w0, [x0, #4]
    1a28:	str	x28, [sp]
    1a2c:	ldr	x7, [x23, #8]
    1a30:	ldr	x6, [x23, #112]
    1a34:	ldr	x5, [x23, #104]
    1a38:	ldr	w4, [x21, #48]
    1a3c:	ldr	w3, [x21, #40]
    1a40:	ldr	w2, [x21, #44]
    1a44:	mov	x1, x27
    1a48:	bl	b18 <read_attribute>
    1a4c:	cbz	w0, 1b64 <read_function_entry+0x304>
    1a50:	ldr	w0, [x19, #8]
    1a54:	cmp	w0, #0x11
    1a58:	b.eq	198c <read_function_entry+0x12c>  // b.none
    1a5c:	cbz	w25, 1a08 <read_function_entry+0x1a8>
    1a60:	ldr	x0, [x19, #24]
    1a64:	add	x2, x0, x24
    1a68:	ldr	w0, [x0, x24]
    1a6c:	cmp	w0, #0x55
    1a70:	b.eq	1be8 <read_function_entry+0x388>  // b.none
    1a74:	b.hi	1ac0 <read_function_entry+0x260>  // b.pmore
    1a78:	cmp	w0, #0x12
    1a7c:	b.eq	1ba4 <read_function_entry+0x344>  // b.none
    1a80:	b.ls	19d8 <read_function_entry+0x178>  // b.plast
    1a84:	cmp	w0, #0x31
    1a88:	b.eq	1a94 <read_function_entry+0x234>  // b.none
    1a8c:	cmp	w0, #0x47
    1a90:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1a94:	ldr	w0, [sp, #128]
    1a98:	cbnz	w0, 1a08 <read_function_entry+0x1a8>
    1a9c:	ldr	x5, [sp, #120]
    1aa0:	ldr	x4, [sp, #112]
    1aa4:	mov	x3, x28
    1aa8:	mov	x1, x21
    1aac:	mov	x0, x23
    1ab0:	bl	1248 <read_referenced_name_from_attr>
    1ab4:	cbz	x0, 1a08 <read_function_entry+0x1a8>
    1ab8:	str	x0, [x22]
    1abc:	b	1a08 <read_function_entry+0x1a8>
    1ac0:	cmp	w0, #0x59
    1ac4:	b.eq	1b8c <read_function_entry+0x32c>  // b.none
    1ac8:	b.ls	1b00 <read_function_entry+0x2a0>  // b.plast
    1acc:	cmp	w0, #0x6e
    1ad0:	b.eq	1ae0 <read_function_entry+0x280>  // b.none
    1ad4:	mov	w1, #0x2007                	// #8199
    1ad8:	cmp	w0, w1
    1adc:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1ae0:	ldr	w0, [sp, #224]
    1ae4:	cmp	w0, #0x4
    1ae8:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1aec:	ldr	x0, [sp, #232]
    1af0:	str	x0, [x22]
    1af4:	mov	w0, #0x1                   	// #1
    1af8:	str	w0, [sp, #128]
    1afc:	b	1a08 <read_function_entry+0x1a8>
    1b00:	cmp	w0, #0x58
    1b04:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1b08:	ldr	w0, [sp, #224]
    1b0c:	cmp	w0, #0x2
    1b10:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1b14:	ldr	x0, [sp, #232]
    1b18:	cbnz	x0, 1b28 <read_function_entry+0x2c8>
    1b1c:	ldr	x0, [sp, #216]
    1b20:	str	x0, [x22, #8]
    1b24:	b	1a08 <read_function_entry+0x1a8>
    1b28:	sub	x1, x0, #0x1
    1b2c:	ldr	x2, [sp, #208]
    1b30:	ldr	x2, [x2, #48]
    1b34:	cmp	x1, x2
    1b38:	b.cs	1b54 <read_function_entry+0x2f4>  // b.hs, b.nlast
    1b3c:	ldr	x1, [sp, #208]
    1b40:	ldr	x1, [x1, #56]
    1b44:	add	x0, x1, x0, lsl #3
    1b48:	ldur	x0, [x0, #-8]
    1b4c:	str	x0, [x22, #8]
    1b50:	b	1a08 <read_function_entry+0x1a8>
    1b54:	adrp	x1, 0 <is_highest_address>
    1b58:	add	x1, x1, #0x0
    1b5c:	mov	x0, x27
    1b60:	bl	62c <dwarf_buf_error>
    1b64:	mov	w20, #0x0                   	// #0
    1b68:	ldp	x21, x22, [sp, #48]
    1b6c:	ldp	x23, x24, [sp, #64]
    1b70:	ldp	x25, x26, [sp, #80]
    1b74:	ldp	x27, x28, [sp, #96]
    1b78:	mov	w0, w20
    1b7c:	ldp	x19, x20, [sp, #32]
    1b80:	ldp	x29, x30, [sp, #16]
    1b84:	add	sp, sp, #0x120
    1b88:	ret
    1b8c:	ldr	w0, [sp, #224]
    1b90:	cmp	w0, #0x2
    1b94:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1b98:	ldr	x0, [sp, #232]
    1b9c:	str	w0, [x22, #16]
    1ba0:	b	1a08 <read_function_entry+0x1a8>
    1ba4:	ldr	w0, [sp, #224]
    1ba8:	cmp	w0, #0x1
    1bac:	b.eq	1bd4 <read_function_entry+0x374>  // b.none
    1bb0:	cmp	w0, #0x2
    1bb4:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1bb8:	ldr	x0, [sp, #232]
    1bbc:	str	x0, [sp, #152]
    1bc0:	mov	w0, #0x1                   	// #1
    1bc4:	str	w0, [sp, #200]
    1bc8:	ldr	w0, [sp, #204]
    1bcc:	str	w0, [sp, #168]
    1bd0:	b	1a08 <read_function_entry+0x1a8>
    1bd4:	ldr	x0, [sp, #232]
    1bd8:	str	x0, [sp, #152]
    1bdc:	mov	w0, #0x1                   	// #1
    1be0:	str	w0, [sp, #168]
    1be4:	b	1a08 <read_function_entry+0x1a8>
    1be8:	ldr	w0, [sp, #224]
    1bec:	cmp	w0, #0x2
    1bf0:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1bf4:	b.ne	1a08 <read_function_entry+0x1a8>  // b.any
    1bf8:	ldr	x0, [sp, #232]
    1bfc:	str	x0, [sp, #160]
    1c00:	mov	w0, #0x1                   	// #1
    1c04:	str	w0, [sp, #148]
    1c08:	b	1a08 <read_function_entry+0x1a8>
    1c0c:	str	x26, [sp, #160]
    1c10:	str	x26, [sp, #152]
    1c14:	str	wzr, [sp, #148]
    1c18:	str	wzr, [sp, #200]
    1c1c:	str	wzr, [sp, #168]
    1c20:	str	wzr, [sp, #172]
    1c24:	cbz	w25, 1e8c <read_function_entry+0x62c>
    1c28:	ldr	x0, [x22]
    1c2c:	cbz	x0, 1d20 <read_function_entry+0x4c0>
    1c30:	ldr	w0, [sp, #148]
    1c34:	cbnz	w0, 1d3c <read_function_entry+0x4dc>
    1c38:	ldr	w0, [sp, #172]
    1c3c:	cmp	w0, #0x0
    1c40:	ldr	w0, [sp, #168]
    1c44:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    1c48:	b.eq	1e74 <read_function_entry+0x614>  // b.none
    1c4c:	ldr	x0, [sp, #152]
    1c50:	add	x4, x0, x26
    1c54:	ldr	w1, [sp, #200]
    1c58:	cmp	w1, #0x0
    1c5c:	ldr	x7, [sp, #192]
    1c60:	ldr	x6, [sp, #120]
    1c64:	ldr	x5, [sp, #112]
    1c68:	csel	x4, x4, x0, ne  // ne = any
    1c6c:	mov	x3, x26
    1c70:	mov	x2, x22
    1c74:	mov	x1, x23
    1c78:	ldr	x0, [sp, #176]
    1c7c:	bl	490 <add_function_range>
    1c80:	mov	w20, w0
    1c84:	cbz	w0, 1e60 <read_function_entry+0x600>
    1c88:	ldr	w0, [x19, #12]
    1c8c:	cbz	w0, 1e94 <read_function_entry+0x634>
    1c90:	mov	x2, #0x20                  	// #32
    1c94:	mov	w1, #0x0                   	// #0
    1c98:	mov	x0, x28
    1c9c:	bl	0 <__asan_internal_memset>
    1ca0:	str	x28, [sp, #8]
    1ca4:	ldr	x0, [sp, #288]
    1ca8:	str	x0, [sp]
    1cac:	ldr	x7, [sp, #120]
    1cb0:	ldr	x6, [sp, #112]
    1cb4:	ldr	x5, [sp, #208]
    1cb8:	mov	x4, x27
    1cbc:	ldr	x3, [sp, #184]
    1cc0:	mov	x2, x21
    1cc4:	mov	x1, x23
    1cc8:	ldr	x0, [sp, #176]
    1ccc:	bl	1860 <read_function_entry>
    1cd0:	cbz	w0, 1f04 <read_function_entry+0x6a4>
    1cd4:	ldr	x0, [sp, #248]
    1cd8:	cbz	x0, 1e94 <read_function_entry+0x634>
    1cdc:	ldr	x3, [sp, #120]
    1ce0:	ldr	x2, [sp, #112]
    1ce4:	mov	x1, x28
    1ce8:	ldr	x0, [sp, #176]
    1cec:	bl	0 <__asan_backtrace_vector_release>
    1cf0:	cbz	w0, 1f04 <read_function_entry+0x6a4>
    1cf4:	ldr	x19, [sp, #224]
    1cf8:	adrp	x3, 0 <is_highest_address>
    1cfc:	add	x3, x3, #0x0
    1d00:	mov	x2, #0x18                  	// #24
    1d04:	ldr	x1, [sp, #248]
    1d08:	mov	x0, x19
    1d0c:	bl	0 <__asan_backtrace_qsort>
    1d10:	str	x19, [x22, #24]
    1d14:	ldr	x0, [sp, #248]
    1d18:	str	x0, [x22, #32]
    1d1c:	b	1e94 <read_function_entry+0x634>
    1d20:	ldr	x4, [sp, #120]
    1d24:	ldr	x3, [sp, #112]
    1d28:	mov	x2, #0x28                  	// #40
    1d2c:	mov	x1, x22
    1d30:	ldr	x0, [sp, #176]
    1d34:	bl	0 <__asan_backtrace_free>
    1d38:	b	1e8c <read_function_entry+0x62c>
    1d3c:	ldr	x0, [x23, #96]
    1d40:	ldr	x1, [sp, #160]
    1d44:	cmp	x0, x1
    1d48:	b.ls	1da0 <read_function_entry+0x540>  // b.plast
    1d4c:	adrp	x1, 0 <is_highest_address>
    1d50:	add	x1, x1, #0x0
    1d54:	str	x1, [sp, #224]
    1d58:	ldr	x1, [x23, #88]
    1d5c:	str	x1, [sp, #232]
    1d60:	ldr	x2, [sp, #160]
    1d64:	add	x1, x1, x2
    1d68:	str	x1, [sp, #240]
    1d6c:	sub	x0, x0, x2
    1d70:	str	x0, [sp, #248]
    1d74:	ldr	w0, [x23, #120]
    1d78:	str	w0, [sp, #256]
    1d7c:	ldr	x0, [sp, #112]
    1d80:	str	x0, [sp, #264]
    1d84:	ldr	x0, [sp, #120]
    1d88:	str	x0, [sp, #272]
    1d8c:	str	wzr, [sp, #280]
    1d90:	ldr	x0, [sp, #184]
    1d94:	str	x0, [sp, #128]
    1d98:	mov	x26, x28
    1d9c:	b	1dd4 <read_function_entry+0x574>
    1da0:	mov	w2, #0x0                   	// #0
    1da4:	adrp	x1, 0 <is_highest_address>
    1da8:	add	x1, x1, #0x0
    1dac:	ldr	x0, [sp, #120]
    1db0:	ldr	x3, [sp, #112]
    1db4:	blr	x3
    1db8:	mov	w20, #0x0                   	// #0
    1dbc:	ldp	x21, x22, [sp, #48]
    1dc0:	ldp	x23, x24, [sp, #64]
    1dc4:	ldp	x25, x26, [sp, #80]
    1dc8:	ldp	x27, x28, [sp, #96]
    1dcc:	b	1b78 <read_function_entry+0x318>
    1dd0:	str	x25, [sp, #128]
    1dd4:	ldr	w20, [sp, #280]
    1dd8:	cbnz	w20, 1db8 <read_function_entry+0x558>
    1ddc:	ldr	w1, [x21, #48]
    1de0:	mov	x0, x26
    1de4:	bl	9a0 <read_address>
    1de8:	mov	x24, x0
    1dec:	ldr	w1, [x21, #48]
    1df0:	mov	x0, x26
    1df4:	bl	9a0 <read_address>
    1df8:	mov	x25, x0
    1dfc:	orr	x0, x24, x0
    1e00:	cbz	x0, 1e44 <read_function_entry+0x5e4>
    1e04:	ldr	w1, [x21, #48]
    1e08:	mov	x0, x24
    1e0c:	bl	0 <is_highest_address>
    1e10:	cbnz	w0, 1dd0 <read_function_entry+0x570>
    1e14:	ldr	x7, [sp, #192]
    1e18:	ldr	x6, [sp, #120]
    1e1c:	ldr	x5, [sp, #112]
    1e20:	ldr	x0, [sp, #128]
    1e24:	add	x4, x25, x0
    1e28:	add	x3, x24, x0
    1e2c:	mov	x2, x22
    1e30:	mov	x1, x23
    1e34:	ldr	x0, [sp, #176]
    1e38:	bl	490 <add_function_range>
    1e3c:	cbnz	w0, 1dd4 <read_function_entry+0x574>
    1e40:	b	1db8 <read_function_entry+0x558>
    1e44:	ldr	w0, [sp, #280]
    1e48:	cbz	w0, 1c88 <read_function_entry+0x428>
    1e4c:	ldp	x21, x22, [sp, #48]
    1e50:	ldp	x23, x24, [sp, #64]
    1e54:	ldp	x25, x26, [sp, #80]
    1e58:	ldp	x27, x28, [sp, #96]
    1e5c:	b	1b78 <read_function_entry+0x318>
    1e60:	ldp	x21, x22, [sp, #48]
    1e64:	ldp	x23, x24, [sp, #64]
    1e68:	ldp	x25, x26, [sp, #80]
    1e6c:	ldp	x27, x28, [sp, #96]
    1e70:	b	1b78 <read_function_entry+0x318>
    1e74:	ldr	x4, [sp, #120]
    1e78:	ldr	x3, [sp, #112]
    1e7c:	mov	x2, #0x28                  	// #40
    1e80:	mov	x1, x22
    1e84:	ldr	x0, [sp, #176]
    1e88:	bl	0 <__asan_backtrace_free>
    1e8c:	ldr	w0, [x19, #12]
    1e90:	cbnz	w0, 1eb4 <read_function_entry+0x654>
    1e94:	ldr	x0, [x27, #24]
    1e98:	cbnz	x0, 18c0 <read_function_entry+0x60>
    1e9c:	mov	w20, #0x1                   	// #1
    1ea0:	ldp	x21, x22, [sp, #48]
    1ea4:	ldp	x23, x24, [sp, #64]
    1ea8:	ldp	x25, x26, [sp, #80]
    1eac:	ldp	x27, x28, [sp, #96]
    1eb0:	b	1b78 <read_function_entry+0x318>
    1eb4:	ldr	x0, [sp, #296]
    1eb8:	str	x0, [sp, #8]
    1ebc:	ldr	x0, [sp, #288]
    1ec0:	str	x0, [sp]
    1ec4:	ldr	x7, [sp, #120]
    1ec8:	ldr	x6, [sp, #112]
    1ecc:	ldr	x5, [sp, #208]
    1ed0:	mov	x4, x27
    1ed4:	ldr	x3, [sp, #184]
    1ed8:	mov	x2, x21
    1edc:	mov	x1, x23
    1ee0:	ldr	x0, [sp, #176]
    1ee4:	bl	1860 <read_function_entry>
    1ee8:	mov	w20, w0
    1eec:	cbnz	w0, 1e94 <read_function_entry+0x634>
    1ef0:	ldp	x21, x22, [sp, #48]
    1ef4:	ldp	x23, x24, [sp, #64]
    1ef8:	ldp	x25, x26, [sp, #80]
    1efc:	ldp	x27, x28, [sp, #96]
    1f00:	b	1b78 <read_function_entry+0x318>
    1f04:	mov	w20, #0x0                   	// #0
    1f08:	ldp	x21, x22, [sp, #48]
    1f0c:	ldp	x23, x24, [sp, #64]
    1f10:	ldp	x25, x26, [sp, #80]
    1f14:	ldp	x27, x28, [sp, #96]
    1f18:	b	1b78 <read_function_entry+0x318>
    1f1c:	mov	w20, #0x1                   	// #1
    1f20:	b	1b78 <read_function_entry+0x318>
    1f24:	mov	w20, #0x1                   	// #1
    1f28:	ldp	x21, x22, [sp, #48]
    1f2c:	ldp	x23, x24, [sp, #64]
    1f30:	ldp	x25, x26, [sp, #80]
    1f34:	ldp	x27, x28, [sp, #96]
    1f38:	b	1b78 <read_function_entry+0x318>
    1f3c:	mov	w20, #0x0                   	// #0
    1f40:	ldp	x21, x22, [sp, #48]
    1f44:	ldp	x23, x24, [sp, #64]
    1f48:	ldp	x25, x26, [sp, #80]
    1f4c:	ldp	x27, x28, [sp, #96]
    1f50:	b	1b78 <read_function_entry+0x318>
    1f54:	mov	w20, #0x0                   	// #0
    1f58:	ldp	x21, x22, [sp, #48]
    1f5c:	ldp	x23, x24, [sp, #64]
    1f60:	ldp	x25, x26, [sp, #80]
    1f64:	ldp	x27, x28, [sp, #96]
    1f68:	b	1b78 <read_function_entry+0x318>

0000000000001f6c <free_line_header>:
    1f6c:	stp	x29, x30, [sp, #-48]!
    1f70:	mov	x29, sp
    1f74:	stp	x19, x20, [sp, #16]
    1f78:	stp	x21, x22, [sp, #32]
    1f7c:	mov	x20, x0
    1f80:	mov	x19, x1
    1f84:	mov	x21, x2
    1f88:	mov	x22, x3
    1f8c:	ldr	x2, [x1, #32]
    1f90:	cbnz	x2, 1fc0 <free_line_header+0x54>
    1f94:	ldr	x2, [x19, #48]
    1f98:	mov	x4, x22
    1f9c:	mov	x3, x21
    1fa0:	lsl	x2, x2, #3
    1fa4:	ldr	x1, [x19, #56]
    1fa8:	mov	x0, x20
    1fac:	bl	0 <__asan_backtrace_free>
    1fb0:	ldp	x19, x20, [sp, #16]
    1fb4:	ldp	x21, x22, [sp, #32]
    1fb8:	ldp	x29, x30, [sp], #48
    1fbc:	ret
    1fc0:	mov	x4, x3
    1fc4:	mov	x3, x21
    1fc8:	lsl	x2, x2, #3
    1fcc:	ldr	x1, [x1, #40]
    1fd0:	bl	0 <__asan_backtrace_free>
    1fd4:	b	1f94 <free_line_header+0x28>

0000000000001fd8 <free_abbrevs>:
    1fd8:	stp	x29, x30, [sp, #-64]!
    1fdc:	mov	x29, sp
    1fe0:	stp	x19, x20, [sp, #16]
    1fe4:	stp	x21, x22, [sp, #32]
    1fe8:	str	x23, [sp, #48]
    1fec:	mov	x21, x0
    1ff0:	mov	x20, x1
    1ff4:	mov	x22, x2
    1ff8:	mov	x23, x3
    1ffc:	ldr	x2, [x1]
    2000:	cbz	x2, 203c <free_abbrevs+0x64>
    2004:	mov	x19, #0x0                   	// #0
    2008:	ldr	x5, [x20, #8]
    200c:	add	x5, x5, x19, lsl #5
    2010:	ldr	x2, [x5, #16]
    2014:	mov	x4, x23
    2018:	mov	x3, x22
    201c:	lsl	x2, x2, #3
    2020:	ldr	x1, [x5, #24]
    2024:	mov	x0, x21
    2028:	bl	0 <__asan_backtrace_free>
    202c:	add	x19, x19, #0x1
    2030:	ldr	x2, [x20]
    2034:	cmp	x2, x19
    2038:	b.hi	2008 <free_abbrevs+0x30>  // b.pmore
    203c:	mov	x4, x23
    2040:	mov	x3, x22
    2044:	lsl	x2, x2, #5
    2048:	ldr	x1, [x20, #8]
    204c:	mov	x0, x21
    2050:	bl	0 <__asan_backtrace_free>
    2054:	str	xzr, [x20]
    2058:	str	xzr, [x20, #8]
    205c:	ldp	x19, x20, [sp, #16]
    2060:	ldp	x21, x22, [sp, #32]
    2064:	ldr	x23, [sp, #48]
    2068:	ldp	x29, x30, [sp], #64
    206c:	ret

0000000000002070 <dwarf_lookup_pc>:
    2070:	sub	sp, sp, #0x1d0
    2074:	stp	x29, x30, [sp, #16]
    2078:	add	x29, sp, #0x10
    207c:	stp	x23, x24, [sp, #64]
    2080:	stp	x25, x26, [sp, #80]
    2084:	mov	x24, x0
    2088:	str	x3, [sp, #120]
    208c:	str	x4, [sp, #128]
    2090:	mov	x26, x6
    2094:	mov	w0, #0x1                   	// #1
    2098:	str	w0, [x6]
    209c:	ldr	x6, [x1, #32]
    20a0:	cbz	x6, 2118 <dwarf_lookup_pc+0xa8>
    20a4:	stp	x19, x20, [sp, #32]
    20a8:	stp	x27, x28, [sp, #96]
    20ac:	mov	x23, x1
    20b0:	mov	x20, x2
    20b4:	mov	x27, x5
    20b8:	ldr	x2, [x1, #24]
    20bc:	mov	x4, x6
    20c0:	mov	x3, #0x0                   	// #0
    20c4:	b	20cc <dwarf_lookup_pc+0x5c>
    20c8:	mov	x4, x7
    20cc:	cmp	x4, x3
    20d0:	b.ls	2110 <dwarf_lookup_pc+0xa0>  // b.plast
    20d4:	add	x0, x4, x3
    20d8:	lsr	x7, x0, #1
    20dc:	and	x0, x0, #0xfffffffffffffffe
    20e0:	add	x0, x0, x7
    20e4:	lsl	x1, x0, #3
    20e8:	mov	x5, x1
    20ec:	add	x1, x2, x1
    20f0:	ldr	x0, [x2, x0, lsl #3]
    20f4:	cmp	x0, x20
    20f8:	b.hi	20c8 <dwarf_lookup_pc+0x58>  // b.pmore
    20fc:	ldr	x0, [x1, #8]
    2100:	cmp	x0, x20
    2104:	b.hi	310c <dwarf_lookup_pc+0x109c>  // b.pmore
    2108:	add	x3, x7, #0x1
    210c:	b	20cc <dwarf_lookup_pc+0x5c>
    2110:	ldp	x19, x20, [sp, #32]
    2114:	ldp	x27, x28, [sp, #96]
    2118:	str	wzr, [x26]
    211c:	mov	w0, #0x0                   	// #0
    2120:	ldp	x23, x24, [sp, #64]
    2124:	ldp	x25, x26, [sp, #80]
    2128:	ldp	x29, x30, [sp, #16]
    212c:	add	sp, sp, #0x1d0
    2130:	ret
    2134:	add	x0, x22, #0x68
    2138:	ldar	x21, [x0]
    213c:	cmn	x21, #0x1
    2140:	b.ne	3178 <dwarf_lookup_pc+0x1108>  // b.any
    2144:	sub	x19, x19, #0x18
    2148:	ldr	x22, [x19, #16]
    214c:	ldr	x21, [x22, #104]
    2150:	ldr	x0, [x23, #24]
    2154:	cmp	x0, x19
    2158:	b.cs	3178 <dwarf_lookup_pc+0x1108>  // b.hs, b.nlast
    215c:	ldur	x0, [x19, #-24]
    2160:	cmp	x0, x20
    2164:	b.hi	3178 <dwarf_lookup_pc+0x1108>  // b.pmore
    2168:	ldur	x0, [x19, #-16]
    216c:	cmp	x0, x20
    2170:	b.ls	3178 <dwarf_lookup_pc+0x1108>  // b.plast
    2174:	ldr	w0, [x24, #8]
    2178:	cbz	w0, 213c <dwarf_lookup_pc+0xcc>
    217c:	b	2134 <dwarf_lookup_pc+0xc4>
    2180:	add	x0, x22, #0x68
    2184:	ldar	x21, [x0]
    2188:	b	3180 <dwarf_lookup_pc+0x1110>
    218c:	ldr	x0, [x19, #16]
    2190:	mov	x25, x0
    2194:	str	x0, [sp, #136]
    2198:	mov	x2, #0x18                  	// #24
    219c:	mov	w1, #0x0                   	// #0
    21a0:	add	x0, sp, #0xe0
    21a4:	bl	0 <__asan_internal_memset>
    21a8:	str	xzr, [sp, #248]
    21ac:	mov	x2, #0x40                  	// #64
    21b0:	mov	w1, #0x0                   	// #0
    21b4:	add	x0, sp, #0x100
    21b8:	bl	0 <__asan_internal_memset>
    21bc:	ldr	x1, [x25, #56]
    21c0:	ldr	x0, [x23, #80]
    21c4:	cmp	x1, x0
    21c8:	b.cc	2298 <dwarf_lookup_pc+0x228>  // b.lo, b.ul, b.last
    21cc:	mov	w2, #0x0                   	// #0
    21d0:	adrp	x1, 0 <is_highest_address>
    21d4:	add	x1, x1, #0x0
    21d8:	mov	x0, x27
    21dc:	ldr	x3, [sp, #128]
    21e0:	blr	x3
    21e4:	ldr	x0, [sp, #240]
    21e8:	ldr	x1, [sp, #232]
    21ec:	add	x0, x0, x1
    21f0:	str	x0, [sp, #240]
    21f4:	str	xzr, [sp, #232]
    21f8:	mov	x3, x27
    21fc:	ldr	x25, [sp, #128]
    2200:	mov	x2, x25
    2204:	add	x1, sp, #0xe0
    2208:	mov	x0, x24
    220c:	bl	0 <__asan_backtrace_vector_release>
    2210:	mov	x3, x27
    2214:	mov	x2, x25
    2218:	add	x1, sp, #0x100
    221c:	mov	x0, x24
    2220:	bl	1f6c <free_line_header>
    2224:	str	xzr, [sp, #144]
    2228:	mov	x0, #0xffffffffffffffff    	// #-1
    222c:	str	x0, [sp, #136]
    2230:	mov	x28, #0x0                   	// #0
    2234:	mov	w0, #0x0                   	// #0
    2238:	ldr	w1, [x24, #8]
    223c:	cbnz	w1, 2e00 <dwarf_lookup_pc+0xd90>
    2240:	ldr	x1, [sp, #144]
    2244:	str	x1, [x22, #112]
    2248:	str	x21, [x22, #120]
    224c:	str	x28, [x22, #128]
    2250:	ldr	x1, [sp, #136]
    2254:	str	x1, [x22, #104]
    2258:	ldr	x1, [sp, #136]
    225c:	cmn	x1, #0x1
    2260:	b.ne	2e58 <dwarf_lookup_pc+0xde8>  // b.any
    2264:	cbz	w0, 2e2c <dwarf_lookup_pc+0xdbc>
    2268:	mov	x6, x26
    226c:	mov	x5, x27
    2270:	ldr	x4, [sp, #128]
    2274:	ldr	x3, [sp, #120]
    2278:	mov	x2, x20
    227c:	mov	x1, x23
    2280:	mov	x0, x24
    2284:	bl	2070 <dwarf_lookup_pc>
    2288:	ldp	x19, x20, [sp, #32]
    228c:	ldp	x21, x22, [sp, #48]
    2290:	ldp	x27, x28, [sp, #96]
    2294:	b	2120 <dwarf_lookup_pc+0xb0>
    2298:	adrp	x2, 0 <is_highest_address>
    229c:	add	x2, x2, #0x0
    22a0:	str	x2, [sp, #320]
    22a4:	ldr	x2, [x23, #72]
    22a8:	str	x2, [sp, #328]
    22ac:	add	x2, x2, x1
    22b0:	str	x2, [sp, #336]
    22b4:	sub	x0, x0, x1
    22b8:	str	x0, [sp, #344]
    22bc:	ldr	w0, [x23, #120]
    22c0:	str	w0, [sp, #352]
    22c4:	ldr	x0, [sp, #128]
    22c8:	str	x0, [sp, #360]
    22cc:	str	x27, [sp, #368]
    22d0:	str	wzr, [sp, #376]
    22d4:	add	x0, sp, #0x140
    22d8:	bl	6f4 <read_uint32>
    22dc:	mov	w1, w0
    22e0:	mov	w25, #0x0                   	// #0
    22e4:	mov	x2, #0xffffffff            	// #4294967295
    22e8:	cmp	x2, w0, uxtw
    22ec:	b.eq	250c <dwarf_lookup_pc+0x49c>  // b.none
    22f0:	str	x1, [sp, #344]
    22f4:	add	x0, sp, #0x140
    22f8:	bl	868 <read_uint16>
    22fc:	and	w0, w0, #0xffff
    2300:	str	w0, [sp, #256]
    2304:	sub	w0, w0, #0x2
    2308:	cmp	w0, #0x2
    230c:	b.hi	2520 <dwarf_lookup_pc+0x4b0>  // b.pmore
    2310:	add	x0, sp, #0x140
    2314:	mov	w1, w25
    2318:	mov	x25, x0
    231c:	bl	844 <read_offset>
    2320:	mov	x1, x0
    2324:	ldp	x2, x3, [sp, #320]
    2328:	stp	x2, x3, [sp, #384]
    232c:	ldp	x2, x3, [sp, #336]
    2330:	stp	x2, x3, [sp, #400]
    2334:	ldp	x2, x3, [sp, #352]
    2338:	stp	x2, x3, [sp, #416]
    233c:	ldp	x2, x3, [sp, #368]
    2340:	stp	x2, x3, [sp, #432]
    2344:	str	x0, [sp, #408]
    2348:	mov	x0, x25
    234c:	bl	688 <advance>
    2350:	cbz	w0, 21e4 <dwarf_lookup_pc+0x174>
    2354:	add	x0, sp, #0x180
    2358:	bl	8c0 <read_byte>
    235c:	and	w0, w0, #0xff
    2360:	str	w0, [sp, #260]
    2364:	ldr	w0, [sp, #256]
    2368:	cmp	w0, #0x3
    236c:	b.gt	2534 <dwarf_lookup_pc+0x4c4>
    2370:	mov	w0, #0x1                   	// #1
    2374:	str	w0, [sp, #264]
    2378:	add	x25, sp, #0x180
    237c:	mov	x0, x25
    2380:	bl	8c0 <read_byte>
    2384:	ldr	x28, [sp, #400]
    2388:	mov	x1, #0x1                   	// #1
    238c:	mov	x0, x25
    2390:	bl	688 <advance>
    2394:	mov	w1, #0x0                   	// #0
    2398:	cbz	w0, 23ac <dwarf_lookup_pc+0x33c>
    239c:	ldrb	w1, [x28]
    23a0:	eor	w1, w1, #0xffffff80
    23a4:	sub	w1, w1, #0x80
    23a8:	sxtb	w1, w1
    23ac:	str	w1, [sp, #268]
    23b0:	add	x25, sp, #0x180
    23b4:	mov	x0, x25
    23b8:	bl	8c0 <read_byte>
    23bc:	and	w0, w0, #0xff
    23c0:	str	w0, [sp, #272]
    23c4:	mov	x0, x25
    23c8:	bl	8c0 <read_byte>
    23cc:	and	w1, w0, #0xff
    23d0:	str	w1, [sp, #276]
    23d4:	ldr	x0, [sp, #400]
    23d8:	str	x0, [sp, #280]
    23dc:	sub	w1, w1, #0x1
    23e0:	mov	x0, x25
    23e4:	bl	688 <advance>
    23e8:	cbz	w0, 21e4 <dwarf_lookup_pc+0x174>
    23ec:	str	xzr, [sp, #288]
    23f0:	ldr	x25, [sp, #400]
    23f4:	ldr	x28, [sp, #408]
    23f8:	add	x28, x25, x28
    23fc:	cmp	x25, x28
    2400:	b.cs	2434 <dwarf_lookup_pc+0x3c4>  // b.hs, b.nlast
    2404:	ldrb	w0, [x25]
    2408:	cbz	w0, 2434 <dwarf_lookup_pc+0x3c4>
    240c:	sub	x1, x28, x25
    2410:	mov	x0, x25
    2414:	bl	0 <__asan_internal_strnlen>
    2418:	add	x0, x0, #0x1
    241c:	add	x25, x25, x0
    2420:	ldr	x0, [sp, #288]
    2424:	add	x0, x0, #0x1
    2428:	str	x0, [sp, #288]
    242c:	cmp	x28, x25
    2430:	b.hi	2404 <dwarf_lookup_pc+0x394>  // b.pmore
    2434:	str	xzr, [sp, #296]
    2438:	ldr	x1, [sp, #288]
    243c:	cbnz	x1, 2548 <dwarf_lookup_pc+0x4d8>
    2440:	ldr	x0, [sp, #400]
    2444:	ldrb	w0, [x0]
    2448:	mov	x28, #0x0                   	// #0
    244c:	add	x1, sp, #0x180
    2450:	cbz	w0, 2494 <dwarf_lookup_pc+0x424>
    2454:	str	x21, [sp, #144]
    2458:	mov	x25, x1
    245c:	ldr	w0, [sp, #440]
    2460:	cbnz	w0, 2cf4 <dwarf_lookup_pc+0xc84>
    2464:	ldr	x21, [sp, #296]
    2468:	mov	x0, x25
    246c:	bl	ad8 <read_string>
    2470:	str	x0, [x21, x28]
    2474:	ldr	x0, [sp, #296]
    2478:	ldr	x0, [x0, x28]
    247c:	cbz	x0, 2cfc <dwarf_lookup_pc+0xc8c>
    2480:	add	x28, x28, #0x8
    2484:	ldr	x0, [sp, #400]
    2488:	ldrb	w0, [x0]
    248c:	cbnz	w0, 245c <dwarf_lookup_pc+0x3ec>
    2490:	ldr	x21, [sp, #144]
    2494:	mov	x1, #0x1                   	// #1
    2498:	add	x0, sp, #0x180
    249c:	bl	688 <advance>
    24a0:	cbz	w0, 21e4 <dwarf_lookup_pc+0x174>
    24a4:	str	xzr, [sp, #304]
    24a8:	ldr	x25, [sp, #400]
    24ac:	ldr	x28, [sp, #408]
    24b0:	add	x28, x25, x28
    24b4:	cmp	x25, x28
    24b8:	b.cc	2594 <dwarf_lookup_pc+0x524>  // b.lo, b.ul, b.last
    24bc:	ldr	x3, [sp, #368]
    24c0:	ldr	x2, [sp, #360]
    24c4:	ldr	x1, [sp, #304]
    24c8:	lsl	x1, x1, #3
    24cc:	mov	x0, x24
    24d0:	bl	0 <__asan_backtrace_alloc>
    24d4:	str	x0, [sp, #312]
    24d8:	cbz	x0, 21e4 <dwarf_lookup_pc+0x174>
    24dc:	ldr	x0, [sp, #400]
    24e0:	ldrb	w0, [x0]
    24e4:	cbz	w0, 273c <dwarf_lookup_pc+0x6cc>
    24e8:	mov	x25, #0x0                   	// #0
    24ec:	add	x0, sp, #0x180
    24f0:	str	x21, [sp, #144]
    24f4:	str	x22, [sp, #152]
    24f8:	str	x19, [sp, #160]
    24fc:	str	x23, [sp, #168]
    2500:	str	x20, [sp, #176]
    2504:	mov	x22, x0
    2508:	b	26b8 <dwarf_lookup_pc+0x648>
    250c:	add	x0, sp, #0x140
    2510:	bl	774 <read_uint64>
    2514:	mov	x1, x0
    2518:	mov	w25, #0x1                   	// #1
    251c:	b	22f0 <dwarf_lookup_pc+0x280>
    2520:	adrp	x1, 0 <is_highest_address>
    2524:	add	x1, x1, #0x0
    2528:	add	x0, sp, #0x140
    252c:	bl	62c <dwarf_buf_error>
    2530:	b	21e4 <dwarf_lookup_pc+0x174>
    2534:	add	x0, sp, #0x180
    2538:	bl	8c0 <read_byte>
    253c:	and	w0, w0, #0xff
    2540:	str	w0, [sp, #264]
    2544:	b	2378 <dwarf_lookup_pc+0x308>
    2548:	ldr	x3, [sp, #368]
    254c:	ldr	x2, [sp, #360]
    2550:	lsl	x1, x1, #3
    2554:	mov	x0, x24
    2558:	bl	0 <__asan_backtrace_alloc>
    255c:	str	x0, [sp, #296]
    2560:	cbnz	x0, 2440 <dwarf_lookup_pc+0x3d0>
    2564:	b	21e4 <dwarf_lookup_pc+0x174>
    2568:	mov	x0, #0x1                   	// #1
    256c:	b	25d0 <dwarf_lookup_pc+0x560>
    2570:	mov	x0, #0x1                   	// #1
    2574:	b	25f0 <dwarf_lookup_pc+0x580>
    2578:	mov	x0, #0x1                   	// #1
    257c:	add	x25, x25, x0
    2580:	ldr	x0, [sp, #304]
    2584:	add	x0, x0, #0x1
    2588:	str	x0, [sp, #304]
    258c:	cmp	x28, x25
    2590:	b.ls	24bc <dwarf_lookup_pc+0x44c>  // b.plast
    2594:	ldrb	w0, [x25]
    2598:	cbz	w0, 24bc <dwarf_lookup_pc+0x44c>
    259c:	sub	x1, x28, x25
    25a0:	mov	x0, x25
    25a4:	bl	0 <__asan_internal_strnlen>
    25a8:	mov	x1, x0
    25ac:	add	x0, x0, #0x1
    25b0:	add	x2, x25, x0
    25b4:	ldrsb	w0, [x25, x0]
    25b8:	tbz	w0, #31, 2568 <dwarf_lookup_pc+0x4f8>
    25bc:	mov	x0, #0x1                   	// #1
    25c0:	add	x25, x25, x1
    25c4:	add	x0, x0, #0x1
    25c8:	ldrsb	w1, [x25, x0]
    25cc:	tbnz	w1, #31, 25c4 <dwarf_lookup_pc+0x554>
    25d0:	add	x3, x2, x0
    25d4:	ldrsb	w0, [x2, x0]
    25d8:	tbz	w0, #31, 2570 <dwarf_lookup_pc+0x500>
    25dc:	mov	x0, #0x1                   	// #1
    25e0:	sub	x2, x3, #0x1
    25e4:	add	x0, x0, #0x1
    25e8:	ldrsb	w1, [x2, x0]
    25ec:	tbnz	w1, #31, 25e4 <dwarf_lookup_pc+0x574>
    25f0:	add	x25, x3, x0
    25f4:	ldrsb	w0, [x3, x0]
    25f8:	tbz	w0, #31, 2578 <dwarf_lookup_pc+0x508>
    25fc:	mov	x0, #0x1                   	// #1
    2600:	sub	x2, x25, #0x1
    2604:	add	x0, x0, #0x1
    2608:	ldrsb	w1, [x2, x0]
    260c:	tbnz	w1, #31, 2604 <dwarf_lookup_pc+0x594>
    2610:	b	257c <dwarf_lookup_pc+0x50c>
    2614:	sub	x1, x0, #0x1
    2618:	ldr	x2, [sp, #288]
    261c:	cmp	x1, x2
    2620:	b.cs	2700 <dwarf_lookup_pc+0x690>  // b.hs, b.nlast
    2624:	ldr	x1, [sp, #296]
    2628:	add	x0, x1, x0, lsl #3
    262c:	ldur	x28, [x0, #-8]
    2630:	mov	x0, x28
    2634:	bl	0 <__asan_internal_strlen>
    2638:	mov	x20, x0
    263c:	mov	x0, x19
    2640:	bl	0 <__asan_internal_strlen>
    2644:	mov	x23, x0
    2648:	add	x1, x20, x0
    264c:	ldr	x3, [sp, #368]
    2650:	ldr	x2, [sp, #360]
    2654:	add	x1, x1, #0x2
    2658:	mov	x0, x24
    265c:	bl	0 <__asan_backtrace_alloc>
    2660:	mov	x21, x0
    2664:	cbz	x0, 2d34 <dwarf_lookup_pc+0xcc4>
    2668:	mov	x2, x20
    266c:	mov	x1, x28
    2670:	bl	0 <__asan_internal_memcpy>
    2674:	mov	w0, #0x2f                  	// #47
    2678:	strb	w0, [x21, x20]
    267c:	add	x0, x20, #0x1
    2680:	add	x2, x23, #0x1
    2684:	mov	x1, x19
    2688:	add	x0, x21, x0
    268c:	bl	0 <__asan_internal_memcpy>
    2690:	ldr	x0, [sp, #312]
    2694:	str	x21, [x0, x25]
    2698:	mov	x0, x22
    269c:	bl	8f4 <read_uleb128>
    26a0:	mov	x0, x22
    26a4:	bl	8f4 <read_uleb128>
    26a8:	add	x25, x25, #0x8
    26ac:	ldr	x0, [sp, #400]
    26b0:	ldrb	w0, [x0]
    26b4:	cbz	w0, 2728 <dwarf_lookup_pc+0x6b8>
    26b8:	ldr	w0, [sp, #440]
    26bc:	cbnz	w0, 2d04 <dwarf_lookup_pc+0xc94>
    26c0:	mov	x0, x22
    26c4:	bl	ad8 <read_string>
    26c8:	mov	x19, x0
    26cc:	cbz	x0, 2d1c <dwarf_lookup_pc+0xcac>
    26d0:	mov	x0, x22
    26d4:	bl	8f4 <read_uleb128>
    26d8:	ldrb	w1, [x19]
    26dc:	cmp	w1, #0x2f
    26e0:	b.eq	26f4 <dwarf_lookup_pc+0x684>  // b.none
    26e4:	cbnz	x0, 2614 <dwarf_lookup_pc+0x5a4>
    26e8:	ldr	x0, [sp, #136]
    26ec:	ldr	x28, [x0, #72]
    26f0:	cbnz	x28, 2630 <dwarf_lookup_pc+0x5c0>
    26f4:	ldr	x0, [sp, #312]
    26f8:	str	x19, [x0, x25]
    26fc:	b	2698 <dwarf_lookup_pc+0x628>
    2700:	ldr	x21, [sp, #144]
    2704:	ldr	x22, [sp, #152]
    2708:	ldr	x19, [sp, #160]
    270c:	ldr	x23, [sp, #168]
    2710:	ldr	x20, [sp, #176]
    2714:	adrp	x1, 0 <is_highest_address>
    2718:	add	x1, x1, #0x0
    271c:	add	x0, sp, #0x140
    2720:	bl	62c <dwarf_buf_error>
    2724:	b	21e4 <dwarf_lookup_pc+0x174>
    2728:	ldr	x21, [sp, #144]
    272c:	ldr	x22, [sp, #152]
    2730:	ldr	x19, [sp, #160]
    2734:	ldr	x23, [sp, #168]
    2738:	ldr	x20, [sp, #176]
    273c:	ldr	w0, [sp, #440]
    2740:	cbnz	w0, 21e4 <dwarf_lookup_pc+0x174>
    2744:	ldr	x0, [sp, #304]
    2748:	cbz	x0, 275c <dwarf_lookup_pc+0x6ec>
    274c:	ldr	x0, [sp, #312]
    2750:	ldr	x0, [x0]
    2754:	str	x0, [sp, #144]
    2758:	b	2768 <dwarf_lookup_pc+0x6f8>
    275c:	adrp	x0, 0 <is_highest_address>
    2760:	add	x0, x0, #0x0
    2764:	str	x0, [sp, #144]
    2768:	ldr	x0, [sp, #344]
    276c:	cbz	x0, 2ba0 <dwarf_lookup_pc+0xb30>
    2770:	ldr	x1, [sp, #144]
    2774:	mov	w2, #0x1                   	// #1
    2778:	mov	x4, #0x0                   	// #0
    277c:	mov	w3, #0x0                   	// #0
    2780:	add	x28, sp, #0x140
    2784:	adrp	x0, 0 <is_highest_address>
    2788:	add	x0, x0, #0x0
    278c:	str	x0, [sp, #216]
    2790:	add	x25, sp, #0xe0
    2794:	str	x21, [sp, #152]
    2798:	str	x22, [sp, #160]
    279c:	str	x19, [sp, #168]
    27a0:	mov	x22, x1
    27a4:	mov	w21, w2
    27a8:	mov	w19, w3
    27ac:	str	x20, [sp, #176]
    27b0:	mov	x20, x4
    27b4:	str	x27, [sp, #184]
    27b8:	str	x26, [sp, #192]
    27bc:	b	2828 <dwarf_lookup_pc+0x7b8>
    27c0:	sub	w26, w26, w1
    27c4:	ldr	w3, [sp, #272]
    27c8:	udiv	w1, w26, w3
    27cc:	add	w19, w1, w19
    27d0:	ldr	w2, [sp, #264]
    27d4:	ldr	w0, [sp, #260]
    27d8:	mul	w0, w19, w0
    27dc:	udiv	w0, w0, w2
    27e0:	add	x20, x20, x0
    27e4:	udiv	w0, w19, w2
    27e8:	msub	w19, w0, w2, w19
    27ec:	msub	w1, w1, w3, w26
    27f0:	ldr	w26, [sp, #268]
    27f4:	add	w1, w1, w26
    27f8:	add	w21, w21, w1
    27fc:	mov	x7, x25
    2800:	ldr	x6, [sp, #368]
    2804:	ldr	x5, [sp, #360]
    2808:	mov	w4, w21
    280c:	mov	x3, x22
    2810:	mov	x2, x20
    2814:	mov	x1, x23
    2818:	mov	x0, x24
    281c:	bl	3bc <add_line>
    2820:	ldr	x0, [sp, #344]
    2824:	cbz	x0, 2b88 <dwarf_lookup_pc+0xb18>
    2828:	mov	x0, x28
    282c:	bl	8c0 <read_byte>
    2830:	and	w26, w0, #0xff
    2834:	ldr	w1, [sp, #276]
    2838:	cmp	w1, w0, uxtb
    283c:	b.ls	27c0 <dwarf_lookup_pc+0x750>  // b.plast
    2840:	cbz	w26, 2890 <dwarf_lookup_pc+0x820>
    2844:	cmp	w26, #0x5
    2848:	b.eq	2b28 <dwarf_lookup_pc+0xab8>  // b.none
    284c:	b.hi	2a58 <dwarf_lookup_pc+0x9e8>  // b.pmore
    2850:	cmp	w26, #0x3
    2854:	b.eq	2aec <dwarf_lookup_pc+0xa7c>  // b.none
    2858:	b.ls	2a1c <dwarf_lookup_pc+0x9ac>  // b.plast
    285c:	cmp	w26, #0x4
    2860:	b.ne	2b48 <dwarf_lookup_pc+0xad8>  // b.any
    2864:	mov	x0, x28
    2868:	bl	8f4 <read_uleb128>
    286c:	cbz	x0, 2b80 <dwarf_lookup_pc+0xb10>
    2870:	sub	x1, x0, #0x1
    2874:	ldr	x2, [sp, #304]
    2878:	cmp	x1, x2
    287c:	b.cs	2afc <dwarf_lookup_pc+0xa8c>  // b.hs, b.nlast
    2880:	ldr	x1, [sp, #312]
    2884:	add	x0, x1, x0, lsl #3
    2888:	ldur	x22, [x0, #-8]
    288c:	b	2820 <dwarf_lookup_pc+0x7b0>
    2890:	mov	x0, x28
    2894:	bl	8f4 <read_uleb128>
    2898:	mov	x27, x0
    289c:	mov	x0, x28
    28a0:	bl	8c0 <read_byte>
    28a4:	and	w0, w0, #0xff
    28a8:	cmp	w0, #0x3
    28ac:	b.eq	28f0 <dwarf_lookup_pc+0x880>  // b.none
    28b0:	b.hi	28dc <dwarf_lookup_pc+0x86c>  // b.pmore
    28b4:	cmp	w0, #0x1
    28b8:	b.eq	2b6c <dwarf_lookup_pc+0xafc>  // b.none
    28bc:	cmp	w0, #0x2
    28c0:	b.ne	29f0 <dwarf_lookup_pc+0x980>  // b.any
    28c4:	ldr	x0, [sp, #136]
    28c8:	ldr	w1, [x0, #48]
    28cc:	mov	x0, x28
    28d0:	bl	9a0 <read_address>
    28d4:	mov	x20, x0
    28d8:	b	2820 <dwarf_lookup_pc+0x7b0>
    28dc:	cmp	w0, #0x4
    28e0:	b.ne	29f0 <dwarf_lookup_pc+0x980>  // b.any
    28e4:	mov	x0, x28
    28e8:	bl	8f4 <read_uleb128>
    28ec:	b	2820 <dwarf_lookup_pc+0x7b0>
    28f0:	mov	x0, x28
    28f4:	bl	ad8 <read_string>
    28f8:	mov	x22, x0
    28fc:	cbz	x0, 2d4c <dwarf_lookup_pc+0xcdc>
    2900:	mov	x0, x28
    2904:	bl	8f4 <read_uleb128>
    2908:	mov	x26, x0
    290c:	mov	x0, x28
    2910:	bl	8f4 <read_uleb128>
    2914:	mov	x0, x28
    2918:	bl	8f4 <read_uleb128>
    291c:	ldrb	w0, [x22]
    2920:	cmp	w0, #0x2f
    2924:	b.eq	2820 <dwarf_lookup_pc+0x7b0>  // b.none
    2928:	cbnz	w26, 29a4 <dwarf_lookup_pc+0x934>
    292c:	ldr	x0, [sp, #136]
    2930:	ldr	x0, [x0, #72]
    2934:	str	x0, [sp, #200]
    2938:	ldr	x0, [sp, #200]
    293c:	bl	0 <__asan_internal_strlen>
    2940:	mov	x26, x0
    2944:	mov	x0, x22
    2948:	bl	0 <__asan_internal_strlen>
    294c:	str	x0, [sp, #208]
    2950:	add	x1, x26, x0
    2954:	ldr	x3, [sp, #368]
    2958:	ldr	x2, [sp, #360]
    295c:	add	x1, x1, #0x2
    2960:	mov	x0, x24
    2964:	bl	0 <__asan_backtrace_alloc>
    2968:	mov	x27, x0
    296c:	cbz	x0, 2d68 <dwarf_lookup_pc+0xcf8>
    2970:	mov	x2, x26
    2974:	ldr	x1, [sp, #200]
    2978:	bl	0 <__asan_internal_memcpy>
    297c:	mov	w0, #0x2f                  	// #47
    2980:	strb	w0, [x27, x26]
    2984:	add	x0, x26, #0x1
    2988:	ldr	x2, [sp, #208]
    298c:	add	x2, x2, #0x1
    2990:	mov	x1, x22
    2994:	add	x0, x27, x0
    2998:	bl	0 <__asan_internal_memcpy>
    299c:	mov	x22, x27
    29a0:	b	2820 <dwarf_lookup_pc+0x7b0>
    29a4:	sub	w26, w26, #0x1
    29a8:	ldr	x0, [sp, #288]
    29ac:	cmp	x26, x0
    29b0:	b.cs	29c4 <dwarf_lookup_pc+0x954>  // b.hs, b.nlast
    29b4:	ldr	x0, [sp, #296]
    29b8:	ldr	x0, [x0, x26, lsl #3]
    29bc:	str	x0, [sp, #200]
    29c0:	b	2938 <dwarf_lookup_pc+0x8c8>
    29c4:	ldr	x21, [sp, #152]
    29c8:	ldr	x22, [sp, #160]
    29cc:	ldr	x19, [sp, #168]
    29d0:	ldr	x20, [sp, #176]
    29d4:	ldr	x27, [sp, #184]
    29d8:	ldr	x26, [sp, #192]
    29dc:	adrp	x1, 0 <is_highest_address>
    29e0:	add	x1, x1, #0x0
    29e4:	add	x0, sp, #0x140
    29e8:	bl	62c <dwarf_buf_error>
    29ec:	b	21e4 <dwarf_lookup_pc+0x174>
    29f0:	sub	x1, x27, #0x1
    29f4:	mov	x0, x28
    29f8:	bl	688 <advance>
    29fc:	cbnz	w0, 2820 <dwarf_lookup_pc+0x7b0>
    2a00:	ldr	x21, [sp, #152]
    2a04:	ldr	x22, [sp, #160]
    2a08:	ldr	x19, [sp, #168]
    2a0c:	ldr	x20, [sp, #176]
    2a10:	ldr	x27, [sp, #184]
    2a14:	ldr	x26, [sp, #192]
    2a18:	b	21e4 <dwarf_lookup_pc+0x174>
    2a1c:	cmp	w26, #0x1
    2a20:	b.eq	2ac4 <dwarf_lookup_pc+0xa54>  // b.none
    2a24:	cmp	w26, #0x2
    2a28:	b.ne	2b48 <dwarf_lookup_pc+0xad8>  // b.any
    2a2c:	mov	x0, x28
    2a30:	bl	8f4 <read_uleb128>
    2a34:	add	x19, x0, w19, uxtw
    2a38:	ldr	w1, [sp, #264]
    2a3c:	ldr	w0, [sp, #260]
    2a40:	mul	x0, x0, x19
    2a44:	udiv	x0, x0, x1
    2a48:	add	x20, x20, x0
    2a4c:	udiv	x0, x19, x1
    2a50:	msub	w19, w0, w1, w19
    2a54:	b	2820 <dwarf_lookup_pc+0x7b0>
    2a58:	cmp	w26, #0x9
    2a5c:	b.eq	2b34 <dwarf_lookup_pc+0xac4>  // b.none
    2a60:	b.ls	2a80 <dwarf_lookup_pc+0xa10>  // b.plast
    2a64:	cmp	w26, #0xb
    2a68:	b.ls	2820 <dwarf_lookup_pc+0x7b0>  // b.plast
    2a6c:	cmp	w26, #0xc
    2a70:	b.ne	2b48 <dwarf_lookup_pc+0xad8>  // b.any
    2a74:	mov	x0, x28
    2a78:	bl	8f4 <read_uleb128>
    2a7c:	b	2820 <dwarf_lookup_pc+0x7b0>
    2a80:	cmp	w26, #0x7
    2a84:	b.ls	2820 <dwarf_lookup_pc+0x7b0>  // b.plast
    2a88:	cmp	w26, #0x8
    2a8c:	b.ne	2b48 <dwarf_lookup_pc+0xad8>  // b.any
    2a90:	mov	w0, #0xff                  	// #255
    2a94:	sub	w0, w0, w1
    2a98:	ldr	w1, [sp, #272]
    2a9c:	udiv	w0, w0, w1
    2aa0:	add	w19, w0, w19
    2aa4:	ldr	w1, [sp, #264]
    2aa8:	ldr	w0, [sp, #260]
    2aac:	mul	w0, w19, w0
    2ab0:	udiv	w0, w0, w1
    2ab4:	add	x20, x20, x0
    2ab8:	udiv	w0, w19, w1
    2abc:	msub	w19, w0, w1, w19
    2ac0:	b	2820 <dwarf_lookup_pc+0x7b0>
    2ac4:	mov	x7, x25
    2ac8:	ldr	x6, [sp, #368]
    2acc:	ldr	x5, [sp, #360]
    2ad0:	mov	w4, w21
    2ad4:	mov	x3, x22
    2ad8:	mov	x2, x20
    2adc:	mov	x1, x23
    2ae0:	mov	x0, x24
    2ae4:	bl	3bc <add_line>
    2ae8:	b	2820 <dwarf_lookup_pc+0x7b0>
    2aec:	mov	x0, x28
    2af0:	bl	a10 <read_sleb128>
    2af4:	add	w21, w21, w0
    2af8:	b	2820 <dwarf_lookup_pc+0x7b0>
    2afc:	ldr	x21, [sp, #152]
    2b00:	ldr	x22, [sp, #160]
    2b04:	ldr	x19, [sp, #168]
    2b08:	ldr	x20, [sp, #176]
    2b0c:	ldr	x27, [sp, #184]
    2b10:	ldr	x26, [sp, #192]
    2b14:	adrp	x1, 0 <is_highest_address>
    2b18:	add	x1, x1, #0x0
    2b1c:	add	x0, sp, #0x140
    2b20:	bl	62c <dwarf_buf_error>
    2b24:	b	21e4 <dwarf_lookup_pc+0x174>
    2b28:	mov	x0, x28
    2b2c:	bl	8f4 <read_uleb128>
    2b30:	b	2820 <dwarf_lookup_pc+0x7b0>
    2b34:	mov	x0, x28
    2b38:	bl	868 <read_uint16>
    2b3c:	add	x20, x20, w0, uxth
    2b40:	mov	w19, #0x0                   	// #0
    2b44:	b	2820 <dwarf_lookup_pc+0x7b0>
    2b48:	sub	w26, w26, #0x1
    2b4c:	ldr	x0, [sp, #280]
    2b50:	ldrb	w26, [x0, w26, uxtw]
    2b54:	cbz	w26, 2820 <dwarf_lookup_pc+0x7b0>
    2b58:	mov	x0, x28
    2b5c:	bl	8f4 <read_uleb128>
    2b60:	subs	w26, w26, #0x1
    2b64:	b.ne	2b58 <dwarf_lookup_pc+0xae8>  // b.any
    2b68:	b	2820 <dwarf_lookup_pc+0x7b0>
    2b6c:	ldr	x22, [sp, #144]
    2b70:	mov	w19, w26
    2b74:	mov	w21, #0x1                   	// #1
    2b78:	mov	x20, #0x0                   	// #0
    2b7c:	b	2820 <dwarf_lookup_pc+0x7b0>
    2b80:	ldr	x22, [sp, #216]
    2b84:	b	2820 <dwarf_lookup_pc+0x7b0>
    2b88:	ldr	x21, [sp, #152]
    2b8c:	ldr	x22, [sp, #160]
    2b90:	ldr	x19, [sp, #168]
    2b94:	ldr	x20, [sp, #176]
    2b98:	ldr	x27, [sp, #184]
    2b9c:	ldr	x26, [sp, #192]
    2ba0:	ldr	w0, [sp, #376]
    2ba4:	cbnz	w0, 21e4 <dwarf_lookup_pc+0x174>
    2ba8:	ldr	x0, [sp, #248]
    2bac:	cbz	x0, 21e4 <dwarf_lookup_pc+0x174>
    2bb0:	add	x4, sp, #0xe0
    2bb4:	mov	x3, x27
    2bb8:	ldr	x25, [sp, #128]
    2bbc:	mov	x2, x25
    2bc0:	mov	x1, #0x18                  	// #24
    2bc4:	mov	x0, x24
    2bc8:	bl	0 <__asan_backtrace_vector_grow>
    2bcc:	cbz	x0, 21e4 <dwarf_lookup_pc+0x174>
    2bd0:	mov	x1, #0xffffffffffffffff    	// #-1
    2bd4:	str	x1, [x0]
    2bd8:	str	xzr, [x0, #8]
    2bdc:	str	wzr, [x0, #16]
    2be0:	str	wzr, [x0, #20]
    2be4:	mov	x3, x27
    2be8:	mov	x2, x25
    2bec:	add	x1, sp, #0xe0
    2bf0:	mov	x0, x24
    2bf4:	bl	0 <__asan_backtrace_vector_release>
    2bf8:	cbz	w0, 21e4 <dwarf_lookup_pc+0x174>
    2bfc:	ldr	x0, [sp, #224]
    2c00:	str	x0, [sp, #136]
    2c04:	adrp	x3, 0 <is_highest_address>
    2c08:	add	x3, x3, #0x0
    2c0c:	mov	x2, #0x18                  	// #24
    2c10:	ldr	x1, [sp, #248]
    2c14:	bl	0 <__asan_backtrace_qsort>
    2c18:	ldr	x0, [sp, #248]
    2c1c:	str	x0, [sp, #144]
    2c20:	ldr	w0, [x24, #8]
    2c24:	cbnz	w0, 30ec <dwarf_lookup_pc+0x107c>
    2c28:	add	x25, x23, #0x80
    2c2c:	ldr	x28, [x19, #16]
    2c30:	str	x25, [sp, #176]
    2c34:	adrp	x0, 0 <is_highest_address>
    2c38:	add	x0, x0, #0x0
    2c3c:	str	x0, [sp, #384]
    2c40:	ldr	x0, [x23, #56]
    2c44:	str	x0, [sp, #392]
    2c48:	ldr	x0, [x28]
    2c4c:	str	x0, [sp, #400]
    2c50:	ldr	x0, [x28, #8]
    2c54:	str	x0, [sp, #408]
    2c58:	ldr	w0, [x23, #120]
    2c5c:	str	w0, [sp, #416]
    2c60:	ldr	x0, [sp, #128]
    2c64:	str	x0, [sp, #424]
    2c68:	str	x27, [sp, #432]
    2c6c:	str	wzr, [sp, #440]
    2c70:	add	x1, sp, #0x100
    2c74:	add	x2, sp, #0x180
    2c78:	str	x21, [sp, #152]
    2c7c:	str	x22, [sp, #160]
    2c80:	str	x19, [sp, #168]
    2c84:	mov	x19, x0
    2c88:	mov	x21, x1
    2c8c:	mov	x22, x2
    2c90:	ldr	x0, [sp, #408]
    2c94:	cbz	x0, 2d84 <dwarf_lookup_pc+0xd14>
    2c98:	str	x25, [sp, #8]
    2c9c:	str	x25, [sp]
    2ca0:	mov	x7, x27
    2ca4:	mov	x6, x19
    2ca8:	mov	x5, x21
    2cac:	mov	x4, x22
    2cb0:	mov	x3, #0x0                   	// #0
    2cb4:	mov	x2, x28
    2cb8:	mov	x1, x23
    2cbc:	mov	x0, x24
    2cc0:	bl	1860 <read_function_entry>
    2cc4:	cbnz	w0, 2c90 <dwarf_lookup_pc+0xc20>
    2cc8:	ldr	x21, [sp, #152]
    2ccc:	ldr	x22, [sp, #160]
    2cd0:	ldr	x19, [sp, #168]
    2cd4:	mov	x28, #0x0                   	// #0
    2cd8:	mov	x3, x27
    2cdc:	ldr	x2, [sp, #128]
    2ce0:	add	x1, sp, #0x100
    2ce4:	mov	x0, x24
    2ce8:	bl	1f6c <free_line_header>
    2cec:	mov	w0, #0x1                   	// #1
    2cf0:	b	2238 <dwarf_lookup_pc+0x1c8>
    2cf4:	ldr	x21, [sp, #144]
    2cf8:	b	21e4 <dwarf_lookup_pc+0x174>
    2cfc:	ldr	x21, [sp, #144]
    2d00:	b	21e4 <dwarf_lookup_pc+0x174>
    2d04:	ldr	x21, [sp, #144]
    2d08:	ldr	x22, [sp, #152]
    2d0c:	ldr	x19, [sp, #160]
    2d10:	ldr	x23, [sp, #168]
    2d14:	ldr	x20, [sp, #176]
    2d18:	b	21e4 <dwarf_lookup_pc+0x174>
    2d1c:	ldr	x21, [sp, #144]
    2d20:	ldr	x22, [sp, #152]
    2d24:	ldr	x19, [sp, #160]
    2d28:	ldr	x23, [sp, #168]
    2d2c:	ldr	x20, [sp, #176]
    2d30:	b	21e4 <dwarf_lookup_pc+0x174>
    2d34:	ldr	x21, [sp, #144]
    2d38:	ldr	x22, [sp, #152]
    2d3c:	ldr	x19, [sp, #160]
    2d40:	ldr	x23, [sp, #168]
    2d44:	ldr	x20, [sp, #176]
    2d48:	b	21e4 <dwarf_lookup_pc+0x174>
    2d4c:	ldr	x21, [sp, #152]
    2d50:	ldr	x22, [sp, #160]
    2d54:	ldr	x19, [sp, #168]
    2d58:	ldr	x20, [sp, #176]
    2d5c:	ldr	x27, [sp, #184]
    2d60:	ldr	x26, [sp, #192]
    2d64:	b	21e4 <dwarf_lookup_pc+0x174>
    2d68:	ldr	x21, [sp, #152]
    2d6c:	ldr	x22, [sp, #160]
    2d70:	ldr	x19, [sp, #168]
    2d74:	ldr	x20, [sp, #176]
    2d78:	ldr	x27, [sp, #184]
    2d7c:	ldr	x26, [sp, #192]
    2d80:	b	21e4 <dwarf_lookup_pc+0x174>
    2d84:	ldr	x21, [sp, #152]
    2d88:	ldr	x22, [sp, #160]
    2d8c:	ldr	x19, [sp, #168]
    2d90:	ldr	x28, [x25, #24]
    2d94:	cbz	x28, 2cd4 <dwarf_lookup_pc+0xc64>
    2d98:	ldr	x0, [sp, #176]
    2d9c:	cbz	x0, 2de0 <dwarf_lookup_pc+0xd70>
    2da0:	mov	x3, x27
    2da4:	ldr	x2, [sp, #128]
    2da8:	ldr	x25, [sp, #176]
    2dac:	mov	x1, x25
    2db0:	mov	x0, x24
    2db4:	bl	0 <__asan_backtrace_vector_finish>
    2db8:	cbz	x0, 2cd4 <dwarf_lookup_pc+0xc64>
    2dbc:	str	xzr, [x25, #24]
    2dc0:	mov	x21, x0
    2dc4:	adrp	x3, 0 <is_highest_address>
    2dc8:	add	x3, x3, #0x0
    2dcc:	mov	x2, #0x18                  	// #24
    2dd0:	mov	x1, x28
    2dd4:	mov	x0, x21
    2dd8:	bl	0 <__asan_backtrace_qsort>
    2ddc:	b	2cd8 <dwarf_lookup_pc+0xc68>
    2de0:	mov	x3, x27
    2de4:	ldr	x2, [sp, #128]
    2de8:	add	x1, sp, #0x140
    2dec:	mov	x0, x24
    2df0:	bl	0 <__asan_backtrace_vector_release>
    2df4:	cbz	w0, 2cd4 <dwarf_lookup_pc+0xc64>
    2df8:	ldr	x21, [x25]
    2dfc:	b	2dc4 <dwarf_lookup_pc+0xd54>
    2e00:	add	x1, x22, #0x70
    2e04:	ldr	x2, [sp, #144]
    2e08:	stlr	x2, [x1]
    2e0c:	add	x1, x22, #0x78
    2e10:	stlr	x21, [x1]
    2e14:	add	x1, x22, #0x80
    2e18:	stlr	x28, [x1]
    2e1c:	add	x22, x22, #0x68
    2e20:	ldr	x1, [sp, #136]
    2e24:	stlr	x1, [x22]
    2e28:	b	2258 <dwarf_lookup_pc+0x1e8>
    2e2c:	mov	x4, #0x0                   	// #0
    2e30:	mov	w3, #0x0                   	// #0
    2e34:	mov	x2, #0x0                   	// #0
    2e38:	mov	x1, x20
    2e3c:	mov	x0, x27
    2e40:	ldr	x5, [sp, #120]
    2e44:	blr	x5
    2e48:	ldp	x19, x20, [sp, #32]
    2e4c:	ldp	x21, x22, [sp, #48]
    2e50:	ldp	x27, x28, [sp, #96]
    2e54:	b	2120 <dwarf_lookup_pc+0xb0>
    2e58:	ldr	x21, [sp, #136]
    2e5c:	b	318c <dwarf_lookup_pc+0x111c>
    2e60:	mov	x3, x1
    2e64:	cmp	x2, x3
    2e68:	b.cs	30b4 <dwarf_lookup_pc+0x1044>  // b.hs, b.nlast
    2e6c:	add	x0, x2, x3
    2e70:	lsr	x1, x0, #1
    2e74:	and	x0, x0, #0xfffffffffffffffe
    2e78:	add	x0, x0, x1
    2e7c:	add	x5, x21, x0, lsl #3
    2e80:	ldr	x0, [x21, x0, lsl #3]
    2e84:	cmp	x0, x20
    2e88:	b.hi	2e60 <dwarf_lookup_pc+0xdf0>  // b.pmore
    2e8c:	ldr	x0, [x5, #24]
    2e90:	cmp	x0, x20
    2e94:	b.hi	309c <dwarf_lookup_pc+0x102c>  // b.pmore
    2e98:	add	x2, x1, #0x1
    2e9c:	b	2e64 <dwarf_lookup_pc+0xdf4>
    2ea0:	ldr	x21, [x4, #64]
    2ea4:	cbz	x21, 2f28 <dwarf_lookup_pc+0xeb8>
    2ea8:	ldrb	w0, [x21]
    2eac:	cmp	w0, #0x2f
    2eb0:	b.eq	2f28 <dwarf_lookup_pc+0xeb8>  // b.none
    2eb4:	ldr	x0, [x4, #72]
    2eb8:	cbz	x0, 2f28 <dwarf_lookup_pc+0xeb8>
    2ebc:	mov	x0, x21
    2ec0:	bl	0 <__asan_internal_strlen>
    2ec4:	mov	x25, x0
    2ec8:	ldr	x0, [x19, #16]
    2ecc:	ldr	x23, [x0, #72]
    2ed0:	mov	x0, x23
    2ed4:	bl	0 <__asan_internal_strlen>
    2ed8:	mov	x22, x0
    2edc:	add	x1, x25, x0
    2ee0:	mov	x3, x27
    2ee4:	ldr	x2, [sp, #128]
    2ee8:	add	x1, x1, #0x2
    2eec:	mov	x0, x24
    2ef0:	bl	0 <__asan_backtrace_alloc>
    2ef4:	mov	x24, x0
    2ef8:	cbz	x0, 2f34 <dwarf_lookup_pc+0xec4>
    2efc:	mov	x2, x22
    2f00:	mov	x1, x23
    2f04:	bl	0 <__asan_internal_memcpy>
    2f08:	mov	w0, #0x2f                  	// #47
    2f0c:	strb	w0, [x24, x22]
    2f10:	add	x0, x22, #0x1
    2f14:	add	x2, x25, #0x1
    2f18:	mov	x1, x21
    2f1c:	add	x0, x24, x0
    2f20:	bl	0 <__asan_internal_memcpy>
    2f24:	mov	x21, x24
    2f28:	ldr	x0, [x19, #16]
    2f2c:	str	x21, [x0, #80]
    2f30:	b	30bc <dwarf_lookup_pc+0x104c>
    2f34:	str	wzr, [x26]
    2f38:	mov	w0, #0x0                   	// #0
    2f3c:	ldp	x19, x20, [sp, #32]
    2f40:	ldp	x21, x22, [sp, #48]
    2f44:	ldp	x27, x28, [sp, #96]
    2f48:	b	2120 <dwarf_lookup_pc+0xb0>
    2f4c:	mov	x4, #0x0                   	// #0
    2f50:	ldr	w3, [x5, #16]
    2f54:	ldr	x2, [x5, #8]
    2f58:	mov	x1, x20
    2f5c:	mov	x0, x27
    2f60:	ldr	x5, [sp, #120]
    2f64:	blr	x5
    2f68:	ldp	x19, x20, [sp, #32]
    2f6c:	ldp	x21, x22, [sp, #48]
    2f70:	ldp	x27, x28, [sp, #96]
    2f74:	b	2120 <dwarf_lookup_pc+0xb0>
    2f78:	mov	x6, x2
    2f7c:	cmp	x4, x6
    2f80:	b.cs	3070 <dwarf_lookup_pc+0x1000>  // b.hs, b.nlast
    2f84:	add	x0, x4, x6
    2f88:	lsr	x2, x0, #1
    2f8c:	and	x0, x0, #0xfffffffffffffffe
    2f90:	add	x0, x0, x2
    2f94:	lsl	x1, x0, #3
    2f98:	mov	x7, x1
    2f9c:	add	x1, x3, x1
    2fa0:	ldr	x0, [x3, x0, lsl #3]
    2fa4:	cmp	x0, x20
    2fa8:	b.hi	2f78 <dwarf_lookup_pc+0xf08>  // b.pmore
    2fac:	ldr	x0, [x1, #8]
    2fb0:	cmp	x0, x20
    2fb4:	b.hi	2fc0 <dwarf_lookup_pc+0xf50>  // b.pmore
    2fb8:	add	x4, x2, #0x1
    2fbc:	b	2f7c <dwarf_lookup_pc+0xf0c>
    2fc0:	asr	x0, x7, #3
    2fc4:	mov	x2, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    2fc8:	movk	x2, #0xaaab
    2fcc:	mul	x0, x0, x2
    2fd0:	add	x0, x0, #0x1
    2fd4:	cmp	x8, x0
    2fd8:	b.ls	3010 <dwarf_lookup_pc+0xfa0>  // b.plast
    2fdc:	ldr	x0, [x1, #24]
    2fe0:	cmp	x0, x20
    2fe4:	b.hi	3010 <dwarf_lookup_pc+0xfa0>  // b.pmore
    2fe8:	ldr	x0, [x1, #32]
    2fec:	cmp	x0, x20
    2ff0:	b.ls	3010 <dwarf_lookup_pc+0xfa0>  // b.plast
    2ff4:	add	x1, x1, #0x18
    2ff8:	sub	x0, x1, x3
    2ffc:	asr	x0, x0, #3
    3000:	mul	x0, x0, x2
    3004:	add	x0, x0, #0x1
    3008:	cmp	x8, x0
    300c:	b.hi	2fdc <dwarf_lookup_pc+0xf6c>  // b.pmore
    3010:	ldr	x19, [x1, #16]
    3014:	ldr	x0, [x5, #8]
    3018:	str	x0, [sp, #456]
    301c:	ldr	w0, [x5, #16]
    3020:	str	w0, [sp, #452]
    3024:	add	x5, sp, #0x1c4
    3028:	add	x4, sp, #0x1c8
    302c:	mov	x3, x27
    3030:	ldr	x21, [sp, #120]
    3034:	mov	x2, x21
    3038:	mov	x1, x19
    303c:	mov	x0, x20
    3040:	bl	178 <report_inlined_functions>
    3044:	cbnz	w0, 319c <dwarf_lookup_pc+0x112c>
    3048:	ldr	x4, [x19]
    304c:	ldr	w3, [sp, #452]
    3050:	ldr	x2, [sp, #456]
    3054:	mov	x1, x20
    3058:	mov	x0, x27
    305c:	blr	x21
    3060:	ldp	x19, x20, [sp, #32]
    3064:	ldp	x21, x22, [sp, #48]
    3068:	ldp	x27, x28, [sp, #96]
    306c:	b	2120 <dwarf_lookup_pc+0xb0>
    3070:	mov	x4, #0x0                   	// #0
    3074:	ldr	w3, [x5, #16]
    3078:	ldr	x2, [x5, #8]
    307c:	mov	x1, x20
    3080:	mov	x0, x27
    3084:	ldr	x5, [sp, #120]
    3088:	blr	x5
    308c:	ldp	x19, x20, [sp, #32]
    3090:	ldp	x21, x22, [sp, #48]
    3094:	ldp	x27, x28, [sp, #96]
    3098:	b	2120 <dwarf_lookup_pc+0xb0>
    309c:	ldr	x8, [x4, #128]
    30a0:	cbz	x8, 2f4c <dwarf_lookup_pc+0xedc>
    30a4:	ldr	x3, [x4, #120]
    30a8:	mov	x6, x8
    30ac:	mov	x4, #0x0                   	// #0
    30b0:	b	2f7c <dwarf_lookup_pc+0xf0c>
    30b4:	ldr	x0, [x4, #80]
    30b8:	cbz	x0, 2ea0 <dwarf_lookup_pc+0xe30>
    30bc:	ldr	x0, [x19, #16]
    30c0:	mov	x4, #0x0                   	// #0
    30c4:	mov	w3, #0x0                   	// #0
    30c8:	ldr	x2, [x0, #80]
    30cc:	mov	x1, x20
    30d0:	mov	x0, x27
    30d4:	ldr	x5, [sp, #120]
    30d8:	blr	x5
    30dc:	ldp	x19, x20, [sp, #32]
    30e0:	ldp	x21, x22, [sp, #48]
    30e4:	ldp	x27, x28, [sp, #96]
    30e8:	b	2120 <dwarf_lookup_pc+0xb0>
    30ec:	ldr	x28, [x19, #16]
    30f0:	add	x25, sp, #0x140
    30f4:	mov	x2, #0x20                  	// #32
    30f8:	mov	w1, #0x0                   	// #0
    30fc:	mov	x0, x25
    3100:	bl	0 <__asan_internal_memset>
    3104:	str	x21, [sp, #176]
    3108:	b	2c34 <dwarf_lookup_pc+0xbc4>
    310c:	stp	x21, x22, [sp, #48]
    3110:	mov	x19, x1
    3114:	asr	x0, x5, #3
    3118:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    311c:	movk	x5, #0xaaab
    3120:	mul	x0, x0, x5
    3124:	add	x0, x0, #0x1
    3128:	mov	x1, x5
    312c:	cmp	x6, x0
    3130:	b.ls	3168 <dwarf_lookup_pc+0x10f8>  // b.plast
    3134:	ldr	x0, [x19, #24]
    3138:	cmp	x0, x20
    313c:	b.hi	3168 <dwarf_lookup_pc+0x10f8>  // b.pmore
    3140:	ldr	x0, [x19, #32]
    3144:	cmp	x0, x20
    3148:	b.ls	3168 <dwarf_lookup_pc+0x10f8>  // b.plast
    314c:	add	x19, x19, #0x18
    3150:	sub	x0, x19, x2
    3154:	asr	x0, x0, #3
    3158:	mul	x0, x0, x1
    315c:	add	x0, x0, #0x1
    3160:	cmp	x6, x0
    3164:	b.hi	3134 <dwarf_lookup_pc+0x10c4>  // b.pmore
    3168:	ldr	x22, [x19, #16]
    316c:	ldr	x21, [x22, #104]
    3170:	cmp	x2, x19
    3174:	b.cc	215c <dwarf_lookup_pc+0xec>  // b.lo, b.ul, b.last
    3178:	ldr	w0, [x24, #8]
    317c:	cbnz	w0, 2180 <dwarf_lookup_pc+0x110>
    3180:	cbz	x21, 218c <dwarf_lookup_pc+0x11c>
    3184:	cmn	x21, #0x1
    3188:	b.eq	2e2c <dwarf_lookup_pc+0xdbc>  // b.none
    318c:	ldr	x4, [x19, #16]
    3190:	ldr	x3, [x4, #112]
    3194:	mov	x2, #0x0                   	// #0
    3198:	b	2e64 <dwarf_lookup_pc+0xdf4>
    319c:	ldp	x19, x20, [sp, #32]
    31a0:	ldp	x21, x22, [sp, #48]
    31a4:	ldp	x27, x28, [sp, #96]
    31a8:	b	2120 <dwarf_lookup_pc+0xb0>

00000000000031ac <dwarf_fileline>:
    31ac:	stp	x29, x30, [sp, #-96]!
    31b0:	mov	x29, sp
    31b4:	stp	x19, x20, [sp, #16]
    31b8:	stp	x21, x22, [sp, #32]
    31bc:	stp	x23, x24, [sp, #48]
    31c0:	mov	x20, x0
    31c4:	mov	x23, x1
    31c8:	mov	x21, x2
    31cc:	mov	x24, x3
    31d0:	mov	x22, x4
    31d4:	ldr	w0, [x0, #8]
    31d8:	cbnz	w0, 3228 <dwarf_fileline+0x7c>
    31dc:	ldr	x19, [x20, #32]
    31e0:	cbz	x19, 3274 <dwarf_fileline+0xc8>
    31e4:	str	x25, [sp, #64]
    31e8:	add	x25, sp, #0x5c
    31ec:	mov	x6, x25
    31f0:	mov	x5, x22
    31f4:	mov	x4, x24
    31f8:	mov	x3, x21
    31fc:	mov	x2, x23
    3200:	mov	x1, x19
    3204:	mov	x0, x20
    3208:	bl	2070 <dwarf_lookup_pc>
    320c:	cbnz	w0, 32a0 <dwarf_fileline+0xf4>
    3210:	ldr	w1, [sp, #92]
    3214:	cbnz	w1, 32a8 <dwarf_fileline+0xfc>
    3218:	ldr	x19, [x19]
    321c:	cbnz	x19, 31ec <dwarf_fileline+0x40>
    3220:	ldr	x25, [sp, #64]
    3224:	b	3274 <dwarf_fileline+0xc8>
    3228:	str	x25, [sp, #64]
    322c:	add	x19, x20, #0x20
    3230:	add	x25, sp, #0x5c
    3234:	ldar	x19, [x19]
    3238:	cbz	x19, 3270 <dwarf_fileline+0xc4>
    323c:	mov	x6, x25
    3240:	mov	x5, x22
    3244:	mov	x4, x24
    3248:	mov	x3, x21
    324c:	mov	x2, x23
    3250:	mov	x1, x19
    3254:	mov	x0, x20
    3258:	bl	2070 <dwarf_lookup_pc>
    325c:	cbnz	w0, 32b0 <dwarf_fileline+0x104>
    3260:	ldr	w1, [sp, #92]
    3264:	cbz	w1, 3234 <dwarf_fileline+0x88>
    3268:	ldr	x25, [sp, #64]
    326c:	b	328c <dwarf_fileline+0xe0>
    3270:	ldr	x25, [sp, #64]
    3274:	mov	x4, #0x0                   	// #0
    3278:	mov	w3, #0x0                   	// #0
    327c:	mov	x2, #0x0                   	// #0
    3280:	mov	x1, x23
    3284:	mov	x0, x22
    3288:	blr	x21
    328c:	ldp	x19, x20, [sp, #16]
    3290:	ldp	x21, x22, [sp, #32]
    3294:	ldp	x23, x24, [sp, #48]
    3298:	ldp	x29, x30, [sp], #96
    329c:	ret
    32a0:	ldr	x25, [sp, #64]
    32a4:	b	328c <dwarf_fileline+0xe0>
    32a8:	ldr	x25, [sp, #64]
    32ac:	b	328c <dwarf_fileline+0xe0>
    32b0:	ldr	x25, [sp, #64]
    32b4:	b	328c <dwarf_fileline+0xe0>

00000000000032b8 <__asan_backtrace_dwarf_add>:
    32b8:	sub	sp, sp, #0x290
    32bc:	stp	x29, x30, [sp, #48]
    32c0:	add	x29, sp, #0x30
    32c4:	stp	x19, x20, [sp, #64]
    32c8:	stp	x21, x22, [sp, #80]
    32cc:	stp	x23, x24, [sp, #96]
    32d0:	stp	x25, x26, [sp, #112]
    32d4:	stp	x27, x28, [sp, #128]
    32d8:	mov	x25, x0
    32dc:	str	x1, [sp, #200]
    32e0:	mov	x19, x2
    32e4:	str	x2, [sp, #256]
    32e8:	mov	x20, x3
    32ec:	str	x3, [sp, #264]
    32f0:	str	x4, [sp, #272]
    32f4:	str	x5, [sp, #280]
    32f8:	str	x6, [sp, #208]
    32fc:	str	x7, [sp, #168]
    3300:	ldr	x24, [sp, #704]
    3304:	ldr	x28, [sp, #712]
    3308:	mov	x2, #0x18                  	// #24
    330c:	mov	w1, #0x0                   	// #0
    3310:	add	x0, sp, #0x150
    3314:	bl	0 <__asan_internal_memset>
    3318:	mov	x2, #0x18                  	// #24
    331c:	mov	w1, #0x0                   	// #0
    3320:	add	x0, sp, #0x170
    3324:	bl	0 <__asan_internal_memset>
    3328:	str	xzr, [sp, #360]
    332c:	str	xzr, [sp, #392]
    3330:	adrp	x0, 0 <is_highest_address>
    3334:	add	x0, x0, #0x0
    3338:	str	x0, [sp, #400]
    333c:	str	x19, [sp, #408]
    3340:	str	x19, [sp, #416]
    3344:	str	x20, [sp, #424]
    3348:	ldr	w0, [sp, #688]
    334c:	str	w0, [sp, #432]
    3350:	str	x24, [sp, #440]
    3354:	str	x28, [sp, #448]
    3358:	str	wzr, [sp, #456]
    335c:	mov	x2, #0x18                  	// #24
    3360:	mov	w1, #0x0                   	// #0
    3364:	add	x0, sp, #0x138
    3368:	bl	0 <__asan_internal_memset>
    336c:	ldr	x0, [sp, #424]
    3370:	str	x0, [sp, #160]
    3374:	cbz	x0, 3b7c <__asan_backtrace_dwarf_add+0x8c4>
    3378:	str	xzr, [sp, #176]
    337c:	str	xzr, [sp, #160]
    3380:	add	x27, sp, #0x190
    3384:	add	x0, sp, #0x138
    3388:	str	x0, [sp, #216]
    338c:	adrp	x0, 0 <is_highest_address>
    3390:	add	x0, x0, #0x0
    3394:	str	x0, [sp, #224]
    3398:	add	x0, sp, #0x150
    339c:	str	x0, [sp, #232]
    33a0:	mov	x26, x25
    33a4:	mov	x23, x24
    33a8:	mov	x24, x28
    33ac:	b	35c4 <__asan_backtrace_dwarf_add+0x30c>
    33b0:	mov	x0, x27
    33b4:	bl	774 <read_uint64>
    33b8:	str	x0, [sp, #152]
    33bc:	mov	w28, #0x1                   	// #1
    33c0:	b	35f0 <__asan_backtrace_dwarf_add+0x338>
    33c4:	mov	x25, x26
    33c8:	mov	x28, x24
    33cc:	mov	x24, x23
    33d0:	adrp	x1, 0 <is_highest_address>
    33d4:	add	x1, x1, #0x0
    33d8:	add	x0, sp, #0x1d0
    33dc:	bl	62c <dwarf_buf_error>
    33e0:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    33e4:	mov	x25, x26
    33e8:	mov	x28, x24
    33ec:	mov	x24, x23
    33f0:	mov	w2, #0x0                   	// #0
    33f4:	adrp	x1, 0 <is_highest_address>
    33f8:	add	x1, x1, #0x0
    33fc:	mov	x0, x28
    3400:	blr	x23
    3404:	ldr	x0, [sp, #160]
    3408:	cbz	x0, 3478 <__asan_backtrace_dwarf_add+0x1c0>
    340c:	ldr	x19, [sp, #312]
    3410:	add	x21, x19, x0, lsl #3
    3414:	mov	x20, #0x88                  	// #136
    3418:	ldr	x1, [x19]
    341c:	mov	x3, x28
    3420:	mov	x2, x24
    3424:	add	x1, x1, #0x58
    3428:	mov	x0, x25
    342c:	bl	1fd8 <free_abbrevs>
    3430:	mov	x4, x28
    3434:	mov	x3, x24
    3438:	mov	x2, x20
    343c:	ldr	x1, [x19], #8
    3440:	mov	x0, x25
    3444:	bl	0 <__asan_backtrace_free>
    3448:	cmp	x19, x21
    344c:	b.ne	3418 <__asan_backtrace_dwarf_add+0x160>  // b.any
    3450:	ldr	x0, [sp, #328]
    3454:	ldr	x1, [sp, #320]
    3458:	add	x0, x0, x1
    345c:	str	x0, [sp, #328]
    3460:	str	xzr, [sp, #320]
    3464:	mov	x3, x28
    3468:	mov	x2, x24
    346c:	add	x1, sp, #0x138
    3470:	mov	x0, x25
    3474:	bl	0 <__asan_backtrace_vector_release>
    3478:	ldr	x0, [sp, #360]
    347c:	cbnz	x0, 3b08 <__asan_backtrace_dwarf_add+0x850>
    3480:	mov	w0, #0x0                   	// #0
    3484:	b	3a68 <__asan_backtrace_dwarf_add+0x7b0>
    3488:	mov	x0, x20
    348c:	bl	8f4 <read_uleb128>
    3490:	mov	x0, x20
    3494:	bl	8f4 <read_uleb128>
    3498:	cbz	x0, 34d0 <__asan_backtrace_dwarf_add+0x218>
    349c:	ldr	w0, [sp, #648]
    34a0:	cbnz	w0, 3ac8 <__asan_backtrace_dwarf_add+0x810>
    34a4:	add	x21, x21, #0x1
    34a8:	mov	x0, x20
    34ac:	bl	8f4 <read_uleb128>
    34b0:	mov	x0, x20
    34b4:	bl	8c0 <read_byte>
    34b8:	mov	x0, x20
    34bc:	bl	8f4 <read_uleb128>
    34c0:	cbz	x0, 3488 <__asan_backtrace_dwarf_add+0x1d0>
    34c4:	mov	x0, x20
    34c8:	bl	8f4 <read_uleb128>
    34cc:	b	34b8 <__asan_backtrace_dwarf_add+0x200>
    34d0:	mov	x22, x0
    34d4:	str	x0, [sp, #192]
    34d8:	ldr	w0, [sp, #648]
    34dc:	cbnz	w0, 3ad8 <__asan_backtrace_dwarf_add+0x820>
    34e0:	cbnz	x21, 3734 <__asan_backtrace_dwarf_add+0x47c>
    34e4:	add	x0, sp, #0x1d0
    34e8:	bl	8c0 <read_byte>
    34ec:	and	w2, w0, #0xff
    34f0:	ldr	x3, [sp, #176]
    34f4:	str	x3, [x19, #24]
    34f8:	cmp	w28, #0x0
    34fc:	mov	x0, #0xc                   	// #12
    3500:	mov	x1, #0x4                   	// #4
    3504:	csel	x0, x0, x1, ne  // ne = any
    3508:	ldr	x1, [sp, #152]
    350c:	add	x0, x0, x1
    3510:	add	x0, x3, x0
    3514:	str	x0, [sp, #176]
    3518:	str	x0, [x19, #32]
    351c:	ldr	x1, [sp, #480]
    3520:	str	x1, [x19]
    3524:	ldr	x0, [sp, #488]
    3528:	str	x0, [x19, #8]
    352c:	ldr	x0, [sp, #184]
    3530:	sub	x1, x1, x0
    3534:	str	x1, [x19, #16]
    3538:	ldr	w0, [sp, #288]
    353c:	str	w0, [x19, #40]
    3540:	str	w28, [x19, #44]
    3544:	str	w2, [x19, #48]
    3548:	str	xzr, [x19, #64]
    354c:	str	xzr, [x19, #72]
    3550:	str	xzr, [x19, #80]
    3554:	str	xzr, [x19, #56]
    3558:	str	xzr, [x19, #104]
    355c:	str	xzr, [x19, #112]
    3560:	str	xzr, [x19, #120]
    3564:	str	xzr, [x19, #128]
    3568:	add	x0, sp, #0x250
    356c:	str	x0, [sp, #40]
    3570:	ldr	x0, [sp, #232]
    3574:	str	x0, [sp, #32]
    3578:	str	x19, [sp, #24]
    357c:	str	x24, [sp, #16]
    3580:	str	x23, [sp, #8]
    3584:	ldr	x0, [sp, #696]
    3588:	str	x0, [sp]
    358c:	ldr	w7, [sp, #688]
    3590:	ldr	x6, [sp, #664]
    3594:	ldr	x5, [sp, #656]
    3598:	ldr	x4, [sp, #680]
    359c:	ldr	x3, [sp, #672]
    35a0:	add	x2, sp, #0x1d0
    35a4:	ldr	x1, [sp, #200]
    35a8:	mov	x0, x26
    35ac:	bl	1354 <find_address_ranges>
    35b0:	cbz	w0, 3b6c <__asan_backtrace_dwarf_add+0x8b4>
    35b4:	ldr	w0, [sp, #520]
    35b8:	cbnz	w0, 3af8 <__asan_backtrace_dwarf_add+0x840>
    35bc:	ldr	x0, [sp, #424]
    35c0:	cbz	x0, 3904 <__asan_backtrace_dwarf_add+0x64c>
    35c4:	ldr	w28, [sp, #456]
    35c8:	cbnz	w28, 3a88 <__asan_backtrace_dwarf_add+0x7d0>
    35cc:	ldr	x0, [sp, #416]
    35d0:	str	x0, [sp, #184]
    35d4:	mov	x0, x27
    35d8:	bl	6f4 <read_uint32>
    35dc:	mov	w1, w0
    35e0:	str	x1, [sp, #152]
    35e4:	mov	x1, #0xffffffff            	// #4294967295
    35e8:	cmp	x1, w0, uxtw
    35ec:	b.eq	33b0 <__asan_backtrace_dwarf_add+0xf8>  // b.none
    35f0:	ldp	x0, x1, [x27]
    35f4:	stp	x0, x1, [sp, #464]
    35f8:	ldp	x0, x1, [x27, #16]
    35fc:	stp	x0, x1, [sp, #480]
    3600:	ldp	x0, x1, [x27, #32]
    3604:	stp	x0, x1, [sp, #496]
    3608:	ldp	x0, x1, [x27, #48]
    360c:	add	x2, sp, #0x200
    3610:	stp	x0, x1, [x2]
    3614:	ldr	x0, [sp, #152]
    3618:	str	x0, [sp, #488]
    361c:	mov	x1, x0
    3620:	mov	x0, x27
    3624:	bl	688 <advance>
    3628:	cbz	w0, 3a98 <__asan_backtrace_dwarf_add+0x7e0>
    362c:	add	x0, sp, #0x1d0
    3630:	bl	868 <read_uint16>
    3634:	and	w0, w0, #0xffff
    3638:	str	w0, [sp, #288]
    363c:	sub	w0, w0, #0x2
    3640:	cmp	w0, #0x2
    3644:	b.hi	33c4 <__asan_backtrace_dwarf_add+0x10c>  // b.pmore
    3648:	ldr	x4, [sp, #216]
    364c:	mov	x3, x24
    3650:	mov	x2, x23
    3654:	mov	x1, #0x8                   	// #8
    3658:	mov	x0, x26
    365c:	bl	0 <__asan_backtrace_vector_grow>
    3660:	mov	x20, x0
    3664:	cbz	x0, 3aa8 <__asan_backtrace_dwarf_add+0x7f0>
    3668:	mov	x3, x24
    366c:	mov	x2, x23
    3670:	mov	x1, #0x88                  	// #136
    3674:	mov	x0, x26
    3678:	bl	0 <__asan_backtrace_alloc>
    367c:	mov	x19, x0
    3680:	cbz	x0, 3ab8 <__asan_backtrace_dwarf_add+0x800>
    3684:	str	x0, [x20]
    3688:	ldr	x0, [sp, #160]
    368c:	add	x0, x0, #0x1
    3690:	str	x0, [sp, #160]
    3694:	add	x0, x19, #0x58
    3698:	str	x0, [sp, #240]
    369c:	mov	x2, #0x10                  	// #16
    36a0:	mov	w1, #0x0                   	// #0
    36a4:	bl	0 <__asan_internal_memset>
    36a8:	mov	w1, w28
    36ac:	add	x0, sp, #0x1d0
    36b0:	bl	844 <read_offset>
    36b4:	str	xzr, [x19, #88]
    36b8:	str	xzr, [x19, #96]
    36bc:	ldr	x1, [sp, #168]
    36c0:	cmp	x1, x0
    36c4:	b.ls	33e4 <__asan_backtrace_dwarf_add+0x12c>  // b.plast
    36c8:	ldr	x1, [sp, #224]
    36cc:	str	x1, [sp, #528]
    36d0:	ldr	x1, [sp, #208]
    36d4:	str	x1, [sp, #536]
    36d8:	add	x1, x1, x0
    36dc:	str	x1, [sp, #544]
    36e0:	ldr	x1, [sp, #168]
    36e4:	sub	x0, x1, x0
    36e8:	str	x0, [sp, #552]
    36ec:	ldr	w0, [sp, #688]
    36f0:	str	w0, [sp, #560]
    36f4:	str	x23, [sp, #568]
    36f8:	str	x24, [sp, #576]
    36fc:	str	wzr, [sp, #584]
    3700:	add	x0, sp, #0x200
    3704:	ldp	x0, x1, [x0, #16]
    3708:	add	x2, sp, #0x200
    370c:	stp	x0, x1, [x2, #80]
    3710:	ldp	x0, x1, [x2, #32]
    3714:	stp	x0, x1, [x2, #96]
    3718:	ldp	x0, x1, [x2, #48]
    371c:	stp	x0, x1, [x2, #112]
    3720:	ldp	x0, x1, [x2, #64]
    3724:	stp	x0, x1, [x2, #128]
    3728:	mov	x21, #0x0                   	// #0
    372c:	add	x20, sp, #0x250
    3730:	b	3490 <__asan_backtrace_dwarf_add+0x1d8>
    3734:	lsl	x20, x21, #5
    3738:	mov	x3, x24
    373c:	mov	x2, x23
    3740:	mov	x1, x20
    3744:	mov	x0, x26
    3748:	bl	0 <__asan_backtrace_alloc>
    374c:	str	x0, [x19, #96]
    3750:	cbz	x0, 3ae8 <__asan_backtrace_dwarf_add+0x830>
    3754:	str	x21, [x19, #88]
    3758:	mov	x2, x20
    375c:	mov	w1, #0x0                   	// #0
    3760:	bl	0 <__asan_internal_memset>
    3764:	ldr	w0, [sp, #584]
    3768:	cbnz	w0, 38b4 <__asan_backtrace_dwarf_add+0x5fc>
    376c:	add	x20, sp, #0x210
    3770:	str	w28, [sp, #292]
    3774:	str	x26, [sp, #248]
    3778:	mov	x26, x22
    377c:	str	x23, [sp, #704]
    3780:	str	x24, [sp, #712]
    3784:	str	x27, [sp, #296]
    3788:	b	37e8 <__asan_backtrace_dwarf_add+0x530>
    378c:	add	x21, x21, #0x1
    3790:	mov	x0, x22
    3794:	bl	8f4 <read_uleb128>
    3798:	mov	x0, x22
    379c:	bl	8f4 <read_uleb128>
    37a0:	mov	x24, x0
    37a4:	cbnz	x0, 378c <__asan_backtrace_dwarf_add+0x4d4>
    37a8:	cbnz	x21, 3840 <__asan_backtrace_dwarf_add+0x588>
    37ac:	mov	x0, x20
    37b0:	bl	8f4 <read_uleb128>
    37b4:	mov	x0, x20
    37b8:	bl	8f4 <read_uleb128>
    37bc:	mov	x22, #0x0                   	// #0
    37c0:	ldr	x1, [x19, #96]
    37c4:	add	x0, x1, x26
    37c8:	str	x23, [x1, x26]
    37cc:	str	w28, [x0, #8]
    37d0:	str	w27, [x0, #12]
    37d4:	str	x21, [x0, #16]
    37d8:	str	x22, [x0, #24]
    37dc:	add	x26, x26, #0x20
    37e0:	ldr	w0, [sp, #584]
    37e4:	cbnz	w0, 3890 <__asan_backtrace_dwarf_add+0x5d8>
    37e8:	mov	x0, x20
    37ec:	bl	8f4 <read_uleb128>
    37f0:	mov	x23, x0
    37f4:	cbz	x0, 38d4 <__asan_backtrace_dwarf_add+0x61c>
    37f8:	mov	x0, x20
    37fc:	bl	8f4 <read_uleb128>
    3800:	mov	x28, x0
    3804:	mov	x0, x20
    3808:	bl	8c0 <read_byte>
    380c:	and	w27, w0, #0xff
    3810:	ldp	x0, x1, [x20]
    3814:	add	x2, sp, #0x200
    3818:	stp	x0, x1, [x2, #80]
    381c:	ldp	x0, x1, [x20, #16]
    3820:	stp	x0, x1, [x2, #96]
    3824:	ldp	x0, x1, [x20, #32]
    3828:	stp	x0, x1, [x2, #112]
    382c:	ldp	x0, x1, [x20, #48]
    3830:	stp	x0, x1, [x2, #128]
    3834:	ldr	x21, [sp, #192]
    3838:	add	x22, sp, #0x250
    383c:	b	3798 <__asan_backtrace_dwarf_add+0x4e0>
    3840:	ldr	x3, [sp, #712]
    3844:	ldr	x2, [sp, #704]
    3848:	lsl	x1, x21, #3
    384c:	ldr	x0, [sp, #248]
    3850:	bl	0 <__asan_backtrace_alloc>
    3854:	mov	x22, x0
    3858:	cbz	x0, 38c4 <__asan_backtrace_dwarf_add+0x60c>
    385c:	mov	x25, x0
    3860:	mov	x21, x24
    3864:	mov	x0, x20
    3868:	bl	8f4 <read_uleb128>
    386c:	mov	x24, x0
    3870:	mov	x0, x20
    3874:	bl	8f4 <read_uleb128>
    3878:	cbz	x24, 37c0 <__asan_backtrace_dwarf_add+0x508>
    387c:	str	w24, [x25]
    3880:	str	w0, [x25, #4]
    3884:	add	x21, x21, #0x1
    3888:	add	x25, x25, #0x8
    388c:	b	3864 <__asan_backtrace_dwarf_add+0x5ac>
    3890:	ldr	x25, [sp, #248]
    3894:	ldr	x24, [sp, #704]
    3898:	ldr	x28, [sp, #712]
    389c:	mov	x3, x28
    38a0:	mov	x2, x24
    38a4:	ldr	x1, [sp, #240]
    38a8:	mov	x0, x25
    38ac:	bl	1fd8 <free_abbrevs>
    38b0:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    38b4:	mov	x25, x26
    38b8:	mov	x28, x24
    38bc:	mov	x24, x23
    38c0:	b	389c <__asan_backtrace_dwarf_add+0x5e4>
    38c4:	ldr	x25, [sp, #248]
    38c8:	ldr	x24, [sp, #704]
    38cc:	ldr	x28, [sp, #712]
    38d0:	b	389c <__asan_backtrace_dwarf_add+0x5e4>
    38d4:	ldr	w28, [sp, #292]
    38d8:	ldr	x26, [sp, #248]
    38dc:	ldr	x23, [sp, #704]
    38e0:	ldr	x24, [sp, #712]
    38e4:	ldr	x27, [sp, #296]
    38e8:	adrp	x3, 0 <is_highest_address>
    38ec:	add	x3, x3, #0x0
    38f0:	mov	x2, #0x20                  	// #32
    38f4:	ldr	x1, [x19, #88]
    38f8:	ldr	x0, [x19, #96]
    38fc:	bl	0 <__asan_backtrace_qsort>
    3900:	b	34e4 <__asan_backtrace_dwarf_add+0x22c>
    3904:	mov	x25, x26
    3908:	mov	x28, x24
    390c:	mov	x24, x23
    3910:	ldr	w0, [sp, #456]
    3914:	cbnz	w0, 3404 <__asan_backtrace_dwarf_add+0x14c>
    3918:	add	x0, sp, #0x200
    391c:	ldp	x0, x1, [x0, #-200]
    3920:	stp	x0, x1, [sp, #368]
    3924:	ldr	x0, [sp, #328]
    3928:	str	x0, [sp, #384]
    392c:	ldr	x0, [sp, #160]
    3930:	str	x0, [sp, #392]
    3934:	mov	x3, x28
    3938:	mov	x2, x24
    393c:	add	x1, sp, #0x150
    3940:	mov	x0, x25
    3944:	bl	0 <__asan_backtrace_vector_release>
    3948:	cbz	w0, 3480 <__asan_backtrace_dwarf_add+0x1c8>
    394c:	mov	x3, x28
    3950:	mov	x2, x24
    3954:	add	x1, sp, #0x170
    3958:	mov	x0, x25
    395c:	bl	0 <__asan_backtrace_vector_release>
    3960:	cbz	w0, 3480 <__asan_backtrace_dwarf_add+0x1c8>
    3964:	ldr	x20, [sp, #336]
    3968:	ldr	x22, [sp, #368]
    396c:	ldr	x19, [sp, #360]
    3970:	ldr	x21, [sp, #392]
    3974:	adrp	x3, 0 <is_highest_address>
    3978:	add	x3, x3, #0x0
    397c:	mov	x2, #0x18                  	// #24
    3980:	mov	x1, x19
    3984:	mov	x0, x20
    3988:	bl	0 <__asan_backtrace_qsort>
    398c:	mov	x3, x28
    3990:	mov	x2, x24
    3994:	mov	x1, #0xa0                  	// #160
    3998:	mov	x0, x25
    399c:	bl	0 <__asan_backtrace_alloc>
    39a0:	mov	x23, x0
    39a4:	cbz	x0, 3480 <__asan_backtrace_dwarf_add+0x1c8>
    39a8:	str	xzr, [x0]
    39ac:	ldr	x0, [sp, #696]
    39b0:	str	x0, [x23, #8]
    39b4:	ldr	x0, [sp, #200]
    39b8:	str	x0, [x23, #16]
    39bc:	str	x20, [x23, #24]
    39c0:	str	x19, [x23, #32]
    39c4:	str	x22, [x23, #40]
    39c8:	str	x21, [x23, #48]
    39cc:	ldr	x0, [sp, #256]
    39d0:	str	x0, [x23, #56]
    39d4:	ldr	x0, [sp, #264]
    39d8:	str	x0, [x23, #64]
    39dc:	ldr	x0, [sp, #272]
    39e0:	str	x0, [x23, #72]
    39e4:	ldr	x0, [sp, #280]
    39e8:	str	x0, [x23, #80]
    39ec:	ldr	x0, [sp, #656]
    39f0:	str	x0, [x23, #88]
    39f4:	ldr	x0, [sp, #664]
    39f8:	str	x0, [x23, #96]
    39fc:	ldr	x0, [sp, #672]
    3a00:	str	x0, [x23, #104]
    3a04:	ldr	x0, [sp, #680]
    3a08:	str	x0, [x23, #112]
    3a0c:	ldr	w0, [sp, #688]
    3a10:	str	w0, [x23, #120]
    3a14:	mov	x2, #0x20                  	// #32
    3a18:	mov	w1, #0x0                   	// #0
    3a1c:	add	x0, x23, #0x80
    3a20:	bl	0 <__asan_internal_memset>
    3a24:	ldr	x0, [sp, #728]
    3a28:	cbz	x0, 3a30 <__asan_backtrace_dwarf_add+0x778>
    3a2c:	str	x23, [x0]
    3a30:	ldr	w0, [x25, #8]
    3a34:	add	x2, x25, #0x20
    3a38:	cbnz	w0, 3b64 <__asan_backtrace_dwarf_add+0x8ac>
    3a3c:	ldr	x0, [x25, #32]
    3a40:	cbz	x0, 3b34 <__asan_backtrace_dwarf_add+0x87c>
    3a44:	mov	x1, x0
    3a48:	ldr	x0, [x0]
    3a4c:	cbnz	x0, 3a44 <__asan_backtrace_dwarf_add+0x78c>
    3a50:	str	x23, [x1]
    3a54:	ldr	x1, [sp, #720]
    3a58:	adrp	x0, 0 <is_highest_address>
    3a5c:	add	x0, x0, #0x0
    3a60:	str	x0, [x1]
    3a64:	mov	w0, #0x1                   	// #1
    3a68:	ldp	x19, x20, [sp, #64]
    3a6c:	ldp	x21, x22, [sp, #80]
    3a70:	ldp	x23, x24, [sp, #96]
    3a74:	ldp	x25, x26, [sp, #112]
    3a78:	ldp	x27, x28, [sp, #128]
    3a7c:	ldp	x29, x30, [sp, #48]
    3a80:	add	sp, sp, #0x290
    3a84:	ret
    3a88:	mov	x25, x26
    3a8c:	mov	x28, x24
    3a90:	mov	x24, x23
    3a94:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3a98:	mov	x25, x26
    3a9c:	mov	x28, x24
    3aa0:	mov	x24, x23
    3aa4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3aa8:	mov	x25, x26
    3aac:	mov	x28, x24
    3ab0:	mov	x24, x23
    3ab4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3ab8:	mov	x25, x26
    3abc:	mov	x28, x24
    3ac0:	mov	x24, x23
    3ac4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3ac8:	mov	x25, x26
    3acc:	mov	x28, x24
    3ad0:	mov	x24, x23
    3ad4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3ad8:	mov	x25, x26
    3adc:	mov	x28, x24
    3ae0:	mov	x24, x23
    3ae4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3ae8:	mov	x25, x26
    3aec:	mov	x28, x24
    3af0:	mov	x24, x23
    3af4:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3af8:	mov	x25, x26
    3afc:	mov	x28, x24
    3b00:	mov	x24, x23
    3b04:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3b08:	ldr	x0, [sp, #352]
    3b0c:	ldr	x1, [sp, #344]
    3b10:	add	x0, x0, x1
    3b14:	str	x0, [sp, #352]
    3b18:	str	xzr, [sp, #344]
    3b1c:	mov	x3, x28
    3b20:	mov	x2, x24
    3b24:	add	x1, sp, #0x150
    3b28:	mov	x0, x25
    3b2c:	bl	0 <__asan_backtrace_vector_release>
    3b30:	b	3480 <__asan_backtrace_dwarf_add+0x1c8>
    3b34:	add	x1, x25, #0x20
    3b38:	b	3a50 <__asan_backtrace_dwarf_add+0x798>
    3b3c:	mov	x1, x0
    3b40:	ldar	x0, [x1]
    3b44:	cbnz	x0, 3b3c <__asan_backtrace_dwarf_add+0x884>
    3b48:	ldxr	x0, [x1]
    3b4c:	cbnz	x0, 3b58 <__asan_backtrace_dwarf_add+0x8a0>
    3b50:	stlxr	w3, x23, [x1]
    3b54:	cbnz	w3, 3b48 <__asan_backtrace_dwarf_add+0x890>
    3b58:	cmp	x0, #0x0
    3b5c:	dmb	ish
    3b60:	b.eq	3a54 <__asan_backtrace_dwarf_add+0x79c>  // b.none
    3b64:	mov	x1, x2
    3b68:	b	3b40 <__asan_backtrace_dwarf_add+0x888>
    3b6c:	mov	x25, x26
    3b70:	mov	x28, x24
    3b74:	mov	x24, x23
    3b78:	b	3404 <__asan_backtrace_dwarf_add+0x14c>
    3b7c:	ldr	w0, [sp, #456]
    3b80:	cbz	w0, 3918 <__asan_backtrace_dwarf_add+0x660>
    3b84:	b	3478 <__asan_backtrace_dwarf_add+0x1c0>

elf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <elf_nodebug>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	x0, x4
       c:	mov	w2, #0xffffffff            	// #-1
      10:	adrp	x1, 0 <elf_nodebug>
      14:	add	x1, x1, #0x0
      18:	blr	x3
      1c:	mov	w0, #0x0                   	// #0
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <elf_nosyms>:
      28:	stp	x29, x30, [sp, #-16]!
      2c:	mov	x29, sp
      30:	mov	x0, x4
      34:	mov	w2, #0xffffffff            	// #-1
      38:	adrp	x1, 0 <elf_nodebug>
      3c:	add	x1, x1, #0x0
      40:	blr	x3
      44:	ldp	x29, x30, [sp], #16
      48:	ret

000000000000004c <elf_symbol_compare>:
      4c:	ldr	x2, [x0, #8]
      50:	ldr	x0, [x1, #8]
      54:	cmp	x2, x0
      58:	b.cc	64 <elf_symbol_compare+0x18>  // b.lo, b.ul, b.last
      5c:	cset	w0, hi  // hi = pmore
      60:	ret
      64:	mov	w0, #0xffffffff            	// #-1
      68:	b	60 <elf_symbol_compare+0x14>

000000000000006c <elf_zlib_inflate_table>:
      6c:	stp	x29, x30, [sp, #-192]!
      70:	mov	x29, sp
      74:	stp	x19, x20, [sp, #16]
      78:	stp	x21, x22, [sp, #32]
      7c:	mov	x19, x0
      80:	mov	x20, x1
      84:	mov	x21, x3
      88:	add	x22, x2, #0x1, lsl #12
      8c:	mov	x2, #0x20                  	// #32
      90:	mov	w1, #0x0                   	// #0
      94:	add	x0, sp, #0xa0
      98:	bl	0 <__asan_internal_memset>
      9c:	cbz	x20, 110 <elf_zlib_inflate_table+0xa4>
      a0:	mov	x4, #0x0                   	// #0
      a4:	add	x0, sp, #0xa0
      a8:	add	x2, sp, #0x60
      ac:	add	x7, sp, #0x80
      b0:	b	e8 <elf_zlib_inflate_table+0x7c>
      b4:	and	w1, w4, #0xffff
      b8:	ldrh	w3, [x2, w5, sxtw #1]
      bc:	strh	w1, [x22, x3, lsl #1]
      c0:	ldrb	w3, [x19, x4]
      c4:	strh	w1, [x2, x3, lsl #1]
      c8:	ldrb	w5, [x19, x4]
      cc:	lsl	x5, x5, #1
      d0:	ldrh	w6, [x0, x5]
      d4:	add	w6, w6, #0x1
      d8:	strh	w6, [x0, x5]
      dc:	add	x4, x4, #0x1
      e0:	cmp	x20, x4
      e4:	b.eq	110 <elf_zlib_inflate_table+0xa4>  // b.none
      e8:	ldrb	w5, [x19, x4]
      ec:	cmp	w5, #0xf
      f0:	b.hi	41c <elf_zlib_inflate_table+0x3b0>  // b.pmore
      f4:	ldrh	w1, [x0, w5, sxtw #1]
      f8:	cbnz	w1, b4 <elf_zlib_inflate_table+0x48>
      fc:	and	w1, w4, #0xffff
     100:	sbfiz	x5, x5, #1, #32
     104:	strh	w1, [x7, x5]
     108:	strh	w1, [x2, x5]
     10c:	b	c8 <elf_zlib_inflate_table+0x5c>
     110:	mov	x2, #0x800                 	// #2048
     114:	mov	w1, #0x0                   	// #0
     118:	mov	x0, x21
     11c:	bl	0 <__asan_internal_memset>
     120:	mov	x4, #0x0                   	// #0
     124:	mov	w1, #0x0                   	// #0
     128:	add	x9, sp, #0xa0
     12c:	mov	w8, #0x1                   	// #1
     130:	add	x12, sp, #0x80
     134:	add	x0, x9, x4, lsl #1
     138:	ldrh	w0, [x0, #2]
     13c:	cbnz	w0, 168 <elf_zlib_inflate_table+0xfc>
     140:	add	x4, x4, #0x1
     144:	cmp	x4, #0x8
     148:	b.ne	134 <elf_zlib_inflate_table+0xc8>  // b.any
     14c:	stp	x23, x24, [sp, #48]
     150:	stp	x25, x26, [sp, #64]
     154:	add	x7, sp, #0xa0
     158:	mov	x6, #0x9                   	// #9
     15c:	add	x9, sp, #0x50
     160:	mov	w8, #0x1                   	// #1
     164:	b	294 <elf_zlib_inflate_table+0x228>
     168:	add	w3, w4, #0x1
     16c:	lsl	w5, w8, w3
     170:	cmp	w5, w0
     174:	b.cc	430 <elf_zlib_inflate_table+0x3c4>  // b.lo, b.ul, b.last
     178:	add	x5, x12, x4, lsl #1
     17c:	ldrh	w7, [x5, #2]
     180:	and	x5, x0, #0xffff
     184:	tst	w7, #0xfffffe00
     188:	b.ne	438 <elf_zlib_inflate_table+0x3cc>  // b.any
     18c:	ubfiz	w13, w4, #9, #7
     190:	lsl	w3, w8, w3
     194:	sxtw	x3, w3
     198:	lsl	w10, w8, w4
     19c:	mov	x11, #0x0                   	// #0
     1a0:	orr	w6, w13, w7
     1a4:	mov	w0, w1
     1a8:	cmp	w1, #0xff
     1ac:	b.hi	1c8 <elf_zlib_inflate_table+0x15c>  // b.pmore
     1b0:	ldrh	w2, [x21, x0, lsl #1]
     1b4:	cbnz	w2, 440 <elf_zlib_inflate_table+0x3d4>
     1b8:	strh	w6, [x21, x0, lsl #1]
     1bc:	add	x0, x0, x3
     1c0:	cmp	x0, #0xff
     1c4:	b.ls	1b0 <elf_zlib_inflate_table+0x144>  // b.plast
     1c8:	add	x11, x11, #0x1
     1cc:	cmp	x11, x5
     1d0:	b.cs	1dc <elf_zlib_inflate_table+0x170>  // b.hs, b.nlast
     1d4:	mov	w7, w7
     1d8:	ldrh	w7, [x22, x7, lsl #1]
     1dc:	tst	w10, w1
     1e0:	b.eq	220 <elf_zlib_inflate_table+0x1b4>  // b.none
     1e4:	mov	w0, w10
     1e8:	lsr	w0, w0, #1
     1ec:	tst	w0, w1
     1f0:	b.ne	1e8 <elf_zlib_inflate_table+0x17c>  // b.any
     1f4:	sub	w2, w0, #0x1
     1f8:	and	w1, w2, w1
     1fc:	add	w1, w1, w0
     200:	cmp	w0, #0x0
     204:	csel	w1, w1, w0, ne  // ne = any
     208:	cmp	x11, x5
     20c:	b.eq	140 <elf_zlib_inflate_table+0xd4>  // b.none
     210:	tst	w7, #0xfffffe00
     214:	b.eq	1a0 <elf_zlib_inflate_table+0x134>  // b.none
     218:	mov	w0, #0x0                   	// #0
     21c:	b	420 <elf_zlib_inflate_table+0x3b4>
     220:	mov	w0, w10
     224:	b	1f4 <elf_zlib_inflate_table+0x188>
     228:	add	w1, w1, w0
     22c:	lsl	w4, w8, w4
     230:	bic	w5, w5, w4
     234:	subs	x3, x3, #0x1
     238:	b.eq	280 <elf_zlib_inflate_table+0x214>  // b.none
     23c:	sub	w4, w6, w3
     240:	lsr	w0, w5, w4
     244:	tbz	w0, #0, 234 <elf_zlib_inflate_table+0x1c8>
     248:	sub	w0, w3, #0x1
     24c:	lsl	w0, w8, w0
     250:	cbz	x3, 22c <elf_zlib_inflate_table+0x1c0>
     254:	tst	w0, w1
     258:	b.eq	228 <elf_zlib_inflate_table+0x1bc>  // b.none
     25c:	mov	w2, #0x0                   	// #0
     260:	bic	w1, w1, w0
     264:	add	w2, w2, #0x1
     268:	lsr	w0, w0, #1
     26c:	cmp	x3, w2, uxtw
     270:	b.ls	22c <elf_zlib_inflate_table+0x1c0>  // b.plast
     274:	tst	w1, w0
     278:	b.ne	260 <elf_zlib_inflate_table+0x1f4>  // b.any
     27c:	b	228 <elf_zlib_inflate_table+0x1bc>
     280:	cbnz	w5, 458 <elf_zlib_inflate_table+0x3ec>
     284:	add	x6, x6, #0x1
     288:	add	x7, x7, #0x2
     28c:	cmp	x6, #0x10
     290:	b.eq	2b0 <elf_zlib_inflate_table+0x244>  // b.none
     294:	ldrh	w5, [x7, #18]
     298:	cbz	w5, 284 <elf_zlib_inflate_table+0x218>
     29c:	add	x0, x9, x6, lsl #1
     2a0:	sturh	w1, [x0, #-18]
     2a4:	cbz	x6, 448 <elf_zlib_inflate_table+0x3dc>
     2a8:	mov	x3, x6
     2ac:	b	23c <elf_zlib_inflate_table+0x1d0>
     2b0:	mov	x3, #0x7                   	// #7
     2b4:	mov	x16, #0x0                   	// #0
     2b8:	add	x12, sp, #0xa0
     2bc:	add	x30, sp, #0x80
     2c0:	add	x20, sp, #0x50
     2c4:	mov	w10, #0x1                   	// #1
     2c8:	mov	x17, #0x0                   	// #0
     2cc:	mov	x19, #0x100                 	// #256
     2d0:	add	x0, x12, x3, lsl #1
     2d4:	ldrh	w0, [x0, #16]
     2d8:	cbnz	w0, 2f4 <elf_zlib_inflate_table+0x288>
     2dc:	subs	x3, x3, #0x1
     2e0:	b.ne	2d0 <elf_zlib_inflate_table+0x264>  // b.any
     2e4:	mov	w0, #0x1                   	// #1
     2e8:	ldp	x23, x24, [sp, #48]
     2ec:	ldp	x25, x26, [sp, #64]
     2f0:	b	420 <elf_zlib_inflate_table+0x3b4>
     2f4:	lsl	x1, x3, #1
     2f8:	add	x2, x1, x30
     2fc:	ldrh	w23, [x2, #16]
     300:	add	x1, x1, x20
     304:	ldurh	w5, [x1, #-2]
     308:	and	x9, x0, #0xffff
     30c:	lsl	w4, w10, w3
     310:	sxtw	x26, w4
     314:	ubfiz	w15, w3, #9, #7
     318:	add	w14, w15, #0x1, lsl #12
     31c:	and	w14, w14, #0xffff
     320:	mov	w4, w4
     324:	add	w11, w3, #0x7
     328:	lsl	w11, w10, w11
     32c:	mov	x8, x17
     330:	mov	x18, x17
     334:	mov	x13, x19
     338:	mov	x24, #0x0                   	// #0
     33c:	mov	x25, x3
     340:	and	x0, x5, #0xff
     344:	cmp	x13, w5, uxtb
     348:	b.eq	378 <elf_zlib_inflate_table+0x30c>  // b.none
     34c:	lsl	x1, x0, #1
     350:	ldrh	w8, [x21, x1]
     354:	cbnz	w8, 3f8 <elf_zlib_inflate_table+0x38c>
     358:	tst	x16, #0xfffffffffffffe00
     35c:	b.ne	468 <elf_zlib_inflate_table+0x3fc>  // b.any
     360:	add	w2, w14, w16
     364:	strh	w2, [x21, x1]
     368:	mov	x8, x25
     36c:	mov	x18, x16
     370:	mov	x13, x0
     374:	add	x16, x26, x16
     378:	orr	w7, w15, w23
     37c:	lsr	w0, w5, #8
     380:	lsl	w6, w10, w8
     384:	cmp	x6, x0
     388:	b.ls	3ac <elf_zlib_inflate_table+0x340>  // b.plast
     38c:	add	x1, x21, x18, lsl #1
     390:	add	x1, x1, #0x200
     394:	ldrh	w2, [x1, x0, lsl #1]
     398:	cbnz	w2, 498 <elf_zlib_inflate_table+0x42c>
     39c:	strh	w7, [x1, x0, lsl #1]
     3a0:	add	x0, x0, x4
     3a4:	cmp	x6, x0
     3a8:	b.hi	394 <elf_zlib_inflate_table+0x328>  // b.pmore
     3ac:	add	x24, x24, #0x1
     3b0:	cmp	x9, x24
     3b4:	b.ls	3c0 <elf_zlib_inflate_table+0x354>  // b.plast
     3b8:	mov	w23, w23
     3bc:	ldrh	w23, [x22, x23, lsl #1]
     3c0:	tst	w11, w5
     3c4:	b.eq	414 <elf_zlib_inflate_table+0x3a8>  // b.none
     3c8:	mov	w0, w11
     3cc:	lsr	w0, w0, #1
     3d0:	tst	w0, w5
     3d4:	b.ne	3cc <elf_zlib_inflate_table+0x360>  // b.any
     3d8:	sub	w1, w0, #0x1
     3dc:	and	w5, w1, w5
     3e0:	add	w5, w5, w0
     3e4:	cmp	w0, #0x0
     3e8:	csel	w5, w5, w0, ne  // ne = any
     3ec:	cmp	x9, x24
     3f0:	b.ne	340 <elf_zlib_inflate_table+0x2d4>  // b.any
     3f4:	b	2dc <elf_zlib_inflate_table+0x270>
     3f8:	tbz	w8, #12, 478 <elf_zlib_inflate_table+0x40c>
     3fc:	and	x18, x8, #0x1ff
     400:	ubfx	x8, x8, #9, #3
     404:	cmp	x8, x3
     408:	b.cc	488 <elf_zlib_inflate_table+0x41c>  // b.lo, b.ul, b.last
     40c:	mov	x13, x0
     410:	b	378 <elf_zlib_inflate_table+0x30c>
     414:	mov	w0, w11
     418:	b	3d8 <elf_zlib_inflate_table+0x36c>
     41c:	mov	w0, #0x0                   	// #0
     420:	ldp	x19, x20, [sp, #16]
     424:	ldp	x21, x22, [sp, #32]
     428:	ldp	x29, x30, [sp], #192
     42c:	ret
     430:	mov	w0, #0x0                   	// #0
     434:	b	420 <elf_zlib_inflate_table+0x3b4>
     438:	mov	w0, #0x0                   	// #0
     43c:	b	420 <elf_zlib_inflate_table+0x3b4>
     440:	mov	w0, #0x0                   	// #0
     444:	b	420 <elf_zlib_inflate_table+0x3b4>
     448:	mov	w0, #0x0                   	// #0
     44c:	ldp	x23, x24, [sp, #48]
     450:	ldp	x25, x26, [sp, #64]
     454:	b	420 <elf_zlib_inflate_table+0x3b4>
     458:	mov	w0, #0x0                   	// #0
     45c:	ldp	x23, x24, [sp, #48]
     460:	ldp	x25, x26, [sp, #64]
     464:	b	420 <elf_zlib_inflate_table+0x3b4>
     468:	mov	w0, #0x0                   	// #0
     46c:	ldp	x23, x24, [sp, #48]
     470:	ldp	x25, x26, [sp, #64]
     474:	b	420 <elf_zlib_inflate_table+0x3b4>
     478:	mov	w0, #0x0                   	// #0
     47c:	ldp	x23, x24, [sp, #48]
     480:	ldp	x25, x26, [sp, #64]
     484:	b	420 <elf_zlib_inflate_table+0x3b4>
     488:	mov	w0, #0x0                   	// #0
     48c:	ldp	x23, x24, [sp, #48]
     490:	ldp	x25, x26, [sp, #64]
     494:	b	420 <elf_zlib_inflate_table+0x3b4>
     498:	mov	w0, #0x0                   	// #0
     49c:	ldp	x23, x24, [sp, #48]
     4a0:	ldp	x25, x26, [sp, #64]
     4a4:	b	420 <elf_zlib_inflate_table+0x3b4>

00000000000004a8 <elf_zlib_fetch>:
     4a8:	ldr	w5, [x3]
     4ac:	cmp	w5, #0xe
     4b0:	b.hi	4f4 <elf_zlib_fetch+0x4c>  // b.pmore
     4b4:	ldr	x4, [x0]
     4b8:	ldr	x6, [x2]
     4bc:	sub	x1, x1, x4
     4c0:	cmp	x1, #0x3
     4c4:	b.le	4fc <elf_zlib_fetch+0x54>
     4c8:	mov	x1, x4
     4cc:	ldr	w4, [x1], #4
     4d0:	lsl	x4, x4, x5
     4d4:	orr	x4, x4, x6
     4d8:	prfm	pldl1strm, [x1]
     4dc:	str	x1, [x0]
     4e0:	str	x4, [x2]
     4e4:	add	w5, w5, #0x20
     4e8:	str	w5, [x3]
     4ec:	mov	w0, #0x1                   	// #1
     4f0:	ret
     4f4:	mov	w0, #0x1                   	// #1
     4f8:	b	4f0 <elf_zlib_fetch+0x48>
     4fc:	mov	w0, #0x0                   	// #0
     500:	b	4f0 <elf_zlib_fetch+0x48>

0000000000000504 <elf_zlib_inflate_and_verify>:
     504:	stp	x29, x30, [sp, #-240]!
     508:	mov	x29, sp
     50c:	stp	x19, x20, [sp, #16]
     510:	stp	x21, x22, [sp, #32]
     514:	stp	x23, x24, [sp, #48]
     518:	stp	x25, x26, [sp, #64]
     51c:	mov	x21, x0
     520:	str	x1, [sp, #120]
     524:	str	x2, [sp, #112]
     528:	mov	x19, x3
     52c:	mov	x20, x4
     530:	str	x0, [sp, #200]
     534:	add	x23, x0, x1
     538:	add	x0, x3, x4
     53c:	str	x0, [sp, #104]
     540:	cmp	x1, #0x4
     544:	b.le	1100 <elf_zlib_inflate_and_verify+0xbfc>
     548:	mov	x22, x3
     54c:	mov	x0, x21
     550:	adrp	x1, 0 <elf_nodebug>
     554:	add	x1, x1, #0x0
     558:	str	x1, [sp, #144]
     55c:	add	x1, x1, #0x200
     560:	str	x1, [sp, #152]
     564:	ldrb	w1, [x0]
     568:	and	w2, w1, #0xf
     56c:	cmp	w2, #0x8
     570:	b.ne	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.any
     574:	cmp	w1, #0x7f
     578:	b.hi	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.pmore
     57c:	ldrb	w2, [x0, #1]
     580:	tbnz	w2, #5, 1054 <elf_zlib_inflate_and_verify+0xb50>
     584:	orr	w1, w2, w1, lsl #8
     588:	sxtw	x1, w1
     58c:	mov	x2, #0x4211                	// #16913
     590:	movk	x2, #0x2108, lsl #16
     594:	movk	x2, #0x1084, lsl #32
     598:	movk	x2, #0x842, lsl #48
     59c:	umulh	x3, x1, x2
     5a0:	sub	x2, x1, x3
     5a4:	add	x2, x3, x2, lsr #1
     5a8:	lsr	x2, x2, #4
     5ac:	lsl	x3, x2, #5
     5b0:	sub	x2, x3, x2
     5b4:	cmp	x1, x2
     5b8:	b.ne	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.any
     5bc:	add	x0, x0, #0x2
     5c0:	str	x0, [sp, #200]
     5c4:	str	xzr, [sp, #208]
     5c8:	str	wzr, [sp, #196]
     5cc:	tst	x0, #0x3
     5d0:	b.eq	600 <elf_zlib_inflate_and_verify+0xfc>  // b.none
     5d4:	ldr	w1, [sp, #196]
     5d8:	ldrb	w2, [x0], #1
     5dc:	lsl	x3, x2, x1
     5e0:	ldr	x2, [sp, #208]
     5e4:	orr	x2, x2, x3
     5e8:	str	x2, [sp, #208]
     5ec:	add	w1, w1, #0x8
     5f0:	str	w1, [sp, #196]
     5f4:	str	x0, [sp, #200]
     5f8:	tst	x0, #0x3
     5fc:	b.ne	5d4 <elf_zlib_inflate_and_verify+0xd0>  // b.any
     600:	add	x25, sp, #0xc4
     604:	add	x24, sp, #0xd0
     608:	mov	x3, x25
     60c:	mov	x2, x24
     610:	mov	x1, x23
     614:	add	x0, sp, #0xc8
     618:	bl	4a8 <elf_zlib_fetch>
     61c:	cbz	w0, 1054 <elf_zlib_inflate_and_verify+0xb50>
     620:	ldr	x0, [sp, #208]
     624:	str	x0, [sp, #160]
     628:	ubfx	w1, w0, #1, #2
     62c:	lsr	x0, x0, #3
     630:	str	x0, [sp, #208]
     634:	ldr	w2, [sp, #196]
     638:	sub	w0, w2, #0x3
     63c:	str	w0, [sp, #196]
     640:	cmp	w1, #0x3
     644:	b.eq	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.none
     648:	cbz	w1, 9a4 <elf_zlib_inflate_and_verify+0x4a0>
     64c:	stp	x27, x28, [sp, #80]
     650:	cmp	w1, #0x1
     654:	b.eq	ccc <elf_zlib_inflate_and_verify+0x7c8>  // b.none
     658:	mov	x3, x25
     65c:	mov	x2, x24
     660:	mov	x1, x23
     664:	add	x0, sp, #0xc8
     668:	bl	4a8 <elf_zlib_fetch>
     66c:	cbz	w0, 1010 <elf_zlib_inflate_and_verify+0xb0c>
     670:	ldr	x0, [sp, #208]
     674:	and	w27, w0, #0x1f
     678:	add	w27, w27, #0x101
     67c:	ubfx	w28, w0, #5, #5
     680:	add	w28, w28, #0x1
     684:	ubfx	w26, w0, #10, #4
     688:	add	w26, w26, #0x4
     68c:	lsr	x0, x0, #14
     690:	str	x0, [sp, #208]
     694:	ldr	w0, [sp, #196]
     698:	sub	w0, w0, #0xe
     69c:	str	w0, [sp, #196]
     6a0:	cmp	w27, #0x11e
     6a4:	ccmp	w28, #0x1e, #0x2, ls  // ls = plast
     6a8:	b.hi	1018 <elf_zlib_inflate_and_verify+0xb14>  // b.pmore
     6ac:	mov	x2, #0x13                  	// #19
     6b0:	mov	w1, #0x0                   	// #0
     6b4:	add	x0, sp, #0xd8
     6b8:	bl	0 <__asan_internal_memset>
     6bc:	mov	x3, x25
     6c0:	mov	x2, x24
     6c4:	mov	x1, x23
     6c8:	add	x0, sp, #0xc8
     6cc:	bl	4a8 <elf_zlib_fetch>
     6d0:	cbz	w0, 1020 <elf_zlib_inflate_and_verify+0xb1c>
     6d4:	ldr	x0, [sp, #208]
     6d8:	and	w1, w0, #0x7
     6dc:	strb	w1, [sp, #232]
     6e0:	ubfx	w1, w0, #3, #3
     6e4:	strb	w1, [sp, #233]
     6e8:	ubfx	w1, w0, #6, #3
     6ec:	strb	w1, [sp, #234]
     6f0:	ubfx	w1, w0, #9, #3
     6f4:	strb	w1, [sp, #216]
     6f8:	lsr	x2, x0, #12
     6fc:	str	x2, [sp, #208]
     700:	ldr	w1, [sp, #196]
     704:	sub	w3, w1, #0xc
     708:	str	w3, [sp, #196]
     70c:	cmp	w26, #0x4
     710:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     714:	and	w2, w2, #0x7
     718:	strb	w2, [sp, #224]
     71c:	lsr	x0, x0, #15
     720:	str	x0, [sp, #208]
     724:	sub	w1, w1, #0xf
     728:	str	w1, [sp, #196]
     72c:	cmp	w26, #0x5
     730:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     734:	mov	x3, x25
     738:	mov	x2, x24
     73c:	mov	x1, x23
     740:	add	x0, sp, #0xc8
     744:	bl	4a8 <elf_zlib_fetch>
     748:	cbz	w0, 1028 <elf_zlib_inflate_and_verify+0xb24>
     74c:	ldr	x0, [sp, #208]
     750:	and	w1, w0, #0x7
     754:	strb	w1, [sp, #223]
     758:	lsr	x2, x0, #3
     75c:	str	x2, [sp, #208]
     760:	ldr	w1, [sp, #196]
     764:	sub	w3, w1, #0x3
     768:	str	w3, [sp, #196]
     76c:	cmp	w26, #0x6
     770:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     774:	and	w2, w2, #0x7
     778:	strb	w2, [sp, #225]
     77c:	lsr	x2, x0, #6
     780:	str	x2, [sp, #208]
     784:	sub	w3, w1, #0x6
     788:	str	w3, [sp, #196]
     78c:	cmp	w26, #0x7
     790:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     794:	and	w2, w2, #0x7
     798:	strb	w2, [sp, #222]
     79c:	lsr	x2, x0, #9
     7a0:	str	x2, [sp, #208]
     7a4:	sub	w3, w1, #0x9
     7a8:	str	w3, [sp, #196]
     7ac:	cmp	w26, #0x8
     7b0:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     7b4:	and	w2, w2, #0x7
     7b8:	strb	w2, [sp, #226]
     7bc:	lsr	x2, x0, #12
     7c0:	str	x2, [sp, #208]
     7c4:	sub	w3, w1, #0xc
     7c8:	str	w3, [sp, #196]
     7cc:	cmp	w26, #0x9
     7d0:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     7d4:	and	w2, w2, #0x7
     7d8:	strb	w2, [sp, #221]
     7dc:	lsr	x0, x0, #15
     7e0:	str	x0, [sp, #208]
     7e4:	sub	w1, w1, #0xf
     7e8:	str	w1, [sp, #196]
     7ec:	cmp	w26, #0xa
     7f0:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     7f4:	mov	x3, x25
     7f8:	mov	x2, x24
     7fc:	mov	x1, x23
     800:	add	x0, sp, #0xc8
     804:	bl	4a8 <elf_zlib_fetch>
     808:	cbz	w0, 1030 <elf_zlib_inflate_and_verify+0xb2c>
     80c:	ldr	x0, [sp, #208]
     810:	and	w1, w0, #0x7
     814:	strb	w1, [sp, #227]
     818:	lsr	x2, x0, #3
     81c:	str	x2, [sp, #208]
     820:	ldr	w1, [sp, #196]
     824:	sub	w3, w1, #0x3
     828:	str	w3, [sp, #196]
     82c:	cmp	w26, #0xb
     830:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     834:	and	w2, w2, #0x7
     838:	strb	w2, [sp, #220]
     83c:	lsr	x2, x0, #6
     840:	str	x2, [sp, #208]
     844:	sub	w3, w1, #0x6
     848:	str	w3, [sp, #196]
     84c:	cmp	w26, #0xc
     850:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     854:	and	w2, w2, #0x7
     858:	strb	w2, [sp, #228]
     85c:	lsr	x2, x0, #9
     860:	str	x2, [sp, #208]
     864:	sub	w3, w1, #0x9
     868:	str	w3, [sp, #196]
     86c:	cmp	w26, #0xd
     870:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     874:	and	w2, w2, #0x7
     878:	strb	w2, [sp, #219]
     87c:	lsr	x2, x0, #12
     880:	str	x2, [sp, #208]
     884:	sub	w3, w1, #0xc
     888:	str	w3, [sp, #196]
     88c:	cmp	w26, #0xe
     890:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     894:	and	w2, w2, #0x7
     898:	strb	w2, [sp, #229]
     89c:	lsr	x0, x0, #15
     8a0:	str	x0, [sp, #208]
     8a4:	sub	w1, w1, #0xf
     8a8:	str	w1, [sp, #196]
     8ac:	cmp	w26, #0xf
     8b0:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     8b4:	mov	x3, x25
     8b8:	mov	x2, x24
     8bc:	mov	x1, x23
     8c0:	add	x0, sp, #0xc8
     8c4:	bl	4a8 <elf_zlib_fetch>
     8c8:	cbz	w0, 1038 <elf_zlib_inflate_and_verify+0xb34>
     8cc:	ldr	x0, [sp, #208]
     8d0:	and	w1, w0, #0x7
     8d4:	strb	w1, [sp, #218]
     8d8:	lsr	x2, x0, #3
     8dc:	str	x2, [sp, #208]
     8e0:	ldr	w1, [sp, #196]
     8e4:	sub	w3, w1, #0x3
     8e8:	str	w3, [sp, #196]
     8ec:	cmp	w26, #0x10
     8f0:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     8f4:	and	w2, w2, #0x7
     8f8:	strb	w2, [sp, #230]
     8fc:	lsr	x2, x0, #6
     900:	str	x2, [sp, #208]
     904:	sub	w3, w1, #0x6
     908:	str	w3, [sp, #196]
     90c:	cmp	w26, #0x11
     910:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     914:	and	w2, w2, #0x7
     918:	strb	w2, [sp, #217]
     91c:	lsr	x2, x0, #9
     920:	str	x2, [sp, #208]
     924:	sub	w3, w1, #0x9
     928:	str	w3, [sp, #196]
     92c:	cmp	w26, #0x12
     930:	b.eq	94c <elf_zlib_inflate_and_verify+0x448>  // b.none
     934:	and	w2, w2, #0x7
     938:	strb	w2, [sp, #231]
     93c:	lsr	x0, x0, #12
     940:	str	x0, [sp, #208]
     944:	sub	w1, w1, #0xc
     948:	str	w1, [sp, #196]
     94c:	ldr	x26, [sp, #112]
     950:	mov	x3, x26
     954:	mov	x2, x26
     958:	mov	x1, #0x13                  	// #19
     95c:	add	x0, sp, #0xd8
     960:	bl	6c <elf_zlib_inflate_table>
     964:	cbz	w0, 1040 <elf_zlib_inflate_and_verify+0xb3c>
     968:	add	x0, x26, #0x1, lsl #12
     96c:	add	x0, x0, #0x278
     970:	str	x0, [sp, #136]
     974:	mov	w1, w27
     978:	str	x1, [sp, #168]
     97c:	mov	w2, w28
     980:	str	x2, [sp, #184]
     984:	add	x28, x1, x2
     988:	add	x28, x0, x28
     98c:	cmp	x0, x28
     990:	b.cs	c74 <elf_zlib_inflate_and_verify+0x770>  // b.hs, b.nlast
     994:	mov	x26, x0
     998:	add	x0, sp, #0xc8
     99c:	str	x0, [sp, #128]
     9a0:	b	afc <elf_zlib_inflate_and_verify+0x5f8>
     9a4:	cmp	w0, #0x8
     9a8:	b.ls	9d0 <elf_zlib_inflate_and_verify+0x4cc>  // b.plast
     9ac:	ldr	x1, [sp, #200]
     9b0:	sub	w0, w0, #0x8
     9b4:	cmp	w0, #0x8
     9b8:	b.hi	9b0 <elf_zlib_inflate_and_verify+0x4ac>  // b.pmore
     9bc:	sub	w2, w2, #0xc
     9c0:	lsr	w2, w2, #3
     9c4:	mvn	x2, x2
     9c8:	add	x2, x1, x2
     9cc:	str	x2, [sp, #200]
     9d0:	str	xzr, [sp, #208]
     9d4:	str	wzr, [sp, #196]
     9d8:	ldr	x1, [sp, #200]
     9dc:	sub	x0, x23, x1
     9e0:	cmp	x0, #0x3
     9e4:	b.le	1054 <elf_zlib_inflate_and_verify+0xb50>
     9e8:	ldrb	w0, [x1, #1]
     9ec:	ldrb	w26, [x1]
     9f0:	bfi	w26, w0, #8, #24
     9f4:	ldrb	w2, [x1, #3]
     9f8:	ldrb	w0, [x1, #2]
     9fc:	bfi	w0, w2, #8, #24
     a00:	add	x1, x1, #0x4
     a04:	str	x1, [sp, #200]
     a08:	mvn	w0, w0
     a0c:	cmp	w26, w0, uxth
     a10:	b.ne	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.any
     a14:	sub	x0, x23, x1
     a18:	cmp	w26, w0
     a1c:	b.hi	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.pmore
     a20:	ldr	x0, [sp, #104]
     a24:	sub	x0, x0, x22
     a28:	cmp	w26, w0
     a2c:	b.hi	1054 <elf_zlib_inflate_and_verify+0xb50>  // b.pmore
     a30:	and	x26, x26, #0xffff
     a34:	mov	x2, x26
     a38:	mov	x0, x22
     a3c:	bl	0 <__asan_internal_memcpy>
     a40:	add	x22, x22, x26
     a44:	ldr	x0, [sp, #200]
     a48:	add	x26, x0, x26
     a4c:	str	x26, [sp, #200]
     a50:	tst	x26, #0x3
     a54:	b.eq	a84 <elf_zlib_inflate_and_verify+0x580>  // b.none
     a58:	ldr	w0, [sp, #196]
     a5c:	ldrb	w1, [x26], #1
     a60:	lsl	x2, x1, x0
     a64:	ldr	x1, [sp, #208]
     a68:	orr	x1, x1, x2
     a6c:	str	x1, [sp, #208]
     a70:	add	w0, w0, #0x8
     a74:	str	w0, [sp, #196]
     a78:	str	x26, [sp, #200]
     a7c:	tst	x26, #0x3
     a80:	b.ne	a58 <elf_zlib_inflate_and_verify+0x554>  // b.any
     a84:	ldr	x0, [sp, #160]
     a88:	tbz	w0, #0, 608 <elf_zlib_inflate_and_verify+0x104>
     a8c:	ldr	x0, [sp, #200]
     a90:	sub	x1, x23, x0
     a94:	cmp	x1, #0x4
     a98:	b.gt	564 <elf_zlib_inflate_and_verify+0x60>
     a9c:	b	1104 <elf_zlib_inflate_and_verify+0xc00>
     aa0:	cmp	w3, #0x10
     aa4:	b.eq	b5c <elf_zlib_inflate_and_verify+0x658>  // b.none
     aa8:	cmp	w3, #0x11
     aac:	b.eq	bcc <elf_zlib_inflate_and_verify+0x6c8>  // b.none
     ab0:	cmp	w3, #0x12
     ab4:	b.ne	1088 <elf_zlib_inflate_and_verify+0xb84>  // b.any
     ab8:	and	w27, w0, #0x7f
     abc:	add	w27, w27, #0xb
     ac0:	lsr	x0, x0, #7
     ac4:	str	x0, [sp, #208]
     ac8:	sub	w1, w1, #0x8
     acc:	str	w1, [sp, #196]
     ad0:	sub	x0, x28, x26
     ad4:	cmp	w27, w0
     ad8:	b.hi	1090 <elf_zlib_inflate_and_verify+0xb8c>  // b.pmore
     adc:	mov	w27, w27
     ae0:	mov	x2, x27
     ae4:	mov	w1, #0x0                   	// #0
     ae8:	mov	x0, x26
     aec:	bl	0 <__asan_internal_memset>
     af0:	add	x26, x26, x27
     af4:	cmp	x26, x28
     af8:	b.cs	c74 <elf_zlib_inflate_and_verify+0x770>  // b.hs, b.nlast
     afc:	mov	x3, x25
     b00:	mov	x2, x24
     b04:	mov	x1, x23
     b08:	ldr	x0, [sp, #128]
     b0c:	bl	4a8 <elf_zlib_fetch>
     b10:	cbz	w0, 1048 <elf_zlib_inflate_and_verify+0xb44>
     b14:	ldr	x0, [sp, #208]
     b18:	and	x1, x0, #0xff
     b1c:	ldr	x2, [sp, #112]
     b20:	ldrh	w2, [x2, x1, lsl #1]
     b24:	tbnz	w2, #12, 1050 <elf_zlib_inflate_and_verify+0xb4c>
     b28:	ubfx	x3, x2, #9, #3
     b2c:	add	w1, w3, #0x1
     b30:	lsr	x0, x0, x1
     b34:	str	x0, [sp, #208]
     b38:	ldr	w1, [sp, #196]
     b3c:	sub	w1, w1, w3
     b40:	sub	w3, w1, #0x1
     b44:	str	w3, [sp, #196]
     b48:	and	w3, w2, #0x1ff
     b4c:	tst	w2, #0x1f0
     b50:	b.ne	aa0 <elf_zlib_inflate_and_verify+0x59c>  // b.any
     b54:	strb	w3, [x26], #1
     b58:	b	af4 <elf_zlib_inflate_and_verify+0x5f0>
     b5c:	ldr	x2, [sp, #136]
     b60:	cmp	x26, x2
     b64:	b.eq	1070 <elf_zlib_inflate_and_verify+0xb6c>  // b.none
     b68:	and	w2, w0, #0x3
     b6c:	add	w2, w2, #0x3
     b70:	lsr	x0, x0, #2
     b74:	str	x0, [sp, #208]
     b78:	sub	w1, w1, #0x3
     b7c:	str	w1, [sp, #196]
     b80:	sub	x0, x28, x26
     b84:	cmp	w2, w0
     b88:	b.hi	1078 <elf_zlib_inflate_and_verify+0xb74>  // b.pmore
     b8c:	ldurb	w0, [x26, #-1]
     b90:	cmp	w2, #0x5
     b94:	b.eq	bb0 <elf_zlib_inflate_and_verify+0x6ac>  // b.none
     b98:	cmp	w2, #0x6
     b9c:	b.eq	bac <elf_zlib_inflate_and_verify+0x6a8>  // b.none
     ba0:	cmp	w2, #0x4
     ba4:	b.ne	bb8 <elf_zlib_inflate_and_verify+0x6b4>  // b.any
     ba8:	b	bb4 <elf_zlib_inflate_and_verify+0x6b0>
     bac:	strb	w0, [x26], #1
     bb0:	strb	w0, [x26], #1
     bb4:	strb	w0, [x26], #1
     bb8:	strb	w0, [x26]
     bbc:	strb	w0, [x26, #1]
     bc0:	strb	w0, [x26, #2]
     bc4:	add	x26, x26, #0x3
     bc8:	b	af4 <elf_zlib_inflate_and_verify+0x5f0>
     bcc:	and	w2, w0, #0x7
     bd0:	add	w2, w2, #0x3
     bd4:	lsr	x0, x0, #3
     bd8:	str	x0, [sp, #208]
     bdc:	sub	w1, w1, #0x4
     be0:	str	w1, [sp, #196]
     be4:	sub	x0, x28, x26
     be8:	cmp	w2, w0
     bec:	b.hi	1080 <elf_zlib_inflate_and_verify+0xb7c>  // b.pmore
     bf0:	cmp	w2, #0x7
     bf4:	b.eq	c6c <elf_zlib_inflate_and_verify+0x768>  // b.none
     bf8:	b.hi	c40 <elf_zlib_inflate_and_verify+0x73c>  // b.pmore
     bfc:	cmp	w2, #0x5
     c00:	b.eq	c10 <elf_zlib_inflate_and_verify+0x70c>  // b.none
     c04:	cmp	w2, #0x6
     c08:	b.ne	c18 <elf_zlib_inflate_and_verify+0x714>  // b.any
     c0c:	strb	wzr, [x26], #1
     c10:	strb	wzr, [x26], #1
     c14:	b	c24 <elf_zlib_inflate_and_verify+0x720>
     c18:	mov	x0, x26
     c1c:	cmp	w2, #0x4
     c20:	b.ne	c2c <elf_zlib_inflate_and_verify+0x728>  // b.any
     c24:	mov	x0, x26
     c28:	strb	wzr, [x0], #1
     c2c:	strb	wzr, [x0]
     c30:	strb	wzr, [x0, #1]
     c34:	add	x26, x0, #0x3
     c38:	strb	wzr, [x0, #2]
     c3c:	b	af4 <elf_zlib_inflate_and_verify+0x5f0>
     c40:	cmp	w2, #0x9
     c44:	b.eq	c54 <elf_zlib_inflate_and_verify+0x750>  // b.none
     c48:	cmp	w2, #0xa
     c4c:	b.ne	c5c <elf_zlib_inflate_and_verify+0x758>  // b.any
     c50:	strb	wzr, [x26], #1
     c54:	strb	wzr, [x26], #1
     c58:	b	c68 <elf_zlib_inflate_and_verify+0x764>
     c5c:	mov	x0, x26
     c60:	cmp	w2, #0x8
     c64:	b.ne	c2c <elf_zlib_inflate_and_verify+0x728>  // b.any
     c68:	strb	wzr, [x26], #1
     c6c:	strb	wzr, [x26], #1
     c70:	b	c0c <elf_zlib_inflate_and_verify+0x708>
     c74:	ldr	x26, [sp, #112]
     c78:	add	x0, x26, #0x1, lsl #12
     c7c:	ldrb	w0, [x0, #888]
     c80:	cbz	w0, 1098 <elf_zlib_inflate_and_verify+0xb94>
     c84:	mov	x3, x26
     c88:	mov	x2, x26
     c8c:	ldr	x28, [sp, #168]
     c90:	mov	x1, x28
     c94:	ldr	x27, [sp, #136]
     c98:	mov	x0, x27
     c9c:	bl	6c <elf_zlib_inflate_table>
     ca0:	cbz	w0, 10a0 <elf_zlib_inflate_and_verify+0xb9c>
     ca4:	add	x2, x26, #0x800
     ca8:	str	x2, [sp, #176]
     cac:	mov	x3, x2
     cb0:	mov	x2, x26
     cb4:	ldr	x1, [sp, #184]
     cb8:	add	x0, x27, x28
     cbc:	bl	6c <elf_zlib_inflate_table>
     cc0:	cbz	w0, 10a8 <elf_zlib_inflate_and_verify+0xba4>
     cc4:	str	x26, [sp, #136]
     cc8:	b	cdc <elf_zlib_inflate_and_verify+0x7d8>
     ccc:	ldr	x0, [sp, #144]
     cd0:	str	x0, [sp, #176]
     cd4:	ldr	x0, [sp, #152]
     cd8:	str	x0, [sp, #136]
     cdc:	add	x0, sp, #0xc8
     ce0:	str	x0, [sp, #128]
     ce4:	b	d38 <elf_zlib_inflate_and_verify+0x834>
     ce8:	mov	w2, #0x1                   	// #1
     cec:	lsl	w1, w2, w1
     cf0:	sub	w1, w1, #0x1
     cf4:	and	x1, x1, x0, lsr #8
     cf8:	add	w26, w26, #0x100
     cfc:	add	x1, x1, w26, sxtw
     d00:	ldr	x2, [sp, #136]
     d04:	ldrh	w26, [x2, x1, lsl #1]
     d08:	ubfx	x1, x26, #9, #3
     d0c:	and	w26, w26, #0x1ff
     d10:	add	w2, w1, #0x8
     d14:	lsr	x0, x0, x2
     d18:	str	x0, [sp, #208]
     d1c:	ldr	w0, [sp, #196]
     d20:	sub	w0, w0, #0x8
     d24:	sub	w0, w0, w1
     d28:	str	w0, [sp, #196]
     d2c:	b	d88 <elf_zlib_inflate_and_verify+0x884>
     d30:	strb	w26, [x22], #1
     d34:	prfm	pstl1keep, [x22]
     d38:	mov	x3, x25
     d3c:	mov	x2, x24
     d40:	mov	x1, x23
     d44:	ldr	x0, [sp, #128]
     d48:	bl	4a8 <elf_zlib_fetch>
     d4c:	cbz	w0, 10b0 <elf_zlib_inflate_and_verify+0xbac>
     d50:	ldr	x0, [sp, #208]
     d54:	and	x1, x0, #0xff
     d58:	ldr	x2, [sp, #136]
     d5c:	ldrh	w2, [x2, x1, lsl #1]
     d60:	ubfx	x1, x2, #9, #3
     d64:	and	w26, w2, #0x1ff
     d68:	tbnz	w2, #12, ce8 <elf_zlib_inflate_and_verify+0x7e4>
     d6c:	add	w2, w1, #0x1
     d70:	lsr	x0, x0, x2
     d74:	str	x0, [sp, #208]
     d78:	ldr	w0, [sp, #196]
     d7c:	sub	w0, w0, #0x1
     d80:	sub	w1, w0, w1
     d84:	str	w1, [sp, #196]
     d88:	cmp	w26, #0xff
     d8c:	b.hi	da4 <elf_zlib_inflate_and_verify+0x8a0>  // b.pmore
     d90:	ldr	x0, [sp, #104]
     d94:	cmp	x0, x22
     d98:	b.ne	d30 <elf_zlib_inflate_and_verify+0x82c>  // b.any
     d9c:	ldp	x27, x28, [sp, #80]
     da0:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
     da4:	cmp	w26, #0x100
     da8:	b.eq	1008 <elf_zlib_inflate_and_verify+0xb04>  // b.none
     dac:	cmp	w26, #0x108
     db0:	b.hi	e40 <elf_zlib_inflate_and_verify+0x93c>  // b.pmore
     db4:	sub	w28, w26, #0xfe
     db8:	mov	x3, x25
     dbc:	mov	x2, x24
     dc0:	mov	x1, x23
     dc4:	ldr	x0, [sp, #128]
     dc8:	bl	4a8 <elf_zlib_fetch>
     dcc:	cbz	w0, 10c8 <elf_zlib_inflate_and_verify+0xbc4>
     dd0:	ldr	x0, [sp, #208]
     dd4:	and	x1, x0, #0xff
     dd8:	ldr	x2, [sp, #176]
     ddc:	ldrh	w2, [x2, x1, lsl #1]
     de0:	ubfx	x1, x2, #9, #3
     de4:	and	w26, w2, #0x1ff
     de8:	tbnz	w2, #12, ec0 <elf_zlib_inflate_and_verify+0x9bc>
     dec:	add	w2, w1, #0x1
     df0:	lsr	x0, x0, x2
     df4:	str	x0, [sp, #208]
     df8:	ldr	w0, [sp, #196]
     dfc:	sub	w0, w0, #0x1
     e00:	sub	w1, w0, w1
     e04:	str	w1, [sp, #196]
     e08:	cbnz	w26, f08 <elf_zlib_inflate_and_verify+0xa04>
     e0c:	cmp	x19, x22
     e10:	b.eq	10d0 <elf_zlib_inflate_and_verify+0xbcc>  // b.none
     e14:	ldr	x0, [sp, #104]
     e18:	sub	x0, x0, x22
     e1c:	cmp	w28, w0
     e20:	b.hi	10d8 <elf_zlib_inflate_and_verify+0xbd4>  // b.pmore
     e24:	mov	w28, w28
     e28:	mov	x2, x28
     e2c:	ldurb	w1, [x22, #-1]
     e30:	mov	x0, x22
     e34:	bl	0 <__asan_internal_memset>
     e38:	add	x22, x22, x28
     e3c:	b	d38 <elf_zlib_inflate_and_verify+0x834>
     e40:	cmp	w26, #0x11d
     e44:	b.eq	eb8 <elf_zlib_inflate_and_verify+0x9b4>  // b.none
     e48:	b.hi	10b8 <elf_zlib_inflate_and_verify+0xbb4>  // b.pmore
     e4c:	mov	x3, x25
     e50:	mov	x2, x24
     e54:	mov	x1, x23
     e58:	ldr	x0, [sp, #128]
     e5c:	bl	4a8 <elf_zlib_fetch>
     e60:	cbz	w0, 10c0 <elf_zlib_inflate_and_verify+0xbbc>
     e64:	sub	w26, w26, #0x109
     e68:	lsr	w1, w26, #2
     e6c:	add	w2, w1, #0x1
     e70:	and	w26, w26, #0x3
     e74:	lsl	w0, w26, w2
     e78:	add	w0, w0, #0xb
     e7c:	ldr	x3, [sp, #208]
     e80:	mov	w4, #0x1                   	// #1
     e84:	lsl	w1, w4, w1
     e88:	sub	w1, w1, #0x1
     e8c:	mov	w4, #0xffffffff            	// #-1
     e90:	lsl	w4, w4, w2
     e94:	bic	w4, w3, w4
     e98:	add	w1, w4, w1, lsl #3
     e9c:	add	w28, w1, w0
     ea0:	lsr	x3, x3, x2
     ea4:	str	x3, [sp, #208]
     ea8:	ldr	w0, [sp, #196]
     eac:	sub	w2, w0, w2
     eb0:	str	w2, [sp, #196]
     eb4:	b	db8 <elf_zlib_inflate_and_verify+0x8b4>
     eb8:	mov	w28, #0x102                 	// #258
     ebc:	b	db8 <elf_zlib_inflate_and_verify+0x8b4>
     ec0:	mov	w2, #0x1                   	// #1
     ec4:	lsl	w1, w2, w1
     ec8:	sub	w1, w1, #0x1
     ecc:	and	x1, x1, x0, lsr #8
     ed0:	add	w26, w26, #0x100
     ed4:	add	x1, x1, w26, sxtw
     ed8:	ldr	x2, [sp, #176]
     edc:	ldrh	w26, [x2, x1, lsl #1]
     ee0:	ubfx	x1, x26, #9, #3
     ee4:	and	w26, w26, #0x1ff
     ee8:	add	w2, w1, #0x8
     eec:	lsr	x0, x0, x2
     ef0:	str	x0, [sp, #208]
     ef4:	ldr	w0, [sp, #196]
     ef8:	sub	w0, w0, #0x8
     efc:	sub	w0, w0, w1
     f00:	str	w0, [sp, #196]
     f04:	b	e08 <elf_zlib_inflate_and_verify+0x904>
     f08:	cmp	w26, #0x1d
     f0c:	b.hi	10e0 <elf_zlib_inflate_and_verify+0xbdc>  // b.pmore
     f10:	cmp	w26, #0x3
     f14:	b.hi	f5c <elf_zlib_inflate_and_verify+0xa58>  // b.pmore
     f18:	add	w26, w26, #0x1
     f1c:	sub	x0, x22, x19
     f20:	cmp	w26, w0
     f24:	b.hi	10f0 <elf_zlib_inflate_and_verify+0xbec>  // b.pmore
     f28:	ldr	x0, [sp, #104]
     f2c:	sub	x0, x0, x22
     f30:	cmp	w28, w0
     f34:	b.hi	10f8 <elf_zlib_inflate_and_verify+0xbf4>  // b.pmore
     f38:	cmp	w28, w26
     f3c:	b.hi	fc8 <elf_zlib_inflate_and_verify+0xac4>  // b.pmore
     f40:	mov	w27, w28
     f44:	mov	x2, x27
     f48:	sub	x1, x22, w26, uxtw
     f4c:	mov	x0, x22
     f50:	bl	0 <__asan_internal_memcpy>
     f54:	add	x22, x22, x27
     f58:	b	d38 <elf_zlib_inflate_and_verify+0x834>
     f5c:	mov	x3, x25
     f60:	mov	x2, x24
     f64:	mov	x1, x23
     f68:	ldr	x0, [sp, #128]
     f6c:	bl	4a8 <elf_zlib_fetch>
     f70:	cbz	w0, 10e8 <elf_zlib_inflate_and_verify+0xbe4>
     f74:	sub	w26, w26, #0x4
     f78:	lsr	w1, w26, #1
     f7c:	add	w2, w1, #0x1
     f80:	and	w26, w26, #0x1
     f84:	lsl	w0, w26, w2
     f88:	add	w0, w0, #0x5
     f8c:	ldr	x3, [sp, #208]
     f90:	mov	w4, #0x1                   	// #1
     f94:	lsl	w1, w4, w1
     f98:	sub	w1, w1, #0x1
     f9c:	mov	w4, #0xffffffff            	// #-1
     fa0:	lsl	w4, w4, w2
     fa4:	bic	w4, w3, w4
     fa8:	add	w1, w4, w1, lsl #2
     fac:	add	w26, w1, w0
     fb0:	lsr	x3, x3, x2
     fb4:	str	x3, [sp, #208]
     fb8:	ldr	w0, [sp, #196]
     fbc:	sub	w2, w0, w2
     fc0:	str	w2, [sp, #196]
     fc4:	b	f1c <elf_zlib_inflate_and_verify+0xa18>
     fc8:	mov	w0, w26
     fcc:	str	x0, [sp, #184]
     fd0:	cmp	w28, w26
     fd4:	csel	w0, w28, w26, ls  // ls = plast
     fd8:	str	w0, [sp, #168]
     fdc:	csel	w27, w28, w26, ls  // ls = plast
     fe0:	mov	x2, x27
     fe4:	ldr	x1, [sp, #184]
     fe8:	sub	x1, x22, x1
     fec:	mov	x0, x22
     ff0:	bl	0 <__asan_internal_memcpy>
     ff4:	add	x22, x22, x27
     ff8:	ldr	w0, [sp, #168]
     ffc:	subs	w28, w28, w0
    1000:	b.ne	fd0 <elf_zlib_inflate_and_verify+0xacc>  // b.any
    1004:	b	d38 <elf_zlib_inflate_and_verify+0x834>
    1008:	ldp	x27, x28, [sp, #80]
    100c:	b	a84 <elf_zlib_inflate_and_verify+0x580>
    1010:	ldp	x27, x28, [sp, #80]
    1014:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1018:	ldp	x27, x28, [sp, #80]
    101c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1020:	ldp	x27, x28, [sp, #80]
    1024:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1028:	ldp	x27, x28, [sp, #80]
    102c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1030:	ldp	x27, x28, [sp, #80]
    1034:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1038:	ldp	x27, x28, [sp, #80]
    103c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1040:	ldp	x27, x28, [sp, #80]
    1044:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1048:	ldp	x27, x28, [sp, #80]
    104c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1050:	ldp	x27, x28, [sp, #80]
    1054:	mov	w0, #0x0                   	// #0
    1058:	ldp	x19, x20, [sp, #16]
    105c:	ldp	x21, x22, [sp, #32]
    1060:	ldp	x23, x24, [sp, #48]
    1064:	ldp	x25, x26, [sp, #64]
    1068:	ldp	x29, x30, [sp], #240
    106c:	ret
    1070:	ldp	x27, x28, [sp, #80]
    1074:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1078:	ldp	x27, x28, [sp, #80]
    107c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1080:	ldp	x27, x28, [sp, #80]
    1084:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1088:	ldp	x27, x28, [sp, #80]
    108c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1090:	ldp	x27, x28, [sp, #80]
    1094:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1098:	ldp	x27, x28, [sp, #80]
    109c:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10a0:	ldp	x27, x28, [sp, #80]
    10a4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10a8:	ldp	x27, x28, [sp, #80]
    10ac:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10b0:	ldp	x27, x28, [sp, #80]
    10b4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10b8:	ldp	x27, x28, [sp, #80]
    10bc:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10c0:	ldp	x27, x28, [sp, #80]
    10c4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10c8:	ldp	x27, x28, [sp, #80]
    10cc:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10d0:	ldp	x27, x28, [sp, #80]
    10d4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10d8:	ldp	x27, x28, [sp, #80]
    10dc:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10e0:	ldp	x27, x28, [sp, #80]
    10e4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10e8:	ldp	x27, x28, [sp, #80]
    10ec:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10f0:	ldp	x27, x28, [sp, #80]
    10f4:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    10f8:	ldp	x27, x28, [sp, #80]
    10fc:	b	1054 <elf_zlib_inflate_and_verify+0xb50>
    1100:	mov	x22, x3
    1104:	ldr	x0, [sp, #104]
    1108:	cmp	x0, x22
    110c:	b.ne	139c <elf_zlib_inflate_and_verify+0xe98>  // b.any
    1110:	ldr	x1, [sp, #120]
    1114:	sub	x0, x1, #0x4
    1118:	add	x0, x21, x0
    111c:	add	x21, x21, x1
    1120:	mov	w9, #0x0                   	// #0
    1124:	ldrb	w1, [x0], #1
    1128:	orr	w9, w1, w9, lsl #8
    112c:	cmp	x21, x0
    1130:	b.ne	1124 <elf_zlib_inflate_and_verify+0xc20>  // b.any
    1134:	mov	w5, #0x0                   	// #0
    1138:	mov	w3, #0x1                   	// #1
    113c:	mov	x0, #0x15af                	// #5551
    1140:	cmp	x20, x0
    1144:	b.ls	1390 <elf_zlib_inflate_and_verify+0xe8c>  // b.plast
    1148:	mov	x13, #0x15b0                	// #5552
    114c:	mov	w15, #0x8071                	// #32881
    1150:	movk	w15, #0x8007, lsl #16
    1154:	mov	w14, #0xfff1                	// #65521
    1158:	mov	x17, x0
    115c:	mov	x2, x19
    1160:	add	x16, x19, x13
    1164:	ldrb	w0, [x2]
    1168:	add	w0, w0, w3
    116c:	ldrb	w1, [x2, #1]
    1170:	add	w1, w1, w0
    1174:	ldrb	w6, [x2, #2]
    1178:	add	w6, w6, w1
    117c:	ldrb	w25, [x2, #3]
    1180:	add	w25, w25, w6
    1184:	ldrb	w4, [x2, #4]
    1188:	add	w4, w4, w25
    118c:	ldrb	w24, [x2, #5]
    1190:	add	w24, w24, w4
    1194:	ldrb	w12, [x2, #6]
    1198:	add	w12, w12, w24
    119c:	ldrb	w23, [x2, #7]
    11a0:	add	w23, w23, w12
    11a4:	ldrb	w11, [x2, #8]
    11a8:	add	w11, w11, w23
    11ac:	ldrb	w22, [x2, #9]
    11b0:	add	w22, w22, w11
    11b4:	ldrb	w10, [x2, #10]
    11b8:	add	w10, w10, w22
    11bc:	ldrb	w21, [x2, #11]
    11c0:	add	w21, w21, w10
    11c4:	ldrb	w8, [x2, #12]
    11c8:	add	w8, w8, w21
    11cc:	ldrb	w18, [x2, #13]
    11d0:	add	w18, w18, w8
    11d4:	ldrb	w7, [x2, #14]
    11d8:	add	w7, w7, w18
    11dc:	add	x2, x2, #0x10
    11e0:	ldurb	w3, [x2, #-1]
    11e4:	add	w3, w3, w7
    11e8:	add	w1, w0, w1
    11ec:	add	w6, w6, w25
    11f0:	add	w1, w1, w6
    11f4:	add	w4, w4, w24
    11f8:	add	w1, w1, w4
    11fc:	add	w12, w12, w23
    1200:	add	w1, w1, w12
    1204:	add	w0, w11, w22
    1208:	add	w0, w1, w0
    120c:	add	w10, w10, w21
    1210:	add	w0, w0, w10
    1214:	add	w8, w8, w18
    1218:	add	w0, w0, w8
    121c:	add	w7, w7, w3
    1220:	add	w0, w0, w7
    1224:	add	w5, w5, w0
    1228:	cmp	x2, x16
    122c:	b.ne	1164 <elf_zlib_inflate_and_verify+0xc60>  // b.any
    1230:	add	x19, x19, x13
    1234:	sub	x20, x20, x13
    1238:	umull	x0, w3, w15
    123c:	lsr	x0, x0, #47
    1240:	msub	w3, w0, w14, w3
    1244:	umull	x0, w5, w15
    1248:	lsr	x0, x0, #47
    124c:	msub	w5, w0, w14, w5
    1250:	cmp	x20, x17
    1254:	b.hi	115c <elf_zlib_inflate_and_verify+0xc58>  // b.pmore
    1258:	cmp	x20, #0xf
    125c:	b.ls	1340 <elf_zlib_inflate_and_verify+0xe3c>  // b.plast
    1260:	sub	x12, x20, #0x10
    1264:	and	x12, x12, #0xfffffffffffffff0
    1268:	add	x12, x12, #0x10
    126c:	add	x12, x19, x12
    1270:	ldrb	w0, [x19]
    1274:	add	w0, w0, w3
    1278:	ldrb	w1, [x19, #1]
    127c:	add	w1, w1, w0
    1280:	ldrb	w11, [x19, #2]
    1284:	add	w11, w11, w1
    1288:	ldrb	w18, [x19, #3]
    128c:	add	w18, w18, w11
    1290:	ldrb	w10, [x19, #4]
    1294:	add	w10, w10, w18
    1298:	ldrb	w17, [x19, #5]
    129c:	add	w17, w17, w10
    12a0:	ldrb	w8, [x19, #6]
    12a4:	add	w8, w8, w17
    12a8:	ldrb	w16, [x19, #7]
    12ac:	add	w16, w16, w8
    12b0:	ldrb	w7, [x19, #8]
    12b4:	add	w7, w7, w16
    12b8:	ldrb	w15, [x19, #9]
    12bc:	add	w15, w15, w7
    12c0:	ldrb	w6, [x19, #10]
    12c4:	add	w6, w6, w15
    12c8:	ldrb	w14, [x19, #11]
    12cc:	add	w14, w14, w6
    12d0:	ldrb	w4, [x19, #12]
    12d4:	add	w4, w4, w14
    12d8:	ldrb	w13, [x19, #13]
    12dc:	add	w13, w13, w4
    12e0:	ldrb	w2, [x19, #14]
    12e4:	add	w2, w2, w13
    12e8:	add	x19, x19, #0x10
    12ec:	ldurb	w3, [x19, #-1]
    12f0:	add	w3, w3, w2
    12f4:	add	w1, w0, w1
    12f8:	add	w11, w11, w18
    12fc:	add	w1, w1, w11
    1300:	add	w10, w10, w17
    1304:	add	w1, w1, w10
    1308:	add	w8, w8, w16
    130c:	add	w1, w1, w8
    1310:	add	w0, w7, w15
    1314:	add	w0, w1, w0
    1318:	add	w6, w6, w14
    131c:	add	w0, w0, w6
    1320:	add	w4, w4, w13
    1324:	add	w0, w0, w4
    1328:	add	w2, w2, w3
    132c:	add	w0, w0, w2
    1330:	add	w5, w5, w0
    1334:	cmp	x12, x19
    1338:	b.ne	1270 <elf_zlib_inflate_and_verify+0xd6c>  // b.any
    133c:	and	x20, x20, #0xf
    1340:	cbz	x20, 135c <elf_zlib_inflate_and_verify+0xe58>
    1344:	add	x20, x19, x20
    1348:	ldrb	w0, [x19], #1
    134c:	add	w3, w3, w0
    1350:	add	w5, w5, w3
    1354:	cmp	x19, x20
    1358:	b.ne	1348 <elf_zlib_inflate_and_verify+0xe44>  // b.any
    135c:	mov	w0, #0x8071                	// #32881
    1360:	movk	w0, #0x8007, lsl #16
    1364:	umull	x1, w5, w0
    1368:	lsr	x1, x1, #47
    136c:	mov	w2, #0xfff1                	// #65521
    1370:	msub	w5, w1, w2, w5
    1374:	umull	x0, w3, w0
    1378:	lsr	x0, x0, #47
    137c:	msub	w3, w0, w2, w3
    1380:	add	w3, w3, w5, lsl #16
    1384:	cmp	w3, w9
    1388:	cset	w0, eq  // eq = none
    138c:	b	1058 <elf_zlib_inflate_and_verify+0xb54>
    1390:	mov	w5, #0x0                   	// #0
    1394:	mov	w3, #0x1                   	// #1
    1398:	b	1258 <elf_zlib_inflate_and_verify+0xd54>
    139c:	mov	w0, #0x0                   	// #0
    13a0:	b	1058 <elf_zlib_inflate_and_verify+0xb54>

00000000000013a4 <elf_uncompress_zdebug>:
    13a4:	stp	x29, x30, [sp, #-112]!
    13a8:	mov	x29, sp
    13ac:	stp	x23, x24, [sp, #48]
    13b0:	str	x5, [sp, #104]
    13b4:	str	xzr, [x6]
    13b8:	str	xzr, [x7]
    13bc:	mov	w24, #0x1                   	// #1
    13c0:	cmp	x2, #0xb
    13c4:	b.hi	13d8 <elf_uncompress_zdebug+0x34>  // b.pmore
    13c8:	mov	w0, w24
    13cc:	ldp	x23, x24, [sp, #48]
    13d0:	ldp	x29, x30, [sp], #112
    13d4:	ret
    13d8:	stp	x19, x20, [sp, #16]
    13dc:	stp	x21, x22, [sp, #32]
    13e0:	stp	x25, x26, [sp, #64]
    13e4:	stp	x27, x28, [sp, #80]
    13e8:	mov	x26, x0
    13ec:	mov	x22, x1
    13f0:	mov	x23, x2
    13f4:	mov	x25, x3
    13f8:	mov	x27, x4
    13fc:	mov	x20, x6
    1400:	mov	x21, x7
    1404:	mov	x2, #0x4                   	// #4
    1408:	adrp	x1, 0 <elf_nodebug>
    140c:	add	x1, x1, #0x0
    1410:	mov	x0, x22
    1414:	bl	0 <__asan_internal_memcmp>
    1418:	mov	w24, w0
    141c:	cbnz	w0, 14a8 <elf_uncompress_zdebug+0x104>
    1420:	add	x0, x22, #0x4
    1424:	add	x2, x22, #0xc
    1428:	mov	x19, #0x0                   	// #0
    142c:	ldrb	w1, [x0], #1
    1430:	orr	x19, x1, x19, lsl #8
    1434:	cmp	x0, x2
    1438:	b.ne	142c <elf_uncompress_zdebug+0x88>  // b.any
    143c:	ldr	x28, [x20]
    1440:	cbz	x28, 1450 <elf_uncompress_zdebug+0xac>
    1444:	ldr	x0, [x21]
    1448:	cmp	x0, x19
    144c:	b.cs	146c <elf_uncompress_zdebug+0xc8>  // b.hs, b.nlast
    1450:	ldr	x3, [sp, #104]
    1454:	mov	x2, x27
    1458:	mov	x1, x19
    145c:	mov	x0, x26
    1460:	bl	0 <__asan_backtrace_alloc>
    1464:	mov	x28, x0
    1468:	cbz	x0, 14c0 <elf_uncompress_zdebug+0x11c>
    146c:	mov	x4, x19
    1470:	mov	x3, x28
    1474:	mov	x2, x25
    1478:	sub	x1, x23, #0xc
    147c:	add	x0, x22, #0xc
    1480:	bl	504 <elf_zlib_inflate_and_verify>
    1484:	mov	w24, #0x1                   	// #1
    1488:	cbz	w0, 14d4 <elf_uncompress_zdebug+0x130>
    148c:	str	x28, [x20]
    1490:	str	x19, [x21]
    1494:	ldp	x19, x20, [sp, #16]
    1498:	ldp	x21, x22, [sp, #32]
    149c:	ldp	x25, x26, [sp, #64]
    14a0:	ldp	x27, x28, [sp, #80]
    14a4:	b	13c8 <elf_uncompress_zdebug+0x24>
    14a8:	mov	w24, #0x1                   	// #1
    14ac:	ldp	x19, x20, [sp, #16]
    14b0:	ldp	x21, x22, [sp, #32]
    14b4:	ldp	x25, x26, [sp, #64]
    14b8:	ldp	x27, x28, [sp, #80]
    14bc:	b	13c8 <elf_uncompress_zdebug+0x24>
    14c0:	ldp	x19, x20, [sp, #16]
    14c4:	ldp	x21, x22, [sp, #32]
    14c8:	ldp	x25, x26, [sp, #64]
    14cc:	ldp	x27, x28, [sp, #80]
    14d0:	b	13c8 <elf_uncompress_zdebug+0x24>
    14d4:	ldp	x19, x20, [sp, #16]
    14d8:	ldp	x21, x22, [sp, #32]
    14dc:	ldp	x25, x26, [sp, #64]
    14e0:	ldp	x27, x28, [sp, #80]
    14e4:	b	13c8 <elf_uncompress_zdebug+0x24>

00000000000014e8 <elf_try_debugfile>:
    14e8:	stp	x29, x30, [sp, #-144]!
    14ec:	mov	x29, sp
    14f0:	stp	x19, x20, [sp, #16]
    14f4:	stp	x21, x22, [sp, #32]
    14f8:	stp	x23, x24, [sp, #48]
    14fc:	stp	x25, x26, [sp, #64]
    1500:	stp	x27, x28, [sp, #80]
    1504:	mov	x23, x0
    1508:	str	x1, [sp, #104]
    150c:	mov	x22, x2
    1510:	str	x3, [sp, #112]
    1514:	mov	x25, x4
    1518:	mov	x20, x6
    151c:	mov	x21, x7
    1520:	str	x5, [sp, #120]
    1524:	mov	x0, x5
    1528:	bl	0 <__asan_internal_strlen>
    152c:	mov	x24, x0
    1530:	add	x28, x22, x25
    1534:	add	x27, x28, x0
    1538:	add	x26, x27, #0x1
    153c:	mov	x3, x21
    1540:	mov	x2, x20
    1544:	mov	x1, x26
    1548:	mov	x0, x23
    154c:	bl	0 <__asan_backtrace_alloc>
    1550:	cbz	x0, 15d8 <elf_try_debugfile+0xf0>
    1554:	mov	x19, x0
    1558:	mov	x2, x22
    155c:	ldr	x1, [sp, #104]
    1560:	bl	0 <__asan_internal_memcpy>
    1564:	mov	x2, x25
    1568:	ldr	x1, [sp, #112]
    156c:	add	x0, x19, x22
    1570:	bl	0 <__asan_internal_memcpy>
    1574:	mov	x2, x24
    1578:	ldr	x1, [sp, #120]
    157c:	add	x0, x19, x28
    1580:	bl	0 <__asan_internal_memcpy>
    1584:	strb	wzr, [x19, x27]
    1588:	add	x3, sp, #0x8c
    158c:	mov	x2, x21
    1590:	mov	x1, x20
    1594:	mov	x0, x19
    1598:	bl	0 <__asan_backtrace_open>
    159c:	mov	w22, w0
    15a0:	mov	x4, x21
    15a4:	mov	x3, x20
    15a8:	mov	x2, x26
    15ac:	mov	x1, x19
    15b0:	mov	x0, x23
    15b4:	bl	0 <__asan_backtrace_free>
    15b8:	mov	w0, w22
    15bc:	ldp	x19, x20, [sp, #16]
    15c0:	ldp	x21, x22, [sp, #32]
    15c4:	ldp	x23, x24, [sp, #48]
    15c8:	ldp	x25, x26, [sp, #64]
    15cc:	ldp	x27, x28, [sp, #80]
    15d0:	ldp	x29, x30, [sp], #144
    15d4:	ret
    15d8:	mov	w22, #0xffffffff            	// #-1
    15dc:	b	15b8 <elf_try_debugfile+0xd0>

00000000000015e0 <elf_open_debugfile_by_debuglink>:
    15e0:	stp	x29, x30, [sp, #-288]!
    15e4:	mov	x29, sp
    15e8:	stp	x19, x20, [sp, #16]
    15ec:	stp	x21, x22, [sp, #32]
    15f0:	stp	x23, x24, [sp, #48]
    15f4:	stp	x25, x26, [sp, #64]
    15f8:	stp	x27, x28, [sp, #80]
    15fc:	mov	x24, x0
    1600:	mov	x21, x1
    1604:	str	x2, [sp, #96]
    1608:	str	w3, [sp, #108]
    160c:	mov	x22, x4
    1610:	mov	x23, x5
    1614:	mov	x28, #0x0                   	// #0
    1618:	mov	x27, #0x0                   	// #0
    161c:	add	x0, sp, #0xa0
    1620:	str	x0, [sp, #120]
    1624:	b	17e8 <elf_open_debugfile_by_debuglink+0x208>
    1628:	mov	x4, x23
    162c:	mov	x3, x22
    1630:	mov	x2, x25
    1634:	mov	x1, x19
    1638:	mov	x0, x24
    163c:	bl	0 <__asan_backtrace_free>
    1640:	mov	w1, #0x2f                  	// #47
    1644:	mov	x0, x21
    1648:	bl	0 <strrchr>
    164c:	cbz	x0, 1814 <elf_open_debugfile_by_debuglink+0x234>
    1650:	add	x0, x0, #0x1
    1654:	sub	x19, x0, x21
    1658:	mov	x7, x23
    165c:	mov	x6, x22
    1660:	ldr	x5, [sp, #96]
    1664:	mov	x4, #0x0                   	// #0
    1668:	adrp	x3, 0 <elf_nodebug>
    166c:	add	x3, x3, #0x0
    1670:	mov	x2, x19
    1674:	mov	x1, x21
    1678:	mov	x0, x24
    167c:	bl	14e8 <elf_try_debugfile>
    1680:	mov	w20, w0
    1684:	tbnz	w0, #31, 1824 <elf_open_debugfile_by_debuglink+0x244>
    1688:	cmp	x28, #0x0
    168c:	ccmp	x27, #0x0, #0x4, ne  // ne = any
    1690:	b.ne	18a8 <elf_open_debugfile_by_debuglink+0x2c8>  // b.any
    1694:	ldr	w0, [sp, #108]
    1698:	cbnz	w0, 18cc <elf_open_debugfile_by_debuglink+0x2ec>
    169c:	mov	w0, w20
    16a0:	ldp	x19, x20, [sp, #16]
    16a4:	ldp	x21, x22, [sp, #32]
    16a8:	ldp	x23, x24, [sp, #48]
    16ac:	ldp	x25, x26, [sp, #64]
    16b0:	ldp	x27, x28, [sp, #80]
    16b4:	ldp	x29, x30, [sp], #288
    16b8:	ret
    16bc:	mov	x4, x23
    16c0:	mov	x3, x22
    16c4:	mov	x2, x25
    16c8:	mov	x1, x19
    16cc:	mov	x0, x24
    16d0:	bl	0 <__asan_backtrace_free>
    16d4:	lsl	x25, x25, #1
    16d8:	mov	x3, x23
    16dc:	mov	x2, x22
    16e0:	mov	x1, x25
    16e4:	mov	x0, x24
    16e8:	bl	0 <__asan_backtrace_alloc>
    16ec:	mov	x19, x0
    16f0:	cbz	x0, 1640 <elf_open_debugfile_by_debuglink+0x60>
    16f4:	mov	x2, x25
    16f8:	mov	x1, x0
    16fc:	mov	x0, x21
    1700:	bl	0 <readlink>
    1704:	tbnz	x0, #63, 1628 <elf_open_debugfile_by_debuglink+0x48>
    1708:	sub	x2, x25, #0x1
    170c:	cmp	x2, x0
    1710:	b.ls	16bc <elf_open_debugfile_by_debuglink+0xdc>  // b.plast
    1714:	strb	wzr, [x19, x0]
    1718:	ldrb	w0, [x19]
    171c:	cmp	w0, #0x2f
    1720:	b.eq	17c0 <elf_open_debugfile_by_debuglink+0x1e0>  // b.none
    1724:	mov	w1, #0x2f                  	// #47
    1728:	mov	x0, x21
    172c:	bl	0 <strrchr>
    1730:	cbz	x0, 17c0 <elf_open_debugfile_by_debuglink+0x1e0>
    1734:	add	x0, x0, #0x1
    1738:	sub	x20, x0, x21
    173c:	mov	x0, x19
    1740:	bl	0 <__asan_internal_strlen>
    1744:	add	x1, x20, #0x1
    1748:	add	x0, x1, x0
    174c:	mov	x3, x23
    1750:	mov	x2, x22
    1754:	str	x0, [sp, #112]
    1758:	mov	x1, x0
    175c:	mov	x0, x24
    1760:	bl	0 <__asan_backtrace_alloc>
    1764:	mov	x26, x0
    1768:	cbz	x0, 199c <elf_open_debugfile_by_debuglink+0x3bc>
    176c:	mov	x2, x20
    1770:	mov	x1, x21
    1774:	bl	0 <__asan_internal_memcpy>
    1778:	add	x20, x26, x20
    177c:	mov	x0, x19
    1780:	bl	0 <__asan_internal_strlen>
    1784:	mov	x2, x0
    1788:	mov	x1, x19
    178c:	mov	x0, x20
    1790:	bl	0 <__asan_internal_memcpy>
    1794:	mov	x0, x19
    1798:	bl	0 <__asan_internal_strlen>
    179c:	strb	wzr, [x20, x0]
    17a0:	mov	x4, x23
    17a4:	mov	x3, x22
    17a8:	mov	x2, x25
    17ac:	mov	x1, x19
    17b0:	mov	x0, x24
    17b4:	bl	0 <__asan_backtrace_free>
    17b8:	ldr	x25, [sp, #112]
    17bc:	mov	x19, x26
    17c0:	cbz	x27, 17dc <elf_open_debugfile_by_debuglink+0x1fc>
    17c4:	mov	x4, x23
    17c8:	mov	x3, x22
    17cc:	mov	x2, x28
    17d0:	mov	x1, x27
    17d4:	mov	x0, x24
    17d8:	bl	0 <__asan_backtrace_free>
    17dc:	mov	x28, x25
    17e0:	mov	x27, x19
    17e4:	mov	x21, x19
    17e8:	ldr	x2, [sp, #120]
    17ec:	mov	x1, x21
    17f0:	mov	w0, #0x0                   	// #0
    17f4:	bl	0 <__lxstat>
    17f8:	tbnz	w0, #31, 1640 <elf_open_debugfile_by_debuglink+0x60>
    17fc:	ldr	w0, [sp, #176]
    1800:	and	w0, w0, #0xf000
    1804:	cmp	w0, #0xa, lsl #12
    1808:	b.ne	1640 <elf_open_debugfile_by_debuglink+0x60>  // b.any
    180c:	mov	x25, #0x80                  	// #128
    1810:	b	16d8 <elf_open_debugfile_by_debuglink+0xf8>
    1814:	mov	x19, #0x0                   	// #0
    1818:	adrp	x21, 0 <elf_nodebug>
    181c:	add	x21, x21, #0x0
    1820:	b	1658 <elf_open_debugfile_by_debuglink+0x78>
    1824:	adrp	x20, 0 <elf_nodebug>
    1828:	add	x20, x20, #0x0
    182c:	mov	x0, x20
    1830:	bl	0 <__asan_internal_strlen>
    1834:	mov	x7, x23
    1838:	mov	x6, x22
    183c:	ldr	x5, [sp, #96]
    1840:	mov	x4, x0
    1844:	mov	x3, x20
    1848:	mov	x2, x19
    184c:	mov	x1, x21
    1850:	mov	x0, x24
    1854:	bl	14e8 <elf_try_debugfile>
    1858:	mov	w20, w0
    185c:	tbz	w0, #31, 1688 <elf_open_debugfile_by_debuglink+0xa8>
    1860:	adrp	x20, 0 <elf_nodebug>
    1864:	add	x20, x20, #0x0
    1868:	mov	x0, x20
    186c:	bl	0 <__asan_internal_strlen>
    1870:	mov	x7, x23
    1874:	mov	x6, x22
    1878:	ldr	x5, [sp, #96]
    187c:	mov	x4, x19
    1880:	mov	x3, x21
    1884:	mov	x2, x0
    1888:	mov	x1, x20
    188c:	mov	x0, x24
    1890:	bl	14e8 <elf_try_debugfile>
    1894:	cmp	w0, #0x0
    1898:	csinv	w20, w0, wzr, ge  // ge = tcont
    189c:	cmp	x27, #0x0
    18a0:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    18a4:	b.eq	18c0 <elf_open_debugfile_by_debuglink+0x2e0>  // b.none
    18a8:	mov	x4, x23
    18ac:	mov	x3, x22
    18b0:	mov	x2, x28
    18b4:	mov	x1, x27
    18b8:	mov	x0, x24
    18bc:	bl	0 <__asan_backtrace_free>
    18c0:	tbz	w20, #31, 1694 <elf_open_debugfile_by_debuglink+0xb4>
    18c4:	mov	w20, #0xffffffff            	// #-1
    18c8:	b	169c <elf_open_debugfile_by_debuglink+0xbc>
    18cc:	add	x2, sp, #0xa0
    18d0:	mov	w1, w20
    18d4:	mov	w0, #0x0                   	// #0
    18d8:	bl	0 <__fxstat>
    18dc:	tbnz	w0, #31, 196c <elf_open_debugfile_by_debuglink+0x38c>
    18e0:	add	x6, sp, #0x88
    18e4:	mov	x5, x23
    18e8:	mov	x4, x22
    18ec:	ldr	x3, [sp, #208]
    18f0:	mov	x2, #0x0                   	// #0
    18f4:	mov	w1, w20
    18f8:	mov	x0, x24
    18fc:	bl	0 <__asan_backtrace_get_view>
    1900:	cbz	w0, 1984 <elf_open_debugfile_by_debuglink+0x3a4>
    1904:	ldr	x1, [sp, #136]
    1908:	ldr	x3, [sp, #208]
    190c:	add	x3, x1, x3
    1910:	cmp	x1, x3
    1914:	b.cs	19b4 <elf_open_debugfile_by_debuglink+0x3d4>  // b.hs, b.nlast
    1918:	mov	w19, #0xffffffff            	// #-1
    191c:	adrp	x2, 0 <elf_nodebug>
    1920:	add	x2, x2, #0x0
    1924:	add	x2, x2, #0x4e0
    1928:	ldrb	w0, [x1], #1
    192c:	eor	w0, w0, w19
    1930:	and	x0, x0, #0xff
    1934:	ldr	w0, [x2, x0, lsl #2]
    1938:	eor	w19, w0, w19, lsr #8
    193c:	cmp	x3, x1
    1940:	b.ne	1928 <elf_open_debugfile_by_debuglink+0x348>  // b.any
    1944:	mov	x3, x23
    1948:	mov	x2, x22
    194c:	add	x1, sp, #0x88
    1950:	mov	x0, x24
    1954:	bl	0 <__asan_backtrace_release_view>
    1958:	mvn	w19, w19
    195c:	ldr	w0, [sp, #108]
    1960:	cmp	w0, w19
    1964:	b.eq	169c <elf_open_debugfile_by_debuglink+0xbc>  // b.none
    1968:	b	1984 <elf_open_debugfile_by_debuglink+0x3a4>
    196c:	bl	0 <__errno_location>
    1970:	ldr	w2, [x0]
    1974:	adrp	x1, 0 <elf_nodebug>
    1978:	add	x1, x1, #0x0
    197c:	mov	x0, x23
    1980:	blr	x22
    1984:	mov	x2, x23
    1988:	mov	x1, x22
    198c:	mov	w0, w20
    1990:	bl	0 <__asan_backtrace_close>
    1994:	mov	w20, #0xffffffff            	// #-1
    1998:	b	169c <elf_open_debugfile_by_debuglink+0xbc>
    199c:	cmp	x28, #0x0
    19a0:	ccmp	x27, #0x0, #0x4, ne  // ne = any
    19a4:	mov	w20, #0xffffffff            	// #-1
    19a8:	b.eq	169c <elf_open_debugfile_by_debuglink+0xbc>  // b.none
    19ac:	mov	w20, #0xffffffff            	// #-1
    19b0:	b	18a8 <elf_open_debugfile_by_debuglink+0x2c8>
    19b4:	mov	x3, x23
    19b8:	mov	x2, x22
    19bc:	add	x1, sp, #0x88
    19c0:	mov	x0, x24
    19c4:	bl	0 <__asan_backtrace_release_view>
    19c8:	b	1984 <elf_open_debugfile_by_debuglink+0x3a4>

00000000000019cc <elf_add>:
    19cc:	sub	sp, sp, #0x420
    19d0:	stp	x29, x30, [sp, #80]
    19d4:	add	x29, sp, #0x50
    19d8:	stp	x19, x20, [sp, #96]
    19dc:	stp	x21, x22, [sp, #112]
    19e0:	stp	x23, x24, [sp, #128]
    19e4:	stp	x25, x26, [sp, #144]
    19e8:	stp	x27, x28, [sp, #160]
    19ec:	mov	x21, x0
    19f0:	str	x1, [sp, #208]
    19f4:	mov	w23, w2
    19f8:	str	x3, [sp, #184]
    19fc:	mov	x19, x4
    1a00:	mov	x20, x5
    1a04:	str	x6, [sp, #192]
    1a08:	str	x7, [sp, #200]
    1a0c:	ldr	w0, [sp, #1080]
    1a10:	cbnz	w0, 1a20 <elf_add+0x54>
    1a14:	str	wzr, [x7]
    1a18:	ldr	x0, [sp, #1056]
    1a1c:	str	wzr, [x0]
    1a20:	add	x6, sp, #0x408
    1a24:	mov	x5, x20
    1a28:	mov	x4, x19
    1a2c:	mov	x3, #0x40                  	// #64
    1a30:	mov	x2, #0x0                   	// #0
    1a34:	mov	w1, w23
    1a38:	mov	x0, x21
    1a3c:	bl	0 <__asan_backtrace_get_view>
    1a40:	mov	w22, w0
    1a44:	mov	w26, w0
    1a48:	cbnz	w0, 1ac4 <elf_add+0xf8>
    1a4c:	mov	x24, #0x0                   	// #0
    1a50:	mov	w27, #0x0                   	// #0
    1a54:	mov	w25, #0x0                   	// #0
    1a58:	str	wzr, [sp, #176]
    1a5c:	mov	w28, #0x0                   	// #0
    1a60:	cbnz	w28, 2b30 <elf_add+0x1164>
    1a64:	cbnz	w22, 2b48 <elf_add+0x117c>
    1a68:	cbnz	w25, 2b60 <elf_add+0x1194>
    1a6c:	cbnz	w27, 2b78 <elf_add+0x11ac>
    1a70:	ldr	w0, [sp, #176]
    1a74:	cbnz	w0, 2b90 <elf_add+0x11c4>
    1a78:	cbnz	w26, 2ba8 <elf_add+0x11dc>
    1a7c:	cbz	x24, 1a94 <elf_add+0xc8>
    1a80:	mov	x3, x20
    1a84:	mov	x2, x19
    1a88:	add	x1, x24, #0x18
    1a8c:	mov	x0, x21
    1a90:	bl	0 <__asan_backtrace_release_view>
    1a94:	mov	w25, #0x0                   	// #0
    1a98:	cmn	w23, #0x1
    1a9c:	b.ne	2bc0 <elf_add+0x11f4>  // b.any
    1aa0:	mov	w0, w25
    1aa4:	ldp	x19, x20, [sp, #96]
    1aa8:	ldp	x21, x22, [sp, #112]
    1aac:	ldp	x23, x24, [sp, #128]
    1ab0:	ldp	x25, x26, [sp, #144]
    1ab4:	ldp	x27, x28, [sp, #160]
    1ab8:	ldp	x29, x30, [sp, #80]
    1abc:	add	sp, sp, #0x420
    1ac0:	ret
    1ac4:	mov	x2, #0x40                  	// #64
    1ac8:	ldr	x1, [sp, #1032]
    1acc:	add	x0, sp, #0x3c8
    1ad0:	bl	0 <__asan_internal_memcpy>
    1ad4:	mov	x3, x20
    1ad8:	mov	x2, x19
    1adc:	add	x1, sp, #0x408
    1ae0:	mov	x0, x21
    1ae4:	bl	0 <__asan_backtrace_release_view>
    1ae8:	mov	w0, #0x457f                	// #17791
    1aec:	movk	w0, #0x464c, lsl #16
    1af0:	ldr	w1, [sp, #968]
    1af4:	cmp	w1, w0
    1af8:	b.eq	1b1c <elf_add+0x150>  // b.none
    1afc:	mov	w2, #0x0                   	// #0
    1b00:	adrp	x1, 0 <elf_nodebug>
    1b04:	add	x1, x1, #0x0
    1b08:	mov	x0, x20
    1b0c:	blr	x19
    1b10:	mov	w26, #0x0                   	// #0
    1b14:	mov	w22, #0x0                   	// #0
    1b18:	b	1a4c <elf_add+0x80>
    1b1c:	ldrb	w0, [sp, #974]
    1b20:	cmp	w0, #0x1
    1b24:	b.eq	1b48 <elf_add+0x17c>  // b.none
    1b28:	mov	w2, #0x0                   	// #0
    1b2c:	adrp	x1, 0 <elf_nodebug>
    1b30:	add	x1, x1, #0x0
    1b34:	mov	x0, x20
    1b38:	blr	x19
    1b3c:	mov	w26, #0x0                   	// #0
    1b40:	mov	w22, #0x0                   	// #0
    1b44:	b	1a4c <elf_add+0x80>
    1b48:	ldrb	w0, [sp, #972]
    1b4c:	cmp	w0, #0x2
    1b50:	b.eq	1b74 <elf_add+0x1a8>  // b.none
    1b54:	mov	w2, #0x0                   	// #0
    1b58:	adrp	x1, 0 <elf_nodebug>
    1b5c:	add	x1, x1, #0x0
    1b60:	mov	x0, x20
    1b64:	blr	x19
    1b68:	mov	w26, #0x0                   	// #0
    1b6c:	mov	w22, #0x0                   	// #0
    1b70:	b	1a4c <elf_add+0x80>
    1b74:	ldrb	w0, [sp, #973]
    1b78:	sub	w0, w0, #0x1
    1b7c:	and	w0, w0, #0xff
    1b80:	cmp	w0, #0x1
    1b84:	b.hi	1c80 <elf_add+0x2b4>  // b.pmore
    1b88:	ldr	w0, [sp, #1072]
    1b8c:	cbz	w0, 1b9c <elf_add+0x1d0>
    1b90:	ldrh	w0, [sp, #984]
    1b94:	cmp	w0, #0x3
    1b98:	b.eq	2bd4 <elf_add+0x1208>  // b.none
    1b9c:	ldr	x25, [sp, #1008]
    1ba0:	ldrh	w0, [sp, #1028]
    1ba4:	str	w0, [sp, #216]
    1ba8:	ldrh	w24, [sp, #1030]
    1bac:	cmp	w0, #0x0
    1bb0:	mov	w0, #0xffff                	// #65535
    1bb4:	ccmp	w24, w0, #0x4, ne  // ne = any
    1bb8:	ccmp	x25, #0x0, #0x4, eq  // eq = none
    1bbc:	b.ne	1ca0 <elf_add+0x2d4>  // b.any
    1bc0:	ldr	w27, [sp, #216]
    1bc4:	sub	w3, w27, #0x1
    1bc8:	add	x6, sp, #0x3b0
    1bcc:	mov	x5, x20
    1bd0:	mov	x4, x19
    1bd4:	lsl	x3, x3, #6
    1bd8:	add	x2, x25, #0x40
    1bdc:	mov	w1, w23
    1be0:	mov	x0, x21
    1be4:	bl	0 <__asan_backtrace_get_view>
    1be8:	mov	w22, w0
    1bec:	mov	w26, w0
    1bf0:	cbz	w0, 1a4c <elf_add+0x80>
    1bf4:	ldr	x22, [sp, #944]
    1bf8:	str	x22, [sp, #304]
    1bfc:	sub	w0, w24, #0x1
    1c00:	add	x0, x22, x0, lsl #6
    1c04:	ldr	x1, [x0, #32]
    1c08:	str	x1, [sp, #232]
    1c0c:	add	x6, sp, #0x398
    1c10:	mov	x5, x20
    1c14:	mov	x4, x19
    1c18:	mov	x3, x1
    1c1c:	ldr	x2, [x0, #24]
    1c20:	mov	w1, w23
    1c24:	mov	x0, x21
    1c28:	bl	0 <__asan_backtrace_get_view>
    1c2c:	mov	w26, w0
    1c30:	cbnz	w0, 1d24 <elf_add+0x358>
    1c34:	mov	w27, w0
    1c38:	mov	w25, w0
    1c3c:	str	w0, [sp, #176]
    1c40:	mov	w22, w0
    1c44:	mov	w28, w0
    1c48:	mov	x24, #0x0                   	// #0
    1c4c:	mov	x3, x20
    1c50:	mov	x2, x19
    1c54:	add	x1, sp, #0x3b0
    1c58:	mov	x0, x21
    1c5c:	bl	0 <__asan_backtrace_release_view>
    1c60:	cbz	w26, 1a60 <elf_add+0x94>
    1c64:	mov	x3, x20
    1c68:	mov	x2, x19
    1c6c:	add	x1, sp, #0x398
    1c70:	mov	x0, x21
    1c74:	bl	0 <__asan_backtrace_release_view>
    1c78:	mov	w26, #0x0                   	// #0
    1c7c:	b	1a60 <elf_add+0x94>
    1c80:	mov	w2, #0x0                   	// #0
    1c84:	adrp	x1, 0 <elf_nodebug>
    1c88:	add	x1, x1, #0x0
    1c8c:	mov	x0, x20
    1c90:	blr	x19
    1c94:	mov	w26, #0x0                   	// #0
    1c98:	mov	w22, #0x0                   	// #0
    1c9c:	b	1a4c <elf_add+0x80>
    1ca0:	add	x6, sp, #0x178
    1ca4:	mov	x5, x20
    1ca8:	mov	x4, x19
    1cac:	mov	x3, #0x8                   	// #8
    1cb0:	mov	x2, x25
    1cb4:	mov	w1, w23
    1cb8:	mov	x0, x21
    1cbc:	bl	0 <__asan_backtrace_get_view>
    1cc0:	mov	w22, w0
    1cc4:	mov	w26, w0
    1cc8:	cbz	w0, 1a4c <elf_add+0x80>
    1ccc:	ldr	x0, [sp, #376]
    1cd0:	ldr	w1, [sp, #216]
    1cd4:	cbnz	w1, 1d04 <elf_add+0x338>
    1cd8:	ldr	w1, [x0, #32]
    1cdc:	str	w1, [sp, #216]
    1ce0:	mov	w1, #0xffff                	// #65535
    1ce4:	cmp	w24, w1
    1ce8:	b.eq	1d04 <elf_add+0x338>  // b.none
    1cec:	mov	x3, x20
    1cf0:	mov	x2, x19
    1cf4:	add	x1, sp, #0x178
    1cf8:	mov	x0, x21
    1cfc:	bl	0 <__asan_backtrace_release_view>
    1d00:	b	1bc0 <elf_add+0x1f4>
    1d04:	ldr	w24, [x0, #40]
    1d08:	ldr	w0, [sp, #216]
    1d0c:	cmp	w24, w0
    1d10:	sub	w0, w24, #0x100
    1d14:	mov	w1, #0xffff                	// #65535
    1d18:	ccmp	w24, w1, #0x0, cs  // cs = hs, nlast
    1d1c:	csel	w24, w0, w24, hi  // hi = pmore
    1d20:	b	1cec <elf_add+0x320>
    1d24:	ldr	x0, [sp, #920]
    1d28:	str	x0, [sp, #240]
    1d2c:	mov	x2, #0x140                 	// #320
    1d30:	mov	w1, #0x0                   	// #0
    1d34:	add	x0, sp, #0x258
    1d38:	bl	0 <__asan_internal_memset>
    1d3c:	cmp	w27, #0x1
    1d40:	b.ls	2420 <elf_add+0xa54>  // b.plast
    1d44:	mov	x26, x22
    1d48:	mov	x24, #0x0                   	// #0
    1d4c:	str	wzr, [sp, #344]
    1d50:	str	xzr, [sp, #328]
    1d54:	str	xzr, [sp, #288]
    1d58:	mov	w27, #0x0                   	// #0
    1d5c:	str	wzr, [sp, #324]
    1d60:	str	xzr, [sp, #312]
    1d64:	mov	w25, #0x0                   	// #0
    1d68:	str	wzr, [sp, #348]
    1d6c:	str	xzr, [sp, #336]
    1d70:	str	wzr, [sp, #176]
    1d74:	mov	w22, #0x1                   	// #1
    1d78:	str	wzr, [sp, #248]
    1d7c:	adrp	x0, 0 <elf_nodebug>
    1d80:	add	x1, x0, #0x0
    1d84:	add	x0, sp, #0x258
    1d88:	str	x0, [sp, #256]
    1d8c:	add	x0, sp, #0x198
    1d90:	str	x0, [sp, #352]
    1d94:	add	x0, sp, #0x1b0
    1d98:	str	x0, [sp, #360]
    1d9c:	str	w27, [sp, #224]
    1da0:	str	x24, [sp, #296]
    1da4:	str	x21, [sp, #264]
    1da8:	str	w23, [sp, #320]
    1dac:	str	x19, [sp, #272]
    1db0:	str	x20, [sp, #280]
    1db4:	ldr	w28, [sp, #1080]
    1db8:	mov	x23, x1
    1dbc:	b	1e78 <elf_add+0x4ac>
    1dc0:	str	w22, [sp, #248]
    1dc4:	b	1e90 <elf_add+0x4c4>
    1dc8:	ldr	w27, [sp, #224]
    1dcc:	ldr	x24, [sp, #296]
    1dd0:	ldr	x21, [sp, #264]
    1dd4:	ldr	w23, [sp, #320]
    1dd8:	ldr	x19, [sp, #272]
    1ddc:	ldr	x20, [sp, #280]
    1de0:	mov	w2, #0x0                   	// #0
    1de4:	adrp	x1, 0 <elf_nodebug>
    1de8:	add	x1, x1, #0x0
    1dec:	mov	x0, x20
    1df0:	blr	x19
    1df4:	mov	w22, #0x0                   	// #0
    1df8:	mov	w28, #0x0                   	// #0
    1dfc:	mov	w26, #0x1                   	// #1
    1e00:	b	1c4c <elf_add+0x280>
    1e04:	sbfiz	x21, x19, #5, #32
    1e08:	ldr	x0, [x24, #24]
    1e0c:	ldr	x1, [sp, #256]
    1e10:	str	x0, [x1, x21]
    1e14:	ldr	x1, [x24, #32]
    1e18:	add	x0, sp, #0x260
    1e1c:	str	x1, [x0, x21]
    1e20:	ldr	x0, [x24, #8]
    1e24:	ubfx	w0, w0, #11, #1
    1e28:	add	x1, sp, #0x270
    1e2c:	str	w0, [x1, x21]
    1e30:	cmp	w28, #0x0
    1e34:	ldr	x0, [sp, #1088]
    1e38:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    1e3c:	ldr	w0, [sp, #176]
    1e40:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    1e44:	b.eq	1ecc <elf_add+0x500>  // b.none
    1e48:	orr	w19, w28, w25
    1e4c:	cbz	w19, 1fc0 <elf_add+0x5f4>
    1e50:	ldr	w0, [sp, #224]
    1e54:	cbz	w0, 2038 <elf_add+0x66c>
    1e58:	ldrh	w0, [sp, #986]
    1e5c:	cmp	w0, #0x15
    1e60:	b.eq	20b0 <elf_add+0x6e4>  // b.none
    1e64:	add	w22, w22, #0x1
    1e68:	add	x26, x26, #0x40
    1e6c:	ldr	w0, [sp, #216]
    1e70:	cmp	w0, w22
    1e74:	b.eq	2120 <elf_add+0x754>  // b.none
    1e78:	mov	x24, x26
    1e7c:	ldr	w0, [x26, #4]
    1e80:	cmp	w0, #0x2
    1e84:	b.eq	1dc0 <elf_add+0x3f4>  // b.none
    1e88:	cmp	w0, #0xb
    1e8c:	csel	w27, w27, w22, ne  // ne = any
    1e90:	ldr	w20, [x24]
    1e94:	ldr	x0, [sp, #232]
    1e98:	cmp	x20, x0
    1e9c:	b.cs	1dc8 <elf_add+0x3fc>  // b.hs, b.nlast
    1ea0:	ldr	x0, [sp, #240]
    1ea4:	add	x20, x0, x20
    1ea8:	mov	x19, #0x0                   	// #0
    1eac:	ldr	x1, [x23, x19, lsl #3]
    1eb0:	mov	x0, x20
    1eb4:	bl	0 <__asan_internal_strcmp>
    1eb8:	cbz	w0, 1e04 <elf_add+0x438>
    1ebc:	add	x19, x19, #0x1
    1ec0:	cmp	x19, #0xa
    1ec4:	b.ne	1eac <elf_add+0x4e0>  // b.any
    1ec8:	b	1e30 <elf_add+0x464>
    1ecc:	adrp	x1, 0 <elf_nodebug>
    1ed0:	add	x1, x1, #0x0
    1ed4:	mov	x0, x20
    1ed8:	bl	0 <__asan_internal_strcmp>
    1edc:	mov	w19, w0
    1ee0:	str	wzr, [sp, #176]
    1ee4:	cbnz	w0, 1e48 <elf_add+0x47c>
    1ee8:	add	x6, sp, #0x210
    1eec:	ldr	x5, [sp, #280]
    1ef0:	ldr	x4, [sp, #272]
    1ef4:	ldr	x3, [x24, #32]
    1ef8:	ldr	x2, [x24, #24]
    1efc:	ldr	w1, [sp, #320]
    1f00:	ldr	x0, [sp, #264]
    1f04:	bl	0 <__asan_backtrace_get_view>
    1f08:	cbz	w0, 2bdc <elf_add+0x1210>
    1f0c:	ldr	x21, [sp, #528]
    1f10:	ldr	w0, [x21, #8]
    1f14:	cmp	w0, #0x3
    1f18:	b.eq	1f54 <elf_add+0x588>  // b.none
    1f1c:	ldr	w0, [sp, #1096]
    1f20:	cbz	w0, 1fb4 <elf_add+0x5e8>
    1f24:	ldr	w0, [sp, #348]
    1f28:	ldr	w1, [sp, #1096]
    1f2c:	cmp	w0, w1
    1f30:	b.ne	2c08 <elf_add+0x123c>  // b.any
    1f34:	mov	w2, w0
    1f38:	ldr	x1, [sp, #1088]
    1f3c:	ldr	x0, [sp, #336]
    1f40:	bl	0 <__asan_internal_memcmp>
    1f44:	cbnz	w0, 2c38 <elf_add+0x126c>
    1f48:	mov	w0, #0x1                   	// #1
    1f4c:	str	w0, [sp, #176]
    1f50:	b	1e48 <elf_add+0x47c>
    1f54:	ldr	w0, [x21]
    1f58:	cmp	w0, #0x4
    1f5c:	b.ne	1f1c <elf_add+0x550>  // b.any
    1f60:	add	x0, x21, #0xc
    1f64:	mov	x2, #0x4                   	// #4
    1f68:	adrp	x1, 0 <elf_nodebug>
    1f6c:	add	x1, x1, #0x0
    1f70:	str	x0, [sp, #176]
    1f74:	bl	0 <__asan_internal_strncmp>
    1f78:	cbnz	w0, 1f1c <elf_add+0x550>
    1f7c:	ldr	w0, [x21]
    1f80:	add	w0, w0, #0x3
    1f84:	and	w0, w0, #0xfffffffc
    1f88:	ldr	w2, [x21, #4]
    1f8c:	add	w1, w2, #0xc
    1f90:	add	w1, w1, w0
    1f94:	ldr	x3, [x24, #32]
    1f98:	cmp	x3, x1
    1f9c:	b.hi	1f1c <elf_add+0x550>  // b.pmore
    1fa0:	ldr	x1, [sp, #176]
    1fa4:	add	x0, x1, w0, uxtw
    1fa8:	str	x0, [sp, #336]
    1fac:	str	w2, [sp, #348]
    1fb0:	b	1f1c <elf_add+0x550>
    1fb4:	mov	w0, #0x1                   	// #1
    1fb8:	str	w0, [sp, #176]
    1fbc:	b	1e48 <elf_add+0x47c>
    1fc0:	adrp	x1, 0 <elf_nodebug>
    1fc4:	add	x1, x1, #0x0
    1fc8:	mov	x0, x20
    1fcc:	bl	0 <__asan_internal_strcmp>
    1fd0:	mov	w25, w19
    1fd4:	cbnz	w0, 1e50 <elf_add+0x484>
    1fd8:	add	x6, sp, #0x1f8
    1fdc:	ldr	x5, [sp, #280]
    1fe0:	ldr	x4, [sp, #272]
    1fe4:	ldr	x3, [x24, #32]
    1fe8:	ldr	x2, [x24, #24]
    1fec:	ldr	w1, [sp, #320]
    1ff0:	ldr	x0, [sp, #264]
    1ff4:	bl	0 <__asan_backtrace_get_view>
    1ff8:	cbz	w0, 2c68 <elf_add+0x129c>
    1ffc:	ldr	x19, [sp, #504]
    2000:	ldr	x1, [x24, #32]
    2004:	mov	x0, x19
    2008:	bl	0 <__asan_internal_strnlen>
    200c:	add	x0, x0, #0x3
    2010:	and	x0, x0, #0xfffffffffffffffc
    2014:	add	x2, x0, #0x4
    2018:	ldr	x1, [x24, #32]
    201c:	mov	w25, #0x1                   	// #1
    2020:	cmp	x2, x1
    2024:	b.hi	1e50 <elf_add+0x484>  // b.pmore
    2028:	ldr	w0, [x19, x0]
    202c:	str	w0, [sp, #324]
    2030:	str	x19, [sp, #312]
    2034:	b	1e50 <elf_add+0x484>
    2038:	adrp	x1, 0 <elf_nodebug>
    203c:	add	x1, x1, #0x0
    2040:	mov	x0, x20
    2044:	bl	0 <__asan_internal_strcmp>
    2048:	cbnz	w0, 1e58 <elf_add+0x48c>
    204c:	add	x6, sp, #0x1e0
    2050:	ldr	x5, [sp, #280]
    2054:	ldr	x4, [sp, #272]
    2058:	ldr	x3, [x24, #32]
    205c:	ldr	x2, [x24, #24]
    2060:	ldr	w1, [sp, #320]
    2064:	ldr	x0, [sp, #264]
    2068:	bl	0 <__asan_backtrace_get_view>
    206c:	cbz	w0, 2c94 <elf_add+0x12c8>
    2070:	ldr	x19, [sp, #480]
    2074:	str	x19, [sp, #288]
    2078:	ldr	x1, [x24, #32]
    207c:	mov	x0, x19
    2080:	bl	0 <__asan_internal_strnlen>
    2084:	ldr	x1, [x24, #32]
    2088:	mov	w2, #0x1                   	// #1
    208c:	str	w2, [sp, #224]
    2090:	cmp	x1, x0
    2094:	b.ls	1e58 <elf_add+0x48c>  // b.plast
    2098:	add	x0, x0, #0x1
    209c:	add	x2, x19, x0
    20a0:	str	x2, [sp, #328]
    20a4:	sub	w0, w1, w0
    20a8:	str	w0, [sp, #344]
    20ac:	b	1e58 <elf_add+0x48c>
    20b0:	ldr	w0, [sp, #1016]
    20b4:	tbnz	w0, #1, 1e64 <elf_add+0x498>
    20b8:	ldr	w0, [x24, #4]
    20bc:	cmp	w0, #0x1
    20c0:	b.ne	1e64 <elf_add+0x498>  // b.any
    20c4:	adrp	x1, 0 <elf_nodebug>
    20c8:	add	x1, x1, #0x0
    20cc:	mov	x0, x20
    20d0:	bl	0 <__asan_internal_strcmp>
    20d4:	cbnz	w0, 1e64 <elf_add+0x498>
    20d8:	ldr	x6, [sp, #360]
    20dc:	ldr	x5, [sp, #280]
    20e0:	ldr	x4, [sp, #272]
    20e4:	ldr	x3, [x24, #32]
    20e8:	ldr	x2, [x24, #24]
    20ec:	ldr	w1, [sp, #320]
    20f0:	ldr	x0, [sp, #264]
    20f4:	bl	0 <__asan_backtrace_get_view>
    20f8:	cbz	w0, 2cbc <elf_add+0x12f0>
    20fc:	ldr	x0, [x24, #16]
    2100:	str	x0, [sp, #408]
    2104:	ldr	x0, [sp, #432]
    2108:	str	x0, [sp, #416]
    210c:	ldr	x0, [x24, #32]
    2110:	str	x0, [sp, #424]
    2114:	ldr	x0, [sp, #352]
    2118:	str	x0, [sp, #296]
    211c:	b	1e64 <elf_add+0x498>
    2120:	mov	w1, w27
    2124:	ldr	w27, [sp, #224]
    2128:	ldr	x24, [sp, #296]
    212c:	ldr	x21, [sp, #264]
    2130:	ldr	w23, [sp, #320]
    2134:	ldr	x19, [sp, #272]
    2138:	ldr	x20, [sp, #280]
    213c:	ldr	w0, [sp, #248]
    2140:	cmp	w0, #0x0
    2144:	csel	w0, w0, w1, ne  // ne = any
    2148:	cmp	w0, #0x0
    214c:	ldr	w1, [sp, #1080]
    2150:	ccmp	w1, #0x0, #0x0, ne  // ne = any
    2154:	b.ne	2454 <elf_add+0xa88>  // b.any
    2158:	sub	w26, w0, #0x1
    215c:	ldr	x0, [sp, #304]
    2160:	add	x26, x0, x26, lsl #6
    2164:	ldr	w22, [x26, #40]
    2168:	ldr	w0, [sp, #216]
    216c:	cmp	w0, w22
    2170:	b.hi	2198 <elf_add+0x7cc>  // b.pmore
    2174:	mov	w2, #0x0                   	// #0
    2178:	adrp	x1, 0 <elf_nodebug>
    217c:	add	x1, x1, #0x0
    2180:	mov	x0, x20
    2184:	blr	x19
    2188:	mov	w22, #0x0                   	// #0
    218c:	mov	w28, #0x0                   	// #0
    2190:	mov	w26, #0x1                   	// #1
    2194:	b	1c4c <elf_add+0x280>
    2198:	add	x6, sp, #0x240
    219c:	mov	x5, x20
    21a0:	mov	x4, x19
    21a4:	ldr	x3, [x26, #32]
    21a8:	ldr	x2, [x26, #24]
    21ac:	mov	w1, w23
    21b0:	mov	x0, x21
    21b4:	bl	0 <__asan_backtrace_get_view>
    21b8:	mov	w28, w0
    21bc:	cbnz	w0, 21cc <elf_add+0x800>
    21c0:	mov	w22, w0
    21c4:	mov	w26, #0x1                   	// #1
    21c8:	b	1c4c <elf_add+0x280>
    21cc:	sub	w22, w22, #0x1
    21d0:	ldr	x0, [sp, #304]
    21d4:	add	x0, x0, x22, lsl #6
    21d8:	add	x6, sp, #0x228
    21dc:	mov	x5, x20
    21e0:	mov	x4, x19
    21e4:	ldr	x3, [x0, #32]
    21e8:	str	x0, [sp, #216]
    21ec:	ldr	x2, [x0, #24]
    21f0:	mov	w1, w23
    21f4:	mov	x0, x21
    21f8:	bl	0 <__asan_backtrace_get_view>
    21fc:	mov	w22, w0
    2200:	cbnz	w0, 2210 <elf_add+0x844>
    2204:	mov	w28, #0x1                   	// #1
    2208:	mov	w26, w28
    220c:	b	1c4c <elf_add+0x280>
    2210:	mov	x3, x20
    2214:	mov	x2, x19
    2218:	mov	x1, #0x18                  	// #24
    221c:	mov	x0, x21
    2220:	bl	0 <__asan_backtrace_alloc>
    2224:	mov	x28, x0
    2228:	cbz	x0, 2ce4 <elf_add+0x1318>
    222c:	ldr	x22, [sp, #576]
    2230:	ldr	x0, [x26, #32]
    2234:	ldr	x2, [sp, #552]
    2238:	str	x2, [sp, #232]
    223c:	ldr	x1, [sp, #216]
    2240:	ldr	x1, [x1, #32]
    2244:	str	x1, [sp, #240]
    2248:	mov	x1, #0x18                  	// #24
    224c:	udiv	x1, x0, x1
    2250:	str	x1, [sp, #216]
    2254:	cmp	x0, #0x17
    2258:	b.ls	2dcc <elf_add+0x1400>  // b.plast
    225c:	mov	x1, x22
    2260:	mov	x2, #0x0                   	// #0
    2264:	mov	x3, #0x0                   	// #0
    2268:	b	2280 <elf_add+0x8b4>
    226c:	add	x2, x2, #0x1
    2270:	add	x1, x1, #0x18
    2274:	ldr	x0, [sp, #216]
    2278:	cmp	x0, x2
    227c:	b.ls	22a4 <elf_add+0x8d8>  // b.plast
    2280:	ldrb	w0, [x1, #4]
    2284:	and	w0, w0, #0xf
    2288:	sub	w0, w0, #0x1
    228c:	cmp	w0, #0x1
    2290:	b.hi	226c <elf_add+0x8a0>  // b.pmore
    2294:	ldrh	w0, [x1, #6]
    2298:	cbz	w0, 226c <elf_add+0x8a0>
    229c:	add	x3, x3, #0x1
    22a0:	b	226c <elf_add+0x8a0>
    22a4:	str	x3, [sp, #224]
    22a8:	mov	x0, #0x18                  	// #24
    22ac:	mul	x0, x3, x0
    22b0:	str	x0, [sp, #248]
    22b4:	mov	x3, x20
    22b8:	mov	x2, x19
    22bc:	mov	x1, x0
    22c0:	mov	x0, x21
    22c4:	bl	0 <__asan_backtrace_alloc>
    22c8:	mov	x26, x0
    22cc:	cbz	x0, 230c <elf_add+0x940>
    22d0:	mov	x1, #0x0                   	// #0
    22d4:	mov	w2, #0x0                   	// #0
    22d8:	ldr	x6, [sp, #216]
    22dc:	b	2360 <elf_add+0x994>
    22e0:	mov	w2, #0x0                   	// #0
    22e4:	adrp	x1, 0 <elf_nodebug>
    22e8:	add	x1, x1, #0x0
    22ec:	mov	x0, x20
    22f0:	blr	x19
    22f4:	mov	x4, x20
    22f8:	mov	x3, x19
    22fc:	ldr	x2, [sp, #248]
    2300:	mov	x1, x26
    2304:	mov	x0, x21
    2308:	bl	0 <__asan_backtrace_free>
    230c:	mov	x4, x20
    2310:	mov	x3, x19
    2314:	mov	x2, #0x18                  	// #24
    2318:	mov	x1, x28
    231c:	mov	x0, x21
    2320:	bl	0 <__asan_backtrace_free>
    2324:	mov	w22, #0x1                   	// #1
    2328:	mov	w28, w22
    232c:	mov	w26, w22
    2330:	b	1c4c <elf_add+0x280>
    2334:	ldr	x0, [x22, #8]
    2338:	ldr	x3, [sp, #184]
    233c:	add	x0, x3, x0
    2340:	str	x0, [x5, #8]
    2344:	ldr	x0, [x22, #16]
    2348:	str	x0, [x5, #16]
    234c:	add	w2, w2, #0x1
    2350:	add	x1, x1, #0x1
    2354:	add	x22, x22, #0x18
    2358:	cmp	x6, x1
    235c:	b.ls	2dec <elf_add+0x1420>  // b.plast
    2360:	ldrb	w0, [x22, #4]
    2364:	and	w0, w0, #0xf
    2368:	sub	w0, w0, #0x1
    236c:	cmp	w0, #0x1
    2370:	b.hi	2350 <elf_add+0x984>  // b.pmore
    2374:	ldrh	w0, [x22, #6]
    2378:	cbz	w0, 2350 <elf_add+0x984>
    237c:	ldr	w3, [x22]
    2380:	ldr	x0, [sp, #240]
    2384:	cmp	x0, x3
    2388:	b.ls	22e0 <elf_add+0x914>  // b.plast
    238c:	ubfiz	x0, x2, #1, #32
    2390:	add	x0, x0, w2, uxtw
    2394:	add	x5, x26, x0, lsl #3
    2398:	ldr	x4, [sp, #232]
    239c:	add	x3, x4, x3
    23a0:	str	x3, [x26, x0, lsl #3]
    23a4:	cbz	x24, 2334 <elf_add+0x968>
    23a8:	ldr	x0, [x22, #8]
    23ac:	ldr	x3, [x24]
    23b0:	cmp	x0, x3
    23b4:	b.cc	2334 <elf_add+0x968>  // b.lo, b.ul, b.last
    23b8:	ldr	x4, [x24, #16]
    23bc:	add	x4, x3, x4
    23c0:	cmp	x0, x4
    23c4:	b.cs	2334 <elf_add+0x968>  // b.hs, b.nlast
    23c8:	sub	x0, x0, x3
    23cc:	ldr	x3, [x24, #8]
    23d0:	ldr	x0, [x3, x0]
    23d4:	b	2338 <elf_add+0x96c>
    23d8:	add	x1, x21, #0x30
    23dc:	ldr	x0, [x21, #48]
    23e0:	b	23ec <elf_add+0xa20>
    23e4:	mov	x1, x0
    23e8:	ldr	x0, [x0]
    23ec:	cbnz	x0, 23e4 <elf_add+0xa18>
    23f0:	str	x28, [x1]
    23f4:	mov	w22, #0x1                   	// #1
    23f8:	b	2458 <elf_add+0xa8c>
    23fc:	ldxr	x1, [x0]
    2400:	cbnz	x1, 240c <elf_add+0xa40>
    2404:	stlxr	w3, x28, [x0]
    2408:	cbnz	w3, 23fc <elf_add+0xa30>
    240c:	cmp	x1, #0x0
    2410:	dmb	ish
    2414:	b.ne	2e40 <elf_add+0x1474>  // b.any
    2418:	mov	w22, #0x1                   	// #1
    241c:	b	2458 <elf_add+0xa8c>
    2420:	mov	x24, #0x0                   	// #0
    2424:	str	wzr, [sp, #344]
    2428:	str	xzr, [sp, #328]
    242c:	str	xzr, [sp, #288]
    2430:	mov	w27, #0x0                   	// #0
    2434:	str	wzr, [sp, #324]
    2438:	str	xzr, [sp, #312]
    243c:	mov	w25, #0x0                   	// #0
    2440:	str	wzr, [sp, #348]
    2444:	str	xzr, [sp, #336]
    2448:	str	wzr, [sp, #176]
    244c:	mov	w22, #0x0                   	// #0
    2450:	b	2458 <elf_add+0xa8c>
    2454:	mov	w22, #0x0                   	// #0
    2458:	mov	x3, x20
    245c:	mov	x2, x19
    2460:	add	x1, sp, #0x3b0
    2464:	mov	x0, x21
    2468:	bl	0 <__asan_backtrace_release_view>
    246c:	mov	x3, x20
    2470:	mov	x2, x19
    2474:	add	x1, sp, #0x398
    2478:	mov	x0, x21
    247c:	bl	0 <__asan_backtrace_release_view>
    2480:	ldr	x0, [sp, #336]
    2484:	cbz	x0, 25a8 <elf_add+0xbdc>
    2488:	ldr	w28, [sp, #348]
    248c:	adrp	x0, 0 <elf_nodebug>
    2490:	add	x0, x0, #0x0
    2494:	bl	0 <__asan_internal_strlen>
    2498:	mov	x26, x0
    249c:	adrp	x0, 0 <elf_nodebug>
    24a0:	add	x0, x0, #0x0
    24a4:	bl	0 <__asan_internal_strlen>
    24a8:	str	x0, [sp, #224]
    24ac:	add	x1, x28, #0x1
    24b0:	add	x0, x26, x0
    24b4:	add	x1, x0, x1, lsl #1
    24b8:	str	x1, [sp, #232]
    24bc:	mov	x3, x20
    24c0:	mov	x2, x19
    24c4:	mov	x0, x21
    24c8:	bl	0 <__asan_backtrace_alloc>
    24cc:	str	x0, [sp, #216]
    24d0:	cbz	x0, 25a8 <elf_add+0xbdc>
    24d4:	mov	x2, x26
    24d8:	adrp	x1, 0 <elf_nodebug>
    24dc:	add	x1, x1, #0x0
    24e0:	bl	0 <__asan_internal_memcpy>
    24e4:	ldr	x0, [sp, #216]
    24e8:	add	x26, x0, x26
    24ec:	cbz	x28, 2554 <elf_add+0xb88>
    24f0:	mov	x1, #0x0                   	// #0
    24f4:	mov	w5, #0x2f                  	// #47
    24f8:	ldr	x6, [sp, #336]
    24fc:	b	2514 <elf_add+0xb48>
    2500:	strb	w5, [x26, #2]
    2504:	add	x26, x26, #0x3
    2508:	add	x1, x1, #0x1
    250c:	cmp	x28, x1
    2510:	b.eq	2554 <elf_add+0xb88>  // b.none
    2514:	ldrb	w0, [x6, x1]
    2518:	lsr	w3, w0, #4
    251c:	add	w4, w3, #0x30
    2520:	add	w2, w3, #0x57
    2524:	cmp	w3, #0x9
    2528:	csel	w2, w2, w4, hi  // hi = pmore
    252c:	strb	w2, [x26]
    2530:	and	w0, w0, #0xf
    2534:	add	w3, w0, #0x30
    2538:	add	w2, w0, #0x57
    253c:	cmp	w0, #0x9
    2540:	csel	w0, w2, w3, hi  // hi = pmore
    2544:	strb	w0, [x26, #1]
    2548:	cbz	x1, 2500 <elf_add+0xb34>
    254c:	add	x26, x26, #0x2
    2550:	b	2508 <elf_add+0xb3c>
    2554:	ldr	x28, [sp, #224]
    2558:	mov	x2, x28
    255c:	adrp	x1, 0 <elf_nodebug>
    2560:	add	x1, x1, #0x0
    2564:	mov	x0, x26
    2568:	bl	0 <__asan_internal_memcpy>
    256c:	strb	wzr, [x26, x28]
    2570:	add	x3, sp, #0x178
    2574:	mov	x2, x20
    2578:	mov	x1, x19
    257c:	ldr	x28, [sp, #216]
    2580:	mov	x0, x28
    2584:	bl	0 <__asan_backtrace_open>
    2588:	mov	w26, w0
    258c:	mov	x4, x20
    2590:	mov	x3, x19
    2594:	ldr	x2, [sp, #232]
    2598:	mov	x1, x28
    259c:	mov	x0, x21
    25a0:	bl	0 <__asan_backtrace_free>
    25a4:	tbz	w26, #31, 2648 <elf_add+0xc7c>
    25a8:	ldr	w0, [sp, #176]
    25ac:	cbnz	w0, 270c <elf_add+0xd40>
    25b0:	cbz	x24, 25c8 <elf_add+0xbfc>
    25b4:	mov	x3, x20
    25b8:	mov	x2, x19
    25bc:	add	x1, x24, #0x18
    25c0:	mov	x0, x21
    25c4:	bl	0 <__asan_backtrace_release_view>
    25c8:	ldr	x0, [sp, #312]
    25cc:	cbz	x0, 25f4 <elf_add+0xc28>
    25d0:	mov	x5, x20
    25d4:	mov	x4, x19
    25d8:	ldr	w3, [sp, #324]
    25dc:	mov	x2, x0
    25e0:	ldr	x1, [sp, #208]
    25e4:	mov	x0, x21
    25e8:	bl	15e0 <elf_open_debugfile_by_debuglink>
    25ec:	mov	w24, w0
    25f0:	tbz	w0, #31, 2724 <elf_add+0xd58>
    25f4:	cbnz	w25, 27cc <elf_add+0xe00>
    25f8:	str	xzr, [sp, #400]
    25fc:	ldr	x0, [sp, #288]
    2600:	cbz	x0, 262c <elf_add+0xc60>
    2604:	mov	x5, x20
    2608:	mov	x4, x19
    260c:	mov	w3, #0x0                   	// #0
    2610:	mov	x2, x0
    2614:	ldr	x25, [sp, #208]
    2618:	mov	x1, x25
    261c:	mov	x0, x21
    2620:	bl	15e0 <elf_open_debugfile_by_debuglink>
    2624:	mov	w24, w0
    2628:	tbz	w0, #31, 27e4 <elf_add+0xe18>
    262c:	cbnz	w27, 2864 <elf_add+0xe98>
    2630:	add	x24, sp, #0x258
    2634:	add	x4, x24, #0x140
    2638:	mov	x0, x24
    263c:	mov	x3, #0x0                   	// #0
    2640:	mov	x25, #0x0                   	// #0
    2644:	b	289c <elf_add+0xed0>
    2648:	mov	x3, x20
    264c:	mov	x2, x19
    2650:	add	x1, sp, #0x210
    2654:	mov	x0, x21
    2658:	bl	0 <__asan_backtrace_release_view>
    265c:	cbnz	w25, 26c8 <elf_add+0xcfc>
    2660:	cbnz	w27, 26e0 <elf_add+0xd14>
    2664:	str	wzr, [sp, #40]
    2668:	str	xzr, [sp, #32]
    266c:	mov	w0, #0x1                   	// #1
    2670:	str	w0, [sp, #24]
    2674:	str	wzr, [sp, #16]
    2678:	str	xzr, [sp, #8]
    267c:	ldr	x0, [sp, #1056]
    2680:	str	x0, [sp]
    2684:	ldr	x7, [sp, #200]
    2688:	ldr	x6, [sp, #192]
    268c:	mov	x5, x20
    2690:	mov	x4, x19
    2694:	ldr	x3, [sp, #184]
    2698:	mov	w2, w26
    269c:	adrp	x1, 0 <elf_nodebug>
    26a0:	add	x1, x1, #0x0
    26a4:	mov	x0, x21
    26a8:	bl	19cc <elf_add>
    26ac:	mov	w25, w0
    26b0:	tbnz	w0, #31, 26f8 <elf_add+0xd2c>
    26b4:	mov	x2, x20
    26b8:	mov	x1, x19
    26bc:	mov	w0, w23
    26c0:	bl	0 <__asan_backtrace_close>
    26c4:	b	1aa0 <elf_add+0xd4>
    26c8:	mov	x3, x20
    26cc:	mov	x2, x19
    26d0:	add	x1, sp, #0x1f8
    26d4:	mov	x0, x21
    26d8:	bl	0 <__asan_backtrace_release_view>
    26dc:	b	2660 <elf_add+0xc94>
    26e0:	mov	x3, x20
    26e4:	mov	x2, x19
    26e8:	add	x1, sp, #0x1e0
    26ec:	mov	x0, x21
    26f0:	bl	0 <__asan_backtrace_release_view>
    26f4:	b	2664 <elf_add+0xc98>
    26f8:	mov	x2, x20
    26fc:	mov	x1, x19
    2700:	mov	w0, w26
    2704:	bl	0 <__asan_backtrace_close>
    2708:	b	1aa0 <elf_add+0xd4>
    270c:	mov	x3, x20
    2710:	mov	x2, x19
    2714:	add	x1, sp, #0x210
    2718:	mov	x0, x21
    271c:	bl	0 <__asan_backtrace_release_view>
    2720:	b	25b0 <elf_add+0xbe4>
    2724:	mov	x3, x20
    2728:	mov	x2, x19
    272c:	add	x1, sp, #0x1f8
    2730:	mov	x0, x21
    2734:	bl	0 <__asan_backtrace_release_view>
    2738:	cbnz	w27, 27a0 <elf_add+0xdd4>
    273c:	str	wzr, [sp, #40]
    2740:	str	xzr, [sp, #32]
    2744:	mov	w0, #0x1                   	// #1
    2748:	str	w0, [sp, #24]
    274c:	str	wzr, [sp, #16]
    2750:	str	xzr, [sp, #8]
    2754:	ldr	x0, [sp, #1056]
    2758:	str	x0, [sp]
    275c:	ldr	x7, [sp, #200]
    2760:	ldr	x6, [sp, #192]
    2764:	mov	x5, x20
    2768:	mov	x4, x19
    276c:	ldr	x3, [sp, #184]
    2770:	mov	w2, w24
    2774:	adrp	x1, 0 <elf_nodebug>
    2778:	add	x1, x1, #0x0
    277c:	mov	x0, x21
    2780:	bl	19cc <elf_add>
    2784:	mov	w25, w0
    2788:	tbnz	w0, #31, 27b8 <elf_add+0xdec>
    278c:	mov	x2, x20
    2790:	mov	x1, x19
    2794:	mov	w0, w23
    2798:	bl	0 <__asan_backtrace_close>
    279c:	b	1aa0 <elf_add+0xd4>
    27a0:	mov	x3, x20
    27a4:	mov	x2, x19
    27a8:	add	x1, sp, #0x1e0
    27ac:	mov	x0, x21
    27b0:	bl	0 <__asan_backtrace_release_view>
    27b4:	b	273c <elf_add+0xd70>
    27b8:	mov	x2, x20
    27bc:	mov	x1, x19
    27c0:	mov	w0, w24
    27c4:	bl	0 <__asan_backtrace_close>
    27c8:	b	1aa0 <elf_add+0xd4>
    27cc:	mov	x3, x20
    27d0:	mov	x2, x19
    27d4:	add	x1, sp, #0x1f8
    27d8:	mov	x0, x21
    27dc:	bl	0 <__asan_backtrace_release_view>
    27e0:	b	25f8 <elf_add+0xc2c>
    27e4:	ldr	w0, [sp, #344]
    27e8:	str	w0, [sp, #40]
    27ec:	ldr	x0, [sp, #328]
    27f0:	str	x0, [sp, #32]
    27f4:	mov	w0, #0x1                   	// #1
    27f8:	str	w0, [sp, #24]
    27fc:	str	wzr, [sp, #16]
    2800:	add	x0, sp, #0x190
    2804:	str	x0, [sp, #8]
    2808:	ldr	x0, [sp, #1056]
    280c:	str	x0, [sp]
    2810:	ldr	x7, [sp, #200]
    2814:	ldr	x6, [sp, #192]
    2818:	mov	x5, x20
    281c:	mov	x4, x19
    2820:	ldr	x3, [sp, #184]
    2824:	mov	w2, w24
    2828:	mov	x1, x25
    282c:	mov	x0, x21
    2830:	bl	19cc <elf_add>
    2834:	mov	w25, w0
    2838:	mov	x3, x20
    283c:	mov	x2, x19
    2840:	add	x1, sp, #0x1e0
    2844:	mov	x0, x21
    2848:	bl	0 <__asan_backtrace_release_view>
    284c:	tbz	w25, #31, 2630 <elf_add+0xc64>
    2850:	mov	x2, x20
    2854:	mov	x1, x19
    2858:	mov	w0, w24
    285c:	bl	0 <__asan_backtrace_close>
    2860:	b	1aa0 <elf_add+0xd4>
    2864:	mov	x3, x20
    2868:	mov	x2, x19
    286c:	add	x1, sp, #0x1e0
    2870:	mov	x0, x21
    2874:	bl	0 <__asan_backtrace_release_view>
    2878:	b	2630 <elf_add+0xc64>
    287c:	ldr	x25, [x2]
    2880:	ldr	x2, [x2]
    2884:	add	x1, x1, x2
    2888:	cmp	x3, x1
    288c:	csel	x3, x3, x1, ge  // ge = tcont
    2890:	add	x0, x0, #0x20
    2894:	cmp	x4, x0
    2898:	b.eq	28bc <elf_add+0xef0>  // b.none
    289c:	mov	x2, x0
    28a0:	ldr	x1, [x0, #8]
    28a4:	cbz	x1, 2890 <elf_add+0xec4>
    28a8:	cbz	x25, 287c <elf_add+0xeb0>
    28ac:	ldr	x5, [x0]
    28b0:	cmp	x5, x25
    28b4:	b.ge	2880 <elf_add+0xeb4>  // b.tcont
    28b8:	b	287c <elf_add+0xeb0>
    28bc:	cmp	x25, #0x0
    28c0:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    28c4:	b.ne	28e8 <elf_add+0xf1c>  // b.any
    28c8:	mov	x2, x20
    28cc:	mov	x1, x19
    28d0:	mov	w0, w23
    28d4:	bl	0 <__asan_backtrace_close>
    28d8:	mov	w26, w0
    28dc:	cbz	w0, 1a4c <elf_add+0x80>
    28e0:	mov	w25, #0x1                   	// #1
    28e4:	b	1aa0 <elf_add+0xd4>
    28e8:	add	x6, sp, #0x1c8
    28ec:	mov	x5, x20
    28f0:	mov	x4, x19
    28f4:	sub	x3, x3, x25
    28f8:	mov	x2, x25
    28fc:	mov	w1, w23
    2900:	mov	x0, x21
    2904:	bl	0 <__asan_backtrace_get_view>
    2908:	mov	w26, w0
    290c:	cbz	w0, 1a4c <elf_add+0x80>
    2910:	mov	x2, x20
    2914:	mov	x1, x19
    2918:	mov	w0, w23
    291c:	bl	0 <__asan_backtrace_close>
    2920:	cbz	w0, 2cf4 <elf_add+0x1328>
    2924:	ldr	x3, [sp, #456]
    2928:	mov	x0, x24
    292c:	mov	w2, #0x1                   	// #1
    2930:	mov	w26, #0x0                   	// #0
    2934:	b	296c <elf_add+0xfa0>
    2938:	ldr	x1, [x0]
    293c:	sub	x1, x1, x25
    2940:	add	x1, x3, x1
    2944:	str	x1, [x0, #16]
    2948:	sub	w1, w2, #0x1
    294c:	cmp	w1, #0x4
    2950:	b.hi	295c <elf_add+0xf90>  // b.pmore
    2954:	add	w26, w26, #0x1
    2958:	b	2964 <elf_add+0xf98>
    295c:	cmp	w2, #0x9
    2960:	b.hi	297c <elf_add+0xfb0>  // b.pmore
    2964:	add	x0, x0, #0x20
    2968:	add	w2, w2, #0x1
    296c:	ldr	x1, [x0, #8]
    2970:	cbnz	x1, 2938 <elf_add+0xf6c>
    2974:	str	xzr, [x0, #16]
    2978:	b	295c <elf_add+0xf90>
    297c:	mov	x25, x24
    2980:	mov	w28, #0x5                   	// #5
    2984:	mov	x23, #0x0                   	// #0
    2988:	add	x0, sp, #0x178
    298c:	str	x0, [sp, #176]
    2990:	add	x0, sp, #0x170
    2994:	str	x0, [sp, #200]
    2998:	b	29ec <elf_add+0x1020>
    299c:	str	xzr, [sp, #368]
    29a0:	str	xzr, [sp, #376]
    29a4:	ldr	x7, [sp, #176]
    29a8:	ldr	x6, [sp, #200]
    29ac:	mov	x5, x20
    29b0:	mov	x4, x19
    29b4:	mov	x3, x23
    29b8:	ldr	x2, [x27, #168]
    29bc:	ldr	x1, [x27, #176]
    29c0:	mov	x0, x21
    29c4:	bl	13a4 <elf_uncompress_zdebug>
    29c8:	cbz	w0, 2a20 <elf_add+0x1054>
    29cc:	ldr	x0, [sp, #368]
    29d0:	str	x0, [x27, #16]
    29d4:	ldr	x0, [sp, #376]
    29d8:	str	x0, [x27, #8]
    29dc:	str	wzr, [x27, #24]
    29e0:	add	x25, x25, #0x20
    29e4:	subs	w28, w28, #0x1
    29e8:	b.eq	2a2c <elf_add+0x1060>  // b.none
    29ec:	mov	x27, x25
    29f0:	ldr	x0, [x25, #8]
    29f4:	cbnz	x0, 29e0 <elf_add+0x1014>
    29f8:	ldr	x0, [x25, #168]
    29fc:	cbz	x0, 29e0 <elf_add+0x1014>
    2a00:	cbnz	x23, 299c <elf_add+0xfd0>
    2a04:	mov	x3, x20
    2a08:	mov	x2, x19
    2a0c:	mov	x1, #0x13b4                	// #5044
    2a10:	mov	x0, x21
    2a14:	bl	0 <__asan_backtrace_alloc>
    2a18:	mov	x23, x0
    2a1c:	cbnz	x0, 299c <elf_add+0xfd0>
    2a20:	mov	w26, #0x1                   	// #1
    2a24:	mov	w23, #0xffffffff            	// #-1
    2a28:	b	1a4c <elf_add+0x80>
    2a2c:	mov	w0, #0x5                   	// #5
    2a30:	str	w0, [sp, #200]
    2a34:	str	w22, [sp, #176]
    2a38:	b	2d40 <elf_add+0x1374>
    2a3c:	mov	x3, x20
    2a40:	mov	x2, x19
    2a44:	mov	x1, #0x13b4                	// #5044
    2a48:	mov	x0, x21
    2a4c:	bl	0 <__asan_backtrace_alloc>
    2a50:	mov	x23, x0
    2a54:	cbnz	x0, 2d58 <elf_add+0x138c>
    2a58:	ldr	w22, [sp, #176]
    2a5c:	mov	w26, #0x1                   	// #1
    2a60:	mov	w23, #0xffffffff            	// #-1
    2a64:	b	1a4c <elf_add+0x80>
    2a68:	ldr	w22, [sp, #176]
    2a6c:	cbz	x23, 2a88 <elf_add+0x10bc>
    2a70:	mov	x4, x20
    2a74:	mov	x3, x19
    2a78:	mov	x2, #0x13b4                	// #5044
    2a7c:	mov	x1, x23
    2a80:	mov	x0, x21
    2a84:	bl	0 <__asan_backtrace_free>
    2a88:	cbz	w26, 2b18 <elf_add+0x114c>
    2a8c:	mov	w26, #0x1                   	// #1
    2a90:	ldr	x0, [sp, #1064]
    2a94:	str	x0, [sp, #72]
    2a98:	ldr	x0, [sp, #192]
    2a9c:	str	x0, [sp, #64]
    2aa0:	str	x20, [sp, #56]
    2aa4:	str	x19, [sp, #48]
    2aa8:	ldr	x0, [sp, #400]
    2aac:	str	x0, [sp, #40]
    2ab0:	ldrb	w0, [sp, #973]
    2ab4:	cmp	w0, #0x2
    2ab8:	cset	w0, eq  // eq = none
    2abc:	str	w0, [sp, #32]
    2ac0:	ldr	x0, [sp, #736]
    2ac4:	str	x0, [sp, #24]
    2ac8:	ldr	x0, [sp, #744]
    2acc:	str	x0, [sp, #16]
    2ad0:	ldr	x0, [sp, #704]
    2ad4:	str	x0, [sp, #8]
    2ad8:	ldr	x0, [sp, #712]
    2adc:	str	x0, [sp]
    2ae0:	ldr	x7, [sp, #672]
    2ae4:	ldr	x6, [sp, #680]
    2ae8:	ldr	x5, [sp, #640]
    2aec:	ldr	x4, [sp, #648]
    2af0:	ldr	x3, [sp, #608]
    2af4:	ldr	x2, [sp, #616]
    2af8:	ldr	x1, [sp, #184]
    2afc:	mov	x0, x21
    2b00:	bl	0 <__asan_backtrace_dwarf_add>
    2b04:	cbz	w0, 2d0c <elf_add+0x1340>
    2b08:	mov	w25, #0x1                   	// #1
    2b0c:	ldr	x0, [sp, #1056]
    2b10:	str	w25, [x0]
    2b14:	b	1aa0 <elf_add+0xd4>
    2b18:	mov	x3, x20
    2b1c:	mov	x2, x19
    2b20:	add	x1, sp, #0x1c8
    2b24:	mov	x0, x21
    2b28:	bl	0 <__asan_backtrace_release_view>
    2b2c:	b	2a90 <elf_add+0x10c4>
    2b30:	mov	x3, x20
    2b34:	mov	x2, x19
    2b38:	add	x1, sp, #0x240
    2b3c:	mov	x0, x21
    2b40:	bl	0 <__asan_backtrace_release_view>
    2b44:	b	1a64 <elf_add+0x98>
    2b48:	mov	x3, x20
    2b4c:	mov	x2, x19
    2b50:	add	x1, sp, #0x228
    2b54:	mov	x0, x21
    2b58:	bl	0 <__asan_backtrace_release_view>
    2b5c:	b	1a68 <elf_add+0x9c>
    2b60:	mov	x3, x20
    2b64:	mov	x2, x19
    2b68:	add	x1, sp, #0x1f8
    2b6c:	mov	x0, x21
    2b70:	bl	0 <__asan_backtrace_release_view>
    2b74:	b	1a6c <elf_add+0xa0>
    2b78:	mov	x3, x20
    2b7c:	mov	x2, x19
    2b80:	add	x1, sp, #0x1e0
    2b84:	mov	x0, x21
    2b88:	bl	0 <__asan_backtrace_release_view>
    2b8c:	b	1a70 <elf_add+0xa4>
    2b90:	mov	x3, x20
    2b94:	mov	x2, x19
    2b98:	add	x1, sp, #0x210
    2b9c:	mov	x0, x21
    2ba0:	bl	0 <__asan_backtrace_release_view>
    2ba4:	b	1a78 <elf_add+0xac>
    2ba8:	mov	x3, x20
    2bac:	mov	x2, x19
    2bb0:	add	x1, sp, #0x1c8
    2bb4:	mov	x0, x21
    2bb8:	bl	0 <__asan_backtrace_release_view>
    2bbc:	b	1a7c <elf_add+0xb0>
    2bc0:	mov	x2, x20
    2bc4:	mov	x1, x19
    2bc8:	mov	w0, w23
    2bcc:	bl	0 <__asan_backtrace_close>
    2bd0:	b	1aa0 <elf_add+0xd4>
    2bd4:	mov	w25, #0xffffffff            	// #-1
    2bd8:	b	1aa0 <elf_add+0xd4>
    2bdc:	mov	w22, w0
    2be0:	ldr	w27, [sp, #224]
    2be4:	ldr	x24, [sp, #296]
    2be8:	ldr	x21, [sp, #264]
    2bec:	ldr	w23, [sp, #320]
    2bf0:	ldr	x19, [sp, #272]
    2bf4:	ldr	x20, [sp, #280]
    2bf8:	str	w0, [sp, #176]
    2bfc:	mov	w28, w0
    2c00:	mov	w26, #0x1                   	// #1
    2c04:	b	1c4c <elf_add+0x280>
    2c08:	mov	w28, w19
    2c0c:	ldr	w27, [sp, #224]
    2c10:	ldr	x24, [sp, #296]
    2c14:	ldr	x21, [sp, #264]
    2c18:	ldr	w23, [sp, #320]
    2c1c:	ldr	x19, [sp, #272]
    2c20:	ldr	x20, [sp, #280]
    2c24:	mov	w22, w28
    2c28:	mov	w0, #0x1                   	// #1
    2c2c:	str	w0, [sp, #176]
    2c30:	mov	w26, w0
    2c34:	b	1c4c <elf_add+0x280>
    2c38:	mov	w28, w19
    2c3c:	ldr	w27, [sp, #224]
    2c40:	ldr	x24, [sp, #296]
    2c44:	ldr	x21, [sp, #264]
    2c48:	ldr	w23, [sp, #320]
    2c4c:	ldr	x19, [sp, #272]
    2c50:	ldr	x20, [sp, #280]
    2c54:	mov	w22, w28
    2c58:	mov	w0, #0x1                   	// #1
    2c5c:	str	w0, [sp, #176]
    2c60:	mov	w26, w0
    2c64:	b	1c4c <elf_add+0x280>
    2c68:	mov	w28, w0
    2c6c:	ldr	w27, [sp, #224]
    2c70:	ldr	x24, [sp, #296]
    2c74:	ldr	x21, [sp, #264]
    2c78:	ldr	w23, [sp, #320]
    2c7c:	ldr	x19, [sp, #272]
    2c80:	ldr	x20, [sp, #280]
    2c84:	mov	w25, w0
    2c88:	mov	w22, w0
    2c8c:	mov	w26, #0x1                   	// #1
    2c90:	b	1c4c <elf_add+0x280>
    2c94:	mov	w28, w0
    2c98:	ldr	x24, [sp, #296]
    2c9c:	ldr	x21, [sp, #264]
    2ca0:	ldr	w23, [sp, #320]
    2ca4:	ldr	x19, [sp, #272]
    2ca8:	ldr	x20, [sp, #280]
    2cac:	mov	w27, w0
    2cb0:	mov	w22, w0
    2cb4:	mov	w26, #0x1                   	// #1
    2cb8:	b	1c4c <elf_add+0x280>
    2cbc:	mov	w28, w0
    2cc0:	ldr	w27, [sp, #224]
    2cc4:	ldr	x24, [sp, #296]
    2cc8:	ldr	x21, [sp, #264]
    2ccc:	ldr	w23, [sp, #320]
    2cd0:	ldr	x19, [sp, #272]
    2cd4:	ldr	x20, [sp, #280]
    2cd8:	mov	w22, w0
    2cdc:	mov	w26, #0x1                   	// #1
    2ce0:	b	1c4c <elf_add+0x280>
    2ce4:	mov	w22, #0x1                   	// #1
    2ce8:	mov	w28, w22
    2cec:	mov	w26, w22
    2cf0:	b	1c4c <elf_add+0x280>
    2cf4:	mov	w26, #0x1                   	// #1
    2cf8:	b	1a4c <elf_add+0x80>
    2cfc:	ldr	w22, [sp, #176]
    2d00:	mov	w26, #0x1                   	// #1
    2d04:	mov	w23, #0xffffffff            	// #-1
    2d08:	b	1a4c <elf_add+0x80>
    2d0c:	mov	w23, #0xffffffff            	// #-1
    2d10:	b	1a4c <elf_add+0x80>
    2d14:	mov	x0, #0x0                   	// #0
    2d18:	mov	x25, #0x0                   	// #0
    2d1c:	str	x25, [x27, #16]
    2d20:	str	x0, [x27, #8]
    2d24:	str	wzr, [x27, #24]
    2d28:	sub	w26, w26, #0x1
    2d2c:	add	x24, x24, #0x20
    2d30:	ldr	w0, [sp, #200]
    2d34:	subs	w0, w0, #0x1
    2d38:	str	w0, [sp, #200]
    2d3c:	b.eq	2a68 <elf_add+0x109c>  // b.none
    2d40:	mov	x27, x24
    2d44:	ldr	x0, [x24, #8]
    2d48:	cbz	x0, 2d2c <elf_add+0x1360>
    2d4c:	ldr	w0, [x24, #24]
    2d50:	cbz	w0, 2d2c <elf_add+0x1360>
    2d54:	cbz	x23, 2a3c <elf_add+0x1070>
    2d58:	ldr	x22, [x27, #8]
    2d5c:	cmp	x22, #0x17
    2d60:	b.ls	2d14 <elf_add+0x1348>  // b.plast
    2d64:	ldr	x28, [x27, #16]
    2d68:	ldr	w0, [x28]
    2d6c:	cmp	w0, #0x1
    2d70:	b.ne	2db4 <elf_add+0x13e8>  // b.any
    2d74:	mov	x3, x20
    2d78:	mov	x2, x19
    2d7c:	ldr	x1, [x28, #8]
    2d80:	mov	x0, x21
    2d84:	bl	0 <__asan_backtrace_alloc>
    2d88:	mov	x25, x0
    2d8c:	cbz	x0, 2cfc <elf_add+0x1330>
    2d90:	ldr	x4, [x28, #8]
    2d94:	mov	x3, x0
    2d98:	mov	x2, x23
    2d9c:	sub	x1, x22, #0x18
    2da0:	add	x0, x28, #0x18
    2da4:	bl	504 <elf_zlib_inflate_and_verify>
    2da8:	cbz	w0, 2dc0 <elf_add+0x13f4>
    2dac:	ldr	x0, [x28, #8]
    2db0:	b	2d1c <elf_add+0x1350>
    2db4:	mov	x0, #0x0                   	// #0
    2db8:	mov	x25, #0x0                   	// #0
    2dbc:	b	2d1c <elf_add+0x1350>
    2dc0:	mov	x0, #0x0                   	// #0
    2dc4:	mov	x25, #0x0                   	// #0
    2dc8:	b	2d1c <elf_add+0x1350>
    2dcc:	mov	x3, x20
    2dd0:	mov	x2, x19
    2dd4:	mov	x1, #0x0                   	// #0
    2dd8:	mov	x0, x21
    2ddc:	bl	0 <__asan_backtrace_alloc>
    2de0:	mov	x26, x0
    2de4:	cbz	x0, 230c <elf_add+0x940>
    2de8:	str	xzr, [sp, #224]
    2dec:	adrp	x3, 0 <elf_nodebug>
    2df0:	add	x3, x3, #0x0
    2df4:	mov	x2, #0x18                  	// #24
    2df8:	ldr	x22, [sp, #224]
    2dfc:	mov	x1, x22
    2e00:	mov	x0, x26
    2e04:	bl	0 <__asan_backtrace_qsort>
    2e08:	str	xzr, [x28]
    2e0c:	str	x26, [x28, #8]
    2e10:	str	x22, [x28, #16]
    2e14:	mov	x3, x20
    2e18:	mov	x2, x19
    2e1c:	add	x1, sp, #0x240
    2e20:	mov	x0, x21
    2e24:	bl	0 <__asan_backtrace_release_view>
    2e28:	mov	w0, #0x1                   	// #1
    2e2c:	ldr	x1, [sp, #200]
    2e30:	str	w0, [x1]
    2e34:	ldr	w0, [x21, #8]
    2e38:	cbz	w0, 23d8 <elf_add+0xa0c>
    2e3c:	add	x2, x21, #0x30
    2e40:	mov	x0, x2
    2e44:	ldar	x1, [x0]
    2e48:	cbz	x1, 23fc <elf_add+0xa30>
    2e4c:	mov	x0, x1
    2e50:	b	2e44 <elf_add+0x1478>

0000000000002e54 <phdr_callback>:
    2e54:	sub	sp, sp, #0x80
    2e58:	stp	x29, x30, [sp, #48]
    2e5c:	add	x29, sp, #0x30
    2e60:	stp	x19, x20, [sp, #64]
    2e64:	str	x21, [sp, #80]
    2e68:	mov	x20, x0
    2e6c:	mov	x19, x2
    2e70:	ldr	x1, [x0, #8]
    2e74:	cbz	x1, 2e80 <phdr_callback+0x2c>
    2e78:	ldrb	w0, [x1]
    2e7c:	cbnz	w0, 2f10 <phdr_callback+0xbc>
    2e80:	ldr	w2, [x19, #56]
    2e84:	cmn	w2, #0x1
    2e88:	b.eq	2ef8 <phdr_callback+0xa4>  // b.none
    2e8c:	ldr	x21, [x19, #48]
    2e90:	mov	w0, #0xffffffff            	// #-1
    2e94:	str	w0, [x19, #56]
    2e98:	str	wzr, [sp, #40]
    2e9c:	str	xzr, [sp, #32]
    2ea0:	str	wzr, [sp, #24]
    2ea4:	str	wzr, [sp, #16]
    2ea8:	str	xzr, [sp, #8]
    2eac:	add	x0, sp, #0x6c
    2eb0:	str	x0, [sp]
    2eb4:	ldr	x7, [x19, #32]
    2eb8:	add	x6, sp, #0x70
    2ebc:	ldr	x5, [x19, #16]
    2ec0:	ldr	x4, [x19, #8]
    2ec4:	ldr	x3, [x20]
    2ec8:	mov	x1, x21
    2ecc:	ldr	x0, [x19]
    2ed0:	bl	19cc <elf_add>
    2ed4:	cbz	w0, 2ef8 <phdr_callback+0xa4>
    2ed8:	ldr	w0, [sp, #108]
    2edc:	cbz	w0, 2ef8 <phdr_callback+0xa4>
    2ee0:	ldr	x0, [x19, #40]
    2ee4:	mov	w1, #0x1                   	// #1
    2ee8:	str	w1, [x0]
    2eec:	ldr	x0, [x19, #24]
    2ef0:	ldr	x1, [sp, #112]
    2ef4:	str	x1, [x0]
    2ef8:	mov	w0, #0x0                   	// #0
    2efc:	ldp	x19, x20, [sp, #64]
    2f00:	ldr	x21, [sp, #80]
    2f04:	ldp	x29, x30, [sp, #48]
    2f08:	add	sp, sp, #0x80
    2f0c:	ret
    2f10:	ldr	w0, [x2, #56]
    2f14:	cmn	w0, #0x1
    2f18:	b.ne	2f40 <phdr_callback+0xec>  // b.any
    2f1c:	ldr	x21, [x20, #8]
    2f20:	add	x3, sp, #0x7c
    2f24:	ldr	x2, [x19, #16]
    2f28:	ldr	x1, [x19, #8]
    2f2c:	mov	x0, x21
    2f30:	bl	0 <__asan_backtrace_open>
    2f34:	mov	w2, w0
    2f38:	tbz	w0, #31, 2e98 <phdr_callback+0x44>
    2f3c:	b	2ef8 <phdr_callback+0xa4>
    2f40:	ldr	x2, [x2, #16]
    2f44:	ldr	x1, [x19, #8]
    2f48:	bl	0 <__asan_backtrace_close>
    2f4c:	mov	w0, #0xffffffff            	// #-1
    2f50:	str	w0, [x19, #56]
    2f54:	b	2f1c <phdr_callback+0xc8>

0000000000002f58 <elf_syminfo>:
    2f58:	stp	x29, x30, [sp, #-16]!
    2f5c:	mov	x29, sp
    2f60:	mov	x3, x0
    2f64:	mov	x10, x2
    2f68:	mov	x0, x4
    2f6c:	ldr	w2, [x3, #8]
    2f70:	cbnz	w2, 2fc8 <elf_syminfo+0x70>
    2f74:	ldr	x4, [x3, #48]
    2f78:	cbz	x4, 302c <elf_syminfo+0xd4>
    2f7c:	mov	x9, #0x0                   	// #0
    2f80:	b	3060 <elf_syminfo+0x108>
    2f84:	mov	x8, x6
    2f88:	cmp	x8, x7
    2f8c:	b.ls	3058 <elf_syminfo+0x100>  // b.plast
    2f90:	add	x5, x8, x7
    2f94:	lsr	x6, x5, #1
    2f98:	and	x5, x5, #0xfffffffffffffffe
    2f9c:	add	x5, x5, x6
    2fa0:	add	x5, x2, x5, lsl #3
    2fa4:	ldr	x3, [x5, #8]
    2fa8:	cmp	x3, x1
    2fac:	b.hi	2f84 <elf_syminfo+0x2c>  // b.pmore
    2fb0:	ldr	x7, [x5, #16]
    2fb4:	add	x3, x3, x7
    2fb8:	cmp	x3, x1
    2fbc:	b.hi	3040 <elf_syminfo+0xe8>  // b.pmore
    2fc0:	add	x7, x6, #0x1
    2fc4:	b	2f88 <elf_syminfo+0x30>
    2fc8:	add	x2, x3, #0x30
    2fcc:	mov	x4, #0x0                   	// #0
    2fd0:	ldar	x2, [x2]
    2fd4:	cbz	x2, 302c <elf_syminfo+0xd4>
    2fd8:	ldr	x9, [x2, #8]
    2fdc:	ldr	x8, [x2, #16]
    2fe0:	mov	x7, x4
    2fe4:	b	2fec <elf_syminfo+0x94>
    2fe8:	mov	x8, x6
    2fec:	cmp	x8, x7
    2ff0:	b.ls	2fd0 <elf_syminfo+0x78>  // b.plast
    2ff4:	add	x5, x8, x7
    2ff8:	lsr	x6, x5, #1
    2ffc:	and	x5, x5, #0xfffffffffffffffe
    3000:	add	x5, x5, x6
    3004:	add	x5, x9, x5, lsl #3
    3008:	ldr	x3, [x5, #8]
    300c:	cmp	x3, x1
    3010:	b.hi	2fe8 <elf_syminfo+0x90>  // b.pmore
    3014:	ldr	x7, [x5, #16]
    3018:	add	x3, x3, x7
    301c:	cmp	x3, x1
    3020:	b.hi	3040 <elf_syminfo+0xe8>  // b.pmore
    3024:	add	x7, x6, #0x1
    3028:	b	2fec <elf_syminfo+0x94>
    302c:	mov	x4, #0x0                   	// #0
    3030:	mov	x3, #0x0                   	// #0
    3034:	mov	x2, #0x0                   	// #0
    3038:	blr	x10
    303c:	b	3050 <elf_syminfo+0xf8>
    3040:	ldr	x4, [x5, #16]
    3044:	ldr	x3, [x5, #8]
    3048:	ldr	x2, [x5]
    304c:	blr	x10
    3050:	ldp	x29, x30, [sp], #16
    3054:	ret
    3058:	ldr	x4, [x4]
    305c:	cbz	x4, 302c <elf_syminfo+0xd4>
    3060:	ldr	x2, [x4, #8]
    3064:	ldr	x8, [x4, #16]
    3068:	mov	x7, x9
    306c:	b	2f88 <elf_syminfo+0x30>

0000000000003070 <__asan_backtrace_uncompress_zdebug>:
    3070:	stp	x29, x30, [sp, #-80]!
    3074:	mov	x29, sp
    3078:	stp	x19, x20, [sp, #16]
    307c:	stp	x21, x22, [sp, #32]
    3080:	stp	x23, x24, [sp, #48]
    3084:	stp	x25, x26, [sp, #64]
    3088:	mov	x22, x0
    308c:	mov	x23, x1
    3090:	mov	x24, x2
    3094:	mov	x20, x3
    3098:	mov	x21, x4
    309c:	mov	x25, x5
    30a0:	mov	x26, x6
    30a4:	mov	x3, x4
    30a8:	mov	x2, x20
    30ac:	mov	x1, #0x13b4                	// #5044
    30b0:	bl	0 <__asan_backtrace_alloc>
    30b4:	cbz	x0, 3118 <__asan_backtrace_uncompress_zdebug+0xa8>
    30b8:	mov	x19, x0
    30bc:	mov	x7, x26
    30c0:	mov	x6, x25
    30c4:	mov	x5, x21
    30c8:	mov	x4, x20
    30cc:	mov	x3, x0
    30d0:	mov	x2, x24
    30d4:	mov	x1, x23
    30d8:	mov	x0, x22
    30dc:	bl	13a4 <elf_uncompress_zdebug>
    30e0:	mov	w23, w0
    30e4:	mov	x4, x21
    30e8:	mov	x3, x20
    30ec:	mov	x2, #0x13b4                	// #5044
    30f0:	mov	x1, x19
    30f4:	mov	x0, x22
    30f8:	bl	0 <__asan_backtrace_free>
    30fc:	mov	w0, w23
    3100:	ldp	x19, x20, [sp, #16]
    3104:	ldp	x21, x22, [sp, #32]
    3108:	ldp	x23, x24, [sp, #48]
    310c:	ldp	x25, x26, [sp, #64]
    3110:	ldp	x29, x30, [sp], #80
    3114:	ret
    3118:	mov	w23, #0x0                   	// #0
    311c:	b	30fc <__asan_backtrace_uncompress_zdebug+0x8c>

0000000000003120 <__asan_backtrace_initialize>:
    3120:	sub	sp, sp, #0xc0
    3124:	stp	x29, x30, [sp, #48]
    3128:	add	x29, sp, #0x30
    312c:	stp	x19, x20, [sp, #64]
    3130:	stp	x21, x22, [sp, #80]
    3134:	stp	x23, x24, [sp, #96]
    3138:	mov	x19, x0
    313c:	mov	x24, x1
    3140:	mov	w20, w2
    3144:	mov	x22, x3
    3148:	mov	x21, x4
    314c:	mov	x23, x5
    3150:	adrp	x3, 0 <elf_nodebug>
    3154:	add	x3, x3, #0x0
    3158:	str	x3, [sp, #176]
    315c:	str	wzr, [sp, #40]
    3160:	str	xzr, [sp, #32]
    3164:	str	wzr, [sp, #24]
    3168:	mov	w3, #0x1                   	// #1
    316c:	str	w3, [sp, #16]
    3170:	str	xzr, [sp, #8]
    3174:	add	x3, sp, #0xb8
    3178:	str	x3, [sp]
    317c:	add	x7, sp, #0xbc
    3180:	add	x6, sp, #0xb0
    3184:	mov	x5, x4
    3188:	mov	x4, x22
    318c:	mov	x3, #0x0                   	// #0
    3190:	bl	19cc <elf_add>
    3194:	cbz	w0, 3228 <__asan_backtrace_initialize+0x108>
    3198:	str	x19, [sp, #112]
    319c:	str	x22, [sp, #120]
    31a0:	str	x21, [sp, #128]
    31a4:	add	x1, sp, #0xb0
    31a8:	str	x1, [sp, #136]
    31ac:	add	x1, sp, #0xbc
    31b0:	str	x1, [sp, #144]
    31b4:	add	x1, sp, #0xb8
    31b8:	str	x1, [sp, #152]
    31bc:	str	x24, [sp, #160]
    31c0:	cmp	w0, #0x0
    31c4:	csinv	w20, w20, wzr, lt  // lt = tstop
    31c8:	str	w20, [sp, #168]
    31cc:	add	x1, sp, #0x70
    31d0:	adrp	x0, 0 <elf_nodebug>
    31d4:	add	x0, x0, #0x0
    31d8:	bl	0 <dl_iterate_phdr>
    31dc:	ldr	w0, [x19, #8]
    31e0:	cbnz	w0, 3258 <__asan_backtrace_initialize+0x138>
    31e4:	ldr	w0, [sp, #188]
    31e8:	cbz	w0, 3240 <__asan_backtrace_initialize+0x120>
    31ec:	adrp	x0, 0 <elf_nodebug>
    31f0:	add	x0, x0, #0x0
    31f4:	str	x0, [x19, #40]
    31f8:	ldr	x0, [x19, #24]
    31fc:	str	x0, [x23]
    3200:	ldr	x2, [x23]
    3204:	cmp	x2, #0x0
    3208:	mov	w0, #0x1                   	// #1
    320c:	adrp	x1, 0 <elf_nodebug>
    3210:	add	x1, x1, #0x0
    3214:	ccmp	x2, x1, #0x4, ne  // ne = any
    3218:	b.ne	3228 <__asan_backtrace_initialize+0x108>  // b.any
    321c:	ldr	x0, [sp, #176]
    3220:	str	x0, [x23]
    3224:	mov	w0, #0x1                   	// #1
    3228:	ldp	x19, x20, [sp, #64]
    322c:	ldp	x21, x22, [sp, #80]
    3230:	ldp	x23, x24, [sp, #96]
    3234:	ldp	x29, x30, [sp, #48]
    3238:	add	sp, sp, #0xc0
    323c:	ret
    3240:	ldr	x0, [x19, #40]
    3244:	cbnz	x0, 31f8 <__asan_backtrace_initialize+0xd8>
    3248:	adrp	x0, 0 <elf_nodebug>
    324c:	add	x0, x0, #0x0
    3250:	str	x0, [x19, #40]
    3254:	b	31f8 <__asan_backtrace_initialize+0xd8>
    3258:	ldr	w0, [sp, #188]
    325c:	cbz	w0, 3288 <__asan_backtrace_initialize+0x168>
    3260:	add	x0, x19, #0x28
    3264:	adrp	x1, 0 <elf_nodebug>
    3268:	add	x1, x1, #0x0
    326c:	stlr	x1, [x0]
    3270:	ldr	w0, [x19, #8]
    3274:	cbz	w0, 31f8 <__asan_backtrace_initialize+0xd8>
    3278:	add	x19, x19, #0x18
    327c:	ldar	x0, [x19]
    3280:	str	x0, [x23]
    3284:	b	3200 <__asan_backtrace_initialize+0xe0>
    3288:	add	x0, x19, #0x28
    328c:	adrp	x1, 0 <elf_nodebug>
    3290:	add	x1, x1, #0x0
    3294:	ldxr	x2, [x0]
    3298:	cbnz	x2, 32a4 <__asan_backtrace_initialize+0x184>
    329c:	stlxr	w3, x1, [x0]
    32a0:	cbnz	w3, 3294 <__asan_backtrace_initialize+0x174>
    32a4:	dmb	ish
    32a8:	b	3270 <__asan_backtrace_initialize+0x150>

fileline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fileline_initialize>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x20, x0
  18:	mov	x22, x1
  1c:	mov	x23, x2
  20:	ldr	w0, [x0, #8]
  24:	cbnz	w0, 58 <fileline_initialize+0x58>
  28:	ldr	w0, [x20, #56]
  2c:	cbnz	w0, 7c <fileline_initialize+0x7c>
  30:	ldr	x0, [x20, #24]
  34:	str	x0, [sp, #152]
  38:	ldr	x1, [sp, #152]
  3c:	mov	w0, #0x1                   	// #1
  40:	cbz	x1, 98 <fileline_initialize+0x98>
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldp	x23, x24, [sp, #48]
  50:	ldp	x29, x30, [sp], #160
  54:	ret
  58:	add	x0, x20, #0x38
  5c:	ldar	w0, [x0]
  60:	cbnz	w0, 7c <fileline_initialize+0x7c>
  64:	ldr	w0, [x20, #8]
  68:	cbz	w0, 30 <fileline_initialize+0x30>
  6c:	add	x0, x20, #0x18
  70:	ldar	x0, [x0]
  74:	str	x0, [sp, #152]
  78:	b	38 <fileline_initialize+0x38>
  7c:	mov	w2, #0xffffffff            	// #-1
  80:	adrp	x1, 0 <fileline_initialize>
  84:	add	x1, x1, #0x0
  88:	mov	x0, x23
  8c:	blr	x22
  90:	mov	w0, #0x0                   	// #0
  94:	b	44 <fileline_initialize+0x44>
  98:	stp	x25, x26, [sp, #64]
  9c:	mov	w0, #0xffffffff            	// #-1
  a0:	mov	w19, #0x0                   	// #0
  a4:	add	x26, sp, #0x54
  a8:	adrp	x25, 0 <fileline_initialize>
  ac:	add	x25, x25, #0x0
  b0:	adrp	x24, 0 <fileline_initialize>
  b4:	add	x24, x24, #0x0
  b8:	b	d8 <fileline_initialize+0xd8>
  bc:	cbz	w19, 118 <fileline_initialize+0x118>
  c0:	cmp	w19, #0x1
  c4:	b.ne	124 <fileline_initialize+0x124>  // b.any
  c8:	mov	x21, #0x0                   	// #0
  cc:	add	w19, w19, #0x1
  d0:	cmp	w19, #0x5
  d4:	b.eq	184 <fileline_initialize+0x184>  // b.none
  d8:	cmp	w19, #0x2
  dc:	b.eq	128 <fileline_initialize+0x128>  // b.none
  e0:	b.le	bc <fileline_initialize+0xbc>
  e4:	cmp	w19, #0x3
  e8:	b.eq	1b4 <fileline_initialize+0x1b4>  // b.none
  ec:	cmp	w19, #0x4
  f0:	b.ne	124 <fileline_initialize+0x124>  // b.any
  f4:	bl	0 <getpid>
  f8:	add	x21, sp, #0x58
  fc:	sxtw	x3, w0
 100:	adrp	x2, 0 <fileline_initialize>
 104:	add	x2, x2, #0x0
 108:	mov	x1, #0x40                  	// #64
 10c:	mov	x0, x21
 110:	bl	0 <snprintf>
 114:	b	1b8 <fileline_initialize+0x1b8>
 118:	ldr	x21, [x20]
 11c:	cbz	x21, c8 <fileline_initialize+0xc8>
 120:	b	1b8 <fileline_initialize+0x1b8>
 124:	bl	0 <abort>
 128:	mov	x21, x25
 12c:	b	1b8 <fileline_initialize+0x1b8>
 130:	ldr	w1, [sp, #84]
 134:	cbnz	w1, cc <fileline_initialize+0xcc>
 138:	b	19c <fileline_initialize+0x19c>
 13c:	mov	w2, #0x0                   	// #0
 140:	adrp	x1, 0 <fileline_initialize>
 144:	add	x1, x1, #0x0
 148:	mov	x0, x23
 14c:	blr	x22
 150:	b	19c <fileline_initialize+0x19c>
 154:	add	x20, x20, #0x38
 158:	mov	w0, #0x1                   	// #1
 15c:	stlr	w0, [x20]
 160:	mov	w0, #0x0                   	// #0
 164:	ldp	x25, x26, [sp, #64]
 168:	b	44 <fileline_initialize+0x44>
 16c:	add	x20, x20, #0x18
 170:	ldr	x0, [sp, #152]
 174:	stlr	x0, [x20]
 178:	mov	w0, #0x1                   	// #1
 17c:	ldp	x25, x26, [sp, #64]
 180:	b	44 <fileline_initialize+0x44>
 184:	tbz	w0, #31, 1d0 <fileline_initialize+0x1d0>
 188:	ldr	x1, [x20]
 18c:	cbz	x1, 13c <fileline_initialize+0x13c>
 190:	mov	w2, #0x2                   	// #2
 194:	mov	x0, x23
 198:	blr	x22
 19c:	ldr	w0, [x20, #8]
 1a0:	cbnz	w0, 154 <fileline_initialize+0x154>
 1a4:	mov	w1, #0x1                   	// #1
 1a8:	str	w1, [x20, #56]
 1ac:	ldp	x25, x26, [sp, #64]
 1b0:	b	44 <fileline_initialize+0x44>
 1b4:	mov	x21, x24
 1b8:	mov	x3, x26
 1bc:	mov	x2, x23
 1c0:	mov	x1, x22
 1c4:	mov	x0, x21
 1c8:	bl	0 <__asan_backtrace_open>
 1cc:	tbnz	w0, #31, 130 <fileline_initialize+0x130>
 1d0:	add	x5, sp, #0x98
 1d4:	mov	x4, x23
 1d8:	mov	x3, x22
 1dc:	mov	w2, w0
 1e0:	mov	x1, x21
 1e4:	mov	x0, x20
 1e8:	bl	0 <__asan_backtrace_initialize>
 1ec:	cbz	w0, 19c <fileline_initialize+0x19c>
 1f0:	ldr	w0, [x20, #8]
 1f4:	cbnz	w0, 16c <fileline_initialize+0x16c>
 1f8:	ldr	x0, [sp, #152]
 1fc:	str	x0, [x20, #24]
 200:	mov	w0, #0x1                   	// #1
 204:	ldp	x25, x26, [sp, #64]
 208:	b	44 <fileline_initialize+0x44>

000000000000020c <__asan_backtrace_pcinfo>:
 20c:	stp	x29, x30, [sp, #-64]!
 210:	mov	x29, sp
 214:	stp	x19, x20, [sp, #16]
 218:	stp	x21, x22, [sp, #32]
 21c:	str	x23, [sp, #48]
 220:	mov	x19, x0
 224:	mov	x23, x1
 228:	mov	x22, x2
 22c:	mov	x20, x3
 230:	mov	x21, x4
 234:	mov	x2, x4
 238:	mov	x1, x3
 23c:	bl	0 <fileline_initialize>
 240:	cbz	w0, 26c <__asan_backtrace_pcinfo+0x60>
 244:	ldr	w1, [x19, #56]
 248:	mov	w0, #0x0                   	// #0
 24c:	cbnz	w1, 26c <__asan_backtrace_pcinfo+0x60>
 250:	ldr	x5, [x19, #24]
 254:	mov	x4, x21
 258:	mov	x3, x20
 25c:	mov	x2, x22
 260:	mov	x1, x23
 264:	mov	x0, x19
 268:	blr	x5
 26c:	ldp	x19, x20, [sp, #16]
 270:	ldp	x21, x22, [sp, #32]
 274:	ldr	x23, [sp, #48]
 278:	ldp	x29, x30, [sp], #64
 27c:	ret

0000000000000280 <__asan_backtrace_syminfo>:
 280:	stp	x29, x30, [sp, #-64]!
 284:	mov	x29, sp
 288:	stp	x19, x20, [sp, #16]
 28c:	stp	x21, x22, [sp, #32]
 290:	str	x23, [sp, #48]
 294:	mov	x19, x0
 298:	mov	x23, x1
 29c:	mov	x22, x2
 2a0:	mov	x20, x3
 2a4:	mov	x21, x4
 2a8:	mov	x2, x4
 2ac:	mov	x1, x3
 2b0:	bl	0 <fileline_initialize>
 2b4:	cbz	w0, 2e4 <__asan_backtrace_syminfo+0x64>
 2b8:	ldr	w1, [x19, #56]
 2bc:	mov	w0, #0x0                   	// #0
 2c0:	cbnz	w1, 2e4 <__asan_backtrace_syminfo+0x64>
 2c4:	ldr	x5, [x19, #40]
 2c8:	mov	x4, x21
 2cc:	mov	x3, x20
 2d0:	mov	x2, x22
 2d4:	mov	x1, x23
 2d8:	mov	x0, x19
 2dc:	blr	x5
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	ldp	x19, x20, [sp, #16]
 2e8:	ldp	x21, x22, [sp, #32]
 2ec:	ldr	x23, [sp, #48]
 2f0:	ldp	x29, x30, [sp], #64
 2f4:	ret

mmap.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <backtrace_free_locked>:
   0:	cmp	x2, #0xf
   4:	b.ls	7c <backtrace_free_locked+0x7c>  // b.plast
   8:	add	x4, x0, #0x40
   c:	ldr	x3, [x0, #64]
  10:	mov	x5, #0x0                   	// #0
  14:	cbnz	x3, 20 <backtrace_free_locked+0x20>
  18:	b	6c <backtrace_free_locked+0x6c>
  1c:	mov	x4, x6
  20:	add	x5, x5, #0x1
  24:	mov	x6, x3
  28:	ldr	x3, [x3]
  2c:	cbz	x3, 4c <backtrace_free_locked+0x4c>
  30:	cbz	x4, 1c <backtrace_free_locked+0x1c>
  34:	ldr	x7, [x4]
  38:	ldr	x8, [x3, #8]
  3c:	ldr	x7, [x7, #8]
  40:	cmp	x8, x7
  44:	csel	x4, x4, x6, cs  // cs = hs, nlast
  48:	b	20 <backtrace_free_locked+0x20>
  4c:	cmp	x5, #0xf
  50:	b.ls	6c <backtrace_free_locked+0x6c>  // b.plast
  54:	ldr	x3, [x4]
  58:	ldr	x5, [x3, #8]
  5c:	cmp	x5, x2
  60:	b.cs	7c <backtrace_free_locked+0x7c>  // b.hs, b.nlast
  64:	ldr	x3, [x3]
  68:	str	x3, [x4]
  6c:	ldr	x3, [x0, #64]
  70:	str	x3, [x1]
  74:	str	x2, [x1, #8]
  78:	str	x1, [x0, #64]
  7c:	ret

0000000000000080 <__asan_backtrace_free>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	str	x21, [sp, #32]
  90:	mov	x19, x0
  94:	mov	x21, x1
  98:	mov	x20, x2
  9c:	mov	x0, #0xffff                	// #65535
  a0:	cmp	x2, x0
  a4:	b.ls	c0 <__asan_backtrace_free+0x40>  // b.plast
  a8:	bl	0 <getpagesize>
  ac:	sxtw	x0, w0
  b0:	sub	x0, x0, #0x1
  b4:	orr	x1, x21, x20
  b8:	tst	x0, x1
  bc:	b.eq	10c <__asan_backtrace_free+0x8c>  // b.none
  c0:	ldr	w0, [x19, #8]
  c4:	cbz	w0, e4 <__asan_backtrace_free+0x64>
  c8:	add	x0, x19, #0x3c
  cc:	mov	w2, #0x1                   	// #1
  d0:	ldxr	w1, [x0]
  d4:	stxr	w3, w2, [x0]
  d8:	cbnz	w3, d0 <__asan_backtrace_free+0x50>
  dc:	dmb	ish
  e0:	cbnz	w1, fc <__asan_backtrace_free+0x7c>
  e4:	mov	x2, x20
  e8:	mov	x1, x21
  ec:	mov	x0, x19
  f0:	bl	0 <backtrace_free_locked>
  f4:	ldr	w0, [x19, #8]
  f8:	cbnz	w0, 120 <__asan_backtrace_free+0xa0>
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldr	x21, [sp, #32]
 104:	ldp	x29, x30, [sp], #48
 108:	ret
 10c:	mov	x1, x20
 110:	mov	x0, x21
 114:	bl	0 <munmap>
 118:	cbnz	w0, c0 <__asan_backtrace_free+0x40>
 11c:	b	fc <__asan_backtrace_free+0x7c>
 120:	add	x19, x19, #0x3c
 124:	stlr	wzr, [x19]
 128:	b	fc <__asan_backtrace_free+0x7c>

000000000000012c <__asan_backtrace_alloc>:
 12c:	stp	x29, x30, [sp, #-64]!
 130:	mov	x29, sp
 134:	stp	x19, x20, [sp, #16]
 138:	stp	x21, x22, [sp, #32]
 13c:	stp	x23, x24, [sp, #48]
 140:	mov	x21, x0
 144:	mov	x20, x1
 148:	mov	x22, x2
 14c:	mov	x23, x3
 150:	ldr	w0, [x0, #8]
 154:	cbnz	w0, 190 <__asan_backtrace_alloc+0x64>
 158:	add	x1, x21, #0x40
 15c:	ldr	x19, [x21, #64]
 160:	cbz	x19, 17c <__asan_backtrace_alloc+0x50>
 164:	ldr	x4, [x19, #8]
 168:	cmp	x4, x20
 16c:	b.cs	218 <__asan_backtrace_alloc+0xec>  // b.hs, b.nlast
 170:	mov	x1, x19
 174:	ldr	x19, [x19]
 178:	cbnz	x19, 164 <__asan_backtrace_alloc+0x38>
 17c:	ldr	w0, [x21, #8]
 180:	cbz	w0, 1ac <__asan_backtrace_alloc+0x80>
 184:	add	x0, x21, #0x3c
 188:	stlr	wzr, [x0]
 18c:	b	1ac <__asan_backtrace_alloc+0x80>
 190:	add	x0, x21, #0x3c
 194:	mov	w2, #0x1                   	// #1
 198:	ldxr	w1, [x0]
 19c:	stxr	w3, w2, [x0]
 1a0:	cbnz	w3, 198 <__asan_backtrace_alloc+0x6c>
 1a4:	dmb	ish
 1a8:	cbz	w1, 158 <__asan_backtrace_alloc+0x2c>
 1ac:	bl	0 <getpagesize>
 1b0:	sxtw	x0, w0
 1b4:	sub	x24, x20, #0x1
 1b8:	add	x24, x24, x0
 1bc:	neg	x0, x0
 1c0:	and	x24, x24, x0
 1c4:	mov	x5, #0x0                   	// #0
 1c8:	mov	w4, #0xffffffff            	// #-1
 1cc:	mov	w3, #0x22                  	// #34
 1d0:	mov	w2, #0x3                   	// #3
 1d4:	mov	x1, x24
 1d8:	mov	x0, #0x0                   	// #0
 1dc:	bl	0 <mmap>
 1e0:	mov	x19, x0
 1e4:	cmn	x0, #0x1
 1e8:	b.eq	268 <__asan_backtrace_alloc+0x13c>  // b.none
 1ec:	add	x1, x20, #0x7
 1f0:	and	x1, x1, #0xfffffffffffffff8
 1f4:	cmp	x24, x1
 1f8:	b.ls	23c <__asan_backtrace_alloc+0x110>  // b.plast
 1fc:	mov	x4, x23
 200:	mov	x3, x22
 204:	sub	x2, x24, x1
 208:	add	x1, x0, x1
 20c:	mov	x0, x21
 210:	bl	80 <__asan_backtrace_free>
 214:	b	23c <__asan_backtrace_alloc+0x110>
 218:	ldr	x0, [x19]
 21c:	str	x0, [x1]
 220:	add	x1, x20, #0x7
 224:	and	x1, x1, #0xfffffffffffffff8
 228:	ldr	x2, [x19, #8]
 22c:	cmp	x2, x1
 230:	b.hi	254 <__asan_backtrace_alloc+0x128>  // b.pmore
 234:	ldr	w0, [x21, #8]
 238:	cbnz	w0, 28c <__asan_backtrace_alloc+0x160>
 23c:	mov	x0, x19
 240:	ldp	x19, x20, [sp, #16]
 244:	ldp	x21, x22, [sp, #32]
 248:	ldp	x23, x24, [sp, #48]
 24c:	ldp	x29, x30, [sp], #64
 250:	ret
 254:	sub	x2, x2, x1
 258:	add	x1, x19, x1
 25c:	mov	x0, x21
 260:	bl	0 <backtrace_free_locked>
 264:	b	234 <__asan_backtrace_alloc+0x108>
 268:	mov	x19, #0x0                   	// #0
 26c:	cbz	x22, 23c <__asan_backtrace_alloc+0x110>
 270:	bl	0 <__errno_location>
 274:	ldr	w2, [x0]
 278:	adrp	x1, 0 <backtrace_free_locked>
 27c:	add	x1, x1, #0x0
 280:	mov	x0, x23
 284:	blr	x22
 288:	b	23c <__asan_backtrace_alloc+0x110>
 28c:	add	x21, x21, #0x3c
 290:	stlr	wzr, [x21]
 294:	b	23c <__asan_backtrace_alloc+0x110>

0000000000000298 <__asan_backtrace_vector_grow>:
 298:	stp	x29, x30, [sp, #-80]!
 29c:	mov	x29, sp
 2a0:	stp	x19, x20, [sp, #16]
 2a4:	stp	x21, x22, [sp, #32]
 2a8:	stp	x23, x24, [sp, #48]
 2ac:	mov	x23, x0
 2b0:	mov	x21, x1
 2b4:	mov	x19, x4
 2b8:	ldr	x0, [x4, #16]
 2bc:	cmp	x0, x1
 2c0:	b.cs	340 <__asan_backtrace_vector_grow+0xa8>  // b.hs, b.nlast
 2c4:	str	x25, [sp, #64]
 2c8:	mov	x24, x2
 2cc:	mov	x25, x3
 2d0:	ldr	x0, [x4, #8]
 2d4:	add	x22, x0, x1
 2d8:	cbnz	x0, 378 <__asan_backtrace_vector_grow+0xe0>
 2dc:	lsl	x22, x22, #4
 2e0:	mov	x3, x25
 2e4:	mov	x2, x24
 2e8:	mov	x1, x22
 2ec:	mov	x0, x23
 2f0:	bl	12c <__asan_backtrace_alloc>
 2f4:	mov	x20, x0
 2f8:	cbz	x0, 3ac <__asan_backtrace_vector_grow+0x114>
 2fc:	ldr	x1, [x19]
 300:	cbz	x1, 32c <__asan_backtrace_vector_grow+0x94>
 304:	ldr	x2, [x19, #8]
 308:	bl	0 <__asan_internal_memcpy>
 30c:	ldr	x2, [x19, #8]
 310:	ldr	x0, [x19, #16]
 314:	mov	x4, x25
 318:	mov	x3, x24
 31c:	add	x2, x2, x0
 320:	ldr	x1, [x19]
 324:	mov	x0, x23
 328:	bl	80 <__asan_backtrace_free>
 32c:	str	x20, [x19]
 330:	ldr	x0, [x19, #8]
 334:	sub	x22, x22, x0
 338:	str	x22, [x19, #16]
 33c:	ldr	x25, [sp, #64]
 340:	ldr	x1, [x19, #8]
 344:	ldr	x20, [x19]
 348:	add	x20, x20, x1
 34c:	add	x1, x1, x21
 350:	str	x1, [x19, #8]
 354:	ldr	x1, [x19, #16]
 358:	sub	x21, x1, x21
 35c:	str	x21, [x19, #16]
 360:	mov	x0, x20
 364:	ldp	x19, x20, [sp, #16]
 368:	ldp	x21, x22, [sp, #32]
 36c:	ldp	x23, x24, [sp, #48]
 370:	ldp	x29, x30, [sp], #80
 374:	ret
 378:	bl	0 <getpagesize>
 37c:	sxtw	x1, w0
 380:	cmp	x22, w0, sxtw
 384:	b.cs	398 <__asan_backtrace_vector_grow+0x100>  // b.hs, b.nlast
 388:	lsl	x22, x22, #1
 38c:	cmp	x22, x1
 390:	csel	x22, x22, x1, ls  // ls = plast
 394:	b	2e0 <__asan_backtrace_vector_grow+0x48>
 398:	add	x22, x1, x22, lsl #1
 39c:	sub	x22, x22, #0x1
 3a0:	neg	x1, x1
 3a4:	and	x22, x1, x22
 3a8:	b	2e0 <__asan_backtrace_vector_grow+0x48>
 3ac:	ldr	x25, [sp, #64]
 3b0:	b	360 <__asan_backtrace_vector_grow+0xc8>

00000000000003b4 <__asan_backtrace_vector_finish>:
 3b4:	ldr	x0, [x1]
 3b8:	ldr	x2, [x1, #8]
 3bc:	add	x2, x0, x2
 3c0:	str	x2, [x1]
 3c4:	str	xzr, [x1, #8]
 3c8:	ret

00000000000003cc <__asan_backtrace_vector_release>:
 3cc:	stp	x29, x30, [sp, #-32]!
 3d0:	mov	x29, sp
 3d4:	str	x19, [sp, #16]
 3d8:	mov	x19, x1
 3dc:	ldr	x5, [x1, #8]
 3e0:	add	x1, x5, #0x7
 3e4:	and	x1, x1, #0xfffffffffffffff8
 3e8:	ldr	x4, [x19, #16]
 3ec:	add	x5, x5, x4
 3f0:	ldr	x6, [x19]
 3f4:	mov	x4, x3
 3f8:	mov	x3, x2
 3fc:	sub	x2, x5, x1
 400:	add	x1, x6, x1
 404:	bl	80 <__asan_backtrace_free>
 408:	str	xzr, [x19, #16]
 40c:	ldr	x0, [x19, #8]
 410:	cbnz	x0, 418 <__asan_backtrace_vector_release+0x4c>
 414:	str	xzr, [x19]
 418:	mov	w0, #0x1                   	// #1
 41c:	ldr	x19, [sp, #16]
 420:	ldp	x29, x30, [sp], #32
 424:	ret

mmapio.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_get_view>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	w22, w1
  1c:	mov	x20, x2
  20:	mov	x19, x3
  24:	mov	x23, x4
  28:	mov	x24, x5
  2c:	mov	x21, x6
  30:	bl	0 <getpagesize>
  34:	sxtw	x0, w0
  38:	udiv	x25, x20, x0
  3c:	msub	w25, w25, w0, w20
  40:	sub	x19, x19, #0x1
  44:	add	x3, x0, x25
  48:	add	x19, x19, x3
  4c:	neg	x0, x0
  50:	and	x19, x0, x19
  54:	sub	x5, x20, x25
  58:	mov	w4, w22
  5c:	mov	w3, #0x2                   	// #2
  60:	mov	w2, #0x1                   	// #1
  64:	mov	x1, x19
  68:	mov	x0, #0x0                   	// #0
  6c:	bl	0 <mmap>
  70:	cmn	x0, #0x1
  74:	b.eq	a4 <__asan_backtrace_get_view+0xa4>  // b.none
  78:	add	x25, x0, x25
  7c:	str	x25, [x21]
  80:	str	x0, [x21, #8]
  84:	str	x19, [x21, #16]
  88:	mov	w0, #0x1                   	// #1
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x21, x22, [sp, #32]
  94:	ldp	x23, x24, [sp, #48]
  98:	ldr	x25, [sp, #64]
  9c:	ldp	x29, x30, [sp], #80
  a0:	ret
  a4:	bl	0 <__errno_location>
  a8:	ldr	w2, [x0]
  ac:	adrp	x1, 0 <__asan_backtrace_get_view>
  b0:	add	x1, x1, #0x0
  b4:	mov	x0, x24
  b8:	blr	x23
  bc:	mov	w0, #0x0                   	// #0
  c0:	b	8c <__asan_backtrace_get_view+0x8c>

00000000000000c4 <__asan_backtrace_release_view>:
  c4:	stp	x29, x30, [sp, #-32]!
  c8:	mov	x29, sp
  cc:	stp	x19, x20, [sp, #16]
  d0:	mov	x4, x1
  d4:	mov	x19, x2
  d8:	mov	x20, x3
  dc:	ldr	x1, [x1, #16]
  e0:	ldr	x0, [x4, #8]
  e4:	bl	0 <munmap>
  e8:	tbnz	w0, #31, f8 <__asan_backtrace_release_view+0x34>
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	bl	0 <__errno_location>
  fc:	ldr	w2, [x0]
 100:	adrp	x1, 0 <__asan_backtrace_get_view>
 104:	add	x1, x1, #0x0
 108:	mov	x0, x20
 10c:	blr	x19
 110:	b	ec <__asan_backtrace_release_view+0x28>

posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_open>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x21, x0
  18:	mov	x23, x1
  1c:	mov	x22, x2
  20:	cbz	x3, a0 <__asan_backtrace_open+0xa0>
  24:	mov	x20, x3
  28:	str	wzr, [x3]
  2c:	mov	w1, #0x80000               	// #524288
  30:	bl	0 <open>
  34:	mov	w19, w0
  38:	tbnz	w0, #31, 64 <__asan_backtrace_open+0x64>
  3c:	mov	w2, #0x1                   	// #1
  40:	mov	w1, #0x2                   	// #2
  44:	mov	w0, w19
  48:	bl	0 <fcntl>
  4c:	mov	w0, w19
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldr	x23, [sp, #48]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	bl	0 <__errno_location>
  68:	ldr	w0, [x0]
  6c:	cmp	w0, #0x2
  70:	b.eq	90 <__asan_backtrace_open+0x90>  // b.none
  74:	bl	0 <__errno_location>
  78:	ldr	w2, [x0]
  7c:	mov	x1, x21
  80:	mov	x0, x22
  84:	blr	x23
  88:	mov	w19, #0xffffffff            	// #-1
  8c:	b	4c <__asan_backtrace_open+0x4c>
  90:	mov	w0, #0x1                   	// #1
  94:	str	w0, [x20]
  98:	mov	w19, #0xffffffff            	// #-1
  9c:	b	4c <__asan_backtrace_open+0x4c>
  a0:	mov	w1, #0x80000               	// #524288
  a4:	bl	0 <open>
  a8:	mov	w19, w0
  ac:	tbz	w0, #31, 3c <__asan_backtrace_open+0x3c>
  b0:	b	74 <__asan_backtrace_open+0x74>

00000000000000b4 <__asan_backtrace_close>:
  b4:	stp	x29, x30, [sp, #-32]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x19, x1
  c4:	mov	x20, x2
  c8:	bl	0 <close>
  cc:	tbnz	w0, #31, e0 <__asan_backtrace_close+0x2c>
  d0:	mov	w0, #0x1                   	// #1
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret
  e0:	bl	0 <__errno_location>
  e4:	ldr	w2, [x0]
  e8:	adrp	x1, 0 <__asan_backtrace_open>
  ec:	add	x1, x1, #0x0
  f0:	mov	x0, x20
  f4:	blr	x19
  f8:	mov	w0, #0x0                   	// #0
  fc:	b	d4 <__asan_backtrace_close+0x20>

sort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <swap>:
   0:	cbz	x2, 24 <swap+0x24>
   4:	mov	x3, #0x0                   	// #0
   8:	ldrb	w4, [x0, x3]
   c:	ldrb	w5, [x1, x3]
  10:	strb	w5, [x0, x3]
  14:	strb	w4, [x1, x3]
  18:	add	x3, x3, #0x1
  1c:	cmp	x2, x3
  20:	b.ne	8 <swap+0x8>  // b.any
  24:	ret

0000000000000028 <__asan_backtrace_qsort>:
  28:	stp	x29, x30, [sp, #-80]!
  2c:	mov	x29, sp
  30:	stp	x21, x22, [sp, #32]
  34:	stp	x23, x24, [sp, #48]
  38:	stp	x25, x26, [sp, #64]
  3c:	mov	x23, x0
  40:	mov	x24, x1
  44:	mov	x22, x2
  48:	mov	x26, x3
  4c:	cmp	x1, #0x1
  50:	b.ls	144 <__asan_backtrace_qsort+0x11c>  // b.plast
  54:	stp	x19, x20, [sp, #16]
  58:	b	114 <__asan_backtrace_qsort+0xec>
  5c:	mov	x2, x22
  60:	mov	x1, x19
  64:	madd	x0, x22, x21, x23
  68:	bl	0 <swap>
  6c:	add	x20, x20, #0x1
  70:	add	x19, x19, x22
  74:	cmp	x20, x24
  78:	b.eq	e4 <__asan_backtrace_qsort+0xbc>  // b.none
  7c:	mov	x1, x19
  80:	mov	x0, x23
  84:	blr	x26
  88:	cmp	w0, #0x0
  8c:	b.le	6c <__asan_backtrace_qsort+0x44>
  90:	add	x21, x21, #0x1
  94:	cmp	x21, x20
  98:	b.eq	6c <__asan_backtrace_qsort+0x44>  // b.none
  9c:	b	5c <__asan_backtrace_qsort+0x34>
  a0:	mov	x2, x22
  a4:	madd	x1, x21, x22, x23
  a8:	mov	x0, x23
  ac:	bl	0 <swap>
  b0:	cmp	x24, x21, lsl #1
  b4:	b.hi	e8 <__asan_backtrace_qsort+0xc0>  // b.pmore
  b8:	sub	x1, x24, #0x1
  bc:	madd	x0, x21, x22, x22
  c0:	mov	x3, x26
  c4:	mov	x2, x22
  c8:	sub	x1, x1, x21
  cc:	add	x0, x23, x0
  d0:	bl	28 <__asan_backtrace_qsort>
  d4:	mov	x24, x21
  d8:	b	10c <__asan_backtrace_qsort+0xe4>
  dc:	mov	x21, #0x0                   	// #0
  e0:	b	b0 <__asan_backtrace_qsort+0x88>
  e4:	cbnz	x21, a0 <__asan_backtrace_qsort+0x78>
  e8:	mov	x3, x26
  ec:	mov	x2, x22
  f0:	mov	x1, x21
  f4:	mov	x0, x23
  f8:	bl	28 <__asan_backtrace_qsort>
  fc:	madd	x0, x21, x22, x22
 100:	add	x23, x23, x0
 104:	sub	x24, x24, #0x1
 108:	sub	x24, x24, x21
 10c:	cmp	x24, #0x1
 110:	b.ls	140 <__asan_backtrace_qsort+0x118>  // b.plast
 114:	lsr	x1, x24, #1
 118:	mov	x2, x22
 11c:	madd	x1, x1, x22, x23
 120:	mov	x0, x23
 124:	bl	0 <swap>
 128:	cmp	x24, #0x1
 12c:	b.ls	dc <__asan_backtrace_qsort+0xb4>  // b.plast
 130:	add	x19, x23, x22
 134:	mov	x21, #0x0                   	// #0
 138:	mov	x20, #0x1                   	// #1
 13c:	b	7c <__asan_backtrace_qsort+0x54>
 140:	ldp	x19, x20, [sp, #16]
 144:	ldp	x21, x22, [sp, #32]
 148:	ldp	x23, x24, [sp, #48]
 14c:	ldp	x25, x26, [sp, #64]
 150:	ldp	x29, x30, [sp], #80
 154:	ret

state.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_create_state>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x23, x0
  18:	mov	w22, w1
  1c:	mov	x20, x2
  20:	mov	x21, x3
  24:	add	x19, sp, #0x48
  28:	mov	x2, #0x48                  	// #72
  2c:	mov	w1, #0x0                   	// #0
  30:	mov	x0, x19
  34:	bl	0 <__asan_internal_memset>
  38:	str	x23, [sp, #72]
  3c:	str	w22, [sp, #80]
  40:	mov	x3, x21
  44:	mov	x2, x20
  48:	mov	x1, #0x48                  	// #72
  4c:	mov	x0, x19
  50:	bl	0 <__asan_backtrace_alloc>
  54:	cbz	x0, 80 <__asan_backtrace_create_state+0x80>
  58:	ldp	x2, x3, [sp, #72]
  5c:	stp	x2, x3, [x0]
  60:	ldp	x2, x3, [sp, #88]
  64:	stp	x2, x3, [x0, #16]
  68:	ldp	x2, x3, [sp, #104]
  6c:	stp	x2, x3, [x0, #32]
  70:	ldp	x2, x3, [sp, #120]
  74:	stp	x2, x3, [x0, #48]
  78:	ldr	x1, [sp, #136]
  7c:	str	x1, [x0, #64]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldr	x23, [sp, #48]
  8c:	ldp	x29, x30, [sp], #144
  90:	ret
