In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_clang_-Os:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	ubfx	x8, x0, #16, #16
   4:	cmp	x2, #0x1
   8:	and	x9, x0, #0xffff
   c:	b.ne	50 <adler32_z+0x50>  // b.any
  10:	ldrb	w10, [x1]
  14:	mov	x11, #0xffffffffffff000f    	// #-65521
  18:	mov	w12, #0xfff0                	// #65520
  1c:	mov	x13, #0xffffffffffff0000    	// #-65536
  20:	add	x9, x9, x10
  24:	add	x10, x9, x11
  28:	cmp	x9, x12
  2c:	csel	x9, x10, x9, hi  // hi = pmore
  30:	movk	x13, #0xf, lsl #16
  34:	add	x8, x9, x8
  38:	lsl	x10, x8, #16
  3c:	add	x11, x13, x8, lsl #16
  40:	cmp	x8, x12
  44:	csel	x8, x11, x10, hi  // hi = pmore
  48:	orr	x0, x8, x9
  4c:	ret
  50:	cbz	x1, b0 <adler32_z+0xb0>
  54:	cmp	x2, #0x10
  58:	b.cs	b8 <adler32_z+0xb8>  // b.hs, b.nlast
  5c:	cbz	x2, 74 <adler32_z+0x74>
  60:	ldrb	w10, [x1], #1
  64:	subs	x2, x2, #0x1
  68:	add	x9, x9, x10
  6c:	add	x8, x9, x8
  70:	b.ne	60 <adler32_z+0x60>  // b.any
  74:	mov	x12, #0xc5cd                	// #50637
  78:	movk	x12, #0xd2f, lsl #16
  7c:	movk	x12, #0xe1, lsl #32
  80:	mov	x10, #0xffffffffffff000f    	// #-65521
  84:	mov	w11, #0xfff0                	// #65520
  88:	movk	x12, #0xf, lsl #48
  8c:	add	x10, x9, x10
  90:	cmp	x9, x11
  94:	umulh	x11, x8, x12
  98:	csel	x9, x10, x9, hi  // hi = pmore
  9c:	sub	x10, x8, x11
  a0:	add	x10, x11, x10, lsr #1
  a4:	lsr	x10, x10, #15
  a8:	mov	w11, #0xfff1                	// #65521
  ac:	b	334 <adler32_z+0x334>
  b0:	mov	w0, #0x1                   	// #1
  b4:	ret
  b8:	lsr	x10, x2, #4
  bc:	cmp	x10, #0x15b
  c0:	b.cc	1fc <adler32_z+0x1fc>  // b.lo, b.ul, b.last
  c4:	mov	x12, #0xc5cd                	// #50637
  c8:	movk	x12, #0xd2f, lsl #16
  cc:	movk	x12, #0xe1, lsl #32
  d0:	mov	x10, #0xffffffffffffea50    	// #-5552
  d4:	mov	w11, #0x15b0                	// #5552
  d8:	movk	x12, #0xf, lsl #48
  dc:	mov	w13, #0xfff1                	// #65521
  e0:	add	x2, x2, x10
  e4:	mov	w14, #0xfffffea5            	// #-347
  e8:	mov	x15, x1
  ec:	ldrb	w16, [x15]
  f0:	ldrb	w17, [x15, #1]
  f4:	adds	w14, w14, #0x1
  f8:	add	x9, x9, x16
  fc:	ldrb	w16, [x15, #2]
 100:	add	x8, x9, x8
 104:	add	x9, x9, x17
 108:	ldrb	w17, [x15, #3]
 10c:	add	x8, x8, x9
 110:	add	x9, x9, x16
 114:	ldrb	w16, [x15, #4]
 118:	add	x8, x8, x9
 11c:	add	x9, x9, x17
 120:	ldrb	w17, [x15, #5]
 124:	add	x8, x8, x9
 128:	add	x9, x9, x16
 12c:	ldrb	w16, [x15, #6]
 130:	add	x8, x8, x9
 134:	add	x9, x9, x17
 138:	ldrb	w17, [x15, #7]
 13c:	add	x8, x8, x9
 140:	add	x9, x9, x16
 144:	ldrb	w16, [x15, #8]
 148:	add	x8, x8, x9
 14c:	add	x9, x9, x17
 150:	ldrb	w17, [x15, #9]
 154:	add	x8, x8, x9
 158:	add	x9, x9, x16
 15c:	ldrb	w16, [x15, #10]
 160:	add	x8, x8, x9
 164:	add	x9, x9, x17
 168:	ldrb	w17, [x15, #11]
 16c:	add	x8, x8, x9
 170:	add	x9, x9, x16
 174:	ldrb	w16, [x15, #12]
 178:	add	x8, x8, x9
 17c:	add	x9, x9, x17
 180:	ldrb	w17, [x15, #13]
 184:	add	x8, x8, x9
 188:	add	x9, x9, x16
 18c:	ldrb	w16, [x15, #14]
 190:	add	x8, x8, x9
 194:	add	x9, x9, x17
 198:	ldrb	w17, [x15, #15]
 19c:	add	x8, x8, x9
 1a0:	add	x9, x9, x16
 1a4:	add	x8, x8, x9
 1a8:	add	x9, x9, x17
 1ac:	add	x8, x8, x9
 1b0:	add	x15, x15, #0x10
 1b4:	b.cc	ec <adler32_z+0xec>  // b.lo, b.ul, b.last
 1b8:	umulh	x14, x9, x12
 1bc:	umulh	x15, x8, x12
 1c0:	sub	x17, x9, x14
 1c4:	sub	x18, x8, x15
 1c8:	add	x14, x14, x17, lsr #1
 1cc:	add	x15, x15, x18, lsr #1
 1d0:	lsr	x16, x2, #4
 1d4:	lsr	x14, x14, #15
 1d8:	lsr	x15, x15, #15
 1dc:	add	x1, x1, x11
 1e0:	cmp	x16, #0x15a
 1e4:	msub	x9, x14, x13, x9
 1e8:	msub	x8, x15, x13, x8
 1ec:	b.hi	e0 <adler32_z+0xe0>  // b.pmore
 1f0:	cbz	x2, 338 <adler32_z+0x338>
 1f4:	cmp	x2, #0x10
 1f8:	b.cc	2e8 <adler32_z+0x2e8>  // b.lo, b.ul, b.last
 1fc:	sub	x11, x2, #0x10
 200:	and	x12, x11, #0xfffffffffffffff0
 204:	add	x10, x12, #0x10
 208:	mov	x13, x1
 20c:	ldrb	w14, [x13]
 210:	ldrb	w15, [x13, #1]
 214:	sub	x2, x2, #0x10
 218:	cmp	x2, #0xf
 21c:	add	x9, x9, x14
 220:	ldrb	w14, [x13, #2]
 224:	add	x8, x9, x8
 228:	add	x9, x9, x15
 22c:	ldrb	w15, [x13, #3]
 230:	add	x8, x8, x9
 234:	add	x9, x9, x14
 238:	ldrb	w14, [x13, #4]
 23c:	add	x8, x8, x9
 240:	add	x9, x9, x15
 244:	ldrb	w15, [x13, #5]
 248:	add	x8, x8, x9
 24c:	add	x9, x9, x14
 250:	ldrb	w14, [x13, #6]
 254:	add	x8, x8, x9
 258:	add	x9, x9, x15
 25c:	ldrb	w15, [x13, #7]
 260:	add	x8, x8, x9
 264:	add	x9, x9, x14
 268:	ldrb	w14, [x13, #8]
 26c:	add	x8, x8, x9
 270:	add	x9, x9, x15
 274:	ldrb	w15, [x13, #9]
 278:	add	x8, x8, x9
 27c:	add	x9, x9, x14
 280:	ldrb	w14, [x13, #10]
 284:	add	x8, x8, x9
 288:	add	x9, x9, x15
 28c:	ldrb	w15, [x13, #11]
 290:	add	x8, x8, x9
 294:	add	x9, x9, x14
 298:	ldrb	w14, [x13, #12]
 29c:	add	x8, x8, x9
 2a0:	add	x9, x9, x15
 2a4:	ldrb	w15, [x13, #13]
 2a8:	add	x8, x8, x9
 2ac:	add	x9, x9, x14
 2b0:	ldrb	w14, [x13, #14]
 2b4:	add	x8, x8, x9
 2b8:	add	x9, x9, x15
 2bc:	add	x8, x8, x9
 2c0:	add	x9, x9, x14
 2c4:	ldrb	w14, [x13, #15]
 2c8:	add	x8, x8, x9
 2cc:	add	x13, x13, #0x10
 2d0:	add	x9, x9, x14
 2d4:	add	x8, x8, x9
 2d8:	b.hi	20c <adler32_z+0x20c>  // b.pmore
 2dc:	subs	x2, x11, x12
 2e0:	b.eq	2fc <adler32_z+0x2fc>  // b.none
 2e4:	add	x1, x1, x10
 2e8:	ldrb	w10, [x1], #1
 2ec:	subs	x2, x2, #0x1
 2f0:	add	x9, x9, x10
 2f4:	add	x8, x9, x8
 2f8:	b.ne	2e8 <adler32_z+0x2e8>  // b.any
 2fc:	mov	x10, #0xc5cd                	// #50637
 300:	movk	x10, #0xd2f, lsl #16
 304:	movk	x10, #0xe1, lsl #32
 308:	movk	x10, #0xf, lsl #48
 30c:	umulh	x12, x9, x10
 310:	umulh	x10, x8, x10
 314:	sub	x13, x9, x12
 318:	sub	x14, x8, x10
 31c:	add	x12, x12, x13, lsr #1
 320:	mov	w11, #0xfff1                	// #65521
 324:	add	x10, x10, x14, lsr #1
 328:	lsr	x12, x12, #15
 32c:	lsr	x10, x10, #15
 330:	msub	x9, x12, x11, x9
 334:	msub	x8, x10, x11, x8
 338:	orr	x0, x9, x8, lsl #16
 33c:	ret

0000000000000340 <adler32>:
 340:	mov	w2, w2
 344:	b	0 <adler32_z>

0000000000000348 <adler32_combine>:
 348:	b	34c <adler32_combine_>

000000000000034c <adler32_combine_>:
 34c:	tbnz	x2, #63, 408 <adler32_combine_+0xbc>
 350:	mov	x8, #0xc5cd                	// #50637
 354:	movk	x8, #0xd2f, lsl #16
 358:	movk	x8, #0xe1, lsl #32
 35c:	movk	x8, #0xf, lsl #48
 360:	and	x10, x0, #0xffff
 364:	ubfx	x12, x0, #16, #16
 368:	lsr	x13, x1, #16
 36c:	umulh	x8, x2, x8
 370:	mov	w11, #0xfff0                	// #65520
 374:	add	x14, x10, w1, uxth
 378:	add	x12, x12, w13, uxth
 37c:	sub	x13, x2, x8
 380:	add	x8, x8, x13, lsr #1
 384:	add	x13, x14, x11
 388:	mov	w9, #0xfff1                	// #65521
 38c:	sub	x14, x14, #0x1
 390:	cmp	x13, x11
 394:	lsr	x8, x8, #15
 398:	csel	x13, x14, x13, hi  // hi = pmore
 39c:	mov	w14, #0x8071                	// #32881
 3a0:	msub	x8, x8, x9, x2
 3a4:	movk	w14, #0x8007, lsl #16
 3a8:	mul	x10, x8, x10
 3ac:	mul	x14, x10, x14
 3b0:	mov	x15, #0xffffffffffff000f    	// #-65521
 3b4:	lsr	x14, x14, #47
 3b8:	sub	x8, x12, x8
 3bc:	add	x12, x13, x15
 3c0:	cmp	x13, x11
 3c4:	msub	w10, w14, w9, w10
 3c8:	csel	x12, x12, x13, hi  // hi = pmore
 3cc:	mov	w13, #0xffe1                	// #65505
 3d0:	add	x8, x8, x10
 3d4:	movk	w13, #0x1, lsl #16
 3d8:	add	x9, x8, x9
 3dc:	mov	x14, #0xffffffffffff0000    	// #-65536
 3e0:	add	x8, x8, x15
 3e4:	cmp	x9, x13
 3e8:	movk	x14, #0xf, lsl #16
 3ec:	csel	x8, x8, x9, hi  // hi = pmore
 3f0:	lsl	x9, x8, #16
 3f4:	add	x10, x14, x8, lsl #16
 3f8:	cmp	x8, x11
 3fc:	csel	x8, x10, x9, hi  // hi = pmore
 400:	orr	x0, x8, x12
 404:	ret
 408:	mov	w0, #0xffffffff            	// #-1
 40c:	ret

0000000000000410 <adler32_combine64>:
 410:	b	34c <adler32_combine_>

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	cbz	x1, 29c <crc32_z+0x290>
  10:	adrp	x8, 0 <get_crc_table>
  14:	mvn	w9, w0
  18:	add	x8, x8, #0x0
  1c:	cbz	x2, 44 <crc32_z+0x38>
  20:	and	x10, x1, #0x3
  24:	cbz	x10, 44 <crc32_z+0x38>
  28:	ldrb	w10, [x1], #1
  2c:	and	w11, w9, #0xff
  30:	subs	x2, x2, #0x1
  34:	eor	w10, w11, w10
  38:	ldr	w10, [x8, w10, uxtw #2]
  3c:	eor	w9, w10, w9, lsr #8
  40:	b.ne	20 <crc32_z+0x14>  // b.any
  44:	subs	x10, x2, #0x20
  48:	b.cc	20c <crc32_z+0x200>  // b.lo, b.ul, b.last
  4c:	and	x12, x10, #0xffffffffffffffe0
  50:	add	x11, x12, x1
  54:	add	x11, x11, #0x20
  58:	ldp	w16, w17, [x1]
  5c:	add	x13, x8, #0xc00
  60:	add	x14, x8, #0x800
  64:	add	x15, x8, #0x400
  68:	eor	w9, w16, w9
  6c:	and	w16, w9, #0xff
  70:	ubfx	w18, w9, #8, #8
  74:	ubfx	w0, w9, #16, #8
  78:	ldr	w16, [x13, w16, uxtw #2]
  7c:	ldr	w18, [x14, w18, uxtw #2]
  80:	lsr	w9, w9, #24
  84:	ldr	w0, [x15, w0, uxtw #2]
  88:	ldr	w9, [x8, w9, uxtw #2]
  8c:	eor	w16, w18, w16
  90:	sub	x2, x2, #0x20
  94:	eor	w16, w16, w0
  98:	eor	w9, w16, w9
  9c:	eor	w9, w9, w17
  a0:	and	w16, w9, #0xff
  a4:	ubfx	w17, w9, #8, #8
  a8:	ldr	w16, [x13, w16, uxtw #2]
  ac:	ldr	w17, [x14, w17, uxtw #2]
  b0:	ubfx	w18, w9, #16, #8
  b4:	lsr	w9, w9, #24
  b8:	ldr	w18, [x15, w18, uxtw #2]
  bc:	ldr	w9, [x8, w9, uxtw #2]
  c0:	eor	w16, w17, w16
  c4:	ldp	w17, w0, [x1, #8]
  c8:	eor	w16, w16, w18
  cc:	eor	w9, w16, w9
  d0:	cmp	x2, #0x1f
  d4:	eor	w9, w9, w17
  d8:	and	w16, w9, #0xff
  dc:	ubfx	w17, w9, #8, #8
  e0:	ubfx	w18, w9, #16, #8
  e4:	ldr	w16, [x13, w16, uxtw #2]
  e8:	ldr	w17, [x14, w17, uxtw #2]
  ec:	lsr	w9, w9, #24
  f0:	ldr	w18, [x15, w18, uxtw #2]
  f4:	ldr	w9, [x8, w9, uxtw #2]
  f8:	eor	w16, w17, w16
  fc:	eor	w16, w16, w18
 100:	eor	w9, w16, w9
 104:	eor	w9, w9, w0
 108:	and	w16, w9, #0xff
 10c:	ubfx	w17, w9, #8, #8
 110:	ldr	w16, [x13, w16, uxtw #2]
 114:	ldr	w17, [x14, w17, uxtw #2]
 118:	ubfx	w18, w9, #16, #8
 11c:	lsr	w9, w9, #24
 120:	ldr	w18, [x15, w18, uxtw #2]
 124:	ldr	w9, [x8, w9, uxtw #2]
 128:	eor	w16, w17, w16
 12c:	ldp	w17, w0, [x1, #16]
 130:	eor	w16, w16, w18
 134:	eor	w9, w16, w9
 138:	eor	w9, w9, w17
 13c:	and	w16, w9, #0xff
 140:	ubfx	w17, w9, #8, #8
 144:	ubfx	w18, w9, #16, #8
 148:	ldr	w16, [x13, w16, uxtw #2]
 14c:	ldr	w17, [x14, w17, uxtw #2]
 150:	lsr	w9, w9, #24
 154:	ldr	w18, [x15, w18, uxtw #2]
 158:	ldr	w9, [x8, w9, uxtw #2]
 15c:	eor	w16, w17, w16
 160:	eor	w16, w16, w18
 164:	eor	w9, w16, w9
 168:	eor	w9, w9, w0
 16c:	and	w16, w9, #0xff
 170:	ubfx	w17, w9, #8, #8
 174:	ldr	w16, [x13, w16, uxtw #2]
 178:	ldr	w17, [x14, w17, uxtw #2]
 17c:	ubfx	w18, w9, #16, #8
 180:	lsr	w9, w9, #24
 184:	ldr	w18, [x15, w18, uxtw #2]
 188:	ldr	w9, [x8, w9, uxtw #2]
 18c:	eor	w16, w17, w16
 190:	ldp	w17, w0, [x1, #24]
 194:	eor	w16, w16, w18
 198:	eor	w9, w16, w9
 19c:	add	x1, x1, #0x20
 1a0:	eor	w9, w9, w17
 1a4:	and	w16, w9, #0xff
 1a8:	ubfx	w17, w9, #8, #8
 1ac:	ubfx	w18, w9, #16, #8
 1b0:	ldr	w16, [x13, w16, uxtw #2]
 1b4:	ldr	w17, [x14, w17, uxtw #2]
 1b8:	ldr	w18, [x15, w18, uxtw #2]
 1bc:	lsr	w9, w9, #24
 1c0:	ldr	w9, [x8, w9, uxtw #2]
 1c4:	eor	w16, w17, w16
 1c8:	eor	w16, w16, w18
 1cc:	eor	w9, w16, w9
 1d0:	eor	w9, w9, w0
 1d4:	and	w16, w9, #0xff
 1d8:	ubfx	w17, w9, #8, #8
 1dc:	ldr	w13, [x13, w16, uxtw #2]
 1e0:	ubfx	w16, w9, #16, #8
 1e4:	ldr	w14, [x14, w17, uxtw #2]
 1e8:	lsr	w9, w9, #24
 1ec:	ldr	w15, [x15, w16, uxtw #2]
 1f0:	ldr	w9, [x8, w9, uxtw #2]
 1f4:	eor	w13, w14, w13
 1f8:	eor	w13, w13, w15
 1fc:	eor	w9, w13, w9
 200:	b.hi	58 <crc32_z+0x4c>  // b.pmore
 204:	sub	x2, x10, x12
 208:	mov	x1, x11
 20c:	subs	x10, x2, #0x4
 210:	b.cc	274 <crc32_z+0x268>  // b.lo, b.ul, b.last
 214:	lsr	x11, x10, #2
 218:	mov	x12, x1
 21c:	ldr	w13, [x12], #4
 220:	sub	x2, x2, #0x4
 224:	cmp	x2, #0x3
 228:	eor	w9, w13, w9
 22c:	and	w13, w9, #0xff
 230:	ubfx	w14, w9, #8, #8
 234:	add	x13, x8, w13, uxtw #2
 238:	add	x14, x8, w14, uxtw #2
 23c:	ldr	w13, [x13, #3072]
 240:	ldr	w14, [x14, #2048]
 244:	eor	w13, w14, w13
 248:	ubfx	w14, w9, #16, #8
 24c:	add	x14, x8, w14, uxtw #2
 250:	ldr	w14, [x14, #1024]
 254:	lsr	w9, w9, #24
 258:	ldr	w9, [x8, w9, uxtw #2]
 25c:	eor	w13, w13, w14
 260:	eor	w9, w13, w9
 264:	b.hi	21c <crc32_z+0x210>  // b.pmore
 268:	add	x11, x1, x11, lsl #2
 26c:	add	x1, x11, #0x4
 270:	and	x2, x10, #0x3
 274:	cbz	x2, 294 <crc32_z+0x288>
 278:	ldrb	w10, [x1], #1
 27c:	and	w11, w9, #0xff
 280:	subs	x2, x2, #0x1
 284:	eor	w10, w11, w10
 288:	ldr	w10, [x8, w10, uxtw #2]
 28c:	eor	w9, w10, w9, lsr #8
 290:	b.ne	278 <crc32_z+0x26c>  // b.any
 294:	mvn	w0, w9
 298:	ret
 29c:	mov	x0, xzr
 2a0:	ret

00000000000002a4 <crc32>:
 2a4:	mov	w2, w2
 2a8:	b	c <crc32_z>

00000000000002ac <crc32_combine>:
 2ac:	b	2b0 <crc32_combine_>

00000000000002b0 <crc32_combine_>:
 2b0:	str	x29, [sp, #-16]!
 2b4:	sub	sp, sp, #0x200
 2b8:	cmp	x2, #0x1
 2bc:	b.lt	490 <crc32_combine_+0x1e0>  // b.tstop
 2c0:	mov	w10, #0x8320                	// #33568
 2c4:	movk	w10, #0xedb8, lsl #16
 2c8:	mov	w8, #0x1                   	// #1
 2cc:	mov	w9, #0x8                   	// #8
 2d0:	str	x10, [sp]
 2d4:	mov	x10, sp
 2d8:	str	x8, [x10, x9]
 2dc:	add	x9, x9, #0x8
 2e0:	cmp	x9, #0x100
 2e4:	lsl	x8, x8, #1
 2e8:	b.ne	2d8 <crc32_combine_+0x28>  // b.any
 2ec:	mov	x8, xzr
 2f0:	mov	x9, sp
 2f4:	add	x10, sp, #0x100
 2f8:	ldr	x12, [x9, x8, lsl #3]
 2fc:	cbz	x12, 324 <crc32_combine_+0x74>
 300:	mov	x11, xzr
 304:	mov	x13, sp
 308:	tbz	w12, #0, 314 <crc32_combine_+0x64>
 30c:	ldr	x14, [x13]
 310:	eor	x11, x14, x11
 314:	lsr	x12, x12, #1
 318:	add	x13, x13, #0x8
 31c:	cbnz	x12, 308 <crc32_combine_+0x58>
 320:	b	328 <crc32_combine_+0x78>
 324:	mov	x11, xzr
 328:	str	x11, [x10, x8, lsl #3]
 32c:	add	x8, x8, #0x1
 330:	cmp	x8, #0x20
 334:	b.ne	2f8 <crc32_combine_+0x48>  // b.any
 338:	mov	x8, xzr
 33c:	add	x9, sp, #0x100
 340:	mov	x10, sp
 344:	ldr	x12, [x9, x8, lsl #3]
 348:	cbz	x12, 370 <crc32_combine_+0xc0>
 34c:	mov	x11, xzr
 350:	add	x13, sp, #0x100
 354:	tbz	w12, #0, 360 <crc32_combine_+0xb0>
 358:	ldr	x14, [x13]
 35c:	eor	x11, x14, x11
 360:	lsr	x12, x12, #1
 364:	add	x13, x13, #0x8
 368:	cbnz	x12, 354 <crc32_combine_+0xa4>
 36c:	b	374 <crc32_combine_+0xc4>
 370:	mov	x11, xzr
 374:	str	x11, [x10, x8, lsl #3]
 378:	add	x8, x8, #0x1
 37c:	cmp	x8, #0x20
 380:	b.ne	344 <crc32_combine_+0x94>  // b.any
 384:	mov	x8, sp
 388:	add	x9, sp, #0x100
 38c:	mov	x10, xzr
 390:	ldr	x12, [x8, x10, lsl #3]
 394:	cbz	x12, 3bc <crc32_combine_+0x10c>
 398:	mov	x11, xzr
 39c:	mov	x13, sp
 3a0:	tbz	w12, #0, 3ac <crc32_combine_+0xfc>
 3a4:	ldr	x14, [x13]
 3a8:	eor	x11, x14, x11
 3ac:	lsr	x12, x12, #1
 3b0:	add	x13, x13, #0x8
 3b4:	cbnz	x12, 3a0 <crc32_combine_+0xf0>
 3b8:	b	3c0 <crc32_combine_+0x110>
 3bc:	mov	x11, xzr
 3c0:	str	x11, [x9, x10, lsl #3]
 3c4:	add	x10, x10, #0x1
 3c8:	cmp	x10, #0x20
 3cc:	b.ne	390 <crc32_combine_+0xe0>  // b.any
 3d0:	tbnz	w2, #0, 3dc <crc32_combine_+0x12c>
 3d4:	mov	x10, x0
 3d8:	b	400 <crc32_combine_+0x150>
 3dc:	mov	x10, xzr
 3e0:	cbz	x0, 400 <crc32_combine_+0x150>
 3e4:	add	x11, sp, #0x100
 3e8:	tbz	w0, #0, 3f4 <crc32_combine_+0x144>
 3ec:	ldr	x12, [x11]
 3f0:	eor	x10, x12, x10
 3f4:	lsr	x0, x0, #1
 3f8:	add	x11, x11, #0x8
 3fc:	cbnz	x0, 3e8 <crc32_combine_+0x138>
 400:	cmp	x2, #0x2
 404:	b.cc	488 <crc32_combine_+0x1d8>  // b.lo, b.ul, b.last
 408:	mov	x11, xzr
 40c:	ldr	x13, [x9, x11, lsl #3]
 410:	cbz	x13, 438 <crc32_combine_+0x188>
 414:	mov	x12, xzr
 418:	add	x14, sp, #0x100
 41c:	tbz	w13, #0, 428 <crc32_combine_+0x178>
 420:	ldr	x15, [x14]
 424:	eor	x12, x15, x12
 428:	lsr	x13, x13, #1
 42c:	add	x14, x14, #0x8
 430:	cbnz	x13, 41c <crc32_combine_+0x16c>
 434:	b	43c <crc32_combine_+0x18c>
 438:	mov	x12, xzr
 43c:	str	x12, [x8, x11, lsl #3]
 440:	add	x11, x11, #0x1
 444:	cmp	x11, #0x20
 448:	b.ne	40c <crc32_combine_+0x15c>  // b.any
 44c:	tbnz	w2, #1, 458 <crc32_combine_+0x1a8>
 450:	mov	x0, x10
 454:	b	47c <crc32_combine_+0x1cc>
 458:	mov	x0, xzr
 45c:	cbz	x10, 47c <crc32_combine_+0x1cc>
 460:	mov	x11, sp
 464:	tbz	w10, #0, 470 <crc32_combine_+0x1c0>
 468:	ldr	x12, [x11]
 46c:	eor	x0, x12, x0
 470:	lsr	x10, x10, #1
 474:	add	x11, x11, #0x8
 478:	cbnz	x10, 464 <crc32_combine_+0x1b4>
 47c:	asr	x2, x2, #2
 480:	cbnz	x2, 38c <crc32_combine_+0xdc>
 484:	b	48c <crc32_combine_+0x1dc>
 488:	mov	x0, x10
 48c:	eor	x0, x0, x1
 490:	add	sp, sp, #0x200
 494:	ldr	x29, [sp], #16
 498:	ret

000000000000049c <crc32_combine64>:
 49c:	b	2b0 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <deflateInit_>:
       0:	mov	w7, w3
       4:	mov	x6, x2
       8:	mov	w2, #0x8                   	// #8
       c:	mov	w3, #0xf                   	// #15
      10:	mov	w4, #0x8                   	// #8
      14:	mov	w5, wzr
      18:	b	1c <deflateInit2_>

000000000000001c <deflateInit2_>:
      1c:	stp	x29, x30, [sp, #-80]!
      20:	stp	x26, x25, [sp, #16]
      24:	stp	x24, x23, [sp, #32]
      28:	stp	x22, x21, [sp, #48]
      2c:	stp	x20, x19, [sp, #64]
      30:	mov	x29, sp
      34:	cbz	x6, b8 <deflateInit2_+0x9c>
      38:	mov	x19, x0
      3c:	cmp	w7, #0x70
      40:	mov	w0, #0xfffffffa            	// #-6
      44:	b.ne	27c <deflateInit2_+0x260>  // b.any
      48:	ldrb	w8, [x6]
      4c:	cmp	w8, #0x31
      50:	b.ne	27c <deflateInit2_+0x260>  // b.any
      54:	cbz	x19, 10c <deflateInit2_+0xf0>
      58:	ldr	x8, [x19, #64]
      5c:	mov	w20, w5
      60:	mov	w21, w4
      64:	str	xzr, [x19, #48]
      68:	cbnz	x8, 7c <deflateInit2_+0x60>
      6c:	adrp	x8, 0 <zcalloc>
      70:	add	x8, x8, #0x0
      74:	str	x8, [x19, #64]
      78:	str	xzr, [x19, #80]
      7c:	ldr	x9, [x19, #72]
      80:	cbnz	x9, 90 <deflateInit2_+0x74>
      84:	adrp	x9, 0 <zcfree>
      88:	add	x9, x9, #0x0
      8c:	str	x9, [x19, #72]
      90:	cmn	w1, #0x1
      94:	mov	w9, #0x6                   	// #6
      98:	csel	w23, w9, w1, eq  // eq = none
      9c:	tbnz	w3, #31, c0 <deflateInit2_+0xa4>
      a0:	sub	w9, w3, #0x10
      a4:	cmp	w3, #0xf
      a8:	mov	w10, #0x1                   	// #1
      ac:	csel	w9, w9, w3, gt
      b0:	cinc	w25, w10, gt
      b4:	b	c8 <deflateInit2_+0xac>
      b8:	mov	w0, #0xfffffffa            	// #-6
      bc:	b	27c <deflateInit2_+0x260>
      c0:	mov	w25, wzr
      c4:	neg	w9, w3
      c8:	cmp	w20, #0x4
      cc:	mov	w0, #0xfffffffe            	// #-2
      d0:	b.hi	27c <deflateInit2_+0x260>  // b.pmore
      d4:	cmp	w23, #0x9
      d8:	b.hi	27c <deflateInit2_+0x260>  // b.pmore
      dc:	cmp	w2, #0x8
      e0:	b.ne	27c <deflateInit2_+0x260>  // b.any
      e4:	sub	w10, w21, #0x1
      e8:	cmp	w10, #0x8
      ec:	b.hi	27c <deflateInit2_+0x260>  // b.pmore
      f0:	and	w10, w9, #0xfffffff8
      f4:	cmp	w10, #0x8
      f8:	b.ne	27c <deflateInit2_+0x260>  // b.any
      fc:	cmp	w9, #0x8
     100:	b.ne	114 <deflateInit2_+0xf8>  // b.any
     104:	cmp	w25, #0x1
     108:	b.eq	114 <deflateInit2_+0xf8>  // b.none
     10c:	mov	w0, #0xfffffffe            	// #-2
     110:	b	27c <deflateInit2_+0x260>
     114:	ldr	x0, [x19, #80]
     118:	cmp	w9, #0x8
     11c:	mov	w10, #0x9                   	// #9
     120:	mov	w1, #0x1                   	// #1
     124:	mov	w2, #0x1740                	// #5952
     128:	csel	w26, w10, w9, eq  // eq = none
     12c:	mov	w24, #0x1                   	// #1
     130:	blr	x8
     134:	cbz	x0, 278 <deflateInit2_+0x25c>
     138:	mov	w8, #0x2a                  	// #42
     13c:	lsl	w1, w24, w26
     140:	str	x0, [x19, #56]
     144:	str	w8, [x0, #8]
     148:	sub	w8, w1, #0x1
     14c:	add	w10, w21, #0x9
     150:	stp	w26, w8, [x0, #84]
     154:	mov	w8, #0xaaab                	// #43691
     158:	add	w9, w21, #0x7
     15c:	movk	w8, #0xaaaa, lsl #16
     160:	and	w10, w10, #0xff
     164:	umull	x8, w10, w8
     168:	lsl	w10, w24, w9
     16c:	stp	w10, w9, [x0, #132]
     170:	sub	w9, w10, #0x1
     174:	lsr	x8, x8, #33
     178:	str	x19, [x0]
     17c:	str	w25, [x0, #48]
     180:	str	xzr, [x0, #56]
     184:	str	w1, [x0, #80]
     188:	stp	w9, w8, [x0, #140]
     18c:	mov	x22, x0
     190:	ldr	x8, [x19, #64]
     194:	ldr	x0, [x19, #80]
     198:	mov	w2, #0x2                   	// #2
     19c:	blr	x8
     1a0:	str	x0, [x22, #96]
     1a4:	ldr	x8, [x19, #64]
     1a8:	ldr	x0, [x19, #80]
     1ac:	ldr	w1, [x22, #80]
     1b0:	mov	w2, #0x2                   	// #2
     1b4:	blr	x8
     1b8:	str	x0, [x22, #112]
     1bc:	ldr	x8, [x19, #64]
     1c0:	ldr	x0, [x19, #80]
     1c4:	ldr	w1, [x22, #132]
     1c8:	mov	w2, #0x2                   	// #2
     1cc:	blr	x8
     1d0:	add	w8, w21, #0x6
     1d4:	lsl	w1, w24, w8
     1d8:	str	x0, [x22, #120]
     1dc:	str	xzr, [x22, #5944]
     1e0:	str	w1, [x22, #5896]
     1e4:	ldr	x8, [x19, #64]
     1e8:	ldr	x0, [x19, #80]
     1ec:	mov	w2, #0x4                   	// #4
     1f0:	blr	x8
     1f4:	ldr	w8, [x22, #5896]
     1f8:	ldr	x9, [x22, #96]
     1fc:	lsl	x10, x8, #2
     200:	stp	x0, x10, [x22, #16]
     204:	cbz	x9, 25c <deflateInit2_+0x240>
     208:	ldr	x9, [x22, #112]
     20c:	cbz	x9, 25c <deflateInit2_+0x240>
     210:	cbz	x0, 25c <deflateInit2_+0x240>
     214:	ldr	x9, [x22, #120]
     218:	cbz	x9, 25c <deflateInit2_+0x240>
     21c:	and	w9, w8, #0xfffffffe
     220:	add	x8, x8, x8, lsl #1
     224:	mov	w10, #0x8                   	// #8
     228:	add	x9, x0, x9
     22c:	add	x8, x0, x8
     230:	stp	w23, w20, [x22, #196]
     234:	str	x9, [x22, #5904]
     238:	str	x8, [x22, #5888]
     23c:	strb	w10, [x22, #72]
     240:	mov	x0, x19
     244:	ldp	x20, x19, [sp, #64]
     248:	ldp	x22, x21, [sp, #48]
     24c:	ldp	x24, x23, [sp, #32]
     250:	ldp	x26, x25, [sp, #16]
     254:	ldp	x29, x30, [sp], #80
     258:	b	340 <deflateReset>
     25c:	adrp	x8, 0 <z_errmsg>
     260:	ldr	x8, [x8]
     264:	mov	w9, #0x29a                 	// #666
     268:	mov	x0, x19
     26c:	str	w9, [x22, #8]
     270:	str	x8, [x19, #48]
     274:	bl	294 <deflateEnd>
     278:	mov	w0, #0xfffffffc            	// #-4
     27c:	ldp	x20, x19, [sp, #64]
     280:	ldp	x22, x21, [sp, #48]
     284:	ldp	x24, x23, [sp, #32]
     288:	ldp	x26, x25, [sp, #16]
     28c:	ldp	x29, x30, [sp], #80
     290:	ret

0000000000000294 <deflateEnd>:
     294:	stp	x29, x30, [sp, #-32]!
     298:	stp	x20, x19, [sp, #16]
     29c:	mov	x29, sp
     2a0:	mov	x19, x0
     2a4:	bl	5a0 <deflateStateCheck>
     2a8:	cbz	w0, 2b4 <deflateEnd+0x20>
     2ac:	mov	w0, #0xfffffffe            	// #-2
     2b0:	b	334 <deflateEnd+0xa0>
     2b4:	ldr	x1, [x19, #56]
     2b8:	ldr	x8, [x1, #16]
     2bc:	ldr	w20, [x1, #8]
     2c0:	cbz	x8, 2d4 <deflateEnd+0x40>
     2c4:	ldp	x9, x0, [x19, #72]
     2c8:	mov	x1, x8
     2cc:	blr	x9
     2d0:	ldr	x1, [x19, #56]
     2d4:	ldr	x8, [x1, #120]
     2d8:	cbz	x8, 2ec <deflateEnd+0x58>
     2dc:	ldp	x9, x0, [x19, #72]
     2e0:	mov	x1, x8
     2e4:	blr	x9
     2e8:	ldr	x1, [x19, #56]
     2ec:	ldr	x8, [x1, #112]
     2f0:	cbz	x8, 304 <deflateEnd+0x70>
     2f4:	ldp	x9, x0, [x19, #72]
     2f8:	mov	x1, x8
     2fc:	blr	x9
     300:	ldr	x1, [x19, #56]
     304:	ldr	x8, [x1, #96]
     308:	cbz	x8, 31c <deflateEnd+0x88>
     30c:	ldp	x9, x0, [x19, #72]
     310:	mov	x1, x8
     314:	blr	x9
     318:	ldr	x1, [x19, #56]
     31c:	ldp	x8, x0, [x19, #72]
     320:	blr	x8
     324:	cmp	w20, #0x71
     328:	mov	w8, #0xfffffffd            	// #-3
     32c:	csel	w0, w8, wzr, eq  // eq = none
     330:	str	xzr, [x19, #56]
     334:	ldp	x20, x19, [sp, #16]
     338:	ldp	x29, x30, [sp], #32
     33c:	ret

0000000000000340 <deflateReset>:
     340:	stp	x29, x30, [sp, #-32]!
     344:	stp	x20, x19, [sp, #16]
     348:	mov	x29, sp
     34c:	mov	x20, x0
     350:	bl	8dc <deflateResetKeep>
     354:	mov	w19, w0
     358:	cbnz	w0, 3d4 <deflateReset+0x94>
     35c:	ldr	x20, [x20, #56]
     360:	mov	w1, wzr
     364:	ldr	w9, [x20, #132]
     368:	ldr	w8, [x20, #80]
     36c:	ldr	x0, [x20, #120]
     370:	sub	w9, w9, #0x1
     374:	lsl	x8, x8, #1
     378:	lsl	x2, x9, #1
     37c:	str	x8, [x20, #104]
     380:	strh	wzr, [x0, w9, uxtw #1]
     384:	bl	0 <memset>
     388:	ldrsw	x8, [x20, #196]
     38c:	adrp	x9, 0 <deflateInit_>
     390:	add	x9, x9, #0x0
     394:	adrp	x10, 0 <deflateInit_>
     398:	ldr	d0, [x10]
     39c:	mov	w10, #0x2                   	// #2
     3a0:	add	x8, x9, x8, lsl #4
     3a4:	str	w10, [x20, #160]
     3a8:	ldrh	w9, [x8]
     3ac:	ldrh	w10, [x8, #4]
     3b0:	str	xzr, [x20, #152]
     3b4:	str	wzr, [x20, #5932]
     3b8:	str	xzr, [x20, #168]
     3bc:	stp	w9, w10, [x20, #204]
     3c0:	ldrh	w9, [x8, #2]
     3c4:	ldrh	w8, [x8, #6]
     3c8:	stur	d0, [x20, #180]
     3cc:	str	wzr, [x20, #128]
     3d0:	stp	w8, w9, [x20, #188]
     3d4:	mov	w0, w19
     3d8:	ldp	x20, x19, [sp, #16]
     3dc:	ldp	x29, x30, [sp], #32
     3e0:	ret

00000000000003e4 <deflateSetDictionary>:
     3e4:	stp	x29, x30, [sp, #-80]!
     3e8:	str	x25, [sp, #16]
     3ec:	stp	x24, x23, [sp, #32]
     3f0:	stp	x22, x21, [sp, #48]
     3f4:	stp	x20, x19, [sp, #64]
     3f8:	mov	x29, sp
     3fc:	mov	w22, w2
     400:	mov	x21, x1
     404:	mov	x19, x0
     408:	bl	5a0 <deflateStateCheck>
     40c:	mov	w8, w0
     410:	mov	w0, #0xfffffffe            	// #-2
     414:	cbz	x21, 44c <deflateSetDictionary+0x68>
     418:	cbnz	w8, 44c <deflateSetDictionary+0x68>
     41c:	ldr	x20, [x19, #56]
     420:	ldr	w23, [x20, #48]
     424:	cmp	w23, #0x2
     428:	b.eq	448 <deflateSetDictionary+0x64>  // b.none
     42c:	cmp	w23, #0x1
     430:	b.ne	440 <deflateSetDictionary+0x5c>  // b.any
     434:	ldr	w8, [x20, #8]
     438:	cmp	w8, #0x2a
     43c:	b.ne	448 <deflateSetDictionary+0x64>  // b.any
     440:	ldr	w8, [x20, #180]
     444:	cbz	w8, 464 <deflateSetDictionary+0x80>
     448:	mov	w0, #0xfffffffe            	// #-2
     44c:	ldp	x20, x19, [sp, #64]
     450:	ldp	x22, x21, [sp, #48]
     454:	ldp	x24, x23, [sp, #32]
     458:	ldr	x25, [sp, #16]
     45c:	ldp	x29, x30, [sp], #80
     460:	ret
     464:	cmp	w23, #0x1
     468:	b.ne	480 <deflateSetDictionary+0x9c>  // b.any
     46c:	ldr	x0, [x19, #96]
     470:	mov	x1, x21
     474:	mov	w2, w22
     478:	bl	0 <adler32>
     47c:	str	x0, [x19, #96]
     480:	ldr	w8, [x20, #80]
     484:	str	wzr, [x20, #48]
     488:	cmp	w8, w22
     48c:	b.hi	4cc <deflateSetDictionary+0xe8>  // b.pmore
     490:	cbnz	w23, 4c0 <deflateSetDictionary+0xdc>
     494:	ldr	w8, [x20, #132]
     498:	ldr	x0, [x20, #120]
     49c:	mov	w1, wzr
     4a0:	sub	w8, w8, #0x1
     4a4:	lsl	x2, x8, #1
     4a8:	strh	wzr, [x0, w8, uxtw #1]
     4ac:	bl	0 <memset>
     4b0:	ldr	w8, [x20, #80]
     4b4:	str	wzr, [x20, #172]
     4b8:	str	xzr, [x20, #152]
     4bc:	str	wzr, [x20, #5932]
     4c0:	sub	w9, w22, w8
     4c4:	add	x21, x21, x9
     4c8:	mov	w22, w8
     4cc:	ldr	w24, [x19, #8]
     4d0:	ldr	x25, [x19]
     4d4:	mov	x0, x20
     4d8:	str	w22, [x19, #8]
     4dc:	str	x21, [x19]
     4e0:	bl	61c <fill_window>
     4e4:	ldr	w9, [x20, #180]
     4e8:	ldr	w8, [x20, #172]
     4ec:	cmp	w9, #0x3
     4f0:	b.cc	568 <deflateSetDictionary+0x184>  // b.lo, b.ul, b.last
     4f4:	mov	w21, #0x2                   	// #2
     4f8:	ldr	x10, [x20, #96]
     4fc:	ldp	w12, w11, [x20, #140]
     500:	ldp	x14, x13, [x20, #112]
     504:	ldr	w15, [x20, #88]
     508:	ldr	w16, [x20, #128]
     50c:	sub	w9, w9, #0x2
     510:	add	w17, w8, #0x2
     514:	ldrb	w17, [x10, w17, uxtw]
     518:	lsl	w16, w16, w11
     51c:	mov	w18, w8
     520:	and	x18, x15, x18
     524:	eor	w16, w16, w17
     528:	and	x16, x16, x12
     52c:	str	w16, [x20, #128]
     530:	ldrh	w17, [x13, x16, lsl #1]
     534:	subs	w9, w9, #0x1
     538:	strh	w17, [x14, x18, lsl #1]
     53c:	strh	w8, [x13, x16, lsl #1]
     540:	add	w8, w8, #0x1
     544:	b.ne	510 <deflateSetDictionary+0x12c>  // b.any
     548:	mov	x0, x20
     54c:	str	w8, [x20, #172]
     550:	str	w21, [x20, #180]
     554:	bl	61c <fill_window>
     558:	ldr	w9, [x20, #180]
     55c:	ldr	w8, [x20, #172]
     560:	cmp	w9, #0x2
     564:	b.hi	4f8 <deflateSetDictionary+0x114>  // b.pmore
     568:	add	w8, w8, w9
     56c:	str	w9, [x20, #5932]
     570:	adrp	x9, 0 <deflateInit_>
     574:	ldr	d0, [x9]
     578:	mov	w0, wzr
     57c:	mov	w10, #0x2                   	// #2
     580:	str	x8, [x20, #152]
     584:	str	w10, [x20, #160]
     588:	stp	wzr, w8, [x20, #168]
     58c:	stur	d0, [x20, #180]
     590:	str	x25, [x19]
     594:	str	w24, [x19, #8]
     598:	str	w23, [x20, #48]
     59c:	b	44c <deflateSetDictionary+0x68>

00000000000005a0 <deflateStateCheck>:
     5a0:	cbz	x0, 5c8 <deflateStateCheck+0x28>
     5a4:	ldr	x8, [x0, #64]
     5a8:	cbz	x8, 5c8 <deflateStateCheck+0x28>
     5ac:	ldr	x8, [x0, #72]
     5b0:	cbz	x8, 5c8 <deflateStateCheck+0x28>
     5b4:	ldr	x8, [x0, #56]
     5b8:	cbz	x8, 5c8 <deflateStateCheck+0x28>
     5bc:	ldr	x9, [x8]
     5c0:	cmp	x9, x0
     5c4:	b.eq	5d0 <deflateStateCheck+0x30>  // b.none
     5c8:	mov	w0, #0x1                   	// #1
     5cc:	ret
     5d0:	ldr	w8, [x8, #8]
     5d4:	sub	w9, w8, #0x39
     5d8:	cmp	w9, #0x38
     5dc:	b.hi	608 <deflateStateCheck+0x68>  // b.pmore
     5e0:	mov	w10, #0x1                   	// #1
     5e4:	lsl	x9, x10, x9
     5e8:	mov	x10, #0x1001                	// #4097
     5ec:	movk	x10, #0x1, lsl #16
     5f0:	movk	x10, #0x4004, lsl #32
     5f4:	movk	x10, #0x100, lsl #48
     5f8:	tst	x9, x10
     5fc:	b.eq	608 <deflateStateCheck+0x68>  // b.none
     600:	mov	w0, wzr
     604:	ret
     608:	cmp	w8, #0x29a
     60c:	b.eq	600 <deflateStateCheck+0x60>  // b.none
     610:	cmp	w8, #0x2a
     614:	b.ne	5c8 <deflateStateCheck+0x28>  // b.any
     618:	b	600 <deflateStateCheck+0x60>

000000000000061c <fill_window>:
     61c:	str	d8, [sp, #-64]!
     620:	stp	x29, x30, [sp, #16]
     624:	stp	x22, x21, [sp, #32]
     628:	stp	x20, x19, [sp, #48]
     62c:	ldr	w21, [x0, #80]
     630:	ldr	w8, [x0, #180]
     634:	mov	x19, x0
     638:	mov	x29, sp
     63c:	sub	w22, w21, #0x106
     640:	dup	v8.2s, w21
     644:	mov	w10, w21
     648:	ldr	w11, [x19, #104]
     64c:	ldr	w9, [x19, #172]
     650:	add	w10, w22, w10
     654:	sub	w8, w11, w8
     658:	cmp	w9, w10
     65c:	sub	w20, w8, w9
     660:	b.cc	6e0 <fill_window+0xc4>  // b.lo, b.ul, b.last
     664:	ldr	x0, [x19, #96]
     668:	sub	w2, w21, w20
     66c:	add	x1, x0, x21
     670:	bl	0 <memcpy>
     674:	ldr	x10, [x19, #152]
     678:	ldur	d0, [x19, #172]
     67c:	ldr	x11, [x19, #120]
     680:	ldr	w8, [x19, #80]
     684:	ldr	w9, [x19, #132]
     688:	sub	x10, x10, x21
     68c:	sub	v0.2s, v0.2s, v8.2s
     690:	str	x10, [x19, #152]
     694:	sub	x10, x11, #0x2
     698:	stur	d0, [x19, #172]
     69c:	ldrh	w11, [x10, x9, lsl #1]
     6a0:	subs	w11, w11, w8
     6a4:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     6a8:	strh	w11, [x10, x9, lsl #1]
     6ac:	sub	x9, x9, #0x1
     6b0:	cbnz	w9, 69c <fill_window+0x80>
     6b4:	ldr	x9, [x19, #112]
     6b8:	mov	x10, x8
     6bc:	sub	x9, x9, #0x2
     6c0:	ldrh	w11, [x9, x10, lsl #1]
     6c4:	subs	w11, w11, w8
     6c8:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     6cc:	strh	w11, [x9, x10, lsl #1]
     6d0:	sub	x10, x10, #0x1
     6d4:	cbnz	w10, 6c0 <fill_window+0xa4>
     6d8:	add	w20, w20, w21
     6dc:	fmov	w9, s0
     6e0:	ldr	x0, [x19]
     6e4:	ldr	w8, [x0, #8]
     6e8:	cbz	w8, 7bc <fill_window+0x1a0>
     6ec:	ldr	x8, [x19, #96]
     6f0:	ldr	w10, [x19, #180]
     6f4:	mov	w2, w20
     6f8:	add	x8, x8, w9, uxtw
     6fc:	add	x1, x8, x10
     700:	bl	2f14 <read_buf>
     704:	ldr	w8, [x19, #180]
     708:	ldr	w9, [x19, #5932]
     70c:	add	w8, w8, w0
     710:	add	w10, w9, w8
     714:	cmp	w10, #0x3
     718:	str	w8, [x19, #180]
     71c:	b.cc	7a0 <fill_window+0x184>  // b.lo, b.ul, b.last
     720:	ldr	w11, [x19, #172]
     724:	ldr	x10, [x19, #96]
     728:	sub	w11, w11, w9
     72c:	ldrb	w14, [x10, w11, uxtw]
     730:	add	w13, w11, #0x1
     734:	str	w14, [x19, #128]
     738:	ldrb	w15, [x10, w13, uxtw]
     73c:	ldp	w13, w12, [x19, #140]
     740:	lsl	w14, w14, w12
     744:	eor	w14, w14, w15
     748:	and	w14, w14, w13
     74c:	str	w14, [x19, #128]
     750:	cbz	w9, 7a0 <fill_window+0x184>
     754:	add	w15, w11, #0x2
     758:	ldrb	w15, [x10, w15, uxtw]
     75c:	lsl	w14, w14, w12
     760:	ldp	x17, x16, [x19, #112]
     764:	ldr	w18, [x19, #88]
     768:	eor	w14, w14, w15
     76c:	and	x14, x14, x13
     770:	str	w14, [x19, #128]
     774:	sub	w9, w9, #0x1
     778:	ldrh	w15, [x16, x14, lsl #1]
     77c:	add	w0, w8, w9
     780:	cmp	w0, #0x2
     784:	mov	w0, w11
     788:	and	x18, x18, x0
     78c:	strh	w15, [x17, x18, lsl #1]
     790:	strh	w11, [x16, x14, lsl #1]
     794:	add	w11, w11, #0x1
     798:	str	w9, [x19, #5932]
     79c:	b.hi	750 <fill_window+0x134>  // b.pmore
     7a0:	cmp	w8, #0x105
     7a4:	b.hi	7bc <fill_window+0x1a0>  // b.pmore
     7a8:	ldr	x9, [x19]
     7ac:	ldr	w9, [x9, #8]
     7b0:	cbz	w9, 7bc <fill_window+0x1a0>
     7b4:	ldr	w10, [x19, #80]
     7b8:	b	648 <fill_window+0x2c>
     7bc:	ldr	x8, [x19, #5944]
     7c0:	ldr	x10, [x19, #104]
     7c4:	subs	x9, x10, x8
     7c8:	b.ls	840 <fill_window+0x224>  // b.plast
     7cc:	ldr	w11, [x19, #172]
     7d0:	ldr	w12, [x19, #180]
     7d4:	add	x21, x12, x11
     7d8:	cmp	x8, x21
     7dc:	b.cs	80c <fill_window+0x1f0>  // b.hs, b.nlast
     7e0:	ldr	x9, [x19, #96]
     7e4:	sub	x8, x10, x21
     7e8:	cmp	x8, #0x102
     7ec:	mov	w10, #0x102                 	// #258
     7f0:	csel	x20, x8, x10, cc  // cc = lo, ul, last
     7f4:	add	x0, x9, x21
     7f8:	mov	w1, wzr
     7fc:	mov	x2, x20
     800:	bl	0 <memset>
     804:	add	x8, x20, x21
     808:	b	83c <fill_window+0x220>
     80c:	add	x10, x21, #0x102
     810:	subs	x10, x10, x8
     814:	b.ls	840 <fill_window+0x224>  // b.plast
     818:	ldr	x11, [x19, #96]
     81c:	cmp	x10, x9
     820:	csel	x20, x9, x10, hi  // hi = pmore
     824:	and	x2, x20, #0xffffffff
     828:	add	x0, x11, x8
     82c:	mov	w1, wzr
     830:	bl	0 <memset>
     834:	ldr	x8, [x19, #5944]
     838:	add	x8, x8, x20
     83c:	str	x8, [x19, #5944]
     840:	ldp	x20, x19, [sp, #48]
     844:	ldp	x22, x21, [sp, #32]
     848:	ldp	x29, x30, [sp, #16]
     84c:	ldr	d8, [sp], #64
     850:	ret

0000000000000854 <deflateGetDictionary>:
     854:	stp	x29, x30, [sp, #-48]!
     858:	str	x21, [sp, #16]
     85c:	stp	x20, x19, [sp, #32]
     860:	mov	x29, sp
     864:	mov	x19, x2
     868:	mov	x20, x1
     86c:	mov	x21, x0
     870:	bl	5a0 <deflateStateCheck>
     874:	cbz	w0, 880 <deflateGetDictionary+0x2c>
     878:	mov	w0, #0xfffffffe            	// #-2
     87c:	b	8cc <deflateGetDictionary+0x78>
     880:	ldr	x8, [x21, #56]
     884:	ldr	w9, [x8, #172]
     888:	ldr	w10, [x8, #180]
     88c:	ldr	w11, [x8, #80]
     890:	add	w12, w10, w9
     894:	cmp	w12, w11
     898:	csel	w21, w11, w12, hi  // hi = pmore
     89c:	cbz	x20, 8c0 <deflateGetDictionary+0x6c>
     8a0:	cbz	w21, 8c0 <deflateGetDictionary+0x6c>
     8a4:	ldr	x8, [x8, #96]
     8a8:	mov	w2, w21
     8ac:	mov	x0, x20
     8b0:	add	x8, x8, x9
     8b4:	add	x8, x8, x10
     8b8:	sub	x1, x8, w21, uxtw
     8bc:	bl	0 <memcpy>
     8c0:	mov	w0, wzr
     8c4:	cbz	x19, 8cc <deflateGetDictionary+0x78>
     8c8:	str	w21, [x19]
     8cc:	ldp	x20, x19, [sp, #32]
     8d0:	ldr	x21, [sp, #16]
     8d4:	ldp	x29, x30, [sp], #48
     8d8:	ret

00000000000008dc <deflateResetKeep>:
     8dc:	stp	x29, x30, [sp, #-32]!
     8e0:	stp	x20, x19, [sp, #16]
     8e4:	mov	x29, sp
     8e8:	mov	x19, x0
     8ec:	bl	5a0 <deflateStateCheck>
     8f0:	cbz	w0, 8fc <deflateResetKeep+0x20>
     8f4:	mov	w0, #0xfffffffe            	// #-2
     8f8:	b	978 <deflateResetKeep+0x9c>
     8fc:	ldr	x20, [x19, #56]
     900:	mov	w8, #0x2                   	// #2
     904:	str	xzr, [x19, #16]
     908:	stp	xzr, xzr, [x19, #40]
     90c:	str	w8, [x19, #88]
     910:	ldr	x9, [x20, #16]
     914:	ldr	w8, [x20, #48]
     918:	stp	x9, xzr, [x20, #32]
     91c:	tbz	w8, #31, 928 <deflateResetKeep+0x4c>
     920:	neg	w8, w8
     924:	str	w8, [x20, #48]
     928:	cmp	w8, #0x0
     92c:	mov	w9, #0x2a                  	// #42
     930:	mov	w10, #0x71                  	// #113
     934:	csel	w9, w10, w9, eq  // eq = none
     938:	cmp	w8, #0x2
     93c:	mov	w8, #0x39                  	// #57
     940:	csel	w8, w8, w9, eq  // eq = none
     944:	mov	x0, xzr
     948:	mov	x1, xzr
     94c:	mov	w2, wzr
     950:	str	w8, [x20, #8]
     954:	b.ne	960 <deflateResetKeep+0x84>  // b.any
     958:	bl	0 <crc32>
     95c:	b	964 <deflateResetKeep+0x88>
     960:	bl	0 <adler32>
     964:	str	x0, [x19, #96]
     968:	mov	x0, x20
     96c:	str	wzr, [x20, #76]
     970:	bl	0 <_tr_init>
     974:	mov	w0, wzr
     978:	ldp	x20, x19, [sp, #16]
     97c:	ldp	x29, x30, [sp], #32
     980:	ret

0000000000000984 <deflateSetHeader>:
     984:	stp	x29, x30, [sp, #-32]!
     988:	stp	x20, x19, [sp, #16]
     98c:	mov	x29, sp
     990:	mov	x19, x1
     994:	mov	x20, x0
     998:	bl	5a0 <deflateStateCheck>
     99c:	cbnz	w0, 9bc <deflateSetHeader+0x38>
     9a0:	ldr	x8, [x20, #56]
     9a4:	ldr	w9, [x8, #48]
     9a8:	cmp	w9, #0x2
     9ac:	b.ne	9bc <deflateSetHeader+0x38>  // b.any
     9b0:	mov	w0, wzr
     9b4:	str	x19, [x8, #56]
     9b8:	b	9c0 <deflateSetHeader+0x3c>
     9bc:	mov	w0, #0xfffffffe            	// #-2
     9c0:	ldp	x20, x19, [sp, #16]
     9c4:	ldp	x29, x30, [sp], #32
     9c8:	ret

00000000000009cc <deflatePending>:
     9cc:	stp	x29, x30, [sp, #-48]!
     9d0:	str	x21, [sp, #16]
     9d4:	stp	x20, x19, [sp, #32]
     9d8:	mov	x29, sp
     9dc:	mov	x19, x2
     9e0:	mov	x21, x1
     9e4:	mov	x20, x0
     9e8:	bl	5a0 <deflateStateCheck>
     9ec:	cbz	w0, 9f8 <deflatePending+0x2c>
     9f0:	mov	w0, #0xfffffffe            	// #-2
     9f4:	b	a1c <deflatePending+0x50>
     9f8:	cbz	x21, a08 <deflatePending+0x3c>
     9fc:	ldr	x8, [x20, #56]
     a00:	ldr	x8, [x8, #40]
     a04:	str	w8, [x21]
     a08:	mov	w0, wzr
     a0c:	cbz	x19, a1c <deflatePending+0x50>
     a10:	ldr	x8, [x20, #56]
     a14:	ldr	w8, [x8, #5940]
     a18:	str	w8, [x19]
     a1c:	ldp	x20, x19, [sp, #32]
     a20:	ldr	x21, [sp, #16]
     a24:	ldp	x29, x30, [sp], #48
     a28:	ret

0000000000000a2c <deflatePrime>:
     a2c:	stp	x29, x30, [sp, #-64]!
     a30:	stp	x24, x23, [sp, #16]
     a34:	stp	x22, x21, [sp, #32]
     a38:	stp	x20, x19, [sp, #48]
     a3c:	mov	x29, sp
     a40:	mov	w19, w2
     a44:	mov	w20, w1
     a48:	mov	x21, x0
     a4c:	bl	5a0 <deflateStateCheck>
     a50:	cbz	w0, a5c <deflatePrime+0x30>
     a54:	mov	w0, #0xfffffffe            	// #-2
     a58:	b	acc <deflatePrime+0xa0>
     a5c:	ldr	x21, [x21, #56]
     a60:	ldr	x8, [x21, #32]
     a64:	ldr	x9, [x21, #5904]
     a68:	add	x8, x8, #0x2
     a6c:	cmp	x9, x8
     a70:	b.cs	a7c <deflatePrime+0x50>  // b.hs, b.nlast
     a74:	mov	w0, #0xfffffffb            	// #-5
     a78:	b	acc <deflatePrime+0xa0>
     a7c:	mov	w22, #0x10                  	// #16
     a80:	mov	w23, #0xffffffff            	// #-1
     a84:	ldr	w8, [x21, #5940]
     a88:	ldrh	w9, [x21, #5936]
     a8c:	mov	x0, x21
     a90:	sub	w10, w22, w8
     a94:	cmp	w10, w20
     a98:	csel	w24, w20, w10, gt
     a9c:	lsl	w10, w23, w24
     aa0:	bic	w10, w19, w10
     aa4:	add	w11, w24, w8
     aa8:	lsl	w8, w10, w8
     aac:	orr	w8, w9, w8
     ab0:	strh	w8, [x21, #5936]
     ab4:	str	w11, [x21, #5940]
     ab8:	bl	0 <_tr_flush_bits>
     abc:	subs	w20, w20, w24
     ac0:	asr	w19, w19, w24
     ac4:	b.ne	a84 <deflatePrime+0x58>  // b.any
     ac8:	mov	w0, wzr
     acc:	ldp	x20, x19, [sp, #48]
     ad0:	ldp	x22, x21, [sp, #32]
     ad4:	ldp	x24, x23, [sp, #16]
     ad8:	ldp	x29, x30, [sp], #64
     adc:	ret

0000000000000ae0 <deflateParams>:
     ae0:	stp	x29, x30, [sp, #-48]!
     ae4:	stp	x22, x21, [sp, #16]
     ae8:	stp	x20, x19, [sp, #32]
     aec:	mov	x29, sp
     af0:	mov	w19, w2
     af4:	mov	w21, w1
     af8:	mov	x20, x0
     afc:	bl	5a0 <deflateStateCheck>
     b00:	cbz	w0, b18 <deflateParams+0x38>
     b04:	mov	w0, #0xfffffffe            	// #-2
     b08:	ldp	x20, x19, [sp, #32]
     b0c:	ldp	x22, x21, [sp, #16]
     b10:	ldp	x29, x30, [sp], #48
     b14:	ret
     b18:	cmn	w21, #0x1
     b1c:	mov	w8, #0x6                   	// #6
     b20:	csel	w21, w8, w21, eq  // eq = none
     b24:	cmp	w19, #0x4
     b28:	mov	w0, #0xfffffffe            	// #-2
     b2c:	b.hi	b08 <deflateParams+0x28>  // b.pmore
     b30:	cmp	w21, #0x9
     b34:	b.hi	b08 <deflateParams+0x28>  // b.pmore
     b38:	ldr	x22, [x20, #56]
     b3c:	ldr	w8, [x22, #200]
     b40:	cmp	w8, w19
     b44:	b.ne	b6c <deflateParams+0x8c>  // b.any
     b48:	ldrsw	x8, [x22, #196]
     b4c:	adrp	x9, 0 <deflateInit_>
     b50:	add	x9, x9, #0x0
     b54:	add	x10, x9, w21, uxtw #4
     b58:	add	x8, x9, x8, lsl #4
     b5c:	ldr	x8, [x8, #8]
     b60:	ldr	x9, [x10, #8]
     b64:	cmp	x8, x9
     b68:	b.eq	b90 <deflateParams+0xb0>  // b.none
     b6c:	ldr	x8, [x22, #5944]
     b70:	cbz	x8, b90 <deflateParams+0xb0>
     b74:	mov	w1, #0x5                   	// #5
     b78:	mov	x0, x20
     b7c:	bl	c64 <deflate>
     b80:	cmn	w0, #0x2
     b84:	b.eq	b08 <deflateParams+0x28>  // b.none
     b88:	ldr	w8, [x20, #32]
     b8c:	cbz	w8, c08 <deflateParams+0x128>
     b90:	ldr	w8, [x22, #196]
     b94:	cmp	w8, w21
     b98:	b.eq	c58 <deflateParams+0x178>  // b.none
     b9c:	cbnz	w8, c30 <deflateParams+0x150>
     ba0:	ldr	w8, [x22, #5928]
     ba4:	cbz	w8, c30 <deflateParams+0x150>
     ba8:	cmp	w8, #0x1
     bac:	b.ne	c10 <deflateParams+0x130>  // b.any
     bb0:	ldr	w8, [x22, #132]
     bb4:	ldr	w9, [x22, #80]
     bb8:	ldr	x0, [x22, #120]
     bbc:	mov	x10, x8
     bc0:	add	x11, x0, x10, lsl #1
     bc4:	ldurh	w12, [x11, #-2]
     bc8:	sub	x10, x10, #0x1
     bcc:	subs	w12, w12, w9
     bd0:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
     bd4:	sturh	w12, [x11, #-2]
     bd8:	cbnz	w10, bc0 <deflateParams+0xe0>
     bdc:	ldr	x10, [x22, #112]
     be0:	mov	x11, x9
     be4:	sub	x10, x10, #0x2
     be8:	ldrh	w12, [x10, x11, lsl #1]
     bec:	subs	w12, w12, w9
     bf0:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
     bf4:	strh	w12, [x10, x11, lsl #1]
     bf8:	sub	x11, x11, #0x1
     bfc:	cbnz	w11, be8 <deflateParams+0x108>
     c00:	sub	w8, w8, #0x1
     c04:	b	c20 <deflateParams+0x140>
     c08:	mov	w0, #0xfffffffb            	// #-5
     c0c:	b	b08 <deflateParams+0x28>
     c10:	ldr	w8, [x22, #132]
     c14:	ldr	x0, [x22, #120]
     c18:	sub	w8, w8, #0x1
     c1c:	strh	wzr, [x0, w8, uxtw #1]
     c20:	lsl	x2, x8, #1
     c24:	mov	w1, wzr
     c28:	bl	0 <memset>
     c2c:	str	wzr, [x22, #5928]
     c30:	adrp	x8, 0 <deflateInit_>
     c34:	add	x8, x8, #0x0
     c38:	add	x8, x8, w21, sxtw #4
     c3c:	ldrh	w9, [x8]
     c40:	ldrh	w10, [x8, #4]
     c44:	ldrh	w11, [x8, #2]
     c48:	ldrh	w8, [x8, #6]
     c4c:	str	w21, [x22, #196]
     c50:	stp	w9, w10, [x22, #204]
     c54:	stp	w8, w11, [x22, #188]
     c58:	mov	w0, wzr
     c5c:	str	w19, [x22, #200]
     c60:	b	b08 <deflateParams+0x28>

0000000000000c64 <deflate>:
     c64:	stp	x29, x30, [sp, #-80]!
     c68:	str	x25, [sp, #16]
     c6c:	stp	x24, x23, [sp, #32]
     c70:	stp	x22, x21, [sp, #48]
     c74:	stp	x20, x19, [sp, #64]
     c78:	mov	x29, sp
     c7c:	mov	w21, w1
     c80:	mov	x20, x0
     c84:	bl	5a0 <deflateStateCheck>
     c88:	mov	w8, w0
     c8c:	cmp	w21, #0x5
     c90:	mov	w0, #0xfffffffe            	// #-2
     c94:	b.hi	cdc <deflate+0x78>  // b.pmore
     c98:	cbnz	w8, cdc <deflate+0x78>
     c9c:	ldr	x8, [x20, #24]
     ca0:	cbz	x8, ccc <deflate+0x68>
     ca4:	ldr	w9, [x20, #8]
     ca8:	ldr	x19, [x20, #56]
     cac:	cbz	w9, cb8 <deflate+0x54>
     cb0:	ldr	x8, [x20]
     cb4:	cbz	x8, ccc <deflate+0x68>
     cb8:	ldr	w8, [x19, #8]
     cbc:	cmp	w21, #0x4
     cc0:	b.eq	cf4 <deflate+0x90>  // b.none
     cc4:	cmp	w8, #0x29a
     cc8:	b.ne	cf4 <deflate+0x90>  // b.any
     ccc:	adrp	x8, 0 <z_errmsg>
     cd0:	ldr	x8, [x8]
     cd4:	mov	w0, #0xfffffffe            	// #-2
     cd8:	str	x8, [x20, #48]
     cdc:	ldp	x20, x19, [sp, #64]
     ce0:	ldp	x22, x21, [sp, #48]
     ce4:	ldp	x24, x23, [sp, #32]
     ce8:	ldr	x25, [sp, #16]
     cec:	ldp	x29, x30, [sp], #80
     cf0:	ret
     cf4:	ldr	w10, [x20, #32]
     cf8:	cbz	w10, 1004 <deflate+0x3a0>
     cfc:	ldr	x11, [x19, #40]
     d00:	ldr	w10, [x19, #76]
     d04:	str	w21, [x19, #76]
     d08:	cbz	x11, d24 <deflate+0xc0>
     d0c:	mov	x0, x20
     d10:	bl	1d7c <flush_pending>
     d14:	ldr	w8, [x20, #32]
     d18:	cbz	w8, 1bf4 <deflate+0xf90>
     d1c:	ldr	w8, [x19, #8]
     d20:	b	d28 <deflate+0xc4>
     d24:	cbz	w9, fd0 <deflate+0x36c>
     d28:	cmp	w8, #0x2a
     d2c:	b.eq	d44 <deflate+0xe0>  // b.none
     d30:	cmp	w8, #0x29a
     d34:	b.ne	e74 <deflate+0x210>  // b.any
     d38:	ldr	w8, [x20, #8]
     d3c:	cbnz	w8, 1004 <deflate+0x3a0>
     d40:	b	1538 <deflate+0x8d4>
     d44:	ldr	w8, [x19, #200]
     d48:	ldr	w9, [x19, #84]
     d4c:	mov	w10, #0xffff8800            	// #-30720
     d50:	cmp	w8, #0x1
     d54:	add	w8, w10, w9, lsl #12
     d58:	b.gt	d68 <deflate+0x104>
     d5c:	ldr	w9, [x19, #196]
     d60:	cmp	w9, #0x2
     d64:	b.ge	108c <deflate+0x428>  // b.tcont
     d68:	mov	w9, wzr
     d6c:	orr	w8, w9, w8
     d70:	ldr	w9, [x19, #172]
     d74:	ldr	x12, [x19, #40]
     d78:	mov	w10, #0x1085                	// #4229
     d7c:	ldr	x11, [x19, #16]
     d80:	cmp	w9, #0x0
     d84:	orr	w9, w8, #0x20
     d88:	movk	w10, #0x842, lsl #16
     d8c:	csel	w8, w8, w9, eq  // eq = none
     d90:	add	x9, x12, #0x1
     d94:	str	x9, [x19, #40]
     d98:	umull	x9, w8, w10
     d9c:	lsr	w10, w8, #8
     da0:	lsr	x9, x9, #32
     da4:	strb	w10, [x11, x12]
     da8:	sub	w10, w8, w9
     dac:	add	w9, w9, w10, lsr #1
     db0:	ldr	x12, [x19, #40]
     db4:	lsr	w9, w9, #4
     db8:	ldr	x11, [x19, #16]
     dbc:	sub	w9, w9, w9, lsl #5
     dc0:	add	w9, w8, w9
     dc4:	orr	w8, w9, w8
     dc8:	add	x10, x12, #0x1
     dcc:	eor	w8, w8, #0x1f
     dd0:	str	x10, [x19, #40]
     dd4:	strb	w8, [x11, x12]
     dd8:	ldr	w8, [x19, #172]
     ddc:	cbz	w8, e44 <deflate+0x1e0>
     de0:	ldr	x8, [x20, #96]
     de4:	ldr	x9, [x19, #40]
     de8:	ldr	x10, [x19, #16]
     dec:	lsr	x11, x8, #24
     df0:	add	x12, x9, #0x1
     df4:	str	x12, [x19, #40]
     df8:	strb	w11, [x10, x9]
     dfc:	ldr	x9, [x19, #40]
     e00:	ldr	x10, [x19, #16]
     e04:	lsr	x8, x8, #16
     e08:	add	x11, x9, #0x1
     e0c:	str	x11, [x19, #40]
     e10:	strb	w8, [x10, x9]
     e14:	ldr	x8, [x20, #96]
     e18:	ldr	x9, [x19, #40]
     e1c:	ldr	x10, [x19, #16]
     e20:	ubfx	x11, x8, #8, #24
     e24:	add	x12, x9, #0x1
     e28:	str	x12, [x19, #40]
     e2c:	strb	w11, [x10, x9]
     e30:	ldr	x9, [x19, #40]
     e34:	ldr	x10, [x19, #16]
     e38:	add	x11, x9, #0x1
     e3c:	str	x11, [x19, #40]
     e40:	strb	w8, [x10, x9]
     e44:	mov	x0, xzr
     e48:	mov	x1, xzr
     e4c:	mov	w2, wzr
     e50:	bl	0 <adler32>
     e54:	str	x0, [x20, #96]
     e58:	mov	w8, #0x71                  	// #113
     e5c:	mov	x0, x20
     e60:	str	w8, [x19, #8]
     e64:	bl	1d7c <flush_pending>
     e68:	ldr	x8, [x19, #40]
     e6c:	cbnz	x8, 1bf4 <deflate+0xf90>
     e70:	ldr	w8, [x19, #8]
     e74:	cmp	w8, #0x39
     e78:	b.ne	11b0 <deflate+0x54c>  // b.any
     e7c:	mov	x0, xzr
     e80:	mov	x1, xzr
     e84:	mov	w2, wzr
     e88:	bl	0 <crc32>
     e8c:	str	x0, [x20, #96]
     e90:	ldr	x8, [x19, #40]
     e94:	ldr	x9, [x19, #16]
     e98:	add	x10, x8, #0x1
     e9c:	str	x10, [x19, #40]
     ea0:	mov	w10, #0x1f                  	// #31
     ea4:	strb	w10, [x9, x8]
     ea8:	ldr	x8, [x19, #40]
     eac:	ldr	x9, [x19, #16]
     eb0:	add	x10, x8, #0x1
     eb4:	str	x10, [x19, #40]
     eb8:	mov	w10, #0x8b                  	// #139
     ebc:	strb	w10, [x9, x8]
     ec0:	ldr	x8, [x19, #40]
     ec4:	ldr	x9, [x19, #16]
     ec8:	add	x10, x8, #0x1
     ecc:	str	x10, [x19, #40]
     ed0:	mov	w10, #0x8                   	// #8
     ed4:	strb	w10, [x9, x8]
     ed8:	ldr	x8, [x19, #56]
     edc:	cbz	x8, 1014 <deflate+0x3b0>
     ee0:	ldr	w9, [x8]
     ee4:	ldr	w10, [x8, #68]
     ee8:	ldr	x13, [x19, #40]
     eec:	ldr	x11, [x8, #24]
     ef0:	ldr	x12, [x8, #40]
     ef4:	ldr	x8, [x8, #56]
     ef8:	cmp	w9, #0x0
     efc:	cset	w9, ne  // ne = any
     f00:	cmp	w10, #0x0
     f04:	add	x10, x13, #0x1
     f08:	str	x10, [x19, #40]
     f0c:	cset	w10, ne  // ne = any
     f10:	cmp	x11, #0x0
     f14:	bfi	w9, w10, #1, #1
     f18:	cset	w10, ne  // ne = any
     f1c:	cmp	x12, #0x0
     f20:	bfi	w9, w10, #2, #1
     f24:	cset	w10, ne  // ne = any
     f28:	cmp	x8, #0x0
     f2c:	ldr	x8, [x19, #16]
     f30:	bfi	w9, w10, #3, #1
     f34:	cset	w10, ne  // ne = any
     f38:	bfi	w9, w10, #4, #1
     f3c:	strb	w9, [x8, x13]
     f40:	ldr	x8, [x19, #56]
     f44:	ldr	x9, [x19, #40]
     f48:	ldr	x10, [x19, #16]
     f4c:	ldr	x8, [x8, #8]
     f50:	add	x11, x9, #0x1
     f54:	str	x11, [x19, #40]
     f58:	strb	w8, [x10, x9]
     f5c:	ldr	x8, [x19, #56]
     f60:	ldr	x9, [x19, #40]
     f64:	ldr	x10, [x19, #16]
     f68:	ldr	x8, [x8, #8]
     f6c:	add	x11, x9, #0x1
     f70:	str	x11, [x19, #40]
     f74:	lsr	x8, x8, #8
     f78:	strb	w8, [x10, x9]
     f7c:	ldr	x8, [x19, #56]
     f80:	ldr	x9, [x19, #40]
     f84:	ldr	x10, [x19, #16]
     f88:	ldr	x8, [x8, #8]
     f8c:	add	x11, x9, #0x1
     f90:	str	x11, [x19, #40]
     f94:	lsr	x8, x8, #16
     f98:	strb	w8, [x10, x9]
     f9c:	ldr	x8, [x19, #56]
     fa0:	ldr	x9, [x19, #40]
     fa4:	ldr	x10, [x19, #16]
     fa8:	ldr	x8, [x8, #8]
     fac:	add	x11, x9, #0x1
     fb0:	str	x11, [x19, #40]
     fb4:	lsr	x8, x8, #24
     fb8:	strb	w8, [x10, x9]
     fbc:	ldr	w8, [x19, #196]
     fc0:	cmp	w8, #0x9
     fc4:	b.ne	109c <deflate+0x438>  // b.any
     fc8:	mov	w8, #0x2                   	// #2
     fcc:	b	10b0 <deflate+0x44c>
     fd0:	cmp	w21, #0x4
     fd4:	mov	w11, #0x9                   	// #9
     fd8:	csel	w9, w11, wzr, gt
     fdc:	cmp	w10, #0x4
     fe0:	csel	w11, w11, wzr, gt
     fe4:	cmp	w21, #0x4
     fe8:	b.eq	d28 <deflate+0xc4>  // b.none
     fec:	lsl	w12, w21, #1
     ff0:	lsl	w10, w10, #1
     ff4:	sub	w9, w12, w9
     ff8:	sub	w10, w10, w11
     ffc:	cmp	w9, w10
    1000:	b.gt	d28 <deflate+0xc4>
    1004:	adrp	x8, 0 <z_errmsg>
    1008:	ldr	x8, [x8]
    100c:	mov	w0, #0xfffffffb            	// #-5
    1010:	b	cd8 <deflate+0x74>
    1014:	ldr	x8, [x19, #40]
    1018:	ldr	x9, [x19, #16]
    101c:	add	x10, x8, #0x1
    1020:	str	x10, [x19, #40]
    1024:	strb	wzr, [x9, x8]
    1028:	ldr	x8, [x19, #40]
    102c:	ldr	x9, [x19, #16]
    1030:	add	x10, x8, #0x1
    1034:	str	x10, [x19, #40]
    1038:	strb	wzr, [x9, x8]
    103c:	ldr	x8, [x19, #40]
    1040:	ldr	x9, [x19, #16]
    1044:	add	x10, x8, #0x1
    1048:	str	x10, [x19, #40]
    104c:	strb	wzr, [x9, x8]
    1050:	ldr	x8, [x19, #40]
    1054:	ldr	x9, [x19, #16]
    1058:	add	x10, x8, #0x1
    105c:	str	x10, [x19, #40]
    1060:	strb	wzr, [x9, x8]
    1064:	ldr	x8, [x19, #40]
    1068:	ldr	x9, [x19, #16]
    106c:	add	x10, x8, #0x1
    1070:	str	x10, [x19, #40]
    1074:	strb	wzr, [x9, x8]
    1078:	ldr	w8, [x19, #196]
    107c:	cmp	w8, #0x9
    1080:	b.ne	1154 <deflate+0x4f0>  // b.any
    1084:	mov	w8, #0x2                   	// #2
    1088:	b	1168 <deflate+0x504>
    108c:	cmp	w9, #0x6
    1090:	b.ge	1298 <deflate+0x634>  // b.tcont
    1094:	mov	w9, #0x40                  	// #64
    1098:	b	d6c <deflate+0x108>
    109c:	ldr	w9, [x19, #200]
    10a0:	cmp	w9, #0x1
    10a4:	ccmp	w8, #0x2, #0x8, le
    10a8:	mov	w8, #0x4                   	// #4
    10ac:	csel	w8, w8, wzr, lt  // lt = tstop
    10b0:	ldr	x9, [x19, #40]
    10b4:	ldr	x10, [x19, #16]
    10b8:	add	x11, x9, #0x1
    10bc:	str	x11, [x19, #40]
    10c0:	strb	w8, [x10, x9]
    10c4:	ldr	x8, [x19, #56]
    10c8:	ldr	x9, [x19, #40]
    10cc:	ldr	x10, [x19, #16]
    10d0:	ldr	w8, [x8, #20]
    10d4:	add	x11, x9, #0x1
    10d8:	str	x11, [x19, #40]
    10dc:	strb	w8, [x10, x9]
    10e0:	ldr	x8, [x19, #56]
    10e4:	ldr	x9, [x8, #24]
    10e8:	cbz	x9, 1128 <deflate+0x4c4>
    10ec:	ldr	x9, [x19, #40]
    10f0:	ldr	w8, [x8, #32]
    10f4:	ldr	x10, [x19, #16]
    10f8:	add	x11, x9, #0x1
    10fc:	str	x11, [x19, #40]
    1100:	strb	w8, [x10, x9]
    1104:	ldr	x8, [x19, #56]
    1108:	ldr	x9, [x19, #40]
    110c:	ldr	x10, [x19, #16]
    1110:	ldr	w8, [x8, #32]
    1114:	add	x11, x9, #0x1
    1118:	str	x11, [x19, #40]
    111c:	lsr	w8, w8, #8
    1120:	strb	w8, [x10, x9]
    1124:	ldr	x8, [x19, #56]
    1128:	ldr	w8, [x8, #68]
    112c:	cbz	w8, 1144 <deflate+0x4e0>
    1130:	ldr	x0, [x20, #96]
    1134:	ldr	x1, [x19, #16]
    1138:	ldr	w2, [x19, #40]
    113c:	bl	0 <crc32>
    1140:	str	x0, [x20, #96]
    1144:	mov	w8, #0x45                  	// #69
    1148:	str	xzr, [x19, #64]
    114c:	str	w8, [x19, #8]
    1150:	b	11cc <deflate+0x568>
    1154:	ldr	w9, [x19, #200]
    1158:	cmp	w9, #0x1
    115c:	ccmp	w8, #0x2, #0x8, le
    1160:	mov	w8, #0x4                   	// #4
    1164:	csel	w8, w8, wzr, lt  // lt = tstop
    1168:	ldr	x9, [x19, #40]
    116c:	ldr	x10, [x19, #16]
    1170:	mov	x0, x20
    1174:	add	x11, x9, #0x1
    1178:	str	x11, [x19, #40]
    117c:	strb	w8, [x10, x9]
    1180:	ldr	x8, [x19, #40]
    1184:	ldr	x10, [x19, #16]
    1188:	mov	w9, #0x3                   	// #3
    118c:	mov	w11, #0x71                  	// #113
    1190:	add	x12, x8, #0x1
    1194:	str	x12, [x19, #40]
    1198:	strb	w9, [x10, x8]
    119c:	str	w11, [x19, #8]
    11a0:	bl	1d7c <flush_pending>
    11a4:	ldr	x8, [x19, #40]
    11a8:	cbnz	x8, 1bf4 <deflate+0xf90>
    11ac:	ldr	w8, [x19, #8]
    11b0:	cmp	w8, #0x5a
    11b4:	b.gt	1284 <deflate+0x620>
    11b8:	cmp	w8, #0x45
    11bc:	b.eq	11cc <deflate+0x568>  // b.none
    11c0:	cmp	w8, #0x49
    11c4:	b.eq	1310 <deflate+0x6ac>  // b.none
    11c8:	b	1530 <deflate+0x8cc>
    11cc:	ldr	x9, [x19, #56]
    11d0:	ldr	x8, [x9, #24]
    11d4:	cbz	x8, 1308 <deflate+0x6a4>
    11d8:	ldrh	w11, [x9, #32]
    11dc:	ldr	x9, [x19, #64]
    11e0:	ldr	x24, [x19, #40]
    11e4:	ldr	x10, [x19, #24]
    11e8:	sub	w22, w11, w9
    11ec:	add	x11, x24, x22
    11f0:	cmp	x11, x10
    11f4:	b.ls	12b8 <deflate+0x654>  // b.plast
    11f8:	ldr	x11, [x19, #16]
    11fc:	sub	x25, x10, x24
    1200:	and	x23, x25, #0xffffffff
    1204:	add	x1, x8, x9
    1208:	add	x0, x11, x24
    120c:	mov	x2, x23
    1210:	bl	0 <memcpy>
    1214:	ldr	x8, [x19, #24]
    1218:	cmp	x8, x24
    121c:	str	x8, [x19, #40]
    1220:	b.ls	1248 <deflate+0x5e4>  // b.plast
    1224:	ldr	x9, [x19, #56]
    1228:	ldr	w9, [x9, #68]
    122c:	cbz	w9, 1248 <deflate+0x5e4>
    1230:	ldr	x9, [x19, #16]
    1234:	ldr	x0, [x20, #96]
    1238:	sub	w2, w8, w24
    123c:	add	x1, x9, x24
    1240:	bl	0 <crc32>
    1244:	str	x0, [x20, #96]
    1248:	ldr	x8, [x19, #64]
    124c:	mov	x0, x20
    1250:	add	x8, x8, x23
    1254:	str	x8, [x19, #64]
    1258:	bl	1d7c <flush_pending>
    125c:	ldr	x8, [x19, #40]
    1260:	cbnz	x8, 1bf4 <deflate+0xf90>
    1264:	ldr	x10, [x19, #24]
    1268:	sub	w22, w22, w25
    126c:	cmp	x10, w22, uxtw
    1270:	b.cs	12a8 <deflate+0x644>  // b.hs, b.nlast
    1274:	ldp	x8, x9, [x19, #56]
    1278:	mov	x24, xzr
    127c:	ldr	x8, [x8, #24]
    1280:	b	11f8 <deflate+0x594>
    1284:	cmp	w8, #0x5b
    1288:	b.eq	13dc <deflate+0x778>  // b.none
    128c:	cmp	w8, #0x67
    1290:	b.eq	14a4 <deflate+0x840>  // b.none
    1294:	b	1530 <deflate+0x8cc>
    1298:	mov	w9, #0xc0                  	// #192
    129c:	mov	w10, #0x80                  	// #128
    12a0:	csel	w9, w10, w9, eq  // eq = none
    12a4:	b	d6c <deflate+0x108>
    12a8:	ldp	x8, x9, [x19, #56]
    12ac:	mov	x24, xzr
    12b0:	mov	w22, w22
    12b4:	ldr	x8, [x8, #24]
    12b8:	ldr	x10, [x19, #16]
    12bc:	add	x1, x8, x9
    12c0:	mov	x2, x22
    12c4:	add	x0, x10, x24
    12c8:	bl	0 <memcpy>
    12cc:	ldr	x8, [x19, #40]
    12d0:	add	x8, x8, x22
    12d4:	cmp	x8, x24
    12d8:	str	x8, [x19, #40]
    12dc:	b.ls	1304 <deflate+0x6a0>  // b.plast
    12e0:	ldr	x9, [x19, #56]
    12e4:	ldr	w9, [x9, #68]
    12e8:	cbz	w9, 1304 <deflate+0x6a0>
    12ec:	ldr	x9, [x19, #16]
    12f0:	ldr	x0, [x20, #96]
    12f4:	sub	w2, w8, w24
    12f8:	add	x1, x9, x24
    12fc:	bl	0 <crc32>
    1300:	str	x0, [x20, #96]
    1304:	str	xzr, [x19, #64]
    1308:	mov	w8, #0x49                  	// #73
    130c:	str	w8, [x19, #8]
    1310:	ldr	x8, [x19, #56]
    1314:	ldr	x8, [x8, #40]
    1318:	cbz	x8, 13d4 <deflate+0x770>
    131c:	ldr	x9, [x19, #40]
    1320:	mov	x8, x9
    1324:	ldr	x10, [x19, #24]
    1328:	cmp	x9, x10
    132c:	b.ne	1370 <deflate+0x70c>  // b.any
    1330:	cmp	x9, x8
    1334:	b.ls	135c <deflate+0x6f8>  // b.plast
    1338:	ldr	x10, [x19, #56]
    133c:	ldr	w10, [x10, #68]
    1340:	cbz	w10, 135c <deflate+0x6f8>
    1344:	ldr	x10, [x19, #16]
    1348:	ldr	x0, [x20, #96]
    134c:	sub	w2, w9, w8
    1350:	add	x1, x10, x8
    1354:	bl	0 <crc32>
    1358:	str	x0, [x20, #96]
    135c:	mov	x0, x20
    1360:	bl	1d7c <flush_pending>
    1364:	ldr	x8, [x19, #40]
    1368:	cbnz	x8, 1bf4 <deflate+0xf90>
    136c:	mov	x9, xzr
    1370:	ldp	x10, x11, [x19, #56]
    1374:	ldr	x10, [x10, #40]
    1378:	add	x12, x11, #0x1
    137c:	str	x12, [x19, #64]
    1380:	add	x12, x9, #0x1
    1384:	ldrb	w10, [x10, x11]
    1388:	ldr	x11, [x19, #16]
    138c:	str	x12, [x19, #40]
    1390:	strb	w10, [x11, x9]
    1394:	cbz	w10, 13a0 <deflate+0x73c>
    1398:	ldr	x9, [x19, #40]
    139c:	b	1324 <deflate+0x6c0>
    13a0:	ldr	x9, [x19, #56]
    13a4:	ldr	w9, [x9, #68]
    13a8:	cbz	w9, 13d0 <deflate+0x76c>
    13ac:	ldr	x9, [x19, #40]
    13b0:	cmp	x9, x8
    13b4:	b.ls	13d0 <deflate+0x76c>  // b.plast
    13b8:	ldr	x10, [x19, #16]
    13bc:	ldr	x0, [x20, #96]
    13c0:	sub	w2, w9, w8
    13c4:	add	x1, x10, x8
    13c8:	bl	0 <crc32>
    13cc:	str	x0, [x20, #96]
    13d0:	str	xzr, [x19, #64]
    13d4:	mov	w8, #0x5b                  	// #91
    13d8:	str	w8, [x19, #8]
    13dc:	ldr	x8, [x19, #56]
    13e0:	ldr	x8, [x8, #56]
    13e4:	cbz	x8, 149c <deflate+0x838>
    13e8:	ldr	x9, [x19, #40]
    13ec:	mov	x8, x9
    13f0:	ldr	x10, [x19, #24]
    13f4:	cmp	x9, x10
    13f8:	b.ne	143c <deflate+0x7d8>  // b.any
    13fc:	cmp	x9, x8
    1400:	b.ls	1428 <deflate+0x7c4>  // b.plast
    1404:	ldr	x10, [x19, #56]
    1408:	ldr	w10, [x10, #68]
    140c:	cbz	w10, 1428 <deflate+0x7c4>
    1410:	ldr	x10, [x19, #16]
    1414:	ldr	x0, [x20, #96]
    1418:	sub	w2, w9, w8
    141c:	add	x1, x10, x8
    1420:	bl	0 <crc32>
    1424:	str	x0, [x20, #96]
    1428:	mov	x0, x20
    142c:	bl	1d7c <flush_pending>
    1430:	ldr	x8, [x19, #40]
    1434:	cbnz	x8, 1bf4 <deflate+0xf90>
    1438:	mov	x9, xzr
    143c:	ldp	x10, x11, [x19, #56]
    1440:	ldr	x10, [x10, #56]
    1444:	add	x12, x11, #0x1
    1448:	str	x12, [x19, #64]
    144c:	add	x12, x9, #0x1
    1450:	ldrb	w10, [x10, x11]
    1454:	ldr	x11, [x19, #16]
    1458:	str	x12, [x19, #40]
    145c:	strb	w10, [x11, x9]
    1460:	cbz	w10, 146c <deflate+0x808>
    1464:	ldr	x9, [x19, #40]
    1468:	b	13f0 <deflate+0x78c>
    146c:	ldr	x9, [x19, #56]
    1470:	ldr	w9, [x9, #68]
    1474:	cbz	w9, 149c <deflate+0x838>
    1478:	ldr	x9, [x19, #40]
    147c:	cmp	x9, x8
    1480:	b.ls	149c <deflate+0x838>  // b.plast
    1484:	ldr	x10, [x19, #16]
    1488:	ldr	x0, [x20, #96]
    148c:	sub	w2, w9, w8
    1490:	add	x1, x10, x8
    1494:	bl	0 <crc32>
    1498:	str	x0, [x20, #96]
    149c:	mov	w8, #0x67                  	// #103
    14a0:	str	w8, [x19, #8]
    14a4:	ldr	x8, [x19, #56]
    14a8:	ldr	w8, [x8, #68]
    14ac:	cbz	w8, 1518 <deflate+0x8b4>
    14b0:	ldr	x8, [x19, #40]
    14b4:	ldr	x9, [x19, #24]
    14b8:	add	x10, x8, #0x2
    14bc:	cmp	x10, x9
    14c0:	b.ls	14d4 <deflate+0x870>  // b.plast
    14c4:	mov	x0, x20
    14c8:	bl	1d7c <flush_pending>
    14cc:	ldr	x8, [x19, #40]
    14d0:	cbnz	x8, 1bf4 <deflate+0xf90>
    14d4:	ldr	x9, [x20, #96]
    14d8:	ldr	x10, [x19, #16]
    14dc:	add	x11, x8, #0x1
    14e0:	str	x11, [x19, #40]
    14e4:	mov	x0, xzr
    14e8:	strb	w9, [x10, x8]
    14ec:	ldr	x8, [x20, #96]
    14f0:	ldr	x9, [x19, #40]
    14f4:	ldr	x10, [x19, #16]
    14f8:	mov	x1, xzr
    14fc:	lsr	x8, x8, #8
    1500:	add	x11, x9, #0x1
    1504:	mov	w2, wzr
    1508:	str	x11, [x19, #40]
    150c:	strb	w8, [x10, x9]
    1510:	bl	0 <crc32>
    1514:	str	x0, [x20, #96]
    1518:	mov	w8, #0x71                  	// #113
    151c:	mov	x0, x20
    1520:	str	w8, [x19, #8]
    1524:	bl	1d7c <flush_pending>
    1528:	ldr	x8, [x19, #40]
    152c:	cbnz	x8, 1bf4 <deflate+0xf90>
    1530:	ldr	w8, [x20, #8]
    1534:	cbnz	w8, 1540 <deflate+0x8dc>
    1538:	ldr	w8, [x19, #180]
    153c:	cbz	w8, 1638 <deflate+0x9d4>
    1540:	ldrsw	x8, [x19, #196]
    1544:	cbz	w8, 1628 <deflate+0x9c4>
    1548:	ldr	w9, [x19, #200]
    154c:	cmp	w9, #0x3
    1550:	b.eq	164c <deflate+0x9e8>  // b.none
    1554:	cmp	w9, #0x2
    1558:	b.ne	18f8 <deflate+0xc94>  // b.any
    155c:	ldr	w8, [x19, #180]
    1560:	cbnz	w8, 1574 <deflate+0x910>
    1564:	mov	x0, x19
    1568:	bl	61c <fill_window>
    156c:	ldr	w8, [x19, #180]
    1570:	cbz	w8, 1918 <deflate+0xcb4>
    1574:	ldr	x8, [x19, #96]
    1578:	ldr	w9, [x19, #172]
    157c:	ldr	x10, [x19, #5904]
    1580:	ldr	w11, [x19, #5900]
    1584:	str	wzr, [x19, #160]
    1588:	ldrb	w8, [x8, x9]
    158c:	strh	wzr, [x10, x11, lsl #1]
    1590:	ldr	x9, [x19, #5888]
    1594:	add	w10, w11, #0x1
    1598:	str	w10, [x19, #5900]
    159c:	add	x10, x19, x8, lsl #2
    15a0:	strb	w8, [x9, x11]
    15a4:	ldrh	w8, [x10, #212]
    15a8:	add	w8, w8, #0x1
    15ac:	strh	w8, [x10, #212]
    15b0:	ldr	w8, [x19, #5896]
    15b4:	ldr	w9, [x19, #180]
    15b8:	ldr	w10, [x19, #172]
    15bc:	ldr	w11, [x19, #5900]
    15c0:	sub	w12, w8, #0x1
    15c4:	sub	w9, w9, #0x1
    15c8:	add	w8, w10, #0x1
    15cc:	cmp	w11, w12
    15d0:	str	w9, [x19, #180]
    15d4:	str	w8, [x19, #172]
    15d8:	b.ne	155c <deflate+0x8f8>  // b.any
    15dc:	ldr	x9, [x19, #152]
    15e0:	tbnz	x9, #63, 15f0 <deflate+0x98c>
    15e4:	ldr	x10, [x19, #96]
    15e8:	add	x1, x10, w9, uxtw
    15ec:	b	15f4 <deflate+0x990>
    15f0:	mov	x1, xzr
    15f4:	mov	w8, w8
    15f8:	sub	x2, x8, x9
    15fc:	mov	x0, x19
    1600:	mov	w3, wzr
    1604:	bl	0 <_tr_flush_block>
    1608:	ldr	w8, [x19, #172]
    160c:	ldr	x0, [x19]
    1610:	str	x8, [x19, #152]
    1614:	bl	1d7c <flush_pending>
    1618:	ldr	x8, [x19]
    161c:	ldr	w8, [x8, #32]
    1620:	cbnz	w8, 155c <deflate+0x8f8>
    1624:	b	1be4 <deflate+0xf80>
    1628:	mov	x0, x19
    162c:	mov	w1, w21
    1630:	bl	1e18 <deflate_stored>
    1634:	b	1994 <deflate+0xd30>
    1638:	cbz	w21, 1a2c <deflate+0xdc8>
    163c:	ldr	w8, [x19, #8]
    1640:	cmp	w8, #0x29a
    1644:	b.ne	1540 <deflate+0x8dc>  // b.any
    1648:	b	1a2c <deflate+0xdc8>
    164c:	adrp	x23, 0 <_length_code>
    1650:	mov	w22, #0x1                   	// #1
    1654:	add	x23, x23, #0x0
    1658:	adrp	x24, 0 <_dist_code>
    165c:	ldr	w8, [x19, #180]
    1660:	cmp	w8, #0x103
    1664:	b.cs	1698 <deflate+0xa34>  // b.hs, b.nlast
    1668:	mov	x0, x19
    166c:	bl	61c <fill_window>
    1670:	ldr	w8, [x19, #180]
    1674:	cbnz	w21, 1680 <deflate+0xa1c>
    1678:	cmp	w8, #0x103
    167c:	b.cc	1be4 <deflate+0xf80>  // b.lo, b.ul, b.last
    1680:	cbz	w8, 191c <deflate+0xcb8>
    1684:	cmp	w8, #0x2
    1688:	str	wzr, [x19, #160]
    168c:	b.hi	169c <deflate+0xa38>  // b.pmore
    1690:	ldr	w9, [x19, #172]
    1694:	b	184c <deflate+0xbe8>
    1698:	str	wzr, [x19, #160]
    169c:	ldr	w9, [x19, #172]
    16a0:	cbz	w9, 184c <deflate+0xbe8>
    16a4:	ldr	x10, [x19, #96]
    16a8:	add	x11, x10, x9
    16ac:	ldurb	w12, [x11, #-1]
    16b0:	ldrb	w10, [x11]
    16b4:	cmp	w12, w10
    16b8:	b.ne	184c <deflate+0xbe8>  // b.any
    16bc:	ldrb	w10, [x11, #1]
    16c0:	cmp	w12, w10
    16c4:	b.ne	184c <deflate+0xbe8>  // b.any
    16c8:	ldrb	w10, [x11, #2]
    16cc:	cmp	w12, w10
    16d0:	b.ne	184c <deflate+0xbe8>  // b.any
    16d4:	mov	x13, xzr
    16d8:	add	x10, x11, #0x102
    16dc:	add	x14, x11, x13
    16e0:	ldrb	w15, [x14, #3]
    16e4:	cmp	w12, w15
    16e8:	b.ne	1768 <deflate+0xb04>  // b.any
    16ec:	ldrb	w14, [x14, #4]
    16f0:	cmp	w12, w14
    16f4:	b.ne	1770 <deflate+0xb0c>  // b.any
    16f8:	add	x14, x11, x13
    16fc:	ldrb	w15, [x14, #5]
    1700:	cmp	w12, w15
    1704:	b.ne	177c <deflate+0xb18>  // b.any
    1708:	ldrb	w14, [x14, #6]
    170c:	cmp	w12, w14
    1710:	b.ne	1784 <deflate+0xb20>  // b.any
    1714:	add	x14, x11, x13
    1718:	ldrb	w15, [x14, #7]
    171c:	cmp	w12, w15
    1720:	b.ne	1790 <deflate+0xb2c>  // b.any
    1724:	ldrb	w14, [x14, #8]
    1728:	cmp	w12, w14
    172c:	b.ne	1798 <deflate+0xb34>  // b.any
    1730:	add	x14, x11, x13
    1734:	ldrb	w15, [x14, #9]
    1738:	cmp	w12, w15
    173c:	b.ne	17a4 <deflate+0xb40>  // b.any
    1740:	add	x15, x13, #0x2
    1744:	cmp	x15, #0xf9
    1748:	add	x13, x13, #0x8
    174c:	b.hi	175c <deflate+0xaf8>  // b.pmore
    1750:	ldrb	w14, [x14, #10]
    1754:	cmp	w12, w14
    1758:	b.eq	16dc <deflate+0xa78>  // b.none
    175c:	add	x11, x11, x13
    1760:	add	x11, x11, #0x2
    1764:	b	17a8 <deflate+0xb44>
    1768:	add	x11, x14, #0x3
    176c:	b	17a8 <deflate+0xb44>
    1770:	add	x11, x11, x13
    1774:	add	x11, x11, #0x4
    1778:	b	17a8 <deflate+0xb44>
    177c:	add	x11, x14, #0x5
    1780:	b	17a8 <deflate+0xb44>
    1784:	add	x11, x11, x13
    1788:	add	x11, x11, #0x6
    178c:	b	17a8 <deflate+0xb44>
    1790:	add	x11, x14, #0x7
    1794:	b	17a8 <deflate+0xb44>
    1798:	add	x11, x11, x13
    179c:	add	x11, x11, #0x8
    17a0:	b	17a8 <deflate+0xb44>
    17a4:	add	x11, x14, #0x9
    17a8:	sub	w10, w11, w10
    17ac:	add	w10, w10, #0x102
    17b0:	cmp	w10, w8
    17b4:	csel	w10, w8, w10, hi  // hi = pmore
    17b8:	subs	w8, w10, #0x3
    17bc:	str	w10, [x19, #160]
    17c0:	b.cc	184c <deflate+0xbe8>  // b.lo, b.ul, b.last
    17c4:	ldr	x9, [x19, #5904]
    17c8:	ldr	w10, [x19, #5900]
    17cc:	strh	w22, [x9, x10, lsl #1]
    17d0:	add	w9, w10, #0x1
    17d4:	ldr	x11, [x19, #5888]
    17d8:	str	w9, [x19, #5900]
    17dc:	and	x9, x8, #0xff
    17e0:	ldrb	w9, [x23, x9]
    17e4:	strb	w8, [x11, x10]
    17e8:	mov	w8, #0x400                 	// #1024
    17ec:	ldrb	w10, [x24]
    17f0:	bfi	x8, x9, #2, #8
    17f4:	add	x8, x8, x19
    17f8:	ldrh	w9, [x8, #216]
    17fc:	add	x10, x19, x10, lsl #2
    1800:	add	w9, w9, #0x1
    1804:	strh	w9, [x8, #216]
    1808:	ldrh	w8, [x10, #2504]
    180c:	add	w8, w8, #0x1
    1810:	strh	w8, [x10, #2504]
    1814:	ldr	w8, [x19, #160]
    1818:	ldr	w9, [x19, #180]
    181c:	ldr	w10, [x19, #172]
    1820:	ldr	w11, [x19, #5896]
    1824:	str	wzr, [x19, #160]
    1828:	sub	w9, w9, w8
    182c:	add	w8, w10, w8
    1830:	ldr	w10, [x19, #5900]
    1834:	sub	w11, w11, #0x1
    1838:	str	w9, [x19, #180]
    183c:	str	w8, [x19, #172]
    1840:	cmp	w10, w11
    1844:	b.ne	165c <deflate+0x9f8>  // b.any
    1848:	b	18ac <deflate+0xc48>
    184c:	ldr	x8, [x19, #96]
    1850:	ldr	x10, [x19, #5904]
    1854:	ldr	w11, [x19, #5900]
    1858:	ldrb	w8, [x8, w9, uxtw]
    185c:	strh	wzr, [x10, x11, lsl #1]
    1860:	ldr	x9, [x19, #5888]
    1864:	add	w10, w11, #0x1
    1868:	str	w10, [x19, #5900]
    186c:	add	x10, x19, x8, lsl #2
    1870:	strb	w8, [x9, x11]
    1874:	ldrh	w8, [x10, #212]
    1878:	add	w8, w8, #0x1
    187c:	strh	w8, [x10, #212]
    1880:	ldr	w8, [x19, #5896]
    1884:	ldr	w9, [x19, #180]
    1888:	ldr	w10, [x19, #172]
    188c:	ldr	w11, [x19, #5900]
    1890:	sub	w12, w8, #0x1
    1894:	sub	w9, w9, #0x1
    1898:	add	w8, w10, #0x1
    189c:	cmp	w11, w12
    18a0:	str	w9, [x19, #180]
    18a4:	str	w8, [x19, #172]
    18a8:	b.ne	165c <deflate+0x9f8>  // b.any
    18ac:	ldr	x9, [x19, #152]
    18b0:	tbnz	x9, #63, 18c0 <deflate+0xc5c>
    18b4:	ldr	x10, [x19, #96]
    18b8:	add	x1, x10, w9, uxtw
    18bc:	b	18c4 <deflate+0xc60>
    18c0:	mov	x1, xzr
    18c4:	mov	w8, w8
    18c8:	sub	x2, x8, x9
    18cc:	mov	x0, x19
    18d0:	mov	w3, wzr
    18d4:	bl	0 <_tr_flush_block>
    18d8:	ldr	w8, [x19, #172]
    18dc:	ldr	x0, [x19]
    18e0:	str	x8, [x19, #152]
    18e4:	bl	1d7c <flush_pending>
    18e8:	ldr	x8, [x19]
    18ec:	ldr	w8, [x8, #32]
    18f0:	cbnz	w8, 165c <deflate+0x9f8>
    18f4:	b	1be4 <deflate+0xf80>
    18f8:	adrp	x9, 0 <deflateInit_>
    18fc:	add	x9, x9, #0x0
    1900:	add	x8, x9, x8, lsl #4
    1904:	ldr	x8, [x8, #8]
    1908:	mov	x0, x19
    190c:	mov	w1, w21
    1910:	blr	x8
    1914:	b	1994 <deflate+0xd30>
    1918:	cbz	w21, 1be4 <deflate+0xf80>
    191c:	cmp	w21, #0x4
    1920:	str	wzr, [x19, #5932]
    1924:	b.ne	193c <deflate+0xcd8>  // b.any
    1928:	ldr	x8, [x19, #152]
    192c:	tbnz	x8, #63, 1958 <deflate+0xcf4>
    1930:	ldr	x9, [x19, #96]
    1934:	add	x1, x9, w8, uxtw
    1938:	b	195c <deflate+0xcf8>
    193c:	ldr	w8, [x19, #5900]
    1940:	cbz	w8, 19b8 <deflate+0xd54>
    1944:	ldr	x8, [x19, #152]
    1948:	tbnz	x8, #63, 1bb0 <deflate+0xf4c>
    194c:	ldr	x9, [x19, #96]
    1950:	add	x1, x9, w8, uxtw
    1954:	b	1bb4 <deflate+0xf50>
    1958:	mov	x1, xzr
    195c:	ldr	w9, [x19, #172]
    1960:	mov	w3, #0x1                   	// #1
    1964:	mov	x0, x19
    1968:	sub	x2, x9, x8
    196c:	bl	0 <_tr_flush_block>
    1970:	ldr	w8, [x19, #172]
    1974:	ldr	x0, [x19]
    1978:	str	x8, [x19, #152]
    197c:	bl	1d7c <flush_pending>
    1980:	ldr	x8, [x19]
    1984:	ldr	w8, [x8, #32]
    1988:	cmp	w8, #0x0
    198c:	mov	w8, #0x2                   	// #2
    1990:	cinc	w0, w8, ne  // ne = any
    1994:	orr	w8, w0, #0x1
    1998:	cmp	w8, #0x3
    199c:	b.ne	19a8 <deflate+0xd44>  // b.any
    19a0:	mov	w8, #0x29a                 	// #666
    19a4:	str	w8, [x19, #8]
    19a8:	tst	w0, #0xfffffffd
    19ac:	b.eq	1be4 <deflate+0xf80>  // b.none
    19b0:	cmp	w0, #0x1
    19b4:	b.ne	1a2c <deflate+0xdc8>  // b.any
    19b8:	cmp	w21, #0x5
    19bc:	b.eq	1a1c <deflate+0xdb8>  // b.none
    19c0:	mov	x0, x19
    19c4:	cmp	w21, #0x1
    19c8:	b.ne	19d4 <deflate+0xd70>  // b.any
    19cc:	bl	0 <_tr_align>
    19d0:	b	1a1c <deflate+0xdb8>
    19d4:	mov	x1, xzr
    19d8:	mov	x2, xzr
    19dc:	mov	w3, wzr
    19e0:	bl	0 <_tr_stored_block>
    19e4:	cmp	w21, #0x3
    19e8:	b.ne	1a1c <deflate+0xdb8>  // b.any
    19ec:	ldr	w8, [x19, #132]
    19f0:	ldr	x0, [x19, #120]
    19f4:	mov	w1, wzr
    19f8:	sub	w8, w8, #0x1
    19fc:	lsl	x2, x8, #1
    1a00:	strh	wzr, [x0, w8, uxtw #1]
    1a04:	bl	0 <memset>
    1a08:	ldr	w8, [x19, #180]
    1a0c:	cbnz	w8, 1a1c <deflate+0xdb8>
    1a10:	str	wzr, [x19, #172]
    1a14:	str	xzr, [x19, #152]
    1a18:	str	wzr, [x19, #5932]
    1a1c:	mov	x0, x20
    1a20:	bl	1d7c <flush_pending>
    1a24:	ldr	w8, [x20, #32]
    1a28:	cbz	w8, 1bf4 <deflate+0xf90>
    1a2c:	cmp	w21, #0x4
    1a30:	b.ne	1bec <deflate+0xf88>  // b.any
    1a34:	ldr	w9, [x19, #48]
    1a38:	cmp	w9, #0x1
    1a3c:	b.lt	1b18 <deflate+0xeb4>  // b.tstop
    1a40:	ldr	x8, [x20, #96]
    1a44:	cmp	w9, #0x2
    1a48:	b.ne	1b20 <deflate+0xebc>  // b.any
    1a4c:	ldr	x9, [x19, #40]
    1a50:	ldr	x10, [x19, #16]
    1a54:	add	x11, x9, #0x1
    1a58:	str	x11, [x19, #40]
    1a5c:	strb	w8, [x10, x9]
    1a60:	ldr	x8, [x20, #96]
    1a64:	ldr	x9, [x19, #40]
    1a68:	ldr	x10, [x19, #16]
    1a6c:	lsr	x8, x8, #8
    1a70:	add	x11, x9, #0x1
    1a74:	str	x11, [x19, #40]
    1a78:	strb	w8, [x10, x9]
    1a7c:	ldr	x8, [x20, #96]
    1a80:	ldr	x9, [x19, #40]
    1a84:	ldr	x10, [x19, #16]
    1a88:	lsr	x8, x8, #16
    1a8c:	add	x11, x9, #0x1
    1a90:	str	x11, [x19, #40]
    1a94:	strb	w8, [x10, x9]
    1a98:	ldr	x8, [x20, #96]
    1a9c:	ldr	x9, [x19, #40]
    1aa0:	ldr	x10, [x19, #16]
    1aa4:	lsr	x8, x8, #24
    1aa8:	add	x11, x9, #0x1
    1aac:	str	x11, [x19, #40]
    1ab0:	strb	w8, [x10, x9]
    1ab4:	ldr	x8, [x19, #40]
    1ab8:	ldr	x9, [x20, #16]
    1abc:	ldr	x10, [x19, #16]
    1ac0:	add	x11, x8, #0x1
    1ac4:	str	x11, [x19, #40]
    1ac8:	strb	w9, [x10, x8]
    1acc:	ldr	x8, [x20, #16]
    1ad0:	ldr	x9, [x19, #40]
    1ad4:	ldr	x10, [x19, #16]
    1ad8:	lsr	x8, x8, #8
    1adc:	add	x11, x9, #0x1
    1ae0:	str	x11, [x19, #40]
    1ae4:	strb	w8, [x10, x9]
    1ae8:	ldr	x8, [x20, #16]
    1aec:	ldr	x9, [x19, #40]
    1af0:	ldr	x10, [x19, #16]
    1af4:	lsr	x8, x8, #16
    1af8:	add	x11, x9, #0x1
    1afc:	str	x11, [x19, #40]
    1b00:	strb	w8, [x10, x9]
    1b04:	ldr	x8, [x20, #16]
    1b08:	ldr	x9, [x19, #40]
    1b0c:	ldr	x10, [x19, #16]
    1b10:	lsr	x8, x8, #24
    1b14:	b	1b74 <deflate+0xf10>
    1b18:	mov	w0, #0x1                   	// #1
    1b1c:	b	cdc <deflate+0x78>
    1b20:	ldr	x9, [x19, #40]
    1b24:	ldr	x10, [x19, #16]
    1b28:	lsr	x11, x8, #24
    1b2c:	lsr	x8, x8, #16
    1b30:	add	x12, x9, #0x1
    1b34:	str	x12, [x19, #40]
    1b38:	strb	w11, [x10, x9]
    1b3c:	ldr	x9, [x19, #40]
    1b40:	ldr	x10, [x19, #16]
    1b44:	add	x11, x9, #0x1
    1b48:	str	x11, [x19, #40]
    1b4c:	strb	w8, [x10, x9]
    1b50:	ldr	x8, [x20, #96]
    1b54:	ldr	x9, [x19, #40]
    1b58:	ldr	x10, [x19, #16]
    1b5c:	ubfx	x11, x8, #8, #24
    1b60:	add	x12, x9, #0x1
    1b64:	str	x12, [x19, #40]
    1b68:	strb	w11, [x10, x9]
    1b6c:	ldr	x9, [x19, #40]
    1b70:	ldr	x10, [x19, #16]
    1b74:	add	x11, x9, #0x1
    1b78:	add	x9, x10, x9
    1b7c:	mov	x0, x20
    1b80:	str	x11, [x19, #40]
    1b84:	strb	w8, [x9]
    1b88:	bl	1d7c <flush_pending>
    1b8c:	ldr	w8, [x19, #48]
    1b90:	cmp	w8, #0x1
    1b94:	b.lt	1ba0 <deflate+0xf3c>  // b.tstop
    1b98:	neg	w8, w8
    1b9c:	str	w8, [x19, #48]
    1ba0:	ldr	x8, [x19, #40]
    1ba4:	cmp	x8, #0x0
    1ba8:	cset	w0, eq  // eq = none
    1bac:	b	cdc <deflate+0x78>
    1bb0:	mov	x1, xzr
    1bb4:	ldr	w9, [x19, #172]
    1bb8:	mov	x0, x19
    1bbc:	mov	w3, wzr
    1bc0:	sub	x2, x9, x8
    1bc4:	bl	0 <_tr_flush_block>
    1bc8:	ldr	w8, [x19, #172]
    1bcc:	ldr	x0, [x19]
    1bd0:	str	x8, [x19, #152]
    1bd4:	bl	1d7c <flush_pending>
    1bd8:	ldr	x8, [x19]
    1bdc:	ldr	w8, [x8, #32]
    1be0:	cbnz	w8, 19b8 <deflate+0xd54>
    1be4:	ldr	w8, [x20, #32]
    1be8:	cbz	w8, 1bf4 <deflate+0xf90>
    1bec:	mov	w0, wzr
    1bf0:	b	cdc <deflate+0x78>
    1bf4:	mov	w8, #0xffffffff            	// #-1
    1bf8:	mov	w0, wzr
    1bfc:	str	w8, [x19, #76]
    1c00:	b	cdc <deflate+0x78>

0000000000001c04 <deflateTune>:
    1c04:	stp	x29, x30, [sp, #-64]!
    1c08:	str	x23, [sp, #16]
    1c0c:	stp	x22, x21, [sp, #32]
    1c10:	stp	x20, x19, [sp, #48]
    1c14:	mov	x29, sp
    1c18:	mov	w19, w4
    1c1c:	mov	w20, w3
    1c20:	mov	w21, w2
    1c24:	mov	w22, w1
    1c28:	mov	x23, x0
    1c2c:	bl	5a0 <deflateStateCheck>
    1c30:	cbz	w0, 1c3c <deflateTune+0x38>
    1c34:	mov	w0, #0xfffffffe            	// #-2
    1c38:	b	1c48 <deflateTune+0x44>
    1c3c:	ldr	x8, [x23, #56]
    1c40:	stp	w22, w20, [x8, #204]
    1c44:	stp	w19, w21, [x8, #188]
    1c48:	ldp	x20, x19, [sp, #48]
    1c4c:	ldp	x22, x21, [sp, #32]
    1c50:	ldr	x23, [sp, #16]
    1c54:	ldp	x29, x30, [sp], #64
    1c58:	ret

0000000000001c5c <deflateBound>:
    1c5c:	stp	x29, x30, [sp, #-48]!
    1c60:	stp	x22, x21, [sp, #16]
    1c64:	add	x21, x1, #0x7
    1c68:	add	x8, x1, x21, lsr #3
    1c6c:	add	x9, x1, #0x3f
    1c70:	stp	x20, x19, [sp, #32]
    1c74:	mov	x29, sp
    1c78:	mov	x19, x1
    1c7c:	mov	x20, x0
    1c80:	add	x22, x8, x9, lsr #6
    1c84:	bl	5a0 <deflateStateCheck>
    1c88:	cbz	w0, 1c94 <deflateBound+0x38>
    1c8c:	add	x0, x22, #0xb
    1c90:	b	1d6c <deflateBound+0x110>
    1c94:	ldr	x8, [x20, #56]
    1c98:	ldr	w9, [x8, #48]
    1c9c:	cbz	w9, 1cc8 <deflateBound+0x6c>
    1ca0:	cmp	w9, #0x2
    1ca4:	b.eq	1cd0 <deflateBound+0x74>  // b.none
    1ca8:	cmp	w9, #0x1
    1cac:	b.ne	1cf0 <deflateBound+0x94>  // b.any
    1cb0:	ldr	w9, [x8, #172]
    1cb4:	mov	w10, #0xa                   	// #10
    1cb8:	cmp	w9, #0x0
    1cbc:	mov	w9, #0x6                   	// #6
    1cc0:	csel	x9, x9, x10, eq  // eq = none
    1cc4:	b	1d3c <deflateBound+0xe0>
    1cc8:	mov	x9, xzr
    1ccc:	b	1d3c <deflateBound+0xe0>
    1cd0:	ldr	x9, [x8, #56]
    1cd4:	cbz	x9, 1cf8 <deflateBound+0x9c>
    1cd8:	ldr	x10, [x9, #24]
    1cdc:	cbz	x10, 1d00 <deflateBound+0xa4>
    1ce0:	ldr	w10, [x9, #32]
    1ce4:	add	w10, w10, #0x2
    1ce8:	add	x10, x10, #0x12
    1cec:	b	1d04 <deflateBound+0xa8>
    1cf0:	mov	w9, #0x6                   	// #6
    1cf4:	b	1d3c <deflateBound+0xe0>
    1cf8:	mov	w9, #0x12                  	// #18
    1cfc:	b	1d3c <deflateBound+0xe0>
    1d00:	mov	w10, #0x12                  	// #18
    1d04:	ldr	x11, [x9, #40]
    1d08:	cbz	x11, 1d18 <deflateBound+0xbc>
    1d0c:	ldrb	w12, [x11], #1
    1d10:	add	x10, x10, #0x1
    1d14:	cbnz	w12, 1d0c <deflateBound+0xb0>
    1d18:	ldr	x11, [x9, #56]
    1d1c:	cbz	x11, 1d2c <deflateBound+0xd0>
    1d20:	ldrb	w12, [x11], #1
    1d24:	add	x10, x10, #0x1
    1d28:	cbnz	w12, 1d20 <deflateBound+0xc4>
    1d2c:	ldr	w9, [x9, #68]
    1d30:	add	x11, x10, #0x2
    1d34:	cmp	w9, #0x0
    1d38:	csel	x9, x10, x11, eq  // eq = none
    1d3c:	ldr	w10, [x8, #84]
    1d40:	cmp	w10, #0xf
    1d44:	b.ne	1d64 <deflateBound+0x108>  // b.any
    1d48:	ldr	w8, [x8, #136]
    1d4c:	cmp	w8, #0xf
    1d50:	b.ne	1d64 <deflateBound+0x108>  // b.any
    1d54:	add	x8, x21, x19, lsr #12
    1d58:	add	x8, x8, x19, lsr #14
    1d5c:	add	x8, x8, x19, lsr #25
    1d60:	b	1d68 <deflateBound+0x10c>
    1d64:	add	x8, x22, #0x5
    1d68:	add	x0, x8, x9
    1d6c:	ldp	x20, x19, [sp, #32]
    1d70:	ldp	x22, x21, [sp, #16]
    1d74:	ldp	x29, x30, [sp], #48
    1d78:	ret

0000000000001d7c <flush_pending>:
    1d7c:	stp	x29, x30, [sp, #-48]!
    1d80:	stp	x20, x19, [sp, #32]
    1d84:	ldr	x19, [x0, #56]
    1d88:	mov	x20, x0
    1d8c:	str	x21, [sp, #16]
    1d90:	mov	x29, sp
    1d94:	mov	x0, x19
    1d98:	bl	0 <_tr_flush_bits>
    1d9c:	ldr	w8, [x19, #40]
    1da0:	ldr	w9, [x20, #32]
    1da4:	cmp	w9, w8
    1da8:	csel	w21, w9, w8, cc  // cc = lo, ul, last
    1dac:	cbz	w21, 1e08 <flush_pending+0x8c>
    1db0:	ldr	x0, [x20, #24]
    1db4:	ldr	x1, [x19, #32]
    1db8:	mov	w2, w21
    1dbc:	bl	0 <memcpy>
    1dc0:	ldr	x8, [x20, #24]
    1dc4:	add	x8, x8, w21, uxtw
    1dc8:	str	x8, [x20, #24]
    1dcc:	ldr	x8, [x19, #32]
    1dd0:	add	x8, x8, w21, uxtw
    1dd4:	str	x8, [x19, #32]
    1dd8:	ldr	x8, [x20, #40]
    1ddc:	ldr	w9, [x20, #32]
    1de0:	add	x8, x8, w21, uxtw
    1de4:	sub	w9, w9, w21
    1de8:	str	x8, [x20, #40]
    1dec:	str	w9, [x20, #32]
    1df0:	ldr	x8, [x19, #40]
    1df4:	subs	x8, x8, w21, uxtw
    1df8:	str	x8, [x19, #40]
    1dfc:	b.ne	1e08 <flush_pending+0x8c>  // b.any
    1e00:	ldr	x8, [x19, #16]
    1e04:	str	x8, [x19, #32]
    1e08:	ldp	x20, x19, [sp, #32]
    1e0c:	ldr	x21, [sp, #16]
    1e10:	ldp	x29, x30, [sp], #48
    1e14:	ret

0000000000001e18 <deflate_stored>:
    1e18:	stp	x29, x30, [sp, #-80]!
    1e1c:	stp	x26, x25, [sp, #16]
    1e20:	stp	x24, x23, [sp, #32]
    1e24:	stp	x22, x21, [sp, #48]
    1e28:	stp	x20, x19, [sp, #64]
    1e2c:	ldr	x8, [x0]
    1e30:	ldr	x9, [x0, #24]
    1e34:	ldr	w10, [x0, #80]
    1e38:	mov	w20, w1
    1e3c:	ldr	w24, [x8, #8]
    1e40:	sub	x9, x9, #0x5
    1e44:	cmp	x9, x10
    1e48:	mov	x19, x0
    1e4c:	csel	w25, w10, w9, hi  // hi = pmore
    1e50:	mov	w26, #0xffff                	// #65535
    1e54:	mov	x29, sp
    1e58:	ldr	w10, [x19, #5940]
    1e5c:	ldr	w9, [x8, #32]
    1e60:	add	w10, w10, #0x2a
    1e64:	cmp	w9, w10, asr #3
    1e68:	b.cc	1ff4 <deflate_stored+0x1dc>  // b.lo, b.ul, b.last
    1e6c:	ldr	w11, [x19, #172]
    1e70:	ldr	w12, [x19, #152]
    1e74:	ldr	w13, [x8, #8]
    1e78:	asr	w10, w10, #3
    1e7c:	sub	w10, w9, w10
    1e80:	sub	w23, w11, w12
    1e84:	add	x11, x23, x13
    1e88:	add	w9, w23, w13
    1e8c:	cmp	x11, x26
    1e90:	csel	w11, w9, w26, cc  // cc = lo, ul, last
    1e94:	cmp	w11, w10
    1e98:	csel	w21, w10, w11, hi  // hi = pmore
    1e9c:	cmp	w21, w25
    1ea0:	b.cs	1ecc <deflate_stored+0xb4>  // b.hs, b.nlast
    1ea4:	cmp	w20, #0x4
    1ea8:	cset	w10, ne  // ne = any
    1eac:	cmp	w21, #0x0
    1eb0:	cset	w11, eq  // eq = none
    1eb4:	cmp	w21, w9
    1eb8:	mov	w22, wzr
    1ebc:	b.ne	1ff8 <deflate_stored+0x1e0>  // b.any
    1ec0:	cbz	w20, 1ff8 <deflate_stored+0x1e0>
    1ec4:	and	w10, w10, w11
    1ec8:	cbnz	w10, 1ff8 <deflate_stored+0x1e0>
    1ecc:	cmp	w20, #0x4
    1ed0:	cset	w8, eq  // eq = none
    1ed4:	cmp	w21, w9
    1ed8:	cset	w9, eq  // eq = none
    1edc:	and	w22, w8, w9
    1ee0:	mov	x0, x19
    1ee4:	mov	x1, xzr
    1ee8:	mov	x2, xzr
    1eec:	mov	w3, w22
    1ef0:	bl	0 <_tr_stored_block>
    1ef4:	ldr	x8, [x19, #16]
    1ef8:	ldr	x9, [x19, #40]
    1efc:	lsr	w10, w21, #8
    1f00:	add	x8, x9, x8
    1f04:	sturb	w21, [x8, #-4]
    1f08:	ldr	x8, [x19, #16]
    1f0c:	ldr	x9, [x19, #40]
    1f10:	add	x8, x9, x8
    1f14:	sturb	w10, [x8, #-3]
    1f18:	ldr	x8, [x19, #16]
    1f1c:	ldr	x9, [x19, #40]
    1f20:	mvn	w10, w21
    1f24:	add	x8, x9, x8
    1f28:	sturb	w10, [x8, #-2]
    1f2c:	ldr	x8, [x19, #16]
    1f30:	ldr	x9, [x19, #40]
    1f34:	lsr	w10, w10, #8
    1f38:	add	x8, x9, x8
    1f3c:	sturb	w10, [x8, #-1]
    1f40:	ldr	x0, [x19]
    1f44:	bl	1d7c <flush_pending>
    1f48:	cbz	w23, 1fa8 <deflate_stored+0x190>
    1f4c:	ldr	x8, [x19]
    1f50:	ldr	x9, [x19, #96]
    1f54:	ldr	x10, [x19, #152]
    1f58:	cmp	w23, w21
    1f5c:	ldr	x0, [x8, #24]
    1f60:	csel	w23, w21, w23, hi  // hi = pmore
    1f64:	add	x1, x9, x10
    1f68:	mov	x2, x23
    1f6c:	bl	0 <memcpy>
    1f70:	ldr	x8, [x19]
    1f74:	sub	w21, w21, w23
    1f78:	ldr	x9, [x8, #24]
    1f7c:	ldr	w10, [x8, #32]
    1f80:	ldr	x11, [x8, #40]
    1f84:	add	x9, x9, x23
    1f88:	sub	w10, w10, w23
    1f8c:	add	x11, x11, x23
    1f90:	str	x9, [x8, #24]
    1f94:	str	w10, [x8, #32]
    1f98:	str	x11, [x8, #40]
    1f9c:	ldr	x8, [x19, #152]
    1fa0:	add	x8, x8, x23
    1fa4:	str	x8, [x19, #152]
    1fa8:	cbz	w21, 1fe4 <deflate_stored+0x1cc>
    1fac:	ldr	x0, [x19]
    1fb0:	mov	w2, w21
    1fb4:	ldr	x1, [x0, #24]
    1fb8:	bl	2f14 <read_buf>
    1fbc:	ldr	x8, [x19]
    1fc0:	ldr	x9, [x8, #24]
    1fc4:	ldr	w10, [x8, #32]
    1fc8:	ldr	x11, [x8, #40]
    1fcc:	add	x9, x9, w21, uxtw
    1fd0:	sub	w10, w10, w21
    1fd4:	add	x11, x11, w21, uxtw
    1fd8:	str	x9, [x8, #24]
    1fdc:	str	w10, [x8, #32]
    1fe0:	str	x11, [x8, #40]
    1fe4:	ldr	x8, [x19]
    1fe8:	cbz	w22, 1e58 <deflate_stored+0x40>
    1fec:	mov	w22, #0x1                   	// #1
    1ff0:	b	1ff8 <deflate_stored+0x1e0>
    1ff4:	mov	w22, wzr
    1ff8:	ldr	w9, [x8, #8]
    1ffc:	subs	w23, w24, w9
    2000:	b.eq	2088 <deflate_stored+0x270>  // b.none
    2004:	ldr	w2, [x19, #80]
    2008:	cmp	w23, w2
    200c:	b.cs	2094 <deflate_stored+0x27c>  // b.hs, b.nlast
    2010:	ldr	x9, [x19, #104]
    2014:	ldr	w8, [x19, #172]
    2018:	mov	w21, w23
    201c:	sub	x9, x9, x8
    2020:	cmp	x9, w23, uxtw
    2024:	b.hi	2054 <deflate_stored+0x23c>  // b.pmore
    2028:	ldr	x0, [x19, #96]
    202c:	sub	w8, w8, w2
    2030:	str	w8, [x19, #172]
    2034:	add	x1, x0, x2
    2038:	mov	x2, x8
    203c:	bl	0 <memcpy>
    2040:	ldr	w8, [x19, #5928]
    2044:	cmp	w8, #0x1
    2048:	b.hi	2054 <deflate_stored+0x23c>  // b.pmore
    204c:	add	w8, w8, #0x1
    2050:	str	w8, [x19, #5928]
    2054:	ldr	x8, [x19]
    2058:	ldr	x9, [x19, #96]
    205c:	ldr	w10, [x19, #172]
    2060:	mov	x2, x21
    2064:	ldr	x8, [x8]
    2068:	add	x0, x9, x10
    206c:	sub	x1, x8, x21
    2070:	bl	0 <memcpy>
    2074:	ldr	w8, [x19, #172]
    2078:	ldr	w9, [x19, #80]
    207c:	add	w8, w8, w23
    2080:	str	w8, [x19, #172]
    2084:	b	20b8 <deflate_stored+0x2a0>
    2088:	ldr	w10, [x19, #172]
    208c:	mov	w8, w10
    2090:	b	20d8 <deflate_stored+0x2c0>
    2094:	mov	w9, #0x2                   	// #2
    2098:	str	w9, [x19, #5928]
    209c:	ldr	x8, [x8]
    20a0:	ldr	x0, [x19, #96]
    20a4:	sub	x1, x8, x2
    20a8:	bl	0 <memcpy>
    20ac:	ldr	w9, [x19, #80]
    20b0:	str	w9, [x19, #172]
    20b4:	mov	w8, w9
    20b8:	ldr	w11, [x19, #5932]
    20bc:	mov	w10, w8
    20c0:	str	x10, [x19, #152]
    20c4:	sub	w9, w9, w11
    20c8:	cmp	w23, w9
    20cc:	csel	w9, w9, w23, hi  // hi = pmore
    20d0:	add	w9, w9, w11
    20d4:	str	w9, [x19, #5932]
    20d8:	ldr	x9, [x19, #5944]
    20dc:	cmp	x9, x10
    20e0:	b.cs	20e8 <deflate_stored+0x2d0>  // b.hs, b.nlast
    20e4:	str	x10, [x19, #5944]
    20e8:	cbz	w22, 20f4 <deflate_stored+0x2dc>
    20ec:	mov	w0, #0x3                   	// #3
    20f0:	b	22b8 <deflate_stored+0x4a0>
    20f4:	ldr	x0, [x19]
    20f8:	tst	w20, #0xfffffffb
    20fc:	ldr	w9, [x0, #8]
    2100:	b.eq	211c <deflate_stored+0x304>  // b.none
    2104:	cbnz	w9, 211c <deflate_stored+0x304>
    2108:	ldr	x9, [x19, #152]
    210c:	cmp	x9, x10
    2110:	b.ne	2180 <deflate_stored+0x368>  // b.any
    2114:	mov	w0, #0x1                   	// #1
    2118:	b	22b8 <deflate_stored+0x4a0>
    211c:	ldr	w10, [x19, #104]
    2120:	mvn	w11, w8
    2124:	add	w21, w10, w11
    2128:	cmp	w9, w21
    212c:	b.ls	2190 <deflate_stored+0x378>  // b.plast
    2130:	ldr	x11, [x19, #152]
    2134:	ldr	w10, [x19, #80]
    2138:	subs	x11, x11, x10
    213c:	b.lt	2190 <deflate_stored+0x378>  // b.tstop
    2140:	ldr	x0, [x19, #96]
    2144:	sub	w2, w8, w10
    2148:	str	x11, [x19, #152]
    214c:	str	w2, [x19, #172]
    2150:	add	x1, x0, x10
    2154:	bl	0 <memcpy>
    2158:	ldr	w8, [x19, #5928]
    215c:	cmp	w8, #0x1
    2160:	b.hi	216c <deflate_stored+0x354>  // b.pmore
    2164:	add	w8, w8, #0x1
    2168:	str	w8, [x19, #5928]
    216c:	ldr	x0, [x19]
    2170:	ldr	w8, [x19, #80]
    2174:	ldr	w9, [x0, #8]
    2178:	add	w21, w8, w21
    217c:	b	2190 <deflate_stored+0x378>
    2180:	ldr	w10, [x19, #104]
    2184:	mvn	w8, w8
    2188:	mov	w9, wzr
    218c:	add	w21, w10, w8
    2190:	cmp	w21, w9
    2194:	csel	w21, w9, w21, hi  // hi = pmore
    2198:	cbz	w21, 21c0 <deflate_stored+0x3a8>
    219c:	ldr	x8, [x19, #96]
    21a0:	ldr	w9, [x19, #172]
    21a4:	mov	w2, w21
    21a8:	add	x1, x8, x9
    21ac:	bl	2f14 <read_buf>
    21b0:	ldr	w8, [x19, #172]
    21b4:	add	w8, w8, w21
    21b8:	str	w8, [x19, #172]
    21bc:	b	21c4 <deflate_stored+0x3ac>
    21c0:	ldr	w8, [x19, #172]
    21c4:	ldr	x9, [x19, #5944]
    21c8:	mov	w10, w8
    21cc:	cmp	x9, w8, uxtw
    21d0:	b.cs	21d8 <deflate_stored+0x3c0>  // b.hs, b.nlast
    21d4:	str	x10, [x19, #5944]
    21d8:	ldr	w9, [x19, #5940]
    21dc:	ldr	x11, [x19, #24]
    21e0:	ldr	w13, [x19, #80]
    21e4:	mov	w12, #0xffff                	// #65535
    21e8:	add	w9, w9, #0x2a
    21ec:	asr	w9, w9, #3
    21f0:	ldr	x8, [x19, #152]
    21f4:	sub	x9, x11, x9
    21f8:	cmp	x9, x12
    21fc:	csel	w9, w9, w12, cc  // cc = lo, ul, last
    2200:	cmp	w13, w9
    2204:	csel	w11, w13, w9, cc  // cc = lo, ul, last
    2208:	sub	w10, w10, w8
    220c:	cmp	w10, w11
    2210:	b.cs	224c <deflate_stored+0x434>  // b.hs, b.nlast
    2214:	cmp	w20, #0x4
    2218:	cset	w11, eq  // eq = none
    221c:	cmp	w10, #0x0
    2220:	mov	w0, wzr
    2224:	cset	w12, ne  // ne = any
    2228:	cbz	w20, 22b8 <deflate_stored+0x4a0>
    222c:	orr	w11, w11, w12
    2230:	cbz	w11, 22b8 <deflate_stored+0x4a0>
    2234:	cmp	w10, w9
    2238:	mov	w0, wzr
    223c:	b.hi	22b8 <deflate_stored+0x4a0>  // b.pmore
    2240:	ldr	x11, [x19]
    2244:	ldr	w11, [x11, #8]
    2248:	cbnz	w11, 22b8 <deflate_stored+0x4a0>
    224c:	cmp	w10, w9
    2250:	csel	w21, w9, w10, hi  // hi = pmore
    2254:	cmp	w20, #0x4
    2258:	b.ne	227c <deflate_stored+0x464>  // b.any
    225c:	ldr	x11, [x19]
    2260:	ldr	w11, [x11, #8]
    2264:	cmp	w11, #0x0
    2268:	cset	w11, eq  // eq = none
    226c:	cmp	w10, w9
    2270:	cset	w9, ls  // ls = plast
    2274:	and	w20, w9, w11
    2278:	b	2280 <deflate_stored+0x468>
    227c:	mov	w20, wzr
    2280:	ldr	x9, [x19, #96]
    2284:	mov	w2, w21
    2288:	mov	x0, x19
    228c:	mov	w3, w20
    2290:	add	x1, x9, x8
    2294:	bl	0 <_tr_stored_block>
    2298:	ldr	x8, [x19, #152]
    229c:	ldr	x0, [x19]
    22a0:	add	x8, x8, w21, uxtw
    22a4:	str	x8, [x19, #152]
    22a8:	bl	1d7c <flush_pending>
    22ac:	cmp	w20, #0x0
    22b0:	mov	w8, #0x2                   	// #2
    22b4:	csel	w0, w8, wzr, ne  // ne = any
    22b8:	ldp	x20, x19, [sp, #64]
    22bc:	ldp	x22, x21, [sp, #48]
    22c0:	ldp	x24, x23, [sp, #32]
    22c4:	ldp	x26, x25, [sp, #16]
    22c8:	ldp	x29, x30, [sp], #80
    22cc:	ret

00000000000022d0 <deflateCopy>:
    22d0:	stp	x29, x30, [sp, #-48]!
    22d4:	stp	x22, x21, [sp, #16]
    22d8:	mov	x21, x0
    22dc:	mov	x0, x1
    22e0:	stp	x20, x19, [sp, #32]
    22e4:	mov	x29, sp
    22e8:	mov	x19, x1
    22ec:	bl	5a0 <deflateStateCheck>
    22f0:	mov	w8, w0
    22f4:	mov	w0, #0xfffffffe            	// #-2
    22f8:	cbz	x21, 2470 <deflateCopy+0x1a0>
    22fc:	cbnz	w8, 2470 <deflateCopy+0x1a0>
    2300:	ldr	x20, [x19, #56]
    2304:	mov	w2, #0x70                  	// #112
    2308:	mov	x0, x21
    230c:	mov	x1, x19
    2310:	bl	0 <memcpy>
    2314:	ldr	x8, [x21, #64]
    2318:	ldr	x0, [x21, #80]
    231c:	mov	w1, #0x1                   	// #1
    2320:	mov	w2, #0x1740                	// #5952
    2324:	blr	x8
    2328:	cbz	x0, 246c <deflateCopy+0x19c>
    232c:	mov	w2, #0x1740                	// #5952
    2330:	mov	x1, x20
    2334:	mov	x19, x0
    2338:	str	x0, [x21, #56]
    233c:	bl	0 <memcpy>
    2340:	str	x21, [x19]
    2344:	ldr	x8, [x21, #64]
    2348:	ldr	x0, [x21, #80]
    234c:	ldr	w1, [x19, #80]
    2350:	mov	w2, #0x2                   	// #2
    2354:	blr	x8
    2358:	str	x0, [x19, #96]
    235c:	ldr	x8, [x21, #64]
    2360:	ldr	x0, [x21, #80]
    2364:	ldr	w1, [x19, #80]
    2368:	mov	w2, #0x2                   	// #2
    236c:	blr	x8
    2370:	str	x0, [x19, #112]
    2374:	ldr	x8, [x21, #64]
    2378:	ldr	x0, [x21, #80]
    237c:	ldr	w1, [x19, #132]
    2380:	mov	w2, #0x2                   	// #2
    2384:	blr	x8
    2388:	str	x0, [x19, #120]
    238c:	ldr	x8, [x21, #64]
    2390:	ldr	x0, [x21, #80]
    2394:	ldr	w1, [x19, #5896]
    2398:	mov	w2, #0x4                   	// #4
    239c:	blr	x8
    23a0:	ldr	x8, [x19, #96]
    23a4:	str	x0, [x19, #16]
    23a8:	cbz	x8, 2464 <deflateCopy+0x194>
    23ac:	ldr	x9, [x19, #112]
    23b0:	cbz	x9, 2464 <deflateCopy+0x194>
    23b4:	mov	x22, x0
    23b8:	cbz	x0, 2464 <deflateCopy+0x194>
    23bc:	ldr	x9, [x19, #120]
    23c0:	cbz	x9, 2464 <deflateCopy+0x194>
    23c4:	ldr	w9, [x19, #80]
    23c8:	ldr	x1, [x20, #96]
    23cc:	mov	x0, x8
    23d0:	lsl	w2, w9, #1
    23d4:	bl	0 <memcpy>
    23d8:	ldr	w8, [x19, #80]
    23dc:	ldr	x0, [x19, #112]
    23e0:	ldr	x1, [x20, #112]
    23e4:	lsl	x2, x8, #1
    23e8:	bl	0 <memcpy>
    23ec:	ldr	w8, [x19, #132]
    23f0:	ldr	x0, [x19, #120]
    23f4:	ldr	x1, [x20, #120]
    23f8:	lsl	x2, x8, #1
    23fc:	bl	0 <memcpy>
    2400:	ldr	x0, [x19, #16]
    2404:	ldr	x1, [x20, #16]
    2408:	ldr	w2, [x19, #24]
    240c:	bl	0 <memcpy>
    2410:	add	x11, x19, #0xd4
    2414:	ldr	x8, [x20, #32]
    2418:	ldr	x9, [x20, #16]
    241c:	str	x11, [x19, #2904]
    2420:	add	x11, x19, #0x9c8
    2424:	ldr	w10, [x19, #5896]
    2428:	str	x11, [x19, #2928]
    242c:	ldr	x11, [x19, #16]
    2430:	sub	x8, x8, x9
    2434:	and	x9, x10, #0xfffffffe
    2438:	add	x10, x10, x10, lsl #1
    243c:	add	x8, x11, x8
    2440:	mov	w0, wzr
    2444:	add	x9, x22, x9
    2448:	add	x10, x11, x10
    244c:	str	x8, [x19, #32]
    2450:	add	x8, x19, #0xabc
    2454:	str	x9, [x19, #5904]
    2458:	str	x10, [x19, #5888]
    245c:	str	x8, [x19, #2952]
    2460:	b	2470 <deflateCopy+0x1a0>
    2464:	mov	x0, x21
    2468:	bl	294 <deflateEnd>
    246c:	mov	w0, #0xfffffffc            	// #-4
    2470:	ldp	x20, x19, [sp, #32]
    2474:	ldp	x22, x21, [sp, #16]
    2478:	ldp	x29, x30, [sp], #48
    247c:	ret

0000000000002480 <deflate_fast>:
    2480:	stp	x29, x30, [sp, #-48]!
    2484:	stp	x22, x21, [sp, #16]
    2488:	adrp	x21, 0 <_length_code>
    248c:	adrp	x22, 0 <_dist_code>
    2490:	stp	x20, x19, [sp, #32]
    2494:	mov	w20, w1
    2498:	mov	x19, x0
    249c:	add	x21, x21, #0x0
    24a0:	add	x22, x22, #0x0
    24a4:	mov	x29, sp
    24a8:	ldr	w8, [x19, #180]
    24ac:	cmp	w8, #0x105
    24b0:	b.hi	24d8 <deflate_fast+0x58>  // b.pmore
    24b4:	mov	x0, x19
    24b8:	bl	61c <fill_window>
    24bc:	ldr	w8, [x19, #180]
    24c0:	cbnz	w20, 24cc <deflate_fast+0x4c>
    24c4:	cmp	w8, #0x106
    24c8:	b.cc	2758 <deflate_fast+0x2d8>  // b.lo, b.ul, b.last
    24cc:	cbz	w8, 276c <deflate_fast+0x2ec>
    24d0:	cmp	w8, #0x3
    24d4:	b.cc	2530 <deflate_fast+0xb0>  // b.lo, b.ul, b.last
    24d8:	ldr	w8, [x19, #172]
    24dc:	ldr	x10, [x19, #96]
    24e0:	ldr	w9, [x19, #128]
    24e4:	ldp	w12, w11, [x19, #140]
    24e8:	add	w13, w8, #0x2
    24ec:	ldrb	w10, [x10, w13, uxtw]
    24f0:	lsl	w9, w9, w11
    24f4:	ldp	x13, x11, [x19, #112]
    24f8:	eor	w9, w9, w10
    24fc:	and	x9, x9, x12
    2500:	ldr	w10, [x19, #88]
    2504:	str	w9, [x19, #128]
    2508:	ldrh	w1, [x11, x9, lsl #1]
    250c:	and	x10, x10, x8
    2510:	strh	w1, [x13, x10, lsl #1]
    2514:	strh	w8, [x11, x9, lsl #1]
    2518:	cbz	w1, 2530 <deflate_fast+0xb0>
    251c:	ldr	w9, [x19, #80]
    2520:	sub	w8, w8, w1
    2524:	sub	w9, w9, #0x106
    2528:	cmp	w8, w9
    252c:	b.ls	2538 <deflate_fast+0xb8>  // b.plast
    2530:	ldr	w0, [x19, #160]
    2534:	b	2544 <deflate_fast+0xc4>
    2538:	mov	x0, x19
    253c:	bl	2cf4 <longest_match>
    2540:	str	w0, [x19, #160]
    2544:	subs	w8, w0, #0x3
    2548:	b.cc	2668 <deflate_fast+0x1e8>  // b.lo, b.ul, b.last
    254c:	ldp	w9, w10, [x19, #172]
    2550:	ldr	x11, [x19, #5904]
    2554:	ldr	w12, [x19, #5900]
    2558:	and	x13, x8, #0xff
    255c:	ldrb	w13, [x21, x13]
    2560:	sub	w9, w9, w10
    2564:	mov	w10, #0x400                 	// #1024
    2568:	strh	w9, [x11, x12, lsl #1]
    256c:	add	w11, w12, #0x1
    2570:	sub	w9, w9, #0x1
    2574:	str	w11, [x19, #5900]
    2578:	bfi	x10, x13, #2, #8
    257c:	ldr	x11, [x19, #5888]
    2580:	and	w13, w9, #0xffff
    2584:	cmp	w13, #0x100
    2588:	ubfx	w13, w9, #7, #9
    258c:	add	w13, w13, #0x100
    2590:	csel	w9, w9, w13, cc  // cc = lo, ul, last
    2594:	add	x10, x10, x19
    2598:	and	x9, x9, #0xffff
    259c:	strb	w8, [x11, x12]
    25a0:	ldrb	w8, [x22, x9]
    25a4:	ldrh	w9, [x10, #216]
    25a8:	add	x8, x19, x8, lsl #2
    25ac:	add	w9, w9, #0x1
    25b0:	strh	w9, [x10, #216]
    25b4:	ldrh	w9, [x8, #2504]
    25b8:	add	w9, w9, #0x1
    25bc:	strh	w9, [x8, #2504]
    25c0:	ldr	w8, [x19, #5896]
    25c4:	ldr	w9, [x19, #160]
    25c8:	ldr	w10, [x19, #180]
    25cc:	ldr	w11, [x19, #5900]
    25d0:	sub	w8, w8, #0x1
    25d4:	sub	w10, w10, w9
    25d8:	cmp	w11, w8
    25dc:	cset	w8, eq  // eq = none
    25e0:	cmp	w10, #0x3
    25e4:	str	w10, [x19, #180]
    25e8:	b.cc	26d4 <deflate_fast+0x254>  // b.lo, b.ul, b.last
    25ec:	ldr	w10, [x19, #192]
    25f0:	cmp	w9, w10
    25f4:	b.hi	26d4 <deflate_fast+0x254>  // b.pmore
    25f8:	ldr	w18, [x19, #172]
    25fc:	ldr	x10, [x19, #96]
    2600:	ldp	w12, w11, [x19, #140]
    2604:	ldp	x14, x13, [x19, #112]
    2608:	ldr	w15, [x19, #88]
    260c:	ldr	w17, [x19, #128]
    2610:	sub	w16, w9, #0x1
    2614:	str	w16, [x19, #160]
    2618:	sub	w16, w9, #0x2
    261c:	add	w9, w18, #0x1
    2620:	str	w9, [x19, #172]
    2624:	add	w18, w9, #0x2
    2628:	ldrb	w18, [x10, w18, uxtw]
    262c:	lsl	w17, w17, w11
    2630:	mov	w0, w9
    2634:	and	x0, x15, x0
    2638:	eor	w17, w17, w18
    263c:	and	x17, x17, x12
    2640:	str	w17, [x19, #128]
    2644:	ldrh	w18, [x13, x17, lsl #1]
    2648:	strh	w18, [x14, x0, lsl #1]
    264c:	strh	w9, [x13, x17, lsl #1]
    2650:	str	w16, [x19, #160]
    2654:	sub	w16, w16, #0x1
    2658:	cmn	w16, #0x1
    265c:	add	w9, w9, #0x1
    2660:	b.ne	2620 <deflate_fast+0x1a0>  // b.any
    2664:	b	26c8 <deflate_fast+0x248>
    2668:	ldr	x8, [x19, #96]
    266c:	ldr	w9, [x19, #172]
    2670:	ldr	x10, [x19, #5904]
    2674:	ldr	w11, [x19, #5900]
    2678:	ldrb	w8, [x8, x9]
    267c:	strh	wzr, [x10, x11, lsl #1]
    2680:	ldr	x9, [x19, #5888]
    2684:	add	w10, w11, #0x1
    2688:	str	w10, [x19, #5900]
    268c:	add	x10, x19, x8, lsl #2
    2690:	strb	w8, [x9, x11]
    2694:	ldrh	w8, [x10, #212]
    2698:	add	w8, w8, #0x1
    269c:	strh	w8, [x10, #212]
    26a0:	ldr	w8, [x19, #5896]
    26a4:	ldr	w11, [x19, #5900]
    26a8:	ldr	w9, [x19, #180]
    26ac:	ldr	w10, [x19, #172]
    26b0:	sub	w8, w8, #0x1
    26b4:	cmp	w11, w8
    26b8:	sub	w12, w9, #0x1
    26bc:	add	w9, w10, #0x1
    26c0:	cset	w8, eq  // eq = none
    26c4:	str	w12, [x19, #180]
    26c8:	str	w9, [x19, #172]
    26cc:	cbz	w8, 24a8 <deflate_fast+0x28>
    26d0:	b	2710 <deflate_fast+0x290>
    26d4:	ldr	w10, [x19, #172]
    26d8:	ldr	x11, [x19, #96]
    26dc:	str	wzr, [x19, #160]
    26e0:	add	w9, w10, w9
    26e4:	str	w9, [x19, #172]
    26e8:	ldrb	w10, [x11, w9, uxtw]
    26ec:	add	w12, w9, #0x1
    26f0:	str	w10, [x19, #128]
    26f4:	ldrb	w11, [x11, w12, uxtw]
    26f8:	ldp	w12, w13, [x19, #140]
    26fc:	lsl	w10, w10, w13
    2700:	eor	w10, w10, w11
    2704:	and	w10, w10, w12
    2708:	str	w10, [x19, #128]
    270c:	cbz	w8, 24a8 <deflate_fast+0x28>
    2710:	ldr	x8, [x19, #152]
    2714:	tbnz	x8, #63, 2724 <deflate_fast+0x2a4>
    2718:	ldr	x10, [x19, #96]
    271c:	add	x1, x10, w8, uxtw
    2720:	b	2728 <deflate_fast+0x2a8>
    2724:	mov	x1, xzr
    2728:	mov	w9, w9
    272c:	sub	x2, x9, x8
    2730:	mov	x0, x19
    2734:	mov	w3, wzr
    2738:	bl	0 <_tr_flush_block>
    273c:	ldr	w8, [x19, #172]
    2740:	ldr	x0, [x19]
    2744:	str	x8, [x19, #152]
    2748:	bl	1d7c <flush_pending>
    274c:	ldr	x8, [x19]
    2750:	ldr	w8, [x8, #32]
    2754:	cbnz	w8, 24a8 <deflate_fast+0x28>
    2758:	mov	w0, wzr
    275c:	ldp	x20, x19, [sp, #32]
    2760:	ldp	x22, x21, [sp, #16]
    2764:	ldp	x29, x30, [sp], #48
    2768:	ret
    276c:	ldr	w8, [x19, #172]
    2770:	mov	w9, #0x2                   	// #2
    2774:	cmp	w8, #0x2
    2778:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    277c:	cmp	w20, #0x4
    2780:	str	w9, [x19, #5932]
    2784:	b.ne	279c <deflate_fast+0x31c>  // b.any
    2788:	ldr	x9, [x19, #152]
    278c:	tbnz	x9, #63, 27b8 <deflate_fast+0x338>
    2790:	ldr	x10, [x19, #96]
    2794:	add	x1, x10, w9, uxtw
    2798:	b	27bc <deflate_fast+0x33c>
    279c:	ldr	w9, [x19, #5900]
    27a0:	cbz	w9, 2824 <deflate_fast+0x3a4>
    27a4:	ldr	x9, [x19, #152]
    27a8:	tbnz	x9, #63, 27f4 <deflate_fast+0x374>
    27ac:	ldr	x10, [x19, #96]
    27b0:	add	x1, x10, w9, uxtw
    27b4:	b	27f8 <deflate_fast+0x378>
    27b8:	mov	x1, xzr
    27bc:	sub	x2, x8, x9
    27c0:	mov	w3, #0x1                   	// #1
    27c4:	mov	x0, x19
    27c8:	bl	0 <_tr_flush_block>
    27cc:	ldr	w8, [x19, #172]
    27d0:	ldr	x0, [x19]
    27d4:	str	x8, [x19, #152]
    27d8:	bl	1d7c <flush_pending>
    27dc:	ldr	x8, [x19]
    27e0:	ldr	w8, [x8, #32]
    27e4:	cmp	w8, #0x0
    27e8:	mov	w8, #0x2                   	// #2
    27ec:	cinc	w0, w8, ne  // ne = any
    27f0:	b	275c <deflate_fast+0x2dc>
    27f4:	mov	x1, xzr
    27f8:	sub	x2, x8, x9
    27fc:	mov	x0, x19
    2800:	mov	w3, wzr
    2804:	bl	0 <_tr_flush_block>
    2808:	ldr	w8, [x19, #172]
    280c:	ldr	x0, [x19]
    2810:	str	x8, [x19, #152]
    2814:	bl	1d7c <flush_pending>
    2818:	ldr	x8, [x19]
    281c:	ldr	w8, [x8, #32]
    2820:	cbz	w8, 2758 <deflate_fast+0x2d8>
    2824:	mov	w0, #0x1                   	// #1
    2828:	b	275c <deflate_fast+0x2dc>

000000000000282c <deflate_slow>:
    282c:	stp	x29, x30, [sp, #-64]!
    2830:	stp	x24, x23, [sp, #16]
    2834:	stp	x22, x21, [sp, #32]
    2838:	adrp	x22, 0 <_length_code>
    283c:	adrp	x23, 0 <_dist_code>
    2840:	stp	x20, x19, [sp, #48]
    2844:	mov	w20, w1
    2848:	mov	x19, x0
    284c:	mov	w21, #0x1                   	// #1
    2850:	add	x22, x22, #0x0
    2854:	add	x23, x23, #0x0
    2858:	mov	w24, #0x2                   	// #2
    285c:	mov	x29, sp
    2860:	ldr	w8, [x19, #180]
    2864:	cmp	w8, #0x105
    2868:	b.hi	2890 <deflate_slow+0x64>  // b.pmore
    286c:	mov	x0, x19
    2870:	bl	61c <fill_window>
    2874:	ldr	w8, [x19, #180]
    2878:	cbnz	w20, 2884 <deflate_slow+0x58>
    287c:	cmp	w8, #0x106
    2880:	b.cc	2cdc <deflate_slow+0x4b0>  // b.lo, b.ul, b.last
    2884:	cbz	w8, 2bd4 <deflate_slow+0x3a8>
    2888:	cmp	w8, #0x2
    288c:	b.ls	2918 <deflate_slow+0xec>  // b.plast
    2890:	ldr	w9, [x19, #172]
    2894:	ldr	x10, [x19, #96]
    2898:	ldr	w8, [x19, #128]
    289c:	ldp	w12, w11, [x19, #140]
    28a0:	add	w13, w9, #0x2
    28a4:	ldrb	w10, [x10, w13, uxtw]
    28a8:	mov	w0, #0x2                   	// #2
    28ac:	lsl	w8, w8, w11
    28b0:	ldp	x13, x11, [x19, #112]
    28b4:	eor	w8, w8, w10
    28b8:	and	x8, x8, x12
    28bc:	ldr	w10, [x19, #88]
    28c0:	str	w8, [x19, #128]
    28c4:	ldrh	w1, [x11, x8, lsl #1]
    28c8:	and	x10, x10, x9
    28cc:	strh	w1, [x13, x10, lsl #1]
    28d0:	strh	w9, [x11, x8, lsl #1]
    28d4:	ldr	w8, [x19, #160]
    28d8:	ldr	w9, [x19, #176]
    28dc:	str	w8, [x19, #184]
    28e0:	stp	w0, w9, [x19, #160]
    28e4:	cbz	w1, 292c <deflate_slow+0x100>
    28e8:	ldr	w9, [x19, #192]
    28ec:	cmp	w8, w9
    28f0:	b.cs	290c <deflate_slow+0xe0>  // b.hs, b.nlast
    28f4:	ldr	w8, [x19, #172]
    28f8:	ldr	w9, [x19, #80]
    28fc:	sub	w8, w8, w1
    2900:	sub	w9, w9, #0x106
    2904:	cmp	w8, w9
    2908:	b.ls	2b00 <deflate_slow+0x2d4>  // b.plast
    290c:	mov	w0, #0x2                   	// #2
    2910:	ldr	w8, [x19, #184]
    2914:	b	292c <deflate_slow+0x100>
    2918:	ldr	w8, [x19, #160]
    291c:	ldr	w9, [x19, #176]
    2920:	mov	w0, #0x2                   	// #2
    2924:	str	w8, [x19, #184]
    2928:	stp	w0, w9, [x19, #160]
    292c:	subs	w9, w8, #0x3
    2930:	b.cc	2a78 <deflate_slow+0x24c>  // b.lo, b.ul, b.last
    2934:	cmp	w0, w8
    2938:	b.hi	2a78 <deflate_slow+0x24c>  // b.pmore
    293c:	ldr	w11, [x19, #164]
    2940:	ldr	w8, [x19, #172]
    2944:	ldr	x12, [x19, #5904]
    2948:	ldr	w13, [x19, #5900]
    294c:	mvn	w11, w11
    2950:	add	w11, w11, w8
    2954:	ldr	w10, [x19, #180]
    2958:	strh	w11, [x12, x13, lsl #1]
    295c:	and	x14, x9, #0xff
    2960:	ldr	x12, [x19, #5888]
    2964:	ldrb	w14, [x22, x14]
    2968:	add	w15, w13, #0x1
    296c:	sub	w11, w11, #0x1
    2970:	str	w15, [x19, #5900]
    2974:	strb	w9, [x12, x13]
    2978:	mov	w9, #0x400                 	// #1024
    297c:	and	w12, w11, #0xffff
    2980:	ubfx	w13, w11, #7, #9
    2984:	bfi	x9, x14, #2, #8
    2988:	add	w13, w13, #0x100
    298c:	cmp	w12, #0x100
    2990:	add	x9, x9, x19
    2994:	csel	w11, w11, w13, cc  // cc = lo, ul, last
    2998:	and	x11, x11, #0xffff
    299c:	ldrh	w12, [x9, #216]
    29a0:	ldrb	w11, [x23, x11]
    29a4:	add	w8, w8, w10
    29a8:	add	w12, w12, #0x1
    29ac:	add	x11, x19, x11, lsl #2
    29b0:	strh	w12, [x9, #216]
    29b4:	ldrh	w12, [x11, #2504]
    29b8:	sub	w9, w8, #0x3
    29bc:	add	w8, w12, #0x1
    29c0:	strh	w8, [x11, #2504]
    29c4:	ldp	w12, w8, [x19, #180]
    29c8:	ldr	w11, [x19, #5896]
    29cc:	ldr	w10, [x19, #5900]
    29d0:	sub	w13, w8, #0x2
    29d4:	str	w13, [x19, #184]
    29d8:	ldr	w13, [x19, #172]
    29dc:	sub	w14, w12, w8
    29e0:	sub	w12, w8, #0x3
    29e4:	add	w8, w14, #0x1
    29e8:	sub	w11, w11, #0x1
    29ec:	str	w8, [x19, #180]
    29f0:	add	w8, w13, #0x1
    29f4:	cmp	w8, w9
    29f8:	str	w8, [x19, #172]
    29fc:	b.hi	2a40 <deflate_slow+0x214>  // b.pmore
    2a00:	ldr	x14, [x19, #96]
    2a04:	ldr	w13, [x19, #128]
    2a08:	add	w15, w8, #0x2
    2a0c:	ldp	w17, w16, [x19, #140]
    2a10:	ldrb	w14, [x14, w15, uxtw]
    2a14:	ldp	x18, x15, [x19, #112]
    2a18:	lsl	w13, w13, w16
    2a1c:	eor	w13, w13, w14
    2a20:	and	x13, x13, x17
    2a24:	ldr	w16, [x19, #88]
    2a28:	str	w13, [x19, #128]
    2a2c:	ldrh	w14, [x15, x13, lsl #1]
    2a30:	mov	w17, w8
    2a34:	and	x16, x16, x17
    2a38:	strh	w14, [x18, x16, lsl #1]
    2a3c:	strh	w8, [x15, x13, lsl #1]
    2a40:	str	w12, [x19, #184]
    2a44:	sub	w12, w12, #0x1
    2a48:	cmn	w12, #0x1
    2a4c:	add	w8, w8, #0x1
    2a50:	b.ne	29f4 <deflate_slow+0x1c8>  // b.any
    2a54:	cmp	w10, w11
    2a58:	str	w24, [x19, #160]
    2a5c:	stp	wzr, w8, [x19, #168]
    2a60:	b.ne	2860 <deflate_slow+0x34>  // b.any
    2a64:	ldr	x9, [x19, #152]
    2a68:	tbnz	x9, #63, 2b44 <deflate_slow+0x318>
    2a6c:	ldr	x10, [x19, #96]
    2a70:	add	x1, x10, w9, uxtw
    2a74:	b	2b48 <deflate_slow+0x31c>
    2a78:	ldr	w8, [x19, #168]
    2a7c:	cbz	w8, 2ae4 <deflate_slow+0x2b8>
    2a80:	ldr	w9, [x19, #172]
    2a84:	ldr	x8, [x19, #96]
    2a88:	ldr	x10, [x19, #5904]
    2a8c:	ldr	w11, [x19, #5900]
    2a90:	sub	w9, w9, #0x1
    2a94:	ldrb	w8, [x8, w9, uxtw]
    2a98:	strh	wzr, [x10, x11, lsl #1]
    2a9c:	ldr	x9, [x19, #5888]
    2aa0:	add	w10, w11, #0x1
    2aa4:	str	w10, [x19, #5900]
    2aa8:	strb	w8, [x9, x11]
    2aac:	add	x8, x19, x8, lsl #2
    2ab0:	ldrh	w9, [x8, #212]
    2ab4:	add	w9, w9, #0x1
    2ab8:	strh	w9, [x8, #212]
    2abc:	ldr	w8, [x19, #5896]
    2ac0:	ldr	w9, [x19, #5900]
    2ac4:	sub	w8, w8, #0x1
    2ac8:	cmp	w9, w8
    2acc:	b.ne	2ba4 <deflate_slow+0x378>  // b.any
    2ad0:	ldr	x8, [x19, #152]
    2ad4:	tbnz	x8, #63, 2b7c <deflate_slow+0x350>
    2ad8:	ldr	x9, [x19, #96]
    2adc:	add	x1, x9, w8, uxtw
    2ae0:	b	2b80 <deflate_slow+0x354>
    2ae4:	ldr	w8, [x19, #172]
    2ae8:	ldr	w9, [x19, #180]
    2aec:	add	w8, w8, #0x1
    2af0:	sub	w9, w9, #0x1
    2af4:	stp	w21, w8, [x19, #168]
    2af8:	str	w9, [x19, #180]
    2afc:	b	2860 <deflate_slow+0x34>
    2b00:	mov	x0, x19
    2b04:	bl	2cf4 <longest_match>
    2b08:	cmp	w0, #0x5
    2b0c:	str	w0, [x19, #160]
    2b10:	b.hi	2910 <deflate_slow+0xe4>  // b.pmore
    2b14:	ldr	w8, [x19, #200]
    2b18:	cmp	w8, #0x1
    2b1c:	b.eq	2b38 <deflate_slow+0x30c>  // b.none
    2b20:	cmp	w0, #0x3
    2b24:	b.ne	2910 <deflate_slow+0xe4>  // b.any
    2b28:	ldp	w8, w9, [x19, #172]
    2b2c:	sub	w8, w8, w9
    2b30:	cmp	w8, #0x1, lsl #12
    2b34:	b.ls	2bcc <deflate_slow+0x3a0>  // b.plast
    2b38:	mov	w0, #0x2                   	// #2
    2b3c:	str	w0, [x19, #160]
    2b40:	b	2910 <deflate_slow+0xe4>
    2b44:	mov	x1, xzr
    2b48:	mov	w8, w8
    2b4c:	sub	x2, x8, x9
    2b50:	mov	x0, x19
    2b54:	mov	w3, wzr
    2b58:	bl	0 <_tr_flush_block>
    2b5c:	ldr	w8, [x19, #172]
    2b60:	ldr	x0, [x19]
    2b64:	str	x8, [x19, #152]
    2b68:	bl	1d7c <flush_pending>
    2b6c:	ldr	x8, [x19]
    2b70:	ldr	w8, [x8, #32]
    2b74:	cbnz	w8, 2860 <deflate_slow+0x34>
    2b78:	b	2cdc <deflate_slow+0x4b0>
    2b7c:	mov	x1, xzr
    2b80:	ldr	w9, [x19, #172]
    2b84:	mov	x0, x19
    2b88:	mov	w3, wzr
    2b8c:	sub	x2, x9, x8
    2b90:	bl	0 <_tr_flush_block>
    2b94:	ldr	w8, [x19, #172]
    2b98:	ldr	x0, [x19]
    2b9c:	str	x8, [x19, #152]
    2ba0:	bl	1d7c <flush_pending>
    2ba4:	ldr	w8, [x19, #172]
    2ba8:	ldr	w9, [x19, #180]
    2bac:	ldr	x10, [x19]
    2bb0:	add	w8, w8, #0x1
    2bb4:	sub	w9, w9, #0x1
    2bb8:	str	w8, [x19, #172]
    2bbc:	str	w9, [x19, #180]
    2bc0:	ldr	w8, [x10, #32]
    2bc4:	cbnz	w8, 2860 <deflate_slow+0x34>
    2bc8:	b	2cdc <deflate_slow+0x4b0>
    2bcc:	mov	w0, #0x3                   	// #3
    2bd0:	b	2910 <deflate_slow+0xe4>
    2bd4:	ldr	w8, [x19, #168]
    2bd8:	cbz	w8, 2c1c <deflate_slow+0x3f0>
    2bdc:	ldr	w9, [x19, #172]
    2be0:	ldr	x8, [x19, #96]
    2be4:	ldr	x10, [x19, #5904]
    2be8:	ldr	w11, [x19, #5900]
    2bec:	sub	w9, w9, #0x1
    2bf0:	ldrb	w8, [x8, w9, uxtw]
    2bf4:	strh	wzr, [x10, x11, lsl #1]
    2bf8:	ldr	x9, [x19, #5888]
    2bfc:	add	w10, w11, #0x1
    2c00:	str	w10, [x19, #5900]
    2c04:	add	x10, x19, x8, lsl #2
    2c08:	strb	w8, [x9, x11]
    2c0c:	ldrh	w8, [x10, #212]
    2c10:	add	w8, w8, #0x1
    2c14:	strh	w8, [x10, #212]
    2c18:	str	wzr, [x19, #168]
    2c1c:	ldr	w8, [x19, #172]
    2c20:	mov	w9, #0x2                   	// #2
    2c24:	cmp	w8, #0x2
    2c28:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    2c2c:	cmp	w20, #0x4
    2c30:	str	w9, [x19, #5932]
    2c34:	b.ne	2c4c <deflate_slow+0x420>  // b.any
    2c38:	ldr	x9, [x19, #152]
    2c3c:	tbnz	x9, #63, 2c68 <deflate_slow+0x43c>
    2c40:	ldr	x10, [x19, #96]
    2c44:	add	x1, x10, w9, uxtw
    2c48:	b	2c6c <deflate_slow+0x440>
    2c4c:	ldr	w9, [x19, #5900]
    2c50:	cbz	w9, 2cd4 <deflate_slow+0x4a8>
    2c54:	ldr	x9, [x19, #152]
    2c58:	tbnz	x9, #63, 2ca4 <deflate_slow+0x478>
    2c5c:	ldr	x10, [x19, #96]
    2c60:	add	x1, x10, w9, uxtw
    2c64:	b	2ca8 <deflate_slow+0x47c>
    2c68:	mov	x1, xzr
    2c6c:	sub	x2, x8, x9
    2c70:	mov	w3, #0x1                   	// #1
    2c74:	mov	x0, x19
    2c78:	bl	0 <_tr_flush_block>
    2c7c:	ldr	w8, [x19, #172]
    2c80:	ldr	x0, [x19]
    2c84:	str	x8, [x19, #152]
    2c88:	bl	1d7c <flush_pending>
    2c8c:	ldr	x8, [x19]
    2c90:	ldr	w8, [x8, #32]
    2c94:	cmp	w8, #0x0
    2c98:	mov	w8, #0x2                   	// #2
    2c9c:	cinc	w0, w8, ne  // ne = any
    2ca0:	b	2ce0 <deflate_slow+0x4b4>
    2ca4:	mov	x1, xzr
    2ca8:	sub	x2, x8, x9
    2cac:	mov	x0, x19
    2cb0:	mov	w3, wzr
    2cb4:	bl	0 <_tr_flush_block>
    2cb8:	ldr	w8, [x19, #172]
    2cbc:	ldr	x0, [x19]
    2cc0:	str	x8, [x19, #152]
    2cc4:	bl	1d7c <flush_pending>
    2cc8:	ldr	x8, [x19]
    2ccc:	ldr	w8, [x8, #32]
    2cd0:	cbz	w8, 2cdc <deflate_slow+0x4b0>
    2cd4:	mov	w0, #0x1                   	// #1
    2cd8:	b	2ce0 <deflate_slow+0x4b4>
    2cdc:	mov	w0, wzr
    2ce0:	ldp	x20, x19, [sp, #48]
    2ce4:	ldp	x22, x21, [sp, #32]
    2ce8:	ldp	x24, x23, [sp, #16]
    2cec:	ldp	x29, x30, [sp], #64
    2cf0:	ret

0000000000002cf4 <longest_match>:
    2cf4:	stp	x22, x21, [sp, #-32]!
    2cf8:	stp	x20, x19, [sp, #16]
    2cfc:	ldr	x8, [x0, #96]
    2d00:	ldr	w15, [x0, #172]
    2d04:	ldr	w14, [x0, #80]
    2d08:	ldp	w12, w17, [x0, #184]
    2d0c:	ldp	w2, w18, [x0, #204]
    2d10:	sxtw	x12, w12
    2d14:	ldr	w11, [x0, #180]
    2d18:	add	x13, x8, x15
    2d1c:	sub	w16, w14, #0x106
    2d20:	add	x5, x13, x12
    2d24:	ldr	x9, [x0, #112]
    2d28:	ldr	w10, [x0, #88]
    2d2c:	subs	w16, w15, w16
    2d30:	ldurb	w4, [x5, #-1]
    2d34:	ldrb	w5, [x5]
    2d38:	lsr	w3, w17, #2
    2d3c:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    2d40:	cmp	w12, w2
    2d44:	csel	w17, w17, w3, cc  // cc = lo, ul, last
    2d48:	cmp	w18, w11
    2d4c:	add	x14, x8, #0x5
    2d50:	add	x15, x13, #0x102
    2d54:	csel	w18, w11, w18, hi  // hi = pmore
    2d58:	mov	w2, #0x102                 	// #258
    2d5c:	mov	x3, #0x10100000000         	// #1103806595072
    2d60:	add	x6, x8, w1, uxtw
    2d64:	ldrb	w7, [x6, w12, sxtw]
    2d68:	cmp	w7, w5, uxtb
    2d6c:	b.ne	2ee0 <longest_match+0x1ec>  // b.any
    2d70:	sxtw	x7, w12
    2d74:	add	x7, x7, x6
    2d78:	ldurb	w7, [x7, #-1]
    2d7c:	cmp	w7, w4, uxtb
    2d80:	b.ne	2ee0 <longest_match+0x1ec>  // b.any
    2d84:	ldrb	w7, [x6]
    2d88:	ldrb	w19, [x13]
    2d8c:	cmp	w7, w19
    2d90:	b.ne	2ee0 <longest_match+0x1ec>  // b.any
    2d94:	ldrb	w6, [x6, #1]
    2d98:	ldrb	w7, [x13, #1]
    2d9c:	cmp	w6, w7
    2da0:	b.ne	2ee0 <longest_match+0x1ec>  // b.any
    2da4:	mov	w7, w1
    2da8:	mov	x6, xzr
    2dac:	add	x7, x14, x7
    2db0:	add	x19, x13, x6
    2db4:	add	x20, x7, x6
    2db8:	ldrb	w21, [x19, #3]
    2dbc:	ldurb	w22, [x20, #-2]
    2dc0:	cmp	w21, w22
    2dc4:	b.ne	2e70 <longest_match+0x17c>  // b.any
    2dc8:	ldrb	w19, [x19, #4]
    2dcc:	ldurb	w20, [x20, #-1]
    2dd0:	cmp	w19, w20
    2dd4:	b.ne	2e78 <longest_match+0x184>  // b.any
    2dd8:	add	x19, x13, x6
    2ddc:	ldrb	w20, [x19, #5]
    2de0:	ldrb	w21, [x7, x6]
    2de4:	cmp	w20, w21
    2de8:	b.ne	2e84 <longest_match+0x190>  // b.any
    2dec:	add	x20, x7, x6
    2df0:	ldrb	w19, [x19, #6]
    2df4:	ldrb	w21, [x20, #1]
    2df8:	cmp	w19, w21
    2dfc:	b.ne	2e8c <longest_match+0x198>  // b.any
    2e00:	add	x19, x13, x6
    2e04:	ldrb	w21, [x19, #7]
    2e08:	ldrb	w20, [x20, #2]
    2e0c:	cmp	w21, w20
    2e10:	b.ne	2e98 <longest_match+0x1a4>  // b.any
    2e14:	add	x20, x7, x6
    2e18:	ldrb	w19, [x19, #8]
    2e1c:	ldrb	w21, [x20, #3]
    2e20:	cmp	w19, w21
    2e24:	b.ne	2ea0 <longest_match+0x1ac>  // b.any
    2e28:	add	x19, x13, x6
    2e2c:	ldrb	w21, [x19, #9]
    2e30:	ldrb	w20, [x20, #4]
    2e34:	cmp	w21, w20
    2e38:	b.ne	2eac <longest_match+0x1b8>  // b.any
    2e3c:	add	x20, x6, #0x2
    2e40:	cmp	x20, #0xf9
    2e44:	add	x20, x6, #0x8
    2e48:	b.hi	2e64 <longest_match+0x170>  // b.pmore
    2e4c:	add	x6, x7, x6
    2e50:	ldrb	w19, [x19, #10]
    2e54:	ldrb	w6, [x6, #5]
    2e58:	cmp	w19, w6
    2e5c:	mov	x6, x20
    2e60:	b.eq	2db0 <longest_match+0xbc>  // b.none
    2e64:	add	x6, x13, x20
    2e68:	add	x6, x6, #0x2
    2e6c:	b	2eb0 <longest_match+0x1bc>
    2e70:	add	x6, x19, #0x3
    2e74:	b	2eb0 <longest_match+0x1bc>
    2e78:	add	x6, x13, x6
    2e7c:	add	x6, x6, #0x4
    2e80:	b	2eb0 <longest_match+0x1bc>
    2e84:	add	x6, x19, #0x5
    2e88:	b	2eb0 <longest_match+0x1bc>
    2e8c:	add	x6, x13, x6
    2e90:	add	x6, x6, #0x6
    2e94:	b	2eb0 <longest_match+0x1bc>
    2e98:	add	x6, x19, #0x7
    2e9c:	b	2eb0 <longest_match+0x1bc>
    2ea0:	add	x6, x13, x6
    2ea4:	add	x6, x6, #0x8
    2ea8:	b	2eb0 <longest_match+0x1bc>
    2eac:	add	x6, x19, #0x9
    2eb0:	sub	x7, x15, x6
    2eb4:	sub	x6, x2, w7, sxtw
    2eb8:	cmp	w6, w12
    2ebc:	b.le	2ee0 <longest_match+0x1ec>
    2ec0:	cmp	w6, w18
    2ec4:	str	w1, [x0, #176]
    2ec8:	b.ge	2f0c <longest_match+0x218>  // b.tcont
    2ecc:	sub	x12, x3, x7, lsl #32
    2ed0:	asr	x12, x12, #32
    2ed4:	ldrb	w4, [x13, x12]
    2ed8:	ldrb	w5, [x13, x6]
    2edc:	mov	w12, w6
    2ee0:	and	x1, x1, x10
    2ee4:	ldrh	w1, [x9, x1, lsl #1]
    2ee8:	cmp	w16, w1
    2eec:	b.cs	2ef8 <longest_match+0x204>  // b.hs, b.nlast
    2ef0:	subs	w17, w17, #0x1
    2ef4:	b.ne	2d60 <longest_match+0x6c>  // b.any
    2ef8:	ldp	x20, x19, [sp, #16]
    2efc:	cmp	w12, w11
    2f00:	csel	w0, w11, w12, hi  // hi = pmore
    2f04:	ldp	x22, x21, [sp], #32
    2f08:	ret
    2f0c:	mov	w12, w6
    2f10:	b	2ef8 <longest_match+0x204>

0000000000002f14 <read_buf>:
    2f14:	stp	x29, x30, [sp, #-48]!
    2f18:	stp	x22, x21, [sp, #16]
    2f1c:	stp	x20, x19, [sp, #32]
    2f20:	ldr	w8, [x0, #8]
    2f24:	mov	x29, sp
    2f28:	cmp	w8, w2
    2f2c:	csel	w20, w2, w8, hi  // hi = pmore
    2f30:	cbz	w20, 2fb0 <read_buf+0x9c>
    2f34:	mov	x22, x1
    2f38:	ldr	x1, [x0]
    2f3c:	sub	w8, w8, w20
    2f40:	mov	w21, w20
    2f44:	mov	x19, x0
    2f48:	str	w8, [x0, #8]
    2f4c:	mov	x0, x22
    2f50:	mov	x2, x21
    2f54:	bl	0 <memcpy>
    2f58:	ldr	x8, [x19, #56]
    2f5c:	ldr	w8, [x8, #48]
    2f60:	cmp	w8, #0x2
    2f64:	b.eq	2f84 <read_buf+0x70>  // b.none
    2f68:	cmp	w8, #0x1
    2f6c:	b.ne	2f98 <read_buf+0x84>  // b.any
    2f70:	ldr	x0, [x19, #96]
    2f74:	mov	x1, x22
    2f78:	mov	w2, w20
    2f7c:	bl	0 <adler32>
    2f80:	b	2f94 <read_buf+0x80>
    2f84:	ldr	x0, [x19, #96]
    2f88:	mov	x1, x22
    2f8c:	mov	w2, w20
    2f90:	bl	0 <crc32>
    2f94:	str	x0, [x19, #96]
    2f98:	ldr	x8, [x19]
    2f9c:	ldr	x9, [x19, #16]
    2fa0:	add	x8, x8, x21
    2fa4:	add	x9, x9, x21
    2fa8:	str	x8, [x19]
    2fac:	str	x9, [x19, #16]
    2fb0:	mov	w0, w20
    2fb4:	ldp	x20, x19, [sp, #32]
    2fb8:	ldp	x22, x21, [sp, #16]
    2fbc:	ldp	x29, x30, [sp], #48
    2fc0:	ret

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x3, bc <inflateBackInit_+0xbc>
  14:	mov	x21, x0
  18:	cmp	w4, #0x70
  1c:	mov	w0, #0xfffffffa            	// #-6
  20:	b.ne	c0 <inflateBackInit_+0xc0>  // b.any
  24:	ldrb	w8, [x3]
  28:	cmp	w8, #0x31
  2c:	b.ne	c0 <inflateBackInit_+0xc0>  // b.any
  30:	and	w8, w1, #0xfffffff8
  34:	mov	w19, w1
  38:	cmp	w8, #0x8
  3c:	mov	w0, #0xfffffffe            	// #-2
  40:	b.ne	c0 <inflateBackInit_+0xc0>  // b.any
  44:	cbz	x21, c0 <inflateBackInit_+0xc0>
  48:	mov	x20, x2
  4c:	cbz	x2, c0 <inflateBackInit_+0xc0>
  50:	ldr	x8, [x21, #64]
  54:	str	xzr, [x21, #48]
  58:	cbnz	x8, 6c <inflateBackInit_+0x6c>
  5c:	adrp	x8, 0 <zcalloc>
  60:	add	x8, x8, #0x0
  64:	str	x8, [x21, #64]
  68:	str	xzr, [x21, #80]
  6c:	ldr	x9, [x21, #72]
  70:	cbnz	x9, 80 <inflateBackInit_+0x80>
  74:	adrp	x9, 0 <zcfree>
  78:	add	x9, x9, #0x0
  7c:	str	x9, [x21, #72]
  80:	ldr	x0, [x21, #80]
  84:	mov	w1, #0x1                   	// #1
  88:	mov	w2, #0x1bf8                	// #7160
  8c:	mov	w22, #0x1                   	// #1
  90:	blr	x8
  94:	cbz	x0, d0 <inflateBackInit_+0xd0>
  98:	mov	x8, x0
  9c:	mov	w0, wzr
  a0:	mov	w9, #0x8000                	// #32768
  a4:	lsl	w10, w22, w19
  a8:	str	x8, [x21, #56]
  ac:	stp	xzr, x20, [x8, #64]
  b0:	str	w9, [x8, #28]
  b4:	stp	w19, w10, [x8, #56]
  b8:	b	c0 <inflateBackInit_+0xc0>
  bc:	mov	w0, #0xfffffffa            	// #-6
  c0:	ldp	x20, x19, [sp, #32]
  c4:	ldp	x22, x21, [sp, #16]
  c8:	ldp	x29, x30, [sp], #48
  cc:	ret
  d0:	mov	w0, #0xfffffffc            	// #-4
  d4:	b	c0 <inflateBackInit_+0xc0>

00000000000000d8 <inflateBack>:
  d8:	sub	sp, sp, #0xd0
  dc:	stp	x29, x30, [sp, #112]
  e0:	add	x29, sp, #0x60
  e4:	str	d8, [sp, #96]
  e8:	stp	x28, x27, [sp, #128]
  ec:	stp	x26, x25, [sp, #144]
  f0:	stp	x24, x23, [sp, #160]
  f4:	stp	x22, x21, [sp, #176]
  f8:	stp	x20, x19, [sp, #192]
  fc:	stp	x1, x2, [x29, #-16]
 100:	cbz	x0, 140 <inflateBack+0x68>
 104:	ldr	x28, [x0, #56]
 108:	mov	x23, x0
 10c:	cbz	x28, 140 <inflateBack+0x68>
 110:	adrp	x8, 0 <inflateBackInit_>
 114:	ldr	d0, [x8]
 118:	str	xzr, [x23, #48]
 11c:	str	wzr, [x28, #64]
 120:	mov	x21, x3
 124:	str	d0, [x28, #8]
 128:	ldr	x8, [x23]
 12c:	stur	x4, [x29, #-32]
 130:	str	x8, [x29, #8]
 134:	cbz	x8, 148 <inflateBack+0x70>
 138:	ldr	w20, [x23, #8]
 13c:	b	14c <inflateBack+0x74>
 140:	mov	w0, #0xfffffffe            	// #-2
 144:	b	eac <inflateBack+0xdd4>
 148:	mov	w20, wzr
 14c:	add	x8, x28, #0x558
 150:	str	x8, [sp, #48]
 154:	add	x8, x28, #0x78
 158:	str	x8, [sp, #40]
 15c:	add	x8, x28, #0x98
 160:	str	x8, [sp, #32]
 164:	add	x8, x28, #0x7c
 168:	str	x8, [sp, #24]
 16c:	adrp	x8, 0 <inflateBackInit_>
 170:	ldr	x27, [x28, #72]
 174:	ldr	w26, [x28, #60]
 178:	ldr	d8, [x8]
 17c:	mov	x25, xzr
 180:	mov	w22, wzr
 184:	add	x19, x28, #0x90
 188:	add	x5, x28, #0x318
 18c:	mov	w8, #0x3f3f                	// #16191
 190:	stur	x19, [x29, #-24]
 194:	mov	w9, #0xffffc0c1            	// #-16191
 198:	add	w9, w8, w9
 19c:	cmp	w9, #0x9
 1a0:	b.hi	e6c <inflateBack+0xd94>  // b.pmore
 1a4:	adrp	x11, 0 <inflateBackInit_>
 1a8:	add	x11, x11, #0x0
 1ac:	adr	x8, 1c0 <inflateBack+0xe8>
 1b0:	ldrh	w10, [x11, x9, lsl #1]
 1b4:	add	x8, x8, x10, lsl #2
 1b8:	mov	x24, x5
 1bc:	br	x8
 1c0:	ldr	w8, [x28, #12]
 1c4:	cbz	w8, 4c8 <inflateBack+0x3f0>
 1c8:	and	w8, w22, #0x7
 1cc:	and	w22, w22, #0xfffffff8
 1d0:	lsr	x25, x25, x8
 1d4:	mov	w8, #0x3f50                	// #16208
 1d8:	b	4c0 <inflateBack+0x3e8>
 1dc:	and	w8, w22, #0x7
 1e0:	and	w22, w22, #0xfffffff8
 1e4:	cmp	w22, #0x1f
 1e8:	lsr	x25, x25, x8
 1ec:	b.hi	2b0 <inflateBack+0x1d8>  // b.pmore
 1f0:	mov	w19, w22
 1f4:	mov	x5, x24
 1f8:	cbnz	w20, 214 <inflateBack+0x13c>
 1fc:	ldp	x8, x0, [x29, #-16]
 200:	add	x1, x29, #0x8
 204:	blr	x8
 208:	mov	x5, x24
 20c:	mov	w20, w0
 210:	cbz	w0, e98 <inflateBack+0xdc0>
 214:	ldr	x8, [x29, #8]
 218:	add	x22, x19, #0x8
 21c:	sub	w20, w20, #0x1
 220:	cmp	x19, #0x18
 224:	add	x9, x8, #0x1
 228:	str	x9, [x29, #8]
 22c:	ldrb	w8, [x8]
 230:	lsl	x8, x8, x19
 234:	add	x25, x8, x25
 238:	mov	x19, x22
 23c:	b.cc	1f8 <inflateBack+0x120>  // b.lo, b.ul, b.last
 240:	ldur	x19, [x29, #-24]
 244:	b	2b4 <inflateBack+0x1dc>
 248:	cmp	w22, #0xd
 24c:	b.hi	370 <inflateBack+0x298>  // b.pmore
 250:	adrp	x13, 0 <inflateBackInit_>
 254:	mov	w19, w22
 258:	add	x13, x13, #0x0
 25c:	cbnz	w20, 27c <inflateBack+0x1a4>
 260:	ldp	x8, x0, [x29, #-16]
 264:	add	x1, x29, #0x8
 268:	blr	x8
 26c:	adrp	x13, 0 <inflateBackInit_>
 270:	add	x13, x13, #0x0
 274:	mov	w20, w0
 278:	cbz	w0, e98 <inflateBack+0xdc0>
 27c:	ldr	x8, [x29, #8]
 280:	add	x22, x19, #0x8
 284:	sub	w20, w20, #0x1
 288:	cmp	x19, #0x6
 28c:	add	x9, x8, #0x1
 290:	str	x9, [x29, #8]
 294:	ldrb	w8, [x8]
 298:	lsl	x8, x8, x19
 29c:	add	x25, x8, x25
 2a0:	mov	x19, x22
 2a4:	b.cc	25c <inflateBack+0x184>  // b.lo, b.ul, b.last
 2a8:	ldur	x19, [x29, #-24]
 2ac:	b	378 <inflateBack+0x2a0>
 2b0:	mov	x5, x24
 2b4:	lsr	x8, x25, #16
 2b8:	eor	x8, x8, #0xffff
 2bc:	cmp	x8, w25, uxth
 2c0:	b.ne	49c <inflateBack+0x3c4>  // b.any
 2c4:	ands	w19, w25, #0xffff
 2c8:	str	w19, [x28, #92]
 2cc:	b.eq	358 <inflateBack+0x280>  // b.none
 2d0:	ldur	x22, [x29, #-32]
 2d4:	cbnz	w20, 2ec <inflateBack+0x214>
 2d8:	ldp	x8, x0, [x29, #-16]
 2dc:	add	x1, x29, #0x8
 2e0:	blr	x8
 2e4:	mov	w20, w0
 2e8:	cbz	w0, e98 <inflateBack+0xdc0>
 2ec:	cbnz	w26, 310 <inflateBack+0x238>
 2f0:	ldr	w26, [x28, #60]
 2f4:	ldr	x27, [x28, #72]
 2f8:	mov	x0, x22
 2fc:	mov	w2, w26
 300:	mov	x1, x27
 304:	str	w26, [x28, #64]
 308:	blr	x21
 30c:	cbnz	w0, e9c <inflateBack+0xdc4>
 310:	cmp	w19, w20
 314:	ldr	x1, [x29, #8]
 318:	csel	w8, w20, w19, hi  // hi = pmore
 31c:	cmp	w8, w26
 320:	csel	w25, w26, w8, hi  // hi = pmore
 324:	mov	x0, x27
 328:	mov	x2, x25
 32c:	bl	0 <memcpy>
 330:	ldr	x8, [x29, #8]
 334:	sub	w20, w20, w25
 338:	sub	w26, w26, w25
 33c:	add	x27, x27, x25
 340:	add	x8, x8, x25
 344:	str	x8, [x29, #8]
 348:	ldr	w8, [x28, #92]
 34c:	subs	w19, w8, w25
 350:	str	w19, [x28, #92]
 354:	b.ne	2d4 <inflateBack+0x1fc>  // b.any
 358:	mov	x25, xzr
 35c:	mov	w22, wzr
 360:	mov	w8, #0x3f3f                	// #16191
 364:	str	w8, [x28, #8]
 368:	ldur	x19, [x29, #-24]
 36c:	b	970 <inflateBack+0x898>
 370:	adrp	x13, 0 <inflateBackInit_>
 374:	add	x13, x13, #0x0
 378:	and	w10, w25, #0x1f
 37c:	ubfx	w9, w25, #5, #5
 380:	ubfx	w8, w25, #10, #4
 384:	lsr	x25, x25, #14
 388:	add	w11, w10, #0x101
 38c:	add	w12, w9, #0x1
 390:	add	w8, w8, #0x4
 394:	cmp	w10, #0x1d
 398:	sub	w22, w22, #0xe
 39c:	stp	w11, w12, [x28, #132]
 3a0:	str	w8, [x28, #128]
 3a4:	b.hi	4b0 <inflateBack+0x3d8>  // b.pmore
 3a8:	cmp	w9, #0x1e
 3ac:	b.cs	4b0 <inflateBack+0x3d8>  // b.hs, b.nlast
 3b0:	mov	w9, wzr
 3b4:	str	wzr, [x28, #140]
 3b8:	cmp	w22, #0x2
 3bc:	b.hi	40c <inflateBack+0x334>  // b.pmore
 3c0:	cbnz	w20, 3e8 <inflateBack+0x310>
 3c4:	ldp	x8, x0, [x29, #-16]
 3c8:	add	x1, x29, #0x8
 3cc:	blr	x8
 3d0:	mov	w20, w0
 3d4:	cbz	w0, e98 <inflateBack+0xdc0>
 3d8:	ldr	w9, [x28, #140]
 3dc:	ldr	w8, [x28, #128]
 3e0:	adrp	x13, 0 <inflateBackInit_>
 3e4:	add	x13, x13, #0x0
 3e8:	ldr	x10, [x29, #8]
 3ec:	sub	w20, w20, #0x1
 3f0:	add	x11, x10, #0x1
 3f4:	str	x11, [x29, #8]
 3f8:	ldrb	w10, [x10]
 3fc:	mov	w11, w22
 400:	add	w22, w22, #0x8
 404:	lsl	x10, x10, x11
 408:	add	x25, x10, x25
 40c:	add	w10, w9, #0x1
 410:	ldrh	w9, [x13, w9, uxtw #1]
 414:	and	w11, w25, #0x7
 418:	lsr	x25, x25, #3
 41c:	str	w10, [x28, #140]
 420:	add	x9, x28, x9, lsl #1
 424:	cmp	w10, w8
 428:	strh	w11, [x9, #152]
 42c:	sub	w22, w22, #0x3
 430:	mov	w9, w10
 434:	b.cc	3b8 <inflateBack+0x2e0>  // b.lo, b.ul, b.last
 438:	cmp	w10, #0x12
 43c:	b.hi	460 <inflateBack+0x388>  // b.pmore
 440:	mov	w8, w10
 444:	ldrh	w9, [x13, x8, lsl #1]
 448:	cmp	x8, #0x12
 44c:	add	x8, x8, #0x1
 450:	add	x9, x28, x9, lsl #1
 454:	strh	wzr, [x9, #152]
 458:	b.cc	444 <inflateBack+0x36c>  // b.lo, b.ul, b.last
 45c:	str	w8, [x28, #140]
 460:	ldp	x4, x8, [sp, #40]
 464:	ldr	x1, [sp, #32]
 468:	mov	w2, #0x13                  	// #19
 46c:	mov	w0, wzr
 470:	str	x8, [x28, #144]
 474:	str	x8, [x28, #104]
 478:	mov	w8, #0x7                   	// #7
 47c:	mov	x3, x19
 480:	mov	x5, x24
 484:	str	w8, [x28, #120]
 488:	bl	0 <inflate_table>
 48c:	cbz	w0, 558 <inflateBack+0x480>
 490:	adrp	x8, 0 <inflateBackInit_>
 494:	add	x8, x8, #0x0
 498:	b	4b8 <inflateBack+0x3e0>
 49c:	adrp	x8, 0 <inflateBackInit_>
 4a0:	add	x8, x8, #0x0
 4a4:	str	x8, [x23, #48]
 4a8:	mov	w8, #0x3f51                	// #16209
 4ac:	b	ba0 <inflateBack+0xac8>
 4b0:	adrp	x8, 0 <inflateBackInit_>
 4b4:	add	x8, x8, #0x0
 4b8:	str	x8, [x23, #48]
 4bc:	mov	w8, #0x3f51                	// #16209
 4c0:	str	w8, [x28, #8]
 4c4:	b	970 <inflateBack+0x898>
 4c8:	cmp	w22, #0x2
 4cc:	b.hi	50c <inflateBack+0x434>  // b.pmore
 4d0:	cbnz	w20, 4e8 <inflateBack+0x410>
 4d4:	ldp	x8, x0, [x29, #-16]
 4d8:	add	x1, x29, #0x8
 4dc:	blr	x8
 4e0:	mov	w20, w0
 4e4:	cbz	w0, e98 <inflateBack+0xdc0>
 4e8:	ldr	x8, [x29, #8]
 4ec:	sub	w20, w20, #0x1
 4f0:	add	x9, x8, #0x1
 4f4:	str	x9, [x29, #8]
 4f8:	ldrb	w8, [x8]
 4fc:	mov	w9, w22
 500:	add	w22, w22, #0x8
 504:	lsl	x8, x8, x9
 508:	add	x25, x8, x25
 50c:	adrp	x11, 0 <inflateBackInit_>
 510:	and	w8, w25, #0x1
 514:	ubfx	w9, w25, #1, #2
 518:	add	x11, x11, #0x0
 51c:	str	w8, [x28, #12]
 520:	adr	x10, 534 <inflateBack+0x45c>
 524:	ldrb	w8, [x11, x9]
 528:	add	x10, x10, x8, lsl #2
 52c:	mov	w8, #0x3f41                	// #16193
 530:	br	x10
 534:	adrp	x8, 0 <inflateBackInit_>
 538:	add	x8, x8, #0x0
 53c:	str	x8, [x28, #104]
 540:	adrp	x8, 0 <inflateBackInit_>
 544:	add	x8, x8, #0x0
 548:	str	x8, [x28, #112]
 54c:	str	d8, [x28, #120]
 550:	mov	w8, #0x3f48                	// #16200
 554:	b	5d8 <inflateBack+0x500>
 558:	ldp	w2, w8, [x28, #132]
 55c:	str	wzr, [x28, #140]
 560:	cmn	w8, w2
 564:	b.ne	5e8 <inflateBack+0x510>  // b.any
 568:	ldr	w8, [x28, #8]
 56c:	mov	w9, #0x3f51                	// #16209
 570:	cmp	w8, w9
 574:	b.eq	970 <inflateBack+0x898>  // b.none
 578:	ldrh	w8, [x28, #664]
 57c:	mov	x5, x24
 580:	cbz	w8, 8b0 <inflateBack+0x7d8>
 584:	ldp	x4, x8, [sp, #40]
 588:	ldr	x1, [sp, #32]
 58c:	mov	w0, #0x1                   	// #1
 590:	mov	x3, x19
 594:	str	x8, [x28, #144]
 598:	str	x8, [x28, #104]
 59c:	mov	w8, #0x9                   	// #9
 5a0:	str	w8, [x28, #120]
 5a4:	str	x5, [sp, #8]
 5a8:	bl	0 <inflate_table>
 5ac:	cbz	w0, 8bc <inflateBack+0x7e4>
 5b0:	adrp	x8, 0 <inflateBackInit_>
 5b4:	ldr	x5, [sp, #8]
 5b8:	add	x8, x8, #0x0
 5bc:	b	4a4 <inflateBack+0x3cc>
 5c0:	mov	w8, #0x3f44                	// #16196
 5c4:	b	5d8 <inflateBack+0x500>
 5c8:	adrp	x8, 0 <inflateBackInit_>
 5cc:	add	x8, x8, #0x0
 5d0:	str	x8, [x23, #48]
 5d4:	mov	w8, #0x3f51                	// #16209
 5d8:	str	w8, [x28, #8]
 5dc:	lsr	x25, x25, #3
 5e0:	sub	w22, w22, #0x3
 5e4:	b	970 <inflateBack+0x898>
 5e8:	str	x23, [sp, #16]
 5ec:	stur	x21, [x29, #-40]
 5f0:	ldr	w9, [x28, #120]
 5f4:	ldr	x8, [x28, #104]
 5f8:	mov	w10, #0xffffffff            	// #-1
 5fc:	lsl	w10, w10, w9
 600:	bic	w10, w25, w10
 604:	add	x10, x8, w10, uxtw #2
 608:	ldrb	w21, [x10, #1]
 60c:	cmp	w22, w21
 610:	b.cs	674 <inflateBack+0x59c>  // b.hs, b.nlast
 614:	mov	w22, w22
 618:	cbnz	w20, 638 <inflateBack+0x560>
 61c:	ldp	x8, x0, [x29, #-16]
 620:	add	x1, x29, #0x8
 624:	blr	x8
 628:	mov	w20, w0
 62c:	cbz	w0, e98 <inflateBack+0xdc0>
 630:	ldr	x8, [x28, #104]
 634:	ldr	w9, [x28, #120]
 638:	ldr	x10, [x29, #8]
 63c:	sub	w20, w20, #0x1
 640:	add	x11, x10, #0x1
 644:	str	x11, [x29, #8]
 648:	ldrb	w10, [x10]
 64c:	lsl	x10, x10, x22
 650:	add	x25, x10, x25
 654:	mov	w10, #0xffffffff            	// #-1
 658:	lsl	w10, w10, w9
 65c:	bic	w10, w25, w10
 660:	add	x10, x8, w10, uxtw #2
 664:	ldrb	w21, [x10, #1]
 668:	add	x22, x22, #0x8
 66c:	cmp	x22, x21
 670:	b.cc	618 <inflateBack+0x540>  // b.lo, b.ul, b.last
 674:	add	x8, x10, #0x2
 678:	ldrh	w8, [x8]
 67c:	cmp	w8, #0xf
 680:	b.hi	6b0 <inflateBack+0x5d8>  // b.pmore
 684:	ldr	w9, [x28, #140]
 688:	lsr	x25, x25, x21
 68c:	sub	w22, w22, w21
 690:	ldur	x21, [x29, #-40]
 694:	add	w10, w9, #0x1
 698:	add	x9, x28, x9, lsl #1
 69c:	str	w10, [x28, #140]
 6a0:	strh	w8, [x9, #152]
 6a4:	ldp	w2, w8, [x28, #132]
 6a8:	add	w11, w8, w2
 6ac:	b	8a4 <inflateBack+0x7cc>
 6b0:	cmp	w8, #0x10
 6b4:	b.eq	748 <inflateBack+0x670>  // b.none
 6b8:	cmp	w8, #0x11
 6bc:	b.ne	7e8 <inflateBack+0x710>  // b.any
 6c0:	add	w19, w21, #0x3
 6c4:	cmp	w22, w19
 6c8:	b.cs	728 <inflateBack+0x650>  // b.hs, b.nlast
 6cc:	mvn	w8, w22
 6d0:	add	w8, w19, w8
 6d4:	add	w8, w8, #0x8
 6d8:	and	w8, w8, #0xfffffff8
 6dc:	mov	w23, w22
 6e0:	add	w22, w8, w22
 6e4:	cbnz	w20, 6fc <inflateBack+0x624>
 6e8:	ldp	x8, x0, [x29, #-16]
 6ec:	add	x1, x29, #0x8
 6f0:	blr	x8
 6f4:	mov	w20, w0
 6f8:	cbz	w0, e94 <inflateBack+0xdbc>
 6fc:	ldr	x8, [x29, #8]
 700:	sub	w20, w20, #0x1
 704:	add	x9, x8, #0x1
 708:	str	x9, [x29, #8]
 70c:	ldrb	w8, [x8]
 710:	lsl	x8, x8, x23
 714:	add	x23, x23, #0x8
 718:	cmp	x23, x19
 71c:	add	x25, x8, x25
 720:	b.cc	6e4 <inflateBack+0x60c>  // b.lo, b.ul, b.last
 724:	ldr	x23, [sp, #16]
 728:	lsr	x9, x25, x21
 72c:	sub	w10, w22, w21
 730:	and	w11, w9, #0x7
 734:	mov	w8, wzr
 738:	lsr	x25, x9, #3
 73c:	add	w9, w11, #0x3
 740:	sub	w22, w10, #0x3
 744:	b	86c <inflateBack+0x794>
 748:	add	w19, w21, #0x2
 74c:	cmp	w22, w19
 750:	b.cs	7b0 <inflateBack+0x6d8>  // b.hs, b.nlast
 754:	mvn	w8, w22
 758:	add	w8, w19, w8
 75c:	add	w8, w8, #0x8
 760:	and	w8, w8, #0xfffffff8
 764:	mov	w23, w22
 768:	add	w22, w8, w22
 76c:	cbnz	w20, 784 <inflateBack+0x6ac>
 770:	ldp	x8, x0, [x29, #-16]
 774:	add	x1, x29, #0x8
 778:	blr	x8
 77c:	mov	w20, w0
 780:	cbz	w0, e94 <inflateBack+0xdbc>
 784:	ldr	x8, [x29, #8]
 788:	sub	w20, w20, #0x1
 78c:	add	x9, x8, #0x1
 790:	str	x9, [x29, #8]
 794:	ldrb	w8, [x8]
 798:	lsl	x8, x8, x23
 79c:	add	x23, x23, #0x8
 7a0:	cmp	x23, x19
 7a4:	add	x25, x8, x25
 7a8:	b.cc	76c <inflateBack+0x694>  // b.lo, b.ul, b.last
 7ac:	ldr	x23, [sp, #16]
 7b0:	ldr	w8, [x28, #140]
 7b4:	ldur	x19, [x29, #-24]
 7b8:	lsr	x25, x25, x21
 7bc:	sub	w22, w22, w21
 7c0:	cbz	w8, e5c <inflateBack+0xd84>
 7c4:	sub	w8, w8, #0x1
 7c8:	add	x8, x28, w8, uxtw #1
 7cc:	ldrh	w8, [x8, #152]
 7d0:	ldur	x21, [x29, #-40]
 7d4:	and	w9, w25, #0x3
 7d8:	add	w9, w9, #0x3
 7dc:	lsr	x25, x25, #2
 7e0:	sub	w22, w22, #0x2
 7e4:	b	874 <inflateBack+0x79c>
 7e8:	add	w19, w21, #0x7
 7ec:	cmp	w22, w19
 7f0:	b.cs	850 <inflateBack+0x778>  // b.hs, b.nlast
 7f4:	mvn	w8, w22
 7f8:	add	w8, w19, w8
 7fc:	add	w8, w8, #0x8
 800:	and	w8, w8, #0xfffffff8
 804:	mov	w23, w22
 808:	add	w22, w8, w22
 80c:	cbnz	w20, 824 <inflateBack+0x74c>
 810:	ldp	x8, x0, [x29, #-16]
 814:	add	x1, x29, #0x8
 818:	blr	x8
 81c:	mov	w20, w0
 820:	cbz	w0, e94 <inflateBack+0xdbc>
 824:	ldr	x8, [x29, #8]
 828:	sub	w20, w20, #0x1
 82c:	add	x9, x8, #0x1
 830:	str	x9, [x29, #8]
 834:	ldrb	w8, [x8]
 838:	lsl	x8, x8, x23
 83c:	add	x23, x23, #0x8
 840:	cmp	x23, x19
 844:	add	x25, x8, x25
 848:	b.cc	80c <inflateBack+0x734>  // b.lo, b.ul, b.last
 84c:	ldr	x23, [sp, #16]
 850:	lsr	x9, x25, x21
 854:	sub	w10, w22, w21
 858:	and	w11, w9, #0x7f
 85c:	mov	w8, wzr
 860:	lsr	x25, x9, #7
 864:	add	w9, w11, #0xb
 868:	sub	w22, w10, #0x7
 86c:	ldur	x21, [x29, #-40]
 870:	ldur	x19, [x29, #-24]
 874:	ldp	w11, w10, [x28, #136]
 878:	ldr	w2, [x28, #132]
 87c:	add	w12, w10, w9
 880:	add	w11, w11, w2
 884:	cmp	w12, w11
 888:	b.hi	8fc <inflateBack+0x824>  // b.pmore
 88c:	subs	w9, w9, #0x1
 890:	add	x12, x28, w10, uxtw #1
 894:	add	w10, w10, #0x1
 898:	strh	w8, [x12, #152]
 89c:	b.ne	88c <inflateBack+0x7b4>  // b.any
 8a0:	str	w10, [x28, #140]
 8a4:	cmp	w10, w11
 8a8:	b.cc	5f0 <inflateBack+0x518>  // b.lo, b.ul, b.last
 8ac:	b	568 <inflateBack+0x490>
 8b0:	adrp	x8, 0 <inflateBackInit_>
 8b4:	add	x8, x8, #0x0
 8b8:	b	4a4 <inflateBack+0x3cc>
 8bc:	ldr	x8, [x28, #144]
 8c0:	ldp	w9, w2, [x28, #132]
 8c4:	ldr	x4, [sp, #24]
 8c8:	ldr	x5, [sp, #8]
 8cc:	str	x8, [x28, #112]
 8d0:	add	x8, x28, x9, lsl #1
 8d4:	mov	w10, #0x6                   	// #6
 8d8:	add	x1, x8, #0x98
 8dc:	mov	w0, #0x2                   	// #2
 8e0:	mov	x3, x19
 8e4:	str	w10, [x28, #124]
 8e8:	bl	0 <inflate_table>
 8ec:	cbz	w0, 904 <inflateBack+0x82c>
 8f0:	adrp	x8, 0 <inflateBackInit_>
 8f4:	add	x8, x8, #0x0
 8f8:	b	4b8 <inflateBack+0x3e0>
 8fc:	adrp	x8, 0 <inflateBackInit_>
 900:	b	e64 <inflateBack+0xd8c>
 904:	mov	w8, #0x3f48                	// #16200
 908:	str	w8, [x28, #8]
 90c:	cmp	w26, #0x102
 910:	b.cc	97c <inflateBack+0x8a4>  // b.lo, b.ul, b.last
 914:	cmp	w20, #0x5
 918:	b.ls	97c <inflateBack+0x8a4>  // b.plast
 91c:	str	x27, [x23, #24]
 920:	str	w26, [x23, #32]
 924:	ldr	x8, [x29, #8]
 928:	str	w20, [x23, #8]
 92c:	str	x8, [x23]
 930:	ldp	w1, w8, [x28, #60]
 934:	str	x25, [x28, #80]
 938:	str	w22, [x28, #88]
 93c:	cmp	w8, w1
 940:	b.cs	94c <inflateBack+0x874>  // b.hs, b.nlast
 944:	sub	w8, w1, w26
 948:	str	w8, [x28, #64]
 94c:	mov	x0, x23
 950:	bl	0 <inflate_fast>
 954:	ldr	x8, [x23]
 958:	ldr	x27, [x23, #24]
 95c:	ldr	w26, [x23, #32]
 960:	str	x8, [x29, #8]
 964:	ldr	w20, [x23, #8]
 968:	ldr	x25, [x28, #80]
 96c:	ldr	w22, [x28, #88]
 970:	mov	x5, x24
 974:	ldr	w8, [x28, #8]
 978:	b	194 <inflateBack+0xbc>
 97c:	ldr	w9, [x28, #120]
 980:	ldr	x8, [x28, #104]
 984:	mov	w19, #0xffffffff            	// #-1
 988:	stur	x21, [x29, #-40]
 98c:	lsl	w10, w19, w9
 990:	bic	w10, w25, w10
 994:	add	x10, x8, w10, uxtw #2
 998:	ldrb	w21, [x10, #1]
 99c:	cmp	w22, w21
 9a0:	b.cs	a00 <inflateBack+0x928>  // b.hs, b.nlast
 9a4:	mov	w22, w22
 9a8:	cbnz	w20, 9c8 <inflateBack+0x8f0>
 9ac:	ldp	x8, x0, [x29, #-16]
 9b0:	add	x1, x29, #0x8
 9b4:	blr	x8
 9b8:	mov	w20, w0
 9bc:	cbz	w0, e98 <inflateBack+0xdc0>
 9c0:	ldr	x8, [x28, #104]
 9c4:	ldr	w9, [x28, #120]
 9c8:	ldr	x10, [x29, #8]
 9cc:	sub	w20, w20, #0x1
 9d0:	add	x11, x10, #0x1
 9d4:	str	x11, [x29, #8]
 9d8:	ldrb	w10, [x10]
 9dc:	lsl	x10, x10, x22
 9e0:	add	x25, x10, x25
 9e4:	lsl	w10, w19, w9
 9e8:	bic	w10, w25, w10
 9ec:	add	x10, x8, w10, uxtw #2
 9f0:	ldrb	w21, [x10, #1]
 9f4:	add	x22, x22, #0x8
 9f8:	cmp	x22, x21
 9fc:	b.cc	9a8 <inflateBack+0x8d0>  // b.lo, b.ul, b.last
 a00:	add	x11, x10, #0x2
 a04:	ldrb	w9, [x10]
 a08:	ldrh	w19, [x11]
 a0c:	cbz	w9, ac8 <inflateBack+0x9f0>
 a10:	and	w10, w9, #0xf0
 a14:	cbnz	w10, ac8 <inflateBack+0x9f0>
 a18:	add	w9, w21, w9
 a1c:	mov	w10, #0xffffffff            	// #-1
 a20:	lsl	w11, w10, w9
 a24:	bic	w9, w25, w11
 a28:	lsr	w9, w9, w21
 a2c:	add	w9, w9, w19
 a30:	add	x10, x8, w9, uxtw #2
 a34:	ldrb	w10, [x10, #1]
 a38:	add	w12, w21, w10
 a3c:	cmp	w12, w22
 a40:	b.ls	ab0 <inflateBack+0x9d8>  // b.plast
 a44:	str	x23, [sp, #16]
 a48:	mvn	w23, w11
 a4c:	cbnz	w20, a68 <inflateBack+0x990>
 a50:	ldp	x8, x0, [x29, #-16]
 a54:	add	x1, x29, #0x8
 a58:	blr	x8
 a5c:	mov	w20, w0
 a60:	cbz	w0, e94 <inflateBack+0xdbc>
 a64:	ldr	x8, [x28, #104]
 a68:	ldr	x9, [x29, #8]
 a6c:	sub	w20, w20, #0x1
 a70:	add	x10, x9, #0x1
 a74:	str	x10, [x29, #8]
 a78:	ldrb	w9, [x9]
 a7c:	lsl	x9, x9, x22
 a80:	add	x25, x9, x25
 a84:	and	w9, w25, w23
 a88:	lsr	w9, w9, w21
 a8c:	add	w9, w9, w19
 a90:	add	x10, x8, w9, uxtw #2
 a94:	ldrb	w10, [x10, #1]
 a98:	add	w22, w22, #0x8
 a9c:	add	w11, w21, w10
 aa0:	cmp	w11, w22
 aa4:	b.hi	a4c <inflateBack+0x974>  // b.pmore
 aa8:	ldr	x23, [sp, #16]
 aac:	mov	w9, w9
 ab0:	add	x8, x8, x9, lsl #2
 ab4:	ldrh	w19, [x8, #2]
 ab8:	ldrb	w9, [x8]
 abc:	lsr	x25, x25, x21
 ac0:	sub	w22, w22, w21
 ac4:	mov	w21, w10
 ac8:	lsr	x25, x25, x21
 acc:	sub	w22, w22, w21
 ad0:	mov	x5, x24
 ad4:	str	w19, [x28, #92]
 ad8:	cbz	w9, b60 <inflateBack+0xa88>
 adc:	tbnz	w9, #5, ba8 <inflateBack+0xad0>
 ae0:	tbnz	w9, #6, bb0 <inflateBack+0xad8>
 ae4:	ands	w8, w9, #0xf
 ae8:	str	w8, [x28, #100]
 aec:	b.eq	bd0 <inflateBack+0xaf8>  // b.none
 af0:	cmp	w22, w8
 af4:	b.cs	b40 <inflateBack+0xa68>  // b.hs, b.nlast
 af8:	cbnz	w20, b14 <inflateBack+0xa3c>
 afc:	ldp	x8, x0, [x29, #-16]
 b00:	add	x1, x29, #0x8
 b04:	blr	x8
 b08:	mov	w20, w0
 b0c:	cbz	w0, e98 <inflateBack+0xdc0>
 b10:	ldr	w8, [x28, #100]
 b14:	ldr	x9, [x29, #8]
 b18:	sub	w20, w20, #0x1
 b1c:	add	x10, x9, #0x1
 b20:	str	x10, [x29, #8]
 b24:	ldrb	w9, [x9]
 b28:	lsl	x9, x9, x22
 b2c:	add	w22, w22, #0x8
 b30:	cmp	w22, w8
 b34:	add	x25, x9, x25
 b38:	b.cc	af8 <inflateBack+0xa20>  // b.lo, b.ul, b.last
 b3c:	ldr	w19, [x28, #92]
 b40:	mov	w10, #0xffffffff            	// #-1
 b44:	lsl	w9, w10, w8
 b48:	bic	w9, w25, w9
 b4c:	lsr	x25, x25, x8
 b50:	add	w9, w19, w9
 b54:	sub	w22, w22, w8
 b58:	str	w9, [x28, #92]
 b5c:	b	bd4 <inflateBack+0xafc>
 b60:	ldur	x21, [x29, #-40]
 b64:	cbnz	w26, b90 <inflateBack+0xab8>
 b68:	ldr	w26, [x28, #60]
 b6c:	ldr	x27, [x28, #72]
 b70:	ldur	x0, [x29, #-32]
 b74:	mov	w2, w26
 b78:	mov	x1, x27
 b7c:	str	w26, [x28, #64]
 b80:	blr	x21
 b84:	cbnz	w0, e9c <inflateBack+0xdc4>
 b88:	ldr	w19, [x28, #92]
 b8c:	mov	x5, x24
 b90:	strb	w19, [x27], #1
 b94:	ldur	x19, [x29, #-24]
 b98:	mov	w8, #0x3f48                	// #16200
 b9c:	sub	w26, w26, #0x1
 ba0:	str	w8, [x28, #8]
 ba4:	b	974 <inflateBack+0x89c>
 ba8:	mov	w8, #0x3f3f                	// #16191
 bac:	b	bc0 <inflateBack+0xae8>
 bb0:	adrp	x8, 0 <inflateBackInit_>
 bb4:	add	x8, x8, #0x0
 bb8:	str	x8, [x23, #48]
 bbc:	mov	w8, #0x3f51                	// #16209
 bc0:	str	w8, [x28, #8]
 bc4:	ldur	x21, [x29, #-40]
 bc8:	ldur	x19, [x29, #-24]
 bcc:	b	974 <inflateBack+0x89c>
 bd0:	mov	w10, #0xffffffff            	// #-1
 bd4:	ldr	w9, [x28, #124]
 bd8:	ldr	x8, [x28, #112]
 bdc:	lsl	w10, w10, w9
 be0:	bic	w10, w25, w10
 be4:	add	x10, x8, w10, uxtw #2
 be8:	ldrb	w19, [x10, #1]
 bec:	cmp	w22, w19
 bf0:	b.cs	c54 <inflateBack+0xb7c>  // b.hs, b.nlast
 bf4:	mov	w22, w22
 bf8:	mov	w19, #0xffffffff            	// #-1
 bfc:	cbnz	w20, c1c <inflateBack+0xb44>
 c00:	ldp	x8, x0, [x29, #-16]
 c04:	add	x1, x29, #0x8
 c08:	blr	x8
 c0c:	mov	w20, w0
 c10:	cbz	w0, e98 <inflateBack+0xdc0>
 c14:	ldr	x8, [x28, #112]
 c18:	ldr	w9, [x28, #124]
 c1c:	ldr	x10, [x29, #8]
 c20:	sub	w20, w20, #0x1
 c24:	add	x11, x10, #0x1
 c28:	str	x11, [x29, #8]
 c2c:	ldrb	w10, [x10]
 c30:	lsl	x10, x10, x22
 c34:	add	x25, x10, x25
 c38:	lsl	w10, w19, w9
 c3c:	bic	w10, w25, w10
 c40:	add	x10, x8, w10, uxtw #2
 c44:	ldrb	w19, [x10, #1]
 c48:	add	x22, x22, #0x8
 c4c:	cmp	x22, x19
 c50:	b.cc	bf8 <inflateBack+0xb20>  // b.lo, b.ul, b.last
 c54:	add	x9, x10, #0x2
 c58:	ldrb	w10, [x10]
 c5c:	ldrh	w21, [x9]
 c60:	tst	w10, #0xf0
 c64:	b.ne	d18 <inflateBack+0xc40>  // b.any
 c68:	add	w9, w19, w10
 c6c:	mov	w10, #0xffffffff            	// #-1
 c70:	lsl	w11, w10, w9
 c74:	bic	w9, w25, w11
 c78:	lsr	w9, w9, w19
 c7c:	add	w10, w9, w21
 c80:	add	x9, x8, w10, uxtw #2
 c84:	ldrb	w9, [x9, #1]
 c88:	add	w12, w19, w9
 c8c:	cmp	w12, w22
 c90:	b.ls	d00 <inflateBack+0xc28>  // b.plast
 c94:	str	x23, [sp, #16]
 c98:	mvn	w23, w11
 c9c:	cbnz	w20, cb8 <inflateBack+0xbe0>
 ca0:	ldp	x8, x0, [x29, #-16]
 ca4:	add	x1, x29, #0x8
 ca8:	blr	x8
 cac:	mov	w20, w0
 cb0:	cbz	w0, e94 <inflateBack+0xdbc>
 cb4:	ldr	x8, [x28, #112]
 cb8:	ldr	x9, [x29, #8]
 cbc:	sub	w20, w20, #0x1
 cc0:	add	x10, x9, #0x1
 cc4:	str	x10, [x29, #8]
 cc8:	ldrb	w9, [x9]
 ccc:	lsl	x9, x9, x22
 cd0:	add	x25, x9, x25
 cd4:	and	w9, w25, w23
 cd8:	lsr	w9, w9, w19
 cdc:	add	w10, w9, w21
 ce0:	add	x9, x8, w10, uxtw #2
 ce4:	ldrb	w9, [x9, #1]
 ce8:	add	w22, w22, #0x8
 cec:	add	w11, w19, w9
 cf0:	cmp	w11, w22
 cf4:	b.hi	c9c <inflateBack+0xbc4>  // b.pmore
 cf8:	ldr	x23, [sp, #16]
 cfc:	mov	w10, w10
 d00:	add	x8, x8, x10, lsl #2
 d04:	ldrh	w21, [x8, #2]
 d08:	ldrb	w10, [x8]
 d0c:	lsr	x25, x25, x19
 d10:	sub	w22, w22, w19
 d14:	mov	w19, w9
 d18:	lsr	x25, x25, x19
 d1c:	sub	w22, w22, w19
 d20:	tbnz	w10, #6, dcc <inflateBack+0xcf4>
 d24:	ands	w8, w10, #0xf
 d28:	stp	w21, w8, [x28, #96]
 d2c:	ldur	x19, [x29, #-24]
 d30:	b.eq	da0 <inflateBack+0xcc8>  // b.none
 d34:	cmp	w22, w8
 d38:	b.cs	d84 <inflateBack+0xcac>  // b.hs, b.nlast
 d3c:	cbnz	w20, d58 <inflateBack+0xc80>
 d40:	ldp	x8, x0, [x29, #-16]
 d44:	add	x1, x29, #0x8
 d48:	blr	x8
 d4c:	mov	w20, w0
 d50:	cbz	w0, e98 <inflateBack+0xdc0>
 d54:	ldr	w8, [x28, #100]
 d58:	ldr	x9, [x29, #8]
 d5c:	sub	w20, w20, #0x1
 d60:	add	x10, x9, #0x1
 d64:	str	x10, [x29, #8]
 d68:	ldrb	w9, [x9]
 d6c:	lsl	x9, x9, x22
 d70:	add	w22, w22, #0x8
 d74:	cmp	w22, w8
 d78:	add	x25, x9, x25
 d7c:	b.cc	d3c <inflateBack+0xc64>  // b.lo, b.ul, b.last
 d80:	ldr	w21, [x28, #96]
 d84:	mov	w9, #0xffffffff            	// #-1
 d88:	lsl	w9, w9, w8
 d8c:	bic	w9, w25, w9
 d90:	lsr	x25, x25, x8
 d94:	add	w21, w21, w9
 d98:	sub	w22, w22, w8
 d9c:	str	w21, [x28, #96]
 da0:	ldp	w8, w9, [x28, #60]
 da4:	mov	x5, x24
 da8:	cmp	w9, w8
 dac:	csel	w9, w26, wzr, cc  // cc = lo, ul, last
 db0:	sub	w8, w8, w9
 db4:	cmp	w21, w8
 db8:	b.ls	de4 <inflateBack+0xd0c>  // b.plast
 dbc:	ldur	x21, [x29, #-40]
 dc0:	adrp	x8, 0 <inflateBackInit_>
 dc4:	add	x8, x8, #0x0
 dc8:	b	4a4 <inflateBack+0x3cc>
 dcc:	adrp	x8, 0 <inflateBackInit_>
 dd0:	ldur	x21, [x29, #-40]
 dd4:	add	x8, x8, #0x0
 dd8:	str	x8, [x23, #48]
 ddc:	mov	w8, #0x3f51                	// #16209
 de0:	b	364 <inflateBack+0x28c>
 de4:	ldur	x21, [x29, #-40]
 de8:	cbnz	w26, e0c <inflateBack+0xd34>
 dec:	ldr	w26, [x28, #60]
 df0:	ldr	x27, [x28, #72]
 df4:	ldur	x0, [x29, #-32]
 df8:	mov	w2, w26
 dfc:	mov	x1, x27
 e00:	str	w26, [x28, #64]
 e04:	blr	x21
 e08:	cbnz	w0, e9c <inflateBack+0xdc4>
 e0c:	ldr	w8, [x28, #60]
 e10:	ldp	w10, w9, [x28, #92]
 e14:	sub	w8, w8, w9
 e18:	cmp	w26, w8
 e1c:	csel	w11, w8, wzr, hi  // hi = pmore
 e20:	csneg	x9, x8, x9, hi  // hi = pmore
 e24:	sub	w8, w26, w11
 e28:	cmp	w8, w10
 e2c:	csel	w8, w10, w8, hi  // hi = pmore
 e30:	sub	w10, w10, w8
 e34:	str	w10, [x28, #92]
 e38:	mov	w10, w8
 e3c:	ldrb	w11, [x27, x9]
 e40:	subs	w10, w10, #0x1
 e44:	strb	w11, [x27], #1
 e48:	b.ne	e3c <inflateBack+0xd64>  // b.any
 e4c:	ldr	w9, [x28, #92]
 e50:	sub	w26, w26, w8
 e54:	cbnz	w9, de8 <inflateBack+0xd10>
 e58:	b	970 <inflateBack+0x898>
 e5c:	adrp	x8, 0 <inflateBackInit_>
 e60:	ldur	x21, [x29, #-40]
 e64:	add	x8, x8, #0x0
 e68:	b	4b8 <inflateBack+0x3e0>
 e6c:	mov	w9, #0x3f50                	// #16208
 e70:	cmp	w8, w9
 e74:	b.eq	ed0 <inflateBack+0xdf8>  // b.none
 e78:	mov	w9, #0x3f51                	// #16209
 e7c:	cmp	w8, w9
 e80:	b.ne	e8c <inflateBack+0xdb4>  // b.any
 e84:	mov	w0, #0xfffffffd            	// #-3
 e88:	b	ea0 <inflateBack+0xdc8>
 e8c:	mov	w0, #0xfffffffe            	// #-2
 e90:	b	ea0 <inflateBack+0xdc8>
 e94:	ldr	x23, [sp, #16]
 e98:	str	xzr, [x29, #8]
 e9c:	mov	w0, #0xfffffffb            	// #-5
 ea0:	ldr	x8, [x29, #8]
 ea4:	str	w20, [x23, #8]
 ea8:	str	x8, [x23]
 eac:	ldp	x20, x19, [sp, #192]
 eb0:	ldp	x22, x21, [sp, #176]
 eb4:	ldp	x24, x23, [sp, #160]
 eb8:	ldp	x26, x25, [sp, #144]
 ebc:	ldp	x28, x27, [sp, #128]
 ec0:	ldp	x29, x30, [sp, #112]
 ec4:	ldr	d8, [sp, #96]
 ec8:	add	sp, sp, #0xd0
 ecc:	ret
 ed0:	ldr	w8, [x28, #60]
 ed4:	subs	w2, w8, w26
 ed8:	b.ls	ef8 <inflateBack+0xe20>  // b.plast
 edc:	ldr	x1, [x28, #72]
 ee0:	ldur	x0, [x29, #-32]
 ee4:	blr	x21
 ee8:	cmp	w0, #0x0
 eec:	mov	w8, #0xfffffffb            	// #-5
 ef0:	csinc	w0, w8, wzr, ne  // ne = any
 ef4:	b	ea0 <inflateBack+0xdc8>
 ef8:	mov	w0, #0x1                   	// #1
 efc:	b	ea0 <inflateBack+0xdc8>

0000000000000f00 <inflateBackEnd>:
 f00:	stp	x29, x30, [sp, #-32]!
 f04:	str	x19, [sp, #16]
 f08:	mov	x29, sp
 f0c:	cbz	x0, f38 <inflateBackEnd+0x38>
 f10:	ldr	x1, [x0, #56]
 f14:	mov	x19, x0
 f18:	cbz	x1, f38 <inflateBackEnd+0x38>
 f1c:	ldr	x8, [x19, #72]
 f20:	cbz	x8, f38 <inflateBackEnd+0x38>
 f24:	ldr	x0, [x19, #80]
 f28:	blr	x8
 f2c:	mov	w0, wzr
 f30:	str	xzr, [x19, #56]
 f34:	b	f3c <inflateBackEnd+0x3c>
 f38:	mov	w0, #0xfffffffe            	// #-2
 f3c:	ldr	x19, [sp, #16]
 f40:	ldp	x29, x30, [sp], #32
 f44:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x28, x27, [sp, #-80]!
   4:	stp	x26, x25, [sp, #16]
   8:	stp	x24, x23, [sp, #32]
   c:	stp	x22, x21, [sp, #48]
  10:	stp	x20, x19, [sp, #64]
  14:	ldr	x8, [x0, #56]
  18:	ldr	w12, [x0, #32]
  1c:	ldr	w11, [x0, #8]
  20:	ldr	x9, [x0, #24]
  24:	ldp	w19, w20, [x8, #120]
  28:	ldr	x10, [x0]
  2c:	sub	w15, w1, w12
  30:	ldp	w18, w1, [x8, #60]
  34:	ldr	w2, [x8, #68]
  38:	mov	w16, #0xffffffff            	// #-1
  3c:	sub	w13, w11, #0x5
  40:	ldp	x3, x11, [x8, #72]
  44:	ldr	w14, [x8, #88]
  48:	ldp	x4, x5, [x8, #104]
  4c:	sub	x6, x9, x15
  50:	lsl	w15, w16, w19
  54:	adrp	x17, 0 <inflate_fast>
  58:	sub	w7, w12, #0x101
  5c:	lsl	w20, w16, w20
  60:	mvn	w19, w15
  64:	adrp	x15, 0 <inflate_fast>
  68:	add	x17, x17, #0x0
  6c:	add	x12, x10, x13
  70:	add	x13, x9, x7
  74:	add	w7, w2, w18
  78:	mvn	w20, w20
  7c:	add	x15, x15, #0x0
  80:	cmp	w14, #0xe
  84:	b.hi	ac <inflate_fast+0xac>  // b.pmore
  88:	ldrb	w21, [x10]
  8c:	ldrb	w22, [x10, #1]
  90:	add	w23, w14, #0x8
  94:	add	x10, x10, #0x2
  98:	lsl	x21, x21, x14
  9c:	lsl	x22, x22, x23
  a0:	add	x11, x21, x11
  a4:	add	x11, x11, x22
  a8:	add	w14, w14, #0x10
  ac:	and	x21, x11, x19
  b0:	add	x21, x4, x21, lsl #2
  b4:	ldrb	w23, [x21, #1]
  b8:	ldrb	w22, [x21]
  bc:	ldrh	w21, [x21, #2]
  c0:	lsr	x11, x11, x23
  c4:	sub	w14, w14, w23
  c8:	cbz	w22, ec <inflate_fast+0xec>
  cc:	and	w23, w22, #0xff
  d0:	tbnz	w22, #4, 104 <inflate_fast+0x104>
  d4:	tbnz	w23, #6, 3ec <inflate_fast+0x3ec>
  d8:	lsl	w22, w16, w23
  dc:	mvn	w22, w22
  e0:	and	x22, x11, x22
  e4:	add	x21, x22, w21, uxth
  e8:	b	b0 <inflate_fast+0xb0>
  ec:	strb	w21, [x9], #1
  f0:	cmp	x9, x13
  f4:	b.cs	414 <inflate_fast+0x414>  // b.hs, b.nlast
  f8:	cmp	x10, x12
  fc:	b.cc	80 <inflate_fast+0x80>  // b.lo, b.ul, b.last
 100:	b	414 <inflate_fast+0x414>
 104:	ands	w22, w23, #0xf
 108:	and	w21, w21, #0xffff
 10c:	b.eq	13c <inflate_fast+0x13c>  // b.none
 110:	cmp	w14, w22
 114:	b.cs	128 <inflate_fast+0x128>  // b.hs, b.nlast
 118:	ldrb	w23, [x10], #1
 11c:	lsl	x23, x23, x14
 120:	add	x11, x23, x11
 124:	add	w14, w14, #0x8
 128:	lsl	w23, w16, w22
 12c:	bic	w23, w11, w23
 130:	lsr	x11, x11, x22
 134:	add	w21, w23, w21
 138:	sub	w14, w14, w22
 13c:	cmp	w14, #0xe
 140:	b.hi	168 <inflate_fast+0x168>  // b.pmore
 144:	ldrb	w22, [x10]
 148:	ldrb	w23, [x10, #1]
 14c:	add	w24, w14, #0x8
 150:	add	x10, x10, #0x2
 154:	lsl	x22, x22, x14
 158:	lsl	x23, x23, x24
 15c:	add	x11, x22, x11
 160:	add	x11, x11, x23
 164:	add	w14, w14, #0x10
 168:	and	x22, x11, x20
 16c:	add	x22, x5, x22, lsl #2
 170:	ldrb	w24, [x22, #1]
 174:	ldrb	w23, [x22]
 178:	ldrh	w22, [x22, #2]
 17c:	lsr	x11, x11, x24
 180:	sub	w14, w14, w24
 184:	tbnz	w23, #4, 1a0 <inflate_fast+0x1a0>
 188:	tbnz	w23, #6, 404 <inflate_fast+0x404>
 18c:	lsl	w23, w16, w23
 190:	mvn	w23, w23
 194:	and	x23, x11, x23
 198:	add	x22, x23, w22, uxth
 19c:	b	16c <inflate_fast+0x16c>
 1a0:	and	w23, w23, #0xf
 1a4:	cmp	w14, w23
 1a8:	b.cs	1e0 <inflate_fast+0x1e0>  // b.hs, b.nlast
 1ac:	mov	x24, x10
 1b0:	ldrb	w26, [x24], #1
 1b4:	add	w25, w14, #0x8
 1b8:	cmp	w25, w23
 1bc:	lsl	x26, x26, x14
 1c0:	add	x11, x26, x11
 1c4:	b.cs	1e8 <inflate_fast+0x1e8>  // b.hs, b.nlast
 1c8:	ldrb	w24, [x10, #1]
 1cc:	add	x10, x10, #0x2
 1d0:	lsl	x24, x24, x25
 1d4:	add	x11, x24, x11
 1d8:	add	w25, w14, #0x10
 1dc:	b	1ec <inflate_fast+0x1ec>
 1e0:	mov	w25, w14
 1e4:	b	1ec <inflate_fast+0x1ec>
 1e8:	mov	x10, x24
 1ec:	lsl	w14, w16, w23
 1f0:	bic	w14, w11, w14
 1f4:	add	w22, w14, w22
 1f8:	sub	w14, w9, w6
 1fc:	lsr	x11, x11, x23
 200:	subs	w24, w22, w14
 204:	sub	w14, w25, w23
 208:	b.ls	284 <inflate_fast+0x284>  // b.plast
 20c:	cmp	w24, w1
 210:	b.ls	21c <inflate_fast+0x21c>  // b.plast
 214:	ldr	w23, [x8, #7144]
 218:	cbnz	w23, 408 <inflate_fast+0x408>
 21c:	cbz	w2, 300 <inflate_fast+0x300>
 220:	cmp	w2, w24
 224:	b.cs	324 <inflate_fast+0x324>  // b.hs, b.nlast
 228:	sub	w23, w24, w2
 22c:	subs	w23, w21, w23
 230:	sub	w25, w7, w24
 234:	b.ls	36c <inflate_fast+0x36c>  // b.plast
 238:	ldrb	w21, [x3, x25]
 23c:	sub	w24, w24, #0x1
 240:	cmp	w2, w24
 244:	add	x25, x25, #0x1
 248:	strb	w21, [x9], #1
 24c:	b.ne	238 <inflate_fast+0x238>  // b.any
 250:	cmp	w23, w2
 254:	b.ls	374 <inflate_fast+0x374>  // b.plast
 258:	mov	x24, xzr
 25c:	ldrb	w21, [x3, x24]
 260:	strb	w21, [x9, x24]
 264:	add	x24, x24, #0x1
 268:	cmp	w2, w24
 26c:	b.ne	25c <inflate_fast+0x25c>  // b.any
 270:	sub	x22, x9, w22, uxtw
 274:	sub	w21, w23, w2
 278:	add	x23, x22, x24
 27c:	add	x9, x9, x24
 280:	b	37c <inflate_fast+0x37c>
 284:	mov	x23, xzr
 288:	sub	x24, x23, w22, uxtw
 28c:	sub	x22, x9, w22, uxtw
 290:	add	x22, x22, #0x1
 294:	mov	w25, w21
 298:	add	x26, x22, x23
 29c:	ldurb	w27, [x26, #-1]
 2a0:	add	x28, x9, x23
 2a4:	sub	w25, w25, #0x3
 2a8:	cmp	w25, #0x2
 2ac:	strb	w27, [x28]
 2b0:	ldrb	w27, [x26]
 2b4:	add	x23, x23, #0x3
 2b8:	strb	w27, [x28, #1]
 2bc:	ldrb	w26, [x26, #1]
 2c0:	strb	w26, [x28, #2]
 2c4:	b.hi	298 <inflate_fast+0x298>  // b.pmore
 2c8:	cmp	w21, w23
 2cc:	add	x22, x9, x23
 2d0:	b.eq	3e4 <inflate_fast+0x3e4>  // b.none
 2d4:	add	x25, x9, x24
 2d8:	add	x25, x25, x23
 2dc:	add	x25, x25, #0x1
 2e0:	ldurb	w25, [x25, #-1]
 2e4:	mov	w21, w21
 2e8:	sub	x21, x21, #0x1
 2ec:	cmp	w21, w23
 2f0:	strb	w25, [x22]
 2f4:	b.ne	350 <inflate_fast+0x350>  // b.any
 2f8:	add	x9, x22, #0x1
 2fc:	b	f0 <inflate_fast+0xf0>
 300:	sub	w23, w18, w24
 304:	subs	w25, w21, w24
 308:	add	x23, x3, x23
 30c:	b.ls	37c <inflate_fast+0x37c>  // b.plast
 310:	ldrb	w21, [x23], #1
 314:	subs	w24, w24, #0x1
 318:	strb	w21, [x9], #1
 31c:	b.ne	310 <inflate_fast+0x310>  // b.any
 320:	b	344 <inflate_fast+0x344>
 324:	sub	w23, w2, w24
 328:	subs	w25, w21, w24
 32c:	add	x23, x3, x23
 330:	b.ls	37c <inflate_fast+0x37c>  // b.plast
 334:	ldrb	w21, [x23], #1
 338:	subs	w24, w24, #0x1
 33c:	strb	w21, [x9], #1
 340:	b.ne	334 <inflate_fast+0x334>  // b.any
 344:	sub	x23, x9, w22, uxtw
 348:	mov	w21, w25
 34c:	b	37c <inflate_fast+0x37c>
 350:	add	x21, x9, x24
 354:	add	x21, x21, x23
 358:	ldrb	w21, [x21, #1]
 35c:	add	x9, x9, x23
 360:	add	x9, x9, #0x2
 364:	strb	w21, [x22, #1]
 368:	b	f0 <inflate_fast+0xf0>
 36c:	add	x23, x3, x25
 370:	b	37c <inflate_fast+0x37c>
 374:	mov	w21, w23
 378:	mov	x23, x3
 37c:	cmp	w21, #0x3
 380:	b.cc	3c0 <inflate_fast+0x3c0>  // b.lo, b.ul, b.last
 384:	ldrb	w22, [x23]
 388:	add	x24, x9, #0x3
 38c:	sub	w21, w21, #0x3
 390:	cmp	w21, #0x2
 394:	strb	w22, [x9]
 398:	ldrb	w22, [x23, #1]
 39c:	strb	w22, [x9, #1]
 3a0:	add	x22, x23, #0x3
 3a4:	ldrb	w23, [x23, #2]
 3a8:	strb	w23, [x9, #2]
 3ac:	mov	x23, x22
 3b0:	mov	x9, x24
 3b4:	b.hi	384 <inflate_fast+0x384>  // b.pmore
 3b8:	mov	x9, x24
 3bc:	mov	x23, x22
 3c0:	cbz	w21, f0 <inflate_fast+0xf0>
 3c4:	ldrb	w24, [x23]
 3c8:	mov	x22, x9
 3cc:	cmp	w21, #0x1
 3d0:	strb	w24, [x22], #1
 3d4:	b.eq	3e4 <inflate_fast+0x3e4>  // b.none
 3d8:	ldrb	w21, [x23, #1]
 3dc:	add	x22, x9, #0x2
 3e0:	strb	w21, [x9, #1]
 3e4:	mov	x9, x22
 3e8:	b	f0 <inflate_fast+0xf0>
 3ec:	tbnz	w23, #5, 3fc <inflate_fast+0x3fc>
 3f0:	adrp	x15, 0 <inflate_fast>
 3f4:	add	x15, x15, #0x0
 3f8:	b	408 <inflate_fast+0x408>
 3fc:	mov	w15, #0x3f3f                	// #16191
 400:	b	410 <inflate_fast+0x410>
 404:	mov	x15, x17
 408:	str	x15, [x0, #48]
 40c:	mov	w15, #0x3f51                	// #16209
 410:	str	w15, [x8, #8]
 414:	lsr	w15, w14, #3
 418:	and	w14, w14, #0x7
 41c:	str	x9, [x0, #24]
 420:	sub	w9, w13, w9
 424:	mov	w13, #0xffffffff            	// #-1
 428:	sub	x10, x10, x15
 42c:	lsl	w13, w13, w14
 430:	add	w9, w9, #0x101
 434:	mvn	w13, w13
 438:	str	x10, [x0]
 43c:	sub	w10, w12, w10
 440:	str	w9, [x0, #32]
 444:	and	x9, x11, x13
 448:	add	w10, w10, #0x5
 44c:	str	w10, [x0, #8]
 450:	str	x9, [x8, #80]
 454:	str	w14, [x8, #88]
 458:	ldp	x20, x19, [sp, #64]
 45c:	ldp	x22, x21, [sp, #48]
 460:	ldp	x24, x23, [sp, #32]
 464:	ldp	x26, x25, [sp, #16]
 468:	ldp	x28, x27, [sp], #80
 46c:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	str	x19, [sp, #16]
       8:	mov	x29, sp
       c:	mov	x19, x0
      10:	bl	8c <inflateStateCheck>
      14:	cbz	w0, 20 <inflateResetKeep+0x20>
      18:	mov	w0, #0xfffffffe            	// #-2
      1c:	b	80 <inflateResetKeep+0x80>
      20:	ldr	x8, [x19, #56]
      24:	str	xzr, [x8, #40]
      28:	str	xzr, [x19, #16]
      2c:	stp	xzr, xzr, [x19, #40]
      30:	ldr	w9, [x8, #16]
      34:	cbz	w9, 40 <inflateResetKeep+0x40>
      38:	and	x9, x9, #0x1
      3c:	str	x9, [x19, #96]
      40:	adrp	x9, 0 <inflateResetKeep>
      44:	ldr	d0, [x9]
      48:	mov	w9, #0x8000                	// #32768
      4c:	str	w9, [x8, #28]
      50:	add	x9, x8, #0x558
      54:	str	x9, [x8, #144]
      58:	stp	x9, x9, [x8, #104]
      5c:	adrp	x9, 0 <inflateResetKeep>
      60:	str	d0, [x8, #8]
      64:	ldr	d0, [x9]
      68:	mov	w0, wzr
      6c:	str	wzr, [x8, #20]
      70:	str	xzr, [x8, #48]
      74:	str	xzr, [x8, #80]
      78:	str	wzr, [x8, #88]
      7c:	str	d0, [x8, #7144]
      80:	ldr	x19, [sp, #16]
      84:	ldp	x29, x30, [sp], #32
      88:	ret

000000000000008c <inflateStateCheck>:
      8c:	cbz	x0, b4 <inflateStateCheck+0x28>
      90:	ldr	x8, [x0, #64]
      94:	cbz	x8, b4 <inflateStateCheck+0x28>
      98:	ldr	x8, [x0, #72]
      9c:	cbz	x8, b4 <inflateStateCheck+0x28>
      a0:	ldr	x8, [x0, #56]
      a4:	cbz	x8, b4 <inflateStateCheck+0x28>
      a8:	ldr	x9, [x8]
      ac:	cmp	x9, x0
      b0:	b.eq	bc <inflateStateCheck+0x30>  // b.none
      b4:	mov	w0, #0x1                   	// #1
      b8:	ret
      bc:	ldr	w8, [x8, #8]
      c0:	mov	w9, #0xffffc0cc            	// #-16180
      c4:	add	w8, w8, w9
      c8:	cmp	w8, #0x1f
      cc:	cset	w0, hi  // hi = pmore
      d0:	ret

00000000000000d4 <inflateReset>:
      d4:	stp	x29, x30, [sp, #-32]!
      d8:	str	x19, [sp, #16]
      dc:	mov	x29, sp
      e0:	mov	x19, x0
      e4:	bl	8c <inflateStateCheck>
      e8:	cbz	w0, fc <inflateReset+0x28>
      ec:	ldr	x19, [sp, #16]
      f0:	mov	w0, #0xfffffffe            	// #-2
      f4:	ldp	x29, x30, [sp], #32
      f8:	ret
      fc:	ldr	x8, [x19, #56]
     100:	mov	x0, x19
     104:	str	xzr, [x8, #64]
     108:	ldr	x19, [sp, #16]
     10c:	str	wzr, [x8, #60]
     110:	ldp	x29, x30, [sp], #32
     114:	b	0 <inflateResetKeep>

0000000000000118 <inflateReset2>:
     118:	stp	x29, x30, [sp, #-48]!
     11c:	stp	x22, x21, [sp, #16]
     120:	stp	x20, x19, [sp, #32]
     124:	mov	x29, sp
     128:	mov	w20, w1
     12c:	mov	x19, x0
     130:	bl	8c <inflateStateCheck>
     134:	cbnz	w0, 174 <inflateReset2+0x5c>
     138:	ldr	x21, [x19, #56]
     13c:	tbnz	w20, #31, 15c <inflateReset2+0x44>
     140:	lsr	w8, w20, #4
     144:	and	w9, w20, #0xf
     148:	cmp	w20, #0x30
     14c:	add	w22, w8, #0x5
     150:	csel	w20, w9, w20, lt  // lt = tstop
     154:	cbnz	w20, 168 <inflateReset2+0x50>
     158:	b	188 <inflateReset2+0x70>
     15c:	mov	w22, wzr
     160:	neg	w20, w20
     164:	cbz	w20, 188 <inflateReset2+0x70>
     168:	and	w8, w20, #0xfffffff8
     16c:	cmp	w8, #0x8
     170:	b.eq	188 <inflateReset2+0x70>  // b.none
     174:	ldp	x20, x19, [sp, #32]
     178:	ldp	x22, x21, [sp, #16]
     17c:	mov	w0, #0xfffffffe            	// #-2
     180:	ldp	x29, x30, [sp], #48
     184:	ret
     188:	ldr	x1, [x21, #72]
     18c:	cbz	x1, 1a8 <inflateReset2+0x90>
     190:	ldr	w8, [x21, #56]
     194:	cmp	w8, w20
     198:	b.eq	1a8 <inflateReset2+0x90>  // b.none
     19c:	ldp	x8, x0, [x19, #72]
     1a0:	blr	x8
     1a4:	str	xzr, [x21, #72]
     1a8:	str	w22, [x21, #16]
     1ac:	str	w20, [x21, #56]
     1b0:	mov	x0, x19
     1b4:	ldp	x20, x19, [sp, #32]
     1b8:	ldp	x22, x21, [sp, #16]
     1bc:	ldp	x29, x30, [sp], #48
     1c0:	b	d4 <inflateReset>

00000000000001c4 <inflateInit2_>:
     1c4:	stp	x29, x30, [sp, #-48]!
     1c8:	stp	x22, x21, [sp, #16]
     1cc:	stp	x20, x19, [sp, #32]
     1d0:	mov	x29, sp
     1d4:	cbz	x2, 280 <inflateInit2_+0xbc>
     1d8:	cmp	w3, #0x70
     1dc:	mov	w21, #0xfffffffa            	// #-6
     1e0:	b.ne	294 <inflateInit2_+0xd0>  // b.any
     1e4:	ldrb	w8, [x2]
     1e8:	cmp	w8, #0x31
     1ec:	b.ne	294 <inflateInit2_+0xd0>  // b.any
     1f0:	mov	x19, x0
     1f4:	cbz	x0, 288 <inflateInit2_+0xc4>
     1f8:	ldr	x8, [x19, #64]
     1fc:	mov	w20, w1
     200:	str	xzr, [x19, #48]
     204:	cbnz	x8, 218 <inflateInit2_+0x54>
     208:	adrp	x8, 0 <zcalloc>
     20c:	add	x8, x8, #0x0
     210:	str	x8, [x19, #64]
     214:	str	xzr, [x19, #80]
     218:	ldr	x9, [x19, #72]
     21c:	cbnz	x9, 22c <inflateInit2_+0x68>
     220:	adrp	x9, 0 <zcfree>
     224:	add	x9, x9, #0x0
     228:	str	x9, [x19, #72]
     22c:	ldr	x0, [x19, #80]
     230:	mov	w1, #0x1                   	// #1
     234:	mov	w2, #0x1bf8                	// #7160
     238:	blr	x8
     23c:	cbz	x0, 290 <inflateInit2_+0xcc>
     240:	mov	w8, #0x3f34                	// #16180
     244:	mov	x22, x0
     248:	str	x0, [x19, #56]
     24c:	str	x19, [x0]
     250:	str	xzr, [x0, #72]
     254:	str	w8, [x0, #8]
     258:	mov	x0, x19
     25c:	mov	w1, w20
     260:	bl	118 <inflateReset2>
     264:	mov	w21, w0
     268:	cbz	w0, 294 <inflateInit2_+0xd0>
     26c:	ldp	x8, x0, [x19, #72]
     270:	mov	x1, x22
     274:	blr	x8
     278:	str	xzr, [x19, #56]
     27c:	b	294 <inflateInit2_+0xd0>
     280:	mov	w21, #0xfffffffa            	// #-6
     284:	b	294 <inflateInit2_+0xd0>
     288:	mov	w21, #0xfffffffe            	// #-2
     28c:	b	294 <inflateInit2_+0xd0>
     290:	mov	w21, #0xfffffffc            	// #-4
     294:	mov	w0, w21
     298:	ldp	x20, x19, [sp, #32]
     29c:	ldp	x22, x21, [sp, #16]
     2a0:	ldp	x29, x30, [sp], #48
     2a4:	ret

00000000000002a8 <inflateInit_>:
     2a8:	mov	w3, w2
     2ac:	mov	x2, x1
     2b0:	mov	w1, #0xf                   	// #15
     2b4:	b	1c4 <inflateInit2_>

00000000000002b8 <inflatePrime>:
     2b8:	stp	x29, x30, [sp, #-48]!
     2bc:	str	x21, [sp, #16]
     2c0:	stp	x20, x19, [sp, #32]
     2c4:	mov	x29, sp
     2c8:	mov	w19, w2
     2cc:	mov	w20, w1
     2d0:	mov	x21, x0
     2d4:	bl	8c <inflateStateCheck>
     2d8:	cbz	w0, 2f0 <inflatePrime+0x38>
     2dc:	mov	w0, #0xfffffffe            	// #-2
     2e0:	ldp	x20, x19, [sp, #32]
     2e4:	ldr	x21, [sp, #16]
     2e8:	ldp	x29, x30, [sp], #48
     2ec:	ret
     2f0:	ldr	x8, [x21, #56]
     2f4:	tbnz	w20, #31, 338 <inflatePrime+0x80>
     2f8:	cmp	w20, #0x10
     2fc:	b.gt	2dc <inflatePrime+0x24>
     300:	ldr	w10, [x8, #88]
     304:	add	w9, w10, w20
     308:	cmp	w9, #0x20
     30c:	b.hi	2dc <inflatePrime+0x24>  // b.pmore
     310:	mov	x11, #0xffffffffffffffff    	// #-1
     314:	ldr	x12, [x8, #80]
     318:	lsl	x11, x11, x20
     31c:	bic	w11, w19, w11
     320:	lsl	w10, w11, w10
     324:	mov	w0, wzr
     328:	add	x10, x12, x10
     32c:	str	x10, [x8, #80]
     330:	str	w9, [x8, #88]
     334:	b	2e0 <inflatePrime+0x28>
     338:	mov	w0, wzr
     33c:	str	xzr, [x8, #80]
     340:	str	wzr, [x8, #88]
     344:	b	2e0 <inflatePrime+0x28>

0000000000000348 <inflate>:
     348:	sub	sp, sp, #0xd0
     34c:	stp	x29, x30, [sp, #112]
     350:	stp	x28, x27, [sp, #128]
     354:	stp	x26, x25, [sp, #144]
     358:	stp	x24, x23, [sp, #160]
     35c:	stp	x22, x21, [sp, #176]
     360:	stp	x20, x19, [sp, #192]
     364:	add	x29, sp, #0x70
     368:	mov	w23, w1
     36c:	mov	x19, x0
     370:	bl	8c <inflateStateCheck>
     374:	cbz	w0, 39c <inflate+0x54>
     378:	mov	w0, #0xfffffffe            	// #-2
     37c:	ldp	x20, x19, [sp, #192]
     380:	ldp	x22, x21, [sp, #176]
     384:	ldp	x24, x23, [sp, #160]
     388:	ldp	x26, x25, [sp, #144]
     38c:	ldp	x28, x27, [sp, #128]
     390:	ldp	x29, x30, [sp, #112]
     394:	add	sp, sp, #0xd0
     398:	ret
     39c:	ldr	x21, [x19, #24]
     3a0:	cbz	x21, 378 <inflate+0x30>
     3a4:	ldr	x22, [x19]
     3a8:	cbz	x22, 1a40 <inflate+0x16f8>
     3ac:	ldr	x27, [x19, #56]
     3b0:	mov	w9, #0x3f3f                	// #16191
     3b4:	mov	x0, x27
     3b8:	ldr	w8, [x0, #8]!
     3bc:	cmp	w8, w9
     3c0:	b.ne	3cc <inflate+0x84>  // b.any
     3c4:	mov	w8, #0x3f40                	// #16192
     3c8:	str	w8, [x0]
     3cc:	add	x9, x27, #0x20
     3d0:	stur	x9, [x29, #-24]
     3d4:	add	x9, x27, #0x558
     3d8:	str	x9, [sp, #40]
     3dc:	add	x9, x27, #0x90
     3e0:	ldr	w2, [x19, #32]
     3e4:	ldr	w10, [x19, #8]
     3e8:	stur	x9, [x29, #-48]
     3ec:	add	x9, x27, #0x78
     3f0:	ldr	x25, [x27, #80]
     3f4:	ldr	w20, [x27, #88]
     3f8:	str	x9, [sp, #32]
     3fc:	add	x9, x27, #0x98
     400:	str	x9, [sp, #24]
     404:	add	x9, x27, #0x318
     408:	str	x9, [sp, #56]
     40c:	add	x9, x27, #0x7c
     410:	adrp	x4, 0 <inflateResetKeep>
     414:	str	x9, [sp, #16]
     418:	sub	w9, w23, #0x5
     41c:	mov	w28, #0xffffc0cc            	// #-16180
     420:	add	x4, x4, #0x0
     424:	mov	w24, w10
     428:	mov	w16, w2
     42c:	stur	wzr, [x29, #-28]
     430:	str	w9, [sp, #52]
     434:	stur	w10, [x29, #-36]
     438:	stur	x0, [x29, #-16]
     43c:	add	w8, w8, w28
     440:	cmp	w8, #0x1e
     444:	b.hi	378 <inflate+0x30>  // b.pmore
     448:	adr	x9, 464 <inflate+0x11c>
     44c:	ldrh	w10, [x4, x8, lsl #1]
     450:	add	x9, x9, x10, lsl #2
     454:	adrp	x8, 0 <inflateResetKeep>
     458:	mov	w26, #0x1                   	// #1
     45c:	add	x8, x8, #0x0
     460:	br	x9
     464:	ldr	w8, [x27, #16]
     468:	cbz	w8, c98 <inflate+0x950>
     46c:	cmp	w20, #0xf
     470:	b.hi	49c <inflate+0x154>  // b.pmore
     474:	mov	w9, w20
     478:	cbz	w24, 1a4c <inflate+0x1704>
     47c:	ldrb	w10, [x22], #1
     480:	add	x20, x9, #0x8
     484:	sub	w24, w24, #0x1
     488:	cmp	x9, #0x8
     48c:	lsl	x10, x10, x9
     490:	add	x25, x10, x25
     494:	mov	x9, x20
     498:	b.cc	478 <inflate+0x130>  // b.lo, b.ul, b.last
     49c:	tbz	w8, #1, d48 <inflate+0xa00>
     4a0:	mov	w9, #0x8b1f                	// #35615
     4a4:	cmp	x25, x9
     4a8:	b.ne	d48 <inflate+0xa00>  // b.any
     4ac:	ldr	w8, [x27, #56]
     4b0:	stur	w16, [x29, #-32]
     4b4:	str	w2, [sp, #8]
     4b8:	cbnz	w8, 4c4 <inflate+0x17c>
     4bc:	mov	w8, #0xf                   	// #15
     4c0:	str	w8, [x27, #56]
     4c4:	mov	x0, xzr
     4c8:	mov	x1, xzr
     4cc:	mov	w2, wzr
     4d0:	bl	0 <crc32>
     4d4:	ldur	x26, [x29, #-24]
     4d8:	mov	w8, #0x8b1f                	// #35615
     4dc:	sub	x1, x29, #0x4
     4e0:	mov	w2, #0x2                   	// #2
     4e4:	str	x0, [x26]
     4e8:	sturh	w8, [x29, #-4]
     4ec:	bl	0 <crc32>
     4f0:	str	x0, [x26]
     4f4:	ldur	x0, [x29, #-16]
     4f8:	ldr	w2, [sp, #8]
     4fc:	ldur	w16, [x29, #-32]
     500:	mov	w8, #0x3f35                	// #16181
     504:	adrp	x4, 0 <inflateResetKeep>
     508:	mov	x25, xzr
     50c:	mov	w20, wzr
     510:	str	w8, [x0]
     514:	b	150c <inflate+0x11c4>
     518:	cmp	w20, #0xf
     51c:	b.hi	548 <inflate+0x200>  // b.pmore
     520:	mov	w8, w20
     524:	cbz	w24, 1a5c <inflate+0x1714>
     528:	ldrb	w9, [x22], #1
     52c:	add	x20, x8, #0x8
     530:	sub	w24, w24, #0x1
     534:	cmp	x8, #0x8
     538:	lsl	x9, x9, x8
     53c:	add	x25, x9, x25
     540:	mov	x8, x20
     544:	b.cc	524 <inflate+0x1dc>  // b.lo, b.ul, b.last
     548:	and	w8, w25, #0xff
     54c:	cmp	w8, #0x8
     550:	str	w25, [x27, #24]
     554:	b.ne	19f8 <inflate+0x16b0>  // b.any
     558:	tst	w25, #0xe000
     55c:	b.eq	e00 <inflate+0xab8>  // b.none
     560:	adrp	x8, 0 <inflateResetKeep>
     564:	add	x8, x8, #0x0
     568:	b	1a00 <inflate+0x16b8>
     56c:	cmp	w20, #0x1f
     570:	b.ls	e64 <inflate+0xb1c>  // b.plast
     574:	b	e88 <inflate+0xb40>
     578:	cmp	w20, #0xf
     57c:	b.ls	eec <inflate+0xba4>  // b.plast
     580:	b	f10 <inflate+0xbc8>
     584:	cmp	w20, #0x1f
     588:	b.hi	5b0 <inflate+0x268>  // b.pmore
     58c:	mov	w20, w20
     590:	cbz	w24, 1a60 <inflate+0x1718>
     594:	ldrb	w8, [x22], #1
     598:	sub	w24, w24, #0x1
     59c:	cmp	x20, #0x18
     5a0:	lsl	x8, x8, x20
     5a4:	add	x20, x20, #0x8
     5a8:	add	x25, x8, x25
     5ac:	b.cc	590 <inflate+0x248>  // b.lo, b.ul, b.last
     5b0:	lsr	x8, x25, #8
     5b4:	lsl	w9, w25, #8
     5b8:	and	x8, x8, #0xff00
     5bc:	and	x9, x9, #0xff0000
     5c0:	bfxil	x8, x25, #24, #8
     5c4:	orr	x8, x8, x9
     5c8:	ldur	x9, [x29, #-24]
     5cc:	lsl	w10, w25, #24
     5d0:	mov	w20, wzr
     5d4:	mov	w11, #0x3f3e                	// #16190
     5d8:	orr	x8, x8, x10
     5dc:	mov	x25, xzr
     5e0:	str	x8, [x9]
     5e4:	str	x8, [x19, #96]
     5e8:	str	w11, [x0]
     5ec:	ldr	w8, [x27, #20]
     5f0:	cbz	w8, 1c20 <inflate+0x18d8>
     5f4:	mov	x0, xzr
     5f8:	mov	x1, xzr
     5fc:	mov	w26, w23
     600:	mov	w23, w2
     604:	mov	w2, wzr
     608:	mov	w28, w16
     60c:	bl	0 <adler32>
     610:	ldur	x8, [x29, #-24]
     614:	adrp	x4, 0 <inflateResetKeep>
     618:	add	x4, x4, #0x0
     61c:	mov	w16, w28
     620:	str	x0, [x8]
     624:	str	x0, [x19, #96]
     628:	ldur	x0, [x29, #-16]
     62c:	mov	w28, #0xffffc0cc            	// #-16180
     630:	mov	w2, w23
     634:	mov	w23, w26
     638:	mov	w8, #0x3f3f                	// #16191
     63c:	str	w8, [x0]
     640:	ldr	w8, [sp, #52]
     644:	cmp	w8, #0x2
     648:	b.cc	1a60 <inflate+0x1718>  // b.lo, b.ul, b.last
     64c:	ldr	w8, [x27, #12]
     650:	cbz	w8, 668 <inflate+0x320>
     654:	and	w8, w20, #0x7
     658:	mov	w9, #0x3f4e                	// #16206
     65c:	and	w20, w20, #0xfffffff8
     660:	lsr	x25, x25, x8
     664:	b	1a08 <inflate+0x16c0>
     668:	cmp	w20, #0x2
     66c:	b.hi	68c <inflate+0x344>  // b.pmore
     670:	cbz	w24, 1a60 <inflate+0x1718>
     674:	ldrb	w8, [x22], #1
     678:	add	w9, w20, #0x8
     67c:	sub	w24, w24, #0x1
     680:	lsl	x8, x8, x20
     684:	add	x25, x8, x25
     688:	mov	w20, w9
     68c:	adrp	x10, 0 <inflateResetKeep>
     690:	and	w8, w25, #0x1
     694:	ubfx	w9, w25, #1, #2
     698:	add	x10, x10, #0x0
     69c:	str	w8, [x27, #12]
     6a0:	adr	x11, 6b4 <inflate+0x36c>
     6a4:	ldrh	w8, [x10, x9, lsl #1]
     6a8:	add	x11, x11, x8, lsl #2
     6ac:	mov	w8, #0x3f41                	// #16193
     6b0:	br	x11
     6b4:	adrp	x10, 0 <inflateResetKeep>
     6b8:	ldr	d0, [x10]
     6bc:	adrp	x8, 0 <inflateResetKeep>
     6c0:	adrp	x9, 0 <inflateResetKeep>
     6c4:	add	x8, x8, #0x0
     6c8:	add	x9, x9, #0x0
     6cc:	mov	w11, #0x3f47                	// #16199
     6d0:	cmp	w23, #0x6
     6d4:	stp	x8, x9, [x27, #104]
     6d8:	str	d0, [x27, #120]
     6dc:	str	w11, [x27, #8]
     6e0:	b.ne	d18 <inflate+0x9d0>  // b.any
     6e4:	b	1c6c <inflate+0x1924>
     6e8:	and	w8, w20, #0x7
     6ec:	and	w20, w20, #0xfffffff8
     6f0:	cmp	w20, #0x1f
     6f4:	lsr	x25, x25, x8
     6f8:	b.hi	724 <inflate+0x3dc>  // b.pmore
     6fc:	mov	w8, w20
     700:	cbz	w24, 1a5c <inflate+0x1714>
     704:	ldrb	w9, [x22], #1
     708:	add	x20, x8, #0x8
     70c:	sub	w24, w24, #0x1
     710:	cmp	x8, #0x18
     714:	lsl	x9, x9, x8
     718:	add	x25, x9, x25
     71c:	mov	x8, x20
     720:	b.cc	700 <inflate+0x3b8>  // b.lo, b.ul, b.last
     724:	lsr	x8, x25, #16
     728:	eor	x8, x8, #0xffff
     72c:	cmp	x8, w25, uxth
     730:	b.ne	ca0 <inflate+0x958>  // b.any
     734:	mov	w20, wzr
     738:	and	w8, w25, #0xffff
     73c:	mov	w9, #0x3f42                	// #16194
     740:	cmp	w23, #0x6
     744:	mov	x25, xzr
     748:	str	w8, [x27, #92]
     74c:	str	w9, [x27, #8]
     750:	b.eq	1a60 <inflate+0x1718>  // b.none
     754:	mov	w8, #0x3f43                	// #16195
     758:	str	w8, [x0]
     75c:	ldr	w8, [x27, #92]
     760:	cbz	w8, a20 <inflate+0x6d8>
     764:	cmp	w8, w24
     768:	csel	w8, w24, w8, hi  // hi = pmore
     76c:	cmp	w8, w2
     770:	stur	w23, [x29, #-40]
     774:	csel	w23, w2, w8, hi  // hi = pmore
     778:	stur	w16, [x29, #-32]
     77c:	str	x19, [sp, #8]
     780:	cbz	w23, 1c40 <inflate+0x18f8>
     784:	mov	w26, w2
     788:	mov	w2, w23
     78c:	mov	x0, x21
     790:	mov	x1, x22
     794:	bl	0 <memcpy>
     798:	ldr	w8, [x27, #92]
     79c:	mov	w2, w26
     7a0:	ldur	x0, [x29, #-16]
     7a4:	sub	w24, w24, w23
     7a8:	add	x22, x22, w23, uxtw
     7ac:	sub	w2, w26, w23
     7b0:	add	x21, x21, w23, uxtw
     7b4:	sub	w8, w8, w23
     7b8:	ldr	x19, [sp, #8]
     7bc:	ldur	w23, [x29, #-40]
     7c0:	ldur	w16, [x29, #-32]
     7c4:	adrp	x4, 0 <inflateResetKeep>
     7c8:	add	x4, x4, #0x0
     7cc:	str	w8, [x27, #92]
     7d0:	b	1a0c <inflate+0x16c4>
     7d4:	cmp	w20, #0xd
     7d8:	b.hi	804 <inflate+0x4bc>  // b.pmore
     7dc:	mov	w9, w20
     7e0:	cbz	w24, 1a4c <inflate+0x1704>
     7e4:	ldrb	w10, [x22], #1
     7e8:	add	x20, x9, #0x8
     7ec:	sub	w24, w24, #0x1
     7f0:	cmp	x9, #0x6
     7f4:	lsl	x10, x10, x9
     7f8:	add	x25, x10, x25
     7fc:	mov	x9, x20
     800:	b.cc	7e0 <inflate+0x498>  // b.lo, b.ul, b.last
     804:	and	w11, w25, #0x1f
     808:	ubfx	w10, w25, #5, #5
     80c:	ubfx	w9, w25, #10, #4
     810:	lsr	x25, x25, #14
     814:	add	w12, w11, #0x101
     818:	add	w13, w10, #0x1
     81c:	add	w9, w9, #0x4
     820:	cmp	w11, #0x1d
     824:	sub	w20, w20, #0xe
     828:	stp	w12, w13, [x27, #132]
     82c:	str	w9, [x27, #128]
     830:	b.hi	cac <inflate+0x964>  // b.pmore
     834:	cmp	w10, #0x1e
     838:	b.cs	cac <inflate+0x964>  // b.hs, b.nlast
     83c:	mov	w11, #0x3f45                	// #16197
     840:	mov	w10, wzr
     844:	str	wzr, [x27, #140]
     848:	str	w11, [x27, #8]
     84c:	b	860 <inflate+0x518>
     850:	ldr	w10, [x27, #140]
     854:	ldr	w9, [x27, #128]
     858:	cmp	w10, w9
     85c:	b.cs	8b0 <inflate+0x568>  // b.hs, b.nlast
     860:	mov	w10, w10
     864:	cmp	w20, #0x2
     868:	b.hi	888 <inflate+0x540>  // b.pmore
     86c:	cbz	w24, 1a60 <inflate+0x1718>
     870:	ldrb	w11, [x22], #1
     874:	add	w12, w20, #0x8
     878:	sub	w24, w24, #0x1
     87c:	lsl	x11, x11, x20
     880:	add	x25, x11, x25
     884:	mov	w20, w12
     888:	ldrh	w12, [x8, x10, lsl #1]
     88c:	add	x10, x10, #0x1
     890:	and	w11, w25, #0x7
     894:	lsr	x25, x25, #3
     898:	cmp	w10, w9
     89c:	add	x12, x27, x12, lsl #1
     8a0:	sub	w20, w20, #0x3
     8a4:	str	w10, [x27, #140]
     8a8:	strh	w11, [x12, #152]
     8ac:	b.cc	864 <inflate+0x51c>  // b.lo, b.ul, b.last
     8b0:	ldur	x3, [x29, #-48]
     8b4:	ldr	x5, [sp, #56]
     8b8:	mov	w26, w16
     8bc:	cmp	w10, #0x12
     8c0:	str	w2, [sp, #8]
     8c4:	b.hi	8e8 <inflate+0x5a0>  // b.pmore
     8c8:	mov	w9, w10
     8cc:	ldrh	w10, [x8, x9, lsl #1]
     8d0:	cmp	x9, #0x12
     8d4:	add	x9, x9, #0x1
     8d8:	add	x10, x27, x10, lsl #1
     8dc:	strh	wzr, [x10, #152]
     8e0:	b.cc	8cc <inflate+0x584>  // b.lo, b.ul, b.last
     8e4:	str	w9, [x27, #140]
     8e8:	ldp	x4, x8, [sp, #32]
     8ec:	ldr	x1, [sp, #24]
     8f0:	mov	w2, #0x13                  	// #19
     8f4:	mov	w0, wzr
     8f8:	str	x8, [x27, #144]
     8fc:	str	x8, [x27, #104]
     900:	mov	w8, #0x7                   	// #7
     904:	str	w8, [x27, #120]
     908:	bl	0 <inflate_table>
     90c:	cbz	w0, a28 <inflate+0x6e0>
     910:	stur	w0, [x29, #-28]
     914:	ldur	x0, [x29, #-16]
     918:	ldr	w2, [sp, #8]
     91c:	adrp	x8, 0 <inflateResetKeep>
     920:	add	x8, x8, #0x0
     924:	mov	w9, #0x3f51                	// #16209
     928:	str	x8, [x19, #48]
     92c:	str	w9, [x0]
     930:	b	1504 <inflate+0x11bc>
     934:	ldr	w8, [x27, #140]
     938:	str	w2, [sp, #8]
     93c:	b	a4c <inflate+0x704>
     940:	ldr	w8, [x27, #100]
     944:	cbz	w8, 1688 <inflate+0x1340>
     948:	cmp	w20, w8
     94c:	b.cs	cb8 <inflate+0x970>  // b.hs, b.nlast
     950:	mov	w11, w20
     954:	mov	w9, w24
     958:	mov	x10, x22
     95c:	cbz	w9, 1a54 <inflate+0x170c>
     960:	ldrb	w12, [x10], #1
     964:	sub	w9, w9, #0x1
     968:	lsl	x12, x12, x11
     96c:	add	w11, w11, #0x8
     970:	cmp	w11, w8
     974:	add	x25, x12, x25
     978:	b.cc	95c <inflate+0x614>  // b.lo, b.ul, b.last
     97c:	b	cc4 <inflate+0x97c>
     980:	ldr	w8, [x27, #100]
     984:	b	17f8 <inflate+0x14b0>
     988:	cbz	w2, 1a60 <inflate+0x1718>
     98c:	ldr	w8, [x27, #92]
     990:	mov	w9, #0x3f48                	// #16200
     994:	sub	w2, w2, #0x1
     998:	strb	w8, [x21], #1
     99c:	str	w9, [x27, #8]
     9a0:	b	1a0c <inflate+0x16c4>
     9a4:	ldr	w8, [x27, #16]
     9a8:	cbz	w8, 13e8 <inflate+0x10a0>
     9ac:	cmp	w20, #0x1f
     9b0:	b.hi	9dc <inflate+0x694>  // b.pmore
     9b4:	mov	w9, w20
     9b8:	cbz	w24, 1a4c <inflate+0x1704>
     9bc:	ldrb	w10, [x22], #1
     9c0:	add	x20, x9, #0x8
     9c4:	sub	w24, w24, #0x1
     9c8:	cmp	x9, #0x18
     9cc:	lsl	x10, x10, x9
     9d0:	add	x25, x10, x25
     9d4:	mov	x9, x20
     9d8:	b.cc	9b8 <inflate+0x670>  // b.lo, b.ul, b.last
     9dc:	ldr	x9, [x19, #40]
     9e0:	mov	w26, w2
     9e4:	subs	w2, w16, w2
     9e8:	and	w8, w8, #0x4
     9ec:	add	x9, x9, x2
     9f0:	str	x9, [x19, #40]
     9f4:	ldr	x9, [x27, #40]
     9f8:	add	x9, x9, x2
     9fc:	str	x9, [x27, #40]
     a00:	b.eq	1384 <inflate+0x103c>  // b.none
     a04:	cbz	w8, 1384 <inflate+0x103c>
     a08:	ldr	w8, [x27, #24]
     a0c:	ldr	x0, [x27, #32]
     a10:	sub	x1, x21, x2
     a14:	cbz	w8, 1364 <inflate+0x101c>
     a18:	bl	0 <crc32>
     a1c:	b	1368 <inflate+0x1020>
     a20:	mov	w8, #0x3f3f                	// #16191
     a24:	b	1940 <inflate+0x15f8>
     a28:	ldur	x0, [x29, #-16]
     a2c:	adrp	x4, 0 <inflateResetKeep>
     a30:	mov	w8, wzr
     a34:	mov	w9, #0x3f46                	// #16198
     a38:	mov	w16, w26
     a3c:	add	x4, x4, #0x0
     a40:	stur	wzr, [x29, #-28]
     a44:	str	wzr, [x27, #140]
     a48:	str	w9, [x27, #8]
     a4c:	stur	w16, [x29, #-32]
     a50:	ldp	w2, w9, [x27, #132]
     a54:	add	w9, w9, w2
     a58:	cmp	w8, w9
     a5c:	b.cs	c4c <inflate+0x904>  // b.hs, b.nlast
     a60:	ldr	w11, [x27, #120]
     a64:	ldr	x10, [x27, #104]
     a68:	mov	w12, #0xffffffff            	// #-1
     a6c:	lsl	w11, w12, w11
     a70:	mvn	w11, w11
     a74:	and	w16, w11, w25
     a78:	add	x12, x10, w16, uxtw #2
     a7c:	ldrb	w12, [x12, #1]
     a80:	cmp	w20, w12
     a84:	b.cs	ad0 <inflate+0x788>  // b.hs, b.nlast
     a88:	mov	w13, w20
     a8c:	mov	w14, w24
     a90:	mov	x15, x22
     a94:	cbz	w14, 1a68 <inflate+0x1720>
     a98:	ldrb	w12, [x15], #1
     a9c:	sub	w14, w14, #0x1
     aa0:	lsl	x12, x12, x13
     aa4:	add	x25, x12, x25
     aa8:	and	w16, w11, w25
     aac:	add	x12, x10, w16, uxtw #2
     ab0:	ldrb	w12, [x12, #1]
     ab4:	add	x13, x13, #0x8
     ab8:	cmp	x13, x12
     abc:	b.cc	a94 <inflate+0x74c>  // b.lo, b.ul, b.last
     ac0:	mov	w16, w16
     ac4:	mov	x22, x15
     ac8:	mov	w24, w14
     acc:	mov	w20, w13
     ad0:	add	x13, x10, x16, lsl #2
     ad4:	ldrh	w13, [x13, #2]
     ad8:	cmp	w13, #0xf
     adc:	b.hi	afc <inflate+0x7b4>  // b.pmore
     ae0:	lsr	x25, x25, x12
     ae4:	sub	w20, w20, w12
     ae8:	add	x12, x27, w8, uxtw #1
     aec:	add	w8, w8, #0x1
     af0:	str	w8, [x27, #140]
     af4:	strh	w13, [x12, #152]
     af8:	b	c38 <inflate+0x8f0>
     afc:	cmp	w13, #0x10
     b00:	b.eq	b64 <inflate+0x81c>  // b.none
     b04:	ldur	w16, [x29, #-32]
     b08:	cmp	w13, #0x11
     b0c:	mov	w28, #0xffffc0cc            	// #-16180
     b10:	b.ne	bc8 <inflate+0x880>  // b.any
     b14:	add	w13, w12, #0x3
     b18:	cmp	w20, w13
     b1c:	b.cs	b44 <inflate+0x7fc>  // b.hs, b.nlast
     b20:	mov	w20, w20
     b24:	cbz	w24, 1bd8 <inflate+0x1890>
     b28:	ldrb	w14, [x22], #1
     b2c:	sub	w24, w24, #0x1
     b30:	lsl	x14, x14, x20
     b34:	add	x20, x20, #0x8
     b38:	cmp	x20, x13
     b3c:	add	x25, x14, x25
     b40:	b.cc	b24 <inflate+0x7dc>  // b.lo, b.ul, b.last
     b44:	lsr	x14, x25, x12
     b48:	sub	w15, w20, w12
     b4c:	and	w12, w14, #0x7
     b50:	mov	w13, wzr
     b54:	lsr	x25, x14, #3
     b58:	add	w12, w12, #0x3
     b5c:	sub	w20, w15, #0x3
     b60:	b	c14 <inflate+0x8cc>
     b64:	ldur	w16, [x29, #-32]
     b68:	add	w13, w12, #0x2
     b6c:	cmp	w20, w13
     b70:	mov	w28, #0xffffc0cc            	// #-16180
     b74:	b.cs	b9c <inflate+0x854>  // b.hs, b.nlast
     b78:	mov	w20, w20
     b7c:	cbz	w24, 1bd8 <inflate+0x1890>
     b80:	ldrb	w14, [x22], #1
     b84:	sub	w24, w24, #0x1
     b88:	lsl	x14, x14, x20
     b8c:	add	x20, x20, #0x8
     b90:	cmp	x20, x13
     b94:	add	x25, x14, x25
     b98:	b.cc	b7c <inflate+0x834>  // b.lo, b.ul, b.last
     b9c:	lsr	x25, x25, x12
     ba0:	sub	w20, w20, w12
     ba4:	cbz	w8, 1a14 <inflate+0x16cc>
     ba8:	sub	w12, w8, #0x1
     bac:	add	x12, x27, w12, uxtw #1
     bb0:	ldrh	w13, [x12, #152]
     bb4:	and	w12, w25, #0x3
     bb8:	add	w12, w12, #0x3
     bbc:	lsr	x25, x25, #2
     bc0:	sub	w20, w20, #0x2
     bc4:	b	c14 <inflate+0x8cc>
     bc8:	add	w13, w12, #0x7
     bcc:	cmp	w20, w13
     bd0:	b.cs	bf8 <inflate+0x8b0>  // b.hs, b.nlast
     bd4:	mov	w20, w20
     bd8:	cbz	w24, 1bd8 <inflate+0x1890>
     bdc:	ldrb	w14, [x22], #1
     be0:	sub	w24, w24, #0x1
     be4:	lsl	x14, x14, x20
     be8:	add	x20, x20, #0x8
     bec:	cmp	x20, x13
     bf0:	add	x25, x14, x25
     bf4:	b.cc	bd8 <inflate+0x890>  // b.lo, b.ul, b.last
     bf8:	lsr	x14, x25, x12
     bfc:	sub	w15, w20, w12
     c00:	and	w12, w14, #0x7f
     c04:	mov	w13, wzr
     c08:	lsr	x25, x14, #7
     c0c:	add	w12, w12, #0xb
     c10:	sub	w20, w15, #0x7
     c14:	add	w14, w12, w8
     c18:	cmp	w14, w9
     c1c:	b.hi	1a14 <inflate+0x16cc>  // b.pmore
     c20:	subs	w12, w12, #0x1
     c24:	add	x14, x27, w8, uxtw #1
     c28:	add	w8, w8, #0x1
     c2c:	strh	w13, [x14, #152]
     c30:	b.ne	c20 <inflate+0x8d8>  // b.any
     c34:	str	w8, [x27, #140]
     c38:	ldur	x26, [x29, #-48]
     c3c:	ldr	x28, [sp, #56]
     c40:	cmp	w8, w9
     c44:	b.cc	a74 <inflate+0x72c>  // b.lo, b.ul, b.last
     c48:	b	c54 <inflate+0x90c>
     c4c:	ldur	x26, [x29, #-48]
     c50:	ldr	x28, [sp, #56]
     c54:	ldrh	w8, [x27, #664]
     c58:	cbz	w8, d24 <inflate+0x9dc>
     c5c:	ldp	x4, x8, [sp, #32]
     c60:	ldr	x1, [sp, #24]
     c64:	mov	w0, #0x1                   	// #1
     c68:	mov	x3, x26
     c6c:	str	x8, [x27, #144]
     c70:	str	x8, [x27, #104]
     c74:	mov	w8, #0x9                   	// #9
     c78:	mov	x5, x28
     c7c:	str	w8, [x27, #120]
     c80:	bl	0 <inflate_table>
     c84:	cbz	w0, da4 <inflate+0xa5c>
     c88:	adrp	x8, 0 <inflateResetKeep>
     c8c:	add	x8, x8, #0x0
     c90:	stur	w0, [x29, #-28]
     c94:	b	de4 <inflate+0xa9c>
     c98:	mov	w8, #0x3f40                	// #16192
     c9c:	b	1940 <inflate+0x15f8>
     ca0:	adrp	x8, 0 <inflateResetKeep>
     ca4:	add	x8, x8, #0x0
     ca8:	b	1a00 <inflate+0x16b8>
     cac:	adrp	x8, 0 <inflateResetKeep>
     cb0:	add	x8, x8, #0x0
     cb4:	b	1a00 <inflate+0x16b8>
     cb8:	mov	x10, x22
     cbc:	mov	w9, w24
     cc0:	mov	w11, w20
     cc4:	ldr	w13, [x27, #92]
     cc8:	ldr	w14, [x27, #7148]
     ccc:	mov	w12, #0xffffffff            	// #-1
     cd0:	sub	w20, w11, w8
     cd4:	lsl	w11, w12, w8
     cd8:	bic	w11, w25, w11
     cdc:	lsr	x25, x25, x8
     ce0:	add	w11, w13, w11
     ce4:	add	w8, w14, w8
     ce8:	mov	x22, x10
     cec:	mov	w24, w9
     cf0:	str	w11, [x27, #92]
     cf4:	str	w8, [x27, #7148]
     cf8:	b	168c <inflate+0x1344>
     cfc:	mov	w8, #0x3f44                	// #16196
     d00:	b	d14 <inflate+0x9cc>
     d04:	adrp	x8, 0 <inflateResetKeep>
     d08:	add	x8, x8, #0x0
     d0c:	str	x8, [x19, #48]
     d10:	mov	w8, #0x3f51                	// #16209
     d14:	str	w8, [x0]
     d18:	lsr	x25, x25, #3
     d1c:	sub	w20, w20, #0x3
     d20:	b	1a0c <inflate+0x16c4>
     d24:	ldr	w2, [sp, #8]
     d28:	ldur	w16, [x29, #-32]
     d2c:	adrp	x8, 0 <inflateResetKeep>
     d30:	add	x8, x8, #0x0
     d34:	mov	w9, #0x3f51                	// #16209
     d38:	str	x8, [x19, #48]
     d3c:	str	w9, [x0]
     d40:	mov	w28, #0xffffc0cc            	// #-16180
     d44:	b	1a0c <inflate+0x16c4>
     d48:	ldr	x9, [x27, #48]
     d4c:	str	wzr, [x27, #24]
     d50:	cbz	x9, d5c <inflate+0xa14>
     d54:	mov	w10, #0xffffffff            	// #-1
     d58:	str	w10, [x9, #72]
     d5c:	tbz	w8, #0, d98 <inflate+0xa50>
     d60:	mov	x9, #0x7bdf                	// #31711
     d64:	lsl	w8, w25, #8
     d68:	movk	x9, #0xbdef, lsl #16
     d6c:	movk	x9, #0xdef7, lsl #32
     d70:	and	x8, x8, #0xff00
     d74:	movk	x9, #0xef7b, lsl #48
     d78:	add	x8, x8, x25, lsr #8
     d7c:	mul	x8, x8, x9
     d80:	mov	x9, #0x4211                	// #16913
     d84:	movk	x9, #0x2108, lsl #16
     d88:	movk	x9, #0x1084, lsl #32
     d8c:	movk	x9, #0x842, lsl #48
     d90:	cmp	x8, x9
     d94:	b.cc	1964 <inflate+0x161c>  // b.lo, b.ul, b.last
     d98:	adrp	x8, 0 <inflateResetKeep>
     d9c:	add	x8, x8, #0x0
     da0:	b	1a00 <inflate+0x16b8>
     da4:	ldr	x8, [x27, #144]
     da8:	ldp	w10, w2, [x27, #132]
     dac:	ldr	x4, [sp, #16]
     db0:	mov	w9, #0x6                   	// #6
     db4:	str	x8, [x27, #112]
     db8:	add	x8, x27, x10, lsl #1
     dbc:	add	x1, x8, #0x98
     dc0:	mov	w0, #0x2                   	// #2
     dc4:	mov	x3, x26
     dc8:	mov	x5, x28
     dcc:	str	w9, [x27, #124]
     dd0:	bl	0 <inflate_table>
     dd4:	cbz	w0, 1464 <inflate+0x111c>
     dd8:	adrp	x8, 0 <inflateResetKeep>
     ddc:	stur	w0, [x29, #-28]
     de0:	add	x8, x8, #0x0
     de4:	str	x8, [x19, #48]
     de8:	ldur	x0, [x29, #-16]
     dec:	ldr	w2, [sp, #8]
     df0:	ldur	w16, [x29, #-32]
     df4:	mov	w9, #0x3f51                	// #16209
     df8:	str	w9, [x0]
     dfc:	b	134c <inflate+0x1004>
     e00:	ldr	x8, [x27, #48]
     e04:	cbz	x8, e10 <inflate+0xac8>
     e08:	ubfx	w9, w25, #8, #1
     e0c:	str	w9, [x8]
     e10:	tbz	w25, #9, e54 <inflate+0xb0c>
     e14:	ldrb	w8, [x27, #16]
     e18:	tbz	w8, #2, e54 <inflate+0xb0c>
     e1c:	sturh	w25, [x29, #-4]
     e20:	ldur	x25, [x29, #-24]
     e24:	sub	x1, x29, #0x4
     e28:	mov	w20, w2
     e2c:	mov	w2, #0x2                   	// #2
     e30:	ldr	x0, [x25]
     e34:	mov	w26, w16
     e38:	bl	0 <crc32>
     e3c:	str	x0, [x25]
     e40:	ldur	x0, [x29, #-16]
     e44:	adrp	x4, 0 <inflateResetKeep>
     e48:	add	x4, x4, #0x0
     e4c:	mov	w16, w26
     e50:	mov	w2, w20
     e54:	mov	w8, #0x3f36                	// #16182
     e58:	mov	w20, wzr
     e5c:	mov	x25, xzr
     e60:	str	w8, [x0]
     e64:	mov	w20, w20
     e68:	cbz	w24, 1a60 <inflate+0x1718>
     e6c:	ldrb	w8, [x22], #1
     e70:	sub	w24, w24, #0x1
     e74:	cmp	x20, #0x18
     e78:	lsl	x8, x8, x20
     e7c:	add	x20, x20, #0x8
     e80:	add	x25, x8, x25
     e84:	b.cc	e68 <inflate+0xb20>  // b.lo, b.ul, b.last
     e88:	ldr	x8, [x27, #48]
     e8c:	cbz	x8, e94 <inflate+0xb4c>
     e90:	str	x25, [x8, #8]
     e94:	ldrb	w8, [x27, #25]
     e98:	tbz	w8, #1, edc <inflate+0xb94>
     e9c:	ldrb	w8, [x27, #16]
     ea0:	tbz	w8, #2, edc <inflate+0xb94>
     ea4:	stur	w25, [x29, #-4]
     ea8:	ldur	x25, [x29, #-24]
     eac:	sub	x1, x29, #0x4
     eb0:	mov	w20, w2
     eb4:	mov	w2, #0x4                   	// #4
     eb8:	ldr	x0, [x25]
     ebc:	mov	w26, w16
     ec0:	bl	0 <crc32>
     ec4:	str	x0, [x25]
     ec8:	ldur	x0, [x29, #-16]
     ecc:	adrp	x4, 0 <inflateResetKeep>
     ed0:	add	x4, x4, #0x0
     ed4:	mov	w16, w26
     ed8:	mov	w2, w20
     edc:	mov	w8, #0x3f37                	// #16183
     ee0:	mov	w20, wzr
     ee4:	mov	x25, xzr
     ee8:	str	w8, [x0]
     eec:	mov	w20, w20
     ef0:	cbz	w24, 1a60 <inflate+0x1718>
     ef4:	ldrb	w8, [x22], #1
     ef8:	sub	w24, w24, #0x1
     efc:	cmp	x20, #0x8
     f00:	lsl	x8, x8, x20
     f04:	add	x20, x20, #0x8
     f08:	add	x25, x8, x25
     f0c:	b.cc	ef0 <inflate+0xba8>  // b.lo, b.ul, b.last
     f10:	ldr	x8, [x27, #48]
     f14:	cbz	x8, f24 <inflate+0xbdc>
     f18:	and	w9, w25, #0xff
     f1c:	lsr	x10, x25, #8
     f20:	stp	w9, w10, [x8, #16]
     f24:	ldrb	w8, [x27, #25]
     f28:	tbz	w8, #1, f6c <inflate+0xc24>
     f2c:	ldrb	w8, [x27, #16]
     f30:	tbz	w8, #2, f6c <inflate+0xc24>
     f34:	sturh	w25, [x29, #-4]
     f38:	ldur	x25, [x29, #-24]
     f3c:	sub	x1, x29, #0x4
     f40:	mov	w20, w2
     f44:	mov	w2, #0x2                   	// #2
     f48:	ldr	x0, [x25]
     f4c:	mov	w26, w16
     f50:	bl	0 <crc32>
     f54:	str	x0, [x25]
     f58:	ldur	x0, [x29, #-16]
     f5c:	adrp	x4, 0 <inflateResetKeep>
     f60:	add	x4, x4, #0x0
     f64:	mov	w16, w26
     f68:	mov	w2, w20
     f6c:	mov	x25, xzr
     f70:	mov	w20, wzr
     f74:	mov	w8, #0x3f38                	// #16184
     f78:	str	w8, [x0]
     f7c:	ldr	w8, [x27, #24]
     f80:	tbnz	w8, #10, f94 <inflate+0xc4c>
     f84:	ldr	x8, [x27, #48]
     f88:	cbz	x8, 101c <inflate+0xcd4>
     f8c:	str	xzr, [x8, #24]
     f90:	b	101c <inflate+0xcd4>
     f94:	cmp	w20, #0xf
     f98:	b.hi	fc0 <inflate+0xc78>  // b.pmore
     f9c:	mov	w20, w20
     fa0:	cbz	w24, 1a60 <inflate+0x1718>
     fa4:	ldrb	w9, [x22], #1
     fa8:	sub	w24, w24, #0x1
     fac:	cmp	x20, #0x8
     fb0:	lsl	x9, x9, x20
     fb4:	add	x20, x20, #0x8
     fb8:	add	x25, x9, x25
     fbc:	b.cc	fa0 <inflate+0xc58>  // b.lo, b.ul, b.last
     fc0:	ldr	x9, [x27, #48]
     fc4:	str	w25, [x27, #92]
     fc8:	cbz	x9, fd0 <inflate+0xc88>
     fcc:	str	w25, [x9, #32]
     fd0:	tbz	w8, #9, 1014 <inflate+0xccc>
     fd4:	ldrb	w8, [x27, #16]
     fd8:	tbz	w8, #2, 1014 <inflate+0xccc>
     fdc:	ldur	x26, [x29, #-24]
     fe0:	sturh	w25, [x29, #-4]
     fe4:	sub	x1, x29, #0x4
     fe8:	mov	w20, w2
     fec:	ldr	x0, [x26]
     ff0:	mov	w2, #0x2                   	// #2
     ff4:	mov	w25, w16
     ff8:	bl	0 <crc32>
     ffc:	str	x0, [x26]
    1000:	ldur	x0, [x29, #-16]
    1004:	adrp	x4, 0 <inflateResetKeep>
    1008:	add	x4, x4, #0x0
    100c:	mov	w16, w25
    1010:	mov	w2, w20
    1014:	mov	x25, xzr
    1018:	mov	w20, wzr
    101c:	mov	w8, #0x3f39                	// #16185
    1020:	str	w8, [x0]
    1024:	ldr	w9, [x27, #24]
    1028:	tbz	w9, #10, 1100 <inflate+0xdb8>
    102c:	ldr	w8, [x27, #92]
    1030:	cmp	w8, w24
    1034:	csel	w26, w24, w8, hi  // hi = pmore
    1038:	cbz	w26, 10fc <inflate+0xdb4>
    103c:	ldr	x10, [x27, #48]
    1040:	cbz	x10, 109c <inflate+0xd54>
    1044:	ldr	x11, [x10, #24]
    1048:	cbz	x11, 109c <inflate+0xd54>
    104c:	ldp	w9, w10, [x10, #32]
    1050:	mov	w28, w23
    1054:	mov	w23, w2
    1058:	mov	x1, x22
    105c:	sub	w8, w9, w8
    1060:	add	w9, w8, w26
    1064:	add	x0, x11, x8
    1068:	sub	w8, w10, w8
    106c:	cmp	w9, w10
    1070:	csel	w2, w8, w26, hi  // hi = pmore
    1074:	stur	w16, [x29, #-32]
    1078:	bl	0 <memcpy>
    107c:	ldur	w16, [x29, #-32]
    1080:	ldur	x0, [x29, #-16]
    1084:	ldr	w9, [x27, #24]
    1088:	adrp	x4, 0 <inflateResetKeep>
    108c:	add	x4, x4, #0x0
    1090:	mov	w2, w23
    1094:	mov	w23, w28
    1098:	mov	w28, #0xffffc0cc            	// #-16180
    109c:	tbz	w9, #9, 10e8 <inflate+0xda0>
    10a0:	ldrb	w8, [x27, #16]
    10a4:	tbz	w8, #2, 10e8 <inflate+0xda0>
    10a8:	ldur	x28, [x29, #-24]
    10ac:	mov	x1, x22
    10b0:	stur	w23, [x29, #-40]
    10b4:	mov	w23, w2
    10b8:	ldr	x0, [x28]
    10bc:	mov	w2, w26
    10c0:	stur	w16, [x29, #-32]
    10c4:	bl	0 <crc32>
    10c8:	mov	w2, w23
    10cc:	ldur	w23, [x29, #-40]
    10d0:	ldur	w16, [x29, #-32]
    10d4:	str	x0, [x28]
    10d8:	ldur	x0, [x29, #-16]
    10dc:	adrp	x4, 0 <inflateResetKeep>
    10e0:	add	x4, x4, #0x0
    10e4:	mov	w28, #0xffffc0cc            	// #-16180
    10e8:	ldr	w8, [x27, #92]
    10ec:	sub	w24, w24, w26
    10f0:	add	x22, x22, w26, uxtw
    10f4:	sub	w8, w8, w26
    10f8:	str	w8, [x27, #92]
    10fc:	cbnz	w8, 1a60 <inflate+0x1718>
    1100:	mov	w8, #0x3f3a                	// #16186
    1104:	str	wzr, [x27, #92]
    1108:	str	w8, [x27, #8]
    110c:	ldrb	w8, [x27, #25]
    1110:	tbnz	w8, #3, 1124 <inflate+0xddc>
    1114:	ldr	x8, [x27, #48]
    1118:	cbz	x8, 11d0 <inflate+0xe88>
    111c:	str	xzr, [x8, #40]
    1120:	b	11d0 <inflate+0xe88>
    1124:	cbz	w24, 1a60 <inflate+0x1718>
    1128:	stur	w23, [x29, #-40]
    112c:	mov	x26, xzr
    1130:	mov	w23, w24
    1134:	stur	w16, [x29, #-32]
    1138:	ldr	x9, [x27, #48]
    113c:	ldrb	w28, [x22, x26]
    1140:	add	x26, x26, #0x1
    1144:	cbz	x9, 116c <inflate+0xe24>
    1148:	ldr	x8, [x9, #40]
    114c:	cbz	x8, 116c <inflate+0xe24>
    1150:	ldr	w10, [x27, #92]
    1154:	ldr	w9, [x9, #48]
    1158:	cmp	w10, w9
    115c:	b.cs	116c <inflate+0xe24>  // b.hs, b.nlast
    1160:	add	w9, w10, #0x1
    1164:	str	w9, [x27, #92]
    1168:	strb	w28, [x8, x10]
    116c:	cbz	w28, 1178 <inflate+0xe30>
    1170:	cmp	x26, x23
    1174:	b.cc	1138 <inflate+0xdf0>  // b.lo, b.ul, b.last
    1178:	ldrb	w8, [x27, #25]
    117c:	tbz	w8, #1, 11b8 <inflate+0xe70>
    1180:	ldrb	w8, [x27, #16]
    1184:	tbz	w8, #2, 11b8 <inflate+0xe70>
    1188:	ldur	x8, [x29, #-24]
    118c:	mov	x1, x22
    1190:	str	w2, [sp, #8]
    1194:	mov	w2, w26
    1198:	ldr	x0, [x8]
    119c:	bl	0 <crc32>
    11a0:	ldur	x8, [x29, #-24]
    11a4:	ldr	w2, [sp, #8]
    11a8:	adrp	x4, 0 <inflateResetKeep>
    11ac:	add	x4, x4, #0x0
    11b0:	str	x0, [x8]
    11b4:	ldur	x0, [x29, #-16]
    11b8:	add	x22, x22, x26
    11bc:	cbnz	w28, 1bfc <inflate+0x18b4>
    11c0:	sub	x24, x23, x26
    11c4:	ldur	w23, [x29, #-40]
    11c8:	ldur	w16, [x29, #-32]
    11cc:	mov	w28, #0xffffc0cc            	// #-16180
    11d0:	mov	w8, #0x3f3b                	// #16187
    11d4:	str	wzr, [x27, #92]
    11d8:	str	w8, [x27, #8]
    11dc:	ldrb	w8, [x27, #25]
    11e0:	tbnz	w8, #4, 11f4 <inflate+0xeac>
    11e4:	ldr	x8, [x27, #48]
    11e8:	cbz	x8, 12a0 <inflate+0xf58>
    11ec:	str	xzr, [x8, #56]
    11f0:	b	12a0 <inflate+0xf58>
    11f4:	cbz	w24, 1a60 <inflate+0x1718>
    11f8:	stur	w23, [x29, #-40]
    11fc:	mov	x26, xzr
    1200:	mov	w23, w24
    1204:	stur	w16, [x29, #-32]
    1208:	ldr	x9, [x27, #48]
    120c:	ldrb	w28, [x22, x26]
    1210:	add	x26, x26, #0x1
    1214:	cbz	x9, 123c <inflate+0xef4>
    1218:	ldr	x8, [x9, #56]
    121c:	cbz	x8, 123c <inflate+0xef4>
    1220:	ldr	w10, [x27, #92]
    1224:	ldr	w9, [x9, #64]
    1228:	cmp	w10, w9
    122c:	b.cs	123c <inflate+0xef4>  // b.hs, b.nlast
    1230:	add	w9, w10, #0x1
    1234:	str	w9, [x27, #92]
    1238:	strb	w28, [x8, x10]
    123c:	cbz	w28, 1248 <inflate+0xf00>
    1240:	cmp	x26, x23
    1244:	b.cc	1208 <inflate+0xec0>  // b.lo, b.ul, b.last
    1248:	ldrb	w8, [x27, #25]
    124c:	tbz	w8, #1, 1288 <inflate+0xf40>
    1250:	ldrb	w8, [x27, #16]
    1254:	tbz	w8, #2, 1288 <inflate+0xf40>
    1258:	ldur	x8, [x29, #-24]
    125c:	mov	x1, x22
    1260:	str	w2, [sp, #8]
    1264:	mov	w2, w26
    1268:	ldr	x0, [x8]
    126c:	bl	0 <crc32>
    1270:	ldur	x8, [x29, #-24]
    1274:	ldr	w2, [sp, #8]
    1278:	adrp	x4, 0 <inflateResetKeep>
    127c:	add	x4, x4, #0x0
    1280:	str	x0, [x8]
    1284:	ldur	x0, [x29, #-16]
    1288:	add	x22, x22, x26
    128c:	cbnz	w28, 1bfc <inflate+0x18b4>
    1290:	sub	x24, x23, x26
    1294:	ldur	w23, [x29, #-40]
    1298:	ldur	w16, [x29, #-32]
    129c:	mov	w28, #0xffffc0cc            	// #-16180
    12a0:	mov	w8, #0x3f3c                	// #16188
    12a4:	str	w8, [x0]
    12a8:	ldr	w8, [x27, #24]
    12ac:	tbz	w8, #9, 1300 <inflate+0xfb8>
    12b0:	cmp	w20, #0xf
    12b4:	b.hi	12e0 <inflate+0xf98>  // b.pmore
    12b8:	mov	w9, w20
    12bc:	cbz	w24, 1a4c <inflate+0x1704>
    12c0:	ldrb	w10, [x22], #1
    12c4:	add	x20, x9, #0x8
    12c8:	sub	w24, w24, #0x1
    12cc:	cmp	x9, #0x8
    12d0:	lsl	x10, x10, x9
    12d4:	add	x25, x10, x25
    12d8:	mov	x9, x20
    12dc:	b.cc	12bc <inflate+0xf74>  // b.lo, b.ul, b.last
    12e0:	ldrb	w9, [x27, #16]
    12e4:	tbz	w9, #2, 12f8 <inflate+0xfb0>
    12e8:	ldur	x9, [x29, #-24]
    12ec:	ldrh	w9, [x9]
    12f0:	cmp	x25, x9
    12f4:	b.ne	1358 <inflate+0x1010>  // b.any
    12f8:	mov	x25, xzr
    12fc:	mov	w20, wzr
    1300:	ldr	x9, [x27, #48]
    1304:	mov	w28, w16
    1308:	mov	w26, w2
    130c:	cbz	x9, 131c <inflate+0xfd4>
    1310:	ubfx	w8, w8, #9, #1
    1314:	mov	w10, #0x1                   	// #1
    1318:	stp	w8, w10, [x9, #68]
    131c:	mov	x0, xzr
    1320:	mov	x1, xzr
    1324:	mov	w2, wzr
    1328:	bl	0 <crc32>
    132c:	ldur	x8, [x29, #-24]
    1330:	mov	w2, w26
    1334:	mov	w16, w28
    1338:	str	x0, [x8]
    133c:	str	x0, [x19, #96]
    1340:	ldur	x0, [x29, #-16]
    1344:	mov	w8, #0x3f3f                	// #16191
    1348:	str	w8, [x0]
    134c:	adrp	x4, 0 <inflateResetKeep>
    1350:	mov	w28, #0xffffc0cc            	// #-16180
    1354:	b	150c <inflate+0x11c4>
    1358:	adrp	x8, 0 <inflateResetKeep>
    135c:	add	x8, x8, #0x0
    1360:	b	1a00 <inflate+0x16b8>
    1364:	bl	0 <adler32>
    1368:	str	x0, [x27, #32]
    136c:	str	x0, [x19, #96]
    1370:	ldr	w8, [x27, #16]
    1374:	ldur	x0, [x29, #-16]
    1378:	adrp	x4, 0 <inflateResetKeep>
    137c:	add	x4, x4, #0x0
    1380:	and	w8, w8, #0x4
    1384:	cbz	w8, 13d8 <inflate+0x1090>
    1388:	ldr	w9, [x27, #24]
    138c:	mov	x8, x25
    1390:	mov	w2, w26
    1394:	cbnz	w9, 13b8 <inflate+0x1070>
    1398:	lsr	x8, x25, #8
    139c:	lsl	w9, w25, #8
    13a0:	and	x8, x8, #0xff00
    13a4:	and	x9, x9, #0xff0000
    13a8:	bfxil	x8, x25, #24, #8
    13ac:	orr	x8, x8, x9
    13b0:	lsl	w9, w25, #24
    13b4:	orr	x8, x8, x9
    13b8:	ldur	x9, [x29, #-24]
    13bc:	ldr	x9, [x9]
    13c0:	cmp	x8, x9
    13c4:	b.ne	1448 <inflate+0x1100>  // b.any
    13c8:	mov	x25, xzr
    13cc:	mov	w20, wzr
    13d0:	mov	w16, w2
    13d4:	b	13e8 <inflate+0x10a0>
    13d8:	mov	x25, xzr
    13dc:	mov	w20, wzr
    13e0:	mov	w2, w26
    13e4:	mov	w16, w26
    13e8:	mov	w8, #0x3f4f                	// #16207
    13ec:	str	w8, [x0]
    13f0:	ldr	w8, [x27, #16]
    13f4:	cbz	w8, 1c5c <inflate+0x1914>
    13f8:	ldr	w8, [x27, #24]
    13fc:	cbz	w8, 1c5c <inflate+0x1914>
    1400:	cmp	w20, #0x1f
    1404:	b.hi	1430 <inflate+0x10e8>  // b.pmore
    1408:	mov	w8, w20
    140c:	cbz	w24, 1a5c <inflate+0x1714>
    1410:	ldrb	w9, [x22], #1
    1414:	add	x20, x8, #0x8
    1418:	sub	w24, w24, #0x1
    141c:	cmp	x8, #0x18
    1420:	lsl	x9, x9, x8
    1424:	add	x25, x9, x25
    1428:	mov	x8, x20
    142c:	b.cc	140c <inflate+0x10c4>  // b.lo, b.ul, b.last
    1430:	ldr	w8, [x27, #40]
    1434:	cmp	x25, x8
    1438:	b.eq	1c54 <inflate+0x190c>  // b.none
    143c:	adrp	x8, 0 <inflateResetKeep>
    1440:	add	x8, x8, #0x0
    1444:	b	1a00 <inflate+0x16b8>
    1448:	adrp	x8, 0 <inflateResetKeep>
    144c:	add	x8, x8, #0x0
    1450:	mov	w9, #0x3f51                	// #16209
    1454:	str	x8, [x19, #48]
    1458:	str	w9, [x0]
    145c:	mov	w16, w2
    1460:	b	1a0c <inflate+0x16c4>
    1464:	ldur	x0, [x29, #-16]
    1468:	ldr	w2, [sp, #8]
    146c:	ldur	w16, [x29, #-32]
    1470:	adrp	x4, 0 <inflateResetKeep>
    1474:	mov	w8, #0x3f47                	// #16199
    1478:	cmp	w23, #0x6
    147c:	mov	w28, #0xffffc0cc            	// #-16180
    1480:	add	x4, x4, #0x0
    1484:	stur	wzr, [x29, #-28]
    1488:	str	w8, [x0]
    148c:	b.eq	1a60 <inflate+0x1718>  // b.none
    1490:	mov	w8, #0x3f48                	// #16200
    1494:	str	w8, [x0]
    1498:	cmp	w2, #0x102
    149c:	b.cc	1514 <inflate+0x11cc>  // b.lo, b.ul, b.last
    14a0:	cmp	w24, #0x6
    14a4:	b.cc	1514 <inflate+0x11cc>  // b.lo, b.ul, b.last
    14a8:	mov	x0, x19
    14ac:	mov	w1, w16
    14b0:	str	x21, [x19, #24]
    14b4:	str	w2, [x19, #32]
    14b8:	str	x22, [x19]
    14bc:	str	w24, [x19, #8]
    14c0:	str	x25, [x27, #80]
    14c4:	str	w20, [x27, #88]
    14c8:	mov	w26, w16
    14cc:	bl	0 <inflate_fast>
    14d0:	ldr	w8, [x27, #8]
    14d4:	ldr	x21, [x19, #24]
    14d8:	ldr	w2, [x19, #32]
    14dc:	ldr	x22, [x19]
    14e0:	ldr	w24, [x19, #8]
    14e4:	ldr	x25, [x27, #80]
    14e8:	ldr	w20, [x27, #88]
    14ec:	mov	w9, #0x3f3f                	// #16191
    14f0:	cmp	w8, w9
    14f4:	b.ne	1500 <inflate+0x11b8>  // b.any
    14f8:	mov	w8, #0xffffffff            	// #-1
    14fc:	str	w8, [x27, #7148]
    1500:	ldur	x0, [x29, #-16]
    1504:	adrp	x4, 0 <inflateResetKeep>
    1508:	mov	w16, w26
    150c:	add	x4, x4, #0x0
    1510:	b	1a0c <inflate+0x16c4>
    1514:	ldr	w8, [x27, #120]
    1518:	ldr	x9, [x27, #104]
    151c:	mov	w10, #0xffffffff            	// #-1
    1520:	str	wzr, [x27, #7148]
    1524:	lsl	w10, w10, w8
    1528:	bic	w13, w25, w10
    152c:	add	x8, x9, w13, uxtw #2
    1530:	ldrb	w8, [x8, #1]
    1534:	cmp	w20, w8
    1538:	b.cs	1588 <inflate+0x1240>  // b.hs, b.nlast
    153c:	mvn	w13, w10
    1540:	mov	w10, w20
    1544:	mov	w11, w24
    1548:	mov	x12, x22
    154c:	cbz	w11, 1a54 <inflate+0x170c>
    1550:	ldrb	w8, [x12], #1
    1554:	sub	w11, w11, #0x1
    1558:	lsl	x8, x8, x10
    155c:	add	x25, x8, x25
    1560:	and	w14, w13, w25
    1564:	add	x8, x9, w14, uxtw #2
    1568:	ldrb	w8, [x8, #1]
    156c:	add	x10, x10, #0x8
    1570:	cmp	x10, x8
    1574:	b.cc	154c <inflate+0x1204>  // b.lo, b.ul, b.last
    1578:	mov	w13, w14
    157c:	mov	x22, x12
    1580:	mov	w24, w11
    1584:	mov	w20, w10
    1588:	add	x11, x9, x13, lsl #2
    158c:	ldrb	w12, [x11]
    1590:	ldrh	w11, [x11, #2]
    1594:	mov	w10, w8
    1598:	cbz	w12, 1650 <inflate+0x1308>
    159c:	and	w13, w12, #0xf0
    15a0:	cbnz	w13, 1650 <inflate+0x1308>
    15a4:	add	w12, w10, w12
    15a8:	mov	w13, #0xffffffff            	// #-1
    15ac:	lsl	w12, w13, w12
    15b0:	bic	w13, w25, w12
    15b4:	lsr	w13, w13, w10
    15b8:	add	w15, w13, w11
    15bc:	add	x13, x9, w15, uxtw #2
    15c0:	ldrb	w13, [x13, #1]
    15c4:	add	w14, w10, w13
    15c8:	cmp	w14, w20
    15cc:	b.ls	1630 <inflate+0x12e8>  // b.plast
    15d0:	mov	w1, w16
    15d4:	mvn	w15, w12
    15d8:	mov	w12, w20
    15dc:	mov	w14, w24
    15e0:	mov	x16, x22
    15e4:	cbz	w14, 1c08 <inflate+0x18c0>
    15e8:	ldrb	w13, [x16], #1
    15ec:	sub	w14, w14, #0x1
    15f0:	lsl	x13, x13, x12
    15f4:	add	x25, x13, x25
    15f8:	and	w13, w25, w15
    15fc:	lsr	w13, w13, w10
    1600:	add	w17, w13, w11
    1604:	add	x13, x9, w17, uxtw #2
    1608:	ldrb	w13, [x13, #1]
    160c:	add	x12, x12, #0x8
    1610:	add	x18, x10, x13
    1614:	cmp	x12, x18
    1618:	b.cc	15e4 <inflate+0x129c>  // b.lo, b.ul, b.last
    161c:	mov	w15, w17
    1620:	mov	x22, x16
    1624:	mov	w24, w14
    1628:	mov	w20, w12
    162c:	mov	w16, w1
    1630:	add	x9, x9, x15, lsl #2
    1634:	ldrh	w11, [x9, #2]
    1638:	ldrb	w12, [x9]
    163c:	lsr	x25, x25, x8
    1640:	sub	w20, w20, w10
    1644:	mov	w8, w13
    1648:	str	w10, [x27, #7148]
    164c:	b	1654 <inflate+0x130c>
    1650:	mov	w10, wzr
    1654:	lsr	x25, x25, x8
    1658:	sub	w20, w20, w8
    165c:	add	w8, w10, w8
    1660:	str	w8, [x27, #7148]
    1664:	str	w11, [x27, #92]
    1668:	cbz	w12, 193c <inflate+0x15f4>
    166c:	tbnz	w12, #5, 1948 <inflate+0x1600>
    1670:	tbnz	w12, #6, 1958 <inflate+0x1610>
    1674:	and	w8, w12, #0xf
    1678:	mov	w9, #0x3f49                	// #16201
    167c:	str	w8, [x27, #100]
    1680:	str	w9, [x27, #8]
    1684:	cbnz	w8, 948 <inflate+0x600>
    1688:	ldr	w11, [x27, #92]
    168c:	mov	w8, #0x3f4a                	// #16202
    1690:	str	w11, [x27, #7152]
    1694:	str	w8, [x27, #8]
    1698:	ldr	w8, [x27, #124]
    169c:	ldr	x9, [x27, #112]
    16a0:	mov	w10, #0xffffffff            	// #-1
    16a4:	lsl	w10, w10, w8
    16a8:	bic	w13, w25, w10
    16ac:	add	x8, x9, w13, uxtw #2
    16b0:	ldrb	w8, [x8, #1]
    16b4:	cmp	w20, w8
    16b8:	b.cs	1708 <inflate+0x13c0>  // b.hs, b.nlast
    16bc:	mvn	w13, w10
    16c0:	mov	w10, w20
    16c4:	mov	w11, w24
    16c8:	mov	x12, x22
    16cc:	cbz	w11, 1a54 <inflate+0x170c>
    16d0:	ldrb	w8, [x12], #1
    16d4:	sub	w11, w11, #0x1
    16d8:	lsl	x8, x8, x10
    16dc:	add	x25, x8, x25
    16e0:	and	w14, w13, w25
    16e4:	add	x8, x9, w14, uxtw #2
    16e8:	ldrb	w8, [x8, #1]
    16ec:	add	x10, x10, #0x8
    16f0:	cmp	x10, x8
    16f4:	b.cc	16cc <inflate+0x1384>  // b.lo, b.ul, b.last
    16f8:	mov	w13, w14
    16fc:	mov	x22, x12
    1700:	mov	w24, w11
    1704:	mov	w20, w10
    1708:	add	x10, x9, x13, lsl #2
    170c:	ldrb	w12, [x10]
    1710:	ldrh	w10, [x10, #2]
    1714:	tst	w12, #0xf0
    1718:	b.eq	1724 <inflate+0x13dc>  // b.none
    171c:	ldr	w9, [x27, #7148]
    1720:	b	17d4 <inflate+0x148c>
    1724:	add	w11, w8, w12
    1728:	mov	w12, #0xffffffff            	// #-1
    172c:	lsl	w12, w12, w11
    1730:	bic	w11, w25, w12
    1734:	lsr	w11, w11, w8
    1738:	add	w14, w11, w10
    173c:	add	x11, x9, w14, uxtw #2
    1740:	ldrb	w11, [x11, #1]
    1744:	add	w13, w8, w11
    1748:	cmp	w13, w20
    174c:	b.ls	17b0 <inflate+0x1468>  // b.plast
    1750:	mov	w18, w16
    1754:	mvn	w14, w12
    1758:	mov	w12, w20
    175c:	mov	w13, w24
    1760:	mov	x15, x22
    1764:	cbz	w13, 1be4 <inflate+0x189c>
    1768:	ldrb	w11, [x15], #1
    176c:	sub	w13, w13, #0x1
    1770:	lsl	x11, x11, x12
    1774:	add	x25, x11, x25
    1778:	and	w11, w25, w14
    177c:	lsr	w11, w11, w8
    1780:	add	w16, w11, w10
    1784:	add	x11, x9, w16, uxtw #2
    1788:	ldrb	w11, [x11, #1]
    178c:	add	x12, x12, #0x8
    1790:	add	x17, x8, x11
    1794:	cmp	x12, x17
    1798:	b.cc	1764 <inflate+0x141c>  // b.lo, b.ul, b.last
    179c:	mov	w14, w16
    17a0:	mov	x22, x15
    17a4:	mov	w24, w13
    17a8:	mov	w20, w12
    17ac:	mov	w16, w18
    17b0:	add	x9, x9, x14, lsl #2
    17b4:	ldr	w13, [x27, #7148]
    17b8:	ldrh	w10, [x9, #2]
    17bc:	ldrb	w12, [x9]
    17c0:	lsr	x25, x25, x8
    17c4:	sub	w20, w20, w8
    17c8:	add	w9, w13, w8
    17cc:	mov	w8, w11
    17d0:	str	w9, [x27, #7148]
    17d4:	lsr	x25, x25, x8
    17d8:	sub	w20, w20, w8
    17dc:	add	w8, w9, w8
    17e0:	str	w8, [x27, #7148]
    17e4:	tbnz	w12, #6, 1834 <inflate+0x14ec>
    17e8:	and	w8, w12, #0xf
    17ec:	mov	w9, #0x3f4b                	// #16203
    17f0:	stp	w10, w8, [x27, #96]
    17f4:	str	w9, [x27, #8]
    17f8:	cbz	w8, 1880 <inflate+0x1538>
    17fc:	cmp	w20, w8
    1800:	b.cs	1840 <inflate+0x14f8>  // b.hs, b.nlast
    1804:	mov	w11, w20
    1808:	mov	w9, w24
    180c:	mov	x10, x22
    1810:	cbz	w9, 1a54 <inflate+0x170c>
    1814:	ldrb	w12, [x10], #1
    1818:	sub	w9, w9, #0x1
    181c:	lsl	x12, x12, x11
    1820:	add	w11, w11, #0x8
    1824:	cmp	w11, w8
    1828:	add	x25, x12, x25
    182c:	b.cc	1810 <inflate+0x14c8>  // b.lo, b.ul, b.last
    1830:	b	184c <inflate+0x1504>
    1834:	adrp	x8, 0 <inflateResetKeep>
    1838:	add	x8, x8, #0x0
    183c:	b	1a00 <inflate+0x16b8>
    1840:	mov	x10, x22
    1844:	mov	w9, w24
    1848:	mov	w11, w20
    184c:	ldr	w13, [x27, #96]
    1850:	sub	w20, w11, w8
    1854:	ldr	w11, [x27, #7148]
    1858:	mov	w12, #0xffffffff            	// #-1
    185c:	lsl	w12, w12, w8
    1860:	bic	w12, w25, w12
    1864:	lsr	x25, x25, x8
    1868:	add	w12, w13, w12
    186c:	add	w8, w11, w8
    1870:	mov	x22, x10
    1874:	mov	w24, w9
    1878:	str	w12, [x27, #96]
    187c:	str	w8, [x27, #7148]
    1880:	mov	w8, #0x3f4c                	// #16204
    1884:	str	w8, [x0]
    1888:	cbz	w2, 1a60 <inflate+0x1718>
    188c:	ldr	w8, [x27, #96]
    1890:	sub	w9, w16, w2
    1894:	cmp	w8, w9
    1898:	b.ls	18c0 <inflate+0x1578>  // b.plast
    189c:	ldr	w10, [x27, #64]
    18a0:	sub	w8, w8, w9
    18a4:	cmp	w8, w10
    18a8:	b.ls	18d0 <inflate+0x1588>  // b.plast
    18ac:	ldr	w9, [x27, #7144]
    18b0:	cbz	w9, 18d0 <inflate+0x1588>
    18b4:	adrp	x8, 0 <inflateResetKeep>
    18b8:	add	x8, x8, #0x0
    18bc:	b	1a00 <inflate+0x16b8>
    18c0:	ldr	w10, [x27, #92]
    18c4:	sub	x8, x21, x8
    18c8:	mov	w9, w10
    18cc:	b	1904 <inflate+0x15bc>
    18d0:	ldr	w10, [x27, #68]
    18d4:	subs	w9, w8, w10
    18d8:	b.ls	18e8 <inflate+0x15a0>  // b.plast
    18dc:	ldr	w8, [x27, #60]
    18e0:	sub	w11, w8, w9
    18e4:	b	18f0 <inflate+0x15a8>
    18e8:	sub	w11, w10, w8
    18ec:	mov	w9, w8
    18f0:	ldr	w10, [x27, #92]
    18f4:	ldr	x8, [x27, #72]
    18f8:	cmp	w9, w10
    18fc:	add	x8, x8, w11, uxtw
    1900:	csel	w9, w10, w9, hi  // hi = pmore
    1904:	cmp	w9, w2
    1908:	csel	w9, w2, w9, hi  // hi = pmore
    190c:	sub	w10, w10, w9
    1910:	str	w10, [x27, #92]
    1914:	mov	w10, w9
    1918:	ldrb	w11, [x8], #1
    191c:	subs	w10, w10, #0x1
    1920:	strb	w11, [x21], #1
    1924:	b.ne	1918 <inflate+0x15d0>  // b.any
    1928:	ldr	w8, [x27, #92]
    192c:	sub	w2, w2, w9
    1930:	cbnz	w8, 1a0c <inflate+0x16c4>
    1934:	mov	w8, #0x3f48                	// #16200
    1938:	b	1940 <inflate+0x15f8>
    193c:	mov	w8, #0x3f4d                	// #16205
    1940:	str	w8, [x0]
    1944:	b	1a0c <inflate+0x16c4>
    1948:	mov	w8, #0xffffffff            	// #-1
    194c:	mov	w9, #0x3f3f                	// #16191
    1950:	str	w8, [x27, #7148]
    1954:	b	99c <inflate+0x654>
    1958:	adrp	x8, 0 <inflateResetKeep>
    195c:	add	x8, x8, #0x0
    1960:	b	1a00 <inflate+0x16b8>
    1964:	and	x8, x25, #0xf
    1968:	cmp	x8, #0x8
    196c:	b.ne	19f8 <inflate+0x16b0>  // b.any
    1970:	ldr	w10, [x27, #56]
    1974:	ubfx	x8, x25, #4, #4
    1978:	add	w9, w8, #0x8
    197c:	cbnz	w10, 1988 <inflate+0x1640>
    1980:	mov	w10, w9
    1984:	str	w9, [x27, #56]
    1988:	cmp	w8, #0x7
    198c:	b.hi	1a2c <inflate+0x16e4>  // b.pmore
    1990:	cmp	w9, w10
    1994:	b.hi	1a2c <inflate+0x16e4>  // b.pmore
    1998:	mov	w9, #0x100                 	// #256
    199c:	lsl	w8, w9, w8
    19a0:	mov	x0, xzr
    19a4:	mov	x1, xzr
    19a8:	mov	w20, w2
    19ac:	mov	w2, wzr
    19b0:	str	w8, [x27, #28]
    19b4:	mov	w26, w16
    19b8:	bl	0 <adler32>
    19bc:	str	x0, [x27, #32]
    19c0:	str	x0, [x19, #96]
    19c4:	ldur	x0, [x29, #-16]
    19c8:	tst	x25, #0x2000
    19cc:	mov	w8, #0x3f3d                	// #16189
    19d0:	mov	w9, #0x3f3f                	// #16191
    19d4:	adrp	x4, 0 <inflateResetKeep>
    19d8:	csel	w8, w9, w8, eq  // eq = none
    19dc:	add	x4, x4, #0x0
    19e0:	mov	w16, w26
    19e4:	mov	w2, w20
    19e8:	mov	w20, wzr
    19ec:	str	w8, [x27, #8]
    19f0:	mov	x25, xzr
    19f4:	b	1a0c <inflate+0x16c4>
    19f8:	adrp	x8, 0 <inflateResetKeep>
    19fc:	add	x8, x8, #0x0
    1a00:	mov	w9, #0x3f51                	// #16209
    1a04:	str	x8, [x19, #48]
    1a08:	str	w9, [x0]
    1a0c:	ldr	w8, [x0]
    1a10:	b	43c <inflate+0xf4>
    1a14:	adrp	x8, 0 <inflateResetKeep>
    1a18:	add	x8, x8, #0x0
    1a1c:	str	x8, [x19, #48]
    1a20:	ldr	w2, [sp, #8]
    1a24:	mov	w9, #0x3f51                	// #16209
    1a28:	b	1a08 <inflate+0x16c0>
    1a2c:	adrp	x8, 0 <inflateResetKeep>
    1a30:	lsr	x25, x25, #4
    1a34:	sub	w20, w20, #0x4
    1a38:	add	x8, x8, #0x0
    1a3c:	b	1a00 <inflate+0x16b8>
    1a40:	ldr	w8, [x19, #8]
    1a44:	cbnz	w8, 378 <inflate+0x30>
    1a48:	b	3ac <inflate+0x64>
    1a4c:	mov	w20, w9
    1a50:	b	1a60 <inflate+0x1718>
    1a54:	ldur	w26, [x29, #-28]
    1a58:	b	1a70 <inflate+0x1728>
    1a5c:	mov	w20, w8
    1a60:	ldur	w26, [x29, #-28]
    1a64:	b	1a7c <inflate+0x1734>
    1a68:	ldp	w16, w26, [x29, #-32]
    1a6c:	ldr	w2, [sp, #8]
    1a70:	add	w20, w20, w24, lsl #3
    1a74:	add	x22, x22, w24, uxtw
    1a78:	mov	w24, wzr
    1a7c:	str	x21, [x19, #24]
    1a80:	str	w2, [x19, #32]
    1a84:	str	x22, [x19]
    1a88:	str	w24, [x19, #8]
    1a8c:	ldr	w8, [x27, #60]
    1a90:	str	x25, [x27, #80]
    1a94:	str	w20, [x27, #88]
    1a98:	cbz	w8, 1ac8 <inflate+0x1780>
    1a9c:	sub	w2, w16, w2
    1aa0:	mov	x0, x19
    1aa4:	mov	x1, x21
    1aa8:	mov	w20, w16
    1aac:	bl	1c78 <updatewindow>
    1ab0:	cbz	w0, 1af8 <inflate+0x17b0>
    1ab4:	ldur	x9, [x29, #-16]
    1ab8:	mov	w8, #0x3f52                	// #16210
    1abc:	str	w8, [x9]
    1ac0:	mov	w0, #0xfffffffc            	// #-4
    1ac4:	b	37c <inflate+0x34>
    1ac8:	cmp	w16, w2
    1acc:	b.eq	1b04 <inflate+0x17bc>  // b.none
    1ad0:	ldr	w8, [x0]
    1ad4:	mov	w9, #0x3f50                	// #16208
    1ad8:	cmp	w8, w9
    1adc:	b.hi	1b04 <inflate+0x17bc>  // b.pmore
    1ae0:	cmp	w23, #0x4
    1ae4:	b.ne	1a9c <inflate+0x1754>  // b.any
    1ae8:	mov	w9, #0x3f4d                	// #16205
    1aec:	cmp	w8, w9
    1af0:	b.hi	1b04 <inflate+0x17bc>  // b.pmore
    1af4:	b	1a9c <inflate+0x1754>
    1af8:	ldr	w24, [x19, #8]
    1afc:	ldr	w2, [x19, #32]
    1b00:	mov	w16, w20
    1b04:	ldur	w10, [x29, #-36]
    1b08:	ldr	x8, [x19, #16]
    1b0c:	ldr	x9, [x19, #40]
    1b10:	subs	w21, w16, w2
    1b14:	sub	w20, w10, w24
    1b18:	add	x8, x8, x20
    1b1c:	add	x9, x9, x21
    1b20:	str	x8, [x19, #16]
    1b24:	str	x9, [x19, #40]
    1b28:	ldr	x8, [x27, #40]
    1b2c:	add	x8, x8, x21
    1b30:	str	x8, [x27, #40]
    1b34:	b.eq	1b70 <inflate+0x1828>  // b.none
    1b38:	ldr	w8, [x27, #16]
    1b3c:	tbz	w8, #2, 1b70 <inflate+0x1828>
    1b40:	ldr	x9, [x19, #24]
    1b44:	ldr	w8, [x27, #24]
    1b48:	ldr	x0, [x27, #32]
    1b4c:	mov	w2, w21
    1b50:	sub	x1, x9, x21
    1b54:	cbz	w8, 1b60 <inflate+0x1818>
    1b58:	bl	0 <crc32>
    1b5c:	b	1b64 <inflate+0x181c>
    1b60:	bl	0 <adler32>
    1b64:	ldur	x8, [x29, #-24]
    1b68:	str	x0, [x8]
    1b6c:	str	x0, [x19, #96]
    1b70:	ldp	w10, w9, [x27, #8]
    1b74:	ldr	w8, [x27, #88]
    1b78:	mov	w12, #0x3f3f                	// #16191
    1b7c:	orr	w11, w21, w20
    1b80:	cmp	w9, #0x0
    1b84:	cset	w9, ne  // ne = any
    1b88:	cmp	w10, w12
    1b8c:	mov	w12, #0x3f42                	// #16194
    1b90:	add	w8, w8, w9, lsl #6
    1b94:	cset	w9, eq  // eq = none
    1b98:	cmp	w10, w12
    1b9c:	mov	w12, #0x3f47                	// #16199
    1ba0:	add	w8, w8, w9, lsl #7
    1ba4:	mov	w9, #0x100                 	// #256
    1ba8:	ccmp	w10, w12, #0x4, ne  // ne = any
    1bac:	csel	w9, w9, wzr, eq  // eq = none
    1bb0:	cmp	w11, #0x0
    1bb4:	add	w8, w8, w9
    1bb8:	ccmp	w23, #0x4, #0x4, ne  // ne = any
    1bbc:	str	w8, [x19, #88]
    1bc0:	ccmp	w26, #0x0, #0x0, eq  // eq = none
    1bc4:	mov	w8, #0xfffffffb            	// #-5
    1bc8:	csel	w0, w8, w26, eq  // eq = none
    1bcc:	b	37c <inflate+0x34>
    1bd0:	mov	w26, #0xfffffffd            	// #-3
    1bd4:	b	1a7c <inflate+0x1734>
    1bd8:	ldur	w26, [x29, #-28]
    1bdc:	ldr	w2, [sp, #8]
    1be0:	b	1a7c <inflate+0x1734>
    1be4:	ldur	w26, [x29, #-28]
    1be8:	add	w20, w20, w24, lsl #3
    1bec:	add	x22, x22, w24, uxtw
    1bf0:	mov	w24, wzr
    1bf4:	mov	w16, w18
    1bf8:	b	1a7c <inflate+0x1734>
    1bfc:	sub	w24, w24, w26
    1c00:	ldur	w26, [x29, #-28]
    1c04:	b	1c48 <inflate+0x1900>
    1c08:	ldur	w26, [x29, #-28]
    1c0c:	add	w20, w20, w24, lsl #3
    1c10:	add	x22, x22, w24, uxtw
    1c14:	mov	w24, wzr
    1c18:	mov	w16, w1
    1c1c:	b	1a7c <inflate+0x1734>
    1c20:	str	x21, [x19, #24]
    1c24:	str	w2, [x19, #32]
    1c28:	str	x22, [x19]
    1c2c:	str	w24, [x19, #8]
    1c30:	str	x25, [x27, #80]
    1c34:	str	w20, [x27, #88]
    1c38:	mov	w0, #0x2                   	// #2
    1c3c:	b	37c <inflate+0x34>
    1c40:	ldur	w26, [x29, #-28]
    1c44:	ldr	x19, [sp, #8]
    1c48:	ldur	w23, [x29, #-40]
    1c4c:	ldur	w16, [x29, #-32]
    1c50:	b	1a7c <inflate+0x1734>
    1c54:	mov	x25, xzr
    1c58:	mov	w20, wzr
    1c5c:	mov	w8, #0x3f50                	// #16208
    1c60:	str	w8, [x0]
    1c64:	mov	w26, #0x1                   	// #1
    1c68:	b	1a7c <inflate+0x1734>
    1c6c:	lsr	x25, x25, #3
    1c70:	sub	w20, w20, #0x3
    1c74:	b	1a60 <inflate+0x1718>

0000000000001c78 <updatewindow>:
    1c78:	stp	x29, x30, [sp, #-64]!
    1c7c:	stp	x22, x21, [sp, #32]
    1c80:	stp	x20, x19, [sp, #48]
    1c84:	str	x23, [sp, #16]
    1c88:	ldr	x23, [x0, #56]
    1c8c:	mov	x8, x0
    1c90:	mov	w20, w2
    1c94:	mov	x19, x1
    1c98:	ldr	x0, [x23, #72]
    1c9c:	mov	x29, sp
    1ca0:	cbnz	x0, 1cc8 <updatewindow+0x50>
    1ca4:	ldr	w10, [x23, #56]
    1ca8:	ldr	x9, [x8, #64]
    1cac:	ldr	x0, [x8, #80]
    1cb0:	mov	w21, #0x1                   	// #1
    1cb4:	lsl	w1, w21, w10
    1cb8:	mov	w2, #0x1                   	// #1
    1cbc:	blr	x9
    1cc0:	str	x0, [x23, #72]
    1cc4:	cbz	x0, 1d50 <updatewindow+0xd8>
    1cc8:	ldr	w8, [x23, #60]
    1ccc:	cbnz	w8, 1ce4 <updatewindow+0x6c>
    1cd0:	ldr	w8, [x23, #56]
    1cd4:	mov	w9, #0x1                   	// #1
    1cd8:	str	xzr, [x23, #64]
    1cdc:	lsl	w8, w9, w8
    1ce0:	str	w8, [x23, #60]
    1ce4:	cmp	w8, w20
    1ce8:	b.ls	1d34 <updatewindow+0xbc>  // b.plast
    1cec:	ldr	w9, [x23, #68]
    1cf0:	sub	x1, x19, w20, uxtw
    1cf4:	sub	w8, w8, w9
    1cf8:	cmp	w8, w20
    1cfc:	csel	w22, w20, w8, hi  // hi = pmore
    1d00:	add	x0, x0, x9
    1d04:	mov	x2, x22
    1d08:	bl	0 <memcpy>
    1d0c:	subs	w20, w20, w22
    1d10:	b.eq	1d68 <updatewindow+0xf0>  // b.none
    1d14:	ldr	x0, [x23, #72]
    1d18:	mov	w2, w20
    1d1c:	sub	x1, x19, w20, uxtw
    1d20:	bl	0 <memcpy>
    1d24:	ldr	w8, [x23, #60]
    1d28:	mov	w21, wzr
    1d2c:	str	w20, [x23, #68]
    1d30:	b	1d4c <updatewindow+0xd4>
    1d34:	mov	w2, w8
    1d38:	sub	x1, x19, w8, uxtw
    1d3c:	bl	0 <memcpy>
    1d40:	ldr	w8, [x23, #60]
    1d44:	mov	w21, wzr
    1d48:	str	wzr, [x23, #68]
    1d4c:	str	w8, [x23, #64]
    1d50:	mov	w0, w21
    1d54:	ldp	x20, x19, [sp, #48]
    1d58:	ldp	x22, x21, [sp, #32]
    1d5c:	ldr	x23, [sp, #16]
    1d60:	ldp	x29, x30, [sp], #64
    1d64:	ret
    1d68:	ldp	w8, w9, [x23, #64]
    1d6c:	ldr	w10, [x23, #60]
    1d70:	mov	w21, wzr
    1d74:	add	w9, w9, w22
    1d78:	cmp	w9, w10
    1d7c:	csel	w9, wzr, w9, eq  // eq = none
    1d80:	cmp	w8, w10
    1d84:	str	w9, [x23, #68]
    1d88:	b.cs	1d50 <updatewindow+0xd8>  // b.hs, b.nlast
    1d8c:	mov	w21, wzr
    1d90:	add	w8, w8, w22
    1d94:	b	1d4c <updatewindow+0xd4>

0000000000001d98 <inflateEnd>:
    1d98:	stp	x29, x30, [sp, #-32]!
    1d9c:	str	x19, [sp, #16]
    1da0:	mov	x29, sp
    1da4:	mov	x19, x0
    1da8:	bl	8c <inflateStateCheck>
    1dac:	cbz	w0, 1db8 <inflateEnd+0x20>
    1db0:	mov	w0, #0xfffffffe            	// #-2
    1db4:	b	1de4 <inflateEnd+0x4c>
    1db8:	ldr	x1, [x19, #56]
    1dbc:	ldr	x8, [x1, #72]
    1dc0:	cbz	x8, 1dd4 <inflateEnd+0x3c>
    1dc4:	ldp	x9, x0, [x19, #72]
    1dc8:	mov	x1, x8
    1dcc:	blr	x9
    1dd0:	ldr	x1, [x19, #56]
    1dd4:	ldp	x8, x0, [x19, #72]
    1dd8:	blr	x8
    1ddc:	mov	w0, wzr
    1de0:	str	xzr, [x19, #56]
    1de4:	ldr	x19, [sp, #16]
    1de8:	ldp	x29, x30, [sp], #32
    1dec:	ret

0000000000001df0 <inflateGetDictionary>:
    1df0:	stp	x29, x30, [sp, #-48]!
    1df4:	str	x21, [sp, #16]
    1df8:	stp	x20, x19, [sp, #32]
    1dfc:	mov	x29, sp
    1e00:	mov	x19, x2
    1e04:	mov	x20, x1
    1e08:	mov	x21, x0
    1e0c:	bl	8c <inflateStateCheck>
    1e10:	cbz	w0, 1e1c <inflateGetDictionary+0x2c>
    1e14:	mov	w0, #0xfffffffe            	// #-2
    1e18:	b	1e68 <inflateGetDictionary+0x78>
    1e1c:	ldr	x21, [x21, #56]
    1e20:	cbz	x20, 1e58 <inflateGetDictionary+0x68>
    1e24:	ldr	w8, [x21, #64]
    1e28:	cbz	w8, 1e58 <inflateGetDictionary+0x68>
    1e2c:	ldr	x9, [x21, #72]
    1e30:	ldr	w10, [x21, #68]
    1e34:	mov	x0, x20
    1e38:	add	x1, x9, x10
    1e3c:	sub	w2, w8, w10
    1e40:	bl	0 <memcpy>
    1e44:	ldp	w8, w2, [x21, #64]
    1e48:	ldr	x1, [x21, #72]
    1e4c:	add	x8, x20, x8
    1e50:	sub	x0, x8, x2
    1e54:	bl	0 <memcpy>
    1e58:	mov	w0, wzr
    1e5c:	cbz	x19, 1e68 <inflateGetDictionary+0x78>
    1e60:	ldr	w8, [x21, #64]
    1e64:	str	w8, [x19]
    1e68:	ldp	x20, x19, [sp, #32]
    1e6c:	ldr	x21, [sp, #16]
    1e70:	ldp	x29, x30, [sp], #48
    1e74:	ret

0000000000001e78 <inflateSetDictionary>:
    1e78:	stp	x29, x30, [sp, #-64]!
    1e7c:	str	x23, [sp, #16]
    1e80:	stp	x22, x21, [sp, #32]
    1e84:	stp	x20, x19, [sp, #48]
    1e88:	mov	x29, sp
    1e8c:	mov	w19, w2
    1e90:	mov	x21, x1
    1e94:	mov	x20, x0
    1e98:	bl	8c <inflateStateCheck>
    1e9c:	cbz	w0, 1eb8 <inflateSetDictionary+0x40>
    1ea0:	mov	w0, #0xfffffffe            	// #-2
    1ea4:	ldp	x20, x19, [sp, #48]
    1ea8:	ldp	x22, x21, [sp, #32]
    1eac:	ldr	x23, [sp, #16]
    1eb0:	ldp	x29, x30, [sp], #64
    1eb4:	ret
    1eb8:	ldr	x22, [x20, #56]
    1ebc:	ldr	w9, [x22, #16]
    1ec0:	ldr	w8, [x22, #8]
    1ec4:	cbz	w9, 1edc <inflateSetDictionary+0x64>
    1ec8:	mov	w9, #0x3f3e                	// #16190
    1ecc:	cmp	w8, w9
    1ed0:	b.ne	1ea0 <inflateSetDictionary+0x28>  // b.any
    1ed4:	add	x23, x22, #0x8
    1ed8:	b	1eec <inflateSetDictionary+0x74>
    1edc:	mov	w9, #0x3f3e                	// #16190
    1ee0:	cmp	w8, w9
    1ee4:	add	x23, x22, #0x8
    1ee8:	b.ne	1f14 <inflateSetDictionary+0x9c>  // b.any
    1eec:	mov	x0, xzr
    1ef0:	mov	x1, xzr
    1ef4:	mov	w2, wzr
    1ef8:	bl	0 <adler32>
    1efc:	mov	x1, x21
    1f00:	mov	w2, w19
    1f04:	bl	0 <adler32>
    1f08:	ldr	x8, [x22, #32]
    1f0c:	cmp	x0, x8
    1f10:	b.ne	1f38 <inflateSetDictionary+0xc0>  // b.any
    1f14:	add	x1, x21, w19, uxtw
    1f18:	mov	x0, x20
    1f1c:	mov	w2, w19
    1f20:	bl	1c78 <updatewindow>
    1f24:	cbz	w0, 1f40 <inflateSetDictionary+0xc8>
    1f28:	mov	w8, #0x3f52                	// #16210
    1f2c:	str	w8, [x23]
    1f30:	mov	w0, #0xfffffffc            	// #-4
    1f34:	b	1ea4 <inflateSetDictionary+0x2c>
    1f38:	mov	w0, #0xfffffffd            	// #-3
    1f3c:	b	1ea4 <inflateSetDictionary+0x2c>
    1f40:	mov	w8, #0x1                   	// #1
    1f44:	str	w8, [x22, #20]
    1f48:	b	1ea4 <inflateSetDictionary+0x2c>

0000000000001f4c <inflateGetHeader>:
    1f4c:	stp	x29, x30, [sp, #-32]!
    1f50:	stp	x20, x19, [sp, #16]
    1f54:	mov	x29, sp
    1f58:	mov	x19, x1
    1f5c:	mov	x20, x0
    1f60:	bl	8c <inflateStateCheck>
    1f64:	cbnz	w0, 1f74 <inflateGetHeader+0x28>
    1f68:	ldr	x8, [x20, #56]
    1f6c:	ldrb	w9, [x8, #16]
    1f70:	tbnz	w9, #1, 1f7c <inflateGetHeader+0x30>
    1f74:	mov	w0, #0xfffffffe            	// #-2
    1f78:	b	1f88 <inflateGetHeader+0x3c>
    1f7c:	mov	w0, wzr
    1f80:	str	x19, [x8, #48]
    1f84:	str	wzr, [x19, #72]
    1f88:	ldp	x20, x19, [sp, #16]
    1f8c:	ldp	x29, x30, [sp], #32
    1f90:	ret

0000000000001f94 <inflateSync>:
    1f94:	sub	sp, sp, #0x40
    1f98:	stp	x29, x30, [sp, #16]
    1f9c:	stp	x22, x21, [sp, #32]
    1fa0:	stp	x20, x19, [sp, #48]
    1fa4:	add	x29, sp, #0x10
    1fa8:	mov	x19, x0
    1fac:	bl	8c <inflateStateCheck>
    1fb0:	cbz	w0, 1fcc <inflateSync+0x38>
    1fb4:	mov	w0, #0xfffffffe            	// #-2
    1fb8:	ldp	x20, x19, [sp, #48]
    1fbc:	ldp	x22, x21, [sp, #32]
    1fc0:	ldp	x29, x30, [sp, #16]
    1fc4:	add	sp, sp, #0x40
    1fc8:	ret
    1fcc:	ldr	w2, [x19, #8]
    1fd0:	ldr	x20, [x19, #56]
    1fd4:	cbnz	w2, 1fec <inflateSync+0x58>
    1fd8:	ldr	w8, [x20, #88]
    1fdc:	cmp	w8, #0x8
    1fe0:	b.cs	1fec <inflateSync+0x58>  // b.hs, b.nlast
    1fe4:	mov	w0, #0xfffffffb            	// #-5
    1fe8:	b	1fb8 <inflateSync+0x24>
    1fec:	ldr	w9, [x20, #8]
    1ff0:	mov	w8, #0x3f53                	// #16211
    1ff4:	cmp	w9, w8
    1ff8:	b.eq	2068 <inflateSync+0xd4>  // b.none
    1ffc:	ldr	w9, [x20, #88]
    2000:	ldr	x10, [x20, #80]
    2004:	str	w8, [x20, #8]
    2008:	and	x8, x9, #0x7
    200c:	ands	w11, w9, #0xfffffff8
    2010:	lsl	x8, x10, x8
    2014:	str	x8, [x20, #80]
    2018:	str	w11, [x20, #88]
    201c:	b.eq	2050 <inflateSync+0xbc>  // b.none
    2020:	and	w9, w9, #0xfffffff8
    2024:	mov	x2, xzr
    2028:	neg	w9, w9
    202c:	sub	x10, x29, #0x4
    2030:	strb	w8, [x10, x2]
    2034:	add	x2, x2, #0x1
    2038:	adds	w9, w9, #0x8
    203c:	lsr	x8, x8, #8
    2040:	b.ne	2030 <inflateSync+0x9c>  // b.any
    2044:	str	x8, [x20, #80]
    2048:	str	wzr, [x20, #88]
    204c:	b	2054 <inflateSync+0xc0>
    2050:	mov	w2, wzr
    2054:	mov	x0, x20
    2058:	str	wzr, [x0, #140]!
    205c:	sub	x1, x29, #0x4
    2060:	bl	20d0 <syncsearch>
    2064:	ldr	w2, [x19, #8]
    2068:	ldr	x1, [x19]
    206c:	add	x0, x20, #0x8c
    2070:	bl	20d0 <syncsearch>
    2074:	ldr	w8, [x19, #8]
    2078:	ldr	x9, [x19]
    207c:	ldr	x10, [x19, #16]
    2080:	sub	w8, w8, w0
    2084:	add	x9, x9, w0, uxtw
    2088:	add	x21, x10, w0, uxtw
    208c:	str	w8, [x19, #8]
    2090:	str	x9, [x19]
    2094:	str	x21, [x19, #16]
    2098:	ldr	w8, [x20, #140]
    209c:	cmp	w8, #0x4
    20a0:	b.ne	20c8 <inflateSync+0x134>  // b.any
    20a4:	ldr	x22, [x19, #40]
    20a8:	mov	x0, x19
    20ac:	bl	d4 <inflateReset>
    20b0:	mov	w0, wzr
    20b4:	mov	w8, #0x3f3f                	// #16191
    20b8:	str	x21, [x19, #16]
    20bc:	str	x22, [x19, #40]
    20c0:	str	w8, [x20, #8]
    20c4:	b	1fb8 <inflateSync+0x24>
    20c8:	mov	w0, #0xfffffffd            	// #-3
    20cc:	b	1fb8 <inflateSync+0x24>

00000000000020d0 <syncsearch>:
    20d0:	ldr	w9, [x0]
    20d4:	mov	w8, wzr
    20d8:	cmp	w9, #0x3
    20dc:	b.hi	2128 <syncsearch+0x58>  // b.pmore
    20e0:	cbz	w2, 2128 <syncsearch+0x58>
    20e4:	mov	x8, xzr
    20e8:	mov	w10, w2
    20ec:	mov	w11, #0xff                  	// #255
    20f0:	mov	w12, #0x4                   	// #4
    20f4:	ldrb	w13, [x1, x8]
    20f8:	cmp	w9, #0x2
    20fc:	sub	w14, w12, w9
    2100:	csel	w15, wzr, w11, cc  // cc = lo, ul, last
    2104:	cmp	w13, #0x0
    2108:	csel	w14, w14, wzr, eq  // eq = none
    210c:	cmp	w15, w13
    2110:	csinc	w9, w14, w9, ne  // ne = any
    2114:	cmp	w9, #0x3
    2118:	add	x8, x8, #0x1
    211c:	b.hi	2128 <syncsearch+0x58>  // b.pmore
    2120:	cmp	x8, x10
    2124:	b.cc	20f4 <syncsearch+0x24>  // b.lo, b.ul, b.last
    2128:	str	w9, [x0]
    212c:	mov	w0, w8
    2130:	ret

0000000000002134 <inflateSyncPoint>:
    2134:	stp	x29, x30, [sp, #-32]!
    2138:	str	x19, [sp, #16]
    213c:	mov	x29, sp
    2140:	mov	x19, x0
    2144:	bl	8c <inflateStateCheck>
    2148:	cbz	w0, 2154 <inflateSyncPoint+0x20>
    214c:	mov	w0, #0xfffffffe            	// #-2
    2150:	b	217c <inflateSyncPoint+0x48>
    2154:	ldr	x8, [x19, #56]
    2158:	mov	w10, #0x3f41                	// #16193
    215c:	ldr	w9, [x8, #8]
    2160:	cmp	w9, w10
    2164:	b.ne	2178 <inflateSyncPoint+0x44>  // b.any
    2168:	ldr	w8, [x8, #88]
    216c:	cmp	w8, #0x0
    2170:	cset	w0, eq  // eq = none
    2174:	b	217c <inflateSyncPoint+0x48>
    2178:	mov	w0, wzr
    217c:	ldr	x19, [sp, #16]
    2180:	ldp	x29, x30, [sp], #32
    2184:	ret

0000000000002188 <inflateCopy>:
    2188:	stp	x29, x30, [sp, #-64]!
    218c:	stp	x20, x19, [sp, #48]
    2190:	mov	x19, x0
    2194:	mov	x0, x1
    2198:	str	x23, [sp, #16]
    219c:	stp	x22, x21, [sp, #32]
    21a0:	mov	x29, sp
    21a4:	mov	x23, x1
    21a8:	bl	8c <inflateStateCheck>
    21ac:	mov	w8, w0
    21b0:	mov	w0, #0xfffffffe            	// #-2
    21b4:	cbz	x19, 22b8 <inflateCopy+0x130>
    21b8:	cbnz	w8, 22b8 <inflateCopy+0x130>
    21bc:	ldp	x21, x8, [x23, #56]
    21c0:	ldr	x0, [x23, #80]
    21c4:	mov	w1, #0x1                   	// #1
    21c8:	mov	w2, #0x1bf8                	// #7160
    21cc:	blr	x8
    21d0:	cbz	x0, 2210 <inflateCopy+0x88>
    21d4:	ldr	x8, [x21, #72]
    21d8:	mov	x20, x0
    21dc:	cbz	x8, 2218 <inflateCopy+0x90>
    21e0:	ldr	w9, [x21, #56]
    21e4:	ldr	x8, [x23, #64]
    21e8:	ldr	x0, [x23, #80]
    21ec:	mov	w10, #0x1                   	// #1
    21f0:	lsl	w1, w10, w9
    21f4:	mov	w2, #0x1                   	// #1
    21f8:	blr	x8
    21fc:	mov	x22, x0
    2200:	cbnz	x0, 221c <inflateCopy+0x94>
    2204:	ldp	x8, x0, [x23, #72]
    2208:	mov	x1, x20
    220c:	blr	x8
    2210:	mov	w0, #0xfffffffc            	// #-4
    2214:	b	22b8 <inflateCopy+0x130>
    2218:	mov	x22, xzr
    221c:	mov	w2, #0x70                  	// #112
    2220:	mov	x0, x19
    2224:	mov	x1, x23
    2228:	bl	0 <memcpy>
    222c:	mov	w2, #0x1bf8                	// #7160
    2230:	mov	x0, x20
    2234:	mov	x1, x21
    2238:	bl	0 <memcpy>
    223c:	str	x19, [x20]
    2240:	ldr	x10, [x21, #104]
    2244:	add	x8, x21, #0x558
    2248:	subs	x9, x10, x8
    224c:	b.cc	227c <inflateCopy+0xf4>  // b.lo, b.ul, b.last
    2250:	mov	w11, #0x1be4                	// #7140
    2254:	add	x11, x21, x11
    2258:	cmp	x10, x11
    225c:	b.hi	227c <inflateCopy+0xf4>  // b.pmore
    2260:	add	x10, x20, #0x558
    2264:	add	x9, x10, x9
    2268:	str	x9, [x20, #104]
    226c:	ldr	x9, [x21, #112]
    2270:	sub	x9, x9, x8
    2274:	add	x9, x10, x9
    2278:	str	x9, [x20, #112]
    227c:	ldr	x9, [x21, #144]
    2280:	sub	x8, x9, x8
    2284:	add	x8, x20, x8
    2288:	add	x8, x8, #0x558
    228c:	str	x8, [x20, #144]
    2290:	cbz	x22, 22ac <inflateCopy+0x124>
    2294:	ldr	w8, [x21, #56]
    2298:	ldr	x1, [x21, #72]
    229c:	mov	w9, #0x1                   	// #1
    22a0:	mov	x0, x22
    22a4:	lsl	x2, x9, x8
    22a8:	bl	0 <memcpy>
    22ac:	mov	w0, wzr
    22b0:	str	x22, [x20, #72]
    22b4:	str	x20, [x19, #56]
    22b8:	ldp	x20, x19, [sp, #48]
    22bc:	ldp	x22, x21, [sp, #32]
    22c0:	ldr	x23, [sp, #16]
    22c4:	ldp	x29, x30, [sp], #64
    22c8:	ret

00000000000022cc <inflateUndermine>:
    22cc:	stp	x29, x30, [sp, #-32]!
    22d0:	str	x19, [sp, #16]
    22d4:	mov	x29, sp
    22d8:	mov	x19, x0
    22dc:	bl	8c <inflateStateCheck>
    22e0:	cbz	w0, 22ec <inflateUndermine+0x20>
    22e4:	mov	w0, #0xfffffffe            	// #-2
    22e8:	b	22fc <inflateUndermine+0x30>
    22ec:	ldr	x8, [x19, #56]
    22f0:	mov	w9, #0x1                   	// #1
    22f4:	mov	w0, #0xfffffffd            	// #-3
    22f8:	str	w9, [x8, #7144]
    22fc:	ldr	x19, [sp, #16]
    2300:	ldp	x29, x30, [sp], #32
    2304:	ret

0000000000002308 <inflateValidate>:
    2308:	stp	x29, x30, [sp, #-32]!
    230c:	stp	x20, x19, [sp, #16]
    2310:	mov	x29, sp
    2314:	mov	w19, w1
    2318:	mov	x20, x0
    231c:	bl	8c <inflateStateCheck>
    2320:	cbz	w0, 232c <inflateValidate+0x24>
    2324:	mov	w0, #0xfffffffe            	// #-2
    2328:	b	2348 <inflateValidate+0x40>
    232c:	ldr	x8, [x20, #56]
    2330:	cmp	w19, #0x0
    2334:	ldr	w9, [x8, #16]
    2338:	and	w10, w9, #0xfffffffb
    233c:	orr	w9, w9, #0x4
    2340:	csel	w9, w10, w9, eq  // eq = none
    2344:	str	w9, [x8, #16]
    2348:	ldp	x20, x19, [sp, #16]
    234c:	ldp	x29, x30, [sp], #32
    2350:	ret

0000000000002354 <inflateMark>:
    2354:	stp	x29, x30, [sp, #-32]!
    2358:	str	x19, [sp, #16]
    235c:	mov	x29, sp
    2360:	mov	x19, x0
    2364:	bl	8c <inflateStateCheck>
    2368:	cbz	w0, 2374 <inflateMark+0x20>
    236c:	mov	x0, #0xffffffffffff0000    	// #-65536
    2370:	b	23bc <inflateMark+0x68>
    2374:	ldr	x9, [x19, #56]
    2378:	mov	w11, #0x3f4c                	// #16204
    237c:	ldr	w10, [x9, #8]
    2380:	ldrsw	x8, [x9, #7148]
    2384:	cmp	w10, w11
    2388:	lsl	x8, x8, #16
    238c:	b.eq	23a4 <inflateMark+0x50>  // b.none
    2390:	mov	w11, #0x3f43                	// #16195
    2394:	cmp	w10, w11
    2398:	b.ne	23b4 <inflateMark+0x60>  // b.any
    239c:	ldr	w9, [x9, #92]
    23a0:	b	23b8 <inflateMark+0x64>
    23a4:	ldr	w10, [x9, #7152]
    23a8:	ldr	w9, [x9, #92]
    23ac:	sub	w9, w10, w9
    23b0:	b	23b8 <inflateMark+0x64>
    23b4:	mov	w9, wzr
    23b8:	add	x0, x8, w9, uxtw
    23bc:	ldr	x19, [sp, #16]
    23c0:	ldp	x29, x30, [sp], #32
    23c4:	ret

00000000000023c8 <inflateCodesUsed>:
    23c8:	stp	x29, x30, [sp, #-32]!
    23cc:	str	x19, [sp, #16]
    23d0:	mov	x29, sp
    23d4:	mov	x19, x0
    23d8:	bl	8c <inflateStateCheck>
    23dc:	cbz	w0, 23e8 <inflateCodesUsed+0x20>
    23e0:	mov	x0, #0xffffffffffffffff    	// #-1
    23e4:	b	23fc <inflateCodesUsed+0x34>
    23e8:	ldr	x8, [x19, #56]
    23ec:	ldr	x9, [x8, #144]
    23f0:	sub	x8, x9, x8
    23f4:	sub	x8, x8, #0x558
    23f8:	asr	x0, x8, #2
    23fc:	ldr	x19, [sp, #16]
    2400:	ldp	x29, x30, [sp], #32
    2404:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0x90
   4:	movi	v0.2d, #0x0
   8:	stp	x28, x27, [sp, #64]
   c:	stp	x26, x25, [sp, #80]
  10:	stp	x24, x23, [sp, #96]
  14:	stp	x22, x21, [sp, #112]
  18:	stp	x20, x19, [sp, #128]
  1c:	stp	q0, q0, [sp, #32]
  20:	cbz	w2, 48 <inflate_table+0x48>
  24:	mov	w8, w2
  28:	add	x9, sp, #0x20
  2c:	mov	x10, x1
  30:	ldrh	w11, [x10], #2
  34:	subs	x8, x8, #0x1
  38:	ldrh	w12, [x9, x11, lsl #1]
  3c:	add	w12, w12, #0x1
  40:	strh	w12, [x9, x11, lsl #1]
  44:	b.ne	30 <inflate_table+0x30>  // b.any
  48:	ldr	w8, [x4]
  4c:	mov	w9, #0xf                   	// #15
  50:	add	x10, sp, #0x20
  54:	ldrh	w11, [x10, w9, uxtw #1]
  58:	cbnz	w11, 98 <inflate_table+0x98>
  5c:	subs	w9, w9, #0x1
  60:	b.ne	54 <inflate_table+0x54>  // b.any
  64:	ldr	x9, [x3]
  68:	mov	w10, #0x140                 	// #320
  6c:	mov	w8, wzr
  70:	add	x11, x9, #0x4
  74:	str	x11, [x3]
  78:	str	w10, [x9]
  7c:	ldr	x9, [x3]
  80:	mov	w11, #0x1                   	// #1
  84:	add	x12, x9, #0x4
  88:	str	x12, [x3]
  8c:	str	w10, [x9]
  90:	str	w11, [x4]
  94:	b	1c0 <inflate_table+0x1c0>
  98:	cmp	w8, w9
  9c:	csel	w8, w9, w8, hi  // hi = pmore
  a0:	cmp	w9, #0x2
  a4:	b.cc	d0 <inflate_table+0xd0>  // b.lo, b.ul, b.last
  a8:	mov	w11, w9
  ac:	mov	w10, #0x1                   	// #1
  b0:	add	x12, sp, #0x20
  b4:	ldrh	w13, [x12, x10, lsl #1]
  b8:	cbnz	w13, d4 <inflate_table+0xd4>
  bc:	add	x10, x10, #0x1
  c0:	cmp	x11, x10
  c4:	b.ne	b4 <inflate_table+0xb4>  // b.any
  c8:	mov	w10, w9
  cc:	b	d4 <inflate_table+0xd4>
  d0:	mov	w10, #0x1                   	// #1
  d4:	cmp	w8, w10
  d8:	mov	w12, #0x1                   	// #1
  dc:	mov	w13, #0x2                   	// #2
  e0:	csel	w11, w10, w8, cc  // cc = lo, ul, last
  e4:	add	x8, sp, #0x20
  e8:	ldrh	w14, [x8, x13]
  ec:	lsl	w12, w12, #1
  f0:	subs	w12, w12, w14
  f4:	b.mi	1bc <inflate_table+0x1bc>  // b.first
  f8:	add	x13, x13, #0x2
  fc:	cmp	x13, #0x20
 100:	b.ne	e8 <inflate_table+0xe8>  // b.any
 104:	cmp	w12, #0x1
 108:	b.lt	11c <inflate_table+0x11c>  // b.tstop
 10c:	mov	w8, #0xffffffff            	// #-1
 110:	cbz	w0, 1c0 <inflate_table+0x1c0>
 114:	cmp	w9, #0x1
 118:	b.ne	1c0 <inflate_table+0x1c0>  // b.any
 11c:	add	x13, sp, #0x20
 120:	mov	x14, sp
 124:	mov	x8, xzr
 128:	mov	w12, wzr
 12c:	orr	x13, x13, #0x2
 130:	add	x14, x14, #0x4
 134:	strh	wzr, [sp, #2]
 138:	ldrh	w15, [x13, x8]
 13c:	add	w12, w15, w12
 140:	strh	w12, [x14, x8]
 144:	add	x8, x8, #0x2
 148:	cmp	x8, #0x1c
 14c:	b.ne	138 <inflate_table+0x138>  // b.any
 150:	cbz	w2, 184 <inflate_table+0x184>
 154:	mov	x8, xzr
 158:	mov	w12, w2
 15c:	mov	x13, sp
 160:	ldrh	w14, [x1, x8, lsl #1]
 164:	cbz	x14, 178 <inflate_table+0x178>
 168:	ldrh	w15, [x13, x14, lsl #1]
 16c:	add	w16, w15, #0x1
 170:	strh	w16, [x13, x14, lsl #1]
 174:	strh	w8, [x5, x15, lsl #1]
 178:	add	x8, x8, #0x1
 17c:	cmp	x12, x8
 180:	b.ne	160 <inflate_table+0x160>  // b.any
 184:	cbz	w0, 1e0 <inflate_table+0x1e0>
 188:	cmp	w0, #0x1
 18c:	b.ne	1f8 <inflate_table+0x1f8>  // b.any
 190:	cmp	w11, #0x9
 194:	mov	w8, #0x1                   	// #1
 198:	b.hi	1c0 <inflate_table+0x1c0>  // b.pmore
 19c:	adrp	x14, 0 <inflate_table>
 1a0:	adrp	x15, 0 <inflate_table>
 1a4:	mov	w13, wzr
 1a8:	mov	w12, #0x101                 	// #257
 1ac:	add	x14, x14, #0x0
 1b0:	add	x15, x15, #0x0
 1b4:	mov	w16, #0x1                   	// #1
 1b8:	b	230 <inflate_table+0x230>
 1bc:	mov	w8, #0xffffffff            	// #-1
 1c0:	ldp	x20, x19, [sp, #128]
 1c4:	ldp	x22, x21, [sp, #112]
 1c8:	ldp	x24, x23, [sp, #96]
 1cc:	ldp	x26, x25, [sp, #80]
 1d0:	ldp	x28, x27, [sp, #64]
 1d4:	mov	w0, w8
 1d8:	add	sp, sp, #0x90
 1dc:	ret
 1e0:	mov	w13, wzr
 1e4:	mov	w16, wzr
 1e8:	mov	w12, #0x14                  	// #20
 1ec:	mov	x15, x5
 1f0:	mov	x14, x5
 1f4:	b	230 <inflate_table+0x230>
 1f8:	cmp	w0, #0x2
 1fc:	adrp	x14, 0 <inflate_table>
 200:	adrp	x15, 0 <inflate_table>
 204:	mov	w12, wzr
 208:	add	x14, x14, #0x0
 20c:	cset	w13, eq  // eq = none
 210:	add	x15, x15, #0x0
 214:	b.ne	22c <inflate_table+0x22c>  // b.any
 218:	cmp	w11, #0x9
 21c:	mov	w16, w12
 220:	b.ls	230 <inflate_table+0x230>  // b.plast
 224:	mov	w8, #0x1                   	// #1
 228:	b	1c0 <inflate_table+0x1c0>
 22c:	mov	w16, w12
 230:	ldr	x6, [x3]
 234:	mov	w7, #0x1                   	// #1
 238:	lsl	w18, w7, w11
 23c:	mov	w0, wzr
 240:	mov	w2, wzr
 244:	mov	w17, wzr
 248:	sub	w19, w18, #0x1
 24c:	mov	w8, #0xffffffff            	// #-1
 250:	add	x20, sp, #0x20
 254:	mov	w22, w11
 258:	lsl	w21, w7, w22
 25c:	ldrh	w23, [x5, w0, uxtw #1]
 260:	add	w22, w23, #0x1
 264:	cmp	w22, w12
 268:	sub	w22, w10, w2
 26c:	b.cs	278 <inflate_table+0x278>  // b.hs, b.nlast
 270:	mov	w24, wzr
 274:	b	29c <inflate_table+0x29c>
 278:	cmp	w12, w23
 27c:	b.ls	28c <inflate_table+0x28c>  // b.plast
 280:	mov	w23, wzr
 284:	mov	w24, #0x60                  	// #96
 288:	b	29c <inflate_table+0x29c>
 28c:	sub	w23, w23, w12
 290:	lsl	x24, x23, #1
 294:	ldrb	w24, [x14, x24]
 298:	ldrh	w23, [x15, w23, uxtw #1]
 29c:	lsl	w25, w7, w22
 2a0:	lsr	w26, w17, w2
 2a4:	sub	w26, w26, w25
 2a8:	mov	w27, w21
 2ac:	add	w28, w26, w27
 2b0:	subs	w27, w27, w25
 2b4:	add	x28, x6, w28, uxtw #2
 2b8:	strb	w24, [x28]
 2bc:	strb	w22, [x28, #1]
 2c0:	strh	w23, [x28, #2]
 2c4:	b.ne	2ac <inflate_table+0x2ac>  // b.any
 2c8:	sub	w23, w10, #0x1
 2cc:	lsl	w24, w7, w23
 2d0:	mov	w23, w24
 2d4:	tst	w24, w17
 2d8:	lsr	w24, w24, #1
 2dc:	b.ne	2d0 <inflate_table+0x2d0>  // b.any
 2e0:	ldrh	w25, [x20, w10, uxtw #1]
 2e4:	sub	w24, w23, #0x1
 2e8:	and	w17, w24, w17
 2ec:	cmp	w23, #0x0
 2f0:	add	w17, w17, w23
 2f4:	sub	w23, w25, #0x1
 2f8:	csel	w17, wzr, w17, eq  // eq = none
 2fc:	add	w0, w0, #0x1
 300:	tst	w23, #0xffff
 304:	strh	w23, [x20, w10, uxtw #1]
 308:	b.ne	31c <inflate_table+0x31c>  // b.any
 30c:	cmp	w10, w9
 310:	b.eq	3cc <inflate_table+0x3cc>  // b.none
 314:	ldrh	w10, [x5, w0, uxtw #1]
 318:	ldrh	w10, [x1, x10, lsl #1]
 31c:	cmp	w10, w11
 320:	b.ls	25c <inflate_table+0x25c>  // b.plast
 324:	and	w23, w17, w19
 328:	cmp	w23, w8
 32c:	b.eq	25c <inflate_table+0x25c>  // b.none
 330:	cmp	w2, #0x0
 334:	csel	w2, w11, w2, eq  // eq = none
 338:	sub	w22, w10, w2
 33c:	cmp	w10, w9
 340:	lsl	w8, w7, w22
 344:	b.cs	37c <inflate_table+0x37c>  // b.hs, b.nlast
 348:	sub	w22, w9, w2
 34c:	mov	w24, w10
 350:	ldrh	w25, [x20, x24, lsl #1]
 354:	sub	w8, w8, w25
 358:	cmp	w8, #0x1
 35c:	b.lt	374 <inflate_table+0x374>  // b.tstop
 360:	add	x24, x24, #0x1
 364:	cmp	w24, w9
 368:	lsl	w8, w8, #1
 36c:	b.cc	350 <inflate_table+0x350>  // b.lo, b.ul, b.last
 370:	b	378 <inflate_table+0x378>
 374:	sub	w22, w24, w2
 378:	lsl	w8, w7, w22
 37c:	add	w18, w8, w18
 380:	cmp	w18, #0x354
 384:	cset	w8, hi  // hi = pmore
 388:	cmp	w18, #0x250
 38c:	and	w25, w16, w8
 390:	cset	w24, hi  // hi = pmore
 394:	mov	w8, #0x1                   	// #1
 398:	tbnz	w25, #0, 1c0 <inflate_table+0x1c0>
 39c:	and	w24, w13, w24
 3a0:	tbnz	w24, #0, 1c0 <inflate_table+0x1c0>
 3a4:	ldr	x8, [x3]
 3a8:	add	x6, x6, w21, uxtw #2
 3ac:	add	x21, x8, w23, uxtw #2
 3b0:	sub	w8, w6, w8
 3b4:	lsr	w8, w8, #2
 3b8:	strb	w22, [x21]
 3bc:	strb	w11, [x21, #1]
 3c0:	strh	w8, [x21, #2]
 3c4:	mov	w8, w23
 3c8:	b	258 <inflate_table+0x258>
 3cc:	cbz	w17, 3e4 <inflate_table+0x3e4>
 3d0:	add	x8, x6, w17, uxtw #2
 3d4:	mov	w9, #0x40                  	// #64
 3d8:	strb	w9, [x8]
 3dc:	strb	w22, [x8, #1]
 3e0:	strh	wzr, [x8, #2]
 3e4:	ldr	x9, [x3]
 3e8:	mov	w8, wzr
 3ec:	add	x9, x9, w18, uxtw #2
 3f0:	str	x9, [x3]
 3f4:	b	90 <inflate_table+0x90>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_tr_init>:
       0:	add	x8, x0, #0xd4
       4:	str	x8, [x0, #2904]
       8:	adrp	x8, 0 <_tr_init>
       c:	add	x8, x8, #0x0
      10:	str	x8, [x0, #2920]
      14:	add	x8, x0, #0x9c8
      18:	str	x8, [x0, #2928]
      1c:	adrp	x8, 0 <_tr_init>
      20:	add	x8, x8, #0x0
      24:	str	x8, [x0, #2944]
      28:	add	x8, x0, #0xabc
      2c:	str	x8, [x0, #2952]
      30:	adrp	x8, 0 <_tr_init>
      34:	add	x8, x8, #0x0
      38:	strh	wzr, [x0, #5936]
      3c:	str	x8, [x0, #2968]
      40:	str	wzr, [x0, #5940]
      44:	b	48 <init_block>

0000000000000048 <init_block>:
      48:	mov	w8, #0xd4                  	// #212
      4c:	strh	wzr, [x0, x8]
      50:	add	x8, x8, #0x4
      54:	cmp	x8, #0x54c
      58:	b.ne	4c <init_block+0x4>  // b.any
      5c:	mov	x8, xzr
      60:	add	x9, x0, #0x9c8
      64:	strh	wzr, [x9, x8]
      68:	add	x8, x8, #0x4
      6c:	cmp	x8, #0x78
      70:	b.ne	64 <init_block+0x1c>  // b.any
      74:	mov	x8, xzr
      78:	add	x9, x0, #0xabc
      7c:	strh	wzr, [x9, x8]
      80:	add	x8, x8, #0x4
      84:	cmp	x8, #0x4c
      88:	b.ne	7c <init_block+0x34>  // b.any
      8c:	mov	w8, #0x1                   	// #1
      90:	movi	v0.2d, #0x0
      94:	mov	w9, #0x1718                	// #5912
      98:	str	wzr, [x0, #5900]
      9c:	strh	w8, [x0, #1236]
      a0:	str	q0, [x0, x9]
      a4:	str	wzr, [x0, #5928]
      a8:	ret

00000000000000ac <_tr_stored_block>:
      ac:	stp	x29, x30, [sp, #-48]!
      b0:	stp	x20, x19, [sp, #32]
      b4:	ldr	w10, [x0, #5940]
      b8:	ldrh	w9, [x0, #5936]
      bc:	and	w8, w3, #0xffff
      c0:	str	x21, [sp, #16]
      c4:	lsl	w11, w8, w10
      c8:	mov	x19, x2
      cc:	mov	x21, x1
      d0:	mov	x20, x0
      d4:	orr	w9, w9, w11
      d8:	cmp	w10, #0xe
      dc:	mov	x29, sp
      e0:	strh	w9, [x0, #5936]
      e4:	b.lt	138 <_tr_stored_block+0x8c>  // b.tstop
      e8:	ldr	x10, [x20, #40]
      ec:	ldr	x11, [x20, #16]
      f0:	add	x12, x10, #0x1
      f4:	str	x12, [x20, #40]
      f8:	mov	w12, #0x1730                	// #5936
      fc:	strb	w9, [x11, x10]
     100:	add	x12, x20, x12
     104:	ldr	x9, [x20, #40]
     108:	ldrb	w10, [x12, #1]
     10c:	ldr	x11, [x20, #16]
     110:	add	x12, x9, #0x1
     114:	str	x12, [x20, #40]
     118:	strb	w10, [x11, x9]
     11c:	ldr	w9, [x20, #5940]
     120:	mov	w10, #0x10                  	// #16
     124:	sub	w10, w10, w9
     128:	lsr	w8, w8, w10
     12c:	strh	w8, [x20, #5936]
     130:	sub	w8, w9, #0xd
     134:	b	13c <_tr_stored_block+0x90>
     138:	add	w8, w10, #0x3
     13c:	mov	x0, x20
     140:	str	w8, [x20, #5940]
     144:	bl	1d8 <bi_windup>
     148:	ldr	x8, [x20, #40]
     14c:	ldr	x9, [x20, #16]
     150:	mov	x1, x21
     154:	mov	x2, x19
     158:	add	x10, x8, #0x1
     15c:	str	x10, [x20, #40]
     160:	strb	w19, [x9, x8]
     164:	ldr	x8, [x20, #40]
     168:	ldr	x9, [x20, #16]
     16c:	ubfx	x10, x19, #8, #24
     170:	add	x11, x8, #0x1
     174:	str	x11, [x20, #40]
     178:	strb	w10, [x9, x8]
     17c:	ldr	x8, [x20, #40]
     180:	ldr	x9, [x20, #16]
     184:	mvn	w10, w19
     188:	add	x11, x8, #0x1
     18c:	str	x11, [x20, #40]
     190:	strb	w10, [x9, x8]
     194:	ldr	x8, [x20, #40]
     198:	ldr	x9, [x20, #16]
     19c:	lsr	w10, w10, #8
     1a0:	add	x11, x8, #0x1
     1a4:	str	x11, [x20, #40]
     1a8:	strb	w10, [x9, x8]
     1ac:	ldr	x8, [x20, #16]
     1b0:	ldr	x9, [x20, #40]
     1b4:	add	x0, x8, x9
     1b8:	bl	0 <memcpy>
     1bc:	ldr	x8, [x20, #40]
     1c0:	ldr	x21, [sp, #16]
     1c4:	add	x8, x8, x19
     1c8:	str	x8, [x20, #40]
     1cc:	ldp	x20, x19, [sp, #32]
     1d0:	ldp	x29, x30, [sp], #48
     1d4:	ret

00000000000001d8 <bi_windup>:
     1d8:	ldr	w8, [x0, #5940]
     1dc:	cmp	w8, #0x9
     1e0:	b.lt	214 <bi_windup+0x3c>  // b.tstop
     1e4:	mov	w8, #0x1730                	// #5936
     1e8:	ldr	x10, [x0, #40]
     1ec:	add	x8, x0, x8
     1f0:	ldr	x9, [x0, #16]
     1f4:	ldrb	w11, [x8]
     1f8:	add	x12, x10, #0x1
     1fc:	str	x12, [x0, #40]
     200:	strb	w11, [x9, x10]
     204:	ldr	x9, [x0, #40]
     208:	ldr	x10, [x0, #16]
     20c:	ldrb	w8, [x8, #1]
     210:	b	22c <bi_windup+0x54>
     214:	cmp	w8, #0x1
     218:	b.lt	23c <bi_windup+0x64>  // b.tstop
     21c:	mov	w8, #0x1730                	// #5936
     220:	ldr	x9, [x0, #40]
     224:	ldr	x10, [x0, #16]
     228:	ldrb	w8, [x0, x8]
     22c:	add	x11, x9, #0x1
     230:	add	x9, x10, x9
     234:	str	x11, [x0, #40]
     238:	strb	w8, [x9]
     23c:	strh	wzr, [x0, #5936]
     240:	str	wzr, [x0, #5940]
     244:	ret

0000000000000248 <_tr_flush_bits>:
     248:	b	24c <bi_flush>

000000000000024c <bi_flush>:
     24c:	ldr	w8, [x0, #5940]
     250:	cmp	w8, #0x10
     254:	b.ne	29c <bi_flush+0x50>  // b.any
     258:	mov	w9, #0x1730                	// #5936
     25c:	ldr	x11, [x0, #40]
     260:	add	x9, x0, x9
     264:	ldr	x10, [x0, #16]
     268:	ldrb	w12, [x9]
     26c:	add	x13, x11, #0x1
     270:	str	x13, [x0, #40]
     274:	mov	w8, wzr
     278:	strb	w12, [x10, x11]
     27c:	ldr	x10, [x0, #40]
     280:	ldrb	w9, [x9, #1]
     284:	ldr	x11, [x0, #16]
     288:	add	x12, x10, #0x1
     28c:	str	x12, [x0, #40]
     290:	strb	w9, [x11, x10]
     294:	strh	wzr, [x0, #5936]
     298:	b	2d4 <bi_flush+0x88>
     29c:	cmp	w8, #0x8
     2a0:	b.lt	2d8 <bi_flush+0x8c>  // b.tstop
     2a4:	mov	w8, #0x1730                	// #5936
     2a8:	ldr	x10, [x0, #40]
     2ac:	add	x8, x0, x8
     2b0:	ldr	x9, [x0, #16]
     2b4:	ldrb	w11, [x8]
     2b8:	add	x12, x10, #0x1
     2bc:	str	x12, [x0, #40]
     2c0:	strb	w11, [x9, x10]
     2c4:	ldrb	w8, [x8, #1]
     2c8:	ldr	w9, [x0, #5940]
     2cc:	strh	w8, [x0, #5936]
     2d0:	sub	w8, w9, #0x8
     2d4:	str	w8, [x0, #5940]
     2d8:	ret

00000000000002dc <_tr_align>:
     2dc:	ldr	w10, [x0, #5940]
     2e0:	ldrh	w8, [x0, #5936]
     2e4:	mov	w9, #0x2                   	// #2
     2e8:	lsl	w11, w9, w10
     2ec:	orr	w8, w8, w11
     2f0:	cmp	w10, #0xe
     2f4:	strh	w8, [x0, #5936]
     2f8:	b.lt	34c <_tr_align+0x70>  // b.tstop
     2fc:	ldr	x10, [x0, #40]
     300:	ldr	x11, [x0, #16]
     304:	add	x12, x10, #0x1
     308:	str	x12, [x0, #40]
     30c:	mov	w12, #0x1730                	// #5936
     310:	strb	w8, [x11, x10]
     314:	add	x12, x0, x12
     318:	ldr	x8, [x0, #40]
     31c:	ldrb	w10, [x12, #1]
     320:	ldr	x11, [x0, #16]
     324:	add	x12, x8, #0x1
     328:	str	x12, [x0, #40]
     32c:	strb	w10, [x11, x8]
     330:	ldr	w10, [x0, #5940]
     334:	mov	w8, #0x10                  	// #16
     338:	sub	w8, w8, w10
     33c:	lsr	w8, w9, w8
     340:	strh	w8, [x0, #5936]
     344:	sub	w9, w10, #0xd
     348:	b	350 <_tr_align+0x74>
     34c:	add	w9, w10, #0x3
     350:	cmp	w9, #0xa
     354:	str	w9, [x0, #5940]
     358:	b.lt	3a0 <_tr_align+0xc4>  // b.tstop
     35c:	ldr	x9, [x0, #40]
     360:	ldr	x10, [x0, #16]
     364:	add	x11, x9, #0x1
     368:	str	x11, [x0, #40]
     36c:	mov	w11, #0x1730                	// #5936
     370:	strb	w8, [x10, x9]
     374:	add	x11, x0, x11
     378:	ldr	x8, [x0, #40]
     37c:	ldrb	w9, [x11, #1]
     380:	ldr	x10, [x0, #16]
     384:	add	x11, x8, #0x1
     388:	str	x11, [x0, #40]
     38c:	strb	w9, [x10, x8]
     390:	ldr	w8, [x0, #5940]
     394:	strh	wzr, [x0, #5936]
     398:	sub	w8, w8, #0x9
     39c:	b	3a4 <_tr_align+0xc8>
     3a0:	add	w8, w9, #0x7
     3a4:	str	w8, [x0, #5940]
     3a8:	b	24c <bi_flush>

00000000000003ac <_tr_flush_block>:
     3ac:	stp	x29, x30, [sp, #-64]!
     3b0:	stp	x22, x21, [sp, #32]
     3b4:	stp	x20, x19, [sp, #48]
     3b8:	ldr	w8, [x0, #196]
     3bc:	mov	w20, w3
     3c0:	mov	x21, x2
     3c4:	mov	x19, x0
     3c8:	cmp	w8, #0x1
     3cc:	mov	x22, x1
     3d0:	str	x23, [sp, #16]
     3d4:	mov	x29, sp
     3d8:	b.lt	438 <_tr_flush_block+0x8c>  // b.tstop
     3dc:	ldr	x8, [x19]
     3e0:	ldr	w9, [x8, #88]
     3e4:	cmp	w9, #0x2
     3e8:	b.ne	454 <_tr_flush_block+0xa8>  // b.any
     3ec:	mov	w11, #0xc07f                	// #49279
     3f0:	mov	x9, xzr
     3f4:	add	x10, x19, #0xd4
     3f8:	movk	w11, #0xf3ff, lsl #16
     3fc:	tbz	w11, #0, 408 <_tr_flush_block+0x5c>
     400:	ldrh	w12, [x10, x9]
     404:	cbnz	w12, 44c <_tr_flush_block+0xa0>
     408:	add	x9, x9, #0x4
     40c:	cmp	x9, #0x80
     410:	lsr	x11, x11, #1
     414:	b.ne	3fc <_tr_flush_block+0x50>  // b.any
     418:	ldrh	w9, [x19, #248]
     41c:	cbnz	w9, 430 <_tr_flush_block+0x84>
     420:	ldrh	w9, [x19, #252]
     424:	cbnz	w9, 430 <_tr_flush_block+0x84>
     428:	ldrh	w9, [x19, #264]
     42c:	cbz	w9, 8ac <_tr_flush_block+0x500>
     430:	mov	w9, #0x1                   	// #1
     434:	b	450 <_tr_flush_block+0xa4>
     438:	add	x9, x21, #0x5
     43c:	mov	w8, wzr
     440:	mov	x11, x9
     444:	cbnz	x22, 4fc <_tr_flush_block+0x150>
     448:	b	520 <_tr_flush_block+0x174>
     44c:	mov	w9, wzr
     450:	str	w9, [x8, #88]
     454:	add	x1, x19, #0xb58
     458:	mov	x0, x19
     45c:	bl	8cc <build_tree>
     460:	add	x1, x19, #0xb70
     464:	mov	x0, x19
     468:	bl	8cc <build_tree>
     46c:	ldr	w2, [x19, #2912]
     470:	add	x1, x19, #0xd4
     474:	mov	x0, x19
     478:	bl	12c8 <scan_tree>
     47c:	ldr	w2, [x19, #2936]
     480:	add	x1, x19, #0x9c8
     484:	mov	x0, x19
     488:	bl	12c8 <scan_tree>
     48c:	add	x1, x19, #0xb88
     490:	mov	x0, x19
     494:	bl	8cc <build_tree>
     498:	adrp	x9, 0 <_tr_init>
     49c:	mov	w8, #0x12                  	// #18
     4a0:	add	x9, x9, #0x0
     4a4:	ldrb	w10, [x9, w8, uxtw]
     4a8:	add	x10, x19, x10, lsl #2
     4ac:	ldrh	w10, [x10, #2750]
     4b0:	cbnz	w10, 4c4 <_tr_flush_block+0x118>
     4b4:	cmp	w8, #0x3
     4b8:	sub	w8, w8, #0x1
     4bc:	b.hi	4a4 <_tr_flush_block+0xf8>  // b.pmore
     4c0:	mov	w8, #0x2                   	// #2
     4c4:	ldr	x9, [x19, #5912]
     4c8:	ldr	x10, [x19, #5920]
     4cc:	sbfiz	x11, x8, #1, #32
     4d0:	add	x11, x11, w8, sxtw
     4d4:	add	x9, x9, x11
     4d8:	add	x10, x10, #0xa
     4dc:	add	x11, x9, #0x11
     4e0:	add	x12, x9, #0x1b
     4e4:	lsr	x9, x10, #3
     4e8:	lsr	x10, x12, #3
     4ec:	cmp	x9, x12, lsr #3
     4f0:	str	x11, [x19, #5912]
     4f4:	csel	x11, x10, x9, hi  // hi = pmore
     4f8:	cbz	x22, 520 <_tr_flush_block+0x174>
     4fc:	add	x10, x21, #0x4
     500:	cmp	x10, x11
     504:	b.hi	520 <_tr_flush_block+0x174>  // b.pmore
     508:	mov	x0, x19
     50c:	mov	x1, x22
     510:	mov	x2, x21
     514:	mov	w3, w20
     518:	bl	ac <_tr_stored_block>
     51c:	b	874 <_tr_flush_block+0x4c8>
     520:	ldr	w10, [x19, #5940]
     524:	cmp	x9, x11
     528:	b.eq	5a8 <_tr_flush_block+0x1fc>  // b.none
     52c:	ldr	w9, [x19, #200]
     530:	cmp	w9, #0x4
     534:	b.eq	5a8 <_tr_flush_block+0x1fc>  // b.none
     538:	ldrh	w9, [x19, #5936]
     53c:	add	w11, w20, #0x4
     540:	and	w11, w11, #0xffff
     544:	lsl	w12, w11, w10
     548:	orr	w9, w9, w12
     54c:	cmp	w10, #0xe
     550:	strh	w9, [x19, #5936]
     554:	b.lt	618 <_tr_flush_block+0x26c>  // b.tstop
     558:	ldr	x10, [x19, #40]
     55c:	ldr	x12, [x19, #16]
     560:	add	x13, x10, #0x1
     564:	str	x13, [x19, #40]
     568:	mov	w13, #0x1730                	// #5936
     56c:	strb	w9, [x12, x10]
     570:	add	x13, x19, x13
     574:	ldr	x9, [x19, #40]
     578:	ldrb	w10, [x13, #1]
     57c:	ldr	x12, [x19, #16]
     580:	add	x13, x9, #0x1
     584:	str	x13, [x19, #40]
     588:	strb	w10, [x12, x9]
     58c:	ldr	w10, [x19, #5940]
     590:	mov	w9, #0x10                  	// #16
     594:	sub	w9, w9, w10
     598:	lsr	w9, w11, w9
     59c:	strh	w9, [x19, #5936]
     5a0:	sub	w11, w10, #0xd
     5a4:	b	61c <_tr_flush_block+0x270>
     5a8:	ldrh	w9, [x19, #5936]
     5ac:	add	w8, w20, #0x2
     5b0:	and	w8, w8, #0xffff
     5b4:	lsl	w11, w8, w10
     5b8:	orr	w9, w9, w11
     5bc:	cmp	w10, #0xe
     5c0:	strh	w9, [x19, #5936]
     5c4:	b.lt	698 <_tr_flush_block+0x2ec>  // b.tstop
     5c8:	ldr	x10, [x19, #40]
     5cc:	ldr	x11, [x19, #16]
     5d0:	add	x12, x10, #0x1
     5d4:	str	x12, [x19, #40]
     5d8:	mov	w12, #0x1730                	// #5936
     5dc:	strb	w9, [x11, x10]
     5e0:	add	x12, x19, x12
     5e4:	ldr	x9, [x19, #40]
     5e8:	ldrb	w10, [x12, #1]
     5ec:	ldr	x11, [x19, #16]
     5f0:	add	x12, x9, #0x1
     5f4:	str	x12, [x19, #40]
     5f8:	strb	w10, [x11, x9]
     5fc:	ldr	w9, [x19, #5940]
     600:	mov	w10, #0x10                  	// #16
     604:	sub	w10, w10, w9
     608:	lsr	w8, w8, w10
     60c:	strh	w8, [x19, #5936]
     610:	sub	w8, w9, #0xd
     614:	b	69c <_tr_flush_block+0x2f0>
     618:	add	w11, w10, #0x3
     61c:	ldr	w2, [x19, #2912]
     620:	mov	w10, #0xff00                	// #65280
     624:	ldr	w21, [x19, #2936]
     628:	cmp	w11, #0xc
     62c:	add	w10, w2, w10
     630:	and	w10, w10, #0xffff
     634:	lsl	w12, w10, w11
     638:	orr	w9, w9, w12
     63c:	str	w11, [x19, #5940]
     640:	strh	w9, [x19, #5936]
     644:	b.lt	6b8 <_tr_flush_block+0x30c>  // b.tstop
     648:	ldr	x11, [x19, #40]
     64c:	ldr	x12, [x19, #16]
     650:	add	x13, x11, #0x1
     654:	str	x13, [x19, #40]
     658:	mov	w13, #0x1730                	// #5936
     65c:	strb	w9, [x12, x11]
     660:	add	x13, x19, x13
     664:	ldr	x9, [x19, #40]
     668:	ldrb	w11, [x13, #1]
     66c:	ldr	x12, [x19, #16]
     670:	add	x13, x9, #0x1
     674:	str	x13, [x19, #40]
     678:	strb	w11, [x12, x9]
     67c:	ldr	w11, [x19, #5940]
     680:	mov	w9, #0x10                  	// #16
     684:	sub	w9, w9, w11
     688:	lsr	w9, w10, w9
     68c:	strh	w9, [x19, #5936]
     690:	sub	w11, w11, #0xb
     694:	b	6bc <_tr_flush_block+0x310>
     698:	add	w8, w10, #0x3
     69c:	adrp	x1, 0 <_tr_init>
     6a0:	adrp	x2, 0 <_tr_init>
     6a4:	str	w8, [x19, #5940]
     6a8:	add	x1, x1, #0x0
     6ac:	add	x2, x2, #0x0
     6b0:	mov	x0, x19
     6b4:	b	870 <_tr_flush_block+0x4c4>
     6b8:	add	w11, w11, #0x5
     6bc:	and	w10, w21, #0xffff
     6c0:	lsl	w12, w10, w11
     6c4:	orr	w9, w9, w12
     6c8:	cmp	w11, #0xc
     6cc:	str	w11, [x19, #5940]
     6d0:	strh	w9, [x19, #5936]
     6d4:	b.lt	728 <_tr_flush_block+0x37c>  // b.tstop
     6d8:	ldr	x11, [x19, #40]
     6dc:	ldr	x12, [x19, #16]
     6e0:	add	x13, x11, #0x1
     6e4:	str	x13, [x19, #40]
     6e8:	mov	w13, #0x1730                	// #5936
     6ec:	strb	w9, [x12, x11]
     6f0:	add	x13, x19, x13
     6f4:	ldr	x9, [x19, #40]
     6f8:	ldrb	w11, [x13, #1]
     6fc:	ldr	x12, [x19, #16]
     700:	add	x13, x9, #0x1
     704:	str	x13, [x19, #40]
     708:	strb	w11, [x12, x9]
     70c:	ldr	w11, [x19, #5940]
     710:	mov	w9, #0x10                  	// #16
     714:	sub	w9, w9, w11
     718:	lsr	w9, w10, w9
     71c:	strh	w9, [x19, #5936]
     720:	sub	w11, w11, #0xb
     724:	b	72c <_tr_flush_block+0x380>
     728:	add	w11, w11, #0x5
     72c:	mov	w10, #0xfffd                	// #65533
     730:	add	w10, w8, w10
     734:	and	w10, w10, #0xffff
     738:	lsl	w12, w10, w11
     73c:	orr	w9, w9, w12
     740:	cmp	w11, #0xd
     744:	str	w11, [x19, #5940]
     748:	strh	w9, [x19, #5936]
     74c:	b.lt	7a0 <_tr_flush_block+0x3f4>  // b.tstop
     750:	ldr	x11, [x19, #40]
     754:	ldr	x12, [x19, #16]
     758:	add	x13, x11, #0x1
     75c:	str	x13, [x19, #40]
     760:	mov	w13, #0x1730                	// #5936
     764:	strb	w9, [x12, x11]
     768:	add	x13, x19, x13
     76c:	ldr	x9, [x19, #40]
     770:	ldrb	w11, [x13, #1]
     774:	ldr	x12, [x19, #16]
     778:	add	x13, x9, #0x1
     77c:	str	x13, [x19, #40]
     780:	strb	w11, [x12, x9]
     784:	ldr	w11, [x19, #5940]
     788:	mov	w9, #0x10                  	// #16
     78c:	sub	w9, w9, w11
     790:	lsr	w9, w10, w9
     794:	strh	w9, [x19, #5936]
     798:	sub	w10, w11, #0xc
     79c:	b	7a4 <_tr_flush_block+0x3f8>
     7a0:	add	w10, w11, #0x4
     7a4:	str	w10, [x19, #5940]
     7a8:	tbnz	w8, #31, 840 <_tr_flush_block+0x494>
     7ac:	add	w11, w8, #0x1
     7b0:	adrp	x8, 0 <_tr_init>
     7b4:	mov	w12, #0x1730                	// #5936
     7b8:	add	x8, x8, #0x0
     7bc:	mov	w11, w11
     7c0:	add	x12, x19, x12
     7c4:	mov	w13, #0x10                  	// #16
     7c8:	ldrb	w14, [x8]
     7cc:	cmp	w10, #0xe
     7d0:	add	x14, x19, x14, lsl #2
     7d4:	ldrh	w14, [x14, #2750]
     7d8:	lsl	w15, w14, w10
     7dc:	orr	w9, w9, w15
     7e0:	strh	w9, [x19, #5936]
     7e4:	b.lt	82c <_tr_flush_block+0x480>  // b.tstop
     7e8:	ldr	x10, [x19, #40]
     7ec:	ldr	x15, [x19, #16]
     7f0:	add	x16, x10, #0x1
     7f4:	str	x16, [x19, #40]
     7f8:	strb	w9, [x15, x10]
     7fc:	ldr	x9, [x19, #40]
     800:	ldrb	w10, [x12, #1]
     804:	ldr	x15, [x19, #16]
     808:	add	x16, x9, #0x1
     80c:	str	x16, [x19, #40]
     810:	strb	w10, [x15, x9]
     814:	ldr	w10, [x19, #5940]
     818:	sub	w9, w13, w10
     81c:	lsr	w9, w14, w9
     820:	strh	w9, [x19, #5936]
     824:	sub	w10, w10, #0xd
     828:	b	830 <_tr_flush_block+0x484>
     82c:	add	w10, w10, #0x3
     830:	subs	x11, x11, #0x1
     834:	add	x8, x8, #0x1
     838:	str	w10, [x19, #5940]
     83c:	b.ne	7c8 <_tr_flush_block+0x41c>  // b.any
     840:	add	x22, x19, #0xd4
     844:	mov	x0, x19
     848:	mov	x1, x22
     84c:	bl	13dc <send_tree>
     850:	add	x23, x19, #0x9c8
     854:	mov	x0, x19
     858:	mov	x1, x23
     85c:	mov	w2, w21
     860:	bl	13dc <send_tree>
     864:	mov	x0, x19
     868:	mov	x1, x22
     86c:	mov	x2, x23
     870:	bl	d64 <compress_block>
     874:	mov	x0, x19
     878:	bl	48 <init_block>
     87c:	cbz	w20, 898 <_tr_flush_block+0x4ec>
     880:	mov	x0, x19
     884:	ldp	x20, x19, [sp, #48]
     888:	ldp	x22, x21, [sp, #32]
     88c:	ldr	x23, [sp, #16]
     890:	ldp	x29, x30, [sp], #64
     894:	b	1d8 <bi_windup>
     898:	ldp	x20, x19, [sp, #48]
     89c:	ldp	x22, x21, [sp, #32]
     8a0:	ldr	x23, [sp, #16]
     8a4:	ldp	x29, x30, [sp], #64
     8a8:	ret
     8ac:	mov	x10, xzr
     8b0:	add	x11, x19, #0x154
     8b4:	ldrh	w9, [x11, x10]
     8b8:	cbnz	w9, 430 <_tr_flush_block+0x84>
     8bc:	add	x10, x10, #0x4
     8c0:	cmp	x10, #0x380
     8c4:	b.ne	8b4 <_tr_flush_block+0x508>  // b.any
     8c8:	b	450 <_tr_flush_block+0xa4>

00000000000008cc <build_tree>:
     8cc:	sub	sp, sp, #0x80
     8d0:	stp	x29, x30, [sp, #32]
     8d4:	stp	x28, x27, [sp, #48]
     8d8:	stp	x26, x25, [sp, #64]
     8dc:	stp	x24, x23, [sp, #80]
     8e0:	stp	x22, x21, [sp, #96]
     8e4:	stp	x20, x19, [sp, #112]
     8e8:	ldr	x9, [x1, #16]
     8ec:	ldr	x19, [x1]
     8f0:	mov	x21, x1
     8f4:	mov	x20, x0
     8f8:	ldr	x8, [x9]
     8fc:	ldr	w24, [x9, #20]
     900:	adrp	x9, 0 <_tr_init>
     904:	ldr	d0, [x9]
     908:	mov	w9, #0x14b4                	// #5300
     90c:	add	x25, x0, x9
     910:	cmp	w24, #0x1
     914:	add	x29, sp, #0x20
     918:	str	d0, [x25]
     91c:	b.lt	980 <build_tree+0xb4>  // b.tstop
     920:	mov	w11, #0x14bc                	// #5308
     924:	mov	x9, xzr
     928:	add	x10, x19, #0x2
     92c:	add	x11, x20, x11
     930:	mov	w23, #0xffffffff            	// #-1
     934:	ldurh	w12, [x10, #-2]
     938:	cbz	w12, 95c <build_tree+0x90>
     93c:	ldrsw	x12, [x20, #5300]
     940:	mov	w23, w9
     944:	add	x12, x12, #0x1
     948:	str	w12, [x20, #5300]
     94c:	add	x12, x20, x12, lsl #2
     950:	str	w9, [x12, #3008]
     954:	strb	wzr, [x11, x9]
     958:	b	960 <build_tree+0x94>
     95c:	strh	wzr, [x10]
     960:	add	x9, x9, #0x1
     964:	cmp	x24, x9
     968:	add	x10, x10, #0x4
     96c:	b.ne	934 <build_tree+0x68>  // b.any
     970:	ldr	w9, [x25]
     974:	cmp	w9, #0x1
     978:	b.le	988 <build_tree+0xbc>
     97c:	b	9fc <build_tree+0x130>
     980:	mov	w9, wzr
     984:	mov	w23, #0xffffffff            	// #-1
     988:	mov	w10, #0x1                   	// #1
     98c:	mov	w11, #0x14bc                	// #5308
     990:	mov	w12, w23
     994:	cmp	w12, #0x2
     998:	sxtw	x13, w9
     99c:	csinc	w9, wzr, w12, ge  // ge = tcont
     9a0:	add	x13, x13, #0x1
     9a4:	str	w13, [x20, #5300]
     9a8:	add	x13, x20, x13, lsl #2
     9ac:	sbfiz	x14, x9, #2, #32
     9b0:	add	x15, x20, w9, sxtw
     9b4:	str	w9, [x13, #3008]
     9b8:	strh	w10, [x19, x14]
     9bc:	strb	wzr, [x15, x11]
     9c0:	ldr	x13, [x20, #5912]
     9c4:	cinc	w23, w12, lt  // lt = tstop
     9c8:	sub	x12, x13, #0x1
     9cc:	str	x12, [x20, #5912]
     9d0:	cbz	x8, 9ec <build_tree+0x120>
     9d4:	sxtw	x9, w9
     9d8:	add	x9, x8, x9, lsl #2
     9dc:	ldrh	w9, [x9, #2]
     9e0:	ldr	x12, [x20, #5920]
     9e4:	sub	x9, x12, x9
     9e8:	str	x9, [x20, #5920]
     9ec:	ldr	w9, [x25]
     9f0:	mov	w12, w23
     9f4:	cmp	w9, #0x2
     9f8:	b.lt	994 <build_tree+0xc8>  // b.tstop
     9fc:	lsr	w22, w9, #1
     a00:	str	w23, [x21, #8]
     a04:	cbz	w22, a24 <build_tree+0x158>
     a08:	mov	x0, x20
     a0c:	mov	x1, x19
     a10:	mov	w2, w22
     a14:	bl	11bc <pqdownheap>
     a18:	subs	w22, w22, #0x1
     a1c:	b.gt	a08 <build_tree+0x13c>
     a20:	ldr	w9, [x25]
     a24:	sxtw	x27, w24
     a28:	mov	w24, #0x14bc                	// #5308
     a2c:	lsl	x25, x27, #2
     a30:	add	x26, x20, x24
     a34:	sub	w8, w9, #0x1
     a38:	str	w8, [x20, #5300]
     a3c:	add	x22, x20, #0xbc0
     a40:	ldr	w8, [x22, w9, sxtw #2]
     a44:	ldrsw	x28, [x20, #3012]
     a48:	mov	w2, #0x1                   	// #1
     a4c:	mov	x0, x20
     a50:	mov	x1, x19
     a54:	str	w8, [x20, #3012]
     a58:	bl	11bc <pqdownheap>
     a5c:	ldrsw	x8, [x20, #5304]
     a60:	ldrsw	x9, [x20, #3012]
     a64:	add	x10, x19, x28, lsl #2
     a68:	mov	w2, #0x1                   	// #1
     a6c:	sub	x8, x8, #0x1
     a70:	str	w8, [x20, #5304]
     a74:	str	w28, [x22, x8, lsl #2]
     a78:	ldrsw	x8, [x20, #5304]
     a7c:	add	x11, x19, x9, lsl #2
     a80:	mov	x0, x20
     a84:	mov	x1, x19
     a88:	sub	x8, x8, #0x1
     a8c:	str	w8, [x20, #5304]
     a90:	str	w9, [x22, x8, lsl #2]
     a94:	ldrh	w8, [x10]
     a98:	ldrh	w12, [x11]
     a9c:	add	w8, w12, w8
     aa0:	add	x12, x20, x24
     aa4:	strh	w8, [x19, x25]
     aa8:	ldrb	w8, [x12, x28]
     aac:	ldrb	w9, [x12, x9]
     ab0:	add	x28, x27, #0x1
     ab4:	cmp	w8, w9
     ab8:	csel	w8, w9, w8, cc  // cc = lo, ul, last
     abc:	add	w8, w8, #0x1
     ac0:	strb	w8, [x26, x27]
     ac4:	strh	w27, [x11, #2]
     ac8:	strh	w27, [x10, #2]
     acc:	str	w27, [x20, #3012]
     ad0:	bl	11bc <pqdownheap>
     ad4:	ldr	w9, [x20, #5300]
     ad8:	add	x25, x25, #0x4
     adc:	mov	x27, x28
     ae0:	cmp	w9, #0x1
     ae4:	b.gt	a34 <build_tree+0x168>
     ae8:	ldrsw	x8, [x20, #5304]
     aec:	ldr	w9, [x20, #3012]
     af0:	movi	v0.2d, #0x0
     af4:	sub	x8, x8, #0x1
     af8:	str	w8, [x20, #5304]
     afc:	str	w9, [x22, x8, lsl #2]
     b00:	ldr	x10, [x21, #16]
     b04:	ldrsw	x11, [x20, #5304]
     b08:	ldr	x8, [x21]
     b0c:	ldr	w9, [x21, #8]
     b10:	ldp	x12, x13, [x10]
     b14:	ldr	w14, [x10, #16]
     b18:	ldrsw	x10, [x10, #24]
     b1c:	str	q0, [x20, #2992]
     b20:	str	q0, [x20, #2976]
     b24:	ldrsw	x11, [x22, x11, lsl #2]
     b28:	add	x11, x8, x11, lsl #2
     b2c:	strh	wzr, [x11, #2]
     b30:	ldrsw	x16, [x20, #5304]
     b34:	cmp	w16, #0x23b
     b38:	b.gt	cb4 <build_tree+0x3e8>
     b3c:	sub	w15, w16, #0x23c
     b40:	add	x16, x20, x16, lsl #2
     b44:	mov	w11, wzr
     b48:	add	x16, x16, #0xbc4
     b4c:	ldrsw	x17, [x16]
     b50:	add	x0, x8, x17, lsl #2
     b54:	ldrh	w18, [x0, #2]
     b58:	add	x18, x8, x18, lsl #2
     b5c:	ldrh	w18, [x18, #2]
     b60:	cmp	w10, w18
     b64:	csinc	w18, w10, w18, le
     b68:	cinc	w11, w11, le
     b6c:	cmp	w17, w9
     b70:	strh	w18, [x0, #2]
     b74:	b.gt	bd4 <build_tree+0x308>
     b78:	add	x0, x20, w18, sxtw #1
     b7c:	ldrh	w1, [x0, #2976]
     b80:	cmp	w17, w14
     b84:	add	w1, w1, #0x1
     b88:	strh	w1, [x0, #2976]
     b8c:	b.ge	b98 <build_tree+0x2cc>  // b.tcont
     b90:	mov	w0, wzr
     b94:	b	ba0 <build_tree+0x2d4>
     b98:	sub	w0, w17, w14
     b9c:	ldr	w0, [x13, w0, sxtw #2]
     ba0:	lsl	x1, x17, #2
     ba4:	ldrh	w1, [x8, x1]
     ba8:	ldr	x2, [x20, #5912]
     bac:	add	w18, w0, w18
     bb0:	madd	x18, x1, x18, x2
     bb4:	str	x18, [x20, #5912]
     bb8:	cbz	x12, bd4 <build_tree+0x308>
     bbc:	add	x17, x12, x17, lsl #2
     bc0:	ldrh	w17, [x17, #2]
     bc4:	ldr	x18, [x20, #5920]
     bc8:	add	w17, w0, w17
     bcc:	madd	x17, x17, x1, x18
     bd0:	str	x17, [x20, #5920]
     bd4:	adds	w15, w15, #0x1
     bd8:	add	x16, x16, #0x4
     bdc:	b.cc	b4c <build_tree+0x280>  // b.lo, b.ul, b.last
     be0:	cbz	w11, cb4 <build_tree+0x3e8>
     be4:	add	x12, x20, x10, lsl #1
     be8:	mov	x13, #0x100000000           	// #4294967296
     bec:	add	x12, x12, #0xba0
     bf0:	add	x13, x13, x10, lsl #32
     bf4:	mov	x14, #0xffffffff00000000    	// #-4294967296
     bf8:	mov	x15, x12
     bfc:	mov	x16, x13
     c00:	ldrh	w17, [x15, #-2]!
     c04:	add	x16, x16, x14
     c08:	cbz	w17, c00 <build_tree+0x334>
     c0c:	sub	w17, w17, #0x1
     c10:	add	x16, x20, x16, asr #31
     c14:	strh	w17, [x15]
     c18:	ldrh	w15, [x16, #2976]
     c1c:	subs	w11, w11, #0x2
     c20:	add	w15, w15, #0x2
     c24:	strh	w15, [x16, #2976]
     c28:	ldrh	w15, [x12]
     c2c:	sub	w15, w15, #0x1
     c30:	strh	w15, [x12]
     c34:	b.gt	bf8 <build_tree+0x32c>
     c38:	cbz	w10, cb4 <build_tree+0x3e8>
     c3c:	add	x11, x20, #0xbbc
     c40:	mov	w12, #0x23d                 	// #573
     c44:	and	w13, w15, #0xffff
     c48:	mov	x14, xzr
     c4c:	add	x16, x11, w12, sxtw #2
     c50:	cbz	w13, c9c <build_tree+0x3d0>
     c54:	ldrsw	x15, [x16, x14, lsl #2]
     c58:	sub	x14, x14, #0x1
     c5c:	cmp	w15, w9
     c60:	b.gt	c50 <build_tree+0x384>
     c64:	add	x16, x8, x15, lsl #2
     c68:	ldrh	w17, [x16, #2]!
     c6c:	add	x12, x14, w12, uxtw
     c70:	cmp	w10, w17
     c74:	b.eq	c94 <build_tree+0x3c8>  // b.none
     c78:	lsl	x14, x15, #2
     c7c:	ldr	x15, [x20, #5912]
     c80:	ldrh	w14, [x8, x14]
     c84:	sub	x17, x10, x17
     c88:	madd	x14, x17, x14, x15
     c8c:	str	x14, [x20, #5912]
     c90:	strh	w10, [x16]
     c94:	sub	w13, w13, #0x1
     c98:	b	c48 <build_tree+0x37c>
     c9c:	sub	x10, x10, #0x1
     ca0:	cbz	w10, cb4 <build_tree+0x3e8>
     ca4:	add	x13, x20, x10, lsl #1
     ca8:	ldrh	w15, [x13, #2976]
     cac:	mov	w12, w12
     cb0:	b	c44 <build_tree+0x378>
     cb4:	mov	x10, sp
     cb8:	mov	x8, xzr
     cbc:	mov	w9, wzr
     cc0:	orr	x10, x10, #0x2
     cc4:	add	x11, x20, #0xba0
     cc8:	ldrh	w12, [x11, x8]
     ccc:	add	w9, w9, w12
     cd0:	lsl	w9, w9, #1
     cd4:	strh	w9, [x10, x8]
     cd8:	add	x8, x8, #0x2
     cdc:	cmp	x8, #0x1e
     ce0:	b.ne	cc8 <build_tree+0x3fc>  // b.any
     ce4:	tbnz	w23, #31, d44 <build_tree+0x478>
     ce8:	mov	x8, xzr
     cec:	add	w9, w23, #0x1
     cf0:	mov	x10, sp
     cf4:	add	x11, x19, x8, lsl #2
     cf8:	ldrh	w13, [x11, #2]
     cfc:	cbz	w13, d38 <build_tree+0x46c>
     d00:	ldrh	w11, [x10, w13, uxtw #1]
     d04:	mov	w12, wzr
     d08:	add	w14, w11, #0x1
     d0c:	strh	w14, [x10, w13, uxtw #1]
     d10:	add	w13, w13, #0x1
     d14:	and	w14, w11, #0x1
     d18:	sub	w13, w13, #0x1
     d1c:	orr	w14, w12, w14
     d20:	lsr	w11, w11, #1
     d24:	cmp	w13, #0x1
     d28:	lsl	w12, w14, #1
     d2c:	b.gt	d14 <build_tree+0x448>
     d30:	lsl	x11, x8, #2
     d34:	strh	w14, [x19, x11]
     d38:	add	x8, x8, #0x1
     d3c:	cmp	x8, x9
     d40:	b.ne	cf4 <build_tree+0x428>  // b.any
     d44:	ldp	x20, x19, [sp, #112]
     d48:	ldp	x22, x21, [sp, #96]
     d4c:	ldp	x24, x23, [sp, #80]
     d50:	ldp	x26, x25, [sp, #64]
     d54:	ldp	x28, x27, [sp, #48]
     d58:	ldp	x29, x30, [sp, #32]
     d5c:	add	sp, sp, #0x80
     d60:	ret

0000000000000d64 <compress_block>:
     d64:	str	x21, [sp, #-32]!
     d68:	stp	x20, x19, [sp, #16]
     d6c:	ldr	w8, [x0, #5900]
     d70:	cbz	w8, 1084 <compress_block+0x320>
     d74:	mov	w9, #0x1730                	// #5936
     d78:	adrp	x10, 200 <bi_windup+0x28>
     d7c:	adrp	x11, 0 <_tr_init>
     d80:	adrp	x12, 0 <_tr_init>
     d84:	adrp	x13, 0 <_tr_init>
     d88:	adrp	x14, 0 <_tr_init>
     d8c:	adrp	x16, 0 <_tr_init>
     d90:	mov	x17, xzr
     d94:	mov	w8, #0x10                  	// #16
     d98:	add	x10, x10, #0x0
     d9c:	add	x11, x11, #0x0
     da0:	add	x12, x12, #0x0
     da4:	add	x13, x13, #0x0
     da8:	add	x14, x14, #0x0
     dac:	add	x15, x0, x9
     db0:	add	x16, x16, #0x0
     db4:	ldr	x18, [x0, #5904]
     db8:	ldr	x3, [x0, #5888]
     dbc:	ldrh	w18, [x18, x17, lsl #1]
     dc0:	ldrb	w5, [x3, x17]
     dc4:	add	x17, x17, #0x1
     dc8:	cbz	w18, e50 <compress_block+0xec>
     dcc:	ldrb	w6, [x10, x5]
     dd0:	mov	w3, #0x400                 	// #1024
     dd4:	ldr	w19, [x0, #5940]
     dd8:	bfi	x3, x6, #2, #8
     ddc:	add	x3, x3, x1
     de0:	ldrh	w4, [x3, #6]
     de4:	ldrh	w7, [x3, #4]
     de8:	ldrh	w3, [x0, #5936]
     dec:	sub	w20, w8, w4
     df0:	lsl	w21, w7, w19
     df4:	orr	w3, w3, w21
     df8:	cmp	w19, w20
     dfc:	strh	w3, [x0, #5936]
     e00:	b.le	ec4 <compress_block+0x160>
     e04:	ldr	x19, [x0, #40]
     e08:	ldr	x20, [x0, #16]
     e0c:	add	x21, x19, #0x1
     e10:	str	x21, [x0, #40]
     e14:	strb	w3, [x20, x19]
     e18:	add	x21, x0, x9
     e1c:	ldr	x3, [x0, #40]
     e20:	ldrb	w19, [x21, #1]
     e24:	ldr	x20, [x0, #16]
     e28:	add	x21, x3, #0x1
     e2c:	str	x21, [x0, #40]
     e30:	strb	w19, [x20, x3]
     e34:	ldr	w3, [x0, #5940]
     e38:	sub	w19, w8, w3
     e3c:	add	w4, w4, w3
     e40:	lsr	w3, w7, w19
     e44:	strh	w3, [x0, #5936]
     e48:	sub	w4, w4, #0x10
     e4c:	b	ec8 <compress_block+0x164>
     e50:	add	x18, x1, x5, lsl #2
     e54:	ldr	w5, [x0, #5940]
     e58:	ldrh	w3, [x18, #2]
     e5c:	ldrh	w4, [x18]
     e60:	ldrh	w18, [x0, #5936]
     e64:	sub	w6, w8, w3
     e68:	lsl	w7, w4, w5
     e6c:	orr	w18, w18, w7
     e70:	cmp	w5, w6
     e74:	strh	w18, [x0, #5936]
     e78:	b.le	f4c <compress_block+0x1e8>
     e7c:	ldr	x5, [x0, #40]
     e80:	ldr	x6, [x0, #16]
     e84:	add	x7, x5, #0x1
     e88:	str	x7, [x0, #40]
     e8c:	strb	w18, [x6, x5]
     e90:	ldr	x18, [x0, #40]
     e94:	ldrb	w5, [x15, #1]
     e98:	ldr	x6, [x0, #16]
     e9c:	add	x7, x18, #0x1
     ea0:	str	x7, [x0, #40]
     ea4:	strb	w5, [x6, x18]
     ea8:	ldr	w18, [x0, #5940]
     eac:	sub	w5, w8, w18
     eb0:	add	w3, w3, w18
     eb4:	lsr	w18, w4, w5
     eb8:	strh	w18, [x0, #5936]
     ebc:	sub	w3, w3, #0x10
     ec0:	b	1070 <compress_block+0x30c>
     ec4:	add	w4, w19, w4
     ec8:	sub	x7, x6, #0x8
     ecc:	cmp	x7, #0x13
     ed0:	str	w4, [x0, #5940]
     ed4:	b.hi	f5c <compress_block+0x1f8>  // b.pmore
     ed8:	ldr	w7, [x12, x6, lsl #2]
     edc:	ldr	w6, [x11, x6, lsl #2]
     ee0:	sub	w5, w5, w7
     ee4:	and	w5, w5, #0xffff
     ee8:	sub	w7, w8, w6
     eec:	lsl	w19, w5, w4
     ef0:	orr	w3, w3, w19
     ef4:	cmp	w4, w7
     ef8:	strh	w3, [x0, #5936]
     efc:	b.le	f54 <compress_block+0x1f0>
     f00:	ldr	x4, [x0, #40]
     f04:	ldr	x7, [x0, #16]
     f08:	add	x19, x4, #0x1
     f0c:	str	x19, [x0, #40]
     f10:	strb	w3, [x7, x4]
     f14:	add	x19, x0, x9
     f18:	ldr	x3, [x0, #40]
     f1c:	ldrb	w4, [x19, #1]
     f20:	ldr	x7, [x0, #16]
     f24:	add	x19, x3, #0x1
     f28:	str	x19, [x0, #40]
     f2c:	strb	w4, [x7, x3]
     f30:	ldr	w3, [x0, #5940]
     f34:	sub	w4, w8, w3
     f38:	add	w6, w6, w3
     f3c:	lsr	w3, w5, w4
     f40:	strh	w3, [x0, #5936]
     f44:	sub	w4, w6, #0x10
     f48:	b	f58 <compress_block+0x1f4>
     f4c:	add	w3, w5, w3
     f50:	b	1070 <compress_block+0x30c>
     f54:	add	w4, w6, w4
     f58:	str	w4, [x0, #5940]
     f5c:	sub	w5, w18, #0x1
     f60:	lsr	w18, w5, #7
     f64:	cmp	w5, #0x100
     f68:	add	w18, w18, #0x100
     f6c:	csel	w18, w5, w18, cc  // cc = lo, ul, last
     f70:	ldrb	w6, [x13, w18, uxtw]
     f74:	add	x18, x2, x6, lsl #2
     f78:	ldrh	w7, [x18, #2]
     f7c:	ldrh	w19, [x18]
     f80:	sub	w20, w8, w7
     f84:	lsl	w18, w19, w4
     f88:	orr	w18, w3, w18
     f8c:	cmp	w4, w20
     f90:	strh	w18, [x0, #5936]
     f94:	b.le	fe4 <compress_block+0x280>
     f98:	ldr	x3, [x0, #40]
     f9c:	ldr	x4, [x0, #16]
     fa0:	add	x20, x3, #0x1
     fa4:	str	x20, [x0, #40]
     fa8:	strb	w18, [x4, x3]
     fac:	add	x20, x0, x9
     fb0:	ldr	x18, [x0, #40]
     fb4:	ldrb	w3, [x20, #1]
     fb8:	ldr	x4, [x0, #16]
     fbc:	add	x20, x18, #0x1
     fc0:	str	x20, [x0, #40]
     fc4:	strb	w3, [x4, x18]
     fc8:	ldr	w18, [x0, #5940]
     fcc:	sub	w3, w8, w18
     fd0:	add	w4, w7, w18
     fd4:	lsr	w18, w19, w3
     fd8:	strh	w18, [x0, #5936]
     fdc:	sub	w3, w4, #0x10
     fe0:	b	fe8 <compress_block+0x284>
     fe4:	add	w3, w4, w7
     fe8:	sub	x4, x6, #0x4
     fec:	cmp	x4, #0x19
     ff0:	str	w3, [x0, #5940]
     ff4:	b.hi	1074 <compress_block+0x310>  // b.pmore
     ff8:	ldr	w7, [x16, x6, lsl #2]
     ffc:	ldr	w4, [x14, x6, lsl #2]
    1000:	sub	w5, w5, w7
    1004:	and	w5, w5, #0xffff
    1008:	sub	w6, w8, w4
    100c:	lsl	w7, w5, w3
    1010:	orr	w18, w18, w7
    1014:	cmp	w3, w6
    1018:	strh	w18, [x0, #5936]
    101c:	b.le	106c <compress_block+0x308>
    1020:	ldr	x3, [x0, #40]
    1024:	ldr	x6, [x0, #16]
    1028:	add	x7, x3, #0x1
    102c:	str	x7, [x0, #40]
    1030:	strb	w18, [x6, x3]
    1034:	add	x7, x0, x9
    1038:	ldr	x18, [x0, #40]
    103c:	ldrb	w3, [x7, #1]
    1040:	ldr	x6, [x0, #16]
    1044:	add	x7, x18, #0x1
    1048:	str	x7, [x0, #40]
    104c:	strb	w3, [x6, x18]
    1050:	ldr	w18, [x0, #5940]
    1054:	sub	w3, w8, w18
    1058:	add	w4, w4, w18
    105c:	lsr	w18, w5, w3
    1060:	strh	w18, [x0, #5936]
    1064:	sub	w3, w4, #0x10
    1068:	b	1070 <compress_block+0x30c>
    106c:	add	w3, w4, w3
    1070:	str	w3, [x0, #5940]
    1074:	ldr	w4, [x0, #5900]
    1078:	cmp	x17, x4
    107c:	b.cc	db4 <compress_block+0x50>  // b.lo, b.ul, b.last
    1080:	b	108c <compress_block+0x328>
    1084:	ldr	w3, [x0, #5940]
    1088:	ldrh	w18, [x0, #5936]
    108c:	ldrh	w8, [x1, #1026]
    1090:	ldrh	w9, [x1, #1024]
    1094:	mov	w10, #0x10                  	// #16
    1098:	sub	w12, w10, w8
    109c:	lsl	w11, w9, w3
    10a0:	orr	w11, w18, w11
    10a4:	cmp	w3, w12
    10a8:	strh	w11, [x0, #5936]
    10ac:	b.le	1100 <compress_block+0x39c>
    10b0:	ldr	x12, [x0, #40]
    10b4:	ldr	x13, [x0, #16]
    10b8:	add	x14, x12, #0x1
    10bc:	str	x14, [x0, #40]
    10c0:	mov	w14, #0x1730                	// #5936
    10c4:	strb	w11, [x13, x12]
    10c8:	add	x14, x0, x14
    10cc:	ldr	x11, [x0, #40]
    10d0:	ldrb	w12, [x14, #1]
    10d4:	ldr	x13, [x0, #16]
    10d8:	add	x14, x11, #0x1
    10dc:	str	x14, [x0, #40]
    10e0:	strb	w12, [x13, x11]
    10e4:	ldr	w11, [x0, #5940]
    10e8:	sub	w10, w10, w11
    10ec:	add	w8, w8, w11
    10f0:	lsr	w9, w9, w10
    10f4:	strh	w9, [x0, #5936]
    10f8:	sub	w8, w8, #0x10
    10fc:	b	1104 <compress_block+0x3a0>
    1100:	add	w8, w3, w8
    1104:	str	w8, [x0, #5940]
    1108:	ldp	x20, x19, [sp, #16]
    110c:	ldr	x21, [sp], #32
    1110:	ret

0000000000001114 <_tr_tally>:
    1114:	ldr	x8, [x0, #5904]
    1118:	ldr	w9, [x0, #5900]
    111c:	strh	w1, [x8, x9, lsl #1]
    1120:	ldr	x8, [x0, #5888]
    1124:	add	w10, w9, #0x1
    1128:	str	w10, [x0, #5900]
    112c:	strb	w2, [x8, x9]
    1130:	cbz	w1, 1190 <_tr_tally+0x7c>
    1134:	ldr	w8, [x0, #5928]
    1138:	adrp	x10, 200 <bi_windup+0x28>
    113c:	add	x10, x10, #0x0
    1140:	ldrb	w10, [x10, w2, uxtw]
    1144:	sub	w9, w1, #0x1
    1148:	lsr	w11, w9, #7
    114c:	add	w8, w8, #0x1
    1150:	cmp	w9, #0x100
    1154:	add	w11, w11, #0x100
    1158:	str	w8, [x0, #5928]
    115c:	mov	w8, #0x400                 	// #1024
    1160:	csel	w9, w9, w11, cc  // cc = lo, ul, last
    1164:	adrp	x11, 0 <_tr_init>
    1168:	bfi	x8, x10, #2, #8
    116c:	add	x11, x11, #0x0
    1170:	add	x8, x8, x0
    1174:	ldrb	w9, [x11, w9, uxtw]
    1178:	ldrh	w10, [x8, #216]
    117c:	add	x9, x0, x9, lsl #2
    1180:	add	w10, w10, #0x1
    1184:	strh	w10, [x8, #216]
    1188:	add	x8, x9, #0x9c8
    118c:	b	1198 <_tr_tally+0x84>
    1190:	add	x8, x0, w2, uxtw #2
    1194:	add	x8, x8, #0xd4
    1198:	ldrh	w9, [x8]
    119c:	add	w9, w9, #0x1
    11a0:	strh	w9, [x8]
    11a4:	ldr	w8, [x0, #5896]
    11a8:	ldr	w9, [x0, #5900]
    11ac:	sub	w8, w8, #0x1
    11b0:	cmp	w9, w8
    11b4:	cset	w0, eq  // eq = none
    11b8:	ret

00000000000011bc <pqdownheap>:
    11bc:	ldr	w15, [x0, #5300]
    11c0:	add	x8, x0, w2, sxtw #2
    11c4:	ldr	w8, [x8, #3008]
    11c8:	lsl	w13, w2, #1
    11cc:	cmp	w13, w15
    11d0:	b.le	11dc <pqdownheap+0x20>
    11d4:	sxtw	x9, w2
    11d8:	b	12bc <pqdownheap+0x100>
    11dc:	sxtw	x11, w8
    11e0:	add	x10, x0, w8, sxtw
    11e4:	mov	w12, #0x14bc                	// #5308
    11e8:	mov	w9, #0x14bc                	// #5308
    11ec:	add	x10, x10, x12
    11f0:	add	x11, x1, x11, lsl #2
    11f4:	add	x12, x0, x9
    11f8:	cmp	w13, w15
    11fc:	b.ge	1238 <pqdownheap+0x7c>  // b.tcont
    1200:	sxtw	x15, w13
    1204:	add	x17, x0, #0xbc0
    1208:	orr	x16, x15, #0x1
    120c:	ldrsw	x14, [x17, w13, sxtw #2]
    1210:	ldrsw	x17, [x17, x16, lsl #2]
    1214:	lsl	x18, x14, #2
    1218:	lsl	x3, x17, #2
    121c:	ldrh	w3, [x1, x3]
    1220:	ldrh	w18, [x1, x18]
    1224:	cmp	w3, w18
    1228:	b.cs	1298 <pqdownheap+0xdc>  // b.hs, b.nlast
    122c:	mov	x15, x16
    1230:	mov	w14, w16
    1234:	b	1240 <pqdownheap+0x84>
    1238:	sxtw	x15, w13
    123c:	mov	w14, w13
    1240:	add	x13, x0, x15, lsl #2
    1244:	ldr	w13, [x13, #3008]
    1248:	ldrh	w15, [x11]
    124c:	sbfiz	x16, x13, #2, #32
    1250:	ldrh	w16, [x1, x16]
    1254:	cmp	w15, w16
    1258:	b.cc	12b4 <pqdownheap+0xf8>  // b.lo, b.ul, b.last
    125c:	b.ne	1278 <pqdownheap+0xbc>  // b.any
    1260:	sxtw	x15, w13
    1264:	add	x15, x0, x15
    1268:	ldrb	w16, [x10]
    126c:	ldrb	w15, [x15, x9]
    1270:	cmp	w16, w15
    1274:	b.ls	12b4 <pqdownheap+0xf8>  // b.plast
    1278:	add	x15, x0, w2, sxtw #2
    127c:	str	w13, [x15, #3008]
    1280:	ldr	w15, [x0, #5300]
    1284:	lsl	w13, w14, #1
    1288:	mov	w2, w14
    128c:	cmp	w13, w15
    1290:	b.le	11f8 <pqdownheap+0x3c>
    1294:	b	12b8 <pqdownheap+0xfc>
    1298:	b.ne	123c <pqdownheap+0x80>  // b.any
    129c:	ldrb	w17, [x12, x17]
    12a0:	ldrb	w14, [x12, x14]
    12a4:	cmp	w17, w14
    12a8:	mov	w14, w13
    12ac:	b.ls	122c <pqdownheap+0x70>  // b.plast
    12b0:	b	1240 <pqdownheap+0x84>
    12b4:	mov	w14, w2
    12b8:	sxtw	x9, w14
    12bc:	add	x9, x0, x9, lsl #2
    12c0:	str	w8, [x9, #3008]
    12c4:	ret

00000000000012c8 <scan_tree>:
    12c8:	ldrh	w8, [x1, #2]
    12cc:	add	w13, w2, #0x1
    12d0:	add	x9, x1, w13, sxtw #2
    12d4:	mov	w10, #0xffff                	// #65535
    12d8:	strh	w10, [x9, #2]
    12dc:	tbnz	w2, #31, 13d8 <scan_tree+0x110>
    12e0:	cmp	w8, #0x0
    12e4:	mov	w9, #0x3                   	// #3
    12e8:	mov	w15, #0x7                   	// #7
    12ec:	mov	w16, #0x8a                  	// #138
    12f0:	mov	w2, wzr
    12f4:	add	x10, x0, #0xafc
    12f8:	add	x11, x0, #0xb04
    12fc:	add	x12, x0, #0xb00
    1300:	mov	w13, w13
    1304:	add	x14, x1, #0x6
    1308:	mov	w3, #0xffffffff            	// #-1
    130c:	cinc	w17, w9, ne  // ne = any
    1310:	csel	w18, w16, w15, eq  // eq = none
    1314:	mov	w15, #0x6                   	// #6
    1318:	mov	w16, w8
    131c:	ldrh	w8, [x14]
    1320:	add	w1, w2, #0x1
    1324:	cmp	w1, w18
    1328:	b.ge	133c <scan_tree+0x74>  // b.tcont
    132c:	cmp	w16, w8
    1330:	b.ne	133c <scan_tree+0x74>  // b.any
    1334:	mov	w16, w3
    1338:	b	13c4 <scan_tree+0xfc>
    133c:	cmp	w1, w17
    1340:	b.ge	1358 <scan_tree+0x90>  // b.tcont
    1344:	add	x17, x0, w16, uxtw #2
    1348:	ldrh	w2, [x17, #2748]
    134c:	add	x18, x17, #0xabc
    1350:	add	w17, w2, w1
    1354:	b	13a0 <scan_tree+0xd8>
    1358:	cbz	w16, 1380 <scan_tree+0xb8>
    135c:	cmp	w16, w3
    1360:	b.eq	1374 <scan_tree+0xac>  // b.none
    1364:	add	x17, x0, w16, uxtw #2
    1368:	ldrh	w18, [x17, #2748]
    136c:	add	w18, w18, #0x1
    1370:	strh	w18, [x17, #2748]
    1374:	ldrh	w17, [x10]
    1378:	mov	x18, x10
    137c:	b	139c <scan_tree+0xd4>
    1380:	cmp	w2, #0x9
    1384:	b.gt	1394 <scan_tree+0xcc>
    1388:	ldrh	w17, [x12]
    138c:	mov	x18, x12
    1390:	b	139c <scan_tree+0xd4>
    1394:	ldrh	w17, [x11]
    1398:	mov	x18, x11
    139c:	add	w17, w17, #0x1
    13a0:	mov	w1, wzr
    13a4:	strh	w17, [x18]
    13a8:	cbz	w8, 13bc <scan_tree+0xf4>
    13ac:	cmp	w16, w8
    13b0:	cinc	w18, w15, ne  // ne = any
    13b4:	cinc	w17, w9, ne  // ne = any
    13b8:	b	13c4 <scan_tree+0xfc>
    13bc:	mov	w17, #0x3                   	// #3
    13c0:	mov	w18, #0x8a                  	// #138
    13c4:	subs	x13, x13, #0x1
    13c8:	add	x14, x14, #0x4
    13cc:	mov	w2, w1
    13d0:	mov	w3, w16
    13d4:	b.ne	1318 <scan_tree+0x50>  // b.any
    13d8:	ret

00000000000013dc <send_tree>:
    13dc:	stp	x22, x21, [sp, #-32]!
    13e0:	stp	x20, x19, [sp, #16]
    13e4:	tbnz	w2, #31, 1878 <send_tree+0x49c>
    13e8:	ldrh	w9, [x1, #2]
    13ec:	mov	w18, #0x7                   	// #7
    13f0:	mov	w4, #0x8a                  	// #138
    13f4:	mov	w10, #0x3                   	// #3
    13f8:	mov	w13, #0x1730                	// #5936
    13fc:	cmp	w9, #0x0
    1400:	mov	x8, xzr
    1404:	mov	w3, wzr
    1408:	add	w11, w2, #0x1
    140c:	mov	w7, #0xffffffff            	// #-1
    1410:	mov	w12, #0x10                  	// #16
    1414:	mov	w14, #0x6                   	// #6
    1418:	mov	w15, #0xfffe                	// #65534
    141c:	mov	w16, #0xfff6                	// #65526
    1420:	add	x17, x0, x13
    1424:	csel	w6, w4, w18, eq  // eq = none
    1428:	cinc	w5, w10, ne  // ne = any
    142c:	mov	w18, #0xfffd                	// #65533
    1430:	add	x8, x8, #0x1
    1434:	mov	w2, w9
    1438:	add	x9, x1, x8, lsl #2
    143c:	ldrh	w9, [x9, #2]
    1440:	add	w4, w3, #0x1
    1444:	cmp	w4, w6
    1448:	b.ge	145c <send_tree+0x80>  // b.tcont
    144c:	cmp	w2, w9
    1450:	b.ne	145c <send_tree+0x80>  // b.any
    1454:	mov	w2, w7
    1458:	b	1868 <send_tree+0x48c>
    145c:	cmp	w4, w5
    1460:	b.ge	14f4 <send_tree+0x118>  // b.tcont
    1464:	ldr	w6, [x0, #5940]
    1468:	add	x5, x0, w2, uxtw #2
    146c:	add	x3, x5, #0xabe
    1470:	add	x5, x5, #0xabc
    1474:	ldrh	w7, [x3]
    1478:	ldrh	w19, [x5]
    147c:	ldrh	w20, [x0, #5936]
    1480:	sub	w21, w12, w7
    1484:	lsl	w22, w19, w6
    1488:	orr	w20, w20, w22
    148c:	cmp	w6, w21
    1490:	strh	w20, [x0, #5936]
    1494:	b.le	14e0 <send_tree+0x104>
    1498:	ldr	x6, [x0, #40]
    149c:	ldr	x21, [x0, #16]
    14a0:	add	x22, x6, #0x1
    14a4:	str	x22, [x0, #40]
    14a8:	strb	w20, [x21, x6]
    14ac:	ldr	x6, [x0, #40]
    14b0:	ldrb	w20, [x17, #1]
    14b4:	ldr	x21, [x0, #16]
    14b8:	add	x22, x6, #0x1
    14bc:	str	x22, [x0, #40]
    14c0:	strb	w20, [x21, x6]
    14c4:	ldr	w6, [x0, #5940]
    14c8:	sub	w20, w12, w6
    14cc:	add	w6, w7, w6
    14d0:	lsr	w7, w19, w20
    14d4:	strh	w7, [x0, #5936]
    14d8:	sub	w6, w6, #0x10
    14dc:	b	14e4 <send_tree+0x108>
    14e0:	add	w6, w6, w7
    14e4:	subs	w4, w4, #0x1
    14e8:	str	w6, [x0, #5940]
    14ec:	b.ne	1474 <send_tree+0x98>  // b.any
    14f0:	b	1848 <send_tree+0x46c>
    14f4:	cbz	w2, 150c <send_tree+0x130>
    14f8:	cmp	w2, w7
    14fc:	b.ne	1588 <send_tree+0x1ac>  // b.any
    1500:	ldr	w5, [x0, #5940]
    1504:	mov	w3, w4
    1508:	b	167c <send_tree+0x2a0>
    150c:	cmp	w3, #0x9
    1510:	b.gt	1600 <send_tree+0x224>
    1514:	ldrh	w4, [x0, #2818]
    1518:	ldr	w7, [x0, #5940]
    151c:	ldrh	w6, [x0, #2816]
    1520:	ldrh	w5, [x0, #5936]
    1524:	sub	w19, w12, w4
    1528:	cmp	w7, w19
    152c:	lsl	w20, w6, w7
    1530:	orr	w5, w5, w20
    1534:	strh	w5, [x0, #5936]
    1538:	b.le	1760 <send_tree+0x384>
    153c:	ldr	x7, [x0, #40]
    1540:	ldr	x19, [x0, #16]
    1544:	add	x20, x7, #0x1
    1548:	str	x20, [x0, #40]
    154c:	strb	w5, [x19, x7]
    1550:	add	x20, x0, x13
    1554:	ldr	x5, [x0, #40]
    1558:	ldrb	w7, [x20, #1]
    155c:	ldr	x19, [x0, #16]
    1560:	add	x20, x5, #0x1
    1564:	str	x20, [x0, #40]
    1568:	strb	w7, [x19, x5]
    156c:	ldr	w5, [x0, #5940]
    1570:	sub	w7, w12, w5
    1574:	add	w4, w4, w5
    1578:	lsr	w5, w6, w7
    157c:	strh	w5, [x0, #5936]
    1580:	sub	w4, w4, #0x10
    1584:	b	1764 <send_tree+0x388>
    1588:	add	x5, x0, w2, uxtw #2
    158c:	ldr	w7, [x0, #5940]
    1590:	ldrh	w4, [x5, #2750]
    1594:	ldrh	w5, [x5, #2748]
    1598:	ldrh	w6, [x0, #5936]
    159c:	sub	w19, w12, w4
    15a0:	lsl	w20, w5, w7
    15a4:	orr	w6, w6, w20
    15a8:	cmp	w7, w19
    15ac:	strh	w6, [x0, #5936]
    15b0:	b.le	1674 <send_tree+0x298>
    15b4:	ldr	x7, [x0, #40]
    15b8:	ldr	x19, [x0, #16]
    15bc:	add	x20, x7, #0x1
    15c0:	str	x20, [x0, #40]
    15c4:	strb	w6, [x19, x7]
    15c8:	add	x20, x0, x13
    15cc:	ldr	x6, [x0, #40]
    15d0:	ldrb	w7, [x20, #1]
    15d4:	ldr	x19, [x0, #16]
    15d8:	add	x20, x6, #0x1
    15dc:	str	x20, [x0, #40]
    15e0:	strb	w7, [x19, x6]
    15e4:	ldr	w6, [x0, #5940]
    15e8:	sub	w7, w12, w6
    15ec:	add	w4, w4, w6
    15f0:	lsr	w5, w5, w7
    15f4:	strh	w5, [x0, #5936]
    15f8:	sub	w5, w4, #0x10
    15fc:	b	1678 <send_tree+0x29c>
    1600:	ldrh	w4, [x0, #2822]
    1604:	ldr	w7, [x0, #5940]
    1608:	ldrh	w6, [x0, #2820]
    160c:	ldrh	w5, [x0, #5936]
    1610:	sub	w19, w12, w4
    1614:	cmp	w7, w19
    1618:	lsl	w20, w6, w7
    161c:	orr	w5, w5, w20
    1620:	strh	w5, [x0, #5936]
    1624:	b.le	17cc <send_tree+0x3f0>
    1628:	ldr	x7, [x0, #40]
    162c:	ldr	x19, [x0, #16]
    1630:	add	x20, x7, #0x1
    1634:	str	x20, [x0, #40]
    1638:	strb	w5, [x19, x7]
    163c:	add	x20, x0, x13
    1640:	ldr	x5, [x0, #40]
    1644:	ldrb	w7, [x20, #1]
    1648:	ldr	x19, [x0, #16]
    164c:	add	x20, x5, #0x1
    1650:	str	x20, [x0, #40]
    1654:	strb	w7, [x19, x5]
    1658:	ldr	w5, [x0, #5940]
    165c:	sub	w7, w12, w5
    1660:	add	w4, w4, w5
    1664:	lsr	w5, w6, w7
    1668:	strh	w5, [x0, #5936]
    166c:	sub	w4, w4, #0x10
    1670:	b	17d0 <send_tree+0x3f4>
    1674:	add	w5, w7, w4
    1678:	str	w5, [x0, #5940]
    167c:	ldrh	w6, [x0, #2814]
    1680:	ldrh	w7, [x0, #2812]
    1684:	ldrh	w4, [x0, #5936]
    1688:	sub	w19, w12, w6
    168c:	lsl	w20, w7, w5
    1690:	orr	w4, w4, w20
    1694:	cmp	w5, w19
    1698:	strh	w4, [x0, #5936]
    169c:	b.le	16ec <send_tree+0x310>
    16a0:	ldr	x5, [x0, #40]
    16a4:	ldr	x19, [x0, #16]
    16a8:	add	x20, x5, #0x1
    16ac:	str	x20, [x0, #40]
    16b0:	strb	w4, [x19, x5]
    16b4:	add	x20, x0, x13
    16b8:	ldr	x4, [x0, #40]
    16bc:	ldrb	w5, [x20, #1]
    16c0:	ldr	x19, [x0, #16]
    16c4:	add	x20, x4, #0x1
    16c8:	str	x20, [x0, #40]
    16cc:	strb	w5, [x19, x4]
    16d0:	ldr	w4, [x0, #5940]
    16d4:	sub	w5, w12, w4
    16d8:	add	w6, w6, w4
    16dc:	lsr	w4, w7, w5
    16e0:	strh	w4, [x0, #5936]
    16e4:	sub	w5, w6, #0x10
    16e8:	b	16f0 <send_tree+0x314>
    16ec:	add	w5, w5, w6
    16f0:	add	w3, w3, w18
    16f4:	and	w3, w3, #0xffff
    16f8:	lsl	w6, w3, w5
    16fc:	orr	w4, w4, w6
    1700:	cmp	w5, #0xf
    1704:	str	w5, [x0, #5940]
    1708:	strh	w4, [x0, #5936]
    170c:	b.lt	1758 <send_tree+0x37c>  // b.tstop
    1710:	ldr	x5, [x0, #40]
    1714:	ldr	x6, [x0, #16]
    1718:	add	x7, x5, #0x1
    171c:	str	x7, [x0, #40]
    1720:	strb	w4, [x6, x5]
    1724:	add	x7, x0, x13
    1728:	ldr	x4, [x0, #40]
    172c:	ldrb	w5, [x7, #1]
    1730:	ldr	x6, [x0, #16]
    1734:	add	x7, x4, #0x1
    1738:	str	x7, [x0, #40]
    173c:	strb	w5, [x6, x4]
    1740:	ldr	w4, [x0, #5940]
    1744:	sub	w5, w12, w4
    1748:	lsr	w3, w3, w5
    174c:	strh	w3, [x0, #5936]
    1750:	sub	w3, w4, #0xe
    1754:	b	1844 <send_tree+0x468>
    1758:	add	w3, w5, #0x2
    175c:	b	1844 <send_tree+0x468>
    1760:	add	w4, w7, w4
    1764:	add	w3, w3, w15
    1768:	and	w3, w3, #0xffff
    176c:	lsl	w6, w3, w4
    1770:	orr	w5, w5, w6
    1774:	cmp	w4, #0xe
    1778:	str	w4, [x0, #5940]
    177c:	strh	w5, [x0, #5936]
    1780:	b.lt	1838 <send_tree+0x45c>  // b.tstop
    1784:	ldr	x4, [x0, #40]
    1788:	ldr	x6, [x0, #16]
    178c:	add	x7, x4, #0x1
    1790:	str	x7, [x0, #40]
    1794:	strb	w5, [x6, x4]
    1798:	add	x7, x0, x13
    179c:	ldr	x4, [x0, #40]
    17a0:	ldrb	w5, [x7, #1]
    17a4:	ldr	x6, [x0, #16]
    17a8:	add	x7, x4, #0x1
    17ac:	str	x7, [x0, #40]
    17b0:	strb	w5, [x6, x4]
    17b4:	ldr	w4, [x0, #5940]
    17b8:	sub	w5, w12, w4
    17bc:	lsr	w3, w3, w5
    17c0:	strh	w3, [x0, #5936]
    17c4:	sub	w3, w4, #0xd
    17c8:	b	1844 <send_tree+0x468>
    17cc:	add	w4, w7, w4
    17d0:	add	w3, w3, w16
    17d4:	and	w3, w3, #0xffff
    17d8:	lsl	w6, w3, w4
    17dc:	orr	w5, w5, w6
    17e0:	cmp	w4, #0xa
    17e4:	str	w4, [x0, #5940]
    17e8:	strh	w5, [x0, #5936]
    17ec:	b.lt	1840 <send_tree+0x464>  // b.tstop
    17f0:	ldr	x4, [x0, #40]
    17f4:	ldr	x6, [x0, #16]
    17f8:	add	x7, x4, #0x1
    17fc:	str	x7, [x0, #40]
    1800:	strb	w5, [x6, x4]
    1804:	add	x7, x0, x13
    1808:	ldr	x4, [x0, #40]
    180c:	ldrb	w5, [x7, #1]
    1810:	ldr	x6, [x0, #16]
    1814:	add	x7, x4, #0x1
    1818:	str	x7, [x0, #40]
    181c:	strb	w5, [x6, x4]
    1820:	ldr	w4, [x0, #5940]
    1824:	sub	w5, w12, w4
    1828:	lsr	w3, w3, w5
    182c:	strh	w3, [x0, #5936]
    1830:	sub	w3, w4, #0x9
    1834:	b	1844 <send_tree+0x468>
    1838:	add	w3, w4, #0x3
    183c:	b	1844 <send_tree+0x468>
    1840:	add	w3, w4, #0x7
    1844:	str	w3, [x0, #5940]
    1848:	mov	w4, wzr
    184c:	cbz	w9, 1860 <send_tree+0x484>
    1850:	cmp	w2, w9
    1854:	cinc	w5, w10, ne  // ne = any
    1858:	cinc	w6, w14, ne  // ne = any
    185c:	b	1868 <send_tree+0x48c>
    1860:	mov	w6, #0x8a                  	// #138
    1864:	mov	w5, #0x3                   	// #3
    1868:	cmp	x8, x11
    186c:	mov	w7, w2
    1870:	mov	w3, w4
    1874:	b.ne	1430 <send_tree+0x54>  // b.any
    1878:	ldp	x20, x19, [sp, #16]
    187c:	ldp	x22, x21, [sp], #32
    1880:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	w0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w8, #0x2                   	// #2
  18:	adrp	x9, 0 <zlibVersion>
  1c:	sub	x8, x8, w0, sxtw
  20:	add	x9, x9, #0x0
  24:	ldr	x0, [x9, x8, lsl #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	mul	w0, w2, w1
  30:	b	0 <malloc>

0000000000000034 <zcfree>:
  34:	mov	x0, x1
  38:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x22, x21, [sp, #144]
   c:	stp	x20, x19, [sp, #160]
  10:	str	x23, [sp, #128]
  14:	ldr	x23, [x1]
  18:	mov	x21, x2
  1c:	adrp	x2, 0 <compress2>
  20:	mov	x20, x3
  24:	mov	x19, x1
  28:	mov	x22, x0
  2c:	str	xzr, [x1]
  30:	add	x2, x2, #0x0
  34:	mov	x0, sp
  38:	mov	w3, #0x70                  	// #112
  3c:	mov	w1, w4
  40:	add	x29, sp, #0x70
  44:	stp	xzr, xzr, [sp, #64]
  48:	str	xzr, [sp, #80]
  4c:	bl	0 <deflateInit_>
  50:	cbnz	w0, d8 <compress2+0xd8>
  54:	mov	w8, wzr
  58:	str	x22, [sp, #24]
  5c:	str	wzr, [sp, #32]
  60:	str	x21, [sp]
  64:	str	wzr, [sp, #8]
  68:	mov	w22, #0xffffffff            	// #-1
  6c:	cbnz	w8, 80 <compress2+0x80>
  70:	cmp	x23, x22
  74:	csel	x8, x23, x22, cc  // cc = lo, ul, last
  78:	sub	x23, x23, x8
  7c:	str	w8, [sp, #32]
  80:	ldr	w8, [sp, #8]
  84:	cbnz	w8, 98 <compress2+0x98>
  88:	cmp	x20, x22
  8c:	csel	x8, x20, x22, cc  // cc = lo, ul, last
  90:	sub	x20, x20, x8
  94:	str	w8, [sp, #8]
  98:	cmp	x20, #0x0
  9c:	cset	w8, eq  // eq = none
  a0:	lsl	w1, w8, #2
  a4:	mov	x0, sp
  a8:	bl	0 <deflate>
  ac:	cbnz	w0, bc <compress2+0xbc>
  b0:	ldr	w8, [sp, #32]
  b4:	cbnz	w8, 80 <compress2+0x80>
  b8:	b	70 <compress2+0x70>
  bc:	ldr	x8, [sp, #40]
  c0:	mov	w21, w0
  c4:	mov	x0, sp
  c8:	str	x8, [x19]
  cc:	bl	0 <deflateEnd>
  d0:	cmp	w21, #0x1
  d4:	csel	w0, wzr, w21, eq  // eq = none
  d8:	ldp	x20, x19, [sp, #160]
  dc:	ldp	x22, x21, [sp, #144]
  e0:	ldr	x23, [sp, #128]
  e4:	ldp	x29, x30, [sp, #112]
  e8:	add	sp, sp, #0xb0
  ec:	ret

00000000000000f0 <compress>:
  f0:	mov	w4, #0xffffffff            	// #-1
  f4:	b	0 <compress2>

00000000000000f8 <compressBound>:
  f8:	add	x8, x0, x0, lsr #12
  fc:	add	x8, x8, x0, lsr #14
 100:	add	x8, x8, x0, lsr #25
 104:	add	x0, x8, #0xd
 108:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x24, x23, [sp, #144]
   c:	stp	x22, x21, [sp, #160]
  10:	stp	x20, x19, [sp, #176]
  14:	ldr	x23, [x1]
  18:	ldr	x24, [x3]
  1c:	mov	x20, x3
  20:	mov	x19, x1
  24:	str	x25, [sp, #128]
  28:	add	x29, sp, #0x70
  2c:	cbz	x23, 3c <uncompress2+0x3c>
  30:	mov	x21, x0
  34:	str	xzr, [x19]
  38:	b	44 <uncompress2+0x44>
  3c:	add	x21, x29, #0x1c
  40:	mov	w23, #0x1                   	// #1
  44:	adrp	x1, 0 <uncompress2>
  48:	str	x2, [sp]
  4c:	add	x1, x1, #0x0
  50:	mov	x0, sp
  54:	mov	w2, #0x70                  	// #112
  58:	str	wzr, [sp, #8]
  5c:	stp	xzr, xzr, [sp, #72]
  60:	str	xzr, [sp, #64]
  64:	bl	0 <inflateInit_>
  68:	mov	w22, w0
  6c:	cbz	w0, 90 <uncompress2+0x90>
  70:	mov	w0, w22
  74:	ldp	x20, x19, [sp, #176]
  78:	ldp	x22, x21, [sp, #160]
  7c:	ldp	x24, x23, [sp, #144]
  80:	ldr	x25, [sp, #128]
  84:	ldp	x29, x30, [sp, #112]
  88:	add	sp, sp, #0xc0
  8c:	ret
  90:	mov	w8, wzr
  94:	str	x21, [sp, #24]
  98:	str	wzr, [sp, #32]
  9c:	mov	w25, #0xffffffff            	// #-1
  a0:	cbnz	w8, b4 <uncompress2+0xb4>
  a4:	cmp	x23, x25
  a8:	csel	x8, x23, x25, cc  // cc = lo, ul, last
  ac:	sub	x23, x23, x8
  b0:	str	w8, [sp, #32]
  b4:	ldr	w8, [sp, #8]
  b8:	cbnz	w8, cc <uncompress2+0xcc>
  bc:	cmp	x24, x25
  c0:	csel	x8, x24, x25, cc  // cc = lo, ul, last
  c4:	sub	x24, x24, x8
  c8:	str	w8, [sp, #8]
  cc:	mov	x0, sp
  d0:	mov	w1, wzr
  d4:	bl	0 <inflate>
  d8:	cbnz	w0, e8 <uncompress2+0xe8>
  dc:	ldr	w8, [sp, #32]
  e0:	cbnz	w8, b4 <uncompress2+0xb4>
  e4:	b	a4 <uncompress2+0xa4>
  e8:	ldr	w8, [sp, #8]
  ec:	ldr	x9, [x20]
  f0:	mov	w22, w0
  f4:	add	x8, x24, x8
  f8:	sub	x8, x9, x8
  fc:	str	x8, [x20]
 100:	ldr	x8, [sp, #40]
 104:	add	x9, x29, #0x1c
 108:	cmp	x21, x9
 10c:	b.eq	118 <uncompress2+0x118>  // b.none
 110:	str	x8, [x19]
 114:	b	128 <uncompress2+0x128>
 118:	cmp	x8, #0x0
 11c:	mov	w8, #0xfffffffb            	// #-5
 120:	ccmp	w22, w8, #0x0, ne  // ne = any
 124:	csinc	x23, x23, xzr, ne  // ne = any
 128:	mov	x0, sp
 12c:	bl	0 <inflateEnd>
 130:	cmp	w22, #0x2
 134:	b.eq	154 <uncompress2+0x154>  // b.none
 138:	cmp	w22, #0x1
 13c:	b.eq	15c <uncompress2+0x15c>  // b.none
 140:	cmn	w22, #0x5
 144:	b.ne	70 <uncompress2+0x70>  // b.any
 148:	ldr	w8, [sp, #32]
 14c:	cmn	x23, x8
 150:	b.eq	70 <uncompress2+0x70>  // b.none
 154:	mov	w22, #0xfffffffd            	// #-3
 158:	b	70 <uncompress2+0x70>
 15c:	mov	w22, wzr
 160:	b	70 <uncompress2+0x70>

0000000000000164 <uncompress>:
 164:	sub	sp, sp, #0x20
 168:	str	x3, [sp, #8]
 16c:	add	x3, sp, #0x8
 170:	stp	x29, x30, [sp, #16]
 174:	add	x29, sp, #0x10
 178:	bl	0 <uncompress2>
 17c:	ldp	x29, x30, [sp, #16]
 180:	add	sp, sp, #0x20
 184:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 18 <gzclose+0x18>
   4:	ldr	w8, [x0, #24]
   8:	mov	w9, #0x1c4f                	// #7247
   c:	cmp	w8, w9
  10:	b.ne	20 <gzclose+0x20>  // b.any
  14:	b	0 <gzclose_r>
  18:	mov	w0, #0xfffffffe            	// #-2
  1c:	ret
  20:	b	0 <gzclose_w>

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzopen>:
   0:	mov	x2, x1
   4:	mov	w1, #0xffffffff            	// #-1
   8:	b	c <gz_open>

000000000000000c <gz_open>:
   c:	stp	x29, x30, [sp, #-80]!
  10:	stp	x26, x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	stp	x20, x19, [sp, #64]
  20:	mov	x29, sp
  24:	cbz	x0, 2b8 <gz_open+0x2ac>
  28:	mov	x21, x0
  2c:	mov	w0, #0xe8                  	// #232
  30:	mov	x22, x2
  34:	mov	w20, w1
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 2bc <gz_open+0x2b0>
  44:	adrp	x8, 0 <gzopen>
  48:	ldr	d0, [x8]
  4c:	movi	d1, #0xffffffff
  50:	str	xzr, [x19, #112]
  54:	str	wzr, [x19, #24]
  58:	str	d1, [x19, #88]
  5c:	str	d0, [x19, #40]
  60:	str	wzr, [x19, #64]
  64:	ldrb	w15, [x22]
  68:	cbz	w15, 2b0 <gz_open+0x2a4>
  6c:	adrp	x12, 0 <gzopen>
  70:	mov	w8, wzr
  74:	mov	w24, wzr
  78:	mov	w25, wzr
  7c:	mov	w26, wzr
  80:	add	x9, x22, #0x1
  84:	mov	w10, #0x4                   	// #4
  88:	mov	w11, #0x3                   	// #3
  8c:	add	x12, x12, #0x0
  90:	mov	w13, #0x1                   	// #1
  94:	mov	w14, #0x2                   	// #2
  98:	sub	w16, w15, #0x30
  9c:	and	w16, w16, #0xff
  a0:	and	w15, w15, #0xff
  a4:	cmp	w16, #0x9
  a8:	b.hi	b8 <gz_open+0xac>  // b.pmore
  ac:	sub	w15, w15, #0x30
  b0:	str	w15, [x19, #88]
  b4:	b	170 <gz_open+0x164>
  b8:	cmp	w15, #0x60
  bc:	b.le	ec <gz_open+0xe0>
  c0:	cmp	w15, #0x71
  c4:	b.gt	110 <gz_open+0x104>
  c8:	sub	w15, w15, #0x61
  cc:	cmp	w15, #0x7
  d0:	b.hi	170 <gz_open+0x164>  // b.pmore
  d4:	adr	x16, e4 <gz_open+0xd8>
  d8:	ldrb	w17, [x12, x15]
  dc:	add	x16, x16, x17, lsl #2
  e0:	br	x16
  e4:	mov	w24, #0x1                   	// #1
  e8:	b	16c <gz_open+0x160>
  ec:	cmp	w15, #0x51
  f0:	b.le	130 <gz_open+0x124>
  f4:	cmp	w15, #0x52
  f8:	b.eq	158 <gz_open+0x14c>  // b.none
  fc:	cmp	w15, #0x54
 100:	b.ne	170 <gz_open+0x164>  // b.any
 104:	mov	w8, #0x1                   	// #1
 108:	str	w8, [x19, #64]
 10c:	b	170 <gz_open+0x164>
 110:	cmp	w15, #0x78
 114:	b.eq	160 <gz_open+0x154>  // b.none
 118:	cmp	w15, #0x77
 11c:	b.eq	168 <gz_open+0x15c>  // b.none
 120:	cmp	w15, #0x72
 124:	b.ne	170 <gz_open+0x164>  // b.any
 128:	mov	w24, #0x1c4f                	// #7247
 12c:	b	16c <gz_open+0x160>
 130:	cmp	w15, #0x46
 134:	b.ne	17c <gz_open+0x170>  // b.any
 138:	str	w10, [x19, #92]
 13c:	b	170 <gz_open+0x164>
 140:	mov	w26, #0x1                   	// #1
 144:	b	170 <gz_open+0x164>
 148:	str	w13, [x19, #92]
 14c:	b	170 <gz_open+0x164>
 150:	str	w14, [x19, #92]
 154:	b	170 <gz_open+0x164>
 158:	str	w11, [x19, #92]
 15c:	b	170 <gz_open+0x164>
 160:	mov	w25, #0x1                   	// #1
 164:	b	170 <gz_open+0x164>
 168:	mov	w24, #0x79b1                	// #31153
 16c:	str	w24, [x19, #24]
 170:	ldrb	w15, [x9], #1
 174:	cbnz	w15, 98 <gz_open+0x8c>
 178:	b	188 <gz_open+0x17c>
 17c:	cmp	w15, #0x2b
 180:	b.eq	2b0 <gz_open+0x2a4>  // b.none
 184:	b	170 <gz_open+0x164>
 188:	mov	w9, #0x1c4f                	// #7247
 18c:	cmp	w24, w9
 190:	b.eq	19c <gz_open+0x190>  // b.none
 194:	cbz	w24, 2b0 <gz_open+0x2a4>
 198:	b	1a8 <gz_open+0x19c>
 19c:	cbnz	w8, 2b0 <gz_open+0x2a4>
 1a0:	mov	w8, #0x1                   	// #1
 1a4:	str	w8, [x19, #64]
 1a8:	mov	x0, x21
 1ac:	bl	0 <strlen>
 1b0:	add	x23, x0, #0x1
 1b4:	mov	x0, x23
 1b8:	bl	0 <malloc>
 1bc:	str	x0, [x19, #32]
 1c0:	cbz	x0, 2b0 <gz_open+0x2a4>
 1c4:	adrp	x2, 0 <gzopen>
 1c8:	add	x2, x2, #0x0
 1cc:	mov	x1, x23
 1d0:	mov	x3, x21
 1d4:	mov	x22, x0
 1d8:	bl	0 <snprintf>
 1dc:	cmp	w26, #0x0
 1e0:	mov	w9, #0x1c4f                	// #7247
 1e4:	cset	w8, ne  // ne = any
 1e8:	cmp	w24, w9
 1ec:	b.ne	1f8 <gz_open+0x1ec>  // b.any
 1f0:	mov	w9, wzr
 1f4:	b	220 <gz_open+0x214>
 1f8:	cmp	w25, #0x0
 1fc:	mov	w9, #0xc1                  	// #193
 200:	mov	w10, #0x41                  	// #65
 204:	mov	w11, #0x79b1                	// #31153
 208:	mov	w12, #0x400                 	// #1024
 20c:	csel	w9, w10, w9, eq  // eq = none
 210:	cmp	w24, w11
 214:	mov	w10, #0x200                 	// #512
 218:	csel	w10, w10, w12, eq  // eq = none
 21c:	orr	w9, w10, w9
 220:	tbnz	w20, #31, 22c <gz_open+0x220>
 224:	str	w20, [x19, #28]
 228:	b	250 <gz_open+0x244>
 22c:	lsl	w8, w8, #19
 230:	orr	w1, w9, w8
 234:	mov	w2, #0x1b6                 	// #438
 238:	mov	x0, x21
 23c:	bl	0 <open>
 240:	mov	w20, w0
 244:	cmn	w0, #0x1
 248:	str	w0, [x19, #28]
 24c:	b.eq	2a8 <gz_open+0x29c>  // b.none
 250:	cmp	w24, #0x1
 254:	b.ne	274 <gz_open+0x268>  // b.any
 258:	mov	w2, #0x2                   	// #2
 25c:	mov	w0, w20
 260:	mov	x1, xzr
 264:	bl	0 <lseek64>
 268:	mov	w8, #0x79b1                	// #31153
 26c:	str	w8, [x19, #24]
 270:	b	29c <gz_open+0x290>
 274:	mov	w8, #0x1c4f                	// #7247
 278:	cmp	w24, w8
 27c:	b.ne	29c <gz_open+0x290>  // b.any
 280:	mov	w2, #0x1                   	// #1
 284:	mov	w0, w20
 288:	mov	x1, xzr
 28c:	bl	0 <lseek64>
 290:	cmn	x0, #0x1
 294:	csel	x8, xzr, x0, eq  // eq = none
 298:	str	x8, [x19, #72]
 29c:	mov	x0, x19
 2a0:	bl	424 <gz_reset>
 2a4:	b	2bc <gz_open+0x2b0>
 2a8:	mov	x0, x22
 2ac:	bl	0 <free>
 2b0:	mov	x0, x19
 2b4:	bl	0 <free>
 2b8:	mov	x19, xzr
 2bc:	mov	x0, x19
 2c0:	ldp	x20, x19, [sp, #64]
 2c4:	ldp	x22, x21, [sp, #48]
 2c8:	ldp	x24, x23, [sp, #32]
 2cc:	ldp	x26, x25, [sp, #16]
 2d0:	ldp	x29, x30, [sp], #80
 2d4:	ret

00000000000002d8 <gzopen64>:
 2d8:	mov	x2, x1
 2dc:	mov	w1, #0xffffffff            	// #-1
 2e0:	b	c <gz_open>

00000000000002e4 <gzdopen>:
 2e4:	stp	x29, x30, [sp, #-48]!
 2e8:	cmn	w0, #0x1
 2ec:	str	x21, [sp, #16]
 2f0:	stp	x20, x19, [sp, #32]
 2f4:	mov	x29, sp
 2f8:	b.eq	34c <gzdopen+0x68>  // b.none
 2fc:	mov	w19, w0
 300:	mov	w0, #0x13                  	// #19
 304:	mov	x20, x1
 308:	bl	0 <malloc>
 30c:	cbz	x0, 34c <gzdopen+0x68>
 310:	adrp	x2, 0 <gzopen>
 314:	add	x2, x2, #0x0
 318:	mov	w1, #0x13                  	// #19
 31c:	mov	w3, w19
 320:	mov	x21, x0
 324:	bl	0 <snprintf>
 328:	mov	x0, x21
 32c:	mov	w1, w19
 330:	mov	x2, x20
 334:	bl	c <gz_open>
 338:	mov	x19, x0
 33c:	mov	x0, x21
 340:	bl	0 <free>
 344:	mov	x0, x19
 348:	b	350 <gzdopen+0x6c>
 34c:	mov	x0, xzr
 350:	ldp	x20, x19, [sp, #32]
 354:	ldr	x21, [sp, #16]
 358:	ldp	x29, x30, [sp], #48
 35c:	ret

0000000000000360 <gzbuffer>:
 360:	cbz	x0, 3b0 <gzbuffer+0x50>
 364:	ldr	w9, [x0, #24]
 368:	mov	w10, #0x79b1                	// #31153
 36c:	mov	x8, x0
 370:	cmp	w9, w10
 374:	b.eq	384 <gzbuffer+0x24>  // b.none
 378:	mov	w10, #0x1c4f                	// #7247
 37c:	cmp	w9, w10
 380:	b.ne	3b0 <gzbuffer+0x50>  // b.any
 384:	cmp	w1, w1, lsl #1
 388:	mov	w0, #0xffffffff            	// #-1
 38c:	b.hi	3ac <gzbuffer+0x4c>  // b.pmore
 390:	ldr	w9, [x8, #40]
 394:	cbnz	w9, 3ac <gzbuffer+0x4c>
 398:	cmp	w1, #0x2
 39c:	mov	w9, #0x2                   	// #2
 3a0:	mov	w0, wzr
 3a4:	csel	w9, w1, w9, hi  // hi = pmore
 3a8:	str	w9, [x8, #44]
 3ac:	ret
 3b0:	mov	w0, #0xffffffff            	// #-1
 3b4:	ret

00000000000003b8 <gzrewind>:
 3b8:	stp	x29, x30, [sp, #-32]!
 3bc:	str	x19, [sp, #16]
 3c0:	mov	x29, sp
 3c4:	cbz	x0, 414 <gzrewind+0x5c>
 3c8:	ldr	w8, [x0, #24]
 3cc:	mov	w9, #0x1c4f                	// #7247
 3d0:	mov	x19, x0
 3d4:	cmp	w8, w9
 3d8:	b.ne	414 <gzrewind+0x5c>  // b.any
 3dc:	ldr	w8, [x19, #108]
 3e0:	cbz	w8, 3ec <gzrewind+0x34>
 3e4:	cmn	w8, #0x5
 3e8:	b.ne	414 <gzrewind+0x5c>  // b.any
 3ec:	ldr	w0, [x19, #28]
 3f0:	ldr	x1, [x19, #72]
 3f4:	mov	w2, wzr
 3f8:	bl	0 <lseek64>
 3fc:	cmn	x0, #0x1
 400:	b.eq	418 <gzrewind+0x60>  // b.none
 404:	mov	x0, x19
 408:	bl	424 <gz_reset>
 40c:	mov	w0, wzr
 410:	b	418 <gzrewind+0x60>
 414:	mov	w0, #0xffffffff            	// #-1
 418:	ldr	x19, [sp, #16]
 41c:	ldp	x29, x30, [sp], #32
 420:	ret

0000000000000424 <gz_reset>:
 424:	stp	x29, x30, [sp, #-32]!
 428:	ldr	w8, [x0, #24]
 42c:	mov	w9, #0x1c4f                	// #7247
 430:	str	x19, [sp, #16]
 434:	mov	x19, x0
 438:	cmp	w8, w9
 43c:	mov	x29, sp
 440:	str	wzr, [x0]
 444:	b.ne	450 <gz_reset+0x2c>  // b.any
 448:	str	xzr, [x19, #80]
 44c:	str	wzr, [x19, #68]
 450:	ldr	x0, [x19, #112]
 454:	str	wzr, [x19, #104]
 458:	cbz	x0, 470 <gz_reset+0x4c>
 45c:	ldr	w8, [x19, #108]
 460:	cmn	w8, #0x4
 464:	b.eq	46c <gz_reset+0x48>  // b.none
 468:	bl	0 <free>
 46c:	str	xzr, [x19, #112]
 470:	str	wzr, [x19, #108]
 474:	str	xzr, [x19, #16]
 478:	str	wzr, [x19, #128]
 47c:	ldr	x19, [sp, #16]
 480:	ldp	x29, x30, [sp], #32
 484:	ret

0000000000000488 <gzseek64>:
 488:	stp	x29, x30, [sp, #-32]!
 48c:	stp	x20, x19, [sp, #16]
 490:	mov	x29, sp
 494:	cbz	x0, 4d4 <gzseek64+0x4c>
 498:	ldr	w8, [x0, #24]
 49c:	mov	w9, #0x79b1                	// #31153
 4a0:	mov	x19, x1
 4a4:	mov	x20, x0
 4a8:	cmp	w8, w9
 4ac:	b.eq	4bc <gzseek64+0x34>  // b.none
 4b0:	mov	w9, #0x1c4f                	// #7247
 4b4:	cmp	w8, w9
 4b8:	b.ne	4d4 <gzseek64+0x4c>  // b.any
 4bc:	ldr	w9, [x20, #108]
 4c0:	cbz	w9, 4cc <gzseek64+0x44>
 4c4:	cmn	w9, #0x5
 4c8:	b.ne	4d4 <gzseek64+0x4c>  // b.any
 4cc:	cmp	w2, #0x1
 4d0:	b.ls	4e4 <gzseek64+0x5c>  // b.plast
 4d4:	mov	x0, #0xffffffffffffffff    	// #-1
 4d8:	ldp	x20, x19, [sp, #16]
 4dc:	ldp	x29, x30, [sp], #32
 4e0:	ret
 4e4:	cbz	w2, 4fc <gzseek64+0x74>
 4e8:	ldr	w9, [x20, #104]
 4ec:	cbz	w9, 504 <gzseek64+0x7c>
 4f0:	ldr	x9, [x20, #96]
 4f4:	add	x19, x9, x19
 4f8:	b	504 <gzseek64+0x7c>
 4fc:	ldr	x9, [x20, #16]
 500:	sub	x19, x19, x9
 504:	mov	w9, #0x1c4f                	// #7247
 508:	cmp	w8, w9
 50c:	str	wzr, [x20, #104]
 510:	b.ne	588 <gzseek64+0x100>  // b.any
 514:	ldr	w9, [x20, #68]
 518:	cmp	w9, #0x1
 51c:	b.ne	588 <gzseek64+0x100>  // b.any
 520:	ldr	x9, [x20, #16]
 524:	cmn	x9, x19
 528:	b.mi	588 <gzseek64+0x100>  // b.first
 52c:	ldr	w8, [x20]
 530:	ldr	w0, [x20, #28]
 534:	mov	w2, #0x1                   	// #1
 538:	sub	x1, x19, x8
 53c:	bl	0 <lseek64>
 540:	cmn	x0, #0x1
 544:	b.eq	4d8 <gzseek64+0x50>  // b.none
 548:	ldr	x0, [x20, #112]
 54c:	str	wzr, [x20]
 550:	str	xzr, [x20, #80]
 554:	str	wzr, [x20, #104]
 558:	cbz	x0, 570 <gzseek64+0xe8>
 55c:	ldr	w8, [x20, #108]
 560:	cmn	w8, #0x4
 564:	b.eq	56c <gzseek64+0xe4>  // b.none
 568:	bl	0 <free>
 56c:	str	xzr, [x20, #112]
 570:	ldr	x8, [x20, #16]
 574:	str	wzr, [x20, #108]
 578:	str	wzr, [x20, #128]
 57c:	add	x0, x8, x19
 580:	str	x0, [x20, #16]
 584:	b	4d8 <gzseek64+0x50>
 588:	tbnz	x19, #63, 5dc <gzseek64+0x154>
 58c:	mov	w9, #0x1c4f                	// #7247
 590:	cmp	w8, w9
 594:	b.ne	5c0 <gzseek64+0x138>  // b.any
 598:	ldr	w8, [x20]
 59c:	ldp	x9, x10, [x20, #8]
 5a0:	cmp	x19, x8
 5a4:	csel	w11, w19, w8, lt  // lt = tstop
 5a8:	sub	w8, w8, w11
 5ac:	add	x9, x9, x11
 5b0:	add	x10, x10, x11
 5b4:	sub	x19, x19, x11
 5b8:	str	w8, [x20]
 5bc:	stp	x9, x10, [x20, #8]
 5c0:	cbz	x19, 5d0 <gzseek64+0x148>
 5c4:	mov	w8, #0x1                   	// #1
 5c8:	str	w8, [x20, #104]
 5cc:	str	x19, [x20, #96]
 5d0:	ldr	x8, [x20, #16]
 5d4:	add	x0, x8, x19
 5d8:	b	4d8 <gzseek64+0x50>
 5dc:	mov	w9, #0x1c4f                	// #7247
 5e0:	cmp	w8, w9
 5e4:	b.ne	4d4 <gzseek64+0x4c>  // b.any
 5e8:	ldr	x8, [x20, #16]
 5ec:	adds	x19, x8, x19
 5f0:	b.mi	4d4 <gzseek64+0x4c>  // b.first
 5f4:	mov	x0, x20
 5f8:	bl	3b8 <gzrewind>
 5fc:	cmn	w0, #0x1
 600:	b.eq	4d4 <gzseek64+0x4c>  // b.none
 604:	ldr	w8, [x20, #24]
 608:	b	58c <gzseek64+0x104>

000000000000060c <gz_error>:
 60c:	stp	x29, x30, [sp, #-48]!
 610:	stp	x22, x21, [sp, #16]
 614:	stp	x20, x19, [sp, #32]
 618:	mov	x20, x0
 61c:	ldr	x0, [x0, #112]
 620:	mov	x19, x2
 624:	mov	w21, w1
 628:	mov	x29, sp
 62c:	cbz	x0, 644 <gz_error+0x38>
 630:	ldr	w8, [x20, #108]
 634:	cmn	w8, #0x4
 638:	b.eq	640 <gz_error+0x34>  // b.none
 63c:	bl	0 <free>
 640:	str	xzr, [x20, #112]
 644:	cmn	w21, #0x5
 648:	b.eq	654 <gz_error+0x48>  // b.none
 64c:	cbz	w21, 654 <gz_error+0x48>
 650:	str	wzr, [x20]
 654:	cmn	w21, #0x4
 658:	str	w21, [x20, #108]
 65c:	b.eq	6e4 <gz_error+0xd8>  // b.none
 660:	cbz	x19, 6e4 <gz_error+0xd8>
 664:	ldr	x21, [x20, #32]
 668:	mov	x0, x21
 66c:	bl	0 <strlen>
 670:	mov	x22, x0
 674:	mov	x0, x19
 678:	bl	0 <strlen>
 67c:	add	x8, x22, x0
 680:	add	x0, x8, #0x3
 684:	bl	0 <malloc>
 688:	str	x0, [x20, #112]
 68c:	cbz	x0, 6dc <gz_error+0xd0>
 690:	mov	x22, x0
 694:	mov	x0, x21
 698:	bl	0 <strlen>
 69c:	mov	x20, x0
 6a0:	mov	x0, x19
 6a4:	bl	0 <strlen>
 6a8:	add	x8, x20, x0
 6ac:	mov	x0, x22
 6b0:	mov	x3, x21
 6b4:	mov	x5, x19
 6b8:	ldp	x20, x19, [sp, #32]
 6bc:	ldp	x22, x21, [sp, #16]
 6c0:	adrp	x2, 0 <gzopen>
 6c4:	adrp	x4, 0 <gzopen>
 6c8:	add	x2, x2, #0x0
 6cc:	add	x1, x8, #0x3
 6d0:	add	x4, x4, #0x0
 6d4:	ldp	x29, x30, [sp], #48
 6d8:	b	0 <snprintf>
 6dc:	mov	w8, #0xfffffffc            	// #-4
 6e0:	str	w8, [x20, #108]
 6e4:	ldp	x20, x19, [sp, #32]
 6e8:	ldp	x22, x21, [sp, #16]
 6ec:	ldp	x29, x30, [sp], #48
 6f0:	ret

00000000000006f4 <gzseek>:
 6f4:	b	488 <gzseek64>

00000000000006f8 <gztell64>:
 6f8:	cbz	x0, 72c <gztell64+0x34>
 6fc:	ldr	w8, [x0, #24]
 700:	mov	w9, #0x79b1                	// #31153
 704:	cmp	w8, w9
 708:	b.eq	718 <gztell64+0x20>  // b.none
 70c:	mov	w9, #0x1c4f                	// #7247
 710:	cmp	w8, w9
 714:	b.ne	72c <gztell64+0x34>  // b.any
 718:	ldr	w9, [x0, #104]
 71c:	ldr	x8, [x0, #16]
 720:	cbz	w9, 734 <gztell64+0x3c>
 724:	ldr	x9, [x0, #96]
 728:	b	738 <gztell64+0x40>
 72c:	mov	x0, #0xffffffffffffffff    	// #-1
 730:	ret
 734:	mov	x9, xzr
 738:	add	x0, x9, x8
 73c:	ret

0000000000000740 <gztell>:
 740:	cbz	x0, 774 <gztell+0x34>
 744:	ldr	w8, [x0, #24]
 748:	mov	w9, #0x79b1                	// #31153
 74c:	cmp	w8, w9
 750:	b.eq	760 <gztell+0x20>  // b.none
 754:	mov	w9, #0x1c4f                	// #7247
 758:	cmp	w8, w9
 75c:	b.ne	774 <gztell+0x34>  // b.any
 760:	ldr	w9, [x0, #104]
 764:	ldr	x8, [x0, #16]
 768:	cbz	w9, 77c <gztell+0x3c>
 76c:	ldr	x9, [x0, #96]
 770:	b	780 <gztell+0x40>
 774:	mov	x0, #0xffffffffffffffff    	// #-1
 778:	ret
 77c:	mov	x9, xzr
 780:	add	x0, x9, x8
 784:	ret

0000000000000788 <gzoffset64>:
 788:	stp	x29, x30, [sp, #-32]!
 78c:	str	x19, [sp, #16]
 790:	mov	x29, sp
 794:	cbz	x0, 7ec <gzoffset64+0x64>
 798:	ldr	w8, [x0, #24]
 79c:	mov	w9, #0x79b1                	// #31153
 7a0:	mov	x19, x0
 7a4:	cmp	w8, w9
 7a8:	b.eq	7b8 <gzoffset64+0x30>  // b.none
 7ac:	mov	w9, #0x1c4f                	// #7247
 7b0:	cmp	w8, w9
 7b4:	b.ne	7ec <gzoffset64+0x64>  // b.any
 7b8:	ldr	w0, [x19, #28]
 7bc:	mov	w2, #0x1                   	// #1
 7c0:	mov	x1, xzr
 7c4:	bl	0 <lseek64>
 7c8:	cmn	x0, #0x1
 7cc:	b.eq	7f0 <gzoffset64+0x68>  // b.none
 7d0:	ldr	w8, [x19, #24]
 7d4:	mov	w9, #0x1c4f                	// #7247
 7d8:	cmp	w8, w9
 7dc:	b.ne	7f0 <gzoffset64+0x68>  // b.any
 7e0:	ldr	w8, [x19, #128]
 7e4:	sub	x0, x0, x8
 7e8:	b	7f0 <gzoffset64+0x68>
 7ec:	mov	x0, #0xffffffffffffffff    	// #-1
 7f0:	ldr	x19, [sp, #16]
 7f4:	ldp	x29, x30, [sp], #32
 7f8:	ret

00000000000007fc <gzoffset>:
 7fc:	b	788 <gzoffset64>

0000000000000800 <gzeof>:
 800:	cbz	x0, 818 <gzeof+0x18>
 804:	ldr	w8, [x0, #24]
 808:	mov	w9, #0x1c4f                	// #7247
 80c:	cmp	w8, w9
 810:	b.ne	81c <gzeof+0x1c>  // b.any
 814:	ldr	w0, [x0, #84]
 818:	ret
 81c:	mov	w0, wzr
 820:	ret

0000000000000824 <gzerror>:
 824:	cbz	x0, 884 <gzerror+0x60>
 828:	ldr	w8, [x0, #24]
 82c:	mov	w9, #0x79b1                	// #31153
 830:	cmp	w8, w9
 834:	b.eq	844 <gzerror+0x20>  // b.none
 838:	mov	w9, #0x1c4f                	// #7247
 83c:	cmp	w8, w9
 840:	b.ne	868 <gzerror+0x44>  // b.any
 844:	cbz	x1, 850 <gzerror+0x2c>
 848:	ldr	w8, [x0, #108]
 84c:	str	w8, [x1]
 850:	ldr	w8, [x0, #108]
 854:	cmn	w8, #0x4
 858:	b.ne	870 <gzerror+0x4c>  // b.any
 85c:	adrp	x0, 0 <gzopen>
 860:	add	x0, x0, #0x0
 864:	ret
 868:	mov	x0, xzr
 86c:	ret
 870:	ldr	x8, [x0, #112]
 874:	adrp	x9, 0 <gzopen>
 878:	add	x9, x9, #0x0
 87c:	cmp	x8, #0x0
 880:	csel	x0, x9, x8, eq  // eq = none
 884:	ret

0000000000000888 <gzclearerr>:
 888:	stp	x29, x30, [sp, #-32]!
 88c:	str	x19, [sp, #16]
 890:	mov	x29, sp
 894:	cbz	x0, 8dc <gzclearerr+0x54>
 898:	ldr	w8, [x0, #24]
 89c:	mov	w9, #0x79b1                	// #31153
 8a0:	mov	x19, x0
 8a4:	cmp	w8, w9
 8a8:	b.eq	8bc <gzclearerr+0x34>  // b.none
 8ac:	mov	w9, #0x1c4f                	// #7247
 8b0:	cmp	w8, w9
 8b4:	b.ne	8dc <gzclearerr+0x54>  // b.any
 8b8:	str	xzr, [x19, #80]
 8bc:	ldr	x0, [x19, #112]
 8c0:	cbz	x0, 8d8 <gzclearerr+0x50>
 8c4:	ldr	w8, [x19, #108]
 8c8:	cmn	w8, #0x4
 8cc:	b.eq	8d4 <gzclearerr+0x4c>  // b.none
 8d0:	bl	0 <free>
 8d4:	str	xzr, [x19, #112]
 8d8:	str	wzr, [x19, #108]
 8dc:	ldr	x19, [sp, #16]
 8e0:	ldp	x29, x30, [sp], #32
 8e4:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzread>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 70 <gzread+0x70>
  10:	ldr	w8, [x0, #24]
  14:	mov	w9, #0x1c4f                	// #7247
  18:	mov	x19, x0
  1c:	cmp	w8, w9
  20:	b.ne	70 <gzread+0x70>  // b.any
  24:	ldr	w8, [x19, #108]
  28:	cbz	w8, 34 <gzread+0x34>
  2c:	cmn	w8, #0x5
  30:	b.ne	70 <gzread+0x70>  // b.any
  34:	tbnz	w2, #31, 5c <gzread+0x5c>
  38:	mov	w2, w2
  3c:	mov	x0, x19
  40:	bl	80 <gz_read>
  44:	cbnz	w0, 74 <gzread+0x74>
  48:	ldr	w8, [x19, #108]
  4c:	cbz	w8, 74 <gzread+0x74>
  50:	cmn	w8, #0x5
  54:	b.eq	74 <gzread+0x74>  // b.none
  58:	b	70 <gzread+0x70>
  5c:	adrp	x2, 0 <gzread>
  60:	add	x2, x2, #0x0
  64:	mov	w1, #0xfffffffe            	// #-2
  68:	mov	x0, x19
  6c:	bl	0 <gz_error>
  70:	mov	w0, #0xffffffff            	// #-1
  74:	ldr	x19, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <gz_read>:
  80:	sub	sp, sp, #0x50
  84:	stp	x29, x30, [sp, #16]
  88:	stp	x24, x23, [sp, #32]
  8c:	stp	x22, x21, [sp, #48]
  90:	stp	x20, x19, [sp, #64]
  94:	add	x29, sp, #0x10
  98:	cbz	x2, 1c8 <gz_read+0x148>
  9c:	ldr	w8, [x0, #104]
  a0:	mov	x20, x2
  a4:	mov	x21, x1
  a8:	mov	x19, x0
  ac:	cbz	w8, c8 <gz_read+0x48>
  b0:	ldr	x1, [x19, #96]
  b4:	mov	x0, x19
  b8:	str	wzr, [x19, #104]
  bc:	bl	438 <gz_skip>
  c0:	cmn	w0, #0x1
  c4:	b.eq	1c8 <gz_read+0x148>  // b.none
  c8:	mov	x22, xzr
  cc:	mov	w24, #0xffffffff            	// #-1
  d0:	cmp	x20, x24
  d4:	csinv	w23, w20, wzr, cc  // cc = lo, ul, last
  d8:	stur	w23, [x29, #-4]
  dc:	ldr	w8, [x19]
  e0:	cbz	w8, 138 <gz_read+0xb8>
  e4:	cmp	w8, w23
  e8:	b.cs	f4 <gz_read+0x74>  // b.hs, b.nlast
  ec:	mov	w23, w8
  f0:	stur	w8, [x29, #-4]
  f4:	ldr	x1, [x19, #8]
  f8:	mov	w2, w23
  fc:	mov	x0, x21
 100:	bl	0 <memcpy>
 104:	ldr	x8, [x19, #8]
 108:	ldr	w9, [x19]
 10c:	add	x8, x8, w23, uxtw
 110:	sub	w9, w9, w23
 114:	str	x8, [x19, #8]
 118:	str	w9, [x19]
 11c:	ldr	x8, [x19, #16]
 120:	sub	x20, x20, w23, uxtw
 124:	add	x21, x21, w23, uxtw
 128:	add	x22, x22, w23, uxtw
 12c:	add	x8, x8, w23, uxtw
 130:	str	x8, [x19, #16]
 134:	b	16c <gz_read+0xec>
 138:	ldr	w8, [x19, #80]
 13c:	cbz	w8, 148 <gz_read+0xc8>
 140:	ldr	w8, [x19, #128]
 144:	cbz	w8, 1e8 <gz_read+0x168>
 148:	ldr	w8, [x19, #68]
 14c:	cbz	w8, 15c <gz_read+0xdc>
 150:	ldr	w9, [x19, #40]
 154:	cmp	w23, w9, lsl #1
 158:	b.cs	174 <gz_read+0xf4>  // b.hs, b.nlast
 15c:	mov	x0, x19
 160:	bl	5fc <gz_fetch>
 164:	cmn	w0, #0x1
 168:	b.eq	1c8 <gz_read+0x148>  // b.none
 16c:	cbnz	x20, d0 <gz_read+0x50>
 170:	b	1cc <gz_read+0x14c>
 174:	cmp	w8, #0x1
 178:	b.ne	1a0 <gz_read+0x120>  // b.any
 17c:	sub	x3, x29, #0x4
 180:	mov	x0, x19
 184:	mov	x1, x21
 188:	mov	w2, w23
 18c:	bl	924 <gz_load>
 190:	cmn	w0, #0x1
 194:	b.eq	1c8 <gz_read+0x148>  // b.none
 198:	ldur	w23, [x29, #-4]
 19c:	b	11c <gz_read+0x9c>
 1a0:	mov	x0, x19
 1a4:	str	w23, [x19, #152]
 1a8:	str	x21, [x19, #144]
 1ac:	bl	9e0 <gz_decomp>
 1b0:	cmn	w0, #0x1
 1b4:	b.eq	1c8 <gz_read+0x148>  // b.none
 1b8:	ldr	w23, [x19]
 1bc:	stur	w23, [x29, #-4]
 1c0:	str	wzr, [x19]
 1c4:	b	11c <gz_read+0x9c>
 1c8:	mov	x22, xzr
 1cc:	mov	x0, x22
 1d0:	ldp	x20, x19, [sp, #64]
 1d4:	ldp	x22, x21, [sp, #48]
 1d8:	ldp	x24, x23, [sp, #32]
 1dc:	ldp	x29, x30, [sp, #16]
 1e0:	add	sp, sp, #0x50
 1e4:	ret
 1e8:	mov	w8, #0x1                   	// #1
 1ec:	str	w8, [x19, #84]
 1f0:	b	1cc <gz_read+0x14c>

00000000000001f4 <gzfread>:
 1f4:	stp	x29, x30, [sp, #-32]!
 1f8:	str	x19, [sp, #16]
 1fc:	mov	x29, sp
 200:	cbz	x3, 270 <gzfread+0x7c>
 204:	ldr	w8, [x3, #24]
 208:	mov	w9, #0x1c4f                	// #7247
 20c:	cmp	w8, w9
 210:	b.ne	270 <gzfread+0x7c>  // b.any
 214:	ldr	w8, [x3, #108]
 218:	mov	x19, x1
 21c:	mov	x1, x0
 220:	cbz	w8, 22c <gzfread+0x38>
 224:	cmn	w8, #0x5
 228:	b.ne	270 <gzfread+0x7c>  // b.any
 22c:	umulh	x8, x19, x2
 230:	cmp	xzr, x8
 234:	cset	w8, ne  // ne = any
 238:	cbz	x19, 258 <gzfread+0x64>
 23c:	cbz	w8, 258 <gzfread+0x64>
 240:	adrp	x2, 0 <gzread>
 244:	add	x2, x2, #0x0
 248:	mov	w1, #0xfffffffe            	// #-2
 24c:	mov	x0, x3
 250:	bl	0 <gz_error>
 254:	b	270 <gzfread+0x7c>
 258:	mul	x2, x19, x2
 25c:	cbz	x2, 270 <gzfread+0x7c>
 260:	mov	x0, x3
 264:	bl	80 <gz_read>
 268:	udiv	x0, x0, x19
 26c:	b	274 <gzfread+0x80>
 270:	mov	x0, xzr
 274:	ldr	x19, [sp, #16]
 278:	ldp	x29, x30, [sp], #32
 27c:	ret

0000000000000280 <gzgetc>:
 280:	sub	sp, sp, #0x20
 284:	stp	x29, x30, [sp, #16]
 288:	add	x29, sp, #0x10
 28c:	cbz	x0, 2d8 <gzgetc+0x58>
 290:	ldr	w8, [x0, #24]
 294:	mov	w9, #0x1c4f                	// #7247
 298:	cmp	w8, w9
 29c:	b.ne	2d8 <gzgetc+0x58>  // b.any
 2a0:	ldr	w8, [x0, #108]
 2a4:	cbz	w8, 2b0 <gzgetc+0x30>
 2a8:	cmn	w8, #0x5
 2ac:	b.ne	2d8 <gzgetc+0x58>  // b.any
 2b0:	ldr	w8, [x0]
 2b4:	cbz	w8, 2e8 <gzgetc+0x68>
 2b8:	ldp	x10, x9, [x0, #8]
 2bc:	sub	w8, w8, #0x1
 2c0:	str	w8, [x0]
 2c4:	add	x8, x9, #0x1
 2c8:	add	x9, x10, #0x1
 2cc:	stp	x9, x8, [x0, #8]
 2d0:	ldrb	w0, [x10]
 2d4:	b	2dc <gzgetc+0x5c>
 2d8:	mov	w0, #0xffffffff            	// #-1
 2dc:	ldp	x29, x30, [sp, #16]
 2e0:	add	sp, sp, #0x20
 2e4:	ret
 2e8:	sub	x1, x29, #0x4
 2ec:	mov	w2, #0x1                   	// #1
 2f0:	bl	80 <gz_read>
 2f4:	ldurb	w8, [x29, #-4]
 2f8:	cmp	w0, #0x1
 2fc:	csinv	w0, w8, wzr, ge  // ge = tcont
 300:	b	2dc <gzgetc+0x5c>

0000000000000304 <gzgetc_>:
 304:	b	280 <gzgetc>

0000000000000308 <gzungetc>:
 308:	stp	x29, x30, [sp, #-32]!
 30c:	stp	x20, x19, [sp, #16]
 310:	mov	x29, sp
 314:	cbz	x1, 39c <gzungetc+0x94>
 318:	ldr	w8, [x1, #24]
 31c:	mov	w9, #0x1c4f                	// #7247
 320:	mov	x19, x1
 324:	cmp	w8, w9
 328:	b.ne	39c <gzungetc+0x94>  // b.any
 32c:	ldr	w8, [x19, #108]
 330:	mov	w20, w0
 334:	cbz	w8, 340 <gzungetc+0x38>
 338:	cmn	w8, #0x5
 33c:	b.ne	39c <gzungetc+0x94>  // b.any
 340:	ldr	w8, [x19, #104]
 344:	cbz	w8, 370 <gzungetc+0x68>
 348:	ldr	x1, [x19, #96]
 34c:	mov	x0, x19
 350:	str	wzr, [x19, #104]
 354:	bl	438 <gz_skip>
 358:	mov	w8, w0
 35c:	mov	w0, #0xffffffff            	// #-1
 360:	tbnz	w20, #31, 3a0 <gzungetc+0x98>
 364:	cmn	w8, #0x1
 368:	b.ne	374 <gzungetc+0x6c>  // b.any
 36c:	b	3a0 <gzungetc+0x98>
 370:	tbnz	w20, #31, 39c <gzungetc+0x94>
 374:	ldr	w9, [x19]
 378:	cbz	w9, 3ac <gzungetc+0xa4>
 37c:	ldr	w10, [x19, #40]
 380:	cmp	w9, w10, lsl #1
 384:	b.ne	3d0 <gzungetc+0xc8>  // b.any
 388:	adrp	x2, 0 <gzread>
 38c:	add	x2, x2, #0x0
 390:	mov	w1, #0xfffffffd            	// #-3
 394:	mov	x0, x19
 398:	bl	0 <gz_error>
 39c:	mov	w0, #0xffffffff            	// #-1
 3a0:	ldp	x20, x19, [sp, #16]
 3a4:	ldp	x29, x30, [sp], #32
 3a8:	ret
 3ac:	ldr	w8, [x19, #40]
 3b0:	ldr	x9, [x19, #56]
 3b4:	mov	w10, #0x1                   	// #1
 3b8:	str	w10, [x19]
 3bc:	lsl	w8, w8, #1
 3c0:	add	x8, x9, x8
 3c4:	sub	x9, x8, #0x1
 3c8:	str	x9, [x19, #8]
 3cc:	b	41c <gzungetc+0x114>
 3d0:	ldr	x8, [x19, #8]
 3d4:	ldr	x11, [x19, #56]
 3d8:	cmp	x8, x11
 3dc:	b.ne	40c <gzungetc+0x104>  // b.any
 3e0:	lsl	w10, w10, #1
 3e4:	add	x10, x8, w10, uxtw
 3e8:	add	x9, x8, x9
 3ec:	mov	x8, x10
 3f0:	ldrb	w10, [x9, #-1]!
 3f4:	strb	w10, [x8, #-1]!
 3f8:	ldr	x10, [x19, #56]
 3fc:	cmp	x9, x10
 400:	b.hi	3f0 <gzungetc+0xe8>  // b.pmore
 404:	ldr	w9, [x19]
 408:	str	x8, [x19, #8]
 40c:	add	w9, w9, #0x1
 410:	sub	x10, x8, #0x1
 414:	str	w9, [x19]
 418:	str	x10, [x19, #8]
 41c:	sturb	w20, [x8, #-1]
 420:	ldr	x8, [x19, #16]
 424:	mov	w0, w20
 428:	str	wzr, [x19, #84]
 42c:	sub	x8, x8, #0x1
 430:	str	x8, [x19, #16]
 434:	b	3a0 <gzungetc+0x98>

0000000000000438 <gz_skip>:
 438:	stp	x29, x30, [sp, #-32]!
 43c:	stp	x20, x19, [sp, #16]
 440:	mov	x29, sp
 444:	cbz	x1, 4a4 <gz_skip+0x6c>
 448:	mov	x19, x1
 44c:	mov	x20, x0
 450:	ldr	w8, [x20]
 454:	cbz	w8, 480 <gz_skip+0x48>
 458:	ldp	x9, x10, [x20, #8]
 45c:	cmp	x19, x8
 460:	csel	w11, w19, w8, lt  // lt = tstop
 464:	sub	w8, w8, w11
 468:	str	w8, [x20]
 46c:	add	x8, x9, x11
 470:	add	x9, x10, x11
 474:	stp	x8, x9, [x20, #8]
 478:	sub	x19, x19, x11
 47c:	b	4a0 <gz_skip+0x68>
 480:	ldr	w8, [x20, #80]
 484:	cbz	w8, 490 <gz_skip+0x58>
 488:	ldr	w8, [x20, #128]
 48c:	cbz	w8, 4a4 <gz_skip+0x6c>
 490:	mov	x0, x20
 494:	bl	5fc <gz_fetch>
 498:	cmn	w0, #0x1
 49c:	b.eq	4a8 <gz_skip+0x70>  // b.none
 4a0:	cbnz	x19, 450 <gz_skip+0x18>
 4a4:	mov	w0, wzr
 4a8:	ldp	x20, x19, [sp, #16]
 4ac:	ldp	x29, x30, [sp], #32
 4b0:	ret

00000000000004b4 <gzgets>:
 4b4:	stp	x29, x30, [sp, #-80]!
 4b8:	stp	x20, x19, [sp, #64]
 4bc:	mov	x20, x0
 4c0:	mov	x0, xzr
 4c4:	str	x25, [sp, #16]
 4c8:	stp	x24, x23, [sp, #32]
 4cc:	stp	x22, x21, [sp, #48]
 4d0:	mov	x29, sp
 4d4:	cbz	x20, 5e4 <gzgets+0x130>
 4d8:	mov	x19, x1
 4dc:	cbz	x1, 5e4 <gzgets+0x130>
 4e0:	mov	w21, w2
 4e4:	cmp	w2, #0x1
 4e8:	b.lt	5e4 <gzgets+0x130>  // b.tstop
 4ec:	ldr	w8, [x20, #24]
 4f0:	mov	w9, #0x1c4f                	// #7247
 4f4:	cmp	w8, w9
 4f8:	b.ne	5e0 <gzgets+0x12c>  // b.any
 4fc:	ldr	w8, [x20, #108]
 500:	cbz	w8, 50c <gzgets+0x58>
 504:	cmn	w8, #0x5
 508:	b.ne	5e0 <gzgets+0x12c>  // b.any
 50c:	ldr	w8, [x20, #104]
 510:	cbz	w8, 52c <gzgets+0x78>
 514:	ldr	x1, [x20, #96]
 518:	mov	x0, x20
 51c:	str	wzr, [x20, #104]
 520:	bl	438 <gz_skip>
 524:	cmn	w0, #0x1
 528:	b.eq	5e0 <gzgets+0x12c>  // b.none
 52c:	subs	w25, w21, #0x1
 530:	b.eq	5e0 <gzgets+0x12c>  // b.none
 534:	ldr	w8, [x20]
 538:	mov	x21, x19
 53c:	cbnz	w8, 558 <gzgets+0xa4>
 540:	mov	x0, x20
 544:	bl	5fc <gz_fetch>
 548:	cmn	w0, #0x1
 54c:	b.eq	5e0 <gzgets+0x12c>  // b.none
 550:	ldr	w8, [x20]
 554:	cbz	w8, 5c4 <gzgets+0x110>
 558:	ldr	x23, [x20, #8]
 55c:	cmp	w8, w25
 560:	csel	w22, w25, w8, hi  // hi = pmore
 564:	mov	w1, #0xa                   	// #10
 568:	mov	x0, x23
 56c:	mov	x2, x22
 570:	bl	0 <memchr>
 574:	mov	x24, x0
 578:	sub	w8, w24, w23
 57c:	cmp	x0, #0x0
 580:	csinc	w22, w22, w8, eq  // eq = none
 584:	mov	x0, x21
 588:	mov	x1, x23
 58c:	mov	x2, x22
 590:	bl	0 <memcpy>
 594:	ldr	w8, [x20]
 598:	ldp	x9, x10, [x20, #8]
 59c:	add	x21, x21, x22
 5a0:	sub	w8, w8, w22
 5a4:	add	x9, x9, x22
 5a8:	add	x10, x10, x22
 5ac:	str	w8, [x20]
 5b0:	stp	x9, x10, [x20, #8]
 5b4:	cbnz	x24, 5cc <gzgets+0x118>
 5b8:	sub	w25, w25, w22
 5bc:	cbnz	w25, 53c <gzgets+0x88>
 5c0:	b	5cc <gzgets+0x118>
 5c4:	mov	w8, #0x1                   	// #1
 5c8:	str	w8, [x20, #84]
 5cc:	cmp	x21, x19
 5d0:	b.eq	5e0 <gzgets+0x12c>  // b.none
 5d4:	mov	x0, x19
 5d8:	strb	wzr, [x21]
 5dc:	b	5e4 <gzgets+0x130>
 5e0:	mov	x0, xzr
 5e4:	ldp	x20, x19, [sp, #64]
 5e8:	ldp	x22, x21, [sp, #48]
 5ec:	ldp	x24, x23, [sp, #32]
 5f0:	ldr	x25, [sp, #16]
 5f4:	ldp	x29, x30, [sp], #80
 5f8:	ret

00000000000005fc <gz_fetch>:
 5fc:	stp	x29, x30, [sp, #-32]!
 600:	str	x19, [sp, #16]
 604:	mov	x19, x0
 608:	mov	x29, sp
 60c:	ldr	w8, [x19, #68]
 610:	cbz	w8, 628 <gz_fetch+0x2c>
 614:	cmp	w8, #0x2
 618:	b.eq	644 <gz_fetch+0x48>  // b.none
 61c:	cmp	w8, #0x1
 620:	b.ne	668 <gz_fetch+0x6c>  // b.any
 624:	b	688 <gz_fetch+0x8c>
 628:	mov	x0, x19
 62c:	bl	70c <gz_look>
 630:	cmn	w0, #0x1
 634:	b.eq	6b4 <gz_fetch+0xb8>  // b.none
 638:	ldr	w8, [x19, #68]
 63c:	cbnz	w8, 668 <gz_fetch+0x6c>
 640:	b	680 <gz_fetch+0x84>
 644:	ldr	w8, [x19, #40]
 648:	ldr	x9, [x19, #56]
 64c:	mov	x0, x19
 650:	lsl	w8, w8, #1
 654:	str	w8, [x19, #152]
 658:	str	x9, [x19, #144]
 65c:	bl	9e0 <gz_decomp>
 660:	cmn	w0, #0x1
 664:	b.eq	6b4 <gz_fetch+0xb8>  // b.none
 668:	ldr	w8, [x19]
 66c:	cbnz	w8, 680 <gz_fetch+0x84>
 670:	ldr	w8, [x19, #80]
 674:	cbz	w8, 60c <gz_fetch+0x10>
 678:	ldr	w8, [x19, #128]
 67c:	cbnz	w8, 60c <gz_fetch+0x10>
 680:	mov	w0, wzr
 684:	b	6b4 <gz_fetch+0xb8>
 688:	ldr	w8, [x19, #40]
 68c:	ldr	x1, [x19, #56]
 690:	mov	x0, x19
 694:	mov	x3, x19
 698:	lsl	w2, w8, #1
 69c:	bl	924 <gz_load>
 6a0:	cmn	w0, #0x1
 6a4:	b.eq	6b4 <gz_fetch+0xb8>  // b.none
 6a8:	ldr	x8, [x19, #56]
 6ac:	mov	w0, wzr
 6b0:	str	x8, [x19, #8]
 6b4:	ldr	x19, [sp, #16]
 6b8:	ldp	x29, x30, [sp], #32
 6bc:	ret

00000000000006c0 <gzdirect>:
 6c0:	cbz	x0, 708 <gzdirect+0x48>
 6c4:	stp	x29, x30, [sp, #-32]!
 6c8:	ldr	w8, [x0, #24]
 6cc:	mov	w9, #0x1c4f                	// #7247
 6d0:	str	x19, [sp, #16]
 6d4:	mov	x19, x0
 6d8:	cmp	w8, w9
 6dc:	mov	x29, sp
 6e0:	b.ne	6fc <gzdirect+0x3c>  // b.any
 6e4:	ldr	w8, [x19, #68]
 6e8:	cbnz	w8, 6fc <gzdirect+0x3c>
 6ec:	ldr	w8, [x19]
 6f0:	cbnz	w8, 6fc <gzdirect+0x3c>
 6f4:	mov	x0, x19
 6f8:	bl	70c <gz_look>
 6fc:	ldr	w0, [x19, #64]
 700:	ldr	x19, [sp, #16]
 704:	ldp	x29, x30, [sp], #32
 708:	ret

000000000000070c <gz_look>:
 70c:	stp	x29, x30, [sp, #-48]!
 710:	stp	x22, x21, [sp, #16]
 714:	stp	x20, x19, [sp, #32]
 718:	ldr	w8, [x0, #40]
 71c:	mov	x19, x0
 720:	add	x20, x0, #0x78
 724:	mov	x29, sp
 728:	cbz	w8, 7c8 <gz_look+0xbc>
 72c:	ldr	w0, [x19, #128]
 730:	cmp	w0, #0x1
 734:	b.hi	758 <gz_look+0x4c>  // b.pmore
 738:	mov	x0, x19
 73c:	bl	b04 <gz_avail>
 740:	cmn	w0, #0x1
 744:	b.eq	874 <gz_look+0x168>  // b.none
 748:	ldr	w0, [x19, #128]
 74c:	cbz	w0, 874 <gz_look+0x168>
 750:	cmp	w0, #0x1
 754:	b.eq	78c <gz_look+0x80>  // b.none
 758:	ldr	x8, [x20]
 75c:	ldrb	w9, [x8]
 760:	cmp	w9, #0x1f
 764:	b.ne	78c <gz_look+0x80>  // b.any
 768:	ldrb	w8, [x8, #1]
 76c:	cmp	w8, #0x8b
 770:	b.ne	78c <gz_look+0x80>  // b.any
 774:	mov	x0, x20
 778:	bl	0 <inflateReset>
 77c:	adrp	x8, 0 <gzread>
 780:	ldr	d0, [x8]
 784:	mov	w0, wzr
 788:	b	7c0 <gz_look+0xb4>
 78c:	ldr	w8, [x19, #64]
 790:	cbz	w8, 860 <gz_look+0x154>
 794:	ldr	x8, [x19, #56]
 798:	ldr	x1, [x19, #120]
 79c:	mov	w2, w0
 7a0:	mov	x0, x8
 7a4:	str	x8, [x19, #8]
 7a8:	bl	0 <memcpy>
 7ac:	ldr	w8, [x19, #128]
 7b0:	mov	w0, wzr
 7b4:	movi	v0.2s, #0x1
 7b8:	str	wzr, [x19, #128]
 7bc:	str	w8, [x19]
 7c0:	str	d0, [x19, #64]
 7c4:	b	874 <gz_look+0x168>
 7c8:	ldr	w21, [x19, #44]
 7cc:	mov	x0, x21
 7d0:	bl	0 <malloc>
 7d4:	mov	x22, x0
 7d8:	str	x0, [x19, #48]
 7dc:	lsl	w0, w21, #1
 7e0:	bl	0 <malloc>
 7e4:	str	x0, [x19, #56]
 7e8:	cbz	x22, 838 <gz_look+0x12c>
 7ec:	cbz	x0, 838 <gz_look+0x12c>
 7f0:	adrp	x2, 0 <gzread>
 7f4:	add	x2, x2, #0x0
 7f8:	mov	w1, #0x1f                  	// #31
 7fc:	mov	w3, #0x70                  	// #112
 800:	mov	x0, x20
 804:	str	w21, [x19, #40]
 808:	str	wzr, [x19, #128]
 80c:	str	xzr, [x19, #120]
 810:	stp	xzr, xzr, [x19, #192]
 814:	str	xzr, [x19, #184]
 818:	bl	0 <inflateInit2_>
 81c:	cbz	w0, 72c <gz_look+0x20>
 820:	ldr	x0, [x19, #56]
 824:	bl	0 <free>
 828:	ldr	x0, [x19, #48]
 82c:	bl	0 <free>
 830:	str	wzr, [x19, #40]
 834:	b	844 <gz_look+0x138>
 838:	bl	0 <free>
 83c:	ldr	x0, [x19, #48]
 840:	bl	0 <free>
 844:	adrp	x2, 0 <gzread>
 848:	add	x2, x2, #0x0
 84c:	mov	w1, #0xfffffffc            	// #-4
 850:	mov	x0, x19
 854:	bl	0 <gz_error>
 858:	mov	w0, #0xffffffff            	// #-1
 85c:	b	874 <gz_look+0x168>
 860:	mov	w8, #0x1                   	// #1
 864:	mov	w0, wzr
 868:	str	wzr, [x19, #128]
 86c:	str	w8, [x19, #80]
 870:	str	wzr, [x19]
 874:	ldp	x20, x19, [sp, #32]
 878:	ldp	x22, x21, [sp, #16]
 87c:	ldp	x29, x30, [sp], #48
 880:	ret

0000000000000884 <gzclose_r>:
 884:	stp	x29, x30, [sp, #-48]!
 888:	str	x21, [sp, #16]
 88c:	stp	x20, x19, [sp, #32]
 890:	mov	x29, sp
 894:	cbz	x0, 910 <gzclose_r+0x8c>
 898:	ldr	w8, [x0, #24]
 89c:	mov	w9, #0x1c4f                	// #7247
 8a0:	mov	x19, x0
 8a4:	cmp	w8, w9
 8a8:	b.ne	910 <gzclose_r+0x8c>  // b.any
 8ac:	ldr	w8, [x19, #40]
 8b0:	cbz	w8, 8cc <gzclose_r+0x48>
 8b4:	add	x0, x19, #0x78
 8b8:	bl	0 <inflateEnd>
 8bc:	ldr	x0, [x19, #56]
 8c0:	bl	0 <free>
 8c4:	ldr	x0, [x19, #48]
 8c8:	bl	0 <free>
 8cc:	ldr	w8, [x19, #108]
 8d0:	mov	x0, x19
 8d4:	mov	w1, wzr
 8d8:	mov	x2, xzr
 8dc:	cmn	w8, #0x5
 8e0:	csel	w21, w8, wzr, eq  // eq = none
 8e4:	bl	0 <gz_error>
 8e8:	ldr	x0, [x19, #32]
 8ec:	bl	0 <free>
 8f0:	ldr	w0, [x19, #28]
 8f4:	bl	0 <close>
 8f8:	mov	w20, w0
 8fc:	mov	x0, x19
 900:	bl	0 <free>
 904:	cmp	w20, #0x0
 908:	csinv	w0, w21, wzr, eq  // eq = none
 90c:	b	914 <gzclose_r+0x90>
 910:	mov	w0, #0xfffffffe            	// #-2
 914:	ldp	x20, x19, [sp, #32]
 918:	ldr	x21, [sp, #16]
 91c:	ldp	x29, x30, [sp], #48
 920:	ret

0000000000000924 <gz_load>:
 924:	stp	x29, x30, [sp, #-64]!
 928:	str	x23, [sp, #16]
 92c:	stp	x22, x21, [sp, #32]
 930:	stp	x20, x19, [sp, #48]
 934:	mov	x20, x3
 938:	mov	w21, w2
 93c:	mov	x22, x1
 940:	mov	x19, x0
 944:	mov	w8, wzr
 948:	mov	w23, #0x40000000            	// #1073741824
 94c:	mov	x29, sp
 950:	str	wzr, [x3]
 954:	sub	w9, w21, w8
 958:	ldr	w0, [x19, #28]
 95c:	lsr	w10, w9, #30
 960:	cmp	w10, #0x0
 964:	csel	w2, w9, w23, eq  // eq = none
 968:	add	x1, x22, w8, uxtw
 96c:	bl	0 <read>
 970:	cmp	w0, #0x1
 974:	b.lt	994 <gz_load+0x70>  // b.tstop
 978:	ldr	w8, [x20]
 97c:	add	w8, w8, w0
 980:	cmp	w8, w21
 984:	str	w8, [x20]
 988:	b.cc	954 <gz_load+0x30>  // b.lo, b.ul, b.last
 98c:	mov	w20, wzr
 990:	b	9c8 <gz_load+0xa4>
 994:	tbnz	w0, #31, 9a8 <gz_load+0x84>
 998:	mov	w20, wzr
 99c:	mov	w8, #0x1                   	// #1
 9a0:	str	w8, [x19, #80]
 9a4:	b	9c8 <gz_load+0xa4>
 9a8:	bl	0 <__errno_location>
 9ac:	ldr	w0, [x0]
 9b0:	bl	0 <strerror>
 9b4:	mov	x2, x0
 9b8:	mov	w1, #0xffffffff            	// #-1
 9bc:	mov	x0, x19
 9c0:	mov	w20, #0xffffffff            	// #-1
 9c4:	bl	0 <gz_error>
 9c8:	mov	w0, w20
 9cc:	ldp	x20, x19, [sp, #48]
 9d0:	ldp	x22, x21, [sp, #32]
 9d4:	ldr	x23, [sp, #16]
 9d8:	ldp	x29, x30, [sp], #64
 9dc:	ret

00000000000009e0 <gz_decomp>:
 9e0:	stp	x29, x30, [sp, #-64]!
 9e4:	stp	x22, x21, [sp, #32]
 9e8:	stp	x20, x19, [sp, #48]
 9ec:	ldr	w22, [x0, #152]
 9f0:	str	x23, [sp, #16]
 9f4:	adrp	x23, 0 <gzread>
 9f8:	mov	x19, x0
 9fc:	mov	w20, wzr
 a00:	add	x21, x0, #0x78
 a04:	add	x23, x23, #0x0
 a08:	mov	x29, sp
 a0c:	ldr	w8, [x19, #128]
 a10:	cbnz	w8, a2c <gz_decomp+0x4c>
 a14:	mov	x0, x19
 a18:	bl	b04 <gz_avail>
 a1c:	cmn	w0, #0x1
 a20:	b.eq	af0 <gz_decomp+0x110>  // b.none
 a24:	ldr	w8, [x19, #128]
 a28:	cbz	w8, a7c <gz_decomp+0x9c>
 a2c:	mov	x0, x21
 a30:	mov	w1, wzr
 a34:	bl	0 <inflate>
 a38:	add	w8, w0, #0x4
 a3c:	mov	w20, w0
 a40:	cmp	w8, #0x6
 a44:	b.hi	a58 <gz_decomp+0x78>  // b.pmore
 a48:	adr	x9, a58 <gz_decomp+0x78>
 a4c:	ldrb	w10, [x23, x8]
 a50:	add	x9, x9, x10, lsl #2
 a54:	br	x9
 a58:	ldr	w8, [x19, #152]
 a5c:	cmp	w20, #0x1
 a60:	b.eq	a94 <gz_decomp+0xb4>  // b.none
 a64:	cbnz	w8, a0c <gz_decomp+0x2c>
 a68:	b	a94 <gz_decomp+0xb4>
 a6c:	adrp	x2, 0 <gzread>
 a70:	add	x2, x2, #0x0
 a74:	mov	w1, #0xfffffffe            	// #-2
 a78:	b	ae4 <gz_decomp+0x104>
 a7c:	adrp	x2, 0 <gzread>
 a80:	add	x2, x2, #0x0
 a84:	mov	w1, #0xfffffffb            	// #-5
 a88:	mov	x0, x19
 a8c:	bl	0 <gz_error>
 a90:	ldr	w8, [x19, #152]
 a94:	ldr	x9, [x19, #144]
 a98:	sub	w8, w22, w8
 a9c:	str	w8, [x19]
 aa0:	cmp	w20, #0x1
 aa4:	sub	x8, x9, x8
 aa8:	mov	w0, wzr
 aac:	str	x8, [x19, #8]
 ab0:	b.ne	af0 <gz_decomp+0x110>  // b.any
 ab4:	str	wzr, [x19, #68]
 ab8:	b	af0 <gz_decomp+0x110>
 abc:	adrp	x2, 0 <gzread>
 ac0:	add	x2, x2, #0x0
 ac4:	mov	w1, #0xfffffffc            	// #-4
 ac8:	b	ae4 <gz_decomp+0x104>
 acc:	ldr	x8, [x19, #168]
 ad0:	adrp	x9, 0 <gzread>
 ad4:	add	x9, x9, #0x0
 ad8:	mov	w1, #0xfffffffd            	// #-3
 adc:	cmp	x8, #0x0
 ae0:	csel	x2, x9, x8, eq  // eq = none
 ae4:	mov	x0, x19
 ae8:	bl	0 <gz_error>
 aec:	mov	w0, #0xffffffff            	// #-1
 af0:	ldp	x20, x19, [sp, #48]
 af4:	ldp	x22, x21, [sp, #32]
 af8:	ldr	x23, [sp, #16]
 afc:	ldp	x29, x30, [sp], #64
 b00:	ret

0000000000000b04 <gz_avail>:
 b04:	stp	x29, x30, [sp, #-32]!
 b08:	ldr	w8, [x0, #108]
 b0c:	str	x19, [sp, #16]
 b10:	mov	x19, x0
 b14:	mov	x29, sp
 b18:	cbz	w8, b24 <gz_avail+0x20>
 b1c:	cmn	w8, #0x5
 b20:	b.ne	b34 <gz_avail+0x30>  // b.any
 b24:	ldr	w8, [x19, #80]
 b28:	cbz	w8, b3c <gz_avail+0x38>
 b2c:	mov	w0, wzr
 b30:	b	ba0 <gz_avail+0x9c>
 b34:	mov	w0, #0xffffffff            	// #-1
 b38:	b	ba0 <gz_avail+0x9c>
 b3c:	ldr	w8, [x19, #128]
 b40:	cbz	w8, b60 <gz_avail+0x5c>
 b44:	ldr	x9, [x19, #48]
 b48:	ldr	x10, [x19, #120]
 b4c:	ldrb	w11, [x10], #1
 b50:	subs	w8, w8, #0x1
 b54:	strb	w11, [x9], #1
 b58:	b.ne	b4c <gz_avail+0x48>  // b.any
 b5c:	ldr	w8, [x19, #128]
 b60:	ldr	x9, [x19, #48]
 b64:	ldr	w10, [x19, #40]
 b68:	add	x3, x29, #0x1c
 b6c:	mov	x0, x19
 b70:	add	x1, x9, w8, uxtw
 b74:	sub	w2, w10, w8
 b78:	bl	924 <gz_load>
 b7c:	cmn	w0, #0x1
 b80:	b.eq	ba0 <gz_avail+0x9c>  // b.none
 b84:	ldr	w8, [x29, #28]
 b88:	ldr	w9, [x19, #128]
 b8c:	ldr	x10, [x19, #48]
 b90:	mov	w0, wzr
 b94:	add	w8, w9, w8
 b98:	str	w8, [x19, #128]
 b9c:	str	x10, [x19, #120]
 ba0:	ldr	x19, [sp, #16]
 ba4:	ldp	x29, x30, [sp], #32
 ba8:	ret

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzwrite>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x0, 28 <gzwrite+0x28>
   c:	ldr	w8, [x0, #24]
  10:	mov	w9, #0x79b1                	// #31153
  14:	cmp	w8, w9
  18:	b.ne	24 <gzwrite+0x24>  // b.any
  1c:	ldr	w8, [x0, #108]
  20:	cbz	w8, 30 <gzwrite+0x30>
  24:	mov	w0, wzr
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	tbnz	w2, #31, 40 <gzwrite+0x40>
  34:	mov	w2, w2
  38:	bl	54 <gz_write>
  3c:	b	28 <gzwrite+0x28>
  40:	adrp	x2, 0 <gzwrite>
  44:	add	x2, x2, #0x0
  48:	mov	w1, #0xfffffffd            	// #-3
  4c:	bl	0 <gz_error>
  50:	b	24 <gzwrite+0x24>

0000000000000054 <gz_write>:
  54:	stp	x29, x30, [sp, #-64]!
  58:	stp	x20, x19, [sp, #48]
  5c:	mov	x19, x2
  60:	str	x23, [sp, #16]
  64:	stp	x22, x21, [sp, #32]
  68:	mov	x29, sp
  6c:	cbz	x2, 1b0 <gz_write+0x15c>
  70:	ldr	w8, [x0, #40]
  74:	mov	x21, x1
  78:	mov	x20, x0
  7c:	cbnz	w8, 90 <gz_write+0x3c>
  80:	mov	x0, x20
  84:	bl	5bc <gz_init>
  88:	cmn	w0, #0x1
  8c:	b.eq	1ac <gz_write+0x158>  // b.none
  90:	ldr	w8, [x20, #104]
  94:	cbz	w8, b0 <gz_write+0x5c>
  98:	ldr	x1, [x20, #96]
  9c:	mov	x0, x20
  a0:	str	wzr, [x20, #104]
  a4:	bl	334 <gz_zero>
  a8:	cmn	w0, #0x1
  ac:	b.eq	1ac <gz_write+0x158>  // b.none
  b0:	ldr	w8, [x20, #40]
  b4:	cmp	x8, x19
  b8:	b.ls	144 <gz_write+0xf0>  // b.plast
  bc:	mov	x23, x19
  c0:	ldr	w8, [x20, #128]
  c4:	cbz	w8, d4 <gz_write+0x80>
  c8:	ldr	x10, [x20, #120]
  cc:	ldr	x9, [x20, #48]
  d0:	b	e0 <gz_write+0x8c>
  d4:	ldr	x9, [x20, #48]
  d8:	mov	x10, x9
  dc:	str	x9, [x20, #120]
  e0:	ldr	w11, [x20, #40]
  e4:	add	x8, x10, x8
  e8:	sub	x8, x8, x9
  ec:	add	x0, x9, w8, uxtw
  f0:	sub	w10, w11, w8
  f4:	cmp	x23, x10
  f8:	csel	w22, w23, w10, cc  // cc = lo, ul, last
  fc:	mov	x1, x21
 100:	mov	x2, x22
 104:	bl	0 <memcpy>
 108:	ldr	w8, [x20, #128]
 10c:	ldr	x9, [x20, #16]
 110:	subs	x23, x23, x22
 114:	add	w8, w22, w8
 118:	add	x9, x9, x22
 11c:	str	w8, [x20, #128]
 120:	str	x9, [x20, #16]
 124:	b.eq	1b0 <gz_write+0x15c>  // b.none
 128:	mov	x0, x20
 12c:	mov	w1, wzr
 130:	add	x21, x21, x22
 134:	bl	6a8 <gz_comp>
 138:	cmn	w0, #0x1
 13c:	b.ne	c0 <gz_write+0x6c>  // b.any
 140:	b	1ac <gz_write+0x158>
 144:	ldr	w8, [x20, #128]
 148:	cbz	w8, 160 <gz_write+0x10c>
 14c:	mov	x0, x20
 150:	mov	w1, wzr
 154:	bl	6a8 <gz_comp>
 158:	cmn	w0, #0x1
 15c:	b.eq	1ac <gz_write+0x158>  // b.none
 160:	str	x21, [x20, #120]
 164:	mov	w21, #0xffffffff            	// #-1
 168:	mov	x22, x19
 16c:	ldr	x8, [x20, #16]
 170:	cmp	x22, x21
 174:	csel	x23, x22, x21, cc  // cc = lo, ul, last
 178:	mov	x0, x20
 17c:	add	x8, x8, x23
 180:	mov	w1, wzr
 184:	str	w23, [x20, #128]
 188:	str	x8, [x20, #16]
 18c:	bl	6a8 <gz_comp>
 190:	cmn	w0, #0x1
 194:	csel	x8, xzr, x23, eq  // eq = none
 198:	cmn	w0, #0x1
 19c:	b.eq	1ac <gz_write+0x158>  // b.none
 1a0:	sub	x22, x22, x8
 1a4:	cbnz	x22, 16c <gz_write+0x118>
 1a8:	b	1b0 <gz_write+0x15c>
 1ac:	mov	x19, xzr
 1b0:	mov	x0, x19
 1b4:	ldp	x20, x19, [sp, #48]
 1b8:	ldp	x22, x21, [sp, #32]
 1bc:	ldr	x23, [sp, #16]
 1c0:	ldp	x29, x30, [sp], #64
 1c4:	ret

00000000000001c8 <gzfwrite>:
 1c8:	stp	x29, x30, [sp, #-32]!
 1cc:	str	x19, [sp, #16]
 1d0:	mov	x29, sp
 1d4:	cbz	x3, 1f0 <gzfwrite+0x28>
 1d8:	ldr	w8, [x3, #24]
 1dc:	mov	w9, #0x79b1                	// #31153
 1e0:	cmp	w8, w9
 1e4:	b.ne	1f0 <gzfwrite+0x28>  // b.any
 1e8:	ldr	w8, [x3, #108]
 1ec:	cbz	w8, 200 <gzfwrite+0x38>
 1f0:	mov	x0, xzr
 1f4:	ldr	x19, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #32
 1fc:	ret
 200:	mov	x19, x1
 204:	umulh	x8, x19, x2
 208:	cmp	xzr, x8
 20c:	mov	x1, x0
 210:	cset	w8, ne  // ne = any
 214:	cbz	x19, 234 <gzfwrite+0x6c>
 218:	cbz	w8, 234 <gzfwrite+0x6c>
 21c:	adrp	x2, 0 <gzwrite>
 220:	add	x2, x2, #0x0
 224:	mov	w1, #0xfffffffe            	// #-2
 228:	mov	x0, x3
 22c:	bl	0 <gz_error>
 230:	b	1f0 <gzfwrite+0x28>
 234:	mul	x2, x19, x2
 238:	cbz	x2, 1f0 <gzfwrite+0x28>
 23c:	mov	x0, x3
 240:	bl	54 <gz_write>
 244:	udiv	x0, x0, x19
 248:	b	1f4 <gzfwrite+0x2c>

000000000000024c <gzputc>:
 24c:	sub	sp, sp, #0x30
 250:	stp	x29, x30, [sp, #16]
 254:	stp	x20, x19, [sp, #32]
 258:	add	x29, sp, #0x10
 25c:	cbz	x0, 27c <gzputc+0x30>
 260:	ldr	w8, [x0, #24]
 264:	mov	w9, #0x79b1                	// #31153
 268:	mov	x20, x0
 26c:	cmp	w8, w9
 270:	b.ne	27c <gzputc+0x30>  // b.any
 274:	ldr	w8, [x20, #108]
 278:	cbz	w8, 290 <gzputc+0x44>
 27c:	mov	w0, #0xffffffff            	// #-1
 280:	ldp	x20, x19, [sp, #32]
 284:	ldp	x29, x30, [sp, #16]
 288:	add	sp, sp, #0x30
 28c:	ret
 290:	ldr	w8, [x20, #104]
 294:	mov	w19, w1
 298:	cbz	w8, 2b4 <gzputc+0x68>
 29c:	ldr	x1, [x20, #96]
 2a0:	mov	x0, x20
 2a4:	str	wzr, [x20, #104]
 2a8:	bl	334 <gz_zero>
 2ac:	cmn	w0, #0x1
 2b0:	b.eq	280 <gzputc+0x34>  // b.none
 2b4:	ldr	w8, [x20, #40]
 2b8:	cbz	w8, 310 <gzputc+0xc4>
 2bc:	ldr	w9, [x20, #128]
 2c0:	cbz	w9, 2d0 <gzputc+0x84>
 2c4:	ldr	x11, [x20, #120]
 2c8:	ldr	x10, [x20, #48]
 2cc:	b	2dc <gzputc+0x90>
 2d0:	ldr	x10, [x20, #48]
 2d4:	mov	x11, x10
 2d8:	str	x10, [x20, #120]
 2dc:	add	x9, x11, x9
 2e0:	sub	x9, x9, x10
 2e4:	cmp	w8, w9
 2e8:	b.ls	310 <gzputc+0xc4>  // b.plast
 2ec:	strb	w19, [x10, w9, uxtw]
 2f0:	ldr	w8, [x20, #128]
 2f4:	ldr	x9, [x20, #16]
 2f8:	and	w0, w19, #0xff
 2fc:	add	w8, w8, #0x1
 300:	add	x9, x9, #0x1
 304:	str	w8, [x20, #128]
 308:	str	x9, [x20, #16]
 30c:	b	280 <gzputc+0x34>
 310:	sub	x1, x29, #0x4
 314:	mov	w2, #0x1                   	// #1
 318:	mov	x0, x20
 31c:	sturb	w19, [x29, #-4]
 320:	bl	54 <gz_write>
 324:	and	w8, w19, #0xff
 328:	cmp	x0, #0x1
 32c:	csinv	w0, w8, wzr, eq  // eq = none
 330:	b	280 <gzputc+0x34>

0000000000000334 <gz_zero>:
 334:	stp	x29, x30, [sp, #-48]!
 338:	stp	x22, x21, [sp, #16]
 33c:	stp	x20, x19, [sp, #32]
 340:	ldr	w8, [x0, #128]
 344:	mov	x19, x0
 348:	mov	x20, x1
 34c:	mov	x29, sp
 350:	cbz	w8, 368 <gz_zero+0x34>
 354:	mov	x0, x19
 358:	mov	w1, wzr
 35c:	bl	6a8 <gz_comp>
 360:	cmn	w0, #0x1
 364:	b.eq	3d8 <gz_zero+0xa4>  // b.none
 368:	cbz	x20, 3d4 <gz_zero+0xa0>
 36c:	mov	w8, wzr
 370:	ldr	w9, [x19, #40]
 374:	cmp	x20, x9
 378:	csel	w22, w20, w9, lt  // lt = tstop
 37c:	tbz	w8, #0, 388 <gz_zero+0x54>
 380:	mov	w21, w22
 384:	b	39c <gz_zero+0x68>
 388:	ldr	x0, [x19, #48]
 38c:	mov	w21, w22
 390:	mov	w1, wzr
 394:	mov	x2, x21
 398:	bl	0 <memset>
 39c:	ldr	x8, [x19, #48]
 3a0:	ldr	x9, [x19, #16]
 3a4:	mov	x0, x19
 3a8:	mov	w1, wzr
 3ac:	str	x8, [x19, #120]
 3b0:	add	x8, x9, x21
 3b4:	str	w22, [x19, #128]
 3b8:	str	x8, [x19, #16]
 3bc:	bl	6a8 <gz_comp>
 3c0:	cmn	w0, #0x1
 3c4:	b.eq	3d8 <gz_zero+0xa4>  // b.none
 3c8:	sub	x20, x20, x21
 3cc:	mov	w8, #0x1                   	// #1
 3d0:	cbnz	x20, 370 <gz_zero+0x3c>
 3d4:	mov	w0, wzr
 3d8:	ldp	x20, x19, [sp, #32]
 3dc:	ldp	x22, x21, [sp, #16]
 3e0:	ldp	x29, x30, [sp], #48
 3e4:	ret

00000000000003e8 <gzputs>:
 3e8:	stp	x29, x30, [sp, #-48]!
 3ec:	str	x21, [sp, #16]
 3f0:	stp	x20, x19, [sp, #32]
 3f4:	mov	x29, sp
 3f8:	cbz	x0, 418 <gzputs+0x30>
 3fc:	ldr	w8, [x0, #24]
 400:	mov	w9, #0x79b1                	// #31153
 404:	mov	x20, x0
 408:	cmp	w8, w9
 40c:	b.ne	418 <gzputs+0x30>  // b.any
 410:	ldr	w8, [x20, #108]
 414:	cbz	w8, 42c <gzputs+0x44>
 418:	mov	w0, #0xffffffff            	// #-1
 41c:	ldp	x20, x19, [sp, #32]
 420:	ldr	x21, [sp, #16]
 424:	ldp	x29, x30, [sp], #48
 428:	ret
 42c:	mov	x0, x1
 430:	mov	x19, x1
 434:	bl	0 <strlen>
 438:	mov	x21, x0
 43c:	mov	x0, x20
 440:	mov	x1, x19
 444:	mov	x2, x21
 448:	bl	54 <gz_write>
 44c:	cmp	w0, #0x0
 450:	ccmp	x21, #0x0, #0x4, eq  // eq = none
 454:	csinv	w0, w0, wzr, eq  // eq = none
 458:	b	41c <gzputs+0x34>

000000000000045c <gzvprintf>:
 45c:	sub	sp, sp, #0x50
 460:	stp	x29, x30, [sp, #32]
 464:	stp	x22, x21, [sp, #48]
 468:	stp	x20, x19, [sp, #64]
 46c:	add	x29, sp, #0x20
 470:	cbz	x0, 490 <gzvprintf+0x34>
 474:	ldr	w8, [x0, #24]
 478:	mov	w9, #0x79b1                	// #31153
 47c:	mov	x19, x0
 480:	cmp	w8, w9
 484:	b.ne	490 <gzvprintf+0x34>  // b.any
 488:	ldr	w8, [x19, #108]
 48c:	cbz	w8, 4ac <gzvprintf+0x50>
 490:	mov	w20, #0xfffffffe            	// #-2
 494:	mov	w0, w20
 498:	ldp	x20, x19, [sp, #64]
 49c:	ldp	x22, x21, [sp, #48]
 4a0:	ldp	x29, x30, [sp, #32]
 4a4:	add	sp, sp, #0x50
 4a8:	ret
 4ac:	ldr	w8, [x19, #40]
 4b0:	mov	x21, x2
 4b4:	mov	x20, x1
 4b8:	cbnz	w8, 4cc <gzvprintf+0x70>
 4bc:	mov	x0, x19
 4c0:	bl	5bc <gz_init>
 4c4:	cmn	w0, #0x1
 4c8:	b.eq	5b4 <gzvprintf+0x158>  // b.none
 4cc:	ldr	w8, [x19, #104]
 4d0:	cbz	w8, 4ec <gzvprintf+0x90>
 4d4:	ldr	x1, [x19, #96]
 4d8:	mov	x0, x19
 4dc:	str	wzr, [x19, #104]
 4e0:	bl	334 <gz_zero>
 4e4:	cmn	w0, #0x1
 4e8:	b.eq	5b4 <gzvprintf+0x158>  // b.none
 4ec:	ldr	w8, [x19, #128]
 4f0:	cbz	w8, 4fc <gzvprintf+0xa0>
 4f4:	ldr	x9, [x19, #120]
 4f8:	b	504 <gzvprintf+0xa8>
 4fc:	ldr	x9, [x19, #48]
 500:	str	x9, [x19, #120]
 504:	ldr	w10, [x19, #40]
 508:	add	x22, x9, x8
 50c:	mov	x3, sp
 510:	mov	x0, x22
 514:	sub	w8, w10, #0x1
 518:	strb	wzr, [x22, w8, uxtw]
 51c:	ldp	q1, q0, [x21]
 520:	ldr	w1, [x19, #40]
 524:	mov	x2, x20
 528:	stp	q1, q0, [sp]
 52c:	bl	0 <vsnprintf>
 530:	mov	w20, w0
 534:	cbz	w0, 494 <gzvprintf+0x38>
 538:	ldr	w8, [x19, #40]
 53c:	cmp	w20, w8
 540:	b.cs	550 <gzvprintf+0xf4>  // b.hs, b.nlast
 544:	sub	w9, w8, #0x1
 548:	ldrb	w9, [x22, w9, uxtw]
 54c:	cbz	w9, 558 <gzvprintf+0xfc>
 550:	mov	w20, wzr
 554:	b	494 <gzvprintf+0x38>
 558:	ldr	w9, [x19, #128]
 55c:	ldr	x10, [x19, #16]
 560:	add	w9, w9, w20
 564:	add	x10, x10, w20, sxtw
 568:	subs	w21, w9, w8
 56c:	str	w9, [x19, #128]
 570:	str	x10, [x19, #16]
 574:	b.cc	494 <gzvprintf+0x38>  // b.lo, b.ul, b.last
 578:	mov	x0, x19
 57c:	mov	w1, wzr
 580:	str	w8, [x19, #128]
 584:	bl	6a8 <gz_comp>
 588:	cmn	w0, #0x1
 58c:	b.eq	5b4 <gzvprintf+0x158>  // b.none
 590:	ldr	x0, [x19, #48]
 594:	ldr	w8, [x19, #40]
 598:	mov	w2, w21
 59c:	add	x1, x0, x8
 5a0:	bl	0 <memcpy>
 5a4:	ldr	x8, [x19, #48]
 5a8:	str	w21, [x19, #128]
 5ac:	str	x8, [x19, #120]
 5b0:	b	494 <gzvprintf+0x38>
 5b4:	ldr	w20, [x19, #108]
 5b8:	b	494 <gzvprintf+0x38>

00000000000005bc <gz_init>:
 5bc:	stp	x29, x30, [sp, #-48]!
 5c0:	stp	x20, x19, [sp, #32]
 5c4:	str	x21, [sp, #16]
 5c8:	ldr	w21, [x0, #44]
 5cc:	mov	x19, x0
 5d0:	mov	x29, sp
 5d4:	lsl	w0, w21, #1
 5d8:	bl	0 <malloc>
 5dc:	str	x0, [x19, #48]
 5e0:	cbz	x0, 654 <gz_init+0x98>
 5e4:	ldr	w8, [x19, #64]
 5e8:	cbz	w8, 5f8 <gz_init+0x3c>
 5ec:	mov	w0, wzr
 5f0:	str	w21, [x19, #40]
 5f4:	b	66c <gz_init+0xb0>
 5f8:	mov	x20, x0
 5fc:	mov	x0, x21
 600:	bl	0 <malloc>
 604:	str	x0, [x19, #56]
 608:	cbz	x0, 64c <gz_init+0x90>
 60c:	ldp	w1, w5, [x19, #88]
 610:	adrp	x6, 0 <gzwrite>
 614:	add	x0, x19, #0x78
 618:	add	x6, x6, #0x0
 61c:	mov	w2, #0x8                   	// #8
 620:	mov	w3, #0x1f                  	// #31
 624:	mov	w4, #0x8                   	// #8
 628:	mov	w7, #0x70                  	// #112
 62c:	stp	xzr, xzr, [x19, #184]
 630:	str	xzr, [x19, #200]
 634:	bl	0 <deflateInit2_>
 638:	cbz	w0, 67c <gz_init+0xc0>
 63c:	ldr	x0, [x19, #56]
 640:	bl	0 <free>
 644:	ldr	x0, [x19, #48]
 648:	b	650 <gz_init+0x94>
 64c:	mov	x0, x20
 650:	bl	0 <free>
 654:	adrp	x2, 0 <gzwrite>
 658:	add	x2, x2, #0x0
 65c:	mov	w1, #0xfffffffc            	// #-4
 660:	mov	x0, x19
 664:	bl	0 <gz_error>
 668:	mov	w0, #0xffffffff            	// #-1
 66c:	ldp	x20, x19, [sp, #32]
 670:	ldr	x21, [sp, #16]
 674:	ldp	x29, x30, [sp], #48
 678:	ret
 67c:	ldr	w9, [x19, #64]
 680:	ldr	w8, [x19, #44]
 684:	mov	w0, wzr
 688:	str	xzr, [x19, #120]
 68c:	str	w8, [x19, #40]
 690:	cbnz	w9, 66c <gz_init+0xb0>
 694:	ldr	x9, [x19, #56]
 698:	str	w8, [x19, #152]
 69c:	str	x9, [x19, #144]
 6a0:	str	x9, [x19, #8]
 6a4:	b	66c <gz_init+0xb0>

00000000000006a8 <gz_comp>:
 6a8:	stp	x29, x30, [sp, #-64]!
 6ac:	stp	x22, x21, [sp, #32]
 6b0:	stp	x20, x19, [sp, #48]
 6b4:	ldr	w8, [x0, #40]
 6b8:	mov	x19, x0
 6bc:	mov	w20, w1
 6c0:	str	x23, [sp, #16]
 6c4:	mov	x29, sp
 6c8:	cbnz	w8, 6dc <gz_comp+0x34>
 6cc:	mov	x0, x19
 6d0:	bl	5bc <gz_init>
 6d4:	cmn	w0, #0x1
 6d8:	b.eq	830 <gz_comp+0x188>  // b.none
 6dc:	ldr	w8, [x19, #64]
 6e0:	cbz	w8, 730 <gz_comp+0x88>
 6e4:	ldr	w8, [x19, #128]
 6e8:	cbz	w8, 728 <gz_comp+0x80>
 6ec:	ldr	x1, [x19, #120]
 6f0:	mov	w20, #0x40000000            	// #1073741824
 6f4:	ldr	w0, [x19, #28]
 6f8:	lsr	w9, w8, #30
 6fc:	cmp	w9, #0x0
 700:	csel	w2, w8, w20, eq  // eq = none
 704:	bl	0 <write>
 708:	tbnz	w0, #31, 7f8 <gz_comp+0x150>
 70c:	ldr	w8, [x19, #128]
 710:	ldr	x9, [x19, #120]
 714:	subs	w8, w8, w0
 718:	add	x1, x9, w0, sxtw
 71c:	str	w8, [x19, #128]
 720:	str	x1, [x19, #120]
 724:	b.ne	6f4 <gz_comp+0x4c>  // b.any
 728:	mov	w20, wzr
 72c:	b	834 <gz_comp+0x18c>
 730:	ldr	w23, [x19, #152]
 734:	mov	w0, wzr
 738:	add	x21, x19, #0x78
 73c:	mov	w22, #0x40000000            	// #1073741824
 740:	cbz	w23, 760 <gz_comp+0xb8>
 744:	cmp	w20, #0x4
 748:	cset	w8, ne  // ne = any
 74c:	cmp	w0, #0x1
 750:	cset	w9, eq  // eq = none
 754:	cbz	w20, 7c0 <gz_comp+0x118>
 758:	orr	w8, w8, w9
 75c:	cbz	w8, 7c0 <gz_comp+0x118>
 760:	ldr	x8, [x19, #144]
 764:	ldr	x1, [x19, #8]
 768:	cmp	x8, x1
 76c:	b.ls	7a8 <gz_comp+0x100>  // b.plast
 770:	sub	x8, x8, x1
 774:	ldr	w0, [x19, #28]
 778:	cmp	x8, x22
 77c:	csel	x8, x8, x22, lt  // lt = tstop
 780:	and	x2, x8, #0xffffffff
 784:	bl	0 <write>
 788:	tbnz	w0, #31, 7f8 <gz_comp+0x150>
 78c:	ldr	x9, [x19, #8]
 790:	ldr	x8, [x19, #144]
 794:	add	x1, x9, w0, sxtw
 798:	cmp	x8, x1
 79c:	str	x1, [x19, #8]
 7a0:	b.hi	770 <gz_comp+0xc8>  // b.pmore
 7a4:	ldr	w23, [x19, #152]
 7a8:	cbnz	w23, 7c0 <gz_comp+0x118>
 7ac:	ldr	w23, [x19, #40]
 7b0:	ldr	x8, [x19, #56]
 7b4:	str	w23, [x19, #152]
 7b8:	str	x8, [x19, #144]
 7bc:	str	x8, [x19, #8]
 7c0:	mov	x0, x21
 7c4:	mov	w1, w20
 7c8:	bl	0 <deflate>
 7cc:	cmn	w0, #0x2
 7d0:	b.eq	81c <gz_comp+0x174>  // b.none
 7d4:	ldr	w8, [x19, #152]
 7d8:	cmp	w23, w8
 7dc:	mov	w23, w8
 7e0:	b.ne	740 <gz_comp+0x98>  // b.any
 7e4:	cmp	w20, #0x4
 7e8:	b.ne	728 <gz_comp+0x80>  // b.any
 7ec:	mov	x0, x21
 7f0:	bl	0 <deflateReset>
 7f4:	b	728 <gz_comp+0x80>
 7f8:	bl	0 <__errno_location>
 7fc:	ldr	w0, [x0]
 800:	bl	0 <strerror>
 804:	mov	x2, x0
 808:	mov	w1, #0xffffffff            	// #-1
 80c:	mov	x0, x19
 810:	mov	w20, #0xffffffff            	// #-1
 814:	bl	0 <gz_error>
 818:	b	834 <gz_comp+0x18c>
 81c:	adrp	x2, 0 <gzwrite>
 820:	add	x2, x2, #0x0
 824:	mov	w1, #0xfffffffe            	// #-2
 828:	mov	x0, x19
 82c:	bl	0 <gz_error>
 830:	mov	w20, #0xffffffff            	// #-1
 834:	mov	w0, w20
 838:	ldp	x20, x19, [sp, #48]
 83c:	ldp	x22, x21, [sp, #32]
 840:	ldr	x23, [sp, #16]
 844:	ldp	x29, x30, [sp], #64
 848:	ret

000000000000084c <gzprintf>:
 84c:	sub	sp, sp, #0x100
 850:	stp	x29, x30, [sp, #240]
 854:	add	x29, sp, #0xf0
 858:	mov	x8, #0xffffffffffffffd0    	// #-48
 85c:	mov	x9, sp
 860:	sub	x10, x29, #0x70
 864:	movk	x8, #0xff80, lsl #32
 868:	add	x11, x29, #0x10
 86c:	add	x9, x9, #0x80
 870:	add	x10, x10, #0x30
 874:	stp	x9, x8, [x29, #-16]
 878:	stp	x11, x10, [x29, #-32]
 87c:	stp	x2, x3, [x29, #-112]
 880:	stp	x4, x5, [x29, #-96]
 884:	stp	x6, x7, [x29, #-80]
 888:	stp	q1, q2, [sp, #16]
 88c:	str	q0, [sp]
 890:	ldp	q0, q1, [x29, #-32]
 894:	sub	x2, x29, #0x40
 898:	stp	q3, q4, [sp, #48]
 89c:	stp	q5, q6, [sp, #80]
 8a0:	str	q7, [sp, #112]
 8a4:	stp	q0, q1, [x29, #-64]
 8a8:	bl	45c <gzvprintf>
 8ac:	ldp	x29, x30, [sp, #240]
 8b0:	add	sp, sp, #0x100
 8b4:	ret

00000000000008b8 <gzflush>:
 8b8:	stp	x29, x30, [sp, #-32]!
 8bc:	stp	x20, x19, [sp, #16]
 8c0:	mov	x29, sp
 8c4:	cbz	x0, 928 <gzflush+0x70>
 8c8:	ldr	w8, [x0, #24]
 8cc:	mov	w9, #0x79b1                	// #31153
 8d0:	mov	x19, x0
 8d4:	cmp	w8, w9
 8d8:	b.ne	928 <gzflush+0x70>  // b.any
 8dc:	mov	w20, w1
 8e0:	cmp	w1, #0x4
 8e4:	mov	w0, #0xfffffffe            	// #-2
 8e8:	b.hi	92c <gzflush+0x74>  // b.pmore
 8ec:	ldr	w8, [x19, #108]
 8f0:	cbnz	w8, 92c <gzflush+0x74>
 8f4:	ldr	w8, [x19, #104]
 8f8:	cbz	w8, 914 <gzflush+0x5c>
 8fc:	ldr	x1, [x19, #96]
 900:	mov	x0, x19
 904:	str	wzr, [x19, #104]
 908:	bl	334 <gz_zero>
 90c:	cmn	w0, #0x1
 910:	b.eq	920 <gzflush+0x68>  // b.none
 914:	mov	x0, x19
 918:	mov	w1, w20
 91c:	bl	6a8 <gz_comp>
 920:	ldr	w0, [x19, #108]
 924:	b	92c <gzflush+0x74>
 928:	mov	w0, #0xfffffffe            	// #-2
 92c:	ldp	x20, x19, [sp, #16]
 930:	ldp	x29, x30, [sp], #32
 934:	ret

0000000000000938 <gzsetparams>:
 938:	stp	x29, x30, [sp, #-48]!
 93c:	str	x21, [sp, #16]
 940:	stp	x20, x19, [sp, #32]
 944:	mov	x29, sp
 948:	cbz	x0, 968 <gzsetparams+0x30>
 94c:	ldr	w8, [x0, #24]
 950:	mov	w9, #0x79b1                	// #31153
 954:	mov	x19, x0
 958:	cmp	w8, w9
 95c:	b.ne	968 <gzsetparams+0x30>  // b.any
 960:	ldr	w8, [x19, #108]
 964:	cbz	w8, 97c <gzsetparams+0x44>
 968:	mov	w0, #0xfffffffe            	// #-2
 96c:	ldp	x20, x19, [sp, #32]
 970:	ldr	x21, [sp, #16]
 974:	ldp	x29, x30, [sp], #48
 978:	ret
 97c:	ldr	w8, [x19, #88]
 980:	mov	w20, w2
 984:	mov	w21, w1
 988:	cmp	w8, w1
 98c:	b.ne	9a4 <gzsetparams+0x6c>  // b.any
 990:	ldr	w8, [x19, #92]
 994:	cmp	w8, w20
 998:	b.ne	9a4 <gzsetparams+0x6c>  // b.any
 99c:	mov	w0, wzr
 9a0:	b	96c <gzsetparams+0x34>
 9a4:	ldr	w8, [x19, #104]
 9a8:	cbz	w8, 9c4 <gzsetparams+0x8c>
 9ac:	ldr	x1, [x19, #96]
 9b0:	mov	x0, x19
 9b4:	str	wzr, [x19, #104]
 9b8:	bl	334 <gz_zero>
 9bc:	cmn	w0, #0x1
 9c0:	b.eq	a04 <gzsetparams+0xcc>  // b.none
 9c4:	ldr	w8, [x19, #40]
 9c8:	cbz	w8, 9f8 <gzsetparams+0xc0>
 9cc:	ldr	w8, [x19, #128]
 9d0:	cbz	w8, 9e8 <gzsetparams+0xb0>
 9d4:	mov	w1, #0x5                   	// #5
 9d8:	mov	x0, x19
 9dc:	bl	6a8 <gz_comp>
 9e0:	cmn	w0, #0x1
 9e4:	b.eq	a04 <gzsetparams+0xcc>  // b.none
 9e8:	add	x0, x19, #0x78
 9ec:	mov	w1, w21
 9f0:	mov	w2, w20
 9f4:	bl	0 <deflateParams>
 9f8:	mov	w0, wzr
 9fc:	stp	w21, w20, [x19, #88]
 a00:	b	96c <gzsetparams+0x34>
 a04:	ldr	w0, [x19, #108]
 a08:	b	96c <gzsetparams+0x34>

0000000000000a0c <gzclose_w>:
 a0c:	stp	x29, x30, [sp, #-32]!
 a10:	stp	x20, x19, [sp, #16]
 a14:	mov	x29, sp
 a18:	cbz	x0, a5c <gzclose_w+0x50>
 a1c:	ldr	w8, [x0, #24]
 a20:	mov	w9, #0x79b1                	// #31153
 a24:	mov	x19, x0
 a28:	cmp	w8, w9
 a2c:	b.ne	a5c <gzclose_w+0x50>  // b.any
 a30:	ldr	w8, [x19, #104]
 a34:	cbz	w8, a64 <gzclose_w+0x58>
 a38:	ldr	x1, [x19, #96]
 a3c:	mov	x0, x19
 a40:	str	wzr, [x19, #104]
 a44:	bl	334 <gz_zero>
 a48:	cmn	w0, #0x1
 a4c:	mov	w20, wzr
 a50:	b.ne	a68 <gzclose_w+0x5c>  // b.any
 a54:	ldr	w20, [x19, #108]
 a58:	b	a68 <gzclose_w+0x5c>
 a5c:	mov	w20, #0xfffffffe            	// #-2
 a60:	b	ad8 <gzclose_w+0xcc>
 a64:	mov	w20, wzr
 a68:	mov	w1, #0x4                   	// #4
 a6c:	mov	x0, x19
 a70:	bl	6a8 <gz_comp>
 a74:	cmn	w0, #0x1
 a78:	b.ne	a80 <gzclose_w+0x74>  // b.any
 a7c:	ldr	w20, [x19, #108]
 a80:	ldr	w8, [x19, #40]
 a84:	cbz	w8, aa8 <gzclose_w+0x9c>
 a88:	ldr	w8, [x19, #64]
 a8c:	cbnz	w8, aa0 <gzclose_w+0x94>
 a90:	add	x0, x19, #0x78
 a94:	bl	0 <deflateEnd>
 a98:	ldr	x0, [x19, #56]
 a9c:	bl	0 <free>
 aa0:	ldr	x0, [x19, #48]
 aa4:	bl	0 <free>
 aa8:	mov	x0, x19
 aac:	mov	w1, wzr
 ab0:	mov	x2, xzr
 ab4:	bl	0 <gz_error>
 ab8:	ldr	x0, [x19, #32]
 abc:	bl	0 <free>
 ac0:	ldr	w0, [x19, #28]
 ac4:	bl	0 <close>
 ac8:	cmn	w0, #0x1
 acc:	mov	x0, x19
 ad0:	csinv	w20, w20, wzr, ne  // ne = any
 ad4:	bl	0 <free>
 ad8:	mov	w0, w20
 adc:	ldp	x20, x19, [sp, #16]
 ae0:	ldp	x29, x30, [sp], #32
 ae4:	ret
