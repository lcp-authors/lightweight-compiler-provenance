
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//v4l_id_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004008d0 <_init>:
  4008d0:	stp	x29, x30, [sp, #-16]!
  4008d4:	mov	x29, sp
  4008d8:	bl	400a20 <call_weak_fn>
  4008dc:	ldp	x29, x30, [sp], #16
  4008e0:	ret

Disassembly of section .plt:

00000000004008f0 <.plt>:
  4008f0:	stp	x16, x30, [sp, #-16]!
  4008f4:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  4008f8:	ldr	x17, [x16, #3976]
  4008fc:	add	x16, x16, #0xf88
  400900:	br	x17
  400904:	nop
  400908:	nop
  40090c:	nop

0000000000400910 <__libc_start_main@plt>:
  400910:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400914:	ldr	x17, [x16, #3984]
  400918:	add	x16, x16, #0xf90
  40091c:	br	x17

0000000000400920 <__gmon_start__@plt>:
  400920:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400924:	ldr	x17, [x16, #3992]
  400928:	add	x16, x16, #0xf98
  40092c:	br	x17

0000000000400930 <putchar@plt>:
  400930:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400934:	ldr	x17, [x16, #4000]
  400938:	add	x16, x16, #0xfa0
  40093c:	br	x17

0000000000400940 <safe_close@plt>:
  400940:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400944:	ldr	x17, [x16, #4008]
  400948:	add	x16, x16, #0xfa8
  40094c:	br	x17

0000000000400950 <getopt_long@plt>:
  400950:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400954:	ldr	x17, [x16, #4016]
  400958:	add	x16, x16, #0xfb0
  40095c:	br	x17

0000000000400960 <log_assert_failed_unreachable_realm@plt>:
  400960:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400964:	ldr	x17, [x16, #4024]
  400968:	add	x16, x16, #0xfb8
  40096c:	br	x17

0000000000400970 <abort@plt>:
  400970:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400974:	ldr	x17, [x16, #4032]
  400978:	add	x16, x16, #0xfc0
  40097c:	br	x17

0000000000400980 <__stack_chk_fail@plt>:
  400980:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400984:	ldr	x17, [x16, #4040]
  400988:	add	x16, x16, #0xfc8
  40098c:	br	x17

0000000000400990 <ioctl@plt>:
  400990:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  400994:	ldr	x17, [x16, #4048]
  400998:	add	x16, x16, #0xfd0
  40099c:	br	x17

00000000004009a0 <puts@plt>:
  4009a0:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  4009a4:	ldr	x17, [x16, #4056]
  4009a8:	add	x16, x16, #0xfd8
  4009ac:	br	x17

00000000004009b0 <printf@plt>:
  4009b0:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  4009b4:	ldr	x17, [x16, #4064]
  4009b8:	add	x16, x16, #0xfe0
  4009bc:	br	x17

00000000004009c0 <open64@plt>:
  4009c0:	adrp	x16, 411000 <__FRAME_END__+0xfdf8>
  4009c4:	ldr	x17, [x16, #4072]
  4009c8:	add	x16, x16, #0xfe8
  4009cc:	br	x17

Disassembly of section .text:

00000000004009d0 <_start>:
  4009d0:	mov	x29, #0x0                   	// #0
  4009d4:	mov	x30, #0x0                   	// #0
  4009d8:	mov	x5, x0
  4009dc:	ldr	x1, [sp]
  4009e0:	add	x2, sp, #0x8
  4009e4:	mov	x6, sp
  4009e8:	movz	x0, #0x0, lsl #48
  4009ec:	movk	x0, #0x0, lsl #32
  4009f0:	movk	x0, #0x40, lsl #16
  4009f4:	movk	x0, #0xbbc
  4009f8:	movz	x3, #0x0, lsl #48
  4009fc:	movk	x3, #0x0, lsl #32
  400a00:	movk	x3, #0x40, lsl #16
  400a04:	movk	x3, #0xe68
  400a08:	movz	x4, #0x0, lsl #48
  400a0c:	movk	x4, #0x0, lsl #32
  400a10:	movk	x4, #0x40, lsl #16
  400a14:	movk	x4, #0xee8
  400a18:	bl	400910 <__libc_start_main@plt>
  400a1c:	bl	400970 <abort@plt>

0000000000400a20 <call_weak_fn>:
  400a20:	adrp	x0, 411000 <__FRAME_END__+0xfdf8>
  400a24:	ldr	x0, [x0, #4088]
  400a28:	cbz	x0, 400a30 <call_weak_fn+0x10>
  400a2c:	b	400920 <__gmon_start__@plt>
  400a30:	ret

0000000000400a34 <deregister_tm_clones>:
  400a34:	stp	x29, x30, [sp, #-32]!
  400a38:	mov	x29, sp
  400a3c:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400a40:	add	x0, x0, #0x0
  400a44:	str	x0, [sp, #24]
  400a48:	ldr	x0, [sp, #24]
  400a4c:	str	x0, [sp, #24]
  400a50:	ldr	x1, [sp, #24]
  400a54:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400a58:	add	x0, x0, #0x0
  400a5c:	cmp	x1, x0
  400a60:	b.eq	400a9c <deregister_tm_clones+0x68>  // b.none
  400a64:	adrp	x0, 400000 <_init-0x8d0>
  400a68:	add	x0, x0, #0xf00
  400a6c:	ldr	x0, [x0]
  400a70:	str	x0, [sp, #16]
  400a74:	ldr	x0, [sp, #16]
  400a78:	str	x0, [sp, #16]
  400a7c:	ldr	x0, [sp, #16]
  400a80:	cmp	x0, #0x0
  400a84:	b.eq	400aa0 <deregister_tm_clones+0x6c>  // b.none
  400a88:	ldr	x1, [sp, #16]
  400a8c:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400a90:	add	x0, x0, #0x0
  400a94:	blr	x1
  400a98:	b	400aa0 <deregister_tm_clones+0x6c>
  400a9c:	nop
  400aa0:	ldp	x29, x30, [sp], #32
  400aa4:	ret

0000000000400aa8 <register_tm_clones>:
  400aa8:	stp	x29, x30, [sp, #-48]!
  400aac:	mov	x29, sp
  400ab0:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400ab4:	add	x0, x0, #0x0
  400ab8:	str	x0, [sp, #40]
  400abc:	ldr	x0, [sp, #40]
  400ac0:	str	x0, [sp, #40]
  400ac4:	ldr	x1, [sp, #40]
  400ac8:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400acc:	add	x0, x0, #0x0
  400ad0:	sub	x0, x1, x0
  400ad4:	asr	x0, x0, #3
  400ad8:	lsr	x1, x0, #63
  400adc:	add	x0, x1, x0
  400ae0:	asr	x0, x0, #1
  400ae4:	str	x0, [sp, #32]
  400ae8:	ldr	x0, [sp, #32]
  400aec:	cmp	x0, #0x0
  400af0:	b.eq	400b30 <register_tm_clones+0x88>  // b.none
  400af4:	adrp	x0, 400000 <_init-0x8d0>
  400af8:	add	x0, x0, #0xf08
  400afc:	ldr	x0, [x0]
  400b00:	str	x0, [sp, #24]
  400b04:	ldr	x0, [sp, #24]
  400b08:	str	x0, [sp, #24]
  400b0c:	ldr	x0, [sp, #24]
  400b10:	cmp	x0, #0x0
  400b14:	b.eq	400b34 <register_tm_clones+0x8c>  // b.none
  400b18:	ldr	x2, [sp, #24]
  400b1c:	ldr	x1, [sp, #32]
  400b20:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400b24:	add	x0, x0, #0x0
  400b28:	blr	x2
  400b2c:	b	400b34 <register_tm_clones+0x8c>
  400b30:	nop
  400b34:	ldp	x29, x30, [sp], #48
  400b38:	ret

0000000000400b3c <__do_global_dtors_aux>:
  400b3c:	stp	x29, x30, [sp, #-16]!
  400b40:	mov	x29, sp
  400b44:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400b48:	add	x0, x0, #0xc
  400b4c:	ldrb	w0, [x0]
  400b50:	and	x0, x0, #0xff
  400b54:	cmp	x0, #0x0
  400b58:	b.ne	400b74 <__do_global_dtors_aux+0x38>  // b.any
  400b5c:	bl	400a34 <deregister_tm_clones>
  400b60:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400b64:	add	x0, x0, #0xc
  400b68:	mov	w1, #0x1                   	// #1
  400b6c:	strb	w1, [x0]
  400b70:	b	400b78 <__do_global_dtors_aux+0x3c>
  400b74:	nop
  400b78:	ldp	x29, x30, [sp], #16
  400b7c:	ret

0000000000400b80 <frame_dummy>:
  400b80:	stp	x29, x30, [sp, #-16]!
  400b84:	mov	x29, sp
  400b88:	bl	400aa8 <register_tm_clones>
  400b8c:	nop
  400b90:	ldp	x29, x30, [sp], #16
  400b94:	ret

0000000000400b98 <closep>:
  400b98:	stp	x29, x30, [sp, #-32]!
  400b9c:	mov	x29, sp
  400ba0:	str	x0, [sp, #24]
  400ba4:	ldr	x0, [sp, #24]
  400ba8:	ldr	w0, [x0]
  400bac:	bl	400940 <safe_close@plt>
  400bb0:	nop
  400bb4:	ldp	x29, x30, [sp], #32
  400bb8:	ret

0000000000400bbc <main>:
  400bbc:	stp	x29, x30, [sp, #-192]!
  400bc0:	mov	x29, sp
  400bc4:	str	x19, [sp, #16]
  400bc8:	str	w0, [sp, #44]
  400bcc:	str	x1, [sp, #32]
  400bd0:	adrp	x0, 411000 <__FRAME_END__+0xfdf8>
  400bd4:	add	x0, x0, #0xd40
  400bd8:	ldr	x1, [x0]
  400bdc:	str	x1, [sp, #184]
  400be0:	mov	x1, #0x0                   	// #0
  400be4:	mov	w0, #0xffffffff            	// #-1
  400be8:	str	w0, [sp, #60]
  400bec:	nop
  400bf0:	mov	x4, #0x0                   	// #0
  400bf4:	adrp	x0, 401000 <_fini+0x114>
  400bf8:	add	x3, x0, #0x50
  400bfc:	adrp	x0, 400000 <_init-0x8d0>
  400c00:	add	x2, x0, #0xfa8
  400c04:	ldr	x1, [sp, #32]
  400c08:	ldr	w0, [sp, #44]
  400c0c:	bl	400950 <getopt_long@plt>
  400c10:	str	w0, [sp, #68]
  400c14:	ldr	w0, [sp, #68]
  400c18:	cmp	w0, #0x0
  400c1c:	b.lt	400c8c <main+0xd0>  // b.tstop
  400c20:	ldr	w0, [sp, #68]
  400c24:	cmp	w0, #0x3f
  400c28:	b.eq	400c5c <main+0xa0>  // b.none
  400c2c:	ldr	w0, [sp, #68]
  400c30:	cmp	w0, #0x68
  400c34:	b.ne	400c64 <main+0xa8>  // b.any
  400c38:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400c3c:	add	x0, x0, #0x0
  400c40:	ldr	x0, [x0]
  400c44:	mov	x1, x0
  400c48:	adrp	x0, 400000 <_init-0x8d0>
  400c4c:	add	x0, x0, #0xf10
  400c50:	bl	4009b0 <printf@plt>
  400c54:	mov	w19, #0x0                   	// #0
  400c58:	b	400e2c <main+0x270>
  400c5c:	mov	w19, #0xffffffea            	// #-22
  400c60:	b	400e2c <main+0x270>
  400c64:	adrp	x0, 400000 <_init-0x8d0>
  400c68:	add	x1, x0, #0xf73
  400c6c:	adrp	x0, 401000 <_fini+0x114>
  400c70:	add	x4, x0, #0x48
  400c74:	mov	w3, #0x37                  	// #55
  400c78:	mov	x2, x1
  400c7c:	adrp	x0, 400000 <_init-0x8d0>
  400c80:	add	x1, x0, #0xf90
  400c84:	mov	w0, #0x1                   	// #1
  400c88:	bl	400960 <log_assert_failed_unreachable_realm@plt>
  400c8c:	adrp	x0, 412000 <__progname@@GLIBC_2.17>
  400c90:	add	x0, x0, #0x8
  400c94:	ldr	w0, [x0]
  400c98:	sxtw	x0, w0
  400c9c:	lsl	x0, x0, #3
  400ca0:	ldr	x1, [sp, #32]
  400ca4:	add	x0, x1, x0
  400ca8:	ldr	x0, [x0]
  400cac:	str	x0, [sp, #72]
  400cb0:	ldr	x0, [sp, #72]
  400cb4:	cmp	x0, #0x0
  400cb8:	b.ne	400cc4 <main+0x108>  // b.any
  400cbc:	mov	w19, #0x2                   	// #2
  400cc0:	b	400e2c <main+0x270>
  400cc4:	mov	w1, #0x0                   	// #0
  400cc8:	ldr	x0, [sp, #72]
  400ccc:	bl	4009c0 <open64@plt>
  400cd0:	str	w0, [sp, #60]
  400cd4:	ldr	w0, [sp, #60]
  400cd8:	cmp	w0, #0x0
  400cdc:	b.ge	400ce8 <main+0x12c>  // b.tcont
  400ce0:	mov	w19, #0x3                   	// #3
  400ce4:	b	400e2c <main+0x270>
  400ce8:	ldr	w0, [sp, #60]
  400cec:	add	x1, sp, #0x50
  400cf0:	mov	x2, x1
  400cf4:	mov	x1, #0x5600                	// #22016
  400cf8:	movk	x1, #0x8068, lsl #16
  400cfc:	bl	400990 <ioctl@plt>
  400d00:	cmp	w0, #0x0
  400d04:	b.ne	400e28 <main+0x26c>  // b.any
  400d08:	adrp	x0, 400000 <_init-0x8d0>
  400d0c:	add	x0, x0, #0xfb0
  400d10:	bl	4009a0 <puts@plt>
  400d14:	add	x0, sp, #0x50
  400d18:	add	x0, x0, #0x10
  400d1c:	mov	x1, x0
  400d20:	adrp	x0, 400000 <_init-0x8d0>
  400d24:	add	x0, x0, #0xfc8
  400d28:	bl	4009b0 <printf@plt>
  400d2c:	adrp	x0, 400000 <_init-0x8d0>
  400d30:	add	x0, x0, #0xfe0
  400d34:	bl	4009b0 <printf@plt>
  400d38:	ldr	w0, [sp, #164]
  400d3c:	cmp	w0, #0x0
  400d40:	b.ge	400d50 <main+0x194>  // b.tcont
  400d44:	ldr	w0, [sp, #168]
  400d48:	str	w0, [sp, #64]
  400d4c:	b	400d58 <main+0x19c>
  400d50:	ldr	w0, [sp, #164]
  400d54:	str	w0, [sp, #64]
  400d58:	ldr	w0, [sp, #64]
  400d5c:	and	w0, w0, #0x1
  400d60:	cmp	w0, #0x0
  400d64:	b.gt	400d78 <main+0x1bc>
  400d68:	ldr	w0, [sp, #64]
  400d6c:	and	w0, w0, #0x1000
  400d70:	cmp	w0, #0x0
  400d74:	b.le	400d84 <main+0x1c8>
  400d78:	adrp	x0, 400000 <_init-0x8d0>
  400d7c:	add	x0, x0, #0xff8
  400d80:	bl	4009b0 <printf@plt>
  400d84:	ldr	w0, [sp, #64]
  400d88:	and	w0, w0, #0x2
  400d8c:	cmp	w0, #0x0
  400d90:	b.gt	400da4 <main+0x1e8>
  400d94:	ldr	w0, [sp, #64]
  400d98:	and	w0, w0, #0x2000
  400d9c:	cmp	w0, #0x0
  400da0:	b.le	400db0 <main+0x1f4>
  400da4:	adrp	x0, 401000 <_fini+0x114>
  400da8:	add	x0, x0, #0x8
  400dac:	bl	4009b0 <printf@plt>
  400db0:	ldr	w0, [sp, #64]
  400db4:	and	w0, w0, #0x4
  400db8:	cmp	w0, #0x0
  400dbc:	b.le	400dcc <main+0x210>
  400dc0:	adrp	x0, 401000 <_fini+0x114>
  400dc4:	add	x0, x0, #0x18
  400dc8:	bl	4009b0 <printf@plt>
  400dcc:	ldr	w0, [sp, #64]
  400dd0:	and	w0, w0, #0x20000
  400dd4:	cmp	w0, #0x0
  400dd8:	b.le	400de8 <main+0x22c>
  400ddc:	adrp	x0, 401000 <_fini+0x114>
  400de0:	add	x0, x0, #0x28
  400de4:	bl	4009b0 <printf@plt>
  400de8:	ldr	w0, [sp, #64]
  400dec:	and	w0, w0, #0x10000
  400df0:	cmp	w0, #0x0
  400df4:	b.le	400e04 <main+0x248>
  400df8:	adrp	x0, 401000 <_fini+0x114>
  400dfc:	add	x0, x0, #0x30
  400e00:	bl	4009b0 <printf@plt>
  400e04:	ldr	w0, [sp, #64]
  400e08:	and	w0, w0, #0x40000
  400e0c:	cmp	w0, #0x0
  400e10:	b.le	400e20 <main+0x264>
  400e14:	adrp	x0, 401000 <_fini+0x114>
  400e18:	add	x0, x0, #0x38
  400e1c:	bl	4009b0 <printf@plt>
  400e20:	mov	w0, #0xa                   	// #10
  400e24:	bl	400930 <putchar@plt>
  400e28:	mov	w19, #0x0                   	// #0
  400e2c:	add	x0, sp, #0x3c
  400e30:	bl	400b98 <closep>
  400e34:	mov	w1, w19
  400e38:	adrp	x0, 411000 <__FRAME_END__+0xfdf8>
  400e3c:	add	x0, x0, #0xd40
  400e40:	ldr	x2, [sp, #184]
  400e44:	ldr	x0, [x0]
  400e48:	eor	x0, x2, x0
  400e4c:	cmp	x0, #0x0
  400e50:	b.eq	400e58 <main+0x29c>  // b.none
  400e54:	bl	400980 <__stack_chk_fail@plt>
  400e58:	mov	w0, w1
  400e5c:	ldr	x19, [sp, #16]
  400e60:	ldp	x29, x30, [sp], #192
  400e64:	ret

0000000000400e68 <__libc_csu_init>:
  400e68:	stp	x29, x30, [sp, #-64]!
  400e6c:	mov	x29, sp
  400e70:	stp	x19, x20, [sp, #16]
  400e74:	adrp	x20, 411000 <__FRAME_END__+0xfdf8>
  400e78:	add	x20, x20, #0xd38
  400e7c:	stp	x21, x22, [sp, #32]
  400e80:	adrp	x21, 411000 <__FRAME_END__+0xfdf8>
  400e84:	add	x21, x21, #0xd30
  400e88:	sub	x20, x20, x21
  400e8c:	mov	w22, w0
  400e90:	stp	x23, x24, [sp, #48]
  400e94:	mov	x23, x1
  400e98:	mov	x24, x2
  400e9c:	bl	4008d0 <_init>
  400ea0:	cmp	xzr, x20, asr #3
  400ea4:	b.eq	400ed0 <__libc_csu_init+0x68>  // b.none
  400ea8:	asr	x20, x20, #3
  400eac:	mov	x19, #0x0                   	// #0
  400eb0:	ldr	x3, [x21, x19, lsl #3]
  400eb4:	mov	x2, x24
  400eb8:	add	x19, x19, #0x1
  400ebc:	mov	x1, x23
  400ec0:	mov	w0, w22
  400ec4:	blr	x3
  400ec8:	cmp	x20, x19
  400ecc:	b.ne	400eb0 <__libc_csu_init+0x48>  // b.any
  400ed0:	ldp	x19, x20, [sp, #16]
  400ed4:	ldp	x21, x22, [sp, #32]
  400ed8:	ldp	x23, x24, [sp, #48]
  400edc:	ldp	x29, x30, [sp], #64
  400ee0:	ret
  400ee4:	nop

0000000000400ee8 <__libc_csu_fini>:
  400ee8:	ret

Disassembly of section .fini:

0000000000400eec <_fini>:
  400eec:	stp	x29, x30, [sp, #-16]!
  400ef0:	mov	x29, sp
  400ef4:	ldp	x29, x30, [sp], #16
  400ef8:	ret
