
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_rfc2268.mod_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_mod_init-0x478>:
   0:	ldrb	w3, [x2, #1]
   4:	ldrb	w6, [x2]
   8:	mov	w11, w6
   c:	bfi	w11, w3, #8, #24
  10:	ldrb	w4, [x2, #3]
  14:	ldrb	w3, [x2, #2]
  18:	bfi	w3, w4, #8, #24
  1c:	ldrb	w5, [x2, #5]
  20:	ldrb	w4, [x2, #4]
  24:	mov	w12, w4
  28:	bfi	w12, w5, #8, #24
  2c:	ldrb	w4, [x2, #7]
  30:	ldrb	w2, [x2, #6]
  34:	mov	w7, w2
  38:	bfi	w7, w4, #8, #24
  3c:	mov	x8, x0
  40:	mov	w9, #0x0                   	// #0
  44:	b	58 <grub_mod_init-0x420>
  48:	add	w9, w9, #0x1
  4c:	add	x8, x8, #0x8
  50:	cmp	w9, #0x10
  54:	b.eq	154 <grub_mod_init-0x324>  // b.none
  58:	sxth	w14, w7
  5c:	bic	w6, w3, w14
  60:	add	w6, w11, w6
  64:	and	w2, w12, w7
  68:	ldrh	w5, [x8]
  6c:	add	w2, w2, w5
  70:	add	w6, w2, w6, uxth
  74:	ubfiz	w5, w6, #1, #16
  78:	ubfx	x6, x6, #15, #1
  7c:	orr	w5, w5, w6
  80:	sxth	w13, w5
  84:	and	w11, w5, #0xffff
  88:	ldrh	w6, [x8, #2]
  8c:	add	w3, w3, w6
  90:	bic	w6, w12, w13
  94:	and	w2, w5, w7
  98:	add	w6, w6, w2
  9c:	add	w3, w6, w3, uxth
  a0:	ubfiz	w6, w3, #2, #16
  a4:	ubfx	x3, x3, #14, #2
  a8:	orr	w3, w6, w3
  ac:	sxth	w10, w3
  b0:	and	w3, w3, #0xffff
  b4:	ldrh	w4, [x8, #4]
  b8:	add	w4, w12, w4
  bc:	bic	w10, w14, w10
  c0:	and	w5, w5, w3
  c4:	add	w5, w10, w5
  c8:	add	w4, w5, w4, uxth
  cc:	ubfiz	w2, w4, #3, #16
  d0:	ubfx	x4, x4, #13, #3
  d4:	orr	w4, w2, w4
  d8:	sxth	w10, w4
  dc:	and	w12, w4, #0xffff
  e0:	ldrh	w2, [x8, #6]
  e4:	add	w2, w7, w2
  e8:	bic	w7, w13, w10
  ec:	and	w4, w4, w3
  f0:	add	w4, w7, w4
  f4:	add	w2, w4, w2, uxth
  f8:	ubfx	x7, x2, #11, #5
  fc:	ubfiz	w2, w2, #5, #11
 100:	orr	w7, w2, w7
 104:	cmp	w9, #0x4
 108:	ccmp	w9, #0xa, #0x4, ne  // ne = any
 10c:	b.ne	48 <grub_mod_init-0x430>  // b.any
 110:	and	x2, x7, #0x3f
 114:	ldrh	w2, [x0, x2, lsl #1]
 118:	add	w2, w11, w2
 11c:	and	w11, w2, #0xffff
 120:	and	x2, x2, #0x3f
 124:	ldrh	w2, [x0, x2, lsl #1]
 128:	add	w2, w3, w2
 12c:	and	w3, w2, #0xffff
 130:	and	x2, x2, #0x3f
 134:	ldrh	w2, [x0, x2, lsl #1]
 138:	add	w2, w12, w2
 13c:	and	w12, w2, #0xffff
 140:	and	x2, x2, #0x3f
 144:	ldrh	w2, [x0, x2, lsl #1]
 148:	add	w2, w7, w2
 14c:	and	w7, w2, #0xffff
 150:	b	48 <grub_mod_init-0x430>
 154:	strb	w11, [x1]
 158:	lsr	w6, w11, #8
 15c:	strb	w6, [x1, #1]
 160:	strb	w3, [x1, #2]
 164:	lsr	w3, w3, #8
 168:	strb	w3, [x1, #3]
 16c:	strb	w12, [x1, #4]
 170:	lsr	w4, w12, #8
 174:	strb	w4, [x1, #5]
 178:	strb	w7, [x1, #6]
 17c:	lsr	w2, w7, #8
 180:	strb	w2, [x1, #7]
 184:	ret
 188:	mov	x8, x2
 18c:	ldrb	w4, [x2, #1]
 190:	ldrb	w3, [x2]
 194:	mov	w10, w3
 198:	bfi	w10, w4, #8, #24
 19c:	ldrb	w2, [x2, #3]
 1a0:	ldrb	w4, [x8, #2]
 1a4:	mov	w7, w4
 1a8:	bfi	w7, w2, #8, #24
 1ac:	ldrb	w2, [x8, #5]
 1b0:	ldrb	w5, [x8, #4]
 1b4:	mov	w6, w5
 1b8:	bfi	w6, w2, #8, #24
 1bc:	ldrb	w3, [x8, #7]
 1c0:	ldrb	w2, [x8, #6]
 1c4:	mov	w11, w2
 1c8:	bfi	w11, w3, #8, #24
 1cc:	add	x8, x0, #0x78
 1d0:	mov	w9, #0xf                   	// #15
 1d4:	b	1e8 <grub_mod_init-0x290>
 1d8:	sub	w9, w9, #0x1
 1dc:	sub	x8, x8, #0x8
 1e0:	cmn	w9, #0x1
 1e4:	b.eq	2f0 <grub_mod_init-0x188>  // b.none
 1e8:	lsl	w2, w11, #11
 1ec:	orr	w2, w2, w11, lsr #5
 1f0:	sxth	w2, w2
 1f4:	sxth	w3, w10
 1f8:	bic	w4, w3, w6
 1fc:	sub	w2, w2, w4
 200:	and	w2, w2, #0xffff
 204:	and	w4, w7, w6
 208:	ldrh	w5, [x8, #6]
 20c:	add	w4, w4, w5
 210:	sub	w2, w2, w4
 214:	and	w11, w2, #0xffff
 218:	lsl	w5, w6, #13
 21c:	orr	w5, w5, w6, lsr #3
 220:	sxth	w5, w5
 224:	sxth	w12, w2
 228:	bic	w4, w12, w7
 22c:	sub	w5, w5, w4
 230:	and	w5, w5, #0xffff
 234:	and	w4, w10, w7
 238:	ldrh	w6, [x8, #4]
 23c:	add	w4, w4, w6
 240:	sub	w5, w5, w4
 244:	and	w6, w5, #0xffff
 248:	lsl	w4, w7, #14
 24c:	orr	w4, w4, w7, lsr #2
 250:	sxth	w4, w4
 254:	ldrh	w5, [x8, #2]
 258:	sub	w4, w4, w5
 25c:	and	w4, w4, #0xffff
 260:	bic	w3, w6, w3
 264:	and	w5, w2, w10
 268:	add	w3, w3, w5
 26c:	sub	w4, w4, w3
 270:	and	w7, w4, #0xffff
 274:	lsl	w3, w10, #15
 278:	orr	w3, w3, w10, lsr #1
 27c:	sxth	w3, w3
 280:	ldrh	w4, [x8]
 284:	sub	w3, w3, w4
 288:	and	w3, w3, #0xffff
 28c:	bic	w12, w7, w12
 290:	and	w2, w2, w6
 294:	add	w2, w12, w2
 298:	sub	w2, w3, w2
 29c:	and	w10, w2, #0xffff
 2a0:	cmp	w9, #0x5
 2a4:	ccmp	w9, #0xb, #0x4, ne  // ne = any
 2a8:	b.ne	1d8 <grub_mod_init-0x2a0>  // b.any
 2ac:	and	x2, x6, #0x3f
 2b0:	ldrh	w2, [x0, x2, lsl #1]
 2b4:	sub	w2, w11, w2
 2b8:	and	w11, w2, #0xffff
 2bc:	and	x3, x7, #0x3f
 2c0:	ldrh	w5, [x0, x3, lsl #1]
 2c4:	sub	w5, w6, w5
 2c8:	and	w6, w5, #0xffff
 2cc:	and	x3, x10, #0x3f
 2d0:	ldrh	w4, [x0, x3, lsl #1]
 2d4:	sub	w4, w7, w4
 2d8:	and	w7, w4, #0xffff
 2dc:	and	x2, x2, #0x3f
 2e0:	ldrh	w3, [x0, x2, lsl #1]
 2e4:	sub	w3, w10, w3
 2e8:	and	w10, w3, #0xffff
 2ec:	b	1d8 <grub_mod_init-0x2a0>
 2f0:	strb	w10, [x1]
 2f4:	lsr	w3, w10, #8
 2f8:	strb	w3, [x1, #1]
 2fc:	strb	w7, [x1, #2]
 300:	lsr	w4, w7, #8
 304:	strb	w4, [x1, #3]
 308:	strb	w6, [x1, #4]
 30c:	lsr	w5, w6, #8
 310:	strb	w5, [x1, #5]
 314:	strb	w11, [x1, #6]
 318:	lsr	w2, w11, #8
 31c:	strb	w2, [x1, #7]
 320:	ret
 324:	mov	x3, x0
 328:	adrp	x0, 0 <grub_mod_init-0x478>
 32c:	ldr	x0, [x0]
 330:	ldr	w0, [x0]
 334:	cbnz	w0, 450 <grub_mod_init-0x28>
 338:	adrp	x0, 0 <grub_mod_init-0x478>
 33c:	ldr	x0, [x0]
 340:	mov	w4, #0x1                   	// #1
 344:	str	w4, [x0]
 348:	str	xzr, [x0, #8]
 34c:	mov	w0, #0xd                   	// #13
 350:	cmp	w2, #0x4
 354:	b.ls	44c <grub_mod_init-0x2c>  // b.plast
 358:	mov	x5, x3
 35c:	mov	x0, #0x0                   	// #0
 360:	ldrb	w4, [x1, x0]
 364:	strb	w4, [x3, x0]
 368:	add	x0, x0, #0x1
 36c:	cmp	w2, w0
 370:	b.hi	360 <grub_mod_init-0x118>  // b.pmore
 374:	cmp	w2, #0x7f
 378:	b.hi	3c0 <grub_mod_init-0xb8>  // b.pmore
 37c:	mov	w4, #0x7f                  	// #127
 380:	sub	w4, w4, w2
 384:	mov	x0, #0x0                   	// #0
 388:	add	x10, x3, w2, uxtw
 38c:	adrp	x9, 0 <grub_mod_init-0x478>
 390:	sub	w8, w2, #0x1
 394:	ldr	x6, [x9]
 398:	add	w1, w8, w0
 39c:	ldrb	w1, [x5, w1, uxtw]
 3a0:	ldrb	w7, [x3, x0]
 3a4:	add	w1, w1, w7
 3a8:	and	w1, w1, #0xff
 3ac:	ldrb	w1, [x6, w1, sxtw]
 3b0:	strb	w1, [x10, x0]
 3b4:	cmp	x0, x4
 3b8:	add	x0, x0, #0x1
 3bc:	b.ne	394 <grub_mod_init-0xe4>  // b.any
 3c0:	adrp	x0, 0 <grub_mod_init-0x478>
 3c4:	ldr	x1, [x0]
 3c8:	ldrb	w0, [x3]
 3cc:	ldrb	w0, [x1, w0, sxtw]
 3d0:	strb	w0, [x3]
 3d4:	sbfx	x2, x2, #0, #29
 3d8:	mov	w0, #0x80                  	// #128
 3dc:	sub	w0, w0, w2
 3e0:	ldrb	w4, [x3, w0, uxtw]
 3e4:	ldrb	w1, [x1, w4, sxtw]
 3e8:	strb	w1, [x3, w0, uxtw]
 3ec:	sub	w4, w0, #0x1
 3f0:	cbz	w0, 428 <grub_mod_init-0x50>
 3f4:	mov	w7, w2
 3f8:	sub	w2, w2, #0x1
 3fc:	add	w2, w2, w0
 400:	add	x4, x3, w4, uxtw
 404:	adrp	x6, 0 <grub_mod_init-0x478>
 408:	ldrb	w0, [x5, w2, uxtw]
 40c:	eor	w0, w0, w1
 410:	ldr	x1, [x6]
 414:	ldrb	w1, [x1, w0, sxtw]
 418:	strb	w1, [x4], #-1
 41c:	cmp	w2, w7
 420:	sub	w2, w2, #0x1
 424:	b.ne	408 <grub_mod_init-0x70>  // b.any
 428:	mov	x0, x3
 42c:	add	x3, x3, #0x80
 430:	ldrb	w1, [x0, #1]
 434:	ldrb	w2, [x0]
 438:	orr	w1, w2, w1, lsl #8
 43c:	strh	w1, [x0], #2
 440:	cmp	x3, x0
 444:	b.ne	430 <grub_mod_init-0x48>  // b.any
 448:	mov	w0, #0x0                   	// #0
 44c:	ret
 450:	adrp	x0, 0 <grub_mod_init-0x478>
 454:	ldr	x0, [x0]
 458:	ldr	x4, [x0, #8]
 45c:	mov	w0, #0x1c                  	// #28
 460:	cbnz	x4, 44c <grub_mod_init-0x2c>
 464:	b	34c <grub_mod_init-0x12c>
	...

0000000000000478 <grub_mod_init>:
 478:	stp	x29, x30, [sp, #-16]!
 47c:	mov	x29, sp
 480:	adrp	x0, 0 <grub_mod_init-0x478>
 484:	ldr	x0, [x0]
 488:	bl	0 <grub_cipher_register>
 48c:	ldp	x29, x30, [sp], #16
 490:	ret
 494:	nop
	...

00000000000004a0 <grub_mod_fini>:
 4a0:	stp	x29, x30, [sp, #-16]!
 4a4:	mov	x29, sp
 4a8:	adrp	x0, 0 <grub_mod_init-0x478>
 4ac:	ldr	x0, [x0]
 4b0:	bl	0 <grub_cipher_unregister>
 4b4:	ldp	x29, x30, [sp], #16
 4b8:	ret
 4bc:	nop
	...
