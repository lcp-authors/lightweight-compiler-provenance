
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//priority_queue.mod_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_priority_queue_top>:
   0:	ldr	x1, [x0, #16]
   4:	cbz	x1, 10 <grub_priority_queue_top+0x10>
   8:	ldr	x0, [x0, #32]
   c:	ret
  10:	mov	x0, #0x0                   	// #0
  14:	ret

0000000000000018 <grub_priority_queue_destroy>:
  18:	stp	x29, x30, [sp, #-32]!
  1c:	mov	x29, sp
  20:	str	x19, [sp, #16]
  24:	mov	x19, x0
  28:	ldr	x0, [x0, #32]
  2c:	bl	0 <grub_free>
  30:	mov	x0, x19
  34:	ldr	x19, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	b	0 <grub_free>

0000000000000040 <grub_priority_queue_new>:
  40:	stp	x29, x30, [sp, #-48]!
  44:	mov	x29, sp
  48:	stp	x19, x20, [sp, #16]
  4c:	stp	x21, x22, [sp, #32]
  50:	mov	x21, x0
  54:	mov	x22, x1
  58:	lsl	x0, x0, #3
  5c:	bl	0 <grub_malloc>
  60:	cbz	x0, 9c <grub_priority_queue_new+0x5c>
  64:	mov	x20, x0
  68:	mov	x0, #0x28                  	// #40
  6c:	bl	0 <grub_malloc>
  70:	mov	x19, x0
  74:	cbz	x0, b4 <grub_priority_queue_new+0x74>
  78:	mov	x0, #0x8                   	// #8
  7c:	stp	x21, x0, [x19]
  80:	stp	xzr, x22, [x19, #16]
  84:	str	x20, [x19, #32]
  88:	mov	x0, x19
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x21, x22, [sp, #32]
  94:	ldp	x29, x30, [sp], #48
  98:	ret
  9c:	mov	x19, #0x0                   	// #0
  a0:	mov	x0, x19
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x21, x22, [sp, #32]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret
  b4:	mov	x0, x20
  b8:	bl	0 <grub_free>
  bc:	b	88 <grub_priority_queue_new+0x48>

00000000000000c0 <grub_priority_queue_push>:
  c0:	stp	x29, x30, [sp, #-48]!
  c4:	mov	x29, sp
  c8:	stp	x19, x20, [sp, #16]
  cc:	mov	x20, x0
  d0:	mov	x19, x1
  d4:	ldr	x0, [x0, #8]
  d8:	ldr	x3, [x20, #16]
  dc:	ldr	x2, [x20]
  e0:	cmp	x3, x0
  e4:	ldr	x0, [x20, #32]
  e8:	b.eq	2a4 <grub_priority_queue_push+0x1e4>  // b.none
  ec:	madd	x0, x3, x2, x0
  f0:	add	x3, x3, #0x1
  f4:	str	x3, [x20, #16]
  f8:	mov	x1, x19
  fc:	bl	0 <grub_memmove>
 100:	ldr	x19, [x20, #16]
 104:	subs	x19, x19, #0x1
 108:	b.eq	268 <grub_priority_queue_push+0x1a8>  // b.none
 10c:	str	x21, [sp, #32]
 110:	ldp	x3, x1, [x20, #24]
 114:	sub	x4, x19, #0x1
 118:	ldr	x2, [x20]
 11c:	mov	x21, x19
 120:	madd	x0, x2, x19, x1
 124:	lsr	x19, x4, #1
 128:	madd	x1, x2, x19, x1
 12c:	blr	x3
 130:	cmp	w0, #0x0
 134:	b.le	264 <grub_priority_queue_push+0x1a4>
 138:	ldr	x7, [x20]
 13c:	ldr	x2, [x20, #32]
 140:	mul	x0, x7, x21
 144:	mul	x1, x19, x7
 148:	add	x4, x2, x0
 14c:	add	x2, x2, x1
 150:	cbz	x7, 260 <grub_priority_queue_push+0x1a0>
 154:	add	x5, x1, #0x8
 158:	add	x3, x0, #0x8
 15c:	cmp	x0, x5
 160:	sub	x0, x7, #0x1
 164:	ccmp	x1, x3, #0x0, lt  // lt = tstop
 168:	orr	x1, x2, x4
 16c:	ccmp	x0, #0x6, #0x0, ge  // ge = tcont
 170:	and	x1, x1, #0x7
 174:	ccmp	x1, #0x0, #0x0, hi  // hi = pmore
 178:	b.ne	278 <grub_priority_queue_push+0x1b8>  // b.any
 17c:	sub	x3, x7, #0x8
 180:	mov	x1, #0x0                   	// #0
 184:	lsr	x3, x3, #3
 188:	add	x3, x3, #0x1
 18c:	nop
 190:	ldr	x6, [x2, x1, lsl #3]
 194:	ldr	x5, [x4, x1, lsl #3]
 198:	str	x6, [x4, x1, lsl #3]
 19c:	str	x5, [x2, x1, lsl #3]
 1a0:	add	x1, x1, #0x1
 1a4:	cmp	x3, x1
 1a8:	b.hi	190 <grub_priority_queue_push+0xd0>  // b.pmore
 1ac:	lsl	x1, x3, #3
 1b0:	cmp	x7, x1
 1b4:	add	x5, x4, x1
 1b8:	add	x3, x2, x1
 1bc:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 1c0:	ldrb	w7, [x2, x1]
 1c4:	subs	x0, x0, x1
 1c8:	ldrb	w6, [x4, x1]
 1cc:	strb	w7, [x4, x1]
 1d0:	strb	w6, [x2, x1]
 1d4:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 1d8:	ldrb	w2, [x3, #1]
 1dc:	cmp	x0, #0x1
 1e0:	ldrb	w1, [x5, #1]
 1e4:	strb	w2, [x5, #1]
 1e8:	strb	w1, [x3, #1]
 1ec:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 1f0:	ldrb	w2, [x3, #2]
 1f4:	cmp	x0, #0x2
 1f8:	ldrb	w1, [x5, #2]
 1fc:	strb	w2, [x5, #2]
 200:	strb	w1, [x3, #2]
 204:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 208:	ldrb	w2, [x3, #3]
 20c:	cmp	x0, #0x3
 210:	ldrb	w1, [x5, #3]
 214:	strb	w2, [x5, #3]
 218:	strb	w1, [x3, #3]
 21c:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 220:	ldrb	w2, [x3, #4]
 224:	cmp	x0, #0x4
 228:	ldrb	w1, [x5, #4]
 22c:	strb	w2, [x5, #4]
 230:	strb	w1, [x3, #4]
 234:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 238:	ldrb	w1, [x3, #5]
 23c:	cmp	x0, #0x5
 240:	ldrb	w0, [x5, #5]
 244:	strb	w1, [x5, #5]
 248:	strb	w0, [x3, #5]
 24c:	b.eq	260 <grub_priority_queue_push+0x1a0>  // b.none
 250:	ldrb	w1, [x3, #6]
 254:	ldrb	w0, [x5, #6]
 258:	strb	w1, [x5, #6]
 25c:	strb	w0, [x3, #6]
 260:	cbnz	x19, 110 <grub_priority_queue_push+0x50>
 264:	ldr	x21, [sp, #32]
 268:	mov	w0, #0x0                   	// #0
 26c:	ldp	x19, x20, [sp, #16]
 270:	ldp	x29, x30, [sp], #48
 274:	ret
 278:	mov	x1, #0x0                   	// #0
 27c:	nop
 280:	ldrb	w3, [x2, x1]
 284:	ldrb	w0, [x4, x1]
 288:	strb	w3, [x4, x1]
 28c:	strb	w0, [x2, x1]
 290:	add	x1, x1, #0x1
 294:	cmp	x7, x1
 298:	b.ne	280 <grub_priority_queue_push+0x1c0>  // b.any
 29c:	cbnz	x19, 110 <grub_priority_queue_push+0x50>
 2a0:	b	264 <grub_priority_queue_push+0x1a4>
 2a4:	mul	x3, x3, x2
 2a8:	lsl	x1, x3, #1
 2ac:	bl	0 <grub_realloc>
 2b0:	cbz	x0, 2cc <grub_priority_queue_push+0x20c>
 2b4:	ldp	x2, x1, [x20]
 2b8:	str	x0, [x20, #32]
 2bc:	ldr	x3, [x20, #16]
 2c0:	lsl	x1, x1, #1
 2c4:	str	x1, [x20, #8]
 2c8:	b	ec <grub_priority_queue_push+0x2c>
 2cc:	adrp	x0, 0 <grub_priority_queue_top>
 2d0:	ldr	x0, [x0]
 2d4:	ldr	w0, [x0]
 2d8:	b	26c <grub_priority_queue_push+0x1ac>
 2dc:	nop
	...

00000000000002e8 <grub_priority_queue_pop>:
 2e8:	stp	x29, x30, [sp, #-48]!
 2ec:	mov	x29, sp
 2f0:	stp	x19, x20, [sp, #16]
 2f4:	mov	x19, x0
 2f8:	ldr	x0, [x0, #16]
 2fc:	stp	x21, x22, [sp, #32]
 300:	ldr	x4, [x19]
 304:	sub	x0, x0, #0x1
 308:	ldr	x1, [x19, #32]
 30c:	mul	x3, x0, x4
 310:	add	x2, x1, x3
 314:	cbz	x4, 428 <grub_priority_queue_pop+0x140>
 318:	add	x3, x3, #0x8
 31c:	add	x0, x1, #0x8
 320:	cmp	x3, #0x0
 324:	sub	x3, x4, #0x1
 328:	ccmp	x2, x0, #0x2, gt
 32c:	orr	x0, x1, x2
 330:	ccmp	x3, #0x6, #0x0, cs  // cs = hs, nlast
 334:	and	x0, x0, #0x7
 338:	ccmp	x0, #0x0, #0x0, hi  // hi = pmore
 33c:	b.ne	648 <grub_priority_queue_pop+0x360>  // b.any
 340:	sub	x3, x4, #0x8
 344:	mov	x0, #0x0                   	// #0
 348:	lsr	x3, x3, #3
 34c:	add	x3, x3, #0x1
 350:	ldr	x6, [x2, x0, lsl #3]
 354:	ldr	x5, [x1, x0, lsl #3]
 358:	str	x6, [x1, x0, lsl #3]
 35c:	str	x5, [x2, x0, lsl #3]
 360:	add	x0, x0, #0x1
 364:	cmp	x3, x0
 368:	b.hi	350 <grub_priority_queue_pop+0x68>  // b.pmore
 36c:	lsl	x3, x3, #3
 370:	subs	x4, x4, x3
 374:	add	x0, x2, x3
 378:	add	x5, x1, x3
 37c:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 380:	ldrb	w7, [x2, x3]
 384:	cmp	x4, #0x1
 388:	ldrb	w6, [x1, x3]
 38c:	strb	w7, [x1, x3]
 390:	strb	w6, [x2, x3]
 394:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 398:	ldrb	w2, [x0, #1]
 39c:	cmp	x4, #0x2
 3a0:	ldrb	w1, [x5, #1]
 3a4:	strb	w2, [x5, #1]
 3a8:	strb	w1, [x0, #1]
 3ac:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 3b0:	ldrb	w2, [x0, #2]
 3b4:	cmp	x4, #0x3
 3b8:	ldrb	w1, [x5, #2]
 3bc:	strb	w2, [x5, #2]
 3c0:	strb	w1, [x0, #2]
 3c4:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 3c8:	ldrb	w2, [x0, #3]
 3cc:	cmp	x4, #0x4
 3d0:	ldrb	w1, [x5, #3]
 3d4:	strb	w2, [x5, #3]
 3d8:	strb	w1, [x0, #3]
 3dc:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 3e0:	ldrb	w2, [x0, #4]
 3e4:	cmp	x4, #0x5
 3e8:	ldrb	w1, [x5, #4]
 3ec:	strb	w2, [x5, #4]
 3f0:	strb	w1, [x0, #4]
 3f4:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 3f8:	ldrb	w2, [x0, #5]
 3fc:	cmp	x4, #0x6
 400:	ldrb	w1, [x5, #5]
 404:	strb	w2, [x5, #5]
 408:	strb	w1, [x0, #5]
 40c:	b.eq	420 <grub_priority_queue_pop+0x138>  // b.none
 410:	ldrb	w2, [x0, #6]
 414:	ldrb	w1, [x5, #6]
 418:	strb	w2, [x5, #6]
 41c:	strb	w1, [x0, #6]
 420:	ldr	x0, [x19, #16]
 424:	sub	x0, x0, #0x1
 428:	str	x0, [x19, #16]
 42c:	cmp	x0, #0x1
 430:	mov	x22, #0x1                   	// #1
 434:	mov	x21, #0x0                   	// #0
 438:	b.ls	604 <grub_priority_queue_pop+0x31c>  // b.plast
 43c:	nop
 440:	ldp	x3, x0, [x19, #24]
 444:	add	x20, x21, #0x1
 448:	ldr	x2, [x19]
 44c:	lsl	x20, x20, #1
 450:	madd	x1, x2, x21, x0
 454:	madd	x0, x2, x22, x0
 458:	blr	x3
 45c:	cmp	w0, #0x0
 460:	b.le	5dc <grub_priority_queue_pop+0x2f4>
 464:	ldr	x1, [x19]
 468:	ldr	x2, [x19, #32]
 46c:	ldr	x3, [x19, #16]
 470:	madd	x0, x22, x1, x2
 474:	cmp	x3, x20
 478:	b.hi	5b4 <grub_priority_queue_pop+0x2cc>  // b.pmore
 47c:	mov	x20, x22
 480:	mul	x21, x21, x1
 484:	add	x4, x2, x21
 488:	cbz	x1, 598 <grub_priority_queue_pop+0x2b0>
 48c:	add	x21, x21, #0x8
 490:	add	x3, x0, #0x8
 494:	add	x21, x2, x21
 498:	sub	x7, x1, #0x1
 49c:	cmp	x21, x0
 4a0:	orr	x2, x4, x0
 4a4:	ccmp	x4, x3, #0x2, hi  // hi = pmore
 4a8:	and	x2, x2, #0x7
 4ac:	ccmp	x7, #0x6, #0x0, cs  // cs = hs, nlast
 4b0:	ccmp	x2, #0x0, #0x0, hi  // hi = pmore
 4b4:	b.ne	620 <grub_priority_queue_pop+0x338>  // b.any
 4b8:	sub	x3, x1, #0x8
 4bc:	mov	x2, #0x0                   	// #0
 4c0:	lsr	x3, x3, #3
 4c4:	add	x3, x3, #0x1
 4c8:	ldr	x6, [x0, x2, lsl #3]
 4cc:	ldr	x5, [x4, x2, lsl #3]
 4d0:	str	x6, [x4, x2, lsl #3]
 4d4:	str	x5, [x0, x2, lsl #3]
 4d8:	add	x2, x2, #0x1
 4dc:	cmp	x3, x2
 4e0:	b.hi	4c8 <grub_priority_queue_pop+0x1e0>  // b.pmore
 4e4:	lsl	x2, x3, #3
 4e8:	cmp	x2, x1
 4ec:	add	x3, x4, x2
 4f0:	add	x1, x0, x2
 4f4:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 4f8:	ldrb	w6, [x0, x2]
 4fc:	subs	x7, x7, x2
 500:	ldrb	w5, [x4, x2]
 504:	strb	w6, [x4, x2]
 508:	strb	w5, [x0, x2]
 50c:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 510:	ldrb	w2, [x1, #1]
 514:	cmp	x7, #0x1
 518:	ldrb	w0, [x3, #1]
 51c:	strb	w2, [x3, #1]
 520:	strb	w0, [x1, #1]
 524:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 528:	ldrb	w2, [x1, #2]
 52c:	cmp	x7, #0x2
 530:	ldrb	w0, [x3, #2]
 534:	strb	w2, [x3, #2]
 538:	strb	w0, [x1, #2]
 53c:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 540:	ldrb	w2, [x1, #3]
 544:	cmp	x7, #0x3
 548:	ldrb	w0, [x3, #3]
 54c:	strb	w2, [x3, #3]
 550:	strb	w0, [x1, #3]
 554:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 558:	ldrb	w2, [x1, #4]
 55c:	cmp	x7, #0x4
 560:	ldrb	w0, [x3, #4]
 564:	strb	w2, [x3, #4]
 568:	strb	w0, [x1, #4]
 56c:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 570:	ldrb	w2, [x1, #5]
 574:	cmp	x7, #0x5
 578:	ldrb	w0, [x3, #5]
 57c:	strb	w2, [x3, #5]
 580:	strb	w0, [x1, #5]
 584:	b.eq	598 <grub_priority_queue_pop+0x2b0>  // b.none
 588:	ldrb	w2, [x1, #6]
 58c:	ldrb	w0, [x3, #6]
 590:	strb	w2, [x3, #6]
 594:	strb	w0, [x1, #6]
 598:	ldr	x0, [x19, #16]
 59c:	lsl	x22, x20, #1
 5a0:	add	x22, x22, #0x1
 5a4:	cmp	x0, x22
 5a8:	b.ls	604 <grub_priority_queue_pop+0x31c>  // b.plast
 5ac:	mov	x21, x20
 5b0:	b	440 <grub_priority_queue_pop+0x158>
 5b4:	madd	x1, x20, x1, x2
 5b8:	ldr	x2, [x19, #24]
 5bc:	blr	x2
 5c0:	cmp	w0, #0x0
 5c4:	ldr	x1, [x19]
 5c8:	b.le	614 <grub_priority_queue_pop+0x32c>
 5cc:	ldr	x2, [x19, #32]
 5d0:	mov	x20, x22
 5d4:	madd	x0, x22, x1, x2
 5d8:	b	480 <grub_priority_queue_pop+0x198>
 5dc:	ldr	x0, [x19, #16]
 5e0:	cmp	x0, x20
 5e4:	b.ls	604 <grub_priority_queue_pop+0x31c>  // b.plast
 5e8:	ldp	x3, x0, [x19, #24]
 5ec:	ldr	x2, [x19]
 5f0:	madd	x1, x2, x21, x0
 5f4:	madd	x0, x2, x20, x0
 5f8:	blr	x3
 5fc:	cmp	w0, #0x0
 600:	b.gt	464 <grub_priority_queue_pop+0x17c>
 604:	ldp	x19, x20, [sp, #16]
 608:	ldp	x21, x22, [sp, #32]
 60c:	ldp	x29, x30, [sp], #48
 610:	ret
 614:	ldr	x2, [x19, #32]
 618:	madd	x0, x20, x1, x2
 61c:	b	480 <grub_priority_queue_pop+0x198>
 620:	mov	x2, #0x0                   	// #0
 624:	nop
 628:	ldrb	w5, [x0, x2]
 62c:	ldrb	w3, [x4, x2]
 630:	strb	w5, [x4, x2]
 634:	strb	w3, [x0, x2]
 638:	add	x2, x2, #0x1
 63c:	cmp	x1, x2
 640:	b.ne	628 <grub_priority_queue_pop+0x340>  // b.any
 644:	b	598 <grub_priority_queue_pop+0x2b0>
 648:	mov	x0, #0x0                   	// #0
 64c:	nop
 650:	ldrb	w5, [x2, x0]
 654:	ldrb	w3, [x1, x0]
 658:	strb	w5, [x1, x0]
 65c:	strb	w3, [x2, x0]
 660:	add	x0, x0, #0x1
 664:	cmp	x4, x0
 668:	b.ne	650 <grub_priority_queue_pop+0x368>  // b.any
 66c:	b	420 <grub_priority_queue_pop+0x138>
