In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_gcc_-Os:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fallbackSort>:
       0:	sub	sp, sp, #0xba0
       4:	stp	x29, x30, [sp]
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	mov	x19, x0
      14:	mov	w0, w4
      18:	stp	x21, x22, [sp, #32]
      1c:	mov	x20, x2
      20:	mov	x21, x1
      24:	stp	x23, x24, [sp, #48]
      28:	cmp	w0, #0x3
      2c:	stp	x25, x26, [sp, #64]
      30:	mov	w26, w3
      34:	stp	x27, x28, [sp, #80]
      38:	str	w4, [sp, #96]
      3c:	b.le	54 <fallbackSort+0x54>
      40:	adrp	x0, 0 <stderr>
      44:	ldr	x1, [x0]
      48:	adrp	x0, 0 <fallbackSort>
      4c:	add	x0, x0, #0x0
      50:	bl	0 <fputs>
      54:	add	x0, sp, #0x798
      58:	mov	x1, #0x0                   	// #0
      5c:	str	wzr, [x0, x1, lsl #2]
      60:	add	x1, x1, #0x1
      64:	cmp	x1, #0x101
      68:	b.ne	5c <fallbackSort+0x5c>  // b.any
      6c:	mov	x1, #0x0                   	// #0
      70:	cmp	w26, w1
      74:	b.gt	2ec <fallbackSort+0x2ec>
      78:	mov	x1, #0x0                   	// #0
      7c:	add	x3, sp, #0x398
      80:	ldr	w2, [x0, x1]
      84:	str	w2, [x3, x1]
      88:	add	x1, x1, #0x4
      8c:	cmp	x1, #0x400
      90:	b.ne	7c <fallbackSort+0x7c>  // b.any
      94:	mov	x1, x0
      98:	mov	w2, #0x1                   	// #1
      9c:	ldp	w4, w3, [x1]
      a0:	add	w2, w2, #0x1
      a4:	cmp	w2, #0x101
      a8:	add	w3, w3, w4
      ac:	str	w3, [x1, #4]!
      b0:	b.ne	9c <fallbackSort+0x9c>  // b.any
      b4:	mov	x1, #0x0                   	// #0
      b8:	cmp	w26, w1
      bc:	b.gt	308 <fallbackSort+0x308>
      c0:	mov	w1, #0x20                  	// #32
      c4:	mov	x2, #0x0                   	// #0
      c8:	sdiv	w1, w26, w1
      cc:	add	w1, w1, #0x2
      d0:	cmp	w1, w2
      d4:	b.gt	328 <fallbackSort+0x328>
      d8:	mov	x1, #0x0                   	// #0
      dc:	mov	w5, #0x1                   	// #1
      e0:	ldr	w3, [x0, x1, lsl #2]
      e4:	add	x1, x1, #0x1
      e8:	cmp	x1, #0x100
      ec:	asr	w2, w3, #5
      f0:	lsl	w3, w5, w3
      f4:	sbfiz	x2, x2, #2, #32
      f8:	ldr	w4, [x20, x2]
      fc:	orr	w3, w4, w3
     100:	str	w3, [x20, x2]
     104:	b.ne	e0 <fallbackSort+0xe0>  // b.any
     108:	mov	w0, w26
     10c:	add	w4, w26, #0x40
     110:	mov	w3, #0x1                   	// #1
     114:	asr	w1, w0, #5
     118:	lsl	w5, w3, w0
     11c:	sbfiz	x1, x1, #2, #32
     120:	ldr	w2, [x20, x1]
     124:	orr	w2, w2, w5
     128:	str	w2, [x20, x1]
     12c:	add	w1, w0, #0x1
     130:	add	w0, w0, #0x2
     134:	cmp	w4, w0
     138:	asr	w2, w1, #5
     13c:	lsl	w1, w3, w1
     140:	sbfiz	x2, x2, #2, #32
     144:	ldr	w5, [x20, x2]
     148:	bic	w1, w5, w1
     14c:	str	w1, [x20, x2]
     150:	b.ne	114 <fallbackSort+0x114>  // b.any
     154:	mov	w25, #0x1                   	// #1
     158:	add	x23, sp, #0x78
     15c:	mov	w22, w25
     160:	add	x24, sp, #0x208
     164:	ldr	w0, [sp, #96]
     168:	cmp	w0, #0x3
     16c:	b.le	188 <fallbackSort+0x188>
     170:	adrp	x0, 0 <stderr>
     174:	adrp	x1, 0 <fallbackSort>
     178:	mov	w2, w25
     17c:	add	x1, x1, #0x0
     180:	ldr	x0, [x0]
     184:	bl	0 <fprintf>
     188:	mov	x0, #0x0                   	// #0
     18c:	mov	w2, #0x0                   	// #0
     190:	cmp	w26, w0
     194:	b.gt	334 <fallbackSort+0x334>
     198:	mov	w2, #0x0                   	// #0
     19c:	mov	w14, #0xffffffff            	// #-1
     1a0:	add	w1, w14, #0x1
     1a4:	asr	w0, w1, #5
     1a8:	and	w3, w1, #0x1f
     1ac:	lsl	w4, w22, w3
     1b0:	ldr	w0, [x20, w0, sxtw #2]
     1b4:	tst	w4, w0
     1b8:	b.eq	1e4 <fallbackSort+0x1e4>  // b.none
     1bc:	cbnz	w3, 364 <fallbackSort+0x364>
     1c0:	asr	w0, w1, #5
     1c4:	ldr	w0, [x20, w0, sxtw #2]
     1c8:	cmn	w0, #0x1
     1cc:	b.eq	36c <fallbackSort+0x36c>  // b.none
     1d0:	asr	w3, w1, #5
     1d4:	lsl	w0, w22, w1
     1d8:	ldr	w3, [x20, w3, sxtw #2]
     1dc:	tst	w0, w3
     1e0:	b.ne	374 <fallbackSort+0x374>  // b.any
     1e4:	sub	w27, w1, #0x1
     1e8:	cmp	w26, w27
     1ec:	b.le	624 <fallbackSort+0x624>
     1f0:	mov	w0, w1
     1f4:	asr	w3, w0, #5
     1f8:	and	w4, w0, #0x1f
     1fc:	lsl	w5, w22, w4
     200:	ldr	w3, [x20, w3, sxtw #2]
     204:	tst	w5, w3
     208:	b.ne	230 <fallbackSort+0x230>  // b.any
     20c:	cbnz	w4, 37c <fallbackSort+0x37c>
     210:	asr	w3, w0, #5
     214:	ldr	w3, [x20, w3, sxtw #2]
     218:	cbz	w3, 384 <fallbackSort+0x384>
     21c:	asr	w4, w0, #5
     220:	lsl	w3, w22, w0
     224:	ldr	w4, [x20, w4, sxtw #2]
     228:	tst	w3, w4
     22c:	b.eq	38c <fallbackSort+0x38c>  // b.none
     230:	sub	w14, w0, #0x1
     234:	cmp	w26, w14
     238:	b.le	624 <fallbackSort+0x624>
     23c:	cmp	w1, w0
     240:	b.ge	1a0 <fallbackSort+0x1a0>  // b.tcont
     244:	sub	w0, w0, w1
     248:	mov	w28, #0x0                   	// #0
     24c:	add	w0, w0, #0x1
     250:	mov	x6, #0x1                   	// #1
     254:	add	w2, w2, w0
     258:	str	w27, [sp, #120]
     25c:	str	w14, [sp, #520]
     260:	sub	w8, w6, #0x1
     264:	sbfiz	x0, x8, #2, #32
     268:	sxtw	x18, w8
     26c:	ldr	w3, [x23, x0]
     270:	ldr	w1, [x24, x0]
     274:	sub	w0, w1, w3
     278:	cmp	w0, #0x9
     27c:	b.gt	424 <fallbackSort+0x424>
     280:	cmp	w3, w1
     284:	b.eq	2a0 <fallbackSort+0x2a0>  // b.none
     288:	cmp	w0, #0x3
     28c:	b.gt	394 <fallbackSort+0x394>
     290:	sub	w0, w1, #0x1
     294:	sxtw	x0, w0
     298:	cmp	w3, w0
     29c:	b.le	3e4 <fallbackSort+0x3e4>
     2a0:	cbnz	w8, 59c <fallbackSort+0x59c>
     2a4:	sxtw	x27, w27
     2a8:	mov	w1, #0xffffffff            	// #-1
     2ac:	mov	w0, w27
     2b0:	cmp	w14, w27
     2b4:	b.lt	1a0 <fallbackSort+0x1a0>  // b.tstop
     2b8:	ldr	w3, [x19, x27, lsl #2]
     2bc:	ldr	w4, [x21, x3, lsl #2]
     2c0:	cmp	w1, w4
     2c4:	b.eq	2e0 <fallbackSort+0x2e0>  // b.none
     2c8:	asr	w1, w0, #5
     2cc:	lsl	w0, w22, w0
     2d0:	sbfiz	x1, x1, #2, #32
     2d4:	ldr	w3, [x20, x1]
     2d8:	orr	w0, w3, w0
     2dc:	str	w0, [x20, x1]
     2e0:	add	x27, x27, #0x1
     2e4:	mov	w1, w4
     2e8:	b	2ac <fallbackSort+0x2ac>
     2ec:	ldrb	w2, [x21, x1]
     2f0:	add	x1, x1, #0x1
     2f4:	lsl	x2, x2, #2
     2f8:	ldr	w3, [x0, x2]
     2fc:	add	w3, w3, #0x1
     300:	str	w3, [x0, x2]
     304:	b	70 <fallbackSort+0x70>
     308:	ldrb	w3, [x21, x1]
     30c:	lsl	x3, x3, #2
     310:	ldr	w2, [x0, x3]
     314:	sub	w2, w2, #0x1
     318:	str	w2, [x0, x3]
     31c:	str	w1, [x19, w2, sxtw #2]
     320:	add	x1, x1, #0x1
     324:	b	b8 <fallbackSort+0xb8>
     328:	str	wzr, [x20, x2, lsl #2]
     32c:	add	x2, x2, #0x1
     330:	b	d0 <fallbackSort+0xd0>
     334:	asr	w3, w0, #5
     338:	lsl	w1, w22, w0
     33c:	ldr	w3, [x20, w3, sxtw #2]
     340:	tst	w1, w3
     344:	ldr	w1, [x19, x0, lsl #2]
     348:	csel	w2, w2, w0, eq  // eq = none
     34c:	subs	w1, w1, w25
     350:	b.pl	358 <fallbackSort+0x358>  // b.nfrst
     354:	add	w1, w1, w26
     358:	add	x0, x0, #0x1
     35c:	str	w2, [x21, w1, sxtw #2]
     360:	b	190 <fallbackSort+0x190>
     364:	add	w1, w1, #0x1
     368:	b	1a4 <fallbackSort+0x1a4>
     36c:	add	w1, w1, #0x20
     370:	b	1c0 <fallbackSort+0x1c0>
     374:	add	w1, w1, #0x1
     378:	b	1d0 <fallbackSort+0x1d0>
     37c:	add	w0, w0, #0x1
     380:	b	1f4 <fallbackSort+0x1f4>
     384:	add	w0, w0, #0x20
     388:	b	210 <fallbackSort+0x210>
     38c:	add	w0, w0, #0x1
     390:	b	21c <fallbackSort+0x21c>
     394:	sub	w0, w1, #0x4
     398:	sxtw	x0, w0
     39c:	cmp	w3, w0
     3a0:	b.gt	290 <fallbackSort+0x290>
     3a4:	ldr	w6, [x19, x0, lsl #2]
     3a8:	add	w5, w0, #0x4
     3ac:	add	x4, x19, x0, lsl #2
     3b0:	ldr	w11, [x21, w6, sxtw #2]
     3b4:	cmp	w1, w5
     3b8:	b.lt	3cc <fallbackSort+0x3cc>  // b.tstop
     3bc:	ldr	w7, [x4, #16]
     3c0:	ldr	w10, [x21, w7, uxtw #2]
     3c4:	cmp	w11, w10
     3c8:	b.hi	3d8 <fallbackSort+0x3d8>  // b.pmore
     3cc:	sub	x0, x0, #0x1
     3d0:	str	w6, [x4]
     3d4:	b	39c <fallbackSort+0x39c>
     3d8:	add	w5, w5, #0x4
     3dc:	str	w7, [x4], #16
     3e0:	b	3b4 <fallbackSort+0x3b4>
     3e4:	ldr	w6, [x19, x0, lsl #2]
     3e8:	add	w5, w0, #0x1
     3ec:	add	x4, x19, x0, lsl #2
     3f0:	ldr	w11, [x21, w6, sxtw #2]
     3f4:	cmp	w1, w5
     3f8:	b.lt	40c <fallbackSort+0x40c>  // b.tstop
     3fc:	ldr	w7, [x4, #4]
     400:	ldr	w10, [x21, w7, uxtw #2]
     404:	cmp	w11, w10
     408:	b.hi	418 <fallbackSort+0x418>  // b.pmore
     40c:	sub	x0, x0, #0x1
     410:	str	w6, [x4]
     414:	b	298 <fallbackSort+0x298>
     418:	add	w5, w5, #0x1
     41c:	str	w7, [x4], #4
     420:	b	3f4 <fallbackSort+0x3f4>
     424:	mov	w0, #0x1dc5                	// #7621
     428:	sxtw	x7, w3
     42c:	mul	w28, w28, w0
     430:	mov	w0, #0x3                   	// #3
     434:	add	w28, w28, #0x1
     438:	and	w28, w28, #0x7fff
     43c:	udiv	w0, w28, w0
     440:	add	w0, w0, w0, lsl #1
     444:	subs	w0, w28, w0
     448:	b.ne	4a4 <fallbackSort+0x4a4>  // b.any
     44c:	ldr	w0, [x19, x7, lsl #2]
     450:	ldr	w15, [x21, x0, lsl #2]
     454:	add	x13, x19, x7, lsl #2
     458:	mov	w0, w3
     45c:	mov	w4, w1
     460:	mov	w10, w3
     464:	mov	w5, w1
     468:	cmp	w0, w5
     46c:	b.gt	504 <fallbackSort+0x504>
     470:	ldr	w16, [x13]
     474:	ldr	w11, [x21, w16, uxtw #2]
     478:	sub	w11, w11, w15
     47c:	cmp	w11, #0x0
     480:	cbnz	w11, 4c4 <fallbackSort+0x4c4>
     484:	sbfiz	x11, x10, #2, #32
     488:	add	w10, w10, #0x1
     48c:	ldr	w17, [x19, x11]
     490:	str	w17, [x13]
     494:	str	w16, [x19, x11]
     498:	add	w0, w0, #0x1
     49c:	add	x13, x13, #0x4
     4a0:	b	468 <fallbackSort+0x468>
     4a4:	cmp	w0, #0x1
     4a8:	b.ne	4bc <fallbackSort+0x4bc>  // b.any
     4ac:	add	w0, w3, w1
     4b0:	asr	w0, w0, #1
     4b4:	ldr	w0, [x19, w0, sxtw #2]
     4b8:	b	450 <fallbackSort+0x450>
     4bc:	ldr	w0, [x19, w1, sxtw #2]
     4c0:	b	450 <fallbackSort+0x450>
     4c4:	b.le	498 <fallbackSort+0x498>
     4c8:	sxtw	x11, w5
     4cc:	ldr	w17, [x19, x11, lsl #2]
     4d0:	add	x30, x19, x11, lsl #2
     4d4:	sub	w5, w11, #0x1
     4d8:	ldr	w16, [x21, w17, uxtw #2]
     4dc:	subs	w16, w16, w15
     4e0:	cbnz	w16, 5c4 <fallbackSort+0x5c4>
     4e4:	sbfiz	x16, x4, #2, #32
     4e8:	sub	w4, w4, #0x1
     4ec:	ldr	w30, [x19, x16]
     4f0:	str	w30, [x19, x11, lsl #2]
     4f4:	str	w17, [x19, x16]
     4f8:	sub	x11, x11, #0x1
     4fc:	cmp	w0, w11
     500:	b.le	4cc <fallbackSort+0x4cc>
     504:	cmp	w10, w4
     508:	b.gt	2a0 <fallbackSort+0x2a0>
     50c:	sub	w11, w10, w3
     510:	sub	w8, w0, w10
     514:	cmp	w8, w11
     518:	csel	w8, w8, w11, le
     51c:	sub	w11, w0, w8
     520:	add	w8, w8, w3
     524:	sxtw	x11, w11
     528:	sub	w13, w8, w7
     52c:	cmp	w13, #0x0
     530:	b.gt	5d8 <fallbackSort+0x5d8>
     534:	sub	w5, w4, w5
     538:	sub	w4, w1, w4
     53c:	cmp	w4, w5
     540:	sxtw	x8, w0
     544:	csel	w4, w4, w5, le
     548:	sub	w7, w1, w4
     54c:	add	w4, w4, w0
     550:	add	w7, w7, #0x1
     554:	sxtw	x7, w7
     558:	sub	w11, w4, w8
     55c:	cmp	w11, #0x0
     560:	b.gt	5f4 <fallbackSort+0x5f4>
     564:	add	w0, w3, w0
     568:	sub	w5, w1, w5
     56c:	sub	w10, w0, w10
     570:	add	w5, w5, #0x1
     574:	sub	w10, w10, #0x1
     578:	sub	w0, w1, w5
     57c:	sub	w4, w10, w3
     580:	add	w8, w6, #0x1
     584:	cmp	w4, w0
     588:	b.le	610 <fallbackSort+0x610>
     58c:	lsl	x6, x6, #2
     590:	str	w10, [x24, x18, lsl #2]
     594:	str	w5, [x23, x6]
     598:	str	w1, [x24, x6]
     59c:	cmp	w8, #0x62
     5a0:	b.le	5bc <fallbackSort+0x5bc>
     5a4:	mov	w0, #0x3ec                 	// #1004
     5a8:	stp	w8, w14, [sp, #100]
     5ac:	str	w2, [sp, #108]
     5b0:	bl	0 <BZ2_bz__AssertH__fail>
     5b4:	ldp	w8, w14, [sp, #100]
     5b8:	ldr	w2, [sp, #108]
     5bc:	sxtw	x6, w8
     5c0:	b	260 <fallbackSort+0x260>
     5c4:	b.pl	4f8 <fallbackSort+0x4f8>  // b.nfrst
     5c8:	ldr	w11, [x13]
     5cc:	str	w17, [x13]
     5d0:	str	w11, [x30]
     5d4:	b	498 <fallbackSort+0x498>
     5d8:	ldr	w15, [x19, x11, lsl #2]
     5dc:	ldr	w13, [x19, x7, lsl #2]
     5e0:	str	w15, [x19, x7, lsl #2]
     5e4:	add	x7, x7, #0x1
     5e8:	str	w13, [x19, x11, lsl #2]
     5ec:	add	x11, x11, #0x1
     5f0:	b	528 <fallbackSort+0x528>
     5f4:	ldr	w13, [x19, x7, lsl #2]
     5f8:	ldr	w11, [x19, x8, lsl #2]
     5fc:	str	w13, [x19, x8, lsl #2]
     600:	add	x8, x8, #0x1
     604:	str	w11, [x19, x7, lsl #2]
     608:	add	x7, x7, #0x1
     60c:	b	558 <fallbackSort+0x558>
     610:	lsl	x6, x6, #2
     614:	str	w5, [x23, x18, lsl #2]
     618:	str	w3, [x23, x6]
     61c:	str	w10, [x24, x6]
     620:	b	59c <fallbackSort+0x59c>
     624:	ldr	w0, [sp, #96]
     628:	cmp	w0, #0x3
     62c:	b.le	64c <fallbackSort+0x64c>
     630:	adrp	x0, 0 <stderr>
     634:	adrp	x1, 0 <fallbackSort>
     638:	add	x1, x1, #0x0
     63c:	str	w2, [sp, #100]
     640:	ldr	x0, [x0]
     644:	bl	0 <fprintf>
     648:	ldr	w2, [sp, #100]
     64c:	lsl	w25, w25, #1
     650:	cmp	w2, #0x0
     654:	ccmp	w26, w25, #0x1, ne  // ne = any
     658:	b.ge	164 <fallbackSort+0x164>  // b.tcont
     65c:	ldr	w0, [sp, #96]
     660:	cmp	w0, #0x3
     664:	b.le	67c <fallbackSort+0x67c>
     668:	adrp	x0, 0 <stderr>
     66c:	ldr	x1, [x0]
     670:	adrp	x0, 0 <fallbackSort>
     674:	add	x0, x0, #0x0
     678:	bl	0 <fputs>
     67c:	mov	x2, #0x0                   	// #0
     680:	mov	w1, #0x0                   	// #0
     684:	cmp	w26, w2
     688:	b.le	6c4 <fallbackSort+0x6c4>
     68c:	sxtw	x0, w1
     690:	mov	w1, w0
     694:	add	x0, x0, #0x1
     698:	add	x3, sp, #0x398
     69c:	add	x3, x3, x0, lsl #2
     6a0:	ldur	w3, [x3, #-4]
     6a4:	cbz	w3, 690 <fallbackSort+0x690>
     6a8:	add	x0, sp, #0x398
     6ac:	sub	w3, w3, #0x1
     6b0:	str	w3, [x0, w1, sxtw #2]
     6b4:	ldr	w0, [x19, x2, lsl #2]
     6b8:	add	x2, x2, #0x1
     6bc:	strb	w1, [x21, x0]
     6c0:	b	684 <fallbackSort+0x684>
     6c4:	cmp	w1, #0xff
     6c8:	b.le	6f0 <fallbackSort+0x6f0>
     6cc:	ldp	x29, x30, [sp]
     6d0:	mov	w0, #0x3ed                 	// #1005
     6d4:	ldp	x19, x20, [sp, #16]
     6d8:	ldp	x21, x22, [sp, #32]
     6dc:	ldp	x23, x24, [sp, #48]
     6e0:	ldp	x25, x26, [sp, #64]
     6e4:	ldp	x27, x28, [sp, #80]
     6e8:	add	sp, sp, #0xba0
     6ec:	b	0 <BZ2_bz__AssertH__fail>
     6f0:	ldp	x29, x30, [sp]
     6f4:	ldp	x19, x20, [sp, #16]
     6f8:	ldp	x21, x22, [sp, #32]
     6fc:	ldp	x23, x24, [sp, #48]
     700:	ldp	x25, x26, [sp, #64]
     704:	ldp	x27, x28, [sp, #80]
     708:	add	sp, sp, #0xba0
     70c:	ret

0000000000000710 <mainGtU>:
     710:	ldrb	w7, [x2, w0, uxtw]
     714:	ldrb	w6, [x2, w1, uxtw]
     718:	cmp	w7, w6
     71c:	b.eq	728 <mainGtU+0x18>  // b.none
     720:	cset	w0, hi  // hi = pmore
     724:	ret
     728:	add	w6, w0, #0x1
     72c:	ldrb	w7, [x2, x6]
     730:	add	w6, w1, #0x1
     734:	ldrb	w6, [x2, x6]
     738:	cmp	w7, w6
     73c:	b.ne	720 <mainGtU+0x10>  // b.any
     740:	add	w6, w0, #0x2
     744:	ldrb	w7, [x2, x6]
     748:	add	w6, w1, #0x2
     74c:	ldrb	w6, [x2, x6]
     750:	cmp	w7, w6
     754:	b.ne	720 <mainGtU+0x10>  // b.any
     758:	add	w6, w0, #0x3
     75c:	ldrb	w7, [x2, x6]
     760:	add	w6, w1, #0x3
     764:	ldrb	w6, [x2, x6]
     768:	cmp	w7, w6
     76c:	b.ne	720 <mainGtU+0x10>  // b.any
     770:	add	w6, w0, #0x4
     774:	ldrb	w7, [x2, x6]
     778:	add	w6, w1, #0x4
     77c:	ldrb	w6, [x2, x6]
     780:	cmp	w7, w6
     784:	b.ne	720 <mainGtU+0x10>  // b.any
     788:	add	w6, w0, #0x5
     78c:	ldrb	w7, [x2, x6]
     790:	add	w6, w1, #0x5
     794:	ldrb	w6, [x2, x6]
     798:	cmp	w7, w6
     79c:	b.ne	720 <mainGtU+0x10>  // b.any
     7a0:	add	w6, w0, #0x6
     7a4:	ldrb	w7, [x2, x6]
     7a8:	add	w6, w1, #0x6
     7ac:	ldrb	w6, [x2, x6]
     7b0:	cmp	w7, w6
     7b4:	b.ne	720 <mainGtU+0x10>  // b.any
     7b8:	add	w6, w0, #0x7
     7bc:	ldrb	w7, [x2, x6]
     7c0:	add	w6, w1, #0x7
     7c4:	ldrb	w6, [x2, x6]
     7c8:	cmp	w7, w6
     7cc:	b.ne	720 <mainGtU+0x10>  // b.any
     7d0:	add	w6, w0, #0x8
     7d4:	ldrb	w7, [x2, x6]
     7d8:	add	w6, w1, #0x8
     7dc:	ldrb	w6, [x2, x6]
     7e0:	cmp	w7, w6
     7e4:	b.ne	720 <mainGtU+0x10>  // b.any
     7e8:	add	w6, w0, #0x9
     7ec:	ldrb	w7, [x2, x6]
     7f0:	add	w6, w1, #0x9
     7f4:	ldrb	w6, [x2, x6]
     7f8:	cmp	w7, w6
     7fc:	b.ne	720 <mainGtU+0x10>  // b.any
     800:	add	w6, w0, #0xa
     804:	ldrb	w7, [x2, x6]
     808:	add	w6, w1, #0xa
     80c:	ldrb	w6, [x2, x6]
     810:	cmp	w7, w6
     814:	b.ne	720 <mainGtU+0x10>  // b.any
     818:	add	w6, w0, #0xb
     81c:	ldrb	w7, [x2, x6]
     820:	add	w6, w1, #0xb
     824:	ldrb	w6, [x2, x6]
     828:	cmp	w7, w6
     82c:	b.ne	720 <mainGtU+0x10>  // b.any
     830:	add	w0, w0, #0xc
     834:	add	w1, w1, #0xc
     838:	add	w6, w4, #0x8
     83c:	ldrb	w10, [x2, w0, uxtw]
     840:	mov	w8, w0
     844:	ldrb	w9, [x2, w1, uxtw]
     848:	mov	w7, w1
     84c:	cmp	w10, w9
     850:	b.ne	720 <mainGtU+0x10>  // b.any
     854:	ldrh	w8, [x3, x8, lsl #1]
     858:	ldrh	w7, [x3, x7, lsl #1]
     85c:	cmp	w8, w7
     860:	b.ne	720 <mainGtU+0x10>  // b.any
     864:	add	w8, w0, #0x1
     868:	add	w7, w1, #0x1
     86c:	ldrb	w10, [x2, x8]
     870:	ldrb	w9, [x2, x7]
     874:	cmp	w10, w9
     878:	b.ne	720 <mainGtU+0x10>  // b.any
     87c:	ldrh	w8, [x3, x8, lsl #1]
     880:	ldrh	w7, [x3, x7, lsl #1]
     884:	cmp	w8, w7
     888:	b.ne	720 <mainGtU+0x10>  // b.any
     88c:	add	w8, w0, #0x2
     890:	add	w7, w1, #0x2
     894:	ldrb	w10, [x2, x8]
     898:	ldrb	w9, [x2, x7]
     89c:	cmp	w10, w9
     8a0:	b.ne	720 <mainGtU+0x10>  // b.any
     8a4:	ldrh	w8, [x3, x8, lsl #1]
     8a8:	ldrh	w7, [x3, x7, lsl #1]
     8ac:	cmp	w8, w7
     8b0:	b.ne	720 <mainGtU+0x10>  // b.any
     8b4:	add	w8, w0, #0x3
     8b8:	add	w7, w1, #0x3
     8bc:	ldrb	w10, [x2, x8]
     8c0:	ldrb	w9, [x2, x7]
     8c4:	cmp	w10, w9
     8c8:	b.ne	720 <mainGtU+0x10>  // b.any
     8cc:	ldrh	w8, [x3, x8, lsl #1]
     8d0:	ldrh	w7, [x3, x7, lsl #1]
     8d4:	cmp	w8, w7
     8d8:	b.ne	720 <mainGtU+0x10>  // b.any
     8dc:	add	w8, w0, #0x4
     8e0:	add	w7, w1, #0x4
     8e4:	ldrb	w10, [x2, x8]
     8e8:	ldrb	w9, [x2, x7]
     8ec:	cmp	w10, w9
     8f0:	b.ne	720 <mainGtU+0x10>  // b.any
     8f4:	ldrh	w8, [x3, x8, lsl #1]
     8f8:	ldrh	w7, [x3, x7, lsl #1]
     8fc:	cmp	w8, w7
     900:	b.ne	720 <mainGtU+0x10>  // b.any
     904:	add	w8, w0, #0x5
     908:	add	w7, w1, #0x5
     90c:	ldrb	w10, [x2, x8]
     910:	ldrb	w9, [x2, x7]
     914:	cmp	w10, w9
     918:	b.ne	720 <mainGtU+0x10>  // b.any
     91c:	ldrh	w8, [x3, x8, lsl #1]
     920:	ldrh	w7, [x3, x7, lsl #1]
     924:	cmp	w8, w7
     928:	b.ne	720 <mainGtU+0x10>  // b.any
     92c:	add	w8, w0, #0x6
     930:	add	w7, w1, #0x6
     934:	ldrb	w10, [x2, x8]
     938:	ldrb	w9, [x2, x7]
     93c:	cmp	w10, w9
     940:	b.ne	720 <mainGtU+0x10>  // b.any
     944:	ldrh	w8, [x3, x8, lsl #1]
     948:	ldrh	w7, [x3, x7, lsl #1]
     94c:	cmp	w8, w7
     950:	b.ne	720 <mainGtU+0x10>  // b.any
     954:	add	w8, w0, #0x7
     958:	add	w7, w1, #0x7
     95c:	ldrb	w10, [x2, x8]
     960:	ldrb	w9, [x2, x7]
     964:	cmp	w10, w9
     968:	b.ne	720 <mainGtU+0x10>  // b.any
     96c:	ldrh	w8, [x3, x8, lsl #1]
     970:	ldrh	w7, [x3, x7, lsl #1]
     974:	cmp	w8, w7
     978:	b.ne	720 <mainGtU+0x10>  // b.any
     97c:	add	w0, w0, #0x8
     980:	add	w1, w1, #0x8
     984:	cmp	w4, w0
     988:	b.hi	990 <mainGtU+0x280>  // b.pmore
     98c:	sub	w0, w0, w4
     990:	cmp	w4, w1
     994:	b.hi	99c <mainGtU+0x28c>  // b.pmore
     998:	sub	w1, w1, w4
     99c:	ldr	w7, [x5]
     9a0:	subs	w6, w6, #0x8
     9a4:	sub	w7, w7, #0x1
     9a8:	str	w7, [x5]
     9ac:	b.pl	83c <mainGtU+0x12c>  // b.nfrst
     9b0:	mov	w0, #0x0                   	// #0
     9b4:	b	724 <mainGtU+0x14>

00000000000009b8 <mainSort>:
     9b8:	mov	x12, #0x1270                	// #4720
     9bc:	sub	sp, sp, x12
     9c0:	stp	x29, x30, [sp]
     9c4:	mov	x29, sp
     9c8:	stp	x19, x20, [sp, #16]
     9cc:	mov	x19, x0
     9d0:	mov	w0, w5
     9d4:	stp	x21, x22, [sp, #32]
     9d8:	mov	x20, x3
     9dc:	mov	x21, x1
     9e0:	stp	x23, x24, [sp, #48]
     9e4:	mov	x22, x2
     9e8:	mov	w23, w4
     9ec:	stp	x25, x26, [sp, #64]
     9f0:	mov	x24, x6
     9f4:	cmp	w0, #0x3
     9f8:	stp	x27, x28, [sp, #80]
     9fc:	str	w5, [sp, #124]
     a00:	b.le	a18 <mainSort+0x60>
     a04:	adrp	x0, 0 <stderr>
     a08:	ldr	x1, [x0]
     a0c:	adrp	x0, 0 <fallbackSort>
     a10:	add	x0, x0, #0x0
     a14:	bl	0 <fputs>
     a18:	mov	x0, #0x10000               	// #65536
     a1c:	str	wzr, [x20, x0, lsl #2]
     a20:	sub	x0, x0, #0x1
     a24:	cmn	x0, #0x1
     a28:	b.ne	a1c <mainSort+0x64>  // b.any
     a2c:	mov	x3, x21
     a30:	sub	w1, w23, #0x1
     a34:	sub	x4, x22, #0x2
     a38:	sub	x5, x22, #0x4
     a3c:	sxtw	x25, w1
     a40:	sub	x6, x21, #0x2
     a44:	ldrb	w0, [x3], #-1
     a48:	sub	x7, x22, #0x6
     a4c:	sub	x8, x21, #0x3
     a50:	str	w1, [sp, #136]
     a54:	mov	x1, x25
     a58:	lsl	w0, w0, #8
     a5c:	cmp	w1, #0x2
     a60:	b.gt	c8c <mainSort+0x2d4>
     a64:	sxtw	x1, w1
     a68:	tbz	w1, #31, d14 <mainSort+0x35c>
     a6c:	add	x1, x22, w23, sxtw #1
     a70:	add	x2, x21, w23, sxtw
     a74:	mov	x0, #0x0                   	// #0
     a78:	ldrb	w3, [x21, x0]
     a7c:	strb	w3, [x2, x0]
     a80:	strh	wzr, [x1, x0, lsl #1]
     a84:	add	x0, x0, #0x1
     a88:	cmp	x0, #0x22
     a8c:	b.ne	a78 <mainSort+0xc0>  // b.any
     a90:	ldr	w0, [sp, #124]
     a94:	cmp	w0, #0x3
     a98:	b.le	ab0 <mainSort+0xf8>
     a9c:	adrp	x0, 0 <stderr>
     aa0:	ldr	x1, [x0]
     aa4:	adrp	x0, 0 <fallbackSort>
     aa8:	add	x0, x0, #0x0
     aac:	bl	0 <fputs>
     ab0:	add	x2, x20, #0x40, lsl #12
     ab4:	add	x0, x20, #0x4
     ab8:	add	x2, x2, #0x4
     abc:	ldp	w3, w1, [x0, #-4]
     ac0:	add	w1, w1, w3
     ac4:	str	w1, [x0], #4
     ac8:	cmp	x2, x0
     acc:	b.ne	abc <mainSort+0x104>  // b.any
     ad0:	ldrb	w1, [x21]
     ad4:	add	x2, x21, x25
     ad8:	ldr	w0, [sp, #136]
     adc:	ubfiz	w1, w1, #8, #8
     ae0:	cmp	w0, #0x2
     ae4:	b.gt	d3c <mainSort+0x384>
     ae8:	sxtw	x0, w0
     aec:	tbz	w0, #31, dd4 <mainSort+0x41c>
     af0:	add	x1, sp, #0xc0
     af4:	add	x2, sp, #0x670
     af8:	mov	x0, #0x0                   	// #0
     afc:	strb	wzr, [x0, x1]
     b00:	str	w0, [x2, x0, lsl #2]
     b04:	add	x0, x0, #0x1
     b08:	cmp	x0, #0x100
     b0c:	b.ne	afc <mainSort+0x144>  // b.any
     b10:	mov	w1, #0x5                   	// #5
     b14:	mov	w0, #0x1                   	// #1
     b18:	add	w0, w0, w0, lsl #1
     b1c:	subs	w1, w1, #0x1
     b20:	add	w0, w0, #0x1
     b24:	b.ne	b18 <mainSort+0x160>  // b.any
     b28:	mov	w12, #0x3                   	// #3
     b2c:	sdiv	w0, w0, w12
     b30:	neg	w4, w0
     b34:	sxtw	x10, w0
     b38:	mov	x1, x10
     b3c:	sxtw	x4, w4
     b40:	cmp	w1, #0xff
     b44:	b.le	dfc <mainSort+0x444>
     b48:	cmp	w0, #0x1
     b4c:	b.ne	b2c <mainSort+0x174>  // b.any
     b50:	add	x0, x19, #0x4
     b54:	str	xzr, [sp, #96]
     b58:	str	wzr, [sp, #120]
     b5c:	str	x0, [sp, #160]
     b60:	ldr	x0, [sp, #96]
     b64:	add	x1, sp, #0x670
     b68:	mov	w28, #0x0                   	// #0
     b6c:	ldr	w25, [x1, x0, lsl #2]
     b70:	lsl	w0, w25, #8
     b74:	str	w0, [sp, #140]
     b78:	cmp	w25, w28
     b7c:	b.eq	1348 <mainSort+0x990>  // b.none
     b80:	ldr	w0, [sp, #140]
     b84:	add	w0, w28, w0
     b88:	sbfiz	x1, x0, #2, #32
     b8c:	str	x1, [sp, #128]
     b90:	add	x0, x20, w0, sxtw #2
     b94:	ldr	w27, [x20, x1]
     b98:	tbnz	w27, #21, 1334 <mainSort+0x97c>
     b9c:	ldr	w26, [x0, #4]
     ba0:	and	w27, w27, #0xffdfffff
     ba4:	and	w26, w26, #0xffdfffff
     ba8:	sub	w26, w26, #0x1
     bac:	cmp	w27, w26
     bb0:	b.ge	1334 <mainSort+0x97c>  // b.tcont
     bb4:	sub	w0, w26, w27
     bb8:	add	w0, w0, #0x1
     bbc:	str	w0, [sp, #168]
     bc0:	ldr	w0, [sp, #124]
     bc4:	cmp	w0, #0x3
     bc8:	b.le	bf0 <mainSort+0x238>
     bcc:	adrp	x0, 0 <stderr>
     bd0:	ldr	w4, [sp, #120]
     bd4:	ldr	w5, [sp, #168]
     bd8:	adrp	x1, 0 <fallbackSort>
     bdc:	ldr	x0, [x0]
     be0:	mov	w3, w28
     be4:	mov	w2, w25
     be8:	add	x1, x1, #0x0
     bec:	bl	0 <fprintf>
     bf0:	mov	w0, #0x2                   	// #2
     bf4:	str	w27, [sp, #448]
     bf8:	str	w26, [sp, #848]
     bfc:	mov	w26, #0x1                   	// #1
     c00:	str	w0, [sp, #1248]
     c04:	sub	w6, w26, #0x1
     c08:	add	x1, sp, #0x1c0
     c0c:	sbfiz	x0, x6, #2, #32
     c10:	sxtw	x4, w6
     c14:	ldr	w13, [x1, x0]
     c18:	add	x1, sp, #0x350
     c1c:	ldr	w11, [x1, x0]
     c20:	add	x1, sp, #0x4e0
     c24:	ldr	w12, [x1, x0]
     c28:	sub	w0, w11, w13
     c2c:	cmp	w0, #0x13
     c30:	b.le	c3c <mainSort+0x284>
     c34:	cmp	w12, #0xe
     c38:	b.le	106c <mainSort+0x6b4>
     c3c:	add	w0, w0, #0x1
     c40:	cmp	w0, #0x1
     c44:	b.gt	e70 <mainSort+0x4b8>
     c48:	ldr	w0, [x24]
     c4c:	tbz	w0, #31, 132c <mainSort+0x974>
     c50:	ldr	w0, [sp, #120]
     c54:	ldr	w1, [sp, #168]
     c58:	add	w0, w0, w1
     c5c:	str	w0, [sp, #120]
     c60:	ldr	w0, [x24]
     c64:	tbz	w0, #31, 1334 <mainSort+0x97c>
     c68:	mov	x12, #0x1270                	// #4720
     c6c:	ldp	x29, x30, [sp]
     c70:	ldp	x19, x20, [sp, #16]
     c74:	ldp	x21, x22, [sp, #32]
     c78:	ldp	x23, x24, [sp, #48]
     c7c:	ldp	x25, x26, [sp, #64]
     c80:	ldp	x27, x28, [sp, #80]
     c84:	add	sp, sp, x12
     c88:	ret
     c8c:	strh	wzr, [x22, x1, lsl #1]
     c90:	ldrb	w2, [x21, x1]
     c94:	lsl	w2, w2, #8
     c98:	orr	w0, w2, w0, asr #8
     c9c:	sbfiz	x9, x0, #2, #32
     ca0:	ldr	w2, [x20, x9]
     ca4:	add	w2, w2, #0x1
     ca8:	str	w2, [x20, x9]
     cac:	strh	wzr, [x4, x1, lsl #1]
     cb0:	ldrb	w2, [x3, x1]
     cb4:	lsl	w2, w2, #8
     cb8:	orr	w0, w2, w0, asr #8
     cbc:	sbfiz	x9, x0, #2, #32
     cc0:	ldr	w2, [x20, x9]
     cc4:	add	w2, w2, #0x1
     cc8:	str	w2, [x20, x9]
     ccc:	strh	wzr, [x5, x1, lsl #1]
     cd0:	ldrb	w2, [x6, x1]
     cd4:	lsl	w2, w2, #8
     cd8:	orr	w0, w2, w0, asr #8
     cdc:	sbfiz	x9, x0, #2, #32
     ce0:	ldr	w2, [x20, x9]
     ce4:	add	w2, w2, #0x1
     ce8:	str	w2, [x20, x9]
     cec:	strh	wzr, [x7, x1, lsl #1]
     cf0:	ldrb	w2, [x8, x1]
     cf4:	sub	x1, x1, #0x4
     cf8:	lsl	w2, w2, #8
     cfc:	orr	w0, w2, w0, asr #8
     d00:	sbfiz	x9, x0, #2, #32
     d04:	ldr	w2, [x20, x9]
     d08:	add	w2, w2, #0x1
     d0c:	str	w2, [x20, x9]
     d10:	b	a5c <mainSort+0xa4>
     d14:	strh	wzr, [x22, x1, lsl #1]
     d18:	ldrb	w2, [x21, x1]
     d1c:	sub	x1, x1, #0x1
     d20:	lsl	w2, w2, #8
     d24:	orr	w0, w2, w0, asr #8
     d28:	sbfiz	x3, x0, #2, #32
     d2c:	ldr	w2, [x20, x3]
     d30:	add	w2, w2, #0x1
     d34:	str	w2, [x20, x3]
     d38:	b	a68 <mainSort+0xb0>
     d3c:	ldrb	w3, [x2]
     d40:	lsr	w1, w1, #8
     d44:	sub	x2, x2, #0x4
     d48:	orr	w1, w1, w3, lsl #8
     d4c:	ubfiz	x4, x1, #2, #16
     d50:	lsr	w1, w1, #8
     d54:	ldr	w3, [x20, x4]
     d58:	sub	w3, w3, #0x1
     d5c:	str	w3, [x20, x4]
     d60:	str	w0, [x19, w3, sxtw #2]
     d64:	ldrb	w3, [x2, #3]
     d68:	orr	w1, w1, w3, lsl #8
     d6c:	ubfiz	x4, x1, #2, #16
     d70:	lsr	w1, w1, #8
     d74:	ldr	w3, [x20, x4]
     d78:	sub	w3, w3, #0x1
     d7c:	str	w3, [x20, x4]
     d80:	sub	w4, w0, #0x1
     d84:	str	w4, [x19, w3, sxtw #2]
     d88:	ldrb	w3, [x2, #2]
     d8c:	orr	w3, w1, w3, lsl #8
     d90:	ubfiz	x4, x3, #2, #16
     d94:	lsr	w3, w3, #8
     d98:	ldr	w1, [x20, x4]
     d9c:	sub	w1, w1, #0x1
     da0:	str	w1, [x20, x4]
     da4:	sub	w4, w0, #0x2
     da8:	str	w4, [x19, w1, sxtw #2]
     dac:	ldrb	w1, [x2, #1]
     db0:	orr	w1, w3, w1, lsl #8
     db4:	ubfiz	x4, x1, #2, #16
     db8:	ldr	w3, [x20, x4]
     dbc:	sub	w3, w3, #0x1
     dc0:	str	w3, [x20, x4]
     dc4:	sub	w4, w0, #0x3
     dc8:	sub	w0, w0, #0x4
     dcc:	str	w4, [x19, w3, sxtw #2]
     dd0:	b	ae0 <mainSort+0x128>
     dd4:	ldrb	w2, [x21, x0]
     dd8:	lsr	w1, w1, #8
     ddc:	orr	w1, w1, w2, lsl #8
     de0:	ubfiz	x3, x1, #2, #32
     de4:	ldr	w2, [x20, x3]
     de8:	sub	w2, w2, #0x1
     dec:	str	w2, [x20, x3]
     df0:	str	w0, [x19, w2, sxtw #2]
     df4:	sub	x0, x0, #0x1
     df8:	b	aec <mainSort+0x134>
     dfc:	ldr	w6, [x2, x1, lsl #2]
     e00:	add	w3, w6, #0x1
     e04:	lsl	w5, w6, #8
     e08:	lsl	w3, w3, #8
     e0c:	ldr	w7, [x20, w3, sxtw #2]
     e10:	ldr	w3, [x20, w5, sxtw #2]
     e14:	sub	x5, x1, x10
     e18:	sub	w7, w7, w3
     e1c:	mov	x3, x1
     e20:	ldr	w9, [x2, x5, lsl #2]
     e24:	mov	w11, w5
     e28:	add	w8, w9, #0x1
     e2c:	lsl	w13, w9, #8
     e30:	lsl	w8, w8, #8
     e34:	ldr	w13, [x20, w13, sxtw #2]
     e38:	ldr	w8, [x20, w8, sxtw #2]
     e3c:	sub	w8, w8, w13
     e40:	cmp	w8, w7
     e44:	b.hi	e50 <mainSort+0x498>  // b.pmore
     e48:	mov	w11, w3
     e4c:	b	e64 <mainSort+0x4ac>
     e50:	str	w9, [x2, x3, lsl #2]
     e54:	add	x3, x3, x4
     e58:	add	x5, x5, x4
     e5c:	cmp	w0, w3
     e60:	b.le	e20 <mainSort+0x468>
     e64:	add	x1, x1, #0x1
     e68:	str	w6, [x2, w11, sxtw #2]
     e6c:	b	b40 <mainSort+0x188>
     e70:	adrp	x2, 0 <fallbackSort>
     e74:	mov	x1, #0x0                   	// #0
     e78:	add	x2, x2, #0x0
     e7c:	str	x2, [sp, #144]
     e80:	ldr	x2, [sp, #144]
     e84:	mov	w26, w1
     e88:	add	x1, x1, #0x1
     e8c:	ldr	w2, [x2, x1, lsl #2]
     e90:	cmp	w0, w2
     e94:	b.gt	e80 <mainSort+0x4c8>
     e98:	sxtw	x0, w26
     e9c:	str	x0, [sp, #112]
     ea0:	add	x0, x19, #0x8
     ea4:	str	x0, [sp, #152]
     ea8:	ldr	w0, [sp, #112]
     eac:	cmn	w0, #0x1
     eb0:	b.eq	c48 <mainSort+0x290>  // b.none
     eb4:	ldr	x1, [sp, #112]
     eb8:	ldr	x0, [sp, #144]
     ebc:	ldr	w26, [x0, x1, lsl #2]
     ec0:	add	w0, w13, w26
     ec4:	str	w0, [sp, #104]
     ec8:	sxtw	x15, w26
     ecc:	neg	w27, w26
     ed0:	sxtw	x14, w0
     ed4:	mov	x0, #0xfffffffffffffffc    	// #-4
     ed8:	sxtw	x27, w27
     edc:	madd	x15, x15, x0, x19
     ee0:	cmp	w11, w14
     ee4:	b.lt	105c <mainSort+0x6a4>  // b.tstop
     ee8:	ldr	w9, [x19, x14, lsl #2]
     eec:	mov	x18, x14
     ef0:	add	w1, w9, w12
     ef4:	sub	w8, w18, w26
     ef8:	ldr	w0, [x15, x18, lsl #2]
     efc:	mov	x5, x24
     f00:	mov	w4, w23
     f04:	mov	x3, x22
     f08:	mov	x2, x21
     f0c:	add	w0, w12, w0
     f10:	stp	w1, w8, [sp, #172]
     f14:	stp	w6, w9, [sp, #180]
     f18:	bl	710 <mainGtU>
     f1c:	ldp	w1, w8, [sp, #172]
     f20:	tst	w0, #0xff
     f24:	ldp	w6, w9, [sp, #180]
     f28:	b.ne	f34 <mainSort+0x57c>  // b.any
     f2c:	mov	w8, w18
     f30:	b	f4c <mainSort+0x594>
     f34:	ldr	w0, [x15, x18, lsl #2]
     f38:	str	w0, [x19, x18, lsl #2]
     f3c:	add	x18, x18, x27
     f40:	ldr	w0, [sp, #104]
     f44:	cmp	w0, w18
     f48:	b.le	ef4 <mainSort+0x53c>
     f4c:	str	w9, [x19, w8, sxtw #2]
     f50:	add	w0, w14, #0x1
     f54:	mov	w8, w14
     f58:	cmp	w11, w0
     f5c:	b.lt	105c <mainSort+0x6a4>  // b.tstop
     f60:	ldr	x0, [sp, #160]
     f64:	add	x18, x14, #0x1
     f68:	ldr	w10, [x0, x14, lsl #2]
     f6c:	add	w1, w12, w10
     f70:	sub	w9, w18, w26
     f74:	ldr	w0, [x15, x18, lsl #2]
     f78:	mov	x5, x24
     f7c:	mov	w4, w23
     f80:	mov	x3, x22
     f84:	mov	x2, x21
     f88:	add	w0, w12, w0
     f8c:	stp	w1, w9, [sp, #172]
     f90:	stp	w6, w10, [sp, #180]
     f94:	str	w8, [sp, #188]
     f98:	bl	710 <mainGtU>
     f9c:	ldp	w1, w9, [sp, #172]
     fa0:	tst	w0, #0xff
     fa4:	ldp	w6, w10, [sp, #180]
     fa8:	ldr	w8, [sp, #188]
     fac:	b.ne	fb8 <mainSort+0x600>  // b.any
     fb0:	mov	w9, w18
     fb4:	b	fd0 <mainSort+0x618>
     fb8:	ldr	w0, [x15, x18, lsl #2]
     fbc:	str	w0, [x19, x18, lsl #2]
     fc0:	add	x18, x18, x27
     fc4:	ldr	w0, [sp, #104]
     fc8:	cmp	w0, w18
     fcc:	b.le	f70 <mainSort+0x5b8>
     fd0:	str	w10, [x19, w9, sxtw #2]
     fd4:	add	w8, w8, #0x2
     fd8:	cmp	w11, w8
     fdc:	b.lt	105c <mainSort+0x6a4>  // b.tstop
     fe0:	ldr	x0, [sp, #152]
     fe4:	add	x18, x14, #0x2
     fe8:	ldr	w9, [x0, x14, lsl #2]
     fec:	add	w1, w12, w9
     ff0:	sub	w8, w18, w26
     ff4:	ldr	w0, [x15, x18, lsl #2]
     ff8:	mov	x5, x24
     ffc:	mov	w4, w23
    1000:	mov	x3, x22
    1004:	mov	x2, x21
    1008:	add	w0, w12, w0
    100c:	stp	w1, w8, [sp, #172]
    1010:	stp	w6, w9, [sp, #180]
    1014:	bl	710 <mainGtU>
    1018:	ldp	w1, w8, [sp, #172]
    101c:	tst	w0, #0xff
    1020:	ldp	w6, w9, [sp, #180]
    1024:	b.ne	1030 <mainSort+0x678>  // b.any
    1028:	mov	w8, w18
    102c:	b	1048 <mainSort+0x690>
    1030:	ldr	w0, [x15, x18, lsl #2]
    1034:	str	w0, [x19, x18, lsl #2]
    1038:	add	x18, x18, x27
    103c:	ldr	w0, [sp, #104]
    1040:	cmp	w0, w18
    1044:	b.le	ff0 <mainSort+0x638>
    1048:	str	w9, [x19, w8, sxtw #2]
    104c:	add	x14, x14, #0x3
    1050:	ldr	w0, [x24]
    1054:	tbz	w0, #31, ee0 <mainSort+0x528>
    1058:	b	c50 <mainSort+0x298>
    105c:	ldr	x0, [sp, #112]
    1060:	sub	x0, x0, #0x1
    1064:	str	x0, [sp, #112]
    1068:	b	ea8 <mainSort+0x4f0>
    106c:	ldr	w1, [x19, w11, sxtw #2]
    1070:	sxtw	x8, w13
    1074:	ldr	w0, [x19, w13, sxtw #2]
    1078:	add	x3, x19, w13, sxtw #2
    107c:	add	w1, w12, w1
    1080:	add	w0, w12, w0
    1084:	ldrb	w5, [x21, x1]
    1088:	add	w1, w13, w11
    108c:	ldrb	w0, [x21, x0]
    1090:	asr	w1, w1, #1
    1094:	cmp	w0, w5
    1098:	ldr	w1, [x19, w1, sxtw #2]
    109c:	add	w1, w12, w1
    10a0:	ldrb	w1, [x21, x1]
    10a4:	b.ls	10b4 <mainSort+0x6fc>  // b.plast
    10a8:	mov	w2, w0
    10ac:	mov	w0, w5
    10b0:	mov	w5, w2
    10b4:	cmp	w1, w5
    10b8:	b.cs	10c8 <mainSort+0x710>  // b.hs, b.nlast
    10bc:	cmp	w0, w1
    10c0:	csel	w0, w0, w1, hi  // hi = pmore
    10c4:	and	w5, w0, #0xff
    10c8:	mov	w0, w13
    10cc:	mov	w2, w11
    10d0:	mov	w7, w13
    10d4:	mov	w1, w11
    10d8:	cmp	w0, w1
    10dc:	b.gt	115c <mainSort+0x7a4>
    10e0:	ldr	w10, [x3]
    10e4:	add	w9, w12, w10
    10e8:	ldrb	w9, [x21, x9]
    10ec:	sub	w9, w9, w5
    10f0:	cmp	w9, #0x0
    10f4:	cbnz	w9, 1118 <mainSort+0x760>
    10f8:	sbfiz	x9, x7, #2, #32
    10fc:	add	w7, w7, #0x1
    1100:	ldr	w14, [x19, x9]
    1104:	str	w14, [x3]
    1108:	str	w10, [x19, x9]
    110c:	add	w0, w0, #0x1
    1110:	add	x3, x3, #0x4
    1114:	b	10d8 <mainSort+0x720>
    1118:	b.le	110c <mainSort+0x754>
    111c:	sxtw	x9, w1
    1120:	ldr	w14, [x19, x9, lsl #2]
    1124:	add	x15, x19, x9, lsl #2
    1128:	add	w1, w12, w14
    112c:	ldrb	w10, [x21, x1]
    1130:	sub	w1, w9, #0x1
    1134:	subs	w10, w10, w5
    1138:	cbnz	w10, 117c <mainSort+0x7c4>
    113c:	sbfiz	x10, x2, #2, #32
    1140:	sub	w2, w2, #0x1
    1144:	ldr	w15, [x19, x10]
    1148:	str	w15, [x19, x9, lsl #2]
    114c:	str	w14, [x19, x10]
    1150:	sub	x9, x9, #0x1
    1154:	cmp	w0, w9
    1158:	b.le	1120 <mainSort+0x768>
    115c:	add	w5, w12, #0x1
    1160:	cmp	w7, w2
    1164:	b.le	1190 <mainSort+0x7d8>
    1168:	add	x0, sp, #0x4e0
    116c:	str	w5, [x0, w6, sxtw #2]
    1170:	mov	w6, w26
    1174:	mov	w26, w6
    1178:	b	12d8 <mainSort+0x920>
    117c:	b.pl	1150 <mainSort+0x798>  // b.nfrst
    1180:	ldr	w9, [x3]
    1184:	str	w14, [x3]
    1188:	str	w9, [x15]
    118c:	b	110c <mainSort+0x754>
    1190:	sub	w6, w7, w13
    1194:	sub	w3, w0, w7
    1198:	cmp	w3, w6
    119c:	csel	w3, w3, w6, le
    11a0:	sub	w6, w0, w3
    11a4:	add	w3, w3, w13
    11a8:	sxtw	x6, w6
    11ac:	sub	w9, w3, w8
    11b0:	cmp	w9, #0x0
    11b4:	b.gt	12ec <mainSort+0x934>
    11b8:	sub	w1, w2, w1
    11bc:	sub	w2, w11, w2
    11c0:	cmp	w2, w1
    11c4:	sxtw	x6, w0
    11c8:	csel	w2, w2, w1, le
    11cc:	sub	w3, w11, w2
    11d0:	add	w2, w2, w0
    11d4:	add	w3, w3, #0x1
    11d8:	sxtw	x3, w3
    11dc:	sub	w8, w2, w6
    11e0:	cmp	w8, #0x0
    11e4:	b.gt	1308 <mainSort+0x950>
    11e8:	add	w0, w13, w0
    11ec:	sub	w1, w11, w1
    11f0:	sub	w7, w0, w7
    11f4:	add	w2, w1, #0x1
    11f8:	sub	w3, w7, #0x1
    11fc:	sub	w0, w11, w2
    1200:	sub	w6, w3, w13
    1204:	cmp	w6, w0
    1208:	b.ge	1224 <mainSort+0x86c>  // b.tcont
    120c:	mov	w0, w3
    1210:	mov	w3, w11
    1214:	mov	w11, w0
    1218:	mov	w0, w13
    121c:	mov	w13, w2
    1220:	mov	w2, w0
    1224:	sub	w0, w11, w2
    1228:	sub	w6, w1, w7
    122c:	cmp	w0, w6
    1230:	b.ge	1324 <mainSort+0x96c>  // b.tcont
    1234:	mov	w6, w11
    1238:	mov	w11, w1
    123c:	mov	w1, w6
    1240:	mov	w6, w2
    1244:	mov	w0, w5
    1248:	mov	w2, w7
    124c:	mov	w5, w12
    1250:	mov	w7, w6
    1254:	sub	w6, w3, w13
    1258:	sub	w8, w11, w2
    125c:	cmp	w6, w8
    1260:	b.ge	1288 <mainSort+0x8d0>  // b.tcont
    1264:	mov	w6, w12
    1268:	mov	w12, w0
    126c:	mov	w0, w6
    1270:	mov	w6, w3
    1274:	mov	w3, w11
    1278:	mov	w11, w6
    127c:	mov	w6, w13
    1280:	mov	w13, w2
    1284:	mov	w2, w6
    1288:	lsl	x4, x4, #2
    128c:	add	x6, sp, #0x1c0
    1290:	str	w13, [x6, x4]
    1294:	add	x6, sp, #0x350
    1298:	str	w3, [x6, x4]
    129c:	add	x3, sp, #0x4e0
    12a0:	add	x6, sp, #0x1c0
    12a4:	str	w12, [x3, x4]
    12a8:	sbfiz	x4, x26, #2, #32
    12ac:	str	w2, [x6, x4]
    12b0:	add	x2, sp, #0x350
    12b4:	str	w0, [x3, x4]
    12b8:	add	w0, w26, #0x1
    12bc:	add	w26, w26, #0x2
    12c0:	sbfiz	x0, x0, #2, #32
    12c4:	str	w11, [x2, x4]
    12c8:	add	x2, sp, #0x350
    12cc:	str	w7, [x6, x0]
    12d0:	str	w1, [x2, x0]
    12d4:	str	w5, [x3, x0]
    12d8:	cmp	w26, #0x61
    12dc:	b.le	c04 <mainSort+0x24c>
    12e0:	mov	w0, #0x3e9                 	// #1001
    12e4:	bl	0 <BZ2_bz__AssertH__fail>
    12e8:	b	c04 <mainSort+0x24c>
    12ec:	ldr	w10, [x19, x6, lsl #2]
    12f0:	ldr	w9, [x19, x8, lsl #2]
    12f4:	str	w10, [x19, x8, lsl #2]
    12f8:	add	x8, x8, #0x1
    12fc:	str	w9, [x19, x6, lsl #2]
    1300:	add	x6, x6, #0x1
    1304:	b	11ac <mainSort+0x7f4>
    1308:	ldr	w9, [x19, x3, lsl #2]
    130c:	ldr	w8, [x19, x6, lsl #2]
    1310:	str	w9, [x19, x6, lsl #2]
    1314:	add	x6, x6, #0x1
    1318:	str	w8, [x19, x3, lsl #2]
    131c:	add	x3, x3, #0x1
    1320:	b	11dc <mainSort+0x824>
    1324:	mov	w0, w12
    1328:	b	1254 <mainSort+0x89c>
    132c:	cbnz	w6, 1174 <mainSort+0x7bc>
    1330:	b	c50 <mainSort+0x298>
    1334:	ldr	x0, [sp, #128]
    1338:	ldr	x1, [sp, #128]
    133c:	ldr	w0, [x20, x0]
    1340:	orr	w0, w0, #0x200000
    1344:	str	w0, [x20, x1]
    1348:	add	w28, w28, #0x1
    134c:	cmp	w28, #0x100
    1350:	b.ne	b78 <mainSort+0x1c0>  // b.any
    1354:	add	x28, sp, #0xc0
    1358:	sxtw	x27, w25
    135c:	ldrb	w0, [x28, w25, sxtw]
    1360:	cbz	w0, 136c <mainSort+0x9b4>
    1364:	mov	w0, #0x3ee                 	// #1006
    1368:	bl	0 <BZ2_bz__AssertH__fail>
    136c:	add	x26, x20, x27, lsl #2
    1370:	add	x5, sp, #0xa70
    1374:	mov	x2, x26
    1378:	add	x4, sp, #0xe70
    137c:	mov	x0, #0x0                   	// #0
    1380:	ldr	w1, [x2]
    1384:	and	w1, w1, #0xffdfffff
    1388:	str	w1, [x0, x5]
    138c:	ldr	w1, [x2, #4]
    1390:	add	x2, x2, #0x400
    1394:	and	w1, w1, #0xffdfffff
    1398:	sub	w1, w1, #0x1
    139c:	str	w1, [x0, x4]
    13a0:	add	x0, x0, #0x4
    13a4:	cmp	x0, #0x400
    13a8:	b.ne	1380 <mainSort+0x9c8>  // b.any
    13ac:	ldr	w0, [sp, #140]
    13b0:	lsl	x7, x27, #2
    13b4:	sbfiz	x2, x0, #2, #32
    13b8:	ldr	w0, [x20, x2]
    13bc:	and	w0, w0, #0xffdfffff
    13c0:	sxtw	x0, w0
    13c4:	ldr	w6, [x5, x7]
    13c8:	cmp	w6, w0
    13cc:	b.gt	1510 <mainSort+0xb58>
    13d0:	add	w3, w25, #0x1
    13d4:	lsl	x8, x27, #2
    13d8:	lsl	w3, w3, #8
    13dc:	sbfiz	x25, x3, #2, #32
    13e0:	ldr	w0, [x20, x25]
    13e4:	and	w0, w0, #0xffdfffff
    13e8:	sub	w0, w0, #0x1
    13ec:	sxtw	x0, w0
    13f0:	ldr	w1, [x4, x8]
    13f4:	cmp	w1, w0
    13f8:	b.lt	1548 <mainSort+0xb90>  // b.tstop
    13fc:	sub	w0, w6, #0x1
    1400:	cmp	w1, w0
    1404:	b.eq	1428 <mainSort+0xa70>  // b.none
    1408:	cbnz	w6, 1418 <mainSort+0xa60>
    140c:	ldr	w0, [sp, #136]
    1410:	cmp	w1, w0
    1414:	b.eq	1428 <mainSort+0xa70>  // b.none
    1418:	mov	w0, #0x3ef                 	// #1007
    141c:	str	x2, [sp, #104]
    1420:	bl	0 <BZ2_bz__AssertH__fail>
    1424:	ldr	x2, [sp, #104]
    1428:	mov	w0, #0x0                   	// #0
    142c:	ldr	w1, [x26]
    1430:	add	w0, w0, #0x1
    1434:	cmp	w0, #0x100
    1438:	orr	w1, w1, #0x200000
    143c:	str	w1, [x26]
    1440:	add	x26, x26, #0x400
    1444:	b.ne	142c <mainSort+0xa74>  // b.any
    1448:	mov	w0, #0x1                   	// #1
    144c:	strb	w0, [x28, x27]
    1450:	ldr	x0, [sp, #96]
    1454:	cmp	x0, #0xff
    1458:	b.eq	14ac <mainSort+0xaf4>  // b.none
    145c:	ldr	w1, [x20, x2]
    1460:	mov	w3, #0xfffe                	// #65534
    1464:	ldr	w0, [x20, x25]
    1468:	mov	w2, #0x0                   	// #0
    146c:	and	w1, w1, #0xffdfffff
    1470:	and	w0, w0, #0xffdfffff
    1474:	sub	w0, w0, w1
    1478:	asr	w4, w0, w2
    147c:	cmp	w4, w3
    1480:	b.gt	1580 <mainSort+0xbc8>
    1484:	sub	w0, w0, #0x1
    1488:	add	x1, x19, w1, sxtw #2
    148c:	sxtw	x3, w0
    1490:	tbz	w3, #31, 1588 <mainSort+0xbd0>
    1494:	asr	w0, w0, w2
    1498:	mov	w1, #0xffff                	// #65535
    149c:	cmp	w0, w1
    14a0:	b.le	14ac <mainSort+0xaf4>
    14a4:	mov	w0, #0x3ea                 	// #1002
    14a8:	bl	0 <BZ2_bz__AssertH__fail>
    14ac:	ldr	x0, [sp, #96]
    14b0:	add	x0, x0, #0x1
    14b4:	str	x0, [sp, #96]
    14b8:	cmp	x0, #0x100
    14bc:	b.ne	b60 <mainSort+0x1a8>  // b.any
    14c0:	ldr	w0, [sp, #124]
    14c4:	cmp	w0, #0x3
    14c8:	b.le	c68 <mainSort+0x2b0>
    14cc:	ldr	w0, [sp, #120]
    14d0:	mov	w2, w23
    14d4:	ldp	x29, x30, [sp]
    14d8:	sub	w4, w23, w0
    14dc:	mov	x3, x0
    14e0:	adrp	x0, 0 <stderr>
    14e4:	ldp	x19, x20, [sp, #16]
    14e8:	mov	x12, #0x1270                	// #4720
    14ec:	ldp	x21, x22, [sp, #32]
    14f0:	adrp	x1, 0 <fallbackSort>
    14f4:	ldp	x23, x24, [sp, #48]
    14f8:	add	x1, x1, #0x0
    14fc:	ldp	x25, x26, [sp, #64]
    1500:	ldp	x27, x28, [sp, #80]
    1504:	ldr	x0, [x0]
    1508:	add	sp, sp, x12
    150c:	b	0 <fprintf>
    1510:	ldr	w1, [x19, x0, lsl #2]
    1514:	subs	w1, w1, #0x1
    1518:	b.pl	1520 <mainSort+0xb68>  // b.nfrst
    151c:	add	w1, w1, w23
    1520:	ldrb	w3, [x21, w1, sxtw]
    1524:	ldrb	w6, [x28, x3]
    1528:	cbnz	w6, 1540 <mainSort+0xb88>
    152c:	lsl	x3, x3, #2
    1530:	ldr	w6, [x5, x3]
    1534:	add	w8, w6, #0x1
    1538:	str	w8, [x5, x3]
    153c:	str	w1, [x19, w6, sxtw #2]
    1540:	add	x0, x0, #0x1
    1544:	b	13c4 <mainSort+0xa0c>
    1548:	ldr	w1, [x19, x0, lsl #2]
    154c:	subs	w1, w1, #0x1
    1550:	b.pl	1558 <mainSort+0xba0>  // b.nfrst
    1554:	add	w1, w1, w23
    1558:	ldrb	w5, [x21, w1, sxtw]
    155c:	ldrb	w7, [x28, x5]
    1560:	cbnz	w7, 1578 <mainSort+0xbc0>
    1564:	lsl	x5, x5, #2
    1568:	ldr	w7, [x4, x5]
    156c:	sub	w9, w7, #0x1
    1570:	str	w9, [x4, x5]
    1574:	str	w1, [x19, w7, sxtw #2]
    1578:	sub	x0, x0, #0x1
    157c:	b	13f0 <mainSort+0xa38>
    1580:	add	w2, w2, #0x1
    1584:	b	1478 <mainSort+0xac0>
    1588:	ldr	w4, [x1, x3, lsl #2]
    158c:	asr	w5, w3, w2
    1590:	and	w5, w5, #0xffff
    1594:	cmp	w4, #0x21
    1598:	strh	w5, [x22, w4, sxtw #1]
    159c:	b.gt	15a8 <mainSort+0xbf0>
    15a0:	add	w4, w23, w4
    15a4:	strh	w5, [x22, w4, sxtw #1]
    15a8:	sub	x3, x3, #0x1
    15ac:	b	1490 <mainSort+0xad8>

00000000000015b0 <BZ2_blockSort>:
    15b0:	stp	x29, x30, [sp, #-80]!
    15b4:	mov	x29, sp
    15b8:	stp	x19, x20, [sp, #16]
    15bc:	mov	x20, x0
    15c0:	stp	x21, x22, [sp, #32]
    15c4:	ldr	w21, [x0, #108]
    15c8:	stp	x23, x24, [sp, #48]
    15cc:	ldr	w23, [x0, #656]
    15d0:	ldr	x24, [x0, #40]
    15d4:	ldr	x22, [x0, #56]
    15d8:	mov	w0, #0x270f                	// #9999
    15dc:	cmp	w21, w0
    15e0:	b.gt	1624 <BZ2_blockSort+0x74>
    15e4:	ldp	x0, x1, [x20, #24]
    15e8:	mov	w4, w23
    15ec:	mov	w3, w21
    15f0:	mov	x2, x24
    15f4:	bl	0 <fallbackSort>
    15f8:	ldr	w1, [x20, #108]
    15fc:	mov	w0, #0xffffffff            	// #-1
    1600:	sub	x22, x22, #0x4
    1604:	str	w0, [x20, #48]
    1608:	mov	x0, #0x0                   	// #0
    160c:	mov	w2, w0
    1610:	cmp	w1, w0
    1614:	b.gt	16dc <BZ2_blockSort+0x12c>
    1618:	mov	w0, #0x3eb                 	// #1003
    161c:	bl	0 <BZ2_bz__AssertH__fail>
    1620:	b	16ec <BZ2_blockSort+0x13c>
    1624:	add	w2, w21, #0x22
    1628:	tbz	w21, #0, 1630 <BZ2_blockSort+0x80>
    162c:	add	w2, w21, #0x23
    1630:	ldr	w19, [x20, #88]
    1634:	mov	w0, #0x64                  	// #100
    1638:	ldr	x1, [x20, #64]
    163c:	cmp	w19, #0x64
    1640:	csel	w19, w19, w0, le
    1644:	mov	w0, #0x3                   	// #3
    1648:	cmp	w19, #0x0
    164c:	add	x6, sp, #0x4c
    1650:	csinc	w19, w19, wzr, gt
    1654:	mov	w5, w23
    1658:	sub	w19, w19, #0x1
    165c:	mov	w4, w21
    1660:	mov	x3, x24
    1664:	add	x2, x1, w2, sxtw
    1668:	udiv	w19, w19, w0
    166c:	mov	x0, x22
    1670:	mul	w19, w19, w21
    1674:	str	w19, [sp, #76]
    1678:	bl	9b8 <mainSort>
    167c:	cmp	w23, #0x2
    1680:	b.le	16b4 <BZ2_blockSort+0x104>
    1684:	ldr	w2, [sp, #76]
    1688:	scvtf	s1, w21
    168c:	adrp	x0, 0 <stderr>
    1690:	adrp	x1, 0 <fallbackSort>
    1694:	sub	w2, w19, w2
    1698:	mov	w3, w21
    169c:	ldr	x0, [x0]
    16a0:	scvtf	s0, w2
    16a4:	add	x1, x1, #0x0
    16a8:	fdiv	s0, s0, s1
    16ac:	fcvt	d0, s0
    16b0:	bl	0 <fprintf>
    16b4:	ldr	w0, [sp, #76]
    16b8:	tbz	w0, #31, 15f8 <BZ2_blockSort+0x48>
    16bc:	cmp	w23, #0x1
    16c0:	b.le	15e4 <BZ2_blockSort+0x34>
    16c4:	adrp	x0, 0 <stderr>
    16c8:	ldr	x1, [x0]
    16cc:	adrp	x0, 0 <fallbackSort>
    16d0:	add	x0, x0, #0x0
    16d4:	bl	0 <fputs>
    16d8:	b	15e4 <BZ2_blockSort+0x34>
    16dc:	add	x0, x0, #0x1
    16e0:	ldr	w3, [x22, x0, lsl #2]
    16e4:	cbnz	w3, 160c <BZ2_blockSort+0x5c>
    16e8:	str	w2, [x20, #48]
    16ec:	ldp	x19, x20, [sp, #16]
    16f0:	ldp	x21, x22, [sp, #32]
    16f4:	ldp	x23, x24, [sp, #48]
    16f8:	ldp	x29, x30, [sp], #80
    16fc:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	mov	x12, #0x1480                	// #5248
   4:	sub	sp, sp, x12
   8:	mov	w5, #0x100                 	// #256
   c:	stp	x29, x30, [sp]
  10:	mov	x29, sp
  14:	stp	x25, x26, [sp, #64]
  18:	mov	w25, w3
  1c:	stp	x19, x20, [sp, #16]
  20:	stp	x21, x22, [sp, #32]
  24:	mov	w21, w2
  28:	mov	x2, #0x0                   	// #0
  2c:	stp	x23, x24, [sp, #48]
  30:	cmp	w21, w2
  34:	b.gt	10c <BZ2_hbMakeCodeLengths+0x10c>
  38:	cmp	w21, #0x0
  3c:	add	x19, sp, #0x50
  40:	csel	w24, w21, wzr, ge  // ge = tcont
  44:	add	x22, sp, #0xc70
  48:	add	x20, sp, #0x460
  4c:	sub	x23, x0, #0x1
  50:	add	x26, x19, w24, sxtw #2
  54:	mov	w0, #0xfffffffe            	// #-2
  58:	mov	w5, #0xffffffff            	// #-1
  5c:	str	wzr, [sp, #80]
  60:	str	wzr, [sp, #1120]
  64:	str	w0, [sp, #3184]
  68:	mov	x0, #0x1                   	// #1
  6c:	mov	w4, w0
  70:	cmp	w21, w0
  74:	b.ge	130 <BZ2_hbMakeCodeLengths+0x130>  // b.tcont
  78:	add	w0, w21, #0x1
  7c:	sub	w6, w24, #0x2
  80:	mov	x4, x26
  84:	mov	w3, w24
  88:	sxtw	x0, w0
  8c:	mov	w7, #0xffffffff            	// #-1
  90:	cmp	w3, #0x1
  94:	b.gt	16c <BZ2_hbMakeCodeLengths+0x16c>
  98:	cmp	w21, #0x0
  9c:	sub	w0, w24, #0x1
  a0:	csel	w0, w0, wzr, gt
  a4:	add	w0, w0, w21
  a8:	cmp	w0, #0x203
  ac:	b.le	b8 <BZ2_hbMakeCodeLengths+0xb8>
  b0:	mov	w0, #0x7d2                 	// #2002
  b4:	bl	0 <BZ2_bz__AssertH__fail>
  b8:	mov	x0, #0x1                   	// #1
  bc:	mov	w4, w0
  c0:	mov	w2, #0x0                   	// #0
  c4:	mov	w3, w0
  c8:	cmp	w21, w0
  cc:	b.ge	2dc <BZ2_hbMakeCodeLengths+0x2dc>  // b.tcont
  d0:	cbz	w2, 2e4 <BZ2_hbMakeCodeLengths+0x2e4>
  d4:	add	x1, sp, #0x460
  d8:	mov	w2, #0x1                   	// #1
  dc:	mov	w3, #0x2                   	// #2
  e0:	add	x1, x1, #0x4
  e4:	cmp	w2, w21
  e8:	b.gt	54 <BZ2_hbMakeCodeLengths+0x54>
  ec:	ldr	w0, [x1]
  f0:	add	w2, w2, #0x1
  f4:	asr	w0, w0, #8
  f8:	sdiv	w0, w0, w3
  fc:	add	w0, w0, #0x1
 100:	lsl	w0, w0, #8
 104:	str	w0, [x1]
 108:	b	e0 <BZ2_hbMakeCodeLengths+0xe0>
 10c:	ldr	w4, [x1, x2, lsl #2]
 110:	cmp	w4, #0x0
 114:	lsl	w3, w4, #8
 118:	add	x4, sp, #0x460
 11c:	add	x4, x4, x2, lsl #2
 120:	csel	w3, w3, w5, ne  // ne = any
 124:	add	x2, x2, #0x1
 128:	str	w3, [x4, #4]
 12c:	b	30 <BZ2_hbMakeCodeLengths+0x30>
 130:	ldr	w7, [x20, x0, lsl #2]
 134:	sxtw	x1, w0
 138:	str	w5, [x22, x0, lsl #2]
 13c:	str	w0, [x19, x0, lsl #2]
 140:	asr	w3, w1, #1
 144:	ldr	w2, [x19, w3, sxtw #2]
 148:	ldr	w6, [x20, w2, sxtw #2]
 14c:	cmp	w7, w6
 150:	b.lt	160 <BZ2_hbMakeCodeLengths+0x160>  // b.tstop
 154:	add	x0, x0, #0x1
 158:	str	w4, [x19, x1, lsl #2]
 15c:	b	6c <BZ2_hbMakeCodeLengths+0x6c>
 160:	str	w2, [x19, x1, lsl #2]
 164:	sxtw	x1, w3
 168:	b	140 <BZ2_hbMakeCodeLengths+0x140>
 16c:	ldr	w5, [x4]
 170:	sub	w3, w3, #0x1
 174:	ldr	w8, [sp, #84]
 178:	mov	x2, #0x1                   	// #1
 17c:	str	w5, [sp, #84]
 180:	sbfiz	x10, x5, #2, #32
 184:	lsl	w1, w2, #1
 188:	cmp	w3, w1
 18c:	b.lt	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.tstop
 190:	b.le	1b0 <BZ2_hbMakeCodeLengths+0x1b0>
 194:	add	w9, w1, #0x1
 198:	ldrsw	x11, [x19, w1, sxtw #2]
 19c:	ldrsw	x12, [x19, w9, sxtw #2]
 1a0:	ldr	w11, [x20, x11, lsl #2]
 1a4:	ldr	w12, [x20, x12, lsl #2]
 1a8:	cmp	w12, w11
 1ac:	csel	w1, w1, w9, ge  // ge = tcont
 1b0:	ldr	w9, [x19, w1, sxtw #2]
 1b4:	ldr	w12, [x20, x10]
 1b8:	ldr	w11, [x20, w9, sxtw #2]
 1bc:	cmp	w12, w11
 1c0:	b.lt	1d0 <BZ2_hbMakeCodeLengths+0x1d0>  // b.tstop
 1c4:	str	w9, [x19, x2, lsl #2]
 1c8:	sxtw	x2, w1
 1cc:	b	184 <BZ2_hbMakeCodeLengths+0x184>
 1d0:	str	w5, [x19, x2, lsl #2]
 1d4:	mov	x2, #0x1                   	// #1
 1d8:	ldur	w9, [x4, #-4]
 1dc:	ldr	w5, [sp, #84]
 1e0:	str	w9, [sp, #84]
 1e4:	sbfiz	x11, x9, #2, #32
 1e8:	lsl	w1, w2, #1
 1ec:	cmp	w1, w6
 1f0:	b.gt	234 <BZ2_hbMakeCodeLengths+0x234>
 1f4:	b.ge	214 <BZ2_hbMakeCodeLengths+0x214>  // b.tcont
 1f8:	add	w10, w1, #0x1
 1fc:	ldrsw	x12, [x19, w1, sxtw #2]
 200:	ldrsw	x13, [x19, w10, sxtw #2]
 204:	ldr	w12, [x20, x12, lsl #2]
 208:	ldr	w13, [x20, x13, lsl #2]
 20c:	cmp	w13, w12
 210:	csel	w1, w1, w10, ge  // ge = tcont
 214:	ldr	w10, [x19, w1, sxtw #2]
 218:	ldr	w13, [x20, x11]
 21c:	ldr	w12, [x20, w10, sxtw #2]
 220:	cmp	w13, w12
 224:	b.lt	234 <BZ2_hbMakeCodeLengths+0x234>  // b.tstop
 228:	str	w10, [x19, x2, lsl #2]
 22c:	sxtw	x2, w1
 230:	b	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 234:	sbfiz	x1, x5, #2, #32
 238:	str	w9, [x19, x2, lsl #2]
 23c:	sbfiz	x2, x8, #2, #32
 240:	mov	w9, w0
 244:	stur	w0, [x4, #-4]
 248:	str	w0, [x22, x1]
 24c:	ldr	w5, [x20, x1]
 250:	str	w0, [x22, x2]
 254:	ldr	w2, [x20, x2]
 258:	and	w1, w5, #0xff
 25c:	str	w7, [x22, x0, lsl #2]
 260:	and	w8, w2, #0xff
 264:	and	w2, w2, #0xffffff00
 268:	cmp	w8, w5, uxtb
 26c:	and	w5, w5, #0xffffff00
 270:	csel	w1, w1, w8, le
 274:	add	w2, w2, w5
 278:	add	w1, w1, #0x1
 27c:	orr	w1, w1, w2
 280:	sxtw	x2, w3
 284:	str	w1, [x20, x0, lsl #2]
 288:	asr	w8, w2, #1
 28c:	ldr	w5, [x19, w8, sxtw #2]
 290:	ldr	w10, [x20, w5, sxtw #2]
 294:	cmp	w1, w10
 298:	b.lt	2b0 <BZ2_hbMakeCodeLengths+0x2b0>  // b.tstop
 29c:	add	x0, x0, #0x1
 2a0:	sub	x4, x4, #0x4
 2a4:	sub	w6, w6, #0x1
 2a8:	str	w9, [x19, x2, lsl #2]
 2ac:	b	90 <BZ2_hbMakeCodeLengths+0x90>
 2b0:	str	w5, [x19, x2, lsl #2]
 2b4:	sxtw	x2, w8
 2b8:	b	288 <BZ2_hbMakeCodeLengths+0x288>
 2bc:	add	w1, w1, #0x1
 2c0:	ldr	w3, [x22, w3, sxtw #2]
 2c4:	tbz	w3, #31, 2bc <BZ2_hbMakeCodeLengths+0x2bc>
 2c8:	cmp	w1, w25
 2cc:	strb	w1, [x23, x0]
 2d0:	csel	w2, w2, w4, le
 2d4:	add	x0, x0, #0x1
 2d8:	b	c4 <BZ2_hbMakeCodeLengths+0xc4>
 2dc:	mov	w1, #0x0                   	// #0
 2e0:	b	2c0 <BZ2_hbMakeCodeLengths+0x2c0>
 2e4:	mov	x12, #0x1480                	// #5248
 2e8:	ldp	x29, x30, [sp]
 2ec:	ldp	x19, x20, [sp, #16]
 2f0:	ldp	x21, x22, [sp, #32]
 2f4:	ldp	x23, x24, [sp, #48]
 2f8:	ldp	x25, x26, [sp, #64]
 2fc:	add	sp, sp, x12
 300:	ret

0000000000000304 <BZ2_hbAssignCodes>:
 304:	mov	w5, #0x0                   	// #0
 308:	cmp	w2, w3
 30c:	b.le	340 <BZ2_hbAssignCodes+0x3c>
 310:	ret
 314:	ldrb	w7, [x1, x6]
 318:	cmp	w7, w2
 31c:	b.ne	328 <BZ2_hbAssignCodes+0x24>  // b.any
 320:	str	w5, [x0, x6, lsl #2]
 324:	add	w5, w5, #0x1
 328:	add	x6, x6, #0x1
 32c:	cmp	w4, w6
 330:	b.gt	314 <BZ2_hbAssignCodes+0x10>
 334:	lsl	w5, w5, #1
 338:	add	w2, w2, #0x1
 33c:	b	308 <BZ2_hbAssignCodes+0x4>
 340:	mov	x6, #0x0                   	// #0
 344:	b	32c <BZ2_hbAssignCodes+0x28>

0000000000000348 <BZ2_hbCreateDecodeTables>:
 348:	mov	w8, w4
 34c:	mov	w9, #0x0                   	// #0
 350:	cmp	w8, w5
 354:	b.le	3fc <BZ2_hbCreateDecodeTables+0xb4>
 358:	mov	x2, #0x0                   	// #0
 35c:	str	wzr, [x1, x2, lsl #2]
 360:	add	x2, x2, #0x1
 364:	cmp	x2, #0x17
 368:	b.ne	35c <BZ2_hbCreateDecodeTables+0x14>  // b.any
 36c:	mov	x7, #0x0                   	// #0
 370:	cmp	w6, w7
 374:	b.gt	404 <BZ2_hbCreateDecodeTables+0xbc>
 378:	add	x7, x1, #0x4
 37c:	add	x6, x1, #0x5c
 380:	mov	x2, x7
 384:	ldp	w8, w3, [x2, #-4]
 388:	add	w3, w3, w8
 38c:	str	w3, [x2], #4
 390:	cmp	x2, x6
 394:	b.ne	384 <BZ2_hbCreateDecodeTables+0x3c>  // b.any
 398:	mov	x2, #0x0                   	// #0
 39c:	str	wzr, [x0, x2, lsl #2]
 3a0:	add	x2, x2, #0x1
 3a4:	cmp	x2, #0x17
 3a8:	b.ne	39c <BZ2_hbCreateDecodeTables+0x54>  // b.any
 3ac:	sxtw	x2, w4
 3b0:	mov	w3, #0x0                   	// #0
 3b4:	cmp	w5, w2
 3b8:	b.ge	424 <BZ2_hbCreateDecodeTables+0xdc>  // b.tcont
 3bc:	add	w4, w4, #0x1
 3c0:	sub	x0, x0, #0x4
 3c4:	sxtw	x4, w4
 3c8:	cmp	w5, w4
 3cc:	b.ge	448 <BZ2_hbCreateDecodeTables+0x100>  // b.tcont
 3d0:	ret
 3d4:	ldrb	w10, [x3, x7]
 3d8:	cmp	w10, w8
 3dc:	b.ne	3e8 <BZ2_hbCreateDecodeTables+0xa0>  // b.any
 3e0:	str	w7, [x2, w9, sxtw #2]
 3e4:	add	w9, w9, #0x1
 3e8:	add	x7, x7, #0x1
 3ec:	cmp	w6, w7
 3f0:	b.gt	3d4 <BZ2_hbCreateDecodeTables+0x8c>
 3f4:	add	w8, w8, #0x1
 3f8:	b	350 <BZ2_hbCreateDecodeTables+0x8>
 3fc:	mov	x7, #0x0                   	// #0
 400:	b	3ec <BZ2_hbCreateDecodeTables+0xa4>
 404:	ldrb	w2, [x3, x7]
 408:	add	x7, x7, #0x1
 40c:	add	x2, x2, #0x1
 410:	lsl	x2, x2, #2
 414:	ldr	w8, [x1, x2]
 418:	add	w8, w8, #0x1
 41c:	str	w8, [x1, x2]
 420:	b	370 <BZ2_hbCreateDecodeTables+0x28>
 424:	ldr	w6, [x7, x2, lsl #2]
 428:	ldr	w8, [x1, x2, lsl #2]
 42c:	sub	w6, w6, w8
 430:	add	w3, w6, w3
 434:	sub	w6, w3, #0x1
 438:	str	w6, [x0, x2, lsl #2]
 43c:	lsl	w3, w3, #1
 440:	add	x2, x2, #0x1
 444:	b	3b4 <BZ2_hbCreateDecodeTables+0x6c>
 448:	ldr	w2, [x0, x4, lsl #2]
 44c:	ldr	w3, [x1, x4, lsl #2]
 450:	add	w2, w2, #0x1
 454:	lsl	w2, w2, #1
 458:	sub	w2, w2, w3
 45c:	str	w2, [x1, x4, lsl #2]
 460:	add	x4, x4, #0x1
 464:	b	3c8 <BZ2_hbCreateDecodeTables+0x80>

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <bsW>:
       0:	ldr	w3, [x0, #644]
       4:	ldr	w5, [x0, #640]
       8:	cmp	w3, #0x7
       c:	b.gt	34 <bsW+0x34>
      10:	mov	w4, #0x20                  	// #32
      14:	sub	w4, w4, w3
      18:	sub	w4, w4, w1
      1c:	add	w3, w3, w1
      20:	str	w3, [x0, #644]
      24:	lsl	w2, w2, w4
      28:	orr	w2, w2, w5
      2c:	str	w2, [x0, #640]
      30:	ret
      34:	ldrsw	x3, [x0, #116]
      38:	lsr	w5, w5, #24
      3c:	ldr	x4, [x0, #80]
      40:	strb	w5, [x4, x3]
      44:	ldr	w3, [x0, #116]
      48:	add	w3, w3, #0x1
      4c:	str	w3, [x0, #116]
      50:	ldr	w3, [x0, #640]
      54:	lsl	w3, w3, #8
      58:	str	w3, [x0, #640]
      5c:	ldr	w3, [x0, #644]
      60:	sub	w3, w3, #0x8
      64:	str	w3, [x0, #644]
      68:	b	0 <bsW>

000000000000006c <bsPutUInt32>:
      6c:	mov	w6, w1
      70:	stp	x29, x30, [sp, #-16]!
      74:	lsr	w2, w1, #24
      78:	mov	x29, sp
      7c:	mov	w1, #0x8                   	// #8
      80:	bl	0 <bsW>
      84:	mov	w1, #0x8                   	// #8
      88:	ubfx	x2, x6, #16, #8
      8c:	bl	0 <bsW>
      90:	ubfx	x2, x6, #8, #8
      94:	mov	w1, #0x8                   	// #8
      98:	bl	0 <bsW>
      9c:	ldp	x29, x30, [sp], #16
      a0:	and	w2, w6, #0xff
      a4:	mov	w1, #0x8                   	// #8
      a8:	b	0 <bsW>

00000000000000ac <bsPutUChar>:
      ac:	and	w2, w1, #0xff
      b0:	mov	w1, #0x8                   	// #8
      b4:	b	0 <bsW>

00000000000000b8 <BZ2_bsInitWrite>:
      b8:	str	xzr, [x0, #640]
      bc:	ret

00000000000000c0 <BZ2_compressBlock>:
      c0:	sub	sp, sp, #0x460
      c4:	stp	x29, x30, [sp]
      c8:	mov	x29, sp
      cc:	stp	x19, x20, [sp, #16]
      d0:	mov	x19, x0
      d4:	and	w0, w1, #0xff
      d8:	stp	x21, x22, [sp, #32]
      dc:	ldr	w5, [x19, #108]
      e0:	stp	x23, x24, [sp, #48]
      e4:	cmp	w5, #0x0
      e8:	stp	x25, x26, [sp, #64]
      ec:	stp	x27, x28, [sp, #80]
      f0:	str	w0, [sp, #820]
      f4:	str	d8, [sp, #96]
      f8:	b.le	14c <BZ2_compressBlock+0x8c>
      fc:	ldr	w3, [x19, #648]
     100:	ldr	w4, [x19, #652]
     104:	mvn	w3, w3
     108:	ldr	w2, [x19, #660]
     10c:	str	w3, [x19, #648]
     110:	eor	w4, w3, w4, ror #31
     114:	str	w4, [x19, #652]
     118:	cmp	w2, #0x1
     11c:	b.le	124 <BZ2_compressBlock+0x64>
     120:	str	wzr, [x19, #116]
     124:	ldr	w0, [x19, #656]
     128:	cmp	w0, #0x1
     12c:	b.le	144 <BZ2_compressBlock+0x84>
     130:	adrp	x0, 0 <stderr>
     134:	adrp	x1, 0 <bsW>
     138:	add	x1, x1, #0x0
     13c:	ldr	x0, [x0]
     140:	bl	0 <fprintf>
     144:	mov	x0, x19
     148:	bl	0 <BZ2_blockSort>
     14c:	ldr	x0, [x19, #32]
     150:	ldrsw	x1, [x19, #108]
     154:	add	x0, x0, x1
     158:	str	x0, [x19, #80]
     15c:	ldr	w0, [x19, #660]
     160:	cmp	w0, #0x1
     164:	b.ne	194 <BZ2_compressBlock+0xd4>  // b.any
     168:	str	xzr, [x19, #640]
     16c:	mov	x0, x19
     170:	mov	w1, #0x42                  	// #66
     174:	bl	ac <bsPutUChar>
     178:	mov	w1, #0x5a                  	// #90
     17c:	bl	ac <bsPutUChar>
     180:	mov	w1, #0x68                  	// #104
     184:	bl	ac <bsPutUChar>
     188:	ldr	w1, [x19, #664]
     18c:	add	w1, w1, #0x30
     190:	bl	ac <bsPutUChar>
     194:	ldr	w0, [x19, #108]
     198:	cmp	w0, #0x0
     19c:	b.le	21b8 <BZ2_compressBlock+0x20f8>
     1a0:	mov	x0, x19
     1a4:	mov	w1, #0x31                  	// #49
     1a8:	bl	ac <bsPutUChar>
     1ac:	mov	w1, #0x41                  	// #65
     1b0:	bl	ac <bsPutUChar>
     1b4:	mov	w1, #0x59                  	// #89
     1b8:	bl	ac <bsPutUChar>
     1bc:	mov	w1, #0x26                  	// #38
     1c0:	bl	ac <bsPutUChar>
     1c4:	mov	w1, #0x53                  	// #83
     1c8:	bl	ac <bsPutUChar>
     1cc:	mov	w1, #0x59                  	// #89
     1d0:	bl	ac <bsPutUChar>
     1d4:	ldr	w1, [x19, #648]
     1d8:	bl	6c <bsPutUInt32>
     1dc:	mov	w2, #0x0                   	// #0
     1e0:	mov	w1, #0x1                   	// #1
     1e4:	bl	0 <bsW>
     1e8:	ldr	w2, [x19, #48]
     1ec:	mov	w1, #0x18                  	// #24
     1f0:	bl	0 <bsW>
     1f4:	str	wzr, [x19, #124]
     1f8:	ldp	x9, x10, [x19, #56]
     1fc:	add	x2, x19, #0x180
     200:	ldr	x20, [x19, #72]
     204:	add	x0, x19, #0x80
     208:	str	x0, [sp, #152]
     20c:	ldrb	w1, [x0]
     210:	cbz	w1, 224 <BZ2_compressBlock+0x164>
     214:	ldr	w1, [x19, #124]
     218:	strb	w1, [x0, #256]
     21c:	add	w1, w1, #0x1
     220:	str	w1, [x19, #124]
     224:	add	x0, x0, #0x1
     228:	cmp	x0, x2
     22c:	b.ne	20c <BZ2_compressBlock+0x14c>  // b.any
     230:	ldr	w4, [x19, #124]
     234:	add	x1, x19, #0x2a0
     238:	mov	x0, #0x0                   	// #0
     23c:	add	w7, w4, #0x1
     240:	cmp	w7, w0
     244:	b.ge	2b8 <BZ2_compressBlock+0x1f8>  // b.tcont
     248:	add	x1, sp, #0x360
     24c:	mov	x0, #0x0                   	// #0
     250:	cmp	w4, w0
     254:	b.gt	2c4 <BZ2_compressBlock+0x204>
     258:	ldr	w2, [x19, #108]
     25c:	add	x11, sp, #0x360
     260:	mov	x5, #0x0                   	// #0
     264:	mov	w3, #0x0                   	// #0
     268:	mov	w0, #0x0                   	// #0
     26c:	mov	w12, #0x1                   	// #1
     270:	cmp	w2, w5
     274:	b.gt	2d0 <BZ2_compressBlock+0x210>
     278:	cbz	w0, 3bc <BZ2_compressBlock+0x2fc>
     27c:	sub	w0, w0, #0x1
     280:	sxtw	x1, w3
     284:	mov	w6, #0x1                   	// #1
     288:	add	w3, w1, #0x1
     28c:	tbz	w0, #0, 3a8 <BZ2_compressBlock+0x2e8>
     290:	ldr	w5, [x19, #676]
     294:	strh	w6, [x20, x1, lsl #1]
     298:	add	w5, w5, #0x1
     29c:	str	w5, [x19, #676]
     2a0:	add	x1, x1, #0x1
     2a4:	cmp	w0, #0x1
     2a8:	b.le	3bc <BZ2_compressBlock+0x2fc>
     2ac:	sub	w0, w0, #0x2
     2b0:	asr	w0, w0, #1
     2b4:	b	288 <BZ2_compressBlock+0x1c8>
     2b8:	str	wzr, [x1, x0, lsl #2]
     2bc:	add	x0, x0, #0x1
     2c0:	b	240 <BZ2_compressBlock+0x180>
     2c4:	strb	w0, [x0, x1]
     2c8:	add	x0, x0, #0x1
     2cc:	b	250 <BZ2_compressBlock+0x190>
     2d0:	ldr	w1, [x9, x5, lsl #2]
     2d4:	subs	w1, w1, #0x1
     2d8:	b.pl	2e0 <BZ2_compressBlock+0x220>  // b.nfrst
     2dc:	add	w1, w1, w2
     2e0:	ldrb	w1, [x10, w1, sxtw]
     2e4:	add	x1, x19, x1
     2e8:	ldrb	w6, [x1, #384]
     2ec:	ldrb	w1, [sp, #864]
     2f0:	cmp	w1, w6
     2f4:	b.ne	304 <BZ2_compressBlock+0x244>  // b.any
     2f8:	add	w0, w0, #0x1
     2fc:	add	x5, x5, #0x1
     300:	b	270 <BZ2_compressBlock+0x1b0>
     304:	cbz	w0, 354 <BZ2_compressBlock+0x294>
     308:	sub	w0, w0, #0x1
     30c:	sxtw	x1, w3
     310:	add	w3, w1, #0x1
     314:	tbz	w0, #0, 340 <BZ2_compressBlock+0x280>
     318:	ldr	w8, [x19, #676]
     31c:	strh	w12, [x20, x1, lsl #1]
     320:	add	w8, w8, #0x1
     324:	str	w8, [x19, #676]
     328:	add	x1, x1, #0x1
     32c:	cmp	w0, #0x1
     330:	b.le	354 <BZ2_compressBlock+0x294>
     334:	sub	w0, w0, #0x2
     338:	asr	w0, w0, #1
     33c:	b	310 <BZ2_compressBlock+0x250>
     340:	ldr	w8, [x19, #672]
     344:	strh	wzr, [x20, x1, lsl #1]
     348:	add	w8, w8, #0x1
     34c:	str	w8, [x19, #672]
     350:	b	328 <BZ2_compressBlock+0x268>
     354:	ldrb	w0, [sp, #864]
     358:	ldrb	w1, [sp, #865]
     35c:	strb	w0, [sp, #865]
     360:	add	x0, x11, #0x1
     364:	cmp	w6, w1
     368:	b.ne	398 <BZ2_compressBlock+0x2d8>  // b.any
     36c:	sub	x0, x0, x11
     370:	strb	w6, [sp, #864]
     374:	add	w1, w0, #0x1
     378:	strh	w1, [x20, w3, sxtw #1]
     37c:	add	x0, x19, w0, sxtw #2
     380:	add	w3, w3, #0x1
     384:	ldr	w1, [x0, #676]
     388:	add	w1, w1, #0x1
     38c:	str	w1, [x0, #676]
     390:	mov	w0, #0x0                   	// #0
     394:	b	2fc <BZ2_compressBlock+0x23c>
     398:	ldrb	w8, [x0, #1]!
     39c:	strb	w1, [x0]
     3a0:	mov	w1, w8
     3a4:	b	364 <BZ2_compressBlock+0x2a4>
     3a8:	ldr	w5, [x19, #672]
     3ac:	strh	wzr, [x20, x1, lsl #1]
     3b0:	add	w5, w5, #0x1
     3b4:	str	w5, [x19, #672]
     3b8:	b	2a0 <BZ2_compressBlock+0x1e0>
     3bc:	add	x1, x19, w4, sxtw #2
     3c0:	strh	w7, [x20, w3, sxtw #1]
     3c4:	add	w3, w3, #0x1
     3c8:	ldr	w0, [x1, #676]
     3cc:	add	w0, w0, #0x1
     3d0:	str	w0, [x1, #676]
     3d4:	str	w3, [x19, #668]
     3d8:	ldr	w0, [x19, #656]
     3dc:	cmp	w0, #0x2
     3e0:	b.le	3f8 <BZ2_compressBlock+0x338>
     3e4:	adrp	x0, 0 <stderr>
     3e8:	adrp	x1, 0 <bsW>
     3ec:	add	x1, x1, #0x0
     3f0:	ldr	x0, [x0]
     3f4:	bl	0 <fprintf>
     3f8:	ldr	w27, [x19, #124]
     3fc:	mov	x12, #0x934c                	// #37708
     400:	mov	x11, #0x9958                	// #39256
     404:	add	x2, x19, x11
     408:	add	w0, w27, #0x2
     40c:	str	w0, [sp, #144]
     410:	add	x0, x19, x12
     414:	mov	w3, #0xf                   	// #15
     418:	mov	x1, x0
     41c:	str	x0, [sp, #128]
     420:	mov	x0, #0x0                   	// #0
     424:	b	430 <BZ2_compressBlock+0x370>
     428:	strb	w3, [x1, x0]
     42c:	add	x0, x0, #0x1
     430:	ldr	w4, [sp, #144]
     434:	cmp	w4, w0
     438:	b.gt	428 <BZ2_compressBlock+0x368>
     43c:	add	x1, x1, #0x102
     440:	cmp	x2, x1
     444:	b.ne	420 <BZ2_compressBlock+0x360>  // b.any
     448:	ldr	w0, [x19, #668]
     44c:	cmp	w0, #0x0
     450:	b.gt	45c <BZ2_compressBlock+0x39c>
     454:	mov	w0, #0xbb9                 	// #3001
     458:	bl	0 <BZ2_bz__AssertH__fail>
     45c:	ldr	w26, [x19, #668]
     460:	cmp	w26, #0xc7
     464:	b.le	5bc <BZ2_compressBlock+0x4fc>
     468:	cmp	w26, #0x257
     46c:	b.le	5c4 <BZ2_compressBlock+0x504>
     470:	cmp	w26, #0x4af
     474:	b.le	5cc <BZ2_compressBlock+0x50c>
     478:	cmp	w26, #0x95f
     47c:	cset	w0, gt
     480:	add	w0, w0, #0x5
     484:	str	w0, [sp, #124]
     488:	mov	w23, #0x102                 	// #258
     48c:	mov	x10, #0x924a                	// #37450
     490:	add	w27, w27, #0x1
     494:	ldr	w0, [sp, #124]
     498:	add	x28, x19, #0x2a4
     49c:	mov	w25, #0x0                   	// #0
     4a0:	mov	x21, x0
     4a4:	smaddl	x23, w0, w23, x19
     4a8:	adrp	x0, 0 <bsW>
     4ac:	add	x23, x23, x10
     4b0:	ldr	d8, [x0]
     4b4:	sub	w0, w25, #0x1
     4b8:	mov	w22, #0x0                   	// #0
     4bc:	sdiv	w1, w26, w21
     4c0:	sxtw	x0, w0
     4c4:	mov	w24, w0
     4c8:	cmp	w1, w22
     4cc:	b.le	4d8 <BZ2_compressBlock+0x418>
     4d0:	cmp	w27, w0
     4d4:	b.gt	5d4 <BZ2_compressBlock+0x514>
     4d8:	ldr	w0, [sp, #124]
     4dc:	cmp	w24, w25
     4e0:	ccmp	w0, w21, #0x4, gt
     4e4:	b.eq	508 <BZ2_compressBlock+0x448>  // b.none
     4e8:	cmp	w21, #0x1
     4ec:	b.eq	508 <BZ2_compressBlock+0x448>  // b.none
     4f0:	sub	w0, w0, w21
     4f4:	tbz	w0, #0, 508 <BZ2_compressBlock+0x448>
     4f8:	add	x0, x19, w24, sxtw #2
     4fc:	sub	w24, w24, #0x1
     500:	ldr	w0, [x0, #672]
     504:	sub	w22, w22, w0
     508:	ldr	w0, [x19, #656]
     50c:	cmp	w0, #0x2
     510:	b.le	554 <BZ2_compressBlock+0x494>
     514:	scvtf	s1, w22
     518:	ldr	s0, [x19, #668]
     51c:	adrp	x0, 0 <stderr>
     520:	adrp	x1, 0 <bsW>
     524:	mov	w5, w22
     528:	mov	w4, w24
     52c:	scvtf	s0, s0
     530:	mov	w3, w25
     534:	fcvt	d1, s1
     538:	mov	w2, w21
     53c:	ldr	x0, [x0]
     540:	add	x1, x1, #0x0
     544:	fcvt	d0, s0
     548:	fmul	d1, d1, d8
     54c:	fdiv	d0, d1, d0
     550:	bl	0 <fprintf>
     554:	mov	x1, x23
     558:	mov	w0, #0x0                   	// #0
     55c:	mov	w2, #0xf                   	// #15
     560:	ldr	w3, [sp, #144]
     564:	cmp	w3, w0
     568:	b.gt	5e4 <BZ2_compressBlock+0x524>
     56c:	add	w25, w24, #0x1
     570:	sub	w26, w26, w22
     574:	sub	x23, x23, #0x102
     578:	subs	w21, w21, #0x1
     57c:	b.ne	4b4 <BZ2_compressBlock+0x3f4>  // b.any
     580:	str	wzr, [sp, #160]
     584:	add	x1, sp, #0x360
     588:	mov	x0, #0x0                   	// #0
     58c:	ldr	w2, [sp, #124]
     590:	str	wzr, [x1, x0, lsl #2]
     594:	add	x0, x0, #0x1
     598:	cmp	w2, w0
     59c:	b.gt	58c <BZ2_compressBlock+0x4cc>
     5a0:	mov	x9, #0xb188                	// #45448
     5a4:	add	x0, x19, x9
     5a8:	mov	x1, x0
     5ac:	str	wzr, [sp, #148]
     5b0:	str	x0, [sp, #168]
     5b4:	mov	x0, #0x0                   	// #0
     5b8:	b	610 <BZ2_compressBlock+0x550>
     5bc:	mov	w0, #0x2                   	// #2
     5c0:	b	484 <BZ2_compressBlock+0x3c4>
     5c4:	mov	w0, #0x3                   	// #3
     5c8:	b	484 <BZ2_compressBlock+0x3c4>
     5cc:	mov	w0, #0x4                   	// #4
     5d0:	b	484 <BZ2_compressBlock+0x3c4>
     5d4:	ldr	w2, [x28, x0, lsl #2]
     5d8:	add	x0, x0, #0x1
     5dc:	add	w22, w22, w2
     5e0:	b	4c4 <BZ2_compressBlock+0x404>
     5e4:	cmp	w0, w25
     5e8:	ccmp	w24, w0, #0x1, ge  // ge = tcont
     5ec:	b.lt	600 <BZ2_compressBlock+0x540>  // b.tstop
     5f0:	strb	wzr, [x1]
     5f4:	add	w0, w0, #0x1
     5f8:	add	x1, x1, #0x1
     5fc:	b	560 <BZ2_compressBlock+0x4a0>
     600:	strb	w2, [x1]
     604:	b	5f4 <BZ2_compressBlock+0x534>
     608:	str	wzr, [x1, x0, lsl #2]
     60c:	add	x0, x0, #0x1
     610:	ldr	w2, [sp, #144]
     614:	cmp	w2, w0
     618:	b.gt	608 <BZ2_compressBlock+0x548>
     61c:	ldr	w0, [sp, #148]
     620:	add	x1, x1, #0x408
     624:	add	w22, w0, #0x1
     628:	ldr	w0, [sp, #124]
     62c:	cmp	w0, w22
     630:	b.eq	63c <BZ2_compressBlock+0x57c>  // b.none
     634:	str	w22, [sp, #148]
     638:	b	5b4 <BZ2_compressBlock+0x4f4>
     63c:	ldr	w0, [sp, #124]
     640:	cmp	w0, #0x6
     644:	b.ne	664 <BZ2_compressBlock+0x5a4>  // b.any
     648:	ldr	x0, [sp, #128]
     64c:	mov	x8, #0xc9b8                	// #51640
     650:	add	x1, x19, x8
     654:	mov	w2, #0x0                   	// #0
     658:	ldr	w3, [sp, #144]
     65c:	cmp	w3, w2
     660:	b.gt	1884 <BZ2_compressBlock+0x17c4>
     664:	ldr	w0, [x19, #668]
     668:	mov	w5, #0x0                   	// #0
     66c:	str	w0, [sp, #164]
     670:	mov	w0, w0
     674:	str	xzr, [sp, #136]
     678:	sub	w0, w0, #0x1
     67c:	str	wzr, [sp, #808]
     680:	str	w0, [sp, #812]
     684:	add	x0, x19, #0x6a8
     688:	str	x0, [sp, #824]
     68c:	ldr	w0, [sp, #136]
     690:	str	w0, [sp, #176]
     694:	ldr	w0, [sp, #164]
     698:	cmp	w0, w5
     69c:	b.le	1940 <BZ2_compressBlock+0x1880>
     6a0:	add	w6, w5, #0x31
     6a4:	cmp	w0, w6
     6a8:	ldr	w0, [sp, #812]
     6ac:	csel	w6, w6, w0, gt
     6b0:	mov	x0, #0x0                   	// #0
     6b4:	add	x1, sp, #0x340
     6b8:	strh	wzr, [x1, x0, lsl #1]
     6bc:	add	x0, x0, #0x1
     6c0:	cmp	w22, w0
     6c4:	b.gt	6b4 <BZ2_compressBlock+0x5f4>
     6c8:	cmp	w22, #0x6
     6cc:	sxtw	x28, w5
     6d0:	b.ne	1904 <BZ2_compressBlock+0x1844>  // b.any
     6d4:	sub	w0, w6, w5
     6d8:	cmp	w0, #0x31
     6dc:	b.ne	1904 <BZ2_compressBlock+0x1844>  // b.any
     6e0:	add	x1, x20, x28, lsl #1
     6e4:	ldrh	w0, [x1, #2]
     6e8:	str	x0, [sp, #176]
     6ec:	add	x0, x19, x0, lsl #4
     6f0:	add	x0, x0, #0xc, lsl #12
     6f4:	str	x0, [sp, #184]
     6f8:	ldrh	w0, [x1, #4]
     6fc:	str	x0, [sp, #192]
     700:	add	x0, x19, x0, lsl #4
     704:	add	x0, x0, #0xc, lsl #12
     708:	str	x0, [sp, #200]
     70c:	ldr	x0, [sp, #184]
     710:	ldr	w2, [x0, #2492]
     714:	ldr	x0, [sp, #200]
     718:	ldr	w0, [x0, #2492]
     71c:	add	w0, w2, w0
     720:	ldrh	w2, [x1, #6]
     724:	str	x2, [sp, #208]
     728:	add	x2, x19, x2, lsl #4
     72c:	add	x2, x2, #0xc, lsl #12
     730:	str	x2, [sp, #216]
     734:	ldrh	w2, [x1, #8]
     738:	str	x2, [sp, #224]
     73c:	add	x2, x19, x2, lsl #4
     740:	add	x2, x2, #0xc, lsl #12
     744:	str	x2, [sp, #232]
     748:	ldr	x2, [sp, #216]
     74c:	ldr	x3, [sp, #232]
     750:	ldr	w2, [x2, #2492]
     754:	ldr	w3, [x3, #2492]
     758:	add	w2, w2, w3
     75c:	add	w0, w0, w2
     760:	ldrh	w2, [x1, #10]
     764:	str	x2, [sp, #240]
     768:	add	x2, x19, x2, lsl #4
     76c:	add	x2, x2, #0xc, lsl #12
     770:	str	x2, [sp, #248]
     774:	ldrh	w2, [x1, #12]
     778:	str	x2, [sp, #256]
     77c:	add	x2, x19, x2, lsl #4
     780:	add	x2, x2, #0xc, lsl #12
     784:	str	x2, [sp, #264]
     788:	ldr	x2, [sp, #248]
     78c:	ldr	x3, [sp, #264]
     790:	ldr	w2, [x2, #2492]
     794:	ldr	w3, [x3, #2492]
     798:	add	w2, w2, w3
     79c:	add	w0, w0, w2
     7a0:	ldrh	w2, [x1, #14]
     7a4:	str	x2, [sp, #272]
     7a8:	add	x2, x19, x2, lsl #4
     7ac:	add	x2, x2, #0xc, lsl #12
     7b0:	str	x2, [sp, #280]
     7b4:	ldrh	w2, [x1, #16]
     7b8:	str	x2, [sp, #288]
     7bc:	add	x2, x19, x2, lsl #4
     7c0:	add	x2, x2, #0xc, lsl #12
     7c4:	str	x2, [sp, #296]
     7c8:	ldr	x2, [sp, #280]
     7cc:	ldr	x3, [sp, #296]
     7d0:	ldr	w2, [x2, #2492]
     7d4:	ldr	w3, [x3, #2492]
     7d8:	add	w2, w2, w3
     7dc:	add	w0, w0, w2
     7e0:	ldrh	w2, [x1, #18]
     7e4:	str	x2, [sp, #304]
     7e8:	add	x2, x19, x2, lsl #4
     7ec:	add	x2, x2, #0xc, lsl #12
     7f0:	str	x2, [sp, #312]
     7f4:	ldrh	w2, [x1, #20]
     7f8:	str	x2, [sp, #320]
     7fc:	add	x2, x19, x2, lsl #4
     800:	add	x2, x2, #0xc, lsl #12
     804:	str	x2, [sp, #328]
     808:	ldr	x2, [sp, #312]
     80c:	ldr	x3, [sp, #328]
     810:	ldr	w2, [x2, #2492]
     814:	ldr	w3, [x3, #2492]
     818:	add	w2, w2, w3
     81c:	add	w0, w0, w2
     820:	ldrh	w2, [x1, #22]
     824:	str	x2, [sp, #336]
     828:	add	x2, x19, x2, lsl #4
     82c:	add	x2, x2, #0xc, lsl #12
     830:	str	x2, [sp, #344]
     834:	ldrh	w2, [x1, #24]
     838:	str	x2, [sp, #352]
     83c:	add	x2, x19, x2, lsl #4
     840:	add	x2, x2, #0xc, lsl #12
     844:	str	x2, [sp, #360]
     848:	ldr	x2, [sp, #344]
     84c:	ldr	x3, [sp, #360]
     850:	ldr	w2, [x2, #2492]
     854:	ldr	w3, [x3, #2492]
     858:	add	w2, w2, w3
     85c:	add	w0, w0, w2
     860:	ldrh	w2, [x1, #26]
     864:	str	x2, [sp, #368]
     868:	add	x2, x19, x2, lsl #4
     86c:	add	x2, x2, #0xc, lsl #12
     870:	str	x2, [sp, #376]
     874:	ldrh	w2, [x1, #28]
     878:	str	x2, [sp, #384]
     87c:	add	x2, x19, x2, lsl #4
     880:	add	x2, x2, #0xc, lsl #12
     884:	str	x2, [sp, #392]
     888:	ldr	x2, [sp, #376]
     88c:	ldr	x3, [sp, #392]
     890:	ldr	w2, [x2, #2492]
     894:	ldr	w3, [x3, #2492]
     898:	add	w2, w2, w3
     89c:	add	w0, w0, w2
     8a0:	ldrh	w2, [x1, #30]
     8a4:	str	x2, [sp, #400]
     8a8:	add	x2, x19, x2, lsl #4
     8ac:	add	x2, x2, #0xc, lsl #12
     8b0:	str	x2, [sp, #408]
     8b4:	ldrh	w2, [x1, #32]
     8b8:	str	x2, [sp, #416]
     8bc:	add	x2, x19, x2, lsl #4
     8c0:	add	x2, x2, #0xc, lsl #12
     8c4:	str	x2, [sp, #424]
     8c8:	ldr	x2, [sp, #408]
     8cc:	ldr	x3, [sp, #424]
     8d0:	ldr	w2, [x2, #2492]
     8d4:	ldr	w3, [x3, #2492]
     8d8:	add	w2, w2, w3
     8dc:	add	w0, w0, w2
     8e0:	ldrh	w2, [x1, #34]
     8e4:	str	x2, [sp, #432]
     8e8:	add	x2, x19, x2, lsl #4
     8ec:	add	x2, x2, #0xc, lsl #12
     8f0:	str	x2, [sp, #440]
     8f4:	ldrh	w2, [x1, #36]
     8f8:	str	x2, [sp, #448]
     8fc:	add	x2, x19, x2, lsl #4
     900:	add	x2, x2, #0xc, lsl #12
     904:	str	x2, [sp, #456]
     908:	ldr	x2, [sp, #440]
     90c:	ldr	x3, [sp, #456]
     910:	ldr	w2, [x2, #2492]
     914:	ldr	w3, [x3, #2492]
     918:	add	w2, w2, w3
     91c:	add	w0, w0, w2
     920:	ldrh	w2, [x1, #38]
     924:	str	x2, [sp, #464]
     928:	add	x2, x19, x2, lsl #4
     92c:	add	x2, x2, #0xc, lsl #12
     930:	str	x2, [sp, #472]
     934:	ldrh	w2, [x1, #40]
     938:	str	x2, [sp, #480]
     93c:	add	x2, x19, x2, lsl #4
     940:	add	x2, x2, #0xc, lsl #12
     944:	str	x2, [sp, #488]
     948:	ldr	x2, [sp, #472]
     94c:	ldr	w2, [x2, #2492]
     950:	ldr	x3, [sp, #488]
     954:	ldr	w3, [x3, #2492]
     958:	add	w2, w2, w3
     95c:	add	w0, w0, w2
     960:	ldrh	w2, [x1, #42]
     964:	str	x2, [sp, #496]
     968:	add	x2, x19, x2, lsl #4
     96c:	add	x2, x2, #0xc, lsl #12
     970:	str	x2, [sp, #504]
     974:	ldrh	w2, [x1, #44]
     978:	str	x2, [sp, #512]
     97c:	add	x2, x19, x2, lsl #4
     980:	add	x2, x2, #0xc, lsl #12
     984:	str	x2, [sp, #520]
     988:	ldr	x2, [sp, #504]
     98c:	ldr	x3, [sp, #520]
     990:	ldr	w2, [x2, #2492]
     994:	ldr	w3, [x3, #2492]
     998:	add	w2, w2, w3
     99c:	add	w0, w0, w2
     9a0:	ldrh	w2, [x1, #46]
     9a4:	str	x2, [sp, #528]
     9a8:	add	x2, x19, x2, lsl #4
     9ac:	add	x2, x2, #0xc, lsl #12
     9b0:	str	x2, [sp, #536]
     9b4:	ldrh	w2, [x1, #48]
     9b8:	str	x2, [sp, #544]
     9bc:	add	x2, x19, x2, lsl #4
     9c0:	add	x2, x2, #0xc, lsl #12
     9c4:	str	x2, [sp, #552]
     9c8:	ldr	x2, [sp, #536]
     9cc:	ldr	x3, [sp, #552]
     9d0:	ldr	w2, [x2, #2492]
     9d4:	ldr	w3, [x3, #2492]
     9d8:	add	w2, w2, w3
     9dc:	add	w0, w0, w2
     9e0:	ldrh	w2, [x1, #50]
     9e4:	str	x2, [sp, #560]
     9e8:	add	x2, x19, x2, lsl #4
     9ec:	add	x2, x2, #0xc, lsl #12
     9f0:	str	x2, [sp, #568]
     9f4:	ldrh	w2, [x1, #52]
     9f8:	str	x2, [sp, #576]
     9fc:	add	x2, x19, x2, lsl #4
     a00:	add	x2, x2, #0xc, lsl #12
     a04:	str	x2, [sp, #584]
     a08:	ldr	x2, [sp, #568]
     a0c:	ldr	x3, [sp, #584]
     a10:	ldr	w2, [x2, #2492]
     a14:	ldr	w3, [x3, #2492]
     a18:	add	w2, w2, w3
     a1c:	add	w0, w0, w2
     a20:	ldrh	w2, [x1, #54]
     a24:	str	x2, [sp, #592]
     a28:	add	x27, x19, x2, lsl #4
     a2c:	ldrh	w2, [x1, #56]
     a30:	str	x2, [sp, #600]
     a34:	add	x27, x27, #0xc, lsl #12
     a38:	add	x2, x19, x2, lsl #4
     a3c:	add	x2, x2, #0xc, lsl #12
     a40:	str	x2, [sp, #608]
     a44:	ldr	w2, [x27, #2492]
     a48:	ldr	x3, [sp, #608]
     a4c:	ldr	w3, [x3, #2492]
     a50:	add	w2, w2, w3
     a54:	add	w0, w0, w2
     a58:	ldrh	w2, [x1, #58]
     a5c:	str	x2, [sp, #616]
     a60:	add	x26, x19, x2, lsl #4
     a64:	ldrh	w2, [x1, #60]
     a68:	add	x26, x26, #0xc, lsl #12
     a6c:	str	x2, [sp, #624]
     a70:	add	x25, x19, x2, lsl #4
     a74:	add	x25, x25, #0xc, lsl #12
     a78:	ldr	w2, [x26, #2492]
     a7c:	ldr	w3, [x25, #2492]
     a80:	add	w2, w2, w3
     a84:	add	w0, w0, w2
     a88:	ldrh	w2, [x1, #62]
     a8c:	str	x2, [sp, #632]
     a90:	add	x24, x19, x2, lsl #4
     a94:	ldrh	w2, [x1, #64]
     a98:	add	x24, x24, #0xc, lsl #12
     a9c:	str	x2, [sp, #640]
     aa0:	add	x23, x19, x2, lsl #4
     aa4:	add	x23, x23, #0xc, lsl #12
     aa8:	ldr	w2, [x24, #2492]
     aac:	ldr	w3, [x23, #2492]
     ab0:	add	w2, w2, w3
     ab4:	add	w0, w0, w2
     ab8:	ldrh	w2, [x1, #66]
     abc:	str	x2, [sp, #648]
     ac0:	add	x30, x19, x2, lsl #4
     ac4:	ldrh	w2, [x1, #68]
     ac8:	add	x30, x30, #0xc, lsl #12
     acc:	str	x2, [sp, #656]
     ad0:	add	x18, x19, x2, lsl #4
     ad4:	add	x18, x18, #0xc, lsl #12
     ad8:	ldr	w2, [x30, #2492]
     adc:	ldr	w3, [x18, #2492]
     ae0:	add	w2, w2, w3
     ae4:	add	w0, w0, w2
     ae8:	ldrh	w2, [x1, #70]
     aec:	str	x2, [sp, #664]
     af0:	add	x17, x19, x2, lsl #4
     af4:	ldrh	w2, [x1, #72]
     af8:	add	x17, x17, #0xc, lsl #12
     afc:	str	x2, [sp, #672]
     b00:	add	x16, x19, x2, lsl #4
     b04:	add	x16, x16, #0xc, lsl #12
     b08:	ldr	w2, [x17, #2492]
     b0c:	ldr	w3, [x16, #2492]
     b10:	add	w2, w2, w3
     b14:	add	w0, w0, w2
     b18:	ldrh	w2, [x1, #74]
     b1c:	str	x2, [sp, #680]
     b20:	add	x15, x19, x2, lsl #4
     b24:	ldrh	w2, [x1, #76]
     b28:	add	x15, x15, #0xc, lsl #12
     b2c:	str	x2, [sp, #688]
     b30:	add	x14, x19, x2, lsl #4
     b34:	add	x14, x14, #0xc, lsl #12
     b38:	ldr	w2, [x15, #2492]
     b3c:	ldr	w3, [x14, #2492]
     b40:	add	w2, w2, w3
     b44:	add	w0, w0, w2
     b48:	ldrh	w2, [x1, #78]
     b4c:	str	x2, [sp, #696]
     b50:	add	x13, x19, x2, lsl #4
     b54:	ldrh	w2, [x1, #80]
     b58:	add	x13, x13, #0xc, lsl #12
     b5c:	str	x2, [sp, #704]
     b60:	add	x12, x19, x2, lsl #4
     b64:	add	x12, x12, #0xc, lsl #12
     b68:	ldr	w2, [x13, #2492]
     b6c:	ldr	w3, [x12, #2492]
     b70:	add	w2, w2, w3
     b74:	add	w0, w0, w2
     b78:	ldrh	w2, [x1, #82]
     b7c:	str	x2, [sp, #712]
     b80:	add	x11, x19, x2, lsl #4
     b84:	ldrh	w2, [x1, #84]
     b88:	add	x11, x11, #0xc, lsl #12
     b8c:	str	x2, [sp, #720]
     b90:	add	x10, x19, x2, lsl #4
     b94:	add	x10, x10, #0xc, lsl #12
     b98:	ldr	w2, [x11, #2492]
     b9c:	ldr	w3, [x10, #2492]
     ba0:	add	w2, w2, w3
     ba4:	add	w0, w0, w2
     ba8:	ldrh	w2, [x1, #86]
     bac:	str	x2, [sp, #728]
     bb0:	add	x9, x19, x2, lsl #4
     bb4:	ldrh	w2, [x1, #88]
     bb8:	add	x9, x9, #0xc, lsl #12
     bbc:	str	x2, [sp, #736]
     bc0:	add	x8, x19, x2, lsl #4
     bc4:	add	x8, x8, #0xc, lsl #12
     bc8:	ldr	w2, [x9, #2492]
     bcc:	ldr	w3, [x8, #2492]
     bd0:	add	w2, w2, w3
     bd4:	add	w0, w0, w2
     bd8:	ldrh	w2, [x1, #90]
     bdc:	str	x2, [sp, #744]
     be0:	add	x7, x19, x2, lsl #4
     be4:	ldrh	w2, [x1, #92]
     be8:	str	x2, [sp, #752]
     bec:	add	x7, x7, #0xc, lsl #12
     bf0:	add	x2, x19, x2, lsl #4
     bf4:	add	x2, x2, #0xc, lsl #12
     bf8:	str	x2, [sp, #760]
     bfc:	ldr	w2, [x7, #2492]
     c00:	ldr	x3, [sp, #760]
     c04:	ldr	w3, [x3, #2492]
     c08:	add	w2, w2, w3
     c0c:	add	w0, w0, w2
     c10:	ldrh	w2, [x1, #94]
     c14:	str	x2, [sp, #768]
     c18:	add	x2, x19, x2, lsl #4
     c1c:	add	x2, x2, #0xc, lsl #12
     c20:	str	x2, [sp, #776]
     c24:	ldrh	w2, [x1, #96]
     c28:	str	x2, [sp, #784]
     c2c:	ldrh	w1, [x1, #98]
     c30:	add	x4, x19, x2, lsl #4
     c34:	str	x1, [sp, #800]
     c38:	ldr	x2, [sp, #776]
     c3c:	add	x4, x4, #0xc, lsl #12
     c40:	ldr	w2, [x2, #2492]
     c44:	ldr	w3, [x4, #2492]
     c48:	add	w2, w2, w3
     c4c:	add	w0, w0, w2
     c50:	ldrh	w2, [x20, x28, lsl #1]
     c54:	str	x2, [sp, #792]
     c58:	add	x3, x19, x2, lsl #4
     c5c:	add	x2, x19, x1, lsl #4
     c60:	add	x3, x3, #0xc, lsl #12
     c64:	add	x2, x2, #0xc, lsl #12
     c68:	ldr	w1, [x3, #2492]
     c6c:	ldr	w28, [x2, #2492]
     c70:	add	w1, w1, w28
     c74:	add	w0, w0, w1
     c78:	str	w0, [sp, #816]
     c7c:	ldr	x0, [sp, #184]
     c80:	ldr	x1, [sp, #232]
     c84:	ldr	w28, [x0, #2496]
     c88:	ldr	x0, [sp, #200]
     c8c:	ldr	w1, [x1, #2496]
     c90:	ldr	w0, [x0, #2496]
     c94:	add	w28, w28, w0
     c98:	ldr	x0, [sp, #216]
     c9c:	ldr	w0, [x0, #2496]
     ca0:	add	w1, w0, w1
     ca4:	add	w1, w28, w1
     ca8:	ldr	x0, [sp, #248]
     cac:	ldr	x28, [sp, #264]
     cb0:	ldr	w0, [x0, #2496]
     cb4:	ldr	w28, [x28, #2496]
     cb8:	add	w28, w0, w28
     cbc:	add	w28, w1, w28
     cc0:	ldr	x0, [sp, #280]
     cc4:	ldr	x1, [sp, #296]
     cc8:	ldr	w0, [x0, #2496]
     ccc:	ldr	w1, [x1, #2496]
     cd0:	add	w1, w0, w1
     cd4:	ldr	x0, [sp, #312]
     cd8:	add	w1, w28, w1
     cdc:	ldr	w0, [x0, #2496]
     ce0:	ldr	x28, [sp, #328]
     ce4:	ldr	w28, [x28, #2496]
     ce8:	add	w28, w0, w28
     cec:	add	w28, w1, w28
     cf0:	ldr	x0, [sp, #344]
     cf4:	ldr	x1, [sp, #360]
     cf8:	ldr	w0, [x0, #2496]
     cfc:	ldr	w1, [x1, #2496]
     d00:	add	w1, w0, w1
     d04:	add	w1, w28, w1
     d08:	ldr	x0, [sp, #376]
     d0c:	ldr	x28, [sp, #392]
     d10:	ldr	w0, [x0, #2496]
     d14:	ldr	w28, [x28, #2496]
     d18:	add	w28, w0, w28
     d1c:	add	w28, w1, w28
     d20:	ldr	x0, [sp, #408]
     d24:	ldr	x1, [sp, #424]
     d28:	ldr	w0, [x0, #2496]
     d2c:	ldr	w1, [x1, #2496]
     d30:	add	w1, w0, w1
     d34:	add	w1, w28, w1
     d38:	ldr	x0, [sp, #440]
     d3c:	ldr	x28, [sp, #456]
     d40:	ldr	w0, [x0, #2496]
     d44:	ldr	w28, [x28, #2496]
     d48:	add	w28, w0, w28
     d4c:	add	w28, w1, w28
     d50:	ldr	x0, [sp, #472]
     d54:	ldr	x1, [sp, #488]
     d58:	ldr	w0, [x0, #2496]
     d5c:	ldr	w1, [x1, #2496]
     d60:	add	w1, w0, w1
     d64:	add	w1, w28, w1
     d68:	ldr	x0, [sp, #504]
     d6c:	ldr	x28, [sp, #520]
     d70:	ldr	w0, [x0, #2496]
     d74:	ldr	w28, [x28, #2496]
     d78:	add	w28, w0, w28
     d7c:	add	w28, w1, w28
     d80:	ldr	x0, [sp, #536]
     d84:	ldr	x1, [sp, #552]
     d88:	ldr	w0, [x0, #2496]
     d8c:	ldr	w1, [x1, #2496]
     d90:	add	w1, w0, w1
     d94:	ldr	x0, [sp, #568]
     d98:	add	w1, w28, w1
     d9c:	ldr	w0, [x0, #2496]
     da0:	ldr	x28, [sp, #584]
     da4:	ldr	w28, [x28, #2496]
     da8:	add	w0, w0, w28
     dac:	add	w0, w1, w0
     db0:	ldr	w1, [x27, #2496]
     db4:	ldr	x27, [sp, #608]
     db8:	ldr	w28, [x27, #2496]
     dbc:	add	w1, w1, w28
     dc0:	ldr	w28, [x25, #2496]
     dc4:	add	w1, w0, w1
     dc8:	ldr	w0, [x26, #2496]
     dcc:	add	w0, w0, w28
     dd0:	ldr	w28, [x23, #2496]
     dd4:	add	w0, w1, w0
     dd8:	ldr	w1, [x24, #2496]
     ddc:	add	w1, w1, w28
     de0:	ldr	w28, [x18, #2496]
     de4:	add	w1, w0, w1
     de8:	ldr	w0, [x30, #2496]
     dec:	add	w0, w0, w28
     df0:	ldr	w28, [x16, #2496]
     df4:	add	w0, w1, w0
     df8:	ldr	w1, [x17, #2496]
     dfc:	add	w1, w1, w28
     e00:	ldr	w28, [x14, #2496]
     e04:	add	w1, w0, w1
     e08:	ldr	w0, [x15, #2496]
     e0c:	add	w0, w0, w28
     e10:	ldr	w28, [x12, #2496]
     e14:	add	w0, w1, w0
     e18:	ldr	w1, [x13, #2496]
     e1c:	add	w1, w1, w28
     e20:	ldr	w28, [x10, #2496]
     e24:	add	w1, w0, w1
     e28:	ldr	w0, [x11, #2496]
     e2c:	add	w0, w0, w28
     e30:	ldr	w28, [x8, #2496]
     e34:	add	w0, w1, w0
     e38:	ldr	w1, [x9, #2496]
     e3c:	add	w1, w1, w28
     e40:	add	w1, w0, w1
     e44:	ldr	w0, [x7, #2496]
     e48:	ldr	x7, [sp, #760]
     e4c:	ldr	w28, [x7, #2496]
     e50:	add	w0, w0, w28
     e54:	ldr	w28, [x4, #2496]
     e58:	add	w0, w1, w0
     e5c:	ldr	x1, [sp, #776]
     e60:	ldr	w1, [x1, #2496]
     e64:	add	w1, w1, w28
     e68:	ldr	w28, [x2, #2496]
     e6c:	add	w1, w0, w1
     e70:	ldr	w0, [x3, #2496]
     e74:	add	w0, w0, w28
     e78:	add	w0, w1, w0
     e7c:	ldr	x1, [sp, #176]
     e80:	add	x2, x1, #0xc9b
     e84:	ldr	x1, [sp, #192]
     e88:	add	x2, x19, x2, lsl #4
     e8c:	add	x1, x1, #0xc9b
     e90:	ldr	w2, [x2, #8]
     e94:	add	x1, x19, x1, lsl #4
     e98:	ldr	w1, [x1, #8]
     e9c:	add	w2, w2, w1
     ea0:	ldr	x1, [sp, #208]
     ea4:	add	x3, x1, #0xc9b
     ea8:	ldr	x1, [sp, #224]
     eac:	add	x3, x19, x3, lsl #4
     eb0:	add	x1, x1, #0xc9b
     eb4:	ldr	w3, [x3, #8]
     eb8:	add	x1, x19, x1, lsl #4
     ebc:	ldr	w1, [x1, #8]
     ec0:	add	w3, w3, w1
     ec4:	ldr	x1, [sp, #240]
     ec8:	add	w2, w2, w3
     ecc:	add	x3, x1, #0xc9b
     ed0:	ldr	x1, [sp, #256]
     ed4:	add	x3, x19, x3, lsl #4
     ed8:	add	x1, x1, #0xc9b
     edc:	ldr	w3, [x3, #8]
     ee0:	add	x1, x19, x1, lsl #4
     ee4:	ldr	w1, [x1, #8]
     ee8:	add	w3, w3, w1
     eec:	ldr	x1, [sp, #272]
     ef0:	add	w2, w2, w3
     ef4:	add	x3, x1, #0xc9b
     ef8:	ldr	x1, [sp, #288]
     efc:	add	x3, x19, x3, lsl #4
     f00:	add	x1, x1, #0xc9b
     f04:	ldr	w3, [x3, #8]
     f08:	add	x1, x19, x1, lsl #4
     f0c:	ldr	w1, [x1, #8]
     f10:	add	w3, w3, w1
     f14:	ldr	x1, [sp, #304]
     f18:	add	w2, w2, w3
     f1c:	add	x3, x1, #0xc9b
     f20:	ldr	x1, [sp, #320]
     f24:	add	x3, x19, x3, lsl #4
     f28:	add	x1, x1, #0xc9b
     f2c:	ldr	w3, [x3, #8]
     f30:	add	x1, x19, x1, lsl #4
     f34:	ldr	w1, [x1, #8]
     f38:	add	w3, w3, w1
     f3c:	ldr	x1, [sp, #336]
     f40:	add	w2, w2, w3
     f44:	add	x3, x1, #0xc9b
     f48:	ldr	x1, [sp, #352]
     f4c:	add	x3, x19, x3, lsl #4
     f50:	add	x1, x1, #0xc9b
     f54:	ldr	w3, [x3, #8]
     f58:	add	x1, x19, x1, lsl #4
     f5c:	ldr	w1, [x1, #8]
     f60:	add	w3, w3, w1
     f64:	ldr	x1, [sp, #368]
     f68:	add	w2, w2, w3
     f6c:	add	x3, x1, #0xc9b
     f70:	ldr	x1, [sp, #384]
     f74:	add	x3, x19, x3, lsl #4
     f78:	add	x1, x1, #0xc9b
     f7c:	ldr	w3, [x3, #8]
     f80:	add	x1, x19, x1, lsl #4
     f84:	ldr	w1, [x1, #8]
     f88:	add	w3, w3, w1
     f8c:	ldr	x1, [sp, #400]
     f90:	add	w2, w2, w3
     f94:	add	x3, x1, #0xc9b
     f98:	ldr	x1, [sp, #416]
     f9c:	add	x3, x19, x3, lsl #4
     fa0:	add	x1, x1, #0xc9b
     fa4:	ldr	w3, [x3, #8]
     fa8:	add	x1, x19, x1, lsl #4
     fac:	ldr	w1, [x1, #8]
     fb0:	add	w3, w3, w1
     fb4:	ldr	x1, [sp, #432]
     fb8:	add	w2, w2, w3
     fbc:	add	x3, x1, #0xc9b
     fc0:	ldr	x1, [sp, #448]
     fc4:	add	x3, x19, x3, lsl #4
     fc8:	add	x1, x1, #0xc9b
     fcc:	ldr	w3, [x3, #8]
     fd0:	add	x1, x19, x1, lsl #4
     fd4:	ldr	w1, [x1, #8]
     fd8:	add	w3, w3, w1
     fdc:	ldr	x1, [sp, #464]
     fe0:	add	w2, w2, w3
     fe4:	add	x3, x1, #0xc9b
     fe8:	ldr	x1, [sp, #480]
     fec:	add	x3, x19, x3, lsl #4
     ff0:	add	x1, x1, #0xc9b
     ff4:	ldr	w3, [x3, #8]
     ff8:	add	x1, x19, x1, lsl #4
     ffc:	ldr	w1, [x1, #8]
    1000:	add	w3, w3, w1
    1004:	ldr	x1, [sp, #496]
    1008:	add	w2, w2, w3
    100c:	add	x3, x1, #0xc9b
    1010:	ldr	x1, [sp, #512]
    1014:	add	x3, x19, x3, lsl #4
    1018:	add	x1, x1, #0xc9b
    101c:	ldr	w3, [x3, #8]
    1020:	add	x1, x19, x1, lsl #4
    1024:	ldr	w1, [x1, #8]
    1028:	add	w3, w3, w1
    102c:	ldr	x1, [sp, #528]
    1030:	add	w2, w2, w3
    1034:	add	x3, x1, #0xc9b
    1038:	ldr	x1, [sp, #544]
    103c:	add	x3, x19, x3, lsl #4
    1040:	add	x1, x1, #0xc9b
    1044:	ldr	w3, [x3, #8]
    1048:	add	x1, x19, x1, lsl #4
    104c:	ldr	w1, [x1, #8]
    1050:	add	w3, w3, w1
    1054:	ldr	x1, [sp, #560]
    1058:	add	w2, w2, w3
    105c:	add	x3, x1, #0xc9b
    1060:	ldr	x1, [sp, #576]
    1064:	add	x3, x19, x3, lsl #4
    1068:	add	x1, x1, #0xc9b
    106c:	ldr	w3, [x3, #8]
    1070:	add	x1, x19, x1, lsl #4
    1074:	ldr	w1, [x1, #8]
    1078:	add	w3, w3, w1
    107c:	ldr	x1, [sp, #592]
    1080:	add	w2, w2, w3
    1084:	add	x3, x1, #0xc9b
    1088:	ldr	x1, [sp, #600]
    108c:	add	x3, x19, x3, lsl #4
    1090:	add	x1, x1, #0xc9b
    1094:	ldr	w3, [x3, #8]
    1098:	add	x1, x19, x1, lsl #4
    109c:	ldr	w1, [x1, #8]
    10a0:	add	w3, w3, w1
    10a4:	ldr	x1, [sp, #616]
    10a8:	add	w2, w2, w3
    10ac:	add	x3, x1, #0xc9b
    10b0:	ldr	x1, [sp, #624]
    10b4:	add	x3, x19, x3, lsl #4
    10b8:	add	x1, x1, #0xc9b
    10bc:	ldr	w3, [x3, #8]
    10c0:	add	x1, x19, x1, lsl #4
    10c4:	ldr	w1, [x1, #8]
    10c8:	add	w3, w3, w1
    10cc:	ldr	x1, [sp, #632]
    10d0:	add	w2, w2, w3
    10d4:	add	x3, x1, #0xc9b
    10d8:	ldr	x1, [sp, #640]
    10dc:	add	x3, x19, x3, lsl #4
    10e0:	add	x1, x1, #0xc9b
    10e4:	ldr	w3, [x3, #8]
    10e8:	add	x1, x19, x1, lsl #4
    10ec:	ldr	w1, [x1, #8]
    10f0:	add	w3, w3, w1
    10f4:	ldr	x1, [sp, #648]
    10f8:	add	w2, w2, w3
    10fc:	add	x4, x1, #0xc9b
    1100:	ldr	x1, [sp, #656]
    1104:	add	x4, x19, x4, lsl #4
    1108:	add	x3, x1, #0xc9b
    110c:	ldr	w1, [x4, #8]
    1110:	add	x3, x19, x3, lsl #4
    1114:	ldr	w3, [x3, #8]
    1118:	add	w1, w1, w3
    111c:	add	w1, w2, w1
    1120:	ldr	x2, [sp, #664]
    1124:	ldr	x3, [sp, #672]
    1128:	add	x2, x2, #0xc9b
    112c:	add	x4, x3, #0xc9b
    1130:	add	x2, x19, x2, lsl #4
    1134:	add	x4, x19, x4, lsl #4
    1138:	ldr	w2, [x2, #8]
    113c:	ldr	w3, [x4, #8]
    1140:	add	w2, w2, w3
    1144:	add	w2, w1, w2
    1148:	ldr	x1, [sp, #680]
    114c:	ldr	x3, [sp, #688]
    1150:	add	x1, x1, #0xc9b
    1154:	add	x4, x3, #0xc9b
    1158:	add	x1, x19, x1, lsl #4
    115c:	add	x4, x19, x4, lsl #4
    1160:	ldr	w1, [x1, #8]
    1164:	ldr	w3, [x4, #8]
    1168:	add	w1, w1, w3
    116c:	add	w1, w2, w1
    1170:	ldr	x2, [sp, #696]
    1174:	ldr	x3, [sp, #704]
    1178:	add	x2, x2, #0xc9b
    117c:	add	x4, x3, #0xc9b
    1180:	add	x2, x19, x2, lsl #4
    1184:	add	x4, x19, x4, lsl #4
    1188:	ldr	w2, [x2, #8]
    118c:	ldr	w3, [x4, #8]
    1190:	add	w2, w2, w3
    1194:	add	w2, w1, w2
    1198:	ldr	x1, [sp, #712]
    119c:	ldr	x3, [sp, #720]
    11a0:	add	x1, x1, #0xc9b
    11a4:	add	x4, x3, #0xc9b
    11a8:	add	x1, x19, x1, lsl #4
    11ac:	add	x4, x19, x4, lsl #4
    11b0:	ldr	w1, [x1, #8]
    11b4:	ldr	w3, [x4, #8]
    11b8:	add	w1, w1, w3
    11bc:	add	w1, w2, w1
    11c0:	ldr	x2, [sp, #728]
    11c4:	ldr	x3, [sp, #736]
    11c8:	add	x2, x2, #0xc9b
    11cc:	add	x4, x3, #0xc9b
    11d0:	add	x2, x19, x2, lsl #4
    11d4:	add	x4, x19, x4, lsl #4
    11d8:	ldr	w2, [x2, #8]
    11dc:	ldr	w3, [x4, #8]
    11e0:	add	w2, w2, w3
    11e4:	add	w2, w1, w2
    11e8:	ldr	x1, [sp, #744]
    11ec:	ldr	x3, [sp, #752]
    11f0:	add	x1, x1, #0xc9b
    11f4:	add	x4, x3, #0xc9b
    11f8:	add	x1, x19, x1, lsl #4
    11fc:	add	x4, x19, x4, lsl #4
    1200:	ldr	w1, [x1, #8]
    1204:	ldr	w3, [x4, #8]
    1208:	add	w1, w1, w3
    120c:	add	w2, w2, w1
    1210:	ldr	x1, [sp, #768]
    1214:	ldr	x3, [sp, #784]
    1218:	add	x1, x1, #0xc9b
    121c:	add	x4, x3, #0xc9b
    1220:	add	x1, x19, x1, lsl #4
    1224:	add	x4, x19, x4, lsl #4
    1228:	ldr	w1, [x1, #8]
    122c:	ldr	w3, [x4, #8]
    1230:	add	w1, w1, w3
    1234:	add	w2, w2, w1
    1238:	ldr	x1, [sp, #792]
    123c:	add	x3, x1, #0xc9b
    1240:	ldr	x1, [sp, #800]
    1244:	add	x3, x19, x3, lsl #4
    1248:	add	x1, x1, #0xc9b
    124c:	ldr	w3, [x3, #8]
    1250:	add	x1, x19, x1, lsl #4
    1254:	str	w0, [sp, #840]
    1258:	ldr	w1, [x1, #8]
    125c:	add	w1, w3, w1
    1260:	add	w2, w2, w1
    1264:	ldr	w1, [sp, #816]
    1268:	str	w2, [sp, #832]
    126c:	str	w1, [sp, #836]
    1270:	mov	w2, #0xc9ff                	// #51711
    1274:	mov	x0, #0x0                   	// #0
    1278:	mov	w1, #0xffffffff            	// #-1
    127c:	movk	w2, #0x3b9a, lsl #16
    1280:	add	x3, sp, #0x340
    1284:	ldrh	w3, [x3, x0, lsl #1]
    1288:	cmp	w3, w2
    128c:	b.ge	1298 <BZ2_compressBlock+0x11d8>  // b.tcont
    1290:	mov	w2, w3
    1294:	mov	w1, w0
    1298:	add	x0, x0, #0x1
    129c:	cmp	w22, w0
    12a0:	b.gt	1280 <BZ2_compressBlock+0x11c0>
    12a4:	ldr	w0, [sp, #808]
    12a8:	add	x3, sp, #0x360
    12ac:	cmp	w22, #0x6
    12b0:	add	w0, w0, w2
    12b4:	sbfiz	x2, x1, #2, #32
    12b8:	str	w0, [sp, #808]
    12bc:	add	x0, sp, #0x360
    12c0:	ldr	w0, [x0, x2]
    12c4:	add	w0, w0, #0x1
    12c8:	str	w0, [x3, x2]
    12cc:	ldr	x2, [sp, #136]
    12d0:	ldr	x0, [sp, #824]
    12d4:	strb	w1, [x0, x2]
    12d8:	sxtw	x0, w5
    12dc:	b.ne	1934 <BZ2_compressBlock+0x1874>  // b.any
    12e0:	sub	w2, w6, w5
    12e4:	cmp	w2, #0x31
    12e8:	b.ne	1934 <BZ2_compressBlock+0x1874>  // b.any
    12ec:	mov	w2, #0x102                 	// #258
    12f0:	smull	x1, w1, w2
    12f4:	ldrh	w2, [x20, x0, lsl #1]
    12f8:	add	x0, x20, x0, lsl #1
    12fc:	add	x2, x2, x1
    1300:	add	x2, x19, x2, lsl #2
    1304:	add	x2, x2, #0x8, lsl #12
    1308:	ldr	w3, [x2, #12680]
    130c:	add	w3, w3, #0x1
    1310:	str	w3, [x2, #12680]
    1314:	ldrh	w2, [x0, #2]
    1318:	add	x2, x2, x1
    131c:	add	x2, x19, x2, lsl #2
    1320:	add	x2, x2, #0x8, lsl #12
    1324:	ldr	w3, [x2, #12680]
    1328:	add	w3, w3, #0x1
    132c:	str	w3, [x2, #12680]
    1330:	ldrh	w2, [x0, #4]
    1334:	add	x2, x2, x1
    1338:	add	x2, x19, x2, lsl #2
    133c:	add	x2, x2, #0x8, lsl #12
    1340:	ldr	w3, [x2, #12680]
    1344:	add	w3, w3, #0x1
    1348:	str	w3, [x2, #12680]
    134c:	ldrh	w2, [x0, #6]
    1350:	add	x2, x2, x1
    1354:	add	x2, x19, x2, lsl #2
    1358:	add	x2, x2, #0x8, lsl #12
    135c:	ldr	w3, [x2, #12680]
    1360:	add	w3, w3, #0x1
    1364:	str	w3, [x2, #12680]
    1368:	ldrh	w2, [x0, #8]
    136c:	add	x2, x2, x1
    1370:	add	x2, x19, x2, lsl #2
    1374:	add	x2, x2, #0x8, lsl #12
    1378:	ldr	w3, [x2, #12680]
    137c:	add	w3, w3, #0x1
    1380:	str	w3, [x2, #12680]
    1384:	ldrh	w2, [x0, #10]
    1388:	add	x2, x2, x1
    138c:	add	x2, x19, x2, lsl #2
    1390:	add	x2, x2, #0x8, lsl #12
    1394:	ldr	w3, [x2, #12680]
    1398:	add	w3, w3, #0x1
    139c:	str	w3, [x2, #12680]
    13a0:	ldrh	w2, [x0, #12]
    13a4:	add	x2, x2, x1
    13a8:	add	x2, x19, x2, lsl #2
    13ac:	add	x2, x2, #0x8, lsl #12
    13b0:	ldr	w3, [x2, #12680]
    13b4:	add	w3, w3, #0x1
    13b8:	str	w3, [x2, #12680]
    13bc:	ldrh	w2, [x0, #14]
    13c0:	add	x2, x2, x1
    13c4:	add	x2, x19, x2, lsl #2
    13c8:	add	x2, x2, #0x8, lsl #12
    13cc:	ldr	w3, [x2, #12680]
    13d0:	add	w3, w3, #0x1
    13d4:	str	w3, [x2, #12680]
    13d8:	ldrh	w2, [x0, #16]
    13dc:	add	x2, x2, x1
    13e0:	add	x2, x19, x2, lsl #2
    13e4:	add	x2, x2, #0x8, lsl #12
    13e8:	ldr	w3, [x2, #12680]
    13ec:	add	w3, w3, #0x1
    13f0:	str	w3, [x2, #12680]
    13f4:	ldrh	w2, [x0, #18]
    13f8:	add	x2, x2, x1
    13fc:	add	x2, x19, x2, lsl #2
    1400:	add	x2, x2, #0x8, lsl #12
    1404:	ldr	w3, [x2, #12680]
    1408:	add	w3, w3, #0x1
    140c:	str	w3, [x2, #12680]
    1410:	ldrh	w2, [x0, #20]
    1414:	add	x2, x2, x1
    1418:	add	x2, x19, x2, lsl #2
    141c:	add	x2, x2, #0x8, lsl #12
    1420:	ldr	w3, [x2, #12680]
    1424:	add	w3, w3, #0x1
    1428:	str	w3, [x2, #12680]
    142c:	ldrh	w2, [x0, #22]
    1430:	add	x2, x2, x1
    1434:	add	x2, x19, x2, lsl #2
    1438:	add	x2, x2, #0x8, lsl #12
    143c:	ldr	w3, [x2, #12680]
    1440:	add	w3, w3, #0x1
    1444:	str	w3, [x2, #12680]
    1448:	ldrh	w2, [x0, #24]
    144c:	add	x2, x2, x1
    1450:	add	x2, x19, x2, lsl #2
    1454:	add	x2, x2, #0x8, lsl #12
    1458:	ldr	w3, [x2, #12680]
    145c:	add	w3, w3, #0x1
    1460:	str	w3, [x2, #12680]
    1464:	ldrh	w2, [x0, #26]
    1468:	add	x2, x2, x1
    146c:	add	x2, x19, x2, lsl #2
    1470:	add	x2, x2, #0x8, lsl #12
    1474:	ldr	w3, [x2, #12680]
    1478:	add	w3, w3, #0x1
    147c:	str	w3, [x2, #12680]
    1480:	ldrh	w2, [x0, #28]
    1484:	add	x2, x2, x1
    1488:	add	x2, x19, x2, lsl #2
    148c:	add	x2, x2, #0x8, lsl #12
    1490:	ldr	w3, [x2, #12680]
    1494:	add	w3, w3, #0x1
    1498:	str	w3, [x2, #12680]
    149c:	ldrh	w2, [x0, #30]
    14a0:	add	x2, x2, x1
    14a4:	add	x2, x19, x2, lsl #2
    14a8:	add	x2, x2, #0x8, lsl #12
    14ac:	ldr	w3, [x2, #12680]
    14b0:	add	w3, w3, #0x1
    14b4:	str	w3, [x2, #12680]
    14b8:	ldrh	w2, [x0, #32]
    14bc:	add	x2, x2, x1
    14c0:	add	x2, x19, x2, lsl #2
    14c4:	add	x2, x2, #0x8, lsl #12
    14c8:	ldr	w3, [x2, #12680]
    14cc:	add	w3, w3, #0x1
    14d0:	str	w3, [x2, #12680]
    14d4:	ldrh	w2, [x0, #34]
    14d8:	add	x2, x2, x1
    14dc:	add	x2, x19, x2, lsl #2
    14e0:	add	x2, x2, #0x8, lsl #12
    14e4:	ldr	w3, [x2, #12680]
    14e8:	add	w3, w3, #0x1
    14ec:	str	w3, [x2, #12680]
    14f0:	ldrh	w2, [x0, #36]
    14f4:	add	x2, x2, x1
    14f8:	add	x2, x19, x2, lsl #2
    14fc:	add	x2, x2, #0x8, lsl #12
    1500:	ldr	w3, [x2, #12680]
    1504:	add	w3, w3, #0x1
    1508:	str	w3, [x2, #12680]
    150c:	ldrh	w2, [x0, #38]
    1510:	add	x2, x2, x1
    1514:	add	x2, x19, x2, lsl #2
    1518:	add	x2, x2, #0x8, lsl #12
    151c:	ldr	w3, [x2, #12680]
    1520:	add	w3, w3, #0x1
    1524:	str	w3, [x2, #12680]
    1528:	ldrh	w2, [x0, #40]
    152c:	add	x2, x2, x1
    1530:	add	x2, x19, x2, lsl #2
    1534:	add	x2, x2, #0x8, lsl #12
    1538:	ldr	w3, [x2, #12680]
    153c:	add	w3, w3, #0x1
    1540:	str	w3, [x2, #12680]
    1544:	ldrh	w2, [x0, #42]
    1548:	add	x2, x2, x1
    154c:	add	x2, x19, x2, lsl #2
    1550:	add	x2, x2, #0x8, lsl #12
    1554:	ldr	w3, [x2, #12680]
    1558:	add	w3, w3, #0x1
    155c:	str	w3, [x2, #12680]
    1560:	ldrh	w2, [x0, #44]
    1564:	add	x2, x2, x1
    1568:	add	x2, x19, x2, lsl #2
    156c:	add	x2, x2, #0x8, lsl #12
    1570:	ldr	w3, [x2, #12680]
    1574:	add	w3, w3, #0x1
    1578:	str	w3, [x2, #12680]
    157c:	ldrh	w2, [x0, #46]
    1580:	add	x2, x2, x1
    1584:	add	x2, x19, x2, lsl #2
    1588:	add	x2, x2, #0x8, lsl #12
    158c:	ldr	w3, [x2, #12680]
    1590:	add	w3, w3, #0x1
    1594:	str	w3, [x2, #12680]
    1598:	ldrh	w2, [x0, #48]
    159c:	add	x2, x2, x1
    15a0:	add	x2, x19, x2, lsl #2
    15a4:	add	x2, x2, #0x8, lsl #12
    15a8:	ldr	w3, [x2, #12680]
    15ac:	add	w3, w3, #0x1
    15b0:	str	w3, [x2, #12680]
    15b4:	ldrh	w2, [x0, #50]
    15b8:	add	x2, x2, x1
    15bc:	add	x2, x19, x2, lsl #2
    15c0:	add	x2, x2, #0x8, lsl #12
    15c4:	ldr	w3, [x2, #12680]
    15c8:	add	w3, w3, #0x1
    15cc:	str	w3, [x2, #12680]
    15d0:	ldrh	w2, [x0, #52]
    15d4:	add	x2, x2, x1
    15d8:	add	x2, x19, x2, lsl #2
    15dc:	add	x2, x2, #0x8, lsl #12
    15e0:	ldr	w3, [x2, #12680]
    15e4:	add	w3, w3, #0x1
    15e8:	str	w3, [x2, #12680]
    15ec:	ldrh	w2, [x0, #54]
    15f0:	add	x2, x2, x1
    15f4:	add	x2, x19, x2, lsl #2
    15f8:	add	x2, x2, #0x8, lsl #12
    15fc:	ldr	w3, [x2, #12680]
    1600:	add	w3, w3, #0x1
    1604:	str	w3, [x2, #12680]
    1608:	ldrh	w2, [x0, #56]
    160c:	add	x2, x2, x1
    1610:	add	x2, x19, x2, lsl #2
    1614:	add	x2, x2, #0x8, lsl #12
    1618:	ldr	w3, [x2, #12680]
    161c:	add	w3, w3, #0x1
    1620:	str	w3, [x2, #12680]
    1624:	ldrh	w2, [x0, #58]
    1628:	add	x2, x2, x1
    162c:	add	x2, x19, x2, lsl #2
    1630:	add	x2, x2, #0x8, lsl #12
    1634:	ldr	w3, [x2, #12680]
    1638:	add	w3, w3, #0x1
    163c:	str	w3, [x2, #12680]
    1640:	ldrh	w2, [x0, #60]
    1644:	add	x2, x2, x1
    1648:	add	x2, x19, x2, lsl #2
    164c:	add	x2, x2, #0x8, lsl #12
    1650:	ldr	w3, [x2, #12680]
    1654:	add	w3, w3, #0x1
    1658:	str	w3, [x2, #12680]
    165c:	ldrh	w2, [x0, #62]
    1660:	add	x2, x2, x1
    1664:	add	x2, x19, x2, lsl #2
    1668:	add	x2, x2, #0x8, lsl #12
    166c:	ldr	w3, [x2, #12680]
    1670:	add	w3, w3, #0x1
    1674:	str	w3, [x2, #12680]
    1678:	ldrh	w2, [x0, #64]
    167c:	add	x2, x2, x1
    1680:	add	x2, x19, x2, lsl #2
    1684:	add	x2, x2, #0x8, lsl #12
    1688:	ldr	w3, [x2, #12680]
    168c:	add	w3, w3, #0x1
    1690:	str	w3, [x2, #12680]
    1694:	ldrh	w2, [x0, #66]
    1698:	add	x2, x2, x1
    169c:	add	x2, x19, x2, lsl #2
    16a0:	add	x2, x2, #0x8, lsl #12
    16a4:	ldr	w3, [x2, #12680]
    16a8:	add	w3, w3, #0x1
    16ac:	str	w3, [x2, #12680]
    16b0:	ldrh	w2, [x0, #68]
    16b4:	add	x2, x2, x1
    16b8:	add	x2, x19, x2, lsl #2
    16bc:	add	x2, x2, #0x8, lsl #12
    16c0:	ldr	w3, [x2, #12680]
    16c4:	add	w3, w3, #0x1
    16c8:	str	w3, [x2, #12680]
    16cc:	ldrh	w2, [x0, #70]
    16d0:	add	x2, x2, x1
    16d4:	add	x2, x19, x2, lsl #2
    16d8:	add	x2, x2, #0x8, lsl #12
    16dc:	ldr	w3, [x2, #12680]
    16e0:	add	w3, w3, #0x1
    16e4:	str	w3, [x2, #12680]
    16e8:	ldrh	w2, [x0, #72]
    16ec:	add	x2, x2, x1
    16f0:	add	x2, x19, x2, lsl #2
    16f4:	add	x2, x2, #0x8, lsl #12
    16f8:	ldr	w3, [x2, #12680]
    16fc:	add	w3, w3, #0x1
    1700:	str	w3, [x2, #12680]
    1704:	ldrh	w2, [x0, #74]
    1708:	add	x2, x2, x1
    170c:	add	x2, x19, x2, lsl #2
    1710:	add	x2, x2, #0x8, lsl #12
    1714:	ldr	w3, [x2, #12680]
    1718:	add	w3, w3, #0x1
    171c:	str	w3, [x2, #12680]
    1720:	ldrh	w2, [x0, #76]
    1724:	add	x2, x2, x1
    1728:	add	x2, x19, x2, lsl #2
    172c:	add	x2, x2, #0x8, lsl #12
    1730:	ldr	w3, [x2, #12680]
    1734:	add	w3, w3, #0x1
    1738:	str	w3, [x2, #12680]
    173c:	ldrh	w2, [x0, #78]
    1740:	add	x2, x2, x1
    1744:	add	x2, x19, x2, lsl #2
    1748:	add	x2, x2, #0x8, lsl #12
    174c:	ldr	w3, [x2, #12680]
    1750:	add	w3, w3, #0x1
    1754:	str	w3, [x2, #12680]
    1758:	ldrh	w2, [x0, #80]
    175c:	add	x2, x2, x1
    1760:	add	x2, x19, x2, lsl #2
    1764:	add	x2, x2, #0x8, lsl #12
    1768:	ldr	w3, [x2, #12680]
    176c:	add	w3, w3, #0x1
    1770:	str	w3, [x2, #12680]
    1774:	ldrh	w2, [x0, #82]
    1778:	add	x2, x2, x1
    177c:	add	x2, x19, x2, lsl #2
    1780:	add	x2, x2, #0x8, lsl #12
    1784:	ldr	w3, [x2, #12680]
    1788:	add	w3, w3, #0x1
    178c:	str	w3, [x2, #12680]
    1790:	ldrh	w2, [x0, #84]
    1794:	add	x2, x2, x1
    1798:	add	x2, x19, x2, lsl #2
    179c:	add	x2, x2, #0x8, lsl #12
    17a0:	ldr	w3, [x2, #12680]
    17a4:	add	w3, w3, #0x1
    17a8:	str	w3, [x2, #12680]
    17ac:	ldrh	w2, [x0, #86]
    17b0:	add	x2, x2, x1
    17b4:	add	x2, x19, x2, lsl #2
    17b8:	add	x2, x2, #0x8, lsl #12
    17bc:	ldr	w3, [x2, #12680]
    17c0:	add	w3, w3, #0x1
    17c4:	str	w3, [x2, #12680]
    17c8:	ldrh	w2, [x0, #88]
    17cc:	add	x2, x2, x1
    17d0:	add	x2, x19, x2, lsl #2
    17d4:	add	x2, x2, #0x8, lsl #12
    17d8:	ldr	w3, [x2, #12680]
    17dc:	add	w3, w3, #0x1
    17e0:	str	w3, [x2, #12680]
    17e4:	ldrh	w2, [x0, #90]
    17e8:	add	x2, x2, x1
    17ec:	add	x2, x19, x2, lsl #2
    17f0:	add	x2, x2, #0x8, lsl #12
    17f4:	ldr	w3, [x2, #12680]
    17f8:	add	w3, w3, #0x1
    17fc:	str	w3, [x2, #12680]
    1800:	ldrh	w2, [x0, #92]
    1804:	add	x2, x2, x1
    1808:	add	x2, x19, x2, lsl #2
    180c:	add	x2, x2, #0x8, lsl #12
    1810:	ldr	w3, [x2, #12680]
    1814:	add	w3, w3, #0x1
    1818:	str	w3, [x2, #12680]
    181c:	ldrh	w2, [x0, #94]
    1820:	add	x2, x2, x1
    1824:	add	x2, x19, x2, lsl #2
    1828:	add	x2, x2, #0x8, lsl #12
    182c:	ldr	w3, [x2, #12680]
    1830:	add	w3, w3, #0x1
    1834:	str	w3, [x2, #12680]
    1838:	ldrh	w2, [x0, #96]
    183c:	ldrh	w0, [x0, #98]
    1840:	add	x2, x2, x1
    1844:	add	x1, x0, x1
    1848:	add	x2, x19, x2, lsl #2
    184c:	add	x2, x2, #0x8, lsl #12
    1850:	add	x1, x19, x1, lsl #2
    1854:	add	x1, x1, #0x8, lsl #12
    1858:	ldr	w3, [x2, #12680]
    185c:	add	w3, w3, #0x1
    1860:	str	w3, [x2, #12680]
    1864:	ldr	w0, [x1, #12680]
    1868:	add	w0, w0, #0x1
    186c:	str	w0, [x1, #12680]
    1870:	ldr	x0, [sp, #136]
    1874:	add	w5, w6, #0x1
    1878:	add	x0, x0, #0x1
    187c:	str	x0, [sp, #136]
    1880:	b	68c <BZ2_compressBlock+0x5cc>
    1884:	ldrb	w4, [x0]
    1888:	add	w2, w2, #0x1
    188c:	ldrb	w3, [x0, #258]
    1890:	add	x1, x1, #0x10
    1894:	add	x0, x0, #0x1
    1898:	orr	w3, w4, w3, lsl #16
    189c:	stur	w3, [x1, #-16]
    18a0:	ldrb	w4, [x0, #515]
    18a4:	ldrb	w3, [x0, #773]
    18a8:	orr	w3, w4, w3, lsl #16
    18ac:	stur	w3, [x1, #-12]
    18b0:	ldrb	w3, [x0, #1289]
    18b4:	ldrb	w4, [x0, #1031]
    18b8:	orr	w3, w4, w3, lsl #16
    18bc:	stur	w3, [x1, #-8]
    18c0:	b	658 <BZ2_compressBlock+0x598>
    18c4:	ldrh	w0, [x20, x28, lsl #1]
    18c8:	mov	x7, #0x934c                	// #37708
    18cc:	add	x3, sp, #0x340
    18d0:	mov	x2, #0x0                   	// #0
    18d4:	add	x0, x0, x7
    18d8:	add	x0, x19, x0
    18dc:	mov	x1, #0x102                 	// #258
    18e0:	ldrh	w4, [x3]
    18e4:	mul	x1, x2, x1
    18e8:	add	x2, x2, #0x1
    18ec:	cmp	w22, w2
    18f0:	ldrb	w1, [x0, x1]
    18f4:	add	w1, w1, w4
    18f8:	strh	w1, [x3], #2
    18fc:	b.gt	18dc <BZ2_compressBlock+0x181c>
    1900:	add	x28, x28, #0x1
    1904:	cmp	w6, w28
    1908:	b.ge	18c4 <BZ2_compressBlock+0x1804>  // b.tcont
    190c:	b	1270 <BZ2_compressBlock+0x11b0>
    1910:	ldrh	w2, [x20, x0, lsl #1]
    1914:	mov	w3, #0x102                 	// #258
    1918:	add	x0, x0, #0x1
    191c:	smaddl	x2, w1, w3, x2
    1920:	add	x2, x19, x2, lsl #2
    1924:	add	x2, x2, #0x8, lsl #12
    1928:	ldr	w3, [x2, #12680]
    192c:	add	w3, w3, #0x1
    1930:	str	w3, [x2, #12680]
    1934:	cmp	w6, w0
    1938:	b.ge	1910 <BZ2_compressBlock+0x1850>  // b.tcont
    193c:	b	1870 <BZ2_compressBlock+0x17b0>
    1940:	ldr	w0, [sp, #160]
    1944:	add	w0, w0, #0x1
    1948:	str	w0, [sp, #160]
    194c:	ldr	w0, [x19, #656]
    1950:	cmp	w0, #0x2
    1954:	b.le	19b4 <BZ2_compressBlock+0x18f4>
    1958:	ldr	w0, [sp, #808]
    195c:	adrp	x26, 0 <stderr>
    1960:	ldr	w2, [sp, #160]
    1964:	adrp	x1, 0 <bsW>
    1968:	adrp	x27, 0 <bsW>
    196c:	add	x23, x26, #0x0
    1970:	asr	w3, w0, #3
    1974:	add	x1, x1, #0x0
    1978:	ldr	x0, [x26]
    197c:	add	x28, sp, #0x360
    1980:	add	x27, x27, #0x0
    1984:	mov	x25, #0x0                   	// #0
    1988:	bl	0 <fprintf>
    198c:	ldr	w2, [x28, x25, lsl #2]
    1990:	mov	x1, x27
    1994:	ldr	x0, [x23]
    1998:	add	x25, x25, #0x1
    199c:	bl	0 <fprintf>
    19a0:	cmp	w22, w25
    19a4:	b.gt	198c <BZ2_compressBlock+0x18cc>
    19a8:	ldr	x1, [x26]
    19ac:	mov	w0, #0xa                   	// #10
    19b0:	bl	0 <fputc>
    19b4:	ldr	x25, [sp, #128]
    19b8:	mov	w23, #0x0                   	// #0
    19bc:	ldr	w2, [sp, #144]
    19c0:	mov	x0, x25
    19c4:	ldr	x1, [sp, #168]
    19c8:	mov	w3, #0x11                  	// #17
    19cc:	add	x25, x25, #0x102
    19d0:	bl	0 <BZ2_hbMakeCodeLengths>
    19d4:	ldr	x0, [sp, #168]
    19d8:	mov	w1, w23
    19dc:	add	w23, w23, #0x1
    19e0:	add	x0, x0, #0x408
    19e4:	str	x0, [sp, #168]
    19e8:	ldr	w0, [sp, #148]
    19ec:	cmp	w0, w1
    19f0:	b.ne	19bc <BZ2_compressBlock+0x18fc>  // b.any
    19f4:	ldr	w0, [sp, #160]
    19f8:	cmp	w0, #0x4
    19fc:	b.ne	584 <BZ2_compressBlock+0x4c4>  // b.any
    1a00:	add	x23, sp, #0x350
    1a04:	mov	x0, #0x0                   	// #0
    1a08:	strb	w0, [x0, x23]
    1a0c:	add	x0, x0, #0x1
    1a10:	cmp	w22, w0
    1a14:	b.gt	1a08 <BZ2_compressBlock+0x1948>
    1a18:	ldrb	w2, [sp, #848]
    1a1c:	mov	x5, #0x4cfa                	// #19706
    1a20:	add	x4, x19, #0x6a8
    1a24:	add	x5, x19, x5
    1a28:	mov	x0, #0x0                   	// #0
    1a2c:	ldr	w1, [sp, #176]
    1a30:	cmp	w1, w0
    1a34:	b.gt	1a58 <BZ2_compressBlock+0x1998>
    1a38:	ldr	x27, [sp, #128]
    1a3c:	mov	x3, #0x9958                	// #39256
    1a40:	add	x25, x19, x3
    1a44:	mov	w26, #0x0                   	// #0
    1a48:	mov	w24, #0x0                   	// #0
    1a4c:	mov	x0, #0x0                   	// #0
    1a50:	mov	w28, #0x20                  	// #32
    1a54:	b	1aa8 <BZ2_compressBlock+0x19e8>
    1a58:	ldrb	w6, [x4, x0]
    1a5c:	mov	x1, x23
    1a60:	mov	w3, #0x0                   	// #0
    1a64:	add	x1, x1, #0x1
    1a68:	cmp	w6, w2
    1a6c:	b.ne	1a7c <BZ2_compressBlock+0x19bc>  // b.any
    1a70:	strb	w3, [x5, x0]
    1a74:	add	x0, x0, #0x1
    1a78:	b	1a2c <BZ2_compressBlock+0x196c>
    1a7c:	ldrb	w7, [x1]
    1a80:	add	w3, w3, #0x1
    1a84:	strb	w2, [x1]
    1a88:	mov	w2, w7
    1a8c:	b	1a64 <BZ2_compressBlock+0x19a4>
    1a90:	ldrb	w1, [x27, x0]
    1a94:	add	x0, x0, #0x1
    1a98:	cmp	w24, w1
    1a9c:	csel	w24, w24, w1, ge  // ge = tcont
    1aa0:	cmp	w28, w1
    1aa4:	csel	w28, w28, w1, le
    1aa8:	ldr	w1, [sp, #144]
    1aac:	cmp	w1, w0
    1ab0:	b.gt	1a90 <BZ2_compressBlock+0x19d0>
    1ab4:	cmp	w24, #0x11
    1ab8:	b.le	1ac4 <BZ2_compressBlock+0x1a04>
    1abc:	mov	w0, #0xbbc                 	// #3004
    1ac0:	bl	0 <BZ2_bz__AssertH__fail>
    1ac4:	cbnz	w28, 1ad0 <BZ2_compressBlock+0x1a10>
    1ac8:	mov	w0, #0xbbd                 	// #3005
    1acc:	bl	0 <BZ2_bz__AssertH__fail>
    1ad0:	ldr	w4, [sp, #144]
    1ad4:	mov	x1, x27
    1ad8:	mov	x0, x25
    1adc:	mov	w3, w24
    1ae0:	mov	w2, w28
    1ae4:	add	x25, x25, #0x408
    1ae8:	add	x27, x27, #0x102
    1aec:	bl	0 <BZ2_hbAssignCodes>
    1af0:	ldr	w1, [sp, #148]
    1af4:	add	w0, w26, #0x1
    1af8:	cmp	w1, w26
    1afc:	b.eq	1b08 <BZ2_compressBlock+0x1a48>  // b.none
    1b00:	mov	w26, w0
    1b04:	b	1a48 <BZ2_compressBlock+0x1988>
    1b08:	mov	x1, x23
    1b0c:	add	x3, x19, #0x80
    1b10:	mov	x0, #0x0                   	// #0
    1b14:	mov	w4, #0x1                   	// #1
    1b18:	add	x5, x3, x0
    1b1c:	mov	x2, #0x0                   	// #0
    1b20:	strb	wzr, [x1]
    1b24:	ldrb	w6, [x5, x2]
    1b28:	cbz	w6, 1b30 <BZ2_compressBlock+0x1a70>
    1b2c:	strb	w4, [x1]
    1b30:	add	x2, x2, #0x1
    1b34:	cmp	x2, #0x10
    1b38:	b.ne	1b24 <BZ2_compressBlock+0x1a64>  // b.any
    1b3c:	add	x0, x0, #0x10
    1b40:	add	x1, x1, #0x1
    1b44:	cmp	x0, #0x100
    1b48:	b.ne	1b18 <BZ2_compressBlock+0x1a58>  // b.any
    1b4c:	ldr	w8, [x19, #116]
    1b50:	mov	x6, #0x0                   	// #0
    1b54:	ldrb	w0, [x23, x6]
    1b58:	cbz	w0, 2050 <BZ2_compressBlock+0x1f90>
    1b5c:	mov	w2, #0x1                   	// #1
    1b60:	mov	x0, x19
    1b64:	mov	w1, #0x1                   	// #1
    1b68:	bl	0 <bsW>
    1b6c:	add	x6, x6, #0x1
    1b70:	cmp	x6, #0x10
    1b74:	b.ne	1b54 <BZ2_compressBlock+0x1a94>  // b.any
    1b78:	mov	x6, #0x0                   	// #0
    1b7c:	ldrb	w0, [x23, x6]
    1b80:	cbnz	w0, 2058 <BZ2_compressBlock+0x1f98>
    1b84:	ldr	x0, [sp, #152]
    1b88:	add	x6, x6, #0x1
    1b8c:	cmp	x6, #0x10
    1b90:	add	x0, x0, #0x10
    1b94:	str	x0, [sp, #152]
    1b98:	b.ne	1b7c <BZ2_compressBlock+0x1abc>  // b.any
    1b9c:	ldr	w0, [x19, #656]
    1ba0:	cmp	w0, #0x2
    1ba4:	b.le	1bc4 <BZ2_compressBlock+0x1b04>
    1ba8:	adrp	x0, 0 <stderr>
    1bac:	ldr	w2, [x19, #116]
    1bb0:	adrp	x1, 0 <bsW>
    1bb4:	add	x1, x1, #0x0
    1bb8:	ldr	x0, [x0]
    1bbc:	sub	w2, w2, w8
    1bc0:	bl	0 <fprintf>
    1bc4:	ldr	w8, [x19, #116]
    1bc8:	mov	w2, w22
    1bcc:	mov	x0, x19
    1bd0:	mov	w1, #0x3                   	// #3
    1bd4:	bl	0 <bsW>
    1bd8:	ldr	w2, [sp, #136]
    1bdc:	mov	w1, #0xf                   	// #15
    1be0:	bl	0 <bsW>
    1be4:	mov	x2, #0x4cfa                	// #19706
    1be8:	add	x9, x19, x2
    1bec:	mov	x6, #0x0                   	// #0
    1bf0:	ldr	w0, [sp, #176]
    1bf4:	cmp	w0, w6
    1bf8:	b.gt	20c8 <BZ2_compressBlock+0x2008>
    1bfc:	ldr	w0, [x19, #656]
    1c00:	cmp	w0, #0x2
    1c04:	b.le	1c24 <BZ2_compressBlock+0x1b64>
    1c08:	adrp	x0, 0 <stderr>
    1c0c:	ldr	w2, [x19, #116]
    1c10:	adrp	x1, 0 <bsW>
    1c14:	add	x1, x1, #0x0
    1c18:	ldr	x0, [x0]
    1c1c:	sub	w2, w2, w8
    1c20:	bl	0 <fprintf>
    1c24:	ldr	w10, [x19, #116]
    1c28:	mov	w8, #0x0                   	// #0
    1c2c:	ldr	x0, [sp, #128]
    1c30:	mov	w1, #0x5                   	// #5
    1c34:	ldrb	w6, [x0]
    1c38:	mov	x0, x19
    1c3c:	mov	w2, w6
    1c40:	bl	0 <bsW>
    1c44:	ldr	x7, [sp, #128]
    1c48:	mov	w9, #0x0                   	// #0
    1c4c:	ldr	w0, [sp, #144]
    1c50:	cmp	w0, w9
    1c54:	b.gt	20ec <BZ2_compressBlock+0x202c>
    1c58:	ldr	x1, [sp, #128]
    1c5c:	add	w0, w8, #0x1
    1c60:	add	x1, x1, #0x102
    1c64:	str	x1, [sp, #128]
    1c68:	ldr	w1, [sp, #148]
    1c6c:	cmp	w1, w8
    1c70:	b.ne	20d0 <BZ2_compressBlock+0x2010>  // b.any
    1c74:	ldr	w0, [x19, #656]
    1c78:	cmp	w0, #0x2
    1c7c:	b.le	1c9c <BZ2_compressBlock+0x1bdc>
    1c80:	adrp	x0, 0 <stderr>
    1c84:	ldr	w2, [x19, #116]
    1c88:	adrp	x1, 0 <bsW>
    1c8c:	add	x1, x1, #0x0
    1c90:	ldr	x0, [x0]
    1c94:	sub	w2, w2, w10
    1c98:	bl	0 <fprintf>
    1c9c:	ldr	w24, [x19, #116]
    1ca0:	mov	x26, x19
    1ca4:	mov	x23, #0x102                 	// #258
    1ca8:	mov	x25, #0x2654                	// #9812
    1cac:	ldr	w0, [x19, #668]
    1cb0:	sub	w1, w26, w19
    1cb4:	cmp	w0, w21
    1cb8:	b.le	217c <BZ2_compressBlock+0x20bc>
    1cbc:	add	w27, w21, #0x31
    1cc0:	cmp	w0, w27
    1cc4:	b.gt	1ccc <BZ2_compressBlock+0x1c0c>
    1cc8:	sub	w27, w0, #0x1
    1ccc:	ldrb	w0, [x26, #1704]
    1cd0:	cmp	w22, w0
    1cd4:	b.gt	1ce0 <BZ2_compressBlock+0x1c20>
    1cd8:	mov	w0, #0xbbe                 	// #3006
    1cdc:	bl	0 <BZ2_bz__AssertH__fail>
    1ce0:	cmp	w22, #0x6
    1ce4:	sxtw	x6, w21
    1ce8:	b.ne	2170 <BZ2_compressBlock+0x20b0>  // b.any
    1cec:	sub	w21, w27, w21
    1cf0:	cmp	w21, #0x31
    1cf4:	b.ne	2170 <BZ2_compressBlock+0x20b0>  // b.any
    1cf8:	ldrb	w7, [x26, #1704]
    1cfc:	mov	x0, #0x934c                	// #37708
    1d00:	mov	x1, #0x9958                	// #39256
    1d04:	lsl	x9, x6, #1
    1d08:	madd	x8, x7, x23, x19
    1d0c:	add	x8, x8, x0
    1d10:	mov	x0, #0x408                 	// #1032
    1d14:	madd	x7, x7, x0, x19
    1d18:	mov	x0, x19
    1d1c:	add	x7, x7, x1
    1d20:	ldrh	w1, [x20, x6, lsl #1]
    1d24:	ldr	w2, [x7, x1, lsl #2]
    1d28:	ldrb	w1, [x8, x1]
    1d2c:	bl	0 <bsW>
    1d30:	add	x9, x20, x9
    1d34:	ldrh	w1, [x9, #2]
    1d38:	ldr	w2, [x7, x1, lsl #2]
    1d3c:	ldrb	w1, [x8, x1]
    1d40:	bl	0 <bsW>
    1d44:	ldrh	w1, [x9, #4]
    1d48:	ldr	w2, [x7, x1, lsl #2]
    1d4c:	ldrb	w1, [x8, x1]
    1d50:	bl	0 <bsW>
    1d54:	ldrh	w1, [x9, #6]
    1d58:	ldr	w2, [x7, x1, lsl #2]
    1d5c:	ldrb	w1, [x8, x1]
    1d60:	bl	0 <bsW>
    1d64:	ldrh	w1, [x9, #8]
    1d68:	ldr	w2, [x7, x1, lsl #2]
    1d6c:	ldrb	w1, [x8, x1]
    1d70:	bl	0 <bsW>
    1d74:	ldrh	w1, [x9, #10]
    1d78:	ldr	w2, [x7, x1, lsl #2]
    1d7c:	ldrb	w1, [x8, x1]
    1d80:	bl	0 <bsW>
    1d84:	ldrh	w1, [x9, #12]
    1d88:	ldr	w2, [x7, x1, lsl #2]
    1d8c:	ldrb	w1, [x8, x1]
    1d90:	bl	0 <bsW>
    1d94:	ldrh	w1, [x9, #14]
    1d98:	ldr	w2, [x7, x1, lsl #2]
    1d9c:	ldrb	w1, [x8, x1]
    1da0:	bl	0 <bsW>
    1da4:	ldrh	w1, [x9, #16]
    1da8:	ldr	w2, [x7, x1, lsl #2]
    1dac:	ldrb	w1, [x8, x1]
    1db0:	bl	0 <bsW>
    1db4:	ldrh	w1, [x9, #18]
    1db8:	ldr	w2, [x7, x1, lsl #2]
    1dbc:	ldrb	w1, [x8, x1]
    1dc0:	bl	0 <bsW>
    1dc4:	ldrh	w1, [x9, #20]
    1dc8:	ldr	w2, [x7, x1, lsl #2]
    1dcc:	ldrb	w1, [x8, x1]
    1dd0:	bl	0 <bsW>
    1dd4:	ldrh	w1, [x9, #22]
    1dd8:	ldr	w2, [x7, x1, lsl #2]
    1ddc:	ldrb	w1, [x8, x1]
    1de0:	bl	0 <bsW>
    1de4:	ldrh	w1, [x9, #24]
    1de8:	ldr	w2, [x7, x1, lsl #2]
    1dec:	ldrb	w1, [x8, x1]
    1df0:	bl	0 <bsW>
    1df4:	ldrh	w1, [x9, #26]
    1df8:	ldr	w2, [x7, x1, lsl #2]
    1dfc:	ldrb	w1, [x8, x1]
    1e00:	bl	0 <bsW>
    1e04:	ldrh	w1, [x9, #28]
    1e08:	ldr	w2, [x7, x1, lsl #2]
    1e0c:	ldrb	w1, [x8, x1]
    1e10:	bl	0 <bsW>
    1e14:	ldrh	w1, [x9, #30]
    1e18:	ldr	w2, [x7, x1, lsl #2]
    1e1c:	ldrb	w1, [x8, x1]
    1e20:	bl	0 <bsW>
    1e24:	ldrh	w1, [x9, #32]
    1e28:	ldr	w2, [x7, x1, lsl #2]
    1e2c:	ldrb	w1, [x8, x1]
    1e30:	bl	0 <bsW>
    1e34:	ldrh	w1, [x9, #34]
    1e38:	ldr	w2, [x7, x1, lsl #2]
    1e3c:	ldrb	w1, [x8, x1]
    1e40:	bl	0 <bsW>
    1e44:	ldrh	w1, [x9, #36]
    1e48:	ldr	w2, [x7, x1, lsl #2]
    1e4c:	ldrb	w1, [x8, x1]
    1e50:	bl	0 <bsW>
    1e54:	ldrh	w1, [x9, #38]
    1e58:	ldr	w2, [x7, x1, lsl #2]
    1e5c:	ldrb	w1, [x8, x1]
    1e60:	bl	0 <bsW>
    1e64:	ldrh	w1, [x9, #40]
    1e68:	ldr	w2, [x7, x1, lsl #2]
    1e6c:	ldrb	w1, [x8, x1]
    1e70:	bl	0 <bsW>
    1e74:	ldrh	w1, [x9, #42]
    1e78:	ldr	w2, [x7, x1, lsl #2]
    1e7c:	ldrb	w1, [x8, x1]
    1e80:	bl	0 <bsW>
    1e84:	ldrh	w1, [x9, #44]
    1e88:	ldr	w2, [x7, x1, lsl #2]
    1e8c:	ldrb	w1, [x8, x1]
    1e90:	bl	0 <bsW>
    1e94:	ldrh	w1, [x9, #46]
    1e98:	ldr	w2, [x7, x1, lsl #2]
    1e9c:	ldrb	w1, [x8, x1]
    1ea0:	bl	0 <bsW>
    1ea4:	ldrh	w1, [x9, #48]
    1ea8:	ldr	w2, [x7, x1, lsl #2]
    1eac:	ldrb	w1, [x8, x1]
    1eb0:	bl	0 <bsW>
    1eb4:	ldrh	w1, [x9, #50]
    1eb8:	ldr	w2, [x7, x1, lsl #2]
    1ebc:	ldrb	w1, [x8, x1]
    1ec0:	bl	0 <bsW>
    1ec4:	ldrh	w1, [x9, #52]
    1ec8:	ldr	w2, [x7, x1, lsl #2]
    1ecc:	ldrb	w1, [x8, x1]
    1ed0:	bl	0 <bsW>
    1ed4:	ldrh	w1, [x9, #54]
    1ed8:	ldr	w2, [x7, x1, lsl #2]
    1edc:	ldrb	w1, [x8, x1]
    1ee0:	bl	0 <bsW>
    1ee4:	ldrh	w1, [x9, #56]
    1ee8:	ldr	w2, [x7, x1, lsl #2]
    1eec:	ldrb	w1, [x8, x1]
    1ef0:	bl	0 <bsW>
    1ef4:	ldrh	w1, [x9, #58]
    1ef8:	ldr	w2, [x7, x1, lsl #2]
    1efc:	ldrb	w1, [x8, x1]
    1f00:	bl	0 <bsW>
    1f04:	ldrh	w1, [x9, #60]
    1f08:	ldr	w2, [x7, x1, lsl #2]
    1f0c:	ldrb	w1, [x8, x1]
    1f10:	bl	0 <bsW>
    1f14:	ldrh	w1, [x9, #62]
    1f18:	ldr	w2, [x7, x1, lsl #2]
    1f1c:	ldrb	w1, [x8, x1]
    1f20:	bl	0 <bsW>
    1f24:	ldrh	w1, [x9, #64]
    1f28:	ldr	w2, [x7, x1, lsl #2]
    1f2c:	ldrb	w1, [x8, x1]
    1f30:	bl	0 <bsW>
    1f34:	ldrh	w1, [x9, #66]
    1f38:	ldr	w2, [x7, x1, lsl #2]
    1f3c:	ldrb	w1, [x8, x1]
    1f40:	bl	0 <bsW>
    1f44:	ldrh	w1, [x9, #68]
    1f48:	ldr	w2, [x7, x1, lsl #2]
    1f4c:	ldrb	w1, [x8, x1]
    1f50:	bl	0 <bsW>
    1f54:	ldrh	w1, [x9, #70]
    1f58:	ldr	w2, [x7, x1, lsl #2]
    1f5c:	ldrb	w1, [x8, x1]
    1f60:	bl	0 <bsW>
    1f64:	ldrh	w1, [x9, #72]
    1f68:	ldr	w2, [x7, x1, lsl #2]
    1f6c:	ldrb	w1, [x8, x1]
    1f70:	bl	0 <bsW>
    1f74:	ldrh	w1, [x9, #74]
    1f78:	ldr	w2, [x7, x1, lsl #2]
    1f7c:	ldrb	w1, [x8, x1]
    1f80:	bl	0 <bsW>
    1f84:	ldrh	w1, [x9, #76]
    1f88:	ldr	w2, [x7, x1, lsl #2]
    1f8c:	ldrb	w1, [x8, x1]
    1f90:	bl	0 <bsW>
    1f94:	ldrh	w1, [x9, #78]
    1f98:	ldr	w2, [x7, x1, lsl #2]
    1f9c:	ldrb	w1, [x8, x1]
    1fa0:	bl	0 <bsW>
    1fa4:	ldrh	w1, [x9, #80]
    1fa8:	ldr	w2, [x7, x1, lsl #2]
    1fac:	ldrb	w1, [x8, x1]
    1fb0:	bl	0 <bsW>
    1fb4:	ldrh	w1, [x9, #82]
    1fb8:	ldr	w2, [x7, x1, lsl #2]
    1fbc:	ldrb	w1, [x8, x1]
    1fc0:	bl	0 <bsW>
    1fc4:	ldrh	w1, [x9, #84]
    1fc8:	ldr	w2, [x7, x1, lsl #2]
    1fcc:	ldrb	w1, [x8, x1]
    1fd0:	bl	0 <bsW>
    1fd4:	ldrh	w1, [x9, #86]
    1fd8:	ldr	w2, [x7, x1, lsl #2]
    1fdc:	ldrb	w1, [x8, x1]
    1fe0:	bl	0 <bsW>
    1fe4:	ldrh	w1, [x9, #88]
    1fe8:	ldr	w2, [x7, x1, lsl #2]
    1fec:	ldrb	w1, [x8, x1]
    1ff0:	bl	0 <bsW>
    1ff4:	ldrh	w1, [x9, #90]
    1ff8:	ldr	w2, [x7, x1, lsl #2]
    1ffc:	ldrb	w1, [x8, x1]
    2000:	bl	0 <bsW>
    2004:	ldrh	w1, [x9, #92]
    2008:	ldr	w2, [x7, x1, lsl #2]
    200c:	ldrb	w1, [x8, x1]
    2010:	bl	0 <bsW>
    2014:	ldrh	w1, [x9, #94]
    2018:	ldr	w2, [x7, x1, lsl #2]
    201c:	ldrb	w1, [x8, x1]
    2020:	bl	0 <bsW>
    2024:	ldrh	w1, [x9, #96]
    2028:	ldr	w2, [x7, x1, lsl #2]
    202c:	ldrb	w1, [x8, x1]
    2030:	bl	0 <bsW>
    2034:	ldrh	w1, [x9, #98]
    2038:	ldr	w2, [x7, x1, lsl #2]
    203c:	ldrb	w1, [x8, x1]
    2040:	bl	0 <bsW>
    2044:	add	w21, w27, #0x1
    2048:	add	x26, x26, #0x1
    204c:	b	1cac <BZ2_compressBlock+0x1bec>
    2050:	mov	w2, #0x0                   	// #0
    2054:	b	1b60 <BZ2_compressBlock+0x1aa0>
    2058:	mov	x7, #0x0                   	// #0
    205c:	ldr	x0, [sp, #152]
    2060:	ldrb	w0, [x0, x7]
    2064:	cbz	w0, 2088 <BZ2_compressBlock+0x1fc8>
    2068:	mov	w2, #0x1                   	// #1
    206c:	mov	x0, x19
    2070:	mov	w1, #0x1                   	// #1
    2074:	bl	0 <bsW>
    2078:	add	x7, x7, #0x1
    207c:	cmp	x7, #0x10
    2080:	b.ne	205c <BZ2_compressBlock+0x1f9c>  // b.any
    2084:	b	1b84 <BZ2_compressBlock+0x1ac4>
    2088:	mov	w2, #0x0                   	// #0
    208c:	b	206c <BZ2_compressBlock+0x1fac>
    2090:	mov	w2, #0x1                   	// #1
    2094:	mov	x0, x19
    2098:	mov	w1, w2
    209c:	bl	0 <bsW>
    20a0:	add	w7, w7, #0x1
    20a4:	ldrb	w0, [x9, x6]
    20a8:	cmp	w7, w0
    20ac:	b.lt	2090 <BZ2_compressBlock+0x1fd0>  // b.tstop
    20b0:	mov	x0, x19
    20b4:	mov	w2, #0x0                   	// #0
    20b8:	mov	w1, #0x1                   	// #1
    20bc:	bl	0 <bsW>
    20c0:	add	x6, x6, #0x1
    20c4:	b	1bf0 <BZ2_compressBlock+0x1b30>
    20c8:	mov	w7, #0x0                   	// #0
    20cc:	b	20a4 <BZ2_compressBlock+0x1fe4>
    20d0:	mov	w8, w0
    20d4:	b	1c2c <BZ2_compressBlock+0x1b6c>
    20d8:	mov	w2, #0x2                   	// #2
    20dc:	mov	x0, x19
    20e0:	mov	w1, w2
    20e4:	bl	0 <bsW>
    20e8:	add	w6, w6, #0x1
    20ec:	ldrb	w0, [x7]
    20f0:	cmp	w6, w0
    20f4:	b.lt	20d8 <BZ2_compressBlock+0x2018>  // b.tstop
    20f8:	ldrb	w0, [x7]
    20fc:	cmp	w6, w0
    2100:	b.gt	2120 <BZ2_compressBlock+0x2060>
    2104:	mov	x0, x19
    2108:	mov	w2, #0x0                   	// #0
    210c:	mov	w1, #0x1                   	// #1
    2110:	bl	0 <bsW>
    2114:	add	w9, w9, #0x1
    2118:	add	x7, x7, #0x1
    211c:	b	1c4c <BZ2_compressBlock+0x1b8c>
    2120:	mov	x0, x19
    2124:	mov	w2, #0x3                   	// #3
    2128:	mov	w1, #0x2                   	// #2
    212c:	bl	0 <bsW>
    2130:	sub	w6, w6, #0x1
    2134:	b	20f8 <BZ2_compressBlock+0x2038>
    2138:	ldrb	w0, [x26, #1704]
    213c:	ldrh	w2, [x20, x6, lsl #1]
    2140:	mul	x0, x0, x23
    2144:	add	x1, x0, x2
    2148:	add	x0, x19, x0
    214c:	add	x1, x1, x25
    2150:	add	x0, x0, x2
    2154:	add	x0, x0, #0x9, lsl #12
    2158:	add	x1, x19, x1, lsl #2
    215c:	ldr	w2, [x1, #8]
    2160:	ldrb	w1, [x0, #844]
    2164:	mov	x0, x19
    2168:	bl	0 <bsW>
    216c:	add	x6, x6, #0x1
    2170:	cmp	w27, w6
    2174:	b.ge	2138 <BZ2_compressBlock+0x2078>  // b.tcont
    2178:	b	2044 <BZ2_compressBlock+0x1f84>
    217c:	ldr	w0, [sp, #136]
    2180:	cmp	w1, w0
    2184:	b.eq	2190 <BZ2_compressBlock+0x20d0>  // b.none
    2188:	mov	w0, #0xbbf                 	// #3007
    218c:	bl	0 <BZ2_bz__AssertH__fail>
    2190:	ldr	w0, [x19, #656]
    2194:	cmp	w0, #0x2
    2198:	b.le	21b8 <BZ2_compressBlock+0x20f8>
    219c:	adrp	x0, 0 <stderr>
    21a0:	ldr	w2, [x19, #116]
    21a4:	adrp	x1, 0 <bsW>
    21a8:	add	x1, x1, #0x0
    21ac:	ldr	x0, [x0]
    21b0:	sub	w2, w2, w24
    21b4:	bl	0 <fprintf>
    21b8:	ldr	w0, [sp, #820]
    21bc:	cbz	w0, 222c <BZ2_compressBlock+0x216c>
    21c0:	mov	x0, x19
    21c4:	mov	w1, #0x17                  	// #23
    21c8:	bl	ac <bsPutUChar>
    21cc:	mov	w1, #0x72                  	// #114
    21d0:	bl	ac <bsPutUChar>
    21d4:	mov	w1, #0x45                  	// #69
    21d8:	bl	ac <bsPutUChar>
    21dc:	mov	w1, #0x38                  	// #56
    21e0:	bl	ac <bsPutUChar>
    21e4:	mov	w1, #0x50                  	// #80
    21e8:	bl	ac <bsPutUChar>
    21ec:	mov	w1, #0xffffff90            	// #-112
    21f0:	bl	ac <bsPutUChar>
    21f4:	ldr	w1, [x19, #652]
    21f8:	bl	6c <bsPutUInt32>
    21fc:	ldr	w0, [x19, #656]
    2200:	cmp	w0, #0x1
    2204:	b.le	2220 <BZ2_compressBlock+0x2160>
    2208:	adrp	x0, 0 <stderr>
    220c:	ldr	w2, [x19, #652]
    2210:	adrp	x1, 0 <bsW>
    2214:	add	x1, x1, #0x0
    2218:	ldr	x0, [x0]
    221c:	bl	0 <fprintf>
    2220:	ldr	w0, [x19, #644]
    2224:	cmp	w0, #0x0
    2228:	b.gt	2250 <BZ2_compressBlock+0x2190>
    222c:	ldp	x29, x30, [sp]
    2230:	ldp	x19, x20, [sp, #16]
    2234:	ldp	x21, x22, [sp, #32]
    2238:	ldp	x23, x24, [sp, #48]
    223c:	ldp	x25, x26, [sp, #64]
    2240:	ldp	x27, x28, [sp, #80]
    2244:	ldr	d8, [sp, #96]
    2248:	add	sp, sp, #0x460
    224c:	ret
    2250:	ldrsw	x0, [x19, #116]
    2254:	ldr	x1, [x19, #80]
    2258:	ldrb	w2, [x19, #643]
    225c:	strb	w2, [x1, x0]
    2260:	ldr	w0, [x19, #116]
    2264:	add	w0, w0, #0x1
    2268:	str	w0, [x19, #116]
    226c:	ldr	w0, [x19, #640]
    2270:	lsl	w0, w0, #8
    2274:	str	w0, [x19, #640]
    2278:	ldr	w0, [x19, #644]
    227c:	sub	w0, w0, #0x8
    2280:	str	w0, [x19, #644]
    2284:	b	2220 <BZ2_compressBlock+0x2160>

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_decompress>:
       0:	stp	x29, x30, [sp, #-208]!
       4:	add	x1, x0, #0x8, lsl #12
       8:	mov	x29, sp
       c:	ldr	w2, [x0, #8]
      10:	stp	x19, x20, [sp, #16]
      14:	cmp	w2, #0xa
      18:	stp	x21, x22, [sp, #32]
      1c:	stp	x23, x24, [sp, #48]
      20:	stp	x25, x26, [sp, #64]
      24:	stp	x27, x28, [sp, #80]
      28:	mov	x27, x0
      2c:	ldr	x3, [x0]
      30:	add	x0, x0, #0xc, lsl #12
      34:	b.ne	70 <BZ2_decompress+0x70>  // b.any
      38:	str	wzr, [x0, #14884]
      3c:	str	xzr, [x1, #31272]
      40:	str	xzr, [x1, #31280]
      44:	str	xzr, [x1, #31288]
      48:	str	xzr, [x1, #31296]
      4c:	str	xzr, [x1, #31304]
      50:	str	xzr, [x1, #31312]
      54:	str	xzr, [x1, #31320]
      58:	str	xzr, [x1, #31328]
      5c:	str	xzr, [x1, #31336]
      60:	str	xzr, [x1, #31344]
      64:	str	xzr, [x1, #31352]
      68:	str	xzr, [x1, #31360]
      6c:	str	xzr, [x1, #31368]
      70:	ldr	w5, [x0, #14892]
      74:	str	w5, [sp, #104]
      78:	ldr	w5, [x0, #14896]
      7c:	str	w5, [sp, #152]
      80:	ldr	w5, [x0, #14900]
      84:	str	w5, [sp, #100]
      88:	ldr	w5, [x0, #14908]
      8c:	str	w5, [sp, #160]
      90:	ldr	w5, [x0, #14920]
      94:	str	w5, [sp, #96]
      98:	ldr	w5, [x0, #14924]
      9c:	str	w5, [sp, #144]
      a0:	ldr	w5, [x0, #14936]
      a4:	str	w5, [sp, #112]
      a8:	ldr	w5, [x0, #14940]
      ac:	str	w5, [sp, #116]
      b0:	ldr	w5, [x0, #14944]
      b4:	str	w5, [sp, #164]
      b8:	ldr	w5, [x0, #14956]
      bc:	str	w5, [sp, #136]
      c0:	ldr	w5, [x0, #14960]
      c4:	ldr	w4, [x0, #14884]
      c8:	ldr	w22, [x0, #14888]
      cc:	ldr	w19, [x0, #14904]
      d0:	ldr	w26, [x0, #14912]
      d4:	ldr	w25, [x0, #14916]
      d8:	ldr	w28, [x0, #14928]
      dc:	ldr	w20, [x0, #14932]
      e0:	ldr	w24, [x0, #14948]
      e4:	ldr	w23, [x0, #14952]
      e8:	ldr	w0, [x0, #14964]
      ec:	str	w5, [sp, #156]
      f0:	str	w0, [sp, #140]
      f4:	ldr	x0, [x1, #31360]
      f8:	str	x0, [sp, #120]
      fc:	ldr	x0, [x1, #31368]
     100:	str	x0, [sp, #128]
     104:	sub	w0, w2, #0xa
     108:	cmp	w0, #0x28
     10c:	ldr	x21, [x1, #31352]
     110:	b.hi	2348 <BZ2_decompress+0x2348>  // b.pmore
     114:	adrp	x1, 0 <BZ2_decompress>
     118:	add	x1, x1, #0x0
     11c:	ldrh	w0, [x1, w0, uxtw #1]
     120:	adr	x1, 12c <BZ2_decompress+0x12c>
     124:	add	x0, x1, w0, sxth #2
     128:	br	x0
     12c:	mov	w0, #0xa                   	// #10
     130:	str	w0, [x27, #8]
     134:	ldr	w0, [x27, #36]
     138:	cmp	w0, #0x7
     13c:	b.le	1fc <BZ2_decompress+0x1fc>
     140:	ldr	w1, [x27, #32]
     144:	sub	w0, w0, #0x8
     148:	str	w0, [x27, #36]
     14c:	lsr	w1, w1, w0
     150:	and	w0, w1, #0xff
     154:	cmp	w0, #0x42
     158:	b.ne	1f4 <BZ2_decompress+0x1f4>  // b.any
     15c:	mov	w0, #0xb                   	// #11
     160:	str	w0, [x27, #8]
     164:	ldr	w0, [x27, #36]
     168:	cmp	w0, #0x7
     16c:	b.le	244 <BZ2_decompress+0x244>
     170:	ldr	w1, [x27, #32]
     174:	sub	w0, w0, #0x8
     178:	str	w0, [x27, #36]
     17c:	lsr	w1, w1, w0
     180:	and	w0, w1, #0xff
     184:	cmp	w0, #0x5a
     188:	b.ne	1f4 <BZ2_decompress+0x1f4>  // b.any
     18c:	mov	w0, #0xc                   	// #12
     190:	str	w0, [x27, #8]
     194:	ldr	w0, [x27, #36]
     198:	cmp	w0, #0x7
     19c:	b.le	28c <BZ2_decompress+0x28c>
     1a0:	ldr	w1, [x27, #32]
     1a4:	sub	w0, w0, #0x8
     1a8:	str	w0, [x27, #36]
     1ac:	lsr	w1, w1, w0
     1b0:	and	w0, w1, #0xff
     1b4:	cmp	w0, #0x68
     1b8:	b.ne	1f4 <BZ2_decompress+0x1f4>  // b.any
     1bc:	mov	w0, #0xd                   	// #13
     1c0:	str	w0, [x27, #8]
     1c4:	ldr	w0, [x27, #36]
     1c8:	cmp	w0, #0x7
     1cc:	b.le	2d4 <BZ2_decompress+0x2d4>
     1d0:	ldr	w1, [x27, #32]
     1d4:	sub	w0, w0, #0x8
     1d8:	str	w0, [x27, #36]
     1dc:	lsr	w1, w1, w0
     1e0:	and	w1, w1, #0xff
     1e4:	sub	w0, w1, #0x31
     1e8:	cmp	w0, #0x8
     1ec:	b.ls	31c <BZ2_decompress+0x31c>  // b.plast
     1f0:	str	w1, [x27, #40]
     1f4:	mov	w0, #0xfffffffb            	// #-5
     1f8:	b	594 <BZ2_decompress+0x594>
     1fc:	ldr	w1, [x3, #8]
     200:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
     204:	ldr	x2, [x3]
     208:	add	w0, w0, #0x8
     20c:	ldr	w6, [x27, #32]
     210:	sub	w1, w1, #0x1
     214:	ldrb	w11, [x2], #1
     218:	orr	w6, w11, w6, lsl #8
     21c:	stp	w6, w0, [x27, #32]
     220:	ldr	w0, [x3, #12]
     224:	str	x2, [x3]
     228:	add	w0, w0, #0x1
     22c:	stp	w1, w0, [x3, #8]
     230:	cbnz	w0, 134 <BZ2_decompress+0x134>
     234:	ldr	w0, [x3, #16]
     238:	add	w0, w0, #0x1
     23c:	str	w0, [x3, #16]
     240:	b	134 <BZ2_decompress+0x134>
     244:	ldr	w1, [x3, #8]
     248:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
     24c:	ldr	x2, [x3]
     250:	add	w0, w0, #0x8
     254:	ldr	w6, [x27, #32]
     258:	sub	w1, w1, #0x1
     25c:	ldrb	w11, [x2], #1
     260:	orr	w6, w11, w6, lsl #8
     264:	stp	w6, w0, [x27, #32]
     268:	ldr	w0, [x3, #12]
     26c:	str	x2, [x3]
     270:	add	w0, w0, #0x1
     274:	stp	w1, w0, [x3, #8]
     278:	cbnz	w0, 164 <BZ2_decompress+0x164>
     27c:	ldr	w0, [x3, #16]
     280:	add	w0, w0, #0x1
     284:	str	w0, [x3, #16]
     288:	b	164 <BZ2_decompress+0x164>
     28c:	ldr	w1, [x3, #8]
     290:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
     294:	ldr	x2, [x3]
     298:	add	w0, w0, #0x8
     29c:	ldr	w6, [x27, #32]
     2a0:	sub	w1, w1, #0x1
     2a4:	ldrb	w11, [x2], #1
     2a8:	orr	w6, w11, w6, lsl #8
     2ac:	stp	w6, w0, [x27, #32]
     2b0:	ldr	w0, [x3, #12]
     2b4:	str	x2, [x3]
     2b8:	add	w0, w0, #0x1
     2bc:	stp	w1, w0, [x3, #8]
     2c0:	cbnz	w0, 194 <BZ2_decompress+0x194>
     2c4:	ldr	w0, [x3, #16]
     2c8:	add	w0, w0, #0x1
     2cc:	str	w0, [x3, #16]
     2d0:	b	194 <BZ2_decompress+0x194>
     2d4:	ldr	w1, [x3, #8]
     2d8:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
     2dc:	ldr	x2, [x3]
     2e0:	add	w0, w0, #0x8
     2e4:	ldr	w6, [x27, #32]
     2e8:	sub	w1, w1, #0x1
     2ec:	ldrb	w11, [x2], #1
     2f0:	orr	w6, w11, w6, lsl #8
     2f4:	stp	w6, w0, [x27, #32]
     2f8:	ldr	w0, [x3, #12]
     2fc:	str	x2, [x3]
     300:	add	w0, w0, #0x1
     304:	stp	w1, w0, [x3, #8]
     308:	cbnz	w0, 1c4 <BZ2_decompress+0x1c4>
     30c:	ldr	w0, [x3, #16]
     310:	add	w0, w0, #0x1
     314:	str	w0, [x3, #16]
     318:	b	1c4 <BZ2_decompress+0x1c4>
     31c:	ldrb	w2, [x27, #44]
     320:	sub	w1, w1, #0x30
     324:	mov	w11, #0x86a0                	// #34464
     328:	str	w4, [sp, #168]
     32c:	movk	w11, #0x1, lsl #16
     330:	str	x3, [sp, #176]
     334:	ldr	x6, [x3, #56]
     338:	ldr	x0, [x3, #72]
     33c:	str	w1, [x27, #40]
     340:	mul	w1, w1, w11
     344:	cbz	w2, 638 <BZ2_decompress+0x638>
     348:	lsl	w1, w1, #1
     34c:	mov	w2, #0x1                   	// #1
     350:	blr	x6
     354:	ldr	x3, [sp, #176]
     358:	mov	w11, #0x86a0                	// #34464
     35c:	ldr	w1, [x27, #40]
     360:	movk	w11, #0x1, lsl #16
     364:	mov	w2, #0x1                   	// #1
     368:	ldr	x6, [x3, #56]
     36c:	str	x0, [x27, #3160]
     370:	ldr	x0, [x3, #72]
     374:	mul	w1, w1, w11
     378:	asr	w1, w1, #1
     37c:	blr	x6
     380:	ldr	x1, [x27, #3160]
     384:	str	x0, [x27, #3168]
     388:	ldr	w4, [sp, #168]
     38c:	cbz	x1, 2360 <BZ2_decompress+0x2360>
     390:	cbz	x0, 2360 <BZ2_decompress+0x2360>
     394:	mov	w0, #0xe                   	// #14
     398:	str	w0, [x27, #8]
     39c:	ldr	w1, [x27, #36]
     3a0:	cmp	w1, #0x7
     3a4:	b.le	650 <BZ2_decompress+0x650>
     3a8:	ldr	w0, [x27, #32]
     3ac:	sub	w1, w1, #0x8
     3b0:	str	w1, [x27, #36]
     3b4:	lsr	w0, w0, w1
     3b8:	and	w0, w0, #0xff
     3bc:	cmp	w0, #0x17
     3c0:	b.ne	69c <BZ2_decompress+0x69c>  // b.any
     3c4:	mov	w0, #0x2a                  	// #42
     3c8:	str	w0, [x27, #8]
     3cc:	ldr	w1, [x27, #36]
     3d0:	cmp	w1, #0x7
     3d4:	b.le	209c <BZ2_decompress+0x209c>
     3d8:	ldr	w0, [x27, #32]
     3dc:	sub	w1, w1, #0x8
     3e0:	str	w1, [x27, #36]
     3e4:	lsr	w0, w0, w1
     3e8:	and	w0, w0, #0xff
     3ec:	cmp	w0, #0x72
     3f0:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     3f4:	mov	w0, #0x2b                  	// #43
     3f8:	str	w0, [x27, #8]
     3fc:	ldr	w1, [x27, #36]
     400:	cmp	w1, #0x7
     404:	b.le	20e8 <BZ2_decompress+0x20e8>
     408:	ldr	w0, [x27, #32]
     40c:	sub	w1, w1, #0x8
     410:	str	w1, [x27, #36]
     414:	lsr	w0, w0, w1
     418:	and	w0, w0, #0xff
     41c:	cmp	w0, #0x45
     420:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     424:	mov	w0, #0x2c                  	// #44
     428:	str	w0, [x27, #8]
     42c:	ldr	w1, [x27, #36]
     430:	cmp	w1, #0x7
     434:	b.le	2134 <BZ2_decompress+0x2134>
     438:	ldr	w0, [x27, #32]
     43c:	sub	w1, w1, #0x8
     440:	str	w1, [x27, #36]
     444:	lsr	w0, w0, w1
     448:	and	w0, w0, #0xff
     44c:	cmp	w0, #0x38
     450:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     454:	mov	w0, #0x2d                  	// #45
     458:	str	w0, [x27, #8]
     45c:	ldr	w1, [x27, #36]
     460:	cmp	w1, #0x7
     464:	b.le	2180 <BZ2_decompress+0x2180>
     468:	ldr	w0, [x27, #32]
     46c:	sub	w1, w1, #0x8
     470:	str	w1, [x27, #36]
     474:	lsr	w0, w0, w1
     478:	and	w0, w0, #0xff
     47c:	cmp	w0, #0x50
     480:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     484:	mov	w0, #0x2e                  	// #46
     488:	str	w0, [x27, #8]
     48c:	ldr	w1, [x27, #36]
     490:	cmp	w1, #0x7
     494:	b.le	21cc <BZ2_decompress+0x21cc>
     498:	ldr	w0, [x27, #32]
     49c:	sub	w1, w1, #0x8
     4a0:	str	w1, [x27, #36]
     4a4:	lsr	w0, w0, w1
     4a8:	and	w0, w0, #0xff
     4ac:	cmp	w0, #0x90
     4b0:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     4b4:	str	wzr, [x27, #3180]
     4b8:	mov	w0, #0x2f                  	// #47
     4bc:	str	w0, [x27, #8]
     4c0:	ldr	w1, [x27, #36]
     4c4:	cmp	w1, #0x7
     4c8:	b.le	2218 <BZ2_decompress+0x2218>
     4cc:	ldr	w0, [x27, #32]
     4d0:	sub	w1, w1, #0x8
     4d4:	str	w1, [x27, #36]
     4d8:	lsr	w0, w0, w1
     4dc:	ldr	w1, [x27, #3180]
     4e0:	and	w0, w0, #0xff
     4e4:	orr	w0, w0, w1, lsl #8
     4e8:	str	w0, [x27, #3180]
     4ec:	mov	w0, #0x30                  	// #48
     4f0:	str	w0, [x27, #8]
     4f4:	ldr	w1, [x27, #36]
     4f8:	cmp	w1, #0x7
     4fc:	b.le	2264 <BZ2_decompress+0x2264>
     500:	ldr	w0, [x27, #32]
     504:	sub	w1, w1, #0x8
     508:	str	w1, [x27, #36]
     50c:	lsr	w0, w0, w1
     510:	ldr	w1, [x27, #3180]
     514:	and	w0, w0, #0xff
     518:	orr	w0, w0, w1, lsl #8
     51c:	str	w0, [x27, #3180]
     520:	mov	w0, #0x31                  	// #49
     524:	str	w0, [x27, #8]
     528:	ldr	w1, [x27, #36]
     52c:	cmp	w1, #0x7
     530:	b.le	22b0 <BZ2_decompress+0x22b0>
     534:	ldr	w0, [x27, #32]
     538:	sub	w1, w1, #0x8
     53c:	str	w1, [x27, #36]
     540:	lsr	w0, w0, w1
     544:	ldr	w1, [x27, #3180]
     548:	and	w0, w0, #0xff
     54c:	orr	w0, w0, w1, lsl #8
     550:	str	w0, [x27, #3180]
     554:	mov	w0, #0x32                  	// #50
     558:	str	w0, [x27, #8]
     55c:	ldr	w1, [x27, #36]
     560:	cmp	w1, #0x7
     564:	b.le	22fc <BZ2_decompress+0x22fc>
     568:	ldr	w0, [x27, #32]
     56c:	sub	w1, w1, #0x8
     570:	str	w1, [x27, #36]
     574:	lsr	w0, w0, w1
     578:	ldr	w1, [x27, #3180]
     57c:	and	w0, w0, #0xff
     580:	orr	w0, w0, w1, lsl #8
     584:	str	w0, [x27, #3180]
     588:	mov	w0, #0x1                   	// #1
     58c:	str	w0, [x27, #8]
     590:	mov	w0, #0x4                   	// #4
     594:	add	x1, x27, #0xc, lsl #12
     598:	ldr	w2, [sp, #104]
     59c:	add	x7, x27, #0x8, lsl #12
     5a0:	str	w2, [x1, #14892]
     5a4:	ldr	w2, [sp, #152]
     5a8:	str	w2, [x1, #14896]
     5ac:	ldr	w2, [sp, #100]
     5b0:	str	w2, [x1, #14900]
     5b4:	ldr	w2, [sp, #160]
     5b8:	str	w2, [x1, #14908]
     5bc:	ldr	w2, [sp, #96]
     5c0:	str	w2, [x1, #14920]
     5c4:	ldr	w2, [sp, #144]
     5c8:	str	w2, [x1, #14924]
     5cc:	ldr	w2, [sp, #112]
     5d0:	str	w2, [x1, #14936]
     5d4:	ldr	w2, [sp, #116]
     5d8:	str	w2, [x1, #14940]
     5dc:	ldr	w2, [sp, #164]
     5e0:	str	w2, [x1, #14944]
     5e4:	ldr	w2, [sp, #136]
     5e8:	str	w2, [x1, #14956]
     5ec:	ldr	w2, [sp, #156]
     5f0:	str	w4, [x1, #14884]
     5f4:	str	w22, [x1, #14888]
     5f8:	str	w19, [x1, #14904]
     5fc:	str	w26, [x1, #14912]
     600:	str	w25, [x1, #14916]
     604:	str	w28, [x1, #14928]
     608:	str	w20, [x1, #14932]
     60c:	str	w24, [x1, #14948]
     610:	str	w23, [x1, #14952]
     614:	str	w2, [x1, #14960]
     618:	ldr	w2, [sp, #140]
     61c:	str	w2, [x1, #14964]
     620:	ldr	x1, [sp, #120]
     624:	str	x1, [x7, #31360]
     628:	ldr	x1, [sp, #128]
     62c:	str	x21, [x7, #31352]
     630:	str	x1, [x7, #31368]
     634:	b	1ea4 <BZ2_decompress+0x1ea4>
     638:	lsl	w1, w1, #2
     63c:	mov	w2, #0x1                   	// #1
     640:	blr	x6
     644:	str	x0, [x27, #3152]
     648:	ldr	w4, [sp, #168]
     64c:	b	390 <BZ2_decompress+0x390>
     650:	ldr	x0, [x27]
     654:	ldr	w2, [x0, #8]
     658:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     65c:	ldr	x3, [x0]
     660:	add	w1, w1, #0x8
     664:	ldr	w6, [x27, #32]
     668:	sub	w2, w2, #0x1
     66c:	ldrb	w11, [x3], #1
     670:	orr	w6, w11, w6, lsl #8
     674:	stp	w6, w1, [x27, #32]
     678:	ldr	w1, [x0, #12]
     67c:	str	x3, [x0]
     680:	add	w1, w1, #0x1
     684:	stp	w2, w1, [x0, #8]
     688:	cbnz	w1, 39c <BZ2_decompress+0x39c>
     68c:	ldr	w1, [x0, #16]
     690:	add	w1, w1, #0x1
     694:	str	w1, [x0, #16]
     698:	b	39c <BZ2_decompress+0x39c>
     69c:	cmp	w0, #0x31
     6a0:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     6a4:	mov	w0, #0xf                   	// #15
     6a8:	str	w0, [x27, #8]
     6ac:	ldr	w1, [x27, #36]
     6b0:	cmp	w1, #0x7
     6b4:	b.le	970 <BZ2_decompress+0x970>
     6b8:	ldr	w0, [x27, #32]
     6bc:	sub	w1, w1, #0x8
     6c0:	str	w1, [x27, #36]
     6c4:	lsr	w0, w0, w1
     6c8:	and	w0, w0, #0xff
     6cc:	cmp	w0, #0x41
     6d0:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     6d4:	mov	w0, #0x10                  	// #16
     6d8:	str	w0, [x27, #8]
     6dc:	ldr	w1, [x27, #36]
     6e0:	cmp	w1, #0x7
     6e4:	b.le	9bc <BZ2_decompress+0x9bc>
     6e8:	ldr	w0, [x27, #32]
     6ec:	sub	w1, w1, #0x8
     6f0:	str	w1, [x27, #36]
     6f4:	lsr	w0, w0, w1
     6f8:	and	w0, w0, #0xff
     6fc:	cmp	w0, #0x59
     700:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     704:	mov	w0, #0x11                  	// #17
     708:	str	w0, [x27, #8]
     70c:	ldr	w1, [x27, #36]
     710:	cmp	w1, #0x7
     714:	b.le	a08 <BZ2_decompress+0xa08>
     718:	ldr	w0, [x27, #32]
     71c:	sub	w1, w1, #0x8
     720:	str	w1, [x27, #36]
     724:	lsr	w0, w0, w1
     728:	and	w0, w0, #0xff
     72c:	cmp	w0, #0x26
     730:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     734:	mov	w0, #0x12                  	// #18
     738:	str	w0, [x27, #8]
     73c:	ldr	w1, [x27, #36]
     740:	cmp	w1, #0x7
     744:	b.le	a54 <BZ2_decompress+0xa54>
     748:	ldr	w0, [x27, #32]
     74c:	sub	w1, w1, #0x8
     750:	str	w1, [x27, #36]
     754:	lsr	w0, w0, w1
     758:	and	w0, w0, #0xff
     75c:	cmp	w0, #0x53
     760:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     764:	mov	w0, #0x13                  	// #19
     768:	str	w0, [x27, #8]
     76c:	ldr	w1, [x27, #36]
     770:	cmp	w1, #0x7
     774:	b.le	aa0 <BZ2_decompress+0xaa0>
     778:	ldr	w0, [x27, #32]
     77c:	sub	w1, w1, #0x8
     780:	str	w1, [x27, #36]
     784:	lsr	w0, w0, w1
     788:	and	w0, w0, #0xff
     78c:	cmp	w0, #0x59
     790:	b.ne	968 <BZ2_decompress+0x968>  // b.any
     794:	ldp	w2, w0, [x27, #48]
     798:	add	w2, w2, #0x1
     79c:	str	w2, [x27, #48]
     7a0:	cmp	w0, #0x1
     7a4:	b.le	7c4 <BZ2_decompress+0x7c4>
     7a8:	adrp	x0, 0 <stderr>
     7ac:	adrp	x1, 0 <BZ2_decompress>
     7b0:	add	x1, x1, #0x0
     7b4:	str	w4, [sp, #168]
     7b8:	ldr	x0, [x0]
     7bc:	bl	0 <fprintf>
     7c0:	ldr	w4, [sp, #168]
     7c4:	str	wzr, [x27, #3176]
     7c8:	mov	w0, #0x14                  	// #20
     7cc:	str	w0, [x27, #8]
     7d0:	ldr	w1, [x27, #36]
     7d4:	cmp	w1, #0x7
     7d8:	b.le	aec <BZ2_decompress+0xaec>
     7dc:	ldr	w0, [x27, #32]
     7e0:	sub	w1, w1, #0x8
     7e4:	str	w1, [x27, #36]
     7e8:	lsr	w0, w0, w1
     7ec:	ldr	w1, [x27, #3176]
     7f0:	and	w0, w0, #0xff
     7f4:	orr	w0, w0, w1, lsl #8
     7f8:	str	w0, [x27, #3176]
     7fc:	mov	w0, #0x15                  	// #21
     800:	str	w0, [x27, #8]
     804:	ldr	w1, [x27, #36]
     808:	cmp	w1, #0x7
     80c:	b.le	b38 <BZ2_decompress+0xb38>
     810:	ldr	w0, [x27, #32]
     814:	sub	w1, w1, #0x8
     818:	str	w1, [x27, #36]
     81c:	lsr	w0, w0, w1
     820:	ldr	w1, [x27, #3176]
     824:	and	w0, w0, #0xff
     828:	orr	w0, w0, w1, lsl #8
     82c:	str	w0, [x27, #3176]
     830:	mov	w0, #0x16                  	// #22
     834:	str	w0, [x27, #8]
     838:	ldr	w1, [x27, #36]
     83c:	cmp	w1, #0x7
     840:	b.le	b84 <BZ2_decompress+0xb84>
     844:	ldr	w0, [x27, #32]
     848:	sub	w1, w1, #0x8
     84c:	str	w1, [x27, #36]
     850:	lsr	w0, w0, w1
     854:	ldr	w1, [x27, #3176]
     858:	and	w0, w0, #0xff
     85c:	orr	w0, w0, w1, lsl #8
     860:	str	w0, [x27, #3176]
     864:	mov	w0, #0x17                  	// #23
     868:	str	w0, [x27, #8]
     86c:	ldr	w1, [x27, #36]
     870:	cmp	w1, #0x7
     874:	b.le	bd0 <BZ2_decompress+0xbd0>
     878:	ldr	w0, [x27, #32]
     87c:	sub	w1, w1, #0x8
     880:	str	w1, [x27, #36]
     884:	lsr	w0, w0, w1
     888:	ldr	w1, [x27, #3176]
     88c:	and	w0, w0, #0xff
     890:	orr	w0, w0, w1, lsl #8
     894:	str	w0, [x27, #3176]
     898:	mov	w0, #0x18                  	// #24
     89c:	str	w0, [x27, #8]
     8a0:	ldr	w1, [x27, #36]
     8a4:	cmp	w1, #0x0
     8a8:	b.le	c1c <BZ2_decompress+0xc1c>
     8ac:	ldr	w0, [x27, #32]
     8b0:	sub	w1, w1, #0x1
     8b4:	str	w1, [x27, #36]
     8b8:	str	wzr, [x27, #56]
     8bc:	lsr	w0, w0, w1
     8c0:	and	w0, w0, #0x1
     8c4:	strb	w0, [x27, #20]
     8c8:	mov	w0, #0x19                  	// #25
     8cc:	str	w0, [x27, #8]
     8d0:	ldr	w1, [x27, #36]
     8d4:	cmp	w1, #0x7
     8d8:	b.le	c68 <BZ2_decompress+0xc68>
     8dc:	ldr	w0, [x27, #32]
     8e0:	sub	w1, w1, #0x8
     8e4:	str	w1, [x27, #36]
     8e8:	lsr	w0, w0, w1
     8ec:	ldr	w1, [x27, #56]
     8f0:	and	w0, w0, #0xff
     8f4:	orr	w0, w0, w1, lsl #8
     8f8:	str	w0, [x27, #56]
     8fc:	mov	w0, #0x1a                  	// #26
     900:	str	w0, [x27, #8]
     904:	ldr	w1, [x27, #36]
     908:	cmp	w1, #0x7
     90c:	b.le	cb4 <BZ2_decompress+0xcb4>
     910:	ldr	w0, [x27, #32]
     914:	sub	w1, w1, #0x8
     918:	str	w1, [x27, #36]
     91c:	lsr	w0, w0, w1
     920:	ldr	w1, [x27, #56]
     924:	and	w0, w0, #0xff
     928:	orr	w0, w0, w1, lsl #8
     92c:	str	w0, [x27, #56]
     930:	mov	w0, #0x1b                  	// #27
     934:	str	w0, [x27, #8]
     938:	ldr	w1, [x27, #36]
     93c:	cmp	w1, #0x7
     940:	b.le	d00 <BZ2_decompress+0xd00>
     944:	ldr	w0, [x27, #32]
     948:	sub	w1, w1, #0x8
     94c:	str	w1, [x27, #36]
     950:	lsr	w0, w0, w1
     954:	ldr	w1, [x27, #56]
     958:	and	w0, w0, #0xff
     95c:	orr	w1, w0, w1, lsl #8
     960:	str	w1, [x27, #56]
     964:	tbz	w1, #31, d4c <BZ2_decompress+0xd4c>
     968:	mov	w0, #0xfffffffc            	// #-4
     96c:	b	594 <BZ2_decompress+0x594>
     970:	ldr	x0, [x27]
     974:	ldr	w2, [x0, #8]
     978:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     97c:	ldr	x3, [x0]
     980:	add	w1, w1, #0x8
     984:	ldr	w6, [x27, #32]
     988:	sub	w2, w2, #0x1
     98c:	ldrb	w11, [x3], #1
     990:	orr	w6, w11, w6, lsl #8
     994:	stp	w6, w1, [x27, #32]
     998:	ldr	w1, [x0, #12]
     99c:	str	x3, [x0]
     9a0:	add	w1, w1, #0x1
     9a4:	stp	w2, w1, [x0, #8]
     9a8:	cbnz	w1, 6ac <BZ2_decompress+0x6ac>
     9ac:	ldr	w1, [x0, #16]
     9b0:	add	w1, w1, #0x1
     9b4:	str	w1, [x0, #16]
     9b8:	b	6ac <BZ2_decompress+0x6ac>
     9bc:	ldr	x0, [x27]
     9c0:	ldr	w2, [x0, #8]
     9c4:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     9c8:	ldr	x3, [x0]
     9cc:	add	w1, w1, #0x8
     9d0:	ldr	w6, [x27, #32]
     9d4:	sub	w2, w2, #0x1
     9d8:	ldrb	w11, [x3], #1
     9dc:	orr	w6, w11, w6, lsl #8
     9e0:	stp	w6, w1, [x27, #32]
     9e4:	ldr	w1, [x0, #12]
     9e8:	str	x3, [x0]
     9ec:	add	w1, w1, #0x1
     9f0:	stp	w2, w1, [x0, #8]
     9f4:	cbnz	w1, 6dc <BZ2_decompress+0x6dc>
     9f8:	ldr	w1, [x0, #16]
     9fc:	add	w1, w1, #0x1
     a00:	str	w1, [x0, #16]
     a04:	b	6dc <BZ2_decompress+0x6dc>
     a08:	ldr	x0, [x27]
     a0c:	ldr	w2, [x0, #8]
     a10:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     a14:	ldr	x3, [x0]
     a18:	add	w1, w1, #0x8
     a1c:	ldr	w6, [x27, #32]
     a20:	sub	w2, w2, #0x1
     a24:	ldrb	w11, [x3], #1
     a28:	orr	w6, w11, w6, lsl #8
     a2c:	stp	w6, w1, [x27, #32]
     a30:	ldr	w1, [x0, #12]
     a34:	str	x3, [x0]
     a38:	add	w1, w1, #0x1
     a3c:	stp	w2, w1, [x0, #8]
     a40:	cbnz	w1, 70c <BZ2_decompress+0x70c>
     a44:	ldr	w1, [x0, #16]
     a48:	add	w1, w1, #0x1
     a4c:	str	w1, [x0, #16]
     a50:	b	70c <BZ2_decompress+0x70c>
     a54:	ldr	x0, [x27]
     a58:	ldr	w2, [x0, #8]
     a5c:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     a60:	ldr	x3, [x0]
     a64:	add	w1, w1, #0x8
     a68:	ldr	w6, [x27, #32]
     a6c:	sub	w2, w2, #0x1
     a70:	ldrb	w11, [x3], #1
     a74:	orr	w6, w11, w6, lsl #8
     a78:	stp	w6, w1, [x27, #32]
     a7c:	ldr	w1, [x0, #12]
     a80:	str	x3, [x0]
     a84:	add	w1, w1, #0x1
     a88:	stp	w2, w1, [x0, #8]
     a8c:	cbnz	w1, 73c <BZ2_decompress+0x73c>
     a90:	ldr	w1, [x0, #16]
     a94:	add	w1, w1, #0x1
     a98:	str	w1, [x0, #16]
     a9c:	b	73c <BZ2_decompress+0x73c>
     aa0:	ldr	x0, [x27]
     aa4:	ldr	w2, [x0, #8]
     aa8:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     aac:	ldr	x3, [x0]
     ab0:	add	w1, w1, #0x8
     ab4:	ldr	w6, [x27, #32]
     ab8:	sub	w2, w2, #0x1
     abc:	ldrb	w11, [x3], #1
     ac0:	orr	w6, w11, w6, lsl #8
     ac4:	stp	w6, w1, [x27, #32]
     ac8:	ldr	w1, [x0, #12]
     acc:	str	x3, [x0]
     ad0:	add	w1, w1, #0x1
     ad4:	stp	w2, w1, [x0, #8]
     ad8:	cbnz	w1, 76c <BZ2_decompress+0x76c>
     adc:	ldr	w1, [x0, #16]
     ae0:	add	w1, w1, #0x1
     ae4:	str	w1, [x0, #16]
     ae8:	b	76c <BZ2_decompress+0x76c>
     aec:	ldr	x0, [x27]
     af0:	ldr	w2, [x0, #8]
     af4:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     af8:	ldr	x3, [x0]
     afc:	add	w1, w1, #0x8
     b00:	ldr	w6, [x27, #32]
     b04:	sub	w2, w2, #0x1
     b08:	ldrb	w11, [x3], #1
     b0c:	orr	w6, w11, w6, lsl #8
     b10:	stp	w6, w1, [x27, #32]
     b14:	ldr	w1, [x0, #12]
     b18:	str	x3, [x0]
     b1c:	add	w1, w1, #0x1
     b20:	stp	w2, w1, [x0, #8]
     b24:	cbnz	w1, 7d0 <BZ2_decompress+0x7d0>
     b28:	ldr	w1, [x0, #16]
     b2c:	add	w1, w1, #0x1
     b30:	str	w1, [x0, #16]
     b34:	b	7d0 <BZ2_decompress+0x7d0>
     b38:	ldr	x0, [x27]
     b3c:	ldr	w2, [x0, #8]
     b40:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     b44:	ldr	x3, [x0]
     b48:	add	w1, w1, #0x8
     b4c:	ldr	w6, [x27, #32]
     b50:	sub	w2, w2, #0x1
     b54:	ldrb	w11, [x3], #1
     b58:	orr	w6, w11, w6, lsl #8
     b5c:	stp	w6, w1, [x27, #32]
     b60:	ldr	w1, [x0, #12]
     b64:	str	x3, [x0]
     b68:	add	w1, w1, #0x1
     b6c:	stp	w2, w1, [x0, #8]
     b70:	cbnz	w1, 804 <BZ2_decompress+0x804>
     b74:	ldr	w1, [x0, #16]
     b78:	add	w1, w1, #0x1
     b7c:	str	w1, [x0, #16]
     b80:	b	804 <BZ2_decompress+0x804>
     b84:	ldr	x0, [x27]
     b88:	ldr	w2, [x0, #8]
     b8c:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     b90:	ldr	x3, [x0]
     b94:	add	w1, w1, #0x8
     b98:	ldr	w6, [x27, #32]
     b9c:	sub	w2, w2, #0x1
     ba0:	ldrb	w11, [x3], #1
     ba4:	orr	w6, w11, w6, lsl #8
     ba8:	stp	w6, w1, [x27, #32]
     bac:	ldr	w1, [x0, #12]
     bb0:	str	x3, [x0]
     bb4:	add	w1, w1, #0x1
     bb8:	stp	w2, w1, [x0, #8]
     bbc:	cbnz	w1, 838 <BZ2_decompress+0x838>
     bc0:	ldr	w1, [x0, #16]
     bc4:	add	w1, w1, #0x1
     bc8:	str	w1, [x0, #16]
     bcc:	b	838 <BZ2_decompress+0x838>
     bd0:	ldr	x0, [x27]
     bd4:	ldr	w2, [x0, #8]
     bd8:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     bdc:	ldr	x3, [x0]
     be0:	add	w1, w1, #0x8
     be4:	ldr	w6, [x27, #32]
     be8:	sub	w2, w2, #0x1
     bec:	ldrb	w11, [x3], #1
     bf0:	orr	w6, w11, w6, lsl #8
     bf4:	stp	w6, w1, [x27, #32]
     bf8:	ldr	w1, [x0, #12]
     bfc:	str	x3, [x0]
     c00:	add	w1, w1, #0x1
     c04:	stp	w2, w1, [x0, #8]
     c08:	cbnz	w1, 86c <BZ2_decompress+0x86c>
     c0c:	ldr	w1, [x0, #16]
     c10:	add	w1, w1, #0x1
     c14:	str	w1, [x0, #16]
     c18:	b	86c <BZ2_decompress+0x86c>
     c1c:	ldr	x0, [x27]
     c20:	ldr	w2, [x0, #8]
     c24:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     c28:	ldr	x3, [x0]
     c2c:	add	w1, w1, #0x8
     c30:	ldr	w6, [x27, #32]
     c34:	sub	w2, w2, #0x1
     c38:	ldrb	w11, [x3], #1
     c3c:	orr	w6, w11, w6, lsl #8
     c40:	stp	w6, w1, [x27, #32]
     c44:	ldr	w1, [x0, #12]
     c48:	str	x3, [x0]
     c4c:	add	w1, w1, #0x1
     c50:	stp	w2, w1, [x0, #8]
     c54:	cbnz	w1, 8a0 <BZ2_decompress+0x8a0>
     c58:	ldr	w1, [x0, #16]
     c5c:	add	w1, w1, #0x1
     c60:	str	w1, [x0, #16]
     c64:	b	8a0 <BZ2_decompress+0x8a0>
     c68:	ldr	x0, [x27]
     c6c:	ldr	w2, [x0, #8]
     c70:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     c74:	ldr	x3, [x0]
     c78:	add	w1, w1, #0x8
     c7c:	ldr	w6, [x27, #32]
     c80:	sub	w2, w2, #0x1
     c84:	ldrb	w11, [x3], #1
     c88:	orr	w6, w11, w6, lsl #8
     c8c:	stp	w6, w1, [x27, #32]
     c90:	ldr	w1, [x0, #12]
     c94:	str	x3, [x0]
     c98:	add	w1, w1, #0x1
     c9c:	stp	w2, w1, [x0, #8]
     ca0:	cbnz	w1, 8d0 <BZ2_decompress+0x8d0>
     ca4:	ldr	w1, [x0, #16]
     ca8:	add	w1, w1, #0x1
     cac:	str	w1, [x0, #16]
     cb0:	b	8d0 <BZ2_decompress+0x8d0>
     cb4:	ldr	x0, [x27]
     cb8:	ldr	w2, [x0, #8]
     cbc:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     cc0:	ldr	x3, [x0]
     cc4:	add	w1, w1, #0x8
     cc8:	ldr	w6, [x27, #32]
     ccc:	sub	w2, w2, #0x1
     cd0:	ldrb	w11, [x3], #1
     cd4:	orr	w6, w11, w6, lsl #8
     cd8:	stp	w6, w1, [x27, #32]
     cdc:	ldr	w1, [x0, #12]
     ce0:	str	x3, [x0]
     ce4:	add	w1, w1, #0x1
     ce8:	stp	w2, w1, [x0, #8]
     cec:	cbnz	w1, 904 <BZ2_decompress+0x904>
     cf0:	ldr	w1, [x0, #16]
     cf4:	add	w1, w1, #0x1
     cf8:	str	w1, [x0, #16]
     cfc:	b	904 <BZ2_decompress+0x904>
     d00:	ldr	x0, [x27]
     d04:	ldr	w2, [x0, #8]
     d08:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
     d0c:	ldr	x3, [x0]
     d10:	add	w1, w1, #0x8
     d14:	ldr	w6, [x27, #32]
     d18:	sub	w2, w2, #0x1
     d1c:	ldrb	w11, [x3], #1
     d20:	orr	w6, w11, w6, lsl #8
     d24:	stp	w6, w1, [x27, #32]
     d28:	ldr	w1, [x0, #12]
     d2c:	str	x3, [x0]
     d30:	add	w1, w1, #0x1
     d34:	stp	w2, w1, [x0, #8]
     d38:	cbnz	w1, 938 <BZ2_decompress+0x938>
     d3c:	ldr	w1, [x0, #16]
     d40:	add	w1, w1, #0x1
     d44:	str	w1, [x0, #16]
     d48:	b	938 <BZ2_decompress+0x938>
     d4c:	ldr	w0, [x27, #40]
     d50:	mov	w2, #0x86a0                	// #34464
     d54:	movk	w2, #0x1, lsl #16
     d58:	mul	w0, w0, w2
     d5c:	add	w0, w0, #0xa
     d60:	cmp	w1, w0
     d64:	b.gt	968 <BZ2_decompress+0x968>
     d68:	mov	w4, #0x0                   	// #0
     d6c:	sxtw	x3, w4
     d70:	add	x6, x27, #0xd7c
     d74:	mov	w11, #0x1c                  	// #28
     d78:	mov	w4, w3
     d7c:	str	w11, [x27, #8]
     d80:	ldr	w0, [x27, #36]
     d84:	cmp	w0, #0x0
     d88:	b.le	113c <BZ2_decompress+0x113c>
     d8c:	ldr	w1, [x27, #32]
     d90:	sub	w0, w0, #0x1
     d94:	str	w0, [x27, #36]
     d98:	lsr	w1, w1, w0
     d9c:	and	w1, w1, #0x1
     da0:	strb	w1, [x6, x3]
     da4:	add	x3, x3, #0x1
     da8:	cmp	w3, #0xf
     dac:	b.le	d78 <BZ2_decompress+0xd78>
     db0:	add	x0, x27, #0xc7c
     db4:	strb	wzr, [x0], #1
     db8:	cmp	x6, x0
     dbc:	b.ne	db4 <BZ2_decompress+0xdb4>  // b.any
     dc0:	mov	w4, #0x0                   	// #0
     dc4:	add	x0, x27, w4, sxtw
     dc8:	ldrb	w0, [x0, #3452]
     dcc:	cbz	w0, e1c <BZ2_decompress+0xe1c>
     dd0:	mov	w22, #0x0                   	// #0
     dd4:	lsl	w3, w4, #4
     dd8:	mov	w6, #0x1d                  	// #29
     ddc:	mov	w11, #0x1                   	// #1
     de0:	str	w6, [x27, #8]
     de4:	ldr	w0, [x27, #36]
     de8:	cmp	w0, #0x0
     dec:	b.le	1188 <BZ2_decompress+0x1188>
     df0:	ldr	w1, [x27, #32]
     df4:	sub	w0, w0, #0x1
     df8:	str	w0, [x27, #36]
     dfc:	lsr	w1, w1, w0
     e00:	tbz	w1, #0, e10 <BZ2_decompress+0xe10>
     e04:	add	w0, w22, w3
     e08:	add	x0, x27, w0, sxtw
     e0c:	strb	w11, [x0, #3196]
     e10:	add	w22, w22, #0x1
     e14:	cmp	w22, #0xf
     e18:	b.le	de0 <BZ2_decompress+0xde0>
     e1c:	add	w4, w4, #0x1
     e20:	cmp	w4, #0xf
     e24:	b.le	dc4 <BZ2_decompress+0xdc4>
     e28:	add	x2, x27, #0xc7c
     e2c:	mov	x0, #0x0                   	// #0
     e30:	str	wzr, [x27, #3192]
     e34:	ldrb	w1, [x2, x0]
     e38:	cbz	w1, e50 <BZ2_decompress+0xe50>
     e3c:	ldr	w1, [x27, #3192]
     e40:	add	x3, x27, w1, sxtw
     e44:	add	w1, w1, #0x1
     e48:	strb	w0, [x3, #3468]
     e4c:	str	w1, [x27, #3192]
     e50:	add	x0, x0, #0x1
     e54:	cmp	x0, #0x100
     e58:	b.ne	e34 <BZ2_decompress+0xe34>  // b.any
     e5c:	ldr	w0, [x27, #3192]
     e60:	cbz	w0, 968 <BZ2_decompress+0x968>
     e64:	add	w0, w0, #0x2
     e68:	str	w0, [sp, #152]
     e6c:	mov	w0, #0x1e                  	// #30
     e70:	str	w0, [x27, #8]
     e74:	ldr	w1, [x27, #36]
     e78:	cmp	w1, #0x2
     e7c:	b.le	11d4 <BZ2_decompress+0x11d4>
     e80:	ldr	w0, [x27, #32]
     e84:	sub	w1, w1, #0x3
     e88:	str	w1, [x27, #36]
     e8c:	lsr	w0, w0, w1
     e90:	and	w0, w0, #0x7
     e94:	str	w0, [sp, #100]
     e98:	sub	w0, w0, #0x2
     e9c:	cmp	w0, #0x4
     ea0:	b.hi	968 <BZ2_decompress+0x968>  // b.pmore
     ea4:	mov	w0, #0x1f                  	// #31
     ea8:	str	w0, [x27, #8]
     eac:	ldr	w1, [x27, #36]
     eb0:	cmp	w1, #0xe
     eb4:	b.le	1220 <BZ2_decompress+0x1220>
     eb8:	ldr	w19, [x27, #32]
     ebc:	sub	w1, w1, #0xf
     ec0:	str	w1, [x27, #36]
     ec4:	lsr	w19, w19, w1
     ec8:	ands	w19, w19, #0x7fff
     ecc:	b.eq	2368 <BZ2_decompress+0x2368>  // b.none
     ed0:	mov	w22, #0x0                   	// #0
     ed4:	mov	w4, #0x0                   	// #0
     ed8:	mov	x9, #0x651e                	// #25886
     edc:	sxtw	x3, w4
     ee0:	mov	w0, w22
     ee4:	add	x12, x27, x9
     ee8:	mov	w6, #0x20                  	// #32
     eec:	mov	w11, #0x4651                	// #18001
     ef0:	mov	w4, w3
     ef4:	mov	w22, w0
     ef8:	str	w6, [x27, #8]
     efc:	ldr	w0, [x27, #36]
     f00:	cmp	w0, #0x0
     f04:	b.le	126c <BZ2_decompress+0x126c>
     f08:	ldr	w1, [x27, #32]
     f0c:	sub	w0, w0, #0x1
     f10:	str	w0, [x27, #36]
     f14:	lsr	w1, w1, w0
     f18:	tbnz	w1, #0, 12b8 <BZ2_decompress+0x12b8>
     f1c:	cmp	w3, w11
     f20:	b.gt	f28 <BZ2_decompress+0xf28>
     f24:	strb	w22, [x12, x3]
     f28:	add	x3, x3, #0x1
     f2c:	mov	w0, #0x0                   	// #0
     f30:	cmp	w19, w3
     f34:	b.gt	ef0 <BZ2_decompress+0xef0>
     f38:	mov	w0, #0x4652                	// #18002
     f3c:	add	x1, sp, #0xc8
     f40:	cmp	w19, w0
     f44:	csel	w19, w19, w0, le
     f48:	mov	w0, #0x0                   	// #0
     f4c:	ldr	w2, [sp, #100]
     f50:	cmp	w0, w2
     f54:	b.lt	12cc <BZ2_decompress+0x12cc>  // b.tstop
     f58:	mov	x7, #0x651e                	// #25886
     f5c:	mov	x8, #0x1ecc                	// #7884
     f60:	add	x3, x27, x7
     f64:	add	x2, sp, #0xc8
     f68:	add	x6, x27, x8
     f6c:	mov	x0, #0x0                   	// #0
     f70:	cmp	w19, w0
     f74:	b.gt	12dc <BZ2_decompress+0x12dc>
     f78:	cmp	w19, #0x0
     f7c:	str	wzr, [sp, #104]
     f80:	csel	w4, w19, wzr, ge  // ge = tcont
     f84:	ldp	w1, w0, [sp, #100]
     f88:	cmp	w0, w1
     f8c:	b.lt	1310 <BZ2_decompress+0x1310>  // b.tstop
     f90:	mov	x4, #0xb17c                	// #45436
     f94:	mov	x5, #0xab70                	// #43888
     f98:	mov	x6, #0xfa0c                	// #64012
     f9c:	add	x25, x27, x4
     fa0:	add	x3, x27, x5
     fa4:	add	x13, x27, x6
     fa8:	mov	x28, #0x0                   	// #0
     fac:	mov	x11, #0x3060                	// #12384
     fb0:	mov	x12, #0x1830                	// #6192
     fb4:	ldr	w0, [sp, #100]
     fb8:	cmp	w0, w28
     fbc:	b.gt	1544 <BZ2_decompress+0x1544>
     fc0:	cmp	w0, #0x0
     fc4:	ldr	w1, [x27, #40]
     fc8:	csel	w0, w0, wzr, ge  // ge = tcont
     fcc:	str	w0, [sp, #104]
     fd0:	ldr	w0, [x27, #3192]
     fd4:	add	w0, w0, #0x1
     fd8:	str	w0, [sp, #160]
     fdc:	mov	w0, #0x86a0                	// #34464
     fe0:	movk	w0, #0x1, lsl #16
     fe4:	mul	w0, w1, w0
     fe8:	add	x1, x27, #0x444
     fec:	str	w0, [sp, #144]
     ff0:	add	x0, x27, #0x44
     ff4:	str	wzr, [x0], #4
     ff8:	cmp	x1, x0
     ffc:	b.ne	ff4 <BZ2_decompress+0xff4>  // b.any
    1000:	mov	x3, #0x1ec8                	// #7880
    1004:	add	x4, x27, x3
    1008:	add	x3, x27, #0xfff
    100c:	mov	w0, #0xff0                 	// #4080
    1010:	and	w5, w0, #0xff
    1014:	mov	x2, x3
    1018:	mov	w1, #0xf                   	// #15
    101c:	add	w6, w5, w1
    1020:	strb	w6, [x2, #3724]
    1024:	sub	w1, w1, #0x1
    1028:	sub	x2, x2, #0x1
    102c:	cmn	w1, #0x1
    1030:	b.ne	101c <BZ2_decompress+0x101c>  // b.any
    1034:	str	w0, [x4], #-4
    1038:	sub	w0, w0, #0x10
    103c:	sub	x3, x3, #0x10
    1040:	cmp	w0, #0xef0
    1044:	b.ne	1010 <BZ2_decompress+0x1010>  // b.any
    1048:	cmp	w19, #0x0
    104c:	b.le	2370 <BZ2_decompress+0x2370>
    1050:	add	x1, x27, #0x1, lsl #12
    1054:	mov	x17, #0x3e80                	// #16000
    1058:	mov	x18, #0xb17c                	// #45436
    105c:	mov	x30, #0xe1dc                	// #57820
    1060:	mov	x2, #0xc9ac                	// #51628
    1064:	mov	w28, #0x0                   	// #0
    1068:	ldrb	w0, [x1, #3788]
    106c:	mov	w25, #0x31                  	// #49
    1070:	str	w0, [sp, #156]
    1074:	mov	w26, #0x0                   	// #0
    1078:	ldrb	w0, [x1, #3788]
    107c:	mov	w4, #0x100                 	// #256
    1080:	add	x0, x0, x17
    1084:	add	x0, x27, x0, lsl #2
    1088:	ldr	w24, [x0, #12]
    108c:	ldrb	w0, [x1, #3788]
    1090:	mov	x1, #0x408                 	// #1032
    1094:	str	w24, [sp, #140]
    1098:	mul	x0, x0, x1
    109c:	add	x21, x0, x18
    10a0:	add	x1, x0, x30
    10a4:	add	x21, x27, x21
    10a8:	add	x0, x0, x2
    10ac:	add	x1, x27, x1
    10b0:	add	x0, x27, x0
    10b4:	stp	x0, x1, [sp, #120]
    10b8:	mov	w0, #0x24                  	// #36
    10bc:	str	w0, [x27, #8]
    10c0:	ldr	w1, [x27, #36]
    10c4:	cmp	w1, w24
    10c8:	b.lt	1554 <BZ2_decompress+0x1554>  // b.tstop
    10cc:	ldr	w9, [x27, #32]
    10d0:	sub	w1, w1, w24
    10d4:	mov	w0, #0x1                   	// #1
    10d8:	str	w1, [x27, #36]
    10dc:	lsl	w0, w0, w24
    10e0:	sub	w0, w0, #0x1
    10e4:	lsr	w9, w9, w1
    10e8:	and	w23, w9, w0
    10ec:	cmp	w24, #0x14
    10f0:	b.gt	968 <BZ2_decompress+0x968>
    10f4:	sbfiz	x0, x24, #2, #32
    10f8:	ldr	w1, [x21, x0]
    10fc:	cmp	w1, w23
    1100:	b.ge	1c18 <BZ2_decompress+0x1c18>  // b.tcont
    1104:	add	w24, w24, #0x1
    1108:	mov	w0, #0x25                  	// #37
    110c:	str	w0, [x27, #8]
    1110:	ldr	w1, [x27, #36]
    1114:	cmp	w1, #0x0
    1118:	b.le	15a0 <BZ2_decompress+0x15a0>
    111c:	ldr	w0, [x27, #32]
    1120:	sub	w1, w1, #0x1
    1124:	str	w1, [x27, #36]
    1128:	lsr	w0, w0, w1
    112c:	and	w0, w0, #0x1
    1130:	orr	w23, w0, w23, lsl #1
    1134:	str	w0, [sp, #136]
    1138:	b	10ec <BZ2_decompress+0x10ec>
    113c:	ldr	x2, [x27]
    1140:	ldr	w1, [x2, #8]
    1144:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
    1148:	ldr	x12, [x2]
    114c:	add	w0, w0, #0x8
    1150:	ldr	w13, [x27, #32]
    1154:	sub	w1, w1, #0x1
    1158:	ldrb	w14, [x12], #1
    115c:	orr	w13, w14, w13, lsl #8
    1160:	stp	w13, w0, [x27, #32]
    1164:	ldr	w0, [x2, #12]
    1168:	str	x12, [x2]
    116c:	add	w0, w0, #0x1
    1170:	stp	w1, w0, [x2, #8]
    1174:	cbnz	w0, d80 <BZ2_decompress+0xd80>
    1178:	ldr	w0, [x2, #16]
    117c:	add	w0, w0, #0x1
    1180:	str	w0, [x2, #16]
    1184:	b	d80 <BZ2_decompress+0xd80>
    1188:	ldr	x2, [x27]
    118c:	ldr	w1, [x2, #8]
    1190:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
    1194:	ldr	x12, [x2]
    1198:	add	w0, w0, #0x8
    119c:	ldr	w13, [x27, #32]
    11a0:	sub	w1, w1, #0x1
    11a4:	ldrb	w14, [x12], #1
    11a8:	orr	w13, w14, w13, lsl #8
    11ac:	stp	w13, w0, [x27, #32]
    11b0:	ldr	w0, [x2, #12]
    11b4:	str	x12, [x2]
    11b8:	add	w0, w0, #0x1
    11bc:	stp	w1, w0, [x2, #8]
    11c0:	cbnz	w0, de4 <BZ2_decompress+0xde4>
    11c4:	ldr	w0, [x2, #16]
    11c8:	add	w0, w0, #0x1
    11cc:	str	w0, [x2, #16]
    11d0:	b	de4 <BZ2_decompress+0xde4>
    11d4:	ldr	x0, [x27]
    11d8:	ldr	w2, [x0, #8]
    11dc:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    11e0:	ldr	x3, [x0]
    11e4:	add	w1, w1, #0x8
    11e8:	ldr	w6, [x27, #32]
    11ec:	sub	w2, w2, #0x1
    11f0:	ldrb	w11, [x3], #1
    11f4:	orr	w6, w11, w6, lsl #8
    11f8:	stp	w6, w1, [x27, #32]
    11fc:	ldr	w1, [x0, #12]
    1200:	str	x3, [x0]
    1204:	add	w1, w1, #0x1
    1208:	stp	w2, w1, [x0, #8]
    120c:	cbnz	w1, e74 <BZ2_decompress+0xe74>
    1210:	ldr	w1, [x0, #16]
    1214:	add	w1, w1, #0x1
    1218:	str	w1, [x0, #16]
    121c:	b	e74 <BZ2_decompress+0xe74>
    1220:	ldr	x0, [x27]
    1224:	ldr	w2, [x0, #8]
    1228:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    122c:	ldr	x3, [x0]
    1230:	add	w1, w1, #0x8
    1234:	ldr	w6, [x27, #32]
    1238:	sub	w2, w2, #0x1
    123c:	ldrb	w11, [x3], #1
    1240:	orr	w6, w11, w6, lsl #8
    1244:	stp	w6, w1, [x27, #32]
    1248:	ldr	w1, [x0, #12]
    124c:	str	x3, [x0]
    1250:	add	w1, w1, #0x1
    1254:	stp	w2, w1, [x0, #8]
    1258:	cbnz	w1, eac <BZ2_decompress+0xeac>
    125c:	ldr	w1, [x0, #16]
    1260:	add	w1, w1, #0x1
    1264:	str	w1, [x0, #16]
    1268:	b	eac <BZ2_decompress+0xeac>
    126c:	ldr	x2, [x27]
    1270:	ldr	w1, [x2, #8]
    1274:	cbz	w1, 1f58 <BZ2_decompress+0x1f58>
    1278:	ldr	x13, [x2]
    127c:	add	w0, w0, #0x8
    1280:	ldr	w14, [x27, #32]
    1284:	sub	w1, w1, #0x1
    1288:	ldrb	w15, [x13], #1
    128c:	orr	w14, w15, w14, lsl #8
    1290:	stp	w14, w0, [x27, #32]
    1294:	ldr	w0, [x2, #12]
    1298:	str	x13, [x2]
    129c:	add	w0, w0, #0x1
    12a0:	stp	w1, w0, [x2, #8]
    12a4:	cbnz	w0, efc <BZ2_decompress+0xefc>
    12a8:	ldr	w0, [x2, #16]
    12ac:	add	w0, w0, #0x1
    12b0:	str	w0, [x2, #16]
    12b4:	b	efc <BZ2_decompress+0xefc>
    12b8:	ldr	w0, [sp, #100]
    12bc:	add	w22, w22, #0x1
    12c0:	cmp	w22, w0
    12c4:	b.lt	ef8 <BZ2_decompress+0xef8>  // b.tstop
    12c8:	b	968 <BZ2_decompress+0x968>
    12cc:	strb	w0, [x1, w0, sxtw]
    12d0:	add	w0, w0, #0x1
    12d4:	and	w0, w0, #0xff
    12d8:	b	f4c <BZ2_decompress+0xf4c>
    12dc:	ldrb	w1, [x3, x0]
    12e0:	ldrb	w4, [x2, x1]
    12e4:	sub	x1, x1, #0x1
    12e8:	cmn	x1, #0x1
    12ec:	b.ne	1300 <BZ2_decompress+0x1300>  // b.any
    12f0:	strb	w4, [x6, x0]
    12f4:	add	x0, x0, #0x1
    12f8:	strb	w4, [sp, #200]
    12fc:	b	f70 <BZ2_decompress+0xf70>
    1300:	add	x11, x2, x1
    1304:	ldrb	w12, [x2, x1]
    1308:	strb	w12, [x11, #1]
    130c:	b	12e4 <BZ2_decompress+0x12e4>
    1310:	mov	w0, #0x21                  	// #33
    1314:	str	w0, [x27, #8]
    1318:	ldr	w1, [x27, #36]
    131c:	cmp	w1, #0x4
    1320:	b.le	135c <BZ2_decompress+0x135c>
    1324:	ldr	w0, [x27, #32]
    1328:	sub	w1, w1, #0x5
    132c:	mov	w4, #0x0                   	// #0
    1330:	str	w1, [x27, #36]
    1334:	lsr	w0, w0, w1
    1338:	and	w0, w0, #0x1f
    133c:	str	w0, [sp, #116]
    1340:	ldr	w0, [sp, #152]
    1344:	cmp	w4, w0
    1348:	b.lt	13a8 <BZ2_decompress+0x13a8>  // b.tstop
    134c:	ldr	w0, [sp, #104]
    1350:	add	w0, w0, #0x1
    1354:	str	w0, [sp, #104]
    1358:	b	f84 <BZ2_decompress+0xf84>
    135c:	ldr	x0, [x27]
    1360:	ldr	w2, [x0, #8]
    1364:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1368:	ldr	x3, [x0]
    136c:	add	w1, w1, #0x8
    1370:	ldr	w6, [x27, #32]
    1374:	sub	w2, w2, #0x1
    1378:	ldrb	w11, [x3], #1
    137c:	orr	w6, w11, w6, lsl #8
    1380:	stp	w6, w1, [x27, #32]
    1384:	ldr	w1, [x0, #12]
    1388:	str	x3, [x0]
    138c:	add	w1, w1, #0x1
    1390:	stp	w2, w1, [x0, #8]
    1394:	cbnz	w1, 1318 <BZ2_decompress+0x1318>
    1398:	ldr	w1, [x0, #16]
    139c:	add	w1, w1, #0x1
    13a0:	str	w1, [x0, #16]
    13a4:	b	1318 <BZ2_decompress+0x1318>
    13a8:	ldr	w0, [sp, #116]
    13ac:	sub	w0, w0, #0x1
    13b0:	cmp	w0, #0x13
    13b4:	b.hi	968 <BZ2_decompress+0x968>  // b.pmore
    13b8:	mov	w0, #0x22                  	// #34
    13bc:	str	w0, [x27, #8]
    13c0:	ldr	w1, [x27, #36]
    13c4:	cmp	w1, #0x0
    13c8:	b.le	1420 <BZ2_decompress+0x1420>
    13cc:	ldr	w0, [x27, #32]
    13d0:	sub	w1, w1, #0x1
    13d4:	str	w1, [x27, #36]
    13d8:	lsr	w0, w0, w1
    13dc:	tbz	w0, #0, 14b8 <BZ2_decompress+0x14b8>
    13e0:	mov	w0, #0x23                  	// #35
    13e4:	str	w0, [x27, #8]
    13e8:	ldr	w1, [x27, #36]
    13ec:	cmp	w1, #0x0
    13f0:	b.le	146c <BZ2_decompress+0x146c>
    13f4:	ldr	w0, [x27, #32]
    13f8:	sub	w1, w1, #0x1
    13fc:	str	w1, [x27, #36]
    1400:	lsr	w0, w0, w1
    1404:	ldr	w1, [sp, #116]
    1408:	tst	x0, #0x1
    140c:	ldr	w0, [sp, #116]
    1410:	sub	w1, w1, #0x1
    1414:	csinc	w0, w1, w0, ne  // ne = any
    1418:	str	w0, [sp, #116]
    141c:	b	13a8 <BZ2_decompress+0x13a8>
    1420:	ldr	x0, [x27]
    1424:	ldr	w2, [x0, #8]
    1428:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    142c:	ldr	x3, [x0]
    1430:	add	w1, w1, #0x8
    1434:	ldr	w6, [x27, #32]
    1438:	sub	w2, w2, #0x1
    143c:	ldrb	w11, [x3], #1
    1440:	orr	w6, w11, w6, lsl #8
    1444:	stp	w6, w1, [x27, #32]
    1448:	ldr	w1, [x0, #12]
    144c:	str	x3, [x0]
    1450:	add	w1, w1, #0x1
    1454:	stp	w2, w1, [x0, #8]
    1458:	cbnz	w1, 13c0 <BZ2_decompress+0x13c0>
    145c:	ldr	w1, [x0, #16]
    1460:	add	w1, w1, #0x1
    1464:	str	w1, [x0, #16]
    1468:	b	13c0 <BZ2_decompress+0x13c0>
    146c:	ldr	x0, [x27]
    1470:	ldr	w2, [x0, #8]
    1474:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1478:	ldr	x3, [x0]
    147c:	add	w1, w1, #0x8
    1480:	ldr	w6, [x27, #32]
    1484:	sub	w2, w2, #0x1
    1488:	ldrb	w11, [x3], #1
    148c:	orr	w6, w11, w6, lsl #8
    1490:	stp	w6, w1, [x27, #32]
    1494:	ldr	w1, [x0, #12]
    1498:	str	x3, [x0]
    149c:	add	w1, w1, #0x1
    14a0:	stp	w2, w1, [x0, #8]
    14a4:	cbnz	w1, 13e8 <BZ2_decompress+0x13e8>
    14a8:	ldr	w1, [x0, #16]
    14ac:	add	w1, w1, #0x1
    14b0:	str	w1, [x0, #16]
    14b4:	b	13e8 <BZ2_decompress+0x13e8>
    14b8:	ldrsw	x0, [sp, #104]
    14bc:	mov	x1, #0x102                 	// #258
    14c0:	madd	x0, x0, x1, x27
    14c4:	ldrb	w1, [sp, #116]
    14c8:	add	x0, x0, w4, sxtw
    14cc:	add	w4, w4, #0x1
    14d0:	add	x0, x0, #0xa, lsl #12
    14d4:	strb	w1, [x0, #2928]
    14d8:	b	1340 <BZ2_decompress+0x1340>
    14dc:	ldrb	w1, [x3, x0]
    14e0:	add	x0, x0, #0x1
    14e4:	cmp	w5, w1
    14e8:	csel	w5, w5, w1, ge  // ge = tcont
    14ec:	cmp	w26, w1
    14f0:	csel	w26, w26, w1, le
    14f4:	ldr	w1, [sp, #152]
    14f8:	cmp	w1, w0
    14fc:	b.gt	14dc <BZ2_decompress+0x14dc>
    1500:	add	x2, x25, x11
    1504:	mov	x6, x1
    1508:	mov	x0, x25
    150c:	add	x1, x25, x12
    1510:	mov	w4, w26
    1514:	str	x3, [sp, #104]
    1518:	str	x13, [sp, #144]
    151c:	bl	0 <BZ2_hbCreateDecodeTables>
    1520:	ldr	x13, [sp, #144]
    1524:	add	x25, x25, #0x408
    1528:	ldr	x3, [sp, #104]
    152c:	mov	x11, #0x3060                	// #12384
    1530:	mov	x12, #0x1830                	// #6192
    1534:	str	w26, [x13, x28, lsl #2]
    1538:	add	x3, x3, #0x102
    153c:	add	x28, x28, #0x1
    1540:	b	fb4 <BZ2_decompress+0xfb4>
    1544:	mov	x0, #0x0                   	// #0
    1548:	mov	w5, #0x0                   	// #0
    154c:	mov	w26, #0x20                  	// #32
    1550:	b	14f4 <BZ2_decompress+0x14f4>
    1554:	ldr	x0, [x27]
    1558:	ldr	w2, [x0, #8]
    155c:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1560:	ldr	x3, [x0]
    1564:	add	w1, w1, #0x8
    1568:	ldr	w6, [x27, #32]
    156c:	sub	w2, w2, #0x1
    1570:	ldrb	w11, [x3], #1
    1574:	orr	w6, w11, w6, lsl #8
    1578:	stp	w6, w1, [x27, #32]
    157c:	ldr	w1, [x0, #12]
    1580:	str	x3, [x0]
    1584:	add	w1, w1, #0x1
    1588:	stp	w2, w1, [x0, #8]
    158c:	cbnz	w1, 10c0 <BZ2_decompress+0x10c0>
    1590:	ldr	w1, [x0, #16]
    1594:	add	w1, w1, #0x1
    1598:	str	w1, [x0, #16]
    159c:	b	10c0 <BZ2_decompress+0x10c0>
    15a0:	ldr	x0, [x27]
    15a4:	ldr	w2, [x0, #8]
    15a8:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    15ac:	ldr	x3, [x0]
    15b0:	add	w1, w1, #0x8
    15b4:	ldr	w6, [x27, #32]
    15b8:	sub	w2, w2, #0x1
    15bc:	ldrb	w11, [x3], #1
    15c0:	orr	w6, w11, w6, lsl #8
    15c4:	stp	w6, w1, [x27, #32]
    15c8:	ldr	w1, [x0, #12]
    15cc:	str	x3, [x0]
    15d0:	add	w1, w1, #0x1
    15d4:	stp	w2, w1, [x0, #8]
    15d8:	cbnz	w1, 1110 <BZ2_decompress+0x1110>
    15dc:	ldr	w1, [x0, #16]
    15e0:	add	w1, w1, #0x1
    15e4:	str	w1, [x0, #16]
    15e8:	b	1110 <BZ2_decompress+0x1110>
    15ec:	ldr	w2, [sp, #112]
    15f0:	mov	w1, #0x1fffff              	// #2097151
    15f4:	mov	w0, #0xfffffffc            	// #-4
    15f8:	cmp	w2, w1
    15fc:	b.gt	594 <BZ2_decompress+0x594>
    1600:	ldr	w0, [sp, #112]
    1604:	ldr	w1, [sp, #112]
    1608:	lsl	w2, w0, #1
    160c:	add	w0, w20, w0
    1610:	add	w20, w20, w1, lsl #1
    1614:	ldr	w1, [sp, #96]
    1618:	cmp	w1, #0x0
    161c:	csel	w20, w20, w0, ne  // ne = any
    1620:	cbnz	w25, 1690 <BZ2_decompress+0x1690>
    1624:	add	w26, w26, #0x1
    1628:	cmp	w26, w19
    162c:	b.ge	2384 <BZ2_decompress+0x2384>  // b.tcont
    1630:	add	x0, x27, w26, sxtw
    1634:	mov	x13, #0x3e80                	// #16000
    1638:	add	x0, x0, #0x1, lsl #12
    163c:	mov	x14, #0xb17c                	// #45436
    1640:	mov	x15, #0xe1dc                	// #57820
    1644:	mov	x16, #0xc9ac                	// #51628
    1648:	mov	w25, #0x32                  	// #50
    164c:	ldrb	w1, [x0, #3788]
    1650:	str	w1, [sp, #156]
    1654:	ldrb	w1, [x0, #3788]
    1658:	ldrb	w0, [x0, #3788]
    165c:	add	x1, x1, x13
    1660:	add	x1, x27, x1, lsl #2
    1664:	ldr	w1, [x1, #12]
    1668:	str	w1, [sp, #140]
    166c:	mov	x1, #0x408                 	// #1032
    1670:	mul	x0, x0, x1
    1674:	add	x21, x0, x14
    1678:	add	x1, x0, x15
    167c:	add	x21, x27, x21
    1680:	add	x0, x0, x16
    1684:	add	x1, x27, x1
    1688:	add	x0, x27, x0
    168c:	stp	x0, x1, [sp, #120]
    1690:	ldr	w24, [sp, #140]
    1694:	sub	w25, w25, #0x1
    1698:	str	w2, [sp, #112]
    169c:	mov	w0, #0x26                  	// #38
    16a0:	str	w0, [x27, #8]
    16a4:	ldr	w1, [x27, #36]
    16a8:	cmp	w1, w24
    16ac:	b.lt	1720 <BZ2_decompress+0x1720>  // b.tstop
    16b0:	ldr	w9, [x27, #32]
    16b4:	sub	w1, w1, w24
    16b8:	mov	w0, #0x1                   	// #1
    16bc:	str	w1, [x27, #36]
    16c0:	lsl	w0, w0, w24
    16c4:	sub	w0, w0, #0x1
    16c8:	lsr	w9, w9, w1
    16cc:	and	w23, w9, w0
    16d0:	cmp	w24, #0x14
    16d4:	b.gt	968 <BZ2_decompress+0x968>
    16d8:	sbfiz	x0, x24, #2, #32
    16dc:	ldr	w1, [x21, x0]
    16e0:	cmp	w1, w23
    16e4:	b.ge	17b8 <BZ2_decompress+0x17b8>  // b.tcont
    16e8:	add	w24, w24, #0x1
    16ec:	mov	w0, #0x27                  	// #39
    16f0:	str	w0, [x27, #8]
    16f4:	ldr	w1, [x27, #36]
    16f8:	cmp	w1, #0x0
    16fc:	b.le	176c <BZ2_decompress+0x176c>
    1700:	ldr	w0, [x27, #32]
    1704:	sub	w1, w1, #0x1
    1708:	str	w1, [x27, #36]
    170c:	lsr	w0, w0, w1
    1710:	and	w0, w0, #0x1
    1714:	orr	w23, w0, w23, lsl #1
    1718:	str	w0, [sp, #136]
    171c:	b	16d0 <BZ2_decompress+0x16d0>
    1720:	ldr	x0, [x27]
    1724:	ldr	w2, [x0, #8]
    1728:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    172c:	ldr	x3, [x0]
    1730:	add	w1, w1, #0x8
    1734:	ldr	w6, [x27, #32]
    1738:	sub	w2, w2, #0x1
    173c:	ldrb	w11, [x3], #1
    1740:	orr	w6, w11, w6, lsl #8
    1744:	stp	w6, w1, [x27, #32]
    1748:	ldr	w1, [x0, #12]
    174c:	str	x3, [x0]
    1750:	add	w1, w1, #0x1
    1754:	stp	w2, w1, [x0, #8]
    1758:	cbnz	w1, 16a4 <BZ2_decompress+0x16a4>
    175c:	ldr	w1, [x0, #16]
    1760:	add	w1, w1, #0x1
    1764:	str	w1, [x0, #16]
    1768:	b	16a4 <BZ2_decompress+0x16a4>
    176c:	ldr	x0, [x27]
    1770:	ldr	w2, [x0, #8]
    1774:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1778:	ldr	x3, [x0]
    177c:	add	w1, w1, #0x8
    1780:	ldr	w6, [x27, #32]
    1784:	sub	w2, w2, #0x1
    1788:	ldrb	w11, [x3], #1
    178c:	orr	w6, w11, w6, lsl #8
    1790:	stp	w6, w1, [x27, #32]
    1794:	ldr	w1, [x0, #12]
    1798:	str	x3, [x0]
    179c:	add	w1, w1, #0x1
    17a0:	stp	w2, w1, [x0, #8]
    17a4:	cbnz	w1, 16f4 <BZ2_decompress+0x16f4>
    17a8:	ldr	w1, [x0, #16]
    17ac:	add	w1, w1, #0x1
    17b0:	str	w1, [x0, #16]
    17b4:	b	16f4 <BZ2_decompress+0x16f4>
    17b8:	ldr	x1, [sp, #120]
    17bc:	ldr	w0, [x1, x0]
    17c0:	sub	w0, w23, w0
    17c4:	cmp	w0, #0x101
    17c8:	b.hi	968 <BZ2_decompress+0x968>  // b.pmore
    17cc:	ldr	x1, [sp, #128]
    17d0:	ldr	w0, [x1, w0, sxtw #2]
    17d4:	str	w0, [sp, #96]
    17d8:	mov	w0, w0
    17dc:	cmp	w0, #0x1
    17e0:	b.ls	15ec <BZ2_decompress+0x15ec>  // b.plast
    17e4:	ldrsw	x0, [x27, #7820]
    17e8:	add	w20, w20, #0x1
    17ec:	add	x0, x27, x0
    17f0:	ldrb	w0, [x0, #3724]
    17f4:	add	x0, x27, x0
    17f8:	ldrb	w2, [x0, #3468]
    17fc:	ldrb	w0, [x0, #3468]
    1800:	add	x0, x27, x0, lsl #2
    1804:	ldr	w1, [x0, #68]
    1808:	add	w1, w1, w20
    180c:	str	w1, [x0, #68]
    1810:	sxtw	x0, w28
    1814:	ldrb	w1, [x27, #44]
    1818:	cbnz	w1, 184c <BZ2_decompress+0x184c>
    181c:	lsl	x0, x0, #2
    1820:	cmp	w20, #0x0
    1824:	b.le	1c38 <BZ2_decompress+0x1c38>
    1828:	ldr	w1, [sp, #144]
    182c:	cmp	w1, w28
    1830:	b.le	968 <BZ2_decompress+0x968>
    1834:	ldr	x1, [x27, #3152]
    1838:	add	w28, w28, #0x1
    183c:	sub	w20, w20, #0x1
    1840:	str	w2, [x1, x0]
    1844:	add	x0, x0, #0x4
    1848:	b	1820 <BZ2_decompress+0x1820>
    184c:	lsl	x0, x0, #1
    1850:	cmp	w20, #0x0
    1854:	b.le	1c38 <BZ2_decompress+0x1c38>
    1858:	ldr	w1, [sp, #144]
    185c:	cmp	w1, w28
    1860:	b.le	968 <BZ2_decompress+0x968>
    1864:	ldr	x1, [x27, #3160]
    1868:	add	w28, w28, #0x1
    186c:	sub	w20, w20, #0x1
    1870:	strh	w2, [x1, x0]
    1874:	add	x0, x0, #0x2
    1878:	b	1850 <BZ2_decompress+0x1850>
    187c:	ldr	w0, [sp, #144]
    1880:	cmp	w0, w28
    1884:	b.le	968 <BZ2_decompress+0x968>
    1888:	ldr	w0, [sp, #96]
    188c:	sub	w0, w0, #0x1
    1890:	cmp	w0, #0xf
    1894:	b.hi	1a80 <BZ2_decompress+0x1a80>  // b.pmore
    1898:	ldr	w2, [x27, #7820]
    189c:	add	w12, w2, w0
    18a0:	add	w0, w2, w0
    18a4:	add	x0, x27, x0
    18a8:	ldrb	w3, [x0, #3724]
    18ac:	ldr	w0, [sp, #96]
    18b0:	add	w1, w0, w2
    18b4:	sub	w6, w1, #0x1
    18b8:	sub	w0, w1, #0x4
    18bc:	sub	w11, w6, w2
    18c0:	cmp	w11, #0x3
    18c4:	b.hi	1a1c <BZ2_decompress+0x1a1c>  // b.pmore
    18c8:	ldr	w0, [sp, #96]
    18cc:	mov	w1, #0xfffffffc            	// #-4
    18d0:	sub	w0, w0, #0x1
    18d4:	lsr	w0, w0, #2
    18d8:	madd	w0, w0, w1, w12
    18dc:	cmp	w2, w0
    18e0:	b.ne	1a64 <BZ2_decompress+0x1a64>  // b.any
    18e4:	add	x2, x27, w2, sxtw
    18e8:	strb	w3, [x2, #3724]
    18ec:	add	x3, x27, w3, sxtw
    18f0:	ldrb	w0, [x3, #3468]
    18f4:	ldrb	w2, [x3, #3468]
    18f8:	add	x0, x27, x0, lsl #2
    18fc:	ldr	w1, [x0, #68]
    1900:	add	w1, w1, #0x1
    1904:	str	w1, [x0, #68]
    1908:	sxtw	x0, w28
    190c:	ldrb	w1, [x27, #44]
    1910:	cbz	w1, 1b74 <BZ2_decompress+0x1b74>
    1914:	ldr	x1, [x27, #3160]
    1918:	strh	w2, [x1, x0, lsl #1]
    191c:	add	w28, w28, #0x1
    1920:	cbnz	w25, 1990 <BZ2_decompress+0x1990>
    1924:	add	w26, w26, #0x1
    1928:	cmp	w19, w26
    192c:	b.le	968 <BZ2_decompress+0x968>
    1930:	add	x0, x27, w26, sxtw
    1934:	mov	x5, #0x3e80                	// #16000
    1938:	add	x0, x0, #0x1, lsl #12
    193c:	mov	x6, #0xb17c                	// #45436
    1940:	mov	x7, #0xe1dc                	// #57820
    1944:	mov	x8, #0xc9ac                	// #51628
    1948:	mov	w25, #0x32                  	// #50
    194c:	ldrb	w1, [x0, #3788]
    1950:	str	w1, [sp, #156]
    1954:	ldrb	w1, [x0, #3788]
    1958:	ldrb	w0, [x0, #3788]
    195c:	add	x1, x1, x5
    1960:	add	x1, x27, x1, lsl #2
    1964:	ldr	w1, [x1, #12]
    1968:	str	w1, [sp, #140]
    196c:	mov	x1, #0x408                 	// #1032
    1970:	mul	x0, x0, x1
    1974:	add	x21, x0, x6
    1978:	add	x1, x0, x7
    197c:	add	x21, x27, x21
    1980:	add	x0, x0, x8
    1984:	add	x1, x27, x1
    1988:	add	x0, x27, x0
    198c:	stp	x0, x1, [sp, #120]
    1990:	ldr	w24, [sp, #140]
    1994:	sub	w25, w25, #0x1
    1998:	mov	w0, #0x28                  	// #40
    199c:	str	w0, [x27, #8]
    19a0:	ldr	w1, [x27, #36]
    19a4:	cmp	w1, w24
    19a8:	b.lt	1b80 <BZ2_decompress+0x1b80>  // b.tstop
    19ac:	ldr	w9, [x27, #32]
    19b0:	sub	w1, w1, w24
    19b4:	mov	w0, #0x1                   	// #1
    19b8:	str	w1, [x27, #36]
    19bc:	lsl	w0, w0, w24
    19c0:	sub	w0, w0, #0x1
    19c4:	lsr	w9, w9, w1
    19c8:	and	w23, w9, w0
    19cc:	cmp	w24, #0x14
    19d0:	b.gt	968 <BZ2_decompress+0x968>
    19d4:	sbfiz	x0, x24, #2, #32
    19d8:	ldr	w1, [x21, x0]
    19dc:	cmp	w1, w23
    19e0:	b.ge	1c18 <BZ2_decompress+0x1c18>  // b.tcont
    19e4:	add	w24, w24, #0x1
    19e8:	mov	w0, #0x29                  	// #41
    19ec:	str	w0, [x27, #8]
    19f0:	ldr	w1, [x27, #36]
    19f4:	cmp	w1, #0x0
    19f8:	b.le	1bcc <BZ2_decompress+0x1bcc>
    19fc:	ldr	w0, [x27, #32]
    1a00:	sub	w1, w1, #0x1
    1a04:	str	w1, [x27, #36]
    1a08:	lsr	w0, w0, w1
    1a0c:	and	w0, w0, #0x1
    1a10:	orr	w23, w0, w23, lsl #1
    1a14:	str	w0, [sp, #136]
    1a18:	b	19cc <BZ2_decompress+0x19cc>
    1a1c:	sub	w11, w1, #0x2
    1a20:	add	x6, x27, w6, sxtw
    1a24:	add	x11, x27, w11, sxtw
    1a28:	ldrb	w13, [x11, #3724]
    1a2c:	strb	w13, [x6, #3724]
    1a30:	sub	w6, w1, #0x3
    1a34:	sub	w1, w1, #0x5
    1a38:	add	x6, x27, w6, sxtw
    1a3c:	add	x1, x27, w1, sxtw
    1a40:	ldrb	w13, [x6, #3724]
    1a44:	strb	w13, [x11, #3724]
    1a48:	add	x11, x27, w0, sxtw
    1a4c:	ldrb	w13, [x11, #3724]
    1a50:	strb	w13, [x6, #3724]
    1a54:	ldrb	w1, [x1, #3724]
    1a58:	strb	w1, [x11, #3724]
    1a5c:	mov	w1, w0
    1a60:	b	18b4 <BZ2_decompress+0x18b4>
    1a64:	sub	w1, w0, #0x1
    1a68:	add	x0, x27, w0, uxtw
    1a6c:	add	x6, x27, w1, uxtw
    1a70:	ldrb	w6, [x6, #3724]
    1a74:	strb	w6, [x0, #3724]
    1a78:	mov	w0, w1
    1a7c:	b	18dc <BZ2_decompress+0x18dc>
    1a80:	lsr	w2, w0, #4
    1a84:	and	w0, w0, #0xf
    1a88:	add	x11, x27, #0xe8b
    1a8c:	add	x12, x27, #0xe8c
    1a90:	add	x6, x27, x2, lsl #2
    1a94:	ldr	w1, [x6, #7820]
    1a98:	add	w0, w0, w1
    1a9c:	add	x3, x27, w0, sxtw
    1aa0:	sxtw	x0, w0
    1aa4:	ldrb	w3, [x3, #3724]
    1aa8:	cmp	w1, w0
    1aac:	b.lt	1b64 <BZ2_decompress+0x1b64>  // b.tstop
    1ab0:	add	w1, w1, #0x1
    1ab4:	mov	x11, #0x1e88                	// #7816
    1ab8:	mov	x12, #0x1e8c                	// #7820
    1abc:	add	x11, x27, x11
    1ac0:	str	w1, [x6, #7820]
    1ac4:	add	x6, x27, x12
    1ac8:	ldr	w0, [x6, x2, lsl #2]
    1acc:	sub	w0, w0, #0x1
    1ad0:	str	w0, [x6, x2, lsl #2]
    1ad4:	ldr	w1, [x11, x2, lsl #2]
    1ad8:	add	x0, x27, w0, sxtw
    1adc:	sub	x2, x2, #0x1
    1ae0:	add	w1, w1, #0xf
    1ae4:	add	x1, x27, w1, sxtw
    1ae8:	ldrb	w1, [x1, #3724]
    1aec:	strb	w1, [x0, #3724]
    1af0:	cbnz	w2, 1ac8 <BZ2_decompress+0x1ac8>
    1af4:	ldr	w0, [x27, #7820]
    1af8:	sub	w0, w0, #0x1
    1afc:	str	w0, [x27, #7820]
    1b00:	add	x1, x27, w0, sxtw
    1b04:	strb	w3, [x1, #3724]
    1b08:	cbnz	w0, 18ec <BZ2_decompress+0x18ec>
    1b0c:	mov	x9, #0x1ec8                	// #7880
    1b10:	mov	x10, #0x1e7d                	// #7805
    1b14:	add	x6, x27, x9
    1b18:	add	x11, x27, x10
    1b1c:	mov	w2, #0xfff                 	// #4095
    1b20:	ldrsw	x0, [x6]
    1b24:	mov	x1, #0xe                   	// #14
    1b28:	add	x0, x0, #0xe8d
    1b2c:	add	x0, x27, x0
    1b30:	ldrb	w12, [x0, x1]
    1b34:	strb	w12, [x11, x1]
    1b38:	sub	x1, x1, #0x1
    1b3c:	cmn	x1, #0x2
    1b40:	b.ne	1b30 <BZ2_decompress+0x1b30>  // b.any
    1b44:	sub	w1, w2, #0xf
    1b48:	str	w1, [x6], #-4
    1b4c:	sub	w0, w2, #0x10
    1b50:	sub	x11, x11, #0x10
    1b54:	cmp	w2, #0xf0f
    1b58:	b.eq	18ec <BZ2_decompress+0x18ec>  // b.none
    1b5c:	mov	w2, w0
    1b60:	b	1b20 <BZ2_decompress+0x1b20>
    1b64:	ldrb	w13, [x11, x0]
    1b68:	strb	w13, [x12, x0]
    1b6c:	sub	x0, x0, #0x1
    1b70:	b	1aa8 <BZ2_decompress+0x1aa8>
    1b74:	ldr	x1, [x27, #3152]
    1b78:	str	w2, [x1, x0, lsl #2]
    1b7c:	b	191c <BZ2_decompress+0x191c>
    1b80:	ldr	x0, [x27]
    1b84:	ldr	w2, [x0, #8]
    1b88:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1b8c:	ldr	x3, [x0]
    1b90:	add	w1, w1, #0x8
    1b94:	ldr	w6, [x27, #32]
    1b98:	sub	w2, w2, #0x1
    1b9c:	ldrb	w11, [x3], #1
    1ba0:	orr	w6, w11, w6, lsl #8
    1ba4:	stp	w6, w1, [x27, #32]
    1ba8:	ldr	w1, [x0, #12]
    1bac:	str	x3, [x0]
    1bb0:	add	w1, w1, #0x1
    1bb4:	stp	w2, w1, [x0, #8]
    1bb8:	cbnz	w1, 19a0 <BZ2_decompress+0x19a0>
    1bbc:	ldr	w1, [x0, #16]
    1bc0:	add	w1, w1, #0x1
    1bc4:	str	w1, [x0, #16]
    1bc8:	b	19a0 <BZ2_decompress+0x19a0>
    1bcc:	ldr	x0, [x27]
    1bd0:	ldr	w2, [x0, #8]
    1bd4:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    1bd8:	ldr	x3, [x0]
    1bdc:	add	w1, w1, #0x8
    1be0:	ldr	w6, [x27, #32]
    1be4:	sub	w2, w2, #0x1
    1be8:	ldrb	w11, [x3], #1
    1bec:	orr	w6, w11, w6, lsl #8
    1bf0:	stp	w6, w1, [x27, #32]
    1bf4:	ldr	w1, [x0, #12]
    1bf8:	str	x3, [x0]
    1bfc:	add	w1, w1, #0x1
    1c00:	stp	w2, w1, [x0, #8]
    1c04:	cbnz	w1, 19f0 <BZ2_decompress+0x19f0>
    1c08:	ldr	w1, [x0, #16]
    1c0c:	add	w1, w1, #0x1
    1c10:	str	w1, [x0, #16]
    1c14:	b	19f0 <BZ2_decompress+0x19f0>
    1c18:	ldr	x1, [sp, #120]
    1c1c:	ldr	w0, [x1, x0]
    1c20:	sub	w0, w23, w0
    1c24:	cmp	w0, #0x101
    1c28:	b.hi	968 <BZ2_decompress+0x968>  // b.pmore
    1c2c:	ldr	x1, [sp, #128]
    1c30:	ldr	w0, [x1, w0, sxtw #2]
    1c34:	str	w0, [sp, #96]
    1c38:	ldr	w1, [sp, #96]
    1c3c:	ldr	w0, [sp, #160]
    1c40:	cmp	w0, w1
    1c44:	b.eq	1c60 <BZ2_decompress+0x1c60>  // b.none
    1c48:	cmp	w1, #0x1
    1c4c:	b.hi	187c <BZ2_decompress+0x187c>  // b.pmore
    1c50:	mov	w0, #0x1                   	// #1
    1c54:	mov	w20, #0xffffffff            	// #-1
    1c58:	str	w0, [sp, #112]
    1c5c:	b	1600 <BZ2_decompress+0x1600>
    1c60:	ldr	w0, [x27, #56]
    1c64:	tbnz	w0, #31, 968 <BZ2_decompress+0x968>
    1c68:	cmp	w0, w28
    1c6c:	b.ge	968 <BZ2_decompress+0x968>  // b.tcont
    1c70:	add	x0, x27, #0x44
    1c74:	mov	x1, #0x0                   	// #0
    1c78:	ldr	w2, [x0, x1, lsl #2]
    1c7c:	mov	w4, w1
    1c80:	tbnz	w2, #31, 968 <BZ2_decompress+0x968>
    1c84:	cmp	w2, w28
    1c88:	b.gt	968 <BZ2_decompress+0x968>
    1c8c:	add	x1, x1, #0x1
    1c90:	cmp	x1, #0x100
    1c94:	b.ne	1c78 <BZ2_decompress+0x1c78>  // b.any
    1c98:	add	x1, x27, #0x444
    1c9c:	str	wzr, [x27, #1096]
    1ca0:	ldr	w2, [x0]
    1ca4:	add	x0, x0, #0x4
    1ca8:	str	w2, [x0, #1028]
    1cac:	cmp	x1, x0
    1cb0:	b.ne	1ca0 <BZ2_decompress+0x1ca0>  // b.any
    1cb4:	add	x0, x27, #0x44c
    1cb8:	add	x6, x27, #0x84c
    1cbc:	ldp	w2, w1, [x0, #-4]
    1cc0:	add	w1, w1, w2
    1cc4:	str	w1, [x0], #4
    1cc8:	cmp	x6, x0
    1ccc:	b.ne	1cbc <BZ2_decompress+0x1cbc>  // b.any
    1cd0:	add	x2, x27, #0x448
    1cd4:	mov	x0, #0x0                   	// #0
    1cd8:	ldr	w1, [x2, x0, lsl #2]
    1cdc:	mov	w4, w0
    1ce0:	tbnz	w1, #31, 968 <BZ2_decompress+0x968>
    1ce4:	cmp	w1, w28
    1ce8:	b.gt	968 <BZ2_decompress+0x968>
    1cec:	add	x0, x0, #0x1
    1cf0:	cmp	x0, #0x101
    1cf4:	b.ne	1cd8 <BZ2_decompress+0x1cd8>  // b.any
    1cf8:	mov	x3, x2
    1cfc:	mov	x0, x2
    1d00:	mov	w4, #0x1                   	// #1
    1d04:	ldp	w11, w1, [x0]
    1d08:	cmp	w11, w1
    1d0c:	b.gt	968 <BZ2_decompress+0x968>
    1d10:	add	w4, w4, #0x1
    1d14:	add	x0, x0, #0x4
    1d18:	cmp	w4, #0x101
    1d1c:	b.ne	1d04 <BZ2_decompress+0x1d04>  // b.any
    1d20:	mov	w0, #0xffffffff            	// #-1
    1d24:	str	w0, [x27, #3184]
    1d28:	mov	w0, #0x2                   	// #2
    1d2c:	str	w0, [x27, #8]
    1d30:	ldr	w0, [x27, #52]
    1d34:	strb	wzr, [x27, #12]
    1d38:	str	wzr, [x27, #16]
    1d3c:	cmp	w0, #0x1
    1d40:	b.le	1d68 <BZ2_decompress+0x1d68>
    1d44:	adrp	x0, 0 <stderr>
    1d48:	stp	x6, x2, [sp, #168]
    1d4c:	ldr	x1, [x0]
    1d50:	adrp	x0, 0 <BZ2_decompress>
    1d54:	add	x0, x0, #0x0
    1d58:	str	x3, [sp, #184]
    1d5c:	bl	0 <fputs>
    1d60:	ldp	x6, x2, [sp, #168]
    1d64:	ldr	x3, [sp, #184]
    1d68:	ldrb	w0, [x27, #44]
    1d6c:	cbz	w0, 1fbc <BZ2_decompress+0x1fbc>
    1d70:	ldr	w0, [x3]
    1d74:	add	x3, x3, #0x4
    1d78:	str	w0, [x3, #1024]
    1d7c:	cmp	x6, x3
    1d80:	b.ne	1d70 <BZ2_decompress+0x1d70>  // b.any
    1d84:	mov	x1, #0x0                   	// #0
    1d88:	ldr	x6, [x27, #3160]
    1d8c:	lsl	x3, x1, #1
    1d90:	ldr	x8, [x27, #3168]
    1d94:	ldrb	w4, [x6, x3]
    1d98:	add	x4, x27, x4, lsl #2
    1d9c:	ldr	w0, [x4, #2124]
    1da0:	strh	w0, [x6, x3]
    1da4:	asr	w3, w1, #1
    1da8:	sxtw	x3, w3
    1dac:	asr	w0, w0, #16
    1db0:	ldrb	w6, [x8, x3]
    1db4:	tbnz	w1, #0, 1ec0 <BZ2_decompress+0x1ec0>
    1db8:	and	w6, w6, #0xfffffff0
    1dbc:	orr	w0, w6, w0
    1dc0:	strb	w0, [x8, x3]
    1dc4:	add	x1, x1, #0x1
    1dc8:	cmp	w28, w1
    1dcc:	ldr	w0, [x4, #2124]
    1dd0:	add	w0, w0, #0x1
    1dd4:	str	w0, [x4, #2124]
    1dd8:	b.gt	1d88 <BZ2_decompress+0x1d88>
    1ddc:	ldr	w0, [x27, #56]
    1de0:	ldr	x1, [x27, #3168]
    1de4:	asr	w3, w0, #1
    1de8:	ldrb	w8, [x1, w3, sxtw]
    1dec:	ubfiz	w1, w0, #2, #1
    1df0:	lsr	w8, w8, w1
    1df4:	ldr	x1, [x27, #3160]
    1df8:	ubfiz	w8, w8, #16, #4
    1dfc:	ldrh	w1, [x1, w0, sxtw #1]
    1e00:	orr	w22, w8, w1
    1e04:	ldr	x6, [x27, #3168]
    1e08:	asr	w3, w22, #1
    1e0c:	ldr	x1, [x27, #3160]
    1e10:	mov	w4, w22
    1e14:	ldrb	w8, [x6, w3, sxtw]
    1e18:	sbfiz	x12, x22, #1, #32
    1e1c:	sxtw	x11, w3
    1e20:	ubfiz	w3, w22, #2, #1
    1e24:	tst	x4, #0x1
    1e28:	lsr	w8, w8, w3
    1e2c:	ldrh	w3, [x1, w4, sxtw #1]
    1e30:	strh	w0, [x1, x12]
    1e34:	ubfiz	w8, w8, #16, #4
    1e38:	orr	w22, w8, w3
    1e3c:	asr	w1, w0, #16
    1e40:	ldrb	w12, [x6, x11]
    1e44:	and	w3, w12, #0xfffffff0
    1e48:	orr	w0, w3, w0, asr #16
    1e4c:	and	w3, w0, #0xff
    1e50:	and	w0, w12, #0xf
    1e54:	orr	w0, w0, w1, lsl #4
    1e58:	and	w0, w0, #0xff
    1e5c:	csel	w0, w0, w3, ne  // ne = any
    1e60:	strb	w0, [x6, x11]
    1e64:	mov	w0, w4
    1e68:	ldr	w1, [x27, #56]
    1e6c:	cmp	w1, w4
    1e70:	b.ne	1e04 <BZ2_decompress+0x1e04>  // b.any
    1e74:	ldr	w1, [x27, #40]
    1e78:	mov	w3, #0x86a0                	// #34464
    1e7c:	movk	w3, #0x1, lsl #16
    1e80:	str	w4, [x27, #60]
    1e84:	str	wzr, [x27, #1092]
    1e88:	mul	w1, w1, w3
    1e8c:	ldrb	w3, [x27, #20]
    1e90:	cbz	w3, 1f60 <BZ2_decompress+0x1f60>
    1e94:	str	xzr, [x27, #24]
    1e98:	cmp	w4, w1
    1e9c:	b.cc	1ecc <BZ2_decompress+0x1ecc>  // b.lo, b.ul, b.last
    1ea0:	mov	w0, #0x1                   	// #1
    1ea4:	ldp	x19, x20, [sp, #16]
    1ea8:	ldp	x21, x22, [sp, #32]
    1eac:	ldp	x23, x24, [sp, #48]
    1eb0:	ldp	x25, x26, [sp, #64]
    1eb4:	ldp	x27, x28, [sp, #80]
    1eb8:	ldp	x29, x30, [sp], #208
    1ebc:	ret
    1ec0:	and	w6, w6, #0xf
    1ec4:	orr	w0, w6, w0, lsl #4
    1ec8:	b	1dc0 <BZ2_decompress+0x1dc0>
    1ecc:	mov	x1, x2
    1ed0:	str	w4, [sp, #168]
    1ed4:	bl	0 <BZ2_indexIntoF>
    1ed8:	str	w0, [x27, #64]
    1edc:	ldr	w2, [x27, #60]
    1ee0:	ldr	x3, [x27, #3168]
    1ee4:	lsr	w1, w2, #1
    1ee8:	ldr	w4, [sp, #168]
    1eec:	ldrb	w1, [x3, x1]
    1ef0:	ubfiz	w3, w2, #2, #1
    1ef4:	lsr	w1, w1, w3
    1ef8:	ldr	x3, [x27, #3160]
    1efc:	ubfiz	w1, w1, #16, #4
    1f00:	ldrh	w2, [x3, w2, uxtw #1]
    1f04:	orr	w1, w1, w2
    1f08:	str	w1, [x27, #60]
    1f0c:	ldr	w1, [x27, #1092]
    1f10:	add	w1, w1, #0x1
    1f14:	str	w1, [x27, #1092]
    1f18:	ldr	w1, [x27, #24]
    1f1c:	cbnz	w1, 1f3c <BZ2_decompress+0x1f3c>
    1f20:	ldr	w1, [x27, #28]
    1f24:	adrp	x2, 0 <BZ2_rNums>
    1f28:	add	x2, x2, #0x0
    1f2c:	cmp	w1, #0x1ff
    1f30:	ldr	w2, [x2, w1, sxtw #2]
    1f34:	csinc	w1, wzr, w1, eq  // eq = none
    1f38:	stp	w2, w1, [x27, #24]
    1f3c:	ldr	w1, [x27, #24]
    1f40:	sub	w1, w1, #0x1
    1f44:	str	w1, [x27, #24]
    1f48:	cmp	w1, #0x1
    1f4c:	cset	w1, eq  // eq = none
    1f50:	eor	w0, w1, w0
    1f54:	str	w0, [x27, #64]
    1f58:	mov	w0, #0x0                   	// #0
    1f5c:	b	594 <BZ2_decompress+0x594>
    1f60:	cmp	w4, w1
    1f64:	b.cs	1ea0 <BZ2_decompress+0x1ea0>  // b.hs, b.nlast
    1f68:	mov	x1, x2
    1f6c:	str	w4, [sp, #168]
    1f70:	bl	0 <BZ2_indexIntoF>
    1f74:	str	w0, [x27, #64]
    1f78:	ldr	w1, [x27, #60]
    1f7c:	ldr	x2, [x27, #3168]
    1f80:	lsr	w0, w1, #1
    1f84:	ldrb	w0, [x2, x0]
    1f88:	ubfiz	w2, w1, #2, #1
    1f8c:	lsr	w0, w0, w2
    1f90:	ldr	x2, [x27, #3160]
    1f94:	ubfiz	w0, w0, #16, #4
    1f98:	ldrh	w1, [x2, w1, uxtw #1]
    1f9c:	orr	w0, w0, w1
    1fa0:	str	w0, [x27, #60]
    1fa4:	ldr	w0, [x27, #1092]
    1fa8:	add	w0, w0, #0x1
    1fac:	str	w0, [x27, #1092]
    1fb0:	ldr	w4, [sp, #168]
    1fb4:	mov	w0, #0x0                   	// #0
    1fb8:	b	594 <BZ2_decompress+0x594>
    1fbc:	ldr	x1, [x27, #3152]
    1fc0:	mov	x0, #0x0                   	// #0
    1fc4:	ldr	w2, [x1, x0, lsl #2]
    1fc8:	add	x2, x27, w2, uxtb #2
    1fcc:	ldrsw	x3, [x2, #1096]
    1fd0:	lsl	x3, x3, #2
    1fd4:	ldr	w4, [x1, x3]
    1fd8:	orr	w4, w4, w0, lsl #8
    1fdc:	str	w4, [x1, x3]
    1fe0:	add	x0, x0, #0x1
    1fe4:	ldr	w3, [x2, #1096]
    1fe8:	cmp	w28, w0
    1fec:	add	w3, w3, #0x1
    1ff0:	str	w3, [x2, #1096]
    1ff4:	b.gt	1fc4 <BZ2_decompress+0x1fc4>
    1ff8:	ldrsw	x0, [x27, #56]
    1ffc:	mov	w3, #0x86a0                	// #34464
    2000:	ldr	w2, [x27, #40]
    2004:	movk	w3, #0x1, lsl #16
    2008:	ldr	w0, [x1, x0, lsl #2]
    200c:	mul	w2, w2, w3
    2010:	ldrb	w3, [x27, #20]
    2014:	str	wzr, [x27, #1092]
    2018:	lsr	w0, w0, #8
    201c:	str	w0, [x27, #60]
    2020:	cbz	w3, 2074 <BZ2_decompress+0x2074>
    2024:	str	xzr, [x27, #24]
    2028:	cmp	w0, w2
    202c:	b.cs	1ea0 <BZ2_decompress+0x1ea0>  // b.hs, b.nlast
    2030:	ubfiz	x0, x0, #2, #24
    2034:	mov	w2, #0x1                   	// #1
    2038:	ldr	w0, [x1, x0]
    203c:	str	w2, [x27, #1092]
    2040:	lsr	w1, w0, #8
    2044:	str	w1, [x27, #60]
    2048:	adrp	x1, 0 <BZ2_rNums>
    204c:	and	w0, w0, #0xff
    2050:	ldr	w1, [x1]
    2054:	sub	w1, w1, #0x1
    2058:	stp	w1, w2, [x27, #24]
    205c:	cmp	w1, w2
    2060:	cset	w1, eq  // eq = none
    2064:	eor	w0, w0, w1
    2068:	str	w0, [x27, #64]
    206c:	mov	w4, w28
    2070:	b	1f58 <BZ2_decompress+0x1f58>
    2074:	cmp	w0, w2
    2078:	b.cs	1ea0 <BZ2_decompress+0x1ea0>  // b.hs, b.nlast
    207c:	ubfiz	x0, x0, #2, #24
    2080:	ldr	w0, [x1, x0]
    2084:	and	w1, w0, #0xff
    2088:	lsr	w0, w0, #8
    208c:	stp	w0, w1, [x27, #60]
    2090:	mov	w0, #0x1                   	// #1
    2094:	str	w0, [x27, #1092]
    2098:	b	206c <BZ2_decompress+0x206c>
    209c:	ldr	x0, [x27]
    20a0:	ldr	w2, [x0, #8]
    20a4:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    20a8:	ldr	x3, [x0]
    20ac:	add	w1, w1, #0x8
    20b0:	ldr	w6, [x27, #32]
    20b4:	sub	w2, w2, #0x1
    20b8:	ldrb	w11, [x3], #1
    20bc:	orr	w6, w11, w6, lsl #8
    20c0:	stp	w6, w1, [x27, #32]
    20c4:	ldr	w1, [x0, #12]
    20c8:	str	x3, [x0]
    20cc:	add	w1, w1, #0x1
    20d0:	stp	w2, w1, [x0, #8]
    20d4:	cbnz	w1, 3cc <BZ2_decompress+0x3cc>
    20d8:	ldr	w1, [x0, #16]
    20dc:	add	w1, w1, #0x1
    20e0:	str	w1, [x0, #16]
    20e4:	b	3cc <BZ2_decompress+0x3cc>
    20e8:	ldr	x0, [x27]
    20ec:	ldr	w2, [x0, #8]
    20f0:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    20f4:	ldr	x3, [x0]
    20f8:	add	w1, w1, #0x8
    20fc:	ldr	w6, [x27, #32]
    2100:	sub	w2, w2, #0x1
    2104:	ldrb	w11, [x3], #1
    2108:	orr	w6, w11, w6, lsl #8
    210c:	stp	w6, w1, [x27, #32]
    2110:	ldr	w1, [x0, #12]
    2114:	str	x3, [x0]
    2118:	add	w1, w1, #0x1
    211c:	stp	w2, w1, [x0, #8]
    2120:	cbnz	w1, 3fc <BZ2_decompress+0x3fc>
    2124:	ldr	w1, [x0, #16]
    2128:	add	w1, w1, #0x1
    212c:	str	w1, [x0, #16]
    2130:	b	3fc <BZ2_decompress+0x3fc>
    2134:	ldr	x0, [x27]
    2138:	ldr	w2, [x0, #8]
    213c:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    2140:	ldr	x3, [x0]
    2144:	add	w1, w1, #0x8
    2148:	ldr	w6, [x27, #32]
    214c:	sub	w2, w2, #0x1
    2150:	ldrb	w11, [x3], #1
    2154:	orr	w6, w11, w6, lsl #8
    2158:	stp	w6, w1, [x27, #32]
    215c:	ldr	w1, [x0, #12]
    2160:	str	x3, [x0]
    2164:	add	w1, w1, #0x1
    2168:	stp	w2, w1, [x0, #8]
    216c:	cbnz	w1, 42c <BZ2_decompress+0x42c>
    2170:	ldr	w1, [x0, #16]
    2174:	add	w1, w1, #0x1
    2178:	str	w1, [x0, #16]
    217c:	b	42c <BZ2_decompress+0x42c>
    2180:	ldr	x0, [x27]
    2184:	ldr	w2, [x0, #8]
    2188:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    218c:	ldr	x3, [x0]
    2190:	add	w1, w1, #0x8
    2194:	ldr	w6, [x27, #32]
    2198:	sub	w2, w2, #0x1
    219c:	ldrb	w11, [x3], #1
    21a0:	orr	w6, w11, w6, lsl #8
    21a4:	stp	w6, w1, [x27, #32]
    21a8:	ldr	w1, [x0, #12]
    21ac:	str	x3, [x0]
    21b0:	add	w1, w1, #0x1
    21b4:	stp	w2, w1, [x0, #8]
    21b8:	cbnz	w1, 45c <BZ2_decompress+0x45c>
    21bc:	ldr	w1, [x0, #16]
    21c0:	add	w1, w1, #0x1
    21c4:	str	w1, [x0, #16]
    21c8:	b	45c <BZ2_decompress+0x45c>
    21cc:	ldr	x0, [x27]
    21d0:	ldr	w2, [x0, #8]
    21d4:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    21d8:	ldr	x3, [x0]
    21dc:	add	w1, w1, #0x8
    21e0:	ldr	w6, [x27, #32]
    21e4:	sub	w2, w2, #0x1
    21e8:	ldrb	w11, [x3], #1
    21ec:	orr	w6, w11, w6, lsl #8
    21f0:	stp	w6, w1, [x27, #32]
    21f4:	ldr	w1, [x0, #12]
    21f8:	str	x3, [x0]
    21fc:	add	w1, w1, #0x1
    2200:	stp	w2, w1, [x0, #8]
    2204:	cbnz	w1, 48c <BZ2_decompress+0x48c>
    2208:	ldr	w1, [x0, #16]
    220c:	add	w1, w1, #0x1
    2210:	str	w1, [x0, #16]
    2214:	b	48c <BZ2_decompress+0x48c>
    2218:	ldr	x0, [x27]
    221c:	ldr	w2, [x0, #8]
    2220:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    2224:	ldr	x3, [x0]
    2228:	add	w1, w1, #0x8
    222c:	ldr	w6, [x27, #32]
    2230:	sub	w2, w2, #0x1
    2234:	ldrb	w11, [x3], #1
    2238:	orr	w6, w11, w6, lsl #8
    223c:	stp	w6, w1, [x27, #32]
    2240:	ldr	w1, [x0, #12]
    2244:	str	x3, [x0]
    2248:	add	w1, w1, #0x1
    224c:	stp	w2, w1, [x0, #8]
    2250:	cbnz	w1, 4c0 <BZ2_decompress+0x4c0>
    2254:	ldr	w1, [x0, #16]
    2258:	add	w1, w1, #0x1
    225c:	str	w1, [x0, #16]
    2260:	b	4c0 <BZ2_decompress+0x4c0>
    2264:	ldr	x0, [x27]
    2268:	ldr	w2, [x0, #8]
    226c:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    2270:	ldr	x3, [x0]
    2274:	add	w1, w1, #0x8
    2278:	ldr	w6, [x27, #32]
    227c:	sub	w2, w2, #0x1
    2280:	ldrb	w11, [x3], #1
    2284:	orr	w6, w11, w6, lsl #8
    2288:	stp	w6, w1, [x27, #32]
    228c:	ldr	w1, [x0, #12]
    2290:	str	x3, [x0]
    2294:	add	w1, w1, #0x1
    2298:	stp	w2, w1, [x0, #8]
    229c:	cbnz	w1, 4f4 <BZ2_decompress+0x4f4>
    22a0:	ldr	w1, [x0, #16]
    22a4:	add	w1, w1, #0x1
    22a8:	str	w1, [x0, #16]
    22ac:	b	4f4 <BZ2_decompress+0x4f4>
    22b0:	ldr	x0, [x27]
    22b4:	ldr	w2, [x0, #8]
    22b8:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    22bc:	ldr	x3, [x0]
    22c0:	add	w1, w1, #0x8
    22c4:	ldr	w6, [x27, #32]
    22c8:	sub	w2, w2, #0x1
    22cc:	ldrb	w11, [x3], #1
    22d0:	orr	w6, w11, w6, lsl #8
    22d4:	stp	w6, w1, [x27, #32]
    22d8:	ldr	w1, [x0, #12]
    22dc:	str	x3, [x0]
    22e0:	add	w1, w1, #0x1
    22e4:	stp	w2, w1, [x0, #8]
    22e8:	cbnz	w1, 528 <BZ2_decompress+0x528>
    22ec:	ldr	w1, [x0, #16]
    22f0:	add	w1, w1, #0x1
    22f4:	str	w1, [x0, #16]
    22f8:	b	528 <BZ2_decompress+0x528>
    22fc:	ldr	x0, [x27]
    2300:	ldr	w2, [x0, #8]
    2304:	cbz	w2, 1f58 <BZ2_decompress+0x1f58>
    2308:	ldr	x3, [x0]
    230c:	add	w1, w1, #0x8
    2310:	ldr	w6, [x27, #32]
    2314:	sub	w2, w2, #0x1
    2318:	ldrb	w11, [x3], #1
    231c:	orr	w6, w11, w6, lsl #8
    2320:	stp	w6, w1, [x27, #32]
    2324:	ldr	w1, [x0, #12]
    2328:	str	x3, [x0]
    232c:	add	w1, w1, #0x1
    2330:	stp	w2, w1, [x0, #8]
    2334:	cbnz	w1, 55c <BZ2_decompress+0x55c>
    2338:	ldr	w1, [x0, #16]
    233c:	add	w1, w1, #0x1
    2340:	str	w1, [x0, #16]
    2344:	b	55c <BZ2_decompress+0x55c>
    2348:	mov	w0, #0xfa1                 	// #4001
    234c:	str	w4, [sp, #168]
    2350:	bl	0 <BZ2_bz__AssertH__fail>
    2354:	mov	w0, #0xfa2                 	// #4002
    2358:	bl	0 <BZ2_bz__AssertH__fail>
    235c:	b	1fb0 <BZ2_decompress+0x1fb0>
    2360:	mov	w0, #0xfffffffd            	// #-3
    2364:	b	594 <BZ2_decompress+0x594>
    2368:	mov	w19, #0x0                   	// #0
    236c:	b	968 <BZ2_decompress+0x968>
    2370:	mov	w28, #0x0                   	// #0
    2374:	mov	w25, #0x0                   	// #0
    2378:	mov	w26, #0x0                   	// #0
    237c:	mov	w4, #0x100                 	// #256
    2380:	b	968 <BZ2_decompress+0x968>
    2384:	str	w2, [sp, #112]
    2388:	b	968 <BZ2_decompress+0x968>

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <add_pair_to_block>:
       0:	ldp	w3, w2, [x0, #92]
       4:	adrp	x6, 0 <BZ2_crc32Table>
       8:	add	x6, x6, #0x0
       c:	mov	w5, #0x0                   	// #0
      10:	and	w1, w3, #0xff
      14:	and	w8, w3, #0xff
      18:	cmp	w2, w5
      1c:	b.gt	60 <add_pair_to_block+0x60>
      20:	add	x3, x0, w3, uxtw
      24:	mov	w5, #0x1                   	// #1
      28:	cmp	w2, #0x2
      2c:	strb	w5, [x3, #128]
      30:	ldrsw	x3, [x0, #108]
      34:	ldr	x4, [x0, #64]
      38:	b.eq	7c <add_pair_to_block+0x7c>  // b.none
      3c:	cmp	w2, #0x3
      40:	b.eq	98 <add_pair_to_block+0x98>  // b.none
      44:	cmp	w2, #0x1
      48:	b.ne	b4 <add_pair_to_block+0xb4>  // b.any
      4c:	strb	w1, [x4, x3]
      50:	ldr	w1, [x0, #108]
      54:	add	w1, w1, #0x1
      58:	str	w1, [x0, #108]
      5c:	ret
      60:	ldr	w4, [x0, #648]
      64:	add	w5, w5, #0x1
      68:	eor	w7, w8, w4, lsr #24
      6c:	ldr	w7, [x6, x7, lsl #2]
      70:	eor	w4, w7, w4, lsl #8
      74:	str	w4, [x0, #648]
      78:	b	18 <add_pair_to_block+0x18>
      7c:	strb	w1, [x4, x3]
      80:	ldr	w2, [x0, #108]
      84:	ldr	x3, [x0, #64]
      88:	add	w2, w2, #0x1
      8c:	str	w2, [x0, #108]
      90:	strb	w1, [x3, w2, sxtw]
      94:	b	50 <add_pair_to_block+0x50>
      98:	strb	w1, [x4, x3]
      9c:	ldr	w2, [x0, #108]
      a0:	ldr	x3, [x0, #64]
      a4:	add	w2, w2, #0x1
      a8:	str	w2, [x0, #108]
      ac:	strb	w1, [x3, w2, sxtw]
      b0:	b	80 <add_pair_to_block+0x80>
      b4:	sub	w2, w2, #0x4
      b8:	add	x2, x0, w2, sxtw
      bc:	strb	w5, [x2, #128]
      c0:	strb	w1, [x4, x3]
      c4:	ldr	w2, [x0, #108]
      c8:	ldr	x3, [x0, #64]
      cc:	add	w2, w2, #0x1
      d0:	str	w2, [x0, #108]
      d4:	strb	w1, [x3, w2, sxtw]
      d8:	ldr	w2, [x0, #108]
      dc:	ldr	x3, [x0, #64]
      e0:	add	w2, w2, #0x1
      e4:	str	w2, [x0, #108]
      e8:	strb	w1, [x3, w2, sxtw]
      ec:	ldr	w2, [x0, #108]
      f0:	ldr	x3, [x0, #64]
      f4:	add	w2, w2, #0x1
      f8:	str	w2, [x0, #108]
      fc:	strb	w1, [x3, w2, sxtw]
     100:	ldr	w1, [x0, #108]
     104:	ldr	x3, [x0, #64]
     108:	add	w1, w1, #0x1
     10c:	ldr	w2, [x0, #96]
     110:	str	w1, [x0, #108]
     114:	sub	w2, w2, #0x4
     118:	strb	w2, [x3, w1, sxtw]
     11c:	b	50 <add_pair_to_block+0x50>

0000000000000120 <default_bzfree>:
     120:	mov	x0, x1
     124:	cbz	x1, 12c <default_bzfree+0xc>
     128:	b	0 <free>
     12c:	ret

0000000000000130 <default_bzalloc>:
     130:	mul	w0, w1, w2
     134:	sxtw	x0, w0
     138:	b	0 <malloc>

000000000000013c <handle_compress.isra.0>:
     13c:	stp	x29, x30, [sp, #-48]!
     140:	mov	x29, sp
     144:	stp	x19, x20, [sp, #16]
     148:	mov	x19, x0
     14c:	mov	w20, #0x0                   	// #0
     150:	stp	x21, x22, [sp, #32]
     154:	adrp	x21, 0 <BZ2_crc32Table>
     158:	add	x21, x21, #0x0
     15c:	mov	w22, #0x0                   	// #0
     160:	ldr	w0, [x19, #12]
     164:	cmp	w0, #0x1
     168:	b.ne	27c <handle_compress.isra.0+0x140>  // b.any
     16c:	mov	w2, #0x0                   	// #0
     170:	ldr	x3, [x19]
     174:	ldp	w1, w0, [x19, #116]
     178:	ldr	w4, [x3, #32]
     17c:	cbz	w4, 1e4 <handle_compress.isra.0+0xa8>
     180:	cmp	w0, w1
     184:	b.ge	1e4 <handle_compress.isra.0+0xa8>  // b.tcont
     188:	ldr	x2, [x19, #80]
     18c:	ldr	x1, [x3, #24]
     190:	ldrb	w0, [x2, w0, sxtw]
     194:	mov	w2, #0x1                   	// #1
     198:	strb	w0, [x1]
     19c:	ldr	w0, [x19, #120]
     1a0:	add	w0, w0, #0x1
     1a4:	str	w0, [x19, #120]
     1a8:	ldr	x0, [x19]
     1ac:	ldr	w1, [x0, #32]
     1b0:	sub	w1, w1, #0x1
     1b4:	str	w1, [x0, #32]
     1b8:	ldr	x1, [x0, #24]
     1bc:	add	x1, x1, #0x1
     1c0:	str	x1, [x0, #24]
     1c4:	ldr	w1, [x0, #36]
     1c8:	add	w1, w1, #0x1
     1cc:	str	w1, [x0, #36]
     1d0:	cbnz	w1, 170 <handle_compress.isra.0+0x34>
     1d4:	ldr	w1, [x0, #40]
     1d8:	add	w1, w1, w2
     1dc:	str	w1, [x0, #40]
     1e0:	b	170 <handle_compress.isra.0+0x34>
     1e4:	orr	w22, w22, w2
     1e8:	cmp	w0, w1
     1ec:	b.lt	4e4 <handle_compress.isra.0+0x3a8>  // b.tstop
     1f0:	ldr	w1, [x19, #8]
     1f4:	cmp	w1, #0x4
     1f8:	b.ne	21c <handle_compress.isra.0+0xe0>  // b.any
     1fc:	ldr	w0, [x19, #16]
     200:	cbnz	w0, 21c <handle_compress.isra.0+0xe0>
     204:	ldr	w0, [x19, #92]
     208:	cmp	w0, #0xff
     20c:	b.hi	4e4 <handle_compress.isra.0+0x3a8>  // b.pmore
     210:	ldr	w0, [x19, #96]
     214:	cmp	w0, #0x0
     218:	b.le	4e4 <handle_compress.isra.0+0x3a8>
     21c:	mov	w0, #0xffffffff            	// #-1
     220:	add	x2, x19, #0x180
     224:	str	w0, [x19, #648]
     228:	add	x0, x19, #0x80
     22c:	str	wzr, [x19, #108]
     230:	stur	xzr, [x19, #116]
     234:	strb	wzr, [x0], #1
     238:	cmp	x2, x0
     23c:	b.ne	234 <handle_compress.isra.0+0xf8>  // b.any
     240:	ldr	w0, [x19, #660]
     244:	cmp	w1, #0x3
     248:	add	w0, w0, #0x1
     24c:	str	w0, [x19, #660]
     250:	mov	w0, #0x2                   	// #2
     254:	str	w0, [x19, #12]
     258:	b.ne	27c <handle_compress.isra.0+0x140>  // b.any
     25c:	ldr	w0, [x19, #16]
     260:	cbnz	w0, 27c <handle_compress.isra.0+0x140>
     264:	ldr	w0, [x19, #92]
     268:	cmp	w0, #0xff
     26c:	b.hi	4e4 <handle_compress.isra.0+0x3a8>  // b.pmore
     270:	ldr	w0, [x19, #96]
     274:	cmp	w0, #0x0
     278:	b.le	4e4 <handle_compress.isra.0+0x3a8>
     27c:	ldr	w0, [x19, #12]
     280:	cmp	w0, #0x2
     284:	b.ne	160 <handle_compress.isra.0+0x24>  // b.any
     288:	ldr	w0, [x19, #8]
     28c:	mov	w1, #0x0                   	// #0
     290:	mov	w10, #0x1                   	// #1
     294:	cmp	w0, #0x2
     298:	b.ne	37c <handle_compress.isra.0+0x240>  // b.any
     29c:	ldp	w4, w0, [x19, #108]
     2a0:	cmp	w4, w0
     2a4:	b.ge	470 <handle_compress.isra.0+0x334>  // b.tcont
     2a8:	ldr	x0, [x19]
     2ac:	ldr	w2, [x0, #8]
     2b0:	cbz	w2, 470 <handle_compress.isra.0+0x334>
     2b4:	ldr	x0, [x0]
     2b8:	ldr	w1, [x19, #92]
     2bc:	ldrb	w9, [x0]
     2c0:	ldr	w0, [x19, #96]
     2c4:	cmp	w9, w1
     2c8:	b.eq	34c <handle_compress.isra.0+0x210>  // b.none
     2cc:	cmp	w0, #0x1
     2d0:	b.ne	360 <handle_compress.isra.0+0x224>  // b.any
     2d4:	ldr	w3, [x19, #648]
     2d8:	and	w2, w1, #0xff
     2dc:	eor	w2, w2, w3, lsr #24
     2e0:	ldr	w2, [x21, x2, lsl #2]
     2e4:	eor	w3, w2, w3, lsl #8
     2e8:	add	x2, x19, w1, uxtw
     2ec:	str	w3, [x19, #648]
     2f0:	strb	w0, [x2, #128]
     2f4:	ldr	x0, [x19, #64]
     2f8:	strb	w1, [x0, w4, sxtw]
     2fc:	str	w9, [x19, #92]
     300:	ldr	w0, [x19, #108]
     304:	add	w0, w0, #0x1
     308:	str	w0, [x19, #108]
     30c:	ldr	x0, [x19]
     310:	ldr	x1, [x0]
     314:	ldr	w2, [x0, #12]
     318:	add	x1, x1, #0x1
     31c:	str	x1, [x0]
     320:	ldr	w1, [x0, #8]
     324:	add	w2, w2, #0x1
     328:	str	w2, [x0, #12]
     32c:	sub	w1, w1, #0x1
     330:	str	w1, [x0, #8]
     334:	mov	w1, #0x1                   	// #1
     338:	cbnz	w2, 29c <handle_compress.isra.0+0x160>
     33c:	ldr	w2, [x0, #16]
     340:	add	w2, w2, w1
     344:	str	w2, [x0, #16]
     348:	b	29c <handle_compress.isra.0+0x160>
     34c:	cmp	w0, #0xff
     350:	b.ne	370 <handle_compress.isra.0+0x234>  // b.any
     354:	mov	x0, x19
     358:	bl	0 <add_pair_to_block>
     35c:	b	368 <handle_compress.isra.0+0x22c>
     360:	cmp	w1, #0xff
     364:	b.ls	354 <handle_compress.isra.0+0x218>  // b.plast
     368:	stp	w9, w10, [x19, #92]
     36c:	b	30c <handle_compress.isra.0+0x1d0>
     370:	add	w0, w0, #0x1
     374:	str	w0, [x19, #96]
     378:	b	30c <handle_compress.isra.0+0x1d0>
     37c:	ldp	w4, w0, [x19, #108]
     380:	cmp	w4, w0
     384:	b.ge	470 <handle_compress.isra.0+0x334>  // b.tcont
     388:	ldr	x0, [x19]
     38c:	ldr	w2, [x0, #8]
     390:	cbz	w2, 470 <handle_compress.isra.0+0x334>
     394:	ldr	w2, [x19, #16]
     398:	cbz	w2, 470 <handle_compress.isra.0+0x334>
     39c:	ldr	x0, [x0]
     3a0:	ldr	w1, [x19, #92]
     3a4:	ldrb	w9, [x0]
     3a8:	ldr	w0, [x19, #96]
     3ac:	cmp	w9, w1
     3b0:	b.eq	440 <handle_compress.isra.0+0x304>  // b.none
     3b4:	cmp	w0, #0x1
     3b8:	b.ne	454 <handle_compress.isra.0+0x318>  // b.any
     3bc:	ldr	w3, [x19, #648]
     3c0:	and	w2, w1, #0xff
     3c4:	eor	w2, w2, w3, lsr #24
     3c8:	ldr	w2, [x21, x2, lsl #2]
     3cc:	eor	w3, w2, w3, lsl #8
     3d0:	add	x2, x19, w1, uxtw
     3d4:	str	w3, [x19, #648]
     3d8:	strb	w0, [x2, #128]
     3dc:	ldr	x0, [x19, #64]
     3e0:	strb	w1, [x0, w4, sxtw]
     3e4:	str	w9, [x19, #92]
     3e8:	ldr	w0, [x19, #108]
     3ec:	add	w0, w0, #0x1
     3f0:	str	w0, [x19, #108]
     3f4:	ldr	x0, [x19]
     3f8:	ldr	x1, [x0]
     3fc:	add	x1, x1, #0x1
     400:	str	x1, [x0]
     404:	ldr	w1, [x0, #8]
     408:	sub	w1, w1, #0x1
     40c:	str	w1, [x0, #8]
     410:	ldr	w1, [x0, #12]
     414:	add	w1, w1, #0x1
     418:	str	w1, [x0, #12]
     41c:	cbnz	w1, 42c <handle_compress.isra.0+0x2f0>
     420:	ldr	w1, [x0, #16]
     424:	add	w1, w1, #0x1
     428:	str	w1, [x0, #16]
     42c:	ldr	w0, [x19, #16]
     430:	mov	w1, #0x1                   	// #1
     434:	sub	w0, w0, #0x1
     438:	str	w0, [x19, #16]
     43c:	b	37c <handle_compress.isra.0+0x240>
     440:	cmp	w0, #0xff
     444:	b.ne	464 <handle_compress.isra.0+0x328>  // b.any
     448:	mov	x0, x19
     44c:	bl	0 <add_pair_to_block>
     450:	b	45c <handle_compress.isra.0+0x320>
     454:	cmp	w1, #0xff
     458:	b.ls	448 <handle_compress.isra.0+0x30c>  // b.plast
     45c:	stp	w9, w10, [x19, #92]
     460:	b	3f4 <handle_compress.isra.0+0x2b8>
     464:	add	w0, w0, #0x1
     468:	str	w0, [x19, #96]
     46c:	b	3f4 <handle_compress.isra.0+0x2b8>
     470:	ldr	w0, [x19, #8]
     474:	orr	w20, w20, w1
     478:	cmp	w0, #0x2
     47c:	b.eq	4c4 <handle_compress.isra.0+0x388>  // b.none
     480:	ldr	w0, [x19, #16]
     484:	cbnz	w0, 4c4 <handle_compress.isra.0+0x388>
     488:	ldr	w0, [x19, #92]
     48c:	cmp	w0, #0xff
     490:	b.hi	49c <handle_compress.isra.0+0x360>  // b.pmore
     494:	mov	x0, x19
     498:	bl	0 <add_pair_to_block>
     49c:	mov	x0, #0x100                 	// #256
     4a0:	stur	x0, [x19, #92]
     4a4:	ldr	w0, [x19, #8]
     4a8:	cmp	w0, #0x4
     4ac:	cset	w1, eq  // eq = none
     4b0:	mov	x0, x19
     4b4:	bl	0 <BZ2_compressBlock>
     4b8:	mov	w0, #0x1                   	// #1
     4bc:	str	w0, [x19, #12]
     4c0:	b	160 <handle_compress.isra.0+0x24>
     4c4:	ldp	w1, w0, [x19, #108]
     4c8:	cmp	w1, w0
     4cc:	b.lt	4d8 <handle_compress.isra.0+0x39c>  // b.tstop
     4d0:	mov	w1, #0x0                   	// #0
     4d4:	b	4b0 <handle_compress.isra.0+0x374>
     4d8:	ldr	x0, [x19]
     4dc:	ldr	w0, [x0, #8]
     4e0:	cbnz	w0, 160 <handle_compress.isra.0+0x24>
     4e4:	orr	w20, w20, w22
     4e8:	cmp	w20, #0x0
     4ec:	cset	w0, ne  // ne = any
     4f0:	ldp	x19, x20, [sp, #16]
     4f4:	ldp	x21, x22, [sp, #32]
     4f8:	ldp	x29, x30, [sp], #48
     4fc:	ret

0000000000000500 <BZ2_bz__AssertH__fail>:
     500:	stp	x29, x30, [sp, #-32]!
     504:	mov	w2, w0
     508:	adrp	x3, 0 <add_pair_to_block>
     50c:	mov	x29, sp
     510:	stp	x19, x20, [sp, #16]
     514:	adrp	x20, 0 <stderr>
     518:	mov	w19, w0
     51c:	ldr	x0, [x20]
     520:	add	x3, x3, #0x0
     524:	adrp	x1, 0 <add_pair_to_block>
     528:	add	x1, x1, #0x0
     52c:	bl	0 <fprintf>
     530:	cmp	w19, #0x3ef
     534:	b.ne	548 <BZ2_bz__AssertH__fail+0x48>  // b.any
     538:	ldr	x1, [x20]
     53c:	adrp	x0, 0 <add_pair_to_block>
     540:	add	x0, x0, #0x0
     544:	bl	0 <fputs>
     548:	mov	w0, #0x3                   	// #3
     54c:	bl	0 <exit>

0000000000000550 <BZ2_bzCompressInit>:
     550:	stp	x29, x30, [sp, #-64]!
     554:	mov	x29, sp
     558:	stp	x19, x20, [sp, #16]
     55c:	mov	x20, x0
     560:	cmp	x20, #0x0
     564:	stp	x21, x22, [sp, #32]
     568:	sub	w0, w1, #0x1
     56c:	ccmp	w0, #0x8, #0x2, ne  // ne = any
     570:	stp	x23, x24, [sp, #48]
     574:	b.hi	70c <BZ2_bzCompressInit+0x1bc>  // b.pmore
     578:	cmp	w3, #0xfa
     57c:	b.hi	70c <BZ2_bzCompressInit+0x1bc>  // b.pmore
     580:	mov	w0, #0x1e                  	// #30
     584:	cmp	w3, #0x0
     588:	csel	w21, w3, w0, ne  // ne = any
     58c:	mov	w23, w1
     590:	ldr	x0, [x20, #56]
     594:	mov	w24, w2
     598:	cbnz	x0, 5a8 <BZ2_bzCompressInit+0x58>
     59c:	adrp	x0, 0 <add_pair_to_block>
     5a0:	add	x0, x0, #0x0
     5a4:	str	x0, [x20, #56]
     5a8:	ldr	x0, [x20, #64]
     5ac:	cbnz	x0, 5bc <BZ2_bzCompressInit+0x6c>
     5b0:	adrp	x0, 0 <add_pair_to_block>
     5b4:	add	x0, x0, #0x0
     5b8:	str	x0, [x20, #64]
     5bc:	ldr	x3, [x20, #56]
     5c0:	mov	w2, #0x1                   	// #1
     5c4:	ldr	x0, [x20, #72]
     5c8:	mov	w1, #0xd9d8                	// #55768
     5cc:	blr	x3
     5d0:	mov	x19, x0
     5d4:	cbz	x0, 684 <BZ2_bzCompressInit+0x134>
     5d8:	mov	w22, #0x86a0                	// #34464
     5dc:	mov	w2, #0x1                   	// #1
     5e0:	movk	w22, #0x1, lsl #16
     5e4:	ldr	x3, [x20, #56]
     5e8:	mul	w22, w23, w22
     5ec:	ldr	x0, [x20, #72]
     5f0:	str	x20, [x19]
     5f4:	stp	xzr, xzr, [x19, #24]
     5f8:	lsl	w1, w22, #2
     5fc:	str	xzr, [x19, #40]
     600:	blr	x3
     604:	ldr	x3, [x20, #56]
     608:	str	x0, [x19, #24]
     60c:	ldr	x0, [x20, #72]
     610:	add	w1, w22, #0x22
     614:	mov	w2, #0x1                   	// #1
     618:	lsl	w1, w1, #2
     61c:	blr	x3
     620:	ldr	x3, [x20, #56]
     624:	str	x0, [x19, #32]
     628:	ldr	x0, [x20, #72]
     62c:	mov	w1, #0x40004               	// #262148
     630:	mov	w2, #0x1                   	// #1
     634:	blr	x3
     638:	str	x0, [x19, #40]
     63c:	ldr	x1, [x19, #24]
     640:	cbz	x1, 658 <BZ2_bzCompressInit+0x108>
     644:	ldr	x2, [x19, #32]
     648:	cbz	x2, 650 <BZ2_bzCompressInit+0x100>
     64c:	cbnz	x0, 68c <BZ2_bzCompressInit+0x13c>
     650:	ldp	x2, x0, [x20, #64]
     654:	blr	x2
     658:	ldr	x1, [x19, #32]
     65c:	cbz	x1, 668 <BZ2_bzCompressInit+0x118>
     660:	ldp	x2, x0, [x20, #64]
     664:	blr	x2
     668:	ldr	x1, [x19, #40]
     66c:	cbz	x1, 678 <BZ2_bzCompressInit+0x128>
     670:	ldp	x2, x0, [x20, #64]
     674:	blr	x2
     678:	ldp	x2, x0, [x20, #64]
     67c:	mov	x1, x19
     680:	blr	x2
     684:	mov	w0, #0xfffffffd            	// #-3
     688:	b	6f8 <BZ2_bzCompressInit+0x1a8>
     68c:	mov	x0, #0x200000002           	// #8589934594
     690:	sub	w22, w22, #0x13
     694:	str	x0, [x19, #8]
     698:	mov	x0, #0x100                 	// #256
     69c:	stp	x1, x2, [x19, #56]
     6a0:	stp	x1, xzr, [x19, #72]
     6a4:	add	x1, x19, #0x180
     6a8:	str	w21, [x19, #88]
     6ac:	str	w22, [x19, #112]
     6b0:	str	wzr, [x19, #652]
     6b4:	str	w24, [x19, #656]
     6b8:	str	w23, [x19, #664]
     6bc:	stur	xzr, [x20, #12]
     6c0:	stur	xzr, [x20, #36]
     6c4:	str	x19, [x20, #48]
     6c8:	stur	x0, [x19, #92]
     6cc:	mov	w0, #0xffffffff            	// #-1
     6d0:	str	w0, [x19, #648]
     6d4:	add	x0, x19, #0x80
     6d8:	str	wzr, [x19, #108]
     6dc:	stur	xzr, [x19, #116]
     6e0:	strb	wzr, [x0], #1
     6e4:	cmp	x0, x1
     6e8:	b.ne	6e0 <BZ2_bzCompressInit+0x190>  // b.any
     6ec:	mov	w0, #0x1                   	// #1
     6f0:	str	w0, [x19, #660]
     6f4:	mov	w0, #0x0                   	// #0
     6f8:	ldp	x19, x20, [sp, #16]
     6fc:	ldp	x21, x22, [sp, #32]
     700:	ldp	x23, x24, [sp, #48]
     704:	ldp	x29, x30, [sp], #64
     708:	ret
     70c:	mov	w0, #0xfffffffe            	// #-2
     710:	b	6f8 <BZ2_bzCompressInit+0x1a8>

0000000000000714 <BZ2_bzCompress>:
     714:	stp	x29, x30, [sp, #-32]!
     718:	mov	x29, sp
     71c:	stp	x19, x20, [sp, #16]
     720:	cbz	x0, 790 <BZ2_bzCompress+0x7c>
     724:	ldr	x19, [x0, #48]
     728:	cbz	x19, 790 <BZ2_bzCompress+0x7c>
     72c:	ldr	x2, [x19]
     730:	cmp	x2, x0
     734:	b.ne	790 <BZ2_bzCompress+0x7c>  // b.any
     738:	adrp	x2, 0 <add_pair_to_block>
     73c:	add	x2, x2, #0x0
     740:	mov	w4, #0x4                   	// #4
     744:	mov	w5, #0x3                   	// #3
     748:	ldr	w20, [x19, #8]
     74c:	sub	w3, w20, #0x1
     750:	cmp	w3, #0x3
     754:	b.hi	768 <BZ2_bzCompress+0x54>  // b.pmore
     758:	ldrb	w3, [x2, w3, uxtw]
     75c:	adr	x6, 768 <BZ2_bzCompress+0x54>
     760:	add	x3, x6, w3, sxtb #2
     764:	br	x3
     768:	mov	w20, #0x0                   	// #0
     76c:	mov	w0, w20
     770:	ldp	x19, x20, [sp, #16]
     774:	ldp	x29, x30, [sp], #32
     778:	ret
     77c:	cbnz	w1, 798 <BZ2_bzCompress+0x84>
     780:	mov	x0, x19
     784:	bl	13c <handle_compress.isra.0>
     788:	tst	w0, #0xff
     78c:	b.ne	824 <BZ2_bzCompress+0x110>  // b.any
     790:	mov	w20, #0xfffffffe            	// #-2
     794:	b	76c <BZ2_bzCompress+0x58>
     798:	cmp	w1, #0x1
     79c:	b.ne	7b0 <BZ2_bzCompress+0x9c>  // b.any
     7a0:	ldr	w3, [x0, #8]
     7a4:	str	w5, [x19, #8]
     7a8:	str	w3, [x19, #16]
     7ac:	b	748 <BZ2_bzCompress+0x34>
     7b0:	cmp	w1, #0x2
     7b4:	b.ne	790 <BZ2_bzCompress+0x7c>  // b.any
     7b8:	ldr	w3, [x0, #8]
     7bc:	str	w4, [x19, #8]
     7c0:	str	w3, [x19, #16]
     7c4:	b	748 <BZ2_bzCompress+0x34>
     7c8:	cmp	w1, #0x1
     7cc:	b.eq	7d8 <BZ2_bzCompress+0xc4>  // b.none
     7d0:	mov	w20, #0xffffffff            	// #-1
     7d4:	b	76c <BZ2_bzCompress+0x58>
     7d8:	ldr	w0, [x0, #8]
     7dc:	ldr	w1, [x19, #16]
     7e0:	cmp	w1, w0
     7e4:	b.ne	7d0 <BZ2_bzCompress+0xbc>  // b.any
     7e8:	mov	x0, x19
     7ec:	bl	13c <handle_compress.isra.0>
     7f0:	ldr	w0, [x19, #16]
     7f4:	cbnz	w0, 88c <BZ2_bzCompress+0x178>
     7f8:	ldr	w0, [x19, #92]
     7fc:	cmp	w0, #0xff
     800:	b.hi	810 <BZ2_bzCompress+0xfc>  // b.pmore
     804:	ldr	w0, [x19, #96]
     808:	cmp	w0, #0x0
     80c:	b.gt	88c <BZ2_bzCompress+0x178>
     810:	ldp	w0, w1, [x19, #116]
     814:	mov	w20, #0x2                   	// #2
     818:	cmp	w1, w0
     81c:	b.lt	76c <BZ2_bzCompress+0x58>  // b.tstop
     820:	str	w20, [x19, #8]
     824:	mov	w20, #0x1                   	// #1
     828:	b	76c <BZ2_bzCompress+0x58>
     82c:	cmp	w1, #0x2
     830:	b.ne	7d0 <BZ2_bzCompress+0xbc>  // b.any
     834:	ldr	w0, [x0, #8]
     838:	ldr	w1, [x19, #16]
     83c:	cmp	w1, w0
     840:	b.ne	7d0 <BZ2_bzCompress+0xbc>  // b.any
     844:	mov	x0, x19
     848:	bl	13c <handle_compress.isra.0>
     84c:	tst	w0, #0xff
     850:	b.eq	7d0 <BZ2_bzCompress+0xbc>  // b.none
     854:	ldr	w0, [x19, #16]
     858:	cbnz	w0, 894 <BZ2_bzCompress+0x180>
     85c:	ldr	w0, [x19, #92]
     860:	cmp	w0, #0xff
     864:	b.hi	874 <BZ2_bzCompress+0x160>  // b.pmore
     868:	ldr	w0, [x19, #96]
     86c:	cmp	w0, #0x0
     870:	b.gt	894 <BZ2_bzCompress+0x180>
     874:	ldp	w0, w1, [x19, #116]
     878:	cmp	w1, w0
     87c:	b.lt	894 <BZ2_bzCompress+0x180>  // b.tstop
     880:	mov	w0, #0x1                   	// #1
     884:	str	w0, [x19, #8]
     888:	b	76c <BZ2_bzCompress+0x58>
     88c:	mov	w20, #0x2                   	// #2
     890:	b	76c <BZ2_bzCompress+0x58>
     894:	mov	w20, #0x3                   	// #3
     898:	b	76c <BZ2_bzCompress+0x58>

000000000000089c <BZ2_bzCompressEnd>:
     89c:	cbz	x0, 914 <BZ2_bzCompressEnd+0x78>
     8a0:	stp	x29, x30, [sp, #-32]!
     8a4:	mov	x29, sp
     8a8:	stp	x19, x20, [sp, #16]
     8ac:	mov	x19, x0
     8b0:	ldr	x20, [x0, #48]
     8b4:	cbz	x20, 91c <BZ2_bzCompressEnd+0x80>
     8b8:	ldr	x0, [x20]
     8bc:	cmp	x0, x19
     8c0:	b.ne	91c <BZ2_bzCompressEnd+0x80>  // b.any
     8c4:	ldr	x1, [x20, #24]
     8c8:	cbz	x1, 8d4 <BZ2_bzCompressEnd+0x38>
     8cc:	ldp	x2, x0, [x19, #64]
     8d0:	blr	x2
     8d4:	ldr	x1, [x20, #32]
     8d8:	cbz	x1, 8e4 <BZ2_bzCompressEnd+0x48>
     8dc:	ldp	x2, x0, [x19, #64]
     8e0:	blr	x2
     8e4:	ldr	x1, [x20, #40]
     8e8:	cbz	x1, 8f4 <BZ2_bzCompressEnd+0x58>
     8ec:	ldp	x2, x0, [x19, #64]
     8f0:	blr	x2
     8f4:	ldp	x2, x0, [x19, #64]
     8f8:	ldr	x1, [x19, #48]
     8fc:	blr	x2
     900:	str	xzr, [x19, #48]
     904:	mov	w0, #0x0                   	// #0
     908:	ldp	x19, x20, [sp, #16]
     90c:	ldp	x29, x30, [sp], #32
     910:	ret
     914:	mov	w0, #0xfffffffe            	// #-2
     918:	ret
     91c:	mov	w0, #0xfffffffe            	// #-2
     920:	b	908 <BZ2_bzCompressEnd+0x6c>

0000000000000924 <BZ2_bzDecompressInit>:
     924:	cbz	x0, 9dc <BZ2_bzDecompressInit+0xb8>
     928:	stp	x29, x30, [sp, #-48]!
     92c:	cmp	w2, #0x1
     930:	mov	x29, sp
     934:	stp	x19, x20, [sp, #16]
     938:	str	x21, [sp, #32]
     93c:	mov	w21, w2
     940:	b.hi	9e4 <BZ2_bzDecompressInit+0xc0>  // b.pmore
     944:	mov	w20, w1
     948:	cmp	w1, #0x4
     94c:	b.hi	9e4 <BZ2_bzDecompressInit+0xc0>  // b.pmore
     950:	mov	x19, x0
     954:	ldr	x0, [x0, #56]
     958:	cbnz	x0, 968 <BZ2_bzDecompressInit+0x44>
     95c:	adrp	x0, 0 <add_pair_to_block>
     960:	add	x0, x0, #0x0
     964:	str	x0, [x19, #56]
     968:	ldr	x0, [x19, #64]
     96c:	cbnz	x0, 97c <BZ2_bzDecompressInit+0x58>
     970:	adrp	x0, 0 <add_pair_to_block>
     974:	add	x0, x0, #0x0
     978:	str	x0, [x19, #64]
     97c:	ldr	x3, [x19, #56]
     980:	mov	w2, #0x1                   	// #1
     984:	ldr	x0, [x19, #72]
     988:	mov	w1, #0xfa90                	// #64144
     98c:	blr	x3
     990:	cbz	x0, 9ec <BZ2_bzDecompressInit+0xc8>
     994:	str	x19, [x0]
     998:	mov	w1, #0xa                   	// #10
     99c:	str	x0, [x19, #48]
     9a0:	str	w1, [x0, #8]
     9a4:	str	xzr, [x0, #32]
     9a8:	str	wzr, [x0, #3188]
     9ac:	stur	xzr, [x19, #12]
     9b0:	stur	xzr, [x19, #36]
     9b4:	strb	w21, [x0, #44]
     9b8:	stp	wzr, w20, [x0, #48]
     9bc:	str	xzr, [x0, #3152]
     9c0:	str	xzr, [x0, #3160]
     9c4:	str	xzr, [x0, #3168]
     9c8:	mov	w0, #0x0                   	// #0
     9cc:	ldp	x19, x20, [sp, #16]
     9d0:	ldr	x21, [sp, #32]
     9d4:	ldp	x29, x30, [sp], #48
     9d8:	ret
     9dc:	mov	w0, #0xfffffffe            	// #-2
     9e0:	ret
     9e4:	mov	w0, #0xfffffffe            	// #-2
     9e8:	b	9cc <BZ2_bzDecompressInit+0xa8>
     9ec:	mov	w0, #0xfffffffd            	// #-3
     9f0:	b	9cc <BZ2_bzDecompressInit+0xa8>

00000000000009f4 <BZ2_indexIntoF>:
     9f4:	mov	w4, w0
     9f8:	mov	w3, #0x100                 	// #256
     9fc:	mov	w0, #0x0                   	// #0
     a00:	add	w2, w0, w3
     a04:	asr	w2, w2, #1
     a08:	ldr	w5, [x1, w2, sxtw #2]
     a0c:	cmp	w5, w4
     a10:	csel	w3, w3, w2, le
     a14:	csel	w0, w2, w0, le
     a18:	sub	w2, w3, w0
     a1c:	cmp	w2, #0x1
     a20:	b.ne	a00 <BZ2_indexIntoF+0xc>  // b.any
     a24:	ret

0000000000000a28 <BZ2_bzDecompress>:
     a28:	stp	x29, x30, [sp, #-48]!
     a2c:	mov	x29, sp
     a30:	stp	x19, x20, [sp, #16]
     a34:	stp	x21, x22, [sp, #32]
     a38:	cbz	x0, 1500 <BZ2_bzDecompress+0xad8>
     a3c:	ldr	x19, [x0, #48]
     a40:	cbz	x19, 1500 <BZ2_bzDecompress+0xad8>
     a44:	ldr	x1, [x19]
     a48:	cmp	x1, x0
     a4c:	b.ne	1500 <BZ2_bzDecompress+0xad8>  // b.any
     a50:	mov	w21, #0x86a0                	// #34464
     a54:	adrp	x20, 0 <BZ2_crc32Table>
     a58:	add	x20, x20, #0x0
     a5c:	movk	w21, #0x1, lsl #16
     a60:	ldr	w0, [x19, #8]
     a64:	cmp	w0, #0x1
     a68:	b.eq	1508 <BZ2_bzDecompress+0xae0>  // b.none
     a6c:	cmp	w0, #0x2
     a70:	b.ne	14e4 <BZ2_bzDecompress+0xabc>  // b.any
     a74:	ldrb	w2, [x19, #44]
     a78:	ldrb	w1, [x19, #20]
     a7c:	cbz	w2, 1024 <BZ2_bzDecompress+0x5fc>
     a80:	cbz	w1, b08 <BZ2_bzDecompress+0xe0>
     a84:	adrp	x8, 0 <BZ2_rNums>
     a88:	add	x8, x8, #0x0
     a8c:	ldr	x0, [x19]
     a90:	ldr	w1, [x0, #32]
     a94:	cbz	w1, 14bc <BZ2_bzDecompress+0xa94>
     a98:	ldr	w1, [x19, #16]
     a9c:	cbz	w1, b8c <BZ2_bzDecompress+0x164>
     aa0:	ldr	x1, [x0, #24]
     aa4:	ldrb	w0, [x19, #12]
     aa8:	strb	w0, [x1]
     aac:	ldr	w1, [x19, #3184]
     ab0:	eor	w0, w0, w1, lsr #24
     ab4:	ldr	w0, [x20, x0, lsl #2]
     ab8:	eor	w1, w0, w1, lsl #8
     abc:	ldr	w0, [x19, #16]
     ac0:	str	w1, [x19, #3184]
     ac4:	sub	w0, w0, #0x1
     ac8:	str	w0, [x19, #16]
     acc:	ldr	x0, [x19]
     ad0:	ldr	x1, [x0, #24]
     ad4:	add	x1, x1, #0x1
     ad8:	str	x1, [x0, #24]
     adc:	ldr	w1, [x0, #32]
     ae0:	sub	w1, w1, #0x1
     ae4:	str	w1, [x0, #32]
     ae8:	ldr	w1, [x0, #36]
     aec:	add	w1, w1, #0x1
     af0:	str	w1, [x0, #36]
     af4:	cbnz	w1, a8c <BZ2_bzDecompress+0x64>
     af8:	ldr	w1, [x0, #40]
     afc:	add	w1, w1, #0x1
     b00:	str	w1, [x0, #40]
     b04:	b	a8c <BZ2_bzDecompress+0x64>
     b08:	add	x11, x19, #0xc, lsl #12
     b0c:	mov	w12, #0x1                   	// #1
     b10:	ldr	x0, [x19]
     b14:	ldr	w1, [x0, #32]
     b18:	cbz	w1, 14bc <BZ2_bzDecompress+0xa94>
     b1c:	ldr	w1, [x19, #16]
     b20:	cbz	w1, e5c <BZ2_bzDecompress+0x434>
     b24:	ldr	x1, [x0, #24]
     b28:	ldrb	w0, [x19, #12]
     b2c:	strb	w0, [x1]
     b30:	ldr	w1, [x19, #3184]
     b34:	eor	w0, w0, w1, lsr #24
     b38:	ldr	w0, [x20, x0, lsl #2]
     b3c:	eor	w1, w0, w1, lsl #8
     b40:	ldr	w0, [x19, #16]
     b44:	str	w1, [x19, #3184]
     b48:	sub	w0, w0, #0x1
     b4c:	str	w0, [x19, #16]
     b50:	ldr	x0, [x19]
     b54:	ldr	x1, [x0, #24]
     b58:	add	x1, x1, #0x1
     b5c:	str	x1, [x0, #24]
     b60:	ldr	w1, [x0, #32]
     b64:	sub	w1, w1, #0x1
     b68:	str	w1, [x0, #32]
     b6c:	ldr	w1, [x0, #36]
     b70:	add	w1, w1, #0x1
     b74:	str	w1, [x0, #36]
     b78:	cbnz	w1, b10 <BZ2_bzDecompress+0xe8>
     b7c:	ldr	w1, [x0, #40]
     b80:	add	w1, w1, #0x1
     b84:	str	w1, [x0, #40]
     b88:	b	b10 <BZ2_bzDecompress+0xe8>
     b8c:	add	x0, x19, #0xc, lsl #12
     b90:	ldr	w7, [x19, #1092]
     b94:	ldr	w18, [x0, #14928]
     b98:	add	w13, w18, #0x1
     b9c:	cmp	w7, w13
     ba0:	b.eq	1518 <BZ2_bzDecompress+0xaf0>  // b.none
     ba4:	b.gt	15d4 <BZ2_bzDecompress+0xbac>
     ba8:	ldr	w9, [x19, #40]
     bac:	mov	w0, #0x1                   	// #1
     bb0:	ldp	w12, w15, [x19, #60]
     bb4:	strb	w15, [x19, #12]
     bb8:	str	w0, [x19, #16]
     bbc:	mul	w9, w9, w21
     bc0:	cmp	w12, w9
     bc4:	b.cs	15d4 <BZ2_bzDecompress+0xbac>  // b.hs, b.nlast
     bc8:	add	x1, x19, #0x448
     bcc:	mov	w0, w12
     bd0:	bl	9f4 <BZ2_indexIntoF>
     bd4:	lsr	w2, w12, #1
     bd8:	ldr	x11, [x19, #3168]
     bdc:	ldr	x10, [x19, #3160]
     be0:	ldrb	w6, [x11, x2]
     be4:	ubfiz	w2, w12, #2, #1
     be8:	lsr	w6, w6, w2
     bec:	ldrh	w2, [x10, w12, uxtw #1]
     bf0:	ubfiz	w6, w6, #16, #4
     bf4:	orr	w6, w6, w2
     bf8:	ldr	w2, [x19, #24]
     bfc:	str	w6, [x19, #60]
     c00:	cbnz	w2, c18 <BZ2_bzDecompress+0x1f0>
     c04:	ldr	w2, [x19, #28]
     c08:	cmp	w2, #0x1ff
     c0c:	ldr	w3, [x8, w2, sxtw #2]
     c10:	csinc	w2, wzr, w2, eq  // eq = none
     c14:	stp	w3, w2, [x19, #24]
     c18:	ldr	w12, [x19, #24]
     c1c:	sub	w12, w12, #0x1
     c20:	str	w12, [x19, #24]
     c24:	cmp	w12, #0x1
     c28:	cset	w14, eq  // eq = none
     c2c:	cmp	w7, w18
     c30:	eor	w14, w14, w0
     c34:	add	w0, w7, #0x1
     c38:	str	w0, [x19, #1092]
     c3c:	and	w14, w14, #0xff
     c40:	b.eq	a8c <BZ2_bzDecompress+0x64>  // b.none
     c44:	cmp	w15, w14
     c48:	b.eq	c54 <BZ2_bzDecompress+0x22c>  // b.none
     c4c:	str	w14, [x19, #64]
     c50:	b	a8c <BZ2_bzDecompress+0x64>
     c54:	mov	w0, #0x2                   	// #2
     c58:	str	w0, [x19, #16]
     c5c:	cmp	w9, w6
     c60:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     c64:	mov	w0, w6
     c68:	bl	9f4 <BZ2_indexIntoF>
     c6c:	ubfx	x2, x6, #1, #19
     c70:	ldrb	w3, [x11, x2]
     c74:	ubfiz	w2, w6, #2, #1
     c78:	ubfiz	x6, x6, #1, #20
     c7c:	lsr	w3, w3, w2
     c80:	ldrh	w6, [x10, x6]
     c84:	ubfiz	w3, w3, #16, #4
     c88:	orr	w6, w3, w6
     c8c:	str	w6, [x19, #60]
     c90:	cbnz	w12, ca8 <BZ2_bzDecompress+0x280>
     c94:	ldr	w2, [x19, #28]
     c98:	cmp	w2, #0x1ff
     c9c:	ldr	w3, [x8, w2, sxtw #2]
     ca0:	csinc	w2, wzr, w2, eq  // eq = none
     ca4:	stp	w3, w2, [x19, #24]
     ca8:	ldr	w15, [x19, #24]
     cac:	sub	w15, w15, #0x1
     cb0:	str	w15, [x19, #24]
     cb4:	cmp	w15, #0x1
     cb8:	cset	w2, eq  // eq = none
     cbc:	eor	w0, w2, w0
     cc0:	add	w2, w7, #0x2
     cc4:	str	w2, [x19, #1092]
     cc8:	and	w0, w0, #0xff
     ccc:	cmp	w13, w2
     cd0:	b.eq	a8c <BZ2_bzDecompress+0x64>  // b.none
     cd4:	cmp	w14, w0
     cd8:	b.eq	ce4 <BZ2_bzDecompress+0x2bc>  // b.none
     cdc:	str	w0, [x19, #64]
     ce0:	b	a8c <BZ2_bzDecompress+0x64>
     ce4:	mov	w0, #0x3                   	// #3
     ce8:	str	w0, [x19, #16]
     cec:	cmp	w9, w6
     cf0:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     cf4:	mov	w0, w6
     cf8:	bl	9f4 <BZ2_indexIntoF>
     cfc:	ubfx	x2, x6, #1, #19
     d00:	ubfiz	x3, x6, #1, #20
     d04:	ubfiz	w12, w6, #2, #1
     d08:	ldrb	w2, [x11, x2]
     d0c:	lsr	w2, w2, w12
     d10:	ldrh	w12, [x10, x3]
     d14:	ubfiz	w2, w2, #16, #4
     d18:	orr	w12, w2, w12
     d1c:	str	w12, [x19, #60]
     d20:	cbnz	w15, d38 <BZ2_bzDecompress+0x310>
     d24:	ldr	w2, [x19, #28]
     d28:	cmp	w2, #0x1ff
     d2c:	ldr	w3, [x8, w2, sxtw #2]
     d30:	csinc	w2, wzr, w2, eq  // eq = none
     d34:	stp	w3, w2, [x19, #24]
     d38:	ldr	w15, [x19, #24]
     d3c:	add	w2, w7, #0x3
     d40:	str	w2, [x19, #1092]
     d44:	sub	w15, w15, #0x1
     d48:	str	w15, [x19, #24]
     d4c:	cmp	w15, #0x1
     d50:	cset	w3, eq  // eq = none
     d54:	cmp	w13, w2
     d58:	eor	w0, w3, w0
     d5c:	and	w0, w0, #0xff
     d60:	b.eq	a8c <BZ2_bzDecompress+0x64>  // b.none
     d64:	cmp	w14, w0
     d68:	b.ne	cdc <BZ2_bzDecompress+0x2b4>  // b.any
     d6c:	cmp	w9, w12
     d70:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     d74:	mov	w0, w12
     d78:	bl	9f4 <BZ2_indexIntoF>
     d7c:	ubfx	x2, x12, #1, #19
     d80:	ldrb	w6, [x11, x2]
     d84:	ubfiz	w2, w12, #2, #1
     d88:	lsr	w6, w6, w2
     d8c:	ubfiz	x2, x12, #1, #20
     d90:	ubfiz	w6, w6, #16, #4
     d94:	ldrh	w2, [x10, x2]
     d98:	orr	w6, w6, w2
     d9c:	str	w6, [x19, #60]
     da0:	cbnz	w15, db8 <BZ2_bzDecompress+0x390>
     da4:	ldr	w2, [x19, #28]
     da8:	cmp	w2, #0x1ff
     dac:	ldr	w3, [x8, w2, sxtw #2]
     db0:	csinc	w2, wzr, w2, eq  // eq = none
     db4:	stp	w3, w2, [x19, #24]
     db8:	ldr	w12, [x19, #24]
     dbc:	add	w2, w7, #0x4
     dc0:	str	w2, [x19, #1092]
     dc4:	sub	w12, w12, #0x1
     dc8:	str	w12, [x19, #24]
     dcc:	cmp	w12, #0x1
     dd0:	cset	w2, eq  // eq = none
     dd4:	cmp	w9, w6
     dd8:	eor	w0, w2, w0
     ddc:	and	w0, w0, #0xff
     de0:	add	w0, w0, #0x4
     de4:	str	w0, [x19, #16]
     de8:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     dec:	mov	w0, w6
     df0:	bl	9f4 <BZ2_indexIntoF>
     df4:	ubfx	x1, x6, #1, #19
     df8:	str	w0, [x19, #64]
     dfc:	ubfiz	w2, w6, #2, #1
     e00:	ubfiz	x6, x6, #1, #20
     e04:	ldrb	w1, [x11, x1]
     e08:	lsr	w1, w1, w2
     e0c:	ldrh	w2, [x10, x6]
     e10:	ubfiz	w1, w1, #16, #4
     e14:	orr	w1, w1, w2
     e18:	str	w1, [x19, #60]
     e1c:	cbnz	w12, e34 <BZ2_bzDecompress+0x40c>
     e20:	ldr	w1, [x19, #28]
     e24:	cmp	w1, #0x1ff
     e28:	ldr	w2, [x8, w1, sxtw #2]
     e2c:	csinc	w1, wzr, w1, eq  // eq = none
     e30:	stp	w2, w1, [x19, #24]
     e34:	ldr	w1, [x19, #24]
     e38:	sub	w1, w1, #0x1
     e3c:	str	w1, [x19, #24]
     e40:	cmp	w1, #0x1
     e44:	cset	w1, eq  // eq = none
     e48:	eor	w0, w1, w0
     e4c:	str	w0, [x19, #64]
     e50:	add	w0, w7, #0x5
     e54:	str	w0, [x19, #1092]
     e58:	b	a8c <BZ2_bzDecompress+0x64>
     e5c:	ldr	w18, [x11, #14928]
     e60:	ldr	w8, [x19, #1092]
     e64:	add	w15, w18, #0x1
     e68:	cmp	w8, w15
     e6c:	b.eq	1518 <BZ2_bzDecompress+0xaf0>  // b.none
     e70:	b.gt	15d4 <BZ2_bzDecompress+0xbac>
     e74:	ldr	w9, [x19, #40]
     e78:	ldp	w6, w14, [x19, #60]
     e7c:	strb	w14, [x19, #12]
     e80:	str	w12, [x19, #16]
     e84:	mul	w9, w9, w21
     e88:	cmp	w6, w9
     e8c:	b.cs	15d4 <BZ2_bzDecompress+0xbac>  // b.hs, b.nlast
     e90:	add	x1, x19, #0x448
     e94:	mov	w0, w6
     e98:	bl	9f4 <BZ2_indexIntoF>
     e9c:	lsr	w2, w6, #1
     ea0:	ldr	x13, [x19, #3168]
     ea4:	cmp	w8, w18
     ea8:	ldr	x10, [x19, #3160]
     eac:	ldrb	w7, [x13, x2]
     eb0:	ubfiz	w2, w6, #2, #1
     eb4:	lsr	w7, w7, w2
     eb8:	ldrh	w2, [x10, w6, uxtw #1]
     ebc:	ubfiz	w7, w7, #16, #4
     ec0:	orr	w7, w7, w2
     ec4:	add	w2, w8, #0x1
     ec8:	str	w7, [x19, #60]
     ecc:	str	w2, [x19, #1092]
     ed0:	b.eq	b10 <BZ2_bzDecompress+0xe8>  // b.none
     ed4:	and	w2, w0, #0xff
     ed8:	cmp	w14, w0, uxtb
     edc:	b.eq	ee8 <BZ2_bzDecompress+0x4c0>  // b.none
     ee0:	str	w2, [x19, #64]
     ee4:	b	b10 <BZ2_bzDecompress+0xe8>
     ee8:	mov	w0, #0x2                   	// #2
     eec:	str	w0, [x19, #16]
     ef0:	cmp	w9, w7
     ef4:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     ef8:	mov	w0, w7
     efc:	bl	9f4 <BZ2_indexIntoF>
     f00:	ubfx	x2, x7, #1, #19
     f04:	ldrb	w6, [x13, x2]
     f08:	ubfiz	w2, w7, #2, #1
     f0c:	ubfiz	x7, x7, #1, #20
     f10:	lsr	w6, w6, w2
     f14:	ldrh	w2, [x10, x7]
     f18:	ubfiz	w6, w6, #16, #4
     f1c:	orr	w6, w6, w2
     f20:	add	w2, w8, #0x2
     f24:	str	w6, [x19, #60]
     f28:	cmp	w15, w2
     f2c:	str	w2, [x19, #1092]
     f30:	b.eq	b10 <BZ2_bzDecompress+0xe8>  // b.none
     f34:	and	w2, w0, #0xff
     f38:	cmp	w14, w0, uxtb
     f3c:	b.ne	ee0 <BZ2_bzDecompress+0x4b8>  // b.any
     f40:	mov	w0, #0x3                   	// #3
     f44:	str	w0, [x19, #16]
     f48:	cmp	w9, w6
     f4c:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     f50:	mov	w0, w6
     f54:	bl	9f4 <BZ2_indexIntoF>
     f58:	ubfx	x2, x6, #1, #19
     f5c:	ldrb	w7, [x13, x2]
     f60:	ubfiz	w2, w6, #2, #1
     f64:	ubfiz	x6, x6, #1, #20
     f68:	lsr	w7, w7, w2
     f6c:	ldrh	w2, [x10, x6]
     f70:	ubfiz	w7, w7, #16, #4
     f74:	orr	w7, w7, w2
     f78:	add	w2, w8, #0x3
     f7c:	str	w7, [x19, #60]
     f80:	cmp	w15, w2
     f84:	str	w2, [x19, #1092]
     f88:	b.eq	b10 <BZ2_bzDecompress+0xe8>  // b.none
     f8c:	and	w2, w0, #0xff
     f90:	cmp	w14, w0, uxtb
     f94:	b.ne	ee0 <BZ2_bzDecompress+0x4b8>  // b.any
     f98:	cmp	w9, w7
     f9c:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     fa0:	mov	w0, w7
     fa4:	bl	9f4 <BZ2_indexIntoF>
     fa8:	ubfx	x2, x7, #1, #19
     fac:	and	w0, w0, #0xff
     fb0:	add	w0, w0, #0x4
     fb4:	ldrb	w6, [x13, x2]
     fb8:	ubfiz	w2, w7, #2, #1
     fbc:	ubfiz	x7, x7, #1, #20
     fc0:	lsr	w6, w6, w2
     fc4:	ldrh	w2, [x10, x7]
     fc8:	ubfiz	w6, w6, #16, #4
     fcc:	str	w0, [x19, #16]
     fd0:	orr	w6, w6, w2
     fd4:	add	w2, w8, #0x4
     fd8:	str	w6, [x19, #60]
     fdc:	cmp	w9, w6
     fe0:	str	w2, [x19, #1092]
     fe4:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
     fe8:	mov	w0, w6
     fec:	bl	9f4 <BZ2_indexIntoF>
     ff0:	str	w0, [x19, #64]
     ff4:	ubfx	x0, x6, #1, #19
     ff8:	ubfiz	w1, w6, #2, #1
     ffc:	ubfiz	x6, x6, #1, #20
    1000:	add	w8, w8, #0x5
    1004:	ldrb	w0, [x13, x0]
    1008:	lsr	w0, w0, w1
    100c:	ldrh	w1, [x10, x6]
    1010:	ubfiz	w0, w0, #16, #4
    1014:	str	w8, [x19, #1092]
    1018:	orr	w0, w0, w1
    101c:	str	w0, [x19, #60]
    1020:	b	b10 <BZ2_bzDecompress+0xe8>
    1024:	cbz	w1, 12ec <BZ2_bzDecompress+0x8c4>
    1028:	adrp	x2, 0 <BZ2_rNums>
    102c:	add	x8, x19, #0xc, lsl #12
    1030:	mov	w4, w0
    1034:	add	x2, x2, #0x0
    1038:	mov	w9, #0x1                   	// #1
    103c:	mov	w10, #0x3                   	// #3
    1040:	ldr	x0, [x19]
    1044:	ldr	w1, [x0, #32]
    1048:	cbz	w1, 14bc <BZ2_bzDecompress+0xa94>
    104c:	ldr	w1, [x19, #16]
    1050:	cbz	w1, 10c0 <BZ2_bzDecompress+0x698>
    1054:	ldr	x0, [x0, #24]
    1058:	ldrb	w1, [x19, #12]
    105c:	strb	w1, [x0]
    1060:	ldr	w1, [x19, #3184]
    1064:	ldrb	w0, [x19, #12]
    1068:	eor	w0, w0, w1, lsr #24
    106c:	ldr	w0, [x20, x0, lsl #2]
    1070:	eor	w1, w0, w1, lsl #8
    1074:	ldr	w0, [x19, #16]
    1078:	str	w1, [x19, #3184]
    107c:	sub	w0, w0, #0x1
    1080:	str	w0, [x19, #16]
    1084:	ldr	x0, [x19]
    1088:	ldr	x1, [x0, #24]
    108c:	add	x1, x1, #0x1
    1090:	str	x1, [x0, #24]
    1094:	ldr	w1, [x0, #32]
    1098:	sub	w1, w1, #0x1
    109c:	str	w1, [x0, #32]
    10a0:	ldr	w1, [x0, #36]
    10a4:	add	w1, w1, #0x1
    10a8:	str	w1, [x0, #36]
    10ac:	cbnz	w1, 1040 <BZ2_bzDecompress+0x618>
    10b0:	ldr	w1, [x0, #40]
    10b4:	add	w1, w1, #0x1
    10b8:	str	w1, [x0, #40]
    10bc:	b	1040 <BZ2_bzDecompress+0x618>
    10c0:	ldr	w14, [x8, #14928]
    10c4:	ldr	w0, [x19, #1092]
    10c8:	add	w12, w14, #0x1
    10cc:	cmp	w0, w12
    10d0:	b.eq	1518 <BZ2_bzDecompress+0xaf0>  // b.none
    10d4:	b.gt	15d4 <BZ2_bzDecompress+0xbac>
    10d8:	ldr	w3, [x19, #40]
    10dc:	ldp	w1, w13, [x19, #60]
    10e0:	strb	w13, [x19, #12]
    10e4:	str	w9, [x19, #16]
    10e8:	mul	w3, w3, w21
    10ec:	cmp	w1, w3
    10f0:	b.cs	15d4 <BZ2_bzDecompress+0xbac>  // b.hs, b.nlast
    10f4:	ldr	x7, [x19, #3152]
    10f8:	ldr	w15, [x7, w1, uxtw #2]
    10fc:	ldr	w1, [x19, #24]
    1100:	lsr	w5, w15, #8
    1104:	str	w5, [x19, #60]
    1108:	cbnz	w1, 1120 <BZ2_bzDecompress+0x6f8>
    110c:	ldr	w6, [x19, #28]
    1110:	cmp	w6, #0x1ff
    1114:	ldr	w1, [x2, w6, sxtw #2]
    1118:	csinc	w6, wzr, w6, eq  // eq = none
    111c:	stp	w1, w6, [x19, #24]
    1120:	ldr	w11, [x19, #24]
    1124:	add	w6, w0, #0x1
    1128:	str	w6, [x19, #1092]
    112c:	sub	w11, w11, #0x1
    1130:	str	w11, [x19, #24]
    1134:	cmp	w11, #0x1
    1138:	cset	w1, eq  // eq = none
    113c:	cmp	w0, w14
    1140:	eor	w1, w1, w15
    1144:	and	w1, w1, #0xff
    1148:	b.eq	1040 <BZ2_bzDecompress+0x618>  // b.none
    114c:	cmp	w13, w1
    1150:	b.eq	115c <BZ2_bzDecompress+0x734>  // b.none
    1154:	str	w1, [x19, #64]
    1158:	b	1040 <BZ2_bzDecompress+0x618>
    115c:	str	w4, [x19, #16]
    1160:	cmp	w3, w5
    1164:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    1168:	ubfiz	x5, x5, #2, #24
    116c:	ldr	w13, [x7, x5]
    1170:	lsr	w6, w13, #8
    1174:	str	w6, [x19, #60]
    1178:	cbnz	w11, 1190 <BZ2_bzDecompress+0x768>
    117c:	ldr	w11, [x19, #28]
    1180:	cmp	w11, #0x1ff
    1184:	ldr	w5, [x2, w11, sxtw #2]
    1188:	csinc	w11, wzr, w11, eq  // eq = none
    118c:	stp	w5, w11, [x19, #24]
    1190:	ldr	w11, [x19, #24]
    1194:	sub	w11, w11, #0x1
    1198:	str	w11, [x19, #24]
    119c:	cmp	w11, #0x1
    11a0:	cset	w5, eq  // eq = none
    11a4:	eor	w5, w5, w13
    11a8:	add	w13, w0, #0x2
    11ac:	str	w13, [x19, #1092]
    11b0:	and	w5, w5, #0xff
    11b4:	cmp	w12, w13
    11b8:	b.eq	1040 <BZ2_bzDecompress+0x618>  // b.none
    11bc:	cmp	w1, w5
    11c0:	b.eq	11cc <BZ2_bzDecompress+0x7a4>  // b.none
    11c4:	str	w5, [x19, #64]
    11c8:	b	1040 <BZ2_bzDecompress+0x618>
    11cc:	str	w10, [x19, #16]
    11d0:	cmp	w3, w6
    11d4:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    11d8:	ubfiz	x6, x6, #2, #24
    11dc:	ldr	w13, [x7, x6]
    11e0:	lsr	w6, w13, #8
    11e4:	str	w6, [x19, #60]
    11e8:	cbnz	w11, 1200 <BZ2_bzDecompress+0x7d8>
    11ec:	ldr	w11, [x19, #28]
    11f0:	cmp	w11, #0x1ff
    11f4:	ldr	w5, [x2, w11, sxtw #2]
    11f8:	csinc	w11, wzr, w11, eq  // eq = none
    11fc:	stp	w5, w11, [x19, #24]
    1200:	ldr	w11, [x19, #24]
    1204:	sub	w11, w11, #0x1
    1208:	str	w11, [x19, #24]
    120c:	cmp	w11, #0x1
    1210:	cset	w5, eq  // eq = none
    1214:	eor	w5, w5, w13
    1218:	add	w13, w0, #0x3
    121c:	str	w13, [x19, #1092]
    1220:	and	w5, w5, #0xff
    1224:	cmp	w12, w13
    1228:	b.eq	1040 <BZ2_bzDecompress+0x618>  // b.none
    122c:	cmp	w1, w5
    1230:	b.ne	11c4 <BZ2_bzDecompress+0x79c>  // b.any
    1234:	cmp	w3, w6
    1238:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    123c:	ubfiz	x6, x6, #2, #24
    1240:	ldr	w12, [x7, x6]
    1244:	lsr	w6, w12, #8
    1248:	str	w6, [x19, #60]
    124c:	cbnz	w11, 1264 <BZ2_bzDecompress+0x83c>
    1250:	ldr	w5, [x19, #28]
    1254:	cmp	w5, #0x1ff
    1258:	ldr	w1, [x2, w5, sxtw #2]
    125c:	csinc	w5, wzr, w5, eq  // eq = none
    1260:	stp	w1, w5, [x19, #24]
    1264:	ldr	w5, [x19, #24]
    1268:	add	w1, w0, #0x4
    126c:	str	w1, [x19, #1092]
    1270:	sub	w5, w5, #0x1
    1274:	str	w5, [x19, #24]
    1278:	cmp	w5, #0x1
    127c:	cset	w1, eq  // eq = none
    1280:	cmp	w3, w6
    1284:	eor	w1, w1, w12
    1288:	and	w1, w1, #0xff
    128c:	add	w1, w1, #0x4
    1290:	str	w1, [x19, #16]
    1294:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    1298:	ubfiz	x6, x6, #2, #24
    129c:	ldr	w1, [x7, x6]
    12a0:	and	w3, w1, #0xff
    12a4:	lsr	w1, w1, #8
    12a8:	stp	w1, w3, [x19, #60]
    12ac:	cbnz	w5, 12c4 <BZ2_bzDecompress+0x89c>
    12b0:	ldr	w1, [x19, #28]
    12b4:	cmp	w1, #0x1ff
    12b8:	ldr	w5, [x2, w1, sxtw #2]
    12bc:	csinc	w1, wzr, w1, eq  // eq = none
    12c0:	stp	w5, w1, [x19, #24]
    12c4:	ldr	w1, [x19, #24]
    12c8:	add	w0, w0, #0x5
    12cc:	str	w0, [x19, #1092]
    12d0:	sub	w1, w1, #0x1
    12d4:	str	w1, [x19, #24]
    12d8:	cmp	w1, #0x1
    12dc:	cset	w1, eq  // eq = none
    12e0:	eor	w1, w1, w3
    12e4:	str	w1, [x19, #64]
    12e8:	b	1040 <BZ2_bzDecompress+0x618>
    12ec:	ldr	x2, [x19]
    12f0:	ldr	w7, [x19, #40]
    12f4:	ldrb	w10, [x19, #12]
    12f8:	ldr	w13, [x2, #32]
    12fc:	ldr	x11, [x2, #24]
    1300:	add	x2, x19, #0xc, lsl #12
    1304:	ldr	w1, [x19, #16]
    1308:	mul	w7, w7, w21
    130c:	ldp	w0, w9, [x19, #60]
    1310:	mov	w6, w13
    1314:	ldr	w14, [x2, #14928]
    1318:	ldr	w4, [x19, #1092]
    131c:	ldr	w5, [x19, #3184]
    1320:	add	w12, w14, #0x1
    1324:	ldr	x8, [x19, #3152]
    1328:	cmp	w1, #0x0
    132c:	b.le	13a4 <BZ2_bzDecompress+0x97c>
    1330:	cbz	w6, 1474 <BZ2_bzDecompress+0xa4c>
    1334:	lsl	w16, w5, #8
    1338:	eor	w3, w10, w5, lsr #24
    133c:	add	x2, x11, #0x1
    1340:	sub	w15, w6, #0x1
    1344:	cmp	w1, #0x1
    1348:	b.eq	1390 <BZ2_bzDecompress+0x968>  // b.none
    134c:	strb	w10, [x11]
    1350:	sub	w1, w1, #0x1
    1354:	mov	w6, w15
    1358:	mov	x11, x2
    135c:	ldr	w5, [x20, x3, lsl #2]
    1360:	eor	w5, w16, w5
    1364:	b	1330 <BZ2_bzDecompress+0x908>
    1368:	mov	w2, w9
    136c:	mov	w1, #0x2                   	// #2
    1370:	mov	w9, w2
    1374:	mov	w4, w3
    1378:	b	1328 <BZ2_bzDecompress+0x900>
    137c:	mov	w2, w9
    1380:	mov	w1, #0x3                   	// #3
    1384:	b	1370 <BZ2_bzDecompress+0x948>
    1388:	add	w4, w4, #0x1
    138c:	cbz	w6, 1470 <BZ2_bzDecompress+0xa48>
    1390:	eor	w1, w10, w5, lsr #24
    1394:	strb	w10, [x11], #1
    1398:	sub	w6, w6, #0x1
    139c:	ldr	w1, [x20, x1, lsl #2]
    13a0:	eor	w5, w1, w5, lsl #8
    13a4:	mov	w2, w9
    13a8:	cmp	w12, w4
    13ac:	b.lt	15d4 <BZ2_bzDecompress+0xbac>  // b.tstop
    13b0:	b.eq	14dc <BZ2_bzDecompress+0xab4>  // b.none
    13b4:	and	w10, w9, #0xff
    13b8:	cmp	w7, w0
    13bc:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    13c0:	ldr	w1, [x8, w0, uxtw #2]
    13c4:	and	w9, w1, #0xff
    13c8:	lsr	w0, w1, #8
    13cc:	cmp	w2, w1, uxtb
    13d0:	b.ne	1388 <BZ2_bzDecompress+0x960>  // b.any
    13d4:	cmp	w14, w4
    13d8:	b.eq	1388 <BZ2_bzDecompress+0x960>  // b.none
    13dc:	cmp	w7, w0
    13e0:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    13e4:	ubfiz	x0, x0, #2, #24
    13e8:	add	w3, w4, #0x2
    13ec:	cmp	w12, w3
    13f0:	ldr	w1, [x8, x0]
    13f4:	lsr	w0, w1, #8
    13f8:	b.eq	136c <BZ2_bzDecompress+0x944>  // b.none
    13fc:	and	w9, w1, #0xff
    1400:	cmp	w2, w1, uxtb
    1404:	b.ne	1368 <BZ2_bzDecompress+0x940>  // b.any
    1408:	cmp	w7, w0
    140c:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    1410:	ubfiz	x0, x0, #2, #24
    1414:	add	w3, w4, #0x3
    1418:	cmp	w12, w3
    141c:	ldr	w1, [x8, x0]
    1420:	lsr	w0, w1, #8
    1424:	b.eq	1380 <BZ2_bzDecompress+0x958>  // b.none
    1428:	and	w9, w1, #0xff
    142c:	cmp	w2, w1, uxtb
    1430:	b.ne	137c <BZ2_bzDecompress+0x954>  // b.any
    1434:	cmp	w7, w0
    1438:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    143c:	ubfiz	x0, x0, #2, #24
    1440:	ldr	w3, [x8, x0]
    1444:	and	w1, w3, #0xff
    1448:	lsr	w0, w3, #8
    144c:	add	w1, w1, #0x4
    1450:	cmp	w7, w3, lsr #8
    1454:	b.ls	15d4 <BZ2_bzDecompress+0xbac>  // b.plast
    1458:	ubfiz	x0, x0, #2, #24
    145c:	add	w3, w4, #0x5
    1460:	ldr	w0, [x8, x0]
    1464:	and	w2, w0, #0xff
    1468:	lsr	w0, w0, #8
    146c:	b	1370 <BZ2_bzDecompress+0x948>
    1470:	mov	w1, #0x1                   	// #1
    1474:	ldr	x3, [x19]
    1478:	ldr	w7, [x3, #36]
    147c:	add	w2, w7, w13
    1480:	sub	w2, w2, w6
    1484:	str	w2, [x3, #36]
    1488:	cmp	w7, w2
    148c:	b.ls	149c <BZ2_bzDecompress+0xa74>  // b.plast
    1490:	ldr	w2, [x3, #40]
    1494:	add	w2, w2, #0x1
    1498:	str	w2, [x3, #40]
    149c:	strb	w10, [x19, #12]
    14a0:	str	w1, [x19, #16]
    14a4:	stp	w0, w9, [x19, #60]
    14a8:	str	w4, [x19, #1092]
    14ac:	str	x8, [x19, #3152]
    14b0:	str	w5, [x19, #3184]
    14b4:	str	x11, [x3, #24]
    14b8:	str	w6, [x3, #32]
    14bc:	add	x0, x19, #0xc, lsl #12
    14c0:	ldr	w1, [x19, #1092]
    14c4:	ldr	w0, [x0, #14928]
    14c8:	add	w0, w0, #0x1
    14cc:	cmp	w1, w0
    14d0:	b.eq	1510 <BZ2_bzDecompress+0xae8>  // b.none
    14d4:	mov	w22, #0x0                   	// #0
    14d8:	b	15d8 <BZ2_bzDecompress+0xbb0>
    14dc:	mov	w1, #0x0                   	// #0
    14e0:	b	1474 <BZ2_bzDecompress+0xa4c>
    14e4:	cmp	w0, #0x9
    14e8:	b.le	a64 <BZ2_bzDecompress+0x3c>
    14ec:	b	1588 <BZ2_bzDecompress+0xb60>
    14f0:	ldr	w0, [x19, #8]
    14f4:	cmp	w0, #0x2
    14f8:	b.eq	a60 <BZ2_bzDecompress+0x38>  // b.none
    14fc:	b	15d8 <BZ2_bzDecompress+0xbb0>
    1500:	mov	w22, #0xfffffffe            	// #-2
    1504:	b	15d8 <BZ2_bzDecompress+0xbb0>
    1508:	mov	w22, #0xffffffff            	// #-1
    150c:	b	15d8 <BZ2_bzDecompress+0xbb0>
    1510:	ldr	w0, [x19, #16]
    1514:	cbnz	w0, 14d4 <BZ2_bzDecompress+0xaac>
    1518:	ldr	w3, [x19, #3184]
    151c:	ldr	w0, [x19, #52]
    1520:	mvn	w3, w3
    1524:	str	w3, [x19, #3184]
    1528:	cmp	w0, #0x2
    152c:	b.le	1548 <BZ2_bzDecompress+0xb20>
    1530:	adrp	x0, 0 <stderr>
    1534:	ldr	w2, [x19, #3176]
    1538:	adrp	x1, 0 <add_pair_to_block>
    153c:	add	x1, x1, #0x0
    1540:	ldr	x0, [x0]
    1544:	bl	0 <fprintf>
    1548:	ldr	w0, [x19, #52]
    154c:	cmp	w0, #0x1
    1550:	b.le	1564 <BZ2_bzDecompress+0xb3c>
    1554:	adrp	x0, 0 <stderr>
    1558:	ldr	x1, [x0]
    155c:	mov	w0, #0x5d                  	// #93
    1560:	bl	0 <fputc>
    1564:	ldr	w0, [x19, #3176]
    1568:	ldr	w1, [x19, #3184]
    156c:	cmp	w1, w0
    1570:	b.ne	15d4 <BZ2_bzDecompress+0xbac>  // b.any
    1574:	ldr	w0, [x19, #3188]
    1578:	eor	w0, w1, w0, ror #31
    157c:	str	w0, [x19, #3188]
    1580:	mov	w0, #0xe                   	// #14
    1584:	str	w0, [x19, #8]
    1588:	mov	x0, x19
    158c:	bl	0 <BZ2_decompress>
    1590:	mov	w22, w0
    1594:	cmp	w0, #0x4
    1598:	b.ne	14f0 <BZ2_bzDecompress+0xac8>  // b.any
    159c:	ldr	w0, [x19, #52]
    15a0:	cmp	w0, #0x2
    15a4:	b.le	15c4 <BZ2_bzDecompress+0xb9c>
    15a8:	adrp	x0, 0 <stderr>
    15ac:	ldr	w2, [x19, #3180]
    15b0:	ldr	w3, [x19, #3188]
    15b4:	adrp	x1, 0 <add_pair_to_block>
    15b8:	ldr	x0, [x0]
    15bc:	add	x1, x1, #0x0
    15c0:	bl	0 <fprintf>
    15c4:	ldr	w0, [x19, #3180]
    15c8:	ldr	w1, [x19, #3188]
    15cc:	cmp	w1, w0
    15d0:	b.eq	15d8 <BZ2_bzDecompress+0xbb0>  // b.none
    15d4:	mov	w22, #0xfffffffc            	// #-4
    15d8:	mov	w0, w22
    15dc:	ldp	x19, x20, [sp, #16]
    15e0:	ldp	x21, x22, [sp, #32]
    15e4:	ldp	x29, x30, [sp], #48
    15e8:	ret

00000000000015ec <BZ2_bzDecompressEnd>:
    15ec:	cbz	x0, 1664 <BZ2_bzDecompressEnd+0x78>
    15f0:	stp	x29, x30, [sp, #-32]!
    15f4:	mov	x29, sp
    15f8:	stp	x19, x20, [sp, #16]
    15fc:	mov	x19, x0
    1600:	ldr	x20, [x0, #48]
    1604:	cbz	x20, 166c <BZ2_bzDecompressEnd+0x80>
    1608:	ldr	x0, [x20]
    160c:	cmp	x0, x19
    1610:	b.ne	166c <BZ2_bzDecompressEnd+0x80>  // b.any
    1614:	ldr	x1, [x20, #3152]
    1618:	cbz	x1, 1624 <BZ2_bzDecompressEnd+0x38>
    161c:	ldp	x2, x0, [x19, #64]
    1620:	blr	x2
    1624:	ldr	x1, [x20, #3160]
    1628:	cbz	x1, 1634 <BZ2_bzDecompressEnd+0x48>
    162c:	ldp	x2, x0, [x19, #64]
    1630:	blr	x2
    1634:	ldr	x1, [x20, #3168]
    1638:	cbz	x1, 1644 <BZ2_bzDecompressEnd+0x58>
    163c:	ldp	x2, x0, [x19, #64]
    1640:	blr	x2
    1644:	ldp	x2, x0, [x19, #64]
    1648:	ldr	x1, [x19, #48]
    164c:	blr	x2
    1650:	str	xzr, [x19, #48]
    1654:	mov	w0, #0x0                   	// #0
    1658:	ldp	x19, x20, [sp, #16]
    165c:	ldp	x29, x30, [sp], #32
    1660:	ret
    1664:	mov	w0, #0xfffffffe            	// #-2
    1668:	ret
    166c:	mov	w0, #0xfffffffe            	// #-2
    1670:	b	1658 <BZ2_bzDecompressEnd+0x6c>

0000000000001674 <BZ2_bzWriteOpen>:
    1674:	stp	x29, x30, [sp, #-80]!
    1678:	mov	x29, sp
    167c:	stp	x19, x20, [sp, #16]
    1680:	mov	x20, x0
    1684:	stp	x21, x22, [sp, #32]
    1688:	mov	x21, x1
    168c:	mov	w22, w4
    1690:	stp	x23, x24, [sp, #48]
    1694:	mov	w23, w2
    1698:	mov	w24, w3
    169c:	str	x25, [sp, #64]
    16a0:	cbz	x0, 177c <BZ2_bzWriteOpen+0x108>
    16a4:	str	wzr, [x0]
    16a8:	cbnz	x1, 1780 <BZ2_bzWriteOpen+0x10c>
    16ac:	mov	w0, #0xfffffffe            	// #-2
    16b0:	str	w0, [x20]
    16b4:	b	179c <BZ2_bzWriteOpen+0x128>
    16b8:	mov	x0, x21
    16bc:	bl	0 <ferror>
    16c0:	cbz	w0, 16d0 <BZ2_bzWriteOpen+0x5c>
    16c4:	cbz	x20, 179c <BZ2_bzWriteOpen+0x128>
    16c8:	mov	w0, #0xfffffffa            	// #-6
    16cc:	b	16b0 <BZ2_bzWriteOpen+0x3c>
    16d0:	mov	x0, #0x13f0                	// #5104
    16d4:	bl	0 <malloc>
    16d8:	mov	x19, x0
    16dc:	cbnz	x0, 1708 <BZ2_bzWriteOpen+0x94>
    16e0:	cbz	x20, 179c <BZ2_bzWriteOpen+0x128>
    16e4:	mov	w0, #0xfffffffd            	// #-3
    16e8:	str	w0, [x20]
    16ec:	mov	x0, x19
    16f0:	ldp	x19, x20, [sp, #16]
    16f4:	ldp	x21, x22, [sp, #32]
    16f8:	ldp	x23, x24, [sp, #48]
    16fc:	ldr	x25, [sp, #64]
    1700:	ldp	x29, x30, [sp], #80
    1704:	ret
    1708:	cbz	x20, 1710 <BZ2_bzWriteOpen+0x9c>
    170c:	str	wzr, [x20]
    1710:	add	x25, x19, #0x1, lsl #12
    1714:	str	wzr, [x19, #5096]
    1718:	cmp	w22, #0x0
    171c:	mov	w3, #0x1e                  	// #30
    1720:	mov	x0, #0x1398                	// #5016
    1724:	csel	w3, w22, w3, ne  // ne = any
    1728:	strb	wzr, [x25, #1004]
    172c:	mov	w2, w24
    1730:	str	x21, [x19]
    1734:	mov	w21, #0x1                   	// #1
    1738:	str	wzr, [x19, #5008]
    173c:	mov	w1, w23
    1740:	strb	w21, [x25, #916]
    1744:	add	x0, x19, x0
    1748:	str	xzr, [x19, #5072]
    174c:	str	xzr, [x19, #5080]
    1750:	str	xzr, [x19, #5088]
    1754:	bl	550 <BZ2_bzCompressInit>
    1758:	cbz	w0, 1770 <BZ2_bzWriteOpen+0xfc>
    175c:	cbz	x20, 1764 <BZ2_bzWriteOpen+0xf0>
    1760:	str	w0, [x20]
    1764:	mov	x0, x19
    1768:	bl	0 <free>
    176c:	b	179c <BZ2_bzWriteOpen+0x128>
    1770:	str	wzr, [x19, #5024]
    1774:	strb	w21, [x25, #1004]
    1778:	b	16ec <BZ2_bzWriteOpen+0x78>
    177c:	cbz	x1, 179c <BZ2_bzWriteOpen+0x128>
    1780:	sub	w0, w23, #0x1
    1784:	cmp	w0, #0x8
    1788:	b.hi	1798 <BZ2_bzWriteOpen+0x124>  // b.pmore
    178c:	cmp	w22, #0xfa
    1790:	ccmp	w24, #0x4, #0x2, ls  // ls = plast
    1794:	b.ls	16b8 <BZ2_bzWriteOpen+0x44>  // b.plast
    1798:	cbnz	x20, 16ac <BZ2_bzWriteOpen+0x38>
    179c:	mov	x19, #0x0                   	// #0
    17a0:	b	16ec <BZ2_bzWriteOpen+0x78>

00000000000017a4 <BZ2_bzWrite>:
    17a4:	stp	x29, x30, [sp, #-80]!
    17a8:	mov	x29, sp
    17ac:	stp	x19, x20, [sp, #16]
    17b0:	mov	x20, x0
    17b4:	mov	x19, x1
    17b8:	stp	x21, x22, [sp, #32]
    17bc:	mov	x22, x2
    17c0:	mov	w21, w3
    17c4:	stp	x23, x24, [sp, #48]
    17c8:	str	x25, [sp, #64]
    17cc:	cbz	x0, 18e0 <BZ2_bzWrite+0x13c>
    17d0:	str	wzr, [x0]
    17d4:	cbz	x1, 17e8 <BZ2_bzWrite+0x44>
    17d8:	str	wzr, [x19, #5096]
    17dc:	cbz	x22, 17e4 <BZ2_bzWrite+0x40>
    17e0:	tbz	w21, #31, 1800 <BZ2_bzWrite+0x5c>
    17e4:	cbz	x20, 17f4 <BZ2_bzWrite+0x50>
    17e8:	mov	w0, #0xfffffffe            	// #-2
    17ec:	str	w0, [x20]
    17f0:	cbz	x19, 184c <BZ2_bzWrite+0xa8>
    17f4:	mov	w0, #0xfffffffe            	// #-2
    17f8:	str	w0, [x19, #5096]
    17fc:	b	184c <BZ2_bzWrite+0xa8>
    1800:	add	x0, x19, #0x1, lsl #12
    1804:	ldrb	w0, [x0, #916]
    1808:	cbnz	w0, 181c <BZ2_bzWrite+0x78>
    180c:	mov	w0, #0xffffffff            	// #-1
    1810:	cbz	x20, 17f8 <BZ2_bzWrite+0x54>
    1814:	str	w0, [x20]
    1818:	b	17f8 <BZ2_bzWrite+0x54>
    181c:	ldr	x0, [x19]
    1820:	bl	0 <ferror>
    1824:	cbz	w0, 183c <BZ2_bzWrite+0x98>
    1828:	cbz	x20, 1834 <BZ2_bzWrite+0x90>
    182c:	mov	w0, #0xfffffffa            	// #-6
    1830:	str	w0, [x20]
    1834:	mov	w0, #0xfffffffa            	// #-6
    1838:	b	17f8 <BZ2_bzWrite+0x54>
    183c:	cbnz	w21, 1864 <BZ2_bzWrite+0xc0>
    1840:	cbz	x20, 1848 <BZ2_bzWrite+0xa4>
    1844:	str	wzr, [x20]
    1848:	str	wzr, [x19, #5096]
    184c:	ldp	x19, x20, [sp, #16]
    1850:	ldp	x21, x22, [sp, #32]
    1854:	ldp	x23, x24, [sp, #48]
    1858:	ldr	x25, [sp, #64]
    185c:	ldp	x29, x30, [sp], #80
    1860:	ret
    1864:	mov	x0, #0x1398                	// #5016
    1868:	add	x23, x19, x0
    186c:	str	x22, [x19, #5016]
    1870:	add	x22, x19, #0x8
    1874:	mov	w24, #0x1387                	// #4999
    1878:	str	w21, [x19, #5024]
    187c:	mov	w21, #0x1388                	// #5000
    1880:	str	x22, [x19, #5040]
    1884:	mov	x0, x23
    1888:	str	w21, [x19, #5048]
    188c:	mov	w1, #0x0                   	// #0
    1890:	bl	714 <BZ2_bzCompress>
    1894:	cmp	w0, #0x1
    1898:	b.ne	1810 <BZ2_bzWrite+0x6c>  // b.any
    189c:	ldr	w2, [x19, #5048]
    18a0:	cmp	w2, w24
    18a4:	b.hi	18d4 <BZ2_bzWrite+0x130>  // b.pmore
    18a8:	ldr	x3, [x19]
    18ac:	sub	w25, w21, w2
    18b0:	mov	x0, x22
    18b4:	sub	w2, w21, w2
    18b8:	mov	x1, #0x1                   	// #1
    18bc:	bl	0 <fwrite>
    18c0:	cmp	w25, w0
    18c4:	b.ne	1828 <BZ2_bzWrite+0x84>  // b.any
    18c8:	ldr	x0, [x19]
    18cc:	bl	0 <ferror>
    18d0:	cbnz	w0, 1828 <BZ2_bzWrite+0x84>
    18d4:	ldr	w0, [x19, #5024]
    18d8:	cbnz	w0, 1880 <BZ2_bzWrite+0xdc>
    18dc:	b	1840 <BZ2_bzWrite+0x9c>
    18e0:	cbnz	x1, 17d8 <BZ2_bzWrite+0x34>
    18e4:	b	184c <BZ2_bzWrite+0xa8>

00000000000018e8 <BZ2_bzWriteClose64>:
    18e8:	stp	x29, x30, [sp, #-112]!
    18ec:	mov	x29, sp
    18f0:	stp	x19, x20, [sp, #16]
    18f4:	mov	x20, x0
    18f8:	stp	x21, x22, [sp, #32]
    18fc:	stp	x23, x24, [sp, #48]
    1900:	stp	x25, x26, [sp, #64]
    1904:	stp	x27, x28, [sp, #80]
    1908:	cbnz	x1, 1930 <BZ2_bzWriteClose64+0x48>
    190c:	cbz	x0, 1914 <BZ2_bzWriteClose64+0x2c>
    1910:	str	wzr, [x0]
    1914:	ldp	x19, x20, [sp, #16]
    1918:	ldp	x21, x22, [sp, #32]
    191c:	ldp	x23, x24, [sp, #48]
    1920:	ldp	x25, x26, [sp, #64]
    1924:	ldp	x27, x28, [sp, #80]
    1928:	ldp	x29, x30, [sp], #112
    192c:	ret
    1930:	add	x0, x1, #0x1, lsl #12
    1934:	mov	x19, x1
    1938:	ldrb	w0, [x0, #916]
    193c:	cbnz	w0, 1954 <BZ2_bzWriteClose64+0x6c>
    1940:	mov	w0, #0xffffffff            	// #-1
    1944:	cbz	x20, 194c <BZ2_bzWriteClose64+0x64>
    1948:	str	w0, [x20]
    194c:	str	w0, [x19, #5096]
    1950:	b	1914 <BZ2_bzWriteClose64+0x2c>
    1954:	ldr	x0, [x1]
    1958:	mov	w25, w2
    195c:	mov	x21, x3
    1960:	mov	x22, x4
    1964:	mov	x23, x5
    1968:	mov	x24, x6
    196c:	bl	0 <ferror>
    1970:	cbz	w0, 1988 <BZ2_bzWriteClose64+0xa0>
    1974:	cbz	x20, 1980 <BZ2_bzWriteClose64+0x98>
    1978:	mov	w0, #0xfffffffa            	// #-6
    197c:	str	w0, [x20]
    1980:	mov	w0, #0xfffffffa            	// #-6
    1984:	b	194c <BZ2_bzWriteClose64+0x64>
    1988:	cbz	x21, 1990 <BZ2_bzWriteClose64+0xa8>
    198c:	str	wzr, [x21]
    1990:	cbz	x22, 1998 <BZ2_bzWriteClose64+0xb0>
    1994:	str	wzr, [x22]
    1998:	cbz	x23, 19a0 <BZ2_bzWriteClose64+0xb8>
    199c:	str	wzr, [x23]
    19a0:	cbz	x24, 19a8 <BZ2_bzWriteClose64+0xc0>
    19a4:	str	wzr, [x24]
    19a8:	cbnz	w25, 1a64 <BZ2_bzWriteClose64+0x17c>
    19ac:	ldr	w0, [x19, #5096]
    19b0:	cbnz	w0, 1a44 <BZ2_bzWriteClose64+0x15c>
    19b4:	mov	x1, #0x1398                	// #5016
    19b8:	add	x26, x19, #0x8
    19bc:	add	x27, x19, x1
    19c0:	mov	w25, #0x1388                	// #5000
    19c4:	str	x26, [x19, #5040]
    19c8:	mov	x0, x27
    19cc:	str	w25, [x19, #5048]
    19d0:	mov	w1, #0x2                   	// #2
    19d4:	bl	714 <BZ2_bzCompress>
    19d8:	mov	w28, w0
    19dc:	sub	w0, w0, #0x3
    19e0:	cmp	w0, #0x1
    19e4:	b.ls	19f8 <BZ2_bzWriteClose64+0x110>  // b.plast
    19e8:	cbz	x20, 19f0 <BZ2_bzWriteClose64+0x108>
    19ec:	str	w28, [x20]
    19f0:	str	w28, [x19, #5096]
    19f4:	b	1914 <BZ2_bzWriteClose64+0x2c>
    19f8:	ldr	w2, [x19, #5048]
    19fc:	mov	w0, #0x1387                	// #4999
    1a00:	cmp	w2, w0
    1a04:	b.hi	1a3c <BZ2_bzWriteClose64+0x154>  // b.pmore
    1a08:	ldr	x3, [x19]
    1a0c:	sub	w5, w25, w2
    1a10:	mov	x0, x26
    1a14:	sub	w2, w25, w2
    1a18:	mov	x1, #0x1                   	// #1
    1a1c:	str	w5, [sp, #108]
    1a20:	bl	0 <fwrite>
    1a24:	ldr	w5, [sp, #108]
    1a28:	cmp	w5, w0
    1a2c:	b.ne	1974 <BZ2_bzWriteClose64+0x8c>  // b.any
    1a30:	ldr	x0, [x19]
    1a34:	bl	0 <ferror>
    1a38:	cbnz	w0, 1974 <BZ2_bzWriteClose64+0x8c>
    1a3c:	cmp	w28, #0x4
    1a40:	b.ne	19c4 <BZ2_bzWriteClose64+0xdc>  // b.any
    1a44:	ldr	x0, [x19]
    1a48:	bl	0 <ferror>
    1a4c:	cbnz	w0, 1a64 <BZ2_bzWriteClose64+0x17c>
    1a50:	ldr	x0, [x19]
    1a54:	bl	0 <fflush>
    1a58:	ldr	x0, [x19]
    1a5c:	bl	0 <ferror>
    1a60:	cbnz	w0, 1974 <BZ2_bzWriteClose64+0x8c>
    1a64:	cbz	x21, 1a70 <BZ2_bzWriteClose64+0x188>
    1a68:	ldr	w0, [x19, #5028]
    1a6c:	str	w0, [x21]
    1a70:	cbz	x22, 1a7c <BZ2_bzWriteClose64+0x194>
    1a74:	ldr	w0, [x19, #5032]
    1a78:	str	w0, [x22]
    1a7c:	cbz	x23, 1a88 <BZ2_bzWriteClose64+0x1a0>
    1a80:	ldr	w0, [x19, #5052]
    1a84:	str	w0, [x23]
    1a88:	cbz	x24, 1a94 <BZ2_bzWriteClose64+0x1ac>
    1a8c:	ldr	w0, [x19, #5056]
    1a90:	str	w0, [x24]
    1a94:	cbz	x20, 1a9c <BZ2_bzWriteClose64+0x1b4>
    1a98:	str	wzr, [x20]
    1a9c:	str	wzr, [x19, #5096]
    1aa0:	mov	x0, #0x1398                	// #5016
    1aa4:	add	x0, x19, x0
    1aa8:	bl	89c <BZ2_bzCompressEnd>
    1aac:	mov	x0, x19
    1ab0:	ldp	x19, x20, [sp, #16]
    1ab4:	ldp	x21, x22, [sp, #32]
    1ab8:	ldp	x23, x24, [sp, #48]
    1abc:	ldp	x25, x26, [sp, #64]
    1ac0:	ldp	x27, x28, [sp, #80]
    1ac4:	ldp	x29, x30, [sp], #112
    1ac8:	b	0 <free>

0000000000001acc <BZ2_bzWriteClose>:
    1acc:	mov	x5, x4
    1ad0:	mov	x6, #0x0                   	// #0
    1ad4:	mov	x4, #0x0                   	// #0
    1ad8:	b	18e8 <BZ2_bzWriteClose64>

0000000000001adc <BZ2_bzReadOpen>:
    1adc:	stp	x29, x30, [sp, #-80]!
    1ae0:	mov	x29, sp
    1ae4:	stp	x19, x20, [sp, #16]
    1ae8:	mov	x20, x0
    1aec:	stp	x21, x22, [sp, #32]
    1af0:	mov	x22, x4
    1af4:	mov	w21, w5
    1af8:	stp	x23, x24, [sp, #48]
    1afc:	mov	x23, x1
    1b00:	mov	w24, w2
    1b04:	stp	x25, x26, [sp, #64]
    1b08:	mov	w25, w3
    1b0c:	cbz	x0, 1b14 <BZ2_bzReadOpen+0x38>
    1b10:	str	wzr, [x0]
    1b14:	cmp	x23, #0x0
    1b18:	ccmp	w25, #0x1, #0x2, ne  // ne = any
    1b1c:	b.hi	1b44 <BZ2_bzReadOpen+0x68>  // b.pmore
    1b20:	cmp	w24, #0x4
    1b24:	b.hi	1b44 <BZ2_bzReadOpen+0x68>  // b.pmore
    1b28:	cmp	x22, #0x0
    1b2c:	ccmp	w21, #0x0, #0x4, eq  // eq = none
    1b30:	b.ne	1b44 <BZ2_bzReadOpen+0x68>  // b.any
    1b34:	cmp	x22, #0x0
    1b38:	mov	w0, #0x1388                	// #5000
    1b3c:	ccmp	w21, w0, #0x0, ne  // ne = any
    1b40:	b.ls	1b74 <BZ2_bzReadOpen+0x98>  // b.plast
    1b44:	cbnz	x20, 1b68 <BZ2_bzReadOpen+0x8c>
    1b48:	mov	x19, #0x0                   	// #0
    1b4c:	mov	x0, x19
    1b50:	ldp	x19, x20, [sp, #16]
    1b54:	ldp	x21, x22, [sp, #32]
    1b58:	ldp	x23, x24, [sp, #48]
    1b5c:	ldp	x25, x26, [sp, #64]
    1b60:	ldp	x29, x30, [sp], #80
    1b64:	ret
    1b68:	mov	w0, #0xfffffffe            	// #-2
    1b6c:	str	w0, [x20]
    1b70:	b	1b48 <BZ2_bzReadOpen+0x6c>
    1b74:	mov	x0, x23
    1b78:	bl	0 <ferror>
    1b7c:	cbz	w0, 1b8c <BZ2_bzReadOpen+0xb0>
    1b80:	cbz	x20, 1b48 <BZ2_bzReadOpen+0x6c>
    1b84:	mov	w0, #0xfffffffa            	// #-6
    1b88:	b	1b6c <BZ2_bzReadOpen+0x90>
    1b8c:	mov	x0, #0x13f0                	// #5104
    1b90:	bl	0 <malloc>
    1b94:	mov	x19, x0
    1b98:	cbnz	x0, 1bac <BZ2_bzReadOpen+0xd0>
    1b9c:	cbz	x20, 1b48 <BZ2_bzReadOpen+0x6c>
    1ba0:	mov	w0, #0xfffffffd            	// #-3
    1ba4:	str	w0, [x20]
    1ba8:	b	1b4c <BZ2_bzReadOpen+0x70>
    1bac:	cbz	x20, 1bb4 <BZ2_bzReadOpen+0xd8>
    1bb0:	str	wzr, [x20]
    1bb4:	add	x26, x19, #0x1, lsl #12
    1bb8:	str	wzr, [x19, #5096]
    1bbc:	mov	x0, #0x0                   	// #0
    1bc0:	strb	wzr, [x26, #1004]
    1bc4:	str	x23, [x19]
    1bc8:	str	wzr, [x19, #5008]
    1bcc:	strb	wzr, [x26, #916]
    1bd0:	str	xzr, [x19, #5072]
    1bd4:	str	xzr, [x19, #5080]
    1bd8:	str	xzr, [x19, #5088]
    1bdc:	sub	w1, w21, w0
    1be0:	cmp	w1, #0x0
    1be4:	b.gt	1c14 <BZ2_bzReadOpen+0x138>
    1be8:	mov	x0, #0x1398                	// #5016
    1bec:	mov	w2, w25
    1bf0:	mov	w1, w24
    1bf4:	add	x0, x19, x0
    1bf8:	bl	924 <BZ2_bzDecompressInit>
    1bfc:	cbz	w0, 1c34 <BZ2_bzReadOpen+0x158>
    1c00:	cbz	x20, 1c08 <BZ2_bzReadOpen+0x12c>
    1c04:	str	w0, [x20]
    1c08:	mov	x0, x19
    1c0c:	bl	0 <free>
    1c10:	b	1b48 <BZ2_bzReadOpen+0x6c>
    1c14:	ldr	w1, [x19, #5008]
    1c18:	ldrb	w3, [x22, x0]
    1c1c:	add	x0, x0, #0x1
    1c20:	add	x2, x19, w1, sxtw
    1c24:	add	w1, w1, #0x1
    1c28:	strb	w3, [x2, #8]
    1c2c:	str	w1, [x19, #5008]
    1c30:	b	1bdc <BZ2_bzReadOpen+0x100>
    1c34:	ldr	w0, [x19, #5008]
    1c38:	str	w0, [x19, #5024]
    1c3c:	add	x0, x19, #0x8
    1c40:	str	x0, [x19, #5016]
    1c44:	mov	w0, #0x1                   	// #1
    1c48:	strb	w0, [x26, #1004]
    1c4c:	b	1b4c <BZ2_bzReadOpen+0x70>

0000000000001c50 <bzopen_or_bzdopen>:
    1c50:	mov	x12, #0x13f0                	// #5104
    1c54:	sub	sp, sp, x12
    1c58:	stp	x29, x30, [sp]
    1c5c:	mov	x29, sp
    1c60:	stp	x23, x24, [sp, #48]
    1c64:	mov	x23, x0
    1c68:	adrp	x0, 0 <add_pair_to_block>
    1c6c:	stp	x19, x20, [sp, #16]
    1c70:	ldrb	w0, [x0]
    1c74:	stp	x21, x22, [sp, #32]
    1c78:	stp	x25, x26, [sp, #64]
    1c7c:	strb	w0, [sp, #88]
    1c80:	stur	xzr, [sp, #89]
    1c84:	strb	wzr, [sp, #97]
    1c88:	cbnz	x2, 1db4 <bzopen_or_bzdopen+0x164>
    1c8c:	mov	x20, #0x0                   	// #0
    1c90:	mov	x0, x20
    1c94:	mov	x12, #0x13f0                	// #5104
    1c98:	ldp	x29, x30, [sp]
    1c9c:	ldp	x19, x20, [sp, #16]
    1ca0:	ldp	x21, x22, [sp, #32]
    1ca4:	ldp	x23, x24, [sp, #48]
    1ca8:	ldp	x25, x26, [sp, #64]
    1cac:	add	sp, sp, x12
    1cb0:	ret
    1cb4:	cmp	w19, #0x73
    1cb8:	b.eq	1d9c <bzopen_or_bzdopen+0x14c>  // b.none
    1cbc:	cmp	w19, #0x77
    1cc0:	b.eq	1da4 <bzopen_or_bzdopen+0x154>  // b.none
    1cc4:	cmp	w19, #0x72
    1cc8:	b.eq	1dac <bzopen_or_bzdopen+0x15c>  // b.none
    1ccc:	bl	0 <__ctype_b_loc>
    1cd0:	ldr	x0, [x0]
    1cd4:	ubfiz	x1, x19, #1, #8
    1cd8:	ldrh	w0, [x0, x1]
    1cdc:	tbz	w0, #11, 1ce4 <bzopen_or_bzdopen+0x94>
    1ce0:	sub	w20, w19, #0x30
    1ce4:	add	x21, x21, #0x1
    1ce8:	ldrb	w19, [x21]
    1cec:	cbnz	w19, 1cb4 <bzopen_or_bzdopen+0x64>
    1cf0:	cmp	w22, #0x0
    1cf4:	adrp	x0, 0 <add_pair_to_block>
    1cf8:	adrp	x1, 0 <add_pair_to_block>
    1cfc:	add	x0, x0, #0x0
    1d00:	add	x1, x1, #0x0
    1d04:	csel	x1, x1, x0, ne  // ne = any
    1d08:	add	x0, sp, #0x58
    1d0c:	bl	0 <strcat>
    1d10:	adrp	x1, 0 <add_pair_to_block>
    1d14:	add	x0, sp, #0x58
    1d18:	add	x1, x1, #0x0
    1d1c:	bl	0 <strcat>
    1d20:	cbnz	w26, 1e18 <bzopen_or_bzdopen+0x1c8>
    1d24:	cbz	x23, 1d30 <bzopen_or_bzdopen+0xe0>
    1d28:	ldrb	w0, [x23]
    1d2c:	cbnz	w0, 1dfc <bzopen_or_bzdopen+0x1ac>
    1d30:	cbz	w22, 1dd0 <bzopen_or_bzdopen+0x180>
    1d34:	adrp	x0, 0 <stdout>
    1d38:	ldr	x19, [x0]
    1d3c:	cbz	x19, 1c8c <bzopen_or_bzdopen+0x3c>
    1d40:	cmp	w20, #0x9
    1d44:	mov	w2, #0x9                   	// #9
    1d48:	csel	w2, w20, w2, le
    1d4c:	mov	x1, x19
    1d50:	cmp	w2, #0x0
    1d54:	add	x0, sp, #0x54
    1d58:	csinc	w2, w2, wzr, gt
    1d5c:	mov	w4, #0x1e                  	// #30
    1d60:	mov	w3, #0x0                   	// #0
    1d64:	bl	1674 <BZ2_bzWriteOpen>
    1d68:	mov	x20, x0
    1d6c:	cbnz	x0, 1c90 <bzopen_or_bzdopen+0x40>
    1d70:	adrp	x0, 0 <stdin>
    1d74:	ldr	x0, [x0]
    1d78:	cmp	x0, x19
    1d7c:	b.eq	1c8c <bzopen_or_bzdopen+0x3c>  // b.none
    1d80:	adrp	x0, 0 <stdout>
    1d84:	ldr	x0, [x0]
    1d88:	cmp	x0, x19
    1d8c:	b.eq	1c8c <bzopen_or_bzdopen+0x3c>  // b.none
    1d90:	mov	x0, x19
    1d94:	bl	0 <fclose>
    1d98:	b	1c90 <bzopen_or_bzdopen+0x40>
    1d9c:	mov	w25, #0x1                   	// #1
    1da0:	b	1ce4 <bzopen_or_bzdopen+0x94>
    1da4:	mov	w22, #0x1                   	// #1
    1da8:	b	1ce4 <bzopen_or_bzdopen+0x94>
    1dac:	mov	w22, #0x0                   	// #0
    1db0:	b	1ce4 <bzopen_or_bzdopen+0x94>
    1db4:	mov	w24, w1
    1db8:	mov	x21, x2
    1dbc:	mov	w26, w3
    1dc0:	mov	w25, #0x0                   	// #0
    1dc4:	mov	w22, #0x0                   	// #0
    1dc8:	mov	w20, #0x9                   	// #9
    1dcc:	b	1ce8 <bzopen_or_bzdopen+0x98>
    1dd0:	adrp	x0, 0 <stdin>
    1dd4:	ldr	x19, [x0]
    1dd8:	cbz	x19, 1c8c <bzopen_or_bzdopen+0x3c>
    1ddc:	add	x4, sp, #0x68
    1de0:	mov	w3, w25
    1de4:	mov	x1, x19
    1de8:	add	x0, sp, #0x54
    1dec:	mov	w5, #0x0                   	// #0
    1df0:	mov	w2, #0x0                   	// #0
    1df4:	bl	1adc <BZ2_bzReadOpen>
    1df8:	b	1d68 <bzopen_or_bzdopen+0x118>
    1dfc:	add	x1, sp, #0x58
    1e00:	mov	x0, x23
    1e04:	bl	0 <fopen64>
    1e08:	mov	x19, x0
    1e0c:	cbz	x0, 1c8c <bzopen_or_bzdopen+0x3c>
    1e10:	cbz	w22, 1ddc <bzopen_or_bzdopen+0x18c>
    1e14:	b	1d40 <bzopen_or_bzdopen+0xf0>
    1e18:	add	x1, sp, #0x58
    1e1c:	mov	w0, w24
    1e20:	bl	0 <fdopen>
    1e24:	b	1e08 <bzopen_or_bzdopen+0x1b8>

0000000000001e28 <BZ2_bzReadClose>:
    1e28:	stp	x29, x30, [sp, #-32]!
    1e2c:	mov	x29, sp
    1e30:	str	x19, [sp, #16]
    1e34:	mov	x19, x1
    1e38:	cbz	x0, 1e40 <BZ2_bzReadClose+0x18>
    1e3c:	str	wzr, [x0]
    1e40:	cbz	x19, 1e64 <BZ2_bzReadClose+0x3c>
    1e44:	add	x1, x19, #0x1, lsl #12
    1e48:	str	wzr, [x19, #5096]
    1e4c:	ldrb	w2, [x1, #916]
    1e50:	cbz	w2, 1e70 <BZ2_bzReadClose+0x48>
    1e54:	mov	w1, #0xffffffff            	// #-1
    1e58:	cbz	x0, 1e60 <BZ2_bzReadClose+0x38>
    1e5c:	str	w1, [x0]
    1e60:	str	w1, [x19, #5096]
    1e64:	ldr	x19, [sp, #16]
    1e68:	ldp	x29, x30, [sp], #32
    1e6c:	ret
    1e70:	ldrb	w0, [x1, #1004]
    1e74:	cbz	w0, 1e84 <BZ2_bzReadClose+0x5c>
    1e78:	mov	x0, #0x1398                	// #5016
    1e7c:	add	x0, x19, x0
    1e80:	bl	15ec <BZ2_bzDecompressEnd>
    1e84:	mov	x0, x19
    1e88:	ldr	x19, [sp, #16]
    1e8c:	ldp	x29, x30, [sp], #32
    1e90:	b	0 <free>

0000000000001e94 <BZ2_bzRead>:
    1e94:	stp	x29, x30, [sp, #-64]!
    1e98:	mov	x29, sp
    1e9c:	stp	x19, x20, [sp, #16]
    1ea0:	mov	x20, x0
    1ea4:	mov	x19, x1
    1ea8:	stp	x21, x22, [sp, #32]
    1eac:	mov	w21, w3
    1eb0:	stp	x23, x24, [sp, #48]
    1eb4:	cbz	x0, 2034 <BZ2_bzRead+0x1a0>
    1eb8:	str	wzr, [x0]
    1ebc:	cbz	x1, 1edc <BZ2_bzRead+0x48>
    1ec0:	str	wzr, [x19, #5096]
    1ec4:	cbz	x2, 1ecc <BZ2_bzRead+0x38>
    1ec8:	tbz	w21, #31, 1f04 <BZ2_bzRead+0x70>
    1ecc:	cbnz	x20, 1edc <BZ2_bzRead+0x48>
    1ed0:	mov	w0, #0xfffffffe            	// #-2
    1ed4:	str	w0, [x19, #5096]
    1ed8:	b	1ee8 <BZ2_bzRead+0x54>
    1edc:	mov	w0, #0xfffffffe            	// #-2
    1ee0:	str	w0, [x20]
    1ee4:	cbnz	x19, 1ed0 <BZ2_bzRead+0x3c>
    1ee8:	mov	w21, #0x0                   	// #0
    1eec:	mov	w0, w21
    1ef0:	ldp	x19, x20, [sp, #16]
    1ef4:	ldp	x21, x22, [sp, #32]
    1ef8:	ldp	x23, x24, [sp, #48]
    1efc:	ldp	x29, x30, [sp], #64
    1f00:	ret
    1f04:	add	x0, x19, #0x1, lsl #12
    1f08:	ldrb	w0, [x0, #916]
    1f0c:	cbz	w0, 1f20 <BZ2_bzRead+0x8c>
    1f10:	mov	w0, #0xffffffff            	// #-1
    1f14:	cbz	x20, 1ed4 <BZ2_bzRead+0x40>
    1f18:	str	w0, [x20]
    1f1c:	b	1ed4 <BZ2_bzRead+0x40>
    1f20:	cbnz	w21, 1f34 <BZ2_bzRead+0xa0>
    1f24:	cbz	x20, 1f2c <BZ2_bzRead+0x98>
    1f28:	str	wzr, [x20]
    1f2c:	str	wzr, [x19, #5096]
    1f30:	b	1eec <BZ2_bzRead+0x58>
    1f34:	mov	x0, #0x1398                	// #5016
    1f38:	add	x23, x19, #0x8
    1f3c:	add	x24, x19, x0
    1f40:	str	x2, [x19, #5040]
    1f44:	str	w21, [x19, #5048]
    1f48:	ldr	x0, [x19]
    1f4c:	bl	0 <ferror>
    1f50:	cbz	w0, 1f68 <BZ2_bzRead+0xd4>
    1f54:	cbz	x20, 1f60 <BZ2_bzRead+0xcc>
    1f58:	mov	w0, #0xfffffffa            	// #-6
    1f5c:	str	w0, [x20]
    1f60:	mov	w0, #0xfffffffa            	// #-6
    1f64:	b	1ed4 <BZ2_bzRead+0x40>
    1f68:	ldr	w0, [x19, #5024]
    1f6c:	cbnz	w0, 1fbc <BZ2_bzRead+0x128>
    1f70:	ldr	x22, [x19]
    1f74:	mov	x0, x22
    1f78:	bl	0 <fgetc>
    1f7c:	cmn	w0, #0x1
    1f80:	b.eq	1fbc <BZ2_bzRead+0x128>  // b.none
    1f84:	mov	x1, x22
    1f88:	bl	0 <ungetc>
    1f8c:	ldr	x3, [x19]
    1f90:	mov	x0, x23
    1f94:	mov	x2, #0x1388                	// #5000
    1f98:	mov	x1, #0x1                   	// #1
    1f9c:	bl	0 <fread>
    1fa0:	mov	x22, x0
    1fa4:	ldr	x0, [x19]
    1fa8:	bl	0 <ferror>
    1fac:	cbnz	w0, 1f54 <BZ2_bzRead+0xc0>
    1fb0:	str	w22, [x19, #5008]
    1fb4:	str	x23, [x19, #5016]
    1fb8:	str	w22, [x19, #5024]
    1fbc:	mov	x0, x24
    1fc0:	bl	a28 <BZ2_bzDecompress>
    1fc4:	tst	w0, #0xfffffffb
    1fc8:	b.ne	1f14 <BZ2_bzRead+0x80>  // b.any
    1fcc:	cbnz	w0, 2010 <BZ2_bzRead+0x17c>
    1fd0:	ldr	x22, [x19]
    1fd4:	mov	x0, x22
    1fd8:	bl	0 <fgetc>
    1fdc:	cmn	w0, #0x1
    1fe0:	b.eq	1ff8 <BZ2_bzRead+0x164>  // b.none
    1fe4:	mov	x1, x22
    1fe8:	bl	0 <ungetc>
    1fec:	ldr	w0, [x19, #5048]
    1ff0:	cbnz	w0, 1f48 <BZ2_bzRead+0xb4>
    1ff4:	b	1f24 <BZ2_bzRead+0x90>
    1ff8:	ldr	w0, [x19, #5024]
    1ffc:	cbnz	w0, 1fec <BZ2_bzRead+0x158>
    2000:	ldr	w0, [x19, #5048]
    2004:	cbz	w0, 1f24 <BZ2_bzRead+0x90>
    2008:	mov	w0, #0xfffffff9            	// #-7
    200c:	b	1f14 <BZ2_bzRead+0x80>
    2010:	cmp	w0, #0x4
    2014:	b.ne	1fec <BZ2_bzRead+0x158>  // b.any
    2018:	cbz	x20, 2020 <BZ2_bzRead+0x18c>
    201c:	str	w0, [x20]
    2020:	mov	w0, #0x4                   	// #4
    2024:	str	w0, [x19, #5096]
    2028:	ldr	w0, [x19, #5048]
    202c:	sub	w21, w21, w0
    2030:	b	1eec <BZ2_bzRead+0x58>
    2034:	cbnz	x1, 1ec0 <BZ2_bzRead+0x2c>
    2038:	b	1ee8 <BZ2_bzRead+0x54>

000000000000203c <BZ2_bzReadGetUnused>:
    203c:	cbnz	x1, 2050 <BZ2_bzReadGetUnused+0x14>
    2040:	cbz	x0, 204c <BZ2_bzReadGetUnused+0x10>
    2044:	mov	w1, #0xfffffffe            	// #-2
    2048:	str	w1, [x0]
    204c:	ret
    2050:	ldr	w4, [x1, #5096]
    2054:	cmp	w4, #0x4
    2058:	b.eq	2070 <BZ2_bzReadGetUnused+0x34>  // b.none
    205c:	mov	w2, #0xffffffff            	// #-1
    2060:	cbz	x0, 2068 <BZ2_bzReadGetUnused+0x2c>
    2064:	str	w2, [x0]
    2068:	str	w2, [x1, #5096]
    206c:	b	204c <BZ2_bzReadGetUnused+0x10>
    2070:	cmp	x2, #0x0
    2074:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    2078:	b.ne	2084 <BZ2_bzReadGetUnused+0x48>  // b.any
    207c:	mov	w2, #0xfffffffe            	// #-2
    2080:	b	2060 <BZ2_bzReadGetUnused+0x24>
    2084:	cbz	x0, 208c <BZ2_bzReadGetUnused+0x50>
    2088:	str	wzr, [x0]
    208c:	ldr	w0, [x1, #5024]
    2090:	str	wzr, [x1, #5096]
    2094:	str	w0, [x3]
    2098:	ldr	x0, [x1, #5016]
    209c:	str	x0, [x2]
    20a0:	b	204c <BZ2_bzReadGetUnused+0x10>

00000000000020a4 <BZ2_bzBuffToBuffCompress>:
    20a4:	stp	x29, x30, [sp, #-144]!
    20a8:	cmp	x0, #0x0
    20ac:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    20b0:	mov	x29, sp
    20b4:	stp	x19, x20, [sp, #16]
    20b8:	mov	x20, x1
    20bc:	stp	x21, x22, [sp, #32]
    20c0:	str	x23, [sp, #48]
    20c4:	b.eq	21a4 <BZ2_bzBuffToBuffCompress+0x100>  // b.none
    20c8:	mov	x21, x0
    20cc:	cmp	x2, #0x0
    20d0:	sub	w0, w4, #0x1
    20d4:	mov	x22, x2
    20d8:	mov	w1, w4
    20dc:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    20e0:	b.hi	21a4 <BZ2_bzBuffToBuffCompress+0x100>  // b.pmore
    20e4:	mov	w2, w5
    20e8:	cmp	w5, #0x4
    20ec:	b.hi	21a4 <BZ2_bzBuffToBuffCompress+0x100>  // b.pmore
    20f0:	cmp	w6, #0xfa
    20f4:	b.hi	21a4 <BZ2_bzBuffToBuffCompress+0x100>  // b.pmore
    20f8:	cmp	w6, #0x0
    20fc:	mov	w23, w3
    2100:	add	x0, sp, #0x40
    2104:	mov	w3, #0x1e                  	// #30
    2108:	csel	w3, w6, w3, ne  // ne = any
    210c:	stp	xzr, xzr, [sp, #120]
    2110:	str	xzr, [sp, #136]
    2114:	bl	550 <BZ2_bzCompressInit>
    2118:	mov	w19, w0
    211c:	cbnz	w0, 2158 <BZ2_bzBuffToBuffCompress+0xb4>
    2120:	ldr	w0, [x20]
    2124:	mov	w1, #0x2                   	// #2
    2128:	str	x22, [sp, #64]
    212c:	str	w23, [sp, #72]
    2130:	str	x21, [sp, #88]
    2134:	str	w0, [sp, #96]
    2138:	add	x0, sp, #0x40
    213c:	bl	714 <BZ2_bzCompress>
    2140:	mov	w21, w0
    2144:	cmp	w0, #0x3
    2148:	b.ne	2170 <BZ2_bzBuffToBuffCompress+0xcc>  // b.any
    214c:	mov	w19, #0xfffffff8            	// #-8
    2150:	add	x0, sp, #0x40
    2154:	bl	89c <BZ2_bzCompressEnd>
    2158:	mov	w0, w19
    215c:	ldp	x19, x20, [sp, #16]
    2160:	ldp	x21, x22, [sp, #32]
    2164:	ldr	x23, [sp, #48]
    2168:	ldp	x29, x30, [sp], #144
    216c:	ret
    2170:	cmp	w0, #0x4
    2174:	b.eq	2188 <BZ2_bzBuffToBuffCompress+0xe4>  // b.none
    2178:	add	x0, sp, #0x40
    217c:	mov	w19, w21
    2180:	bl	89c <BZ2_bzCompressEnd>
    2184:	b	2158 <BZ2_bzBuffToBuffCompress+0xb4>
    2188:	ldr	w0, [x20]
    218c:	ldr	w1, [sp, #96]
    2190:	sub	w0, w0, w1
    2194:	str	w0, [x20]
    2198:	add	x0, sp, #0x40
    219c:	bl	89c <BZ2_bzCompressEnd>
    21a0:	b	2158 <BZ2_bzBuffToBuffCompress+0xb4>
    21a4:	mov	w19, #0xfffffffe            	// #-2
    21a8:	b	2158 <BZ2_bzBuffToBuffCompress+0xb4>

00000000000021ac <BZ2_bzBuffToBuffDecompress>:
    21ac:	stp	x29, x30, [sp, #-144]!
    21b0:	cmp	x0, #0x0
    21b4:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    21b8:	mov	x29, sp
    21bc:	stp	x19, x20, [sp, #16]
    21c0:	mov	x20, x1
    21c4:	stp	x21, x22, [sp, #32]
    21c8:	str	x23, [sp, #48]
    21cc:	b.eq	22a4 <BZ2_bzBuffToBuffDecompress+0xf8>  // b.none
    21d0:	mov	x22, x2
    21d4:	mov	w2, w4
    21d8:	cmp	x22, #0x0
    21dc:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    21e0:	b.hi	22a4 <BZ2_bzBuffToBuffDecompress+0xf8>  // b.pmore
    21e4:	mov	w1, w5
    21e8:	cmp	w5, #0x4
    21ec:	b.hi	22a4 <BZ2_bzBuffToBuffDecompress+0xf8>  // b.pmore
    21f0:	mov	x21, x0
    21f4:	mov	w23, w3
    21f8:	add	x0, sp, #0x40
    21fc:	stp	xzr, xzr, [sp, #120]
    2200:	str	xzr, [sp, #136]
    2204:	bl	924 <BZ2_bzDecompressInit>
    2208:	mov	w19, w0
    220c:	cbnz	w0, 2260 <BZ2_bzBuffToBuffDecompress+0xb4>
    2210:	ldr	w0, [x20]
    2214:	str	x22, [sp, #64]
    2218:	str	w23, [sp, #72]
    221c:	str	x21, [sp, #88]
    2220:	str	w0, [sp, #96]
    2224:	add	x0, sp, #0x40
    2228:	bl	a28 <BZ2_bzDecompress>
    222c:	mov	w21, w0
    2230:	cbnz	w0, 224c <BZ2_bzBuffToBuffDecompress+0xa0>
    2234:	ldr	w0, [sp, #96]
    2238:	cbnz	w0, 2294 <BZ2_bzBuffToBuffDecompress+0xe8>
    223c:	add	x0, sp, #0x40
    2240:	mov	w19, #0xfffffff8            	// #-8
    2244:	bl	15ec <BZ2_bzDecompressEnd>
    2248:	b	2260 <BZ2_bzBuffToBuffDecompress+0xb4>
    224c:	cmp	w0, #0x4
    2250:	b.eq	2278 <BZ2_bzBuffToBuffDecompress+0xcc>  // b.none
    2254:	mov	w19, w21
    2258:	add	x0, sp, #0x40
    225c:	bl	15ec <BZ2_bzDecompressEnd>
    2260:	mov	w0, w19
    2264:	ldp	x19, x20, [sp, #16]
    2268:	ldp	x21, x22, [sp, #32]
    226c:	ldr	x23, [sp, #48]
    2270:	ldp	x29, x30, [sp], #144
    2274:	ret
    2278:	ldr	w0, [x20]
    227c:	ldr	w1, [sp, #96]
    2280:	sub	w0, w0, w1
    2284:	str	w0, [x20]
    2288:	add	x0, sp, #0x40
    228c:	bl	15ec <BZ2_bzDecompressEnd>
    2290:	b	2260 <BZ2_bzBuffToBuffDecompress+0xb4>
    2294:	add	x0, sp, #0x40
    2298:	mov	w19, #0xfffffff9            	// #-7
    229c:	bl	15ec <BZ2_bzDecompressEnd>
    22a0:	b	2260 <BZ2_bzBuffToBuffDecompress+0xb4>
    22a4:	mov	w19, #0xfffffffe            	// #-2
    22a8:	b	2260 <BZ2_bzBuffToBuffDecompress+0xb4>

00000000000022ac <BZ2_bzlibVersion>:
    22ac:	adrp	x0, 0 <add_pair_to_block>
    22b0:	add	x0, x0, #0x0
    22b4:	ret

00000000000022b8 <BZ2_bzopen>:
    22b8:	mov	x2, x1
    22bc:	mov	w3, #0x0                   	// #0
    22c0:	mov	w1, #0xffffffff            	// #-1
    22c4:	b	1c50 <bzopen_or_bzdopen>

00000000000022c8 <BZ2_bzdopen>:
    22c8:	mov	x2, x1
    22cc:	mov	w3, #0x1                   	// #1
    22d0:	mov	w1, w0
    22d4:	mov	x0, #0x0                   	// #0
    22d8:	b	1c50 <bzopen_or_bzdopen>

00000000000022dc <BZ2_bzread>:
    22dc:	mov	w3, w2
    22e0:	ldr	w2, [x0, #5096]
    22e4:	cmp	w2, #0x4
    22e8:	b.eq	2318 <BZ2_bzread+0x3c>  // b.none
    22ec:	stp	x29, x30, [sp, #-32]!
    22f0:	mov	x2, x1
    22f4:	mov	x1, x0
    22f8:	mov	x29, sp
    22fc:	add	x0, sp, #0x1c
    2300:	bl	1e94 <BZ2_bzRead>
    2304:	ldr	w1, [sp, #28]
    2308:	ldp	x29, x30, [sp], #32
    230c:	tst	w1, #0xfffffffb
    2310:	csinv	w0, w0, wzr, eq  // eq = none
    2314:	ret
    2318:	mov	w0, #0x0                   	// #0
    231c:	ret

0000000000002320 <BZ2_bzwrite>:
    2320:	stp	x29, x30, [sp, #-48]!
    2324:	mov	w3, w2
    2328:	mov	x29, sp
    232c:	str	x19, [sp, #16]
    2330:	mov	w19, w2
    2334:	mov	x2, x1
    2338:	mov	x1, x0
    233c:	add	x0, sp, #0x2c
    2340:	bl	17a4 <BZ2_bzWrite>
    2344:	ldr	w0, [sp, #44]
    2348:	cmp	w0, #0x0
    234c:	csinv	w0, w19, wzr, eq  // eq = none
    2350:	ldr	x19, [sp, #16]
    2354:	ldp	x29, x30, [sp], #48
    2358:	ret

000000000000235c <BZ2_bzflush>:
    235c:	mov	w0, #0x0                   	// #0
    2360:	ret

0000000000002364 <BZ2_bzclose>:
    2364:	cbz	x0, 2404 <BZ2_bzclose+0xa0>
    2368:	stp	x29, x30, [sp, #-48]!
    236c:	mov	x29, sp
    2370:	stp	x19, x20, [sp, #16]
    2374:	mov	x19, x0
    2378:	add	x0, x0, #0x1, lsl #12
    237c:	ldr	x20, [x19]
    2380:	ldrb	w0, [x0, #916]
    2384:	cbz	w0, 23f4 <BZ2_bzclose+0x90>
    2388:	add	x0, sp, #0x2c
    238c:	mov	x1, x19
    2390:	mov	x4, #0x0                   	// #0
    2394:	mov	x3, #0x0                   	// #0
    2398:	mov	w2, #0x0                   	// #0
    239c:	bl	1acc <BZ2_bzWriteClose>
    23a0:	ldr	w0, [sp, #44]
    23a4:	cbz	w0, 23c0 <BZ2_bzclose+0x5c>
    23a8:	mov	x1, x19
    23ac:	mov	x4, #0x0                   	// #0
    23b0:	mov	x3, #0x0                   	// #0
    23b4:	mov	w2, #0x1                   	// #1
    23b8:	mov	x0, #0x0                   	// #0
    23bc:	bl	1acc <BZ2_bzWriteClose>
    23c0:	adrp	x0, 0 <stdin>
    23c4:	ldr	x0, [x0]
    23c8:	cmp	x0, x20
    23cc:	b.eq	23e8 <BZ2_bzclose+0x84>  // b.none
    23d0:	adrp	x0, 0 <stdout>
    23d4:	ldr	x0, [x0]
    23d8:	cmp	x0, x20
    23dc:	b.eq	23e8 <BZ2_bzclose+0x84>  // b.none
    23e0:	mov	x0, x20
    23e4:	bl	0 <fclose>
    23e8:	ldp	x19, x20, [sp, #16]
    23ec:	ldp	x29, x30, [sp], #48
    23f0:	ret
    23f4:	mov	x1, x19
    23f8:	add	x0, sp, #0x2c
    23fc:	bl	1e28 <BZ2_bzReadClose>
    2400:	b	23c0 <BZ2_bzclose+0x5c>
    2404:	ret

0000000000002408 <BZ2_bzerror>:
    2408:	ldr	w0, [x0, #5096]
    240c:	cmp	w0, #0x0
    2410:	csel	w0, w0, wzr, le
    2414:	str	w0, [x1]
    2418:	adrp	x1, 0 <add_pair_to_block>
    241c:	add	x1, x1, #0x0
    2420:	add	x1, x1, #0x10
    2424:	neg	w0, w0
    2428:	ldr	x0, [x1, w0, sxtw #3]
    242c:	ret
