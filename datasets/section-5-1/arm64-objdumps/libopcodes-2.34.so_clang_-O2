
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000350a8 <.init>:
   350a8:	stp	x29, x30, [sp, #-16]!
   350ac:	mov	x29, sp
   350b0:	bl	35c10 <aarch64_get_operand_modifier_from_value@plt+0x10>
   350b4:	ldp	x29, x30, [sp], #16
   350b8:	ret

Disassembly of section .plt:

00000000000350c0 <aarch64_ext_sysins_op@plt-0x20>:
   350c0:	stp	x16, x30, [sp, #-16]!
   350c4:	adrp	x16, 9b000 <aarch64_operands@@Base+0x16c38>
   350c8:	ldr	x17, [x16, #4088]
   350cc:	add	x16, x16, #0xff8
   350d0:	br	x17
   350d4:	nop
   350d8:	nop
   350dc:	nop

00000000000350e0 <aarch64_ext_sysins_op@plt>:
   350e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   350e4:	ldr	x17, [x16]
   350e8:	add	x16, x16, #0x0
   350ec:	br	x17

00000000000350f0 <aarch64_ins_sve_float_zero_one@plt>:
   350f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   350f4:	ldr	x17, [x16, #8]
   350f8:	add	x16, x16, #0x8
   350fc:	br	x17

0000000000035100 <aarch64_ins_simd_addr_post@plt>:
   35100:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35104:	ldr	x17, [x16, #16]
   35108:	add	x16, x16, #0x10
   3510c:	br	x17

0000000000035110 <memcpy@plt>:
   35110:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35114:	ldr	x17, [x16, #24]
   35118:	add	x16, x16, #0x18
   3511c:	br	x17

0000000000035120 <memmove@plt>:
   35120:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35124:	ldr	x17, [x16, #32]
   35128:	add	x16, x16, #0x20
   3512c:	br	x17

0000000000035130 <aarch64_ins_sve_quad_index@plt>:
   35130:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35134:	ldr	x17, [x16, #40]
   35138:	add	x16, x16, #0x28
   3513c:	br	x17

0000000000035140 <aarch64_ins_cond@plt>:
   35140:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35144:	ldr	x17, [x16, #48]
   35148:	add	x16, x16, #0x30
   3514c:	br	x17

0000000000035150 <aarch64_ext_sve_addr_zi_u5@plt>:
   35150:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35154:	ldr	x17, [x16, #56]
   35158:	add	x16, x16, #0x38
   3515c:	br	x17

0000000000035160 <strlen@plt>:
   35160:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35164:	ldr	x17, [x16, #64]
   35168:	add	x16, x16, #0x40
   3516c:	br	x17

0000000000035170 <aarch64_ins_sve_addr_rz_xtw@plt>:
   35170:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35174:	ldr	x17, [x16, #72]
   35178:	add	x16, x16, #0x48
   3517c:	br	x17

0000000000035180 <aarch64_ext_sysreg@plt>:
   35180:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35184:	ldr	x17, [x16, #80]
   35188:	add	x16, x16, #0x50
   3518c:	br	x17

0000000000035190 <aarch64_ins_sve_reglist@plt>:
   35190:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35194:	ldr	x17, [x16, #88]
   35198:	add	x16, x16, #0x58
   3519c:	br	x17

00000000000351a0 <aarch64_ins_imm_rotate1@plt>:
   351a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351a4:	ldr	x17, [x16, #96]
   351a8:	add	x16, x16, #0x60
   351ac:	br	x17

00000000000351b0 <exit@plt>:
   351b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351b4:	ldr	x17, [x16, #104]
   351b8:	add	x16, x16, #0x68
   351bc:	br	x17

00000000000351c0 <aarch64_operand_index@plt>:
   351c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351c4:	ldr	x17, [x16, #112]
   351c8:	add	x16, x16, #0x70
   351cc:	br	x17

00000000000351d0 <aarch64_ext_regrt_sysins@plt>:
   351d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351d4:	ldr	x17, [x16, #120]
   351d8:	add	x16, x16, #0x78
   351dc:	br	x17

00000000000351e0 <aarch64_ext_fbits@plt>:
   351e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351e4:	ldr	x17, [x16, #128]
   351e8:	add	x16, x16, #0x80
   351ec:	br	x17

00000000000351f0 <aarch64_ins_sve_addr_rr_lsl@plt>:
   351f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   351f4:	ldr	x17, [x16, #136]
   351f8:	add	x16, x16, #0x88
   351fc:	br	x17

0000000000035200 <aarch64_ins_sve_scale@plt>:
   35200:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35204:	ldr	x17, [x16, #144]
   35208:	add	x16, x16, #0x90
   3520c:	br	x17

0000000000035210 <aarch64_ext_ldst_reglist_r@plt>:
   35210:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35214:	ldr	x17, [x16, #152]
   35218:	add	x16, x16, #0x98
   3521c:	br	x17

0000000000035220 <sbrk@plt>:
   35220:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35224:	ldr	x17, [x16, #160]
   35228:	add	x16, x16, #0xa0
   3522c:	br	x17

0000000000035230 <aarch64_num_of_operands@plt>:
   35230:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35234:	ldr	x17, [x16, #168]
   35238:	add	x16, x16, #0xa8
   3523c:	br	x17

0000000000035240 <aarch64_ext_sve_shrimm@plt>:
   35240:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35244:	ldr	x17, [x16, #176]
   35248:	add	x16, x16, #0xb0
   3524c:	br	x17

0000000000035250 <aarch64_ext_sve_shlimm@plt>:
   35250:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35254:	ldr	x17, [x16, #184]
   35258:	add	x16, x16, #0xb8
   3525c:	br	x17

0000000000035260 <aarch64_ext_addr_uimm12@plt>:
   35260:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35264:	ldr	x17, [x16, #192]
   35268:	add	x16, x16, #0xc0
   3526c:	br	x17

0000000000035270 <aarch64_ins_addr_simm10@plt>:
   35270:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35274:	ldr	x17, [x16, #200]
   35278:	add	x16, x16, #0xc8
   3527c:	br	x17

0000000000035280 <aarch64_ext_aimm@plt>:
   35280:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35284:	ldr	x17, [x16, #208]
   35288:	add	x16, x16, #0xd0
   3528c:	br	x17

0000000000035290 <ldexp@plt>:
   35290:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35294:	ldr	x17, [x16, #216]
   35298:	add	x16, x16, #0xd8
   3529c:	br	x17

00000000000352a0 <aarch64_ext_sve_asimm@plt>:
   352a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352a4:	ldr	x17, [x16, #224]
   352a8:	add	x16, x16, #0xe0
   352ac:	br	x17

00000000000352b0 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   352b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352b4:	ldr	x17, [x16, #232]
   352b8:	add	x16, x16, #0xe8
   352bc:	br	x17

00000000000352c0 <aarch64_ins_regno@plt>:
   352c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352c4:	ldr	x17, [x16, #240]
   352c8:	add	x16, x16, #0xf0
   352cc:	br	x17

00000000000352d0 <__cxa_finalize@plt>:
   352d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352d4:	ldr	x17, [x16, #248]
   352d8:	add	x16, x16, #0xf8
   352dc:	br	x17

00000000000352e0 <aarch64_ins_aimm@plt>:
   352e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352e4:	ldr	x17, [x16, #256]
   352e8:	add	x16, x16, #0x100
   352ec:	br	x17

00000000000352f0 <sprintf@plt>:
   352f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   352f4:	ldr	x17, [x16, #264]
   352f8:	add	x16, x16, #0x108
   352fc:	br	x17

0000000000035300 <aarch64_ins_pstatefield@plt>:
   35300:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35304:	ldr	x17, [x16, #272]
   35308:	add	x16, x16, #0x110
   3530c:	br	x17

0000000000035310 <verify_constraints@plt>:
   35310:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35314:	ldr	x17, [x16, #280]
   35318:	add	x16, x16, #0x118
   3531c:	br	x17

0000000000035320 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   35320:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35324:	ldr	x17, [x16, #288]
   35328:	add	x16, x16, #0x120
   3532c:	br	x17

0000000000035330 <qsort@plt>:
   35330:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35334:	ldr	x17, [x16, #296]
   35338:	add	x16, x16, #0x128
   3533c:	br	x17

0000000000035340 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   35340:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35344:	ldr	x17, [x16, #304]
   35348:	add	x16, x16, #0x130
   3534c:	br	x17

0000000000035350 <aarch64_ins_sve_addr_zz_lsl@plt>:
   35350:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35354:	ldr	x17, [x16, #312]
   35358:	add	x16, x16, #0x138
   3535c:	br	x17

0000000000035360 <aarch64_ext_addr_simm@plt>:
   35360:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35364:	ldr	x17, [x16, #320]
   35368:	add	x16, x16, #0x140
   3536c:	br	x17

0000000000035370 <aarch64_ext_reglane@plt>:
   35370:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35374:	ldr	x17, [x16, #328]
   35378:	add	x16, x16, #0x148
   3537c:	br	x17

0000000000035380 <aarch64_ins_sve_addr_ri_u6@plt>:
   35380:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35384:	ldr	x17, [x16, #336]
   35388:	add	x16, x16, #0x150
   3538c:	br	x17

0000000000035390 <aarch64_ins_sve_index@plt>:
   35390:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35394:	ldr	x17, [x16, #344]
   35398:	add	x16, x16, #0x158
   3539c:	br	x17

00000000000353a0 <aarch64_find_real_opcode@plt>:
   353a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353a4:	ldr	x17, [x16, #352]
   353a8:	add	x16, x16, #0x160
   353ac:	br	x17

00000000000353b0 <aarch64_ins_addr_simm@plt>:
   353b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353b4:	ldr	x17, [x16, #360]
   353b8:	add	x16, x16, #0x168
   353bc:	br	x17

00000000000353c0 <get_cond_from_value@plt>:
   353c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353c4:	ldr	x17, [x16, #368]
   353c8:	add	x16, x16, #0x170
   353cc:	br	x17

00000000000353d0 <aarch64_ext_addr_simm10@plt>:
   353d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353d4:	ldr	x17, [x16, #376]
   353d8:	add	x16, x16, #0x178
   353dc:	br	x17

00000000000353e0 <aarch64_ins_sysins_op@plt>:
   353e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353e4:	ldr	x17, [x16, #384]
   353e8:	add	x16, x16, #0x180
   353ec:	br	x17

00000000000353f0 <aarch64_ins_ft@plt>:
   353f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   353f4:	ldr	x17, [x16, #392]
   353f8:	add	x16, x16, #0x188
   353fc:	br	x17

0000000000035400 <aarch64_ext_addr_offset@plt>:
   35400:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35404:	ldr	x17, [x16, #400]
   35408:	add	x16, x16, #0x190
   3540c:	br	x17

0000000000035410 <aarch64_find_best_match@plt>:
   35410:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35414:	ldr	x17, [x16, #408]
   35418:	add	x16, x16, #0x198
   3541c:	br	x17

0000000000035420 <aarch64_ext_fpimm@plt>:
   35420:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35424:	ldr	x17, [x16, #416]
   35428:	add	x16, x16, #0x1a0
   3542c:	br	x17

0000000000035430 <snprintf@plt>:
   35430:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35434:	ldr	x17, [x16, #424]
   35438:	add	x16, x16, #0x1a8
   3543c:	br	x17

0000000000035440 <extract_fields@plt>:
   35440:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35444:	ldr	x17, [x16, #432]
   35448:	add	x16, x16, #0x1b0
   3544c:	br	x17

0000000000035450 <aarch64_ins_limm@plt>:
   35450:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35454:	ldr	x17, [x16, #440]
   35458:	add	x16, x16, #0x1b8
   3545c:	br	x17

0000000000035460 <aarch64_print_operand@plt>:
   35460:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35464:	ldr	x17, [x16, #448]
   35468:	add	x16, x16, #0x1c0
   3546c:	br	x17

0000000000035470 <aarch64_ext_reg_extended@plt>:
   35470:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35474:	ldr	x17, [x16, #456]
   35478:	add	x16, x16, #0x1c8
   3547c:	br	x17

0000000000035480 <aarch64_get_qualifier_standard_value@plt>:
   35480:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35484:	ldr	x17, [x16, #464]
   35488:	add	x16, x16, #0x1d0
   3548c:	br	x17

0000000000035490 <malloc@plt>:
   35490:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35494:	ldr	x17, [x16, #472]
   35498:	add	x16, x16, #0x1d8
   3549c:	br	x17

00000000000354a0 <aarch64_logical_immediate_p@plt>:
   354a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354a4:	ldr	x17, [x16, #480]
   354a8:	add	x16, x16, #0x1e0
   354ac:	br	x17

00000000000354b0 <aarch64_replace_opcode@plt>:
   354b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354b4:	ldr	x17, [x16, #488]
   354b8:	add	x16, x16, #0x1e8
   354bc:	br	x17

00000000000354c0 <aarch64_ext_limm@plt>:
   354c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354c4:	ldr	x17, [x16, #496]
   354c8:	add	x16, x16, #0x1f0
   354cc:	br	x17

00000000000354d0 <aarch64_get_operand_modifier_value@plt>:
   354d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354d4:	ldr	x17, [x16, #504]
   354d8:	add	x16, x16, #0x1f8
   354dc:	br	x17

00000000000354e0 <strncmp@plt>:
   354e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354e4:	ldr	x17, [x16, #512]
   354e8:	add	x16, x16, #0x200
   354ec:	br	x17

00000000000354f0 <aarch64_ins_reg_shifted@plt>:
   354f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   354f4:	ldr	x17, [x16, #520]
   354f8:	add	x16, x16, #0x208
   354fc:	br	x17

0000000000035500 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   35500:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35504:	ldr	x17, [x16, #528]
   35508:	add	x16, x16, #0x210
   3550c:	br	x17

0000000000035510 <memset@plt>:
   35510:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35514:	ldr	x17, [x16, #536]
   35518:	add	x16, x16, #0x218
   3551c:	br	x17

0000000000035520 <xmalloc@plt>:
   35520:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35524:	ldr	x17, [x16, #544]
   35528:	add	x16, x16, #0x220
   3552c:	br	x17

0000000000035530 <aarch64_ins_sysreg@plt>:
   35530:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35534:	ldr	x17, [x16, #552]
   35538:	add	x16, x16, #0x228
   3553c:	br	x17

0000000000035540 <print_arm_disassembler_options@plt>:
   35540:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35544:	ldr	x17, [x16, #560]
   35548:	add	x16, x16, #0x230
   3554c:	br	x17

0000000000035550 <aarch64_ins_fpimm@plt>:
   35550:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35554:	ldr	x17, [x16, #568]
   35558:	add	x16, x16, #0x238
   3555c:	br	x17

0000000000035560 <aarch64_ext_sve_reglist@plt>:
   35560:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35564:	ldr	x17, [x16, #576]
   35568:	add	x16, x16, #0x240
   3556c:	br	x17

0000000000035570 <aarch64_ext_sve_quad_index@plt>:
   35570:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35574:	ldr	x17, [x16, #584]
   35578:	add	x16, x16, #0x248
   3557c:	br	x17

0000000000035580 <aarch64_match_operands_constraint@plt>:
   35580:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35584:	ldr	x17, [x16, #592]
   35588:	add	x16, x16, #0x250
   3558c:	br	x17

0000000000035590 <aarch64_ins_sve_limm_mov@plt>:
   35590:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35594:	ldr	x17, [x16, #600]
   35598:	add	x16, x16, #0x258
   3559c:	br	x17

00000000000355a0 <aarch64_ext_inv_limm@plt>:
   355a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355a4:	ldr	x17, [x16, #608]
   355a8:	add	x16, x16, #0x260
   355ac:	br	x17

00000000000355b0 <aarch64_ext_sve_float_half_two@plt>:
   355b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355b4:	ldr	x17, [x16, #616]
   355b8:	add	x16, x16, #0x268
   355bc:	br	x17

00000000000355c0 <calloc@plt>:
   355c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355c4:	ldr	x17, [x16, #624]
   355c8:	add	x16, x16, #0x270
   355cc:	br	x17

00000000000355d0 <bfd_get_bits@plt>:
   355d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355d4:	ldr	x17, [x16, #632]
   355d8:	add	x16, x16, #0x278
   355dc:	br	x17

00000000000355e0 <aarch64_sve_dupm_mov_immediate_p@plt>:
   355e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355e4:	ldr	x17, [x16, #640]
   355e8:	add	x16, x16, #0x280
   355ec:	br	x17

00000000000355f0 <aarch64_ins_advsimd_imm_modified@plt>:
   355f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   355f4:	ldr	x17, [x16, #648]
   355f8:	add	x16, x16, #0x288
   355fc:	br	x17

0000000000035600 <aarch64_ins_ldst_reglist_r@plt>:
   35600:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35604:	ldr	x17, [x16, #656]
   35608:	add	x16, x16, #0x290
   3560c:	br	x17

0000000000035610 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   35610:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35614:	ldr	x17, [x16, #664]
   35618:	add	x16, x16, #0x298
   3561c:	br	x17

0000000000035620 <aarch64_ext_ldst_reglist@plt>:
   35620:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35624:	ldr	x17, [x16, #672]
   35628:	add	x16, x16, #0x2a0
   3562c:	br	x17

0000000000035630 <realloc@plt>:
   35630:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35634:	ldr	x17, [x16, #680]
   35638:	add	x16, x16, #0x2a8
   3563c:	br	x17

0000000000035640 <aarch64_opcode_lookup@plt>:
   35640:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35644:	ldr	x17, [x16, #688]
   35648:	add	x16, x16, #0x2b0
   3564c:	br	x17

0000000000035650 <aarch64_ext_sve_index@plt>:
   35650:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35654:	ldr	x17, [x16, #696]
   35658:	add	x16, x16, #0x2b8
   3565c:	br	x17

0000000000035660 <aarch64_ext_imm_rotate2@plt>:
   35660:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35664:	ldr	x17, [x16, #704]
   35668:	add	x16, x16, #0x2c0
   3566c:	br	x17

0000000000035670 <aarch64_ext_hint@plt>:
   35670:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35674:	ldr	x17, [x16, #712]
   35678:	add	x16, x16, #0x2c8
   3567c:	br	x17

0000000000035680 <aarch64_ins_reglist@plt>:
   35680:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35684:	ldr	x17, [x16, #720]
   35688:	add	x16, x16, #0x2d0
   3568c:	br	x17

0000000000035690 <aarch64_extract_operand@plt>:
   35690:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35694:	ldr	x17, [x16, #728]
   35698:	add	x16, x16, #0x2d8
   3569c:	br	x17

00000000000356a0 <aarch64_ins_sve_addr_ri_s4@plt>:
   356a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356a4:	ldr	x17, [x16, #736]
   356a8:	add	x16, x16, #0x2e0
   356ac:	br	x17

00000000000356b0 <aarch64_ins_prfop@plt>:
   356b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356b4:	ldr	x17, [x16, #744]
   356b8:	add	x16, x16, #0x2e8
   356bc:	br	x17

00000000000356c0 <aarch64_ins_hint@plt>:
   356c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356c4:	ldr	x17, [x16, #752]
   356c8:	add	x16, x16, #0x2f0
   356cc:	br	x17

00000000000356d0 <__gmon_start__@plt>:
   356d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356d4:	ldr	x17, [x16, #760]
   356d8:	add	x16, x16, #0x2f8
   356dc:	br	x17

00000000000356e0 <aarch64_ins_sve_float_half_two@plt>:
   356e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356e4:	ldr	x17, [x16, #768]
   356e8:	add	x16, x16, #0x300
   356ec:	br	x17

00000000000356f0 <aarch64_ext_sve_addr_zz_lsl@plt>:
   356f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   356f4:	ldr	x17, [x16, #776]
   356f8:	add	x16, x16, #0x308
   356fc:	br	x17

0000000000035700 <abort@plt>:
   35700:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35704:	ldr	x17, [x16, #784]
   35708:	add	x16, x16, #0x310
   3570c:	br	x17

0000000000035710 <aarch64_get_qualifier_esize@plt>:
   35710:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35714:	ldr	x17, [x16, #792]
   35718:	add	x16, x16, #0x318
   3571c:	br	x17

0000000000035720 <aarch64_ins_reglane@plt>:
   35720:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35724:	ldr	x17, [x16, #800]
   35728:	add	x16, x16, #0x320
   3572c:	br	x17

0000000000035730 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   35730:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35734:	ldr	x17, [x16, #808]
   35738:	add	x16, x16, #0x328
   3573c:	br	x17

0000000000035740 <aarch64_ins_imm_rotate2@plt>:
   35740:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35744:	ldr	x17, [x16, #816]
   35748:	add	x16, x16, #0x330
   3574c:	br	x17

0000000000035750 <aarch64_ext_ldst_elemlist@plt>:
   35750:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35754:	ldr	x17, [x16, #824]
   35758:	add	x16, x16, #0x338
   3575c:	br	x17

0000000000035760 <aarch64_ins_fbits@plt>:
   35760:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35764:	ldr	x17, [x16, #832]
   35768:	add	x16, x16, #0x340
   3576c:	br	x17

0000000000035770 <aarch64_ins_imm_half@plt>:
   35770:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35774:	ldr	x17, [x16, #840]
   35778:	add	x16, x16, #0x348
   3577c:	br	x17

0000000000035780 <aarch64_ext_sve_aimm@plt>:
   35780:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35784:	ldr	x17, [x16, #848]
   35788:	add	x16, x16, #0x350
   3578c:	br	x17

0000000000035790 <aarch64_ins_addr_simple@plt>:
   35790:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35794:	ldr	x17, [x16, #856]
   35798:	add	x16, x16, #0x358
   3579c:	br	x17

00000000000357a0 <aarch64_get_operand_class@plt>:
   357a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357a4:	ldr	x17, [x16, #864]
   357a8:	add	x16, x16, #0x360
   357ac:	br	x17

00000000000357b0 <aarch64_ext_imm@plt>:
   357b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357b4:	ldr	x17, [x16, #872]
   357b8:	add	x16, x16, #0x368
   357bc:	br	x17

00000000000357c0 <aarch64_ins_addr_uimm12@plt>:
   357c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357c4:	ldr	x17, [x16, #880]
   357c8:	add	x16, x16, #0x370
   357cc:	br	x17

00000000000357d0 <aarch64_ext_reglist@plt>:
   357d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357d4:	ldr	x17, [x16, #888]
   357d8:	add	x16, x16, #0x378
   357dc:	br	x17

00000000000357e0 <aarch64_shrink_expanded_imm8@plt>:
   357e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357e4:	ldr	x17, [x16, #896]
   357e8:	add	x16, x16, #0x380
   357ec:	br	x17

00000000000357f0 <aarch64_ext_shll_imm@plt>:
   357f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   357f4:	ldr	x17, [x16, #904]
   357f8:	add	x16, x16, #0x388
   357fc:	br	x17

0000000000035800 <aarch64_ins_inv_limm@plt>:
   35800:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35804:	ldr	x17, [x16, #912]
   35808:	add	x16, x16, #0x390
   3580c:	br	x17

0000000000035810 <free@plt>:
   35810:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35814:	ldr	x17, [x16, #920]
   35818:	add	x16, x16, #0x398
   3581c:	br	x17

0000000000035820 <aarch64_ext_sve_float_zero_one@plt>:
   35820:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35824:	ldr	x17, [x16, #928]
   35828:	add	x16, x16, #0x3a0
   3582c:	br	x17

0000000000035830 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   35830:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35834:	ldr	x17, [x16, #936]
   35838:	add	x16, x16, #0x3a8
   3583c:	br	x17

0000000000035840 <aarch64_ext_addr_regoff@plt>:
   35840:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35844:	ldr	x17, [x16, #944]
   35848:	add	x16, x16, #0x3b0
   3584c:	br	x17

0000000000035850 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   35850:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35854:	ldr	x17, [x16, #952]
   35858:	add	x16, x16, #0x3b8
   3585c:	br	x17

0000000000035860 <aarch64_ins_imm@plt>:
   35860:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35864:	ldr	x17, [x16, #960]
   35868:	add	x16, x16, #0x3c0
   3586c:	br	x17

0000000000035870 <aarch64_ins_addr_offset@plt>:
   35870:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35874:	ldr	x17, [x16, #968]
   35878:	add	x16, x16, #0x3c8
   3587c:	br	x17

0000000000035880 <aarch64_ext_advsimd_imm_shift@plt>:
   35880:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35884:	ldr	x17, [x16, #976]
   35888:	add	x16, x16, #0x3d0
   3588c:	br	x17

0000000000035890 <aarch64_ins_sve_shrimm@plt>:
   35890:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35894:	ldr	x17, [x16, #984]
   35898:	add	x16, x16, #0x3d8
   3589c:	br	x17

00000000000358a0 <aarch64_ins_ldst_elemlist@plt>:
   358a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358a4:	ldr	x17, [x16, #992]
   358a8:	add	x16, x16, #0x3e0
   358ac:	br	x17

00000000000358b0 <strchr@plt>:
   358b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358b4:	ldr	x17, [x16, #1000]
   358b8:	add	x16, x16, #0x3e8
   358bc:	br	x17

00000000000358c0 <frexp@plt>:
   358c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358c4:	ldr	x17, [x16, #1008]
   358c8:	add	x16, x16, #0x3f0
   358cc:	br	x17

00000000000358d0 <aarch64_ins_barrier@plt>:
   358d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358d4:	ldr	x17, [x16, #1016]
   358d8:	add	x16, x16, #0x3f8
   358dc:	br	x17

00000000000358e0 <get_inverted_cond@plt>:
   358e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358e4:	ldr	x17, [x16, #1024]
   358e8:	add	x16, x16, #0x400
   358ec:	br	x17

00000000000358f0 <aarch64_ext_prfop@plt>:
   358f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   358f4:	ldr	x17, [x16, #1032]
   358f8:	add	x16, x16, #0x408
   358fc:	br	x17

0000000000035900 <print_aarch64_disassembler_options@plt>:
   35900:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35904:	ldr	x17, [x16, #1040]
   35908:	add	x16, x16, #0x410
   3590c:	br	x17

0000000000035910 <aarch64_ext_addr_simple@plt>:
   35910:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35914:	ldr	x17, [x16, #1048]
   35918:	add	x16, x16, #0x418
   3591c:	br	x17

0000000000035920 <aarch64_ins_addr_regoff@plt>:
   35920:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35924:	ldr	x17, [x16, #1056]
   35928:	add	x16, x16, #0x420
   3592c:	br	x17

0000000000035930 <aarch64_ext_regno@plt>:
   35930:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35934:	ldr	x17, [x16, #1064]
   35938:	add	x16, x16, #0x428
   3593c:	br	x17

0000000000035940 <floatformat_to_double@plt>:
   35940:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35944:	ldr	x17, [x16, #1072]
   35948:	add	x16, x16, #0x430
   3594c:	br	x17

0000000000035950 <aarch64_ins_advsimd_imm_shift@plt>:
   35950:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35954:	ldr	x17, [x16, #1080]
   35958:	add	x16, x16, #0x438
   3595c:	br	x17

0000000000035960 <aarch64_get_qualifier_nelem@plt>:
   35960:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35964:	ldr	x17, [x16, #1088]
   35968:	add	x16, x16, #0x440
   3596c:	br	x17

0000000000035970 <aarch64_ext_sve_addr_rr_lsl@plt>:
   35970:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35974:	ldr	x17, [x16, #1096]
   35978:	add	x16, x16, #0x448
   3597c:	br	x17

0000000000035980 <aarch64_ext_sve_addr_ri_s4@plt>:
   35980:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35984:	ldr	x17, [x16, #1104]
   35988:	add	x16, x16, #0x450
   3598c:	br	x17

0000000000035990 <aarch64_ins_sve_aimm@plt>:
   35990:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35994:	ldr	x17, [x16, #1112]
   35998:	add	x16, x16, #0x458
   3599c:	br	x17

00000000000359a0 <aarch64_ext_sve_scale@plt>:
   359a0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359a4:	ldr	x17, [x16, #1120]
   359a8:	add	x16, x16, #0x460
   359ac:	br	x17

00000000000359b0 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   359b0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359b4:	ldr	x17, [x16, #1128]
   359b8:	add	x16, x16, #0x468
   359bc:	br	x17

00000000000359c0 <xexit@plt>:
   359c0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359c4:	ldr	x17, [x16, #1136]
   359c8:	add	x16, x16, #0x470
   359cc:	br	x17

00000000000359d0 <aarch64_ext_imm_half@plt>:
   359d0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359d4:	ldr	x17, [x16, #1144]
   359d8:	add	x16, x16, #0x478
   359dc:	br	x17

00000000000359e0 <disassembler_options_cmp@plt>:
   359e0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359e4:	ldr	x17, [x16, #1152]
   359e8:	add	x16, x16, #0x480
   359ec:	br	x17

00000000000359f0 <aarch64_insert_operand@plt>:
   359f0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   359f4:	ldr	x17, [x16, #1160]
   359f8:	add	x16, x16, #0x488
   359fc:	br	x17

0000000000035a00 <aarch64_ins_sve_asimm@plt>:
   35a00:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a04:	ldr	x17, [x16, #1168]
   35a08:	add	x16, x16, #0x490
   35a0c:	br	x17

0000000000035a10 <xmalloc_failed@plt>:
   35a10:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a14:	ldr	x17, [x16, #1176]
   35a18:	add	x16, x16, #0x498
   35a1c:	br	x17

0000000000035a20 <aarch64_ins_reg_extended@plt>:
   35a20:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a24:	ldr	x17, [x16, #1184]
   35a28:	add	x16, x16, #0x4a0
   35a2c:	br	x17

0000000000035a30 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   35a30:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a34:	ldr	x17, [x16, #1192]
   35a38:	add	x16, x16, #0x4a8
   35a3c:	br	x17

0000000000035a40 <aarch64_ext_barrier@plt>:
   35a40:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a44:	ldr	x17, [x16, #1200]
   35a48:	add	x16, x16, #0x4b0
   35a4c:	br	x17

0000000000035a50 <dcgettext@plt>:
   35a50:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a54:	ldr	x17, [x16, #1208]
   35a58:	add	x16, x16, #0x4b8
   35a5c:	br	x17

0000000000035a60 <aarch64_ext_sve_float_half_one@plt>:
   35a60:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a64:	ldr	x17, [x16, #1216]
   35a68:	add	x16, x16, #0x4c0
   35a6c:	br	x17

0000000000035a70 <aarch64_sys_ins_reg_has_xt@plt>:
   35a70:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a74:	ldr	x17, [x16, #1224]
   35a78:	add	x16, x16, #0x4c8
   35a7c:	br	x17

0000000000035a80 <_bfd_error_handler@plt>:
   35a80:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a84:	ldr	x17, [x16, #1232]
   35a88:	add	x16, x16, #0x4d0
   35a8c:	br	x17

0000000000035a90 <aarch64_ins_sve_addr_zi_u5@plt>:
   35a90:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35a94:	ldr	x17, [x16, #1240]
   35a98:	add	x16, x16, #0x4d8
   35a9c:	br	x17

0000000000035aa0 <aarch64_ins_sve_shlimm@plt>:
   35aa0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35aa4:	ldr	x17, [x16, #1248]
   35aa8:	add	x16, x16, #0x4e0
   35aac:	br	x17

0000000000035ab0 <aarch64_wide_constant_p@plt>:
   35ab0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35ab4:	ldr	x17, [x16, #1256]
   35ab8:	add	x16, x16, #0x4e8
   35abc:	br	x17

0000000000035ac0 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35ac0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35ac4:	ldr	x17, [x16, #1264]
   35ac8:	add	x16, x16, #0x4f0
   35acc:	br	x17

0000000000035ad0 <aarch64_ext_regno_pair@plt>:
   35ad0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35ad4:	ldr	x17, [x16, #1272]
   35ad8:	add	x16, x16, #0x4f8
   35adc:	br	x17

0000000000035ae0 <aarch64_ext_ft@plt>:
   35ae0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35ae4:	ldr	x17, [x16, #1280]
   35ae8:	add	x16, x16, #0x500
   35aec:	br	x17

0000000000035af0 <strncpy@plt>:
   35af0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35af4:	ldr	x17, [x16, #1288]
   35af8:	add	x16, x16, #0x508
   35afc:	br	x17

0000000000035b00 <aarch64_ext_reg_shifted@plt>:
   35b00:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b04:	ldr	x17, [x16, #1296]
   35b08:	add	x16, x16, #0x510
   35b0c:	br	x17

0000000000035b10 <aarch64_ins_ldst_reglist@plt>:
   35b10:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b14:	ldr	x17, [x16, #1304]
   35b18:	add	x16, x16, #0x518
   35b1c:	br	x17

0000000000035b20 <aarch64_ext_sve_limm_mov@plt>:
   35b20:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b24:	ldr	x17, [x16, #1312]
   35b28:	add	x16, x16, #0x520
   35b2c:	br	x17

0000000000035b30 <__assert_fail@plt>:
   35b30:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b34:	ldr	x17, [x16, #1320]
   35b38:	add	x16, x16, #0x528
   35b3c:	br	x17

0000000000035b40 <aarch64_ins_sve_float_half_one@plt>:
   35b40:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b44:	ldr	x17, [x16, #1328]
   35b48:	add	x16, x16, #0x530
   35b4c:	br	x17

0000000000035b50 <aarch64_find_next_alias_opcode@plt>:
   35b50:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b54:	ldr	x17, [x16, #1336]
   35b58:	add	x16, x16, #0x538
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_imm_rotate1@plt>:
   35b60:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b64:	ldr	x17, [x16, #1344]
   35b68:	add	x16, x16, #0x540
   35b6c:	br	x17

0000000000035b70 <aarch64_ext_advsimd_imm_modified@plt>:
   35b70:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b74:	ldr	x17, [x16, #1352]
   35b78:	add	x16, x16, #0x548
   35b7c:	br	x17

0000000000035b80 <aarch64_ext_pstatefield@plt>:
   35b80:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b84:	ldr	x17, [x16, #1360]
   35b88:	add	x16, x16, #0x550
   35b8c:	br	x17

0000000000035b90 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35b90:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35b94:	ldr	x17, [x16, #1368]
   35b98:	add	x16, x16, #0x558
   35b9c:	br	x17

0000000000035ba0 <aarch64_ext_simd_addr_post@plt>:
   35ba0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35ba4:	ldr	x17, [x16, #1376]
   35ba8:	add	x16, x16, #0x560
   35bac:	br	x17

0000000000035bb0 <aarch64_find_next_opcode@plt>:
   35bb0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35bb4:	ldr	x17, [x16, #1384]
   35bb8:	add	x16, x16, #0x568
   35bbc:	br	x17

0000000000035bc0 <aarch64_ext_sve_addr_ri_u6@plt>:
   35bc0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35bc4:	ldr	x17, [x16, #1392]
   35bc8:	add	x16, x16, #0x570
   35bcc:	br	x17

0000000000035bd0 <fprintf@plt>:
   35bd0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35bd4:	ldr	x17, [x16, #1400]
   35bd8:	add	x16, x16, #0x578
   35bdc:	br	x17

0000000000035be0 <aarch64_ext_cond@plt>:
   35be0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35be4:	ldr	x17, [x16, #1408]
   35be8:	add	x16, x16, #0x580
   35bec:	br	x17

0000000000035bf0 <aarch64_find_alias_opcode@plt>:
   35bf0:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35bf4:	ldr	x17, [x16, #1416]
   35bf8:	add	x16, x16, #0x588
   35bfc:	br	x17

0000000000035c00 <aarch64_get_operand_modifier_from_value@plt>:
   35c00:	adrp	x16, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35c04:	ldr	x17, [x16, #1424]
   35c08:	add	x16, x16, #0x590
   35c0c:	br	x17

Disassembly of section .text:

0000000000035c10 <buffer_read_memory@@Base-0xd4>:
   35c10:	adrp	x0, 9b000 <aarch64_operands@@Base+0x16c38>
   35c14:	ldr	x0, [x0, #3928]
   35c18:	cbz	x0, 35c20 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35c1c:	b	356d0 <__gmon_start__@plt>
   35c20:	ret
   35c24:	nop
   35c28:	adrp	x0, f2000 <aarch64_opcode_table@@Base+0x555d8>
   35c2c:	add	x0, x0, #0x628
   35c30:	adrp	x1, f2000 <aarch64_opcode_table@@Base+0x555d8>
   35c34:	add	x1, x1, #0x628
   35c38:	cmp	x1, x0
   35c3c:	b.eq	35c54 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35c40:	adrp	x1, 9b000 <aarch64_operands@@Base+0x16c38>
   35c44:	ldr	x1, [x1, #3800]
   35c48:	cbz	x1, 35c54 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35c4c:	mov	x16, x1
   35c50:	br	x16
   35c54:	ret
   35c58:	adrp	x0, f2000 <aarch64_opcode_table@@Base+0x555d8>
   35c5c:	add	x0, x0, #0x628
   35c60:	adrp	x1, f2000 <aarch64_opcode_table@@Base+0x555d8>
   35c64:	add	x1, x1, #0x628
   35c68:	sub	x1, x1, x0
   35c6c:	lsr	x2, x1, #63
   35c70:	add	x1, x2, x1, asr #3
   35c74:	cmp	xzr, x1, asr #1
   35c78:	asr	x1, x1, #1
   35c7c:	b.eq	35c94 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35c80:	adrp	x2, 9b000 <aarch64_operands@@Base+0x16c38>
   35c84:	ldr	x2, [x2, #4048]
   35c88:	cbz	x2, 35c94 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35c8c:	mov	x16, x2
   35c90:	br	x16
   35c94:	ret
   35c98:	stp	x29, x30, [sp, #-32]!
   35c9c:	mov	x29, sp
   35ca0:	str	x19, [sp, #16]
   35ca4:	adrp	x19, f2000 <aarch64_opcode_table@@Base+0x555d8>
   35ca8:	ldrb	w0, [x19, #1584]
   35cac:	cbnz	w0, 35cd4 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35cb0:	adrp	x0, 9b000 <aarch64_operands@@Base+0x16c38>
   35cb4:	ldr	x0, [x0, #3824]
   35cb8:	cbz	x0, 35cc8 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35cbc:	adrp	x0, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   35cc0:	ldr	x0, [x0, #1432]
   35cc4:	bl	352d0 <__cxa_finalize@plt>
   35cc8:	bl	35c28 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35ccc:	mov	w0, #0x1                   	// #1
   35cd0:	strb	w0, [x19, #1584]
   35cd4:	ldr	x19, [sp, #16]
   35cd8:	ldp	x29, x30, [sp], #32
   35cdc:	ret
   35ce0:	b	35c58 <aarch64_get_operand_modifier_from_value@plt+0x58>

0000000000035ce4 <buffer_read_memory@@Base>:
   35ce4:	stp	x29, x30, [sp, #-16]!
   35ce8:	ldr	x9, [x3, #152]
   35cec:	mov	x8, x0
   35cf0:	mov	x29, sp
   35cf4:	subs	x9, x0, x9
   35cf8:	mov	w0, #0x5                   	// #5
   35cfc:	b.cc	35d64 <buffer_read_memory@@Base+0x80>  // b.lo, b.ul, b.last
   35d00:	ldr	w10, [x3, #180]
   35d04:	ldr	x11, [x3, #160]
   35d08:	udiv	x12, x11, x10
   35d0c:	cmp	x9, x12
   35d10:	b.hi	35d64 <buffer_read_memory@@Base+0x80>  // b.pmore
   35d14:	udiv	w11, w2, w10
   35d18:	add	x13, x9, x11
   35d1c:	cmp	x13, x12
   35d20:	b.hi	35d64 <buffer_read_memory@@Base+0x80>  // b.pmore
   35d24:	ldr	x12, [x3, #232]
   35d28:	cbz	x12, 35d44 <buffer_read_memory@@Base+0x60>
   35d2c:	cmp	x12, x8
   35d30:	mov	w0, #0x5                   	// #5
   35d34:	b.ls	35d64 <buffer_read_memory@@Base+0x80>  // b.plast
   35d38:	add	x8, x11, x8
   35d3c:	cmp	x8, x12
   35d40:	b.hi	35d64 <buffer_read_memory@@Base+0x80>  // b.pmore
   35d44:	ldr	x8, [x3, #144]
   35d48:	mul	x9, x9, x10
   35d4c:	mov	w2, w2
   35d50:	mov	x0, x1
   35d54:	add	x8, x8, x9
   35d58:	mov	x1, x8
   35d5c:	bl	35110 <memcpy@plt>
   35d60:	mov	w0, wzr
   35d64:	ldp	x29, x30, [sp], #16
   35d68:	ret

0000000000035d6c <perror_memory@@Base>:
   35d6c:	sub	sp, sp, #0x50
   35d70:	stp	x20, x19, [sp, #64]
   35d74:	mov	x20, x2
   35d78:	cmp	w0, #0x5
   35d7c:	stp	x29, x30, [sp, #32]
   35d80:	str	x21, [sp, #48]
   35d84:	add	x29, sp, #0x20
   35d88:	b.ne	35de0 <perror_memory@@Base+0x74>  // b.any
   35d8c:	mov	x2, x1
   35d90:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   35d94:	add	x1, x1, #0x28a
   35d98:	mov	x0, sp
   35d9c:	bl	352f0 <sprintf@plt>
   35da0:	ldp	x21, x19, [x20]
   35da4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   35da8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   35dac:	add	x0, x0, #0x270
   35db0:	add	x1, x1, #0x291
   35db4:	mov	w2, #0x5                   	// #5
   35db8:	bl	35a50 <dcgettext@plt>
   35dbc:	mov	x1, x0
   35dc0:	mov	x2, sp
   35dc4:	mov	x0, x19
   35dc8:	blr	x21
   35dcc:	ldp	x20, x19, [sp, #64]
   35dd0:	ldr	x21, [sp, #48]
   35dd4:	ldp	x29, x30, [sp, #32]
   35dd8:	add	sp, sp, #0x50
   35ddc:	ret
   35de0:	mov	w19, w0
   35de4:	ldp	x0, x20, [x20]
   35de8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   35dec:	add	x1, x1, #0x278
   35df0:	mov	w2, #0x5                   	// #5
   35df4:	str	x0, [x29, #24]
   35df8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   35dfc:	add	x0, x0, #0x270
   35e00:	bl	35a50 <dcgettext@plt>
   35e04:	mov	x1, x0
   35e08:	mov	x0, x20
   35e0c:	mov	w2, w19
   35e10:	ldr	x3, [x29, #24]
   35e14:	ldp	x20, x19, [sp, #64]
   35e18:	ldr	x21, [sp, #48]
   35e1c:	ldp	x29, x30, [sp, #32]
   35e20:	add	sp, sp, #0x50
   35e24:	br	x3

0000000000035e28 <generic_print_address@@Base>:
   35e28:	sub	sp, sp, #0x40
   35e2c:	str	x19, [sp, #48]
   35e30:	mov	x19, x1
   35e34:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   35e38:	mov	x2, x0
   35e3c:	add	x1, x1, #0x28a
   35e40:	mov	x0, sp
   35e44:	stp	x29, x30, [sp, #32]
   35e48:	add	x29, sp, #0x20
   35e4c:	bl	352f0 <sprintf@plt>
   35e50:	ldp	x8, x0, [x19]
   35e54:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   35e58:	add	x1, x1, #0x2b1
   35e5c:	mov	x2, sp
   35e60:	blr	x8
   35e64:	ldr	x19, [sp, #48]
   35e68:	ldp	x29, x30, [sp, #32]
   35e6c:	add	sp, sp, #0x40
   35e70:	ret

0000000000035e74 <generic_symbol_at_address@@Base>:
   35e74:	mov	w0, #0x1                   	// #1
   35e78:	ret

0000000000035e7c <generic_symbol_is_valid@@Base>:
   35e7c:	mov	w0, #0x1                   	// #1
   35e80:	ret

0000000000035e84 <disassembler@@Base>:
   35e84:	cmp	w0, #0x52
   35e88:	b.eq	35eb0 <disassembler@@Base+0x2c>  // b.none
   35e8c:	cmp	w0, #0x21
   35e90:	b.ne	35ebc <disassembler@@Base+0x38>  // b.any
   35e94:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   35e98:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   35e9c:	ldr	x8, [x8, #3808]
   35ea0:	ldr	x9, [x9, #3952]
   35ea4:	cmp	w1, #0x0
   35ea8:	csel	x0, x9, x8, eq  // eq = none
   35eac:	ret
   35eb0:	adrp	x0, 9b000 <aarch64_operands@@Base+0x16c38>
   35eb4:	ldr	x0, [x0, #4024]
   35eb8:	ret
   35ebc:	mov	x0, xzr
   35ec0:	ret

0000000000035ec4 <disassembler_usage@@Base>:
   35ec4:	stp	x29, x30, [sp, #-32]!
   35ec8:	str	x19, [sp, #16]
   35ecc:	mov	x29, sp
   35ed0:	mov	x19, x0
   35ed4:	bl	35900 <print_aarch64_disassembler_options@plt>
   35ed8:	mov	x0, x19
   35edc:	ldr	x19, [sp, #16]
   35ee0:	ldp	x29, x30, [sp], #32
   35ee4:	b	35540 <print_arm_disassembler_options@plt>

0000000000035ee8 <disassemble_init_for_target@@Base>:
   35ee8:	cbz	x0, 35f20 <disassemble_init_for_target@@Base+0x38>
   35eec:	ldr	w8, [x0, #28]
   35ef0:	cmp	w8, #0x21
   35ef4:	b.eq	35f0c <disassemble_init_for_target@@Base+0x24>  // b.none
   35ef8:	cmp	w8, #0x52
   35efc:	b.ne	35f20 <disassemble_init_for_target@@Base+0x38>  // b.any
   35f00:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   35f04:	ldr	x8, [x8, #3856]
   35f08:	b	35f14 <disassemble_init_for_target@@Base+0x2c>
   35f0c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   35f10:	ldr	x8, [x8, #3912]
   35f14:	mov	w9, #0x1                   	// #1
   35f18:	str	x8, [x0, #136]
   35f1c:	str	w9, [x0, #192]
   35f20:	ret

0000000000035f24 <disassemble_free_target@@Base>:
   35f24:	ret

0000000000035f28 <remove_whitespace_and_extra_commas@@Base>:
   35f28:	cbz	x0, 36044 <remove_whitespace_and_extra_commas@@Base+0x11c>
   35f2c:	stp	x29, x30, [sp, #-64]!
   35f30:	str	x23, [sp, #16]
   35f34:	stp	x22, x21, [sp, #32]
   35f38:	stp	x20, x19, [sp, #48]
   35f3c:	mov	x29, sp
   35f40:	mov	x19, x0
   35f44:	bl	35160 <strlen@plt>
   35f48:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   35f4c:	ldr	x8, [x8, #3880]
   35f50:	cbz	x0, 35f80 <remove_whitespace_and_extra_commas@@Base+0x58>
   35f54:	sub	x9, x19, #0x1
   35f58:	b	35f6c <remove_whitespace_and_extra_commas@@Base+0x44>
   35f5c:	sub	x10, x0, #0x1
   35f60:	strb	wzr, [x9, x0]
   35f64:	mov	x0, x10
   35f68:	cbz	x10, 35f80 <remove_whitespace_and_extra_commas@@Base+0x58>
   35f6c:	ldrb	w10, [x9, x0]
   35f70:	cmp	x10, #0x2c
   35f74:	b.eq	35f5c <remove_whitespace_and_extra_commas@@Base+0x34>  // b.none
   35f78:	ldrh	w10, [x8, x10, lsl #1]
   35f7c:	tbnz	w10, #6, 35f5c <remove_whitespace_and_extra_commas@@Base+0x34>
   35f80:	ldrb	w11, [x19]
   35f84:	cbz	w11, 35fb0 <remove_whitespace_and_extra_commas@@Base+0x88>
   35f88:	add	x9, x19, #0x1
   35f8c:	mov	w10, #0x2c                  	// #44
   35f90:	b	35f9c <remove_whitespace_and_extra_commas@@Base+0x74>
   35f94:	ldrb	w11, [x9], #1
   35f98:	cbz	w11, 35fb0 <remove_whitespace_and_extra_commas@@Base+0x88>
   35f9c:	and	x11, x11, #0xff
   35fa0:	ldrh	w11, [x8, x11, lsl #1]
   35fa4:	tbz	w11, #6, 35f94 <remove_whitespace_and_extra_commas@@Base+0x6c>
   35fa8:	sturb	w10, [x9, #-1]
   35fac:	b	35f94 <remove_whitespace_and_extra_commas@@Base+0x6c>
   35fb0:	mov	x20, x19
   35fb4:	b	35fc0 <remove_whitespace_and_extra_commas@@Base+0x98>
   35fb8:	cbz	w8, 36028 <remove_whitespace_and_extra_commas@@Base+0x100>
   35fbc:	add	x20, x20, #0x1
   35fc0:	ldrb	w8, [x20]
   35fc4:	cmp	w8, #0x2c
   35fc8:	b.ne	35fb8 <remove_whitespace_and_extra_commas@@Base+0x90>  // b.any
   35fcc:	mov	x23, x20
   35fd0:	ldrb	w8, [x23, #1]!
   35fd4:	cmp	x20, x19
   35fd8:	b.eq	35fe4 <remove_whitespace_and_extra_commas@@Base+0xbc>  // b.none
   35fdc:	cmp	w8, #0x2c
   35fe0:	b.ne	35fbc <remove_whitespace_and_extra_commas@@Base+0x94>  // b.any
   35fe4:	mov	x21, x23
   35fe8:	cmp	w8, #0x2c
   35fec:	b.ne	35ffc <remove_whitespace_and_extra_commas@@Base+0xd4>  // b.any
   35ff0:	ldrb	w8, [x21, #1]!
   35ff4:	cmp	w8, #0x2c
   35ff8:	b.eq	35ff0 <remove_whitespace_and_extra_commas@@Base+0xc8>  // b.none
   35ffc:	mov	x0, x21
   36000:	bl	35160 <strlen@plt>
   36004:	cmp	x20, x19
   36008:	mov	x22, x0
   3600c:	csel	x20, x20, x23, eq  // eq = none
   36010:	mov	x0, x20
   36014:	mov	x1, x21
   36018:	mov	x2, x22
   3601c:	bl	35120 <memmove@plt>
   36020:	strb	wzr, [x20, x22]
   36024:	b	35fbc <remove_whitespace_and_extra_commas@@Base+0x94>
   36028:	ldrb	w8, [x19]
   3602c:	ldp	x22, x21, [sp, #32]
   36030:	ldr	x23, [sp, #16]
   36034:	cmp	w8, #0x0
   36038:	csel	x0, xzr, x19, eq  // eq = none
   3603c:	ldp	x20, x19, [sp, #48]
   36040:	ldp	x29, x30, [sp], #64
   36044:	ret

0000000000036048 <disassembler_options_cmp@@Base>:
   36048:	ldrb	w8, [x0]
   3604c:	ldrb	w9, [x1]
   36050:	cmp	w8, #0x2c
   36054:	csel	w8, wzr, w8, eq  // eq = none
   36058:	cmp	w9, #0x2c
   3605c:	csel	w9, wzr, w9, eq  // eq = none
   36060:	cbz	w8, 36074 <disassembler_options_cmp@@Base+0x2c>
   36064:	add	x1, x1, #0x1
   36068:	cmp	w8, w9
   3606c:	add	x0, x0, #0x1
   36070:	b.eq	36048 <disassembler_options_cmp@@Base>  // b.none
   36074:	sub	w0, w8, w9
   36078:	ret

000000000003607c <init_disassemble_info@@Base>:
   3607c:	movi	v0.2d, #0x0
   36080:	str	xzr, [x0, #240]
   36084:	stp	q0, q0, [x0, #112]
   36088:	stp	q0, q0, [x0, #208]
   3608c:	stp	q0, q0, [x0, #176]
   36090:	stp	q0, q0, [x0, #144]
   36094:	stp	q0, q0, [x0, #80]
   36098:	stp	q0, q0, [x0, #48]
   3609c:	stp	q0, q0, [x0, #16]
   360a0:	stp	x2, x1, [x0]
   360a4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   360a8:	ldr	x8, [x8, #3976]
   360ac:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   360b0:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   360b4:	ldr	x9, [x9, #3816]
   360b8:	ldr	x10, [x10, #3784]
   360bc:	str	x8, [x0, #104]
   360c0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   360c4:	movi	v0.2s, #0x2
   360c8:	ldr	x8, [x8, #3936]
   360cc:	stp	x9, x10, [x0, #112]
   360d0:	adrp	x9, 56000 <floatformat_from_double@@Base+0x4f8>
   360d4:	str	d0, [x0, #40]
   360d8:	ldr	d0, [x9, #696]
   360dc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   360e0:	ldr	x9, [x9, #3872]
   360e4:	str	d0, [x0, #176]
   360e8:	stp	x8, x9, [x0, #128]
   360ec:	ret

00000000000360f0 <aarch64_ins_regno@@Base>:
   360f0:	stp	x29, x30, [sp, #-16]!
   360f4:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   360f8:	ldr	w9, [x0, #20]
   360fc:	ldr	x10, [x10, #3944]
   36100:	mov	x29, sp
   36104:	add	x8, x10, x9, lsl #3
   36108:	ldr	w8, [x8, #4]
   3610c:	sub	w11, w8, #0x1
   36110:	cmp	w11, #0x1e
   36114:	b.hi	3615c <aarch64_ins_regno@@Base+0x6c>  // b.pmore
   36118:	lsl	x9, x9, #3
   3611c:	ldr	w9, [x10, x9]
   36120:	tbnz	w9, #31, 3615c <aarch64_ins_regno@@Base+0x6c>
   36124:	add	w10, w9, w8
   36128:	cmp	w10, #0x21
   3612c:	b.ge	3615c <aarch64_ins_regno@@Base+0x6c>  // b.tcont
   36130:	ldr	w10, [x1, #16]
   36134:	mov	w11, #0xffffffff            	// #-1
   36138:	ldr	w12, [x2]
   3613c:	lsl	w8, w11, w8
   36140:	bic	w8, w10, w8
   36144:	lsl	w8, w8, w9
   36148:	orr	w8, w12, w8
   3614c:	mov	w0, #0x1                   	// #1
   36150:	str	w8, [x2]
   36154:	ldp	x29, x30, [sp], #16
   36158:	ret
   3615c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36160:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36164:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36168:	add	x0, x0, #0xfe3
   3616c:	add	x1, x1, #0x40
   36170:	add	x3, x3, #0x5c
   36174:	mov	w2, #0x16a                 	// #362
   36178:	bl	35b30 <__assert_fail@plt>

000000000003617c <aarch64_ins_reglane@@Base>:
   3617c:	stp	x29, x30, [sp, #-16]!
   36180:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   36184:	ldr	w10, [x0, #20]
   36188:	ldr	x9, [x9, #3944]
   3618c:	mov	x29, sp
   36190:	add	x8, x9, x10, lsl #3
   36194:	ldr	w8, [x8, #4]
   36198:	sub	w11, w8, #0x1
   3619c:	cmp	w11, #0x1e
   361a0:	b.hi	36404 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   361a4:	lsl	x10, x10, #3
   361a8:	ldr	w10, [x9, x10]
   361ac:	tbnz	w10, #31, 36404 <aarch64_ins_reglane@@Base+0x288>
   361b0:	add	w11, w10, w8
   361b4:	cmp	w11, #0x21
   361b8:	b.ge	36404 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   361bc:	ldr	x11, [x3, #8]
   361c0:	ldr	w12, [x1, #16]
   361c4:	mov	w13, #0xffffffff            	// #-1
   361c8:	lsl	w8, w13, w8
   361cc:	ldr	w14, [x11, #12]
   361d0:	ldr	w13, [x2]
   361d4:	bic	w8, w12, w8
   361d8:	lsl	w8, w8, w10
   361dc:	bic	w8, w8, w14
   361e0:	orr	w8, w13, w8
   361e4:	str	w8, [x2]
   361e8:	ldr	w10, [x11, #16]
   361ec:	cmp	w10, #0x5a
   361f0:	b.gt	36268 <aarch64_ins_reglane@@Base+0xec>
   361f4:	cmp	w10, #0xa
   361f8:	b.eq	36204 <aarch64_ins_reglane@@Base+0x88>  // b.none
   361fc:	cmp	w10, #0x17
   36200:	b.ne	362f8 <aarch64_ins_reglane@@Base+0x17c>  // b.any
   36204:	ldr	w10, [x1]
   36208:	ldrb	w12, [x1, #4]
   3620c:	cmp	w10, #0x20
   36210:	sub	w10, w12, #0x5
   36214:	b.ne	362b4 <aarch64_ins_reglane@@Base+0x138>  // b.any
   36218:	ldr	w11, [x11, #32]
   3621c:	cmp	w11, #0x1f
   36220:	b.ne	362b4 <aarch64_ins_reglane@@Base+0x138>  // b.any
   36224:	ldr	w11, [x1, #8]
   36228:	cmp	w11, #0x1
   3622c:	b.ne	36484 <aarch64_ins_reglane@@Base+0x308>  // b.any
   36230:	ldr	w11, [x9, #324]
   36234:	sub	w12, w11, #0x1
   36238:	cmp	w12, #0x1e
   3623c:	b.hi	36404 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   36240:	ldr	w9, [x9, #320]
   36244:	tbnz	w9, #31, 36404 <aarch64_ins_reglane@@Base+0x288>
   36248:	add	w12, w9, w11
   3624c:	cmp	w12, #0x21
   36250:	b.ge	36404 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   36254:	ldr	x12, [x1, #24]
   36258:	mov	w13, #0xffffffff            	// #-1
   3625c:	lsl	w11, w13, w11
   36260:	lsl	x10, x12, x10
   36264:	b	362f0 <aarch64_ins_reglane@@Base+0x174>
   36268:	cmp	w10, #0x5b
   3626c:	b.eq	36350 <aarch64_ins_reglane@@Base+0x1d4>  // b.none
   36270:	cmp	w10, #0x5d
   36274:	b.ne	362f8 <aarch64_ins_reglane@@Base+0x17c>  // b.any
   36278:	ldrb	w8, [x1, #4]
   3627c:	and	w8, w8, #0xfe
   36280:	cmp	w8, #0xa
   36284:	b.ne	36444 <aarch64_ins_reglane@@Base+0x2c8>  // b.any
   36288:	ldr	w1, [x1, #24]
   3628c:	cmp	w1, #0x4
   36290:	b.cc	36398 <aarch64_ins_reglane@@Base+0x21c>  // b.lo, b.ul, b.last
   36294:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36298:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3629c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   362a0:	add	x0, x0, #0x41e
   362a4:	add	x1, x1, #0x36f
   362a8:	add	x3, x3, #0x38b
   362ac:	mov	w2, #0x87                  	// #135
   362b0:	bl	35b30 <__assert_fail@plt>
   362b4:	ldr	w11, [x9, #348]
   362b8:	sub	w12, w11, #0x1
   362bc:	cmp	w12, #0x1e
   362c0:	b.hi	36404 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   362c4:	ldr	w9, [x9, #344]
   362c8:	tbnz	w9, #31, 36404 <aarch64_ins_reglane@@Base+0x288>
   362cc:	add	w12, w9, w11
   362d0:	cmp	w12, #0x21
   362d4:	b.ge	36404 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   362d8:	ldr	x12, [x1, #24]
   362dc:	mov	w13, #0x1                   	// #1
   362e0:	mov	w14, #0xffffffff            	// #-1
   362e4:	lsl	w11, w14, w11
   362e8:	bfi	x13, x12, #1, #63
   362ec:	lsl	x10, x13, x10
   362f0:	bic	w10, w10, w11
   362f4:	b	363ec <aarch64_ins_reglane@@Base+0x270>
   362f8:	ldr	w11, [x11, #20]
   362fc:	ldrb	w10, [x1, #4]
   36300:	ldr	w12, [x1, #24]
   36304:	cmp	w11, #0x50
   36308:	cset	w11, eq  // eq = none
   3630c:	cmp	w10, #0x8
   36310:	lsl	w1, w12, w11
   36314:	b.eq	363b4 <aarch64_ins_reglane@@Base+0x238>  // b.none
   36318:	cmp	w10, #0x7
   3631c:	b.eq	36390 <aarch64_ins_reglane@@Base+0x214>  // b.none
   36320:	cmp	w10, #0x6
   36324:	b.ne	36424 <aarch64_ins_reglane@@Base+0x2a8>  // b.any
   36328:	cmp	w1, #0x8
   3632c:	b.cs	364a4 <aarch64_ins_reglane@@Base+0x328>  // b.hs, b.nlast
   36330:	mov	w3, #0x3                   	// #3
   36334:	mov	w4, #0x3f                  	// #63
   36338:	mov	w5, #0x3e                  	// #62
   3633c:	mov	w6, #0x3d                  	// #61
   36340:	mov	x0, x2
   36344:	mov	w2, wzr
   36348:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3634c:	b	363f8 <aarch64_ins_reglane@@Base+0x27c>
   36350:	ldr	w10, [x1, #24]
   36354:	cmp	w10, #0x4
   36358:	b.cs	36464 <aarch64_ins_reglane@@Base+0x2e8>  // b.hs, b.nlast
   3635c:	ldr	w11, [x9, #996]
   36360:	sub	w12, w11, #0x1
   36364:	cmp	w12, #0x1e
   36368:	b.hi	36404 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   3636c:	ldr	w9, [x9, #992]
   36370:	tbnz	w9, #31, 36404 <aarch64_ins_reglane@@Base+0x288>
   36374:	add	w12, w9, w11
   36378:	cmp	w12, #0x21
   3637c:	b.ge	36404 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   36380:	mov	w12, #0xffffffff            	// #-1
   36384:	lsl	w11, w12, w11
   36388:	bic	w10, w10, w11
   3638c:	b	363ec <aarch64_ins_reglane@@Base+0x270>
   36390:	cmp	w1, #0x4
   36394:	b.cs	364c4 <aarch64_ins_reglane@@Base+0x348>  // b.hs, b.nlast
   36398:	mov	w3, #0x2                   	// #2
   3639c:	mov	w4, #0x3e                  	// #62
   363a0:	mov	w5, #0x3d                  	// #61
   363a4:	mov	x0, x2
   363a8:	mov	w2, wzr
   363ac:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   363b0:	b	363f8 <aarch64_ins_reglane@@Base+0x27c>
   363b4:	cmp	w1, #0x2
   363b8:	b.cs	364e4 <aarch64_ins_reglane@@Base+0x368>  // b.hs, b.nlast
   363bc:	ldr	w10, [x9, #492]
   363c0:	sub	w11, w10, #0x1
   363c4:	cmp	w11, #0x1e
   363c8:	b.hi	36404 <aarch64_ins_reglane@@Base+0x288>  // b.pmore
   363cc:	ldr	w9, [x9, #488]
   363d0:	tbnz	w9, #31, 36404 <aarch64_ins_reglane@@Base+0x288>
   363d4:	add	w11, w9, w10
   363d8:	cmp	w11, #0x21
   363dc:	b.ge	36404 <aarch64_ins_reglane@@Base+0x288>  // b.tcont
   363e0:	mov	w11, #0xffffffff            	// #-1
   363e4:	lsl	w10, w11, w10
   363e8:	bic	w10, w1, w10
   363ec:	lsl	w9, w10, w9
   363f0:	orr	w8, w9, w8
   363f4:	str	w8, [x2]
   363f8:	mov	w0, #0x1                   	// #1
   363fc:	ldp	x29, x30, [sp], #16
   36400:	ret
   36404:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36408:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3640c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36410:	add	x0, x0, #0xfe3
   36414:	add	x1, x1, #0x40
   36418:	add	x3, x3, #0x5c
   3641c:	mov	w2, #0x16a                 	// #362
   36420:	bl	35b30 <__assert_fail@plt>
   36424:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   36428:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3642c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36430:	add	x0, x0, #0x2b4
   36434:	add	x1, x1, #0x36f
   36438:	add	x3, x3, #0x38b
   3643c:	mov	w2, #0xb1                  	// #177
   36440:	bl	35b30 <__assert_fail@plt>
   36444:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   36448:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3644c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36450:	add	x0, x0, #0x2b4
   36454:	add	x1, x1, #0x36f
   36458:	add	x3, x3, #0x38b
   3645c:	mov	w2, #0x8b                  	// #139
   36460:	bl	35b30 <__assert_fail@plt>
   36464:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36468:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3646c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36470:	add	x0, x0, #0x41e
   36474:	add	x1, x1, #0x36f
   36478:	add	x3, x3, #0x38b
   3647c:	mov	w2, #0x92                  	// #146
   36480:	bl	35b30 <__assert_fail@plt>
   36484:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36488:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3648c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36490:	add	x0, x0, #0x360
   36494:	add	x1, x1, #0x36f
   36498:	add	x3, x3, #0x38b
   3649c:	mov	w2, #0x6e                  	// #110
   364a0:	bl	35b30 <__assert_fail@plt>
   364a4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   364a8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   364ac:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   364b0:	add	x0, x0, #0x430
   364b4:	add	x1, x1, #0x36f
   364b8:	add	x3, x3, #0x38b
   364bc:	mov	w2, #0xa3                  	// #163
   364c0:	bl	35b30 <__assert_fail@plt>
   364c4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   364c8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   364cc:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   364d0:	add	x0, x0, #0x41e
   364d4:	add	x1, x1, #0x36f
   364d8:	add	x3, x3, #0x38b
   364dc:	mov	w2, #0xa8                  	// #168
   364e0:	bl	35b30 <__assert_fail@plt>
   364e4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   364e8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   364ec:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   364f0:	add	x0, x0, #0x442
   364f4:	add	x1, x1, #0x36f
   364f8:	add	x3, x3, #0x38b
   364fc:	mov	w2, #0xad                  	// #173
   36500:	bl	35b30 <__assert_fail@plt>
   36504:	sub	sp, sp, #0xe0
   36508:	stp	x29, x30, [sp, #208]
   3650c:	add	x29, sp, #0xd0
   36510:	mov	x8, #0xffffffffffffffd8    	// #-40
   36514:	mov	x10, sp
   36518:	movk	x8, #0xff80, lsl #32
   3651c:	sub	x11, x29, #0x48
   36520:	add	x10, x10, #0x80
   36524:	add	x12, x29, #0x10
   36528:	mov	w9, #0xffffffd8            	// #-40
   3652c:	add	x11, x11, #0x28
   36530:	stp	x10, x8, [x29, #-16]
   36534:	mov	w8, #0xffffffd8            	// #-40
   36538:	stp	x3, x4, [x29, #-72]
   3653c:	stp	x5, x6, [x29, #-56]
   36540:	stur	x7, [x29, #-40]
   36544:	stp	q1, q2, [sp, #16]
   36548:	stp	q3, q4, [sp, #48]
   3654c:	str	q0, [sp]
   36550:	stp	q5, q6, [sp, #80]
   36554:	str	q7, [sp, #112]
   36558:	stp	x12, x11, [x29, #-32]
   3655c:	tbz	w9, #31, 36580 <aarch64_ins_reglane@@Base+0x404>
   36560:	add	w8, w9, #0x8
   36564:	cmn	w9, #0x8
   36568:	stur	w8, [x29, #-8]
   3656c:	b.gt	36580 <aarch64_ins_reglane@@Base+0x404>
   36570:	ldur	x9, [x29, #-24]
   36574:	mov	x10, #0xffffffffffffffd8    	// #-40
   36578:	add	x9, x9, x10
   3657c:	b	3658c <aarch64_ins_reglane@@Base+0x410>
   36580:	ldur	x9, [x29, #-32]
   36584:	add	x10, x9, #0x8
   36588:	stur	x10, [x29, #-32]
   3658c:	ldr	w9, [x9]
   36590:	cmp	w9, #0x5
   36594:	b.hi	36664 <aarch64_ins_reglane@@Base+0x4e8>  // b.pmore
   36598:	cbz	w9, 36638 <aarch64_ins_reglane@@Base+0x4bc>
   3659c:	adrp	x12, 9b000 <aarch64_operands@@Base+0x16c38>
   365a0:	ldur	x10, [x29, #-24]
   365a4:	ldr	x12, [x12, #3944]
   365a8:	mvn	w11, w2
   365ac:	mov	w13, #0xffffffff            	// #-1
   365b0:	tbz	w8, #31, 365d4 <aarch64_ins_reglane@@Base+0x458>
   365b4:	add	w15, w8, #0x8
   365b8:	cmn	w8, #0x8
   365bc:	stur	w15, [x29, #-8]
   365c0:	b.gt	365d0 <aarch64_ins_reglane@@Base+0x454>
   365c4:	add	x14, x10, w8, sxtw
   365c8:	mov	w8, w15
   365cc:	b	365e0 <aarch64_ins_reglane@@Base+0x464>
   365d0:	mov	w8, w15
   365d4:	ldur	x14, [x29, #-32]
   365d8:	add	x15, x14, #0x8
   365dc:	stur	x15, [x29, #-32]
   365e0:	ldr	w15, [x14]
   365e4:	add	x14, x12, x15, lsl #3
   365e8:	ldr	w14, [x14, #4]
   365ec:	sub	w16, w14, #0x1
   365f0:	cmp	w16, #0x1e
   365f4:	b.hi	36644 <aarch64_ins_reglane@@Base+0x4c8>  // b.pmore
   365f8:	lsl	x15, x15, #3
   365fc:	ldr	w15, [x12, x15]
   36600:	tbnz	w15, #31, 36644 <aarch64_ins_reglane@@Base+0x4c8>
   36604:	add	w16, w15, w14
   36608:	cmp	w16, #0x21
   3660c:	b.ge	36644 <aarch64_ins_reglane@@Base+0x4c8>  // b.tcont
   36610:	lsl	w16, w13, w14
   36614:	ldr	w17, [x0]
   36618:	bic	w16, w1, w16
   3661c:	lsl	w15, w16, w15
   36620:	and	w15, w15, w11
   36624:	sub	w9, w9, #0x1
   36628:	orr	w15, w17, w15
   3662c:	lsr	w1, w1, w14
   36630:	str	w15, [x0]
   36634:	cbnz	w9, 365b0 <aarch64_ins_reglane@@Base+0x434>
   36638:	ldp	x29, x30, [sp, #208]
   3663c:	add	sp, sp, #0xe0
   36640:	ret
   36644:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36648:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3664c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36650:	add	x0, x0, #0xfe3
   36654:	add	x1, x1, #0x40
   36658:	add	x3, x3, #0x5c
   3665c:	mov	w2, #0x16a                 	// #362
   36660:	bl	35b30 <__assert_fail@plt>
   36664:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36668:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3666c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36670:	add	x0, x0, #0xf96
   36674:	add	x1, x1, #0x36f
   36678:	add	x3, x3, #0xf9f
   3667c:	mov	w2, #0x31                  	// #49
   36680:	bl	35b30 <__assert_fail@plt>

0000000000036684 <aarch64_ins_reglist@@Base>:
   36684:	stp	x29, x30, [sp, #-16]!
   36688:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3668c:	ldr	w10, [x0, #20]
   36690:	ldr	x8, [x8, #3944]
   36694:	mov	x29, sp
   36698:	add	x9, x8, x10, lsl #3
   3669c:	ldr	w9, [x9, #4]
   366a0:	sub	w11, w9, #0x1
   366a4:	cmp	w11, #0x1e
   366a8:	b.hi	3673c <aarch64_ins_reglist@@Base+0xb8>  // b.pmore
   366ac:	lsl	x10, x10, #3
   366b0:	ldr	w10, [x8, x10]
   366b4:	tbnz	w10, #31, 3673c <aarch64_ins_reglist@@Base+0xb8>
   366b8:	add	w11, w10, w9
   366bc:	cmp	w11, #0x21
   366c0:	b.ge	3673c <aarch64_ins_reglist@@Base+0xb8>  // b.tcont
   366c4:	ldrh	w12, [x1, #16]
   366c8:	ldr	w11, [x8, #220]
   366cc:	mov	w13, #0xffffffff            	// #-1
   366d0:	ldr	w14, [x2]
   366d4:	lsl	w9, w13, w9
   366d8:	and	w12, w12, #0x1f
   366dc:	bic	w9, w12, w9
   366e0:	sub	w13, w11, #0x1
   366e4:	lsl	w9, w9, w10
   366e8:	orr	w9, w14, w9
   366ec:	cmp	w13, #0x1e
   366f0:	str	w9, [x2]
   366f4:	b.hi	3673c <aarch64_ins_reglist@@Base+0xb8>  // b.pmore
   366f8:	ldr	w8, [x8, #216]
   366fc:	tbnz	w8, #31, 3673c <aarch64_ins_reglist@@Base+0xb8>
   36700:	add	w10, w8, w11
   36704:	cmp	w10, #0x21
   36708:	b.ge	3673c <aarch64_ins_reglist@@Base+0xb8>  // b.tcont
   3670c:	ldrh	w10, [x1, #16]
   36710:	mov	w12, #0xffffffff            	// #-1
   36714:	lsl	w11, w12, w11
   36718:	mov	w0, #0x1                   	// #1
   3671c:	ubfx	w10, w10, #5, #3
   36720:	sub	w10, w10, #0x1
   36724:	bic	w10, w10, w11
   36728:	lsl	w8, w10, w8
   3672c:	orr	w8, w8, w9
   36730:	str	w8, [x2]
   36734:	ldp	x29, x30, [sp], #16
   36738:	ret
   3673c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36740:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36744:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36748:	add	x0, x0, #0xfe3
   3674c:	add	x1, x1, #0x40
   36750:	add	x3, x3, #0x5c
   36754:	mov	w2, #0x16a                 	// #362
   36758:	bl	35b30 <__assert_fail@plt>

000000000003675c <aarch64_ins_ldst_reglist@@Base>:
   3675c:	stp	x29, x30, [sp, #-16]!
   36760:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   36764:	ldr	x8, [x8, #3944]
   36768:	mov	x29, sp
   3676c:	ldr	w9, [x8, #100]
   36770:	sub	w10, w9, #0x1
   36774:	cmp	w10, #0x1e
   36778:	b.hi	36874 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.pmore
   3677c:	ldr	w10, [x8, #96]
   36780:	tbnz	w10, #31, 36874 <aarch64_ins_ldst_reglist@@Base+0x118>
   36784:	add	w11, w10, w9
   36788:	cmp	w11, #0x21
   3678c:	b.ge	36874 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.tcont
   36790:	ldr	x11, [x3, #8]
   36794:	ldrh	w12, [x1, #16]
   36798:	mov	w13, #0xffffffff            	// #-1
   3679c:	ldr	w14, [x2]
   367a0:	ldrb	w11, [x11, #123]
   367a4:	lsl	w9, w13, w9
   367a8:	and	w12, w12, #0x1f
   367ac:	bic	w9, w12, w9
   367b0:	lsl	w9, w9, w10
   367b4:	and	w10, w11, #0x7
   367b8:	sub	w10, w10, #0x1
   367bc:	orr	w9, w14, w9
   367c0:	cmp	w10, #0x3
   367c4:	str	w9, [x2]
   367c8:	b.hi	36894 <aarch64_ins_ldst_reglist@@Base+0x138>  // b.pmore
   367cc:	adrp	x11, 56000 <floatformat_from_double@@Base+0x4f8>
   367d0:	add	x11, x11, #0x2c0
   367d4:	adr	x12, 367e8 <aarch64_ins_ldst_reglist@@Base+0x8c>
   367d8:	ldrb	w13, [x11, x10]
   367dc:	add	x12, x12, x13, lsl #2
   367e0:	mov	w10, #0x4                   	// #4
   367e4:	br	x12
   367e8:	ldrh	w10, [x1, #16]
   367ec:	ubfx	x10, x10, #5, #3
   367f0:	sub	x10, x10, #0x1
   367f4:	cmp	w10, #0x4
   367f8:	b.cs	368b4 <aarch64_ins_ldst_reglist@@Base+0x158>  // b.hs, b.nlast
   367fc:	adrp	x11, 57000 <xexit@@Base+0xdd4>
   36800:	add	x11, x11, #0x58c
   36804:	ldr	w10, [x11, x10, lsl #2]
   36808:	b	3682c <aarch64_ins_ldst_reglist@@Base+0xd0>
   3680c:	ldrh	w10, [x1, #16]
   36810:	mov	w11, #0x8                   	// #8
   36814:	and	w10, w10, #0xe0
   36818:	cmp	w10, #0x80
   3681c:	mov	w10, #0x3                   	// #3
   36820:	csel	w10, w10, w11, eq  // eq = none
   36824:	b	3682c <aarch64_ins_ldst_reglist@@Base+0xd0>
   36828:	mov	w10, wzr
   3682c:	ldr	w11, [x8, #196]
   36830:	sub	w12, w11, #0x1
   36834:	cmp	w12, #0x1e
   36838:	b.hi	36874 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.pmore
   3683c:	ldr	w8, [x8, #192]
   36840:	tbnz	w8, #31, 36874 <aarch64_ins_ldst_reglist@@Base+0x118>
   36844:	add	w12, w8, w11
   36848:	cmp	w12, #0x21
   3684c:	b.ge	36874 <aarch64_ins_ldst_reglist@@Base+0x118>  // b.tcont
   36850:	mov	w12, #0xffffffff            	// #-1
   36854:	lsl	w11, w12, w11
   36858:	bic	w10, w10, w11
   3685c:	lsl	w8, w10, w8
   36860:	orr	w8, w8, w9
   36864:	mov	w0, #0x1                   	// #1
   36868:	str	w8, [x2]
   3686c:	ldp	x29, x30, [sp], #16
   36870:	ret
   36874:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36878:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3687c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36880:	add	x0, x0, #0xfe3
   36884:	add	x1, x1, #0x40
   36888:	add	x3, x3, #0x5c
   3688c:	mov	w2, #0x16a                 	// #362
   36890:	bl	35b30 <__assert_fail@plt>
   36894:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   36898:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3689c:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   368a0:	add	x0, x0, #0x2b4
   368a4:	add	x1, x1, #0x36f
   368a8:	add	x3, x3, #0x454
   368ac:	mov	w2, #0xea                  	// #234
   368b0:	bl	35b30 <__assert_fail@plt>
   368b4:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   368b8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   368bc:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   368c0:	add	x0, x0, #0x2b4
   368c4:	add	x1, x1, #0x36f
   368c8:	add	x3, x3, #0x454
   368cc:	mov	w2, #0xdd                  	// #221
   368d0:	bl	35b30 <__assert_fail@plt>

00000000000368d4 <aarch64_ins_ldst_reglist_r@@Base>:
   368d4:	stp	x29, x30, [sp, #-16]!
   368d8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   368dc:	ldr	x8, [x8, #3944]
   368e0:	mov	x29, sp
   368e4:	ldr	w9, [x8, #100]
   368e8:	sub	w10, w9, #0x1
   368ec:	cmp	w10, #0x1e
   368f0:	b.hi	369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.pmore
   368f4:	ldr	w10, [x8, #96]
   368f8:	tbnz	w10, #31, 369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   368fc:	add	w11, w10, w9
   36900:	cmp	w11, #0x21
   36904:	b.ge	369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.tcont
   36908:	ldr	x11, [x3, #8]
   3690c:	ldrh	w12, [x1, #16]
   36910:	mov	w13, #0xffffffff            	// #-1
   36914:	ldr	w14, [x2]
   36918:	ldr	x11, [x11, #120]
   3691c:	lsl	w9, w13, w9
   36920:	and	w12, w12, #0x1f
   36924:	bic	w9, w12, w9
   36928:	lsl	w9, w9, w10
   3692c:	and	x10, x11, #0x7000000
   36930:	mov	w11, #0x1000000             	// #16777216
   36934:	orr	w9, w14, w9
   36938:	cmp	x10, x11
   3693c:	str	w9, [x2]
   36940:	b.ne	36958 <aarch64_ins_ldst_reglist_r@@Base+0x84>  // b.any
   36944:	ldrh	w10, [x1, #16]
   36948:	and	w10, w10, #0xe0
   3694c:	cmp	w10, #0x40
   36950:	cset	w10, eq  // eq = none
   36954:	b	3695c <aarch64_ins_ldst_reglist_r@@Base+0x88>
   36958:	mov	w10, wzr
   3695c:	ldr	w11, [x8, #252]
   36960:	sub	w12, w11, #0x1
   36964:	cmp	w12, #0x1e
   36968:	b.hi	369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.pmore
   3696c:	ldr	w8, [x8, #248]
   36970:	tbnz	w8, #31, 369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   36974:	add	w12, w8, w11
   36978:	cmp	w12, #0x21
   3697c:	b.ge	369a4 <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.tcont
   36980:	mov	w12, #0xffffffff            	// #-1
   36984:	lsl	w11, w12, w11
   36988:	bic	w10, w10, w11
   3698c:	lsl	w8, w10, w8
   36990:	orr	w8, w8, w9
   36994:	mov	w0, #0x1                   	// #1
   36998:	str	w8, [x2]
   3699c:	ldp	x29, x30, [sp], #16
   369a0:	ret
   369a4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   369a8:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   369ac:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   369b0:	add	x0, x0, #0xfe3
   369b4:	add	x1, x1, #0x40
   369b8:	add	x3, x3, #0x5c
   369bc:	mov	w2, #0x16a                 	// #362
   369c0:	bl	35b30 <__assert_fail@plt>

00000000000369c4 <aarch64_ins_ldst_elemlist@@Base>:
   369c4:	stp	x29, x30, [sp, #-48]!
   369c8:	stp	x20, x19, [sp, #32]
   369cc:	ldrh	w9, [x1, #16]
   369d0:	str	x21, [sp, #16]
   369d4:	mov	x29, sp
   369d8:	tbz	w9, #8, 36b0c <aarch64_ins_ldst_elemlist@@Base+0x148>
   369dc:	adrp	x20, 9b000 <aarch64_operands@@Base+0x16c38>
   369e0:	ldr	x20, [x20, #3944]
   369e4:	ldr	w8, [x20, #100]
   369e8:	sub	w10, w8, #0x1
   369ec:	cmp	w10, #0x1e
   369f0:	b.hi	36aec <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.pmore
   369f4:	ldr	w10, [x20, #96]
   369f8:	tbnz	w10, #31, 36aec <aarch64_ins_ldst_elemlist@@Base+0x128>
   369fc:	add	w11, w10, w8
   36a00:	cmp	w11, #0x21
   36a04:	b.ge	36aec <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.tcont
   36a08:	mov	w11, #0xffffffff            	// #-1
   36a0c:	ldr	w12, [x2]
   36a10:	and	w9, w9, #0x1f
   36a14:	lsl	w8, w11, w8
   36a18:	bic	w8, w9, w8
   36a1c:	lsl	w8, w8, w10
   36a20:	orr	w8, w12, w8
   36a24:	str	w8, [x2]
   36a28:	ldrb	w8, [x1, #4]
   36a2c:	mov	x19, x2
   36a30:	sub	w8, w8, #0x5
   36a34:	cmp	w8, #0x3
   36a38:	b.hi	36b2c <aarch64_ins_ldst_elemlist@@Base+0x168>  // b.pmore
   36a3c:	adrp	x9, 56000 <floatformat_from_double@@Base+0x4f8>
   36a40:	add	x9, x9, #0x2c4
   36a44:	adr	x10, 36a54 <aarch64_ins_ldst_elemlist@@Base+0x90>
   36a48:	ldrb	w11, [x9, x8]
   36a4c:	add	x10, x10, x11, lsl #2
   36a50:	br	x10
   36a54:	ldr	w1, [x1, #24]
   36a58:	mov	w21, wzr
   36a5c:	b	36a90 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36a60:	ldr	w8, [x1, #24]
   36a64:	mov	w21, #0x2                   	// #2
   36a68:	lsl	w1, w8, #2
   36a6c:	b	36a90 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36a70:	ldr	w8, [x1, #24]
   36a74:	mov	w1, #0x1                   	// #1
   36a78:	mov	w21, #0x2                   	// #2
   36a7c:	bfi	w1, w8, #3, #29
   36a80:	b	36a90 <aarch64_ins_ldst_elemlist@@Base+0xcc>
   36a84:	ldr	w8, [x1, #24]
   36a88:	mov	w21, #0x1                   	// #1
   36a8c:	lsl	w1, w8, #1
   36a90:	mov	w3, #0x3                   	// #3
   36a94:	mov	w4, #0x9                   	// #9
   36a98:	mov	w5, #0x1f                  	// #31
   36a9c:	mov	w6, #0xb                   	// #11
   36aa0:	mov	x0, x19
   36aa4:	mov	w2, wzr
   36aa8:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   36aac:	ldr	w8, [x20, #212]
   36ab0:	cmp	w8, #0x3
   36ab4:	b.lt	36aec <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.tstop
   36ab8:	ldr	w8, [x20, #208]
   36abc:	add	w8, w8, #0x1
   36ac0:	cmp	w8, #0x1f
   36ac4:	b.cs	36aec <aarch64_ins_ldst_elemlist@@Base+0x128>  // b.hs, b.nlast
   36ac8:	ldr	w9, [x19]
   36acc:	lsl	w8, w21, w8
   36ad0:	ldr	x21, [sp, #16]
   36ad4:	mov	w0, #0x1                   	// #1
   36ad8:	orr	w8, w9, w8
   36adc:	str	w8, [x19]
   36ae0:	ldp	x20, x19, [sp, #32]
   36ae4:	ldp	x29, x30, [sp], #48
   36ae8:	ret
   36aec:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36af0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36af4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36af8:	add	x0, x0, #0xfe3
   36afc:	add	x1, x1, #0x40
   36b00:	add	x3, x3, #0x5c
   36b04:	mov	w2, #0x16a                 	// #362
   36b08:	bl	35b30 <__assert_fail@plt>
   36b0c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36b10:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   36b14:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36b18:	add	x0, x0, #0x4ec
   36b1c:	add	x1, x1, #0x36f
   36b20:	add	x3, x3, #0x504
   36b24:	mov	w2, #0x117                 	// #279
   36b28:	bl	35b30 <__assert_fail@plt>
   36b2c:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   36b30:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   36b34:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36b38:	add	x0, x0, #0x2b4
   36b3c:	add	x1, x1, #0x36f
   36b40:	add	x3, x3, #0x504
   36b44:	mov	w2, #0x133                 	// #307
   36b48:	bl	35b30 <__assert_fail@plt>

0000000000036b4c <aarch64_ins_advsimd_imm_shift@@Base>:
   36b4c:	stp	x29, x30, [sp, #-48]!
   36b50:	stp	x20, x19, [sp, #32]
   36b54:	ldrb	w0, [x1, #4]
   36b58:	str	x21, [sp, #16]
   36b5c:	mov	x29, sp
   36b60:	mov	x21, x3
   36b64:	mov	x20, x1
   36b68:	mov	x19, x2
   36b6c:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   36b70:	ldr	x8, [x21, #8]
   36b74:	ldr	w9, [x8, #16]
   36b78:	cmp	w9, #0xe
   36b7c:	b.ne	36bd8 <aarch64_ins_advsimd_imm_shift@@Base+0x8c>  // b.any
   36b80:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   36b84:	ldr	x10, [x10, #3944]
   36b88:	ldr	w9, [x10, #92]
   36b8c:	sub	w11, w9, #0x1
   36b90:	cmp	w11, #0x1e
   36b94:	b.hi	36c40 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>  // b.pmore
   36b98:	ldr	w10, [x10, #88]
   36b9c:	tbnz	w10, #31, 36c40 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>
   36ba0:	add	w11, w10, w9
   36ba4:	cmp	w11, #0x21
   36ba8:	b.ge	36c40 <aarch64_ins_advsimd_imm_shift@@Base+0xf4>  // b.tcont
   36bac:	ldr	w8, [x8, #12]
   36bb0:	mov	w12, #0xffffffff            	// #-1
   36bb4:	and	w11, w0, #0x1
   36bb8:	ldr	w13, [x19]
   36bbc:	lsl	w9, w12, w9
   36bc0:	bic	w9, w11, w9
   36bc4:	lsl	w9, w9, w10
   36bc8:	bic	w8, w9, w8
   36bcc:	orr	w8, w13, w8
   36bd0:	lsr	w0, w0, #1
   36bd4:	str	w8, [x19]
   36bd8:	ldr	w8, [x20]
   36bdc:	sub	w9, w8, #0x2b
   36be0:	cmp	w9, #0x2
   36be4:	b.cs	36c60 <aarch64_ins_advsimd_imm_shift@@Base+0x114>  // b.hs, b.nlast
   36be8:	cmp	w8, #0x2c
   36bec:	b.ne	36c04 <aarch64_ins_advsimd_imm_shift@@Base+0xb8>  // b.any
   36bf0:	ldr	w8, [x20, #16]
   36bf4:	mov	w9, #0x10                  	// #16
   36bf8:	lsl	w9, w9, w0
   36bfc:	sub	w1, w9, w8
   36c00:	b	36c14 <aarch64_ins_advsimd_imm_shift@@Base+0xc8>
   36c04:	ldr	w8, [x20, #16]
   36c08:	mov	w9, #0x8                   	// #8
   36c0c:	lsl	w9, w9, w0
   36c10:	add	w1, w9, w8
   36c14:	mov	w3, #0x2                   	// #2
   36c18:	mov	w4, #0x35                  	// #53
   36c1c:	mov	w5, #0x36                  	// #54
   36c20:	mov	x0, x19
   36c24:	mov	w2, wzr
   36c28:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   36c2c:	ldp	x20, x19, [sp, #32]
   36c30:	ldr	x21, [sp, #16]
   36c34:	mov	w0, #0x1                   	// #1
   36c38:	ldp	x29, x30, [sp], #48
   36c3c:	ret
   36c40:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36c44:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36c48:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36c4c:	add	x0, x0, #0xfe3
   36c50:	add	x1, x1, #0x40
   36c54:	add	x3, x3, #0x5c
   36c58:	mov	w2, #0x16a                 	// #362
   36c5c:	bl	35b30 <__assert_fail@plt>
   36c60:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36c64:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   36c68:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   36c6c:	add	x0, x0, #0x59d
   36c70:	add	x1, x1, #0x36f
   36c74:	add	x3, x3, #0x5e8
   36c78:	mov	w2, #0x15b                 	// #347
   36c7c:	bl	35b30 <__assert_fail@plt>

0000000000036c80 <aarch64_ins_imm@@Base>:
   36c80:	stp	x29, x30, [sp, #-16]!
   36c84:	ldr	x9, [x1, #16]
   36c88:	ldr	w10, [x0, #16]
   36c8c:	mov	x8, x2
   36c90:	mov	x1, x8
   36c94:	asr	x11, x9, #2
   36c98:	tst	w10, #0x8
   36c9c:	csel	x9, x9, x11, eq  // eq = none
   36ca0:	lsr	x11, x9, #4
   36ca4:	tst	w10, #0x200
   36ca8:	csel	w2, w9, w11, eq  // eq = none
   36cac:	mov	x29, sp
   36cb0:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   36cb4:	mov	w0, #0x1                   	// #1
   36cb8:	ldp	x29, x30, [sp], #16
   36cbc:	ret
   36cc0:	stp	x29, x30, [sp, #-16]!
   36cc4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   36cc8:	ldr	w10, [x0, #32]
   36ccc:	ldr	x8, [x8, #3944]
   36cd0:	mov	x29, sp
   36cd4:	cbz	w10, 36d24 <aarch64_ins_imm@@Base+0xa4>
   36cd8:	add	x9, x8, x10, lsl #3
   36cdc:	ldr	w9, [x9, #4]
   36ce0:	sub	w11, w9, #0x1
   36ce4:	cmp	w11, #0x1e
   36ce8:	b.hi	36e24 <aarch64_ins_imm@@Base+0x1a4>  // b.pmore
   36cec:	lsl	x10, x10, #3
   36cf0:	ldr	w10, [x8, x10]
   36cf4:	tbnz	w10, #31, 36e24 <aarch64_ins_imm@@Base+0x1a4>
   36cf8:	add	w11, w10, w9
   36cfc:	cmp	w11, #0x21
   36d00:	b.ge	36e24 <aarch64_ins_imm@@Base+0x1a4>  // b.tcont
   36d04:	mov	w11, #0xffffffff            	// #-1
   36d08:	ldr	w12, [x1]
   36d0c:	lsl	w11, w11, w9
   36d10:	bic	w11, w2, w11
   36d14:	lsl	w10, w11, w10
   36d18:	orr	w10, w12, w10
   36d1c:	lsr	w2, w2, w9
   36d20:	str	w10, [x1]
   36d24:	ldr	w10, [x0, #28]
   36d28:	cbz	w10, 36d78 <aarch64_ins_imm@@Base+0xf8>
   36d2c:	add	x9, x8, x10, lsl #3
   36d30:	ldr	w9, [x9, #4]
   36d34:	sub	w11, w9, #0x1
   36d38:	cmp	w11, #0x1e
   36d3c:	b.hi	36e24 <aarch64_ins_imm@@Base+0x1a4>  // b.pmore
   36d40:	lsl	x10, x10, #3
   36d44:	ldr	w10, [x8, x10]
   36d48:	tbnz	w10, #31, 36e24 <aarch64_ins_imm@@Base+0x1a4>
   36d4c:	add	w11, w10, w9
   36d50:	cmp	w11, #0x20
   36d54:	b.gt	36e24 <aarch64_ins_imm@@Base+0x1a4>
   36d58:	mov	w11, #0xffffffff            	// #-1
   36d5c:	ldr	w12, [x1]
   36d60:	lsl	w11, w11, w9
   36d64:	bic	w11, w2, w11
   36d68:	lsl	w10, w11, w10
   36d6c:	orr	w10, w12, w10
   36d70:	lsr	w2, w2, w9
   36d74:	str	w10, [x1]
   36d78:	ldr	w10, [x0, #24]
   36d7c:	cbz	w10, 36dcc <aarch64_ins_imm@@Base+0x14c>
   36d80:	add	x9, x8, x10, lsl #3
   36d84:	ldr	w9, [x9, #4]
   36d88:	sub	w11, w9, #0x1
   36d8c:	cmp	w11, #0x1e
   36d90:	b.hi	36e24 <aarch64_ins_imm@@Base+0x1a4>  // b.pmore
   36d94:	lsl	x10, x10, #3
   36d98:	ldr	w10, [x8, x10]
   36d9c:	tbnz	w10, #31, 36e24 <aarch64_ins_imm@@Base+0x1a4>
   36da0:	add	w11, w10, w9
   36da4:	cmp	w11, #0x20
   36da8:	b.gt	36e24 <aarch64_ins_imm@@Base+0x1a4>
   36dac:	mov	w11, #0xffffffff            	// #-1
   36db0:	ldr	w12, [x1]
   36db4:	lsl	w11, w11, w9
   36db8:	bic	w11, w2, w11
   36dbc:	lsl	w10, w11, w10
   36dc0:	orr	w10, w12, w10
   36dc4:	lsr	w2, w2, w9
   36dc8:	str	w10, [x1]
   36dcc:	ldr	w10, [x0, #20]
   36dd0:	cbz	w10, 36e1c <aarch64_ins_imm@@Base+0x19c>
   36dd4:	add	x9, x8, x10, lsl #3
   36dd8:	ldr	w9, [x9, #4]
   36ddc:	sub	w11, w9, #0x1
   36de0:	cmp	w11, #0x1e
   36de4:	b.hi	36e24 <aarch64_ins_imm@@Base+0x1a4>  // b.pmore
   36de8:	lsl	x10, x10, #3
   36dec:	ldr	w8, [x8, x10]
   36df0:	tbnz	w8, #31, 36e24 <aarch64_ins_imm@@Base+0x1a4>
   36df4:	add	w10, w8, w9
   36df8:	cmp	w10, #0x20
   36dfc:	b.gt	36e24 <aarch64_ins_imm@@Base+0x1a4>
   36e00:	mov	w10, #0xffffffff            	// #-1
   36e04:	ldr	w11, [x1]
   36e08:	lsl	w9, w10, w9
   36e0c:	bic	w9, w2, w9
   36e10:	lsl	w8, w9, w8
   36e14:	orr	w8, w11, w8
   36e18:	str	w8, [x1]
   36e1c:	ldp	x29, x30, [sp], #16
   36e20:	ret
   36e24:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36e28:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36e2c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36e30:	add	x0, x0, #0xfe3
   36e34:	add	x1, x1, #0x40
   36e38:	add	x3, x3, #0x5c
   36e3c:	mov	w2, #0x16a                 	// #362
   36e40:	bl	35b30 <__assert_fail@plt>

0000000000036e44 <aarch64_ins_imm_half@@Base>:
   36e44:	stp	x29, x30, [sp, #-32]!
   36e48:	stp	x20, x19, [sp, #16]
   36e4c:	ldr	x8, [x1, #16]
   36e50:	ldr	w9, [x0, #16]
   36e54:	mov	x19, x2
   36e58:	mov	x20, x1
   36e5c:	asr	x10, x8, #2
   36e60:	tst	w9, #0x8
   36e64:	csel	x8, x8, x10, eq  // eq = none
   36e68:	lsr	x10, x8, #4
   36e6c:	tst	w9, #0x200
   36e70:	csel	w2, w8, w10, eq  // eq = none
   36e74:	mov	x1, x19
   36e78:	mov	x29, sp
   36e7c:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   36e80:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   36e84:	ldr	x9, [x9, #3944]
   36e88:	ldr	w8, [x9, #260]
   36e8c:	sub	w10, w8, #0x1
   36e90:	cmp	w10, #0x1e
   36e94:	b.hi	36ee0 <aarch64_ins_imm_half@@Base+0x9c>  // b.pmore
   36e98:	ldr	w9, [x9, #256]
   36e9c:	tbnz	w9, #31, 36ee0 <aarch64_ins_imm_half@@Base+0x9c>
   36ea0:	add	w10, w9, w8
   36ea4:	cmp	w10, #0x21
   36ea8:	b.ge	36ee0 <aarch64_ins_imm_half@@Base+0x9c>  // b.tcont
   36eac:	ldr	x10, [x20, #40]
   36eb0:	mov	w11, #0xffffffff            	// #-1
   36eb4:	ldr	w12, [x19]
   36eb8:	lsl	w8, w11, w8
   36ebc:	lsr	x10, x10, #4
   36ec0:	bic	w8, w10, w8
   36ec4:	lsl	w8, w8, w9
   36ec8:	orr	w8, w12, w8
   36ecc:	str	w8, [x19]
   36ed0:	ldp	x20, x19, [sp, #16]
   36ed4:	mov	w0, #0x1                   	// #1
   36ed8:	ldp	x29, x30, [sp], #32
   36edc:	ret
   36ee0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   36ee4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   36ee8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   36eec:	add	x0, x0, #0xfe3
   36ef0:	add	x1, x1, #0x40
   36ef4:	add	x3, x3, #0x5c
   36ef8:	mov	w2, #0x16a                 	// #362
   36efc:	bl	35b30 <__assert_fail@plt>

0000000000036f00 <aarch64_ins_advsimd_imm_modified@@Base>:
   36f00:	stp	x29, x30, [sp, #-64]!
   36f04:	stp	x22, x21, [sp, #32]
   36f08:	stp	x20, x19, [sp, #48]
   36f0c:	str	x23, [sp, #16]
   36f10:	ldrb	w20, [x3, #28]
   36f14:	ldr	x21, [x1, #16]
   36f18:	ldr	w23, [x1, #32]
   36f1c:	ldrb	w8, [x1, #24]
   36f20:	ldr	w22, [x1, #40]
   36f24:	mov	x19, x2
   36f28:	mov	x29, sp
   36f2c:	tbnz	w8, #0, 36f54 <aarch64_ins_advsimd_imm_modified@@Base+0x54>
   36f30:	mov	w0, w20
   36f34:	bl	35710 <aarch64_get_qualifier_esize@plt>
   36f38:	and	w8, w0, #0xff
   36f3c:	cmp	w8, #0x8
   36f40:	b.ne	36f54 <aarch64_ins_advsimd_imm_modified@@Base+0x54>  // b.any
   36f44:	mov	x0, x21
   36f48:	bl	357e0 <aarch64_shrink_expanded_imm8@plt>
   36f4c:	tbnz	w0, #31, 370b8 <aarch64_ins_advsimd_imm_modified@@Base+0x1b8>
   36f50:	sxtw	x21, w0
   36f54:	mov	w3, #0x2                   	// #2
   36f58:	mov	w4, #0x3                   	// #3
   36f5c:	mov	w5, #0x4                   	// #4
   36f60:	mov	x0, x19
   36f64:	mov	w1, w21
   36f68:	mov	w2, wzr
   36f6c:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   36f70:	cbz	w23, 37040 <aarch64_ins_advsimd_imm_modified@@Base+0x140>
   36f74:	orr	w8, w23, #0x4
   36f78:	cmp	w8, #0x5
   36f7c:	b.ne	37078 <aarch64_ins_advsimd_imm_modified@@Base+0x178>  // b.any
   36f80:	cmp	w23, #0x5
   36f84:	b.ne	36fe0 <aarch64_ins_advsimd_imm_modified@@Base+0xe0>  // b.any
   36f88:	mov	w0, w20
   36f8c:	bl	35710 <aarch64_get_qualifier_esize@plt>
   36f90:	and	w8, w0, #0xff
   36f94:	cmp	w8, #0x1
   36f98:	b.eq	37040 <aarch64_ins_advsimd_imm_modified@@Base+0x140>  // b.none
   36f9c:	cmp	w8, #0x2
   36fa0:	b.eq	36fac <aarch64_ins_advsimd_imm_modified@@Base+0xac>  // b.none
   36fa4:	cmp	w8, #0x4
   36fa8:	b.ne	37098 <aarch64_ins_advsimd_imm_modified@@Base+0x198>  // b.any
   36fac:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   36fb0:	ldr	x9, [x9, #3944]
   36fb4:	and	w8, w0, #0xff
   36fb8:	cmp	w8, #0x4
   36fbc:	asr	w8, w22, #3
   36fc0:	ldr	w10, [x9, #204]
   36fc4:	b.ne	37000 <aarch64_ins_advsimd_imm_modified@@Base+0x100>  // b.any
   36fc8:	cmp	w10, #0x3
   36fcc:	b.lt	37058 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   36fd0:	ldr	w9, [x9, #200]
   36fd4:	mov	w10, #0x2                   	// #2
   36fd8:	add	w9, w9, #0x1
   36fdc:	b	37014 <aarch64_ins_advsimd_imm_modified@@Base+0x114>
   36fe0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   36fe4:	ldr	x8, [x8, #3944]
   36fe8:	ldr	w9, [x8, #204]
   36fec:	cmp	w9, #0x1
   36ff0:	b.lt	37058 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   36ff4:	ldr	w9, [x8, #200]
   36ff8:	asr	w8, w22, #4
   36ffc:	b	37010 <aarch64_ins_advsimd_imm_modified@@Base+0x110>
   37000:	cmp	w10, #0x2
   37004:	b.lt	37058 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tstop
   37008:	ldr	w9, [x9, #200]
   3700c:	add	w9, w9, #0x1
   37010:	mov	w10, #0x1                   	// #1
   37014:	tbnz	w9, #31, 37058 <aarch64_ins_advsimd_imm_modified@@Base+0x158>
   37018:	add	w11, w10, w9
   3701c:	cmp	w11, #0x21
   37020:	b.ge	37058 <aarch64_ins_advsimd_imm_modified@@Base+0x158>  // b.tcont
   37024:	mov	w11, #0xffffffff            	// #-1
   37028:	ldr	w12, [x19]
   3702c:	lsl	w10, w11, w10
   37030:	bic	w8, w8, w10
   37034:	lsl	w8, w8, w9
   37038:	orr	w8, w12, w8
   3703c:	str	w8, [x19]
   37040:	ldp	x20, x19, [sp, #48]
   37044:	ldp	x22, x21, [sp, #32]
   37048:	ldr	x23, [sp, #16]
   3704c:	mov	w0, #0x1                   	// #1
   37050:	ldp	x29, x30, [sp], #64
   37054:	ret
   37058:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3705c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37060:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37064:	add	x0, x0, #0xfe3
   37068:	add	x1, x1, #0x40
   3706c:	add	x3, x3, #0x5c
   37070:	mov	w2, #0x16a                 	// #362
   37074:	bl	35b30 <__assert_fail@plt>
   37078:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3707c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37080:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37084:	add	x0, x0, #0x733
   37088:	add	x1, x1, #0x36f
   3708c:	add	x3, x3, #0x693
   37090:	mov	w2, #0x1b6                 	// #438
   37094:	bl	35b30 <__assert_fail@plt>
   37098:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3709c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   370a0:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   370a4:	add	x0, x0, #0x766
   370a8:	add	x1, x1, #0x36f
   370ac:	add	x3, x3, #0x693
   370b0:	mov	w2, #0x1bb                 	// #443
   370b4:	bl	35b30 <__assert_fail@plt>
   370b8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   370bc:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   370c0:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   370c4:	add	x0, x0, #0x685
   370c8:	add	x1, x1, #0x36f
   370cc:	add	x3, x3, #0x693
   370d0:	mov	w2, #0x1ae                 	// #430
   370d4:	bl	35b30 <__assert_fail@plt>

00000000000370d8 <aarch64_ins_fpimm@@Base>:
   370d8:	stp	x29, x30, [sp, #-16]!
   370dc:	mov	x8, x2
   370e0:	ldr	w2, [x1, #16]
   370e4:	mov	x1, x8
   370e8:	mov	x29, sp
   370ec:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   370f0:	mov	w0, #0x1                   	// #1
   370f4:	ldp	x29, x30, [sp], #16
   370f8:	ret

00000000000370fc <aarch64_ins_imm_rotate1@@Base>:
   370fc:	stp	x29, x30, [sp, #-16]!
   37100:	ldr	x8, [x1, #16]
   37104:	mov	x9, #0x2d83                	// #11651
   37108:	movk	x9, #0x82d8, lsl #16
   3710c:	movk	x9, #0xd82d, lsl #32
   37110:	sub	x8, x8, #0x5a
   37114:	movk	x9, #0x2d82, lsl #48
   37118:	smulh	x8, x8, x9
   3711c:	asr	x9, x8, #5
   37120:	add	x8, x9, x8, lsr #63
   37124:	cmp	x8, #0x2
   37128:	mov	x29, sp
   3712c:	b.cs	371bc <aarch64_ins_imm_rotate1@@Base+0xc0>  // b.hs, b.nlast
   37130:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   37134:	ldr	w10, [x0, #20]
   37138:	ldr	x11, [x11, #3944]
   3713c:	add	x9, x11, x10, lsl #3
   37140:	ldr	w9, [x9, #4]
   37144:	sub	w12, w9, #0x1
   37148:	cmp	w12, #0x1e
   3714c:	b.hi	3719c <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.pmore
   37150:	lsl	x10, x10, #3
   37154:	ldr	w10, [x11, x10]
   37158:	tbnz	w10, #31, 3719c <aarch64_ins_imm_rotate1@@Base+0xa0>
   3715c:	add	w11, w10, w9
   37160:	cmp	w11, #0x21
   37164:	b.ge	3719c <aarch64_ins_imm_rotate1@@Base+0xa0>  // b.tcont
   37168:	ldr	x11, [x3, #8]
   3716c:	mov	w12, #0xffffffff            	// #-1
   37170:	ldr	w13, [x2]
   37174:	lsl	w9, w12, w9
   37178:	ldr	w11, [x11, #12]
   3717c:	bic	w8, w8, w9
   37180:	lsl	w8, w8, w10
   37184:	mov	w0, #0x1                   	// #1
   37188:	bic	w8, w8, w11
   3718c:	orr	w8, w13, w8
   37190:	str	w8, [x2]
   37194:	ldp	x29, x30, [sp], #16
   37198:	ret
   3719c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   371a0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   371a4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   371a8:	add	x0, x0, #0xfe3
   371ac:	add	x1, x1, #0x40
   371b0:	add	x3, x3, #0x5c
   371b4:	mov	w2, #0x16a                 	// #362
   371b8:	bl	35b30 <__assert_fail@plt>
   371bc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   371c0:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   371c4:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   371c8:	add	x0, x0, #0x78d
   371cc:	add	x1, x1, #0x36f
   371d0:	add	x3, x3, #0x796
   371d4:	mov	w2, #0x1e4                 	// #484
   371d8:	bl	35b30 <__assert_fail@plt>

00000000000371dc <aarch64_ins_imm_rotate2@@Base>:
   371dc:	stp	x29, x30, [sp, #-16]!
   371e0:	ldr	x8, [x1, #16]
   371e4:	mov	x9, #0x2d83                	// #11651
   371e8:	movk	x9, #0x82d8, lsl #16
   371ec:	movk	x9, #0xd82d, lsl #32
   371f0:	movk	x9, #0x2d82, lsl #48
   371f4:	smulh	x8, x8, x9
   371f8:	asr	x9, x8, #4
   371fc:	add	x8, x9, x8, lsr #63
   37200:	cmp	x8, #0x4
   37204:	mov	x29, sp
   37208:	b.cs	37298 <aarch64_ins_imm_rotate2@@Base+0xbc>  // b.hs, b.nlast
   3720c:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   37210:	ldr	w10, [x0, #20]
   37214:	ldr	x11, [x11, #3944]
   37218:	add	x9, x11, x10, lsl #3
   3721c:	ldr	w9, [x9, #4]
   37220:	sub	w12, w9, #0x1
   37224:	cmp	w12, #0x1e
   37228:	b.hi	37278 <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.pmore
   3722c:	lsl	x10, x10, #3
   37230:	ldr	w10, [x11, x10]
   37234:	tbnz	w10, #31, 37278 <aarch64_ins_imm_rotate2@@Base+0x9c>
   37238:	add	w11, w10, w9
   3723c:	cmp	w11, #0x21
   37240:	b.ge	37278 <aarch64_ins_imm_rotate2@@Base+0x9c>  // b.tcont
   37244:	ldr	x11, [x3, #8]
   37248:	mov	w12, #0xffffffff            	// #-1
   3724c:	ldr	w13, [x2]
   37250:	lsl	w9, w12, w9
   37254:	ldr	w11, [x11, #12]
   37258:	bic	w8, w8, w9
   3725c:	lsl	w8, w8, w10
   37260:	mov	w0, #0x1                   	// #1
   37264:	bic	w8, w8, w11
   37268:	orr	w8, w13, w8
   3726c:	str	w8, [x2]
   37270:	ldp	x29, x30, [sp], #16
   37274:	ret
   37278:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3727c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37280:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37284:	add	x0, x0, #0xfe3
   37288:	add	x1, x1, #0x40
   3728c:	add	x3, x3, #0x5c
   37290:	mov	w2, #0x16a                 	// #362
   37294:	bl	35b30 <__assert_fail@plt>
   37298:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3729c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   372a0:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   372a4:	add	x0, x0, #0x82d
   372a8:	add	x1, x1, #0x36f
   372ac:	add	x3, x3, #0x836
   372b0:	mov	w2, #0x1f1                 	// #497
   372b4:	bl	35b30 <__assert_fail@plt>

00000000000372b8 <aarch64_ins_fbits@@Base>:
   372b8:	stp	x29, x30, [sp, #-16]!
   372bc:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   372c0:	ldr	w9, [x0, #20]
   372c4:	ldr	x10, [x10, #3944]
   372c8:	mov	x29, sp
   372cc:	add	x8, x10, x9, lsl #3
   372d0:	ldr	w8, [x8, #4]
   372d4:	sub	w11, w8, #0x1
   372d8:	cmp	w11, #0x1e
   372dc:	b.hi	3732c <aarch64_ins_fbits@@Base+0x74>  // b.pmore
   372e0:	lsl	x9, x9, #3
   372e4:	ldr	w9, [x10, x9]
   372e8:	tbnz	w9, #31, 3732c <aarch64_ins_fbits@@Base+0x74>
   372ec:	add	w10, w9, w8
   372f0:	cmp	w10, #0x21
   372f4:	b.ge	3732c <aarch64_ins_fbits@@Base+0x74>  // b.tcont
   372f8:	ldr	w10, [x1, #16]
   372fc:	mov	w11, #0x40                  	// #64
   37300:	mov	w12, #0xffffffff            	// #-1
   37304:	ldr	w13, [x2]
   37308:	lsl	w8, w12, w8
   3730c:	sub	w10, w11, w10
   37310:	bic	w8, w10, w8
   37314:	lsl	w8, w8, w9
   37318:	orr	w8, w13, w8
   3731c:	mov	w0, #0x1                   	// #1
   37320:	str	w8, [x2]
   37324:	ldp	x29, x30, [sp], #16
   37328:	ret
   3732c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37330:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37334:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37338:	add	x0, x0, #0xfe3
   3733c:	add	x1, x1, #0x40
   37340:	add	x3, x3, #0x5c
   37344:	mov	w2, #0x16a                 	// #362
   37348:	bl	35b30 <__assert_fail@plt>

000000000003734c <aarch64_ins_aimm@@Base>:
   3734c:	stp	x29, x30, [sp, #-16]!
   37350:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   37354:	ldr	w11, [x0, #20]
   37358:	ldr	x9, [x1, #40]
   3735c:	ldr	x8, [x8, #3944]
   37360:	mov	x29, sp
   37364:	cmp	x9, #0x0
   37368:	add	x10, x8, x11, lsl #3
   3736c:	ldr	w10, [x10, #4]
   37370:	cset	w9, ne  // ne = any
   37374:	sub	w12, w10, #0x1
   37378:	cmp	w12, #0x1e
   3737c:	b.hi	3740c <aarch64_ins_aimm@@Base+0xc0>  // b.pmore
   37380:	lsl	x11, x11, #3
   37384:	ldr	w11, [x8, x11]
   37388:	tbnz	w11, #31, 3740c <aarch64_ins_aimm@@Base+0xc0>
   3738c:	add	w12, w11, w10
   37390:	cmp	w12, #0x21
   37394:	b.ge	3740c <aarch64_ins_aimm@@Base+0xc0>  // b.tcont
   37398:	mov	w12, #0xffffffff            	// #-1
   3739c:	ldr	w13, [x2]
   373a0:	lsl	w10, w12, w10
   373a4:	bic	w9, w9, w10
   373a8:	lsl	w9, w9, w11
   373ac:	orr	w9, w13, w9
   373b0:	str	w9, [x2]
   373b4:	ldr	w11, [x0, #24]
   373b8:	add	x10, x8, x11, lsl #3
   373bc:	ldr	w10, [x10, #4]
   373c0:	sub	w12, w10, #0x1
   373c4:	cmp	w12, #0x1e
   373c8:	b.hi	3740c <aarch64_ins_aimm@@Base+0xc0>  // b.pmore
   373cc:	lsl	x11, x11, #3
   373d0:	ldr	w8, [x8, x11]
   373d4:	tbnz	w8, #31, 3740c <aarch64_ins_aimm@@Base+0xc0>
   373d8:	add	w11, w8, w10
   373dc:	cmp	w11, #0x21
   373e0:	b.ge	3740c <aarch64_ins_aimm@@Base+0xc0>  // b.tcont
   373e4:	ldr	w11, [x1, #16]
   373e8:	mov	w12, #0xffffffff            	// #-1
   373ec:	lsl	w10, w12, w10
   373f0:	mov	w0, #0x1                   	// #1
   373f4:	bic	w10, w11, w10
   373f8:	lsl	w8, w10, w8
   373fc:	orr	w8, w8, w9
   37400:	str	w8, [x2]
   37404:	ldp	x29, x30, [sp], #16
   37408:	ret
   3740c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37410:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37414:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37418:	add	x0, x0, #0xfe3
   3741c:	add	x1, x1, #0x40
   37420:	add	x3, x3, #0x5c
   37424:	mov	w2, #0x16a                 	// #362
   37428:	bl	35b30 <__assert_fail@plt>

000000000003742c <aarch64_ins_limm@@Base>:
   3742c:	stp	x29, x30, [sp, #-48]!
   37430:	stp	x20, x19, [sp, #32]
   37434:	ldr	x8, [x3, #8]
   37438:	mov	x20, x0
   3743c:	ldr	x9, [x1, #16]
   37440:	ldrb	w0, [x3, #28]
   37444:	ldr	w8, [x8, #20]
   37448:	str	x21, [sp, #16]
   3744c:	mov	x29, sp
   37450:	mov	x19, x2
   37454:	cmp	w8, #0x2a
   37458:	cinv	x21, x9, eq  // eq = none
   3745c:	bl	35710 <aarch64_get_qualifier_esize@plt>
   37460:	and	w1, w0, #0xff
   37464:	add	x2, x29, #0x1c
   37468:	mov	x0, x21
   3746c:	bl	354a0 <aarch64_logical_immediate_p@plt>
   37470:	cbz	w0, 374a4 <aarch64_ins_limm@@Base+0x78>
   37474:	ldr	w1, [x29, #28]
   37478:	ldp	w5, w4, [x20, #24]
   3747c:	ldr	w6, [x20, #20]
   37480:	mov	w3, #0x3                   	// #3
   37484:	mov	x0, x19
   37488:	mov	w2, wzr
   3748c:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   37490:	ldp	x20, x19, [sp, #32]
   37494:	ldr	x21, [sp, #16]
   37498:	mov	w0, #0x1                   	// #1
   3749c:	ldp	x29, x30, [sp], #48
   374a0:	ret
   374a4:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   374a8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   374ac:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   374b0:	add	x0, x0, #0xb3
   374b4:	add	x1, x1, #0x36f
   374b8:	add	x3, x3, #0xe4
   374bc:	mov	w2, #0x220                 	// #544
   374c0:	bl	35b30 <__assert_fail@plt>

00000000000374c4 <aarch64_ins_inv_limm@@Base>:
   374c4:	stp	x29, x30, [sp, #-48]!
   374c8:	stp	x20, x19, [sp, #32]
   374cc:	ldrb	w8, [x3, #28]
   374d0:	str	x21, [sp, #16]
   374d4:	ldr	x21, [x1, #16]
   374d8:	mov	x20, x0
   374dc:	mov	w0, w8
   374e0:	mov	x29, sp
   374e4:	mov	x19, x2
   374e8:	bl	35710 <aarch64_get_qualifier_esize@plt>
   374ec:	and	w1, w0, #0xff
   374f0:	mvn	x0, x21
   374f4:	add	x2, x29, #0x1c
   374f8:	bl	354a0 <aarch64_logical_immediate_p@plt>
   374fc:	cbz	w0, 37530 <aarch64_ins_inv_limm@@Base+0x6c>
   37500:	ldr	w1, [x29, #28]
   37504:	ldp	w5, w4, [x20, #24]
   37508:	ldr	w6, [x20, #20]
   3750c:	mov	w3, #0x3                   	// #3
   37510:	mov	x0, x19
   37514:	mov	w2, wzr
   37518:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3751c:	ldp	x20, x19, [sp, #32]
   37520:	ldr	x21, [sp, #16]
   37524:	mov	w0, #0x1                   	// #1
   37528:	ldp	x29, x30, [sp], #48
   3752c:	ret
   37530:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   37534:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37538:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3753c:	add	x0, x0, #0xb3
   37540:	add	x1, x1, #0x36f
   37544:	add	x3, x3, #0xe4
   37548:	mov	w2, #0x220                 	// #544
   3754c:	bl	35b30 <__assert_fail@plt>

0000000000037550 <aarch64_ins_ft@@Base>:
   37550:	stp	x29, x30, [sp, #-32]!
   37554:	ldr	w8, [x1, #8]
   37558:	str	x19, [sp, #16]
   3755c:	mov	x29, sp
   37560:	cbnz	w8, 37678 <aarch64_ins_ft@@Base+0x128>
   37564:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   37568:	ldr	w10, [x0, #20]
   3756c:	ldr	x8, [x8, #3944]
   37570:	add	x9, x8, x10, lsl #3
   37574:	ldr	w9, [x9, #4]
   37578:	sub	w11, w9, #0x1
   3757c:	cmp	w11, #0x1e
   37580:	b.hi	37658 <aarch64_ins_ft@@Base+0x108>  // b.pmore
   37584:	lsl	x10, x10, #3
   37588:	ldr	w10, [x8, x10]
   3758c:	tbnz	w10, #31, 37658 <aarch64_ins_ft@@Base+0x108>
   37590:	add	w11, w10, w9
   37594:	cmp	w11, #0x21
   37598:	b.ge	37658 <aarch64_ins_ft@@Base+0x108>  // b.tcont
   3759c:	ldr	w11, [x1, #16]
   375a0:	mov	w12, #0xffffffff            	// #-1
   375a4:	ldr	w13, [x2]
   375a8:	lsl	w9, w12, w9
   375ac:	bic	w9, w11, w9
   375b0:	lsl	w9, w9, w10
   375b4:	orr	w9, w13, w9
   375b8:	str	w9, [x2]
   375bc:	ldr	x10, [x3, #8]
   375c0:	ldrb	w0, [x1, #4]
   375c4:	mov	x19, x2
   375c8:	ldr	w10, [x10, #16]
   375cc:	sub	w10, w10, #0x3d
   375d0:	cmp	w10, #0x3
   375d4:	b.hi	37628 <aarch64_ins_ft@@Base+0xd8>  // b.pmore
   375d8:	sub	w10, w0, #0x7
   375dc:	cmp	w10, #0x3
   375e0:	b.cs	37698 <aarch64_ins_ft@@Base+0x148>  // b.hs, b.nlast
   375e4:	ldr	w11, [x8, #300]
   375e8:	sub	w12, w11, #0x1
   375ec:	cmp	w12, #0x1e
   375f0:	b.hi	37658 <aarch64_ins_ft@@Base+0x108>  // b.pmore
   375f4:	ldr	w8, [x8, #296]
   375f8:	tbnz	w8, #31, 37658 <aarch64_ins_ft@@Base+0x108>
   375fc:	add	w12, w8, w11
   37600:	cmp	w12, #0x21
   37604:	b.ge	37658 <aarch64_ins_ft@@Base+0x108>  // b.tcont
   37608:	mov	w12, #0xffffffff            	// #-1
   3760c:	and	w10, w10, #0xff
   37610:	lsl	w11, w12, w11
   37614:	bic	w10, w10, w11
   37618:	lsl	w8, w10, w8
   3761c:	orr	w8, w8, w9
   37620:	str	w8, [x19]
   37624:	b	37648 <aarch64_ins_ft@@Base+0xf8>
   37628:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3762c:	mov	w1, w0
   37630:	mov	w3, #0x2                   	// #2
   37634:	mov	w4, #0x25                  	// #37
   37638:	mov	w5, #0x22                  	// #34
   3763c:	mov	x0, x19
   37640:	mov	w2, wzr
   37644:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   37648:	ldr	x19, [sp, #16]
   3764c:	mov	w0, #0x1                   	// #1
   37650:	ldp	x29, x30, [sp], #32
   37654:	ret
   37658:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3765c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37660:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37664:	add	x0, x0, #0xfe3
   37668:	add	x1, x1, #0x40
   3766c:	add	x3, x3, #0x5c
   37670:	mov	w2, #0x16a                 	// #362
   37674:	bl	35b30 <__assert_fail@plt>
   37678:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3767c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37680:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37684:	add	x0, x0, #0x8cd
   37688:	add	x1, x1, #0x36f
   3768c:	add	x3, x3, #0x8dc
   37690:	mov	w2, #0x245                 	// #581
   37694:	bl	35b30 <__assert_fail@plt>
   37698:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3769c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   376a0:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   376a4:	add	x0, x0, #0x2b4
   376a8:	add	x1, x1, #0x36f
   376ac:	add	x3, x3, #0x8dc
   376b0:	mov	w2, #0x254                 	// #596
   376b4:	bl	35b30 <__assert_fail@plt>

00000000000376b8 <aarch64_ins_addr_simple@@Base>:
   376b8:	stp	x29, x30, [sp, #-16]!
   376bc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   376c0:	ldr	x9, [x9, #3944]
   376c4:	mov	x29, sp
   376c8:	ldr	w8, [x9, #116]
   376cc:	sub	w10, w8, #0x1
   376d0:	cmp	w10, #0x1e
   376d4:	b.hi	37718 <aarch64_ins_addr_simple@@Base+0x60>  // b.pmore
   376d8:	ldr	w9, [x9, #112]
   376dc:	tbnz	w9, #31, 37718 <aarch64_ins_addr_simple@@Base+0x60>
   376e0:	add	w10, w9, w8
   376e4:	cmp	w10, #0x21
   376e8:	b.ge	37718 <aarch64_ins_addr_simple@@Base+0x60>  // b.tcont
   376ec:	ldr	w10, [x1, #16]
   376f0:	mov	w11, #0xffffffff            	// #-1
   376f4:	ldr	w12, [x2]
   376f8:	lsl	w8, w11, w8
   376fc:	bic	w8, w10, w8
   37700:	lsl	w8, w8, w9
   37704:	orr	w8, w12, w8
   37708:	mov	w0, #0x1                   	// #1
   3770c:	str	w8, [x2]
   37710:	ldp	x29, x30, [sp], #16
   37714:	ret
   37718:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3771c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37720:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37724:	add	x0, x0, #0xfe3
   37728:	add	x1, x1, #0x40
   3772c:	add	x3, x3, #0x5c
   37730:	mov	w2, #0x16a                 	// #362
   37734:	bl	35b30 <__assert_fail@plt>

0000000000037738 <aarch64_ins_addr_regoff@@Base>:
   37738:	stp	x29, x30, [sp, #-48]!
   3773c:	str	x21, [sp, #16]
   37740:	stp	x20, x19, [sp, #32]
   37744:	adrp	x21, 9b000 <aarch64_operands@@Base+0x16c38>
   37748:	ldr	x21, [x21, #3944]
   3774c:	mov	x29, sp
   37750:	ldr	w9, [x21, #116]
   37754:	sub	w8, w9, #0x1
   37758:	cmp	w8, #0x1e
   3775c:	b.hi	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   37760:	ldr	w11, [x21, #112]
   37764:	tbnz	w11, #31, 378a8 <aarch64_ins_addr_regoff@@Base+0x170>
   37768:	add	w8, w11, w9
   3776c:	cmp	w8, #0x21
   37770:	b.ge	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   37774:	ldr	w12, [x1, #16]
   37778:	ldr	w10, [x21, #228]
   3777c:	mov	w13, #0xffffffff            	// #-1
   37780:	ldr	w14, [x2]
   37784:	ldr	w8, [x1, #32]
   37788:	lsl	w9, w13, w9
   3778c:	bic	w9, w12, w9
   37790:	sub	w12, w10, #0x1
   37794:	lsl	w9, w9, w11
   37798:	mov	x19, x2
   3779c:	mov	x20, x1
   377a0:	orr	w9, w14, w9
   377a4:	cmp	w12, #0x1e
   377a8:	str	w9, [x2]
   377ac:	b.hi	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   377b0:	ldr	w11, [x21, #224]
   377b4:	tbnz	w11, #31, 378a8 <aarch64_ins_addr_regoff@@Base+0x170>
   377b8:	add	w12, w11, w10
   377bc:	cmp	w12, #0x21
   377c0:	b.ge	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   377c4:	ldr	w12, [x20, #20]
   377c8:	mov	w13, #0xffffffff            	// #-1
   377cc:	lsl	w10, w13, w10
   377d0:	cmp	w8, #0x5
   377d4:	bic	w10, w12, w10
   377d8:	mov	w14, #0x9                   	// #9
   377dc:	lsl	w10, w10, w11
   377e0:	orr	w9, w10, w9
   377e4:	csel	w0, w14, w8, eq  // eq = none
   377e8:	str	w9, [x19]
   377ec:	bl	354d0 <aarch64_get_operand_modifier_value@plt>
   377f0:	ldr	w8, [x21, #244]
   377f4:	sub	w9, w8, #0x1
   377f8:	cmp	w9, #0x1e
   377fc:	b.hi	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   37800:	ldr	w9, [x21, #240]
   37804:	tbnz	w9, #31, 378a8 <aarch64_ins_addr_regoff@@Base+0x170>
   37808:	add	w10, w9, w8
   3780c:	cmp	w10, #0x21
   37810:	b.ge	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   37814:	mov	w10, #0xffffffff            	// #-1
   37818:	ldr	w11, [x19]
   3781c:	lsl	w8, w10, w8
   37820:	bic	w8, w0, w8
   37824:	lsl	w8, w8, w9
   37828:	orr	w8, w11, w8
   3782c:	str	w8, [x19]
   37830:	ldrb	w9, [x20, #4]
   37834:	cmp	w9, #0x5
   37838:	b.ne	3784c <aarch64_ins_addr_regoff@@Base+0x114>  // b.any
   3783c:	ldrb	w9, [x20, #36]
   37840:	and	w9, w9, w9, lsr #1
   37844:	and	w9, w9, #0x1
   37848:	b	37858 <aarch64_ins_addr_regoff@@Base+0x120>
   3784c:	ldr	x9, [x20, #40]
   37850:	cmp	x9, #0x0
   37854:	cset	w9, ne  // ne = any
   37858:	ldr	w10, [x21, #252]
   3785c:	sub	w11, w10, #0x1
   37860:	cmp	w11, #0x1e
   37864:	b.hi	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.pmore
   37868:	ldr	w11, [x21, #248]
   3786c:	tbnz	w11, #31, 378a8 <aarch64_ins_addr_regoff@@Base+0x170>
   37870:	add	w12, w11, w10
   37874:	cmp	w12, #0x21
   37878:	b.ge	378a8 <aarch64_ins_addr_regoff@@Base+0x170>  // b.tcont
   3787c:	mov	w12, #0xffffffff            	// #-1
   37880:	lsl	w10, w12, w10
   37884:	bic	w9, w9, w10
   37888:	lsl	w9, w9, w11
   3788c:	orr	w8, w9, w8
   37890:	str	w8, [x19]
   37894:	ldp	x20, x19, [sp, #32]
   37898:	ldr	x21, [sp, #16]
   3789c:	mov	w0, #0x1                   	// #1
   378a0:	ldp	x29, x30, [sp], #48
   378a4:	ret
   378a8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   378ac:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   378b0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   378b4:	add	x0, x0, #0xfe3
   378b8:	add	x1, x1, #0x40
   378bc:	add	x3, x3, #0x5c
   378c0:	mov	w2, #0x16a                 	// #362
   378c4:	bl	35b30 <__assert_fail@plt>

00000000000378c8 <aarch64_ins_addr_offset@@Base>:
   378c8:	stp	x29, x30, [sp, #-16]!
   378cc:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   378d0:	ldr	w10, [x0, #20]
   378d4:	ldr	x8, [x8, #3944]
   378d8:	mov	x29, sp
   378dc:	add	x9, x8, x10, lsl #3
   378e0:	ldr	w9, [x9, #4]
   378e4:	sub	w11, w9, #0x1
   378e8:	cmp	w11, #0x1e
   378ec:	b.hi	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   378f0:	lsl	x10, x10, #3
   378f4:	ldr	w10, [x8, x10]
   378f8:	tbnz	w10, #31, 379e0 <aarch64_ins_addr_offset@@Base+0x118>
   378fc:	add	w11, w10, w9
   37900:	cmp	w11, #0x21
   37904:	b.ge	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   37908:	ldr	w11, [x1, #16]
   3790c:	mov	w12, #0xffffffff            	// #-1
   37910:	ldr	w13, [x2]
   37914:	lsl	w9, w12, w9
   37918:	bic	w9, w11, w9
   3791c:	lsl	w9, w9, w10
   37920:	orr	w9, w13, w9
   37924:	str	w9, [x2]
   37928:	ldr	w11, [x0, #24]
   3792c:	add	x10, x8, x11, lsl #3
   37930:	ldr	w10, [x10, #4]
   37934:	sub	w12, w10, #0x1
   37938:	cmp	w12, #0x1e
   3793c:	b.hi	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   37940:	lsl	x11, x11, #3
   37944:	ldr	w11, [x8, x11]
   37948:	tbnz	w11, #31, 379e0 <aarch64_ins_addr_offset@@Base+0x118>
   3794c:	add	w12, w11, w10
   37950:	cmp	w12, #0x21
   37954:	b.ge	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   37958:	ldr	w12, [x1, #20]
   3795c:	mov	w13, #0xffffffff            	// #-1
   37960:	lsl	w10, w13, w10
   37964:	bic	w10, w12, w10
   37968:	lsl	w10, w10, w11
   3796c:	orr	w9, w10, w9
   37970:	str	w9, [x2]
   37974:	ldrb	w10, [x1, #28]
   37978:	tbz	w10, #1, 379d4 <aarch64_ins_addr_offset@@Base+0x10c>
   3797c:	and	w10, w10, #0xc
   37980:	cmp	w10, #0x4
   37984:	b.ne	37a00 <aarch64_ins_addr_offset@@Base+0x138>  // b.any
   37988:	ldr	w11, [x0, #28]
   3798c:	add	x10, x8, x11, lsl #3
   37990:	ldr	w10, [x10, #4]
   37994:	sub	w12, w10, #0x1
   37998:	cmp	w12, #0x1e
   3799c:	b.hi	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.pmore
   379a0:	lsl	x11, x11, #3
   379a4:	ldr	w8, [x8, x11]
   379a8:	tbnz	w8, #31, 379e0 <aarch64_ins_addr_offset@@Base+0x118>
   379ac:	add	w11, w8, w10
   379b0:	cmp	w11, #0x21
   379b4:	b.ge	379e0 <aarch64_ins_addr_offset@@Base+0x118>  // b.tcont
   379b8:	mov	w11, #0xffffffff            	// #-1
   379bc:	lsl	w10, w11, w10
   379c0:	mvn	w10, w10
   379c4:	and	w10, w10, #0x1
   379c8:	lsl	w8, w10, w8
   379cc:	orr	w8, w8, w9
   379d0:	str	w8, [x2]
   379d4:	mov	w0, #0x1                   	// #1
   379d8:	ldp	x29, x30, [sp], #16
   379dc:	ret
   379e0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   379e4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   379e8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   379ec:	add	x0, x0, #0xfe3
   379f0:	add	x1, x1, #0x40
   379f4:	add	x3, x3, #0x5c
   379f8:	mov	w2, #0x16a                 	// #362
   379fc:	bl	35b30 <__assert_fail@plt>
   37a00:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37a04:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37a08:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37a0c:	add	x0, x0, #0x96a
   37a10:	add	x1, x1, #0x36f
   37a14:	add	x3, x3, #0x99c
   37a18:	mov	w2, #0x2a2                 	// #674
   37a1c:	bl	35b30 <__assert_fail@plt>

0000000000037a20 <aarch64_ins_addr_simm@@Base>:
   37a20:	stp	x29, x30, [sp, #-64]!
   37a24:	stp	x24, x23, [sp, #16]
   37a28:	stp	x22, x21, [sp, #32]
   37a2c:	stp	x20, x19, [sp, #48]
   37a30:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   37a34:	ldr	x23, [x23, #3944]
   37a38:	mov	x29, sp
   37a3c:	ldr	w8, [x23, #116]
   37a40:	sub	w9, w8, #0x1
   37a44:	cmp	w9, #0x1e
   37a48:	b.hi	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   37a4c:	ldr	w9, [x23, #112]
   37a50:	tbnz	w9, #31, 37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>
   37a54:	add	w10, w9, w8
   37a58:	cmp	w10, #0x21
   37a5c:	b.ge	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37a60:	ldr	w10, [x1, #16]
   37a64:	mov	w11, #0xffffffff            	// #-1
   37a68:	ldr	w12, [x2]
   37a6c:	lsl	w8, w11, w8
   37a70:	bic	w8, w10, w8
   37a74:	lsl	w8, w8, w9
   37a78:	orr	w8, w12, w8
   37a7c:	str	w8, [x2]
   37a80:	ldr	w8, [x0, #20]
   37a84:	mov	x20, x0
   37a88:	ldr	w24, [x1, #20]
   37a8c:	ldrb	w0, [x1, #4]
   37a90:	mov	x21, x3
   37a94:	mov	x19, x2
   37a98:	mov	x22, x1
   37a9c:	cmp	w8, #0x2c
   37aa0:	b.eq	37aac <aarch64_ins_addr_simm@@Base+0x8c>  // b.none
   37aa4:	cmp	w0, #0x19
   37aa8:	b.ne	37ae0 <aarch64_ins_addr_simm@@Base+0xc0>  // b.any
   37aac:	bl	35710 <aarch64_get_qualifier_esize@plt>
   37ab0:	and	w8, w0, #0xff
   37ab4:	cmp	w8, #0x11
   37ab8:	b.cs	37c10 <aarch64_ins_addr_simm@@Base+0x1f0>  // b.hs, b.nlast
   37abc:	sub	w8, w8, #0x1
   37ac0:	mov	w9, #0x808b                	// #32907
   37ac4:	lsr	x9, x9, x8
   37ac8:	tbz	w9, #0, 37c30 <aarch64_ins_addr_simm@@Base+0x210>
   37acc:	adrp	x9, 57000 <xexit@@Base+0xdd4>
   37ad0:	add	x9, x9, #0x57c
   37ad4:	ldrb	w9, [x9, x8]
   37ad8:	ldr	w8, [x20, #20]
   37adc:	asr	w24, w24, w9
   37ae0:	add	x9, x23, w8, uxtw #3
   37ae4:	ldr	w9, [x9, #4]
   37ae8:	sub	w10, w9, #0x1
   37aec:	cmp	w10, #0x1e
   37af0:	b.hi	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   37af4:	mov	w8, w8
   37af8:	lsl	x8, x8, #3
   37afc:	ldr	w8, [x23, x8]
   37b00:	tbnz	w8, #31, 37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>
   37b04:	add	w10, w8, w9
   37b08:	cmp	w10, #0x21
   37b0c:	b.ge	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37b10:	mov	w10, #0xffffffff            	// #-1
   37b14:	ldr	w11, [x19]
   37b18:	lsl	w9, w10, w9
   37b1c:	bic	w9, w24, w9
   37b20:	lsl	w8, w9, w8
   37b24:	orr	w8, w11, w8
   37b28:	str	w8, [x19]
   37b2c:	ldrb	w9, [x22, #28]
   37b30:	tbz	w9, #1, 37bb8 <aarch64_ins_addr_simm@@Base+0x198>
   37b34:	ldr	x10, [x21, #8]
   37b38:	ldr	w10, [x10, #16]
   37b3c:	cmp	w10, #0x3e
   37b40:	b.hi	37b58 <aarch64_ins_addr_simm@@Base+0x138>  // b.pmore
   37b44:	mov	w11, #0x1                   	// #1
   37b48:	lsl	x10, x11, x10
   37b4c:	mov	x11, #0x6c00000000000000    	// #7782220156096217088
   37b50:	tst	x10, x11
   37b54:	b.ne	37bf0 <aarch64_ins_addr_simm@@Base+0x1d0>  // b.any
   37b58:	ubfx	w10, w9, #2, #1
   37b5c:	ubfx	w9, w9, #3, #1
   37b60:	cmp	w10, w9
   37b64:	b.eq	37c50 <aarch64_ins_addr_simm@@Base+0x230>  // b.none
   37b68:	cbz	w10, 37bb8 <aarch64_ins_addr_simm@@Base+0x198>
   37b6c:	ldr	w10, [x20, #24]
   37b70:	add	x9, x23, x10, lsl #3
   37b74:	ldr	w9, [x9, #4]
   37b78:	sub	w11, w9, #0x1
   37b7c:	cmp	w11, #0x1e
   37b80:	b.hi	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.pmore
   37b84:	lsl	x10, x10, #3
   37b88:	ldr	w10, [x23, x10]
   37b8c:	tbnz	w10, #31, 37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>
   37b90:	add	w11, w10, w9
   37b94:	cmp	w11, #0x21
   37b98:	b.ge	37bd0 <aarch64_ins_addr_simm@@Base+0x1b0>  // b.tcont
   37b9c:	mov	w11, #0xffffffff            	// #-1
   37ba0:	lsl	w9, w11, w9
   37ba4:	mvn	w9, w9
   37ba8:	and	w9, w9, #0x1
   37bac:	lsl	w9, w9, w10
   37bb0:	orr	w8, w9, w8
   37bb4:	str	w8, [x19]
   37bb8:	ldp	x20, x19, [sp, #48]
   37bbc:	ldp	x22, x21, [sp, #32]
   37bc0:	ldp	x24, x23, [sp, #16]
   37bc4:	mov	w0, #0x1                   	// #1
   37bc8:	ldp	x29, x30, [sp], #64
   37bcc:	ret
   37bd0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37bd4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37bd8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37bdc:	add	x0, x0, #0xfe3
   37be0:	add	x1, x1, #0x40
   37be4:	add	x3, x3, #0x5c
   37be8:	mov	w2, #0x16a                 	// #362
   37bec:	bl	35b30 <__assert_fail@plt>
   37bf0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37bf4:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37bf8:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37bfc:	add	x0, x0, #0xa33
   37c00:	add	x1, x1, #0x36f
   37c04:	add	x3, x3, #0xad3
   37c08:	mov	w2, #0x2c1                 	// #705
   37c0c:	bl	35b30 <__assert_fail@plt>
   37c10:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   37c14:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37c18:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37c1c:	add	x0, x0, #0x2b4
   37c20:	add	x1, x1, #0x40
   37c24:	add	x3, x3, #0x183
   37c28:	mov	w2, #0x200                 	// #512
   37c2c:	bl	35b30 <__assert_fail@plt>
   37c30:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   37c34:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37c38:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37c3c:	add	x0, x0, #0x1a8
   37c40:	add	x1, x1, #0x40
   37c44:	add	x3, x3, #0x183
   37c48:	mov	w2, #0x203                 	// #515
   37c4c:	bl	35b30 <__assert_fail@plt>
   37c50:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37c54:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37c58:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37c5c:	add	x0, x0, #0xb68
   37c60:	add	x1, x1, #0x36f
   37c64:	add	x3, x3, #0xad3
   37c68:	mov	w2, #0x2c2                 	// #706
   37c6c:	bl	35b30 <__assert_fail@plt>

0000000000037c70 <aarch64_ins_addr_simm10@@Base>:
   37c70:	stp	x29, x30, [sp, #-16]!
   37c74:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   37c78:	ldr	w10, [x0, #20]
   37c7c:	ldr	x8, [x8, #3944]
   37c80:	mov	x29, sp
   37c84:	add	x9, x8, x10, lsl #3
   37c88:	ldr	w9, [x9, #4]
   37c8c:	sub	w11, w9, #0x1
   37c90:	cmp	w11, #0x1e
   37c94:	b.hi	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37c98:	lsl	x10, x10, #3
   37c9c:	ldr	w10, [x8, x10]
   37ca0:	tbnz	w10, #31, 37dd8 <aarch64_ins_addr_simm10@@Base+0x168>
   37ca4:	add	w11, w10, w9
   37ca8:	cmp	w11, #0x21
   37cac:	b.ge	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37cb0:	ldr	w11, [x1, #16]
   37cb4:	mov	w12, #0xffffffff            	// #-1
   37cb8:	ldr	w13, [x2]
   37cbc:	lsl	w9, w12, w9
   37cc0:	bic	w9, w11, w9
   37cc4:	lsl	w9, w9, w10
   37cc8:	orr	w10, w13, w9
   37ccc:	str	w10, [x2]
   37cd0:	ldr	w9, [x0, #24]
   37cd4:	add	x11, x8, x9, lsl #3
   37cd8:	ldr	w11, [x11, #4]
   37cdc:	sub	w12, w11, #0x1
   37ce0:	cmp	w12, #0x1e
   37ce4:	b.hi	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37ce8:	lsl	x9, x9, #3
   37cec:	ldr	w12, [x8, x9]
   37cf0:	tbnz	w12, #31, 37dd8 <aarch64_ins_addr_simm10@@Base+0x168>
   37cf4:	add	w9, w12, w11
   37cf8:	cmp	w9, #0x21
   37cfc:	b.ge	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37d00:	ldr	w9, [x1, #20]
   37d04:	mov	w13, #0xffffffff            	// #-1
   37d08:	lsl	w11, w13, w11
   37d0c:	asr	w14, w9, #12
   37d10:	bic	w11, w14, w11
   37d14:	lsl	w11, w11, w12
   37d18:	orr	w10, w11, w10
   37d1c:	str	w10, [x2]
   37d20:	ldr	w12, [x0, #28]
   37d24:	add	x11, x8, x12, lsl #3
   37d28:	ldr	w11, [x11, #4]
   37d2c:	sub	w13, w11, #0x1
   37d30:	cmp	w13, #0x1e
   37d34:	b.hi	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37d38:	lsl	x12, x12, #3
   37d3c:	ldr	w12, [x8, x12]
   37d40:	tbnz	w12, #31, 37dd8 <aarch64_ins_addr_simm10@@Base+0x168>
   37d44:	add	w13, w12, w11
   37d48:	cmp	w13, #0x21
   37d4c:	b.ge	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37d50:	mov	w13, #0xffffffff            	// #-1
   37d54:	asr	w9, w9, #3
   37d58:	lsl	w11, w13, w11
   37d5c:	bic	w9, w9, w11
   37d60:	lsl	w9, w9, w12
   37d64:	orr	w9, w9, w10
   37d68:	str	w9, [x2]
   37d6c:	ldrb	w10, [x1, #28]
   37d70:	tbz	w10, #1, 37dcc <aarch64_ins_addr_simm10@@Base+0x15c>
   37d74:	and	w10, w10, #0xc
   37d78:	cmp	w10, #0x4
   37d7c:	b.ne	37df8 <aarch64_ins_addr_simm10@@Base+0x188>  // b.any
   37d80:	ldr	w11, [x0, #32]
   37d84:	add	x10, x8, x11, lsl #3
   37d88:	ldr	w10, [x10, #4]
   37d8c:	sub	w12, w10, #0x1
   37d90:	cmp	w12, #0x1e
   37d94:	b.hi	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.pmore
   37d98:	lsl	x11, x11, #3
   37d9c:	ldr	w8, [x8, x11]
   37da0:	tbnz	w8, #31, 37dd8 <aarch64_ins_addr_simm10@@Base+0x168>
   37da4:	add	w11, w8, w10
   37da8:	cmp	w11, #0x21
   37dac:	b.ge	37dd8 <aarch64_ins_addr_simm10@@Base+0x168>  // b.tcont
   37db0:	mov	w11, #0xffffffff            	// #-1
   37db4:	lsl	w10, w11, w10
   37db8:	mvn	w10, w10
   37dbc:	and	w10, w10, #0x1
   37dc0:	lsl	w8, w10, w8
   37dc4:	orr	w8, w8, w9
   37dc8:	str	w8, [x2]
   37dcc:	mov	w0, #0x1                   	// #1
   37dd0:	ldp	x29, x30, [sp], #16
   37dd4:	ret
   37dd8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37ddc:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37de0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37de4:	add	x0, x0, #0xfe3
   37de8:	add	x1, x1, #0x40
   37dec:	add	x3, x3, #0x5c
   37df0:	mov	w2, #0x16a                 	// #362
   37df4:	bl	35b30 <__assert_fail@plt>
   37df8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37dfc:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   37e00:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   37e04:	add	x0, x0, #0x96a
   37e08:	add	x1, x1, #0x36f
   37e0c:	add	x3, x3, #0xb90
   37e10:	mov	w2, #0x2dd                 	// #733
   37e14:	bl	35b30 <__assert_fail@plt>

0000000000037e18 <aarch64_ins_addr_uimm12@@Base>:
   37e18:	stp	x29, x30, [sp, #-48]!
   37e1c:	stp	x20, x19, [sp, #32]
   37e20:	ldrb	w8, [x1, #4]
   37e24:	str	x21, [sp, #16]
   37e28:	mov	x21, x0
   37e2c:	mov	x29, sp
   37e30:	mov	w0, w8
   37e34:	mov	x19, x2
   37e38:	mov	x20, x1
   37e3c:	bl	35710 <aarch64_get_qualifier_esize@plt>
   37e40:	and	w8, w0, #0xff
   37e44:	cmp	w8, #0x11
   37e48:	b.cs	37f44 <aarch64_ins_addr_uimm12@@Base+0x12c>  // b.hs, b.nlast
   37e4c:	sub	w8, w8, #0x1
   37e50:	mov	w9, #0x808b                	// #32907
   37e54:	lsr	x9, x9, x8
   37e58:	tbz	w9, #0, 37f64 <aarch64_ins_addr_uimm12@@Base+0x14c>
   37e5c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   37e60:	ldr	w11, [x21, #20]
   37e64:	ldr	x9, [x9, #3944]
   37e68:	add	x10, x9, x11, lsl #3
   37e6c:	ldr	w10, [x10, #4]
   37e70:	sub	w12, w10, #0x1
   37e74:	cmp	w12, #0x1e
   37e78:	b.hi	37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.pmore
   37e7c:	lsl	x11, x11, #3
   37e80:	ldr	w11, [x9, x11]
   37e84:	tbnz	w11, #31, 37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>
   37e88:	add	w12, w11, w10
   37e8c:	cmp	w12, #0x21
   37e90:	b.ge	37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.tcont
   37e94:	ldr	w12, [x20, #16]
   37e98:	mov	w13, #0xffffffff            	// #-1
   37e9c:	ldr	w14, [x19]
   37ea0:	lsl	w10, w13, w10
   37ea4:	bic	w10, w12, w10
   37ea8:	lsl	w10, w10, w11
   37eac:	orr	w10, w14, w10
   37eb0:	str	w10, [x19]
   37eb4:	ldr	w12, [x21, #24]
   37eb8:	add	x11, x9, x12, lsl #3
   37ebc:	ldr	w11, [x11, #4]
   37ec0:	sub	w13, w11, #0x1
   37ec4:	cmp	w13, #0x1e
   37ec8:	b.hi	37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.pmore
   37ecc:	lsl	x12, x12, #3
   37ed0:	ldr	w9, [x9, x12]
   37ed4:	tbnz	w9, #31, 37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>
   37ed8:	add	w12, w9, w11
   37edc:	cmp	w12, #0x21
   37ee0:	b.ge	37f24 <aarch64_ins_addr_uimm12@@Base+0x10c>  // b.tcont
   37ee4:	adrp	x12, 57000 <xexit@@Base+0xdd4>
   37ee8:	add	x12, x12, #0x57c
   37eec:	ldr	w13, [x20, #20]
   37ef0:	ldrb	w8, [x12, x8]
   37ef4:	mov	w12, #0xffffffff            	// #-1
   37ef8:	lsl	w11, w12, w11
   37efc:	ldr	x21, [sp, #16]
   37f00:	asr	w8, w13, w8
   37f04:	bic	w8, w8, w11
   37f08:	lsl	w8, w8, w9
   37f0c:	orr	w8, w8, w10
   37f10:	str	w8, [x19]
   37f14:	ldp	x20, x19, [sp, #32]
   37f18:	mov	w0, #0x1                   	// #1
   37f1c:	ldp	x29, x30, [sp], #48
   37f20:	ret
   37f24:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   37f28:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37f2c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37f30:	add	x0, x0, #0xfe3
   37f34:	add	x1, x1, #0x40
   37f38:	add	x3, x3, #0x5c
   37f3c:	mov	w2, #0x16a                 	// #362
   37f40:	bl	35b30 <__assert_fail@plt>
   37f44:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   37f48:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37f4c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37f50:	add	x0, x0, #0x2b4
   37f54:	add	x1, x1, #0x40
   37f58:	add	x3, x3, #0x183
   37f5c:	mov	w2, #0x200                 	// #512
   37f60:	bl	35b30 <__assert_fail@plt>
   37f64:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   37f68:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   37f6c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   37f70:	add	x0, x0, #0x1a8
   37f74:	add	x1, x1, #0x40
   37f78:	add	x3, x3, #0x183
   37f7c:	mov	w2, #0x203                 	// #515
   37f80:	bl	35b30 <__assert_fail@plt>

0000000000037f84 <aarch64_ins_simd_addr_post@@Base>:
   37f84:	stp	x29, x30, [sp, #-16]!
   37f88:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   37f8c:	ldr	x9, [x9, #3944]
   37f90:	mov	x29, sp
   37f94:	ldr	w8, [x9, #116]
   37f98:	sub	w10, w8, #0x1
   37f9c:	cmp	w10, #0x1e
   37fa0:	b.hi	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   37fa4:	ldr	w10, [x9, #112]
   37fa8:	tbnz	w10, #31, 38064 <aarch64_ins_simd_addr_post@@Base+0xe0>
   37fac:	add	w11, w10, w8
   37fb0:	cmp	w11, #0x21
   37fb4:	b.ge	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   37fb8:	ldr	w11, [x1, #16]
   37fbc:	mov	w12, #0xffffffff            	// #-1
   37fc0:	ldr	w13, [x2]
   37fc4:	lsl	w8, w12, w8
   37fc8:	bic	w8, w11, w8
   37fcc:	lsl	w8, w8, w10
   37fd0:	orr	w8, w13, w8
   37fd4:	str	w8, [x2]
   37fd8:	ldr	w10, [x1, #24]
   37fdc:	cbz	w10, 38018 <aarch64_ins_simd_addr_post@@Base+0x94>
   37fe0:	ldr	w10, [x9, #228]
   37fe4:	sub	w11, w10, #0x1
   37fe8:	cmp	w11, #0x1e
   37fec:	b.hi	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   37ff0:	ldr	w9, [x9, #224]
   37ff4:	tbnz	w9, #31, 38064 <aarch64_ins_simd_addr_post@@Base+0xe0>
   37ff8:	add	w11, w9, w10
   37ffc:	cmp	w11, #0x21
   38000:	b.ge	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   38004:	ldr	w11, [x1, #20]
   38008:	mov	w12, #0xffffffff            	// #-1
   3800c:	lsl	w10, w12, w10
   38010:	bic	w10, w11, w10
   38014:	b	3804c <aarch64_ins_simd_addr_post@@Base+0xc8>
   38018:	ldr	w10, [x9, #228]
   3801c:	sub	w11, w10, #0x1
   38020:	cmp	w11, #0x1e
   38024:	b.hi	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.pmore
   38028:	ldr	w9, [x9, #224]
   3802c:	tbnz	w9, #31, 38064 <aarch64_ins_simd_addr_post@@Base+0xe0>
   38030:	add	w11, w9, w10
   38034:	cmp	w11, #0x21
   38038:	b.ge	38064 <aarch64_ins_simd_addr_post@@Base+0xe0>  // b.tcont
   3803c:	mov	w11, #0xffffffff            	// #-1
   38040:	lsl	w10, w11, w10
   38044:	mvn	w10, w10
   38048:	and	w10, w10, #0x1f
   3804c:	lsl	w9, w10, w9
   38050:	orr	w8, w9, w8
   38054:	mov	w0, #0x1                   	// #1
   38058:	str	w8, [x2]
   3805c:	ldp	x29, x30, [sp], #16
   38060:	ret
   38064:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38068:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3806c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38070:	add	x0, x0, #0xfe3
   38074:	add	x1, x1, #0x40
   38078:	add	x3, x3, #0x5c
   3807c:	mov	w2, #0x16a                 	// #362
   38080:	bl	35b30 <__assert_fail@plt>

0000000000038084 <aarch64_ins_cond@@Base>:
   38084:	stp	x29, x30, [sp, #-16]!
   38088:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3808c:	ldr	x9, [x9, #3944]
   38090:	mov	x29, sp
   38094:	ldr	w8, [x9, #188]
   38098:	sub	w10, w8, #0x1
   3809c:	cmp	w10, #0x1e
   380a0:	b.hi	380e8 <aarch64_ins_cond@@Base+0x64>  // b.pmore
   380a4:	ldr	w9, [x9, #184]
   380a8:	tbnz	w9, #31, 380e8 <aarch64_ins_cond@@Base+0x64>
   380ac:	add	w10, w9, w8
   380b0:	cmp	w10, #0x21
   380b4:	b.ge	380e8 <aarch64_ins_cond@@Base+0x64>  // b.tcont
   380b8:	ldr	x10, [x1, #16]
   380bc:	mov	w11, #0xffffffff            	// #-1
   380c0:	ldr	w12, [x2]
   380c4:	lsl	w8, w11, w8
   380c8:	ldr	w10, [x10, #32]
   380cc:	mov	w0, #0x1                   	// #1
   380d0:	bic	w8, w10, w8
   380d4:	lsl	w8, w8, w9
   380d8:	orr	w8, w12, w8
   380dc:	str	w8, [x2]
   380e0:	ldp	x29, x30, [sp], #16
   380e4:	ret
   380e8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   380ec:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   380f0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   380f4:	add	x0, x0, #0xfe3
   380f8:	add	x1, x1, #0x40
   380fc:	add	x3, x3, #0x5c
   38100:	mov	w2, #0x16a                 	// #362
   38104:	bl	35b30 <__assert_fail@plt>

0000000000038108 <aarch64_ins_sysreg@@Base>:
   38108:	sub	sp, sp, #0x40
   3810c:	stp	x29, x30, [sp, #16]
   38110:	stp	x22, x21, [sp, #32]
   38114:	stp	x20, x19, [sp, #48]
   38118:	ldr	x8, [x3, #8]
   3811c:	mov	x20, x3
   38120:	mov	x19, x2
   38124:	mov	x22, x1
   38128:	ldr	w9, [x8, #16]
   3812c:	add	x29, sp, #0x10
   38130:	cmp	w9, #0x46
   38134:	b.ne	381b8 <aarch64_ins_sysreg@@Base+0xb0>  // b.any
   38138:	ldr	x9, [x8, #120]
   3813c:	ldr	w8, [x22, #20]
   38140:	mov	w10, #0x20000000            	// #536870912
   38144:	mov	x21, x4
   38148:	and	x9, x9, #0x60000000
   3814c:	cmp	x9, x10
   38150:	b.ne	38174 <aarch64_ins_sysreg@@Base+0x6c>  // b.any
   38154:	tbz	w8, #4, 38174 <aarch64_ins_sysreg@@Base+0x6c>
   38158:	mov	w8, #0x2                   	// #2
   3815c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38160:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   38164:	str	w8, [x21]
   38168:	add	x0, x0, #0x270
   3816c:	add	x1, x1, #0xc27
   38170:	b	3819c <aarch64_ins_sysreg@@Base+0x94>
   38174:	mov	w10, #0x40000000            	// #1073741824
   38178:	cmp	x9, x10
   3817c:	b.ne	381b8 <aarch64_ins_sysreg@@Base+0xb0>  // b.any
   38180:	tbz	w8, #3, 381b8 <aarch64_ins_sysreg@@Base+0xb0>
   38184:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38188:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3818c:	mov	w8, #0x2                   	// #2
   38190:	add	x0, x0, #0x270
   38194:	add	x1, x1, #0xc4e
   38198:	str	w8, [x21]
   3819c:	mov	w2, #0x5                   	// #5
   381a0:	bl	35a50 <dcgettext@plt>
   381a4:	str	x0, [x21, #8]
   381a8:	ldr	w8, [x22, #8]
   381ac:	mov	w9, #0x1                   	// #1
   381b0:	str	w9, [x21, #28]
   381b4:	str	w8, [x21, #4]
   381b8:	ldr	x8, [x20, #8]
   381bc:	ldr	w1, [x22, #16]
   381c0:	mov	w3, #0x5                   	// #5
   381c4:	mov	w4, #0x11                  	// #17
   381c8:	ldr	w2, [x8, #12]
   381cc:	mov	w8, #0x15                  	// #21
   381d0:	mov	w5, #0x12                  	// #18
   381d4:	mov	w6, #0x13                  	// #19
   381d8:	mov	w7, #0x14                  	// #20
   381dc:	mov	x0, x19
   381e0:	str	w8, [sp]
   381e4:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   381e8:	ldp	x20, x19, [sp, #48]
   381ec:	ldp	x22, x21, [sp, #32]
   381f0:	ldp	x29, x30, [sp, #16]
   381f4:	mov	w0, #0x1                   	// #1
   381f8:	add	sp, sp, #0x40
   381fc:	ret

0000000000038200 <aarch64_ins_pstatefield@@Base>:
   38200:	stp	x29, x30, [sp, #-16]!
   38204:	ldr	x8, [x3, #8]
   38208:	ldr	w1, [x1, #16]
   3820c:	mov	x0, x2
   38210:	mov	w3, #0x2                   	// #2
   38214:	ldr	w8, [x8, #12]
   38218:	mov	w4, #0x11                  	// #17
   3821c:	mov	w5, #0x14                  	// #20
   38220:	mov	x29, sp
   38224:	mov	w2, w8
   38228:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3822c:	mov	w0, #0x1                   	// #1
   38230:	ldp	x29, x30, [sp], #16
   38234:	ret

0000000000038238 <aarch64_ins_sysins_op@@Base>:
   38238:	stp	x29, x30, [sp, #-16]!
   3823c:	ldr	x8, [x1, #16]
   38240:	ldr	x9, [x3, #8]
   38244:	mov	x0, x2
   38248:	mov	w3, #0x4                   	// #4
   3824c:	ldr	w1, [x8, #8]
   38250:	ldr	w8, [x9, #12]
   38254:	mov	w4, #0x11                  	// #17
   38258:	mov	w5, #0x12                  	// #18
   3825c:	mov	w6, #0x13                  	// #19
   38260:	mov	w7, #0x14                  	// #20
   38264:	mov	w2, w8
   38268:	mov	x29, sp
   3826c:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   38270:	mov	w0, #0x1                   	// #1
   38274:	ldp	x29, x30, [sp], #16
   38278:	ret

000000000003827c <aarch64_ins_barrier@@Base>:
   3827c:	stp	x29, x30, [sp, #-16]!
   38280:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   38284:	ldr	x9, [x9, #3944]
   38288:	mov	x29, sp
   3828c:	ldr	w8, [x9, #148]
   38290:	sub	w10, w8, #0x1
   38294:	cmp	w10, #0x1e
   38298:	b.hi	382e0 <aarch64_ins_barrier@@Base+0x64>  // b.pmore
   3829c:	ldr	w9, [x9, #144]
   382a0:	tbnz	w9, #31, 382e0 <aarch64_ins_barrier@@Base+0x64>
   382a4:	add	w10, w9, w8
   382a8:	cmp	w10, #0x21
   382ac:	b.ge	382e0 <aarch64_ins_barrier@@Base+0x64>  // b.tcont
   382b0:	ldr	x10, [x1, #16]
   382b4:	mov	w11, #0xffffffff            	// #-1
   382b8:	ldr	w12, [x2]
   382bc:	lsl	w8, w11, w8
   382c0:	ldr	w10, [x10, #8]
   382c4:	mov	w0, #0x1                   	// #1
   382c8:	bic	w8, w10, w8
   382cc:	lsl	w8, w8, w9
   382d0:	orr	w8, w12, w8
   382d4:	str	w8, [x2]
   382d8:	ldp	x29, x30, [sp], #16
   382dc:	ret
   382e0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   382e4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   382e8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   382ec:	add	x0, x0, #0xfe3
   382f0:	add	x1, x1, #0x40
   382f4:	add	x3, x3, #0x5c
   382f8:	mov	w2, #0x16a                 	// #362
   382fc:	bl	35b30 <__assert_fail@plt>

0000000000038300 <aarch64_ins_prfop@@Base>:
   38300:	stp	x29, x30, [sp, #-16]!
   38304:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   38308:	ldr	x9, [x9, #3944]
   3830c:	mov	x29, sp
   38310:	ldr	w8, [x9, #100]
   38314:	sub	w10, w8, #0x1
   38318:	cmp	w10, #0x1e
   3831c:	b.hi	38364 <aarch64_ins_prfop@@Base+0x64>  // b.pmore
   38320:	ldr	w9, [x9, #96]
   38324:	tbnz	w9, #31, 38364 <aarch64_ins_prfop@@Base+0x64>
   38328:	add	w10, w9, w8
   3832c:	cmp	w10, #0x21
   38330:	b.ge	38364 <aarch64_ins_prfop@@Base+0x64>  // b.tcont
   38334:	ldr	x10, [x1, #16]
   38338:	mov	w11, #0xffffffff            	// #-1
   3833c:	ldr	w12, [x2]
   38340:	lsl	w8, w11, w8
   38344:	ldr	w10, [x10, #8]
   38348:	mov	w0, #0x1                   	// #1
   3834c:	bic	w8, w10, w8
   38350:	lsl	w8, w8, w9
   38354:	orr	w8, w12, w8
   38358:	str	w8, [x2]
   3835c:	ldp	x29, x30, [sp], #16
   38360:	ret
   38364:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38368:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3836c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38370:	add	x0, x0, #0xfe3
   38374:	add	x1, x1, #0x40
   38378:	add	x3, x3, #0x5c
   3837c:	mov	w2, #0x16a                 	// #362
   38380:	bl	35b30 <__assert_fail@plt>

0000000000038384 <aarch64_ins_hint@@Base>:
   38384:	stp	x29, x30, [sp, #-16]!
   38388:	ldr	x8, [x1, #16]
   3838c:	mov	x0, x2
   38390:	mov	w3, #0x2                   	// #2
   38394:	mov	w4, #0x11                  	// #17
   38398:	ldr	w1, [x8, #8]
   3839c:	mov	w5, #0x12                  	// #18
   383a0:	mov	w2, wzr
   383a4:	mov	x29, sp
   383a8:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   383ac:	mov	w0, #0x1                   	// #1
   383b0:	ldp	x29, x30, [sp], #16
   383b4:	ret

00000000000383b8 <aarch64_ins_reg_extended@@Base>:
   383b8:	stp	x29, x30, [sp, #-48]!
   383bc:	str	x21, [sp, #16]
   383c0:	stp	x20, x19, [sp, #32]
   383c4:	adrp	x21, 9b000 <aarch64_operands@@Base+0x16c38>
   383c8:	ldr	x21, [x21, #3944]
   383cc:	mov	x29, sp
   383d0:	ldr	w8, [x21, #228]
   383d4:	sub	w9, w8, #0x1
   383d8:	cmp	w9, #0x1e
   383dc:	b.hi	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   383e0:	ldr	w9, [x21, #224]
   383e4:	tbnz	w9, #31, 384d0 <aarch64_ins_reg_extended@@Base+0x118>
   383e8:	add	w10, w9, w8
   383ec:	cmp	w10, #0x21
   383f0:	b.ge	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   383f4:	ldr	w10, [x1, #16]
   383f8:	mov	w11, #0xffffffff            	// #-1
   383fc:	ldr	w12, [x2]
   38400:	lsl	w8, w11, w8
   38404:	bic	w8, w10, w8
   38408:	lsl	w8, w8, w9
   3840c:	orr	w8, w12, w8
   38410:	str	w8, [x2]
   38414:	ldr	w0, [x1, #32]
   38418:	mov	x19, x2
   3841c:	mov	x20, x1
   38420:	cmp	w0, #0x5
   38424:	b.ne	38438 <aarch64_ins_reg_extended@@Base+0x80>  // b.any
   38428:	ldrb	w8, [x20, #4]
   3842c:	cmp	w8, #0x1
   38430:	mov	w8, #0x8                   	// #8
   38434:	cinc	w0, w8, ne  // ne = any
   38438:	bl	354d0 <aarch64_get_operand_modifier_value@plt>
   3843c:	ldr	w8, [x21, #244]
   38440:	sub	w9, w8, #0x1
   38444:	cmp	w9, #0x1e
   38448:	b.hi	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   3844c:	ldr	w9, [x21, #240]
   38450:	tbnz	w9, #31, 384d0 <aarch64_ins_reg_extended@@Base+0x118>
   38454:	add	w10, w9, w8
   38458:	cmp	w10, #0x21
   3845c:	b.ge	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   38460:	ldr	w10, [x21, #180]
   38464:	mov	w11, #0xffffffff            	// #-1
   38468:	ldr	w12, [x19]
   3846c:	lsl	w8, w11, w8
   38470:	bic	w8, w0, w8
   38474:	lsl	w8, w8, w9
   38478:	sub	w9, w10, #0x1
   3847c:	orr	w8, w12, w8
   38480:	cmp	w9, #0x1e
   38484:	str	w8, [x19]
   38488:	b.hi	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.pmore
   3848c:	ldr	w9, [x21, #176]
   38490:	tbnz	w9, #31, 384d0 <aarch64_ins_reg_extended@@Base+0x118>
   38494:	add	w11, w9, w10
   38498:	cmp	w11, #0x21
   3849c:	b.ge	384d0 <aarch64_ins_reg_extended@@Base+0x118>  // b.tcont
   384a0:	ldr	w11, [x20, #40]
   384a4:	mov	w12, #0xffffffff            	// #-1
   384a8:	lsl	w10, w12, w10
   384ac:	ldr	x21, [sp, #16]
   384b0:	bic	w10, w11, w10
   384b4:	lsl	w9, w10, w9
   384b8:	orr	w8, w9, w8
   384bc:	str	w8, [x19]
   384c0:	ldp	x20, x19, [sp, #32]
   384c4:	mov	w0, #0x1                   	// #1
   384c8:	ldp	x29, x30, [sp], #48
   384cc:	ret
   384d0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   384d4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   384d8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   384dc:	add	x0, x0, #0xfe3
   384e0:	add	x1, x1, #0x40
   384e4:	add	x3, x3, #0x5c
   384e8:	mov	w2, #0x16a                 	// #362
   384ec:	bl	35b30 <__assert_fail@plt>

00000000000384f0 <aarch64_ins_reg_shifted@@Base>:
   384f0:	stp	x29, x30, [sp, #-48]!
   384f4:	str	x21, [sp, #16]
   384f8:	stp	x20, x19, [sp, #32]
   384fc:	adrp	x21, 9b000 <aarch64_operands@@Base+0x16c38>
   38500:	ldr	x21, [x21, #3944]
   38504:	mov	x29, sp
   38508:	ldr	w8, [x21, #228]
   3850c:	sub	w9, w8, #0x1
   38510:	cmp	w9, #0x1e
   38514:	b.hi	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   38518:	ldr	w9, [x21, #224]
   3851c:	tbnz	w9, #31, 385f0 <aarch64_ins_reg_shifted@@Base+0x100>
   38520:	add	w10, w9, w8
   38524:	cmp	w10, #0x21
   38528:	b.ge	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   3852c:	ldr	w10, [x1, #16]
   38530:	mov	w11, #0xffffffff            	// #-1
   38534:	ldr	w12, [x2]
   38538:	lsl	w8, w11, w8
   3853c:	bic	w8, w10, w8
   38540:	lsl	w8, w8, w9
   38544:	orr	w8, w12, w8
   38548:	str	w8, [x2]
   3854c:	ldr	w0, [x1, #32]
   38550:	mov	x19, x2
   38554:	mov	x20, x1
   38558:	bl	354d0 <aarch64_get_operand_modifier_value@plt>
   3855c:	ldr	w8, [x21, #284]
   38560:	sub	w9, w8, #0x1
   38564:	cmp	w9, #0x1e
   38568:	b.hi	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   3856c:	ldr	w9, [x21, #280]
   38570:	tbnz	w9, #31, 385f0 <aarch64_ins_reg_shifted@@Base+0x100>
   38574:	add	w10, w9, w8
   38578:	cmp	w10, #0x21
   3857c:	b.ge	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   38580:	ldr	w10, [x21, #308]
   38584:	mov	w11, #0xffffffff            	// #-1
   38588:	ldr	w12, [x19]
   3858c:	lsl	w8, w11, w8
   38590:	bic	w8, w0, w8
   38594:	lsl	w8, w8, w9
   38598:	sub	w9, w10, #0x1
   3859c:	orr	w8, w12, w8
   385a0:	cmp	w9, #0x1e
   385a4:	str	w8, [x19]
   385a8:	b.hi	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.pmore
   385ac:	ldr	w9, [x21, #304]
   385b0:	tbnz	w9, #31, 385f0 <aarch64_ins_reg_shifted@@Base+0x100>
   385b4:	add	w11, w9, w10
   385b8:	cmp	w11, #0x21
   385bc:	b.ge	385f0 <aarch64_ins_reg_shifted@@Base+0x100>  // b.tcont
   385c0:	ldr	w11, [x20, #40]
   385c4:	mov	w12, #0xffffffff            	// #-1
   385c8:	lsl	w10, w12, w10
   385cc:	ldr	x21, [sp, #16]
   385d0:	bic	w10, w11, w10
   385d4:	lsl	w9, w10, w9
   385d8:	orr	w8, w9, w8
   385dc:	str	w8, [x19]
   385e0:	ldp	x20, x19, [sp, #32]
   385e4:	mov	w0, #0x1                   	// #1
   385e8:	ldp	x29, x30, [sp], #48
   385ec:	ret
   385f0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   385f4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   385f8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   385fc:	add	x0, x0, #0xfe3
   38600:	add	x1, x1, #0x40
   38604:	add	x3, x3, #0x5c
   38608:	mov	w2, #0x16a                 	// #362
   3860c:	bl	35b30 <__assert_fail@plt>

0000000000038610 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   38610:	stp	x29, x30, [sp, #-16]!
   38614:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38618:	ldr	w10, [x0, #20]
   3861c:	ldr	x8, [x8, #3944]
   38620:	mov	x29, sp
   38624:	add	x9, x8, x10, lsl #3
   38628:	ldr	w9, [x9, #4]
   3862c:	sub	w11, w9, #0x1
   38630:	cmp	w11, #0x1e
   38634:	b.hi	386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.pmore
   38638:	lsl	x10, x10, #3
   3863c:	ldr	w11, [x8, x10]
   38640:	tbnz	w11, #31, 386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>
   38644:	add	w10, w11, w9
   38648:	cmp	w10, #0x21
   3864c:	b.ge	386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.tcont
   38650:	ldr	w13, [x1, #16]
   38654:	ldr	w12, [x8, #780]
   38658:	mov	w14, #0xffffffff            	// #-1
   3865c:	ldr	w15, [x2]
   38660:	ldr	w10, [x0, #16]
   38664:	lsl	w9, w14, w9
   38668:	bic	w9, w13, w9
   3866c:	sub	w13, w12, #0x1
   38670:	lsl	w9, w9, w11
   38674:	orr	w9, w15, w9
   38678:	cmp	w13, #0x1e
   3867c:	str	w9, [x2]
   38680:	b.hi	386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.pmore
   38684:	ldr	w8, [x8, #776]
   38688:	tbnz	w8, #31, 386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>
   3868c:	add	w11, w8, w12
   38690:	cmp	w11, #0x21
   38694:	b.ge	386cc <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xbc>  // b.tcont
   38698:	ldr	w11, [x1, #20]
   3869c:	ubfx	w10, w10, #5, #3
   386a0:	mov	w13, #0xffffffff            	// #-1
   386a4:	add	w10, w10, #0x1
   386a8:	lsl	w12, w13, w12
   386ac:	sdiv	w10, w11, w10
   386b0:	bic	w10, w10, w12
   386b4:	lsl	w8, w10, w8
   386b8:	orr	w8, w8, w9
   386bc:	mov	w0, #0x1                   	// #1
   386c0:	str	w8, [x2]
   386c4:	ldp	x29, x30, [sp], #16
   386c8:	ret
   386cc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   386d0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   386d4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   386d8:	add	x0, x0, #0xfe3
   386dc:	add	x1, x1, #0x40
   386e0:	add	x3, x3, #0x5c
   386e4:	mov	w2, #0x16a                 	// #362
   386e8:	bl	35b30 <__assert_fail@plt>

00000000000386ec <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   386ec:	stp	x29, x30, [sp, #-16]!
   386f0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   386f4:	ldr	w10, [x0, #20]
   386f8:	ldr	x8, [x8, #3944]
   386fc:	mov	x29, sp
   38700:	add	x9, x8, x10, lsl #3
   38704:	ldr	w9, [x9, #4]
   38708:	sub	w11, w9, #0x1
   3870c:	cmp	w11, #0x1e
   38710:	b.hi	387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.pmore
   38714:	lsl	x10, x10, #3
   38718:	ldr	w11, [x8, x10]
   3871c:	tbnz	w11, #31, 387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>
   38720:	add	w10, w11, w9
   38724:	cmp	w10, #0x21
   38728:	b.ge	387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.tcont
   3872c:	ldr	w13, [x1, #16]
   38730:	ldr	w12, [x8, #804]
   38734:	mov	w14, #0xffffffff            	// #-1
   38738:	ldr	w15, [x2]
   3873c:	ldr	w10, [x0, #16]
   38740:	lsl	w9, w14, w9
   38744:	bic	w9, w13, w9
   38748:	sub	w13, w12, #0x1
   3874c:	lsl	w9, w9, w11
   38750:	orr	w9, w15, w9
   38754:	cmp	w13, #0x1e
   38758:	str	w9, [x2]
   3875c:	b.hi	387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.pmore
   38760:	ldr	w8, [x8, #800]
   38764:	tbnz	w8, #31, 387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>
   38768:	add	w11, w8, w12
   3876c:	cmp	w11, #0x21
   38770:	b.ge	387a8 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xbc>  // b.tcont
   38774:	ldr	w11, [x1, #20]
   38778:	ubfx	w10, w10, #5, #3
   3877c:	mov	w13, #0xffffffff            	// #-1
   38780:	add	w10, w10, #0x1
   38784:	lsl	w12, w13, w12
   38788:	sdiv	w10, w11, w10
   3878c:	bic	w10, w10, w12
   38790:	lsl	w8, w10, w8
   38794:	orr	w8, w8, w9
   38798:	mov	w0, #0x1                   	// #1
   3879c:	str	w8, [x2]
   387a0:	ldp	x29, x30, [sp], #16
   387a4:	ret
   387a8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   387ac:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   387b0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   387b4:	add	x0, x0, #0xfe3
   387b8:	add	x1, x1, #0x40
   387bc:	add	x3, x3, #0x5c
   387c0:	mov	w2, #0x16a                 	// #362
   387c4:	bl	35b30 <__assert_fail@plt>

00000000000387c8 <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   387c8:	stp	x29, x30, [sp, #-16]!
   387cc:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   387d0:	ldr	w9, [x0, #20]
   387d4:	ldr	x10, [x10, #3944]
   387d8:	mov	x29, sp
   387dc:	add	x8, x10, x9, lsl #3
   387e0:	ldr	w8, [x8, #4]
   387e4:	sub	w11, w8, #0x1
   387e8:	cmp	w11, #0x1e
   387ec:	b.hi	38860 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>  // b.pmore
   387f0:	lsl	x9, x9, #3
   387f4:	ldr	w9, [x10, x9]
   387f8:	tbnz	w9, #31, 38860 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>
   387fc:	add	w10, w9, w8
   38800:	cmp	w10, #0x21
   38804:	b.ge	38860 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0x98>  // b.tcont
   38808:	ldr	w11, [x1, #16]
   3880c:	mov	w12, #0xffffffff            	// #-1
   38810:	ldr	w13, [x2]
   38814:	lsl	w8, w12, w8
   38818:	bic	w8, w11, w8
   3881c:	lsl	w8, w8, w9
   38820:	ldr	w10, [x0, #16]
   38824:	orr	w8, w13, w8
   38828:	str	w8, [x2]
   3882c:	ldr	w8, [x1, #20]
   38830:	ubfx	w9, w10, #5, #3
   38834:	add	w9, w9, #0x1
   38838:	mov	w3, #0x2                   	// #2
   3883c:	sdiv	w1, w8, w9
   38840:	mov	w4, #0x16                  	// #22
   38844:	mov	w5, #0x64                  	// #100
   38848:	mov	x0, x2
   3884c:	mov	w2, wzr
   38850:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   38854:	mov	w0, #0x1                   	// #1
   38858:	ldp	x29, x30, [sp], #16
   3885c:	ret
   38860:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38864:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38868:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3886c:	add	x0, x0, #0xfe3
   38870:	add	x1, x1, #0x40
   38874:	add	x3, x3, #0x5c
   38878:	mov	w2, #0x16a                 	// #362
   3887c:	bl	35b30 <__assert_fail@plt>

0000000000038880 <aarch64_ins_sve_addr_ri_s4@@Base>:
   38880:	stp	x29, x30, [sp, #-16]!
   38884:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38888:	ldr	w10, [x0, #20]
   3888c:	ldr	x8, [x8, #3944]
   38890:	mov	x29, sp
   38894:	add	x9, x8, x10, lsl #3
   38898:	ldr	w9, [x9, #4]
   3889c:	sub	w11, w9, #0x1
   388a0:	cmp	w11, #0x1e
   388a4:	b.hi	38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.pmore
   388a8:	lsl	x10, x10, #3
   388ac:	ldr	w12, [x8, x10]
   388b0:	tbnz	w12, #31, 38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>
   388b4:	add	w10, w12, w9
   388b8:	cmp	w10, #0x21
   388bc:	b.ge	38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.tcont
   388c0:	ldr	w13, [x1, #16]
   388c4:	ldr	w11, [x8, #780]
   388c8:	mov	w14, #0xffffffff            	// #-1
   388cc:	ldr	w15, [x2]
   388d0:	ldr	w10, [x0, #16]
   388d4:	lsl	w9, w14, w9
   388d8:	bic	w9, w13, w9
   388dc:	sub	w13, w11, #0x1
   388e0:	lsl	w9, w9, w12
   388e4:	orr	w9, w15, w9
   388e8:	cmp	w13, #0x1e
   388ec:	str	w9, [x2]
   388f0:	b.hi	38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.pmore
   388f4:	ldr	w8, [x8, #776]
   388f8:	tbnz	w8, #31, 38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>
   388fc:	add	w12, w8, w11
   38900:	cmp	w12, #0x21
   38904:	b.ge	38940 <aarch64_ins_sve_addr_ri_s4@@Base+0xc0>  // b.tcont
   38908:	ldr	w13, [x1, #20]
   3890c:	ubfx	w10, w10, #5, #3
   38910:	mov	w12, #0x1                   	// #1
   38914:	mov	w14, #0xffffffff            	// #-1
   38918:	lsl	w10, w12, w10
   3891c:	lsl	w11, w14, w11
   38920:	sdiv	w10, w13, w10
   38924:	bic	w10, w10, w11
   38928:	lsl	w8, w10, w8
   3892c:	orr	w8, w8, w9
   38930:	mov	w0, #0x1                   	// #1
   38934:	str	w8, [x2]
   38938:	ldp	x29, x30, [sp], #16
   3893c:	ret
   38940:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38944:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38948:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3894c:	add	x0, x0, #0xfe3
   38950:	add	x1, x1, #0x40
   38954:	add	x3, x3, #0x5c
   38958:	mov	w2, #0x16a                 	// #362
   3895c:	bl	35b30 <__assert_fail@plt>

0000000000038960 <aarch64_ins_sve_addr_ri_u6@@Base>:
   38960:	stp	x29, x30, [sp, #-16]!
   38964:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38968:	ldr	w10, [x0, #20]
   3896c:	ldr	x8, [x8, #3944]
   38970:	mov	x29, sp
   38974:	add	x9, x8, x10, lsl #3
   38978:	ldr	w9, [x9, #4]
   3897c:	sub	w11, w9, #0x1
   38980:	cmp	w11, #0x1e
   38984:	b.hi	38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.pmore
   38988:	lsl	x10, x10, #3
   3898c:	ldr	w12, [x8, x10]
   38990:	tbnz	w12, #31, 38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>
   38994:	add	w10, w12, w9
   38998:	cmp	w10, #0x21
   3899c:	b.ge	38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.tcont
   389a0:	ldr	w13, [x1, #16]
   389a4:	ldr	w11, [x8, #804]
   389a8:	mov	w14, #0xffffffff            	// #-1
   389ac:	ldr	w15, [x2]
   389b0:	ldr	w10, [x0, #16]
   389b4:	lsl	w9, w14, w9
   389b8:	bic	w9, w13, w9
   389bc:	sub	w13, w11, #0x1
   389c0:	lsl	w9, w9, w12
   389c4:	orr	w9, w15, w9
   389c8:	cmp	w13, #0x1e
   389cc:	str	w9, [x2]
   389d0:	b.hi	38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.pmore
   389d4:	ldr	w8, [x8, #800]
   389d8:	tbnz	w8, #31, 38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>
   389dc:	add	w12, w8, w11
   389e0:	cmp	w12, #0x21
   389e4:	b.ge	38a20 <aarch64_ins_sve_addr_ri_u6@@Base+0xc0>  // b.tcont
   389e8:	ldr	w13, [x1, #20]
   389ec:	ubfx	w10, w10, #5, #3
   389f0:	mov	w12, #0x1                   	// #1
   389f4:	mov	w14, #0xffffffff            	// #-1
   389f8:	lsl	w10, w12, w10
   389fc:	lsl	w11, w14, w11
   38a00:	sdiv	w10, w13, w10
   38a04:	bic	w10, w10, w11
   38a08:	lsl	w8, w10, w8
   38a0c:	orr	w8, w8, w9
   38a10:	mov	w0, #0x1                   	// #1
   38a14:	str	w8, [x2]
   38a18:	ldp	x29, x30, [sp], #16
   38a1c:	ret
   38a20:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38a24:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38a28:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38a2c:	add	x0, x0, #0xfe3
   38a30:	add	x1, x1, #0x40
   38a34:	add	x3, x3, #0x5c
   38a38:	mov	w2, #0x16a                 	// #362
   38a3c:	bl	35b30 <__assert_fail@plt>

0000000000038a40 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   38a40:	stp	x29, x30, [sp, #-16]!
   38a44:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38a48:	ldr	w10, [x0, #20]
   38a4c:	ldr	x8, [x8, #3944]
   38a50:	mov	x29, sp
   38a54:	add	x9, x8, x10, lsl #3
   38a58:	ldr	w9, [x9, #4]
   38a5c:	sub	w11, w9, #0x1
   38a60:	cmp	w11, #0x1e
   38a64:	b.hi	38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.pmore
   38a68:	lsl	x10, x10, #3
   38a6c:	ldr	w10, [x8, x10]
   38a70:	tbnz	w10, #31, 38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>
   38a74:	add	w11, w10, w9
   38a78:	cmp	w11, #0x21
   38a7c:	b.ge	38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.tcont
   38a80:	ldr	w11, [x1, #16]
   38a84:	mov	w12, #0xffffffff            	// #-1
   38a88:	ldr	w13, [x2]
   38a8c:	lsl	w9, w12, w9
   38a90:	bic	w9, w11, w9
   38a94:	lsl	w9, w9, w10
   38a98:	orr	w9, w13, w9
   38a9c:	str	w9, [x2]
   38aa0:	ldr	w11, [x0, #24]
   38aa4:	add	x10, x8, x11, lsl #3
   38aa8:	ldr	w10, [x10, #4]
   38aac:	sub	w12, w10, #0x1
   38ab0:	cmp	w12, #0x1e
   38ab4:	b.hi	38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.pmore
   38ab8:	lsl	x11, x11, #3
   38abc:	ldr	w8, [x8, x11]
   38ac0:	tbnz	w8, #31, 38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>
   38ac4:	add	w11, w8, w10
   38ac8:	cmp	w11, #0x21
   38acc:	b.ge	38af8 <aarch64_ins_sve_addr_rr_lsl@@Base+0xb8>  // b.tcont
   38ad0:	ldr	w11, [x1, #20]
   38ad4:	mov	w12, #0xffffffff            	// #-1
   38ad8:	lsl	w10, w12, w10
   38adc:	mov	w0, #0x1                   	// #1
   38ae0:	bic	w10, w11, w10
   38ae4:	lsl	w8, w10, w8
   38ae8:	orr	w8, w8, w9
   38aec:	str	w8, [x2]
   38af0:	ldp	x29, x30, [sp], #16
   38af4:	ret
   38af8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38afc:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38b00:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38b04:	add	x0, x0, #0xfe3
   38b08:	add	x1, x1, #0x40
   38b0c:	add	x3, x3, #0x5c
   38b10:	mov	w2, #0x16a                 	// #362
   38b14:	bl	35b30 <__assert_fail@plt>

0000000000038b18 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   38b18:	stp	x29, x30, [sp, #-16]!
   38b1c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38b20:	ldr	w10, [x0, #20]
   38b24:	ldr	x8, [x8, #3944]
   38b28:	mov	x29, sp
   38b2c:	add	x9, x8, x10, lsl #3
   38b30:	ldr	w9, [x9, #4]
   38b34:	sub	w11, w9, #0x1
   38b38:	cmp	w11, #0x1e
   38b3c:	b.hi	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38b40:	lsl	x10, x10, #3
   38b44:	ldr	w10, [x8, x10]
   38b48:	tbnz	w10, #31, 38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38b4c:	add	w11, w10, w9
   38b50:	cmp	w11, #0x21
   38b54:	b.ge	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38b58:	ldr	w11, [x1, #16]
   38b5c:	mov	w12, #0xffffffff            	// #-1
   38b60:	ldr	w13, [x2]
   38b64:	lsl	w9, w12, w9
   38b68:	bic	w9, w11, w9
   38b6c:	lsl	w9, w9, w10
   38b70:	orr	w9, w13, w9
   38b74:	str	w9, [x2]
   38b78:	ldr	w11, [x0, #24]
   38b7c:	add	x10, x8, x11, lsl #3
   38b80:	ldr	w10, [x10, #4]
   38b84:	sub	w12, w10, #0x1
   38b88:	cmp	w12, #0x1e
   38b8c:	b.hi	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38b90:	lsl	x11, x11, #3
   38b94:	ldr	w11, [x8, x11]
   38b98:	tbnz	w11, #31, 38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38b9c:	add	w12, w11, w10
   38ba0:	cmp	w12, #0x21
   38ba4:	b.ge	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38ba8:	ldr	w12, [x1, #20]
   38bac:	mov	w13, #0xffffffff            	// #-1
   38bb0:	lsl	w10, w13, w10
   38bb4:	bic	w10, w12, w10
   38bb8:	lsl	w10, w10, w11
   38bbc:	orr	w9, w10, w9
   38bc0:	str	w9, [x2]
   38bc4:	ldr	w11, [x0, #28]
   38bc8:	ldr	w12, [x1, #32]
   38bcc:	add	x10, x8, x11, lsl #3
   38bd0:	ldr	w10, [x10, #4]
   38bd4:	cmp	w12, #0x8
   38bd8:	sub	w12, w10, #0x1
   38bdc:	b.ne	38c04 <aarch64_ins_sve_addr_rz_xtw@@Base+0xec>  // b.any
   38be0:	cmp	w12, #0x1e
   38be4:	b.hi	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38be8:	lsl	x11, x11, #3
   38bec:	ldr	w8, [x8, x11]
   38bf0:	tbnz	w8, #31, 38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38bf4:	add	w8, w8, w10
   38bf8:	cmp	w8, #0x21
   38bfc:	b.lt	38c3c <aarch64_ins_sve_addr_rz_xtw@@Base+0x124>  // b.tstop
   38c00:	b	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38c04:	cmp	w12, #0x1e
   38c08:	b.hi	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.pmore
   38c0c:	lsl	x11, x11, #3
   38c10:	ldr	w8, [x8, x11]
   38c14:	tbnz	w8, #31, 38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>
   38c18:	add	w11, w8, w10
   38c1c:	cmp	w11, #0x21
   38c20:	b.ge	38c4c <aarch64_ins_sve_addr_rz_xtw@@Base+0x134>  // b.tcont
   38c24:	mov	w11, #0xffffffff            	// #-1
   38c28:	lsl	w10, w11, w10
   38c2c:	mvn	w10, w10
   38c30:	and	w10, w10, #0x1
   38c34:	lsl	w8, w10, w8
   38c38:	orr	w9, w8, w9
   38c3c:	mov	w0, #0x1                   	// #1
   38c40:	str	w9, [x2]
   38c44:	ldp	x29, x30, [sp], #16
   38c48:	ret
   38c4c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38c50:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38c54:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38c58:	add	x0, x0, #0xfe3
   38c5c:	add	x1, x1, #0x40
   38c60:	add	x3, x3, #0x5c
   38c64:	mov	w2, #0x16a                 	// #362
   38c68:	bl	35b30 <__assert_fail@plt>

0000000000038c6c <aarch64_ins_sve_addr_zi_u5@@Base>:
   38c6c:	stp	x29, x30, [sp, #-16]!
   38c70:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38c74:	ldr	w10, [x0, #20]
   38c78:	ldr	x8, [x8, #3944]
   38c7c:	mov	x29, sp
   38c80:	add	x9, x8, x10, lsl #3
   38c84:	ldr	w9, [x9, #4]
   38c88:	sub	w11, w9, #0x1
   38c8c:	cmp	w11, #0x1e
   38c90:	b.hi	38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.pmore
   38c94:	lsl	x10, x10, #3
   38c98:	ldr	w12, [x8, x10]
   38c9c:	tbnz	w12, #31, 38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>
   38ca0:	add	w10, w12, w9
   38ca4:	cmp	w10, #0x21
   38ca8:	b.ge	38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.tcont
   38cac:	ldr	w13, [x1, #16]
   38cb0:	ldr	w11, [x8, #348]
   38cb4:	mov	w14, #0xffffffff            	// #-1
   38cb8:	ldr	w15, [x2]
   38cbc:	ldr	w10, [x0, #16]
   38cc0:	lsl	w9, w14, w9
   38cc4:	bic	w9, w13, w9
   38cc8:	sub	w13, w11, #0x1
   38ccc:	lsl	w9, w9, w12
   38cd0:	orr	w9, w15, w9
   38cd4:	cmp	w13, #0x1e
   38cd8:	str	w9, [x2]
   38cdc:	b.hi	38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.pmore
   38ce0:	ldr	w8, [x8, #344]
   38ce4:	tbnz	w8, #31, 38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>
   38ce8:	add	w12, w8, w11
   38cec:	cmp	w12, #0x21
   38cf0:	b.ge	38d2c <aarch64_ins_sve_addr_zi_u5@@Base+0xc0>  // b.tcont
   38cf4:	ldr	w13, [x1, #20]
   38cf8:	ubfx	w10, w10, #5, #3
   38cfc:	mov	w12, #0x1                   	// #1
   38d00:	mov	w14, #0xffffffff            	// #-1
   38d04:	lsl	w10, w12, w10
   38d08:	lsl	w11, w14, w11
   38d0c:	sdiv	w10, w13, w10
   38d10:	bic	w10, w10, w11
   38d14:	lsl	w8, w10, w8
   38d18:	orr	w8, w8, w9
   38d1c:	mov	w0, #0x1                   	// #1
   38d20:	str	w8, [x2]
   38d24:	ldp	x29, x30, [sp], #16
   38d28:	ret
   38d2c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38d30:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38d34:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38d38:	add	x0, x0, #0xfe3
   38d3c:	add	x1, x1, #0x40
   38d40:	add	x3, x3, #0x5c
   38d44:	mov	w2, #0x16a                 	// #362
   38d48:	bl	35b30 <__assert_fail@plt>

0000000000038d4c <aarch64_ins_sve_addr_zz_lsl@@Base>:
   38d4c:	stp	x29, x30, [sp, #-16]!
   38d50:	mov	x29, sp
   38d54:	bl	38d64 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38d58:	mov	w0, #0x1                   	// #1
   38d5c:	ldp	x29, x30, [sp], #16
   38d60:	ret
   38d64:	stp	x29, x30, [sp, #-16]!
   38d68:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   38d6c:	ldr	w10, [x0, #20]
   38d70:	ldr	x8, [x8, #3944]
   38d74:	mov	x29, sp
   38d78:	add	x9, x8, x10, lsl #3
   38d7c:	ldr	w9, [x9, #4]
   38d80:	sub	w11, w9, #0x1
   38d84:	cmp	w11, #0x1e
   38d88:	b.hi	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38d8c:	lsl	x10, x10, #3
   38d90:	ldr	w10, [x8, x10]
   38d94:	tbnz	w10, #31, 38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38d98:	add	w11, w10, w9
   38d9c:	cmp	w11, #0x21
   38da0:	b.ge	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38da4:	ldr	w11, [x1, #16]
   38da8:	mov	w12, #0xffffffff            	// #-1
   38dac:	ldr	w13, [x2]
   38db0:	lsl	w9, w12, w9
   38db4:	bic	w9, w11, w9
   38db8:	lsl	w9, w9, w10
   38dbc:	orr	w9, w13, w9
   38dc0:	str	w9, [x2]
   38dc4:	ldr	w11, [x0, #24]
   38dc8:	add	x10, x8, x11, lsl #3
   38dcc:	ldr	w10, [x10, #4]
   38dd0:	sub	w12, w10, #0x1
   38dd4:	cmp	w12, #0x1e
   38dd8:	b.hi	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38ddc:	lsl	x11, x11, #3
   38de0:	ldr	w11, [x8, x11]
   38de4:	tbnz	w11, #31, 38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38de8:	add	w12, w11, w10
   38dec:	cmp	w12, #0x21
   38df0:	b.ge	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38df4:	ldr	w13, [x1, #20]
   38df8:	ldr	w12, [x8, #852]
   38dfc:	mov	w14, #0xffffffff            	// #-1
   38e00:	lsl	w10, w14, w10
   38e04:	bic	w10, w13, w10
   38e08:	sub	w13, w12, #0x1
   38e0c:	lsl	w10, w10, w11
   38e10:	orr	w9, w10, w9
   38e14:	cmp	w13, #0x1e
   38e18:	str	w9, [x2]
   38e1c:	b.hi	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.pmore
   38e20:	ldr	w8, [x8, #848]
   38e24:	tbnz	w8, #31, 38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>
   38e28:	add	w10, w8, w12
   38e2c:	cmp	w10, #0x21
   38e30:	b.ge	38e58 <aarch64_ins_sve_addr_zz_lsl@@Base+0x10c>  // b.tcont
   38e34:	ldr	w10, [x1, #40]
   38e38:	mov	w11, #0xffffffff            	// #-1
   38e3c:	lsl	w11, w11, w12
   38e40:	bic	w10, w10, w11
   38e44:	lsl	w8, w10, w8
   38e48:	orr	w8, w8, w9
   38e4c:	str	w8, [x2]
   38e50:	ldp	x29, x30, [sp], #16
   38e54:	ret
   38e58:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   38e5c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   38e60:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   38e64:	add	x0, x0, #0xfe3
   38e68:	add	x1, x1, #0x40
   38e6c:	add	x3, x3, #0x5c
   38e70:	mov	w2, #0x16a                 	// #362
   38e74:	bl	35b30 <__assert_fail@plt>

0000000000038e78 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   38e78:	stp	x29, x30, [sp, #-16]!
   38e7c:	mov	x29, sp
   38e80:	bl	38d64 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38e84:	mov	w0, #0x1                   	// #1
   38e88:	ldp	x29, x30, [sp], #16
   38e8c:	ret

0000000000038e90 <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   38e90:	stp	x29, x30, [sp, #-16]!
   38e94:	mov	x29, sp
   38e98:	bl	38d64 <aarch64_ins_sve_addr_zz_lsl@@Base+0x18>
   38e9c:	mov	w0, #0x1                   	// #1
   38ea0:	ldp	x29, x30, [sp], #16
   38ea4:	ret

0000000000038ea8 <aarch64_ins_sve_aimm@@Base>:
   38ea8:	stp	x29, x30, [sp, #-16]!
   38eac:	ldr	x10, [x1, #40]
   38eb0:	ldr	x9, [x1, #16]
   38eb4:	mov	x8, x2
   38eb8:	mov	x29, sp
   38ebc:	cmp	x10, #0x8
   38ec0:	b.ne	38ed0 <aarch64_ins_sve_aimm@@Base+0x28>  // b.any
   38ec4:	mov	w2, #0x100                 	// #256
   38ec8:	bfxil	w2, w9, #0, #8
   38ecc:	b	38ef8 <aarch64_ins_sve_aimm@@Base+0x50>
   38ed0:	cbz	x9, 38ef4 <aarch64_ins_sve_aimm@@Base+0x4c>
   38ed4:	and	x10, x9, #0xff
   38ed8:	cbnz	x10, 38ef4 <aarch64_ins_sve_aimm@@Base+0x4c>
   38edc:	add	x10, x9, #0xff
   38ee0:	cmp	x9, #0x0
   38ee4:	csel	x9, x10, x9, lt  // lt = tstop
   38ee8:	mov	w2, #0x100                 	// #256
   38eec:	bfxil	w2, w9, #8, #8
   38ef0:	b	38ef8 <aarch64_ins_sve_aimm@@Base+0x50>
   38ef4:	and	w2, w9, #0xff
   38ef8:	mov	x1, x8
   38efc:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   38f00:	mov	w0, #0x1                   	// #1
   38f04:	ldp	x29, x30, [sp], #16
   38f08:	ret

0000000000038f0c <aarch64_ins_sve_asimm@@Base>:
   38f0c:	stp	x29, x30, [sp, #-16]!
   38f10:	ldr	x10, [x1, #40]
   38f14:	ldr	x9, [x1, #16]
   38f18:	mov	x8, x2
   38f1c:	mov	x29, sp
   38f20:	cmp	x10, #0x8
   38f24:	b.ne	38f34 <aarch64_ins_sve_asimm@@Base+0x28>  // b.any
   38f28:	mov	w2, #0x100                 	// #256
   38f2c:	bfxil	w2, w9, #0, #8
   38f30:	b	38f5c <aarch64_ins_sve_asimm@@Base+0x50>
   38f34:	cbz	x9, 38f58 <aarch64_ins_sve_asimm@@Base+0x4c>
   38f38:	and	x10, x9, #0xff
   38f3c:	cbnz	x10, 38f58 <aarch64_ins_sve_asimm@@Base+0x4c>
   38f40:	add	x10, x9, #0xff
   38f44:	cmp	x9, #0x0
   38f48:	csel	x9, x10, x9, lt  // lt = tstop
   38f4c:	mov	w2, #0x100                 	// #256
   38f50:	bfxil	w2, w9, #8, #8
   38f54:	b	38f5c <aarch64_ins_sve_asimm@@Base+0x50>
   38f58:	and	w2, w9, #0xff
   38f5c:	mov	x1, x8
   38f60:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   38f64:	mov	w0, #0x1                   	// #1
   38f68:	ldp	x29, x30, [sp], #16
   38f6c:	ret

0000000000038f70 <aarch64_ins_sve_index@@Base>:
   38f70:	stp	x29, x30, [sp, #-48]!
   38f74:	stp	x20, x19, [sp, #32]
   38f78:	ldrb	w8, [x1, #4]
   38f7c:	str	x21, [sp, #16]
   38f80:	mov	x21, x0
   38f84:	mov	x29, sp
   38f88:	mov	w0, w8
   38f8c:	mov	x19, x2
   38f90:	mov	x20, x1
   38f94:	bl	35710 <aarch64_get_qualifier_esize@plt>
   38f98:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   38f9c:	ldr	w9, [x21, #20]
   38fa0:	ldr	x10, [x10, #3944]
   38fa4:	add	x8, x10, x9, lsl #3
   38fa8:	ldr	w8, [x8, #4]
   38fac:	sub	w11, w8, #0x1
   38fb0:	cmp	w11, #0x1e
   38fb4:	b.hi	39030 <aarch64_ins_sve_index@@Base+0xc0>  // b.pmore
   38fb8:	lsl	x9, x9, #3
   38fbc:	ldr	w9, [x10, x9]
   38fc0:	tbnz	w9, #31, 39030 <aarch64_ins_sve_index@@Base+0xc0>
   38fc4:	add	w10, w9, w8
   38fc8:	cmp	w10, #0x21
   38fcc:	b.ge	39030 <aarch64_ins_sve_index@@Base+0xc0>  // b.tcont
   38fd0:	ldr	w10, [x20, #16]
   38fd4:	mov	w11, #0xffffffff            	// #-1
   38fd8:	ldr	w12, [x19]
   38fdc:	lsl	w8, w11, w8
   38fe0:	bic	w8, w10, w8
   38fe4:	lsl	w8, w8, w9
   38fe8:	orr	w8, w12, w8
   38fec:	str	w8, [x19]
   38ff0:	ldr	w8, [x20, #24]
   38ff4:	mov	w9, #0x1                   	// #1
   38ff8:	mov	w3, #0x2                   	// #2
   38ffc:	mov	w4, #0x2b                  	// #43
   39000:	bfi	w9, w8, #1, #31
   39004:	and	w8, w0, #0xff
   39008:	mul	w1, w9, w8
   3900c:	mov	w5, #0x74                  	// #116
   39010:	mov	x0, x19
   39014:	mov	w2, wzr
   39018:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3901c:	ldp	x20, x19, [sp, #32]
   39020:	ldr	x21, [sp, #16]
   39024:	mov	w0, #0x1                   	// #1
   39028:	ldp	x29, x30, [sp], #48
   3902c:	ret
   39030:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   39034:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   39038:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3903c:	add	x0, x0, #0xfe3
   39040:	add	x1, x1, #0x40
   39044:	add	x3, x3, #0x5c
   39048:	mov	w2, #0x16a                 	// #362
   3904c:	bl	35b30 <__assert_fail@plt>

0000000000039050 <aarch64_ins_sve_limm_mov@@Base>:
   39050:	stp	x29, x30, [sp, #-48]!
   39054:	stp	x20, x19, [sp, #32]
   39058:	ldr	x8, [x3, #8]
   3905c:	mov	x20, x0
   39060:	ldr	x9, [x1, #16]
   39064:	ldrb	w0, [x3, #28]
   39068:	ldr	w8, [x8, #20]
   3906c:	str	x21, [sp, #16]
   39070:	mov	x29, sp
   39074:	mov	x19, x2
   39078:	cmp	w8, #0x2a
   3907c:	cinv	x21, x9, eq  // eq = none
   39080:	bl	35710 <aarch64_get_qualifier_esize@plt>
   39084:	and	w1, w0, #0xff
   39088:	add	x2, x29, #0x1c
   3908c:	mov	x0, x21
   39090:	bl	354a0 <aarch64_logical_immediate_p@plt>
   39094:	cbz	w0, 390c8 <aarch64_ins_sve_limm_mov@@Base+0x78>
   39098:	ldr	w1, [x29, #28]
   3909c:	ldp	w5, w4, [x20, #24]
   390a0:	ldr	w6, [x20, #20]
   390a4:	mov	w3, #0x3                   	// #3
   390a8:	mov	x0, x19
   390ac:	mov	w2, wzr
   390b0:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   390b4:	ldp	x20, x19, [sp, #32]
   390b8:	ldr	x21, [sp, #16]
   390bc:	mov	w0, #0x1                   	// #1
   390c0:	ldp	x29, x30, [sp], #48
   390c4:	ret
   390c8:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   390cc:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   390d0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   390d4:	add	x0, x0, #0xb3
   390d8:	add	x1, x1, #0x36f
   390dc:	add	x3, x3, #0xe4
   390e0:	mov	w2, #0x220                 	// #544
   390e4:	bl	35b30 <__assert_fail@plt>

00000000000390e8 <aarch64_ins_sve_quad_index@@Base>:
   390e8:	stp	x29, x30, [sp, #-16]!
   390ec:	ldr	w8, [x0, #16]
   390f0:	ldr	w9, [x1, #16]
   390f4:	mov	x29, sp
   390f8:	ubfx	x10, x8, #5, #3
   390fc:	lsr	w11, w9, w10
   39100:	cbnz	w11, 39128 <aarch64_ins_sve_quad_index@@Base+0x40>
   39104:	ldr	w11, [x1, #24]
   39108:	mov	x8, x2
   3910c:	mov	x1, x8
   39110:	lsl	w10, w11, w10
   39114:	add	w2, w9, w10
   39118:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   3911c:	mov	w0, #0x1                   	// #1
   39120:	ldp	x29, x30, [sp], #16
   39124:	ret
   39128:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3912c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   39130:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   39134:	add	x0, x0, #0xc76
   39138:	add	x1, x1, #0x36f
   3913c:	add	x3, x3, #0xc9d
   39140:	mov	w2, #0x4a2                 	// #1186
   39144:	bl	35b30 <__assert_fail@plt>

0000000000039148 <aarch64_ins_sve_reglist@@Base>:
   39148:	stp	x29, x30, [sp, #-16]!
   3914c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   39150:	ldr	w9, [x0, #20]
   39154:	ldr	x10, [x10, #3944]
   39158:	mov	x29, sp
   3915c:	add	x8, x10, x9, lsl #3
   39160:	ldr	w8, [x8, #4]
   39164:	sub	w11, w8, #0x1
   39168:	cmp	w11, #0x1e
   3916c:	b.hi	391b8 <aarch64_ins_sve_reglist@@Base+0x70>  // b.pmore
   39170:	lsl	x9, x9, #3
   39174:	ldr	w9, [x10, x9]
   39178:	tbnz	w9, #31, 391b8 <aarch64_ins_sve_reglist@@Base+0x70>
   3917c:	add	w10, w9, w8
   39180:	cmp	w10, #0x21
   39184:	b.ge	391b8 <aarch64_ins_sve_reglist@@Base+0x70>  // b.tcont
   39188:	ldrh	w10, [x1, #16]
   3918c:	mov	w11, #0xffffffff            	// #-1
   39190:	ldr	w12, [x2]
   39194:	lsl	w8, w11, w8
   39198:	and	w10, w10, #0x1f
   3919c:	bic	w8, w10, w8
   391a0:	lsl	w8, w8, w9
   391a4:	orr	w8, w12, w8
   391a8:	mov	w0, #0x1                   	// #1
   391ac:	str	w8, [x2]
   391b0:	ldp	x29, x30, [sp], #16
   391b4:	ret
   391b8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   391bc:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   391c0:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   391c4:	add	x0, x0, #0xfe3
   391c8:	add	x1, x1, #0x40
   391cc:	add	x3, x3, #0x5c
   391d0:	mov	w2, #0x16a                 	// #362
   391d4:	bl	35b30 <__assert_fail@plt>

00000000000391d8 <aarch64_ins_sve_scale@@Base>:
   391d8:	stp	x29, x30, [sp, #-32]!
   391dc:	stp	x20, x19, [sp, #16]
   391e0:	mov	x19, x2
   391e4:	ldr	w2, [x1, #16]
   391e8:	mov	x20, x1
   391ec:	mov	x1, x19
   391f0:	mov	x29, sp
   391f4:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   391f8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   391fc:	ldr	x9, [x9, #3944]
   39200:	ldr	w8, [x9, #780]
   39204:	sub	w10, w8, #0x1
   39208:	cmp	w10, #0x1e
   3920c:	b.hi	39258 <aarch64_ins_sve_scale@@Base+0x80>  // b.pmore
   39210:	ldr	w9, [x9, #776]
   39214:	tbnz	w9, #31, 39258 <aarch64_ins_sve_scale@@Base+0x80>
   39218:	add	w10, w9, w8
   3921c:	cmp	w10, #0x21
   39220:	b.ge	39258 <aarch64_ins_sve_scale@@Base+0x80>  // b.tcont
   39224:	ldr	w10, [x20, #40]
   39228:	mov	w11, #0xffffffff            	// #-1
   3922c:	ldr	w12, [x19]
   39230:	lsl	w8, w11, w8
   39234:	sub	w10, w10, #0x1
   39238:	bic	w8, w10, w8
   3923c:	lsl	w8, w8, w9
   39240:	orr	w8, w12, w8
   39244:	str	w8, [x19]
   39248:	ldp	x20, x19, [sp, #16]
   3924c:	mov	w0, #0x1                   	// #1
   39250:	ldp	x29, x30, [sp], #32
   39254:	ret
   39258:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3925c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   39260:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   39264:	add	x0, x0, #0xfe3
   39268:	add	x1, x1, #0x40
   3926c:	add	x3, x3, #0x5c
   39270:	mov	w2, #0x16a                 	// #362
   39274:	bl	35b30 <__assert_fail@plt>

0000000000039278 <aarch64_ins_sve_shlimm@@Base>:
   39278:	stp	x29, x30, [sp, #-48]!
   3927c:	stp	x20, x19, [sp, #32]
   39280:	ldr	w8, [x1, #8]
   39284:	str	x21, [sp, #16]
   39288:	mov	x29, sp
   3928c:	cmp	w8, #0x0
   39290:	b.le	392dc <aarch64_ins_sve_shlimm@@Base+0x64>
   39294:	sub	w8, w8, #0x1
   39298:	mov	w9, #0x38                  	// #56
   3929c:	smaddl	x8, w8, w9, x3
   392a0:	mov	x21, x0
   392a4:	ldrb	w0, [x8, #28]
   392a8:	mov	x19, x2
   392ac:	mov	x20, x1
   392b0:	bl	35710 <aarch64_get_qualifier_esize@plt>
   392b4:	ldr	w8, [x20, #16]
   392b8:	mov	x1, x19
   392bc:	add	w2, w8, w0, uxtb #3
   392c0:	mov	x0, x21
   392c4:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   392c8:	ldp	x20, x19, [sp, #32]
   392cc:	ldr	x21, [sp, #16]
   392d0:	mov	w0, #0x1                   	// #1
   392d4:	ldp	x29, x30, [sp], #48
   392d8:	ret
   392dc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   392e0:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   392e4:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   392e8:	add	x0, x0, #0xd37
   392ec:	add	x1, x1, #0x36f
   392f0:	add	x3, x3, #0xd45
   392f4:	mov	w2, #0x4cc                 	// #1228
   392f8:	bl	35b30 <__assert_fail@plt>

00000000000392fc <aarch64_ins_sve_shrimm@@Base>:
   392fc:	stp	x29, x30, [sp, #-48]!
   39300:	stp	x20, x19, [sp, #32]
   39304:	ldr	w8, [x0, #16]
   39308:	ldr	w9, [x1, #8]
   3930c:	str	x21, [sp, #16]
   39310:	mov	x29, sp
   39314:	ubfx	w8, w8, #5, #3
   39318:	subs	w8, w9, w8
   3931c:	b.lt	3936c <aarch64_ins_sve_shrimm@@Base+0x70>  // b.tstop
   39320:	mov	w9, #0x38                  	// #56
   39324:	umaddl	x8, w8, w9, x3
   39328:	mov	x19, x0
   3932c:	ldrb	w0, [x8, #28]
   39330:	mov	x20, x1
   39334:	mov	x21, x2
   39338:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3933c:	ldr	w8, [x20, #16]
   39340:	and	w9, w0, #0xff
   39344:	lsl	w9, w9, #4
   39348:	mov	x0, x19
   3934c:	sub	w2, w9, w8
   39350:	mov	x1, x21
   39354:	bl	36cc0 <aarch64_ins_imm@@Base+0x40>
   39358:	ldp	x20, x19, [sp, #32]
   3935c:	ldr	x21, [sp, #16]
   39360:	mov	w0, #0x1                   	// #1
   39364:	ldp	x29, x30, [sp], #48
   39368:	ret
   3936c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   39370:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   39374:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   39378:	add	x0, x0, #0xddb
   3937c:	add	x1, x1, #0x36f
   39380:	add	x3, x3, #0xdfc
   39384:	mov	w2, #0x4de                 	// #1246
   39388:	bl	35b30 <__assert_fail@plt>

000000000003938c <aarch64_ins_sve_float_half_one@@Base>:
   3938c:	stp	x29, x30, [sp, #-16]!
   39390:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   39394:	ldr	w9, [x0, #20]
   39398:	ldr	x11, [x1, #16]
   3939c:	ldr	x10, [x10, #3944]
   393a0:	mov	w12, #0x3f000000            	// #1056964608
   393a4:	mov	x29, sp
   393a8:	cmp	x11, x12
   393ac:	add	x8, x10, x9, lsl #3
   393b0:	ldr	w8, [x8, #4]
   393b4:	sub	w11, w8, #0x1
   393b8:	b.ne	393e0 <aarch64_ins_sve_float_half_one@@Base+0x54>  // b.any
   393bc:	cmp	w11, #0x1e
   393c0:	b.hi	3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.pmore
   393c4:	lsl	x9, x9, #3
   393c8:	ldr	w9, [x10, x9]
   393cc:	tbnz	w9, #31, 3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>
   393d0:	add	w8, w9, w8
   393d4:	cmp	w8, #0x21
   393d8:	b.lt	39420 <aarch64_ins_sve_float_half_one@@Base+0x94>  // b.tstop
   393dc:	b	3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>
   393e0:	cmp	w11, #0x1e
   393e4:	b.hi	3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.pmore
   393e8:	lsl	x9, x9, #3
   393ec:	ldr	w9, [x10, x9]
   393f0:	tbnz	w9, #31, 3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>
   393f4:	add	w10, w9, w8
   393f8:	cmp	w10, #0x21
   393fc:	b.ge	3942c <aarch64_ins_sve_float_half_one@@Base+0xa0>  // b.tcont
   39400:	mov	w10, #0xffffffff            	// #-1
   39404:	lsl	w8, w10, w8
   39408:	ldr	w10, [x2]
   3940c:	mvn	w8, w8
   39410:	and	w8, w8, #0x1
   39414:	lsl	w8, w8, w9
   39418:	orr	w8, w10, w8
   3941c:	str	w8, [x2]
   39420:	mov	w0, #0x1                   	// #1
   39424:	ldp	x29, x30, [sp], #16
   39428:	ret
   3942c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   39430:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   39434:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   39438:	add	x0, x0, #0xfe3
   3943c:	add	x1, x1, #0x40
   39440:	add	x3, x3, #0x5c
   39444:	mov	w2, #0x16a                 	// #362
   39448:	bl	35b30 <__assert_fail@plt>

000000000003944c <aarch64_ins_sve_float_half_two@@Base>:
   3944c:	stp	x29, x30, [sp, #-16]!
   39450:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   39454:	ldr	w9, [x0, #20]
   39458:	ldr	x11, [x1, #16]
   3945c:	ldr	x10, [x10, #3944]
   39460:	mov	w12, #0x3f000000            	// #1056964608
   39464:	mov	x29, sp
   39468:	cmp	x11, x12
   3946c:	add	x8, x10, x9, lsl #3
   39470:	ldr	w8, [x8, #4]
   39474:	sub	w11, w8, #0x1
   39478:	b.ne	394a0 <aarch64_ins_sve_float_half_two@@Base+0x54>  // b.any
   3947c:	cmp	w11, #0x1e
   39480:	b.hi	394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.pmore
   39484:	lsl	x9, x9, #3
   39488:	ldr	w9, [x10, x9]
   3948c:	tbnz	w9, #31, 394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>
   39490:	add	w8, w9, w8
   39494:	cmp	w8, #0x21
   39498:	b.lt	394e0 <aarch64_ins_sve_float_half_two@@Base+0x94>  // b.tstop
   3949c:	b	394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>
   394a0:	cmp	w11, #0x1e
   394a4:	b.hi	394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.pmore
   394a8:	lsl	x9, x9, #3
   394ac:	ldr	w9, [x10, x9]
   394b0:	tbnz	w9, #31, 394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>
   394b4:	add	w10, w9, w8
   394b8:	cmp	w10, #0x21
   394bc:	b.ge	394ec <aarch64_ins_sve_float_half_two@@Base+0xa0>  // b.tcont
   394c0:	mov	w10, #0xffffffff            	// #-1
   394c4:	lsl	w8, w10, w8
   394c8:	ldr	w10, [x2]
   394cc:	mvn	w8, w8
   394d0:	and	w8, w8, #0x1
   394d4:	lsl	w8, w8, w9
   394d8:	orr	w8, w10, w8
   394dc:	str	w8, [x2]
   394e0:	mov	w0, #0x1                   	// #1
   394e4:	ldp	x29, x30, [sp], #16
   394e8:	ret
   394ec:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   394f0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   394f4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   394f8:	add	x0, x0, #0xfe3
   394fc:	add	x1, x1, #0x40
   39500:	add	x3, x3, #0x5c
   39504:	mov	w2, #0x16a                 	// #362
   39508:	bl	35b30 <__assert_fail@plt>

000000000003950c <aarch64_ins_sve_float_zero_one@@Base>:
   3950c:	stp	x29, x30, [sp, #-16]!
   39510:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   39514:	ldr	w9, [x0, #20]
   39518:	ldr	x12, [x1, #16]
   3951c:	ldr	x10, [x10, #3944]
   39520:	mov	x29, sp
   39524:	add	x8, x10, x9, lsl #3
   39528:	ldr	w8, [x8, #4]
   3952c:	sub	w11, w8, #0x1
   39530:	cmp	w11, #0x1e
   39534:	cbz	x12, 39578 <aarch64_ins_sve_float_zero_one@@Base+0x6c>
   39538:	b.hi	395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.pmore
   3953c:	lsl	x9, x9, #3
   39540:	ldr	w9, [x10, x9]
   39544:	tbnz	w9, #31, 395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>
   39548:	add	w10, w9, w8
   3954c:	cmp	w10, #0x21
   39550:	b.ge	395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.tcont
   39554:	mov	w10, #0xffffffff            	// #-1
   39558:	lsl	w8, w10, w8
   3955c:	ldr	w10, [x2]
   39560:	mvn	w8, w8
   39564:	and	w8, w8, #0x1
   39568:	lsl	w8, w8, w9
   3956c:	orr	w8, w10, w8
   39570:	str	w8, [x2]
   39574:	b	39594 <aarch64_ins_sve_float_zero_one@@Base+0x88>
   39578:	b.hi	395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.pmore
   3957c:	lsl	x9, x9, #3
   39580:	ldr	w9, [x10, x9]
   39584:	tbnz	w9, #31, 395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>
   39588:	add	w8, w9, w8
   3958c:	cmp	w8, #0x21
   39590:	b.ge	395a0 <aarch64_ins_sve_float_zero_one@@Base+0x94>  // b.tcont
   39594:	mov	w0, #0x1                   	// #1
   39598:	ldp	x29, x30, [sp], #16
   3959c:	ret
   395a0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   395a4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   395a8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   395ac:	add	x0, x0, #0xfe3
   395b0:	add	x1, x1, #0x40
   395b4:	add	x3, x3, #0x5c
   395b8:	mov	w2, #0x16a                 	// #362
   395bc:	bl	35b30 <__assert_fail@plt>

00000000000395c0 <aarch64_opcode_encode@@Base>:
   395c0:	sub	sp, sp, #0x1c0
   395c4:	stp	x22, x21, [sp, #416]
   395c8:	stp	x20, x19, [sp, #432]
   395cc:	mov	x19, x2
   395d0:	mov	x22, x0
   395d4:	mov	x0, sp
   395d8:	mov	w2, #0x168                 	// #360
   395dc:	stp	x29, x30, [sp, #368]
   395e0:	str	x28, [sp, #384]
   395e4:	stp	x24, x23, [sp, #400]
   395e8:	add	x29, sp, #0x170
   395ec:	mov	x20, x5
   395f0:	mov	x21, x4
   395f4:	mov	x23, x3
   395f8:	bl	35110 <memcpy@plt>
   395fc:	ldr	x8, [sp, #8]
   39600:	cbz	x8, 3960c <aarch64_opcode_encode@@Base+0x4c>
   39604:	cmp	x8, x22
   39608:	b.ne	3ad70 <aarch64_opcode_encode@@Base+0x17b0>  // b.any
   3960c:	cbnz	x8, 39614 <aarch64_opcode_encode@@Base+0x54>
   39610:	str	x22, [sp, #8]
   39614:	mov	x0, sp
   39618:	mov	x1, x21
   3961c:	bl	35580 <aarch64_match_operands_constraint@plt>
   39620:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   39624:	ldr	w8, [x22, #8]
   39628:	mov	x0, x22
   3962c:	str	w8, [sp]
   39630:	bl	35230 <aarch64_num_of_operands@plt>
   39634:	cbz	w0, 3aa64 <aarch64_opcode_encode@@Base+0x14a4>
   39638:	ldr	w8, [x22, #32]
   3963c:	ldr	w9, [sp, #24]
   39640:	cmp	w8, w9
   39644:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   39648:	str	wzr, [sp, #32]
   3964c:	cbz	x23, 39658 <aarch64_opcode_encode@@Base+0x98>
   39650:	ldrb	w8, [sp, #28]
   39654:	strb	w8, [x23]
   39658:	ldr	w8, [x22, #36]
   3965c:	ldr	w9, [sp, #80]
   39660:	cmp	w8, w9
   39664:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   39668:	mov	w8, #0x1                   	// #1
   3966c:	str	w8, [sp, #88]
   39670:	cbz	x23, 3967c <aarch64_opcode_encode@@Base+0xbc>
   39674:	ldrb	w8, [sp, #84]
   39678:	strb	w8, [x23]
   3967c:	ldr	w8, [x22, #40]
   39680:	ldr	w9, [sp, #136]
   39684:	cmp	w8, w9
   39688:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   3968c:	mov	w8, #0x2                   	// #2
   39690:	str	w8, [sp, #144]
   39694:	cbz	x23, 396a0 <aarch64_opcode_encode@@Base+0xe0>
   39698:	ldrb	w8, [sp, #140]
   3969c:	strb	w8, [x23]
   396a0:	ldr	w8, [x22, #44]
   396a4:	ldr	w9, [sp, #192]
   396a8:	cmp	w8, w9
   396ac:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   396b0:	mov	w8, #0x3                   	// #3
   396b4:	str	w8, [sp, #200]
   396b8:	cbz	x23, 396c4 <aarch64_opcode_encode@@Base+0x104>
   396bc:	ldrb	w8, [sp, #196]
   396c0:	strb	w8, [x23]
   396c4:	ldr	w8, [x22, #48]
   396c8:	ldr	w9, [sp, #248]
   396cc:	cmp	w8, w9
   396d0:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   396d4:	mov	w8, #0x4                   	// #4
   396d8:	str	w8, [sp, #256]
   396dc:	cbz	x23, 396e8 <aarch64_opcode_encode@@Base+0x128>
   396e0:	ldrb	w8, [sp, #252]
   396e4:	strb	w8, [x23]
   396e8:	ldr	w8, [x22, #52]
   396ec:	ldr	w9, [sp, #304]
   396f0:	cmp	w8, w9
   396f4:	b.ne	3ad50 <aarch64_opcode_encode@@Base+0x1790>  // b.any
   396f8:	mov	w8, #0x5                   	// #5
   396fc:	str	w8, [sp, #312]
   39700:	cbz	x23, 3970c <aarch64_opcode_encode@@Base+0x14c>
   39704:	ldrb	w8, [sp, #308]
   39708:	strb	w8, [x23]
   3970c:	mov	x0, x22
   39710:	bl	353a0 <aarch64_find_real_opcode@plt>
   39714:	cbz	x0, 39740 <aarch64_opcode_encode@@Base+0x180>
   39718:	ldrb	w8, [x22, #122]
   3971c:	mov	x23, x0
   39720:	tbz	w8, #4, 39740 <aarch64_opcode_encode@@Base+0x180>
   39724:	ldr	x8, [sp, #8]
   39728:	ldrb	w9, [x8, #122]
   3972c:	tbnz	w9, #4, 39994 <aarch64_opcode_encode@@Base+0x3d4>
   39730:	mov	x0, sp
   39734:	mov	x1, x23
   39738:	bl	354b0 <aarch64_replace_opcode@plt>
   3973c:	mov	x22, x23
   39740:	ldr	w8, [x22, #32]
   39744:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   39748:	ldrb	w9, [sp, #72]
   3974c:	tbnz	w9, #0, 3978c <aarch64_opcode_encode@@Base+0x1cc>
   39750:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39754:	ldr	x9, [x9, #4032]
   39758:	mov	w10, #0x30                  	// #48
   3975c:	madd	x10, x8, x10, x9
   39760:	ldrb	w10, [x10, #16]
   39764:	tbz	w10, #0, 3978c <aarch64_opcode_encode@@Base+0x1cc>
   39768:	mov	x10, sp
   3976c:	mov	w11, #0x30                  	// #48
   39770:	add	x1, x10, #0x18
   39774:	madd	x0, x8, x11, x9
   39778:	mov	x2, sp
   3977c:	mov	x3, sp
   39780:	mov	x4, x21
   39784:	bl	359f0 <aarch64_insert_operand@plt>
   39788:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   3978c:	ldr	w8, [x22, #36]
   39790:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   39794:	ldrb	w9, [sp, #128]
   39798:	tbnz	w9, #0, 397d8 <aarch64_opcode_encode@@Base+0x218>
   3979c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   397a0:	ldr	x9, [x9, #4032]
   397a4:	mov	w10, #0x30                  	// #48
   397a8:	madd	x10, x8, x10, x9
   397ac:	ldrb	w10, [x10, #16]
   397b0:	tbz	w10, #0, 397d8 <aarch64_opcode_encode@@Base+0x218>
   397b4:	mov	x10, sp
   397b8:	mov	w11, #0x30                  	// #48
   397bc:	add	x1, x10, #0x50
   397c0:	madd	x0, x8, x11, x9
   397c4:	mov	x2, sp
   397c8:	mov	x3, sp
   397cc:	mov	x4, x21
   397d0:	bl	359f0 <aarch64_insert_operand@plt>
   397d4:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   397d8:	ldr	w8, [x22, #40]
   397dc:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   397e0:	ldrb	w9, [sp, #184]
   397e4:	tbnz	w9, #0, 39824 <aarch64_opcode_encode@@Base+0x264>
   397e8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   397ec:	ldr	x9, [x9, #4032]
   397f0:	mov	w10, #0x30                  	// #48
   397f4:	madd	x10, x8, x10, x9
   397f8:	ldrb	w10, [x10, #16]
   397fc:	tbz	w10, #0, 39824 <aarch64_opcode_encode@@Base+0x264>
   39800:	mov	x10, sp
   39804:	mov	w11, #0x30                  	// #48
   39808:	add	x1, x10, #0x88
   3980c:	madd	x0, x8, x11, x9
   39810:	mov	x2, sp
   39814:	mov	x3, sp
   39818:	mov	x4, x21
   3981c:	bl	359f0 <aarch64_insert_operand@plt>
   39820:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   39824:	ldr	w8, [x22, #44]
   39828:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   3982c:	ldrb	w9, [sp, #240]
   39830:	tbnz	w9, #0, 39870 <aarch64_opcode_encode@@Base+0x2b0>
   39834:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39838:	ldr	x9, [x9, #4032]
   3983c:	mov	w10, #0x30                  	// #48
   39840:	madd	x10, x8, x10, x9
   39844:	ldrb	w10, [x10, #16]
   39848:	tbz	w10, #0, 39870 <aarch64_opcode_encode@@Base+0x2b0>
   3984c:	mov	x10, sp
   39850:	mov	w11, #0x30                  	// #48
   39854:	add	x1, x10, #0xc0
   39858:	madd	x0, x8, x11, x9
   3985c:	mov	x2, sp
   39860:	mov	x3, sp
   39864:	mov	x4, x21
   39868:	bl	359f0 <aarch64_insert_operand@plt>
   3986c:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   39870:	ldr	w8, [x22, #48]
   39874:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   39878:	ldrb	w9, [sp, #296]
   3987c:	tbnz	w9, #0, 398bc <aarch64_opcode_encode@@Base+0x2fc>
   39880:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39884:	ldr	x9, [x9, #4032]
   39888:	mov	w10, #0x30                  	// #48
   3988c:	madd	x10, x8, x10, x9
   39890:	ldrb	w10, [x10, #16]
   39894:	tbz	w10, #0, 398bc <aarch64_opcode_encode@@Base+0x2fc>
   39898:	mov	x10, sp
   3989c:	mov	w11, #0x30                  	// #48
   398a0:	add	x1, x10, #0xf8
   398a4:	madd	x0, x8, x11, x9
   398a8:	mov	x2, sp
   398ac:	mov	x3, sp
   398b0:	mov	x4, x21
   398b4:	bl	359f0 <aarch64_insert_operand@plt>
   398b8:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   398bc:	ldr	w8, [x22, #52]
   398c0:	cbz	w8, 39908 <aarch64_opcode_encode@@Base+0x348>
   398c4:	ldrb	w9, [sp, #352]
   398c8:	tbnz	w9, #0, 39908 <aarch64_opcode_encode@@Base+0x348>
   398cc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   398d0:	ldr	x9, [x9, #4032]
   398d4:	mov	w10, #0x30                  	// #48
   398d8:	madd	x10, x8, x10, x9
   398dc:	ldrb	w10, [x10, #16]
   398e0:	tbz	w10, #0, 39908 <aarch64_opcode_encode@@Base+0x348>
   398e4:	mov	x10, sp
   398e8:	mov	w11, #0x30                  	// #48
   398ec:	add	x1, x10, #0x130
   398f0:	madd	x0, x8, x11, x9
   398f4:	mov	x2, sp
   398f8:	mov	x3, sp
   398fc:	mov	x4, x21
   39900:	bl	359f0 <aarch64_insert_operand@plt>
   39904:	cbz	w0, 3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   39908:	ldr	w8, [x22, #120]
   3990c:	mov	w9, #0xff0                 	// #4080
   39910:	movk	w9, #0x8c0, lsl #16
   39914:	tst	w8, w9
   39918:	b.eq	3a3cc <aarch64_opcode_encode@@Base+0xe0c>  // b.none
   3991c:	ldr	x23, [sp, #8]
   39920:	ldr	x8, [x23, #120]
   39924:	tbz	w8, #4, 39978 <aarch64_opcode_encode@@Base+0x3b8>
   39928:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3992c:	ldr	x10, [x10, #3944]
   39930:	ldr	w9, [x10, #12]
   39934:	sub	w11, w9, #0x1
   39938:	cmp	w11, #0x1e
   3993c:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39940:	ldr	w10, [x10, #8]
   39944:	tbnz	w10, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39948:	add	w11, w10, w9
   3994c:	cmp	w11, #0x21
   39950:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39954:	ldr	x11, [sp, #16]
   39958:	mov	w12, #0xffffffff            	// #-1
   3995c:	ldr	w13, [sp]
   39960:	lsl	w9, w12, w9
   39964:	ldr	w11, [x11, #32]
   39968:	bic	w9, w11, w9
   3996c:	lsl	w9, w9, w10
   39970:	orr	w9, w13, w9
   39974:	str	w9, [sp]
   39978:	tbz	w8, #5, 39aa0 <aarch64_opcode_encode@@Base+0x4e0>
   3997c:	ldr	w0, [x23, #32]
   39980:	bl	357a0 <aarch64_get_operand_class@plt>
   39984:	cmp	w0, #0x1
   39988:	b.ne	399d0 <aarch64_opcode_encode@@Base+0x410>  // b.any
   3998c:	mov	x8, xzr
   39990:	b	399e4 <aarch64_opcode_encode@@Base+0x424>
   39994:	ldr	w9, [x8, #20]
   39998:	sub	w8, w9, #0x23
   3999c:	cmp	w8, #0x21
   399a0:	b.hi	39730 <aarch64_opcode_encode@@Base+0x170>  // b.pmore
   399a4:	adrp	x10, 56000 <floatformat_from_double@@Base+0x4f8>
   399a8:	add	x10, x10, #0x2c8
   399ac:	adr	x11, 39730 <aarch64_opcode_encode@@Base+0x170>
   399b0:	ldrh	w12, [x10, x8, lsl #1]
   399b4:	add	x11, x11, x12, lsl #2
   399b8:	mov	x8, sp
   399bc:	br	x11
   399c0:	ldrb	w8, [sp, #84]
   399c4:	str	xzr, [sp, #152]
   399c8:	strb	w8, [sp, #140]
   399cc:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   399d0:	ldr	w0, [x23, #36]
   399d4:	bl	357a0 <aarch64_get_operand_class@plt>
   399d8:	cmp	w0, #0x1
   399dc:	b.ne	3adb0 <aarch64_opcode_encode@@Base+0x17f0>  // b.any
   399e0:	mov	w8, #0x1                   	// #1
   399e4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   399e8:	ldr	x9, [x9, #3944]
   399ec:	mov	w10, #0x38                  	// #56
   399f0:	mov	x11, sp
   399f4:	madd	x10, x8, x10, x11
   399f8:	ldrb	w11, [x10, #28]
   399fc:	ldr	w8, [x9, #476]
   39a00:	cmp	w11, #0x2
   39a04:	sub	w13, w8, #0x1
   39a08:	cset	w10, eq  // eq = none
   39a0c:	cmp	w11, #0x4
   39a10:	cset	w12, eq  // eq = none
   39a14:	cmp	w13, #0x1e
   39a18:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39a1c:	ldr	w11, [x9, #472]
   39a20:	tbnz	w11, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39a24:	add	w13, w11, w8
   39a28:	cmp	w13, #0x21
   39a2c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39a30:	orr	w10, w10, w12
   39a34:	mov	w12, #0xffffffff            	// #-1
   39a38:	ldr	w13, [sp]
   39a3c:	lsl	w8, w12, w8
   39a40:	bic	w8, w10, w8
   39a44:	ldr	x23, [sp, #8]
   39a48:	lsl	w8, w8, w11
   39a4c:	orr	w11, w13, w8
   39a50:	str	w11, [sp]
   39a54:	ldr	x8, [x23, #120]
   39a58:	tbz	w8, #23, 39aa0 <aarch64_opcode_encode@@Base+0x4e0>
   39a5c:	ldr	w12, [x9, #452]
   39a60:	sub	w13, w12, #0x1
   39a64:	cmp	w13, #0x1e
   39a68:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39a6c:	ldr	w9, [x9, #448]
   39a70:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39a74:	add	w13, w9, w12
   39a78:	cmp	w13, #0x21
   39a7c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39a80:	ldr	w13, [x23, #12]
   39a84:	mov	w14, #0xffffffff            	// #-1
   39a88:	lsl	w12, w14, w12
   39a8c:	bic	w10, w10, w12
   39a90:	lsl	w9, w10, w9
   39a94:	bic	w9, w9, w13
   39a98:	orr	w9, w9, w11
   39a9c:	str	w9, [sp]
   39aa0:	tbz	w8, #27, 39b44 <aarch64_opcode_encode@@Base+0x584>
   39aa4:	ldr	w0, [x23, #32]
   39aa8:	bl	357a0 <aarch64_get_operand_class@plt>
   39aac:	cmp	w0, #0x1
   39ab0:	b.ne	39abc <aarch64_opcode_encode@@Base+0x4fc>  // b.any
   39ab4:	mov	x8, xzr
   39ab8:	b	39ad0 <aarch64_opcode_encode@@Base+0x510>
   39abc:	ldr	w0, [x23, #36]
   39ac0:	bl	357a0 <aarch64_get_operand_class@plt>
   39ac4:	cmp	w0, #0x1
   39ac8:	b.ne	3adb0 <aarch64_opcode_encode@@Base+0x17f0>  // b.any
   39acc:	mov	w8, #0x1                   	// #1
   39ad0:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39ad4:	ldr	x9, [x9, #3944]
   39ad8:	mov	w10, #0x38                  	// #56
   39adc:	mov	x11, sp
   39ae0:	madd	x10, x8, x10, x11
   39ae4:	ldrb	w11, [x10, #28]
   39ae8:	ldr	w8, [x9, #484]
   39aec:	cmp	w11, #0x2
   39af0:	sub	w12, w8, #0x1
   39af4:	cset	w10, eq  // eq = none
   39af8:	cmp	w11, #0x4
   39afc:	cset	w11, eq  // eq = none
   39b00:	cmp	w12, #0x1e
   39b04:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39b08:	ldr	w9, [x9, #480]
   39b0c:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39b10:	add	w12, w9, w8
   39b14:	cmp	w12, #0x21
   39b18:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39b1c:	orr	w10, w10, w11
   39b20:	mov	w11, #0xffffffff            	// #-1
   39b24:	ldr	w12, [sp]
   39b28:	lsl	w8, w11, w8
   39b2c:	bic	w8, w10, w8
   39b30:	ldr	x23, [sp, #8]
   39b34:	lsl	w8, w8, w9
   39b38:	orr	w8, w12, w8
   39b3c:	str	w8, [sp]
   39b40:	ldr	x8, [x23, #120]
   39b44:	tbz	w8, #6, 39c24 <aarch64_opcode_encode@@Base+0x664>
   39b48:	mov	x0, x23
   39b4c:	bl	35830 <aarch64_select_operand_for_sizeq_field_coding@plt>
   39b50:	mov	w8, #0x38                  	// #56
   39b54:	mov	x9, sp
   39b58:	smaddl	x8, w0, w8, x9
   39b5c:	ldrb	w0, [x8, #28]
   39b60:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   39b64:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   39b68:	ldr	x8, [x8, #3944]
   39b6c:	ldr	w9, [x8, #92]
   39b70:	sub	w10, w9, #0x1
   39b74:	cmp	w10, #0x1e
   39b78:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39b7c:	ldr	w11, [x8, #88]
   39b80:	tbnz	w11, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39b84:	add	w10, w11, w9
   39b88:	cmp	w10, #0x21
   39b8c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39b90:	ldr	x23, [sp, #8]
   39b94:	mov	w10, #0xffffffff            	// #-1
   39b98:	lsl	w9, w10, w9
   39b9c:	and	w12, w0, #0x1
   39ba0:	ldr	w10, [x23, #12]
   39ba4:	ldr	w13, [sp]
   39ba8:	bic	w9, w12, w9
   39bac:	lsl	w9, w9, w11
   39bb0:	bic	w9, w9, w10
   39bb4:	orr	w9, w13, w9
   39bb8:	str	w9, [sp]
   39bbc:	ldr	w11, [x23, #16]
   39bc0:	sub	w11, w11, #0x12
   39bc4:	cmp	w11, #0x4
   39bc8:	mov	w11, #0x8                   	// #8
   39bcc:	cinc	x12, x11, cc  // cc = lo, ul, last
   39bd0:	add	x11, x8, x12, lsl #3
   39bd4:	ldr	w11, [x11, #4]
   39bd8:	sub	w13, w11, #0x1
   39bdc:	cmp	w13, #0x1e
   39be0:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39be4:	lsl	x12, x12, #3
   39be8:	ldr	w8, [x8, x12]
   39bec:	tbnz	w8, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39bf0:	add	w12, w8, w11
   39bf4:	cmp	w12, #0x21
   39bf8:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39bfc:	mov	w13, #0xffffffff            	// #-1
   39c00:	ubfx	w12, w0, #1, #2
   39c04:	lsl	w11, w13, w11
   39c08:	bic	w11, w12, w11
   39c0c:	mvn	w10, w10
   39c10:	lsl	w8, w11, w8
   39c14:	and	w8, w8, w10
   39c18:	orr	w8, w8, w9
   39c1c:	str	w8, [sp]
   39c20:	ldr	x8, [x23, #120]
   39c24:	tbz	w8, #7, 39cd0 <aarch64_opcode_encode@@Base+0x710>
   39c28:	ldr	w0, [x23, #36]
   39c2c:	bl	357a0 <aarch64_get_operand_class@plt>
   39c30:	cmp	w0, #0x3
   39c34:	b.ne	39c40 <aarch64_opcode_encode@@Base+0x680>  // b.any
   39c38:	mov	w8, #0x1                   	// #1
   39c3c:	b	39c54 <aarch64_opcode_encode@@Base+0x694>
   39c40:	ldr	w0, [x23, #32]
   39c44:	bl	357a0 <aarch64_get_operand_class@plt>
   39c48:	cmp	w0, #0x3
   39c4c:	b.ne	3aeb0 <aarch64_opcode_encode@@Base+0x18f0>  // b.any
   39c50:	mov	x8, xzr
   39c54:	mov	w9, #0x38                  	// #56
   39c58:	mov	x10, sp
   39c5c:	madd	x8, x8, x9, x10
   39c60:	ldrb	w8, [x8, #28]
   39c64:	sub	w9, w8, #0x6
   39c68:	cmp	w9, #0x3
   39c6c:	b.cs	3add0 <aarch64_opcode_encode@@Base+0x1810>  // b.hs, b.nlast
   39c70:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   39c74:	ldr	x10, [x10, #3944]
   39c78:	ldr	w8, [x10, #292]
   39c7c:	sub	w11, w8, #0x1
   39c80:	cmp	w11, #0x1e
   39c84:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39c88:	ldr	w10, [x10, #288]
   39c8c:	tbnz	w10, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39c90:	add	w11, w10, w8
   39c94:	cmp	w11, #0x21
   39c98:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39c9c:	adrp	x11, 56000 <floatformat_from_double@@Base+0x4f8>
   39ca0:	sxtb	x9, w9
   39ca4:	add	x11, x11, #0x348
   39ca8:	ldr	w9, [x11, x9, lsl #2]
   39cac:	mov	w11, #0xffffffff            	// #-1
   39cb0:	ldr	w12, [sp]
   39cb4:	lsl	w8, w11, w8
   39cb8:	bic	w8, w9, w8
   39cbc:	ldr	x23, [sp, #8]
   39cc0:	lsl	w8, w8, w10
   39cc4:	orr	w8, w12, w8
   39cc8:	str	w8, [sp]
   39ccc:	ldr	x8, [x23, #120]
   39cd0:	tbz	w8, #8, 39dbc <aarch64_opcode_encode@@Base+0x7fc>
   39cd4:	ldr	w0, [x23, #32]
   39cd8:	bl	357a0 <aarch64_get_operand_class@plt>
   39cdc:	cmp	w0, #0x6
   39ce0:	b.ne	39cf4 <aarch64_opcode_encode@@Base+0x734>  // b.any
   39ce4:	ldrb	w0, [x23, #56]
   39ce8:	bl	35710 <aarch64_get_qualifier_esize@plt>
   39cec:	and	w24, w0, #0xff
   39cf0:	b	39cf8 <aarch64_opcode_encode@@Base+0x738>
   39cf4:	mov	w24, wzr
   39cf8:	ldr	w0, [x23, #36]
   39cfc:	bl	357a0 <aarch64_get_operand_class@plt>
   39d00:	cmp	w0, #0x6
   39d04:	b.ne	39d20 <aarch64_opcode_encode@@Base+0x760>  // b.any
   39d08:	ldrb	w0, [x23, #57]
   39d0c:	bl	35710 <aarch64_get_qualifier_esize@plt>
   39d10:	and	w8, w0, #0xff
   39d14:	cmp	w8, w24
   39d18:	b.eq	39d2c <aarch64_opcode_encode@@Base+0x76c>  // b.none
   39d1c:	b	39d30 <aarch64_opcode_encode@@Base+0x770>
   39d20:	mov	w8, wzr
   39d24:	cmp	w8, w24
   39d28:	b.ne	39d30 <aarch64_opcode_encode@@Base+0x770>  // b.any
   39d2c:	cbz	w8, 3adf0 <aarch64_opcode_encode@@Base+0x1830>
   39d30:	cmp	w24, #0x0
   39d34:	cset	w10, eq  // eq = none
   39d38:	cmp	w24, w8, lsl #1
   39d3c:	cset	w8, eq  // eq = none
   39d40:	mov	w9, #0x38                  	// #56
   39d44:	orr	w8, w10, w8
   39d48:	mov	x10, sp
   39d4c:	umaddl	x8, w8, w9, x10
   39d50:	ldrb	w0, [x8, #28]
   39d54:	sub	w8, w0, #0x5
   39d58:	cmp	w8, #0x5
   39d5c:	b.cs	3ae10 <aarch64_opcode_encode@@Base+0x1850>  // b.hs, b.nlast
   39d60:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   39d64:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39d68:	ldr	x9, [x9, #3944]
   39d6c:	ldr	w8, [x9, #68]
   39d70:	sub	w10, w8, #0x1
   39d74:	cmp	w10, #0x1e
   39d78:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39d7c:	ldr	w9, [x9, #64]
   39d80:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39d84:	add	w10, w9, w8
   39d88:	cmp	w10, #0x21
   39d8c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39d90:	ldr	x23, [sp, #8]
   39d94:	mov	w10, #0xffffffff            	// #-1
   39d98:	lsl	w8, w10, w8
   39d9c:	ldr	w10, [sp]
   39da0:	ldr	w11, [x23, #12]
   39da4:	bic	w8, w0, w8
   39da8:	lsl	w8, w8, w9
   39dac:	bic	w8, w8, w11
   39db0:	orr	w8, w10, w8
   39db4:	str	w8, [sp]
   39db8:	ldr	x8, [x23, #120]
   39dbc:	tbz	w8, #9, 39ea4 <aarch64_opcode_encode@@Base+0x8e4>
   39dc0:	ldr	w0, [x23, #32]
   39dc4:	ldrb	w24, [sp, #28]
   39dc8:	bl	357a0 <aarch64_get_operand_class@plt>
   39dcc:	sub	w8, w24, #0xd
   39dd0:	cmp	w8, #0x8
   39dd4:	b.hi	3ad90 <aarch64_opcode_encode@@Base+0x17d0>  // b.pmore
   39dd8:	cmp	w0, #0x4
   39ddc:	b.ne	3ad90 <aarch64_opcode_encode@@Base+0x17d0>  // b.any
   39de0:	mov	w0, w24
   39de4:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   39de8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   39dec:	ldr	x8, [x8, #3944]
   39df0:	ldr	w9, [x8, #92]
   39df4:	sub	w10, w9, #0x1
   39df8:	cmp	w10, #0x1e
   39dfc:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39e00:	ldr	w11, [x8, #88]
   39e04:	tbnz	w11, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39e08:	add	w10, w11, w9
   39e0c:	cmp	w10, #0x21
   39e10:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39e14:	ldr	x23, [sp, #8]
   39e18:	mov	w13, #0xffffffff            	// #-1
   39e1c:	and	w12, w0, #0x1
   39e20:	ldr	w14, [sp]
   39e24:	ldr	w10, [x23, #12]
   39e28:	lsl	w9, w13, w9
   39e2c:	bic	w9, w12, w9
   39e30:	lsl	w9, w9, w11
   39e34:	bic	w9, w9, w10
   39e38:	orr	w9, w14, w9
   39e3c:	cmp	w0, #0x8
   39e40:	str	w9, [sp]
   39e44:	b.cs	3ae30 <aarch64_opcode_encode@@Base+0x1870>  // b.hs, b.nlast
   39e48:	ldr	w12, [x8, #348]
   39e4c:	asr	w11, w0, #1
   39e50:	cmp	w11, w12
   39e54:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39e58:	cmp	w11, #0x1e
   39e5c:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39e60:	ldr	w8, [x8, #344]
   39e64:	tbnz	w8, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39e68:	add	w12, w11, #0x1
   39e6c:	add	w13, w8, w12
   39e70:	cmp	w13, #0x21
   39e74:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39e78:	mov	w13, #0x1                   	// #1
   39e7c:	mov	w14, #0xffffffff            	// #-1
   39e80:	lsl	w11, w13, w11
   39e84:	lsl	w12, w14, w12
   39e88:	bic	w11, w11, w12
   39e8c:	mvn	w10, w10
   39e90:	lsl	w8, w11, w8
   39e94:	and	w8, w8, w10
   39e98:	orr	w8, w8, w9
   39e9c:	str	w8, [sp]
   39ea0:	ldr	x8, [x23, #120]
   39ea4:	tbz	w8, #10, 39f44 <aarch64_opcode_encode@@Base+0x984>
   39ea8:	add	x0, x23, #0x20
   39eac:	mov	w1, #0x4                   	// #4
   39eb0:	bl	351c0 <aarch64_operand_index@plt>
   39eb4:	cmn	w0, #0x1
   39eb8:	csel	w23, wzr, w0, eq  // eq = none
   39ebc:	cmp	w23, #0x2
   39ec0:	b.cs	3ae50 <aarch64_opcode_encode@@Base+0x1890>  // b.hs, b.nlast
   39ec4:	ldr	x8, [sp, #8]
   39ec8:	add	x8, x8, w23, uxtw #2
   39ecc:	ldr	w0, [x8, #32]
   39ed0:	bl	357a0 <aarch64_get_operand_class@plt>
   39ed4:	cmp	w0, #0x1
   39ed8:	b.ne	3ae70 <aarch64_opcode_encode@@Base+0x18b0>  // b.any
   39edc:	mov	w8, w23
   39ee0:	mov	w9, #0x38                  	// #56
   39ee4:	mov	x10, sp
   39ee8:	madd	x8, x8, x9, x10
   39eec:	ldrb	w0, [x8, #28]
   39ef0:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   39ef4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   39ef8:	ldr	x9, [x9, #3944]
   39efc:	ldr	w8, [x9, #92]
   39f00:	sub	w10, w8, #0x1
   39f04:	cmp	w10, #0x1e
   39f08:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39f0c:	ldr	w9, [x9, #88]
   39f10:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39f14:	add	w10, w9, w8
   39f18:	cmp	w10, #0x21
   39f1c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39f20:	mov	w10, #0xffffffff            	// #-1
   39f24:	ldr	w11, [sp]
   39f28:	lsl	w8, w10, w8
   39f2c:	bic	w8, w0, w8
   39f30:	ldr	x23, [sp, #8]
   39f34:	lsl	w8, w8, w9
   39f38:	orr	w8, w11, w8
   39f3c:	str	w8, [sp]
   39f40:	ldr	x8, [x23, #120]
   39f44:	tbz	w8, #11, 39fd0 <aarch64_opcode_encode@@Base+0xa10>
   39f48:	ldr	w0, [x23, #32]
   39f4c:	bl	357a0 <aarch64_get_operand_class@plt>
   39f50:	cmp	w0, #0x1
   39f54:	b.ne	3ae90 <aarch64_opcode_encode@@Base+0x18d0>  // b.any
   39f58:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   39f5c:	ldr	x8, [x8, #3944]
   39f60:	ldr	w9, [x8, #268]
   39f64:	cmp	w9, #0x1
   39f68:	b.lt	39f78 <aarch64_opcode_encode@@Base+0x9b8>  // b.tstop
   39f6c:	ldr	w24, [x8, #264]
   39f70:	mov	w23, #0x1                   	// #1
   39f74:	b	39f80 <aarch64_opcode_encode@@Base+0x9c0>
   39f78:	mov	w23, wzr
   39f7c:	mov	w24, wzr
   39f80:	ldrb	w0, [sp, #28]
   39f84:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   39f88:	sub	w8, w23, #0x1
   39f8c:	cmp	w8, #0x1e
   39f90:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   39f94:	tbnz	w24, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   39f98:	add	w8, w24, w23
   39f9c:	cmp	w8, #0x21
   39fa0:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   39fa4:	mov	w8, #0x1                   	// #1
   39fa8:	mov	w9, #0xffffffff            	// #-1
   39fac:	ldr	w10, [sp]
   39fb0:	sub	w8, w8, w0
   39fb4:	lsl	w9, w9, w23
   39fb8:	bic	w8, w8, w9
   39fbc:	ldr	x23, [sp, #8]
   39fc0:	lsl	w8, w8, w24
   39fc4:	orr	w8, w10, w8
   39fc8:	str	w8, [sp]
   39fcc:	ldr	x8, [x23, #120]
   39fd0:	tbz	w8, #22, 3a3cc <aarch64_opcode_encode@@Base+0xe0c>
   39fd4:	ldr	w8, [x23, #20]
   39fd8:	sub	w8, w8, #0x3a
   39fdc:	cmp	w8, #0x15
   39fe0:	b.hi	3a3cc <aarch64_opcode_encode@@Base+0xe0c>  // b.pmore
   39fe4:	adrp	x9, 56000 <floatformat_from_double@@Base+0x4f8>
   39fe8:	add	x9, x9, #0x30c
   39fec:	adr	x10, 39ffc <aarch64_opcode_encode@@Base+0xa3c>
   39ff0:	ldrb	w11, [x9, x8]
   39ff4:	add	x10, x10, x11, lsl #2
   39ff8:	br	x10
   39ffc:	mov	x8, sp
   3a000:	add	x8, x8, #0x54
   3a004:	b	3a010 <aarch64_opcode_encode@@Base+0xa50>
   3a008:	mov	x8, sp
   3a00c:	add	x8, x8, #0x1c
   3a010:	ldrb	w8, [x8]
   3a014:	cmp	w8, #0x13
   3a018:	b.eq	3a024 <aarch64_opcode_encode@@Base+0xa64>  // b.none
   3a01c:	cmp	w8, #0x15
   3a020:	b.ne	3aed0 <aarch64_opcode_encode@@Base+0x1910>  // b.any
   3a024:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3a028:	ldr	x9, [x9, #3944]
   3a02c:	cmp	w8, #0x13
   3a030:	cset	w8, ne  // ne = any
   3a034:	ldr	w10, [x9, #68]
   3a038:	cmp	w10, #0x1
   3a03c:	b.lt	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tstop
   3a040:	ldr	w9, [x9, #64]
   3a044:	cmp	w9, #0x20
   3a048:	b.cs	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.hs, b.nlast
   3a04c:	ldr	w10, [sp]
   3a050:	lsl	w8, w8, w9
   3a054:	orr	w8, w10, w8
   3a058:	b	3a3c8 <aarch64_opcode_encode@@Base+0xe08>
   3a05c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3a060:	ldr	x8, [x8, #3944]
   3a064:	ldr	w10, [x8, #612]
   3a068:	sub	w9, w10, #0x1
   3a06c:	cmp	w9, #0x1e
   3a070:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a074:	ldr	w9, [x8, #608]
   3a078:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a07c:	add	w11, w9, w10
   3a080:	cmp	w11, #0x21
   3a084:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a088:	ldr	w12, [sp]
   3a08c:	ldr	w11, [x8, #616]
   3a090:	ldr	w13, [x8, #620]
   3a094:	mov	w15, #0xffffffff            	// #-1
   3a098:	mov	w14, #0xffffffff            	// #-1
   3a09c:	lsl	w15, w15, w10
   3a0a0:	ldr	w10, [x8, #596]
   3a0a4:	lsl	w13, w14, w13
   3a0a8:	lsr	w11, w12, w11
   3a0ac:	bic	w11, w11, w13
   3a0b0:	bic	w14, w11, w15
   3a0b4:	sub	w13, w10, #0x1
   3a0b8:	lsl	w9, w14, w9
   3a0bc:	orr	w9, w9, w12
   3a0c0:	cmp	w13, #0x1e
   3a0c4:	str	w9, [sp]
   3a0c8:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a0cc:	ldr	w8, [x8, #592]
   3a0d0:	tbnz	w8, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a0d4:	add	w12, w8, w10
   3a0d8:	cmp	w12, #0x21
   3a0dc:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a0e0:	mov	w12, #0xffffffff            	// #-1
   3a0e4:	lsl	w10, w12, w10
   3a0e8:	bic	w10, w11, w10
   3a0ec:	lsl	w8, w10, w8
   3a0f0:	orr	w8, w8, w9
   3a0f4:	b	3a3c8 <aarch64_opcode_encode@@Base+0xe08>
   3a0f8:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a0fc:	ldr	x10, [x10, #3944]
   3a100:	ldr	w8, [x10, #612]
   3a104:	sub	w9, w8, #0x1
   3a108:	cmp	w9, #0x1e
   3a10c:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a110:	ldr	w9, [x10, #608]
   3a114:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a118:	add	w11, w9, w8
   3a11c:	cmp	w11, #0x21
   3a120:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a124:	ldr	w11, [sp]
   3a128:	ldr	w12, [x10, #616]
   3a12c:	ldr	w10, [x10, #620]
   3a130:	b	3a3a4 <aarch64_opcode_encode@@Base+0xde4>
   3a134:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a138:	ldr	x10, [x10, #3944]
   3a13c:	ldr	w8, [x10, #612]
   3a140:	sub	w9, w8, #0x1
   3a144:	cmp	w9, #0x1e
   3a148:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a14c:	ldr	w9, [x10, #608]
   3a150:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a154:	add	w11, w9, w8
   3a158:	cmp	w11, #0x21
   3a15c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a160:	ldr	w11, [sp]
   3a164:	ldr	w12, [x10, #592]
   3a168:	ldr	w10, [x10, #596]
   3a16c:	b	3a3a4 <aarch64_opcode_encode@@Base+0xde4>
   3a170:	ldr	x8, [sp, #152]
   3a174:	ldr	x9, [sp, #208]
   3a178:	add	x8, x8, x9
   3a17c:	sub	x8, x8, #0x1
   3a180:	str	x8, [sp, #208]
   3a184:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3a188:	ldur	q0, [x8, #136]
   3a18c:	ldr	x9, [sp, #184]
   3a190:	str	q0, [sp, #192]
   3a194:	ldur	q0, [x8, #152]
   3a198:	str	q0, [sp, #208]
   3a19c:	ldur	q0, [x8, #168]
   3a1a0:	str	x9, [sp, #240]
   3a1a4:	mov	w9, #0x3                   	// #3
   3a1a8:	str	w9, [sp, #200]
   3a1ac:	str	q0, [sp, #224]
   3a1b0:	ldr	q0, [sp, #80]
   3a1b4:	stur	q0, [x8, #136]
   3a1b8:	ldr	q0, [sp, #96]
   3a1bc:	stur	q0, [x8, #152]
   3a1c0:	ldr	q0, [sp, #112]
   3a1c4:	stur	q0, [x8, #168]
   3a1c8:	ldr	x8, [sp, #128]
   3a1cc:	ldr	x0, [sp, #208]
   3a1d0:	str	x8, [sp, #184]
   3a1d4:	mov	w8, #0x2                   	// #2
   3a1d8:	str	w8, [sp, #144]
   3a1dc:	b	3ab2c <aarch64_opcode_encode@@Base+0x156c>
   3a1e0:	ldrb	w10, [sp, #140]
   3a1e4:	ldr	x8, [sp, #152]
   3a1e8:	ldr	x9, [sp, #208]
   3a1ec:	mov	w11, #0x3f                  	// #63
   3a1f0:	mov	w12, #0x1f                  	// #31
   3a1f4:	cmp	w10, #0x1d
   3a1f8:	neg	x8, x8
   3a1fc:	csel	x10, x12, x11, eq  // eq = none
   3a200:	sub	x9, x9, #0x1
   3a204:	and	x8, x10, x8
   3a208:	str	x8, [sp, #152]
   3a20c:	str	x9, [sp, #208]
   3a210:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3a214:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a218:	ldr	x10, [x10, #3944]
   3a21c:	ldr	w8, [x10, #708]
   3a220:	sub	w9, w8, #0x1
   3a224:	cmp	w9, #0x1e
   3a228:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a22c:	ldr	w9, [x10, #704]
   3a230:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a234:	add	w11, w9, w8
   3a238:	cmp	w11, #0x21
   3a23c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a240:	ldr	w11, [sp]
   3a244:	ldr	w12, [x10, #712]
   3a248:	ldr	w10, [x10, #716]
   3a24c:	b	3a3a4 <aarch64_opcode_encode@@Base+0xde4>
   3a250:	ldrb	w8, [sp, #28]
   3a254:	cmp	w8, #0x7
   3a258:	b.ne	3aef0 <aarch64_opcode_encode@@Base+0x1930>  // b.any
   3a25c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3a260:	ldr	x8, [x8, #3944]
   3a264:	ldr	w9, [x8, #68]
   3a268:	cmp	w9, #0x1
   3a26c:	b.lt	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tstop
   3a270:	ldr	w8, [x8, #64]
   3a274:	cmp	w8, #0x20
   3a278:	b.cs	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.hs, b.nlast
   3a27c:	ldr	w9, [sp]
   3a280:	mov	w10, #0x1                   	// #1
   3a284:	lsl	w8, w10, w8
   3a288:	orr	w8, w9, w8
   3a28c:	b	3a3c8 <aarch64_opcode_encode@@Base+0xe08>
   3a290:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a294:	ldr	x10, [x10, #3944]
   3a298:	ldr	w8, [x10, #612]
   3a29c:	sub	w9, w8, #0x1
   3a2a0:	cmp	w9, #0x1e
   3a2a4:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a2a8:	ldr	w9, [x10, #608]
   3a2ac:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a2b0:	add	w11, w9, w8
   3a2b4:	cmp	w11, #0x21
   3a2b8:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a2bc:	ldr	w11, [sp]
   3a2c0:	ldr	w12, [x10, #568]
   3a2c4:	ldr	w10, [x10, #572]
   3a2c8:	b	3a3a4 <aarch64_opcode_encode@@Base+0xde4>
   3a2cc:	ldrb	w8, [sp, #28]
   3a2d0:	sub	w8, w8, #0x6
   3a2d4:	cmp	w8, #0x3
   3a2d8:	b.cs	3a940 <aarch64_opcode_encode@@Base+0x1380>  // b.hs, b.nlast
   3a2dc:	adrp	x9, 56000 <floatformat_from_double@@Base+0x4f8>
   3a2e0:	sxtb	x8, w8
   3a2e4:	add	x9, x9, #0x354
   3a2e8:	ldr	w8, [x9, x8, lsl #2]
   3a2ec:	ldr	w9, [sp]
   3a2f0:	orr	w8, w9, w8
   3a2f4:	b	3a3c8 <aarch64_opcode_encode@@Base+0xe08>
   3a2f8:	mov	x0, x23
   3a2fc:	bl	35230 <aarch64_num_of_operands@plt>
   3a300:	ldr	x11, [sp, #8]
   3a304:	mov	x10, sp
   3a308:	mov	x8, xzr
   3a30c:	mov	w9, w0
   3a310:	add	x10, x10, #0x1c
   3a314:	add	x11, x11, #0x38
   3a318:	cmp	w9, #0x1
   3a31c:	b.lt	3a34c <aarch64_opcode_encode@@Base+0xd8c>  // b.tstop
   3a320:	mov	x12, xzr
   3a324:	mov	x13, x10
   3a328:	ldrb	w14, [x11, x12]
   3a32c:	ldrb	w15, [x13]
   3a330:	cmp	w14, w15
   3a334:	b.ne	3a350 <aarch64_opcode_encode@@Base+0xd90>  // b.any
   3a338:	add	x12, x12, #0x1
   3a33c:	cmp	x9, x12
   3a340:	add	x13, x13, #0x38
   3a344:	b.ne	3a328 <aarch64_opcode_encode@@Base+0xd68>  // b.any
   3a348:	b	3aa8c <aarch64_opcode_encode@@Base+0x14cc>
   3a34c:	mov	w12, wzr
   3a350:	cmp	w12, w9
   3a354:	b.eq	3aa8c <aarch64_opcode_encode@@Base+0x14cc>  // b.none
   3a358:	add	x8, x8, #0x1
   3a35c:	cmp	x8, #0xa
   3a360:	add	x11, x11, #0x6
   3a364:	b.ne	3a318 <aarch64_opcode_encode@@Base+0xd58>  // b.any
   3a368:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a36c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a370:	ldr	x10, [x10, #3944]
   3a374:	ldr	w8, [x10, #708]
   3a378:	sub	w9, w8, #0x1
   3a37c:	cmp	w9, #0x1e
   3a380:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a384:	ldr	w9, [x10, #704]
   3a388:	tbnz	w9, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a38c:	add	w11, w9, w8
   3a390:	cmp	w11, #0x21
   3a394:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a398:	ldr	w11, [sp]
   3a39c:	ldr	w12, [x10, #688]
   3a3a0:	ldr	w10, [x10, #692]
   3a3a4:	mov	w13, #0xffffffff            	// #-1
   3a3a8:	mov	w14, #0xffffffff            	// #-1
   3a3ac:	lsr	w12, w11, w12
   3a3b0:	lsl	w10, w13, w10
   3a3b4:	bic	w10, w12, w10
   3a3b8:	lsl	w8, w14, w8
   3a3bc:	bic	w8, w10, w8
   3a3c0:	lsl	w8, w8, w9
   3a3c4:	orr	w8, w8, w11
   3a3c8:	str	w8, [sp]
   3a3cc:	ldr	x0, [sp, #8]
   3a3d0:	ldr	w8, [x0, #16]
   3a3d4:	sub	w8, w8, #0x47
   3a3d8:	cmp	w8, #0x12
   3a3dc:	b.hi	3a9e0 <aarch64_opcode_encode@@Base+0x1420>  // b.pmore
   3a3e0:	adrp	x9, 56000 <floatformat_from_double@@Base+0x4f8>
   3a3e4:	add	x9, x9, #0x322
   3a3e8:	adr	x10, 3a3f8 <aarch64_opcode_encode@@Base+0xe38>
   3a3ec:	ldrh	w11, [x9, x8, lsl #1]
   3a3f0:	add	x10, x10, x11, lsl #2
   3a3f4:	br	x10
   3a3f8:	bl	35230 <aarch64_num_of_operands@plt>
   3a3fc:	ldr	x11, [sp, #8]
   3a400:	mov	x10, sp
   3a404:	mov	x8, xzr
   3a408:	mov	w9, w0
   3a40c:	add	x10, x10, #0x1c
   3a410:	add	x11, x11, #0x38
   3a414:	cmp	w9, #0x1
   3a418:	b.lt	3a448 <aarch64_opcode_encode@@Base+0xe88>  // b.tstop
   3a41c:	mov	x12, xzr
   3a420:	mov	x13, x10
   3a424:	ldrb	w14, [x11, x12]
   3a428:	ldrb	w15, [x13]
   3a42c:	cmp	w14, w15
   3a430:	b.ne	3a44c <aarch64_opcode_encode@@Base+0xe8c>  // b.any
   3a434:	add	x12, x12, #0x1
   3a438:	cmp	x9, x12
   3a43c:	add	x13, x13, #0x38
   3a440:	b.ne	3a424 <aarch64_opcode_encode@@Base+0xe64>  // b.any
   3a444:	b	3a4fc <aarch64_opcode_encode@@Base+0xf3c>
   3a448:	mov	w12, wzr
   3a44c:	cmp	w12, w9
   3a450:	b.eq	3a4fc <aarch64_opcode_encode@@Base+0xf3c>  // b.none
   3a454:	add	x8, x8, #0x1
   3a458:	cmp	x8, #0xa
   3a45c:	add	x11, x11, #0x6
   3a460:	b.ne	3a414 <aarch64_opcode_encode@@Base+0xe54>  // b.any
   3a464:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a468:	bl	35230 <aarch64_num_of_operands@plt>
   3a46c:	ldr	x11, [sp, #8]
   3a470:	mov	x10, sp
   3a474:	mov	x8, xzr
   3a478:	mov	w9, w0
   3a47c:	add	x10, x10, #0x1c
   3a480:	add	x11, x11, #0x38
   3a484:	cmp	w9, #0x1
   3a488:	b.lt	3a4b8 <aarch64_opcode_encode@@Base+0xef8>  // b.tstop
   3a48c:	mov	x12, xzr
   3a490:	mov	x13, x10
   3a494:	ldrb	w14, [x11, x12]
   3a498:	ldrb	w15, [x13]
   3a49c:	cmp	w14, w15
   3a4a0:	b.ne	3a4bc <aarch64_opcode_encode@@Base+0xefc>  // b.any
   3a4a4:	add	x12, x12, #0x1
   3a4a8:	cmp	x9, x12
   3a4ac:	add	x13, x13, #0x38
   3a4b0:	b.ne	3a494 <aarch64_opcode_encode@@Base+0xed4>  // b.any
   3a4b4:	b	3a4d8 <aarch64_opcode_encode@@Base+0xf18>
   3a4b8:	mov	w12, wzr
   3a4bc:	cmp	w12, w9
   3a4c0:	b.eq	3a4d8 <aarch64_opcode_encode@@Base+0xf18>  // b.none
   3a4c4:	add	x8, x8, #0x1
   3a4c8:	cmp	x8, #0xa
   3a4cc:	add	x11, x11, #0x6
   3a4d0:	b.ne	3a484 <aarch64_opcode_encode@@Base+0xec4>  // b.any
   3a4d4:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a4d8:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a4dc:	ldr	x10, [x10, #3944]
   3a4e0:	ldr	w9, [x10, #900]
   3a4e4:	sub	w11, w9, #0x1
   3a4e8:	cmp	w11, #0x1e
   3a4ec:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a4f0:	ldr	w10, [x10, #896]
   3a4f4:	tbz	w10, #31, 3a9b8 <aarch64_opcode_encode@@Base+0x13f8>
   3a4f8:	b	3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a4fc:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a500:	ldr	x10, [x10, #3944]
   3a504:	ldr	w9, [x10, #68]
   3a508:	sub	w11, w9, #0x1
   3a50c:	cmp	w11, #0x1e
   3a510:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a514:	ldr	w10, [x10, #64]
   3a518:	tbz	w10, #31, 3a9b8 <aarch64_opcode_encode@@Base+0x13f8>
   3a51c:	b	3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a520:	bl	35230 <aarch64_num_of_operands@plt>
   3a524:	ldr	x11, [sp, #8]
   3a528:	mov	x10, sp
   3a52c:	mov	x8, xzr
   3a530:	mov	w9, w0
   3a534:	add	x10, x10, #0x1c
   3a538:	add	x11, x11, #0x38
   3a53c:	cmp	w9, #0x1
   3a540:	b.lt	3a570 <aarch64_opcode_encode@@Base+0xfb0>  // b.tstop
   3a544:	mov	x12, xzr
   3a548:	mov	x13, x10
   3a54c:	ldrb	w14, [x11, x12]
   3a550:	ldrb	w15, [x13]
   3a554:	cmp	w14, w15
   3a558:	b.ne	3a574 <aarch64_opcode_encode@@Base+0xfb4>  // b.any
   3a55c:	add	x12, x12, #0x1
   3a560:	cmp	x9, x12
   3a564:	add	x13, x13, #0x38
   3a568:	b.ne	3a54c <aarch64_opcode_encode@@Base+0xf8c>  // b.any
   3a56c:	b	3a590 <aarch64_opcode_encode@@Base+0xfd0>
   3a570:	mov	w12, wzr
   3a574:	cmp	w12, w9
   3a578:	b.eq	3a590 <aarch64_opcode_encode@@Base+0xfd0>  // b.none
   3a57c:	add	x8, x8, #0x1
   3a580:	cmp	x8, #0xa
   3a584:	add	x11, x11, #0x6
   3a588:	b.ne	3a53c <aarch64_opcode_encode@@Base+0xf7c>  // b.any
   3a58c:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a590:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a594:	ldr	x10, [x10, #3944]
   3a598:	add	w11, w8, #0x1
   3a59c:	cmp	w11, #0x2
   3a5a0:	mov	w11, #0x3                   	// #3
   3a5a4:	ldr	w9, [x10, #68]
   3a5a8:	csinc	w8, w11, w8, eq  // eq = none
   3a5ac:	sub	w11, w9, #0x1
   3a5b0:	cmp	w11, #0x1e
   3a5b4:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a5b8:	ldr	w10, [x10, #64]
   3a5bc:	tbnz	w10, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a5c0:	add	w11, w10, w9
   3a5c4:	cmp	w11, #0x21
   3a5c8:	b.lt	3a974 <aarch64_opcode_encode@@Base+0x13b4>  // b.tstop
   3a5cc:	b	3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a5d0:	bl	35230 <aarch64_num_of_operands@plt>
   3a5d4:	ldr	x11, [sp, #8]
   3a5d8:	mov	x10, sp
   3a5dc:	mov	x8, xzr
   3a5e0:	mov	w9, w0
   3a5e4:	add	x10, x10, #0x1c
   3a5e8:	add	x11, x11, #0x38
   3a5ec:	cmp	w9, #0x1
   3a5f0:	b.lt	3a620 <aarch64_opcode_encode@@Base+0x1060>  // b.tstop
   3a5f4:	mov	x12, xzr
   3a5f8:	mov	x13, x10
   3a5fc:	ldrb	w14, [x11, x12]
   3a600:	ldrb	w15, [x13]
   3a604:	cmp	w14, w15
   3a608:	b.ne	3a624 <aarch64_opcode_encode@@Base+0x1064>  // b.any
   3a60c:	add	x12, x12, #0x1
   3a610:	cmp	x9, x12
   3a614:	add	x13, x13, #0x38
   3a618:	b.ne	3a5fc <aarch64_opcode_encode@@Base+0x103c>  // b.any
   3a61c:	b	3a6b0 <aarch64_opcode_encode@@Base+0x10f0>
   3a620:	mov	w12, wzr
   3a624:	cmp	w12, w9
   3a628:	b.eq	3a6b0 <aarch64_opcode_encode@@Base+0x10f0>  // b.none
   3a62c:	add	x8, x8, #0x1
   3a630:	cmp	x8, #0xa
   3a634:	add	x11, x11, #0x6
   3a638:	b.ne	3a5ec <aarch64_opcode_encode@@Base+0x102c>  // b.any
   3a63c:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a640:	bl	35230 <aarch64_num_of_operands@plt>
   3a644:	ldr	x11, [sp, #8]
   3a648:	mov	x10, sp
   3a64c:	mov	x8, xzr
   3a650:	mov	w9, w0
   3a654:	add	x10, x10, #0x1c
   3a658:	add	x11, x11, #0x38
   3a65c:	cmp	w9, #0x1
   3a660:	b.lt	3a690 <aarch64_opcode_encode@@Base+0x10d0>  // b.tstop
   3a664:	mov	x12, xzr
   3a668:	mov	x13, x10
   3a66c:	ldrb	w14, [x11, x12]
   3a670:	ldrb	w15, [x13]
   3a674:	cmp	w14, w15
   3a678:	b.ne	3a694 <aarch64_opcode_encode@@Base+0x10d4>  // b.any
   3a67c:	add	x12, x12, #0x1
   3a680:	cmp	x9, x12
   3a684:	add	x13, x13, #0x38
   3a688:	b.ne	3a66c <aarch64_opcode_encode@@Base+0x10ac>  // b.any
   3a68c:	b	3a73c <aarch64_opcode_encode@@Base+0x117c>
   3a690:	mov	w12, wzr
   3a694:	cmp	w12, w9
   3a698:	b.eq	3a73c <aarch64_opcode_encode@@Base+0x117c>  // b.none
   3a69c:	add	x8, x8, #0x1
   3a6a0:	cmp	x8, #0xa
   3a6a4:	add	x11, x11, #0x6
   3a6a8:	b.ne	3a65c <aarch64_opcode_encode@@Base+0x109c>  // b.any
   3a6ac:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a6b0:	mov	w9, #0x1                   	// #1
   3a6b4:	lsl	w1, w9, w8
   3a6b8:	mov	x0, sp
   3a6bc:	mov	w3, #0x2                   	// #2
   3a6c0:	mov	w4, #0x76                  	// #118
   3a6c4:	mov	w5, #0x70                  	// #112
   3a6c8:	b	3aa24 <aarch64_opcode_encode@@Base+0x1464>
   3a6cc:	bl	35230 <aarch64_num_of_operands@plt>
   3a6d0:	ldr	x11, [sp, #8]
   3a6d4:	mov	x10, sp
   3a6d8:	mov	x8, xzr
   3a6dc:	mov	w9, w0
   3a6e0:	add	x10, x10, #0x1c
   3a6e4:	add	x11, x11, #0x38
   3a6e8:	cmp	w9, #0x1
   3a6ec:	b.lt	3a71c <aarch64_opcode_encode@@Base+0x115c>  // b.tstop
   3a6f0:	mov	x12, xzr
   3a6f4:	mov	x13, x10
   3a6f8:	ldrb	w14, [x11, x12]
   3a6fc:	ldrb	w15, [x13]
   3a700:	cmp	w14, w15
   3a704:	b.ne	3a720 <aarch64_opcode_encode@@Base+0x1160>  // b.any
   3a708:	add	x12, x12, #0x1
   3a70c:	cmp	x9, x12
   3a710:	add	x13, x13, #0x38
   3a714:	b.ne	3a6f8 <aarch64_opcode_encode@@Base+0x1138>  // b.any
   3a718:	b	3a7d0 <aarch64_opcode_encode@@Base+0x1210>
   3a71c:	mov	w12, wzr
   3a720:	cmp	w12, w9
   3a724:	b.eq	3a7d0 <aarch64_opcode_encode@@Base+0x1210>  // b.none
   3a728:	add	x8, x8, #0x1
   3a72c:	cmp	x8, #0xa
   3a730:	add	x11, x11, #0x6
   3a734:	b.ne	3a6e8 <aarch64_opcode_encode@@Base+0x1128>  // b.any
   3a738:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a73c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a740:	ldr	x10, [x10, #3944]
   3a744:	ldr	w9, [x10, #68]
   3a748:	sub	w11, w9, #0x1
   3a74c:	cmp	w11, #0x1e
   3a750:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a754:	ldr	w10, [x10, #64]
   3a758:	tbz	w10, #31, 3a964 <aarch64_opcode_encode@@Base+0x13a4>
   3a75c:	b	3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a760:	bl	35230 <aarch64_num_of_operands@plt>
   3a764:	ldr	x11, [sp, #8]
   3a768:	mov	x10, sp
   3a76c:	mov	x8, xzr
   3a770:	mov	w9, w0
   3a774:	add	x10, x10, #0x1c
   3a778:	add	x11, x11, #0x38
   3a77c:	cmp	w9, #0x1
   3a780:	b.lt	3a7b0 <aarch64_opcode_encode@@Base+0x11f0>  // b.tstop
   3a784:	mov	x12, xzr
   3a788:	mov	x13, x10
   3a78c:	ldrb	w14, [x11, x12]
   3a790:	ldrb	w15, [x13]
   3a794:	cmp	w14, w15
   3a798:	b.ne	3a7b4 <aarch64_opcode_encode@@Base+0x11f4>  // b.any
   3a79c:	add	x12, x12, #0x1
   3a7a0:	cmp	x9, x12
   3a7a4:	add	x13, x13, #0x38
   3a7a8:	b.ne	3a78c <aarch64_opcode_encode@@Base+0x11cc>  // b.any
   3a7ac:	b	3a944 <aarch64_opcode_encode@@Base+0x1384>
   3a7b0:	mov	w12, wzr
   3a7b4:	cmp	w12, w9
   3a7b8:	b.eq	3a944 <aarch64_opcode_encode@@Base+0x1384>  // b.none
   3a7bc:	add	x8, x8, #0x1
   3a7c0:	cmp	x8, #0xa
   3a7c4:	add	x11, x11, #0x6
   3a7c8:	b.ne	3a77c <aarch64_opcode_encode@@Base+0x11bc>  // b.any
   3a7cc:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a7d0:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a7d4:	ldr	x10, [x10, #3944]
   3a7d8:	ldr	w9, [x10, #540]
   3a7dc:	sub	w11, w9, #0x1
   3a7e0:	cmp	w11, #0x1e
   3a7e4:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a7e8:	ldr	w10, [x10, #536]
   3a7ec:	tbz	w10, #31, 3a9b8 <aarch64_opcode_encode@@Base+0x13f8>
   3a7f0:	b	3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a7f4:	bl	35230 <aarch64_num_of_operands@plt>
   3a7f8:	ldr	x10, [sp, #8]
   3a7fc:	mov	x9, sp
   3a800:	mov	x1, xzr
   3a804:	mov	w8, w0
   3a808:	add	x9, x9, #0x1c
   3a80c:	add	x10, x10, #0x38
   3a810:	cmp	w8, #0x1
   3a814:	b.lt	3a844 <aarch64_opcode_encode@@Base+0x1284>  // b.tstop
   3a818:	mov	x11, xzr
   3a81c:	mov	x12, x9
   3a820:	ldrb	w13, [x10, x11]
   3a824:	ldrb	w14, [x12]
   3a828:	cmp	w13, w14
   3a82c:	b.ne	3a848 <aarch64_opcode_encode@@Base+0x1288>  // b.any
   3a830:	add	x11, x11, #0x1
   3a834:	cmp	x8, x11
   3a838:	add	x12, x12, #0x38
   3a83c:	b.ne	3a820 <aarch64_opcode_encode@@Base+0x1260>  // b.any
   3a840:	b	3a988 <aarch64_opcode_encode@@Base+0x13c8>
   3a844:	mov	w11, wzr
   3a848:	cmp	w11, w8
   3a84c:	b.eq	3a988 <aarch64_opcode_encode@@Base+0x13c8>  // b.none
   3a850:	add	x1, x1, #0x1
   3a854:	cmp	x1, #0xa
   3a858:	add	x10, x10, #0x6
   3a85c:	b.ne	3a810 <aarch64_opcode_encode@@Base+0x1250>  // b.any
   3a860:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a864:	bl	35230 <aarch64_num_of_operands@plt>
   3a868:	ldr	x11, [sp, #8]
   3a86c:	mov	x10, sp
   3a870:	mov	x8, xzr
   3a874:	mov	w9, w0
   3a878:	add	x10, x10, #0x1c
   3a87c:	add	x11, x11, #0x38
   3a880:	cmp	w9, #0x1
   3a884:	b.lt	3a8b4 <aarch64_opcode_encode@@Base+0x12f4>  // b.tstop
   3a888:	mov	x12, xzr
   3a88c:	mov	x13, x10
   3a890:	ldrb	w14, [x11, x12]
   3a894:	ldrb	w15, [x13]
   3a898:	cmp	w14, w15
   3a89c:	b.ne	3a8b8 <aarch64_opcode_encode@@Base+0x12f8>  // b.any
   3a8a0:	add	x12, x12, #0x1
   3a8a4:	cmp	x9, x12
   3a8a8:	add	x13, x13, #0x38
   3a8ac:	b.ne	3a890 <aarch64_opcode_encode@@Base+0x12d0>  // b.any
   3a8b0:	b	3a998 <aarch64_opcode_encode@@Base+0x13d8>
   3a8b4:	mov	w12, wzr
   3a8b8:	cmp	w12, w9
   3a8bc:	b.eq	3a998 <aarch64_opcode_encode@@Base+0x13d8>  // b.none
   3a8c0:	add	x8, x8, #0x1
   3a8c4:	cmp	x8, #0xa
   3a8c8:	add	x11, x11, #0x6
   3a8cc:	b.ne	3a880 <aarch64_opcode_encode@@Base+0x12c0>  // b.any
   3a8d0:	b	3a940 <aarch64_opcode_encode@@Base+0x1380>
   3a8d4:	bl	35230 <aarch64_num_of_operands@plt>
   3a8d8:	ldr	x10, [sp, #8]
   3a8dc:	mov	x9, sp
   3a8e0:	mov	x1, xzr
   3a8e4:	mov	w8, w0
   3a8e8:	add	x9, x9, #0x1c
   3a8ec:	add	x10, x10, #0x38
   3a8f0:	cmp	w8, #0x1
   3a8f4:	b.lt	3a924 <aarch64_opcode_encode@@Base+0x1364>  // b.tstop
   3a8f8:	mov	x11, xzr
   3a8fc:	mov	x12, x9
   3a900:	ldrb	w13, [x10, x11]
   3a904:	ldrb	w14, [x12]
   3a908:	cmp	w13, w14
   3a90c:	b.ne	3a928 <aarch64_opcode_encode@@Base+0x1368>  // b.any
   3a910:	add	x11, x11, #0x1
   3a914:	cmp	x8, x11
   3a918:	add	x12, x12, #0x38
   3a91c:	b.ne	3a900 <aarch64_opcode_encode@@Base+0x1340>  // b.any
   3a920:	b	3aa14 <aarch64_opcode_encode@@Base+0x1454>
   3a924:	mov	w11, wzr
   3a928:	cmp	w11, w8
   3a92c:	b.eq	3aa14 <aarch64_opcode_encode@@Base+0x1454>  // b.none
   3a930:	add	x1, x1, #0x1
   3a934:	cmp	x1, #0xa
   3a938:	add	x10, x10, #0x6
   3a93c:	b.ne	3a8f0 <aarch64_opcode_encode@@Base+0x1330>  // b.any
   3a940:	bl	35700 <abort@plt>
   3a944:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a948:	ldr	x10, [x10, #3944]
   3a94c:	ldr	w9, [x10, #908]
   3a950:	sub	w11, w9, #0x1
   3a954:	cmp	w11, #0x1e
   3a958:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a95c:	ldr	w10, [x10, #904]
   3a960:	tbnz	w10, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a964:	add	w11, w10, w9
   3a968:	cmp	w11, #0x21
   3a96c:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a970:	add	w8, w8, #0x1
   3a974:	ldr	w12, [sp]
   3a978:	mov	w11, #0xffffffff            	// #-1
   3a97c:	lsl	w9, w11, w9
   3a980:	bic	w8, w8, w9
   3a984:	b	3a9d4 <aarch64_opcode_encode@@Base+0x1414>
   3a988:	mov	x0, sp
   3a98c:	mov	w3, #0x2                   	// #2
   3a990:	mov	w4, #0x44                  	// #68
   3a994:	b	3aa20 <aarch64_opcode_encode@@Base+0x1460>
   3a998:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3a99c:	ldr	x10, [x10, #3944]
   3a9a0:	ldr	w9, [x10, #916]
   3a9a4:	sub	w11, w9, #0x1
   3a9a8:	cmp	w11, #0x1e
   3a9ac:	b.hi	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.pmore
   3a9b0:	ldr	w10, [x10, #912]
   3a9b4:	tbnz	w10, #31, 3ad30 <aarch64_opcode_encode@@Base+0x1770>
   3a9b8:	add	w11, w10, w9
   3a9bc:	cmp	w11, #0x21
   3a9c0:	b.ge	3ad30 <aarch64_opcode_encode@@Base+0x1770>  // b.tcont
   3a9c4:	ldr	w12, [sp]
   3a9c8:	mov	w11, #0xffffffff            	// #-1
   3a9cc:	lsl	w9, w11, w9
   3a9d0:	bic	w8, w8, w9
   3a9d4:	lsl	w8, w8, w10
   3a9d8:	orr	w8, w12, w8
   3a9dc:	str	w8, [sp]
   3a9e0:	ldr	x8, [x22, #136]
   3a9e4:	cbz	x8, 3aa34 <aarch64_opcode_encode@@Base+0x1474>
   3a9e8:	ldr	w1, [x19]
   3a9ec:	mov	x0, sp
   3a9f0:	mov	w3, #0x1                   	// #1
   3a9f4:	mov	x2, xzr
   3a9f8:	mov	x4, x21
   3a9fc:	mov	x5, x20
   3aa00:	blr	x8
   3aa04:	sub	w8, w0, #0x1
   3aa08:	cmp	w8, #0x3
   3aa0c:	b.cs	3aa34 <aarch64_opcode_encode@@Base+0x1474>  // b.hs, b.nlast
   3aa10:	b	3aa5c <aarch64_opcode_encode@@Base+0x149c>
   3aa14:	mov	x0, sp
   3aa18:	mov	w3, #0x2                   	// #2
   3aa1c:	mov	w4, #0x45                  	// #69
   3aa20:	mov	w5, #0x8                   	// #8
   3aa24:	mov	w2, wzr
   3aa28:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3aa2c:	ldr	x8, [x22, #136]
   3aa30:	cbnz	x8, 3a9e8 <aarch64_opcode_encode@@Base+0x1428>
   3aa34:	ldr	w1, [x19]
   3aa38:	mov	x0, sp
   3aa3c:	mov	w3, #0x1                   	// #1
   3aa40:	mov	x2, xzr
   3aa44:	mov	x4, x21
   3aa48:	mov	x5, x20
   3aa4c:	bl	35310 <verify_constraints@plt>
   3aa50:	sub	w8, w0, #0x1
   3aa54:	cmp	w8, #0x3
   3aa58:	b.cs	3aa64 <aarch64_opcode_encode@@Base+0x14a4>  // b.hs, b.nlast
   3aa5c:	mov	w0, wzr
   3aa60:	b	3aa70 <aarch64_opcode_encode@@Base+0x14b0>
   3aa64:	ldr	w8, [sp]
   3aa68:	mov	w0, #0x1                   	// #1
   3aa6c:	str	w8, [x19]
   3aa70:	ldp	x20, x19, [sp, #432]
   3aa74:	ldp	x22, x21, [sp, #416]
   3aa78:	ldp	x24, x23, [sp, #400]
   3aa7c:	ldr	x28, [sp, #384]
   3aa80:	ldp	x29, x30, [sp, #368]
   3aa84:	add	sp, sp, #0x1c0
   3aa88:	ret
   3aa8c:	mov	w9, #0x1                   	// #1
   3aa90:	lsl	w1, w9, w8
   3aa94:	mov	x0, sp
   3aa98:	mov	w3, #0x2                   	// #2
   3aa9c:	mov	w4, #0x2b                  	// #43
   3aaa0:	mov	w5, #0x74                  	// #116
   3aaa4:	mov	w2, wzr
   3aaa8:	bl	36504 <aarch64_ins_reglane@@Base+0x388>
   3aaac:	b	3a3cc <aarch64_opcode_encode@@Base+0xe0c>
   3aab0:	ldp	q0, q1, [sp, #80]
   3aab4:	ldr	q2, [sp, #112]
   3aab8:	ldr	x9, [sp, #128]
   3aabc:	mov	w10, #0x3                   	// #3
   3aac0:	stp	q0, q1, [sp, #192]
   3aac4:	ldur	q0, [sp, #24]
   3aac8:	str	q2, [sp, #224]
   3aacc:	str	x9, [sp, #240]
   3aad0:	str	w10, [sp, #200]
   3aad4:	stur	q0, [x8, #136]
   3aad8:	ldur	q0, [sp, #40]
   3aadc:	mov	w9, #0x2                   	// #2
   3aae0:	stur	q0, [x8, #152]
   3aae4:	ldur	q0, [sp, #56]
   3aae8:	stur	q0, [x8, #168]
   3aaec:	ldr	x8, [sp, #72]
   3aaf0:	ldr	x10, [sp, #72]
   3aaf4:	ldur	q0, [sp, #24]
   3aaf8:	ldur	q1, [sp, #40]
   3aafc:	ldur	q2, [sp, #56]
   3ab00:	ldr	x0, [sp, #208]
   3ab04:	str	x8, [sp, #184]
   3ab08:	mov	w8, #0x1                   	// #1
   3ab0c:	str	x10, [sp, #128]
   3ab10:	mov	w10, #0x1f                  	// #31
   3ab14:	stp	q0, q1, [sp, #80]
   3ab18:	str	w8, [sp, #88]
   3ab1c:	str	q2, [sp, #112]
   3ab20:	str	w10, [sp, #96]
   3ab24:	str	w9, [sp, #144]
   3ab28:	str	w10, [sp, #152]
   3ab2c:	bl	358e0 <get_inverted_cond@plt>
   3ab30:	str	x0, [sp, #208]
   3ab34:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ab38:	cmp	w9, #0x25
   3ab3c:	b.eq	3ac78 <aarch64_opcode_encode@@Base+0x16b8>  // b.none
   3ab40:	cmp	w9, #0x24
   3ab44:	b.ne	3af10 <aarch64_opcode_encode@@Base+0x1950>  // b.any
   3ab48:	ldr	x22, [sp, #96]
   3ab4c:	b	3ac80 <aarch64_opcode_encode@@Base+0x16c0>
   3ab50:	ldrb	w8, [sp, #140]
   3ab54:	mov	w9, #0x3f                  	// #63
   3ab58:	cmp	w8, #0x1d
   3ab5c:	mov	w8, #0x1f                  	// #31
   3ab60:	csel	x8, x8, x9, eq  // eq = none
   3ab64:	str	x8, [sp, #208]
   3ab68:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ab6c:	ldur	q0, [x8, #136]
   3ab70:	ldr	x9, [sp, #184]
   3ab74:	ldr	q1, [sp, #80]
   3ab78:	mov	w10, #0x3                   	// #3
   3ab7c:	str	q0, [sp, #192]
   3ab80:	ldur	q0, [x8, #152]
   3ab84:	mov	w11, #0x1f                  	// #31
   3ab88:	str	q0, [sp, #208]
   3ab8c:	ldur	q0, [x8, #168]
   3ab90:	str	x9, [sp, #240]
   3ab94:	str	w10, [sp, #200]
   3ab98:	mov	w9, #0x2                   	// #2
   3ab9c:	str	q0, [sp, #224]
   3aba0:	stur	q1, [x8, #136]
   3aba4:	ldr	q0, [sp, #96]
   3aba8:	mov	w10, #0x1                   	// #1
   3abac:	stur	q0, [x8, #152]
   3abb0:	ldr	q0, [sp, #112]
   3abb4:	stur	q0, [x8, #168]
   3abb8:	str	w9, [sp, #144]
   3abbc:	ldr	x9, [sp, #72]
   3abc0:	ldr	x8, [sp, #128]
   3abc4:	ldur	q0, [sp, #24]
   3abc8:	ldur	q1, [sp, #40]
   3abcc:	str	x9, [sp, #128]
   3abd0:	ldrb	w9, [sp, #140]
   3abd4:	ldur	q2, [sp, #56]
   3abd8:	stp	q0, q1, [sp, #80]
   3abdc:	str	w10, [sp, #88]
   3abe0:	cmp	w9, #0x1d
   3abe4:	ldr	x9, [sp, #152]
   3abe8:	ldr	x10, [sp, #208]
   3abec:	str	x8, [sp, #184]
   3abf0:	mov	w8, #0x3f                  	// #63
   3abf4:	neg	x9, x9
   3abf8:	csel	x8, x11, x8, eq  // eq = none
   3abfc:	sub	x10, x10, #0x1
   3ac00:	and	x8, x8, x9
   3ac04:	str	q2, [sp, #112]
   3ac08:	str	w11, [sp, #96]
   3ac0c:	str	x8, [sp, #152]
   3ac10:	str	x10, [sp, #208]
   3ac14:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ac18:	ldr	q0, [sp, #80]
   3ac1c:	mov	w9, #0x2                   	// #2
   3ac20:	mov	w10, #0x1f                  	// #31
   3ac24:	stur	q0, [x8, #136]
   3ac28:	ldr	q0, [sp, #96]
   3ac2c:	stur	q0, [x8, #152]
   3ac30:	ldr	q0, [sp, #112]
   3ac34:	stur	q0, [x8, #168]
   3ac38:	ldr	x8, [sp, #128]
   3ac3c:	ldrb	w11, [sp, #128]
   3ac40:	str	w9, [sp, #144]
   3ac44:	str	w10, [sp, #96]
   3ac48:	str	x8, [sp, #184]
   3ac4c:	and	w8, w11, #0xfe
   3ac50:	strb	w8, [sp, #128]
   3ac54:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ac58:	ldrb	w9, [sp, #140]
   3ac5c:	ldr	x8, [sp, #152]
   3ac60:	cmp	w9, #0x1d
   3ac64:	neg	x9, x8
   3ac68:	b.ne	3ad18 <aarch64_opcode_encode@@Base+0x1758>  // b.any
   3ac6c:	and	x9, x9, #0x1f
   3ac70:	mov	w10, #0x1f                  	// #31
   3ac74:	b	3ad20 <aarch64_opcode_encode@@Base+0x1760>
   3ac78:	ldr	x8, [sp, #96]
   3ac7c:	mvn	x22, x8
   3ac80:	ldrb	w8, [sp, #28]
   3ac84:	mov	w9, #0x46                  	// #70
   3ac88:	sub	x2, x29, #0x4
   3ac8c:	mov	x0, x22
   3ac90:	cmp	w8, #0x1
   3ac94:	cset	w1, eq  // eq = none
   3ac98:	str	w9, [sp, #80]
   3ac9c:	bl	35ab0 <aarch64_wide_constant_p@plt>
   3aca0:	cbz	w0, 3af30 <aarch64_opcode_encode@@Base+0x1970>
   3aca4:	ldur	w8, [x29, #-4]
   3aca8:	mov	w9, #0x5                   	// #5
   3acac:	str	w9, [sp, #112]
   3acb0:	lsr	x9, x22, x8
   3acb4:	and	x9, x9, #0xffff
   3acb8:	str	x9, [sp, #96]
   3acbc:	str	x8, [sp, #120]
   3acc0:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3acc4:	ldur	q0, [x8, #136]
   3acc8:	ldr	x9, [sp, #184]
   3accc:	str	q0, [sp, #192]
   3acd0:	ldur	q0, [x8, #152]
   3acd4:	str	q0, [sp, #208]
   3acd8:	ldur	q0, [x8, #168]
   3acdc:	str	x9, [sp, #240]
   3ace0:	mov	w9, #0x3                   	// #3
   3ace4:	str	w9, [sp, #200]
   3ace8:	str	q0, [sp, #224]
   3acec:	ldr	q0, [sp, #80]
   3acf0:	stur	q0, [x8, #136]
   3acf4:	ldr	q0, [sp, #96]
   3acf8:	mov	w9, #0x2                   	// #2
   3acfc:	stur	q0, [x8, #152]
   3ad00:	ldr	q0, [sp, #112]
   3ad04:	stur	q0, [x8, #168]
   3ad08:	ldr	x8, [sp, #128]
   3ad0c:	str	w9, [sp, #144]
   3ad10:	str	x8, [sp, #184]
   3ad14:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ad18:	and	x9, x9, #0x3f
   3ad1c:	mov	w10, #0x3f                  	// #63
   3ad20:	sub	x8, x10, x8
   3ad24:	str	x9, [sp, #152]
   3ad28:	str	x8, [sp, #208]
   3ad2c:	b	39730 <aarch64_opcode_encode@@Base+0x170>
   3ad30:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad34:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ad38:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ad3c:	add	x0, x0, #0xfe3
   3ad40:	add	x1, x1, #0x40
   3ad44:	add	x3, x3, #0x5c
   3ad48:	mov	w2, #0x16a                 	// #362
   3ad4c:	bl	35b30 <__assert_fail@plt>
   3ad50:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad54:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad58:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad5c:	add	x0, x0, #0xf68
   3ad60:	add	x1, x1, #0x36f
   3ad64:	add	x3, x3, #0xec1
   3ad68:	mov	w2, #0x7e5                 	// #2021
   3ad6c:	bl	35b30 <__assert_fail@plt>
   3ad70:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad74:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad78:	adrp	x3, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad7c:	add	x0, x0, #0xe92
   3ad80:	add	x1, x1, #0x36f
   3ad84:	add	x3, x3, #0xec1
   3ad88:	mov	w2, #0x7cb                 	// #1995
   3ad8c:	bl	35b30 <__assert_fail@plt>
   3ad90:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ad94:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ad98:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ad9c:	add	x0, x0, #0x26e
   3ada0:	add	x1, x1, #0x36f
   3ada4:	add	x3, x3, #0x1f7
   3ada8:	mov	w2, #0x614                 	// #1556
   3adac:	bl	35b30 <__assert_fail@plt>
   3adb0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3adb4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3adb8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3adbc:	add	x0, x0, #0x2b4
   3adc0:	add	x1, x1, #0x40
   3adc4:	add	x3, x3, #0x3e3
   3adc8:	mov	w2, #0x1ab                 	// #427
   3adcc:	bl	35b30 <__assert_fail@plt>
   3add0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3add4:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3add8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3addc:	add	x0, x0, #0x2b4
   3ade0:	add	x1, x1, #0x36f
   3ade4:	add	x3, x3, #0x1f7
   3ade8:	mov	w2, #0x5fb                 	// #1531
   3adec:	bl	35b30 <__assert_fail@plt>
   3adf0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3adf4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3adf8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3adfc:	add	x0, x0, #0x2b4
   3ae00:	add	x1, x1, #0x40
   3ae04:	add	x3, x3, #0x465
   3ae08:	mov	w2, #0x1d4                 	// #468
   3ae0c:	bl	35b30 <__assert_fail@plt>
   3ae10:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ae14:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ae18:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ae1c:	add	x0, x0, #0x227
   3ae20:	add	x1, x1, #0x36f
   3ae24:	add	x3, x3, #0x1f7
   3ae28:	mov	w2, #0x605                 	// #1541
   3ae2c:	bl	35b30 <__assert_fail@plt>
   3ae30:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ae34:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ae38:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ae3c:	add	x0, x0, #0x30f
   3ae40:	add	x1, x1, #0x36f
   3ae44:	add	x3, x3, #0x1f7
   3ae48:	mov	w2, #0x622                 	// #1570
   3ae4c:	bl	35b30 <__assert_fail@plt>
   3ae50:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ae54:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ae58:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ae5c:	add	x0, x0, #0x324
   3ae60:	add	x1, x1, #0x36f
   3ae64:	add	x3, x3, #0x1f7
   3ae68:	mov	w2, #0x630                 	// #1584
   3ae6c:	bl	35b30 <__assert_fail@plt>
   3ae70:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ae74:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ae78:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ae7c:	add	x0, x0, #0x339
   3ae80:	add	x1, x1, #0x36f
   3ae84:	add	x3, x3, #0x1f7
   3ae88:	mov	w2, #0x632                 	// #1586
   3ae8c:	bl	35b30 <__assert_fail@plt>
   3ae90:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ae94:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3ae98:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ae9c:	add	x0, x0, #0x38f
   3aea0:	add	x1, x1, #0x36f
   3aea4:	add	x3, x3, #0x1f7
   3aea8:	mov	w2, #0x63d                 	// #1597
   3aeac:	bl	35b30 <__assert_fail@plt>
   3aeb0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3aeb4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3aeb8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3aebc:	add	x0, x0, #0x2b4
   3aec0:	add	x1, x1, #0x40
   3aec4:	add	x3, x3, #0x422
   3aec8:	mov	w2, #0x1c0                 	// #448
   3aecc:	bl	35b30 <__assert_fail@plt>
   3aed0:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3aed4:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3aed8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3aedc:	add	x0, x0, #0x4d4
   3aee0:	add	x1, x1, #0x36f
   3aee4:	add	x3, x3, #0x4ad
   3aee8:	mov	w2, #0x531                 	// #1329
   3aeec:	bl	35b30 <__assert_fail@plt>
   3aef0:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3aef4:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3aef8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3aefc:	add	x0, x0, #0x51d
   3af00:	add	x1, x1, #0x36f
   3af04:	add	x3, x3, #0x551
   3af08:	mov	w2, #0x53f                 	// #1343
   3af0c:	bl	35b30 <__assert_fail@plt>
   3af10:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3af14:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3af18:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3af1c:	add	x0, x0, #0x2b4
   3af20:	add	x1, x1, #0x36f
   3af24:	add	x3, x3, #0x1ca
   3af28:	mov	w2, #0x758                 	// #1880
   3af2c:	bl	35b30 <__assert_fail@plt>
   3af30:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3af34:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3af38:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3af3c:	add	x0, x0, #0x2b4
   3af40:	add	x1, x1, #0x36f
   3af44:	add	x3, x3, #0x1ca
   3af48:	mov	w2, #0x75e                 	// #1886
   3af4c:	bl	35b30 <__assert_fail@plt>

000000000003af50 <extract_fields@@Base>:
   3af50:	sub	sp, sp, #0xe0
   3af54:	stp	x29, x30, [sp, #208]
   3af58:	add	x29, sp, #0xd0
   3af5c:	mov	x9, #0xffffffffffffffd0    	// #-48
   3af60:	mov	x10, sp
   3af64:	movk	x9, #0xff80, lsl #32
   3af68:	sub	x11, x29, #0x50
   3af6c:	add	x10, x10, #0x80
   3af70:	add	x12, x29, #0x10
   3af74:	mov	w8, #0xffffffd0            	// #-48
   3af78:	add	x11, x11, #0x30
   3af7c:	stp	x10, x9, [x29, #-16]
   3af80:	mov	w10, #0xffffffd0            	// #-48
   3af84:	stp	x2, x3, [x29, #-80]
   3af88:	stp	x4, x5, [x29, #-64]
   3af8c:	stp	x6, x7, [x29, #-48]
   3af90:	stp	q1, q2, [sp, #16]
   3af94:	stp	q3, q4, [sp, #48]
   3af98:	str	q0, [sp]
   3af9c:	stp	q5, q6, [sp, #80]
   3afa0:	str	q7, [sp, #112]
   3afa4:	stp	x12, x11, [x29, #-32]
   3afa8:	tbz	w8, #31, 3afcc <extract_fields@@Base+0x7c>
   3afac:	add	w10, w8, #0x8
   3afb0:	cmn	w8, #0x8
   3afb4:	stur	w10, [x29, #-8]
   3afb8:	b.gt	3afcc <extract_fields@@Base+0x7c>
   3afbc:	ldur	x8, [x29, #-24]
   3afc0:	mov	x9, #0xffffffffffffffd0    	// #-48
   3afc4:	add	x8, x8, x9
   3afc8:	b	3afd8 <extract_fields@@Base+0x88>
   3afcc:	ldur	x8, [x29, #-32]
   3afd0:	add	x9, x8, #0x8
   3afd4:	stur	x9, [x29, #-32]
   3afd8:	ldr	w9, [x8]
   3afdc:	cmp	w9, #0x5
   3afe0:	b.hi	3b06c <extract_fields@@Base+0x11c>  // b.pmore
   3afe4:	mov	w8, wzr
   3afe8:	cbz	w9, 3b05c <extract_fields@@Base+0x10c>
   3afec:	adrp	x13, 9b000 <aarch64_operands@@Base+0x16c38>
   3aff0:	ldur	x11, [x29, #-24]
   3aff4:	ldr	x13, [x13, #3944]
   3aff8:	bic	w12, w0, w1
   3affc:	mov	w14, #0xffffffff            	// #-1
   3b000:	b	3b03c <extract_fields@@Base+0xec>
   3b004:	mov	w15, w10
   3b008:	ldur	x10, [x29, #-32]
   3b00c:	add	x16, x10, #0x8
   3b010:	stur	x16, [x29, #-32]
   3b014:	ldr	w10, [x10]
   3b018:	add	x10, x13, x10, lsl #3
   3b01c:	ldp	w10, w16, [x10]
   3b020:	lsl	w8, w8, w16
   3b024:	lsr	w10, w12, w10
   3b028:	lsl	w16, w14, w16
   3b02c:	bic	w10, w10, w16
   3b030:	orr	w8, w10, w8
   3b034:	mov	w10, w15
   3b038:	cbz	w9, 3b05c <extract_fields@@Base+0x10c>
   3b03c:	sub	w9, w9, #0x1
   3b040:	tbz	w10, #31, 3b004 <extract_fields@@Base+0xb4>
   3b044:	add	w15, w10, #0x8
   3b048:	cmn	w10, #0x8
   3b04c:	stur	w15, [x29, #-8]
   3b050:	b.gt	3b008 <extract_fields@@Base+0xb8>
   3b054:	add	x10, x11, w10, sxtw
   3b058:	b	3b014 <extract_fields@@Base+0xc4>
   3b05c:	ldp	x29, x30, [sp, #208]
   3b060:	mov	w0, w8
   3b064:	add	sp, sp, #0xe0
   3b068:	ret
   3b06c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3b070:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b074:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b078:	add	x0, x0, #0xf96
   3b07c:	add	x1, x1, #0x718
   3b080:	add	x3, x3, #0x734
   3b084:	mov	w2, #0x94                  	// #148
   3b088:	bl	35b30 <__assert_fail@plt>

000000000003b08c <aarch64_ext_regno@@Base>:
   3b08c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3b090:	ldr	w8, [x0, #20]
   3b094:	ldr	x9, [x9, #3944]
   3b098:	mov	w10, #0xffffffff            	// #-1
   3b09c:	mov	w0, #0x1                   	// #1
   3b0a0:	add	x8, x9, x8, lsl #3
   3b0a4:	ldp	w9, w8, [x8]
   3b0a8:	lsr	w9, w2, w9
   3b0ac:	lsl	w8, w10, w8
   3b0b0:	bic	w8, w9, w8
   3b0b4:	str	w8, [x1, #16]
   3b0b8:	ret

000000000003b0bc <aarch64_ext_regno_pair@@Base>:
   3b0bc:	stp	x29, x30, [sp, #-16]!
   3b0c0:	ldr	w8, [x1, #8]
   3b0c4:	mov	x29, sp
   3b0c8:	orr	w9, w8, #0x2
   3b0cc:	cmp	w9, #0x3
   3b0d0:	b.ne	3b0f8 <aarch64_ext_regno_pair@@Base+0x3c>  // b.any
   3b0d4:	sub	w8, w8, #0x1
   3b0d8:	mov	w9, #0x38                  	// #56
   3b0dc:	smaddl	x8, w8, w9, x3
   3b0e0:	ldr	w8, [x8, #40]
   3b0e4:	mov	w0, #0x1                   	// #1
   3b0e8:	add	w8, w8, #0x1
   3b0ec:	str	w8, [x1, #16]
   3b0f0:	ldp	x29, x30, [sp], #16
   3b0f4:	ret
   3b0f8:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3b0fc:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b100:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b104:	add	x0, x0, #0x771
   3b108:	add	x1, x1, #0x718
   3b10c:	add	x3, x3, #0x791
   3b110:	mov	w2, #0x10f                 	// #271
   3b114:	bl	35b30 <__assert_fail@plt>

000000000003b118 <aarch64_ext_regrt_sysins@@Base>:
   3b118:	stp	x29, x30, [sp, #-32]!
   3b11c:	stp	x20, x19, [sp, #16]
   3b120:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3b124:	ldr	w8, [x0, #20]
   3b128:	ldr	x9, [x9, #3944]
   3b12c:	ldr	w10, [x1, #8]
   3b130:	mov	w11, #0xffffffff            	// #-1
   3b134:	mov	x29, sp
   3b138:	add	x8, x9, x8, lsl #3
   3b13c:	ldp	w9, w8, [x8]
   3b140:	cmp	w10, #0x1
   3b144:	lsr	w9, w2, w9
   3b148:	lsl	w8, w11, w8
   3b14c:	bic	w8, w9, w8
   3b150:	str	w8, [x1, #16]
   3b154:	b.ne	3b19c <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3b158:	ldr	w0, [x3, #24]
   3b15c:	mov	x20, x3
   3b160:	mov	x19, x1
   3b164:	bl	357a0 <aarch64_get_operand_class@plt>
   3b168:	cmp	w0, #0xc
   3b16c:	b.ne	3b19c <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3b170:	ldr	x0, [x20, #40]
   3b174:	bl	35a70 <aarch64_sys_ins_reg_has_xt@plt>
   3b178:	ldrb	w8, [x19, #48]
   3b17c:	ubfiz	w9, w0, #1, #1
   3b180:	mov	w0, #0x1                   	// #1
   3b184:	and	w8, w8, #0xfffffffd
   3b188:	orr	w8, w9, w8
   3b18c:	strb	w8, [x19, #48]
   3b190:	ldp	x20, x19, [sp, #16]
   3b194:	ldp	x29, x30, [sp], #32
   3b198:	ret
   3b19c:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3b1a0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b1a4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b1a8:	add	x0, x0, #0x825
   3b1ac:	add	x1, x1, #0x718
   3b1b0:	add	x3, x3, #0x889
   3b1b4:	mov	w2, #0x11e                 	// #286
   3b1b8:	bl	35b30 <__assert_fail@plt>

000000000003b1bc <aarch64_ext_reglane@@Base>:
   3b1bc:	sub	sp, sp, #0x50
   3b1c0:	stp	x29, x30, [sp, #16]
   3b1c4:	stp	x24, x23, [sp, #32]
   3b1c8:	stp	x22, x21, [sp, #48]
   3b1cc:	stp	x20, x19, [sp, #64]
   3b1d0:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   3b1d4:	ldr	x8, [x3, #8]
   3b1d8:	ldr	w9, [x0, #20]
   3b1dc:	ldr	x23, [x23, #3944]
   3b1e0:	mov	x21, x3
   3b1e4:	ldr	w8, [x8, #12]
   3b1e8:	mov	w20, w2
   3b1ec:	add	x9, x23, x9, lsl #3
   3b1f0:	ldp	w10, w9, [x9]
   3b1f4:	bic	w8, w2, w8
   3b1f8:	mov	x19, x1
   3b1fc:	add	x29, sp, #0x10
   3b200:	lsr	w8, w8, w10
   3b204:	mov	w10, #0xffffffff            	// #-1
   3b208:	lsl	w9, w10, w9
   3b20c:	bic	w8, w8, w9
   3b210:	str	w8, [x1, #16]
   3b214:	ldr	x8, [x3, #8]
   3b218:	ldr	w9, [x8, #16]
   3b21c:	cmp	w9, #0x5a
   3b220:	b.gt	3b2d8 <aarch64_ext_reglane@@Base+0x11c>
   3b224:	cmp	w9, #0xa
   3b228:	b.eq	3b234 <aarch64_ext_reglane@@Base+0x78>  // b.none
   3b22c:	cmp	w9, #0x17
   3b230:	b.ne	3b3a4 <aarch64_ext_reglane@@Base+0x1e8>  // b.any
   3b234:	ldr	w9, [x19]
   3b238:	cmp	w9, #0x20
   3b23c:	b.ne	3b35c <aarch64_ext_reglane@@Base+0x1a0>  // b.any
   3b240:	ldr	w9, [x8, #32]
   3b244:	cmp	w9, #0x1f
   3b248:	b.ne	3b35c <aarch64_ext_reglane@@Base+0x1a0>  // b.any
   3b24c:	ldr	w9, [x19, #8]
   3b250:	cmp	w9, #0x1
   3b254:	b.ne	3b554 <aarch64_ext_reglane@@Base+0x398>  // b.any
   3b258:	ldrb	w9, [x21, #84]
   3b25c:	cbnz	w9, 3b514 <aarch64_ext_reglane@@Base+0x358>
   3b260:	add	x1, x8, #0x38
   3b264:	add	x3, sp, #0x8
   3b268:	mov	w2, #0x1                   	// #1
   3b26c:	mov	x0, x21
   3b270:	bl	35410 <aarch64_find_best_match@plt>
   3b274:	ldrb	w8, [sp, #9]
   3b278:	cmp	w0, #0x0
   3b27c:	csel	w0, wzr, w8, eq  // eq = none
   3b280:	strb	w0, [x19, #4]
   3b284:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3b288:	and	w8, w0, #0xff
   3b28c:	cmp	w8, #0x11
   3b290:	b.cs	3b574 <aarch64_ext_reglane@@Base+0x3b8>  // b.hs, b.nlast
   3b294:	sub	w8, w8, #0x1
   3b298:	mov	w9, #0x808b                	// #32907
   3b29c:	lsr	x9, x9, x8
   3b2a0:	tbz	w9, #0, 3b594 <aarch64_ext_reglane@@Base+0x3d8>
   3b2a4:	ldr	w9, [x23, #320]
   3b2a8:	ldr	w11, [x23, #324]
   3b2ac:	adrp	x13, 58000 <xexit@@Base+0x1dd4>
   3b2b0:	add	x13, x13, #0x8eb
   3b2b4:	mov	w10, w20
   3b2b8:	mov	w12, #0xffffffff            	// #-1
   3b2bc:	ldrb	w8, [x13, x8]
   3b2c0:	lsr	x9, x10, x9
   3b2c4:	lsl	w10, w12, w11
   3b2c8:	mvn	w10, w10
   3b2cc:	and	x9, x9, x10
   3b2d0:	lsr	x8, x9, x8
   3b2d4:	b	3b454 <aarch64_ext_reglane@@Base+0x298>
   3b2d8:	cmp	w9, #0x5b
   3b2dc:	b.eq	3b434 <aarch64_ext_reglane@@Base+0x278>  // b.none
   3b2e0:	cmp	w9, #0x5d
   3b2e4:	b.ne	3b3a4 <aarch64_ext_reglane@@Base+0x1e8>  // b.any
   3b2e8:	ldrsw	x22, [x19, #8]
   3b2ec:	mov	w9, #0x38                  	// #56
   3b2f0:	madd	x9, x22, x9, x21
   3b2f4:	ldrb	w9, [x9, #28]
   3b2f8:	cbnz	w9, 3b514 <aarch64_ext_reglane@@Base+0x358>
   3b2fc:	add	x1, x8, #0x38
   3b300:	add	x3, sp, #0x8
   3b304:	mov	x0, x21
   3b308:	mov	w2, w22
   3b30c:	add	x23, sp, #0x8
   3b310:	bl	35410 <aarch64_find_best_match@plt>
   3b314:	cbz	w0, 3b484 <aarch64_ext_reglane@@Base+0x2c8>
   3b318:	ldrb	w8, [x23, x22]
   3b31c:	and	w9, w8, #0xfe
   3b320:	cmp	w9, #0xa
   3b324:	strb	w8, [x19, #4]
   3b328:	b.ne	3b39c <aarch64_ext_reglane@@Base+0x1e0>  // b.any
   3b32c:	mov	w2, #0x2                   	// #2
   3b330:	mov	w3, #0x3d                  	// #61
   3b334:	mov	w4, #0x3e                  	// #62
   3b338:	mov	w0, w20
   3b33c:	mov	w1, wzr
   3b340:	bl	35440 <extract_fields@plt>
   3b344:	ldr	w8, [x19, #16]
   3b348:	mov	w9, w0
   3b34c:	str	x9, [x19, #24]
   3b350:	and	w8, w8, #0x1f
   3b354:	str	w8, [x19, #16]
   3b358:	b	3b4ec <aarch64_ext_reglane@@Base+0x330>
   3b35c:	ldr	w9, [x23, #344]
   3b360:	ldr	w10, [x23, #348]
   3b364:	mov	w8, #0xffffffff            	// #-1
   3b368:	lsr	w9, w20, w9
   3b36c:	lsl	w10, w8, w10
   3b370:	bic	w21, w9, w10
   3b374:	mov	w9, w21
   3b378:	add	w22, w8, #0x1
   3b37c:	cmp	w8, #0x2
   3b380:	lsr	w21, w21, #1
   3b384:	b.gt	3b390 <aarch64_ext_reglane@@Base+0x1d4>
   3b388:	mov	w8, w22
   3b38c:	tbz	w9, #0, 3b374 <aarch64_ext_reglane@@Base+0x1b8>
   3b390:	sub	w8, w22, #0x1
   3b394:	cmp	w8, #0x2
   3b398:	b.le	3b45c <aarch64_ext_reglane@@Base+0x2a0>
   3b39c:	mov	w0, wzr
   3b3a0:	b	3b4f0 <aarch64_ext_reglane@@Base+0x334>
   3b3a4:	ldrsw	x22, [x19, #8]
   3b3a8:	mov	w9, #0x38                  	// #56
   3b3ac:	madd	x9, x22, x9, x21
   3b3b0:	ldrb	w9, [x9, #28]
   3b3b4:	cbnz	w9, 3b514 <aarch64_ext_reglane@@Base+0x358>
   3b3b8:	add	x1, x8, #0x38
   3b3bc:	add	x3, sp, #0x8
   3b3c0:	mov	x0, x21
   3b3c4:	mov	w2, w22
   3b3c8:	add	x24, sp, #0x8
   3b3cc:	bl	35410 <aarch64_find_best_match@plt>
   3b3d0:	cbz	w0, 3b484 <aarch64_ext_reglane@@Base+0x2c8>
   3b3d4:	ldrb	w8, [x24, x22]
   3b3d8:	cmp	w8, #0x8
   3b3dc:	strb	w8, [x19, #4]
   3b3e0:	b.eq	3b4ac <aarch64_ext_reglane@@Base+0x2f0>  // b.none
   3b3e4:	cmp	w8, #0x7
   3b3e8:	b.eq	3b48c <aarch64_ext_reglane@@Base+0x2d0>  // b.none
   3b3ec:	cmp	w8, #0x6
   3b3f0:	b.ne	3b39c <aarch64_ext_reglane@@Base+0x1e0>  // b.any
   3b3f4:	ldr	w8, [x19]
   3b3f8:	cmp	w8, #0x22
   3b3fc:	b.ne	3b48c <aarch64_ext_reglane@@Base+0x2d0>  // b.any
   3b400:	mov	w2, #0x3                   	// #3
   3b404:	mov	w3, #0x3d                  	// #61
   3b408:	mov	w4, #0x3e                  	// #62
   3b40c:	mov	w5, #0x3f                  	// #63
   3b410:	mov	w0, w20
   3b414:	mov	w1, wzr
   3b418:	bl	35440 <extract_fields@plt>
   3b41c:	ldr	w9, [x19, #16]
   3b420:	mov	w8, w0
   3b424:	str	x8, [x19, #24]
   3b428:	and	w9, w9, #0xf
   3b42c:	str	w9, [x19, #16]
   3b430:	b	3b4d0 <aarch64_ext_reglane@@Base+0x314>
   3b434:	ldr	w9, [x23, #996]
   3b438:	ldr	w8, [x23, #992]
   3b43c:	mov	w11, #0xffffffff            	// #-1
   3b440:	mov	w10, w20
   3b444:	lsl	w9, w11, w9
   3b448:	lsr	x8, x10, x8
   3b44c:	mvn	w9, w9
   3b450:	and	x8, x8, x9
   3b454:	str	x8, [x19, #24]
   3b458:	b	3b4ec <aarch64_ext_reglane@@Base+0x330>
   3b45c:	cmp	w22, #0x4
   3b460:	b.hi	3b534 <aarch64_ext_reglane@@Base+0x378>  // b.pmore
   3b464:	add	w20, w8, #0x6
   3b468:	mov	w0, w20
   3b46c:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3b470:	cmp	w0, w22
   3b474:	b.ne	3b534 <aarch64_ext_reglane@@Base+0x378>  // b.any
   3b478:	strb	w20, [x19, #4]
   3b47c:	str	x21, [x19, #24]
   3b480:	b	3b4ec <aarch64_ext_reglane@@Base+0x330>
   3b484:	strb	wzr, [x19, #4]
   3b488:	b	3b4f0 <aarch64_ext_reglane@@Base+0x334>
   3b48c:	mov	w2, #0x2                   	// #2
   3b490:	mov	w3, #0x3d                  	// #61
   3b494:	mov	w4, #0x3e                  	// #62
   3b498:	mov	w0, w20
   3b49c:	mov	w1, wzr
   3b4a0:	bl	35440 <extract_fields@plt>
   3b4a4:	mov	w8, w0
   3b4a8:	b	3b4cc <aarch64_ext_reglane@@Base+0x310>
   3b4ac:	ldr	w9, [x23, #492]
   3b4b0:	ldr	w8, [x23, #488]
   3b4b4:	mov	w11, #0xffffffff            	// #-1
   3b4b8:	mov	w10, w20
   3b4bc:	lsl	w9, w11, w9
   3b4c0:	lsr	x8, x10, x8
   3b4c4:	mvn	w9, w9
   3b4c8:	and	x8, x8, x9
   3b4cc:	str	x8, [x19, #24]
   3b4d0:	ldr	x9, [x21, #8]
   3b4d4:	ldr	w9, [x9, #20]
   3b4d8:	cmp	w9, #0x50
   3b4dc:	b.ne	3b4ec <aarch64_ext_reglane@@Base+0x330>  // b.any
   3b4e0:	ldrb	w9, [x19, #4]
   3b4e4:	cmp	w9, #0x6
   3b4e8:	b.ne	3b508 <aarch64_ext_reglane@@Base+0x34c>  // b.any
   3b4ec:	mov	w0, #0x1                   	// #1
   3b4f0:	ldp	x20, x19, [sp, #64]
   3b4f4:	ldp	x22, x21, [sp, #48]
   3b4f8:	ldp	x24, x23, [sp, #32]
   3b4fc:	ldp	x29, x30, [sp, #16]
   3b500:	add	sp, sp, #0x50
   3b504:	ret
   3b508:	tbnz	w8, #0, 3b39c <aarch64_ext_reglane@@Base+0x1e0>
   3b50c:	lsr	x8, x8, #1
   3b510:	b	3b454 <aarch64_ext_reglane@@Base+0x298>
   3b514:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3b518:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b51c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3b520:	add	x0, x0, #0xac
   3b524:	add	x1, x1, #0x718
   3b528:	add	x3, x3, #0xe0
   3b52c:	mov	w2, #0xf4                  	// #244
   3b530:	bl	35b30 <__assert_fail@plt>
   3b534:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3b538:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b53c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3b540:	add	x0, x0, #0x12b
   3b544:	add	x1, x1, #0x718
   3b548:	add	x3, x3, #0x175
   3b54c:	mov	w2, #0xe6                  	// #230
   3b550:	bl	35b30 <__assert_fail@plt>
   3b554:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3b558:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b55c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b560:	add	x0, x0, #0x360
   3b564:	add	x1, x1, #0x718
   3b568:	add	x3, x3, #0x91f
   3b56c:	mov	w2, #0x13b                 	// #315
   3b570:	bl	35b30 <__assert_fail@plt>
   3b574:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3b578:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b57c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b580:	add	x0, x0, #0x2b4
   3b584:	add	x1, x1, #0x40
   3b588:	add	x3, x3, #0x183
   3b58c:	mov	w2, #0x200                 	// #512
   3b590:	bl	35b30 <__assert_fail@plt>
   3b594:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3b598:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b59c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b5a0:	add	x0, x0, #0x1a8
   3b5a4:	add	x1, x1, #0x40
   3b5a8:	add	x3, x3, #0x183
   3b5ac:	mov	w2, #0x203                 	// #515
   3b5b0:	bl	35b30 <__assert_fail@plt>

000000000003b5b4 <aarch64_ext_reglist@@Base>:
   3b5b4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3b5b8:	ldr	w8, [x0, #20]
   3b5bc:	ldr	x9, [x9, #3944]
   3b5c0:	mov	w11, #0xffffffff            	// #-1
   3b5c4:	mov	w0, #0x1                   	// #1
   3b5c8:	ldp	w10, w12, [x9, #216]
   3b5cc:	add	x8, x9, x8, lsl #3
   3b5d0:	lsr	w9, w2, w10
   3b5d4:	ldp	w10, w8, [x8]
   3b5d8:	lsl	w12, w11, w12
   3b5dc:	bic	w9, w9, w12
   3b5e0:	ldrb	w12, [x1, #17]
   3b5e4:	lsr	w10, w2, w10
   3b5e8:	lsl	w8, w11, w8
   3b5ec:	lsl	w9, w9, #5
   3b5f0:	bic	w8, w10, w8
   3b5f4:	add	w9, w9, #0x20
   3b5f8:	and	w8, w8, #0x1f
   3b5fc:	and	w9, w9, #0xe0
   3b600:	bfi	w8, w12, #8, #8
   3b604:	orr	w8, w9, w8
   3b608:	strh	w8, [x1, #16]
   3b60c:	ret

000000000003b610 <aarch64_ext_ldst_reglist@@Base>:
   3b610:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3b614:	ldr	x8, [x8, #3944]
   3b618:	ldr	x10, [x3, #8]
   3b61c:	mov	w13, w2
   3b620:	ldp	w9, w11, [x8, #96]
   3b624:	ldp	w12, w8, [x8, #192]
   3b628:	ldr	x10, [x10, #120]
   3b62c:	lsr	w9, w2, w9
   3b630:	lsr	x12, x13, x12
   3b634:	mov	w13, #0xffffffff            	// #-1
   3b638:	lsl	w11, w13, w11
   3b63c:	lsl	w13, w13, w8
   3b640:	ldrh	w8, [x1, #16]
   3b644:	bic	w9, w9, w11
   3b648:	mvn	w11, w13
   3b64c:	bfxil	w8, w9, #0, #5
   3b650:	and	x9, x12, x11
   3b654:	cmp	w9, #0xa
   3b658:	strh	w8, [x1, #16]
   3b65c:	b.hi	3b68c <aarch64_ext_ldst_reglist@@Base+0x7c>  // b.pmore
   3b660:	adrp	x11, 57000 <xexit@@Base+0xdd4>
   3b664:	mov	w12, #0xc                   	// #12
   3b668:	add	x11, x11, #0x678
   3b66c:	madd	x12, x9, x12, x11
   3b670:	ldr	w12, [x12, #8]
   3b674:	ubfx	w10, w10, #24, #3
   3b678:	cmp	w10, w12
   3b67c:	b.ne	3b68c <aarch64_ext_ldst_reglist@@Base+0x7c>  // b.any
   3b680:	mov	w10, #0x5dd                 	// #1501
   3b684:	lsr	x10, x10, x9
   3b688:	tbnz	w10, #0, 3b694 <aarch64_ext_ldst_reglist@@Base+0x84>
   3b68c:	mov	w0, wzr
   3b690:	ret
   3b694:	mov	w10, #0xc                   	// #12
   3b698:	madd	x9, x9, x10, x11
   3b69c:	ldrh	w9, [x9, #4]
   3b6a0:	and	w8, w8, #0xffffff1f
   3b6a4:	mov	w0, #0x1                   	// #1
   3b6a8:	ubfiz	w9, w9, #5, #3
   3b6ac:	orr	w8, w9, w8
   3b6b0:	strh	w8, [x1, #16]
   3b6b4:	ret

000000000003b6b8 <aarch64_ext_ldst_reglist_r@@Base>:
   3b6b8:	stp	x29, x30, [sp, #-16]!
   3b6bc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3b6c0:	ldr	x9, [x9, #3944]
   3b6c4:	ldrh	w8, [x1, #16]
   3b6c8:	mov	w10, #0xffffffff            	// #-1
   3b6cc:	mov	x29, sp
   3b6d0:	ldp	w11, w12, [x9, #96]
   3b6d4:	lsr	w11, w2, w11
   3b6d8:	lsl	w12, w10, w12
   3b6dc:	bic	w11, w11, w12
   3b6e0:	bfxil	w8, w11, #0, #5
   3b6e4:	strh	w8, [x1, #16]
   3b6e8:	ldr	x11, [x3, #8]
   3b6ec:	ldrb	w11, [x11, #123]
   3b6f0:	and	w11, w11, #0x7
   3b6f4:	sub	w12, w11, #0x1
   3b6f8:	and	w12, w12, #0xffff
   3b6fc:	cmp	w12, #0x4
   3b700:	mov	w12, w8
   3b704:	bfi	w12, w11, #5, #3
   3b708:	strh	w12, [x1, #16]
   3b70c:	b.cs	3b748 <aarch64_ext_ldst_reglist_r@@Base+0x90>  // b.hs, b.nlast
   3b710:	ldp	w12, w9, [x9, #248]
   3b714:	lsr	w12, w2, w12
   3b718:	lsl	w9, w10, w9
   3b71c:	bic	w9, w12, w9
   3b720:	cmp	w9, #0x1
   3b724:	b.ne	3b73c <aarch64_ext_ldst_reglist_r@@Base+0x84>  // b.any
   3b728:	cmp	w11, #0x1
   3b72c:	b.ne	3b73c <aarch64_ext_ldst_reglist_r@@Base+0x84>  // b.any
   3b730:	and	w8, w8, #0xffffff1f
   3b734:	orr	w8, w8, #0x40
   3b738:	strh	w8, [x1, #16]
   3b73c:	mov	w0, #0x1                   	// #1
   3b740:	ldp	x29, x30, [sp], #16
   3b744:	ret
   3b748:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3b74c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b750:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b754:	add	x0, x0, #0x9b0
   3b758:	add	x1, x1, #0x718
   3b75c:	add	x3, x3, #0x9eb
   3b760:	mov	w2, #0x1e5                 	// #485
   3b764:	bl	35b30 <__assert_fail@plt>

000000000003b768 <aarch64_ext_ldst_elemlist@@Base>:
   3b768:	stp	x29, x30, [sp, #-64]!
   3b76c:	str	x23, [sp, #16]
   3b770:	stp	x22, x21, [sp, #32]
   3b774:	stp	x20, x19, [sp, #48]
   3b778:	adrp	x22, 9b000 <aarch64_operands@@Base+0x16c38>
   3b77c:	ldr	x22, [x22, #3944]
   3b780:	ldrh	w11, [x1, #16]
   3b784:	mov	w8, #0xffffffff            	// #-1
   3b788:	mov	x20, x3
   3b78c:	ldp	w9, w10, [x22, #96]
   3b790:	ldr	w12, [x22, #212]
   3b794:	mov	w21, w2
   3b798:	mov	x19, x1
   3b79c:	lsr	w9, w2, w9
   3b7a0:	lsl	w10, w8, w10
   3b7a4:	bic	w9, w9, w10
   3b7a8:	bfxil	w11, w9, #0, #5
   3b7ac:	cmp	w12, #0x3
   3b7b0:	mov	x29, sp
   3b7b4:	strh	w11, [x1, #16]
   3b7b8:	b.ge	3b7c8 <aarch64_ext_ldst_elemlist@@Base+0x60>  // b.tcont
   3b7bc:	mov	w9, wzr
   3b7c0:	mov	w10, wzr
   3b7c4:	b	3b7d4 <aarch64_ext_ldst_elemlist@@Base+0x6c>
   3b7c8:	ldr	w9, [x22, #208]
   3b7cc:	add	w10, w9, #0x1
   3b7d0:	mov	w9, #0x2                   	// #2
   3b7d4:	lsr	w10, w21, w10
   3b7d8:	lsl	w8, w8, w9
   3b7dc:	mov	w2, #0x3                   	// #3
   3b7e0:	mov	w3, #0xb                   	// #11
   3b7e4:	mov	w4, #0x1f                  	// #31
   3b7e8:	mov	w5, #0x9                   	// #9
   3b7ec:	mov	w0, w21
   3b7f0:	mov	w1, wzr
   3b7f4:	bic	w23, w10, w8
   3b7f8:	bl	35440 <extract_fields@plt>
   3b7fc:	cmp	w23, #0x2
   3b800:	b.eq	3b834 <aarch64_ext_ldst_elemlist@@Base+0xcc>  // b.none
   3b804:	cmp	w23, #0x1
   3b808:	b.eq	3b820 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.none
   3b80c:	mov	w8, wzr
   3b810:	cbnz	w23, 3b8a8 <aarch64_ext_ldst_elemlist@@Base+0x140>
   3b814:	mov	w8, #0x5                   	// #5
   3b818:	strb	w8, [x19, #4]
   3b81c:	b	3b848 <aarch64_ext_ldst_elemlist@@Base+0xe0>
   3b820:	tbnz	w0, #0, 3b8a4 <aarch64_ext_ldst_elemlist@@Base+0x13c>
   3b824:	mov	w8, #0x6                   	// #6
   3b828:	strb	w8, [x19, #4]
   3b82c:	lsr	w0, w0, #1
   3b830:	b	3b848 <aarch64_ext_ldst_elemlist@@Base+0xe0>
   3b834:	tbnz	w0, #1, 3b8a4 <aarch64_ext_ldst_elemlist@@Base+0x13c>
   3b838:	tbnz	w0, #0, 3b88c <aarch64_ext_ldst_elemlist@@Base+0x124>
   3b83c:	mov	w8, #0x7                   	// #7
   3b840:	strb	w8, [x19, #4]
   3b844:	lsr	w0, w0, #2
   3b848:	ldrh	w8, [x19, #16]
   3b84c:	mov	w9, w0
   3b850:	str	x9, [x19, #24]
   3b854:	and	w8, w8, #0xfffffe1f
   3b858:	orr	w8, w8, #0x100
   3b85c:	strh	w8, [x19, #16]
   3b860:	ldr	x9, [x20, #8]
   3b864:	ldrb	w9, [x9, #123]
   3b868:	and	w9, w9, #0x7
   3b86c:	bfi	w8, w9, #5, #3
   3b870:	sub	w9, w9, #0x1
   3b874:	and	w9, w9, #0xffff
   3b878:	cmp	w9, #0x4
   3b87c:	strh	w8, [x19, #16]
   3b880:	b.cs	3b8cc <aarch64_ext_ldst_elemlist@@Base+0x164>  // b.hs, b.nlast
   3b884:	mov	w8, #0x1                   	// #1
   3b888:	b	3b8a8 <aarch64_ext_ldst_elemlist@@Base+0x140>
   3b88c:	ldp	w8, w9, [x22, #248]
   3b890:	mov	w10, #0xffffffff            	// #-1
   3b894:	lsr	w8, w21, w8
   3b898:	lsl	w9, w10, w9
   3b89c:	bics	wzr, w8, w9
   3b8a0:	b.eq	3b8c0 <aarch64_ext_ldst_elemlist@@Base+0x158>  // b.none
   3b8a4:	mov	w8, wzr
   3b8a8:	ldp	x20, x19, [sp, #48]
   3b8ac:	ldp	x22, x21, [sp, #32]
   3b8b0:	ldr	x23, [sp, #16]
   3b8b4:	mov	w0, w8
   3b8b8:	ldp	x29, x30, [sp], #64
   3b8bc:	ret
   3b8c0:	mov	w8, #0x8                   	// #8
   3b8c4:	lsr	w0, w0, #3
   3b8c8:	b	3b818 <aarch64_ext_ldst_elemlist@@Base+0xb0>
   3b8cc:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3b8d0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b8d4:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3b8d8:	add	x0, x0, #0x9b0
   3b8dc:	add	x1, x1, #0x718
   3b8e0:	add	x3, x3, #0xa83
   3b8e4:	mov	w2, #0x22d                 	// #557
   3b8e8:	bl	35b30 <__assert_fail@plt>

000000000003b8ec <aarch64_ext_advsimd_imm_shift@@Base>:
   3b8ec:	stp	x29, x30, [sp, #-80]!
   3b8f0:	str	x25, [sp, #16]
   3b8f4:	stp	x24, x23, [sp, #32]
   3b8f8:	stp	x22, x21, [sp, #48]
   3b8fc:	stp	x20, x19, [sp, #64]
   3b900:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   3b904:	ldr	x23, [x23, #3944]
   3b908:	mov	w10, #0xffffffff            	// #-1
   3b90c:	mov	x29, sp
   3b910:	ldr	w8, [x23, #432]
   3b914:	ldr	w9, [x23, #436]
   3b918:	lsr	w8, w2, w8
   3b91c:	lsl	w9, w10, w9
   3b920:	bics	w25, w8, w9
   3b924:	b.eq	3b9fc <aarch64_ext_advsimd_imm_shift@@Base+0x110>  // b.none
   3b928:	ldr	x8, [x3, #8]
   3b92c:	mov	w21, w2
   3b930:	mov	x19, x1
   3b934:	mov	w2, #0x2                   	// #2
   3b938:	ldr	w24, [x8, #16]
   3b93c:	mov	w3, #0x36                  	// #54
   3b940:	mov	w4, #0x35                  	// #53
   3b944:	mov	w0, w21
   3b948:	mov	w1, wzr
   3b94c:	bl	35440 <extract_fields@plt>
   3b950:	mov	w20, w0
   3b954:	mov	w22, #0x4                   	// #4
   3b958:	mov	w8, #0x8                   	// #8
   3b95c:	subs	w22, w22, #0x1
   3b960:	sub	w8, w8, #0x2
   3b964:	b.cc	3b974 <aarch64_ext_advsimd_imm_shift@@Base+0x88>  // b.lo, b.ul, b.last
   3b968:	mov	w9, w25
   3b96c:	lsl	w25, w25, #1
   3b970:	tbz	w9, #3, 3b95c <aarch64_ext_advsimd_imm_shift@@Base+0x70>
   3b974:	cmp	w24, #0x1a
   3b978:	b.eq	3b984 <aarch64_ext_advsimd_imm_shift@@Base+0x98>  // b.none
   3b97c:	cmp	w24, #0xe
   3b980:	b.ne	3ba6c <aarch64_ext_advsimd_imm_shift@@Base+0x180>  // b.any
   3b984:	ldr	w9, [x19]
   3b988:	sub	w9, w9, #0x2b
   3b98c:	cmp	w9, #0x2
   3b990:	b.cs	3ba6c <aarch64_ext_advsimd_imm_shift@@Base+0x180>  // b.hs, b.nlast
   3b994:	cmp	w24, #0xe
   3b998:	b.ne	3ba04 <aarch64_ext_advsimd_imm_shift@@Base+0x118>  // b.any
   3b99c:	ldp	w9, w10, [x23, #88]
   3b9a0:	mov	w11, #0xffffffff            	// #-1
   3b9a4:	lsr	w9, w21, w9
   3b9a8:	lsl	w10, w11, w10
   3b9ac:	bic	w9, w9, w10
   3b9b0:	orr	w23, w9, w8
   3b9b4:	cmp	w23, #0x8
   3b9b8:	b.hi	3b9dc <aarch64_ext_advsimd_imm_shift@@Base+0xf0>  // b.pmore
   3b9bc:	add	w8, w23, #0xd
   3b9c0:	add	w9, w23, #0xe
   3b9c4:	cmp	w8, #0xe
   3b9c8:	csel	w21, w9, w8, hi  // hi = pmore
   3b9cc:	mov	w0, w21
   3b9d0:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3b9d4:	cmp	w0, w23
   3b9d8:	b.eq	3ba24 <aarch64_ext_advsimd_imm_shift@@Base+0x138>  // b.none
   3b9dc:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3b9e0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3b9e4:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3b9e8:	add	x0, x0, #0x1bd
   3b9ec:	add	x1, x1, #0x718
   3b9f0:	add	x3, x3, #0x207
   3b9f4:	mov	w2, #0xdb                  	// #219
   3b9f8:	bl	35b30 <__assert_fail@plt>
   3b9fc:	mov	w0, wzr
   3ba00:	b	3ba54 <aarch64_ext_advsimd_imm_shift@@Base+0x168>
   3ba04:	cmp	w22, #0x4
   3ba08:	b.hi	3ba8c <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>  // b.pmore
   3ba0c:	add	w8, w22, #0x1
   3ba10:	add	w21, w8, #0x4
   3ba14:	mov	w0, w21
   3ba18:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ba1c:	cmp	w0, w22
   3ba20:	b.ne	3ba8c <aarch64_ext_advsimd_imm_shift@@Base+0x1a0>  // b.any
   3ba24:	ldr	w8, [x19]
   3ba28:	mov	w9, #0x10                  	// #16
   3ba2c:	mov	w10, #0x8                   	// #8
   3ba30:	lsl	w9, w9, w22
   3ba34:	lsl	w10, w10, w22
   3ba38:	cmp	w8, #0x2c
   3ba3c:	csel	w8, w20, w10, eq  // eq = none
   3ba40:	csel	w9, w9, w20, eq  // eq = none
   3ba44:	sub	w8, w9, w8
   3ba48:	mov	w0, #0x1                   	// #1
   3ba4c:	strb	w21, [x19, #4]
   3ba50:	str	x8, [x19, #16]
   3ba54:	ldp	x20, x19, [sp, #64]
   3ba58:	ldp	x22, x21, [sp, #48]
   3ba5c:	ldp	x24, x23, [sp, #32]
   3ba60:	ldr	x25, [sp, #16]
   3ba64:	ldp	x29, x30, [sp], #80
   3ba68:	ret
   3ba6c:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ba70:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ba74:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ba78:	add	x0, x0, #0xb1a
   3ba7c:	add	x1, x1, #0x718
   3ba80:	add	x3, x3, #0xb95
   3ba84:	mov	w2, #0x24b                 	// #587
   3ba88:	bl	35b30 <__assert_fail@plt>
   3ba8c:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3ba90:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ba94:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3ba98:	add	x0, x0, #0x12b
   3ba9c:	add	x1, x1, #0x718
   3baa0:	add	x3, x3, #0x175
   3baa4:	mov	w2, #0xe6                  	// #230
   3baa8:	bl	35b30 <__assert_fail@plt>

000000000003baac <aarch64_ext_shll_imm@@Base>:
   3baac:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3bab0:	ldr	x8, [x8, #3944]
   3bab4:	mov	w10, #0xffffffff            	// #-1
   3bab8:	ldp	w9, w8, [x8, #64]
   3babc:	lsr	w9, w2, w9
   3bac0:	lsl	w8, w10, w8
   3bac4:	bic	w8, w9, w8
   3bac8:	cmp	w8, #0x2
   3bacc:	b.hi	3bae8 <aarch64_ext_shll_imm@@Base+0x3c>  // b.pmore
   3bad0:	adrp	x9, 57000 <xexit@@Base+0xdd4>
   3bad4:	add	x9, x9, #0x700
   3bad8:	ldr	x8, [x9, w8, sxtw #3]
   3badc:	mov	w0, #0x1                   	// #1
   3bae0:	str	x8, [x1, #16]
   3bae4:	ret
   3bae8:	mov	w0, wzr
   3baec:	ret

000000000003baf0 <aarch64_ext_imm@@Base>:
   3baf0:	stp	x29, x30, [sp, #-16]!
   3baf4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3baf8:	ldr	w9, [x0, #20]
   3bafc:	ldr	x8, [x8, #3944]
   3bb00:	mov	x29, sp
   3bb04:	cbz	w9, 3bb94 <aarch64_ext_imm@@Base+0xa4>
   3bb08:	add	x10, x8, x9, lsl #3
   3bb0c:	ldp	w13, w10, [x10]
   3bb10:	ldr	w12, [x0, #24]
   3bb14:	mov	w11, #0xffffffff            	// #-1
   3bb18:	lsr	w13, w2, w13
   3bb1c:	lsl	w10, w11, w10
   3bb20:	bic	w10, w13, w10
   3bb24:	cbz	w12, 3bb98 <aarch64_ext_imm@@Base+0xa8>
   3bb28:	add	x12, x8, x12, lsl #3
   3bb2c:	ldp	w14, w13, [x12]
   3bb30:	ldr	w12, [x0, #28]
   3bb34:	lsr	w14, w2, w14
   3bb38:	lsl	w11, w11, w13
   3bb3c:	lsl	w10, w10, w13
   3bb40:	bic	w11, w14, w11
   3bb44:	orr	w10, w11, w10
   3bb48:	cbz	w12, 3bb98 <aarch64_ext_imm@@Base+0xa8>
   3bb4c:	add	x11, x8, x12, lsl #3
   3bb50:	ldp	w14, w13, [x11]
   3bb54:	mov	w11, #0xffffffff            	// #-1
   3bb58:	ldr	w12, [x0, #32]
   3bb5c:	lsl	w10, w10, w13
   3bb60:	lsr	w14, w2, w14
   3bb64:	lsl	w13, w11, w13
   3bb68:	bic	w13, w14, w13
   3bb6c:	orr	w10, w13, w10
   3bb70:	cbz	w12, 3bb98 <aarch64_ext_imm@@Base+0xa8>
   3bb74:	add	x12, x8, x12, lsl #3
   3bb78:	ldp	w12, w13, [x12]
   3bb7c:	lsr	w12, w2, w12
   3bb80:	lsl	w11, w11, w13
   3bb84:	lsl	w10, w10, w13
   3bb88:	bic	w11, w12, w11
   3bb8c:	orr	w10, w11, w10
   3bb90:	b	3bb98 <aarch64_ext_imm@@Base+0xa8>
   3bb94:	mov	w10, wzr
   3bb98:	ldr	w11, [x0, #16]
   3bb9c:	mov	w10, w10
   3bba0:	tbz	w11, #2, 3bbec <aarch64_ext_imm@@Base+0xfc>
   3bba4:	cbz	w9, 3bc24 <aarch64_ext_imm@@Base+0x134>
   3bba8:	mov	w12, wzr
   3bbac:	add	x13, x0, #0x18
   3bbb0:	add	x9, x8, w9, uxtw #3
   3bbb4:	ldr	w14, [x9, #4]
   3bbb8:	ldr	w9, [x13], #4
   3bbbc:	add	w12, w14, w12
   3bbc0:	cbnz	w9, 3bbb0 <aarch64_ext_imm@@Base+0xc0>
   3bbc4:	sub	w8, w12, #0x1
   3bbc8:	cmp	w8, #0x1f
   3bbcc:	b.cs	3bc24 <aarch64_ext_imm@@Base+0x134>  // b.hs, b.nlast
   3bbd0:	mov	w9, #0x1                   	// #1
   3bbd4:	lsl	x8, x9, x8
   3bbd8:	lsl	w9, w8, #1
   3bbdc:	sub	w9, w9, #0x1
   3bbe0:	and	x9, x9, x10
   3bbe4:	eor	x9, x9, x8
   3bbe8:	sub	x10, x9, x8
   3bbec:	tbnz	w11, #3, 3bc00 <aarch64_ext_imm@@Base+0x110>
   3bbf0:	lsl	x8, x10, #4
   3bbf4:	tst	w11, #0x200
   3bbf8:	csel	x8, x10, x8, eq  // eq = none
   3bbfc:	b	3bc04 <aarch64_ext_imm@@Base+0x114>
   3bc00:	lsl	x8, x10, #2
   3bc04:	ldr	w9, [x1]
   3bc08:	lsl	x10, x8, #12
   3bc0c:	mov	w0, #0x1                   	// #1
   3bc10:	cmp	w9, #0x4e
   3bc14:	csel	x8, x10, x8, eq  // eq = none
   3bc18:	str	x8, [x1, #16]
   3bc1c:	ldp	x29, x30, [sp], #16
   3bc20:	ret
   3bc24:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3bc28:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3bc2c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3bc30:	add	x0, x0, #0x287
   3bc34:	add	x1, x1, #0x40
   3bc38:	add	x3, x3, #0x29f
   3bc3c:	mov	w2, #0x12e                 	// #302
   3bc40:	bl	35b30 <__assert_fail@plt>

000000000003bc44 <aarch64_ext_imm_half@@Base>:
   3bc44:	stp	x29, x30, [sp, #-32]!
   3bc48:	stp	x20, x19, [sp, #16]
   3bc4c:	mov	x29, sp
   3bc50:	mov	w19, w2
   3bc54:	mov	x20, x1
   3bc58:	bl	357b0 <aarch64_ext_imm@plt>
   3bc5c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3bc60:	ldr	x9, [x9, #3944]
   3bc64:	mov	w8, #0x5                   	// #5
   3bc68:	mov	w11, #0xffffffff            	// #-1
   3bc6c:	str	w8, [x20, #32]
   3bc70:	ldr	w10, [x9, #256]
   3bc74:	ldr	w9, [x9, #260]
   3bc78:	mov	w0, #0x1                   	// #1
   3bc7c:	lsr	w8, w19, w10
   3bc80:	lsl	w9, w11, w9
   3bc84:	bic	w8, w8, w9
   3bc88:	lsl	w8, w8, #4
   3bc8c:	str	x8, [x20, #40]
   3bc90:	ldp	x20, x19, [sp, #16]
   3bc94:	ldp	x29, x30, [sp], #32
   3bc98:	ret

000000000003bc9c <aarch64_ext_advsimd_imm_modified@@Base>:
   3bc9c:	sub	sp, sp, #0x50
   3bca0:	stp	x29, x30, [sp, #16]
   3bca4:	stp	x24, x23, [sp, #32]
   3bca8:	stp	x22, x21, [sp, #48]
   3bcac:	stp	x20, x19, [sp, #64]
   3bcb0:	ldr	w8, [x1, #8]
   3bcb4:	add	x29, sp, #0x10
   3bcb8:	cmp	w8, #0x1
   3bcbc:	b.ne	3bf04 <aarch64_ext_advsimd_imm_modified@@Base+0x268>  // b.any
   3bcc0:	ldr	w8, [x1]
   3bcc4:	ldrb	w21, [x3, #28]
   3bcc8:	mov	x22, x3
   3bccc:	mov	x19, x1
   3bcd0:	mov	w20, w2
   3bcd4:	cmp	w8, #0x2f
   3bcd8:	b.ne	3bce8 <aarch64_ext_advsimd_imm_modified@@Base+0x4c>  // b.any
   3bcdc:	ldrb	w8, [x19, #24]
   3bce0:	orr	w8, w8, #0x1
   3bce4:	strb	w8, [x19, #24]
   3bce8:	mov	w2, #0x2                   	// #2
   3bcec:	mov	w3, #0x4                   	// #4
   3bcf0:	mov	w4, #0x3                   	// #3
   3bcf4:	mov	w0, w20
   3bcf8:	mov	w1, wzr
   3bcfc:	bl	35440 <extract_fields@plt>
   3bd00:	ldrb	w8, [x19, #24]
   3bd04:	mov	w24, w0
   3bd08:	tbnz	w8, #0, 3bd9c <aarch64_ext_advsimd_imm_modified@@Base+0x100>
   3bd0c:	mov	w0, w21
   3bd10:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3bd14:	and	w8, w0, #0xff
   3bd18:	cmp	w8, #0x8
   3bd1c:	b.ne	3bd9c <aarch64_ext_advsimd_imm_modified@@Base+0x100>  // b.any
   3bd20:	tst	w24, #0x1
   3bd24:	mov	w8, #0xff                  	// #255
   3bd28:	mov	w9, #0xff00                	// #65280
   3bd2c:	csel	x8, xzr, x8, eq  // eq = none
   3bd30:	tst	w24, #0x2
   3bd34:	csel	x9, xzr, x9, eq  // eq = none
   3bd38:	orr	x8, x9, x8
   3bd3c:	mov	w9, #0xff0000              	// #16711680
   3bd40:	tst	w24, #0x4
   3bd44:	csel	x9, xzr, x9, eq  // eq = none
   3bd48:	orr	x8, x9, x8
   3bd4c:	mov	w9, #0xff000000            	// #-16777216
   3bd50:	tst	w24, #0x8
   3bd54:	csel	x9, xzr, x9, eq  // eq = none
   3bd58:	orr	x8, x9, x8
   3bd5c:	mov	x9, #0xff00000000          	// #1095216660480
   3bd60:	tst	w24, #0x10
   3bd64:	csel	x9, xzr, x9, eq  // eq = none
   3bd68:	orr	x8, x9, x8
   3bd6c:	mov	x9, #0xff0000000000        	// #280375465082880
   3bd70:	tst	w24, #0x20
   3bd74:	csel	x9, xzr, x9, eq  // eq = none
   3bd78:	orr	x8, x9, x8
   3bd7c:	mov	x9, #0xff000000000000      	// #71776119061217280
   3bd80:	tst	w24, #0x40
   3bd84:	csel	x9, xzr, x9, eq  // eq = none
   3bd88:	tst	w24, #0x80
   3bd8c:	mov	x10, #0xff00000000000000    	// #-72057594037927936
   3bd90:	orr	x8, x9, x8
   3bd94:	csel	x9, xzr, x10, eq  // eq = none
   3bd98:	orr	x24, x9, x8
   3bd9c:	ldrsw	x23, [x19, #8]
   3bda0:	mov	w8, #0x38                  	// #56
   3bda4:	str	x24, [x19, #16]
   3bda8:	madd	x8, x23, x8, x22
   3bdac:	ldrb	w8, [x8, #28]
   3bdb0:	cbnz	w8, 3bf24 <aarch64_ext_advsimd_imm_modified@@Base+0x288>
   3bdb4:	ldr	x8, [x22, #8]
   3bdb8:	add	x3, sp, #0x8
   3bdbc:	mov	x0, x22
   3bdc0:	mov	w2, w23
   3bdc4:	add	x1, x8, #0x38
   3bdc8:	add	x24, sp, #0x8
   3bdcc:	bl	35410 <aarch64_find_best_match@plt>
   3bdd0:	cbz	w0, 3bdf8 <aarch64_ext_advsimd_imm_modified@@Base+0x15c>
   3bdd4:	ldrb	w8, [x24, x23]
   3bdd8:	cmp	w8, #0x22
   3bddc:	strb	w8, [x19, #4]
   3bde0:	b.eq	3be54 <aarch64_ext_advsimd_imm_modified@@Base+0x1b8>  // b.none
   3bde4:	cmp	w8, #0x21
   3bde8:	b.eq	3be04 <aarch64_ext_advsimd_imm_modified@@Base+0x168>  // b.none
   3bdec:	cbnz	w8, 3bf44 <aarch64_ext_advsimd_imm_modified@@Base+0x2a8>
   3bdf0:	str	wzr, [x19, #32]
   3bdf4:	b	3bed8 <aarch64_ext_advsimd_imm_modified@@Base+0x23c>
   3bdf8:	strb	wzr, [x19, #4]
   3bdfc:	str	wzr, [x19, #32]
   3be00:	b	3bed8 <aarch64_ext_advsimd_imm_modified@@Base+0x23c>
   3be04:	mov	w8, #0x5                   	// #5
   3be08:	mov	w0, w21
   3be0c:	str	w8, [x19, #32]
   3be10:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3be14:	and	w8, w0, #0xff
   3be18:	cmp	w8, #0x1
   3be1c:	b.eq	3beb8 <aarch64_ext_advsimd_imm_modified@@Base+0x21c>  // b.none
   3be20:	cmp	w8, #0x2
   3be24:	b.eq	3bea4 <aarch64_ext_advsimd_imm_modified@@Base+0x208>  // b.none
   3be28:	cmp	w8, #0x4
   3be2c:	b.ne	3bf64 <aarch64_ext_advsimd_imm_modified@@Base+0x2c8>  // b.any
   3be30:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3be34:	ldr	x8, [x8, #3944]
   3be38:	ldr	w9, [x8, #204]
   3be3c:	cmp	w9, #0x3
   3be40:	b.lt	3beb8 <aarch64_ext_advsimd_imm_modified@@Base+0x21c>  // b.tstop
   3be44:	ldr	w8, [x8, #200]
   3be48:	add	w9, w8, #0x1
   3be4c:	mov	w8, #0x2                   	// #2
   3be50:	b	3bec0 <aarch64_ext_advsimd_imm_modified@@Base+0x224>
   3be54:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3be58:	ldr	x8, [x8, #3944]
   3be5c:	mov	w10, #0x1                   	// #1
   3be60:	str	w10, [x19, #32]
   3be64:	ldr	w9, [x8, #204]
   3be68:	cmp	w9, #0x1
   3be6c:	b.lt	3be7c <aarch64_ext_advsimd_imm_modified@@Base+0x1e0>  // b.tstop
   3be70:	ldr	w9, [x8, #200]
   3be74:	mov	w8, #0x1                   	// #1
   3be78:	b	3be84 <aarch64_ext_advsimd_imm_modified@@Base+0x1e8>
   3be7c:	mov	w8, wzr
   3be80:	mov	w9, wzr
   3be84:	mov	w10, #0xffffffff            	// #-1
   3be88:	lsr	w9, w20, w9
   3be8c:	lsl	w8, w10, w8
   3be90:	mov	w11, #0x10                  	// #16
   3be94:	bics	wzr, w9, w8
   3be98:	mov	w8, #0x8                   	// #8
   3be9c:	csel	x8, x8, x11, eq  // eq = none
   3bea0:	b	3bed4 <aarch64_ext_advsimd_imm_modified@@Base+0x238>
   3bea4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3bea8:	ldr	x8, [x8, #3944]
   3beac:	ldr	w9, [x8, #204]
   3beb0:	cmp	w9, #0x2
   3beb4:	b.ge	3bef4 <aarch64_ext_advsimd_imm_modified@@Base+0x258>  // b.tcont
   3beb8:	mov	w8, wzr
   3bebc:	mov	w9, wzr
   3bec0:	mov	w10, #0xffffffff            	// #-1
   3bec4:	lsr	w9, w20, w9
   3bec8:	lsl	w8, w10, w8
   3becc:	bic	w8, w9, w8
   3bed0:	lsl	w8, w8, #3
   3bed4:	str	x8, [x19, #40]
   3bed8:	ldp	x20, x19, [sp, #64]
   3bedc:	ldp	x22, x21, [sp, #48]
   3bee0:	ldp	x24, x23, [sp, #32]
   3bee4:	ldp	x29, x30, [sp, #16]
   3bee8:	mov	w0, #0x1                   	// #1
   3beec:	add	sp, sp, #0x50
   3bef0:	ret
   3bef4:	ldr	w8, [x8, #200]
   3bef8:	add	w9, w8, #0x1
   3befc:	mov	w8, #0x1                   	// #1
   3bf00:	b	3bec0 <aarch64_ext_advsimd_imm_modified@@Base+0x224>
   3bf04:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3bf08:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3bf0c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3bf10:	add	x0, x0, #0x360
   3bf14:	add	x1, x1, #0x718
   3bf18:	add	x3, x3, #0xc30
   3bf1c:	mov	w2, #0x2bf                 	// #703
   3bf20:	bl	35b30 <__assert_fail@plt>
   3bf24:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3bf28:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3bf2c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3bf30:	add	x0, x0, #0xac
   3bf34:	add	x1, x1, #0x718
   3bf38:	add	x3, x3, #0xe0
   3bf3c:	mov	w2, #0xf4                  	// #244
   3bf40:	bl	35b30 <__assert_fail@plt>
   3bf44:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3bf48:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3bf4c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3bf50:	add	x0, x0, #0x2b4
   3bf54:	add	x1, x1, #0x718
   3bf58:	add	x3, x3, #0xc30
   3bf5c:	mov	w2, #0x2f1                 	// #753
   3bf60:	bl	35b30 <__assert_fail@plt>
   3bf64:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3bf68:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3bf6c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3bf70:	add	x0, x0, #0x2b4
   3bf74:	add	x1, x1, #0x718
   3bf78:	add	x3, x3, #0xc30
   3bf7c:	mov	w2, #0x2e5                 	// #741
   3bf80:	bl	35b30 <__assert_fail@plt>

000000000003bf84 <aarch64_ext_fpimm@@Base>:
   3bf84:	ldr	w8, [x0, #20]
   3bf88:	cbz	w8, 3c01c <aarch64_ext_fpimm@@Base+0x98>
   3bf8c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3bf90:	ldr	x9, [x9, #3944]
   3bf94:	ldr	w11, [x0, #24]
   3bf98:	mov	w10, #0xffffffff            	// #-1
   3bf9c:	add	x8, x9, x8, lsl #3
   3bfa0:	ldp	w12, w8, [x8]
   3bfa4:	lsr	w12, w2, w12
   3bfa8:	lsl	w8, w10, w8
   3bfac:	bic	w8, w12, w8
   3bfb0:	cbz	w11, 3c01c <aarch64_ext_fpimm@@Base+0x98>
   3bfb4:	add	x11, x9, x11, lsl #3
   3bfb8:	ldp	w13, w12, [x11]
   3bfbc:	ldr	w11, [x0, #28]
   3bfc0:	lsr	w13, w2, w13
   3bfc4:	lsl	w10, w10, w12
   3bfc8:	lsl	w8, w8, w12
   3bfcc:	bic	w10, w13, w10
   3bfd0:	orr	w8, w10, w8
   3bfd4:	cbz	w11, 3c01c <aarch64_ext_fpimm@@Base+0x98>
   3bfd8:	add	x10, x9, x11, lsl #3
   3bfdc:	ldp	w13, w12, [x10]
   3bfe0:	mov	w10, #0xffffffff            	// #-1
   3bfe4:	ldr	w11, [x0, #32]
   3bfe8:	lsl	w8, w8, w12
   3bfec:	lsr	w13, w2, w13
   3bff0:	lsl	w12, w10, w12
   3bff4:	bic	w12, w13, w12
   3bff8:	orr	w8, w12, w8
   3bffc:	cbz	w11, 3c01c <aarch64_ext_fpimm@@Base+0x98>
   3c000:	add	x9, x9, x11, lsl #3
   3c004:	ldp	w9, w11, [x9]
   3c008:	lsr	w9, w2, w9
   3c00c:	lsl	w10, w10, w11
   3c010:	lsl	w8, w8, w11
   3c014:	bic	w9, w9, w10
   3c018:	orr	w8, w9, w8
   3c01c:	ldrb	w9, [x1, #24]
   3c020:	mov	w8, w8
   3c024:	str	x8, [x1, #16]
   3c028:	mov	w0, #0x1                   	// #1
   3c02c:	orr	w8, w9, #0x1
   3c030:	strb	w8, [x1, #24]
   3c034:	ret

000000000003c038 <aarch64_ext_imm_rotate1@@Base>:
   3c038:	stp	x29, x30, [sp, #-16]!
   3c03c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3c040:	ldr	w8, [x0, #20]
   3c044:	ldr	x9, [x9, #3944]
   3c048:	mov	w11, #0xffffffff            	// #-1
   3c04c:	mov	w10, w2
   3c050:	mov	x29, sp
   3c054:	add	x8, x9, x8, lsl #3
   3c058:	ldp	w9, w8, [x8]
   3c05c:	lsl	w8, w11, w8
   3c060:	lsr	x9, x10, x9
   3c064:	mvn	w8, w8
   3c068:	and	x8, x9, x8
   3c06c:	cmp	w8, #0x2
   3c070:	b.cs	3c090 <aarch64_ext_imm_rotate1@@Base+0x58>  // b.hs, b.nlast
   3c074:	mov	w9, #0xb4                  	// #180
   3c078:	mul	x8, x8, x9
   3c07c:	add	x8, x8, #0x5a
   3c080:	mov	w0, #0x1                   	// #1
   3c084:	str	x8, [x1, #16]
   3c088:	ldp	x29, x30, [sp], #16
   3c08c:	ret
   3c090:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3c094:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c098:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3c09c:	add	x0, x0, #0x78d
   3c0a0:	add	x1, x1, #0x718
   3c0a4:	add	x3, x3, #0xcce
   3c0a8:	mov	w2, #0x30c                 	// #780
   3c0ac:	bl	35b30 <__assert_fail@plt>

000000000003c0b0 <aarch64_ext_imm_rotate2@@Base>:
   3c0b0:	stp	x29, x30, [sp, #-16]!
   3c0b4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3c0b8:	ldr	w8, [x0, #20]
   3c0bc:	ldr	x9, [x9, #3944]
   3c0c0:	mov	w11, #0xffffffff            	// #-1
   3c0c4:	mov	w10, w2
   3c0c8:	mov	x29, sp
   3c0cc:	add	x8, x9, x8, lsl #3
   3c0d0:	ldp	w9, w8, [x8]
   3c0d4:	lsl	w8, w11, w8
   3c0d8:	lsr	x9, x10, x9
   3c0dc:	mvn	w8, w8
   3c0e0:	and	x8, x9, x8
   3c0e4:	cmp	w8, #0x4
   3c0e8:	b.cs	3c104 <aarch64_ext_imm_rotate2@@Base+0x54>  // b.hs, b.nlast
   3c0ec:	mov	w9, #0x5a                  	// #90
   3c0f0:	mul	x8, x8, x9
   3c0f4:	mov	w0, #0x1                   	// #1
   3c0f8:	str	x8, [x1, #16]
   3c0fc:	ldp	x29, x30, [sp], #16
   3c100:	ret
   3c104:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3c108:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c10c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3c110:	add	x0, x0, #0x82d
   3c114:	add	x1, x1, #0x718
   3c118:	add	x3, x3, #0xd63
   3c11c:	mov	w2, #0x319                 	// #793
   3c120:	bl	35b30 <__assert_fail@plt>

000000000003c124 <aarch64_ext_fbits@@Base>:
   3c124:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3c128:	ldr	x8, [x8, #3944]
   3c12c:	mov	w10, #0xffffffff            	// #-1
   3c130:	mov	w11, #0x40                  	// #64
   3c134:	mov	w0, #0x1                   	// #1
   3c138:	ldr	w9, [x8, #528]
   3c13c:	ldr	w8, [x8, #532]
   3c140:	lsr	w9, w2, w9
   3c144:	lsl	w8, w10, w8
   3c148:	bic	w8, w9, w8
   3c14c:	sub	w8, w11, w8
   3c150:	str	x8, [x1, #16]
   3c154:	ret

000000000003c158 <aarch64_ext_aimm@@Base>:
   3c158:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3c15c:	ldr	x8, [x8, #3944]
   3c160:	mov	w9, #0xffffffff            	// #-1
   3c164:	mov	w12, #0x5                   	// #5
   3c168:	str	w12, [x1, #32]
   3c16c:	ldr	w10, [x8, #280]
   3c170:	ldr	w11, [x8, #284]
   3c174:	lsr	w10, w2, w10
   3c178:	lsl	w11, w9, w11
   3c17c:	bic	w10, w10, w11
   3c180:	cmp	w10, #0x1
   3c184:	b.ls	3c190 <aarch64_ext_aimm@@Base+0x38>  // b.plast
   3c188:	mov	w0, wzr
   3c18c:	ret
   3c190:	ldr	w11, [x8, #376]
   3c194:	ldr	w8, [x8, #380]
   3c198:	cmp	w10, #0x0
   3c19c:	mov	w10, #0xc                   	// #12
   3c1a0:	mov	w12, w2
   3c1a4:	csel	x10, xzr, x10, eq  // eq = none
   3c1a8:	lsl	w8, w9, w8
   3c1ac:	str	x10, [x1, #40]
   3c1b0:	lsr	x10, x12, x11
   3c1b4:	mvn	w8, w8
   3c1b8:	and	x8, x10, x8
   3c1bc:	mov	w0, #0x1                   	// #1
   3c1c0:	str	x8, [x1, #16]
   3c1c4:	ret

000000000003c1c8 <aarch64_ext_limm@@Base>:
   3c1c8:	stp	x29, x30, [sp, #-32]!
   3c1cc:	stp	x20, x19, [sp, #16]
   3c1d0:	mov	x20, x3
   3c1d4:	ldp	w3, w4, [x0, #20]
   3c1d8:	ldr	w5, [x0, #28]
   3c1dc:	mov	w8, w2
   3c1e0:	mov	x19, x1
   3c1e4:	mov	w2, #0x3                   	// #3
   3c1e8:	mov	w0, w8
   3c1ec:	mov	w1, wzr
   3c1f0:	mov	x29, sp
   3c1f4:	bl	35440 <extract_fields@plt>
   3c1f8:	ldrb	w8, [x20, #28]
   3c1fc:	mov	w20, w0
   3c200:	mov	w0, w8
   3c204:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3c208:	and	w10, w20, #0x3f
   3c20c:	ubfx	w8, w20, #6, #6
   3c210:	tbnz	w20, #12, 3c244 <aarch64_ext_limm@@Base+0x7c>
   3c214:	cmp	w10, #0x3d
   3c218:	b.hi	3c350 <aarch64_ext_limm@@Base+0x188>  // b.pmore
   3c21c:	adrp	x9, 57000 <xexit@@Base+0xdd4>
   3c220:	add	x9, x9, #0x5a0
   3c224:	adr	x11, 3c238 <aarch64_ext_limm@@Base+0x70>
   3c228:	ldrb	w12, [x9, x10]
   3c22c:	add	x11, x11, x12, lsl #2
   3c230:	mov	w9, #0x20                  	// #32
   3c234:	br	x11
   3c238:	and	w10, w20, #0xf
   3c23c:	mov	w9, #0x10                  	// #16
   3c240:	b	3c270 <aarch64_ext_limm@@Base+0xa8>
   3c244:	mov	w9, #0x40                  	// #64
   3c248:	mov	x12, #0xffffffffffffffff    	// #-1
   3c24c:	b	3c284 <aarch64_ext_limm@@Base+0xbc>
   3c250:	and	w10, w20, #0x7
   3c254:	mov	w9, #0x8                   	// #8
   3c258:	b	3c270 <aarch64_ext_limm@@Base+0xa8>
   3c25c:	and	w10, w20, #0x3
   3c260:	mov	w9, #0x4                   	// #4
   3c264:	b	3c270 <aarch64_ext_limm@@Base+0xa8>
   3c268:	and	w10, w20, #0x1
   3c26c:	mov	w9, #0x2                   	// #2
   3c270:	mov	x11, #0xffffffffffffffff    	// #-1
   3c274:	sub	w13, w9, #0x1
   3c278:	lsl	x11, x11, x9
   3c27c:	mvn	x12, x11
   3c280:	and	w8, w13, w8
   3c284:	and	w11, w0, #0xff
   3c288:	cmp	w9, w11, lsl #3
   3c28c:	mov	w0, wzr
   3c290:	b.hi	3c31c <aarch64_ext_limm@@Base+0x154>  // b.pmore
   3c294:	sub	w13, w9, #0x1
   3c298:	cmp	w10, w13
   3c29c:	b.eq	3c31c <aarch64_ext_limm@@Base+0x154>  // b.none
   3c2a0:	add	w10, w10, #0x1
   3c2a4:	mov	x13, #0xffffffffffffffff    	// #-1
   3c2a8:	lsl	x10, x13, x10
   3c2ac:	mvn	x10, x10
   3c2b0:	cbz	w8, 3c2c8 <aarch64_ext_limm@@Base+0x100>
   3c2b4:	sub	w13, w9, w8
   3c2b8:	lsl	x13, x10, x13
   3c2bc:	and	x12, x13, x12
   3c2c0:	lsr	x8, x10, x8
   3c2c4:	orr	x10, x12, x8
   3c2c8:	sub	w8, w9, #0x2
   3c2cc:	cmp	w8, #0x1e
   3c2d0:	b.hi	3c328 <aarch64_ext_limm@@Base+0x160>  // b.pmore
   3c2d4:	adrp	x9, 57000 <xexit@@Base+0xdd4>
   3c2d8:	add	x9, x9, #0x5de
   3c2dc:	adr	x12, 3c2ec <aarch64_ext_limm@@Base+0x124>
   3c2e0:	ldrb	w13, [x9, x8]
   3c2e4:	add	x12, x12, x13, lsl #2
   3c2e8:	br	x12
   3c2ec:	orr	x10, x10, x10, lsl #2
   3c2f0:	orr	x10, x10, x10, lsl #4
   3c2f4:	orr	x10, x10, x10, lsl #8
   3c2f8:	orr	x10, x10, x10, lsl #16
   3c2fc:	orr	x10, x10, x10, lsl #32
   3c300:	lsl	w8, w11, #2
   3c304:	mov	x9, #0xffffffffffffffff    	// #-1
   3c308:	lsl	x9, x9, x8
   3c30c:	lsl	x8, x9, x8
   3c310:	bic	x8, x10, x8
   3c314:	mov	w0, #0x1                   	// #1
   3c318:	str	x8, [x19, #16]
   3c31c:	ldp	x20, x19, [sp, #16]
   3c320:	ldp	x29, x30, [sp], #32
   3c324:	ret
   3c328:	cmp	w9, #0x40
   3c32c:	b.eq	3c300 <aarch64_ext_limm@@Base+0x138>  // b.none
   3c330:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3c334:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c338:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c33c:	add	x0, x0, #0x2b4
   3c340:	add	x1, x1, #0x718
   3c344:	add	x3, x3, #0x2de
   3c348:	mov	w2, #0x37f                 	// #895
   3c34c:	bl	35b30 <__assert_fail@plt>
   3c350:	mov	w0, wzr
   3c354:	b	3c31c <aarch64_ext_limm@@Base+0x154>

000000000003c358 <aarch64_ext_inv_limm@@Base>:
   3c358:	stp	x29, x30, [sp, #-32]!
   3c35c:	str	x19, [sp, #16]
   3c360:	mov	x29, sp
   3c364:	mov	x19, x1
   3c368:	bl	354c0 <aarch64_ext_limm@plt>
   3c36c:	cbz	w0, 3c380 <aarch64_ext_inv_limm@@Base+0x28>
   3c370:	ldr	x8, [x19, #16]
   3c374:	mov	w0, #0x1                   	// #1
   3c378:	mvn	x8, x8
   3c37c:	str	x8, [x19, #16]
   3c380:	ldr	x19, [sp, #16]
   3c384:	ldp	x29, x30, [sp], #32
   3c388:	ret

000000000003c38c <aarch64_ext_ft@@Base>:
   3c38c:	stp	x29, x30, [sp, #-48]!
   3c390:	str	x21, [sp, #16]
   3c394:	stp	x20, x19, [sp, #32]
   3c398:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3c39c:	ldr	x8, [x8, #3944]
   3c3a0:	mov	w9, #0xffffffff            	// #-1
   3c3a4:	mov	w0, w2
   3c3a8:	mov	x19, x1
   3c3ac:	ldp	w10, w11, [x8, #96]
   3c3b0:	mov	x29, sp
   3c3b4:	lsr	w10, w2, w10
   3c3b8:	lsl	w11, w9, w11
   3c3bc:	bic	w10, w10, w11
   3c3c0:	str	w10, [x1, #16]
   3c3c4:	ldr	x10, [x3, #8]
   3c3c8:	ldr	w10, [x10, #16]
   3c3cc:	sub	w10, w10, #0x3d
   3c3d0:	cmp	w10, #0x3
   3c3d4:	b.hi	3c400 <aarch64_ext_ft@@Base+0x74>  // b.pmore
   3c3d8:	ldr	w10, [x8, #296]
   3c3dc:	ldr	w8, [x8, #300]
   3c3e0:	lsr	w10, w0, w10
   3c3e4:	lsl	w8, w9, w8
   3c3e8:	bic	w8, w10, w8
   3c3ec:	cmp	w8, #0x2
   3c3f0:	b.hi	3c444 <aarch64_ext_ft@@Base+0xb8>  // b.pmore
   3c3f4:	add	w8, w8, #0x7
   3c3f8:	strb	w8, [x19, #4]
   3c3fc:	b	3c43c <aarch64_ext_ft@@Base+0xb0>
   3c400:	mov	w2, #0x2                   	// #2
   3c404:	mov	w3, #0x22                  	// #34
   3c408:	mov	w4, #0x25                  	// #37
   3c40c:	mov	w1, wzr
   3c410:	bl	35440 <extract_fields@plt>
   3c414:	mov	w20, w0
   3c418:	cmp	w0, #0x4
   3c41c:	mov	w0, wzr
   3c420:	b.hi	3c448 <aarch64_ext_ft@@Base+0xbc>  // b.pmore
   3c424:	add	w21, w20, #0x5
   3c428:	mov	w0, w21
   3c42c:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3c430:	cmp	w0, w20
   3c434:	b.ne	3c458 <aarch64_ext_ft@@Base+0xcc>  // b.any
   3c438:	strb	w21, [x19, #4]
   3c43c:	mov	w0, #0x1                   	// #1
   3c440:	b	3c448 <aarch64_ext_ft@@Base+0xbc>
   3c444:	mov	w0, wzr
   3c448:	ldp	x20, x19, [sp, #32]
   3c44c:	ldr	x21, [sp, #16]
   3c450:	ldp	x29, x30, [sp], #48
   3c454:	ret
   3c458:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c45c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c460:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c464:	add	x0, x0, #0x12b
   3c468:	add	x1, x1, #0x718
   3c46c:	add	x3, x3, #0x175
   3c470:	mov	w2, #0xe6                  	// #230
   3c474:	bl	35b30 <__assert_fail@plt>

000000000003c478 <aarch64_ext_addr_simple@@Base>:
   3c478:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3c47c:	ldr	x8, [x8, #3944]
   3c480:	mov	w10, #0xffffffff            	// #-1
   3c484:	mov	w0, #0x1                   	// #1
   3c488:	ldp	w9, w8, [x8, #112]
   3c48c:	lsr	w9, w2, w9
   3c490:	lsl	w8, w10, w8
   3c494:	bic	w8, w9, w8
   3c498:	str	w8, [x1, #16]
   3c49c:	ret

000000000003c4a0 <aarch64_ext_addr_offset@@Base>:
   3c4a0:	stp	x29, x30, [sp, #-64]!
   3c4a4:	stp	x22, x21, [sp, #32]
   3c4a8:	stp	x20, x19, [sp, #48]
   3c4ac:	ldrsw	x22, [x1, #8]
   3c4b0:	mov	w9, #0x38                  	// #56
   3c4b4:	str	x23, [sp, #16]
   3c4b8:	mov	x29, sp
   3c4bc:	madd	x9, x22, x9, x3
   3c4c0:	ldrb	w9, [x9, #28]
   3c4c4:	cbnz	w9, 3c590 <aarch64_ext_addr_offset@@Base+0xf0>
   3c4c8:	ldr	x9, [x3, #8]
   3c4cc:	mov	x8, x3
   3c4d0:	mov	w20, w2
   3c4d4:	mov	x19, x1
   3c4d8:	mov	x21, x0
   3c4dc:	add	x1, x9, #0x38
   3c4e0:	add	x3, x29, #0x18
   3c4e4:	mov	x0, x8
   3c4e8:	mov	w2, w22
   3c4ec:	add	x23, x29, #0x18
   3c4f0:	bl	35410 <aarch64_find_best_match@plt>
   3c4f4:	cbz	w0, 3c500 <aarch64_ext_addr_offset@@Base+0x60>
   3c4f8:	ldrb	w8, [x23, x22]
   3c4fc:	b	3c504 <aarch64_ext_addr_offset@@Base+0x64>
   3c500:	mov	w8, wzr
   3c504:	strb	w8, [x19, #4]
   3c508:	adrp	x22, 9b000 <aarch64_operands@@Base+0x16c38>
   3c50c:	ldr	w8, [x21, #20]
   3c510:	ldr	x22, [x22, #3944]
   3c514:	mov	w23, #0xffffffff            	// #-1
   3c518:	mov	w2, #0x1                   	// #1
   3c51c:	mov	w0, w20
   3c520:	add	x8, x22, x8, lsl #3
   3c524:	ldp	w9, w8, [x8]
   3c528:	mov	w1, wzr
   3c52c:	lsr	w9, w20, w9
   3c530:	lsl	w8, w23, w8
   3c534:	bic	w8, w9, w8
   3c538:	str	w8, [x19, #16]
   3c53c:	ldr	w3, [x21, #24]
   3c540:	bl	35440 <extract_fields@plt>
   3c544:	sbfx	w8, w0, #0, #9
   3c548:	str	w8, [x19, #20]
   3c54c:	ldr	w8, [x21, #28]
   3c550:	add	x8, x22, x8, lsl #3
   3c554:	ldp	w9, w8, [x8]
   3c558:	lsr	w9, w20, w9
   3c55c:	lsl	w8, w23, w8
   3c560:	bic	w8, w9, w8
   3c564:	cmp	w8, #0x1
   3c568:	b.ne	3c578 <aarch64_ext_addr_offset@@Base+0xd8>  // b.any
   3c56c:	ldrb	w8, [x19, #28]
   3c570:	orr	w8, w8, #0x6
   3c574:	strb	w8, [x19, #28]
   3c578:	ldp	x20, x19, [sp, #48]
   3c57c:	ldp	x22, x21, [sp, #32]
   3c580:	ldr	x23, [sp, #16]
   3c584:	mov	w0, #0x1                   	// #1
   3c588:	ldp	x29, x30, [sp], #64
   3c58c:	ret
   3c590:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c594:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c598:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c59c:	add	x0, x0, #0xac
   3c5a0:	add	x1, x1, #0x718
   3c5a4:	add	x3, x3, #0xe0
   3c5a8:	mov	w2, #0xf4                  	// #244
   3c5ac:	bl	35b30 <__assert_fail@plt>

000000000003c5b0 <aarch64_ext_addr_regoff@@Base>:
   3c5b0:	stp	x29, x30, [sp, #-64]!
   3c5b4:	str	x23, [sp, #16]
   3c5b8:	stp	x22, x21, [sp, #32]
   3c5bc:	stp	x20, x19, [sp, #48]
   3c5c0:	adrp	x22, 9b000 <aarch64_operands@@Base+0x16c38>
   3c5c4:	ldr	x22, [x22, #3944]
   3c5c8:	mov	w23, #0xffffffff            	// #-1
   3c5cc:	mov	x19, x1
   3c5d0:	mov	x29, sp
   3c5d4:	ldp	w8, w9, [x22, #112]
   3c5d8:	ldp	w10, w11, [x22, #224]
   3c5dc:	mov	x20, x3
   3c5e0:	mov	w21, w2
   3c5e4:	lsr	w8, w2, w8
   3c5e8:	lsl	w9, w23, w9
   3c5ec:	lsr	w10, w2, w10
   3c5f0:	lsl	w11, w23, w11
   3c5f4:	bic	w8, w8, w9
   3c5f8:	bic	w9, w10, w11
   3c5fc:	ldp	w10, w11, [x22, #240]
   3c600:	stp	w8, w9, [x1, #16]
   3c604:	mov	w1, #0x1                   	// #1
   3c608:	lsr	w8, w2, w10
   3c60c:	lsl	w9, w23, w11
   3c610:	bic	w0, w8, w9
   3c614:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3c618:	ldp	w8, w9, [x22, #248]
   3c61c:	cmp	w0, #0x9
   3c620:	mov	w10, #0x5                   	// #5
   3c624:	csel	w10, w10, w0, eq  // eq = none
   3c628:	lsr	w8, w21, w8
   3c62c:	lsl	w9, w23, w9
   3c630:	bics	wzr, w8, w9
   3c634:	str	w10, [x19, #32]
   3c638:	b.eq	3c6b8 <aarch64_ext_addr_regoff@@Base+0x108>  // b.none
   3c63c:	ldrsw	x21, [x19, #8]
   3c640:	mov	w8, #0x38                  	// #56
   3c644:	madd	x8, x21, x8, x20
   3c648:	ldrb	w8, [x8, #28]
   3c64c:	cbnz	w8, 3c6e0 <aarch64_ext_addr_regoff@@Base+0x130>
   3c650:	ldr	x8, [x20, #8]
   3c654:	add	x3, x29, #0x18
   3c658:	mov	x0, x20
   3c65c:	mov	w2, w21
   3c660:	add	x1, x8, #0x38
   3c664:	add	x22, x29, #0x18
   3c668:	bl	35410 <aarch64_find_best_match@plt>
   3c66c:	cbz	w0, 3c674 <aarch64_ext_addr_regoff@@Base+0xc4>
   3c670:	ldrb	w0, [x22, x21]
   3c674:	strb	w0, [x19, #4]
   3c678:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3c67c:	and	w8, w0, #0xff
   3c680:	cmp	w8, #0x11
   3c684:	b.cs	3c700 <aarch64_ext_addr_regoff@@Base+0x150>  // b.hs, b.nlast
   3c688:	sub	w8, w8, #0x1
   3c68c:	mov	w9, #0x808b                	// #32907
   3c690:	lsr	x9, x9, x8
   3c694:	tbz	w9, #0, 3c720 <aarch64_ext_addr_regoff@@Base+0x170>
   3c698:	adrp	x9, 58000 <xexit@@Base+0x1dd4>
   3c69c:	add	x9, x9, #0x8eb
   3c6a0:	ldrb	w10, [x19, #36]
   3c6a4:	ldrb	w8, [x9, x8]
   3c6a8:	orr	w9, w10, #0x2
   3c6ac:	str	x8, [x19, #40]
   3c6b0:	strb	w9, [x19, #36]
   3c6b4:	b	3c6c8 <aarch64_ext_addr_regoff@@Base+0x118>
   3c6b8:	ldrb	w8, [x19, #36]
   3c6bc:	str	xzr, [x19, #40]
   3c6c0:	and	w8, w8, #0xfffffffd
   3c6c4:	strb	w8, [x19, #36]
   3c6c8:	ldp	x20, x19, [sp, #48]
   3c6cc:	ldp	x22, x21, [sp, #32]
   3c6d0:	ldr	x23, [sp, #16]
   3c6d4:	mov	w0, #0x1                   	// #1
   3c6d8:	ldp	x29, x30, [sp], #64
   3c6dc:	ret
   3c6e0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c6e4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c6e8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c6ec:	add	x0, x0, #0xac
   3c6f0:	add	x1, x1, #0x718
   3c6f4:	add	x3, x3, #0xe0
   3c6f8:	mov	w2, #0xf4                  	// #244
   3c6fc:	bl	35b30 <__assert_fail@plt>
   3c700:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3c704:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c708:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3c70c:	add	x0, x0, #0x2b4
   3c710:	add	x1, x1, #0x40
   3c714:	add	x3, x3, #0x183
   3c718:	mov	w2, #0x200                 	// #512
   3c71c:	bl	35b30 <__assert_fail@plt>
   3c720:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3c724:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c728:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3c72c:	add	x0, x0, #0x1a8
   3c730:	add	x1, x1, #0x40
   3c734:	add	x3, x3, #0x183
   3c738:	mov	w2, #0x203                 	// #515
   3c73c:	bl	35b30 <__assert_fail@plt>

000000000003c740 <aarch64_ext_addr_simm@@Base>:
   3c740:	sub	sp, sp, #0x50
   3c744:	stp	x29, x30, [sp, #16]
   3c748:	stp	x24, x23, [sp, #32]
   3c74c:	stp	x22, x21, [sp, #48]
   3c750:	stp	x20, x19, [sp, #64]
   3c754:	ldrsw	x23, [x1, #8]
   3c758:	mov	w8, #0x38                  	// #56
   3c75c:	add	x29, sp, #0x10
   3c760:	madd	x8, x23, x8, x3
   3c764:	ldrb	w8, [x8, #28]
   3c768:	cbnz	w8, 3c8cc <aarch64_ext_addr_simm@@Base+0x18c>
   3c76c:	ldr	x8, [x3, #8]
   3c770:	mov	x22, x3
   3c774:	mov	w20, w2
   3c778:	mov	x19, x1
   3c77c:	mov	x21, x0
   3c780:	add	x1, x8, #0x38
   3c784:	add	x3, sp, #0x8
   3c788:	mov	x0, x22
   3c78c:	mov	w2, w23
   3c790:	add	x24, sp, #0x8
   3c794:	bl	35410 <aarch64_find_best_match@plt>
   3c798:	cbz	w0, 3c7a0 <aarch64_ext_addr_simm@@Base+0x60>
   3c79c:	ldrb	w0, [x24, x23]
   3c7a0:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   3c7a4:	ldr	x23, [x23, #3944]
   3c7a8:	mov	w8, #0xffffffff            	// #-1
   3c7ac:	strb	w0, [x19, #4]
   3c7b0:	ldp	w9, w10, [x23, #112]
   3c7b4:	lsr	w9, w20, w9
   3c7b8:	lsl	w10, w8, w10
   3c7bc:	bic	w9, w9, w10
   3c7c0:	str	w9, [x19, #16]
   3c7c4:	ldr	w11, [x21, #20]
   3c7c8:	add	x9, x23, x11, lsl #3
   3c7cc:	ldr	w10, [x9, #4]
   3c7d0:	sub	w9, w10, #0x1
   3c7d4:	cmp	w9, #0x20
   3c7d8:	b.cs	3c8ec <aarch64_ext_addr_simm@@Base+0x1ac>  // b.hs, b.nlast
   3c7dc:	lsl	x11, x11, #3
   3c7e0:	ldr	w11, [x23, x11]
   3c7e4:	lsl	w8, w8, w10
   3c7e8:	mov	w10, #0x1                   	// #1
   3c7ec:	mov	w12, w20
   3c7f0:	lsl	x9, x10, x9
   3c7f4:	lsl	w10, w9, #1
   3c7f8:	lsr	x11, x12, x11
   3c7fc:	sub	w10, w10, #0x1
   3c800:	bic	w8, w11, w8
   3c804:	and	w8, w10, w8
   3c808:	eor	w8, w8, w9
   3c80c:	sub	w8, w8, w9
   3c810:	cmp	w0, #0x19
   3c814:	str	w8, [x19, #20]
   3c818:	b.eq	3c828 <aarch64_ext_addr_simm@@Base+0xe8>  // b.none
   3c81c:	ldr	w8, [x21, #20]
   3c820:	cmp	w8, #0x2c
   3c824:	b.ne	3c83c <aarch64_ext_addr_simm@@Base+0xfc>  // b.any
   3c828:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3c82c:	ldr	w8, [x19, #20]
   3c830:	and	w9, w0, #0xff
   3c834:	mul	w8, w8, w9
   3c838:	str	w8, [x19, #20]
   3c83c:	ldr	x8, [x22, #8]
   3c840:	ldr	w8, [x8, #16]
   3c844:	cmp	w8, #0x3e
   3c848:	b.hi	3c888 <aarch64_ext_addr_simm@@Base+0x148>  // b.pmore
   3c84c:	mov	w9, #0x1                   	// #1
   3c850:	lsl	x8, x9, x8
   3c854:	mov	x9, #0x6c00000000000000    	// #7782220156096217088
   3c858:	tst	x8, x9
   3c85c:	b.eq	3c888 <aarch64_ext_addr_simm@@Base+0x148>  // b.none
   3c860:	ldrb	w8, [x19, #28]
   3c864:	and	w8, w8, #0xfffffffd
   3c868:	strb	w8, [x19, #28]
   3c86c:	ldp	x20, x19, [sp, #64]
   3c870:	ldp	x22, x21, [sp, #48]
   3c874:	ldp	x24, x23, [sp, #32]
   3c878:	ldp	x29, x30, [sp, #16]
   3c87c:	mov	w0, #0x1                   	// #1
   3c880:	add	sp, sp, #0x50
   3c884:	ret
   3c888:	ldrb	w8, [x19, #28]
   3c88c:	mov	w11, #0xffffffff            	// #-1
   3c890:	orr	w9, w8, #0x2
   3c894:	strb	w9, [x19, #28]
   3c898:	ldr	w9, [x21, #24]
   3c89c:	add	x9, x23, x9, lsl #3
   3c8a0:	ldp	w10, w9, [x9]
   3c8a4:	lsr	w10, w20, w10
   3c8a8:	lsl	w9, w11, w9
   3c8ac:	bic	w9, w10, w9
   3c8b0:	cmp	w9, #0x1
   3c8b4:	b.ne	3c8c0 <aarch64_ext_addr_simm@@Base+0x180>  // b.any
   3c8b8:	orr	w8, w8, #0x6
   3c8bc:	b	3c868 <aarch64_ext_addr_simm@@Base+0x128>
   3c8c0:	mov	w9, #0xa                   	// #10
   3c8c4:	orr	w8, w8, w9
   3c8c8:	b	3c868 <aarch64_ext_addr_simm@@Base+0x128>
   3c8cc:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c8d0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c8d4:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c8d8:	add	x0, x0, #0xac
   3c8dc:	add	x1, x1, #0x718
   3c8e0:	add	x3, x3, #0xe0
   3c8e4:	mov	w2, #0xf4                  	// #244
   3c8e8:	bl	35b30 <__assert_fail@plt>
   3c8ec:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c8f0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3c8f4:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3c8f8:	add	x0, x0, #0x24f
   3c8fc:	add	x1, x1, #0x718
   3c900:	add	x3, x3, #0x256
   3c904:	mov	w2, #0xba                  	// #186
   3c908:	bl	35b30 <__assert_fail@plt>

000000000003c90c <aarch64_ext_addr_uimm12@@Base>:
   3c90c:	stp	x29, x30, [sp, #-64]!
   3c910:	stp	x22, x21, [sp, #32]
   3c914:	stp	x20, x19, [sp, #48]
   3c918:	ldrsw	x22, [x1, #8]
   3c91c:	mov	w9, #0x38                  	// #56
   3c920:	str	x23, [sp, #16]
   3c924:	mov	x29, sp
   3c928:	madd	x9, x22, x9, x3
   3c92c:	ldrb	w9, [x9, #28]
   3c930:	cbnz	w9, 3c9f8 <aarch64_ext_addr_uimm12@@Base+0xec>
   3c934:	ldr	x9, [x3, #8]
   3c938:	mov	x8, x3
   3c93c:	mov	w20, w2
   3c940:	mov	x19, x1
   3c944:	mov	x21, x0
   3c948:	add	x1, x9, #0x38
   3c94c:	add	x3, x29, #0x18
   3c950:	mov	x0, x8
   3c954:	mov	w2, w22
   3c958:	add	x23, x29, #0x18
   3c95c:	bl	35410 <aarch64_find_best_match@plt>
   3c960:	cbz	w0, 3c968 <aarch64_ext_addr_uimm12@@Base+0x5c>
   3c964:	ldrb	w0, [x23, x22]
   3c968:	strb	w0, [x19, #4]
   3c96c:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3c970:	and	w8, w0, #0xff
   3c974:	cmp	w8, #0x11
   3c978:	b.cs	3ca18 <aarch64_ext_addr_uimm12@@Base+0x10c>  // b.hs, b.nlast
   3c97c:	sub	w8, w8, #0x1
   3c980:	mov	w9, #0x808b                	// #32907
   3c984:	lsr	x9, x9, x8
   3c988:	tbz	w9, #0, 3ca38 <aarch64_ext_addr_uimm12@@Base+0x12c>
   3c98c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3c990:	ldr	w9, [x21, #20]
   3c994:	ldr	x10, [x10, #3944]
   3c998:	mov	w12, #0xffffffff            	// #-1
   3c99c:	ldr	x23, [sp, #16]
   3c9a0:	mov	w0, #0x1                   	// #1
   3c9a4:	add	x9, x10, x9, lsl #3
   3c9a8:	ldp	w11, w9, [x9]
   3c9ac:	lsr	w11, w20, w11
   3c9b0:	lsl	w9, w12, w9
   3c9b4:	bic	w9, w11, w9
   3c9b8:	str	w9, [x19, #16]
   3c9bc:	ldr	w9, [x21, #24]
   3c9c0:	adrp	x11, 58000 <xexit@@Base+0x1dd4>
   3c9c4:	add	x11, x11, #0x8eb
   3c9c8:	ldrb	w8, [x11, x8]
   3c9cc:	add	x9, x10, x9, lsl #3
   3c9d0:	ldp	w10, w9, [x9]
   3c9d4:	lsr	w10, w20, w10
   3c9d8:	lsl	w9, w12, w9
   3c9dc:	bic	w9, w10, w9
   3c9e0:	lsl	w8, w9, w8
   3c9e4:	str	w8, [x19, #20]
   3c9e8:	ldp	x20, x19, [sp, #48]
   3c9ec:	ldp	x22, x21, [sp, #32]
   3c9f0:	ldp	x29, x30, [sp], #64
   3c9f4:	ret
   3c9f8:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3c9fc:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ca00:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3ca04:	add	x0, x0, #0xac
   3ca08:	add	x1, x1, #0x718
   3ca0c:	add	x3, x3, #0xe0
   3ca10:	mov	w2, #0xf4                  	// #244
   3ca14:	bl	35b30 <__assert_fail@plt>
   3ca18:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3ca1c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ca20:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ca24:	add	x0, x0, #0x2b4
   3ca28:	add	x1, x1, #0x40
   3ca2c:	add	x3, x3, #0x183
   3ca30:	mov	w2, #0x200                 	// #512
   3ca34:	bl	35b30 <__assert_fail@plt>
   3ca38:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3ca3c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ca40:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ca44:	add	x0, x0, #0x1a8
   3ca48:	add	x1, x1, #0x40
   3ca4c:	add	x3, x3, #0x183
   3ca50:	mov	w2, #0x203                 	// #515
   3ca54:	bl	35b30 <__assert_fail@plt>

000000000003ca58 <aarch64_ext_addr_simm10@@Base>:
   3ca58:	stp	x29, x30, [sp, #-64]!
   3ca5c:	stp	x22, x21, [sp, #32]
   3ca60:	stp	x20, x19, [sp, #48]
   3ca64:	ldrsw	x22, [x1, #8]
   3ca68:	mov	w9, #0x38                  	// #56
   3ca6c:	str	x23, [sp, #16]
   3ca70:	mov	x29, sp
   3ca74:	madd	x9, x22, x9, x3
   3ca78:	ldrb	w9, [x9, #28]
   3ca7c:	cbnz	w9, 3cb48 <aarch64_ext_addr_simm10@@Base+0xf0>
   3ca80:	ldr	x9, [x3, #8]
   3ca84:	mov	x8, x3
   3ca88:	mov	w20, w2
   3ca8c:	mov	x19, x1
   3ca90:	mov	x21, x0
   3ca94:	add	x1, x9, #0x38
   3ca98:	add	x3, x29, #0x18
   3ca9c:	mov	x0, x8
   3caa0:	mov	w2, w22
   3caa4:	add	x23, x29, #0x18
   3caa8:	bl	35410 <aarch64_find_best_match@plt>
   3caac:	cbz	w0, 3cab8 <aarch64_ext_addr_simm10@@Base+0x60>
   3cab0:	ldrb	w8, [x23, x22]
   3cab4:	b	3cabc <aarch64_ext_addr_simm10@@Base+0x64>
   3cab8:	mov	w8, wzr
   3cabc:	strb	w8, [x19, #4]
   3cac0:	adrp	x22, 9b000 <aarch64_operands@@Base+0x16c38>
   3cac4:	ldr	w8, [x21, #20]
   3cac8:	ldr	x22, [x22, #3944]
   3cacc:	mov	w23, #0xffffffff            	// #-1
   3cad0:	mov	w2, #0x2                   	// #2
   3cad4:	mov	w0, w20
   3cad8:	add	x8, x22, x8, lsl #3
   3cadc:	ldp	w9, w8, [x8]
   3cae0:	mov	w1, wzr
   3cae4:	lsr	w9, w20, w9
   3cae8:	lsl	w8, w23, w8
   3caec:	bic	w8, w9, w8
   3caf0:	str	w8, [x19, #16]
   3caf4:	ldp	w3, w4, [x21, #24]
   3caf8:	bl	35440 <extract_fields@plt>
   3cafc:	sbfiz	w8, w0, #3, #10
   3cb00:	str	w8, [x19, #20]
   3cb04:	ldr	w8, [x21, #32]
   3cb08:	add	x8, x22, x8, lsl #3
   3cb0c:	ldp	w9, w8, [x8]
   3cb10:	lsr	w9, w20, w9
   3cb14:	lsl	w8, w23, w8
   3cb18:	bic	w8, w9, w8
   3cb1c:	cmp	w8, #0x1
   3cb20:	b.ne	3cb30 <aarch64_ext_addr_simm10@@Base+0xd8>  // b.any
   3cb24:	ldrb	w8, [x19, #28]
   3cb28:	orr	w8, w8, #0x6
   3cb2c:	strb	w8, [x19, #28]
   3cb30:	ldp	x20, x19, [sp, #48]
   3cb34:	ldp	x22, x21, [sp, #32]
   3cb38:	ldr	x23, [sp, #16]
   3cb3c:	mov	w0, #0x1                   	// #1
   3cb40:	ldp	x29, x30, [sp], #64
   3cb44:	ret
   3cb48:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3cb4c:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3cb50:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3cb54:	add	x0, x0, #0xac
   3cb58:	add	x1, x1, #0x718
   3cb5c:	add	x3, x3, #0xe0
   3cb60:	mov	w2, #0xf4                  	// #244
   3cb64:	bl	35b30 <__assert_fail@plt>

000000000003cb68 <aarch64_ext_simd_addr_post@@Base>:
   3cb68:	stp	x29, x30, [sp, #-48]!
   3cb6c:	str	x21, [sp, #16]
   3cb70:	stp	x20, x19, [sp, #32]
   3cb74:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3cb78:	ldr	x8, [x3, #8]
   3cb7c:	ldr	x9, [x9, #3944]
   3cb80:	mov	w13, #0xffffffff            	// #-1
   3cb84:	mov	x19, x1
   3cb88:	ldr	x8, [x8, #120]
   3cb8c:	ldp	w10, w12, [x9, #112]
   3cb90:	ldp	w11, w9, [x9, #224]
   3cb94:	mov	x29, sp
   3cb98:	lsr	w10, w2, w10
   3cb9c:	lsr	w11, w2, w11
   3cba0:	lsl	w9, w13, w9
   3cba4:	lsl	w12, w13, w12
   3cba8:	bic	w9, w11, w9
   3cbac:	bic	w10, w10, w12
   3cbb0:	cmp	w9, #0x1f
   3cbb4:	stp	w10, w9, [x1, #16]
   3cbb8:	b.ne	3cbe8 <aarch64_ext_simd_addr_post@@Base+0x80>  // b.any
   3cbbc:	ldr	x9, [x3, #8]
   3cbc0:	mov	x20, x3
   3cbc4:	ldr	w9, [x9, #32]
   3cbc8:	cmp	w9, #0x25
   3cbcc:	b.ne	3cbf4 <aarch64_ext_simd_addr_post@@Base+0x8c>  // b.any
   3cbd0:	and	x8, x8, #0x7000000
   3cbd4:	mov	w9, #0x1000000             	// #16777216
   3cbd8:	cmp	x8, x9
   3cbdc:	b.ne	3cc24 <aarch64_ext_simd_addr_post@@Base+0xbc>  // b.any
   3cbe0:	mov	w21, #0x1                   	// #1
   3cbe4:	b	3cc2c <aarch64_ext_simd_addr_post@@Base+0xc4>
   3cbe8:	mov	w8, #0x1                   	// #1
   3cbec:	str	w8, [x19, #24]
   3cbf0:	b	3cc40 <aarch64_ext_simd_addr_post@@Base+0xd8>
   3cbf4:	ldrh	w8, [x20, #40]
   3cbf8:	ldrb	w0, [x20, #28]
   3cbfc:	ubfx	w21, w8, #5, #3
   3cc00:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3cc04:	ldrb	w8, [x20, #28]
   3cc08:	and	w9, w0, #0xff
   3cc0c:	mul	w20, w21, w9
   3cc10:	mov	w0, w8
   3cc14:	bl	35960 <aarch64_get_qualifier_nelem@plt>
   3cc18:	and	w8, w0, #0xff
   3cc1c:	mul	w8, w20, w8
   3cc20:	b	3cc3c <aarch64_ext_simd_addr_post@@Base+0xd4>
   3cc24:	ldrh	w8, [x20, #40]
   3cc28:	ubfx	w21, w8, #5, #3
   3cc2c:	ldrb	w0, [x20, #28]
   3cc30:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3cc34:	and	w8, w0, #0xff
   3cc38:	mul	w8, w21, w8
   3cc3c:	str	w8, [x19, #20]
   3cc40:	ldrb	w8, [x19, #28]
   3cc44:	ldr	x21, [sp, #16]
   3cc48:	mov	w0, #0x1                   	// #1
   3cc4c:	orr	w8, w8, #0x2
   3cc50:	strb	w8, [x19, #28]
   3cc54:	ldp	x20, x19, [sp, #32]
   3cc58:	ldp	x29, x30, [sp], #48
   3cc5c:	ret

000000000003cc60 <aarch64_ext_cond@@Base>:
   3cc60:	stp	x29, x30, [sp, #-32]!
   3cc64:	str	x19, [sp, #16]
   3cc68:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cc6c:	ldr	x8, [x8, #3944]
   3cc70:	mov	w10, #0xffffffff            	// #-1
   3cc74:	mov	x29, sp
   3cc78:	mov	x19, x1
   3cc7c:	ldp	w9, w8, [x8, #184]
   3cc80:	lsr	w9, w2, w9
   3cc84:	lsl	w8, w10, w8
   3cc88:	bic	w0, w9, w8
   3cc8c:	bl	353c0 <get_cond_from_value@plt>
   3cc90:	mov	x8, x0
   3cc94:	str	x8, [x19, #16]
   3cc98:	ldr	x19, [sp, #16]
   3cc9c:	mov	w0, #0x1                   	// #1
   3cca0:	ldp	x29, x30, [sp], #32
   3cca4:	ret

000000000003cca8 <aarch64_ext_sysreg@@Base>:
   3cca8:	stp	x29, x30, [sp, #-32]!
   3ccac:	stp	x20, x19, [sp, #16]
   3ccb0:	mov	x20, x3
   3ccb4:	mov	w0, w2
   3ccb8:	mov	x19, x1
   3ccbc:	mov	w2, #0x5                   	// #5
   3ccc0:	mov	w3, #0x15                  	// #21
   3ccc4:	mov	w4, #0x14                  	// #20
   3ccc8:	mov	w5, #0x13                  	// #19
   3cccc:	mov	w6, #0x12                  	// #18
   3ccd0:	mov	w7, #0x11                  	// #17
   3ccd4:	mov	w1, wzr
   3ccd8:	mov	x29, sp
   3ccdc:	bl	35440 <extract_fields@plt>
   3cce0:	stp	w0, wzr, [x19, #16]
   3cce4:	ldr	x8, [x20, #8]
   3cce8:	ldr	w9, [x8, #16]
   3ccec:	cmp	w9, #0x46
   3ccf0:	b.ne	3cd24 <aarch64_ext_sysreg@@Base+0x7c>  // b.any
   3ccf4:	ldr	x8, [x8, #120]
   3ccf8:	mov	w9, #0x40000000            	// #1073741824
   3ccfc:	and	x8, x8, #0x60000000
   3cd00:	cmp	x8, x9
   3cd04:	b.eq	3cd1c <aarch64_ext_sysreg@@Base+0x74>  // b.none
   3cd08:	mov	w9, #0x20000000            	// #536870912
   3cd0c:	cmp	x8, x9
   3cd10:	b.ne	3cd24 <aarch64_ext_sysreg@@Base+0x7c>  // b.any
   3cd14:	mov	w8, #0x8                   	// #8
   3cd18:	b	3cd20 <aarch64_ext_sysreg@@Base+0x78>
   3cd1c:	mov	w8, #0x10                  	// #16
   3cd20:	str	w8, [x19, #20]
   3cd24:	ldp	x20, x19, [sp, #16]
   3cd28:	mov	w0, #0x1                   	// #1
   3cd2c:	ldp	x29, x30, [sp], #32
   3cd30:	ret

000000000003cd34 <aarch64_ext_pstatefield@@Base>:
   3cd34:	stp	x29, x30, [sp, #-32]!
   3cd38:	str	x19, [sp, #16]
   3cd3c:	mov	w0, w2
   3cd40:	mov	x19, x1
   3cd44:	mov	w2, #0x2                   	// #2
   3cd48:	mov	w3, #0x14                  	// #20
   3cd4c:	mov	w4, #0x11                  	// #17
   3cd50:	mov	w1, wzr
   3cd54:	mov	x29, sp
   3cd58:	bl	35440 <extract_fields@plt>
   3cd5c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cd60:	ldr	x8, [x8, #3832]
   3cd64:	str	w0, [x19, #16]
   3cd68:	ldr	x9, [x8]
   3cd6c:	cbz	x9, 3cd88 <aarch64_ext_pstatefield@@Base+0x54>
   3cd70:	add	x8, x8, #0x10
   3cd74:	ldur	w9, [x8, #-8]
   3cd78:	cmp	w9, w0
   3cd7c:	b.eq	3cd90 <aarch64_ext_pstatefield@@Base+0x5c>  // b.none
   3cd80:	ldr	x9, [x8], #16
   3cd84:	cbnz	x9, 3cd74 <aarch64_ext_pstatefield@@Base+0x40>
   3cd88:	mov	w0, wzr
   3cd8c:	b	3cd94 <aarch64_ext_pstatefield@@Base+0x60>
   3cd90:	mov	w0, #0x1                   	// #1
   3cd94:	ldr	x19, [sp, #16]
   3cd98:	ldp	x29, x30, [sp], #32
   3cd9c:	ret

000000000003cda0 <aarch64_ext_sysins_op@@Base>:
   3cda0:	stp	x29, x30, [sp, #-32]!
   3cda4:	str	x19, [sp, #16]
   3cda8:	mov	w0, w2
   3cdac:	mov	x19, x1
   3cdb0:	mov	w2, #0x5                   	// #5
   3cdb4:	mov	w3, #0x15                  	// #21
   3cdb8:	mov	w4, #0x14                  	// #20
   3cdbc:	mov	w5, #0x13                  	// #19
   3cdc0:	mov	w6, #0x12                  	// #18
   3cdc4:	mov	w7, #0x11                  	// #17
   3cdc8:	mov	w1, wzr
   3cdcc:	mov	x29, sp
   3cdd0:	bl	35440 <extract_fields@plt>
   3cdd4:	ldr	w8, [x19]
   3cdd8:	sub	w8, w8, #0x61
   3cddc:	cmp	w8, #0x4
   3cde0:	b.hi	3ce90 <aarch64_ext_sysins_op@@Base+0xf0>  // b.pmore
   3cde4:	adrp	x9, 57000 <xexit@@Base+0xdd4>
   3cde8:	add	x9, x9, #0x5fd
   3cdec:	adr	x10, 3ce04 <aarch64_ext_sysins_op@@Base+0x64>
   3cdf0:	ldrb	w11, [x9, x8]
   3cdf4:	add	x10, x10, x11, lsl #2
   3cdf8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cdfc:	ldr	x8, [x8, #3992]
   3ce00:	br	x10
   3ce04:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3ce08:	ldr	x8, [x8, #3920]
   3ce0c:	ldr	x9, [x8]
   3ce10:	cbnz	x9, 3ce40 <aarch64_ext_sysins_op@@Base+0xa0>
   3ce14:	b	3ce80 <aarch64_ext_sysins_op@@Base+0xe0>
   3ce18:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3ce1c:	ldr	x8, [x8, #4064]
   3ce20:	and	w0, w0, #0xfffffff8
   3ce24:	ldr	x9, [x8]
   3ce28:	cbnz	x9, 3ce40 <aarch64_ext_sysins_op@@Base+0xa0>
   3ce2c:	b	3ce80 <aarch64_ext_sysins_op@@Base+0xe0>
   3ce30:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3ce34:	ldr	x8, [x8, #3888]
   3ce38:	ldr	x9, [x8]
   3ce3c:	cbz	x9, 3ce80 <aarch64_ext_sysins_op@@Base+0xe0>
   3ce40:	ldr	w9, [x8, #8]
   3ce44:	cmp	w9, w0
   3ce48:	b.eq	3ce64 <aarch64_ext_sysins_op@@Base+0xc4>  // b.none
   3ce4c:	ldr	x9, [x8, #16]
   3ce50:	cbz	x9, 3ce80 <aarch64_ext_sysins_op@@Base+0xe0>
   3ce54:	ldr	w9, [x8, #24]
   3ce58:	add	x8, x8, #0x10
   3ce5c:	cmp	w9, w0
   3ce60:	b.ne	3ce4c <aarch64_ext_sysins_op@@Base+0xac>  // b.any
   3ce64:	mov	w0, #0x1                   	// #1
   3ce68:	str	x8, [x19, #16]
   3ce6c:	b	3ce84 <aarch64_ext_sysins_op@@Base+0xe4>
   3ce70:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3ce74:	ldr	x8, [x8, #3896]
   3ce78:	ldr	x9, [x8]
   3ce7c:	cbnz	x9, 3ce40 <aarch64_ext_sysins_op@@Base+0xa0>
   3ce80:	mov	w0, wzr
   3ce84:	ldr	x19, [sp, #16]
   3ce88:	ldp	x29, x30, [sp], #32
   3ce8c:	ret
   3ce90:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3ce94:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3ce98:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3ce9c:	add	x0, x0, #0x2b4
   3cea0:	add	x1, x1, #0x718
   3cea4:	add	x3, x3, #0xdf8
   3cea8:	mov	w2, #0x4e6                 	// #1254
   3ceac:	bl	35b30 <__assert_fail@plt>

000000000003ceb0 <aarch64_ext_barrier@@Base>:
   3ceb0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3ceb4:	ldr	x8, [x8, #3944]
   3ceb8:	adrp	x12, 9b000 <aarch64_operands@@Base+0x16c38>
   3cebc:	mov	w11, #0xffffffff            	// #-1
   3cec0:	ldr	x12, [x12, #4040]
   3cec4:	ldp	w10, w8, [x8, #144]
   3cec8:	mov	w9, w2
   3cecc:	mov	w0, #0x1                   	// #1
   3ced0:	lsl	w8, w11, w8
   3ced4:	lsr	x9, x9, x10
   3ced8:	mvn	w8, w8
   3cedc:	and	x8, x9, x8
   3cee0:	add	x8, x12, x8, lsl #4
   3cee4:	str	x8, [x1, #16]
   3cee8:	ret

000000000003ceec <aarch64_ext_prfop@@Base>:
   3ceec:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cef0:	ldr	x8, [x8, #3944]
   3cef4:	adrp	x12, 9b000 <aarch64_operands@@Base+0x16c38>
   3cef8:	mov	w11, #0xffffffff            	// #-1
   3cefc:	ldr	x12, [x12, #3960]
   3cf00:	ldp	w10, w8, [x8, #96]
   3cf04:	mov	w9, w2
   3cf08:	mov	w0, #0x1                   	// #1
   3cf0c:	lsl	w8, w11, w8
   3cf10:	lsr	x9, x9, x10
   3cf14:	mvn	w8, w8
   3cf18:	and	x8, x9, x8
   3cf1c:	add	x8, x12, x8, lsl #4
   3cf20:	str	x8, [x1, #16]
   3cf24:	ret

000000000003cf28 <aarch64_ext_hint@@Base>:
   3cf28:	stp	x29, x30, [sp, #-32]!
   3cf2c:	str	x19, [sp, #16]
   3cf30:	mov	w0, w2
   3cf34:	mov	x19, x1
   3cf38:	mov	w2, #0x2                   	// #2
   3cf3c:	mov	w3, #0x12                  	// #18
   3cf40:	mov	w4, #0x11                  	// #17
   3cf44:	mov	w1, wzr
   3cf48:	mov	x29, sp
   3cf4c:	bl	35440 <extract_fields@plt>
   3cf50:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cf54:	ldr	x8, [x8, #4016]
   3cf58:	ldr	x9, [x8]
   3cf5c:	cbz	x9, 3cf98 <aarch64_ext_hint@@Base+0x70>
   3cf60:	ldrb	w9, [x8, #8]
   3cf64:	cmp	w0, w9
   3cf68:	b.eq	3cf8c <aarch64_ext_hint@@Base+0x64>  // b.none
   3cf6c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3cf70:	ldr	x8, [x8, #4016]
   3cf74:	ldr	x9, [x8, #16]
   3cf78:	cbz	x9, 3cf98 <aarch64_ext_hint@@Base+0x70>
   3cf7c:	ldrb	w9, [x8, #24]
   3cf80:	add	x8, x8, #0x10
   3cf84:	cmp	w0, w9
   3cf88:	b.ne	3cf74 <aarch64_ext_hint@@Base+0x4c>  // b.any
   3cf8c:	mov	w0, #0x1                   	// #1
   3cf90:	str	x8, [x19, #16]
   3cf94:	b	3cf9c <aarch64_ext_hint@@Base+0x74>
   3cf98:	mov	w0, wzr
   3cf9c:	ldr	x19, [sp, #16]
   3cfa0:	ldp	x29, x30, [sp], #32
   3cfa4:	ret

000000000003cfa8 <aarch64_ext_reg_extended@@Base>:
   3cfa8:	stp	x29, x30, [sp, #-64]!
   3cfac:	stp	x24, x23, [sp, #16]
   3cfb0:	stp	x22, x21, [sp, #32]
   3cfb4:	stp	x20, x19, [sp, #48]
   3cfb8:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   3cfbc:	ldr	x23, [x23, #3944]
   3cfc0:	mov	w24, #0xffffffff            	// #-1
   3cfc4:	mov	x19, x1
   3cfc8:	mov	x29, sp
   3cfcc:	ldp	w8, w9, [x23, #224]
   3cfd0:	ldp	w10, w11, [x23, #240]
   3cfd4:	mov	x20, x3
   3cfd8:	mov	w21, w2
   3cfdc:	lsr	w8, w2, w8
   3cfe0:	lsl	w9, w24, w9
   3cfe4:	bic	w8, w8, w9
   3cfe8:	str	w8, [x1, #16]
   3cfec:	lsr	w8, w2, w10
   3cff0:	lsl	w9, w24, w11
   3cff4:	bic	w0, w8, w9
   3cff8:	mov	w1, #0x1                   	// #1
   3cffc:	mov	w22, #0x1                   	// #1
   3d000:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3d004:	ldp	w8, w9, [x23, #176]
   3d008:	ldrb	w10, [x19, #36]
   3d00c:	mov	w11, w21
   3d010:	str	w0, [x19, #32]
   3d014:	lsl	w9, w24, w9
   3d018:	lsr	x8, x11, x8
   3d01c:	mvn	w9, w9
   3d020:	orr	w10, w10, #0x1
   3d024:	and	x8, x8, x9
   3d028:	str	x8, [x19, #40]
   3d02c:	strb	w10, [x19, #36]
   3d030:	ldrb	w8, [x20, #28]
   3d034:	cbz	w8, 3d074 <aarch64_ext_reg_extended@@Base+0xcc>
   3d038:	strb	w22, [x19, #4]
   3d03c:	ldrb	w8, [x20, #28]
   3d040:	cmp	w8, #0x2
   3d044:	b.ne	3d05c <aarch64_ext_reg_extended@@Base+0xb4>  // b.any
   3d048:	orr	w8, w0, #0x4
   3d04c:	cmp	w8, #0xd
   3d050:	b.ne	3d05c <aarch64_ext_reg_extended@@Base+0xb4>  // b.any
   3d054:	mov	w8, #0x2                   	// #2
   3d058:	strb	w8, [x19, #4]
   3d05c:	ldp	x20, x19, [sp, #48]
   3d060:	ldp	x22, x21, [sp, #32]
   3d064:	ldp	x24, x23, [sp, #16]
   3d068:	mov	w0, #0x1                   	// #1
   3d06c:	ldp	x29, x30, [sp], #64
   3d070:	ret
   3d074:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3d078:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3d07c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3d080:	add	x0, x0, #0xe85
   3d084:	add	x1, x1, #0x718
   3d088:	add	x3, x3, #0xeb9
   3d08c:	mov	w2, #0x547                 	// #1351
   3d090:	bl	35b30 <__assert_fail@plt>

000000000003d094 <aarch64_ext_reg_shifted@@Base>:
   3d094:	stp	x29, x30, [sp, #-64]!
   3d098:	str	x23, [sp, #16]
   3d09c:	stp	x22, x21, [sp, #32]
   3d0a0:	stp	x20, x19, [sp, #48]
   3d0a4:	adrp	x23, 9b000 <aarch64_operands@@Base+0x16c38>
   3d0a8:	ldr	x23, [x23, #3944]
   3d0ac:	mov	w22, #0xffffffff            	// #-1
   3d0b0:	mov	x19, x1
   3d0b4:	mov	x29, sp
   3d0b8:	ldp	w8, w9, [x23, #224]
   3d0bc:	ldr	w10, [x23, #280]
   3d0c0:	ldr	w11, [x23, #284]
   3d0c4:	mov	x21, x3
   3d0c8:	lsr	w8, w2, w8
   3d0cc:	lsl	w9, w22, w9
   3d0d0:	bic	w8, w8, w9
   3d0d4:	str	w8, [x1, #16]
   3d0d8:	lsr	w8, w2, w10
   3d0dc:	lsl	w9, w22, w11
   3d0e0:	bic	w0, w8, w9
   3d0e4:	mov	w1, wzr
   3d0e8:	mov	w20, w2
   3d0ec:	bl	35c00 <aarch64_get_operand_modifier_from_value@plt>
   3d0f0:	cmp	w0, #0x2
   3d0f4:	str	w0, [x19, #32]
   3d0f8:	b.ne	3d10c <aarch64_ext_reg_shifted@@Base+0x78>  // b.any
   3d0fc:	ldr	x8, [x21, #8]
   3d100:	ldr	w8, [x8, #16]
   3d104:	cmp	w8, #0x42
   3d108:	b.ne	3d140 <aarch64_ext_reg_shifted@@Base+0xac>  // b.any
   3d10c:	ldr	w9, [x23, #308]
   3d110:	ldr	w8, [x23, #304]
   3d114:	ldrb	w10, [x19, #36]
   3d118:	mov	w11, w20
   3d11c:	lsl	w9, w22, w9
   3d120:	lsr	x8, x11, x8
   3d124:	mvn	w9, w9
   3d128:	orr	w10, w10, #0x1
   3d12c:	and	x8, x8, x9
   3d130:	mov	w0, #0x1                   	// #1
   3d134:	strb	w10, [x19, #36]
   3d138:	str	x8, [x19, #40]
   3d13c:	b	3d144 <aarch64_ext_reg_shifted@@Base+0xb0>
   3d140:	mov	w0, wzr
   3d144:	ldp	x20, x19, [sp, #48]
   3d148:	ldp	x22, x21, [sp, #32]
   3d14c:	ldr	x23, [sp, #16]
   3d150:	ldp	x29, x30, [sp], #64
   3d154:	ret

000000000003d158 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   3d158:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d15c:	ldr	x8, [x8, #3944]
   3d160:	ldr	w10, [x0, #20]
   3d164:	mov	w9, #0xffffffff            	// #-1
   3d168:	ldrb	w12, [x1, #28]
   3d16c:	ldr	w11, [x8, #776]
   3d170:	ldr	w13, [x8, #780]
   3d174:	add	x8, x8, x10, lsl #3
   3d178:	and	w12, w12, #0xfffffff9
   3d17c:	lsr	w10, w2, w11
   3d180:	ldp	w11, w8, [x8]
   3d184:	lsl	w13, w9, w13
   3d188:	bic	w10, w10, w13
   3d18c:	orr	w12, w12, #0x4
   3d190:	lsr	w11, w2, w11
   3d194:	lsl	w8, w9, w8
   3d198:	bic	w8, w11, w8
   3d19c:	str	w8, [x1, #16]
   3d1a0:	ldr	w8, [x0, #16]
   3d1a4:	add	w9, w10, #0x8
   3d1a8:	and	w9, w9, #0xf
   3d1ac:	subs	w9, w9, #0x8
   3d1b0:	ubfx	w8, w8, #5, #3
   3d1b4:	add	w8, w8, #0x1
   3d1b8:	mul	w8, w8, w9
   3d1bc:	stp	w8, wzr, [x1, #20]
   3d1c0:	strb	w12, [x1, #28]
   3d1c4:	b.eq	3d1d0 <aarch64_ext_sve_addr_ri_s4xvl@@Base+0x78>  // b.none
   3d1c8:	mov	w9, #0xf                   	// #15
   3d1cc:	str	w9, [x1, #32]
   3d1d0:	ldrb	w10, [x1, #36]
   3d1d4:	mov	w9, #0x1                   	// #1
   3d1d8:	cmp	w8, #0x0
   3d1dc:	str	x9, [x1, #40]
   3d1e0:	cset	w8, ne  // ne = any
   3d1e4:	and	w9, w10, #0xfc
   3d1e8:	orr	w8, w9, w8
   3d1ec:	mov	w0, #0x1                   	// #1
   3d1f0:	strb	w8, [x1, #36]
   3d1f4:	ret

000000000003d1f8 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   3d1f8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d1fc:	ldr	x8, [x8, #3944]
   3d200:	ldr	w10, [x0, #20]
   3d204:	mov	w9, #0xffffffff            	// #-1
   3d208:	ldrb	w12, [x1, #28]
   3d20c:	ldr	w11, [x8, #800]
   3d210:	ldr	w13, [x8, #804]
   3d214:	add	x8, x8, x10, lsl #3
   3d218:	and	w12, w12, #0xfffffff9
   3d21c:	lsr	w10, w2, w11
   3d220:	ldp	w11, w8, [x8]
   3d224:	lsl	w13, w9, w13
   3d228:	bic	w10, w10, w13
   3d22c:	orr	w12, w12, #0x4
   3d230:	lsr	w11, w2, w11
   3d234:	lsl	w8, w9, w8
   3d238:	bic	w8, w11, w8
   3d23c:	str	w8, [x1, #16]
   3d240:	ldr	w8, [x0, #16]
   3d244:	add	w9, w10, #0x20
   3d248:	and	w9, w9, #0x3f
   3d24c:	subs	w9, w9, #0x20
   3d250:	ubfx	w8, w8, #5, #3
   3d254:	add	w8, w8, #0x1
   3d258:	mul	w8, w8, w9
   3d25c:	stp	w8, wzr, [x1, #20]
   3d260:	strb	w12, [x1, #28]
   3d264:	b.eq	3d270 <aarch64_ext_sve_addr_ri_s6xvl@@Base+0x78>  // b.none
   3d268:	mov	w9, #0xf                   	// #15
   3d26c:	str	w9, [x1, #32]
   3d270:	ldrb	w10, [x1, #36]
   3d274:	mov	w9, #0x1                   	// #1
   3d278:	cmp	w8, #0x0
   3d27c:	str	x9, [x1, #40]
   3d280:	cset	w8, ne  // ne = any
   3d284:	and	w9, w10, #0xfc
   3d288:	orr	w8, w9, w8
   3d28c:	mov	w0, #0x1                   	// #1
   3d290:	strb	w8, [x1, #36]
   3d294:	ret

000000000003d298 <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   3d298:	stp	x29, x30, [sp, #-48]!
   3d29c:	stp	x20, x19, [sp, #32]
   3d2a0:	mov	w20, w2
   3d2a4:	str	x21, [sp, #16]
   3d2a8:	mov	x19, x1
   3d2ac:	mov	x21, x0
   3d2b0:	mov	w2, #0x2                   	// #2
   3d2b4:	mov	w3, #0x64                  	// #100
   3d2b8:	mov	w4, #0x16                  	// #22
   3d2bc:	mov	w0, w20
   3d2c0:	mov	w1, wzr
   3d2c4:	mov	x29, sp
   3d2c8:	bl	35440 <extract_fields@plt>
   3d2cc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d2d0:	ldr	w8, [x21, #20]
   3d2d4:	ldr	x9, [x9, #3944]
   3d2d8:	mov	w11, #0xffffffff            	// #-1
   3d2dc:	add	w10, w0, #0x100
   3d2e0:	and	w10, w10, #0x1ff
   3d2e4:	add	x8, x9, x8, lsl #3
   3d2e8:	ldp	w9, w8, [x8]
   3d2ec:	lsr	w9, w20, w9
   3d2f0:	lsl	w8, w11, w8
   3d2f4:	bic	w8, w9, w8
   3d2f8:	str	w8, [x19, #16]
   3d2fc:	ldr	w8, [x21, #16]
   3d300:	ldrb	w11, [x19, #28]
   3d304:	subs	w9, w10, #0x100
   3d308:	ubfx	w8, w8, #5, #3
   3d30c:	and	w10, w11, #0xfffffff9
   3d310:	add	w8, w8, #0x1
   3d314:	orr	w10, w10, #0x4
   3d318:	mul	w8, w8, w9
   3d31c:	stp	w8, wzr, [x19, #20]
   3d320:	strb	w10, [x19, #28]
   3d324:	b.eq	3d330 <aarch64_ext_sve_addr_ri_s9xvl@@Base+0x98>  // b.none
   3d328:	mov	w9, #0xf                   	// #15
   3d32c:	str	w9, [x19, #32]
   3d330:	ldrb	w10, [x19, #36]
   3d334:	mov	w9, #0x1                   	// #1
   3d338:	cmp	w8, #0x0
   3d33c:	str	x9, [x19, #40]
   3d340:	cset	w8, ne  // ne = any
   3d344:	and	w9, w10, #0xfc
   3d348:	orr	w8, w9, w8
   3d34c:	strb	w8, [x19, #36]
   3d350:	ldp	x20, x19, [sp, #32]
   3d354:	ldr	x21, [sp, #16]
   3d358:	mov	w0, #0x1                   	// #1
   3d35c:	ldp	x29, x30, [sp], #48
   3d360:	ret

000000000003d364 <aarch64_ext_sve_addr_ri_s4@@Base>:
   3d364:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d368:	ldr	x8, [x8, #3944]
   3d36c:	ldr	w9, [x0, #20]
   3d370:	mov	w10, w2
   3d374:	ldr	w11, [x8, #776]
   3d378:	ldr	w12, [x8, #780]
   3d37c:	add	x8, x8, x9, lsl #3
   3d380:	mov	w9, #0xffffffff            	// #-1
   3d384:	lsr	x10, x10, x11
   3d388:	ldp	w11, w8, [x8]
   3d38c:	lsl	w12, w9, w12
   3d390:	bic	w10, w10, w12
   3d394:	ldrb	w12, [x1, #28]
   3d398:	lsr	w11, w2, w11
   3d39c:	lsl	w8, w9, w8
   3d3a0:	bic	w8, w11, w8
   3d3a4:	str	w8, [x1, #16]
   3d3a8:	ldr	w8, [x0, #16]
   3d3ac:	ldrb	w9, [x1, #36]
   3d3b0:	and	w10, w10, #0xf
   3d3b4:	mov	x11, #0xfffffff800000000    	// #-34359738368
   3d3b8:	eor	w10, w10, #0x8
   3d3bc:	add	x10, x11, x10, lsl #32
   3d3c0:	and	w12, w12, #0xfffffff9
   3d3c4:	lsr	x10, x10, #32
   3d3c8:	ubfx	w8, w8, #5, #3
   3d3cc:	and	w9, w9, #0xfc
   3d3d0:	orr	w12, w12, #0x4
   3d3d4:	lsl	w8, w10, w8
   3d3d8:	mov	w0, #0x1                   	// #1
   3d3dc:	strb	w12, [x1, #28]
   3d3e0:	stp	w8, wzr, [x1, #20]
   3d3e4:	strb	w9, [x1, #36]
   3d3e8:	ret

000000000003d3ec <aarch64_ext_sve_addr_ri_u6@@Base>:
   3d3ec:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d3f0:	ldr	x8, [x8, #3944]
   3d3f4:	ldr	w9, [x0, #20]
   3d3f8:	mov	w10, #0xffffffff            	// #-1
   3d3fc:	ldrb	w11, [x1, #28]
   3d400:	ldr	w12, [x8, #800]
   3d404:	add	x9, x8, x9, lsl #3
   3d408:	ldp	w13, w9, [x9]
   3d40c:	ldr	w8, [x8, #804]
   3d410:	ldrb	w14, [x1, #36]
   3d414:	lsr	w12, w2, w12
   3d418:	lsr	w13, w2, w13
   3d41c:	lsl	w9, w10, w9
   3d420:	bic	w9, w13, w9
   3d424:	str	w9, [x1, #16]
   3d428:	ldr	w9, [x0, #16]
   3d42c:	lsl	w8, w10, w8
   3d430:	and	w10, w11, #0xfffffff9
   3d434:	bic	w8, w12, w8
   3d438:	ubfx	w9, w9, #5, #3
   3d43c:	and	w11, w14, #0xfc
   3d440:	orr	w10, w10, #0x4
   3d444:	lsl	w8, w8, w9
   3d448:	mov	w0, #0x1                   	// #1
   3d44c:	strb	w10, [x1, #28]
   3d450:	stp	w8, wzr, [x1, #20]
   3d454:	strb	w11, [x1, #36]
   3d458:	ret

000000000003d45c <aarch64_ext_sve_addr_rr_lsl@@Base>:
   3d45c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d460:	ldr	w9, [x0, #24]
   3d464:	ldr	x8, [x8, #3944]
   3d468:	add	x9, x8, x9, lsl #3
   3d46c:	ldp	w10, w11, [x9]
   3d470:	mov	w9, #0xffffffff            	// #-1
   3d474:	lsr	w10, w2, w10
   3d478:	lsl	w11, w9, w11
   3d47c:	bic	w10, w10, w11
   3d480:	cmp	w10, #0x1f
   3d484:	b.ne	3d490 <aarch64_ext_sve_addr_rr_lsl@@Base+0x34>  // b.any
   3d488:	ldrb	w11, [x0, #17]
   3d48c:	tbnz	w11, #0, 3d500 <aarch64_ext_sve_addr_rr_lsl@@Base+0xa4>
   3d490:	ldr	w11, [x0, #20]
   3d494:	ldrb	w12, [x1, #28]
   3d498:	mov	w13, #0x5                   	// #5
   3d49c:	str	w13, [x1, #32]
   3d4a0:	add	x8, x8, x11, lsl #3
   3d4a4:	and	w11, w12, #0xfffffff9
   3d4a8:	orr	w11, w11, #0x4
   3d4ac:	ldr	w12, [x8]
   3d4b0:	strb	w11, [x1, #28]
   3d4b4:	ldr	w11, [x8, #4]
   3d4b8:	mov	w8, #0x1                   	// #1
   3d4bc:	lsr	w12, w2, w12
   3d4c0:	stp	w10, w8, [x1, #20]
   3d4c4:	lsl	w9, w9, w11
   3d4c8:	bic	w9, w12, w9
   3d4cc:	str	w9, [x1, #16]
   3d4d0:	ldr	w9, [x0, #16]
   3d4d4:	ldrb	w10, [x1, #36]
   3d4d8:	mov	w0, w8
   3d4dc:	ubfx	x9, x9, #5, #3
   3d4e0:	cmp	w9, #0x0
   3d4e4:	str	x9, [x1, #40]
   3d4e8:	cset	w9, ne  // ne = any
   3d4ec:	and	w10, w10, #0xfc
   3d4f0:	orr	w10, w10, w9
   3d4f4:	bfi	w10, w9, #1, #1
   3d4f8:	strb	w10, [x1, #36]
   3d4fc:	ret
   3d500:	mov	w0, wzr
   3d504:	ret

000000000003d508 <aarch64_ext_sve_addr_rz_xtw@@Base>:
   3d508:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d50c:	ldr	w8, [x0, #20]
   3d510:	ldr	x9, [x9, #3944]
   3d514:	mov	w11, #0xffffffff            	// #-1
   3d518:	ldrb	w12, [x1, #28]
   3d51c:	add	x8, x9, x8, lsl #3
   3d520:	ldp	w10, w8, [x8]
   3d524:	lsr	w10, w2, w10
   3d528:	lsl	w8, w11, w8
   3d52c:	bic	w8, w10, w8
   3d530:	str	w8, [x1, #16]
   3d534:	ldr	w8, [x0, #24]
   3d538:	and	w10, w12, #0xfffffff9
   3d53c:	orr	w10, w10, #0x4
   3d540:	strb	w10, [x1, #28]
   3d544:	add	x8, x9, x8, lsl #3
   3d548:	ldp	w12, w8, [x8]
   3d54c:	lsr	w10, w2, w12
   3d550:	lsl	w8, w11, w8
   3d554:	bic	w8, w10, w8
   3d558:	mov	w10, #0x1                   	// #1
   3d55c:	stp	w8, w10, [x1, #20]
   3d560:	ldr	w8, [x0, #28]
   3d564:	mov	w10, #0xc                   	// #12
   3d568:	mov	w12, #0x8                   	// #8
   3d56c:	add	x8, x9, x8, lsl #3
   3d570:	ldp	w9, w8, [x8]
   3d574:	lsr	w9, w2, w9
   3d578:	lsl	w8, w11, w8
   3d57c:	bics	wzr, w9, w8
   3d580:	csel	w8, w12, w10, eq  // eq = none
   3d584:	str	w8, [x1, #32]
   3d588:	ldr	w8, [x0, #16]
   3d58c:	ldrb	w11, [x1, #36]
   3d590:	mov	w0, #0x1                   	// #1
   3d594:	ubfx	x8, x8, #5, #3
   3d598:	cmp	w8, #0x0
   3d59c:	and	w9, w11, #0xfc
   3d5a0:	str	x8, [x1, #40]
   3d5a4:	cset	w8, ne  // ne = any
   3d5a8:	bfi	w9, w8, #1, #1
   3d5ac:	orr	w8, w9, #0x1
   3d5b0:	strb	w8, [x1, #36]
   3d5b4:	ret

000000000003d5b8 <aarch64_ext_sve_addr_zi_u5@@Base>:
   3d5b8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3d5bc:	ldr	x8, [x8, #3944]
   3d5c0:	ldr	w9, [x0, #20]
   3d5c4:	mov	w10, #0xffffffff            	// #-1
   3d5c8:	ldrb	w11, [x1, #28]
   3d5cc:	ldr	w12, [x8, #344]
   3d5d0:	add	x9, x8, x9, lsl #3
   3d5d4:	ldp	w13, w9, [x9]
   3d5d8:	ldr	w8, [x8, #348]
   3d5dc:	ldrb	w14, [x1, #36]
   3d5e0:	lsr	w12, w2, w12
   3d5e4:	lsr	w13, w2, w13
   3d5e8:	lsl	w9, w10, w9
   3d5ec:	bic	w9, w13, w9
   3d5f0:	str	w9, [x1, #16]
   3d5f4:	ldr	w9, [x0, #16]
   3d5f8:	lsl	w8, w10, w8
   3d5fc:	and	w10, w11, #0xfffffff9
   3d600:	bic	w8, w12, w8
   3d604:	ubfx	w9, w9, #5, #3
   3d608:	and	w11, w14, #0xfc
   3d60c:	orr	w10, w10, #0x4
   3d610:	lsl	w8, w8, w9
   3d614:	mov	w0, #0x1                   	// #1
   3d618:	strb	w10, [x1, #28]
   3d61c:	stp	w8, wzr, [x1, #20]
   3d620:	strb	w11, [x1, #36]
   3d624:	ret

000000000003d628 <aarch64_ext_sve_addr_zz_lsl@@Base>:
   3d628:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d62c:	ldr	w8, [x0, #20]
   3d630:	ldr	x9, [x9, #3944]
   3d634:	mov	w10, #0xffffffff            	// #-1
   3d638:	mov	w12, w2
   3d63c:	ldr	w11, [x9, #848]
   3d640:	ldr	w13, [x9, #852]
   3d644:	add	x8, x9, x8, lsl #3
   3d648:	lsr	x11, x12, x11
   3d64c:	ldp	w12, w8, [x8]
   3d650:	lsl	w13, w10, w13
   3d654:	mvn	w13, w13
   3d658:	and	x11, x11, x13
   3d65c:	ldrb	w13, [x1, #36]
   3d660:	lsr	w12, w2, w12
   3d664:	lsl	w8, w10, w8
   3d668:	bic	w8, w12, w8
   3d66c:	cmp	w11, #0x0
   3d670:	ldrb	w12, [x1, #28]
   3d674:	and	w13, w13, #0xfc
   3d678:	str	w8, [x1, #16]
   3d67c:	cset	w8, ne  // ne = any
   3d680:	bfi	w13, w8, #1, #1
   3d684:	orr	w8, w13, w8
   3d688:	ldr	w13, [x0, #24]
   3d68c:	and	w12, w12, #0xfffffff9
   3d690:	orr	w12, w12, #0x4
   3d694:	strb	w12, [x1, #28]
   3d698:	mov	w12, #0x5                   	// #5
   3d69c:	add	x9, x9, x13, lsl #3
   3d6a0:	str	w12, [x1, #32]
   3d6a4:	ldp	w12, w9, [x9]
   3d6a8:	str	x11, [x1, #40]
   3d6ac:	mov	w11, #0x1                   	// #1
   3d6b0:	mov	w0, #0x1                   	// #1
   3d6b4:	lsr	w12, w2, w12
   3d6b8:	lsl	w9, w10, w9
   3d6bc:	bic	w9, w12, w9
   3d6c0:	stp	w9, w11, [x1, #20]
   3d6c4:	strb	w8, [x1, #36]
   3d6c8:	ret

000000000003d6cc <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   3d6cc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d6d0:	ldr	w8, [x0, #20]
   3d6d4:	ldr	x9, [x9, #3944]
   3d6d8:	mov	w10, #0xffffffff            	// #-1
   3d6dc:	mov	w13, w2
   3d6e0:	ldrb	w12, [x1, #28]
   3d6e4:	ldr	w14, [x9, #852]
   3d6e8:	ldr	w11, [x9, #848]
   3d6ec:	add	x8, x9, x8, lsl #3
   3d6f0:	lsl	w14, w10, w14
   3d6f4:	lsr	x11, x13, x11
   3d6f8:	mvn	w14, w14
   3d6fc:	and	x11, x11, x14
   3d700:	ldp	w14, w8, [x8]
   3d704:	ldrb	w13, [x1, #36]
   3d708:	cmp	w11, #0x0
   3d70c:	lsr	w14, w2, w14
   3d710:	lsl	w8, w10, w8
   3d714:	bic	w8, w14, w8
   3d718:	str	w8, [x1, #16]
   3d71c:	and	w8, w12, #0xfffffff9
   3d720:	ldr	w12, [x0, #24]
   3d724:	orr	w8, w8, #0x4
   3d728:	strb	w8, [x1, #28]
   3d72c:	mov	w8, #0xc                   	// #12
   3d730:	str	w8, [x1, #32]
   3d734:	add	x8, x9, x12, lsl #3
   3d738:	ldp	w9, w8, [x8]
   3d73c:	and	w13, w13, #0xfc
   3d740:	cset	w14, ne  // ne = any
   3d744:	bfi	w13, w14, #1, #1
   3d748:	lsr	w9, w2, w9
   3d74c:	lsl	w8, w10, w8
   3d750:	str	x11, [x1, #40]
   3d754:	mov	w11, #0x1                   	// #1
   3d758:	orr	w12, w13, #0x1
   3d75c:	bic	w8, w9, w8
   3d760:	mov	w0, #0x1                   	// #1
   3d764:	stp	w8, w11, [x1, #20]
   3d768:	strb	w12, [x1, #36]
   3d76c:	ret

000000000003d770 <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   3d770:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d774:	ldr	w8, [x0, #20]
   3d778:	ldr	x9, [x9, #3944]
   3d77c:	mov	w10, #0xffffffff            	// #-1
   3d780:	mov	w13, w2
   3d784:	ldrb	w12, [x1, #28]
   3d788:	ldr	w14, [x9, #852]
   3d78c:	ldr	w11, [x9, #848]
   3d790:	add	x8, x9, x8, lsl #3
   3d794:	lsl	w14, w10, w14
   3d798:	lsr	x11, x13, x11
   3d79c:	mvn	w14, w14
   3d7a0:	and	x11, x11, x14
   3d7a4:	ldp	w14, w8, [x8]
   3d7a8:	ldrb	w13, [x1, #36]
   3d7ac:	cmp	w11, #0x0
   3d7b0:	lsr	w14, w2, w14
   3d7b4:	lsl	w8, w10, w8
   3d7b8:	bic	w8, w14, w8
   3d7bc:	str	w8, [x1, #16]
   3d7c0:	and	w8, w12, #0xfffffff9
   3d7c4:	ldr	w12, [x0, #24]
   3d7c8:	orr	w8, w8, #0x4
   3d7cc:	strb	w8, [x1, #28]
   3d7d0:	mov	w8, #0x8                   	// #8
   3d7d4:	str	w8, [x1, #32]
   3d7d8:	add	x8, x9, x12, lsl #3
   3d7dc:	ldp	w9, w8, [x8]
   3d7e0:	and	w13, w13, #0xfc
   3d7e4:	cset	w14, ne  // ne = any
   3d7e8:	bfi	w13, w14, #1, #1
   3d7ec:	lsr	w9, w2, w9
   3d7f0:	lsl	w8, w10, w8
   3d7f4:	str	x11, [x1, #40]
   3d7f8:	mov	w11, #0x1                   	// #1
   3d7fc:	orr	w12, w13, #0x1
   3d800:	bic	w8, w9, w8
   3d804:	mov	w0, #0x1                   	// #1
   3d808:	stp	w8, w11, [x1, #20]
   3d80c:	strb	w12, [x1, #36]
   3d810:	ret

000000000003d814 <aarch64_ext_sve_aimm@@Base>:
   3d814:	stp	x29, x30, [sp, #-32]!
   3d818:	str	x19, [sp, #16]
   3d81c:	mov	x29, sp
   3d820:	mov	x19, x1
   3d824:	bl	357b0 <aarch64_ext_imm@plt>
   3d828:	ldr	x9, [x19, #16]
   3d82c:	mov	w8, #0x5                   	// #5
   3d830:	str	w8, [x19, #32]
   3d834:	str	xzr, [x19, #40]
   3d838:	and	x8, x9, #0xff
   3d83c:	tbnz	w9, #8, 3d84c <aarch64_ext_sve_aimm@@Base+0x38>
   3d840:	mov	w10, wzr
   3d844:	mov	w9, wzr
   3d848:	b	3d870 <aarch64_ext_sve_aimm@@Base+0x5c>
   3d84c:	cbz	x8, 3d860 <aarch64_ext_sve_aimm@@Base+0x4c>
   3d850:	mov	w10, wzr
   3d854:	mov	w9, wzr
   3d858:	lsl	x8, x8, #8
   3d85c:	b	3d870 <aarch64_ext_sve_aimm@@Base+0x5c>
   3d860:	mov	w10, #0x8                   	// #8
   3d864:	mov	w9, #0x2                   	// #2
   3d868:	str	x10, [x19, #40]
   3d86c:	mov	w10, #0x1                   	// #1
   3d870:	ldrb	w11, [x19, #36]
   3d874:	orr	w9, w9, w10
   3d878:	str	x8, [x19, #16]
   3d87c:	mov	w0, #0x1                   	// #1
   3d880:	and	w10, w11, #0xfc
   3d884:	orr	w9, w9, w10
   3d888:	strb	w9, [x19, #36]
   3d88c:	ldr	x19, [sp, #16]
   3d890:	ldp	x29, x30, [sp], #32
   3d894:	ret

000000000003d898 <aarch64_ext_sve_asimm@@Base>:
   3d898:	stp	x29, x30, [sp, #-32]!
   3d89c:	str	x19, [sp, #16]
   3d8a0:	mov	x29, sp
   3d8a4:	mov	x19, x1
   3d8a8:	bl	357b0 <aarch64_ext_imm@plt>
   3d8ac:	ldr	x8, [x19, #16]
   3d8b0:	mov	w9, #0x5                   	// #5
   3d8b4:	str	w9, [x19, #32]
   3d8b8:	str	xzr, [x19, #40]
   3d8bc:	tbnz	w8, #8, 3d8d0 <aarch64_ext_sve_asimm@@Base+0x38>
   3d8c0:	mov	w10, wzr
   3d8c4:	mov	w9, wzr
   3d8c8:	sxtb	x8, w8
   3d8cc:	b	3d8f8 <aarch64_ext_sve_asimm@@Base+0x60>
   3d8d0:	lsl	x8, x8, #56
   3d8d4:	cbz	x8, 3d8e8 <aarch64_ext_sve_asimm@@Base+0x50>
   3d8d8:	mov	w10, wzr
   3d8dc:	mov	w9, wzr
   3d8e0:	asr	x8, x8, #48
   3d8e4:	b	3d8f8 <aarch64_ext_sve_asimm@@Base+0x60>
   3d8e8:	mov	w10, #0x8                   	// #8
   3d8ec:	mov	w9, #0x2                   	// #2
   3d8f0:	str	x10, [x19, #40]
   3d8f4:	mov	w10, #0x1                   	// #1
   3d8f8:	ldrb	w11, [x19, #36]
   3d8fc:	orr	w9, w9, w10
   3d900:	str	x8, [x19, #16]
   3d904:	mov	w0, #0x1                   	// #1
   3d908:	and	w10, w11, #0xfc
   3d90c:	orr	w9, w9, w10
   3d910:	strb	w9, [x19, #36]
   3d914:	ldr	x19, [sp, #16]
   3d918:	ldp	x29, x30, [sp], #32
   3d91c:	ret

000000000003d920 <aarch64_ext_sve_float_half_one@@Base>:
   3d920:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d924:	ldr	w8, [x0, #20]
   3d928:	ldr	x9, [x9, #3944]
   3d92c:	mov	w10, #0xffffffff            	// #-1
   3d930:	mov	w0, #0x1                   	// #1
   3d934:	add	x8, x9, x8, lsl #3
   3d938:	ldp	w9, w8, [x8]
   3d93c:	lsl	w8, w10, w8
   3d940:	ldrb	w10, [x1, #24]
   3d944:	lsr	w9, w2, w9
   3d948:	bics	wzr, w9, w8
   3d94c:	mov	w8, #0x3f800000            	// #1065353216
   3d950:	mov	w9, #0x3f000000            	// #1056964608
   3d954:	orr	w10, w10, #0x1
   3d958:	csel	x8, x9, x8, eq  // eq = none
   3d95c:	str	x8, [x1, #16]
   3d960:	strb	w10, [x1, #24]
   3d964:	ret

000000000003d968 <aarch64_ext_sve_float_half_two@@Base>:
   3d968:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d96c:	ldr	w8, [x0, #20]
   3d970:	ldr	x9, [x9, #3944]
   3d974:	mov	w10, #0xffffffff            	// #-1
   3d978:	mov	w0, #0x1                   	// #1
   3d97c:	add	x8, x9, x8, lsl #3
   3d980:	ldp	w9, w8, [x8]
   3d984:	lsl	w8, w10, w8
   3d988:	ldrb	w10, [x1, #24]
   3d98c:	lsr	w9, w2, w9
   3d990:	bics	wzr, w9, w8
   3d994:	mov	w8, #0x40000000            	// #1073741824
   3d998:	mov	w9, #0x3f000000            	// #1056964608
   3d99c:	orr	w10, w10, #0x1
   3d9a0:	csel	x8, x9, x8, eq  // eq = none
   3d9a4:	str	x8, [x1, #16]
   3d9a8:	strb	w10, [x1, #24]
   3d9ac:	ret

000000000003d9b0 <aarch64_ext_sve_float_zero_one@@Base>:
   3d9b0:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3d9b4:	ldr	w8, [x0, #20]
   3d9b8:	ldr	x9, [x9, #3944]
   3d9bc:	ldrb	w11, [x1, #24]
   3d9c0:	mov	w10, #0xffffffff            	// #-1
   3d9c4:	mov	w0, #0x1                   	// #1
   3d9c8:	add	x8, x9, x8, lsl #3
   3d9cc:	ldp	w9, w8, [x8]
   3d9d0:	lsr	w9, w2, w9
   3d9d4:	lsl	w8, w10, w8
   3d9d8:	bics	wzr, w9, w8
   3d9dc:	mov	w8, #0x3f800000            	// #1065353216
   3d9e0:	orr	w9, w11, #0x1
   3d9e4:	csel	x8, xzr, x8, eq  // eq = none
   3d9e8:	str	x8, [x1, #16]
   3d9ec:	strb	w9, [x1, #24]
   3d9f0:	ret

000000000003d9f4 <aarch64_ext_sve_index@@Base>:
   3d9f4:	stp	x29, x30, [sp, #-32]!
   3d9f8:	str	x19, [sp, #16]
   3d9fc:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3da00:	ldr	w9, [x0, #20]
   3da04:	ldr	x10, [x10, #3944]
   3da08:	mov	w11, #0xffffffff            	// #-1
   3da0c:	mov	w8, w2
   3da10:	mov	x19, x1
   3da14:	add	x9, x10, x9, lsl #3
   3da18:	ldp	w10, w9, [x9]
   3da1c:	mov	w3, #0x74                  	// #116
   3da20:	mov	w4, #0x2b                  	// #43
   3da24:	mov	w0, w8
   3da28:	lsr	w10, w2, w10
   3da2c:	lsl	w9, w11, w9
   3da30:	bic	w9, w10, w9
   3da34:	str	w9, [x1, #16]
   3da38:	mov	w2, #0x2                   	// #2
   3da3c:	mov	w1, wzr
   3da40:	mov	x29, sp
   3da44:	bl	35440 <extract_fields@plt>
   3da48:	tst	w0, #0x1f
   3da4c:	b.eq	3da74 <aarch64_ext_sve_index@@Base+0x80>  // b.none
   3da50:	cmp	w0, #0x0
   3da54:	cinc	w9, w0, lt  // lt = tstop
   3da58:	mov	w8, w0
   3da5c:	asr	w0, w9, #1
   3da60:	tbz	w8, #0, 3da50 <aarch64_ext_sve_index@@Base+0x5c>
   3da64:	sxtw	x8, w0
   3da68:	mov	w0, #0x1                   	// #1
   3da6c:	str	x8, [x19, #24]
   3da70:	b	3da78 <aarch64_ext_sve_index@@Base+0x84>
   3da74:	mov	w0, wzr
   3da78:	ldr	x19, [sp, #16]
   3da7c:	ldp	x29, x30, [sp], #32
   3da80:	ret

000000000003da84 <aarch64_ext_sve_limm_mov@@Base>:
   3da84:	stp	x29, x30, [sp, #-64]!
   3da88:	stp	x22, x21, [sp, #32]
   3da8c:	stp	x20, x19, [sp, #48]
   3da90:	ldrb	w8, [x3, #28]
   3da94:	str	x23, [sp, #16]
   3da98:	mov	x23, x0
   3da9c:	mov	x29, sp
   3daa0:	mov	w0, w8
   3daa4:	mov	x21, x3
   3daa8:	mov	w22, w2
   3daac:	mov	x19, x1
   3dab0:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3dab4:	mov	w20, w0
   3dab8:	mov	x0, x23
   3dabc:	mov	x1, x19
   3dac0:	mov	w2, w22
   3dac4:	mov	x3, x21
   3dac8:	bl	354c0 <aarch64_ext_limm@plt>
   3dacc:	cbz	w0, 3dae4 <aarch64_ext_sve_limm_mov@@Base+0x60>
   3dad0:	ldr	x0, [x19, #16]
   3dad4:	and	w1, w20, #0xff
   3dad8:	bl	355e0 <aarch64_sve_dupm_mov_immediate_p@plt>
   3dadc:	cmp	w0, #0x0
   3dae0:	cset	w0, ne  // ne = any
   3dae4:	ldp	x20, x19, [sp, #48]
   3dae8:	ldp	x22, x21, [sp, #32]
   3daec:	ldr	x23, [sp, #16]
   3daf0:	ldp	x29, x30, [sp], #64
   3daf4:	ret

000000000003daf8 <aarch64_ext_sve_quad_index@@Base>:
   3daf8:	ldp	w8, w9, [x0, #16]
   3dafc:	ubfx	x8, x8, #5, #3
   3db00:	cbz	w9, 3db94 <aarch64_ext_sve_quad_index@@Base+0x9c>
   3db04:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3db08:	ldr	x10, [x10, #3944]
   3db0c:	ldr	w12, [x0, #24]
   3db10:	mov	w11, #0xffffffff            	// #-1
   3db14:	add	x9, x10, x9, lsl #3
   3db18:	ldp	w13, w9, [x9]
   3db1c:	lsr	w13, w2, w13
   3db20:	lsl	w9, w11, w9
   3db24:	bic	w9, w13, w9
   3db28:	cbz	w12, 3db94 <aarch64_ext_sve_quad_index@@Base+0x9c>
   3db2c:	add	x12, x10, x12, lsl #3
   3db30:	ldp	w14, w13, [x12]
   3db34:	ldr	w12, [x0, #28]
   3db38:	lsr	w14, w2, w14
   3db3c:	lsl	w11, w11, w13
   3db40:	lsl	w9, w9, w13
   3db44:	bic	w11, w14, w11
   3db48:	orr	w9, w11, w9
   3db4c:	cbz	w12, 3db94 <aarch64_ext_sve_quad_index@@Base+0x9c>
   3db50:	add	x11, x10, x12, lsl #3
   3db54:	ldp	w14, w13, [x11]
   3db58:	mov	w11, #0xffffffff            	// #-1
   3db5c:	ldr	w12, [x0, #32]
   3db60:	lsl	w9, w9, w13
   3db64:	lsr	w14, w2, w14
   3db68:	lsl	w13, w11, w13
   3db6c:	bic	w13, w14, w13
   3db70:	orr	w9, w13, w9
   3db74:	cbz	w12, 3db94 <aarch64_ext_sve_quad_index@@Base+0x9c>
   3db78:	add	x10, x10, x12, lsl #3
   3db7c:	ldp	w10, w12, [x10]
   3db80:	lsr	w10, w2, w10
   3db84:	lsl	w11, w11, w12
   3db88:	lsl	w9, w9, w12
   3db8c:	bic	w10, w10, w11
   3db90:	orr	w9, w10, w9
   3db94:	mov	w10, #0xffffffff            	// #-1
   3db98:	mov	w11, w9
   3db9c:	lsl	w10, w10, w8
   3dba0:	lsr	x8, x11, x8
   3dba4:	bic	w9, w9, w10
   3dba8:	mov	w0, #0x1                   	// #1
   3dbac:	str	w9, [x1, #16]
   3dbb0:	str	x8, [x1, #24]
   3dbb4:	ret

000000000003dbb8 <aarch64_ext_sve_reglist@@Base>:
   3dbb8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3dbbc:	ldr	w8, [x0, #20]
   3dbc0:	ldr	x9, [x9, #3944]
   3dbc4:	ldrh	w10, [x1, #16]
   3dbc8:	mov	w11, #0xffffffff            	// #-1
   3dbcc:	mov	w0, #0x1                   	// #1
   3dbd0:	add	x8, x9, x8, lsl #3
   3dbd4:	ldp	w9, w8, [x8]
   3dbd8:	lsr	w9, w2, w9
   3dbdc:	lsl	w8, w11, w8
   3dbe0:	bic	w8, w9, w8
   3dbe4:	bfxil	w10, w8, #0, #5
   3dbe8:	strh	w10, [x1, #16]
   3dbec:	ldr	x8, [x3, #8]
   3dbf0:	and	w9, w10, #0xffffff1f
   3dbf4:	ldr	w8, [x8, #120]
   3dbf8:	lsr	w8, w8, #19
   3dbfc:	and	w8, w8, #0xe0
   3dc00:	orr	w8, w9, w8
   3dc04:	strh	w8, [x1, #16]
   3dc08:	ret

000000000003dc0c <aarch64_ext_sve_scale@@Base>:
   3dc0c:	stp	x29, x30, [sp, #-32]!
   3dc10:	stp	x20, x19, [sp, #16]
   3dc14:	mov	x29, sp
   3dc18:	mov	w19, w2
   3dc1c:	mov	x20, x1
   3dc20:	bl	357b0 <aarch64_ext_imm@plt>
   3dc24:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3dc28:	ldr	x8, [x8, #3944]
   3dc2c:	mov	w9, #0xe                   	// #14
   3dc30:	str	w9, [x20, #32]
   3dc34:	ldrb	w9, [x20, #36]
   3dc38:	ldr	w10, [x8, #776]
   3dc3c:	ldr	w8, [x8, #780]
   3dc40:	mov	w11, #0xffffffff            	// #-1
   3dc44:	and	w9, w9, #0xfc
   3dc48:	lsr	w10, w19, w10
   3dc4c:	lsl	w8, w11, w8
   3dc50:	bics	wzr, w10, w8
   3dc54:	bic	w11, w10, w8
   3dc58:	cset	w10, ne  // ne = any
   3dc5c:	add	w8, w11, #0x1
   3dc60:	orr	w9, w9, w10
   3dc64:	sxtw	x8, w8
   3dc68:	bfi	w9, w10, #1, #1
   3dc6c:	str	x8, [x20, #40]
   3dc70:	strb	w9, [x20, #36]
   3dc74:	ldp	x20, x19, [sp, #16]
   3dc78:	mov	w0, #0x1                   	// #1
   3dc7c:	ldp	x29, x30, [sp], #32
   3dc80:	ret

000000000003dc84 <aarch64_ext_sve_shlimm@@Base>:
   3dc84:	stp	x29, x30, [sp, #-32]!
   3dc88:	str	x19, [sp, #16]
   3dc8c:	mov	x29, sp
   3dc90:	mov	x19, x1
   3dc94:	bl	357b0 <aarch64_ext_imm@plt>
   3dc98:	ldr	x8, [x19, #16]
   3dc9c:	cbz	x8, 3dcc8 <aarch64_ext_sve_shlimm@@Base+0x44>
   3dca0:	mov	x10, x8
   3dca4:	mov	x9, x10
   3dca8:	neg	x10, x10
   3dcac:	and	x10, x9, x10
   3dcb0:	subs	x10, x9, x10
   3dcb4:	b.ne	3dca4 <aarch64_ext_sve_shlimm@@Base+0x20>  // b.any
   3dcb8:	sub	x8, x8, x9
   3dcbc:	mov	w0, #0x1                   	// #1
   3dcc0:	str	x8, [x19, #16]
   3dcc4:	b	3dccc <aarch64_ext_sve_shlimm@@Base+0x48>
   3dcc8:	mov	w0, wzr
   3dccc:	ldr	x19, [sp, #16]
   3dcd0:	ldp	x29, x30, [sp], #32
   3dcd4:	ret

000000000003dcd8 <aarch64_ext_sve_shrimm@@Base>:
   3dcd8:	stp	x29, x30, [sp, #-32]!
   3dcdc:	str	x19, [sp, #16]
   3dce0:	mov	x29, sp
   3dce4:	mov	x19, x1
   3dce8:	bl	357b0 <aarch64_ext_imm@plt>
   3dcec:	ldr	x8, [x19, #16]
   3dcf0:	cbz	x8, 3dd20 <aarch64_ext_sve_shrimm@@Base+0x48>
   3dcf4:	mov	x10, x8
   3dcf8:	mov	x9, x10
   3dcfc:	neg	x10, x10
   3dd00:	and	x10, x9, x10
   3dd04:	subs	x10, x9, x10
   3dd08:	b.ne	3dcf8 <aarch64_ext_sve_shrimm@@Base+0x20>  // b.any
   3dd0c:	lsl	x9, x9, #1
   3dd10:	sub	x8, x9, x8
   3dd14:	mov	w0, #0x1                   	// #1
   3dd18:	str	x8, [x19, #16]
   3dd1c:	b	3dd24 <aarch64_ext_sve_shrimm@@Base+0x4c>
   3dd20:	mov	w0, wzr
   3dd24:	ldr	x19, [sp, #16]
   3dd28:	ldp	x29, x30, [sp], #32
   3dd2c:	ret

000000000003dd30 <aarch64_decode_insn@@Base>:
   3dd30:	stp	x29, x30, [sp, #-64]!
   3dd34:	str	x23, [sp, #16]
   3dd38:	stp	x22, x21, [sp, #32]
   3dd3c:	stp	x20, x19, [sp, #48]
   3dd40:	mov	x29, sp
   3dd44:	mov	x19, x3
   3dd48:	mov	w20, w2
   3dd4c:	mov	x21, x1
   3dd50:	mov	w22, w0
   3dd54:	bl	35640 <aarch64_opcode_lookup@plt>
   3dd58:	cbz	x0, 3dd90 <aarch64_decode_insn@@Base+0x60>
   3dd5c:	mov	x23, x0
   3dd60:	mov	x0, x23
   3dd64:	mov	w1, w22
   3dd68:	mov	x2, x21
   3dd6c:	mov	w3, w20
   3dd70:	mov	x4, x19
   3dd74:	bl	3ddb0 <aarch64_decode_insn@@Base+0x80>
   3dd78:	cmp	w0, #0x1
   3dd7c:	b.eq	3dd98 <aarch64_decode_insn@@Base+0x68>  // b.none
   3dd80:	mov	x0, x23
   3dd84:	bl	35bb0 <aarch64_find_next_opcode@plt>
   3dd88:	mov	x23, x0
   3dd8c:	cbnz	x0, 3dd60 <aarch64_decode_insn@@Base+0x30>
   3dd90:	mov	w0, #0x1                   	// #1
   3dd94:	b	3dd9c <aarch64_decode_insn@@Base+0x6c>
   3dd98:	mov	w0, wzr
   3dd9c:	ldp	x20, x19, [sp, #48]
   3dda0:	ldp	x22, x21, [sp, #32]
   3dda4:	ldr	x23, [sp, #16]
   3dda8:	ldp	x29, x30, [sp], #64
   3ddac:	ret
   3ddb0:	sub	sp, sp, #0x1d0
   3ddb4:	stp	x29, x30, [sp, #368]
   3ddb8:	stp	x28, x27, [sp, #384]
   3ddbc:	stp	x26, x25, [sp, #400]
   3ddc0:	stp	x24, x23, [sp, #416]
   3ddc4:	stp	x22, x21, [sp, #432]
   3ddc8:	stp	x20, x19, [sp, #448]
   3ddcc:	add	x29, sp, #0x170
   3ddd0:	cbz	x0, 3f210 <aarch64_decode_insn@@Base+0x14e0>
   3ddd4:	mov	x19, x2
   3ddd8:	cbz	x2, 3f210 <aarch64_decode_insn@@Base+0x14e0>
   3dddc:	movi	v0.2d, #0x0
   3dde0:	str	xzr, [x19, #352]
   3dde4:	stp	q0, q0, [x19, #320]
   3dde8:	stp	q0, q0, [x19, #288]
   3ddec:	stp	q0, q0, [x19, #256]
   3ddf0:	stp	q0, q0, [x19, #224]
   3ddf4:	stp	q0, q0, [x19, #192]
   3ddf8:	stp	q0, q0, [x19, #160]
   3ddfc:	stp	q0, q0, [x19, #128]
   3de00:	stp	q0, q0, [x19, #96]
   3de04:	stp	q0, q0, [x19, #64]
   3de08:	stp	q0, q0, [x19, #32]
   3de0c:	stp	q0, q0, [x19]
   3de10:	ldp	w8, w9, [x0, #8]
   3de14:	mov	w22, w1
   3de18:	mov	x23, x0
   3de1c:	eor	w8, w8, w1
   3de20:	tst	w8, w9
   3de24:	b.eq	3de4c <aarch64_decode_insn@@Base+0x11c>  // b.none
   3de28:	mov	w0, wzr
   3de2c:	ldp	x20, x19, [sp, #448]
   3de30:	ldp	x22, x21, [sp, #432]
   3de34:	ldp	x24, x23, [sp, #416]
   3de38:	ldp	x26, x25, [sp, #400]
   3de3c:	ldp	x28, x27, [sp, #384]
   3de40:	ldp	x29, x30, [sp, #368]
   3de44:	add	sp, sp, #0x1d0
   3de48:	ret
   3de4c:	str	x23, [x19, #8]
   3de50:	str	w22, [x19]
   3de54:	ldr	w8, [x23, #32]
   3de58:	mov	x20, x4
   3de5c:	mov	w21, w3
   3de60:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3de64:	str	w8, [x19, #24]
   3de68:	str	wzr, [x19, #32]
   3de6c:	ldr	w8, [x23, #36]
   3de70:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3de74:	str	w8, [x19, #80]
   3de78:	mov	w8, #0x1                   	// #1
   3de7c:	str	w8, [x19, #88]
   3de80:	ldr	w8, [x23, #40]
   3de84:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3de88:	str	w8, [x19, #136]
   3de8c:	mov	w8, #0x2                   	// #2
   3de90:	str	w8, [x19, #144]
   3de94:	ldr	w8, [x23, #44]
   3de98:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3de9c:	str	w8, [x19, #192]
   3dea0:	mov	w8, #0x3                   	// #3
   3dea4:	str	w8, [x19, #200]
   3dea8:	ldr	w8, [x23, #48]
   3deac:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3deb0:	str	w8, [x19, #248]
   3deb4:	mov	w8, #0x4                   	// #4
   3deb8:	str	w8, [x19, #256]
   3debc:	ldr	w8, [x23, #52]
   3dec0:	cbz	w8, 3ded0 <aarch64_decode_insn@@Base+0x1a0>
   3dec4:	str	w8, [x19, #304]
   3dec8:	mov	w8, #0x5                   	// #5
   3decc:	str	w8, [x19, #312]
   3ded0:	ldr	x8, [x23, #120]
   3ded4:	mov	w9, #0xff0                 	// #4080
   3ded8:	movk	w9, #0x8c0, lsl #16
   3dedc:	mov	x25, x23
   3dee0:	tst	x8, x9
   3dee4:	b.eq	3e5ac <aarch64_decode_insn@@Base+0x87c>  // b.none
   3dee8:	mov	x24, x23
   3deec:	tbz	w8, #4, 3df1c <aarch64_decode_insn@@Base+0x1ec>
   3def0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3def4:	ldr	x8, [x8, #3944]
   3def8:	mov	w10, #0xffffffff            	// #-1
   3defc:	ldp	w9, w8, [x8, #8]
   3df00:	lsr	w9, w22, w9
   3df04:	lsl	w8, w10, w8
   3df08:	bic	w0, w9, w8
   3df0c:	bl	353c0 <get_cond_from_value@plt>
   3df10:	ldr	x24, [x19, #8]
   3df14:	str	x0, [x19, #16]
   3df18:	ldr	x8, [x24, #120]
   3df1c:	tbz	w8, #5, 3dfc8 <aarch64_decode_insn@@Base+0x298>
   3df20:	ldr	w0, [x24, #32]
   3df24:	bl	357a0 <aarch64_get_operand_class@plt>
   3df28:	cmp	w0, #0x1
   3df2c:	b.ne	3df38 <aarch64_decode_insn@@Base+0x208>  // b.any
   3df30:	mov	x27, xzr
   3df34:	b	3df4c <aarch64_decode_insn@@Base+0x21c>
   3df38:	ldr	w0, [x24, #36]
   3df3c:	bl	357a0 <aarch64_get_operand_class@plt>
   3df40:	cmp	w0, #0x1
   3df44:	b.ne	3f290 <aarch64_decode_insn@@Base+0x1560>  // b.any
   3df48:	mov	w27, #0x1                   	// #1
   3df4c:	adrp	x25, 9b000 <aarch64_operands@@Base+0x16c38>
   3df50:	ldr	w8, [x19]
   3df54:	ldr	x25, [x25, #3944]
   3df58:	mov	w11, #0xffffffff            	// #-1
   3df5c:	ldr	w9, [x25, #472]
   3df60:	ldr	w10, [x25, #476]
   3df64:	lsr	w8, w8, w9
   3df68:	lsl	w9, w11, w10
   3df6c:	bic	w26, w8, w9
   3df70:	cmp	w26, #0x1
   3df74:	b.hi	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.pmore
   3df78:	add	w24, w26, #0x1
   3df7c:	mov	w0, w24
   3df80:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3df84:	cmp	w0, w26
   3df88:	b.ne	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.any
   3df8c:	mov	w8, #0x38                  	// #56
   3df90:	madd	x8, x27, x8, x19
   3df94:	strb	w24, [x8, #28]
   3df98:	ldr	x24, [x19, #8]
   3df9c:	ldr	x8, [x24, #120]
   3dfa0:	tbz	w8, #23, 3dfc8 <aarch64_decode_insn@@Base+0x298>
   3dfa4:	ldr	w9, [x19]
   3dfa8:	ldr	w10, [x25, #448]
   3dfac:	ldr	w11, [x25, #452]
   3dfb0:	mov	w12, #0xffffffff            	// #-1
   3dfb4:	lsr	w9, w9, w10
   3dfb8:	lsl	w10, w12, w11
   3dfbc:	bic	w9, w9, w10
   3dfc0:	cmp	w9, w26
   3dfc4:	b.ne	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.any
   3dfc8:	tbz	w8, #27, 3e04c <aarch64_decode_insn@@Base+0x31c>
   3dfcc:	ldr	w0, [x24, #32]
   3dfd0:	bl	357a0 <aarch64_get_operand_class@plt>
   3dfd4:	cmp	w0, #0x1
   3dfd8:	b.ne	3dfe4 <aarch64_decode_insn@@Base+0x2b4>  // b.any
   3dfdc:	mov	x25, xzr
   3dfe0:	b	3dff8 <aarch64_decode_insn@@Base+0x2c8>
   3dfe4:	ldr	w0, [x24, #36]
   3dfe8:	bl	357a0 <aarch64_get_operand_class@plt>
   3dfec:	cmp	w0, #0x1
   3dff0:	b.ne	3f290 <aarch64_decode_insn@@Base+0x1560>  // b.any
   3dff4:	mov	w25, #0x1                   	// #1
   3dff8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3dffc:	ldr	w8, [x19]
   3e000:	ldr	x9, [x9, #3944]
   3e004:	mov	w11, #0xffffffff            	// #-1
   3e008:	ldr	w10, [x9, #480]
   3e00c:	ldr	w9, [x9, #484]
   3e010:	lsr	w8, w8, w10
   3e014:	lsl	w9, w11, w9
   3e018:	bic	w26, w8, w9
   3e01c:	cmp	w26, #0x1
   3e020:	b.hi	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.pmore
   3e024:	add	w24, w26, #0x1
   3e028:	mov	w0, w24
   3e02c:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3e030:	cmp	w0, w26
   3e034:	b.ne	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.any
   3e038:	mov	w8, #0x38                  	// #56
   3e03c:	madd	x8, x25, x8, x19
   3e040:	strb	w24, [x8, #28]
   3e044:	ldr	x24, [x19, #8]
   3e048:	ldr	x8, [x24, #120]
   3e04c:	tbnz	w8, #6, 3e06c <aarch64_decode_insn@@Base+0x33c>
   3e050:	tbz	w8, #7, 3e234 <aarch64_decode_insn@@Base+0x504>
   3e054:	ldr	w0, [x24, #36]
   3e058:	bl	357a0 <aarch64_get_operand_class@plt>
   3e05c:	cmp	w0, #0x3
   3e060:	b.ne	3e1c8 <aarch64_decode_insn@@Base+0x498>  // b.any
   3e064:	mov	w8, #0x1                   	// #1
   3e068:	b	3e1dc <aarch64_decode_insn@@Base+0x4ac>
   3e06c:	ldp	w1, w8, [x24, #12]
   3e070:	ldr	w0, [x19]
   3e074:	mov	w2, #0x2                   	// #2
   3e078:	mov	w4, #0xb                   	// #11
   3e07c:	sub	w8, w8, #0x12
   3e080:	cmp	w8, #0x4
   3e084:	mov	w8, #0x8                   	// #8
   3e088:	cinc	w25, w8, cc  // cc = lo, ul, last
   3e08c:	mov	w3, w25
   3e090:	bl	35440 <extract_fields@plt>
   3e094:	ldr	x8, [x19, #8]
   3e098:	mov	w24, w0
   3e09c:	mov	w2, #0x2                   	// #2
   3e0a0:	mov	w4, #0xb                   	// #11
   3e0a4:	ldr	w8, [x8, #12]
   3e0a8:	mov	w1, wzr
   3e0ac:	mov	w3, w25
   3e0b0:	mvn	w0, w8
   3e0b4:	bl	35440 <extract_fields@plt>
   3e0b8:	ldr	x8, [x19, #8]
   3e0bc:	mov	w25, w0
   3e0c0:	mov	x0, x8
   3e0c4:	bl	35830 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3e0c8:	cmp	w25, #0x7
   3e0cc:	mov	w26, w0
   3e0d0:	b.ne	3e104 <aarch64_decode_insn@@Base+0x3d4>  // b.any
   3e0d4:	cmp	w24, #0x8
   3e0d8:	b.hi	3f250 <aarch64_decode_insn@@Base+0x1520>  // b.pmore
   3e0dc:	add	w8, w24, #0xd
   3e0e0:	add	w9, w24, #0xe
   3e0e4:	cmp	w8, #0xe
   3e0e8:	csel	w25, w9, w8, hi  // hi = pmore
   3e0ec:	mov	w0, w25
   3e0f0:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3e0f4:	cmp	w0, w24
   3e0f8:	b.ne	3f250 <aarch64_decode_insn@@Base+0x1520>  // b.any
   3e0fc:	sxtw	x26, w26
   3e100:	b	3e1ac <aarch64_decode_insn@@Base+0x47c>
   3e104:	ldr	x8, [x19, #8]
   3e108:	sxtw	x26, w26
   3e10c:	add	x9, x8, x26
   3e110:	ldrb	w10, [x9, #56]
   3e114:	str	w10, [sp]
   3e118:	cbz	w10, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e11c:	ldrb	w9, [x9, #62]
   3e120:	str	w9, [sp, #4]
   3e124:	cbz	w9, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e128:	add	x9, x8, x26
   3e12c:	ldrb	w10, [x9, #68]
   3e130:	str	w10, [sp, #8]
   3e134:	cbz	w10, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e138:	ldrb	w9, [x9, #74]
   3e13c:	str	w9, [sp, #12]
   3e140:	cbz	w9, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e144:	add	x9, x8, x26
   3e148:	ldrb	w10, [x9, #80]
   3e14c:	str	w10, [sp, #16]
   3e150:	cbz	w10, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e154:	ldrb	w9, [x9, #86]
   3e158:	str	w9, [sp, #20]
   3e15c:	cbz	w9, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e160:	add	x9, x8, x26
   3e164:	ldrb	w10, [x9, #92]
   3e168:	str	w10, [sp, #24]
   3e16c:	cbz	w10, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e170:	ldrb	w9, [x9, #98]
   3e174:	str	w9, [sp, #28]
   3e178:	cbz	w9, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e17c:	add	x8, x8, x26
   3e180:	ldrb	w9, [x8, #104]
   3e184:	str	w9, [sp, #32]
   3e188:	cbz	w9, 3e194 <aarch64_decode_insn@@Base+0x464>
   3e18c:	ldrb	w8, [x8, #110]
   3e190:	str	w8, [sp, #36]
   3e194:	mov	x1, sp
   3e198:	mov	w0, w24
   3e19c:	mov	w2, w25
   3e1a0:	bl	3ff00 <print_aarch64_disassembler_options@@Base+0xe0>
   3e1a4:	cbz	w0, 3f048 <aarch64_decode_insn@@Base+0x1318>
   3e1a8:	mov	w25, w0
   3e1ac:	mov	w8, #0x38                  	// #56
   3e1b0:	madd	x8, x26, x8, x19
   3e1b4:	strb	w25, [x8, #28]
   3e1b8:	mov	w8, #0x1                   	// #1
   3e1bc:	cbz	w8, 3de28 <aarch64_decode_insn@@Base+0xf8>
   3e1c0:	ldr	x25, [x19, #8]
   3e1c4:	b	3e5ac <aarch64_decode_insn@@Base+0x87c>
   3e1c8:	ldr	w0, [x24, #32]
   3e1cc:	bl	357a0 <aarch64_get_operand_class@plt>
   3e1d0:	cmp	w0, #0x3
   3e1d4:	b.ne	3f310 <aarch64_decode_insn@@Base+0x15e0>  // b.any
   3e1d8:	mov	x8, xzr
   3e1dc:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   3e1e0:	ldr	w9, [x19]
   3e1e4:	ldr	x10, [x10, #3944]
   3e1e8:	mov	w12, #0xffffffff            	// #-1
   3e1ec:	ldr	w11, [x10, #288]
   3e1f0:	ldr	w10, [x10, #292]
   3e1f4:	lsr	w9, w9, w11
   3e1f8:	lsl	w10, w12, w10
   3e1fc:	bics	w9, w9, w10
   3e200:	b.eq	3e224 <aarch64_decode_insn@@Base+0x4f4>  // b.none
   3e204:	cmp	w9, #0x3
   3e208:	b.eq	3e21c <aarch64_decode_insn@@Base+0x4ec>  // b.none
   3e20c:	cmp	w9, #0x1
   3e210:	b.ne	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.any
   3e214:	mov	w9, #0x8                   	// #8
   3e218:	b	3e228 <aarch64_decode_insn@@Base+0x4f8>
   3e21c:	mov	w9, #0x6                   	// #6
   3e220:	b	3e228 <aarch64_decode_insn@@Base+0x4f8>
   3e224:	mov	w9, #0x7                   	// #7
   3e228:	mov	w10, #0x38                  	// #56
   3e22c:	madd	x8, x8, x10, x19
   3e230:	strb	w9, [x8, #28]
   3e234:	ldr	x25, [x19, #8]
   3e238:	ldr	x8, [x25, #120]
   3e23c:	tbz	w8, #8, 3e3d8 <aarch64_decode_insn@@Base+0x6a8>
   3e240:	ldr	w0, [x25, #32]
   3e244:	bl	357a0 <aarch64_get_operand_class@plt>
   3e248:	cmp	w0, #0x6
   3e24c:	b.ne	3e260 <aarch64_decode_insn@@Base+0x530>  // b.any
   3e250:	ldrb	w0, [x25, #56]
   3e254:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3e258:	and	w24, w0, #0xff
   3e25c:	b	3e264 <aarch64_decode_insn@@Base+0x534>
   3e260:	mov	w24, wzr
   3e264:	ldr	w0, [x25, #36]
   3e268:	bl	357a0 <aarch64_get_operand_class@plt>
   3e26c:	cmp	w0, #0x6
   3e270:	b.ne	3e28c <aarch64_decode_insn@@Base+0x55c>  // b.any
   3e274:	ldrb	w0, [x25, #57]
   3e278:	bl	35710 <aarch64_get_qualifier_esize@plt>
   3e27c:	and	w9, w0, #0xff
   3e280:	cmp	w9, w24
   3e284:	b.eq	3e298 <aarch64_decode_insn@@Base+0x568>  // b.none
   3e288:	b	3e29c <aarch64_decode_insn@@Base+0x56c>
   3e28c:	mov	w9, wzr
   3e290:	cmp	w9, w24
   3e294:	b.ne	3e29c <aarch64_decode_insn@@Base+0x56c>  // b.any
   3e298:	cbz	w9, 3f2b0 <aarch64_decode_insn@@Base+0x1580>
   3e29c:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   3e2a0:	ldr	w10, [x19]
   3e2a4:	ldr	x8, [x19, #8]
   3e2a8:	ldr	x11, [x11, #3944]
   3e2ac:	cmp	w24, #0x0
   3e2b0:	cset	w12, eq  // eq = none
   3e2b4:	cmp	w24, w9, lsl #1
   3e2b8:	ldp	w9, w11, [x11, #64]
   3e2bc:	ldr	w14, [x8, #12]
   3e2c0:	cset	w13, eq  // eq = none
   3e2c4:	orr	w26, w12, w13
   3e2c8:	mov	w12, #0xffffffff            	// #-1
   3e2cc:	lsl	w11, w12, w11
   3e2d0:	mvn	w12, w14
   3e2d4:	bic	w10, w10, w14
   3e2d8:	lsr	w10, w10, w9
   3e2dc:	lsr	w9, w12, w9
   3e2e0:	bic	w2, w9, w11
   3e2e4:	cmp	w2, #0x3
   3e2e8:	bic	w24, w10, w11
   3e2ec:	b.ne	3e32c <aarch64_decode_insn@@Base+0x5fc>  // b.any
   3e2f0:	cmp	w24, #0x4
   3e2f4:	b.hi	3e30c <aarch64_decode_insn@@Base+0x5dc>  // b.pmore
   3e2f8:	add	w25, w24, #0x5
   3e2fc:	mov	w0, w25
   3e300:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3e304:	cmp	w0, w24
   3e308:	b.eq	3e3c4 <aarch64_decode_insn@@Base+0x694>  // b.none
   3e30c:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3e310:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3e314:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3e318:	add	x0, x0, #0x12b
   3e31c:	add	x1, x1, #0x718
   3e320:	add	x3, x3, #0x175
   3e324:	mov	w2, #0xe6                  	// #230
   3e328:	bl	35b30 <__assert_fail@plt>
   3e32c:	add	x9, x8, x26
   3e330:	ldrb	w10, [x9, #56]
   3e334:	str	w10, [sp]
   3e338:	cbz	w10, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e33c:	ldrb	w9, [x9, #62]
   3e340:	str	w9, [sp, #4]
   3e344:	cbz	w9, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e348:	add	x9, x8, x26
   3e34c:	ldrb	w10, [x9, #68]
   3e350:	str	w10, [sp, #8]
   3e354:	cbz	w10, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e358:	ldrb	w9, [x9, #74]
   3e35c:	str	w9, [sp, #12]
   3e360:	cbz	w9, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e364:	add	x9, x8, x26
   3e368:	ldrb	w10, [x9, #80]
   3e36c:	str	w10, [sp, #16]
   3e370:	cbz	w10, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e374:	ldrb	w9, [x9, #86]
   3e378:	str	w9, [sp, #20]
   3e37c:	cbz	w9, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e380:	add	x9, x8, x26
   3e384:	ldrb	w10, [x9, #92]
   3e388:	str	w10, [sp, #24]
   3e38c:	cbz	w10, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e390:	ldrb	w9, [x9, #98]
   3e394:	str	w9, [sp, #28]
   3e398:	cbz	w9, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e39c:	add	x8, x8, x26
   3e3a0:	ldrb	w9, [x8, #104]
   3e3a4:	str	w9, [sp, #32]
   3e3a8:	cbz	w9, 3e3b4 <aarch64_decode_insn@@Base+0x684>
   3e3ac:	ldrb	w8, [x8, #110]
   3e3b0:	str	w8, [sp, #36]
   3e3b4:	mov	x1, sp
   3e3b8:	mov	w0, w24
   3e3bc:	bl	3ff00 <print_aarch64_disassembler_options@@Base+0xe0>
   3e3c0:	mov	w25, w0
   3e3c4:	mov	w8, #0x38                  	// #56
   3e3c8:	madd	x8, x26, x8, x19
   3e3cc:	strb	w25, [x8, #28]
   3e3d0:	ldr	x25, [x19, #8]
   3e3d4:	ldr	x8, [x25, #120]
   3e3d8:	tbz	w8, #9, 3e498 <aarch64_decode_insn@@Base+0x768>
   3e3dc:	ldr	w0, [x25, #32]
   3e3e0:	bl	357a0 <aarch64_get_operand_class@plt>
   3e3e4:	cmp	w0, #0x4
   3e3e8:	b.ne	3f2d0 <aarch64_decode_insn@@Base+0x15a0>  // b.any
   3e3ec:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e3f0:	ldr	w8, [x19]
   3e3f4:	ldr	x9, [x9, #3944]
   3e3f8:	mov	w10, #0xffffffff            	// #-1
   3e3fc:	ldr	w11, [x9, #344]
   3e400:	ldr	w12, [x9, #348]
   3e404:	lsr	w11, w8, w11
   3e408:	lsl	w12, w10, w12
   3e40c:	bic	w12, w11, w12
   3e410:	tbnz	w12, #0, 3e440 <aarch64_decode_insn@@Base+0x710>
   3e414:	mov	w11, #0xffffffff            	// #-1
   3e418:	cmp	w11, #0x2
   3e41c:	b.eq	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.none
   3e420:	mov	w13, w12
   3e424:	lsr	w12, w12, #1
   3e428:	add	w11, w11, #0x1
   3e42c:	tbz	w13, #1, 3e418 <aarch64_decode_insn@@Base+0x6e8>
   3e430:	cmp	w11, #0x2
   3e434:	b.hi	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.pmore
   3e438:	add	w11, w11, #0x1
   3e43c:	b	3e444 <aarch64_decode_insn@@Base+0x714>
   3e440:	mov	w11, wzr
   3e444:	ldr	x12, [x19, #8]
   3e448:	ldp	w13, w9, [x9, #88]
   3e44c:	ldr	w12, [x12, #12]
   3e450:	lsl	w9, w10, w9
   3e454:	bic	w8, w8, w12
   3e458:	lsr	w8, w8, w13
   3e45c:	bic	w8, w8, w9
   3e460:	orr	w25, w8, w11, lsl #1
   3e464:	cmp	w25, #0x8
   3e468:	b.hi	3f250 <aarch64_decode_insn@@Base+0x1520>  // b.pmore
   3e46c:	add	w8, w25, #0xd
   3e470:	add	w9, w25, #0xe
   3e474:	cmp	w8, #0xe
   3e478:	csel	w24, w9, w8, hi  // hi = pmore
   3e47c:	mov	w0, w24
   3e480:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3e484:	cmp	w0, w25
   3e488:	b.ne	3f250 <aarch64_decode_insn@@Base+0x1520>  // b.any
   3e48c:	ldr	x25, [x19, #8]
   3e490:	strb	w24, [x19, #28]
   3e494:	ldr	x8, [x25, #120]
   3e498:	tbz	w8, #10, 3e544 <aarch64_decode_insn@@Base+0x814>
   3e49c:	add	x0, x25, #0x20
   3e4a0:	mov	w1, #0x4                   	// #4
   3e4a4:	bl	351c0 <aarch64_operand_index@plt>
   3e4a8:	cmn	w0, #0x1
   3e4ac:	b.eq	3e4dc <aarch64_decode_insn@@Base+0x7ac>  // b.none
   3e4b0:	mov	w24, w0
   3e4b4:	cmp	w0, #0x2
   3e4b8:	b.cc	3e4f4 <aarch64_decode_insn@@Base+0x7c4>  // b.lo, b.ul, b.last
   3e4bc:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3e4c0:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3e4c4:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3e4c8:	add	x0, x0, #0x324
   3e4cc:	add	x1, x1, #0x718
   3e4d0:	add	x3, x3, #0x3f9
   3e4d4:	mov	w2, #0x8a7                 	// #2215
   3e4d8:	bl	35b30 <__assert_fail@plt>
   3e4dc:	ldr	x8, [x19, #8]
   3e4e0:	ldr	w0, [x8, #32]
   3e4e4:	bl	357a0 <aarch64_get_operand_class@plt>
   3e4e8:	cmp	w0, #0x1
   3e4ec:	b.ne	3f370 <aarch64_decode_insn@@Base+0x1640>  // b.any
   3e4f0:	mov	w24, wzr
   3e4f4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e4f8:	ldr	w8, [x19]
   3e4fc:	ldr	x9, [x9, #3944]
   3e500:	mov	w11, #0xffffffff            	// #-1
   3e504:	ldp	w10, w9, [x9, #88]
   3e508:	lsr	w8, w8, w10
   3e50c:	lsl	w9, w11, w9
   3e510:	bic	w26, w8, w9
   3e514:	cmp	w26, #0x1
   3e518:	b.hi	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.pmore
   3e51c:	add	w25, w26, #0x1
   3e520:	mov	w0, w25
   3e524:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3e528:	cmp	w0, w26
   3e52c:	b.ne	3f230 <aarch64_decode_insn@@Base+0x1500>  // b.any
   3e530:	mov	w8, #0x38                  	// #56
   3e534:	umaddl	x8, w24, w8, x19
   3e538:	strb	w25, [x8, #28]
   3e53c:	ldr	x25, [x19, #8]
   3e540:	ldr	x8, [x25, #120]
   3e544:	tbz	w8, #11, 3e5a8 <aarch64_decode_insn@@Base+0x878>
   3e548:	ldr	w0, [x25, #32]
   3e54c:	bl	357a0 <aarch64_get_operand_class@plt>
   3e550:	cmp	w0, #0x1
   3e554:	b.ne	3f2f0 <aarch64_decode_insn@@Base+0x15c0>  // b.any
   3e558:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3e55c:	ldr	x8, [x8, #3944]
   3e560:	ldr	w9, [x8, #268]
   3e564:	cmp	w9, #0x1
   3e568:	b.lt	3e578 <aarch64_decode_insn@@Base+0x848>  // b.tstop
   3e56c:	ldr	w8, [x8, #264]
   3e570:	mov	w9, #0x1                   	// #1
   3e574:	b	3e580 <aarch64_decode_insn@@Base+0x850>
   3e578:	mov	w9, wzr
   3e57c:	mov	w8, wzr
   3e580:	ldr	w10, [x19]
   3e584:	mov	w11, #0xffffffff            	// #-1
   3e588:	ldr	x25, [x19, #8]
   3e58c:	lsl	w9, w11, w9
   3e590:	lsr	w8, w10, w8
   3e594:	bics	wzr, w8, w9
   3e598:	mov	w8, #0x1                   	// #1
   3e59c:	cinc	w8, w8, eq  // eq = none
   3e5a0:	strb	w8, [x19, #28]
   3e5a4:	ldr	x8, [x25, #120]
   3e5a8:	tbnz	w8, #22, 3e5f4 <aarch64_decode_insn@@Base+0x8c4>
   3e5ac:	ldr	w8, [x25, #16]
   3e5b0:	sub	w9, w8, #0x47
   3e5b4:	cmp	w9, #0x12
   3e5b8:	b.hi	3e864 <aarch64_decode_insn@@Base+0xb34>  // b.pmore
   3e5bc:	adrp	x10, 57000 <xexit@@Base+0xdd4>
   3e5c0:	add	x10, x10, #0x62e
   3e5c4:	adr	x11, 3e5dc <aarch64_decode_insn@@Base+0x8ac>
   3e5c8:	ldrh	w12, [x10, x9, lsl #1]
   3e5cc:	add	x11, x11, x12, lsl #2
   3e5d0:	mov	w8, wzr
   3e5d4:	mov	w4, #0x76                  	// #118
   3e5d8:	br	x11
   3e5dc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e5e0:	ldr	w8, [x19]
   3e5e4:	ldr	x9, [x9, #3944]
   3e5e8:	ldr	w10, [x9, #896]
   3e5ec:	ldr	w9, [x9, #900]
   3e5f0:	b	3e818 <aarch64_decode_insn@@Base+0xae8>
   3e5f4:	ldr	w9, [x25, #20]
   3e5f8:	mov	w8, wzr
   3e5fc:	sub	w10, w9, #0x3a
   3e600:	cmp	w10, #0x15
   3e604:	b.hi	3e1bc <aarch64_decode_insn@@Base+0x48c>  // b.pmore
   3e608:	adrp	x11, 57000 <xexit@@Base+0xdd4>
   3e60c:	add	x11, x11, #0x602
   3e610:	adr	x12, 3e1bc <aarch64_decode_insn@@Base+0x48c>
   3e614:	ldrh	w13, [x11, x10, lsl #1]
   3e618:	add	x12, x12, x13, lsl #2
   3e61c:	br	x12
   3e620:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3e624:	ldr	x8, [x8, #3944]
   3e628:	ldr	w10, [x8, #68]
   3e62c:	cmp	w10, #0x1
   3e630:	b.lt	3eea8 <aarch64_decode_insn@@Base+0x1178>  // b.tstop
   3e634:	ldr	w8, [x8, #64]
   3e638:	mov	w10, #0x1                   	// #1
   3e63c:	b	3eeb0 <aarch64_decode_insn@@Base+0x1180>
   3e640:	ldr	w0, [x19]
   3e644:	mov	w2, #0x2                   	// #2
   3e648:	mov	w3, #0x70                  	// #112
   3e64c:	mov	w4, #0x76                  	// #118
   3e650:	mov	w1, wzr
   3e654:	bl	35440 <extract_fields@plt>
   3e658:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e65c:	cmp	w0, #0x1
   3e660:	mov	w8, wzr
   3e664:	b.eq	3e828 <aarch64_decode_insn@@Base+0xaf8>  // b.none
   3e668:	mov	w8, wzr
   3e66c:	asr	w0, w0, #1
   3e670:	cmp	w0, #0x1
   3e674:	add	w8, w8, #0x1
   3e678:	b.ne	3e66c <aarch64_decode_insn@@Base+0x93c>  // b.any
   3e67c:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e680:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e684:	ldr	w8, [x19]
   3e688:	ldr	x9, [x9, #3944]
   3e68c:	ldr	w10, [x9, #912]
   3e690:	ldr	w9, [x9, #916]
   3e694:	b	3e818 <aarch64_decode_insn@@Base+0xae8>
   3e698:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e69c:	ldr	w8, [x19]
   3e6a0:	ldr	x9, [x9, #3944]
   3e6a4:	mov	w11, #0xffffffff            	// #-1
   3e6a8:	ldr	w10, [x9, #904]
   3e6ac:	ldr	w9, [x9, #908]
   3e6b0:	b	3ea2c <aarch64_decode_insn@@Base+0xcfc>
   3e6b4:	ldr	w0, [x19]
   3e6b8:	mov	w2, #0x2                   	// #2
   3e6bc:	mov	w3, #0x8                   	// #8
   3e6c0:	mov	w4, #0x45                  	// #69
   3e6c4:	b	3e7b4 <aarch64_decode_insn@@Base+0xa84>
   3e6c8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e6cc:	ldr	w8, [x19]
   3e6d0:	ldr	x9, [x9, #3944]
   3e6d4:	ldp	w10, w9, [x9, #64]
   3e6d8:	b	3e818 <aarch64_decode_insn@@Base+0xae8>
   3e6dc:	ldr	w0, [x19]
   3e6e0:	mov	w2, #0x2                   	// #2
   3e6e4:	mov	w3, #0x74                  	// #116
   3e6e8:	mov	w4, #0x2b                  	// #43
   3e6ec:	mov	w1, wzr
   3e6f0:	bl	35440 <extract_fields@plt>
   3e6f4:	tst	w0, #0x1f
   3e6f8:	b.eq	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.none
   3e6fc:	mov	w8, wzr
   3e700:	tbnz	w0, #0, 3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e704:	mov	w9, w0
   3e708:	asr	w0, w0, #1
   3e70c:	add	w8, w8, #0x1
   3e710:	tbz	w9, #1, 3e704 <aarch64_decode_insn@@Base+0x9d4>
   3e714:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e718:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e71c:	ldr	w8, [x19]
   3e720:	ldr	x9, [x9, #3944]
   3e724:	mov	w11, #0xffffffff            	// #-1
   3e728:	ldp	w10, w9, [x9, #64]
   3e72c:	lsr	w8, w8, w10
   3e730:	lsl	w9, w11, w9
   3e734:	bic	w8, w8, w9
   3e738:	ubfx	w8, w8, #1, #1
   3e73c:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e740:	ldr	w8, [x19]
   3e744:	mov	w9, #0x400                 	// #1024
   3e748:	movk	w9, #0x2, lsl #16
   3e74c:	orr	w10, w9, #0x200
   3e750:	and	w10, w8, w10
   3e754:	cmp	w10, #0x600
   3e758:	b.ne	3ede8 <aarch64_decode_insn@@Base+0x10b8>  // b.any
   3e75c:	mov	w8, wzr
   3e760:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e764:	mov	w4, #0x75                  	// #117
   3e768:	ldr	w0, [x19]
   3e76c:	mov	w2, #0x2                   	// #2
   3e770:	mov	w3, #0x74                  	// #116
   3e774:	mov	w1, wzr
   3e778:	bl	35440 <extract_fields@plt>
   3e77c:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e780:	cmp	w0, #0x1
   3e784:	mov	w8, wzr
   3e788:	b.eq	3e828 <aarch64_decode_insn@@Base+0xaf8>  // b.none
   3e78c:	mov	w8, wzr
   3e790:	asr	w0, w0, #1
   3e794:	cmp	w0, #0x1
   3e798:	add	w8, w8, #0x1
   3e79c:	b.ne	3e790 <aarch64_decode_insn@@Base+0xa60>  // b.any
   3e7a0:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e7a4:	ldr	w0, [x19]
   3e7a8:	mov	w2, #0x2                   	// #2
   3e7ac:	mov	w3, #0x8                   	// #8
   3e7b0:	mov	w4, #0x44                  	// #68
   3e7b4:	mov	w1, wzr
   3e7b8:	bl	35440 <extract_fields@plt>
   3e7bc:	mov	w8, w0
   3e7c0:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e7c4:	ldr	w0, [x19]
   3e7c8:	mov	w2, #0x2                   	// #2
   3e7cc:	mov	w3, #0x74                  	// #116
   3e7d0:	mov	w4, #0x76                  	// #118
   3e7d4:	mov	w1, wzr
   3e7d8:	bl	35440 <extract_fields@plt>
   3e7dc:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e7e0:	cmp	w0, #0x1
   3e7e4:	mov	w8, wzr
   3e7e8:	b.eq	3e828 <aarch64_decode_insn@@Base+0xaf8>  // b.none
   3e7ec:	mov	w8, wzr
   3e7f0:	asr	w0, w0, #1
   3e7f4:	cmp	w0, #0x1
   3e7f8:	add	w8, w8, #0x1
   3e7fc:	b.ne	3e7f0 <aarch64_decode_insn@@Base+0xac0>  // b.any
   3e800:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3e804:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3e808:	ldr	w8, [x19]
   3e80c:	ldr	x9, [x9, #3944]
   3e810:	ldr	w10, [x9, #536]
   3e814:	ldr	w9, [x9, #540]
   3e818:	mov	w11, #0xffffffff            	// #-1
   3e81c:	lsr	w8, w8, w10
   3e820:	lsl	w9, w11, w9
   3e824:	bic	w8, w8, w9
   3e828:	ldr	x9, [x19, #8]
   3e82c:	mov	w10, #0x6                   	// #6
   3e830:	smaddl	x8, w8, w10, x9
   3e834:	ldrb	w9, [x8, #56]
   3e838:	strb	w9, [x19, #28]
   3e83c:	ldrb	w9, [x8, #57]
   3e840:	strb	w9, [x19, #84]
   3e844:	ldrb	w9, [x8, #58]
   3e848:	strb	w9, [x19, #140]
   3e84c:	ldrb	w9, [x8, #59]
   3e850:	strb	w9, [x19, #196]
   3e854:	ldrb	w9, [x8, #60]
   3e858:	strb	w9, [x19, #252]
   3e85c:	ldrb	w8, [x8, #61]
   3e860:	strb	w8, [x19, #308]
   3e864:	ldr	w8, [x23, #32]
   3e868:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e86c:	adrp	x24, 9b000 <aarch64_operands@@Base+0x16c38>
   3e870:	ldr	x24, [x24, #4032]
   3e874:	mov	w9, #0x30                  	// #48
   3e878:	madd	x9, x8, x9, x24
   3e87c:	ldrb	w9, [x9, #16]
   3e880:	tbz	w9, #1, 3e8a4 <aarch64_decode_insn@@Base+0xb74>
   3e884:	mov	w9, #0x30                  	// #48
   3e888:	madd	x0, x8, x9, x24
   3e88c:	add	x1, x19, #0x18
   3e890:	mov	w2, w22
   3e894:	mov	x3, x19
   3e898:	mov	x4, x20
   3e89c:	bl	35690 <aarch64_extract_operand@plt>
   3e8a0:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e8a4:	ldr	w8, [x23, #36]
   3e8a8:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e8ac:	mov	w9, #0x30                  	// #48
   3e8b0:	madd	x9, x8, x9, x24
   3e8b4:	ldrb	w9, [x9, #16]
   3e8b8:	tbz	w9, #1, 3e8dc <aarch64_decode_insn@@Base+0xbac>
   3e8bc:	mov	w9, #0x30                  	// #48
   3e8c0:	madd	x0, x8, x9, x24
   3e8c4:	add	x1, x19, #0x50
   3e8c8:	mov	w2, w22
   3e8cc:	mov	x3, x19
   3e8d0:	mov	x4, x20
   3e8d4:	bl	35690 <aarch64_extract_operand@plt>
   3e8d8:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e8dc:	ldr	w8, [x23, #40]
   3e8e0:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e8e4:	mov	w9, #0x30                  	// #48
   3e8e8:	madd	x9, x8, x9, x24
   3e8ec:	ldrb	w9, [x9, #16]
   3e8f0:	tbz	w9, #1, 3e914 <aarch64_decode_insn@@Base+0xbe4>
   3e8f4:	mov	w9, #0x30                  	// #48
   3e8f8:	madd	x0, x8, x9, x24
   3e8fc:	add	x1, x19, #0x88
   3e900:	mov	w2, w22
   3e904:	mov	x3, x19
   3e908:	mov	x4, x20
   3e90c:	bl	35690 <aarch64_extract_operand@plt>
   3e910:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e914:	ldr	w8, [x23, #44]
   3e918:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e91c:	mov	w9, #0x30                  	// #48
   3e920:	madd	x9, x8, x9, x24
   3e924:	ldrb	w9, [x9, #16]
   3e928:	tbz	w9, #1, 3e94c <aarch64_decode_insn@@Base+0xc1c>
   3e92c:	mov	w9, #0x30                  	// #48
   3e930:	madd	x0, x8, x9, x24
   3e934:	add	x1, x19, #0xc0
   3e938:	mov	w2, w22
   3e93c:	mov	x3, x19
   3e940:	mov	x4, x20
   3e944:	bl	35690 <aarch64_extract_operand@plt>
   3e948:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e94c:	ldr	w8, [x23, #48]
   3e950:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e954:	mov	w9, #0x30                  	// #48
   3e958:	madd	x9, x8, x9, x24
   3e95c:	ldrb	w9, [x9, #16]
   3e960:	tbz	w9, #1, 3e984 <aarch64_decode_insn@@Base+0xc54>
   3e964:	mov	w9, #0x30                  	// #48
   3e968:	madd	x0, x8, x9, x24
   3e96c:	add	x1, x19, #0xf8
   3e970:	mov	w2, w22
   3e974:	mov	x3, x19
   3e978:	mov	x4, x20
   3e97c:	bl	35690 <aarch64_extract_operand@plt>
   3e980:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e984:	ldr	w8, [x23, #52]
   3e988:	cbz	w8, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e98c:	mov	w9, #0x30                  	// #48
   3e990:	madd	x9, x8, x9, x24
   3e994:	ldrb	w9, [x9, #16]
   3e998:	tbz	w9, #1, 3e9bc <aarch64_decode_insn@@Base+0xc8c>
   3e99c:	mov	w9, #0x30                  	// #48
   3e9a0:	madd	x0, x8, x9, x24
   3e9a4:	add	x1, x19, #0x130
   3e9a8:	mov	w2, w22
   3e9ac:	mov	x3, x19
   3e9b0:	mov	x4, x20
   3e9b4:	bl	35690 <aarch64_extract_operand@plt>
   3e9b8:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e9bc:	ldr	x8, [x23, #136]
   3e9c0:	cbz	x8, 3e9ec <aarch64_decode_insn@@Base+0xcbc>
   3e9c4:	mov	x0, x19
   3e9c8:	mov	w1, w22
   3e9cc:	mov	x2, xzr
   3e9d0:	mov	w3, wzr
   3e9d4:	mov	x4, x20
   3e9d8:	mov	x5, xzr
   3e9dc:	blr	x8
   3e9e0:	mov	w8, w0
   3e9e4:	mov	w0, wzr
   3e9e8:	cbnz	w8, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3e9ec:	mov	x0, x19
   3e9f0:	mov	x1, xzr
   3e9f4:	bl	35580 <aarch64_match_operands_constraint@plt>
   3e9f8:	cmp	w0, #0x1
   3e9fc:	b.ne	3de28 <aarch64_decode_insn@@Base+0xf8>  // b.any
   3ea00:	cbnz	w21, 3ea10 <aarch64_decode_insn@@Base+0xce0>
   3ea04:	ldr	x22, [x19, #8]
   3ea08:	ldrb	w8, [x22, #120]
   3ea0c:	tbnz	w8, #1, 3eab4 <aarch64_decode_insn@@Base+0xd84>
   3ea10:	mov	w0, #0x1                   	// #1
   3ea14:	b	3de2c <aarch64_decode_insn@@Base+0xfc>
   3ea18:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3ea1c:	ldr	w8, [x19]
   3ea20:	ldr	x9, [x9, #3944]
   3ea24:	mov	w11, #0xffffffff            	// #-1
   3ea28:	ldp	w10, w9, [x9, #64]
   3ea2c:	lsr	w8, w8, w10
   3ea30:	lsl	w9, w11, w9
   3ea34:	bic	w8, w8, w9
   3ea38:	subs	w8, w8, #0x1
   3ea3c:	b.ge	3e828 <aarch64_decode_insn@@Base+0xaf8>  // b.tcont
   3ea40:	b	3de28 <aarch64_decode_insn@@Base+0xf8>
   3ea44:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3ea48:	ldr	w8, [x19]
   3ea4c:	ldr	x9, [x9, #3944]
   3ea50:	mov	w11, #0xffffffff            	// #-1
   3ea54:	ldp	w10, w9, [x9, #64]
   3ea58:	lsr	w8, w8, w10
   3ea5c:	lsl	w9, w11, w9
   3ea60:	bic	w8, w8, w9
   3ea64:	cmp	w8, #0x2
   3ea68:	b.gt	3de28 <aarch64_decode_insn@@Base+0xf8>
   3ea6c:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3ea70:	ldr	w0, [x19]
   3ea74:	mov	w2, #0x2                   	// #2
   3ea78:	mov	w3, #0x70                  	// #112
   3ea7c:	mov	w4, #0x76                  	// #118
   3ea80:	mov	w1, wzr
   3ea84:	bl	35440 <extract_fields@plt>
   3ea88:	cbz	w0, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3ea8c:	cmp	w0, #0x1
   3ea90:	mov	w8, wzr
   3ea94:	b.eq	3e828 <aarch64_decode_insn@@Base+0xaf8>  // b.none
   3ea98:	mov	w8, wzr
   3ea9c:	tbnz	w0, #0, 3de28 <aarch64_decode_insn@@Base+0xf8>
   3eaa0:	asr	w0, w0, #1
   3eaa4:	cmp	w0, #0x1
   3eaa8:	add	w8, w8, #0x1
   3eaac:	b.ne	3ea9c <aarch64_decode_insn@@Base+0xd6c>  // b.any
   3eab0:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3eab4:	mov	x0, x22
   3eab8:	bl	35bf0 <aarch64_find_alias_opcode@plt>
   3eabc:	cbz	x0, 3f390 <aarch64_decode_insn@@Base+0x1660>
   3eac0:	mov	x8, sp
   3eac4:	adrp	x28, 57000 <xexit@@Base+0xdd4>
   3eac8:	mov	x21, x0
   3eacc:	add	x28, x28, #0x654
   3ead0:	add	x26, x8, #0x50
   3ead4:	add	x25, x8, #0x88
   3ead8:	mov	w27, #0x1f                  	// #31
   3eadc:	b	3eb48 <aarch64_decode_insn@@Base+0xe18>
   3eae0:	movi	v0.2d, #0x0
   3eae4:	str	xzr, [sp, #352]
   3eae8:	stp	q0, q0, [sp, #320]
   3eaec:	stp	q0, q0, [sp, #288]
   3eaf0:	stp	q0, q0, [sp, #256]
   3eaf4:	stp	q0, q0, [sp, #224]
   3eaf8:	stp	q0, q0, [sp, #192]
   3eafc:	stp	q0, q0, [sp, #160]
   3eb00:	stp	q0, q0, [sp, #128]
   3eb04:	stp	q0, q0, [sp, #96]
   3eb08:	stp	q0, q0, [sp, #64]
   3eb0c:	stp	q0, q0, [sp, #32]
   3eb10:	stp	q0, q0, [sp]
   3eb14:	ldr	w1, [x19]
   3eb18:	mov	x2, sp
   3eb1c:	mov	w3, #0x1                   	// #1
   3eb20:	mov	x0, x21
   3eb24:	mov	x4, x20
   3eb28:	bl	3ddb0 <aarch64_decode_insn@@Base+0x80>
   3eb2c:	cmp	w0, #0x1
   3eb30:	b.eq	3f1f8 <aarch64_decode_insn@@Base+0x14c8>  // b.none
   3eb34:	mov	x0, x21
   3eb38:	bl	35b50 <aarch64_find_next_alias_opcode@plt>
   3eb3c:	mov	x21, x0
   3eb40:	mov	w0, #0x1                   	// #1
   3eb44:	cbz	x21, 3de2c <aarch64_decode_insn@@Base+0xfc>
   3eb48:	ldr	x8, [x21, #120]
   3eb4c:	tbnz	w8, #0, 3eb58 <aarch64_decode_insn@@Base+0xe28>
   3eb50:	ldrb	w9, [x22, #120]
   3eb54:	tbz	w9, #1, 3f270 <aarch64_decode_insn@@Base+0x1540>
   3eb58:	tbnz	w8, #21, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3eb5c:	ldr	w8, [x19]
   3eb60:	ldp	w10, w9, [x21, #8]
   3eb64:	and	w8, w9, w8
   3eb68:	cmp	w8, w10
   3eb6c:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3eb70:	mov	x0, x21
   3eb74:	bl	35230 <aarch64_num_of_operands@plt>
   3eb78:	cbnz	w0, 3eb8c <aarch64_decode_insn@@Base+0xe5c>
   3eb7c:	ldr	w8, [x21, #8]
   3eb80:	ldr	w9, [x19]
   3eb84:	cmp	w8, w9
   3eb88:	b.eq	3f050 <aarch64_decode_insn@@Base+0x1320>  // b.none
   3eb8c:	ldrb	w8, [x21, #122]
   3eb90:	tbz	w8, #4, 3eae0 <aarch64_decode_insn@@Base+0xdb0>
   3eb94:	mov	x0, sp
   3eb98:	mov	w2, #0x168                 	// #360
   3eb9c:	mov	x1, x19
   3eba0:	bl	35110 <memcpy@plt>
   3eba4:	ldr	w8, [x21, #20]
   3eba8:	sub	w8, w8, #0x23
   3ebac:	cmp	w8, #0x21
   3ebb0:	b.hi	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.pmore
   3ebb4:	adr	x9, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ebb8:	ldrb	w10, [x28, x8]
   3ebbc:	add	x9, x9, x10, lsl #2
   3ebc0:	br	x9
   3ebc4:	ldr	x8, [sp, #152]
   3ebc8:	cbnz	x8, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ebcc:	b	3f1d8 <aarch64_decode_insn@@Base+0x14a8>
   3ebd0:	ldr	x8, [sp, #152]
   3ebd4:	ldr	x9, [sp, #208]
   3ebd8:	subs	x8, x9, x8
   3ebdc:	b.lt	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.tstop
   3ebe0:	b	3f0a4 <aarch64_decode_insn@@Base+0x1374>
   3ebe4:	ldr	w8, [sp, #96]
   3ebe8:	ldr	w9, [sp, #152]
   3ebec:	cmp	w8, w9
   3ebf0:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3ebf4:	ldr	x0, [sp, #208]
   3ebf8:	ldr	w8, [x0, #32]
   3ebfc:	mvn	w8, w8
   3ec00:	tst	w8, #0xe
   3ec04:	b.eq	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.none
   3ec08:	b	3f0c0 <aarch64_decode_insn@@Base+0x1390>
   3ec0c:	ldr	x8, [sp, #152]
   3ec10:	ldr	x9, [sp, #208]
   3ec14:	cmp	x9, x8
   3ec18:	b.ge	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.tcont
   3ec1c:	b	3f070 <aarch64_decode_insn@@Base+0x1340>
   3ec20:	ldr	w8, [sp, #96]
   3ec24:	cmp	w8, #0x1f
   3ec28:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3ec2c:	ldr	w8, [sp, #152]
   3ec30:	cmp	w8, #0x1f
   3ec34:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3ec38:	ldr	x0, [sp, #208]
   3ec3c:	ldr	w8, [x0, #32]
   3ec40:	mvn	w8, w8
   3ec44:	tst	w8, #0xe
   3ec48:	b.eq	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.none
   3ec4c:	b	3f1ac <aarch64_decode_insn@@Base+0x147c>
   3ec50:	ldr	x8, [sp, #96]
   3ec54:	ldr	x9, [sp, #120]
   3ec58:	cbnz	x8, 3ec60 <aarch64_decode_insn@@Base+0xf30>
   3ec5c:	cbnz	x9, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ec60:	ldr	x10, [sp, #8]
   3ec64:	mov	w11, #0x48                  	// #72
   3ec68:	str	w11, [sp, #80]
   3ec6c:	str	wzr, [sp, #112]
   3ec70:	ldr	w10, [x10, #20]
   3ec74:	lsl	x23, x8, x9
   3ec78:	cmp	w10, #0x20
   3ec7c:	b.ne	3f0b4 <aarch64_decode_insn@@Base+0x1384>  // b.any
   3ec80:	ldrb	w8, [sp, #28]
   3ec84:	mvn	x23, x23
   3ec88:	mov	x0, x23
   3ec8c:	mov	x2, xzr
   3ec90:	cmp	w8, #0x1
   3ec94:	cset	w1, eq  // eq = none
   3ec98:	bl	35ab0 <aarch64_wide_constant_p@plt>
   3ec9c:	cbnz	w0, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3eca0:	b	3f0b4 <aarch64_decode_insn@@Base+0x1384>
   3eca4:	ldrb	w8, [sp, #140]
   3eca8:	ldr	x9, [sp, #208]
   3ecac:	cmp	w8, #0x1d
   3ecb0:	mov	w8, #0x3f                  	// #63
   3ecb4:	csel	x8, x27, x8, eq  // eq = none
   3ecb8:	cmp	x9, x8
   3ecbc:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3ecc0:	b	3f0e8 <aarch64_decode_insn@@Base+0x13b8>
   3ecc4:	ldr	w8, [sp, #96]
   3ecc8:	cmp	w8, #0x1f
   3eccc:	b.ne	3f330 <aarch64_decode_insn@@Base+0x1600>  // b.any
   3ecd0:	ldr	x9, [sp, #152]
   3ecd4:	ldr	x8, [sp, #208]
   3ecd8:	cmp	x8, x9
   3ecdc:	b.ge	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.tcont
   3ece0:	b	3f0f0 <aarch64_decode_insn@@Base+0x13c0>
   3ece4:	ldr	w8, [sp, #96]
   3ece8:	cmp	w8, #0x1f
   3ecec:	b.ne	3f350 <aarch64_decode_insn@@Base+0x1620>  // b.any
   3ecf0:	ldr	x8, [x25, #48]
   3ecf4:	ldp	q1, q0, [x25, #16]
   3ecf8:	ldr	q2, [x25]
   3ecfc:	str	x8, [x26, #48]
   3ed00:	stp	q1, q0, [x26, #16]
   3ed04:	str	q2, [x26]
   3ed08:	ldrb	w8, [sp, #28]
   3ed0c:	ldr	w9, [sp, #40]
   3ed10:	cmp	w8, #0x1
   3ed14:	mov	w8, #0x1                   	// #1
   3ed18:	cset	w23, eq  // eq = none
   3ed1c:	cmp	w9, #0x1f
   3ed20:	str	w8, [sp, #88]
   3ed24:	mov	w8, #0x48                  	// #72
   3ed28:	str	w8, [sp, #80]
   3ed2c:	b.eq	3f1d8 <aarch64_decode_insn@@Base+0x14a8>  // b.none
   3ed30:	ldr	x24, [sp, #96]
   3ed34:	mov	w1, w23
   3ed38:	mov	x2, xzr
   3ed3c:	mov	x0, x24
   3ed40:	bl	35ab0 <aarch64_wide_constant_p@plt>
   3ed44:	cbnz	w0, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ed48:	mvn	x0, x24
   3ed4c:	mov	w1, w23
   3ed50:	mov	x2, xzr
   3ed54:	bl	35ab0 <aarch64_wide_constant_p@plt>
   3ed58:	cbnz	w0, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ed5c:	b	3f1d8 <aarch64_decode_insn@@Base+0x14a8>
   3ed60:	ldrb	w8, [sp, #140]
   3ed64:	ldr	x11, [sp, #152]
   3ed68:	ldr	x10, [sp, #208]
   3ed6c:	cmp	w8, #0x1d
   3ed70:	mov	w8, #0x3f                  	// #63
   3ed74:	csel	x8, x27, x8, eq  // eq = none
   3ed78:	cmp	x11, #0x0
   3ed7c:	add	x12, x10, #0x1
   3ed80:	cset	w9, eq  // eq = none
   3ed84:	subs	x8, x8, x10
   3ed88:	cset	w10, eq  // eq = none
   3ed8c:	cmp	x11, x12
   3ed90:	b.eq	3f1a0 <aarch64_decode_insn@@Base+0x1470>  // b.none
   3ed94:	and	w9, w9, w10
   3ed98:	cbz	w9, 3eb34 <aarch64_decode_insn@@Base+0xe04>
   3ed9c:	b	3f1a0 <aarch64_decode_insn@@Base+0x1470>
   3eda0:	ldr	w8, [sp, #96]
   3eda4:	ldr	w9, [sp, #152]
   3eda8:	cmp	w8, w9
   3edac:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3edb0:	b	3f1d8 <aarch64_decode_insn@@Base+0x14a8>
   3edb4:	ldr	w8, [sp, #96]
   3edb8:	ldr	w9, [sp, #152]
   3edbc:	cmp	w8, w9
   3edc0:	b.ne	3eb34 <aarch64_decode_insn@@Base+0xe04>  // b.any
   3edc4:	ldp	q2, q0, [sp, #208]
   3edc8:	ldr	x8, [sp, #240]
   3edcc:	ldr	q1, [sp, #192]
   3edd0:	mov	w9, #0x2                   	// #2
   3edd4:	stp	q2, q0, [x25, #16]
   3edd8:	str	x8, [x25, #48]
   3eddc:	str	q1, [x25]
   3ede0:	str	w9, [sp, #144]
   3ede4:	b	3f0e8 <aarch64_decode_insn@@Base+0x13b8>
   3ede8:	and	w9, w8, w9
   3edec:	cmp	w9, #0x400
   3edf0:	b.ne	3ee98 <aarch64_decode_insn@@Base+0x1168>  // b.any
   3edf4:	mov	w8, #0x1                   	// #1
   3edf8:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3edfc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3ee00:	ldr	w8, [x19]
   3ee04:	ldr	x9, [x9, #3944]
   3ee08:	mov	w10, #0xffffffff            	// #-1
   3ee0c:	ldr	w11, [x9, #616]
   3ee10:	ldr	w12, [x9, #620]
   3ee14:	b	3ef08 <aarch64_decode_insn@@Base+0x11d8>
   3ee18:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3ee1c:	ldr	w8, [x19]
   3ee20:	ldr	x9, [x9, #3944]
   3ee24:	mov	w10, #0xffffffff            	// #-1
   3ee28:	ldr	w11, [x9, #608]
   3ee2c:	ldr	w12, [x9, #612]
   3ee30:	ldr	w13, [x9, #592]
   3ee34:	ldr	w9, [x9, #596]
   3ee38:	b	3effc <aarch64_decode_insn@@Base+0x12cc>
   3ee3c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3ee40:	ldr	w8, [x19]
   3ee44:	ldr	x9, [x9, #3944]
   3ee48:	mov	w10, #0xffffffff            	// #-1
   3ee4c:	ldr	w11, [x9, #616]
   3ee50:	ldr	w12, [x9, #620]
   3ee54:	ldr	w13, [x9, #608]
   3ee58:	ldr	w14, [x9, #612]
   3ee5c:	lsr	w11, w8, w11
   3ee60:	lsl	w12, w10, w12
   3ee64:	lsr	w13, w8, w13
   3ee68:	lsl	w14, w10, w14
   3ee6c:	bic	w11, w11, w12
   3ee70:	bic	w12, w13, w14
   3ee74:	cmp	w11, w12
   3ee78:	b.ne	3f048 <aarch64_decode_insn@@Base+0x1318>  // b.any
   3ee7c:	ldr	w12, [x9, #592]
   3ee80:	ldr	w9, [x9, #596]
   3ee84:	lsr	w8, w8, w12
   3ee88:	lsl	w9, w10, w9
   3ee8c:	bic	w8, w8, w9
   3ee90:	cmp	w11, w8
   3ee94:	b	3f018 <aarch64_decode_insn@@Base+0x12e8>
   3ee98:	tst	w8, #0x20000
   3ee9c:	mov	w8, #0x2                   	// #2
   3eea0:	cinc	w8, w8, ne  // ne = any
   3eea4:	b	3e828 <aarch64_decode_insn@@Base+0xaf8>
   3eea8:	mov	w10, wzr
   3eeac:	mov	w8, wzr
   3eeb0:	ldr	w11, [x19]
   3eeb4:	mov	w12, #0xffffffff            	// #-1
   3eeb8:	lsl	w10, w12, w10
   3eebc:	mov	w13, #0x15                  	// #21
   3eec0:	lsr	w8, w11, w8
   3eec4:	mov	w14, #0x13                  	// #19
   3eec8:	sub	w15, w9, #0x3d
   3eecc:	bics	wzr, w8, w10
   3eed0:	csel	w8, w14, w13, eq  // eq = none
   3eed4:	cmp	w15, #0x2
   3eed8:	b.cc	3f068 <aarch64_decode_insn@@Base+0x1338>  // b.lo, b.ul, b.last
   3eedc:	sub	w9, w9, #0x3b
   3eee0:	cmp	w9, #0x1
   3eee4:	b.hi	3f3b0 <aarch64_decode_insn@@Base+0x1680>  // b.pmore
   3eee8:	strb	w8, [x19, #84]
   3eeec:	b	3e1b8 <aarch64_decode_insn@@Base+0x488>
   3eef0:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3eef4:	ldr	w8, [x19]
   3eef8:	ldr	x9, [x9, #3944]
   3eefc:	mov	w10, #0xffffffff            	// #-1
   3ef00:	ldr	w11, [x9, #568]
   3ef04:	ldr	w12, [x9, #572]
   3ef08:	ldr	w13, [x9, #608]
   3ef0c:	ldr	w9, [x9, #612]
   3ef10:	b	3effc <aarch64_decode_insn@@Base+0x12cc>
   3ef14:	ldr	w0, [x19]
   3ef18:	mov	w2, #0x2                   	// #2
   3ef1c:	mov	w3, #0x74                  	// #116
   3ef20:	mov	w4, #0x2b                  	// #43
   3ef24:	mov	w1, wzr
   3ef28:	bl	35440 <extract_fields@plt>
   3ef2c:	cmp	w0, #0x0
   3ef30:	sub	w8, w0, #0x1
   3ef34:	cset	w9, ne  // ne = any
   3ef38:	tst	w0, w8
   3ef3c:	cset	w8, ne  // ne = any
   3ef40:	and	w8, w9, w8
   3ef44:	b	3e1bc <aarch64_decode_insn@@Base+0x48c>
   3ef48:	ldr	w8, [x19]
   3ef4c:	ubfx	w8, w8, #15, #2
   3ef50:	cbz	w8, 3f040 <aarch64_decode_insn@@Base+0x1310>
   3ef54:	cmp	w8, #0x3
   3ef58:	b.eq	3f064 <aarch64_decode_insn@@Base+0x1334>  // b.none
   3ef5c:	cmp	w8, #0x1
   3ef60:	b.ne	3f048 <aarch64_decode_insn@@Base+0x1318>  // b.any
   3ef64:	mov	w8, #0x8                   	// #8
   3ef68:	b	3f068 <aarch64_decode_insn@@Base+0x1338>
   3ef6c:	ldr	w0, [x19]
   3ef70:	mov	w2, #0x2                   	// #2
   3ef74:	mov	w3, #0x74                  	// #116
   3ef78:	mov	w4, #0x2b                  	// #43
   3ef7c:	mov	w1, wzr
   3ef80:	bl	35440 <extract_fields@plt>
   3ef84:	sub	w8, w0, #0x1
   3ef88:	cmp	w8, #0x10
   3ef8c:	cset	w9, cc  // cc = lo, ul, last
   3ef90:	tst	w0, w8
   3ef94:	cset	w8, eq  // eq = none
   3ef98:	and	w8, w9, w8
   3ef9c:	b	3e1bc <aarch64_decode_insn@@Base+0x48c>
   3efa0:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3efa4:	ldr	w8, [x19]
   3efa8:	ldr	x9, [x9, #3944]
   3efac:	mov	w10, #0xffffffff            	// #-1
   3efb0:	ldr	w11, [x9, #688]
   3efb4:	ldr	w12, [x9, #692]
   3efb8:	b	3eff4 <aarch64_decode_insn@@Base+0x12c4>
   3efbc:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   3efc0:	ldr	x8, [x8, #3944]
   3efc4:	ldr	w9, [x8, #68]
   3efc8:	cmp	w9, #0x1
   3efcc:	b.lt	3f020 <aarch64_decode_insn@@Base+0x12f0>  // b.tstop
   3efd0:	ldr	w9, [x8, #64]
   3efd4:	mov	w8, #0x1                   	// #1
   3efd8:	b	3f028 <aarch64_decode_insn@@Base+0x12f8>
   3efdc:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   3efe0:	ldr	w8, [x19]
   3efe4:	ldr	x9, [x9, #3944]
   3efe8:	mov	w10, #0xffffffff            	// #-1
   3efec:	ldr	w11, [x9, #712]
   3eff0:	ldr	w12, [x9, #716]
   3eff4:	ldr	w13, [x9, #704]
   3eff8:	ldr	w9, [x9, #708]
   3effc:	lsr	w11, w8, w11
   3f000:	lsl	w12, w10, w12
   3f004:	lsr	w8, w8, w13
   3f008:	lsl	w9, w10, w9
   3f00c:	bic	w10, w11, w12
   3f010:	bic	w8, w8, w9
   3f014:	cmp	w10, w8
   3f018:	cset	w8, eq  // eq = none
   3f01c:	b	3e1bc <aarch64_decode_insn@@Base+0x48c>
   3f020:	mov	w8, wzr
   3f024:	mov	w9, wzr
   3f028:	ldr	w10, [x19]
   3f02c:	mov	w11, #0xffffffff            	// #-1
   3f030:	lsl	w8, w11, w8
   3f034:	lsr	w9, w10, w9
   3f038:	bics	wzr, w9, w8
   3f03c:	b.eq	3f048 <aarch64_decode_insn@@Base+0x1318>  // b.none
   3f040:	mov	w8, #0x7                   	// #7
   3f044:	b	3f068 <aarch64_decode_insn@@Base+0x1338>
   3f048:	mov	w8, wzr
   3f04c:	b	3e1bc <aarch64_decode_insn@@Base+0x48c>
   3f050:	mov	x0, x19
   3f054:	mov	x1, x21
   3f058:	bl	354b0 <aarch64_replace_opcode@plt>
   3f05c:	mov	w0, #0x1                   	// #1
   3f060:	b	3de2c <aarch64_decode_insn@@Base+0xfc>
   3f064:	mov	w8, #0x6                   	// #6
   3f068:	strb	w8, [x19, #28]
   3f06c:	b	3e1b8 <aarch64_decode_insn@@Base+0x488>
   3f070:	ldrb	w10, [sp, #140]
   3f074:	mov	w11, #0x40                  	// #64
   3f078:	mov	w12, #0x20                  	// #32
   3f07c:	ldr	x0, [sp, #8]
   3f080:	cmp	w10, #0x1d
   3f084:	csel	x10, x12, x11, eq  // eq = none
   3f088:	sub	x8, x10, x8
   3f08c:	sub	x10, x10, #0x1
   3f090:	add	x9, x9, #0x1
   3f094:	and	x8, x8, x10
   3f098:	str	x8, [sp, #152]
   3f09c:	str	x9, [sp, #208]
   3f0a0:	b	3f178 <aarch64_decode_insn@@Base+0x1448>
   3f0a4:	ldr	x0, [sp, #8]
   3f0a8:	add	x8, x8, #0x1
   3f0ac:	str	x8, [sp, #208]
   3f0b0:	b	3f178 <aarch64_decode_insn@@Base+0x1448>
   3f0b4:	str	x23, [sp, #96]
   3f0b8:	str	xzr, [sp, #120]
   3f0bc:	b	3f1dc <aarch64_decode_insn@@Base+0x14ac>
   3f0c0:	ldp	q2, q0, [sp, #208]
   3f0c4:	ldr	x8, [sp, #240]
   3f0c8:	ldr	q1, [sp, #192]
   3f0cc:	mov	w9, #0x2                   	// #2
   3f0d0:	stp	q2, q0, [x25, #16]
   3f0d4:	str	x8, [x25, #48]
   3f0d8:	str	q1, [x25]
   3f0dc:	str	w9, [sp, #144]
   3f0e0:	bl	358e0 <get_inverted_cond@plt>
   3f0e4:	str	x0, [sp, #152]
   3f0e8:	str	wzr, [sp, #192]
   3f0ec:	b	3f1dc <aarch64_decode_insn@@Base+0x14ac>
   3f0f0:	ldrb	w10, [sp, #140]
   3f0f4:	ldp	q2, q0, [x25, #16]
   3f0f8:	ldr	q1, [x25]
   3f0fc:	mov	w11, #0x40                  	// #64
   3f100:	cmp	w10, #0x1d
   3f104:	ldr	x10, [x25, #48]
   3f108:	stp	q2, q0, [x26, #16]
   3f10c:	str	q1, [x26]
   3f110:	mov	w12, #0x1                   	// #1
   3f114:	str	x10, [x26, #48]
   3f118:	mov	w10, #0x20                  	// #32
   3f11c:	csel	x10, x10, x11, eq  // eq = none
   3f120:	ldp	q0, q1, [sp, #192]
   3f124:	ldr	x11, [sp, #240]
   3f128:	ldr	q2, [sp, #224]
   3f12c:	str	w12, [sp, #88]
   3f130:	str	q0, [x25]
   3f134:	str	x11, [x25, #48]
   3f138:	stp	q1, q2, [x25, #16]
   3f13c:	ldr	x0, [sp, #8]
   3f140:	sub	x9, x10, x9
   3f144:	sub	x10, x10, #0x1
   3f148:	mov	w12, #0x2                   	// #2
   3f14c:	and	x9, x9, x10
   3f150:	add	x8, x8, #0x1
   3f154:	str	w12, [sp, #144]
   3f158:	str	wzr, [sp, #192]
   3f15c:	str	x9, [sp, #96]
   3f160:	str	x8, [sp, #152]
   3f164:	bl	35230 <aarch64_num_of_operands@plt>
   3f168:	cmp	w0, #0x2
   3f16c:	b.lt	3f3f0 <aarch64_decode_insn@@Base+0x16c0>  // b.tstop
   3f170:	ldr	x0, [sp, #8]
   3f174:	strb	wzr, [sp, #84]
   3f178:	bl	35230 <aarch64_num_of_operands@plt>
   3f17c:	cmp	w0, #0x3
   3f180:	b.lt	3f3f0 <aarch64_decode_insn@@Base+0x16c0>  // b.tstop
   3f184:	ldr	x0, [sp, #8]
   3f188:	strb	wzr, [sp, #140]
   3f18c:	bl	35230 <aarch64_num_of_operands@plt>
   3f190:	cmp	w0, #0x3
   3f194:	b.le	3f3f0 <aarch64_decode_insn@@Base+0x16c0>
   3f198:	strb	wzr, [sp, #196]
   3f19c:	b	3f1dc <aarch64_decode_insn@@Base+0x14ac>
   3f1a0:	str	wzr, [sp, #192]
   3f1a4:	str	x8, [sp, #152]
   3f1a8:	b	3f1dc <aarch64_decode_insn@@Base+0x14ac>
   3f1ac:	ldp	q2, q0, [sp, #208]
   3f1b0:	ldr	x8, [sp, #240]
   3f1b4:	ldr	q1, [sp, #192]
   3f1b8:	mov	w9, #0x1                   	// #1
   3f1bc:	stp	q2, q0, [x26, #16]
   3f1c0:	str	x8, [x26, #48]
   3f1c4:	str	q1, [x26]
   3f1c8:	str	w9, [sp, #88]
   3f1cc:	bl	358e0 <get_inverted_cond@plt>
   3f1d0:	str	x0, [sp, #96]
   3f1d4:	str	wzr, [sp, #192]
   3f1d8:	str	wzr, [sp, #136]
   3f1dc:	mov	x0, sp
   3f1e0:	mov	x1, x21
   3f1e4:	bl	354b0 <aarch64_replace_opcode@plt>
   3f1e8:	mov	x0, sp
   3f1ec:	mov	x1, xzr
   3f1f0:	bl	35580 <aarch64_match_operands_constraint@plt>
   3f1f4:	cbz	w0, 3f3d0 <aarch64_decode_insn@@Base+0x16a0>
   3f1f8:	mov	x1, sp
   3f1fc:	mov	w2, #0x168                 	// #360
   3f200:	mov	x0, x19
   3f204:	bl	35110 <memcpy@plt>
   3f208:	mov	w0, #0x1                   	// #1
   3f20c:	b	3de2c <aarch64_decode_insn@@Base+0xfc>
   3f210:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f214:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f218:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f21c:	add	x0, x0, #0x319
   3f220:	add	x1, x1, #0x718
   3f224:	add	x3, x3, #0x328
   3f228:	mov	w2, #0xb4b                 	// #2891
   3f22c:	bl	35b30 <__assert_fail@plt>
   3f230:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f234:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f238:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f23c:	add	x0, x0, #0x421
   3f240:	add	x1, x1, #0x718
   3f244:	add	x3, x3, #0x46b
   3f248:	mov	w2, #0xc9                  	// #201
   3f24c:	bl	35b30 <__assert_fail@plt>
   3f250:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f254:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f258:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f25c:	add	x0, x0, #0x1bd
   3f260:	add	x1, x1, #0x718
   3f264:	add	x3, x3, #0x207
   3f268:	mov	w2, #0xdb                  	// #219
   3f26c:	bl	35b30 <__assert_fail@plt>
   3f270:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f274:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f278:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f27c:	add	x0, x0, #0x537
   3f280:	add	x1, x1, #0x718
   3f284:	add	x3, x3, #0x4df
   3f288:	mov	w2, #0xa6b                 	// #2667
   3f28c:	bl	35b30 <__assert_fail@plt>
   3f290:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3f294:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f298:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3f29c:	add	x0, x0, #0x2b4
   3f2a0:	add	x1, x1, #0x40
   3f2a4:	add	x3, x3, #0x3e3
   3f2a8:	mov	w2, #0x1ab                 	// #427
   3f2ac:	bl	35b30 <__assert_fail@plt>
   3f2b0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3f2b4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f2b8:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3f2bc:	add	x0, x0, #0x2b4
   3f2c0:	add	x1, x1, #0x40
   3f2c4:	add	x3, x3, #0x465
   3f2c8:	mov	w2, #0x1d4                 	// #468
   3f2cc:	bl	35b30 <__assert_fail@plt>
   3f2d0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f2d4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f2d8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f2dc:	add	x0, x0, #0x3a4
   3f2e0:	add	x1, x1, #0x718
   3f2e4:	add	x3, x3, #0x3f9
   3f2e8:	mov	w2, #0x885                 	// #2181
   3f2ec:	bl	35b30 <__assert_fail@plt>
   3f2f0:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3f2f4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f2f8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f2fc:	add	x0, x0, #0x38f
   3f300:	add	x1, x1, #0x718
   3f304:	add	x3, x3, #0x3f9
   3f308:	mov	w2, #0x8b0                 	// #2224
   3f30c:	bl	35b30 <__assert_fail@plt>
   3f310:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3f314:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f318:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   3f31c:	add	x0, x0, #0x2b4
   3f320:	add	x1, x1, #0x40
   3f324:	add	x3, x3, #0x422
   3f328:	mov	w2, #0x1c0                 	// #448
   3f32c:	bl	35b30 <__assert_fail@plt>
   3f330:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f334:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f338:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f33c:	add	x0, x0, #0x605
   3f340:	add	x1, x1, #0x718
   3f344:	add	x3, x3, #0x629
   3f348:	mov	w2, #0x941                 	// #2369
   3f34c:	bl	35b30 <__assert_fail@plt>
   3f350:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f354:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f358:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f35c:	add	x0, x0, #0x605
   3f360:	add	x1, x1, #0x718
   3f364:	add	x3, x3, #0x650
   3f368:	mov	w2, #0x9d0                 	// #2512
   3f36c:	bl	35b30 <__assert_fail@plt>
   3f370:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   3f374:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f378:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f37c:	add	x0, x0, #0x38f
   3f380:	add	x1, x1, #0x718
   3f384:	add	x3, x3, #0x3f9
   3f388:	mov	w2, #0x8a4                 	// #2212
   3f38c:	bl	35b30 <__assert_fail@plt>
   3f390:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f394:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f398:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f39c:	add	x0, x0, #0x4d9
   3f3a0:	add	x1, x1, #0x718
   3f3a4:	add	x3, x3, #0x4df
   3f3a8:	mov	w2, #0xa58                 	// #2648
   3f3ac:	bl	35b30 <__assert_fail@plt>
   3f3b0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3f3b4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f3b8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f3bc:	add	x0, x0, #0x2b4
   3f3c0:	add	x1, x1, #0x718
   3f3c4:	add	x3, x3, #0x4b3
   3f3c8:	mov	w2, #0x7cb                 	// #1995
   3f3cc:	bl	35b30 <__assert_fail@plt>
   3f3d0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f3d4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f3d8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f3dc:	add	x0, x0, #0x56b
   3f3e0:	add	x1, x1, #0x718
   3f3e4:	add	x3, x3, #0x4df
   3f3e8:	mov	w2, #0xa8c                 	// #2700
   3f3ec:	bl	35b30 <__assert_fail@plt>
   3f3f0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3f3f4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3f3f8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3f3fc:	add	x0, x0, #0x59b
   3f400:	add	x1, x1, #0x40
   3f404:	add	x3, x3, #0x5d3
   3f408:	mov	w2, #0x148                 	// #328
   3f40c:	bl	35b30 <__assert_fail@plt>

000000000003f410 <aarch64_symbol_is_valid@@Base>:
   3f410:	cbz	x0, 3f44c <aarch64_symbol_is_valid@@Base+0x3c>
   3f414:	ldr	x8, [x0, #8]
   3f418:	cbz	x8, 3f450 <aarch64_symbol_is_valid@@Base+0x40>
   3f41c:	ldrb	w9, [x8]
   3f420:	cmp	w9, #0x24
   3f424:	b.ne	3f458 <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3f428:	ldrb	w9, [x8, #1]
   3f42c:	cmp	w9, #0x78
   3f430:	b.eq	3f43c <aarch64_symbol_is_valid@@Base+0x2c>  // b.none
   3f434:	cmp	w9, #0x64
   3f438:	b.ne	3f458 <aarch64_symbol_is_valid@@Base+0x48>  // b.any
   3f43c:	ldrb	w8, [x8, #2]
   3f440:	cbz	w8, 3f450 <aarch64_symbol_is_valid@@Base+0x40>
   3f444:	cmp	w8, #0x2e
   3f448:	cset	w0, ne  // ne = any
   3f44c:	ret
   3f450:	mov	w0, wzr
   3f454:	ret
   3f458:	mov	w0, #0x1                   	// #1
   3f45c:	ret

000000000003f460 <print_insn_aarch64@@Base>:
   3f460:	sub	sp, sp, #0x90
   3f464:	stp	x29, x30, [sp, #48]
   3f468:	stp	x28, x27, [sp, #64]
   3f46c:	stp	x26, x25, [sp, #80]
   3f470:	stp	x24, x23, [sp, #96]
   3f474:	stp	x22, x21, [sp, #112]
   3f478:	stp	x20, x19, [sp, #128]
   3f47c:	ldr	x20, [x1, #224]
   3f480:	mov	x19, x1
   3f484:	mov	x22, x0
   3f488:	add	x29, sp, #0x30
   3f48c:	cbz	x20, 3f59c <print_insn_aarch64@@Base+0x13c>
   3f490:	str	x22, [sp]
   3f494:	adrp	x21, 58000 <xexit@@Base+0x1dd4>
   3f498:	adrp	x22, 58000 <xexit@@Base+0x1dd4>
   3f49c:	adrp	x23, 58000 <xexit@@Base+0x1dd4>
   3f4a0:	adrp	x25, 58000 <xexit@@Base+0x1dd4>
   3f4a4:	add	x21, x21, #0x67f
   3f4a8:	adrp	x28, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3f4ac:	mov	w26, #0x1                   	// #1
   3f4b0:	add	x22, x22, #0x682
   3f4b4:	add	x23, x23, #0x68a
   3f4b8:	adrp	x27, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3f4bc:	add	x25, x25, #0x68d
   3f4c0:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f4c4:	add	x20, x20, #0x1
   3f4c8:	ldrb	w8, [x20]
   3f4cc:	cmp	w8, #0x2c
   3f4d0:	b.eq	3f4c4 <print_insn_aarch64@@Base+0x64>  // b.none
   3f4d4:	mov	x24, x20
   3f4d8:	cbz	w8, 3f594 <print_insn_aarch64@@Base+0x134>
   3f4dc:	ldrb	w8, [x24, #1]!
   3f4e0:	cmp	w8, #0x2c
   3f4e4:	b.eq	3f4ec <print_insn_aarch64@@Base+0x8c>  // b.none
   3f4e8:	cbnz	w8, 3f4dc <print_insn_aarch64@@Base+0x7c>
   3f4ec:	mov	w2, #0xa                   	// #10
   3f4f0:	mov	x0, x20
   3f4f4:	mov	x1, x21
   3f4f8:	bl	354e0 <strncmp@plt>
   3f4fc:	cbz	w0, 3f564 <print_insn_aarch64@@Base+0x104>
   3f500:	mov	w2, #0x7                   	// #7
   3f504:	mov	x0, x20
   3f508:	mov	x1, x22
   3f50c:	bl	354e0 <strncmp@plt>
   3f510:	cbz	w0, 3f570 <print_insn_aarch64@@Base+0x110>
   3f514:	mov	w2, #0x8                   	// #8
   3f518:	mov	x0, x20
   3f51c:	mov	x1, x23
   3f520:	bl	354e0 <strncmp@plt>
   3f524:	cbz	w0, 3f57c <print_insn_aarch64@@Base+0x11c>
   3f528:	mov	w2, #0x5                   	// #5
   3f52c:	mov	x0, x20
   3f530:	mov	x1, x25
   3f534:	bl	354e0 <strncmp@plt>
   3f538:	cbz	w0, 3f588 <print_insn_aarch64@@Base+0x128>
   3f53c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   3f540:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3f544:	mov	w2, #0x5                   	// #5
   3f548:	add	x0, x0, #0x270
   3f54c:	add	x1, x1, #0x693
   3f550:	bl	35a50 <dcgettext@plt>
   3f554:	mov	x1, x20
   3f558:	bl	35a80 <_bfd_error_handler@plt>
   3f55c:	mov	x20, x24
   3f560:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f564:	strb	w26, [x28, #1600]
   3f568:	mov	x20, x24
   3f56c:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f570:	strb	wzr, [x28, #1600]
   3f574:	mov	x20, x24
   3f578:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f57c:	strb	wzr, [x27, #1604]
   3f580:	mov	x20, x24
   3f584:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f588:	strb	w26, [x27, #1604]
   3f58c:	mov	x20, x24
   3f590:	b	3f4c8 <print_insn_aarch64@@Base+0x68>
   3f594:	ldr	x22, [sp]
   3f598:	str	xzr, [x19, #224]
   3f59c:	ldr	x11, [x19, #48]
   3f5a0:	mov	w8, #0x1                   	// #1
   3f5a4:	str	w8, [x19, #44]
   3f5a8:	cbz	x11, 3f5c4 <print_insn_aarch64@@Base+0x164>
   3f5ac:	ldrb	w8, [x11, #32]
   3f5b0:	tbnz	w8, #4, 3f5c4 <print_insn_aarch64@@Base+0x164>
   3f5b4:	mov	w10, #0x1                   	// #1
   3f5b8:	ldrsw	x8, [x19, #84]
   3f5bc:	cbnz	w8, 3f5d0 <print_insn_aarch64@@Base+0x170>
   3f5c0:	b	3f624 <print_insn_aarch64@@Base+0x1c4>
   3f5c4:	mov	w10, wzr
   3f5c8:	ldrsw	x8, [x19, #84]
   3f5cc:	cbz	w8, 3f624 <print_insn_aarch64@@Base+0x1c4>
   3f5d0:	ldr	x9, [x19, #72]
   3f5d4:	ldr	x12, [x9]
   3f5d8:	ldrb	w13, [x12, #26]
   3f5dc:	tbnz	w13, #5, 3f624 <print_insn_aarch64@@Base+0x1c4>
   3f5e0:	ldr	x12, [x12]
   3f5e4:	ldr	x12, [x12, #8]
   3f5e8:	ldr	w12, [x12, #8]
   3f5ec:	cmp	w12, #0x5
   3f5f0:	b.ne	3f624 <print_insn_aarch64@@Base+0x1c4>  // b.any
   3f5f4:	adrp	x13, 9c000 <aarch64_ext_sysins_op@@Base+0x5f260>
   3f5f8:	adrp	x12, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3f5fc:	cbz	x22, 3f648 <print_insn_aarch64@@Base+0x1e8>
   3f600:	ldr	w16, [x19, #80]
   3f604:	ldr	w15, [x13, #1440]
   3f608:	add	w14, w16, #0x1
   3f60c:	tbnz	w15, #31, 3f660 <print_insn_aarch64@@Base+0x200>
   3f610:	ldr	x17, [x19, #240]
   3f614:	ldr	x18, [x12, #1592]
   3f618:	cmp	x17, x18
   3f61c:	cset	w17, eq  // eq = none
   3f620:	b	3f664 <print_insn_aarch64@@Base+0x204>
   3f624:	cbz	w10, 3f868 <print_insn_aarch64@@Base+0x408>
   3f628:	mov	w21, #0x4                   	// #4
   3f62c:	ldrb	w8, [x19, #91]
   3f630:	tbnz	w8, #6, 3f868 <print_insn_aarch64@@Base+0x408>
   3f634:	ldr	w8, [x19, #40]
   3f638:	adrp	x20, 3f000 <aarch64_decode_insn@@Base+0x12d0>
   3f63c:	add	x20, x20, #0x904
   3f640:	str	w21, [x19, #172]
   3f644:	b	3f87c <print_insn_aarch64@@Base+0x41c>
   3f648:	mov	w15, #0xffffffff            	// #-1
   3f64c:	str	w15, [x13, #1440]
   3f650:	ldr	w16, [x19, #80]
   3f654:	mov	w17, wzr
   3f658:	add	w14, w16, #0x1
   3f65c:	b	3f664 <print_insn_aarch64@@Base+0x204>
   3f660:	mov	w17, wzr
   3f664:	cmp	w14, w15
   3f668:	cset	w18, ge  // ge = tcont
   3f66c:	tst	w18, w17
   3f670:	csel	w0, w15, w14, ne  // ne = any
   3f674:	cmp	w0, w8
   3f678:	b.ge	3f720 <print_insn_aarch64@@Base+0x2c0>  // b.tcont
   3f67c:	mov	w18, wzr
   3f680:	add	x1, x9, w0, sxtw #3
   3f684:	mov	w14, #0xffffffff            	// #-1
   3f688:	b	3f6a8 <print_insn_aarch64@@Base+0x248>
   3f68c:	mov	w10, wzr
   3f690:	mov	w18, #0x1                   	// #1
   3f694:	mov	w14, w0
   3f698:	add	w0, w0, #0x1
   3f69c:	cmp	w8, w0
   3f6a0:	add	x1, x1, #0x8
   3f6a4:	b.eq	3f728 <print_insn_aarch64@@Base+0x2c8>  // b.none
   3f6a8:	ldr	x2, [x1]
   3f6ac:	ldr	x3, [x2, #32]
   3f6b0:	ldr	x5, [x2, #16]
   3f6b4:	ldr	x4, [x3, #40]
   3f6b8:	add	x4, x5, x4
   3f6bc:	cmp	x4, x22
   3f6c0:	b.hi	3f728 <print_insn_aarch64@@Base+0x2c8>  // b.pmore
   3f6c4:	cbz	x11, 3f6d0 <print_insn_aarch64@@Base+0x270>
   3f6c8:	cmp	x11, x3
   3f6cc:	b.ne	3f698 <print_insn_aarch64@@Base+0x238>  // b.any
   3f6d0:	ldrb	w3, [x2, #72]
   3f6d4:	and	w3, w3, #0xf
   3f6d8:	cmp	w3, #0x2
   3f6dc:	b.eq	3f68c <print_insn_aarch64@@Base+0x22c>  // b.none
   3f6e0:	ldr	x3, [x2, #8]
   3f6e4:	ldrb	w2, [x3]
   3f6e8:	cmp	w2, #0x24
   3f6ec:	b.ne	3f698 <print_insn_aarch64@@Base+0x238>  // b.any
   3f6f0:	ldrb	w2, [x3, #1]
   3f6f4:	cmp	w2, #0x78
   3f6f8:	b.eq	3f704 <print_insn_aarch64@@Base+0x2a4>  // b.none
   3f6fc:	cmp	w2, #0x64
   3f700:	b.ne	3f698 <print_insn_aarch64@@Base+0x238>  // b.any
   3f704:	ldrb	w3, [x3, #2]
   3f708:	cmp	w3, #0x2e
   3f70c:	b.eq	3f714 <print_insn_aarch64@@Base+0x2b4>  // b.none
   3f710:	cbnz	w3, 3f698 <print_insn_aarch64@@Base+0x238>
   3f714:	cmp	w2, #0x78
   3f718:	cset	w10, ne  // ne = any
   3f71c:	b	3f690 <print_insn_aarch64@@Base+0x230>
   3f720:	mov	w14, #0xffffffff            	// #-1
   3f724:	b	3f730 <print_insn_aarch64@@Base+0x2d0>
   3f728:	mov	w0, w14
   3f72c:	cbnz	w18, 3f75c <print_insn_aarch64@@Base+0x2fc>
   3f730:	cmp	w16, w15
   3f734:	cset	w18, ge  // ge = tcont
   3f738:	tst	w18, w17
   3f73c:	csel	w0, w15, w16, ne  // ne = any
   3f740:	cbz	x11, 3f750 <print_insn_aarch64@@Base+0x2f0>
   3f744:	ldr	x15, [x11, #40]
   3f748:	tbz	w0, #31, 3f7e4 <print_insn_aarch64@@Base+0x384>
   3f74c:	b	3f758 <print_insn_aarch64@@Base+0x2f8>
   3f750:	mov	x15, xzr
   3f754:	tbz	w0, #31, 3f7e4 <print_insn_aarch64@@Base+0x384>
   3f758:	mov	w0, w14
   3f75c:	str	w0, [x13, #1440]
   3f760:	ldr	x11, [x19, #240]
   3f764:	cmp	w10, #0x1
   3f768:	str	x11, [x12, #1592]
   3f76c:	b.ne	3f868 <print_insn_aarch64@@Base+0x408>  // b.any
   3f770:	and	w10, w22, #0x3
   3f774:	mov	w11, #0x4                   	// #4
   3f778:	sxtw	x12, w0
   3f77c:	sub	w10, w11, w10
   3f780:	add	x11, x12, #0x1
   3f784:	cmp	x11, x8
   3f788:	b.ge	3f7b4 <print_insn_aarch64@@Base+0x354>  // b.tcont
   3f78c:	ldr	x12, [x9, x11, lsl #3]
   3f790:	add	x11, x11, #0x1
   3f794:	ldr	x13, [x12, #32]
   3f798:	ldr	x12, [x12, #16]
   3f79c:	ldr	x13, [x13, #40]
   3f7a0:	add	x12, x12, x13
   3f7a4:	subs	x12, x12, x22
   3f7a8:	b.ls	3f784 <print_insn_aarch64@@Base+0x324>  // b.plast
   3f7ac:	cmp	x12, x10
   3f7b0:	csel	w10, w12, w10, cc  // cc = lo, ul, last
   3f7b4:	tst	x22, #0x1
   3f7b8:	mov	w8, #0x1                   	// #1
   3f7bc:	cinc	w8, w8, eq  // eq = none
   3f7c0:	cmp	w10, #0x3
   3f7c4:	csel	w21, w8, w10, eq  // eq = none
   3f7c8:	ldrb	w8, [x19, #91]
   3f7cc:	tbz	w8, #6, 3f634 <print_insn_aarch64@@Base+0x1d4>
   3f7d0:	b	3f868 <print_insn_aarch64@@Base+0x408>
   3f7d4:	sub	w16, w0, #0x1
   3f7d8:	cmp	w0, #0x0
   3f7dc:	mov	w0, w16
   3f7e0:	b.le	3f758 <print_insn_aarch64@@Base+0x2f8>
   3f7e4:	ldr	x16, [x9, w0, uxtw #3]
   3f7e8:	ldr	x17, [x16, #32]
   3f7ec:	ldr	x1, [x16, #16]
   3f7f0:	ldr	x18, [x17, #40]
   3f7f4:	add	x18, x1, x18
   3f7f8:	cmp	x18, x15
   3f7fc:	b.cc	3f758 <print_insn_aarch64@@Base+0x2f8>  // b.lo, b.ul, b.last
   3f800:	cbz	x11, 3f80c <print_insn_aarch64@@Base+0x3ac>
   3f804:	cmp	x11, x17
   3f808:	b.ne	3f7d4 <print_insn_aarch64@@Base+0x374>  // b.any
   3f80c:	ldrb	w17, [x16, #72]
   3f810:	and	w17, w17, #0xf
   3f814:	cmp	w17, #0x2
   3f818:	b.eq	3f85c <print_insn_aarch64@@Base+0x3fc>  // b.none
   3f81c:	ldr	x17, [x16, #8]
   3f820:	ldrb	w16, [x17]
   3f824:	cmp	w16, #0x24
   3f828:	b.ne	3f7d4 <print_insn_aarch64@@Base+0x374>  // b.any
   3f82c:	ldrb	w16, [x17, #1]
   3f830:	cmp	w16, #0x78
   3f834:	b.eq	3f840 <print_insn_aarch64@@Base+0x3e0>  // b.none
   3f838:	cmp	w16, #0x64
   3f83c:	b.ne	3f7d4 <print_insn_aarch64@@Base+0x374>  // b.any
   3f840:	ldrb	w17, [x17, #2]
   3f844:	cmp	w17, #0x2e
   3f848:	b.eq	3f850 <print_insn_aarch64@@Base+0x3f0>  // b.none
   3f84c:	cbnz	w17, 3f7d4 <print_insn_aarch64@@Base+0x374>
   3f850:	cmp	w16, #0x78
   3f854:	cset	w10, ne  // ne = any
   3f858:	b	3f75c <print_insn_aarch64@@Base+0x2fc>
   3f85c:	str	w0, [x13, #1440]
   3f860:	ldr	x8, [x19, #240]
   3f864:	str	x8, [x12, #1592]
   3f868:	mov	w21, #0x4                   	// #4
   3f86c:	adrp	x20, 3f000 <aarch64_decode_insn@@Base+0x12d0>
   3f870:	add	x20, x20, #0x968
   3f874:	str	w21, [x19, #172]
   3f878:	mov	w8, #0x1                   	// #1
   3f87c:	ldr	x9, [x19, #104]
   3f880:	sub	x1, x29, #0x4
   3f884:	mov	x0, x22
   3f888:	mov	w2, w21
   3f88c:	mov	x3, x19
   3f890:	str	w8, [x19, #176]
   3f894:	blr	x9
   3f898:	cbz	w0, 3f8b4 <print_insn_aarch64@@Base+0x454>
   3f89c:	ldr	x8, [x19, #112]
   3f8a0:	mov	x1, x22
   3f8a4:	mov	x2, x19
   3f8a8:	blr	x8
   3f8ac:	mov	w21, #0xffffffff            	// #-1
   3f8b0:	b	3f8e0 <print_insn_aarch64@@Base+0x480>
   3f8b4:	ldr	w8, [x19, #176]
   3f8b8:	lsl	w1, w21, #3
   3f8bc:	sub	x0, x29, #0x4
   3f8c0:	cmp	w8, #0x0
   3f8c4:	cset	w2, eq  // eq = none
   3f8c8:	bl	355d0 <bfd_get_bits@plt>
   3f8cc:	mov	x1, x0
   3f8d0:	add	x3, sp, #0x8
   3f8d4:	mov	x0, x22
   3f8d8:	mov	x2, x19
   3f8dc:	blr	x20
   3f8e0:	mov	w0, w21
   3f8e4:	ldp	x20, x19, [sp, #128]
   3f8e8:	ldp	x22, x21, [sp, #112]
   3f8ec:	ldp	x24, x23, [sp, #96]
   3f8f0:	ldp	x26, x25, [sp, #80]
   3f8f4:	ldp	x28, x27, [sp, #64]
   3f8f8:	ldp	x29, x30, [sp, #48]
   3f8fc:	add	sp, sp, #0x90
   3f900:	ret
   3f904:	stp	x29, x30, [sp, #-16]!
   3f908:	ldr	w9, [x2, #172]
   3f90c:	mov	w8, w1
   3f910:	mov	x29, sp
   3f914:	cmp	w9, #0x4
   3f918:	b.eq	3f94c <print_insn_aarch64@@Base+0x4ec>  // b.none
   3f91c:	cmp	w9, #0x2
   3f920:	b.eq	3f93c <print_insn_aarch64@@Base+0x4dc>  // b.none
   3f924:	cmp	w9, #0x1
   3f928:	b.ne	3f964 <print_insn_aarch64@@Base+0x504>  // b.any
   3f92c:	ldp	x3, x0, [x2]
   3f930:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3f934:	add	x1, x1, #0x6b8
   3f938:	b	3f958 <print_insn_aarch64@@Base+0x4f8>
   3f93c:	ldp	x3, x0, [x2]
   3f940:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3f944:	add	x1, x1, #0x6c5
   3f948:	b	3f958 <print_insn_aarch64@@Base+0x4f8>
   3f94c:	ldp	x3, x0, [x2]
   3f950:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3f954:	add	x1, x1, #0x6d3
   3f958:	mov	w2, w8
   3f95c:	ldp	x29, x30, [sp], #16
   3f960:	br	x3
   3f964:	bl	35700 <abort@plt>
   3f968:	stp	x29, x30, [sp, #-96]!
   3f96c:	stp	x28, x27, [sp, #16]
   3f970:	stp	x26, x25, [sp, #32]
   3f974:	stp	x24, x23, [sp, #48]
   3f978:	stp	x22, x21, [sp, #64]
   3f97c:	stp	x20, x19, [sp, #80]
   3f980:	mov	x29, sp
   3f984:	sub	sp, sp, #0x210
   3f988:	mov	x23, x2
   3f98c:	str	xzr, [x23, #208]!
   3f990:	ldur	w8, [x23, #-120]
   3f994:	mov	w22, #0x1                   	// #1
   3f998:	sturh	w22, [x23, #-12]
   3f99c:	sturb	wzr, [x23, #-10]
   3f9a0:	str	xzr, [x23, #8]
   3f9a4:	adrp	x9, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3f9a8:	ldrb	w24, [x9, #1600]
   3f9ac:	cmp	w8, #0x0
   3f9b0:	csel	x8, xzr, x0, lt  // lt = tstop
   3f9b4:	mov	w0, w1
   3f9b8:	mov	x20, x3
   3f9bc:	mov	x19, x2
   3f9c0:	mov	w21, w1
   3f9c4:	str	x8, [sp, #8]
   3f9c8:	bl	35640 <aarch64_opcode_lookup@plt>
   3f9cc:	cbz	x0, 3fa10 <print_insn_aarch64@@Base+0x5b0>
   3f9d0:	mov	x25, x0
   3f9d4:	add	x2, sp, #0x10
   3f9d8:	mov	x0, x25
   3f9dc:	mov	w1, w21
   3f9e0:	mov	w3, w24
   3f9e4:	mov	x4, x20
   3f9e8:	bl	3ddb0 <aarch64_decode_insn@@Base+0x80>
   3f9ec:	cmp	w0, #0x1
   3f9f0:	b.eq	3fa0c <print_insn_aarch64@@Base+0x5ac>  // b.none
   3f9f4:	mov	x0, x25
   3f9f8:	bl	35bb0 <aarch64_find_next_opcode@plt>
   3f9fc:	mov	x25, x0
   3fa00:	cbnz	x0, 3f9d4 <print_insn_aarch64@@Base+0x574>
   3fa04:	mov	w22, #0x1                   	// #1
   3fa08:	b	3fa10 <print_insn_aarch64@@Base+0x5b0>
   3fa0c:	mov	w22, wzr
   3fa10:	and	w8, w21, #0x7fe00000
   3fa14:	cmp	w8, #0x200, lsl #12
   3fa18:	b.ne	3fa28 <print_insn_aarch64@@Base+0x5c8>  // b.any
   3fa1c:	cbz	w22, 3fd80 <print_insn_aarch64@@Base+0x920>
   3fa20:	mov	w8, #0x3                   	// #3
   3fa24:	b	3fa30 <print_insn_aarch64@@Base+0x5d0>
   3fa28:	cbz	w22, 3fa74 <print_insn_aarch64@@Base+0x614>
   3fa2c:	mov	w8, #0x1                   	// #1
   3fa30:	adrp	x10, 81000 <_sch_toupper@@Base+0x10826>
   3fa34:	add	x10, x10, #0x328
   3fa38:	ldp	x9, x0, [x19]
   3fa3c:	ldr	x3, [x10, x8, lsl #3]
   3fa40:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fa44:	add	x1, x1, #0x76e
   3fa48:	mov	w2, w21
   3fa4c:	str	wzr, [x19, #200]
   3fa50:	blr	x9
   3fa54:	add	sp, sp, #0x210
   3fa58:	ldp	x20, x19, [sp, #80]
   3fa5c:	ldp	x22, x21, [sp, #64]
   3fa60:	ldp	x24, x23, [sp, #48]
   3fa64:	ldp	x26, x25, [sp, #32]
   3fa68:	ldp	x28, x27, [sp, #16]
   3fa6c:	ldp	x29, x30, [sp], #96
   3fa70:	ret
   3fa74:	ldr	x8, [sp, #24]
   3fa78:	ldr	w9, [x8, #16]
   3fa7c:	cmp	w9, #0x5a
   3fa80:	b.ne	3fa98 <print_insn_aarch64@@Base+0x638>  // b.any
   3fa84:	ldr	x9, [sp, #112]
   3fa88:	cmp	x9, #0x1f
   3fa8c:	b.gt	3fa98 <print_insn_aarch64@@Base+0x638>
   3fa90:	mov	w9, #0x1                   	// #1
   3fa94:	strb	w9, [sp, #44]
   3fa98:	ldrb	w9, [x8, #120]
   3fa9c:	tbnz	w9, #4, 3fab8 <print_insn_aarch64@@Base+0x658>
   3faa0:	ldp	x9, x0, [x19]
   3faa4:	ldr	x2, [x8]
   3faa8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   3faac:	add	x1, x1, #0x816
   3fab0:	blr	x9
   3fab4:	b	3fb14 <print_insn_aarch64@@Base+0x6b4>
   3fab8:	ldr	x24, [x8]
   3fabc:	mov	w1, #0x2e                  	// #46
   3fac0:	mov	x0, x24
   3fac4:	bl	358b0 <strchr@plt>
   3fac8:	cbz	x0, 3fda0 <print_insn_aarch64@@Base+0x940>
   3facc:	ldr	x8, [sp, #32]
   3fad0:	cbz	x8, 3fda0 <print_insn_aarch64@@Base+0x940>
   3fad4:	sub	x25, x0, x24
   3fad8:	cmp	x25, #0x8
   3fadc:	b.cs	3fdc0 <print_insn_aarch64@@Base+0x960>  // b.hs, b.nlast
   3fae0:	sub	x0, x29, #0x94
   3fae4:	mov	x1, x24
   3fae8:	mov	x2, x25
   3faec:	sub	x22, x29, #0x94
   3faf0:	bl	35af0 <strncpy@plt>
   3faf4:	ldr	x8, [sp, #32]
   3faf8:	strb	wzr, [x22, x25]
   3fafc:	ldp	x9, x0, [x19]
   3fb00:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fb04:	ldr	x3, [x8]
   3fb08:	add	x1, x1, #0x861
   3fb0c:	sub	x2, x29, #0x94
   3fb10:	blr	x9
   3fb14:	ldr	x25, [sp, #24]
   3fb18:	add	x8, sp, #0x10
   3fb1c:	add	x22, x8, #0x18
   3fb20:	mov	x24, xzr
   3fb24:	mov	w27, wzr
   3fb28:	mov	x26, x22
   3fb2c:	stur	xzr, [x29, #-16]
   3fb30:	b	3fb54 <print_insn_aarch64@@Base+0x6f4>
   3fb34:	ldr	x8, [x19, #120]
   3fb38:	ldr	x0, [x19, #208]
   3fb3c:	mov	x1, x19
   3fb40:	blr	x8
   3fb44:	add	x24, x24, #0x1
   3fb48:	cmp	x24, #0x6
   3fb4c:	add	x26, x26, #0x38
   3fb50:	b.eq	3fbec <print_insn_aarch64@@Base+0x78c>  // b.none
   3fb54:	add	x8, x25, x24, lsl #2
   3fb58:	ldr	w8, [x8, #32]
   3fb5c:	cbz	w8, 3fbec <print_insn_aarch64@@Base+0x78c>
   3fb60:	ldr	w8, [x26]
   3fb64:	cbz	w8, 3fbec <print_insn_aarch64@@Base+0x78c>
   3fb68:	ldr	x2, [sp, #8]
   3fb6c:	sub	x0, x29, #0x94
   3fb70:	sub	x6, x29, #0x14
   3fb74:	mov	w1, #0x80                  	// #128
   3fb78:	sub	x8, x29, #0x10
   3fb7c:	mov	x3, x25
   3fb80:	mov	x4, x22
   3fb84:	mov	w5, w24
   3fb88:	mov	x7, x23
   3fb8c:	str	x8, [sp]
   3fb90:	bl	35460 <aarch64_print_operand@plt>
   3fb94:	ldurb	w8, [x29, #-148]
   3fb98:	cbz	w8, 3fbcc <print_insn_aarch64@@Base+0x76c>
   3fb9c:	ldp	x8, x0, [x19]
   3fba0:	adrp	x9, 6b000 <fields@@Base+0x121b4>
   3fba4:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   3fba8:	cmp	w27, #0x0
   3fbac:	add	x9, x9, #0xf48
   3fbb0:	add	x10, x10, #0x84e
   3fbb4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   3fbb8:	csel	x2, x10, x9, eq  // eq = none
   3fbbc:	add	x1, x1, #0x816
   3fbc0:	add	w28, w27, #0x1
   3fbc4:	blr	x8
   3fbc8:	mov	w27, w28
   3fbcc:	ldur	w8, [x29, #-20]
   3fbd0:	cbnz	w8, 3fb34 <print_insn_aarch64@@Base+0x6d4>
   3fbd4:	ldp	x8, x0, [x19]
   3fbd8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   3fbdc:	sub	x2, x29, #0x94
   3fbe0:	add	x1, x1, #0x816
   3fbe4:	blr	x8
   3fbe8:	b	3fb44 <print_insn_aarch64@@Base+0x6e4>
   3fbec:	ldur	x2, [x29, #-16]
   3fbf0:	mov	w26, wzr
   3fbf4:	adrp	x25, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3fbf8:	cbz	x2, 3fc18 <print_insn_aarch64@@Base+0x7b8>
   3fbfc:	ldrb	w8, [x25, #1604]
   3fc00:	cbz	w8, 3fc18 <print_insn_aarch64@@Base+0x7b8>
   3fc04:	ldp	x8, x0, [x19]
   3fc08:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fc0c:	add	x1, x1, #0x850
   3fc10:	blr	x8
   3fc14:	mov	w26, #0x1                   	// #1
   3fc18:	ldr	x8, [sp, #24]
   3fc1c:	ldrb	w9, [x8, #120]
   3fc20:	tbz	w9, #4, 3fcdc <print_insn_aarch64@@Base+0x87c>
   3fc24:	ldr	x23, [x8]
   3fc28:	mov	w1, #0x2e                  	// #46
   3fc2c:	mov	x0, x23
   3fc30:	bl	358b0 <strchr@plt>
   3fc34:	cbz	x0, 3fda0 <print_insn_aarch64@@Base+0x940>
   3fc38:	ldr	x8, [sp, #32]
   3fc3c:	cbz	x8, 3fda0 <print_insn_aarch64@@Base+0x940>
   3fc40:	sub	x24, x0, x23
   3fc44:	cmp	x24, #0x8
   3fc48:	b.cs	3fdc0 <print_insn_aarch64@@Base+0x960>  // b.hs, b.nlast
   3fc4c:	sub	x0, x29, #0x94
   3fc50:	mov	x1, x23
   3fc54:	mov	x2, x24
   3fc58:	sub	x22, x29, #0x94
   3fc5c:	bl	35af0 <strncpy@plt>
   3fc60:	ldr	x8, [sp, #32]
   3fc64:	strb	wzr, [x22, x24]
   3fc68:	ldr	x4, [x8, #8]
   3fc6c:	cbz	x4, 3fcdc <print_insn_aarch64@@Base+0x87c>
   3fc70:	ldp	x8, x0, [x19]
   3fc74:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fc78:	adrp	x2, 58000 <xexit@@Base+0x1dd4>
   3fc7c:	add	x1, x1, #0x85e
   3fc80:	add	x2, x2, #0x867
   3fc84:	sub	x3, x29, #0x94
   3fc88:	blr	x8
   3fc8c:	ldr	x8, [sp, #32]
   3fc90:	ldr	x4, [x8, #16]
   3fc94:	cbz	x4, 3fcdc <print_insn_aarch64@@Base+0x87c>
   3fc98:	ldp	x8, x0, [x19]
   3fc9c:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fca0:	adrp	x2, 58000 <xexit@@Base+0x1dd4>
   3fca4:	add	x1, x1, #0x85e
   3fca8:	add	x2, x2, #0x86c
   3fcac:	sub	x3, x29, #0x94
   3fcb0:	blr	x8
   3fcb4:	ldr	x8, [sp, #32]
   3fcb8:	ldr	x4, [x8, #24]
   3fcbc:	cbz	x4, 3fcdc <print_insn_aarch64@@Base+0x87c>
   3fcc0:	ldp	x8, x0, [x19]
   3fcc4:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fcc8:	adrp	x2, 58000 <xexit@@Base+0x1dd4>
   3fccc:	add	x1, x1, #0x85e
   3fcd0:	add	x2, x2, #0x86c
   3fcd4:	sub	x3, x29, #0x94
   3fcd8:	blr	x8
   3fcdc:	cbnz	w26, 3fa54 <print_insn_aarch64@@Base+0x5f4>
   3fce0:	ldr	x2, [sp, #8]
   3fce4:	adrp	x5, f2000 <aarch64_opcode_table@@Base+0x555d8>
   3fce8:	add	x5, x5, #0x648
   3fcec:	add	x0, sp, #0x10
   3fcf0:	mov	w1, w21
   3fcf4:	mov	w3, wzr
   3fcf8:	mov	x4, x20
   3fcfc:	bl	35310 <verify_constraints@plt>
   3fd00:	cmp	w0, #0x4
   3fd04:	b.eq	3fd34 <print_insn_aarch64@@Base+0x8d4>  // b.none
   3fd08:	sub	w8, w0, #0x1
   3fd0c:	cmp	w8, #0x2
   3fd10:	b.hi	3fa54 <print_insn_aarch64@@Base+0x5f4>  // b.pmore
   3fd14:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   3fd18:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fd1c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fd20:	add	x0, x0, #0x2b4
   3fd24:	add	x1, x1, #0x718
   3fd28:	add	x3, x3, #0x780
   3fd2c:	mov	w2, #0xc79                 	// #3193
   3fd30:	bl	35b30 <__assert_fail@plt>
   3fd34:	ldrb	w8, [x25, #1604]
   3fd38:	cmp	w8, #0x1
   3fd3c:	b.ne	3fa54 <print_insn_aarch64@@Base+0x5f4>  // b.any
   3fd40:	ldr	w8, [x20, #28]
   3fd44:	cbz	w8, 3fde0 <print_insn_aarch64@@Base+0x980>
   3fd48:	ldr	x2, [x20, #8]
   3fd4c:	cbz	x2, 3fe00 <print_insn_aarch64@@Base+0x9a0>
   3fd50:	ldp	x8, x0, [x19]
   3fd54:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fd58:	add	x1, x1, #0x850
   3fd5c:	blr	x8
   3fd60:	ldr	w8, [x20, #4]
   3fd64:	tbnz	w8, #31, 3fa54 <print_insn_aarch64@@Base+0x5f4>
   3fd68:	ldp	x9, x0, [x19]
   3fd6c:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fd70:	add	w2, w8, #0x1
   3fd74:	add	x1, x1, #0x8dc
   3fd78:	blr	x9
   3fd7c:	b	3fa54 <print_insn_aarch64@@Base+0x5f4>
   3fd80:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3fd84:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fd88:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fd8c:	add	x0, x0, #0x6fc
   3fd90:	add	x1, x1, #0x718
   3fd94:	add	x3, x3, #0x70a
   3fd98:	mov	w2, #0xca8                 	// #3240
   3fd9c:	bl	35b30 <__assert_fail@plt>
   3fda0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3fda4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fda8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fdac:	add	x0, x0, #0x7ff
   3fdb0:	add	x1, x1, #0x718
   3fdb4:	add	x3, x3, #0x811
   3fdb8:	mov	w2, #0xc19                 	// #3097
   3fdbc:	bl	35b30 <__assert_fail@plt>
   3fdc0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3fdc4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fdc8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fdcc:	add	x0, x0, #0x846
   3fdd0:	add	x1, x1, #0x718
   3fdd4:	add	x3, x3, #0x811
   3fdd8:	mov	w2, #0xc1b                 	// #3099
   3fddc:	bl	35b30 <__assert_fail@plt>
   3fde0:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3fde4:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fde8:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fdec:	add	x0, x0, #0x86e
   3fdf0:	add	x1, x1, #0x718
   3fdf4:	add	x3, x3, #0x880
   3fdf8:	mov	w2, #0xc52                 	// #3154
   3fdfc:	bl	35b30 <__assert_fail@plt>
   3fe00:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   3fe04:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fe08:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   3fe0c:	add	x0, x0, #0x8ce
   3fe10:	add	x1, x1, #0x718
   3fe14:	add	x3, x3, #0x880
   3fe18:	mov	w2, #0xc53                 	// #3155
   3fe1c:	bl	35b30 <__assert_fail@plt>

000000000003fe20 <print_aarch64_disassembler_options@@Base>:
   3fe20:	stp	x29, x30, [sp, #-32]!
   3fe24:	stp	x20, x19, [sp, #16]
   3fe28:	adrp	x20, 56000 <floatformat_from_double@@Base+0x4f8>
   3fe2c:	add	x20, x20, #0x270
   3fe30:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fe34:	mov	x19, x0
   3fe38:	add	x1, x1, #0xf49
   3fe3c:	mov	w2, #0x5                   	// #5
   3fe40:	mov	x0, x20
   3fe44:	mov	x29, sp
   3fe48:	bl	35a50 <dcgettext@plt>
   3fe4c:	mov	x1, x0
   3fe50:	mov	x0, x19
   3fe54:	bl	35bd0 <fprintf@plt>
   3fe58:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   3fe5c:	add	x1, x1, #0xfda
   3fe60:	mov	w2, #0x5                   	// #5
   3fe64:	mov	x0, x20
   3fe68:	bl	35a50 <dcgettext@plt>
   3fe6c:	mov	x1, x0
   3fe70:	mov	x0, x19
   3fe74:	bl	35bd0 <fprintf@plt>
   3fe78:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fe7c:	add	x1, x1, #0x12
   3fe80:	mov	w2, #0x5                   	// #5
   3fe84:	mov	x0, x20
   3fe88:	bl	35a50 <dcgettext@plt>
   3fe8c:	mov	x1, x0
   3fe90:	mov	x0, x19
   3fe94:	bl	35bd0 <fprintf@plt>
   3fe98:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3fe9c:	add	x1, x1, #0x47
   3fea0:	mov	w2, #0x5                   	// #5
   3fea4:	mov	x0, x20
   3fea8:	bl	35a50 <dcgettext@plt>
   3feac:	mov	x1, x0
   3feb0:	mov	x0, x19
   3feb4:	bl	35bd0 <fprintf@plt>
   3feb8:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   3febc:	add	x1, x1, #0x7b
   3fec0:	mov	w2, #0x5                   	// #5
   3fec4:	mov	x0, x20
   3fec8:	bl	35a50 <dcgettext@plt>
   3fecc:	mov	x1, x0
   3fed0:	mov	x0, x19
   3fed4:	bl	35bd0 <fprintf@plt>
   3fed8:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   3fedc:	add	x1, x1, #0x2af
   3fee0:	mov	w2, #0x5                   	// #5
   3fee4:	mov	x0, x20
   3fee8:	bl	35a50 <dcgettext@plt>
   3feec:	mov	x1, x0
   3fef0:	mov	x0, x19
   3fef4:	ldp	x20, x19, [sp, #16]
   3fef8:	ldp	x29, x30, [sp], #32
   3fefc:	b	35bd0 <fprintf@plt>
   3ff00:	stp	x29, x30, [sp, #-48]!
   3ff04:	stp	x20, x19, [sp, #32]
   3ff08:	ldr	w8, [x1]
   3ff0c:	str	x21, [sp, #16]
   3ff10:	mov	x29, sp
   3ff14:	cbz	w8, 40010 <print_aarch64_disassembler_options@@Base+0x1f0>
   3ff18:	mov	w21, w0
   3ff1c:	mov	w0, w8
   3ff20:	mov	w20, w2
   3ff24:	mov	x19, x1
   3ff28:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ff2c:	eor	w8, w0, w21
   3ff30:	tst	w8, w20
   3ff34:	b.eq	40018 <print_aarch64_disassembler_options@@Base+0x1f8>  // b.none
   3ff38:	ldr	w0, [x19, #4]
   3ff3c:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ff40:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ff44:	eor	w8, w0, w21
   3ff48:	tst	w8, w20
   3ff4c:	b.eq	40020 <print_aarch64_disassembler_options@@Base+0x200>  // b.none
   3ff50:	ldr	w0, [x19, #8]
   3ff54:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ff58:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ff5c:	eor	w8, w0, w21
   3ff60:	tst	w8, w20
   3ff64:	b.eq	40028 <print_aarch64_disassembler_options@@Base+0x208>  // b.none
   3ff68:	ldr	w0, [x19, #12]
   3ff6c:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ff70:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ff74:	eor	w8, w0, w21
   3ff78:	tst	w8, w20
   3ff7c:	b.eq	40030 <print_aarch64_disassembler_options@@Base+0x210>  // b.none
   3ff80:	ldr	w0, [x19, #16]
   3ff84:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ff88:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ff8c:	eor	w8, w0, w21
   3ff90:	tst	w8, w20
   3ff94:	b.eq	40038 <print_aarch64_disassembler_options@@Base+0x218>  // b.none
   3ff98:	ldr	w0, [x19, #20]
   3ff9c:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ffa0:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ffa4:	eor	w8, w0, w21
   3ffa8:	tst	w8, w20
   3ffac:	b.eq	40040 <print_aarch64_disassembler_options@@Base+0x220>  // b.none
   3ffb0:	ldr	w0, [x19, #24]
   3ffb4:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ffb8:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ffbc:	eor	w8, w0, w21
   3ffc0:	tst	w8, w20
   3ffc4:	b.eq	40048 <print_aarch64_disassembler_options@@Base+0x228>  // b.none
   3ffc8:	ldr	w0, [x19, #28]
   3ffcc:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ffd0:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ffd4:	eor	w8, w0, w21
   3ffd8:	tst	w8, w20
   3ffdc:	b.eq	40050 <print_aarch64_disassembler_options@@Base+0x230>  // b.none
   3ffe0:	ldr	w0, [x19, #32]
   3ffe4:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   3ffe8:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   3ffec:	eor	w8, w0, w21
   3fff0:	tst	w8, w20
   3fff4:	b.eq	40058 <print_aarch64_disassembler_options@@Base+0x238>  // b.none
   3fff8:	ldr	w0, [x19, #36]
   3fffc:	cbz	w0, 40068 <print_aarch64_disassembler_options@@Base+0x248>
   40000:	bl	35480 <aarch64_get_qualifier_standard_value@plt>
   40004:	eor	w8, w0, w21
   40008:	tst	w8, w20
   4000c:	b.eq	40060 <print_aarch64_disassembler_options@@Base+0x240>  // b.none
   40010:	mov	w0, wzr
   40014:	b	40068 <print_aarch64_disassembler_options@@Base+0x248>
   40018:	mov	x8, xzr
   4001c:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40020:	mov	w8, #0x1                   	// #1
   40024:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40028:	mov	w8, #0x2                   	// #2
   4002c:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40030:	mov	w8, #0x3                   	// #3
   40034:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40038:	mov	w8, #0x4                   	// #4
   4003c:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40040:	mov	w8, #0x5                   	// #5
   40044:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40048:	mov	w8, #0x6                   	// #6
   4004c:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40050:	mov	w8, #0x7                   	// #7
   40054:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40058:	mov	w8, #0x8                   	// #8
   4005c:	b	40064 <print_aarch64_disassembler_options@@Base+0x244>
   40060:	mov	w8, #0x9                   	// #9
   40064:	ldr	w0, [x19, x8, lsl #2]
   40068:	ldp	x20, x19, [sp, #32]
   4006c:	ldr	x21, [sp, #16]
   40070:	ldp	x29, x30, [sp], #48
   40074:	ret

0000000000040078 <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   40078:	stp	x29, x30, [sp, #-16]!
   4007c:	ldrb	w8, [x0, #56]
   40080:	mov	x29, sp
   40084:	sub	w9, w8, #0xd
   40088:	cmp	w9, #0x9
   4008c:	b.hi	400f4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x7c>  // b.pmore
   40090:	ldrb	w9, [x0, #57]
   40094:	cmp	w8, w9
   40098:	b.ne	40120 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xa8>  // b.any
   4009c:	ldrb	w10, [x0, #58]
   400a0:	sub	w11, w10, #0xd
   400a4:	cmp	w11, #0x9
   400a8:	b.hi	40120 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xa8>  // b.pmore
   400ac:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   400b0:	ldr	x11, [x11, #3776]
   400b4:	add	x12, x11, x8, lsl #5
   400b8:	ldr	w12, [x12, #24]
   400bc:	cmp	w12, #0x1
   400c0:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   400c4:	add	x12, x11, x10, lsl #5
   400c8:	ldr	w12, [x12, #24]
   400cc:	cmp	w12, #0x1
   400d0:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   400d4:	lsl	x12, x8, #5
   400d8:	lsl	x10, x10, #5
   400dc:	ldrb	w12, [x11, x12]
   400e0:	ldrb	w10, [x11, x10]
   400e4:	cmp	w12, w10
   400e8:	b.ne	40120 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xa8>  // b.any
   400ec:	mov	w8, #0x1                   	// #1
   400f0:	b	401e8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x170>
   400f4:	sub	w8, w8, #0x5
   400f8:	cmp	w8, #0x4
   400fc:	b.hi	401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>  // b.pmore
   40100:	ldrb	w8, [x0, #57]
   40104:	sub	w8, w8, #0xd
   40108:	cmp	w8, #0x9
   4010c:	b.hi	401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>  // b.pmore
   40110:	ldrb	w8, [x0, #58]
   40114:	cbnz	w8, 401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   40118:	mov	w8, #0x4                   	// #4
   4011c:	b	401e8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x170>
   40120:	sub	w10, w9, #0xd
   40124:	cmp	w10, #0x9
   40128:	b.hi	4017c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x104>  // b.pmore
   4012c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   40130:	ldr	x10, [x10, #3776]
   40134:	add	x11, x10, x8, lsl #5
   40138:	ldr	w11, [x11, #24]
   4013c:	cmp	w11, #0x1
   40140:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   40144:	lsl	x11, x8, #5
   40148:	ldrb	w11, [x10, x11]
   4014c:	cbz	w11, 4017c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x104>
   40150:	add	x12, x10, x9, lsl #5
   40154:	ldr	w12, [x12, #24]
   40158:	cmp	w12, #0x1
   4015c:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   40160:	lsl	x12, x9, #5
   40164:	ldr	w10, [x10, x12]
   40168:	ubfiz	w10, w10, #1, #8
   4016c:	cmp	w10, w11
   40170:	b.ne	4017c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x104>  // b.any
   40174:	mov	w8, #0x2                   	// #2
   40178:	b	401e8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x170>
   4017c:	cmp	w8, w9
   40180:	b.ne	401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>  // b.any
   40184:	ldrb	w9, [x0, #58]
   40188:	sub	w10, w9, #0xd
   4018c:	cmp	w10, #0x9
   40190:	b.hi	401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>  // b.pmore
   40194:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   40198:	ldr	x10, [x10, #3776]
   4019c:	add	x11, x10, x8, lsl #5
   401a0:	ldr	w11, [x11, #24]
   401a4:	cmp	w11, #0x1
   401a8:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   401ac:	lsl	x8, x8, #5
   401b0:	ldrb	w8, [x10, x8]
   401b4:	cbz	w8, 401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>
   401b8:	add	x11, x10, x9, lsl #5
   401bc:	ldr	w11, [x11, #24]
   401c0:	cmp	w11, #0x1
   401c4:	b.ne	401fc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x184>  // b.any
   401c8:	lsl	x9, x9, #5
   401cc:	ldr	w9, [x10, x9]
   401d0:	ubfiz	w9, w9, #1, #8
   401d4:	cmp	w9, w8
   401d8:	b.ne	401e4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x16c>  // b.any
   401dc:	mov	w8, #0x3                   	// #3
   401e0:	b	401e8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x170>
   401e4:	mov	x8, xzr
   401e8:	adrp	x9, 58000 <xexit@@Base+0x1dd4>
   401ec:	add	x9, x9, #0xe45
   401f0:	ldrb	w0, [x9, x8]
   401f4:	ldp	x29, x30, [sp], #16
   401f8:	ret
   401fc:	adrp	x0, 59000 <fields@@Base+0x1b4>
   40200:	adrp	x1, 59000 <fields@@Base+0x1b4>
   40204:	adrp	x3, 59000 <fields@@Base+0x1b4>
   40208:	add	x0, x0, #0x737
   4020c:	add	x1, x1, #0x50e
   40210:	add	x3, x3, #0x767
   40214:	mov	w2, #0x30e                 	// #782
   40218:	bl	35b30 <__assert_fail@plt>

000000000004021c <aarch64_get_operand_class@@Base>:
   4021c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   40220:	ldr	x9, [x9, #4032]
   40224:	mov	w8, #0x30                  	// #48
   40228:	umull	x8, w0, w8
   4022c:	ldr	w0, [x9, x8]
   40230:	ret

0000000000040234 <aarch64_get_operand_name@@Base>:
   40234:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   40238:	ldr	x8, [x8, #4032]
   4023c:	mov	w9, #0x30                  	// #48
   40240:	umaddl	x8, w0, w9, x8
   40244:	ldr	x0, [x8, #8]
   40248:	ret

000000000004024c <aarch64_get_operand_desc@@Base>:
   4024c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   40250:	ldr	x8, [x8, #4032]
   40254:	mov	w9, #0x30                  	// #48
   40258:	umaddl	x8, w0, w9, x8
   4025c:	ldr	x0, [x8, #40]
   40260:	ret

0000000000040264 <get_cond_from_value@@Base>:
   40264:	cmp	w0, #0x10
   40268:	b.cs	40280 <get_cond_from_value@@Base+0x1c>  // b.hs, b.nlast
   4026c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   40270:	ldr	x8, [x8, #4000]
   40274:	mov	w9, #0x28                  	// #40
   40278:	umaddl	x0, w0, w9, x8
   4027c:	ret
   40280:	stp	x29, x30, [sp, #-16]!
   40284:	adrp	x0, 59000 <fields@@Base+0x1b4>
   40288:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4028c:	adrp	x3, 59000 <fields@@Base+0x1b4>
   40290:	add	x0, x0, #0x503
   40294:	add	x1, x1, #0x50e
   40298:	add	x3, x3, #0x52a
   4029c:	mov	w2, #0x178                 	// #376
   402a0:	mov	x29, sp
   402a4:	bl	35b30 <__assert_fail@plt>

00000000000402a8 <get_inverted_cond@@Base>:
   402a8:	ldr	w8, [x0, #32]
   402ac:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   402b0:	ldr	x10, [x10, #4000]
   402b4:	mov	w9, #0x28                  	// #40
   402b8:	eor	x8, x8, #0x1
   402bc:	madd	x0, x8, x9, x10
   402c0:	ret

00000000000402c4 <aarch64_get_operand_modifier@@Base>:
   402c4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   402c8:	ldr	x8, [x8, #3904]
   402cc:	sub	x8, x0, x8
   402d0:	lsr	x0, x8, #4
   402d4:	ret

00000000000402d8 <aarch64_get_operand_modifier_value@@Base>:
   402d8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   402dc:	ldr	x8, [x8, #3904]
   402e0:	add	x8, x8, w0, uxtw #4
   402e4:	ldr	w0, [x8, #8]
   402e8:	ret

00000000000402ec <aarch64_get_operand_modifier_from_value@@Base>:
   402ec:	mov	w9, #0x5                   	// #5
   402f0:	add	w8, w0, #0x6
   402f4:	sub	w9, w9, w0
   402f8:	cmp	w1, #0x1
   402fc:	csel	w0, w8, w9, eq  // eq = none
   40300:	ret

0000000000040304 <aarch64_extend_operator_p@@Base>:
   40304:	sub	w8, w0, #0x6
   40308:	cmp	w8, #0x8
   4030c:	cset	w0, cc  // cc = lo, ul, last
   40310:	ret

0000000000040314 <aarch64_stack_pointer_p@@Base>:
   40314:	ldr	w8, [x0]
   40318:	mov	w9, #0x30                  	// #48
   4031c:	mul	x10, x8, x9
   40320:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   40324:	ldr	x9, [x9, #4032]
   40328:	ldr	w10, [x9, x10]
   4032c:	cmp	w10, #0x1
   40330:	b.ne	40344 <aarch64_stack_pointer_p@@Base+0x30>  // b.any
   40334:	mov	w10, #0x30                  	// #48
   40338:	madd	x8, x8, x10, x9
   4033c:	ldrb	w8, [x8, #16]
   40340:	tbnz	w8, #4, 4034c <aarch64_stack_pointer_p@@Base+0x38>
   40344:	mov	w0, wzr
   40348:	ret
   4034c:	ldr	w8, [x0, #16]
   40350:	cmp	w8, #0x1f
   40354:	cset	w0, eq  // eq = none
   40358:	ret

000000000004035c <aarch64_zero_register_p@@Base>:
   4035c:	ldr	w8, [x0]
   40360:	mov	w9, #0x30                  	// #48
   40364:	mul	x10, x8, x9
   40368:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   4036c:	ldr	x9, [x9, #4032]
   40370:	ldr	w10, [x9, x10]
   40374:	cmp	w10, #0x1
   40378:	b.ne	4039c <aarch64_zero_register_p@@Base+0x40>  // b.any
   4037c:	mov	w10, #0x30                  	// #48
   40380:	madd	x8, x8, x10, x9
   40384:	ldrb	w8, [x8, #16]
   40388:	tbnz	w8, #4, 4039c <aarch64_zero_register_p@@Base+0x40>
   4038c:	ldr	w8, [x0, #16]
   40390:	cmp	w8, #0x1f
   40394:	cset	w0, eq  // eq = none
   40398:	ret
   4039c:	mov	w0, wzr
   403a0:	ret

00000000000403a4 <aarch64_get_expected_qualifier@@Base>:
   403a4:	stp	x29, x30, [sp, #-16]!
   403a8:	sxtw	x8, w3
   403ac:	ldrb	w10, [x0, x8]
   403b0:	tst	w2, #0xff
   403b4:	mov	x29, sp
   403b8:	b.eq	404bc <aarch64_get_expected_qualifier@@Base+0x118>  // b.none
   403bc:	add	x11, x0, x8
   403c0:	ldrb	w9, [x11, #6]
   403c4:	and	w12, w2, #0xff
   403c8:	cmp	w10, w12
   403cc:	csetm	w13, ne  // ne = any
   403d0:	cmp	w9, w12
   403d4:	csinc	w9, w13, wzr, ne  // ne = any
   403d8:	b.ne	403e4 <aarch64_get_expected_qualifier@@Base+0x40>  // b.any
   403dc:	cmp	w10, w2, uxtb
   403e0:	b.eq	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.none
   403e4:	ldrb	w10, [x11, #12]
   403e8:	cmp	w10, w2, uxtb
   403ec:	b.ne	403fc <aarch64_get_expected_qualifier@@Base+0x58>  // b.any
   403f0:	cmn	w9, #0x1
   403f4:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   403f8:	mov	w9, #0x2                   	// #2
   403fc:	add	x10, x0, x8
   40400:	ldrb	w11, [x10, #18]
   40404:	cmp	w11, w2, uxtb
   40408:	b.ne	40418 <aarch64_get_expected_qualifier@@Base+0x74>  // b.any
   4040c:	cmn	w9, #0x1
   40410:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   40414:	mov	w9, #0x3                   	// #3
   40418:	ldrb	w10, [x10, #24]
   4041c:	cmp	w10, w2, uxtb
   40420:	b.ne	40430 <aarch64_get_expected_qualifier@@Base+0x8c>  // b.any
   40424:	cmn	w9, #0x1
   40428:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   4042c:	mov	w9, #0x4                   	// #4
   40430:	add	x10, x0, x8
   40434:	ldrb	w11, [x10, #30]
   40438:	cmp	w11, w2, uxtb
   4043c:	b.ne	4044c <aarch64_get_expected_qualifier@@Base+0xa8>  // b.any
   40440:	cmn	w9, #0x1
   40444:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   40448:	mov	w9, #0x5                   	// #5
   4044c:	ldrb	w10, [x10, #36]
   40450:	cmp	w10, w2, uxtb
   40454:	b.ne	40464 <aarch64_get_expected_qualifier@@Base+0xc0>  // b.any
   40458:	cmn	w9, #0x1
   4045c:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   40460:	mov	w9, #0x6                   	// #6
   40464:	add	x10, x0, x8
   40468:	ldrb	w11, [x10, #42]
   4046c:	cmp	w11, w2, uxtb
   40470:	b.ne	40480 <aarch64_get_expected_qualifier@@Base+0xdc>  // b.any
   40474:	cmn	w9, #0x1
   40478:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   4047c:	mov	w9, #0x7                   	// #7
   40480:	ldrb	w10, [x10, #48]
   40484:	cmp	w10, w2, uxtb
   40488:	b.ne	40498 <aarch64_get_expected_qualifier@@Base+0xf4>  // b.any
   4048c:	cmn	w9, #0x1
   40490:	b.ne	404b0 <aarch64_get_expected_qualifier@@Base+0x10c>  // b.any
   40494:	mov	w9, #0x8                   	// #8
   40498:	add	x8, x0, x8
   4049c:	ldrb	w8, [x8, #54]
   404a0:	cmp	w8, w2, uxtb
   404a4:	b.ne	404d0 <aarch64_get_expected_qualifier@@Base+0x12c>  // b.any
   404a8:	cmn	w9, #0x1
   404ac:	b.eq	404cc <aarch64_get_expected_qualifier@@Base+0x128>  // b.none
   404b0:	mov	w0, wzr
   404b4:	ldp	x29, x30, [sp], #16
   404b8:	ret
   404bc:	cbnz	w10, 404e4 <aarch64_get_expected_qualifier@@Base+0x140>
   404c0:	ldrb	w0, [x0, w1, sxtw]
   404c4:	ldp	x29, x30, [sp], #16
   404c8:	ret
   404cc:	mov	w9, #0x9                   	// #9
   404d0:	mov	w8, #0x6                   	// #6
   404d4:	smaddl	x8, w9, w8, x0
   404d8:	ldrb	w0, [x8, w1, sxtw]
   404dc:	ldp	x29, x30, [sp], #16
   404e0:	ret
   404e4:	adrp	x0, 59000 <fields@@Base+0x1b4>
   404e8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   404ec:	adrp	x3, 59000 <fields@@Base+0x1b4>
   404f0:	add	x0, x0, #0x628
   404f4:	add	x1, x1, #0x50e
   404f8:	add	x3, x3, #0x654
   404fc:	mov	w2, #0x28f                 	// #655
   40500:	bl	35b30 <__assert_fail@plt>

0000000000040504 <aarch64_get_qualifier_name@@Base>:
   40504:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   40508:	ldr	x9, [x9, #3776]
   4050c:	and	x8, x0, #0xff
   40510:	add	x8, x9, x8, lsl #5
   40514:	ldr	x0, [x8, #16]
   40518:	ret

000000000004051c <aarch64_get_qualifier_esize@@Base>:
   4051c:	stp	x29, x30, [sp, #-16]!
   40520:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   40524:	ldr	x9, [x9, #3776]
   40528:	and	x8, x0, #0xff
   4052c:	mov	x29, sp
   40530:	add	x10, x9, x8, lsl #5
   40534:	ldr	w10, [x10, #24]
   40538:	cmp	w10, #0x1
   4053c:	b.ne	40550 <aarch64_get_qualifier_esize@@Base+0x34>  // b.any
   40540:	lsl	x8, x8, #5
   40544:	ldr	w0, [x9, x8]
   40548:	ldp	x29, x30, [sp], #16
   4054c:	ret
   40550:	adrp	x0, 59000 <fields@@Base+0x1b4>
   40554:	adrp	x1, 59000 <fields@@Base+0x1b4>
   40558:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4055c:	add	x0, x0, #0x737
   40560:	add	x1, x1, #0x50e
   40564:	add	x3, x3, #0x767
   40568:	mov	w2, #0x30e                 	// #782
   4056c:	bl	35b30 <__assert_fail@plt>

0000000000040570 <aarch64_get_qualifier_nelem@@Base>:
   40570:	stp	x29, x30, [sp, #-16]!
   40574:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   40578:	ldr	x9, [x9, #3776]
   4057c:	and	x8, x0, #0xff
   40580:	mov	x29, sp
   40584:	add	x8, x9, x8, lsl #5
   40588:	ldr	w9, [x8, #24]
   4058c:	cmp	w9, #0x1
   40590:	b.ne	405a0 <aarch64_get_qualifier_nelem@@Base+0x30>  // b.any
   40594:	ldr	w0, [x8, #4]
   40598:	ldp	x29, x30, [sp], #16
   4059c:	ret
   405a0:	adrp	x0, 59000 <fields@@Base+0x1b4>
   405a4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   405a8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   405ac:	add	x0, x0, #0x737
   405b0:	add	x1, x1, #0x50e
   405b4:	add	x3, x3, #0x7ab
   405b8:	mov	w2, #0x315                 	// #789
   405bc:	bl	35b30 <__assert_fail@plt>

00000000000405c0 <aarch64_get_qualifier_standard_value@@Base>:
   405c0:	stp	x29, x30, [sp, #-16]!
   405c4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   405c8:	ldr	x9, [x9, #3776]
   405cc:	and	x8, x0, #0xff
   405d0:	mov	x29, sp
   405d4:	add	x8, x9, x8, lsl #5
   405d8:	ldr	w9, [x8, #24]
   405dc:	cmp	w9, #0x1
   405e0:	b.ne	405f0 <aarch64_get_qualifier_standard_value@@Base+0x30>  // b.any
   405e4:	ldr	w0, [x8, #8]
   405e8:	ldp	x29, x30, [sp], #16
   405ec:	ret
   405f0:	adrp	x0, 59000 <fields@@Base+0x1b4>
   405f4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   405f8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   405fc:	add	x0, x0, #0x737
   40600:	add	x1, x1, #0x50e
   40604:	add	x3, x3, #0x7ef
   40608:	mov	w2, #0x31c                 	// #796
   4060c:	bl	35b30 <__assert_fail@plt>

0000000000040610 <aarch64_is_destructive_by_operands@@Base>:
   40610:	ldr	w8, [x0, #32]
   40614:	cbz	w8, 40638 <aarch64_is_destructive_by_operands@@Base+0x28>
   40618:	add	x9, x0, #0x24
   4061c:	ldr	w10, [x9]
   40620:	cbz	w10, 40638 <aarch64_is_destructive_by_operands@@Base+0x28>
   40624:	cmp	w10, w8
   40628:	add	x9, x9, #0x4
   4062c:	b.ne	4061c <aarch64_is_destructive_by_operands@@Base+0xc>  // b.any
   40630:	mov	w0, #0x1                   	// #1
   40634:	ret
   40638:	mov	w0, wzr
   4063c:	ret

0000000000040640 <aarch64_num_of_operands@@Base>:
   40640:	stp	x29, x30, [sp, #-16]!
   40644:	add	x8, x0, #0x20
   40648:	mov	w0, #0xffffffff            	// #-1
   4064c:	mov	x29, sp
   40650:	ldr	w9, [x8], #4
   40654:	add	w0, w0, #0x1
   40658:	cbnz	w9, 40650 <aarch64_num_of_operands@@Base+0x10>
   4065c:	cmp	w0, #0x7
   40660:	b.cs	4066c <aarch64_num_of_operands@@Base+0x2c>  // b.hs, b.nlast
   40664:	ldp	x29, x30, [sp], #16
   40668:	ret
   4066c:	adrp	x0, 59000 <fields@@Base+0x1b4>
   40670:	adrp	x1, 59000 <fields@@Base+0x1b4>
   40674:	adrp	x3, 59000 <fields@@Base+0x1b4>
   40678:	add	x0, x0, #0x83b
   4067c:	add	x1, x1, #0x50e
   40680:	add	x3, x3, #0x85f
   40684:	mov	w2, #0x372                 	// #882
   40688:	bl	35b30 <__assert_fail@plt>

000000000004068c <aarch64_find_best_match@@Base>:
   4068c:	stp	x29, x30, [sp, #-16]!
   40690:	ldr	x10, [x0, #8]
   40694:	mov	x9, #0xffffffff00000000    	// #-4294967296
   40698:	mov	w8, #0xfffffffe            	// #-2
   4069c:	mov	x11, #0x100000000           	// #4294967296
   406a0:	add	x10, x10, #0x20
   406a4:	mov	x29, sp
   406a8:	ldr	w12, [x10], #4
   406ac:	add	x9, x9, x11
   406b0:	add	w8, w8, #0x1
   406b4:	cbnz	w12, 406a8 <aarch64_find_best_match@@Base+0x1c>
   406b8:	add	w11, w8, #0x1
   406bc:	cmp	w11, #0x7
   406c0:	b.cs	408d0 <aarch64_find_best_match@@Base+0x244>  // b.hs, b.nlast
   406c4:	cmn	w8, #0x1
   406c8:	b.eq	40874 <aarch64_find_best_match@@Base+0x1e8>  // b.none
   406cc:	cmp	w11, w2
   406d0:	mov	w15, #0xffffffff            	// #-1
   406d4:	ccmp	w2, w15, #0x4, gt
   406d8:	adrp	x15, 9b000 <aarch64_operands@@Base+0x16c38>
   406dc:	ldr	x15, [x15, #4032]
   406e0:	adrp	x13, 58000 <xexit@@Base+0x1dd4>
   406e4:	csel	w8, w2, w8, gt
   406e8:	mov	w10, wzr
   406ec:	asr	x11, x9, #32
   406f0:	add	x12, x0, #0x18
   406f4:	add	x13, x13, #0x900
   406f8:	mov	w14, #0x30                  	// #48
   406fc:	sxtw	x8, w8
   40700:	mov	x9, x1
   40704:	b	40718 <aarch64_find_best_match@@Base+0x8c>
   40708:	add	w10, w10, #0x1
   4070c:	cmp	w10, #0xa
   40710:	add	x9, x9, #0x6
   40714:	b.eq	408c4 <aarch64_find_best_match@@Base+0x238>  // b.none
   40718:	ldrb	w16, [x9]
   4071c:	cbnz	w16, 40748 <aarch64_find_best_match@@Base+0xbc>
   40720:	ldrb	w16, [x9, #1]
   40724:	cbnz	w16, 40748 <aarch64_find_best_match@@Base+0xbc>
   40728:	ldrb	w16, [x9, #2]
   4072c:	cbnz	w16, 40748 <aarch64_find_best_match@@Base+0xbc>
   40730:	ldrb	w16, [x9, #3]
   40734:	cbnz	w16, 40748 <aarch64_find_best_match@@Base+0xbc>
   40738:	ldrb	w16, [x9, #4]
   4073c:	cbnz	w16, 40748 <aarch64_find_best_match@@Base+0xbc>
   40740:	ldrb	w16, [x9, #5]
   40744:	cbz	w16, 408c0 <aarch64_find_best_match@@Base+0x234>
   40748:	tbnz	w8, #31, 408b8 <aarch64_find_best_match@@Base+0x22c>
   4074c:	mov	x16, xzr
   40750:	mov	x17, x12
   40754:	ldrb	w0, [x17, #4]
   40758:	cbz	w0, 407ec <aarch64_find_best_match@@Base+0x160>
   4075c:	ldrb	w18, [x9, x16]
   40760:	cmp	w18, w0
   40764:	b.eq	407ec <aarch64_find_best_match@@Base+0x160>  // b.none
   40768:	sub	w0, w0, #0x1
   4076c:	cmp	w0, #0x3
   40770:	b.hi	40708 <aarch64_find_best_match@@Base+0x7c>  // b.pmore
   40774:	adr	x2, 40784 <aarch64_find_best_match@@Base+0xf8>
   40778:	ldrb	w4, [x13, x0]
   4077c:	add	x2, x2, x4, lsl #2
   40780:	br	x2
   40784:	cmp	w18, #0x3
   40788:	b.eq	407c0 <aarch64_find_best_match@@Base+0x134>  // b.none
   4078c:	b	40708 <aarch64_find_best_match@@Base+0x7c>
   40790:	cmp	w18, #0x1
   40794:	b.eq	407a4 <aarch64_find_best_match@@Base+0x118>  // b.none
   40798:	b	40708 <aarch64_find_best_match@@Base+0x7c>
   4079c:	cmp	w18, #0x2
   407a0:	b.ne	40708 <aarch64_find_best_match@@Base+0x7c>  // b.any
   407a4:	ldr	w18, [x17]
   407a8:	madd	x18, x18, x14, x15
   407ac:	ldrb	w18, [x18, #16]
   407b0:	tbnz	w18, #4, 407ec <aarch64_find_best_match@@Base+0x160>
   407b4:	b	40708 <aarch64_find_best_match@@Base+0x7c>
   407b8:	cmp	w18, #0x4
   407bc:	b.ne	40708 <aarch64_find_best_match@@Base+0x7c>  // b.any
   407c0:	ldr	w18, [x17]
   407c4:	mul	x0, x18, x14
   407c8:	ldr	w0, [x15, x0]
   407cc:	cmp	w0, #0x1
   407d0:	b.ne	40708 <aarch64_find_best_match@@Base+0x7c>  // b.any
   407d4:	madd	x18, x18, x14, x15
   407d8:	ldrb	w18, [x18, #16]
   407dc:	tbz	w18, #4, 40708 <aarch64_find_best_match@@Base+0x7c>
   407e0:	ldr	w18, [x17, #16]
   407e4:	cmp	w18, #0x1f
   407e8:	b.ne	40708 <aarch64_find_best_match@@Base+0x7c>  // b.any
   407ec:	add	x18, x16, #0x1
   407f0:	cmp	x18, x11
   407f4:	b.ge	40808 <aarch64_find_best_match@@Base+0x17c>  // b.tcont
   407f8:	cmp	x16, x8
   407fc:	add	x17, x17, #0x38
   40800:	mov	x16, x18
   40804:	b.lt	40754 <aarch64_find_best_match@@Base+0xc8>  // b.tstop
   40808:	tbnz	w8, #31, 40858 <aarch64_find_best_match@@Base+0x1cc>
   4080c:	cmp	w8, #0x1e
   40810:	add	w10, w8, #0x1
   40814:	b.ls	40830 <aarch64_find_best_match@@Base+0x1a4>  // b.plast
   40818:	add	x11, x9, x10
   4081c:	cmp	x11, x3
   40820:	b.ls	40880 <aarch64_find_best_match@@Base+0x1f4>  // b.plast
   40824:	add	x11, x3, x10
   40828:	cmp	x9, x11
   4082c:	b.cs	40880 <aarch64_find_best_match@@Base+0x1f4>  // b.hs, b.nlast
   40830:	mov	x11, xzr
   40834:	add	x12, x3, x11
   40838:	sub	x11, x10, x11
   4083c:	ldrb	w13, [x9], #1
   40840:	subs	x11, x11, #0x1
   40844:	strb	w13, [x12], #1
   40848:	b.ne	4083c <aarch64_find_best_match@@Base+0x1b0>  // b.any
   4084c:	cmp	w8, #0x4
   40850:	b.ls	4085c <aarch64_find_best_match@@Base+0x1d0>  // b.plast
   40854:	b	40874 <aarch64_find_best_match@@Base+0x1e8>
   40858:	mov	w10, wzr
   4085c:	mov	w8, #0x5                   	// #5
   40860:	sub	w8, w8, w10
   40864:	add	x0, x3, w10, uxtw
   40868:	add	x2, x8, #0x1
   4086c:	mov	w1, wzr
   40870:	bl	35510 <memset@plt>
   40874:	mov	w0, #0x1                   	// #1
   40878:	ldp	x29, x30, [sp], #16
   4087c:	ret
   40880:	and	x11, x10, #0xffffffe0
   40884:	add	x12, x9, #0x10
   40888:	add	x9, x9, x11
   4088c:	add	x13, x3, #0x10
   40890:	mov	x14, x11
   40894:	ldp	q0, q1, [x12, #-16]
   40898:	add	x12, x12, #0x20
   4089c:	subs	x14, x14, #0x20
   408a0:	stp	q0, q1, [x13, #-16]
   408a4:	add	x13, x13, #0x20
   408a8:	b.ne	40894 <aarch64_find_best_match@@Base+0x208>  // b.any
   408ac:	cmp	x11, x10
   408b0:	b.ne	40834 <aarch64_find_best_match@@Base+0x1a8>  // b.any
   408b4:	b	4084c <aarch64_find_best_match@@Base+0x1c0>
   408b8:	mov	x9, x1
   408bc:	b	40808 <aarch64_find_best_match@@Base+0x17c>
   408c0:	cbz	w10, 40808 <aarch64_find_best_match@@Base+0x17c>
   408c4:	mov	w0, wzr
   408c8:	ldp	x29, x30, [sp], #16
   408cc:	ret
   408d0:	adrp	x0, 59000 <fields@@Base+0x1b4>
   408d4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   408d8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   408dc:	add	x0, x0, #0x83b
   408e0:	add	x1, x1, #0x50e
   408e4:	add	x3, x3, #0x85f
   408e8:	mov	w2, #0x372                 	// #882
   408ec:	bl	35b30 <__assert_fail@plt>

00000000000408f0 <aarch64_wide_constant_p@@Base>:
   408f0:	cbz	w1, 40908 <aarch64_wide_constant_p@@Base+0x18>
   408f4:	lsr	x8, x0, #32
   408f8:	add	w8, w8, #0x1
   408fc:	cmp	w8, #0x1
   40900:	b.hi	40948 <aarch64_wide_constant_p@@Base+0x58>  // b.pmore
   40904:	and	x0, x0, #0xffffffff
   40908:	cmp	x0, #0x10, lsl #12
   4090c:	b.cs	40918 <aarch64_wide_constant_p@@Base+0x28>  // b.hs, b.nlast
   40910:	mov	w8, wzr
   40914:	b	40964 <aarch64_wide_constant_p@@Base+0x74>
   40918:	tst	x0, #0xffffffff0000ffff
   4091c:	b.ne	40928 <aarch64_wide_constant_p@@Base+0x38>  // b.any
   40920:	mov	w8, #0x10                  	// #16
   40924:	b	40964 <aarch64_wide_constant_p@@Base+0x74>
   40928:	and	x8, x0, #0xffff00000000
   4092c:	cbnz	w1, 40950 <aarch64_wide_constant_p@@Base+0x60>
   40930:	cmp	x8, x0
   40934:	b.eq	40950 <aarch64_wide_constant_p@@Base+0x60>  // b.none
   40938:	tst	x0, #0xffffffffffff
   4093c:	b.ne	40948 <aarch64_wide_constant_p@@Base+0x58>  // b.any
   40940:	mov	w8, #0x30                  	// #48
   40944:	b	40964 <aarch64_wide_constant_p@@Base+0x74>
   40948:	mov	w0, wzr
   4094c:	ret
   40950:	cmp	x8, x0
   40954:	mov	w0, wzr
   40958:	b.ne	40970 <aarch64_wide_constant_p@@Base+0x80>  // b.any
   4095c:	cbnz	w1, 40970 <aarch64_wide_constant_p@@Base+0x80>
   40960:	mov	w8, #0x20                  	// #32
   40964:	cbz	x2, 4096c <aarch64_wide_constant_p@@Base+0x7c>
   40968:	str	w8, [x2]
   4096c:	mov	w0, #0x1                   	// #1
   40970:	ret

0000000000040974 <aarch64_logical_immediate_p@@Base>:
   40974:	stp	x29, x30, [sp, #-96]!
   40978:	stp	x22, x21, [sp, #64]
   4097c:	adrp	x22, f2000 <aarch64_opcode_table@@Base+0x555d8>
   40980:	ldrb	w8, [x22, #1640]
   40984:	stp	x20, x19, [sp, #80]
   40988:	mov	x19, x2
   4098c:	mov	w20, w1
   40990:	mov	x21, x0
   40994:	stp	x28, x27, [sp, #16]
   40998:	stp	x26, x25, [sp, #32]
   4099c:	stp	x24, x23, [sp, #48]
   409a0:	mov	x29, sp
   409a4:	tbnz	w8, #0, 40b28 <aarch64_logical_immediate_p@@Base+0x1b4>
   409a8:	adrp	x10, f2000 <aarch64_opcode_table@@Base+0x555d8>
   409ac:	adrp	x11, 58000 <xexit@@Base+0x1dd4>
   409b0:	mov	w5, wzr
   409b4:	mov	w8, #0x1                   	// #1
   409b8:	mov	x9, #0xfffffffffffffffe    	// #-2
   409bc:	add	x10, x10, #0x670
   409c0:	add	x11, x11, #0x904
   409c4:	mov	x12, #0xffffffffffffffff    	// #-1
   409c8:	mov	w13, #0x5                   	// #5
   409cc:	mov	w14, #0xffffffff            	// #-1
   409d0:	mov	w15, #0x1                   	// #1
   409d4:	b	409e8 <aarch64_logical_immediate_p@@Base+0x74>
   409d8:	add	w5, w4, w3
   409dc:	add	w15, w15, #0x1
   409e0:	cmp	w15, #0x7
   409e4:	b.eq	40af8 <aarch64_logical_immediate_p@@Base+0x184>  // b.none
   409e8:	cmp	w15, #0x6
   409ec:	lsl	w16, w8, w15
   409f0:	b.ne	40a0c <aarch64_logical_immediate_p@@Base+0x98>  // b.any
   409f4:	mov	w3, wzr
   409f8:	mov	x17, #0xffffffffffffffff    	// #-1
   409fc:	mov	w0, #0x1000                	// #4096
   40a00:	mov	w1, #0x3f                  	// #63
   40a04:	mov	w18, #0x40                  	// #64
   40a08:	b	40a38 <aarch64_logical_immediate_p@@Base+0xc4>
   40a0c:	subs	w1, w16, #0x1
   40a10:	add	w2, w15, #0x1
   40a14:	b.eq	40aec <aarch64_logical_immediate_p@@Base+0x178>  // b.none
   40a18:	sub	w3, w13, w15
   40a1c:	lsl	w3, w14, w3
   40a20:	lsl	x17, x12, x16
   40a24:	mvn	w3, w3
   40a28:	mov	w0, wzr
   40a2c:	mov	w18, w16
   40a30:	mvn	x17, x17
   40a34:	lsl	w3, w3, w2
   40a38:	mov	x2, xzr
   40a3c:	orr	w0, w3, w0
   40a40:	mov	w1, w1
   40a44:	b	40a54 <aarch64_logical_immediate_p@@Base+0xe0>
   40a48:	cmp	x2, x1
   40a4c:	add	w5, w4, w3
   40a50:	b.eq	409d8 <aarch64_logical_immediate_p@@Base+0x64>  // b.none
   40a54:	mov	w4, w5
   40a58:	lsl	x7, x9, x2
   40a5c:	add	x23, x10, w4, sxtw #4
   40a60:	mov	w6, wzr
   40a64:	mov	x3, xzr
   40a68:	orr	w5, w0, w2
   40a6c:	add	x2, x2, #0x1
   40a70:	mvn	x7, x7
   40a74:	add	x23, x23, #0x8
   40a78:	mov	w24, w16
   40a7c:	b	40ab0 <aarch64_logical_immediate_p@@Base+0x13c>
   40a80:	orr	x25, x25, x25, lsl #4
   40a84:	orr	x25, x25, x25, lsl #8
   40a88:	orr	x25, x25, x25, lsl #16
   40a8c:	orr	x25, x25, x25, lsl #32
   40a90:	stur	x25, [x23, #-8]
   40a94:	orr	w25, w5, w6
   40a98:	add	x3, x3, #0x1
   40a9c:	add	w6, w6, #0x40
   40aa0:	sub	w24, w24, #0x1
   40aa4:	str	w25, [x23], #16
   40aa8:	cmp	x3, x18
   40aac:	b.cs	40a48 <aarch64_logical_immediate_p@@Base+0xd4>  // b.hs, b.nlast
   40ab0:	mov	x25, x7
   40ab4:	cbz	x3, 40ac8 <aarch64_logical_immediate_p@@Base+0x154>
   40ab8:	lsl	x26, x7, x24
   40abc:	lsr	x25, x7, x3
   40ac0:	and	x26, x26, x17
   40ac4:	orr	x25, x26, x25
   40ac8:	sub	w26, w15, #0x1
   40acc:	cmp	w26, #0x5
   40ad0:	b.hi	40bf4 <aarch64_logical_immediate_p@@Base+0x280>  // b.pmore
   40ad4:	adr	x27, 40a80 <aarch64_logical_immediate_p@@Base+0x10c>
   40ad8:	ldrb	w28, [x11, x26]
   40adc:	add	x27, x27, x28, lsl #2
   40ae0:	br	x27
   40ae4:	orr	x25, x25, x25, lsl #2
   40ae8:	b	40a80 <aarch64_logical_immediate_p@@Base+0x10c>
   40aec:	mov	w15, w2
   40af0:	cmp	w15, #0x7
   40af4:	b.ne	409e8 <aarch64_logical_immediate_p@@Base+0x74>  // b.any
   40af8:	mov	w8, #0x14d6                	// #5334
   40afc:	cmp	w5, w8
   40b00:	b.ne	40bf8 <aarch64_logical_immediate_p@@Base+0x284>  // b.any
   40b04:	adrp	x0, f2000 <aarch64_opcode_table@@Base+0x555d8>
   40b08:	adrp	x3, 40000 <print_aarch64_disassembler_options@@Base+0x1e0>
   40b0c:	add	x0, x0, #0x670
   40b10:	add	x3, x3, #0xc18
   40b14:	mov	w1, #0x14d6                	// #5334
   40b18:	mov	w2, #0x10                  	// #16
   40b1c:	bl	35330 <qsort@plt>
   40b20:	mov	w8, #0x1                   	// #1
   40b24:	strb	w8, [x22, #1640]
   40b28:	lsl	w8, w20, #2
   40b2c:	mov	x9, #0xffffffffffffffff    	// #-1
   40b30:	lsl	x9, x9, x8
   40b34:	lsl	x9, x9, x8
   40b38:	bic	x8, x21, x9
   40b3c:	cmp	x8, x21
   40b40:	b.eq	40b70 <aarch64_logical_immediate_p@@Base+0x1fc>  // b.none
   40b44:	orr	x9, x9, x21
   40b48:	cmp	x9, x21
   40b4c:	b.eq	40b70 <aarch64_logical_immediate_p@@Base+0x1fc>  // b.none
   40b50:	mov	w0, wzr
   40b54:	ldp	x20, x19, [sp, #80]
   40b58:	ldp	x22, x21, [sp, #64]
   40b5c:	ldp	x24, x23, [sp, #48]
   40b60:	ldp	x26, x25, [sp, #32]
   40b64:	ldp	x28, x27, [sp, #16]
   40b68:	ldp	x29, x30, [sp], #96
   40b6c:	ret
   40b70:	cmp	w20, #0x7
   40b74:	b.gt	40b90 <aarch64_logical_immediate_p@@Base+0x21c>
   40b78:	lsl	w9, w20, #3
   40b7c:	lsl	x10, x8, x9
   40b80:	cmp	w9, #0x20
   40b84:	lsl	w9, w9, #1
   40b88:	orr	x8, x10, x8
   40b8c:	b.lt	40b7c <aarch64_logical_immediate_p@@Base+0x208>  // b.tstop
   40b90:	adrp	x9, f2000 <aarch64_opcode_table@@Base+0x555d8>
   40b94:	mov	x10, xzr
   40b98:	mov	w11, #0x14d6                	// #5334
   40b9c:	add	x9, x9, #0x670
   40ba0:	b	40bb0 <aarch64_logical_immediate_p@@Base+0x23c>
   40ba4:	cmp	x10, x12
   40ba8:	mov	x11, x12
   40bac:	b.cs	40b50 <aarch64_logical_immediate_p@@Base+0x1dc>  // b.hs, b.nlast
   40bb0:	add	x12, x11, x10
   40bb4:	lsr	x12, x12, #1
   40bb8:	add	x13, x9, x12, lsl #4
   40bbc:	ldr	x14, [x13]
   40bc0:	cmp	x8, x14
   40bc4:	b.cc	40ba4 <aarch64_logical_immediate_p@@Base+0x230>  // b.lo, b.ul, b.last
   40bc8:	b.ls	40bd8 <aarch64_logical_immediate_p@@Base+0x264>  // b.plast
   40bcc:	add	x10, x12, #0x1
   40bd0:	mov	x12, x11
   40bd4:	b	40ba4 <aarch64_logical_immediate_p@@Base+0x230>
   40bd8:	cbz	x13, 40b50 <aarch64_logical_immediate_p@@Base+0x1dc>
   40bdc:	cbz	x19, 40bec <aarch64_logical_immediate_p@@Base+0x278>
   40be0:	add	x8, x9, x12, lsl #4
   40be4:	ldr	w8, [x8, #8]
   40be8:	str	w8, [x19]
   40bec:	mov	w0, #0x1                   	// #1
   40bf0:	b	40b54 <aarch64_logical_immediate_p@@Base+0x1e0>
   40bf4:	bl	35700 <abort@plt>
   40bf8:	adrp	x0, 5c000 <fields@@Base+0x31b4>
   40bfc:	adrp	x1, 59000 <fields@@Base+0x1b4>
   40c00:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   40c04:	add	x0, x0, #0xe93
   40c08:	add	x1, x1, #0x50e
   40c0c:	add	x3, x3, #0xeab
   40c10:	mov	w2, #0x4c9                 	// #1225
   40c14:	bl	35b30 <__assert_fail@plt>
   40c18:	ldr	x8, [x0]
   40c1c:	ldr	x9, [x1]
   40c20:	cmp	x8, x9
   40c24:	cset	w8, hi  // hi = pmore
   40c28:	csinv	w0, w8, wzr, cs  // cs = hs, nlast
   40c2c:	ret

0000000000040c30 <aarch64_shrink_expanded_imm8@@Base>:
   40c30:	mov	x8, x0
   40c34:	ands	w9, w8, #0xff
   40c38:	b.eq	40c7c <aarch64_shrink_expanded_imm8@@Base+0x4c>  // b.none
   40c3c:	cmp	w9, #0xff
   40c40:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40c44:	mov	w0, #0x1                   	// #1
   40c48:	ubfx	w9, w8, #8, #8
   40c4c:	cbnz	w9, 40c88 <aarch64_shrink_expanded_imm8@@Base+0x58>
   40c50:	ubfx	w9, w8, #16, #8
   40c54:	cbnz	w9, 40c9c <aarch64_shrink_expanded_imm8@@Base+0x6c>
   40c58:	ubfx	x9, x8, #24, #8
   40c5c:	cbnz	w9, 40cb0 <aarch64_shrink_expanded_imm8@@Base+0x80>
   40c60:	ubfx	x9, x8, #32, #8
   40c64:	cbnz	w9, 40cc4 <aarch64_shrink_expanded_imm8@@Base+0x94>
   40c68:	ubfx	x9, x8, #40, #8
   40c6c:	cbnz	w9, 40cd8 <aarch64_shrink_expanded_imm8@@Base+0xa8>
   40c70:	ubfx	x9, x8, #48, #8
   40c74:	cbnz	w9, 40cec <aarch64_shrink_expanded_imm8@@Base+0xbc>
   40c78:	b	40cf8 <aarch64_shrink_expanded_imm8@@Base+0xc8>
   40c7c:	mov	w0, wzr
   40c80:	ubfx	w9, w8, #8, #8
   40c84:	cbz	w9, 40c50 <aarch64_shrink_expanded_imm8@@Base+0x20>
   40c88:	cmp	w9, #0xff
   40c8c:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40c90:	orr	w0, w0, #0x2
   40c94:	ubfx	w9, w8, #16, #8
   40c98:	cbz	w9, 40c58 <aarch64_shrink_expanded_imm8@@Base+0x28>
   40c9c:	cmp	w9, #0xff
   40ca0:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40ca4:	orr	w0, w0, #0x4
   40ca8:	ubfx	x9, x8, #24, #8
   40cac:	cbz	w9, 40c60 <aarch64_shrink_expanded_imm8@@Base+0x30>
   40cb0:	cmp	w9, #0xff
   40cb4:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40cb8:	orr	w0, w0, #0x8
   40cbc:	ubfx	x9, x8, #32, #8
   40cc0:	cbz	w9, 40c68 <aarch64_shrink_expanded_imm8@@Base+0x38>
   40cc4:	cmp	w9, #0xff
   40cc8:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40ccc:	orr	w0, w0, #0x10
   40cd0:	ubfx	x9, x8, #40, #8
   40cd4:	cbz	w9, 40c70 <aarch64_shrink_expanded_imm8@@Base+0x40>
   40cd8:	cmp	w9, #0xff
   40cdc:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40ce0:	orr	w0, w0, #0x20
   40ce4:	ubfx	x9, x8, #48, #8
   40ce8:	cbz	w9, 40cf8 <aarch64_shrink_expanded_imm8@@Base+0xc8>
   40cec:	cmp	w9, #0xff
   40cf0:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40cf4:	orr	w0, w0, #0x40
   40cf8:	lsr	x8, x8, #56
   40cfc:	cbz	w8, 40d14 <aarch64_shrink_expanded_imm8@@Base+0xe4>
   40d00:	cmp	w8, #0xff
   40d04:	b.ne	40d10 <aarch64_shrink_expanded_imm8@@Base+0xe0>  // b.any
   40d08:	orr	w0, w0, #0x80
   40d0c:	ret
   40d10:	mov	w0, #0xffffffff            	// #-1
   40d14:	ret

0000000000040d18 <aarch64_match_operands_constraint@@Base>:
   40d18:	stp	x29, x30, [sp, #-64]!
   40d1c:	stp	x22, x21, [sp, #32]
   40d20:	stp	x20, x19, [sp, #48]
   40d24:	ldr	x9, [x0, #8]
   40d28:	mov	x20, x0
   40d2c:	mov	x19, x1
   40d30:	str	x23, [sp, #16]
   40d34:	ldrb	w8, [x9, #132]
   40d38:	mov	x29, sp
   40d3c:	cbz	w8, 40d58 <aarch64_match_operands_constraint@@Base+0x40>
   40d40:	mov	w10, #0x38                  	// #56
   40d44:	umaddl	x10, w8, w10, x20
   40d48:	ldr	w11, [x20, #40]
   40d4c:	ldr	w10, [x10, #40]
   40d50:	cmp	w11, w10
   40d54:	b.ne	40eb0 <aarch64_match_operands_constraint@@Base+0x198>  // b.any
   40d58:	add	x1, x9, #0x38
   40d5c:	add	x3, x29, #0x18
   40d60:	mov	w2, #0xffffffff            	// #-1
   40d64:	mov	x0, x20
   40d68:	bl	35410 <aarch64_find_best_match@plt>
   40d6c:	cbz	w0, 40e94 <aarch64_match_operands_constraint@@Base+0x17c>
   40d70:	ldr	x3, [x20, #8]
   40d74:	ldrb	w8, [x3, #123]
   40d78:	tbz	w8, #4, 40ddc <aarch64_match_operands_constraint@@Base+0xc4>
   40d7c:	add	x10, x3, #0x20
   40d80:	mov	x8, #0xffffffff00000000    	// #-4294967296
   40d84:	mov	w9, #0x1                   	// #1
   40d88:	mov	x11, #0x100000000           	// #4294967296
   40d8c:	ldr	w12, [x10], #4
   40d90:	add	x8, x8, x11
   40d94:	sub	w9, w9, #0x1
   40d98:	cbnz	w12, 40d8c <aarch64_match_operands_constraint@@Base+0x74>
   40d9c:	neg	w10, w9
   40da0:	cmp	w10, #0x6
   40da4:	b.hi	40ed8 <aarch64_match_operands_constraint@@Base+0x1c0>  // b.pmore
   40da8:	cbz	w9, 40ddc <aarch64_match_operands_constraint@@Base+0xc4>
   40dac:	mov	x9, xzr
   40db0:	asr	x8, x8, #32
   40db4:	add	x10, x20, #0x1c
   40db8:	add	x11, x29, #0x18
   40dbc:	ldrb	w12, [x10]
   40dc0:	ldrb	w13, [x11, x9]
   40dc4:	cmp	w12, w13
   40dc8:	b.ne	40e94 <aarch64_match_operands_constraint@@Base+0x17c>  // b.any
   40dcc:	add	x9, x9, #0x1
   40dd0:	cmp	x9, x8
   40dd4:	add	x10, x10, #0x38
   40dd8:	b.lt	40dbc <aarch64_match_operands_constraint@@Base+0xa4>  // b.tstop
   40ddc:	ldr	w8, [x3, #32]
   40de0:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40de4:	ldrb	w8, [x29, #24]
   40de8:	strb	w8, [x20, #28]
   40dec:	ldr	w8, [x3, #36]
   40df0:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40df4:	ldrb	w8, [x29, #25]
   40df8:	strb	w8, [x20, #84]
   40dfc:	ldr	w8, [x3, #40]
   40e00:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40e04:	ldrb	w8, [x29, #26]
   40e08:	strb	w8, [x20, #140]
   40e0c:	ldr	w8, [x3, #44]
   40e10:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40e14:	ldrb	w8, [x29, #27]
   40e18:	strb	w8, [x20, #196]
   40e1c:	ldr	w8, [x3, #48]
   40e20:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40e24:	ldrb	w8, [x29, #28]
   40e28:	strb	w8, [x20, #252]
   40e2c:	ldr	w8, [x3, #52]
   40e30:	cbz	w8, 40e3c <aarch64_match_operands_constraint@@Base+0x124>
   40e34:	ldrb	w8, [x29, #29]
   40e38:	strb	w8, [x20, #308]
   40e3c:	ldr	w2, [x3, #32]
   40e40:	cbz	w2, 40e8c <aarch64_match_operands_constraint@@Base+0x174>
   40e44:	mov	x22, xzr
   40e48:	add	x21, x20, #0x18
   40e4c:	add	x23, x20, #0x48
   40e50:	ldrb	w8, [x23]
   40e54:	tbnz	w8, #0, 40e6c <aarch64_match_operands_constraint@@Base+0x154>
   40e58:	mov	x0, x21
   40e5c:	mov	w1, w22
   40e60:	mov	x4, x19
   40e64:	bl	40ef8 <aarch64_match_operands_constraint@@Base+0x1e0>
   40e68:	cbz	w0, 40ec4 <aarch64_match_operands_constraint@@Base+0x1ac>
   40e6c:	cmp	x22, #0x5
   40e70:	b.eq	40e8c <aarch64_match_operands_constraint@@Base+0x174>  // b.none
   40e74:	ldr	x3, [x20, #8]
   40e78:	add	x23, x23, #0x38
   40e7c:	add	x8, x3, x22, lsl #2
   40e80:	ldr	w2, [x8, #36]
   40e84:	add	x22, x22, #0x1
   40e88:	cbnz	w2, 40e50 <aarch64_match_operands_constraint@@Base+0x138>
   40e8c:	mov	w0, #0x1                   	// #1
   40e90:	b	40ec4 <aarch64_match_operands_constraint@@Base+0x1ac>
   40e94:	mov	w0, wzr
   40e98:	cbz	x19, 40ec4 <aarch64_match_operands_constraint@@Base+0x1ac>
   40e9c:	adrp	x8, 59000 <fields@@Base+0x1b4>
   40ea0:	ldr	d0, [x8, #920]
   40ea4:	str	xzr, [x19, #8]
   40ea8:	str	d0, [x19]
   40eac:	b	40ec4 <aarch64_match_operands_constraint@@Base+0x1ac>
   40eb0:	mov	w0, wzr
   40eb4:	cbz	x19, 40ec4 <aarch64_match_operands_constraint@@Base+0x1ac>
   40eb8:	mov	w9, #0x5                   	// #5
   40ebc:	stp	w9, w8, [x19]
   40ec0:	str	xzr, [x19, #8]
   40ec4:	ldp	x20, x19, [sp, #48]
   40ec8:	ldp	x22, x21, [sp, #32]
   40ecc:	ldr	x23, [sp, #16]
   40ed0:	ldp	x29, x30, [sp], #64
   40ed4:	ret
   40ed8:	adrp	x0, 59000 <fields@@Base+0x1b4>
   40edc:	adrp	x1, 59000 <fields@@Base+0x1b4>
   40ee0:	adrp	x3, 59000 <fields@@Base+0x1b4>
   40ee4:	add	x0, x0, #0x83b
   40ee8:	add	x1, x1, #0x50e
   40eec:	add	x3, x3, #0x85f
   40ef0:	mov	w2, #0x372                 	// #882
   40ef4:	bl	35b30 <__assert_fail@plt>
   40ef8:	stp	x29, x30, [sp, #-80]!
   40efc:	mov	w8, #0x38                  	// #56
   40f00:	stp	x24, x23, [sp, #32]
   40f04:	stp	x22, x21, [sp, #48]
   40f08:	stp	x20, x19, [sp, #64]
   40f0c:	add	x10, x3, w1, sxtw #2
   40f10:	smaddl	x9, w1, w8, x0
   40f14:	ldr	w10, [x10, #32]
   40f18:	ldr	w8, [x9]
   40f1c:	str	x25, [sp, #16]
   40f20:	mov	x29, sp
   40f24:	cmp	w10, w8
   40f28:	b.ne	42c34 <aarch64_match_operands_constraint@@Base+0x1f1c>  // b.any
   40f2c:	cmp	w8, w2
   40f30:	b.ne	42c34 <aarch64_match_operands_constraint@@Base+0x1f1c>  // b.any
   40f34:	mov	w8, #0x30                  	// #48
   40f38:	umull	x10, w2, w8
   40f3c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   40f40:	ldr	x8, [x8, #4032]
   40f44:	mov	x21, x0
   40f48:	mov	w0, #0x1                   	// #1
   40f4c:	ldr	w10, [x8, x10]
   40f50:	sub	w10, w10, #0x1
   40f54:	cmp	w10, #0xc
   40f58:	b.hi	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.pmore
   40f5c:	ldrb	w9, [x9, #4]
   40f60:	adrp	x11, 58000 <xexit@@Base+0x1dd4>
   40f64:	add	x11, x11, #0x90a
   40f68:	mov	w20, w1
   40f6c:	adr	x12, 40f88 <aarch64_match_operands_constraint@@Base+0x270>
   40f70:	ldrh	w13, [x11, x10, lsl #1]
   40f74:	add	x12, x12, x13, lsl #2
   40f78:	mov	x19, x4
   40f7c:	sxtw	x23, w20
   40f80:	mov	w10, w2
   40f84:	br	x12
   40f88:	cmp	w2, #0x9
   40f8c:	b.eq	41620 <aarch64_match_operands_constraint@@Base+0x908>  // b.none
   40f90:	cmp	w2, #0xd
   40f94:	b.ne	417f8 <aarch64_match_operands_constraint@@Base+0xae0>  // b.any
   40f98:	orr	w8, w20, #0x2
   40f9c:	cmp	w8, #0x3
   40fa0:	b.ne	42d74 <aarch64_match_operands_constraint@@Base+0x205c>  // b.any
   40fa4:	sub	x22, x23, #0x1
   40fa8:	mov	w8, #0x38                  	// #56
   40fac:	madd	x8, x22, x8, x21
   40fb0:	ldr	w8, [x8, #16]
   40fb4:	tbnz	w8, #0, 4172c <aarch64_match_operands_constraint@@Base+0xa14>
   40fb8:	mov	w9, #0x38                  	// #56
   40fbc:	madd	x9, x23, x9, x21
   40fc0:	ldr	w9, [x9, #16]
   40fc4:	add	w8, w8, #0x1
   40fc8:	cmp	w9, w8
   40fcc:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   40fd0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   40fd4:	adrp	x1, 5c000 <fields@@Base+0x31b4>
   40fd8:	add	x0, x0, #0x270
   40fdc:	add	x1, x1, #0xfc6
   40fe0:	b	415c4 <aarch64_match_operands_constraint@@Base+0x8ac>
   40fe4:	ldr	w8, [x3, #20]
   40fe8:	cmp	w8, #0x50
   40fec:	b.ne	414a0 <aarch64_match_operands_constraint@@Base+0x788>  // b.any
   40ff0:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   40ff4:	ldrb	w8, [x21, #4]
   40ff8:	ldr	x10, [x10, #3776]
   40ffc:	add	x8, x10, x8, lsl #5
   41000:	ldr	w10, [x8, #24]
   41004:	cmp	w10, #0x1
   41008:	b.ne	42d14 <aarch64_match_operands_constraint@@Base+0x1ffc>  // b.any
   4100c:	ldrb	w10, [x8, #4]
   41010:	ldrb	w8, [x8]
   41014:	mul	w8, w8, w10
   41018:	lsr	w8, w8, #1
   4101c:	b	414a4 <aarch64_match_operands_constraint@@Base+0x78c>
   41020:	mov	w9, #0x38                  	// #56
   41024:	madd	x9, x23, x9, x21
   41028:	ldr	w9, [x9, #16]
   4102c:	cmp	w9, #0x8
   41030:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   41034:	mov	w9, #0x30                  	// #48
   41038:	madd	x9, x10, x9, x8
   4103c:	ldr	w11, [x9, #20]
   41040:	cbz	w11, 42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>
   41044:	mov	w12, #0x30                  	// #48
   41048:	madd	x8, x10, x12, x8
   4104c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   41050:	ldr	x10, [x10, #3944]
   41054:	mov	w9, wzr
   41058:	add	x8, x8, #0x18
   4105c:	add	x11, x10, w11, uxtw #3
   41060:	ldr	w12, [x11, #4]
   41064:	ldr	w11, [x8], #4
   41068:	add	w9, w12, w9
   4106c:	cbnz	w11, 4105c <aarch64_match_operands_constraint@@Base+0x344>
   41070:	sub	w8, w9, #0x1
   41074:	cmp	w8, #0x1f
   41078:	b.cs	42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>  // b.hs, b.nlast
   4107c:	cmp	w9, #0x3
   41080:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   41084:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41088:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   4108c:	add	x0, x0, #0x270
   41090:	add	x1, x1, #0xc9
   41094:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41098:	sub	w10, w20, #0x1
   4109c:	cmp	w10, #0x2
   410a0:	b.cs	42c94 <aarch64_match_operands_constraint@@Base+0x1f7c>  // b.hs, b.nlast
   410a4:	cmp	w2, #0xf
   410a8:	b.eq	41668 <aarch64_match_operands_constraint@@Base+0x950>  // b.none
   410ac:	cmp	w2, #0xe
   410b0:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   410b4:	mov	w10, #0x38                  	// #56
   410b8:	madd	x10, x23, x10, x21
   410bc:	ldr	w10, [x10, #32]
   410c0:	sub	w11, w10, #0x5
   410c4:	cmp	w11, #0x9
   410c8:	b.cs	4175c <aarch64_match_operands_constraint@@Base+0xa44>  // b.hs, b.nlast
   410cc:	ldr	w11, [x21]
   410d0:	mov	w12, #0x30                  	// #48
   410d4:	mul	x12, x11, x12
   410d8:	ldr	w12, [x8, x12]
   410dc:	cmp	w12, #0x1
   410e0:	b.ne	41100 <aarch64_match_operands_constraint@@Base+0x3e8>  // b.any
   410e4:	mov	w12, #0x30                  	// #48
   410e8:	madd	x11, x11, x12, x8
   410ec:	ldrb	w11, [x11, #16]
   410f0:	tbz	w11, #4, 41100 <aarch64_match_operands_constraint@@Base+0x3e8>
   410f4:	ldr	w11, [x21, #16]
   410f8:	cmp	w11, #0x1f
   410fc:	b.eq	41a78 <aarch64_match_operands_constraint@@Base+0xd60>  // b.none
   41100:	cmp	w20, #0x2
   41104:	b.ne	4113c <aarch64_match_operands_constraint@@Base+0x424>  // b.any
   41108:	ldr	w11, [x21, #56]
   4110c:	mov	w12, #0x30                  	// #48
   41110:	mul	x12, x11, x12
   41114:	ldr	w12, [x8, x12]
   41118:	cmp	w12, #0x1
   4111c:	b.ne	4113c <aarch64_match_operands_constraint@@Base+0x424>  // b.any
   41120:	mov	w12, #0x30                  	// #48
   41124:	madd	x8, x11, x12, x8
   41128:	ldrb	w8, [x8, #16]
   4112c:	tbz	w8, #4, 4113c <aarch64_match_operands_constraint@@Base+0x424>
   41130:	ldr	w8, [x21, #72]
   41134:	cmp	w8, #0x1f
   41138:	b.eq	41a78 <aarch64_match_operands_constraint@@Base+0xd60>  // b.none
   4113c:	mov	w8, #0x38                  	// #56
   41140:	madd	x8, x23, x8, x21
   41144:	ldrb	w8, [x8, #36]
   41148:	tbnz	w8, #0, 419b4 <aarch64_match_operands_constraint@@Base+0xc9c>
   4114c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41150:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41154:	add	x0, x0, #0x270
   41158:	add	x1, x1, #0x641
   4115c:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41160:	ldr	w11, [x3, #16]
   41164:	cmp	w11, #0x3f
   41168:	b.hi	418ec <aarch64_match_operands_constraint@@Base+0xbd4>  // b.pmore
   4116c:	mov	w12, #0x1                   	// #1
   41170:	lsl	x12, x12, x11
   41174:	mov	x13, #0x6d00000000000000    	// #7854277750134145024
   41178:	tst	x12, x13
   4117c:	b.ne	415a4 <aarch64_match_operands_constraint@@Base+0x88c>  // b.any
   41180:	mov	w12, #0x1                   	// #1
   41184:	mov	x13, #0x280000              	// #2621440
   41188:	lsl	x12, x12, x11
   4118c:	movk	x13, #0x8040, lsl #48
   41190:	tst	x12, x13
   41194:	b.eq	4183c <aarch64_match_operands_constraint@@Base+0xb24>  // b.none
   41198:	mov	w11, #0x38                  	// #56
   4119c:	madd	x11, x23, x11, x21
   411a0:	ldrb	w11, [x11, #28]
   411a4:	tbnz	w11, #1, 418fc <aarch64_match_operands_constraint@@Base+0xbe4>
   411a8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   411ac:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   411b0:	add	x0, x0, #0x270
   411b4:	add	x1, x1, #0xf5
   411b8:	b	415c4 <aarch64_match_operands_constraint@@Base+0x8ac>
   411bc:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   411c0:	ldr	x11, [x11, #3776]
   411c4:	mov	w12, #0x38                  	// #56
   411c8:	madd	x12, x23, x12, x21
   411cc:	ldr	x22, [x12, #16]
   411d0:	add	x13, x11, x9, lsl #5
   411d4:	ldr	w13, [x13, #24]
   411d8:	cmp	w13, #0x2
   411dc:	b.ne	41200 <aarch64_match_operands_constraint@@Base+0x4e8>  // b.any
   411e0:	add	x12, x11, x9, lsl #5
   411e4:	ldp	w24, w25, [x12]
   411e8:	sxtw	x24, w24
   411ec:	cmp	x22, x24
   411f0:	b.lt	41694 <aarch64_match_operands_constraint@@Base+0x97c>  // b.tstop
   411f4:	sxtw	x12, w25
   411f8:	cmp	x22, x12
   411fc:	b.gt	41694 <aarch64_match_operands_constraint@@Base+0x97c>
   41200:	sub	w12, w2, #0x2b
   41204:	cmp	w12, #0xa3
   41208:	mov	w0, #0x1                   	// #1
   4120c:	b.hi	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.pmore
   41210:	adrp	x14, 58000 <xexit@@Base+0x1dd4>
   41214:	add	x14, x14, #0x924
   41218:	adr	x15, 4122c <aarch64_match_operands_constraint@@Base+0x514>
   4121c:	ldrh	w16, [x14, x12, lsl #1]
   41220:	add	x15, x15, x16, lsl #2
   41224:	mov	x12, xzr
   41228:	br	x15
   4122c:	mov	w9, #0x30                  	// #48
   41230:	madd	x9, x10, x9, x8
   41234:	ldr	w11, [x9, #20]
   41238:	cbz	w11, 42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>
   4123c:	mov	w12, #0x30                  	// #48
   41240:	madd	x8, x10, x12, x8
   41244:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   41248:	ldr	x10, [x10, #3944]
   4124c:	mov	w9, wzr
   41250:	add	x8, x8, #0x18
   41254:	add	x11, x10, w11, uxtw #3
   41258:	ldr	w12, [x11, #4]
   4125c:	ldr	w11, [x8], #4
   41260:	add	w9, w12, w9
   41264:	cbnz	w11, 41254 <aarch64_match_operands_constraint@@Base+0x53c>
   41268:	sub	w8, w9, #0x1
   4126c:	cmp	w8, #0x1f
   41270:	b.cs	42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>  // b.hs, b.nlast
   41274:	tbnz	x22, #63, 41288 <aarch64_match_operands_constraint@@Base+0x570>
   41278:	mov	w0, #0x1                   	// #1
   4127c:	lsl	x8, x0, x9
   41280:	cmp	x8, x22
   41284:	b.gt	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41288:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   4128c:	mov	w8, #0xffffffff            	// #-1
   41290:	lsl	w8, w8, w9
   41294:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41298:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   4129c:	mvn	w21, w8
   412a0:	add	x0, x0, #0x270
   412a4:	add	x1, x1, #0x782
   412a8:	b	418c8 <aarch64_match_operands_constraint@@Base+0xbb0>
   412ac:	cmp	w2, #0x26
   412b0:	b.ne	41574 <aarch64_match_operands_constraint@@Base+0x85c>  // b.any
   412b4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   412b8:	ldr	x8, [x8, #3776]
   412bc:	add	x10, x8, x9, lsl #5
   412c0:	ldr	w10, [x10, #24]
   412c4:	cmp	w10, #0x1
   412c8:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   412cc:	lsl	x9, x9, #5
   412d0:	mov	w10, #0x38                  	// #56
   412d4:	ldrb	w9, [x8, x9]
   412d8:	madd	x8, x23, x10, x21
   412dc:	ldr	x8, [x8, #24]
   412e0:	mov	w10, #0x10                  	// #16
   412e4:	udiv	w9, w10, w9
   412e8:	sub	w22, w9, #0x1
   412ec:	tbnz	x8, #63, 4153c <aarch64_match_operands_constraint@@Base+0x824>
   412f0:	sxtw	x9, w22
   412f4:	cmp	x8, x9
   412f8:	b.gt	4153c <aarch64_match_operands_constraint@@Base+0x824>
   412fc:	ldrb	w8, [x3, #123]
   41300:	and	w8, w8, #0x7
   41304:	b	415e0 <aarch64_match_operands_constraint@@Base+0x8c8>
   41308:	sub	w11, w2, #0xc4
   4130c:	cmp	w11, #0x9
   41310:	mov	w0, #0x1                   	// #1
   41314:	b.hi	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.pmore
   41318:	adrp	x12, 58000 <xexit@@Base+0x1dd4>
   4131c:	add	x12, x12, #0xaf6
   41320:	adr	x13, 41330 <aarch64_match_operands_constraint@@Base+0x618>
   41324:	ldrh	w14, [x12, x11, lsl #1]
   41328:	add	x13, x13, x14, lsl #2
   4132c:	br	x13
   41330:	mov	w9, #0x30                  	// #48
   41334:	madd	x9, x10, x9, x8
   41338:	ldr	w11, [x9, #20]
   4133c:	cbz	w11, 42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>
   41340:	adrp	x13, 9b000 <aarch64_operands@@Base+0x16c38>
   41344:	ldr	x13, [x13, #3944]
   41348:	mov	w12, #0x30                  	// #48
   4134c:	madd	x12, x10, x12, x8
   41350:	mov	w9, wzr
   41354:	add	x12, x12, #0x18
   41358:	add	x11, x13, w11, uxtw #3
   4135c:	ldr	w14, [x11, #4]
   41360:	ldr	w11, [x12], #4
   41364:	add	w9, w14, w9
   41368:	cbnz	w11, 41358 <aarch64_match_operands_constraint@@Base+0x640>
   4136c:	sub	w11, w9, #0x1
   41370:	cmp	w11, #0x1f
   41374:	b.cs	42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>  // b.hs, b.nlast
   41378:	mov	w11, #0x30                  	// #48
   4137c:	mov	w12, #0x38                  	// #56
   41380:	madd	x8, x10, x11, x8
   41384:	ldr	w8, [x8, #16]
   41388:	madd	x10, x23, x12, x21
   4138c:	ldr	w10, [x10, #16]
   41390:	ubfx	w8, w8, #5, #3
   41394:	lsr	w10, w10, w8
   41398:	cbz	w10, 41700 <aarch64_match_operands_constraint@@Base+0x9e8>
   4139c:	sub	w9, w8, #0x3
   413a0:	cmp	w9, #0x2
   413a4:	b.cs	42d54 <aarch64_match_operands_constraint@@Base+0x203c>  // b.hs, b.nlast
   413a8:	adrp	x9, 5d000 <fields@@Base+0x41b4>
   413ac:	adrp	x10, 5d000 <fields@@Base+0x41b4>
   413b0:	add	x9, x9, #0xa4
   413b4:	add	x10, x10, #0x94
   413b8:	cmp	w8, #0x4
   413bc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   413c0:	csel	x1, x10, x9, eq  // eq = none
   413c4:	add	x0, x0, #0x270
   413c8:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   413cc:	mov	w0, #0x1                   	// #1
   413d0:	cmp	w2, #0x4d
   413d4:	b.ne	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.any
   413d8:	cbz	x19, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   413dc:	mov	w8, #0x38                  	// #56
   413e0:	madd	x8, x23, x8, x21
   413e4:	ldr	x8, [x8, #16]
   413e8:	ldr	w8, [x8, #32]
   413ec:	and	w8, w8, #0xe
   413f0:	cmp	w8, #0xe
   413f4:	b.ne	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.any
   413f8:	mov	w8, #0x2                   	// #2
   413fc:	str	xzr, [x19, #8]
   41400:	stp	w8, w20, [x19]
   41404:	mov	w0, #0x1                   	// #1
   41408:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   4140c:	cmp	w2, #0x60
   41410:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   41414:	cbnz	w20, 42cb4 <aarch64_match_operands_constraint@@Base+0x1f9c>
   41418:	ldr	w8, [x21, #56]
   4141c:	cmp	w8, #0x3b
   41420:	b.ne	42cb4 <aarch64_match_operands_constraint@@Base+0x1f9c>  // b.any
   41424:	mov	w8, #0x38                  	// #56
   41428:	madd	x8, x23, x8, x21
   4142c:	ldr	w8, [x8, #16]
   41430:	mov	w0, #0x1                   	// #1
   41434:	cmp	w8, #0x1a
   41438:	b.hi	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.pmore
   4143c:	mov	w10, #0x18                  	// #24
   41440:	lsl	w9, w0, w8
   41444:	movk	w10, #0x600, lsl #16
   41448:	tst	w9, w10
   4144c:	b.eq	41860 <aarch64_match_operands_constraint@@Base+0xb48>  // b.none
   41450:	ldr	x8, [x21, #72]
   41454:	cmp	x8, #0x2
   41458:	b.lt	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.tstop
   4145c:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41460:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41464:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41468:	add	x0, x0, #0x270
   4146c:	add	x1, x1, #0x782
   41470:	mov	w2, #0x5                   	// #5
   41474:	bl	35a50 <dcgettext@plt>
   41478:	adrp	x9, 59000 <fields@@Base+0x1b4>
   4147c:	adrp	x10, 59000 <fields@@Base+0x1b4>
   41480:	ldr	d0, [x9, #944]
   41484:	ldr	d1, [x10, #952]
   41488:	mov	x8, x0
   4148c:	mov	w0, wzr
   41490:	str	x8, [x19, #8]
   41494:	str	d0, [x19]
   41498:	str	d1, [x19, #16]
   4149c:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   414a0:	mov	w8, #0x10                  	// #16
   414a4:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   414a8:	ldr	x10, [x10, #3776]
   414ac:	add	x10, x10, x9, lsl #5
   414b0:	ldr	w11, [x10, #24]
   414b4:	cmp	w11, #0x1
   414b8:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   414bc:	ldrb	w11, [x10, #4]
   414c0:	cmp	w11, #0x1
   414c4:	b.ne	42cd4 <aarch64_match_operands_constraint@@Base+0x1fbc>  // b.any
   414c8:	ldrb	w11, [x10]
   414cc:	mov	w10, #0x38                  	// #56
   414d0:	madd	x10, x23, x10, x21
   414d4:	ldr	x10, [x10, #24]
   414d8:	udiv	w8, w8, w11
   414dc:	sub	w22, w8, #0x1
   414e0:	cmp	x10, w22, sxtw
   414e4:	b.gt	4153c <aarch64_match_operands_constraint@@Base+0x824>
   414e8:	tbnz	x10, #63, 4153c <aarch64_match_operands_constraint@@Base+0x824>
   414ec:	cmp	w2, #0x22
   414f0:	mov	w0, #0x1                   	// #1
   414f4:	b.ne	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.any
   414f8:	cmp	w9, #0x6
   414fc:	b.ne	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.any
   41500:	mov	w8, #0x38                  	// #56
   41504:	madd	x8, x23, x8, x21
   41508:	ldr	w8, [x8, #16]
   4150c:	cmp	w8, #0x10
   41510:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   41514:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41518:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4151c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41520:	add	x0, x0, #0x270
   41524:	add	x1, x1, #0x79d
   41528:	mov	w2, #0x5                   	// #5
   4152c:	bl	35a50 <dcgettext@plt>
   41530:	adrp	x10, 59000 <fields@@Base+0x1b4>
   41534:	ldr	d0, [x10, #936]
   41538:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   4153c:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41540:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41544:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41548:	add	x0, x0, #0x270
   4154c:	add	x1, x1, #0x703
   41550:	mov	w2, #0x5                   	// #5
   41554:	bl	35a50 <dcgettext@plt>
   41558:	mov	x8, x0
   4155c:	mov	w9, #0x6                   	// #6
   41560:	mov	w0, wzr
   41564:	str	x8, [x19, #8]
   41568:	stp	w9, w20, [x19]
   4156c:	stp	wzr, w22, [x19, #16]
   41570:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41574:	ldrb	w8, [x3, #123]
   41578:	cmp	w2, #0x25
   4157c:	and	w8, w8, #0x7
   41580:	b.eq	415e0 <aarch64_match_operands_constraint@@Base+0x8c8>  // b.none
   41584:	cmp	w2, #0x24
   41588:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   4158c:	sub	w9, w8, #0x1
   41590:	cmp	w9, #0x4
   41594:	b.cs	42dd4 <aarch64_match_operands_constraint@@Base+0x20bc>  // b.hs, b.nlast
   41598:	cmp	w8, #0x1
   4159c:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   415a0:	b	415ec <aarch64_match_operands_constraint@@Base+0x8d4>
   415a4:	mov	w11, #0x38                  	// #56
   415a8:	madd	x11, x23, x11, x21
   415ac:	ldrb	w11, [x11, #28]
   415b0:	tbz	w11, #1, 418fc <aarch64_match_operands_constraint@@Base+0xbe4>
   415b4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   415b8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   415bc:	add	x0, x0, #0x270
   415c0:	add	x1, x1, #0xd8
   415c4:	mov	w2, #0x5                   	// #5
   415c8:	bl	35a50 <dcgettext@plt>
   415cc:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   415d0:	mov	x8, x0
   415d4:	mov	w0, wzr
   415d8:	mov	w9, #0x2                   	// #2
   415dc:	b	424d4 <aarch64_match_operands_constraint@@Base+0x17bc>
   415e0:	sub	w9, w8, #0x1
   415e4:	cmp	w9, #0x4
   415e8:	b.cs	42d34 <aarch64_match_operands_constraint@@Base+0x201c>  // b.hs, b.nlast
   415ec:	mov	w9, #0x38                  	// #56
   415f0:	madd	x9, x23, x9, x21
   415f4:	ldrh	w9, [x9, #16]
   415f8:	ubfx	w9, w9, #5, #3
   415fc:	cmp	w8, w9
   41600:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   41604:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41608:	mov	w0, wzr
   4160c:	mov	w9, #0x8                   	// #8
   41610:	str	xzr, [x19, #8]
   41614:	stp	w9, w20, [x19]
   41618:	str	w8, [x19, #16]
   4161c:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41620:	cmp	w20, #0x1
   41624:	b.ne	42cf4 <aarch64_match_operands_constraint@@Base+0x1fdc>  // b.any
   41628:	ldr	w11, [x21]
   4162c:	mov	w12, #0x30                  	// #48
   41630:	mul	x11, x11, x12
   41634:	ldr	w11, [x8, x11]
   41638:	cmp	w11, #0xc
   4163c:	b.ne	42cf4 <aarch64_match_operands_constraint@@Base+0x1fdc>  // b.any
   41640:	ldr	x11, [x21, #16]
   41644:	ldrb	w12, [x21, #104]
   41648:	ldr	w11, [x11, #12]
   4164c:	tbnz	w12, #1, 417c0 <aarch64_match_operands_constraint@@Base+0xaa8>
   41650:	tbz	w11, #2, 417f8 <aarch64_match_operands_constraint@@Base+0xae0>
   41654:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41658:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   4165c:	add	x0, x0, #0x270
   41660:	add	x1, x1, #0x4b
   41664:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   41668:	mov	w8, #0x38                  	// #56
   4166c:	madd	x8, x23, x8, x21
   41670:	ldr	w8, [x8, #32]
   41674:	sub	w10, w8, #0x2
   41678:	cmp	w10, #0x4
   4167c:	b.cc	41770 <aarch64_match_operands_constraint@@Base+0xa58>  // b.lo, b.ul, b.last
   41680:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41684:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41688:	add	x0, x0, #0x270
   4168c:	add	x1, x1, #0x6d0
   41690:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41694:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41698:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4169c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   416a0:	add	x0, x0, #0x270
   416a4:	add	x1, x1, #0x782
   416a8:	mov	w2, #0x5                   	// #5
   416ac:	bl	35a50 <dcgettext@plt>
   416b0:	mov	x8, x0
   416b4:	mov	w9, #0x6                   	// #6
   416b8:	mov	w0, wzr
   416bc:	str	x8, [x19, #8]
   416c0:	stp	w9, w20, [x19]
   416c4:	stp	w24, w25, [x19, #16]
   416c8:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   416cc:	mov	w8, #0x38                  	// #56
   416d0:	madd	x8, x23, x8, x21
   416d4:	ldrh	w8, [x8, #16]
   416d8:	ldrb	w9, [x3, #123]
   416dc:	ubfx	w8, w8, #5, #3
   416e0:	and	w9, w9, #0x7
   416e4:	cmp	w9, w8
   416e8:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   416ec:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   416f0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   416f4:	add	x0, x0, #0x270
   416f8:	add	x1, x1, #0xb3
   416fc:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41700:	sub	w9, w9, w8
   41704:	mov	w8, #0x38                  	// #56
   41708:	madd	x8, x23, x8, x21
   4170c:	ldr	x8, [x8, #24]
   41710:	mov	w10, #0xffffffff            	// #-1
   41714:	lsl	w9, w10, w9
   41718:	mvn	w21, w9
   4171c:	cmp	x8, w21, sxtw
   41720:	b.gt	418b4 <aarch64_match_operands_constraint@@Base+0xb9c>
   41724:	tbz	x8, #63, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   41728:	b	418b4 <aarch64_match_operands_constraint@@Base+0xb9c>
   4172c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41730:	adrp	x1, 5c000 <fields@@Base+0x31b4>
   41734:	add	x0, x0, #0x270
   41738:	add	x1, x1, #0xfa4
   4173c:	mov	w2, #0x5                   	// #5
   41740:	bl	35a50 <dcgettext@plt>
   41744:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41748:	mov	x8, x0
   4174c:	mov	w9, #0x2                   	// #2
   41750:	mov	w0, wzr
   41754:	stp	w9, w22, [x19]
   41758:	b	424d8 <aarch64_match_operands_constraint@@Base+0x17c0>
   4175c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41760:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41764:	add	x0, x0, #0x270
   41768:	add	x1, x1, #0x628
   4176c:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41770:	cmp	w8, #0x2
   41774:	b.ne	41784 <aarch64_match_operands_constraint@@Base+0xa6c>  // b.any
   41778:	ldr	w8, [x3, #16]
   4177c:	cmp	w8, #0x42
   41780:	b.ne	41ae4 <aarch64_match_operands_constraint@@Base+0xdcc>  // b.any
   41784:	mov	w8, #0x38                  	// #56
   41788:	madd	x8, x23, x8, x21
   4178c:	ldr	x8, [x8, #40]
   41790:	cmp	w9, #0x1
   41794:	mov	w9, #0x3f                  	// #63
   41798:	mov	w10, #0x1f                  	// #31
   4179c:	csel	w21, w10, w9, eq  // eq = none
   417a0:	cmp	x8, x21
   417a4:	b.ls	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.plast
   417a8:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   417ac:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   417b0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   417b4:	add	x0, x0, #0x270
   417b8:	add	x1, x1, #0x18e
   417bc:	b	418c8 <aarch64_match_operands_constraint@@Base+0xbb0>
   417c0:	tbnz	w11, #2, 417f8 <aarch64_match_operands_constraint@@Base+0xae0>
   417c4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   417c8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   417cc:	add	x0, x0, #0x270
   417d0:	add	x1, x1, #0x37
   417d4:	mov	w2, #0x5                   	// #5
   417d8:	bl	35a50 <dcgettext@plt>
   417dc:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   417e0:	adrp	x9, 59000 <fields@@Base+0x1b4>
   417e4:	ldr	d0, [x9, #984]
   417e8:	mov	x8, x0
   417ec:	mov	w0, wzr
   417f0:	str	d0, [x19]
   417f4:	b	424d8 <aarch64_match_operands_constraint@@Base+0x17c0>
   417f8:	sub	w9, w9, #0x3
   417fc:	cmp	w9, #0x1
   41800:	b.hi	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.pmore
   41804:	mov	w9, #0x30                  	// #48
   41808:	madd	x8, x10, x9, x8
   4180c:	ldrb	w8, [x8, #16]
   41810:	tbz	w8, #4, 41828 <aarch64_match_operands_constraint@@Base+0xb10>
   41814:	mov	w8, #0x38                  	// #56
   41818:	madd	x8, x23, x8, x21
   4181c:	ldr	w8, [x8, #16]
   41820:	cmp	w8, #0x1f
   41824:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   41828:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4182c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41830:	add	x0, x0, #0x270
   41834:	add	x1, x1, #0x5c
   41838:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   4183c:	cmp	x11, #0x37
   41840:	b.ne	418ec <aarch64_match_operands_constraint@@Base+0xbd4>  // b.any
   41844:	mov	w11, #0x38                  	// #56
   41848:	madd	x11, x23, x11, x21
   4184c:	ldrb	w11, [x11, #28]
   41850:	and	w12, w11, #0x6
   41854:	cmp	w12, #0x2
   41858:	b.eq	415b4 <aarch64_match_operands_constraint@@Base+0x89c>  // b.none
   4185c:	b	418fc <aarch64_match_operands_constraint@@Base+0xbe4>
   41860:	cmp	w8, #0x5
   41864:	b.eq	41450 <aarch64_match_operands_constraint@@Base+0x738>  // b.none
   41868:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   4186c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   41870:	ldr	x8, [x8, #3776]
   41874:	add	x10, x8, x9, lsl #5
   41878:	ldr	w10, [x10, #24]
   4187c:	cmp	w10, #0x1
   41880:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41884:	lsl	x9, x9, #5
   41888:	mov	w10, #0x38                  	// #56
   4188c:	ldrb	w9, [x8, x9]
   41890:	madd	x8, x23, x10, x21
   41894:	ldr	x8, [x8, #24]
   41898:	mov	w10, #0x40                  	// #64
   4189c:	udiv	w9, w10, w9
   418a0:	sub	w21, w9, #0x1
   418a4:	tbnz	x8, #63, 418b4 <aarch64_match_operands_constraint@@Base+0xb9c>
   418a8:	sxtw	x9, w21
   418ac:	cmp	x8, x9
   418b0:	b.le	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   418b4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   418b8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   418bc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   418c0:	add	x0, x0, #0x270
   418c4:	add	x1, x1, #0x703
   418c8:	mov	w2, #0x5                   	// #5
   418cc:	bl	35a50 <dcgettext@plt>
   418d0:	mov	x8, x0
   418d4:	mov	w9, #0x6                   	// #6
   418d8:	mov	w0, wzr
   418dc:	str	x8, [x19, #8]
   418e0:	stp	w9, w20, [x19]
   418e4:	stp	wzr, w21, [x19, #16]
   418e8:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   418ec:	mov	w11, #0x38                  	// #56
   418f0:	madd	x11, x23, x11, x21
   418f4:	ldrb	w11, [x11, #28]
   418f8:	tbnz	w11, #1, 42e34 <aarch64_match_operands_constraint@@Base+0x211c>
   418fc:	sub	w14, w2, #0x4f
   41900:	cmp	w14, #0x44
   41904:	mov	w0, #0x1                   	// #1
   41908:	b.hi	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.pmore
   4190c:	adrp	x17, 58000 <xexit@@Base+0x1dd4>
   41910:	add	x17, x17, #0xa6c
   41914:	adr	x18, 41938 <aarch64_match_operands_constraint@@Base+0xc20>
   41918:	ldrh	w1, [x17, x14, lsl #1]
   4191c:	add	x18, x18, x1, lsl #2
   41920:	mov	w15, wzr
   41924:	mov	w12, #0x20                  	// #32
   41928:	mov	w16, #0x3f                  	// #63
   4192c:	mov	w13, #0xfffffff8            	// #-8
   41930:	mov	w14, #0x7                   	// #7
   41934:	br	x18
   41938:	mov	w12, #0x1100                	// #4352
   4193c:	mov	w9, #0x38                  	// #56
   41940:	madd	x9, x23, x9, x21
   41944:	ldr	w13, [x9, #24]
   41948:	cbz	w13, 42d94 <aarch64_match_operands_constraint@@Base+0x207c>
   4194c:	tbz	w11, #2, 42db4 <aarch64_match_operands_constraint@@Base+0x209c>
   41950:	mov	w11, #0x30                  	// #48
   41954:	madd	x8, x10, x11, x8
   41958:	ldr	w8, [x8, #16]
   4195c:	tbz	w8, #8, 41984 <aarch64_match_operands_constraint@@Base+0xc6c>
   41960:	add	x9, x9, #0x10
   41964:	ldr	w9, [x9, #4]
   41968:	cmp	w9, #0x1f
   4196c:	b.ne	41984 <aarch64_match_operands_constraint@@Base+0xc6c>  // b.any
   41970:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41974:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41978:	add	x0, x0, #0x270
   4197c:	add	x1, x1, #0x26a
   41980:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41984:	mov	w9, #0x38                  	// #56
   41988:	madd	x9, x23, x9, x21
   4198c:	ldr	w9, [x9, #32]
   41990:	lsr	w9, w12, w9
   41994:	tbz	w9, #0, 424ac <aarch64_match_operands_constraint@@Base+0x1794>
   41998:	mov	w9, #0x38                  	// #56
   4199c:	madd	x9, x23, x9, x21
   419a0:	ldr	x9, [x9, #40]
   419a4:	ubfx	x8, x8, #5, #3
   419a8:	cmp	x9, x8
   419ac:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   419b0:	b	424ac <aarch64_match_operands_constraint@@Base+0x1794>
   419b4:	cmp	w10, #0x5
   419b8:	b.ne	41a78 <aarch64_match_operands_constraint@@Base+0xd60>  // b.any
   419bc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   419c0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   419c4:	add	x0, x0, #0x270
   419c8:	add	x1, x1, #0x659
   419cc:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   419d0:	mov	w9, #0x30                  	// #48
   419d4:	madd	x9, x10, x9, x8
   419d8:	ldr	w11, [x9, #20]
   419dc:	cbz	w11, 42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>
   419e0:	mov	w12, #0x30                  	// #48
   419e4:	madd	x8, x10, x12, x8
   419e8:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   419ec:	ldr	x10, [x10, #3944]
   419f0:	mov	w9, wzr
   419f4:	add	x8, x8, #0x18
   419f8:	add	x11, x10, w11, uxtw #3
   419fc:	ldr	w12, [x11, #4]
   41a00:	ldr	w11, [x8], #4
   41a04:	add	w9, w12, w9
   41a08:	cbnz	w11, 419f8 <aarch64_match_operands_constraint@@Base+0xce0>
   41a0c:	sub	w8, w9, #0x1
   41a10:	cmp	w8, #0x1f
   41a14:	b.cs	42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>  // b.hs, b.nlast
   41a18:	mov	w0, #0x1                   	// #1
   41a1c:	lsl	x9, x0, x8
   41a20:	cmp	x9, x22
   41a24:	b.le	41a34 <aarch64_match_operands_constraint@@Base+0xd1c>
   41a28:	neg	x9, x9
   41a2c:	cmp	x22, x9
   41a30:	b.ge	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.tcont
   41a34:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41a38:	lsl	w8, w0, w8
   41a3c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41a40:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41a44:	add	x0, x0, #0x270
   41a48:	add	x1, x1, #0x782
   41a4c:	mov	w2, #0x5                   	// #5
   41a50:	sub	w21, w8, #0x1
   41a54:	neg	w22, w8
   41a58:	bl	35a50 <dcgettext@plt>
   41a5c:	mov	x8, x0
   41a60:	mov	w9, #0x6                   	// #6
   41a64:	mov	w0, wzr
   41a68:	str	x8, [x19, #8]
   41a6c:	stp	w9, w20, [x19]
   41a70:	stp	w22, w21, [x19, #16]
   41a74:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41a78:	cmp	w10, #0x5
   41a7c:	b.eq	41a90 <aarch64_match_operands_constraint@@Base+0xd78>  // b.none
   41a80:	mov	w8, #0x38                  	// #56
   41a84:	madd	x8, x23, x8, x21
   41a88:	ldrb	w8, [x8, #36]
   41a8c:	tbz	w8, #0, 42e54 <aarch64_match_operands_constraint@@Base+0x213c>
   41a90:	mov	w8, #0x38                  	// #56
   41a94:	madd	x8, x23, x8, x21
   41a98:	ldr	x8, [x8, #40]
   41a9c:	cmp	x8, #0x5
   41aa0:	b.cc	41c00 <aarch64_match_operands_constraint@@Base+0xee8>  // b.lo, b.ul, b.last
   41aa4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41aa8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41aac:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41ab0:	add	x0, x0, #0x270
   41ab4:	add	x1, x1, #0x18e
   41ab8:	mov	w2, #0x5                   	// #5
   41abc:	bl	35a50 <dcgettext@plt>
   41ac0:	adrp	x10, 59000 <fields@@Base+0x1b4>
   41ac4:	ldr	d0, [x10, #928]
   41ac8:	mov	x8, x0
   41acc:	mov	w0, wzr
   41ad0:	mov	w9, #0x6                   	// #6
   41ad4:	stp	w9, w20, [x19]
   41ad8:	str	x8, [x19, #8]
   41adc:	str	d0, [x19, #16]
   41ae0:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41ae4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41ae8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41aec:	add	x0, x0, #0x270
   41af0:	add	x1, x1, #0x6e8
   41af4:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41af8:	cmp	x22, #0xb3
   41afc:	mov	w0, #0x1                   	// #1
   41b00:	b.gt	41cb8 <aarch64_match_operands_constraint@@Base+0xfa0>
   41b04:	cbz	x22, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41b08:	cmp	x22, #0x5a
   41b0c:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41b10:	b	41cc8 <aarch64_match_operands_constraint@@Base+0xfb0>
   41b14:	cmp	w2, #0xb2
   41b18:	mov	w8, #0x1                   	// #1
   41b1c:	cinc	w8, w8, eq  // eq = none
   41b20:	sub	w8, w20, w8
   41b24:	mov	w9, #0x38                  	// #56
   41b28:	umaddl	x8, w8, w9, x21
   41b2c:	ldrb	w8, [x8, #4]
   41b30:	add	x9, x11, x8, lsl #5
   41b34:	ldr	w9, [x9, #24]
   41b38:	cmp	w9, #0x1
   41b3c:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41b40:	lsl	x8, x8, #5
   41b44:	b	420d8 <aarch64_match_operands_constraint@@Base+0x13c0>
   41b48:	mov	w8, #0x38                  	// #56
   41b4c:	madd	x8, x23, x8, x21
   41b50:	ldurb	w8, [x8, #-52]
   41b54:	add	x9, x11, x8, lsl #5
   41b58:	ldr	w9, [x9, #24]
   41b5c:	cmp	w9, #0x1
   41b60:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41b64:	lsl	x8, x8, #5
   41b68:	b	4213c <aarch64_match_operands_constraint@@Base+0x1424>
   41b6c:	mov	w8, #0x38                  	// #56
   41b70:	madd	x8, x23, x8, x21
   41b74:	ldrb	w8, [x8, #24]
   41b78:	tbnz	w8, #0, 41cdc <aarch64_match_operands_constraint@@Base+0xfc4>
   41b7c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41b80:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41b84:	add	x0, x0, #0x270
   41b88:	add	x1, x1, #0x452
   41b8c:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41b90:	cmp	x22, #0x5a
   41b94:	mov	w0, #0x1                   	// #1
   41b98:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41b9c:	cmp	x22, #0x10e
   41ba0:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41ba4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41ba8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41bac:	add	x0, x0, #0x270
   41bb0:	add	x1, x1, #0x3e2
   41bb4:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41bb8:	mov	w9, #0x38                  	// #56
   41bbc:	mov	w11, #0x30                  	// #48
   41bc0:	madd	x9, x23, x9, x21
   41bc4:	madd	x11, x10, x11, x8
   41bc8:	ldrb	w11, [x11, #16]
   41bcc:	ldr	x9, [x9, #16]
   41bd0:	tbz	w11, #3, 42764 <aarch64_match_operands_constraint@@Base+0x1a4c>
   41bd4:	tst	x9, #0x3
   41bd8:	b.eq	42760 <aarch64_match_operands_constraint@@Base+0x1a48>  // b.none
   41bdc:	mov	w0, wzr
   41be0:	cbz	x19, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41be4:	mov	w8, #0x7                   	// #7
   41be8:	str	xzr, [x19, #8]
   41bec:	mov	w9, #0x4                   	// #4
   41bf0:	b	42824 <aarch64_match_operands_constraint@@Base+0x1b0c>
   41bf4:	mov	w15, wzr
   41bf8:	mov	w16, #0x1f                  	// #31
   41bfc:	b	41d54 <aarch64_match_operands_constraint@@Base+0x103c>
   41c00:	cmp	w9, #0x2
   41c04:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   41c08:	cmp	w10, #0xd
   41c0c:	b.hi	41c24 <aarch64_match_operands_constraint@@Base+0xf0c>  // b.pmore
   41c10:	mov	w0, #0x1                   	// #1
   41c14:	lsl	w8, w0, w10
   41c18:	mov	w9, #0x2220                	// #8736
   41c1c:	tst	w8, w9
   41c20:	b.ne	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.any
   41c24:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41c28:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41c2c:	add	x0, x0, #0x270
   41c30:	add	x1, x1, #0x6bc
   41c34:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41c38:	ldrb	w8, [x21, #4]
   41c3c:	add	x9, x11, x8, lsl #5
   41c40:	ldr	w9, [x9, #24]
   41c44:	cmp	w9, #0x1
   41c48:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41c4c:	ldr	w9, [x3, #20]
   41c50:	lsl	x8, x8, #5
   41c54:	ldrb	w1, [x11, x8]
   41c58:	mov	x2, xzr
   41c5c:	cmp	w9, #0x2a
   41c60:	cinv	x0, x22, eq  // eq = none
   41c64:	bl	354a0 <aarch64_logical_immediate_p@plt>
   41c68:	cbnz	w0, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   41c6c:	b	427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>
   41c70:	cbz	x22, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   41c74:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41c78:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41c7c:	add	x0, x0, #0x270
   41c80:	add	x1, x1, #0x3a2
   41c84:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41c88:	cbz	w9, 4273c <aarch64_match_operands_constraint@@Base+0x1a24>
   41c8c:	cmp	w9, #0x22
   41c90:	b.eq	4270c <aarch64_match_operands_constraint@@Base+0x19f4>  // b.none
   41c94:	cmp	w9, #0x21
   41c98:	b.ne	42f14 <aarch64_match_operands_constraint@@Base+0x21fc>  // b.any
   41c9c:	mov	w8, #0x38                  	// #56
   41ca0:	madd	x8, x23, x8, x21
   41ca4:	ldr	w8, [x8, #32]
   41ca8:	cmp	w8, #0x5
   41cac:	b.ne	42728 <aarch64_match_operands_constraint@@Base+0x1a10>  // b.any
   41cb0:	mov	w24, #0x5                   	// #5
   41cb4:	b	42898 <aarch64_match_operands_constraint@@Base+0x1b80>
   41cb8:	cmp	x22, #0xb4
   41cbc:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41cc0:	cmp	x22, #0x10e
   41cc4:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41cc8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41ccc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41cd0:	add	x0, x0, #0x270
   41cd4:	add	x1, x1, #0x3ba
   41cd8:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41cdc:	cmp	x22, #0x100
   41ce0:	b.cs	427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>  // b.hs, b.nlast
   41ce4:	mov	w8, #0x38                  	// #56
   41ce8:	madd	x8, x23, x8, x21
   41cec:	ldr	w8, [x8, #32]
   41cf0:	cbnz	w8, 42728 <aarch64_match_operands_constraint@@Base+0x1a10>
   41cf4:	b	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   41cf8:	mov	w8, #0x38                  	// #56
   41cfc:	madd	x8, x23, x8, x21
   41d00:	ldr	w8, [x8, #20]
   41d04:	add	w8, w8, #0x100
   41d08:	cmp	w8, #0x200
   41d0c:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   41d10:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41d14:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41d18:	adrp	x1, 60000 <fields@@Base+0x71b4>
   41d1c:	add	x0, x0, #0x270
   41d20:	add	x1, x1, #0xd95
   41d24:	mov	w2, #0x5                   	// #5
   41d28:	bl	35a50 <dcgettext@plt>
   41d2c:	mov	x8, x0
   41d30:	mov	w9, #0x6                   	// #6
   41d34:	movi	d0, #0xffffffff00
   41d38:	mov	w0, wzr
   41d3c:	str	x8, [x19, #8]
   41d40:	stp	w9, w20, [x19]
   41d44:	str	d0, [x19, #16]
   41d48:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41d4c:	mov	w15, #0xfffffff8            	// #-8
   41d50:	mov	w16, #0x7                   	// #7
   41d54:	mov	w9, #0x38                  	// #56
   41d58:	madd	x9, x23, x9, x21
   41d5c:	ldr	w12, [x9, #24]
   41d60:	cbnz	w12, 42df4 <aarch64_match_operands_constraint@@Base+0x20dc>
   41d64:	tbz	w11, #2, 42e14 <aarch64_match_operands_constraint@@Base+0x20fc>
   41d68:	mov	w11, #0x38                  	// #56
   41d6c:	madd	x11, x23, x11, x21
   41d70:	ldrb	w11, [x11, #36]
   41d74:	tst	w11, #0x3
   41d78:	b.ne	424ac <aarch64_match_operands_constraint@@Base+0x1794>  // b.any
   41d7c:	mov	w11, #0x30                  	// #48
   41d80:	madd	x8, x10, x11, x8
   41d84:	ldr	w8, [x8, #16]
   41d88:	add	x9, x9, #0x10
   41d8c:	ldrsw	x9, [x9, #4]
   41d90:	ubfx	x8, x8, #5, #3
   41d94:	lsl	w21, w15, w8
   41d98:	cmp	w21, w9
   41d9c:	lsl	x22, x16, x8
   41da0:	b.gt	425e4 <aarch64_match_operands_constraint@@Base+0x18cc>
   41da4:	cmp	x22, x9
   41da8:	b.lt	425e4 <aarch64_match_operands_constraint@@Base+0x18cc>  // b.tstop
   41dac:	mov	w10, #0x1                   	// #1
   41db0:	lsl	w8, w10, w8
   41db4:	mov	w10, w8
   41db8:	sub	x10, x10, #0x1
   41dbc:	tst	x10, x9
   41dc0:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   41dc4:	mov	w0, wzr
   41dc8:	cbz	x19, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41dcc:	mov	w9, #0x7                   	// #7
   41dd0:	b	41610 <aarch64_match_operands_constraint@@Base+0x8f8>
   41dd4:	mov	w8, #0x38                  	// #56
   41dd8:	madd	x8, x23, x8, x21
   41ddc:	ldrb	w8, [x8, #24]
   41de0:	tbz	w8, #0, 42f74 <aarch64_match_operands_constraint@@Base+0x225c>
   41de4:	mov	w8, #0x3f000000            	// #1056964608
   41de8:	cmp	x22, x8
   41dec:	mov	w0, #0x1                   	// #1
   41df0:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41df4:	mov	w8, #0x40000000            	// #1073741824
   41df8:	cmp	x22, x8
   41dfc:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41e00:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41e04:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41e08:	add	x0, x0, #0x270
   41e0c:	add	x1, x1, #0x534
   41e10:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41e14:	cmp	w20, #0x1
   41e18:	b.ne	42f34 <aarch64_match_operands_constraint@@Base+0x221c>  // b.any
   41e1c:	ldr	w8, [x21]
   41e20:	cmp	w8, #0x1
   41e24:	b.ne	42f34 <aarch64_match_operands_constraint@@Base+0x221c>  // b.any
   41e28:	mov	w8, #0x38                  	// #56
   41e2c:	madd	x8, x23, x8, x21
   41e30:	ldr	w8, [x8, #32]
   41e34:	cmp	w8, #0x5
   41e38:	b.ne	42988 <aarch64_match_operands_constraint@@Base+0x1c70>  // b.any
   41e3c:	ldrb	w8, [x21, #4]
   41e40:	add	x9, x11, x8, lsl #5
   41e44:	ldr	w9, [x9, #24]
   41e48:	cmp	w9, #0x1
   41e4c:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41e50:	mov	w9, #0x38                  	// #56
   41e54:	madd	x9, x23, x9, x21
   41e58:	ldr	x9, [x9, #40]
   41e5c:	tst	x9, #0xf
   41e60:	b.eq	429b0 <aarch64_match_operands_constraint@@Base+0x1c98>  // b.none
   41e64:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41e68:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41e6c:	add	x0, x0, #0x270
   41e70:	add	x1, x1, #0x302
   41e74:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   41e78:	cmp	x22, #0x3f1
   41e7c:	b.cc	427dc <aarch64_match_operands_constraint@@Base+0x1ac4>  // b.lo, b.ul, b.last
   41e80:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41e84:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41e88:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41e8c:	add	x0, x0, #0x270
   41e90:	add	x1, x1, #0x782
   41e94:	mov	w2, #0x5                   	// #5
   41e98:	bl	35a50 <dcgettext@plt>
   41e9c:	adrp	x10, 59000 <fields@@Base+0x1b4>
   41ea0:	ldr	d0, [x10, #1008]
   41ea4:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   41ea8:	mov	w8, #0x38                  	// #56
   41eac:	madd	x8, x23, x8, x21
   41eb0:	ldrb	w8, [x8, #24]
   41eb4:	tbz	w8, #0, 42f94 <aarch64_match_operands_constraint@@Base+0x227c>
   41eb8:	mov	w0, #0x1                   	// #1
   41ebc:	cbz	x22, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   41ec0:	mov	w8, #0x3f800000            	// #1065353216
   41ec4:	cmp	x22, x8
   41ec8:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41ecc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41ed0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41ed4:	add	x0, x0, #0x270
   41ed8:	add	x1, x1, #0x55c
   41edc:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   41ee0:	mov	w8, #0x38                  	// #56
   41ee4:	madd	x8, x23, x8, x21
   41ee8:	ldr	w8, [x8, #32]
   41eec:	cmp	w8, #0xe
   41ef0:	b.ne	42fb4 <aarch64_match_operands_constraint@@Base+0x229c>  // b.any
   41ef4:	mov	w8, #0x38                  	// #56
   41ef8:	madd	x8, x23, x8, x21
   41efc:	ldr	x8, [x8, #40]
   41f00:	sub	x8, x8, #0x1
   41f04:	cmp	x8, #0x10
   41f08:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   41f0c:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   41f10:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   41f14:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   41f18:	add	x0, x0, #0x270
   41f1c:	add	x1, x1, #0x792
   41f20:	mov	w2, #0x5                   	// #5
   41f24:	bl	35a50 <dcgettext@plt>
   41f28:	adrp	x10, 59000 <fields@@Base+0x1b4>
   41f2c:	ldr	d0, [x10, #960]
   41f30:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   41f34:	ldrb	w8, [x21, #4]
   41f38:	add	x9, x11, x8, lsl #5
   41f3c:	ldr	w9, [x9, #24]
   41f40:	cmp	w9, #0x1
   41f44:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41f48:	cmp	w20, #0x1
   41f4c:	b.ne	42fd4 <aarch64_match_operands_constraint@@Base+0x22bc>  // b.any
   41f50:	ldr	w9, [x3, #20]
   41f54:	lsl	x8, x8, #5
   41f58:	ldrb	w1, [x11, x8]
   41f5c:	cmp	w9, #0x23
   41f60:	b.eq	42858 <aarch64_match_operands_constraint@@Base+0x1b40>  // b.none
   41f64:	cmp	w9, #0x24
   41f68:	b.eq	41f78 <aarch64_match_operands_constraint@@Base+0x1260>  // b.none
   41f6c:	cmp	w9, #0x25
   41f70:	b.ne	42ff4 <aarch64_match_operands_constraint@@Base+0x22dc>  // b.any
   41f74:	mvn	x22, x22
   41f78:	cmp	w1, #0x4
   41f7c:	b.ne	41f94 <aarch64_match_operands_constraint@@Base+0x127c>  // b.any
   41f80:	lsr	x8, x22, #32
   41f84:	add	w8, w8, #0x1
   41f88:	cmp	w8, #0x1
   41f8c:	b.hi	42adc <aarch64_match_operands_constraint@@Base+0x1dc4>  // b.pmore
   41f90:	and	x22, x22, #0xffffffff
   41f94:	cmp	x22, #0x10, lsl #12
   41f98:	mov	w0, #0x1                   	// #1
   41f9c:	b.cc	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.lo, b.ul, b.last
   41fa0:	and	x8, x22, #0xffff0000
   41fa4:	cmp	x8, x22
   41fa8:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   41fac:	cmp	w1, #0x4
   41fb0:	and	x8, x22, #0xffff00000000
   41fb4:	b.eq	42acc <aarch64_match_operands_constraint@@Base+0x1db4>  // b.none
   41fb8:	cmp	x8, x22
   41fbc:	b.eq	42acc <aarch64_match_operands_constraint@@Base+0x1db4>  // b.none
   41fc0:	tst	x22, #0xffffffffffff
   41fc4:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   41fc8:	b	42adc <aarch64_match_operands_constraint@@Base+0x1dc4>
   41fcc:	ldrb	w8, [x21, #4]
   41fd0:	add	x9, x11, x8, lsl #5
   41fd4:	ldr	w9, [x9, #24]
   41fd8:	cmp	w9, #0x1
   41fdc:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   41fe0:	lsl	x8, x8, #5
   41fe4:	ldrb	w1, [x11, x8]
   41fe8:	mvn	x0, x22
   41fec:	mov	x2, xzr
   41ff0:	bl	354a0 <aarch64_logical_immediate_p@plt>
   41ff4:	cbnz	w0, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   41ff8:	b	427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>
   41ffc:	cmp	w20, #0x2
   42000:	b.ne	43014 <aarch64_match_operands_constraint@@Base+0x22fc>  // b.any
   42004:	ldrb	w8, [x21, #60]
   42008:	add	x9, x11, x8, lsl #5
   4200c:	ldr	w9, [x9, #24]
   42010:	cmp	w9, #0x1
   42014:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42018:	lsl	x8, x8, #5
   4201c:	ldr	w8, [x11, x8]
   42020:	lsl	w8, w8, #3
   42024:	and	x8, x8, #0xf8
   42028:	cmp	x22, x8
   4202c:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   42030:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42034:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42038:	add	x0, x0, #0x270
   4203c:	add	x1, x1, #0x186
   42040:	mov	w2, #0x5                   	// #5
   42044:	bl	35a50 <dcgettext@plt>
   42048:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   4204c:	adrp	x9, 59000 <fields@@Base+0x1b4>
   42050:	ldr	d0, [x9, #1000]
   42054:	b	417e8 <aarch64_match_operands_constraint@@Base+0xad0>
   42058:	cmp	w20, #0x2
   4205c:	b.lt	42eb4 <aarch64_match_operands_constraint@@Base+0x219c>  // b.tstop
   42060:	sub	x8, x23, #0x1
   42064:	mov	w10, #0x38                  	// #56
   42068:	mul	x10, x8, x10
   4206c:	ldr	w10, [x21, x10]
   42070:	cmp	w10, #0x37
   42074:	b.ne	42eb4 <aarch64_match_operands_constraint@@Base+0x219c>  // b.any
   42078:	ldr	w10, [x21]
   4207c:	cmp	w10, #0x1
   42080:	b.ne	42eb4 <aarch64_match_operands_constraint@@Base+0x219c>  // b.any
   42084:	cmp	w13, #0x2
   42088:	b.ne	43034 <aarch64_match_operands_constraint@@Base+0x231c>  // b.any
   4208c:	mov	w10, #0x38                  	// #56
   42090:	madd	x8, x8, x10, x21
   42094:	add	x9, x11, x9, lsl #5
   42098:	ldr	x8, [x8, #16]
   4209c:	ldrb	w9, [x9, #4]
   420a0:	add	x10, x8, x22
   420a4:	cmp	x10, x9
   420a8:	b.le	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   420ac:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   420b0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   420b4:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   420b8:	add	x0, x0, #0x270
   420bc:	add	x1, x1, #0x782
   420c0:	mov	w2, #0x5                   	// #5
   420c4:	sub	w21, w9, w8
   420c8:	b	4210c <aarch64_match_operands_constraint@@Base+0x13f4>
   420cc:	cmp	w13, #0x1
   420d0:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   420d4:	lsl	x8, x9, #5
   420d8:	ldr	w8, [x11, x8]
   420dc:	cmp	x22, #0x1
   420e0:	lsl	w8, w8, #3
   420e4:	and	x21, x8, #0x7f8
   420e8:	b.lt	420f4 <aarch64_match_operands_constraint@@Base+0x13dc>  // b.tstop
   420ec:	cmp	x22, x21
   420f0:	b.le	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   420f4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   420f8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   420fc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42100:	add	x0, x0, #0x270
   42104:	add	x1, x1, #0x782
   42108:	mov	w2, #0x5                   	// #5
   4210c:	bl	35a50 <dcgettext@plt>
   42110:	mov	x8, x0
   42114:	mov	w9, #0x6                   	// #6
   42118:	str	x8, [x19, #8]
   4211c:	mov	w8, #0x1                   	// #1
   42120:	mov	w0, wzr
   42124:	stp	w9, w20, [x19]
   42128:	stp	w8, w21, [x19, #16]
   4212c:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42130:	cmp	w13, #0x1
   42134:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42138:	lsl	x8, x9, #5
   4213c:	ldr	w8, [x11, x8]
   42140:	lsl	w8, w8, #3
   42144:	and	x8, x8, #0x7f8
   42148:	sub	x21, x8, #0x1
   4214c:	tbnz	x22, #63, 42158 <aarch64_match_operands_constraint@@Base+0x1440>
   42150:	cmp	x22, x21
   42154:	b.le	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42158:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   4215c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42160:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42164:	b	412a0 <aarch64_match_operands_constraint@@Base+0x588>
   42168:	mov	x12, #0xffffffffffffff80    	// #-128
   4216c:	mov	w8, #0x38                  	// #56
   42170:	madd	x8, x23, x8, x21
   42174:	ldr	w8, [x8, #32]
   42178:	cmp	w8, #0x5
   4217c:	b.ne	42f54 <aarch64_match_operands_constraint@@Base+0x223c>  // b.any
   42180:	ldrb	w8, [x21, #4]
   42184:	add	x9, x11, x8, lsl #5
   42188:	ldr	w9, [x9, #24]
   4218c:	cmp	w9, #0x1
   42190:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42194:	lsl	x8, x8, #5
   42198:	ldr	w8, [x11, x8]
   4219c:	mov	w9, #0x38                  	// #56
   421a0:	madd	x9, x23, x9, x21
   421a4:	ldr	x9, [x9, #40]
   421a8:	and	w10, w8, #0xff
   421ac:	cmp	w10, #0x1
   421b0:	b.ne	421cc <aarch64_match_operands_constraint@@Base+0x14b4>  // b.any
   421b4:	cbz	w9, 42a60 <aarch64_match_operands_constraint@@Base+0x1d48>
   421b8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   421bc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   421c0:	add	x0, x0, #0x270
   421c4:	add	x1, x1, #0x474
   421c8:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   421cc:	tst	w9, #0xfffffff7
   421d0:	b.eq	427fc <aarch64_match_operands_constraint@@Base+0x1ae4>  // b.none
   421d4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   421d8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   421dc:	add	x0, x0, #0x270
   421e0:	add	x1, x1, #0x4a0
   421e4:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   421e8:	mov	w8, #0x38                  	// #56
   421ec:	madd	x8, x23, x8, x21
   421f0:	ldr	w8, [x8, #32]
   421f4:	cmp	w8, #0x5
   421f8:	b.ne	42728 <aarch64_match_operands_constraint@@Base+0x1a10>  // b.any
   421fc:	mov	w8, #0x38                  	// #56
   42200:	madd	x8, x23, x8, x21
   42204:	ldr	x8, [x8, #40]
   42208:	cbz	x8, 42214 <aarch64_match_operands_constraint@@Base+0x14fc>
   4220c:	cmp	x8, #0xc
   42210:	b.ne	429e0 <aarch64_match_operands_constraint@@Base+0x1cc8>  // b.any
   42214:	cmp	x22, #0x1, lsl #12
   42218:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   4221c:	b	427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>
   42220:	ldrb	w8, [x21, #4]
   42224:	add	x9, x11, x8, lsl #5
   42228:	ldr	w9, [x9, #24]
   4222c:	cmp	w9, #0x1
   42230:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42234:	lsl	x8, x8, #5
   42238:	ldrb	w21, [x11, x8]
   4223c:	mov	x0, x22
   42240:	mov	x2, xzr
   42244:	mov	w1, w21
   42248:	bl	354a0 <aarch64_logical_immediate_p@plt>
   4224c:	cbz	w0, 427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>
   42250:	lsl	x8, x21, #2
   42254:	mov	x9, #0xffffffffffffffff    	// #-1
   42258:	lsl	x9, x9, x8
   4225c:	lsl	x8, x9, x8
   42260:	tst	x8, x22
   42264:	b.eq	42274 <aarch64_match_operands_constraint@@Base+0x155c>  // b.none
   42268:	orr	x8, x8, x22
   4226c:	cmp	x8, x22
   42270:	b.ne	42b88 <aarch64_match_operands_constraint@@Base+0x1e70>  // b.any
   42274:	cmp	w21, #0x5
   42278:	b.cs	42a38 <aarch64_match_operands_constraint@@Base+0x1d20>  // b.hs, b.nlast
   4227c:	cmp	w21, #0x3
   42280:	b.cs	42a44 <aarch64_match_operands_constraint@@Base+0x1d2c>  // b.hs, b.nlast
   42284:	cmp	w21, #0x1
   42288:	b.eq	42b88 <aarch64_match_operands_constraint@@Base+0x1e70>  // b.none
   4228c:	b	42b58 <aarch64_match_operands_constraint@@Base+0x1e40>
   42290:	mov	w8, #0x38                  	// #56
   42294:	madd	x8, x23, x8, x21
   42298:	ldrb	w8, [x8, #24]
   4229c:	tbz	w8, #0, 43054 <aarch64_match_operands_constraint@@Base+0x233c>
   422a0:	orr	x8, x22, #0x800000
   422a4:	mov	w9, #0x3f800000            	// #1065353216
   422a8:	cmp	x8, x9
   422ac:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   422b0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   422b4:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   422b8:	add	x0, x0, #0x270
   422bc:	add	x1, x1, #0x50c
   422c0:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   422c4:	mov	w12, #0x1000                	// #4096
   422c8:	b	42470 <aarch64_match_operands_constraint@@Base+0x1758>
   422cc:	mov	w13, #0xffffff00            	// #-256
   422d0:	mov	w14, #0xff                  	// #255
   422d4:	b	4237c <aarch64_match_operands_constraint@@Base+0x1664>
   422d8:	mov	w8, #0x38                  	// #56
   422dc:	madd	x8, x23, x8, x21
   422e0:	ldr	w8, [x8, #20]
   422e4:	mov	w10, #0x1ff1                	// #8177
   422e8:	add	w9, w8, #0x1, lsl #12
   422ec:	cmp	w9, w10
   422f0:	b.cc	4265c <aarch64_match_operands_constraint@@Base+0x1944>  // b.lo, b.ul, b.last
   422f4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   422f8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   422fc:	adrp	x1, 60000 <fields@@Base+0x71b4>
   42300:	add	x0, x0, #0x270
   42304:	add	x1, x1, #0xd95
   42308:	mov	w2, #0x5                   	// #5
   4230c:	bl	35a50 <dcgettext@plt>
   42310:	adrp	x10, 59000 <fields@@Base+0x1b4>
   42314:	ldr	d0, [x10, #1016]
   42318:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   4231c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   42320:	ldr	x8, [x8, #3776]
   42324:	add	x10, x8, x9, lsl #5
   42328:	ldr	w10, [x10, #24]
   4232c:	cmp	w10, #0x1
   42330:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42334:	lsl	x9, x9, #5
   42338:	mov	w10, #0x38                  	// #56
   4233c:	ldrb	w8, [x8, x9]
   42340:	madd	x10, x23, x10, x21
   42344:	ldrsw	x9, [x10, #20]
   42348:	lsl	x10, x8, #12
   4234c:	sub	x21, x10, x8
   42350:	tbnz	w9, #31, 4235c <aarch64_match_operands_constraint@@Base+0x1644>
   42354:	cmp	x21, x9
   42358:	b.ge	425bc <aarch64_match_operands_constraint@@Base+0x18a4>  // b.tcont
   4235c:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   42360:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42364:	adrp	x1, 60000 <fields@@Base+0x71b4>
   42368:	add	x0, x0, #0x270
   4236c:	add	x1, x1, #0xd95
   42370:	b	418c8 <aarch64_match_operands_constraint@@Base+0xbb0>
   42374:	mov	w13, #0xffffffe0            	// #-32
   42378:	mov	w14, #0x1f                  	// #31
   4237c:	mov	w9, #0x38                  	// #56
   42380:	madd	x9, x23, x9, x21
   42384:	ldr	w12, [x9, #24]
   42388:	cbnz	w12, 42e74 <aarch64_match_operands_constraint@@Base+0x215c>
   4238c:	tbz	w11, #2, 42e94 <aarch64_match_operands_constraint@@Base+0x217c>
   42390:	mov	w11, #0x38                  	// #56
   42394:	add	x9, x9, #0x10
   42398:	madd	x11, x23, x11, x21
   4239c:	ldrsw	x9, [x9, #4]
   423a0:	ldrb	w11, [x11, #36]
   423a4:	cbz	w9, 423b0 <aarch64_match_operands_constraint@@Base+0x1698>
   423a8:	tbz	w11, #0, 424ac <aarch64_match_operands_constraint@@Base+0x1794>
   423ac:	b	423b4 <aarch64_match_operands_constraint@@Base+0x169c>
   423b0:	tbz	w11, #0, 423c8 <aarch64_match_operands_constraint@@Base+0x16b0>
   423b4:	mov	w11, #0x38                  	// #56
   423b8:	madd	x11, x23, x11, x21
   423bc:	ldr	w11, [x11, #32]
   423c0:	cmp	w11, #0xf
   423c4:	b.ne	424ac <aarch64_match_operands_constraint@@Base+0x1794>  // b.any
   423c8:	mov	w11, #0x30                  	// #48
   423cc:	madd	x8, x10, x11, x8
   423d0:	ldr	w8, [x8, #16]
   423d4:	ubfx	x8, x8, #5, #3
   423d8:	add	x8, x8, #0x1
   423dc:	mul	w21, w8, w13
   423e0:	cmp	w21, w9
   423e4:	mul	x22, x8, x14
   423e8:	b.le	425b4 <aarch64_match_operands_constraint@@Base+0x189c>
   423ec:	b	425e4 <aarch64_match_operands_constraint@@Base+0x18cc>
   423f0:	mov	w8, #0x38                  	// #56
   423f4:	madd	x8, x23, x8, x21
   423f8:	ldr	w8, [x8, #20]
   423fc:	mov	w10, #0x1ff9                	// #8185
   42400:	add	w9, w8, #0x1, lsl #12
   42404:	cmp	w9, w10
   42408:	b.cc	42808 <aarch64_match_operands_constraint@@Base+0x1af0>  // b.lo, b.ul, b.last
   4240c:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   42410:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42414:	adrp	x1, 60000 <fields@@Base+0x71b4>
   42418:	add	x0, x0, #0x270
   4241c:	add	x1, x1, #0xd95
   42420:	mov	w2, #0x5                   	// #5
   42424:	bl	35a50 <dcgettext@plt>
   42428:	adrp	x10, 59000 <fields@@Base+0x1b4>
   4242c:	ldr	d0, [x10, #1032]
   42430:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   42434:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   42438:	ldr	x8, [x8, #3776]
   4243c:	add	x10, x8, x9, lsl #5
   42440:	ldr	w10, [x10, #24]
   42444:	cmp	w10, #0x1
   42448:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   4244c:	mov	w10, #0x38                  	// #56
   42450:	madd	x10, x23, x10, x21
   42454:	ldr	w10, [x10, #20]
   42458:	cmp	w10, #0xff
   4245c:	b.ls	42830 <aarch64_match_operands_constraint@@Base+0x1b18>  // b.plast
   42460:	cmn	w10, #0x101
   42464:	b.hi	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.pmore
   42468:	b	42844 <aarch64_match_operands_constraint@@Base+0x1b2c>
   4246c:	mov	w12, #0x100                 	// #256
   42470:	mov	w8, #0x38                  	// #56
   42474:	madd	x8, x23, x8, x21
   42478:	ldr	w8, [x8, #24]
   4247c:	cbz	w8, 42ed4 <aarch64_match_operands_constraint@@Base+0x21bc>
   42480:	tbz	w11, #2, 42ef4 <aarch64_match_operands_constraint@@Base+0x21dc>
   42484:	mov	w8, #0x38                  	// #56
   42488:	madd	x8, x23, x8, x21
   4248c:	ldr	w8, [x8, #32]
   42490:	lsr	w8, w12, w8
   42494:	tbz	w8, #0, 424ac <aarch64_match_operands_constraint@@Base+0x1794>
   42498:	mov	w8, #0x38                  	// #56
   4249c:	madd	x8, x23, x8, x21
   424a0:	ldr	x8, [x8, #40]
   424a4:	cmp	x8, #0x4
   424a8:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   424ac:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   424b0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   424b4:	add	x0, x0, #0x270
   424b8:	add	x1, x1, #0x1fc
   424bc:	mov	w2, #0x5                   	// #5
   424c0:	bl	35a50 <dcgettext@plt>
   424c4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   424c8:	mov	x8, x0
   424cc:	mov	w0, wzr
   424d0:	mov	w9, #0x9                   	// #9
   424d4:	stp	w9, w20, [x19]
   424d8:	str	x8, [x19, #8]
   424dc:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   424e0:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   424e4:	ldr	x10, [x10, #3776]
   424e8:	add	x8, x10, x9, lsl #5
   424ec:	ldr	w8, [x8, #24]
   424f0:	cmp	w8, #0x1
   424f4:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   424f8:	mov	w8, #0x38                  	// #56
   424fc:	madd	x8, x23, x8, x21
   42500:	ldr	x8, [x8, #40]
   42504:	cbz	x8, 4253c <aarch64_match_operands_constraint@@Base+0x1824>
   42508:	lsl	x9, x9, #5
   4250c:	ldrb	w9, [x10, x9]
   42510:	cmp	w9, #0x11
   42514:	b.cs	43134 <aarch64_match_operands_constraint@@Base+0x241c>  // b.hs, b.nlast
   42518:	sub	w9, w9, #0x1
   4251c:	mov	w10, #0x808b                	// #32907
   42520:	lsr	x10, x10, x9
   42524:	tbz	w10, #0, 43154 <aarch64_match_operands_constraint@@Base+0x243c>
   42528:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   4252c:	add	x10, x10, #0x8eb
   42530:	ldrb	w9, [x10, x9]
   42534:	cmp	x8, x9
   42538:	b.ne	4299c <aarch64_match_operands_constraint@@Base+0x1c84>  // b.any
   4253c:	mov	w8, #0x38                  	// #56
   42540:	madd	x8, x23, x8, x21
   42544:	ldr	w8, [x8, #32]
   42548:	sub	w8, w8, #0x5
   4254c:	cmp	w8, #0x9
   42550:	b.cs	42560 <aarch64_match_operands_constraint@@Base+0x1848>  // b.hs, b.nlast
   42554:	mov	w9, #0x189                 	// #393
   42558:	lsr	w8, w9, w8
   4255c:	tbnz	w8, #0, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42560:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42564:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42568:	add	x0, x0, #0x270
   4256c:	add	x1, x1, #0x19b
   42570:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42574:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   42578:	ldr	x8, [x8, #3776]
   4257c:	add	x10, x8, x9, lsl #5
   42580:	ldr	w10, [x10, #24]
   42584:	cmp	w10, #0x1
   42588:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   4258c:	lsl	x9, x9, #5
   42590:	mov	w10, #0x38                  	// #56
   42594:	ldrb	w8, [x8, x9]
   42598:	madd	x9, x23, x10, x21
   4259c:	ldrsw	x9, [x9, #20]
   425a0:	neg	w21, w8, lsl #6
   425a4:	lsl	x10, x8, #6
   425a8:	cmp	w21, w9
   425ac:	sub	x22, x10, x8
   425b0:	b.gt	425e4 <aarch64_match_operands_constraint@@Base+0x18cc>
   425b4:	cmp	x22, x9
   425b8:	b.lt	425e4 <aarch64_match_operands_constraint@@Base+0x18cc>  // b.tstop
   425bc:	sdiv	x10, x9, x8
   425c0:	msub	x9, x10, x8, x9
   425c4:	cbz	x9, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   425c8:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   425cc:	mov	w9, #0x7                   	// #7
   425d0:	mov	w0, wzr
   425d4:	str	xzr, [x19, #8]
   425d8:	stp	w9, w20, [x19]
   425dc:	str	w8, [x19, #16]
   425e0:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   425e4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   425e8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   425ec:	adrp	x1, 60000 <fields@@Base+0x71b4>
   425f0:	add	x0, x0, #0x270
   425f4:	add	x1, x1, #0xd95
   425f8:	mov	w2, #0x5                   	// #5
   425fc:	bl	35a50 <dcgettext@plt>
   42600:	mov	x8, x0
   42604:	mov	w9, #0x6                   	// #6
   42608:	mov	w0, wzr
   4260c:	str	x8, [x19, #8]
   42610:	stp	w9, w20, [x19]
   42614:	stp	w21, w22, [x19, #16]
   42618:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   4261c:	mov	w8, #0x38                  	// #56
   42620:	madd	x8, x23, x8, x21
   42624:	ldr	w8, [x8, #20]
   42628:	add	w9, w8, #0x400
   4262c:	cmp	w9, #0x7f1
   42630:	b.cc	4265c <aarch64_match_operands_constraint@@Base+0x1944>  // b.lo, b.ul, b.last
   42634:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   42638:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4263c:	adrp	x1, 60000 <fields@@Base+0x71b4>
   42640:	add	x0, x0, #0x270
   42644:	add	x1, x1, #0xd95
   42648:	mov	w2, #0x5                   	// #5
   4264c:	bl	35a50 <dcgettext@plt>
   42650:	adrp	x10, 59000 <fields@@Base+0x1b4>
   42654:	ldr	d0, [x10, #1024]
   42658:	b	41ac8 <aarch64_match_operands_constraint@@Base+0xdb0>
   4265c:	tst	w8, #0xf
   42660:	b.ne	427e4 <aarch64_match_operands_constraint@@Base+0x1acc>  // b.any
   42664:	b	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42668:	cmp	w20, #0x1
   4266c:	b.ne	43094 <aarch64_match_operands_constraint@@Base+0x237c>  // b.any
   42670:	mov	w8, #0x38                  	// #56
   42674:	madd	x8, x23, x8, x21
   42678:	ldr	w9, [x8, #24]
   4267c:	add	x8, x8, #0x10
   42680:	cbz	w9, 4286c <aarch64_match_operands_constraint@@Base+0x1b54>
   42684:	ldr	w8, [x8, #4]
   42688:	cmp	w8, #0x1f
   4268c:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   42690:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42694:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42698:	add	x0, x0, #0x270
   4269c:	add	x1, x1, #0x150
   426a0:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   426a4:	mov	w9, #0x38                  	// #56
   426a8:	madd	x9, x23, x9, x21
   426ac:	ldr	w9, [x9, #24]
   426b0:	cbz	w9, 430b4 <aarch64_match_operands_constraint@@Base+0x239c>
   426b4:	tbz	w11, #2, 430d4 <aarch64_match_operands_constraint@@Base+0x23bc>
   426b8:	mov	w9, #0x30                  	// #48
   426bc:	madd	x8, x10, x9, x8
   426c0:	ldrb	w8, [x8, #17]
   426c4:	tbnz	w8, #0, 430f4 <aarch64_match_operands_constraint@@Base+0x23dc>
   426c8:	mov	w8, #0x38                  	// #56
   426cc:	madd	x8, x23, x8, x21
   426d0:	ldr	w8, [x8, #32]
   426d4:	cmp	w8, #0x5
   426d8:	b.ne	43114 <aarch64_match_operands_constraint@@Base+0x23fc>  // b.any
   426dc:	mov	w8, #0x38                  	// #56
   426e0:	madd	x8, x23, x8, x21
   426e4:	ldrb	w8, [x8, #36]
   426e8:	tbz	w8, #0, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   426ec:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   426f0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   426f4:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   426f8:	add	x0, x0, #0x246
   426fc:	add	x1, x1, #0x50e
   42700:	add	x3, x3, #0xf06
   42704:	mov	w2, #0x77a                 	// #1914
   42708:	bl	35b30 <__assert_fail@plt>
   4270c:	mov	w8, #0x38                  	// #56
   42710:	madd	x8, x23, x8, x21
   42714:	ldr	w8, [x8, #32]
   42718:	cmp	w8, #0x1
   4271c:	b.ne	42728 <aarch64_match_operands_constraint@@Base+0x1a10>  // b.any
   42720:	mov	w24, #0x1                   	// #1
   42724:	b	42898 <aarch64_match_operands_constraint@@Base+0x1b80>
   42728:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4272c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42730:	add	x0, x0, #0x270
   42734:	add	x1, x1, #0x2a1
   42738:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   4273c:	mov	w8, #0x38                  	// #56
   42740:	madd	x8, x23, x8, x21
   42744:	ldr	w8, [x8, #32]
   42748:	cbz	w8, 42894 <aarch64_match_operands_constraint@@Base+0x1b7c>
   4274c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42750:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42754:	add	x0, x0, #0x270
   42758:	add	x1, x1, #0x402
   4275c:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42760:	asr	x9, x9, #2
   42764:	mov	w11, #0x30                  	// #48
   42768:	madd	x11, x10, x11, x8
   4276c:	ldr	w12, [x11, #20]
   42770:	cbz	w12, 42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>
   42774:	mov	w13, #0x30                  	// #48
   42778:	madd	x8, x10, x13, x8
   4277c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   42780:	ldr	x10, [x10, #3944]
   42784:	mov	w11, wzr
   42788:	add	x8, x8, #0x18
   4278c:	add	x12, x10, w12, uxtw #3
   42790:	ldr	w13, [x12, #4]
   42794:	ldr	w12, [x8], #4
   42798:	add	w11, w13, w11
   4279c:	cbnz	w12, 4278c <aarch64_match_operands_constraint@@Base+0x1a74>
   427a0:	sub	w8, w11, #0x1
   427a4:	cmp	w8, #0x1f
   427a8:	b.cs	42c54 <aarch64_match_operands_constraint@@Base+0x1f3c>  // b.hs, b.nlast
   427ac:	mov	w0, #0x1                   	// #1
   427b0:	lsl	x8, x0, x8
   427b4:	cmp	x8, x9
   427b8:	b.le	427c8 <aarch64_match_operands_constraint@@Base+0x1ab0>
   427bc:	neg	x8, x8
   427c0:	cmp	x9, x8
   427c4:	b.ge	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.tcont
   427c8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   427cc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   427d0:	add	x0, x0, #0x270
   427d4:	add	x1, x1, #0x1b9
   427d8:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   427dc:	tst	x22, #0xf
   427e0:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   427e4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   427e8:	mov	w0, wzr
   427ec:	mov	w8, #0x7                   	// #7
   427f0:	str	xzr, [x19, #8]
   427f4:	mov	w9, #0x10                  	// #16
   427f8:	b	42824 <aarch64_match_operands_constraint@@Base+0x1b0c>
   427fc:	cbz	w9, 42a58 <aarch64_match_operands_constraint@@Base+0x1d40>
   42800:	and	x9, x9, #0xffffffff
   42804:	b	42a64 <aarch64_match_operands_constraint@@Base+0x1d4c>
   42808:	tst	w8, #0x7
   4280c:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   42810:	mov	w0, wzr
   42814:	cbz	x19, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42818:	mov	w8, #0x7                   	// #7
   4281c:	mov	w9, #0x8                   	// #8
   42820:	str	xzr, [x19, #8]
   42824:	stp	w8, w20, [x19]
   42828:	str	w9, [x19, #16]
   4282c:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42830:	lsl	x9, x9, #5
   42834:	ldrb	w8, [x8, x9]
   42838:	udiv	w9, w10, w8
   4283c:	msub	w8, w9, w8, w10
   42840:	cbnz	w8, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42844:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42848:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   4284c:	add	x0, x0, #0x270
   42850:	add	x1, x1, #0x12a
   42854:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42858:	mov	x0, x22
   4285c:	mov	x2, xzr
   42860:	bl	354a0 <aarch64_logical_immediate_p@plt>
   42864:	cbnz	w0, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42868:	b	42adc <aarch64_match_operands_constraint@@Base+0x1dc4>
   4286c:	ldr	w9, [x3, #32]
   42870:	cmp	w9, #0x25
   42874:	b.ne	42af0 <aarch64_match_operands_constraint@@Base+0x1dd8>  // b.any
   42878:	ldr	x9, [x3, #120]
   4287c:	mov	w10, #0x1000000             	// #16777216
   42880:	and	x9, x9, #0x7000000
   42884:	cmp	x9, x10
   42888:	b.ne	42b9c <aarch64_match_operands_constraint@@Base+0x1e84>  // b.any
   4288c:	mov	w9, #0x1                   	// #1
   42890:	b	42ba4 <aarch64_match_operands_constraint@@Base+0x1e8c>
   42894:	mov	w24, wzr
   42898:	cmp	w20, #0x1
   4289c:	b.ne	43074 <aarch64_match_operands_constraint@@Base+0x235c>  // b.any
   428a0:	ldrb	w8, [x21, #4]
   428a4:	add	x9, x11, x8, lsl #5
   428a8:	ldr	w9, [x9, #24]
   428ac:	cmp	w9, #0x1
   428b0:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   428b4:	lsl	x8, x8, #5
   428b8:	ldrsw	x20, [x11, x8]
   428bc:	and	w8, w20, #0xff
   428c0:	cmp	w8, #0x8
   428c4:	b.ne	428e8 <aarch64_match_operands_constraint@@Base+0x1bd0>  // b.any
   428c8:	mov	x0, x22
   428cc:	bl	357e0 <aarch64_shrink_expanded_imm8@plt>
   428d0:	tbz	w0, #31, 42924 <aarch64_match_operands_constraint@@Base+0x1c0c>
   428d4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   428d8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   428dc:	add	x0, x0, #0x270
   428e0:	add	x1, x1, #0x419
   428e4:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   428e8:	add	x8, x22, #0x80
   428ec:	cmp	x8, #0x180
   428f0:	b.cc	42924 <aarch64_match_operands_constraint@@Base+0x1c0c>  // b.lo, b.ul, b.last
   428f4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   428f8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   428fc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42900:	add	x0, x0, #0x270
   42904:	add	x1, x1, #0x782
   42908:	mov	w2, #0x5                   	// #5
   4290c:	bl	35a50 <dcgettext@plt>
   42910:	adrp	x9, 59000 <fields@@Base+0x1b4>
   42914:	adrp	x10, 59000 <fields@@Base+0x1b4>
   42918:	ldr	d0, [x9, #968]
   4291c:	ldr	d1, [x10, #976]
   42920:	b	41488 <aarch64_match_operands_constraint@@Base+0x770>
   42924:	cbz	w24, 42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>
   42928:	cmp	w24, #0x1
   4292c:	b.eq	42b24 <aarch64_match_operands_constraint@@Base+0x1e0c>  // b.none
   42930:	cmp	w24, #0x5
   42934:	b.ne	42988 <aarch64_match_operands_constraint@@Base+0x1c70>  // b.any
   42938:	mov	w8, #0x38                  	// #56
   4293c:	madd	x8, x23, x8, x21
   42940:	ldr	x8, [x8, #40]
   42944:	lsl	w9, w20, #3
   42948:	and	x9, x9, #0x7f8
   4294c:	sub	x20, x9, #0x8
   42950:	cmp	x8, x20
   42954:	b.gt	429f4 <aarch64_match_operands_constraint@@Base+0x1cdc>
   42958:	tbnz	x8, #63, 429f4 <aarch64_match_operands_constraint@@Base+0x1cdc>
   4295c:	tst	x8, #0x7
   42960:	b.eq	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.none
   42964:	mov	w0, wzr
   42968:	cbz	x19, 42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   4296c:	adrp	x8, 59000 <fields@@Base+0x1b4>
   42970:	ldr	d0, [x8, #992]
   42974:	mov	w8, #0x8                   	// #8
   42978:	str	xzr, [x19, #8]
   4297c:	str	w8, [x19, #16]
   42980:	str	d0, [x19]
   42984:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42988:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4298c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42990:	add	x0, x0, #0x270
   42994:	add	x1, x1, #0x2a1
   42998:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   4299c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   429a0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   429a4:	add	x0, x0, #0x270
   429a8:	add	x1, x1, #0x186
   429ac:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   429b0:	lsl	x8, x8, #5
   429b4:	ldr	w8, [x11, x8]
   429b8:	lsl	w8, w8, #3
   429bc:	and	x8, x8, #0x7f8
   429c0:	sub	x20, x8, #0x10
   429c4:	tbnz	x9, #63, 429f4 <aarch64_match_operands_constraint@@Base+0x1cdc>
   429c8:	cmp	x9, x20
   429cc:	b.gt	429f4 <aarch64_match_operands_constraint@@Base+0x1cdc>
   429d0:	tbnz	x22, #63, 42c20 <aarch64_match_operands_constraint@@Base+0x1f08>
   429d4:	cmp	x22, #0x10, lsl #12
   429d8:	b.lt	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.tstop
   429dc:	b	42adc <aarch64_match_operands_constraint@@Base+0x1dc4>
   429e0:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   429e4:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   429e8:	add	x0, x0, #0x270
   429ec:	add	x1, x1, #0x2b8
   429f0:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   429f4:	cbz	x19, 42a30 <aarch64_match_operands_constraint@@Base+0x1d18>
   429f8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   429fc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42a00:	add	x0, x0, #0x270
   42a04:	add	x1, x1, #0x18e
   42a08:	mov	w2, #0x5                   	// #5
   42a0c:	bl	35a50 <dcgettext@plt>
   42a10:	adrp	x9, 59000 <fields@@Base+0x1b4>
   42a14:	ldr	d0, [x9, #968]
   42a18:	mov	x8, x0
   42a1c:	mov	w0, wzr
   42a20:	str	x8, [x19, #8]
   42a24:	str	d0, [x19]
   42a28:	stp	wzr, w20, [x19, #16]
   42a2c:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42a30:	mov	w0, wzr
   42a34:	b	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>
   42a38:	lsr	x8, x22, #32
   42a3c:	cmp	w22, w8
   42a40:	b.ne	42b68 <aarch64_match_operands_constraint@@Base+0x1e50>  // b.any
   42a44:	eor	w8, w22, w22, lsr #16
   42a48:	tst	x8, #0xffff
   42a4c:	b.eq	42b58 <aarch64_match_operands_constraint@@Base+0x1e40>  // b.none
   42a50:	sxtw	x22, w22
   42a54:	b	42b68 <aarch64_match_operands_constraint@@Base+0x1e50>
   42a58:	tst	x22, #0xff
   42a5c:	b.eq	42c08 <aarch64_match_operands_constraint@@Base+0x1ef0>  // b.none
   42a60:	mov	x9, xzr
   42a64:	lsl	w8, w8, #2
   42a68:	and	x8, x8, #0x3fc
   42a6c:	mov	x10, #0xffffffffffffffff    	// #-1
   42a70:	lsl	x10, x10, x8
   42a74:	lsl	x8, x10, x8
   42a78:	mvn	x8, x8
   42a7c:	lsr	x8, x8, x9
   42a80:	bics	xzr, x22, x8
   42a84:	b.eq	42a94 <aarch64_match_operands_constraint@@Base+0x1d7c>  // b.none
   42a88:	orn	x9, x22, x8
   42a8c:	cmp	x9, x22
   42a90:	b.ne	42ab8 <aarch64_match_operands_constraint@@Base+0x1da0>  // b.any
   42a94:	sub	x9, x22, x12
   42a98:	and	x8, x8, x9
   42a9c:	cmp	x8, #0x100
   42aa0:	b.cc	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.lo, b.ul, b.last
   42aa4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42aa8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42aac:	add	x0, x0, #0x270
   42ab0:	add	x1, x1, #0x4df
   42ab4:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42ab8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42abc:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42ac0:	add	x0, x0, #0x270
   42ac4:	add	x1, x1, #0x4bc
   42ac8:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42acc:	cmp	x8, x22
   42ad0:	b.ne	42adc <aarch64_match_operands_constraint@@Base+0x1dc4>  // b.any
   42ad4:	cmp	w1, #0x4
   42ad8:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   42adc:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42ae0:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42ae4:	add	x0, x0, #0x270
   42ae8:	add	x1, x1, #0x1b9
   42aec:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   42af0:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   42af4:	ldrb	w9, [x21, #4]
   42af8:	ldr	x10, [x10, #3776]
   42afc:	add	x9, x10, x9, lsl #5
   42b00:	ldr	w10, [x9, #24]
   42b04:	cmp	w10, #0x1
   42b08:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42b0c:	ldrh	w10, [x21, #16]
   42b10:	ldrb	w11, [x9]
   42b14:	ldrb	w9, [x9, #4]
   42b18:	ubfx	w10, w10, #5, #3
   42b1c:	mul	w10, w11, w10
   42b20:	b	42bc8 <aarch64_match_operands_constraint@@Base+0x1eb0>
   42b24:	mov	w8, #0x38                  	// #56
   42b28:	madd	x8, x23, x8, x21
   42b2c:	ldr	x8, [x8, #40]
   42b30:	mov	w0, #0x1                   	// #1
   42b34:	cmp	x8, #0x8
   42b38:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   42b3c:	cmp	x8, #0x10
   42b40:	b.eq	42bdc <aarch64_match_operands_constraint@@Base+0x1ec4>  // b.none
   42b44:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42b48:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42b4c:	add	x0, x0, #0x270
   42b50:	add	x1, x1, #0x435
   42b54:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   42b58:	eor	w8, w22, w22, lsr #8
   42b5c:	tst	x8, #0xff
   42b60:	b.eq	42b88 <aarch64_match_operands_constraint@@Base+0x1e70>  // b.none
   42b64:	sxth	x22, w22
   42b68:	add	x8, x22, #0xff
   42b6c:	cmp	x22, #0x0
   42b70:	csel	x8, x8, x22, lt  // lt = tstop
   42b74:	asr	x8, x8, #8
   42b78:	tst	x22, #0xff
   42b7c:	csel	x8, x8, x22, eq  // eq = none
   42b80:	cmp	x8, w8, sxtb
   42b84:	b.ne	42bd8 <aarch64_match_operands_constraint@@Base+0x1ec0>  // b.any
   42b88:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42b8c:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42b90:	add	x0, x0, #0x270
   42b94:	add	x1, x1, #0x584
   42b98:	b	424bc <aarch64_match_operands_constraint@@Base+0x17a4>
   42b9c:	ldrh	w9, [x21, #16]
   42ba0:	ubfx	w9, w9, #5, #3
   42ba4:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   42ba8:	ldrb	w10, [x21, #4]
   42bac:	ldr	x11, [x11, #3776]
   42bb0:	add	x12, x11, x10, lsl #5
   42bb4:	ldr	w12, [x12, #24]
   42bb8:	cmp	w12, #0x1
   42bbc:	b.ne	42c74 <aarch64_match_operands_constraint@@Base+0x1f5c>  // b.any
   42bc0:	lsl	x10, x10, #5
   42bc4:	ldrb	w10, [x11, x10]
   42bc8:	ldr	w8, [x8, #4]
   42bcc:	mul	w9, w10, w9
   42bd0:	cmp	w9, w8
   42bd4:	b.ne	42bf4 <aarch64_match_operands_constraint@@Base+0x1edc>  // b.any
   42bd8:	mov	w0, #0x1                   	// #1
   42bdc:	ldp	x20, x19, [sp, #64]
   42be0:	ldp	x22, x21, [sp, #48]
   42be4:	ldp	x24, x23, [sp, #32]
   42be8:	ldr	x25, [sp, #16]
   42bec:	ldp	x29, x30, [sp], #80
   42bf0:	ret
   42bf4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42bf8:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42bfc:	add	x0, x0, #0x270
   42c00:	add	x1, x1, #0x168
   42c04:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   42c08:	add	x9, x22, #0xff
   42c0c:	cmp	x22, #0x0
   42c10:	csel	x9, x9, x22, lt  // lt = tstop
   42c14:	asr	x22, x9, #8
   42c18:	mov	w9, #0x8                   	// #8
   42c1c:	b	42a64 <aarch64_match_operands_constraint@@Base+0x1d4c>
   42c20:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   42c24:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   42c28:	add	x0, x0, #0x270
   42c2c:	add	x1, x1, #0x328
   42c30:	b	417d4 <aarch64_match_operands_constraint@@Base+0xabc>
   42c34:	adrp	x0, 5c000 <fields@@Base+0x31b4>
   42c38:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42c3c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42c40:	add	x0, x0, #0xecc
   42c44:	add	x1, x1, #0x50e
   42c48:	add	x3, x3, #0xf06
   42c4c:	mov	w2, #0x5b3                 	// #1459
   42c50:	bl	35b30 <__assert_fail@plt>
   42c54:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   42c58:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   42c5c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   42c60:	add	x0, x0, #0x287
   42c64:	add	x1, x1, #0x40
   42c68:	add	x3, x3, #0x29f
   42c6c:	mov	w2, #0x12e                 	// #302
   42c70:	bl	35b30 <__assert_fail@plt>
   42c74:	adrp	x0, 59000 <fields@@Base+0x1b4>
   42c78:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42c7c:	adrp	x3, 59000 <fields@@Base+0x1b4>
   42c80:	add	x0, x0, #0x737
   42c84:	add	x1, x1, #0x50e
   42c88:	add	x3, x3, #0x767
   42c8c:	mov	w2, #0x30e                 	// #782
   42c90:	bl	35b30 <__assert_fail@plt>
   42c94:	adrp	x0, 59000 <fields@@Base+0x1b4>
   42c98:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42c9c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42ca0:	add	x0, x0, #0xa0d
   42ca4:	add	x1, x1, #0x50e
   42ca8:	add	x3, x3, #0xf06
   42cac:	mov	w2, #0xa47                 	// #2631
   42cb0:	bl	35b30 <__assert_fail@plt>
   42cb4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42cb8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42cbc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42cc0:	add	x0, x0, #0x5cb
   42cc4:	add	x1, x1, #0x50e
   42cc8:	add	x3, x3, #0xf06
   42ccc:	mov	w2, #0xa06                 	// #2566
   42cd0:	bl	35b30 <__assert_fail@plt>
   42cd4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42cd8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42cdc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42ce0:	add	x0, x0, #0x5fb
   42ce4:	add	x1, x1, #0x50e
   42ce8:	add	x3, x3, #0xf06
   42cec:	mov	w2, #0xa2e                 	// #2606
   42cf0:	bl	35b30 <__assert_fail@plt>
   42cf4:	adrp	x0, 5c000 <fields@@Base+0x31b4>
   42cf8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42cfc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42d00:	add	x0, x0, #0xfe2
   42d04:	add	x1, x1, #0x50e
   42d08:	add	x3, x3, #0xf06
   42d0c:	mov	w2, #0x5cf                 	// #1487
   42d10:	bl	35b30 <__assert_fail@plt>
   42d14:	adrp	x0, 59000 <fields@@Base+0x1b4>
   42d18:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42d1c:	adrp	x3, 59000 <fields@@Base+0x1b4>
   42d20:	add	x0, x0, #0x737
   42d24:	add	x1, x1, #0x50e
   42d28:	add	x3, x3, #0x7ab
   42d2c:	mov	w2, #0x315                 	// #789
   42d30:	bl	35b30 <__assert_fail@plt>
   42d34:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42d38:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42d3c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42d40:	add	x0, x0, #0x28c
   42d44:	add	x1, x1, #0x50e
   42d48:	add	x3, x3, #0xf06
   42d4c:	mov	w2, #0x7ea                 	// #2026
   42d50:	bl	35b30 <__assert_fail@plt>
   42d54:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42d58:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42d5c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42d60:	add	x0, x0, #0x7c
   42d64:	add	x1, x1, #0x50e
   42d68:	add	x3, x3, #0xf06
   42d6c:	mov	w2, #0x5fa                 	// #1530
   42d70:	bl	35b30 <__assert_fail@plt>
   42d74:	adrp	x0, 5c000 <fields@@Base+0x31b4>
   42d78:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42d7c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42d80:	add	x0, x0, #0xf8f
   42d84:	add	x1, x1, #0x50e
   42d88:	add	x3, x3, #0xf06
   42d8c:	mov	w2, #0x5bb                 	// #1467
   42d90:	bl	35b30 <__assert_fail@plt>
   42d94:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42d98:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42d9c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42da0:	add	x0, x0, #0x1d1
   42da4:	add	x1, x1, #0x50e
   42da8:	add	x3, x3, #0xf06
   42dac:	mov	w2, #0x78c                 	// #1932
   42db0:	bl	35b30 <__assert_fail@plt>
   42db4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42db8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42dbc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42dc0:	add	x0, x0, #0x1ea
   42dc4:	add	x1, x1, #0x50e
   42dc8:	add	x3, x3, #0xf06
   42dcc:	mov	w2, #0x78d                 	// #1933
   42dd0:	bl	35b30 <__assert_fail@plt>
   42dd4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42dd8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42ddc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42de0:	add	x0, x0, #0x28c
   42de4:	add	x1, x1, #0x50e
   42de8:	add	x3, x3, #0xf06
   42dec:	mov	w2, #0x7df                 	// #2015
   42df0:	bl	35b30 <__assert_fail@plt>
   42df4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42df8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42dfc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42e00:	add	x0, x0, #0x1d0
   42e04:	add	x1, x1, #0x50e
   42e08:	add	x3, x3, #0xf06
   42e0c:	mov	w2, #0x753                 	// #1875
   42e10:	bl	35b30 <__assert_fail@plt>
   42e14:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42e18:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42e1c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42e20:	add	x0, x0, #0x1ea
   42e24:	add	x1, x1, #0x50e
   42e28:	add	x3, x3, #0xf06
   42e2c:	mov	w2, #0x754                 	// #1876
   42e30:	bl	35b30 <__assert_fail@plt>
   42e34:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42e38:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42e3c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42e40:	add	x0, x0, #0x110
   42e44:	add	x1, x1, #0x50e
   42e48:	add	x3, x3, #0xf06
   42e4c:	mov	w2, #0x658                 	// #1624
   42e50:	bl	35b30 <__assert_fail@plt>
   42e54:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42e58:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42e5c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42e60:	add	x0, x0, #0x674
   42e64:	add	x1, x1, #0x50e
   42e68:	add	x3, x3, #0xf06
   42e6c:	mov	w2, #0xa67                 	// #2663
   42e70:	bl	35b30 <__assert_fail@plt>
   42e74:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42e78:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42e7c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42e80:	add	x0, x0, #0x1d0
   42e84:	add	x1, x1, #0x50e
   42e88:	add	x3, x3, #0xf06
   42e8c:	mov	w2, #0x728                 	// #1832
   42e90:	bl	35b30 <__assert_fail@plt>
   42e94:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42e98:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42e9c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42ea0:	add	x0, x0, #0x1ea
   42ea4:	add	x1, x1, #0x50e
   42ea8:	add	x3, x3, #0xf06
   42eac:	mov	w2, #0x729                 	// #1833
   42eb0:	bl	35b30 <__assert_fail@plt>
   42eb4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42eb8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42ebc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42ec0:	add	x0, x0, #0x34d
   42ec4:	add	x1, x1, #0x50e
   42ec8:	add	x3, x3, #0xf06
   42ecc:	mov	w2, #0x899                 	// #2201
   42ed0:	bl	35b30 <__assert_fail@plt>
   42ed4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42ed8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42edc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42ee0:	add	x0, x0, #0x1d1
   42ee4:	add	x1, x1, #0x50e
   42ee8:	add	x3, x3, #0xf06
   42eec:	mov	w2, #0x7b5                 	// #1973
   42ef0:	bl	35b30 <__assert_fail@plt>
   42ef4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42ef8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42efc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42f00:	add	x0, x0, #0x1ea
   42f04:	add	x1, x1, #0x50e
   42f08:	add	x3, x3, #0xf06
   42f0c:	mov	w2, #0x7b6                 	// #1974
   42f10:	bl	35b30 <__assert_fail@plt>
   42f14:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   42f18:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42f1c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42f20:	add	x0, x0, #0x2b4
   42f24:	add	x1, x1, #0x50e
   42f28:	add	x3, x3, #0xf06
   42f2c:	mov	w2, #0x913                 	// #2323
   42f30:	bl	35b30 <__assert_fail@plt>
   42f34:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42f38:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42f3c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42f40:	add	x0, x0, #0x2d5
   42f44:	add	x1, x1, #0x50e
   42f48:	add	x3, x3, #0xf06
   42f4c:	mov	w2, #0x81e                 	// #2078
   42f50:	bl	35b30 <__assert_fail@plt>
   42f54:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42f58:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42f5c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42f60:	add	x0, x0, #0x696
   42f64:	add	x1, x1, #0x50e
   42f68:	add	x3, x3, #0xf06
   42f6c:	mov	w2, #0x96d                 	// #2413
   42f70:	bl	35b30 <__assert_fail@plt>
   42f74:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42f78:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42f7c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42f80:	add	x0, x0, #0x4fc
   42f84:	add	x1, x1, #0x50e
   42f88:	add	x3, x3, #0xf06
   42f8c:	mov	w2, #0x9a9                 	// #2473
   42f90:	bl	35b30 <__assert_fail@plt>
   42f94:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42f98:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42f9c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42fa0:	add	x0, x0, #0x4fc
   42fa4:	add	x1, x1, #0x50e
   42fa8:	add	x3, x3, #0xf06
   42fac:	mov	w2, #0x9b3                 	// #2483
   42fb0:	bl	35b30 <__assert_fail@plt>
   42fb4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   42fb8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42fbc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42fc0:	add	x0, x0, #0x5a5
   42fc4:	add	x1, x1, #0x50e
   42fc8:	add	x3, x3, #0xf06
   42fcc:	mov	w2, #0x9dd                 	// #2525
   42fd0:	bl	35b30 <__assert_fail@plt>
   42fd4:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   42fd8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42fdc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   42fe0:	add	x0, x0, #0x330
   42fe4:	add	x1, x1, #0x50e
   42fe8:	add	x3, x3, #0xf06
   42fec:	mov	w2, #0x844                 	// #2116
   42ff0:	bl	35b30 <__assert_fail@plt>
   42ff4:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   42ff8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   42ffc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43000:	add	x0, x0, #0x2b4
   43004:	add	x1, x1, #0x50e
   43008:	add	x3, x3, #0xf06
   4300c:	mov	w2, #0x85b                 	// #2139
   43010:	bl	35b30 <__assert_fail@plt>
   43014:	adrp	x0, 59000 <fields@@Base+0x1b4>
   43018:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4301c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43020:	add	x0, x0, #0xa19
   43024:	add	x1, x1, #0x50e
   43028:	add	x3, x3, #0xf06
   4302c:	mov	w2, #0x8d8                 	// #2264
   43030:	bl	35b30 <__assert_fail@plt>
   43034:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   43038:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4303c:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   43040:	add	x0, x0, #0x71a
   43044:	add	x1, x1, #0x50e
   43048:	add	x3, x3, #0x754
   4304c:	mov	w2, #0x32a                 	// #810
   43050:	bl	35b30 <__assert_fail@plt>
   43054:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   43058:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4305c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43060:	add	x0, x0, #0x4fc
   43064:	add	x1, x1, #0x50e
   43068:	add	x3, x3, #0xf06
   4306c:	mov	w2, #0x99f                 	// #2463
   43070:	bl	35b30 <__assert_fail@plt>
   43074:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   43078:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4307c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43080:	add	x0, x0, #0x330
   43084:	add	x1, x1, #0x50e
   43088:	add	x3, x3, #0xf06
   4308c:	mov	w2, #0x917                 	// #2327
   43090:	bl	35b30 <__assert_fail@plt>
   43094:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   43098:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4309c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   430a0:	add	x0, x0, #0x330
   430a4:	add	x1, x1, #0x50e
   430a8:	add	x3, x3, #0xf06
   430ac:	mov	w2, #0x6b3                 	// #1715
   430b0:	bl	35b30 <__assert_fail@plt>
   430b4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   430b8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   430bc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   430c0:	add	x0, x0, #0x1d1
   430c4:	add	x1, x1, #0x50e
   430c8:	add	x3, x3, #0xf06
   430cc:	mov	w2, #0x776                 	// #1910
   430d0:	bl	35b30 <__assert_fail@plt>
   430d4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   430d8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   430dc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   430e0:	add	x0, x0, #0x1ea
   430e4:	add	x1, x1, #0x50e
   430e8:	add	x3, x3, #0xf06
   430ec:	mov	w2, #0x777                 	// #1911
   430f0:	bl	35b30 <__assert_fail@plt>
   430f4:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   430f8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   430fc:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43100:	add	x0, x0, #0x214
   43104:	add	x1, x1, #0x50e
   43108:	add	x3, x3, #0xf06
   4310c:	mov	w2, #0x778                 	// #1912
   43110:	bl	35b30 <__assert_fail@plt>
   43114:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   43118:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4311c:	adrp	x3, 5c000 <fields@@Base+0x31b4>
   43120:	add	x0, x0, #0x696
   43124:	add	x1, x1, #0x50e
   43128:	add	x3, x3, #0xf06
   4312c:	mov	w2, #0x779                 	// #1913
   43130:	bl	35b30 <__assert_fail@plt>
   43134:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   43138:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   4313c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   43140:	add	x0, x0, #0x2b4
   43144:	add	x1, x1, #0x40
   43148:	add	x3, x3, #0x183
   4314c:	mov	w2, #0x200                 	// #512
   43150:	bl	35b30 <__assert_fail@plt>
   43154:	adrp	x0, 57000 <xexit@@Base+0xdd4>
   43158:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   4315c:	adrp	x3, 57000 <xexit@@Base+0xdd4>
   43160:	add	x0, x0, #0x1a8
   43164:	add	x1, x1, #0x40
   43168:	add	x3, x3, #0x183
   4316c:	mov	w2, #0x203                 	// #515
   43170:	bl	35b30 <__assert_fail@plt>

0000000000043174 <aarch64_replace_opcode@@Base>:
   43174:	mov	x8, x0
   43178:	ldr	x0, [x0, #8]
   4317c:	str	x1, [x8, #8]
   43180:	ldr	w9, [x1, #32]
   43184:	str	w9, [x8, #24]
   43188:	ldr	w9, [x1, #32]
   4318c:	cbz	w9, 431d8 <aarch64_replace_opcode@@Base+0x64>
   43190:	ldr	w9, [x1, #36]
   43194:	str	w9, [x8, #80]
   43198:	ldr	w9, [x1, #36]
   4319c:	cbz	w9, 431d8 <aarch64_replace_opcode@@Base+0x64>
   431a0:	ldr	w9, [x1, #40]
   431a4:	str	w9, [x8, #136]
   431a8:	ldr	w9, [x1, #40]
   431ac:	cbz	w9, 431d8 <aarch64_replace_opcode@@Base+0x64>
   431b0:	ldr	w9, [x1, #44]
   431b4:	str	w9, [x8, #192]
   431b8:	ldr	w9, [x1, #44]
   431bc:	cbz	w9, 431d8 <aarch64_replace_opcode@@Base+0x64>
   431c0:	ldr	w9, [x1, #48]
   431c4:	str	w9, [x8, #248]
   431c8:	ldr	w9, [x1, #48]
   431cc:	cbz	w9, 431d8 <aarch64_replace_opcode@@Base+0x64>
   431d0:	ldr	w9, [x1, #52]
   431d4:	str	w9, [x8, #304]
   431d8:	ret

00000000000431dc <aarch64_operand_index@@Base>:
   431dc:	ldr	w8, [x0]
   431e0:	cmp	w8, w1
   431e4:	b.ne	431f0 <aarch64_operand_index@@Base+0x14>  // b.any
   431e8:	mov	w0, wzr
   431ec:	ret
   431f0:	cbz	w8, 43268 <aarch64_operand_index@@Base+0x8c>
   431f4:	ldr	w8, [x0, #4]
   431f8:	cmp	w8, w1
   431fc:	b.ne	43208 <aarch64_operand_index@@Base+0x2c>  // b.any
   43200:	mov	w0, #0x1                   	// #1
   43204:	ret
   43208:	cbz	w8, 43268 <aarch64_operand_index@@Base+0x8c>
   4320c:	ldr	w8, [x0, #8]
   43210:	cmp	w8, w1
   43214:	b.ne	43220 <aarch64_operand_index@@Base+0x44>  // b.any
   43218:	mov	w0, #0x2                   	// #2
   4321c:	ret
   43220:	cbz	w8, 43268 <aarch64_operand_index@@Base+0x8c>
   43224:	ldr	w8, [x0, #12]
   43228:	cmp	w8, w1
   4322c:	b.ne	43238 <aarch64_operand_index@@Base+0x5c>  // b.any
   43230:	mov	w0, #0x3                   	// #3
   43234:	ret
   43238:	cbz	w8, 43268 <aarch64_operand_index@@Base+0x8c>
   4323c:	ldr	w8, [x0, #16]
   43240:	cmp	w8, w1
   43244:	b.ne	43250 <aarch64_operand_index@@Base+0x74>  // b.any
   43248:	mov	w0, #0x4                   	// #4
   4324c:	ret
   43250:	cbz	w8, 43268 <aarch64_operand_index@@Base+0x8c>
   43254:	ldr	w8, [x0, #20]
   43258:	cmp	w8, w1
   4325c:	mov	w8, #0x5                   	// #5
   43260:	csinv	w0, w8, wzr, eq  // eq = none
   43264:	ret
   43268:	mov	w0, #0xffffffff            	// #-1
   4326c:	ret

0000000000043270 <aarch64_print_operand@@Base>:
   43270:	sub	sp, sp, #0x70
   43274:	stp	x29, x30, [sp, #16]
   43278:	stp	x28, x27, [sp, #32]
   4327c:	stp	x26, x25, [sp, #48]
   43280:	stp	x24, x23, [sp, #64]
   43284:	stp	x22, x21, [sp, #80]
   43288:	stp	x20, x19, [sp, #96]
   4328c:	add	x29, sp, #0x10
   43290:	ldr	x26, [x29, #96]
   43294:	mov	w9, #0x38                  	// #56
   43298:	mov	x21, x4
   4329c:	mov	x8, x2
   432a0:	mov	x19, x1
   432a4:	mov	x20, x0
   432a8:	smaddl	x2, w5, w9, x4
   432ac:	strb	wzr, [x0]
   432b0:	cbz	x6, 432b8 <aarch64_print_operand@@Base+0x48>
   432b4:	str	wzr, [x6]
   432b8:	ldr	w9, [x2]
   432bc:	sub	w10, w9, #0x1
   432c0:	cmp	w10, #0xce
   432c4:	b.hi	444cc <aarch64_print_operand@@Base+0x125c>  // b.pmore
   432c8:	adrp	x11, 58000 <xexit@@Base+0x1dd4>
   432cc:	add	x11, x11, #0xb0a
   432d0:	adr	x12, 432e4 <aarch64_print_operand@@Base+0x74>
   432d4:	ldrh	w13, [x11, x10, lsl #1]
   432d8:	add	x12, x12, x13, lsl #2
   432dc:	sxtw	x25, w5
   432e0:	br	x12
   432e4:	mov	w8, #0x38                  	// #56
   432e8:	madd	x8, x25, x8, x21
   432ec:	ldr	x3, [x8, #16]
   432f0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   432f4:	add	x2, x2, #0xb08
   432f8:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   432fc:	mov	w8, #0x38                  	// #56
   43300:	madd	x8, x25, x8, x21
   43304:	ldrsw	x8, [x8, #16]
   43308:	adrp	x9, 83000 <aarch64_sys_regs@@Base+0x1438>
   4330c:	add	x9, x9, #0xdc8
   43310:	add	x8, x9, x8, lsl #3
   43314:	ldr	x3, [x8, #256]
   43318:	mov	x0, x20
   4331c:	mov	x1, x19
   43320:	ldp	x20, x19, [sp, #96]
   43324:	ldp	x22, x21, [sp, #80]
   43328:	ldp	x24, x23, [sp, #64]
   4332c:	ldp	x26, x25, [sp, #48]
   43330:	ldp	x28, x27, [sp, #32]
   43334:	ldp	x29, x30, [sp, #16]
   43338:	add	sp, sp, #0x70
   4333c:	b	44880 <aarch64_print_operand@@Base+0x1610>
   43340:	mov	w8, #0x38                  	// #56
   43344:	madd	x8, x25, x8, x21
   43348:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   4334c:	ldrb	w9, [x8, #4]
   43350:	ldr	x10, [x10, #3776]
   43354:	ldr	w4, [x8, #16]
   43358:	adrp	x2, 63000 <fields@@Base+0xa1b4>
   4335c:	add	x2, x2, #0x49
   43360:	add	x9, x10, x9, lsl #5
   43364:	ldr	x3, [x9, #16]
   43368:	mov	x0, x20
   4336c:	mov	x1, x19
   43370:	ldp	x20, x19, [sp, #96]
   43374:	ldp	x22, x21, [sp, #80]
   43378:	ldp	x24, x23, [sp, #64]
   4337c:	ldp	x26, x25, [sp, #48]
   43380:	ldp	x28, x27, [sp, #32]
   43384:	ldp	x29, x30, [sp, #16]
   43388:	add	sp, sp, #0x70
   4338c:	b	35430 <snprintf@plt>
   43390:	mov	w8, #0x38                  	// #56
   43394:	madd	x9, x25, x8, x21
   43398:	ldrsw	x8, [x9, #16]!
   4339c:	ldurb	w10, [x9, #-12]
   433a0:	sub	w11, w10, #0x7
   433a4:	cmp	w11, #0x2
   433a8:	b.cs	44510 <aarch64_print_operand@@Base+0x12a0>  // b.hs, b.nlast
   433ac:	adrp	x11, 83000 <aarch64_sys_regs@@Base+0x1438>
   433b0:	add	x11, x11, #0xdc8
   433b4:	cmp	w10, #0x8
   433b8:	adrp	x10, 84000 <aarch64_sys_regs_sr@@Base+0x258>
   433bc:	add	x11, x11, x8, lsl #3
   433c0:	mov	w8, #0x38                  	// #56
   433c4:	add	x10, x10, #0x1c8
   433c8:	madd	x12, x25, x8, x21
   433cc:	cset	w8, eq  // eq = none
   433d0:	ldrsw	x9, [x9, #4]
   433d4:	add	x10, x10, x8, lsl #8
   433d8:	ldr	w8, [x12, #32]
   433dc:	adrp	x13, 9b000 <aarch64_operands@@Base+0x16c38>
   433e0:	ldr	x13, [x13, #3904]
   433e4:	ldr	x22, [x10, x9, lsl #3]
   433e8:	lsl	x10, x8, #4
   433ec:	ldr	x21, [x11, #256]
   433f0:	ldr	x9, [x12, #40]
   433f4:	ldr	x3, [x13, x10]
   433f8:	cbz	x9, 437bc <aarch64_print_operand@@Base+0x54c>
   433fc:	mov	x8, #0xd70b                	// #55051
   43400:	movk	x8, #0x70a3, lsl #16
   43404:	movk	x8, #0xa3d, lsl #32
   43408:	movk	x8, #0xa3d7, lsl #48
   4340c:	smulh	x8, x9, x8
   43410:	add	x8, x8, x9
   43414:	asr	x10, x8, #6
   43418:	add	x8, x10, x8, lsr #63
   4341c:	mov	w10, #0x64                  	// #100
   43420:	msub	x4, x8, x10, x9
   43424:	b	43a54 <aarch64_print_operand@@Base+0x7e4>
   43428:	mov	w8, #0x38                  	// #56
   4342c:	madd	x9, x25, x8, x21
   43430:	ldr	w8, [x9, #32]
   43434:	sub	w10, w8, #0x5
   43438:	cmp	w10, #0x8
   4343c:	b.hi	4450c <aarch64_print_operand@@Base+0x129c>  // b.pmore
   43440:	ldrsw	x9, [x9, #16]
   43444:	adrp	x11, 58000 <xexit@@Base+0x1dd4>
   43448:	add	x11, x11, #0xce2
   4344c:	adr	x12, 4345c <aarch64_print_operand@@Base+0x1ec>
   43450:	ldrh	w13, [x11, x10, lsl #1]
   43454:	add	x12, x12, x13, lsl #2
   43458:	br	x12
   4345c:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   43460:	ldr	x10, [x10, #3776]
   43464:	ldr	w11, [x10, #88]
   43468:	cmp	w11, #0x1
   4346c:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   43470:	add	x10, x10, #0x40
   43474:	b	43678 <aarch64_print_operand@@Base+0x408>
   43478:	cmp	w9, #0x9
   4347c:	b.ne	43720 <aarch64_print_operand@@Base+0x4b0>  // b.any
   43480:	mov	w8, #0x38                  	// #56
   43484:	madd	x8, x25, x8, x21
   43488:	ldrb	w8, [x8, #48]
   4348c:	tbnz	w8, #1, 4374c <aarch64_print_operand@@Base+0x4dc>
   43490:	b	43d94 <aarch64_print_operand@@Base+0xb24>
   43494:	mov	w8, #0x38                  	// #56
   43498:	madd	x8, x25, x8, x21
   4349c:	ldrb	w8, [x8, #4]
   434a0:	sub	w9, w8, #0x17
   434a4:	cmp	w9, #0x2
   434a8:	b.cs	43898 <aarch64_print_operand@@Base+0x628>  // b.hs, b.nlast
   434ac:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   434b0:	ldr	x10, [x10, #3776]
   434b4:	mov	w9, #0x38                  	// #56
   434b8:	madd	x9, x25, x9, x21
   434bc:	ldr	w3, [x9, #16]
   434c0:	add	x8, x10, x8, lsl #5
   434c4:	ldr	x4, [x8, #16]
   434c8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   434cc:	add	x2, x2, #0xa55
   434d0:	b	43ae8 <aarch64_print_operand@@Base+0x878>
   434d4:	mov	w8, #0x38                  	// #56
   434d8:	madd	x9, x25, x8, x21
   434dc:	ldrb	w8, [x9, #4]
   434e0:	ldr	w3, [x9, #16]
   434e4:	cbz	x8, 43a6c <aarch64_print_operand@@Base+0x7fc>
   434e8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   434ec:	ldr	x9, [x9, #3776]
   434f0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   434f4:	add	x2, x2, #0xa67
   434f8:	add	x8, x9, x8, lsl #5
   434fc:	ldr	x4, [x8, #16]
   43500:	b	43ae8 <aarch64_print_operand@@Base+0x878>
   43504:	ldr	x8, [x3, #120]
   43508:	mov	w9, #0x38                  	// #56
   4350c:	madd	x9, x25, x9, x21
   43510:	ldr	x3, [x9, #16]
   43514:	ubfx	x9, x8, #12, #3
   43518:	add	w10, w5, #0x1
   4351c:	cmp	x9, x10
   43520:	b.ne	43530 <aarch64_print_operand@@Base+0x2c0>  // b.any
   43524:	ubfx	x8, x8, #15, #5
   43528:	cmp	x3, x8
   4352c:	b.eq	43d94 <aarch64_print_operand@@Base+0xb24>  // b.none
   43530:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43534:	add	x2, x2, #0xb4b
   43538:	mov	x0, x20
   4353c:	mov	x1, x19
   43540:	b	43e54 <aarch64_print_operand@@Base+0xbe4>
   43544:	mov	w8, #0x38                  	// #56
   43548:	madd	x8, x25, x8, x21
   4354c:	ldr	x8, [x8, #16]
   43550:	ldr	x3, [x8]
   43554:	b	437b0 <aarch64_print_operand@@Base+0x540>
   43558:	mov	w8, #0x38                  	// #56
   4355c:	madd	x8, x25, x8, x21
   43560:	ldr	x4, [x8, #40]
   43564:	ldr	x3, [x8, #16]
   43568:	cbz	x4, 4385c <aarch64_print_operand@@Base+0x5ec>
   4356c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43570:	add	x2, x2, #0xb0d
   43574:	b	44470 <aarch64_print_operand@@Base+0x1200>
   43578:	mov	w8, #0x38                  	// #56
   4357c:	madd	x8, x25, x8, x21
   43580:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   43584:	ldrb	w9, [x8, #4]
   43588:	ldr	x10, [x10, #3776]
   4358c:	ldr	w3, [x8, #16]
   43590:	ldr	x5, [x8, #24]
   43594:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43598:	add	x9, x10, x9, lsl #5
   4359c:	ldr	x4, [x9, #16]
   435a0:	add	x2, x2, #0xa6e
   435a4:	b	43638 <aarch64_print_operand@@Base+0x3c8>
   435a8:	mov	w8, #0x38                  	// #56
   435ac:	madd	x8, x25, x8, x21
   435b0:	ldrb	w8, [x8, #4]
   435b4:	sub	w9, w8, #0x1
   435b8:	and	w9, w9, #0xff
   435bc:	cmp	w9, #0x4
   435c0:	b.cs	44550 <aarch64_print_operand@@Base+0x12e0>  // b.hs, b.nlast
   435c4:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   435c8:	ldr	x9, [x9, #3776]
   435cc:	add	x10, x9, x8, lsl #5
   435d0:	ldr	w10, [x10, #24]
   435d4:	cmp	w10, #0x1
   435d8:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   435dc:	lsl	x8, x8, #5
   435e0:	ldrb	w8, [x9, x8]
   435e4:	mov	w9, #0x38                  	// #56
   435e8:	madd	x9, x25, x9, x21
   435ec:	ldrsw	x9, [x9, #16]
   435f0:	cmp	w8, #0x4
   435f4:	adrp	x10, 83000 <aarch64_sys_regs@@Base+0x1438>
   435f8:	cset	w8, ne  // ne = any
   435fc:	add	x10, x10, #0xdc8
   43600:	add	x8, x10, x8, lsl #8
   43604:	ldr	x3, [x8, x9, lsl #3]
   43608:	b	437b0 <aarch64_print_operand@@Base+0x540>
   4360c:	mov	w8, #0x38                  	// #56
   43610:	madd	x8, x25, x8, x21
   43614:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   43618:	ldrb	w9, [x8, #4]
   4361c:	ldr	x10, [x10, #3776]
   43620:	ldr	w3, [x8, #16]
   43624:	ldr	x5, [x8, #24]
   43628:	adrp	x2, 59000 <fields@@Base+0x1b4>
   4362c:	add	x9, x10, x9, lsl #5
   43630:	ldr	x4, [x9, #16]
   43634:	add	x2, x2, #0xa3c
   43638:	mov	x0, x20
   4363c:	mov	x1, x19
   43640:	ldp	x20, x19, [sp, #96]
   43644:	ldp	x22, x21, [sp, #80]
   43648:	ldp	x24, x23, [sp, #64]
   4364c:	ldp	x26, x25, [sp, #48]
   43650:	ldp	x28, x27, [sp, #32]
   43654:	ldp	x29, x30, [sp, #16]
   43658:	add	sp, sp, #0x70
   4365c:	b	35430 <snprintf@plt>
   43660:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   43664:	ldr	x10, [x10, #3776]
   43668:	ldr	w11, [x10, #56]
   4366c:	cmp	w11, #0x1
   43670:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   43674:	add	x10, x10, #0x20
   43678:	ldrb	w10, [x10]
   4367c:	mov	w12, #0x38                  	// #56
   43680:	madd	x12, x25, x12, x21
   43684:	ldrsw	x13, [x12, #20]
   43688:	adrp	x11, 83000 <aarch64_sys_regs@@Base+0x1438>
   4368c:	cmp	w10, #0x4
   43690:	add	x11, x11, #0xdc8
   43694:	cset	w10, ne  // ne = any
   43698:	add	x10, x11, x10, lsl #8
   4369c:	add	x10, x10, x13, lsl #3
   436a0:	adrp	x13, 9b000 <aarch64_operands@@Base+0x16c38>
   436a4:	ldr	x13, [x13, #3904]
   436a8:	add	x9, x11, x9, lsl #3
   436ac:	lsl	x11, x8, #4
   436b0:	ldr	x22, [x9, #256]
   436b4:	ldr	x9, [x12, #40]
   436b8:	ldr	x23, [x10, #512]
   436bc:	ldr	x3, [x13, x11]
   436c0:	cbz	x9, 438b4 <aarch64_print_operand@@Base+0x644>
   436c4:	mov	x8, #0xd70b                	// #55051
   436c8:	movk	x8, #0x70a3, lsl #16
   436cc:	movk	x8, #0xa3d, lsl #32
   436d0:	movk	x8, #0xa3d7, lsl #48
   436d4:	smulh	x8, x9, x8
   436d8:	add	x8, x8, x9
   436dc:	asr	x10, x8, #6
   436e0:	add	x8, x10, x8, lsr #63
   436e4:	mov	w10, #0x64                  	// #100
   436e8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   436ec:	msub	x4, x8, x10, x9
   436f0:	add	x2, x2, #0xa24
   436f4:	mov	x0, sp
   436f8:	mov	w1, #0x10                  	// #16
   436fc:	bl	35430 <snprintf@plt>
   43700:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   43704:	add	x2, x2, #0x9a8
   43708:	mov	x5, sp
   4370c:	mov	x0, x20
   43710:	mov	x1, x19
   43714:	mov	x3, x22
   43718:	mov	x4, x23
   4371c:	b	43d90 <aarch64_print_operand@@Base+0xb20>
   43720:	ldr	x8, [x3, #120]
   43724:	add	w10, w5, #0x1
   43728:	ubfx	x9, x8, #12, #3
   4372c:	cmp	x9, x10
   43730:	b.ne	4374c <aarch64_print_operand@@Base+0x4dc>  // b.any
   43734:	mov	w9, #0x38                  	// #56
   43738:	madd	x9, x25, x9, x21
   4373c:	ldr	w9, [x9, #16]
   43740:	ubfx	w8, w8, #15, #5
   43744:	cmp	w9, w8
   43748:	b.eq	43d94 <aarch64_print_operand@@Base+0xb24>  // b.none
   4374c:	mov	w8, #0x38                  	// #56
   43750:	madd	x8, x25, x8, x21
   43754:	ldrb	w8, [x8, #4]
   43758:	sub	w9, w8, #0x1
   4375c:	and	w9, w9, #0xff
   43760:	cmp	w9, #0x2
   43764:	b.cs	44530 <aarch64_print_operand@@Base+0x12c0>  // b.hs, b.nlast
   43768:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   4376c:	ldr	x9, [x9, #3776]
   43770:	add	x10, x9, x8, lsl #5
   43774:	ldr	w10, [x10, #24]
   43778:	cmp	w10, #0x1
   4377c:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   43780:	lsl	x8, x8, #5
   43784:	ldrb	w8, [x9, x8]
   43788:	mov	w9, #0x38                  	// #56
   4378c:	madd	x9, x25, x9, x21
   43790:	ldrsw	x9, [x9, #16]
   43794:	cmp	w8, #0x4
   43798:	adrp	x10, 83000 <aarch64_sys_regs@@Base+0x1438>
   4379c:	cset	w8, ne  // ne = any
   437a0:	add	x10, x10, #0xdc8
   437a4:	add	x8, x10, x8, lsl #8
   437a8:	add	x8, x8, x9, lsl #3
   437ac:	ldr	x3, [x8, #512]
   437b0:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   437b4:	add	x2, x2, #0x816
   437b8:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   437bc:	cmp	w8, #0x5
   437c0:	b.ne	43d60 <aarch64_print_operand@@Base+0xaf0>  // b.any
   437c4:	strb	wzr, [sp]
   437c8:	b	43d74 <aarch64_print_operand@@Base+0xb04>
   437cc:	mov	w8, #0x38                  	// #56
   437d0:	madd	x8, x25, x8, x21
   437d4:	ldrb	w8, [x8, #4]
   437d8:	sub	w9, w8, #0x7
   437dc:	cmp	w9, #0x2
   437e0:	b.cs	44510 <aarch64_print_operand@@Base+0x12a0>  // b.hs, b.nlast
   437e4:	mov	w9, #0x38                  	// #56
   437e8:	madd	x9, x25, x9, x21
   437ec:	ldrsw	x9, [x9, #16]
   437f0:	cmp	w8, #0x8
   437f4:	adrp	x10, 84000 <aarch64_sys_regs_sr@@Base+0x258>
   437f8:	cset	w8, eq  // eq = none
   437fc:	add	x10, x10, #0x1c8
   43800:	add	x8, x10, x8, lsl #8
   43804:	ldr	x3, [x8, x9, lsl #3]
   43808:	b	43318 <aarch64_print_operand@@Base+0xa8>
   4380c:	mov	w8, #0x38                  	// #56
   43810:	madd	x8, x25, x8, x21
   43814:	ldrb	w9, [x8, #4]
   43818:	ldr	w3, [x8, #16]
   4381c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   43820:	ldr	x8, [x8, #3776]
   43824:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43828:	add	x2, x2, #0xa35
   4382c:	add	x8, x8, x9, lsl #5
   43830:	ldr	x4, [x8, #16]
   43834:	b	43ae8 <aarch64_print_operand@@Base+0x878>
   43838:	mov	w9, #0x38                  	// #56
   4383c:	madd	x9, x25, x9, x21
   43840:	ldr	x9, [x9, #16]
   43844:	cbz	x6, 43850 <aarch64_print_operand@@Base+0x5e0>
   43848:	mov	w10, #0x1                   	// #1
   4384c:	str	w10, [x6]
   43850:	add	x3, x9, x8
   43854:	cbz	x7, 4385c <aarch64_print_operand@@Base+0x5ec>
   43858:	str	x3, [x7]
   4385c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43860:	add	x2, x2, #0xb1e
   43864:	mov	x0, x20
   43868:	mov	x1, x19
   4386c:	ldp	x20, x19, [sp, #96]
   43870:	ldp	x22, x21, [sp, #80]
   43874:	ldp	x24, x23, [sp, #64]
   43878:	ldp	x26, x25, [sp, #48]
   4387c:	ldp	x28, x27, [sp, #32]
   43880:	ldp	x29, x30, [sp, #16]
   43884:	add	sp, sp, #0x70
   43888:	b	35430 <snprintf@plt>
   4388c:	adrp	x3, 6d000 <fields@@Base+0x141b4>
   43890:	add	x3, x3, #0x5cd
   43894:	b	43bf4 <aarch64_print_operand@@Base+0x984>
   43898:	cbnz	w8, 43ac4 <aarch64_print_operand@@Base+0x854>
   4389c:	mov	w8, #0x38                  	// #56
   438a0:	madd	x8, x25, x8, x21
   438a4:	ldr	w3, [x8, #16]
   438a8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   438ac:	add	x2, x2, #0xa51
   438b0:	b	43e4c <aarch64_print_operand@@Base+0xbdc>
   438b4:	mov	w10, #0x38                  	// #56
   438b8:	madd	x10, x25, x10, x21
   438bc:	ldrb	w10, [x10, #4]
   438c0:	cmp	w10, #0x5
   438c4:	b.ne	438d8 <aarch64_print_operand@@Base+0x668>  // b.any
   438c8:	mov	w10, #0x38                  	// #56
   438cc:	madd	x10, x25, x10, x21
   438d0:	ldrb	w10, [x10, #36]
   438d4:	tbnz	w10, #1, 436c4 <aarch64_print_operand@@Base+0x454>
   438d8:	cmp	w8, #0x5
   438dc:	b.ne	43c54 <aarch64_print_operand@@Base+0x9e4>  // b.any
   438e0:	strb	wzr, [sp]
   438e4:	b	43700 <aarch64_print_operand@@Base+0x490>
   438e8:	mov	w8, #0x38                  	// #56
   438ec:	madd	x8, x25, x8, x21
   438f0:	ldrsw	x10, [x8, #16]!
   438f4:	adrp	x11, 83000 <aarch64_sys_regs@@Base+0x1438>
   438f8:	add	x11, x11, #0xdc8
   438fc:	cmp	w9, #0x5e
   43900:	add	x10, x11, x10, lsl #3
   43904:	ldr	x3, [x10, #256]
   43908:	b.ne	43e20 <aarch64_print_operand@@Base+0xbb0>  // b.any
   4390c:	mov	w9, #0x38                  	// #56
   43910:	madd	x9, x25, x9, x21
   43914:	ldr	w9, [x9, #24]
   43918:	ldr	w4, [x8, #4]
   4391c:	cbz	w9, 442d0 <aarch64_print_operand@@Base+0x1060>
   43920:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43924:	add	x2, x2, #0xb5e
   43928:	b	43368 <aarch64_print_operand@@Base+0xf8>
   4392c:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   43930:	ldrb	w8, [x21, #4]
   43934:	ldr	x9, [x9, #3776]
   43938:	add	x10, x9, x8, lsl #5
   4393c:	ldr	w10, [x10, #24]
   43940:	cmp	w10, #0x1
   43944:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   43948:	lsl	x8, x8, #5
   4394c:	ldrb	w8, [x9, x8]
   43950:	cmp	w8, #0x8
   43954:	b.eq	44174 <aarch64_print_operand@@Base+0xf04>  // b.none
   43958:	cmp	w8, #0x4
   4395c:	b.eq	43968 <aarch64_print_operand@@Base+0x6f8>  // b.none
   43960:	cmp	w8, #0x2
   43964:	b.ne	44570 <aarch64_print_operand@@Base+0x1300>  // b.any
   43968:	mov	w8, #0x38                  	// #56
   4396c:	madd	x8, x25, x8, x21
   43970:	ldr	w8, [x8, #16]
   43974:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43978:	add	x2, x2, #0xb44
   4397c:	lsl	w9, w8, #24
   43980:	and	w10, w8, #0x7f
   43984:	and	w9, w9, #0x80000000
   43988:	ubfx	w8, w8, #6, #1
   4398c:	bfi	w9, w10, #19, #7
   43990:	bfi	w9, w8, #30, #1
   43994:	bfi	w9, w8, #26, #1
   43998:	bfi	w9, w8, #28, #1
   4399c:	bfi	w9, w8, #29, #1
   439a0:	orr	w8, w9, w8, lsl #27
   439a4:	eor	w8, w8, #0x40000000
   439a8:	fmov	s0, w8
   439ac:	fcvt	d0, s0
   439b0:	b	441c8 <aarch64_print_operand@@Base+0xf58>
   439b4:	mov	w8, #0x38                  	// #56
   439b8:	madd	x8, x25, x8, x21
   439bc:	ldr	s0, [x8, #16]
   439c0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   439c4:	add	x2, x2, #0xa7f
   439c8:	fcvt	d0, s0
   439cc:	b	441c8 <aarch64_print_operand@@Base+0xf58>
   439d0:	mov	w8, #0x38                  	// #56
   439d4:	madd	x9, x25, x8, x21
   439d8:	ldrb	w8, [x9, #4]
   439dc:	sub	w10, w8, #0x7
   439e0:	cmp	w10, #0x2
   439e4:	b.cs	44510 <aarch64_print_operand@@Base+0x12a0>  // b.hs, b.nlast
   439e8:	cmp	w8, #0x8
   439ec:	adrp	x8, 84000 <aarch64_sys_regs_sr@@Base+0x258>
   439f0:	mov	w10, #0x38                  	// #56
   439f4:	add	x8, x8, #0x1c8
   439f8:	cset	w11, eq  // eq = none
   439fc:	madd	x10, x25, x10, x21
   43a00:	ldpsw	x12, x13, [x9, #16]!
   43a04:	add	x8, x8, x11, lsl #8
   43a08:	ldr	w9, [x10, #32]
   43a0c:	adrp	x11, 9b000 <aarch64_operands@@Base+0x16c38>
   43a10:	ldr	x11, [x11, #3904]
   43a14:	ldr	x21, [x8, x12, lsl #3]
   43a18:	lsl	x12, x9, #4
   43a1c:	ldr	x22, [x8, x13, lsl #3]
   43a20:	ldr	x8, [x10, #40]
   43a24:	ldr	x3, [x11, x12]
   43a28:	cbz	x8, 43d58 <aarch64_print_operand@@Base+0xae8>
   43a2c:	mov	x9, #0xd70b                	// #55051
   43a30:	movk	x9, #0x70a3, lsl #16
   43a34:	movk	x9, #0xa3d, lsl #32
   43a38:	movk	x9, #0xa3d7, lsl #48
   43a3c:	smulh	x9, x8, x9
   43a40:	add	x9, x9, x8
   43a44:	asr	x10, x9, #6
   43a48:	add	x9, x10, x9, lsr #63
   43a4c:	mov	w10, #0x64                  	// #100
   43a50:	msub	x4, x9, x10, x8
   43a54:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43a58:	add	x2, x2, #0xa24
   43a5c:	mov	x0, sp
   43a60:	mov	w1, #0x10                  	// #16
   43a64:	bl	35430 <snprintf@plt>
   43a68:	b	43d74 <aarch64_print_operand@@Base+0xb04>
   43a6c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43a70:	add	x2, x2, #0xa63
   43a74:	b	43e4c <aarch64_print_operand@@Base+0xbdc>
   43a78:	mov	w8, #0x38                  	// #56
   43a7c:	madd	x9, x25, x8, x21
   43a80:	ldr	x5, [x9, #40]
   43a84:	ldr	w8, [x9, #32]
   43a88:	ldr	x3, [x9, #16]
   43a8c:	cmp	x5, #0x0
   43a90:	cset	w10, eq  // eq = none
   43a94:	cmp	x8, #0x5
   43a98:	cset	w9, eq  // eq = none
   43a9c:	and	w9, w10, w9
   43aa0:	tbnz	w9, #0, 4385c <aarch64_print_operand@@Base+0x5ec>
   43aa4:	cbz	w8, 4385c <aarch64_print_operand@@Base+0x5ec>
   43aa8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   43aac:	ldr	x9, [x9, #3904]
   43ab0:	lsl	x8, x8, #4
   43ab4:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43ab8:	add	x2, x2, #0xb25
   43abc:	ldr	x4, [x9, x8]
   43ac0:	b	44440 <aarch64_print_operand@@Base+0x11d0>
   43ac4:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   43ac8:	ldr	x10, [x10, #3776]
   43acc:	mov	w9, #0x38                  	// #56
   43ad0:	madd	x9, x25, x9, x21
   43ad4:	ldr	w3, [x9, #16]
   43ad8:	add	x8, x10, x8, lsl #5
   43adc:	ldr	x4, [x8, #16]
   43ae0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43ae4:	add	x2, x2, #0xa5c
   43ae8:	mov	x0, x20
   43aec:	mov	x1, x19
   43af0:	ldp	x20, x19, [sp, #96]
   43af4:	ldp	x22, x21, [sp, #80]
   43af8:	ldp	x24, x23, [sp, #64]
   43afc:	ldp	x26, x25, [sp, #48]
   43b00:	ldp	x28, x27, [sp, #32]
   43b04:	ldp	x29, x30, [sp, #16]
   43b08:	add	sp, sp, #0x70
   43b0c:	b	35430 <snprintf@plt>
   43b10:	mov	w8, #0x38                  	// #56
   43b14:	madd	x8, x25, x8, x21
   43b18:	ldr	x3, [x8, #16]
   43b1c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43b20:	add	x2, x2, #0xa7a
   43b24:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   43b28:	mov	w8, #0x38                  	// #56
   43b2c:	madd	x8, x25, x8, x21
   43b30:	ldr	w3, [x8, #16]
   43b34:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43b38:	add	x2, x2, #0xa48
   43b3c:	b	43e4c <aarch64_print_operand@@Base+0xbdc>
   43b40:	mov	w8, #0x38                  	// #56
   43b44:	madd	x22, x25, x8, x21
   43b48:	ldr	x8, [x22, #16]!
   43b4c:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43b50:	add	x2, x2, #0x816
   43b54:	mov	x0, x20
   43b58:	ldr	x3, [x8]
   43b5c:	mov	x1, x19
   43b60:	bl	35430 <snprintf@plt>
   43b64:	ldr	x23, [x22]
   43b68:	ldr	x21, [x23, #8]
   43b6c:	cbz	x21, 43d94 <aarch64_print_operand@@Base+0xb24>
   43b70:	mov	x0, x20
   43b74:	bl	35160 <strlen@plt>
   43b78:	ldr	x3, [x23]
   43b7c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43b80:	sub	x1, x19, x0
   43b84:	add	x0, x20, x0
   43b88:	add	x2, x2, #0xb51
   43b8c:	mov	x4, x21
   43b90:	bl	35430 <snprintf@plt>
   43b94:	ldr	x8, [x22]
   43b98:	ldr	x21, [x8, #16]
   43b9c:	cbz	x21, 43d94 <aarch64_print_operand@@Base+0xb24>
   43ba0:	mov	x0, x20
   43ba4:	bl	35160 <strlen@plt>
   43ba8:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43bac:	sub	x1, x19, x0
   43bb0:	add	x0, x20, x0
   43bb4:	add	x2, x2, #0x13e
   43bb8:	mov	x3, x21
   43bbc:	bl	35430 <snprintf@plt>
   43bc0:	ldr	x8, [x22]
   43bc4:	ldr	x21, [x8, #24]
   43bc8:	cbz	x21, 43d94 <aarch64_print_operand@@Base+0xb24>
   43bcc:	mov	x0, x20
   43bd0:	bl	35160 <strlen@plt>
   43bd4:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43bd8:	sub	x1, x19, x0
   43bdc:	add	x0, x20, x0
   43be0:	add	x2, x2, #0x13e
   43be4:	mov	x3, x21
   43be8:	b	4386c <aarch64_print_operand@@Base+0x5fc>
   43bec:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   43bf0:	add	x3, x3, #0x66b
   43bf4:	mov	x0, x20
   43bf8:	mov	x1, x19
   43bfc:	ldp	x20, x19, [sp, #96]
   43c00:	ldp	x22, x21, [sp, #80]
   43c04:	ldp	x24, x23, [sp, #64]
   43c08:	ldp	x26, x25, [sp, #48]
   43c0c:	ldp	x28, x27, [sp, #32]
   43c10:	ldp	x29, x30, [sp, #16]
   43c14:	add	sp, sp, #0x70
   43c18:	b	44670 <aarch64_print_operand@@Base+0x1400>
   43c1c:	mov	w8, #0x38                  	// #56
   43c20:	madd	x8, x25, x8, x21
   43c24:	ldr	x8, [x8, #16]
   43c28:	ldrb	w9, [x8, #9]
   43c2c:	tbz	w9, #0, 43550 <aarch64_print_operand@@Base+0x2e0>
   43c30:	b	43d94 <aarch64_print_operand@@Base+0xb24>
   43c34:	mov	w8, #0x38                  	// #56
   43c38:	madd	x8, x25, x8, x21
   43c3c:	ldr	x4, [x8, #40]
   43c40:	ldr	x3, [x8, #16]
   43c44:	cbz	x4, 432f0 <aarch64_print_operand@@Base+0x80>
   43c48:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43c4c:	add	x2, x2, #0xb35
   43c50:	b	44470 <aarch64_print_operand@@Base+0x1200>
   43c54:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43c58:	add	x2, x2, #0x13e
   43c5c:	mov	x0, sp
   43c60:	mov	w1, #0x10                  	// #16
   43c64:	bl	35430 <snprintf@plt>
   43c68:	b	43700 <aarch64_print_operand@@Base+0x490>
   43c6c:	ldr	x8, [x3, #120]
   43c70:	mov	w9, #0x38                  	// #56
   43c74:	madd	x9, x25, x9, x21
   43c78:	ldr	x3, [x9, #16]
   43c7c:	ubfx	x9, x8, #12, #3
   43c80:	add	w10, w5, #0x1
   43c84:	cmp	x9, x10
   43c88:	b.ne	43c98 <aarch64_print_operand@@Base+0xa28>  // b.any
   43c8c:	ubfx	x8, x8, #15, #5
   43c90:	cmp	x3, x8
   43c94:	b.eq	43d94 <aarch64_print_operand@@Base+0xb24>  // b.none
   43c98:	cmp	x3, #0x20
   43c9c:	b.cs	44650 <aarch64_print_operand@@Base+0x13e0>  // b.hs, b.nlast
   43ca0:	sub	x8, x3, #0xe
   43ca4:	cmp	x8, #0xf
   43ca8:	b.cc	432f0 <aarch64_print_operand@@Base+0x80>  // b.lo, b.ul, b.last
   43cac:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   43cb0:	ldr	x8, [x8, #3792]
   43cb4:	b	43ce0 <aarch64_print_operand@@Base+0xa70>
   43cb8:	mov	w8, #0x38                  	// #56
   43cbc:	madd	x8, x25, x8, x21
   43cc0:	ldr	x3, [x8, #16]
   43cc4:	cmp	x3, #0x10
   43cc8:	b.cs	445b0 <aarch64_print_operand@@Base+0x1340>  // b.hs, b.nlast
   43ccc:	mov	w8, #0x3f3f                	// #16191
   43cd0:	lsr	x8, x8, x3
   43cd4:	tbz	w8, #0, 432f0 <aarch64_print_operand@@Base+0x80>
   43cd8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   43cdc:	ldr	x8, [x8, #4056]
   43ce0:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43ce4:	add	x2, x2, #0x816
   43ce8:	ldr	x3, [x8, x3, lsl #3]
   43cec:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   43cf0:	mov	w8, #0x38                  	// #56
   43cf4:	madd	x9, x25, x8, x21
   43cf8:	ldrb	w8, [x9, #4]
   43cfc:	sub	w10, w8, #0x7
   43d00:	cmp	w10, #0x2
   43d04:	b.cs	44510 <aarch64_print_operand@@Base+0x12a0>  // b.hs, b.nlast
   43d08:	cmp	w8, #0x8
   43d0c:	adrp	x8, 84000 <aarch64_sys_regs_sr@@Base+0x258>
   43d10:	mov	w11, #0x38                  	// #56
   43d14:	add	x8, x8, #0x1c8
   43d18:	madd	x11, x25, x11, x21
   43d1c:	cset	w12, eq  // eq = none
   43d20:	ldpsw	x13, x14, [x9, #16]!
   43d24:	add	x8, x8, x12, lsl #8
   43d28:	ldr	w9, [x11, #32]
   43d2c:	adrp	x12, 9b000 <aarch64_operands@@Base+0x16c38>
   43d30:	ldr	x12, [x12, #3904]
   43d34:	adrp	x10, 83000 <aarch64_sys_regs@@Base+0x1438>
   43d38:	add	x10, x10, #0xdc8
   43d3c:	ldr	x21, [x8, x13, lsl #3]
   43d40:	add	x8, x10, x14, lsl #3
   43d44:	lsl	x10, x9, #4
   43d48:	ldr	x22, [x8, #768]
   43d4c:	ldr	x8, [x11, #40]
   43d50:	ldr	x3, [x12, x10]
   43d54:	cbnz	x8, 43a2c <aarch64_print_operand@@Base+0x7bc>
   43d58:	cmp	w9, #0x5
   43d5c:	b.eq	437c4 <aarch64_print_operand@@Base+0x554>  // b.none
   43d60:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   43d64:	add	x2, x2, #0x13e
   43d68:	mov	x0, sp
   43d6c:	mov	w1, #0x10                  	// #16
   43d70:	bl	35430 <snprintf@plt>
   43d74:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   43d78:	add	x2, x2, #0x9a8
   43d7c:	mov	x5, sp
   43d80:	mov	x0, x20
   43d84:	mov	x1, x19
   43d88:	mov	x3, x21
   43d8c:	mov	x4, x22
   43d90:	bl	35430 <snprintf@plt>
   43d94:	ldp	x20, x19, [sp, #96]
   43d98:	ldp	x22, x21, [sp, #80]
   43d9c:	ldp	x24, x23, [sp, #64]
   43da0:	ldp	x26, x25, [sp, #48]
   43da4:	ldp	x28, x27, [sp, #32]
   43da8:	ldp	x29, x30, [sp, #16]
   43dac:	add	sp, sp, #0x70
   43db0:	ret
   43db4:	mov	w9, #0x38                  	// #56
   43db8:	madd	x9, x25, x9, x21
   43dbc:	ldr	x9, [x9, #16]
   43dc0:	ldr	x8, [x3, #120]
   43dc4:	ldr	w3, [x9, #8]
   43dc8:	ubfx	x10, x8, #12, #3
   43dcc:	add	w9, w5, #0x1
   43dd0:	cmp	x10, x9
   43dd4:	b.ne	43de4 <aarch64_print_operand@@Base+0xb74>  // b.any
   43dd8:	ubfx	w8, w8, #15, #5
   43ddc:	cmp	w3, w8
   43de0:	b.eq	43d94 <aarch64_print_operand@@Base+0xb24>  // b.none
   43de4:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43de8:	add	x2, x2, #0xb4b
   43dec:	b	43e4c <aarch64_print_operand@@Base+0xbdc>
   43df0:	mov	w8, #0x38                  	// #56
   43df4:	madd	x8, x25, x8, x21
   43df8:	ldp	w9, w4, [x8, #16]
   43dfc:	adrp	x10, 83000 <aarch64_sys_regs@@Base+0x1438>
   43e00:	sxtw	x9, w9
   43e04:	add	x10, x10, #0xdc8
   43e08:	add	x8, x10, x9, lsl #3
   43e0c:	ldr	x3, [x8, #256]
   43e10:	cbz	w4, 43e20 <aarch64_print_operand@@Base+0xbb0>
   43e14:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43e18:	add	x2, x2, #0xb77
   43e1c:	b	43368 <aarch64_print_operand@@Base+0xf8>
   43e20:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43e24:	add	x2, x2, #0xb72
   43e28:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   43e2c:	mov	w8, #0x38                  	// #56
   43e30:	madd	x8, x25, x8, x21
   43e34:	ldr	x8, [x8, #16]
   43e38:	ldr	x3, [x8]
   43e3c:	cbnz	x3, 437b0 <aarch64_print_operand@@Base+0x540>
   43e40:	ldr	w3, [x8, #8]
   43e44:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43e48:	add	x2, x2, #0xbf3
   43e4c:	mov	x0, x20
   43e50:	mov	x1, x19
   43e54:	ldp	x20, x19, [sp, #96]
   43e58:	ldp	x22, x21, [sp, #80]
   43e5c:	ldp	x24, x23, [sp, #64]
   43e60:	ldp	x26, x25, [sp, #48]
   43e64:	ldp	x28, x27, [sp, #32]
   43e68:	ldp	x29, x30, [sp, #16]
   43e6c:	add	sp, sp, #0x70
   43e70:	b	35430 <snprintf@plt>
   43e74:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   43e78:	ldr	x9, [x9, #3968]
   43e7c:	mov	w8, #0x38                  	// #56
   43e80:	adrp	x24, 59000 <fields@@Base+0x1b4>
   43e84:	adrp	x22, 56000 <floatformat_from_double@@Base+0x4f8>
   43e88:	madd	x8, x25, x8, x21
   43e8c:	mov	x27, xzr
   43e90:	mov	x3, xzr
   43e94:	add	x24, x24, #0xbfb
   43e98:	add	x22, x22, #0x270
   43e9c:	add	x28, x9, #0x10
   43ea0:	add	x23, x8, #0x10
   43ea4:	b	43ed4 <aarch64_print_operand@@Base+0xc64>
   43ea8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   43eac:	mov	w2, #0x5                   	// #5
   43eb0:	mov	x0, x22
   43eb4:	add	x1, x1, #0xb81
   43eb8:	bl	35a50 <dcgettext@plt>
   43ebc:	str	x0, [x26]
   43ec0:	mov	x3, x24
   43ec4:	ldr	x24, [x28], #16
   43ec8:	add	x27, x27, #0x1
   43ecc:	cmp	x27, #0x195
   43ed0:	b.eq	4427c <aarch64_print_operand@@Base+0x100c>  // b.none
   43ed4:	ldur	w8, [x28, #-8]
   43ed8:	ldr	w9, [x23]
   43edc:	cmp	w8, w9
   43ee0:	b.ne	43ec4 <aarch64_print_operand@@Base+0xc54>  // b.any
   43ee4:	ldur	w8, [x28, #-4]
   43ee8:	ldr	w9, [x23, #4]
   43eec:	orr	x13, x27, #0x1
   43ef0:	and	w10, w9, w8
   43ef4:	cmp	w10, w9
   43ef8:	cset	w11, eq  // eq = none
   43efc:	cmp	x3, #0x0
   43f00:	cset	w12, eq  // eq = none
   43f04:	cmp	x13, #0x1b
   43f08:	b.eq	43ec4 <aarch64_print_operand@@Base+0xc54>  // b.none
   43f0c:	orr	w11, w12, w11
   43f10:	cbz	w11, 43ec4 <aarch64_print_operand@@Base+0xc54>
   43f14:	cmp	w10, w9
   43f18:	b.eq	44364 <aarch64_print_operand@@Base+0x10f4>  // b.none
   43f1c:	tbnz	w8, #4, 43ea8 <aarch64_print_operand@@Base+0xc38>
   43f20:	tbz	w8, #3, 43ec0 <aarch64_print_operand@@Base+0xc50>
   43f24:	adrp	x1, 59000 <fields@@Base+0x1b4>
   43f28:	mov	w2, #0x5                   	// #5
   43f2c:	mov	x0, x22
   43f30:	add	x1, x1, #0xba4
   43f34:	b	43eb8 <aarch64_print_operand@@Base+0xc48>
   43f38:	mov	w8, #0x38                  	// #56
   43f3c:	madd	x8, x25, x8, x21
   43f40:	ldr	w8, [x8, #16]
   43f44:	sub	w8, w8, #0x3
   43f48:	cmp	w8, #0x1c
   43f4c:	b.hi	44590 <aarch64_print_operand@@Base+0x1320>  // b.pmore
   43f50:	adrp	x9, 58000 <xexit@@Base+0x1dd4>
   43f54:	add	x9, x9, #0xca8
   43f58:	adr	x10, 43550 <aarch64_print_operand@@Base+0x2e0>
   43f5c:	ldrh	w11, [x9, x8, lsl #1]
   43f60:	add	x10, x10, x11, lsl #2
   43f64:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   43f68:	ldr	x8, [x8, #3832]
   43f6c:	br	x10
   43f70:	add	x8, x8, #0x40
   43f74:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   43f78:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   43f7c:	ldrb	w8, [x21, #4]
   43f80:	ldr	x9, [x9, #3776]
   43f84:	add	x10, x9, x8, lsl #5
   43f88:	ldr	w10, [x10, #24]
   43f8c:	cmp	w10, #0x1
   43f90:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   43f94:	lsl	x8, x8, #5
   43f98:	ldrb	w8, [x9, x8]
   43f9c:	cmp	w8, #0x8
   43fa0:	b.eq	442dc <aarch64_print_operand@@Base+0x106c>  // b.none
   43fa4:	cmp	w8, #0x4
   43fa8:	b.ne	445d0 <aarch64_print_operand@@Base+0x1360>  // b.any
   43fac:	mov	w8, #0x38                  	// #56
   43fb0:	madd	x8, x25, x8, x21
   43fb4:	ldr	w3, [x8, #16]
   43fb8:	mov	x0, x20
   43fbc:	mov	x1, x19
   43fc0:	ldp	x20, x19, [sp, #96]
   43fc4:	ldp	x22, x21, [sp, #80]
   43fc8:	ldp	x24, x23, [sp, #64]
   43fcc:	ldp	x26, x25, [sp, #48]
   43fd0:	ldp	x28, x27, [sp, #32]
   43fd4:	ldp	x29, x30, [sp, #16]
   43fd8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   43fdc:	add	x2, x2, #0xaeb
   43fe0:	mov	w4, w3
   43fe4:	add	sp, sp, #0x70
   43fe8:	b	35430 <snprintf@plt>
   43fec:	mov	w8, #0x38                  	// #56
   43ff0:	madd	x8, x25, x8, x21
   43ff4:	ldrb	w8, [x8, #4]
   43ff8:	sub	w9, w8, #0x1
   43ffc:	and	w9, w9, #0xff
   44000:	cmp	w9, #0x2
   44004:	b.cs	445f0 <aarch64_print_operand@@Base+0x1380>  // b.hs, b.nlast
   44008:	mov	w9, #0x38                  	// #56
   4400c:	madd	x9, x25, x9, x21
   44010:	ldr	x5, [x9, #40]
   44014:	add	x9, x9, #0x20
   44018:	cbnz	x5, 44028 <aarch64_print_operand@@Base+0xdb8>
   4401c:	ldr	w10, [x9]
   44020:	cmp	w10, #0x5
   44024:	b.eq	43768 <aarch64_print_operand@@Base+0x4f8>  // b.none
   44028:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   4402c:	ldr	x10, [x10, #3776]
   44030:	add	x11, x10, x8, lsl #5
   44034:	ldr	w11, [x11, #24]
   44038:	cmp	w11, #0x1
   4403c:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   44040:	lsl	x8, x8, #5
   44044:	ldrb	w8, [x10, x8]
   44048:	mov	w11, #0x38                  	// #56
   4404c:	madd	x11, x25, x11, x21
   44050:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   44054:	ldr	w9, [x9]
   44058:	ldr	x10, [x10, #3904]
   4405c:	ldrsw	x11, [x11, #16]
   44060:	adrp	x12, 83000 <aarch64_sys_regs@@Base+0x1438>
   44064:	cmp	w8, #0x4
   44068:	add	x12, x12, #0xdc8
   4406c:	cset	w8, ne  // ne = any
   44070:	add	x8, x12, x8, lsl #8
   44074:	lsl	x9, x9, #4
   44078:	add	x8, x8, x11, lsl #3
   4407c:	ldr	x3, [x8, #512]
   44080:	ldr	x4, [x10, x9]
   44084:	b	44438 <aarch64_print_operand@@Base+0x11c8>
   44088:	sub	w8, w5, #0x1
   4408c:	cmp	w8, #0x2
   44090:	b.cs	44610 <aarch64_print_operand@@Base+0x13a0>  // b.hs, b.nlast
   44094:	ldr	w10, [x21]
   44098:	mov	w9, #0x30                  	// #48
   4409c:	mov	w8, #0x38                  	// #56
   440a0:	madd	x8, x25, x8, x21
   440a4:	mul	x11, x10, x9
   440a8:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   440ac:	ldr	x9, [x9, #4032]
   440b0:	ldr	w8, [x8, #32]
   440b4:	ldr	w11, [x9, x11]
   440b8:	cmp	w11, #0x1
   440bc:	b.ne	440dc <aarch64_print_operand@@Base+0xe6c>  // b.any
   440c0:	mov	w11, #0x30                  	// #48
   440c4:	madd	x10, x10, x11, x9
   440c8:	ldrb	w10, [x10, #16]
   440cc:	tbz	w10, #4, 440dc <aarch64_print_operand@@Base+0xe6c>
   440d0:	ldr	w10, [x21, #16]
   440d4:	cmp	w10, #0x1f
   440d8:	b.eq	44118 <aarch64_print_operand@@Base+0xea8>  // b.none
   440dc:	cmp	w5, #0x2
   440e0:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   440e4:	ldr	w10, [x21, #56]
   440e8:	mov	w11, #0x30                  	// #48
   440ec:	mul	x11, x10, x11
   440f0:	ldr	w11, [x9, x11]
   440f4:	cmp	w11, #0x1
   440f8:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   440fc:	mov	w11, #0x30                  	// #48
   44100:	madd	x9, x10, x11, x9
   44104:	ldrb	w9, [x9, #16]
   44108:	tbz	w9, #4, 443c8 <aarch64_print_operand@@Base+0x1158>
   4410c:	ldr	w9, [x21, #72]
   44110:	cmp	w9, #0x1f
   44114:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   44118:	mov	w9, #0x38                  	// #56
   4411c:	madd	x9, x25, x9, x21
   44120:	ldrb	w9, [x9, #4]
   44124:	cmp	x9, #0x1
   44128:	b.ne	443a4 <aarch64_print_operand@@Base+0x1134>  // b.any
   4412c:	cmp	w8, #0x8
   44130:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   44134:	ldrb	w10, [x21, #4]
   44138:	cmp	w10, #0x1
   4413c:	b.eq	443b4 <aarch64_print_operand@@Base+0x1144>  // b.none
   44140:	b	443c8 <aarch64_print_operand@@Base+0x1158>
   44144:	mov	x0, x20
   44148:	mov	x1, x19
   4414c:	ldp	x20, x19, [sp, #96]
   44150:	ldp	x22, x21, [sp, #80]
   44154:	ldp	x24, x23, [sp, #64]
   44158:	ldp	x26, x25, [sp, #48]
   4415c:	ldp	x28, x27, [sp, #32]
   44160:	ldp	x29, x30, [sp, #16]
   44164:	adrp	x2, 64000 <fields@@Base+0xb1b4>
   44168:	add	x2, x2, #0x9b4
   4416c:	add	sp, sp, #0x70
   44170:	b	35430 <snprintf@plt>
   44174:	mov	w8, #0x38                  	// #56
   44178:	madd	x8, x25, x8, x21
   4417c:	ldr	w8, [x8, #16]
   44180:	adrp	x2, 59000 <fields@@Base+0x1b4>
   44184:	add	x2, x2, #0xb44
   44188:	lsl	w9, w8, #24
   4418c:	and	w10, w8, #0x7f
   44190:	and	w9, w9, #0x80000000
   44194:	ubfx	w8, w8, #6, #1
   44198:	bfi	w9, w10, #16, #7
   4419c:	bfi	w9, w8, #26, #1
   441a0:	bfi	w9, w8, #28, #1
   441a4:	bfi	w9, w8, #29, #1
   441a8:	bfi	w9, w8, #27, #1
   441ac:	orr	w9, w9, w8, lsl #30
   441b0:	orr	w9, w9, w8, lsl #25
   441b4:	orr	w9, w9, w8, lsl #24
   441b8:	orr	w8, w9, w8, lsl #23
   441bc:	eor	w8, w8, #0x40000000
   441c0:	lsl	x8, x8, #32
   441c4:	fmov	d0, x8
   441c8:	mov	x0, x20
   441cc:	mov	x1, x19
   441d0:	ldp	x20, x19, [sp, #96]
   441d4:	ldp	x22, x21, [sp, #80]
   441d8:	ldp	x24, x23, [sp, #64]
   441dc:	ldp	x26, x25, [sp, #48]
   441e0:	ldp	x28, x27, [sp, #32]
   441e4:	ldp	x29, x30, [sp, #16]
   441e8:	add	sp, sp, #0x70
   441ec:	b	35430 <snprintf@plt>
   441f0:	ldr	x8, [x3, #120]
   441f4:	add	w10, w5, #0x1
   441f8:	ubfx	x9, x8, #12, #3
   441fc:	cmp	x9, x10
   44200:	b.ne	4422c <aarch64_print_operand@@Base+0xfbc>  // b.any
   44204:	mov	w9, #0x38                  	// #56
   44208:	madd	x9, x25, x9, x21
   4420c:	ldrb	w9, [x9, #36]
   44210:	tbnz	w9, #0, 4422c <aarch64_print_operand@@Base+0xfbc>
   44214:	mov	w9, #0x38                  	// #56
   44218:	madd	x9, x25, x9, x21
   4421c:	ldr	x9, [x9, #16]
   44220:	ubfx	x8, x8, #15, #5
   44224:	cmp	x9, x8
   44228:	b.eq	43d94 <aarch64_print_operand@@Base+0xb24>  // b.none
   4422c:	mov	w8, #0x38                  	// #56
   44230:	madd	x8, x25, x8, x21
   44234:	ldr	x3, [x8, #16]
   44238:	cmp	x3, #0x20
   4423c:	b.cs	44630 <aarch64_print_operand@@Base+0x13c0>  // b.hs, b.nlast
   44240:	sub	x8, x3, #0xe
   44244:	cmp	x8, #0xf
   44248:	b.cc	44300 <aarch64_print_operand@@Base+0x1090>  // b.lo, b.ul, b.last
   4424c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   44250:	ldr	x8, [x8, #3792]
   44254:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   44258:	add	x2, x2, #0x816
   4425c:	ldr	x3, [x8, x3, lsl #3]
   44260:	b	44308 <aarch64_print_operand@@Base+0x1098>
   44264:	mov	w9, #0x38                  	// #56
   44268:	madd	x9, x25, x9, x21
   4426c:	ldr	x9, [x9, #16]
   44270:	and	x8, x8, #0xfffffffffffff000
   44274:	cbnz	x6, 43848 <aarch64_print_operand@@Base+0x5d8>
   44278:	b	43850 <aarch64_print_operand@@Base+0x5e0>
   4427c:	cbnz	x3, 437b0 <aarch64_print_operand@@Base+0x540>
   44280:	mov	w8, #0x38                  	// #56
   44284:	madd	x8, x25, x8, x21
   44288:	ldr	w8, [x8, #16]
   4428c:	mov	x0, x20
   44290:	mov	x1, x19
   44294:	ldp	x20, x19, [sp, #96]
   44298:	ldp	x22, x21, [sp, #80]
   4429c:	ldp	x24, x23, [sp, #64]
   442a0:	ldp	x26, x25, [sp, #48]
   442a4:	ldp	x28, x27, [sp, #32]
   442a8:	ldp	x29, x30, [sp, #16]
   442ac:	adrp	x2, 59000 <fields@@Base+0x1b4>
   442b0:	ubfx	w3, w8, #14, #2
   442b4:	ubfx	w4, w8, #11, #3
   442b8:	ubfx	w5, w8, #7, #4
   442bc:	ubfx	w6, w8, #3, #4
   442c0:	and	w7, w8, #0x7
   442c4:	add	x2, x2, #0xbc4
   442c8:	add	sp, sp, #0x70
   442cc:	b	35430 <snprintf@plt>
   442d0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   442d4:	add	x2, x2, #0xb68
   442d8:	b	43368 <aarch64_print_operand@@Base+0xf8>
   442dc:	mov	w8, #0x38                  	// #56
   442e0:	madd	x8, x25, x8, x21
   442e4:	ldr	x3, [x8, #16]
   442e8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   442ec:	add	x2, x2, #0xafb
   442f0:	mov	x0, x20
   442f4:	mov	x1, x19
   442f8:	mov	x4, x3
   442fc:	b	44478 <aarch64_print_operand@@Base+0x1208>
   44300:	adrp	x2, 59000 <fields@@Base+0x1b4>
   44304:	add	x2, x2, #0xb08
   44308:	mov	x0, x20
   4430c:	mov	x1, x19
   44310:	bl	35430 <snprintf@plt>
   44314:	mov	w8, #0x38                  	// #56
   44318:	madd	x8, x25, x8, x21
   4431c:	ldrb	w8, [x8, #36]
   44320:	tbz	w8, #0, 43d94 <aarch64_print_operand@@Base+0xb24>
   44324:	mov	x0, x20
   44328:	bl	35160 <strlen@plt>
   4432c:	mov	w8, #0x38                  	// #56
   44330:	madd	x8, x25, x8, x21
   44334:	ldr	w9, [x8, #32]
   44338:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   4433c:	ldr	x10, [x10, #3904]
   44340:	ldr	x4, [x8, #40]
   44344:	lsl	x9, x9, #4
   44348:	add	x8, x20, x0
   4434c:	ldr	x3, [x10, x9]
   44350:	adrp	x2, 59000 <fields@@Base+0x1b4>
   44354:	sub	x1, x19, x0
   44358:	add	x2, x2, #0xa24
   4435c:	mov	x0, x8
   44360:	b	44478 <aarch64_print_operand@@Base+0x1208>
   44364:	cbz	x26, 44498 <aarch64_print_operand@@Base+0x1228>
   44368:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   4436c:	str	xzr, [x26]
   44370:	b	4449c <aarch64_print_operand@@Base+0x122c>
   44374:	add	x8, x8, #0x50
   44378:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   4437c:	add	x8, x8, #0x20
   44380:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   44384:	add	x8, x8, #0x30
   44388:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   4438c:	add	x8, x8, #0x70
   44390:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   44394:	add	x8, x8, #0x60
   44398:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   4439c:	add	x8, x8, #0x10
   443a0:	b	43550 <aarch64_print_operand@@Base+0x2e0>
   443a4:	cmp	w8, #0x9
   443a8:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   443ac:	cmp	w9, #0x2
   443b0:	b.ne	443c8 <aarch64_print_operand@@Base+0x1158>  // b.any
   443b4:	mov	w8, #0x38                  	// #56
   443b8:	madd	x8, x25, x8, x21
   443bc:	ldr	x8, [x8, #40]
   443c0:	cbz	x8, 444a8 <aarch64_print_operand@@Base+0x1238>
   443c4:	mov	w8, #0x5                   	// #5
   443c8:	mov	w9, #0x38                  	// #56
   443cc:	madd	x11, x25, x9, x21
   443d0:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   443d4:	ldrb	w10, [x11, #4]
   443d8:	ldr	x9, [x9, #3776]
   443dc:	add	x12, x9, x10, lsl #5
   443e0:	ldr	w12, [x12, #24]
   443e4:	cmp	w12, #0x1
   443e8:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   443ec:	lsl	x10, x10, #5
   443f0:	ldrb	w9, [x9, x10]
   443f4:	ldr	x5, [x11, #40]
   443f8:	mov	w11, #0x38                  	// #56
   443fc:	madd	x11, x25, x11, x21
   44400:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   44404:	ldr	x10, [x10, #3904]
   44408:	ldrsw	x11, [x11, #16]
   4440c:	adrp	x12, 83000 <aarch64_sys_regs@@Base+0x1438>
   44410:	cmp	w9, #0x4
   44414:	add	x12, x12, #0xdc8
   44418:	cset	w9, ne  // ne = any
   4441c:	mov	w8, w8
   44420:	add	x9, x12, x9, lsl #8
   44424:	lsl	x8, x8, #4
   44428:	add	x9, x9, x11, lsl #3
   4442c:	ldr	x3, [x9, #512]
   44430:	ldr	x4, [x10, x8]
   44434:	cbz	x5, 44468 <aarch64_print_operand@@Base+0x11f8>
   44438:	adrp	x2, 59000 <fields@@Base+0x1b4>
   4443c:	add	x2, x2, #0xa22
   44440:	mov	x0, x20
   44444:	mov	x1, x19
   44448:	ldp	x20, x19, [sp, #96]
   4444c:	ldp	x22, x21, [sp, #80]
   44450:	ldp	x24, x23, [sp, #64]
   44454:	ldp	x26, x25, [sp, #48]
   44458:	ldp	x28, x27, [sp, #32]
   4445c:	ldp	x29, x30, [sp, #16]
   44460:	add	sp, sp, #0x70
   44464:	b	35430 <snprintf@plt>
   44468:	adrp	x2, 59000 <fields@@Base+0x1b4>
   4446c:	add	x2, x2, #0xa2e
   44470:	mov	x0, x20
   44474:	mov	x1, x19
   44478:	ldp	x20, x19, [sp, #96]
   4447c:	ldp	x22, x21, [sp, #80]
   44480:	ldp	x24, x23, [sp, #64]
   44484:	ldp	x26, x25, [sp, #48]
   44488:	ldp	x28, x27, [sp, #32]
   4448c:	ldp	x29, x30, [sp, #16]
   44490:	add	sp, sp, #0x70
   44494:	b	35430 <snprintf@plt>
   44498:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   4449c:	mov	x3, x24
   444a0:	add	x2, x2, #0x816
   444a4:	b	43864 <aarch64_print_operand@@Base+0x5f4>
   444a8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   444ac:	ldr	x8, [x8, #3776]
   444b0:	add	x10, x8, x9, lsl #5
   444b4:	ldr	w10, [x10, #24]
   444b8:	cmp	w10, #0x1
   444bc:	b.ne	444ec <aarch64_print_operand@@Base+0x127c>  // b.any
   444c0:	lsl	x9, x9, #5
   444c4:	ldrb	w8, [x8, x9]
   444c8:	b	43788 <aarch64_print_operand@@Base+0x518>
   444cc:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   444d0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   444d4:	adrp	x3, 59000 <fields@@Base+0x1b4>
   444d8:	add	x0, x0, #0x2b4
   444dc:	add	x1, x1, #0x50e
   444e0:	add	x3, x3, #0x8e2
   444e4:	mov	w2, #0xebb                 	// #3771
   444e8:	bl	35b30 <__assert_fail@plt>
   444ec:	adrp	x0, 59000 <fields@@Base+0x1b4>
   444f0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   444f4:	adrp	x3, 59000 <fields@@Base+0x1b4>
   444f8:	add	x0, x0, #0x737
   444fc:	add	x1, x1, #0x50e
   44500:	add	x3, x3, #0x767
   44504:	mov	w2, #0x30e                 	// #782
   44508:	bl	35b30 <__assert_fail@plt>
   4450c:	bl	35700 <abort@plt>
   44510:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   44514:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44518:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   4451c:	add	x0, x0, #0x9b3
   44520:	add	x1, x1, #0x50e
   44524:	add	x3, x3, #0x9fa
   44528:	mov	w2, #0xb6e                 	// #2926
   4452c:	bl	35b30 <__assert_fail@plt>
   44530:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44534:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44538:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4453c:	add	x0, x0, #0x893
   44540:	add	x1, x1, #0x50e
   44544:	add	x3, x3, #0x8e2
   44548:	mov	w2, #0xc6e                 	// #3182
   4454c:	bl	35b30 <__assert_fail@plt>
   44550:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44554:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44558:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4455c:	add	x0, x0, #0x969
   44560:	add	x1, x1, #0x50e
   44564:	add	x3, x3, #0x8e2
   44568:	mov	w2, #0xc7b                 	// #3195
   4456c:	bl	35b30 <__assert_fail@plt>
   44570:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   44574:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44578:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4457c:	add	x0, x0, #0x2b4
   44580:	add	x1, x1, #0x50e
   44584:	add	x3, x3, #0x8e2
   44588:	mov	w2, #0xdbd                 	// #3517
   4458c:	bl	35b30 <__assert_fail@plt>
   44590:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44594:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44598:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4459c:	add	x0, x0, #0xbd6
   445a0:	add	x1, x1, #0x50e
   445a4:	add	x3, x3, #0x8e2
   445a8:	mov	w2, #0xe95                 	// #3733
   445ac:	bl	35b30 <__assert_fail@plt>
   445b0:	adrp	x0, 59000 <fields@@Base+0x1b4>
   445b4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   445b8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   445bc:	add	x0, x0, #0xab9
   445c0:	add	x1, x1, #0x50e
   445c4:	add	x3, x3, #0x8e2
   445c8:	mov	w2, #0xd66                 	// #3430
   445cc:	bl	35b30 <__assert_fail@plt>
   445d0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   445d4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   445d8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   445dc:	add	x0, x0, #0x2b4
   445e0:	add	x1, x1, #0x50e
   445e4:	add	x3, x3, #0x8e2
   445e8:	mov	w2, #0xd7a                 	// #3450
   445ec:	bl	35b30 <__assert_fail@plt>
   445f0:	adrp	x0, 59000 <fields@@Base+0x1b4>
   445f4:	adrp	x1, 59000 <fields@@Base+0x1b4>
   445f8:	adrp	x3, 59000 <fields@@Base+0x1b4>
   445fc:	add	x0, x0, #0x893
   44600:	add	x1, x1, #0x50e
   44604:	add	x3, x3, #0x8e2
   44608:	mov	w2, #0xca2                 	// #3234
   4460c:	bl	35b30 <__assert_fail@plt>
   44610:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44614:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44618:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4461c:	add	x0, x0, #0xa0d
   44620:	add	x1, x1, #0x50e
   44624:	add	x3, x3, #0x8e2
   44628:	mov	w2, #0xc82                 	// #3202
   4462c:	bl	35b30 <__assert_fail@plt>
   44630:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44634:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44638:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4463c:	add	x0, x0, #0xa85
   44640:	add	x1, x1, #0x50e
   44644:	add	x3, x3, #0x8e2
   44648:	mov	w2, #0xd56                 	// #3414
   4464c:	bl	35b30 <__assert_fail@plt>
   44650:	adrp	x0, 59000 <fields@@Base+0x1b4>
   44654:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44658:	adrp	x3, 59000 <fields@@Base+0x1b4>
   4465c:	add	x0, x0, #0xa85
   44660:	add	x1, x1, #0x50e
   44664:	add	x3, x3, #0x8e2
   44668:	mov	w2, #0xd49                 	// #3401
   4466c:	bl	35b30 <__assert_fail@plt>
   44670:	sub	sp, sp, #0xa0
   44674:	stp	x29, x30, [sp, #80]
   44678:	stp	x26, x25, [sp, #96]
   4467c:	stp	x24, x23, [sp, #112]
   44680:	stp	x22, x21, [sp, #128]
   44684:	stp	x20, x19, [sp, #144]
   44688:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   4468c:	ldrb	w8, [x2, #4]
   44690:	ldrh	w25, [x2, #16]
   44694:	ldr	x9, [x9, #3776]
   44698:	mov	x19, x3
   4469c:	mov	x21, x1
   446a0:	mov	x22, x0
   446a4:	add	x8, x9, x8, lsl #5
   446a8:	ldr	x20, [x8, #16]
   446ac:	add	x29, sp, #0x50
   446b0:	tbnz	w25, #8, 446c0 <aarch64_print_operand@@Base+0x1450>
   446b4:	ldr	w8, [x2]
   446b8:	cmp	w8, #0x26
   446bc:	b.eq	44840 <aarch64_print_operand@@Base+0x15d0>  // b.none
   446c0:	ubfx	w26, w25, #5, #3
   446c4:	sub	w24, w26, #0x1
   446c8:	and	w8, w24, #0xffff
   446cc:	cmp	w8, #0x4
   446d0:	b.cs	44860 <aarch64_print_operand@@Base+0x15f0>  // b.hs, b.nlast
   446d4:	and	w23, w25, #0x1f
   446d8:	tbnz	w25, #8, 446ec <aarch64_print_operand@@Base+0x147c>
   446dc:	sturb	wzr, [x29, #-8]
   446e0:	cmp	w26, #0x3
   446e4:	b.cs	44734 <aarch64_print_operand@@Base+0x14c4>  // b.hs, b.nlast
   446e8:	b	44790 <aarch64_print_operand@@Base+0x1520>
   446ec:	ldr	x8, [x2, #24]
   446f0:	mov	x9, #0xd70b                	// #55051
   446f4:	movk	x9, #0x70a3, lsl #16
   446f8:	movk	x9, #0xa3d, lsl #32
   446fc:	movk	x9, #0xa3d7, lsl #48
   44700:	smulh	x9, x8, x9
   44704:	add	x9, x9, x8
   44708:	asr	x10, x9, #6
   4470c:	add	x9, x10, x9, lsr #63
   44710:	mov	w10, #0x64                  	// #100
   44714:	adrp	x2, 59000 <fields@@Base+0x1b4>
   44718:	msub	x3, x9, x10, x8
   4471c:	add	x2, x2, #0xa42
   44720:	sub	x0, x29, #0x8
   44724:	mov	w1, #0x8                   	// #8
   44728:	bl	35430 <snprintf@plt>
   4472c:	cmp	w26, #0x3
   44730:	b.cc	44790 <aarch64_print_operand@@Base+0x1520>  // b.lo, b.ul, b.last
   44734:	add	w8, w25, w26
   44738:	sub	w8, w8, #0x1
   4473c:	and	w7, w8, #0x1f
   44740:	cmp	w7, w23
   44744:	b.ls	44790 <aarch64_print_operand@@Base+0x1520>  // b.plast
   44748:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   4474c:	sub	x8, x29, #0x8
   44750:	add	x2, x2, #0x92e
   44754:	stp	x20, x8, [sp]
   44758:	mov	x0, x22
   4475c:	mov	x1, x21
   44760:	mov	x3, x19
   44764:	mov	w4, w23
   44768:	mov	x5, x20
   4476c:	mov	x6, x19
   44770:	bl	35430 <snprintf@plt>
   44774:	ldp	x20, x19, [sp, #144]
   44778:	ldp	x22, x21, [sp, #128]
   4477c:	ldp	x24, x23, [sp, #112]
   44780:	ldp	x26, x25, [sp, #96]
   44784:	ldp	x29, x30, [sp, #80]
   44788:	add	sp, sp, #0xa0
   4478c:	ret
   44790:	cmp	w24, #0x3
   44794:	b.hi	44774 <aarch64_print_operand@@Base+0x1504>  // b.pmore
   44798:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   4479c:	add	w8, w23, #0x1
   447a0:	add	x10, x10, #0xcf4
   447a4:	add	w9, w23, #0x2
   447a8:	and	w7, w8, #0x1f
   447ac:	adr	x11, 447c0 <aarch64_print_operand@@Base+0x1550>
   447b0:	ldrb	w8, [x10, x24]
   447b4:	add	x11, x11, x8, lsl #2
   447b8:	and	w8, w9, #0x1f
   447bc:	br	x11
   447c0:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   447c4:	add	x2, x2, #0x942
   447c8:	sub	x6, x29, #0x8
   447cc:	mov	x0, x22
   447d0:	mov	x1, x21
   447d4:	mov	x3, x19
   447d8:	mov	w4, w23
   447dc:	mov	x5, x20
   447e0:	bl	35430 <snprintf@plt>
   447e4:	b	44774 <aarch64_print_operand@@Base+0x1504>
   447e8:	sub	x9, x29, #0x8
   447ec:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   447f0:	str	w8, [sp, #16]
   447f4:	add	x2, x2, #0x963
   447f8:	stp	x20, x9, [sp, #24]
   447fc:	stp	x20, x19, [sp]
   44800:	b	44758 <aarch64_print_operand@@Base+0x14e8>
   44804:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   44808:	sub	x8, x29, #0x8
   4480c:	add	x2, x2, #0x94e
   44810:	b	44754 <aarch64_print_operand@@Base+0x14e4>
   44814:	add	w9, w23, #0x3
   44818:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   4481c:	and	w9, w9, #0x1f
   44820:	sub	x10, x29, #0x8
   44824:	add	x2, x2, #0x981
   44828:	stp	x20, x19, [sp, #24]
   4482c:	str	w8, [sp, #16]
   44830:	stp	x20, x19, [sp]
   44834:	stp	x20, x10, [sp, #48]
   44838:	str	w9, [sp, #40]
   4483c:	b	44758 <aarch64_print_operand@@Base+0x14e8>
   44840:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   44844:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44848:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   4484c:	add	x0, x0, #0x883
   44850:	add	x1, x1, #0x50e
   44854:	add	x3, x3, #0x8bd
   44858:	mov	w2, #0xbbf                 	// #3007
   4485c:	bl	35b30 <__assert_fail@plt>
   44860:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   44864:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44868:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   4486c:	add	x0, x0, #0x90f
   44870:	add	x1, x1, #0x50e
   44874:	add	x3, x3, #0x8bd
   44878:	mov	w2, #0xbc0                 	// #3008
   4487c:	bl	35b30 <__assert_fail@plt>
   44880:	stp	x29, x30, [sp, #-16]!
   44884:	ldrb	w8, [x2, #28]
   44888:	mov	x29, sp
   4488c:	tbnz	w8, #1, 448b0 <aarch64_print_operand@@Base+0x1640>
   44890:	ldrb	w8, [x2, #36]
   44894:	tbnz	w8, #0, 448c8 <aarch64_print_operand@@Base+0x1658>
   44898:	ldr	w4, [x2, #20]
   4489c:	cbz	w4, 4491c <aarch64_print_operand@@Base+0x16ac>
   448a0:	adrp	x2, 59000 <fields@@Base+0x1b4>
   448a4:	add	x2, x2, #0xb77
   448a8:	ldp	x29, x30, [sp], #16
   448ac:	b	35430 <snprintf@plt>
   448b0:	tbnz	w8, #2, 448e8 <aarch64_print_operand@@Base+0x1678>
   448b4:	ldr	w4, [x2, #20]
   448b8:	adrp	x2, 59000 <fields@@Base+0x1b4>
   448bc:	add	x2, x2, #0xb68
   448c0:	ldp	x29, x30, [sp], #16
   448c4:	b	35430 <snprintf@plt>
   448c8:	ldr	w8, [x2, #32]
   448cc:	cmp	w8, #0xf
   448d0:	b.ne	4492c <aarch64_print_operand@@Base+0x16bc>  // b.any
   448d4:	ldr	w4, [x2, #20]
   448d8:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   448dc:	add	x2, x2, #0xc3e
   448e0:	ldp	x29, x30, [sp], #16
   448e4:	b	35430 <snprintf@plt>
   448e8:	ldr	w8, [x2]
   448ec:	ldr	w4, [x2, #20]
   448f0:	cmp	w8, #0x58
   448f4:	b.ne	4490c <aarch64_print_operand@@Base+0x169c>  // b.any
   448f8:	cbnz	w4, 4490c <aarch64_print_operand@@Base+0x169c>
   448fc:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   44900:	add	x2, x2, #0xba7
   44904:	ldp	x29, x30, [sp], #16
   44908:	b	35430 <snprintf@plt>
   4490c:	adrp	x2, 5d000 <fields@@Base+0x41b4>
   44910:	add	x2, x2, #0xbad
   44914:	ldp	x29, x30, [sp], #16
   44918:	b	35430 <snprintf@plt>
   4491c:	adrp	x2, 59000 <fields@@Base+0x1b4>
   44920:	add	x2, x2, #0xb72
   44924:	ldp	x29, x30, [sp], #16
   44928:	b	35430 <snprintf@plt>
   4492c:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   44930:	adrp	x1, 59000 <fields@@Base+0x1b4>
   44934:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   44938:	add	x0, x0, #0xbb8
   4493c:	add	x1, x1, #0x50e
   44940:	add	x3, x3, #0xbe1
   44944:	mov	w2, #0xc05                 	// #3077
   44948:	bl	35b30 <__assert_fail@plt>

000000000004494c <aarch64_sys_reg_deprecated_p@@Base>:
   4494c:	ldr	w8, [x0, #12]
   44950:	and	w0, w8, #0x1
   44954:	ret

0000000000044958 <aarch64_sys_reg_supported_p@@Base>:
   44958:	ldrb	w8, [x1, #12]
   4495c:	tbnz	w8, #1, 44968 <aarch64_sys_reg_supported_p@@Base+0x10>
   44960:	mov	w0, #0x1                   	// #1
   44964:	ret
   44968:	ldr	w8, [x1, #8]
   4496c:	tbnz	w0, #21, 4497c <aarch64_sys_reg_supported_p@@Base+0x24>
   44970:	mov	w9, #0xc213                	// #49683
   44974:	cmp	w8, w9
   44978:	b.eq	44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>  // b.none
   4497c:	mov	w9, #0xffff3979            	// #-50823
   44980:	add	w9, w8, w9
   44984:	ror	w9, w9, #11
   44988:	sub	w10, w9, #0x3
   4498c:	cmp	w10, #0x4
   44990:	b.cc	44998 <aarch64_sys_reg_supported_p@@Base+0x40>  // b.lo, b.ul, b.last
   44994:	cbnz	w9, 4499c <aarch64_sys_reg_supported_p@@Base+0x44>
   44998:	tbz	x0, #45, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   4499c:	tbnz	x0, #46, 449ac <aarch64_sys_reg_supported_p@@Base+0x54>
   449a0:	mov	w9, #0xc01c                	// #49180
   449a4:	cmp	w8, w9
   449a8:	b.eq	44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>  // b.none
   449ac:	tbnz	x0, #47, 449bc <aarch64_sys_reg_supported_p@@Base+0x64>
   449b0:	mov	w9, #0xda16                	// #55830
   449b4:	cmp	w8, w9
   449b8:	b.eq	44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>  // b.none
   449bc:	mov	w9, #0xeaff                	// #60159
   449c0:	cmp	w8, w9
   449c4:	b.gt	44a1c <aarch64_sys_reg_supported_p@@Base+0xc4>
   449c8:	mov	w9, #0xe8ff                	// #59647
   449cc:	cmp	w8, w9
   449d0:	b.le	44a68 <aarch64_sys_reg_supported_p@@Base+0x110>
   449d4:	mov	w9, #0xffff1700            	// #-59648
   449d8:	add	w9, w8, w9
   449dc:	cmp	w9, #0x3
   449e0:	b.cc	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.lo, b.ul, b.last
   449e4:	mov	w9, #0xffff1578            	// #-60040
   449e8:	add	w9, w8, w9
   449ec:	cmp	w9, #0x8
   449f0:	b.hi	44a08 <aarch64_sys_reg_supported_p@@Base+0xb0>  // b.pmore
   449f4:	mov	w10, #0x1                   	// #1
   449f8:	lsl	w9, w10, w9
   449fc:	mov	w10, #0x103                 	// #259
   44a00:	tst	w9, w10
   44a04:	b.ne	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.any
   44a08:	mov	w9, #0xffff1600            	// #-59904
   44a0c:	add	w9, w8, w9
   44a10:	cmp	w9, #0x2
   44a14:	b.cc	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.lo, b.ul, b.last
   44a18:	b	44bb4 <aarch64_sys_reg_supported_p@@Base+0x25c>
   44a1c:	mov	w9, #0xedff                	// #60927
   44a20:	cmp	w8, w9
   44a24:	b.le	44a98 <aarch64_sys_reg_supported_p@@Base+0x140>
   44a28:	mov	w9, #0xffff10f8            	// #-61192
   44a2c:	add	w9, w8, w9
   44a30:	cmp	w9, #0x12
   44a34:	b.hi	44a54 <aarch64_sys_reg_supported_p@@Base+0xfc>  // b.pmore
   44a38:	mov	w10, #0x1                   	// #1
   44a3c:	mov	w11, #0x700                 	// #1792
   44a40:	lsl	w10, w10, w9
   44a44:	movk	w11, #0x7, lsl #16
   44a48:	tst	w10, w11
   44a4c:	b.ne	44ae4 <aarch64_sys_reg_supported_p@@Base+0x18c>  // b.any
   44a50:	cbz	w9, 44abc <aarch64_sys_reg_supported_p@@Base+0x164>
   44a54:	mov	w9, #0xee00                	// #60928
   44a58:	cmp	w8, w9
   44a5c:	b.eq	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   44a60:	mov	w9, #0xee81                	// #61057
   44a64:	b	44ab4 <aarch64_sys_reg_supported_p@@Base+0x15c>
   44a68:	mov	w9, #0xe717                	// #59159
   44a6c:	cmp	w8, w9
   44a70:	b.le	44b98 <aarch64_sys_reg_supported_p@@Base+0x240>
   44a74:	mov	w9, #0xffff18e8            	// #-59160
   44a78:	add	w9, w8, w9
   44a7c:	cmp	w9, #0x3
   44a80:	b.cc	44bb0 <aarch64_sys_reg_supported_p@@Base+0x258>  // b.lo, b.ul, b.last
   44a84:	mov	w9, #0xe880                	// #59520
   44a88:	cmp	w8, w9
   44a8c:	b.eq	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   44a90:	mov	w9, #0xe882                	// #59522
   44a94:	b	44ab4 <aarch64_sys_reg_supported_p@@Base+0x15c>
   44a98:	mov	w9, #0xeb00                	// #60160
   44a9c:	cmp	w8, w9
   44aa0:	b.eq	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   44aa4:	mov	w9, #0xed10                	// #60688
   44aa8:	cmp	w8, w9
   44aac:	b.eq	44abc <aarch64_sys_reg_supported_p@@Base+0x164>  // b.none
   44ab0:	mov	w9, #0xed18                	// #60696
   44ab4:	cmp	w8, w9
   44ab8:	b.ne	44bb4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.any
   44abc:	tbz	w0, #24, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44ac0:	mov	w9, #0xffff10f0            	// #-61200
   44ac4:	add	w9, w8, w9
   44ac8:	cmp	w9, #0xa
   44acc:	b.hi	44bb4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.pmore
   44ad0:	mov	w10, #0x1                   	// #1
   44ad4:	lsl	w9, w10, w9
   44ad8:	mov	w10, #0x707                 	// #1799
   44adc:	tst	w9, w10
   44ae0:	b.eq	44bb4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.none
   44ae4:	tbz	w0, #24, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44ae8:	mov	w9, #0xc4c7                	// #50375
   44aec:	cmp	w8, w9
   44af0:	b.gt	44b20 <aarch64_sys_reg_supported_p@@Base+0x1c8>
   44af4:	mov	w9, #0xc107                	// #49415
   44af8:	cmp	w8, w9
   44afc:	b.gt	44bdc <aarch64_sys_reg_supported_p@@Base+0x284>
   44b00:	mov	w9, #0xc007                	// #49159
   44b04:	cmp	w8, w9
   44b08:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44b0c:	mov	w9, #0xc024                	// #49188
   44b10:	cmp	w8, w9
   44b14:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44b18:	mov	w9, #0xc090                	// #49296
   44b1c:	b	44d4c <aarch64_sys_reg_supported_p@@Base+0x3f4>
   44b20:	mov	w9, #0xc608                	// #50696
   44b24:	cmp	w8, w9
   44b28:	b.gt	44c24 <aarch64_sys_reg_supported_p@@Base+0x2cc>
   44b2c:	mov	w9, #0xffff3b38            	// #-50376
   44b30:	add	w9, w8, w9
   44b34:	cmp	w9, #0xf
   44b38:	b.hi	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.pmore
   44b3c:	mov	w10, #0x1                   	// #1
   44b40:	lsl	w9, w10, w9
   44b44:	mov	w10, #0x8bfd                	// #35837
   44b48:	tst	w9, w10
   44b4c:	b.eq	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.none
   44b50:	tbz	w0, #27, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44b54:	mov	w9, #0xc107                	// #49415
   44b58:	cmp	w8, w9
   44b5c:	b.le	44b00 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   44b60:	mov	w9, #0xe08f                	// #57487
   44b64:	cmp	w8, w9
   44b68:	b.gt	44d30 <aarch64_sys_reg_supported_p@@Base+0x3d8>
   44b6c:	mov	w9, #0xffff3ef8            	// #-49416
   44b70:	add	w9, w8, w9
   44b74:	cmp	w9, #0x11
   44b78:	b.hi	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.pmore
   44b7c:	mov	w10, #0x1                   	// #1
   44b80:	lsl	w9, w10, w9
   44b84:	mov	w10, #0xf0f                 	// #3855
   44b88:	movk	w10, #0x3, lsl #16
   44b8c:	tst	w9, w10
   44b90:	b.ne	44c68 <aarch64_sys_reg_supported_p@@Base+0x310>  // b.any
   44b94:	b	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>
   44b98:	mov	w9, #0xe101                	// #57601
   44b9c:	cmp	w8, w9
   44ba0:	b.eq	44bb0 <aarch64_sys_reg_supported_p@@Base+0x258>  // b.none
   44ba4:	mov	w9, #0xe681                	// #59009
   44ba8:	cmp	w8, w9
   44bac:	b.ne	44bb4 <aarch64_sys_reg_supported_p@@Base+0x25c>  // b.any
   44bb0:	tbz	w0, #24, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44bb4:	mov	w9, #0xc03a                	// #49210
   44bb8:	mov	w10, #0xc214                	// #49684
   44bbc:	cmp	w8, w9
   44bc0:	cset	w9, eq  // eq = none
   44bc4:	cmp	w8, w10
   44bc8:	cset	w10, eq  // eq = none
   44bcc:	tbnz	w0, #5, 44ae8 <aarch64_sys_reg_supported_p@@Base+0x190>
   44bd0:	orr	w9, w9, w10
   44bd4:	tbnz	w9, #0, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44bd8:	b	44ae8 <aarch64_sys_reg_supported_p@@Base+0x190>
   44bdc:	mov	w9, #0xffff3ef8            	// #-49416
   44be0:	add	w9, w8, w9
   44be4:	cmp	w9, #0x11
   44be8:	b.ls	44c50 <aarch64_sys_reg_supported_p@@Base+0x2f8>  // b.plast
   44bec:	mov	w9, #0xffff3d68            	// #-49816
   44bf0:	add	w9, w8, w9
   44bf4:	cmp	w9, #0x11
   44bf8:	b.hi	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.pmore
   44bfc:	mov	w10, #0x1                   	// #1
   44c00:	lsl	w9, w10, w9
   44c04:	mov	w10, #0xf0f                 	// #3855
   44c08:	movk	w10, #0x3, lsl #16
   44c0c:	tst	w9, w10
   44c10:	b.eq	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.none
   44c14:	tbz	w0, #26, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44c18:	tst	x0, #0x800
   44c1c:	cset	w9, eq  // eq = none
   44c20:	b	44d70 <aarch64_sys_reg_supported_p@@Base+0x418>
   44c24:	mov	w9, #0xe608                	// #58888
   44c28:	cmp	w8, w9
   44c2c:	b.gt	44c94 <aarch64_sys_reg_supported_p@@Base+0x33c>
   44c30:	mov	w9, #0xe292                	// #58002
   44c34:	cmp	w8, w9
   44c38:	b.gt	44cb4 <aarch64_sys_reg_supported_p@@Base+0x35c>
   44c3c:	mov	w9, #0xc609                	// #50697
   44c40:	cmp	w8, w9
   44c44:	b.eq	44cd0 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   44c48:	mov	w9, #0xe090                	// #57488
   44c4c:	b	44d4c <aarch64_sys_reg_supported_p@@Base+0x3f4>
   44c50:	mov	w10, #0x1                   	// #1
   44c54:	lsl	w9, w10, w9
   44c58:	mov	w10, #0xf0f                 	// #3855
   44c5c:	movk	w10, #0x3, lsl #16
   44c60:	tst	w9, w10
   44c64:	b.eq	44bec <aarch64_sys_reg_supported_p@@Base+0x294>  // b.none
   44c68:	tbz	w0, #6, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44c6c:	mov	w9, #0xe08f                	// #57487
   44c70:	cmp	w8, w9
   44c74:	b.le	44b00 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   44c78:	mov	w9, #0xe090                	// #57488
   44c7c:	cmp	w8, w9
   44c80:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44c84:	mov	w9, #0xf090                	// #61584
   44c88:	cmp	w8, w9
   44c8c:	b.ne	44cac <aarch64_sys_reg_supported_p@@Base+0x354>  // b.any
   44c90:	b	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>
   44c94:	mov	w9, #0xecc7                	// #60615
   44c98:	cmp	w8, w9
   44c9c:	b.gt	44d20 <aarch64_sys_reg_supported_p@@Base+0x3c8>
   44ca0:	mov	w9, #0xe609                	// #58889
   44ca4:	cmp	w8, w9
   44ca8:	b.eq	44cd0 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   44cac:	mov	w9, #0xe890                	// #59536
   44cb0:	b	44d4c <aarch64_sys_reg_supported_p@@Base+0x3f4>
   44cb4:	mov	w9, #0xe293                	// #58003
   44cb8:	cmp	w8, w9
   44cbc:	b.eq	44cd0 <aarch64_sys_reg_supported_p@@Base+0x378>  // b.none
   44cc0:	mov	w9, #0xe4c8                	// #58568
   44cc4:	cmp	w8, w9
   44cc8:	b.eq	44b50 <aarch64_sys_reg_supported_p@@Base+0x1f8>  // b.none
   44ccc:	b	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>
   44cd0:	tbz	w0, #26, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44cd4:	mov	w9, #0xc4c7                	// #50375
   44cd8:	cmp	w8, w9
   44cdc:	b.le	44ed0 <aarch64_sys_reg_supported_p@@Base+0x578>
   44ce0:	mov	w9, #0xe08f                	// #57487
   44ce4:	cmp	w8, w9
   44ce8:	b.le	44b2c <aarch64_sys_reg_supported_p@@Base+0x1d4>
   44cec:	mov	w9, #0xe88f                	// #59535
   44cf0:	cmp	w8, w9
   44cf4:	b.le	44f28 <aarch64_sys_reg_supported_p@@Base+0x5d0>
   44cf8:	mov	w9, #0xe890                	// #59536
   44cfc:	cmp	w8, w9
   44d00:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44d04:	mov	w9, #0xf090                	// #61584
   44d08:	cmp	w8, w9
   44d0c:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44d10:	mov	w9, #0xecc8                	// #60616
   44d14:	cmp	w8, w9
   44d18:	b.eq	44b50 <aarch64_sys_reg_supported_p@@Base+0x1f8>  // b.none
   44d1c:	b	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>
   44d20:	mov	w9, #0xecc8                	// #60616
   44d24:	cmp	w8, w9
   44d28:	b.ne	44d48 <aarch64_sys_reg_supported_p@@Base+0x3f0>  // b.any
   44d2c:	b	44b50 <aarch64_sys_reg_supported_p@@Base+0x1f8>
   44d30:	mov	w9, #0xe090                	// #57488
   44d34:	cmp	w8, w9
   44d38:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44d3c:	mov	w9, #0xe890                	// #59536
   44d40:	cmp	w8, w9
   44d44:	b.eq	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>  // b.none
   44d48:	mov	w9, #0xf090                	// #61584
   44d4c:	cmp	w8, w9
   44d50:	b.ne	44d58 <aarch64_sys_reg_supported_p@@Base+0x400>  // b.any
   44d54:	tbz	w0, #28, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44d58:	tst	x0, #0x800
   44d5c:	cset	w9, eq  // eq = none
   44d60:	tbnz	w0, #11, 44d70 <aarch64_sys_reg_supported_p@@Base+0x418>
   44d64:	mov	w10, #0xda15                	// #55829
   44d68:	cmp	w8, w10
   44d6c:	b.eq	44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>  // b.none
   44d70:	mov	w10, #0xffff18e0            	// #-59168
   44d74:	add	w10, w8, w10
   44d78:	cmp	w10, #0xa
   44d7c:	b.hi	44d94 <aarch64_sys_reg_supported_p@@Base+0x43c>  // b.pmore
   44d80:	mov	w11, #0x1                   	// #1
   44d84:	lsl	w10, w11, w10
   44d88:	mov	w11, #0x707                 	// #1799
   44d8c:	tst	w10, w11
   44d90:	b.ne	44dc8 <aarch64_sys_reg_supported_p@@Base+0x470>  // b.any
   44d94:	mov	w10, #0xffff1ef0            	// #-57616
   44d98:	add	w10, w8, w10
   44d9c:	cmp	w10, #0x22
   44da0:	b.hi	44dbc <aarch64_sys_reg_supported_p@@Base+0x464>  // b.pmore
   44da4:	mov	w11, #0x1                   	// #1
   44da8:	lsl	x10, x11, x10
   44dac:	mov	x11, #0x1                   	// #1
   44db0:	movk	x11, #0x5, lsl #32
   44db4:	tst	x10, x11
   44db8:	b.ne	44dc8 <aarch64_sys_reg_supported_p@@Base+0x470>  // b.any
   44dbc:	mov	w10, #0xe099                	// #57497
   44dc0:	cmp	w8, w10
   44dc4:	b.ne	44dcc <aarch64_sys_reg_supported_p@@Base+0x474>  // b.any
   44dc8:	tbnz	w9, #0, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44dcc:	mov	w10, #0xffff9bfe            	// #-25602
   44dd0:	add	w10, w8, w10
   44dd4:	cmp	w10, #0x33
   44dd8:	b.ls	44e58 <aarch64_sys_reg_supported_p@@Base+0x500>  // b.plast
   44ddc:	mov	w10, #0xffffbbf8            	// #-17416
   44de0:	add	w10, w8, w10
   44de4:	cmp	w10, #0x2f
   44de8:	b.hi	44e04 <aarch64_sys_reg_supported_p@@Base+0x4ac>  // b.pmore
   44dec:	mov	w11, #0x1                   	// #1
   44df0:	lsl	x10, x11, x10
   44df4:	mov	x11, #0xaaaf                	// #43695
   44df8:	movk	x11, #0xaaaa, lsl #32
   44dfc:	tst	x10, x11
   44e00:	b.ne	44e78 <aarch64_sys_reg_supported_p@@Base+0x520>  // b.any
   44e04:	mov	w10, #0xffff8bf8            	// #-29704
   44e08:	add	w10, w8, w10
   44e0c:	cmp	w10, #0x2d
   44e10:	b.hi	44e2c <aarch64_sys_reg_supported_p@@Base+0x4d4>  // b.pmore
   44e14:	mov	w11, #0x1                   	// #1
   44e18:	lsl	x10, x11, x10
   44e1c:	mov	x11, #0x23                  	// #35
   44e20:	movk	x11, #0x2200, lsl #32
   44e24:	tst	x10, x11
   44e28:	b.ne	44e78 <aarch64_sys_reg_supported_p@@Base+0x520>  // b.any
   44e2c:	mov	w10, #0xffff8bef            	// #-29713
   44e30:	add	w10, w8, w10
   44e34:	ror	w10, w10, #2
   44e38:	cmp	w10, #0x7
   44e3c:	b.hi	44e7c <aarch64_sys_reg_supported_p@@Base+0x524>  // b.pmore
   44e40:	mov	w11, #0x1                   	// #1
   44e44:	lsl	w10, w11, w10
   44e48:	mov	w11, #0xc3                  	// #195
   44e4c:	tst	w10, w11
   44e50:	b.ne	44e78 <aarch64_sys_reg_supported_p@@Base+0x520>  // b.any
   44e54:	b	44e7c <aarch64_sys_reg_supported_p@@Base+0x524>
   44e58:	mov	w11, #0x1                   	// #1
   44e5c:	lsl	x10, x11, x10
   44e60:	mov	x11, #0x9cd1                	// #40145
   44e64:	movk	x11, #0x4008, lsl #16
   44e68:	movk	x11, #0x88b7, lsl #32
   44e6c:	movk	x11, #0x8, lsl #48
   44e70:	tst	x10, x11
   44e74:	b.eq	44ddc <aarch64_sys_reg_supported_p@@Base+0x484>  // b.none
   44e78:	tbnz	w9, #0, 44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>
   44e7c:	mov	x9, #0x82000000000         	// #8933531975680
   44e80:	bics	xzr, x9, x0
   44e84:	b.eq	44e98 <aarch64_sys_reg_supported_p@@Base+0x540>  // b.none
   44e88:	and	w9, w8, #0xfffffffe
   44e8c:	mov	w10, #0xd920                	// #55584
   44e90:	cmp	w9, w10
   44e94:	b.eq	44f20 <aarch64_sys_reg_supported_p@@Base+0x5c8>  // b.none
   44e98:	mov	w9, #0xc803                	// #51203
   44e9c:	cmp	w8, w9
   44ea0:	b.le	44ee0 <aarch64_sys_reg_supported_p@@Base+0x588>
   44ea4:	mov	w9, #0xe2af                	// #58031
   44ea8:	cmp	w8, w9
   44eac:	b.le	44f04 <aarch64_sys_reg_supported_p@@Base+0x5ac>
   44eb0:	mov	w9, #0xe2b0                	// #58032
   44eb4:	cmp	w8, w9
   44eb8:	b.eq	44f1c <aarch64_sys_reg_supported_p@@Base+0x5c4>  // b.none
   44ebc:	mov	w9, #0xf2b0                	// #62128
   44ec0:	cmp	w8, w9
   44ec4:	b.eq	44f1c <aarch64_sys_reg_supported_p@@Base+0x5c4>  // b.none
   44ec8:	mov	w9, #0xeab0                	// #60080
   44ecc:	b	44f14 <aarch64_sys_reg_supported_p@@Base+0x5bc>
   44ed0:	mov	w9, #0xc107                	// #49415
   44ed4:	cmp	w8, w9
   44ed8:	b.gt	44b6c <aarch64_sys_reg_supported_p@@Base+0x214>
   44edc:	b	44b00 <aarch64_sys_reg_supported_p@@Base+0x1a8>
   44ee0:	mov	w9, #0xffff3f7b            	// #-49285
   44ee4:	add	w9, w8, w9
   44ee8:	cmp	w9, #0x2
   44eec:	b.cc	44f1c <aarch64_sys_reg_supported_p@@Base+0x5c4>  // b.lo, b.ul, b.last
   44ef0:	mov	w9, #0xffff3d50            	// #-49840
   44ef4:	add	w8, w8, w9
   44ef8:	cmp	w8, #0x2
   44efc:	b.cc	44f1c <aarch64_sys_reg_supported_p@@Base+0x5c4>  // b.lo, b.ul, b.last
   44f00:	b	44960 <aarch64_sys_reg_supported_p@@Base+0x8>
   44f04:	mov	w9, #0xc804                	// #51204
   44f08:	cmp	w8, w9
   44f0c:	b.eq	44f1c <aarch64_sys_reg_supported_p@@Base+0x5c4>  // b.none
   44f10:	mov	w9, #0xda17                	// #55831
   44f14:	cmp	w8, w9
   44f18:	b.ne	44960 <aarch64_sys_reg_supported_p@@Base+0x8>  // b.any
   44f1c:	tbnz	x0, #48, 44960 <aarch64_sys_reg_supported_p@@Base+0x8>
   44f20:	mov	w0, wzr
   44f24:	ret
   44f28:	mov	w9, #0xe090                	// #57488
   44f2c:	cmp	w8, w9
   44f30:	b.ne	44cc0 <aarch64_sys_reg_supported_p@@Base+0x368>  // b.any
   44f34:	b	44d54 <aarch64_sys_reg_supported_p@@Base+0x3fc>

0000000000044f38 <aarch64_pstatefield_supported_p@@Base>:
   44f38:	ldrb	w8, [x1, #12]
   44f3c:	tbnz	w8, #1, 44f48 <aarch64_pstatefield_supported_p@@Base+0x10>
   44f40:	mov	w0, #0x1                   	// #1
   44f44:	ret
   44f48:	ldr	w8, [x1, #8]
   44f4c:	tbnz	w0, #21, 44f60 <aarch64_pstatefield_supported_p@@Base+0x28>
   44f50:	cmp	w8, #0x4
   44f54:	b.ne	44f60 <aarch64_pstatefield_supported_p@@Base+0x28>  // b.any
   44f58:	mov	w0, wzr
   44f5c:	ret
   44f60:	tbnz	w0, #5, 44f74 <aarch64_pstatefield_supported_p@@Base+0x3c>
   44f64:	cmp	w8, #0x3
   44f68:	b.ne	44f74 <aarch64_pstatefield_supported_p@@Base+0x3c>  // b.any
   44f6c:	mov	w0, wzr
   44f70:	ret
   44f74:	tbnz	x0, #47, 44f88 <aarch64_pstatefield_supported_p@@Base+0x50>
   44f78:	cmp	w8, #0x19
   44f7c:	b.ne	44f88 <aarch64_pstatefield_supported_p@@Base+0x50>  // b.any
   44f80:	mov	w0, wzr
   44f84:	ret
   44f88:	tbnz	w0, #11, 44f9c <aarch64_pstatefield_supported_p@@Base+0x64>
   44f8c:	cmp	w8, #0x1a
   44f90:	b.ne	44f9c <aarch64_pstatefield_supported_p@@Base+0x64>  // b.any
   44f94:	mov	w0, wzr
   44f98:	ret
   44f9c:	cmp	w8, #0x1c
   44fa0:	cset	w8, ne  // ne = any
   44fa4:	ubfx	x9, x0, #48, #1
   44fa8:	orr	w0, w9, w8
   44fac:	ret

0000000000044fb0 <aarch64_sys_ins_reg_has_xt@@Base>:
   44fb0:	ldr	w8, [x0, #12]
   44fb4:	ubfx	w0, w8, #2, #1
   44fb8:	ret

0000000000044fbc <aarch64_sys_ins_reg_supported_p@@Base>:
   44fbc:	ldrb	w8, [x1, #12]
   44fc0:	tbnz	w8, #1, 44fcc <aarch64_sys_ins_reg_supported_p@@Base+0x10>
   44fc4:	mov	w0, #0x1                   	// #1
   44fc8:	ret
   44fcc:	ldr	w8, [x1, #8]
   44fd0:	tbnz	w0, #5, 44fe8 <aarch64_sys_ins_reg_supported_p@@Base+0x2c>
   44fd4:	mov	w9, #0x5be1                	// #23521
   44fd8:	cmp	w8, w9
   44fdc:	b.ne	44fe8 <aarch64_sys_ins_reg_supported_p@@Base+0x2c>  // b.any
   44fe0:	mov	w0, wzr
   44fe4:	ret
   44fe8:	tbnz	x0, #42, 45000 <aarch64_sys_ins_reg_supported_p@@Base+0x44>
   44fec:	mov	w9, #0x5be9                	// #23529
   44ff0:	cmp	w8, w9
   44ff4:	b.ne	45000 <aarch64_sys_ins_reg_supported_p@@Base+0x44>  // b.any
   44ff8:	mov	w0, wzr
   44ffc:	ret
   45000:	mov	w9, #0xffffa45d            	// #-23459
   45004:	add	w9, w8, w9
   45008:	cmp	w9, #0x52
   4500c:	b.hi	45028 <aarch64_sys_ins_reg_supported_p@@Base+0x6c>  // b.pmore
   45010:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   45014:	add	x10, x10, #0xd3c
   45018:	adr	x11, 45050 <aarch64_sys_ins_reg_supported_p@@Base+0x94>
   4501c:	ldrb	w12, [x10, x9]
   45020:	add	x11, x11, x12, lsl #2
   45024:	br	x11
   45028:	mov	w9, #0xffffbc4d            	// #-17331
   4502c:	add	w9, w8, w9
   45030:	cmp	w9, #0x43
   45034:	b.hi	4505c <aarch64_sys_ins_reg_supported_p@@Base+0xa0>  // b.pmore
   45038:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   4503c:	add	x10, x10, #0xcf8
   45040:	adr	x11, 45050 <aarch64_sys_ins_reg_supported_p@@Base+0x94>
   45044:	ldrb	w12, [x10, x9]
   45048:	add	x11, x11, x12, lsl #2
   4504c:	br	x11
   45050:	tbnz	x0, #48, 4505c <aarch64_sys_ins_reg_supported_p@@Base+0xa0>
   45054:	mov	w0, wzr
   45058:	ret
   4505c:	tbnz	w0, #5, 45078 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>
   45060:	and	w9, w8, #0xfffffffe
   45064:	mov	w10, #0x43c8                	// #17352
   45068:	cmp	w9, w10
   4506c:	b.ne	45078 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>  // b.any
   45070:	mov	w0, wzr
   45074:	ret
   45078:	mov	w9, #0x5b98                	// #23448
   4507c:	cmp	w8, w9
   45080:	cset	w8, ne  // ne = any
   45084:	ubfx	x9, x0, #41, #1
   45088:	orr	w0, w9, w8
   4508c:	ret

0000000000045090 <init_insn_sequence@@Base>:
   45090:	stp	x29, x30, [sp, #-32]!
   45094:	stp	x20, x19, [sp, #16]
   45098:	mov	x20, x0
   4509c:	ldr	x0, [x1]
   450a0:	mov	x19, x1
   450a4:	mov	x29, sp
   450a8:	str	wzr, [x1, #24]
   450ac:	str	wzr, [x1, #8]
   450b0:	cbz	x0, 450b8 <init_insn_sequence@@Base+0x28>
   450b4:	bl	35810 <free@plt>
   450b8:	str	xzr, [x19]
   450bc:	cbz	x20, 450e4 <init_insn_sequence@@Base+0x54>
   450c0:	mov	w0, #0x168                 	// #360
   450c4:	bl	35520 <xmalloc@plt>
   450c8:	mov	w2, #0x168                 	// #360
   450cc:	mov	x1, x20
   450d0:	str	x0, [x19]
   450d4:	bl	35110 <memcpy@plt>
   450d8:	ldr	x8, [x20, #8]
   450dc:	ldr	w8, [x8, #128]
   450e0:	and	w20, w8, #0x1
   450e4:	ldr	x0, [x19, #16]
   450e8:	cbz	x0, 450f0 <init_insn_sequence@@Base+0x60>
   450ec:	bl	35810 <free@plt>
   450f0:	str	xzr, [x19, #16]
   450f4:	cbz	w20, 45120 <init_insn_sequence@@Base+0x90>
   450f8:	mov	w8, #0x168                 	// #360
   450fc:	mul	w20, w20, w8
   45100:	mov	x0, x20
   45104:	bl	35520 <xmalloc@plt>
   45108:	str	x0, [x19, #16]
   4510c:	mov	x2, x20
   45110:	ldp	x20, x19, [sp, #16]
   45114:	mov	w1, wzr
   45118:	ldp	x29, x30, [sp], #32
   4511c:	b	35510 <memset@plt>
   45120:	ldp	x20, x19, [sp, #16]
   45124:	ldp	x29, x30, [sp], #32
   45128:	ret

000000000004512c <verify_constraints@@Base>:
   4512c:	stp	x29, x30, [sp, #-64]!
   45130:	stp	x24, x23, [sp, #16]
   45134:	stp	x22, x21, [sp, #32]
   45138:	stp	x20, x19, [sp, #48]
   4513c:	mov	x29, sp
   45140:	cbz	x0, 4566c <verify_constraints@@Base+0x540>
   45144:	ldr	x8, [x0, #8]
   45148:	mov	x20, x0
   4514c:	cbz	x8, 4568c <verify_constraints@@Base+0x560>
   45150:	ldr	w11, [x8, #128]
   45154:	mov	x19, x5
   45158:	mov	x21, x4
   4515c:	cbz	w11, 4516c <verify_constraints@@Base+0x40>
   45160:	cbz	x19, 456ac <verify_constraints@@Base+0x580>
   45164:	ldr	x12, [x19]
   45168:	b	45174 <verify_constraints@@Base+0x48>
   4516c:	ldr	x12, [x19]
   45170:	cbz	x12, 451ec <verify_constraints@@Base+0xc0>
   45174:	ldr	w9, [x8, #120]
   45178:	tbnz	w9, #31, 451f4 <verify_constraints@@Base+0xc8>
   4517c:	cbz	x12, 451ec <verify_constraints@@Base+0xc0>
   45180:	cbnz	x2, 45248 <verify_constraints@@Base+0x11c>
   45184:	cbnz	w3, 45248 <verify_constraints@@Base+0x11c>
   45188:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   4518c:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   45190:	mov	w8, #0x2                   	// #2
   45194:	add	x0, x0, #0x270
   45198:	add	x1, x1, #0x200
   4519c:	mov	w2, #0x5                   	// #5
   451a0:	str	w8, [x21]
   451a4:	bl	35a50 <dcgettext@plt>
   451a8:	mov	w8, #0xffffffff            	// #-1
   451ac:	mov	w9, #0x1                   	// #1
   451b0:	str	x0, [x21, #8]
   451b4:	str	w8, [x21, #4]
   451b8:	str	w9, [x21, #28]
   451bc:	ldr	x0, [x19]
   451c0:	str	wzr, [x19, #24]
   451c4:	str	wzr, [x19, #8]
   451c8:	cbz	x0, 451d0 <verify_constraints@@Base+0xa4>
   451cc:	bl	35810 <free@plt>
   451d0:	ldr	x0, [x19, #16]
   451d4:	str	xzr, [x19]
   451d8:	cbz	x0, 451e0 <verify_constraints@@Base+0xb4>
   451dc:	bl	35810 <free@plt>
   451e0:	str	xzr, [x19, #16]
   451e4:	mov	w22, #0x4                   	// #4
   451e8:	b	45394 <verify_constraints@@Base+0x268>
   451ec:	mov	w22, wzr
   451f0:	b	45394 <verify_constraints@@Base+0x268>
   451f4:	cbz	x12, 4525c <verify_constraints@@Base+0x130>
   451f8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   451fc:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   45200:	mov	w8, #0x2                   	// #2
   45204:	add	x0, x0, #0x270
   45208:	add	x1, x1, #0x1ba
   4520c:	mov	w2, #0x5                   	// #5
   45210:	str	w8, [x21]
   45214:	bl	35a50 <dcgettext@plt>
   45218:	mov	w8, #0xffffffff            	// #-1
   4521c:	mov	w9, #0x1                   	// #1
   45220:	str	x0, [x21, #8]
   45224:	str	w8, [x21, #4]
   45228:	str	w9, [x21, #28]
   4522c:	ldr	x0, [x19]
   45230:	str	wzr, [x19, #24]
   45234:	str	wzr, [x19, #8]
   45238:	cbz	x0, 45240 <verify_constraints@@Base+0x114>
   4523c:	bl	35810 <free@plt>
   45240:	mov	w22, #0x4                   	// #4
   45244:	b	45268 <verify_constraints@@Base+0x13c>
   45248:	ldr	x9, [x12, #8]
   4524c:	ldrb	w9, [x9, #128]
   45250:	tbnz	w9, #0, 452c8 <verify_constraints@@Base+0x19c>
   45254:	mov	w22, wzr
   45258:	b	4533c <verify_constraints@@Base+0x210>
   4525c:	mov	w22, wzr
   45260:	str	wzr, [x19, #24]
   45264:	str	wzr, [x19, #8]
   45268:	mov	w0, #0x168                 	// #360
   4526c:	str	xzr, [x19]
   45270:	bl	35520 <xmalloc@plt>
   45274:	mov	w2, #0x168                 	// #360
   45278:	mov	x1, x20
   4527c:	str	x0, [x19]
   45280:	bl	35110 <memcpy@plt>
   45284:	ldr	x8, [x20, #8]
   45288:	ldr	x0, [x19, #16]
   4528c:	ldr	w8, [x8, #128]
   45290:	and	x20, x8, #0x1
   45294:	cbz	x0, 4529c <verify_constraints@@Base+0x170>
   45298:	bl	35810 <free@plt>
   4529c:	str	xzr, [x19, #16]
   452a0:	cbz	w20, 45394 <verify_constraints@@Base+0x268>
   452a4:	mov	w8, #0x168                 	// #360
   452a8:	mul	x20, x20, x8
   452ac:	mov	x0, x20
   452b0:	bl	35520 <xmalloc@plt>
   452b4:	mov	w1, wzr
   452b8:	mov	x2, x20
   452bc:	str	x0, [x19, #16]
   452c0:	bl	35510 <memset@plt>
   452c4:	b	45394 <verify_constraints@@Base+0x268>
   452c8:	ldr	x9, [x8, #24]
   452cc:	cbz	x9, 45304 <verify_constraints@@Base+0x1d8>
   452d0:	ldr	w9, [x9]
   452d4:	mov	w10, #0x10                  	// #16
   452d8:	movk	w10, #0x1000, lsl #16
   452dc:	tst	w9, w10
   452e0:	b.eq	45304 <verify_constraints@@Base+0x1d8>  // b.none
   452e4:	tbnz	w11, #0, 453ac <verify_constraints@@Base+0x280>
   452e8:	mov	w8, #0x2                   	// #2
   452ec:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   452f0:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   452f4:	str	w8, [x21]
   452f8:	add	x0, x0, #0x270
   452fc:	add	x1, x1, #0x250
   45300:	b	4531c <verify_constraints@@Base+0x1f0>
   45304:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   45308:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   4530c:	mov	w8, #0x2                   	// #2
   45310:	add	x0, x0, #0x270
   45314:	add	x1, x1, #0x227
   45318:	str	w8, [x21]
   4531c:	mov	w2, #0x5                   	// #5
   45320:	bl	35a50 <dcgettext@plt>
   45324:	mov	w8, #0xffffffff            	// #-1
   45328:	mov	w9, #0x1                   	// #1
   4532c:	str	x0, [x21, #8]
   45330:	str	w8, [x21, #4]
   45334:	str	w9, [x21, #28]
   45338:	mov	w22, #0x4                   	// #4
   4533c:	ldrsw	x8, [x19, #24]
   45340:	ldr	x9, [x19, #16]
   45344:	mov	w2, #0x168                 	// #360
   45348:	mov	x1, x20
   4534c:	add	w10, w8, #0x1
   45350:	add	x0, x9, x8, lsl #3
   45354:	str	w10, [x19, #24]
   45358:	bl	35110 <memcpy@plt>
   4535c:	ldr	w8, [x19, #24]
   45360:	ldr	w9, [x19, #8]
   45364:	cmp	w8, w9
   45368:	b.lt	45394 <verify_constraints@@Base+0x268>  // b.tstop
   4536c:	ldr	x0, [x19]
   45370:	str	wzr, [x19, #24]
   45374:	str	wzr, [x19, #8]
   45378:	cbz	x0, 45380 <verify_constraints@@Base+0x254>
   4537c:	bl	35810 <free@plt>
   45380:	ldr	x0, [x19, #16]
   45384:	str	xzr, [x19]
   45388:	cbz	x0, 45390 <verify_constraints@@Base+0x264>
   4538c:	bl	35810 <free@plt>
   45390:	str	xzr, [x19, #16]
   45394:	mov	w0, w22
   45398:	ldp	x20, x19, [sp, #48]
   4539c:	ldp	x22, x21, [sp, #32]
   453a0:	ldp	x24, x23, [sp, #16]
   453a4:	ldp	x29, x30, [sp], #64
   453a8:	ret
   453ac:	ldr	w9, [x12, #24]
   453b0:	cmp	w9, #0xc1
   453b4:	b.ne	4570c <verify_constraints@@Base+0x5e0>  // b.any
   453b8:	ldr	w13, [x12, #80]
   453bc:	ldrb	w9, [x12, #28]
   453c0:	ldr	w10, [x12, #40]
   453c4:	cmp	w13, #0xa4
   453c8:	b.ne	453d8 <verify_constraints@@Base+0x2ac>  // b.any
   453cc:	ldr	w14, [x12, #96]
   453d0:	mov	w16, #0x1                   	// #1
   453d4:	b	453e0 <verify_constraints@@Base+0x2b4>
   453d8:	mov	w16, wzr
   453dc:	mov	w14, wzr
   453e0:	add	x15, x8, #0x20
   453e4:	mov	x13, #0xffffffff00000000    	// #-4294967296
   453e8:	mov	w12, #0x1                   	// #1
   453ec:	mov	x17, #0x100000000           	// #4294967296
   453f0:	ldr	w18, [x15], #4
   453f4:	add	x13, x13, x17
   453f8:	sub	w12, w12, #0x1
   453fc:	cbnz	w18, 453f0 <verify_constraints@@Base+0x2c4>
   45400:	neg	w15, w12
   45404:	cmp	w15, #0x6
   45408:	b.hi	4572c <verify_constraints@@Base+0x600>  // b.pmore
   4540c:	cbz	w12, 456ec <verify_constraints@@Base+0x5c0>
   45410:	asr	x1, x13, #32
   45414:	adrp	x13, 9b000 <aarch64_operands@@Base+0x16c38>
   45418:	ldr	x13, [x13, #3776]
   4541c:	adrp	x3, 58000 <xexit@@Base+0x1dd4>
   45420:	mov	x0, xzr
   45424:	mov	w18, wzr
   45428:	mov	w17, wzr
   4542c:	mov	w22, wzr
   45430:	mov	w15, wzr
   45434:	mov	w12, wzr
   45438:	add	x2, x20, #0x28
   4543c:	mov	w23, #0xffffffff            	// #-1
   45440:	add	x3, x3, #0xd8f
   45444:	b	45464 <verify_constraints@@Base+0x338>
   45448:	mov	w23, w0
   4544c:	mov	w17, w5
   45450:	mov	w18, w4
   45454:	add	x0, x0, #0x1
   45458:	cmp	x0, x1
   4545c:	add	x2, x2, #0x38
   45460:	b.ge	454bc <verify_constraints@@Base+0x390>  // b.tcont
   45464:	ldur	w4, [x2, #-16]
   45468:	sub	w6, w4, #0x17
   4546c:	cmp	w6, #0xb5
   45470:	b.hi	45454 <verify_constraints@@Base+0x328>  // b.pmore
   45474:	ldurb	w4, [x2, #-12]
   45478:	ldr	w5, [x2]
   4547c:	adr	x7, 45448 <verify_constraints@@Base+0x31c>
   45480:	ldrb	w24, [x3, x6]
   45484:	add	x7, x7, x24, lsl #2
   45488:	br	x7
   4548c:	add	x6, x13, x4, lsl #5
   45490:	ldr	w6, [x6, #24]
   45494:	cmp	w6, #0x1
   45498:	b.ne	456cc <verify_constraints@@Base+0x5a0>  // b.any
   4549c:	lsl	x4, x4, #5
   454a0:	ldrb	w4, [x13, x4]
   454a4:	cmp	w5, w10
   454a8:	csel	w22, w0, w22, eq  // eq = none
   454ac:	cinc	w15, w15, eq  // eq = none
   454b0:	cmp	w4, w12, uxtb
   454b4:	csel	w12, w4, w12, hi  // hi = pmore
   454b8:	b	45454 <verify_constraints@@Base+0x328>
   454bc:	tst	w12, #0xff
   454c0:	b.eq	456ec <verify_constraints@@Base+0x5c0>  // b.none
   454c4:	ldrb	w0, [x20, #28]
   454c8:	ldr	w1, [x20, #40]
   454cc:	tbnz	w11, #1, 454e8 <verify_constraints@@Base+0x3bc>
   454d0:	add	x11, x13, x0, lsl #5
   454d4:	ldr	w11, [x11, #24]
   454d8:	cmp	w11, #0x1
   454dc:	b.ne	456cc <verify_constraints@@Base+0x5a0>  // b.any
   454e0:	lsl	x11, x0, #5
   454e4:	ldr	w12, [x13, x11]
   454e8:	cbz	w16, 45504 <verify_constraints@@Base+0x3d8>
   454ec:	tbnz	w23, #31, 45570 <verify_constraints@@Base+0x444>
   454f0:	and	w11, w18, #0xff
   454f4:	cmp	w11, #0x18
   454f8:	b.ne	4558c <verify_constraints@@Base+0x460>  // b.any
   454fc:	cmp	w14, w17
   45500:	b.ne	455f0 <verify_constraints@@Base+0x4c4>  // b.any
   45504:	ldr	w11, [x8, #32]
   45508:	cbz	w11, 4552c <verify_constraints@@Base+0x400>
   4550c:	add	x8, x8, #0x24
   45510:	ldr	w14, [x8]
   45514:	cbz	w14, 4552c <verify_constraints@@Base+0x400>
   45518:	cmp	w14, w11
   4551c:	add	x8, x8, #0x4
   45520:	b.ne	45510 <verify_constraints@@Base+0x3e4>  // b.any
   45524:	mov	w8, #0x2                   	// #2
   45528:	b	45530 <verify_constraints@@Base+0x404>
   4552c:	mov	w8, #0x1                   	// #1
   45530:	cbz	w15, 455a8 <verify_constraints@@Base+0x47c>
   45534:	cmp	w10, w1
   45538:	b.ne	455c4 <verify_constraints@@Base+0x498>  // b.any
   4553c:	cmp	w15, w8
   45540:	b.le	45624 <verify_constraints@@Base+0x4f8>
   45544:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   45548:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   4554c:	mov	w8, #0x2                   	// #2
   45550:	add	x0, x0, #0x270
   45554:	add	x1, x1, #0x3d9
   45558:	mov	w2, #0x5                   	// #5
   4555c:	str	w8, [x21]
   45560:	bl	35a50 <dcgettext@plt>
   45564:	str	x0, [x21, #8]
   45568:	str	w22, [x21, #4]
   4556c:	b	45618 <verify_constraints@@Base+0x4ec>
   45570:	mov	w8, #0x2                   	// #2
   45574:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   45578:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   4557c:	str	w8, [x21]
   45580:	add	x0, x0, #0x270
   45584:	add	x1, x1, #0x2b6
   45588:	b	4531c <verify_constraints@@Base+0x1f0>
   4558c:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   45590:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   45594:	mov	w8, #0x2                   	// #2
   45598:	add	x0, x0, #0x270
   4559c:	add	x1, x1, #0x2e6
   455a0:	str	w8, [x21]
   455a4:	b	45608 <verify_constraints@@Base+0x4dc>
   455a8:	mov	w8, #0x2                   	// #2
   455ac:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   455b0:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   455b4:	str	w8, [x21]
   455b8:	add	x0, x0, #0x270
   455bc:	add	x1, x1, #0x358
   455c0:	b	455dc <verify_constraints@@Base+0x4b0>
   455c4:	mov	w8, #0x2                   	// #2
   455c8:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   455cc:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   455d0:	str	w8, [x21]
   455d4:	add	x0, x0, #0x270
   455d8:	add	x1, x1, #0x39f
   455dc:	mov	w2, #0x5                   	// #5
   455e0:	bl	35a50 <dcgettext@plt>
   455e4:	str	x0, [x21, #8]
   455e8:	str	wzr, [x21, #4]
   455ec:	b	45618 <verify_constraints@@Base+0x4ec>
   455f0:	mov	w8, #0x2                   	// #2
   455f4:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   455f8:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   455fc:	str	w8, [x21]
   45600:	add	x0, x0, #0x270
   45604:	add	x1, x1, #0x31c
   45608:	mov	w2, #0x5                   	// #5
   4560c:	bl	35a50 <dcgettext@plt>
   45610:	str	x0, [x21, #8]
   45614:	str	w23, [x21, #4]
   45618:	mov	w8, #0x1                   	// #1
   4561c:	str	w8, [x21, #28]
   45620:	b	45338 <verify_constraints@@Base+0x20c>
   45624:	mov	w22, wzr
   45628:	cbz	w9, 4533c <verify_constraints@@Base+0x210>
   4562c:	cbz	w0, 4533c <verify_constraints@@Base+0x210>
   45630:	add	x8, x13, x9, lsl #5
   45634:	ldr	w8, [x8, #24]
   45638:	cmp	w8, #0x1
   4563c:	b.ne	456cc <verify_constraints@@Base+0x5a0>  // b.any
   45640:	lsl	x8, x9, #5
   45644:	ldrb	w8, [x13, x8]
   45648:	cmp	w8, w12, uxtb
   4564c:	b.eq	45254 <verify_constraints@@Base+0x128>  // b.none
   45650:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   45654:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   45658:	mov	w8, #0x2                   	// #2
   4565c:	add	x0, x0, #0x270
   45660:	add	x1, x1, #0x40e
   45664:	str	w8, [x21]
   45668:	b	455dc <verify_constraints@@Base+0x4b0>
   4566c:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   45670:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45674:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   45678:	add	x0, x0, #0x323
   4567c:	add	x1, x1, #0x50e
   45680:	add	x3, x3, #0x104
   45684:	mov	w2, #0x12ff                	// #4863
   45688:	bl	35b30 <__assert_fail@plt>
   4568c:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   45690:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45694:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   45698:	add	x0, x0, #0x19f
   4569c:	add	x1, x1, #0x50e
   456a0:	add	x3, x3, #0x104
   456a4:	mov	w2, #0x1300                	// #4864
   456a8:	bl	35b30 <__assert_fail@plt>
   456ac:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   456b0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   456b4:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   456b8:	add	x0, x0, #0x1ac
   456bc:	add	x1, x1, #0x50e
   456c0:	add	x3, x3, #0x104
   456c4:	mov	w2, #0x1306                	// #4870
   456c8:	bl	35b30 <__assert_fail@plt>
   456cc:	adrp	x0, 59000 <fields@@Base+0x1b4>
   456d0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   456d4:	adrp	x3, 59000 <fields@@Base+0x1b4>
   456d8:	add	x0, x0, #0x737
   456dc:	add	x1, x1, #0x50e
   456e0:	add	x3, x3, #0x767
   456e4:	mov	w2, #0x30e                 	// #782
   456e8:	bl	35b30 <__assert_fail@plt>
   456ec:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   456f0:	adrp	x1, 59000 <fields@@Base+0x1b4>
   456f4:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   456f8:	add	x0, x0, #0x2a3
   456fc:	add	x1, x1, #0x50e
   45700:	add	x3, x3, #0x104
   45704:	mov	w2, #0x138b                	// #5003
   45708:	bl	35b30 <__assert_fail@plt>
   4570c:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   45710:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45714:	adrp	x3, 5b000 <fields@@Base+0x21b4>
   45718:	add	x0, x0, #0x27e
   4571c:	add	x1, x1, #0x50e
   45720:	add	x3, x3, #0x104
   45724:	mov	w2, #0x1352                	// #4946
   45728:	bl	35b30 <__assert_fail@plt>
   4572c:	adrp	x0, 59000 <fields@@Base+0x1b4>
   45730:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45734:	adrp	x3, 59000 <fields@@Base+0x1b4>
   45738:	add	x0, x0, #0x83b
   4573c:	add	x1, x1, #0x50e
   45740:	add	x3, x3, #0x85f
   45744:	mov	w2, #0x372                 	// #882
   45748:	bl	35b30 <__assert_fail@plt>

000000000004574c <aarch64_sve_dupm_mov_immediate_p@@Base>:
   4574c:	lsl	w8, w1, #2
   45750:	mov	x9, #0xffffffffffffffff    	// #-1
   45754:	lsl	x9, x9, x8
   45758:	lsl	x8, x9, x8
   4575c:	tst	x8, x0
   45760:	b.eq	45778 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   45764:	orr	x8, x8, x0
   45768:	cmp	x8, x0
   4576c:	b.eq	45778 <aarch64_sve_dupm_mov_immediate_p@@Base+0x2c>  // b.none
   45770:	mov	w0, wzr
   45774:	ret
   45778:	cmp	w1, #0x5
   4577c:	b.ge	45794 <aarch64_sve_dupm_mov_immediate_p@@Base+0x48>  // b.tcont
   45780:	cmp	w1, #0x3
   45784:	b.ge	457a0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x54>  // b.tcont
   45788:	cmp	w1, #0x1
   4578c:	b.eq	45770 <aarch64_sve_dupm_mov_immediate_p@@Base+0x24>  // b.none
   45790:	b	457b4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x68>
   45794:	lsr	x8, x0, #32
   45798:	cmp	w0, w8
   4579c:	b.ne	457c4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x78>  // b.any
   457a0:	eor	w8, w0, w0, lsr #16
   457a4:	tst	x8, #0xffff
   457a8:	b.eq	457b4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x68>  // b.none
   457ac:	sxtw	x0, w0
   457b0:	b	457c4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x78>
   457b4:	eor	w8, w0, w0, lsr #8
   457b8:	tst	x8, #0xff
   457bc:	b.eq	45770 <aarch64_sve_dupm_mov_immediate_p@@Base+0x24>  // b.none
   457c0:	sxth	x0, w0
   457c4:	add	x8, x0, #0xff
   457c8:	cmp	x0, #0x0
   457cc:	csel	x8, x8, x0, lt  // lt = tstop
   457d0:	asr	x8, x8, #8
   457d4:	tst	x0, #0xff
   457d8:	csel	x8, x8, x0, eq  // eq = none
   457dc:	cmp	x8, w8, sxtb
   457e0:	cset	w0, ne  // ne = any
   457e4:	ret
   457e8:	stp	x29, x30, [sp, #-16]!
   457ec:	ldr	x9, [x0, #8]
   457f0:	mov	x29, sp
   457f4:	cbz	x9, 4583c <aarch64_sve_dupm_mov_immediate_p@@Base+0xf0>
   457f8:	ldr	w9, [x9, #40]
   457fc:	cmp	w9, #0x21
   45800:	b.ne	4585c <aarch64_sve_dupm_mov_immediate_p@@Base+0x110>  // b.any
   45804:	mov	x8, x0
   45808:	mov	w0, w1
   4580c:	cbz	w3, 45814 <aarch64_sve_dupm_mov_immediate_p@@Base+0xc8>
   45810:	ldr	w0, [x8]
   45814:	cbz	w0, 4587c <aarch64_sve_dupm_mov_immediate_p@@Base+0x130>
   45818:	mov	w2, #0x2                   	// #2
   4581c:	mov	w3, #0x7d                  	// #125
   45820:	mov	w4, #0x3e                  	// #62
   45824:	mov	w1, wzr
   45828:	bl	35440 <extract_fields@plt>
   4582c:	cmp	w0, #0x3
   45830:	cset	w0, eq  // eq = none
   45834:	ldp	x29, x30, [sp], #16
   45838:	ret
   4583c:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   45840:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45844:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   45848:	add	x0, x0, #0x19f
   4584c:	add	x1, x1, #0x50e
   45850:	add	x3, x3, #0xc50
   45854:	mov	w2, #0x12b7                	// #4791
   45858:	bl	35b30 <__assert_fail@plt>
   4585c:	adrp	x0, 5d000 <fields@@Base+0x41b4>
   45860:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45864:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   45868:	add	x0, x0, #0xce7
   4586c:	add	x1, x1, #0x50e
   45870:	add	x3, x3, #0xc50
   45874:	mov	w2, #0x12b8                	// #4792
   45878:	bl	35b30 <__assert_fail@plt>
   4587c:	adrp	x0, 58000 <xexit@@Base+0x1dd4>
   45880:	adrp	x1, 59000 <fields@@Base+0x1b4>
   45884:	adrp	x3, 5d000 <fields@@Base+0x41b4>
   45888:	add	x0, x0, #0x465
   4588c:	add	x1, x1, #0x50e
   45890:	add	x3, x3, #0xc50
   45894:	mov	w2, #0x12ba                	// #4794
   45898:	bl	35b30 <__assert_fail@plt>
   4589c:	and	w8, w1, #0x1f
   458a0:	ubfx	w9, w1, #10, #5
   458a4:	tbz	w1, #23, 458d4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>
   458a8:	ubfx	w12, w1, #5, #5
   458ac:	cmp	w8, w12
   458b0:	cset	w10, ne  // ne = any
   458b4:	cmp	w9, w12
   458b8:	cset	w11, ne  // ne = any
   458bc:	cmp	w12, #0x1f
   458c0:	b.eq	458d4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>  // b.none
   458c4:	and	w10, w11, w10
   458c8:	cbnz	w10, 458d4 <aarch64_sve_dupm_mov_immediate_p@@Base+0x188>
   458cc:	mov	w0, #0x1                   	// #1
   458d0:	ret
   458d4:	cmp	w8, w9
   458d8:	cset	w8, eq  // eq = none
   458dc:	and	w0, w8, w1, lsr #22
   458e0:	ret

00000000000458e4 <aarch64_find_real_opcode@@Base>:
   458e4:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   458e8:	ldr	x8, [x8, #3848]
   458ec:	mov	w10, #0x8e39                	// #36409
   458f0:	movk	w10, #0x38e3, lsl #16
   458f4:	sub	x9, x0, x8
   458f8:	lsr	x9, x9, #4
   458fc:	mul	w9, w9, w10
   45900:	sub	w9, w9, #0x2
   45904:	cmp	w9, #0x7fb
   45908:	mov	x0, xzr
   4590c:	b.hi	45d20 <aarch64_find_real_opcode@@Base+0x43c>  // b.pmore
   45910:	adrp	x10, 5d000 <fields@@Base+0x41b4>
   45914:	add	x10, x10, #0xd14
   45918:	adr	x11, 4592c <aarch64_find_real_opcode@@Base+0x48>
   4591c:	ldrb	w12, [x10, x9]
   45920:	add	x11, x11, x12, lsl #2
   45924:	mov	w9, #0x2                   	// #2
   45928:	br	x11
   4592c:	mov	w9, #0x4a9                 	// #1193
   45930:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45934:	mov	w9, #0x4c0                 	// #1216
   45938:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4593c:	mov	w9, #0x26a                 	// #618
   45940:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45944:	mov	w9, #0x275                 	// #629
   45948:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4594c:	mov	w9, #0x271                 	// #625
   45950:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45954:	mov	w9, #0x1a                  	// #26
   45958:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4595c:	mov	w9, #0x297                 	// #663
   45960:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45964:	mov	w9, #0x29a                 	// #666
   45968:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4596c:	mov	w9, #0x3e7                 	// #999
   45970:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45974:	mov	w9, #0x4ba                 	// #1210
   45978:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4597c:	mov	w9, #0x556                 	// #1366
   45980:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45984:	mov	w9, #0x557                 	// #1367
   45988:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4598c:	mov	w9, #0x549                 	// #1353
   45990:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45994:	mov	w9, #0x4                   	// #4
   45998:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   4599c:	mov	w9, #0x7                   	// #7
   459a0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459a4:	mov	w9, #0xa                   	// #10
   459a8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459ac:	mov	w9, #0xc                   	// #12
   459b0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459b4:	mov	w9, #0xe                   	// #14
   459b8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459bc:	mov	w9, #0x11                  	// #17
   459c0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459c4:	mov	w9, #0x16                  	// #22
   459c8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459cc:	mov	w9, #0x18                  	// #24
   459d0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459d4:	mov	w9, #0x98                  	// #152
   459d8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459dc:	mov	w9, #0x9a                  	// #154
   459e0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459e4:	mov	w9, #0x9c                  	// #156
   459e8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459ec:	mov	w9, #0xf2                  	// #242
   459f0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459f4:	mov	w9, #0x13d                 	// #317
   459f8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   459fc:	mov	w9, #0x184                 	// #388
   45a00:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a04:	mov	w9, #0x186                 	// #390
   45a08:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a0c:	mov	w9, #0x19c                 	// #412
   45a10:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a14:	mov	w9, #0x19e                 	// #414
   45a18:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a1c:	mov	w9, #0x217                 	// #535
   45a20:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a24:	mov	w9, #0x29d                 	// #669
   45a28:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a2c:	mov	w9, #0x2b0                 	// #688
   45a30:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a34:	mov	w9, #0x2c9                 	// #713
   45a38:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a3c:	mov	w9, #0x2cb                 	// #715
   45a40:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a44:	mov	w9, #0x2cd                 	// #717
   45a48:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a4c:	mov	w9, #0x2cf                 	// #719
   45a50:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a54:	mov	w9, #0x2d2                 	// #722
   45a58:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a5c:	mov	w9, #0x2df                 	// #735
   45a60:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a64:	mov	w9, #0x2e1                 	// #737
   45a68:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a6c:	mov	w9, #0x2e3                 	// #739
   45a70:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a74:	mov	w9, #0x2e5                 	// #741
   45a78:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a7c:	mov	w9, #0x2e8                 	// #744
   45a80:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a84:	mov	w9, #0x2ea                 	// #746
   45a88:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a8c:	mov	w9, #0x2f5                 	// #757
   45a90:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a94:	mov	w9, #0x3de                 	// #990
   45a98:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45a9c:	mov	w9, #0x3e0                 	// #992
   45aa0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45aa4:	mov	w9, #0x3e3                 	// #995
   45aa8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45aac:	mov	w9, #0x3ea                 	// #1002
   45ab0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ab4:	mov	w9, #0x3ee                 	// #1006
   45ab8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45abc:	mov	w9, #0x40d                 	// #1037
   45ac0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ac4:	mov	w9, #0x40e                 	// #1038
   45ac8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45acc:	mov	w9, #0x40f                 	// #1039
   45ad0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ad4:	mov	w9, #0x411                 	// #1041
   45ad8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45adc:	mov	w9, #0x414                 	// #1044
   45ae0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ae4:	mov	w9, #0x417                 	// #1047
   45ae8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45aec:	mov	w9, #0x419                 	// #1049
   45af0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45af4:	mov	w9, #0x41a                 	// #1050
   45af8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45afc:	mov	w9, #0x41b                 	// #1051
   45b00:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b04:	mov	w9, #0x41d                 	// #1053
   45b08:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b0c:	mov	w9, #0x420                 	// #1056
   45b10:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b14:	mov	w9, #0x423                 	// #1059
   45b18:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b1c:	mov	w9, #0x425                 	// #1061
   45b20:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b24:	mov	w9, #0x426                 	// #1062
   45b28:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b2c:	mov	w9, #0x427                 	// #1063
   45b30:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b34:	mov	w9, #0x429                 	// #1065
   45b38:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b3c:	mov	w9, #0x42c                 	// #1068
   45b40:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b44:	mov	w9, #0x42f                 	// #1071
   45b48:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b4c:	mov	w9, #0x431                 	// #1073
   45b50:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b54:	mov	w9, #0x432                 	// #1074
   45b58:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b5c:	mov	w9, #0x433                 	// #1075
   45b60:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b64:	mov	w9, #0x435                 	// #1077
   45b68:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b6c:	mov	w9, #0x438                 	// #1080
   45b70:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b74:	mov	w9, #0x43b                 	// #1083
   45b78:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b7c:	mov	w9, #0x43d                 	// #1085
   45b80:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b84:	mov	w9, #0x43e                 	// #1086
   45b88:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b8c:	mov	w9, #0x43f                 	// #1087
   45b90:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b94:	mov	w9, #0x441                 	// #1089
   45b98:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45b9c:	mov	w9, #0x444                 	// #1092
   45ba0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ba4:	mov	w9, #0x447                 	// #1095
   45ba8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bac:	mov	w9, #0x449                 	// #1097
   45bb0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bb4:	mov	w9, #0x44a                 	// #1098
   45bb8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bbc:	mov	w9, #0x44b                 	// #1099
   45bc0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bc4:	mov	w9, #0x44d                 	// #1101
   45bc8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bcc:	mov	w9, #0x450                 	// #1104
   45bd0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bd4:	mov	w9, #0x453                 	// #1107
   45bd8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bdc:	mov	w9, #0x455                 	// #1109
   45be0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45be4:	mov	w9, #0x456                 	// #1110
   45be8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bec:	mov	w9, #0x457                 	// #1111
   45bf0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bf4:	mov	w9, #0x459                 	// #1113
   45bf8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45bfc:	mov	w9, #0x45c                 	// #1116
   45c00:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c04:	mov	w9, #0x45f                 	// #1119
   45c08:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c0c:	mov	w9, #0x461                 	// #1121
   45c10:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c14:	mov	w9, #0x462                 	// #1122
   45c18:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c1c:	mov	w9, #0x463                 	// #1123
   45c20:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c24:	mov	w9, #0x465                 	// #1125
   45c28:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c2c:	mov	w9, #0x468                 	// #1128
   45c30:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c34:	mov	w9, #0x46b                 	// #1131
   45c38:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c3c:	mov	w9, #0x49d                 	// #1181
   45c40:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c44:	mov	w9, #0x49f                 	// #1183
   45c48:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c4c:	mov	w9, #0x58f                 	// #1423
   45c50:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c54:	mov	w9, #0x578                 	// #1400
   45c58:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c5c:	mov	w9, #0x6da                 	// #1754
   45c60:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c64:	mov	w9, #0x555                 	// #1365
   45c68:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c6c:	mov	w9, #0x6dd                 	// #1757
   45c70:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c74:	mov	w9, #0x558                 	// #1368
   45c78:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c7c:	mov	w9, #0x547                 	// #1351
   45c80:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c84:	mov	w9, #0x71c                 	// #1820
   45c88:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c8c:	mov	w9, #0x548                 	// #1352
   45c90:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c94:	mov	w9, #0x505                 	// #1285
   45c98:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45c9c:	mov	w9, #0x71d                 	// #1821
   45ca0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ca4:	mov	w9, #0x6de                 	// #1758
   45ca8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cac:	mov	w9, #0x506                 	// #1286
   45cb0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cb4:	mov	w9, #0x55c                 	// #1372
   45cb8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cbc:	mov	w9, #0x55d                 	// #1373
   45cc0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cc4:	mov	w9, #0x503                 	// #1283
   45cc8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ccc:	mov	w9, #0x529                 	// #1321
   45cd0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cd4:	mov	w9, #0x52c                 	// #1324
   45cd8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cdc:	mov	w9, #0x52e                 	// #1326
   45ce0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45ce4:	mov	w9, #0x531                 	// #1329
   45ce8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cec:	mov	w9, #0x55a                 	// #1370
   45cf0:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cf4:	mov	w9, #0x562                 	// #1378
   45cf8:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45cfc:	mov	w9, #0x563                 	// #1379
   45d00:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45d04:	mov	w9, #0x570                 	// #1392
   45d08:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45d0c:	mov	w9, #0x572                 	// #1394
   45d10:	b	45d18 <aarch64_find_real_opcode@@Base+0x434>
   45d14:	mov	w9, #0x6db                 	// #1755
   45d18:	mov	w10, #0x90                  	// #144
   45d1c:	madd	x0, x9, x10, x8
   45d20:	ret

0000000000045d24 <aarch64_insert_operand@@Base>:
   45d24:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   45d28:	ldr	x8, [x8, #4032]
   45d2c:	mov	w9, #0xaaab                	// #43691
   45d30:	movk	w9, #0xaaaa, lsl #16
   45d34:	sub	x8, x0, x8
   45d38:	lsr	x8, x8, #4
   45d3c:	mul	w8, w8, w9
   45d40:	sub	w8, w8, #0x1
   45d44:	cmp	w8, #0xce
   45d48:	b.hi	45e48 <aarch64_insert_operand@@Base+0x124>  // b.pmore
   45d4c:	adrp	x9, 5e000 <fields@@Base+0x51b4>
   45d50:	add	x9, x9, #0x510
   45d54:	adr	x10, 45d64 <aarch64_insert_operand@@Base+0x40>
   45d58:	ldrb	w11, [x9, x8]
   45d5c:	add	x10, x10, x11, lsl #2
   45d60:	br	x10
   45d64:	b	352c0 <aarch64_ins_regno@plt>
   45d68:	b	35860 <aarch64_ins_imm@plt>
   45d6c:	b	351f0 <aarch64_ins_sve_addr_rr_lsl@plt>
   45d70:	b	35170 <aarch64_ins_sve_addr_rz_xtw@plt>
   45d74:	b	353e0 <aarch64_ins_sysins_op@plt>
   45d78:	b	35720 <aarch64_ins_reglane@plt>
   45d7c:	b	35130 <aarch64_ins_sve_quad_index@plt>
   45d80:	b	353b0 <aarch64_ins_addr_simm@plt>
   45d84:	b	352b0 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   45d88:	b	35380 <aarch64_ins_sve_addr_ri_u6@plt>
   45d8c:	b	35a90 <aarch64_ins_sve_addr_zi_u5@plt>
   45d90:	b	35740 <aarch64_ins_imm_rotate2@plt>
   45d94:	b	351a0 <aarch64_ins_imm_rotate1@plt>
   45d98:	b	35aa0 <aarch64_ins_sve_shlimm@plt>
   45d9c:	b	355f0 <aarch64_ins_advsimd_imm_modified@plt>
   45da0:	b	35890 <aarch64_ins_sve_shrimm@plt>
   45da4:	b	35550 <aarch64_ins_fpimm@plt>
   45da8:	b	35450 <aarch64_ins_limm@plt>
   45dac:	b	35140 <aarch64_ins_cond@plt>
   45db0:	b	358d0 <aarch64_ins_barrier@plt>
   45db4:	b	356c0 <aarch64_ins_hint@plt>
   45db8:	b	35790 <aarch64_ins_addr_simple@plt>
   45dbc:	b	356a0 <aarch64_ins_sve_addr_ri_s4@plt>
   45dc0:	b	35190 <aarch64_ins_sve_reglist@plt>
   45dc4:	b	35950 <aarch64_ins_advsimd_imm_shift@plt>
   45dc8:	b	356b0 <aarch64_ins_prfop@plt>
   45dcc:	b	35350 <aarch64_ins_sve_addr_zz_lsl@plt>
   45dd0:	b	35610 <aarch64_ins_sve_addr_zz_sxtw@plt>
   45dd4:	b	350f0 <aarch64_ins_sve_float_zero_one@plt>
   45dd8:	b	35200 <aarch64_ins_sve_scale@plt>
   45ddc:	b	354f0 <aarch64_ins_reg_shifted@plt>
   45de0:	b	353f0 <aarch64_ins_ft@plt>
   45de4:	b	35b10 <aarch64_ins_ldst_reglist@plt>
   45de8:	b	352e0 <aarch64_ins_aimm@plt>
   45dec:	b	35770 <aarch64_ins_imm_half@plt>
   45df0:	b	35920 <aarch64_ins_addr_regoff@plt>
   45df4:	b	35870 <aarch64_ins_addr_offset@plt>
   45df8:	b	35100 <aarch64_ins_simd_addr_post@plt>
   45dfc:	b	35530 <aarch64_ins_sysreg@plt>
   45e00:	b	35300 <aarch64_ins_pstatefield@plt>
   45e04:	b	359b0 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   45e08:	b	35b90 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   45e0c:	b	35590 <aarch64_ins_sve_limm_mov@plt>
   45e10:	b	35390 <aarch64_ins_sve_index@plt>
   45e14:	b	35a20 <aarch64_ins_reg_extended@plt>
   45e18:	b	35680 <aarch64_ins_reglist@plt>
   45e1c:	b	35600 <aarch64_ins_ldst_reglist_r@plt>
   45e20:	b	358a0 <aarch64_ins_ldst_elemlist@plt>
   45e24:	b	35760 <aarch64_ins_fbits@plt>
   45e28:	b	35270 <aarch64_ins_addr_simm10@plt>
   45e2c:	b	357c0 <aarch64_ins_addr_uimm12@plt>
   45e30:	b	35730 <aarch64_ins_sve_addr_zz_uxtw@plt>
   45e34:	b	356e0 <aarch64_ins_sve_float_half_two@plt>
   45e38:	b	35990 <aarch64_ins_sve_aimm@plt>
   45e3c:	b	35a00 <aarch64_ins_sve_asimm@plt>
   45e40:	b	35b40 <aarch64_ins_sve_float_half_one@plt>
   45e44:	b	35800 <aarch64_ins_inv_limm@plt>
   45e48:	stp	x29, x30, [sp, #-16]!
   45e4c:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   45e50:	adrp	x1, 5e000 <fields@@Base+0x51b4>
   45e54:	adrp	x3, 5e000 <fields@@Base+0x51b4>
   45e58:	add	x0, x0, #0x2b4
   45e5c:	add	x1, x1, #0x5df
   45e60:	add	x3, x3, #0x5fd
   45e64:	mov	w2, #0x35f                 	// #863
   45e68:	mov	x29, sp
   45e6c:	bl	35b30 <__assert_fail@plt>

0000000000045e70 <aarch64_opcode_lookup@@Base>:
   45e70:	stp	x29, x30, [sp, #-16]!
   45e74:	mov	x29, sp
   45e78:	bl	45e94 <aarch64_opcode_lookup@@Base+0x24>
   45e7c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   45e80:	ldr	x8, [x8, #3848]
   45e84:	mov	w9, #0x90                  	// #144
   45e88:	smaddl	x0, w0, w9, x8
   45e8c:	ldp	x29, x30, [sp], #16
   45e90:	ret
   45e94:	tbnz	w0, #26, 45eb4 <aarch64_opcode_lookup@@Base+0x44>
   45e98:	tbnz	w0, #25, 45f00 <aarch64_opcode_lookup@@Base+0x90>
   45e9c:	tbnz	w0, #27, 45f4c <aarch64_opcode_lookup@@Base+0xdc>
   45ea0:	tbnz	w0, #24, 45fe0 <aarch64_opcode_lookup@@Base+0x170>
   45ea4:	cmp	w0, #0x0
   45ea8:	mov	w8, #0x4a2                 	// #1186
   45eac:	cinc	w0, w8, lt  // lt = tstop
   45eb0:	ret
   45eb4:	tbnz	w0, #27, 45f24 <aarch64_opcode_lookup@@Base+0xb4>
   45eb8:	tbnz	w0, #28, 45f7c <aarch64_opcode_lookup@@Base+0x10c>
   45ebc:	tbnz	w0, #24, 45ff8 <aarch64_opcode_lookup@@Base+0x188>
   45ec0:	tbnz	w0, #29, 460d0 <aarch64_opcode_lookup@@Base+0x260>
   45ec4:	tbnz	w0, #13, 46290 <aarch64_opcode_lookup@@Base+0x420>
   45ec8:	tbnz	w0, #14, 46520 <aarch64_opcode_lookup@@Base+0x6b0>
   45ecc:	tbnz	w0, #15, 468b4 <aarch64_opcode_lookup@@Base+0xa44>
   45ed0:	tbnz	w0, #21, 46e2c <aarch64_opcode_lookup@@Base+0xfbc>
   45ed4:	tbnz	w0, #30, 47674 <aarch64_opcode_lookup@@Base+0x1804>
   45ed8:	tbnz	w0, #31, 488cc <aarch64_opcode_lookup@@Base+0x2a5c>
   45edc:	tbnz	w0, #16, 48df8 <aarch64_opcode_lookup@@Base+0x2f88>
   45ee0:	tbnz	w0, #17, 49b8c <aarch64_opcode_lookup@@Base+0x3d1c>
   45ee4:	tbnz	w0, #18, 4a748 <aarch64_opcode_lookup@@Base+0x48d8>
   45ee8:	tst	w0, #0x100000
   45eec:	tbnz	w0, #19, 4b134 <aarch64_opcode_lookup@@Base+0x52c4>
   45ef0:	mov	w8, #0x6d1                 	// #1745
   45ef4:	mov	w9, #0x4fc                 	// #1276
   45ef8:	csel	w0, w9, w8, eq  // eq = none
   45efc:	ret
   45f00:	tbnz	w0, #24, 45f94 <aarch64_opcode_lookup@@Base+0x124>
   45f04:	tbnz	w0, #27, 46024 <aarch64_opcode_lookup@@Base+0x1b4>
   45f08:	tbnz	w0, #23, 460fc <aarch64_opcode_lookup@@Base+0x28c>
   45f0c:	tst	w0, #0x40000000
   45f10:	tbnz	w0, #29, 462c4 <aarch64_opcode_lookup@@Base+0x454>
   45f14:	mov	w8, #0x3e2                 	// #994
   45f18:	mov	w9, #0x3de                 	// #990
   45f1c:	csel	w0, w9, w8, eq  // eq = none
   45f20:	ret
   45f24:	tbnz	w0, #25, 45fb4 <aarch64_opcode_lookup@@Base+0x144>
   45f28:	tbnz	w0, #28, 46044 <aarch64_opcode_lookup@@Base+0x1d4>
   45f2c:	tbnz	w0, #22, 46114 <aarch64_opcode_lookup@@Base+0x2a4>
   45f30:	tbnz	w0, #23, 462d4 <aarch64_opcode_lookup@@Base+0x464>
   45f34:	tbnz	w0, #24, 46538 <aarch64_opcode_lookup@@Base+0x6c8>
   45f38:	tst	w0, #0x20000000
   45f3c:	mov	w8, #0x3cc                 	// #972
   45f40:	mov	w9, #0x1b8                 	// #440
   45f44:	csel	w0, w9, w8, eq  // eq = none
   45f48:	ret
   45f4c:	tbnz	w0, #28, 46054 <aarch64_opcode_lookup@@Base+0x1e4>
   45f50:	tbnz	w0, #22, 46130 <aarch64_opcode_lookup@@Base+0x2c0>
   45f54:	tbnz	w0, #23, 462e8 <aarch64_opcode_lookup@@Base+0x478>
   45f58:	tbnz	w0, #29, 46554 <aarch64_opcode_lookup@@Base+0x6e4>
   45f5c:	tbnz	w0, #15, 468d8 <aarch64_opcode_lookup@@Base+0xa68>
   45f60:	tbnz	w0, #21, 46e50 <aarch64_opcode_lookup@@Base+0xfe0>
   45f64:	tbnz	w0, #31, 47e7c <aarch64_opcode_lookup@@Base+0x200c>
   45f68:	tst	w0, #0x40000000
   45f6c:	mov	w8, #0x3ae                 	// #942
   45f70:	mov	w9, #0x3a8                 	// #936
   45f74:	csel	w0, w9, w8, eq  // eq = none
   45f78:	ret
   45f7c:	tbnz	w0, #29, 46068 <aarch64_opcode_lookup@@Base+0x1f8>
   45f80:	tbnz	w0, #30, 46158 <aarch64_opcode_lookup@@Base+0x2e8>
   45f84:	cmp	w0, #0x0
   45f88:	mov	w8, #0x27c                 	// #636
   45f8c:	cinc	w0, w8, lt  // lt = tstop
   45f90:	ret
   45f94:	tbnz	w0, #27, 46080 <aarch64_opcode_lookup@@Base+0x210>
   45f98:	tbnz	w0, #23, 46170 <aarch64_opcode_lookup@@Base+0x300>
   45f9c:	tbnz	w0, #29, 46304 <aarch64_opcode_lookup@@Base+0x494>
   45fa0:	tst	w0, #0x40000000
   45fa4:	mov	w8, #0x275                 	// #629
   45fa8:	mov	w9, #0x26a                 	// #618
   45fac:	csel	w0, w9, w8, eq  // eq = none
   45fb0:	ret
   45fb4:	tbnz	w0, #24, 460a0 <aarch64_opcode_lookup@@Base+0x230>
   45fb8:	tbnz	w0, #21, 46178 <aarch64_opcode_lookup@@Base+0x308>
   45fbc:	tbnz	w0, #28, 4630c <aarch64_opcode_lookup@@Base+0x49c>
   45fc0:	tbnz	w0, #29, 46568 <aarch64_opcode_lookup@@Base+0x6f8>
   45fc4:	tbnz	w0, #31, 46db8 <aarch64_opcode_lookup@@Base+0xf48>
   45fc8:	tbnz	w0, #10, 46de0 <aarch64_opcode_lookup@@Base+0xf70>
   45fcc:	tbnz	w0, #11, 475dc <aarch64_opcode_lookup@@Base+0x176c>
   45fd0:	tst	w0, #0x1000
   45fd4:	mov	w8, #0x1a4                 	// #420
   45fd8:	cinc	w0, w8, ne  // ne = any
   45fdc:	ret
   45fe0:	tst	w0, #0x40000000
   45fe4:	tbnz	w0, #29, 461ac <aarch64_opcode_lookup@@Base+0x33c>
   45fe8:	mov	w8, #0x10                  	// #16
   45fec:	mov	w9, #0xc                   	// #12
   45ff0:	csel	w0, w9, w8, eq  // eq = none
   45ff4:	ret
   45ff8:	tbnz	w0, #29, 461bc <aarch64_opcode_lookup@@Base+0x34c>
   45ffc:	tbnz	w0, #30, 4632c <aarch64_opcode_lookup@@Base+0x4bc>
   46000:	tbnz	w0, #31, 46868 <aarch64_opcode_lookup@@Base+0x9f8>
   46004:	tbnz	w0, #21, 46898 <aarch64_opcode_lookup@@Base+0xa28>
   46008:	tbnz	w0, #20, 46df8 <aarch64_opcode_lookup@@Base+0xf88>
   4600c:	tst	w0, #0x800000
   46010:	tbnz	w0, #22, 475f4 <aarch64_opcode_lookup@@Base+0x1784>
   46014:	mov	w8, #0x503                 	// #1283
   46018:	mov	w9, #0x6db                 	// #1755
   4601c:	csel	w0, w9, w8, eq  // eq = none
   46020:	ret
   46024:	tbnz	w0, #21, 461e8 <aarch64_opcode_lookup@@Base+0x378>
   46028:	tbnz	w0, #28, 4635c <aarch64_opcode_lookup@@Base+0x4ec>
   4602c:	tst	w0, #0x40000000
   46030:	tbnz	w0, #29, 46574 <aarch64_opcode_lookup@@Base+0x704>
   46034:	mov	w8, #0x3ec                 	// #1004
   46038:	mov	w9, #0x3e5                 	// #997
   4603c:	csel	w0, w9, w8, eq  // eq = none
   46040:	ret
   46044:	tbnz	w0, #24, 46200 <aarch64_opcode_lookup@@Base+0x390>
   46048:	tbnz	w0, #29, 4637c <aarch64_opcode_lookup@@Base+0x50c>
   4604c:	mov	w0, #0x3db                 	// #987
   46050:	ret
   46054:	tbnz	w0, #24, 46210 <aarch64_opcode_lookup@@Base+0x3a0>
   46058:	tbnz	w0, #29, 46394 <aarch64_opcode_lookup@@Base+0x524>
   4605c:	tbnz	w0, #31, 46888 <aarch64_opcode_lookup@@Base+0xa18>
   46060:	mov	w0, #0x3da                 	// #986
   46064:	ret
   46068:	tst	w0, #0x2000000
   4606c:	tbnz	w0, #24, 46240 <aarch64_opcode_lookup@@Base+0x3d0>
   46070:	mov	w8, #0x4d4                 	// #1236
   46074:	mov	w9, #0x28f                 	// #655
   46078:	csel	w0, w9, w8, eq  // eq = none
   4607c:	ret
   46080:	tbnz	w0, #21, 46250 <aarch64_opcode_lookup@@Base+0x3e0>
   46084:	tbnz	w0, #28, 463c0 <aarch64_opcode_lookup@@Base+0x550>
   46088:	tst	w0, #0x40000000
   4608c:	tbnz	w0, #29, 46584 <aarch64_opcode_lookup@@Base+0x714>
   46090:	mov	w8, #0x18                  	// #24
   46094:	mov	w9, #0x15                  	// #21
   46098:	csel	w0, w9, w8, eq  // eq = none
   4609c:	ret
   460a0:	tbnz	w0, #15, 46270 <aarch64_opcode_lookup@@Base+0x400>
   460a4:	tbnz	w0, #28, 463d0 <aarch64_opcode_lookup@@Base+0x560>
   460a8:	tbnz	w0, #10, 46594 <aarch64_opcode_lookup@@Base+0x724>
   460ac:	tbnz	w0, #12, 468f4 <aarch64_opcode_lookup@@Base+0xa84>
   460b0:	tbnz	w0, #13, 46e64 <aarch64_opcode_lookup@@Base+0xff4>
   460b4:	tbnz	w0, #14, 47694 <aarch64_opcode_lookup@@Base+0x1824>
   460b8:	tbnz	w0, #29, 48268 <aarch64_opcode_lookup@@Base+0x23f8>
   460bc:	tst	w0, #0x40000000
   460c0:	mov	w8, #0x942                 	// #2370
   460c4:	mov	w9, #0x93e                 	// #2366
   460c8:	csel	w0, w9, w8, eq  // eq = none
   460cc:	ret
   460d0:	tbnz	w0, #21, 463ec <aarch64_opcode_lookup@@Base+0x57c>
   460d4:	tbnz	w0, #15, 465ac <aarch64_opcode_lookup@@Base+0x73c>
   460d8:	tbnz	w0, #30, 46910 <aarch64_opcode_lookup@@Base+0xaa0>
   460dc:	tbnz	w0, #13, 46e7c <aarch64_opcode_lookup@@Base+0x100c>
   460e0:	tbnz	w0, #14, 476ac <aarch64_opcode_lookup@@Base+0x183c>
   460e4:	tbnz	w0, #31, 488e0 <aarch64_opcode_lookup@@Base+0x2a70>
   460e8:	tst	w0, #0x10
   460ec:	mov	w8, #0x52e                 	// #1326
   460f0:	mov	w9, #0x531                 	// #1329
   460f4:	csel	w0, w9, w8, eq  // eq = none
   460f8:	ret
   460fc:	tbnz	w0, #29, 4640c <aarch64_opcode_lookup@@Base+0x59c>
   46100:	tst	w0, #0x40000000
   46104:	mov	w8, #0x49f                 	// #1183
   46108:	mov	w9, #0x49d                 	// #1181
   4610c:	csel	w0, w9, w8, eq  // eq = none
   46110:	ret
   46114:	tbnz	w0, #23, 46414 <aarch64_opcode_lookup@@Base+0x5a4>
   46118:	tbnz	w0, #24, 465cc <aarch64_opcode_lookup@@Base+0x75c>
   4611c:	tst	w0, #0x20000000
   46120:	mov	w8, #0x3cd                 	// #973
   46124:	mov	w9, #0x1bc                 	// #444
   46128:	csel	w0, w9, w8, eq  // eq = none
   4612c:	ret
   46130:	tbnz	w0, #23, 46428 <aarch64_opcode_lookup@@Base+0x5b8>
   46134:	tbnz	w0, #29, 465e8 <aarch64_opcode_lookup@@Base+0x778>
   46138:	tbnz	w0, #15, 4691c <aarch64_opcode_lookup@@Base+0xaac>
   4613c:	tbnz	w0, #21, 46e98 <aarch64_opcode_lookup@@Base+0x1028>
   46140:	tbnz	w0, #31, 47e84 <aarch64_opcode_lookup@@Base+0x2014>
   46144:	tst	w0, #0x40000000
   46148:	mov	w8, #0x3b0                 	// #944
   4614c:	mov	w9, #0x3aa                 	// #938
   46150:	csel	w0, w9, w8, eq  // eq = none
   46154:	ret
   46158:	tbnz	w0, #24, 46448 <aarch64_opcode_lookup@@Base+0x5d8>
   4615c:	tbnz	w0, #4, 465fc <aarch64_opcode_lookup@@Base+0x78c>
   46160:	tbnz	w0, #25, 46938 <aarch64_opcode_lookup@@Base+0xac8>
   46164:	tbnz	w0, #31, 47520 <aarch64_opcode_lookup@@Base+0x16b0>
   46168:	mov	w0, #0x291                 	// #657
   4616c:	ret
   46170:	mov	w0, #0x2f5                 	// #757
   46174:	ret
   46178:	tbnz	w0, #28, 46458 <aarch64_opcode_lookup@@Base+0x5e8>
   4617c:	tbnz	w0, #15, 4661c <aarch64_opcode_lookup@@Base+0x7ac>
   46180:	tbnz	w0, #29, 46954 <aarch64_opcode_lookup@@Base+0xae4>
   46184:	tbnz	w0, #31, 47534 <aarch64_opcode_lookup@@Base+0x16c4>
   46188:	tbnz	w0, #10, 47604 <aarch64_opcode_lookup@@Base+0x1794>
   4618c:	tbnz	w0, #11, 480ac <aarch64_opcode_lookup@@Base+0x223c>
   46190:	tst	w0, #0x40000000
   46194:	tbnz	w0, #12, 48e0c <aarch64_opcode_lookup@@Base+0x2f9c>
   46198:	tbnz	w0, #13, 49b9c <aarch64_opcode_lookup@@Base+0x3d2c>
   4619c:	tbnz	w0, #14, 4a75c <aarch64_opcode_lookup@@Base+0x48ec>
   461a0:	mov	w8, #0x2c                  	// #44
   461a4:	cinc	w0, w8, ne  // ne = any
   461a8:	ret
   461ac:	mov	w8, #0x11                  	// #17
   461b0:	mov	w9, #0xe                   	// #14
   461b4:	csel	w0, w9, w8, eq  // eq = none
   461b8:	ret
   461bc:	tbnz	w0, #15, 46490 <aarch64_opcode_lookup@@Base+0x620>
   461c0:	tbnz	w0, #14, 46640 <aarch64_opcode_lookup@@Base+0x7d0>
   461c4:	tbnz	w0, #13, 46978 <aarch64_opcode_lookup@@Base+0xb08>
   461c8:	tbnz	w0, #30, 46eac <aarch64_opcode_lookup@@Base+0x103c>
   461cc:	tbnz	w0, #21, 476c4 <aarch64_opcode_lookup@@Base+0x1854>
   461d0:	tbnz	w0, #31, 488f4 <aarch64_opcode_lookup@@Base+0x2a84>
   461d4:	tst	w0, #0x10
   461d8:	mov	w8, #0x52d                 	// #1325
   461dc:	mov	w9, #0x52a                 	// #1322
   461e0:	csel	w0, w9, w8, eq  // eq = none
   461e4:	ret
   461e8:	tst	w0, #0x40000000
   461ec:	tbnz	w0, #29, 464b4 <aarch64_opcode_lookup@@Base+0x644>
   461f0:	mov	w8, #0x3ed                 	// #1005
   461f4:	mov	w9, #0x3e6                 	// #998
   461f8:	csel	w0, w9, w8, eq  // eq = none
   461fc:	ret
   46200:	tst	w0, #0x400000
   46204:	mov	w8, #0x37b                 	// #891
   46208:	cinc	w0, w8, ne  // ne = any
   4620c:	ret
   46210:	tbnz	w0, #23, 464c4 <aarch64_opcode_lookup@@Base+0x654>
   46214:	tbnz	w0, #22, 46670 <aarch64_opcode_lookup@@Base+0x800>
   46218:	tbnz	w0, #29, 46998 <aarch64_opcode_lookup@@Base+0xb28>
   4621c:	tbnz	w0, #10, 46ec4 <aarch64_opcode_lookup@@Base+0x1054>
   46220:	tbnz	w0, #11, 476e4 <aarch64_opcode_lookup@@Base+0x1874>
   46224:	tbnz	w0, #21, 48270 <aarch64_opcode_lookup@@Base+0x2400>
   46228:	cmp	w0, #0x0
   4622c:	tbnz	w0, #30, 49274 <aarch64_opcode_lookup@@Base+0x3404>
   46230:	mov	w8, #0x951                 	// #2385
   46234:	mov	w9, #0x949                 	// #2377
   46238:	csel	w0, w9, w8, ge  // ge = tcont
   4623c:	ret
   46240:	mov	w8, #0x4d5                 	// #1237
   46244:	mov	w9, #0x290                 	// #656
   46248:	csel	w0, w9, w8, eq  // eq = none
   4624c:	ret
   46250:	tbnz	w0, #23, 464f0 <aarch64_opcode_lookup@@Base+0x680>
   46254:	tbnz	w0, #28, 46698 <aarch64_opcode_lookup@@Base+0x828>
   46258:	tst	w0, #0x40000000
   4625c:	tbnz	w0, #29, 469b0 <aarch64_opcode_lookup@@Base+0xb40>
   46260:	mov	w8, #0x9                   	// #9
   46264:	mov	w9, #0x6                   	// #6
   46268:	csel	w0, w9, w8, eq  // eq = none
   4626c:	ret
   46270:	tbnz	w0, #28, 46504 <aarch64_opcode_lookup@@Base+0x694>
   46274:	tbnz	w0, #10, 466ac <aarch64_opcode_lookup@@Base+0x83c>
   46278:	tbnz	w0, #12, 469c0 <aarch64_opcode_lookup@@Base+0xb50>
   4627c:	tbnz	w0, #13, 46ecc <aarch64_opcode_lookup@@Base+0x105c>
   46280:	tbnz	w0, #14, 476ec <aarch64_opcode_lookup@@Base+0x187c>
   46284:	tbnz	w0, #29, 48278 <aarch64_opcode_lookup@@Base+0x2408>
   46288:	mov	w0, #0x6a                  	// #106
   4628c:	ret
   46290:	tbnz	w0, #14, 466cc <aarch64_opcode_lookup@@Base+0x85c>
   46294:	tbnz	w0, #15, 469e0 <aarch64_opcode_lookup@@Base+0xb70>
   46298:	tbnz	w0, #21, 46ee4 <aarch64_opcode_lookup@@Base+0x1074>
   4629c:	tbnz	w0, #30, 476f8 <aarch64_opcode_lookup@@Base+0x1888>
   462a0:	tbnz	w0, #31, 48908 <aarch64_opcode_lookup@@Base+0x2a98>
   462a4:	tbnz	w0, #17, 48e20 <aarch64_opcode_lookup@@Base+0x2fb0>
   462a8:	tbnz	w0, #19, 49bac <aarch64_opcode_lookup@@Base+0x3d3c>
   462ac:	tbnz	w0, #20, 4a768 <aarch64_opcode_lookup@@Base+0x48f8>
   462b0:	tst	w0, #0x10000
   462b4:	mov	w8, #0x7a7                 	// #1959
   462b8:	mov	w9, #0x70f                 	// #1807
   462bc:	csel	w0, w9, w8, eq  // eq = none
   462c0:	ret
   462c4:	mov	w8, #0x3e3                 	// #995
   462c8:	mov	w9, #0x3e0                 	// #992
   462cc:	csel	w0, w9, w8, eq  // eq = none
   462d0:	ret
   462d4:	tbnz	w0, #29, 466e4 <aarch64_opcode_lookup@@Base+0x874>
   462d8:	tbnz	w0, #21, 46a0c <aarch64_opcode_lookup@@Base+0xb9c>
   462dc:	tbnz	w0, #24, 46f0c <aarch64_opcode_lookup@@Base+0x109c>
   462e0:	mov	w0, #0x1c0                 	// #448
   462e4:	ret
   462e8:	tbnz	w0, #29, 466ec <aarch64_opcode_lookup@@Base+0x87c>
   462ec:	tbnz	w0, #15, 46a1c <aarch64_opcode_lookup@@Base+0xbac>
   462f0:	tbnz	w0, #21, 46f1c <aarch64_opcode_lookup@@Base+0x10ac>
   462f4:	cmp	w0, #0x0
   462f8:	mov	w8, #0x3c7                 	// #967
   462fc:	cinc	w0, w8, ge  // ge = tcont
   46300:	ret
   46304:	mov	w0, #0x271                 	// #625
   46308:	ret
   4630c:	tbnz	w0, #29, 46700 <aarch64_opcode_lookup@@Base+0x890>
   46310:	tbnz	w0, #30, 46a38 <aarch64_opcode_lookup@@Base+0xbc8>
   46314:	tst	w0, #0x20000
   46318:	tbnz	w0, #16, 46f30 <aarch64_opcode_lookup@@Base+0x10c0>
   4631c:	mov	w8, #0x2f7                 	// #759
   46320:	mov	w9, #0x2fb                 	// #763
   46324:	csel	w0, w9, w8, eq  // eq = none
   46328:	ret
   4632c:	tbnz	w0, #13, 46714 <aarch64_opcode_lookup@@Base+0x8a4>
   46330:	tbnz	w0, #14, 46a58 <aarch64_opcode_lookup@@Base+0xbe8>
   46334:	tbnz	w0, #15, 46f40 <aarch64_opcode_lookup@@Base+0x10d0>
   46338:	tbnz	w0, #21, 47710 <aarch64_opcode_lookup@@Base+0x18a0>
   4633c:	tbnz	w0, #31, 4891c <aarch64_opcode_lookup@@Base+0x2aac>
   46340:	tst	w0, #0x1000
   46344:	tbnz	w0, #10, 48e38 <aarch64_opcode_lookup@@Base+0x2fc8>
   46348:	tbnz	w0, #11, 49bc4 <aarch64_opcode_lookup@@Base+0x3d54>
   4634c:	mov	w8, #0x8b9                 	// #2233
   46350:	mov	w9, #0x84e                 	// #2126
   46354:	csel	w0, w9, w8, eq  // eq = none
   46358:	ret
   4635c:	tbnz	w0, #10, 4673c <aarch64_opcode_lookup@@Base+0x8cc>
   46360:	tbnz	w0, #11, 46a80 <aarch64_opcode_lookup@@Base+0xc10>
   46364:	tbnz	w0, #22, 46f64 <aarch64_opcode_lookup@@Base+0x10f4>
   46368:	tbnz	w0, #23, 47730 <aarch64_opcode_lookup@@Base+0x18c0>
   4636c:	and	w8, w0, #0x40000000
   46370:	tbnz	w0, #29, 4828c <aarch64_opcode_lookup@@Base+0x241c>
   46374:	lsr	w0, w8, #29
   46378:	ret
   4637c:	tbnz	w0, #10, 46750 <aarch64_opcode_lookup@@Base+0x8e0>
   46380:	tst	w0, #0x400000
   46384:	tbnz	w0, #11, 46a94 <aarch64_opcode_lookup@@Base+0xc24>
   46388:	mov	w8, #0x39c                 	// #924
   4638c:	cinc	w0, w8, ne  // ne = any
   46390:	ret
   46394:	tbnz	w0, #10, 46760 <aarch64_opcode_lookup@@Base+0x8f0>
   46398:	tbnz	w0, #11, 46aa0 <aarch64_opcode_lookup@@Base+0xc30>
   4639c:	tbnz	w0, #21, 46f78 <aarch64_opcode_lookup@@Base+0x1108>
   463a0:	tbnz	w0, #23, 47744 <aarch64_opcode_lookup@@Base+0x18d4>
   463a4:	tbnz	w0, #22, 4829c <aarch64_opcode_lookup@@Base+0x242c>
   463a8:	tbnz	w0, #31, 49850 <aarch64_opcode_lookup@@Base+0x39e0>
   463ac:	tst	w0, #0x40000000
   463b0:	mov	w8, #0x39e                 	// #926
   463b4:	mov	w9, #0x399                 	// #921
   463b8:	csel	w0, w9, w8, eq  // eq = none
   463bc:	ret
   463c0:	tbnz	w0, #15, 46784 <aarch64_opcode_lookup@@Base+0x914>
   463c4:	tbnz	w0, #22, 46ac4 <aarch64_opcode_lookup@@Base+0xc54>
   463c8:	mov	w0, #0x2df                 	// #735
   463cc:	ret
   463d0:	tbnz	w0, #29, 4678c <aarch64_opcode_lookup@@Base+0x91c>
   463d4:	tbnz	w0, #30, 46ad8 <aarch64_opcode_lookup@@Base+0xc68>
   463d8:	tst	w0, #0x200000
   463dc:	mov	w8, #0x35d                 	// #861
   463e0:	mov	w9, #0x359                 	// #857
   463e4:	csel	w0, w9, w8, eq  // eq = none
   463e8:	ret
   463ec:	tbnz	w0, #13, 467a8 <aarch64_opcode_lookup@@Base+0x938>
   463f0:	tbnz	w0, #30, 46af4 <aarch64_opcode_lookup@@Base+0xc84>
   463f4:	tbnz	w0, #31, 4753c <aarch64_opcode_lookup@@Base+0x16cc>
   463f8:	tst	w0, #0x10
   463fc:	mov	w8, #0x530                 	// #1328
   46400:	mov	w9, #0x533                 	// #1331
   46404:	csel	w0, w9, w8, eq  // eq = none
   46408:	ret
   4640c:	mov	w0, #0x4a1                 	// #1185
   46410:	ret
   46414:	tbnz	w0, #29, 467c4 <aarch64_opcode_lookup@@Base+0x954>
   46418:	tbnz	w0, #21, 46b10 <aarch64_opcode_lookup@@Base+0xca0>
   4641c:	tbnz	w0, #24, 46fa4 <aarch64_opcode_lookup@@Base+0x1134>
   46420:	mov	w0, #0x1c4                 	// #452
   46424:	ret
   46428:	tbnz	w0, #29, 467cc <aarch64_opcode_lookup@@Base+0x95c>
   4642c:	tbnz	w0, #15, 46b20 <aarch64_opcode_lookup@@Base+0xcb0>
   46430:	tbnz	w0, #21, 46fb4 <aarch64_opcode_lookup@@Base+0x1144>
   46434:	tbnz	w0, #31, 47e8c <aarch64_opcode_lookup@@Base+0x201c>
   46438:	tst	w0, #0x40000000
   4643c:	mov	w8, #0x3c5                 	// #965
   46440:	cinc	w0, w8, ne  // ne = any
   46444:	ret
   46448:	tbnz	w0, #21, 467e0 <aarch64_opcode_lookup@@Base+0x970>
   4644c:	tbnz	w0, #25, 46b3c <aarch64_opcode_lookup@@Base+0xccc>
   46450:	mov	w0, #0x32a                 	// #810
   46454:	ret
   46458:	tbnz	w0, #10, 467ec <aarch64_opcode_lookup@@Base+0x97c>
   4645c:	tbnz	w0, #11, 46b4c <aarch64_opcode_lookup@@Base+0xcdc>
   46460:	tbnz	w0, #12, 46fcc <aarch64_opcode_lookup@@Base+0x115c>
   46464:	tbnz	w0, #13, 4775c <aarch64_opcode_lookup@@Base+0x18ec>
   46468:	tbnz	w0, #14, 482b4 <aarch64_opcode_lookup@@Base+0x2444>
   4646c:	tbnz	w0, #16, 49284 <aarch64_opcode_lookup@@Base+0x3414>
   46470:	tbnz	w0, #17, 4a1f8 <aarch64_opcode_lookup@@Base+0x4388>
   46474:	tbnz	w0, #18, 4ad10 <aarch64_opcode_lookup@@Base+0x4ea0>
   46478:	tst	w0, #0x100000
   4647c:	tbnz	w0, #19, 4b568 <aarch64_opcode_lookup@@Base+0x56f8>
   46480:	mov	w8, #0x313                 	// #787
   46484:	mov	w9, #0x2ff                 	// #767
   46488:	csel	w0, w9, w8, eq  // eq = none
   4648c:	ret
   46490:	tbnz	w0, #21, 4680c <aarch64_opcode_lookup@@Base+0x99c>
   46494:	tbnz	w0, #30, 46b70 <aarch64_opcode_lookup@@Base+0xd00>
   46498:	tbnz	w0, #14, 46fd8 <aarch64_opcode_lookup@@Base+0x1168>
   4649c:	tbnz	w0, #13, 47774 <aarch64_opcode_lookup@@Base+0x1904>
   464a0:	tst	w0, #0x10
   464a4:	mov	w8, #0x53e                 	// #1342
   464a8:	mov	w9, #0x527                 	// #1319
   464ac:	csel	w0, w9, w8, eq  // eq = none
   464b0:	ret
   464b4:	mov	w8, #0x3f0                 	// #1008
   464b8:	mov	w9, #0x3ea                 	// #1002
   464bc:	csel	w0, w9, w8, eq  // eq = none
   464c0:	ret
   464c4:	tbnz	w0, #29, 46834 <aarch64_opcode_lookup@@Base+0x9c4>
   464c8:	tbnz	w0, #10, 46ba0 <aarch64_opcode_lookup@@Base+0xd30>
   464cc:	tbnz	w0, #11, 46ff4 <aarch64_opcode_lookup@@Base+0x1184>
   464d0:	tbnz	w0, #21, 47790 <aarch64_opcode_lookup@@Base+0x1920>
   464d4:	tbnz	w0, #22, 482d8 <aarch64_opcode_lookup@@Base+0x2468>
   464d8:	tbnz	w0, #30, 492a4 <aarch64_opcode_lookup@@Base+0x3434>
   464dc:	cmp	w0, #0x0
   464e0:	mov	w8, #0x953                 	// #2387
   464e4:	mov	w9, #0x94c                 	// #2380
   464e8:	csel	w0, w9, w8, ge  // ge = tcont
   464ec:	ret
   464f0:	tst	w0, #0x8000
   464f4:	mov	w8, #0x2ea                 	// #746
   464f8:	mov	w9, #0x2e8                 	// #744
   464fc:	csel	w0, w9, w8, eq  // eq = none
   46500:	ret
   46504:	tbnz	w0, #29, 4684c <aarch64_opcode_lookup@@Base+0x9dc>
   46508:	tbnz	w0, #30, 46bb0 <aarch64_opcode_lookup@@Base+0xd40>
   4650c:	tst	w0, #0x200000
   46510:	mov	w8, #0x35f                 	// #863
   46514:	mov	w9, #0x35b                 	// #859
   46518:	csel	w0, w9, w8, eq  // eq = none
   4651c:	ret
   46520:	tbnz	w0, #15, 46bc0 <aarch64_opcode_lookup@@Base+0xd50>
   46524:	tbnz	w0, #21, 47004 <aarch64_opcode_lookup@@Base+0x1194>
   46528:	tbnz	w0, #30, 477a0 <aarch64_opcode_lookup@@Base+0x1930>
   4652c:	tbnz	w0, #31, 48924 <aarch64_opcode_lookup@@Base+0x2ab4>
   46530:	mov	w0, #0x6cb                 	// #1739
   46534:	ret
   46538:	tbnz	w0, #29, 46bd4 <aarch64_opcode_lookup@@Base+0xd64>
   4653c:	tst	w0, #0x200000
   46540:	tbnz	w0, #13, 47024 <aarch64_opcode_lookup@@Base+0x11b4>
   46544:	mov	w8, #0x1ca                 	// #458
   46548:	mov	w9, #0x1c8                 	// #456
   4654c:	csel	w0, w9, w8, eq  // eq = none
   46550:	ret
   46554:	tst	w0, #0x40000000
   46558:	mov	w8, #0x3d3                 	// #979
   4655c:	mov	w9, #0x3ca                 	// #970
   46560:	csel	w0, w9, w8, eq  // eq = none
   46564:	ret
   46568:	tbnz	w0, #10, 46bdc <aarch64_opcode_lookup@@Base+0xd6c>
   4656c:	mov	w0, #0x84                  	// #132
   46570:	ret
   46574:	mov	w8, #0x3ee                 	// #1006
   46578:	mov	w9, #0x3e7                 	// #999
   4657c:	csel	w0, w9, w8, eq  // eq = none
   46580:	ret
   46584:	mov	w8, #0x1a                  	// #26
   46588:	mov	w9, #0x16                  	// #22
   4658c:	csel	w0, w9, w8, eq  // eq = none
   46590:	ret
   46594:	tst	w0, #0x20000000
   46598:	tbnz	w0, #12, 46bec <aarch64_opcode_lookup@@Base+0xd7c>
   4659c:	mov	w8, #0x8d                  	// #141
   465a0:	mov	w9, #0x85                  	// #133
   465a4:	csel	w0, w9, w8, eq  // eq = none
   465a8:	ret
   465ac:	tbnz	w0, #13, 46bfc <aarch64_opcode_lookup@@Base+0xd8c>
   465b0:	tbnz	w0, #30, 47034 <aarch64_opcode_lookup@@Base+0x11c4>
   465b4:	tbnz	w0, #14, 477c0 <aarch64_opcode_lookup@@Base+0x1950>
   465b8:	tst	w0, #0x10
   465bc:	mov	w8, #0x52c                 	// #1324
   465c0:	mov	w9, #0x529                 	// #1321
   465c4:	csel	w0, w9, w8, eq  // eq = none
   465c8:	ret
   465cc:	tbnz	w0, #29, 46c1c <aarch64_opcode_lookup@@Base+0xdac>
   465d0:	tst	w0, #0x200000
   465d4:	tbnz	w0, #13, 47054 <aarch64_opcode_lookup@@Base+0x11e4>
   465d8:	mov	w8, #0x1d0                 	// #464
   465dc:	mov	w9, #0x1cc                 	// #460
   465e0:	csel	w0, w9, w8, eq  // eq = none
   465e4:	ret
   465e8:	tst	w0, #0x40000000
   465ec:	mov	w8, #0x3d2                 	// #978
   465f0:	mov	w9, #0x3cb                 	// #971
   465f4:	csel	w0, w9, w8, eq  // eq = none
   465f8:	ret
   465fc:	tbnz	w0, #10, 46c24 <aarch64_opcode_lookup@@Base+0xdb4>
   46600:	tbnz	w0, #21, 47064 <aarch64_opcode_lookup@@Base+0x11f4>
   46604:	tbnz	w0, #22, 477d8 <aarch64_opcode_lookup@@Base+0x1968>
   46608:	tst	w0, #0x800000
   4660c:	mov	w8, #0x28d                 	// #653
   46610:	mov	w9, #0x287                 	// #647
   46614:	csel	w0, w9, w8, eq  // eq = none
   46618:	ret
   4661c:	tbnz	w0, #10, 46c40 <aarch64_opcode_lookup@@Base+0xdd0>
   46620:	tbnz	w0, #11, 4706c <aarch64_opcode_lookup@@Base+0x11fc>
   46624:	tbnz	w0, #12, 477e0 <aarch64_opcode_lookup@@Base+0x1970>
   46628:	tbnz	w0, #13, 482ec <aarch64_opcode_lookup@@Base+0x247c>
   4662c:	tbnz	w0, #14, 492ac <aarch64_opcode_lookup@@Base+0x343c>
   46630:	tbnz	w0, #29, 4a204 <aarch64_opcode_lookup@@Base+0x4394>
   46634:	tbnz	w0, #30, 4ad18 <aarch64_opcode_lookup@@Base+0x4ea8>
   46638:	mov	w0, #0x3c                  	// #60
   4663c:	ret
   46640:	tbnz	w0, #30, 46c68 <aarch64_opcode_lookup@@Base+0xdf8>
   46644:	tbnz	w0, #21, 4708c <aarch64_opcode_lookup@@Base+0x121c>
   46648:	tbnz	w0, #22, 477f8 <aarch64_opcode_lookup@@Base+0x1988>
   4664c:	tbnz	w0, #23, 48304 <aarch64_opcode_lookup@@Base+0x2494>
   46650:	tbnz	w0, #31, 49858 <aarch64_opcode_lookup@@Base+0x39e8>
   46654:	tbnz	w0, #9, 49bd4 <aarch64_opcode_lookup@@Base+0x3d64>
   46658:	tbnz	w0, #20, 4a770 <aarch64_opcode_lookup@@Base+0x4900>
   4665c:	tst	w0, #0x10
   46660:	mov	w8, #0x511                 	// #1297
   46664:	mov	w9, #0x505                 	// #1285
   46668:	csel	w0, w9, w8, eq  // eq = none
   4666c:	ret
   46670:	tbnz	w0, #29, 46c88 <aarch64_opcode_lookup@@Base+0xe18>
   46674:	tbnz	w0, #10, 470a8 <aarch64_opcode_lookup@@Base+0x1238>
   46678:	tbnz	w0, #11, 47814 <aarch64_opcode_lookup@@Base+0x19a4>
   4667c:	tbnz	w0, #21, 48324 <aarch64_opcode_lookup@@Base+0x24b4>
   46680:	cmp	w0, #0x0
   46684:	tbnz	w0, #30, 492bc <aarch64_opcode_lookup@@Base+0x344c>
   46688:	mov	w8, #0x952                 	// #2386
   4668c:	mov	w9, #0x94a                 	// #2378
   46690:	csel	w0, w9, w8, ge  // ge = tcont
   46694:	ret
   46698:	tst	w0, #0x8000
   4669c:	mov	w8, #0x2e5                 	// #741
   466a0:	mov	w9, #0x2e3                 	// #739
   466a4:	csel	w0, w9, w8, eq  // eq = none
   466a8:	ret
   466ac:	tbnz	w0, #11, 46ca0 <aarch64_opcode_lookup@@Base+0xe30>
   466b0:	tbnz	w0, #14, 470b0 <aarch64_opcode_lookup@@Base+0x1240>
   466b4:	tst	w0, #0x20000000
   466b8:	tbnz	w0, #12, 4781c <aarch64_opcode_lookup@@Base+0x19ac>
   466bc:	mov	w8, #0x8f                  	// #143
   466c0:	mov	w9, #0x87                  	// #135
   466c4:	csel	w0, w9, w8, eq  // eq = none
   466c8:	ret
   466cc:	tbnz	w0, #15, 46cb8 <aarch64_opcode_lookup@@Base+0xe48>
   466d0:	tbnz	w0, #21, 470c8 <aarch64_opcode_lookup@@Base+0x1258>
   466d4:	tbnz	w0, #30, 4782c <aarch64_opcode_lookup@@Base+0x19bc>
   466d8:	tbnz	w0, #31, 48938 <aarch64_opcode_lookup@@Base+0x2ac8>
   466dc:	mov	w0, #0x6cc                 	// #1740
   466e0:	ret
   466e4:	mov	w0, #0x3d6                 	// #982
   466e8:	ret
   466ec:	tst	w0, #0x40000000
   466f0:	mov	w8, #0x3d9                 	// #985
   466f4:	mov	w9, #0x3d4                 	// #980
   466f8:	csel	w0, w9, w8, eq  // eq = none
   466fc:	ret
   46700:	tbnz	w0, #11, 46ccc <aarch64_opcode_lookup@@Base+0xe5c>
   46704:	tbnz	w0, #12, 470ec <aarch64_opcode_lookup@@Base+0x127c>
   46708:	tbnz	w0, #13, 4784c <aarch64_opcode_lookup@@Base+0x19dc>
   4670c:	mov	w0, #0x24c                 	// #588
   46710:	ret
   46714:	tbnz	w0, #14, 46cd8 <aarch64_opcode_lookup@@Base+0xe68>
   46718:	tbnz	w0, #15, 470f4 <aarch64_opcode_lookup@@Base+0x1284>
   4671c:	tbnz	w0, #21, 47860 <aarch64_opcode_lookup@@Base+0x19f0>
   46720:	tbnz	w0, #31, 4894c <aarch64_opcode_lookup@@Base+0x2adc>
   46724:	tst	w0, #0x800
   46728:	tbnz	w0, #10, 48e4c <aarch64_opcode_lookup@@Base+0x2fdc>
   4672c:	mov	w8, #0x8ce                 	// #2254
   46730:	mov	w9, #0x84b                 	// #2123
   46734:	csel	w0, w9, w8, eq  // eq = none
   46738:	ret
   4673c:	tbnz	w0, #11, 46d00 <aarch64_opcode_lookup@@Base+0xe90>
   46740:	tbnz	w0, #22, 47118 <aarch64_opcode_lookup@@Base+0x12a8>
   46744:	tbnz	w0, #23, 47880 <aarch64_opcode_lookup@@Base+0x1a10>
   46748:	mov	w0, #0x946                 	// #2374
   4674c:	ret
   46750:	tst	w0, #0x400000
   46754:	mov	w8, #0x368                 	// #872
   46758:	cinc	w0, w8, ne  // ne = any
   4675c:	ret
   46760:	tbnz	w0, #21, 46d18 <aarch64_opcode_lookup@@Base+0xea8>
   46764:	tbnz	w0, #23, 47138 <aarch64_opcode_lookup@@Base+0x12c8>
   46768:	tbnz	w0, #22, 47894 <aarch64_opcode_lookup@@Base+0x1a24>
   4676c:	tbnz	w0, #31, 48954 <aarch64_opcode_lookup@@Base+0x2ae4>
   46770:	tst	w0, #0x40000000
   46774:	mov	w8, #0x36a                 	// #874
   46778:	mov	w9, #0x365                 	// #869
   4677c:	csel	w0, w9, w8, eq  // eq = none
   46780:	ret
   46784:	mov	w0, #0x2e1                 	// #737
   46788:	ret
   4678c:	tst	w0, #0x4000
   46790:	tbnz	w0, #12, 46d28 <aarch64_opcode_lookup@@Base+0xeb8>
   46794:	tbnz	w0, #13, 47150 <aarch64_opcode_lookup@@Base+0x12e0>
   46798:	mov	w8, #0x25e                 	// #606
   4679c:	mov	w9, #0x25a                 	// #602
   467a0:	csel	w0, w9, w8, eq  // eq = none
   467a4:	ret
   467a8:	tbnz	w0, #30, 46d3c <aarch64_opcode_lookup@@Base+0xecc>
   467ac:	tbnz	w0, #31, 47550 <aarch64_opcode_lookup@@Base+0x16e0>
   467b0:	tst	w0, #0x10
   467b4:	mov	w8, #0x539                 	// #1337
   467b8:	mov	w9, #0x537                 	// #1335
   467bc:	csel	w0, w9, w8, eq  // eq = none
   467c0:	ret
   467c4:	mov	w0, #0x3d7                 	// #983
   467c8:	ret
   467cc:	tst	w0, #0x40000000
   467d0:	mov	w8, #0x3d8                 	// #984
   467d4:	mov	w9, #0x3d5                 	// #981
   467d8:	csel	w0, w9, w8, eq  // eq = none
   467dc:	ret
   467e0:	tbnz	w0, #25, 46d50 <aarch64_opcode_lookup@@Base+0xee0>
   467e4:	mov	w0, #0x4a4                 	// #1188
   467e8:	ret
   467ec:	tbnz	w0, #11, 46d60 <aarch64_opcode_lookup@@Base+0xef0>
   467f0:	tbnz	w0, #29, 47160 <aarch64_opcode_lookup@@Base+0x12f0>
   467f4:	tbnz	w0, #30, 478ac <aarch64_opcode_lookup@@Base+0x1a3c>
   467f8:	tst	w0, #0x10
   467fc:	mov	w8, #0x320                 	// #800
   46800:	mov	w9, #0x31e                 	// #798
   46804:	csel	w0, w9, w8, eq  // eq = none
   46808:	ret
   4680c:	tbnz	w0, #30, 46d70 <aarch64_opcode_lookup@@Base+0xf00>
   46810:	tbnz	w0, #14, 4717c <aarch64_opcode_lookup@@Base+0x130c>
   46814:	tbnz	w0, #20, 478c8 <aarch64_opcode_lookup@@Base+0x1a58>
   46818:	tbnz	w0, #31, 4895c <aarch64_opcode_lookup@@Base+0x2aec>
   4681c:	tbnz	w0, #16, 48e5c <aarch64_opcode_lookup@@Base+0x2fec>
   46820:	tbnz	w0, #17, 49be8 <aarch64_opcode_lookup@@Base+0x3d78>
   46824:	tbnz	w0, #18, 4a784 <aarch64_opcode_lookup@@Base+0x4914>
   46828:	tbnz	w0, #19, 4b144 <aarch64_opcode_lookup@@Base+0x52d4>
   4682c:	mov	w0, #0x544                 	// #1348
   46830:	ret
   46834:	cmp	w0, #0x0
   46838:	tbnz	w0, #30, 46d8c <aarch64_opcode_lookup@@Base+0xf1c>
   4683c:	mov	w8, #0x382                 	// #898
   46840:	mov	w9, #0x37a                 	// #890
   46844:	csel	w0, w9, w8, ge  // ge = tcont
   46848:	ret
   4684c:	tbnz	w0, #10, 46d9c <aarch64_opcode_lookup@@Base+0xf2c>
   46850:	tbnz	w0, #13, 471a4 <aarch64_opcode_lookup@@Base+0x1334>
   46854:	tbnz	w0, #14, 478e0 <aarch64_opcode_lookup@@Base+0x1a70>
   46858:	tst	w0, #0x800000
   4685c:	mov	w8, #0x1b4                 	// #436
   46860:	cinc	w0, w8, eq  // eq = none
   46864:	ret
   46868:	tbnz	w0, #13, 46dd0 <aarch64_opcode_lookup@@Base+0xf60>
   4686c:	tbnz	w0, #14, 47568 <aarch64_opcode_lookup@@Base+0x16f8>
   46870:	tbnz	w0, #15, 47e94 <aarch64_opcode_lookup@@Base+0x2024>
   46874:	tst	w0, #0x400000
   46878:	mov	w8, #0x6e8                 	// #1768
   4687c:	mov	w9, #0x6bc                 	// #1724
   46880:	csel	w0, w9, w8, eq  // eq = none
   46884:	ret
   46888:	tst	w0, #0x40000000
   4688c:	mov	w8, #0x3dc                 	// #988
   46890:	cinc	w0, w8, ne  // ne = any
   46894:	ret
   46898:	tbnz	w0, #14, 46e0c <aarch64_opcode_lookup@@Base+0xf9c>
   4689c:	tbnz	w0, #13, 47624 <aarch64_opcode_lookup@@Base+0x17b4>
   468a0:	tbnz	w0, #15, 480c0 <aarch64_opcode_lookup@@Base+0x2250>
   468a4:	tbnz	w0, #22, 48e7c <aarch64_opcode_lookup@@Base+0x300c>
   468a8:	tbnz	w0, #23, 49c00 <aarch64_opcode_lookup@@Base+0x3d90>
   468ac:	mov	w0, #0x55f                 	// #1375
   468b0:	ret
   468b4:	tbnz	w0, #31, 47580 <aarch64_opcode_lookup@@Base+0x1710>
   468b8:	tbnz	w0, #21, 47644 <aarch64_opcode_lookup@@Base+0x17d4>
   468bc:	tbnz	w0, #16, 480e0 <aarch64_opcode_lookup@@Base+0x2270>
   468c0:	tbnz	w0, #17, 48e84 <aarch64_opcode_lookup@@Base+0x3014>
   468c4:	tbnz	w0, #18, 49c10 <aarch64_opcode_lookup@@Base+0x3da0>
   468c8:	tbnz	w0, #19, 4a79c <aarch64_opcode_lookup@@Base+0x492c>
   468cc:	tbnz	w0, #20, 4b160 <aarch64_opcode_lookup@@Base+0x52f0>
   468d0:	mov	w0, #0x50c                 	// #1292
   468d4:	ret
   468d8:	tbnz	w0, #21, 471ac <aarch64_opcode_lookup@@Base+0x133c>
   468dc:	tbnz	w0, #31, 47ea8 <aarch64_opcode_lookup@@Base+0x2038>
   468e0:	tst	w0, #0x40000000
   468e4:	mov	w8, #0x3af                 	// #943
   468e8:	mov	w9, #0x3a9                 	// #937
   468ec:	csel	w0, w9, w8, eq  // eq = none
   468f0:	ret
   468f4:	tbnz	w0, #29, 471c0 <aarch64_opcode_lookup@@Base+0x1350>
   468f8:	tbnz	w0, #13, 478e8 <aarch64_opcode_lookup@@Base+0x1a78>
   468fc:	tst	w0, #0x800000
   46900:	tbnz	w0, #14, 4832c <aarch64_opcode_lookup@@Base+0x24bc>
   46904:	mov	w8, #0x71                  	// #113
   46908:	cinc	w0, w8, eq  // eq = none
   4690c:	ret
   46910:	tbnz	w0, #31, 47598 <aarch64_opcode_lookup@@Base+0x1728>
   46914:	mov	w0, #0x56a                 	// #1386
   46918:	ret
   4691c:	tbnz	w0, #21, 471c8 <aarch64_opcode_lookup@@Base+0x1358>
   46920:	tbnz	w0, #31, 47eb0 <aarch64_opcode_lookup@@Base+0x2040>
   46924:	tst	w0, #0x40000000
   46928:	mov	w8, #0x3b1                 	// #945
   4692c:	mov	w9, #0x3ab                 	// #939
   46930:	csel	w0, w9, w8, eq  // eq = none
   46934:	ret
   46938:	tbnz	w0, #21, 471dc <aarch64_opcode_lookup@@Base+0x136c>
   4693c:	tbnz	w0, #22, 478fc <aarch64_opcode_lookup@@Base+0x1a8c>
   46940:	tst	w0, #0x800000
   46944:	mov	w8, #0x281                 	// #641
   46948:	mov	w9, #0x27e                 	// #638
   4694c:	csel	w0, w9, w8, eq  // eq = none
   46950:	ret
   46954:	tbnz	w0, #10, 471f0 <aarch64_opcode_lookup@@Base+0x1380>
   46958:	tbnz	w0, #11, 47904 <aarch64_opcode_lookup@@Base+0x1a94>
   4695c:	tst	w0, #0x40000000
   46960:	tbnz	w0, #12, 48338 <aarch64_opcode_lookup@@Base+0x24c8>
   46964:	tbnz	w0, #13, 492cc <aarch64_opcode_lookup@@Base+0x345c>
   46968:	tbnz	w0, #14, 4a214 <aarch64_opcode_lookup@@Base+0x43a4>
   4696c:	mov	w8, #0x4c                  	// #76
   46970:	cinc	w0, w8, ne  // ne = any
   46974:	ret
   46978:	tbnz	w0, #21, 47210 <aarch64_opcode_lookup@@Base+0x13a0>
   4697c:	tbnz	w0, #30, 47918 <aarch64_opcode_lookup@@Base+0x1aa8>
   46980:	tbnz	w0, #31, 48974 <aarch64_opcode_lookup@@Base+0x2b04>
   46984:	tst	w0, #0x10
   46988:	mov	w8, #0x535                 	// #1333
   4698c:	mov	w9, #0x53b                 	// #1339
   46990:	csel	w0, w9, w8, eq  // eq = none
   46994:	ret
   46998:	tbnz	w0, #31, 475a8 <aarch64_opcode_lookup@@Base+0x1738>
   4699c:	tst	w0, #0x40000000
   469a0:	mov	w8, #0x37d                 	// #893
   469a4:	mov	w9, #0x378                 	// #888
   469a8:	csel	w0, w9, w8, eq  // eq = none
   469ac:	ret
   469b0:	mov	w8, #0xa                   	// #10
   469b4:	mov	w9, #0x7                   	// #7
   469b8:	csel	w0, w9, w8, eq  // eq = none
   469bc:	ret
   469c0:	tbnz	w0, #13, 47230 <aarch64_opcode_lookup@@Base+0x13c0>
   469c4:	tbnz	w0, #14, 47938 <aarch64_opcode_lookup@@Base+0x1ac8>
   469c8:	tst	w0, #0x20000000
   469cc:	tbnz	w0, #23, 4834c <aarch64_opcode_lookup@@Base+0x24dc>
   469d0:	mov	w8, #0x80                  	// #128
   469d4:	mov	w9, #0x76                  	// #118
   469d8:	csel	w0, w9, w8, eq  // eq = none
   469dc:	ret
   469e0:	tbnz	w0, #30, 47244 <aarch64_opcode_lookup@@Base+0x13d4>
   469e4:	tbnz	w0, #31, 47eb8 <aarch64_opcode_lookup@@Base+0x2048>
   469e8:	tbnz	w0, #21, 480f8 <aarch64_opcode_lookup@@Base+0x2288>
   469ec:	tbnz	w0, #16, 48ea0 <aarch64_opcode_lookup@@Base+0x3030>
   469f0:	tst	w0, #0x80000
   469f4:	tbnz	w0, #17, 49c20 <aarch64_opcode_lookup@@Base+0x3db0>
   469f8:	tbnz	w0, #18, 4a7a8 <aarch64_opcode_lookup@@Base+0x4938>
   469fc:	mov	w8, #0x523                 	// #1315
   46a00:	mov	w9, #0x79e                 	// #1950
   46a04:	csel	w0, w9, w8, eq  // eq = none
   46a08:	ret
   46a0c:	tst	w0, #0x2000
   46a10:	mov	w8, #0x1d6                 	// #470
   46a14:	cinc	w0, w8, ne  // ne = any
   46a18:	ret
   46a1c:	tbnz	w0, #21, 4726c <aarch64_opcode_lookup@@Base+0x13fc>
   46a20:	tbnz	w0, #31, 47ed4 <aarch64_opcode_lookup@@Base+0x2064>
   46a24:	tst	w0, #0x40000000
   46a28:	mov	w8, #0x3b2                 	// #946
   46a2c:	mov	w9, #0x3ac                 	// #940
   46a30:	csel	w0, w9, w8, eq  // eq = none
   46a34:	ret
   46a38:	tbnz	w0, #10, 47284 <aarch64_opcode_lookup@@Base+0x1414>
   46a3c:	tbnz	w0, #12, 4794c <aarch64_opcode_lookup@@Base+0x1adc>
   46a40:	tst	w0, #0x4000
   46a44:	tbnz	w0, #13, 4835c <aarch64_opcode_lookup@@Base+0x24ec>
   46a48:	mov	w8, #0x2aa                 	// #682
   46a4c:	mov	w9, #0x2a6                 	// #678
   46a50:	csel	w0, w9, w8, eq  // eq = none
   46a54:	ret
   46a58:	tbnz	w0, #15, 4729c <aarch64_opcode_lookup@@Base+0x142c>
   46a5c:	tbnz	w0, #21, 47964 <aarch64_opcode_lookup@@Base+0x1af4>
   46a60:	tbnz	w0, #31, 48988 <aarch64_opcode_lookup@@Base+0x2b18>
   46a64:	tst	w0, #0x1000
   46a68:	tbnz	w0, #10, 48ebc <aarch64_opcode_lookup@@Base+0x304c>
   46a6c:	tbnz	w0, #11, 49c34 <aarch64_opcode_lookup@@Base+0x3dc4>
   46a70:	mov	w8, #0x8bd                 	// #2237
   46a74:	mov	w9, #0x851                 	// #2129
   46a78:	csel	w0, w9, w8, eq  // eq = none
   46a7c:	ret
   46a80:	tbnz	w0, #22, 472b8 <aarch64_opcode_lookup@@Base+0x1448>
   46a84:	tst	w0, #0x4000
   46a88:	mov	w8, #0x947                 	// #2375
   46a8c:	cinc	w0, w8, ne  // ne = any
   46a90:	ret
   46a94:	mov	w8, #0x387                 	// #903
   46a98:	cinc	w0, w8, ne  // ne = any
   46a9c:	ret
   46aa0:	tbnz	w0, #21, 472cc <aarch64_opcode_lookup@@Base+0x145c>
   46aa4:	tbnz	w0, #23, 47988 <aarch64_opcode_lookup@@Base+0x1b18>
   46aa8:	tbnz	w0, #22, 4836c <aarch64_opcode_lookup@@Base+0x24fc>
   46aac:	tbnz	w0, #31, 4986c <aarch64_opcode_lookup@@Base+0x39fc>
   46ab0:	tst	w0, #0x40000000
   46ab4:	mov	w8, #0x393                 	// #915
   46ab8:	mov	w9, #0x390                 	// #912
   46abc:	csel	w0, w9, w8, eq  // eq = none
   46ac0:	ret
   46ac4:	tst	w0, #0x800000
   46ac8:	mov	w8, #0x2ec                 	// #748
   46acc:	mov	w9, #0x2e7                 	// #743
   46ad0:	csel	w0, w9, w8, eq  // eq = none
   46ad4:	ret
   46ad8:	tbnz	w0, #10, 472ec <aarch64_opcode_lookup@@Base+0x147c>
   46adc:	tbnz	w0, #13, 479a0 <aarch64_opcode_lookup@@Base+0x1b30>
   46ae0:	tst	w0, #0x800000
   46ae4:	tbnz	w0, #14, 48384 <aarch64_opcode_lookup@@Base+0x2514>
   46ae8:	mov	w8, #0x1ae                 	// #430
   46aec:	cinc	w0, w8, eq  // eq = none
   46af0:	ret
   46af4:	tbnz	w0, #15, 47304 <aarch64_opcode_lookup@@Base+0x1494>
   46af8:	tbnz	w0, #14, 479b0 <aarch64_opcode_lookup@@Base+0x1b40>
   46afc:	tbnz	w0, #12, 48390 <aarch64_opcode_lookup@@Base+0x2520>
   46b00:	tbnz	w0, #10, 492dc <aarch64_opcode_lookup@@Base+0x346c>
   46b04:	tbnz	w0, #23, 4a220 <aarch64_opcode_lookup@@Base+0x43b0>
   46b08:	mov	w0, #0x59f                 	// #1439
   46b0c:	ret
   46b10:	tst	w0, #0x2000
   46b14:	mov	w8, #0x1dc                 	// #476
   46b18:	cinc	w0, w8, ne  // ne = any
   46b1c:	ret
   46b20:	tbnz	w0, #21, 47320 <aarch64_opcode_lookup@@Base+0x14b0>
   46b24:	tbnz	w0, #31, 47edc <aarch64_opcode_lookup@@Base+0x206c>
   46b28:	tst	w0, #0x40000000
   46b2c:	mov	w8, #0x3b3                 	// #947
   46b30:	mov	w9, #0x3ad                 	// #941
   46b34:	csel	w0, w9, w8, eq  // eq = none
   46b38:	ret
   46b3c:	tst	w0, #0x400
   46b40:	mov	w8, #0x283                 	// #643
   46b44:	cinc	w0, w8, ne  // ne = any
   46b48:	ret
   46b4c:	tbnz	w0, #12, 47338 <aarch64_opcode_lookup@@Base+0x14c8>
   46b50:	tbnz	w0, #13, 479c0 <aarch64_opcode_lookup@@Base+0x1b50>
   46b54:	tbnz	w0, #14, 483a0 <aarch64_opcode_lookup@@Base+0x2530>
   46b58:	tbnz	w0, #15, 492e8 <aarch64_opcode_lookup@@Base+0x3478>
   46b5c:	tst	w0, #0x40000000
   46b60:	mov	w8, #0x2a3                 	// #675
   46b64:	mov	w9, #0x347                 	// #839
   46b68:	csel	w0, w9, w8, eq  // eq = none
   46b6c:	ret
   46b70:	tbnz	w0, #13, 47358 <aarch64_opcode_lookup@@Base+0x14e8>
   46b74:	tbnz	w0, #31, 47ee4 <aarch64_opcode_lookup@@Base+0x2074>
   46b78:	tbnz	w0, #14, 48110 <aarch64_opcode_lookup@@Base+0x22a0>
   46b7c:	tbnz	w0, #19, 48ed0 <aarch64_opcode_lookup@@Base+0x3060>
   46b80:	tbnz	w0, #20, 49c44 <aarch64_opcode_lookup@@Base+0x3dd4>
   46b84:	tst	w0, #0x40000
   46b88:	tbnz	w0, #16, 4a7b8 <aarch64_opcode_lookup@@Base+0x4948>
   46b8c:	tbnz	w0, #17, 4b174 <aarch64_opcode_lookup@@Base+0x5304>
   46b90:	mov	w8, #0x594                 	// #1428
   46b94:	mov	w9, #0x565                 	// #1381
   46b98:	csel	w0, w9, w8, eq  // eq = none
   46b9c:	ret
   46ba0:	tst	w0, #0x400000
   46ba4:	mov	w8, #0x376                 	// #886
   46ba8:	cinc	w0, w8, ne  // ne = any
   46bac:	ret
   46bb0:	tbnz	w0, #10, 47384 <aarch64_opcode_lookup@@Base+0x1514>
   46bb4:	tbnz	w0, #12, 479e0 <aarch64_opcode_lookup@@Base+0x1b70>
   46bb8:	mov	w0, #0x1ac                 	// #428
   46bbc:	ret
   46bc0:	tbnz	w0, #30, 4739c <aarch64_opcode_lookup@@Base+0x152c>
   46bc4:	tbnz	w0, #31, 47efc <aarch64_opcode_lookup@@Base+0x208c>
   46bc8:	tbnz	w0, #21, 48124 <aarch64_opcode_lookup@@Base+0x22b4>
   46bcc:	mov	w0, #0x6ca                 	// #1738
   46bd0:	ret
   46bd4:	mov	w0, #0x3d0                 	// #976
   46bd8:	ret
   46bdc:	tbnz	w0, #15, 473b8 <aarch64_opcode_lookup@@Base+0x1548>
   46be0:	tbnz	w0, #22, 479f8 <aarch64_opcode_lookup@@Base+0x1b88>
   46be4:	mov	w0, #0x9c                  	// #156
   46be8:	ret
   46bec:	mov	w8, #0x8e                  	// #142
   46bf0:	mov	w9, #0x86                  	// #134
   46bf4:	csel	w0, w9, w8, eq  // eq = none
   46bf8:	ret
   46bfc:	tbnz	w0, #14, 473d8 <aarch64_opcode_lookup@@Base+0x1568>
   46c00:	tbnz	w0, #30, 47a18 <aarch64_opcode_lookup@@Base+0x1ba8>
   46c04:	tbnz	w0, #31, 4899c <aarch64_opcode_lookup@@Base+0x2b2c>
   46c08:	tst	w0, #0x10
   46c0c:	mov	w8, #0x53d                 	// #1341
   46c10:	mov	w9, #0x526                 	// #1318
   46c14:	csel	w0, w9, w8, eq  // eq = none
   46c18:	ret
   46c1c:	mov	w0, #0x3d1                 	// #977
   46c20:	ret
   46c24:	tbnz	w0, #21, 473f4 <aarch64_opcode_lookup@@Base+0x1584>
   46c28:	tbnz	w0, #22, 47a34 <aarch64_opcode_lookup@@Base+0x1bc4>
   46c2c:	tst	w0, #0x800000
   46c30:	mov	w8, #0x28e                 	// #654
   46c34:	mov	w9, #0x288                 	// #648
   46c38:	csel	w0, w9, w8, eq  // eq = none
   46c3c:	ret
   46c40:	tbnz	w0, #11, 473fc <aarch64_opcode_lookup@@Base+0x158c>
   46c44:	tbnz	w0, #12, 47a3c <aarch64_opcode_lookup@@Base+0x1bcc>
   46c48:	tbnz	w0, #13, 483bc <aarch64_opcode_lookup@@Base+0x254c>
   46c4c:	tbnz	w0, #14, 49300 <aarch64_opcode_lookup@@Base+0x3490>
   46c50:	tbnz	w0, #29, 4a230 <aarch64_opcode_lookup@@Base+0x43c0>
   46c54:	cmp	w0, #0x0
   46c58:	mov	w8, #0x926                 	// #2342
   46c5c:	mov	w9, #0x11b                 	// #283
   46c60:	csel	w0, w9, w8, ge  // ge = tcont
   46c64:	ret
   46c68:	tbnz	w0, #13, 47420 <aarch64_opcode_lookup@@Base+0x15b0>
   46c6c:	tbnz	w0, #31, 47f18 <aarch64_opcode_lookup@@Base+0x20a8>
   46c70:	tbnz	w0, #21, 4813c <aarch64_opcode_lookup@@Base+0x22cc>
   46c74:	tst	w0, #0x10
   46c78:	mov	w8, #0x572                 	// #1394
   46c7c:	mov	w9, #0x570                 	// #1392
   46c80:	csel	w0, w9, w8, eq  // eq = none
   46c84:	ret
   46c88:	tbnz	w0, #31, 475b0 <aarch64_opcode_lookup@@Base+0x1740>
   46c8c:	tst	w0, #0x40000000
   46c90:	mov	w8, #0x37e                 	// #894
   46c94:	mov	w9, #0x379                 	// #889
   46c98:	csel	w0, w9, w8, eq  // eq = none
   46c9c:	ret
   46ca0:	tbnz	w0, #12, 4743c <aarch64_opcode_lookup@@Base+0x15cc>
   46ca4:	tst	w0, #0x40000000
   46ca8:	tbnz	w0, #29, 47a58 <aarch64_opcode_lookup@@Base+0x1be8>
   46cac:	mov	w8, #0x17e                 	// #382
   46cb0:	cinc	w0, w8, ne  // ne = any
   46cb4:	ret
   46cb8:	tbnz	w0, #30, 47454 <aarch64_opcode_lookup@@Base+0x15e4>
   46cbc:	tbnz	w0, #31, 47f24 <aarch64_opcode_lookup@@Base+0x20b4>
   46cc0:	tbnz	w0, #21, 48144 <aarch64_opcode_lookup@@Base+0x22d4>
   46cc4:	mov	w0, #0x6cf                 	// #1743
   46cc8:	ret
   46ccc:	tbnz	w0, #13, 47470 <aarch64_opcode_lookup@@Base+0x1600>
   46cd0:	mov	w0, #0x24d                 	// #589
   46cd4:	ret
   46cd8:	tbnz	w0, #15, 47484 <aarch64_opcode_lookup@@Base+0x1614>
   46cdc:	tbnz	w0, #21, 47a64 <aarch64_opcode_lookup@@Base+0x1bf4>
   46ce0:	tbnz	w0, #31, 489b8 <aarch64_opcode_lookup@@Base+0x2b48>
   46ce4:	tbnz	w0, #10, 48ef0 <aarch64_opcode_lookup@@Base+0x3080>
   46ce8:	tbnz	w0, #11, 49c4c <aarch64_opcode_lookup@@Base+0x3ddc>
   46cec:	tst	w0, #0x1000
   46cf0:	mov	w8, #0x86c                 	// #2156
   46cf4:	mov	w9, #0x888                 	// #2184
   46cf8:	csel	w0, w9, w8, eq  // eq = none
   46cfc:	ret
   46d00:	tbnz	w0, #12, 474a8 <aarch64_opcode_lookup@@Base+0x1638>
   46d04:	tbnz	w0, #13, 47a84 <aarch64_opcode_lookup@@Base+0x1c14>
   46d08:	tbnz	w0, #14, 483d4 <aarch64_opcode_lookup@@Base+0x2564>
   46d0c:	tbnz	w0, #30, 4931c <aarch64_opcode_lookup@@Base+0x34ac>
   46d10:	mov	w0, #0x2c8                 	// #712
   46d14:	ret
   46d18:	tst	w0, #0x800000
   46d1c:	mov	w8, #0x3a6                 	// #934
   46d20:	cinc	w0, w8, ne  // ne = any
   46d24:	ret
   46d28:	tbnz	w0, #13, 474c0 <aarch64_opcode_lookup@@Base+0x1650>
   46d2c:	mov	w8, #0x25f                 	// #607
   46d30:	mov	w9, #0x25b                 	// #603
   46d34:	csel	w0, w9, w8, eq  // eq = none
   46d38:	ret
   46d3c:	tbnz	w0, #14, 474d0 <aarch64_opcode_lookup@@Base+0x1660>
   46d40:	tbnz	w0, #15, 47a98 <aarch64_opcode_lookup@@Base+0x1c28>
   46d44:	tbnz	w0, #23, 483dc <aarch64_opcode_lookup@@Base+0x256c>
   46d48:	mov	w0, #0x5aa                 	// #1450
   46d4c:	ret
   46d50:	tst	w0, #0x400
   46d54:	mov	w8, #0x285                 	// #645
   46d58:	cinc	w0, w8, ne  // ne = any
   46d5c:	ret
   46d60:	tbnz	w0, #29, 474e4 <aarch64_opcode_lookup@@Base+0x1674>
   46d64:	tbnz	w0, #30, 47ab4 <aarch64_opcode_lookup@@Base+0x1c44>
   46d68:	mov	w0, #0x363                 	// #867
   46d6c:	ret
   46d70:	tbnz	w0, #13, 47504 <aarch64_opcode_lookup@@Base+0x1694>
   46d74:	tbnz	w0, #31, 47f40 <aarch64_opcode_lookup@@Base+0x20d0>
   46d78:	tst	w0, #0x4000
   46d7c:	mov	w8, #0x5af                 	// #1455
   46d80:	mov	w9, #0x591                 	// #1425
   46d84:	csel	w0, w9, w8, eq  // eq = none
   46d88:	ret
   46d8c:	mov	w8, #0x383                 	// #899
   46d90:	mov	w9, #0x37f                 	// #895
   46d94:	csel	w0, w9, w8, ge  // ge = tcont
   46d98:	ret
   46d9c:	tbnz	w0, #11, 47514 <aarch64_opcode_lookup@@Base+0x16a4>
   46da0:	tbnz	w0, #12, 47ad4 <aarch64_opcode_lookup@@Base+0x1c64>
   46da4:	tst	w0, #0x2000
   46da8:	mov	w8, #0x266                 	// #614
   46dac:	mov	w9, #0x262                 	// #610
   46db0:	csel	w0, w9, w8, eq  // eq = none
   46db4:	ret
   46db8:	tbnz	w0, #22, 475b8 <aarch64_opcode_lookup@@Base+0x1748>
   46dbc:	tst	w0, #0x800000
   46dc0:	mov	w8, #0x92b                 	// #2347
   46dc4:	mov	w9, #0x929                 	// #2345
   46dc8:	csel	w0, w9, w8, eq  // eq = none
   46dcc:	ret
   46dd0:	tbnz	w0, #14, 475c4 <aarch64_opcode_lookup@@Base+0x1754>
   46dd4:	tbnz	w0, #15, 47f58 <aarch64_opcode_lookup@@Base+0x20e8>
   46dd8:	mov	w0, #0x6f6                 	// #1782
   46ddc:	ret
   46de0:	tbnz	w0, #11, 47658 <aarch64_opcode_lookup@@Base+0x17e8>
   46de4:	tbnz	w0, #12, 4816c <aarch64_opcode_lookup@@Base+0x22fc>
   46de8:	tbnz	w0, #13, 48f08 <aarch64_opcode_lookup@@Base+0x3098>
   46dec:	tbnz	w0, #22, 49c64 <aarch64_opcode_lookup@@Base+0x3df4>
   46df0:	mov	w0, #0x95                  	// #149
   46df4:	ret
   46df8:	tst	w0, #0x8000
   46dfc:	mov	w8, #0x578                 	// #1400
   46e00:	mov	w9, #0x549                 	// #1353
   46e04:	csel	w0, w9, w8, eq  // eq = none
   46e08:	ret
   46e0c:	tbnz	w0, #15, 4766c <aarch64_opcode_lookup@@Base+0x17fc>
   46e10:	tbnz	w0, #10, 48188 <aarch64_opcode_lookup@@Base+0x2318>
   46e14:	tbnz	w0, #11, 48f1c <aarch64_opcode_lookup@@Base+0x30ac>
   46e18:	tbnz	w0, #12, 49c78 <aarch64_opcode_lookup@@Base+0x3e08>
   46e1c:	tbnz	w0, #13, 4a7cc <aarch64_opcode_lookup@@Base+0x495c>
   46e20:	tbnz	w0, #20, 4b184 <aarch64_opcode_lookup@@Base+0x5314>
   46e24:	mov	w0, #0x7ed                 	// #2029
   46e28:	ret
   46e2c:	tbnz	w0, #30, 47adc <aarch64_opcode_lookup@@Base+0x1c6c>
   46e30:	tbnz	w0, #31, 489cc <aarch64_opcode_lookup@@Base+0x2b5c>
   46e34:	tbnz	w0, #10, 48f2c <aarch64_opcode_lookup@@Base+0x30bc>
   46e38:	tbnz	w0, #11, 49c88 <aarch64_opcode_lookup@@Base+0x3e18>
   46e3c:	tst	w0, #0x1000
   46e40:	mov	w8, #0x727                 	// #1831
   46e44:	mov	w9, #0x4fa                 	// #1274
   46e48:	csel	w0, w9, w8, eq  // eq = none
   46e4c:	ret
   46e50:	cmp	w0, #0x0
   46e54:	mov	w8, #0x3b6                 	// #950
   46e58:	mov	w9, #0x3fd                 	// #1021
   46e5c:	csel	w0, w9, w8, ge  // ge = tcont
   46e60:	ret
   46e64:	tst	w0, #0x40000000
   46e68:	tbnz	w0, #14, 47afc <aarch64_opcode_lookup@@Base+0x1c8c>
   46e6c:	tbnz	w0, #29, 483ec <aarch64_opcode_lookup@@Base+0x257c>
   46e70:	mov	w8, #0x62                  	// #98
   46e74:	cinc	w0, w8, ne  // ne = any
   46e78:	ret
   46e7c:	tbnz	w0, #14, 47b0c <aarch64_opcode_lookup@@Base+0x1c9c>
   46e80:	tbnz	w0, #31, 489e0 <aarch64_opcode_lookup@@Base+0x2b70>
   46e84:	tst	w0, #0x10
   46e88:	mov	w8, #0x53c                 	// #1340
   46e8c:	mov	w9, #0x525                 	// #1317
   46e90:	csel	w0, w9, w8, eq  // eq = none
   46e94:	ret
   46e98:	cmp	w0, #0x0
   46e9c:	mov	w8, #0x3ba                 	// #954
   46ea0:	mov	w9, #0x3fe                 	// #1022
   46ea4:	csel	w0, w9, w8, ge  // ge = tcont
   46ea8:	ret
   46eac:	tbnz	w0, #31, 47f64 <aarch64_opcode_lookup@@Base+0x20f4>
   46eb0:	tbnz	w0, #21, 481a0 <aarch64_opcode_lookup@@Base+0x2330>
   46eb4:	tbnz	w0, #10, 48f44 <aarch64_opcode_lookup@@Base+0x30d4>
   46eb8:	tbnz	w0, #11, 49c90 <aarch64_opcode_lookup@@Base+0x3e20>
   46ebc:	mov	w0, #0x564                 	// #1380
   46ec0:	ret
   46ec4:	mov	w0, #0x374                 	// #884
   46ec8:	ret
   46ecc:	tbnz	w0, #14, 47b24 <aarch64_opcode_lookup@@Base+0x1cb4>
   46ed0:	tst	w0, #0x40000000
   46ed4:	tbnz	w0, #29, 483f8 <aarch64_opcode_lookup@@Base+0x2588>
   46ed8:	mov	w8, #0x6b                  	// #107
   46edc:	cinc	w0, w8, ne  // ne = any
   46ee0:	ret
   46ee4:	tbnz	w0, #30, 47b34 <aarch64_opcode_lookup@@Base+0x1cc4>
   46ee8:	tbnz	w0, #31, 489f4 <aarch64_opcode_lookup@@Base+0x2b84>
   46eec:	tbnz	w0, #10, 48f50 <aarch64_opcode_lookup@@Base+0x30e0>
   46ef0:	tbnz	w0, #11, 49ca4 <aarch64_opcode_lookup@@Base+0x3e34>
   46ef4:	tst	w0, #0x800000
   46ef8:	tbnz	w0, #22, 4a7d4 <aarch64_opcode_lookup@@Base+0x4964>
   46efc:	mov	w8, #0x559                 	// #1369
   46f00:	mov	w9, #0x502                 	// #1282
   46f04:	csel	w0, w9, w8, eq  // eq = none
   46f08:	ret
   46f0c:	tst	w0, #0x2000
   46f10:	mov	w8, #0x1d4                 	// #468
   46f14:	cinc	w0, w8, ne  // ne = any
   46f18:	ret
   46f1c:	tbnz	w0, #31, 47f6c <aarch64_opcode_lookup@@Base+0x20fc>
   46f20:	tst	w0, #0x40000000
   46f24:	mov	w8, #0x3f1                 	// #1009
   46f28:	cinc	w0, w8, ne  // ne = any
   46f2c:	ret
   46f30:	mov	w8, #0x2f9                 	// #761
   46f34:	mov	w9, #0x2fd                 	// #765
   46f38:	csel	w0, w9, w8, eq  // eq = none
   46f3c:	ret
   46f40:	tbnz	w0, #21, 47b40 <aarch64_opcode_lookup@@Base+0x1cd0>
   46f44:	tbnz	w0, #31, 48a08 <aarch64_opcode_lookup@@Base+0x2b98>
   46f48:	tbnz	w0, #10, 48f5c <aarch64_opcode_lookup@@Base+0x30ec>
   46f4c:	tbnz	w0, #11, 49cb8 <aarch64_opcode_lookup@@Base+0x3e48>
   46f50:	tst	w0, #0x1000
   46f54:	mov	w8, #0x80f                 	// #2063
   46f58:	mov	w9, #0x84f                 	// #2127
   46f5c:	csel	w0, w9, w8, eq  // eq = none
   46f60:	ret
   46f64:	tbnz	w0, #23, 47b58 <aarch64_opcode_lookup@@Base+0x1ce8>
   46f68:	tst	w0, #0x40000000
   46f6c:	mov	w8, #0x294                 	// #660
   46f70:	cinc	w0, w8, ne  // ne = any
   46f74:	ret
   46f78:	tbnz	w0, #12, 47b74 <aarch64_opcode_lookup@@Base+0x1d04>
   46f7c:	tbnz	w0, #13, 48404 <aarch64_opcode_lookup@@Base+0x2594>
   46f80:	tbnz	w0, #14, 49330 <aarch64_opcode_lookup@@Base+0x34c0>
   46f84:	tbnz	w0, #15, 4a238 <aarch64_opcode_lookup@@Base+0x43c8>
   46f88:	tbnz	w0, #22, 4ad2c <aarch64_opcode_lookup@@Base+0x4ebc>
   46f8c:	tbnz	w0, #23, 4b578 <aarch64_opcode_lookup@@Base+0x5708>
   46f90:	tbnz	w0, #31, 4b9fc <aarch64_opcode_lookup@@Base+0x5b8c>
   46f94:	tst	w0, #0x40000000
   46f98:	mov	w8, #0x40d                 	// #1037
   46f9c:	cinc	w0, w8, ne  // ne = any
   46fa0:	ret
   46fa4:	tst	w0, #0x2000
   46fa8:	mov	w8, #0x1d8                 	// #472
   46fac:	cinc	w0, w8, ne  // ne = any
   46fb0:	ret
   46fb4:	tbnz	w0, #31, 47f74 <aarch64_opcode_lookup@@Base+0x2104>
   46fb8:	tst	w0, #0x40000000
   46fbc:	mov	w8, #0x3f7                 	// #1015
   46fc0:	mov	w9, #0x3f4                 	// #1012
   46fc4:	csel	w0, w9, w8, eq  // eq = none
   46fc8:	ret
   46fcc:	tbnz	w0, #30, 47b98 <aarch64_opcode_lookup@@Base+0x1d28>
   46fd0:	mov	w0, #0x361                 	// #865
   46fd4:	ret
   46fd8:	tbnz	w0, #31, 47f7c <aarch64_opcode_lookup@@Base+0x210c>
   46fdc:	tbnz	w0, #4, 481a8 <aarch64_opcode_lookup@@Base+0x2338>
   46fe0:	tbnz	w0, #20, 48f70 <aarch64_opcode_lookup@@Base+0x3100>
   46fe4:	tst	w0, #0x400000
   46fe8:	mov	w8, #0x519                 	// #1305
   46fec:	cinc	w0, w8, ne  // ne = any
   46ff0:	ret
   46ff4:	tst	w0, #0x400000
   46ff8:	mov	w8, #0x372                 	// #882
   46ffc:	cinc	w0, w8, ne  // ne = any
   47000:	ret
   47004:	tbnz	w0, #30, 47bb0 <aarch64_opcode_lookup@@Base+0x1d40>
   47008:	tbnz	w0, #31, 48a1c <aarch64_opcode_lookup@@Base+0x2bac>
   4700c:	tbnz	w0, #11, 48f80 <aarch64_opcode_lookup@@Base+0x3110>
   47010:	tbnz	w0, #12, 49cc4 <aarch64_opcode_lookup@@Base+0x3e54>
   47014:	tst	w0, #0x400
   47018:	mov	w8, #0x5d3                 	// #1491
   4701c:	cinc	w0, w8, ne  // ne = any
   47020:	ret
   47024:	mov	w8, #0x1cb                 	// #459
   47028:	mov	w9, #0x1c9                 	// #457
   4702c:	csel	w0, w9, w8, eq  // eq = none
   47030:	ret
   47034:	tbnz	w0, #31, 47f98 <aarch64_opcode_lookup@@Base+0x2128>
   47038:	tbnz	w0, #17, 481b8 <aarch64_opcode_lookup@@Base+0x2348>
   4703c:	tbnz	w0, #18, 48f94 <aarch64_opcode_lookup@@Base+0x3124>
   47040:	tst	w0, #0x100000
   47044:	mov	w8, #0x812                 	// #2066
   47048:	mov	w9, #0x569                 	// #1385
   4704c:	csel	w0, w9, w8, eq  // eq = none
   47050:	ret
   47054:	mov	w8, #0x1d1                 	// #465
   47058:	mov	w9, #0x1cd                 	// #461
   4705c:	csel	w0, w9, w8, eq  // eq = none
   47060:	ret
   47064:	mov	w0, #0x289                 	// #649
   47068:	ret
   4706c:	tbnz	w0, #12, 47bbc <aarch64_opcode_lookup@@Base+0x1d4c>
   47070:	tbnz	w0, #13, 48424 <aarch64_opcode_lookup@@Base+0x25b4>
   47074:	tbnz	w0, #14, 49350 <aarch64_opcode_lookup@@Base+0x34e0>
   47078:	tbnz	w0, #29, 4a254 <aarch64_opcode_lookup@@Base+0x43e4>
   4707c:	tbnz	w0, #31, 4b124 <aarch64_opcode_lookup@@Base+0x52b4>
   47080:	tbnz	w0, #16, 4b19c <aarch64_opcode_lookup@@Base+0x532c>
   47084:	mov	w0, #0xaa                  	// #170
   47088:	ret
   4708c:	tst	w0, #0x800000
   47090:	tbnz	w0, #13, 47bdc <aarch64_opcode_lookup@@Base+0x1d6c>
   47094:	tbnz	w0, #22, 48438 <aarch64_opcode_lookup@@Base+0x25c8>
   47098:	mov	w8, #0x618                 	// #1560
   4709c:	mov	w9, #0x624                 	// #1572
   470a0:	csel	w0, w9, w8, eq  // eq = none
   470a4:	ret
   470a8:	mov	w0, #0x375                 	// #885
   470ac:	ret
   470b0:	tbnz	w0, #13, 47bf0 <aarch64_opcode_lookup@@Base+0x1d80>
   470b4:	tst	w0, #0x20000000
   470b8:	mov	w8, #0x91                  	// #145
   470bc:	mov	w9, #0x89                  	// #137
   470c0:	csel	w0, w9, w8, eq  // eq = none
   470c4:	ret
   470c8:	tbnz	w0, #30, 47c08 <aarch64_opcode_lookup@@Base+0x1d98>
   470cc:	tbnz	w0, #31, 48a30 <aarch64_opcode_lookup@@Base+0x2bc0>
   470d0:	tbnz	w0, #10, 48fa8 <aarch64_opcode_lookup@@Base+0x3138>
   470d4:	tbnz	w0, #11, 49cdc <aarch64_opcode_lookup@@Base+0x3e6c>
   470d8:	tst	w0, #0x1000
   470dc:	mov	w8, #0x885                 	// #2181
   470e0:	mov	w9, #0x83c                 	// #2108
   470e4:	csel	w0, w9, w8, eq  // eq = none
   470e8:	ret
   470ec:	mov	w0, #0x241                 	// #577
   470f0:	ret
   470f4:	tbnz	w0, #21, 47c14 <aarch64_opcode_lookup@@Base+0x1da4>
   470f8:	tbnz	w0, #31, 48a44 <aarch64_opcode_lookup@@Base+0x2bd4>
   470fc:	tbnz	w0, #10, 48fc0 <aarch64_opcode_lookup@@Base+0x3150>
   47100:	tst	w0, #0x1000
   47104:	tbnz	w0, #11, 49ce4 <aarch64_opcode_lookup@@Base+0x3e74>
   47108:	mov	w8, #0x91f                 	// #2335
   4710c:	mov	w9, #0x8b6                 	// #2230
   47110:	csel	w0, w9, w8, eq  // eq = none
   47114:	ret
   47118:	tbnz	w0, #12, 47c2c <aarch64_opcode_lookup@@Base+0x1dbc>
   4711c:	tbnz	w0, #13, 48448 <aarch64_opcode_lookup@@Base+0x25d8>
   47120:	tbnz	w0, #14, 49368 <aarch64_opcode_lookup@@Base+0x34f8>
   47124:	tst	w0, #0x10000
   47128:	mov	w8, #0x2b6                 	// #694
   4712c:	mov	w9, #0x2ae                 	// #686
   47130:	csel	w0, w9, w8, eq  // eq = none
   47134:	ret
   47138:	tbnz	w0, #30, 47c40 <aarch64_opcode_lookup@@Base+0x1dd0>
   4713c:	cmp	w0, #0x0
   47140:	mov	w8, #0x36f                 	// #879
   47144:	mov	w9, #0x367                 	// #871
   47148:	csel	w0, w9, w8, ge  // ge = tcont
   4714c:	ret
   47150:	mov	w8, #0x260                 	// #608
   47154:	mov	w9, #0x25c                 	// #604
   47158:	csel	w0, w9, w8, eq  // eq = none
   4715c:	ret
   47160:	tbnz	w0, #12, 47c48 <aarch64_opcode_lookup@@Base+0x1dd8>
   47164:	tbnz	w0, #13, 4845c <aarch64_opcode_lookup@@Base+0x25ec>
   47168:	tst	w0, #0x4000
   4716c:	mov	w8, #0x248                 	// #584
   47170:	mov	w9, #0x24a                 	// #586
   47174:	csel	w0, w9, w8, eq  // eq = none
   47178:	ret
   4717c:	tbnz	w0, #31, 47fb0 <aarch64_opcode_lookup@@Base+0x2140>
   47180:	tbnz	w0, #16, 481cc <aarch64_opcode_lookup@@Base+0x235c>
   47184:	tbnz	w0, #17, 48fd8 <aarch64_opcode_lookup@@Base+0x3168>
   47188:	tbnz	w0, #18, 49cf4 <aarch64_opcode_lookup@@Base+0x3e84>
   4718c:	tst	w0, #0x100000
   47190:	tbnz	w0, #19, 4a7e4 <aarch64_opcode_lookup@@Base+0x4974>
   47194:	mov	w8, #0x6d0                 	// #1744
   47198:	mov	w9, #0x4fb                 	// #1275
   4719c:	csel	w0, w9, w8, eq  // eq = none
   471a0:	ret
   471a4:	mov	w0, #0x1b7                 	// #439
   471a8:	ret
   471ac:	cmp	w0, #0x0
   471b0:	mov	w8, #0x3b7                 	// #951
   471b4:	mov	w9, #0x3ff                 	// #1023
   471b8:	csel	w0, w9, w8, ge  // ge = tcont
   471bc:	ret
   471c0:	mov	w0, #0x83                  	// #131
   471c4:	ret
   471c8:	cmp	w0, #0x0
   471cc:	mov	w8, #0x3bb                 	// #955
   471d0:	mov	w9, #0x400                 	// #1024
   471d4:	csel	w0, w9, w8, ge  // ge = tcont
   471d8:	ret
   471dc:	tst	w0, #0x800000
   471e0:	mov	w8, #0x282                 	// #642
   471e4:	mov	w9, #0x27f                 	// #639
   471e8:	csel	w0, w9, w8, eq  // eq = none
   471ec:	ret
   471f0:	tbnz	w0, #11, 47c60 <aarch64_opcode_lookup@@Base+0x1df0>
   471f4:	tst	w0, #0x4000
   471f8:	tbnz	w0, #12, 48470 <aarch64_opcode_lookup@@Base+0x2600>
   471fc:	tbnz	w0, #13, 4937c <aarch64_opcode_lookup@@Base+0x350c>
   47200:	mov	w8, #0x147                 	// #327
   47204:	mov	w9, #0x140                 	// #320
   47208:	csel	w0, w9, w8, eq  // eq = none
   4720c:	ret
   47210:	tbnz	w0, #30, 47c7c <aarch64_opcode_lookup@@Base+0x1e0c>
   47214:	tbnz	w0, #31, 48a4c <aarch64_opcode_lookup@@Base+0x2bdc>
   47218:	tst	w0, #0x1000
   4721c:	tbnz	w0, #4, 48fec <aarch64_opcode_lookup@@Base+0x317c>
   47220:	mov	w8, #0x913                 	// #2323
   47224:	mov	w9, #0x54a                 	// #1354
   47228:	csel	w0, w9, w8, eq  // eq = none
   4722c:	ret
   47230:	tbnz	w0, #14, 47c84 <aarch64_opcode_lookup@@Base+0x1e14>
   47234:	tst	w0, #0x40000000
   47238:	mov	w8, #0x6d                  	// #109
   4723c:	cinc	w0, w8, ne  // ne = any
   47240:	ret
   47244:	tbnz	w0, #21, 47c9c <aarch64_opcode_lookup@@Base+0x1e2c>
   47248:	tbnz	w0, #31, 48a5c <aarch64_opcode_lookup@@Base+0x2bec>
   4724c:	tbnz	w0, #16, 48ffc <aarch64_opcode_lookup@@Base+0x318c>
   47250:	tbnz	w0, #17, 49cfc <aarch64_opcode_lookup@@Base+0x3e8c>
   47254:	tbnz	w0, #18, 4a7f4 <aarch64_opcode_lookup@@Base+0x4984>
   47258:	tst	w0, #0x80000
   4725c:	mov	w8, #0x871                 	// #2161
   47260:	mov	w9, #0x8fb                 	// #2299
   47264:	csel	w0, w9, w8, eq  // eq = none
   47268:	ret
   4726c:	tbnz	w0, #31, 47fcc <aarch64_opcode_lookup@@Base+0x215c>
   47270:	tst	w0, #0x40000000
   47274:	mov	w8, #0x3f8                 	// #1016
   47278:	mov	w9, #0x3f5                 	// #1013
   4727c:	csel	w0, w9, w8, eq  // eq = none
   47280:	ret
   47284:	tbnz	w0, #11, 47cac <aarch64_opcode_lookup@@Base+0x1e3c>
   47288:	tst	w0, #0x2000
   4728c:	mov	w8, #0x22c                 	// #556
   47290:	mov	w9, #0x217                 	// #535
   47294:	csel	w0, w9, w8, eq  // eq = none
   47298:	ret
   4729c:	tbnz	w0, #21, 47cb8 <aarch64_opcode_lookup@@Base+0x1e48>
   472a0:	tbnz	w0, #31, 48a70 <aarch64_opcode_lookup@@Base+0x2c00>
   472a4:	tbnz	w0, #11, 4901c <aarch64_opcode_lookup@@Base+0x31ac>
   472a8:	tbnz	w0, #10, 49d04 <aarch64_opcode_lookup@@Base+0x3e94>
   472ac:	tbnz	w0, #12, 4a808 <aarch64_opcode_lookup@@Base+0x4998>
   472b0:	mov	w0, #0x849                 	// #2121
   472b4:	ret
   472b8:	tbnz	w0, #23, 47cd0 <aarch64_opcode_lookup@@Base+0x1e60>
   472bc:	tst	w0, #0x40000000
   472c0:	mov	w8, #0x292                 	// #658
   472c4:	cinc	w0, w8, ne  // ne = any
   472c8:	ret
   472cc:	tbnz	w0, #23, 47ce8 <aarch64_opcode_lookup@@Base+0x1e78>
   472d0:	tbnz	w0, #22, 48484 <aarch64_opcode_lookup@@Base+0x2614>
   472d4:	tbnz	w0, #31, 49874 <aarch64_opcode_lookup@@Base+0x3a04>
   472d8:	tst	w0, #0x40000000
   472dc:	mov	w8, #0x389                 	// #905
   472e0:	mov	w9, #0x384                 	// #900
   472e4:	csel	w0, w9, w8, eq  // eq = none
   472e8:	ret
   472ec:	tbnz	w0, #12, 47d00 <aarch64_opcode_lookup@@Base+0x1e90>
   472f0:	tst	w0, #0x2000
   472f4:	mov	w8, #0x250                 	// #592
   472f8:	mov	w9, #0x24e                 	// #590
   472fc:	csel	w0, w9, w8, eq  // eq = none
   47300:	ret
   47304:	tbnz	w0, #22, 47d18 <aarch64_opcode_lookup@@Base+0x1ea8>
   47308:	tbnz	w0, #31, 48a88 <aarch64_opcode_lookup@@Base+0x2c18>
   4730c:	tst	w0, #0x400
   47310:	mov	w8, #0x821                 	// #2081
   47314:	mov	w9, #0x81f                 	// #2079
   47318:	csel	w0, w9, w8, eq  // eq = none
   4731c:	ret
   47320:	tbnz	w0, #31, 47fd4 <aarch64_opcode_lookup@@Base+0x2164>
   47324:	tst	w0, #0x40000000
   47328:	mov	w8, #0x3f9                 	// #1017
   4732c:	mov	w9, #0x3f6                 	// #1014
   47330:	csel	w0, w9, w8, eq  // eq = none
   47334:	ret
   47338:	tbnz	w0, #13, 47d24 <aarch64_opcode_lookup@@Base+0x1eb4>
   4733c:	tbnz	w0, #14, 4849c <aarch64_opcode_lookup@@Base+0x262c>
   47340:	tbnz	w0, #15, 4938c <aarch64_opcode_lookup@@Base+0x351c>
   47344:	tst	w0, #0x40000000
   47348:	mov	w8, #0x2a4                 	// #676
   4734c:	mov	w9, #0x349                 	// #841
   47350:	csel	w0, w9, w8, eq  // eq = none
   47354:	ret
   47358:	tbnz	w0, #14, 47d44 <aarch64_opcode_lookup@@Base+0x1ed4>
   4735c:	tbnz	w0, #31, 48a90 <aarch64_opcode_lookup@@Base+0x2c20>
   47360:	tbnz	w0, #16, 49030 <aarch64_opcode_lookup@@Base+0x31c0>
   47364:	tbnz	w0, #19, 49d10 <aarch64_opcode_lookup@@Base+0x3ea0>
   47368:	tbnz	w0, #17, 4a81c <aarch64_opcode_lookup@@Base+0x49ac>
   4736c:	tbnz	w0, #18, 4b1b4 <aarch64_opcode_lookup@@Base+0x5344>
   47370:	tst	w0, #0x100000
   47374:	mov	w8, #0x713                 	// #1811
   47378:	mov	w9, #0x5b9                 	// #1465
   4737c:	csel	w0, w9, w8, eq  // eq = none
   47380:	ret
   47384:	tbnz	w0, #11, 47d50 <aarch64_opcode_lookup@@Base+0x1ee0>
   47388:	tst	w0, #0x1000
   4738c:	mov	w8, #0x254                 	// #596
   47390:	mov	w9, #0x256                 	// #598
   47394:	csel	w0, w9, w8, eq  // eq = none
   47398:	ret
   4739c:	tbnz	w0, #21, 47d64 <aarch64_opcode_lookup@@Base+0x1ef4>
   473a0:	tst	w0, #0x800000
   473a4:	tbnz	w0, #22, 484a8 <aarch64_opcode_lookup@@Base+0x2638>
   473a8:	mov	w8, #0x82c                 	// #2092
   473ac:	mov	w9, #0x829                 	// #2089
   473b0:	csel	w0, w9, w8, eq  // eq = none
   473b4:	ret
   473b8:	tbnz	w0, #13, 47d74 <aarch64_opcode_lookup@@Base+0x1f04>
   473bc:	tbnz	w0, #14, 484b8 <aarch64_opcode_lookup@@Base+0x2648>
   473c0:	tbnz	w0, #11, 493a0 <aarch64_opcode_lookup@@Base+0x3530>
   473c4:	tst	w0, #0x1000
   473c8:	mov	w8, #0x921                 	// #2337
   473cc:	mov	w9, #0x172                 	// #370
   473d0:	csel	w0, w9, w8, eq  // eq = none
   473d4:	ret
   473d8:	tbnz	w0, #30, 47d8c <aarch64_opcode_lookup@@Base+0x1f1c>
   473dc:	tbnz	w0, #31, 48aa8 <aarch64_opcode_lookup@@Base+0x2c38>
   473e0:	tst	w0, #0x10
   473e4:	mov	w8, #0x538                 	// #1336
   473e8:	mov	w9, #0x536                 	// #1334
   473ec:	csel	w0, w9, w8, eq  // eq = none
   473f0:	ret
   473f4:	mov	w0, #0x28a                 	// #650
   473f8:	ret
   473fc:	tbnz	w0, #12, 47d9c <aarch64_opcode_lookup@@Base+0x1f2c>
   47400:	tbnz	w0, #13, 484c0 <aarch64_opcode_lookup@@Base+0x2650>
   47404:	tbnz	w0, #14, 493a8 <aarch64_opcode_lookup@@Base+0x3538>
   47408:	tbnz	w0, #29, 4a260 <aarch64_opcode_lookup@@Base+0x43f0>
   4740c:	cmp	w0, #0x0
   47410:	mov	w8, #0x92a                 	// #2346
   47414:	mov	w9, #0x11c                 	// #284
   47418:	csel	w0, w9, w8, ge  // ge = tcont
   4741c:	ret
   47420:	tbnz	w0, #21, 47db8 <aarch64_opcode_lookup@@Base+0x1f48>
   47424:	tbnz	w0, #31, 48ac0 <aarch64_opcode_lookup@@Base+0x2c50>
   47428:	tst	w0, #0x10
   4742c:	mov	w8, #0x576                 	// #1398
   47430:	mov	w9, #0x56e                 	// #1390
   47434:	csel	w0, w9, w8, eq  // eq = none
   47438:	ret
   4743c:	tbnz	w0, #13, 47dc4 <aarch64_opcode_lookup@@Base+0x1f54>
   47440:	tst	w0, #0x40000000
   47444:	tbnz	w0, #29, 484d8 <aarch64_opcode_lookup@@Base+0x2668>
   47448:	mov	w8, #0x182                 	// #386
   4744c:	cinc	w0, w8, ne  // ne = any
   47450:	ret
   47454:	tbnz	w0, #21, 47dd8 <aarch64_opcode_lookup@@Base+0x1f68>
   47458:	tst	w0, #0x800000
   4745c:	tbnz	w0, #22, 484e4 <aarch64_opcode_lookup@@Base+0x2674>
   47460:	mov	w8, #0x6f7                 	// #1783
   47464:	mov	w9, #0x6e9                 	// #1769
   47468:	csel	w0, w9, w8, eq  // eq = none
   4746c:	ret
   47470:	tst	w0, #0x800000
   47474:	mov	w8, #0x245                 	// #581
   47478:	mov	w9, #0x23f                 	// #575
   4747c:	csel	w0, w9, w8, eq  // eq = none
   47480:	ret
   47484:	tbnz	w0, #21, 47df8 <aarch64_opcode_lookup@@Base+0x1f88>
   47488:	tbnz	w0, #31, 48ad8 <aarch64_opcode_lookup@@Base+0x2c68>
   4748c:	tst	w0, #0x1000
   47490:	tbnz	w0, #10, 49050 <aarch64_opcode_lookup@@Base+0x31e0>
   47494:	tbnz	w0, #11, 49d30 <aarch64_opcode_lookup@@Base+0x3ec0>
   47498:	mov	w8, #0x8b1                 	// #2225
   4749c:	mov	w9, #0x8b8                 	// #2232
   474a0:	csel	w0, w9, w8, eq  // eq = none
   474a4:	ret
   474a8:	tbnz	w0, #13, 47e24 <aarch64_opcode_lookup@@Base+0x1fb4>
   474ac:	tst	w0, #0x4000
   474b0:	mov	w8, #0x2de                 	// #734
   474b4:	mov	w9, #0x2bc                 	// #700
   474b8:	csel	w0, w9, w8, eq  // eq = none
   474bc:	ret
   474c0:	mov	w8, #0x261                 	// #609
   474c4:	mov	w9, #0x25d                 	// #605
   474c8:	csel	w0, w9, w8, eq  // eq = none
   474cc:	ret
   474d0:	tbnz	w0, #15, 47e2c <aarch64_opcode_lookup@@Base+0x1fbc>
   474d4:	tbnz	w0, #22, 484f4 <aarch64_opcode_lookup@@Base+0x2684>
   474d8:	tbnz	w0, #23, 493b8 <aarch64_opcode_lookup@@Base+0x3548>
   474dc:	mov	w0, #0x775                 	// #1909
   474e0:	ret
   474e4:	tbnz	w0, #12, 47e48 <aarch64_opcode_lookup@@Base+0x1fd8>
   474e8:	tbnz	w0, #13, 48508 <aarch64_opcode_lookup@@Base+0x2698>
   474ec:	tbnz	w0, #14, 493d0 <aarch64_opcode_lookup@@Base+0x3560>
   474f0:	tst	w0, #0x8000
   474f4:	mov	w8, #0x24b                 	// #587
   474f8:	mov	w9, #0x237                 	// #567
   474fc:	csel	w0, w9, w8, eq  // eq = none
   47500:	ret
   47504:	tbnz	w0, #14, 47e5c <aarch64_opcode_lookup@@Base+0x1fec>
   47508:	tbnz	w0, #31, 48af0 <aarch64_opcode_lookup@@Base+0x2c80>
   4750c:	mov	w0, #0x5a6                 	// #1446
   47510:	ret
   47514:	tbnz	w0, #12, 47e68 <aarch64_opcode_lookup@@Base+0x1ff8>
   47518:	mov	w0, #0x263                 	// #611
   4751c:	ret
   47520:	tbnz	w0, #0, 47fdc <aarch64_opcode_lookup@@Base+0x216c>
   47524:	tbnz	w0, #1, 48b08 <aarch64_opcode_lookup@@Base+0x2c98>
   47528:	tbnz	w0, #21, 4987c <aarch64_opcode_lookup@@Base+0x3a0c>
   4752c:	mov	w0, #0x2f1                 	// #753
   47530:	ret
   47534:	mov	w0, #0x92c                 	// #2348
   47538:	ret
   4753c:	tbnz	w0, #14, 47ff4 <aarch64_opcode_lookup@@Base+0x2184>
   47540:	tst	w0, #0x800000
   47544:	mov	w8, #0x95f                 	// #2399
   47548:	cinc	w0, w8, ne  // ne = any
   4754c:	ret
   47550:	tbnz	w0, #14, 48010 <aarch64_opcode_lookup@@Base+0x21a0>
   47554:	tbnz	w0, #15, 48b1c <aarch64_opcode_lookup@@Base+0x2cac>
   47558:	tst	w0, #0x800000
   4755c:	mov	w8, #0x963                 	// #2403
   47560:	cinc	w0, w8, ne  // ne = any
   47564:	ret
   47568:	tbnz	w0, #15, 4802c <aarch64_opcode_lookup@@Base+0x21bc>
   4756c:	tbnz	w0, #23, 48b38 <aarch64_opcode_lookup@@Base+0x2cc8>
   47570:	tst	w0, #0x200000
   47574:	mov	w8, #0x634                 	// #1588
   47578:	cinc	w0, w8, ne  // ne = any
   4757c:	ret
   47580:	tbnz	w0, #22, 48048 <aarch64_opcode_lookup@@Base+0x21d8>
   47584:	tbnz	w0, #21, 48b4c <aarch64_opcode_lookup@@Base+0x2cdc>
   47588:	tst	w0, #0x800000
   4758c:	mov	w8, #0x82d                 	// #2093
   47590:	cinc	w0, w8, ne  // ne = any
   47594:	ret
   47598:	tbnz	w0, #13, 48058 <aarch64_opcode_lookup@@Base+0x21e8>
   4759c:	tbnz	w0, #22, 48b64 <aarch64_opcode_lookup@@Base+0x2cf4>
   475a0:	mov	w0, #0x747                 	// #1863
   475a4:	ret
   475a8:	mov	w0, #0x380                 	// #896
   475ac:	ret
   475b0:	mov	w0, #0x381                 	// #897
   475b4:	ret
   475b8:	tbnz	w0, #15, 48074 <aarch64_opcode_lookup@@Base+0x2204>
   475bc:	mov	w0, #0x92d                 	// #2349
   475c0:	ret
   475c4:	tbnz	w0, #15, 48090 <aarch64_opcode_lookup@@Base+0x2220>
   475c8:	tbnz	w0, #23, 48b78 <aarch64_opcode_lookup@@Base+0x2d08>
   475cc:	tst	w0, #0x200000
   475d0:	mov	w8, #0x698                 	// #1688
   475d4:	cinc	w0, w8, ne  // ne = any
   475d8:	ret
   475dc:	tbnz	w0, #12, 481e0 <aarch64_opcode_lookup@@Base+0x2370>
   475e0:	tst	w0, #0x4000
   475e4:	mov	w8, #0x10a                 	// #266
   475e8:	mov	w9, #0x107                 	// #263
   475ec:	csel	w0, w9, w8, eq  // eq = none
   475f0:	ret
   475f4:	mov	w8, #0x558                 	// #1368
   475f8:	mov	w9, #0x55a                 	// #1370
   475fc:	csel	w0, w9, w8, eq  // eq = none
   47600:	ret
   47604:	tbnz	w0, #11, 481f8 <aarch64_opcode_lookup@@Base+0x2388>
   47608:	tst	w0, #0x4000
   4760c:	tbnz	w0, #12, 49064 <aarch64_opcode_lookup@@Base+0x31f4>
   47610:	tbnz	w0, #13, 49d40 <aarch64_opcode_lookup@@Base+0x3ed0>
   47614:	mov	w8, #0x113                 	// #275
   47618:	mov	w9, #0x10c                 	// #268
   4761c:	csel	w0, w9, w8, eq  // eq = none
   47620:	ret
   47624:	tbnz	w0, #15, 48214 <aarch64_opcode_lookup@@Base+0x23a4>
   47628:	tbnz	w0, #10, 49078 <aarch64_opcode_lookup@@Base+0x3208>
   4762c:	tbnz	w0, #11, 49d50 <aarch64_opcode_lookup@@Base+0x3ee0>
   47630:	tst	w0, #0x1000
   47634:	mov	w8, #0x7a1                 	// #1953
   47638:	mov	w9, #0x556                 	// #1366
   4763c:	csel	w0, w9, w8, eq  // eq = none
   47640:	ret
   47644:	tbnz	w0, #10, 48230 <aarch64_opcode_lookup@@Base+0x23c0>
   47648:	tbnz	w0, #12, 49080 <aarch64_opcode_lookup@@Base+0x3210>
   4764c:	tbnz	w0, #30, 49d5c <aarch64_opcode_lookup@@Base+0x3eec>
   47650:	mov	w0, #0x508                 	// #1288
   47654:	ret
   47658:	tbnz	w0, #12, 4824c <aarch64_opcode_lookup@@Base+0x23dc>
   4765c:	tbnz	w0, #13, 4908c <aarch64_opcode_lookup@@Base+0x321c>
   47660:	tbnz	w0, #22, 49d6c <aarch64_opcode_lookup@@Base+0x3efc>
   47664:	mov	w0, #0x96                  	// #150
   47668:	ret
   4766c:	mov	w0, #0x71c                 	// #1820
   47670:	ret
   47674:	tbnz	w0, #31, 48b80 <aarch64_opcode_lookup@@Base+0x2d10>
   47678:	tbnz	w0, #12, 490a0 <aarch64_opcode_lookup@@Base+0x3230>
   4767c:	tst	w0, #0x800
   47680:	tbnz	w0, #10, 49d80 <aarch64_opcode_lookup@@Base+0x3f10>
   47684:	mov	w8, #0x877                 	// #2167
   47688:	mov	w9, #0x719                 	// #1817
   4768c:	csel	w0, w9, w8, eq  // eq = none
   47690:	ret
   47694:	tbnz	w0, #29, 48514 <aarch64_opcode_lookup@@Base+0x26a4>
   47698:	tst	w0, #0x40000000
   4769c:	mov	w8, #0x943                 	// #2371
   476a0:	mov	w9, #0x93f                 	// #2367
   476a4:	csel	w0, w9, w8, eq  // eq = none
   476a8:	ret
   476ac:	tbnz	w0, #31, 48b94 <aarch64_opcode_lookup@@Base+0x2d24>
   476b0:	tst	w0, #0x10
   476b4:	mov	w8, #0x52b                 	// #1323
   476b8:	mov	w9, #0x528                 	// #1320
   476bc:	csel	w0, w9, w8, eq  // eq = none
   476c0:	ret
   476c4:	tbnz	w0, #31, 48bac <aarch64_opcode_lookup@@Base+0x2d3c>
   476c8:	tst	w0, #0x1000
   476cc:	tbnz	w0, #4, 490a8 <aarch64_opcode_lookup@@Base+0x3238>
   476d0:	tbnz	w0, #10, 49d90 <aarch64_opcode_lookup@@Base+0x3f20>
   476d4:	tbnz	w0, #11, 4a834 <aarch64_opcode_lookup@@Base+0x49c4>
   476d8:	mov	w8, #0x90a                 	// #2314
   476dc:	cinc	w0, w8, ne  // ne = any
   476e0:	ret
   476e4:	mov	w0, #0x370                 	// #880
   476e8:	ret
   476ec:	tbnz	w0, #29, 4851c <aarch64_opcode_lookup@@Base+0x26ac>
   476f0:	mov	w0, #0x6f                  	// #111
   476f4:	ret
   476f8:	tbnz	w0, #31, 48bbc <aarch64_opcode_lookup@@Base+0x2d4c>
   476fc:	tst	w0, #0x1000
   47700:	mov	w8, #0x88f                 	// #2191
   47704:	mov	w9, #0x80b                 	// #2059
   47708:	csel	w0, w9, w8, eq  // eq = none
   4770c:	ret
   47710:	tbnz	w0, #31, 48bd0 <aarch64_opcode_lookup@@Base+0x2d60>
   47714:	tst	w0, #0x1000
   47718:	tbnz	w0, #10, 490bc <aarch64_opcode_lookup@@Base+0x324c>
   4771c:	tbnz	w0, #11, 49da0 <aarch64_opcode_lookup@@Base+0x3f30>
   47720:	mov	w8, #0x856                 	// #2134
   47724:	mov	w9, #0x8a8                 	// #2216
   47728:	csel	w0, w9, w8, eq  // eq = none
   4772c:	ret
   47730:	tst	w0, #0x40000000
   47734:	mov	w8, #0x29a                 	// #666
   47738:	mov	w9, #0x296                 	// #662
   4773c:	csel	w0, w9, w8, eq  // eq = none
   47740:	ret
   47744:	cmp	w0, #0x0
   47748:	tbnz	w0, #30, 48530 <aarch64_opcode_lookup@@Base+0x26c0>
   4774c:	mov	w8, #0x3a3                 	// #931
   47750:	mov	w9, #0x39b                 	// #923
   47754:	csel	w0, w9, w8, ge  // ge = tcont
   47758:	ret
   4775c:	tst	w0, #0x10
   47760:	tbnz	w0, #3, 48540 <aarch64_opcode_lookup@@Base+0x26d0>
   47764:	mov	w8, #0x324                 	// #804
   47768:	mov	w9, #0x322                 	// #802
   4776c:	csel	w0, w9, w8, eq  // eq = none
   47770:	ret
   47774:	tst	w0, #0x800000
   47778:	tbnz	w0, #20, 48550 <aarch64_opcode_lookup@@Base+0x26e0>
   4777c:	tbnz	w0, #22, 493d8 <aarch64_opcode_lookup@@Base+0x3568>
   47780:	mov	w8, #0x61d                 	// #1565
   47784:	mov	w9, #0x62a                 	// #1578
   47788:	csel	w0, w9, w8, eq  // eq = none
   4778c:	ret
   47790:	tst	w0, #0x400000
   47794:	mov	w8, #0x3c1                 	// #961
   47798:	cinc	w0, w8, eq  // eq = none
   4779c:	ret
   477a0:	tbnz	w0, #31, 48bd8 <aarch64_opcode_lookup@@Base+0x2d68>
   477a4:	tst	w0, #0x1000
   477a8:	tbnz	w0, #10, 490d0 <aarch64_opcode_lookup@@Base+0x3260>
   477ac:	tbnz	w0, #11, 49db0 <aarch64_opcode_lookup@@Base+0x3f40>
   477b0:	mov	w8, #0x865                 	// #2149
   477b4:	mov	w9, #0x85f                 	// #2143
   477b8:	csel	w0, w9, w8, eq  // eq = none
   477bc:	ret
   477c0:	tbnz	w0, #31, 48bec <aarch64_opcode_lookup@@Base+0x2d7c>
   477c4:	tst	w0, #0x10
   477c8:	mov	w8, #0x52f                 	// #1327
   477cc:	mov	w9, #0x532                 	// #1330
   477d0:	csel	w0, w9, w8, eq  // eq = none
   477d4:	ret
   477d8:	mov	w0, #0x28b                 	// #651
   477dc:	ret
   477e0:	tbnz	w0, #13, 48564 <aarch64_opcode_lookup@@Base+0x26f4>
   477e4:	tst	w0, #0x40000000
   477e8:	tbnz	w0, #14, 493e8 <aarch64_opcode_lookup@@Base+0x3578>
   477ec:	mov	w8, #0x3e                  	// #62
   477f0:	cinc	w0, w8, ne  // ne = any
   477f4:	ret
   477f8:	tbnz	w0, #23, 48574 <aarch64_opcode_lookup@@Base+0x2704>
   477fc:	tbnz	w0, #31, 49890 <aarch64_opcode_lookup@@Base+0x3a20>
   47800:	tbnz	w0, #4, 49dc0 <aarch64_opcode_lookup@@Base+0x3f50>
   47804:	tbnz	w0, #9, 4a840 <aarch64_opcode_lookup@@Base+0x49d0>
   47808:	tbnz	w0, #20, 4b1c0 <aarch64_opcode_lookup@@Base+0x5350>
   4780c:	mov	w0, #0x506                 	// #1286
   47810:	ret
   47814:	mov	w0, #0x371                 	// #881
   47818:	ret
   4781c:	mov	w8, #0x90                  	// #144
   47820:	mov	w9, #0x88                  	// #136
   47824:	csel	w0, w9, w8, eq  // eq = none
   47828:	ret
   4782c:	tbnz	w0, #31, 48c04 <aarch64_opcode_lookup@@Base+0x2d94>
   47830:	tbnz	w0, #10, 490e4 <aarch64_opcode_lookup@@Base+0x3274>
   47834:	tst	w0, #0x1000
   47838:	tbnz	w0, #11, 49dc8 <aarch64_opcode_lookup@@Base+0x3f58>
   4783c:	mov	w8, #0x893                 	// #2195
   47840:	mov	w9, #0x876                 	// #2166
   47844:	csel	w0, w9, w8, eq  // eq = none
   47848:	ret
   4784c:	tst	w0, #0x800000
   47850:	mov	w8, #0x243                 	// #579
   47854:	mov	w9, #0x23d                 	// #573
   47858:	csel	w0, w9, w8, eq  // eq = none
   4785c:	ret
   47860:	tbnz	w0, #31, 48c18 <aarch64_opcode_lookup@@Base+0x2da8>
   47864:	tst	w0, #0x1000
   47868:	tbnz	w0, #10, 490fc <aarch64_opcode_lookup@@Base+0x328c>
   4786c:	tbnz	w0, #11, 49dd8 <aarch64_opcode_lookup@@Base+0x3f68>
   47870:	mov	w8, #0x8f5                 	// #2293
   47874:	mov	w9, #0x8a6                 	// #2214
   47878:	csel	w0, w9, w8, eq  // eq = none
   4787c:	ret
   47880:	tst	w0, #0x40000000
   47884:	mov	w8, #0x29d                 	// #669
   47888:	mov	w9, #0x297                 	// #663
   4788c:	csel	w0, w9, w8, eq  // eq = none
   47890:	ret
   47894:	tbnz	w0, #31, 48c20 <aarch64_opcode_lookup@@Base+0x2db0>
   47898:	tst	w0, #0x40000000
   4789c:	mov	w8, #0x36b                 	// #875
   478a0:	mov	w9, #0x366                 	// #870
   478a4:	csel	w0, w9, w8, eq  // eq = none
   478a8:	ret
   478ac:	tbnz	w0, #12, 48594 <aarch64_opcode_lookup@@Base+0x2724>
   478b0:	tbnz	w0, #13, 493f4 <aarch64_opcode_lookup@@Base+0x3584>
   478b4:	tst	w0, #0x4000
   478b8:	mov	w8, #0x233                 	// #563
   478bc:	mov	w9, #0x235                 	// #565
   478c0:	csel	w0, w9, w8, eq  // eq = none
   478c4:	ret
   478c8:	tst	w0, #0x800000
   478cc:	tbnz	w0, #22, 485a0 <aarch64_opcode_lookup@@Base+0x2730>
   478d0:	mov	w8, #0x6ad                 	// #1709
   478d4:	mov	w9, #0x6b0                 	// #1712
   478d8:	csel	w0, w9, w8, eq  // eq = none
   478dc:	ret
   478e0:	mov	w0, #0x1b6                 	// #438
   478e4:	ret
   478e8:	tst	w0, #0x40000000
   478ec:	tbnz	w0, #14, 485b0 <aarch64_opcode_lookup@@Base+0x2740>
   478f0:	mov	w8, #0x64                  	// #100
   478f4:	cinc	w0, w8, ne  // ne = any
   478f8:	ret
   478fc:	mov	w0, #0x280                 	// #640
   47900:	ret
   47904:	tbnz	w0, #12, 485bc <aarch64_opcode_lookup@@Base+0x274c>
   47908:	tbnz	w0, #13, 493fc <aarch64_opcode_lookup@@Base+0x358c>
   4790c:	tbnz	w0, #14, 4a268 <aarch64_opcode_lookup@@Base+0x43f8>
   47910:	mov	w0, #0xd5                  	// #213
   47914:	ret
   47918:	tbnz	w0, #31, 48c28 <aarch64_opcode_lookup@@Base+0x2db8>
   4791c:	tbnz	w0, #16, 49110 <aarch64_opcode_lookup@@Base+0x32a0>
   47920:	tbnz	w0, #17, 49de8 <aarch64_opcode_lookup@@Base+0x3f78>
   47924:	tbnz	w0, #18, 4a848 <aarch64_opcode_lookup@@Base+0x49d8>
   47928:	tbnz	w0, #19, 4b1d4 <aarch64_opcode_lookup@@Base+0x5364>
   4792c:	tbnz	w0, #20, 4b864 <aarch64_opcode_lookup@@Base+0x59f4>
   47930:	mov	w0, #0x568                 	// #1384
   47934:	ret
   47938:	tst	w0, #0x20000000
   4793c:	mov	w8, #0x81                  	// #129
   47940:	mov	w9, #0x70                  	// #112
   47944:	csel	w0, w9, w8, eq  // eq = none
   47948:	ret
   4794c:	tbnz	w0, #13, 485d4 <aarch64_opcode_lookup@@Base+0x2764>
   47950:	tst	w0, #0x4000
   47954:	mov	w8, #0x2ab                 	// #683
   47958:	mov	w9, #0x2a7                 	// #679
   4795c:	csel	w0, w9, w8, eq  // eq = none
   47960:	ret
   47964:	tbnz	w0, #23, 485dc <aarch64_opcode_lookup@@Base+0x276c>
   47968:	tbnz	w0, #31, 498a4 <aarch64_opcode_lookup@@Base+0x3a34>
   4796c:	tbnz	w0, #10, 49df4 <aarch64_opcode_lookup@@Base+0x3f84>
   47970:	tbnz	w0, #11, 4a850 <aarch64_opcode_lookup@@Base+0x49e0>
   47974:	tst	w0, #0x1000
   47978:	mov	w8, #0x8ae                 	// #2222
   4797c:	mov	w9, #0x8ac                 	// #2220
   47980:	csel	w0, w9, w8, eq  // eq = none
   47984:	ret
   47988:	tbnz	w0, #30, 485e4 <aarch64_opcode_lookup@@Base+0x2774>
   4798c:	cmp	w0, #0x0
   47990:	mov	w8, #0x398                 	// #920
   47994:	mov	w9, #0x392                 	// #914
   47998:	csel	w0, w9, w8, ge  // ge = tcont
   4799c:	ret
   479a0:	tst	w0, #0x4000
   479a4:	mov	w8, #0x1a9                 	// #425
   479a8:	cinc	w0, w8, ne  // ne = any
   479ac:	ret
   479b0:	tbnz	w0, #22, 485ec <aarch64_opcode_lookup@@Base+0x277c>
   479b4:	tbnz	w0, #23, 4940c <aarch64_opcode_lookup@@Base+0x359c>
   479b8:	mov	w0, #0x74a                 	// #1866
   479bc:	ret
   479c0:	tbnz	w0, #14, 48604 <aarch64_opcode_lookup@@Base+0x2794>
   479c4:	tbnz	w0, #15, 49424 <aarch64_opcode_lookup@@Base+0x35b4>
   479c8:	tbnz	w0, #29, 4a274 <aarch64_opcode_lookup@@Base+0x4404>
   479cc:	tst	w0, #0x40000000
   479d0:	mov	w8, #0x2a5                 	// #677
   479d4:	mov	w9, #0x34b                 	// #843
   479d8:	csel	w0, w9, w8, eq  // eq = none
   479dc:	ret
   479e0:	tbnz	w0, #13, 4861c <aarch64_opcode_lookup@@Base+0x27ac>
   479e4:	tbnz	w0, #14, 49430 <aarch64_opcode_lookup@@Base+0x35c0>
   479e8:	tst	w0, #0x800000
   479ec:	mov	w8, #0x1b2                 	// #434
   479f0:	cinc	w0, w8, eq  // eq = none
   479f4:	ret
   479f8:	tbnz	w0, #11, 48624 <aarch64_opcode_lookup@@Base+0x27b4>
   479fc:	tst	w0, #0x800000
   47a00:	tbnz	w0, #12, 49438 <aarch64_opcode_lookup@@Base+0x35c8>
   47a04:	tbnz	w0, #13, 4a27c <aarch64_opcode_lookup@@Base+0x440c>
   47a08:	mov	w8, #0x167                 	// #359
   47a0c:	mov	w9, #0x157                 	// #343
   47a10:	csel	w0, w9, w8, eq  // eq = none
   47a14:	ret
   47a18:	tbnz	w0, #22, 4863c <aarch64_opcode_lookup@@Base+0x27cc>
   47a1c:	tbnz	w0, #23, 4944c <aarch64_opcode_lookup@@Base+0x35dc>
   47a20:	cmp	w0, #0x0
   47a24:	mov	w8, #0x749                 	// #1865
   47a28:	mov	w9, #0x818                 	// #2072
   47a2c:	csel	w0, w9, w8, ge  // ge = tcont
   47a30:	ret
   47a34:	mov	w0, #0x28c                 	// #652
   47a38:	ret
   47a3c:	tbnz	w0, #13, 48648 <aarch64_opcode_lookup@@Base+0x27d8>
   47a40:	tbnz	w0, #14, 49468 <aarch64_opcode_lookup@@Base+0x35f8>
   47a44:	tst	w0, #0x20000000
   47a48:	mov	w8, #0x151                 	// #337
   47a4c:	mov	w9, #0x11d                 	// #285
   47a50:	csel	w0, w9, w8, eq  // eq = none
   47a54:	ret
   47a58:	mov	w8, #0x196                 	// #406
   47a5c:	cinc	w0, w8, ne  // ne = any
   47a60:	ret
   47a64:	tbnz	w0, #31, 48c40 <aarch64_opcode_lookup@@Base+0x2dd0>
   47a68:	tst	w0, #0x1000
   47a6c:	tbnz	w0, #10, 49128 <aarch64_opcode_lookup@@Base+0x32b8>
   47a70:	tbnz	w0, #11, 49e0c <aarch64_opcode_lookup@@Base+0x3f9c>
   47a74:	mov	w8, #0x8c6                 	// #2246
   47a78:	mov	w9, #0x800                 	// #2048
   47a7c:	csel	w0, w9, w8, eq  // eq = none
   47a80:	ret
   47a84:	tst	w0, #0x40000000
   47a88:	mov	w8, #0x2c0                 	// #704
   47a8c:	mov	w9, #0x2cf                 	// #719
   47a90:	csel	w0, w9, w8, eq  // eq = none
   47a94:	ret
   47a98:	tbnz	w0, #22, 48660 <aarch64_opcode_lookup@@Base+0x27f0>
   47a9c:	tbnz	w0, #31, 498ac <aarch64_opcode_lookup@@Base+0x3a3c>
   47aa0:	tst	w0, #0x400
   47aa4:	mov	w8, #0x825                 	// #2085
   47aa8:	mov	w9, #0x823                 	// #2083
   47aac:	csel	w0, w9, w8, eq  // eq = none
   47ab0:	ret
   47ab4:	tbnz	w0, #12, 48674 <aarch64_opcode_lookup@@Base+0x2804>
   47ab8:	tbnz	w0, #13, 49480 <aarch64_opcode_lookup@@Base+0x3610>
   47abc:	tbnz	w0, #14, 4a28c <aarch64_opcode_lookup@@Base+0x441c>
   47ac0:	tst	w0, #0x8000
   47ac4:	mov	w8, #0x236                 	// #566
   47ac8:	mov	w9, #0x224                 	// #548
   47acc:	csel	w0, w9, w8, eq  // eq = none
   47ad0:	ret
   47ad4:	mov	w0, #0x264                 	// #612
   47ad8:	ret
   47adc:	tbnz	w0, #23, 4868c <aarch64_opcode_lookup@@Base+0x281c>
   47ae0:	tbnz	w0, #31, 498b4 <aarch64_opcode_lookup@@Base+0x3a44>
   47ae4:	tst	w0, #0x800
   47ae8:	tbnz	w0, #10, 49e1c <aarch64_opcode_lookup@@Base+0x3fac>
   47aec:	mov	w8, #0x833                 	// #2099
   47af0:	mov	w9, #0x890                 	// #2192
   47af4:	csel	w0, w9, w8, eq  // eq = none
   47af8:	ret
   47afc:	tbnz	w0, #29, 486ac <aarch64_opcode_lookup@@Base+0x283c>
   47b00:	mov	w8, #0x66                  	// #102
   47b04:	cinc	w0, w8, ne  // ne = any
   47b08:	ret
   47b0c:	tbnz	w0, #31, 48c54 <aarch64_opcode_lookup@@Base+0x2de4>
   47b10:	tst	w0, #0x10
   47b14:	mov	w8, #0x534                 	// #1332
   47b18:	mov	w9, #0x53a                 	// #1338
   47b1c:	csel	w0, w9, w8, eq  // eq = none
   47b20:	ret
   47b24:	tst	w0, #0x20000000
   47b28:	mov	w8, #0x923                 	// #2339
   47b2c:	cinc	w0, w8, eq  // eq = none
   47b30:	ret
   47b34:	tbnz	w0, #23, 486b8 <aarch64_opcode_lookup@@Base+0x2848>
   47b38:	mov	w0, #0x6f3                 	// #1779
   47b3c:	ret
   47b40:	tbnz	w0, #31, 48c6c <aarch64_opcode_lookup@@Base+0x2dfc>
   47b44:	tst	w0, #0x10
   47b48:	mov	w8, #0x83e                 	// #2110
   47b4c:	mov	w9, #0x832                 	// #2098
   47b50:	csel	w0, w9, w8, eq  // eq = none
   47b54:	ret
   47b58:	tbnz	w0, #12, 486d4 <aarch64_opcode_lookup@@Base+0x2864>
   47b5c:	tbnz	w0, #13, 49488 <aarch64_opcode_lookup@@Base+0x3618>
   47b60:	tbnz	w0, #14, 4a294 <aarch64_opcode_lookup@@Base+0x4424>
   47b64:	tbnz	w0, #29, 4ad48 <aarch64_opcode_lookup@@Base+0x4ed8>
   47b68:	tbnz	w0, #30, 4b590 <aarch64_opcode_lookup@@Base+0x5720>
   47b6c:	mov	w0, #0x2d1                 	// #721
   47b70:	ret
   47b74:	tbnz	w0, #13, 486e8 <aarch64_opcode_lookup@@Base+0x2878>
   47b78:	tbnz	w0, #14, 4949c <aarch64_opcode_lookup@@Base+0x362c>
   47b7c:	tbnz	w0, #22, 4a2a8 <aarch64_opcode_lookup@@Base+0x4438>
   47b80:	tbnz	w0, #23, 4ad50 <aarch64_opcode_lookup@@Base+0x4ee0>
   47b84:	tbnz	w0, #31, 4b79c <aarch64_opcode_lookup@@Base+0x592c>
   47b88:	tst	w0, #0x40000000
   47b8c:	mov	w8, #0x419                 	// #1049
   47b90:	cinc	w0, w8, ne  // ne = any
   47b94:	ret
   47b98:	tbnz	w0, #13, 48708 <aarch64_opcode_lookup@@Base+0x2898>
   47b9c:	tst	w0, #0x4000
   47ba0:	mov	w8, #0x1a8                 	// #424
   47ba4:	mov	w9, #0x1a6                 	// #422
   47ba8:	csel	w0, w9, w8, eq  // eq = none
   47bac:	ret
   47bb0:	tbnz	w0, #23, 48710 <aarch64_opcode_lookup@@Base+0x28a0>
   47bb4:	mov	w0, #0x6fa                 	// #1786
   47bb8:	ret
   47bbc:	tbnz	w0, #13, 48724 <aarch64_opcode_lookup@@Base+0x28b4>
   47bc0:	tbnz	w0, #14, 494b8 <aarch64_opcode_lookup@@Base+0x3648>
   47bc4:	tbnz	w0, #16, 4a2c4 <aarch64_opcode_lookup@@Base+0x4454>
   47bc8:	tst	w0, #0x20000000
   47bcc:	mov	w8, #0xdc                  	// #220
   47bd0:	mov	w9, #0xab                  	// #171
   47bd4:	csel	w0, w9, w8, eq  // eq = none
   47bd8:	ret
   47bdc:	tbnz	w0, #22, 48740 <aarch64_opcode_lookup@@Base+0x28d0>
   47be0:	mov	w8, #0x67d                 	// #1661
   47be4:	mov	w9, #0x689                 	// #1673
   47be8:	csel	w0, w9, w8, eq  // eq = none
   47bec:	ret
   47bf0:	tst	w0, #0x20000000
   47bf4:	tbnz	w0, #12, 48750 <aarch64_opcode_lookup@@Base+0x28e0>
   47bf8:	mov	w8, #0x92                  	// #146
   47bfc:	mov	w9, #0x8a                  	// #138
   47c00:	csel	w0, w9, w8, eq  // eq = none
   47c04:	ret
   47c08:	tbnz	w0, #23, 48760 <aarch64_opcode_lookup@@Base+0x28f0>
   47c0c:	mov	w0, #0x6ec                 	// #1772
   47c10:	ret
   47c14:	tbnz	w0, #22, 48778 <aarch64_opcode_lookup@@Base+0x2908>
   47c18:	cmp	w0, #0x0
   47c1c:	mov	w8, #0x697                 	// #1687
   47c20:	mov	w9, #0x827                 	// #2087
   47c24:	csel	w0, w9, w8, ge  // ge = tcont
   47c28:	ret
   47c2c:	tbnz	w0, #13, 48780 <aarch64_opcode_lookup@@Base+0x2910>
   47c30:	tbnz	w0, #14, 494d4 <aarch64_opcode_lookup@@Base+0x3664>
   47c34:	tbnz	w0, #30, 4a2e0 <aarch64_opcode_lookup@@Base+0x4470>
   47c38:	mov	w0, #0x2d5                 	// #725
   47c3c:	ret
   47c40:	mov	w0, #0x36c                 	// #876
   47c44:	ret
   47c48:	tst	w0, #0x8000
   47c4c:	tbnz	w0, #13, 48788 <aarch64_opcode_lookup@@Base+0x2918>
   47c50:	mov	w8, #0x240                 	// #576
   47c54:	mov	w9, #0x249                 	// #585
   47c58:	csel	w0, w9, w8, eq  // eq = none
   47c5c:	ret
   47c60:	tbnz	w0, #12, 48798 <aarch64_opcode_lookup@@Base+0x2928>
   47c64:	tst	w0, #0x4000
   47c68:	tbnz	w0, #13, 494dc <aarch64_opcode_lookup@@Base+0x366c>
   47c6c:	mov	w8, #0x148                 	// #328
   47c70:	mov	w9, #0x141                 	// #321
   47c74:	csel	w0, w9, w8, eq  // eq = none
   47c78:	ret
   47c7c:	mov	w0, #0x5a2                 	// #1442
   47c80:	ret
   47c84:	tbnz	w0, #29, 487b8 <aarch64_opcode_lookup@@Base+0x2948>
   47c88:	tbnz	w0, #22, 494ec <aarch64_opcode_lookup@@Base+0x367c>
   47c8c:	tst	w0, #0x800000
   47c90:	mov	w8, #0x971                 	// #2417
   47c94:	cinc	w0, w8, eq  // eq = none
   47c98:	ret
   47c9c:	tbnz	w0, #22, 487c0 <aarch64_opcode_lookup@@Base+0x2950>
   47ca0:	tbnz	w0, #23, 494f8 <aarch64_opcode_lookup@@Base+0x3688>
   47ca4:	mov	w0, #0x684                 	// #1668
   47ca8:	ret
   47cac:	tbnz	w0, #13, 487cc <aarch64_opcode_lookup@@Base+0x295c>
   47cb0:	mov	w0, #0x22a                 	// #554
   47cb4:	ret
   47cb8:	tbnz	w0, #23, 487e0 <aarch64_opcode_lookup@@Base+0x2970>
   47cbc:	tst	w0, #0x400000
   47cc0:	mov	w8, #0x63b                 	// #1595
   47cc4:	mov	w9, #0x63f                 	// #1599
   47cc8:	csel	w0, w9, w8, eq  // eq = none
   47ccc:	ret
   47cd0:	tbnz	w0, #12, 487ec <aarch64_opcode_lookup@@Base+0x297c>
   47cd4:	tbnz	w0, #13, 49514 <aarch64_opcode_lookup@@Base+0x36a4>
   47cd8:	tbnz	w0, #14, 4a2f4 <aarch64_opcode_lookup@@Base+0x4484>
   47cdc:	tbnz	w0, #30, 4ad68 <aarch64_opcode_lookup@@Base+0x4ef8>
   47ce0:	mov	w0, #0x2c7                 	// #711
   47ce4:	ret
   47ce8:	cmp	w0, #0x0
   47cec:	tbnz	w0, #30, 48804 <aarch64_opcode_lookup@@Base+0x2994>
   47cf0:	mov	w8, #0x38e                 	// #910
   47cf4:	mov	w9, #0x386                 	// #902
   47cf8:	csel	w0, w9, w8, ge  // ge = tcont
   47cfc:	ret
   47d00:	tst	w0, #0x4000
   47d04:	tbnz	w0, #13, 48814 <aarch64_opcode_lookup@@Base+0x29a4>
   47d08:	mov	w8, #0x252                 	// #594
   47d0c:	mov	w9, #0x24f                 	// #591
   47d10:	csel	w0, w9, w8, eq  // eq = none
   47d14:	ret
   47d18:	tbnz	w0, #23, 48824 <aarch64_opcode_lookup@@Base+0x29b4>
   47d1c:	mov	w0, #0x973                 	// #2419
   47d20:	ret
   47d24:	tbnz	w0, #14, 48838 <aarch64_opcode_lookup@@Base+0x29c8>
   47d28:	tbnz	w0, #15, 49528 <aarch64_opcode_lookup@@Base+0x36b8>
   47d2c:	tbnz	w0, #29, 4a2fc <aarch64_opcode_lookup@@Base+0x448c>
   47d30:	tst	w0, #0x40000000
   47d34:	mov	w8, #0x1e0                 	// #480
   47d38:	mov	w9, #0x34d                 	// #845
   47d3c:	csel	w0, w9, w8, eq  // eq = none
   47d40:	ret
   47d44:	tbnz	w0, #31, 48c80 <aarch64_opcode_lookup@@Base+0x2e10>
   47d48:	mov	w0, #0x563                 	// #1379
   47d4c:	ret
   47d50:	tst	w0, #0x2000
   47d54:	mov	w8, #0x258                 	// #600
   47d58:	mov	w9, #0x255                 	// #597
   47d5c:	csel	w0, w9, w8, eq  // eq = none
   47d60:	ret
   47d64:	tbnz	w0, #22, 48854 <aarch64_opcode_lookup@@Base+0x29e4>
   47d68:	tbnz	w0, #23, 49540 <aarch64_opcode_lookup@@Base+0x36d0>
   47d6c:	mov	w0, #0x5e8                 	// #1512
   47d70:	ret
   47d74:	tbnz	w0, #11, 48860 <aarch64_opcode_lookup@@Base+0x29f0>
   47d78:	tst	w0, #0x4000
   47d7c:	mov	w8, #0x175                 	// #373
   47d80:	mov	w9, #0x96e                 	// #2414
   47d84:	csel	w0, w9, w8, eq  // eq = none
   47d88:	ret
   47d8c:	tbnz	w0, #20, 4886c <aarch64_opcode_lookup@@Base+0x29fc>
   47d90:	tbnz	w0, #22, 4955c <aarch64_opcode_lookup@@Base+0x36ec>
   47d94:	mov	w0, #0x74e                 	// #1870
   47d98:	ret
   47d9c:	tbnz	w0, #13, 48884 <aarch64_opcode_lookup@@Base+0x2a14>
   47da0:	tst	w0, #0x20000000
   47da4:	tbnz	w0, #14, 49570 <aarch64_opcode_lookup@@Base+0x3700>
   47da8:	mov	w8, #0x152                 	// #338
   47dac:	mov	w9, #0x11e                 	// #286
   47db0:	csel	w0, w9, w8, eq  // eq = none
   47db4:	ret
   47db8:	tbnz	w0, #31, 48c8c <aarch64_opcode_lookup@@Base+0x2e1c>
   47dbc:	mov	w0, #0x5b1                 	// #1457
   47dc0:	ret
   47dc4:	tst	w0, #0x20000000
   47dc8:	mov	w8, #0x1a2                 	// #418
   47dcc:	mov	w9, #0x8c                  	// #140
   47dd0:	csel	w0, w9, w8, eq  // eq = none
   47dd4:	ret
   47dd8:	tbnz	w0, #23, 48890 <aarch64_opcode_lookup@@Base+0x2a20>
   47ddc:	tbnz	w0, #31, 498bc <aarch64_opcode_lookup@@Base+0x3a4c>
   47de0:	tbnz	w0, #10, 49e2c <aarch64_opcode_lookup@@Base+0x3fbc>
   47de4:	tst	w0, #0x800
   47de8:	mov	w8, #0x839                 	// #2105
   47dec:	mov	w9, #0x882                 	// #2178
   47df0:	csel	w0, w9, w8, eq  // eq = none
   47df4:	ret
   47df8:	tbnz	w0, #22, 488a8 <aarch64_opcode_lookup@@Base+0x2a38>
   47dfc:	tbnz	w0, #23, 49580 <aarch64_opcode_lookup@@Base+0x3710>
   47e00:	tbnz	w0, #31, 4a64c <aarch64_opcode_lookup@@Base+0x47dc>
   47e04:	tbnz	w0, #10, 4a858 <aarch64_opcode_lookup@@Base+0x49e8>
   47e08:	tbnz	w0, #12, 4b1dc <aarch64_opcode_lookup@@Base+0x536c>
   47e0c:	tbnz	w0, #16, 4b878 <aarch64_opcode_lookup@@Base+0x5a08>
   47e10:	tst	w0, #0x20000
   47e14:	mov	w8, #0x918                 	// #2328
   47e18:	mov	w9, #0x91a                 	// #2330
   47e1c:	csel	w0, w9, w8, eq  // eq = none
   47e20:	ret
   47e24:	mov	w0, #0x2c4                 	// #708
   47e28:	ret
   47e2c:	tbnz	w0, #22, 488bc <aarch64_opcode_lookup@@Base+0x2a4c>
   47e30:	tbnz	w0, #23, 49588 <aarch64_opcode_lookup@@Base+0x3718>
   47e34:	tst	w0, #0x100000
   47e38:	mov	w8, #0x776                 	// #1910
   47e3c:	mov	w9, #0x74f                 	// #1871
   47e40:	csel	w0, w9, w8, eq  // eq = none
   47e44:	ret
   47e48:	tst	w0, #0x2000
   47e4c:	mov	w8, #0x247                 	// #583
   47e50:	mov	w9, #0x23a                 	// #570
   47e54:	csel	w0, w9, w8, eq  // eq = none
   47e58:	ret
   47e5c:	tbnz	w0, #31, 48ca4 <aarch64_opcode_lookup@@Base+0x2e34>
   47e60:	mov	w0, #0x5b2                 	// #1458
   47e64:	ret
   47e68:	tst	w0, #0x2000
   47e6c:	mov	w8, #0x268                 	// #616
   47e70:	mov	w9, #0x265                 	// #613
   47e74:	csel	w0, w9, w8, eq  // eq = none
   47e78:	ret
   47e7c:	mov	w0, #0x3b4                 	// #948
   47e80:	ret
   47e84:	mov	w0, #0x3b8                 	// #952
   47e88:	ret
   47e8c:	mov	w0, #0x3c4                 	// #964
   47e90:	ret
   47e94:	tst	w0, #0x800000
   47e98:	mov	w8, #0x60e                 	// #1550
   47e9c:	mov	w9, #0x611                 	// #1553
   47ea0:	csel	w0, w9, w8, eq  // eq = none
   47ea4:	ret
   47ea8:	mov	w0, #0x3b5                 	// #949
   47eac:	ret
   47eb0:	mov	w0, #0x3b9                 	// #953
   47eb4:	ret
   47eb8:	tbnz	w0, #22, 48cbc <aarch64_opcode_lookup@@Base+0x2e4c>
   47ebc:	tst	w0, #0x800000
   47ec0:	tbnz	w0, #21, 498d0 <aarch64_opcode_lookup@@Base+0x3a60>
   47ec4:	mov	w8, #0x82b                 	// #2091
   47ec8:	mov	w9, #0x828                 	// #2088
   47ecc:	csel	w0, w9, w8, eq  // eq = none
   47ed0:	ret
   47ed4:	mov	w0, #0x3bc                 	// #956
   47ed8:	ret
   47edc:	mov	w0, #0x3bd                 	// #957
   47ee0:	ret
   47ee4:	tbnz	w0, #22, 48cd0 <aarch64_opcode_lookup@@Base+0x2e60>
   47ee8:	tst	w0, #0x800000
   47eec:	mov	w8, #0x754                 	// #1876
   47ef0:	mov	w9, #0x769                 	// #1897
   47ef4:	csel	w0, w9, w8, eq  // eq = none
   47ef8:	ret
   47efc:	tbnz	w0, #22, 48cd8 <aarch64_opcode_lookup@@Base+0x2e68>
   47f00:	tst	w0, #0x800000
   47f04:	tbnz	w0, #21, 498e0 <aarch64_opcode_lookup@@Base+0x3a70>
   47f08:	mov	w8, #0x6f2                 	// #1778
   47f0c:	mov	w9, #0x6e3                 	// #1763
   47f10:	csel	w0, w9, w8, eq  // eq = none
   47f14:	ret
   47f18:	tbnz	w0, #22, 48cec <aarch64_opcode_lookup@@Base+0x2e7c>
   47f1c:	mov	w0, #0x796                 	// #1942
   47f20:	ret
   47f24:	tbnz	w0, #22, 48cf8 <aarch64_opcode_lookup@@Base+0x2e88>
   47f28:	tst	w0, #0x800000
   47f2c:	tbnz	w0, #21, 498f0 <aarch64_opcode_lookup@@Base+0x3a80>
   47f30:	mov	w8, #0x6f5                 	// #1781
   47f34:	mov	w9, #0x6e7                 	// #1767
   47f38:	csel	w0, w9, w8, eq  // eq = none
   47f3c:	ret
   47f40:	tbnz	w0, #22, 48d0c <aarch64_opcode_lookup@@Base+0x2e9c>
   47f44:	tst	w0, #0x800000
   47f48:	mov	w8, #0x756                 	// #1878
   47f4c:	mov	w9, #0x76b                 	// #1899
   47f50:	csel	w0, w9, w8, eq  // eq = none
   47f54:	ret
   47f58:	tbnz	w0, #22, 48d14 <aarch64_opcode_lookup@@Base+0x2ea4>
   47f5c:	mov	w0, #0x830                 	// #2096
   47f60:	ret
   47f64:	mov	w0, #0x795                 	// #1941
   47f68:	ret
   47f6c:	mov	w0, #0x3f3                 	// #1011
   47f70:	ret
   47f74:	mov	w0, #0x3fa                 	// #1018
   47f78:	ret
   47f7c:	tst	w0, #0x800000
   47f80:	tbnz	w0, #13, 48d28 <aarch64_opcode_lookup@@Base+0x2eb8>
   47f84:	tbnz	w0, #22, 49900 <aarch64_opcode_lookup@@Base+0x3a90>
   47f88:	mov	w8, #0x6b6                 	// #1718
   47f8c:	mov	w9, #0x6ba                 	// #1722
   47f90:	csel	w0, w9, w8, eq  // eq = none
   47f94:	ret
   47f98:	tst	w0, #0x800000
   47f9c:	tbnz	w0, #22, 48d3c <aarch64_opcode_lookup@@Base+0x2ecc>
   47fa0:	mov	w8, #0x75b                 	// #1883
   47fa4:	mov	w9, #0x748                 	// #1864
   47fa8:	csel	w0, w9, w8, eq  // eq = none
   47fac:	ret
   47fb0:	tst	w0, #0x800000
   47fb4:	tbnz	w0, #13, 48d4c <aarch64_opcode_lookup@@Base+0x2edc>
   47fb8:	tbnz	w0, #22, 49910 <aarch64_opcode_lookup@@Base+0x3aa0>
   47fbc:	mov	w8, #0x642                 	// #1602
   47fc0:	mov	w9, #0x646                 	// #1606
   47fc4:	csel	w0, w9, w8, eq  // eq = none
   47fc8:	ret
   47fcc:	mov	w0, #0x3fb                 	// #1019
   47fd0:	ret
   47fd4:	mov	w0, #0x3fc                 	// #1020
   47fd8:	ret
   47fdc:	tst	w0, #0x200000
   47fe0:	tbnz	w0, #1, 48d60 <aarch64_opcode_lookup@@Base+0x2ef0>
   47fe4:	mov	w8, #0x2f2                 	// #754
   47fe8:	mov	w9, #0x2ed                 	// #749
   47fec:	csel	w0, w9, w8, eq  // eq = none
   47ff0:	ret
   47ff4:	tst	w0, #0x800000
   47ff8:	tbnz	w0, #15, 48d70 <aarch64_opcode_lookup@@Base+0x2f00>
   47ffc:	tbnz	w0, #22, 49920 <aarch64_opcode_lookup@@Base+0x3ab0>
   48000:	mov	w8, #0x5f2                 	// #1522
   48004:	mov	w9, #0x5de                 	// #1502
   48008:	csel	w0, w9, w8, eq  // eq = none
   4800c:	ret
   48010:	tst	w0, #0x800000
   48014:	tbnz	w0, #15, 48d84 <aarch64_opcode_lookup@@Base+0x2f14>
   48018:	tbnz	w0, #22, 49930 <aarch64_opcode_lookup@@Base+0x3ac0>
   4801c:	mov	w8, #0x66e                 	// #1646
   48020:	mov	w9, #0x65b                 	// #1627
   48024:	csel	w0, w9, w8, eq  // eq = none
   48028:	ret
   4802c:	tbnz	w0, #22, 48d98 <aarch64_opcode_lookup@@Base+0x2f28>
   48030:	tbnz	w0, #21, 49940 <aarch64_opcode_lookup@@Base+0x3ad0>
   48034:	tst	w0, #0x800000
   48038:	mov	w8, #0x6eb                 	// #1771
   4803c:	mov	w9, #0x6f9                 	// #1785
   48040:	csel	w0, w9, w8, eq  // eq = none
   48044:	ret
   48048:	tbnz	w0, #23, 48dac <aarch64_opcode_lookup@@Base+0x2f3c>
   4804c:	tbnz	w0, #30, 49948 <aarch64_opcode_lookup@@Base+0x3ad8>
   48050:	mov	w0, #0x5fe                 	// #1534
   48054:	ret
   48058:	tst	w0, #0x800000
   4805c:	tbnz	w0, #14, 48db8 <aarch64_opcode_lookup@@Base+0x2f48>
   48060:	tbnz	w0, #22, 4995c <aarch64_opcode_lookup@@Base+0x3aec>
   48064:	mov	w8, #0x8c3                 	// #2243
   48068:	mov	w9, #0x8c0                 	// #2240
   4806c:	csel	w0, w9, w8, eq  // eq = none
   48070:	ret
   48074:	tbnz	w0, #10, 48dcc <aarch64_opcode_lookup@@Base+0x2f5c>
   48078:	tbnz	w0, #11, 4996c <aarch64_opcode_lookup@@Base+0x3afc>
   4807c:	tst	w0, #0x800000
   48080:	mov	w8, #0x927                 	// #2343
   48084:	mov	w9, #0x92e                 	// #2350
   48088:	csel	w0, w9, w8, eq  // eq = none
   4808c:	ret
   48090:	tbnz	w0, #22, 48de4 <aarch64_opcode_lookup@@Base+0x2f74>
   48094:	tbnz	w0, #21, 49974 <aarch64_opcode_lookup@@Base+0x3b04>
   48098:	tst	w0, #0x800000
   4809c:	mov	w8, #0x6ee                 	// #1774
   480a0:	mov	w9, #0x6fc                 	// #1788
   480a4:	csel	w0, w9, w8, eq  // eq = none
   480a8:	ret
   480ac:	tbnz	w0, #12, 4913c <aarch64_opcode_lookup@@Base+0x32cc>
   480b0:	tbnz	w0, #13, 49e34 <aarch64_opcode_lookup@@Base+0x3fc4>
   480b4:	tbnz	w0, #14, 4a870 <aarch64_opcode_lookup@@Base+0x4a00>
   480b8:	mov	w0, #0xa2                  	// #162
   480bc:	ret
   480c0:	tbnz	w0, #16, 4914c <aarch64_opcode_lookup@@Base+0x32dc>
   480c4:	tbnz	w0, #17, 49e44 <aarch64_opcode_lookup@@Base+0x3fd4>
   480c8:	tst	w0, #0x80000
   480cc:	tbnz	w0, #18, 4a888 <aarch64_opcode_lookup@@Base+0x4a18>
   480d0:	mov	w8, #0x51d                 	// #1309
   480d4:	mov	w9, #0x547                 	// #1351
   480d8:	csel	w0, w9, w8, eq  // eq = none
   480dc:	ret
   480e0:	tbnz	w0, #17, 49168 <aarch64_opcode_lookup@@Base+0x32f8>
   480e4:	tbnz	w0, #18, 49e5c <aarch64_opcode_lookup@@Base+0x3fec>
   480e8:	tbnz	w0, #19, 4a898 <aarch64_opcode_lookup@@Base+0x4a28>
   480ec:	tbnz	w0, #20, 4b1e4 <aarch64_opcode_lookup@@Base+0x5374>
   480f0:	mov	w0, #0x6c8                 	// #1736
   480f4:	ret
   480f8:	tbnz	w0, #12, 49188 <aarch64_opcode_lookup@@Base+0x3318>
   480fc:	tbnz	w0, #23, 49e74 <aarch64_opcode_lookup@@Base+0x4004>
   48100:	tst	w0, #0x400000
   48104:	mov	w8, #0x4ff                 	// #1279
   48108:	cinc	w0, w8, ne  // ne = any
   4810c:	ret
   48110:	tst	w0, #0x10
   48114:	mov	w8, #0x562                 	// #1378
   48118:	mov	w9, #0x577                 	// #1399
   4811c:	csel	w0, w9, w8, eq  // eq = none
   48120:	ret
   48124:	tbnz	w0, #10, 491a0 <aarch64_opcode_lookup@@Base+0x3330>
   48128:	tbnz	w0, #11, 49e7c <aarch64_opcode_lookup@@Base+0x400c>
   4812c:	tbnz	w0, #20, 4a8a4 <aarch64_opcode_lookup@@Base+0x4a34>
   48130:	tbnz	w0, #22, 4b1f8 <aarch64_opcode_lookup@@Base+0x5388>
   48134:	mov	w0, #0x742                 	// #1858
   48138:	ret
   4813c:	mov	w0, #0x5b0                 	// #1456
   48140:	ret
   48144:	tst	w0, #0x800000
   48148:	tbnz	w0, #10, 491b4 <aarch64_opcode_lookup@@Base+0x3344>
   4814c:	tbnz	w0, #11, 49e88 <aarch64_opcode_lookup@@Base+0x4018>
   48150:	tbnz	w0, #12, 4a8b0 <aarch64_opcode_lookup@@Base+0x4a40>
   48154:	tbnz	w0, #20, 4b20c <aarch64_opcode_lookup@@Base+0x539c>
   48158:	tbnz	w0, #22, 4b880 <aarch64_opcode_lookup@@Base+0x5a10>
   4815c:	mov	w8, #0x545                 	// #1349
   48160:	mov	w9, #0x541                 	// #1345
   48164:	csel	w0, w9, w8, eq  // eq = none
   48168:	ret
   4816c:	tbnz	w0, #13, 491d0 <aarch64_opcode_lookup@@Base+0x3360>
   48170:	tbnz	w0, #15, 49ea0 <aarch64_opcode_lookup@@Base+0x4030>
   48174:	tst	w0, #0x800000
   48178:	mov	w8, #0x138                 	// #312
   4817c:	mov	w9, #0x128                 	// #296
   48180:	csel	w0, w9, w8, eq  // eq = none
   48184:	ret
   48188:	tbnz	w0, #11, 491e4 <aarch64_opcode_lookup@@Base+0x3374>
   4818c:	tst	w0, #0x2000
   48190:	tbnz	w0, #12, 49ea8 <aarch64_opcode_lookup@@Base+0x4038>
   48194:	mov	w8, #0x7ef                 	// #2031
   48198:	cinc	w0, w8, ne  // ne = any
   4819c:	ret
   481a0:	mov	w0, #0x59e                 	// #1438
   481a4:	ret
   481a8:	tst	w0, #0x400000
   481ac:	mov	w8, #0x51b                 	// #1307
   481b0:	cinc	w0, w8, ne  // ne = any
   481b4:	ret
   481b8:	tst	w0, #0x10000
   481bc:	mov	w8, #0x81d                 	// #2077
   481c0:	mov	w9, #0x81b                 	// #2075
   481c4:	csel	w0, w9, w8, eq  // eq = none
   481c8:	ret
   481cc:	tbnz	w0, #17, 491f4 <aarch64_opcode_lookup@@Base+0x3384>
   481d0:	tbnz	w0, #18, 49eb4 <aarch64_opcode_lookup@@Base+0x4044>
   481d4:	tbnz	w0, #19, 4a8c8 <aarch64_opcode_lookup@@Base+0x4a58>
   481d8:	mov	w0, #0x798                 	// #1944
   481dc:	ret
   481e0:	tst	w0, #0x4000
   481e4:	tbnz	w0, #13, 4920c <aarch64_opcode_lookup@@Base+0x339c>
   481e8:	mov	w8, #0x109                 	// #265
   481ec:	mov	w9, #0x106                 	// #262
   481f0:	csel	w0, w9, w8, eq  // eq = none
   481f4:	ret
   481f8:	tbnz	w0, #12, 4921c <aarch64_opcode_lookup@@Base+0x33ac>
   481fc:	tst	w0, #0x4000
   48200:	tbnz	w0, #13, 49ebc <aarch64_opcode_lookup@@Base+0x404c>
   48204:	mov	w8, #0x114                 	// #276
   48208:	mov	w9, #0x10d                 	// #269
   4820c:	csel	w0, w9, w8, eq  // eq = none
   48210:	ret
   48214:	tbnz	w0, #16, 4923c <aarch64_opcode_lookup@@Base+0x33cc>
   48218:	tbnz	w0, #19, 49ecc <aarch64_opcode_lookup@@Base+0x405c>
   4821c:	tst	w0, #0x100000
   48220:	mov	w8, #0x51f                 	// #1311
   48224:	mov	w9, #0x5d8                 	// #1496
   48228:	csel	w0, w9, w8, eq  // eq = none
   4822c:	ret
   48230:	tbnz	w0, #12, 49250 <aarch64_opcode_lookup@@Base+0x33e0>
   48234:	tbnz	w0, #30, 49ed4 <aarch64_opcode_lookup@@Base+0x4064>
   48238:	tst	w0, #0x800
   4823c:	mov	w8, #0x6be                 	// #1726
   48240:	mov	w9, #0x6c4                 	// #1732
   48244:	csel	w0, w9, w8, eq  // eq = none
   48248:	ret
   4824c:	tbnz	w0, #13, 49268 <aarch64_opcode_lookup@@Base+0x33f8>
   48250:	tbnz	w0, #15, 49ee4 <aarch64_opcode_lookup@@Base+0x4074>
   48254:	tst	w0, #0x400000
   48258:	mov	w8, #0x12a                 	// #298
   4825c:	mov	w9, #0x9a                  	// #154
   48260:	csel	w0, w9, w8, eq  // eq = none
   48264:	ret
   48268:	mov	w0, #0x77                  	// #119
   4826c:	ret
   48270:	mov	w0, #0x3c3                 	// #963
   48274:	ret
   48278:	tst	w0, #0x40000000
   4827c:	mov	w8, #0x944                 	// #2372
   48280:	mov	w9, #0x940                 	// #2368
   48284:	csel	w0, w9, w8, eq  // eq = none
   48288:	ret
   4828c:	cmp	w8, #0x0
   48290:	mov	w8, #0x4                   	// #4
   48294:	csinc	w0, w8, wzr, ne  // ne = any
   48298:	ret
   4829c:	tbnz	w0, #31, 4997c <aarch64_opcode_lookup@@Base+0x3b0c>
   482a0:	tst	w0, #0x40000000
   482a4:	mov	w8, #0x39f                 	// #927
   482a8:	mov	w9, #0x39a                 	// #922
   482ac:	csel	w0, w9, w8, eq  // eq = none
   482b0:	ret
   482b4:	tbnz	w0, #17, 49594 <aarch64_opcode_lookup@@Base+0x3724>
   482b8:	tbnz	w0, #15, 4a304 <aarch64_opcode_lookup@@Base+0x4494>
   482bc:	tbnz	w0, #16, 4ad80 <aarch64_opcode_lookup@@Base+0x4f10>
   482c0:	tbnz	w0, #18, 4b5a4 <aarch64_opcode_lookup@@Base+0x5734>
   482c4:	tst	w0, #0x80000
   482c8:	mov	w8, #0x32c                 	// #812
   482cc:	mov	w9, #0x330                 	// #816
   482d0:	csel	w0, w9, w8, eq  // eq = none
   482d4:	ret
   482d8:	tst	w0, #0x40000000
   482dc:	mov	w8, #0x94f                 	// #2383
   482e0:	mov	w9, #0x94b                 	// #2379
   482e4:	csel	w0, w9, w8, eq  // eq = none
   482e8:	ret
   482ec:	tst	w0, #0x40000000
   482f0:	tbnz	w0, #14, 495a0 <aarch64_opcode_lookup@@Base+0x3730>
   482f4:	tbnz	w0, #29, 4a320 <aarch64_opcode_lookup@@Base+0x44b0>
   482f8:	mov	w8, #0x40                  	// #64
   482fc:	cinc	w0, w8, ne  // ne = any
   48300:	ret
   48304:	tbnz	w0, #31, 49984 <aarch64_opcode_lookup@@Base+0x3b14>
   48308:	tbnz	w0, #9, 49eec <aarch64_opcode_lookup@@Base+0x407c>
   4830c:	tbnz	w0, #20, 4a8dc <aarch64_opcode_lookup@@Base+0x4a6c>
   48310:	tst	w0, #0x10
   48314:	mov	w8, #0x6d8                 	// #1752
   48318:	mov	w9, #0x6dd                 	// #1757
   4831c:	csel	w0, w9, w8, eq  // eq = none
   48320:	ret
   48324:	mov	w0, #0x3a5                 	// #933
   48328:	ret
   4832c:	mov	w8, #0x73                  	// #115
   48330:	cinc	w0, w8, eq  // eq = none
   48334:	ret
   48338:	tbnz	w0, #13, 495b4 <aarch64_opcode_lookup@@Base+0x3744>
   4833c:	tbnz	w0, #14, 4a32c <aarch64_opcode_lookup@@Base+0x44bc>
   48340:	mov	w8, #0x4e                  	// #78
   48344:	cinc	w0, w8, ne  // ne = any
   48348:	ret
   4834c:	mov	w8, #0x7f                  	// #127
   48350:	mov	w9, #0x75                  	// #117
   48354:	csel	w0, w9, w8, eq  // eq = none
   48358:	ret
   4835c:	mov	w8, #0x2ac                 	// #684
   48360:	mov	w9, #0x2a8                 	// #680
   48364:	csel	w0, w9, w8, eq  // eq = none
   48368:	ret
   4836c:	tbnz	w0, #31, 49998 <aarch64_opcode_lookup@@Base+0x3b28>
   48370:	tst	w0, #0x40000000
   48374:	mov	w8, #0x394                 	// #916
   48378:	mov	w9, #0x391                 	// #913
   4837c:	csel	w0, w9, w8, eq  // eq = none
   48380:	ret
   48384:	mov	w8, #0x1b0                 	// #432
   48388:	cinc	w0, w8, eq  // eq = none
   4838c:	ret
   48390:	tst	w0, #0x400000
   48394:	mov	w8, #0x56b                 	// #1387
   48398:	cinc	w0, w8, ne  // ne = any
   4839c:	ret
   483a0:	tbnz	w0, #15, 495c4 <aarch64_opcode_lookup@@Base+0x3754>
   483a4:	tbnz	w0, #29, 4a338 <aarch64_opcode_lookup@@Base+0x44c8>
   483a8:	tst	w0, #0x40000000
   483ac:	mov	w8, #0x1e6                 	// #486
   483b0:	mov	w9, #0x34f                 	// #847
   483b4:	csel	w0, w9, w8, eq  // eq = none
   483b8:	ret
   483bc:	tbnz	w0, #14, 495e4 <aarch64_opcode_lookup@@Base+0x3774>
   483c0:	tst	w0, #0x20000000
   483c4:	mov	w8, #0x153                 	// #339
   483c8:	mov	w9, #0x11f                 	// #287
   483cc:	csel	w0, w9, w8, eq  // eq = none
   483d0:	ret
   483d4:	mov	w0, #0x2da                 	// #730
   483d8:	ret
   483dc:	tst	w0, #0x400000
   483e0:	mov	w8, #0x5ab                 	// #1451
   483e4:	cinc	w0, w8, ne  // ne = any
   483e8:	ret
   483ec:	mov	w8, #0x78                  	// #120
   483f0:	cinc	w0, w8, ne  // ne = any
   483f4:	ret
   483f8:	mov	w8, #0x7d                  	// #125
   483fc:	cinc	w0, w8, ne  // ne = any
   48400:	ret
   48404:	tbnz	w0, #14, 495fc <aarch64_opcode_lookup@@Base+0x378c>
   48408:	tbnz	w0, #22, 4a340 <aarch64_opcode_lookup@@Base+0x44d0>
   4840c:	tbnz	w0, #23, 4ad98 <aarch64_opcode_lookup@@Base+0x4f28>
   48410:	tbnz	w0, #31, 4b7a4 <aarch64_opcode_lookup@@Base+0x5934>
   48414:	tst	w0, #0x40000000
   48418:	mov	w8, #0x425                 	// #1061
   4841c:	cinc	w0, w8, ne  // ne = any
   48420:	ret
   48424:	tbnz	w0, #14, 49618 <aarch64_opcode_lookup@@Base+0x37a8>
   48428:	tbnz	w0, #16, 4a35c <aarch64_opcode_lookup@@Base+0x44ec>
   4842c:	tbnz	w0, #20, 4adb0 <aarch64_opcode_lookup@@Base+0x4f40>
   48430:	mov	w0, #0xac                  	// #172
   48434:	ret
   48438:	mov	w8, #0x5e9                 	// #1513
   4843c:	mov	w9, #0x637                 	// #1591
   48440:	csel	w0, w9, w8, eq  // eq = none
   48444:	ret
   48448:	tst	w0, #0x40000000
   4844c:	mov	w8, #0x2be                 	// #702
   48450:	mov	w9, #0x2cb                 	// #715
   48454:	csel	w0, w9, w8, eq  // eq = none
   48458:	ret
   4845c:	tst	w0, #0x800000
   48460:	mov	w8, #0x242                 	// #578
   48464:	mov	w9, #0x23c                 	// #572
   48468:	csel	w0, w9, w8, eq  // eq = none
   4846c:	ret
   48470:	tbnz	w0, #13, 4962c <aarch64_opcode_lookup@@Base+0x37bc>
   48474:	mov	w8, #0x149                 	// #329
   48478:	mov	w9, #0x142                 	// #322
   4847c:	csel	w0, w9, w8, eq  // eq = none
   48480:	ret
   48484:	tbnz	w0, #31, 499a0 <aarch64_opcode_lookup@@Base+0x3b30>
   48488:	tst	w0, #0x40000000
   4848c:	mov	w8, #0x38a                 	// #906
   48490:	mov	w9, #0x385                 	// #901
   48494:	csel	w0, w9, w8, eq  // eq = none
   48498:	ret
   4849c:	tbnz	w0, #15, 4963c <aarch64_opcode_lookup@@Base+0x37cc>
   484a0:	mov	w0, #0x351                 	// #849
   484a4:	ret
   484a8:	mov	w8, #0x5f7                 	// #1527
   484ac:	mov	w9, #0x5e2                 	// #1506
   484b0:	csel	w0, w9, w8, eq  // eq = none
   484b4:	ret
   484b8:	mov	w0, #0x174                 	// #372
   484bc:	ret
   484c0:	tbnz	w0, #14, 4965c <aarch64_opcode_lookup@@Base+0x37ec>
   484c4:	tst	w0, #0x20000000
   484c8:	mov	w8, #0x154                 	// #340
   484cc:	mov	w9, #0x120                 	// #288
   484d0:	csel	w0, w9, w8, eq  // eq = none
   484d4:	ret
   484d8:	mov	w8, #0x19a                 	// #410
   484dc:	cinc	w0, w8, ne  // ne = any
   484e0:	ret
   484e4:	mov	w8, #0x676                 	// #1654
   484e8:	mov	w9, #0x662                 	// #1634
   484ec:	csel	w0, w9, w8, eq  // eq = none
   484f0:	ret
   484f4:	tst	w0, #0x800000
   484f8:	mov	w8, #0x789                 	// #1929
   484fc:	mov	w9, #0x785                 	// #1925
   48500:	csel	w0, w9, w8, eq  // eq = none
   48504:	ret
   48508:	tbnz	w0, #14, 49678 <aarch64_opcode_lookup@@Base+0x3808>
   4850c:	mov	w0, #0x238                 	// #568
   48510:	ret
   48514:	mov	w0, #0x7a                  	// #122
   48518:	ret
   4851c:	tst	w0, #0x40000000
   48520:	mov	w8, #0x945                 	// #2373
   48524:	mov	w9, #0x941                 	// #2369
   48528:	csel	w0, w9, w8, eq  // eq = none
   4852c:	ret
   48530:	mov	w8, #0x3a4                 	// #932
   48534:	mov	w9, #0x3a0                 	// #928
   48538:	csel	w0, w9, w8, ge  // ge = tcont
   4853c:	ret
   48540:	mov	w8, #0x328                 	// #808
   48544:	mov	w9, #0x326                 	// #806
   48548:	csel	w0, w9, w8, eq  // eq = none
   4854c:	ret
   48550:	tbnz	w0, #22, 4968c <aarch64_opcode_lookup@@Base+0x381c>
   48554:	mov	w8, #0x6ac                 	// #1708
   48558:	mov	w9, #0x6af                 	// #1711
   4855c:	csel	w0, w9, w8, eq  // eq = none
   48560:	ret
   48564:	tst	w0, #0x40000000
   48568:	mov	w8, #0x42                  	// #66
   4856c:	cinc	w0, w8, ne  // ne = any
   48570:	ret
   48574:	tbnz	w0, #31, 499a8 <aarch64_opcode_lookup@@Base+0x3b38>
   48578:	tbnz	w0, #4, 49f00 <aarch64_opcode_lookup@@Base+0x4090>
   4857c:	tbnz	w0, #9, 4a8e4 <aarch64_opcode_lookup@@Base+0x4a74>
   48580:	tst	w0, #0x100000
   48584:	mov	w8, #0x516                 	// #1302
   48588:	mov	w9, #0x6de                 	// #1758
   4858c:	csel	w0, w9, w8, eq  // eq = none
   48590:	ret
   48594:	tbnz	w0, #13, 4969c <aarch64_opcode_lookup@@Base+0x382c>
   48598:	mov	w0, #0x234                 	// #564
   4859c:	ret
   485a0:	mov	w8, #0x6a8                 	// #1704
   485a4:	mov	w9, #0x6b3                 	// #1715
   485a8:	csel	w0, w9, w8, eq  // eq = none
   485ac:	ret
   485b0:	mov	w8, #0x68                  	// #104
   485b4:	cinc	w0, w8, ne  // ne = any
   485b8:	ret
   485bc:	tbnz	w0, #13, 496b0 <aarch64_opcode_lookup@@Base+0x3840>
   485c0:	tst	w0, #0x400000
   485c4:	mov	w8, #0xf4                  	// #244
   485c8:	mov	w9, #0xf2                  	// #242
   485cc:	csel	w0, w9, w8, eq  // eq = none
   485d0:	ret
   485d4:	mov	w0, #0x2a9                 	// #681
   485d8:	ret
   485dc:	mov	w0, #0x5eb                 	// #1515
   485e0:	ret
   485e4:	mov	w0, #0x395                 	// #917
   485e8:	ret
   485ec:	tbnz	w0, #23, 496cc <aarch64_opcode_lookup@@Base+0x385c>
   485f0:	cmp	w0, #0x0
   485f4:	mov	w8, #0x74d                 	// #1869
   485f8:	mov	w9, #0x974                 	// #2420
   485fc:	csel	w0, w9, w8, ge  // ge = tcont
   48600:	ret
   48604:	tbnz	w0, #15, 496e0 <aarch64_opcode_lookup@@Base+0x3870>
   48608:	tst	w0, #0x20000000
   4860c:	mov	w8, #0x204                 	// #516
   48610:	mov	w9, #0x353                 	// #851
   48614:	csel	w0, w9, w8, eq  // eq = none
   48618:	ret
   4861c:	mov	w0, #0x1ab                 	// #427
   48620:	ret
   48624:	tbnz	w0, #12, 496f0 <aarch64_opcode_lookup@@Base+0x3880>
   48628:	tst	w0, #0x800000
   4862c:	mov	w8, #0x16d                 	// #365
   48630:	mov	w9, #0x15f                 	// #351
   48634:	csel	w0, w9, w8, eq  // eq = none
   48638:	ret
   4863c:	tbnz	w0, #23, 49704 <aarch64_opcode_lookup@@Base+0x3894>
   48640:	mov	w0, #0x750                 	// #1872
   48644:	ret
   48648:	tbnz	w0, #14, 4971c <aarch64_opcode_lookup@@Base+0x38ac>
   4864c:	tst	w0, #0x20000000
   48650:	mov	w8, #0x155                 	// #341
   48654:	mov	w9, #0x121                 	// #289
   48658:	csel	w0, w9, w8, eq  // eq = none
   4865c:	ret
   48660:	tst	w0, #0x800000
   48664:	mov	w8, #0x767                 	// #1895
   48668:	mov	w9, #0x752                 	// #1874
   4866c:	csel	w0, w9, w8, eq  // eq = none
   48670:	ret
   48674:	tbnz	w0, #13, 49734 <aarch64_opcode_lookup@@Base+0x38c4>
   48678:	tst	w0, #0x8000
   4867c:	mov	w8, #0x229                 	// #553
   48680:	mov	w9, #0x227                 	// #551
   48684:	csel	w0, w9, w8, eq  // eq = none
   48688:	ret
   4868c:	tbnz	w0, #31, 499bc <aarch64_opcode_lookup@@Base+0x3b4c>
   48690:	tbnz	w0, #10, 49f14 <aarch64_opcode_lookup@@Base+0x40a4>
   48694:	tbnz	w0, #11, 4a8ec <aarch64_opcode_lookup@@Base+0x4a7c>
   48698:	tst	w0, #0x400000
   4869c:	tbnz	w0, #12, 4b220 <aarch64_opcode_lookup@@Base+0x53b0>
   486a0:	mov	w8, #0x71a                 	// #1818
   486a4:	cinc	w0, w8, ne  // ne = any
   486a8:	ret
   486ac:	mov	w8, #0x7b                  	// #123
   486b0:	cinc	w0, w8, ne  // ne = any
   486b4:	ret
   486b8:	tbnz	w0, #31, 499c4 <aarch64_opcode_lookup@@Base+0x3b54>
   486bc:	tst	w0, #0x400000
   486c0:	tbnz	w0, #10, 49f2c <aarch64_opcode_lookup@@Base+0x40bc>
   486c4:	tbnz	w0, #12, 4a900 <aarch64_opcode_lookup@@Base+0x4a90>
   486c8:	mov	w8, #0x874                 	// #2164
   486cc:	cinc	w0, w8, ne  // ne = any
   486d0:	ret
   486d4:	tbnz	w0, #13, 49740 <aarch64_opcode_lookup@@Base+0x38d0>
   486d8:	tbnz	w0, #14, 4a37c <aarch64_opcode_lookup@@Base+0x450c>
   486dc:	tbnz	w0, #30, 4adc4 <aarch64_opcode_lookup@@Base+0x4f54>
   486e0:	mov	w0, #0x2d4                 	// #724
   486e4:	ret
   486e8:	tbnz	w0, #14, 49754 <aarch64_opcode_lookup@@Base+0x38e4>
   486ec:	tbnz	w0, #22, 4a384 <aarch64_opcode_lookup@@Base+0x4514>
   486f0:	tbnz	w0, #23, 4add8 <aarch64_opcode_lookup@@Base+0x4f68>
   486f4:	tbnz	w0, #31, 4b7ac <aarch64_opcode_lookup@@Base+0x593c>
   486f8:	tst	w0, #0x40000000
   486fc:	mov	w8, #0x431                 	// #1073
   48700:	cinc	w0, w8, ne  // ne = any
   48704:	ret
   48708:	mov	w0, #0x1a7                 	// #423
   4870c:	ret
   48710:	tbnz	w0, #31, 499cc <aarch64_opcode_lookup@@Base+0x3b5c>
   48714:	tst	w0, #0x400000
   48718:	mov	w8, #0x809                 	// #2057
   4871c:	cinc	w0, w8, eq  // eq = none
   48720:	ret
   48724:	tbnz	w0, #14, 49770 <aarch64_opcode_lookup@@Base+0x3900>
   48728:	tbnz	w0, #16, 4a3a0 <aarch64_opcode_lookup@@Base+0x4530>
   4872c:	tst	w0, #0x20000000
   48730:	mov	w8, #0xdd                  	// #221
   48734:	mov	w9, #0xad                  	// #173
   48738:	csel	w0, w9, w8, eq  // eq = none
   4873c:	ret
   48740:	mov	w8, #0x665                 	// #1637
   48744:	mov	w9, #0x69c                 	// #1692
   48748:	csel	w0, w9, w8, eq  // eq = none
   4874c:	ret
   48750:	mov	w8, #0x94                  	// #148
   48754:	mov	w9, #0x8b                  	// #139
   48758:	csel	w0, w9, w8, eq  // eq = none
   4875c:	ret
   48760:	tbnz	w0, #31, 499d4 <aarch64_opcode_lookup@@Base+0x3b64>
   48764:	tst	w0, #0x400000
   48768:	tbnz	w0, #12, 49f3c <aarch64_opcode_lookup@@Base+0x40cc>
   4876c:	mov	w8, #0x80c                 	// #2060
   48770:	cinc	w0, w8, ne  // ne = any
   48774:	ret
   48778:	mov	w0, #0x696                 	// #1686
   4877c:	ret
   48780:	mov	w0, #0x2c2                 	// #706
   48784:	ret
   48788:	mov	w8, #0x23b                 	// #571
   4878c:	mov	w9, #0x246                 	// #582
   48790:	csel	w0, w9, w8, eq  // eq = none
   48794:	ret
   48798:	tbnz	w0, #13, 49790 <aarch64_opcode_lookup@@Base+0x3920>
   4879c:	tbnz	w0, #14, 4a3c0 <aarch64_opcode_lookup@@Base+0x4550>
   487a0:	tst	w0, #0x800000
   487a4:	tbnz	w0, #22, 4adf0 <aarch64_opcode_lookup@@Base+0x4f80>
   487a8:	mov	w8, #0x170                 	// #368
   487ac:	mov	w9, #0x164                 	// #356
   487b0:	csel	w0, w9, w8, eq  // eq = none
   487b4:	ret
   487b8:	mov	w0, #0x82                  	// #130
   487bc:	ret
   487c0:	tbnz	w0, #23, 497a4 <aarch64_opcode_lookup@@Base+0x3934>
   487c4:	mov	w0, #0x6f4                 	// #1780
   487c8:	ret
   487cc:	tst	w0, #0x800000
   487d0:	mov	w8, #0x230                 	// #560
   487d4:	mov	w9, #0x22e                 	// #558
   487d8:	csel	w0, w9, w8, eq  // eq = none
   487dc:	ret
   487e0:	tbnz	w0, #31, 499dc <aarch64_opcode_lookup@@Base+0x3b6c>
   487e4:	mov	w0, #0x826                 	// #2086
   487e8:	ret
   487ec:	tbnz	w0, #13, 497c0 <aarch64_opcode_lookup@@Base+0x3950>
   487f0:	tst	w0, #0x4000
   487f4:	mov	w8, #0x2dd                 	// #733
   487f8:	mov	w9, #0x2bb                 	// #699
   487fc:	csel	w0, w9, w8, eq  // eq = none
   48800:	ret
   48804:	mov	w8, #0x38f                 	// #911
   48808:	mov	w9, #0x38b                 	// #907
   4880c:	csel	w0, w9, w8, ge  // ge = tcont
   48810:	ret
   48814:	mov	w8, #0x253                 	// #595
   48818:	mov	w9, #0x251                 	// #593
   4881c:	csel	w0, w9, w8, eq  // eq = none
   48820:	ret
   48824:	tbnz	w0, #31, 499f0 <aarch64_opcode_lookup@@Base+0x3b80>
   48828:	tst	w0, #0x400
   4882c:	mov	w8, #0x978                 	// #2424
   48830:	cinc	w0, w8, eq  // eq = none
   48834:	ret
   48838:	tbnz	w0, #15, 497c8 <aarch64_opcode_lookup@@Base+0x3958>
   4883c:	tbnz	w0, #29, 4a3c8 <aarch64_opcode_lookup@@Base+0x4558>
   48840:	tst	w0, #0x40000000
   48844:	mov	w8, #0x1e1                 	// #481
   48848:	mov	w9, #0x355                 	// #853
   4884c:	csel	w0, w9, w8, eq  // eq = none
   48850:	ret
   48854:	tbnz	w0, #23, 497e0 <aarch64_opcode_lookup@@Base+0x3970>
   48858:	mov	w0, #0x6fb                 	// #1787
   4885c:	ret
   48860:	tbnz	w0, #12, 497fc <aarch64_opcode_lookup@@Base+0x398c>
   48864:	mov	w0, #0x97e                 	// #2430
   48868:	ret
   4886c:	tst	w0, #0x800000
   48870:	tbnz	w0, #22, 49808 <aarch64_opcode_lookup@@Base+0x3998>
   48874:	mov	w8, #0x792                 	// #1938
   48878:	mov	w9, #0x78e                 	// #1934
   4887c:	csel	w0, w9, w8, eq  // eq = none
   48880:	ret
   48884:	tbnz	w0, #14, 49818 <aarch64_opcode_lookup@@Base+0x39a8>
   48888:	mov	w0, #0x122                 	// #290
   4888c:	ret
   48890:	tbnz	w0, #22, 49830 <aarch64_opcode_lookup@@Base+0x39c0>
   48894:	tbnz	w0, #31, 4a654 <aarch64_opcode_lookup@@Base+0x47e4>
   48898:	tbnz	w0, #10, 4a90c <aarch64_opcode_lookup@@Base+0x4a9c>
   4889c:	tbnz	w0, #12, 4b22c <aarch64_opcode_lookup@@Base+0x53bc>
   488a0:	mov	w0, #0x886                 	// #2182
   488a4:	ret
   488a8:	tst	w0, #0x800000
   488ac:	mov	w8, #0x66a                 	// #1642
   488b0:	mov	w9, #0x6a1                 	// #1697
   488b4:	csel	w0, w9, w8, eq  // eq = none
   488b8:	ret
   488bc:	tbnz	w0, #23, 49844 <aarch64_opcode_lookup@@Base+0x39d4>
   488c0:	tbnz	w0, #31, 4a65c <aarch64_opcode_lookup@@Base+0x47ec>
   488c4:	mov	w0, #0x975                 	// #2421
   488c8:	ret
   488cc:	tst	w0, #0x800000
   488d0:	mov	w8, #0x621                 	// #1569
   488d4:	mov	w9, #0x616                 	// #1558
   488d8:	csel	w0, w9, w8, eq  // eq = none
   488dc:	ret
   488e0:	tst	w0, #0x800000
   488e4:	mov	w8, #0x60b                 	// #1547
   488e8:	mov	w9, #0x607                 	// #1543
   488ec:	csel	w0, w9, w8, eq  // eq = none
   488f0:	ret
   488f4:	tst	w0, #0x800000
   488f8:	mov	w8, #0x609                 	// #1545
   488fc:	mov	w9, #0x60d                 	// #1549
   48900:	csel	w0, w9, w8, eq  // eq = none
   48904:	ret
   48908:	tst	w0, #0x800000
   4890c:	mov	w8, #0x685                 	// #1669
   48910:	mov	w9, #0x67a                 	// #1658
   48914:	csel	w0, w9, w8, eq  // eq = none
   48918:	ret
   4891c:	mov	w0, #0x62e                 	// #1582
   48920:	ret
   48924:	tst	w0, #0x800000
   48928:	mov	w8, #0x5f0                 	// #1520
   4892c:	mov	w9, #0x5dc                 	// #1500
   48930:	csel	w0, w9, w8, eq  // eq = none
   48934:	ret
   48938:	tst	w0, #0x800000
   4893c:	mov	w8, #0x66c                 	// #1644
   48940:	mov	w9, #0x658                 	// #1624
   48944:	csel	w0, w9, w8, eq  // eq = none
   48948:	ret
   4894c:	mov	w0, #0x693                 	// #1683
   48950:	ret
   48954:	mov	w0, #0x36d                 	// #877
   48958:	ret
   4895c:	tst	w0, #0x800000
   48960:	tbnz	w0, #22, 499f8 <aarch64_opcode_lookup@@Base+0x3b88>
   48964:	mov	w8, #0x61e                 	// #1566
   48968:	mov	w9, #0x62b                 	// #1579
   4896c:	csel	w0, w9, w8, eq  // eq = none
   48970:	ret
   48974:	tst	w0, #0x800000
   48978:	mov	w8, #0x608                 	// #1544
   4897c:	mov	w9, #0x60c                 	// #1548
   48980:	csel	w0, w9, w8, eq  // eq = none
   48984:	ret
   48988:	tst	w0, #0x800000
   4898c:	mov	w8, #0x5ea                 	// #1514
   48990:	mov	w9, #0x638                 	// #1592
   48994:	csel	w0, w9, w8, eq  // eq = none
   48998:	ret
   4899c:	tst	w0, #0x800000
   489a0:	tbnz	w0, #20, 49a08 <aarch64_opcode_lookup@@Base+0x3b98>
   489a4:	tbnz	w0, #22, 4a670 <aarch64_opcode_lookup@@Base+0x4800>
   489a8:	mov	w8, #0x632                 	// #1586
   489ac:	mov	w9, #0x5e4                 	// #1508
   489b0:	csel	w0, w9, w8, eq  // eq = none
   489b4:	ret
   489b8:	tst	w0, #0x800000
   489bc:	mov	w8, #0x667                 	// #1639
   489c0:	mov	w9, #0x69e                 	// #1694
   489c4:	csel	w0, w9, w8, eq  // eq = none
   489c8:	ret
   489cc:	tst	w0, #0x800000
   489d0:	mov	w8, #0x622                 	// #1570
   489d4:	mov	w9, #0x6e4                 	// #1764
   489d8:	csel	w0, w9, w8, eq  // eq = none
   489dc:	ret
   489e0:	tst	w0, #0x800000
   489e4:	mov	w8, #0x60a                 	// #1546
   489e8:	mov	w9, #0x606                 	// #1542
   489ec:	csel	w0, w9, w8, eq  // eq = none
   489f0:	ret
   489f4:	tst	w0, #0x800000
   489f8:	mov	w8, #0x686                 	// #1670
   489fc:	mov	w9, #0x6f1                 	// #1777
   48a00:	csel	w0, w9, w8, eq  // eq = none
   48a04:	ret
   48a08:	tst	w0, #0x400000
   48a0c:	mov	w8, #0x630                 	// #1584
   48a10:	mov	w9, #0x82f                 	// #2095
   48a14:	csel	w0, w9, w8, eq  // eq = none
   48a18:	ret
   48a1c:	tst	w0, #0x800000
   48a20:	mov	w8, #0x5f1                 	// #1521
   48a24:	mov	w9, #0x6f8                 	// #1784
   48a28:	csel	w0, w9, w8, eq  // eq = none
   48a2c:	ret
   48a30:	tst	w0, #0x800000
   48a34:	mov	w8, #0x66d                 	// #1645
   48a38:	mov	w9, #0x6ea                 	// #1770
   48a3c:	csel	w0, w9, w8, eq  // eq = none
   48a40:	ret
   48a44:	mov	w0, #0x695                 	// #1685
   48a48:	ret
   48a4c:	tst	w0, #0x800000
   48a50:	mov	w8, #0x965                 	// #2405
   48a54:	cinc	w0, w8, ne  // ne = any
   48a58:	ret
   48a5c:	tst	w0, #0x800000
   48a60:	mov	w8, #0x68d                 	// #1677
   48a64:	mov	w9, #0x682                 	// #1666
   48a68:	csel	w0, w9, w8, eq  // eq = none
   48a6c:	ret
   48a70:	tst	w0, #0x800000
   48a74:	tbnz	w0, #22, 49a1c <aarch64_opcode_lookup@@Base+0x3bac>
   48a78:	mov	w8, #0x82a                 	// #2090
   48a7c:	mov	w9, #0x831                 	// #2097
   48a80:	csel	w0, w9, w8, eq  // eq = none
   48a84:	ret
   48a88:	mov	w0, #0x75e                 	// #1886
   48a8c:	ret
   48a90:	tst	w0, #0x800000
   48a94:	tbnz	w0, #22, 49a2c <aarch64_opcode_lookup@@Base+0x3bbc>
   48a98:	mov	w8, #0x755                 	// #1877
   48a9c:	mov	w9, #0x76a                 	// #1898
   48aa0:	csel	w0, w9, w8, eq  // eq = none
   48aa4:	ret
   48aa8:	tst	w0, #0x800000
   48aac:	tbnz	w0, #22, 49a3c <aarch64_opcode_lookup@@Base+0x3bcc>
   48ab0:	mov	w8, #0x6b9                 	// #1721
   48ab4:	mov	w9, #0x6b5                 	// #1717
   48ab8:	csel	w0, w9, w8, eq  // eq = none
   48abc:	ret
   48ac0:	tst	w0, #0x800000
   48ac4:	tbnz	w0, #22, 49a4c <aarch64_opcode_lookup@@Base+0x3bdc>
   48ac8:	mov	w8, #0x78f                 	// #1935
   48acc:	mov	w9, #0x793                 	// #1939
   48ad0:	csel	w0, w9, w8, eq  // eq = none
   48ad4:	ret
   48ad8:	tst	w0, #0x800000
   48adc:	tbnz	w0, #22, 49a5c <aarch64_opcode_lookup@@Base+0x3bec>
   48ae0:	mov	w8, #0x6f0                 	// #1776
   48ae4:	mov	w9, #0x6fe                 	// #1790
   48ae8:	csel	w0, w9, w8, eq  // eq = none
   48aec:	ret
   48af0:	tbnz	w0, #22, 49a6c <aarch64_opcode_lookup@@Base+0x3bfc>
   48af4:	tst	w0, #0x800000
   48af8:	mov	w8, #0x757                 	// #1879
   48afc:	mov	w9, #0x76c                 	// #1900
   48b00:	csel	w0, w9, w8, eq  // eq = none
   48b04:	ret
   48b08:	tst	w0, #0x200000
   48b0c:	mov	w8, #0x2f3                 	// #755
   48b10:	mov	w9, #0x2ee                 	// #750
   48b14:	csel	w0, w9, w8, eq  // eq = none
   48b18:	ret
   48b1c:	tst	w0, #0x800000
   48b20:	tbnz	w0, #20, 49a74 <aarch64_opcode_lookup@@Base+0x3c04>
   48b24:	tbnz	w0, #22, 4a680 <aarch64_opcode_lookup@@Base+0x4810>
   48b28:	mov	w8, #0x5fa                 	// #1530
   48b2c:	mov	w9, #0x5e5                 	// #1509
   48b30:	csel	w0, w9, w8, eq  // eq = none
   48b34:	ret
   48b38:	tst	w0, #0x400000
   48b3c:	mov	w8, #0x6fd                 	// #1789
   48b40:	mov	w9, #0x6bd                 	// #1725
   48b44:	csel	w0, w9, w8, eq  // eq = none
   48b48:	ret
   48b4c:	tst	w0, #0x40000000
   48b50:	tbnz	w0, #23, 49a88 <aarch64_opcode_lookup@@Base+0x3c18>
   48b54:	mov	w8, #0x620                 	// #1568
   48b58:	mov	w9, #0x61c                 	// #1564
   48b5c:	csel	w0, w9, w8, eq  // eq = none
   48b60:	ret
   48b64:	tst	w0, #0x800000
   48b68:	mov	w8, #0x760                 	// #1888
   48b6c:	mov	w9, #0x74b                 	// #1867
   48b70:	csel	w0, w9, w8, eq  // eq = none
   48b74:	ret
   48b78:	mov	w0, #0x6ef                 	// #1775
   48b7c:	ret
   48b80:	tst	w0, #0x800000
   48b84:	mov	w8, #0x625                 	// #1573
   48b88:	mov	w9, #0x61a                 	// #1562
   48b8c:	csel	w0, w9, w8, eq  // eq = none
   48b90:	ret
   48b94:	tst	w0, #0x800000
   48b98:	tbnz	w0, #22, 49a98 <aarch64_opcode_lookup@@Base+0x3c28>
   48b9c:	mov	w8, #0x62d                 	// #1581
   48ba0:	mov	w9, #0x5dd                 	// #1501
   48ba4:	csel	w0, w9, w8, eq  // eq = none
   48ba8:	ret
   48bac:	tst	w0, #0x800000
   48bb0:	mov	w8, #0x961                 	// #2401
   48bb4:	cinc	w0, w8, ne  // ne = any
   48bb8:	ret
   48bbc:	tst	w0, #0x800000
   48bc0:	mov	w8, #0x68b                 	// #1675
   48bc4:	mov	w9, #0x681                 	// #1665
   48bc8:	csel	w0, w9, w8, eq  // eq = none
   48bcc:	ret
   48bd0:	mov	w0, #0x62f                 	// #1583
   48bd4:	ret
   48bd8:	tst	w0, #0x800000
   48bdc:	mov	w8, #0x5f5                 	// #1525
   48be0:	mov	w9, #0x5e1                 	// #1505
   48be4:	csel	w0, w9, w8, eq  // eq = none
   48be8:	ret
   48bec:	tst	w0, #0x800000
   48bf0:	tbnz	w0, #22, 49aa8 <aarch64_opcode_lookup@@Base+0x3c38>
   48bf4:	mov	w8, #0x6b8                 	// #1720
   48bf8:	mov	w9, #0x6b4                 	// #1716
   48bfc:	csel	w0, w9, w8, eq  // eq = none
   48c00:	ret
   48c04:	tst	w0, #0x800000
   48c08:	mov	w8, #0x674                 	// #1652
   48c0c:	mov	w9, #0x661                 	// #1633
   48c10:	csel	w0, w9, w8, eq  // eq = none
   48c14:	ret
   48c18:	mov	w0, #0x694                 	// #1684
   48c1c:	ret
   48c20:	mov	w0, #0x36e                 	// #878
   48c24:	ret
   48c28:	tbnz	w0, #22, 49ab8 <aarch64_opcode_lookup@@Base+0x3c48>
   48c2c:	tst	w0, #0x800000
   48c30:	mov	w8, #0x8c1                 	// #2241
   48c34:	mov	w9, #0x8c5                 	// #2245
   48c38:	csel	w0, w9, w8, eq  // eq = none
   48c3c:	ret
   48c40:	tst	w0, #0x800000
   48c44:	mov	w8, #0x668                 	// #1640
   48c48:	mov	w9, #0x69f                 	// #1695
   48c4c:	csel	w0, w9, w8, eq  // eq = none
   48c50:	ret
   48c54:	tst	w0, #0x800000
   48c58:	tbnz	w0, #22, 49ac0 <aarch64_opcode_lookup@@Base+0x3c50>
   48c5c:	mov	w8, #0x691                 	// #1681
   48c60:	mov	w9, #0x659                 	// #1625
   48c64:	csel	w0, w9, w8, eq  // eq = none
   48c68:	ret
   48c6c:	tst	w0, #0x400000
   48c70:	mov	w8, #0x631                 	// #1585
   48c74:	mov	w9, #0x633                 	// #1587
   48c78:	csel	w0, w9, w8, eq  // eq = none
   48c7c:	ret
   48c80:	tbnz	w0, #20, 49ad0 <aarch64_opcode_lookup@@Base+0x3c60>
   48c84:	mov	w0, #0x772                 	// #1906
   48c88:	ret
   48c8c:	tst	w0, #0x800000
   48c90:	tbnz	w0, #22, 49ae8 <aarch64_opcode_lookup@@Base+0x3c78>
   48c94:	mov	w8, #0x777                 	// #1911
   48c98:	mov	w9, #0x77b                 	// #1915
   48c9c:	csel	w0, w9, w8, eq  // eq = none
   48ca0:	ret
   48ca4:	tbnz	w0, #20, 49af8 <aarch64_opcode_lookup@@Base+0x3c88>
   48ca8:	tst	w0, #0x800000
   48cac:	mov	w8, #0x75a                 	// #1882
   48cb0:	mov	w9, #0x774                 	// #1908
   48cb4:	csel	w0, w9, w8, eq  // eq = none
   48cb8:	ret
   48cbc:	tst	w0, #0x800000
   48cc0:	mov	w8, #0x603                 	// #1539
   48cc4:	mov	w9, #0x5ff                 	// #1535
   48cc8:	csel	w0, w9, w8, eq  // eq = none
   48ccc:	ret
   48cd0:	mov	w0, #0x76e                 	// #1902
   48cd4:	ret
   48cd8:	tst	w0, #0x800000
   48cdc:	mov	w8, #0x604                 	// #1540
   48ce0:	mov	w9, #0x600                 	// #1536
   48ce4:	csel	w0, w9, w8, eq  // eq = none
   48ce8:	ret
   48cec:	tbnz	w0, #21, 49b10 <aarch64_opcode_lookup@@Base+0x3ca0>
   48cf0:	mov	w0, #0x76d                 	// #1901
   48cf4:	ret
   48cf8:	tst	w0, #0x800000
   48cfc:	mov	w8, #0x605                 	// #1541
   48d00:	mov	w9, #0x601                 	// #1537
   48d04:	csel	w0, w9, w8, eq  // eq = none
   48d08:	ret
   48d0c:	mov	w0, #0x770                 	// #1904
   48d10:	ret
   48d14:	tst	w0, #0x800000
   48d18:	mov	w8, #0x60f                 	// #1551
   48d1c:	mov	w9, #0x612                 	// #1554
   48d20:	csel	w0, w9, w8, eq  // eq = none
   48d24:	ret
   48d28:	tbnz	w0, #22, 49b24 <aarch64_opcode_lookup@@Base+0x3cb4>
   48d2c:	mov	w8, #0x6b7                 	// #1719
   48d30:	mov	w9, #0x6bb                 	// #1723
   48d34:	csel	w0, w9, w8, eq  // eq = none
   48d38:	ret
   48d3c:	mov	w8, #0x761                 	// #1889
   48d40:	mov	w9, #0x74c                 	// #1868
   48d44:	csel	w0, w9, w8, eq  // eq = none
   48d48:	ret
   48d4c:	tbnz	w0, #22, 49b34 <aarch64_opcode_lookup@@Base+0x3cc4>
   48d50:	mov	w8, #0x643                 	// #1603
   48d54:	mov	w9, #0x647                 	// #1607
   48d58:	csel	w0, w9, w8, eq  // eq = none
   48d5c:	ret
   48d60:	mov	w8, #0x2f4                 	// #756
   48d64:	mov	w9, #0x2ef                 	// #751
   48d68:	csel	w0, w9, w8, eq  // eq = none
   48d6c:	ret
   48d70:	tbnz	w0, #22, 49b44 <aarch64_opcode_lookup@@Base+0x3cd4>
   48d74:	mov	w8, #0x644                 	// #1604
   48d78:	mov	w9, #0x640                 	// #1600
   48d7c:	csel	w0, w9, w8, eq  // eq = none
   48d80:	ret
   48d84:	tbnz	w0, #22, 49b54 <aarch64_opcode_lookup@@Base+0x3ce4>
   48d88:	mov	w8, #0x645                 	// #1605
   48d8c:	mov	w9, #0x641                 	// #1601
   48d90:	csel	w0, w9, w8, eq  // eq = none
   48d94:	ret
   48d98:	tst	w0, #0x800000
   48d9c:	mov	w8, #0x610                 	// #1552
   48da0:	mov	w9, #0x614                 	// #1556
   48da4:	csel	w0, w9, w8, eq  // eq = none
   48da8:	ret
   48dac:	tbnz	w0, #30, 49b64 <aarch64_opcode_lookup@@Base+0x3cf4>
   48db0:	mov	w0, #0x613                 	// #1555
   48db4:	ret
   48db8:	tbnz	w0, #22, 49b74 <aarch64_opcode_lookup@@Base+0x3d04>
   48dbc:	mov	w8, #0x791                 	// #1937
   48dc0:	mov	w9, #0x78d                 	// #1933
   48dc4:	csel	w0, w9, w8, eq  // eq = none
   48dc8:	ret
   48dcc:	tbnz	w0, #11, 49b84 <aarch64_opcode_lookup@@Base+0x3d14>
   48dd0:	tst	w0, #0x800000
   48dd4:	mov	w8, #0x934                 	// #2356
   48dd8:	mov	w9, #0x92f                 	// #2351
   48ddc:	csel	w0, w9, w8, eq  // eq = none
   48de0:	ret
   48de4:	tst	w0, #0x800000
   48de8:	mov	w8, #0x602                 	// #1538
   48dec:	mov	w9, #0x615                 	// #1557
   48df0:	csel	w0, w9, w8, eq  // eq = none
   48df4:	ret
   48df8:	tbnz	w0, #17, 49f48 <aarch64_opcode_lookup@@Base+0x40d8>
   48dfc:	tbnz	w0, #18, 4a920 <aarch64_opcode_lookup@@Base+0x4ab0>
   48e00:	tbnz	w0, #19, 4b240 <aarch64_opcode_lookup@@Base+0x53d0>
   48e04:	mov	w0, #0x799                 	// #1945
   48e08:	ret
   48e0c:	tbnz	w0, #13, 49f64 <aarch64_opcode_lookup@@Base+0x40f4>
   48e10:	tbnz	w0, #14, 4a934 <aarch64_opcode_lookup@@Base+0x4ac4>
   48e14:	mov	w8, #0x2e                  	// #46
   48e18:	cinc	w0, w8, ne  // ne = any
   48e1c:	ret
   48e20:	tbnz	w0, #16, 49f74 <aarch64_opcode_lookup@@Base+0x4104>
   48e24:	tst	w0, #0x100000
   48e28:	mov	w8, #0x507                 	// #1287
   48e2c:	mov	w9, #0x724                 	// #1828
   48e30:	csel	w0, w9, w8, eq  // eq = none
   48e34:	ret
   48e38:	tbnz	w0, #11, 49f7c <aarch64_opcode_lookup@@Base+0x410c>
   48e3c:	mov	w8, #0x8bb                 	// #2235
   48e40:	mov	w9, #0x850                 	// #2128
   48e44:	csel	w0, w9, w8, eq  // eq = none
   48e48:	ret
   48e4c:	mov	w8, #0x8cf                 	// #2255
   48e50:	mov	w9, #0x84c                 	// #2124
   48e54:	csel	w0, w9, w8, eq  // eq = none
   48e58:	ret
   48e5c:	tbnz	w0, #10, 49f8c <aarch64_opcode_lookup@@Base+0x411c>
   48e60:	tbnz	w0, #11, 4a940 <aarch64_opcode_lookup@@Base+0x4ad0>
   48e64:	tbnz	w0, #17, 4b254 <aarch64_opcode_lookup@@Base+0x53e4>
   48e68:	tst	w0, #0x40000
   48e6c:	mov	w8, #0x551                 	// #1361
   48e70:	mov	w9, #0x7d3                 	// #2003
   48e74:	csel	w0, w9, w8, eq  // eq = none
   48e78:	ret
   48e7c:	mov	w0, #0x811                 	// #2065
   48e80:	ret
   48e84:	tbnz	w0, #18, 49fa0 <aarch64_opcode_lookup@@Base+0x4130>
   48e88:	tst	w0, #0x100000
   48e8c:	tbnz	w0, #19, 4a958 <aarch64_opcode_lookup@@Base+0x4ae8>
   48e90:	mov	w8, #0x858                 	// #2136
   48e94:	mov	w9, #0x8b2                 	// #2226
   48e98:	csel	w0, w9, w8, eq  // eq = none
   48e9c:	ret
   48ea0:	tbnz	w0, #17, 49fbc <aarch64_opcode_lookup@@Base+0x414c>
   48ea4:	tst	w0, #0x80000
   48ea8:	tbnz	w0, #18, 4a968 <aarch64_opcode_lookup@@Base+0x4af8>
   48eac:	mov	w8, #0x524                 	// #1316
   48eb0:	mov	w9, #0x7dd                 	// #2013
   48eb4:	csel	w0, w9, w8, eq  // eq = none
   48eb8:	ret
   48ebc:	tbnz	w0, #11, 49fd4 <aarch64_opcode_lookup@@Base+0x4164>
   48ec0:	mov	w8, #0x8be                 	// #2238
   48ec4:	mov	w9, #0x852                 	// #2130
   48ec8:	csel	w0, w9, w8, eq  // eq = none
   48ecc:	ret
   48ed0:	tbnz	w0, #16, 49fe4 <aarch64_opcode_lookup@@Base+0x4174>
   48ed4:	tbnz	w0, #17, 4a978 <aarch64_opcode_lookup@@Base+0x4b08>
   48ed8:	tst	w0, #0x100000
   48edc:	tbnz	w0, #18, 4b25c <aarch64_opcode_lookup@@Base+0x53ec>
   48ee0:	mov	w8, #0x566                 	// #1382
   48ee4:	mov	w9, #0x560                 	// #1376
   48ee8:	csel	w0, w9, w8, eq  // eq = none
   48eec:	ret
   48ef0:	tbnz	w0, #11, 4a000 <aarch64_opcode_lookup@@Base+0x4190>
   48ef4:	tst	w0, #0x1000
   48ef8:	mov	w8, #0x86f                 	// #2159
   48efc:	mov	w9, #0x88b                 	// #2187
   48f00:	csel	w0, w9, w8, eq  // eq = none
   48f04:	ret
   48f08:	tst	w0, #0x8000
   48f0c:	mov	w8, #0x96d                 	// #2413
   48f10:	mov	w9, #0x12c                 	// #300
   48f14:	csel	w0, w9, w8, eq  // eq = none
   48f18:	ret
   48f1c:	tst	w0, #0x2000
   48f20:	mov	w8, #0x7e0                 	// #2016
   48f24:	cinc	w0, w8, ne  // ne = any
   48f28:	ret
   48f2c:	tbnz	w0, #11, 4a018 <aarch64_opcode_lookup@@Base+0x41a8>
   48f30:	tst	w0, #0x1000
   48f34:	mov	w8, #0x7bb                 	// #1979
   48f38:	mov	w9, #0x797                 	// #1943
   48f3c:	csel	w0, w9, w8, eq  // eq = none
   48f40:	ret
   48f44:	tbnz	w0, #11, 4a020 <aarch64_opcode_lookup@@Base+0x41b0>
   48f48:	mov	w0, #0x5c1                 	// #1473
   48f4c:	ret
   48f50:	tbnz	w0, #11, 4a034 <aarch64_opcode_lookup@@Base+0x41c4>
   48f54:	mov	w0, #0x914                 	// #2324
   48f58:	ret
   48f5c:	tst	w0, #0x800
   48f60:	mov	w8, #0x8bc                 	// #2236
   48f64:	mov	w9, #0x810                 	// #2064
   48f68:	csel	w0, w9, w8, eq  // eq = none
   48f6c:	ret
   48f70:	tbnz	w0, #16, 4a04c <aarch64_opcode_lookup@@Base+0x41dc>
   48f74:	tbnz	w0, #19, 4a990 <aarch64_opcode_lookup@@Base+0x4b20>
   48f78:	mov	w0, #0x6ff                 	// #1791
   48f7c:	ret
   48f80:	tst	w0, #0x400
   48f84:	mov	w8, #0x5d2                 	// #1490
   48f88:	mov	w9, #0x5d5                 	// #1493
   48f8c:	csel	w0, w9, w8, eq  // eq = none
   48f90:	ret
   48f94:	tst	w0, #0x10000
   48f98:	mov	w8, #0x81c                 	// #2076
   48f9c:	mov	w9, #0x81a                 	// #2074
   48fa0:	csel	w0, w9, w8, eq  // eq = none
   48fa4:	ret
   48fa8:	tbnz	w0, #11, 4a064 <aarch64_opcode_lookup@@Base+0x41f4>
   48fac:	tst	w0, #0x1000
   48fb0:	mov	w8, #0x89b                 	// #2203
   48fb4:	mov	w9, #0x83f                 	// #2111
   48fb8:	csel	w0, w9, w8, eq  // eq = none
   48fbc:	ret
   48fc0:	tbnz	w0, #11, 4a06c <aarch64_opcode_lookup@@Base+0x41fc>
   48fc4:	tst	w0, #0x1000
   48fc8:	mov	w8, #0x91e                 	// #2334
   48fcc:	mov	w9, #0x8b7                 	// #2231
   48fd0:	csel	w0, w9, w8, eq  // eq = none
   48fd4:	ret
   48fd8:	tst	w0, #0x40000
   48fdc:	mov	w8, #0x746                 	// #1862
   48fe0:	mov	w9, #0x722                 	// #1826
   48fe4:	csel	w0, w9, w8, eq  // eq = none
   48fe8:	ret
   48fec:	mov	w8, #0x912                 	// #2322
   48ff0:	mov	w9, #0x54b                 	// #1355
   48ff4:	csel	w0, w9, w8, eq  // eq = none
   48ff8:	ret
   48ffc:	tbnz	w0, #17, 4a074 <aarch64_opcode_lookup@@Base+0x4204>
   49000:	tbnz	w0, #18, 4a9ac <aarch64_opcode_lookup@@Base+0x4b3c>
   49004:	tbnz	w0, #19, 4b26c <aarch64_opcode_lookup@@Base+0x53fc>
   49008:	tst	w0, #0x100000
   4900c:	mov	w8, #0x802                 	// #2050
   49010:	mov	w9, #0x900                 	// #2304
   49014:	csel	w0, w9, w8, eq  // eq = none
   49018:	ret
   4901c:	tbnz	w0, #12, 4a07c <aarch64_opcode_lookup@@Base+0x420c>
   49020:	tst	w0, #0x400
   49024:	mov	w8, #0x8cc                 	// #2252
   49028:	cinc	w0, w8, ne  // ne = any
   4902c:	ret
   49030:	tbnz	w0, #17, 4a090 <aarch64_opcode_lookup@@Base+0x4220>
   49034:	tbnz	w0, #18, 4a9c0 <aarch64_opcode_lookup@@Base+0x4b50>
   49038:	tbnz	w0, #19, 4b274 <aarch64_opcode_lookup@@Base+0x5404>
   4903c:	tst	w0, #0x100000
   49040:	mov	w8, #0x7ab                 	// #1963
   49044:	mov	w9, #0x5ba                 	// #1466
   49048:	csel	w0, w9, w8, eq  // eq = none
   4904c:	ret
   49050:	tbnz	w0, #11, 4a0ac <aarch64_opcode_lookup@@Base+0x423c>
   49054:	mov	w8, #0x85a                 	// #2138
   49058:	mov	w9, #0x905                 	// #2309
   4905c:	csel	w0, w9, w8, eq  // eq = none
   49060:	ret
   49064:	tbnz	w0, #13, 4a0bc <aarch64_opcode_lookup@@Base+0x424c>
   49068:	mov	w8, #0x115                 	// #277
   4906c:	mov	w9, #0x10e                 	// #270
   49070:	csel	w0, w9, w8, eq  // eq = none
   49074:	ret
   49078:	mov	w0, #0x8ca                 	// #2250
   4907c:	ret
   49080:	tbnz	w0, #30, 4a0cc <aarch64_opcode_lookup@@Base+0x425c>
   49084:	mov	w0, #0x509                 	// #1289
   49088:	ret
   4908c:	tst	w0, #0x8000
   49090:	mov	w8, #0x96f                 	// #2415
   49094:	mov	w9, #0x97                  	// #151
   49098:	csel	w0, w9, w8, eq  // eq = none
   4909c:	ret
   490a0:	mov	w0, #0x808                 	// #2056
   490a4:	ret
   490a8:	tbnz	w0, #10, 4a0dc <aarch64_opcode_lookup@@Base+0x426c>
   490ac:	tbnz	w0, #11, 4a9d0 <aarch64_opcode_lookup@@Base+0x4b60>
   490b0:	mov	w8, #0x90c                 	// #2316
   490b4:	cinc	w0, w8, ne  // ne = any
   490b8:	ret
   490bc:	tbnz	w0, #11, 4a0ec <aarch64_opcode_lookup@@Base+0x427c>
   490c0:	mov	w8, #0x857                 	// #2135
   490c4:	mov	w9, #0x8a9                 	// #2217
   490c8:	csel	w0, w9, w8, eq  // eq = none
   490cc:	ret
   490d0:	tbnz	w0, #11, 4a0fc <aarch64_opcode_lookup@@Base+0x428c>
   490d4:	mov	w8, #0x868                 	// #2152
   490d8:	mov	w9, #0x862                 	// #2146
   490dc:	csel	w0, w9, w8, eq  // eq = none
   490e0:	ret
   490e4:	tbnz	w0, #11, 4a10c <aarch64_opcode_lookup@@Base+0x429c>
   490e8:	tst	w0, #0x1000
   490ec:	mov	w8, #0x897                 	// #2199
   490f0:	mov	w9, #0x87a                 	// #2170
   490f4:	csel	w0, w9, w8, eq  // eq = none
   490f8:	ret
   490fc:	tbnz	w0, #11, 4a114 <aarch64_opcode_lookup@@Base+0x42a4>
   49100:	mov	w8, #0x8f6                 	// #2294
   49104:	mov	w9, #0x8a7                 	// #2215
   49108:	csel	w0, w9, w8, eq  // eq = none
   4910c:	ret
   49110:	tbnz	w0, #17, 4a124 <aarch64_opcode_lookup@@Base+0x42b4>
   49114:	tbnz	w0, #18, 4a9dc <aarch64_opcode_lookup@@Base+0x4b6c>
   49118:	tst	w0, #0x10
   4911c:	mov	w8, #0x573                 	// #1395
   49120:	cinc	w0, w8, eq  // eq = none
   49124:	ret
   49128:	tbnz	w0, #11, 4a130 <aarch64_opcode_lookup@@Base+0x42c0>
   4912c:	mov	w8, #0x8c7                 	// #2247
   49130:	mov	w9, #0x801                 	// #2049
   49134:	csel	w0, w9, w8, eq  // eq = none
   49138:	ret
   4913c:	tbnz	w0, #13, 4a140 <aarch64_opcode_lookup@@Base+0x42d0>
   49140:	tbnz	w0, #14, 4a9e4 <aarch64_opcode_lookup@@Base+0x4b74>
   49144:	mov	w0, #0xa3                  	// #163
   49148:	ret
   4914c:	tbnz	w0, #17, 4a158 <aarch64_opcode_lookup@@Base+0x42e8>
   49150:	tst	w0, #0x80000
   49154:	tbnz	w0, #18, 4a9f8 <aarch64_opcode_lookup@@Base+0x4b88>
   49158:	mov	w8, #0x520                 	// #1312
   4915c:	mov	w9, #0x546                 	// #1350
   49160:	csel	w0, w9, w8, eq  // eq = none
   49164:	ret
   49168:	tbnz	w0, #18, 4a170 <aarch64_opcode_lookup@@Base+0x4300>
   4916c:	tbnz	w0, #19, 4aa08 <aarch64_opcode_lookup@@Base+0x4b98>
   49170:	tst	w0, #0x40000000
   49174:	tbnz	w0, #20, 4b28c <aarch64_opcode_lookup@@Base+0x541c>
   49178:	mov	w8, #0x8fd                 	// #2301
   4917c:	mov	w9, #0x6c2                 	// #1730
   49180:	csel	w0, w9, w8, eq  // eq = none
   49184:	ret
   49188:	tbnz	w0, #10, 4a18c <aarch64_opcode_lookup@@Base+0x431c>
   4918c:	tst	w0, #0x800
   49190:	mov	w8, #0x590                 	// #1424
   49194:	mov	w9, #0x5c8                 	// #1480
   49198:	csel	w0, w9, w8, eq  // eq = none
   4919c:	ret
   491a0:	tbnz	w0, #11, 4a194 <aarch64_opcode_lookup@@Base+0x4324>
   491a4:	tbnz	w0, #20, 4aa14 <aarch64_opcode_lookup@@Base+0x4ba4>
   491a8:	tbnz	w0, #22, 4b29c <aarch64_opcode_lookup@@Base+0x542c>
   491ac:	mov	w0, #0x7d6                 	// #2006
   491b0:	ret
   491b4:	tbnz	w0, #11, 4a1a0 <aarch64_opcode_lookup@@Base+0x4330>
   491b8:	tbnz	w0, #12, 4aa20 <aarch64_opcode_lookup@@Base+0x4bb0>
   491bc:	tbnz	w0, #22, 4b2b0 <aarch64_opcode_lookup@@Base+0x5440>
   491c0:	mov	w8, #0x554                 	// #1364
   491c4:	mov	w9, #0x54c                 	// #1356
   491c8:	csel	w0, w9, w8, eq  // eq = none
   491cc:	ret
   491d0:	tst	w0, #0x800000
   491d4:	mov	w8, #0x13a                 	// #314
   491d8:	mov	w9, #0x12e                 	// #302
   491dc:	csel	w0, w9, w8, eq  // eq = none
   491e0:	ret
   491e4:	tst	w0, #0x2000
   491e8:	mov	w8, #0x7e2                 	// #2018
   491ec:	cinc	w0, w8, ne  // ne = any
   491f0:	ret
   491f4:	tbnz	w0, #18, 4a1b8 <aarch64_opcode_lookup@@Base+0x4348>
   491f8:	tst	w0, #0x80000
   491fc:	mov	w8, #0x7b7                 	// #1975
   49200:	mov	w9, #0x79a                 	// #1946
   49204:	csel	w0, w9, w8, eq  // eq = none
   49208:	ret
   4920c:	mov	w8, #0x10b                 	// #267
   49210:	mov	w9, #0x108                 	// #264
   49214:	csel	w0, w9, w8, eq  // eq = none
   49218:	ret
   4921c:	tbnz	w0, #13, 4a1c0 <aarch64_opcode_lookup@@Base+0x4350>
   49220:	tbnz	w0, #14, 4aa38 <aarch64_opcode_lookup@@Base+0x4bc8>
   49224:	tst	w0, #0x800000
   49228:	tbnz	w0, #22, 4b2c0 <aarch64_opcode_lookup@@Base+0x5450>
   4922c:	mov	w8, #0x13d                 	// #317
   49230:	mov	w9, #0x131                 	// #305
   49234:	csel	w0, w9, w8, eq  // eq = none
   49238:	ret
   4923c:	tst	w0, #0x100000
   49240:	mov	w8, #0x522                 	// #1314
   49244:	mov	w9, #0x5da                 	// #1498
   49248:	csel	w0, w9, w8, eq  // eq = none
   4924c:	ret
   49250:	tbnz	w0, #30, 4a1d4 <aarch64_opcode_lookup@@Base+0x4364>
   49254:	tst	w0, #0x800
   49258:	mov	w8, #0x6bf                 	// #1727
   4925c:	mov	w9, #0x6c5                 	// #1733
   49260:	csel	w0, w9, w8, eq  // eq = none
   49264:	ret
   49268:	tbnz	w0, #22, 4a1e4 <aarch64_opcode_lookup@@Base+0x4374>
   4926c:	mov	w0, #0x98                  	// #152
   49270:	ret
   49274:	mov	w8, #0x954                 	// #2388
   49278:	mov	w9, #0x94d                 	// #2381
   4927c:	csel	w0, w9, w8, ge  // ge = tcont
   49280:	ret
   49284:	tbnz	w0, #17, 4a3d0 <aarch64_opcode_lookup@@Base+0x4560>
   49288:	tbnz	w0, #18, 4ae00 <aarch64_opcode_lookup@@Base+0x4f90>
   4928c:	tst	w0, #0x100000
   49290:	tbnz	w0, #19, 4b5ac <aarch64_opcode_lookup@@Base+0x573c>
   49294:	mov	w8, #0x315                 	// #789
   49298:	mov	w9, #0x301                 	// #769
   4929c:	csel	w0, w9, w8, eq  // eq = none
   492a0:	ret
   492a4:	mov	w0, #0x950                 	// #2384
   492a8:	ret
   492ac:	tbnz	w0, #29, 4a3dc <aarch64_opcode_lookup@@Base+0x456c>
   492b0:	tbnz	w0, #30, 4ae08 <aarch64_opcode_lookup@@Base+0x4f98>
   492b4:	mov	w0, #0x44                  	// #68
   492b8:	ret
   492bc:	mov	w8, #0x955                 	// #2389
   492c0:	mov	w9, #0x94e                 	// #2382
   492c4:	csel	w0, w9, w8, ge  // ge = tcont
   492c8:	ret
   492cc:	tbnz	w0, #14, 4a3ec <aarch64_opcode_lookup@@Base+0x457c>
   492d0:	mov	w8, #0x50                  	// #80
   492d4:	cinc	w0, w8, ne  // ne = any
   492d8:	ret
   492dc:	tbnz	w0, #23, 4a3f8 <aarch64_opcode_lookup@@Base+0x4588>
   492e0:	mov	w0, #0x5a3                 	// #1443
   492e4:	ret
   492e8:	tbnz	w0, #29, 4a408 <aarch64_opcode_lookup@@Base+0x4598>
   492ec:	tst	w0, #0x40000000
   492f0:	mov	w8, #0x1e2                 	// #482
   492f4:	mov	w9, #0x357                 	// #855
   492f8:	csel	w0, w9, w8, eq  // eq = none
   492fc:	ret
   49300:	tbnz	w0, #23, 4a410 <aarch64_opcode_lookup@@Base+0x45a0>
   49304:	tbnz	w0, #29, 4ae1c <aarch64_opcode_lookup@@Base+0x4fac>
   49308:	cmp	w0, #0x0
   4930c:	mov	w8, #0x933                 	// #2355
   49310:	mov	w9, #0x123                 	// #291
   49314:	csel	w0, w9, w8, ge  // ge = tcont
   49318:	ret
   4931c:	tst	w0, #0x10000
   49320:	mov	w8, #0x2b8                 	// #696
   49324:	mov	w9, #0x2b0                 	// #688
   49328:	csel	w0, w9, w8, eq  // eq = none
   4932c:	ret
   49330:	tbnz	w0, #15, 4a424 <aarch64_opcode_lookup@@Base+0x45b4>
   49334:	tbnz	w0, #22, 4ae24 <aarch64_opcode_lookup@@Base+0x4fb4>
   49338:	tbnz	w0, #23, 4b5bc <aarch64_opcode_lookup@@Base+0x574c>
   4933c:	tbnz	w0, #31, 4ba04 <aarch64_opcode_lookup@@Base+0x5b94>
   49340:	tst	w0, #0x40000000
   49344:	mov	w8, #0x43d                 	// #1085
   49348:	cinc	w0, w8, ne  // ne = any
   4934c:	ret
   49350:	tbnz	w0, #23, 4a438 <aarch64_opcode_lookup@@Base+0x45c8>
   49354:	tbnz	w0, #29, 4ae40 <aarch64_opcode_lookup@@Base+0x4fd0>
   49358:	tbnz	w0, #31, 4b7b4 <aarch64_opcode_lookup@@Base+0x5944>
   4935c:	tbnz	w0, #16, 4b88c <aarch64_opcode_lookup@@Base+0x5a1c>
   49360:	mov	w0, #0x25                  	// #37
   49364:	ret
   49368:	tst	w0, #0x40000000
   4936c:	mov	w8, #0x2c6                 	// #710
   49370:	mov	w9, #0x2d8                 	// #728
   49374:	csel	w0, w9, w8, eq  // eq = none
   49378:	ret
   4937c:	mov	w8, #0x14b                 	// #331
   49380:	mov	w9, #0x143                 	// #323
   49384:	csel	w0, w9, w8, eq  // eq = none
   49388:	ret
   4938c:	tst	w0, #0x20000000
   49390:	mov	w8, #0x200                 	// #512
   49394:	mov	w9, #0x1e3                 	// #483
   49398:	csel	w0, w9, w8, eq  // eq = none
   4939c:	ret
   493a0:	mov	w0, #0x173                 	// #371
   493a4:	ret
   493a8:	tbnz	w0, #23, 4a458 <aarch64_opcode_lookup@@Base+0x45e8>
   493ac:	tbnz	w0, #29, 4ae4c <aarch64_opcode_lookup@@Base+0x4fdc>
   493b0:	mov	w0, #0x125                 	// #293
   493b4:	ret
   493b8:	tbnz	w0, #31, 4a690 <aarch64_opcode_lookup@@Base+0x4820>
   493bc:	tst	w0, #0x400
   493c0:	mov	w8, #0x824                 	// #2084
   493c4:	mov	w9, #0x822                 	// #2082
   493c8:	csel	w0, w9, w8, eq  // eq = none
   493cc:	ret
   493d0:	mov	w0, #0x239                 	// #569
   493d4:	ret
   493d8:	mov	w8, #0x61f                 	// #1567
   493dc:	mov	w9, #0x63d                 	// #1597
   493e0:	csel	w0, w9, w8, eq  // eq = none
   493e4:	ret
   493e8:	mov	w8, #0x46                  	// #70
   493ec:	cinc	w0, w8, ne  // ne = any
   493f0:	ret
   493f4:	mov	w0, #0x22b                 	// #555
   493f8:	ret
   493fc:	tbnz	w0, #14, 4a464 <aarch64_opcode_lookup@@Base+0x45f4>
   49400:	tbnz	w0, #16, 4ae60 <aarch64_opcode_lookup@@Base+0x4ff0>
   49404:	mov	w0, #0xd6                  	// #214
   49408:	ret
   4940c:	tbnz	w0, #31, 4a698 <aarch64_opcode_lookup@@Base+0x4828>
   49410:	tst	w0, #0x400
   49414:	mov	w8, #0x820                 	// #2080
   49418:	mov	w9, #0x81e                 	// #2078
   4941c:	csel	w0, w9, w8, eq  // eq = none
   49420:	ret
   49424:	tbnz	w0, #16, 4a470 <aarch64_opcode_lookup@@Base+0x4600>
   49428:	mov	w0, #0x1e4                 	// #484
   4942c:	ret
   49430:	mov	w0, #0x1ad                 	// #429
   49434:	ret
   49438:	tbnz	w0, #13, 4a48c <aarch64_opcode_lookup@@Base+0x461c>
   4943c:	mov	w8, #0x169                 	// #361
   49440:	mov	w9, #0x159                 	// #345
   49444:	csel	w0, w9, w8, eq  // eq = none
   49448:	ret
   4944c:	tbnz	w0, #31, 4a6a0 <aarch64_opcode_lookup@@Base+0x4830>
   49450:	tbnz	w0, #16, 4aa40 <aarch64_opcode_lookup@@Base+0x4bd0>
   49454:	tst	w0, #0x20000
   49458:	mov	w8, #0x977                 	// #2423
   4945c:	mov	w9, #0x815                 	// #2069
   49460:	csel	w0, w9, w8, eq  // eq = none
   49464:	ret
   49468:	tst	w0, #0x20000000
   4946c:	tbnz	w0, #23, 4a49c <aarch64_opcode_lookup@@Base+0x462c>
   49470:	mov	w8, #0x158                 	// #344
   49474:	mov	w9, #0x127                 	// #295
   49478:	csel	w0, w9, w8, eq  // eq = none
   4947c:	ret
   49480:	mov	w0, #0x225                 	// #549
   49484:	ret
   49488:	tst	w0, #0x40000000
   4948c:	mov	w8, #0x2bd                 	// #701
   49490:	mov	w9, #0x2c9                 	// #713
   49494:	csel	w0, w9, w8, eq  // eq = none
   49498:	ret
   4949c:	tbnz	w0, #22, 4a4ac <aarch64_opcode_lookup@@Base+0x463c>
   494a0:	tbnz	w0, #23, 4ae70 <aarch64_opcode_lookup@@Base+0x5000>
   494a4:	tbnz	w0, #31, 4b7bc <aarch64_opcode_lookup@@Base+0x594c>
   494a8:	tst	w0, #0x40000000
   494ac:	mov	w8, #0x449                 	// #1097
   494b0:	cinc	w0, w8, ne  // ne = any
   494b4:	ret
   494b8:	tst	w0, #0x20000000
   494bc:	tbnz	w0, #16, 4a4c8 <aarch64_opcode_lookup@@Base+0x4658>
   494c0:	tbnz	w0, #19, 4ae88 <aarch64_opcode_lookup@@Base+0x5018>
   494c4:	mov	w8, #0xf7                  	// #247
   494c8:	mov	w9, #0xc4                  	// #196
   494cc:	csel	w0, w9, w8, eq  // eq = none
   494d0:	ret
   494d4:	mov	w0, #0x2dc                 	// #732
   494d8:	ret
   494dc:	mov	w8, #0x14c                 	// #332
   494e0:	mov	w9, #0x144                 	// #324
   494e4:	csel	w0, w9, w8, eq  // eq = none
   494e8:	ret
   494ec:	tbnz	w0, #23, 4a4e0 <aarch64_opcode_lookup@@Base+0x4670>
   494f0:	mov	w0, #0x97d                 	// #2429
   494f4:	ret
   494f8:	tbnz	w0, #31, 4a6a8 <aarch64_opcode_lookup@@Base+0x4838>
   494fc:	tst	w0, #0x1000
   49500:	tbnz	w0, #10, 4aa48 <aarch64_opcode_lookup@@Base+0x4bd8>
   49504:	mov	w8, #0x8e0                 	// #2272
   49508:	mov	w9, #0x863                 	// #2147
   4950c:	csel	w0, w9, w8, eq  // eq = none
   49510:	ret
   49514:	tst	w0, #0x40000000
   49518:	mov	w8, #0x2bf                 	// #703
   4951c:	mov	w9, #0x2cd                 	// #717
   49520:	csel	w0, w9, w8, eq  // eq = none
   49524:	ret
   49528:	tbnz	w0, #16, 4a4f0 <aarch64_opcode_lookup@@Base+0x4680>
   4952c:	tst	w0, #0x20000000
   49530:	mov	w8, #0x201                 	// #513
   49534:	mov	w9, #0x1e5                 	// #485
   49538:	csel	w0, w9, w8, eq  // eq = none
   4953c:	ret
   49540:	tbnz	w0, #31, 4a6b0 <aarch64_opcode_lookup@@Base+0x4840>
   49544:	tst	w0, #0x1000
   49548:	tbnz	w0, #10, 4aa58 <aarch64_opcode_lookup@@Base+0x4be8>
   4954c:	mov	w8, #0x8e7                 	// #2279
   49550:	mov	w9, #0x86a                 	// #2154
   49554:	csel	w0, w9, w8, eq  // eq = none
   49558:	ret
   4955c:	tst	w0, #0x800000
   49560:	mov	w8, #0x766                 	// #1894
   49564:	mov	w9, #0x751                 	// #1873
   49568:	csel	w0, w9, w8, eq  // eq = none
   4956c:	ret
   49570:	mov	w8, #0x15a                 	// #346
   49574:	mov	w9, #0x129                 	// #297
   49578:	csel	w0, w9, w8, eq  // eq = none
   4957c:	ret
   49580:	mov	w0, #0x66b                 	// #1643
   49584:	ret
   49588:	tbnz	w0, #31, 4a6b8 <aarch64_opcode_lookup@@Base+0x4848>
   4958c:	mov	w0, #0x95d                 	// #2397
   49590:	ret
   49594:	tbnz	w0, #18, 4a510 <aarch64_opcode_lookup@@Base+0x46a0>
   49598:	mov	w0, #0x338                 	// #824
   4959c:	ret
   495a0:	tbnz	w0, #22, 4a528 <aarch64_opcode_lookup@@Base+0x46b8>
   495a4:	mov	w8, #0x4a                  	// #74
   495a8:	mov	w9, #0x48                  	// #72
   495ac:	csel	w0, w9, w8, eq  // eq = none
   495b0:	ret
   495b4:	tbnz	w0, #14, 4a538 <aarch64_opcode_lookup@@Base+0x46c8>
   495b8:	mov	w8, #0x52                  	// #82
   495bc:	cinc	w0, w8, ne  // ne = any
   495c0:	ret
   495c4:	tbnz	w0, #16, 4a544 <aarch64_opcode_lookup@@Base+0x46d4>
   495c8:	tbnz	w0, #19, 4ae98 <aarch64_opcode_lookup@@Base+0x5028>
   495cc:	tbnz	w0, #20, 4b5d4 <aarch64_opcode_lookup@@Base+0x5764>
   495d0:	tst	w0, #0x20000000
   495d4:	mov	w8, #0x20d                 	// #525
   495d8:	mov	w9, #0x1ef                 	// #495
   495dc:	csel	w0, w9, w8, eq  // eq = none
   495e0:	ret
   495e4:	tbnz	w0, #23, 4a55c <aarch64_opcode_lookup@@Base+0x46ec>
   495e8:	tst	w0, #0x20000000
   495ec:	mov	w8, #0x15c                 	// #348
   495f0:	mov	w9, #0x12b                 	// #299
   495f4:	csel	w0, w9, w8, eq  // eq = none
   495f8:	ret
   495fc:	tbnz	w0, #22, 4a564 <aarch64_opcode_lookup@@Base+0x46f4>
   49600:	tbnz	w0, #23, 4aeac <aarch64_opcode_lookup@@Base+0x503c>
   49604:	tbnz	w0, #31, 4b7c4 <aarch64_opcode_lookup@@Base+0x5954>
   49608:	tst	w0, #0x40000000
   4960c:	mov	w8, #0x455                 	// #1109
   49610:	cinc	w0, w8, ne  // ne = any
   49614:	ret
   49618:	tbnz	w0, #16, 4a580 <aarch64_opcode_lookup@@Base+0x4710>
   4961c:	tst	w0, #0x80000
   49620:	mov	w8, #0xc6                  	// #198
   49624:	cinc	w0, w8, ne  // ne = any
   49628:	ret
   4962c:	mov	w8, #0x14d                 	// #333
   49630:	mov	w9, #0x145                 	// #325
   49634:	csel	w0, w9, w8, eq  // eq = none
   49638:	ret
   4963c:	tbnz	w0, #16, 4a590 <aarch64_opcode_lookup@@Base+0x4720>
   49640:	tbnz	w0, #19, 4aec4 <aarch64_opcode_lookup@@Base+0x5054>
   49644:	tst	w0, #0x20000000
   49648:	tbnz	w0, #20, 4b5e8 <aarch64_opcode_lookup@@Base+0x5778>
   4964c:	mov	w8, #0x20f                 	// #527
   49650:	mov	w9, #0x1f1                 	// #497
   49654:	csel	w0, w9, w8, eq  // eq = none
   49658:	ret
   4965c:	tbnz	w0, #23, 4a5ac <aarch64_opcode_lookup@@Base+0x473c>
   49660:	tbnz	w0, #29, 4aed8 <aarch64_opcode_lookup@@Base+0x5068>
   49664:	tst	w0, #0x40000000
   49668:	mov	w8, #0x93a                 	// #2362
   4966c:	mov	w9, #0x936                 	// #2358
   49670:	csel	w0, w9, w8, eq  // eq = none
   49674:	ret
   49678:	tst	w0, #0x800000
   4967c:	mov	w8, #0x244                 	// #580
   49680:	mov	w9, #0x23e                 	// #574
   49684:	csel	w0, w9, w8, eq  // eq = none
   49688:	ret
   4968c:	mov	w8, #0x6ae                 	// #1710
   49690:	mov	w9, #0x6b2                 	// #1714
   49694:	csel	w0, w9, w8, eq  // eq = none
   49698:	ret
   4969c:	tst	w0, #0x8000
   496a0:	mov	w8, #0x228                 	// #552
   496a4:	mov	w9, #0x231                 	// #561
   496a8:	csel	w0, w9, w8, eq  // eq = none
   496ac:	ret
   496b0:	tbnz	w0, #14, 4a5c4 <aarch64_opcode_lookup@@Base+0x4754>
   496b4:	tbnz	w0, #16, 4aee0 <aarch64_opcode_lookup@@Base+0x5070>
   496b8:	tst	w0, #0x100000
   496bc:	mov	w8, #0x21                  	// #33
   496c0:	mov	w9, #0xd7                  	// #215
   496c4:	csel	w0, w9, w8, eq  // eq = none
   496c8:	ret
   496cc:	tbnz	w0, #31, 4a6cc <aarch64_opcode_lookup@@Base+0x485c>
   496d0:	tst	w0, #0x400
   496d4:	mov	w8, #0x97a                 	// #2426
   496d8:	cinc	w0, w8, eq  // eq = none
   496dc:	ret
   496e0:	tst	w0, #0x80000
   496e4:	mov	w8, #0x1f3                 	// #499
   496e8:	cinc	w0, w8, ne  // ne = any
   496ec:	ret
   496f0:	tst	w0, #0x2000
   496f4:	mov	w8, #0x163                 	// #355
   496f8:	mov	w9, #0x15b                 	// #347
   496fc:	csel	w0, w9, w8, eq  // eq = none
   49700:	ret
   49704:	tbnz	w0, #31, 4a6d4 <aarch64_opcode_lookup@@Base+0x4864>
   49708:	tst	w0, #0x10000
   4970c:	mov	w8, #0x814                 	// #2068
   49710:	mov	w9, #0x816                 	// #2070
   49714:	csel	w0, w9, w8, eq  // eq = none
   49718:	ret
   4971c:	tst	w0, #0x20000000
   49720:	tbnz	w0, #23, 4a5cc <aarch64_opcode_lookup@@Base+0x475c>
   49724:	mov	w8, #0x160                 	// #352
   49728:	mov	w9, #0x12d                 	// #301
   4972c:	csel	w0, w9, w8, eq  // eq = none
   49730:	ret
   49734:	tbnz	w0, #14, 4a5dc <aarch64_opcode_lookup@@Base+0x476c>
   49738:	mov	w0, #0x232                 	// #562
   4973c:	ret
   49740:	tst	w0, #0x40000000
   49744:	mov	w8, #0x2c1                 	// #705
   49748:	mov	w9, #0x2d6                 	// #726
   4974c:	csel	w0, w9, w8, eq  // eq = none
   49750:	ret
   49754:	tbnz	w0, #22, 4a5f0 <aarch64_opcode_lookup@@Base+0x4780>
   49758:	tbnz	w0, #23, 4aef0 <aarch64_opcode_lookup@@Base+0x5080>
   4975c:	tbnz	w0, #31, 4b7cc <aarch64_opcode_lookup@@Base+0x595c>
   49760:	tst	w0, #0x40000000
   49764:	mov	w8, #0x461                 	// #1121
   49768:	cinc	w0, w8, ne  // ne = any
   4976c:	ret
   49770:	tbnz	w0, #16, 4a60c <aarch64_opcode_lookup@@Base+0x479c>
   49774:	tbnz	w0, #19, 4af08 <aarch64_opcode_lookup@@Base+0x5098>
   49778:	tbnz	w0, #20, 4b5f4 <aarch64_opcode_lookup@@Base+0x5784>
   4977c:	tst	w0, #0x20000000
   49780:	mov	w8, #0xf9                  	// #249
   49784:	mov	w9, #0xc8                  	// #200
   49788:	csel	w0, w9, w8, eq  // eq = none
   4978c:	ret
   49790:	tst	w0, #0x4000
   49794:	mov	w8, #0x14e                 	// #334
   49798:	mov	w9, #0x146                 	// #326
   4979c:	csel	w0, w9, w8, eq  // eq = none
   497a0:	ret
   497a4:	tbnz	w0, #31, 4a6dc <aarch64_opcode_lookup@@Base+0x486c>
   497a8:	tst	w0, #0x1000
   497ac:	tbnz	w0, #10, 4aa68 <aarch64_opcode_lookup@@Base+0x4bf8>
   497b0:	mov	w8, #0x8e1                 	// #2273
   497b4:	mov	w9, #0x864                 	// #2148
   497b8:	csel	w0, w9, w8, eq  // eq = none
   497bc:	ret
   497c0:	mov	w0, #0x2c3                 	// #707
   497c4:	ret
   497c8:	tbnz	w0, #16, 4a624 <aarch64_opcode_lookup@@Base+0x47b4>
   497cc:	tst	w0, #0x20000000
   497d0:	tbnz	w0, #23, 4af1c <aarch64_opcode_lookup@@Base+0x50ac>
   497d4:	mov	w8, #0x21e                 	// #542
   497d8:	cinc	w0, w8, eq  // eq = none
   497dc:	ret
   497e0:	tbnz	w0, #31, 4a6e4 <aarch64_opcode_lookup@@Base+0x4874>
   497e4:	tst	w0, #0x1000
   497e8:	tbnz	w0, #10, 4aa78 <aarch64_opcode_lookup@@Base+0x4c08>
   497ec:	mov	w8, #0x8e8                 	// #2280
   497f0:	mov	w9, #0x86b                 	// #2155
   497f4:	csel	w0, w9, w8, eq  // eq = none
   497f8:	ret
   497fc:	tbnz	w0, #23, 4a634 <aarch64_opcode_lookup@@Base+0x47c4>
   49800:	mov	w0, #0x97c                 	// #2428
   49804:	ret
   49808:	mov	w8, #0x782                 	// #1922
   4980c:	mov	w9, #0x77e                 	// #1918
   49810:	csel	w0, w9, w8, eq  // eq = none
   49814:	ret
   49818:	tbnz	w0, #23, 4a644 <aarch64_opcode_lookup@@Base+0x47d4>
   4981c:	tst	w0, #0x20000000
   49820:	mov	w8, #0x162                 	// #354
   49824:	mov	w9, #0x12f                 	// #303
   49828:	csel	w0, w9, w8, eq  // eq = none
   4982c:	ret
   49830:	tbnz	w0, #31, 4a6ec <aarch64_opcode_lookup@@Base+0x487c>
   49834:	tbnz	w0, #10, 4aa88 <aarch64_opcode_lookup@@Base+0x4c18>
   49838:	tbnz	w0, #12, 4b2d0 <aarch64_opcode_lookup@@Base+0x5460>
   4983c:	mov	w0, #0x887                 	// #2183
   49840:	ret
   49844:	tbnz	w0, #31, 4a6f4 <aarch64_opcode_lookup@@Base+0x4884>
   49848:	mov	w0, #0x95e                 	// #2398
   4984c:	ret
   49850:	mov	w0, #0x3a1                 	// #929
   49854:	ret
   49858:	tst	w0, #0x2000
   4985c:	mov	w8, #0x687                 	// #1671
   49860:	mov	w9, #0x623                 	// #1571
   49864:	csel	w0, w9, w8, eq  // eq = none
   49868:	ret
   4986c:	mov	w0, #0x396                 	// #918
   49870:	ret
   49874:	mov	w0, #0x38c                 	// #908
   49878:	ret
   4987c:	tst	w0, #0x400000
   49880:	mov	w8, #0x4a7                 	// #1191
   49884:	mov	w9, #0x2f0                 	// #752
   49888:	csel	w0, w9, w8, eq  // eq = none
   4988c:	ret
   49890:	tst	w0, #0x2000
   49894:	mov	w8, #0x69a                 	// #1690
   49898:	mov	w9, #0x636                 	// #1590
   4989c:	csel	w0, w9, w8, eq  // eq = none
   498a0:	ret
   498a4:	mov	w0, #0x639                 	// #1593
   498a8:	ret
   498ac:	mov	w0, #0x75f                 	// #1887
   498b0:	ret
   498b4:	mov	w0, #0x6e5                 	// #1765
   498b8:	ret
   498bc:	tst	w0, #0x400000
   498c0:	mov	w8, #0x6ed                 	// #1773
   498c4:	mov	w9, #0x664                 	// #1636
   498c8:	csel	w0, w9, w8, eq  // eq = none
   498cc:	ret
   498d0:	mov	w8, #0x68f                 	// #1679
   498d4:	mov	w9, #0x683                 	// #1667
   498d8:	csel	w0, w9, w8, eq  // eq = none
   498dc:	ret
   498e0:	mov	w8, #0x5f9                 	// #1529
   498e4:	mov	w9, #0x5e3                 	// #1507
   498e8:	csel	w0, w9, w8, eq  // eq = none
   498ec:	ret
   498f0:	mov	w8, #0x678                 	// #1656
   498f4:	mov	w9, #0x663                 	// #1635
   498f8:	csel	w0, w9, w8, eq  // eq = none
   498fc:	ret
   49900:	mov	w8, #0x64a                 	// #1610
   49904:	mov	w9, #0x64e                 	// #1614
   49908:	csel	w0, w9, w8, eq  // eq = none
   4990c:	ret
   49910:	mov	w8, #0x652                 	// #1618
   49914:	mov	w9, #0x656                 	// #1622
   49918:	csel	w0, w9, w8, eq  // eq = none
   4991c:	ret
   49920:	mov	w8, #0x5f4                 	// #1524
   49924:	mov	w9, #0x5e0                 	// #1504
   49928:	csel	w0, w9, w8, eq  // eq = none
   4992c:	ret
   49930:	mov	w8, #0x672                 	// #1650
   49934:	mov	w9, #0x65f                 	// #1631
   49938:	csel	w0, w9, w8, eq  // eq = none
   4993c:	ret
   49940:	mov	w0, #0x63c                 	// #1596
   49944:	ret
   49948:	tst	w0, #0x200000
   4994c:	mov	w8, #0x6e6                 	// #1766
   49950:	mov	w9, #0x61b                 	// #1563
   49954:	csel	w0, w9, w8, eq  // eq = none
   49958:	ret
   4995c:	mov	w8, #0x8c2                 	// #2242
   49960:	mov	w9, #0x8bf                 	// #2239
   49964:	csel	w0, w9, w8, eq  // eq = none
   49968:	ret
   4996c:	mov	w0, #0x930                 	// #2352
   49970:	ret
   49974:	mov	w0, #0x6a2                 	// #1698
   49978:	ret
   4997c:	mov	w0, #0x3a2                 	// #930
   49980:	ret
   49984:	tst	w0, #0x2000
   49988:	mov	w8, #0x67b                 	// #1659
   4998c:	mov	w9, #0x617                 	// #1559
   49990:	csel	w0, w9, w8, eq  // eq = none
   49994:	ret
   49998:	mov	w0, #0x397                 	// #919
   4999c:	ret
   499a0:	mov	w0, #0x38d                 	// #909
   499a4:	ret
   499a8:	tst	w0, #0x2000
   499ac:	mov	w8, #0x67f                 	// #1663
   499b0:	mov	w9, #0x619                 	// #1561
   499b4:	csel	w0, w9, w8, eq  // eq = none
   499b8:	ret
   499bc:	mov	w0, #0x626                 	// #1574
   499c0:	ret
   499c4:	mov	w0, #0x68c                 	// #1676
   499c8:	ret
   499cc:	mov	w0, #0x5f6                 	// #1526
   499d0:	ret
   499d4:	mov	w0, #0x675                 	// #1653
   499d8:	ret
   499dc:	tst	w0, #0x400000
   499e0:	mov	w8, #0x5ed                 	// #1517
   499e4:	mov	w9, #0x5ef                 	// #1519
   499e8:	csel	w0, w9, w8, eq  // eq = none
   499ec:	ret
   499f0:	mov	w0, #0x763                 	// #1891
   499f4:	ret
   499f8:	mov	w8, #0x5ee                 	// #1518
   499fc:	mov	w9, #0x63e                 	// #1598
   49a00:	csel	w0, w9, w8, eq  // eq = none
   49a04:	ret
   49a08:	tbnz	w0, #22, 4a708 <aarch64_opcode_lookup@@Base+0x4898>
   49a0c:	mov	w8, #0x6b1                 	// #1713
   49a10:	mov	w9, #0x6a4                 	// #1700
   49a14:	csel	w0, w9, w8, eq  // eq = none
   49a18:	ret
   49a1c:	mov	w8, #0x5ec                 	// #1516
   49a20:	mov	w9, #0x63a                 	// #1594
   49a24:	csel	w0, w9, w8, eq  // eq = none
   49a28:	ret
   49a2c:	mov	w8, #0x759                 	// #1881
   49a30:	mov	w9, #0x771                 	// #1905
   49a34:	csel	w0, w9, w8, eq  // eq = none
   49a38:	ret
   49a3c:	mov	w8, #0x64d                 	// #1613
   49a40:	mov	w9, #0x649                 	// #1609
   49a44:	csel	w0, w9, w8, eq  // eq = none
   49a48:	ret
   49a4c:	mov	w8, #0x77f                 	// #1919
   49a50:	mov	w9, #0x783                 	// #1923
   49a54:	csel	w0, w9, w8, eq  // eq = none
   49a58:	ret
   49a5c:	mov	w8, #0x669                 	// #1641
   49a60:	mov	w9, #0x6a0                 	// #1696
   49a64:	csel	w0, w9, w8, eq  // eq = none
   49a68:	ret
   49a6c:	mov	w0, #0x773                 	// #1907
   49a70:	ret
   49a74:	tbnz	w0, #22, 4a718 <aarch64_opcode_lookup@@Base+0x48a8>
   49a78:	mov	w8, #0x6a9                 	// #1705
   49a7c:	mov	w9, #0x6a5                 	// #1701
   49a80:	csel	w0, w9, w8, eq  // eq = none
   49a84:	ret
   49a88:	mov	w8, #0x62c                 	// #1580
   49a8c:	mov	w9, #0x629                 	// #1577
   49a90:	csel	w0, w9, w8, eq  // eq = none
   49a94:	ret
   49a98:	mov	w8, #0x5f3                 	// #1523
   49a9c:	mov	w9, #0x5df                 	// #1503
   49aa0:	csel	w0, w9, w8, eq  // eq = none
   49aa4:	ret
   49aa8:	mov	w8, #0x64c                 	// #1612
   49aac:	mov	w9, #0x648                 	// #1608
   49ab0:	csel	w0, w9, w8, eq  // eq = none
   49ab4:	ret
   49ab8:	mov	w0, #0x8c4                 	// #2244
   49abc:	ret
   49ac0:	mov	w8, #0x670                 	// #1648
   49ac4:	mov	w9, #0x65d                 	// #1629
   49ac8:	csel	w0, w9, w8, eq  // eq = none
   49acc:	ret
   49ad0:	tst	w0, #0x800000
   49ad4:	tbnz	w0, #22, 4a728 <aarch64_opcode_lookup@@Base+0x48b8>
   49ad8:	mov	w8, #0x790                 	// #1936
   49adc:	mov	w9, #0x794                 	// #1940
   49ae0:	csel	w0, w9, w8, eq  // eq = none
   49ae4:	ret
   49ae8:	mov	w8, #0x787                 	// #1927
   49aec:	mov	w9, #0x78b                 	// #1931
   49af0:	csel	w0, w9, w8, eq  // eq = none
   49af4:	ret
   49af8:	tst	w0, #0x800000
   49afc:	tbnz	w0, #22, 4a738 <aarch64_opcode_lookup@@Base+0x48c8>
   49b00:	mov	w8, #0x778                 	// #1912
   49b04:	mov	w9, #0x77c                 	// #1916
   49b08:	csel	w0, w9, w8, eq  // eq = none
   49b0c:	ret
   49b10:	tst	w0, #0x800000
   49b14:	mov	w8, #0x758                 	// #1880
   49b18:	mov	w9, #0x76f                 	// #1903
   49b1c:	csel	w0, w9, w8, eq  // eq = none
   49b20:	ret
   49b24:	mov	w8, #0x64b                 	// #1611
   49b28:	mov	w9, #0x64f                 	// #1615
   49b2c:	csel	w0, w9, w8, eq  // eq = none
   49b30:	ret
   49b34:	mov	w8, #0x653                 	// #1619
   49b38:	mov	w9, #0x657                 	// #1623
   49b3c:	csel	w0, w9, w8, eq  // eq = none
   49b40:	ret
   49b44:	mov	w8, #0x654                 	// #1620
   49b48:	mov	w9, #0x650                 	// #1616
   49b4c:	csel	w0, w9, w8, eq  // eq = none
   49b50:	ret
   49b54:	mov	w8, #0x655                 	// #1621
   49b58:	mov	w9, #0x651                 	// #1617
   49b5c:	csel	w0, w9, w8, eq  // eq = none
   49b60:	ret
   49b64:	tst	w0, #0x200000
   49b68:	mov	w8, #0x627                 	// #1575
   49b6c:	cinc	w0, w8, ne  // ne = any
   49b70:	ret
   49b74:	mov	w8, #0x781                 	// #1921
   49b78:	mov	w9, #0x77d                 	// #1917
   49b7c:	csel	w0, w9, w8, eq  // eq = none
   49b80:	ret
   49b84:	mov	w0, #0x931                 	// #2353
   49b88:	ret
   49b8c:	tbnz	w0, #18, 4aa9c <aarch64_opcode_lookup@@Base+0x4c2c>
   49b90:	tbnz	w0, #19, 4b2e4 <aarch64_opcode_lookup@@Base+0x5474>
   49b94:	mov	w0, #0x725                 	// #1829
   49b98:	ret
   49b9c:	tbnz	w0, #14, 4aaa4 <aarch64_opcode_lookup@@Base+0x4c34>
   49ba0:	mov	w8, #0x30                  	// #48
   49ba4:	cinc	w0, w8, ne  // ne = any
   49ba8:	ret
   49bac:	tst	w0, #0x100000
   49bb0:	tbnz	w0, #16, 4aab0 <aarch64_opcode_lookup@@Base+0x4c40>
   49bb4:	mov	w8, #0x6df                 	// #1759
   49bb8:	mov	w9, #0x721                 	// #1825
   49bbc:	csel	w0, w9, w8, eq  // eq = none
   49bc0:	ret
   49bc4:	mov	w8, #0x906                 	// #2310
   49bc8:	mov	w9, #0x8d1                 	// #2257
   49bcc:	csel	w0, w9, w8, eq  // eq = none
   49bd0:	ret
   49bd4:	tst	w0, #0x10
   49bd8:	mov	w8, #0x71d                 	// #1821
   49bdc:	mov	w9, #0x55c                 	// #1372
   49be0:	csel	w0, w9, w8, eq  // eq = none
   49be4:	ret
   49be8:	tbnz	w0, #10, 4aac0 <aarch64_opcode_lookup@@Base+0x4c50>
   49bec:	tst	w0, #0x800
   49bf0:	mov	w8, #0x733                 	// #1843
   49bf4:	mov	w9, #0x731                 	// #1841
   49bf8:	csel	w0, w9, w8, eq  // eq = none
   49bfc:	ret
   49c00:	tbnz	w0, #10, 4aac8 <aarch64_opcode_lookup@@Base+0x4c58>
   49c04:	tbnz	w0, #11, 4b2f8 <aarch64_opcode_lookup@@Base+0x5488>
   49c08:	mov	w0, #0x967                 	// #2407
   49c0c:	ret
   49c10:	tbnz	w0, #19, 4aad4 <aarch64_opcode_lookup@@Base+0x4c64>
   49c14:	tbnz	w0, #20, 4b30c <aarch64_opcode_lookup@@Base+0x549c>
   49c18:	mov	w0, #0x50d                 	// #1293
   49c1c:	ret
   49c20:	tbnz	w0, #18, 4aaec <aarch64_opcode_lookup@@Base+0x4c7c>
   49c24:	mov	w8, #0x540                 	// #1344
   49c28:	mov	w9, #0x79f                 	// #1951
   49c2c:	csel	w0, w9, w8, eq  // eq = none
   49c30:	ret
   49c34:	mov	w8, #0x908                 	// #2312
   49c38:	mov	w9, #0x8d3                 	// #2259
   49c3c:	csel	w0, w9, w8, eq  // eq = none
   49c40:	ret
   49c44:	mov	w0, #0x5c6                 	// #1478
   49c48:	ret
   49c4c:	tbnz	w0, #12, 4aafc <aarch64_opcode_lookup@@Base+0x4c8c>
   49c50:	tst	w0, #0x400000
   49c54:	mov	w8, #0x840                 	// #2112
   49c58:	mov	w9, #0x91b                 	// #2331
   49c5c:	csel	w0, w9, w8, eq  // eq = none
   49c60:	ret
   49c64:	tst	w0, #0x800000
   49c68:	mov	w8, #0x134                 	// #308
   49c6c:	mov	w9, #0x124                 	// #292
   49c70:	csel	w0, w9, w8, eq  // eq = none
   49c74:	ret
   49c78:	tst	w0, #0x2000
   49c7c:	mov	w8, #0x7a2                 	// #1954
   49c80:	cinc	w0, w8, ne  // ne = any
   49c84:	ret
   49c88:	mov	w0, #0x745                 	// #1861
   49c8c:	ret
   49c90:	tst	w0, #0x1000
   49c94:	mov	w8, #0x5b4                 	// #1460
   49c98:	mov	w9, #0x5a7                 	// #1447
   49c9c:	csel	w0, w9, w8, eq  // eq = none
   49ca0:	ret
   49ca4:	tst	w0, #0x400000
   49ca8:	mov	w8, #0x803                 	// #2051
   49cac:	mov	w9, #0x80e                 	// #2062
   49cb0:	csel	w0, w9, w8, eq  // eq = none
   49cb4:	ret
   49cb8:	tbnz	w0, #12, 4ab04 <aarch64_opcode_lookup@@Base+0x4c94>
   49cbc:	mov	w0, #0x8ba                 	// #2234
   49cc0:	ret
   49cc4:	tbnz	w0, #22, 4ab1c <aarch64_opcode_lookup@@Base+0x4cac>
   49cc8:	tst	w0, #0x800000
   49ccc:	mov	w8, #0x708                 	// #1800
   49cd0:	mov	w9, #0x4fe                 	// #1278
   49cd4:	csel	w0, w9, w8, eq  // eq = none
   49cd8:	ret
   49cdc:	mov	w0, #0x869                 	// #2153
   49ce0:	ret
   49ce4:	mov	w8, #0x920                 	// #2336
   49ce8:	mov	w9, #0x902                 	// #2306
   49cec:	csel	w0, w9, w8, eq  // eq = none
   49cf0:	ret
   49cf4:	mov	w0, #0x728                 	// #1832
   49cf8:	ret
   49cfc:	mov	w0, #0x85c                 	// #2140
   49d00:	ret
   49d04:	tbnz	w0, #12, 4ab24 <aarch64_opcode_lookup@@Base+0x4cb4>
   49d08:	mov	w0, #0x84a                 	// #2122
   49d0c:	ret
   49d10:	tbnz	w0, #20, 4ab38 <aarch64_opcode_lookup@@Base+0x4cc8>
   49d14:	tbnz	w0, #17, 4b320 <aarch64_opcode_lookup@@Base+0x54b0>
   49d18:	tbnz	w0, #18, 4b89c <aarch64_opcode_lookup@@Base+0x5a2c>
   49d1c:	tst	w0, #0x400000
   49d20:	mov	w8, #0x57b                 	// #1403
   49d24:	mov	w9, #0x579                 	// #1401
   49d28:	csel	w0, w9, w8, eq  // eq = none
   49d2c:	ret
   49d30:	mov	w8, #0x848                 	// #2120
   49d34:	mov	w9, #0x8b5                 	// #2229
   49d38:	csel	w0, w9, w8, eq  // eq = none
   49d3c:	ret
   49d40:	mov	w8, #0x117                 	// #279
   49d44:	mov	w9, #0x10f                 	// #271
   49d48:	csel	w0, w9, w8, eq  // eq = none
   49d4c:	ret
   49d50:	tbnz	w0, #12, 4ab50 <aarch64_opcode_lookup@@Base+0x4ce0>
   49d54:	mov	w0, #0x8c9                 	// #2249
   49d58:	ret
   49d5c:	tst	w0, #0x400000
   49d60:	mov	w8, #0x85d                 	// #2141
   49d64:	cinc	w0, w8, ne  // ne = any
   49d68:	ret
   49d6c:	tst	w0, #0x800000
   49d70:	mov	w8, #0x136                 	// #310
   49d74:	mov	w9, #0x126                 	// #294
   49d78:	csel	w0, w9, w8, eq  // eq = none
   49d7c:	ret
   49d80:	mov	w8, #0x87e                 	// #2174
   49d84:	mov	w9, #0x7b1                 	// #1969
   49d88:	csel	w0, w9, w8, eq  // eq = none
   49d8c:	ret
   49d90:	tbnz	w0, #11, 4ab74 <aarch64_opcode_lookup@@Base+0x4d04>
   49d94:	mov	w8, #0x7ea                 	// #2026
   49d98:	cinc	w0, w8, ne  // ne = any
   49d9c:	ret
   49da0:	mov	w8, #0x844                 	// #2116
   49da4:	mov	w9, #0x8a0                 	// #2208
   49da8:	csel	w0, w9, w8, eq  // eq = none
   49dac:	ret
   49db0:	mov	w8, #0x8e2                 	// #2274
   49db4:	mov	w9, #0x8dc                 	// #2268
   49db8:	csel	w0, w9, w8, eq  // eq = none
   49dbc:	ret
   49dc0:	mov	w0, #0x512                 	// #1298
   49dc4:	ret
   49dc8:	mov	w8, #0x95a                 	// #2394
   49dcc:	mov	w9, #0x87d                 	// #2173
   49dd0:	csel	w0, w9, w8, eq  // eq = none
   49dd4:	ret
   49dd8:	mov	w8, #0x8f0                 	// #2288
   49ddc:	mov	w9, #0x89e                 	// #2206
   49de0:	csel	w0, w9, w8, eq  // eq = none
   49de4:	ret
   49de8:	tbnz	w0, #18, 4ab80 <aarch64_opcode_lookup@@Base+0x4d10>
   49dec:	mov	w0, #0x56d                 	// #1389
   49df0:	ret
   49df4:	tbnz	w0, #11, 4ab94 <aarch64_opcode_lookup@@Base+0x4d24>
   49df8:	tst	w0, #0x1000
   49dfc:	mov	w8, #0x8af                 	// #2223
   49e00:	mov	w9, #0x8ad                 	// #2221
   49e04:	csel	w0, w9, w8, eq  // eq = none
   49e08:	ret
   49e0c:	mov	w8, #0x846                 	// #2118
   49e10:	mov	w9, #0x842                 	// #2114
   49e14:	csel	w0, w9, w8, eq  // eq = none
   49e18:	ret
   49e1c:	mov	w8, #0x836                 	// #2102
   49e20:	mov	w9, #0x894                 	// #2196
   49e24:	csel	w0, w9, w8, eq  // eq = none
   49e28:	ret
   49e2c:	mov	w0, #0x898                 	// #2200
   49e30:	ret
   49e34:	tbnz	w0, #14, 4ab9c <aarch64_opcode_lookup@@Base+0x4d2c>
   49e38:	tbnz	w0, #16, 4b338 <aarch64_opcode_lookup@@Base+0x54c8>
   49e3c:	mov	w0, #0xa4                  	// #164
   49e40:	ret
   49e44:	tbnz	w0, #18, 4abb4 <aarch64_opcode_lookup@@Base+0x4d44>
   49e48:	tst	w0, #0x80000
   49e4c:	mov	w8, #0x51e                 	// #1310
   49e50:	mov	w9, #0x5d9                 	// #1497
   49e54:	csel	w0, w9, w8, eq  // eq = none
   49e58:	ret
   49e5c:	tbnz	w0, #19, 4abbc <aarch64_opcode_lookup@@Base+0x4d4c>
   49e60:	tst	w0, #0x40000000
   49e64:	mov	w8, #0x8fc                 	// #2300
   49e68:	mov	w9, #0x6c9                 	// #1737
   49e6c:	csel	w0, w9, w8, eq  // eq = none
   49e70:	ret
   49e74:	mov	w0, #0x501                 	// #1281
   49e78:	ret
   49e7c:	tbnz	w0, #22, 4abd4 <aarch64_opcode_lookup@@Base+0x4d64>
   49e80:	mov	w0, #0x734                 	// #1844
   49e84:	ret
   49e88:	tbnz	w0, #20, 4abe8 <aarch64_opcode_lookup@@Base+0x4d78>
   49e8c:	tbnz	w0, #22, 4b348 <aarch64_opcode_lookup@@Base+0x54d8>
   49e90:	mov	w8, #0x736                 	// #1846
   49e94:	mov	w9, #0x72a                 	// #1834
   49e98:	csel	w0, w9, w8, eq  // eq = none
   49e9c:	ret
   49ea0:	mov	w0, #0x922                 	// #2338
   49ea4:	ret
   49ea8:	mov	w8, #0x7a4                 	// #1956
   49eac:	cinc	w0, w8, ne  // ne = any
   49eb0:	ret
   49eb4:	mov	w0, #0x7bc                 	// #1980
   49eb8:	ret
   49ebc:	mov	w8, #0x118                 	// #280
   49ec0:	mov	w9, #0x110                 	// #272
   49ec4:	csel	w0, w9, w8, eq  // eq = none
   49ec8:	ret
   49ecc:	mov	w0, #0x548                 	// #1352
   49ed0:	ret
   49ed4:	tst	w0, #0x400000
   49ed8:	mov	w8, #0x860                 	// #2144
   49edc:	cinc	w0, w8, ne  // ne = any
   49ee0:	ret
   49ee4:	mov	w0, #0x970                 	// #2416
   49ee8:	ret
   49eec:	tst	w0, #0x10
   49ef0:	mov	w8, #0x6d2                 	// #1746
   49ef4:	mov	w9, #0x6d5                 	// #1749
   49ef8:	csel	w0, w9, w8, eq  // eq = none
   49efc:	ret
   49f00:	tst	w0, #0x200
   49f04:	mov	w8, #0x6d3                 	// #1747
   49f08:	mov	w9, #0x6d9                 	// #1753
   49f0c:	csel	w0, w9, w8, eq  // eq = none
   49f10:	ret
   49f14:	tbnz	w0, #11, 4abfc <aarch64_opcode_lookup@@Base+0x4d8c>
   49f18:	tst	w0, #0x400000
   49f1c:	tbnz	w0, #12, 4b358 <aarch64_opcode_lookup@@Base+0x54e8>
   49f20:	mov	w8, #0x7b2                 	// #1970
   49f24:	cinc	w0, w8, ne  // ne = any
   49f28:	ret
   49f2c:	tbnz	w0, #12, 4ac10 <aarch64_opcode_lookup@@Base+0x4da0>
   49f30:	mov	w8, #0x878                 	// #2168
   49f34:	cinc	w0, w8, ne  // ne = any
   49f38:	ret
   49f3c:	mov	w8, #0x88d                 	// #2189
   49f40:	cinc	w0, w8, ne  // ne = any
   49f44:	ret
   49f48:	tbnz	w0, #18, 4ac1c <aarch64_opcode_lookup@@Base+0x4dac>
   49f4c:	tst	w0, #0x100000
   49f50:	tbnz	w0, #19, 4b364 <aarch64_opcode_lookup@@Base+0x54f4>
   49f54:	mov	w8, #0x7ba                 	// #1978
   49f58:	mov	w9, #0x79b                 	// #1947
   49f5c:	csel	w0, w9, w8, eq  // eq = none
   49f60:	ret
   49f64:	tbnz	w0, #14, 4ac24 <aarch64_opcode_lookup@@Base+0x4db4>
   49f68:	mov	w8, #0x32                  	// #50
   49f6c:	cinc	w0, w8, ne  // ne = any
   49f70:	ret
   49f74:	mov	w0, #0x7b9                 	// #1977
   49f78:	ret
   49f7c:	mov	w8, #0x907                 	// #2311
   49f80:	mov	w9, #0x8d2                 	// #2258
   49f84:	csel	w0, w9, w8, eq  // eq = none
   49f88:	ret
   49f8c:	tst	w0, #0x20000
   49f90:	mov	w8, #0x7c7                 	// #1991
   49f94:	mov	w9, #0x7d5                 	// #2005
   49f98:	csel	w0, w9, w8, eq  // eq = none
   49f9c:	ret
   49fa0:	tbnz	w0, #19, 4ac30 <aarch64_opcode_lookup@@Base+0x4dc0>
   49fa4:	tbnz	w0, #20, 4b374 <aarch64_opcode_lookup@@Base+0x5504>
   49fa8:	tst	w0, #0x40000000
   49fac:	mov	w8, #0x8b3                 	// #2227
   49fb0:	mov	w9, #0x8a2                 	// #2210
   49fb4:	csel	w0, w9, w8, eq  // eq = none
   49fb8:	ret
   49fbc:	tbnz	w0, #18, 4ac44 <aarch64_opcode_lookup@@Base+0x4dd4>
   49fc0:	tst	w0, #0x80000
   49fc4:	mov	w8, #0x53f                 	// #1343
   49fc8:	mov	w9, #0x7de                 	// #2014
   49fcc:	csel	w0, w9, w8, eq  // eq = none
   49fd0:	ret
   49fd4:	mov	w8, #0x909                 	// #2313
   49fd8:	mov	w9, #0x8d4                 	// #2260
   49fdc:	csel	w0, w9, w8, eq  // eq = none
   49fe0:	ret
   49fe4:	tbnz	w0, #17, 4ac4c <aarch64_opcode_lookup@@Base+0x4ddc>
   49fe8:	tst	w0, #0x100000
   49fec:	tbnz	w0, #18, 4b37c <aarch64_opcode_lookup@@Base+0x550c>
   49ff0:	mov	w8, #0x5c3                 	// #1475
   49ff4:	mov	w9, #0x5bf                 	// #1471
   49ff8:	csel	w0, w9, w8, eq  // eq = none
   49ffc:	ret
   4a000:	tbnz	w0, #12, 4ac60 <aarch64_opcode_lookup@@Base+0x4df0>
   4a004:	tst	w0, #0x400000
   4a008:	mov	w8, #0x841                 	// #2113
   4a00c:	mov	w9, #0x91c                 	// #2332
   4a010:	csel	w0, w9, w8, eq  // eq = none
   4a014:	ret
   4a018:	mov	w0, #0x7d9                 	// #2009
   4a01c:	ret
   4a020:	tst	w0, #0x1000
   4a024:	mov	w8, #0x5be                 	// #1470
   4a028:	mov	w9, #0x5c7                 	// #1479
   4a02c:	csel	w0, w9, w8, eq  // eq = none
   4a030:	ret
   4a034:	tst	w0, #0x800000
   4a038:	tbnz	w0, #22, 4ac68 <aarch64_opcode_lookup@@Base+0x4df8>
   4a03c:	mov	w8, #0x806                 	// #2054
   4a040:	mov	w9, #0x804                 	// #2052
   4a044:	csel	w0, w9, w8, eq  // eq = none
   4a048:	ret
   4a04c:	tbnz	w0, #10, 4ac78 <aarch64_opcode_lookup@@Base+0x4e08>
   4a050:	tst	w0, #0x1000
   4a054:	mov	w8, #0x705                 	// #1797
   4a058:	mov	w9, #0x701                 	// #1793
   4a05c:	csel	w0, w9, w8, eq  // eq = none
   4a060:	ret
   4a064:	mov	w0, #0x8e6                 	// #2278
   4a068:	ret
   4a06c:	mov	w0, #0x903                 	// #2307
   4a070:	ret
   4a074:	mov	w0, #0x8d9                 	// #2265
   4a078:	ret
   4a07c:	tst	w0, #0x10000
   4a080:	mov	w8, #0x873                 	// #2163
   4a084:	mov	w9, #0x807                 	// #2055
   4a088:	csel	w0, w9, w8, eq  // eq = none
   4a08c:	ret
   4a090:	tbnz	w0, #18, 4ac80 <aarch64_opcode_lookup@@Base+0x4e10>
   4a094:	tst	w0, #0x100000
   4a098:	tbnz	w0, #19, 4b38c <aarch64_opcode_lookup@@Base+0x551c>
   4a09c:	mov	w8, #0x7a8                 	// #1960
   4a0a0:	mov	w9, #0x5bc                 	// #1468
   4a0a4:	csel	w0, w9, w8, eq  // eq = none
   4a0a8:	ret
   4a0ac:	mov	w8, #0x8cb                 	// #2251
   4a0b0:	mov	w9, #0x901                 	// #2305
   4a0b4:	csel	w0, w9, w8, eq  // eq = none
   4a0b8:	ret
   4a0bc:	mov	w8, #0x119                 	// #281
   4a0c0:	mov	w9, #0x111                 	// #273
   4a0c4:	csel	w0, w9, w8, eq  // eq = none
   4a0c8:	ret
   4a0cc:	tst	w0, #0x400000
   4a0d0:	mov	w8, #0x8da                 	// #2266
   4a0d4:	cinc	w0, w8, ne  // ne = any
   4a0d8:	ret
   4a0dc:	tbnz	w0, #11, 4ac90 <aarch64_opcode_lookup@@Base+0x4e20>
   4a0e0:	mov	w8, #0x7e4                 	// #2020
   4a0e4:	cinc	w0, w8, ne  // ne = any
   4a0e8:	ret
   4a0ec:	mov	w8, #0x845                 	// #2117
   4a0f0:	mov	w9, #0x8a1                 	// #2209
   4a0f4:	csel	w0, w9, w8, eq  // eq = none
   4a0f8:	ret
   4a0fc:	mov	w8, #0x8e5                 	// #2277
   4a100:	mov	w9, #0x8df                 	// #2271
   4a104:	csel	w0, w9, w8, eq  // eq = none
   4a108:	ret
   4a10c:	mov	w0, #0x881                 	// #2177
   4a110:	ret
   4a114:	mov	w8, #0x8f1                 	// #2289
   4a118:	mov	w9, #0x89f                 	// #2207
   4a11c:	csel	w0, w9, w8, eq  // eq = none
   4a120:	ret
   4a124:	tbnz	w0, #18, 4ac9c <aarch64_opcode_lookup@@Base+0x4e2c>
   4a128:	mov	w0, #0x575                 	// #1397
   4a12c:	ret
   4a130:	mov	w8, #0x847                 	// #2119
   4a134:	mov	w9, #0x843                 	// #2115
   4a138:	csel	w0, w9, w8, eq  // eq = none
   4a13c:	ret
   4a140:	tbnz	w0, #14, 4acb0 <aarch64_opcode_lookup@@Base+0x4e40>
   4a144:	tst	w0, #0x100000
   4a148:	mov	w8, #0x1d                  	// #29
   4a14c:	mov	w9, #0xa5                  	// #165
   4a150:	csel	w0, w9, w8, eq  // eq = none
   4a154:	ret
   4a158:	tbnz	w0, #18, 4acc8 <aarch64_opcode_lookup@@Base+0x4e58>
   4a15c:	tst	w0, #0x80000
   4a160:	mov	w8, #0x521                 	// #1313
   4a164:	mov	w9, #0x5db                 	// #1499
   4a168:	csel	w0, w9, w8, eq  // eq = none
   4a16c:	ret
   4a170:	tbnz	w0, #19, 4acd0 <aarch64_opcode_lookup@@Base+0x4e60>
   4a174:	tst	w0, #0x40000000
   4a178:	tbnz	w0, #20, 4b39c <aarch64_opcode_lookup@@Base+0x552c>
   4a17c:	mov	w8, #0x8fe                 	// #2302
   4a180:	mov	w9, #0x8f2                 	// #2290
   4a184:	csel	w0, w9, w8, eq  // eq = none
   4a188:	ret
   4a18c:	mov	w0, #0x6cd                 	// #1741
   4a190:	ret
   4a194:	tbnz	w0, #22, 4ace8 <aarch64_opcode_lookup@@Base+0x4e78>
   4a198:	mov	w0, #0x7c8                 	// #1992
   4a19c:	ret
   4a1a0:	tbnz	w0, #20, 4acfc <aarch64_opcode_lookup@@Base+0x4e8c>
   4a1a4:	tbnz	w0, #22, 4b3ac <aarch64_opcode_lookup@@Base+0x553c>
   4a1a8:	mov	w8, #0x7c9                 	// #1993
   4a1ac:	mov	w9, #0x7bd                 	// #1981
   4a1b0:	csel	w0, w9, w8, eq  // eq = none
   4a1b4:	ret
   4a1b8:	mov	w0, #0x7da                 	// #2010
   4a1bc:	ret
   4a1c0:	tst	w0, #0x4000
   4a1c4:	mov	w8, #0x11a                 	// #282
   4a1c8:	mov	w9, #0x112                 	// #274
   4a1cc:	csel	w0, w9, w8, eq  // eq = none
   4a1d0:	ret
   4a1d4:	tst	w0, #0x400000
   4a1d8:	mov	w8, #0x8dd                 	// #2269
   4a1dc:	cinc	w0, w8, ne  // ne = any
   4a1e0:	ret
   4a1e4:	tst	w0, #0x800000
   4a1e8:	mov	w8, #0x13c                 	// #316
   4a1ec:	mov	w9, #0x130                 	// #304
   4a1f0:	csel	w0, w9, w8, eq  // eq = none
   4a1f4:	ret
   4a1f8:	tbnz	w0, #18, 4af28 <aarch64_opcode_lookup@@Base+0x50b8>
   4a1fc:	mov	w0, #0x303                 	// #771
   4a200:	ret
   4a204:	tst	w0, #0x40000000
   4a208:	mov	w8, #0x5c                  	// #92
   4a20c:	cinc	w0, w8, ne  // ne = any
   4a210:	ret
   4a214:	mov	w8, #0x54                  	// #84
   4a218:	cinc	w0, w8, ne  // ne = any
   4a21c:	ret
   4a220:	tst	w0, #0x400000
   4a224:	mov	w8, #0x5a0                 	// #1440
   4a228:	cinc	w0, w8, ne  // ne = any
   4a22c:	ret
   4a230:	mov	w0, #0x14f                 	// #335
   4a234:	ret
   4a238:	tbnz	w0, #22, 4af34 <aarch64_opcode_lookup@@Base+0x50c4>
   4a23c:	tbnz	w0, #23, 4b608 <aarch64_opcode_lookup@@Base+0x5798>
   4a240:	tbnz	w0, #31, 4ba0c <aarch64_opcode_lookup@@Base+0x5b9c>
   4a244:	tst	w0, #0x40000000
   4a248:	mov	w8, #0x401                 	// #1025
   4a24c:	cinc	w0, w8, ne  // ne = any
   4a250:	ret
   4a254:	tbnz	w0, #16, 4af50 <aarch64_opcode_lookup@@Base+0x50e0>
   4a258:	mov	w0, #0xdb                  	// #219
   4a25c:	ret
   4a260:	mov	w0, #0x150                 	// #336
   4a264:	ret
   4a268:	tbnz	w0, #16, 4af60 <aarch64_opcode_lookup@@Base+0x50f0>
   4a26c:	mov	w0, #0xd8                  	// #216
   4a270:	ret
   4a274:	mov	w0, #0x202                 	// #514
   4a278:	ret
   4a27c:	mov	w8, #0x16b                 	// #363
   4a280:	mov	w9, #0x15d                 	// #349
   4a284:	csel	w0, w9, w8, eq  // eq = none
   4a288:	ret
   4a28c:	mov	w0, #0x226                 	// #550
   4a290:	ret
   4a294:	tst	w0, #0x40000000
   4a298:	mov	w8, #0x2c5                 	// #709
   4a29c:	mov	w9, #0x2d7                 	// #727
   4a2a0:	csel	w0, w9, w8, eq  // eq = none
   4a2a4:	ret
   4a2a8:	tbnz	w0, #23, 4af70 <aarch64_opcode_lookup@@Base+0x5100>
   4a2ac:	tbnz	w0, #31, 4b7d4 <aarch64_opcode_lookup@@Base+0x5964>
   4a2b0:	tst	w0, #0x40000000
   4a2b4:	mov	w8, #0x420                 	// #1056
   4a2b8:	mov	w9, #0x41d                 	// #1053
   4a2bc:	csel	w0, w9, w8, eq  // eq = none
   4a2c0:	ret
   4a2c4:	tst	w0, #0x20000000
   4a2c8:	tbnz	w0, #19, 4af88 <aarch64_opcode_lookup@@Base+0x5118>
   4a2cc:	tbnz	w0, #23, 4b620 <aarch64_opcode_lookup@@Base+0x57b0>
   4a2d0:	mov	w8, #0xe8                  	// #232
   4a2d4:	mov	w9, #0xb8                  	// #184
   4a2d8:	csel	w0, w9, w8, eq  // eq = none
   4a2dc:	ret
   4a2e0:	tst	w0, #0x10000
   4a2e4:	mov	w8, #0x2ba                 	// #698
   4a2e8:	mov	w9, #0x2b3                 	// #691
   4a2ec:	csel	w0, w9, w8, eq  // eq = none
   4a2f0:	ret
   4a2f4:	mov	w0, #0x2d9                 	// #729
   4a2f8:	ret
   4a2fc:	mov	w0, #0x1fd                 	// #509
   4a300:	ret
   4a304:	tbnz	w0, #16, 4af9c <aarch64_opcode_lookup@@Base+0x512c>
   4a308:	tbnz	w0, #18, 4b630 <aarch64_opcode_lookup@@Base+0x57c0>
   4a30c:	tst	w0, #0x80000
   4a310:	mov	w8, #0x32d                 	// #813
   4a314:	mov	w9, #0x332                 	// #818
   4a318:	csel	w0, w9, w8, eq  // eq = none
   4a31c:	ret
   4a320:	mov	w8, #0x5e                  	// #94
   4a324:	cinc	w0, w8, ne  // ne = any
   4a328:	ret
   4a32c:	mov	w8, #0x56                  	// #86
   4a330:	cinc	w0, w8, ne  // ne = any
   4a334:	ret
   4a338:	mov	w0, #0x203                 	// #515
   4a33c:	ret
   4a340:	tbnz	w0, #23, 4afb4 <aarch64_opcode_lookup@@Base+0x5144>
   4a344:	tbnz	w0, #31, 4b7dc <aarch64_opcode_lookup@@Base+0x596c>
   4a348:	tst	w0, #0x40000000
   4a34c:	mov	w8, #0x42c                 	// #1068
   4a350:	mov	w9, #0x429                 	// #1065
   4a354:	csel	w0, w9, w8, eq  // eq = none
   4a358:	ret
   4a35c:	tbnz	w0, #19, 4afcc <aarch64_opcode_lookup@@Base+0x515c>
   4a360:	tbnz	w0, #20, 4b638 <aarch64_opcode_lookup@@Base+0x57c8>
   4a364:	tst	w0, #0x20000000
   4a368:	tbnz	w0, #23, 4b9a8 <aarch64_opcode_lookup@@Base+0x5b38>
   4a36c:	mov	w8, #0xea                  	// #234
   4a370:	mov	w9, #0xba                  	// #186
   4a374:	csel	w0, w9, w8, eq  // eq = none
   4a378:	ret
   4a37c:	mov	w0, #0x2db                 	// #731
   4a380:	ret
   4a384:	tbnz	w0, #23, 4afe4 <aarch64_opcode_lookup@@Base+0x5174>
   4a388:	tbnz	w0, #31, 4b7e4 <aarch64_opcode_lookup@@Base+0x5974>
   4a38c:	tst	w0, #0x40000000
   4a390:	mov	w8, #0x438                 	// #1080
   4a394:	mov	w9, #0x435                 	// #1077
   4a398:	csel	w0, w9, w8, eq  // eq = none
   4a39c:	ret
   4a3a0:	tbnz	w0, #19, 4affc <aarch64_opcode_lookup@@Base+0x518c>
   4a3a4:	tbnz	w0, #20, 4b64c <aarch64_opcode_lookup@@Base+0x57dc>
   4a3a8:	tst	w0, #0x20000000
   4a3ac:	tbnz	w0, #23, 4b9b8 <aarch64_opcode_lookup@@Base+0x5b48>
   4a3b0:	mov	w8, #0xec                  	// #236
   4a3b4:	mov	w9, #0xbc                  	// #188
   4a3b8:	csel	w0, w9, w8, eq  // eq = none
   4a3bc:	ret
   4a3c0:	mov	w0, #0x14a                 	// #330
   4a3c4:	ret
   4a3c8:	mov	w0, #0x1fe                 	// #510
   4a3cc:	ret
   4a3d0:	tbnz	w0, #18, 4b014 <aarch64_opcode_lookup@@Base+0x51a4>
   4a3d4:	mov	w0, #0x305                 	// #773
   4a3d8:	ret
   4a3dc:	tst	w0, #0x40000000
   4a3e0:	mov	w8, #0x60                  	// #96
   4a3e4:	cinc	w0, w8, ne  // ne = any
   4a3e8:	ret
   4a3ec:	mov	w8, #0x58                  	// #88
   4a3f0:	cinc	w0, w8, ne  // ne = any
   4a3f4:	ret
   4a3f8:	tst	w0, #0x400000
   4a3fc:	mov	w8, #0x5a4                 	// #1444
   4a400:	cinc	w0, w8, ne  // ne = any
   4a404:	ret
   4a408:	mov	w0, #0x1ff                 	// #511
   4a40c:	ret
   4a410:	tst	w0, #0x20000000
   4a414:	mov	w8, #0x166                 	// #358
   4a418:	mov	w9, #0x133                 	// #307
   4a41c:	csel	w0, w9, w8, eq  // eq = none
   4a420:	ret
   4a424:	tbnz	w0, #31, 4b12c <aarch64_opcode_lookup@@Base+0x52bc>
   4a428:	tst	w0, #0x40000000
   4a42c:	mov	w8, #0x3be                 	// #958
   4a430:	cinc	w0, w8, ne  // ne = any
   4a434:	ret
   4a438:	tbnz	w0, #16, 4b028 <aarch64_opcode_lookup@@Base+0x51b8>
   4a43c:	tbnz	w0, #19, 4b654 <aarch64_opcode_lookup@@Base+0x57e4>
   4a440:	tst	w0, #0x20000000
   4a444:	tbnz	w0, #20, 4b9c8 <aarch64_opcode_lookup@@Base+0x5b58>
   4a448:	mov	w8, #0xf5                  	// #245
   4a44c:	mov	w9, #0xc2                  	// #194
   4a450:	csel	w0, w9, w8, eq  // eq = none
   4a454:	ret
   4a458:	tbnz	w0, #29, 4b03c <aarch64_opcode_lookup@@Base+0x51cc>
   4a45c:	mov	w0, #0x135                 	// #309
   4a460:	ret
   4a464:	tbnz	w0, #16, 4b050 <aarch64_opcode_lookup@@Base+0x51e0>
   4a468:	mov	w0, #0xd9                  	// #217
   4a46c:	ret
   4a470:	tst	w0, #0x20000000
   4a474:	tbnz	w0, #19, 4b060 <aarch64_opcode_lookup@@Base+0x51f0>
   4a478:	tbnz	w0, #23, 4b668 <aarch64_opcode_lookup@@Base+0x57f8>
   4a47c:	mov	w8, #0x205                 	// #517
   4a480:	mov	w9, #0x1e7                 	// #487
   4a484:	csel	w0, w9, w8, eq  // eq = none
   4a488:	ret
   4a48c:	mov	w8, #0x16f                 	// #367
   4a490:	mov	w9, #0x161                 	// #353
   4a494:	csel	w0, w9, w8, eq  // eq = none
   4a498:	ret
   4a49c:	mov	w8, #0x168                 	// #360
   4a4a0:	mov	w9, #0x137                 	// #311
   4a4a4:	csel	w0, w9, w8, eq  // eq = none
   4a4a8:	ret
   4a4ac:	tbnz	w0, #23, 4b074 <aarch64_opcode_lookup@@Base+0x5204>
   4a4b0:	tbnz	w0, #31, 4b7ec <aarch64_opcode_lookup@@Base+0x597c>
   4a4b4:	tst	w0, #0x40000000
   4a4b8:	mov	w8, #0x450                 	// #1104
   4a4bc:	mov	w9, #0x44d                 	// #1101
   4a4c0:	csel	w0, w9, w8, eq  // eq = none
   4a4c4:	ret
   4a4c8:	tbnz	w0, #19, 4b08c <aarch64_opcode_lookup@@Base+0x521c>
   4a4cc:	tbnz	w0, #23, 4b678 <aarch64_opcode_lookup@@Base+0x5808>
   4a4d0:	mov	w8, #0xf0                  	// #240
   4a4d4:	mov	w9, #0xc0                  	// #192
   4a4d8:	csel	w0, w9, w8, eq  // eq = none
   4a4dc:	ret
   4a4e0:	tst	w0, #0x40000000
   4a4e4:	mov	w8, #0x984                 	// #2436
   4a4e8:	cinc	w0, w8, eq  // eq = none
   4a4ec:	ret
   4a4f0:	tbnz	w0, #19, 4b0a0 <aarch64_opcode_lookup@@Base+0x5230>
   4a4f4:	tbnz	w0, #20, 4b688 <aarch64_opcode_lookup@@Base+0x5818>
   4a4f8:	tst	w0, #0x20000000
   4a4fc:	tbnz	w0, #23, 4b9d4 <aarch64_opcode_lookup@@Base+0x5b64>
   4a500:	mov	w8, #0x207                 	// #519
   4a504:	mov	w9, #0x1e9                 	// #489
   4a508:	csel	w0, w9, w8, eq  // eq = none
   4a50c:	ret
   4a510:	tbnz	w0, #15, 4b0b8 <aarch64_opcode_lookup@@Base+0x5248>
   4a514:	tst	w0, #0x10000
   4a518:	mov	w8, #0x343                 	// #835
   4a51c:	mov	w9, #0x341                 	// #833
   4a520:	csel	w0, w9, w8, eq  // eq = none
   4a524:	ret
   4a528:	mov	w8, #0x4b                  	// #75
   4a52c:	mov	w9, #0x49                  	// #73
   4a530:	csel	w0, w9, w8, eq  // eq = none
   4a534:	ret
   4a538:	mov	w8, #0x5a                  	// #90
   4a53c:	cinc	w0, w8, ne  // ne = any
   4a540:	ret
   4a544:	tst	w0, #0x20000000
   4a548:	tbnz	w0, #19, 4b0c0 <aarch64_opcode_lookup@@Base+0x5250>
   4a54c:	mov	w8, #0x209                 	// #521
   4a550:	mov	w9, #0x1eb                 	// #491
   4a554:	csel	w0, w9, w8, eq  // eq = none
   4a558:	ret
   4a55c:	mov	w0, #0x16a                 	// #362
   4a560:	ret
   4a564:	tbnz	w0, #23, 4b0d0 <aarch64_opcode_lookup@@Base+0x5260>
   4a568:	tbnz	w0, #31, 4b7f4 <aarch64_opcode_lookup@@Base+0x5984>
   4a56c:	tst	w0, #0x40000000
   4a570:	mov	w8, #0x45c                 	// #1116
   4a574:	mov	w9, #0x459                 	// #1113
   4a578:	csel	w0, w9, w8, eq  // eq = none
   4a57c:	ret
   4a580:	tst	w0, #0x20000000
   4a584:	mov	w8, #0x9e                  	// #158
   4a588:	cinc	w0, w8, ne  // ne = any
   4a58c:	ret
   4a590:	tst	w0, #0x20000000
   4a594:	tbnz	w0, #19, 4b0e8 <aarch64_opcode_lookup@@Base+0x5278>
   4a598:	tbnz	w0, #23, 4b690 <aarch64_opcode_lookup@@Base+0x5820>
   4a59c:	mov	w8, #0x20b                 	// #523
   4a5a0:	mov	w9, #0x1ed                 	// #493
   4a5a4:	csel	w0, w9, w8, eq  // eq = none
   4a5a8:	ret
   4a5ac:	tbnz	w0, #29, 4b0fc <aarch64_opcode_lookup@@Base+0x528c>
   4a5b0:	tst	w0, #0x40000000
   4a5b4:	mov	w8, #0x93b                 	// #2363
   4a5b8:	mov	w9, #0x937                 	// #2359
   4a5bc:	csel	w0, w9, w8, eq  // eq = none
   4a5c0:	ret
   4a5c4:	mov	w0, #0xda                  	// #218
   4a5c8:	ret
   4a5cc:	mov	w8, #0x16e                 	// #366
   4a5d0:	mov	w9, #0x139                 	// #313
   4a5d4:	csel	w0, w9, w8, eq  // eq = none
   4a5d8:	ret
   4a5dc:	tst	w0, #0x800000
   4a5e0:	mov	w8, #0x22f                 	// #559
   4a5e4:	mov	w9, #0x22d                 	// #557
   4a5e8:	csel	w0, w9, w8, eq  // eq = none
   4a5ec:	ret
   4a5f0:	tbnz	w0, #23, 4b104 <aarch64_opcode_lookup@@Base+0x5294>
   4a5f4:	tbnz	w0, #31, 4b7fc <aarch64_opcode_lookup@@Base+0x598c>
   4a5f8:	tst	w0, #0x40000000
   4a5fc:	mov	w8, #0x468                 	// #1128
   4a600:	mov	w9, #0x465                 	// #1125
   4a604:	csel	w0, w9, w8, eq  // eq = none
   4a608:	ret
   4a60c:	tbnz	w0, #19, 4b11c <aarch64_opcode_lookup@@Base+0x52ac>
   4a610:	tbnz	w0, #23, 4b6a0 <aarch64_opcode_lookup@@Base+0x5830>
   4a614:	tst	w0, #0x20000000
   4a618:	mov	w8, #0xa0                  	// #160
   4a61c:	cinc	w0, w8, ne  // ne = any
   4a620:	ret
   4a624:	tst	w0, #0x80000
   4a628:	mov	w8, #0x1fb                 	// #507
   4a62c:	cinc	w0, w8, ne  // ne = any
   4a630:	ret
   4a634:	tst	w0, #0x40000000
   4a638:	mov	w8, #0x982                 	// #2434
   4a63c:	cinc	w0, w8, eq  // eq = none
   4a640:	ret
   4a644:	mov	w0, #0x13b                 	// #315
   4a648:	ret
   4a64c:	mov	w0, #0x6a3                 	// #1699
   4a650:	ret
   4a654:	mov	w0, #0x679                 	// #1657
   4a658:	ret
   4a65c:	tst	w0, #0x100000
   4a660:	mov	w8, #0x786                 	// #1926
   4a664:	mov	w9, #0x753                 	// #1875
   4a668:	csel	w0, w9, w8, eq  // eq = none
   4a66c:	ret
   4a670:	mov	w8, #0x5fb                 	// #1531
   4a674:	mov	w9, #0x5e6                 	// #1510
   4a678:	csel	w0, w9, w8, eq  // eq = none
   4a67c:	ret
   4a680:	mov	w8, #0x5fc                 	// #1532
   4a684:	mov	w9, #0x5e7                 	// #1511
   4a688:	csel	w0, w9, w8, eq  // eq = none
   4a68c:	ret
   4a690:	mov	w0, #0x779                 	// #1913
   4a694:	ret
   4a698:	mov	w0, #0x75d                 	// #1885
   4a69c:	ret
   4a6a0:	mov	w0, #0x75c                 	// #1884
   4a6a4:	ret
   4a6a8:	mov	w0, #0x690                 	// #1680
   4a6ac:	ret
   4a6b0:	mov	w0, #0x5fd                 	// #1533
   4a6b4:	ret
   4a6b8:	tst	w0, #0x100000
   4a6bc:	mov	w8, #0x77a                 	// #1914
   4a6c0:	mov	w9, #0x764                 	// #1892
   4a6c4:	csel	w0, w9, w8, eq  // eq = none
   4a6c8:	ret
   4a6cc:	mov	w0, #0x762                 	// #1890
   4a6d0:	ret
   4a6d4:	mov	w0, #0x765                 	// #1893
   4a6d8:	ret
   4a6dc:	mov	w0, #0x68e                 	// #1678
   4a6e0:	ret
   4a6e4:	mov	w0, #0x5f8                 	// #1528
   4a6e8:	ret
   4a6ec:	mov	w0, #0x677                 	// #1655
   4a6f0:	ret
   4a6f4:	tst	w0, #0x100000
   4a6f8:	mov	w8, #0x78a                 	// #1930
   4a6fc:	mov	w9, #0x768                 	// #1896
   4a700:	csel	w0, w9, w8, eq  // eq = none
   4a704:	ret
   4a708:	mov	w8, #0x6aa                 	// #1706
   4a70c:	mov	w9, #0x6a6                 	// #1702
   4a710:	csel	w0, w9, w8, eq  // eq = none
   4a714:	ret
   4a718:	mov	w8, #0x6ab                 	// #1707
   4a71c:	mov	w9, #0x6a7                 	// #1703
   4a720:	csel	w0, w9, w8, eq  // eq = none
   4a724:	ret
   4a728:	mov	w8, #0x780                 	// #1920
   4a72c:	mov	w9, #0x784                 	// #1924
   4a730:	csel	w0, w9, w8, eq  // eq = none
   4a734:	ret
   4a738:	mov	w8, #0x788                 	// #1928
   4a73c:	mov	w9, #0x78c                 	// #1932
   4a740:	csel	w0, w9, w8, eq  // eq = none
   4a744:	ret
   4a748:	tst	w0, #0x80000
   4a74c:	mov	w8, #0x70e                 	// #1806
   4a750:	mov	w9, #0x717                 	// #1815
   4a754:	csel	w0, w9, w8, eq  // eq = none
   4a758:	ret
   4a75c:	mov	w8, #0x34                  	// #52
   4a760:	cinc	w0, w8, ne  // ne = any
   4a764:	ret
   4a768:	mov	w0, #0x6ce                 	// #1742
   4a76c:	ret
   4a770:	tst	w0, #0x80000
   4a774:	mov	w8, #0x517                 	// #1303
   4a778:	mov	w9, #0x513                 	// #1299
   4a77c:	csel	w0, w9, w8, eq  // eq = none
   4a780:	ret
   4a784:	tbnz	w0, #11, 4b3bc <aarch64_opcode_lookup@@Base+0x554c>
   4a788:	tst	w0, #0x1000
   4a78c:	mov	w8, #0x71e                 	// #1822
   4a790:	mov	w9, #0x5ce                 	// #1486
   4a794:	csel	w0, w9, w8, eq  // eq = none
   4a798:	ret
   4a79c:	tbnz	w0, #20, 4b3c4 <aarch64_opcode_lookup@@Base+0x5554>
   4a7a0:	mov	w0, #0x8a3                 	// #2211
   4a7a4:	ret
   4a7a8:	mov	w8, #0x561                 	// #1377
   4a7ac:	mov	w9, #0x7a0                 	// #1952
   4a7b0:	csel	w0, w9, w8, eq  // eq = none
   4a7b4:	ret
   4a7b8:	tbnz	w0, #17, 4b3d8 <aarch64_opcode_lookup@@Base+0x5568>
   4a7bc:	mov	w8, #0x59a                 	// #1434
   4a7c0:	mov	w9, #0x5c2                 	// #1474
   4a7c4:	csel	w0, w9, w8, eq  // eq = none
   4a7c8:	ret
   4a7cc:	mov	w0, #0x7ee                 	// #2030
   4a7d0:	ret
   4a7d4:	mov	w8, #0x50f                 	// #1295
   4a7d8:	mov	w9, #0x6da                 	// #1754
   4a7dc:	csel	w0, w9, w8, eq  // eq = none
   4a7e0:	ret
   4a7e4:	mov	w8, #0x557                 	// #1367
   4a7e8:	mov	w9, #0x71f                 	// #1823
   4a7ec:	csel	w0, w9, w8, eq  // eq = none
   4a7f0:	ret
   4a7f4:	tst	w0, #0x100000
   4a7f8:	mov	w8, #0x85b                 	// #2139
   4a7fc:	mov	w9, #0x84d                 	// #2125
   4a800:	csel	w0, w9, w8, eq  // eq = none
   4a804:	ret
   4a808:	tst	w0, #0x800000
   4a80c:	mov	w8, #0x853                 	// #2131
   4a810:	mov	w9, #0x7fe                 	// #2046
   4a814:	csel	w0, w9, w8, eq  // eq = none
   4a818:	ret
   4a81c:	tbnz	w0, #18, 4b3e8 <aarch64_opcode_lookup@@Base+0x5578>
   4a820:	tst	w0, #0x100000
   4a824:	mov	w8, #0x710                 	// #1808
   4a828:	mov	w9, #0x5b8                 	// #1464
   4a82c:	csel	w0, w9, w8, eq  // eq = none
   4a830:	ret
   4a834:	mov	w8, #0x910                 	// #2320
   4a838:	cinc	w0, w8, ne  // ne = any
   4a83c:	ret
   4a840:	mov	w0, #0x55d                 	// #1373
   4a844:	ret
   4a848:	mov	w0, #0x596                 	// #1430
   4a84c:	ret
   4a850:	mov	w0, #0x8f9                 	// #2297
   4a854:	ret
   4a858:	tbnz	w0, #12, 4b3f4 <aarch64_opcode_lookup@@Base+0x5584>
   4a85c:	tst	w0, #0x20000
   4a860:	mov	w8, #0x917                 	// #2327
   4a864:	mov	w9, #0x919                 	// #2329
   4a868:	csel	w0, w9, w8, eq  // eq = none
   4a86c:	ret
   4a870:	tbnz	w0, #16, 4b3fc <aarch64_opcode_lookup@@Base+0x558c>
   4a874:	tst	w0, #0x80000
   4a878:	mov	w8, #0x29f                 	// #671
   4a87c:	mov	w9, #0xa6                  	// #166
   4a880:	csel	w0, w9, w8, eq  // eq = none
   4a884:	ret
   4a888:	mov	w8, #0x726                 	// #1830
   4a88c:	mov	w9, #0x70b                 	// #1803
   4a890:	csel	w0, w9, w8, eq  // eq = none
   4a894:	ret
   4a898:	tbnz	w0, #20, 4b40c <aarch64_opcode_lookup@@Base+0x559c>
   4a89c:	mov	w0, #0x8f3                 	// #2291
   4a8a0:	ret
   4a8a4:	tbnz	w0, #22, 4b420 <aarch64_opcode_lookup@@Base+0x55b0>
   4a8a8:	mov	w0, #0x5d0                 	// #1488
   4a8ac:	ret
   4a8b0:	tbnz	w0, #20, 4b434 <aarch64_opcode_lookup@@Base+0x55c4>
   4a8b4:	tbnz	w0, #22, 4b8a4 <aarch64_opcode_lookup@@Base+0x5a34>
   4a8b8:	mov	w8, #0x744                 	// #1860
   4a8bc:	mov	w9, #0x738                 	// #1848
   4a8c0:	csel	w0, w9, w8, eq  // eq = none
   4a8c4:	ret
   4a8c8:	tst	w0, #0x100000
   4a8cc:	mov	w8, #0x58f                 	// #1423
   4a8d0:	mov	w9, #0x7b4                 	// #1972
   4a8d4:	csel	w0, w9, w8, eq  // eq = none
   4a8d8:	ret
   4a8dc:	mov	w0, #0x515                 	// #1301
   4a8e0:	ret
   4a8e4:	mov	w0, #0x6d6                 	// #1750
   4a8e8:	ret
   4a8ec:	tbnz	w0, #12, 4b448 <aarch64_opcode_lookup@@Base+0x55d8>
   4a8f0:	tst	w0, #0x400000
   4a8f4:	mov	w8, #0x834                 	// #2100
   4a8f8:	cinc	w0, w8, ne  // ne = any
   4a8fc:	ret
   4a900:	mov	w8, #0x87b                 	// #2171
   4a904:	cinc	w0, w8, ne  // ne = any
   4a908:	ret
   4a90c:	tst	w0, #0x1000
   4a910:	mov	w8, #0x899                 	// #2201
   4a914:	mov	w9, #0x889                 	// #2185
   4a918:	csel	w0, w9, w8, eq  // eq = none
   4a91c:	ret
   4a920:	tst	w0, #0x80000
   4a924:	mov	w8, #0x7a6                 	// #1958
   4a928:	mov	w9, #0x7af                 	// #1967
   4a92c:	csel	w0, w9, w8, eq  // eq = none
   4a930:	ret
   4a934:	mov	w8, #0x36                  	// #54
   4a938:	cinc	w0, w8, ne  // ne = any
   4a93c:	ret
   4a940:	tbnz	w0, #17, 4b450 <aarch64_opcode_lookup@@Base+0x55e0>
   4a944:	tst	w0, #0x40000
   4a948:	mov	w8, #0x552                 	// #1362
   4a94c:	mov	w9, #0x7d4                 	// #2004
   4a950:	csel	w0, w9, w8, eq  // eq = none
   4a954:	ret
   4a958:	mov	w8, #0x8aa                 	// #2218
   4a95c:	mov	w9, #0x89c                 	// #2204
   4a960:	csel	w0, w9, w8, eq  // eq = none
   4a964:	ret
   4a968:	mov	w8, #0x5ae                 	// #1454
   4a96c:	mov	w9, #0x7df                 	// #2015
   4a970:	csel	w0, w9, w8, eq  // eq = none
   4a974:	ret
   4a978:	tbnz	w0, #18, 4b458 <aarch64_opcode_lookup@@Base+0x55e8>
   4a97c:	tst	w0, #0x100000
   4a980:	mov	w8, #0x5a9                 	// #1449
   4a984:	mov	w9, #0x5ad                 	// #1453
   4a988:	csel	w0, w9, w8, eq  // eq = none
   4a98c:	ret
   4a990:	tbnz	w0, #10, 4b460 <aarch64_opcode_lookup@@Base+0x55f0>
   4a994:	tbnz	w0, #12, 4b8b4 <aarch64_opcode_lookup@@Base+0x5a44>
   4a998:	tst	w0, #0x2000
   4a99c:	mov	w8, #0x700                 	// #1792
   4a9a0:	mov	w9, #0x6e1                 	// #1761
   4a9a4:	csel	w0, w9, w8, eq  // eq = none
   4a9a8:	ret
   4a9ac:	tst	w0, #0x100000
   4a9b0:	mov	w8, #0x8d8                 	// #2264
   4a9b4:	mov	w9, #0x8d0                 	// #2256
   4a9b8:	csel	w0, w9, w8, eq  // eq = none
   4a9bc:	ret
   4a9c0:	tbnz	w0, #19, 4b468 <aarch64_opcode_lookup@@Base+0x55f8>
   4a9c4:	tbnz	w0, #22, 4b8c4 <aarch64_opcode_lookup@@Base+0x5a54>
   4a9c8:	mov	w0, #0x7aa                 	// #1962
   4a9cc:	ret
   4a9d0:	mov	w8, #0x90e                 	// #2318
   4a9d4:	cinc	w0, w8, ne  // ne = any
   4a9d8:	ret
   4a9dc:	mov	w0, #0x59c                 	// #1436
   4a9e0:	ret
   4a9e4:	tst	w0, #0x80000
   4a9e8:	mov	w8, #0x2a0                 	// #672
   4a9ec:	mov	w9, #0xa7                  	// #167
   4a9f0:	csel	w0, w9, w8, eq  // eq = none
   4a9f4:	ret
   4a9f8:	mov	w8, #0x870                 	// #2160
   4a9fc:	mov	w9, #0x70c                 	// #1804
   4aa00:	csel	w0, w9, w8, eq  // eq = none
   4aa04:	ret
   4aa08:	tbnz	w0, #20, 4b474 <aarch64_opcode_lookup@@Base+0x5604>
   4aa0c:	mov	w0, #0x8ee                 	// #2286
   4aa10:	ret
   4aa14:	tbnz	w0, #22, 4b488 <aarch64_opcode_lookup@@Base+0x5618>
   4aa18:	mov	w0, #0x553                 	// #1363
   4aa1c:	ret
   4aa20:	tbnz	w0, #20, 4b49c <aarch64_opcode_lookup@@Base+0x562c>
   4aa24:	tbnz	w0, #22, 4b8d8 <aarch64_opcode_lookup@@Base+0x5a68>
   4aa28:	mov	w8, #0x7d7                 	// #2007
   4aa2c:	mov	w9, #0x7cb                 	// #1995
   4aa30:	csel	w0, w9, w8, eq  // eq = none
   4aa34:	ret
   4aa38:	mov	w0, #0x116                 	// #278
   4aa3c:	ret
   4aa40:	mov	w0, #0x813                 	// #2067
   4aa44:	ret
   4aa48:	mov	w8, #0x8e3                 	// #2275
   4aa4c:	mov	w9, #0x866                 	// #2150
   4aa50:	csel	w0, w9, w8, eq  // eq = none
   4aa54:	ret
   4aa58:	mov	w8, #0x8ea                 	// #2282
   4aa5c:	mov	w9, #0x86d                 	// #2157
   4aa60:	csel	w0, w9, w8, eq  // eq = none
   4aa64:	ret
   4aa68:	mov	w8, #0x8e4                 	// #2276
   4aa6c:	mov	w9, #0x867                 	// #2151
   4aa70:	csel	w0, w9, w8, eq  // eq = none
   4aa74:	ret
   4aa78:	mov	w8, #0x8eb                 	// #2283
   4aa7c:	mov	w9, #0x86e                 	// #2158
   4aa80:	csel	w0, w9, w8, eq  // eq = none
   4aa84:	ret
   4aa88:	tst	w0, #0x1000
   4aa8c:	mov	w8, #0x89a                 	// #2202
   4aa90:	mov	w9, #0x88a                 	// #2186
   4aa94:	csel	w0, w9, w8, eq  // eq = none
   4aa98:	ret
   4aa9c:	mov	w0, #0x718                 	// #1816
   4aaa0:	ret
   4aaa4:	mov	w8, #0x38                  	// #56
   4aaa8:	cinc	w0, w8, ne  // ne = any
   4aaac:	ret
   4aab0:	mov	w8, #0x55e                 	// #1374
   4aab4:	mov	w9, #0x7b6                 	// #1974
   4aab8:	csel	w0, w9, w8, eq  // eq = none
   4aabc:	ret
   4aac0:	mov	w0, #0x732                 	// #1842
   4aac4:	ret
   4aac8:	tbnz	w0, #11, 4b4b0 <aarch64_opcode_lookup@@Base+0x5640>
   4aacc:	mov	w0, #0x968                 	// #2408
   4aad0:	ret
   4aad4:	tbnz	w0, #20, 4b4c4 <aarch64_opcode_lookup@@Base+0x5654>
   4aad8:	tst	w0, #0x40000000
   4aadc:	mov	w8, #0x8a4                 	// #2212
   4aae0:	mov	w9, #0x8b4                 	// #2228
   4aae4:	csel	w0, w9, w8, eq  // eq = none
   4aae8:	ret
   4aaec:	mov	w8, #0x6d7                 	// #1751
   4aaf0:	mov	w9, #0x4f9                 	// #1273
   4aaf4:	csel	w0, w9, w8, eq  // eq = none
   4aaf8:	ret
   4aafc:	mov	w0, #0x8e9                 	// #2281
   4ab00:	ret
   4ab04:	tbnz	w0, #22, 4b4cc <aarch64_opcode_lookup@@Base+0x565c>
   4ab08:	tst	w0, #0x800000
   4ab0c:	mov	w8, #0x959                 	// #2393
   4ab10:	mov	w9, #0x957                 	// #2391
   4ab14:	csel	w0, w9, w8, eq  // eq = none
   4ab18:	ret
   4ab1c:	mov	w0, #0x4fd                 	// #1277
   4ab20:	ret
   4ab24:	tst	w0, #0x800000
   4ab28:	mov	w8, #0x854                 	// #2132
   4ab2c:	mov	w9, #0x7ff                 	// #2047
   4ab30:	csel	w0, w9, w8, eq  // eq = none
   4ab34:	ret
   4ab38:	tbnz	w0, #22, 4b4d4 <aarch64_opcode_lookup@@Base+0x5664>
   4ab3c:	tst	w0, #0x800000
   4ab40:	mov	w8, #0x582                 	// #1410
   4ab44:	mov	w9, #0x819                 	// #2073
   4ab48:	csel	w0, w9, w8, eq  // eq = none
   4ab4c:	ret
   4ab50:	tbnz	w0, #16, 4b4e4 <aarch64_opcode_lookup@@Base+0x5674>
   4ab54:	tbnz	w0, #17, 4b8e8 <aarch64_opcode_lookup@@Base+0x5a78>
   4ab58:	tbnz	w0, #18, 4ba5c <aarch64_opcode_lookup@@Base+0x5bec>
   4ab5c:	tbnz	w0, #19, 4bac4 <aarch64_opcode_lookup@@Base+0x5c54>
   4ab60:	tst	w0, #0x100000
   4ab64:	mov	w8, #0x79d                 	// #1949
   4ab68:	mov	w9, #0x555                 	// #1365
   4ab6c:	csel	w0, w9, w8, eq  // eq = none
   4ab70:	ret
   4ab74:	mov	w8, #0x7e6                 	// #2022
   4ab78:	cinc	w0, w8, ne  // ne = any
   4ab7c:	ret
   4ab80:	tst	w0, #0x80000
   4ab84:	mov	w8, #0x5b3                 	// #1459
   4ab88:	mov	w9, #0x597                 	// #1431
   4ab8c:	csel	w0, w9, w8, eq  // eq = none
   4ab90:	ret
   4ab94:	mov	w0, #0x8fa                 	// #2298
   4ab98:	ret
   4ab9c:	tbnz	w0, #16, 4b4f8 <aarch64_opcode_lookup@@Base+0x5688>
   4aba0:	tst	w0, #0x80000
   4aba4:	mov	w8, #0x2a1                 	// #673
   4aba8:	mov	w9, #0xa8                  	// #168
   4abac:	csel	w0, w9, w8, eq  // eq = none
   4abb0:	ret
   4abb4:	mov	w0, #0x70d                 	// #1805
   4abb8:	ret
   4abbc:	tbnz	w0, #20, 4b50c <aarch64_opcode_lookup@@Base+0x569c>
   4abc0:	tst	w0, #0x40000000
   4abc4:	mov	w8, #0x8f4                 	// #2292
   4abc8:	mov	w9, #0x8ff                 	// #2303
   4abcc:	csel	w0, w9, w8, eq  // eq = none
   4abd0:	ret
   4abd4:	tst	w0, #0x800000
   4abd8:	mov	w8, #0x72b                 	// #1835
   4abdc:	mov	w9, #0x72e                 	// #1838
   4abe0:	csel	w0, w9, w8, eq  // eq = none
   4abe4:	ret
   4abe8:	tbnz	w0, #22, 4b514 <aarch64_opcode_lookup@@Base+0x56a4>
   4abec:	mov	w8, #0x735                 	// #1845
   4abf0:	mov	w9, #0x729                 	// #1833
   4abf4:	csel	w0, w9, w8, eq  // eq = none
   4abf8:	ret
   4abfc:	tbnz	w0, #12, 4b524 <aarch64_opcode_lookup@@Base+0x56b4>
   4ac00:	tst	w0, #0x400000
   4ac04:	mov	w8, #0x837                 	// #2103
   4ac08:	cinc	w0, w8, ne  // ne = any
   4ac0c:	ret
   4ac10:	mov	w8, #0x87f                 	// #2175
   4ac14:	cinc	w0, w8, ne  // ne = any
   4ac18:	ret
   4ac1c:	mov	w0, #0x7b0                 	// #1968
   4ac20:	ret
   4ac24:	mov	w8, #0x3a                  	// #58
   4ac28:	cinc	w0, w8, ne  // ne = any
   4ac2c:	ret
   4ac30:	tst	w0, #0x100000
   4ac34:	mov	w8, #0x8ab                 	// #2219
   4ac38:	mov	w9, #0x89d                 	// #2205
   4ac3c:	csel	w0, w9, w8, eq  // eq = none
   4ac40:	ret
   4ac44:	mov	w0, #0x6d4                 	// #1748
   4ac48:	ret
   4ac4c:	tst	w0, #0x40000
   4ac50:	mov	w8, #0x599                 	// #1433
   4ac54:	mov	w9, #0x5c5                 	// #1477
   4ac58:	csel	w0, w9, w8, eq  // eq = none
   4ac5c:	ret
   4ac60:	mov	w0, #0x8ec                 	// #2284
   4ac64:	ret
   4ac68:	mov	w8, #0x83d                 	// #2109
   4ac6c:	mov	w9, #0x805                 	// #2053
   4ac70:	csel	w0, w9, w8, eq  // eq = none
   4ac74:	ret
   4ac78:	mov	w0, #0x6e2                 	// #1762
   4ac7c:	ret
   4ac80:	tbnz	w0, #19, 4b52c <aarch64_opcode_lookup@@Base+0x56bc>
   4ac84:	tbnz	w0, #20, 4b8f0 <aarch64_opcode_lookup@@Base+0x5a80>
   4ac88:	mov	w0, #0x5b7                 	// #1463
   4ac8c:	ret
   4ac90:	mov	w8, #0x7e8                 	// #2024
   4ac94:	cinc	w0, w8, ne  // ne = any
   4ac98:	ret
   4ac9c:	tst	w0, #0x80000
   4aca0:	mov	w8, #0x5bd                 	// #1469
   4aca4:	mov	w9, #0x59d                 	// #1437
   4aca8:	csel	w0, w9, w8, eq  // eq = none
   4acac:	ret
   4acb0:	tbnz	w0, #16, 4b540 <aarch64_opcode_lookup@@Base+0x56d0>
   4acb4:	tst	w0, #0x80000
   4acb8:	mov	w8, #0x2a2                 	// #674
   4acbc:	mov	w9, #0xa9                  	// #169
   4acc0:	csel	w0, w9, w8, eq  // eq = none
   4acc4:	ret
   4acc8:	mov	w0, #0x704                 	// #1796
   4accc:	ret
   4acd0:	tbnz	w0, #20, 4b550 <aarch64_opcode_lookup@@Base+0x56e0>
   4acd4:	tst	w0, #0x40000000
   4acd8:	mov	w8, #0x8ef                 	// #2287
   4acdc:	mov	w9, #0x8a5                 	// #2213
   4ace0:	csel	w0, w9, w8, eq  // eq = none
   4ace4:	ret
   4ace8:	tst	w0, #0x800000
   4acec:	mov	w8, #0x7bf                 	// #1983
   4acf0:	mov	w9, #0x7c2                 	// #1986
   4acf4:	csel	w0, w9, w8, eq  // eq = none
   4acf8:	ret
   4acfc:	tbnz	w0, #22, 4b558 <aarch64_opcode_lookup@@Base+0x56e8>
   4ad00:	mov	w8, #0x7ca                 	// #1994
   4ad04:	mov	w9, #0x7be                 	// #1982
   4ad08:	csel	w0, w9, w8, eq  // eq = none
   4ad0c:	ret
   4ad10:	mov	w0, #0x307                 	// #775
   4ad14:	ret
   4ad18:	cmp	w0, #0x0
   4ad1c:	mov	w8, #0x925                 	// #2341
   4ad20:	mov	w9, #0x3d                  	// #61
   4ad24:	csel	w0, w9, w8, ge  // ge = tcont
   4ad28:	ret
   4ad2c:	tbnz	w0, #23, 4b6a8 <aarch64_opcode_lookup@@Base+0x5838>
   4ad30:	tbnz	w0, #31, 4ba14 <aarch64_opcode_lookup@@Base+0x5ba4>
   4ad34:	tst	w0, #0x40000000
   4ad38:	mov	w8, #0x414                 	// #1044
   4ad3c:	mov	w9, #0x411                 	// #1041
   4ad40:	csel	w0, w9, w8, eq  // eq = none
   4ad44:	ret
   4ad48:	mov	w0, #0x2d2                 	// #722
   4ad4c:	ret
   4ad50:	tbnz	w0, #31, 4b804 <aarch64_opcode_lookup@@Base+0x5994>
   4ad54:	tst	w0, #0x40000000
   4ad58:	mov	w8, #0x41f                 	// #1055
   4ad5c:	mov	w9, #0x41c                 	// #1052
   4ad60:	csel	w0, w9, w8, eq  // eq = none
   4ad64:	ret
   4ad68:	tbnz	w0, #16, 4b6c0 <aarch64_opcode_lookup@@Base+0x5850>
   4ad6c:	cmp	w0, #0x0
   4ad70:	mov	w8, #0x2b4                 	// #692
   4ad74:	mov	w9, #0x2af                 	// #687
   4ad78:	csel	w0, w9, w8, ge  // ge = tcont
   4ad7c:	ret
   4ad80:	tbnz	w0, #18, 4b6c8 <aarch64_opcode_lookup@@Base+0x5858>
   4ad84:	tst	w0, #0x80000
   4ad88:	mov	w8, #0x32e                 	// #814
   4ad8c:	mov	w9, #0x334                 	// #820
   4ad90:	csel	w0, w9, w8, eq  // eq = none
   4ad94:	ret
   4ad98:	tbnz	w0, #31, 4b80c <aarch64_opcode_lookup@@Base+0x599c>
   4ad9c:	tst	w0, #0x40000000
   4ada0:	mov	w8, #0x42b                 	// #1067
   4ada4:	mov	w9, #0x428                 	// #1064
   4ada8:	csel	w0, w9, w8, eq  // eq = none
   4adac:	ret
   4adb0:	tst	w0, #0x20000000
   4adb4:	mov	w8, #0x22                  	// #34
   4adb8:	mov	w9, #0x1e                  	// #30
   4adbc:	csel	w0, w9, w8, eq  // eq = none
   4adc0:	ret
   4adc4:	tst	w0, #0x10000
   4adc8:	mov	w8, #0x2b9                 	// #697
   4adcc:	mov	w9, #0x2b2                 	// #690
   4add0:	csel	w0, w9, w8, eq  // eq = none
   4add4:	ret
   4add8:	tbnz	w0, #31, 4b814 <aarch64_opcode_lookup@@Base+0x59a4>
   4addc:	tst	w0, #0x40000000
   4ade0:	mov	w8, #0x437                 	// #1079
   4ade4:	mov	w9, #0x434                 	// #1076
   4ade8:	csel	w0, w9, w8, eq  // eq = none
   4adec:	ret
   4adf0:	mov	w8, #0x171                 	// #369
   4adf4:	mov	w9, #0x165                 	// #357
   4adf8:	csel	w0, w9, w8, eq  // eq = none
   4adfc:	ret
   4ae00:	mov	w0, #0x309                 	// #777
   4ae04:	ret
   4ae08:	cmp	w0, #0x0
   4ae0c:	mov	w8, #0x932                 	// #2354
   4ae10:	mov	w9, #0x45                  	// #69
   4ae14:	csel	w0, w9, w8, ge  // ge = tcont
   4ae18:	ret
   4ae1c:	mov	w0, #0x156                 	// #342
   4ae20:	ret
   4ae24:	tbnz	w0, #23, 4b6d0 <aarch64_opcode_lookup@@Base+0x5860>
   4ae28:	tbnz	w0, #31, 4ba1c <aarch64_opcode_lookup@@Base+0x5bac>
   4ae2c:	tst	w0, #0x40000000
   4ae30:	mov	w8, #0x444                 	// #1092
   4ae34:	mov	w9, #0x441                 	// #1089
   4ae38:	csel	w0, w9, w8, eq  // eq = none
   4ae3c:	ret
   4ae40:	tbnz	w0, #16, 4b6e8 <aarch64_opcode_lookup@@Base+0x5878>
   4ae44:	mov	w0, #0x24                  	// #36
   4ae48:	ret
   4ae4c:	tst	w0, #0x40000000
   4ae50:	mov	w8, #0x93c                 	// #2364
   4ae54:	mov	w9, #0x938                 	// #2360
   4ae58:	csel	w0, w9, w8, eq  // eq = none
   4ae5c:	ret
   4ae60:	tst	w0, #0x40000000
   4ae64:	mov	w8, #0xde                  	// #222
   4ae68:	cinc	w0, w8, ne  // ne = any
   4ae6c:	ret
   4ae70:	tbnz	w0, #31, 4b81c <aarch64_opcode_lookup@@Base+0x59ac>
   4ae74:	tst	w0, #0x40000000
   4ae78:	mov	w8, #0x44f                 	// #1103
   4ae7c:	mov	w9, #0x44c                 	// #1100
   4ae80:	csel	w0, w9, w8, eq  // eq = none
   4ae84:	ret
   4ae88:	mov	w8, #0xf8                  	// #248
   4ae8c:	mov	w9, #0xc5                  	// #197
   4ae90:	csel	w0, w9, w8, eq  // eq = none
   4ae94:	ret
   4ae98:	tst	w0, #0x20000000
   4ae9c:	mov	w8, #0x20e                 	// #526
   4aea0:	mov	w9, #0x1f0                 	// #496
   4aea4:	csel	w0, w9, w8, eq  // eq = none
   4aea8:	ret
   4aeac:	tbnz	w0, #31, 4b824 <aarch64_opcode_lookup@@Base+0x59b4>
   4aeb0:	tst	w0, #0x40000000
   4aeb4:	mov	w8, #0x45b                 	// #1115
   4aeb8:	mov	w9, #0x458                 	// #1112
   4aebc:	csel	w0, w9, w8, eq  // eq = none
   4aec0:	ret
   4aec4:	tst	w0, #0x20000000
   4aec8:	mov	w8, #0x210                 	// #528
   4aecc:	mov	w9, #0x1f2                 	// #498
   4aed0:	csel	w0, w9, w8, eq  // eq = none
   4aed4:	ret
   4aed8:	mov	w0, #0x15e                 	// #350
   4aedc:	ret
   4aee0:	tst	w0, #0x40000000
   4aee4:	mov	w8, #0xe0                  	// #224
   4aee8:	cinc	w0, w8, ne  // ne = any
   4aeec:	ret
   4aef0:	tbnz	w0, #31, 4b82c <aarch64_opcode_lookup@@Base+0x59bc>
   4aef4:	tst	w0, #0x40000000
   4aef8:	mov	w8, #0x467                 	// #1127
   4aefc:	mov	w9, #0x464                 	// #1124
   4af00:	csel	w0, w9, w8, eq  // eq = none
   4af04:	ret
   4af08:	tst	w0, #0x20000000
   4af0c:	mov	w8, #0xfa                  	// #250
   4af10:	mov	w9, #0xc9                  	// #201
   4af14:	csel	w0, w9, w8, eq  // eq = none
   4af18:	ret
   4af1c:	mov	w8, #0x222                 	// #546
   4af20:	cinc	w0, w8, eq  // eq = none
   4af24:	ret
   4af28:	tbnz	w0, #19, 4b6f8 <aarch64_opcode_lookup@@Base+0x5888>
   4af2c:	mov	w0, #0x30b                 	// #779
   4af30:	ret
   4af34:	tbnz	w0, #23, 4b70c <aarch64_opcode_lookup@@Base+0x589c>
   4af38:	tbnz	w0, #31, 4ba24 <aarch64_opcode_lookup@@Base+0x5bb4>
   4af3c:	tst	w0, #0x40000000
   4af40:	mov	w8, #0x408                 	// #1032
   4af44:	mov	w9, #0x405                 	// #1029
   4af48:	csel	w0, w9, w8, eq  // eq = none
   4af4c:	ret
   4af50:	tst	w0, #0x80000
   4af54:	mov	w8, #0xe6                  	// #230
   4af58:	cinc	w0, w8, ne  // ne = any
   4af5c:	ret
   4af60:	tst	w0, #0x40000000
   4af64:	mov	w8, #0xe2                  	// #226
   4af68:	cinc	w0, w8, ne  // ne = any
   4af6c:	ret
   4af70:	tbnz	w0, #31, 4b834 <aarch64_opcode_lookup@@Base+0x59c4>
   4af74:	tst	w0, #0x40000000
   4af78:	mov	w8, #0x421                 	// #1057
   4af7c:	mov	w9, #0x41e                 	// #1054
   4af80:	csel	w0, w9, w8, eq  // eq = none
   4af84:	ret
   4af88:	tbnz	w0, #23, 4b724 <aarch64_opcode_lookup@@Base+0x58b4>
   4af8c:	mov	w8, #0xe9                  	// #233
   4af90:	mov	w9, #0xb9                  	// #185
   4af94:	csel	w0, w9, w8, eq  // eq = none
   4af98:	ret
   4af9c:	tbnz	w0, #18, 4b734 <aarch64_opcode_lookup@@Base+0x58c4>
   4afa0:	tst	w0, #0x80000
   4afa4:	mov	w8, #0x32f                 	// #815
   4afa8:	mov	w9, #0x336                 	// #822
   4afac:	csel	w0, w9, w8, eq  // eq = none
   4afb0:	ret
   4afb4:	tbnz	w0, #31, 4b83c <aarch64_opcode_lookup@@Base+0x59cc>
   4afb8:	tst	w0, #0x40000000
   4afbc:	mov	w8, #0x42d                 	// #1069
   4afc0:	mov	w9, #0x42a                 	// #1066
   4afc4:	csel	w0, w9, w8, eq  // eq = none
   4afc8:	ret
   4afcc:	tst	w0, #0x20000000
   4afd0:	tbnz	w0, #23, 4b73c <aarch64_opcode_lookup@@Base+0x58cc>
   4afd4:	mov	w8, #0xeb                  	// #235
   4afd8:	mov	w9, #0xbb                  	// #187
   4afdc:	csel	w0, w9, w8, eq  // eq = none
   4afe0:	ret
   4afe4:	tbnz	w0, #31, 4b844 <aarch64_opcode_lookup@@Base+0x59d4>
   4afe8:	tst	w0, #0x40000000
   4afec:	mov	w8, #0x439                 	// #1081
   4aff0:	mov	w9, #0x436                 	// #1078
   4aff4:	csel	w0, w9, w8, eq  // eq = none
   4aff8:	ret
   4affc:	tst	w0, #0x20000000
   4b000:	tbnz	w0, #23, 4b74c <aarch64_opcode_lookup@@Base+0x58dc>
   4b004:	mov	w8, #0xed                  	// #237
   4b008:	mov	w9, #0xbd                  	// #189
   4b00c:	csel	w0, w9, w8, eq  // eq = none
   4b010:	ret
   4b014:	tst	w0, #0x80000
   4b018:	mov	w8, #0x31c                 	// #796
   4b01c:	mov	w9, #0x30d                 	// #781
   4b020:	csel	w0, w9, w8, eq  // eq = none
   4b024:	ret
   4b028:	tst	w0, #0x20000000
   4b02c:	mov	w8, #0x101                 	// #257
   4b030:	mov	w9, #0xd2                  	// #210
   4b034:	csel	w0, w9, w8, eq  // eq = none
   4b038:	ret
   4b03c:	tst	w0, #0x40000000
   4b040:	mov	w8, #0x93d                 	// #2365
   4b044:	mov	w9, #0x939                 	// #2361
   4b048:	csel	w0, w9, w8, eq  // eq = none
   4b04c:	ret
   4b050:	tst	w0, #0x40000000
   4b054:	mov	w8, #0xe4                  	// #228
   4b058:	cinc	w0, w8, ne  // ne = any
   4b05c:	ret
   4b060:	tbnz	w0, #23, 4b75c <aarch64_opcode_lookup@@Base+0x58ec>
   4b064:	mov	w8, #0x206                 	// #518
   4b068:	mov	w9, #0x1e8                 	// #488
   4b06c:	csel	w0, w9, w8, eq  // eq = none
   4b070:	ret
   4b074:	tbnz	w0, #31, 4b84c <aarch64_opcode_lookup@@Base+0x59dc>
   4b078:	tst	w0, #0x40000000
   4b07c:	mov	w8, #0x451                 	// #1105
   4b080:	mov	w9, #0x44e                 	// #1102
   4b084:	csel	w0, w9, w8, eq  // eq = none
   4b088:	ret
   4b08c:	tbnz	w0, #23, 4b76c <aarch64_opcode_lookup@@Base+0x58fc>
   4b090:	mov	w8, #0xf1                  	// #241
   4b094:	mov	w9, #0xc1                  	// #193
   4b098:	csel	w0, w9, w8, eq  // eq = none
   4b09c:	ret
   4b0a0:	tst	w0, #0x20000000
   4b0a4:	tbnz	w0, #23, 4b77c <aarch64_opcode_lookup@@Base+0x590c>
   4b0a8:	mov	w8, #0x208                 	// #520
   4b0ac:	mov	w9, #0x1ea                 	// #490
   4b0b0:	csel	w0, w9, w8, eq  // eq = none
   4b0b4:	ret
   4b0b8:	mov	w0, #0x345                 	// #837
   4b0bc:	ret
   4b0c0:	mov	w8, #0x20a                 	// #522
   4b0c4:	mov	w9, #0x1ec                 	// #492
   4b0c8:	csel	w0, w9, w8, eq  // eq = none
   4b0cc:	ret
   4b0d0:	tbnz	w0, #31, 4b854 <aarch64_opcode_lookup@@Base+0x59e4>
   4b0d4:	tst	w0, #0x40000000
   4b0d8:	mov	w8, #0x45d                 	// #1117
   4b0dc:	mov	w9, #0x45a                 	// #1114
   4b0e0:	csel	w0, w9, w8, eq  // eq = none
   4b0e4:	ret
   4b0e8:	tbnz	w0, #23, 4b78c <aarch64_opcode_lookup@@Base+0x591c>
   4b0ec:	mov	w8, #0x20c                 	// #524
   4b0f0:	mov	w9, #0x1ee                 	// #494
   4b0f4:	csel	w0, w9, w8, eq  // eq = none
   4b0f8:	ret
   4b0fc:	mov	w0, #0x16c                 	// #364
   4b100:	ret
   4b104:	tbnz	w0, #31, 4b85c <aarch64_opcode_lookup@@Base+0x59ec>
   4b108:	tst	w0, #0x40000000
   4b10c:	mov	w8, #0x469                 	// #1129
   4b110:	mov	w9, #0x466                 	// #1126
   4b114:	csel	w0, w9, w8, eq  // eq = none
   4b118:	ret
   4b11c:	mov	w0, #0x105                 	// #261
   4b120:	ret
   4b124:	mov	w0, #0x928                 	// #2344
   4b128:	ret
   4b12c:	mov	w0, #0x3c0                 	// #960
   4b130:	ret
   4b134:	mov	w8, #0x6dc                 	// #1756
   4b138:	mov	w9, #0x720                 	// #1824
   4b13c:	csel	w0, w9, w8, eq  // eq = none
   4b140:	ret
   4b144:	tbnz	w0, #10, 4b904 <aarch64_opcode_lookup@@Base+0x5a94>
   4b148:	tbnz	w0, #11, 4ba6c <aarch64_opcode_lookup@@Base+0x5bfc>
   4b14c:	tst	w0, #0x1000
   4b150:	mov	w8, #0x7ec                 	// #2028
   4b154:	mov	w9, #0x73f                 	// #1855
   4b158:	csel	w0, w9, w8, eq  // eq = none
   4b15c:	ret
   4b160:	tst	w0, #0x40000000
   4b164:	mov	w8, #0x855                 	// #2133
   4b168:	mov	w9, #0x50a                 	// #1290
   4b16c:	csel	w0, w9, w8, eq  // eq = none
   4b170:	ret
   4b174:	mov	w8, #0x592                 	// #1426
   4b178:	mov	w9, #0x5a8                 	// #1448
   4b17c:	csel	w0, w9, w8, eq  // eq = none
   4b180:	ret
   4b184:	tbnz	w0, #16, 4b90c <aarch64_opcode_lookup@@Base+0x5a9c>
   4b188:	tst	w0, #0x40000
   4b18c:	mov	w8, #0x709                 	// #1801
   4b190:	mov	w9, #0x703                 	// #1795
   4b194:	csel	w0, w9, w8, eq  // eq = none
   4b198:	ret
   4b19c:	tst	w0, #0x800000
   4b1a0:	tbnz	w0, #19, 4b914 <aarch64_opcode_lookup@@Base+0x5aa4>
   4b1a4:	mov	w8, #0xca                  	// #202
   4b1a8:	mov	w9, #0xb6                  	// #182
   4b1ac:	csel	w0, w9, w8, eq  // eq = none
   4b1b0:	ret
   4b1b4:	tbnz	w0, #20, 4b924 <aarch64_opcode_lookup@@Base+0x5ab4>
   4b1b8:	mov	w0, #0x5b6                 	// #1462
   4b1bc:	ret
   4b1c0:	tst	w0, #0x80000
   4b1c4:	mov	w8, #0x518                 	// #1304
   4b1c8:	mov	w9, #0x514                 	// #1300
   4b1cc:	csel	w0, w9, w8, eq  // eq = none
   4b1d0:	ret
   4b1d4:	mov	w0, #0x567                 	// #1383
   4b1d8:	ret
   4b1dc:	mov	w0, #0x916                 	// #2326
   4b1e0:	ret
   4b1e4:	tst	w0, #0x40000000
   4b1e8:	mov	w8, #0x8d5                 	// #2261
   4b1ec:	mov	w9, #0x6c6                 	// #1734
   4b1f0:	csel	w0, w9, w8, eq  // eq = none
   4b1f4:	ret
   4b1f8:	tst	w0, #0x800000
   4b1fc:	mov	w8, #0x739                 	// #1849
   4b200:	mov	w9, #0x73c                 	// #1852
   4b204:	csel	w0, w9, w8, eq  // eq = none
   4b208:	ret
   4b20c:	tbnz	w0, #22, 4b930 <aarch64_opcode_lookup@@Base+0x5ac0>
   4b210:	mov	w8, #0x5d1                 	// #1489
   4b214:	mov	w9, #0x5c9                 	// #1481
   4b218:	csel	w0, w9, w8, eq  // eq = none
   4b21c:	ret
   4b220:	mov	w8, #0x891                 	// #2193
   4b224:	cinc	w0, w8, ne  // ne = any
   4b228:	ret
   4b22c:	tst	w0, #0x800
   4b230:	mov	w8, #0x83a                 	// #2106
   4b234:	mov	w9, #0x883                 	// #2179
   4b238:	csel	w0, w9, w8, eq  // eq = none
   4b23c:	ret
   4b240:	tst	w0, #0x100000
   4b244:	mov	w8, #0x55b                 	// #1371
   4b248:	mov	w9, #0x7b5                 	// #1973
   4b24c:	csel	w0, w9, w8, eq  // eq = none
   4b250:	ret
   4b254:	mov	w0, #0x7c5                 	// #1989
   4b258:	ret
   4b25c:	mov	w8, #0x595                 	// #1429
   4b260:	mov	w9, #0x58e                 	// #1422
   4b264:	csel	w0, w9, w8, eq  // eq = none
   4b268:	ret
   4b26c:	mov	w0, #0x88c                 	// #2188
   4b270:	ret
   4b274:	tbnz	w0, #20, 4b940 <aarch64_opcode_lookup@@Base+0x5ad0>
   4b278:	tst	w0, #0x400000
   4b27c:	mov	w8, #0x57c                 	// #1404
   4b280:	mov	w9, #0x57a                 	// #1402
   4b284:	csel	w0, w9, w8, eq  // eq = none
   4b288:	ret
   4b28c:	mov	w8, #0x8d6                 	// #2262
   4b290:	mov	w9, #0x6c0                 	// #1728
   4b294:	csel	w0, w9, w8, eq  // eq = none
   4b298:	ret
   4b29c:	tst	w0, #0x800000
   4b2a0:	mov	w8, #0x7cd                 	// #1997
   4b2a4:	mov	w9, #0x7d0                 	// #2000
   4b2a8:	csel	w0, w9, w8, eq  // eq = none
   4b2ac:	ret
   4b2b0:	mov	w8, #0x54e                 	// #1358
   4b2b4:	mov	w9, #0x550                 	// #1360
   4b2b8:	csel	w0, w9, w8, eq  // eq = none
   4b2bc:	ret
   4b2c0:	mov	w8, #0x13f                 	// #319
   4b2c4:	mov	w9, #0x132                 	// #306
   4b2c8:	csel	w0, w9, w8, eq  // eq = none
   4b2cc:	ret
   4b2d0:	tst	w0, #0x800
   4b2d4:	mov	w8, #0x83b                 	// #2107
   4b2d8:	mov	w9, #0x884                 	// #2180
   4b2dc:	csel	w0, w9, w8, eq  // eq = none
   4b2e0:	ret
   4b2e4:	tst	w0, #0x100000
   4b2e8:	mov	w8, #0x504                 	// #1284
   4b2ec:	mov	w9, #0x723                 	// #1827
   4b2f0:	csel	w0, w9, w8, eq  // eq = none
   4b2f4:	ret
   4b2f8:	tst	w0, #0x1000
   4b2fc:	mov	w8, #0x96b                 	// #2411
   4b300:	mov	w9, #0x969                 	// #2409
   4b304:	csel	w0, w9, w8, eq  // eq = none
   4b308:	ret
   4b30c:	tst	w0, #0x40000000
   4b310:	mov	w8, #0x8b0                 	// #2224
   4b314:	mov	w9, #0x50e                 	// #1294
   4b318:	csel	w0, w9, w8, eq  // eq = none
   4b31c:	ret
   4b320:	tbnz	w0, #22, 4b948 <aarch64_opcode_lookup@@Base+0x5ad8>
   4b324:	tst	w0, #0x800000
   4b328:	mov	w8, #0x976                 	// #2422
   4b32c:	mov	w9, #0x817                 	// #2071
   4b330:	csel	w0, w9, w8, eq  // eq = none
   4b334:	ret
   4b338:	tst	w0, #0x40000000
   4b33c:	mov	w8, #0xae                  	// #174
   4b340:	cinc	w0, w8, ne  // ne = any
   4b344:	ret
   4b348:	mov	w8, #0x72d                 	// #1837
   4b34c:	mov	w9, #0x730                 	// #1840
   4b350:	csel	w0, w9, w8, eq  // eq = none
   4b354:	ret
   4b358:	mov	w8, #0x895                 	// #2197
   4b35c:	cinc	w0, w8, ne  // ne = any
   4b360:	ret
   4b364:	mov	w8, #0x510                 	// #1296
   4b368:	mov	w9, #0x7b8                 	// #1976
   4b36c:	csel	w0, w9, w8, eq  // eq = none
   4b370:	ret
   4b374:	mov	w0, #0x859                 	// #2137
   4b378:	ret
   4b37c:	mov	w8, #0x59b                 	// #1435
   4b380:	mov	w9, #0x58d                 	// #1421
   4b384:	csel	w0, w9, w8, eq  // eq = none
   4b388:	ret
   4b38c:	mov	w8, #0x586                 	// #1414
   4b390:	mov	w9, #0x57e                 	// #1406
   4b394:	csel	w0, w9, w8, eq  // eq = none
   4b398:	ret
   4b39c:	mov	w8, #0x8d7                 	// #2263
   4b3a0:	mov	w9, #0x6c3                 	// #1731
   4b3a4:	csel	w0, w9, w8, eq  // eq = none
   4b3a8:	ret
   4b3ac:	mov	w8, #0x7c0                 	// #1984
   4b3b0:	mov	w9, #0x7c3                 	// #1987
   4b3b4:	csel	w0, w9, w8, eq  // eq = none
   4b3b8:	ret
   4b3bc:	mov	w0, #0x5cf                 	// #1487
   4b3c0:	ret
   4b3c4:	tst	w0, #0x40000000
   4b3c8:	mov	w8, #0x872                 	// #2162
   4b3cc:	mov	w9, #0x50b                 	// #1291
   4b3d0:	csel	w0, w9, w8, eq  // eq = none
   4b3d4:	ret
   4b3d8:	mov	w8, #0x598                 	// #1432
   4b3dc:	mov	w9, #0x5c4                 	// #1476
   4b3e0:	csel	w0, w9, w8, eq  // eq = none
   4b3e4:	ret
   4b3e8:	tbnz	w0, #20, 4b950 <aarch64_opcode_lookup@@Base+0x5ae0>
   4b3ec:	mov	w0, #0x5bb                 	// #1467
   4b3f0:	ret
   4b3f4:	mov	w0, #0x91d                 	// #2333
   4b3f8:	ret
   4b3fc:	tst	w0, #0x40000000
   4b400:	mov	w8, #0xb0                  	// #176
   4b404:	cinc	w0, w8, ne  // ne = any
   4b408:	ret
   4b40c:	tst	w0, #0x40000000
   4b410:	mov	w8, #0x8ed                 	// #2285
   4b414:	mov	w9, #0x6c7                 	// #1735
   4b418:	csel	w0, w9, w8, eq  // eq = none
   4b41c:	ret
   4b420:	tst	w0, #0x800000
   4b424:	mov	w8, #0x5ca                 	// #1482
   4b428:	mov	w9, #0x5cc                 	// #1484
   4b42c:	csel	w0, w9, w8, eq  // eq = none
   4b430:	ret
   4b434:	tbnz	w0, #22, 4b964 <aarch64_opcode_lookup@@Base+0x5af4>
   4b438:	mov	w8, #0x743                 	// #1859
   4b43c:	mov	w9, #0x737                 	// #1847
   4b440:	csel	w0, w9, w8, eq  // eq = none
   4b444:	ret
   4b448:	mov	w0, #0x95b                 	// #2395
   4b44c:	ret
   4b450:	mov	w0, #0x7c6                 	// #1990
   4b454:	ret
   4b458:	mov	w0, #0x593                 	// #1427
   4b45c:	ret
   4b460:	mov	w0, #0x6e0                 	// #1760
   4b464:	ret
   4b468:	tbnz	w0, #20, 4b974 <aarch64_opcode_lookup@@Base+0x5b04>
   4b46c:	mov	w0, #0x5c0                 	// #1472
   4b470:	ret
   4b474:	tst	w0, #0x40000000
   4b478:	mov	w8, #0x8f7                 	// #2295
   4b47c:	mov	w9, #0x6c1                 	// #1729
   4b480:	csel	w0, w9, w8, eq  // eq = none
   4b484:	ret
   4b488:	tst	w0, #0x800000
   4b48c:	mov	w8, #0x54d                 	// #1357
   4b490:	mov	w9, #0x54f                 	// #1359
   4b494:	csel	w0, w9, w8, eq  // eq = none
   4b498:	ret
   4b49c:	tbnz	w0, #22, 4b980 <aarch64_opcode_lookup@@Base+0x5b10>
   4b4a0:	mov	w8, #0x7d8                 	// #2008
   4b4a4:	mov	w9, #0x7cc                 	// #1996
   4b4a8:	csel	w0, w9, w8, eq  // eq = none
   4b4ac:	ret
   4b4b0:	tst	w0, #0x1000
   4b4b4:	mov	w8, #0x96c                 	// #2412
   4b4b8:	mov	w9, #0x96a                 	// #2410
   4b4bc:	csel	w0, w9, w8, eq  // eq = none
   4b4c0:	ret
   4b4c4:	mov	w0, #0x8c8                 	// #2248
   4b4c8:	ret
   4b4cc:	mov	w0, #0x958                 	// #2392
   4b4d0:	ret
   4b4d4:	tbnz	w0, #17, 4b990 <aarch64_opcode_lookup@@Base+0x5b20>
   4b4d8:	tbnz	w0, #18, 4ba74 <aarch64_opcode_lookup@@Base+0x5c04>
   4b4dc:	mov	w0, #0x583                 	// #1411
   4b4e0:	ret
   4b4e4:	tst	w0, #0x20000
   4b4e8:	mov	w8, #0x7db                 	// #2011
   4b4ec:	mov	w9, #0x79c                 	// #1948
   4b4f0:	csel	w0, w9, w8, eq  // eq = none
   4b4f4:	ret
   4b4f8:	tst	w0, #0x40000000
   4b4fc:	tbnz	w0, #23, 4b99c <aarch64_opcode_lookup@@Base+0x5b2c>
   4b500:	mov	w8, #0xb2                  	// #178
   4b504:	cinc	w0, w8, ne  // ne = any
   4b508:	ret
   4b50c:	mov	w0, #0x904                 	// #2308
   4b510:	ret
   4b514:	mov	w8, #0x72c                 	// #1836
   4b518:	mov	w9, #0x72f                 	// #1839
   4b51c:	csel	w0, w9, w8, eq  // eq = none
   4b520:	ret
   4b524:	mov	w0, #0x95c                 	// #2396
   4b528:	ret
   4b52c:	tst	w0, #0x800000
   4b530:	mov	w8, #0x58c                 	// #1420
   4b534:	mov	w9, #0x588                 	// #1416
   4b538:	csel	w0, w9, w8, eq  // eq = none
   4b53c:	ret
   4b540:	tst	w0, #0x40000000
   4b544:	mov	w8, #0xb4                  	// #180
   4b548:	cinc	w0, w8, ne  // ne = any
   4b54c:	ret
   4b550:	mov	w0, #0x8f8                 	// #2296
   4b554:	ret
   4b558:	mov	w8, #0x7c1                 	// #1985
   4b55c:	mov	w9, #0x7c4                 	// #1988
   4b560:	csel	w0, w9, w8, eq  // eq = none
   4b564:	ret
   4b568:	mov	w8, #0x317                 	// #791
   4b56c:	mov	w9, #0x30f                 	// #783
   4b570:	csel	w0, w9, w8, eq  // eq = none
   4b574:	ret
   4b578:	tbnz	w0, #31, 4ba2c <aarch64_opcode_lookup@@Base+0x5bbc>
   4b57c:	tst	w0, #0x40000000
   4b580:	mov	w8, #0x413                 	// #1043
   4b584:	mov	w9, #0x410                 	// #1040
   4b588:	csel	w0, w9, w8, eq  // eq = none
   4b58c:	ret
   4b590:	tst	w0, #0x10000
   4b594:	mov	w8, #0x2b5                 	// #693
   4b598:	mov	w9, #0x2ad                 	// #685
   4b59c:	csel	w0, w9, w8, eq  // eq = none
   4b5a0:	ret
   4b5a4:	mov	w0, #0x339                 	// #825
   4b5a8:	ret
   4b5ac:	mov	w8, #0x319                 	// #793
   4b5b0:	mov	w9, #0x311                 	// #785
   4b5b4:	csel	w0, w9, w8, eq  // eq = none
   4b5b8:	ret
   4b5bc:	tbnz	w0, #31, 4ba34 <aarch64_opcode_lookup@@Base+0x5bc4>
   4b5c0:	tst	w0, #0x40000000
   4b5c4:	mov	w8, #0x443                 	// #1091
   4b5c8:	mov	w9, #0x440                 	// #1088
   4b5cc:	csel	w0, w9, w8, eq  // eq = none
   4b5d0:	ret
   4b5d4:	tst	w0, #0x20000000
   4b5d8:	tbnz	w0, #23, 4b9e4 <aarch64_opcode_lookup@@Base+0x5b74>
   4b5dc:	mov	w8, #0x21a                 	// #538
   4b5e0:	cinc	w0, w8, eq  // eq = none
   4b5e4:	ret
   4b5e8:	mov	w8, #0x21c                 	// #540
   4b5ec:	cinc	w0, w8, eq  // eq = none
   4b5f0:	ret
   4b5f4:	tst	w0, #0x20000000
   4b5f8:	tbnz	w0, #23, 4b9f0 <aarch64_opcode_lookup@@Base+0x5b80>
   4b5fc:	mov	w8, #0x26                  	// #38
   4b600:	cinc	w0, w8, eq  // eq = none
   4b604:	ret
   4b608:	tbnz	w0, #31, 4ba3c <aarch64_opcode_lookup@@Base+0x5bcc>
   4b60c:	tst	w0, #0x40000000
   4b610:	mov	w8, #0x407                 	// #1031
   4b614:	mov	w9, #0x404                 	// #1028
   4b618:	csel	w0, w9, w8, eq  // eq = none
   4b61c:	ret
   4b620:	mov	w8, #0xfb                  	// #251
   4b624:	mov	w9, #0xcc                  	// #204
   4b628:	csel	w0, w9, w8, eq  // eq = none
   4b62c:	ret
   4b630:	mov	w0, #0x33b                 	// #827
   4b634:	ret
   4b638:	tst	w0, #0x20000000
   4b63c:	mov	w8, #0x23                  	// #35
   4b640:	mov	w9, #0x1f                  	// #31
   4b644:	csel	w0, w9, w8, eq  // eq = none
   4b648:	ret
   4b64c:	mov	w0, #0x20                  	// #32
   4b650:	ret
   4b654:	tst	w0, #0x20000000
   4b658:	mov	w8, #0xf6                  	// #246
   4b65c:	mov	w9, #0xc3                  	// #195
   4b660:	csel	w0, w9, w8, eq  // eq = none
   4b664:	ret
   4b668:	mov	w8, #0x211                 	// #529
   4b66c:	mov	w9, #0x1f5                 	// #501
   4b670:	csel	w0, w9, w8, eq  // eq = none
   4b674:	ret
   4b678:	mov	w8, #0x102                 	// #258
   4b67c:	mov	w9, #0xd3                  	// #211
   4b680:	csel	w0, w9, w8, eq  // eq = none
   4b684:	ret
   4b688:	mov	w0, #0x219                 	// #537
   4b68c:	ret
   4b690:	mov	w8, #0x215                 	// #533
   4b694:	mov	w9, #0x1f9                 	// #505
   4b698:	csel	w0, w9, w8, eq  // eq = none
   4b69c:	ret
   4b6a0:	mov	w0, #0x104                 	// #260
   4b6a4:	ret
   4b6a8:	tbnz	w0, #31, 4ba44 <aarch64_opcode_lookup@@Base+0x5bd4>
   4b6ac:	tst	w0, #0x40000000
   4b6b0:	mov	w8, #0x415                 	// #1045
   4b6b4:	mov	w9, #0x412                 	// #1042
   4b6b8:	csel	w0, w9, w8, eq  // eq = none
   4b6bc:	ret
   4b6c0:	mov	w0, #0x2b7                 	// #695
   4b6c4:	ret
   4b6c8:	mov	w0, #0x33d                 	// #829
   4b6cc:	ret
   4b6d0:	tbnz	w0, #31, 4ba4c <aarch64_opcode_lookup@@Base+0x5bdc>
   4b6d4:	tst	w0, #0x40000000
   4b6d8:	mov	w8, #0x445                 	// #1093
   4b6dc:	mov	w9, #0x442                 	// #1090
   4b6e0:	csel	w0, w9, w8, eq  // eq = none
   4b6e4:	ret
   4b6e8:	tst	w0, #0x80000
   4b6ec:	mov	w8, #0xee                  	// #238
   4b6f0:	cinc	w0, w8, ne  // ne = any
   4b6f4:	ret
   4b6f8:	tst	w0, #0x100000
   4b6fc:	mov	w8, #0x31d                 	// #797
   4b700:	mov	w9, #0x31b                 	// #795
   4b704:	csel	w0, w9, w8, eq  // eq = none
   4b708:	ret
   4b70c:	tbnz	w0, #31, 4ba54 <aarch64_opcode_lookup@@Base+0x5be4>
   4b710:	tst	w0, #0x40000000
   4b714:	mov	w8, #0x409                 	// #1033
   4b718:	mov	w9, #0x406                 	// #1030
   4b71c:	csel	w0, w9, w8, eq  // eq = none
   4b720:	ret
   4b724:	mov	w8, #0xfc                  	// #252
   4b728:	mov	w9, #0xcd                  	// #205
   4b72c:	csel	w0, w9, w8, eq  // eq = none
   4b730:	ret
   4b734:	mov	w0, #0x33f                 	// #831
   4b738:	ret
   4b73c:	mov	w8, #0xfe                  	// #254
   4b740:	mov	w9, #0xcf                  	// #207
   4b744:	csel	w0, w9, w8, eq  // eq = none
   4b748:	ret
   4b74c:	mov	w8, #0x100                 	// #256
   4b750:	mov	w9, #0xd1                  	// #209
   4b754:	csel	w0, w9, w8, eq  // eq = none
   4b758:	ret
   4b75c:	mov	w8, #0x212                 	// #530
   4b760:	mov	w9, #0x1f6                 	// #502
   4b764:	csel	w0, w9, w8, eq  // eq = none
   4b768:	ret
   4b76c:	mov	w8, #0x103                 	// #259
   4b770:	mov	w9, #0xd4                  	// #212
   4b774:	csel	w0, w9, w8, eq  // eq = none
   4b778:	ret
   4b77c:	mov	w8, #0x214                 	// #532
   4b780:	mov	w9, #0x1f8                 	// #504
   4b784:	csel	w0, w9, w8, eq  // eq = none
   4b788:	ret
   4b78c:	mov	w8, #0x216                 	// #534
   4b790:	mov	w9, #0x1fa                 	// #506
   4b794:	csel	w0, w9, w8, eq  // eq = none
   4b798:	ret
   4b79c:	mov	w0, #0x41b                 	// #1051
   4b7a0:	ret
   4b7a4:	mov	w0, #0x427                 	// #1063
   4b7a8:	ret
   4b7ac:	mov	w0, #0x433                 	// #1075
   4b7b0:	ret
   4b7b4:	mov	w0, #0x935                 	// #2357
   4b7b8:	ret
   4b7bc:	mov	w0, #0x44b                 	// #1099
   4b7c0:	ret
   4b7c4:	mov	w0, #0x457                 	// #1111
   4b7c8:	ret
   4b7cc:	mov	w0, #0x463                 	// #1123
   4b7d0:	ret
   4b7d4:	mov	w0, #0x423                 	// #1059
   4b7d8:	ret
   4b7dc:	mov	w0, #0x42f                 	// #1071
   4b7e0:	ret
   4b7e4:	mov	w0, #0x43b                 	// #1083
   4b7e8:	ret
   4b7ec:	mov	w0, #0x453                 	// #1107
   4b7f0:	ret
   4b7f4:	mov	w0, #0x45f                 	// #1119
   4b7f8:	ret
   4b7fc:	mov	w0, #0x46b                 	// #1131
   4b800:	ret
   4b804:	mov	w0, #0x422                 	// #1058
   4b808:	ret
   4b80c:	mov	w0, #0x42e                 	// #1070
   4b810:	ret
   4b814:	mov	w0, #0x43a                 	// #1082
   4b818:	ret
   4b81c:	mov	w0, #0x452                 	// #1106
   4b820:	ret
   4b824:	mov	w0, #0x45e                 	// #1118
   4b828:	ret
   4b82c:	mov	w0, #0x46a                 	// #1130
   4b830:	ret
   4b834:	mov	w0, #0x424                 	// #1060
   4b838:	ret
   4b83c:	mov	w0, #0x430                 	// #1072
   4b840:	ret
   4b844:	mov	w0, #0x43c                 	// #1084
   4b848:	ret
   4b84c:	mov	w0, #0x454                 	// #1108
   4b850:	ret
   4b854:	mov	w0, #0x460                 	// #1120
   4b858:	ret
   4b85c:	mov	w0, #0x46c                 	// #1132
   4b860:	ret
   4b864:	tst	w0, #0x10
   4b868:	mov	w8, #0x571                 	// #1393
   4b86c:	mov	w9, #0x56f                 	// #1391
   4b870:	csel	w0, w9, w8, eq  // eq = none
   4b874:	ret
   4b878:	mov	w0, #0x915                 	// #2325
   4b87c:	ret
   4b880:	mov	w8, #0x542                 	// #1346
   4b884:	cinc	w0, w8, eq  // eq = none
   4b888:	ret
   4b88c:	tst	w0, #0x80000
   4b890:	mov	w8, #0xbe                  	// #190
   4b894:	cinc	w0, w8, ne  // ne = any
   4b898:	ret
   4b89c:	mov	w0, #0x5b5                 	// #1461
   4b8a0:	ret
   4b8a4:	mov	w8, #0x73b                 	// #1851
   4b8a8:	mov	w9, #0x73e                 	// #1854
   4b8ac:	csel	w0, w9, w8, eq  // eq = none
   4b8b0:	ret
   4b8b4:	tst	w0, #0x400000
   4b8b8:	mov	w8, #0x706                 	// #1798
   4b8bc:	cinc	w0, w8, ne  // ne = any
   4b8c0:	ret
   4b8c4:	tst	w0, #0x800000
   4b8c8:	mov	w8, #0x7ad                 	// #1965
   4b8cc:	mov	w9, #0x7a9                 	// #1961
   4b8d0:	csel	w0, w9, w8, eq  // eq = none
   4b8d4:	ret
   4b8d8:	mov	w8, #0x7ce                 	// #1998
   4b8dc:	mov	w9, #0x7d1                 	// #2001
   4b8e0:	csel	w0, w9, w8, eq  // eq = none
   4b8e4:	ret
   4b8e8:	mov	w0, #0x7dc                 	// #2012
   4b8ec:	ret
   4b8f0:	tst	w0, #0x800000
   4b8f4:	mov	w8, #0x7ae                 	// #1966
   4b8f8:	mov	w9, #0x7ac                 	// #1964
   4b8fc:	csel	w0, w9, w8, eq  // eq = none
   4b900:	ret
   4b904:	mov	w0, #0x740                 	// #1856
   4b908:	ret
   4b90c:	mov	w0, #0x702                 	// #1794
   4b910:	ret
   4b914:	mov	w8, #0xcb                  	// #203
   4b918:	mov	w9, #0xb7                  	// #183
   4b91c:	csel	w0, w9, w8, eq  // eq = none
   4b920:	ret
   4b924:	tbnz	w0, #22, 4ba88 <aarch64_opcode_lookup@@Base+0x5c18>
   4b928:	mov	w0, #0x712                 	// #1810
   4b92c:	ret
   4b930:	mov	w8, #0x5cb                 	// #1483
   4b934:	mov	w9, #0x5cd                 	// #1485
   4b938:	csel	w0, w9, w8, eq  // eq = none
   4b93c:	ret
   4b940:	mov	w0, #0x58a                 	// #1418
   4b944:	ret
   4b948:	mov	w0, #0x57d                 	// #1405
   4b94c:	ret
   4b950:	tst	w0, #0x800000
   4b954:	mov	w8, #0x716                 	// #1814
   4b958:	mov	w9, #0x714                 	// #1812
   4b95c:	csel	w0, w9, w8, eq  // eq = none
   4b960:	ret
   4b964:	mov	w8, #0x73a                 	// #1850
   4b968:	mov	w9, #0x73d                 	// #1853
   4b96c:	csel	w0, w9, w8, eq  // eq = none
   4b970:	ret
   4b974:	tbnz	w0, #22, 4ba9c <aarch64_opcode_lookup@@Base+0x5c2c>
   4b978:	mov	w0, #0x589                 	// #1417
   4b97c:	ret
   4b980:	mov	w8, #0x7cf                 	// #1999
   4b984:	mov	w9, #0x7d2                 	// #2002
   4b988:	csel	w0, w9, w8, eq  // eq = none
   4b98c:	ret
   4b990:	tbnz	w0, #18, 4bab0 <aarch64_opcode_lookup@@Base+0x5c40>
   4b994:	mov	w0, #0x57f                 	// #1407
   4b998:	ret
   4b99c:	mov	w8, #0x97f                 	// #2431
   4b9a0:	cinc	w0, w8, ne  // ne = any
   4b9a4:	ret
   4b9a8:	mov	w8, #0xfd                  	// #253
   4b9ac:	mov	w9, #0xce                  	// #206
   4b9b0:	csel	w0, w9, w8, eq  // eq = none
   4b9b4:	ret
   4b9b8:	mov	w8, #0xff                  	// #255
   4b9bc:	mov	w9, #0xd0                  	// #208
   4b9c0:	csel	w0, w9, w8, eq  // eq = none
   4b9c4:	ret
   4b9c8:	mov	w8, #0x28                  	// #40
   4b9cc:	cinc	w0, w8, eq  // eq = none
   4b9d0:	ret
   4b9d4:	mov	w8, #0x213                 	// #531
   4b9d8:	mov	w9, #0x1f7                 	// #503
   4b9dc:	csel	w0, w9, w8, eq  // eq = none
   4b9e0:	ret
   4b9e4:	mov	w8, #0x220                 	// #544
   4b9e8:	cinc	w0, w8, eq  // eq = none
   4b9ec:	ret
   4b9f0:	mov	w8, #0x2a                  	// #42
   4b9f4:	cinc	w0, w8, eq  // eq = none
   4b9f8:	ret
   4b9fc:	mov	w0, #0x40f                 	// #1039
   4ba00:	ret
   4ba04:	mov	w0, #0x43f                 	// #1087
   4ba08:	ret
   4ba0c:	mov	w0, #0x403                 	// #1027
   4ba10:	ret
   4ba14:	mov	w0, #0x417                 	// #1047
   4ba18:	ret
   4ba1c:	mov	w0, #0x447                 	// #1095
   4ba20:	ret
   4ba24:	mov	w0, #0x40b                 	// #1035
   4ba28:	ret
   4ba2c:	mov	w0, #0x416                 	// #1046
   4ba30:	ret
   4ba34:	mov	w0, #0x446                 	// #1094
   4ba38:	ret
   4ba3c:	mov	w0, #0x40a                 	// #1034
   4ba40:	ret
   4ba44:	mov	w0, #0x418                 	// #1048
   4ba48:	ret
   4ba4c:	mov	w0, #0x448                 	// #1096
   4ba50:	ret
   4ba54:	mov	w0, #0x40c                 	// #1036
   4ba58:	ret
   4ba5c:	tst	w0, #0x100000
   4ba60:	mov	w8, #0x5d6                 	// #1494
   4ba64:	cinc	w0, w8, ne  // ne = any
   4ba68:	ret
   4ba6c:	mov	w0, #0x741                 	// #1857
   4ba70:	ret
   4ba74:	tst	w0, #0x800000
   4ba78:	mov	w8, #0x584                 	// #1412
   4ba7c:	mov	w9, #0x580                 	// #1408
   4ba80:	csel	w0, w9, w8, eq  // eq = none
   4ba84:	ret
   4ba88:	tst	w0, #0x800000
   4ba8c:	mov	w8, #0x715                 	// #1813
   4ba90:	mov	w9, #0x711                 	// #1809
   4ba94:	csel	w0, w9, w8, eq  // eq = none
   4ba98:	ret
   4ba9c:	tst	w0, #0x800000
   4baa0:	mov	w8, #0x58b                 	// #1419
   4baa4:	mov	w9, #0x587                 	// #1415
   4baa8:	csel	w0, w9, w8, eq  // eq = none
   4baac:	ret
   4bab0:	tst	w0, #0x800000
   4bab4:	mov	w8, #0x585                 	// #1413
   4bab8:	mov	w9, #0x581                 	// #1409
   4babc:	csel	w0, w9, w8, eq  // eq = none
   4bac0:	ret
   4bac4:	mov	w0, #0x70a                 	// #1802
   4bac8:	ret

000000000004bacc <aarch64_find_next_opcode@@Base>:
   4bacc:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   4bad0:	ldr	x8, [x8, #3848]
   4bad4:	mov	w10, #0x8e39                	// #36409
   4bad8:	movk	w10, #0x38e3, lsl #16
   4badc:	sub	x9, x0, x8
   4bae0:	lsr	x9, x9, #4
   4bae4:	mul	w10, w9, w10
   4bae8:	sub	w9, w10, #0xc
   4baec:	cmp	w9, #0x4be
   4baf0:	mov	x0, xzr
   4baf4:	b.hi	4bb1c <aarch64_find_next_opcode@@Base+0x50>  // b.pmore
   4baf8:	adrp	x10, 5e000 <fields@@Base+0x51b4>
   4bafc:	add	x10, x10, #0x694
   4bb00:	adr	x11, 4bb14 <aarch64_find_next_opcode@@Base+0x48>
   4bb04:	ldrh	w12, [x10, x9, lsl #1]
   4bb08:	add	x11, x11, x12, lsl #2
   4bb0c:	mov	w9, #0x13                  	// #19
   4bb10:	br	x11
   4bb14:	mov	w9, #0x14                  	// #20
   4bb18:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb1c:	sub	w9, w10, #0x659
   4bb20:	cmp	w9, #0x43
   4bb24:	b.hi	4bfc4 <aarch64_find_next_opcode@@Base+0x4f8>  // b.pmore
   4bb28:	adrp	x10, 5f000 <fields@@Base+0x61b4>
   4bb2c:	add	x10, x10, #0x12
   4bb30:	adr	x11, 4bb40 <aarch64_find_next_opcode@@Base+0x74>
   4bb34:	ldrh	w12, [x10, x9, lsl #1]
   4bb38:	add	x11, x11, x12, lsl #2
   4bb3c:	br	x11
   4bb40:	mov	w9, #0x65a                 	// #1626
   4bb44:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb48:	mov	w9, #0x176                 	// #374
   4bb4c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb50:	mov	w9, #0x177                 	// #375
   4bb54:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb58:	mov	w9, #0x17c                 	// #380
   4bb5c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb60:	mov	w9, #0x180                 	// #384
   4bb64:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb68:	mov	w9, #0x188                 	// #392
   4bb6c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb70:	mov	w9, #0x18a                 	// #394
   4bb74:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb78:	mov	w9, #0x18c                 	// #396
   4bb7c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb80:	mov	w9, #0x18d                 	// #397
   4bb84:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb88:	mov	w9, #0x194                 	// #404
   4bb8c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb90:	mov	w9, #0x198                 	// #408
   4bb94:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bb98:	mov	w9, #0x93                  	// #147
   4bb9c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bba0:	mov	w9, #0x1a0                 	// #416
   4bba4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bba8:	mov	w9, #0x178                 	// #376
   4bbac:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbb0:	mov	w9, #0x179                 	// #377
   4bbb4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbb8:	mov	w9, #0x17a                 	// #378
   4bbbc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbc0:	mov	w9, #0x17b                 	// #379
   4bbc4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbc8:	mov	w9, #0x17d                 	// #381
   4bbcc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbd0:	mov	w9, #0x184                 	// #388
   4bbd4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbd8:	mov	w9, #0x181                 	// #385
   4bbdc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbe0:	mov	w9, #0x186                 	// #390
   4bbe4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbe8:	mov	w9, #0x189                 	// #393
   4bbec:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbf0:	mov	w9, #0x18b                 	// #395
   4bbf4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bbf8:	mov	w9, #0x18e                 	// #398
   4bbfc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc00:	mov	w9, #0x18f                 	// #399
   4bc04:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc08:	mov	w9, #0x190                 	// #400
   4bc0c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc10:	mov	w9, #0x191                 	// #401
   4bc14:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc18:	mov	w9, #0x192                 	// #402
   4bc1c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc20:	mov	w9, #0x193                 	// #403
   4bc24:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc28:	mov	w9, #0x195                 	// #405
   4bc2c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc30:	mov	w9, #0x19c                 	// #412
   4bc34:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc38:	mov	w9, #0x199                 	// #409
   4bc3c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc40:	mov	w9, #0x19e                 	// #414
   4bc44:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc48:	mov	w9, #0x1a1                 	// #417
   4bc4c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc50:	mov	w9, #0x1a3                 	// #419
   4bc54:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc58:	mov	w9, #0x1b9                 	// #441
   4bc5c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc60:	mov	w9, #0x1ba                 	// #442
   4bc64:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc68:	mov	w9, #0x1bb                 	// #443
   4bc6c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc70:	mov	w9, #0x1bd                 	// #445
   4bc74:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc78:	mov	w9, #0x1be                 	// #446
   4bc7c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc80:	mov	w9, #0x1bf                 	// #447
   4bc84:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc88:	mov	w9, #0x1c1                 	// #449
   4bc8c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc90:	mov	w9, #0x1c2                 	// #450
   4bc94:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bc98:	mov	w9, #0x1c3                 	// #451
   4bc9c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bca0:	mov	w9, #0x1c5                 	// #453
   4bca4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bca8:	mov	w9, #0x1c6                 	// #454
   4bcac:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcb0:	mov	w9, #0x1c7                 	// #455
   4bcb4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcb8:	mov	w9, #0x1ce                 	// #462
   4bcbc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcc0:	mov	w9, #0x1cf                 	// #463
   4bcc4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcc8:	mov	w9, #0x1d2                 	// #466
   4bccc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcd0:	mov	w9, #0x1d3                 	// #467
   4bcd4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcd8:	mov	w9, #0x1da                 	// #474
   4bcdc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bce0:	mov	w9, #0x1db                 	// #475
   4bce4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bce8:	mov	w9, #0x1de                 	// #478
   4bcec:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcf0:	mov	w9, #0x1df                 	// #479
   4bcf4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bcf8:	mov	w9, #0x257                 	// #599
   4bcfc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd00:	mov	w9, #0x259                 	// #601
   4bd04:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd08:	mov	w9, #0x267                 	// #615
   4bd0c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd10:	mov	w9, #0x269                 	// #617
   4bd14:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd18:	mov	w9, #0x2f8                 	// #760
   4bd1c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd20:	mov	w9, #0x2fa                 	// #762
   4bd24:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd28:	mov	w9, #0x2fc                 	// #764
   4bd2c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd30:	mov	w9, #0x2fe                 	// #766
   4bd34:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd38:	mov	w9, #0x300                 	// #768
   4bd3c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd40:	mov	w9, #0x302                 	// #770
   4bd44:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd48:	mov	w9, #0x304                 	// #772
   4bd4c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd50:	mov	w9, #0x306                 	// #774
   4bd54:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd58:	mov	w9, #0x308                 	// #776
   4bd5c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd60:	mov	w9, #0x30a                 	// #778
   4bd64:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd68:	mov	w9, #0x30c                 	// #780
   4bd6c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd70:	mov	w9, #0x30e                 	// #782
   4bd74:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd78:	mov	w9, #0x310                 	// #784
   4bd7c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd80:	mov	w9, #0x312                 	// #786
   4bd84:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd88:	mov	w9, #0x314                 	// #788
   4bd8c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd90:	mov	w9, #0x316                 	// #790
   4bd94:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bd98:	mov	w9, #0x318                 	// #792
   4bd9c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bda0:	mov	w9, #0x31a                 	// #794
   4bda4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bda8:	mov	w9, #0x31f                 	// #799
   4bdac:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdb0:	mov	w9, #0x321                 	// #801
   4bdb4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdb8:	mov	w9, #0x323                 	// #803
   4bdbc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdc0:	mov	w9, #0x325                 	// #805
   4bdc4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdc8:	mov	w9, #0x327                 	// #807
   4bdcc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdd0:	mov	w9, #0x329                 	// #809
   4bdd4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdd8:	mov	w9, #0x32b                 	// #811
   4bddc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bde0:	mov	w9, #0x4a5                 	// #1189
   4bde4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bde8:	mov	w9, #0x331                 	// #817
   4bdec:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdf0:	mov	w9, #0x333                 	// #819
   4bdf4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bdf8:	mov	w9, #0x335                 	// #821
   4bdfc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be00:	mov	w9, #0x337                 	// #823
   4be04:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be08:	mov	w9, #0x981                 	// #2433
   4be0c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be10:	mov	w9, #0x33a                 	// #826
   4be14:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be18:	mov	w9, #0x33c                 	// #828
   4be1c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be20:	mov	w9, #0x33e                 	// #830
   4be24:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be28:	mov	w9, #0x340                 	// #832
   4be2c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be30:	mov	w9, #0x342                 	// #834
   4be34:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be38:	mov	w9, #0x344                 	// #836
   4be3c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be40:	mov	w9, #0x346                 	// #838
   4be44:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be48:	mov	w9, #0x348                 	// #840
   4be4c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be50:	mov	w9, #0x34a                 	// #842
   4be54:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be58:	mov	w9, #0x34c                 	// #844
   4be5c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be60:	mov	w9, #0x34e                 	// #846
   4be64:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be68:	mov	w9, #0x350                 	// #848
   4be6c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be70:	mov	w9, #0x352                 	// #850
   4be74:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be78:	mov	w9, #0x354                 	// #852
   4be7c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be80:	mov	w9, #0x356                 	// #854
   4be84:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be88:	mov	w9, #0x358                 	// #856
   4be8c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be90:	mov	w9, #0x35a                 	// #858
   4be94:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4be98:	mov	w9, #0x35c                 	// #860
   4be9c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bea0:	mov	w9, #0x35e                 	// #862
   4bea4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bea8:	mov	w9, #0x360                 	// #864
   4beac:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4beb0:	mov	w9, #0x362                 	// #866
   4beb4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4beb8:	mov	w9, #0x364                 	// #868
   4bebc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bec0:	mov	w9, #0x3c9                 	// #969
   4bec4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bec8:	mov	w9, #0x3ce                 	// #974
   4becc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bed0:	mov	w9, #0x3cf                 	// #975
   4bed4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bed8:	mov	w9, #0x4a6                 	// #1190
   4bedc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bee0:	mov	w9, #0x4a8                 	// #1192
   4bee4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bee8:	mov	w9, #0x4ca                 	// #1226
   4beec:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bef0:	mov	w9, #0x4a9                 	// #1193
   4bef4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bef8:	mov	w9, #0x4b9                 	// #1209
   4befc:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf00:	mov	w9, #0x4ba                 	// #1210
   4bf04:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf08:	mov	w9, #0x4bd                 	// #1213
   4bf0c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf10:	mov	w9, #0x4be                 	// #1214
   4bf14:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf18:	mov	w9, #0x4bf                 	// #1215
   4bf1c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf20:	mov	w9, #0x4c0                 	// #1216
   4bf24:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf28:	mov	w9, #0x4c8                 	// #1224
   4bf2c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf30:	mov	w9, #0x4c9                 	// #1225
   4bf34:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf38:	mov	w9, #0x956                 	// #2390
   4bf3c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf40:	mov	w9, #0x4cb                 	// #1227
   4bf44:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf48:	mov	w9, #0x65c                 	// #1628
   4bf4c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf50:	mov	w9, #0x65e                 	// #1630
   4bf54:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf58:	mov	w9, #0x660                 	// #1632
   4bf5c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf60:	mov	w9, #0x666                 	// #1638
   4bf64:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf68:	mov	w9, #0x66f                 	// #1647
   4bf6c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf70:	mov	w9, #0x671                 	// #1649
   4bf74:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf78:	mov	w9, #0x673                 	// #1651
   4bf7c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf80:	mov	w9, #0x67c                 	// #1660
   4bf84:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf88:	mov	w9, #0x67e                 	// #1662
   4bf8c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf90:	mov	w9, #0x680                 	// #1664
   4bf94:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bf98:	mov	w9, #0x688                 	// #1672
   4bf9c:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bfa0:	mov	w9, #0x68a                 	// #1674
   4bfa4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bfa8:	mov	w9, #0x692                 	// #1682
   4bfac:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bfb0:	mov	w9, #0x69b                 	// #1691
   4bfb4:	b	4bfbc <aarch64_find_next_opcode@@Base+0x4f0>
   4bfb8:	mov	w9, #0x69d                 	// #1693
   4bfbc:	mov	w10, #0x90                  	// #144
   4bfc0:	madd	x0, x9, x10, x8
   4bfc4:	ret

000000000004bfc8 <aarch64_find_alias_opcode@@Base>:
   4bfc8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   4bfcc:	ldr	x8, [x8, #3848]
   4bfd0:	mov	w10, #0x8e39                	// #36409
   4bfd4:	movk	w10, #0x38e3, lsl #16
   4bfd8:	sub	x9, x0, x8
   4bfdc:	lsr	x9, x9, #4
   4bfe0:	mul	w9, w9, w10
   4bfe4:	cmp	w9, #0x183
   4bfe8:	mov	x0, xzr
   4bfec:	b.le	4c024 <aarch64_find_alias_opcode@@Base+0x5c>
   4bff0:	cmp	w9, #0x6d9
   4bff4:	b.gt	4c05c <aarch64_find_alias_opcode@@Base+0x94>
   4bff8:	sub	w9, w9, #0x184
   4bffc:	cmp	w9, #0x40b
   4c000:	b.hi	4c4a4 <aarch64_find_alias_opcode@@Base+0x4dc>  // b.pmore
   4c004:	adrp	x10, 5f000 <fields@@Base+0x61b4>
   4c008:	add	x10, x10, #0xcc
   4c00c:	adr	x11, 4c01c <aarch64_find_alias_opcode@@Base+0x54>
   4c010:	ldrh	w12, [x10, x9, lsl #1]
   4c014:	add	x11, x11, x12, lsl #2
   4c018:	br	x11
   4c01c:	mov	w9, #0x185                 	// #389
   4c020:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c024:	cmp	w9, #0x97
   4c028:	b.gt	4c088 <aarch64_find_alias_opcode@@Base+0xc0>
   4c02c:	sub	w9, w9, #0x2
   4c030:	cmp	w9, #0x18
   4c034:	b.hi	4c4a4 <aarch64_find_alias_opcode@@Base+0x4dc>  // b.pmore
   4c038:	adrp	x10, 5f000 <fields@@Base+0x61b4>
   4c03c:	add	x10, x10, #0x9a
   4c040:	adr	x11, 4c054 <aarch64_find_alias_opcode@@Base+0x8c>
   4c044:	ldrh	w12, [x10, x9, lsl #1]
   4c048:	add	x11, x11, x12, lsl #2
   4c04c:	mov	w9, #0x3                   	// #3
   4c050:	br	x11
   4c054:	mov	w9, #0x5                   	// #5
   4c058:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c05c:	sub	w10, w9, #0x6da
   4c060:	cmp	w10, #0x4
   4c064:	b.hi	4c0b0 <aarch64_find_alias_opcode@@Base+0xe8>  // b.pmore
   4c068:	adrp	x9, 5f000 <fields@@Base+0x61b4>
   4c06c:	add	x9, x9, #0x8e4
   4c070:	adr	x11, 4c080 <aarch64_find_alias_opcode@@Base+0xb8>
   4c074:	ldrh	w12, [x9, x10, lsl #1]
   4c078:	add	x11, x11, x12, lsl #2
   4c07c:	br	x11
   4c080:	mov	w9, #0x4e8                 	// #1256
   4c084:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c088:	cmp	w9, #0x9b
   4c08c:	b.le	4c0c8 <aarch64_find_alias_opcode@@Base+0x100>
   4c090:	cmp	w9, #0x9c
   4c094:	b.eq	4c480 <aarch64_find_alias_opcode@@Base+0x4b8>  // b.none
   4c098:	cmp	w9, #0xf2
   4c09c:	b.eq	4c488 <aarch64_find_alias_opcode@@Base+0x4c0>  // b.none
   4c0a0:	cmp	w9, #0x13d
   4c0a4:	b.ne	4c4a4 <aarch64_find_alias_opcode@@Base+0x4dc>  // b.any
   4c0a8:	mov	w9, #0x13e                 	// #318
   4c0ac:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0b0:	cmp	w9, #0x71c
   4c0b4:	b.eq	4c490 <aarch64_find_alias_opcode@@Base+0x4c8>  // b.none
   4c0b8:	cmp	w9, #0x71d
   4c0bc:	b.ne	4c4a4 <aarch64_find_alias_opcode@@Base+0x4dc>  // b.any
   4c0c0:	mov	w9, #0x4f3                 	// #1267
   4c0c4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0c8:	cmp	w9, #0x98
   4c0cc:	b.eq	4c498 <aarch64_find_alias_opcode@@Base+0x4d0>  // b.none
   4c0d0:	cmp	w9, #0x9a
   4c0d4:	b.ne	4c4a4 <aarch64_find_alias_opcode@@Base+0x4dc>  // b.any
   4c0d8:	mov	w9, #0x9b                  	// #155
   4c0dc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0e0:	mov	w9, #0x187                 	// #391
   4c0e4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0e8:	mov	w9, #0x19d                 	// #413
   4c0ec:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0f0:	mov	w9, #0x19f                 	// #415
   4c0f4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c0f8:	mov	w9, #0x218                 	// #536
   4c0fc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c100:	mov	w9, #0x26f                 	// #623
   4c104:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c108:	mov	w9, #0x273                 	// #627
   4c10c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c110:	mov	w9, #0x279                 	// #633
   4c114:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c118:	mov	w9, #0x299                 	// #665
   4c11c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c120:	mov	w9, #0x29c                 	// #668
   4c124:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c128:	mov	w9, #0x29e                 	// #670
   4c12c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c130:	mov	w9, #0x2b0                 	// #688
   4c134:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c138:	mov	w9, #0x2ca                 	// #714
   4c13c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c140:	mov	w9, #0x2cc                 	// #716
   4c144:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c148:	mov	w9, #0x2ce                 	// #718
   4c14c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c150:	mov	w9, #0x2d0                 	// #720
   4c154:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c158:	mov	w9, #0x2d3                 	// #723
   4c15c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c160:	mov	w9, #0x2e0                 	// #736
   4c164:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c168:	mov	w9, #0x2e2                 	// #738
   4c16c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c170:	mov	w9, #0x2e4                 	// #740
   4c174:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c178:	mov	w9, #0x2e6                 	// #742
   4c17c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c180:	mov	w9, #0x2e9                 	// #745
   4c184:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c188:	mov	w9, #0x2eb                 	// #747
   4c18c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c190:	mov	w9, #0x2f6                 	// #758
   4c194:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c198:	mov	w9, #0x3df                 	// #991
   4c19c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1a0:	mov	w9, #0x3e1                 	// #993
   4c1a4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1a8:	mov	w9, #0x3e4                 	// #996
   4c1ac:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1b0:	mov	w9, #0x3e9                 	// #1001
   4c1b4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1b8:	mov	w9, #0x3eb                 	// #1003
   4c1bc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1c0:	mov	w9, #0x3ef                 	// #1007
   4c1c4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1c8:	mov	w9, #0x46d                 	// #1133
   4c1cc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1d0:	mov	w9, #0x46e                 	// #1134
   4c1d4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1d8:	mov	w9, #0x46f                 	// #1135
   4c1dc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1e0:	mov	w9, #0x470                 	// #1136
   4c1e4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1e8:	mov	w9, #0x471                 	// #1137
   4c1ec:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1f0:	mov	w9, #0x472                 	// #1138
   4c1f4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c1f8:	mov	w9, #0x473                 	// #1139
   4c1fc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c200:	mov	w9, #0x474                 	// #1140
   4c204:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c208:	mov	w9, #0x475                 	// #1141
   4c20c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c210:	mov	w9, #0x476                 	// #1142
   4c214:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c218:	mov	w9, #0x477                 	// #1143
   4c21c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c220:	mov	w9, #0x478                 	// #1144
   4c224:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c228:	mov	w9, #0x479                 	// #1145
   4c22c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c230:	mov	w9, #0x47a                 	// #1146
   4c234:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c238:	mov	w9, #0x47b                 	// #1147
   4c23c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c240:	mov	w9, #0x47c                 	// #1148
   4c244:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c248:	mov	w9, #0x47d                 	// #1149
   4c24c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c250:	mov	w9, #0x47e                 	// #1150
   4c254:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c258:	mov	w9, #0x47f                 	// #1151
   4c25c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c260:	mov	w9, #0x480                 	// #1152
   4c264:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c268:	mov	w9, #0x481                 	// #1153
   4c26c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c270:	mov	w9, #0x482                 	// #1154
   4c274:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c278:	mov	w9, #0x483                 	// #1155
   4c27c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c280:	mov	w9, #0x484                 	// #1156
   4c284:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c288:	mov	w9, #0x485                 	// #1157
   4c28c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c290:	mov	w9, #0x486                 	// #1158
   4c294:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c298:	mov	w9, #0x487                 	// #1159
   4c29c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2a0:	mov	w9, #0x488                 	// #1160
   4c2a4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2a8:	mov	w9, #0x489                 	// #1161
   4c2ac:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2b0:	mov	w9, #0x48a                 	// #1162
   4c2b4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2b8:	mov	w9, #0x48b                 	// #1163
   4c2bc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2c0:	mov	w9, #0x48c                 	// #1164
   4c2c4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2c8:	mov	w9, #0x48d                 	// #1165
   4c2cc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2d0:	mov	w9, #0x48e                 	// #1166
   4c2d4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2d8:	mov	w9, #0x48f                 	// #1167
   4c2dc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2e0:	mov	w9, #0x490                 	// #1168
   4c2e4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2e8:	mov	w9, #0x491                 	// #1169
   4c2ec:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2f0:	mov	w9, #0x492                 	// #1170
   4c2f4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c2f8:	mov	w9, #0x493                 	// #1171
   4c2fc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c300:	mov	w9, #0x494                 	// #1172
   4c304:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c308:	mov	w9, #0x495                 	// #1173
   4c30c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c310:	mov	w9, #0x496                 	// #1174
   4c314:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c318:	mov	w9, #0x497                 	// #1175
   4c31c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c320:	mov	w9, #0x498                 	// #1176
   4c324:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c328:	mov	w9, #0x499                 	// #1177
   4c32c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c330:	mov	w9, #0x49a                 	// #1178
   4c334:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c338:	mov	w9, #0x49b                 	// #1179
   4c33c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c340:	mov	w9, #0x49c                 	// #1180
   4c344:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c348:	mov	w9, #0x49e                 	// #1182
   4c34c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c350:	mov	w9, #0x4a0                 	// #1184
   4c354:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c358:	mov	w9, #0x4d3                 	// #1235
   4c35c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c360:	mov	w9, #0x4bc                 	// #1212
   4c364:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c368:	mov	w9, #0x4c7                 	// #1223
   4c36c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c370:	mov	w9, #0x7f1                 	// #2033
   4c374:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c378:	mov	w9, #0x4f2                 	// #1266
   4c37c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c380:	mov	w9, #0x4f6                 	// #1270
   4c384:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c388:	mov	w9, #0x7f2                 	// #2034
   4c38c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c390:	mov	w9, #0x7f5                 	// #2037
   4c394:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c398:	mov	w9, #0x7f3                 	// #2035
   4c39c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3a0:	mov	w9, #0x7f4                 	// #2036
   4c3a4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3a8:	mov	w9, #0x4ef                 	// #1263
   4c3ac:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3b0:	mov	w9, #0x4f1                 	// #1265
   4c3b4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3b8:	mov	w9, #0x7fc                 	// #2044
   4c3bc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3c0:	mov	w9, #0x4ea                 	// #1258
   4c3c4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3c8:	mov	w9, #0x4ec                 	// #1260
   4c3cc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3d0:	mov	w9, #0x7fb                 	// #2043
   4c3d4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3d8:	mov	w9, #0x4ed                 	// #1261
   4c3dc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3e0:	mov	w9, #0x7f6                 	// #2038
   4c3e4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3e8:	mov	w9, #0x4f7                 	// #1271
   4c3ec:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3f0:	mov	w9, #0x4f8                 	// #1272
   4c3f4:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c3f8:	mov	w9, #0x7f7                 	// #2039
   4c3fc:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c400:	mov	w9, #0x7f8                 	// #2040
   4c404:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c408:	mov	w9, #0x7f9                 	// #2041
   4c40c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c410:	mov	w9, #0x7fa                 	// #2042
   4c414:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c418:	mov	w9, #0x4e7                 	// #1255
   4c41c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c420:	mov	w9, #0x4e6                 	// #1254
   4c424:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c428:	mov	w9, #0x8                   	// #8
   4c42c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c430:	mov	w9, #0xb                   	// #11
   4c434:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c438:	mov	w9, #0xd                   	// #13
   4c43c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c440:	mov	w9, #0xf                   	// #15
   4c444:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c448:	mov	w9, #0x12                  	// #18
   4c44c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c450:	mov	w9, #0x17                  	// #23
   4c454:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c458:	mov	w9, #0x19                  	// #25
   4c45c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c460:	mov	w9, #0x1b                  	// #27
   4c464:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c468:	mov	w9, #0x7fd                 	// #2045
   4c46c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c470:	mov	w9, #0x4eb                 	// #1259
   4c474:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c478:	mov	w9, #0x4f5                 	// #1269
   4c47c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c480:	mov	w9, #0x9d                  	// #157
   4c484:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c488:	mov	w9, #0xf3                  	// #243
   4c48c:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c490:	mov	w9, #0x4f0                 	// #1264
   4c494:	b	4c49c <aarch64_find_alias_opcode@@Base+0x4d4>
   4c498:	mov	w9, #0x99                  	// #153
   4c49c:	mov	w10, #0x90                  	// #144
   4c4a0:	madd	x0, x9, x10, x8
   4c4a4:	ret

000000000004c4a8 <aarch64_find_next_alias_opcode@@Base>:
   4c4a8:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   4c4ac:	ldr	x8, [x8, #3848]
   4c4b0:	mov	w10, #0x8e39                	// #36409
   4c4b4:	movk	w10, #0x38e3, lsl #16
   4c4b8:	sub	x9, x0, x8
   4c4bc:	lsr	x9, x9, #4
   4c4c0:	mul	w10, w9, w10
   4c4c4:	sub	w9, w10, #0x3
   4c4c8:	cmp	w9, #0x4f5
   4c4cc:	mov	x0, xzr
   4c4d0:	b.hi	4c4f8 <aarch64_find_next_alias_opcode@@Base+0x50>  // b.pmore
   4c4d4:	adrp	x10, 5f000 <fields@@Base+0x61b4>
   4c4d8:	add	x10, x10, #0x8ee
   4c4dc:	adr	x11, 4c4f0 <aarch64_find_next_alias_opcode@@Base+0x48>
   4c4e0:	ldrh	w12, [x10, x9, lsl #1]
   4c4e4:	add	x11, x11, x12, lsl #2
   4c4e8:	mov	w9, #0x2                   	// #2
   4c4ec:	br	x11
   4c4f0:	mov	w9, #0x4                   	// #4
   4c4f4:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c4f8:	sub	w9, w10, #0x7f1
   4c4fc:	cmp	w9, #0xc
   4c500:	b.hi	4ca88 <aarch64_find_next_alias_opcode@@Base+0x5e0>  // b.pmore
   4c504:	adrp	x10, 60000 <fields@@Base+0x71b4>
   4c508:	add	x10, x10, #0x2da
   4c50c:	adr	x11, 4c51c <aarch64_find_next_alias_opcode@@Base+0x74>
   4c510:	ldrh	w12, [x10, x9, lsl #1]
   4c514:	add	x11, x11, x12, lsl #2
   4c518:	br	x11
   4c51c:	mov	w9, #0x503                 	// #1283
   4c520:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c524:	mov	w9, #0x7                   	// #7
   4c528:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c52c:	mov	w9, #0xa                   	// #10
   4c530:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c534:	mov	w9, #0xc                   	// #12
   4c538:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c53c:	mov	w9, #0xe                   	// #14
   4c540:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c544:	mov	w9, #0x11                  	// #17
   4c548:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c54c:	mov	w9, #0x16                  	// #22
   4c550:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c554:	mov	w9, #0x18                  	// #24
   4c558:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c55c:	mov	w9, #0x1c                  	// #28
   4c560:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c564:	mov	w9, #0x1a                  	// #26
   4c568:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c56c:	mov	w9, #0x98                  	// #152
   4c570:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c574:	mov	w9, #0x9a                  	// #154
   4c578:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c57c:	mov	w9, #0x9c                  	// #156
   4c580:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c584:	mov	w9, #0xf2                  	// #242
   4c588:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c58c:	mov	w9, #0x13d                 	// #317
   4c590:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c594:	mov	w9, #0x184                 	// #388
   4c598:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c59c:	mov	w9, #0x186                 	// #390
   4c5a0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5a4:	mov	w9, #0x19c                 	// #412
   4c5a8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5ac:	mov	w9, #0x19e                 	// #414
   4c5b0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5b4:	mov	w9, #0x217                 	// #535
   4c5b8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5bc:	mov	w9, #0x26a                 	// #618
   4c5c0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5c4:	mov	w9, #0x26b                 	// #619
   4c5c8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5cc:	mov	w9, #0x270                 	// #624
   4c5d0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5d4:	mov	w9, #0x26d                 	// #621
   4c5d8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5dc:	mov	w9, #0x26e                 	// #622
   4c5e0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5e4:	mov	w9, #0x26c                 	// #620
   4c5e8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5ec:	mov	w9, #0x271                 	// #625
   4c5f0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5f4:	mov	w9, #0x274                 	// #628
   4c5f8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c5fc:	mov	w9, #0x272                 	// #626
   4c600:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c604:	mov	w9, #0x275                 	// #629
   4c608:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c60c:	mov	w9, #0x276                 	// #630
   4c610:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c614:	mov	w9, #0x27b                 	// #635
   4c618:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c61c:	mov	w9, #0x278                 	// #632
   4c620:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c624:	mov	w9, #0x277                 	// #631
   4c628:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c62c:	mov	w9, #0x27a                 	// #634
   4c630:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c634:	mov	w9, #0x297                 	// #663
   4c638:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c63c:	mov	w9, #0x298                 	// #664
   4c640:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c644:	mov	w9, #0x29a                 	// #666
   4c648:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c64c:	mov	w9, #0x29b                 	// #667
   4c650:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c654:	mov	w9, #0x29d                 	// #669
   4c658:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c65c:	mov	w9, #0x2b1                 	// #689
   4c660:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c664:	mov	w9, #0x2c9                 	// #713
   4c668:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c66c:	mov	w9, #0x2cb                 	// #715
   4c670:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c674:	mov	w9, #0x2cd                 	// #717
   4c678:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c67c:	mov	w9, #0x2cf                 	// #719
   4c680:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c684:	mov	w9, #0x2d2                 	// #722
   4c688:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c68c:	mov	w9, #0x2df                 	// #735
   4c690:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c694:	mov	w9, #0x2e1                 	// #737
   4c698:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c69c:	mov	w9, #0x2e3                 	// #739
   4c6a0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6a4:	mov	w9, #0x2e5                 	// #741
   4c6a8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6ac:	mov	w9, #0x2e8                 	// #744
   4c6b0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6b4:	mov	w9, #0x2ea                 	// #746
   4c6b8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6bc:	mov	w9, #0x2f5                 	// #757
   4c6c0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6c4:	mov	w9, #0x3de                 	// #990
   4c6c8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6cc:	mov	w9, #0x3e0                 	// #992
   4c6d0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6d4:	mov	w9, #0x3e3                 	// #995
   4c6d8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6dc:	mov	w9, #0x3e7                 	// #999
   4c6e0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6e4:	mov	w9, #0x3e8                 	// #1000
   4c6e8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6ec:	mov	w9, #0x3ea                 	// #1002
   4c6f0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6f4:	mov	w9, #0x3ee                 	// #1006
   4c6f8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c6fc:	mov	w9, #0x40d                 	// #1037
   4c700:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c704:	mov	w9, #0x40e                 	// #1038
   4c708:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c70c:	mov	w9, #0x40f                 	// #1039
   4c710:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c714:	mov	w9, #0x411                 	// #1041
   4c718:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c71c:	mov	w9, #0x414                 	// #1044
   4c720:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c724:	mov	w9, #0x417                 	// #1047
   4c728:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c72c:	mov	w9, #0x419                 	// #1049
   4c730:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c734:	mov	w9, #0x41a                 	// #1050
   4c738:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c73c:	mov	w9, #0x41b                 	// #1051
   4c740:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c744:	mov	w9, #0x41d                 	// #1053
   4c748:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c74c:	mov	w9, #0x420                 	// #1056
   4c750:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c754:	mov	w9, #0x423                 	// #1059
   4c758:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c75c:	mov	w9, #0x425                 	// #1061
   4c760:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c764:	mov	w9, #0x426                 	// #1062
   4c768:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c76c:	mov	w9, #0x427                 	// #1063
   4c770:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c774:	mov	w9, #0x429                 	// #1065
   4c778:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c77c:	mov	w9, #0x42c                 	// #1068
   4c780:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c784:	mov	w9, #0x42f                 	// #1071
   4c788:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c78c:	mov	w9, #0x431                 	// #1073
   4c790:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c794:	mov	w9, #0x432                 	// #1074
   4c798:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c79c:	mov	w9, #0x433                 	// #1075
   4c7a0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7a4:	mov	w9, #0x435                 	// #1077
   4c7a8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7ac:	mov	w9, #0x438                 	// #1080
   4c7b0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7b4:	mov	w9, #0x43b                 	// #1083
   4c7b8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7bc:	mov	w9, #0x43d                 	// #1085
   4c7c0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7c4:	mov	w9, #0x43e                 	// #1086
   4c7c8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7cc:	mov	w9, #0x43f                 	// #1087
   4c7d0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7d4:	mov	w9, #0x441                 	// #1089
   4c7d8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7dc:	mov	w9, #0x444                 	// #1092
   4c7e0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7e4:	mov	w9, #0x447                 	// #1095
   4c7e8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7ec:	mov	w9, #0x449                 	// #1097
   4c7f0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7f4:	mov	w9, #0x44a                 	// #1098
   4c7f8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c7fc:	mov	w9, #0x44b                 	// #1099
   4c800:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c804:	mov	w9, #0x44d                 	// #1101
   4c808:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c80c:	mov	w9, #0x450                 	// #1104
   4c810:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c814:	mov	w9, #0x453                 	// #1107
   4c818:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c81c:	mov	w9, #0x455                 	// #1109
   4c820:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c824:	mov	w9, #0x456                 	// #1110
   4c828:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c82c:	mov	w9, #0x457                 	// #1111
   4c830:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c834:	mov	w9, #0x459                 	// #1113
   4c838:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c83c:	mov	w9, #0x45c                 	// #1116
   4c840:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c844:	mov	w9, #0x45f                 	// #1119
   4c848:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c84c:	mov	w9, #0x461                 	// #1121
   4c850:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c854:	mov	w9, #0x462                 	// #1122
   4c858:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c85c:	mov	w9, #0x463                 	// #1123
   4c860:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c864:	mov	w9, #0x465                 	// #1125
   4c868:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c86c:	mov	w9, #0x468                 	// #1128
   4c870:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c874:	mov	w9, #0x46b                 	// #1131
   4c878:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c87c:	mov	w9, #0x49d                 	// #1181
   4c880:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c884:	mov	w9, #0x49f                 	// #1183
   4c888:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c88c:	mov	w9, #0x4a9                 	// #1193
   4c890:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c894:	mov	w9, #0x4aa                 	// #1194
   4c898:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c89c:	mov	w9, #0x4ab                 	// #1195
   4c8a0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8a4:	mov	w9, #0x4ac                 	// #1196
   4c8a8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8ac:	mov	w9, #0x4ad                 	// #1197
   4c8b0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8b4:	mov	w9, #0x4ae                 	// #1198
   4c8b8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8bc:	mov	w9, #0x4af                 	// #1199
   4c8c0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8c4:	mov	w9, #0x4b0                 	// #1200
   4c8c8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8cc:	mov	w9, #0x4b1                 	// #1201
   4c8d0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8d4:	mov	w9, #0x4b2                 	// #1202
   4c8d8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8dc:	mov	w9, #0x4b3                 	// #1203
   4c8e0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8e4:	mov	w9, #0x4b4                 	// #1204
   4c8e8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8ec:	mov	w9, #0x4b5                 	// #1205
   4c8f0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8f4:	mov	w9, #0x4b6                 	// #1206
   4c8f8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c8fc:	mov	w9, #0x4b7                 	// #1207
   4c900:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c904:	mov	w9, #0x4ba                 	// #1210
   4c908:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c90c:	mov	w9, #0x4bb                 	// #1211
   4c910:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c914:	mov	w9, #0x4c0                 	// #1216
   4c918:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c91c:	mov	w9, #0x4c1                 	// #1217
   4c920:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c924:	mov	w9, #0x4c2                 	// #1218
   4c928:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c92c:	mov	w9, #0x4c3                 	// #1219
   4c930:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c934:	mov	w9, #0x4c4                 	// #1220
   4c938:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c93c:	mov	w9, #0x4c5                 	// #1221
   4c940:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c944:	mov	w9, #0x4c6                 	// #1222
   4c948:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c94c:	mov	w9, #0x4b8                 	// #1208
   4c950:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c954:	mov	w9, #0x4cc                 	// #1228
   4c958:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c95c:	mov	w9, #0x4cd                 	// #1229
   4c960:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c964:	mov	w9, #0x4ce                 	// #1230
   4c968:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c96c:	mov	w9, #0x4cf                 	// #1231
   4c970:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c974:	mov	w9, #0x4d0                 	// #1232
   4c978:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c97c:	mov	w9, #0x4d1                 	// #1233
   4c980:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c984:	mov	w9, #0x4d2                 	// #1234
   4c988:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c98c:	mov	w9, #0x58f                 	// #1423
   4c990:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c994:	mov	w9, #0x578                 	// #1400
   4c998:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c99c:	mov	w9, #0x6da                 	// #1754
   4c9a0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9a4:	mov	w9, #0x556                 	// #1366
   4c9a8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9ac:	mov	w9, #0x555                 	// #1365
   4c9b0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9b4:	mov	w9, #0x6dd                 	// #1757
   4c9b8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9bc:	mov	w9, #0x4e9                 	// #1257
   4c9c0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9c4:	mov	w9, #0x558                 	// #1368
   4c9c8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9cc:	mov	w9, #0x557                 	// #1367
   4c9d0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9d4:	mov	w9, #0x547                 	// #1351
   4c9d8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9dc:	mov	w9, #0x71c                 	// #1820
   4c9e0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9e4:	mov	w9, #0x548                 	// #1352
   4c9e8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9ec:	mov	w9, #0x505                 	// #1285
   4c9f0:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9f4:	mov	w9, #0x71d                 	// #1821
   4c9f8:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4c9fc:	mov	w9, #0x549                 	// #1353
   4ca00:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca04:	mov	w9, #0x6de                 	// #1758
   4ca08:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca0c:	mov	w9, #0x506                 	// #1286
   4ca10:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca14:	mov	w9, #0x55c                 	// #1372
   4ca18:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca1c:	mov	w9, #0x55d                 	// #1373
   4ca20:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca24:	mov	w9, #0x529                 	// #1321
   4ca28:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca2c:	mov	w9, #0x52e                 	// #1326
   4ca30:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca34:	mov	w9, #0x531                 	// #1329
   4ca38:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca3c:	mov	w9, #0x52c                 	// #1324
   4ca40:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca44:	mov	w9, #0x55a                 	// #1370
   4ca48:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca4c:	mov	w9, #0x562                 	// #1378
   4ca50:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca54:	mov	w9, #0x563                 	// #1379
   4ca58:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca5c:	mov	w9, #0x570                 	// #1392
   4ca60:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca64:	mov	w9, #0x572                 	// #1394
   4ca68:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca6c:	mov	w9, #0x4ee                 	// #1262
   4ca70:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca74:	mov	w9, #0x4f4                 	// #1268
   4ca78:	b	4ca80 <aarch64_find_next_alias_opcode@@Base+0x5d8>
   4ca7c:	mov	w9, #0x6db                 	// #1755
   4ca80:	mov	w10, #0x90                  	// #144
   4ca84:	madd	x0, x9, x10, x8
   4ca88:	ret

000000000004ca8c <aarch64_extract_operand@@Base>:
   4ca8c:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   4ca90:	ldr	x8, [x8, #4032]
   4ca94:	mov	w9, #0xaaab                	// #43691
   4ca98:	movk	w9, #0xaaaa, lsl #16
   4ca9c:	sub	x8, x0, x8
   4caa0:	lsr	x8, x8, #4
   4caa4:	mul	w8, w8, w9
   4caa8:	sub	w8, w8, #0x1
   4caac:	cmp	w8, #0xce
   4cab0:	b.hi	4cbbc <aarch64_extract_operand@@Base+0x130>  // b.pmore
   4cab4:	adrp	x9, 60000 <fields@@Base+0x71b4>
   4cab8:	add	x9, x9, #0x2f4
   4cabc:	adr	x10, 4cacc <aarch64_extract_operand@@Base+0x40>
   4cac0:	ldrb	w11, [x9, x8]
   4cac4:	add	x10, x10, x11, lsl #2
   4cac8:	br	x10
   4cacc:	b	35930 <aarch64_ext_regno@plt>
   4cad0:	b	357b0 <aarch64_ext_imm@plt>
   4cad4:	b	35970 <aarch64_ext_sve_addr_rr_lsl@plt>
   4cad8:	b	35ac0 <aarch64_ext_sve_addr_rz_xtw@plt>
   4cadc:	b	35370 <aarch64_ext_reglane@plt>
   4cae0:	b	35360 <aarch64_ext_addr_simm@plt>
   4cae4:	b	35570 <aarch64_ext_sve_quad_index@plt>
   4cae8:	b	350e0 <aarch64_ext_sysins_op@plt>
   4caec:	b	35bc0 <aarch64_ext_sve_addr_ri_u6@plt>
   4caf0:	b	35150 <aarch64_ext_sve_addr_zi_u5@plt>
   4caf4:	b	35500 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   4caf8:	b	35660 <aarch64_ext_imm_rotate2@plt>
   4cafc:	b	35b60 <aarch64_ext_imm_rotate1@plt>
   4cb00:	b	35240 <aarch64_ext_sve_shrimm@plt>
   4cb04:	b	35250 <aarch64_ext_sve_shlimm@plt>
   4cb08:	b	35b70 <aarch64_ext_advsimd_imm_modified@plt>
   4cb0c:	b	35be0 <aarch64_ext_cond@plt>
   4cb10:	b	35910 <aarch64_ext_addr_simple@plt>
   4cb14:	b	35670 <aarch64_ext_hint@plt>
   4cb18:	b	35420 <aarch64_ext_fpimm@plt>
   4cb1c:	b	354c0 <aarch64_ext_limm@plt>
   4cb20:	b	35a40 <aarch64_ext_barrier@plt>
   4cb24:	b	35980 <aarch64_ext_sve_addr_ri_s4@plt>
   4cb28:	b	35560 <aarch64_ext_sve_reglist@plt>
   4cb2c:	b	35880 <aarch64_ext_advsimd_imm_shift@plt>
   4cb30:	b	35400 <aarch64_ext_addr_offset@plt>
   4cb34:	b	35180 <aarch64_ext_sysreg@plt>
   4cb38:	b	35650 <aarch64_ext_sve_index@plt>
   4cb3c:	b	359d0 <aarch64_ext_imm_half@plt>
   4cb40:	b	351e0 <aarch64_ext_fbits@plt>
   4cb44:	b	35840 <aarch64_ext_addr_regoff@plt>
   4cb48:	b	353d0 <aarch64_ext_addr_simm10@plt>
   4cb4c:	b	35260 <aarch64_ext_addr_uimm12@plt>
   4cb50:	b	35ba0 <aarch64_ext_simd_addr_post@plt>
   4cb54:	b	35340 <aarch64_ext_sve_addr_zz_sxtw@plt>
   4cb58:	b	35780 <aarch64_ext_sve_aimm@plt>
   4cb5c:	b	355a0 <aarch64_ext_inv_limm@plt>
   4cb60:	b	35b20 <aarch64_ext_sve_limm_mov@plt>
   4cb64:	b	359a0 <aarch64_ext_sve_scale@plt>
   4cb68:	b	351d0 <aarch64_ext_regrt_sysins@plt>
   4cb6c:	b	35ad0 <aarch64_ext_regno_pair@plt>
   4cb70:	b	35470 <aarch64_ext_reg_extended@plt>
   4cb74:	b	35b00 <aarch64_ext_reg_shifted@plt>
   4cb78:	b	35ae0 <aarch64_ext_ft@plt>
   4cb7c:	b	357d0 <aarch64_ext_reglist@plt>
   4cb80:	b	35620 <aarch64_ext_ldst_reglist@plt>
   4cb84:	b	35210 <aarch64_ext_ldst_reglist_r@plt>
   4cb88:	b	35750 <aarch64_ext_ldst_elemlist@plt>
   4cb8c:	b	357f0 <aarch64_ext_shll_imm@plt>
   4cb90:	b	35280 <aarch64_ext_aimm@plt>
   4cb94:	b	358f0 <aarch64_ext_prfop@plt>
   4cb98:	b	35a30 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   4cb9c:	b	356f0 <aarch64_ext_sve_addr_zz_lsl@plt>
   4cba0:	b	35850 <aarch64_ext_sve_addr_zz_uxtw@plt>
   4cba4:	b	352a0 <aarch64_ext_sve_asimm@plt>
   4cba8:	b	35a60 <aarch64_ext_sve_float_half_one@plt>
   4cbac:	b	35820 <aarch64_ext_sve_float_zero_one@plt>
   4cbb0:	b	35b80 <aarch64_ext_pstatefield@plt>
   4cbb4:	b	35320 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   4cbb8:	b	355b0 <aarch64_ext_sve_float_half_two@plt>
   4cbbc:	stp	x29, x30, [sp, #-16]!
   4cbc0:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   4cbc4:	adrp	x1, 60000 <fields@@Base+0x71b4>
   4cbc8:	adrp	x3, 60000 <fields@@Base+0x71b4>
   4cbcc:	add	x0, x0, #0x2b4
   4cbd0:	add	x1, x1, #0x3c3
   4cbd4:	add	x3, x3, #0x3e1
   4cbd8:	mov	w2, #0x5dcb                	// #24011
   4cbdc:	mov	x29, sp
   4cbe0:	bl	35b30 <__assert_fail@plt>

000000000004cbe4 <aarch64_get_opcode@@Base>:
   4cbe4:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4cbe8:	add	x8, x8, #0xde8
   4cbec:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   4cbf0:	ldr	w8, [x8, w0, uxtw #2]
   4cbf4:	ldr	x10, [x10, #3848]
   4cbf8:	mov	w9, #0x90                  	// #144
   4cbfc:	madd	x0, x8, x9, x10
   4cc00:	ret

000000000004cc04 <arm_symbol_is_valid@@Base>:
   4cc04:	stp	x29, x30, [sp, #-16]!
   4cc08:	mov	x29, sp
   4cc0c:	cbz	x0, 4cc48 <arm_symbol_is_valid@@Base+0x44>
   4cc10:	ldr	x0, [x0, #8]
   4cc14:	cbz	x0, 4cc48 <arm_symbol_is_valid@@Base+0x44>
   4cc18:	ldrb	w8, [x0]
   4cc1c:	cmp	w8, #0x24
   4cc20:	b.ne	4cc30 <arm_symbol_is_valid@@Base+0x2c>  // b.any
   4cc24:	mov	w0, wzr
   4cc28:	ldp	x29, x30, [sp], #16
   4cc2c:	ret
   4cc30:	adrp	x1, 62000 <fields@@Base+0x91b4>
   4cc34:	add	x1, x1, #0xf4d
   4cc38:	mov	w2, #0xa                   	// #10
   4cc3c:	bl	354e0 <strncmp@plt>
   4cc40:	cmp	w0, #0x0
   4cc44:	cset	w0, ne  // ne = any
   4cc48:	ldp	x29, x30, [sp], #16
   4cc4c:	ret

000000000004cc50 <print_insn_big_arm@@Base>:
   4cc50:	ldr	w8, [x1, #24]
   4cc54:	cmp	w8, #0x5
   4cc58:	b.ne	4cc7c <print_insn_big_arm@@Base+0x2c>  // b.any
   4cc5c:	ldr	x8, [x1, #48]
   4cc60:	cbz	x8, 4cc7c <print_insn_big_arm@@Base+0x2c>
   4cc64:	ldr	x8, [x8, #240]
   4cc68:	ldr	x8, [x8, #248]
   4cc6c:	ldrb	w8, [x8, #50]
   4cc70:	tbz	w8, #7, 4cc7c <print_insn_big_arm@@Base+0x2c>
   4cc74:	mov	w8, #0x1                   	// #1
   4cc78:	str	w8, [x1, #44]
   4cc7c:	mov	w2, wzr
   4cc80:	b	4cc84 <print_insn_big_arm@@Base+0x34>
   4cc84:	sub	sp, sp, #0x90
   4cc88:	stp	x29, x30, [sp, #48]
   4cc8c:	stp	x28, x27, [sp, #64]
   4cc90:	stp	x26, x25, [sp, #80]
   4cc94:	stp	x24, x23, [sp, #96]
   4cc98:	stp	x22, x21, [sp, #112]
   4cc9c:	stp	x20, x19, [sp, #128]
   4cca0:	ldr	x22, [x1, #224]
   4cca4:	mov	w27, w2
   4cca8:	mov	x19, x1
   4ccac:	mov	x25, x0
   4ccb0:	add	x29, sp, #0x30
   4ccb4:	strh	wzr, [x1, #196]
   4ccb8:	strb	wzr, [x1, #198]
   4ccbc:	str	wzr, [x1, #200]
   4ccc0:	stp	xzr, xzr, [x1, #208]
   4ccc4:	cbz	x22, 4cea0 <print_insn_big_arm@@Base+0x250>
   4ccc8:	str	w27, [sp, #20]
   4cccc:	adrp	x23, 62000 <fields@@Base+0x91b4>
   4ccd0:	adrp	x24, 70000 <fields@@Base+0x171b4>
   4ccd4:	adrp	x27, 62000 <fields@@Base+0x91b4>
   4ccd8:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4ccdc:	adrp	x21, 56000 <floatformat_from_double@@Base+0x4f8>
   4cce0:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   4cce4:	str	x25, [sp, #24]
   4cce8:	add	x23, x23, #0xfc0
   4ccec:	add	x24, x24, #0x86
   4ccf0:	adrp	x26, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4ccf4:	add	x27, x27, #0xff1
   4ccf8:	add	x28, x28, #0xfee
   4ccfc:	add	x21, x21, #0x270
   4cd00:	mov	w25, #0x1                   	// #1
   4cd04:	add	x20, x20, #0x693
   4cd08:	b	4cd28 <print_insn_big_arm@@Base+0xd8>
   4cd0c:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4cd10:	strb	w25, [x8, #1040]
   4cd14:	mov	w1, #0x2c                  	// #44
   4cd18:	mov	x0, x22
   4cd1c:	bl	358b0 <strchr@plt>
   4cd20:	add	x22, x0, #0x1
   4cd24:	cbz	x0, 4ce94 <print_insn_big_arm@@Base+0x244>
   4cd28:	mov	w2, #0xa                   	// #10
   4cd2c:	mov	x0, x22
   4cd30:	mov	x1, x23
   4cd34:	bl	354e0 <strncmp@plt>
   4cd38:	cbz	w0, 4cd80 <print_insn_big_arm@@Base+0x130>
   4cd3c:	mov	w2, #0xb                   	// #11
   4cd40:	mov	x0, x22
   4cd44:	mov	x1, x27
   4cd48:	bl	354e0 <strncmp@plt>
   4cd4c:	cbz	w0, 4cd0c <print_insn_big_arm@@Base+0xbc>
   4cd50:	mov	w2, #0xe                   	// #14
   4cd54:	mov	x0, x22
   4cd58:	mov	x1, x28
   4cd5c:	bl	354e0 <strncmp@plt>
   4cd60:	cbz	w0, 4ce28 <print_insn_big_arm@@Base+0x1d8>
   4cd64:	mov	w2, #0x5                   	// #5
   4cd68:	mov	x0, x21
   4cd6c:	mov	x1, x20
   4cd70:	bl	35a50 <dcgettext@plt>
   4cd74:	mov	x1, x22
   4cd78:	bl	35a80 <_bfd_error_handler@plt>
   4cd7c:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4cd80:	mov	x0, x22
   4cd84:	mov	x1, x24
   4cd88:	bl	359e0 <disassembler_options_cmp@plt>
   4cd8c:	cbz	w0, 4ce34 <print_insn_big_arm@@Base+0x1e4>
   4cd90:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4cd94:	mov	x0, x22
   4cd98:	add	x1, x1, #0xae
   4cd9c:	bl	359e0 <disassembler_options_cmp@plt>
   4cda0:	cbz	w0, 4ce40 <print_insn_big_arm@@Base+0x1f0>
   4cda4:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4cda8:	mov	x0, x22
   4cdac:	add	x1, x1, #0xe1
   4cdb0:	bl	359e0 <disassembler_options_cmp@plt>
   4cdb4:	cbz	w0, 4ce4c <print_insn_big_arm@@Base+0x1fc>
   4cdb8:	mov	x0, x22
   4cdbc:	mov	x1, x27
   4cdc0:	bl	359e0 <disassembler_options_cmp@plt>
   4cdc4:	cbz	w0, 4ce58 <print_insn_big_arm@@Base+0x208>
   4cdc8:	mov	x0, x22
   4cdcc:	mov	x1, x28
   4cdd0:	bl	359e0 <disassembler_options_cmp@plt>
   4cdd4:	cbz	w0, 4ce64 <print_insn_big_arm@@Base+0x214>
   4cdd8:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4cddc:	mov	x0, x22
   4cde0:	add	x1, x1, #0x17a
   4cde4:	bl	359e0 <disassembler_options_cmp@plt>
   4cde8:	cbz	w0, 4ce70 <print_insn_big_arm@@Base+0x220>
   4cdec:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4cdf0:	mov	x0, x22
   4cdf4:	add	x1, x1, #0x1ce
   4cdf8:	bl	359e0 <disassembler_options_cmp@plt>
   4cdfc:	cbz	w0, 4ce7c <print_insn_big_arm@@Base+0x22c>
   4ce00:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4ce04:	mov	x0, x22
   4ce08:	add	x1, x1, #0x215
   4ce0c:	bl	359e0 <disassembler_options_cmp@plt>
   4ce10:	cbz	w0, 4ce88 <print_insn_big_arm@@Base+0x238>
   4ce14:	adrp	x1, 62000 <fields@@Base+0x91b4>
   4ce18:	mov	w2, #0x5                   	// #5
   4ce1c:	mov	x0, x21
   4ce20:	add	x1, x1, #0xfcb
   4ce24:	b	4cd70 <print_insn_big_arm@@Base+0x120>
   4ce28:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4ce2c:	strb	wzr, [x8, #1040]
   4ce30:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce34:	mov	w8, wzr
   4ce38:	str	wzr, [x26, #1560]
   4ce3c:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce40:	mov	w8, #0x1                   	// #1
   4ce44:	str	w8, [x26, #1560]
   4ce48:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce4c:	mov	w8, #0x2                   	// #2
   4ce50:	str	w8, [x26, #1560]
   4ce54:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce58:	mov	w8, #0x3                   	// #3
   4ce5c:	str	w8, [x26, #1560]
   4ce60:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce64:	mov	w8, #0x4                   	// #4
   4ce68:	str	w8, [x26, #1560]
   4ce6c:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce70:	mov	w8, #0x5                   	// #5
   4ce74:	str	w8, [x26, #1560]
   4ce78:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce7c:	mov	w8, #0x6                   	// #6
   4ce80:	str	w8, [x26, #1560]
   4ce84:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce88:	mov	w8, #0x7                   	// #7
   4ce8c:	str	w8, [x26, #1560]
   4ce90:	b	4cd14 <print_insn_big_arm@@Base+0xc4>
   4ce94:	ldr	x25, [sp, #24]
   4ce98:	ldr	w27, [sp, #20]
   4ce9c:	str	xzr, [x19, #224]
   4cea0:	ldr	x22, [x19, #96]
   4cea4:	cbnz	x22, 4cee0 <print_insn_big_arm@@Base+0x290>
   4cea8:	ldrb	w8, [x19, #91]
   4ceac:	tbnz	w8, #5, 4d04c <print_insn_big_arm@@Base+0x3fc>
   4ceb0:	str	xzr, [x19, #32]
   4ceb4:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4ceb8:	ldr	q0, [x8, #160]
   4cebc:	adrp	x22, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4cec0:	add	x22, x22, #0x3e0
   4cec4:	mov	x8, #0xffffffffffffffff    	// #-1
   4cec8:	mov	w9, #0xffffffff            	// #-1
   4cecc:	str	q0, [x22]
   4ced0:	str	x8, [x22, #16]
   4ced4:	str	w9, [x22, #28]
   4ced8:	stp	xzr, xzr, [x22, #32]
   4cedc:	str	x22, [x19, #96]
   4cee0:	ldr	w8, [x19, #44]
   4cee4:	ldr	w9, [x19, #84]
   4cee8:	cmp	w8, #0x1
   4ceec:	cset	w20, eq  // eq = none
   4cef0:	cmp	w27, #0x0
   4cef4:	cset	w21, ne  // ne = any
   4cef8:	cbz	w9, 4cfe0 <print_insn_big_arm@@Base+0x390>
   4cefc:	ldr	x8, [x19, #72]
   4cf00:	ldr	x8, [x8]
   4cf04:	ldrb	w9, [x8, #26]
   4cf08:	tbnz	w9, #5, 4cfd0 <print_insn_big_arm@@Base+0x380>
   4cf0c:	ldr	x8, [x8]
   4cf10:	ldr	x8, [x8, #8]
   4cf14:	ldr	w8, [x8, #8]
   4cf18:	cmp	w8, #0x5
   4cf1c:	b.ne	4cfd0 <print_insn_big_arm@@Base+0x380>  // b.any
   4cf20:	sub	x2, x29, #0x10
   4cf24:	mov	x0, x25
   4cf28:	mov	x1, x19
   4cf2c:	stur	wzr, [x29, #-16]
   4cf30:	bl	4d87c <print_arm_disassembler_options@@Base+0xc0>
   4cf34:	ldr	w8, [x22, #24]
   4cf38:	mov	w24, #0x4                   	// #4
   4cf3c:	cmp	w8, #0x1
   4cf40:	cset	w9, eq  // eq = none
   4cf44:	cmp	w8, #0x2
   4cf48:	cset	w8, eq  // eq = none
   4cf4c:	b.ne	4cfec <print_insn_big_arm@@Base+0x39c>  // b.any
   4cf50:	ldr	w11, [x22, #28]
   4cf54:	ldrsw	x10, [x19, #84]
   4cf58:	and	w13, w25, #0x3
   4cf5c:	sub	w24, w24, w13
   4cf60:	add	w12, w11, #0x1
   4cf64:	cmp	w12, w10
   4cf68:	b.ge	4cfb8 <print_insn_big_arm@@Base+0x368>  // b.tcont
   4cf6c:	ldr	x11, [x19, #72]
   4cf70:	sxtw	x12, w12
   4cf74:	b	4cf84 <print_insn_big_arm@@Base+0x334>
   4cf78:	add	x12, x12, #0x1
   4cf7c:	cmp	x12, x10
   4cf80:	b.ge	4cfb8 <print_insn_big_arm@@Base+0x368>  // b.tcont
   4cf84:	ldr	x13, [x11, x12, lsl #3]
   4cf88:	ldr	x14, [x13, #32]
   4cf8c:	ldr	x13, [x13, #16]
   4cf90:	ldr	x15, [x14, #40]
   4cf94:	add	x13, x13, x15
   4cf98:	subs	x13, x13, x25
   4cf9c:	b.ls	4cf78 <print_insn_big_arm@@Base+0x328>  // b.plast
   4cfa0:	ldr	x15, [x19, #48]
   4cfa4:	cbz	x15, 4cfb0 <print_insn_big_arm@@Base+0x360>
   4cfa8:	cmp	x15, x14
   4cfac:	b.ne	4cf78 <print_insn_big_arm@@Base+0x328>  // b.any
   4cfb0:	cmp	x13, x24
   4cfb4:	csel	w24, w13, w24, cc  // cc = lo, ul, last
   4cfb8:	cmp	w24, #0x3
   4cfbc:	b.ne	4cfec <print_insn_big_arm@@Base+0x39c>  // b.any
   4cfc0:	tst	x25, #0x1
   4cfc4:	mov	w10, #0x1                   	// #1
   4cfc8:	cinc	w24, w10, eq  // eq = none
   4cfcc:	b	4cfec <print_insn_big_arm@@Base+0x39c>
   4cfd0:	mov	w0, wzr
   4cfd4:	mov	w8, wzr
   4cfd8:	mov	w9, wzr
   4cfdc:	b	4cfe8 <print_insn_big_arm@@Base+0x398>
   4cfe0:	mov	w0, wzr
   4cfe4:	mov	w8, wzr
   4cfe8:	mov	w24, #0x4                   	// #4
   4cfec:	ldr	x10, [x19, #56]
   4cff0:	orr	w26, w21, w20
   4cff4:	cbz	x10, 4d0c8 <print_insn_big_arm@@Base+0x478>
   4cff8:	ldr	x10, [x10]
   4cffc:	ldrb	w11, [x10, #26]
   4d000:	tbnz	w11, #5, 4d0c8 <print_insn_big_arm@@Base+0x478>
   4d004:	ldr	x11, [x10]
   4d008:	ldr	x11, [x11, #8]
   4d00c:	ldr	w11, [x11, #8]
   4d010:	cmp	w11, #0x2
   4d014:	b.ne	4d084 <print_insn_big_arm@@Base+0x434>  // b.any
   4d018:	ldr	x9, [x10, #48]
   4d01c:	ldrb	w9, [x9, #40]
   4d020:	sub	w10, w9, #0x82
   4d024:	cmp	w10, #0x15
   4d028:	b.hi	4d044 <print_insn_big_arm@@Base+0x3f4>  // b.pmore
   4d02c:	mov	w9, #0x1                   	// #1
   4d030:	mov	w11, #0x13                  	// #19
   4d034:	lsl	w10, w9, w10
   4d038:	movk	w11, #0x30, lsl #16
   4d03c:	tst	w10, w11
   4d040:	b.ne	4d0c8 <print_insn_big_arm@@Base+0x478>  // b.any
   4d044:	mov	w9, wzr
   4d048:	b	4d0c8 <print_insn_big_arm@@Base+0x478>
   4d04c:	ldr	x8, [x19, #32]
   4d050:	cmp	x8, #0x1b
   4d054:	b.hi	4d5dc <print_insn_big_arm@@Base+0x98c>  // b.pmore
   4d058:	adrp	x9, 61000 <fields@@Base+0x81b4>
   4d05c:	ldr	q0, [x9, #3888]
   4d060:	adrp	x9, 62000 <fields@@Base+0x91b4>
   4d064:	add	x9, x9, #0xc0
   4d068:	adr	x10, 4ceb4 <print_insn_big_arm@@Base+0x264>
   4d06c:	ldrh	w11, [x9, x8, lsl #1]
   4d070:	add	x10, x10, x11, lsl #2
   4d074:	br	x10
   4d078:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d07c:	ldr	q0, [x8, #32]
   4d080:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d084:	cbnz	w0, 4d0b8 <print_insn_big_arm@@Base+0x468>
   4d088:	cmp	w11, #0x5
   4d08c:	b.ne	4d0b8 <print_insn_big_arm@@Base+0x468>  // b.any
   4d090:	ldrb	w9, [x10, #74]
   4d094:	ldrb	w10, [x10, #72]
   4d098:	mov	w11, #0xf                   	// #15
   4d09c:	and	w9, w9, #0x3
   4d0a0:	cmp	w9, #0x1
   4d0a4:	cset	w9, eq  // eq = none
   4d0a8:	bics	wzr, w11, w10
   4d0ac:	cset	w10, eq  // eq = none
   4d0b0:	orr	w9, w10, w9
   4d0b4:	b	4d0c8 <print_insn_big_arm@@Base+0x478>
   4d0b8:	cmp	w11, #0x11
   4d0bc:	b.ne	4d0c8 <print_insn_big_arm@@Base+0x478>  // b.any
   4d0c0:	ldrh	w9, [x10, #50]
   4d0c4:	and	w9, w9, #0x8
   4d0c8:	adrp	x10, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d0cc:	ldrb	w10, [x10, #1040]
   4d0d0:	cmp	w10, #0x0
   4d0d4:	csinc	w20, w9, wzr, eq  // eq = none
   4d0d8:	cbz	w8, 4d154 <print_insn_big_arm@@Base+0x504>
   4d0dc:	ldrb	w8, [x19, #91]
   4d0e0:	cmp	w27, #0x0
   4d0e4:	cset	w9, ne  // ne = any
   4d0e8:	str	w9, [x19, #176]
   4d0ec:	mov	w9, #0x4                   	// #4
   4d0f0:	str	w9, [x19, #168]
   4d0f4:	tbnz	w8, #6, 4d160 <print_insn_big_arm@@Base+0x510>
   4d0f8:	ldr	x8, [x19, #104]
   4d0fc:	sub	x1, x29, #0xc
   4d100:	mov	x0, x25
   4d104:	mov	w2, w24
   4d108:	mov	x3, x19
   4d10c:	mov	w23, w24
   4d110:	str	w24, [x19, #172]
   4d114:	blr	x8
   4d118:	cbz	w27, 4d260 <print_insn_big_arm@@Base+0x610>
   4d11c:	subs	w9, w24, #0x1
   4d120:	b.mi	4d2d4 <print_insn_big_arm@@Base+0x684>  // b.first
   4d124:	sub	x10, x29, #0xc
   4d128:	mov	x8, xzr
   4d12c:	mov	x21, xzr
   4d130:	add	x9, x10, w9, uxtw
   4d134:	ldrb	w10, [x9, x8]
   4d138:	sub	x8, x8, #0x1
   4d13c:	add	w11, w23, w8
   4d140:	cmp	w11, #0x0
   4d144:	bfi	x10, x21, #8, #56
   4d148:	mov	x21, x10
   4d14c:	b.gt	4d134 <print_insn_big_arm@@Base+0x4e4>
   4d150:	b	4d288 <print_insn_big_arm@@Base+0x638>
   4d154:	mov	w8, #0x4                   	// #4
   4d158:	str	w26, [x19, #176]
   4d15c:	str	w8, [x19, #168]
   4d160:	cbz	w20, 4d1b4 <print_insn_big_arm@@Base+0x564>
   4d164:	ldr	x8, [x19, #104]
   4d168:	mov	w23, #0x2                   	// #2
   4d16c:	sub	x1, x29, #0xc
   4d170:	mov	w2, #0x2                   	// #2
   4d174:	mov	x0, x25
   4d178:	mov	x3, x19
   4d17c:	str	w23, [x19, #172]
   4d180:	blr	x8
   4d184:	ldurb	w8, [x29, #-11]
   4d188:	ldurb	w9, [x29, #-12]
   4d18c:	cmp	w26, #0x0
   4d190:	csel	w10, w8, w9, ne  // ne = any
   4d194:	csel	w8, w9, w8, ne  // ne = any
   4d198:	and	x21, x8, #0xff
   4d19c:	and	x8, x10, #0xff
   4d1a0:	bfi	x21, x8, #8, #8
   4d1a4:	cbz	w0, 4d1f0 <print_insn_big_arm@@Base+0x5a0>
   4d1a8:	adrp	x10, 4e000 <print_arm_disassembler_options@@Base+0x844>
   4d1ac:	add	x10, x10, #0xdcc
   4d1b0:	b	4d31c <print_insn_big_arm@@Base+0x6cc>
   4d1b4:	ldr	x8, [x19, #104]
   4d1b8:	mov	w9, #0x4                   	// #4
   4d1bc:	sub	x1, x29, #0xc
   4d1c0:	mov	w2, #0x4                   	// #4
   4d1c4:	mov	x0, x25
   4d1c8:	mov	x3, x19
   4d1cc:	str	w9, [x19, #172]
   4d1d0:	blr	x8
   4d1d4:	cbz	w26, 4d240 <print_insn_big_arm@@Base+0x5f0>
   4d1d8:	ldur	w21, [x29, #-12]
   4d1dc:	adrp	x10, 4d000 <print_insn_big_arm@@Base+0x3b0>
   4d1e0:	add	x10, x10, #0xbac
   4d1e4:	mov	w23, #0x4                   	// #4
   4d1e8:	cbnz	w0, 4d484 <print_insn_big_arm@@Base+0x834>
   4d1ec:	b	4d294 <print_insn_big_arm@@Base+0x644>
   4d1f0:	lsl	x8, x8, #8
   4d1f4:	and	w8, w8, #0xf800
   4d1f8:	mov	w9, #0xe800                	// #59392
   4d1fc:	cmp	w8, w9
   4d200:	b.eq	4d218 <print_insn_big_arm@@Base+0x5c8>  // b.none
   4d204:	mov	w9, #0xf800                	// #63488
   4d208:	cmp	w8, w9
   4d20c:	b.eq	4d218 <print_insn_big_arm@@Base+0x5c8>  // b.none
   4d210:	cmp	w8, #0xf, lsl #12
   4d214:	b.ne	4d30c <print_insn_big_arm@@Base+0x6bc>  // b.any
   4d218:	ldr	x8, [x19, #104]
   4d21c:	add	x0, x25, #0x2
   4d220:	sub	x1, x29, #0xc
   4d224:	mov	w2, #0x2                   	// #2
   4d228:	mov	x3, x19
   4d22c:	blr	x8
   4d230:	cbz	w26, 4d2e8 <print_insn_big_arm@@Base+0x698>
   4d234:	ldurb	w8, [x29, #-12]
   4d238:	ldurb	w9, [x29, #-11]
   4d23c:	b	4d2f0 <print_insn_big_arm@@Base+0x6a0>
   4d240:	ldur	w8, [x29, #-12]
   4d244:	adrp	x10, 4d000 <print_insn_big_arm@@Base+0x3b0>
   4d248:	add	x10, x10, #0xbac
   4d24c:	mov	w23, #0x4                   	// #4
   4d250:	lsl	x8, x8, #32
   4d254:	rev	x21, x8
   4d258:	cbnz	w0, 4d484 <print_insn_big_arm@@Base+0x834>
   4d25c:	b	4d294 <print_insn_big_arm@@Base+0x644>
   4d260:	cmp	w24, #0x0
   4d264:	b.le	4d2d4 <print_insn_big_arm@@Base+0x684>
   4d268:	mov	x21, xzr
   4d26c:	sub	x8, x29, #0xc
   4d270:	mov	x9, x23
   4d274:	ldrb	w10, [x8], #1
   4d278:	subs	x9, x9, #0x1
   4d27c:	bfi	x10, x21, #8, #56
   4d280:	mov	x21, x10
   4d284:	b.ne	4d274 <print_insn_big_arm@@Base+0x624>  // b.any
   4d288:	adrp	x10, 4d000 <print_insn_big_arm@@Base+0x3b0>
   4d28c:	add	x10, x10, #0xb48
   4d290:	cbnz	w0, 4d484 <print_insn_big_arm@@Base+0x834>
   4d294:	ldr	w8, [x19, #88]
   4d298:	mov	x1, x19
   4d29c:	mov	x2, x21
   4d2a0:	cmp	w8, #0x0
   4d2a4:	csel	x0, xzr, x25, lt  // lt = tstop
   4d2a8:	blr	x10
   4d2ac:	cbz	w20, 4d498 <print_insn_big_arm@@Base+0x848>
   4d2b0:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d2b4:	adrp	x9, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d2b8:	ldr	w8, [x8, #1060]
   4d2bc:	ldr	x10, [x9, #1048]
   4d2c0:	adrp	x11, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d2c4:	str	w8, [x11, #1056]
   4d2c8:	add	x8, x10, w23, uxtw
   4d2cc:	str	x8, [x9, #1048]
   4d2d0:	b	4d498 <print_insn_big_arm@@Base+0x848>
   4d2d4:	adrp	x10, 4d000 <print_insn_big_arm@@Base+0x3b0>
   4d2d8:	mov	x21, xzr
   4d2dc:	add	x10, x10, #0xb48
   4d2e0:	cbnz	w0, 4d484 <print_insn_big_arm@@Base+0x834>
   4d2e4:	b	4d294 <print_insn_big_arm@@Base+0x644>
   4d2e8:	ldurb	w8, [x29, #-11]
   4d2ec:	ldurb	w9, [x29, #-12]
   4d2f0:	bfi	x8, x21, #16, #16
   4d2f4:	bfi	x8, x9, #8, #8
   4d2f8:	adrp	x10, 4f000 <print_arm_disassembler_options@@Base+0x1844>
   4d2fc:	add	x10, x10, #0x508
   4d300:	mov	w23, #0x4                   	// #4
   4d304:	mov	x21, x8
   4d308:	b	4d31c <print_insn_big_arm@@Base+0x6cc>
   4d30c:	adrp	x10, 4e000 <print_arm_disassembler_options@@Base+0x844>
   4d310:	mov	w0, wzr
   4d314:	add	x10, x10, #0xdcc
   4d318:	mov	w23, #0x2                   	// #2
   4d31c:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d320:	ldr	x9, [x8, #1048]
   4d324:	cmp	x9, x25
   4d328:	b.eq	4d460 <print_insn_big_arm@@Base+0x810>  // b.none
   4d32c:	stp	w0, w20, [sp, #16]
   4d330:	mov	w28, wzr
   4d334:	mov	w27, wzr
   4d338:	str	x25, [x8, #1048]
   4d33c:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d340:	mov	x20, x25
   4d344:	mov	w25, #0x1                   	// #1
   4d348:	str	x10, [sp, #8]
   4d34c:	str	wzr, [x8, #1056]
   4d350:	str	x20, [sp, #24]
   4d354:	cbz	x20, 4d430 <print_insn_big_arm@@Base+0x7e0>
   4d358:	ldr	x8, [x19, #128]
   4d35c:	mov	x0, x20
   4d360:	mov	x1, x19
   4d364:	blr	x8
   4d368:	cbnz	w0, 4d430 <print_insn_big_arm@@Base+0x7e0>
   4d36c:	ldr	x8, [x19, #104]
   4d370:	sub	x20, x20, #0x2
   4d374:	sub	x1, x29, #0x4
   4d378:	mov	w2, #0x2                   	// #2
   4d37c:	mov	x0, x20
   4d380:	mov	x3, x19
   4d384:	blr	x8
   4d388:	cbnz	w0, 4d454 <print_insn_big_arm@@Base+0x804>
   4d38c:	ldurb	w8, [x29, #-3]
   4d390:	ldurb	w9, [x29, #-4]
   4d394:	cmp	w26, #0x0
   4d398:	csel	w24, w8, w9, ne  // ne = any
   4d39c:	csel	w9, w9, w8, ne  // ne = any
   4d3a0:	and	w8, w24, #0xff
   4d3a4:	cbz	w27, 4d3b8 <print_insn_big_arm@@Base+0x768>
   4d3a8:	cmp	w8, #0xe7
   4d3ac:	b.hi	4d3b8 <print_insn_big_arm@@Base+0x768>  // b.pmore
   4d3b0:	tbnz	w25, #0, 4d438 <print_insn_big_arm@@Base+0x7e8>
   4d3b4:	mov	w27, wzr
   4d3b8:	cmp	w8, #0xbf
   4d3bc:	b.ne	4d40c <print_insn_big_arm@@Base+0x7bc>  // b.any
   4d3c0:	and	w22, w9, #0xff
   4d3c4:	and	w9, w22, #0xf
   4d3c8:	cbz	w9, 4d40c <print_insn_big_arm@@Base+0x7bc>
   4d3cc:	sub	x2, x29, #0x8
   4d3d0:	mov	x0, x20
   4d3d4:	mov	x1, x19
   4d3d8:	bfi	w22, w8, #8, #8
   4d3dc:	stur	wzr, [x29, #-8]
   4d3e0:	bl	4d87c <print_arm_disassembler_options@@Base+0xc0>
   4d3e4:	ldur	w8, [x29, #-8]
   4d3e8:	cmp	w0, #0x0
   4d3ec:	cset	w10, eq  // eq = none
   4d3f0:	asr	w9, w25, #1
   4d3f4:	cmp	w8, #0x1
   4d3f8:	cset	w8, eq  // eq = none
   4d3fc:	orr	w8, w10, w8
   4d400:	cmp	w8, #0x0
   4d404:	csel	w28, w9, w28, ne  // ne = any
   4d408:	csel	w27, w22, w27, ne  // ne = any
   4d40c:	and	w8, w24, #0xff
   4d410:	add	w9, w25, #0x2
   4d414:	orr	w9, w9, #0x1
   4d418:	cmp	w8, #0xe7
   4d41c:	csinc	w25, w9, w25, ls  // ls = plast
   4d420:	cmp	w25, #0x8
   4d424:	b.lt	4d354 <print_insn_big_arm@@Base+0x704>  // b.tstop
   4d428:	cbnz	w27, 4d354 <print_insn_big_arm@@Base+0x704>
   4d42c:	b	4d454 <print_insn_big_arm@@Base+0x804>
   4d430:	tbz	w25, #0, 4d454 <print_insn_big_arm@@Base+0x804>
   4d434:	cbz	w27, 4d454 <print_insn_big_arm@@Base+0x804>
   4d438:	and	w8, w27, #0xe0
   4d43c:	lsl	w9, w27, w28
   4d440:	bfxil	w8, w9, #0, #5
   4d444:	tst	w9, #0xf
   4d448:	csel	w8, wzr, w8, eq  // eq = none
   4d44c:	adrp	x9, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d450:	str	w8, [x9, #1056]
   4d454:	ldr	x25, [sp, #24]
   4d458:	ldp	w0, w20, [sp, #16]
   4d45c:	ldr	x10, [sp, #8]
   4d460:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d464:	ldr	w8, [x8, #1056]
   4d468:	cbz	w8, 4d480 <print_insn_big_arm@@Base+0x830>
   4d46c:	and	w9, w8, #0xf
   4d470:	cmp	w9, #0x8
   4d474:	b.ne	4d4bc <print_insn_big_arm@@Base+0x86c>  // b.any
   4d478:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d47c:	str	wzr, [x8, #1060]
   4d480:	cbz	w0, 4d294 <print_insn_big_arm@@Base+0x644>
   4d484:	ldr	x8, [x19, #112]
   4d488:	mov	x1, x25
   4d48c:	mov	x2, x19
   4d490:	blr	x8
   4d494:	mov	w23, #0xffffffff            	// #-1
   4d498:	mov	w0, w23
   4d49c:	ldp	x20, x19, [sp, #128]
   4d4a0:	ldp	x22, x21, [sp, #112]
   4d4a4:	ldp	x24, x23, [sp, #96]
   4d4a8:	ldp	x26, x25, [sp, #80]
   4d4ac:	ldp	x28, x27, [sp, #64]
   4d4b0:	ldp	x29, x30, [sp, #48]
   4d4b4:	add	sp, sp, #0x90
   4d4b8:	ret
   4d4bc:	and	w8, w8, #0xe0
   4d4c0:	bfi	w8, w9, #1, #4
   4d4c4:	adrp	x9, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d4c8:	str	w8, [x9, #1060]
   4d4cc:	cbnz	w0, 4d484 <print_insn_big_arm@@Base+0x834>
   4d4d0:	b	4d294 <print_insn_big_arm@@Base+0x644>
   4d4d4:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d4d8:	ldr	q0, [x8, #48]
   4d4dc:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d4e0:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d4e4:	ldr	q0, [x8, #3904]
   4d4e8:	mov	w8, #0x1                   	// #1
   4d4ec:	adrp	x9, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d4f0:	strb	w8, [x9, #1040]
   4d4f4:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d4f8:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d4fc:	ldr	q0, [x8, #16]
   4d500:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d504:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d508:	ldr	q0, [x8, #4080]
   4d50c:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d510:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d514:	ldr	q0, [x8, #144]
   4d518:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d51c:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d520:	ldr	q0, [x8, #112]
   4d524:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d528:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d52c:	ldr	q0, [x8, #64]
   4d530:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d534:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d538:	ldr	q0, [x8]
   4d53c:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d540:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d544:	ldr	q0, [x8, #3952]
   4d548:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d54c:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d550:	ldr	q0, [x8, #3936]
   4d554:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d558:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d55c:	ldr	q0, [x8, #128]
   4d560:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d564:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d568:	ldr	q0, [x8, #96]
   4d56c:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d570:	adrp	x8, 62000 <fields@@Base+0x91b4>
   4d574:	ldr	q0, [x8, #80]
   4d578:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d57c:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d580:	ldr	q0, [x8, #4064]
   4d584:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d588:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d58c:	ldr	q0, [x8, #4048]
   4d590:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d594:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d598:	ldr	q0, [x8, #4016]
   4d59c:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5a0:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d5a4:	ldr	q0, [x8, #4000]
   4d5a8:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5ac:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d5b0:	ldr	q0, [x8, #3984]
   4d5b4:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5b8:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d5bc:	ldr	q0, [x8, #4032]
   4d5c0:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5c4:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d5c8:	ldr	q0, [x8, #3968]
   4d5cc:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5d0:	adrp	x8, 61000 <fields@@Base+0x81b4>
   4d5d4:	ldr	q0, [x8, #3920]
   4d5d8:	b	4cebc <print_insn_big_arm@@Base+0x26c>
   4d5dc:	bl	35700 <abort@plt>

000000000004d5e0 <print_insn_little_arm@@Base>:
   4d5e0:	mov	w2, #0x1                   	// #1
   4d5e4:	b	4cc84 <print_insn_big_arm@@Base+0x34>

000000000004d5e8 <disassembler_options_arm@@Base>:
   4d5e8:	stp	x29, x30, [sp, #-48]!
   4d5ec:	str	x21, [sp, #16]
   4d5f0:	adrp	x21, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4d5f4:	ldr	x0, [x21, #976]
   4d5f8:	stp	x20, x19, [sp, #32]
   4d5fc:	mov	x29, sp
   4d600:	cbnz	x0, 4d7ac <disassembler_options_arm@@Base+0x1c4>
   4d604:	mov	w0, #0x20                  	// #32
   4d608:	bl	35520 <xmalloc@plt>
   4d60c:	mov	x19, x0
   4d610:	str	x0, [x21, #976]
   4d614:	str	xzr, [x0, #24]
   4d618:	mov	w0, #0x48                  	// #72
   4d61c:	bl	35520 <xmalloc@plt>
   4d620:	str	x0, [x19]
   4d624:	mov	w0, #0x48                  	// #72
   4d628:	bl	35520 <xmalloc@plt>
   4d62c:	ldr	x8, [x19]
   4d630:	adrp	x20, 56000 <floatformat_from_double@@Base+0x4f8>
   4d634:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d638:	add	x20, x20, #0x270
   4d63c:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d640:	stp	x0, xzr, [x19, #8]
   4d644:	add	x9, x9, #0x86
   4d648:	add	x1, x1, #0x94
   4d64c:	mov	w2, #0x5                   	// #5
   4d650:	mov	x0, x20
   4d654:	str	x9, [x8]
   4d658:	bl	35a50 <dcgettext@plt>
   4d65c:	ldr	x8, [x19, #8]
   4d660:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d664:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d668:	add	x9, x9, #0xae
   4d66c:	str	x0, [x8]
   4d670:	ldr	x8, [x19]
   4d674:	add	x1, x1, #0xbc
   4d678:	mov	w2, #0x5                   	// #5
   4d67c:	mov	x0, x20
   4d680:	str	x9, [x8, #8]
   4d684:	bl	35a50 <dcgettext@plt>
   4d688:	ldr	x8, [x19, #8]
   4d68c:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d690:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d694:	add	x9, x9, #0xe1
   4d698:	str	x0, [x8, #8]
   4d69c:	ldr	x8, [x19]
   4d6a0:	add	x1, x1, #0xef
   4d6a4:	mov	w2, #0x5                   	// #5
   4d6a8:	mov	x0, x20
   4d6ac:	str	x9, [x8, #16]
   4d6b0:	bl	35a50 <dcgettext@plt>
   4d6b4:	ldr	x8, [x19, #8]
   4d6b8:	adrp	x9, 62000 <fields@@Base+0x91b4>
   4d6bc:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d6c0:	add	x9, x9, #0xff1
   4d6c4:	str	x0, [x8, #16]
   4d6c8:	ldr	x8, [x19]
   4d6cc:	add	x1, x1, #0x125
   4d6d0:	mov	w2, #0x5                   	// #5
   4d6d4:	mov	x0, x20
   4d6d8:	str	x9, [x8, #24]
   4d6dc:	bl	35a50 <dcgettext@plt>
   4d6e0:	ldr	x8, [x19, #8]
   4d6e4:	adrp	x9, 62000 <fields@@Base+0x91b4>
   4d6e8:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d6ec:	add	x9, x9, #0xfee
   4d6f0:	str	x0, [x8, #24]
   4d6f4:	ldr	x8, [x19]
   4d6f8:	add	x1, x1, #0x146
   4d6fc:	mov	w2, #0x5                   	// #5
   4d700:	mov	x0, x20
   4d704:	str	x9, [x8, #32]
   4d708:	bl	35a50 <dcgettext@plt>
   4d70c:	ldr	x8, [x19, #8]
   4d710:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d714:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d718:	add	x9, x9, #0x17a
   4d71c:	str	x0, [x8, #32]
   4d720:	ldr	x8, [x19]
   4d724:	add	x1, x1, #0x189
   4d728:	mov	w2, #0x5                   	// #5
   4d72c:	mov	x0, x20
   4d730:	str	x9, [x8, #40]
   4d734:	bl	35a50 <dcgettext@plt>
   4d738:	ldr	x8, [x19, #8]
   4d73c:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d740:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d744:	add	x9, x9, #0x1ce
   4d748:	str	x0, [x8, #40]
   4d74c:	ldr	x8, [x19]
   4d750:	add	x1, x1, #0x1de
   4d754:	mov	w2, #0x5                   	// #5
   4d758:	mov	x0, x20
   4d75c:	str	x9, [x8, #48]
   4d760:	bl	35a50 <dcgettext@plt>
   4d764:	ldr	x8, [x19, #8]
   4d768:	adrp	x9, 70000 <fields@@Base+0x171b4>
   4d76c:	adrp	x1, 70000 <fields@@Base+0x171b4>
   4d770:	add	x9, x9, #0x215
   4d774:	str	x0, [x8, #48]
   4d778:	ldr	x8, [x19]
   4d77c:	add	x1, x1, #0x22d
   4d780:	mov	w2, #0x5                   	// #5
   4d784:	mov	x0, x20
   4d788:	str	x9, [x8, #56]
   4d78c:	bl	35a50 <dcgettext@plt>
   4d790:	ldr	x8, [x19, #8]
   4d794:	str	x0, [x8, #56]
   4d798:	ldr	x8, [x19]
   4d79c:	str	xzr, [x8, #64]
   4d7a0:	ldr	x8, [x19, #8]
   4d7a4:	str	xzr, [x8, #64]
   4d7a8:	ldr	x0, [x21, #976]
   4d7ac:	ldp	x20, x19, [sp, #32]
   4d7b0:	ldr	x21, [sp, #16]
   4d7b4:	ldp	x29, x30, [sp], #48
   4d7b8:	ret

000000000004d7bc <print_arm_disassembler_options@@Base>:
   4d7bc:	stp	x29, x30, [sp, #-80]!
   4d7c0:	stp	x20, x19, [sp, #64]
   4d7c4:	adrp	x20, 56000 <floatformat_from_double@@Base+0x4f8>
   4d7c8:	add	x20, x20, #0x270
   4d7cc:	adrp	x1, 62000 <fields@@Base+0x91b4>
   4d7d0:	mov	x19, x0
   4d7d4:	add	x1, x1, #0xf58
   4d7d8:	mov	w2, #0x5                   	// #5
   4d7dc:	mov	x0, x20
   4d7e0:	stp	x26, x25, [sp, #16]
   4d7e4:	stp	x24, x23, [sp, #32]
   4d7e8:	stp	x22, x21, [sp, #48]
   4d7ec:	mov	x29, sp
   4d7f0:	bl	35a50 <dcgettext@plt>
   4d7f4:	mov	x1, x0
   4d7f8:	mov	x0, x19
   4d7fc:	bl	35bd0 <fprintf@plt>
   4d800:	adrp	x25, 86000 <aarch64_operands@@Base+0x1c38>
   4d804:	adrp	x21, 62000 <fields@@Base+0x91b4>
   4d808:	mov	x24, xzr
   4d80c:	add	x25, x25, #0xaf8
   4d810:	mov	w26, #0x18                  	// #24
   4d814:	add	x21, x21, #0xfb4
   4d818:	add	x23, x25, x24
   4d81c:	ldr	x22, [x23]
   4d820:	mov	x0, x22
   4d824:	bl	35160 <strlen@plt>
   4d828:	ldr	x1, [x23, #8]
   4d82c:	sub	w23, w26, w0
   4d830:	mov	w2, #0x5                   	// #5
   4d834:	mov	x0, x20
   4d838:	bl	35a50 <dcgettext@plt>
   4d83c:	mov	x5, x0
   4d840:	mov	w4, #0x20                  	// #32
   4d844:	mov	x0, x19
   4d848:	mov	x1, x21
   4d84c:	mov	x2, x22
   4d850:	mov	w3, w23
   4d854:	bl	35bd0 <fprintf@plt>
   4d858:	add	x24, x24, #0x90
   4d85c:	cmp	x24, #0x480
   4d860:	b.ne	4d818 <print_arm_disassembler_options@@Base+0x5c>  // b.any
   4d864:	ldp	x20, x19, [sp, #64]
   4d868:	ldp	x22, x21, [sp, #48]
   4d86c:	ldp	x24, x23, [sp, #32]
   4d870:	ldp	x26, x25, [sp, #16]
   4d874:	ldp	x29, x30, [sp], #80
   4d878:	ret
   4d87c:	stp	x20, x19, [sp, #-16]!
   4d880:	ldr	x11, [x1, #48]
   4d884:	cbz	x11, 4d8a0 <print_arm_disassembler_options@@Base+0xe4>
   4d888:	ldrb	w8, [x11, #32]
   4d88c:	tbnz	w8, #4, 4d8a0 <print_arm_disassembler_options@@Base+0xe4>
   4d890:	mov	w10, #0x2                   	// #2
   4d894:	ldr	x9, [x1, #96]
   4d898:	cbnz	x9, 4d8ac <print_arm_disassembler_options@@Base+0xf0>
   4d89c:	b	4d908 <print_arm_disassembler_options@@Base+0x14c>
   4d8a0:	mov	w10, wzr
   4d8a4:	ldr	x9, [x1, #96]
   4d8a8:	cbz	x9, 4d908 <print_arm_disassembler_options@@Base+0x14c>
   4d8ac:	ldr	x12, [x1, #72]
   4d8b0:	ldr	x8, [x12]
   4d8b4:	ldrb	w13, [x8, #26]
   4d8b8:	tbnz	w13, #5, 4d908 <print_arm_disassembler_options@@Base+0x14c>
   4d8bc:	ldr	x8, [x8]
   4d8c0:	ldr	x8, [x8, #8]
   4d8c4:	ldr	w8, [x8, #8]
   4d8c8:	cmp	w8, #0x5
   4d8cc:	b.ne	4d908 <print_arm_disassembler_options@@Base+0x14c>  // b.any
   4d8d0:	ldr	w17, [x1, #84]
   4d8d4:	cbz	w17, 4d918 <print_arm_disassembler_options@@Base+0x15c>
   4d8d8:	ldr	x8, [x9, #40]
   4d8dc:	cmp	x8, x0
   4d8e0:	b.cs	4d928 <print_arm_disassembler_options@@Base+0x16c>  // b.hs, b.nlast
   4d8e4:	ldr	w13, [x1, #80]
   4d8e8:	ldr	w15, [x9, #28]
   4d8ec:	add	w8, w13, #0x1
   4d8f0:	tbnz	w15, #31, 4d940 <print_arm_disassembler_options@@Base+0x184>
   4d8f4:	ldr	x14, [x1, #240]
   4d8f8:	ldr	x16, [x9, #32]
   4d8fc:	cmp	x14, x16
   4d900:	cset	w16, eq  // eq = none
   4d904:	b	4d944 <print_arm_disassembler_options@@Base+0x188>
   4d908:	mov	w8, wzr
   4d90c:	mov	w0, w8
   4d910:	ldp	x20, x19, [sp], #16
   4d914:	ret
   4d918:	ldr	w13, [x1, #80]
   4d91c:	mov	w17, #0xffffffff            	// #-1
   4d920:	tbz	w13, #31, 4dae0 <print_arm_disassembler_options@@Base+0x324>
   4d924:	b	4db30 <print_arm_disassembler_options@@Base+0x374>
   4d928:	mov	w15, #0xffffffff            	// #-1
   4d92c:	str	w15, [x9, #28]
   4d930:	ldr	w13, [x1, #80]
   4d934:	mov	w16, wzr
   4d938:	add	w8, w13, #0x1
   4d93c:	b	4d944 <print_arm_disassembler_options@@Base+0x188>
   4d940:	mov	w16, wzr
   4d944:	cmp	w8, w15
   4d948:	cset	w14, ge  // ge = tcont
   4d94c:	tst	w14, w16
   4d950:	csel	w18, w15, w8, ne  // ne = any
   4d954:	cmp	w18, w17
   4d958:	b.ge	4da08 <print_arm_disassembler_options@@Base+0x24c>  // b.tcont
   4d95c:	mov	w5, #0x9                   	// #9
   4d960:	mov	w8, wzr
   4d964:	add	x3, x12, w18, sxtw #3
   4d968:	mov	w14, #0xffffffff            	// #-1
   4d96c:	mov	w4, #0x1                   	// #1
   4d970:	movk	w5, #0x8, lsl #16
   4d974:	b	4d9a0 <print_arm_disassembler_options@@Base+0x1e4>
   4d978:	cmp	w6, #0x74
   4d97c:	mov	w8, #0x1                   	// #1
   4d980:	cinc	w10, w8, ne  // ne = any
   4d984:	cmp	w6, #0x61
   4d988:	csel	w10, wzr, w10, eq  // eq = none
   4d98c:	mov	w14, w18
   4d990:	add	w18, w18, #0x1
   4d994:	cmp	w17, w18
   4d998:	add	x3, x3, #0x8
   4d99c:	b.eq	4da10 <print_arm_disassembler_options@@Base+0x254>  // b.none
   4d9a0:	ldr	x6, [x3]
   4d9a4:	ldr	x7, [x6, #32]
   4d9a8:	ldr	x20, [x6, #16]
   4d9ac:	ldr	x19, [x7, #40]
   4d9b0:	add	x19, x20, x19
   4d9b4:	cmp	x19, x0
   4d9b8:	b.hi	4da10 <print_arm_disassembler_options@@Base+0x254>  // b.pmore
   4d9bc:	cbz	x11, 4d9c8 <print_arm_disassembler_options@@Base+0x20c>
   4d9c0:	cmp	x11, x7
   4d9c4:	b.ne	4d990 <print_arm_disassembler_options@@Base+0x1d4>  // b.any
   4d9c8:	ldr	x7, [x6, #8]
   4d9cc:	ldrb	w6, [x7]
   4d9d0:	cmp	w6, #0x24
   4d9d4:	b.ne	4d990 <print_arm_disassembler_options@@Base+0x1d4>  // b.any
   4d9d8:	ldrb	w6, [x7, #1]
   4d9dc:	sub	w19, w6, #0x61
   4d9e0:	cmp	w19, #0x13
   4d9e4:	b.hi	4d990 <print_arm_disassembler_options@@Base+0x1d4>  // b.pmore
   4d9e8:	lsl	w19, w4, w19
   4d9ec:	tst	w19, w5
   4d9f0:	b.eq	4d990 <print_arm_disassembler_options@@Base+0x1d4>  // b.none
   4d9f4:	ldrb	w7, [x7, #2]
   4d9f8:	cmp	w7, #0x2e
   4d9fc:	b.eq	4d978 <print_arm_disassembler_options@@Base+0x1bc>  // b.none
   4da00:	cbz	w7, 4d978 <print_arm_disassembler_options@@Base+0x1bc>
   4da04:	b	4d990 <print_arm_disassembler_options@@Base+0x1d4>
   4da08:	mov	w14, #0xffffffff            	// #-1
   4da0c:	b	4da18 <print_arm_disassembler_options@@Base+0x25c>
   4da10:	mov	w17, w14
   4da14:	cbnz	w8, 4db34 <print_arm_disassembler_options@@Base+0x378>
   4da18:	cmp	w13, w15
   4da1c:	cset	w8, ge  // ge = tcont
   4da20:	tst	w8, w16
   4da24:	csel	w17, w15, w13, ne  // ne = any
   4da28:	cbz	x11, 4da38 <print_arm_disassembler_options@@Base+0x27c>
   4da2c:	ldr	x8, [x11, #40]
   4da30:	tbz	w17, #31, 4da40 <print_arm_disassembler_options@@Base+0x284>
   4da34:	b	4dad8 <print_arm_disassembler_options@@Base+0x31c>
   4da38:	mov	x8, xzr
   4da3c:	tbnz	w17, #31, 4dad8 <print_arm_disassembler_options@@Base+0x31c>
   4da40:	mov	w16, #0x9                   	// #9
   4da44:	mov	w15, #0x1                   	// #1
   4da48:	movk	w16, #0x8, lsl #16
   4da4c:	b	4da5c <print_arm_disassembler_options@@Base+0x2a0>
   4da50:	cmp	w17, #0x0
   4da54:	sub	w17, w17, #0x1
   4da58:	b.le	4dad8 <print_arm_disassembler_options@@Base+0x31c>
   4da5c:	ldr	x18, [x12, w17, uxtw #3]
   4da60:	ldr	x0, [x18, #32]
   4da64:	ldr	x4, [x18, #16]
   4da68:	ldr	x3, [x0, #40]
   4da6c:	add	x3, x4, x3
   4da70:	cmp	x3, x8
   4da74:	b.cc	4dad8 <print_arm_disassembler_options@@Base+0x31c>  // b.lo, b.ul, b.last
   4da78:	cbz	x11, 4da84 <print_arm_disassembler_options@@Base+0x2c8>
   4da7c:	cmp	x11, x0
   4da80:	b.ne	4da50 <print_arm_disassembler_options@@Base+0x294>  // b.any
   4da84:	ldr	x0, [x18, #8]
   4da88:	ldrb	w18, [x0]
   4da8c:	cmp	w18, #0x24
   4da90:	b.ne	4da50 <print_arm_disassembler_options@@Base+0x294>  // b.any
   4da94:	ldrb	w18, [x0, #1]
   4da98:	sub	w3, w18, #0x61
   4da9c:	cmp	w3, #0x13
   4daa0:	b.hi	4da50 <print_arm_disassembler_options@@Base+0x294>  // b.pmore
   4daa4:	lsl	w3, w15, w3
   4daa8:	tst	w3, w16
   4daac:	b.eq	4da50 <print_arm_disassembler_options@@Base+0x294>  // b.none
   4dab0:	ldrb	w0, [x0, #2]
   4dab4:	cmp	w0, #0x2e
   4dab8:	b.eq	4dac0 <print_arm_disassembler_options@@Base+0x304>  // b.none
   4dabc:	cbnz	w0, 4da50 <print_arm_disassembler_options@@Base+0x294>
   4dac0:	cmp	w18, #0x74
   4dac4:	mov	w8, #0x1                   	// #1
   4dac8:	cinc	w10, w8, ne  // ne = any
   4dacc:	cmp	w18, #0x61
   4dad0:	csel	w10, wzr, w10, eq  // eq = none
   4dad4:	b	4db34 <print_arm_disassembler_options@@Base+0x378>
   4dad8:	mov	w17, w14
   4dadc:	tbnz	w13, #31, 4db30 <print_arm_disassembler_options@@Base+0x374>
   4dae0:	mov	w8, w13
   4dae4:	cbz	x11, 4dafc <print_arm_disassembler_options@@Base+0x340>
   4dae8:	ldr	x8, [x12, x8, lsl #3]
   4daec:	ldr	x12, [x8, #32]
   4daf0:	cmp	x11, x12
   4daf4:	b.ne	4db30 <print_arm_disassembler_options@@Base+0x374>  // b.any
   4daf8:	b	4db00 <print_arm_disassembler_options@@Base+0x344>
   4dafc:	ldr	x8, [x12, x8, lsl #3]
   4db00:	ldrb	w11, [x8, #72]
   4db04:	mov	w12, #0x8                   	// #8
   4db08:	bfxil	w12, w11, #0, #3
   4db0c:	cmp	w12, #0xa
   4db10:	b.ne	4db30 <print_arm_disassembler_options@@Base+0x374>  // b.any
   4db14:	ldrb	w8, [x8, #74]
   4db18:	mov	w17, w13
   4db1c:	and	w8, w8, #0x3
   4db20:	cmp	w8, #0x1
   4db24:	cset	w10, eq  // eq = none
   4db28:	mov	w8, #0x1                   	// #1
   4db2c:	b	4db34 <print_arm_disassembler_options@@Base+0x378>
   4db30:	mov	w8, wzr
   4db34:	stp	w10, w17, [x9, #24]
   4db38:	ldr	x11, [x1, #240]
   4db3c:	str	x11, [x9, #32]
   4db40:	str	w10, [x2]
   4db44:	b	4d90c <print_arm_disassembler_options@@Base+0x150>
   4db48:	stp	x29, x30, [sp, #-16]!
   4db4c:	ldr	w8, [x1, #172]
   4db50:	mov	x29, sp
   4db54:	cmp	w8, #0x4
   4db58:	b.eq	4db94 <print_arm_disassembler_options@@Base+0x3d8>  // b.none
   4db5c:	cmp	w8, #0x2
   4db60:	b.eq	4db80 <print_arm_disassembler_options@@Base+0x3c4>  // b.none
   4db64:	cmp	w8, #0x1
   4db68:	b.ne	4dba8 <print_arm_disassembler_options@@Base+0x3ec>  // b.any
   4db6c:	ldp	x3, x0, [x1]
   4db70:	adrp	x1, 62000 <fields@@Base+0x91b4>
   4db74:	add	x1, x1, #0xffd
   4db78:	ldp	x29, x30, [sp], #16
   4db7c:	br	x3
   4db80:	ldp	x3, x0, [x1]
   4db84:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4db88:	add	x1, x1, #0xb
   4db8c:	ldp	x29, x30, [sp], #16
   4db90:	br	x3
   4db94:	ldp	x3, x0, [x1]
   4db98:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4db9c:	add	x1, x1, #0x1a
   4dba0:	ldp	x29, x30, [sp], #16
   4dba4:	br	x3
   4dba8:	bl	35700 <abort@plt>
   4dbac:	sub	sp, sp, #0x1d0
   4dbb0:	stp	x29, x30, [sp, #368]
   4dbb4:	stp	x28, x27, [sp, #384]
   4dbb8:	stp	x26, x25, [sp, #400]
   4dbbc:	stp	x24, x23, [sp, #416]
   4dbc0:	stp	x22, x21, [sp, #432]
   4dbc4:	stp	x20, x19, [sp, #448]
   4dbc8:	mov	x21, x1
   4dbcc:	ldp	x1, x19, [x1]
   4dbd0:	ldr	x27, [x21, #96]
   4dbd4:	add	x29, sp, #0x170
   4dbd8:	mov	x20, x2
   4dbdc:	mov	x22, x0
   4dbe0:	adrp	x0, 8a000 <aarch64_operands@@Base+0x5c38>
   4dbe4:	stur	x1, [x29, #-16]
   4dbe8:	add	x0, x0, #0xfc0
   4dbec:	mov	x1, x22
   4dbf0:	mov	x2, x21
   4dbf4:	mov	x3, x20
   4dbf8:	mov	w4, wzr
   4dbfc:	bl	53de0 <print_arm_disassembler_options@@Base+0x6624>
   4dc00:	cbnz	w0, 4dc38 <print_arm_disassembler_options@@Base+0x47c>
   4dc04:	mov	x0, x21
   4dc08:	mov	x1, x20
   4dc0c:	mov	w2, wzr
   4dc10:	bl	52978 <print_arm_disassembler_options@@Base+0x51bc>
   4dc14:	cbnz	w0, 4dc38 <print_arm_disassembler_options@@Base+0x47c>
   4dc18:	adrp	x0, 94000 <aarch64_operands@@Base+0xfc38>
   4dc1c:	add	x0, x0, #0x338
   4dc20:	mov	x1, x22
   4dc24:	mov	x2, x21
   4dc28:	mov	x3, x20
   4dc2c:	mov	w4, wzr
   4dc30:	bl	53de0 <print_arm_disassembler_options@@Base+0x6624>
   4dc34:	cbz	w0, 4dc58 <print_arm_disassembler_options@@Base+0x49c>
   4dc38:	ldp	x20, x19, [sp, #448]
   4dc3c:	ldp	x22, x21, [sp, #432]
   4dc40:	ldp	x24, x23, [sp, #416]
   4dc44:	ldp	x26, x25, [sp, #400]
   4dc48:	ldp	x28, x27, [sp, #384]
   4dc4c:	ldp	x29, x30, [sp, #368]
   4dc50:	add	sp, sp, #0x1d0
   4dc54:	ret
   4dc58:	ldur	x3, [x29, #-16]
   4dc5c:	adrp	x9, 86000 <aarch64_operands@@Base+0x1c38>
   4dc60:	adrp	x26, 69000 <fields@@Base+0x101b4>
   4dc64:	and	x8, x20, #0xf0000000
   4dc68:	add	x9, x9, #0xf78
   4dc6c:	add	x26, x26, #0x7f2
   4dc70:	mov	w10, #0xf0000000            	// #-268435456
   4dc74:	b	4dc84 <print_arm_disassembler_options@@Base+0x4c8>
   4dc78:	ldr	x26, [x9, #88]
   4dc7c:	add	x9, x9, #0x30
   4dc80:	cbz	x26, 4e0f0 <print_arm_disassembler_options@@Base+0x934>
   4dc84:	ldp	x12, x11, [x9, #24]
   4dc88:	and	x13, x11, x20
   4dc8c:	cmp	x13, x12
   4dc90:	b.ne	4dc78 <print_arm_disassembler_options@@Base+0x4bc>  // b.any
   4dc94:	ldr	x12, [x9]
   4dc98:	ldr	x13, [x27]
   4dc9c:	tst	x13, x12
   4dca0:	b.ne	4dcc4 <print_arm_disassembler_options@@Base+0x508>  // b.any
   4dca4:	ldr	x12, [x9, #8]
   4dca8:	ldr	x13, [x27, #8]
   4dcac:	tst	x13, x12
   4dcb0:	b.ne	4dcc4 <print_arm_disassembler_options@@Base+0x508>  // b.any
   4dcb4:	ldr	x12, [x9, #16]
   4dcb8:	ldr	x13, [x27, #16]
   4dcbc:	tst	x13, x12
   4dcc0:	b.eq	4dc78 <print_arm_disassembler_options@@Base+0x4bc>  // b.none
   4dcc4:	cmp	x8, x10
   4dcc8:	b.ne	4dcdc <print_arm_disassembler_options@@Base+0x520>  // b.any
   4dccc:	and	x12, x11, #0xf0000000
   4dcd0:	cmp	x12, x10
   4dcd4:	b.eq	4dcdc <print_arm_disassembler_options@@Base+0x520>  // b.none
   4dcd8:	cbnz	x11, 4dc78 <print_arm_disassembler_options@@Base+0x4bc>
   4dcdc:	lsr	x11, x20, #4
   4dce0:	lsr	x12, x20, #16
   4dce4:	mov	w13, #0x4f                  	// #79
   4dce8:	and	x2, x20, #0xf
   4dcec:	and	x12, x12, x13
   4dcf0:	and	x13, x11, #0x30
   4dcf4:	cmp	x2, #0xf
   4dcf8:	lsr	x9, x20, #7
   4dcfc:	stp	x2, x11, [x29, #-56]
   4dd00:	mov	w15, #0x53                  	// #83
   4dd04:	mov	w16, #0x43                  	// #67
   4dd08:	and	x5, x11, #0xf0
   4dd0c:	orr	x11, x12, x13
   4dd10:	cset	w12, eq  // eq = none
   4dd14:	tst	x20, #0x400000
   4dd18:	sbfx	x18, x20, #23, #1
   4dd1c:	mov	w23, #0xa                   	// #10
   4dd20:	mov	w7, #0x8                   	// #8
   4dd24:	and	w6, w20, #0xff
   4dd28:	adrp	x17, 6a000 <fields@@Base+0x111b4>
   4dd2c:	adrp	x14, 58000 <xexit@@Base+0x1dd4>
   4dd30:	and	w8, w9, #0x1e
   4dd34:	cset	w3, eq  // eq = none
   4dd38:	csel	w15, w16, w15, eq  // eq = none
   4dd3c:	tst	x20, #0x1000000
   4dd40:	stur	xzr, [x29, #-24]
   4dd44:	stur	wzr, [x29, #-28]
   4dd48:	add	x17, x17, #0x34f
   4dd4c:	add	x14, x14, #0x84f
   4dd50:	ubfx	x1, x20, #21, #1
   4dd54:	and	x18, x18, #0x3fffffffff000000
   4dd58:	stur	x11, [x29, #-72]
   4dd5c:	ror	w11, w6, w8
   4dd60:	str	w15, [sp, #100]
   4dd64:	csel	x15, x7, x23, eq  // eq = none
   4dd68:	tst	x20, #0x200000
   4dd6c:	and	w12, w12, w3
   4dd70:	ubfx	x4, x20, #5, #2
   4dd74:	bfxil	x18, x20, #0, #24
   4dd78:	csel	x16, x14, x17, eq  // eq = none
   4dd7c:	cmp	w11, #0xff
   4dd80:	add	x15, x15, x22
   4dd84:	orr	w12, w1, w12
   4dd88:	mvn	w10, w20
   4dd8c:	stur	x6, [x29, #-112]
   4dd90:	str	w12, [sp, #28]
   4dd94:	cset	w12, hi  // hi = pmore
   4dd98:	cmp	w4, #0x3
   4dd9c:	add	x15, x15, x18, lsl #2
   4dda0:	bfxil	x5, x20, #0, #4
   4dda4:	str	x16, [sp, #136]
   4dda8:	str	x4, [sp, #16]
   4ddac:	stur	x15, [x29, #-128]
   4ddb0:	cset	w15, ne  // ne = any
   4ddb4:	tst	x10, #0x60
   4ddb8:	adrp	x0, 62000 <fields@@Base+0x91b4>
   4ddbc:	cset	w10, ne  // ne = any
   4ddc0:	cmp	w5, #0x0
   4ddc4:	add	x0, x0, #0xfc9
   4ddc8:	lsl	w2, w6, #2
   4ddcc:	cset	w17, ne  // ne = any
   4ddd0:	tst	x20, #0x800000
   4ddd4:	cneg	x1, x2, eq  // eq = none
   4ddd8:	csel	x14, x0, x14, eq  // eq = none
   4dddc:	cset	w18, eq  // eq = none
   4dde0:	str	x1, [sp, #128]
   4dde4:	stur	x14, [x29, #-96]
   4dde8:	cneg	x14, x5, eq  // eq = none
   4ddec:	cmp	x5, #0x0
   4ddf0:	stur	x14, [x29, #-64]
   4ddf4:	cset	w14, ne  // ne = any
   4ddf8:	cmp	w11, #0x100
   4ddfc:	neg	w13, w8
   4de00:	cset	w0, cc  // cc = lo, ul, last
   4de04:	tst	w11, #0x3fffffc0
   4de08:	orr	w14, w18, w14
   4de0c:	and	w13, w13, #0x1e
   4de10:	stur	x5, [x29, #-120]
   4de14:	str	w14, [sp, #96]
   4de18:	cset	w14, eq  // eq = none
   4de1c:	tst	w11, #0xffffff0
   4de20:	lsl	w13, w6, w13
   4de24:	cset	w18, eq  // eq = none
   4de28:	tst	w11, #0x3fffffc
   4de2c:	extr	w16, w11, w13, #22
   4de30:	orr	w14, w0, w14
   4de34:	cset	w0, eq  // eq = none
   4de38:	tst	w11, #0xffffff
   4de3c:	cset	w1, eq  // eq = none
   4de40:	cmp	w16, #0x100
   4de44:	extr	w16, w11, w13, #20
   4de48:	cset	w2, cc  // cc = lo, ul, last
   4de4c:	cmp	w16, #0x100
   4de50:	extr	w16, w11, w13, #18
   4de54:	cset	w3, cc  // cc = lo, ul, last
   4de58:	cmp	w16, #0x100
   4de5c:	extr	w16, w11, w13, #16
   4de60:	cset	w4, cc  // cc = lo, ul, last
   4de64:	cmp	w16, #0x100
   4de68:	extr	w16, w11, w13, #14
   4de6c:	cset	w5, cc  // cc = lo, ul, last
   4de70:	cmp	w16, #0x100
   4de74:	extr	w16, w11, w13, #12
   4de78:	cset	w6, cc  // cc = lo, ul, last
   4de7c:	cmp	w16, #0x100
   4de80:	extr	w16, w11, w13, #10
   4de84:	cset	w7, cc  // cc = lo, ul, last
   4de88:	cmp	w16, #0x100
   4de8c:	extr	w16, w11, w13, #8
   4de90:	cset	w24, cc  // cc = lo, ul, last
   4de94:	cmp	w16, #0x100
   4de98:	extr	w16, w11, w13, #6
   4de9c:	cset	w28, cc  // cc = lo, ul, last
   4dea0:	cmp	w16, #0x100
   4dea4:	extr	w16, w11, w13, #4
   4dea8:	cset	w30, cc  // cc = lo, ul, last
   4deac:	cmp	w16, #0x100
   4deb0:	extr	w13, w11, w13, #2
   4deb4:	cset	w16, cc  // cc = lo, ul, last
   4deb8:	cmp	w13, #0x100
   4debc:	str	x11, [sp, #104]
   4dec0:	cset	w13, cc  // cc = lo, ul, last
   4dec4:	tst	w9, #0x1f
   4dec8:	ubfx	x25, x20, #7, #5
   4decc:	mov	w11, #0x20                  	// #32
   4ded0:	mov	w9, #0xa00000              	// #10485760
   4ded4:	csel	w11, w25, w11, ne  // ne = any
   4ded8:	and	x9, x20, x9
   4dedc:	str	w11, [sp, #40]
   4dee0:	cset	w11, ne  // ne = any
   4dee4:	cmp	x9, #0x800, lsl #12
   4dee8:	orr	w9, w11, w15
   4deec:	str	w9, [sp, #12]
   4def0:	orr	w9, w11, w10
   4def4:	cset	w10, ne  // ne = any
   4def8:	orr	w10, w10, w17
   4defc:	str	w9, [sp, #52]
   4df00:	orr	w9, w14, w18
   4df04:	cmp	w14, #0x0
   4df08:	str	w10, [sp, #44]
   4df0c:	lsl	w10, w12, #1
   4df10:	mov	w11, #0x4                   	// #4
   4df14:	csel	w10, w10, w11, ne  // ne = any
   4df18:	orr	w11, w9, w0
   4df1c:	cmp	w9, #0x0
   4df20:	mov	w9, #0x6                   	// #6
   4df24:	csel	w9, w10, w9, ne  // ne = any
   4df28:	orr	w10, w11, w1
   4df2c:	cmp	w11, #0x0
   4df30:	mov	w11, #0x8                   	// #8
   4df34:	csel	w9, w9, w11, ne  // ne = any
   4df38:	orr	w11, w10, w2
   4df3c:	cmp	w10, #0x0
   4df40:	orr	w10, w11, w3
   4df44:	csel	w9, w9, w23, ne  // ne = any
   4df48:	cmp	w11, #0x0
   4df4c:	mov	w11, #0xc                   	// #12
   4df50:	csel	w9, w9, w11, ne  // ne = any
   4df54:	orr	w11, w10, w4
   4df58:	tst	w10, #0x1
   4df5c:	mov	w10, #0xe                   	// #14
   4df60:	csel	w9, w9, w10, ne  // ne = any
   4df64:	orr	w10, w11, w5
   4df68:	tst	w11, #0x1
   4df6c:	mov	w14, #0x10                  	// #16
   4df70:	orr	w11, w10, w6
   4df74:	csel	w9, w9, w14, ne  // ne = any
   4df78:	tst	w10, #0x1
   4df7c:	mov	w10, #0x12                  	// #18
   4df80:	csel	w9, w9, w10, ne  // ne = any
   4df84:	orr	w10, w11, w7
   4df88:	tst	w11, #0x1
   4df8c:	mov	w11, #0x14                  	// #20
   4df90:	csel	w9, w9, w11, ne  // ne = any
   4df94:	orr	w11, w10, w24
   4df98:	tst	w10, #0x1
   4df9c:	mov	w10, #0x16                  	// #22
   4dfa0:	csel	w9, w9, w10, ne  // ne = any
   4dfa4:	orr	w10, w11, w28
   4dfa8:	tst	w11, #0x1
   4dfac:	mov	w11, #0x18                  	// #24
   4dfb0:	mov	w12, #0x10                  	// #16
   4dfb4:	csel	w9, w9, w11, ne  // ne = any
   4dfb8:	orr	w11, w10, w30
   4dfbc:	tst	w10, #0x1
   4dfc0:	mov	w10, #0x1a                  	// #26
   4dfc4:	stur	x12, [x29, #-40]
   4dfc8:	csel	w9, w9, w10, ne  // ne = any
   4dfcc:	orr	w12, w11, w16
   4dfd0:	tst	w11, #0x1
   4dfd4:	mov	w11, #0x1c                  	// #28
   4dfd8:	csel	w9, w9, w11, ne  // ne = any
   4dfdc:	orr	w13, w12, w13
   4dfe0:	tst	w12, #0x1
   4dfe4:	mov	w12, #0x1e                  	// #30
   4dfe8:	csel	w9, w9, w12, ne  // ne = any
   4dfec:	cmp	w9, w8
   4dff0:	cset	w9, eq  // eq = none
   4dff4:	str	w8, [sp, #48]
   4dff8:	and	w8, w13, w9
   4dffc:	str	w8, [sp, #92]
   4e000:	ldur	x8, [x29, #-48]
   4e004:	mov	w10, #0x2000200             	// #33554944
   4e008:	mov	w11, #0x1200000             	// #18874368
   4e00c:	lsl	x12, x20, #40
   4e010:	and	x13, x8, #0xf000
   4e014:	and	x14, x8, #0xfff0
   4e018:	and	x8, x20, x10
   4e01c:	stur	x8, [x29, #-160]
   4e020:	and	x8, x20, x11
   4e024:	stur	x8, [x29, #-168]
   4e028:	add	x8, x22, #0x8
   4e02c:	ldur	x10, [x29, #-56]
   4e030:	add	x9, x8, x12, asr #38
   4e034:	stur	x9, [x29, #-176]
   4e038:	mov	w9, #0x4f0000              	// #5177344
   4e03c:	and	x9, x20, x9
   4e040:	stur	x9, [x29, #-80]
   4e044:	mov	w9, #0x7777                	// #30583
   4e048:	sub	x10, x10, #0x1
   4e04c:	lsr	w9, w9, w10
   4e050:	bfxil	x13, x20, #0, #12
   4e054:	bfxil	x14, x20, #0, #4
   4e058:	and	w9, w9, #0x1
   4e05c:	stp	x14, x13, [x29, #-152]
   4e060:	str	x10, [sp, #120]
   4e064:	str	w9, [sp, #76]
   4e068:	ldur	x9, [x29, #-64]
   4e06c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e070:	add	x28, x28, #0xf8
   4e074:	add	x8, x8, x9
   4e078:	and	x9, x20, #0xfffffff
   4e07c:	str	x9, [sp, #144]
   4e080:	and	x9, x20, #0xf0
   4e084:	str	x9, [sp, #184]
   4e088:	ubfx	x9, x20, #16, #4
   4e08c:	str	x8, [sp, #80]
   4e090:	stur	x9, [x29, #-88]
   4e094:	and	x9, x20, #0xf000
   4e098:	str	x9, [sp, #176]
   4e09c:	and	x9, x20, #0xff0
   4e0a0:	stur	x9, [x29, #-104]
   4e0a4:	ubfx	x9, x20, #8, #4
   4e0a8:	str	x9, [sp, #32]
   4e0ac:	ubfx	x9, x20, #28, #4
   4e0b0:	str	x9, [sp, #168]
   4e0b4:	ubfx	x9, x20, #12, #4
   4e0b8:	ubfx	x8, x20, #16, #5
   4e0bc:	str	x9, [sp, #56]
   4e0c0:	orr	x9, x20, #0x1000000
   4e0c4:	str	x9, [sp, #160]
   4e0c8:	stur	x25, [x29, #-136]
   4e0cc:	str	x8, [sp, #64]
   4e0d0:	sub	x8, x8, x25
   4e0d4:	str	x8, [sp, #152]
   4e0d8:	add	x8, x8, #0x1
   4e0dc:	mov	w25, #0x2                   	// #2
   4e0e0:	str	x8, [sp, #112]
   4e0e4:	mov	w8, #0x10                  	// #16
   4e0e8:	stur	x8, [x29, #-48]
   4e0ec:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e0f0:	mov	x0, x19
   4e0f4:	mov	w2, w20
   4e0f8:	ldp	x20, x19, [sp, #448]
   4e0fc:	ldp	x22, x21, [sp, #432]
   4e100:	ldp	x24, x23, [sp, #416]
   4e104:	ldp	x26, x25, [sp, #400]
   4e108:	ldp	x28, x27, [sp, #384]
   4e10c:	ldp	x29, x30, [sp, #368]
   4e110:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e114:	add	x1, x1, #0xc4
   4e118:	add	sp, sp, #0x1d0
   4e11c:	br	x3
   4e120:	ldur	x24, [x29, #-144]
   4e124:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e128:	mov	x0, x19
   4e12c:	add	x1, x1, #0xa3
   4e130:	mov	x2, x24
   4e134:	blr	x4
   4e138:	stur	x24, [x29, #-24]
   4e13c:	add	x26, x26, #0x1
   4e140:	ldrb	w2, [x26]
   4e144:	ldur	x4, [x29, #-16]
   4e148:	cmp	w2, #0x25
   4e14c:	b.eq	4e16c <print_arm_disassembler_options@@Base+0x9b0>  // b.none
   4e150:	cbz	w2, 4ed68 <print_arm_disassembler_options@@Base+0x15ac>
   4e154:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4e158:	mov	x0, x19
   4e15c:	add	x1, x1, #0xde6
   4e160:	blr	x4
   4e164:	add	x26, x26, #0x1
   4e168:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e16c:	ldrb	w9, [x26, #1]!
   4e170:	sub	w8, w9, #0x25
   4e174:	cmp	w8, #0x4f
   4e178:	b.hi	4edc8 <print_arm_disassembler_options@@Base+0x160c>  // b.pmore
   4e17c:	adr	x10, 4e120 <print_arm_disassembler_options@@Base+0x964>
   4e180:	ldrh	w11, [x28, x8, lsl #1]
   4e184:	add	x10, x10, x11, lsl #2
   4e188:	mov	w24, wzr
   4e18c:	br	x10
   4e190:	mov	x24, xzr
   4e194:	mov	w8, wzr
   4e198:	sub	w10, w9, #0x30
   4e19c:	and	w10, w10, #0xff
   4e1a0:	cmp	w10, #0x9
   4e1a4:	b.hi	4e1cc <print_arm_disassembler_options@@Base+0xa10>  // b.pmore
   4e1a8:	mov	w10, wzr
   4e1ac:	mul	w10, w10, w23
   4e1b0:	add	w10, w10, w9, uxtb
   4e1b4:	ldrb	w9, [x26, #1]!
   4e1b8:	sub	w10, w10, #0x30
   4e1bc:	sub	w11, w9, #0x30
   4e1c0:	cmp	w11, #0xa
   4e1c4:	b.cc	4e1ac <print_arm_disassembler_options@@Base+0x9f0>  // b.lo, b.ul, b.last
   4e1c8:	b	4e1d0 <print_arm_disassembler_options@@Base+0xa14>
   4e1cc:	mov	w10, wzr
   4e1d0:	and	w11, w9, #0xff
   4e1d4:	cmp	w11, #0x2d
   4e1d8:	b.ne	4e214 <print_arm_disassembler_options@@Base+0xa58>  // b.any
   4e1dc:	ldrb	w9, [x26, #1]!
   4e1e0:	sub	w11, w9, #0x30
   4e1e4:	cmp	w11, #0x9
   4e1e8:	mov	x28, x26
   4e1ec:	mov	w11, wzr
   4e1f0:	b.hi	4e21c <print_arm_disassembler_options@@Base+0xa60>  // b.pmore
   4e1f4:	mul	w11, w11, w23
   4e1f8:	add	w11, w11, w9, uxtb
   4e1fc:	ldrb	w9, [x28, #1]!
   4e200:	sub	w11, w11, #0x30
   4e204:	sub	w12, w9, #0x30
   4e208:	cmp	w12, #0xa
   4e20c:	b.cc	4e1f4 <print_arm_disassembler_options@@Base+0xa38>  // b.lo, b.ul, b.last
   4e210:	b	4e21c <print_arm_disassembler_options@@Base+0xa60>
   4e214:	mov	w11, w10
   4e218:	mov	x28, x26
   4e21c:	subs	w11, w11, w10
   4e220:	b.mi	4edc8 <print_arm_disassembler_options@@Base+0x160c>  // b.first
   4e224:	and	w9, w9, #0xff
   4e228:	sub	w9, w9, #0x27
   4e22c:	cmp	w9, #0x51
   4e230:	b.hi	4edc8 <print_arm_disassembler_options@@Base+0x160c>  // b.pmore
   4e234:	adrp	x15, 62000 <fields@@Base+0x91b4>
   4e238:	lsl	x12, x25, x11
   4e23c:	add	x15, x15, #0x198
   4e240:	lsr	x10, x20, x10
   4e244:	adr	x13, 4e270 <print_arm_disassembler_options@@Base+0xab4>
   4e248:	ldrh	w14, [x15, x9, lsl #1]
   4e24c:	add	x13, x13, x14, lsl #2
   4e250:	sub	x9, x12, #0x1
   4e254:	and	x9, x9, x10
   4e258:	add	w11, w8, w11
   4e25c:	lsl	x9, x9, x8
   4e260:	add	w8, w11, #0x1
   4e264:	orr	x24, x9, x24
   4e268:	add	x26, x28, #0x1
   4e26c:	br	x13
   4e270:	ldrb	w9, [x26]
   4e274:	b	4e198 <print_arm_disassembler_options@@Base+0x9dc>
   4e278:	ldur	x24, [x29, #-152]
   4e27c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   4e280:	mov	x0, x19
   4e284:	add	x1, x1, #0x1
   4e288:	b	4e994 <print_arm_disassembler_options@@Base+0x11d8>
   4e28c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e290:	mov	x0, x19
   4e294:	add	x1, x1, #0x56
   4e298:	blr	x4
   4e29c:	mov	x24, xzr
   4e2a0:	mov	w28, wzr
   4e2a4:	b	4e2e8 <print_arm_disassembler_options@@Base+0xb2c>
   4e2a8:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e2ac:	ldr	w8, [x8, #1560]
   4e2b0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4e2b4:	mov	w9, #0x90                  	// #144
   4e2b8:	add	x10, x10, #0xaf8
   4e2bc:	madd	x8, x8, x9, x10
   4e2c0:	add	x8, x8, x24, lsl #3
   4e2c4:	ldr	x2, [x8, #16]
   4e2c8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e2cc:	mov	x0, x19
   4e2d0:	add	x1, x1, #0x816
   4e2d4:	blr	x3
   4e2d8:	mov	w28, #0x1                   	// #1
   4e2dc:	add	x24, x24, #0x1
   4e2e0:	cmp	x24, #0x10
   4e2e4:	b.eq	4e320 <print_arm_disassembler_options@@Base+0xb64>  // b.none
   4e2e8:	mov	w8, #0x1                   	// #1
   4e2ec:	ldur	x3, [x29, #-16]
   4e2f0:	lsl	w8, w8, w24
   4e2f4:	sxtw	x8, w8
   4e2f8:	tst	x8, x20
   4e2fc:	b.eq	4e2dc <print_arm_disassembler_options@@Base+0xb20>  // b.none
   4e300:	cbz	w28, 4e2a8 <print_arm_disassembler_options@@Base+0xaec>
   4e304:	ldur	x2, [x29, #-16]
   4e308:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e30c:	mov	x0, x19
   4e310:	add	x1, x1, #0xf48
   4e314:	blr	x2
   4e318:	ldur	x3, [x29, #-16]
   4e31c:	b	4e2a8 <print_arm_disassembler_options@@Base+0xaec>
   4e320:	ldur	x2, [x29, #-16]
   4e324:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e328:	mov	x0, x19
   4e32c:	add	x1, x1, #0x119
   4e330:	blr	x2
   4e334:	ldur	w8, [x29, #-28]
   4e338:	cmp	w28, #0x0
   4e33c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e340:	add	x28, x28, #0xf8
   4e344:	csinc	w8, w8, wzr, ne  // ne = any
   4e348:	stur	w8, [x29, #-28]
   4e34c:	add	x26, x26, #0x1
   4e350:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e354:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e358:	mov	x0, x19
   4e35c:	add	x1, x1, #0x28
   4e360:	blr	x4
   4e364:	add	x26, x26, #0x1
   4e368:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e36c:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e370:	ldr	w8, [x8, #1560]
   4e374:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4e378:	mov	w9, #0x90                  	// #144
   4e37c:	add	x10, x10, #0xaf8
   4e380:	madd	x8, x8, x9, x10
   4e384:	ldur	x9, [x29, #-88]
   4e388:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   4e38c:	mov	x0, x19
   4e390:	add	x1, x1, #0x3a4
   4e394:	add	x8, x8, x9, lsl #3
   4e398:	ldr	x2, [x8, #16]
   4e39c:	blr	x4
   4e3a0:	tbnz	w20, #24, 4e8cc <print_arm_disassembler_options@@Base+0x1110>
   4e3a4:	ldur	x2, [x29, #-16]
   4e3a8:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e3ac:	mov	x0, x19
   4e3b0:	add	x1, x1, #0xeb
   4e3b4:	blr	x2
   4e3b8:	tbnz	w20, #21, 4ea68 <print_arm_disassembler_options@@Base+0x12ac>
   4e3bc:	ldur	x24, [x29, #-112]
   4e3c0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e3c4:	mov	x0, x19
   4e3c8:	add	x1, x1, #0x69
   4e3cc:	b	4ea80 <print_arm_disassembler_options@@Base+0x12c4>
   4e3d0:	ldr	x8, [x21, #120]
   4e3d4:	ldur	x24, [x29, #-128]
   4e3d8:	b	4e4b0 <print_arm_disassembler_options@@Base+0xcf4>
   4e3dc:	ldur	x8, [x29, #-160]
   4e3e0:	cmp	x8, #0x200
   4e3e4:	b.ne	4e8f4 <print_arm_disassembler_options@@Base+0x1138>  // b.any
   4e3e8:	ldur	x0, [x29, #-72]
   4e3ec:	bl	53c14 <print_arm_disassembler_options@@Base+0x6458>
   4e3f0:	cbz	x0, 4e8ac <print_arm_disassembler_options@@Base+0x10f0>
   4e3f4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e3f8:	mov	x2, x0
   4e3fc:	mov	x0, x19
   4e400:	add	x1, x1, #0x816
   4e404:	b	4e8bc <print_arm_disassembler_options@@Base+0x1100>
   4e408:	ldr	x2, [sp, #160]
   4e40c:	mov	x0, x22
   4e410:	mov	x1, x21
   4e414:	b	4e498 <print_arm_disassembler_options@@Base+0xcdc>
   4e418:	mov	w24, #0x1                   	// #1
   4e41c:	ldur	x8, [x29, #-80]
   4e420:	cmp	x8, #0x4f0, lsl #12
   4e424:	b.ne	4e5f4 <print_arm_disassembler_options@@Base+0xe38>  // b.any
   4e428:	tbnz	w20, #24, 4e91c <print_arm_disassembler_options@@Base+0x1160>
   4e42c:	ldur	x2, [x29, #-96]
   4e430:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e434:	mov	x0, x19
   4e438:	add	x1, x1, #0x42
   4e43c:	ldur	x3, [x29, #-120]
   4e440:	blr	x4
   4e444:	ldur	w8, [x29, #-28]
   4e448:	cmp	w24, #0x0
   4e44c:	add	x26, x26, #0x1
   4e450:	csinc	w8, w8, wzr, ne  // ne = any
   4e454:	stur	w8, [x29, #-28]
   4e458:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e45c:	ldr	x8, [sp, #184]
   4e460:	cmp	x8, #0x60
   4e464:	b.ne	4e940 <print_arm_disassembler_options@@Base+0x1184>  // b.any
   4e468:	ldur	x2, [x29, #-56]
   4e46c:	mov	x0, x19
   4e470:	cmp	x2, #0xf
   4e474:	b.ne	4ea90 <print_arm_disassembler_options@@Base+0x12d4>  // b.any
   4e478:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4e47c:	add	x1, x1, #0x5e3
   4e480:	blr	x4
   4e484:	add	x26, x26, #0x1
   4e488:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e48c:	mov	x0, x22
   4e490:	mov	x1, x21
   4e494:	mov	x2, x20
   4e498:	bl	537f8 <print_arm_disassembler_options@@Base+0x603c>
   4e49c:	stur	x0, [x29, #-24]
   4e4a0:	add	x26, x26, #0x1
   4e4a4:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e4a8:	ldr	x8, [x21, #120]
   4e4ac:	ldur	x24, [x29, #-176]
   4e4b0:	mov	x0, x24
   4e4b4:	mov	x1, x21
   4e4b8:	blr	x8
   4e4bc:	mov	w8, #0x1                   	// #1
   4e4c0:	strb	w8, [x21, #196]
   4e4c4:	str	w25, [x21, #200]
   4e4c8:	str	x24, [x21, #208]
   4e4cc:	add	x26, x26, #0x1
   4e4d0:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e4d4:	ldr	x8, [sp, #168]
   4e4d8:	cmp	x8, #0xe
   4e4dc:	b.eq	4e13c <print_arm_disassembler_options@@Base+0x980>  // b.none
   4e4e0:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   4e4e4:	add	x9, x9, #0xf38
   4e4e8:	b	4e960 <print_arm_disassembler_options@@Base+0x11a4>
   4e4ec:	tbnz	w20, #25, 4e97c <print_arm_disassembler_options@@Base+0x11c0>
   4e4f0:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e4f4:	ldr	w8, [x8, #1560]
   4e4f8:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4e4fc:	mov	w9, #0x90                  	// #144
   4e500:	add	x10, x10, #0xaf8
   4e504:	madd	x8, x8, x9, x10
   4e508:	ldur	x9, [x29, #-56]
   4e50c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e510:	mov	x0, x19
   4e514:	add	x1, x1, #0x816
   4e518:	add	x8, x8, x9, lsl #3
   4e51c:	ldr	x2, [x8, #16]
   4e520:	blr	x4
   4e524:	ldur	x8, [x29, #-104]
   4e528:	cbz	x8, 4e13c <print_arm_disassembler_options@@Base+0x980>
   4e52c:	tbnz	w20, #4, 4ec80 <print_arm_disassembler_options@@Base+0x14c4>
   4e530:	ldur	x4, [x29, #-16]
   4e534:	ldr	w8, [sp, #12]
   4e538:	tbz	w8, #0, 4ed38 <print_arm_disassembler_options@@Base+0x157c>
   4e53c:	ldr	x8, [sp, #16]
   4e540:	adrp	x9, 94000 <aarch64_operands@@Base+0xfc38>
   4e544:	add	x9, x9, #0x6b8
   4e548:	ldr	w3, [sp, #40]
   4e54c:	ldr	x2, [x9, x8, lsl #3]
   4e550:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e554:	mov	x0, x19
   4e558:	add	x1, x1, #0x6dc
   4e55c:	blr	x4
   4e560:	add	x26, x26, #0x1
   4e564:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e568:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e56c:	ldr	w8, [x8, #1560]
   4e570:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4e574:	mov	w9, #0x90                  	// #144
   4e578:	add	x10, x10, #0xaf8
   4e57c:	madd	x8, x8, x9, x10
   4e580:	ldur	x9, [x29, #-56]
   4e584:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e588:	mov	x0, x19
   4e58c:	add	x1, x1, #0x816
   4e590:	add	x8, x8, x9, lsl #3
   4e594:	ldr	x2, [x8, #16]
   4e598:	blr	x4
   4e59c:	ldur	x8, [x29, #-104]
   4e5a0:	cbz	x8, 4e13c <print_arm_disassembler_options@@Base+0x980>
   4e5a4:	tbnz	w20, #4, 4e9fc <print_arm_disassembler_options@@Base+0x1240>
   4e5a8:	ldur	x3, [x29, #-16]
   4e5ac:	ldr	w8, [sp, #52]
   4e5b0:	tbz	w8, #0, 4ecd4 <print_arm_disassembler_options@@Base+0x1518>
   4e5b4:	ldr	w2, [sp, #40]
   4e5b8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4e5bc:	mov	x0, x19
   4e5c0:	add	x1, x1, #0xb6c
   4e5c4:	blr	x3
   4e5c8:	add	x26, x26, #0x1
   4e5cc:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e5d0:	ldur	x8, [x29, #-168]
   4e5d4:	cmp	x8, #0x200, lsl #12
   4e5d8:	b.ne	4e13c <print_arm_disassembler_options@@Base+0x980>  // b.any
   4e5dc:	adrp	x1, 60000 <fields@@Base+0x71b4>
   4e5e0:	mov	x0, x19
   4e5e4:	add	x1, x1, #0x66b
   4e5e8:	blr	x4
   4e5ec:	add	x26, x26, #0x1
   4e5f0:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e5f4:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e5f8:	ldr	w8, [x8, #1560]
   4e5fc:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4e600:	mov	w9, #0x90                  	// #144
   4e604:	add	x10, x10, #0xaf8
   4e608:	madd	x8, x8, x9, x10
   4e60c:	ldur	x9, [x29, #-88]
   4e610:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   4e614:	mov	x0, x19
   4e618:	add	x1, x1, #0x3a4
   4e61c:	add	x8, x8, x9, lsl #3
   4e620:	ldr	x2, [x8, #16]
   4e624:	blr	x4
   4e628:	tbnz	w20, #24, 4e9a0 <print_arm_disassembler_options@@Base+0x11e4>
   4e62c:	tbz	w20, #22, 4eaa4 <print_arm_disassembler_options@@Base+0x12e8>
   4e630:	ldur	x2, [x29, #-96]
   4e634:	ldur	x4, [x29, #-16]
   4e638:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e63c:	mov	x0, x19
   4e640:	add	x1, x1, #0x45
   4e644:	ldur	x3, [x29, #-120]
   4e648:	blr	x4
   4e64c:	ldur	x8, [x29, #-64]
   4e650:	stur	x8, [x29, #-24]
   4e654:	cbz	w24, 4ed1c <print_arm_disassembler_options@@Base+0x1560>
   4e658:	ldur	x8, [x29, #-64]
   4e65c:	add	x26, x26, #0x1
   4e660:	stur	x8, [x29, #-24]
   4e664:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e668:	ldr	x8, [sp, #152]
   4e66c:	tbnz	x8, #63, 4e9dc <print_arm_disassembler_options@@Base+0x1220>
   4e670:	ldur	x2, [x29, #-136]
   4e674:	ldr	x3, [sp, #112]
   4e678:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e67c:	mov	x0, x19
   4e680:	add	x1, x1, #0x9d
   4e684:	blr	x4
   4e688:	add	x26, x26, #0x1
   4e68c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e690:	ldr	x8, [sp, #176]
   4e694:	cmp	x8, #0xf, lsl #12
   4e698:	b.ne	4e13c <print_arm_disassembler_options@@Base+0x980>  // b.any
   4e69c:	ldrb	w8, [x27, #1]
   4e6a0:	tbnz	w8, #4, 4eaf0 <print_arm_disassembler_options@@Base+0x1334>
   4e6a4:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   4e6a8:	mov	x0, x19
   4e6ac:	add	x1, x1, #0xb30
   4e6b0:	blr	x4
   4e6b4:	add	x26, x26, #0x1
   4e6b8:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e6bc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e6c0:	mov	x0, x19
   4e6c4:	add	x1, x1, #0x20
   4e6c8:	mov	x2, x24
   4e6cc:	blr	x4
   4e6d0:	ldr	x8, [sp, #144]
   4e6d4:	mov	w9, #0x1                   	// #1
   4e6d8:	movk	w9, #0xff0, lsl #16
   4e6dc:	cmp	x8, x9
   4e6e0:	b.eq	4ea40 <print_arm_disassembler_options@@Base+0x1284>  // b.none
   4e6e4:	mov	w9, #0xff00000             	// #267386880
   4e6e8:	cmp	x8, x9
   4e6ec:	b.ne	4ea54 <print_arm_disassembler_options@@Base+0x1298>  // b.any
   4e6f0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e6f4:	mov	x0, x19
   4e6f8:	add	x1, x1, #0x84
   4e6fc:	b	4ea4c <print_arm_disassembler_options@@Base+0x1290>
   4e700:	ldur	w14, [x29, #-28]
   4e704:	cmp	x24, #0xf
   4e708:	csinc	w14, w14, wzr, ne  // ne = any
   4e70c:	b	4e790 <print_arm_disassembler_options@@Base+0xfd4>
   4e710:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e714:	and	x2, x24, #0xf
   4e718:	mov	x0, x19
   4e71c:	add	x1, x1, #0x97
   4e720:	b	4e870 <print_arm_disassembler_options@@Base+0x10b4>
   4e724:	lsl	x2, x24, #3
   4e728:	b	4e834 <print_arm_disassembler_options@@Base+0x1078>
   4e72c:	mov	x9, #0xffffffffffffffff    	// #-1
   4e730:	lsl	x8, x9, x8
   4e734:	mvn	x8, x8
   4e738:	cmp	x24, x8
   4e73c:	b.eq	4e88c <print_arm_disassembler_options@@Base+0x10d0>  // b.none
   4e740:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e744:	add	x28, x28, #0xf8
   4e748:	add	x26, x26, #0x1
   4e74c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e750:	mov	w9, #0x1                   	// #1
   4e754:	lsl	w8, w9, w8
   4e758:	sxtw	x26, w8
   4e75c:	sub	x8, x26, w24, sxtw
   4e760:	ldrb	w2, [x28, x8]
   4e764:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4e768:	mov	x0, x19
   4e76c:	add	x1, x1, #0xde6
   4e770:	blr	x4
   4e774:	add	x26, x28, x26
   4e778:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e77c:	add	x28, x28, #0xf8
   4e780:	add	x26, x26, #0x1
   4e784:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e788:	add	x24, x24, #0x1
   4e78c:	ldur	w14, [x29, #-28]
   4e790:	ldp	x11, x15, [x29, #-48]
   4e794:	ldrb	w8, [x28, #1]
   4e798:	adrp	x13, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4e79c:	adrp	x16, 86000 <aarch64_operands@@Base+0x1c38>
   4e7a0:	cmp	x11, x24
   4e7a4:	cset	w9, eq  // eq = none
   4e7a8:	cmp	w8, #0x75
   4e7ac:	csel	x10, x26, x28, eq  // eq = none
   4e7b0:	csel	x11, x24, x11, eq  // eq = none
   4e7b4:	stur	x11, [x29, #-48]
   4e7b8:	mov	x11, x10
   4e7bc:	ldrb	w12, [x11, #1]!
   4e7c0:	ldr	w13, [x13, #1560]
   4e7c4:	cset	w8, eq  // eq = none
   4e7c8:	cmp	x15, x24
   4e7cc:	and	w8, w9, w8
   4e7d0:	cset	w9, eq  // eq = none
   4e7d4:	cmp	w12, #0x55
   4e7d8:	mov	w12, #0x90                  	// #144
   4e7dc:	add	x16, x16, #0xaf8
   4e7e0:	madd	x12, x13, x12, x16
   4e7e4:	csel	x26, x11, x10, eq  // eq = none
   4e7e8:	cset	w10, eq  // eq = none
   4e7ec:	add	x11, x12, x24, lsl #3
   4e7f0:	and	w9, w9, w10
   4e7f4:	ldr	x2, [x11, #16]
   4e7f8:	orr	w8, w8, w9
   4e7fc:	csel	x15, x24, x15, eq  // eq = none
   4e800:	cmp	w8, #0x0
   4e804:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e808:	csinc	w14, w14, wzr, eq  // eq = none
   4e80c:	mov	x0, x19
   4e810:	add	x1, x1, #0x816
   4e814:	stur	x15, [x29, #-40]
   4e818:	stur	w14, [x29, #-28]
   4e81c:	blr	x4
   4e820:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e824:	add	x28, x28, #0xf8
   4e828:	add	x26, x26, #0x1
   4e82c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e830:	add	x2, x24, #0x1
   4e834:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e838:	mov	x0, x19
   4e83c:	add	x1, x1, #0x858
   4e840:	stur	x2, [x29, #-24]
   4e844:	blr	x4
   4e848:	b	4ea54 <print_arm_disassembler_options@@Base+0x1298>
   4e84c:	cbz	x24, 4e88c <print_arm_disassembler_options@@Base+0x10d0>
   4e850:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e854:	add	x28, x28, #0xf8
   4e858:	add	x26, x26, #0x1
   4e85c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e860:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e864:	mov	x0, x19
   4e868:	add	x1, x1, #0x858
   4e86c:	mov	x2, x24
   4e870:	blr	x4
   4e874:	mov	x26, x28
   4e878:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e87c:	stur	x24, [x29, #-24]
   4e880:	add	x28, x28, #0xf8
   4e884:	add	x26, x26, #0x1
   4e888:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e88c:	ldrb	w2, [x26], #1
   4e890:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4e894:	mov	x0, x19
   4e898:	add	x1, x1, #0xde6
   4e89c:	blr	x4
   4e8a0:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4e8a4:	add	x28, x28, #0xf8
   4e8a8:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e8ac:	ldur	x2, [x29, #-72]
   4e8b0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e8b4:	mov	x0, x19
   4e8b8:	add	x1, x1, #0x70
   4e8bc:	ldur	x3, [x29, #-16]
   4e8c0:	blr	x3
   4e8c4:	add	x26, x26, #0x1
   4e8c8:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e8cc:	ldur	x8, [x29, #-112]
   4e8d0:	cbz	w8, 4ec5c <print_arm_disassembler_options@@Base+0x14a0>
   4e8d4:	ldp	x24, x3, [sp, #128]
   4e8d8:	ldur	x4, [x29, #-16]
   4e8dc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e8e0:	mov	x0, x19
   4e8e4:	add	x1, x1, #0x60
   4e8e8:	mov	w2, w24
   4e8ec:	blr	x4
   4e8f0:	b	4e138 <print_arm_disassembler_options@@Base+0x97c>
   4e8f4:	ldr	w2, [sp, #100]
   4e8f8:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e8fc:	mov	x0, x19
   4e900:	add	x1, x1, #0x7d
   4e904:	blr	x4
   4e908:	tbnz	w20, #19, 4eb00 <print_arm_disassembler_options@@Base+0x1344>
   4e90c:	tbnz	w20, #18, 4eb18 <print_arm_disassembler_options@@Base+0x135c>
   4e910:	tbnz	w20, #17, 4eb30 <print_arm_disassembler_options@@Base+0x1374>
   4e914:	tbz	w20, #16, 4e13c <print_arm_disassembler_options@@Base+0x980>
   4e918:	b	4eb48 <print_arm_disassembler_options@@Base+0x138c>
   4e91c:	ldr	w8, [sp, #96]
   4e920:	cbz	w8, 4eb64 <print_arm_disassembler_options@@Base+0x13a8>
   4e924:	ldur	x2, [x29, #-96]
   4e928:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e92c:	mov	x0, x19
   4e930:	add	x1, x1, #0x2b
   4e934:	ldur	x3, [x29, #-120]
   4e938:	blr	x4
   4e93c:	b	4eb74 <print_arm_disassembler_options@@Base+0x13b8>
   4e940:	ldr	x8, [sp, #120]
   4e944:	cmp	w8, #0xe
   4e948:	b.hi	4eb8c <print_arm_disassembler_options@@Base+0x13d0>  // b.pmore
   4e94c:	ldr	w8, [sp, #76]
   4e950:	cbz	w8, 4eb8c <print_arm_disassembler_options@@Base+0x13d0>
   4e954:	ldr	x8, [sp, #120]
   4e958:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   4e95c:	add	x9, x9, #0x690
   4e960:	ldr	x2, [x9, x8, lsl #3]
   4e964:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4e968:	mov	x0, x19
   4e96c:	add	x1, x1, #0x816
   4e970:	blr	x4
   4e974:	add	x26, x26, #0x1
   4e978:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e97c:	ldr	w8, [sp, #92]
   4e980:	tbz	w8, #0, 4eba8 <print_arm_disassembler_options@@Base+0x13ec>
   4e984:	ldr	x24, [sp, #104]
   4e988:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4e98c:	mov	x0, x19
   4e990:	add	x1, x1, #0xb6e
   4e994:	mov	w2, w24
   4e998:	blr	x4
   4e99c:	b	4e138 <print_arm_disassembler_options@@Base+0x97c>
   4e9a0:	tbz	w20, #22, 4ebd0 <print_arm_disassembler_options@@Base+0x1414>
   4e9a4:	ldur	x3, [x29, #-16]
   4e9a8:	ldr	w8, [sp, #44]
   4e9ac:	cbz	w8, 4e9d0 <print_arm_disassembler_options@@Base+0x1214>
   4e9b0:	ldur	x2, [x29, #-96]
   4e9b4:	ldur	x4, [x29, #-16]
   4e9b8:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e9bc:	mov	x0, x19
   4e9c0:	add	x1, x1, #0x46
   4e9c4:	ldur	x3, [x29, #-120]
   4e9c8:	blr	x4
   4e9cc:	ldur	x3, [x29, #-16]
   4e9d0:	ldur	x8, [x29, #-64]
   4e9d4:	stur	x8, [x29, #-24]
   4e9d8:	b	4ec40 <print_arm_disassembler_options@@Base+0x1484>
   4e9dc:	ldur	x2, [x29, #-136]
   4e9e0:	ldr	x3, [sp, #64]
   4e9e4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4e9e8:	mov	x0, x19
   4e9ec:	add	x1, x1, #0xa8
   4e9f0:	blr	x4
   4e9f4:	add	x26, x26, #0x1
   4e9f8:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4e9fc:	ldur	x3, [x29, #-16]
   4ea00:	tbnz	w20, #7, 4ecec <print_arm_disassembler_options@@Base+0x1530>
   4ea04:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4ea08:	ldr	w8, [x8, #1560]
   4ea0c:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4ea10:	mov	w9, #0x90                  	// #144
   4ea14:	add	x10, x10, #0xaf8
   4ea18:	madd	x8, x8, x9, x10
   4ea1c:	ldr	x9, [sp, #32]
   4ea20:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ea24:	mov	x0, x19
   4ea28:	add	x1, x1, #0x13e
   4ea2c:	add	x8, x8, x9, lsl #3
   4ea30:	ldr	x2, [x8, #16]
   4ea34:	blr	x3
   4ea38:	add	x26, x26, #0x1
   4ea3c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ea40:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ea44:	mov	x0, x19
   4ea48:	add	x1, x1, #0x8b
   4ea4c:	ldur	x2, [x29, #-16]
   4ea50:	blr	x2
   4ea54:	mov	x26, x28
   4ea58:	adrp	x28, 62000 <fields@@Base+0x91b4>
   4ea5c:	add	x28, x28, #0xf8
   4ea60:	add	x26, x26, #0x1
   4ea64:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ea68:	ldur	x8, [x29, #-112]
   4ea6c:	cbz	w8, 4ec70 <print_arm_disassembler_options@@Base+0x14b4>
   4ea70:	ldr	x24, [sp, #128]
   4ea74:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4ea78:	mov	x0, x19
   4ea7c:	add	x1, x1, #0xb6c
   4ea80:	ldur	x3, [x29, #-16]
   4ea84:	mov	w2, w24
   4ea88:	blr	x3
   4ea8c:	b	4e138 <print_arm_disassembler_options@@Base+0x97c>
   4ea90:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4ea94:	add	x1, x1, #0xb6e
   4ea98:	blr	x4
   4ea9c:	add	x26, x26, #0x1
   4eaa0:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eaa4:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4eaa8:	ldr	w8, [x8, #1560]
   4eaac:	ldur	x25, [x29, #-56]
   4eab0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4eab4:	mov	w9, #0x90                  	// #144
   4eab8:	add	x10, x10, #0xaf8
   4eabc:	madd	x8, x8, x9, x10
   4eac0:	add	x8, x8, x25, lsl #3
   4eac4:	ldr	x3, [x8, #16]
   4eac8:	ldur	x2, [x29, #-96]
   4eacc:	ldur	x4, [x29, #-16]
   4ead0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ead4:	mov	x0, x19
   4ead8:	add	x1, x1, #0x4e
   4eadc:	blr	x4
   4eae0:	cbz	w24, 4ed04 <print_arm_disassembler_options@@Base+0x1548>
   4eae4:	mov	w25, #0x2                   	// #2
   4eae8:	add	x26, x26, #0x1
   4eaec:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eaf0:	mov	w8, #0x1                   	// #1
   4eaf4:	stur	w8, [x29, #-28]
   4eaf8:	add	x26, x26, #0x1
   4eafc:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eb00:	ldur	x2, [x29, #-16]
   4eb04:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4eb08:	mov	x0, x19
   4eb0c:	add	x1, x1, #0xe39
   4eb10:	blr	x2
   4eb14:	tbz	w20, #18, 4e910 <print_arm_disassembler_options@@Base+0x1154>
   4eb18:	ldur	x2, [x29, #-16]
   4eb1c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4eb20:	mov	x0, x19
   4eb24:	add	x1, x1, #0x817
   4eb28:	blr	x2
   4eb2c:	tbz	w20, #17, 4e914 <print_arm_disassembler_options@@Base+0x1158>
   4eb30:	ldur	x2, [x29, #-16]
   4eb34:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   4eb38:	mov	x0, x19
   4eb3c:	add	x1, x1, #0xfcf
   4eb40:	blr	x2
   4eb44:	tbz	w20, #16, 4e13c <print_arm_disassembler_options@@Base+0x980>
   4eb48:	ldur	x2, [x29, #-16]
   4eb4c:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4eb50:	mov	x0, x19
   4eb54:	add	x1, x1, #0xde7
   4eb58:	blr	x2
   4eb5c:	add	x26, x26, #0x1
   4eb60:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eb64:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4eb68:	mov	x0, x19
   4eb6c:	add	x1, x1, #0x3a
   4eb70:	blr	x4
   4eb74:	ldr	x8, [x21, #120]
   4eb78:	ldr	x0, [sp, #80]
   4eb7c:	mov	x1, x21
   4eb80:	blr	x8
   4eb84:	add	x26, x26, #0x1
   4eb88:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eb8c:	adrp	x1, 59000 <fields@@Base+0x1b4>
   4eb90:	mov	x0, x19
   4eb94:	add	x1, x1, #0xb6e
   4eb98:	ldur	x2, [x29, #-56]
   4eb9c:	blr	x4
   4eba0:	add	x26, x26, #0x1
   4eba4:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4eba8:	ldr	w3, [sp, #48]
   4ebac:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ebb0:	mov	x0, x19
   4ebb4:	add	x1, x1, #0x58
   4ebb8:	ldur	x2, [x29, #-112]
   4ebbc:	blr	x4
   4ebc0:	ldr	x8, [sp, #104]
   4ebc4:	add	x26, x26, #0x1
   4ebc8:	stur	x8, [x29, #-24]
   4ebcc:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ebd0:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4ebd4:	ldr	w8, [x8, #1560]
   4ebd8:	ldur	x25, [x29, #-56]
   4ebdc:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4ebe0:	mov	w9, #0x90                  	// #144
   4ebe4:	add	x10, x10, #0xaf8
   4ebe8:	madd	x8, x8, x9, x10
   4ebec:	add	x8, x8, x25, lsl #3
   4ebf0:	ldr	x3, [x8, #16]
   4ebf4:	and	x8, x20, #0x200000
   4ebf8:	str	x8, [sp]
   4ebfc:	ldur	x2, [x29, #-96]
   4ec00:	ldur	x4, [x29, #-16]
   4ec04:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ec08:	mov	x0, x19
   4ec0c:	add	x1, x1, #0x4f
   4ec10:	blr	x4
   4ec14:	ldr	x8, [sp, #56]
   4ec18:	ldur	w9, [x29, #-28]
   4ec1c:	ldr	x10, [sp]
   4ec20:	ldur	x3, [x29, #-16]
   4ec24:	cmp	x25, x8
   4ec28:	csinc	w8, w9, wzr, ne  // ne = any
   4ec2c:	cmp	w24, #0x0
   4ec30:	ccmp	x10, #0x0, #0x4, eq  // eq = none
   4ec34:	mov	w25, #0x2                   	// #2
   4ec38:	csel	w9, w9, w8, eq  // eq = none
   4ec3c:	stur	w9, [x29, #-28]
   4ec40:	ldr	x2, [sp, #136]
   4ec44:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ec48:	mov	x0, x19
   4ec4c:	add	x1, x1, #0x65
   4ec50:	blr	x3
   4ec54:	add	x26, x26, #0x1
   4ec58:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ec5c:	ldur	x2, [x29, #-16]
   4ec60:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ec64:	mov	x0, x19
   4ec68:	add	x1, x1, #0xeb
   4ec6c:	blr	x2
   4ec70:	ldr	x8, [sp, #128]
   4ec74:	add	x26, x26, #0x1
   4ec78:	stur	x8, [x29, #-24]
   4ec7c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ec80:	ldur	x4, [x29, #-16]
   4ec84:	tbnz	w20, #7, 4ed50 <print_arm_disassembler_options@@Base+0x1594>
   4ec88:	ldr	x9, [sp, #16]
   4ec8c:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4ec90:	ldr	w8, [x8, #1560]
   4ec94:	adrp	x10, 94000 <aarch64_operands@@Base+0xfc38>
   4ec98:	add	x10, x10, #0x6b8
   4ec9c:	ldr	x2, [x10, x9, lsl #3]
   4eca0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4eca4:	mov	w9, #0x90                  	// #144
   4eca8:	add	x10, x10, #0xaf8
   4ecac:	madd	x8, x8, x9, x10
   4ecb0:	ldr	x9, [sp, #32]
   4ecb4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ecb8:	mov	x0, x19
   4ecbc:	add	x1, x1, #0x702
   4ecc0:	add	x8, x8, x9, lsl #3
   4ecc4:	ldr	x3, [x8, #16]
   4ecc8:	blr	x4
   4eccc:	add	x26, x26, #0x1
   4ecd0:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ecd4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ecd8:	mov	x0, x19
   4ecdc:	add	x1, x1, #0x6d6
   4ece0:	blr	x3
   4ece4:	add	x26, x26, #0x1
   4ece8:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ecec:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ecf0:	mov	x0, x19
   4ecf4:	add	x1, x1, #0x6e5
   4ecf8:	blr	x3
   4ecfc:	add	x26, x26, #0x1
   4ed00:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ed04:	ldr	x8, [sp, #56]
   4ed08:	cmp	x25, x8
   4ed0c:	ldur	w8, [x29, #-28]
   4ed10:	mov	w25, #0x2                   	// #2
   4ed14:	csinc	w8, w8, wzr, ne  // ne = any
   4ed18:	stur	w8, [x29, #-28]
   4ed1c:	ldr	w8, [sp, #28]
   4ed20:	add	x26, x26, #0x1
   4ed24:	cmp	w8, #0x0
   4ed28:	ldur	w8, [x29, #-28]
   4ed2c:	csinc	w8, w8, wzr, eq  // eq = none
   4ed30:	stur	w8, [x29, #-28]
   4ed34:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ed38:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ed3c:	mov	x0, x19
   4ed40:	add	x1, x1, #0x6d6
   4ed44:	blr	x4
   4ed48:	add	x26, x26, #0x1
   4ed4c:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ed50:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ed54:	mov	x0, x19
   4ed58:	add	x1, x1, #0x6e5
   4ed5c:	blr	x4
   4ed60:	add	x26, x26, #0x1
   4ed64:	b	4e140 <print_arm_disassembler_options@@Base+0x984>
   4ed68:	ldur	x9, [x29, #-24]
   4ed6c:	add	x8, x9, #0x10
   4ed70:	cmp	x8, #0x31
   4ed74:	b.cc	4ed90 <print_arm_disassembler_options@@Base+0x15d4>  // b.lo, b.ul, b.last
   4ed78:	ldur	x3, [x29, #-16]
   4ed7c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4ed80:	and	x2, x9, #0xffffffff
   4ed84:	add	x1, x1, #0xbb
   4ed88:	mov	x0, x19
   4ed8c:	blr	x3
   4ed90:	ldur	w8, [x29, #-28]
   4ed94:	cbz	w8, 4dc38 <print_arm_disassembler_options@@Base+0x47c>
   4ed98:	mov	x0, x19
   4ed9c:	ldur	x2, [x29, #-16]
   4eda0:	ldp	x20, x19, [sp, #448]
   4eda4:	ldp	x22, x21, [sp, #432]
   4eda8:	ldp	x24, x23, [sp, #416]
   4edac:	ldp	x26, x25, [sp, #400]
   4edb0:	ldp	x28, x27, [sp, #384]
   4edb4:	ldp	x29, x30, [sp, #368]
   4edb8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4edbc:	add	x1, x1, #0x6b3
   4edc0:	add	sp, sp, #0x1d0
   4edc4:	br	x2
   4edc8:	bl	35700 <abort@plt>
   4edcc:	sub	sp, sp, #0xd0
   4edd0:	stp	x29, x30, [sp, #112]
   4edd4:	stp	x28, x27, [sp, #128]
   4edd8:	stp	x26, x25, [sp, #144]
   4eddc:	stp	x24, x23, [sp, #160]
   4ede0:	stp	x22, x21, [sp, #176]
   4ede4:	stp	x20, x19, [sp, #192]
   4ede8:	mov	x20, x2
   4edec:	ldp	x2, x19, [x1]
   4edf0:	mov	w8, #0xff87                	// #65415
   4edf4:	and	x8, x20, x8
   4edf8:	mov	w9, #0x4784                	// #18308
   4edfc:	add	x29, sp, #0x70
   4ee00:	cmp	x8, x9
   4ee04:	stur	x1, [x29, #-24]
   4ee08:	stur	x2, [x29, #-8]
   4ee0c:	b.ne	4ee1c <print_arm_disassembler_options@@Base+0x1660>  // b.any
   4ee10:	adrp	x22, 6b000 <fields@@Base+0x121b4>
   4ee14:	add	x22, x22, #0x87e
   4ee18:	b	4ee40 <print_arm_disassembler_options@@Base+0x1684>
   4ee1c:	adrp	x8, 94000 <aarch64_operands@@Base+0xfc38>
   4ee20:	add	x8, x8, #0x718
   4ee24:	ldr	x22, [x8, #8]
   4ee28:	cbz	x22, 4eee0 <print_arm_disassembler_options@@Base+0x1724>
   4ee2c:	ldrh	w9, [x8, #2]
   4ee30:	ldrh	w10, [x8], #40
   4ee34:	and	x9, x9, x20
   4ee38:	cmp	x9, x10
   4ee3c:	b.ne	4ee24 <print_arm_disassembler_options@@Base+0x1668>  // b.any
   4ee40:	ubfx	x16, x20, #3, #4
   4ee44:	mov	w9, #0x1f                  	// #31
   4ee48:	stur	x16, [x29, #-40]
   4ee4c:	and	w16, w20, #0xff
   4ee50:	ubfx	x8, x20, #6, #5
   4ee54:	mov	w10, #0x20                  	// #32
   4ee58:	stur	w16, [x29, #-44]
   4ee5c:	and	w16, w20, #0x7
   4ee60:	tst	x9, x20, lsr #6
   4ee64:	lsr	x11, x20, #2
   4ee68:	ubfx	x14, x20, #8, #1
   4ee6c:	stur	w16, [x29, #-48]
   4ee70:	ubfx	x16, x20, #4, #4
   4ee74:	csel	x8, x10, x8, eq  // eq = none
   4ee78:	stur	xzr, [x29, #-16]
   4ee7c:	add	x15, x0, #0x4
   4ee80:	lsr	x12, x20, #3
   4ee84:	stur	x14, [x29, #-32]
   4ee88:	stp	x8, x16, [sp, #48]
   4ee8c:	and	x8, x11, #0x3e
   4ee90:	and	x9, x12, #0x40
   4ee94:	add	x8, x15, x8
   4ee98:	ubfx	x13, x20, #8, #3
   4ee9c:	mov	w23, #0x1                   	// #1
   4eea0:	lsr	x14, x20, #4
   4eea4:	add	x8, x8, x9
   4eea8:	str	x8, [sp, #40]
   4eeac:	lsl	w8, w23, w13
   4eeb0:	and	x9, x14, #0x8
   4eeb4:	adrp	x24, 69000 <fields@@Base+0x101b4>
   4eeb8:	and	x8, x8, x20
   4eebc:	bfxil	x9, x20, #0, #3
   4eec0:	adrp	x26, 60000 <fields@@Base+0x71b4>
   4eec4:	mov	w25, #0xa                   	// #10
   4eec8:	add	x24, x24, #0xd22
   4eecc:	stp	x8, x9, [sp, #24]
   4eed0:	add	x26, x26, #0x66b
   4eed4:	and	x8, x15, #0xfffffffffffffffc
   4eed8:	stp	x8, x15, [sp, #8]
   4eedc:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4eee0:	mov	x0, x19
   4eee4:	mov	x3, x2
   4eee8:	mov	w2, w20
   4eeec:	ldp	x20, x19, [sp, #192]
   4eef0:	ldp	x22, x21, [sp, #176]
   4eef4:	ldp	x24, x23, [sp, #160]
   4eef8:	ldp	x26, x25, [sp, #144]
   4eefc:	ldp	x28, x27, [sp, #128]
   4ef00:	ldp	x29, x30, [sp, #112]
   4ef04:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ef08:	add	x1, x1, #0x85c
   4ef0c:	add	sp, sp, #0xd0
   4ef10:	br	x3
   4ef14:	ldur	x3, [x29, #-8]
   4ef18:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4ef1c:	mov	x0, x19
   4ef20:	add	x1, x1, #0x858
   4ef24:	mov	x2, x22
   4ef28:	blr	x3
   4ef2c:	stur	x22, [x29, #-16]
   4ef30:	add	x22, x27, #0x1
   4ef34:	ldrb	w2, [x22]
   4ef38:	cmp	w2, #0x25
   4ef3c:	b.eq	4ef64 <print_arm_disassembler_options@@Base+0x17a8>  // b.none
   4ef40:	cbz	w2, 4f4a4 <print_arm_disassembler_options@@Base+0x1ce8>
   4ef44:	ldur	x3, [x29, #-8]
   4ef48:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4ef4c:	mov	x0, x19
   4ef50:	add	x1, x1, #0xde6
   4ef54:	blr	x3
   4ef58:	mov	x27, x22
   4ef5c:	add	x22, x22, #0x1
   4ef60:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4ef64:	mov	x27, x22
   4ef68:	ldrb	w8, [x27, #1]!
   4ef6c:	sub	w9, w8, #0x25
   4ef70:	cmp	w9, #0x53
   4ef74:	b.hi	4f504 <print_arm_disassembler_options@@Base+0x1d48>  // b.pmore
   4ef78:	adrp	x12, 62000 <fields@@Base+0x91b4>
   4ef7c:	add	x12, x12, #0x23c
   4ef80:	adr	x10, 4ef9c <print_arm_disassembler_options@@Base+0x17e0>
   4ef84:	ldrh	w11, [x12, x9, lsl #1]
   4ef88:	add	x10, x10, x11, lsl #2
   4ef8c:	mov	w0, wzr
   4ef90:	mov	w28, wzr
   4ef94:	mov	w21, wzr
   4ef98:	br	x10
   4ef9c:	ldrb	w9, [x22, #2]!
   4efa0:	sub	w8, w8, #0x30
   4efa4:	sub	w10, w9, #0x30
   4efa8:	cmp	w10, #0x9
   4efac:	b.hi	4f094 <print_arm_disassembler_options@@Base+0x18d8>  // b.pmore
   4efb0:	ldrb	w10, [x22, #1]!
   4efb4:	mul	w8, w8, w25
   4efb8:	add	w8, w8, w9, uxtb
   4efbc:	sub	w8, w8, #0x30
   4efc0:	sub	w9, w10, #0x30
   4efc4:	cmp	w9, #0xa
   4efc8:	mov	w9, w10
   4efcc:	b.cc	4efb0 <print_arm_disassembler_options@@Base+0x17f4>  // b.lo, b.ul, b.last
   4efd0:	cmp	w10, #0x27
   4efd4:	b.eq	4f0a0 <print_arm_disassembler_options@@Base+0x18e4>  // b.none
   4efd8:	cmp	w10, #0x3f
   4efdc:	b.eq	4f0b8 <print_arm_disassembler_options@@Base+0x18fc>  // b.none
   4efe0:	cmp	w10, #0x2d
   4efe4:	b.ne	4f504 <print_arm_disassembler_options@@Base+0x1d48>  // b.any
   4efe8:	ldrb	w10, [x22, #1]!
   4efec:	sub	w9, w10, #0x30
   4eff0:	cmp	w9, #0x9
   4eff4:	b.hi	4f504 <print_arm_disassembler_options@@Base+0x1d48>  // b.pmore
   4eff8:	mov	w9, wzr
   4effc:	mov	x27, x22
   4f000:	mul	w9, w9, w25
   4f004:	add	w9, w9, w10, uxtb
   4f008:	ldrb	w10, [x27, #1]!
   4f00c:	sub	w9, w9, #0x30
   4f010:	sub	w11, w10, #0x30
   4f014:	cmp	w11, #0xa
   4f018:	b.cc	4f000 <print_arm_disassembler_options@@Base+0x1844>  // b.lo, b.ul, b.last
   4f01c:	cbz	w9, 4f504 <print_arm_disassembler_options@@Base+0x1d48>
   4f020:	sub	w10, w10, #0x42
   4f024:	cmp	w10, #0x36
   4f028:	b.hi	4f504 <print_arm_disassembler_options@@Base+0x1d48>  // b.pmore
   4f02c:	asr	x11, x20, x8
   4f030:	sub	w8, w9, w8
   4f034:	mov	w12, #0x2                   	// #2
   4f038:	lsl	w8, w12, w8
   4f03c:	adrp	x14, 62000 <fields@@Base+0x91b4>
   4f040:	sub	w8, w8, #0x1
   4f044:	add	x14, x14, #0x2e4
   4f048:	sxtw	x8, w8
   4f04c:	adr	x12, 4ef14 <print_arm_disassembler_options@@Base+0x1758>
   4f050:	ldrh	w13, [x14, x10, lsl #1]
   4f054:	add	x12, x12, x13, lsl #2
   4f058:	and	x22, x11, x8
   4f05c:	br	x12
   4f060:	lsl	w8, w23, w9
   4f064:	sxtw	x8, w8
   4f068:	ldur	x21, [x29, #-24]
   4f06c:	eor	x10, x22, x8
   4f070:	sub	x8, x10, x8
   4f074:	ldr	x10, [sp, #16]
   4f078:	ldr	x9, [x21, #120]
   4f07c:	mov	x1, x21
   4f080:	add	x22, x10, x8, lsl #1
   4f084:	mov	x0, x22
   4f088:	blr	x9
   4f08c:	stur	xzr, [x29, #-16]
   4f090:	b	4f160 <print_arm_disassembler_options@@Base+0x19a4>
   4f094:	mov	w10, w9
   4f098:	cmp	w10, #0x27
   4f09c:	b.ne	4efd8 <print_arm_disassembler_options@@Base+0x181c>  // b.any
   4f0a0:	lsl	w8, w23, w8
   4f0a4:	sxtw	x8, w8
   4f0a8:	tst	x8, x20
   4f0ac:	add	x27, x22, #0x1
   4f0b0:	b.ne	4f0d4 <print_arm_disassembler_options@@Base+0x1918>  // b.any
   4f0b4:	b	4ef30 <print_arm_disassembler_options@@Base+0x1774>
   4f0b8:	lsl	w8, w23, w8
   4f0bc:	sxtw	x8, w8
   4f0c0:	tst	x8, x20
   4f0c4:	add	x27, x22, #0x2
   4f0c8:	b.eq	4f0d4 <print_arm_disassembler_options@@Base+0x1918>  // b.none
   4f0cc:	ldrb	w2, [x22, #1]
   4f0d0:	b	4f0d8 <print_arm_disassembler_options@@Base+0x191c>
   4f0d4:	ldrb	w2, [x27]
   4f0d8:	ldur	x3, [x29, #-8]
   4f0dc:	adrp	x1, 69000 <fields@@Base+0x101b4>
   4f0e0:	mov	x0, x19
   4f0e4:	add	x1, x1, #0xde6
   4f0e8:	blr	x3
   4f0ec:	add	x22, x27, #0x1
   4f0f0:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f0f4:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f0f8:	ldr	w8, [x8, #1056]
   4f0fc:	cbnz	w8, 4f184 <print_arm_disassembler_options@@Base+0x19c8>
   4f100:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f104:	mov	x0, x19
   4f108:	add	x1, x1, #0x817
   4f10c:	b	4f3b4 <print_arm_disassembler_options@@Base+0x1bf8>
   4f110:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f114:	ldr	w8, [x8, #1560]
   4f118:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f11c:	mov	w9, #0x90                  	// #144
   4f120:	add	x10, x10, #0xaf8
   4f124:	madd	x8, x8, x9, x10
   4f128:	ldur	x9, [x29, #-40]
   4f12c:	b	4f1c4 <print_arm_disassembler_options@@Base+0x1a08>
   4f130:	ldr	x8, [sp, #24]
   4f134:	cbnz	x8, 4ef30 <print_arm_disassembler_options@@Base+0x1774>
   4f138:	adrp	x1, 6a000 <fields@@Base+0x111b4>
   4f13c:	mov	x0, x19
   4f140:	add	x1, x1, #0x34f
   4f144:	b	4f3b4 <print_arm_disassembler_options@@Base+0x1bf8>
   4f148:	ldur	x21, [x29, #-24]
   4f14c:	ldr	x22, [sp, #40]
   4f150:	ldr	x8, [x21, #120]
   4f154:	mov	x0, x22
   4f158:	mov	x1, x21
   4f15c:	blr	x8
   4f160:	mov	w8, #0x2                   	// #2
   4f164:	strb	w23, [x21, #196]
   4f168:	str	w8, [x21, #200]
   4f16c:	str	x22, [x21, #208]
   4f170:	add	x22, x27, #0x1
   4f174:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f178:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f17c:	ldr	w8, [x8, #1056]
   4f180:	cbz	w8, 4ef30 <print_arm_disassembler_options@@Base+0x1774>
   4f184:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   4f188:	ubfx	x8, x8, #4, #4
   4f18c:	add	x9, x9, #0xf38
   4f190:	ldr	x2, [x9, x8, lsl #3]
   4f194:	b	4f1cc <print_arm_disassembler_options@@Base+0x1a10>
   4f198:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4f19c:	mov	x0, x19
   4f1a0:	add	x1, x1, #0x28
   4f1a4:	b	4f3b4 <print_arm_disassembler_options@@Base+0x1bf8>
   4f1a8:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f1ac:	ldr	w8, [x8, #1560]
   4f1b0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f1b4:	mov	w9, #0x90                  	// #144
   4f1b8:	add	x10, x10, #0xaf8
   4f1bc:	madd	x8, x8, x9, x10
   4f1c0:	ldr	x9, [sp, #32]
   4f1c4:	add	x8, x8, x9, lsl #3
   4f1c8:	ldr	x2, [x8, #16]
   4f1cc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f1d0:	mov	x0, x19
   4f1d4:	add	x1, x1, #0x816
   4f1d8:	ldur	x3, [x29, #-8]
   4f1dc:	blr	x3
   4f1e0:	add	x22, x27, #0x1
   4f1e4:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f1e8:	ldur	w8, [x29, #-44]
   4f1ec:	adrp	x9, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f1f0:	ldur	x3, [x29, #-8]
   4f1f4:	str	w8, [x9, #1060]
   4f1f8:	ldur	w8, [x29, #-48]
   4f1fc:	cbz	w8, 4f230 <print_arm_disassembler_options@@Base+0x1a74>
   4f200:	mov	w21, w20
   4f204:	lsl	w22, w21, #1
   4f208:	ldur	x2, [x29, #-8]
   4f20c:	eor	w8, w22, w20
   4f210:	tst	x8, #0x10
   4f214:	csel	x1, x26, x24, eq  // eq = none
   4f218:	mov	x0, x19
   4f21c:	blr	x2
   4f220:	ldur	x3, [x29, #-8]
   4f224:	tst	w21, #0x3
   4f228:	mov	w21, w22
   4f22c:	b.ne	4f204 <print_arm_disassembler_options@@Base+0x1a48>  // b.any
   4f230:	ldr	x8, [sp, #56]
   4f234:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   4f238:	add	x9, x9, #0xf38
   4f23c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f240:	ldr	x2, [x9, x8, lsl #3]
   4f244:	mov	x0, x19
   4f248:	add	x1, x1, #0x815
   4f24c:	blr	x3
   4f250:	add	x22, x27, #0x1
   4f254:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f258:	ldur	x9, [x29, #-32]
   4f25c:	mov	w0, w9
   4f260:	cmp	w8, #0x4f
   4f264:	cset	w8, eq  // eq = none
   4f268:	and	w28, w8, w20, lsr #8
   4f26c:	mov	w21, w0
   4f270:	ldur	x2, [x29, #-8]
   4f274:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4f278:	mov	x0, x19
   4f27c:	add	x1, x1, #0x56
   4f280:	blr	x2
   4f284:	mov	x22, xzr
   4f288:	mov	w8, wzr
   4f28c:	b	4f2d0 <print_arm_disassembler_options@@Base+0x1b14>
   4f290:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f294:	ldr	w8, [x8, #1560]
   4f298:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f29c:	mov	w9, #0x90                  	// #144
   4f2a0:	add	x10, x10, #0xaf8
   4f2a4:	madd	x8, x8, x9, x10
   4f2a8:	add	x8, x8, x22, lsl #3
   4f2ac:	ldr	x2, [x8, #16]
   4f2b0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f2b4:	mov	x0, x19
   4f2b8:	add	x1, x1, #0x816
   4f2bc:	blr	x3
   4f2c0:	mov	w8, #0x1                   	// #1
   4f2c4:	add	x22, x22, #0x1
   4f2c8:	cmp	x22, #0x8
   4f2cc:	b.eq	4f304 <print_arm_disassembler_options@@Base+0x1b48>  // b.none
   4f2d0:	lsl	w9, w23, w22
   4f2d4:	sxtw	x9, w9
   4f2d8:	tst	x9, x20
   4f2dc:	b.eq	4f2c4 <print_arm_disassembler_options@@Base+0x1b08>  // b.none
   4f2e0:	ldur	x3, [x29, #-8]
   4f2e4:	cbz	w8, 4f290 <print_arm_disassembler_options@@Base+0x1ad4>
   4f2e8:	ldur	x2, [x29, #-8]
   4f2ec:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f2f0:	mov	x0, x19
   4f2f4:	add	x1, x1, #0xf48
   4f2f8:	blr	x2
   4f2fc:	ldur	x3, [x29, #-8]
   4f300:	b	4f290 <print_arm_disassembler_options@@Base+0x1ad4>
   4f304:	cbz	w21, 4f358 <print_arm_disassembler_options@@Base+0x1b9c>
   4f308:	ldur	x3, [x29, #-8]
   4f30c:	cbz	w8, 4f328 <print_arm_disassembler_options@@Base+0x1b6c>
   4f310:	ldur	x2, [x29, #-8]
   4f314:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f318:	mov	x0, x19
   4f31c:	add	x1, x1, #0xf48
   4f320:	blr	x2
   4f324:	ldur	x3, [x29, #-8]
   4f328:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f32c:	ldr	w8, [x8, #1560]
   4f330:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f334:	mov	w9, #0x90                  	// #144
   4f338:	add	x10, x10, #0xaf8
   4f33c:	madd	x8, x8, x9, x10
   4f340:	ldr	x2, [x8, #128]
   4f344:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f348:	mov	x0, x19
   4f34c:	add	x1, x1, #0x816
   4f350:	blr	x3
   4f354:	mov	w8, #0x1                   	// #1
   4f358:	cbz	w28, 4f3a8 <print_arm_disassembler_options@@Base+0x1bec>
   4f35c:	ldur	x3, [x29, #-8]
   4f360:	cbz	w8, 4f37c <print_arm_disassembler_options@@Base+0x1bc0>
   4f364:	ldur	x2, [x29, #-8]
   4f368:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f36c:	mov	x0, x19
   4f370:	add	x1, x1, #0xf48
   4f374:	blr	x2
   4f378:	ldur	x3, [x29, #-8]
   4f37c:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f380:	ldr	w8, [x8, #1560]
   4f384:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f388:	mov	w9, #0x90                  	// #144
   4f38c:	add	x10, x10, #0xaf8
   4f390:	madd	x8, x8, x9, x10
   4f394:	ldr	x2, [x8, #136]
   4f398:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f39c:	mov	x0, x19
   4f3a0:	add	x1, x1, #0x816
   4f3a4:	blr	x3
   4f3a8:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4f3ac:	mov	x0, x19
   4f3b0:	add	x1, x1, #0x119
   4f3b4:	ldur	x2, [x29, #-8]
   4f3b8:	blr	x2
   4f3bc:	add	x22, x27, #0x1
   4f3c0:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f3c4:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f3c8:	ldr	w8, [x8, #1056]
   4f3cc:	cbz	w8, 4ef30 <print_arm_disassembler_options@@Base+0x1774>
   4f3d0:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   4f3d4:	ubfx	x8, x8, #4, #4
   4f3d8:	add	x9, x9, #0xf38
   4f3dc:	ldr	x2, [x9, x8, lsl #3]
   4f3e0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f3e4:	mov	x0, x19
   4f3e8:	add	x1, x1, #0x83e
   4f3ec:	b	4f1d8 <print_arm_disassembler_options@@Base+0x1a1c>
   4f3f0:	ldr	x2, [sp, #48]
   4f3f4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f3f8:	mov	x0, x19
   4f3fc:	add	x1, x1, #0x857
   4f400:	b	4f1d8 <print_arm_disassembler_options@@Base+0x1a1c>
   4f404:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f408:	ldr	w8, [x8, #1060]
   4f40c:	cbz	w8, 4ef30 <print_arm_disassembler_options@@Base+0x1774>
   4f410:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f414:	mov	x0, x19
   4f418:	add	x1, x1, #0x819
   4f41c:	b	4f3b4 <print_arm_disassembler_options@@Base+0x1bf8>
   4f420:	lsl	x2, x22, #1
   4f424:	b	4f42c <print_arm_disassembler_options@@Base+0x1c70>
   4f428:	lsl	x2, x22, #2
   4f42c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   4f430:	mov	x0, x19
   4f434:	add	x1, x1, #0x858
   4f438:	stur	x2, [x29, #-16]
   4f43c:	b	4f1d8 <print_arm_disassembler_options@@Base+0x1a1c>
   4f440:	ldur	x1, [x29, #-24]
   4f444:	ldr	x9, [sp, #8]
   4f448:	ldr	x8, [x1, #120]
   4f44c:	add	x0, x9, x22, lsl #2
   4f450:	blr	x8
   4f454:	stur	xzr, [x29, #-16]
   4f458:	add	x22, x27, #0x1
   4f45c:	b	4ef34 <print_arm_disassembler_options@@Base+0x1778>
   4f460:	adrp	x8, 8a000 <aarch64_operands@@Base+0x5c38>
   4f464:	add	x8, x8, #0xf38
   4f468:	ldr	x2, [x8, x22, lsl #3]
   4f46c:	b	4f1cc <print_arm_disassembler_options@@Base+0x1a10>
   4f470:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   4f474:	ldr	w8, [x8, #1560]
   4f478:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   4f47c:	mov	w9, #0x90                  	// #144
   4f480:	add	x10, x10, #0xaf8
   4f484:	madd	x8, x8, x9, x10
   4f488:	add	x8, x8, x22, lsl #3
   4f48c:	b	4f1c8 <print_arm_disassembler_options@@Base+0x1a0c>
   4f490:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4f494:	mov	x0, x19
   4f498:	add	x1, x1, #0x12
   4f49c:	mov	x2, x22
   4f4a0:	b	4f1d8 <print_arm_disassembler_options@@Base+0x1a1c>
   4f4a4:	ldur	x2, [x29, #-16]
   4f4a8:	add	x8, x2, #0x10
   4f4ac:	cmp	x8, #0x31
   4f4b0:	b.cc	4f4e4 <print_arm_disassembler_options@@Base+0x1d28>  // b.lo, b.ul, b.last
   4f4b4:	mov	x0, x19
   4f4b8:	ldur	x3, [x29, #-8]
   4f4bc:	ldp	x20, x19, [sp, #192]
   4f4c0:	ldp	x22, x21, [sp, #176]
   4f4c4:	ldp	x24, x23, [sp, #160]
   4f4c8:	ldp	x26, x25, [sp, #144]
   4f4cc:	ldp	x28, x27, [sp, #128]
   4f4d0:	ldp	x29, x30, [sp, #112]
   4f4d4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   4f4d8:	add	x1, x1, #0xbb
   4f4dc:	add	sp, sp, #0xd0
   4f4e0:	br	x3
   4f4e4:	ldp	x20, x19, [sp, #192]
   4f4e8:	ldp	x22, x21, [sp, #176]
   4f4ec:	ldp	x24, x23, [sp, #160]
   4f4f0:	ldp	x26, x25, [sp, #144]
   4f4f4:	ldp	x28, x27, [sp, #128]
   4f4f8:	ldp	x29, x30, [sp, #112]
   4f4fc:	add	sp, sp, #0xd0
   4f500:	ret
   4f504:	bl	35700 <abort@plt>
   4f508:	stp	x29, x30, [sp, #-96]!
   4f50c:	stp	x28, x27, [sp, #16]
   4f510:	stp	x26, x25, [sp, #32]
   4f514:	stp	x24, x23, [sp, #48]
   4f518:	stp	x22, x21, [sp, #64]
   4f51c:	stp	x20, x19, [sp, #80]
   4f520:	mov	x29, sp
   4f524:	sub	sp, sp, #0x1f0
   4f528:	ldr	x8, [x1, #96]
   4f52c:	mov	x20, x1
   4f530:	ldp	x1, x24, [x1]
   4f534:	mov	x19, x2
   4f538:	ldr	x9, [x8, #8]
   4f53c:	mov	x25, x0
   4f540:	tbz	w9, #15, 4f560 <print_arm_disassembler_options@@Base+0x1da4>
   4f544:	mov	x10, #0xffffffffffcfffff    	// #-3145729
   4f548:	cmp	x9, x10
   4f54c:	mov	w21, #0x1                   	// #1
   4f550:	b.ne	4f564 <print_arm_disassembler_options@@Base+0x1da8>  // b.any
   4f554:	ldr	x8, [x8]
   4f558:	cmn	x8, #0x1
   4f55c:	b.ne	4f564 <print_arm_disassembler_options@@Base+0x1da8>  // b.any
   4f560:	mov	w21, wzr
   4f564:	adrp	x0, 8a000 <aarch64_operands@@Base+0x5c38>
   4f568:	stur	x1, [x29, #-32]
   4f56c:	add	x0, x0, #0xfc0
   4f570:	mov	w4, #0x1                   	// #1
   4f574:	mov	x1, x25
   4f578:	mov	x2, x20
   4f57c:	mov	x3, x19
   4f580:	bl	53de0 <print_arm_disassembler_options@@Base+0x6624>
   4f584:	cbz	w0, 4f5a8 <print_arm_disassembler_options@@Base+0x1dec>
   4f588:	add	sp, sp, #0x1f0
   4f58c:	ldp	x20, x19, [sp, #80]
   4f590:	ldp	x22, x21, [sp, #64]
   4f594:	ldp	x24, x23, [sp, #48]
   4f598:	ldp	x26, x25, [sp, #32]
   4f59c:	ldp	x28, x27, [sp, #16]
   4f5a0:	ldp	x29, x30, [sp], #96
   4f5a4:	ret
   4f5a8:	cbz	w21, 4fdc8 <print_arm_disassembler_options@@Base+0x260c>
   4f5ac:	and	x8, x19, #0xf
   4f5b0:	and	x18, x8, x19, lsr #16
   4f5b4:	ubfx	x22, x19, #16, #4
   4f5b8:	cmp	x18, #0xf
   4f5bc:	mov	w15, #0xd00                 	// #3328
   4f5c0:	cset	w7, eq  // eq = none
   4f5c4:	cmp	x22, x8
   4f5c8:	mvn	w9, w19
   4f5cc:	lsr	x10, x19, #19
   4f5d0:	ubfx	x14, x19, #19, #2
   4f5d4:	and	x3, x19, x15
   4f5d8:	cset	w15, eq  // eq = none
   4f5dc:	cmp	x8, #0xd
   4f5e0:	stur	x14, [x29, #-224]
   4f5e4:	sub	x0, x14, #0x1
   4f5e8:	and	x14, x10, #0x8
   4f5ec:	cset	w10, ne  // ne = any
   4f5f0:	cset	w4, eq  // eq = none
   4f5f4:	tst	x9, #0xe00
   4f5f8:	cset	w5, eq  // eq = none
   4f5fc:	tst	x19, #0x380000
   4f600:	and	x21, x19, #0xe
   4f604:	stur	w10, [x29, #-168]
   4f608:	cset	w10, eq  // eq = none
   4f60c:	cmp	x0, #0x2
   4f610:	lsr	x17, x19, #4
   4f614:	stur	w10, [x29, #-88]
   4f618:	cset	w10, cc  // cc = lo, ul, last
   4f61c:	cmp	x21, #0xe
   4f620:	and	x26, x19, #0x700000
   4f624:	stur	x17, [x29, #-128]
   4f628:	str	w10, [sp, #216]
   4f62c:	cset	w10, eq  // eq = none
   4f630:	tst	x9, #0x600000
   4f634:	and	x6, x19, #0xc0000
   4f638:	str	x21, [sp, #160]
   4f63c:	stur	w10, [x29, #-176]
   4f640:	cset	w10, eq  // eq = none
   4f644:	cmp	x26, #0x700, lsl #12
   4f648:	and	x12, x19, #0xf00
   4f64c:	mov	w13, #0x900                 	// #2304
   4f650:	str	w10, [sp, #208]
   4f654:	cset	w10, eq  // eq = none
   4f658:	cmp	x6, #0xc0, lsl #12
   4f65c:	and	x27, x19, x13
   4f660:	cset	w0, eq  // eq = none
   4f664:	cmp	x12, #0xe00
   4f668:	stur	w10, [x29, #-120]
   4f66c:	cset	w13, ne  // ne = any
   4f670:	cset	w10, eq  // eq = none
   4f674:	cmp	x27, #0x100
   4f678:	lsr	x1, x19, #8
   4f67c:	cset	w12, eq  // eq = none
   4f680:	cmp	x3, #0x900
   4f684:	and	x2, x17, #0x8
   4f688:	cset	w17, eq  // eq = none
   4f68c:	tst	x9, #0xc00
   4f690:	mvn	w9, w1
   4f694:	orr	w10, w10, w12
   4f698:	mov	w11, #0x1200000             	// #18874368
   4f69c:	stur	x26, [x29, #-232]
   4f6a0:	and	w9, w9, #0x1
   4f6a4:	str	w10, [sp, #192]
   4f6a8:	cset	w10, eq  // eq = none
   4f6ac:	and	x23, x19, #0x180
   4f6b0:	mov	w16, #0x1001                	// #4097
   4f6b4:	tst	x19, x11
   4f6b8:	orr	w9, w9, w10
   4f6bc:	and	x16, x19, x16
   4f6c0:	str	x6, [sp, #72]
   4f6c4:	str	x27, [sp, #8]
   4f6c8:	str	w17, [sp, #200]
   4f6cc:	stur	w9, [x29, #-184]
   4f6d0:	cset	w9, eq  // eq = none
   4f6d4:	cmp	x23, #0x180
   4f6d8:	bfxil	x14, x19, #13, #3
   4f6dc:	stur	w9, [x29, #-152]
   4f6e0:	cset	w9, eq  // eq = none
   4f6e4:	cmp	x16, #0x1
   4f6e8:	str	x23, [sp, #40]
   4f6ec:	stur	x9, [x29, #-72]
   4f6f0:	cset	w9, eq  // eq = none
   4f6f4:	cmp	x14, #0x0
   4f6f8:	bfxil	x2, x19, #17, #3
   4f6fc:	cset	w10, eq  // eq = none
   4f700:	tst	x19, #0x100000
   4f704:	cset	w12, eq  // eq = none
   4f708:	cmp	x14, x2
   4f70c:	cset	w18, ne  // ne = any
   4f710:	tst	x19, #0x10000000
   4f714:	and	x17, x19, #0x300000
   4f718:	cset	w3, eq  // eq = none
   4f71c:	cmp	x17, #0x200, lsl #12
   4f720:	stur	x16, [x29, #-216]
   4f724:	cset	w16, eq  // eq = none
   4f728:	cset	w6, ne  // ne = any
   4f72c:	cmp	x22, #0xd
   4f730:	stur	w9, [x29, #-192]
   4f734:	cset	w9, eq  // eq = none
   4f738:	cmp	x8, #0xf
   4f73c:	cset	w21, eq  // eq = none
   4f740:	cmp	x22, #0xf
   4f744:	stur	x22, [x29, #-96]
   4f748:	cset	w22, eq  // eq = none
   4f74c:	orr	w21, w21, w22
   4f750:	cset	w22, ne  // ne = any
   4f754:	and	w22, w15, w22
   4f758:	cmp	x14, #0x4
   4f75c:	orr	w22, w7, w22
   4f760:	cset	w7, hi  // hi = pmore
   4f764:	cmp	x14, #0x6
   4f768:	orr	w9, w4, w9
   4f76c:	cset	w23, hi  // hi = pmore
   4f770:	cmp	x17, #0x300, lsl #12
   4f774:	mov	w26, #0x11                  	// #17
   4f778:	mov	w30, #0x3                   	// #3
   4f77c:	orr	w21, w9, w21
   4f780:	csel	w27, w30, w26, eq  // eq = none
   4f784:	cset	w28, eq  // eq = none
   4f788:	cmp	w9, #0x0
   4f78c:	ubfx	x9, x19, #21, #1
   4f790:	stur	x17, [x29, #-160]
   4f794:	orr	w17, w9, w7
   4f798:	orr	w9, w9, w23
   4f79c:	stp	w9, w17, [sp, #64]
   4f7a0:	orr	w9, w15, w21
   4f7a4:	stur	w9, [x29, #-240]
   4f7a8:	mov	w9, #0x2                   	// #2
   4f7ac:	cinc	w9, w9, eq  // eq = none
   4f7b0:	cmp	w21, #0x0
   4f7b4:	mov	w15, #0x9                   	// #9
   4f7b8:	csel	w9, w9, w15, ne  // ne = any
   4f7bc:	str	w9, [sp, #248]
   4f7c0:	lsr	x9, x19, #2
   4f7c4:	and	x15, x9, #0x8
   4f7c8:	and	x9, x19, #0xf0000
   4f7cc:	bfxil	x15, x19, #1, #3
   4f7d0:	cmp	x9, #0xf0, lsl #12
   4f7d4:	mov	w7, #0x8                   	// #8
   4f7d8:	csel	w17, w30, w7, eq  // eq = none
   4f7dc:	cset	w26, eq  // eq = none
   4f7e0:	cmp	x14, x15
   4f7e4:	cset	w15, ne  // ne = any
   4f7e8:	str	w17, [sp, #128]
   4f7ec:	stur	x14, [x29, #-64]
   4f7f0:	orr	w14, w3, w18
   4f7f4:	and	w18, w15, w18
   4f7f8:	str	w14, [sp, #28]
   4f7fc:	orr	w14, w12, w15
   4f800:	orr	w12, w12, w18
   4f804:	str	w12, [sp, #112]
   4f808:	orr	w12, w3, w18
   4f80c:	str	w12, [sp, #152]
   4f810:	orr	w12, w6, w18
   4f814:	str	w12, [sp, #104]
   4f818:	mov	w12, #0x7                   	// #7
   4f81c:	cset	w15, eq  // eq = none
   4f820:	and	w18, w19, #0x1
   4f824:	str	w14, [sp, #120]
   4f828:	csel	w14, w12, w30, eq  // eq = none
   4f82c:	tst	x19, #0x1
   4f830:	orr	w3, w18, w15
   4f834:	cinc	w12, w12, ne  // ne = any
   4f838:	cmp	w3, #0x0
   4f83c:	csel	w12, w12, w30, ne  // ne = any
   4f840:	str	w12, [sp, #96]
   4f844:	tst	x19, #0x200000
   4f848:	mov	w12, #0x4                   	// #4
   4f84c:	mov	w6, #0x6                   	// #6
   4f850:	csel	w12, w6, w12, ne  // ne = any
   4f854:	and	x11, x19, x11
   4f858:	str	w14, [sp, #232]
   4f85c:	str	w12, [sp, #56]
   4f860:	stur	x11, [x29, #-200]
   4f864:	lsr	x11, x19, #3
   4f868:	and	x30, x11, #0x8
   4f86c:	mov	w11, #0x1020                	// #4128
   4f870:	and	x11, x19, x11
   4f874:	str	x11, [sp, #144]
   4f878:	lsr	x11, x19, #1
   4f87c:	lsr	x12, x19, #17
   4f880:	stp	x1, x12, [x29, #-144]
   4f884:	eor	w11, w11, w12
   4f888:	and	x12, x1, #0xe
   4f88c:	orr	x7, x12, #0x1
   4f890:	and	x12, x11, #0x7
   4f894:	ubfx	x11, x19, #5, #1
   4f898:	str	x11, [sp, #16]
   4f89c:	and	w11, w13, w11
   4f8a0:	str	w11, [sp, #184]
   4f8a4:	orr	w11, w4, w22
   4f8a8:	stur	w11, [x29, #-208]
   4f8ac:	orr	w11, w26, w18
   4f8b0:	str	w11, [sp, #88]
   4f8b4:	and	w11, w16, w15
   4f8b8:	str	w11, [sp, #136]
   4f8bc:	orr	w11, w26, w15
   4f8c0:	str	w11, [sp, #224]
   4f8c4:	orr	w11, w26, w3
   4f8c8:	str	w11, [sp, #80]
   4f8cc:	mov	w11, #0x5                   	// #5
   4f8d0:	cinc	w11, w11, ne  // ne = any
   4f8d4:	str	w11, [sp, #52]
   4f8d8:	ldr	x11, [x20, #8]
   4f8dc:	and	x13, x19, #0x10000000
   4f8e0:	adrp	x23, 6b000 <fields@@Base+0x121b4>
   4f8e4:	adrp	x18, 98000 <aarch64_operands@@Base+0x13c38>
   4f8e8:	stur	x11, [x29, #-104]
   4f8ec:	ldr	x11, [x20]
   4f8f0:	adrp	x6, 62000 <fields@@Base+0x91b4>
   4f8f4:	adrp	x16, 62000 <fields@@Base+0x91b4>
   4f8f8:	adrp	x15, 62000 <fields@@Base+0x91b4>
   4f8fc:	stur	x11, [x29, #-112]
   4f900:	and	x11, x19, #0x380000
   4f904:	str	x11, [sp, #32]
   4f908:	and	x11, x19, #0x70000
   4f90c:	str	x11, [sp, #176]
   4f910:	ubfx	x11, x19, #13, #3
   4f914:	str	x11, [sp, #168]
   4f918:	adrp	x11, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   4f91c:	ldr	w11, [x11, #1056]
   4f920:	bfxil	x30, x19, #1, #3
   4f924:	str	x13, [sp, #240]
   4f928:	lsr	x1, x19, #12
   4f92c:	ubfx	x13, x19, #12, #4
   4f930:	ubfx	x14, x19, #18, #2
   4f934:	add	x23, x23, #0xfd9
   4f938:	add	x18, x18, #0x308
   4f93c:	add	x6, x6, #0x42e
   4f940:	add	x16, x16, #0x4fe
   4f944:	add	x15, x15, #0x352
   4f948:	stur	x14, [x29, #-80]
   4f94c:	b	4f958 <print_arm_disassembler_options@@Base+0x219c>
   4f950:	ldr	x23, [x18], #56
   4f954:	cbz	x23, 4fddc <print_arm_disassembler_options@@Base+0x2620>
   4f958:	ldp	x21, x3, [x18, #-72]
   4f95c:	and	x3, x3, x19
   4f960:	cmp	x3, x21
   4f964:	b.ne	4f950 <print_arm_disassembler_options@@Base+0x2194>  // b.any
   4f968:	ldur	w21, [x18, #-80]
   4f96c:	cmp	w21, #0xdb
   4f970:	b.hi	4faa8 <print_arm_disassembler_options@@Base+0x22ec>  // b.pmore
   4f974:	adr	x22, 4f988 <print_arm_disassembler_options@@Base+0x21cc>
   4f978:	ldrb	w3, [x15, x21]
   4f97c:	add	x22, x22, x3, lsl #2
   4f980:	mov	w3, w10
   4f984:	br	x22
   4f988:	mov	w3, w28
   4f98c:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f990:	mov	w3, w0
   4f994:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f998:	mov	w3, w5
   4f99c:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9a0:	ldur	w3, [x29, #-88]
   4f9a4:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9a8:	mov	w3, w28
   4f9ac:	ldur	x14, [x29, #-64]
   4f9b0:	cbnz	x14, 4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9b4:	b	4f950 <print_arm_disassembler_options@@Base+0x2194>
   4f9b8:	ldur	x14, [x29, #-72]
   4f9bc:	mov	w3, w14
   4f9c0:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9c4:	ldur	w3, [x29, #-120]
   4f9c8:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9cc:	ldur	w3, [x29, #-152]
   4f9d0:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9d4:	ldur	w3, [x29, #-184]
   4f9d8:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4f9dc:	ldur	x14, [x29, #-160]
   4f9e0:	ldur	w3, [x29, #-176]
   4f9e4:	cmp	x14, #0x300, lsl #12
   4f9e8:	b.ne	4faa4 <print_arm_disassembler_options@@Base+0x22e8>  // b.any
   4f9ec:	b	4f950 <print_arm_disassembler_options@@Base+0x2194>
   4f9f0:	ldur	x14, [x29, #-96]
   4f9f4:	cmp	x8, x14
   4f9f8:	ldur	w14, [x29, #-168]
   4f9fc:	cset	w3, ne  // ne = any
   4fa00:	cmp	w21, #0xda
   4fa04:	cset	w22, ne  // ne = any
   4fa08:	orr	w3, w3, w22
   4fa0c:	and	w3, w3, w14
   4fa10:	tbz	w3, #0, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fa14:	b	4faa8 <print_arm_disassembler_options@@Base+0x22ec>
   4fa18:	ldur	x14, [x29, #-72]
   4fa1c:	mov	w3, w14
   4fa20:	ldur	x14, [x29, #-200]
   4fa24:	cbnz	x14, 4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa28:	b	4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fa2c:	ldur	w14, [x29, #-208]
   4fa30:	tbnz	w14, #0, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fa34:	b	4faa8 <print_arm_disassembler_options@@Base+0x22ec>
   4fa38:	mov	w3, w26
   4fa3c:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa40:	mov	w3, w4
   4fa44:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa48:	ldr	w3, [sp, #208]
   4fa4c:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa50:	ldur	w3, [x29, #-192]
   4fa54:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa58:	mov	w3, w4
   4fa5c:	b	4f9ac <print_arm_disassembler_options@@Base+0x21f0>
   4fa60:	ldur	w3, [x29, #-192]
   4fa64:	b	4f9ac <print_arm_disassembler_options@@Base+0x21f0>
   4fa68:	ldr	w3, [sp, #216]
   4fa6c:	ldr	x14, [sp, #176]
   4fa70:	cbnz	x14, 4faa8 <print_arm_disassembler_options@@Base+0x22ec>
   4fa74:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa78:	ldr	w3, [sp, #200]
   4fa7c:	ldr	w14, [sp, #192]
   4fa80:	tbnz	w14, #0, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fa84:	b	4faa4 <print_arm_disassembler_options@@Base+0x22e8>
   4fa88:	ldur	x14, [x29, #-224]
   4fa8c:	cbz	x14, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fa90:	ldur	x14, [x29, #-224]
   4fa94:	cmp	x14, #0x3
   4fa98:	b.eq	4f950 <print_arm_disassembler_options@@Base+0x2194>  // b.none
   4fa9c:	b	4faa8 <print_arm_disassembler_options@@Base+0x22ec>
   4faa0:	ldr	w3, [sp, #184]
   4faa4:	cbnz	w3, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4faa8:	cbz	w11, 4fab8 <print_arm_disassembler_options@@Base+0x22fc>
   4faac:	sub	w3, w21, #0xc2
   4fab0:	cmp	w3, #0x11
   4fab4:	b.cs	4faf4 <print_arm_disassembler_options@@Base+0x2338>  // b.hs, b.nlast
   4fab8:	sub	w3, w21, #0x2
   4fabc:	mov	w17, wzr
   4fac0:	cmp	w3, #0xcf
   4fac4:	mov	w14, #0xc                   	// #12
   4fac8:	stur	w14, [x29, #-36]
   4facc:	b.hi	4fd34 <print_arm_disassembler_options@@Base+0x2578>  // b.pmore
   4fad0:	adr	x22, 4fae0 <print_arm_disassembler_options@@Base+0x2324>
   4fad4:	ldrb	w14, [x6, x3]
   4fad8:	add	x22, x22, x14, lsl #2
   4fadc:	br	x22
   4fae0:	cmp	x8, #0xd
   4fae4:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fae8:	cmp	x8, #0xf
   4faec:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4faf0:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4faf4:	sub	w3, w21, #0x3c
   4faf8:	cmp	w3, #0x5
   4fafc:	mov	w17, #0x1                   	// #1
   4fb00:	stur	wzr, [x29, #-36]
   4fb04:	b.hi	4fd34 <print_arm_disassembler_options@@Base+0x2578>  // b.pmore
   4fb08:	mov	w14, #0x1                   	// #1
   4fb0c:	lsl	w3, w14, w3
   4fb10:	mov	w14, #0x39                  	// #57
   4fb14:	tst	w3, w14
   4fb18:	b.ne	4fab8 <print_arm_disassembler_options@@Base+0x22fc>  // b.any
   4fb1c:	b	4fd34 <print_arm_disassembler_options@@Base+0x2578>
   4fb20:	cmp	x13, #0xd
   4fb24:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fb28:	cmp	x13, #0xf
   4fb2c:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fb30:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fb34:	cmp	x7, #0xd
   4fb38:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fb3c:	cmp	x7, #0xf
   4fb40:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fb44:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fb48:	cmp	x8, #0xd
   4fb4c:	b.ne	4fd28 <print_arm_disassembler_options@@Base+0x256c>  // b.any
   4fb50:	b	4fcf0 <print_arm_disassembler_options@@Base+0x2534>
   4fb54:	ldur	x14, [x29, #-96]
   4fb58:	cmp	x14, #0xf
   4fb5c:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fb60:	cmp	x14, #0xd
   4fb64:	b.ne	4fd28 <print_arm_disassembler_options@@Base+0x256c>  // b.any
   4fb68:	tbz	w19, #21, 4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fb6c:	mov	w14, #0x6                   	// #6
   4fb70:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fb74:	ldr	w14, [sp, #248]
   4fb78:	stur	w14, [x29, #-36]
   4fb7c:	ldur	w14, [x29, #-240]
   4fb80:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fb84:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fb88:	ldur	x14, [x29, #-232]
   4fb8c:	cmp	x14, #0x600, lsl #12
   4fb90:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fb94:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fb98:	cmp	x9, #0xf0, lsl #12
   4fb9c:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fba0:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fba4:	ldr	w14, [sp, #232]
   4fba8:	stur	w14, [x29, #-36]
   4fbac:	ldr	w14, [sp, #224]
   4fbb0:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fbb4:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fbb8:	ldr	w14, [sp, #136]
   4fbbc:	tbnz	w14, #0, 4fc5c <print_arm_disassembler_options@@Base+0x24a0>
   4fbc0:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fbc4:	ldr	w14, [sp, #152]
   4fbc8:	tbnz	w14, #0, 4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fbcc:	b	4fdc0 <print_arm_disassembler_options@@Base+0x2604>
   4fbd0:	ldr	x14, [sp, #144]
   4fbd4:	cmp	x14, #0x20
   4fbd8:	b.ne	4fd28 <print_arm_disassembler_options@@Base+0x256c>  // b.any
   4fbdc:	mov	w14, #0x1                   	// #1
   4fbe0:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fbe4:	ldur	x14, [x29, #-96]
   4fbe8:	cmp	x14, #0xf
   4fbec:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fbf0:	cmp	x14, #0xd
   4fbf4:	b.ne	4fd00 <print_arm_disassembler_options@@Base+0x2544>  // b.any
   4fbf8:	ldr	w14, [sp, #52]
   4fbfc:	stur	w14, [x29, #-36]
   4fc00:	ldr	w14, [sp, #64]
   4fc04:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fc08:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fc0c:	ldur	x14, [x29, #-96]
   4fc10:	cmp	x14, #0xf
   4fc14:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fc18:	cmp	x14, #0xd
   4fc1c:	b.ne	4fd14 <print_arm_disassembler_options@@Base+0x2558>  // b.any
   4fc20:	ldr	w14, [sp, #56]
   4fc24:	stur	w14, [x29, #-36]
   4fc28:	ldr	w14, [sp, #68]
   4fc2c:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fc30:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fc34:	ldur	x14, [x29, #-64]
   4fc38:	cmp	x14, x2
   4fc3c:	b.eq	4fc84 <print_arm_disassembler_options@@Base+0x24c8>  // b.none
   4fc40:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fc44:	ldr	x14, [sp, #160]
   4fc48:	cmp	x14, #0xc
   4fc4c:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fc50:	b	4fd28 <print_arm_disassembler_options@@Base+0x256c>
   4fc54:	ldr	w14, [sp, #104]
   4fc58:	tbnz	w14, #0, 50e3c <print_arm_disassembler_options@@Base+0x3680>
   4fc5c:	mov	w14, #0xb                   	// #11
   4fc60:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fc64:	ldr	w14, [sp, #128]
   4fc68:	stur	w14, [x29, #-36]
   4fc6c:	ldr	w14, [sp, #88]
   4fc70:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fc74:	b	52884 <print_arm_disassembler_options@@Base+0x50c8>
   4fc78:	ldur	x14, [x29, #-64]
   4fc7c:	cmp	x14, x30
   4fc80:	b.ne	5284c <print_arm_disassembler_options@@Base+0x5090>  // b.any
   4fc84:	mov	w14, #0x7                   	// #7
   4fc88:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fc8c:	cmp	x13, #0xd
   4fc90:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fc94:	cmp	x13, #0xf
   4fc98:	b.eq	4fce8 <print_arm_disassembler_options@@Base+0x252c>  // b.none
   4fc9c:	b	528b8 <print_arm_disassembler_options@@Base+0x50fc>
   4fca0:	ldr	w14, [sp, #96]
   4fca4:	stur	w14, [x29, #-36]
   4fca8:	ldr	w14, [sp, #80]
   4fcac:	tbnz	w14, #0, 4fcf8 <print_arm_disassembler_options@@Base+0x253c>
   4fcb0:	b	52804 <print_arm_disassembler_options@@Base+0x5048>
   4fcb4:	cmp	x9, #0xd0, lsl #12
   4fcb8:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fcbc:	b	50e3c <print_arm_disassembler_options@@Base+0x3680>
   4fcc0:	ldr	w14, [sp, #120]
   4fcc4:	tbz	w14, #0, 4fdc0 <print_arm_disassembler_options@@Base+0x2604>
   4fcc8:	b	50e3c <print_arm_disassembler_options@@Base+0x3680>
   4fccc:	ldr	w14, [sp, #112]
   4fcd0:	tbz	w14, #0, 4fdc0 <print_arm_disassembler_options@@Base+0x2604>
   4fcd4:	b	50e3c <print_arm_disassembler_options@@Base+0x3680>
   4fcd8:	cmp	x8, #0xd
   4fcdc:	b.eq	4fcf0 <print_arm_disassembler_options@@Base+0x2534>  // b.none
   4fce0:	cmp	x8, #0xf
   4fce4:	b.ne	4fdb8 <print_arm_disassembler_options@@Base+0x25fc>  // b.any
   4fce8:	mov	w14, #0x3                   	// #3
   4fcec:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fcf0:	mov	w14, #0x2                   	// #2
   4fcf4:	stur	w14, [x29, #-36]
   4fcf8:	mov	w17, #0x1                   	// #1
   4fcfc:	b	4fd34 <print_arm_disassembler_options@@Base+0x2578>
   4fd00:	ldur	x14, [x29, #-64]
   4fd04:	cmp	x14, #0x6
   4fd08:	b.ls	4fd28 <print_arm_disassembler_options@@Base+0x256c>  // b.plast
   4fd0c:	mov	w14, #0x5                   	// #5
   4fd10:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fd14:	ldur	x14, [x29, #-64]
   4fd18:	cmp	x14, #0x4
   4fd1c:	b.ls	4fd28 <print_arm_disassembler_options@@Base+0x256c>  // b.plast
   4fd20:	mov	w14, #0x4                   	// #4
   4fd24:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fd28:	mov	w14, #0xc                   	// #12
   4fd2c:	mov	w17, wzr
   4fd30:	stur	w14, [x29, #-36]
   4fd34:	sub	w22, w21, #0x11
   4fd38:	mov	w3, wzr
   4fd3c:	cmp	w22, #0xb0
   4fd40:	mov	w14, #0x11                  	// #17
   4fd44:	stur	w14, [x29, #-52]
   4fd48:	b.hi	4fd6c <print_arm_disassembler_options@@Base+0x25b0>  // b.pmore
   4fd4c:	stur	w17, [x29, #-48]
   4fd50:	adr	x14, 4fd64 <print_arm_disassembler_options@@Base+0x25a8>
   4fd54:	ldrh	w17, [x16, x22, lsl #1]
   4fd58:	add	x14, x14, x17, lsl #2
   4fd5c:	ldur	w17, [x29, #-48]
   4fd60:	br	x14
   4fd64:	mov	w3, w28
   4fd68:	stur	w27, [x29, #-52]
   4fd6c:	cmp	w21, #0x45
   4fd70:	b.ne	50e54 <print_arm_disassembler_options@@Base+0x3698>  // b.any
   4fd74:	cbz	x12, 4f950 <print_arm_disassembler_options@@Base+0x2194>
   4fd78:	b	50e54 <print_arm_disassembler_options@@Base+0x3698>
   4fd7c:	ldur	x14, [x29, #-80]
   4fd80:	cmp	x14, #0x3
   4fd84:	b.eq	4fd9c <print_arm_disassembler_options@@Base+0x25e0>  // b.none
   4fd88:	cbnz	x14, 4fda8 <print_arm_disassembler_options@@Base+0x25ec>
   4fd8c:	mov	w14, #0x1                   	// #1
   4fd90:	stur	w14, [x29, #-52]
   4fd94:	mov	w3, #0x1                   	// #1
   4fd98:	b	4fd6c <print_arm_disassembler_options@@Base+0x25b0>
   4fd9c:	mov	w3, #0x1                   	// #1
   4fda0:	stur	w14, [x29, #-52]
   4fda4:	b	4fd6c <print_arm_disassembler_options@@Base+0x25b0>
   4fda8:	mov	w14, #0x11                  	// #17
   4fdac:	mov	w3, wzr
   4fdb0:	stur	w14, [x29, #-52]
   4fdb4:	b	4fd6c <print_arm_disassembler_options@@Base+0x25b0>
   4fdb8:	ldr	w14, [sp, #28]
   4fdbc:	tbnz	w14, #0, 50e3c <print_arm_disassembler_options@@Base+0x3680>
   4fdc0:	mov	w14, #0xa                   	// #10
   4fdc4:	b	4fcf4 <print_arm_disassembler_options@@Base+0x2538>
   4fdc8:	mov	w2, #0x1                   	// #1
   4fdcc:	mov	x0, x20
   4fdd0:	mov	x1, x19
   4fdd4:	bl	52978 <print_arm_disassembler_options@@Base+0x51bc>
   4fdd8:	cbnz	w0, 4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   4fddc:	adrp	x0, 94000 <aarch64_operands@@Base+0xfc38>
   4fde0:	add	x0, x0, #0x338
   4fde4:	mov	w4, #0x1                   	// #1
   4fde8:	mov	x1, x25
   4fdec:	mov	x2, x20
   4fdf0:	mov	x3, x19
   4fdf4:	bl	53de0 <print_arm_disassembler_options@@Base+0x6624>
   4fdf8:	cbnz	w0, 4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   4fdfc:	mov	w8, #0xe001                	// #57345
   4fe00:	movk	w8, #0xf00f, lsl #16
   4fe04:	cmp	w19, w8
   4fe08:	b.ne	4fe1c <print_arm_disassembler_options@@Base+0x2660>  // b.any
   4fe0c:	adrp	x27, 6e000 <fields@@Base+0x151b4>
   4fe10:	mov	x4, x20
   4fe14:	add	x27, x27, #0x7e4
   4fe18:	b	4fe44 <print_arm_disassembler_options@@Base+0x2688>
   4fe1c:	adrp	x8, 95000 <aarch64_operands@@Base+0x10c38>
   4fe20:	add	x8, x8, #0x518
   4fe24:	ldr	x27, [x8]
   4fe28:	cbz	x27, 50d28 <print_arm_disassembler_options@@Base+0x356c>
   4fe2c:	ldp	x10, x9, [x8, #-16]
   4fe30:	add	x8, x8, #0x30
   4fe34:	and	x9, x9, x19
   4fe38:	cmp	x9, x10
   4fe3c:	b.ne	4fe24 <print_arm_disassembler_options@@Base+0x2668>  // b.any
   4fe40:	mov	x4, x20
   4fe44:	ubfx	w0, w19, #26, #1
   4fe48:	ubfx	w1, w19, #13, #1
   4fe4c:	ubfx	w2, w19, #11, #1
   4fe50:	lsr	x16, x19, #10
   4fe54:	eor	w1, w1, w0
   4fe58:	eor	w2, w2, w0
   4fe5c:	lsl	w0, w0, #24
   4fe60:	ubfx	x6, x19, #6, #2
   4fe64:	lsr	x30, x19, #6
   4fe68:	bfi	w0, w1, #23, #1
   4fe6c:	and	w1, w16, #0x1c
   4fe70:	tst	x19, #0xff
   4fe74:	lsr	w22, w19, #11
   4fe78:	orr	w18, w6, w1
   4fe7c:	and	w6, w30, #0x100000
   4fe80:	bfi	w6, w22, #19, #1
   4fe84:	cset	w22, ne  // ne = any
   4fe88:	tst	x19, #0x20
   4fe8c:	bfi	w0, w2, #22, #1
   4fe90:	cset	w2, eq  // eq = none
   4fe94:	and	x7, x19, #0x30
   4fe98:	lsr	x23, x19, #14
   4fe9c:	and	x28, x19, #0xff0
   4fea0:	lsl	w20, w19, #12
   4fea4:	and	w2, w22, w2
   4fea8:	bfxil	x28, x19, #16, #4
   4feac:	and	x20, x20, #0xf000
   4feb0:	stur	w2, [x29, #-120]
   4feb4:	mov	x2, x7
   4feb8:	and	x22, x23, #0x40
   4febc:	bfxil	x7, x19, #8, #4
   4fec0:	lsr	x9, x19, #4
   4fec4:	orr	x20, x28, x20
   4fec8:	orr	x7, x7, x22
   4fecc:	stur	xzr, [x29, #-48]
   4fed0:	stur	wzr, [x29, #-52]
   4fed4:	stur	wzr, [x29, #-36]
   4fed8:	lsr	x1, x19, #15
   4fedc:	stur	x20, [x29, #-112]
   4fee0:	bfxil	x2, x19, #16, #4
   4fee4:	str	x7, [sp, #112]
   4fee8:	and	x7, x9, #0x700
   4feec:	orr	x2, x2, x22
   4fef0:	and	x1, x1, #0x800
   4fef4:	bfxil	x7, x19, #0, #8
   4fef8:	lsr	x11, x19, #1
   4fefc:	and	x20, x9, #0x1000
   4ff00:	str	x2, [sp, #208]
   4ff04:	and	x2, x9, #0x7f000
   4ff08:	orr	x23, x7, x1
   4ff0c:	and	x1, x9, #0x1f000
   4ff10:	lsr	w26, w19, #13
   4ff14:	and	x16, x16, #0x2
   4ff18:	bfi	x20, x11, #2, #10
   4ff1c:	bfi	x2, x11, #2, #10
   4ff20:	bfi	x1, x11, #2, #10
   4ff24:	bfi	w6, w26, #18, #1
   4ff28:	orr	x7, x20, x16
   4ff2c:	orr	x2, x2, x16
   4ff30:	orr	x1, x1, x16
   4ff34:	bfi	x16, x11, #2, #10
   4ff38:	and	w11, w9, #0x3f000
   4ff3c:	orr	w11, w6, w11
   4ff40:	and	x6, x9, #0x3ff000
   4ff44:	bfi	x6, x19, #1, #11
   4ff48:	eor	w0, w0, #0x1c00000
   4ff4c:	mov	x12, #0xffffffffffff0004    	// #-65532
   4ff50:	orr	x0, x6, x0
   4ff54:	movk	x12, #0xff00, lsl #16
   4ff58:	add	x0, x25, x0
   4ff5c:	mov	w13, #0xfffffffd            	// #-3
   4ff60:	mov	w6, #0x80                  	// #128
   4ff64:	add	x12, x0, x12
   4ff68:	ubfx	x20, x23, #7, #25
   4ff6c:	bfxil	w6, w23, #0, #7
   4ff70:	tst	x19, #0x1000
   4ff74:	and	x13, x12, x13
   4ff78:	ror	w6, w6, w20
   4ff7c:	csel	x12, x13, x12, eq  // eq = none
   4ff80:	str	w6, [sp, #80]
   4ff84:	stur	x12, [x29, #-128]
   4ff88:	orr	x12, x7, #0xffffffffffffe000
   4ff8c:	tst	x9, #0x1000
   4ff90:	mov	w14, #0x4                   	// #4
   4ff94:	mov	w15, #0x2                   	// #2
   4ff98:	csel	x12, x7, x12, eq  // eq = none
   4ff9c:	tst	x19, #0x20000
   4ffa0:	csel	w14, w15, w14, eq  // eq = none
   4ffa4:	orr	x15, x2, #0xfffffffffff80000
   4ffa8:	tst	x19, #0x400000
   4ffac:	mov	w17, #0x43                  	// #67
   4ffb0:	csel	x15, x2, x15, eq  // eq = none
   4ffb4:	tst	x19, #0x100000
   4ffb8:	mov	w7, #0x53                  	// #83
   4ffbc:	ubfiz	x21, x19, #1, #11
   4ffc0:	csel	w17, w17, w7, eq  // eq = none
   4ffc4:	adrp	x5, 57000 <xexit@@Base+0xdd4>
   4ffc8:	orr	w11, w11, w21
   4ffcc:	adrp	x6, 5c000 <fields@@Base+0x31b4>
   4ffd0:	adrp	x20, 6b000 <fields@@Base+0x121b4>
   4ffd4:	str	w17, [sp, #128]
   4ffd8:	orr	x17, x1, #0xfffffffffffe0000
   4ffdc:	adrp	x7, 5c000 <fields@@Base+0x31b4>
   4ffe0:	add	x8, x25, #0x4
   4ffe4:	add	x5, x5, #0x5a
   4ffe8:	add	x6, x6, #0x6e6
   4ffec:	add	x20, x20, #0x697
   4fff0:	csel	x17, x1, x17, eq  // eq = none
   4fff4:	tst	x19, #0x1000000
   4fff8:	add	x7, x7, #0x6ec
   4fffc:	lsl	x11, x11, #43
   50000:	csel	x5, x5, x7, eq  // eq = none
   50004:	csel	x6, x20, x6, eq  // eq = none
   50008:	add	x11, x8, x11, asr #43
   5000c:	str	x5, [sp, #104]
   50010:	str	x6, [sp, #96]
   50014:	stur	x11, [x29, #-168]
   50018:	add	x11, x8, x12
   5001c:	and	x5, x8, #0xfffffffffffffffc
   50020:	sub	x6, x8, x16
   50024:	add	x16, x8, x16
   50028:	stur	x11, [x29, #-176]
   5002c:	add	x11, x8, x15
   50030:	tst	w19, #0xff
   50034:	add	x8, x8, x17
   50038:	mov	w13, #0x2d                  	// #45
   5003c:	mov	w2, #0x2b                  	// #43
   50040:	stp	x8, x11, [x29, #-192]
   50044:	cset	w8, eq  // eq = none
   50048:	tst	x19, #0x800000
   5004c:	and	w1, w19, #0xfff
   50050:	csel	w11, w2, w13, ne  // ne = any
   50054:	stp	x16, x6, [x29, #-160]
   50058:	str	w11, [sp, #192]
   5005c:	neg	w11, w1
   50060:	sxtw	x11, w11
   50064:	and	x12, x19, #0xf
   50068:	str	x1, [sp, #200]
   5006c:	str	x11, [sp, #88]
   50070:	mov	w11, #0x7777                	// #30583
   50074:	stur	x12, [x29, #-104]
   50078:	sub	x12, x12, #0x1
   5007c:	and	x9, x9, #0xf000
   50080:	lsr	w11, w11, w12
   50084:	str	w11, [sp, #120]
   50088:	orr	x11, x23, x9
   5008c:	bfxil	x9, x19, #0, #12
   50090:	str	x12, [sp, #232]
   50094:	stur	x9, [x29, #-80]
   50098:	lsl	w9, w23, #24
   5009c:	stur	x11, [x29, #-200]
   500a0:	and	w11, w23, #0xff
   500a4:	mov	w12, w9
   500a8:	bfi	w9, w11, #8, #8
   500ac:	bfxil	w12, w23, #0, #8
   500b0:	ubfx	x0, x19, #22, #10
   500b4:	str	w9, [sp, #72]
   500b8:	mov	w9, w11
   500bc:	bfi	w12, w11, #16, #8
   500c0:	lsl	w10, w19, #2
   500c4:	and	w0, w0, #0x1e
   500c8:	bfi	w9, w11, #16, #8
   500cc:	bfi	w12, w11, #8, #8
   500d0:	and	x10, x10, #0x3fc
   500d4:	stp	w9, w12, [sp, #64]
   500d8:	add	w9, w0, w14
   500dc:	str	w11, [sp, #240]
   500e0:	stur	w9, [x29, #-208]
   500e4:	cneg	x9, x10, eq  // eq = none
   500e8:	and	w8, w8, w19, lsr #23
   500ec:	and	w10, w19, #0xff
   500f0:	stur	w0, [x29, #-144]
   500f4:	str	w8, [sp, #184]
   500f8:	lsl	w8, w10, #2
   500fc:	str	w8, [sp, #176]
   50100:	cneg	w8, w8, eq  // eq = none
   50104:	str	x8, [sp, #168]
   50108:	add	x8, x9, x5
   5010c:	cmp	w18, #0x0
   50110:	str	x8, [sp, #160]
   50114:	mov	w8, #0x20                  	// #32
   50118:	csel	w8, w8, w18, eq  // eq = none
   5011c:	str	w8, [sp, #152]
   50120:	and	x8, x19, #0xf0000
   50124:	str	x5, [sp, #136]
   50128:	stur	x8, [x29, #-216]
   5012c:	and	x8, x19, #0xff
   50130:	stur	x8, [x29, #-96]
   50134:	ubfx	x8, x19, #16, #4
   50138:	ubfx	w9, w19, #21, #2
   5013c:	stur	x8, [x29, #-72]
   50140:	and	x8, x19, #0xf0
   50144:	stur	x9, [x29, #-232]
   50148:	ubfx	x9, x19, #8, #4
   5014c:	stur	x8, [x29, #-224]
   50150:	ubfx	x8, x19, #4, #2
   50154:	str	x9, [sp, #144]
   50158:	ubfx	w9, w19, #4, #2
   5015c:	and	w3, w19, #0x1f
   50160:	str	w9, [sp, #52]
   50164:	stur	x8, [x29, #-88]
   50168:	lsl	w8, w8, #3
   5016c:	add	w3, w3, #0x1
   50170:	str	w8, [sp, #224]
   50174:	neg	w8, w10
   50178:	adrp	x25, 62000 <fields@@Base+0x91b4>
   5017c:	str	x8, [sp, #56]
   50180:	sub	w8, w3, w18
   50184:	adrp	x26, 69000 <fields@@Base+0x101b4>
   50188:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   5018c:	add	x25, x25, #0xa12
   50190:	str	x10, [sp, #216]
   50194:	stur	w8, [x29, #-240]
   50198:	ubfx	x8, x23, #8, #24
   5019c:	add	x26, x26, #0xde6
   501a0:	mov	x20, x4
   501a4:	adrp	x28, f2000 <aarch64_opcode_table@@Base+0x555d8>
   501a8:	add	x22, x22, #0xaf8
   501ac:	stur	w18, [x29, #-64]
   501b0:	stur	w3, [x29, #-136]
   501b4:	str	x8, [sp, #248]
   501b8:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   501bc:	ldr	x8, [x20, #120]
   501c0:	ldur	x0, [x29, #-176]
   501c4:	mov	x1, x20
   501c8:	blr	x8
   501cc:	ldur	x2, [x29, #-32]
   501d0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   501d4:	add	x1, x1, #0xf48
   501d8:	mov	x0, x24
   501dc:	blr	x2
   501e0:	ldur	w2, [x29, #-208]
   501e4:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   501e8:	add	x1, x1, #0xfce
   501ec:	mov	x0, x24
   501f0:	ldur	x3, [x29, #-32]
   501f4:	blr	x3
   501f8:	add	x27, x27, #0x1
   501fc:	ldrb	w2, [x27]
   50200:	cmp	w2, #0x25
   50204:	b.eq	50218 <print_arm_disassembler_options@@Base+0x2a5c>  // b.none
   50208:	cbz	w2, 50ccc <print_arm_disassembler_options@@Base+0x3510>
   5020c:	mov	x0, x24
   50210:	mov	x1, x26
   50214:	b	501f0 <print_arm_disassembler_options@@Base+0x2a34>
   50218:	ldrb	w9, [x27, #1]!
   5021c:	sub	w8, w9, #0x25
   50220:	cmp	w8, #0x53
   50224:	b.hi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.pmore
   50228:	adr	x10, 501bc <print_arm_disassembler_options@@Base+0x2a00>
   5022c:	ldrh	w11, [x25, x8, lsl #1]
   50230:	add	x10, x10, x11, lsl #2
   50234:	br	x10
   50238:	mov	x21, xzr
   5023c:	mov	w8, wzr
   50240:	mov	x22, x27
   50244:	sub	w10, w9, #0x30
   50248:	and	w10, w10, #0xff
   5024c:	cmp	w10, #0x9
   50250:	b.hi	5027c <print_arm_disassembler_options@@Base+0x2ac0>  // b.pmore
   50254:	mov	w10, wzr
   50258:	mov	w11, #0xa                   	// #10
   5025c:	mul	w10, w10, w11
   50260:	add	w10, w10, w9, uxtb
   50264:	ldrb	w9, [x22, #1]!
   50268:	sub	w10, w10, #0x30
   5026c:	sub	w11, w9, #0x30
   50270:	cmp	w11, #0xa
   50274:	b.cc	50258 <print_arm_disassembler_options@@Base+0x2a9c>  // b.lo, b.ul, b.last
   50278:	b	50280 <print_arm_disassembler_options@@Base+0x2ac4>
   5027c:	mov	w10, wzr
   50280:	and	w11, w9, #0xff
   50284:	cmp	w11, #0x2d
   50288:	b.ne	502c8 <print_arm_disassembler_options@@Base+0x2b0c>  // b.any
   5028c:	ldrb	w9, [x22, #1]!
   50290:	sub	w11, w9, #0x30
   50294:	cmp	w11, #0x9
   50298:	mov	x27, x22
   5029c:	mov	w11, wzr
   502a0:	b.hi	502d0 <print_arm_disassembler_options@@Base+0x2b14>  // b.pmore
   502a4:	mov	w12, #0xa                   	// #10
   502a8:	mul	w11, w11, w12
   502ac:	add	w11, w11, w9, uxtb
   502b0:	ldrb	w9, [x27, #1]!
   502b4:	sub	w11, w11, #0x30
   502b8:	sub	w12, w9, #0x30
   502bc:	cmp	w12, #0xa
   502c0:	b.cc	502a4 <print_arm_disassembler_options@@Base+0x2ae8>  // b.lo, b.ul, b.last
   502c4:	b	502d0 <print_arm_disassembler_options@@Base+0x2b14>
   502c8:	mov	w11, w10
   502cc:	mov	x27, x22
   502d0:	subs	w11, w11, w10
   502d4:	b.mi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.first
   502d8:	and	w9, w9, #0xff
   502dc:	sub	w9, w9, #0x27
   502e0:	cmp	w9, #0x51
   502e4:	b.hi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.pmore
   502e8:	mov	w12, #0x2                   	// #2
   502ec:	adrp	x14, 62000 <fields@@Base+0x91b4>
   502f0:	add	w13, w8, w11
   502f4:	add	x14, x14, #0xaba
   502f8:	lsl	x11, x12, x11
   502fc:	lsr	x10, x19, x10
   50300:	adr	x12, 50328 <print_arm_disassembler_options@@Base+0x2b6c>
   50304:	ldrh	w15, [x14, x9, lsl #1]
   50308:	add	x12, x12, x15, lsl #2
   5030c:	sub	x9, x11, #0x1
   50310:	and	x9, x9, x10
   50314:	lsl	x9, x9, x8
   50318:	add	w8, w13, #0x1
   5031c:	orr	x21, x9, x21
   50320:	add	x22, x27, #0x1
   50324:	br	x12
   50328:	ldrb	w9, [x22]
   5032c:	b	50244 <print_arm_disassembler_options@@Base+0x2a88>
   50330:	ldur	x21, [x29, #-80]
   50334:	b	505c4 <print_arm_disassembler_options@@Base+0x2e08>
   50338:	ldr	x8, [x20, #120]
   5033c:	ldur	x21, [x29, #-168]
   50340:	b	503d4 <print_arm_disassembler_options@@Base+0x2c18>
   50344:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   50348:	ldr	w8, [x8, #1056]
   5034c:	cbz	w8, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   50350:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   50354:	ubfx	x8, x8, #4, #4
   50358:	add	x9, x9, #0xf38
   5035c:	ldr	x2, [x9, x8, lsl #3]
   50360:	b	509f4 <print_arm_disassembler_options@@Base+0x3238>
   50364:	ldur	x8, [x29, #-224]
   50368:	cmp	x8, #0x60
   5036c:	b.ne	508c8 <print_arm_disassembler_options@@Base+0x310c>  // b.any
   50370:	ldur	x2, [x29, #-104]
   50374:	cmp	x2, #0xf
   50378:	b.ne	50ac8 <print_arm_disassembler_options@@Base+0x330c>  // b.any
   5037c:	adrp	x1, 59000 <fields@@Base+0x1b4>
   50380:	add	x1, x1, #0x5e3
   50384:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50388:	ldr	w8, [x28, #1560]
   5038c:	ldur	x21, [x29, #-72]
   50390:	mov	w9, #0x90                  	// #144
   50394:	ldur	x3, [x29, #-32]
   50398:	madd	x8, x8, x9, x22
   5039c:	add	x8, x8, x21, lsl #3
   503a0:	ldr	x2, [x8, #16]
   503a4:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   503a8:	add	x1, x1, #0x3a4
   503ac:	mov	x0, x24
   503b0:	blr	x3
   503b4:	tbnz	w19, #23, 508f0 <print_arm_disassembler_options@@Base+0x3134>
   503b8:	cmp	w21, #0xf
   503bc:	b.ne	50ad8 <print_arm_disassembler_options@@Base+0x331c>  // b.any
   503c0:	ldr	x21, [sp, #88]
   503c4:	mov	w22, wzr
   503c8:	b	50908 <print_arm_disassembler_options@@Base+0x314c>
   503cc:	ldr	x8, [x20, #120]
   503d0:	ldur	x21, [x29, #-128]
   503d4:	mov	x0, x21
   503d8:	mov	x1, x20
   503dc:	blr	x8
   503e0:	mov	w8, #0x1                   	// #1
   503e4:	mov	w9, #0x2                   	// #2
   503e8:	strb	w8, [x20, #196]
   503ec:	str	w9, [x20, #200]
   503f0:	str	x21, [x20, #208]
   503f4:	add	x27, x27, #0x1
   503f8:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   503fc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50400:	add	x1, x1, #0x28
   50404:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50408:	ldur	x11, [x29, #-232]
   5040c:	adrp	x8, 62000 <fields@@Base+0x91b4>
   50410:	add	x8, x8, #0xb5e
   50414:	adr	x9, 50424 <print_arm_disassembler_options@@Base+0x2c68>
   50418:	ldrh	w10, [x8, x11, lsl #1]
   5041c:	add	x9, x9, x10, lsl #2
   50420:	br	x9
   50424:	ldr	x1, [sp, #96]
   50428:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   5042c:	ldur	w2, [x29, #-64]
   50430:	ldur	w3, [x29, #-240]
   50434:	b	50604 <print_arm_disassembler_options@@Base+0x2e48>
   50438:	ldr	x8, [x20, #120]
   5043c:	ldur	x0, [x29, #-160]
   50440:	b	50628 <print_arm_disassembler_options@@Base+0x2e6c>
   50444:	ldur	x8, [x29, #-88]
   50448:	cbz	w8, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   5044c:	ldr	w2, [sp, #224]
   50450:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50454:	add	x1, x1, #0xf26
   50458:	b	501ec <print_arm_disassembler_options@@Base+0x2a30>
   5045c:	ldur	x8, [x29, #-96]
   50460:	cbz	x8, 50a7c <print_arm_disassembler_options@@Base+0x32c0>
   50464:	tbz	w19, #5, 505b4 <print_arm_disassembler_options@@Base+0x2df8>
   50468:	ldr	x21, [sp, #112]
   5046c:	b	509e4 <print_arm_disassembler_options@@Base+0x3228>
   50470:	ldur	w2, [x29, #-144]
   50474:	b	501e4 <print_arm_disassembler_options@@Base+0x2a28>
   50478:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   5047c:	ldr	w8, [x8, #1056]
   50480:	cbz	w8, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   50484:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   50488:	ubfx	x8, x8, #4, #4
   5048c:	add	x9, x9, #0xf38
   50490:	ldr	x2, [x9, x8, lsl #3]
   50494:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50498:	add	x1, x1, #0x83e
   5049c:	b	509fc <print_arm_disassembler_options@@Base+0x3240>
   504a0:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   504a4:	ldr	w8, [x8, #1060]
   504a8:	cbz	w8, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   504ac:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   504b0:	add	x1, x1, #0x819
   504b4:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   504b8:	ldur	x21, [x29, #-112]
   504bc:	b	505c4 <print_arm_disassembler_options@@Base+0x2e08>
   504c0:	ldur	x8, [x29, #-216]
   504c4:	cmp	x8, #0xf0, lsl #12
   504c8:	b.ne	50c60 <print_arm_disassembler_options@@Base+0x34a4>  // b.any
   504cc:	ldur	x2, [x29, #-32]
   504d0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   504d4:	add	x1, x1, #0x3e
   504d8:	mov	x0, x24
   504dc:	blr	x2
   504e0:	ldr	x8, [x20, #120]
   504e4:	ldr	x0, [sp, #160]
   504e8:	b	50628 <print_arm_disassembler_options@@Base+0x2e6c>
   504ec:	ldur	x3, [x29, #-32]
   504f0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   504f4:	add	x1, x1, #0xf63
   504f8:	mov	x0, x24
   504fc:	mov	w2, w23
   50500:	blr	x3
   50504:	stur	x23, [x29, #-48]
   50508:	b	50c60 <print_arm_disassembler_options@@Base+0x34a4>
   5050c:	ldr	x8, [x20, #120]
   50510:	ldur	x0, [x29, #-192]
   50514:	b	50628 <print_arm_disassembler_options@@Base+0x2e6c>
   50518:	ldr	x8, [x20, #120]
   5051c:	ldur	x0, [x29, #-184]
   50520:	b	50628 <print_arm_disassembler_options@@Base+0x2e6c>
   50524:	ldr	w8, [x28, #1560]
   50528:	mov	w9, #0x90                  	// #144
   5052c:	ldur	x3, [x29, #-32]
   50530:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   50534:	madd	x8, x8, x9, x22
   50538:	ldur	x9, [x29, #-72]
   5053c:	add	x1, x1, #0x3a4
   50540:	mov	x0, x24
   50544:	add	x8, x8, x9, lsl #3
   50548:	ldr	x2, [x8, #16]
   5054c:	blr	x3
   50550:	tbnz	w19, #24, 50990 <print_arm_disassembler_options@@Base+0x31d4>
   50554:	ldur	x2, [x29, #-32]
   50558:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5055c:	add	x1, x1, #0xf47
   50560:	mov	x0, x24
   50564:	blr	x2
   50568:	tbnz	w19, #21, 50b80 <print_arm_disassembler_options@@Base+0x33c4>
   5056c:	ldr	x21, [sp, #216]
   50570:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50574:	add	x1, x1, #0xf4b
   50578:	b	505cc <print_arm_disassembler_options@@Base+0x2e10>
   5057c:	ldr	x11, [sp, #248]
   50580:	cmp	w11, #0x3
   50584:	b.hi	50bec <print_arm_disassembler_options@@Base+0x3430>  // b.pmore
   50588:	adrp	x8, 62000 <fields@@Base+0x91b4>
   5058c:	add	x8, x8, #0xb7e
   50590:	adr	x9, 505a4 <print_arm_disassembler_options@@Base+0x2de8>
   50594:	ldrh	w10, [x8, x11, lsl #1]
   50598:	add	x9, x9, x10, lsl #2
   5059c:	ldr	w21, [sp, #240]
   505a0:	br	x9
   505a4:	ldr	w21, [sp, #64]
   505a8:	b	50bf0 <print_arm_disassembler_options@@Base+0x3434>
   505ac:	ldur	w8, [x29, #-120]
   505b0:	tbz	w8, #0, 509e0 <print_arm_disassembler_options@@Base+0x3224>
   505b4:	ldur	x0, [x29, #-96]
   505b8:	bl	5514c <print_arm_disassembler_options@@Base+0x7990>
   505bc:	b	509f0 <print_arm_disassembler_options@@Base+0x3234>
   505c0:	ldur	x21, [x29, #-200]
   505c4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   505c8:	add	x1, x1, #0xf63
   505cc:	mov	x0, x24
   505d0:	ldur	x3, [x29, #-32]
   505d4:	mov	w2, w21
   505d8:	blr	x3
   505dc:	stur	x21, [x29, #-48]
   505e0:	add	x27, x27, #0x1
   505e4:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   505e8:	tbz	w19, #21, 50748 <print_arm_disassembler_options@@Base+0x2f8c>
   505ec:	ldur	w2, [x29, #-64]
   505f0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   505f4:	add	x1, x1, #0xf1c
   505f8:	b	501ec <print_arm_disassembler_options@@Base+0x2a30>
   505fc:	ldur	w2, [x29, #-64]
   50600:	ldur	w3, [x29, #-136]
   50604:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50608:	add	x1, x1, #0xf5e
   5060c:	mov	x0, x24
   50610:	ldur	x4, [x29, #-32]
   50614:	blr	x4
   50618:	add	x27, x27, #0x1
   5061c:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50620:	ldr	x8, [x20, #120]
   50624:	ldur	x0, [x29, #-152]
   50628:	mov	x1, x20
   5062c:	blr	x8
   50630:	add	x27, x27, #0x1
   50634:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50638:	mov	w8, #0x1                   	// #1
   5063c:	stur	w8, [x29, #-36]
   50640:	ldur	x2, [x29, #-32]
   50644:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50648:	add	x1, x1, #0x56
   5064c:	mov	x0, x24
   50650:	blr	x2
   50654:	mov	x21, xzr
   50658:	mov	w8, wzr
   5065c:	b	5069c <print_arm_disassembler_options@@Base+0x2ee0>
   50660:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50664:	add	x1, x1, #0xf50
   50668:	mov	w8, #0xd                   	// #13
   5066c:	ldr	w9, [x28, #1560]
   50670:	mov	w10, #0x90                  	// #144
   50674:	ldur	x3, [x29, #-32]
   50678:	mov	x0, x24
   5067c:	madd	x9, x9, x10, x22
   50680:	add	x8, x9, x8, lsl #3
   50684:	ldr	x2, [x8, #16]
   50688:	blr	x3
   5068c:	mov	w8, #0x1                   	// #1
   50690:	add	x21, x21, #0x1
   50694:	cmp	x21, #0x10
   50698:	b.eq	50a2c <print_arm_disassembler_options@@Base+0x3270>  // b.none
   5069c:	mov	w9, #0x1                   	// #1
   506a0:	lsl	w9, w9, w21
   506a4:	sxtw	x9, w9
   506a8:	tst	x9, x19
   506ac:	b.eq	50690 <print_arm_disassembler_options@@Base+0x2ed4>  // b.none
   506b0:	cbz	w8, 506c8 <print_arm_disassembler_options@@Base+0x2f0c>
   506b4:	ldur	x2, [x29, #-32]
   506b8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   506bc:	add	x1, x1, #0xf48
   506c0:	mov	x0, x24
   506c4:	blr	x2
   506c8:	ldur	w8, [x29, #-36]
   506cc:	cbz	w8, 506d8 <print_arm_disassembler_options@@Base+0x2f1c>
   506d0:	cmp	x21, #0xd
   506d4:	b.eq	50660 <print_arm_disassembler_options@@Base+0x2ea4>  // b.none
   506d8:	ldur	w8, [x29, #-36]
   506dc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   506e0:	add	x1, x1, #0x816
   506e4:	cbz	w8, 506f8 <print_arm_disassembler_options@@Base+0x2f3c>
   506e8:	cmp	x21, #0xf
   506ec:	mov	x8, x21
   506f0:	b.ne	5066c <print_arm_disassembler_options@@Base+0x2eb0>  // b.any
   506f4:	b	50a10 <print_arm_disassembler_options@@Base+0x3254>
   506f8:	mov	x8, x21
   506fc:	b	5066c <print_arm_disassembler_options@@Base+0x2eb0>
   50700:	ldr	w8, [x28, #1560]
   50704:	mov	w9, #0x90                  	// #144
   50708:	ldur	x3, [x29, #-32]
   5070c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50710:	madd	x8, x8, x9, x22
   50714:	ldur	x9, [x29, #-104]
   50718:	add	x1, x1, #0x816
   5071c:	mov	x0, x24
   50720:	add	x8, x8, x9, lsl #3
   50724:	ldr	x2, [x8, #16]
   50728:	blr	x3
   5072c:	ldur	x11, [x29, #-88]
   50730:	adrp	x8, 62000 <fields@@Base+0x91b4>
   50734:	add	x8, x8, #0xb76
   50738:	adr	x9, 50748 <print_arm_disassembler_options@@Base+0x2f8c>
   5073c:	ldrh	w10, [x8, x11, lsl #1]
   50740:	add	x9, x9, x10, lsl #2
   50744:	br	x9
   50748:	ldur	w2, [x29, #-64]
   5074c:	cbz	w2, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   50750:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50754:	add	x1, x1, #0xf08
   50758:	b	501ec <print_arm_disassembler_options@@Base+0x2a30>
   5075c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50760:	and	x2, x21, #0xffffffff
   50764:	add	x1, x1, #0xbe
   50768:	b	50860 <print_arm_disassembler_options@@Base+0x30a4>
   5076c:	mov	x9, #0xffffffffffffffff    	// #-1
   50770:	lsl	x8, x9, x8
   50774:	mvn	x8, x8
   50778:	cmp	x21, x8
   5077c:	b.ne	50798 <print_arm_disassembler_options@@Base+0x2fdc>  // b.any
   50780:	ldrb	w2, [x22]
   50784:	ldur	x3, [x29, #-32]
   50788:	adrp	x1, 69000 <fields@@Base+0x101b4>
   5078c:	add	x1, x1, #0xde6
   50790:	mov	x0, x24
   50794:	blr	x3
   50798:	mov	x27, x22
   5079c:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   507a0:	add	x22, x22, #0xaf8
   507a4:	add	x27, x27, #0x1
   507a8:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   507ac:	mov	w9, #0x1                   	// #1
   507b0:	lsl	w8, w9, w8
   507b4:	mov	x22, x20
   507b8:	sxtw	x20, w8
   507bc:	sub	x8, x20, w21, sxtw
   507c0:	ldrb	w2, [x27, x8]
   507c4:	ldur	x3, [x29, #-32]
   507c8:	adrp	x1, 69000 <fields@@Base+0x101b4>
   507cc:	add	x1, x1, #0xde6
   507d0:	mov	x0, x24
   507d4:	blr	x3
   507d8:	add	x27, x27, x20
   507dc:	mov	x20, x22
   507e0:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   507e4:	add	x22, x22, #0xaf8
   507e8:	add	x27, x27, #0x1
   507ec:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   507f0:	ldur	w8, [x29, #-52]
   507f4:	cmp	x21, #0xd
   507f8:	csinc	w8, w8, wzr, ne  // ne = any
   507fc:	b	5080c <print_arm_disassembler_options@@Base+0x3050>
   50800:	lsl	x2, x21, #2
   50804:	b	50898 <print_arm_disassembler_options@@Base+0x30dc>
   50808:	ldur	w8, [x29, #-52]
   5080c:	cmp	x21, #0xf
   50810:	csinc	w8, w8, wzr, ne  // ne = any
   50814:	stur	w8, [x29, #-52]
   50818:	ldr	w8, [x28, #1560]
   5081c:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50820:	add	x22, x22, #0xaf8
   50824:	mov	w9, #0x90                  	// #144
   50828:	madd	x8, x8, x9, x22
   5082c:	add	x8, x8, x21, lsl #3
   50830:	ldr	x2, [x8, #16]
   50834:	b	509f4 <print_arm_disassembler_options@@Base+0x3238>
   50838:	adrp	x8, 8a000 <aarch64_operands@@Base+0x5c38>
   5083c:	add	x8, x8, #0xf38
   50840:	b	50854 <print_arm_disassembler_options@@Base+0x3098>
   50844:	cmp	x21, #0x3
   50848:	b.hi	50a58 <print_arm_disassembler_options@@Base+0x329c>  // b.pmore
   5084c:	adrp	x8, 98000 <aarch64_operands@@Base+0x13c38>
   50850:	add	x8, x8, #0x280
   50854:	ldr	x2, [x8, x21, lsl #3]
   50858:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5085c:	add	x1, x1, #0x816
   50860:	mov	x0, x24
   50864:	b	508a8 <print_arm_disassembler_options@@Base+0x30ec>
   50868:	ldur	x3, [x29, #-32]
   5086c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50870:	add	x1, x1, #0xa4
   50874:	mov	x0, x24
   50878:	mov	x2, x21
   5087c:	blr	x3
   50880:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50884:	stur	x21, [x29, #-48]
   50888:	add	x22, x22, #0xaf8
   5088c:	add	x27, x27, #0x1
   50890:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50894:	add	x2, x21, #0x1
   50898:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5089c:	add	x1, x1, #0xa4
   508a0:	mov	x0, x24
   508a4:	stur	x2, [x29, #-48]
   508a8:	ldur	x3, [x29, #-32]
   508ac:	blr	x3
   508b0:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   508b4:	add	x22, x22, #0xaf8
   508b8:	add	x27, x27, #0x1
   508bc:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   508c0:	cbnz	x21, 50798 <print_arm_disassembler_options@@Base+0x2fdc>
   508c4:	b	50780 <print_arm_disassembler_options@@Base+0x2fc4>
   508c8:	ldr	x8, [sp, #232]
   508cc:	cmp	w8, #0xe
   508d0:	b.hi	50abc <print_arm_disassembler_options@@Base+0x3300>  // b.pmore
   508d4:	ldr	w8, [sp, #120]
   508d8:	tbz	w8, #0, 50abc <print_arm_disassembler_options@@Base+0x3300>
   508dc:	ldr	x9, [sp, #232]
   508e0:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   508e4:	add	x8, x8, #0x690
   508e8:	ldr	x2, [x8, x9, lsl #3]
   508ec:	b	509f4 <print_arm_disassembler_options@@Base+0x3238>
   508f0:	cmp	w21, #0xf
   508f4:	ldur	x8, [x29, #-48]
   508f8:	ldr	x21, [sp, #200]
   508fc:	mov	w22, wzr
   50900:	csel	x8, x8, x21, eq  // eq = none
   50904:	stur	x8, [x29, #-48]
   50908:	ldur	x2, [x29, #-32]
   5090c:	cbz	x21, 5092c <print_arm_disassembler_options@@Base+0x3170>
   50910:	ldur	x3, [x29, #-32]
   50914:	adrp	x1, 59000 <fields@@Base+0x1b4>
   50918:	add	x1, x1, #0xb6c
   5091c:	mov	x0, x24
   50920:	mov	w2, w21
   50924:	blr	x3
   50928:	ldur	x2, [x29, #-32]
   5092c:	adrp	x8, 5d000 <fields@@Base+0x41b4>
   50930:	adrp	x9, 63000 <fields@@Base+0xa1b4>
   50934:	add	x8, x8, #0xbb5
   50938:	add	x9, x9, #0xeb
   5093c:	cmp	w22, #0x0
   50940:	csel	x1, x9, x8, eq  // eq = none
   50944:	mov	x0, x24
   50948:	blr	x2
   5094c:	ldur	x8, [x29, #-72]
   50950:	cmp	w8, #0xf
   50954:	b.ne	50a48 <print_arm_disassembler_options@@Base+0x328c>  // b.any
   50958:	ldur	x2, [x29, #-32]
   5095c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50960:	add	x1, x1, #0x3e
   50964:	mov	x0, x24
   50968:	blr	x2
   5096c:	ldr	x9, [sp, #136]
   50970:	ldr	x8, [x20, #120]
   50974:	mov	x1, x20
   50978:	add	x0, x21, x9
   5097c:	blr	x8
   50980:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50984:	add	x22, x22, #0xaf8
   50988:	add	x27, x27, #0x1
   5098c:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50990:	ldr	w8, [sp, #184]
   50994:	tbnz	w8, #0, 509bc <print_arm_disassembler_options@@Base+0x3200>
   50998:	ldr	w2, [sp, #192]
   5099c:	ldr	w3, [sp, #176]
   509a0:	ldur	x4, [x29, #-32]
   509a4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   509a8:	add	x1, x1, #0xf3f
   509ac:	mov	x0, x24
   509b0:	blr	x4
   509b4:	ldr	x8, [sp, #168]
   509b8:	stur	x8, [x29, #-48]
   509bc:	ldur	x2, [x29, #-32]
   509c0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   509c4:	add	x1, x1, #0xeb
   509c8:	mov	x0, x24
   509cc:	blr	x2
   509d0:	tbz	w19, #21, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   509d4:	adrp	x1, 6a000 <fields@@Base+0x111b4>
   509d8:	add	x1, x1, #0x34f
   509dc:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   509e0:	ldr	x21, [sp, #208]
   509e4:	mov	w0, w21
   509e8:	bl	53c14 <print_arm_disassembler_options@@Base+0x6458>
   509ec:	cbz	x0, 50aa8 <print_arm_disassembler_options@@Base+0x32ec>
   509f0:	mov	x2, x0
   509f4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   509f8:	add	x1, x1, #0x816
   509fc:	mov	x0, x24
   50a00:	ldur	x3, [x29, #-32]
   50a04:	blr	x3
   50a08:	add	x27, x27, #0x1
   50a0c:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50a10:	ldur	x3, [x29, #-32]
   50a14:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50a18:	adrp	x2, 6f000 <fields@@Base+0x161b4>
   50a1c:	add	x1, x1, #0x816
   50a20:	add	x2, x2, #0xfd8
   50a24:	mov	x0, x24
   50a28:	blr	x3
   50a2c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50a30:	add	x1, x1, #0x119
   50a34:	mov	x0, x24
   50a38:	ldur	x2, [x29, #-32]
   50a3c:	blr	x2
   50a40:	add	x27, x27, #0x1
   50a44:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50a48:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50a4c:	add	x22, x22, #0xaf8
   50a50:	add	x27, x27, #0x1
   50a54:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50a58:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50a5c:	add	x1, x1, #0xf67
   50a60:	ldur	x2, [x29, #-32]
   50a64:	mov	x0, x24
   50a68:	blr	x2
   50a6c:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50a70:	add	x22, x22, #0xaf8
   50a74:	add	x27, x27, #0x1
   50a78:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50a7c:	ldr	w2, [sp, #128]
   50a80:	ldur	x3, [x29, #-32]
   50a84:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50a88:	add	x1, x1, #0x7d
   50a8c:	mov	x0, x24
   50a90:	blr	x3
   50a94:	tbnz	w19, #11, 50c18 <print_arm_disassembler_options@@Base+0x345c>
   50a98:	tbnz	w19, #10, 50c30 <print_arm_disassembler_options@@Base+0x3474>
   50a9c:	tbnz	w19, #9, 50c48 <print_arm_disassembler_options@@Base+0x348c>
   50aa0:	tbz	w19, #8, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   50aa4:	b	50c68 <print_arm_disassembler_options@@Base+0x34ac>
   50aa8:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50aac:	add	x1, x1, #0x70
   50ab0:	mov	x0, x24
   50ab4:	mov	x2, x21
   50ab8:	b	50a00 <print_arm_disassembler_options@@Base+0x3244>
   50abc:	adrp	x1, 59000 <fields@@Base+0x1b4>
   50ac0:	ldur	x2, [x29, #-104]
   50ac4:	b	50acc <print_arm_disassembler_options@@Base+0x3310>
   50ac8:	adrp	x1, 59000 <fields@@Base+0x1b4>
   50acc:	add	x1, x1, #0xb6e
   50ad0:	mov	x0, x24
   50ad4:	b	501f0 <print_arm_disassembler_options@@Base+0x2a34>
   50ad8:	ldr	x8, [sp, #144]
   50adc:	cmp	w8, #0xf
   50ae0:	b.hi	50c74 <print_arm_disassembler_options@@Base+0x34b8>  // b.pmore
   50ae4:	ldr	x11, [sp, #144]
   50ae8:	adrp	x8, 62000 <fields@@Base+0x91b4>
   50aec:	add	x8, x8, #0xb66
   50af0:	mov	w22, wzr
   50af4:	adr	x9, 50908 <print_arm_disassembler_options@@Base+0x314c>
   50af8:	ldrb	w10, [x8, x11]
   50afc:	add	x9, x9, x10, lsl #2
   50b00:	ldr	x21, [sp, #216]
   50b04:	mov	w2, w21
   50b08:	br	x9
   50b0c:	ldr	w8, [x28, #1560]
   50b10:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50b14:	mov	w9, #0x90                  	// #144
   50b18:	add	x22, x22, #0xaf8
   50b1c:	madd	x8, x8, x9, x22
   50b20:	ldur	x9, [x29, #-104]
   50b24:	ldur	x3, [x29, #-32]
   50b28:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50b2c:	add	x1, x1, #0x13e
   50b30:	add	x8, x8, x9, lsl #3
   50b34:	ldr	x2, [x8, #16]
   50b38:	mov	x0, x24
   50b3c:	blr	x3
   50b40:	ldr	w2, [sp, #52]
   50b44:	cbz	w2, 50b5c <print_arm_disassembler_options@@Base+0x33a0>
   50b48:	ldur	x3, [x29, #-32]
   50b4c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50b50:	add	x1, x1, #0xf08
   50b54:	mov	x0, x24
   50b58:	blr	x3
   50b5c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50b60:	add	x1, x1, #0xeb
   50b64:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50b68:	tbz	w19, #24, 50c60 <print_arm_disassembler_options@@Base+0x34a4>
   50b6c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50b70:	add	x1, x1, #0x222
   50b74:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50b78:	ldr	x1, [sp, #104]
   50b7c:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50b80:	ldr	w2, [sp, #192]
   50b84:	ldr	w3, [sp, #176]
   50b88:	ldur	x4, [x29, #-32]
   50b8c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50b90:	add	x1, x1, #0xf41
   50b94:	mov	x0, x24
   50b98:	blr	x4
   50b9c:	ldr	x8, [sp, #168]
   50ba0:	add	x27, x27, #0x1
   50ba4:	stur	x8, [x29, #-48]
   50ba8:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50bac:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50bb0:	add	x1, x1, #0xf1c
   50bb4:	b	50bc0 <print_arm_disassembler_options@@Base+0x3404>
   50bb8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50bbc:	add	x1, x1, #0xf12
   50bc0:	ldr	w2, [sp, #152]
   50bc4:	b	501ec <print_arm_disassembler_options@@Base+0x2a30>
   50bc8:	ldur	w2, [x29, #-64]
   50bcc:	cbnz	w2, 50450 <print_arm_disassembler_options@@Base+0x2c94>
   50bd0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50bd4:	add	x1, x1, #0x6d6
   50bd8:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50bdc:	ldr	w21, [sp, #72]
   50be0:	b	50bf0 <print_arm_disassembler_options@@Base+0x3434>
   50be4:	ldr	w21, [sp, #68]
   50be8:	b	50bf0 <print_arm_disassembler_options@@Base+0x3434>
   50bec:	ldr	w21, [sp, #80]
   50bf0:	ldur	x3, [x29, #-32]
   50bf4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50bf8:	add	x1, x1, #0xf63
   50bfc:	mov	x0, x24
   50c00:	mov	w2, w21
   50c04:	blr	x3
   50c08:	mov	w8, w21
   50c0c:	stur	x8, [x29, #-48]
   50c10:	add	x27, x27, #0x1
   50c14:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50c18:	ldur	x2, [x29, #-32]
   50c1c:	adrp	x1, 69000 <fields@@Base+0x101b4>
   50c20:	add	x1, x1, #0xe39
   50c24:	mov	x0, x24
   50c28:	blr	x2
   50c2c:	tbz	w19, #10, 50a9c <print_arm_disassembler_options@@Base+0x32e0>
   50c30:	ldur	x2, [x29, #-32]
   50c34:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50c38:	add	x1, x1, #0x817
   50c3c:	mov	x0, x24
   50c40:	blr	x2
   50c44:	tbz	w19, #9, 50aa0 <print_arm_disassembler_options@@Base+0x32e4>
   50c48:	ldur	x2, [x29, #-32]
   50c4c:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   50c50:	add	x1, x1, #0xfcf
   50c54:	mov	x0, x24
   50c58:	blr	x2
   50c5c:	tbnz	w19, #8, 50c68 <print_arm_disassembler_options@@Base+0x34ac>
   50c60:	add	x27, x27, #0x1
   50c64:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50c68:	adrp	x1, 69000 <fields@@Base+0x101b4>
   50c6c:	add	x1, x1, #0xde7
   50c70:	b	50a34 <print_arm_disassembler_options@@Base+0x3278>
   50c74:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50c78:	add	x1, x1, #0xf30
   50c7c:	b	50a60 <print_arm_disassembler_options@@Base+0x32a4>
   50c80:	ldr	x8, [sp, #56]
   50c84:	mov	w2, w8
   50c88:	ldur	x3, [x29, #-32]
   50c8c:	adrp	x1, 59000 <fields@@Base+0x1b4>
   50c90:	add	x1, x1, #0xb6b
   50c94:	mov	x0, x24
   50c98:	blr	x3
   50c9c:	adrp	x22, 86000 <aarch64_operands@@Base+0x1c38>
   50ca0:	add	x22, x22, #0xaf8
   50ca4:	add	x27, x27, #0x1
   50ca8:	b	501fc <print_arm_disassembler_options@@Base+0x2a40>
   50cac:	mov	w22, wzr
   50cb0:	b	50cb8 <print_arm_disassembler_options@@Base+0x34fc>
   50cb4:	mov	w22, #0x1                   	// #1
   50cb8:	ldr	x21, [sp, #56]
   50cbc:	b	50908 <print_arm_disassembler_options@@Base+0x314c>
   50cc0:	ldr	x21, [sp, #216]
   50cc4:	mov	w22, #0x1                   	// #1
   50cc8:	b	50908 <print_arm_disassembler_options@@Base+0x314c>
   50ccc:	ldur	x2, [x29, #-48]
   50cd0:	add	x8, x2, #0x10
   50cd4:	cmp	x8, #0x31
   50cd8:	b.cc	50cf0 <print_arm_disassembler_options@@Base+0x3534>  // b.lo, b.ul, b.last
   50cdc:	ldur	x3, [x29, #-32]
   50ce0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50ce4:	add	x1, x1, #0xbb
   50ce8:	mov	x0, x24
   50cec:	blr	x3
   50cf0:	ldur	w8, [x29, #-52]
   50cf4:	cbz	w8, 4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   50cf8:	ldur	x2, [x29, #-32]
   50cfc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   50d00:	add	x1, x1, #0x6b3
   50d04:	mov	x0, x24
   50d08:	add	sp, sp, #0x1f0
   50d0c:	ldp	x20, x19, [sp, #80]
   50d10:	ldp	x22, x21, [sp, #64]
   50d14:	ldp	x24, x23, [sp, #48]
   50d18:	ldp	x26, x25, [sp, #32]
   50d1c:	ldp	x28, x27, [sp, #16]
   50d20:	ldp	x29, x30, [sp], #96
   50d24:	br	x2
   50d28:	ldur	x3, [x29, #-32]
   50d2c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   50d30:	add	x1, x1, #0xc4
   50d34:	mov	x0, x24
   50d38:	mov	w2, w19
   50d3c:	add	sp, sp, #0x1f0
   50d40:	ldp	x20, x19, [sp, #80]
   50d44:	ldp	x22, x21, [sp, #64]
   50d48:	ldp	x24, x23, [sp, #48]
   50d4c:	ldp	x26, x25, [sp, #32]
   50d50:	ldp	x28, x27, [sp, #16]
   50d54:	ldp	x29, x30, [sp], #96
   50d58:	br	x3
   50d5c:	sub	x9, x18, #0x50
   50d60:	stur	x9, [x29, #-32]
   50d64:	ldr	x10, [sp, #32]
   50d68:	ldur	x11, [x29, #-160]
   50d6c:	tst	x19, #0x200000
   50d70:	cset	w9, eq  // eq = none
   50d74:	cmp	x10, #0x80, lsl #12
   50d78:	cset	w10, ne  // ne = any
   50d7c:	cmp	x11, #0x100, lsl #12
   50d80:	cset	w11, ne  // ne = any
   50d84:	and	w10, w11, w10
   50d88:	b	50da8 <print_arm_disassembler_options@@Base+0x35ec>
   50d8c:	sub	x9, x18, #0x50
   50d90:	tst	x19, #0x100000
   50d94:	stur	x9, [x29, #-32]
   50d98:	and	x9, x19, #0x180000
   50d9c:	cset	w10, eq  // eq = none
   50da0:	cmp	x9, #0x80, lsl #12
   50da4:	cset	w9, ne  // ne = any
   50da8:	and	w11, w9, w10
   50dac:	tst	w9, w10
   50db0:	mov	w9, #0x11                  	// #17
   50db4:	csel	w9, wzr, w9, ne  // ne = any
   50db8:	stur	x11, [x29, #-72]
   50dbc:	stur	w9, [x29, #-52]
   50dc0:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   50dc4:	sub	x9, x18, #0x50
   50dc8:	stur	x9, [x29, #-32]
   50dcc:	mov	w9, #0x10001000            	// #268439552
   50dd0:	and	x11, x19, x9
   50dd4:	cmp	x11, x9
   50dd8:	mov	w10, #0x10                  	// #16
   50ddc:	cset	w9, eq  // eq = none
   50de0:	stur	x9, [x29, #-72]
   50de4:	cinc	w9, w10, ne  // ne = any
   50de8:	stur	w9, [x29, #-52]
   50dec:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   50df0:	sub	x9, x18, #0x50
   50df4:	stur	x9, [x29, #-32]
   50df8:	ldr	x9, [sp, #72]
   50dfc:	mov	w10, #0x2                   	// #2
   50e00:	cmp	x9, #0x80, lsl #12
   50e04:	mov	w9, #0x11                  	// #17
   50e08:	cset	w11, eq  // eq = none
   50e0c:	b	52758 <print_arm_disassembler_options@@Base+0x4f9c>
   50e10:	sub	x9, x18, #0x50
   50e14:	tst	x19, #0x180000
   50e18:	stur	x9, [x29, #-32]
   50e1c:	b	52628 <print_arm_disassembler_options@@Base+0x4e6c>
   50e20:	sub	x9, x18, #0x50
   50e24:	stur	x9, [x29, #-32]
   50e28:	tst	x19, #0x100
   50e2c:	mov	w9, #0x11                  	// #17
   50e30:	mov	w10, #0x4                   	// #4
   50e34:	ubfx	x11, x19, #8, #1
   50e38:	b	52788 <print_arm_disassembler_options@@Base+0x4fcc>
   50e3c:	mov	w9, #0xc                   	// #12
   50e40:	stur	w9, [x29, #-36]
   50e44:	mov	w9, #0x11                  	// #17
   50e48:	mov	w3, wzr
   50e4c:	mov	w17, wzr
   50e50:	stur	w9, [x29, #-52]
   50e54:	sub	x9, x18, #0x50
   50e58:	stur	x9, [x29, #-32]
   50e5c:	mov	w9, w3
   50e60:	stur	w17, [x29, #-48]
   50e64:	stur	x9, [x29, #-72]
   50e68:	ldur	x27, [x29, #-64]
   50e6c:	ldur	x24, [x29, #-104]
   50e70:	ldur	x17, [x29, #-144]
   50e74:	lsr	x9, x19, #16
   50e78:	lsr	x12, x19, #21
   50e7c:	and	x14, x1, #0x70
   50e80:	stur	x9, [x29, #-208]
   50e84:	lsr	x9, x19, #5
   50e88:	and	x12, x12, #0x80
   50e8c:	orr	x14, x14, x8
   50e90:	and	w13, w17, #0xf
   50e94:	lsr	x3, x19, #10
   50e98:	tst	x9, #0x3
   50e9c:	orr	x26, x14, x12
   50ea0:	stur	w13, [x29, #-144]
   50ea4:	mov	w13, #0xff000000            	// #-16777216
   50ea8:	ubfx	x5, x19, #6, #2
   50eac:	and	w8, w3, #0x1c
   50eb0:	cset	w21, eq  // eq = none
   50eb4:	tst	w26, #0x80
   50eb8:	mov	w18, #0x3c000000            	// #1006632960
   50ebc:	mov	w1, #0x40000000            	// #1073741824
   50ec0:	mov	w15, #0xff0000              	// #16711680
   50ec4:	orr	w8, w5, w8
   50ec8:	csel	x5, xzr, x13, eq  // eq = none
   50ecc:	tst	w26, #0x40
   50ed0:	mov	w16, #0xff00                	// #65280
   50ed4:	csel	x18, x1, x18, eq  // eq = none
   50ed8:	csel	x1, xzr, x15, eq  // eq = none
   50edc:	tst	w26, #0x20
   50ee0:	mov	w0, #0xff                  	// #255
   50ee4:	orr	x1, x1, x5
   50ee8:	csel	x5, xzr, x16, eq  // eq = none
   50eec:	tst	w26, #0x10
   50ef0:	orr	x1, x1, x5
   50ef4:	csel	x5, xzr, x0, eq  // eq = none
   50ef8:	tst	w26, #0x8
   50efc:	csel	x13, xzr, x13, eq  // eq = none
   50f00:	tst	w26, #0x4
   50f04:	csel	x15, xzr, x15, eq  // eq = none
   50f08:	tst	w26, #0x2
   50f0c:	orr	x13, x15, x13
   50f10:	csel	x16, xzr, x16, eq  // eq = none
   50f14:	tst	w26, #0x1
   50f18:	mov	w4, #0x30                  	// #48
   50f1c:	mov	w25, #0x40                  	// #64
   50f20:	orr	x13, x13, x16
   50f24:	csel	x0, xzr, x0, eq  // eq = none
   50f28:	tst	x19, #0x80
   50f2c:	mov	w28, #0x20                  	// #32
   50f30:	adrp	x6, 58000 <xexit@@Base+0x1dd4>
   50f34:	adrp	x22, 62000 <fields@@Base+0x91b4>
   50f38:	orr	x13, x13, x0
   50f3c:	csel	w0, w25, w4, eq  // eq = none
   50f40:	cmp	w8, #0x0
   50f44:	add	x6, x6, #0x84f
   50f48:	add	x22, x22, #0xfc9
   50f4c:	csel	w8, w28, w8, eq  // eq = none
   50f50:	tst	x19, #0x800000
   50f54:	mov	w2, #0x60                  	// #96
   50f58:	mov	w7, #0x7                   	// #7
   50f5c:	stur	w8, [x29, #-168]
   50f60:	csel	x8, x22, x6, eq  // eq = none
   50f64:	tst	w9, #0x1
   50f68:	movk	w2, #0x40, lsl #16
   50f6c:	orr	x1, x1, x5
   50f70:	stur	x8, [x29, #-176]
   50f74:	csel	w8, w7, wzr, ne  // ne = any
   50f78:	stur	xzr, [x29, #-120]
   50f7c:	sub	x16, x2, #0x40
   50f80:	stur	w0, [x29, #-152]
   50f84:	str	w8, [sp, #104]
   50f88:	csel	x8, x1, xzr, ne  // ne = any
   50f8c:	str	x8, [sp, #96]
   50f90:	csel	x8, x13, x26, ne  // ne = any
   50f94:	tst	x19, x16
   50f98:	mov	w5, #0x1                   	// #1
   50f9c:	ubfx	x15, x9, #1, #1
   50fa0:	cset	w13, ne  // ne = any
   50fa4:	tst	x19, #0x20
   50fa8:	ubfx	x10, x19, #5, #2
   50fac:	lsr	x11, x19, #15
   50fb0:	str	x8, [sp, #88]
   50fb4:	csel	x8, x15, xzr, ne  // ne = any
   50fb8:	cinc	x15, x5, ne  // ne = any
   50fbc:	tst	x19, #0x400000
   50fc0:	csel	x8, x10, x8, ne  // ne = any
   50fc4:	mov	w10, #0x4                   	// #4
   50fc8:	and	x11, x11, #0x2
   50fcc:	csel	x10, x10, x15, ne  // ne = any
   50fd0:	bfxil	x11, x19, #21, #1
   50fd4:	madd	x8, x10, x11, x8
   50fd8:	stur	x8, [x29, #-184]
   50fdc:	ldp	x8, x10, [x29, #-136]
   50fe0:	lsl	w17, w17, #3
   50fe4:	mov	w15, #0x100                 	// #256
   50fe8:	lsr	x11, x19, #6
   50fec:	and	x0, x10, #0x2
   50ff0:	lsl	x10, x12, #24
   50ff4:	and	x12, x17, #0x8
   50ff8:	bfi	x10, x14, #19, #7
   50ffc:	lsl	x14, x15, x12
   51000:	add	x12, x12, #0x8
   51004:	and	x8, x8, #0x6
   51008:	lsl	x12, x26, x12
   5100c:	sub	x14, x14, #0x1
   51010:	mov	w1, #0x2                   	// #2
   51014:	orr	x12, x12, x14
   51018:	orr	x10, x10, x18
   5101c:	bfxil	x8, x19, #7, #1
   51020:	and	x15, x9, #0x2
   51024:	str	x12, [sp, #144]
   51028:	lsl	w12, w19, #1
   5102c:	str	x10, [sp, #72]
   51030:	and	x10, x11, #0x8
   51034:	and	x14, x19, x2
   51038:	bfxil	x0, x19, #7, #1
   5103c:	bfxil	x1, x19, #7, #1
   51040:	bfxil	x15, x19, #4, #1
   51044:	orr	w13, w13, w21
   51048:	sub	x8, x8, #0x2
   5104c:	and	x11, x11, #0x18
   51050:	str	x14, [sp, #232]
   51054:	str	x1, [sp, #216]
   51058:	and	x9, x12, #0x2
   5105c:	and	x12, x3, #0x4
   51060:	stur	x15, [x29, #-192]
   51064:	stur	w13, [x29, #-136]
   51068:	orr	x13, x0, #0x4
   5106c:	str	x8, [sp, #184]
   51070:	lsl	x8, x26, x10
   51074:	lsr	x16, x19, #7
   51078:	str	x13, [sp, #136]
   5107c:	bfxil	x9, x19, #7, #1
   51080:	orr	x13, x0, x12
   51084:	str	x8, [sp, #224]
   51088:	lsl	x8, x26, x11
   5108c:	and	x14, x16, #0x4
   51090:	str	x13, [sp, #128]
   51094:	str	x26, [sp, #80]
   51098:	stur	x8, [x29, #-200]
   5109c:	orr	x8, x9, x12
   510a0:	bfxil	x14, x19, #27, #2
   510a4:	str	x8, [sp, #120]
   510a8:	orr	x8, x9, #0x4
   510ac:	bfxil	x14, x19, #8, #1
   510b0:	str	x8, [sp, #112]
   510b4:	add	x8, x27, #0x1
   510b8:	str	x14, [sp, #192]
   510bc:	stur	x8, [x29, #-232]
   510c0:	add	x8, x27, #0x2
   510c4:	str	x8, [sp, #176]
   510c8:	add	x8, x27, #0x3
   510cc:	str	x8, [sp, #160]
   510d0:	ubfx	x8, x19, #7, #1
   510d4:	str	x8, [sp, #208]
   510d8:	ubfx	x8, x19, #7, #2
   510dc:	str	x8, [sp, #152]
   510e0:	ubfx	x8, x19, #8, #2
   510e4:	and	x30, x19, #0x7f
   510e8:	str	x8, [sp, #248]
   510ec:	ubfx	x8, x19, #16, #3
   510f0:	stur	x8, [x29, #-128]
   510f4:	lsl	x8, x30, #3
   510f8:	str	x8, [sp, #200]
   510fc:	ldur	x26, [x29, #-112]
   51100:	lsl	x8, x30, #2
   51104:	ubfx	x27, x19, #7, #3
   51108:	mov	w21, #0x2                   	// #2
   5110c:	mov	w25, #0xa                   	// #10
   51110:	stur	x8, [x29, #-224]
   51114:	lsl	x8, x30, #1
   51118:	adrp	x28, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   5111c:	adrp	x22, f2000 <aarch64_opcode_table@@Base+0x555d8>
   51120:	stur	x30, [x29, #-88]
   51124:	stur	x8, [x29, #-240]
   51128:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   5112c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   51130:	mov	x0, x24
   51134:	add	x1, x1, #0x20
   51138:	blr	x26
   5113c:	add	x23, x23, #0x1
   51140:	ldrb	w2, [x23]
   51144:	cmp	w2, #0x25
   51148:	b.eq	51168 <print_arm_disassembler_options@@Base+0x39ac>  // b.none
   5114c:	cbz	w2, 52130 <print_arm_disassembler_options@@Base+0x4974>
   51150:	adrp	x1, 69000 <fields@@Base+0x101b4>
   51154:	mov	x0, x24
   51158:	add	x1, x1, #0xde6
   5115c:	blr	x26
   51160:	add	x23, x23, #0x1
   51164:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51168:	ldrb	w9, [x23, #1]!
   5116c:	sub	w8, w9, #0x25
   51170:	cmp	w8, #0x52
   51174:	b.hi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.pmore
   51178:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5117c:	add	x12, x12, #0x660
   51180:	adr	x10, 51190 <print_arm_disassembler_options@@Base+0x39d4>
   51184:	ldrh	w11, [x12, x8, lsl #1]
   51188:	add	x10, x10, x11, lsl #2
   5118c:	br	x10
   51190:	mov	x2, xzr
   51194:	mov	w8, wzr
   51198:	sub	w10, w9, #0x30
   5119c:	and	w10, w10, #0xff
   511a0:	cmp	w10, #0x9
   511a4:	b.hi	511cc <print_arm_disassembler_options@@Base+0x3a10>  // b.pmore
   511a8:	mov	w10, wzr
   511ac:	mul	w10, w10, w25
   511b0:	add	w10, w10, w9, uxtb
   511b4:	ldrb	w9, [x23, #1]!
   511b8:	sub	w10, w10, #0x30
   511bc:	sub	w11, w9, #0x30
   511c0:	cmp	w11, #0xa
   511c4:	b.cc	511ac <print_arm_disassembler_options@@Base+0x39f0>  // b.lo, b.ul, b.last
   511c8:	b	511d0 <print_arm_disassembler_options@@Base+0x3a14>
   511cc:	mov	w10, wzr
   511d0:	and	w11, w9, #0xff
   511d4:	cmp	w11, #0x2d
   511d8:	b.ne	51210 <print_arm_disassembler_options@@Base+0x3a54>  // b.any
   511dc:	ldrb	w9, [x23, #1]!
   511e0:	sub	w11, w9, #0x30
   511e4:	cmp	w11, #0x9
   511e8:	b.hi	5126c <print_arm_disassembler_options@@Base+0x3ab0>  // b.pmore
   511ec:	mov	w11, wzr
   511f0:	mul	w11, w11, w25
   511f4:	add	w11, w11, w9, uxtb
   511f8:	ldrb	w9, [x23, #1]!
   511fc:	sub	w11, w11, #0x30
   51200:	sub	w12, w9, #0x30
   51204:	cmp	w12, #0xa
   51208:	b.cc	511f0 <print_arm_disassembler_options@@Base+0x3a34>  // b.lo, b.ul, b.last
   5120c:	b	51214 <print_arm_disassembler_options@@Base+0x3a58>
   51210:	mov	w11, w10
   51214:	subs	w11, w11, w10
   51218:	b.mi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.first
   5121c:	and	w9, w9, #0xff
   51220:	sub	w9, w9, #0x2c
   51224:	cmp	w9, #0x4c
   51228:	b.hi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.pmore
   5122c:	adrp	x15, 62000 <fields@@Base+0x91b4>
   51230:	lsl	x12, x21, x11
   51234:	add	x15, x15, #0x706
   51238:	lsr	x10, x19, x10
   5123c:	adr	x13, 5112c <print_arm_disassembler_options@@Base+0x3970>
   51240:	ldrh	w14, [x15, x9, lsl #1]
   51244:	add	x13, x13, x14, lsl #2
   51248:	sub	x9, x12, #0x1
   5124c:	and	x9, x9, x10
   51250:	add	w11, w8, w11
   51254:	lsl	x8, x9, x8
   51258:	orr	x2, x8, x2
   5125c:	add	w8, w11, #0x1
   51260:	br	x13
   51264:	ldrb	w9, [x23, #1]!
   51268:	b	51198 <print_arm_disassembler_options@@Base+0x39dc>
   5126c:	mov	w11, wzr
   51270:	subs	w11, w11, w10
   51274:	b.pl	5121c <print_arm_disassembler_options@@Base+0x3a60>  // b.nfrst
   51278:	b	5292c <print_arm_disassembler_options@@Base+0x5170>
   5127c:	ldur	x8, [x29, #-32]
   51280:	ldr	w8, [x8]
   51284:	sub	w9, w8, #0x36
   51288:	cmp	w9, #0x3
   5128c:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51290:	ldp	x8, x0, [x20]
   51294:	adrp	x12, 62000 <fields@@Base+0x91b4>
   51298:	add	x12, x12, #0x98c
   5129c:	adr	x10, 512ac <print_arm_disassembler_options@@Base+0x3af0>
   512a0:	ldrh	w11, [x12, x9, lsl #1]
   512a4:	add	x10, x10, x11, lsl #2
   512a8:	br	x10
   512ac:	ldr	x11, [sp, #192]
   512b0:	adrp	x12, 62000 <fields@@Base+0x91b4>
   512b4:	add	x12, x12, #0x9a0
   512b8:	adr	x9, 51ae8 <print_arm_disassembler_options@@Base+0x432c>
   512bc:	ldrb	w10, [x12, x11]
   512c0:	add	x9, x9, x10, lsl #2
   512c4:	br	x9
   512c8:	tbz	w19, #0, 5113c <print_arm_disassembler_options@@Base+0x3980>
   512cc:	ldur	x2, [x29, #-192]
   512d0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   512d4:	mov	x0, x24
   512d8:	add	x1, x1, #0xf74
   512dc:	blr	x26
   512e0:	add	x23, x23, #0x1
   512e4:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   512e8:	ldr	w8, [x28, #1056]
   512ec:	cbz	w8, 5113c <print_arm_disassembler_options@@Base+0x3980>
   512f0:	ubfx	x8, x8, #4, #4
   512f4:	b	51618 <print_arm_disassembler_options@@Base+0x3e5c>
   512f8:	ldur	w2, [x29, #-168]
   512fc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51300:	mov	x0, x24
   51304:	add	x1, x1, #0xf63
   51308:	blr	x26
   5130c:	add	x23, x23, #0x1
   51310:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51314:	ldur	w2, [x29, #-152]
   51318:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5131c:	mov	x0, x24
   51320:	add	x1, x1, #0xf63
   51324:	blr	x26
   51328:	add	x23, x23, #0x1
   5132c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51330:	ldur	x8, [x29, #-32]
   51334:	ldr	w8, [x8]
   51338:	sub	w9, w8, #0x20
   5133c:	cmp	w9, #0x9
   51340:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51344:	adrp	x12, 62000 <fields@@Base+0x91b4>
   51348:	add	x12, x12, #0x9dc
   5134c:	ldp	x8, x0, [x20]
   51350:	adr	x10, 51368 <print_arm_disassembler_options@@Base+0x3bac>
   51354:	ldrh	w11, [x12, x9, lsl #1]
   51358:	add	x10, x10, x11, lsl #2
   5135c:	ldur	x9, [x29, #-128]
   51360:	ldur	x4, [x29, #-88]
   51364:	br	x10
   51368:	ldur	x9, [x29, #-128]
   5136c:	b	51b48 <print_arm_disassembler_options@@Base+0x438c>
   51370:	ldur	x8, [x29, #-32]
   51374:	ldr	w8, [x8]
   51378:	sub	w9, w8, #0x1c
   5137c:	cmp	w9, #0x3
   51380:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51384:	ldp	x8, x0, [x20]
   51388:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5138c:	add	x12, x12, #0x984
   51390:	adr	x10, 513a0 <print_arm_disassembler_options@@Base+0x3be4>
   51394:	ldrh	w11, [x12, x9, lsl #1]
   51398:	add	x10, x10, x11, lsl #2
   5139c:	br	x10
   513a0:	ldur	x2, [x29, #-64]
   513a4:	cmp	x2, #0x6
   513a8:	b.hi	5194c <print_arm_disassembler_options@@Base+0x4190>  // b.pmore
   513ac:	ldur	x3, [x29, #-232]
   513b0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   513b4:	add	x1, x1, #0x42f
   513b8:	blr	x8
   513bc:	add	x23, x23, #0x1
   513c0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   513c4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   513c8:	mov	x0, x24
   513cc:	add	x1, x1, #0x28
   513d0:	blr	x26
   513d4:	add	x23, x23, #0x1
   513d8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   513dc:	mov	x0, x24
   513e0:	tbnz	w19, #12, 51838 <print_arm_disassembler_options@@Base+0x407c>
   513e4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   513e8:	add	x1, x1, #0x697
   513ec:	blr	x26
   513f0:	add	x23, x23, #0x1
   513f4:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   513f8:	ldur	x8, [x29, #-32]
   513fc:	ldr	w9, [x8]
   51400:	ldp	x8, x0, [x20]
   51404:	cmp	w9, #0x3a
   51408:	b.eq	51960 <print_arm_disassembler_options@@Base+0x41a4>  // b.none
   5140c:	cmp	w9, #0x39
   51410:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   51414:	ldr	x11, [sp, #248]
   51418:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5141c:	add	x12, x12, #0x9b8
   51420:	adr	x9, 51984 <print_arm_disassembler_options@@Base+0x41c8>
   51424:	ldrb	w10, [x12, x11]
   51428:	add	x9, x9, x10, lsl #2
   5142c:	br	x9
   51430:	ldur	w3, [x29, #-144]
   51434:	ldp	x21, x26, [x20]
   51438:	cmp	w3, #0x8
   5143c:	b.cs	5184c <print_arm_disassembler_options@@Base+0x4090>  // b.hs, b.nlast
   51440:	ldur	x24, [x29, #-200]
   51444:	mov	w8, wzr
   51448:	mov	x2, xzr
   5144c:	mov	w9, #0x3                   	// #3
   51450:	b	51864 <print_arm_disassembler_options@@Base+0x40a8>
   51454:	ldur	x8, [x29, #-64]
   51458:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   5145c:	add	x9, x9, #0x5d0
   51460:	b	51620 <print_arm_disassembler_options@@Base+0x3e64>
   51464:	tbnz	w19, #23, 5113c <print_arm_disassembler_options@@Base+0x3980>
   51468:	adrp	x1, 62000 <fields@@Base+0x91b4>
   5146c:	mov	x0, x24
   51470:	add	x1, x1, #0xfc9
   51474:	blr	x26
   51478:	add	x23, x23, #0x1
   5147c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51480:	ldur	x8, [x29, #-32]
   51484:	ldr	w8, [x8]
   51488:	sub	w9, w8, #0x1
   5148c:	cmp	w9, #0xf
   51490:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51494:	ldp	x8, x0, [x20]
   51498:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5149c:	add	x12, x12, #0x9bc
   514a0:	adr	x10, 514b0 <print_arm_disassembler_options@@Base+0x3cf4>
   514a4:	ldrh	w11, [x12, x9, lsl #1]
   514a8:	add	x10, x10, x11, lsl #2
   514ac:	br	x10
   514b0:	ldr	x9, [sp, #208]
   514b4:	b	51c40 <print_arm_disassembler_options@@Base+0x4484>
   514b8:	tbz	w19, #21, 5113c <print_arm_disassembler_options@@Base+0x3980>
   514bc:	adrp	x1, 6a000 <fields@@Base+0x111b4>
   514c0:	mov	x0, x24
   514c4:	add	x1, x1, #0x34f
   514c8:	blr	x26
   514cc:	add	x23, x23, #0x1
   514d0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   514d4:	ldur	x8, [x29, #-32]
   514d8:	ldr	w8, [x8]
   514dc:	cmp	w8, #0x41
   514e0:	b.ne	518c4 <print_arm_disassembler_options@@Base+0x4108>  // b.any
   514e4:	tbnz	w19, #23, 518e4 <print_arm_disassembler_options@@Base+0x4128>
   514e8:	ldr	x8, [sp, #232]
   514ec:	cbnz	x8, 518cc <print_arm_disassembler_options@@Base+0x4110>
   514f0:	b	5113c <print_arm_disassembler_options@@Base+0x3980>
   514f4:	ldp	x8, x0, [x20]
   514f8:	ldur	w9, [x29, #-136]
   514fc:	tbz	w9, #0, 518fc <print_arm_disassembler_options@@Base+0x4140>
   51500:	ldur	x2, [x29, #-184]
   51504:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   51508:	add	x1, x1, #0xa4
   5150c:	blr	x8
   51510:	add	x23, x23, #0x1
   51514:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51518:	tbz	w19, #12, 5113c <print_arm_disassembler_options@@Base+0x3980>
   5151c:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   51520:	mov	x0, x24
   51524:	add	x1, x1, #0xfcf
   51528:	blr	x26
   5152c:	add	x23, x23, #0x1
   51530:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51534:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   51538:	ldr	w9, [x8, #1072]
   5153c:	ldp	x8, x0, [x20]
   51540:	cmp	w9, #0x2
   51544:	b.eq	51998 <print_arm_disassembler_options@@Base+0x41dc>  // b.none
   51548:	cmp	w9, #0x1
   5154c:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   51550:	adrp	x1, 60000 <fields@@Base+0x71b4>
   51554:	add	x1, x1, #0x66b
   51558:	blr	x8
   5155c:	add	x23, x23, #0x1
   51560:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51564:	mov	w8, #0x40                  	// #64
   51568:	sub	x2, x8, x2
   5156c:	b	51a60 <print_arm_disassembler_options@@Base+0x42a4>
   51570:	adrp	x8, 8a000 <aarch64_operands@@Base+0x5c38>
   51574:	add	x8, x8, #0xf38
   51578:	ldr	x2, [x8, x2, lsl #3]
   5157c:	b	516b4 <print_arm_disassembler_options@@Base+0x3ef8>
   51580:	ldur	x8, [x29, #-32]
   51584:	ldr	w8, [x8]
   51588:	sub	w9, w8, #0x1
   5158c:	cmp	w9, #0xc0
   51590:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51594:	ldp	x8, x0, [x20]
   51598:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5159c:	add	x12, x12, #0x7b4
   515a0:	adr	x10, 5113c <print_arm_disassembler_options@@Base+0x3980>
   515a4:	ldrh	w11, [x12, x9, lsl #1]
   515a8:	add	x10, x10, x11, lsl #2
   515ac:	br	x10
   515b0:	cmp	x2, #0x3
   515b4:	b.hi	51bc0 <print_arm_disassembler_options@@Base+0x4404>  // b.pmore
   515b8:	adrp	x9, 98000 <aarch64_operands@@Base+0x13c38>
   515bc:	add	x9, x9, #0x280
   515c0:	ldr	x2, [x9, x2, lsl #3]
   515c4:	b	51c4c <print_arm_disassembler_options@@Base+0x4490>
   515c8:	ldr	w8, [x22, #1560]
   515cc:	lsl	w9, w2, #1
   515d0:	adrp	x11, 86000 <aarch64_operands@@Base+0x1c38>
   515d4:	mov	w10, #0x8                   	// #8
   515d8:	lsr	x9, x9, #1
   515dc:	add	x11, x11, #0xaf8
   515e0:	mov	w12, #0x90                  	// #144
   515e4:	madd	x8, x8, x12, x11
   515e8:	bfi	x10, x9, #4, #31
   515ec:	add	x8, x8, x10
   515f0:	b	516b0 <print_arm_disassembler_options@@Base+0x3ef4>
   515f4:	ldr	w8, [x22, #1560]
   515f8:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   515fc:	add	x10, x10, #0xaf8
   51600:	mov	w11, #0x90                  	// #144
   51604:	lsl	w9, w2, #1
   51608:	madd	x8, x8, x11, x10
   5160c:	add	x8, x8, w9, uxtw #3
   51610:	b	516b0 <print_arm_disassembler_options@@Base+0x3ef4>
   51614:	eor	x8, x2, #0x1
   51618:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   5161c:	add	x9, x9, #0xf38
   51620:	ldr	x2, [x9, x8, lsl #3]
   51624:	b	516b4 <print_arm_disassembler_options@@Base+0x3ef8>
   51628:	cmp	x2, #0x1
   5162c:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   51630:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   51634:	mov	x0, x24
   51638:	add	x1, x1, #0x826
   5163c:	blr	x26
   51640:	add	x23, x23, #0x1
   51644:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51648:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5164c:	mov	x0, x24
   51650:	add	x1, x1, #0xfd4
   51654:	blr	x26
   51658:	add	x23, x23, #0x1
   5165c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51660:	orr	x8, x2, #0x2
   51664:	cmp	x8, #0xf
   51668:	b.ne	51698 <print_arm_disassembler_options@@Base+0x3edc>  // b.any
   5166c:	b	51910 <print_arm_disassembler_options@@Base+0x4154>
   51670:	cmp	x2, #0xd
   51674:	b.eq	51910 <print_arm_disassembler_options@@Base+0x4154>  // b.none
   51678:	cmp	x2, #0xf
   5167c:	b.ne	51698 <print_arm_disassembler_options@@Base+0x3edc>  // b.any
   51680:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   51684:	mov	x0, x24
   51688:	add	x1, x1, #0x87c
   5168c:	blr	x26
   51690:	add	x23, x23, #0x1
   51694:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51698:	ldr	w8, [x22, #1560]
   5169c:	adrp	x9, 86000 <aarch64_operands@@Base+0x1c38>
   516a0:	add	x9, x9, #0xaf8
   516a4:	mov	w10, #0x90                  	// #144
   516a8:	madd	x8, x8, x10, x9
   516ac:	add	x8, x8, x2, lsl #3
   516b0:	ldr	x2, [x8, #16]
   516b4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   516b8:	mov	x0, x24
   516bc:	add	x1, x1, #0x816
   516c0:	blr	x26
   516c4:	add	x23, x23, #0x1
   516c8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   516cc:	cmp	x2, #0x1
   516d0:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   516d4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   516d8:	mov	x0, x24
   516dc:	add	x1, x1, #0xbcb
   516e0:	blr	x26
   516e4:	add	x23, x23, #0x1
   516e8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   516ec:	mov	x0, x24
   516f0:	tbnz	w2, #3, 519ac <print_arm_disassembler_options@@Base+0x41f0>
   516f4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   516f8:	add	x1, x1, #0x1cf
   516fc:	blr	x26
   51700:	add	x23, x23, #0x1
   51704:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51708:	ldur	x8, [x29, #-32]
   5170c:	ldr	w8, [x8]
   51710:	sub	w9, w8, #0x77
   51714:	cmp	w9, #0x12
   51718:	b.hi	51e48 <print_arm_disassembler_options@@Base+0x468c>  // b.pmore
   5171c:	mov	w10, #0x1                   	// #1
   51720:	mov	w11, #0xa383                	// #41859
   51724:	lsl	w10, w10, w9
   51728:	movk	w11, #0x7, lsl #16
   5172c:	tst	w10, w11
   51730:	b.eq	51d58 <print_arm_disassembler_options@@Base+0x459c>  // b.none
   51734:	mov	w10, #0x2203                	// #8707
   51738:	ldur	x12, [x29, #-208]
   5173c:	ldp	x21, x24, [x20]
   51740:	cmp	w9, #0x12
   51744:	movk	w10, #0x2, lsl #16
   51748:	lsr	w10, w10, w9
   5174c:	cset	w11, cc  // cc = lo, ul, last
   51750:	cmp	w8, #0x84
   51754:	mov	w8, #0x3f                  	// #63
   51758:	mov	w9, #0x1f                  	// #31
   5175c:	csel	w8, w9, w8, eq  // eq = none
   51760:	and	w9, w8, w12
   51764:	and	w8, w10, w11
   51768:	tbnz	w9, #5, 51a50 <print_arm_disassembler_options@@Base+0x4294>
   5176c:	tbnz	w12, #4, 51c60 <print_arm_disassembler_options@@Base+0x44a4>
   51770:	tbnz	w12, #3, 51e10 <print_arm_disassembler_options@@Base+0x4654>
   51774:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51778:	mov	x0, x24
   5177c:	add	x1, x1, #0x4b2
   51780:	blr	x21
   51784:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51788:	mov	x0, x24
   5178c:	add	x1, x1, #0x4d9
   51790:	blr	x21
   51794:	mov	w2, wzr
   51798:	b	51c74 <print_arm_disassembler_options@@Base+0x44b8>
   5179c:	ldur	x8, [x29, #-32]
   517a0:	ldur	x2, [x29, #-88]
   517a4:	ldr	w8, [x8]
   517a8:	sub	w8, w8, #0x2e
   517ac:	cmp	w8, #0x7
   517b0:	b.hi	51a60 <print_arm_disassembler_options@@Base+0x42a4>  // b.pmore
   517b4:	adrp	x11, 62000 <fields@@Base+0x91b4>
   517b8:	add	x11, x11, #0x7ac
   517bc:	adr	x9, 517d0 <print_arm_disassembler_options@@Base+0x4014>
   517c0:	ldrb	w10, [x11, x8]
   517c4:	add	x9, x9, x10, lsl #2
   517c8:	ldur	x2, [x29, #-88]
   517cc:	br	x9
   517d0:	ldur	x2, [x29, #-224]
   517d4:	b	51a60 <print_arm_disassembler_options@@Base+0x42a4>
   517d8:	ldp	x9, x0, [x20]
   517dc:	sxtw	x8, w8
   517e0:	cmp	x8, #0x2
   517e4:	b.eq	51afc <print_arm_disassembler_options@@Base+0x4340>  // b.none
   517e8:	cmp	x8, #0x1
   517ec:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   517f0:	cmp	x2, #0x1
   517f4:	b.eq	51cec <print_arm_disassembler_options@@Base+0x4530>  // b.none
   517f8:	cbz	x2, 51cd8 <print_arm_disassembler_options@@Base+0x451c>
   517fc:	b	5113c <print_arm_disassembler_options@@Base+0x3980>
   51800:	cmp	x2, #0x3
   51804:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51808:	adrp	x10, 62000 <fields@@Base+0x91b4>
   5180c:	add	x10, x10, #0x7a4
   51810:	adr	x8, 51820 <print_arm_disassembler_options@@Base+0x4064>
   51814:	ldrh	w9, [x10, x2, lsl #1]
   51818:	add	x8, x8, x9, lsl #2
   5181c:	br	x8
   51820:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51824:	mov	x0, x24
   51828:	add	x1, x1, #0x680
   5182c:	blr	x26
   51830:	add	x23, x23, #0x1
   51834:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51838:	adrp	x1, 60000 <fields@@Base+0x71b4>
   5183c:	add	x1, x1, #0x66b
   51840:	blr	x26
   51844:	add	x23, x23, #0x1
   51848:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   5184c:	cmp	w3, #0xc
   51850:	b.cs	519c0 <print_arm_disassembler_options@@Base+0x4204>  // b.hs, b.nlast
   51854:	ldr	x24, [sp, #224]
   51858:	mov	w8, wzr
   5185c:	mov	x2, xzr
   51860:	mov	w9, #0x1                   	// #1
   51864:	ldur	x10, [x29, #-32]
   51868:	ldr	w10, [x10]
   5186c:	sub	w11, w10, #0x3d
   51870:	cmp	w11, #0xa
   51874:	mov	w10, wzr
   51878:	b.hi	51894 <print_arm_disassembler_options@@Base+0x40d8>  // b.pmore
   5187c:	mov	w12, #0x1                   	// #1
   51880:	lsl	w11, w12, w11
   51884:	mov	w12, #0x4a1                 	// #1185
   51888:	tst	w11, w12
   5188c:	b.eq	51894 <print_arm_disassembler_options@@Base+0x40d8>  // b.none
   51890:	mov	w10, #0x1                   	// #1
   51894:	cmp	w9, #0x7
   51898:	b.hi	5292c <print_arm_disassembler_options@@Base+0x5170>  // b.pmore
   5189c:	adrp	x13, 62000 <fields@@Base+0x91b4>
   518a0:	add	x13, x13, #0x974
   518a4:	adr	x11, 518b4 <print_arm_disassembler_options@@Base+0x40f8>
   518a8:	ldrh	w12, [x13, x9, lsl #1]
   518ac:	add	x11, x11, x12, lsl #2
   518b0:	br	x11
   518b4:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   518b8:	mov	x0, x26
   518bc:	add	x1, x1, #0x3fa
   518c0:	b	519fc <print_arm_disassembler_options@@Base+0x4240>
   518c4:	ldr	x8, [sp, #240]
   518c8:	cbnz	x8, 518e4 <print_arm_disassembler_options@@Base+0x4128>
   518cc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   518d0:	mov	x0, x24
   518d4:	add	x1, x1, #0x817
   518d8:	blr	x26
   518dc:	add	x23, x23, #0x1
   518e0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   518e4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   518e8:	mov	x0, x24
   518ec:	add	x1, x1, #0xf65
   518f0:	blr	x26
   518f4:	add	x23, x23, #0x1
   518f8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   518fc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51900:	add	x1, x1, #0x486
   51904:	blr	x8
   51908:	add	x23, x23, #0x1
   5190c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51910:	mov	w8, #0x1                   	// #1
   51914:	stur	w8, [x29, #-48]
   51918:	add	x23, x23, #0x1
   5191c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51920:	ldur	x2, [x29, #-64]
   51924:	cmp	x2, #0x4
   51928:	b.hi	5194c <print_arm_disassembler_options@@Base+0x4190>  // b.pmore
   5192c:	ldur	x3, [x29, #-232]
   51930:	ldr	x4, [sp, #176]
   51934:	ldr	x5, [sp, #160]
   51938:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5193c:	add	x1, x1, #0x44f
   51940:	blr	x8
   51944:	add	x23, x23, #0x1
   51948:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   5194c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51950:	add	x1, x1, #0x43c
   51954:	blr	x8
   51958:	add	x23, x23, #0x1
   5195c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51960:	cmp	x27, #0x7
   51964:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51968:	adrp	x12, 62000 <fields@@Base+0x91b4>
   5196c:	add	x12, x12, #0x9a8
   51970:	adr	x9, 5113c <print_arm_disassembler_options@@Base+0x3980>
   51974:	ldrh	w10, [x12, x27, lsl #1]
   51978:	add	x9, x9, x10, lsl #2
   5197c:	mov	x11, x27
   51980:	br	x9
   51984:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51988:	add	x1, x1, #0x8c0
   5198c:	blr	x8
   51990:	add	x23, x23, #0x1
   51994:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51998:	adrp	x1, 69000 <fields@@Base+0x101b4>
   5199c:	add	x1, x1, #0xd22
   519a0:	blr	x8
   519a4:	add	x23, x23, #0x1
   519a8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   519ac:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   519b0:	add	x1, x1, #0x1ba
   519b4:	blr	x26
   519b8:	add	x23, x23, #0x1
   519bc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   519c0:	cmp	w3, #0xe
   519c4:	b.cs	51c10 <print_arm_disassembler_options@@Base+0x4454>  // b.hs, b.nlast
   519c8:	ldr	x24, [sp, #144]
   519cc:	b	51444 <print_arm_disassembler_options@@Base+0x3c88>
   519d0:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   519d4:	mov	x0, x26
   519d8:	add	x1, x1, #0x437
   519dc:	b	51a00 <print_arm_disassembler_options@@Base+0x4244>
   519e0:	adrp	x8, 6e000 <fields@@Base+0x151b4>
   519e4:	adrp	x9, 66000 <fields@@Base+0xd1b4>
   519e8:	cmp	w10, #0x0
   519ec:	add	x8, x8, #0x468
   519f0:	add	x9, x9, #0x409
   519f4:	csel	x1, x9, x8, eq  // eq = none
   519f8:	mov	x0, x26
   519fc:	mov	x2, x24
   51a00:	mov	x3, x24
   51a04:	blr	x21
   51a08:	ldur	x26, [x29, #-112]
   51a0c:	b	51c84 <print_arm_disassembler_options@@Base+0x44c8>
   51a10:	cbz	w8, 51d00 <print_arm_disassembler_options@@Base+0x4544>
   51a14:	stur	w24, [x29, #-12]
   51a18:	adrp	x0, 9b000 <aarch64_operands@@Base+0x16c38>
   51a1c:	ldr	x0, [x0, #3864]
   51a20:	sub	x1, x29, #0xc
   51a24:	sub	x2, x29, #0x18
   51a28:	bl	35940 <floatformat_to_double@plt>
   51a2c:	ldur	d0, [x29, #-24]
   51a30:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   51a34:	mov	x0, x26
   51a38:	add	x1, x1, #0x418
   51a3c:	mov	x2, x24
   51a40:	blr	x21
   51a44:	b	51a08 <print_arm_disassembler_options@@Base+0x424c>
   51a48:	ldr	x9, [sp, #216]
   51a4c:	b	51c40 <print_arm_disassembler_options@@Base+0x4484>
   51a50:	sub	w10, w9, #0x20
   51a54:	mov	w11, #0x40                  	// #64
   51a58:	b	51c68 <print_arm_disassembler_options@@Base+0x44ac>
   51a5c:	ldr	x2, [sp, #200]
   51a60:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   51a64:	mov	x0, x24
   51a68:	add	x1, x1, #0xa4
   51a6c:	blr	x26
   51a70:	add	x23, x23, #0x1
   51a74:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51a78:	ldr	x9, [sp, #240]
   51a7c:	cbnz	x9, 51cc4 <print_arm_disassembler_options@@Base+0x4508>
   51a80:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51a84:	add	x1, x1, #0x41f
   51a88:	blr	x8
   51a8c:	add	x23, x23, #0x1
   51a90:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51a94:	ldr	x11, [sp, #184]
   51a98:	cmp	x11, #0x3
   51a9c:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51aa0:	adrp	x12, 62000 <fields@@Base+0x91b4>
   51aa4:	add	x12, x12, #0x994
   51aa8:	adr	x9, 51d30 <print_arm_disassembler_options@@Base+0x4574>
   51aac:	ldrb	w10, [x12, x11]
   51ab0:	add	x9, x9, x10, lsl #2
   51ab4:	br	x9
   51ab8:	ldur	x9, [x29, #-80]
   51abc:	cmp	x9, #0x2
   51ac0:	b.eq	51d8c <print_arm_disassembler_options@@Base+0x45d0>  // b.none
   51ac4:	cmp	x9, #0x1
   51ac8:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   51acc:	ldr	x11, [sp, #152]
   51ad0:	adrp	x12, 62000 <fields@@Base+0x91b4>
   51ad4:	add	x12, x12, #0x99c
   51ad8:	adr	x9, 51ae8 <print_arm_disassembler_options@@Base+0x432c>
   51adc:	ldrb	w10, [x12, x11]
   51ae0:	add	x9, x9, x10, lsl #2
   51ae4:	br	x9
   51ae8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51aec:	add	x1, x1, #0x3df
   51af0:	blr	x8
   51af4:	add	x23, x23, #0x1
   51af8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51afc:	cmp	x2, #0x3
   51b00:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51b04:	adrp	x11, 62000 <fields@@Base+0x91b4>
   51b08:	add	x11, x11, #0x7a0
   51b0c:	adr	x8, 51b1c <print_arm_disassembler_options@@Base+0x4360>
   51b10:	ldrb	w10, [x11, x2]
   51b14:	add	x8, x8, x10, lsl #2
   51b18:	br	x8
   51b1c:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   51b20:	add	x1, x1, #0x2b4
   51b24:	blr	x9
   51b28:	add	x23, x23, #0x1
   51b2c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51b30:	ldur	x9, [x29, #-96]
   51b34:	ldur	x4, [x29, #-224]
   51b38:	b	51b4c <print_arm_disassembler_options@@Base+0x4390>
   51b3c:	ldp	x9, x4, [x29, #-96]
   51b40:	b	51b4c <print_arm_disassembler_options@@Base+0x4390>
   51b44:	ldur	x9, [x29, #-96]
   51b48:	ldur	x4, [x29, #-240]
   51b4c:	tbnz	w19, #24, 51b7c <print_arm_disassembler_options@@Base+0x43c0>
   51b50:	tbz	w19, #21, 5113c <print_arm_disassembler_options@@Base+0x3980>
   51b54:	ldr	w10, [x22, #1560]
   51b58:	adrp	x11, 86000 <aarch64_operands@@Base+0x1c38>
   51b5c:	add	x11, x11, #0xaf8
   51b60:	mov	w12, #0x90                  	// #144
   51b64:	madd	x10, x10, x12, x11
   51b68:	add	x9, x10, x9, lsl #3
   51b6c:	ldr	x2, [x9, #16]
   51b70:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51b74:	add	x1, x1, #0x3b2
   51b78:	b	51bb0 <print_arm_disassembler_options@@Base+0x43f4>
   51b7c:	ldr	w10, [x22, #1560]
   51b80:	adrp	x11, 86000 <aarch64_operands@@Base+0x1c38>
   51b84:	add	x11, x11, #0xaf8
   51b88:	mov	w12, #0x90                  	// #144
   51b8c:	madd	x10, x10, x12, x11
   51b90:	add	x9, x10, x9, lsl #3
   51b94:	ldr	x2, [x9, #16]
   51b98:	tbnz	w19, #21, 51ba8 <print_arm_disassembler_options@@Base+0x43ec>
   51b9c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51ba0:	add	x1, x1, #0x397
   51ba4:	b	51bb0 <print_arm_disassembler_options@@Base+0x43f4>
   51ba8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51bac:	add	x1, x1, #0x3a4
   51bb0:	ldur	x3, [x29, #-176]
   51bb4:	blr	x8
   51bb8:	add	x23, x23, #0x1
   51bbc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51bc0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51bc4:	add	x1, x1, #0xf67
   51bc8:	blr	x8
   51bcc:	add	x23, x23, #0x1
   51bd0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51bd4:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   51bd8:	add	x1, x1, #0x826
   51bdc:	blr	x8
   51be0:	add	x23, x23, #0x1
   51be4:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51be8:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   51bec:	add	x1, x1, #0xb30
   51bf0:	blr	x8
   51bf4:	add	x23, x23, #0x1
   51bf8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51bfc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51c00:	add	x1, x1, #0x5e5
   51c04:	blr	x8
   51c08:	add	x23, x23, #0x1
   51c0c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51c10:	b.ne	51de4 <print_arm_disassembler_options@@Base+0x4628>  // b.any
   51c14:	ldr	w9, [sp, #104]
   51c18:	ldp	x24, x2, [sp, #88]
   51c1c:	mov	w8, wzr
   51c20:	b	51864 <print_arm_disassembler_options@@Base+0x40a8>
   51c24:	ldr	x9, [sp, #120]
   51c28:	b	51c40 <print_arm_disassembler_options@@Base+0x4484>
   51c2c:	ldr	x9, [sp, #128]
   51c30:	b	51c40 <print_arm_disassembler_options@@Base+0x4484>
   51c34:	ldr	x9, [sp, #136]
   51c38:	b	51c40 <print_arm_disassembler_options@@Base+0x4484>
   51c3c:	ldr	x9, [sp, #112]
   51c40:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   51c44:	add	x10, x10, #0x650
   51c48:	ldr	x2, [x10, x9, lsl #3]
   51c4c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51c50:	add	x1, x1, #0x816
   51c54:	blr	x8
   51c58:	add	x23, x23, #0x1
   51c5c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51c60:	sub	w10, w9, #0x10
   51c64:	mov	w11, #0x20                  	// #32
   51c68:	sub	w9, w11, w9
   51c6c:	cmp	w8, #0x0
   51c70:	csel	w2, w10, w9, ne  // ne = any
   51c74:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51c78:	mov	x0, x24
   51c7c:	add	x1, x1, #0xf64
   51c80:	blr	x21
   51c84:	ldur	x24, [x29, #-104]
   51c88:	mov	w21, #0x2                   	// #2
   51c8c:	add	x23, x23, #0x1
   51c90:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51c94:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   51c98:	mov	x0, x24
   51c9c:	add	x1, x1, #0x452
   51ca0:	blr	x26
   51ca4:	add	x23, x23, #0x1
   51ca8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51cac:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   51cb0:	mov	x0, x24
   51cb4:	add	x1, x1, #0x42e
   51cb8:	blr	x26
   51cbc:	add	x23, x23, #0x1
   51cc0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51cc4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51cc8:	add	x1, x1, #0x427
   51ccc:	blr	x8
   51cd0:	add	x23, x23, #0x1
   51cd4:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51cd8:	adrp	x1, 65000 <fields@@Base+0xc1b4>
   51cdc:	add	x1, x1, #0xd2c
   51ce0:	blr	x9
   51ce4:	add	x23, x23, #0x1
   51ce8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51cec:	adrp	x1, 5d000 <fields@@Base+0x41b4>
   51cf0:	add	x1, x1, #0x3de
   51cf4:	blr	x9
   51cf8:	add	x23, x23, #0x1
   51cfc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51d00:	adrp	x8, 66000 <fields@@Base+0xd1b4>
   51d04:	adrp	x9, 6e000 <fields@@Base+0x151b4>
   51d08:	cmp	w10, #0x0
   51d0c:	add	x8, x8, #0x428
   51d10:	add	x9, x9, #0x477
   51d14:	csel	x1, x9, x8, ne  // ne = any
   51d18:	mov	w8, #0xffffffff            	// #-1
   51d1c:	ccmp	w24, w8, #0x0, eq  // eq = none
   51d20:	orr	x8, x24, #0xffffffff00000000
   51d24:	csel	x2, x24, x8, gt
   51d28:	mov	x0, x26
   51d2c:	b	51a00 <print_arm_disassembler_options@@Base+0x4244>
   51d30:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51d34:	add	x1, x1, #0x3e7
   51d38:	blr	x8
   51d3c:	add	x23, x23, #0x1
   51d40:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51d44:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51d48:	add	x1, x1, #0x3f7
   51d4c:	blr	x8
   51d50:	add	x23, x23, #0x1
   51d54:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51d58:	cmp	w9, #0xe
   51d5c:	b.ne	51e48 <print_arm_disassembler_options@@Base+0x468c>  // b.any
   51d60:	cmp	x2, #0x10
   51d64:	b.eq	51f04 <print_arm_disassembler_options@@Base+0x4748>  // b.none
   51d68:	cmp	x2, #0x1
   51d6c:	b.eq	51f38 <print_arm_disassembler_options@@Base+0x477c>  // b.none
   51d70:	cbnz	x2, 52930 <print_arm_disassembler_options@@Base+0x5174>
   51d74:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   51d78:	mov	x0, x24
   51d7c:	add	x1, x1, #0x84c
   51d80:	blr	x26
   51d84:	add	x23, x23, #0x1
   51d88:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51d8c:	ldr	x11, [sp, #152]
   51d90:	adrp	x12, 62000 <fields@@Base+0x91b4>
   51d94:	add	x12, x12, #0x998
   51d98:	adr	x9, 51da8 <print_arm_disassembler_options@@Base+0x45ec>
   51d9c:	ldrb	w10, [x12, x11]
   51da0:	add	x9, x9, x10, lsl #2
   51da4:	br	x9
   51da8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51dac:	add	x1, x1, #0x3ff
   51db0:	blr	x8
   51db4:	add	x23, x23, #0x1
   51db8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51dbc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51dc0:	add	x1, x1, #0x417
   51dc4:	blr	x8
   51dc8:	add	x23, x23, #0x1
   51dcc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51dd0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51dd4:	add	x1, x1, #0x407
   51dd8:	blr	x8
   51ddc:	add	x23, x23, #0x1
   51de0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51de4:	ldr	x4, [sp, #16]
   51de8:	cbz	w4, 51ec0 <print_arm_disassembler_options@@Base+0x4704>
   51dec:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   51df0:	mov	x0, x26
   51df4:	add	x1, x1, #0x3dc
   51df8:	ldr	x2, [sp, #80]
   51dfc:	blr	x21
   51e00:	ldur	x26, [x29, #-112]
   51e04:	mov	w21, #0x2                   	// #2
   51e08:	add	x23, x23, #0x1
   51e0c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51e10:	mov	w11, #0x10                  	// #16
   51e14:	sub	w10, w9, #0x8
   51e18:	sub	w9, w11, w9
   51e1c:	b	51c6c <print_arm_disassembler_options@@Base+0x44b0>
   51e20:	adrp	x1, 6f000 <fields@@Base+0x161b4>
   51e24:	add	x1, x1, #0xfcf
   51e28:	blr	x8
   51e2c:	add	x23, x23, #0x1
   51e30:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51e34:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   51e38:	add	x1, x1, #0x66b
   51e3c:	blr	x8
   51e40:	add	x23, x23, #0x1
   51e44:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51e48:	cmp	w8, #0x83
   51e4c:	ccmp	x2, #0x0, #0x0, eq  // eq = none
   51e50:	mov	w8, #0x20                  	// #32
   51e54:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   51e58:	csel	x2, x8, x2, eq  // eq = none
   51e5c:	mov	x0, x24
   51e60:	add	x1, x1, #0x858
   51e64:	stur	x2, [x29, #-120]
   51e68:	blr	x26
   51e6c:	add	x23, x23, #0x1
   51e70:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51e74:	cmp	x2, #0x1
   51e78:	b.eq	52084 <print_arm_disassembler_options@@Base+0x48c8>  // b.none
   51e7c:	cbz	x2, 52098 <print_arm_disassembler_options@@Base+0x48dc>
   51e80:	b	5113c <print_arm_disassembler_options@@Base+0x3980>
   51e84:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51e88:	add	x1, x1, #0x3ef
   51e8c:	blr	x8
   51e90:	add	x23, x23, #0x1
   51e94:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51e98:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51e9c:	add	x1, x1, #0x40f
   51ea0:	blr	x8
   51ea4:	add	x23, x23, #0x1
   51ea8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51eac:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51eb0:	add	x1, x1, #0x4ae
   51eb4:	blr	x9
   51eb8:	add	x23, x23, #0x1
   51ebc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51ec0:	ldr	x24, [sp, #72]
   51ec4:	mov	x2, xzr
   51ec8:	mov	w8, #0x1                   	// #1
   51ecc:	b	5144c <print_arm_disassembler_options@@Base+0x3c90>
   51ed0:	sub	x9, x2, #0x4
   51ed4:	cmp	x9, #0x4
   51ed8:	b.cc	52084 <print_arm_disassembler_options@@Base+0x48c8>  // b.lo, b.ul, b.last
   51edc:	sub	x9, x2, #0x2
   51ee0:	cmp	x9, #0x2
   51ee4:	b.cc	52098 <print_arm_disassembler_options@@Base+0x48dc>  // b.lo, b.ul, b.last
   51ee8:	b	52020 <print_arm_disassembler_options@@Base+0x4864>
   51eec:	sub	x9, x2, #0x2
   51ef0:	cmp	x9, #0x2
   51ef4:	b.cc	52084 <print_arm_disassembler_options@@Base+0x48c8>  // b.lo, b.ul, b.last
   51ef8:	cmp	x2, #0x1
   51efc:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   51f00:	b	52098 <print_arm_disassembler_options@@Base+0x48dc>
   51f04:	ldp	x21, x24, [x20]
   51f08:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51f0c:	add	x1, x1, #0x4b2
   51f10:	mov	x0, x24
   51f14:	blr	x21
   51f18:	mov	x0, x24
   51f1c:	ldur	x24, [x29, #-104]
   51f20:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   51f24:	add	x1, x1, #0x4d9
   51f28:	blr	x21
   51f2c:	mov	w21, #0x2                   	// #2
   51f30:	add	x23, x23, #0x1
   51f34:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51f38:	adrp	x1, 59000 <fields@@Base+0x1b4>
   51f3c:	mov	x0, x24
   51f40:	add	x1, x1, #0x50b
   51f44:	blr	x26
   51f48:	add	x23, x23, #0x1
   51f4c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   51f50:	cmp	x2, #0xb
   51f54:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51f58:	mov	w9, #0x1                   	// #1
   51f5c:	lsl	x9, x9, x2
   51f60:	mov	w10, #0xaa                  	// #170
   51f64:	tst	x9, x10
   51f68:	b.ne	52084 <print_arm_disassembler_options@@Base+0x48c8>  // b.any
   51f6c:	mov	w9, #0x1                   	// #1
   51f70:	lsl	x9, x9, x2
   51f74:	mov	w10, #0xa00                 	// #2560
   51f78:	tst	x9, x10
   51f7c:	b.ne	52098 <print_arm_disassembler_options@@Base+0x48dc>  // b.any
   51f80:	b	5113c <print_arm_disassembler_options@@Base+0x3980>
   51f84:	cmp	x2, #0xf
   51f88:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51f8c:	mov	w9, #0x1                   	// #1
   51f90:	lsl	x9, x9, x2
   51f94:	tst	x9, #0xff00
   51f98:	b.ne	52028 <print_arm_disassembler_options@@Base+0x486c>  // b.any
   51f9c:	mov	w9, #0x1                   	// #1
   51fa0:	lsl	x9, x9, x2
   51fa4:	mov	w10, #0xaa                  	// #170
   51fa8:	tst	x9, x10
   51fac:	b.ne	52098 <print_arm_disassembler_options@@Base+0x48dc>  // b.any
   51fb0:	mov	w9, #0x1                   	// #1
   51fb4:	lsl	x9, x9, x2
   51fb8:	mov	w10, #0x11                  	// #17
   51fbc:	tst	x9, x10
   51fc0:	b.eq	5200c <print_arm_disassembler_options@@Base+0x4850>  // b.none
   51fc4:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   51fc8:	add	x1, x1, #0x29c
   51fcc:	b	52008 <print_arm_disassembler_options@@Base+0x484c>
   51fd0:	cmp	x2, #0xd
   51fd4:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   51fd8:	mov	w9, #0x1                   	// #1
   51fdc:	lsl	x9, x9, x2
   51fe0:	mov	w10, #0x3055                	// #12373
   51fe4:	tst	x9, x10
   51fe8:	b.ne	52084 <print_arm_disassembler_options@@Base+0x48c8>  // b.any
   51fec:	mov	w9, #0x1                   	// #1
   51ff0:	lsl	x9, x9, x2
   51ff4:	mov	w10, #0x500                 	// #1280
   51ff8:	tst	x9, x10
   51ffc:	b.eq	5200c <print_arm_disassembler_options@@Base+0x4850>  // b.none
   52000:	adrp	x1, 59000 <fields@@Base+0x1b4>
   52004:	add	x1, x1, #0x50b
   52008:	blr	x8
   5200c:	adrp	x22, f2000 <aarch64_opcode_table@@Base+0x555d8>
   52010:	adrp	x28, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52014:	b	51a08 <print_arm_disassembler_options@@Base+0x424c>
   52018:	cmp	x2, #0x2
   5201c:	b.eq	52098 <print_arm_disassembler_options@@Base+0x48dc>  // b.none
   52020:	cmp	x2, #0x1
   52024:	b.ne	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.any
   52028:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   5202c:	add	x1, x1, #0x84c
   52030:	blr	x8
   52034:	add	x23, x23, #0x1
   52038:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   5203c:	cmp	x2, #0x1e
   52040:	b.hi	5113c <print_arm_disassembler_options@@Base+0x3980>  // b.pmore
   52044:	adrp	x11, 62000 <fields@@Base+0x91b4>
   52048:	add	x11, x11, #0x936
   5204c:	adr	x9, 5113c <print_arm_disassembler_options@@Base+0x3980>
   52050:	ldrh	w10, [x11, x2, lsl #1]
   52054:	add	x9, x9, x10, lsl #2
   52058:	br	x9
   5205c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52060:	add	x1, x1, #0x498
   52064:	blr	x8
   52068:	add	x23, x23, #0x1
   5206c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   52070:	cmp	x2, #0x2
   52074:	b.eq	52028 <print_arm_disassembler_options@@Base+0x486c>  // b.none
   52078:	cmp	x2, #0x1
   5207c:	b.eq	52098 <print_arm_disassembler_options@@Base+0x48dc>  // b.none
   52080:	cbnz	x2, 5113c <print_arm_disassembler_options@@Base+0x3980>
   52084:	adrp	x1, 58000 <xexit@@Base+0x1dd4>
   52088:	add	x1, x1, #0x29c
   5208c:	blr	x8
   52090:	add	x23, x23, #0x1
   52094:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   52098:	adrp	x1, 59000 <fields@@Base+0x1b4>
   5209c:	add	x1, x1, #0x50b
   520a0:	blr	x8
   520a4:	add	x23, x23, #0x1
   520a8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   520ac:	cmp	x2, #0x1
   520b0:	b.eq	520cc <print_arm_disassembler_options@@Base+0x4910>  // b.none
   520b4:	cbnz	x2, 5113c <print_arm_disassembler_options@@Base+0x3980>
   520b8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   520bc:	add	x1, x1, #0x4a7
   520c0:	blr	x8
   520c4:	add	x23, x23, #0x1
   520c8:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   520cc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   520d0:	add	x1, x1, #0x4aa
   520d4:	blr	x8
   520d8:	add	x23, x23, #0x1
   520dc:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   520e0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   520e4:	add	x1, x1, #0x49c
   520e8:	blr	x8
   520ec:	add	x23, x23, #0x1
   520f0:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   520f4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   520f8:	add	x1, x1, #0x4a0
   520fc:	blr	x8
   52100:	add	x23, x23, #0x1
   52104:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   52108:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5210c:	add	x1, x1, #0x4a3
   52110:	blr	x8
   52114:	add	x23, x23, #0x1
   52118:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   5211c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52120:	add	x1, x1, #0x40b
   52124:	blr	x8
   52128:	add	x23, x23, #0x1
   5212c:	b	51140 <print_arm_disassembler_options@@Base+0x3984>
   52130:	ldur	x2, [x29, #-120]
   52134:	add	x8, x2, #0x10
   52138:	cmp	x8, #0x31
   5213c:	b.cc	52150 <print_arm_disassembler_options@@Base+0x4994>  // b.lo, b.ul, b.last
   52140:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   52144:	add	x1, x1, #0xbb
   52148:	mov	x0, x24
   5214c:	blr	x26
   52150:	ldur	w23, [x29, #-36]
   52154:	ldp	w24, w8, [x29, #-52]
   52158:	cbz	w8, 52224 <print_arm_disassembler_options@@Base+0x4a68>
   5215c:	ldp	x21, x22, [x20]
   52160:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52164:	adrp	x2, 6b000 <fields@@Base+0x121b4>
   52168:	add	x1, x1, #0x63d
   5216c:	add	x2, x2, #0x6b3
   52170:	mov	x0, x22
   52174:	blr	x21
   52178:	cmp	w23, #0xb
   5217c:	b.hi	52224 <print_arm_disassembler_options@@Base+0x4a68>  // b.pmore
   52180:	adrp	x9, 62000 <fields@@Base+0x91b4>
   52184:	mov	w8, w23
   52188:	add	x9, x9, #0x9f0
   5218c:	adr	x10, 5219c <print_arm_disassembler_options@@Base+0x49e0>
   52190:	ldrb	w11, [x9, x8]
   52194:	add	x10, x10, x11, lsl #2
   52198:	br	x10
   5219c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521a0:	add	x1, x1, #0x776
   521a4:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521a8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521ac:	add	x1, x1, #0x6a2
   521b0:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521b4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521b8:	add	x1, x1, #0x741
   521bc:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521c0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521c4:	add	x1, x1, #0x682
   521c8:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521cc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521d0:	add	x1, x1, #0x642
   521d4:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521d8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521dc:	add	x1, x1, #0x65e
   521e0:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521e4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521e8:	add	x1, x1, #0x692
   521ec:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521f0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   521f4:	add	x1, x1, #0x6f0
   521f8:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   521fc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52200:	add	x1, x1, #0x6bc
   52204:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   52208:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5220c:	add	x1, x1, #0x6d6
   52210:	b	5221c <print_arm_disassembler_options@@Base+0x4a60>
   52214:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52218:	add	x1, x1, #0x72c
   5221c:	mov	x0, x22
   52220:	blr	x21
   52224:	ldur	x8, [x29, #-72]
   52228:	cbz	w8, 52334 <print_arm_disassembler_options@@Base+0x4b78>
   5222c:	ldp	x20, x22, [x20]
   52230:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52234:	add	x1, x1, #0x4b2
   52238:	mov	x0, x22
   5223c:	blr	x20
   52240:	cmp	w24, #0x10
   52244:	b.hi	52334 <print_arm_disassembler_options@@Base+0x4b78>  // b.pmore
   52248:	adrp	x9, 62000 <fields@@Base+0x91b4>
   5224c:	mov	w8, w24
   52250:	add	x9, x9, #0x9fc
   52254:	adr	x10, 52264 <print_arm_disassembler_options@@Base+0x4aa8>
   52258:	ldrb	w11, [x9, x8]
   5225c:	add	x10, x10, x11, lsl #2
   52260:	br	x10
   52264:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52268:	add	x1, x1, #0x4cc
   5226c:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52270:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52274:	add	x1, x1, #0x61e
   52278:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   5227c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52280:	add	x1, x1, #0x5d8
   52284:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52288:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5228c:	add	x1, x1, #0x5a4
   52290:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52294:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52298:	add	x1, x1, #0x50c
   5229c:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522a0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522a4:	add	x1, x1, #0x56f
   522a8:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522ac:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522b0:	add	x1, x1, #0x598
   522b4:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522b8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522bc:	add	x1, x1, #0x4d9
   522c0:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522c4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522c8:	add	x1, x1, #0x4ea
   522cc:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522d0:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522d4:	add	x1, x1, #0x4fa
   522d8:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522dc:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522e0:	add	x1, x1, #0x53e
   522e4:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522e8:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522ec:	add	x1, x1, #0x5ff
   522f0:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   522f4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   522f8:	add	x1, x1, #0x516
   522fc:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52300:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52304:	add	x1, x1, #0x52a
   52308:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   5230c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52310:	add	x1, x1, #0x552
   52314:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52318:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5231c:	add	x1, x1, #0x58b
   52320:	b	5232c <print_arm_disassembler_options@@Base+0x4b70>
   52324:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   52328:	add	x1, x1, #0x5b1
   5232c:	mov	x0, x22
   52330:	blr	x20
   52334:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52338:	ldrb	w9, [x8, #1064]
   5233c:	mov	w10, #0xe000                	// #57344
   52340:	movk	w10, #0x40, lsl #16
   52344:	tst	x19, x10
   52348:	b.eq	524a4 <print_arm_disassembler_options@@Base+0x4ce8>  // b.none
   5234c:	tbnz	w9, #0, 524a4 <print_arm_disassembler_options@@Base+0x4ce8>
   52350:	ldr	w10, [x28, #1056]
   52354:	cbnz	w10, 524a4 <print_arm_disassembler_options@@Base+0x4ce8>
   52358:	mov	w10, #0xf50                 	// #3920
   5235c:	movk	w10, #0xefb1, lsl #16
   52360:	mov	w11, #0xf00                 	// #3840
   52364:	movk	w11, #0xee31, lsl #16
   52368:	and	x12, x19, x10
   5236c:	orr	x13, x11, #0x40
   52370:	cmp	x12, x11
   52374:	ldur	x11, [x29, #-216]
   52378:	cset	w10, eq  // eq = none
   5237c:	cmp	x11, #0x1
   52380:	cset	w11, ne  // ne = any
   52384:	cmp	x12, x13
   52388:	b.eq	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.none
   5238c:	and	w10, w11, w10
   52390:	tbnz	w10, #0, 52404 <print_arm_disassembler_options@@Base+0x4c48>
   52394:	mov	w10, #0x1f51                	// #8017
   52398:	movk	w10, #0xff81, lsl #16
   5239c:	mov	w12, #0xf00                 	// #3840
   523a0:	and	w11, w19, w10
   523a4:	movk	w12, #0xfe01, lsl #16
   523a8:	cmp	w11, w12
   523ac:	b.eq	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.none
   523b0:	mov	w12, #0xf01                 	// #3841
   523b4:	movk	w12, #0xfe01, lsl #16
   523b8:	cmp	w11, w12
   523bc:	b.ne	523cc <print_arm_disassembler_options@@Base+0x4c10>  // b.any
   523c0:	ldur	x11, [x29, #-160]
   523c4:	cmp	x11, #0x300, lsl #12
   523c8:	b.ne	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.any
   523cc:	mov	w12, #0x1f50                	// #8016
   523d0:	mov	w11, #0x1f00                	// #7936
   523d4:	movk	w12, #0xff81, lsl #16
   523d8:	movk	w11, #0xfe01, lsl #16
   523dc:	and	x12, x19, x12
   523e0:	cmp	x12, x11
   523e4:	b.eq	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.none
   523e8:	add	w10, w10, #0x1f
   523ec:	and	w10, w19, w10
   523f0:	mov	w13, #0xf60                 	// #3936
   523f4:	orr	w10, w10, #0x20
   523f8:	movk	w13, #0xfe01, lsl #16
   523fc:	cmp	w10, w13
   52400:	b.ne	5247c <print_arm_disassembler_options@@Base+0x4cc0>  // b.any
   52404:	ldur	x12, [x29, #-64]
   52408:	mov	w9, #0x1                   	// #1
   5240c:	adrp	x10, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52410:	adrp	x11, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52414:	cmp	x12, #0x8
   52418:	strb	w9, [x8, #1064]
   5241c:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52420:	str	w9, [x8, #1072]
   52424:	str	x12, [x10, #1080]
   52428:	str	xzr, [x11, #1088]
   5242c:	b.eq	52458 <print_arm_disassembler_options@@Base+0x4c9c>  // b.none
   52430:	cbz	x12, 52950 <print_arm_disassembler_options@@Base+0x5194>
   52434:	ldr	x8, [sp, #168]
   52438:	cmp	x8, #0x4
   5243c:	b.ne	52448 <print_arm_disassembler_options@@Base+0x4c8c>  // b.any
   52440:	mov	w9, #0x2                   	// #2
   52444:	b	52458 <print_arm_disassembler_options@@Base+0x4c9c>
   52448:	and	x8, x19, #0x6000
   5244c:	cmp	x8, #0x4, lsl #12
   52450:	b.ne	52464 <print_arm_disassembler_options@@Base+0x4ca8>  // b.any
   52454:	mov	w9, #0x3                   	// #3
   52458:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   5245c:	str	x9, [x8, #1096]
   52460:	b	4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   52464:	lsr	x8, x19, #11
   52468:	and	x9, x8, #0x4
   5246c:	adrp	x10, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52470:	str	x9, [x10, #1096]
   52474:	tbnz	w8, #2, 4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   52478:	b	52958 <print_arm_disassembler_options@@Base+0x519c>
   5247c:	add	x10, x11, #0x40
   52480:	cmp	x12, x10
   52484:	b.eq	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.none
   52488:	mov	w10, #0x1fff                	// #8191
   5248c:	movk	w10, #0xffbf, lsl #16
   52490:	mov	w11, #0xf4d                 	// #3917
   52494:	and	x10, x19, x10
   52498:	movk	w11, #0xfe31, lsl #16
   5249c:	cmp	x10, x11
   524a0:	b.eq	52404 <print_arm_disassembler_options@@Base+0x4c48>  // b.none
   524a4:	cbz	w9, 4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   524a8:	adrp	x10, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   524ac:	ldr	x9, [x10, #1088]
   524b0:	adrp	x11, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   524b4:	ldr	x12, [x11, #1096]
   524b8:	add	x13, x9, #0x1
   524bc:	str	x13, [x10, #1088]
   524c0:	cmp	x13, x12
   524c4:	b.ne	524e8 <print_arm_disassembler_options@@Base+0x4d2c>  // b.any
   524c8:	strb	wzr, [x8, #1064]
   524cc:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   524d0:	str	wzr, [x8, #1072]
   524d4:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   524d8:	str	xzr, [x10, #1088]
   524dc:	str	xzr, [x8, #1080]
   524e0:	str	xzr, [x11, #1096]
   524e4:	b	4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   524e8:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   524ec:	ldr	x8, [x8, #1080]
   524f0:	cmp	x9, #0x3
   524f4:	b.hi	5252c <print_arm_disassembler_options@@Base+0x4d70>  // b.pmore
   524f8:	adrp	x10, 62000 <fields@@Base+0x91b4>
   524fc:	add	x10, x10, #0xa0d
   52500:	adr	x11, 52514 <print_arm_disassembler_options@@Base+0x4d58>
   52504:	ldrb	w12, [x10, x9]
   52508:	add	x11, x11, x12, lsl #2
   5250c:	mov	w10, wzr
   52510:	br	x11
   52514:	mov	w9, #0x8                   	// #8
   52518:	b	52530 <print_arm_disassembler_options@@Base+0x4d74>
   5251c:	mov	w9, #0x4                   	// #4
   52520:	b	52530 <print_arm_disassembler_options@@Base+0x4d74>
   52524:	mov	w9, #0x2                   	// #2
   52528:	b	52530 <print_arm_disassembler_options@@Base+0x4d74>
   5252c:	mov	x9, xzr
   52530:	adrp	x10, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52534:	ldr	w10, [x10, #1072]
   52538:	tst	x9, x8
   5253c:	b.eq	52554 <print_arm_disassembler_options@@Base+0x4d98>  // b.none
   52540:	cmp	w10, #0x2
   52544:	cset	w8, eq  // eq = none
   52548:	cmp	w10, #0x1
   5254c:	mov	w9, #0x2                   	// #2
   52550:	csel	w10, w9, w8, eq  // eq = none
   52554:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52558:	str	w10, [x8, #1072]
   5255c:	b	4f588 <print_arm_disassembler_options@@Base+0x1dcc>
   52560:	sub	x9, x18, #0x50
   52564:	stur	x9, [x29, #-32]
   52568:	ubfx	x9, x19, #19, #1
   5256c:	stur	x9, [x29, #-72]
   52570:	tst	x19, #0x80000
   52574:	mov	w9, #0x2                   	// #2
   52578:	mov	w10, #0x11                  	// #17
   5257c:	b	528ac <print_arm_disassembler_options@@Base+0x50f0>
   52580:	ldr	x9, [sp, #40]
   52584:	cmp	x9, #0x180
   52588:	sub	x9, x18, #0x50
   5258c:	stur	x9, [x29, #-32]
   52590:	b.eq	52774 <print_arm_disassembler_options@@Base+0x4fb8>  // b.none
   52594:	mov	w9, #0x7                   	// #7
   52598:	b	52828 <print_arm_disassembler_options@@Base+0x506c>
   5259c:	sub	x9, x18, #0x50
   525a0:	stur	x9, [x29, #-32]
   525a4:	ldr	x9, [sp, #40]
   525a8:	cmp	x9, #0x100
   525ac:	mov	w9, #0x6                   	// #6
   525b0:	b	52750 <print_arm_disassembler_options@@Base+0x4f94>
   525b4:	sub	x9, x18, #0x50
   525b8:	stur	x9, [x29, #-32]
   525bc:	ubfx	x9, x19, #21, #2
   525c0:	ubfx	x10, x19, #5, #2
   525c4:	tbz	w19, #23, 52798 <print_arm_disassembler_options@@Base+0x4fdc>
   525c8:	cbnz	x10, 52798 <print_arm_disassembler_options@@Base+0x4fdc>
   525cc:	cmp	x9, #0x2
   525d0:	mov	w9, #0x11                  	// #17
   525d4:	mov	w10, #0xe                   	// #14
   525d8:	cset	w11, cc  // cc = lo, ul, last
   525dc:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   525e0:	b	50db8 <print_arm_disassembler_options@@Base+0x35fc>
   525e4:	ubfx	x9, x19, #7, #2
   525e8:	sub	x10, x18, #0x50
   525ec:	stur	x10, [x29, #-32]
   525f0:	cbz	x9, 528fc <print_arm_disassembler_options@@Base+0x5140>
   525f4:	ldur	x27, [x29, #-64]
   525f8:	ldur	x24, [x29, #-104]
   525fc:	ldur	x17, [x29, #-144]
   52600:	cmp	x9, #0x3
   52604:	b.eq	52688 <print_arm_disassembler_options@@Base+0x4ecc>  // b.none
   52608:	mov	w9, #0x11                  	// #17
   5260c:	stur	xzr, [x29, #-72]
   52610:	stur	w9, [x29, #-52]
   52614:	b	50e74 <print_arm_disassembler_options@@Base+0x36b8>
   52618:	sub	x9, x18, #0x50
   5261c:	stur	x9, [x29, #-32]
   52620:	ldr	x9, [sp, #40]
   52624:	cmp	x9, #0x0
   52628:	mov	w9, #0x11                  	// #17
   5262c:	cset	w10, eq  // eq = none
   52630:	csinc	w9, w9, wzr, ne  // ne = any
   52634:	stur	x10, [x29, #-72]
   52638:	stur	w9, [x29, #-52]
   5263c:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   52640:	sub	x9, x18, #0x50
   52644:	stur	x9, [x29, #-32]
   52648:	tbnz	w19, #21, 527c8 <print_arm_disassembler_options@@Base+0x500c>
   5264c:	mov	w9, #0xb                   	// #11
   52650:	b	52828 <print_arm_disassembler_options@@Base+0x506c>
   52654:	ubfx	x9, x19, #7, #2
   52658:	cmp	x9, #0x3
   5265c:	sub	x10, x18, #0x50
   52660:	stur	x10, [x29, #-32]
   52664:	b.eq	52828 <print_arm_disassembler_options@@Base+0x506c>  // b.none
   52668:	ldur	x27, [x29, #-64]
   5266c:	ldur	x24, [x29, #-104]
   52670:	ldr	x10, [sp, #240]
   52674:	ldur	x17, [x29, #-144]
   52678:	cbnz	x10, 52910 <print_arm_disassembler_options@@Base+0x5154>
   5267c:	cmp	x9, #0x1
   52680:	b.ne	52910 <print_arm_disassembler_options@@Base+0x5154>  // b.any
   52684:	mov	w9, #0x9                   	// #9
   52688:	stur	w9, [x29, #-52]
   5268c:	mov	w9, #0x1                   	// #1
   52690:	stur	x9, [x29, #-72]
   52694:	b	50e74 <print_arm_disassembler_options@@Base+0x36b8>
   52698:	sub	x9, x18, #0x50
   5269c:	mov	w11, #0x11                  	// #17
   526a0:	stur	x9, [x29, #-32]
   526a4:	tbnz	w19, #5, 527e4 <print_arm_disassembler_options@@Base+0x5028>
   526a8:	ldr	x9, [sp, #8]
   526ac:	cmp	x9, #0x100
   526b0:	mov	w9, #0x500                 	// #1280
   526b4:	and	x9, x19, x9
   526b8:	cset	w10, eq  // eq = none
   526bc:	cmp	x9, #0x100
   526c0:	cset	w9, eq  // eq = none
   526c4:	orr	w9, w10, w9
   526c8:	stur	x9, [x29, #-72]
   526cc:	cmp	w9, #0x0
   526d0:	mov	w9, #0xf                   	// #15
   526d4:	csel	w11, w9, w11, ne  // ne = any
   526d8:	stur	w11, [x29, #-52]
   526dc:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   526e0:	sub	x9, x18, #0x50
   526e4:	stur	x9, [x29, #-32]
   526e8:	tbnz	w19, #5, 527f4 <print_arm_disassembler_options@@Base+0x5038>
   526ec:	ubfx	w9, w19, #22, #1
   526f0:	stur	x9, [x29, #-72]
   526f4:	mov	w9, #0x11                  	// #17
   526f8:	stur	w9, [x29, #-52]
   526fc:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   52700:	sub	x9, x18, #0x50
   52704:	stur	x9, [x29, #-32]
   52708:	ldr	x9, [sp, #72]
   5270c:	cmp	x9, #0x0
   52710:	mov	w9, #0x5                   	// #5
   52714:	b	52750 <print_arm_disassembler_options@@Base+0x4f94>
   52718:	sub	x9, x18, #0x50
   5271c:	stur	x9, [x29, #-32]
   52720:	mov	w9, #0x60                  	// #96
   52724:	movk	w9, #0x40, lsl #16
   52728:	and	x9, x19, x9
   5272c:	mov	w10, #0x11                  	// #17
   52730:	mov	w11, #0xd                   	// #13
   52734:	cmp	x9, #0x40
   52738:	b	528e8 <print_arm_disassembler_options@@Base+0x512c>
   5273c:	sub	x9, x18, #0x50
   52740:	stur	x9, [x29, #-32]
   52744:	ldr	x9, [sp, #40]
   52748:	cmp	x9, #0x180
   5274c:	mov	w9, #0x7                   	// #7
   52750:	mov	w10, #0x11                  	// #17
   52754:	cset	w11, ne  // ne = any
   52758:	stur	x11, [x29, #-72]
   5275c:	b	528ac <print_arm_disassembler_options@@Base+0x50f0>
   52760:	ldr	x9, [sp, #40]
   52764:	cmp	x9, #0x100
   52768:	sub	x9, x18, #0x50
   5276c:	stur	x9, [x29, #-32]
   52770:	b.ne	527fc <print_arm_disassembler_options@@Base+0x5040>  // b.any
   52774:	ldr	x11, [sp, #240]
   52778:	mov	w9, #0x11                  	// #17
   5277c:	mov	w10, #0xa                   	// #10
   52780:	cmp	x11, #0x0
   52784:	lsr	x11, x11, #28
   52788:	csel	w9, w10, w9, eq  // eq = none
   5278c:	stur	w9, [x29, #-52]
   52790:	eor	w9, w11, #0x1
   52794:	b	50e64 <print_arm_disassembler_options@@Base+0x36a8>
   52798:	cmp	x10, #0x2
   5279c:	cset	w11, eq  // eq = none
   527a0:	cmp	x9, #0x2
   527a4:	cset	w9, cc  // cc = lo, ul, last
   527a8:	mov	w10, #0x11                  	// #17
   527ac:	and	w12, w11, w9
   527b0:	tst	w11, w9
   527b4:	mov	w9, #0xd                   	// #13
   527b8:	csel	w9, w9, w10, ne  // ne = any
   527bc:	stur	x12, [x29, #-72]
   527c0:	stur	w9, [x29, #-52]
   527c4:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   527c8:	mov	w9, #0x200                 	// #512
   527cc:	movk	w9, #0x30, lsl #16
   527d0:	and	x9, x19, x9
   527d4:	mov	w10, #0x11                  	// #17
   527d8:	mov	w11, #0xc                   	// #12
   527dc:	cmp	x9, #0x200, lsl #12
   527e0:	b	528e8 <print_arm_disassembler_options@@Base+0x512c>
   527e4:	mov	w9, #0x11                  	// #17
   527e8:	stur	w9, [x29, #-52]
   527ec:	stur	xzr, [x29, #-72]
   527f0:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   527f4:	mov	w9, #0x11                  	// #17
   527f8:	b	52828 <print_arm_disassembler_options@@Base+0x506c>
   527fc:	mov	w9, #0x6                   	// #6
   52800:	b	52828 <print_arm_disassembler_options@@Base+0x506c>
   52804:	mov	w17, wzr
   52808:	mov	w9, #0xc                   	// #12
   5280c:	stur	w9, [x29, #-36]
   52810:	ubfx	x9, x19, #7, #2
   52814:	cmp	x9, #0x3
   52818:	sub	x10, x18, #0x50
   5281c:	stur	x10, [x29, #-32]
   52820:	stur	w17, [x29, #-48]
   52824:	b.ne	52834 <print_arm_disassembler_options@@Base+0x5078>  // b.any
   52828:	stur	w9, [x29, #-52]
   5282c:	mov	w9, #0x1                   	// #1
   52830:	b	50e64 <print_arm_disassembler_options@@Base+0x36a8>
   52834:	ldr	x10, [sp, #240]
   52838:	mov	w11, #0x8                   	// #8
   5283c:	orr	x9, x9, x10
   52840:	mov	w10, #0x11                  	// #17
   52844:	cmp	x9, #0x0
   52848:	b	528e8 <print_arm_disassembler_options@@Base+0x512c>
   5284c:	mov	w17, wzr
   52850:	mov	w9, #0xc                   	// #12
   52854:	stur	w9, [x29, #-36]
   52858:	stur	w17, [x29, #-48]
   5285c:	sub	x9, x18, #0x50
   52860:	stur	x9, [x29, #-32]
   52864:	ldr	x9, [sp, #72]
   52868:	mov	w10, #0x3                   	// #3
   5286c:	cmp	x9, #0xc0, lsl #12
   52870:	mov	w9, #0x11                  	// #17
   52874:	csel	w9, w10, w9, eq  // eq = none
   52878:	stur	w9, [x29, #-52]
   5287c:	mov	w9, w0
   52880:	b	50e64 <print_arm_disassembler_options@@Base+0x36a8>
   52884:	mov	w17, wzr
   52888:	mov	w9, #0xc                   	// #12
   5288c:	stur	w9, [x29, #-36]
   52890:	stur	w17, [x29, #-48]
   52894:	sub	x9, x18, #0x50
   52898:	stur	x9, [x29, #-32]
   5289c:	ldr	x9, [sp, #40]
   528a0:	mov	w10, #0x3                   	// #3
   528a4:	cmp	x9, #0x180
   528a8:	mov	w9, #0x11                  	// #17
   528ac:	csel	w9, w10, w9, eq  // eq = none
   528b0:	stur	w9, [x29, #-52]
   528b4:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   528b8:	mov	w17, wzr
   528bc:	mov	w9, #0xc                   	// #12
   528c0:	stur	w9, [x29, #-36]
   528c4:	sub	x9, x18, #0x50
   528c8:	stur	x9, [x29, #-32]
   528cc:	lsr	x9, x19, #21
   528d0:	and	x9, x9, #0x2
   528d4:	bfxil	x9, x19, #5, #1
   528d8:	stur	w17, [x29, #-48]
   528dc:	mov	w10, #0x11                  	// #17
   528e0:	mov	w11, #0x3                   	// #3
   528e4:	cmp	x9, #0x3
   528e8:	cset	w9, eq  // eq = none
   528ec:	stur	x9, [x29, #-72]
   528f0:	csel	w9, w11, w10, eq  // eq = none
   528f4:	stur	w9, [x29, #-52]
   528f8:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   528fc:	mov	w9, #0x1                   	// #1
   52900:	stur	x9, [x29, #-72]
   52904:	mov	w9, #0x1                   	// #1
   52908:	stur	w9, [x29, #-52]
   5290c:	b	50e68 <print_arm_disassembler_options@@Base+0x36ac>
   52910:	cmp	x9, #0x0
   52914:	mov	w9, #0x11                  	// #17
   52918:	cset	w10, eq  // eq = none
   5291c:	csinc	w9, w9, wzr, ne  // ne = any
   52920:	stur	x10, [x29, #-72]
   52924:	stur	w9, [x29, #-52]
   52928:	b	50e74 <print_arm_disassembler_options@@Base+0x36b8>
   5292c:	bl	35700 <abort@plt>
   52930:	adrp	x0, 5b000 <fields@@Base+0x21b4>
   52934:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   52938:	adrp	x3, 6b000 <fields@@Base+0x121b4>
   5293c:	add	x0, x0, #0x2b4
   52940:	add	x1, x1, #0xf80
   52944:	add	x3, x3, #0xf98
   52948:	mov	w2, #0x2570                	// #9584
   5294c:	bl	35b30 <__assert_fail@plt>
   52950:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   52954:	str	xzr, [x8, #1096]
   52958:	adrp	x0, 6e000 <fields@@Base+0x151b4>
   5295c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   52960:	adrp	x3, 6e000 <fields@@Base+0x151b4>
   52964:	add	x0, x0, #0x7a0
   52968:	add	x1, x1, #0xf80
   5296c:	add	x3, x3, #0x7c3
   52970:	mov	w2, #0x148f                	// #5263
   52974:	bl	35b30 <__assert_fail@plt>
   52978:	sub	sp, sp, #0x190
   5297c:	stp	x29, x30, [sp, #304]
   52980:	stp	x28, x27, [sp, #320]
   52984:	stp	x26, x25, [sp, #336]
   52988:	stp	x24, x23, [sp, #352]
   5298c:	stp	x22, x21, [sp, #368]
   52990:	stp	x20, x19, [sp, #384]
   52994:	ldp	x11, x12, [x0]
   52998:	add	x29, sp, #0x130
   5299c:	cbz	w2, 529c8 <print_arm_disassembler_options@@Base+0x520c>
   529a0:	mvn	w8, w1
   529a4:	mov	w9, #0xef000000            	// #-285212672
   529a8:	tst	x8, x9
   529ac:	b.ne	53780 <print_arm_disassembler_options@@Base+0x5fc4>  // b.any
   529b0:	tst	x1, #0x10000000
   529b4:	mov	w8, #0xf3000000            	// #-218103808
   529b8:	mov	w9, #0xf2000000            	// #-234881024
   529bc:	csel	x8, x9, x8, eq  // eq = none
   529c0:	bfxil	x8, x1, #0, #24
   529c4:	mov	x1, x8
   529c8:	mov	w8, #0x850                 	// #2128
   529cc:	movk	w8, #0xffb0, lsl #16
   529d0:	mov	w9, #0x840                 	// #2112
   529d4:	and	x8, x1, x8
   529d8:	movk	w9, #0xf2b0, lsl #16
   529dc:	cmp	x8, x9
   529e0:	stur	x11, [x29, #-32]
   529e4:	b.ne	529fc <print_arm_disassembler_options@@Base+0x5240>  // b.any
   529e8:	adrp	x23, 66000 <fields@@Base+0xd1b4>
   529ec:	stur	x12, [x29, #-56]
   529f0:	stur	w2, [x29, #-108]
   529f4:	add	x23, x23, #0x470
   529f8:	b	52a28 <print_arm_disassembler_options@@Base+0x526c>
   529fc:	adrp	x8, 90000 <aarch64_operands@@Base+0xbc38>
   52a00:	add	x8, x8, #0xa90
   52a04:	ldr	x23, [x8]
   52a08:	cbz	x23, 537d0 <print_arm_disassembler_options@@Base+0x6014>
   52a0c:	ldp	x10, x9, [x8, #-16]
   52a10:	add	x8, x8, #0x30
   52a14:	and	x9, x9, x1
   52a18:	cmp	x9, x10
   52a1c:	b.ne	52a04 <print_arm_disassembler_options@@Base+0x5248>  // b.any
   52a20:	stur	x12, [x29, #-56]
   52a24:	stur	w2, [x29, #-108]
   52a28:	lsr	x26, x1, #8
   52a2c:	ubfx	x9, x1, #18, #14
   52a30:	tst	w26, #0x3
   52a34:	ubfx	x19, x1, #5, #1
   52a38:	ubfx	x14, x1, #12, #4
   52a3c:	and	w4, w9, #0x10
   52a40:	cset	w16, eq  // eq = none
   52a44:	ubfx	x20, x1, #8, #2
   52a48:	mov	w3, #0x2                   	// #2
   52a4c:	orr	w28, w14, w4
   52a50:	cset	w14, ne  // ne = any
   52a54:	tst	w19, w16
   52a58:	ubfx	x10, x1, #6, #2
   52a5c:	csinc	w9, w3, w20, ne  // ne = any
   52a60:	cmp	w20, #0x3
   52a64:	ubfx	w15, w1, #10, #2
   52a68:	mov	w8, #0x3                   	// #3
   52a6c:	mov	w6, #0x1                   	// #1
   52a70:	cset	w3, eq  // eq = none
   52a74:	cmp	w10, #0x1
   52a78:	lsr	x12, x1, #4
   52a7c:	lsl	w2, w6, w15
   52a80:	cset	w4, hi  // hi = pmore
   52a84:	tst	w8, w1, lsr #10
   52a88:	cset	w8, eq  // eq = none
   52a8c:	cset	w5, ne  // ne = any
   52a90:	tst	w2, w12
   52a94:	cinc	w6, w6, ne  // ne = any
   52a98:	tst	w14, w5
   52a9c:	ubfx	x7, x1, #4, #2
   52aa0:	stur	w8, [x29, #-72]
   52aa4:	csinc	w8, w6, wzr, ne  // ne = any
   52aa8:	tst	w12, #0x1
   52aac:	ubfx	x18, x1, #1, #31
   52ab0:	str	w8, [sp, #136]
   52ab4:	cset	w8, eq  // eq = none
   52ab8:	cmp	w7, #0x3
   52abc:	and	x11, x1, #0xf
   52ac0:	ubfx	x13, x1, #4, #4
   52ac4:	and	w18, w18, #0x10
   52ac8:	sub	w21, w2, #0x1
   52acc:	stur	w8, [x29, #-36]
   52ad0:	cset	w8, ne  // ne = any
   52ad4:	tst	w12, #0x3
   52ad8:	orr	w11, w18, w11
   52adc:	and	w18, w21, w13
   52ae0:	cset	w6, eq  // eq = none
   52ae4:	tst	w12, #0x2
   52ae8:	stur	w8, [x29, #-48]
   52aec:	cset	w14, eq  // eq = none
   52af0:	cmp	w18, w21
   52af4:	add	w8, w15, #0x1
   52af8:	mov	w17, #0x20                  	// #32
   52afc:	cset	w18, eq  // eq = none
   52b00:	tst	w21, w13
   52b04:	lsr	w8, w13, w8
   52b08:	mov	w13, #0x10                  	// #16
   52b0c:	sbfx	x0, x1, #4, #1
   52b10:	str	w8, [sp, #132]
   52b14:	and	w8, w2, w12
   52b18:	lsl	w12, w17, w15
   52b1c:	lsl	w13, w13, w15
   52b20:	str	w8, [sp, #108]
   52b24:	and	w12, w0, w12
   52b28:	and	w8, w0, w13
   52b2c:	ubfx	w13, w1, #20, #2
   52b30:	mov	w0, #0x4                   	// #4
   52b34:	lsl	w0, w0, w13
   52b38:	sub	w0, w0, #0x1
   52b3c:	str	w8, [sp, #104]
   52b40:	and	w8, w0, w11
   52b44:	stur	w8, [x29, #-148]
   52b48:	add	w8, w20, #0x1
   52b4c:	lsr	w17, w11, w13
   52b50:	str	w8, [sp, #128]
   52b54:	lsl	w13, w8, #3
   52b58:	lsr	x8, x1, #12
   52b5c:	stur	w9, [x29, #-96]
   52b60:	lsl	w10, w13, w10
   52b64:	lsr	x13, x1, #5
   52b68:	lsr	x0, x1, #17
   52b6c:	and	x9, x8, #0x70
   52b70:	and	x13, x13, #0x8
   52b74:	and	x0, x0, #0x80
   52b78:	mov	w2, #0x100                 	// #256
   52b7c:	bfxil	x9, x1, #0, #4
   52b80:	lsl	x2, x2, x13
   52b84:	add	x13, x13, #0x8
   52b88:	orr	x21, x9, x0
   52b8c:	sub	x2, x2, #0x1
   52b90:	lsl	x13, x21, x13
   52b94:	orr	x8, x13, x2
   52b98:	and	w13, w3, w4
   52b9c:	str	x8, [sp, #96]
   52ba0:	lsr	w8, w10, w13
   52ba4:	cset	w11, eq  // eq = none
   52ba8:	tst	w21, #0x80
   52bac:	mov	w13, #0xff000000            	// #-16777216
   52bb0:	csel	x2, xzr, x13, eq  // eq = none
   52bb4:	tst	w21, #0x40
   52bb8:	mov	w3, #0x3c000000            	// #1006632960
   52bbc:	mov	w4, #0x40000000            	// #1073741824
   52bc0:	csel	x3, x4, x3, eq  // eq = none
   52bc4:	mov	w4, #0xff0000              	// #16711680
   52bc8:	csel	x22, xzr, x4, eq  // eq = none
   52bcc:	tst	w21, #0x20
   52bd0:	mov	w24, #0xff00                	// #65280
   52bd4:	csel	x25, xzr, x24, eq  // eq = none
   52bd8:	tst	w21, #0x10
   52bdc:	mov	w27, #0xff                  	// #255
   52be0:	csel	x30, xzr, x27, eq  // eq = none
   52be4:	tst	w21, #0x8
   52be8:	csel	x13, xzr, x13, eq  // eq = none
   52bec:	tst	w21, #0x4
   52bf0:	csel	x4, xzr, x4, eq  // eq = none
   52bf4:	tst	w21, #0x2
   52bf8:	csel	x24, xzr, x24, eq  // eq = none
   52bfc:	tst	w21, #0x1
   52c00:	str	w8, [sp, #120]
   52c04:	csel	x27, xzr, x27, eq  // eq = none
   52c08:	cmp	w15, #0x2
   52c0c:	lsl	w8, w7, #6
   52c10:	csel	w8, w12, w8, ne  // ne = any
   52c14:	str	w8, [sp, #92]
   52c18:	lsr	x8, x1, #6
   52c1c:	orr	w12, w26, w8
   52c20:	cset	w26, ne  // ne = any
   52c24:	tst	x12, #0x3
   52c28:	adrp	x10, 66000 <fields@@Base+0xd1b4>
   52c2c:	adrp	x12, 66000 <fields@@Base+0xd1b4>
   52c30:	ccmp	w20, #0x2, #0x4, ne  // ne = any
   52c34:	add	x10, x10, #0x3a8
   52c38:	add	x12, x12, #0x3cb
   52c3c:	csel	x10, x12, x10, eq  // eq = none
   52c40:	str	x10, [sp, #112]
   52c44:	orr	w10, w18, w11
   52c48:	ldur	w11, [x29, #-72]
   52c4c:	lsl	x12, x0, #24
   52c50:	bfi	x12, x9, #19, #7
   52c54:	lsl	w9, w9, #3
   52c58:	orr	w10, w10, w11
   52c5c:	orr	x11, x12, x3
   52c60:	orr	x12, x22, x2
   52c64:	orr	x12, x25, x12
   52c68:	str	x11, [sp, #32]
   52c6c:	orr	x11, x30, x12
   52c70:	orr	x12, x4, x13
   52c74:	orr	x12, x24, x12
   52c78:	str	x11, [sp, #24]
   52c7c:	orr	x11, x27, x12
   52c80:	str	x11, [sp, #16]
   52c84:	orr	w11, w26, w14
   52c88:	str	w11, [sp, #88]
   52c8c:	ldur	w11, [x29, #-48]
   52c90:	orr	w12, w26, w6
   52c94:	and	x13, x8, #0x8
   52c98:	and	x8, x8, #0x18
   52c9c:	orr	w11, w26, w11
   52ca0:	str	w11, [sp, #84]
   52ca4:	ldur	w11, [x29, #-36]
   52ca8:	lsl	x8, x21, x8
   52cac:	str	x8, [sp, #144]
   52cb0:	lsr	w8, w17, #2
   52cb4:	and	w11, w11, w12
   52cb8:	str	w11, [sp, #80]
   52cbc:	mov	w11, #0x8                   	// #8
   52cc0:	lsl	w14, w11, w15
   52cc4:	mov	w11, #0x20                  	// #32
   52cc8:	ubfx	x12, x1, #3, #29
   52ccc:	lsl	w11, w11, w7
   52cd0:	and	w12, w12, #0x10
   52cd4:	str	w11, [sp, #124]
   52cd8:	ubfx	x11, x1, #16, #4
   52cdc:	stur	x11, [x29, #-72]
   52ce0:	orr	w11, w11, w12
   52ce4:	and	w12, w19, w16
   52ce8:	str	w8, [sp, #140]
   52cec:	eor	w8, w12, #0x1
   52cf0:	tst	w5, w18
   52cf4:	str	w9, [sp, #12]
   52cf8:	lsl	x9, x21, x13
   52cfc:	stp	x21, x19, [sp, #40]
   52d00:	add	w21, w19, w8
   52d04:	eor	w8, w10, #0x1
   52d08:	str	w8, [sp, #64]
   52d0c:	csel	w8, w14, wzr, ne  // ne = any
   52d10:	mov	x18, x20
   52d14:	str	x9, [sp, #72]
   52d18:	str	w8, [sp, #60]
   52d1c:	ubfx	x8, x1, #8, #4
   52d20:	adrp	x9, 66000 <fields@@Base+0xd1b4>
   52d24:	stp	x18, x8, [x29, #-128]
   52d28:	and	w8, w1, #0xf
   52d2c:	add	x9, x9, #0x393
   52d30:	stur	x8, [x29, #-88]
   52d34:	stur	w28, [x29, #-92]
   52d38:	sub	w8, w28, #0x1
   52d3c:	mov	x28, x9
   52d40:	ldur	w9, [x29, #-96]
   52d44:	ldur	x25, [x29, #-32]
   52d48:	ldur	x27, [x29, #-56]
   52d4c:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   52d50:	adrp	x26, 58000 <xexit@@Base+0x1dd4>
   52d54:	adrp	x19, 66000 <fields@@Base+0xd1b4>
   52d58:	mov	w22, #0xa                   	// #10
   52d5c:	add	x20, x20, #0x86c
   52d60:	add	x26, x26, #0x84f
   52d64:	add	x19, x19, #0x3ad
   52d68:	add	w24, w18, w11
   52d6c:	str	w8, [sp, #56]
   52d70:	add	w8, w8, w9
   52d74:	stur	wzr, [x29, #-60]
   52d78:	stur	xzr, [x29, #-104]
   52d7c:	stur	x7, [x29, #-144]
   52d80:	stur	x1, [x29, #-48]
   52d84:	stur	w11, [x29, #-132]
   52d88:	str	w8, [sp, #68]
   52d8c:	stur	w24, [x29, #-36]
   52d90:	stur	w21, [x29, #-76]
   52d94:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   52d98:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   52d9c:	mov	x0, x27
   52da0:	add	x1, x1, #0x1b5
   52da4:	mov	x2, x20
   52da8:	blr	x25
   52dac:	mov	x23, x24
   52db0:	ldur	w24, [x29, #-36]
   52db4:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   52db8:	add	x20, x20, #0x86c
   52dbc:	add	x23, x23, #0x1
   52dc0:	ldrb	w2, [x23]
   52dc4:	cmp	w2, #0x25
   52dc8:	b.eq	52de8 <print_arm_disassembler_options@@Base+0x562c>  // b.none
   52dcc:	cbz	w2, 53740 <print_arm_disassembler_options@@Base+0x5f84>
   52dd0:	adrp	x1, 69000 <fields@@Base+0x101b4>
   52dd4:	mov	x0, x27
   52dd8:	add	x1, x1, #0xde6
   52ddc:	blr	x25
   52de0:	add	x23, x23, #0x1
   52de4:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   52de8:	ldrb	w8, [x23, #1]!
   52dec:	sub	w9, w8, #0x25
   52df0:	cmp	w9, #0x50
   52df4:	b.hi	537f4 <print_arm_disassembler_options@@Base+0x6038>  // b.pmore
   52df8:	adrp	x12, 62000 <fields@@Base+0x91b4>
   52dfc:	add	x12, x12, #0xb86
   52e00:	adr	x10, 52e10 <print_arm_disassembler_options@@Base+0x5654>
   52e04:	ldrh	w11, [x12, x9, lsl #1]
   52e08:	add	x10, x10, x11, lsl #2
   52e0c:	br	x10
   52e10:	mov	x20, xzr
   52e14:	mov	w9, wzr
   52e18:	sub	w10, w8, #0x30
   52e1c:	and	w10, w10, #0xff
   52e20:	cmp	w10, #0x9
   52e24:	b.hi	52e4c <print_arm_disassembler_options@@Base+0x5690>  // b.pmore
   52e28:	mov	w10, wzr
   52e2c:	mul	w10, w10, w22
   52e30:	add	w10, w10, w8, uxtb
   52e34:	ldrb	w8, [x23, #1]!
   52e38:	sub	w10, w10, #0x30
   52e3c:	sub	w11, w8, #0x30
   52e40:	cmp	w11, #0xa
   52e44:	b.cc	52e2c <print_arm_disassembler_options@@Base+0x5670>  // b.lo, b.ul, b.last
   52e48:	b	52e50 <print_arm_disassembler_options@@Base+0x5694>
   52e4c:	mov	w10, wzr
   52e50:	and	w11, w8, #0xff
   52e54:	cmp	w11, #0x2d
   52e58:	b.ne	52e94 <print_arm_disassembler_options@@Base+0x56d8>  // b.any
   52e5c:	ldrb	w8, [x23, #1]!
   52e60:	sub	w11, w8, #0x30
   52e64:	cmp	w11, #0x9
   52e68:	mov	x24, x23
   52e6c:	mov	w11, wzr
   52e70:	b.hi	52e9c <print_arm_disassembler_options@@Base+0x56e0>  // b.pmore
   52e74:	mul	w11, w11, w22
   52e78:	add	w11, w11, w8, uxtb
   52e7c:	ldrb	w8, [x24, #1]!
   52e80:	sub	w11, w11, #0x30
   52e84:	sub	w12, w8, #0x30
   52e88:	cmp	w12, #0xa
   52e8c:	b.cc	52e74 <print_arm_disassembler_options@@Base+0x56b8>  // b.lo, b.ul, b.last
   52e90:	b	52e9c <print_arm_disassembler_options@@Base+0x56e0>
   52e94:	mov	w11, w10
   52e98:	mov	x24, x23
   52e9c:	subs	w12, w11, w10
   52ea0:	b.mi	537f4 <print_arm_disassembler_options@@Base+0x6038>  // b.first
   52ea4:	and	w11, w8, #0xff
   52ea8:	sub	w11, w11, #0x27
   52eac:	cmp	w11, #0x4b
   52eb0:	b.hi	537f4 <print_arm_disassembler_options@@Base+0x6038>  // b.pmore
   52eb4:	ldur	x13, [x29, #-48]
   52eb8:	adrp	x16, 62000 <fields@@Base+0x91b4>
   52ebc:	add	x16, x16, #0xc28
   52ec0:	adr	x14, 52d98 <print_arm_disassembler_options@@Base+0x55dc>
   52ec4:	ldrh	w15, [x16, x11, lsl #1]
   52ec8:	add	x14, x14, x15, lsl #2
   52ecc:	lsr	x10, x13, x10
   52ed0:	mov	w13, #0x2                   	// #2
   52ed4:	lsl	x13, x13, x12
   52ed8:	sub	x11, x13, #0x1
   52edc:	and	x10, x11, x10
   52ee0:	add	w12, w9, w12
   52ee4:	lsl	x10, x10, x9
   52ee8:	add	w9, w12, #0x1
   52eec:	orr	x20, x10, x20
   52ef0:	add	x23, x24, #0x1
   52ef4:	br	x14
   52ef8:	ldrb	w8, [x23]
   52efc:	b	52e18 <print_arm_disassembler_options@@Base+0x565c>
   52f00:	ldrb	w9, [x23]
   52f04:	sub	w10, w9, #0x30
   52f08:	cmp	w10, #0xa
   52f0c:	b.cs	52f1c <print_arm_disassembler_options@@Base+0x5760>  // b.hs, b.nlast
   52f10:	ldur	w24, [x29, #-36]
   52f14:	mov	w10, #0xffffffd0            	// #-48
   52f18:	b	52f30 <print_arm_disassembler_options@@Base+0x5774>
   52f1c:	ldur	w24, [x29, #-36]
   52f20:	sub	w10, w9, #0x61
   52f24:	cmp	w10, #0x6
   52f28:	b.cs	537f4 <print_arm_disassembler_options@@Base+0x6038>  // b.hs, b.nlast
   52f2c:	mov	w10, #0xffffffa9            	// #-87
   52f30:	add	w9, w10, w9
   52f34:	and	w8, w8, #0xff
   52f38:	asr	w10, w9, #2
   52f3c:	sub	w8, w8, #0x53
   52f40:	cmp	x20, x10
   52f44:	mov	w10, #0x8                   	// #8
   52f48:	lsl	w8, w10, w8
   52f4c:	b.cc	52f5c <print_arm_disassembler_options@@Base+0x57a0>  // b.lo, b.ul, b.last
   52f50:	and	w9, w9, #0x3
   52f54:	cmp	x20, x9
   52f58:	b.ls	53298 <print_arm_disassembler_options@@Base+0x5adc>  // b.plast
   52f5c:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   52f60:	lsl	w2, w8, w20
   52f64:	mov	x0, x27
   52f68:	add	x1, x1, #0x45d
   52f6c:	b	532a8 <print_arm_disassembler_options@@Base+0x5aec>
   52f70:	ldur	x11, [x29, #-128]
   52f74:	adrp	x10, 62000 <fields@@Base+0x91b4>
   52f78:	add	x10, x10, #0xcc0
   52f7c:	adr	x8, 52f8c <print_arm_disassembler_options@@Base+0x57d0>
   52f80:	ldrb	w9, [x10, x11]
   52f84:	add	x8, x8, x9, lsl #2
   52f88:	br	x8
   52f8c:	ldr	w8, [sp, #108]
   52f90:	mov	w0, wzr
   52f94:	cbnz	w8, 537d4 <print_arm_disassembler_options@@Base+0x6018>
   52f98:	ldp	w9, w8, [sp, #60]
   52f9c:	tbz	w8, #0, 53368 <print_arm_disassembler_options@@Base+0x5bac>
   52fa0:	b	537d4 <print_arm_disassembler_options@@Base+0x6018>
   52fa4:	ldur	x9, [x29, #-120]
   52fa8:	adrp	x8, 62000 <fields@@Base+0x91b4>
   52fac:	add	x8, x8, #0xb0
   52fb0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   52fb4:	ldrb	w8, [x8, x9]
   52fb8:	mov	x0, x27
   52fbc:	add	x1, x1, #0x56
   52fc0:	and	w24, w8, #0xf
   52fc4:	lsr	w20, w8, #4
   52fc8:	blr	x25
   52fcc:	cbz	w20, 532e0 <print_arm_disassembler_options@@Base+0x5b24>
   52fd0:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   52fd4:	add	x8, x8, #0x86c
   52fd8:	mov	x19, x27
   52fdc:	mov	x21, x25
   52fe0:	cbz	w24, 535c0 <print_arm_disassembler_options@@Base+0x5e04>
   52fe4:	add	w12, w20, #0x1
   52fe8:	ldur	w20, [x29, #-92]
   52fec:	mov	x9, x26
   52ff0:	mov	x10, x28
   52ff4:	mov	w27, wzr
   52ff8:	stur	w12, [x29, #-56]
   52ffc:	cmp	w27, #0x0
   53000:	csel	x2, x9, x8, eq  // eq = none
   53004:	mov	x0, x19
   53008:	mov	x1, x10
   5300c:	mov	w3, w20
   53010:	mov	x25, x10
   53014:	mov	w26, w24
   53018:	mov	x24, x8
   5301c:	mov	x28, x9
   53020:	blr	x21
   53024:	ldur	w12, [x29, #-56]
   53028:	add	w27, w27, #0x1
   5302c:	mov	x10, x25
   53030:	mov	x9, x28
   53034:	mov	x8, x24
   53038:	mov	w24, w26
   5303c:	cmp	w26, w27
   53040:	add	w20, w20, w12
   53044:	b.ne	52ffc <print_arm_disassembler_options@@Base+0x5840>  // b.any
   53048:	b	535c0 <print_arm_disassembler_options@@Base+0x5e04>
   5304c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53050:	mov	x0, x27
   53054:	add	x1, x1, #0x56
   53058:	blr	x25
   5305c:	cmp	w21, #0x2
   53060:	b.cc	532bc <print_arm_disassembler_options@@Base+0x5b00>  // b.lo, b.ul, b.last
   53064:	mov	x19, x25
   53068:	mov	x25, x26
   5306c:	mov	x26, x20
   53070:	mov	w28, w21
   53074:	ldp	w21, w20, [x29, #-96]
   53078:	mov	w24, wzr
   5307c:	cmp	w24, #0x0
   53080:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   53084:	csel	x2, x25, x26, eq  // eq = none
   53088:	mov	x0, x27
   5308c:	add	x1, x1, #0x3b7
   53090:	mov	w3, w20
   53094:	blr	x19
   53098:	add	w24, w24, #0x1
   5309c:	cmp	w21, w24
   530a0:	add	w20, w20, w28
   530a4:	b.ne	5307c <print_arm_disassembler_options@@Base+0x58c0>  // b.any
   530a8:	b	534c8 <print_arm_disassembler_options@@Base+0x5d0c>
   530ac:	ldur	w2, [x29, #-148]
   530b0:	ldr	w3, [sp, #140]
   530b4:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   530b8:	mov	x0, x27
   530bc:	add	x1, x1, #0x3af
   530c0:	blr	x25
   530c4:	add	x23, x23, #0x1
   530c8:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   530cc:	ldur	x8, [x29, #-120]
   530d0:	ldr	x3, [sp, #144]
   530d4:	cmp	w8, #0x8
   530d8:	b.cc	5348c <print_arm_disassembler_options@@Base+0x5cd0>  // b.lo, b.ul, b.last
   530dc:	cmp	w8, #0xc
   530e0:	b.cs	53480 <print_arm_disassembler_options@@Base+0x5cc4>  // b.hs, b.nlast
   530e4:	ldr	x2, [sp, #72]
   530e8:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   530ec:	mov	x0, x27
   530f0:	add	x1, x1, #0x409
   530f4:	mov	x3, x2
   530f8:	blr	x25
   530fc:	add	x23, x23, #0x1
   53100:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53104:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   53108:	ldr	w8, [x8, #1056]
   5310c:	ldur	w10, [x29, #-108]
   53110:	cbnz	w10, 5313c <print_arm_disassembler_options@@Base+0x5980>
   53114:	b	53738 <print_arm_disassembler_options@@Base+0x5f7c>
   53118:	adrp	x8, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   5311c:	ldr	w8, [x8, #1056]
   53120:	ldur	w10, [x29, #-108]
   53124:	ldur	w9, [x29, #-60]
   53128:	cmp	w8, #0x0
   5312c:	ccmp	w10, #0x0, #0x4, ne  // ne = any
   53130:	csinc	w9, w9, wzr, eq  // eq = none
   53134:	stur	w9, [x29, #-60]
   53138:	cbz	w10, 53738 <print_arm_disassembler_options@@Base+0x5f7c>
   5313c:	cbz	w8, 53738 <print_arm_disassembler_options@@Base+0x5f7c>
   53140:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   53144:	ubfx	w8, w8, #4, #4
   53148:	add	x9, x9, #0xf38
   5314c:	ldr	x2, [x9, w8, uxtw #3]
   53150:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53154:	mov	x0, x27
   53158:	add	x1, x1, #0x816
   5315c:	blr	x25
   53160:	add	x23, x23, #0x1
   53164:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53168:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5316c:	mov	x0, x27
   53170:	add	x1, x1, #0x28
   53174:	blr	x25
   53178:	add	x23, x23, #0x1
   5317c:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53180:	ldur	x8, [x29, #-128]
   53184:	cbz	w8, 53300 <print_arm_disassembler_options@@Base+0x5b44>
   53188:	mov	x0, x27
   5318c:	cmp	w24, #0x20
   53190:	b.cc	5331c <print_arm_disassembler_options@@Base+0x5b60>  // b.lo, b.ul, b.last
   53194:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   53198:	add	x1, x1, #0x445
   5319c:	b	53324 <print_arm_disassembler_options@@Base+0x5b68>
   531a0:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   531a4:	ldr	w8, [x8, #1560]
   531a8:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   531ac:	mov	w9, #0x90                  	// #144
   531b0:	add	x10, x10, #0xaf8
   531b4:	madd	x8, x8, x9, x10
   531b8:	add	x8, x8, x20, lsl #3
   531bc:	ldr	x2, [x8, #16]
   531c0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   531c4:	mov	x0, x27
   531c8:	add	x1, x1, #0x816
   531cc:	b	52da8 <print_arm_disassembler_options@@Base+0x55ec>
   531d0:	mov	x8, #0xffffffffffffffff    	// #-1
   531d4:	lsl	x8, x8, x9
   531d8:	mvn	x8, x8
   531dc:	cmp	x20, x8
   531e0:	b.ne	52db0 <print_arm_disassembler_options@@Base+0x55f4>  // b.any
   531e4:	b	53238 <print_arm_disassembler_options@@Base+0x5a7c>
   531e8:	mov	w8, #0x1                   	// #1
   531ec:	lsl	w8, w8, w9
   531f0:	sxtw	x23, w8
   531f4:	sub	x8, x23, w20, sxtw
   531f8:	ldrb	w2, [x24, x8]
   531fc:	adrp	x1, 69000 <fields@@Base+0x101b4>
   53200:	mov	x0, x27
   53204:	add	x1, x1, #0xde6
   53208:	blr	x25
   5320c:	add	x23, x24, x23
   53210:	b	52db0 <print_arm_disassembler_options@@Base+0x55f4>
   53214:	ldur	x8, [x29, #-48]
   53218:	tbz	w8, #6, 52d98 <print_arm_disassembler_options@@Base+0x55dc>
   5321c:	lsr	x2, x20, #1
   53220:	mov	x0, x27
   53224:	tbnz	w20, #0, 5328c <print_arm_disassembler_options@@Base+0x5ad0>
   53228:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5322c:	add	x1, x1, #0x1cf
   53230:	b	52da8 <print_arm_disassembler_options@@Base+0x55ec>
   53234:	cbnz	x20, 52db0 <print_arm_disassembler_options@@Base+0x55f4>
   53238:	ldrb	w2, [x23]
   5323c:	adrp	x1, 69000 <fields@@Base+0x101b4>
   53240:	mov	x0, x27
   53244:	add	x1, x1, #0xde6
   53248:	blr	x25
   5324c:	b	52db0 <print_arm_disassembler_options@@Base+0x55f4>
   53250:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53254:	mov	x0, x27
   53258:	add	x1, x1, #0x858
   5325c:	mov	x2, x20
   53260:	blr	x25
   53264:	mov	x23, x24
   53268:	stur	x20, [x29, #-104]
   5326c:	b	52db0 <print_arm_disassembler_options@@Base+0x55f4>
   53270:	mov	w8, #0x1                   	// #1
   53274:	lsl	x8, x8, x9
   53278:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5327c:	sub	x2, x8, x20
   53280:	mov	x0, x27
   53284:	add	x1, x1, #0x858
   53288:	b	52da8 <print_arm_disassembler_options@@Base+0x55ec>
   5328c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53290:	add	x1, x1, #0x1ba
   53294:	b	52da8 <print_arm_disassembler_options@@Base+0x55ec>
   53298:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   5329c:	lsl	w2, w8, w20
   532a0:	mov	x0, x27
   532a4:	add	x1, x1, #0x1
   532a8:	blr	x25
   532ac:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   532b0:	add	x20, x20, #0x86c
   532b4:	add	x23, x23, #0x1
   532b8:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   532bc:	ldur	w8, [x29, #-96]
   532c0:	mov	x0, x27
   532c4:	cmp	w8, #0x1
   532c8:	b.ne	534b0 <print_arm_disassembler_options@@Base+0x5cf4>  // b.any
   532cc:	ldur	w2, [x29, #-92]
   532d0:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   532d4:	add	x1, x1, #0x3c5
   532d8:	blr	x25
   532dc:	b	534c4 <print_arm_disassembler_options@@Base+0x5d08>
   532e0:	cmp	w24, #0x1
   532e4:	b.ne	5359c <print_arm_disassembler_options@@Base+0x5de0>  // b.any
   532e8:	ldur	w2, [x29, #-92]
   532ec:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   532f0:	mov	x0, x27
   532f4:	add	x1, x1, #0x39d
   532f8:	blr	x25
   532fc:	b	535b8 <print_arm_disassembler_options@@Base+0x5dfc>
   53300:	ldur	w2, [x29, #-132]
   53304:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53308:	mov	x0, x27
   5330c:	add	x1, x1, #0xfc
   53310:	blr	x25
   53314:	add	x23, x23, #0x1
   53318:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   5331c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53320:	add	x1, x1, #0x11b
   53324:	ldur	w2, [x29, #-132]
   53328:	mov	w3, w24
   5332c:	blr	x25
   53330:	add	x23, x23, #0x1
   53334:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53338:	ldr	w9, [sp, #104]
   5333c:	ldr	w8, [sp, #88]
   53340:	tbnz	w8, #0, 53368 <print_arm_disassembler_options@@Base+0x5bac>
   53344:	b	537d0 <print_arm_disassembler_options@@Base+0x6014>
   53348:	ldr	w8, [sp, #80]
   5334c:	mov	w9, wzr
   53350:	mov	w0, wzr
   53354:	tbnz	w8, #0, 53368 <print_arm_disassembler_options@@Base+0x5bac>
   53358:	b	537d4 <print_arm_disassembler_options@@Base+0x6018>
   5335c:	ldr	w9, [sp, #92]
   53360:	ldr	w8, [sp, #84]
   53364:	tbz	w8, #0, 537d0 <print_arm_disassembler_options@@Base+0x6014>
   53368:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5336c:	mov	x0, x27
   53370:	add	x1, x1, #0x56
   53374:	stur	w9, [x29, #-56]
   53378:	blr	x25
   5337c:	ldur	w24, [x29, #-92]
   53380:	ldp	w28, w25, [sp, #132]
   53384:	ldr	w21, [sp, #128]
   53388:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   5338c:	mov	x22, x27
   53390:	mov	w27, wzr
   53394:	add	x20, x20, #0x86c
   53398:	ldur	x8, [x29, #-32]
   5339c:	cmp	w27, #0x0
   533a0:	csel	x2, x26, x20, eq  // eq = none
   533a4:	mov	x0, x22
   533a8:	mov	x1, x19
   533ac:	mov	w3, w24
   533b0:	mov	w4, w28
   533b4:	blr	x8
   533b8:	add	w27, w27, #0x1
   533bc:	cmp	w21, w27
   533c0:	add	w24, w24, w25
   533c4:	b.ne	53398 <print_arm_disassembler_options@@Base+0x5bdc>  // b.any
   533c8:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   533cc:	ldr	w8, [x8, #1560]
   533d0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   533d4:	mov	w9, #0x90                  	// #144
   533d8:	add	x10, x10, #0xaf8
   533dc:	madd	x8, x8, x9, x10
   533e0:	ldur	x9, [x29, #-72]
   533e4:	ldur	x25, [x29, #-32]
   533e8:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   533ec:	mov	x0, x22
   533f0:	add	x8, x8, x9, lsl #3
   533f4:	ldr	x2, [x8, #16]
   533f8:	add	x1, x1, #0x3a1
   533fc:	blr	x25
   53400:	ldur	w2, [x29, #-56]
   53404:	mov	x27, x22
   53408:	cbz	w2, 5341c <print_arm_disassembler_options@@Base+0x5c60>
   5340c:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   53410:	mov	x0, x27
   53414:	add	x1, x1, #0x3a8
   53418:	blr	x25
   5341c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53420:	mov	x0, x27
   53424:	add	x1, x1, #0xeb
   53428:	blr	x25
   5342c:	ldur	x9, [x29, #-88]
   53430:	ldur	w21, [x29, #-76]
   53434:	ldur	w24, [x29, #-36]
   53438:	adrp	x26, 58000 <xexit@@Base+0x1dd4>
   5343c:	adrp	x28, 66000 <fields@@Base+0xd1b4>
   53440:	adrp	x19, 66000 <fields@@Base+0xd1b4>
   53444:	cmp	w9, #0xf
   53448:	add	x26, x26, #0x84f
   5344c:	mov	w22, #0xa                   	// #10
   53450:	add	x28, x28, #0x393
   53454:	add	x19, x19, #0x3ad
   53458:	b.eq	53470 <print_arm_disassembler_options@@Base+0x5cb4>  // b.none
   5345c:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   53460:	cmp	w9, #0xd
   53464:	add	x20, x20, #0x86c
   53468:	b.eq	53664 <print_arm_disassembler_options@@Base+0x5ea8>  // b.none
   5346c:	b	53564 <print_arm_disassembler_options@@Base+0x5da8>
   53470:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   53474:	add	x20, x20, #0x86c
   53478:	add	x23, x23, #0x1
   5347c:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53480:	ldr	x3, [sp, #96]
   53484:	cmp	w8, #0xe
   53488:	b.cs	53688 <print_arm_disassembler_options@@Base+0x5ecc>  // b.hs, b.nlast
   5348c:	orr	x8, x3, #0xffffffff00000000
   53490:	cmp	w3, #0x0
   53494:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   53498:	csel	x2, x8, x3, lt  // lt = tstop
   5349c:	mov	x0, x27
   534a0:	add	x1, x1, #0x428
   534a4:	blr	x25
   534a8:	add	x23, x23, #0x1
   534ac:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   534b0:	ldur	w2, [x29, #-92]
   534b4:	ldr	w3, [sp, #68]
   534b8:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   534bc:	add	x1, x1, #0x3bf
   534c0:	blr	x25
   534c4:	mov	x19, x25
   534c8:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   534cc:	ldr	w8, [x8, #1560]
   534d0:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   534d4:	mov	w9, #0x90                  	// #144
   534d8:	add	x10, x10, #0xaf8
   534dc:	madd	x8, x8, x9, x10
   534e0:	ldur	x9, [x29, #-72]
   534e4:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   534e8:	mov	x0, x27
   534ec:	add	x1, x1, #0x3a1
   534f0:	add	x8, x8, x9, lsl #3
   534f4:	ldr	x2, [x8, #16]
   534f8:	blr	x19
   534fc:	ldur	w24, [x29, #-36]
   53500:	ldur	x8, [x29, #-48]
   53504:	adrp	x28, 66000 <fields@@Base+0xd1b4>
   53508:	add	x28, x28, #0x393
   5350c:	mov	x25, x19
   53510:	tbz	w8, #4, 53524 <print_arm_disassembler_options@@Base+0x5d68>
   53514:	ldr	x1, [sp, #112]
   53518:	ldr	w2, [sp, #120]
   5351c:	mov	x0, x27
   53520:	blr	x25
   53524:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53528:	mov	x0, x27
   5352c:	add	x1, x1, #0xeb
   53530:	blr	x25
   53534:	ldur	x9, [x29, #-88]
   53538:	ldur	w21, [x29, #-76]
   5353c:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   53540:	adrp	x26, 58000 <xexit@@Base+0x1dd4>
   53544:	adrp	x19, 66000 <fields@@Base+0xd1b4>
   53548:	cmp	w9, #0xf
   5354c:	add	x20, x20, #0x86c
   53550:	add	x26, x26, #0x84f
   53554:	add	x19, x19, #0x3ad
   53558:	b.eq	53738 <print_arm_disassembler_options@@Base+0x5f7c>  // b.none
   5355c:	cmp	w9, #0xd
   53560:	b.eq	53664 <print_arm_disassembler_options@@Base+0x5ea8>  // b.none
   53564:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   53568:	ldr	w8, [x8, #1560]
   5356c:	adrp	x11, 86000 <aarch64_operands@@Base+0x1c38>
   53570:	mov	w10, #0x90                  	// #144
   53574:	add	x11, x11, #0xaf8
   53578:	madd	x8, x8, x10, x11
   5357c:	add	x8, x8, x9, lsl #3
   53580:	ldr	x2, [x8, #16]
   53584:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53588:	mov	x0, x27
   5358c:	add	x1, x1, #0x13e
   53590:	blr	x25
   53594:	add	x23, x23, #0x1
   53598:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   5359c:	ldr	w8, [sp, #56]
   535a0:	ldur	w2, [x29, #-92]
   535a4:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   535a8:	mov	x0, x27
   535ac:	add	w3, w8, w24
   535b0:	add	x1, x1, #0x399
   535b4:	blr	x25
   535b8:	mov	x19, x27
   535bc:	mov	x21, x25
   535c0:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   535c4:	ldr	w8, [x8, #1560]
   535c8:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   535cc:	mov	w9, #0x90                  	// #144
   535d0:	add	x10, x10, #0xaf8
   535d4:	madd	x8, x8, x9, x10
   535d8:	ldur	x9, [x29, #-72]
   535dc:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   535e0:	mov	x0, x19
   535e4:	add	x1, x1, #0x3a1
   535e8:	add	x8, x8, x9, lsl #3
   535ec:	ldr	x2, [x8, #16]
   535f0:	blr	x21
   535f4:	ldur	x8, [x29, #-144]
   535f8:	mov	x25, x21
   535fc:	mov	x27, x19
   53600:	cbz	w8, 53618 <print_arm_disassembler_options@@Base+0x5e5c>
   53604:	ldr	w2, [sp, #124]
   53608:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   5360c:	mov	x0, x27
   53610:	add	x1, x1, #0x3a8
   53614:	blr	x25
   53618:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5361c:	mov	x0, x27
   53620:	add	x1, x1, #0xeb
   53624:	blr	x25
   53628:	ldur	x9, [x29, #-88]
   5362c:	ldur	w24, [x29, #-36]
   53630:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   53634:	adrp	x26, 58000 <xexit@@Base+0x1dd4>
   53638:	adrp	x28, 66000 <fields@@Base+0xd1b4>
   5363c:	adrp	x19, 66000 <fields@@Base+0xd1b4>
   53640:	cmp	w9, #0xf
   53644:	add	x20, x20, #0x86c
   53648:	add	x26, x26, #0x84f
   5364c:	add	x28, x28, #0x393
   53650:	add	x19, x19, #0x3ad
   53654:	b.eq	5367c <print_arm_disassembler_options@@Base+0x5ec0>  // b.none
   53658:	ldur	w21, [x29, #-76]
   5365c:	cmp	w9, #0xd
   53660:	b.ne	53564 <print_arm_disassembler_options@@Base+0x5da8>  // b.any
   53664:	adrp	x1, 6a000 <fields@@Base+0x111b4>
   53668:	mov	x0, x27
   5366c:	add	x1, x1, #0x34f
   53670:	blr	x25
   53674:	add	x23, x23, #0x1
   53678:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   5367c:	ldur	w21, [x29, #-76]
   53680:	add	x23, x23, #0x1
   53684:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53688:	b.ne	536b0 <print_arm_disassembler_options@@Base+0x5ef4>  // b.any
   5368c:	ldr	x8, [sp, #48]
   53690:	cbz	w8, 536d8 <print_arm_disassembler_options@@Base+0x5f1c>
   53694:	ldp	x3, x2, [sp, #16]
   53698:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   5369c:	mov	x0, x27
   536a0:	add	x1, x1, #0x437
   536a4:	blr	x25
   536a8:	add	x23, x23, #0x1
   536ac:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   536b0:	ldr	x4, [sp, #48]
   536b4:	cbz	w4, 536ec <print_arm_disassembler_options@@Base+0x5f30>
   536b8:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   536bc:	mov	x0, x27
   536c0:	add	x1, x1, #0x3dc
   536c4:	ldr	x2, [sp, #40]
   536c8:	mov	w3, w8
   536cc:	blr	x25
   536d0:	add	x23, x23, #0x1
   536d4:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   536d8:	ldr	x2, [sp, #40]
   536dc:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   536e0:	mov	x0, x27
   536e4:	add	x1, x1, #0x3fa
   536e8:	b	530f4 <print_arm_disassembler_options@@Base+0x5938>
   536ec:	ldr	x20, [sp, #32]
   536f0:	ldr	w9, [sp, #12]
   536f4:	sturh	wzr, [x29, #-12]
   536f8:	adrp	x0, 9b000 <aarch64_operands@@Base+0x16c38>
   536fc:	lsr	x8, x20, #24
   53700:	sturb	w9, [x29, #-10]
   53704:	sturb	w8, [x29, #-9]
   53708:	ldr	x0, [x0, #3864]
   5370c:	sub	x1, x29, #0xc
   53710:	sub	x2, x29, #0x18
   53714:	bl	35940 <floatformat_to_double@plt>
   53718:	ldur	d0, [x29, #-24]
   5371c:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   53720:	mov	x0, x27
   53724:	add	x1, x1, #0x418
   53728:	mov	x2, x20
   5372c:	adrp	x20, 58000 <xexit@@Base+0x1dd4>
   53730:	add	x20, x20, #0x86c
   53734:	blr	x25
   53738:	add	x23, x23, #0x1
   5373c:	b	52dc0 <print_arm_disassembler_options@@Base+0x5604>
   53740:	ldur	x2, [x29, #-104]
   53744:	add	x8, x2, #0x10
   53748:	cmp	x8, #0x31
   5374c:	b.cc	53760 <print_arm_disassembler_options@@Base+0x5fa4>  // b.lo, b.ul, b.last
   53750:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53754:	add	x1, x1, #0xbb
   53758:	mov	x0, x27
   5375c:	blr	x25
   53760:	ldur	w8, [x29, #-60]
   53764:	cbz	w8, 53778 <print_arm_disassembler_options@@Base+0x5fbc>
   53768:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5376c:	add	x1, x1, #0x6b3
   53770:	mov	x0, x27
   53774:	blr	x25
   53778:	mov	w0, #0x1                   	// #1
   5377c:	b	537d4 <print_arm_disassembler_options@@Base+0x6018>
   53780:	and	w8, w1, #0xff000000
   53784:	mov	w9, #0xfe000000            	// #-33554432
   53788:	cmp	w8, w9
   5378c:	b.eq	529c8 <print_arm_disassembler_options@@Base+0x520c>  // b.none
   53790:	mov	w9, #0xfc000000            	// #-67108864
   53794:	cmp	w8, w9
   53798:	b.eq	529c8 <print_arm_disassembler_options@@Base+0x520c>  // b.none
   5379c:	mov	w9, #0xf9000000            	// #-117440512
   537a0:	cmp	w8, w9
   537a4:	b.ne	537b4 <print_arm_disassembler_options@@Base+0x5ff8>  // b.any
   537a8:	mov	w8, #0xd000000             	// #218103808
   537ac:	eor	x1, x1, x8
   537b0:	b	529c8 <print_arm_disassembler_options@@Base+0x520c>
   537b4:	mov	w8, #0xf5f                 	// #3935
   537b8:	movk	w8, #0xff91, lsl #16
   537bc:	mov	w9, #0xb10                 	// #2832
   537c0:	and	x8, x1, x8
   537c4:	movk	w9, #0xee80, lsl #16
   537c8:	cmp	x8, x9
   537cc:	b.eq	529c8 <print_arm_disassembler_options@@Base+0x520c>  // b.none
   537d0:	mov	w0, wzr
   537d4:	ldp	x20, x19, [sp, #384]
   537d8:	ldp	x22, x21, [sp, #368]
   537dc:	ldp	x24, x23, [sp, #352]
   537e0:	ldp	x26, x25, [sp, #336]
   537e4:	ldp	x28, x27, [sp, #320]
   537e8:	ldp	x29, x30, [sp, #304]
   537ec:	add	sp, sp, #0x190
   537f0:	ret
   537f4:	bl	35700 <abort@plt>
   537f8:	stp	x29, x30, [sp, #-80]!
   537fc:	str	x25, [sp, #16]
   53800:	stp	x24, x23, [sp, #32]
   53804:	stp	x22, x21, [sp, #48]
   53808:	stp	x20, x19, [sp, #64]
   5380c:	ldp	x24, x19, [x1]
   53810:	mov	w8, #0x20f0000             	// #34537472
   53814:	and	x8, x2, x8
   53818:	mov	x20, x2
   5381c:	cmp	x8, #0xf0, lsl #12
   53820:	mov	x29, sp
   53824:	b.ne	5387c <print_arm_disassembler_options@@Base+0x60c0>  // b.any
   53828:	mov	x21, x1
   5382c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53830:	mov	x22, x0
   53834:	add	x1, x1, #0x6c6
   53838:	mov	x0, x19
   5383c:	and	x23, x20, #0xfff
   53840:	blr	x24
   53844:	tbnz	w20, #24, 538f0 <print_arm_disassembler_options@@Base+0x6134>
   53848:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   5384c:	adrp	x9, 62000 <fields@@Base+0x91b4>
   53850:	add	x8, x8, #0x84f
   53854:	add	x9, x9, #0xfc9
   53858:	tst	x20, #0x800000
   5385c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53860:	csel	x2, x9, x8, eq  // eq = none
   53864:	add	x1, x1, #0x45
   53868:	mov	x0, x19
   5386c:	mov	w3, w23
   53870:	blr	x24
   53874:	add	x20, x22, #0x8
   53878:	b	5396c <print_arm_disassembler_options@@Base+0x61b0>
   5387c:	adrp	x25, f2000 <aarch64_opcode_table@@Base+0x555d8>
   53880:	ldr	w8, [x25, #1560]
   53884:	adrp	x21, 86000 <aarch64_operands@@Base+0x1c38>
   53888:	mov	w10, #0x90                  	// #144
   5388c:	add	x21, x21, #0xaf8
   53890:	ubfx	x9, x20, #16, #4
   53894:	madd	x8, x8, x10, x21
   53898:	add	x8, x8, x9, lsl #3
   5389c:	ldr	x2, [x8, #16]
   538a0:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   538a4:	add	x1, x1, #0x3a4
   538a8:	mov	x0, x19
   538ac:	blr	x24
   538b0:	tbnz	w20, #24, 53994 <print_arm_disassembler_options@@Base+0x61d8>
   538b4:	tbnz	w20, #25, 539e8 <print_arm_disassembler_options@@Base+0x622c>
   538b8:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   538bc:	adrp	x9, 62000 <fields@@Base+0x91b4>
   538c0:	and	x21, x20, #0xfff
   538c4:	add	x8, x8, #0x84f
   538c8:	add	x9, x9, #0xfc9
   538cc:	tst	x20, #0x800000
   538d0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   538d4:	csel	x2, x9, x8, eq  // eq = none
   538d8:	add	x1, x1, #0x45
   538dc:	mov	x0, x19
   538e0:	mov	w3, w21
   538e4:	and	x22, x20, #0x800000
   538e8:	blr	x24
   538ec:	b	53bf4 <print_arm_disassembler_options@@Base+0x6438>
   538f0:	mov	w8, #0xfff                 	// #4095
   538f4:	movk	w8, #0x80, lsl #16
   538f8:	and	x8, x20, x8
   538fc:	cmp	x8, #0x800, lsl #12
   53900:	b.ne	53908 <print_arm_disassembler_options@@Base+0x614c>  // b.any
   53904:	tbz	w20, #21, 53934 <print_arm_disassembler_options@@Base+0x6178>
   53908:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   5390c:	adrp	x9, 62000 <fields@@Base+0x91b4>
   53910:	add	x8, x8, #0x84f
   53914:	add	x9, x9, #0xfc9
   53918:	tst	x20, #0x800000
   5391c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53920:	csel	x2, x9, x8, eq  // eq = none
   53924:	add	x1, x1, #0x46
   53928:	mov	x0, x19
   5392c:	mov	w3, w23
   53930:	blr	x24
   53934:	tst	x20, #0x800000
   53938:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   5393c:	adrp	x9, 6a000 <fields@@Base+0x111b4>
   53940:	add	x8, x8, #0x84f
   53944:	add	x9, x9, #0x34f
   53948:	cneg	x10, x23, eq  // eq = none
   5394c:	tst	x20, #0x200000
   53950:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53954:	add	x10, x22, x10
   53958:	csel	x2, x9, x8, ne  // ne = any
   5395c:	add	x1, x1, #0x65
   53960:	mov	x0, x19
   53964:	add	x20, x10, #0x8
   53968:	blr	x24
   5396c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53970:	add	x1, x1, #0x3e
   53974:	mov	x0, x19
   53978:	blr	x24
   5397c:	ldr	x8, [x21, #120]
   53980:	mov	x0, x20
   53984:	mov	x1, x21
   53988:	blr	x8
   5398c:	mov	x0, xzr
   53990:	b	53bfc <print_arm_disassembler_options@@Base+0x6440>
   53994:	adrp	x23, 58000 <xexit@@Base+0x1dd4>
   53998:	add	x23, x23, #0x84f
   5399c:	tbnz	w20, #25, 53a68 <print_arm_disassembler_options@@Base+0x62ac>
   539a0:	mov	w8, #0xfff                 	// #4095
   539a4:	movk	w8, #0x80, lsl #16
   539a8:	orr	x8, x8, #0x200000
   539ac:	and	x8, x20, x8
   539b0:	cmp	x8, #0x800, lsl #12
   539b4:	and	x22, x20, #0x800000
   539b8:	b.eq	53bd0 <print_arm_disassembler_options@@Base+0x6414>  // b.none
   539bc:	adrp	x8, 62000 <fields@@Base+0x91b4>
   539c0:	and	x21, x20, #0xfff
   539c4:	add	x8, x8, #0xfc9
   539c8:	cmp	x22, #0x0
   539cc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   539d0:	csel	x2, x8, x23, eq  // eq = none
   539d4:	add	x1, x1, #0x46
   539d8:	mov	x0, x19
   539dc:	mov	w3, w21
   539e0:	blr	x24
   539e4:	b	53bd4 <print_arm_disassembler_options@@Base+0x6418>
   539e8:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   539ec:	adrp	x9, 62000 <fields@@Base+0x91b4>
   539f0:	add	x8, x8, #0x84f
   539f4:	add	x9, x9, #0xfc9
   539f8:	tst	x20, #0x800000
   539fc:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53a00:	csel	x2, x9, x8, eq  // eq = none
   53a04:	add	x1, x1, #0x6ca
   53a08:	mov	x0, x19
   53a0c:	and	x22, x20, #0x800000
   53a10:	blr	x24
   53a14:	ldr	w8, [x25, #1560]
   53a18:	mov	w10, #0x90                  	// #144
   53a1c:	and	x9, x20, #0xf
   53a20:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53a24:	madd	x8, x8, x10, x21
   53a28:	add	x8, x8, x9, lsl #3
   53a2c:	ldr	x2, [x8, #16]
   53a30:	add	x1, x1, #0x816
   53a34:	mov	x0, x19
   53a38:	blr	x24
   53a3c:	tst	x20, #0xff0
   53a40:	b.eq	53ba8 <print_arm_disassembler_options@@Base+0x63ec>  // b.none
   53a44:	tbnz	w20, #4, 53ae0 <print_arm_disassembler_options@@Base+0x6324>
   53a48:	ubfx	w3, w20, #7, #5
   53a4c:	ubfx	w8, w20, #5, #2
   53a50:	cbnz	w3, 53b8c <print_arm_disassembler_options@@Base+0x63d0>
   53a54:	cmp	w8, #0x3
   53a58:	b.ne	53b88 <print_arm_disassembler_options@@Base+0x63cc>  // b.any
   53a5c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53a60:	add	x1, x1, #0x6d6
   53a64:	b	53b68 <print_arm_disassembler_options@@Base+0x63ac>
   53a68:	adrp	x8, 62000 <fields@@Base+0x91b4>
   53a6c:	add	x8, x8, #0xfc9
   53a70:	tst	x20, #0x800000
   53a74:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53a78:	csel	x2, x8, x23, eq  // eq = none
   53a7c:	add	x1, x1, #0x13e
   53a80:	mov	x0, x19
   53a84:	and	x22, x20, #0x800000
   53a88:	blr	x24
   53a8c:	ldr	w8, [x25, #1560]
   53a90:	mov	w10, #0x90                  	// #144
   53a94:	and	x9, x20, #0xf
   53a98:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53a9c:	madd	x8, x8, x10, x21
   53aa0:	add	x8, x8, x9, lsl #3
   53aa4:	ldr	x2, [x8, #16]
   53aa8:	add	x1, x1, #0x816
   53aac:	mov	x0, x19
   53ab0:	blr	x24
   53ab4:	tst	x20, #0xff0
   53ab8:	b.eq	53bd0 <print_arm_disassembler_options@@Base+0x6414>  // b.none
   53abc:	tbnz	w20, #4, 53b20 <print_arm_disassembler_options@@Base+0x6364>
   53ac0:	ubfx	w3, w20, #7, #5
   53ac4:	ubfx	w8, w20, #5, #2
   53ac8:	cbnz	w3, 53bb4 <print_arm_disassembler_options@@Base+0x63f8>
   53acc:	cmp	w8, #0x3
   53ad0:	b.ne	53bb0 <print_arm_disassembler_options@@Base+0x63f4>  // b.any
   53ad4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53ad8:	add	x1, x1, #0x6d6
   53adc:	b	53b7c <print_arm_disassembler_options@@Base+0x63c0>
   53ae0:	tbnz	w20, #7, 53b60 <print_arm_disassembler_options@@Base+0x63a4>
   53ae4:	ldr	w10, [x25, #1560]
   53ae8:	adrp	x9, 94000 <aarch64_operands@@Base+0xfc38>
   53aec:	ubfx	x8, x20, #5, #2
   53af0:	add	x9, x9, #0x6b8
   53af4:	ldr	x2, [x9, x8, lsl #3]
   53af8:	mov	w9, #0x90                  	// #144
   53afc:	ubfx	x8, x20, #8, #4
   53b00:	madd	x9, x10, x9, x21
   53b04:	add	x8, x9, x8, lsl #3
   53b08:	ldr	x3, [x8, #16]
   53b0c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53b10:	add	x1, x1, #0x702
   53b14:	mov	x0, x19
   53b18:	blr	x24
   53b1c:	b	53ba8 <print_arm_disassembler_options@@Base+0x63ec>
   53b20:	tbnz	w20, #7, 53b74 <print_arm_disassembler_options@@Base+0x63b8>
   53b24:	ldr	w10, [x25, #1560]
   53b28:	adrp	x9, 94000 <aarch64_operands@@Base+0xfc38>
   53b2c:	ubfx	x8, x20, #5, #2
   53b30:	add	x9, x9, #0x6b8
   53b34:	ldr	x2, [x9, x8, lsl #3]
   53b38:	mov	w9, #0x90                  	// #144
   53b3c:	ubfx	x8, x20, #8, #4
   53b40:	madd	x9, x10, x9, x21
   53b44:	add	x8, x9, x8, lsl #3
   53b48:	ldr	x3, [x8, #16]
   53b4c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53b50:	add	x1, x1, #0x702
   53b54:	mov	x0, x19
   53b58:	blr	x24
   53b5c:	b	53bd0 <print_arm_disassembler_options@@Base+0x6414>
   53b60:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53b64:	add	x1, x1, #0x6e5
   53b68:	mov	x0, x19
   53b6c:	blr	x24
   53b70:	b	53ba8 <print_arm_disassembler_options@@Base+0x63ec>
   53b74:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53b78:	add	x1, x1, #0x6e5
   53b7c:	mov	x0, x19
   53b80:	blr	x24
   53b84:	b	53bd0 <print_arm_disassembler_options@@Base+0x6414>
   53b88:	mov	w3, #0x20                  	// #32
   53b8c:	adrp	x9, 94000 <aarch64_operands@@Base+0xfc38>
   53b90:	add	x9, x9, #0x6b8
   53b94:	ldr	x2, [x9, w8, uxtw #3]
   53b98:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53b9c:	add	x1, x1, #0x6dc
   53ba0:	mov	x0, x19
   53ba4:	blr	x24
   53ba8:	mov	x21, xzr
   53bac:	b	53bf4 <print_arm_disassembler_options@@Base+0x6438>
   53bb0:	mov	w3, #0x20                  	// #32
   53bb4:	adrp	x9, 94000 <aarch64_operands@@Base+0xfc38>
   53bb8:	add	x9, x9, #0x6b8
   53bbc:	ldr	x2, [x9, w8, uxtw #3]
   53bc0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   53bc4:	add	x1, x1, #0x6dc
   53bc8:	mov	x0, x19
   53bcc:	blr	x24
   53bd0:	mov	x21, xzr
   53bd4:	adrp	x8, 6a000 <fields@@Base+0x111b4>
   53bd8:	add	x8, x8, #0x34f
   53bdc:	tst	x20, #0x200000
   53be0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   53be4:	csel	x2, x23, x8, eq  // eq = none
   53be8:	add	x1, x1, #0x65
   53bec:	mov	x0, x19
   53bf0:	blr	x24
   53bf4:	cmp	x22, #0x0
   53bf8:	cneg	x0, x21, eq  // eq = none
   53bfc:	ldp	x20, x19, [sp, #64]
   53c00:	ldp	x22, x21, [sp, #48]
   53c04:	ldp	x24, x23, [sp, #32]
   53c08:	ldr	x25, [sp, #16]
   53c0c:	ldp	x29, x30, [sp], #80
   53c10:	ret
   53c14:	sub	w8, w0, #0xf
   53c18:	cmp	w8, #0x6f
   53c1c:	b.hi	53c4c <print_arm_disassembler_options@@Base+0x6490>  // b.pmore
   53c20:	adrp	x9, 62000 <fields@@Base+0x91b4>
   53c24:	add	x9, x9, #0xcc4
   53c28:	adr	x10, 53c40 <print_arm_disassembler_options@@Base+0x6484>
   53c2c:	ldrb	w11, [x9, x8]
   53c30:	add	x10, x10, x11, lsl #2
   53c34:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c38:	add	x0, x0, #0x70a
   53c3c:	br	x10
   53c40:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c44:	add	x0, x0, #0x70f
   53c48:	ret
   53c4c:	mov	x0, xzr
   53c50:	ret
   53c54:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c58:	add	x0, x0, #0x716
   53c5c:	ret
   53c60:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c64:	add	x0, x0, #0x71d
   53c68:	ret
   53c6c:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c70:	add	x0, x0, #0x725
   53c74:	ret
   53c78:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c7c:	add	x0, x0, #0x72d
   53c80:	ret
   53c84:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c88:	add	x0, x0, #0x735
   53c8c:	ret
   53c90:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53c94:	add	x0, x0, #0x73c
   53c98:	ret
   53c9c:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53ca0:	add	x0, x0, #0x743
   53ca4:	ret
   53ca8:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cac:	add	x0, x0, #0x74a
   53cb0:	ret
   53cb4:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cb8:	add	x0, x0, #0x751
   53cbc:	ret
   53cc0:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cc4:	add	x0, x0, #0x759
   53cc8:	ret
   53ccc:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cd0:	add	x0, x0, #0x761
   53cd4:	ret
   53cd8:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cdc:	add	x0, x0, #0x769
   53ce0:	ret
   53ce4:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53ce8:	add	x0, x0, #0x770
   53cec:	ret
   53cf0:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53cf4:	add	x0, x0, #0x777
   53cf8:	ret
   53cfc:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d00:	add	x0, x0, #0x77e
   53d04:	ret
   53d08:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d0c:	add	x0, x0, #0x785
   53d10:	ret
   53d14:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d18:	add	x0, x0, #0x78c
   53d1c:	ret
   53d20:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d24:	add	x0, x0, #0x793
   53d28:	ret
   53d2c:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d30:	add	x0, x0, #0x79a
   53d34:	ret
   53d38:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d3c:	add	x0, x0, #0x7a1
   53d40:	ret
   53d44:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d48:	add	x0, x0, #0x7a8
   53d4c:	ret
   53d50:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d54:	add	x0, x0, #0x7af
   53d58:	ret
   53d5c:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d60:	add	x0, x0, #0x7b6
   53d64:	ret
   53d68:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d6c:	add	x0, x0, #0x7bd
   53d70:	ret
   53d74:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d78:	add	x0, x0, #0x7c5
   53d7c:	ret
   53d80:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d84:	add	x0, x0, #0x7cc
   53d88:	ret
   53d8c:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d90:	add	x0, x0, #0x7d1
   53d94:	ret
   53d98:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53d9c:	add	x0, x0, #0x7da
   53da0:	ret
   53da4:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53da8:	add	x0, x0, #0x7e3
   53dac:	ret
   53db0:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53db4:	add	x0, x0, #0x7ec
   53db8:	ret
   53dbc:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53dc0:	add	x0, x0, #0x7f5
   53dc4:	ret
   53dc8:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53dcc:	add	x0, x0, #0x7fe
   53dd0:	ret
   53dd4:	adrp	x0, 6b000 <fields@@Base+0x121b4>
   53dd8:	add	x0, x0, #0x807
   53ddc:	ret
   53de0:	sub	sp, sp, #0x190
   53de4:	stp	x29, x30, [sp, #304]
   53de8:	stp	x28, x27, [sp, #320]
   53dec:	stp	x26, x25, [sp, #336]
   53df0:	stp	x24, x23, [sp, #352]
   53df4:	stp	x22, x21, [sp, #368]
   53df8:	stp	x20, x19, [sp, #384]
   53dfc:	ldr	x23, [x0, #48]
   53e00:	add	x29, sp, #0x130
   53e04:	cbz	x23, 540d0 <print_arm_disassembler_options@@Base+0x6914>
   53e08:	ubfx	w8, w3, #8, #4
   53e0c:	cmp	w4, #0x0
   53e10:	and	x13, x3, #0xf0000000
   53e14:	mov	w11, #0xf0000000            	// #-268435456
   53e18:	ldr	x10, [x2, #96]
   53e1c:	cset	w18, ne  // ne = any
   53e20:	cmp	x13, x11
   53e24:	sub	w28, w8, #0x9
   53e28:	stur	x1, [x29, #-24]
   53e2c:	ubfx	x9, x3, #28, #4
   53e30:	cset	w11, eq  // eq = none
   53e34:	cmp	w28, #0x3
   53e38:	ldp	x27, x19, [x2]
   53e3c:	stp	x9, x13, [x29, #-40]
   53e40:	cset	w13, cc  // cc = lo, ul, last
   53e44:	stur	x2, [x29, #-56]
   53e48:	stur	w13, [x29, #-16]
   53e4c:	ldp	x13, x30, [x10]
   53e50:	mov	x2, #0xffffffffffcfffff    	// #-3145729
   53e54:	orr	w18, w18, w11
   53e58:	adrp	x17, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   53e5c:	tst	x30, #0x8000
   53e60:	cset	w11, eq  // eq = none
   53e64:	cmn	x13, #0x1
   53e68:	cset	w5, eq  // eq = none
   53e6c:	cmp	x30, x2
   53e70:	cset	w2, eq  // eq = none
   53e74:	and	w2, w2, w5
   53e78:	orr	w6, w11, w2
   53e7c:	ldr	w2, [x17, #1056]
   53e80:	ldr	x5, [x10, #16]
   53e84:	mov	w1, #0x1200000             	// #18874368
   53e88:	mov	w14, #0xf7f                 	// #3967
   53e8c:	mov	w15, #0xf                   	// #15
   53e90:	mov	w9, #0xf80                 	// #3968
   53e94:	mov	w12, #0x1                   	// #1
   53e98:	movk	w14, #0xec10, lsl #16
   53e9c:	movk	w15, #0xe00, lsl #16
   53ea0:	mov	w7, #0xc100                	// #49408
   53ea4:	mov	w21, #0xfdffffff            	// #-33554433
   53ea8:	movk	w9, #0xec10, lsl #16
   53eac:	mov	w11, #0xfe000000            	// #-33554432
   53eb0:	and	x17, x3, x1
   53eb4:	ubfx	w10, w2, #4, #4
   53eb8:	stur	w10, [x29, #-44]
   53ebc:	b	53ee0 <print_arm_disassembler_options@@Base+0x6724>
   53ec0:	mov	w16, #0xf80                 	// #3968
   53ec4:	movk	w16, #0xec00, lsl #16
   53ec8:	cmp	x10, x16
   53ecc:	b.ne	540e4 <print_arm_disassembler_options@@Base+0x6928>  // b.any
   53ed0:	cbnz	x17, 540e0 <print_arm_disassembler_options@@Base+0x6924>
   53ed4:	ldr	x23, [x0, #104]
   53ed8:	add	x0, x0, #0x38
   53edc:	cbz	x23, 540d0 <print_arm_disassembler_options@@Base+0x6914>
   53ee0:	ldr	x24, [x0, #8]
   53ee4:	cbnz	x24, 53ef8 <print_arm_disassembler_options@@Base+0x673c>
   53ee8:	ldr	x10, [x0, #16]
   53eec:	cbnz	x10, 53ef8 <print_arm_disassembler_options@@Base+0x673c>
   53ef0:	ldr	x10, [x0, #24]
   53ef4:	cbz	x10, 54060 <print_arm_disassembler_options@@Base+0x68a4>
   53ef8:	ldp	x10, x1, [x0, #32]
   53efc:	ldr	w16, [x0]
   53f00:	cmp	w4, #0x0
   53f04:	cset	w26, ne  // ne = any
   53f08:	orr	x20, x10, #0xe0000000
   53f0c:	orr	x25, x1, #0xf0000000
   53f10:	csel	x20, x20, x10, ne  // ne = any
   53f14:	cmp	w18, #0x0
   53f18:	csel	x1, x25, x1, ne  // ne = any
   53f1c:	cmp	w16, #0x1
   53f20:	cset	w25, ne  // ne = any
   53f24:	cmp	w16, #0x2
   53f28:	and	x16, x1, x3
   53f2c:	cset	w1, eq  // eq = none
   53f30:	cmp	x16, x20
   53f34:	b.ne	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.any
   53f38:	orr	w16, w26, w25
   53f3c:	and	w1, w26, w1
   53f40:	eor	w16, w1, w16
   53f44:	cbz	w16, 53ed4 <print_arm_disassembler_options@@Base+0x6718>
   53f48:	tst	x24, x13
   53f4c:	b.ne	53f68 <print_arm_disassembler_options@@Base+0x67ac>  // b.any
   53f50:	ldr	x16, [x0, #16]
   53f54:	tst	x16, x30
   53f58:	b.ne	53f68 <print_arm_disassembler_options@@Base+0x67ac>  // b.any
   53f5c:	ldr	x16, [x0, #24]
   53f60:	tst	x16, x5
   53f64:	b.eq	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.none
   53f68:	cmp	x10, x14
   53f6c:	mov	w22, wzr
   53f70:	b.gt	53fa4 <print_arm_disassembler_options@@Base+0x67e8>
   53f74:	cmp	x10, x15
   53f78:	b.gt	53fd0 <print_arm_disassembler_options@@Base+0x6814>
   53f7c:	mov	w16, #0xc000000             	// #201326592
   53f80:	cmp	x10, x16
   53f84:	b.eq	54038 <print_arm_disassembler_options@@Base+0x687c>  // b.none
   53f88:	mov	w16, #0xc100000             	// #202375168
   53f8c:	cmp	x10, x16
   53f90:	b.eq	54038 <print_arm_disassembler_options@@Base+0x687c>  // b.none
   53f94:	mov	w16, #0xe000000             	// #234881024
   53f98:	cmp	x10, x16
   53f9c:	b.eq	54038 <print_arm_disassembler_options@@Base+0x687c>  // b.none
   53fa0:	b	540e4 <print_arm_disassembler_options@@Base+0x6928>
   53fa4:	cmp	x10, x21
   53fa8:	b.gt	53ff4 <print_arm_disassembler_options@@Base+0x6838>
   53fac:	cmp	x10, x9
   53fb0:	b.eq	53ed0 <print_arm_disassembler_options@@Base+0x6714>  // b.none
   53fb4:	mov	w16, #0xfc000000            	// #-67108864
   53fb8:	cmp	x10, x16
   53fbc:	b.eq	5401c <print_arm_disassembler_options@@Base+0x6860>  // b.none
   53fc0:	mov	w16, #0xfc100000            	// #-66060288
   53fc4:	cmp	x10, x16
   53fc8:	b.eq	5401c <print_arm_disassembler_options@@Base+0x6860>  // b.none
   53fcc:	b	540e4 <print_arm_disassembler_options@@Base+0x6928>
   53fd0:	mov	w16, #0x10                  	// #16
   53fd4:	movk	w16, #0xe00, lsl #16
   53fd8:	cmp	x10, x16
   53fdc:	b.eq	54038 <print_arm_disassembler_options@@Base+0x687c>  // b.none
   53fe0:	mov	w16, #0x10                  	// #16
   53fe4:	movk	w16, #0xe10, lsl #16
   53fe8:	cmp	x10, x16
   53fec:	b.ne	53ec0 <print_arm_disassembler_options@@Base+0x6704>  // b.any
   53ff0:	b	54038 <print_arm_disassembler_options@@Base+0x687c>
   53ff4:	cmp	x10, x11
   53ff8:	b.eq	54038 <print_arm_disassembler_options@@Base+0x687c>  // b.none
   53ffc:	mov	w16, #0x10                  	// #16
   54000:	movk	w16, #0xfe10, lsl #16
   54004:	cmp	x10, x16
   54008:	b.eq	5401c <print_arm_disassembler_options@@Base+0x6860>  // b.none
   5400c:	mov	w16, #0x10                  	// #16
   54010:	movk	w16, #0xfe00, lsl #16
   54014:	cmp	x10, x16
   54018:	b.ne	540e4 <print_arm_disassembler_options@@Base+0x6928>  // b.any
   5401c:	tbnz	w6, #0, 540d8 <print_arm_disassembler_options@@Base+0x691c>
   54020:	cmp	w8, #0xf
   54024:	b.hi	540d8 <print_arm_disassembler_options@@Base+0x691c>  // b.pmore
   54028:	lsl	w10, w12, w8
   5402c:	tst	w10, w7
   54030:	b.ne	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.any
   54034:	b	540d8 <print_arm_disassembler_options@@Base+0x691c>
   54038:	cmp	w28, #0x3
   5403c:	b.cc	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.lo, b.ul, b.last
   54040:	tbnz	w6, #0, 540e0 <print_arm_disassembler_options@@Base+0x6924>
   54044:	cmp	w8, #0xf
   54048:	mov	w22, wzr
   5404c:	b.hi	540e4 <print_arm_disassembler_options@@Base+0x6928>  // b.pmore
   54050:	lsl	w10, w12, w8
   54054:	tst	w10, w7
   54058:	b.ne	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.any
   5405c:	b	540e4 <print_arm_disassembler_options@@Base+0x6928>
   54060:	ldr	x10, [x0, #32]
   54064:	sub	x1, x10, #0x2
   54068:	cmp	x1, #0x2
   5406c:	b.cc	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.lo, b.ul, b.last
   54070:	cmp	x10, #0x1
   54074:	b.ne	55148 <print_arm_disassembler_options@@Base+0x798c>  // b.any
   54078:	ldur	x10, [x29, #-56]
   5407c:	ldr	x10, [x10, #32]
   54080:	cmp	x10, #0xd
   54084:	b.hi	54098 <print_arm_disassembler_options@@Base+0x68dc>  // b.pmore
   54088:	lsl	x10, x12, x10
   5408c:	mov	w16, #0x3400                	// #13312
   54090:	tst	x10, x16
   54094:	b.ne	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.any
   54098:	add	x10, x0, #0x38
   5409c:	b	540b0 <print_arm_disassembler_options@@Base+0x68f4>
   540a0:	ldr	x10, [x0, #32]
   540a4:	cmp	x10, #0x2
   540a8:	add	x10, x0, #0x38
   540ac:	b.eq	53ed4 <print_arm_disassembler_options@@Base+0x6718>  // b.none
   540b0:	mov	x0, x10
   540b4:	ldr	x10, [x10, #8]
   540b8:	cbnz	x10, 540a0 <print_arm_disassembler_options@@Base+0x68e4>
   540bc:	ldr	x10, [x0, #16]
   540c0:	cbnz	x10, 540a0 <print_arm_disassembler_options@@Base+0x68e4>
   540c4:	ldr	x10, [x0, #24]
   540c8:	cbnz	x10, 540a0 <print_arm_disassembler_options@@Base+0x68e4>
   540cc:	b	53ed4 <print_arm_disassembler_options@@Base+0x6718>
   540d0:	mov	w0, wzr
   540d4:	b	55128 <print_arm_disassembler_options@@Base+0x796c>
   540d8:	ldur	w22, [x29, #-16]
   540dc:	b	540e4 <print_arm_disassembler_options@@Base+0x6928>
   540e0:	mov	w22, wzr
   540e4:	and	w0, w3, #0xf
   540e8:	ubfx	w9, w3, #5, #1
   540ec:	cmp	w2, #0x0
   540f0:	ldur	w2, [x29, #-44]
   540f4:	mov	x20, x19
   540f8:	mov	x19, x27
   540fc:	mov	w27, w22
   54100:	ldur	x22, [x29, #-40]
   54104:	bfi	w9, w0, #1, #4
   54108:	str	w9, [sp, #88]
   5410c:	ldur	x9, [x29, #-32]
   54110:	mov	w16, #0x10                  	// #16
   54114:	mov	w11, #0xf0000000            	// #-268435456
   54118:	lsr	x12, x3, #4
   5411c:	csel	w2, w16, w2, eq  // eq = none
   54120:	cmp	w22, #0xe
   54124:	lsr	x10, x3, #1
   54128:	and	x12, x12, #0x10
   5412c:	ccmp	x9, x11, #0x4, ne  // ne = any
   54130:	and	x5, x3, #0xf
   54134:	ubfx	x15, x3, #22, #1
   54138:	and	w0, w10, #0x70
   5413c:	bfxil	x12, x3, #0, #4
   54140:	csel	w11, w16, w22, eq  // eq = none
   54144:	cmp	w4, #0x0
   54148:	mov	w6, #0x20                  	// #32
   5414c:	ubfx	w14, w3, #12, #4
   54150:	mov	w24, w15
   54154:	orr	w9, w0, w5
   54158:	csel	w0, w2, w11, ne  // ne = any
   5415c:	cmp	x12, #0x0
   54160:	bfi	w24, w14, #1, #4
   54164:	bfi	w14, w15, #4, #1
   54168:	csel	x11, x6, x12, eq  // eq = none
   5416c:	tst	x3, #0x100
   54170:	mov	w21, #0x73                  	// #115
   54174:	csel	w12, w24, w14, eq  // eq = none
   54178:	mov	w14, #0x64                  	// #100
   5417c:	mov	w7, #0xf                   	// #15
   54180:	mov	w17, #0x1f                  	// #31
   54184:	stur	x11, [x29, #-128]
   54188:	mov	w11, #0x4                   	// #4
   5418c:	csel	w14, w21, w14, eq  // eq = none
   54190:	mov	w18, #0x2b                  	// #43
   54194:	mov	w13, #0x2d                  	// #45
   54198:	adrp	x26, 58000 <xexit@@Base+0x1dd4>
   5419c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   541a0:	csinc	w11, w11, wzr, ne  // ne = any
   541a4:	str	w14, [sp, #72]
   541a8:	csel	w14, w17, w7, eq  // eq = none
   541ac:	tst	x3, #0x800000
   541b0:	and	w25, w3, #0xff
   541b4:	add	x26, x26, #0x84f
   541b8:	add	x28, x28, #0xfc9
   541bc:	csel	w13, w13, w18, eq  // eq = none
   541c0:	adrp	x30, 6a000 <fields@@Base+0x111b4>
   541c4:	str	w13, [sp, #92]
   541c8:	mul	w11, w11, w25
   541cc:	csel	x13, x28, x26, eq  // eq = none
   541d0:	add	x30, x30, #0x34f
   541d4:	stp	x13, x11, [sp, #56]
   541d8:	cneg	x11, x11, eq  // eq = none
   541dc:	tst	x3, #0x200000
   541e0:	stur	x11, [x29, #-136]
   541e4:	csel	x11, x26, x30, eq  // eq = none
   541e8:	str	x11, [sp, #96]
   541ec:	tst	x3, #0x80
   541f0:	mov	w11, #0x10                  	// #16
   541f4:	orr	w15, w9, #0xffffff80
   541f8:	stur	x11, [x29, #-64]
   541fc:	csel	x11, x16, x6, eq  // eq = none
   54200:	tst	w9, #0x40
   54204:	mov	w1, #0x1200000             	// #18874368
   54208:	csel	w9, w9, w15, eq  // eq = none
   5420c:	cmp	w0, #0x10
   54210:	stur	w9, [x29, #-140]
   54214:	cset	w9, ne  // ne = any
   54218:	tst	x3, x1
   5421c:	cset	w13, eq  // eq = none
   54220:	cmp	w8, #0x9
   54224:	cset	w8, eq  // eq = none
   54228:	and	w8, w8, w9
   5422c:	ldur	x9, [x29, #-24]
   54230:	and	w17, w10, #0x10
   54234:	mov	w10, #0x8000                	// #32768
   54238:	movk	w10, #0x40, lsl #16
   5423c:	and	x9, x9, #0xfffffffffffffffc
   54240:	str	x9, [sp, #32]
   54244:	mov	w9, #0x100                 	// #256
   54248:	and	x10, x3, x10
   5424c:	movk	w9, #0x40, lsl #16
   54250:	stur	x10, [x29, #-80]
   54254:	mov	w10, #0x80                  	// #128
   54258:	stur	w8, [x29, #-68]
   5425c:	lsr	x8, x3, #22
   54260:	and	x9, x3, x9
   54264:	movk	w10, #0x8, lsl #16
   54268:	mov	w22, w27
   5426c:	mov	x27, x19
   54270:	mov	x19, x20
   54274:	mov	x20, x3
   54278:	str	w14, [sp, #12]
   5427c:	and	w14, w8, #0x6
   54280:	lsr	x8, x3, #16
   54284:	str	x9, [sp, #152]
   54288:	ubfx	x9, x3, #18, #14
   5428c:	and	x10, x3, x10
   54290:	str	x11, [sp, #48]
   54294:	and	w8, w8, #0xf0
   54298:	and	w15, w9, #0x10
   5429c:	ubfx	x9, x3, #3, #29
   542a0:	ubfx	x16, x3, #16, #4
   542a4:	ubfx	w11, w20, #7, #1
   542a8:	str	x10, [sp, #144]
   542ac:	lsr	x10, x3, #19
   542b0:	and	w9, w9, #0x10
   542b4:	bfi	w11, w16, #1, #4
   542b8:	and	x18, x10, #0x8
   542bc:	ubfx	x10, x3, #8, #1
   542c0:	orr	w8, w8, w5
   542c4:	str	w11, [sp, #20]
   542c8:	asr	x11, x3, x10
   542cc:	str	w8, [sp, #140]
   542d0:	orr	w8, w16, w9
   542d4:	str	w8, [sp, #16]
   542d8:	and	w8, w11, #0x7f
   542dc:	str	w8, [sp, #136]
   542e0:	add	w8, w8, w12
   542e4:	eor	w10, w10, #0x1
   542e8:	sub	w8, w8, #0x1
   542ec:	str	w8, [sp, #8]
   542f0:	asr	w8, w8, w10
   542f4:	str	w8, [sp, #4]
   542f8:	mov	w8, #0x1                   	// #1
   542fc:	cinc	x8, x8, ne  // ne = any
   54300:	cmp	x16, #0xf
   54304:	stur	x8, [x29, #-88]
   54308:	cset	w8, eq  // eq = none
   5430c:	orr	w8, w13, w8
   54310:	stur	w8, [x29, #-92]
   54314:	ubfx	x8, x3, #4, #4
   54318:	str	x8, [sp, #128]
   5431c:	and	x8, x3, #0x800000
   54320:	stur	x8, [x29, #-40]
   54324:	and	x8, x3, #0x100
   54328:	str	x8, [sp, #120]
   5432c:	and	x8, x3, #0x60
   54330:	bfxil	w15, w20, #12, #4
   54334:	str	x8, [sp, #112]
   54338:	ubfx	x8, x3, #1, #6
   5433c:	str	w24, [sp, #84]
   54340:	bfxil	w14, w20, #21, #1
   54344:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54348:	adrp	x24, 69000 <fields@@Base+0x101b4>
   5434c:	str	x8, [sp, #104]
   54350:	add	w8, w8, w15
   54354:	bfxil	w17, w20, #0, #4
   54358:	bfxil	x18, x3, #13, #3
   5435c:	add	x28, x28, #0xd34
   54360:	mov	w26, #0xa                   	// #10
   54364:	add	x24, x24, #0xde6
   54368:	orr	w9, w14, #0x2
   5436c:	str	w8, [sp, #28]
   54370:	sub	w8, w8, #0x1
   54374:	stur	xzr, [x29, #-16]
   54378:	stur	w25, [x29, #-100]
   5437c:	stur	x0, [x29, #-32]
   54380:	stur	x5, [x29, #-120]
   54384:	str	w17, [sp, #80]
   54388:	stur	x18, [x29, #-112]
   5438c:	str	w12, [sp, #76]
   54390:	stur	x16, [x29, #-24]
   54394:	stur	w13, [x29, #-44]
   54398:	stur	w14, [x29, #-144]
   5439c:	str	w9, [sp, #44]
   543a0:	stur	w15, [x29, #-96]
   543a4:	str	w8, [sp, #24]
   543a8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   543ac:	adrp	x8, 90000 <aarch64_operands@@Base+0xbc38>
   543b0:	add	x8, x8, #0x9b8
   543b4:	ldr	x2, [x8, x28, lsl #3]
   543b8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   543bc:	mov	x0, x19
   543c0:	add	x1, x1, #0x816
   543c4:	blr	x27
   543c8:	adrp	x28, 62000 <fields@@Base+0x91b4>
   543cc:	add	x28, x28, #0xd34
   543d0:	add	x23, x21, #0x1
   543d4:	ldrb	w2, [x23]
   543d8:	cmp	w2, #0x25
   543dc:	b.eq	543fc <print_arm_disassembler_options@@Base+0x6c40>  // b.none
   543e0:	cbz	w2, 550ec <print_arm_disassembler_options@@Base+0x7930>
   543e4:	mov	x0, x19
   543e8:	mov	x1, x24
   543ec:	blr	x27
   543f0:	mov	x21, x23
   543f4:	add	x23, x23, #0x1
   543f8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   543fc:	mov	x21, x23
   54400:	ldrb	w25, [x21, #1]!
   54404:	sub	w8, w25, #0x25
   54408:	cmp	w8, #0x55
   5440c:	b.hi	55148 <print_arm_disassembler_options@@Base+0x798c>  // b.pmore
   54410:	adr	x9, 54420 <print_arm_disassembler_options@@Base+0x6c64>
   54414:	ldrh	w10, [x28, x8, lsl #1]
   54418:	add	x9, x9, x10, lsl #2
   5441c:	br	x9
   54420:	mov	x28, xzr
   54424:	mov	w8, wzr
   54428:	mov	x23, x21
   5442c:	sub	w9, w25, #0x30
   54430:	and	w9, w9, #0xff
   54434:	cmp	w9, #0x9
   54438:	b.hi	54460 <print_arm_disassembler_options@@Base+0x6ca4>  // b.pmore
   5443c:	mov	w9, wzr
   54440:	mul	w9, w9, w26
   54444:	add	w9, w9, w25, uxtb
   54448:	ldrb	w25, [x23, #1]!
   5444c:	sub	w9, w9, #0x30
   54450:	sub	w10, w25, #0x30
   54454:	cmp	w10, #0xa
   54458:	b.cc	54440 <print_arm_disassembler_options@@Base+0x6c84>  // b.lo, b.ul, b.last
   5445c:	b	54464 <print_arm_disassembler_options@@Base+0x6ca8>
   54460:	mov	w9, wzr
   54464:	and	w10, w25, #0xff
   54468:	cmp	w10, #0x2d
   5446c:	b.ne	544a8 <print_arm_disassembler_options@@Base+0x6cec>  // b.any
   54470:	ldrb	w25, [x23, #1]!
   54474:	sub	w10, w25, #0x30
   54478:	cmp	w10, #0x9
   5447c:	mov	x21, x23
   54480:	mov	w10, wzr
   54484:	b.hi	544b0 <print_arm_disassembler_options@@Base+0x6cf4>  // b.pmore
   54488:	mul	w10, w10, w26
   5448c:	add	w10, w10, w25, uxtb
   54490:	ldrb	w25, [x21, #1]!
   54494:	sub	w10, w10, #0x30
   54498:	sub	w11, w25, #0x30
   5449c:	cmp	w11, #0xa
   544a0:	b.cc	54488 <print_arm_disassembler_options@@Base+0x6ccc>  // b.lo, b.ul, b.last
   544a4:	b	544b0 <print_arm_disassembler_options@@Base+0x6cf4>
   544a8:	mov	w10, w9
   544ac:	mov	x21, x23
   544b0:	subs	w11, w10, w9
   544b4:	b.mi	55148 <print_arm_disassembler_options@@Base+0x798c>  // b.first
   544b8:	and	w10, w25, #0xff
   544bc:	sub	w10, w10, #0x27
   544c0:	cmp	w10, #0x51
   544c4:	b.hi	55148 <print_arm_disassembler_options@@Base+0x798c>  // b.pmore
   544c8:	mov	w12, #0x2                   	// #2
   544cc:	adrp	x15, 62000 <fields@@Base+0x91b4>
   544d0:	lsl	x12, x12, x11
   544d4:	add	x15, x15, #0xdea
   544d8:	lsr	x9, x20, x9
   544dc:	adr	x13, 543ac <print_arm_disassembler_options@@Base+0x6bf0>
   544e0:	ldrh	w14, [x15, x10, lsl #1]
   544e4:	add	x13, x13, x14, lsl #2
   544e8:	sub	x10, x12, #0x1
   544ec:	and	x9, x10, x9
   544f0:	add	w11, w8, w11
   544f4:	lsl	x9, x9, x8
   544f8:	add	w8, w11, #0x1
   544fc:	orr	x28, x9, x28
   54500:	add	x23, x21, #0x1
   54504:	br	x13
   54508:	ldrb	w25, [x23]
   5450c:	b	5442c <print_arm_disassembler_options@@Base+0x6c70>
   54510:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   54514:	ldr	w8, [x8, #1560]
   54518:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   5451c:	mov	w9, #0x90                  	// #144
   54520:	add	x10, x10, #0xaf8
   54524:	madd	x8, x8, x9, x10
   54528:	ldur	x9, [x29, #-24]
   5452c:	cmp	w25, #0x4b
   54530:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   54534:	mov	x0, x19
   54538:	add	x8, x8, x9, lsl #3
   5453c:	ldr	x2, [x8, #16]
   54540:	mov	w8, #0xff                  	// #255
   54544:	mov	w9, #0x7f                  	// #127
   54548:	csel	x8, x9, x8, eq  // eq = none
   5454c:	add	x1, x1, #0x3a4
   54550:	and	x23, x8, x20
   54554:	blr	x27
   54558:	ldur	x9, [x29, #-40]
   5455c:	ldur	x8, [x29, #-88]
   54560:	cmp	x9, #0x0
   54564:	ldur	w9, [x29, #-44]
   54568:	lsl	x8, x23, x8
   5456c:	cneg	x8, x8, eq  // eq = none
   54570:	cmp	w9, #0x0
   54574:	ldur	w9, [x29, #-92]
   54578:	csel	x28, x23, x8, ne  // ne = any
   5457c:	ldur	x23, [x29, #-16]
   54580:	cmp	w9, #0x0
   54584:	csel	x23, x23, x8, ne  // ne = any
   54588:	tbz	w20, #24, 54810 <print_arm_disassembler_options@@Base+0x7054>
   5458c:	cbz	x28, 54d8c <print_arm_disassembler_options@@Base+0x75d0>
   54590:	ldr	x3, [sp, #96]
   54594:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54598:	mov	x0, x19
   5459c:	add	x1, x1, #0x60
   545a0:	mov	w2, w28
   545a4:	blr	x27
   545a8:	b	54f34 <print_arm_disassembler_options@@Base+0x7778>
   545ac:	ldrb	w8, [x23, #2]!
   545b0:	sub	w8, w8, #0x30
   545b4:	cmp	w8, #0x4
   545b8:	b.hi	55148 <print_arm_disassembler_options@@Base+0x798c>  // b.pmore
   545bc:	adrp	x11, 62000 <fields@@Base+0x91b4>
   545c0:	add	x11, x11, #0xde0
   545c4:	adr	x9, 545d4 <print_arm_disassembler_options@@Base+0x6e18>
   545c8:	ldrh	w10, [x11, x8, lsl #1]
   545cc:	add	x9, x9, x10, lsl #2
   545d0:	br	x9
   545d4:	ldr	w8, [sp, #88]
   545d8:	ldr	w9, [sp, #80]
   545dc:	b	54cd8 <print_arm_disassembler_options@@Base+0x751c>
   545e0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   545e4:	mov	x0, x19
   545e8:	add	x1, x1, #0x28
   545ec:	blr	x27
   545f0:	add	x23, x21, #0x1
   545f4:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   545f8:	ldr	x8, [sp, #104]
   545fc:	cmp	w8, #0x1
   54600:	b.ne	54be0 <print_arm_disassembler_options@@Base+0x7424>  // b.any
   54604:	ldur	w2, [x29, #-96]
   54608:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5460c:	mov	x0, x19
   54610:	add	x1, x1, #0xfc
   54614:	blr	x27
   54618:	add	x23, x21, #0x1
   5461c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54620:	ldr	w8, [sp, #136]
   54624:	cmp	w8, #0x1
   54628:	b.eq	54db8 <print_arm_disassembler_options@@Base+0x75fc>  // b.none
   5462c:	cbnz	w8, 54dd4 <print_arm_disassembler_options@@Base+0x7618>
   54630:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54634:	mov	x0, x19
   54638:	add	x1, x1, #0x125
   5463c:	blr	x27
   54640:	add	x23, x21, #0x1
   54644:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54648:	ldur	x8, [x29, #-80]
   5464c:	mov	x0, x19
   54650:	cmp	x8, #0x400, lsl #12
   54654:	b.eq	54e3c <print_arm_disassembler_options@@Base+0x7680>  // b.none
   54658:	cmp	x8, #0x8, lsl #12
   5465c:	b.eq	54e50 <print_arm_disassembler_options@@Base+0x7694>  // b.none
   54660:	cbnz	x8, 54e64 <print_arm_disassembler_options@@Base+0x76a8>
   54664:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   54668:	add	x1, x1, #0x42e
   5466c:	blr	x27
   54670:	add	x23, x21, #0x1
   54674:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54678:	ldur	w2, [x29, #-140]
   5467c:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   54680:	mov	x0, x19
   54684:	add	x1, x1, #0x1
   54688:	blr	x27
   5468c:	add	x23, x21, #0x1
   54690:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54694:	ldur	x8, [x29, #-112]
   54698:	sub	x8, x8, #0x1
   5469c:	cmp	x8, #0xe
   546a0:	b.hi	54fdc <print_arm_disassembler_options@@Base+0x7820>  // b.pmore
   546a4:	adrp	x11, 62000 <fields@@Base+0x91b4>
   546a8:	add	x11, x11, #0xe96
   546ac:	adr	x9, 546bc <print_arm_disassembler_options@@Base+0x6f00>
   546b0:	ldrh	w10, [x11, x8, lsl #1]
   546b4:	add	x9, x9, x10, lsl #2
   546b8:	br	x9
   546bc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   546c0:	mov	x0, x19
   546c4:	add	x1, x1, #0x166
   546c8:	blr	x27
   546cc:	add	x23, x21, #0x1
   546d0:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   546d4:	ldr	x8, [sp, #152]
   546d8:	cmp	x8, #0x400, lsl #12
   546dc:	b.ge	54bfc <print_arm_disassembler_options@@Base+0x7440>  // b.tcont
   546e0:	mov	x0, x19
   546e4:	cbnz	x8, 54e78 <print_arm_disassembler_options@@Base+0x76bc>
   546e8:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   546ec:	add	x1, x1, #0x697
   546f0:	blr	x27
   546f4:	add	x23, x21, #0x1
   546f8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   546fc:	ldr	x8, [sp, #144]
   54700:	cmp	x8, #0x80, lsl #12
   54704:	b.eq	54c30 <print_arm_disassembler_options@@Base+0x7474>  // b.none
   54708:	cmp	x8, #0x80
   5470c:	b.eq	54c18 <print_arm_disassembler_options@@Base+0x745c>  // b.none
   54710:	cbz	x8, 54758 <print_arm_disassembler_options@@Base+0x6f9c>
   54714:	adrp	x0, 56000 <floatformat_from_double@@Base+0x4f8>
   54718:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5471c:	mov	w2, #0x5                   	// #5
   54720:	add	x0, x0, #0x270
   54724:	add	x1, x1, #0x1a1
   54728:	bl	35a50 <dcgettext@plt>
   5472c:	mov	x1, x0
   54730:	mov	x0, x19
   54734:	blr	x27
   54738:	add	x23, x21, #0x1
   5473c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54740:	ldur	x8, [x29, #-80]
   54744:	cmp	x8, #0x400, lsl #12
   54748:	b.eq	54c30 <print_arm_disassembler_options@@Base+0x7474>  // b.none
   5474c:	cmp	x8, #0x8, lsl #12
   54750:	b.eq	54c18 <print_arm_disassembler_options@@Base+0x745c>  // b.none
   54754:	cbnz	x8, 54788 <print_arm_disassembler_options@@Base+0x6fcc>
   54758:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   5475c:	mov	x0, x19
   54760:	add	x1, x1, #0x817
   54764:	blr	x27
   54768:	add	x23, x21, #0x1
   5476c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54770:	ldr	x8, [sp, #112]
   54774:	cbz	x8, 54808 <print_arm_disassembler_options@@Base+0x704c>
   54778:	cmp	x8, #0x40
   5477c:	b.eq	54e8c <print_arm_disassembler_options@@Base+0x76d0>  // b.none
   54780:	cmp	x8, #0x20
   54784:	b.ne	54ea4 <print_arm_disassembler_options@@Base+0x76e8>  // b.any
   54788:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   5478c:	mov	x0, x19
   54790:	add	x1, x1, #0xb30
   54794:	blr	x27
   54798:	add	x23, x21, #0x1
   5479c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   547a0:	ldr	w2, [sp, #140]
   547a4:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   547a8:	mov	x0, x19
   547ac:	add	x1, x1, #0x1
   547b0:	blr	x27
   547b4:	add	x23, x21, #0x1
   547b8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   547bc:	ldur	x2, [x29, #-128]
   547c0:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   547c4:	mov	x0, x19
   547c8:	add	x1, x1, #0x858
   547cc:	b	54804 <print_arm_disassembler_options@@Base+0x7048>
   547d0:	ldur	x8, [x29, #-32]
   547d4:	cmp	w8, #0x10
   547d8:	csinc	w22, w22, wzr, eq  // eq = none
   547dc:	ldur	w8, [x29, #-68]
   547e0:	cmp	w8, #0x0
   547e4:	csinc	w22, w22, wzr, eq  // eq = none
   547e8:	ldur	x8, [x29, #-32]
   547ec:	adrp	x9, 8a000 <aarch64_operands@@Base+0x5c38>
   547f0:	add	x9, x9, #0xf38
   547f4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   547f8:	ldr	x2, [x9, x8, lsl #3]
   547fc:	mov	x0, x19
   54800:	add	x1, x1, #0x816
   54804:	blr	x27
   54808:	add	x23, x21, #0x1
   5480c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54810:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54814:	mov	x0, x19
   54818:	add	x1, x1, #0xeb
   5481c:	blr	x27
   54820:	tbnz	w20, #21, 54c48 <print_arm_disassembler_options@@Base+0x748c>
   54824:	ldur	x8, [x29, #-40]
   54828:	adrp	x9, 62000 <fields@@Base+0x91b4>
   5482c:	add	x9, x9, #0xfc9
   54830:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54834:	orr	x8, x28, x8
   54838:	cmp	x8, #0x0
   5483c:	adrp	x8, 58000 <xexit@@Base+0x1dd4>
   54840:	add	x8, x8, #0x84f
   54844:	csel	x2, x9, x8, eq  // eq = none
   54848:	mov	x0, x19
   5484c:	add	x1, x1, #0xf3
   54850:	mov	w3, w28
   54854:	blr	x27
   54858:	mov	x23, x28
   5485c:	b	54f34 <print_arm_disassembler_options@@Base+0x7778>
   54860:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   54864:	ldr	w8, [x8, #1560]
   54868:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   5486c:	mov	w9, #0x90                  	// #144
   54870:	add	x10, x10, #0xaf8
   54874:	madd	x8, x8, x9, x10
   54878:	ldur	x9, [x29, #-24]
   5487c:	adrp	x1, 66000 <fields@@Base+0xd1b4>
   54880:	mov	x0, x19
   54884:	add	x1, x1, #0x3a4
   54888:	add	x8, x8, x9, lsl #3
   5488c:	ldr	x2, [x8, #16]
   54890:	blr	x27
   54894:	ldr	x8, [sp, #120]
   54898:	ldur	x9, [x29, #-136]
   5489c:	mov	x0, x19
   548a0:	cmp	x8, #0x0
   548a4:	ldur	x8, [x29, #-16]
   548a8:	csel	x8, x9, x8, ne  // ne = any
   548ac:	ldur	w9, [x29, #-100]
   548b0:	stur	x8, [x29, #-16]
   548b4:	cbz	w9, 54da4 <print_arm_disassembler_options@@Base+0x75e8>
   548b8:	tbnz	w20, #24, 54e00 <print_arm_disassembler_options@@Base+0x7644>
   548bc:	ldp	x2, x3, [sp, #56]
   548c0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   548c4:	add	x1, x1, #0x45
   548c8:	blr	x27
   548cc:	add	x23, x21, #0x1
   548d0:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   548d4:	adrp	x8, f2000 <aarch64_opcode_table@@Base+0x555d8>
   548d8:	ldr	w8, [x8, #1560]
   548dc:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   548e0:	mov	w9, #0x90                  	// #144
   548e4:	add	x10, x10, #0xaf8
   548e8:	madd	x8, x8, x9, x10
   548ec:	ldur	x9, [x29, #-120]
   548f0:	add	x8, x8, #0x10
   548f4:	ldr	x4, [x8, x9, lsl #3]
   548f8:	ldur	x9, [x29, #-24]
   548fc:	ldr	x2, [x8, x9, lsl #3]
   54900:	ldur	w9, [x29, #-144]
   54904:	sub	w8, w9, #0x4
   54908:	cmp	w8, #0x4
   5490c:	b.cs	54c70 <print_arm_disassembler_options@@Base+0x74b4>  // b.hs, b.nlast
   54910:	ldr	w3, [sp, #92]
   54914:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54918:	mov	x0, x19
   5491c:	add	x1, x1, #0x252
   54920:	blr	x27
   54924:	ldr	x2, [sp, #128]
   54928:	cbz	w2, 5493c <print_arm_disassembler_options@@Base+0x7180>
   5492c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54930:	mov	x0, x19
   54934:	add	x1, x1, #0x248
   54938:	blr	x27
   5493c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54940:	mov	x0, x19
   54944:	add	x1, x1, #0xeb
   54948:	blr	x27
   5494c:	ldr	w8, [sp, #44]
   54950:	cmp	w8, #0x7
   54954:	b.ne	54808 <print_arm_disassembler_options@@Base+0x704c>  // b.any
   54958:	adrp	x1, 6a000 <fields@@Base+0x111b4>
   5495c:	mov	x0, x19
   54960:	add	x1, x1, #0x34f
   54964:	blr	x27
   54968:	add	x23, x21, #0x1
   5496c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54970:	mov	x9, #0xffffffffffffffff    	// #-1
   54974:	lsl	x8, x9, x8
   54978:	mvn	x8, x8
   5497c:	cmp	x28, x8
   54980:	b.eq	54b00 <print_arm_disassembler_options@@Base+0x7344>  // b.none
   54984:	b	54d78 <print_arm_disassembler_options@@Base+0x75bc>
   54988:	mov	w9, #0x1                   	// #1
   5498c:	lsl	w8, w9, w8
   54990:	sxtw	x23, w8
   54994:	sub	x8, x23, w28, sxtw
   54998:	ldrb	w2, [x21, x8]
   5499c:	mov	x0, x19
   549a0:	mov	x1, x24
   549a4:	blr	x27
   549a8:	add	x21, x21, x23
   549ac:	adrp	x28, 62000 <fields@@Base+0x91b4>
   549b0:	add	x28, x28, #0xd34
   549b4:	add	x23, x21, #0x1
   549b8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   549bc:	and	x8, x28, #0x80
   549c0:	tst	x28, #0x40
   549c4:	lsl	w10, w8, #24
   549c8:	mov	w11, #0x3e000000            	// #1040187392
   549cc:	mov	w12, #0x40000000            	// #1073741824
   549d0:	csel	w11, w12, w11, eq  // eq = none
   549d4:	bfi	w10, w28, #19, #6
   549d8:	orr	w3, w10, w11
   549dc:	ubfx	w10, w3, #23, #8
   549e0:	mov	w11, #0x312d                	// #12589
   549e4:	mov	w9, #0x10                  	// #16
   549e8:	sub	w10, w10, #0x7c
   549ec:	movk	w11, #0x1, lsl #16
   549f0:	lsl	w10, w11, w10
   549f4:	bfxil	w9, w28, #0, #4
   549f8:	mul	w9, w10, w9
   549fc:	mov	w10, #0x6139                	// #24889
   54a00:	movk	w10, #0x68c2, lsl #16
   54a04:	mul	w10, w9, w10
   54a08:	mov	w12, #0x9680                	// #38528
   54a0c:	ror	w10, w10, #6
   54a10:	mov	w11, #0x10c6                	// #4294
   54a14:	movk	w12, #0x98, lsl #16
   54a18:	cmp	w10, w11
   54a1c:	udiv	w5, w9, w12
   54a20:	b.ls	54ed8 <print_arm_disassembler_options@@Base+0x771c>  // b.plast
   54a24:	cmp	x8, #0x0
   54a28:	mov	w8, #0x7e91                	// #32401
   54a2c:	movk	w8, #0x3afb, lsl #16
   54a30:	mov	w10, #0x20                  	// #32
   54a34:	mov	w11, #0x2d                  	// #45
   54a38:	mul	w8, w9, w8
   54a3c:	csel	w4, w10, w11, eq  // eq = none
   54a40:	mov	w10, #0x8db8                	// #36280
   54a44:	ror	w8, w8, #4
   54a48:	movk	w10, #0x6, lsl #16
   54a4c:	cmp	w8, w10
   54a50:	msub	w6, w5, w12, w9
   54a54:	b.ls	55068 <print_arm_disassembler_options@@Base+0x78ac>  // b.plast
   54a58:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54a5c:	mov	x0, x19
   54a60:	add	x1, x1, #0x202
   54a64:	b	54f04 <print_arm_disassembler_options@@Base+0x7748>
   54a68:	cmp	x28, #0xf
   54a6c:	csinc	w22, w22, wzr, ne  // ne = any
   54a70:	ldrb	w8, [x21, #1]
   54a74:	adrp	x9, f2000 <aarch64_opcode_table@@Base+0x555d8>
   54a78:	ldr	w9, [x9, #1560]
   54a7c:	adrp	x10, 86000 <aarch64_operands@@Base+0x1c38>
   54a80:	cmp	w8, #0x75
   54a84:	mov	w8, #0x90                  	// #144
   54a88:	add	x10, x10, #0xaf8
   54a8c:	madd	x8, x9, x8, x10
   54a90:	add	x8, x8, x28, lsl #3
   54a94:	ldr	x2, [x8, #16]
   54a98:	ldur	x8, [x29, #-64]
   54a9c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   54aa0:	csel	x21, x23, x21, eq  // eq = none
   54aa4:	mov	x0, x19
   54aa8:	csel	x23, x28, x8, eq  // eq = none
   54aac:	ccmp	x8, x28, #0x0, eq  // eq = none
   54ab0:	add	x1, x1, #0x816
   54ab4:	csinc	w22, w22, wzr, ne  // ne = any
   54ab8:	blr	x27
   54abc:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54ac0:	stur	x23, [x29, #-64]
   54ac4:	add	x28, x28, #0xd34
   54ac8:	add	x23, x21, #0x1
   54acc:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54ad0:	tbnz	w20, #6, 54ae4 <print_arm_disassembler_options@@Base+0x7328>
   54ad4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54ad8:	mov	x0, x19
   54adc:	add	x1, x1, #0x1b5
   54ae0:	b	54e28 <print_arm_disassembler_options@@Base+0x766c>
   54ae4:	lsr	x2, x28, #1
   54ae8:	mov	x0, x19
   54aec:	tbnz	w28, #0, 54c64 <print_arm_disassembler_options@@Base+0x74a8>
   54af0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54af4:	add	x1, x1, #0x1cf
   54af8:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54afc:	cbnz	x28, 54d78 <print_arm_disassembler_options@@Base+0x75bc>
   54b00:	ldrb	w2, [x23]
   54b04:	mov	x0, x19
   54b08:	mov	x1, x24
   54b0c:	blr	x27
   54b10:	b	54d78 <print_arm_disassembler_options@@Base+0x75bc>
   54b14:	cmp	x28, #0x3
   54b18:	b.hi	5509c <print_arm_disassembler_options@@Base+0x78e0>  // b.pmore
   54b1c:	adrp	x10, 62000 <fields@@Base+0x91b4>
   54b20:	add	x10, x10, #0xe8e
   54b24:	adr	x8, 54b34 <print_arm_disassembler_options@@Base+0x7378>
   54b28:	ldrh	w9, [x10, x28, lsl #1]
   54b2c:	add	x8, x8, x9, lsl #2
   54b30:	br	x8
   54b34:	adrp	x1, 5c000 <fields@@Base+0x31b4>
   54b38:	mov	x0, x19
   54b3c:	add	x1, x1, #0x4f3
   54b40:	b	550d8 <print_arm_disassembler_options@@Base+0x791c>
   54b44:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   54b48:	mov	x0, x19
   54b4c:	add	x1, x1, #0x858
   54b50:	mov	x2, x28
   54b54:	blr	x27
   54b58:	stur	x28, [x29, #-16]
   54b5c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54b60:	add	x28, x28, #0xd34
   54b64:	add	x23, x21, #0x1
   54b68:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54b6c:	cmp	x28, #0x8
   54b70:	b.cc	54e1c <print_arm_disassembler_options@@Base+0x7660>  // b.lo, b.ul, b.last
   54b74:	adrp	x9, 90000 <aarch64_operands@@Base+0xbc38>
   54b78:	and	x8, x28, #0x7
   54b7c:	add	x9, x9, #0x858
   54b80:	ldr	x2, [x9, x8, lsl #3]
   54b84:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54b88:	mov	x0, x19
   54b8c:	add	x1, x1, #0x219
   54b90:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54b94:	adrp	x8, 90000 <aarch64_operands@@Base+0xbc38>
   54b98:	add	x8, x8, #0x938
   54b9c:	b	543b4 <print_arm_disassembler_options@@Base+0x6bf8>
   54ba0:	ldr	x8, [sp, #48]
   54ba4:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   54ba8:	mov	x0, x19
   54bac:	add	x1, x1, #0x858
   54bb0:	sub	x2, x8, x28
   54bb4:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54bb8:	cmp	w8, #0x2
   54bbc:	b.ne	54e30 <print_arm_disassembler_options@@Base+0x7674>  // b.any
   54bc0:	adrp	x8, 90000 <aarch64_operands@@Base+0xbc38>
   54bc4:	add	x8, x8, #0x898
   54bc8:	b	543b4 <print_arm_disassembler_options@@Base+0x6bf8>
   54bcc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54bd0:	and	x2, x28, #0xffffffff
   54bd4:	mov	x0, x19
   54bd8:	add	x1, x1, #0xbe
   54bdc:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54be0:	ldr	w8, [sp, #28]
   54be4:	mov	x0, x19
   54be8:	cmp	w8, #0x21
   54bec:	b.cc	54ebc <print_arm_disassembler_options@@Base+0x7700>  // b.lo, b.ul, b.last
   54bf0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54bf4:	add	x1, x1, #0x102
   54bf8:	b	54ec4 <print_arm_disassembler_options@@Base+0x7708>
   54bfc:	b.ne	54c18 <print_arm_disassembler_options@@Base+0x745c>  // b.any
   54c00:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   54c04:	mov	x0, x19
   54c08:	add	x1, x1, #0x5a
   54c0c:	blr	x27
   54c10:	add	x23, x21, #0x1
   54c14:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54c18:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   54c1c:	mov	x0, x19
   54c20:	add	x1, x1, #0x2
   54c24:	blr	x27
   54c28:	add	x23, x21, #0x1
   54c2c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54c30:	adrp	x1, 69000 <fields@@Base+0x101b4>
   54c34:	mov	x0, x19
   54c38:	add	x1, x1, #0xd22
   54c3c:	blr	x27
   54c40:	add	x23, x21, #0x1
   54c44:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54c48:	cbz	x28, 54f0c <print_arm_disassembler_options@@Base+0x7750>
   54c4c:	adrp	x1, 59000 <fields@@Base+0x1b4>
   54c50:	mov	x0, x19
   54c54:	add	x1, x1, #0xb6c
   54c58:	mov	w2, w28
   54c5c:	blr	x27
   54c60:	b	54f34 <print_arm_disassembler_options@@Base+0x7778>
   54c64:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54c68:	add	x1, x1, #0x1ba
   54c6c:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54c70:	ldr	x23, [sp, #128]
   54c74:	cmp	w9, #0x3
   54c78:	b.eq	54c84 <print_arm_disassembler_options@@Base+0x74c8>  // b.none
   54c7c:	cmp	w9, #0x1
   54c80:	b.ne	55050 <print_arm_disassembler_options@@Base+0x7894>  // b.any
   54c84:	ldr	w3, [sp, #92]
   54c88:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54c8c:	mov	x0, x19
   54c90:	add	x1, x1, #0x23d
   54c94:	blr	x27
   54c98:	cbz	w23, 54808 <print_arm_disassembler_options@@Base+0x704c>
   54c9c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54ca0:	mov	x0, x19
   54ca4:	add	x1, x1, #0x248
   54ca8:	mov	w2, w23
   54cac:	blr	x27
   54cb0:	add	x23, x21, #0x1
   54cb4:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54cb8:	ldp	w9, w8, [sp, #16]
   54cbc:	b	54cd8 <print_arm_disassembler_options@@Base+0x751c>
   54cc0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54cc4:	mov	x0, x19
   54cc8:	add	x1, x1, #0x56
   54ccc:	blr	x27
   54cd0:	ldr	w8, [sp, #84]
   54cd4:	ldur	w9, [x29, #-96]
   54cd8:	cmp	w25, #0x79
   54cdc:	csel	w28, w8, w9, eq  // eq = none
   54ce0:	cmp	w25, #0x79
   54ce4:	mov	w8, #0x64                  	// #100
   54ce8:	mov	w9, #0x73                  	// #115
   54cec:	csel	w21, w9, w8, eq  // eq = none
   54cf0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54cf4:	mov	x0, x19
   54cf8:	add	x1, x1, #0x22d
   54cfc:	mov	w2, w21
   54d00:	mov	w3, w28
   54d04:	blr	x27
   54d08:	ldrb	w8, [x23]
   54d0c:	cmp	w8, #0x34
   54d10:	b.eq	54d60 <print_arm_disassembler_options@@Base+0x75a4>  // b.none
   54d14:	cmp	w8, #0x33
   54d18:	b.ne	54d78 <print_arm_disassembler_options@@Base+0x75bc>  // b.any
   54d1c:	ldur	w9, [x29, #-100]
   54d20:	cmp	w25, #0x79
   54d24:	cset	w8, ne  // ne = any
   54d28:	lsr	w8, w9, w8
   54d2c:	subs	w8, w8, #0x1
   54d30:	b.eq	54d4c <print_arm_disassembler_options@@Base+0x7590>  // b.none
   54d34:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54d38:	add	w3, w28, w8
   54d3c:	mov	x0, x19
   54d40:	add	x1, x1, #0x225
   54d44:	mov	w2, w21
   54d48:	blr	x27
   54d4c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54d50:	mov	x0, x19
   54d54:	add	x1, x1, #0x119
   54d58:	blr	x27
   54d5c:	b	54d78 <print_arm_disassembler_options@@Base+0x75bc>
   54d60:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54d64:	add	w3, w28, #0x1
   54d68:	mov	x0, x19
   54d6c:	add	x1, x1, #0x22b
   54d70:	mov	w2, w21
   54d74:	blr	x27
   54d78:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54d7c:	mov	x21, x23
   54d80:	add	x28, x28, #0xd34
   54d84:	add	x23, x23, #0x1
   54d88:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54d8c:	ldur	x8, [x29, #-40]
   54d90:	cbnz	x8, 54f24 <print_arm_disassembler_options@@Base+0x7768>
   54d94:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54d98:	mov	x0, x19
   54d9c:	add	x1, x1, #0xe6
   54da0:	b	54f30 <print_arm_disassembler_options@@Base+0x7774>
   54da4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54da8:	add	x1, x1, #0xeb
   54dac:	blr	x27
   54db0:	add	x23, x21, #0x1
   54db4:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54db8:	ldp	w2, w3, [sp, #72]
   54dbc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54dc0:	mov	x0, x19
   54dc4:	add	x1, x1, #0x12b
   54dc8:	blr	x27
   54dcc:	add	x23, x21, #0x1
   54dd0:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54dd4:	ldp	w5, w8, [sp, #8]
   54dd8:	mov	x0, x19
   54ddc:	cmp	w5, w8
   54de0:	b.le	54fa8 <print_arm_disassembler_options@@Base+0x77ec>
   54de4:	ldp	w2, w3, [sp, #72]
   54de8:	ldr	w4, [sp, #4]
   54dec:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54df0:	add	x1, x1, #0x137
   54df4:	blr	x27
   54df8:	add	x23, x21, #0x1
   54dfc:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e00:	ldp	x2, x3, [sp, #56]
   54e04:	ldr	x4, [sp, #96]
   54e08:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54e0c:	add	x1, x1, #0x232
   54e10:	blr	x27
   54e14:	add	x23, x21, #0x1
   54e18:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e1c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54e20:	mov	x0, x19
   54e24:	add	x1, x1, #0x21d
   54e28:	mov	x2, x28
   54e2c:	b	543c4 <print_arm_disassembler_options@@Base+0x6c08>
   54e30:	adrp	x8, 90000 <aarch64_operands@@Base+0xbc38>
   54e34:	add	x8, x8, #0x8b8
   54e38:	b	543b4 <print_arm_disassembler_options@@Base+0x6bf8>
   54e3c:	adrp	x1, 56000 <floatformat_from_double@@Base+0x4f8>
   54e40:	add	x1, x1, #0x452
   54e44:	blr	x27
   54e48:	add	x23, x21, #0x1
   54e4c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e50:	adrp	x1, 6e000 <fields@@Base+0x151b4>
   54e54:	add	x1, x1, #0x680
   54e58:	blr	x27
   54e5c:	add	x23, x21, #0x1
   54e60:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e64:	adrp	x1, 57000 <xexit@@Base+0xdd4>
   54e68:	add	x1, x1, #0x322
   54e6c:	blr	x27
   54e70:	add	x23, x21, #0x1
   54e74:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e78:	adrp	x1, 6d000 <fields@@Base+0x141b4>
   54e7c:	add	x1, x1, #0xf52
   54e80:	blr	x27
   54e84:	add	x23, x21, #0x1
   54e88:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54e8c:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   54e90:	mov	x0, x19
   54e94:	add	x1, x1, #0x5e5
   54e98:	blr	x27
   54e9c:	add	x23, x21, #0x1
   54ea0:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54ea4:	adrp	x1, 5b000 <fields@@Base+0x21b4>
   54ea8:	mov	x0, x19
   54eac:	add	x1, x1, #0x66b
   54eb0:	blr	x27
   54eb4:	add	x23, x21, #0x1
   54eb8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54ebc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54ec0:	add	x1, x1, #0x11b
   54ec4:	ldur	w2, [x29, #-96]
   54ec8:	ldr	w3, [sp, #24]
   54ecc:	blr	x27
   54ed0:	add	x23, x21, #0x1
   54ed4:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54ed8:	cmp	x8, #0x0
   54edc:	msub	w8, w5, w12, w9
   54ee0:	mov	w9, #0x20                  	// #32
   54ee4:	mov	w10, #0x2d                  	// #45
   54ee8:	csel	w4, w9, w10, eq  // eq = none
   54eec:	mov	w9, #0x4240                	// #16960
   54ef0:	movk	w9, #0xf, lsl #16
   54ef4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54ef8:	udiv	w6, w8, w9
   54efc:	mov	x0, x19
   54f00:	add	x1, x1, #0x1d4
   54f04:	mov	x2, x28
   54f08:	b	55088 <print_arm_disassembler_options@@Base+0x78cc>
   54f0c:	ldur	x8, [x29, #-40]
   54f10:	cbnz	x8, 54f34 <print_arm_disassembler_options@@Base+0x7778>
   54f14:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54f18:	mov	x0, x19
   54f1c:	add	x1, x1, #0xed
   54f20:	b	54f30 <print_arm_disassembler_options@@Base+0x7774>
   54f24:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54f28:	mov	x0, x19
   54f2c:	add	x1, x1, #0xeb
   54f30:	blr	x27
   54f34:	ldur	x8, [x29, #-24]
   54f38:	stur	x23, [x29, #-16]
   54f3c:	cmp	x8, #0xf
   54f40:	b.ne	54f5c <print_arm_disassembler_options@@Base+0x77a0>  // b.any
   54f44:	ldur	w8, [x29, #-44]
   54f48:	tbz	w8, #0, 54f6c <print_arm_disassembler_options@@Base+0x77b0>
   54f4c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54f50:	add	x28, x28, #0xd34
   54f54:	add	x23, x21, #0x1
   54f58:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54f5c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54f60:	add	x28, x28, #0xd34
   54f64:	add	x23, x21, #0x1
   54f68:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54f6c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54f70:	mov	x0, x19
   54f74:	add	x1, x1, #0x3e
   54f78:	blr	x27
   54f7c:	ldur	x1, [x29, #-56]
   54f80:	ldr	x10, [sp, #32]
   54f84:	ldrsw	x8, [x1, #172]
   54f88:	ldr	x9, [x1, #120]
   54f8c:	add	x10, x10, x28
   54f90:	add	x0, x10, x8, lsl #1
   54f94:	blr	x9
   54f98:	adrp	x28, 62000 <fields@@Base+0x91b4>
   54f9c:	add	x28, x28, #0xd34
   54fa0:	add	x23, x21, #0x1
   54fa4:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54fa8:	ldp	w2, w3, [sp, #72]
   54fac:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54fb0:	add	x1, x1, #0x155
   54fb4:	mov	w4, w2
   54fb8:	blr	x27
   54fbc:	add	x23, x21, #0x1
   54fc0:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54fc4:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54fc8:	mov	x0, x19
   54fcc:	add	x1, x1, #0x16c
   54fd0:	blr	x27
   54fd4:	add	x23, x21, #0x1
   54fd8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   54fdc:	ldur	x2, [x29, #-112]
   54fe0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54fe4:	mov	x0, x19
   54fe8:	add	x1, x1, #0x18f
   54fec:	b	54804 <print_arm_disassembler_options@@Base+0x7048>
   54ff0:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   54ff4:	mov	x0, x19
   54ff8:	add	x1, x1, #0x179
   54ffc:	blr	x27
   55000:	add	x23, x21, #0x1
   55004:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   55008:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5500c:	mov	x0, x19
   55010:	add	x1, x1, #0x17d
   55014:	blr	x27
   55018:	add	x23, x21, #0x1
   5501c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   55020:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   55024:	mov	x0, x19
   55028:	add	x1, x1, #0x180
   5502c:	blr	x27
   55030:	add	x23, x21, #0x1
   55034:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   55038:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5503c:	mov	x0, x19
   55040:	add	x1, x1, #0x188
   55044:	blr	x27
   55048:	add	x23, x21, #0x1
   5504c:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   55050:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   55054:	mov	x0, x19
   55058:	add	x1, x1, #0x25c
   5505c:	blr	x27
   55060:	add	x23, x21, #0x1
   55064:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   55068:	mov	w8, #0x1759                	// #5977
   5506c:	movk	w8, #0xd1b7, lsl #16
   55070:	umull	x8, w6, w8
   55074:	lsr	x6, x8, #45
   55078:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   5507c:	mov	x0, x19
   55080:	add	x1, x1, #0x1eb
   55084:	mov	x2, x28
   55088:	blr	x27
   5508c:	adrp	x28, 62000 <fields@@Base+0x91b4>
   55090:	add	x28, x28, #0xd34
   55094:	add	x23, x21, #0x1
   55098:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   5509c:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   550a0:	mov	x0, x19
   550a4:	add	x1, x1, #0x222
   550a8:	b	550d8 <print_arm_disassembler_options@@Base+0x791c>
   550ac:	adrp	x1, 5c000 <fields@@Base+0x31b4>
   550b0:	mov	x0, x19
   550b4:	add	x1, x1, #0x50f
   550b8:	b	550d8 <print_arm_disassembler_options@@Base+0x791c>
   550bc:	adrp	x1, 60000 <fields@@Base+0x71b4>
   550c0:	mov	x0, x19
   550c4:	add	x1, x1, #0xbf1
   550c8:	b	550d8 <print_arm_disassembler_options@@Base+0x791c>
   550cc:	adrp	x1, 5c000 <fields@@Base+0x31b4>
   550d0:	mov	x0, x19
   550d4:	add	x1, x1, #0x523
   550d8:	blr	x27
   550dc:	adrp	x28, 62000 <fields@@Base+0x91b4>
   550e0:	add	x28, x28, #0xd34
   550e4:	add	x23, x21, #0x1
   550e8:	b	543d4 <print_arm_disassembler_options@@Base+0x6c18>
   550ec:	ldur	x9, [x29, #-16]
   550f0:	add	x8, x9, #0x10
   550f4:	cmp	x8, #0x31
   550f8:	b.cc	55110 <print_arm_disassembler_options@@Base+0x7954>  // b.lo, b.ul, b.last
   550fc:	adrp	x1, 63000 <fields@@Base+0xa1b4>
   55100:	and	x2, x9, #0xffffffff
   55104:	add	x1, x1, #0xbb
   55108:	mov	x0, x19
   5510c:	blr	x27
   55110:	cbz	w22, 55124 <print_arm_disassembler_options@@Base+0x7968>
   55114:	adrp	x1, 6b000 <fields@@Base+0x121b4>
   55118:	add	x1, x1, #0x6b3
   5511c:	mov	x0, x19
   55120:	blr	x27
   55124:	mov	w0, #0x1                   	// #1
   55128:	ldp	x20, x19, [sp, #384]
   5512c:	ldp	x22, x21, [sp, #368]
   55130:	ldp	x24, x23, [sp, #352]
   55134:	ldp	x26, x25, [sp, #336]
   55138:	ldp	x28, x27, [sp, #320]
   5513c:	ldp	x29, x30, [sp, #304]
   55140:	add	sp, sp, #0x190
   55144:	ret
   55148:	bl	35700 <abort@plt>
   5514c:	cmp	w0, #0x98
   55150:	b.hi	5519c <print_arm_disassembler_options@@Base+0x79e0>  // b.pmore
   55154:	adrp	x9, 62000 <fields@@Base+0x91b4>
   55158:	mov	w8, w0
   5515c:	add	x9, x9, #0xeb4
   55160:	adr	x10, 55178 <print_arm_disassembler_options@@Base+0x79bc>
   55164:	ldrb	w11, [x9, x8]
   55168:	add	x10, x10, x11, lsl #2
   5516c:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   55170:	add	x0, x0, #0xfd8
   55174:	br	x10
   55178:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   5517c:	add	x0, x0, #0xfd1
   55180:	ret
   55184:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   55188:	add	x0, x0, #0xfd7
   5518c:	ret
   55190:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   55194:	add	x0, x0, #0xfd9
   55198:	ret
   5519c:	adrp	x0, 70000 <fields@@Base+0x171b4>
   551a0:	add	x0, x0, #0x7c
   551a4:	ret
   551a8:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551ac:	add	x0, x0, #0xfdd
   551b0:	ret
   551b4:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551b8:	add	x0, x0, #0xfe3
   551bc:	ret
   551c0:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551c4:	add	x0, x0, #0xfe2
   551c8:	ret
   551cc:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551d0:	add	x0, x0, #0xfe8
   551d4:	ret
   551d8:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551dc:	add	x0, x0, #0xfec
   551e0:	ret
   551e4:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551e8:	add	x0, x0, #0xff0
   551ec:	ret
   551f0:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   551f4:	add	x0, x0, #0xff7
   551f8:	ret
   551fc:	adrp	x0, 6f000 <fields@@Base+0x161b4>
   55200:	add	x0, x0, #0xffe
   55204:	ret
   55208:	adrp	x0, 70000 <fields@@Base+0x171b4>
   5520c:	add	x0, x0, #0x6
   55210:	ret
   55214:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55218:	add	x0, x0, #0xe
   5521c:	ret
   55220:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55224:	add	x0, x0, #0x1a
   55228:	ret
   5522c:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55230:	add	x0, x0, #0x24
   55234:	ret
   55238:	adrp	x0, 70000 <fields@@Base+0x171b4>
   5523c:	add	x0, x0, #0x2c
   55240:	ret
   55244:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55248:	add	x0, x0, #0x33
   5524c:	ret
   55250:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55254:	add	x0, x0, #0x3a
   55258:	ret
   5525c:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55260:	add	x0, x0, #0x44
   55264:	ret
   55268:	adrp	x0, 70000 <fields@@Base+0x171b4>
   5526c:	add	x0, x0, #0x4e
   55270:	ret
   55274:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55278:	add	x0, x0, #0x59
   5527c:	ret
   55280:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55284:	add	x0, x0, #0x64
   55288:	ret
   5528c:	adrp	x0, 70000 <fields@@Base+0x171b4>
   55290:	add	x0, x0, #0x71
   55294:	ret
   55298:	adrp	x0, 70000 <fields@@Base+0x171b4>
   5529c:	add	x0, x0, #0x2d
   552a0:	ret
   552a4:	mov	w0, #0x1                   	// #1
   552a8:	ret
   552ac:	ldp	w11, w15, [x0, #12]
   552b0:	ldp	w8, w9, [x0]
   552b4:	mov	w13, #0x1                   	// #1
   552b8:	mov	w10, #0x8                   	// #8
   552bc:	add	w11, w15, w11
   552c0:	cmp	w8, #0x0
   552c4:	sub	w14, w9, w11
   552c8:	sub	w11, w11, #0x1
   552cc:	csel	w11, w14, w11, eq  // eq = none
   552d0:	and	x16, x14, #0x7
   552d4:	lsr	x17, x11, #3
   552d8:	add	w11, w16, w15
   552dc:	ldrb	w18, [x1, x17]
   552e0:	cneg	w13, w13, ne  // ne = any
   552e4:	cmp	w11, #0x8
   552e8:	csel	w11, w11, w10, cc  // cc = lo, ul, last
   552ec:	mov	w12, #0xffffffff            	// #-1
   552f0:	sub	w14, w11, w16
   552f4:	lsr	x11, x18, x16
   552f8:	lsl	w16, w12, w14
   552fc:	sub	w15, w15, w14
   55300:	mvn	w16, w16
   55304:	cmp	w15, #0x8
   55308:	and	x11, x11, x16
   5530c:	csel	w16, w15, w10, cc  // cc = lo, ul, last
   55310:	cbz	w15, 55344 <print_arm_disassembler_options@@Base+0x7b88>
   55314:	add	w17, w13, w17
   55318:	ldrb	w18, [x1, w17, uxtw]
   5531c:	lsl	w2, w12, w16
   55320:	sub	w15, w15, w16
   55324:	cmp	w15, #0x8
   55328:	bic	w18, w18, w2
   5532c:	lsl	w18, w18, w14
   55330:	add	w14, w14, w16
   55334:	csel	w16, w15, w10, cc  // cc = lo, ul, last
   55338:	orr	x11, x11, x18
   5533c:	add	w17, w17, w13
   55340:	cbnz	w15, 55318 <print_arm_disassembler_options@@Base+0x7b5c>
   55344:	ldr	w10, [x0, #28]
   55348:	cmp	w8, #0x0
   5534c:	mvn	w12, w10
   55350:	add	w9, w9, w12
   55354:	csel	w8, w9, w10, eq  // eq = none
   55358:	lsr	x8, x8, #3
   5535c:	ldrb	w8, [x1, x8]
   55360:	and	w9, w9, #0x7
   55364:	cmp	x11, #0x0
   55368:	cset	w10, ne  // ne = any
   5536c:	lsr	w8, w8, w9
   55370:	tst	w8, #0x1
   55374:	cset	w8, eq  // eq = none
   55378:	eor	w0, w10, w8
   5537c:	ret
   55380:	str	x21, [sp, #-32]!
   55384:	stp	x20, x19, [sp, #16]
   55388:	ldr	x12, [x0, #56]
   5538c:	mov	w10, #0x1                   	// #1
   55390:	mov	w17, #0x8                   	// #8
   55394:	mov	w11, #0xffffffff            	// #-1
   55398:	ldp	w13, w16, [x12, #12]
   5539c:	ldp	w8, w9, [x12]
   553a0:	add	w13, w16, w13
   553a4:	cmp	w8, #0x0
   553a8:	sub	w14, w9, w13
   553ac:	sub	w13, w13, #0x1
   553b0:	csel	w13, w14, w13, eq  // eq = none
   553b4:	and	x14, x14, #0x7
   553b8:	lsr	x18, x13, #3
   553bc:	add	w13, w14, w16
   553c0:	cneg	w10, w10, ne  // ne = any
   553c4:	cmp	w13, #0x8
   553c8:	ldrb	w0, [x1, x18]
   553cc:	csel	w13, w13, w17, cc  // cc = lo, ul, last
   553d0:	sub	w15, w13, w14
   553d4:	lsl	w13, w11, w15
   553d8:	sub	w16, w16, w15
   553dc:	lsr	x2, x0, x14
   553e0:	mvn	w0, w13
   553e4:	cmp	w16, #0x8
   553e8:	and	x13, x2, x0
   553ec:	csel	w2, w16, w17, cc  // cc = lo, ul, last
   553f0:	cbz	w16, 5542c <print_arm_disassembler_options@@Base+0x7c70>
   553f4:	add	w3, w10, w18
   553f8:	mov	w4, w15
   553fc:	mov	w5, w16
   55400:	ldrb	w6, [x1, w3, uxtw]
   55404:	lsl	w7, w11, w2
   55408:	sub	w5, w5, w2
   5540c:	cmp	w5, #0x8
   55410:	bic	w6, w6, w7
   55414:	lsl	w6, w6, w4
   55418:	add	w4, w4, w2
   5541c:	csel	w2, w5, w17, cc  // cc = lo, ul, last
   55420:	orr	x13, x13, x6
   55424:	add	w3, w3, w10
   55428:	cbnz	w5, 55400 <print_arm_disassembler_options@@Base+0x7c44>
   5542c:	add	x11, x1, #0x8
   55430:	ldrb	w2, [x11, x18]
   55434:	cmp	w16, #0x8
   55438:	csel	w17, w16, w17, cc  // cc = lo, ul, last
   5543c:	lsr	x14, x2, x14
   55440:	and	x14, x14, x0
   55444:	cbz	w16, 55480 <print_arm_disassembler_options@@Base+0x7cc4>
   55448:	add	w18, w10, w18
   5544c:	mov	w0, #0xffffffff            	// #-1
   55450:	mov	w2, #0x8                   	// #8
   55454:	ldrb	w3, [x11, w18, uxtw]
   55458:	lsl	w4, w0, w17
   5545c:	sub	w16, w16, w17
   55460:	cmp	w16, #0x8
   55464:	bic	w3, w3, w4
   55468:	lsl	w3, w3, w15
   5546c:	add	w15, w15, w17
   55470:	csel	w17, w16, w2, cc  // cc = lo, ul, last
   55474:	orr	x14, x14, x3
   55478:	add	w18, w18, w10
   5547c:	cbnz	w16, 55454 <print_arm_disassembler_options@@Base+0x7c98>
   55480:	ldr	w15, [x12, #24]
   55484:	cmp	x13, x15
   55488:	b.ne	55540 <print_arm_disassembler_options@@Base+0x7d84>  // b.any
   5548c:	ldr	w16, [x12, #32]
   55490:	cmp	w16, #0x1
   55494:	b.lt	55644 <print_arm_disassembler_options@@Base+0x7e88>  // b.tstop
   55498:	ldr	w17, [x12, #28]
   5549c:	mov	w18, #0x20                  	// #32
   554a0:	mov	w0, #0x8                   	// #8
   554a4:	mov	w2, #0xffffffff            	// #-1
   554a8:	cmp	w16, #0x20
   554ac:	csel	w3, w16, w18, lt  // lt = tstop
   554b0:	add	w17, w3, w17
   554b4:	cmp	w8, #0x0
   554b8:	sub	w4, w9, w17
   554bc:	sub	w5, w17, #0x1
   554c0:	csel	w5, w4, w5, eq  // eq = none
   554c4:	and	x6, x4, #0x7
   554c8:	lsr	x19, x5, #3
   554cc:	add	w4, w6, w3
   554d0:	ldrb	w5, [x1, x19]
   554d4:	cmp	w4, #0x8
   554d8:	csel	w4, w4, w0, cc  // cc = lo, ul, last
   554dc:	sub	w4, w4, w6
   554e0:	lsl	w7, w2, w4
   554e4:	lsr	x5, x5, x6
   554e8:	sub	w6, w3, w4
   554ec:	mvn	w7, w7
   554f0:	cmp	w6, #0x8
   554f4:	and	x5, x5, x7
   554f8:	csel	w7, w6, w0, cc  // cc = lo, ul, last
   554fc:	cbz	w6, 55530 <print_arm_disassembler_options@@Base+0x7d74>
   55500:	add	w19, w10, w19
   55504:	ldrb	w20, [x1, w19, uxtw]
   55508:	lsl	w21, w2, w7
   5550c:	sub	w6, w6, w7
   55510:	cmp	w6, #0x8
   55514:	bic	w20, w20, w21
   55518:	lsl	w20, w20, w4
   5551c:	add	w4, w4, w7
   55520:	csel	w7, w6, w0, cc  // cc = lo, ul, last
   55524:	orr	x5, x5, x20
   55528:	add	w19, w19, w10
   5552c:	cbnz	w6, 55504 <print_arm_disassembler_options@@Base+0x7d48>
   55530:	cbnz	x5, 55704 <print_arm_disassembler_options@@Base+0x7f48>
   55534:	sub	w16, w16, w3
   55538:	cmp	w16, #0x1
   5553c:	b.ge	554a8 <print_arm_disassembler_options@@Base+0x7cec>  // b.tcont
   55540:	cbz	x13, 55644 <print_arm_disassembler_options@@Base+0x7e88>
   55544:	cmp	x13, x15
   55548:	b.eq	55644 <print_arm_disassembler_options@@Base+0x7e88>  // b.none
   5554c:	sub	x13, x13, #0x35
   55550:	cmp	x14, x13
   55554:	b.lt	55704 <print_arm_disassembler_options@@Base+0x7f48>  // b.tstop
   55558:	b.le	55560 <print_arm_disassembler_options@@Base+0x7da4>
   5555c:	cbnz	x14, 55648 <print_arm_disassembler_options@@Base+0x7e8c>
   55560:	cbz	x14, 55714 <print_arm_disassembler_options@@Base+0x7f58>
   55564:	ldp	w13, w12, [x12, #28]
   55568:	cmp	w8, #0x0
   5556c:	add	w14, w12, w13
   55570:	sub	w15, w9, w14
   55574:	sub	w14, w14, #0x1
   55578:	csel	w14, w15, w14, eq  // eq = none
   5557c:	lsr	x14, x14, #3
   55580:	ldrb	w14, [x1, x14]
   55584:	and	w15, w15, #0x7
   55588:	lsr	w14, w14, w15
   5558c:	tbnz	w14, #0, 55648 <print_arm_disassembler_options@@Base+0x7e8c>
   55590:	cmp	w12, #0x1
   55594:	b.lt	55704 <print_arm_disassembler_options@@Base+0x7f48>  // b.tstop
   55598:	mov	w14, #0x20                  	// #32
   5559c:	mov	w15, #0x8                   	// #8
   555a0:	mov	w16, #0xffffffff            	// #-1
   555a4:	cmp	w12, #0x20
   555a8:	csel	w17, w12, w14, lt  // lt = tstop
   555ac:	add	w13, w17, w13
   555b0:	cmp	w8, #0x0
   555b4:	sub	w18, w9, w13
   555b8:	sub	w0, w13, #0x1
   555bc:	csel	w0, w18, w0, eq  // eq = none
   555c0:	and	x1, x18, #0x7
   555c4:	lsr	x3, x0, #3
   555c8:	add	w18, w1, w17
   555cc:	ldrb	w0, [x11, x3]
   555d0:	cmp	w18, #0x8
   555d4:	csel	w18, w18, w15, cc  // cc = lo, ul, last
   555d8:	sub	w18, w18, w1
   555dc:	lsl	w2, w16, w18
   555e0:	lsr	x0, x0, x1
   555e4:	sub	w1, w17, w18
   555e8:	mvn	w2, w2
   555ec:	cmp	w1, #0x8
   555f0:	and	x0, x0, x2
   555f4:	csel	w2, w1, w15, cc  // cc = lo, ul, last
   555f8:	cbz	w1, 5562c <print_arm_disassembler_options@@Base+0x7e70>
   555fc:	add	w3, w10, w3
   55600:	ldrb	w4, [x11, w3, uxtw]
   55604:	lsl	w5, w16, w2
   55608:	sub	w1, w1, w2
   5560c:	cmp	w1, #0x8
   55610:	bic	w4, w4, w5
   55614:	lsl	w4, w4, w18
   55618:	add	w18, w18, w2
   5561c:	csel	w2, w1, w15, cc  // cc = lo, ul, last
   55620:	orr	x0, x0, x4
   55624:	add	w3, w3, w10
   55628:	cbnz	w1, 55600 <print_arm_disassembler_options@@Base+0x7e44>
   5562c:	cbnz	x0, 55648 <print_arm_disassembler_options@@Base+0x7e8c>
   55630:	sub	w12, w12, w17
   55634:	cmp	w12, #0x1
   55638:	mov	w0, #0x1                   	// #1
   5563c:	b.ge	555a4 <print_arm_disassembler_options@@Base+0x7de8>  // b.tcont
   55640:	b	55708 <print_arm_disassembler_options@@Base+0x7f4c>
   55644:	cbz	x14, 55650 <print_arm_disassembler_options@@Base+0x7e94>
   55648:	mov	w0, wzr
   5564c:	b	55708 <print_arm_disassembler_options@@Base+0x7f4c>
   55650:	ldr	w13, [x12, #32]
   55654:	cmp	w13, #0x1
   55658:	b.lt	55704 <print_arm_disassembler_options@@Base+0x7f48>  // b.tstop
   5565c:	ldr	w12, [x12, #28]
   55660:	mov	w14, #0x20                  	// #32
   55664:	mov	w15, #0x8                   	// #8
   55668:	mov	w16, #0xffffffff            	// #-1
   5566c:	cmp	w13, #0x20
   55670:	csel	w17, w13, w14, lt  // lt = tstop
   55674:	add	w12, w17, w12
   55678:	cmp	w8, #0x0
   5567c:	sub	w18, w9, w12
   55680:	sub	w0, w12, #0x1
   55684:	csel	w0, w18, w0, eq  // eq = none
   55688:	and	x1, x18, #0x7
   5568c:	lsr	x3, x0, #3
   55690:	add	w18, w1, w17
   55694:	ldrb	w0, [x11, x3]
   55698:	cmp	w18, #0x8
   5569c:	csel	w18, w18, w15, cc  // cc = lo, ul, last
   556a0:	sub	w18, w18, w1
   556a4:	lsl	w2, w16, w18
   556a8:	lsr	x0, x0, x1
   556ac:	sub	w1, w17, w18
   556b0:	mvn	w2, w2
   556b4:	cmp	w1, #0x8
   556b8:	and	x0, x0, x2
   556bc:	csel	w2, w1, w15, cc  // cc = lo, ul, last
   556c0:	cbz	w1, 556f4 <print_arm_disassembler_options@@Base+0x7f38>
   556c4:	add	w3, w10, w3
   556c8:	ldrb	w4, [x11, w3, uxtw]
   556cc:	lsl	w5, w16, w2
   556d0:	sub	w1, w1, w2
   556d4:	cmp	w1, #0x8
   556d8:	bic	w4, w4, w5
   556dc:	lsl	w4, w4, w18
   556e0:	add	w18, w18, w2
   556e4:	csel	w2, w1, w15, cc  // cc = lo, ul, last
   556e8:	orr	x0, x0, x4
   556ec:	add	w3, w3, w10
   556f0:	cbnz	w1, 556c8 <print_arm_disassembler_options@@Base+0x7f0c>
   556f4:	cbnz	x0, 55648 <print_arm_disassembler_options@@Base+0x7e8c>
   556f8:	sub	w13, w13, w17
   556fc:	cmp	w13, #0x1
   55700:	b.ge	5566c <print_arm_disassembler_options@@Base+0x7eb0>  // b.tcont
   55704:	mov	w0, #0x1                   	// #1
   55708:	ldp	x20, x19, [sp, #16]
   5570c:	ldr	x21, [sp], #32
   55710:	ret
   55714:	ldr	w10, [x12, #32]
   55718:	cbz	w10, 55704 <print_arm_disassembler_options@@Base+0x7f48>
   5571c:	ldr	w15, [x12, #28]
   55720:	mov	w14, wzr
   55724:	mov	w18, #0xffffffff            	// #-1
   55728:	mvn	w16, w15
   5572c:	add	w16, w16, w9
   55730:	b	5574c <print_arm_disassembler_options@@Base+0x7f90>
   55734:	mov	w17, w18
   55738:	add	w14, w14, #0x1
   5573c:	cmp	w14, w10
   55740:	sub	w16, w16, #0x1
   55744:	mov	w18, w17
   55748:	b.cs	55780 <print_arm_disassembler_options@@Base+0x7fc4>  // b.hs, b.nlast
   5574c:	add	w17, w15, w14
   55750:	cmp	w8, #0x0
   55754:	csel	w17, w16, w17, eq  // eq = none
   55758:	lsr	x17, x17, #3
   5575c:	ldrb	w17, [x11, x17]
   55760:	and	w0, w16, #0x7
   55764:	lsr	w17, w17, w0
   55768:	tbz	w17, #0, 55734 <print_arm_disassembler_options@@Base+0x7f78>
   5576c:	cmn	w18, #0x1
   55770:	mov	w17, w14
   55774:	b.eq	55738 <print_arm_disassembler_options@@Base+0x7f7c>  // b.none
   55778:	mov	w17, w18
   5577c:	b	5578c <print_arm_disassembler_options@@Base+0x7fd0>
   55780:	cmn	w17, #0x1
   55784:	b.eq	55704 <print_arm_disassembler_options@@Base+0x7f48>  // b.none
   55788:	mov	w14, #0xffffffff            	// #-1
   5578c:	neg	w11, w17
   55790:	sxtw	x11, w11
   55794:	cmp	x13, x11
   55798:	b.gt	55704 <print_arm_disassembler_options@@Base+0x7f48>
   5579c:	mov	w0, wzr
   557a0:	b.lt	55708 <print_arm_disassembler_options@@Base+0x7f4c>  // b.tstop
   557a4:	cmn	w14, #0x1
   557a8:	b.ne	55708 <print_arm_disassembler_options@@Base+0x7f4c>  // b.any
   557ac:	ldr	w11, [x12, #28]
   557b0:	cmp	w8, #0x0
   557b4:	add	w10, w11, w10
   557b8:	sub	w9, w9, w10
   557bc:	sub	w10, w10, #0x1
   557c0:	csel	w8, w9, w10, eq  // eq = none
   557c4:	lsr	x8, x8, #3
   557c8:	ldrb	w8, [x1, x8]
   557cc:	and	w9, w9, #0x7
   557d0:	lsr	w8, w8, w9
   557d4:	tst	w8, #0x1
   557d8:	cset	w0, eq  // eq = none
   557dc:	b	55708 <print_arm_disassembler_options@@Base+0x7f4c>

00000000000557e0 <floatformat_to_double@@Base>:
   557e0:	str	d8, [sp, #-112]!
   557e4:	stp	x29, x30, [sp, #16]
   557e8:	stp	x28, x27, [sp, #32]
   557ec:	stp	x26, x25, [sp, #48]
   557f0:	stp	x24, x23, [sp, #64]
   557f4:	stp	x22, x21, [sp, #80]
   557f8:	stp	x20, x19, [sp, #96]
   557fc:	ldp	w10, w11, [x0, #12]
   55800:	ldp	w8, w9, [x0]
   55804:	mov	w14, #0x1                   	// #1
   55808:	mov	w12, #0x8                   	// #8
   5580c:	add	w10, w11, w10
   55810:	cmp	w8, #0x0
   55814:	sub	w15, w9, w10
   55818:	sub	w16, w10, #0x1
   5581c:	cneg	w10, w14, ne  // ne = any
   55820:	csel	w14, w15, w16, eq  // eq = none
   55824:	and	x15, x15, #0x7
   55828:	lsr	x17, x14, #3
   5582c:	add	w14, w15, w11
   55830:	ldrb	w16, [x1, x17]
   55834:	cmp	w14, #0x8
   55838:	csel	w14, w14, w12, cc  // cc = lo, ul, last
   5583c:	mov	w13, #0xffffffff            	// #-1
   55840:	sub	w14, w14, w15
   55844:	lsr	x16, x16, x15
   55848:	lsl	w18, w13, w14
   5584c:	sub	w15, w11, w14
   55850:	mvn	w11, w18
   55854:	cmp	w15, #0x8
   55858:	mov	x20, x1
   5585c:	mov	x21, x0
   55860:	and	x11, x16, x11
   55864:	csel	w16, w15, w12, cc  // cc = lo, ul, last
   55868:	mov	x29, sp
   5586c:	cbz	w15, 558a0 <floatformat_to_double@@Base+0xc0>
   55870:	add	w17, w10, w17
   55874:	ldrb	w18, [x20, w17, uxtw]
   55878:	lsl	w0, w13, w16
   5587c:	sub	w15, w15, w16
   55880:	cmp	w15, #0x8
   55884:	bic	w18, w18, w0
   55888:	lsl	w18, w18, w14
   5588c:	add	w14, w14, w16
   55890:	csel	w16, w15, w12, cc  // cc = lo, ul, last
   55894:	orr	x11, x11, x18
   55898:	add	w17, w17, w10
   5589c:	cbnz	w15, 55874 <floatformat_to_double@@Base+0x94>
   558a0:	ldr	w12, [x21, #24]
   558a4:	ldr	w23, [x21, #32]
   558a8:	cmp	x11, x12
   558ac:	b.ne	55968 <floatformat_to_double@@Base+0x188>  // b.any
   558b0:	cmp	w23, #0x1
   558b4:	b.lt	55960 <floatformat_to_double@@Base+0x180>  // b.tstop
   558b8:	ldr	w11, [x21, #28]
   558bc:	mov	w12, #0x20                  	// #32
   558c0:	mov	w13, #0x8                   	// #8
   558c4:	mov	w14, #0xffffffff            	// #-1
   558c8:	cmp	w23, #0x20
   558cc:	csel	w15, w23, w12, lt  // lt = tstop
   558d0:	add	w11, w15, w11
   558d4:	cmp	w8, #0x0
   558d8:	sub	w16, w9, w11
   558dc:	sub	w17, w11, #0x1
   558e0:	csel	w17, w16, w17, eq  // eq = none
   558e4:	and	x18, x16, #0x7
   558e8:	lsr	x1, x17, #3
   558ec:	add	w16, w18, w15
   558f0:	ldrb	w17, [x20, x1]
   558f4:	cmp	w16, #0x8
   558f8:	csel	w16, w16, w13, cc  // cc = lo, ul, last
   558fc:	sub	w16, w16, w18
   55900:	lsl	w0, w14, w16
   55904:	lsr	x17, x17, x18
   55908:	sub	w18, w15, w16
   5590c:	mvn	w0, w0
   55910:	cmp	w18, #0x8
   55914:	and	x17, x17, x0
   55918:	csel	w0, w18, w13, cc  // cc = lo, ul, last
   5591c:	cbz	w18, 55950 <floatformat_to_double@@Base+0x170>
   55920:	add	w1, w10, w1
   55924:	ldrb	w4, [x20, w1, uxtw]
   55928:	lsl	w3, w14, w0
   5592c:	sub	w18, w18, w0
   55930:	cmp	w18, #0x8
   55934:	bic	w3, w4, w3
   55938:	lsl	w3, w3, w16
   5593c:	add	w16, w16, w0
   55940:	csel	w0, w18, w13, cc  // cc = lo, ul, last
   55944:	orr	x17, x17, x3
   55948:	add	w1, w1, w10
   5594c:	cbnz	w18, 55924 <floatformat_to_double@@Base+0x144>
   55950:	cbnz	x17, 559b0 <floatformat_to_double@@Base+0x1d0>
   55954:	sub	w23, w23, w15
   55958:	cmp	w23, #0x1
   5595c:	b.ge	558c8 <floatformat_to_double@@Base+0xe8>  // b.tcont
   55960:	mov	x10, #0x7ff0000000000000    	// #9218868437227405312
   55964:	b	559b4 <floatformat_to_double@@Base+0x1d4>
   55968:	ldr	w24, [x21, #28]
   5596c:	ldrsw	x8, [x21, #20]
   55970:	str	x2, [x29, #8]
   55974:	cbz	x11, 559a4 <floatformat_to_double@@Base+0x1c4>
   55978:	ldr	w9, [x21, #36]
   5597c:	sub	x22, x11, x8
   55980:	cmp	w9, #0x1
   55984:	b.ne	559d0 <floatformat_to_double@@Base+0x1f0>  // b.any
   55988:	fmov	d0, #1.000000000000000000e+00
   5598c:	mov	w0, w22
   55990:	bl	35290 <ldexp@plt>
   55994:	mov	v8.16b, v0.16b
   55998:	cmp	w23, #0x1
   5599c:	b.ge	559e0 <floatformat_to_double@@Base+0x200>  // b.tcont
   559a0:	b	55aa8 <floatformat_to_double@@Base+0x2c8>
   559a4:	mov	w9, #0x1                   	// #1
   559a8:	sub	x22, x9, x8
   559ac:	b	559d4 <floatformat_to_double@@Base+0x1f4>
   559b0:	mov	x10, #0x7ff8000000000000    	// #9221120237041090560
   559b4:	fmov	d8, x10
   559b8:	ldr	w10, [x21, #8]
   559bc:	cmp	w8, #0x0
   559c0:	mvn	w11, w10
   559c4:	add	w9, w9, w11
   559c8:	csel	w8, w9, w10, eq  // eq = none
   559cc:	b	55ac4 <floatformat_to_double@@Base+0x2e4>
   559d0:	add	x22, x22, #0x1
   559d4:	fmov	d8, xzr
   559d8:	cmp	w23, #0x1
   559dc:	b.lt	55aa8 <floatformat_to_double@@Base+0x2c8>  // b.tstop
   559e0:	mov	w25, #0x20                  	// #32
   559e4:	mov	w26, #0x1                   	// #1
   559e8:	mov	w27, #0x8                   	// #8
   559ec:	mov	w28, #0xffffffff            	// #-1
   559f0:	b	55a14 <floatformat_to_double@@Base+0x234>
   559f4:	sub	x22, x22, w19, uxtw
   559f8:	ucvtf	d0, x10
   559fc:	mov	w0, w22
   55a00:	bl	35290 <ldexp@plt>
   55a04:	sub	w23, w23, w19
   55a08:	cmp	w23, #0x0
   55a0c:	fadd	d8, d8, d0
   55a10:	b.le	55aa8 <floatformat_to_double@@Base+0x2c8>
   55a14:	ldp	w8, w9, [x21]
   55a18:	cmp	w23, #0x20
   55a1c:	csel	w19, w23, w25, lt  // lt = tstop
   55a20:	add	w24, w19, w24
   55a24:	sub	w10, w24, #0x1
   55a28:	sub	w9, w9, w24
   55a2c:	cmp	w8, #0x0
   55a30:	csel	w10, w9, w10, eq  // eq = none
   55a34:	and	x11, x9, #0x7
   55a38:	lsr	x13, x10, #3
   55a3c:	add	w9, w11, w19
   55a40:	ldrb	w10, [x20, x13]
   55a44:	cneg	w8, w26, ne  // ne = any
   55a48:	cmp	w9, #0x8
   55a4c:	csel	w9, w9, w27, cc  // cc = lo, ul, last
   55a50:	sub	w9, w9, w11
   55a54:	lsl	w12, w28, w9
   55a58:	lsr	x10, x10, x11
   55a5c:	sub	w11, w19, w9
   55a60:	mvn	w12, w12
   55a64:	cmp	w11, #0x8
   55a68:	and	x10, x10, x12
   55a6c:	csel	w12, w11, w27, cc  // cc = lo, ul, last
   55a70:	cbz	w11, 559f4 <floatformat_to_double@@Base+0x214>
   55a74:	add	w13, w8, w13
   55a78:	ldrb	w14, [x20, w13, uxtw]
   55a7c:	lsl	w15, w28, w12
   55a80:	sub	w11, w11, w12
   55a84:	cmp	w11, #0x8
   55a88:	bic	w14, w14, w15
   55a8c:	lsl	w14, w14, w9
   55a90:	add	w9, w9, w12
   55a94:	csel	w12, w11, w27, cc  // cc = lo, ul, last
   55a98:	orr	x10, x10, x14
   55a9c:	add	w13, w13, w8
   55aa0:	cbnz	w11, 55a78 <floatformat_to_double@@Base+0x298>
   55aa4:	b	559f4 <floatformat_to_double@@Base+0x214>
   55aa8:	ldp	w9, w8, [x21, #4]
   55aac:	ldr	w10, [x21]
   55ab0:	ldr	x2, [x29, #8]
   55ab4:	mvn	w11, w8
   55ab8:	add	w9, w9, w11
   55abc:	cmp	w10, #0x0
   55ac0:	csel	w8, w9, w8, eq  // eq = none
   55ac4:	mov	w8, w8
   55ac8:	lsr	x8, x8, #3
   55acc:	ldrb	w8, [x20, x8]
   55ad0:	and	w9, w9, #0x7
   55ad4:	fneg	d0, d8
   55ad8:	lsr	w8, w8, w9
   55adc:	tst	w8, #0x1
   55ae0:	fcsel	d0, d8, d0, eq  // eq = none
   55ae4:	str	d0, [x2]
   55ae8:	ldp	x20, x19, [sp, #96]
   55aec:	ldp	x22, x21, [sp, #80]
   55af0:	ldp	x24, x23, [sp, #64]
   55af4:	ldp	x26, x25, [sp, #48]
   55af8:	ldp	x28, x27, [sp, #32]
   55afc:	ldp	x29, x30, [sp, #16]
   55b00:	ldr	d8, [sp], #112
   55b04:	ret

0000000000055b08 <floatformat_from_double@@Base>:
   55b08:	sub	sp, sp, #0x40
   55b0c:	stp	x29, x30, [sp, #24]
   55b10:	stp	x20, x19, [sp, #48]
   55b14:	ldr	w8, [x0, #4]
   55b18:	str	d8, [sp, #16]
   55b1c:	ldr	d8, [x1]
   55b20:	mov	x19, x2
   55b24:	mov	x20, x0
   55b28:	lsr	x2, x8, #3
   55b2c:	mov	x0, x19
   55b30:	mov	w1, wzr
   55b34:	str	x21, [sp, #40]
   55b38:	add	x29, sp, #0x10
   55b3c:	bl	35510 <memset@plt>
   55b40:	fcmp	d8, #0.0
   55b44:	b.pl	55b80 <floatformat_from_double@@Base+0x78>  // b.nfrst
   55b48:	ldp	w10, w8, [x20, #4]
   55b4c:	ldr	w9, [x20]
   55b50:	fneg	d8, d8
   55b54:	mvn	w11, w8
   55b58:	cmp	w9, #0x0
   55b5c:	add	w9, w10, w11
   55b60:	csel	w8, w9, w8, eq  // eq = none
   55b64:	lsr	x8, x8, #3
   55b68:	ldrb	w10, [x19, x8]
   55b6c:	mov	w11, #0x1                   	// #1
   55b70:	and	w9, w9, #0x7
   55b74:	lsl	w9, w11, w9
   55b78:	orr	w9, w10, w9
   55b7c:	strb	w9, [x19, x8]
   55b80:	fcmp	d8, #0.0
   55b84:	b.ne	55ba0 <floatformat_from_double@@Base+0x98>  // b.any
   55b88:	ldp	x20, x19, [sp, #48]
   55b8c:	ldr	x21, [sp, #40]
   55b90:	ldp	x29, x30, [sp, #24]
   55b94:	ldr	d8, [sp, #16]
   55b98:	add	sp, sp, #0x40
   55b9c:	ret
   55ba0:	fcmp	d8, d8
   55ba4:	b.vs	55f4c <floatformat_from_double@@Base+0x444>
   55ba8:	fadd	d0, d8, d8
   55bac:	fcmp	d0, d8
   55bb0:	b.ne	55c70 <floatformat_from_double@@Base+0x168>  // b.any
   55bb4:	ldp	w12, w16, [x20, #12]
   55bb8:	ldp	w10, w11, [x20]
   55bbc:	mov	w14, #0x1                   	// #1
   55bc0:	mov	w8, #0x8                   	// #8
   55bc4:	add	w12, w16, w12
   55bc8:	cmp	w10, #0x0
   55bcc:	sub	w11, w11, w12
   55bd0:	sub	w12, w12, #0x1
   55bd4:	csel	w12, w11, w12, eq  // eq = none
   55bd8:	and	w11, w11, #0x7
   55bdc:	cneg	w10, w14, ne  // ne = any
   55be0:	lsr	x14, x12, #3
   55be4:	add	w12, w11, w16
   55be8:	cmp	w12, #0x8
   55bec:	ldr	w13, [x20, #24]
   55bf0:	csel	w12, w12, w8, cc  // cc = lo, ul, last
   55bf4:	mov	w9, #0xffffffff            	// #-1
   55bf8:	ldrb	w17, [x19, x14]
   55bfc:	sub	w15, w12, w11
   55c00:	lsl	w12, w9, w15
   55c04:	mvn	w12, w12
   55c08:	lsl	w12, w12, w11
   55c0c:	lsl	w18, w13, w11
   55c10:	sub	w11, w16, w15
   55c14:	bic	w16, w17, w12
   55c18:	and	w12, w18, w12
   55c1c:	cmp	w11, #0x8
   55c20:	orr	w12, w12, w16
   55c24:	strb	w12, [x19, x14]
   55c28:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55c2c:	cbz	w11, 55b88 <floatformat_from_double@@Base+0x80>
   55c30:	lsr	x13, x13, x15
   55c34:	add	w14, w10, w14
   55c38:	mov	w15, w14
   55c3c:	ldrb	w17, [x19, x15]
   55c40:	lsl	w16, w9, w12
   55c44:	sub	w11, w11, w12
   55c48:	bic	w18, w13, w16
   55c4c:	cmp	w11, #0x8
   55c50:	and	w16, w16, w17
   55c54:	lsr	x13, x13, x12
   55c58:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55c5c:	orr	w16, w18, w16
   55c60:	add	w14, w14, w10
   55c64:	strb	w16, [x19, x15]
   55c68:	cbnz	w11, 55c38 <floatformat_from_double@@Base+0x130>
   55c6c:	b	55b88 <floatformat_from_double@@Base+0x80>
   55c70:	sub	x0, x29, #0x4
   55c74:	mov	v0.16b, v8.16b
   55c78:	bl	358c0 <frexp@plt>
   55c7c:	ldursw	x21, [x29, #-4]
   55c80:	ldp	w11, w12, [x20, #16]
   55c84:	ldp	w8, w10, [x20]
   55c88:	ldr	w9, [x20, #12]
   55c8c:	sxtw	x12, w12
   55c90:	add	x12, x12, x21
   55c94:	cmp	w12, #0x2
   55c98:	b.lt	55d50 <floatformat_from_double@@Base+0x248>  // b.tstop
   55c9c:	sub	x13, x12, #0x1
   55ca0:	add	w12, w11, w9
   55ca4:	cmp	w8, #0x0
   55ca8:	sub	w15, w10, w12
   55cac:	sub	w12, w12, #0x1
   55cb0:	mov	w14, #0x1                   	// #1
   55cb4:	csel	w12, w15, w12, eq  // eq = none
   55cb8:	and	w16, w15, #0x7
   55cbc:	cneg	w10, w14, ne  // ne = any
   55cc0:	lsr	x14, x12, #3
   55cc4:	add	w12, w16, w11
   55cc8:	mov	w8, #0x8                   	// #8
   55ccc:	cmp	w12, #0x8
   55cd0:	csel	w12, w12, w8, cc  // cc = lo, ul, last
   55cd4:	mov	w9, #0xffffffff            	// #-1
   55cd8:	ldrb	w17, [x19, x14]
   55cdc:	sub	w15, w12, w16
   55ce0:	lsl	w12, w9, w15
   55ce4:	mvn	w12, w12
   55ce8:	lsl	w12, w12, w16
   55cec:	lsl	w16, w13, w16
   55cf0:	sub	w11, w11, w15
   55cf4:	bic	w17, w17, w12
   55cf8:	and	w12, w16, w12
   55cfc:	cmp	w11, #0x8
   55d00:	orr	w12, w12, w17
   55d04:	strb	w12, [x19, x14]
   55d08:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55d0c:	cbz	w11, 55e00 <floatformat_from_double@@Base+0x2f8>
   55d10:	lsr	x13, x13, x15
   55d14:	add	w14, w10, w14
   55d18:	mov	w15, w14
   55d1c:	ldrb	w17, [x19, x15]
   55d20:	lsl	w16, w9, w12
   55d24:	sub	w11, w11, w12
   55d28:	bic	w18, w13, w16
   55d2c:	cmp	w11, #0x8
   55d30:	and	w16, w16, w17
   55d34:	lsr	x13, x13, x12
   55d38:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55d3c:	orr	w16, w18, w16
   55d40:	add	w14, w14, w10
   55d44:	strb	w16, [x19, x15]
   55d48:	cbnz	w11, 55d18 <floatformat_from_double@@Base+0x210>
   55d4c:	b	55e00 <floatformat_from_double@@Base+0x2f8>
   55d50:	add	w12, w11, w9
   55d54:	cmp	w8, #0x0
   55d58:	mov	w13, #0x1                   	// #1
   55d5c:	sub	w14, w10, w12
   55d60:	sub	w12, w12, #0x1
   55d64:	cneg	w10, w13, ne  // ne = any
   55d68:	csel	w12, w14, w12, eq  // eq = none
   55d6c:	and	w13, w14, #0x7
   55d70:	lsr	x14, x12, #3
   55d74:	add	w12, w13, w11
   55d78:	mov	w8, #0x8                   	// #8
   55d7c:	cmp	w12, #0x8
   55d80:	csel	w12, w12, w8, cc  // cc = lo, ul, last
   55d84:	mov	w9, #0xffffffff            	// #-1
   55d88:	ldrb	w15, [x19, x14]
   55d8c:	sub	w12, w12, w13
   55d90:	sub	w11, w11, w12
   55d94:	lsl	w12, w9, w12
   55d98:	mvn	w12, w12
   55d9c:	lsl	w12, w12, w13
   55da0:	cmp	w11, #0x8
   55da4:	bic	w12, w15, w12
   55da8:	strb	w12, [x19, x14]
   55dac:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55db0:	cbz	w11, 55df0 <floatformat_from_double@@Base+0x2e8>
   55db4:	mov	x13, xzr
   55db8:	add	w14, w10, w14
   55dbc:	mov	w15, w14
   55dc0:	ldrb	w17, [x19, x15]
   55dc4:	lsl	w16, w9, w12
   55dc8:	sub	w11, w11, w12
   55dcc:	bic	w18, w13, w16
   55dd0:	cmp	w11, #0x8
   55dd4:	and	w16, w16, w17
   55dd8:	lsr	x13, x13, x12
   55ddc:	csel	w12, w11, w8, cc  // cc = lo, ul, last
   55de0:	orr	w16, w18, w16
   55de4:	add	w14, w14, w10
   55de8:	strb	w16, [x19, x15]
   55dec:	cbnz	w11, 55dbc <floatformat_from_double@@Base+0x2b4>
   55df0:	ldr	w8, [x20, #20]
   55df4:	add	w8, w21, w8
   55df8:	sub	w0, w8, #0x1
   55dfc:	bl	35290 <ldexp@plt>
   55e00:	ldr	w16, [x20, #32]
   55e04:	cmp	w16, #0x1
   55e08:	b.lt	55b88 <floatformat_from_double@@Base+0x80>  // b.tstop
   55e0c:	ldr	w8, [x20, #28]
   55e10:	mov	w9, #0x20                  	// #32
   55e14:	mov	x10, #0x41f0000000000000    	// #4751297606875873280
   55e18:	mov	w11, #0x1                   	// #1
   55e1c:	mov	w12, #0x8                   	// #8
   55e20:	mov	w13, #0xffffffff            	// #-1
   55e24:	mov	w14, w16
   55e28:	cmp	w14, #0x20
   55e2c:	csel	w17, w14, w9, lt  // lt = tstop
   55e30:	cmp	w14, w16
   55e34:	fcvtzu	x15, d0, #32
   55e38:	b.ne	55e64 <floatformat_from_double@@Base+0x35c>  // b.any
   55e3c:	ldr	w16, [x20, #36]
   55e40:	cmp	w16, #0x1
   55e44:	b.ne	55e64 <floatformat_from_double@@Base+0x35c>  // b.any
   55e48:	ldr	w16, [x20, #20]
   55e4c:	add	w16, w16, w21
   55e50:	cmp	w16, #0x2
   55e54:	b.lt	55e64 <floatformat_from_double@@Base+0x35c>  // b.tstop
   55e58:	and	x18, x15, #0x7fffffff
   55e5c:	sub	w16, w17, #0x1
   55e60:	b	55e84 <floatformat_from_double@@Base+0x37c>
   55e64:	cmp	w17, #0x1f
   55e68:	b.hi	55e7c <floatformat_from_double@@Base+0x374>  // b.pmore
   55e6c:	sub	w16, w9, w17
   55e70:	lsr	x18, x15, x16
   55e74:	mov	w16, w14
   55e78:	b	55e84 <floatformat_from_double@@Base+0x37c>
   55e7c:	mov	w16, #0x20                  	// #32
   55e80:	mov	x18, x15
   55e84:	ldp	w0, w17, [x20]
   55e88:	add	w8, w16, w8
   55e8c:	sub	w1, w8, #0x1
   55e90:	sub	w2, w17, w8
   55e94:	cmp	w0, #0x0
   55e98:	csel	w0, w2, w1, eq  // eq = none
   55e9c:	and	w1, w2, #0x7
   55ea0:	lsr	x2, x0, #3
   55ea4:	add	w0, w1, w16
   55ea8:	cneg	w17, w11, ne  // ne = any
   55eac:	cmp	w0, #0x8
   55eb0:	csel	w0, w0, w12, cc  // cc = lo, ul, last
   55eb4:	ldrb	w4, [x19, x2]
   55eb8:	sub	w3, w0, w1
   55ebc:	lsl	w0, w13, w3
   55ec0:	mvn	w0, w0
   55ec4:	lsl	w0, w0, w1
   55ec8:	lsl	w1, w18, w1
   55ecc:	bic	w4, w4, w0
   55ed0:	and	w1, w1, w0
   55ed4:	sub	w0, w16, w3
   55ed8:	cmp	w0, #0x8
   55edc:	orr	w1, w1, w4
   55ee0:	strb	w1, [x19, x2]
   55ee4:	csel	w1, w0, w12, cc  // cc = lo, ul, last
   55ee8:	cbz	w0, 55f28 <floatformat_from_double@@Base+0x420>
   55eec:	lsr	x18, x18, x3
   55ef0:	add	w2, w17, w2
   55ef4:	mov	w3, w2
   55ef8:	ldrb	w5, [x19, x3]
   55efc:	lsl	w4, w13, w1
   55f00:	sub	w0, w0, w1
   55f04:	bic	w6, w18, w4
   55f08:	cmp	w0, #0x8
   55f0c:	and	w4, w4, w5
   55f10:	lsr	x18, x18, x1
   55f14:	csel	w1, w0, w12, cc  // cc = lo, ul, last
   55f18:	orr	w4, w6, w4
   55f1c:	add	w2, w2, w17
   55f20:	strb	w4, [x19, x3]
   55f24:	cbnz	w0, 55ef4 <floatformat_from_double@@Base+0x3ec>
   55f28:	sub	w14, w14, w16
   55f2c:	cmp	w14, #0x1
   55f30:	b.lt	55b88 <floatformat_from_double@@Base+0x80>  // b.tstop
   55f34:	ldr	w16, [x20, #32]
   55f38:	fmov	d1, x10
   55f3c:	fmul	d0, d0, d1
   55f40:	ucvtf	d1, x15
   55f44:	fsub	d0, d0, d1
   55f48:	b	55e28 <floatformat_from_double@@Base+0x320>
   55f4c:	ldp	w13, w17, [x20, #12]
   55f50:	ldp	w11, w12, [x20]
   55f54:	mov	w10, #0x1                   	// #1
   55f58:	mov	w8, #0x8                   	// #8
   55f5c:	add	w13, w17, w13
   55f60:	cmp	w11, #0x0
   55f64:	sub	w12, w12, w13
   55f68:	sub	w13, w13, #0x1
   55f6c:	csel	w13, w12, w13, eq  // eq = none
   55f70:	and	w12, w12, #0x7
   55f74:	lsr	x15, x13, #3
   55f78:	add	w13, w12, w17
   55f7c:	cneg	w11, w10, ne  // ne = any
   55f80:	cmp	w13, #0x8
   55f84:	ldr	w14, [x20, #24]
   55f88:	csel	w13, w13, w8, cc  // cc = lo, ul, last
   55f8c:	mov	w9, #0xffffffff            	// #-1
   55f90:	ldrb	w18, [x19, x15]
   55f94:	sub	w16, w13, w12
   55f98:	lsl	w13, w9, w16
   55f9c:	mvn	w13, w13
   55fa0:	lsl	w13, w13, w12
   55fa4:	lsl	w0, w14, w12
   55fa8:	sub	w12, w17, w16
   55fac:	bic	w17, w18, w13
   55fb0:	and	w13, w0, w13
   55fb4:	cmp	w12, #0x8
   55fb8:	orr	w13, w13, w17
   55fbc:	strb	w13, [x19, x15]
   55fc0:	csel	w13, w12, w8, cc  // cc = lo, ul, last
   55fc4:	cbz	w12, 56004 <floatformat_from_double@@Base+0x4fc>
   55fc8:	lsr	x14, x14, x16
   55fcc:	add	w15, w11, w15
   55fd0:	mov	w16, w15
   55fd4:	ldrb	w18, [x19, x16]
   55fd8:	lsl	w17, w9, w13
   55fdc:	sub	w12, w12, w13
   55fe0:	bic	w0, w14, w17
   55fe4:	cmp	w12, #0x8
   55fe8:	and	w17, w17, w18
   55fec:	lsr	x14, x14, x13
   55ff0:	csel	w13, w12, w8, cc  // cc = lo, ul, last
   55ff4:	orr	w17, w0, w17
   55ff8:	add	w15, w15, w11
   55ffc:	strb	w17, [x19, x16]
   56000:	cbnz	w12, 55fd0 <floatformat_from_double@@Base+0x4c8>
   56004:	ldp	w14, w12, [x20]
   56008:	ldr	w13, [x20, #28]
   5600c:	mov	w11, #0x18                  	// #24
   56010:	cmp	w14, #0x0
   56014:	sub	w12, w12, w13
   56018:	add	w13, w13, #0x1f
   5601c:	sub	w14, w12, #0x20
   56020:	csel	w13, w14, w13, eq  // eq = none
   56024:	and	w15, w14, #0x7
   56028:	bfxil	w11, w14, #0, #3
   5602c:	lsr	x14, x13, #3
   56030:	sub	w13, w8, w15
   56034:	ldrb	w18, [x19, x14]
   56038:	lsl	w17, w9, w13
   5603c:	cneg	w12, w10, ne  // ne = any
   56040:	lsl	w16, w10, w15
   56044:	lsr	x10, x10, x13
   56048:	mvn	w13, w17
   5604c:	lsl	w15, w13, w15
   56050:	and	w16, w16, w15
   56054:	bic	w15, w18, w15
   56058:	orr	w15, w16, w15
   5605c:	add	w13, w12, w14
   56060:	strb	w15, [x19, x14]
   56064:	mov	w14, #0x8                   	// #8
   56068:	mov	w15, w13
   5606c:	ldrb	w17, [x19, x15]
   56070:	lsl	w16, w9, w14
   56074:	sub	w11, w11, w14
   56078:	bic	w18, w10, w16
   5607c:	cmp	w11, #0x8
   56080:	and	w16, w16, w17
   56084:	lsr	x10, x10, x14
   56088:	csel	w14, w11, w8, cc  // cc = lo, ul, last
   5608c:	orr	w16, w18, w16
   56090:	add	w13, w13, w12
   56094:	strb	w16, [x19, x15]
   56098:	cbnz	w11, 56068 <floatformat_from_double@@Base+0x560>
   5609c:	b	55b88 <floatformat_from_double@@Base+0x80>

00000000000560a0 <floatformat_is_valid@@Base>:
   560a0:	ldr	x2, [x0, #48]
   560a4:	br	x2

00000000000560a8 <xmalloc_set_program_name@@Base>:
   560a8:	stp	x29, x30, [sp, #-32]!
   560ac:	str	x19, [sp, #16]
   560b0:	adrp	x19, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   560b4:	ldr	x8, [x19, #1104]
   560b8:	adrp	x9, f2000 <aarch64_opcode_table@@Base+0x555d8>
   560bc:	mov	x29, sp
   560c0:	str	x0, [x9, #1568]
   560c4:	cbnz	x8, 560d4 <xmalloc_set_program_name@@Base+0x2c>
   560c8:	mov	x0, xzr
   560cc:	bl	35220 <sbrk@plt>
   560d0:	str	x0, [x19, #1104]
   560d4:	ldr	x19, [sp, #16]
   560d8:	ldp	x29, x30, [sp], #32
   560dc:	ret

00000000000560e0 <xmalloc_failed@@Base>:
   560e0:	stp	x29, x30, [sp, #-48]!
   560e4:	stp	x20, x19, [sp, #32]
   560e8:	adrp	x20, 107000 <aarch64_opcode_table@@Base+0x6a5d8>
   560ec:	str	x21, [sp, #16]
   560f0:	ldr	x21, [x20, #1104]
   560f4:	mov	x19, x0
   560f8:	mov	x0, xzr
   560fc:	mov	x29, sp
   56100:	bl	35220 <sbrk@plt>
   56104:	adrp	x9, 9b000 <aarch64_operands@@Base+0x16c38>
   56108:	ldr	x8, [x20, #1104]
   5610c:	ldr	x9, [x9, #4008]
   56110:	adrp	x10, f2000 <aarch64_opcode_table@@Base+0x555d8>
   56114:	ldr	x2, [x10, #1568]
   56118:	adrp	x10, 9b000 <aarch64_operands@@Base+0x16c38>
   5611c:	cmp	x21, #0x0
   56120:	ldr	x10, [x10, #3840]
   56124:	csel	x8, x9, x8, eq  // eq = none
   56128:	sub	x5, x0, x8
   5612c:	ldrb	w8, [x2]
   56130:	ldr	x0, [x10]
   56134:	adrp	x9, 6e000 <fields@@Base+0x151b4>
   56138:	adrp	x10, 58000 <xexit@@Base+0x1dd4>
   5613c:	add	x9, x9, #0x4c9
   56140:	add	x10, x10, #0x84f
   56144:	cmp	w8, #0x0
   56148:	adrp	x1, 70000 <fields@@Base+0x171b4>
   5614c:	csel	x3, x10, x9, eq  // eq = none
   56150:	add	x1, x1, #0x8da
   56154:	mov	x4, x19
   56158:	bl	35bd0 <fprintf@plt>
   5615c:	mov	w0, #0x1                   	// #1
   56160:	bl	359c0 <xexit@plt>

0000000000056164 <xmalloc@@Base>:
   56164:	stp	x29, x30, [sp, #-32]!
   56168:	cmp	x0, #0x0
   5616c:	str	x19, [sp, #16]
   56170:	csinc	x19, x0, xzr, ne  // ne = any
   56174:	mov	x0, x19
   56178:	mov	x29, sp
   5617c:	bl	35490 <malloc@plt>
   56180:	cbz	x0, 56190 <xmalloc@@Base+0x2c>
   56184:	ldr	x19, [sp, #16]
   56188:	ldp	x29, x30, [sp], #32
   5618c:	ret
   56190:	mov	x0, x19
   56194:	bl	35a10 <xmalloc_failed@plt>

0000000000056198 <xcalloc@@Base>:
   56198:	stp	x29, x30, [sp, #-32]!
   5619c:	cmp	x0, #0x0
   561a0:	cset	w8, eq  // eq = none
   561a4:	cmp	x1, #0x0
   561a8:	cset	w9, eq  // eq = none
   561ac:	orr	w8, w8, w9
   561b0:	cmp	w8, #0x0
   561b4:	stp	x20, x19, [sp, #16]
   561b8:	csinc	x19, x1, xzr, eq  // eq = none
   561bc:	csinc	x20, x0, xzr, eq  // eq = none
   561c0:	mov	x0, x20
   561c4:	mov	x1, x19
   561c8:	mov	x29, sp
   561cc:	bl	355c0 <calloc@plt>
   561d0:	cbz	x0, 561e0 <xcalloc@@Base+0x48>
   561d4:	ldp	x20, x19, [sp, #16]
   561d8:	ldp	x29, x30, [sp], #32
   561dc:	ret
   561e0:	mul	x0, x20, x19
   561e4:	bl	35a10 <xmalloc_failed@plt>

00000000000561e8 <xrealloc@@Base>:
   561e8:	stp	x29, x30, [sp, #-32]!
   561ec:	cmp	x1, #0x0
   561f0:	str	x19, [sp, #16]
   561f4:	csinc	x19, x1, xzr, ne  // ne = any
   561f8:	mov	x29, sp
   561fc:	cbz	x0, 56218 <xrealloc@@Base+0x30>
   56200:	mov	x1, x19
   56204:	bl	35630 <realloc@plt>
   56208:	cbz	x0, 56224 <xrealloc@@Base+0x3c>
   5620c:	ldr	x19, [sp, #16]
   56210:	ldp	x29, x30, [sp], #32
   56214:	ret
   56218:	mov	x0, x19
   5621c:	bl	35490 <malloc@plt>
   56220:	cbnz	x0, 5620c <xrealloc@@Base+0x24>
   56224:	mov	x0, x19
   56228:	bl	35a10 <xmalloc_failed@plt>

000000000005622c <xexit@@Base>:
   5622c:	stp	x29, x30, [sp, #-32]!
   56230:	str	x19, [sp, #16]
   56234:	adrp	x8, 9b000 <aarch64_operands@@Base+0x16c38>
   56238:	ldr	x8, [x8, #3984]
   5623c:	mov	w19, w0
   56240:	mov	x29, sp
   56244:	ldr	x8, [x8]
   56248:	cbz	x8, 56250 <xexit@@Base+0x24>
   5624c:	blr	x8
   56250:	mov	w0, w19
   56254:	bl	351b0 <exit@plt>

Disassembly of section .fini:

0000000000056258 <.fini>:
   56258:	stp	x29, x30, [sp, #-16]!
   5625c:	mov	x29, sp
   56260:	ldp	x29, x30, [sp], #16
   56264:	ret
