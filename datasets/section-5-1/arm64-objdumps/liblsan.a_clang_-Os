In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblsan.a_clang_-Os:

lsan_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>:
       0:	ldrb	w3, [x1, #28]
       4:	mov	x2, x0
       8:	ldrb	w0, [x0, #28]
       c:	cmp	w3, w0
      10:	b.ne	24 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_+0x24>  // b.any
      14:	ldr	x0, [x1, #16]
      18:	ldr	x2, [x2, #16]
      1c:	cmp	x2, x0
      20:	cset	w0, hi  // hi = pmore
      24:	ret

0000000000000028 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
      28:	stp	x19, x20, [sp, #-48]!
      2c:	mov	x19, x0
      30:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
      34:	mov	x20, x1
      38:	mov	x1, #0x10                  	// #16
      3c:	ldr	x0, [x0]
      40:	stp	x21, x22, [sp, #16]
      44:	mov	x21, x2
      48:	mov	x22, x3
      4c:	str	x30, [sp, #32]
      50:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
      54:	mov	x2, x0
      58:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      5c:	add	x0, x0, #0x0
      60:	ldr	x30, [sp, #32]
      64:	stp	x0, x22, [x2]
      68:	mov	x3, x21
      6c:	mov	x1, x20
      70:	mov	x0, x19
      74:	ldp	x21, x22, [sp, #16]
      78:	ldp	x19, x20, [sp], #48
      7c:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000080 <_ZN6__lsanL21GetSuppressionContextEv>:
      80:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      84:	ldr	x0, [x0]
      88:	cbnz	x0, b0 <_ZN6__lsanL21GetSuppressionContextEv+0x30>
      8c:	str	x30, [sp, #-16]!
      90:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      94:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
      98:	add	x2, x2, #0x0
      9c:	add	x0, x0, #0x0
      a0:	mov	x4, #0x0                   	// #0
      a4:	mov	x3, #0x0                   	// #0
      a8:	mov	w1, #0x5f                  	// #95
      ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      b0:	ret

00000000000000b4 <_ZN6__lsanL11ResetTagsCbEmPv>:
      b4:	stp	x19, x30, [sp, #-32]!
      b8:	bl	0 <_ZN6__lsan12GetUserBeginEm>
      bc:	mov	x1, x0
      c0:	add	x19, sp, #0x18
      c4:	mov	x0, x19
      c8:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
      cc:	mov	x0, x19
      d0:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
      d4:	tst	w0, #0xff
      d8:	b.eq	f8 <_ZN6__lsanL11ResetTagsCbEmPv+0x44>  // b.none
      dc:	mov	x0, x19
      e0:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
      e4:	cmp	w0, #0x3
      e8:	b.eq	f8 <_ZN6__lsanL11ResetTagsCbEmPv+0x44>  // b.none
      ec:	mov	x0, x19
      f0:	mov	w1, #0x0                   	// #0
      f4:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
      f8:	ldp	x19, x30, [sp], #32
      fc:	ret

0000000000000100 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE8pop_backEv.isra.0>:
     100:	ldr	x1, [x0]
     104:	cbnz	x1, 12c <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE8pop_backEv.isra.0+0x2c>
     108:	str	x30, [sp, #-16]!
     10c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     110:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     114:	add	x2, x2, #0x0
     118:	add	x0, x0, #0x0
     11c:	mov	x4, #0x0                   	// #0
     120:	mov	x3, #0x0                   	// #0
     124:	mov	w1, #0x1ca                 	// #458
     128:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     12c:	sub	x1, x1, #0x1
     130:	str	x1, [x0]
     134:	ret

0000000000000138 <_ZN6__lsan23DisableCounterUnderflowEv>:
     138:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     13c:	ldr	x0, [x0]
     140:	ldrb	w0, [x0, #57]
     144:	cbz	w0, 15c <_ZN6__lsan23DisableCounterUnderflowEv+0x24>
     148:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     14c:	add	x0, x0, #0x0
     150:	str	x30, [sp, #-16]!
     154:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     158:	bl	0 <_ZN11__sanitizer3DieEv>
     15c:	ret

0000000000000160 <_ZN6__lsan5Flags11SetDefaultsEv>:
     160:	mov	w1, #0x1010101             	// #16843009
     164:	strb	wzr, [x0]
     168:	movk	x1, #0x101, lsl #32
     16c:	stur	xzr, [x0, #4]
     170:	stur	x1, [x0, #12]
     174:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     178:	add	x1, x1, #0x0
     17c:	strh	wzr, [x0, #20]
     180:	str	x1, [x0, #24]
     184:	ret

0000000000000188 <_ZN6__lsan17RegisterLsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>:
     188:	stp	x19, x20, [sp, #-48]!
     18c:	mov	x3, x1
     190:	mov	x20, x0
     194:	stp	x21, x22, [sp, #16]
     198:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
     19c:	mov	x19, x1
     1a0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     1a4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     1a8:	add	x2, x2, #0x0
     1ac:	add	x1, x1, #0x0
     1b0:	str	x30, [sp, #32]
     1b4:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     1b8:	ldr	x21, [x21]
     1bc:	mov	x1, #0x10                  	// #16
     1c0:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     1c4:	add	x22, x22, #0x0
     1c8:	mov	x0, x21
     1cc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     1d0:	mov	x2, x0
     1d4:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     1d8:	add	x0, x19, #0x4
     1dc:	add	x3, x3, #0x0
     1e0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     1e4:	add	x1, x1, #0x0
     1e8:	stp	x22, x0, [x2]
     1ec:	mov	x0, x20
     1f0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     1f4:	mov	x0, x21
     1f8:	mov	x1, #0x10                  	// #16
     1fc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     200:	mov	x2, x0
     204:	add	x0, x19, #0x8
     208:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     20c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     210:	add	x3, x3, #0x0
     214:	stp	x22, x0, [x2]
     218:	add	x1, x1, #0x0
     21c:	mov	x0, x20
     220:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     224:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     228:	add	x3, x19, #0xc
     22c:	mov	x0, x20
     230:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     234:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     238:	add	x2, x2, #0x0
     23c:	add	x1, x1, #0x0
     240:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     244:	add	x22, x22, #0x0
     248:	add	x3, x19, #0xd
     24c:	mov	x0, x20
     250:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     254:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     258:	add	x2, x2, #0x0
     25c:	add	x1, x1, #0x0
     260:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     264:	add	x3, x19, #0xe
     268:	mov	x0, x20
     26c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     270:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     274:	add	x2, x2, #0x0
     278:	add	x1, x1, #0x0
     27c:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     280:	add	x3, x19, #0xf
     284:	mov	x0, x20
     288:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     28c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     290:	add	x2, x2, #0x0
     294:	add	x1, x1, #0x0
     298:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     29c:	add	x3, x19, #0x10
     2a0:	mov	x0, x20
     2a4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2a8:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2ac:	add	x2, x2, #0x0
     2b0:	add	x1, x1, #0x0
     2b4:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     2b8:	add	x3, x19, #0x11
     2bc:	mov	x0, x20
     2c0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2c4:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2c8:	add	x2, x2, #0x0
     2cc:	add	x1, x1, #0x0
     2d0:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     2d4:	add	x3, x19, #0x12
     2d8:	mov	x0, x20
     2dc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2e0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2e4:	add	x2, x2, #0x0
     2e8:	add	x1, x1, #0x0
     2ec:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     2f0:	add	x3, x19, #0x13
     2f4:	mov	x0, x20
     2f8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     2fc:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     300:	add	x2, x2, #0x0
     304:	add	x1, x1, #0x0
     308:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     30c:	add	x3, x19, #0x14
     310:	mov	x2, x22
     314:	mov	x0, x20
     318:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     31c:	add	x1, x1, #0x0
     320:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     324:	add	x3, x19, #0x15
     328:	mov	x2, x22
     32c:	mov	x0, x20
     330:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     334:	add	x1, x1, #0x0
     338:	bl	28 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
     33c:	mov	x0, x21
     340:	mov	x1, #0x10                  	// #16
     344:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     348:	mov	x2, x0
     34c:	add	x19, x19, #0x18
     350:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     354:	add	x0, x0, #0x0
     358:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     35c:	ldp	x21, x22, [sp, #16]
     360:	add	x3, x3, #0x0
     364:	ldr	x30, [sp, #32]
     368:	stp	x0, x19, [x2]
     36c:	mov	x0, x20
     370:	ldp	x19, x20, [sp], #48
     374:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     378:	add	x1, x1, #0x0
     37c:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000380 <_ZN6__lsan22InitializeSuppressionsEv>:
     380:	stp	x19, x20, [sp, #-32]!
     384:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     388:	ldr	x4, [x19]
     38c:	stp	x21, x30, [sp, #16]
     390:	cbz	x4, 3b0 <_ZN6__lsan22InitializeSuppressionsEv+0x30>
     394:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     398:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     39c:	add	x2, x2, #0x0
     3a0:	add	x0, x0, #0x0
     3a4:	mov	x3, #0x0                   	// #0
     3a8:	mov	w1, #0x55                  	// #85
     3ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     3b0:	add	x21, x19, #0x0
     3b4:	mov	w2, #0x1                   	// #1
     3b8:	add	x20, x21, #0x40
     3bc:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     3c0:	mov	x0, x20
     3c4:	add	x1, x1, #0x0
     3c8:	bl	0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
     3cc:	str	x20, [x19]
     3d0:	ldr	x1, [x21, #168]
     3d4:	mov	x0, x20
     3d8:	bl	0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>
     3dc:	adrp	x0, 0 <__lsan_default_suppressions>
     3e0:	ldr	x0, [x0]
     3e4:	cbz	x0, 3fc <_ZN6__lsan22InitializeSuppressionsEv+0x7c>
     3e8:	ldr	x20, [x19]
     3ec:	bl	0 <__lsan_default_suppressions>
     3f0:	mov	x1, x0
     3f4:	mov	x0, x20
     3f8:	bl	0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
     3fc:	ldr	x0, [x19]
     400:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     404:	ldp	x21, x30, [sp, #16]
     408:	add	x1, x1, #0x0
     40c:	ldp	x19, x20, [sp], #32
     410:	b	0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>

0000000000000414 <_ZN6__lsan14GetRootRegionsEv>:
     414:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     418:	ldr	x0, [x0]
     41c:	ret

0000000000000420 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv>:
     420:	adrp	x0, 0 <__lsan_default_options>
     424:	ldr	x0, [x0]
     428:	cbz	x0, 430 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv+0x10>
     42c:	b	0 <__lsan_default_options>
     430:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     434:	add	x0, x0, #0x0
     438:	ret

000000000000043c <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE>:
     43c:	stp	x19, x20, [sp, #-80]!
     440:	mov	x19, x0
     444:	add	x20, sp, #0x20
     448:	str	x30, [sp, #16]
     44c:	mov	x0, x20
     450:	bl	0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev>
     454:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     458:	add	x0, x0, #0x0
     45c:	add	x1, x0, #0x90
     460:	stp	x19, x20, [sp, #56]
     464:	ldrb	w0, [x0, #159]
     468:	cbz	w0, 480 <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE+0x44>
     46c:	ldrb	w0, [x1, #17]
     470:	cbz	w0, 480 <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE+0x44>
     474:	bl	0 <_ZN6__lsan9GetLinkerEv>
     478:	cmp	x0, #0x0
     47c:	cset	w0, ne  // ne = any
     480:	add	x1, sp, #0x38
     484:	strb	w0, [sp, #72]
     488:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     48c:	add	x0, x0, #0x0
     490:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
     494:	ldp	x0, x1, [sp, #32]
     498:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     49c:	ldr	x30, [sp, #16]
     4a0:	ldp	x19, x20, [sp], #80
     4a4:	ret

00000000000004a8 <_ZN6__lsan16HasReportedLeaksEv>:
     4a8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     4ac:	ldrb	w0, [x0]
     4b0:	ret

00000000000004b4 <__lsan_disable>:
     4b4:	b	0 <_ZN6__lsan19DisableInThisThreadEv>

00000000000004b8 <__lsan_enable>:
     4b8:	b	0 <_ZN6__lsan18EnableInThisThreadEv>

00000000000004bc <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv>:
     4bc:	stp	x19, x20, [sp, #-64]!
     4c0:	mov	x19, x0
     4c4:	ldr	w0, [x0, #112]
     4c8:	stp	x21, x22, [sp, #16]
     4cc:	cmp	w0, #0x2
     4d0:	stp	x23, x24, [sp, #32]
     4d4:	str	x30, [sp, #48]
     4d8:	b.ne	56c <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0xb0>  // b.any
     4dc:	ldr	x24, [x1, #16]
     4e0:	mov	x20, x1
     4e4:	mov	x21, #0x0                   	// #0
     4e8:	mov	x23, x24
     4ec:	cmp	x23, x21
     4f0:	b.ls	528 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x6c>  // b.plast
     4f4:	add	x22, x23, x21
     4f8:	mov	x0, x20
     4fc:	lsr	x22, x22, #1
     500:	mov	x1, x22
     504:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     508:	ldr	x1, [x0]
     50c:	ldr	x0, [x19, #32]
     510:	cmp	w1, w0
     514:	b.ge	520 <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x64>  // b.tcont
     518:	add	x21, x22, #0x1
     51c:	b	4ec <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x30>
     520:	mov	x23, x22
     524:	b	4ec <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x30>
     528:	cmp	x24, x21
     52c:	b.ls	54c <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0x90>  // b.plast
     530:	mov	x1, x21
     534:	mov	x0, x20
     538:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     53c:	ldr	x1, [x0]
     540:	ldr	x0, [x19, #32]
     544:	cmp	x1, x0
     548:	b.eq	56c <_ZN6__lsanL20ReportIfNotSuspendedEPN11__sanitizer17ThreadContextBaseEPv+0xb0>  // b.none
     54c:	ldp	x21, x22, [sp, #16]
     550:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     554:	ldp	x23, x24, [sp, #32]
     558:	add	x0, x0, #0x0
     55c:	ldr	x1, [x19, #32]
     560:	ldr	x30, [sp, #48]
     564:	ldp	x19, x20, [sp], #64
     568:	b	0 <_ZN11__sanitizer6ReportEPKcz>
     56c:	ldp	x21, x22, [sp, #16]
     570:	ldp	x23, x24, [sp, #32]
     574:	ldr	x30, [sp, #48]
     578:	ldp	x19, x20, [sp], #64
     57c:	ret

0000000000000580 <__lsan_ignore_object>:
     580:	stp	x19, x30, [sp, #-32]!
     584:	mov	x19, x0
     588:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     58c:	ldr	x0, [x0]
     590:	ldrb	w0, [x0, #57]
     594:	cbz	w0, 5f4 <__lsan_ignore_object+0x74>
     598:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     59c:	add	x0, x0, #0x0
     5a0:	add	x0, x0, #0xc0
     5a4:	str	x0, [sp, #24]
     5a8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     5ac:	mov	x0, x19
     5b0:	bl	0 <_ZN6__lsan18IgnoreObjectLockedEPKv>
     5b4:	cmp	w0, #0x2
     5b8:	b.ne	5e0 <__lsan_ignore_object+0x60>  // b.any
     5bc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     5c0:	ldr	x0, [x0]
     5c4:	ldr	w0, [x0]
     5c8:	cbz	w0, 5ec <__lsan_ignore_object+0x6c>
     5cc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     5d0:	mov	x1, x19
     5d4:	add	x0, x0, #0x0
     5d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     5dc:	b	5ec <__lsan_ignore_object+0x6c>
     5e0:	cmp	w0, #0x1
     5e4:	b.eq	5fc <__lsan_ignore_object+0x7c>  // b.none
     5e8:	cbz	w0, 61c <__lsan_ignore_object+0x9c>
     5ec:	add	x0, sp, #0x18
     5f0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     5f4:	ldp	x19, x30, [sp], #32
     5f8:	ret
     5fc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     600:	ldr	x0, [x0]
     604:	ldr	w0, [x0]
     608:	cbz	w0, 5ec <__lsan_ignore_object+0x6c>
     60c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     610:	mov	x1, x19
     614:	add	x0, x0, #0x0
     618:	b	5d8 <__lsan_ignore_object+0x58>
     61c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     620:	ldr	x0, [x0]
     624:	ldr	w0, [x0]
     628:	cbz	w0, 5ec <__lsan_ignore_object+0x6c>
     62c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     630:	mov	x1, x19
     634:	add	x0, x0, #0x0
     638:	b	5d8 <__lsan_ignore_object+0x58>

000000000000063c <__lsan_unregister_root_region>:
     63c:	stp	x19, x20, [sp, #-80]!
     640:	mov	x19, x0
     644:	mov	x20, x1
     648:	stp	x21, x22, [sp, #16]
     64c:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     650:	add	x21, x21, #0x0
     654:	add	x0, x21, #0xc0
     658:	stp	x23, x24, [sp, #32]
     65c:	str	x30, [sp, #48]
     660:	str	x0, [sp, #72]
     664:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     668:	ldr	x21, [x21, #176]
     66c:	cbz	x21, 704 <__lsan_unregister_root_region+0xc8>
     670:	ldr	x24, [x21, #16]
     674:	mov	x23, #0x0                   	// #0
     678:	cmp	x23, x24
     67c:	b.eq	72c <__lsan_unregister_root_region+0xf0>  // b.none
     680:	mov	x1, x23
     684:	mov	x0, x21
     688:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     68c:	mov	x22, x0
     690:	ldr	x0, [x0]
     694:	cmp	x19, x0
     698:	b.ne	724 <__lsan_unregister_root_region+0xe8>  // b.any
     69c:	ldr	x0, [x22, #8]
     6a0:	cmp	x20, x0
     6a4:	b.ne	724 <__lsan_unregister_root_region+0xe8>  // b.any
     6a8:	sub	x1, x24, #0x1
     6ac:	mov	x0, x21
     6b0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     6b4:	ldp	x0, x1, [x0]
     6b8:	stp	x0, x1, [x22]
     6bc:	add	x0, x21, #0x10
     6c0:	bl	100 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE8pop_backEv.isra.0>
     6c4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     6c8:	ldr	x0, [x0]
     6cc:	ldr	w0, [x0]
     6d0:	cbz	w0, 6e8 <__lsan_unregister_root_region+0xac>
     6d4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     6d8:	mov	x2, x20
     6dc:	mov	x1, x19
     6e0:	add	x0, x0, #0x0
     6e4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     6e8:	add	x0, sp, #0x48
     6ec:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     6f0:	ldp	x21, x22, [sp, #16]
     6f4:	ldp	x23, x24, [sp, #32]
     6f8:	ldr	x30, [sp, #48]
     6fc:	ldp	x19, x20, [sp], #80
     700:	ret
     704:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     708:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     70c:	add	x2, x2, #0x0
     710:	add	x0, x0, #0x0
     714:	mov	x4, #0x0                   	// #0
     718:	mov	x3, #0x0                   	// #0
     71c:	mov	w1, #0x341                 	// #833
     720:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     724:	add	x23, x23, #0x1
     728:	b	678 <__lsan_unregister_root_region+0x3c>
     72c:	mov	x2, x20
     730:	mov	x1, x19
     734:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     738:	add	x0, x0, #0x0
     73c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     740:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000744 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>:
     744:	stp	x19, x20, [sp, #-48]!
     748:	add	x19, x0, #0x8
     74c:	mov	x20, #0x0                   	// #0
     750:	stp	x21, x22, [sp, #16]
     754:	mov	x21, #0x0                   	// #0
     758:	ldr	x22, [x0, #24]
     75c:	str	x30, [sp, #32]
     760:	cmp	x20, x22
     764:	b.eq	788 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv+0x44>  // b.none
     768:	mov	x1, x20
     76c:	mov	x0, x19
     770:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     774:	ldrb	w0, [x0, #29]
     778:	cbnz	w0, 780 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv+0x3c>
     77c:	add	x21, x21, #0x1
     780:	add	x20, x20, #0x1
     784:	b	760 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv+0x1c>
     788:	mov	x0, x21
     78c:	ldp	x21, x22, [sp, #16]
     790:	ldr	x30, [sp, #32]
     794:	ldp	x19, x20, [sp], #48
     798:	ret

000000000000079c <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm>:
     79c:	stp	x19, x20, [sp, #-48]!
     7a0:	mov	x19, x0
     7a4:	add	x0, x0, #0x8
     7a8:	stp	x21, x22, [sp, #16]
     7ac:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7b0:	add	x21, x21, #0x0
     7b4:	stp	x23, x30, [sp, #32]
     7b8:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     7bc:	ldr	w22, [x0]
     7c0:	mov	x20, #0x0                   	// #0
     7c4:	mov	x23, #0x18                  	// #24
     7c8:	ldr	x0, [x19, #48]
     7cc:	cmp	x20, x0
     7d0:	b.cs	800 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x64>  // b.hs, b.nlast
     7d4:	mul	x1, x20, x23
     7d8:	ldr	x2, [x19, #32]
     7dc:	add	x0, x2, x1
     7e0:	ldr	w1, [x2, x1]
     7e4:	cmp	w1, w22
     7e8:	b.ne	7f8 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x5c>  // b.any
     7ec:	ldp	x1, x2, [x0, #8]
     7f0:	mov	x0, x21
     7f4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     7f8:	add	x20, x20, #0x1
     7fc:	b	7c8 <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm+0x2c>
     800:	ldp	x21, x22, [sp, #16]
     804:	ldp	x23, x30, [sp, #32]
     808:	ldp	x19, x20, [sp], #48
     80c:	ret

0000000000000810 <_ZN6__lsan10LeakReport18PrintReportForLeakEm>:
     810:	stp	x19, x20, [sp, #-80]!
     814:	mov	x19, x1
     818:	mov	x20, x0
     81c:	stp	x21, x22, [sp, #16]
     820:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     824:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     828:	stp	x23, x24, [sp, #32]
     82c:	add	x24, x0, #0x8
     830:	add	x22, x22, #0x0
     834:	str	x30, [sp, #48]
     838:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
     83c:	ands	w23, w0, #0xff
     840:	add	x21, x21, #0x0
     844:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     848:	add	x1, x1, #0x0
     84c:	csel	x1, x1, x22, ne  // ne = any
     850:	mov	x0, x21
     854:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     858:	mov	x1, x19
     85c:	mov	x0, x24
     860:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     864:	ldrb	w2, [x0, #28]
     868:	adrp	x4, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     86c:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     870:	cmp	w2, #0x0
     874:	ldp	x3, x2, [x0, #8]
     878:	add	x0, x1, #0x0
     87c:	add	x1, x4, #0x0
     880:	csel	x1, x1, x0, ne  // ne = any
     884:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     888:	add	x0, x0, #0x0
     88c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     890:	cmp	w23, #0x0
     894:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     898:	add	x1, x1, #0x0
     89c:	mov	x0, x21
     8a0:	csel	x1, x1, x22, ne  // ne = any
     8a4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     8a8:	mov	x1, x19
     8ac:	mov	x0, x24
     8b0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8b4:	ldr	w0, [x0, #24]
     8b8:	cbnz	w0, 8dc <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0xcc>
     8bc:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8c0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8c4:	add	x2, x2, #0x0
     8c8:	add	x0, x0, #0x0
     8cc:	mov	x4, #0x0                   	// #0
     8d0:	mov	x3, #0x0                   	// #0
     8d4:	mov	w1, #0x1e1                 	// #481
     8d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     8dc:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
     8e0:	stp	x0, x1, [sp, #64]
     8e4:	add	x0, sp, #0x40
     8e8:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     8ec:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8f0:	ldrb	w0, [x0]
     8f4:	cbz	w0, 91c <_ZN6__lsan10LeakReport18PrintReportForLeakEm+0x10c>
     8f8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     8fc:	add	x0, x0, #0x0
     900:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     904:	mov	x1, x19
     908:	mov	x0, x20
     90c:	bl	79c <_ZN6__lsan10LeakReport25PrintLeakedObjectsForLeakEm>
     910:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     914:	add	x0, x0, #0x0
     918:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     91c:	ldp	x21, x22, [sp, #16]
     920:	ldp	x23, x24, [sp, #32]
     924:	ldr	x30, [sp, #48]
     928:	ldp	x19, x20, [sp], #80
     92c:	ret

0000000000000930 <_ZN6__lsan10LeakReport17ApplySuppressionsEv>:
     930:	stp	x19, x20, [sp, #-144]!
     934:	adrp	x20, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     938:	add	x20, x20, #0x0
     93c:	add	x20, x20, #0x15
     940:	stp	x23, x24, [sp, #32]
     944:	mov	x23, x0
     948:	mov	x19, #0x0                   	// #0
     94c:	stp	x21, x22, [sp, #16]
     950:	stp	x25, x26, [sp, #48]
     954:	stp	x27, x28, [sp, #64]
     958:	str	x30, [sp, #80]
     95c:	ldr	x0, [x23, #24]
     960:	cmp	x19, x0
     964:	b.cs	abc <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x18c>  // b.hs, b.nlast
     968:	add	x22, x23, #0x8
     96c:	mov	x1, x19
     970:	mov	x0, x22
     974:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     978:	ldr	w0, [x0, #24]
     97c:	mov	x24, #0x0                   	// #0
     980:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
     984:	mov	x25, x0
     988:	add	x0, sp, #0x88
     98c:	stp	x1, x0, [sp, #96]
     990:	ldr	w0, [sp, #96]
     994:	cmp	x24, w0, uxtw
     998:	b.cs	ab4 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x184>  // b.hs, b.nlast
     99c:	ldr	x28, [x25, x24, lsl #3]
     9a0:	str	xzr, [sp, #120]
     9a4:	bl	80 <_ZN6__lsanL21GetSuppressionContextEv>
     9a8:	mov	x21, x0
     9ac:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     9b0:	sub	x28, x28, #0x4
     9b4:	ldr	x3, [sp, #104]
     9b8:	add	x2, sp, #0x80
     9bc:	mov	x1, x28
     9c0:	str	xzr, [sp, #128]
     9c4:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
     9c8:	tst	w0, #0xff
     9cc:	b.eq	a00 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xd0>  // b.none
     9d0:	ldr	x1, [sp, #128]
     9d4:	cbz	x1, a00 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xd0>
     9d8:	add	x3, sp, #0x78
     9dc:	mov	x2, x20
     9e0:	mov	x0, x21
     9e4:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
     9e8:	tst	w0, #0xff
     9ec:	b.eq	a00 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xd0>  // b.none
     9f0:	ldr	x21, [sp, #120]
     9f4:	cbnz	x21, a68 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x138>
     9f8:	add	x24, x24, #0x1
     9fc:	b	990 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x60>
     a00:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     a04:	add	x27, sp, #0x78
     a08:	mov	x1, x28
     a0c:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     a10:	mov	x28, x0
     a14:	mov	x26, x0
     a18:	cbz	x26, a5c <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x12c>
     a1c:	ldr	x1, [x26, #40]
     a20:	mov	x3, x27
     a24:	mov	x2, x20
     a28:	mov	x0, x21
     a2c:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
     a30:	tst	w0, #0xff
     a34:	b.ne	a5c <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x12c>  // b.any
     a38:	ldr	x1, [x26, #56]
     a3c:	mov	x3, x27
     a40:	mov	x2, x20
     a44:	mov	x0, x21
     a48:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
     a4c:	tst	w0, #0xff
     a50:	b.ne	a5c <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x12c>  // b.any
     a54:	ldr	x26, [x26]
     a58:	b	a18 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xe8>
     a5c:	mov	x0, x28
     a60:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     a64:	b	9f0 <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0xc0>
     a68:	mov	x1, x19
     a6c:	mov	x0, x22
     a70:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     a74:	ldr	w24, [x21, #16]
     a78:	ldr	x0, [x0, #16]
     a7c:	ldr	x1, [x21, #24]
     a80:	add	x1, x1, x0
     a84:	str	x1, [x21, #24]
     a88:	mov	x0, x22
     a8c:	mov	x1, x19
     a90:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     a94:	ldr	x0, [x0, #8]
     a98:	mov	x1, x19
     a9c:	add	w24, w24, w0
     aa0:	str	w24, [x21, #16]
     aa4:	mov	x0, x22
     aa8:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     aac:	mov	w1, #0x1                   	// #1
     ab0:	strb	w1, [x0, #29]
     ab4:	add	x19, x19, #0x1
     ab8:	b	95c <_ZN6__lsan10LeakReport17ApplySuppressionsEv+0x2c>
     abc:	ldp	x21, x22, [sp, #16]
     ac0:	ldp	x23, x24, [sp, #32]
     ac4:	ldp	x25, x26, [sp, #48]
     ac8:	ldp	x27, x28, [sp, #64]
     acc:	ldr	x30, [sp, #80]
     ad0:	ldp	x19, x20, [sp], #144
     ad4:	ret

0000000000000ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>:
     ad8:	stp	x29, x30, [sp, #-128]!
     adc:	mov	x29, sp
     ae0:	stp	x19, x20, [sp, #16]
     ae4:	stp	x21, x22, [sp, #32]
     ae8:	mov	x21, x0
     aec:	sub	w0, w4, #0x1
     af0:	stp	x23, x24, [sp, #48]
     af4:	cmp	w0, #0x1
     af8:	stp	x25, x26, [sp, #64]
     afc:	stp	x27, x28, [sp, #80]
     b00:	b.ls	b24 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x4c>  // b.plast
     b04:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b08:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b0c:	add	x2, x2, #0x0
     b10:	add	x0, x0, #0x0
     b14:	mov	x4, #0x0                   	// #0
     b18:	mov	x3, #0x0                   	// #0
     b1c:	mov	w1, #0x9e                  	// #158
     b20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b24:	adrp	x20, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b28:	add	x0, x20, #0x0
     b2c:	mov	x26, x2
     b30:	mov	x23, #0x8                   	// #8
     b34:	mov	x25, x1
     b38:	mov	w27, w4
     b3c:	ldrb	w2, [x0, #162]
     b40:	ldrb	w0, [x0, #164]
     b44:	cmp	w2, #0x0
     b48:	csinc	x23, x23, xzr, eq  // eq = none
     b4c:	cbz	w0, b68 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x90>
     b50:	mov	x1, x3
     b54:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b58:	mov	x3, x25
     b5c:	mov	x2, x21
     b60:	add	x0, x0, #0x0
     b64:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     b68:	udiv	x0, x21, x23
     b6c:	add	x19, x21, x23
     b70:	add	x20, x20, #0x0
     b74:	adrp	x28, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     b78:	add	x22, x29, #0x78
     b7c:	add	x20, x20, #0x90
     b80:	add	x28, x28, #0x0
     b84:	msub	x0, x0, x23, x21
     b88:	sub	x19, x19, x0
     b8c:	cmp	x0, #0x0
     b90:	csel	x19, x19, x21, ne  // ne = any
     b94:	add	x0, x19, #0x8
     b98:	cmp	x0, x25
     b9c:	b.hi	cd4 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1fc>  // b.pmore
     ba0:	ldr	x24, [x19]
     ba4:	mov	x0, #0x3fff                	// #16383
     ba8:	cmp	x24, x0
     bac:	b.ls	ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>  // b.plast
     bb0:	mov	x0, x29
     bb4:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     bb8:	add	w0, w0, #0x1
     bbc:	lsr	x0, x24, x0
     bc0:	cbnz	x0, ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>
     bc4:	mov	x0, x24
     bc8:	bl	0 <_ZN6__lsan15PointsIntoChunkEPv>
     bcc:	str	x0, [x29, #112]
     bd0:	mov	x1, x0
     bd4:	cbz	x0, ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>
     bd8:	cmp	x0, x21
     bdc:	b.eq	ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>  // b.none
     be0:	mov	x0, x22
     be4:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     be8:	mov	x0, x22
     bec:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     bf0:	cmp	w0, #0x2
     bf4:	b.eq	ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>  // b.none
     bf8:	mov	x0, x22
     bfc:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     c00:	cmp	w0, #0x3
     c04:	b.eq	ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>  // b.none
     c08:	ldrb	w0, [x20, #19]
     c0c:	cbz	w0, c78 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1a0>
     c10:	mov	x0, x22
     c14:	mov	w1, w27
     c18:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
     c1c:	ldrb	w0, [x20, #20]
     c20:	cbz	w0, c64 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x18c>
     c24:	ldr	x3, [x29, #112]
     c28:	mov	x0, x22
     c2c:	str	x3, [x29, #96]
     c30:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c34:	ldr	x4, [x29, #112]
     c38:	add	x4, x0, x4
     c3c:	mov	x0, x22
     c40:	str	x4, [x29, #104]
     c44:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     c48:	mov	x5, x0
     c4c:	ldp	x3, x4, [x29, #96]
     c50:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     c54:	mov	x2, x24
     c58:	mov	x1, x19
     c5c:	add	x0, x0, #0x0
     c60:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c64:	cbz	x26, ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>
     c68:	add	x1, x29, #0x70
     c6c:	mov	x0, x26
     c70:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     c74:	b	ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>
     c78:	mov	x0, x19
     c7c:	bl	0 <_ZN6__lsan14WordIsPoisonedEm>
     c80:	tst	w0, #0xff
     c84:	b.eq	c10 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x138>  // b.none
     c88:	ldrb	w0, [x20, #20]
     c8c:	cbz	w0, ccc <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0x1f4>
     c90:	ldr	x3, [x29, #112]
     c94:	mov	x0, x22
     c98:	str	x3, [x29, #96]
     c9c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     ca0:	ldr	x4, [x29, #112]
     ca4:	add	x4, x0, x4
     ca8:	mov	x0, x22
     cac:	str	x4, [x29, #104]
     cb0:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     cb4:	mov	x5, x0
     cb8:	ldp	x3, x4, [x29, #96]
     cbc:	mov	x2, x24
     cc0:	mov	x1, x19
     cc4:	mov	x0, x28
     cc8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ccc:	add	x19, x19, x23
     cd0:	b	b94 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE+0xbc>
     cd4:	ldp	x19, x20, [sp, #16]
     cd8:	ldp	x21, x22, [sp, #32]
     cdc:	ldp	x23, x24, [sp, #48]
     ce0:	ldp	x25, x26, [sp, #64]
     ce4:	ldp	x27, x28, [sp, #80]
     ce8:	ldp	x29, x30, [sp], #128
     cec:	ret

0000000000000cf0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE>:
     cf0:	stp	x19, x20, [sp, #-48]!
     cf4:	mov	x20, x0
     cf8:	mov	x19, x1
     cfc:	add	x0, sp, #0x20
     d00:	add	x1, sp, #0x28
     d04:	stp	x21, x30, [sp, #16]
     d08:	mov	x21, x2
     d0c:	stp	xzr, xzr, [sp, #32]
     d10:	bl	0 <_ZN6__lsan23GetAllocatorGlobalRangeEPmS0_>
     d14:	ldr	x1, [sp, #32]
     d18:	cmp	x1, x20
     d1c:	b.cc	dc0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xd0>  // b.lo, b.ul, b.last
     d20:	cmp	x1, x19
     d24:	b.cs	dc0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xd0>  // b.hs, b.nlast
     d28:	ldr	x3, [sp, #40]
     d2c:	cmp	x1, x3
     d30:	b.ls	d54 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x64>  // b.plast
     d34:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d38:	add	x2, x2, #0x0
     d3c:	mov	x4, x3
     d40:	mov	x3, x1
     d44:	mov	w1, #0xc4                  	// #196
     d48:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d4c:	add	x0, x0, #0x0
     d50:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d54:	cmp	x19, x3
     d58:	b.cs	d70 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x80>  // b.hs, b.nlast
     d5c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d60:	mov	x4, x19
     d64:	add	x2, x2, #0x0
     d68:	mov	w1, #0xc5                  	// #197
     d6c:	b	d48 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0x58>
     d70:	cmp	x1, x20
     d74:	b.ls	d90 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xa0>  // b.plast
     d78:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     d7c:	mov	x2, x21
     d80:	add	x3, x3, #0x0
     d84:	mov	x0, x20
     d88:	mov	w4, #0x2                   	// #2
     d8c:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     d90:	ldr	x0, [sp, #40]
     d94:	cmp	x0, x19
     d98:	b.cs	db4 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xc4>  // b.hs, b.nlast
     d9c:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     da0:	mov	x2, x21
     da4:	add	x3, x3, #0x0
     da8:	mov	x1, x19
     dac:	mov	w4, #0x2                   	// #2
     db0:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     db4:	ldp	x21, x30, [sp, #16]
     db8:	ldp	x19, x20, [sp], #48
     dbc:	ret
     dc0:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     dc4:	mov	x2, x21
     dc8:	add	x3, x3, #0x0
     dcc:	mov	x1, x19
     dd0:	mov	x0, x20
     dd4:	mov	w4, #0x2                   	// #2
     dd8:	b	db0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE+0xc0>

0000000000000ddc <_ZN6__lsan24ForEachExtraStackRangeCbEmmPv>:
     ddc:	mov	w4, #0x2                   	// #2
     de0:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     de4:	add	x3, x3, #0x0
     de8:	b	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>

0000000000000dec <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb>:
     dec:	stp	x19, x20, [sp, #-48]!
     df0:	mov	x5, x1
     df4:	mov	x6, x2
     df8:	ldr	x1, [x1]
     dfc:	stp	x21, x22, [sp, #16]
     e00:	and	w22, w4, #0xff
     e04:	ldr	x4, [x5, #8]
     e08:	cmp	x1, x2
     e0c:	csel	x20, x1, x2, cs  // cs = hs, nlast
     e10:	str	x30, [sp, #32]
     e14:	add	x2, x1, x4
     e18:	cmp	x2, x3
     e1c:	csel	x21, x2, x3, ls  // ls = plast
     e20:	cmp	x20, x21
     e24:	b.cs	e90 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0xa4>  // b.hs, b.nlast
     e28:	mov	x19, x0
     e2c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e30:	ldrb	w0, [x0]
     e34:	cbz	w0, e64 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0x78>
     e38:	cmp	w22, #0x0
     e3c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e40:	adrp	x5, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e44:	add	x0, x0, #0x0
     e48:	add	x5, x5, #0x0
     e4c:	mov	x4, x3
     e50:	csel	x5, x5, x0, ne  // ne = any
     e54:	mov	x3, x6
     e58:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e5c:	add	x0, x0, #0x0
     e60:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     e64:	cbz	w22, e90 <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb+0xa4>
     e68:	mov	x2, x19
     e6c:	mov	x1, x21
     e70:	mov	x0, x20
     e74:	mov	w4, #0x2                   	// #2
     e78:	ldp	x21, x22, [sp, #16]
     e7c:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     e80:	ldr	x30, [sp, #32]
     e84:	add	x3, x3, #0x0
     e88:	ldp	x19, x20, [sp], #48
     e8c:	b	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     e90:	ldp	x21, x22, [sp, #16]
     e94:	ldr	x30, [sp, #32]
     e98:	ldp	x19, x20, [sp], #48
     e9c:	ret

0000000000000ea0 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv>:
     ea0:	stp	x19, x20, [sp, #-48]!
     ea4:	str	x30, [sp, #16]
     ea8:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     eac:	mov	x1, x0
     eb0:	add	x20, sp, #0x28
     eb4:	mov	x19, x0
     eb8:	mov	x0, x20
     ebc:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     ec0:	mov	x0, x20
     ec4:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     ec8:	tst	w0, #0xff
     ecc:	b.eq	f04 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv+0x64>  // b.none
     ed0:	mov	x0, x20
     ed4:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     ed8:	cmp	w0, #0x2
     edc:	b.eq	f04 <_ZN6__lsanL22MarkIndirectlyLeakedCbEmPv+0x64>  // b.none
     ee0:	mov	x0, x20
     ee4:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     ee8:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     eec:	add	x1, x0, x19
     ef0:	add	x3, x3, #0x0
     ef4:	mov	x0, x19
     ef8:	mov	w4, #0x1                   	// #1
     efc:	mov	x2, #0x0                   	// #0
     f00:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     f04:	ldr	x30, [sp, #16]
     f08:	ldp	x19, x20, [sp], #48
     f0c:	ret

0000000000000f10 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE.constprop.0>:
     f10:	stp	x19, x20, [sp, #-64]!
     f14:	mov	x19, x0
     f18:	stp	x21, x22, [sp, #16]
     f1c:	adrp	x21, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     f20:	add	x22, sp, #0x38
     f24:	add	x21, x21, #0x0
     f28:	stp	x23, x30, [sp, #32]
     f2c:	add	x23, x0, #0x10
     f30:	ldr	x0, [x19, #16]
     f34:	cbz	x0, f7c <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE.constprop.0+0x6c>
     f38:	ldr	x1, [x19]
     f3c:	add	x0, x1, x0, lsl #3
     f40:	ldur	x20, [x0, #-8]
     f44:	mov	x0, x23
     f48:	bl	100 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE8pop_backEv.isra.0>
     f4c:	mov	x1, x20
     f50:	mov	x0, x22
     f54:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     f58:	mov	x0, x22
     f5c:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
     f60:	add	x1, x20, x0
     f64:	mov	x3, x21
     f68:	mov	x2, x19
     f6c:	mov	x0, x20
     f70:	mov	w4, #0x2                   	// #2
     f74:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
     f78:	b	f30 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE.constprop.0+0x20>
     f7c:	ldp	x21, x22, [sp, #16]
     f80:	ldp	x23, x30, [sp, #32]
     f84:	ldp	x19, x20, [sp], #64
     f88:	ret

0000000000000f8c <_ZN6__lsanL15MarkInvalidPCCbEmPv>:
     f8c:	stp	x19, x20, [sp, #-64]!
     f90:	stp	x21, x30, [sp, #16]
     f94:	str	x0, [sp, #40]
     f98:	cbnz	x1, fbc <_ZN6__lsanL15MarkInvalidPCCbEmPv+0x30>
     f9c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     fa0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
     fa4:	add	x2, x2, #0x0
     fa8:	add	x0, x0, #0x0
     fac:	mov	x4, #0x0                   	// #0
     fb0:	mov	x3, #0x0                   	// #0
     fb4:	mov	w1, #0x18b                 	// #395
     fb8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fbc:	mov	x19, x1
     fc0:	bl	0 <_ZN6__lsan12GetUserBeginEm>
     fc4:	mov	x1, x0
     fc8:	add	x20, sp, #0x38
     fcc:	mov	x0, x20
     fd0:	str	x1, [sp, #40]
     fd4:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
     fd8:	mov	x0, x20
     fdc:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
     fe0:	tst	w0, #0xff
     fe4:	b.eq	1064 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xd8>  // b.none
     fe8:	mov	x0, x20
     fec:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
     ff0:	cmp	w0, #0x2
     ff4:	b.eq	1064 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xd8>  // b.none
     ff8:	mov	x0, x20
     ffc:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    1000:	cmp	w0, #0x3
    1004:	b.eq	1064 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xd8>  // b.none
    1008:	mov	x0, x20
    100c:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
    1010:	mov	w1, w0
    1014:	cbz	w0, 104c <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xc0>
    1018:	ldr	x0, [x19, #8]
    101c:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>
    1020:	cmp	w1, #0x1
    1024:	b.ls	104c <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xc0>  // b.plast
    1028:	ldr	x21, [x0, #8]
    102c:	cbz	x21, 104c <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xc0>
    1030:	ldrb	w0, [x19, #16]
    1034:	cbz	w0, 1064 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xd8>
    1038:	bl	0 <_ZN6__lsan9GetLinkerEv>
    103c:	mov	x1, x21
    1040:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
    1044:	tst	w0, #0xff
    1048:	b.eq	1064 <_ZN6__lsanL15MarkInvalidPCCbEmPv+0xd8>  // b.none
    104c:	mov	x0, x20
    1050:	mov	w1, #0x2                   	// #2
    1054:	bl	0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>
    1058:	ldr	x0, [x19]
    105c:	add	x1, sp, #0x28
    1060:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1064:	ldp	x21, x30, [sp, #16]
    1068:	ldp	x19, x20, [sp], #64
    106c:	ret

0000000000001070 <_ZN6__lsanL16CollectIgnoredCbEmPv>:
    1070:	stp	x19, x20, [sp, #-80]!
    1074:	stp	x21, x22, [sp, #16]
    1078:	str	x30, [sp, #32]
    107c:	str	x0, [sp, #56]
    1080:	cbnz	x1, 10a4 <_ZN6__lsanL16CollectIgnoredCbEmPv+0x34>
    1084:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1088:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    108c:	add	x2, x2, #0x0
    1090:	add	x0, x0, #0x0
    1094:	mov	x4, #0x0                   	// #0
    1098:	mov	x3, #0x0                   	// #0
    109c:	mov	w1, #0x16f                 	// #367
    10a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    10a4:	mov	x20, x1
    10a8:	bl	0 <_ZN6__lsan12GetUserBeginEm>
    10ac:	mov	x1, x0
    10b0:	add	x19, sp, #0x48
    10b4:	mov	x0, x19
    10b8:	str	x1, [sp, #56]
    10bc:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
    10c0:	mov	x0, x19
    10c4:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
    10c8:	tst	w0, #0xff
    10cc:	b.eq	112c <_ZN6__lsanL16CollectIgnoredCbEmPv+0xbc>  // b.none
    10d0:	mov	x0, x19
    10d4:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    10d8:	cmp	w0, #0x3
    10dc:	b.ne	112c <_ZN6__lsanL16CollectIgnoredCbEmPv+0xbc>  // b.any
    10e0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    10e4:	ldrb	w0, [x0]
    10e8:	cbz	w0, 1120 <_ZN6__lsanL16CollectIgnoredCbEmPv+0xb0>
    10ec:	mov	x0, x19
    10f0:	ldr	x22, [sp, #56]
    10f4:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
    10f8:	ldr	x21, [sp, #56]
    10fc:	add	x21, x0, x21
    1100:	mov	x0, x19
    1104:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
    1108:	mov	x3, x0
    110c:	mov	x2, x21
    1110:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1114:	mov	x1, x22
    1118:	add	x0, x0, #0x0
    111c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1120:	add	x1, sp, #0x38
    1124:	mov	x0, x20
    1128:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    112c:	ldp	x21, x22, [sp, #16]
    1130:	ldr	x30, [sp, #32]
    1134:	ldp	x19, x20, [sp], #80
    1138:	ret

000000000000113c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE>:
    113c:	stp	x19, x20, [sp, #-112]!
    1140:	cmp	w4, #0x1
    1144:	stp	x21, x22, [sp, #16]
    1148:	stp	x23, x24, [sp, #32]
    114c:	stp	x25, x26, [sp, #48]
    1150:	str	x30, [sp, #64]
    1154:	b.ls	1178 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x3c>  // b.plast
    1158:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    115c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1160:	add	x2, x2, #0x0
    1164:	add	x0, x0, #0x0
    1168:	mov	x4, #0x0                   	// #0
    116c:	mov	x3, #0x0                   	// #0
    1170:	mov	w1, #0x29f                 	// #671
    1174:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1178:	eor	w4, w4, #0x1
    117c:	mov	x19, x0
    1180:	ldr	x21, [x0, #24]
    1184:	mov	x25, x1
    1188:	mov	w24, w2
    118c:	mov	x23, x3
    1190:	and	w20, w4, #0x1
    1194:	add	x26, x0, #0x8
    1198:	mov	x22, #0x0                   	// #0
    119c:	cmp	x22, x21
    11a0:	b.eq	11f0 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0xb4>  // b.none
    11a4:	mov	x1, x22
    11a8:	mov	x0, x26
    11ac:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    11b0:	ldr	w1, [x0, #24]
    11b4:	cmp	w1, w24
    11b8:	b.ne	125c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x120>  // b.any
    11bc:	ldrb	w1, [x0, #28]
    11c0:	cmp	w1, w20
    11c4:	b.ne	125c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x120>  // b.any
    11c8:	ldr	x1, [x0, #8]
    11cc:	mov	x21, x22
    11d0:	add	x1, x1, #0x1
    11d4:	str	x1, [x0, #8]
    11d8:	mov	x1, x22
    11dc:	mov	x0, x26
    11e0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    11e4:	ldr	x1, [x0, #16]
    11e8:	add	x1, x1, x23
    11ec:	str	x1, [x0, #16]
    11f0:	ldr	x0, [x19, #24]
    11f4:	cmp	x21, x0
    11f8:	b.ne	12a0 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x164>  // b.any
    11fc:	mov	x0, #0x1388                	// #5000
    1200:	cmp	x21, x0
    1204:	b.eq	1318 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1dc>  // b.none
    1208:	mov	x0, #0x1                   	// #1
    120c:	stp	xzr, xzr, [sp, #80]
    1210:	stp	xzr, xzr, [sp, #96]
    1214:	ldr	x4, [x19, #16]
    1218:	stp	x0, x23, [sp, #88]
    121c:	ldr	w0, [x19]
    1220:	str	w0, [sp, #80]
    1224:	add	w1, w0, #0x1
    1228:	str	w1, [x19]
    122c:	str	w24, [sp, #104]
    1230:	lsr	x4, x4, #5
    1234:	strb	w20, [sp, #108]
    1238:	cmp	x21, x4
    123c:	b.ls	1264 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x128>  // b.plast
    1240:	mov	x3, x21
    1244:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1248:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    124c:	add	x2, x2, #0x0
    1250:	add	x0, x0, #0x0
    1254:	mov	w1, #0x1be                 	// #446
    1258:	b	1174 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x38>
    125c:	add	x22, x22, #0x1
    1260:	b	119c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x60>
    1264:	add	x20, x19, #0x8
    1268:	b.ne	1280 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x144>  // b.any
    126c:	add	x0, x21, #0x1
    1270:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1274:	mov	x1, x0
    1278:	mov	x0, x20
    127c:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1280:	ldr	x0, [x20, #16]
    1284:	mov	x2, #0x20                  	// #32
    1288:	ldr	x3, [x19, #8]
    128c:	add	x1, x0, #0x1
    1290:	str	x1, [x20, #16]
    1294:	add	x1, sp, #0x50
    1298:	add	x0, x3, x0, lsl #5
    129c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    12a0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12a4:	ldrb	w0, [x0]
    12a8:	cbz	w0, 1318 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1dc>
    12ac:	mov	x1, x21
    12b0:	add	x0, x19, #0x8
    12b4:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12b8:	ldr	w0, [x0]
    12bc:	ldr	x4, [x19, #40]
    12c0:	str	w0, [sp, #80]
    12c4:	mov	x0, #0x18                  	// #24
    12c8:	stp	x25, x23, [sp, #88]
    12cc:	add	x20, x19, #0x20
    12d0:	udiv	x4, x4, x0
    12d4:	ldr	x3, [x20, #16]
    12d8:	cmp	x3, x4
    12dc:	b.hi	1244 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x108>  // b.pmore
    12e0:	b.ne	12f8 <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE+0x1bc>  // b.any
    12e4:	add	x0, x3, #0x1
    12e8:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12ec:	mov	x1, x0
    12f0:	mov	x0, x20
    12f4:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    12f8:	ldr	x0, [x20, #16]
    12fc:	mov	x2, #0x18                  	// #24
    1300:	ldr	x3, [x19, #32]
    1304:	add	x1, x0, #0x1
    1308:	str	x1, [x20, #16]
    130c:	add	x1, sp, #0x50
    1310:	madd	x0, x0, x2, x3
    1314:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1318:	ldp	x21, x22, [sp, #16]
    131c:	ldp	x23, x24, [sp, #32]
    1320:	ldp	x25, x26, [sp, #48]
    1324:	ldr	x30, [sp, #64]
    1328:	ldp	x19, x20, [sp], #112
    132c:	ret

0000000000001330 <_ZN6__lsanL14CollectLeaksCbEmPv>:
    1330:	stp	x19, x20, [sp, #-64]!
    1334:	stp	x21, x22, [sp, #16]
    1338:	stp	x23, x30, [sp, #32]
    133c:	cbnz	x1, 1360 <_ZN6__lsanL14CollectLeaksCbEmPv+0x30>
    1340:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1344:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1348:	add	x2, x2, #0x0
    134c:	add	x0, x0, #0x0
    1350:	mov	x4, #0x0                   	// #0
    1354:	mov	x3, #0x0                   	// #0
    1358:	mov	w1, #0x1e8                 	// #488
    135c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1360:	mov	x21, x1
    1364:	bl	0 <_ZN6__lsan12GetUserBeginEm>
    1368:	mov	x1, x0
    136c:	add	x19, sp, #0x38
    1370:	mov	x22, x0
    1374:	mov	x0, x19
    1378:	bl	0 <_ZN6__lsan12LsanMetadataC1Em>
    137c:	mov	x0, x19
    1380:	bl	0 <_ZNK6__lsan12LsanMetadata9allocatedEv>
    1384:	tst	w0, #0xff
    1388:	b.eq	13c0 <_ZN6__lsanL14CollectLeaksCbEmPv+0x90>  // b.none
    138c:	mov	x0, x19
    1390:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    1394:	cbnz	w0, 13b0 <_ZN6__lsanL14CollectLeaksCbEmPv+0x80>
    1398:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    139c:	ldr	w20, [x0]
    13a0:	cbnz	w20, 13d0 <_ZN6__lsanL14CollectLeaksCbEmPv+0xa0>
    13a4:	mov	x0, x19
    13a8:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
    13ac:	b	13ec <_ZN6__lsanL14CollectLeaksCbEmPv+0xbc>
    13b0:	mov	x0, x19
    13b4:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    13b8:	cmp	w0, #0x1
    13bc:	b.eq	1398 <_ZN6__lsanL14CollectLeaksCbEmPv+0x68>  // b.none
    13c0:	ldp	x21, x22, [sp, #16]
    13c4:	ldp	x23, x30, [sp, #32]
    13c8:	ldp	x19, x20, [sp], #64
    13cc:	ret
    13d0:	mov	x0, x19
    13d4:	bl	0 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>
    13d8:	bl	0 <_ZN11__sanitizer13StackDepotGetEj>
    13dc:	cmp	w20, w1
    13e0:	csel	w20, w20, w1, cc  // cc = lo, ul, last
    13e4:	bfxil	x1, x20, #0, #32
    13e8:	bl	0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>
    13ec:	mov	w20, w0
    13f0:	mov	x0, x19
    13f4:	bl	0 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>
    13f8:	mov	x23, x0
    13fc:	mov	x0, x19
    1400:	bl	0 <_ZNK6__lsan12LsanMetadata3tagEv>
    1404:	mov	x3, x23
    1408:	mov	w4, w0
    140c:	mov	w2, w20
    1410:	mov	x1, x22
    1414:	mov	x0, x21
    1418:	bl	113c <_ZN6__lsan10LeakReport14AddLeakedChunkEmjmNS_8ChunkTagE>
    141c:	b	13c0 <_ZN6__lsanL14CollectLeaksCbEmPv+0x90>

0000000000001420 <_ZN6__lsan10LeakReport14ReportTopLeaksEm>:
    1420:	stp	x19, x20, [sp, #-64]!
    1424:	mov	x19, x0
    1428:	ldr	x0, [x0, #24]
    142c:	stp	x21, x22, [sp, #16]
    1430:	mov	x21, #0x1388                	// #5000
    1434:	stp	x23, x24, [sp, #32]
    1438:	cmp	x0, x21
    143c:	str	x30, [sp, #48]
    1440:	b.ls	1464 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x44>  // b.plast
    1444:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1448:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    144c:	add	x2, x2, #0x0
    1450:	add	x0, x0, #0x0
    1454:	mov	x4, #0x0                   	// #0
    1458:	mov	x3, #0x0                   	// #0
    145c:	mov	w1, #0x2be                 	// #702
    1460:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1464:	mov	x20, x1
    1468:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    146c:	add	x0, x0, #0x0
    1470:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1474:	ldr	x1, [x19, #24]
    1478:	cmp	x1, x21
    147c:	b.ne	148c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x6c>  // b.any
    1480:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1484:	add	x0, x0, #0x0
    1488:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    148c:	mov	x0, x19
    1490:	bl	744 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>
    1494:	cmp	x20, #0x0
    1498:	mov	x22, x0
    149c:	ccmp	x0, x20, #0x0, ne  // ne = any
    14a0:	b.ls	14b4 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x94>  // b.plast
    14a4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    14a8:	mov	x1, x20
    14ac:	add	x0, x0, #0x0
    14b0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    14b4:	mov	x24, x19
    14b8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    14bc:	ldr	x1, [x19, #24]
    14c0:	add	x2, x2, #0x0
    14c4:	ldr	x0, [x24, #8]!
    14c8:	mov	x23, #0x0                   	// #0
    14cc:	mov	x21, #0x0                   	// #0
    14d0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    14d4:	ldr	x0, [x19, #24]
    14d8:	cmp	x23, x0
    14dc:	b.cs	1514 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xf4>  // b.hs, b.nlast
    14e0:	mov	x1, x23
    14e4:	mov	x0, x24
    14e8:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    14ec:	ldrb	w0, [x0, #29]
    14f0:	cbnz	w0, 150c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xec>
    14f4:	mov	x1, x23
    14f8:	mov	x0, x19
    14fc:	add	x21, x21, #0x1
    1500:	bl	810 <_ZN6__lsan10LeakReport18PrintReportForLeakEm>
    1504:	cmp	x20, x21
    1508:	b.eq	1514 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xf4>  // b.none
    150c:	add	x23, x23, #0x1
    1510:	b	14d4 <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0xb4>
    1514:	cmp	x21, x22
    1518:	b.cs	153c <_ZN6__lsan10LeakReport14ReportTopLeaksEm+0x11c>  // b.hs, b.nlast
    151c:	sub	x1, x22, x21
    1520:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1524:	ldp	x21, x22, [sp, #16]
    1528:	add	x0, x0, #0x0
    152c:	ldp	x23, x24, [sp, #32]
    1530:	ldr	x30, [sp, #48]
    1534:	ldp	x19, x20, [sp], #64
    1538:	b	0 <_ZN11__sanitizer6PrintfEPKcz>
    153c:	ldp	x21, x22, [sp, #16]
    1540:	ldp	x23, x24, [sp, #32]
    1544:	ldr	x30, [sp, #48]
    1548:	ldp	x19, x20, [sp], #64
    154c:	ret

0000000000001550 <__lsan_register_root_region>:
    1550:	stp	x19, x20, [sp, #-64]!
    1554:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1558:	add	x19, x19, #0x0
    155c:	mov	x20, x0
    1560:	add	x0, x19, #0xc0
    1564:	stp	x21, x30, [sp, #16]
    1568:	mov	x21, x1
    156c:	str	x0, [sp, #40]
    1570:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    1574:	ldr	x19, [x19, #176]
    1578:	cbnz	x19, 159c <__lsan_register_root_region+0x4c>
    157c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1580:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1584:	add	x2, x2, #0x0
    1588:	add	x0, x0, #0x0
    158c:	mov	x4, #0x0                   	// #0
    1590:	mov	x3, #0x0                   	// #0
    1594:	mov	w1, #0x336                 	// #822
    1598:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    159c:	stp	x20, x21, [sp, #48]
    15a0:	ldr	x4, [x19, #8]
    15a4:	ldr	x3, [x19, #16]
    15a8:	lsr	x4, x4, #4
    15ac:	cmp	x3, x4
    15b0:	b.ls	15cc <__lsan_register_root_region+0x7c>  // b.plast
    15b4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15b8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15bc:	add	x2, x2, #0x0
    15c0:	add	x0, x0, #0x0
    15c4:	mov	w1, #0x1be                 	// #446
    15c8:	b	1598 <__lsan_register_root_region+0x48>
    15cc:	b.ne	15e4 <__lsan_register_root_region+0x94>  // b.any
    15d0:	add	x0, x3, #0x1
    15d4:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15d8:	mov	x1, x0
    15dc:	mov	x0, x19
    15e0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    15e4:	ldr	x0, [x19, #16]
    15e8:	mov	x2, #0x10                  	// #16
    15ec:	ldr	x3, [x19]
    15f0:	add	x1, x0, #0x1
    15f4:	str	x1, [x19, #16]
    15f8:	add	x1, sp, #0x30
    15fc:	add	x0, x3, x0, lsl #4
    1600:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1604:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
    1608:	ldr	x0, [x0]
    160c:	ldr	w0, [x0]
    1610:	cbz	w0, 1628 <__lsan_register_root_region+0xd8>
    1614:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1618:	mov	x2, x21
    161c:	mov	x1, x20
    1620:	add	x0, x0, #0x0
    1624:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1628:	add	x0, sp, #0x28
    162c:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1630:	ldp	x21, x30, [sp, #16]
    1634:	ldp	x19, x20, [sp], #64
    1638:	ret

000000000000163c <_ZN6__lsan21InitializeRootRegionsEv>:
    163c:	stp	x19, x20, [sp, #-32]!
    1640:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1644:	add	x19, x19, #0x0
    1648:	str	x30, [sp, #16]
    164c:	ldr	x0, [x19, #176]
    1650:	cbz	x0, 1674 <_ZN6__lsan21InitializeRootRegionsEv+0x38>
    1654:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1658:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    165c:	add	x2, x2, #0x0
    1660:	add	x0, x0, #0x0
    1664:	mov	x4, #0x0                   	// #0
    1668:	mov	x3, #0x0                   	// #0
    166c:	mov	w1, #0x68                  	// #104
    1670:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1674:	add	x20, x19, #0x140
    1678:	mov	x1, #0x1                   	// #1
    167c:	mov	x0, x20
    1680:	stp	xzr, xzr, [x19, #320]
    1684:	str	xzr, [x19, #336]
    1688:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    168c:	str	x20, [x19, #176]
    1690:	ldr	x30, [sp, #16]
    1694:	ldp	x19, x20, [sp], #32
    1698:	ret

000000000000169c <_ZN6__lsan14InitCommonLsanEv>:
    169c:	str	x30, [sp, #-16]!
    16a0:	bl	163c <_ZN6__lsan21InitializeRootRegionsEv>
    16a4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    16a8:	ldr	x0, [x0]
    16ac:	ldrb	w0, [x0, #57]
    16b0:	cbz	w0, 16c0 <_ZN6__lsan14InitCommonLsanEv+0x24>
    16b4:	bl	380 <_ZN6__lsan22InitializeSuppressionsEv>
    16b8:	ldr	x30, [sp], #16
    16bc:	b	0 <_ZN6__lsan33InitializePlatformSpecificModulesEv>
    16c0:	ldr	x30, [sp], #16
    16c4:	ret

00000000000016c8 <_ZN6__lsan10LeakReport12PrintSummaryEv>:
    16c8:	stp	x19, x20, [sp, #-80]!
    16cc:	mov	x1, #0x1388                	// #5000
    16d0:	stp	x23, x30, [sp, #32]
    16d4:	ldr	x23, [x0, #24]
    16d8:	stp	x21, x22, [sp, #16]
    16dc:	cmp	x23, x1
    16e0:	b.ls	1704 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x3c>  // b.plast
    16e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    16e8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    16ec:	add	x2, x2, #0x0
    16f0:	add	x0, x0, #0x0
    16f4:	mov	x4, #0x0                   	// #0
    16f8:	mov	x3, #0x0                   	// #0
    16fc:	mov	w1, #0x2f1                 	// #753
    1700:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1704:	add	x19, x0, #0x8
    1708:	mov	x20, #0x0                   	// #0
    170c:	mov	x22, #0x0                   	// #0
    1710:	mov	x21, #0x0                   	// #0
    1714:	cmp	x20, x23
    1718:	b.eq	1748 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x80>  // b.none
    171c:	mov	x1, x20
    1720:	mov	x0, x19
    1724:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1728:	ldrb	w1, [x0, #29]
    172c:	cbnz	w1, 1740 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x78>
    1730:	ldr	x1, [x0, #16]
    1734:	ldr	x0, [x0, #8]
    1738:	add	x21, x21, x1
    173c:	add	x22, x22, x0
    1740:	add	x20, x20, #0x1
    1744:	b	1714 <_ZN6__lsan10LeakReport12PrintSummaryEv+0x4c>
    1748:	add	x19, sp, #0x30
    174c:	mov	x1, #0x400                 	// #1024
    1750:	mov	x0, x19
    1754:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1758:	mov	x3, x22
    175c:	mov	x2, x21
    1760:	mov	x0, x19
    1764:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1768:	add	x1, x1, #0x0
    176c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1770:	ldr	x0, [sp, #48]
    1774:	mov	x1, #0x0                   	// #0
    1778:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
    177c:	ldp	x0, x1, [sp, #48]
    1780:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1784:	ldp	x21, x22, [sp, #16]
    1788:	ldp	x23, x30, [sp, #32]
    178c:	ldp	x19, x20, [sp], #80
    1790:	ret

0000000000001794 <_ZN6__lsanL13CheckForLeaksEv>:
    1794:	adrp	x0, 0 <__lsan_is_turned_off>
    1798:	stp	x19, x20, [sp, #-160]!
    179c:	ldr	x0, [x0]
    17a0:	stp	x21, x22, [sp, #16]
    17a4:	stp	x23, x24, [sp, #32]
    17a8:	stp	x25, x30, [sp, #48]
    17ac:	cbnz	x0, 1838 <_ZN6__lsanL13CheckForLeaksEv+0xa4>
    17b0:	bl	0 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>
    17b4:	add	x19, sp, #0x60
    17b8:	add	x0, x19, #0x10
    17bc:	mov	x1, #0x1                   	// #1
    17c0:	str	wzr, [sp, #104]
    17c4:	stp	xzr, xzr, [sp, #112]
    17c8:	str	xzr, [sp, #128]
    17cc:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    17d0:	add	x0, x19, #0x28
    17d4:	mov	x1, #0x1                   	// #1
    17d8:	stp	xzr, xzr, [sp, #136]
    17dc:	str	xzr, [sp, #152]
    17e0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    17e4:	strb	wzr, [sp, #96]
    17e8:	bl	0 <_ZN6__lsan18LockThreadRegistryEv>
    17ec:	bl	0 <_ZN6__lsan13LockAllocatorEv>
    17f0:	mov	x1, x19
    17f4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    17f8:	add	x0, x0, #0x0
    17fc:	bl	0 <_ZN6__lsan14DoStopTheWorldEPFvRKN11__sanitizer20SuspendedThreadsListEPvES4_>
    1800:	bl	0 <_ZN6__lsan15UnlockAllocatorEv>
    1804:	bl	0 <_ZN6__lsan20UnlockThreadRegistryEv>
    1808:	ldrb	w20, [sp, #96]
    180c:	cbnz	w20, 1848 <_ZN6__lsanL13CheckForLeaksEv+0xb4>
    1810:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1814:	add	x0, x0, #0x0
    1818:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    181c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1820:	add	x0, x0, #0x0
    1824:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1828:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    182c:	add	x0, x0, #0x0
    1830:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1834:	bl	0 <_ZN11__sanitizer3DieEv>
    1838:	bl	0 <__lsan_is_turned_off>
    183c:	cbz	w0, 17b0 <_ZN6__lsanL13CheckForLeaksEv+0x1c>
    1840:	mov	w20, #0x0                   	// #0
    1844:	b	1968 <_ZN6__lsanL13CheckForLeaksEv+0x1d4>
    1848:	add	x25, x19, #0x8
    184c:	mov	x0, x25
    1850:	bl	930 <_ZN6__lsan10LeakReport17ApplySuppressionsEv>
    1854:	mov	x0, x25
    1858:	bl	744 <_ZN6__lsan10LeakReport21UnsuppressedLeakCountEv>
    185c:	mov	x21, x0
    1860:	cbz	x0, 18d4 <_ZN6__lsanL13CheckForLeaksEv+0x140>
    1864:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
    1868:	and	w24, w0, #0xff
    186c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1870:	add	x0, x0, #0x0
    1874:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    1878:	adrp	x23, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    187c:	cmp	w24, #0x0
    1880:	add	x23, x23, #0x0
    1884:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1888:	add	x1, x1, #0x0
    188c:	csel	x1, x1, x23, ne  // ne = any
    1890:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1894:	add	x22, x22, #0x0
    1898:	mov	x0, x22
    189c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    18a0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    18a4:	add	x0, x0, #0x0
    18a8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    18ac:	cmp	w24, #0x0
    18b0:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    18b4:	add	x1, x1, #0x0
    18b8:	mov	x0, x22
    18bc:	csel	x1, x1, x23, ne  // ne = any
    18c0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    18c4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    18c8:	ldrsw	x1, [x0]
    18cc:	mov	x0, x25
    18d0:	bl	1420 <_ZN6__lsan10LeakReport14ReportTopLeaksEm>
    18d4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    18d8:	ldr	x0, [x0]
    18dc:	ldrb	w0, [x0, #177]
    18e0:	cbz	w0, 194c <_ZN6__lsanL13CheckForLeaksEv+0x1b8>
    18e4:	stp	xzr, xzr, [sp, #72]
    18e8:	str	xzr, [sp, #88]
    18ec:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    18f0:	mov	x1, x0
    18f4:	mov	x0, #0x8                   	// #8
    18f8:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    18fc:	mov	x22, x0
    1900:	mov	w2, #0x0                   	// #0
    1904:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1908:	add	x1, x1, #0x0
    190c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1910:	ldr	x1, [sp, #72]
    1914:	mov	x23, x0
    1918:	ldr	x2, [sp, #88]
    191c:	lsl	x2, x2, #3
    1920:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1924:	ldp	x0, x1, [sp, #72]
    1928:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    192c:	stp	x23, x22, [sp, #72]
    1930:	bl	80 <_ZN6__lsanL21GetSuppressionContextEv>
    1934:	add	x1, sp, #0x48
    1938:	bl	0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>
    193c:	ldr	x0, [sp, #88]
    1940:	cbnz	x0, 1980 <_ZN6__lsanL13CheckForLeaksEv+0x1ec>
    1944:	ldp	x0, x1, [sp, #72]
    1948:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    194c:	cbz	x21, 1a00 <_ZN6__lsanL13CheckForLeaksEv+0x26c>
    1950:	add	x0, x19, #0x8
    1954:	bl	16c8 <_ZN6__lsan10LeakReport12PrintSummaryEv>
    1958:	ldp	x0, x1, [sp, #136]
    195c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1960:	ldp	x0, x1, [sp, #112]
    1964:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1968:	mov	w0, w20
    196c:	ldp	x21, x22, [sp, #16]
    1970:	ldp	x23, x24, [sp, #32]
    1974:	ldp	x25, x30, [sp, #48]
    1978:	ldp	x19, x20, [sp], #160
    197c:	ret
    1980:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1984:	add	x1, x22, #0x0
    1988:	adrp	x24, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    198c:	add	x24, x24, #0x0
    1990:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1994:	mov	x23, #0x0                   	// #0
    1998:	add	x0, x0, #0x0
    199c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19a0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19a4:	add	x0, x0, #0x0
    19a8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19ac:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19b0:	add	x0, x0, #0x0
    19b4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19b8:	ldr	x0, [sp, #88]
    19bc:	cmp	x0, x23
    19c0:	b.ls	19ec <_ZN6__lsanL13CheckForLeaksEv+0x258>  // b.plast
    19c4:	ldr	x0, [sp, #72]
    19c8:	ldr	x0, [x0, x23, lsl #3]
    19cc:	add	x23, x23, #0x1
    19d0:	ldr	x3, [x0, #8]
    19d4:	ldr	x2, [x0, #24]
    19d8:	ldr	w1, [x0, #16]
    19dc:	mov	x0, x24
    19e0:	mov	w1, w1
    19e4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19e8:	b	19b8 <_ZN6__lsanL13CheckForLeaksEv+0x224>
    19ec:	add	x1, x22, #0x0
    19f0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    19f4:	add	x0, x0, #0x0
    19f8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    19fc:	b	1944 <_ZN6__lsanL13CheckForLeaksEv+0x1b0>
    1a00:	mov	w20, #0x0                   	// #0
    1a04:	b	1958 <_ZN6__lsanL13CheckForLeaksEv+0x1c4>

0000000000001a08 <_ZN6__lsan11DoLeakCheckEv>:
    1a08:	stp	x19, x30, [sp, #-32]!
    1a0c:	adrp	x19, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a10:	add	x19, x19, #0x0
    1a14:	add	x0, x19, #0xc0
    1a18:	str	x0, [sp, #24]
    1a1c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    1a20:	ldrb	w0, [x19, #344]
    1a24:	cbz	w0, 1a38 <_ZN6__lsan11DoLeakCheckEv+0x30>
    1a28:	add	x0, sp, #0x18
    1a2c:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a30:	ldp	x19, x30, [sp], #32
    1a34:	ret
    1a38:	mov	w0, #0x1                   	// #1
    1a3c:	strb	w0, [x19, #344]
    1a40:	bl	1794 <_ZN6__lsanL13CheckForLeaksEv>
    1a44:	strb	w0, [x19, #184]
    1a48:	tst	w0, #0xff
    1a4c:	b.eq	1a28 <_ZN6__lsan11DoLeakCheckEv+0x20>  // b.none
    1a50:	bl	0 <_ZN6__lsan11HandleLeaksEv>
    1a54:	b	1a28 <_ZN6__lsan11DoLeakCheckEv+0x20>

0000000000001a58 <__lsan_do_leak_check>:
    1a58:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1a5c:	ldr	x0, [x0]
    1a60:	ldrb	w0, [x0, #57]
    1a64:	cbz	w0, 1a6c <__lsan_do_leak_check+0x14>
    1a68:	b	1a08 <_ZN6__lsan11DoLeakCheckEv>
    1a6c:	ret

0000000000001a70 <_ZN6__lsanL22DoRecoverableLeakCheckEv>:
    1a70:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a74:	add	x0, x0, #0x0
    1a78:	stp	x19, x30, [sp, #-32]!
    1a7c:	add	x0, x0, #0xc0
    1a80:	str	x0, [sp, #24]
    1a84:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    1a88:	bl	1794 <_ZN6__lsanL13CheckForLeaksEv>
    1a8c:	and	w19, w0, #0xff
    1a90:	add	x0, sp, #0x18
    1a94:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1a98:	mov	w0, w19
    1a9c:	ldp	x19, x30, [sp], #32
    1aa0:	ret

0000000000001aa4 <_ZN6__lsan26DoRecoverableLeakCheckVoidEv>:
    1aa4:	b	1a70 <_ZN6__lsanL22DoRecoverableLeakCheckEv>

0000000000001aa8 <__lsan_do_recoverable_leak_check>:
    1aa8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1aac:	ldr	x0, [x0]
    1ab0:	ldrb	w0, [x0, #57]
    1ab4:	cbz	w0, 1abc <__lsan_do_recoverable_leak_check+0x14>
    1ab8:	b	1a70 <_ZN6__lsanL22DoRecoverableLeakCheckEv>
    1abc:	mov	w0, #0x0                   	// #0
    1ac0:	ret

0000000000001ac4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv>:
    1ac4:	stp	x19, x20, [sp, #-320]!
    1ac8:	stp	x21, x22, [sp, #16]
    1acc:	stp	x23, x24, [sp, #32]
    1ad0:	stp	x25, x26, [sp, #48]
    1ad4:	stp	x27, x28, [sp, #64]
    1ad8:	str	x30, [sp, #80]
    1adc:	cbnz	x1, 1b00 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x3c>
    1ae0:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ae4:	add	x2, x2, #0x0
    1ae8:	mov	x4, #0x0                   	// #0
    1aec:	mov	x3, #0x0                   	// #0
    1af0:	mov	w1, #0x22b                 	// #555
    1af4:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1af8:	add	x0, x0, #0x0
    1afc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1b00:	mov	x23, x1
    1b04:	ldrb	w1, [x1]
    1b08:	cbz	w1, 1b24 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x60>
    1b0c:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1b10:	mov	x4, #0x0                   	// #0
    1b14:	add	x2, x2, #0x0
    1b18:	mov	x3, #0x0                   	// #0
    1b1c:	mov	w1, #0x22c                 	// #556
    1b20:	b	1af4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x30>
    1b24:	ldr	x1, [x0]
    1b28:	mov	x20, x0
    1b2c:	ldr	x1, [x1, #16]
    1b30:	blr	x1
    1b34:	stp	xzr, xzr, [sp, #240]
    1b38:	mov	x19, x0
    1b3c:	str	xzr, [sp, #256]
    1b40:	cbz	x0, 1b94 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xd0>
    1b44:	add	x21, sp, #0xf0
    1b48:	mov	x1, x0
    1b4c:	mov	x0, x21
    1b50:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1b54:	ldr	x0, [sp, #256]
    1b58:	cmp	x19, x0
    1b5c:	b.ls	1b94 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xd0>  // b.plast
    1b60:	ldr	x0, [sp, #248]
    1b64:	cmp	x19, x0, lsr #3
    1b68:	b.ls	1b78 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xb4>  // b.plast
    1b6c:	mov	x1, x19
    1b70:	mov	x0, x21
    1b74:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1b78:	ldr	x0, [sp, #256]
    1b7c:	mov	w1, #0x0                   	// #0
    1b80:	ldr	x3, [sp, #240]
    1b84:	sub	x2, x19, x0
    1b88:	lsl	x2, x2, #3
    1b8c:	add	x0, x3, x0, lsl #3
    1b90:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1b94:	str	x19, [sp, #256]
    1b98:	mov	x19, #0x0                   	// #0
    1b9c:	ldr	x0, [x20]
    1ba0:	ldr	x1, [x0, #16]
    1ba4:	mov	x0, x20
    1ba8:	blr	x1
    1bac:	cmp	x0, x19
    1bb0:	b.ls	1c04 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x140>  // b.plast
    1bb4:	ldr	x0, [x20]
    1bb8:	ldr	x4, [sp, #256]
    1bbc:	ldr	x2, [x0, #24]
    1bc0:	cmp	x19, x4
    1bc4:	b.cc	1be4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x120>  // b.lo, b.ul, b.last
    1bc8:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1bcc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1bd0:	mov	x3, x19
    1bd4:	add	x2, x2, #0x0
    1bd8:	add	x0, x0, #0x0
    1bdc:	mov	w1, #0x1b6                 	// #438
    1be0:	b	1afc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x38>
    1be4:	ldr	x22, [sp, #240]
    1be8:	lsl	x21, x19, #3
    1bec:	mov	x1, x19
    1bf0:	mov	x0, x20
    1bf4:	add	x19, x19, #0x1
    1bf8:	blr	x2
    1bfc:	str	x0, [x22, x21]
    1c00:	b	1b9c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0xd8>
    1c04:	ldr	x0, [sp, #240]
    1c08:	mov	w2, #0x0                   	// #0
    1c0c:	ldr	x1, [sp, #256]
    1c10:	add	x26, sp, #0xf0
    1c14:	add	x19, sp, #0xb8
    1c18:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c1c:	bl	0 <_ZN6__lsan23GetThreadRegistryLockedEv>
    1c20:	mov	x2, x26
    1c24:	adrp	x1, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c28:	add	x1, x1, #0x0
    1c2c:	bl	0 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>
    1c30:	ldp	x0, x1, [sp, #240]
    1c34:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1c38:	stp	xzr, xzr, [sp, #184]
    1c3c:	mov	x0, x19
    1c40:	mov	x1, #0x1                   	// #1
    1c44:	str	xzr, [sp, #200]
    1c48:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c4c:	mov	x1, x19
    1c50:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c54:	add	x0, x0, #0x0
    1c58:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    1c5c:	mov	x0, x19
    1c60:	bl	0 <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE>
    1c64:	ldr	x0, [x20]
    1c68:	ldr	x1, [x0, #8]
    1c6c:	mov	x0, x20
    1c70:	blr	x1
    1c74:	mov	x21, x0
    1c78:	mov	x1, x0
    1c7c:	mov	x0, x26
    1c80:	stp	xzr, xzr, [sp, #240]
    1c84:	str	xzr, [sp, #256]
    1c88:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1c8c:	ldr	x0, [sp, #256]
    1c90:	cmp	x21, x0
    1c94:	b.ls	1cc0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x1fc>  // b.plast
    1c98:	mov	x1, x21
    1c9c:	mov	x0, x26
    1ca0:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ca4:	ldr	x0, [sp, #256]
    1ca8:	mov	w1, #0x0                   	// #0
    1cac:	ldr	x3, [sp, #240]
    1cb0:	sub	x2, x21, x0
    1cb4:	lsl	x2, x2, #3
    1cb8:	add	x0, x3, x0, lsl #3
    1cbc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1cc0:	ldr	x27, [sp, #240]
    1cc4:	adrp	x24, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1cc8:	str	x21, [sp, #256]
    1ccc:	mov	x25, #0x0                   	// #0
    1cd0:	add	x0, x27, x21, lsl #3
    1cd4:	add	x21, x24, #0x0
    1cd8:	add	x21, x21, #0x90
    1cdc:	str	x0, [sp, #96]
    1ce0:	add	x0, sp, #0xb0
    1ce4:	str	x0, [sp, #104]
    1ce8:	ldr	x0, [x20]
    1cec:	ldr	x1, [x0, #16]
    1cf0:	mov	x0, x20
    1cf4:	blr	x1
    1cf8:	cmp	x0, x25
    1cfc:	b.ls	2024 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x560>  // b.plast
    1d00:	ldr	x0, [x20]
    1d04:	mov	x1, x25
    1d08:	ldr	x2, [x0, #24]
    1d0c:	mov	x0, x20
    1d10:	blr	x2
    1d14:	mov	x22, x0
    1d18:	ldrb	w0, [x21, #21]
    1d1c:	cbz	w0, 1d30 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x26c>
    1d20:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1d24:	mov	x1, x22
    1d28:	add	x0, x0, #0x0
    1d2c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1d30:	ldr	x7, [sp, #104]
    1d34:	add	x6, sp, #0xa8
    1d38:	add	x5, sp, #0xa0
    1d3c:	add	x4, sp, #0x98
    1d40:	add	x3, sp, #0x90
    1d44:	add	x2, sp, #0x88
    1d48:	add	x1, sp, #0x80
    1d4c:	mov	x0, x22
    1d50:	bl	0 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE>
    1d54:	tst	w0, #0xff
    1d58:	b.ne	1d7c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b8>  // b.any
    1d5c:	ldrb	w0, [x21, #21]
    1d60:	cbz	w0, 1d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b0>
    1d64:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1d68:	mov	x1, x22
    1d6c:	add	x0, x0, #0x0
    1d70:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1d74:	add	x25, x25, #0x1
    1d78:	b	1ce8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x224>
    1d7c:	ldr	x0, [x20]
    1d80:	add	x3, sp, #0xd0
    1d84:	ldr	x2, [sp, #240]
    1d88:	mov	x1, x25
    1d8c:	ldr	x4, [x0]
    1d90:	mov	x0, x20
    1d94:	blr	x4
    1d98:	mov	w28, w0
    1d9c:	cmp	w0, #0x1
    1da0:	b.eq	1dc4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x300>  // b.none
    1da4:	mov	x1, x22
    1da8:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1dac:	add	x0, x0, #0x0
    1db0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1db4:	cmn	w28, #0x1
    1db8:	b.eq	1d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b0>  // b.none
    1dbc:	ldr	x0, [sp, #128]
    1dc0:	str	x0, [sp, #208]
    1dc4:	ldrb	w0, [x21, #14]
    1dc8:	cbz	w0, 1dec <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x328>
    1dcc:	cbz	w28, 1dec <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x328>
    1dd0:	ldr	x1, [sp, #96]
    1dd4:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1dd8:	mov	x2, x19
    1ddc:	add	x3, x3, #0x0
    1de0:	mov	x0, x27
    1de4:	mov	w4, #0x2                   	// #2
    1de8:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1dec:	ldrb	w0, [x21, #13]
    1df0:	cbz	w0, 1ea0 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x3dc>
    1df4:	ldrb	w0, [x21, #21]
    1df8:	cbz	w0, 1e10 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x34c>
    1dfc:	ldp	x1, x2, [sp, #128]
    1e00:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e04:	ldr	x3, [sp, #208]
    1e08:	add	x0, x0, #0x0
    1e0c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1e10:	ldr	x1, [sp, #128]
    1e14:	ldr	x0, [sp, #208]
    1e18:	cmp	x0, x1
    1e1c:	b.cc	1e2c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x368>  // b.lo, b.ul, b.last
    1e20:	ldr	x1, [sp, #136]
    1e24:	cmp	x0, x1
    1e28:	b.cc	1f4c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x488>  // b.lo, b.ul, b.last
    1e2c:	ldrb	w0, [x21, #21]
    1e30:	cbz	w0, 1e40 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x37c>
    1e34:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e38:	add	x0, x0, #0x0
    1e3c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1e40:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e44:	mov	x2, x0
    1e48:	mov	w28, #0x0                   	// #0
    1e4c:	ldp	x0, x1, [sp, #128]
    1e50:	cmp	x0, x1
    1e54:	b.cc	1f20 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x45c>  // b.lo, b.ul, b.last
    1e58:	ldrb	w0, [x21, #21]
    1e5c:	cbz	w0, 1e74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x3b0>
    1e60:	ldp	x2, x3, [sp, #128]
    1e64:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e68:	mov	w1, w28
    1e6c:	add	x0, x0, #0x0
    1e70:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1e74:	ldp	x0, x1, [sp, #128]
    1e78:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1e7c:	add	x3, x3, #0x0
    1e80:	mov	w4, #0x2                   	// #2
    1e84:	mov	x2, x19
    1e88:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1e8c:	adrp	x1, ddc <_ZN6__lsan24ForEachExtraStackRangeCbEmmPv>
    1e90:	mov	x2, x19
    1e94:	add	x1, x1, #0x0
    1e98:	mov	x0, x22
    1e9c:	bl	0 <_ZN6__lsan22ForEachExtraStackRangeEyPFvmmPvES0_>
    1ea0:	ldrb	w0, [x21, #15]
    1ea4:	cbz	w0, 1d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b0>
    1ea8:	ldr	x1, [sp, #144]
    1eac:	cbz	x1, 1f00 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x43c>
    1eb0:	ldrb	w0, [x21, #21]
    1eb4:	cbz	w0, 1ec8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x404>
    1eb8:	ldr	x2, [sp, #152]
    1ebc:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ec0:	add	x0, x0, #0x0
    1ec4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1ec8:	ldp	x1, x2, [sp, #160]
    1ecc:	ldp	x0, x5, [sp, #144]
    1ed0:	cmp	x1, x2
    1ed4:	b.eq	1ee8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x424>  // b.none
    1ed8:	cmp	x1, x5
    1edc:	b.hi	1ee8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x424>  // b.pmore
    1ee0:	cmp	x2, x0
    1ee4:	b.cs	1f54 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x490>  // b.hs, b.nlast
    1ee8:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1eec:	mov	x2, x19
    1ef0:	add	x3, x3, #0x0
    1ef4:	mov	x1, x5
    1ef8:	mov	w4, #0x2                   	// #2
    1efc:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1f00:	ldr	x0, [sp, #176]
    1f04:	cbnz	x0, 1f94 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4d0>
    1f08:	ldrb	w0, [x21, #21]
    1f0c:	cbz	w0, 1d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b0>
    1f10:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1f14:	mov	x1, x22
    1f18:	add	x0, x0, #0x0
    1f1c:	b	1d70 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2ac>
    1f20:	mov	x1, #0x1                   	// #1
    1f24:	str	x2, [sp, #112]
    1f28:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
    1f2c:	tst	w0, #0xff
    1f30:	b.ne	1e58 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x394>  // b.any
    1f34:	ldr	x2, [sp, #112]
    1f38:	add	w28, w28, #0x1
    1f3c:	ldr	x1, [sp, #128]
    1f40:	add	x1, x1, x2
    1f44:	str	x1, [sp, #128]
    1f48:	b	1e4c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x388>
    1f4c:	str	x0, [sp, #128]
    1f50:	b	1e74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x3b0>
    1f54:	cmp	x1, x0
    1f58:	b.ls	1f70 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4ac>  // b.plast
    1f5c:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1f60:	mov	x2, x19
    1f64:	add	x3, x3, #0x0
    1f68:	mov	w4, #0x2                   	// #2
    1f6c:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    1f70:	ldr	x1, [sp, #152]
    1f74:	ldr	x0, [sp, #168]
    1f78:	cmp	x1, x0
    1f7c:	b.ls	1f00 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x43c>  // b.plast
    1f80:	adrp	x3, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1f84:	mov	x2, x19
    1f88:	add	x3, x3, #0x0
    1f8c:	mov	w4, #0x2                   	// #2
    1f90:	b	1efc <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x438>
    1f94:	bl	0 <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>
    1f98:	tst	w0, #0xff
    1f9c:	b.ne	1f08 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x444>  // b.any
    1fa0:	adrp	x22, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1fa4:	add	x22, x22, #0x0
    1fa8:	mov	x28, #0x0                   	// #0
    1fac:	ldr	x1, [sp, #176]
    1fb0:	ldr	x0, [x1]
    1fb4:	cmp	x0, x28
    1fb8:	b.ls	1d74 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x2b0>  // b.plast
    1fbc:	ldr	x1, [x1, #8]
    1fc0:	lsl	x0, x28, #4
    1fc4:	add	x2, x1, x28, lsl #4
    1fc8:	ldr	x7, [x1, x0]
    1fcc:	ldr	x6, [x2, #8]
    1fd0:	add	x6, x7, x6
    1fd4:	cmp	x7, x6
    1fd8:	b.cs	201c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x558>  // b.hs, b.nlast
    1fdc:	ldrb	w0, [x21, #21]
    1fe0:	cbz	w0, 2004 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x540>
    1fe4:	mov	x3, x6
    1fe8:	mov	x2, x7
    1fec:	mov	x1, x28
    1ff0:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    1ff4:	add	x0, x0, #0x0
    1ff8:	stp	x7, x6, [sp, #112]
    1ffc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2000:	ldp	x7, x6, [sp, #112]
    2004:	mov	x3, x22
    2008:	mov	x2, x19
    200c:	mov	x1, x6
    2010:	mov	x0, x7
    2014:	mov	w4, #0x2                   	// #2
    2018:	bl	ad8 <_ZN6__lsan20ScanRangeForPointersEmmPN11__sanitizer18InternalMmapVectorImEEPKcNS_8ChunkTagE>
    201c:	add	x28, x28, #0x1
    2020:	b	1fac <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x4e8>
    2024:	ldp	x0, x1, [sp, #240]
    2028:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    202c:	add	x0, x24, #0x0
    2030:	ldrb	w1, [x0, #160]
    2034:	cbz	w1, 20d4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x610>
    2038:	ldr	x1, [x0, #176]
    203c:	mov	x25, #0x0                   	// #0
    2040:	cbz	x1, 20ac <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5e8>
    2044:	mov	x22, x0
    2048:	add	x20, sp, #0xd0
    204c:	ldr	x0, [x22, #176]
    2050:	ldr	x1, [x0, #16]
    2054:	cmp	x1, x25
    2058:	b.ls	20d4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x610>  // b.plast
    205c:	mov	x1, x25
    2060:	bl	0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2064:	mov	w1, #0x1                   	// #1
    2068:	mov	x21, x0
    206c:	mov	x0, x20
    2070:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
    2074:	stp	xzr, xzr, [sp, #264]
    2078:	str	xzr, [sp, #312]
    207c:	mov	x1, x26
    2080:	mov	x0, x20
    2084:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
    2088:	tst	w0, #0xff
    208c:	b.eq	20c4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x600>  // b.none
    2090:	ldp	x2, x3, [sp, #240]
    2094:	mov	x1, x21
    2098:	ldr	x4, [sp, #280]
    209c:	mov	x0, x19
    20a0:	and	w4, w4, #0x1
    20a4:	bl	dec <_ZN6__lsan14ScanRootRegionEPN11__sanitizer18InternalMmapVectorImEERKNS_10RootRegionEmmb>
    20a8:	b	207c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x5b8>
    20ac:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    20b0:	mov	x4, #0x0                   	// #0
    20b4:	add	x2, x2, #0x0
    20b8:	mov	x3, #0x0                   	// #0
    20bc:	mov	w1, #0x151                 	// #337
    20c0:	b	1af4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x30>
    20c4:	mov	x0, x20
    20c8:	add	x25, x25, #0x1
    20cc:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
    20d0:	b	204c <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x588>
    20d4:	mov	x0, x19
    20d8:	bl	f10 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE.constprop.0>
    20dc:	ldr	x4, [sp, #200]
    20e0:	cbz	x4, 20f8 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x634>
    20e4:	adrp	x2, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    20e8:	mov	x3, #0x0                   	// #0
    20ec:	add	x2, x2, #0x0
    20f0:	mov	w1, #0x1c7                 	// #455
    20f4:	b	1af4 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x30>
    20f8:	mov	x0, x19
    20fc:	bl	43c <_ZN6__lsan9ProcessPCEPN11__sanitizer18InternalMmapVectorImEE>
    2100:	add	x0, x24, #0x0
    2104:	ldrb	w0, [x0, #164]
    2108:	cbz	w0, 2118 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x654>
    210c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2110:	add	x0, x0, #0x0
    2114:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2118:	add	x24, x24, #0x0
    211c:	mov	x0, x19
    2120:	bl	0 <_ZN6__lsan34ProcessPlatformSpecificAllocationsEPN11__sanitizer18InternalMmapVectorImEE>
    2124:	mov	x0, x19
    2128:	bl	f10 <_ZN6__lsanL12FloodFillTagEPN11__sanitizer18InternalMmapVectorImEENS_8ChunkTagE.constprop.0>
    212c:	ldrb	w0, [x24, #164]
    2130:	cbz	w0, 2140 <_ZN6__lsanL21CheckForLeaksCallbackERKN11__sanitizer20SuspendedThreadsListEPv+0x67c>
    2134:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2138:	add	x0, x0, #0x0
    213c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    2140:	mov	x1, #0x0                   	// #0
    2144:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2148:	add	x0, x0, #0x0
    214c:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2150:	ldp	x0, x1, [sp, #184]
    2154:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    2158:	add	x1, x23, #0x8
    215c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2160:	add	x0, x0, #0x0
    2164:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2168:	mov	x1, #0x0                   	// #0
    216c:	adrp	x0, 0 <_ZN6__lsanL14LeakComparatorERKNS_4LeakES2_>
    2170:	add	x0, x0, #0x0
    2174:	bl	0 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>
    2178:	mov	w0, #0x1                   	// #1
    217c:	strb	w0, [x23]
    2180:	ldp	x21, x22, [sp, #16]
    2184:	ldp	x23, x24, [sp, #32]
    2188:	ldp	x25, x26, [sp, #48]
    218c:	ldp	x27, x28, [sp, #64]
    2190:	ldr	x30, [sp, #80]
    2194:	ldp	x19, x20, [sp], #320
    2198:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	ldr	x0, [x0, #8]
   4:	str	x1, [x0]
   8:	mov	w0, #0x1                   	// #1
   c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	add	x1, sp, #0x28
  14:	mov	w2, #0xa                   	// #10
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	w0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  40:	mov	x1, x19
  44:	add	x0, x0, #0x0
  48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  4c:	mov	w0, w20
  50:	ldr	x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #48
  58:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
   c:	add	x1, x1, #0x0
  10:	ldr	x20, [x0, #8]
  14:	mov	x0, x19
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  24:	strb	wzr, [x20]
  28:	mov	w0, #0x1                   	// #1
  2c:	b	a8 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xa8>
  30:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  34:	mov	x0, x19
  38:	add	x1, x1, #0x0
  3c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  40:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  44:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  48:	mov	x0, x19
  4c:	add	x1, x1, #0x0
  50:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  54:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  58:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  5c:	mov	x0, x19
  60:	add	x1, x1, #0x0
  64:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  68:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  6c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  70:	mov	x0, x19
  74:	add	x1, x1, #0x0
  78:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  7c:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  80:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  84:	mov	x0, x19
  88:	add	x1, x1, #0x0
  8c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  90:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  94:	mov	x1, x19
  98:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  a4:	mov	w0, #0x0                   	// #0
  a8:	ldr	x30, [sp, #16]
  ac:	ldp	x19, x20, [sp], #32
  b0:	ret
  b4:	mov	w0, #0x1                   	// #1
  b8:	strb	w0, [x20]
  bc:	b	28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer26MostSignificantSetBitIndexEm:

0000000000000000 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>:
   0:	cbnz	x0, 28 <_ZN11__sanitizer26MostSignificantSetBitIndexEm+0x28>
   4:	str	x30, [sp, #-16]!
   8:	adrp	x2, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
   c:	adrp	x0, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
  10:	add	x2, x2, #0x0
  14:	add	x0, x0, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x151                 	// #337
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	clz	x0, x0
  2c:	mov	w1, #0x3f                  	// #63
  30:	sub	w0, w1, w0
  34:	sxtw	x0, w0
  38:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   8:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
   c:	add	x2, x2, #0x0
  10:	mov	x4, #0x0                   	// #0
  14:	mov	x3, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x1, x0, #0x1
  2c:	mov	x19, x0
  30:	tst	x1, x0
  34:	b.eq	8c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x8c>  // b.none
  38:	bl	0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  3c:	add	w1, w0, #0x1
  40:	mov	x4, #0x1                   	// #1
  44:	mov	x2, x0
  48:	lsl	x0, x4, x1
  4c:	cmp	x19, x0
  50:	b.cc	6c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x6c>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	mov	x3, x19
  60:	add	x2, x2, #0x0
  64:	mov	w1, #0x17b                 	// #379
  68:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  6c:	lsl	x4, x4, x2
  70:	cmp	x19, x4
  74:	b.hi	8c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x8c>  // b.pmore
  78:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  7c:	mov	x3, x19
  80:	add	x2, x2, #0x0
  84:	mov	w1, #0x17c                 	// #380
  88:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  8c:	ldp	x19, x30, [sp], #16
  90:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #4
  34:	ret

Disassembly of section .text._ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm:

0000000000000000 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1ba                 	// #442
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #3
  34:	ret

Disassembly of section .text._ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	d4 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xd4>  // b.plast
   8:	mov	x2, #0x1                   	// #1
   c:	mov	x3, x2
  10:	mov	x4, x3
  14:	sub	x3, x3, #0x1
  18:	lsr	x3, x3, #1
  1c:	lsl	x4, x4, #3
  20:	lsl	x5, x3, #3
  24:	ldr	x6, [x0, x4]
  28:	ldr	x7, [x0, x5]
  2c:	cmp	x7, x6
  30:	b.cs	40 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x40>  // b.hs, b.nlast
  34:	str	x7, [x0, x4]
  38:	str	x6, [x0, x5]
  3c:	cbnz	x3, 10 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x10>
  40:	add	x3, x2, #0x1
  44:	cmp	x1, x3
  48:	b.ne	d8 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xd8>  // b.any
  4c:	ldr	x1, [x0]
  50:	ldr	x3, [x0, x2, lsl #3]
  54:	str	x3, [x0]
  58:	str	x1, [x0, x2, lsl #3]
  5c:	mov	x1, #0x0                   	// #0
  60:	lsl	x4, x1, #1
  64:	add	x5, x1, #0x1
  68:	add	x3, x4, #0x1
  6c:	add	x4, x4, #0x2
  70:	cmp	x3, x2
  74:	b.cs	e8 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  78:	ldr	x7, [x0, x1, lsl #3]
  7c:	ldr	x6, [x0, x3, lsl #3]
  80:	cmp	x7, x6
  84:	b.cs	e8 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  88:	cmp	x4, x2
  8c:	b.cs	a4 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xa4>  // b.hs, b.nlast
  90:	lsl	x5, x5, #4
  94:	ldr	x6, [x0, x3, lsl #3]
  98:	ldr	x5, [x0, x5]
  9c:	cmp	x6, x5
  a0:	csel	x3, x3, x4, cs  // cs = hs, nlast
  a4:	cmp	x3, x1
  a8:	b.eq	cc <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xcc>  // b.none
  ac:	lsl	x4, x3, #3
  b0:	lsl	x1, x1, #3
  b4:	cmp	x3, x2
  b8:	ldr	x6, [x0, x4]
  bc:	ldr	x5, [x0, x1]
  c0:	str	x6, [x0, x1]
  c4:	str	x5, [x0, x4]
  c8:	b.cc	e0 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xe0>  // b.lo, b.ul, b.last
  cc:	subs	x2, x2, #0x1
  d0:	b.ne	4c <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x4c>  // b.any
  d4:	ret
  d8:	mov	x2, x3
  dc:	b	c <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xc>
  e0:	mov	x1, x3
  e4:	b	60 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x60>
  e8:	cmp	x4, x2
  ec:	b.cs	cc <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0xcc>  // b.hs, b.nlast
  f0:	mov	x3, x1
  f4:	b	90 <_ZN11__sanitizer4SortIyNS_11CompareLessIyEEEEvPT_mT0_+0x90>

Disassembly of section .text._ZN11__sanitizer17GenericScopedLockINS_13BlockingMutexEED2Ev:

0000000000000000 <_ZN11__sanitizer17GenericScopedLockINS_13BlockingMutexEED1Ev>:
   0:	ldr	x0, [x0]
   4:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #5
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #3
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #3
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	ldp	x4, x3, [x0, #8]
   8:	str	x30, [sp, #16]
   c:	lsr	x4, x4, #3
  10:	cmp	x3, x4
  14:	b.ls	30 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm+0x30>  // b.plast
  18:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm>
  1c:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	w1, #0x1be                 	// #446
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	b.ne	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm+0x50>  // b.any
  3c:	add	x0, x3, #0x1
  40:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm>
  44:	mov	x1, x0
  48:	mov	x0, x19
  4c:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE9push_backERKm>
  50:	ldr	x0, [x19, #16]
  54:	mov	x2, #0x8                   	// #8
  58:	ldr	x30, [sp, #16]
  5c:	add	x1, x0, #0x1
  60:	str	x1, [x19, #16]
  64:	mov	x1, x20
  68:	ldr	x3, [x19]
  6c:	ldp	x19, x20, [sp], #32
  70:	add	x0, x3, x0, lsl #3
  74:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #5
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan4LeakEE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #5
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x19, x0
  38:	mov	x20, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm+0x24>
  58:	mov	x22, #0x18                  	// #24
  5c:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  60:	mov	x1, x0
  64:	mul	x0, x20, x22
  68:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  6c:	mov	x20, x0
  70:	mov	w2, #0x0                   	// #0
  74:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan12LeakedObjectEE7ReallocEm>
  78:	add	x1, x1, #0x0
  7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  80:	ldr	x2, [x19, #16]
  84:	mov	x21, x0
  88:	ldr	x1, [x19]
  8c:	mul	x2, x2, x22
  90:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  94:	ldp	x0, x1, [x19]
  98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  9c:	ldr	x30, [sp, #32]
  a0:	stp	x21, x20, [x19]
  a4:	ldp	x21, x22, [sp, #16]
  a8:	ldp	x19, x20, [sp], #48
  ac:	ret

Disassembly of section .text._ZN11__sanitizer4SwapIN6__lsan4LeakEEEvRT_S4_:

0000000000000000 <_ZN11__sanitizer4SwapIN6__lsan4LeakEEEvRT_S4_>:
   0:	ldp	x6, x7, [x1]
   4:	sub	sp, sp, #0x20
   8:	ldp	x4, x5, [x0]
   c:	stp	x6, x7, [x0]
  10:	ldp	x6, x7, [x1, #16]
  14:	ldp	x2, x3, [x0, #16]
  18:	stp	x6, x7, [x0, #16]
  1c:	stp	x4, x5, [x1]
  20:	stp	x2, x3, [x1, #16]
  24:	add	sp, sp, #0x20
  28:	ret

Disassembly of section .text._ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	120 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x120>  // b.plast
   8:	stp	x19, x20, [sp, #-64]!
   c:	mov	x19, x0
  10:	mov	x20, #0x1                   	// #1
  14:	stp	x23, x24, [sp, #32]
  18:	mov	x23, x1
  1c:	mov	x24, x2
  20:	stp	x21, x22, [sp, #16]
  24:	stp	x25, x30, [sp, #48]
  28:	mov	x21, x20
  2c:	mov	x22, x21
  30:	sub	x21, x21, #0x1
  34:	lsr	x21, x21, #1
  38:	add	x22, x19, x22, lsl #5
  3c:	mov	x1, x22
  40:	add	x25, x19, x21, lsl #5
  44:	mov	x0, x25
  48:	blr	x24
  4c:	tst	w0, #0xff
  50:	b.eq	64 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x64>  // b.none
  54:	mov	x1, x25
  58:	mov	x0, x22
  5c:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
  60:	cbnz	x21, 2c <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x2c>
  64:	add	x0, x20, #0x1
  68:	cmp	x23, x0
  6c:	b.ne	100 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x100>  // b.any
  70:	mov	x22, #0x0                   	// #0
  74:	add	x1, x19, x20, lsl #5
  78:	mov	x0, x19
  7c:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
  80:	lsl	x23, x22, #1
  84:	add	x25, x22, #0x1
  88:	add	x21, x23, #0x1
  8c:	add	x23, x23, #0x2
  90:	cmp	x21, x20
  94:	b.cs	110 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x110>  // b.hs, b.nlast
  98:	add	x1, x19, x21, lsl #5
  9c:	add	x0, x19, x22, lsl #5
  a0:	blr	x24
  a4:	tst	w0, #0xff
  a8:	b.eq	110 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x110>  // b.none
  ac:	cmp	x23, x20
  b0:	b.cs	c8 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xc8>  // b.hs, b.nlast
  b4:	add	x0, x19, x21, lsl #5
  b8:	add	x1, x19, x25, lsl #6
  bc:	blr	x24
  c0:	tst	w0, #0xff
  c4:	csel	x21, x21, x23, eq  // eq = none
  c8:	cmp	x21, x22
  cc:	b.eq	e4 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xe4>  // b.none
  d0:	add	x1, x19, x21, lsl #5
  d4:	add	x0, x19, x22, lsl #5
  d8:	bl	0 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_>
  dc:	cmp	x21, x20
  e0:	b.cc	108 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x108>  // b.lo, b.ul, b.last
  e4:	subs	x20, x20, #0x1
  e8:	b.ne	70 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x70>  // b.any
  ec:	ldp	x21, x22, [sp, #16]
  f0:	ldp	x23, x24, [sp, #32]
  f4:	ldp	x25, x30, [sp, #48]
  f8:	ldp	x19, x20, [sp], #64
  fc:	ret
 100:	mov	x20, x0
 104:	b	28 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x28>
 108:	mov	x22, x21
 10c:	b	80 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0x80>
 110:	cmp	x23, x20
 114:	b.cs	e4 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xe4>  // b.hs, b.nlast
 118:	mov	x21, x22
 11c:	b	b4 <_ZN11__sanitizer4SortIN6__lsan4LeakEPFbRKS2_S4_EEEvPT_mT0_+0xb4>
 120:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #4
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIN6__lsan10RootRegionEE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #4
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorImE7reserveEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7reserveEm>:
   0:	ldr	x2, [x0, #8]
   4:	cmp	x1, x2, lsr #3
   8:	b.ls	10 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7reserveEm+0x10>  // b.plast
   c:	b	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7reserveEm>
  10:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #3
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #3
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

lsan_common_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	mov	x20, #0x0                   	// #0
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x2
  14:	mov	x22, #0x38                  	// #56
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x23, #0xffffffff            	// #4294967295
  20:	mov	x24, #0x1                   	// #1
  24:	movk	x23, #0x2, lsl #32
  28:	movk	x24, #0x2, lsl #32
  2c:	str	x30, [sp, #48]
  30:	ldrh	w0, [x19, #24]
  34:	cmp	x0, x20
  38:	b.ls	80 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x80>  // b.plast
  3c:	mul	x0, x20, x22
  40:	ldr	x1, [x19, #16]
  44:	add	x2, x1, x0
  48:	ldr	x0, [x1, x0]
  4c:	and	x0, x0, x23
  50:	cmp	x0, x24
  54:	b.ne	78 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x78>  // b.any
  58:	ldr	x1, [x2, #40]
  5c:	cbz	x1, 78 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x78>
  60:	ldr	x0, [x19]
  64:	ldr	x2, [x2, #16]
  68:	add	x0, x0, x2
  6c:	mov	x2, x21
  70:	add	x1, x1, x0
  74:	bl	0 <_ZN6__lsan15ScanGlobalRangeEmmPN11__sanitizer18InternalMmapVectorImEE>
  78:	add	x20, x20, #0x1
  7c:	b	30 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv+0x30>
  80:	mov	w0, #0x0                   	// #0
  84:	ldp	x21, x22, [sp, #16]
  88:	ldp	x23, x24, [sp, #32]
  8c:	ldr	x30, [sp, #48]
  90:	ldp	x19, x20, [sp], #64
  94:	ret

0000000000000098 <_ZN6__lsanL22DoStopTheWorldCallbackEP12dl_phdr_infomPv>:
  98:	ldp	x0, x1, [x2]
  9c:	str	x30, [sp, #-16]!
  a0:	bl	0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>
  a4:	mov	w0, #0x1                   	// #1
  a8:	ldr	x30, [sp], #16
  ac:	ret

00000000000000b0 <_ZN6__lsan20DisabledInThisThreadEv>:
  b0:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  b4:	ldr	x0, [x0]
  b8:	mrs	x1, tpidr_el0
  bc:	ldr	w0, [x1, x0]
  c0:	cmp	w0, #0x0
  c4:	cset	w0, gt
  c8:	ret

00000000000000cc <_ZN6__lsan19DisableInThisThreadEv>:
  cc:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  d0:	ldr	x1, [x1]
  d4:	mrs	x2, tpidr_el0
  d8:	ldr	w0, [x2, x1]
  dc:	add	w0, w0, #0x1
  e0:	str	w0, [x2, x1]
  e4:	ret

00000000000000e8 <_ZN6__lsan18EnableInThisThreadEv>:
  e8:	stp	x19, x20, [sp, #-32]!
  ec:	mrs	x20, tpidr_el0
  f0:	adrp	x19, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
  f4:	ldr	x19, [x19]
  f8:	ldr	w0, [x20, x19]
  fc:	str	x30, [sp, #16]
 100:	cbnz	w0, 108 <_ZN6__lsan18EnableInThisThreadEv+0x20>
 104:	bl	0 <_ZN6__lsan23DisableCounterUnderflowEv>
 108:	ldr	w0, [x20, x19]
 10c:	ldr	x30, [sp, #16]
 110:	sub	w0, w0, #0x1
 114:	str	w0, [x20, x19]
 118:	ldp	x19, x20, [sp], #32
 11c:	ret

0000000000000120 <_ZN6__lsan33InitializePlatformSpecificModulesEv>:
 120:	stp	x19, x20, [sp, #-192]!
 124:	add	x20, sp, #0x58
 128:	stp	x21, x22, [sp, #16]
 12c:	mov	x0, x20
 130:	stp	x23, x24, [sp, #32]
 134:	adrp	x22, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 138:	add	x23, x22, #0x0
 13c:	stp	x25, x26, [sp, #48]
 140:	add	x25, sp, #0x78
 144:	add	x24, x23, #0x40
 148:	stp	x27, x30, [sp, #64]
 14c:	add	x26, x25, #0x1c
 150:	strb	wzr, [sp, #112]
 154:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 158:	ldr	x19, [sp, #88]
 15c:	mov	x0, #0x48                  	// #72
 160:	ldr	x21, [sp, #104]
 164:	madd	x21, x21, x0, x19
 168:	cmp	x21, x19
 16c:	b.eq	230 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x110>  // b.none
 170:	ldr	x27, [x19, #8]
 174:	mov	x0, #0x7                   	// #7
 178:	bl	0 <getauxval>
 17c:	cmp	x27, x0
 180:	b.ne	1d8 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xb8>  // b.any
 184:	ldr	x0, [x23]
 188:	cbnz	x0, 1e0 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xc0>
 18c:	mov	x1, x19
 190:	mov	x2, #0x48                  	// #72
 194:	mov	x0, x24
 198:	str	x24, [x23]
 19c:	bl	0 <memcpy>
 1a0:	stp	xzr, xzr, [sp, #120]
 1a4:	mov	x2, #0x10                  	// #16
 1a8:	mov	w1, #0x0                   	// #0
 1ac:	mov	x0, x26
 1b0:	str	xzr, [sp, #136]
 1b4:	str	wzr, [sp, #144]
 1b8:	strb	wzr, [sp, #164]
 1bc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1c0:	mov	x1, x25
 1c4:	mov	x0, x19
 1c8:	mov	x2, #0x48                  	// #72
 1cc:	stp	xzr, xzr, [sp, #168]
 1d0:	str	xzr, [sp, #184]
 1d4:	bl	0 <memcpy>
 1d8:	add	x19, x19, #0x48
 1dc:	b	168 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0x48>
 1e0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 1e4:	ldr	x0, [x0]
 1e8:	ldr	w0, [x0]
 1ec:	cbz	w0, 204 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xe4>
 1f0:	adrp	x1, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 1f4:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 1f8:	add	x1, x1, #0x0
 1fc:	add	x0, x0, #0x0
 200:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 204:	ldr	x0, [x22]
 208:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 20c:	str	xzr, [x22]
 210:	mov	x0, x20
 214:	bl	0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 218:	ldp	x21, x22, [sp, #16]
 21c:	ldp	x23, x24, [sp, #32]
 220:	ldp	x25, x26, [sp, #48]
 224:	ldp	x27, x30, [sp, #64]
 228:	ldp	x19, x20, [sp], #192
 22c:	ret
 230:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 234:	ldr	x0, [x0]
 238:	cbnz	x0, 210 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xf0>
 23c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 240:	ldr	x0, [x0]
 244:	ldr	w0, [x0]
 248:	cbz	w0, 210 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xf0>
 24c:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 250:	add	x0, x0, #0x0
 254:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 258:	b	210 <_ZN6__lsan33InitializePlatformSpecificModulesEv+0xf0>

000000000000025c <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE>:
 25c:	mov	x1, x0
 260:	adrp	x0, 0 <_ZN6__lsan10lsan_flagsE>
 264:	ldr	x0, [x0]
 268:	ldrb	w0, [x0, #12]
 26c:	cbz	w0, 27c <_ZN6__lsan20ProcessGlobalRegionsEPN11__sanitizer18InternalMmapVectorImEE+0x20>
 270:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 274:	add	x0, x0, #0x0
 278:	b	0 <dl_iterate_phdr>
 27c:	ret

0000000000000280 <_ZN6__lsan9GetLinkerEv>:
 280:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 284:	ldr	x0, [x0]
 288:	ret

000000000000028c <_ZN6__lsan34ProcessPlatformSpecificAllocationsEPN11__sanitizer18InternalMmapVectorImEE>:
 28c:	ret

0000000000000290 <_ZN6__lsan11HandleLeaksEv>:
 290:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 294:	ldr	x0, [x0]
 298:	ldr	w0, [x0, #216]
 29c:	cbz	w0, 2a8 <_ZN6__lsan11HandleLeaksEv+0x18>
 2a0:	str	x30, [sp, #-16]!
 2a4:	bl	0 <_ZN11__sanitizer3DieEv>
 2a8:	ret

00000000000002ac <_ZN6__lsan14DoStopTheWorldEPFvRKN11__sanitizer20SuspendedThreadsListEPvES4_>:
 2ac:	str	x30, [sp, #-32]!
 2b0:	stp	x0, x1, [sp, #16]
 2b4:	add	x1, sp, #0x10
 2b8:	adrp	x0, 0 <_ZN6__lsanL28ProcessGlobalRegionsCallbackEP12dl_phdr_infomPv>
 2bc:	add	x0, x0, #0x0
 2c0:	bl	0 <dl_iterate_phdr>
 2c4:	ldr	x30, [sp], #32
 2c8:	ret

Disassembly of section .text._ZN11__sanitizer13ListOfModules5clearEv:

0000000000000000 <_ZN11__sanitizer13ListOfModules5clearEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	x0, #0x48                  	// #72
   c:	stp	x21, x30, [sp, #16]
  10:	ldr	x19, [x20]
  14:	ldr	x21, [x20, #16]
  18:	madd	x21, x21, x0, x19
  1c:	cmp	x19, x21
  20:	b.eq	34 <_ZN11__sanitizer13ListOfModules5clearEv+0x34>  // b.none
  24:	mov	x0, x19
  28:	add	x19, x19, #0x48
  2c:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
  30:	b	1c <_ZN11__sanitizer13ListOfModules5clearEv+0x1c>
  34:	ldp	x21, x30, [sp, #16]
  38:	str	xzr, [x20, #16]
  3c:	ldp	x19, x20, [sp], #32
  40:	ret

lsan_common_mac.o:     file format elf64-littleaarch64


lsan.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL18LsanOnDeadlySignaliPvS_>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	mov	x20, x2
   c:	str	x30, [sp, #16]
  10:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
  14:	mov	x1, x20
  18:	mov	w2, w0
  1c:	mov	x0, x19
  20:	mov	x4, #0x0                   	// #0
  24:	ldr	x30, [sp, #16]
  28:	adrp	x3, 0 <_ZL18LsanOnDeadlySignaliPvS_>
  2c:	ldp	x19, x20, [sp], #32
  30:	add	x3, x3, #0x0
  34:	b	0 <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>

0000000000000038 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE>:
  38:	stp	x19, x20, [sp, #-48]!
  3c:	mov	x19, x2
  40:	stp	x21, x22, [sp, #16]
  44:	stp	x23, x30, [sp, #32]
  48:	ldr	x23, [x0, #8]
  4c:	ldr	x21, [x0, #24]
  50:	ldr	x22, [x0, #40]
  54:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  58:	ldr	x0, [x0]
  5c:	ldrb	w20, [x0, #33]
  60:	cbnz	w20, 94 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x5c>
  64:	mov	x6, #0x0                   	// #0
  68:	mov	x5, #0x0                   	// #0
  6c:	mov	w7, w20
  70:	mov	x4, x23
  74:	mov	x3, x22
  78:	mov	x2, x21
  7c:	mov	x0, x19
  80:	mov	w1, #0x100                 	// #256
  84:	ldp	x21, x22, [sp, #16]
  88:	ldp	x23, x30, [sp, #32]
  8c:	ldp	x19, x20, [sp], #48
  90:	b	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
  94:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
  98:	cbz	x0, 64 <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x2c>
  9c:	ldp	x6, x5, [x0, #144]
  a0:	b	6c <_ZL13OnStackUnwindRKN11__sanitizer13SignalContextEPKvPNS_18BufferedStackTraceE+0x34>

00000000000000a4 <_ZL15InitializeFlagsv>:
  a4:	stp	x19, x20, [sp, #-288]!
  a8:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  ac:	stp	x21, x22, [sp, #16]
  b0:	add	x19, sp, #0x30
  b4:	adrp	x22, 0 <_ZN6__lsan10lsan_flagsE>
  b8:	ldr	x21, [x20]
  bc:	str	x30, [sp, #32]
  c0:	mov	x0, x21
  c4:	bl	0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
  c8:	mov	x1, x21
  cc:	mov	x0, x19
  d0:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
  d4:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  e0:	str	x0, [sp, #56]
  e4:	mov	w0, #0x1e                  	// #30
  e8:	str	w0, [sp, #84]
  ec:	mov	w0, #0x1                   	// #1
  f0:	strb	w0, [sp, #105]
  f4:	strb	w0, [sp, #169]
  f8:	mov	w0, #0x17                  	// #23
  fc:	mov	x1, x19
 100:	str	w0, [sp, #264]
 104:	mov	x0, x21
 108:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 10c:	ldr	x22, [x22]
 110:	mov	x0, x22
 114:	bl	0 <_ZN6__lsan5Flags11SetDefaultsEv>
 118:	mov	x0, x19
 11c:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
 120:	mov	x1, x22
 124:	mov	x0, x19
 128:	bl	0 <_ZN6__lsan17RegisterLsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>
 12c:	mov	x1, x21
 130:	mov	x0, x19
 134:	bl	0 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 138:	bl	0 <_ZN6__lsan27MaybeCallLsanDefaultOptionsEv>
 13c:	mov	x1, x0
 140:	mov	x0, x19
 144:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 148:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 154:	mov	x1, x0
 158:	mov	x0, x19
 15c:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 160:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 164:	ldr	w1, [x21, #52]
 168:	ldr	x0, [x0]
 16c:	str	w1, [x0]
 170:	ldr	w0, [x0]
 174:	cbz	w0, 17c <_ZL15InitializeFlagsv+0xd8>
 178:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 17c:	ldr	x0, [x20]
 180:	ldrb	w0, [x0, #122]
 184:	cbz	w0, 190 <_ZL15InitializeFlagsv+0xec>
 188:	mov	x0, x19
 18c:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 190:	ldr	x20, [x20]
 194:	ldr	x0, [x20, #40]
 198:	bl	0 <__sanitizer_set_report_path>
 19c:	ldp	x21, x22, [sp, #16]
 1a0:	ldr	x30, [sp, #32]
 1a4:	ldp	x19, x20, [sp], #288
 1a8:	ret

00000000000001ac <_ZN6__lsan14WordIsPoisonedEm>:
 1ac:	mov	w0, #0x0                   	// #0
 1b0:	ret

00000000000001b4 <__lsan_init>:
 1b4:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 1b8:	stp	x19, x20, [sp, #-32]!
 1bc:	ldrb	w2, [x0]
 1c0:	str	x30, [sp, #16]
 1c4:	cbz	w2, 1e8 <__lsan_init+0x34>
 1c8:	adrp	x2, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 1cc:	add	x2, x2, #0x0
 1d0:	mov	x4, #0x0                   	// #0
 1d4:	mov	x3, #0x0                   	// #0
 1d8:	mov	w1, #0x53                  	// #83
 1dc:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 1e0:	add	x0, x0, #0x0
 1e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e8:	add	x1, x0, #0x0
 1ec:	ldrb	w1, [x1, #1]
 1f0:	cbnz	w1, 2d0 <__lsan_init+0x11c>
 1f4:	mov	w19, #0x1                   	// #1
 1f8:	mov	x20, x0
 1fc:	strb	w19, [x0]
 200:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 204:	adrp	x1, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 208:	add	x1, x1, #0x0
 20c:	ldr	x0, [x0]
 210:	str	x1, [x0]
 214:	bl	0 <_ZN11__sanitizer15CacheBinaryNameEv>
 218:	bl	a4 <_ZL15InitializeFlagsv>
 21c:	bl	0 <_ZN6__lsan14InitCommonLsanEv>
 220:	bl	0 <_ZN6__lsan19InitializeAllocatorEv>
 224:	bl	0 <_ZN6__lsan19ReplaceSystemMallocEv>
 228:	bl	0 <_ZN11__sanitizer11InitTlsSizeEv>
 22c:	bl	0 <_ZN6__lsan22InitializeInterceptorsEv>
 230:	bl	0 <_ZN6__lsan24InitializeThreadRegistryEv>
 234:	adrp	x0, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 238:	add	x0, x0, #0x0
 23c:	bl	0 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>
 240:	mov	w2, w19
 244:	mov	x1, #0x0                   	// #0
 248:	mov	w0, #0x0                   	// #0
 24c:	bl	0 <_ZN6__lsan12ThreadCreateEjmb>
 250:	mov	w3, w0
 254:	cbz	w0, 26c <__lsan_init+0xb8>
 258:	adrp	x2, 0 <_ZL18LsanOnDeadlySignaliPvS_>
 25c:	mov	x4, #0x0                   	// #0
 260:	add	x2, x2, #0x0
 264:	mov	w1, #0x63                  	// #99
 268:	b	1dc <__lsan_init+0x28>
 26c:	bl	0 <_ZN11__sanitizer6GetTidEv>
 270:	mov	x1, x0
 274:	mov	w2, #0x0                   	// #0
 278:	mov	w0, #0x0                   	// #0
 27c:	bl	0 <_ZN6__lsan11ThreadStartEjyb>
 280:	mov	w0, #0x0                   	// #0
 284:	bl	0 <_ZN6__lsan16SetCurrentThreadEj>
 288:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 28c:	mov	x19, x0
 290:	ldr	x1, [x0]
 294:	ldrb	w2, [x1, #57]
 298:	cbz	w2, 2b0 <__lsan_init+0xfc>
 29c:	ldrb	w0, [x1, #58]
 2a0:	cbz	w0, 2b0 <__lsan_init+0xfc>
 2a4:	adrp	x0, 0 <_ZN6__lsan11DoLeakCheckEv>
 2a8:	ldr	x0, [x0]
 2ac:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 2b0:	ldr	x0, [x19]
 2b4:	ldr	x1, [x0, #168]
 2b8:	ldrb	w0, [x0, #161]
 2bc:	bl	0 <_ZN11__sanitizer18InitializeCoverageEbPKc>
 2c0:	strb	wzr, [x20]
 2c4:	add	x0, x20, #0x0
 2c8:	mov	w1, #0x1                   	// #1
 2cc:	strb	w1, [x0, #1]
 2d0:	ldr	x30, [sp, #16]
 2d4:	ldp	x19, x20, [sp], #32
 2d8:	ret

00000000000002dc <__sanitizer_print_stack_trace>:
 2dc:	sub	sp, sp, #0x850
 2e0:	stp	x29, x30, [sp]
 2e4:	mov	x29, sp
 2e8:	stp	x19, x20, [sp, #16]
 2ec:	add	x19, x29, #0x38
 2f0:	add	x0, x19, #0x10
 2f4:	str	x21, [sp, #32]
 2f8:	stp	x0, xzr, [x29, #56]
 2fc:	str	xzr, [x29, #2120]
 300:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
 304:	mov	x20, x0
 308:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 30c:	ldr	x0, [x0]
 310:	ldrb	w21, [x0, #33]
 314:	cbnz	w21, 358 <__sanitizer_print_stack_trace+0x7c>
 318:	mov	x6, #0x0                   	// #0
 31c:	mov	x5, #0x0                   	// #0
 320:	mov	w7, w21
 324:	mov	x3, x29
 328:	mov	x2, x20
 32c:	mov	x4, #0x0                   	// #0
 330:	mov	w1, #0x100                 	// #256
 334:	mov	x0, x19
 338:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 33c:	mov	x0, x19
 340:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 344:	ldp	x29, x30, [sp]
 348:	ldp	x19, x20, [sp, #16]
 34c:	ldr	x21, [sp, #32]
 350:	add	sp, sp, #0x850
 354:	ret
 358:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
 35c:	cbz	x0, 318 <__sanitizer_print_stack_trace+0x3c>
 360:	ldp	x6, x5, [x0, #144]
 364:	b	320 <__sanitizer_print_stack_trace+0x44>

lsan_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsan16GetCurrentThreadEv>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
   8:	ldr	x1, [x0]
   c:	add	x0, x0, #0x0
  10:	blr	x1
  14:	mrs	x1, tpidr_el0
  18:	ldr	x30, [sp], #16
  1c:	ldr	w0, [x1, x0]
  20:	ret

0000000000000024 <_ZN6__lsan16SetCurrentThreadEj>:
  24:	mov	w2, w0
  28:	str	x30, [sp, #-16]!
  2c:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
  30:	ldr	x1, [x0]
  34:	add	x0, x0, #0x0
  38:	blr	x1
  3c:	mrs	x1, tpidr_el0
  40:	ldr	x30, [sp], #16
  44:	str	w2, [x1, x0]
  48:	ret

000000000000004c <_ZN6__lsan17GetAllocatorCacheEv>:
  4c:	str	x30, [sp, #-16]!
  50:	adrp	x0, 0 <_ZN6__lsan16GetCurrentThreadEv>
  54:	ldr	x1, [x0]
  58:	add	x0, x0, #0x0
  5c:	blr	x1
  60:	mrs	x1, tpidr_el0
  64:	add	x0, x1, x0
  68:	ldr	x30, [sp], #16
  6c:	ret

0000000000000070 <_ZN6__lsan19ReplaceSystemMallocEv>:
  70:	ret

lsan_mac.o:     file format elf64-littleaarch64


lsan_malloc_mac.o:     file format elf64-littleaarch64


lsan_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
   c:	sub	w2, w0, #0x2
  10:	mov	w1, #0x1                   	// #1
  14:	lsl	w1, w1, w2
  18:	sub	w1, w1, #0x1
  1c:	tst	x1, x19
  20:	lsr	x19, x19, x2
  24:	and	x19, x19, #0x3
  28:	cinc	x19, x19, ne  // ne = any
  2c:	add	x0, x19, x0, lsl #2
  30:	sub	x0, x0, #0x10
  34:	ldp	x19, x30, [sp], #16
  38:	ret

000000000000003c <_ZN6__lsan19InitializeAllocatorEv>:
  3c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  40:	stp	x19, x30, [sp, #-16]!
  44:	adrp	x19, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  48:	ldr	x0, [x0]
  4c:	add	x19, x19, #0x0
  50:	ldrb	w0, [x0, #59]
  54:	bl	0 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>
  58:	mov	x0, x19
  5c:	add	x19, x19, #0x80, lsl #12
  60:	mov	x2, #0x80000               	// #524288
  64:	mov	w1, #0x0                   	// #0
  68:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  6c:	strb	wzr, [x19]
  70:	mov	x2, #0xd80                 	// #3456
  74:	mov	w1, #0x0                   	// #0
  78:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  7c:	add	x0, x0, #0x0
  80:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  84:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  88:	str	x0, [x19, #3520]
  8c:	adrp	x0, 0 <_ZN11__sanitizer22SecondaryAllocatorNameE>
  90:	mov	x3, #0x0                   	// #0
  94:	mov	x1, #0x800000              	// #8388608
  98:	ldr	x0, [x0]
  9c:	ldr	x2, [x0]
  a0:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>
  ac:	cbnz	x0, d0 <_ZN6__lsan19InitializeAllocatorEv+0x94>
  b0:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  b4:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  b8:	add	x2, x2, #0x0
  bc:	add	x0, x0, #0x0
  c0:	mov	x4, #0x0                   	// #0
  c4:	mov	x3, #0x0                   	// #0
  c8:	mov	w1, #0x24                  	// #36
  cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  d0:	str	x0, [x19, #3528]
  d4:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
  d8:	add	x0, x0, #0x0
  dc:	str	x0, [x19, #4144]
  e0:	str	x0, [x19, #4152]
  e4:	ldp	x19, x30, [sp], #16
  e8:	ret

00000000000000ec <_ZN6__lsan22GetAllocatorCacheRangeEPmS0_>:
  ec:	stp	x19, x20, [sp, #-32]!
  f0:	mov	x20, x0
  f4:	mov	x19, x1
  f8:	str	x30, [sp, #16]
  fc:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 100:	ldr	x30, [sp, #16]
 104:	str	x0, [x20]
 108:	mov	x1, #0xd820                	// #55328
 10c:	add	x0, x0, x1
 110:	str	x0, [x19]
 114:	ldp	x19, x20, [sp], #32
 118:	ret

000000000000011c <_ZN6__lsan13LockAllocatorEv>:
 11c:	stp	x19, x20, [sp, #-32]!
 120:	adrp	x19, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 124:	add	x19, x19, #0x0
 128:	add	x19, x19, #0x80, lsl #12
 12c:	mov	x20, #0x0                   	// #0
 130:	add	x19, x19, #0x40
 134:	str	x30, [sp, #16]
 138:	add	x0, x19, x20
 13c:	add	x20, x20, #0x40
 140:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 144:	cmp	x20, #0xd80
 148:	b.ne	138 <_ZN6__lsan13LockAllocatorEv+0x1c>  // b.any
 14c:	ldr	x30, [sp, #16]
 150:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 154:	ldp	x19, x20, [sp], #32
 158:	add	x0, x0, #0x0
 15c:	b	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>

0000000000000160 <_ZN6__lsan15UnlockAllocatorEv>:
 160:	dmb	ish
 164:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x0, #0x81, lsl #12
 170:	strb	wzr, [x1, #40]
 174:	mov	x1, #0x35                  	// #53
 178:	mov	x3, #0x2001                	// #8193
 17c:	dmb	ish
 180:	add	x2, x1, x3
 184:	lsl	x2, x2, #6
 188:	strb	wzr, [x0, x2]
 18c:	sub	x1, x1, #0x1
 190:	cmn	x1, #0x1
 194:	b.ne	17c <_ZN6__lsan15UnlockAllocatorEv+0x1c>  // b.any
 198:	ret

000000000000019c <_ZN6__lsan23GetAllocatorGlobalRangeEPmS0_>:
 19c:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 1a0:	add	x2, x2, #0x0
 1a4:	str	x2, [x0]
 1a8:	add	x2, x2, #0x81, lsl #12
 1ac:	add	x2, x2, #0x80
 1b0:	str	x2, [x1]
 1b4:	ret

00000000000001b8 <_ZN6__lsan12GetUserBeginEm>:
 1b8:	ret

00000000000001bc <_ZNK6__lsan12LsanMetadata9allocatedEv>:
 1bc:	ldr	x0, [x0]
 1c0:	ldrb	w0, [x0]
 1c4:	cmp	w0, #0x0
 1c8:	cset	w0, ne  // ne = any
 1cc:	ret

00000000000001d0 <_ZNK6__lsan12LsanMetadata3tagEv>:
 1d0:	ldr	x0, [x0]
 1d4:	ldrb	w0, [x0, #1]
 1d8:	and	w0, w0, #0x3
 1dc:	ret

00000000000001e0 <_ZN6__lsan12LsanMetadata7set_tagENS_8ChunkTagE>:
 1e0:	ldr	x0, [x0]
 1e4:	ldrb	w2, [x0, #1]
 1e8:	bfxil	w2, w1, #0, #2
 1ec:	strb	w2, [x0, #1]
 1f0:	ret

00000000000001f4 <_ZNK6__lsan12LsanMetadata14requested_sizeEv>:
 1f4:	ldr	x0, [x0]
 1f8:	ldr	x0, [x0]
 1fc:	lsr	x0, x0, #10
 200:	ret

0000000000000204 <_ZNK6__lsan12LsanMetadata14stack_trace_idEv>:
 204:	ldr	x0, [x0]
 208:	ldr	w0, [x0, #8]
 20c:	ret

0000000000000210 <__sanitizer_get_free_bytes>:
 210:	mov	x0, #0x0                   	// #0
 214:	ret

0000000000000218 <__sanitizer_get_unmapped_bytes>:
 218:	mov	x0, #0x0                   	// #0
 21c:	ret

0000000000000220 <__sanitizer_get_estimated_allocated_size>:
 220:	ret

0000000000000224 <__sanitizer_get_current_allocated_bytes>:
 224:	str	x30, [sp, #-32]!
 228:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 22c:	add	x0, x0, #0x0
 230:	add	x1, sp, #0x10
 234:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 238:	ldr	x0, [sp, #16]
 23c:	ldr	x30, [sp], #32
 240:	ret

0000000000000244 <__sanitizer_get_heap_size>:
 244:	str	x30, [sp, #-32]!
 248:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 24c:	add	x0, x0, #0x0
 250:	add	x1, sp, #0x10
 254:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 258:	ldr	x0, [sp, #24]
 25c:	ldr	x30, [sp], #32
 260:	ret

0000000000000264 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE9InitCacheEPNS5_8PerClassE.isra.0.part.0>:
 264:	stp	x19, x20, [sp, #-64]!
 268:	mov	x19, x0
 26c:	mov	x20, #0x1                   	// #1
 270:	mov	x0, #0x200                 	// #512
 274:	add	x19, x19, #0x408
 278:	stp	x21, x22, [sp, #16]
 27c:	mov	x22, #0x3e                  	// #62
 280:	stp	x23, x24, [sp, #32]
 284:	mov	w23, #0x4000                	// #16384
 288:	mov	x24, #0x40                  	// #64
 28c:	stp	x25, x30, [sp, #48]
 290:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 294:	mov	x25, x20
 298:	mov	x21, x0
 29c:	mov	x0, x20
 2a0:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 2a4:	cbz	x0, 300 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE9InitCacheEPNS5_8PerClassE.isra.0.part.0+0x9c>
 2a8:	udiv	w1, w23, w0
 2ac:	cmp	x1, #0x40
 2b0:	csel	x1, x1, x24, ls  // ls = plast
 2b4:	cmp	x1, #0x0
 2b8:	csel	x1, x1, x25, ne  // ne = any
 2bc:	cmp	x1, #0x3e
 2c0:	add	x20, x20, #0x1
 2c4:	csel	x1, x1, x22, ls  // ls = plast
 2c8:	lsl	x2, x1, #1
 2cc:	add	x1, x1, #0x2
 2d0:	stp	x2, x0, [x19]
 2d4:	cmp	x0, x1, lsl #3
 2d8:	csel	x0, x21, xzr, cc  // cc = lo, ul, last
 2dc:	str	x0, [x19, #16]
 2e0:	cmp	x20, #0x36
 2e4:	add	x19, x19, #0x400
 2e8:	b.ne	29c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE9InitCacheEPNS5_8PerClassE.isra.0.part.0+0x38>  // b.any
 2ec:	ldp	x21, x22, [sp, #16]
 2f0:	ldp	x23, x24, [sp, #32]
 2f4:	ldp	x25, x30, [sp, #48]
 2f8:	ldp	x19, x20, [sp], #64
 2fc:	ret
 300:	mov	x1, #0x0                   	// #0
 304:	b	2bc <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE9InitCacheEPNS5_8PerClassE.isra.0.part.0+0x58>

0000000000000308 <__sanitizer_get_ownership>:
 308:	str	x30, [sp, #-16]!
 30c:	mov	x1, x0
 310:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 314:	add	x0, x0, #0x0
 318:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 31c:	cmp	x0, #0x0
 320:	cset	w0, ne  // ne = any
 324:	ldr	x30, [sp], #16
 328:	ret

000000000000032c <_ZN6__lsan19GetMallocUsableSizeEPKv>:
 32c:	str	x30, [sp, #-16]!
 330:	mov	x1, x0
 334:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 338:	add	x0, x0, #0x0
 33c:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 340:	cbz	x0, 354 <_ZN6__lsan19GetMallocUsableSizeEPKv+0x28>
 344:	ldr	x0, [x0]
 348:	lsr	x0, x0, #10
 34c:	ldr	x30, [sp], #16
 350:	ret
 354:	mov	x0, #0x0                   	// #0
 358:	b	34c <_ZN6__lsan19GetMallocUsableSizeEPKv+0x20>

000000000000035c <_ZN6__lsan12lsan_mz_sizeEPKv>:
 35c:	b	32c <_ZN6__lsan19GetMallocUsableSizeEPKv>

0000000000000360 <__sanitizer_get_allocated_size>:
 360:	b	32c <_ZN6__lsan19GetMallocUsableSizeEPKv>

0000000000000364 <_ZN6__lsanL20RegisterDeallocationEPv.part.0>:
 364:	str	x30, [sp, #-16]!
 368:	mov	x1, x0
 36c:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 370:	add	x0, x0, #0x0
 374:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 378:	cbnz	x0, 39c <_ZN6__lsanL20RegisterDeallocationEPv.part.0+0x38>
 37c:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 380:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 384:	add	x2, x2, #0x0
 388:	add	x0, x0, #0x0
 38c:	mov	x4, #0x0                   	// #0
 390:	mov	x3, #0x0                   	// #0
 394:	mov	w1, #0x44                  	// #68
 398:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 39c:	strb	wzr, [x0]
 3a0:	ldr	x30, [sp], #16
 3a4:	ret

00000000000003a8 <_ZN6__lsan12LsanMetadataC1Em>:
 3a8:	stp	x19, x30, [sp, #-16]!
 3ac:	mov	x19, x0
 3b0:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 3b4:	add	x0, x0, #0x0
 3b8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 3bc:	str	x0, [x19]
 3c0:	cbnz	x0, 3e4 <_ZN6__lsan12LsanMetadataC1Em+0x3c>
 3c4:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 3c8:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 3cc:	add	x2, x2, #0x0
 3d0:	add	x0, x0, #0x0
 3d4:	mov	x4, #0x0                   	// #0
 3d8:	mov	x3, #0x0                   	// #0
 3dc:	mov	w1, #0xff                  	// #255
 3e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e4:	ldp	x19, x30, [sp], #16
 3e8:	ret

00000000000003ec <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm.isra.0.part.0>:
 3ec:	stp	x19, x20, [sp, #-32]!
 3f0:	mov	x20, x2
 3f4:	stp	x21, x30, [sp, #16]
 3f8:	mov	x21, x0
 3fc:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 400:	add	x0, x0, #0x0
 404:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 408:	cbnz	x0, 42c <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm.isra.0.part.0+0x40>
 40c:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 410:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 414:	add	x2, x2, #0x0
 418:	add	x0, x0, #0x0
 41c:	mov	x4, #0x0                   	// #0
 420:	mov	x3, #0x0                   	// #0
 424:	mov	w1, #0x3a                  	// #58
 428:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 42c:	mov	x19, x0
 430:	bl	0 <_ZN6__lsan20DisabledInThisThreadEv>
 434:	neg	w0, w0
 438:	ldrb	w1, [x19, #1]
 43c:	bfxil	w1, w0, #0, #2
 440:	strb	w1, [x19, #1]
 444:	ldp	x0, x1, [x21]
 448:	bl	0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>
 44c:	str	w0, [x19, #8]
 450:	ldr	x0, [x19]
 454:	bfi	x0, x20, #10, #54
 458:	str	x0, [x19]
 45c:	mov	w0, #0x1                   	// #1
 460:	strb	w0, [x19]
 464:	ldp	x21, x30, [sp, #16]
 468:	ldp	x19, x20, [sp], #32
 46c:	ret

0000000000000470 <_ZN6__lsan18IgnoreObjectLockedEPKv>:
 470:	stp	x19, x20, [sp, #-48]!
 474:	mov	x1, x0
 478:	mov	x20, x0
 47c:	stp	x21, x22, [sp, #16]
 480:	adrp	x21, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 484:	add	x22, x21, #0x0
 488:	mov	x0, x22
 48c:	str	x30, [sp, #32]
 490:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 494:	tst	w0, #0xff
 498:	mov	x1, x20
 49c:	b.eq	4cc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x5c>  // b.none
 4a0:	mov	x0, x22
 4a4:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4a8:	cmp	x0, #0x0
 4ac:	mov	x19, x0
 4b0:	ccmp	x20, x0, #0x0, ne  // ne = any
 4b4:	b.cs	4dc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x6c>  // b.hs, b.nlast
 4b8:	mov	w0, #0x2                   	// #2
 4bc:	ldp	x21, x22, [sp, #16]
 4c0:	ldr	x30, [sp, #32]
 4c4:	ldp	x19, x20, [sp], #48
 4c8:	ret
 4cc:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4d0:	add	x0, x0, #0x0
 4d4:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4d8:	b	4a8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x38>
 4dc:	mov	x1, x0
 4e0:	add	x0, x21, #0x0
 4e4:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4e8:	cbnz	x0, 50c <_ZN6__lsan18IgnoreObjectLockedEPKv+0x9c>
 4ec:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4f0:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 4f4:	add	x2, x2, #0x0
 4f8:	add	x0, x0, #0x0
 4fc:	mov	x4, #0x0                   	// #0
 500:	mov	x3, #0x0                   	// #0
 504:	mov	w1, #0x11e                 	// #286
 508:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 50c:	ldrb	w1, [x0]
 510:	cbz	w1, 4b8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x48>
 514:	ldr	x1, [x0]
 518:	add	x1, x19, x1, lsr #10
 51c:	cmp	x20, x1
 520:	b.cs	4b8 <_ZN6__lsan18IgnoreObjectLockedEPKv+0x48>  // b.hs, b.nlast
 524:	ldrb	w1, [x0, #1]
 528:	and	w2, w1, #0x3
 52c:	cmp	w2, #0x3
 530:	b.eq	544 <_ZN6__lsan18IgnoreObjectLockedEPKv+0xd4>  // b.none
 534:	orr	w1, w1, #0x3
 538:	strb	w1, [x0, #1]
 53c:	mov	w0, #0x0                   	// #0
 540:	b	4bc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x4c>
 544:	mov	w0, #0x1                   	// #1
 548:	b	4bc <_ZN6__lsan18IgnoreObjectLockedEPKv+0x4c>

000000000000054c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE18EnsureSortedChunksEv.part.0>:
 54c:	stp	x19, x30, [sp, #-16]!
 550:	mov	x19, x0
 554:	mov	w2, #0x0                   	// #0
 558:	ldr	x0, [x0, #8]
 55c:	ldr	x1, [x19, #56]
 560:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 564:	ldr	x2, [x19, #56]
 568:	mov	x0, #0x0                   	// #0
 56c:	cmp	x2, x0
 570:	b.eq	588 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE18EnsureSortedChunksEv.part.0+0x3c>  // b.none
 574:	ldr	x1, [x19, #8]
 578:	ldr	x1, [x1, x0, lsl #3]
 57c:	str	x0, [x1, #24]
 580:	add	x0, x0, #0x1
 584:	b	56c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE18EnsureSortedChunksEv.part.0+0x20>
 588:	mov	w0, #0x1                   	// #1
 58c:	strb	w0, [x19, #64]
 590:	ldp	x19, x30, [sp], #16
 594:	ret

0000000000000598 <_ZN6__lsan15PointsIntoChunkEPv>:
 598:	stp	x19, x20, [sp, #-48]!
 59c:	mov	x1, x0
 5a0:	mov	x19, x0
 5a4:	stp	x21, x22, [sp, #16]
 5a8:	adrp	x21, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5ac:	add	x22, x21, #0x0
 5b0:	mov	x0, x22
 5b4:	str	x30, [sp, #32]
 5b8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5bc:	tst	w0, #0xff
 5c0:	mov	x1, x19
 5c4:	b.eq	610 <_ZN6__lsan15PointsIntoChunkEPv+0x78>  // b.none
 5c8:	mov	x0, x22
 5cc:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5d0:	mov	x1, x0
 5d4:	mov	x20, x0
 5d8:	cbz	x0, 658 <_ZN6__lsan15PointsIntoChunkEPv+0xc0>
 5dc:	cmp	x19, x0
 5e0:	b.cc	658 <_ZN6__lsan15PointsIntoChunkEPv+0xc0>  // b.lo, b.ul, b.last
 5e4:	add	x0, x21, #0x0
 5e8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5ec:	cbnz	x0, 620 <_ZN6__lsan15PointsIntoChunkEPv+0x88>
 5f0:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5f4:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 5f8:	add	x2, x2, #0x0
 5fc:	add	x0, x0, #0x0
 600:	mov	x4, #0x0                   	// #0
 604:	mov	x3, #0x0                   	// #0
 608:	mov	w1, #0xef                  	// #239
 60c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 610:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 614:	add	x0, x0, #0x0
 618:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 61c:	b	5d0 <_ZN6__lsan15PointsIntoChunkEPv+0x38>
 620:	ldrb	w1, [x0]
 624:	cbz	w1, 658 <_ZN6__lsan15PointsIntoChunkEPv+0xc0>
 628:	ldr	x0, [x0]
 62c:	lsr	x1, x0, #10
 630:	add	x0, x20, x0, lsr #10
 634:	cmp	x0, x19
 638:	b.hi	65c <_ZN6__lsan15PointsIntoChunkEPv+0xc4>  // b.pmore
 63c:	cmp	x1, #0x8
 640:	b.ne	658 <_ZN6__lsan15PointsIntoChunkEPv+0xc0>  // b.any
 644:	add	x0, x20, #0x8
 648:	cmp	x19, x0
 64c:	b.ne	658 <_ZN6__lsan15PointsIntoChunkEPv+0xc0>  // b.any
 650:	ldr	x0, [x20]
 654:	cbz	x0, 65c <_ZN6__lsan15PointsIntoChunkEPv+0xc4>
 658:	mov	x20, #0x0                   	// #0
 65c:	mov	x0, x20
 660:	ldp	x21, x22, [sp, #16]
 664:	ldr	x30, [sp, #32]
 668:	ldp	x19, x20, [sp], #48
 66c:	ret

0000000000000670 <_ZN6__lsan12ForEachChunkEPFvmPvES0_>:
 670:	stp	x19, x20, [sp, #-96]!
 674:	adrp	x19, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 678:	mov	x20, #0x0                   	// #0
 67c:	stp	x21, x22, [sp, #16]
 680:	mov	x22, x0
 684:	stp	x23, x24, [sp, #32]
 688:	mov	x23, x1
 68c:	add	x24, x19, #0x0
 690:	stp	x25, x26, [sp, #48]
 694:	mov	x26, #0x100000              	// #1048576
 698:	mov	x25, #0x10000000            	// #268435456
 69c:	stp	x27, x28, [sp, #64]
 6a0:	str	x30, [sp, #80]
 6a4:	mov	x1, x20
 6a8:	mov	x0, x24
 6ac:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 6b0:	tst	w0, #0xff
 6b4:	b.eq	700 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x90>  // b.none
 6b8:	mov	x1, x20
 6bc:	mov	x0, x24
 6c0:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 6c4:	and	x0, x0, #0xff
 6c8:	lsl	x28, x20, #20
 6cc:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 6d0:	add	x21, x0, #0x10
 6d4:	mov	x27, x0
 6d8:	udiv	x21, x26, x21
 6dc:	mul	x21, x21, x0
 6e0:	add	x21, x21, x20, lsl #20
 6e4:	cmp	x21, x28
 6e8:	b.ls	700 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x90>  // b.plast
 6ec:	mov	x0, x28
 6f0:	mov	x1, x23
 6f4:	add	x28, x28, x27
 6f8:	blr	x22
 6fc:	b	6e4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x74>
 700:	add	x20, x20, #0x1
 704:	cmp	x20, x25
 708:	b.ne	6a4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x34>  // b.any
 70c:	add	x0, x19, #0x0
 710:	add	x0, x0, #0x80, lsl #12
 714:	ldrb	w0, [x0, #3584]
 718:	cbnz	w0, 728 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0xb8>
 71c:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 720:	add	x0, x0, #0x0
 724:	bl	54c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE18EnsureSortedChunksEv.part.0>
 728:	add	x19, x19, #0x0
 72c:	adrp	x24, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 730:	add	x19, x19, #0x80, lsl #12
 734:	add	x24, x24, #0x0
 738:	mov	x20, #0x0                   	// #0
 73c:	ldr	x0, [x19, #3576]
 740:	cmp	x0, x20
 744:	b.ls	7bc <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x14c>  // b.plast
 748:	ldr	x0, [x19, #3528]
 74c:	lsl	x21, x20, #3
 750:	ldr	x25, [x0, x21]
 754:	mov	x0, x24
 758:	mov	x1, x25
 75c:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 760:	mov	x1, x23
 764:	blr	x22
 768:	ldr	x0, [x19, #3528]
 76c:	ldr	x3, [x0, x21]
 770:	cmp	x3, x25
 774:	b.eq	794 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x124>  // b.none
 778:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 77c:	mov	x4, x25
 780:	add	x2, x2, #0x0
 784:	mov	w1, #0x115                 	// #277
 788:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 78c:	add	x0, x0, #0x0
 790:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 794:	ldr	x3, [x3, #24]
 798:	cmp	x20, x3
 79c:	b.eq	7b4 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x144>  // b.none
 7a0:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 7a4:	mov	x4, x20
 7a8:	add	x2, x2, #0x0
 7ac:	mov	w1, #0x116                 	// #278
 7b0:	b	788 <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0x118>
 7b4:	add	x20, x20, #0x1
 7b8:	b	73c <_ZN6__lsan12ForEachChunkEPFvmPvES0_+0xcc>
 7bc:	ldp	x21, x22, [sp, #16]
 7c0:	ldp	x23, x24, [sp, #32]
 7c4:	ldp	x25, x26, [sp, #48]
 7c8:	ldp	x27, x28, [sp, #64]
 7cc:	ldr	x30, [sp, #80]
 7d0:	ldp	x19, x20, [sp], #96
 7d4:	ret

00000000000007d8 <_ZN6__lsan21AllocatorThreadFinishEv>:
 7d8:	stp	x19, x20, [sp, #-48]!
 7dc:	mov	x19, #0x1                   	// #1
 7e0:	stp	x21, x22, [sp, #16]
 7e4:	adrp	x22, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 7e8:	add	x22, x22, #0x0
 7ec:	str	x30, [sp, #32]
 7f0:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 7f4:	mov	x21, x0
 7f8:	add	x20, x0, #0x400
 7fc:	ldr	x0, [x20]
 800:	cbz	x0, 81c <_ZN6__lsan21AllocatorThreadFinishEv+0x44>
 804:	mov	x3, x19
 808:	mov	x2, x22
 80c:	mov	x1, x20
 810:	mov	x0, x21
 814:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 818:	b	7fc <_ZN6__lsan21AllocatorThreadFinishEv+0x24>
 81c:	add	x19, x19, #0x1
 820:	add	x20, x20, #0x400
 824:	cmp	x19, #0x36
 828:	b.ne	7fc <_ZN6__lsan21AllocatorThreadFinishEv+0x24>  // b.any
 82c:	ldp	x21, x22, [sp, #16]
 830:	ldr	x30, [sp, #32]
 834:	ldp	x19, x20, [sp], #48
 838:	ret

000000000000083c <_ZN6__lsan10DeallocateEPv>:
 83c:	adrp	x1, 0 <__sanitizer_free_hook>
 840:	stp	x19, x30, [sp, #-16]!
 844:	mov	x19, x0
 848:	ldr	x1, [x1]
 84c:	cbz	x1, 854 <_ZN6__lsan10DeallocateEPv+0x18>
 850:	bl	0 <__sanitizer_free_hook>
 854:	mov	x0, x19
 858:	bl	0 <_ZN11__sanitizer12RunFreeHooksEPKv>
 85c:	cbz	x19, 868 <_ZN6__lsan10DeallocateEPv+0x2c>
 860:	mov	x0, x19
 864:	bl	364 <_ZN6__lsanL20RegisterDeallocationEPv.part.0>
 868:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 86c:	mov	x1, x0
 870:	mov	x2, x19
 874:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 878:	ldp	x19, x30, [sp], #16
 87c:	add	x0, x0, #0x0
 880:	b	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>

0000000000000884 <_ZN6__lsan9lsan_freeEPv>:
 884:	b	83c <_ZN6__lsan10DeallocateEPv>

0000000000000888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>:
 888:	stp	x19, x20, [sp, #-48]!
 88c:	mov	x20, x2
 890:	stp	x21, x22, [sp, #16]
 894:	mov	x21, x0
 898:	stp	x23, x30, [sp, #32]
 89c:	and	w23, w3, #0xff
 8a0:	cbz	x1, 8f8 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x70>
 8a4:	mov	x22, #0x100000000           	// #4294967296
 8a8:	mov	x19, x1
 8ac:	cmp	x1, x22
 8b0:	b.ls	8fc <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x74>  // b.plast
 8b4:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 8b8:	tst	w0, #0xff
 8bc:	b.eq	8e8 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x60>  // b.none
 8c0:	mov	x20, #0x0                   	// #0
 8c4:	mov	x1, x19
 8c8:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 8cc:	add	x0, x0, #0x0
 8d0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8d4:	mov	x0, x20
 8d8:	ldp	x21, x22, [sp, #16]
 8dc:	ldp	x23, x30, [sp, #32]
 8e0:	ldp	x19, x20, [sp], #48
 8e4:	ret
 8e8:	mov	x2, x21
 8ec:	mov	x1, x22
 8f0:	mov	x0, x19
 8f4:	bl	0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>
 8f8:	mov	x19, #0x1                   	// #1
 8fc:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 900:	adrp	x22, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 904:	add	x22, x22, #0x0
 908:	mov	x3, x20
 90c:	mov	x1, x0
 910:	mov	x2, x19
 914:	mov	x0, x22
 918:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 91c:	mov	x20, x0
 920:	cbnz	x0, 940 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xb8>
 924:	bl	0 <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>
 928:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 92c:	tst	w0, #0xff
 930:	b.ne	8d4 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x4c>  // b.any
 934:	mov	x1, x21
 938:	mov	x0, x19
 93c:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
 940:	cbz	w23, 968 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xe0>
 944:	mov	x1, x0
 948:	mov	x0, x22
 94c:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 950:	tst	w0, #0xff
 954:	b.eq	968 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0xe0>  // b.none
 958:	mov	x2, x19
 95c:	mov	x0, x20
 960:	mov	w1, #0x0                   	// #0
 964:	bl	0 <memset>
 968:	mov	x0, x21
 96c:	mov	x2, x19
 970:	mov	x1, x20
 974:	bl	3ec <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm.isra.0.part.0>
 978:	adrp	x0, 0 <__sanitizer_malloc_hook>
 97c:	ldr	x0, [x0]
 980:	cbz	x0, 990 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x108>
 984:	mov	x1, x19
 988:	mov	x0, x20
 98c:	bl	0 <__sanitizer_malloc_hook>
 990:	mov	x1, x19
 994:	mov	x0, x20
 998:	bl	0 <_ZN11__sanitizer14RunMallocHooksEPKvm>
 99c:	b	8d4 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb+0x4c>

00000000000009a0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE>:
 9a0:	stp	x19, x20, [sp, #-48]!
 9a4:	mov	x19, x1
 9a8:	mov	x20, x3
 9ac:	stp	x21, x22, [sp, #16]
 9b0:	str	x30, [sp, #32]
 9b4:	cbz	x1, 9ec <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x4c>
 9b8:	sub	x22, x1, #0x1
 9bc:	mov	x21, x0
 9c0:	orr	x0, x22, #0x7
 9c4:	tst	x0, x1
 9c8:	b.ne	9ec <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x4c>  // b.any
 9cc:	mov	x1, x2
 9d0:	mov	x0, x20
 9d4:	mov	x2, x19
 9d8:	mov	w3, #0x1                   	// #1
 9dc:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 9e0:	cbnz	x0, a0c <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x6c>
 9e4:	mov	w0, #0xc                   	// #12
 9e8:	b	a3c <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x9c>
 9ec:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 9f0:	mov	w1, w0
 9f4:	tst	w1, #0xff
 9f8:	mov	w0, #0x16                  	// #22
 9fc:	b.ne	a3c <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x9c>  // b.any
 a00:	mov	x1, x20
 a04:	mov	x0, x19
 a08:	bl	0 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>
 a0c:	tst	x0, x22
 a10:	b.eq	a34 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE+0x94>  // b.none
 a14:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 a18:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 a1c:	add	x2, x2, #0x0
 a20:	add	x0, x0, #0x0
 a24:	mov	x4, #0x0                   	// #0
 a28:	mov	x3, #0x0                   	// #0
 a2c:	mov	w1, #0x99                  	// #153
 a30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a34:	str	x0, [x21]
 a38:	mov	w0, #0x0                   	// #0
 a3c:	ldp	x21, x22, [sp, #16]
 a40:	ldr	x30, [sp, #32]
 a44:	ldp	x19, x20, [sp], #48
 a48:	ret

0000000000000a4c <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE>:
 a4c:	stp	x19, x20, [sp, #-48]!
 a50:	mov	x19, x0
 a54:	stp	x21, x22, [sp, #16]
 a58:	mov	x21, x1
 a5c:	mov	x22, x2
 a60:	str	x30, [sp, #32]
 a64:	cbz	x0, aa8 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x5c>
 a68:	orr	x0, x0, x1
 a6c:	sub	x2, x19, #0x1
 a70:	tst	x0, x2
 a74:	b.ne	aa8 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x5c>  // b.any
 a78:	mov	x2, x19
 a7c:	mov	x0, x22
 a80:	mov	w3, #0x1                   	// #1
 a84:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 a88:	mov	x20, x0
 a8c:	cbnz	x0, a94 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x48>
 a90:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 a94:	mov	x0, x20
 a98:	ldp	x21, x22, [sp, #16]
 a9c:	ldr	x30, [sp, #32]
 aa0:	ldp	x19, x20, [sp], #48
 aa4:	ret
 aa8:	bl	0 <__errno_location>
 aac:	mov	x20, #0x0                   	// #0
 ab0:	mov	w1, #0x16                  	// #22
 ab4:	str	w1, [x0]
 ab8:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 abc:	tst	w0, #0xff
 ac0:	b.ne	a94 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE+0x48>  // b.any
 ac4:	mov	x2, x22
 ac8:	mov	x1, x19
 acc:	mov	x0, x21
 ad0:	bl	0 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>

0000000000000ad4 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>:
 ad4:	stp	x19, x20, [sp, #-32]!
 ad8:	mov	x19, x0
 adc:	sub	x0, x0, #0x1
 ae0:	stp	x21, x30, [sp, #16]
 ae4:	tst	x0, x19
 ae8:	mov	x21, x2
 aec:	b.eq	b18 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x44>  // b.none
 af0:	bl	0 <__errno_location>
 af4:	mov	x20, #0x0                   	// #0
 af8:	mov	w1, #0x16                  	// #22
 afc:	str	w1, [x0]
 b00:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 b04:	tst	w0, #0xff
 b08:	b.ne	b34 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x60>  // b.any
 b0c:	mov	x1, x21
 b10:	mov	x0, x19
 b14:	bl	0 <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>
 b18:	mov	x2, x19
 b1c:	mov	x0, x21
 b20:	mov	w3, #0x1                   	// #1
 b24:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 b28:	mov	x20, x0
 b2c:	cbnz	x0, b34 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE+0x60>
 b30:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 b34:	mov	x0, x20
 b38:	ldp	x21, x30, [sp, #16]
 b3c:	ldp	x19, x20, [sp], #32
 b40:	ret

0000000000000b44 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>:
 b44:	mov	x4, x0
 b48:	stp	x19, x30, [sp, #-16]!
 b4c:	mov	x0, x1
 b50:	mov	w3, #0x1                   	// #1
 b54:	mov	x1, x4
 b58:	mov	x2, #0x1                   	// #1
 b5c:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 b60:	mov	x19, x0
 b64:	cbnz	x0, b6c <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE+0x28>
 b68:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 b6c:	mov	x0, x19
 b70:	ldp	x19, x30, [sp], #16
 b74:	ret

0000000000000b78 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE>:
 b78:	stp	x19, x20, [sp, #-32]!
 b7c:	mov	x20, x0
 b80:	mov	x19, x1
 b84:	stp	x21, x30, [sp, #16]
 b88:	mov	x21, x2
 b8c:	cbz	x1, bc8 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x50>
 b90:	umulh	x0, x0, x1
 b94:	cbz	x0, bc8 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x50>
 b98:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 b9c:	tst	w0, #0xff
 ba0:	b.eq	bb8 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x40>  // b.none
 ba4:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 ba8:	mov	x0, #0x0                   	// #0
 bac:	ldp	x21, x30, [sp, #16]
 bb0:	ldp	x19, x20, [sp], #32
 bb4:	ret
 bb8:	mov	x2, x21
 bbc:	mov	x1, x19
 bc0:	mov	x0, x20
 bc4:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 bc8:	mul	x1, x20, x19
 bcc:	mov	x0, x21
 bd0:	mov	w3, #0x1                   	// #1
 bd4:	mov	x2, #0x1                   	// #1
 bd8:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 bdc:	cbnz	x0, bac <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x34>
 be0:	b	ba4 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE+0x2c>

0000000000000be4 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE>:
 be4:	stp	x19, x20, [sp, #-32]!
 be8:	mov	x19, x1
 bec:	mov	x20, x0
 bf0:	str	x30, [sp, #16]
 bf4:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 bf8:	mov	x1, x20
 bfc:	mov	x2, x0
 c00:	mov	w3, #0x1                   	// #1
 c04:	mov	x0, x19
 c08:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 c0c:	mov	x19, x0
 c10:	cbnz	x0, c18 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE+0x34>
 c14:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 c18:	mov	x0, x19
 c1c:	ldr	x30, [sp, #16]
 c20:	ldp	x19, x20, [sp], #32
 c24:	ret

0000000000000c28 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE>:
 c28:	stp	x19, x20, [sp, #-32]!
 c2c:	mov	x19, x0
 c30:	stp	x21, x30, [sp, #16]
 c34:	mov	x21, x1
 c38:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 c3c:	mov	x1, x0
 c40:	mov	x20, x0
 c44:	mov	x0, x19
 c48:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 c4c:	cmp	x19, x0
 c50:	b.ls	c7c <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x54>  // b.plast
 c54:	bl	0 <__errno_location>
 c58:	mov	x20, #0x0                   	// #0
 c5c:	mov	w1, #0xc                   	// #12
 c60:	str	w1, [x0]
 c64:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 c68:	tst	w0, #0xff
 c6c:	b.ne	cac <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x84>  // b.any
 c70:	mov	x1, x21
 c74:	mov	x0, x19
 c78:	bl	0 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>
 c7c:	mov	x1, x20
 c80:	cbz	x19, c90 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x68>
 c84:	mov	x0, x19
 c88:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 c8c:	mov	x1, x0
 c90:	mov	x2, x20
 c94:	mov	x0, x21
 c98:	mov	w3, #0x1                   	// #1
 c9c:	bl	888 <_ZN6__lsan8AllocateERKN11__sanitizer10StackTraceEmmb>
 ca0:	mov	x20, x0
 ca4:	cbnz	x0, cac <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE+0x84>
 ca8:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 cac:	mov	x0, x20
 cb0:	ldp	x21, x30, [sp, #16]
 cb4:	ldp	x19, x20, [sp], #32
 cb8:	ret

0000000000000cbc <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm>:
 cbc:	stp	x19, x20, [sp, #-80]!
 cc0:	mov	x19, x1
 cc4:	stp	x21, x22, [sp, #16]
 cc8:	mov	x21, x2
 ccc:	stp	x23, x24, [sp, #32]
 cd0:	mov	x24, x0
 cd4:	stp	x25, x26, [sp, #48]
 cd8:	mov	x26, x3
 cdc:	str	x30, [sp, #64]
 ce0:	cbz	x1, cec <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x30>
 ce4:	mov	x0, x1
 ce8:	bl	364 <_ZN6__lsanL20RegisterDeallocationEPv.part.0>
 cec:	mov	x20, #0x100000000           	// #4294967296
 cf0:	adrp	x22, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 cf4:	cmp	x21, x20
 cf8:	b.ls	d5c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xa0>  // b.plast
 cfc:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 d00:	mov	x1, x0
 d04:	mov	x2, x19
 d08:	add	x0, x22, #0x0
 d0c:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 d10:	bl	0 <_ZN11__sanitizer22AllocatorMayReturnNullEv>
 d14:	tst	w0, #0xff
 d18:	b.eq	d4c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x90>  // b.none
 d1c:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 d20:	mov	x1, x21
 d24:	add	x0, x0, #0x0
 d28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d2c:	mov	x20, #0x0                   	// #0
 d30:	mov	x0, x20
 d34:	ldp	x21, x22, [sp, #16]
 d38:	ldp	x23, x24, [sp, #32]
 d3c:	ldp	x25, x26, [sp, #48]
 d40:	ldr	x30, [sp, #64]
 d44:	ldp	x19, x20, [sp], #80
 d48:	ret
 d4c:	mov	x2, x24
 d50:	mov	x1, x20
 d54:	mov	x0, x21
 d58:	bl	0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>
 d5c:	bl	0 <_ZN6__lsan17GetAllocatorCacheEv>
 d60:	mov	x25, x0
 d64:	cbnz	x19, d98 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xdc>
 d68:	mov	x1, x0
 d6c:	mov	x3, x26
 d70:	mov	x2, x21
 d74:	add	x0, x22, #0x0
 d78:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 d7c:	mov	x20, x0
 d80:	cbz	x20, d30 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x74>
 d84:	mov	x2, x21
 d88:	mov	x1, x20
 d8c:	mov	x0, x24
 d90:	bl	3ec <_ZN6__lsanL18RegisterAllocationERKN11__sanitizer10StackTraceEPvm.isra.0.part.0>
 d94:	b	d30 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x74>
 d98:	cbnz	x21, db0 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xf4>
 d9c:	mov	x1, x0
 da0:	mov	x2, x19
 da4:	add	x0, x22, #0x0
 da8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 dac:	b	d2c <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x70>
 db0:	mov	x1, x19
 db4:	add	x0, x22, #0x0
 db8:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 dbc:	tst	w0, #0xff
 dc0:	b.ne	df8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x13c>  // b.any
 dc4:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 dc8:	mov	x1, x19
 dcc:	add	x0, x0, #0x0
 dd0:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 dd4:	cbnz	x0, df8 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x13c>
 dd8:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 ddc:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 de0:	add	x2, x2, #0x0
 de4:	add	x0, x0, #0x0
 de8:	mov	x4, #0x0                   	// #0
 dec:	mov	x3, #0x0                   	// #0
 df0:	mov	w1, #0x62                  	// #98
 df4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 df8:	add	x20, x22, #0x0
 dfc:	mov	x1, x19
 e00:	mov	x0, x20
 e04:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e08:	mov	x1, x19
 e0c:	tst	w0, #0xff
 e10:	b.eq	e98 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x1dc>  // b.none
 e14:	mov	x0, x20
 e18:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e1c:	tst	w0, #0xff
 e20:	b.ne	e44 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x188>  // b.any
 e24:	adrp	x2, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e28:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e2c:	add	x2, x2, #0x0
 e30:	add	x0, x0, #0x0
 e34:	mov	x4, #0x0                   	// #0
 e38:	mov	x3, #0x0                   	// #0
 e3c:	mov	w1, #0xcc                  	// #204
 e40:	b	df4 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x138>
 e44:	mov	x1, x19
 e48:	mov	x0, x20
 e4c:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e50:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e54:	mov	x23, x0
 e58:	mov	x3, x26
 e5c:	mov	x2, x21
 e60:	mov	x1, x25
 e64:	add	x0, x22, #0x0
 e68:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e6c:	mov	x20, x0
 e70:	cbz	x0, e84 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x1c8>
 e74:	cmp	x21, x23
 e78:	mov	x1, x19
 e7c:	csel	x2, x21, x23, ls  // ls = plast
 e80:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 e84:	mov	x2, x19
 e88:	mov	x1, x25
 e8c:	add	x0, x22, #0x0
 e90:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 e94:	b	d80 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0xc4>
 e98:	add	x20, x20, #0x80, lsl #12
 e9c:	adrp	x0, 0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 ea0:	add	x0, x0, #0x0
 ea4:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 ea8:	ldr	x0, [x0, #16]
 eac:	ldr	x1, [x20, #3520]
 eb0:	bl	0 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 eb4:	b	e54 <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm+0x198>

0000000000000eb8 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE>:
 eb8:	mov	x4, x0
 ebc:	stp	x19, x30, [sp, #-16]!
 ec0:	mov	x0, x2
 ec4:	mov	x3, #0x1                   	// #1
 ec8:	mov	x2, x1
 ecc:	mov	x1, x4
 ed0:	bl	cbc <_ZN6__lsan10ReallocateERKN11__sanitizer10StackTraceEPvmm>
 ed4:	mov	x19, x0
 ed8:	cbnz	x0, ee0 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE+0x28>
 edc:	bl	0 <_ZN11__sanitizer16SetErrnoToENOMEMEv>
 ee0:	mov	x0, x19
 ee4:	ldp	x19, x30, [sp], #16
 ee8:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex4LockEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex4LockEv>:
   0:	mov	x1, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldxrb	w2, [x1]
   c:	stxrb	w4, w3, [x1]
  10:	cbnz	w4, 8 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x8>
  14:	dmb	ish
  18:	tst	w2, #0xff
  1c:	b.eq	24 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x24>  // b.none
  20:	b	0 <_ZN11__sanitizer15StaticSpinMutex4LockEv>
  24:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer26MostSignificantSetBitIndexEm:

0000000000000000 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>:
   0:	cbnz	x0, 28 <_ZN11__sanitizer26MostSignificantSetBitIndexEm+0x28>
   4:	str	x30, [sp, #-16]!
   8:	adrp	x2, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
   c:	adrp	x0, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
  10:	add	x2, x2, #0x0
  14:	add	x0, x0, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x151                 	// #337
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	clz	x0, x0
  2c:	mov	w1, #0x3f                  	// #63
  30:	sub	w0, w1, w0
  34:	sxtw	x0, w0
  38:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer17GenericScopedLockINS_15StaticSpinMutexEED2Ev:

0000000000000000 <_ZN11__sanitizer17GenericScopedLockINS_15StaticSpinMutexEED1Ev>:
   0:	ldr	x0, [x0]
   4:	dmb	ish
   8:	strb	wzr, [x0]
   c:	ret

Disassembly of section .text._ZNK11__sanitizer20AllocatorGlobalStats3GetEPm:

0000000000000000 <_ZNK11__sanitizer20AllocatorGlobalStats3GetEPm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x2, #0x10                  	// #16
   8:	mov	x19, x1
   c:	mov	w1, #0x0                   	// #0
  10:	mov	x20, x0
  14:	mov	x0, x19
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  20:	add	x0, x20, #0x20
  24:	str	x0, [sp, #40]
  28:	bl	0 <_ZNK11__sanitizer20AllocatorGlobalStats3GetEPm>
  2c:	mov	x3, x20
  30:	ldr	x0, [x19]
  34:	ldr	x2, [x3, #16]
  38:	add	x2, x2, x0
  3c:	str	x2, [x19]
  40:	ldr	x0, [x19, #8]
  44:	ldr	x1, [x3, #24]
  48:	ldr	x3, [x3]
  4c:	add	x1, x1, x0
  50:	str	x1, [x19, #8]
  54:	cmp	x20, x3
  58:	b.ne	30 <_ZNK11__sanitizer20AllocatorGlobalStats3GetEPm+0x30>  // b.any
  5c:	cmp	x2, #0x0
  60:	add	x0, sp, #0x28
  64:	csel	x2, x2, xzr, ge  // ge = tcont
  68:	cmp	x1, #0x0
  6c:	csel	x1, x1, xzr, ge  // ge = tcont
  70:	stp	x2, x1, [x19]
  74:	bl	0 <_ZNK11__sanitizer20AllocatorGlobalStats3GetEPm>
  78:	ldr	x30, [sp, #16]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	ldr	x0, [x2, #8]
   c:	stp	x21, x22, [sp, #16]
  10:	str	x30, [sp, #32]
  14:	cbnz	x0, 38 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0+0x38>
  18:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0>
  1c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	x3, #0x0                   	// #0
  30:	mov	w1, #0xad                  	// #173
  34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  38:	mov	x0, #0x2001                	// #8193
  3c:	add	x22, x1, x0
  40:	mov	x20, x2
  44:	lsl	x21, x1, #6
  48:	add	x22, x19, x22, lsl #6
  4c:	str	x22, [sp, #56]
  50:	mov	x0, x22
  54:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0>
  58:	ldr	x0, [x22, #8]
  5c:	cbnz	x0, 90 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0+0x90>
  60:	add	x19, x19, x21
  64:	str	xzr, [x20]
  68:	add	x19, x19, #0x80, lsl #12
  6c:	mov	x0, #0x1                   	// #1
  70:	stp	x20, x20, [x19, #80]
  74:	str	x0, [x19, #72]
  78:	add	x0, sp, #0x38
  7c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0>
  80:	ldp	x21, x22, [sp, #16]
  84:	ldr	x30, [sp, #32]
  88:	ldp	x19, x20, [sp], #64
  8c:	ret
  90:	add	x19, x19, x21
  94:	add	x0, x0, #0x1
  98:	add	x19, x19, #0x80, lsl #12
  9c:	ldr	x1, [x19, #80]
  a0:	str	x1, [x20]
  a4:	str	x20, [x19, #80]
  a8:	b	74 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS3_13TransferBatchE.isra.0+0x74>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13ClassIdToSizeEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13ClassIdToSizeEm>:
   0:	cmp	x0, #0x35
   4:	b.eq	34 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13ClassIdToSizeEm+0x34>  // b.none
   8:	sub	x3, x0, #0x10
   c:	mov	x2, #0x100                 	// #256
  10:	lsl	x4, x0, #4
  14:	cmp	x0, #0x10
  18:	lsr	x1, x3, #2
  1c:	and	x3, x3, #0x3
  20:	lsl	x2, x2, x1
  24:	lsr	x1, x2, #2
  28:	madd	x1, x1, x3, x2
  2c:	csel	x0, x1, x4, hi  // hi = pmore
  30:	ret
  34:	mov	x0, #0x200                 	// #512
  38:	b	30 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13ClassIdToSizeEm+0x30>

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE9GetHeaderEm:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE9GetHeaderEm>:
   0:	ldr	x0, [x0]
   4:	sub	x2, x0, #0x1
   8:	tst	x2, x1
   c:	b.eq	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE9GetHeaderEm+0x34>  // b.none
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE9GetHeaderEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE9GetHeaderEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x0                   	// #0
  28:	mov	x3, #0x0                   	// #0
  2c:	mov	w1, #0x123                 	// #291
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	sub	x0, x1, x0
  38:	ret

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x26, [sp, #48]
  10:	sub	x26, x3, #0x1
  14:	tst	x3, x26
  18:	str	x30, [sp, #64]
  1c:	b.eq	40 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x40>  // b.none
  20:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
  24:	add	x2, x2, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	x3, #0x0                   	// #0
  30:	mov	w1, #0x53                  	// #83
  34:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  40:	mov	x19, x0
  44:	mov	x24, x1
  48:	mov	x23, x3
  4c:	mov	x25, x2
  50:	mov	x0, x2
  54:	ldr	x1, [x19]
  58:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
  5c:	ldr	x1, [x19]
  60:	add	x20, x0, x1
  64:	cmp	x23, x1
  68:	b.ls	70 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x70>  // b.plast
  6c:	add	x20, x20, x23
  70:	cmp	x20, x25
  74:	b.cs	b8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0xb8>  // b.hs, b.nlast
  78:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  7c:	mov	x3, x23
  80:	mov	x2, x20
  84:	mov	x21, #0x0                   	// #0
  88:	ldr	x0, [x0]
  8c:	ldr	x1, [x0]
  90:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
  94:	add	x0, x0, #0x0
  98:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  9c:	mov	x0, x21
  a0:	ldp	x21, x22, [sp, #16]
  a4:	ldp	x23, x24, [sp, #32]
  a8:	ldp	x25, x26, [sp, #48]
  ac:	ldr	x30, [sp, #64]
  b0:	ldp	x19, x20, [sp], #96
  b4:	ret
  b8:	adrp	x0, 0 <_ZN11__sanitizer22SecondaryAllocatorNameE>
  bc:	ldr	x0, [x0]
  c0:	ldr	x1, [x0]
  c4:	mov	x0, x20
  c8:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
  cc:	mov	x21, x0
  d0:	cbz	x0, 9c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x9c>
  d4:	ldr	x22, [x19]
  d8:	sub	x0, x22, #0x1
  dc:	tst	x21, x0
  e0:	b.eq	fc <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0xfc>  // b.none
  e4:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
  e8:	mov	x4, #0x0                   	// #0
  ec:	add	x2, x2, #0x0
  f0:	mov	x3, #0x0                   	// #0
  f4:	mov	w1, #0x62                  	// #98
  f8:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
  fc:	add	x22, x22, x21
 100:	ands	x1, x22, x26
 104:	b.eq	130 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x130>  // b.none
 108:	add	x22, x23, x22
 10c:	sub	x22, x22, x1
 110:	tst	x22, x26
 114:	b.eq	130 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x130>  // b.none
 118:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 11c:	mov	x4, #0x0                   	// #0
 120:	add	x2, x2, #0x0
 124:	mov	x3, #0x0                   	// #0
 128:	mov	w1, #0x68                  	// #104
 12c:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 130:	tst	x22, x0
 134:	b.eq	150 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x150>  // b.none
 138:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 13c:	mov	x4, #0x0                   	// #0
 140:	add	x2, x2, #0x0
 144:	mov	x3, #0x0                   	// #0
 148:	mov	w1, #0x69                  	// #105
 14c:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 150:	add	x3, x22, x25
 154:	cmp	x21, x3
 158:	b.ls	170 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x170>  // b.plast
 15c:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 160:	mov	x4, x21
 164:	add	x2, x2, #0x0
 168:	mov	w1, #0x6a                  	// #106
 16c:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 170:	add	x4, x21, x20
 174:	cmp	x4, x3
 178:	b.cs	18c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x18c>  // b.hs, b.nlast
 17c:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 180:	mov	w1, #0x6b                  	// #107
 184:	add	x2, x2, #0x0
 188:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 18c:	mov	x1, x22
 190:	mov	x0, x19
 194:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 198:	mov	x23, x0
 19c:	mov	x0, x20
 1a0:	stp	x21, x20, [x23]
 1a4:	str	x25, [x23, #16]
 1a8:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 1ac:	mov	x21, x0
 1b0:	cmp	x0, #0x3f
 1b4:	b.ls	1d0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x1d0>  // b.plast
 1b8:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 1bc:	mov	x3, x0
 1c0:	add	x2, x2, #0x0
 1c4:	mov	x4, #0x40                  	// #64
 1c8:	mov	w1, #0x71                  	// #113
 1cc:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 1d0:	add	x0, x19, #0x268
 1d4:	str	x0, [sp, #88]
 1d8:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 1dc:	ldr	x3, [x19, #56]
 1e0:	mov	x0, #0xfffff               	// #1048575
 1e4:	cmp	x3, x0
 1e8:	b.ls	200 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x200>  // b.plast
 1ec:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 1f0:	mov	x4, #0x100000              	// #1048576
 1f4:	add	x2, x2, #0x0
 1f8:	mov	w1, #0x29                  	// #41
 1fc:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 200:	ldr	x0, [x19, #48]
 204:	add	x25, x19, #0x10
 208:	cmp	x3, x0
 20c:	b.ne	230 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x230>  // b.any
 210:	ldr	x1, [x19, #16]
 214:	mov	x0, x25
 218:	mov	x2, #0x20000               	// #131072
 21c:	add	x1, x1, x3, lsl #3
 220:	bl	0 <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>
 224:	ldr	x0, [x19, #48]
 228:	add	x0, x0, #0x4, lsl #12
 22c:	str	x0, [x19, #48]
 230:	ldr	x0, [x19, #56]
 234:	add	x1, x0, #0x1
 238:	str	x1, [x19, #56]
 23c:	ldr	x1, [x19, #8]
 240:	str	x0, [x23, #24]
 244:	str	x23, [x1, x0, lsl #3]
 248:	ldr	x0, [x19, #72]
 24c:	strb	wzr, [x19, #64]
 250:	ldr	x1, [x19, #96]
 254:	add	x0, x0, #0x1
 258:	str	x0, [x19, #72]
 25c:	ldr	x0, [x19, #88]
 260:	add	x0, x20, x0
 264:	str	x0, [x19, #88]
 268:	cmp	x1, x0
 26c:	csel	x0, x1, x0, cs  // cs = hs, nlast
 270:	str	x0, [x19, #96]
 274:	add	x19, x19, x21, lsl #3
 278:	mov	x21, x22
 27c:	ldr	x0, [x19, #104]
 280:	add	x0, x0, #0x1
 284:	str	x0, [x19, #104]
 288:	ldr	x0, [x24, #16]
 28c:	add	x0, x20, x0
 290:	str	x0, [x24, #16]
 294:	ldr	x0, [x24, #24]
 298:	add	x20, x20, x0
 29c:	str	x20, [x24, #24]
 2a0:	add	x0, sp, #0x58
 2a4:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm>
 2a8:	b	9c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE8AllocateEPNS_14AllocatorStatsEmm+0x9c>

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE7GetUserEPNS3_6HeaderE:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE7GetUserEPNS3_6HeaderE>:
   0:	ldr	x0, [x0]
   4:	sub	x2, x0, #0x1
   8:	tst	x1, x2
   c:	b.eq	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE7GetUserEPNS3_6HeaderE+0x34>  // b.none
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE7GetUserEPNS3_6HeaderE>
  18:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE7GetUserEPNS3_6HeaderE>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x0                   	// #0
  28:	mov	x3, #0x0                   	// #0
  2c:	mov	w1, #0x12b                 	// #299
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	add	x0, x1, x0
  38:	ret

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	add	x0, x0, #0x268
  10:	str	x30, [sp, #16]
  14:	str	x0, [sp, #40]
  18:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  1c:	ldr	x2, [x20, #56]
  20:	mov	x0, #0x0                   	// #0
  24:	mov	x3, #0x0                   	// #0
  28:	cmp	x2, x0
  2c:	b.eq	58 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x58>  // b.none
  30:	ldr	x1, [x20, #8]
  34:	ldr	x1, [x1, x0, lsl #3]
  38:	cmp	x19, x1
  3c:	b.cc	50 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x50>  // b.lo, b.ul, b.last
  40:	sub	x4, x19, x3
  44:	sub	x5, x19, x1
  48:	cmp	x5, x4
  4c:	csel	x3, x3, x1, cs  // cs = hs, nlast
  50:	add	x0, x0, #0x1
  54:	b	28 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x28>
  58:	cbz	x3, ec <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0xec>
  5c:	ldr	x4, [x3]
  60:	cmp	x3, x4
  64:	b.cs	80 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x80>  // b.hs, b.nlast
  68:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  6c:	add	x2, x2, #0x0
  70:	mov	w1, #0xc1                  	// #193
  74:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  80:	ldr	x0, [x3, #8]
  84:	add	x4, x4, x0
  88:	cmp	x3, x4
  8c:	b.cc	a0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0xa0>  // b.lo, b.ul, b.last
  90:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  94:	mov	w1, #0xc2                  	// #194
  98:	add	x2, x2, #0x0
  9c:	b	74 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x74>
  a0:	cmp	x3, x19
  a4:	b.ls	bc <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0xbc>  // b.plast
  a8:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  ac:	mov	x4, x19
  b0:	add	x2, x2, #0x0
  b4:	mov	w1, #0xc3                  	// #195
  b8:	b	74 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0x74>
  bc:	cmp	x19, x4
  c0:	b.cs	ec <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0xec>  // b.hs, b.nlast
  c4:	mov	x1, x3
  c8:	mov	x0, x20
  cc:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  d0:	mov	x19, x0
  d4:	add	x0, sp, #0x28
  d8:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv>
  dc:	mov	x0, x19
  e0:	ldr	x30, [sp, #16]
  e4:	ldp	x19, x20, [sp], #48
  e8:	ret
  ec:	mov	x19, #0x0                   	// #0
  f0:	b	d4 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE13GetBlockBeginEPKv+0xd4>

Disassembly of section .text._ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm:

0000000000000000 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>:
   0:	mov	x3, x1
   4:	mov	x1, #0xffff                	// #65535
   8:	cmp	x3, x1
   c:	b.ls	30 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm+0x30>  // b.plast
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x10000               	// #65536
  28:	mov	w1, #0x4f                  	// #79
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x0, [x0, x3, lsl #3]
  34:	dmb	ish
  38:	ret

Disassembly of section .text._ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm:

0000000000000000 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x1
   8:	mov	x1, #0xfffffff             	// #268435455
   c:	cmp	x19, x1
  10:	b.ls	34 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm+0x34>  // b.plast
  14:	adrp	x2, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm>
  1c:	mov	x3, x19
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x10000000            	// #268435456
  2c:	mov	w1, #0x47                  	// #71
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	lsr	x1, x19, #12
  38:	bl	0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm>
  3c:	cbz	x0, 50 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm+0x50>
  40:	and	x19, x19, #0xfff
  44:	ldrb	w0, [x0, x19]
  48:	ldp	x19, x30, [sp], #16
  4c:	ret
  50:	mov	w0, #0x0                   	// #0
  54:	b	48 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEEixEm+0x48>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x2, #0xfffffff             	// #268435455
   8:	lsr	x3, x1, #20
   c:	cmp	x2, x1, lsr #20
  10:	b.cs	30 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv+0x30>  // b.hs, b.nlast
  14:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv>
  18:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x10000000            	// #268435456
  28:	mov	w1, #0x116                 	// #278
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	mov	x1, x3
  34:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE12GetSizeClassEPKv>
  38:	and	x0, x0, #0xff
  3c:	ldr	x30, [sp], #16
  40:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13PointerIsMineEPKv:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13PointerIsMineEPKv>:
   0:	mov	x2, #0xffffffffffff        	// #281474976710655
   4:	cmp	x1, x2
   8:	b.hi	24 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13PointerIsMineEPKv+0x24>  // b.pmore
   c:	str	x30, [sp, #-16]!
  10:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13PointerIsMineEPKv>
  14:	cmp	x0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	ldr	x30, [sp], #16
  20:	ret
  24:	mov	w0, #0x0                   	// #0
  28:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	stp	x21, x30, [sp, #16]
  10:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  14:	tst	w0, #0xff
  18:	b.eq	84 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0x84>  // b.none
  1c:	mov	x1, x19
  20:	mov	x0, x20
  24:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  28:	tst	w0, #0xff
  2c:	b.ne	50 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0x50>  // b.any
  30:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  34:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  38:	add	x2, x2, #0x0
  3c:	add	x0, x0, #0x0
  40:	mov	x4, #0x0                   	// #0
  44:	mov	x3, #0x0                   	// #0
  48:	mov	w1, #0x91                  	// #145
  4c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  50:	and	x21, x19, #0xfffffffffff00000
  54:	mov	x1, x19
  58:	sub	w19, w19, w21
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  64:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  68:	udiv	w0, w19, w0
  6c:	add	x1, x21, #0x100, lsl #12
  70:	add	x0, x0, #0x1
  74:	sub	x0, x1, x0, lsl #4
  78:	ldp	x21, x30, [sp, #16]
  7c:	ldp	x19, x20, [sp], #32
  80:	ret
  84:	add	x21, x20, #0x80, lsl #12
  88:	add	x20, x20, #0x80, lsl #12
  8c:	add	x20, x20, #0xc00
  90:	add	x21, x21, #0xdc0
  94:	ldr	x0, [x20, #448]
  98:	sub	x0, x0, #0x1
  9c:	tst	x19, x0
  a0:	b.eq	f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0xf0>  // b.none
  a4:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  a8:	mov	x2, x19
  ac:	ldr	x0, [x0]
  b0:	ldr	x1, [x0]
  b4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	ldr	x0, [x20, #448]
  c4:	sub	x0, x0, #0x1
  c8:	tst	x19, x0
  cc:	b.eq	f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0xf0>  // b.none
  d0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  d4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  d8:	add	x2, x2, #0x0
  dc:	add	x0, x0, #0x0
  e0:	mov	x4, #0x0                   	// #0
  e4:	mov	x3, #0x0                   	// #0
  e8:	mov	w1, #0xae                  	// #174
  ec:	b	4c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0x4c>
  f0:	mov	x1, x19
  f4:	mov	x0, x21
  f8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv>
  fc:	add	x0, x0, #0x20
 100:	b	78 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE11GetMetaDataEPKv+0x78>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	stp	x21, x30, [sp, #16]
  10:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>
  14:	tst	w0, #0xff
  18:	b.ne	3c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv+0x3c>  // b.any
  1c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>
  20:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>
  24:	add	x2, x2, #0x0
  28:	add	x0, x0, #0x0
  2c:	mov	x4, #0x0                   	// #0
  30:	mov	x3, #0x0                   	// #0
  34:	mov	w1, #0xc1                  	// #193
  38:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  3c:	and	x21, x19, #0xfffffffffff00000
  40:	mov	x1, x19
  44:	sub	w19, w19, w21
  48:	mov	x0, x20
  4c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>
  50:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13GetBlockBeginEPKv>
  54:	udiv	w19, w19, w0
  58:	mul	w0, w19, w0
  5c:	add	x0, x0, x21
  60:	ldp	x21, x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #32
  68:	ret

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	d4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xd4>  // b.plast
   8:	mov	x2, #0x1                   	// #1
   c:	mov	x3, x2
  10:	mov	x4, x3
  14:	sub	x3, x3, #0x1
  18:	lsr	x3, x3, #1
  1c:	lsl	x4, x4, #3
  20:	lsl	x5, x3, #3
  24:	ldr	x6, [x0, x4]
  28:	ldr	x7, [x0, x5]
  2c:	cmp	x7, x6
  30:	b.cs	40 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x40>  // b.hs, b.nlast
  34:	str	x7, [x0, x4]
  38:	str	x6, [x0, x5]
  3c:	cbnz	x3, 10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  40:	add	x3, x2, #0x1
  44:	cmp	x1, x3
  48:	b.ne	d8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xd8>  // b.any
  4c:	ldr	x1, [x0]
  50:	ldr	x3, [x0, x2, lsl #3]
  54:	str	x3, [x0]
  58:	str	x1, [x0, x2, lsl #3]
  5c:	mov	x1, #0x0                   	// #0
  60:	lsl	x4, x1, #1
  64:	add	x5, x1, #0x1
  68:	add	x3, x4, #0x1
  6c:	add	x4, x4, #0x2
  70:	cmp	x3, x2
  74:	b.cs	e8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  78:	ldr	x7, [x0, x1, lsl #3]
  7c:	ldr	x6, [x0, x3, lsl #3]
  80:	cmp	x7, x6
  84:	b.cs	e8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  88:	cmp	x4, x2
  8c:	b.cs	a4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa4>  // b.hs, b.nlast
  90:	lsl	x5, x5, #4
  94:	ldr	x6, [x0, x3, lsl #3]
  98:	ldr	x5, [x0, x5]
  9c:	cmp	x6, x5
  a0:	csel	x3, x3, x4, cs  // cs = hs, nlast
  a4:	cmp	x3, x1
  a8:	b.eq	cc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xcc>  // b.none
  ac:	lsl	x4, x3, #3
  b0:	lsl	x1, x1, #3
  b4:	cmp	x3, x2
  b8:	ldr	x6, [x0, x4]
  bc:	ldr	x5, [x0, x1]
  c0:	str	x6, [x0, x1]
  c4:	str	x5, [x0, x4]
  c8:	b.cc	e0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe0>  // b.lo, b.ul, b.last
  cc:	subs	x2, x2, #0x1
  d0:	b.ne	4c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x4c>  // b.any
  d4:	ret
  d8:	mov	x2, x3
  dc:	b	c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xc>
  e0:	mov	x1, x3
  e4:	b	60 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x60>
  e8:	cmp	x4, x2
  ec:	b.cs	cc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xcc>  // b.hs, b.nlast
  f0:	mov	x3, x1
  f4:	b	90 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x90>

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	ldrb	w3, [x0, #616]
   c:	and	x3, x3, #0xff
  10:	cmp	x3, #0x1
  14:	b.eq	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x34>  // b.none
  18:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
  1c:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x1                   	// #1
  2c:	mov	w1, #0x2a                  	// #42
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	ldr	x19, [x0, #56]
  38:	mov	x21, x0
  3c:	cbz	x19, 110 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x110>
  40:	mov	x20, x1
  44:	ldrb	w1, [x0, #64]
  48:	cbnz	w1, 50 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x50>
  4c:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
  50:	ldr	x0, [x21, #8]
  54:	add	x1, x0, x19, lsl #3
  58:	ldur	x1, [x1, #-8]
  5c:	ldr	x2, [x1, #8]
  60:	add	x1, x1, x2
  64:	ldr	x2, [x0]
  68:	cmp	x20, x1
  6c:	ccmp	x20, x2, #0x0, cc  // cc = lo, ul, last
  70:	b.cc	110 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x110>  // b.lo, b.ul, b.last
  74:	sub	x4, x19, #0x1
  78:	mov	x1, #0x0                   	// #0
  7c:	sub	x2, x4, x1
  80:	cmp	x2, #0x1
  84:	b.ls	ac <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0xac>  // b.plast
  88:	add	x2, x4, x1
  8c:	lsr	x2, x2, #1
  90:	ldr	x3, [x0, x2, lsl #3]
  94:	cmp	x3, x20
  98:	b.ls	a4 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0xa4>  // b.plast
  9c:	sub	x4, x2, #0x1
  a0:	b	7c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x7c>
  a4:	mov	x1, x2
  a8:	b	7c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x7c>
  ac:	cmp	x4, x1
  b0:	b.ls	e4 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0xe4>  // b.plast
  b4:	add	x3, x1, #0x1
  b8:	cmp	x4, x3
  bc:	b.eq	d8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0xd8>  // b.none
  c0:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
  c4:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
  c8:	add	x2, x2, #0x0
  cc:	add	x0, x0, #0x0
  d0:	mov	w1, #0xea                  	// #234
  d4:	b	30 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x30>
  d8:	ldr	x2, [x0, x4, lsl #3]
  dc:	cmp	x2, x20
  e0:	csel	x1, x1, x4, hi  // hi = pmore
  e4:	ldr	x1, [x0, x1, lsl #3]
  e8:	ldp	x2, x0, [x1]
  ec:	add	x0, x2, x0
  f0:	cmp	x0, x20
  f4:	b.ls	110 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x110>  // b.plast
  f8:	cmp	x2, x20
  fc:	b.hi	110 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv+0x110>  // b.pmore
 100:	mov	x0, x21
 104:	ldp	x21, x30, [sp, #16]
 108:	ldp	x19, x20, [sp], #32
 10c:	b	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEE23GetBlockBeginFastLockedEPv>
 110:	mov	x0, #0x0                   	// #0
 114:	ldp	x21, x30, [sp, #16]
 118:	ldp	x19, x20, [sp], #32
 11c:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x19, x1
   8:	mov	x1, #0x100000              	// #1048576
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x0
  14:	adrp	x0, 0 <_ZN11__sanitizer20PrimaryAllocatorNameE>
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x23, x2
  20:	ldr	x0, [x0]
  24:	ldr	x2, [x0]
  28:	mov	x0, x1
  2c:	str	x30, [sp, #48]
  30:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  34:	mov	x20, x0
  38:	cbz	x0, 128 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x128>
  3c:	tst	x0, #0xfffff
  40:	ldr	x0, [x19, #24]
  44:	add	x0, x0, #0x100, lsl #12
  48:	str	x0, [x19, #24]
  4c:	b.eq	70 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x70>  // b.none
  50:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  54:	add	x2, x2, #0x0
  58:	mov	x4, #0x0                   	// #0
  5c:	mov	x3, #0x0                   	// #0
  60:	mov	w1, #0x126                 	// #294
  64:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  70:	mov	x0, #0xfffffff             	// #268435455
  74:	lsr	x22, x20, #20
  78:	cmp	x0, x20, lsr #20
  7c:	b.cs	98 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x98>  // b.hs, b.nlast
  80:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  84:	mov	x3, x22
  88:	add	x2, x2, #0x0
  8c:	mov	x4, #0x10000000            	// #268435456
  90:	mov	w1, #0x116                 	// #278
  94:	b	64 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x64>
  98:	lsr	x24, x20, #32
  9c:	mov	x0, x21
  a0:	mov	x1, x24
  a4:	and	w23, w23, #0xff
  a8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  ac:	mov	x19, x0
  b0:	cbnz	x0, fc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0xfc>
  b4:	add	x0, x21, #0x80, lsl #12
  b8:	str	x0, [sp, #72]
  bc:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  c0:	mov	x1, x24
  c4:	mov	x0, x21
  c8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  cc:	mov	x19, x0
  d0:	cbnz	x0, f4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0xf4>
  d4:	mov	w2, #0x0                   	// #0
  d8:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  dc:	mov	x0, #0x1000                	// #4096
  e0:	add	x1, x1, #0x0
  e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  e8:	dmb	ish
  ec:	mov	x19, x0
  f0:	str	x0, [x21, x24, lsl #3]
  f4:	add	x0, sp, #0x48
  f8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  fc:	and	x22, x22, #0xfff
 100:	ldrb	w4, [x19, x22]
 104:	cbz	x4, 124 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x124>
 108:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
 10c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
 110:	add	x2, x2, #0x0
 114:	add	x0, x0, #0x0
 118:	mov	x3, #0x0                   	// #0
 11c:	mov	w1, #0x42                  	// #66
 120:	b	6c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x6c>
 124:	strb	w23, [x19, x22]
 128:	mov	x0, x20
 12c:	ldp	x21, x22, [sp, #16]
 130:	ldp	x23, x24, [sp, #32]
 134:	ldr	x30, [sp, #48]
 138:	ldp	x19, x20, [sp], #80
 13c:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	mov	x20, x2
   8:	mov	x19, #0x0                   	// #0
   c:	stp	x23, x24, [sp, #32]
  10:	mov	x24, x0
  14:	mov	x23, x6
  18:	ldr	x0, [x4]
  1c:	stp	x21, x22, [sp, #16]
  20:	mov	x22, x1
  24:	mov	x21, x4
  28:	stp	x25, x26, [sp, #48]
  2c:	mov	x25, x5
  30:	mov	x26, x7
  34:	stp	x27, x28, [sp, #64]
  38:	add	x27, x1, x3, lsl #10
  3c:	mov	x28, #0x1                   	// #1
  40:	str	x30, [sp, #80]
  44:	cmp	x19, x26
  48:	b.eq	d0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xd0>  // b.none
  4c:	cbnz	x0, 64 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0x64>
  50:	ldr	x2, [x27, #24]
  54:	cbnz	x2, a8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xa8>
  58:	ldr	x0, [x23, x19, lsl #3]
  5c:	cbz	x0, f4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xf4>
  60:	str	xzr, [x0, #8]
  64:	ldr	x1, [x0, #8]
  68:	ldr	x3, [x23, x19, lsl #3]
  6c:	add	x2, x1, #0x1
  70:	add	x1, x1, #0x2
  74:	str	x2, [x0, #8]
  78:	cmp	x25, x2
  7c:	str	x3, [x0, x1, lsl #3]
  80:	b.ne	a0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xa0>  // b.any
  84:	mov	x8, x20
  88:	ldr	x1, [x8, #8]!
  8c:	str	xzr, [x0]
  90:	cbnz	x1, b8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xb8>
  94:	stp	x0, x0, [x8, #8]
  98:	str	x28, [x20, #8]
  9c:	mov	x0, #0x0                   	// #0
  a0:	add	x19, x19, #0x1
  a4:	b	44 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0x44>
  a8:	mov	x1, x24
  ac:	mov	x0, x22
  b0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm>
  b4:	b	5c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0x5c>
  b8:	ldr	x2, [x8, #16]
  bc:	add	x1, x1, #0x1
  c0:	str	x0, [x2]
  c4:	str	x0, [x8, #16]
  c8:	str	x1, [x20, #8]
  cc:	b	9c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0x9c>
  d0:	str	x0, [x21]
  d4:	mov	w0, #0x1                   	// #1
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x23, x24, [sp, #32]
  e0:	ldp	x25, x26, [sp, #48]
  e4:	ldp	x27, x28, [sp, #64]
  e8:	ldr	x30, [sp, #80]
  ec:	ldp	x19, x20, [sp], #96
  f0:	ret
  f4:	mov	w0, #0x0                   	// #0
  f8:	b	d8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEmPPNS3_13TransferBatchEmPmm+0xd8>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>:
   0:	stp	x19, x20, [sp, #-496]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x3
   c:	stp	x23, x24, [sp, #32]
  10:	mov	x24, x0
  14:	mov	x23, x4
  18:	stp	x25, x26, [sp, #48]
  1c:	mov	x25, x2
  20:	mov	x2, x4
  24:	stp	x27, x28, [sp, #64]
  28:	str	x30, [sp, #80]
  2c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
  30:	cbnz	x0, 54 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x54>
  34:	mov	w0, #0x0                   	// #0
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldp	x23, x24, [sp, #32]
  40:	ldp	x25, x26, [sp, #48]
  44:	ldp	x27, x28, [sp, #64]
  48:	ldr	x30, [sp, #80]
  4c:	ldp	x19, x20, [sp], #496
  50:	ret
  54:	mov	x20, x0
  58:	mov	x0, x23
  5c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
  60:	mov	x22, x0
  64:	add	x0, x0, #0x10
  68:	mov	x26, #0x100000              	// #1048576
  6c:	udiv	x26, x26, x0
  70:	cbz	x22, 100 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x100>
  74:	mov	w5, #0x4000                	// #16384
  78:	mov	x0, #0x40                  	// #64
  7c:	udiv	w5, w5, w22
  80:	cmp	x5, #0x40
  84:	csel	x5, x5, x0, ls  // ls = plast
  88:	cmp	x5, #0x0
  8c:	csinc	x5, x5, xzr, ne  // ne = any
  90:	cmp	x5, #0x3e
  94:	madd	x26, x22, x26, x20
  98:	mov	x19, #0x3e                  	// #62
  9c:	add	x27, sp, #0x70
  a0:	csel	x19, x5, x19, ls  // ls = plast
  a4:	add	x28, sp, #0x68
  a8:	mov	x0, #0x0                   	// #0
  ac:	str	xzr, [sp, #104]
  b0:	cmp	x20, x26
  b4:	b.cs	108 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x108>  // b.hs, b.nlast
  b8:	str	x20, [x27, x0, lsl #3]
  bc:	add	x7, x0, #0x1
  c0:	cmp	x0, #0x2f
  c4:	b.ne	f4 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0xf4>  // b.any
  c8:	mov	x6, x27
  cc:	mov	x5, x19
  d0:	mov	x4, x28
  d4:	mov	x3, x23
  d8:	mov	x2, x21
  dc:	mov	x1, x25
  e0:	mov	x0, x24
  e4:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
  e8:	tst	w0, #0xff
  ec:	b.eq	34 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x34>  // b.none
  f0:	mov	x7, #0x0                   	// #0
  f4:	add	x20, x20, x22
  f8:	mov	x0, x7
  fc:	b	b0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0xb0>
 100:	mov	x5, #0x0                   	// #0
 104:	b	90 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x90>
 108:	cbnz	x0, 11c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x11c>
 10c:	ldr	x0, [sp, #104]
 110:	cbnz	x0, 14c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x14c>
 114:	mov	w0, #0x1                   	// #1
 118:	b	38 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x38>
 11c:	mov	x7, x0
 120:	add	x6, sp, #0x70
 124:	mov	x5, x19
 128:	add	x4, sp, #0x68
 12c:	mov	x3, x23
 130:	mov	x2, x21
 134:	mov	x1, x25
 138:	mov	x0, x24
 13c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 140:	tst	w0, #0xff
 144:	b.ne	10c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x10c>  // b.any
 148:	b	34 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x34>
 14c:	ldr	x1, [x0, #8]
 150:	cbnz	x1, 174 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x174>
 154:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 158:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm>
 15c:	add	x2, x2, #0x0
 160:	add	x0, x0, #0x0
 164:	mov	x4, #0x0                   	// #0
 168:	mov	x3, #0x0                   	// #0
 16c:	mov	w1, #0x169                 	// #361
 170:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 174:	mov	x1, x21
 178:	ldr	x2, [x1, #8]!
 17c:	str	xzr, [x0]
 180:	cbnz	x2, 194 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x194>
 184:	stp	x0, x0, [x1, #8]
 188:	mov	x0, #0x1                   	// #1
 18c:	str	x0, [x21, #8]
 190:	b	38 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x38>
 194:	ldr	x3, [x1, #16]
 198:	add	x2, x2, #0x1
 19c:	str	x0, [x3]
 1a0:	str	x0, [x1, #16]
 1a4:	str	x2, [x21, #8]
 1a8:	b	114 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEPNS3_13SizeClassInfoEm+0x114>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x20, x0
   8:	mov	x19, x3
   c:	stp	x21, x22, [sp, #16]
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x23, x1
  18:	mov	x1, #0x2001                	// #8193
  1c:	add	x21, x3, x1
  20:	mov	x24, x2
  24:	stp	x25, x30, [sp, #48]
  28:	lsl	x22, x21, #6
  2c:	add	x22, x22, #0x8
  30:	add	x21, x0, x21, lsl #6
  34:	mov	x0, x21
  38:	str	x21, [sp, #72]
  3c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  40:	add	x25, x20, x22
  44:	ldr	x0, [x20, x22]
  48:	cbz	x0, 78 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x78>
  4c:	ldr	x0, [x20, x22]
  50:	ldr	x21, [x25, #8]
  54:	cbnz	x0, bc <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xbc>
  58:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  5c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  60:	add	x2, x2, #0x0
  64:	add	x0, x0, #0x0
  68:	mov	x4, #0x0                   	// #0
  6c:	mov	x3, #0x0                   	// #0
  70:	mov	w1, #0x40                  	// #64
  74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  78:	mov	x4, x19
  7c:	mov	x3, x21
  80:	mov	x2, x24
  84:	mov	x1, x23
  88:	mov	x0, x20
  8c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  90:	tst	w0, #0xff
  94:	b.ne	4c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x4c>  // b.any
  98:	mov	x21, #0x0                   	// #0
  9c:	add	x0, sp, #0x48
  a0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm>
  a4:	mov	x0, x21
  a8:	ldp	x21, x22, [sp, #16]
  ac:	ldp	x23, x24, [sp, #32]
  b0:	ldp	x25, x30, [sp, #48]
  b4:	ldp	x19, x20, [sp], #80
  b8:	ret
  bc:	add	x4, x20, x19, lsl #6
  c0:	add	x4, x4, #0x80, lsl #12
  c4:	ldr	x1, [x4, #80]
  c8:	ldr	x1, [x1]
  cc:	str	x1, [x4, #80]
  d0:	cbnz	x1, d8 <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0xd8>
  d4:	str	xzr, [x4, #88]
  d8:	sub	x0, x0, #0x1
  dc:	str	x0, [x4, #72]
  e0:	b	9c <_ZN11__sanitizer20SizeClassAllocator32IN6__lsan4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS3_EEm+0x9c>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x0
   8:	mov	x20, x3
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x1
  14:	mov	x22, x2
  18:	ldr	x1, [x1, #8]
  1c:	str	x30, [sp, #32]
  20:	cbnz	x1, 28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x28>
  24:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  28:	mov	x3, x20
  2c:	mov	x0, #0xd800                	// #55296
  30:	mov	x2, x19
  34:	add	x1, x19, x0
  38:	mov	x0, x22
  3c:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  40:	mov	x3, x0
  44:	cbz	x0, b4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0xb4>
  48:	ldr	x1, [x3, #8]
  4c:	mov	x0, #0x0                   	// #0
  50:	cbz	x1, 94 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x94>
  54:	add	x5, x3, #0x10
  58:	add	x2, x21, #0x20
  5c:	ldr	x4, [x5, x0, lsl #3]
  60:	str	x4, [x2, x0, lsl #3]
  64:	add	x0, x0, #0x1
  68:	cmp	x1, x0
  6c:	b.ne	5c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x5c>  // b.any
  70:	add	x20, x19, x20, lsl #10
  74:	ldr	x2, [x20, #24]
  78:	str	x1, [x21]
  7c:	cbz	x2, 8c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0x8c>
  80:	mov	x1, x22
  84:	mov	x0, x19
  88:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  8c:	mov	w0, #0x1                   	// #1
  90:	b	b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m+0xb8>
  94:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  98:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE6RefillEPNS5_8PerClassEPS4_m>
  9c:	add	x2, x2, #0x0
  a0:	add	x0, x0, #0x0
  a4:	mov	x4, #0x0                   	// #0
  a8:	mov	x3, #0x0                   	// #0
  ac:	mov	w1, #0xf6                  	// #246
  b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  b4:	mov	w0, #0x0                   	// #0
  b8:	ldp	x21, x22, [sp, #16]
  bc:	ldr	x30, [sp, #32]
  c0:	ldp	x19, x20, [sp], #48
  c4:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x2, 2c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x9f                  	// #159
  20:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	mov	x19, x2
  30:	cmp	x2, #0x35
  34:	b.ls	50 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0x50>  // b.plast
  38:	mov	x3, x2
  3c:	mov	x4, #0x36                  	// #54
  40:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m>
  44:	mov	w1, #0xa0                  	// #160
  48:	add	x2, x2, #0x0
  4c:	b	20 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0x20>
  50:	lsl	x21, x2, #10
  54:	mov	x4, x1
  58:	add	x1, x0, x2, lsl #10
  5c:	mov	x20, x0
  60:	ldr	x2, [x0, x21]
  64:	cbz	x2, b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0xb8>
  68:	ldr	x3, [x20, x21]
  6c:	sub	x0, x3, #0x1
  70:	str	x0, [x20, x21]
  74:	add	x0, x0, x19, lsl #7
  78:	add	x19, x3, x19, lsl #7
  7c:	add	x19, x19, #0x2
  80:	add	x0, x0, #0x4
  84:	ldr	x1, [x20, x19, lsl #3]
  88:	ldr	x0, [x20, x0, lsl #3]
  8c:	prfm	pldl1keep, [x1]
  90:	mov	x1, #0xd800                	// #55296
  94:	add	x2, x20, x1
  98:	add	x20, x20, x21
  9c:	ldr	x1, [x2, #16]
  a0:	ldr	x3, [x20, #16]
  a4:	add	x1, x1, x3
  a8:	str	x1, [x2, #16]
  ac:	ldp	x21, x30, [sp, #16]
  b0:	ldp	x19, x20, [sp], #32
  b4:	ret
  b8:	mov	x3, x19
  bc:	mov	x2, x4
  c0:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m>
  c4:	tst	w0, #0xff
  c8:	b.ne	68 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0x68>  // b.any
  cc:	mov	x0, #0x0                   	// #0
  d0:	b	ac <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE8AllocateEPS4_m+0xac>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	ldp	x4, x20, [x1]
   8:	stp	x21, x22, [sp, #16]
   c:	mov	x21, x1
  10:	add	x1, x0, x3, lsl #10
  14:	mov	x22, x2
  18:	stp	x23, x30, [sp, #32]
  1c:	mov	x23, x3
  20:	lsr	x20, x20, #1
  24:	ldr	x2, [x1, #24]
  28:	cmp	x20, x4
  2c:	csel	x20, x20, x4, ls  // ls = plast
  30:	sub	x4, x4, x20
  34:	add	x19, x4, #0x4
  38:	cbnz	x2, 60 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x60>
  3c:	ldr	x2, [x21, x19, lsl #3]
  40:	cbnz	x2, 70 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x70>
  44:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  48:	ldr	x0, [x0]
  4c:	ldr	x1, [x0]
  50:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  5c:	bl	0 <_ZN11__sanitizer3DieEv>
  60:	mov	x1, x22
  64:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>
  68:	mov	x2, x0
  6c:	b	40 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x40>
  70:	add	x19, x21, x19, lsl #3
  74:	add	x1, x2, #0x10
  78:	mov	x0, #0x0                   	// #0
  7c:	str	x20, [x2, #8]
  80:	cmp	x20, x0
  84:	b.eq	98 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x98>  // b.none
  88:	ldr	x3, [x19, x0, lsl #3]
  8c:	str	x3, [x1, x0, lsl #3]
  90:	add	x0, x0, #0x1
  94:	b	80 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m+0x80>
  98:	ldr	x0, [x21]
  9c:	mov	x1, x23
  a0:	ldp	x23, x30, [sp, #32]
  a4:	sub	x20, x0, x20
  a8:	str	x20, [x21]
  ac:	mov	x0, x22
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldp	x19, x20, [sp], #48
  b8:	b	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE5DrainEPNS5_8PerClassEPS4_m>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	str	x30, [sp, #48]
  10:	cbnz	x2, 34 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv+0x34>
  14:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>
  18:	add	x2, x2, #0x0
  1c:	mov	x4, #0x0                   	// #0
  20:	mov	x3, #0x0                   	// #0
  24:	mov	w1, #0xae                  	// #174
  28:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	mov	x19, x2
  38:	cmp	x2, #0x35
  3c:	b.ls	58 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv+0x58>  // b.plast
  40:	mov	x3, x2
  44:	mov	x4, #0x36                  	// #54
  48:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>
  4c:	mov	w1, #0xaf                  	// #175
  50:	add	x2, x2, #0x0
  54:	b	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv+0x28>
  58:	add	x23, x0, x2, lsl #10
  5c:	mov	x24, x1
  60:	mov	x20, x0
  64:	mov	x22, x3
  68:	lsl	x21, x2, #10
  6c:	ldr	x1, [x23, #8]
  70:	cbnz	x1, 78 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv+0x78>
  74:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>
  78:	ldr	x1, [x20, x21]
  7c:	ldr	x0, [x23, #8]
  80:	cmp	x1, x0
  84:	b.ne	9c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv+0x9c>  // b.any
  88:	mov	x3, x19
  8c:	mov	x2, x24
  90:	mov	x1, x23
  94:	mov	x0, x20
  98:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32IN6__lsan4AP32EEEE10DeallocateEPS4_mPv>
  9c:	ldr	x2, [x20, x21]
  a0:	ldp	x23, x24, [sp, #32]
  a4:	add	x0, x2, #0x1
  a8:	add	x19, x2, x19, lsl #7
  ac:	str	x0, [x20, x21]
  b0:	add	x19, x19, #0x4
  b4:	mov	x0, #0xd800                	// #55296
  b8:	add	x1, x20, x0
  bc:	ldr	x30, [sp, #48]
  c0:	str	x22, [x20, x19, lsl #3]
  c4:	add	x20, x20, x21
  c8:	ldr	x0, [x1, #16]
  cc:	ldr	x2, [x20, #16]
  d0:	ldp	x21, x22, [sp, #16]
  d4:	sub	x0, x0, x2
  d8:	str	x0, [x1, #16]
  dc:	ldp	x19, x20, [sp], #64
  e0:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>:
   0:	cbz	x2, 13c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x13c>
   4:	stp	x19, x20, [sp, #-48]!
   8:	mov	x19, x0
   c:	mov	x20, x1
  10:	mov	x1, x2
  14:	stp	x21, x30, [sp, #16]
  18:	mov	x21, x2
  1c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  20:	tst	w0, #0xff
  24:	b.eq	54 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x54>  // b.none
  28:	mov	x1, x21
  2c:	mov	x0, x19
  30:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  34:	mov	x2, x0
  38:	mov	x3, x21
  3c:	mov	x1, x19
  40:	mov	x0, x20
  44:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  48:	ldp	x21, x30, [sp, #16]
  4c:	ldp	x19, x20, [sp], #48
  50:	ret
  54:	add	x20, x19, #0x80, lsl #12
  58:	mov	x1, x21
  5c:	add	x20, x20, #0xdc0
  60:	mov	x0, x20
  64:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  68:	mov	x21, x0
  6c:	add	x0, x20, #0x268
  70:	str	x0, [sp, #40]
  74:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  78:	ldr	x0, [x20, #8]
  7c:	mov	x1, x20
  80:	ldr	x3, [x21, #24]
  84:	lsl	x5, x3, #3
  88:	ldr	x20, [x0, x5]
  8c:	cmp	x20, x21
  90:	b.eq	b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0xb4>  // b.none
  94:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  98:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  9c:	mov	x4, x21
  a0:	mov	x3, x20
  a4:	add	x2, x2, #0x0
  a8:	add	x0, x0, #0x0
  ac:	mov	w1, #0x88                  	// #136
  b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  b4:	ldr	x4, [x1, #56]
  b8:	cmp	x3, x4
  bc:	b.cc	d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0xd8>  // b.lo, b.ul, b.last
  c0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  c4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
  c8:	add	x2, x2, #0x0
  cc:	add	x0, x0, #0x0
  d0:	mov	w1, #0x89                  	// #137
  d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  d8:	sub	x4, x4, #0x1
  dc:	add	x19, x19, #0x81, lsl #12
  e0:	ldr	x2, [x0, x4, lsl #3]
  e4:	str	x4, [x1, #56]
  e8:	str	x2, [x0, x5]
  ec:	ldr	x0, [x1, #80]
  f0:	str	x3, [x2, #24]
  f4:	ldr	x2, [x20, #8]
  f8:	add	x0, x0, #0x1
  fc:	str	x0, [x1, #80]
 100:	ldr	x0, [x1, #88]
 104:	strb	wzr, [x1, #64]
 108:	sub	x0, x0, x2
 10c:	str	x0, [x1, #88]
 110:	ldr	x0, [x19, #64]
 114:	sub	x0, x0, x2
 118:	str	x0, [x19, #64]
 11c:	ldr	x0, [x19, #72]
 120:	sub	x0, x0, x2
 124:	str	x0, [x19, #72]
 128:	add	x0, sp, #0x28
 12c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv>
 130:	ldp	x0, x1, [x20]
 134:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 138:	b	48 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE10DeallocateEPS6_Pv+0x48>
 13c:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	cmp	x2, #0x0
   8:	csinc	x20, x2, xzr, ne  // ne = any
   c:	stp	x21, x22, [sp, #16]
  10:	cmn	x20, x3
  14:	str	x30, [sp, #32]
  18:	b.cc	4c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x4c>  // b.lo, b.ul, b.last
  1c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  20:	mov	x2, x20
  24:	ldr	x0, [x0]
  28:	ldr	x1, [x0]
  2c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  38:	mov	x0, #0x0                   	// #0
  3c:	ldp	x21, x22, [sp, #16]
  40:	ldr	x30, [sp, #32]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x22, x0
  50:	mov	x21, x1
  54:	mov	x19, x3
  58:	cmp	x3, #0x8
  5c:	b.ls	c8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0xc8>  // b.plast
  60:	mov	x1, x3
  64:	mov	x0, x20
  68:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  6c:	cmp	x19, #0x20, lsl #12
  70:	mov	x1, #0x20000               	// #131072
  74:	ccmp	x0, x1, #0x2, ls  // ls = plast
  78:	b.hi	dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0xdc>  // b.pmore
  7c:	cmp	x0, #0x100
  80:	b.hi	d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0xd0>  // b.pmore
  84:	add	x2, x0, #0xf
  88:	lsr	x2, x2, #4
  8c:	mov	x1, x22
  90:	mov	x0, x21
  94:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  98:	cmp	x19, #0x8
  9c:	b.ls	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3c>  // b.plast
  a0:	sub	x19, x19, #0x1
  a4:	ands	x3, x0, x19
  a8:	b.eq	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x3c>  // b.none
  ac:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  b0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  b4:	add	x2, x2, #0x0
  b8:	add	x0, x0, #0x0
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	w1, #0x42                  	// #66
  c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  c8:	mov	x0, x20
  cc:	b	6c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x6c>
  d0:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  d4:	mov	x2, x0
  d8:	b	8c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x8c>
  dc:	add	x1, x22, #0x81, lsl #12
  e0:	add	x0, x22, #0x80, lsl #12
  e4:	mov	x3, x19
  e8:	mov	x2, x20
  ec:	add	x1, x1, #0x30
  f0:	add	x0, x0, #0xdc0
  f4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm>
  f8:	b	98 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32IN6__lsan4AP32EEENS_28SizeClassAllocatorLocalCacheIS4_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_33LargeMmapAllocatorPtrArrayDynamicEEEE8AllocateEPS6_mm+0x98>

lsan_interceptors.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__interceptor_mallopt>:
       0:	mov	w0, #0xffffffff            	// #-1
       4:	ret

0000000000000008 <__interceptor_malloc>:
       8:	sub	sp, sp, #0x860
       c:	stp	x29, x30, [sp]
      10:	mov	x29, sp
      14:	stp	x19, x20, [sp, #16]
      18:	mov	x20, x0
      1c:	adrp	x0, 0 <lsan_init_is_running>
      20:	stp	x21, x22, [sp, #32]
      24:	ldr	x0, [x0]
      28:	ldrb	w0, [x0]
      2c:	str	x23, [sp, #48]
      30:	cbz	w0, 54 <__interceptor_malloc+0x4c>
      34:	adrp	x2, 0 <__interceptor_mallopt>
      38:	adrp	x0, 0 <__interceptor_mallopt>
      3c:	add	x2, x2, #0x0
      40:	add	x0, x0, #0x0
      44:	mov	x4, #0x0                   	// #0
      48:	mov	x3, #0x0                   	// #0
      4c:	mov	w1, #0x34                  	// #52
      50:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      54:	adrp	x0, 0 <lsan_inited>
      58:	ldr	x0, [x0]
      5c:	ldrb	w0, [x0]
      60:	cbnz	w0, 68 <__interceptor_malloc+0x60>
      64:	bl	0 <__lsan_init>
      68:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
      6c:	add	x21, x29, #0x48
      70:	add	x0, x21, #0x10
      74:	stp	x0, xzr, [x29, #72]
      78:	ldr	x19, [x19]
      7c:	str	xzr, [x29, #2136]
      80:	ldrsw	x23, [x19, #36]
      84:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
      88:	ldrb	w19, [x19, #34]
      8c:	mov	x22, x0
      90:	cbnz	w19, dc <__interceptor_malloc+0xd4>
      94:	mov	x6, #0x0                   	// #0
      98:	mov	x5, #0x0                   	// #0
      9c:	mov	w7, w19
      a0:	mov	x3, x29
      a4:	mov	x2, x22
      a8:	mov	x4, #0x0                   	// #0
      ac:	mov	w1, w23
      b0:	mov	x0, x21
      b4:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
      b8:	mov	x1, x21
      bc:	mov	x0, x20
      c0:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
      c4:	ldp	x29, x30, [sp]
      c8:	ldp	x19, x20, [sp, #16]
      cc:	ldp	x21, x22, [sp, #32]
      d0:	ldr	x23, [sp, #48]
      d4:	add	sp, sp, #0x860
      d8:	ret
      dc:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
      e0:	cbz	x0, 94 <__interceptor_malloc+0x8c>
      e4:	ldp	x6, x5, [x0, #144]
      e8:	b	9c <__interceptor_malloc+0x94>

00000000000000ec <__interceptor_cfree>:
      ec:	stp	x19, x30, [sp, #-16]!
      f0:	mov	x19, x0
      f4:	adrp	x0, 0 <lsan_init_is_running>
      f8:	ldr	x0, [x0]
      fc:	ldrb	w0, [x0]
     100:	cbz	w0, 124 <__interceptor_cfree+0x38>
     104:	adrp	x2, 0 <__interceptor_mallopt>
     108:	adrp	x0, 0 <__interceptor_mallopt>
     10c:	add	x2, x2, #0x0
     110:	add	x0, x0, #0x0
     114:	mov	x4, #0x0                   	// #0
     118:	mov	x3, #0x0                   	// #0
     11c:	mov	w1, #0x3a                  	// #58
     120:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     124:	adrp	x0, 0 <lsan_inited>
     128:	ldr	x0, [x0]
     12c:	ldrb	w0, [x0]
     130:	cbnz	w0, 138 <__interceptor_cfree+0x4c>
     134:	bl	0 <__lsan_init>
     138:	mov	x0, x19
     13c:	ldp	x19, x30, [sp], #16
     140:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000000144 <__interceptor_realloc>:
     144:	sub	sp, sp, #0x860
     148:	stp	x29, x30, [sp]
     14c:	mov	x29, sp
     150:	stp	x19, x20, [sp, #16]
     154:	mov	x20, x0
     158:	adrp	x0, 0 <lsan_init_is_running>
     15c:	stp	x21, x22, [sp, #32]
     160:	ldr	x0, [x0]
     164:	stp	x23, x24, [sp, #48]
     168:	ldrb	w0, [x0]
     16c:	cbz	w0, 190 <__interceptor_realloc+0x4c>
     170:	adrp	x2, 0 <__interceptor_mallopt>
     174:	adrp	x0, 0 <__interceptor_mallopt>
     178:	add	x2, x2, #0x0
     17c:	add	x0, x0, #0x0
     180:	mov	x4, #0x0                   	// #0
     184:	mov	x3, #0x0                   	// #0
     188:	mov	w1, #0x50                  	// #80
     18c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     190:	adrp	x0, 0 <lsan_inited>
     194:	mov	x21, x1
     198:	ldr	x0, [x0]
     19c:	ldrb	w0, [x0]
     1a0:	cbnz	w0, 1a8 <__interceptor_realloc+0x64>
     1a4:	bl	0 <__lsan_init>
     1a8:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     1ac:	add	x22, x29, #0x48
     1b0:	add	x0, x22, #0x10
     1b4:	stp	x0, xzr, [x29, #72]
     1b8:	ldr	x19, [x19]
     1bc:	str	xzr, [x29, #2136]
     1c0:	ldrsw	x24, [x19, #36]
     1c4:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     1c8:	ldrb	w19, [x19, #34]
     1cc:	mov	x23, x0
     1d0:	cbnz	w19, 220 <__interceptor_realloc+0xdc>
     1d4:	mov	x6, #0x0                   	// #0
     1d8:	mov	x5, #0x0                   	// #0
     1dc:	mov	w7, w19
     1e0:	mov	x3, x29
     1e4:	mov	x4, #0x0                   	// #0
     1e8:	mov	x2, x23
     1ec:	mov	w1, w24
     1f0:	mov	x0, x22
     1f4:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     1f8:	mov	x2, x22
     1fc:	mov	x1, x21
     200:	mov	x0, x20
     204:	bl	0 <_ZN6__lsan12lsan_reallocEPvmRKN11__sanitizer10StackTraceE>
     208:	ldp	x29, x30, [sp]
     20c:	ldp	x19, x20, [sp, #16]
     210:	ldp	x21, x22, [sp, #32]
     214:	ldp	x23, x24, [sp, #48]
     218:	add	sp, sp, #0x860
     21c:	ret
     220:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     224:	cbz	x0, 1d4 <__interceptor_realloc+0x90>
     228:	ldp	x6, x5, [x0, #144]
     22c:	b	1dc <__interceptor_realloc+0x98>

0000000000000230 <__interceptor_posix_memalign>:
     230:	sub	sp, sp, #0x870
     234:	stp	x29, x30, [sp]
     238:	mov	x29, sp
     23c:	stp	x19, x20, [sp, #16]
     240:	mov	x20, x0
     244:	adrp	x0, 0 <lsan_init_is_running>
     248:	stp	x21, x22, [sp, #32]
     24c:	ldr	x0, [x0]
     250:	stp	x23, x24, [sp, #48]
     254:	ldrb	w0, [x0]
     258:	str	x25, [sp, #64]
     25c:	cbz	w0, 280 <__interceptor_posix_memalign+0x50>
     260:	adrp	x2, 0 <__interceptor_mallopt>
     264:	adrp	x0, 0 <__interceptor_mallopt>
     268:	add	x2, x2, #0x0
     26c:	add	x0, x0, #0x0
     270:	mov	x4, #0x0                   	// #0
     274:	mov	x3, #0x0                   	// #0
     278:	mov	w1, #0x56                  	// #86
     27c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     280:	adrp	x0, 0 <lsan_inited>
     284:	mov	x21, x1
     288:	mov	x22, x2
     28c:	ldr	x0, [x0]
     290:	ldrb	w0, [x0]
     294:	cbnz	w0, 29c <__interceptor_posix_memalign+0x6c>
     298:	bl	0 <__lsan_init>
     29c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     2a0:	add	x23, x29, #0x58
     2a4:	add	x0, x23, #0x10
     2a8:	stp	x0, xzr, [x29, #88]
     2ac:	ldr	x19, [x19]
     2b0:	str	xzr, [x29, #2152]
     2b4:	ldrsw	x25, [x19, #36]
     2b8:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     2bc:	ldrb	w19, [x19, #34]
     2c0:	mov	x24, x0
     2c4:	cbnz	w19, 31c <__interceptor_posix_memalign+0xec>
     2c8:	mov	x6, #0x0                   	// #0
     2cc:	mov	x5, #0x0                   	// #0
     2d0:	mov	w7, w19
     2d4:	mov	x4, #0x0                   	// #0
     2d8:	mov	x3, x29
     2dc:	mov	x2, x24
     2e0:	mov	w1, w25
     2e4:	mov	x0, x23
     2e8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     2ec:	mov	x3, x23
     2f0:	mov	x2, x22
     2f4:	mov	x1, x21
     2f8:	mov	x0, x20
     2fc:	bl	0 <_ZN6__lsan19lsan_posix_memalignEPPvmmRKN11__sanitizer10StackTraceE>
     300:	ldp	x29, x30, [sp]
     304:	ldp	x19, x20, [sp, #16]
     308:	ldp	x21, x22, [sp, #32]
     30c:	ldp	x23, x24, [sp, #48]
     310:	ldr	x25, [sp, #64]
     314:	add	sp, sp, #0x870
     318:	ret
     31c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     320:	cbz	x0, 2c8 <__interceptor_posix_memalign+0x98>
     324:	ldp	x6, x5, [x0, #144]
     328:	b	2d0 <__interceptor_posix_memalign+0xa0>

000000000000032c <__interceptor_valloc>:
     32c:	sub	sp, sp, #0x860
     330:	stp	x29, x30, [sp]
     334:	mov	x29, sp
     338:	stp	x19, x20, [sp, #16]
     33c:	mov	x20, x0
     340:	adrp	x0, 0 <lsan_init_is_running>
     344:	stp	x21, x22, [sp, #32]
     348:	ldr	x0, [x0]
     34c:	ldrb	w0, [x0]
     350:	str	x23, [sp, #48]
     354:	cbz	w0, 378 <__interceptor_valloc+0x4c>
     358:	adrp	x2, 0 <__interceptor_mallopt>
     35c:	adrp	x0, 0 <__interceptor_mallopt>
     360:	add	x2, x2, #0x0
     364:	add	x0, x0, #0x0
     368:	mov	x4, #0x0                   	// #0
     36c:	mov	x3, #0x0                   	// #0
     370:	mov	w1, #0x5c                  	// #92
     374:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     378:	adrp	x0, 0 <lsan_inited>
     37c:	ldr	x0, [x0]
     380:	ldrb	w0, [x0]
     384:	cbnz	w0, 38c <__interceptor_valloc+0x60>
     388:	bl	0 <__lsan_init>
     38c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     390:	add	x21, x29, #0x48
     394:	add	x0, x21, #0x10
     398:	stp	x0, xzr, [x29, #72]
     39c:	ldr	x19, [x19]
     3a0:	str	xzr, [x29, #2136]
     3a4:	ldrsw	x23, [x19, #36]
     3a8:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     3ac:	ldrb	w19, [x19, #34]
     3b0:	mov	x22, x0
     3b4:	cbnz	w19, 400 <__interceptor_valloc+0xd4>
     3b8:	mov	x6, #0x0                   	// #0
     3bc:	mov	x5, #0x0                   	// #0
     3c0:	mov	w7, w19
     3c4:	mov	x3, x29
     3c8:	mov	x2, x22
     3cc:	mov	x4, #0x0                   	// #0
     3d0:	mov	w1, w23
     3d4:	mov	x0, x21
     3d8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     3dc:	mov	x1, x21
     3e0:	mov	x0, x20
     3e4:	bl	0 <_ZN6__lsan11lsan_vallocEmRKN11__sanitizer10StackTraceE>
     3e8:	ldp	x29, x30, [sp]
     3ec:	ldp	x19, x20, [sp, #16]
     3f0:	ldp	x21, x22, [sp, #32]
     3f4:	ldr	x23, [sp, #48]
     3f8:	add	sp, sp, #0x860
     3fc:	ret
     400:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     404:	cbz	x0, 3b8 <__interceptor_valloc+0x8c>
     408:	ldp	x6, x5, [x0, #144]
     40c:	b	3c0 <__interceptor_valloc+0x94>

0000000000000410 <__interceptor_memalign>:
     410:	sub	sp, sp, #0x860
     414:	stp	x29, x30, [sp]
     418:	mov	x29, sp
     41c:	stp	x19, x20, [sp, #16]
     420:	mov	x20, x0
     424:	adrp	x0, 0 <lsan_init_is_running>
     428:	stp	x21, x22, [sp, #32]
     42c:	ldr	x0, [x0]
     430:	stp	x23, x24, [sp, #48]
     434:	ldrb	w0, [x0]
     438:	cbz	w0, 45c <__interceptor_memalign+0x4c>
     43c:	adrp	x2, 0 <__interceptor_mallopt>
     440:	adrp	x0, 0 <__interceptor_mallopt>
     444:	add	x2, x2, #0x0
     448:	add	x0, x0, #0x0
     44c:	mov	x4, #0x0                   	// #0
     450:	mov	x3, #0x0                   	// #0
     454:	mov	w1, #0x64                  	// #100
     458:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     45c:	adrp	x0, 0 <lsan_inited>
     460:	mov	x21, x1
     464:	ldr	x0, [x0]
     468:	ldrb	w0, [x0]
     46c:	cbnz	w0, 474 <__interceptor_memalign+0x64>
     470:	bl	0 <__lsan_init>
     474:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     478:	add	x22, x29, #0x48
     47c:	add	x0, x22, #0x10
     480:	stp	x0, xzr, [x29, #72]
     484:	ldr	x19, [x19]
     488:	str	xzr, [x29, #2136]
     48c:	ldrsw	x24, [x19, #36]
     490:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     494:	ldrb	w19, [x19, #34]
     498:	mov	x23, x0
     49c:	cbnz	w19, 4ec <__interceptor_memalign+0xdc>
     4a0:	mov	x6, #0x0                   	// #0
     4a4:	mov	x5, #0x0                   	// #0
     4a8:	mov	w7, w19
     4ac:	mov	x3, x29
     4b0:	mov	x4, #0x0                   	// #0
     4b4:	mov	x2, x23
     4b8:	mov	w1, w24
     4bc:	mov	x0, x22
     4c0:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     4c4:	mov	x2, x22
     4c8:	mov	x1, x21
     4cc:	mov	x0, x20
     4d0:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
     4d4:	ldp	x29, x30, [sp]
     4d8:	ldp	x19, x20, [sp, #16]
     4dc:	ldp	x21, x22, [sp, #32]
     4e0:	ldp	x23, x24, [sp, #48]
     4e4:	add	sp, sp, #0x860
     4e8:	ret
     4ec:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     4f0:	cbz	x0, 4a0 <__interceptor_memalign+0x90>
     4f4:	ldp	x6, x5, [x0, #144]
     4f8:	b	4a8 <__interceptor_memalign+0x98>

00000000000004fc <__interceptor___libc_memalign>:
     4fc:	sub	sp, sp, #0x860
     500:	stp	x29, x30, [sp]
     504:	mov	x29, sp
     508:	stp	x21, x22, [sp, #32]
     50c:	mov	x21, x0
     510:	adrp	x0, 0 <lsan_init_is_running>
     514:	stp	x19, x20, [sp, #16]
     518:	ldr	x0, [x0]
     51c:	stp	x23, x24, [sp, #48]
     520:	ldrb	w0, [x0]
     524:	cbz	w0, 548 <__interceptor___libc_memalign+0x4c>
     528:	adrp	x2, 0 <__interceptor_mallopt>
     52c:	adrp	x0, 0 <__interceptor_mallopt>
     530:	add	x2, x2, #0x0
     534:	add	x0, x0, #0x0
     538:	mov	x4, #0x0                   	// #0
     53c:	mov	x3, #0x0                   	// #0
     540:	mov	w1, #0x6b                  	// #107
     544:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     548:	adrp	x0, 0 <lsan_inited>
     54c:	mov	x19, x1
     550:	ldr	x0, [x0]
     554:	ldrb	w0, [x0]
     558:	cbnz	w0, 560 <__interceptor___libc_memalign+0x64>
     55c:	bl	0 <__lsan_init>
     560:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     564:	add	x22, x29, #0x48
     568:	add	x0, x22, #0x10
     56c:	stp	x0, xzr, [x29, #72]
     570:	ldr	x20, [x20]
     574:	str	xzr, [x29, #2136]
     578:	ldrsw	x24, [x20, #36]
     57c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     580:	ldrb	w20, [x20, #34]
     584:	mov	x23, x0
     588:	cbnz	w20, 5e8 <__interceptor___libc_memalign+0xec>
     58c:	mov	x6, #0x0                   	// #0
     590:	mov	x5, #0x0                   	// #0
     594:	mov	w7, w20
     598:	mov	x3, x29
     59c:	mov	x4, #0x0                   	// #0
     5a0:	mov	x2, x23
     5a4:	mov	w1, w24
     5a8:	mov	x0, x22
     5ac:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     5b0:	mov	x2, x22
     5b4:	mov	x1, x19
     5b8:	mov	x0, x21
     5bc:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
     5c0:	mov	x1, x19
     5c4:	mov	x20, x0
     5c8:	bl	0 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>
     5cc:	mov	x0, x20
     5d0:	ldp	x29, x30, [sp]
     5d4:	ldp	x19, x20, [sp, #16]
     5d8:	ldp	x21, x22, [sp, #32]
     5dc:	ldp	x23, x24, [sp, #48]
     5e0:	add	sp, sp, #0x860
     5e4:	ret
     5e8:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     5ec:	cbz	x0, 58c <__interceptor___libc_memalign+0x90>
     5f0:	ldp	x6, x5, [x0, #144]
     5f4:	b	594 <__interceptor___libc_memalign+0x98>

00000000000005f8 <__interceptor_aligned_alloc>:
     5f8:	sub	sp, sp, #0x860
     5fc:	stp	x29, x30, [sp]
     600:	mov	x29, sp
     604:	stp	x19, x20, [sp, #16]
     608:	mov	x20, x0
     60c:	adrp	x0, 0 <lsan_init_is_running>
     610:	stp	x21, x22, [sp, #32]
     614:	ldr	x0, [x0]
     618:	stp	x23, x24, [sp, #48]
     61c:	ldrb	w0, [x0]
     620:	cbz	w0, 644 <__interceptor_aligned_alloc+0x4c>
     624:	adrp	x2, 0 <__interceptor_mallopt>
     628:	adrp	x0, 0 <__interceptor_mallopt>
     62c:	add	x2, x2, #0x0
     630:	add	x0, x0, #0x0
     634:	mov	x4, #0x0                   	// #0
     638:	mov	x3, #0x0                   	// #0
     63c:	mov	w1, #0x79                  	// #121
     640:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     644:	adrp	x0, 0 <lsan_inited>
     648:	mov	x21, x1
     64c:	ldr	x0, [x0]
     650:	ldrb	w0, [x0]
     654:	cbnz	w0, 65c <__interceptor_aligned_alloc+0x64>
     658:	bl	0 <__lsan_init>
     65c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     660:	add	x22, x29, #0x48
     664:	add	x0, x22, #0x10
     668:	stp	x0, xzr, [x29, #72]
     66c:	ldr	x19, [x19]
     670:	str	xzr, [x29, #2136]
     674:	ldrsw	x24, [x19, #36]
     678:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     67c:	ldrb	w19, [x19, #34]
     680:	mov	x23, x0
     684:	cbnz	w19, 6d4 <__interceptor_aligned_alloc+0xdc>
     688:	mov	x6, #0x0                   	// #0
     68c:	mov	x5, #0x0                   	// #0
     690:	mov	w7, w19
     694:	mov	x3, x29
     698:	mov	x4, #0x0                   	// #0
     69c:	mov	x2, x23
     6a0:	mov	w1, w24
     6a4:	mov	x0, x22
     6a8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     6ac:	mov	x2, x22
     6b0:	mov	x1, x21
     6b4:	mov	x0, x20
     6b8:	bl	0 <_ZN6__lsan18lsan_aligned_allocEmmRKN11__sanitizer10StackTraceE>
     6bc:	ldp	x29, x30, [sp]
     6c0:	ldp	x19, x20, [sp, #16]
     6c4:	ldp	x21, x22, [sp, #32]
     6c8:	ldp	x23, x24, [sp, #48]
     6cc:	add	sp, sp, #0x860
     6d0:	ret
     6d4:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     6d8:	cbz	x0, 688 <__interceptor_aligned_alloc+0x90>
     6dc:	ldp	x6, x5, [x0, #144]
     6e0:	b	690 <__interceptor_aligned_alloc+0x98>

00000000000006e4 <__interceptor_malloc_usable_size>:
     6e4:	stp	x19, x30, [sp, #-16]!
     6e8:	mov	x19, x0
     6ec:	adrp	x0, 0 <lsan_init_is_running>
     6f0:	ldr	x0, [x0]
     6f4:	ldrb	w0, [x0]
     6f8:	cbz	w0, 71c <__interceptor_malloc_usable_size+0x38>
     6fc:	adrp	x2, 0 <__interceptor_mallopt>
     700:	adrp	x0, 0 <__interceptor_mallopt>
     704:	add	x2, x2, #0x0
     708:	add	x0, x0, #0x0
     70c:	mov	x4, #0x0                   	// #0
     710:	mov	x3, #0x0                   	// #0
     714:	mov	w1, #0x84                  	// #132
     718:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     71c:	adrp	x0, 0 <lsan_inited>
     720:	ldr	x0, [x0]
     724:	ldrb	w0, [x0]
     728:	cbnz	w0, 730 <__interceptor_malloc_usable_size+0x4c>
     72c:	bl	0 <__lsan_init>
     730:	mov	x0, x19
     734:	ldp	x19, x30, [sp], #16
     738:	b	0 <_ZN6__lsan19GetMallocUsableSizeEPKv>

000000000000073c <__interceptor_mallinfo>:
     73c:	str	x30, [sp, #-16]!
     740:	mov	x0, x8
     744:	mov	x2, #0x28                  	// #40
     748:	mov	w1, #0x0                   	// #0
     74c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     750:	ldr	x30, [sp], #16
     754:	ret

0000000000000758 <__interceptor_pvalloc>:
     758:	sub	sp, sp, #0x860
     75c:	stp	x29, x30, [sp]
     760:	mov	x29, sp
     764:	stp	x19, x20, [sp, #16]
     768:	mov	x20, x0
     76c:	adrp	x0, 0 <lsan_init_is_running>
     770:	stp	x21, x22, [sp, #32]
     774:	ldr	x0, [x0]
     778:	ldrb	w0, [x0]
     77c:	str	x23, [sp, #48]
     780:	cbz	w0, 7a4 <__interceptor_pvalloc+0x4c>
     784:	adrp	x2, 0 <__interceptor_mallopt>
     788:	adrp	x0, 0 <__interceptor_mallopt>
     78c:	add	x2, x2, #0x0
     790:	add	x0, x0, #0x0
     794:	mov	x4, #0x0                   	// #0
     798:	mov	x3, #0x0                   	// #0
     79c:	mov	w1, #0xa4                  	// #164
     7a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     7a4:	adrp	x0, 0 <lsan_inited>
     7a8:	ldr	x0, [x0]
     7ac:	ldrb	w0, [x0]
     7b0:	cbnz	w0, 7b8 <__interceptor_pvalloc+0x60>
     7b4:	bl	0 <__lsan_init>
     7b8:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     7bc:	add	x21, x29, #0x48
     7c0:	add	x0, x21, #0x10
     7c4:	stp	x0, xzr, [x29, #72]
     7c8:	ldr	x19, [x19]
     7cc:	str	xzr, [x29, #2136]
     7d0:	ldrsw	x23, [x19, #36]
     7d4:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     7d8:	ldrb	w19, [x19, #34]
     7dc:	mov	x22, x0
     7e0:	cbnz	w19, 82c <__interceptor_pvalloc+0xd4>
     7e4:	mov	x6, #0x0                   	// #0
     7e8:	mov	x5, #0x0                   	// #0
     7ec:	mov	w7, w19
     7f0:	mov	x3, x29
     7f4:	mov	x2, x22
     7f8:	mov	x4, #0x0                   	// #0
     7fc:	mov	w1, w23
     800:	mov	x0, x21
     804:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     808:	mov	x1, x21
     80c:	mov	x0, x20
     810:	bl	0 <_ZN6__lsan12lsan_pvallocEmRKN11__sanitizer10StackTraceE>
     814:	ldp	x29, x30, [sp]
     818:	ldp	x19, x20, [sp, #16]
     81c:	ldp	x21, x22, [sp, #32]
     820:	ldr	x23, [sp, #48]
     824:	add	sp, sp, #0x860
     828:	ret
     82c:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     830:	cbz	x0, 7e4 <__interceptor_pvalloc+0x8c>
     834:	ldp	x6, x5, [x0, #144]
     838:	b	7ec <__interceptor_pvalloc+0x94>

000000000000083c <__interceptor_pthread_join>:
     83c:	stp	x19, x20, [sp, #-32]!
     840:	mov	x19, x0
     844:	adrp	x0, 0 <lsan_init_is_running>
     848:	stp	x21, x30, [sp, #16]
     84c:	ldr	x0, [x0]
     850:	ldrb	w0, [x0]
     854:	cbz	w0, 878 <__interceptor_pthread_join+0x3c>
     858:	adrp	x2, 0 <__interceptor_mallopt>
     85c:	adrp	x0, 0 <__interceptor_mallopt>
     860:	add	x2, x2, #0x0
     864:	add	x0, x0, #0x0
     868:	mov	x4, #0x0                   	// #0
     86c:	mov	x3, #0x0                   	// #0
     870:	mov	w1, #0x198                 	// #408
     874:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     878:	adrp	x0, 0 <lsan_inited>
     87c:	mov	x21, x1
     880:	ldr	x0, [x0]
     884:	ldrb	w0, [x0]
     888:	cbnz	w0, 890 <__interceptor_pthread_join+0x54>
     88c:	bl	0 <__lsan_init>
     890:	mov	x0, x19
     894:	bl	0 <_ZN6__lsan9ThreadTidEm>
     898:	mov	w20, w0
     89c:	adrp	x0, 0 <__interceptor_mallopt>
     8a0:	mov	x1, x21
     8a4:	ldr	x2, [x0]
     8a8:	mov	x0, x19
     8ac:	blr	x2
     8b0:	mov	w19, w0
     8b4:	cbnz	w0, 8c0 <__interceptor_pthread_join+0x84>
     8b8:	mov	w0, w20
     8bc:	bl	0 <_ZN6__lsan10ThreadJoinEj>
     8c0:	mov	w0, w19
     8c4:	ldp	x21, x30, [sp, #16]
     8c8:	ldp	x19, x20, [sp], #32
     8cc:	ret

00000000000008d0 <__interceptor__exit>:
     8d0:	stp	x19, x30, [sp, #-16]!
     8d4:	mov	w19, w0
     8d8:	cbnz	w0, 8f4 <__interceptor__exit+0x24>
     8dc:	bl	0 <_ZN6__lsan16HasReportedLeaksEv>
     8e0:	tst	w0, #0xff
     8e4:	b.eq	8f4 <__interceptor__exit+0x24>  // b.none
     8e8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     8ec:	ldr	x0, [x0]
     8f0:	ldr	w19, [x0, #216]
     8f4:	adrp	x0, 0 <__interceptor_mallopt>
     8f8:	ldr	x1, [x0]
     8fc:	mov	w0, w19
     900:	ldp	x19, x30, [sp], #16
     904:	mov	x16, x1
     908:	br	x16

000000000000090c <__interceptor_signal>:
     90c:	stp	x19, x20, [sp, #-32]!
     910:	mov	w19, w0
     914:	mov	x20, x1
     918:	str	x30, [sp, #16]
     91c:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
     920:	cmp	w0, #0x2
     924:	b.eq	948 <__interceptor_signal+0x3c>  // b.none
     928:	adrp	x0, 0 <__interceptor_mallopt>
     92c:	mov	x1, x20
     930:	ldr	x30, [sp, #16]
     934:	ldr	x2, [x0]
     938:	mov	w0, w19
     93c:	ldp	x19, x20, [sp], #32
     940:	mov	x16, x2
     944:	br	x16
     948:	mov	x0, #0x0                   	// #0
     94c:	ldr	x30, [sp, #16]
     950:	ldp	x19, x20, [sp], #32
     954:	ret

0000000000000958 <__interceptor_sigaction>:
     958:	stp	x19, x20, [sp, #-32]!
     95c:	mov	w19, w0
     960:	mov	x20, x1
     964:	stp	x21, x30, [sp, #16]
     968:	mov	x21, x2
     96c:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
     970:	cmp	w0, #0x2
     974:	b.eq	99c <__interceptor_sigaction+0x44>  // b.none
     978:	adrp	x0, 0 <__interceptor_mallopt>
     97c:	mov	x2, x21
     980:	mov	x1, x20
     984:	ldr	x3, [x0]
     988:	mov	w0, w19
     98c:	ldp	x21, x30, [sp, #16]
     990:	mov	x16, x3
     994:	ldp	x19, x20, [sp], #32
     998:	br	x16
     99c:	mov	w0, #0x0                   	// #0
     9a0:	ldp	x21, x30, [sp, #16]
     9a4:	ldp	x19, x20, [sp], #32
     9a8:	ret

00000000000009ac <__interceptor_calloc.part.0>:
     9ac:	sub	sp, sp, #0x860
     9b0:	stp	x29, x30, [sp]
     9b4:	mov	x29, sp
     9b8:	stp	x19, x20, [sp, #16]
     9bc:	mov	x20, x0
     9c0:	adrp	x0, 0 <lsan_inited>
     9c4:	stp	x21, x22, [sp, #32]
     9c8:	mov	x21, x1
     9cc:	ldr	x0, [x0]
     9d0:	stp	x23, x24, [sp, #48]
     9d4:	ldrb	w0, [x0]
     9d8:	cbnz	w0, 9e0 <__interceptor_calloc.part.0+0x34>
     9dc:	bl	0 <__lsan_init>
     9e0:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     9e4:	add	x22, x29, #0x48
     9e8:	add	x0, x22, #0x10
     9ec:	stp	x0, xzr, [x29, #72]
     9f0:	ldr	x19, [x19]
     9f4:	str	xzr, [x29, #2136]
     9f8:	ldrsw	x24, [x19, #36]
     9fc:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     a00:	ldrb	w19, [x19, #34]
     a04:	mov	x23, x0
     a08:	cbnz	w19, a58 <__interceptor_calloc.part.0+0xac>
     a0c:	mov	x6, #0x0                   	// #0
     a10:	mov	x5, #0x0                   	// #0
     a14:	mov	w7, w19
     a18:	mov	x3, x29
     a1c:	mov	x4, #0x0                   	// #0
     a20:	mov	x2, x23
     a24:	mov	w1, w24
     a28:	mov	x0, x22
     a2c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     a30:	mov	x2, x22
     a34:	mov	x1, x21
     a38:	mov	x0, x20
     a3c:	bl	0 <_ZN6__lsan11lsan_callocEmmRKN11__sanitizer10StackTraceE>
     a40:	ldp	x29, x30, [sp]
     a44:	ldp	x19, x20, [sp, #16]
     a48:	ldp	x21, x22, [sp, #32]
     a4c:	ldp	x23, x24, [sp, #48]
     a50:	add	sp, sp, #0x860
     a54:	ret
     a58:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     a5c:	cbz	x0, a0c <__interceptor_calloc.part.0+0x60>
     a60:	ldp	x6, x5, [x0, #144]
     a64:	b	a14 <__interceptor_calloc.part.0+0x68>

0000000000000a68 <__interceptor_calloc>:
     a68:	adrp	x3, 0 <lsan_init_is_running>
     a6c:	ldr	x3, [x3]
     a70:	ldrb	w3, [x3]
     a74:	cbz	w3, ad0 <__interceptor_calloc+0x68>
     a78:	mov	x2, x0
     a7c:	adrp	x3, 0 <__interceptor_mallopt>
     a80:	add	x3, x3, #0x0
     a84:	adrp	x0, 0 <__interceptor_mallopt>
     a88:	add	x0, x0, #0x0
     a8c:	mul	x1, x2, x1
     a90:	ldr	x5, [x3, #32]
     a94:	add	x1, x1, #0x7
     a98:	add	x1, x5, x1, lsr #3
     a9c:	str	x1, [x3, #32]
     aa0:	add	x0, x0, x5, lsl #3
     aa4:	cmp	x1, #0x3ff
     aa8:	b.ls	ad4 <__interceptor_calloc+0x6c>  // b.plast
     aac:	str	x30, [sp, #-16]!
     ab0:	adrp	x2, 0 <__interceptor_mallopt>
     ab4:	adrp	x0, 0 <__interceptor_mallopt>
     ab8:	add	x2, x2, #0x0
     abc:	add	x0, x0, #0x0
     ac0:	mov	x4, #0x0                   	// #0
     ac4:	mov	x3, #0x0                   	// #0
     ac8:	mov	w1, #0x47                  	// #71
     acc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ad0:	b	9ac <__interceptor_calloc.part.0>
     ad4:	ret

0000000000000ad8 <__interceptor_pthread_create>:
     ad8:	stp	x19, x20, [sp, #-208]!
     adc:	stp	x21, x22, [sp, #16]
     ae0:	mov	x21, x0
     ae4:	adrp	x0, 0 <lsan_init_is_running>
     ae8:	ldr	x0, [x0]
     aec:	ldrb	w0, [x0]
     af0:	str	x30, [sp, #32]
     af4:	cbz	w0, b18 <__interceptor_pthread_create+0x40>
     af8:	adrp	x2, 0 <__interceptor_mallopt>
     afc:	add	x2, x2, #0x0
     b00:	mov	x4, #0x0                   	// #0
     b04:	mov	x3, #0x0                   	// #0
     b08:	mov	w1, #0x173                 	// #371
     b0c:	adrp	x0, 0 <__interceptor_mallopt>
     b10:	add	x0, x0, #0x0
     b14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b18:	adrp	x0, 0 <lsan_inited>
     b1c:	mov	x19, x1
     b20:	mov	x22, x2
     b24:	mov	x20, x3
     b28:	ldr	x0, [x0]
     b2c:	ldrb	w0, [x0]
     b30:	cbnz	w0, b38 <__interceptor_pthread_create+0x60>
     b34:	bl	0 <__lsan_init>
     b38:	bl	0 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>
     b3c:	cbnz	x19, b4c <__interceptor_pthread_create+0x74>
     b40:	add	x19, sp, #0x50
     b44:	mov	x0, x19
     b48:	bl	0 <pthread_attr_init>
     b4c:	mov	x0, x19
     b50:	bl	0 <_ZN11__sanitizer15AdjustStackSizeEPv>
     b54:	add	x1, sp, #0x34
     b58:	mov	x0, x19
     b5c:	str	wzr, [sp, #52]
     b60:	bl	0 <pthread_attr_getdetachstate>
     b64:	stp	x22, x20, [sp, #56]
     b68:	str	xzr, [sp, #72]
     b6c:	bl	0 <_ZN6__lsan19DisableInThisThreadEv>
     b70:	adrp	x0, 0 <__interceptor_mallopt>
     b74:	add	x3, sp, #0x38
     b78:	mov	x1, x19
     b7c:	adrp	x2, c24 <__lsan_thread_start_func>
     b80:	ldr	x4, [x0]
     b84:	add	x2, x2, #0x0
     b88:	mov	x0, x21
     b8c:	blr	x4
     b90:	mov	w20, w0
     b94:	bl	0 <_ZN6__lsan18EnableInThisThreadEv>
     b98:	cbnz	w20, bfc <__interceptor_pthread_create+0x124>
     b9c:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
     ba0:	mov	w22, w0
     ba4:	ldr	w0, [sp, #52]
     ba8:	ldr	x21, [x21]
     bac:	bl	0 <_ZN11__sanitizer15IsStateDetachedEi>
     bb0:	mov	w2, w0
     bb4:	mov	x1, x21
     bb8:	mov	w0, w22
     bbc:	bl	0 <_ZN6__lsan12ThreadCreateEjmb>
     bc0:	sxtw	x1, w0
     bc4:	cbnz	w0, be0 <__interceptor_pthread_create+0x108>
     bc8:	adrp	x2, 0 <__interceptor_mallopt>
     bcc:	mov	x4, #0x0                   	// #0
     bd0:	add	x2, x2, #0x0
     bd4:	mov	x3, #0x0                   	// #0
     bd8:	mov	w1, #0x18d                 	// #397
     bdc:	b	b0c <__interceptor_pthread_create+0x34>
     be0:	dmb	ish
     be4:	str	x1, [sp, #72]
     be8:	ldr	x0, [sp, #72]
     bec:	dmb	ish
     bf0:	cbz	x0, bfc <__interceptor_pthread_create+0x124>
     bf4:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     bf8:	b	be8 <__interceptor_pthread_create+0x110>
     bfc:	add	x0, sp, #0x50
     c00:	cmp	x19, x0
     c04:	b.ne	c10 <__interceptor_pthread_create+0x138>  // b.any
     c08:	mov	x0, x19
     c0c:	bl	0 <pthread_attr_destroy>
     c10:	mov	w0, w20
     c14:	ldp	x21, x22, [sp, #16]
     c18:	ldr	x30, [sp, #32]
     c1c:	ldp	x19, x20, [sp], #208
     c20:	ret

0000000000000c24 <__lsan_thread_start_func>:
     c24:	stp	x19, x20, [sp, #-48]!
     c28:	mov	x19, x0
     c2c:	mov	x1, #0x4                   	// #4
     c30:	stp	x21, x22, [sp, #16]
     c34:	ldp	x21, x22, [x0]
     c38:	adrp	x0, 0 <__interceptor_mallopt>
     c3c:	str	x30, [sp, #32]
     c40:	ldr	w0, [x0]
     c44:	bl	0 <pthread_setspecific>
     c48:	cbz	w0, c5c <__lsan_thread_start_func+0x38>
     c4c:	adrp	x0, 0 <__interceptor_mallopt>
     c50:	add	x0, x0, #0x0
     c54:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c58:	bl	0 <_ZN11__sanitizer3DieEv>
     c5c:	ldr	x20, [x19, #16]
     c60:	dmb	ish
     c64:	cbnz	w20, c70 <__lsan_thread_start_func+0x4c>
     c68:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     c6c:	b	c5c <__lsan_thread_start_func+0x38>
     c70:	mov	w0, w20
     c74:	bl	0 <_ZN6__lsan16SetCurrentThreadEj>
     c78:	bl	0 <_ZN11__sanitizer6GetTidEv>
     c7c:	mov	x1, x0
     c80:	mov	w2, #0x0                   	// #0
     c84:	mov	w0, w20
     c88:	bl	0 <_ZN6__lsan11ThreadStartEjyb>
     c8c:	dmb	ish
     c90:	str	xzr, [x19, #16]
     c94:	mov	x0, x22
     c98:	mov	x16, x21
     c9c:	ldp	x21, x22, [sp, #16]
     ca0:	ldr	x30, [sp, #32]
     ca4:	ldp	x19, x20, [sp], #48
     ca8:	br	x16

0000000000000cac <_ZL15thread_finalizePv>:
     cac:	cmp	x0, #0x1
     cb0:	b.ls	cdc <_ZL15thread_finalizePv+0x30>  // b.plast
     cb4:	sub	x1, x0, #0x1
     cb8:	adrp	x0, 0 <__interceptor_mallopt>
     cbc:	str	x30, [sp, #-16]!
     cc0:	ldr	w0, [x0]
     cc4:	bl	0 <pthread_setspecific>
     cc8:	cbz	w0, ce0 <_ZL15thread_finalizePv+0x34>
     ccc:	adrp	x0, 0 <__interceptor_mallopt>
     cd0:	add	x0, x0, #0x0
     cd4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     cd8:	bl	0 <_ZN11__sanitizer3DieEv>
     cdc:	b	0 <_ZN6__lsan12ThreadFinishEv>
     ce0:	ldr	x30, [sp], #16
     ce4:	ret

0000000000000ce8 <__interceptor_mcheck>:
     ce8:	mov	w0, #0x0                   	// #0
     cec:	ret

0000000000000cf0 <__interceptor_mcheck_pedantic>:
     cf0:	mov	w0, #0x0                   	// #0
     cf4:	ret

0000000000000cf8 <__interceptor_mprobe>:
     cf8:	mov	w0, #0x0                   	// #0
     cfc:	ret

0000000000000d00 <_Znwm>:
     d00:	sub	sp, sp, #0x860
     d04:	stp	x29, x30, [sp]
     d08:	mov	x29, sp
     d0c:	stp	x19, x20, [sp, #16]
     d10:	mov	x19, x0
     d14:	adrp	x0, 0 <lsan_init_is_running>
     d18:	stp	x21, x22, [sp, #32]
     d1c:	ldr	x0, [x0]
     d20:	ldrb	w0, [x0]
     d24:	str	x23, [sp, #48]
     d28:	cbz	w0, d4c <_Znwm+0x4c>
     d2c:	adrp	x2, 0 <__interceptor_mallopt>
     d30:	adrp	x0, 0 <__interceptor_mallopt>
     d34:	add	x2, x2, #0x0
     d38:	add	x0, x0, #0x0
     d3c:	mov	x4, #0x0                   	// #0
     d40:	mov	x3, #0x0                   	// #0
     d44:	mov	w1, #0xde                  	// #222
     d48:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d4c:	adrp	x0, 0 <lsan_inited>
     d50:	ldr	x0, [x0]
     d54:	ldrb	w0, [x0]
     d58:	cbnz	w0, d60 <_Znwm+0x60>
     d5c:	bl	0 <__lsan_init>
     d60:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d64:	add	x20, x29, #0x48
     d68:	add	x0, x20, #0x10
     d6c:	stp	x0, xzr, [x29, #72]
     d70:	ldr	x21, [x21]
     d74:	str	xzr, [x29, #2136]
     d78:	ldrsw	x23, [x21, #36]
     d7c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     d80:	ldrb	w21, [x21, #34]
     d84:	mov	x22, x0
     d88:	cbnz	w21, dcc <_Znwm+0xcc>
     d8c:	mov	x6, #0x0                   	// #0
     d90:	mov	x5, #0x0                   	// #0
     d94:	mov	w7, w21
     d98:	mov	x3, x29
     d9c:	mov	x2, x22
     da0:	mov	x4, #0x0                   	// #0
     da4:	mov	w1, w23
     da8:	mov	x0, x20
     dac:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     db0:	mov	x1, x20
     db4:	mov	x0, x19
     db8:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
     dbc:	cbnz	x0, ddc <_Znwm+0xdc>
     dc0:	mov	x1, x20
     dc4:	mov	x0, x19
     dc8:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
     dcc:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     dd0:	cbz	x0, d8c <_Znwm+0x8c>
     dd4:	ldp	x6, x5, [x0, #144]
     dd8:	b	d94 <_Znwm+0x94>
     ddc:	ldp	x29, x30, [sp]
     de0:	ldp	x19, x20, [sp, #16]
     de4:	ldp	x21, x22, [sp, #32]
     de8:	ldr	x23, [sp, #48]
     dec:	add	sp, sp, #0x860
     df0:	ret

0000000000000df4 <_Znam>:
     df4:	sub	sp, sp, #0x860
     df8:	stp	x29, x30, [sp]
     dfc:	mov	x29, sp
     e00:	stp	x19, x20, [sp, #16]
     e04:	mov	x19, x0
     e08:	adrp	x0, 0 <lsan_init_is_running>
     e0c:	stp	x21, x22, [sp, #32]
     e10:	ldr	x0, [x0]
     e14:	ldrb	w0, [x0]
     e18:	str	x23, [sp, #48]
     e1c:	cbz	w0, e40 <_Znam+0x4c>
     e20:	adrp	x2, 0 <__interceptor_mallopt>
     e24:	adrp	x0, 0 <__interceptor_mallopt>
     e28:	add	x2, x2, #0x0
     e2c:	add	x0, x0, #0x0
     e30:	mov	x4, #0x0                   	// #0
     e34:	mov	x3, #0x0                   	// #0
     e38:	mov	w1, #0xe0                  	// #224
     e3c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e40:	adrp	x0, 0 <lsan_inited>
     e44:	ldr	x0, [x0]
     e48:	ldrb	w0, [x0]
     e4c:	cbnz	w0, e54 <_Znam+0x60>
     e50:	bl	0 <__lsan_init>
     e54:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     e58:	add	x20, x29, #0x48
     e5c:	add	x0, x20, #0x10
     e60:	stp	x0, xzr, [x29, #72]
     e64:	ldr	x21, [x21]
     e68:	str	xzr, [x29, #2136]
     e6c:	ldrsw	x23, [x21, #36]
     e70:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     e74:	ldrb	w21, [x21, #34]
     e78:	mov	x22, x0
     e7c:	cbnz	w21, ec0 <_Znam+0xcc>
     e80:	mov	x6, #0x0                   	// #0
     e84:	mov	x5, #0x0                   	// #0
     e88:	mov	w7, w21
     e8c:	mov	x3, x29
     e90:	mov	x2, x22
     e94:	mov	x4, #0x0                   	// #0
     e98:	mov	w1, w23
     e9c:	mov	x0, x20
     ea0:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     ea4:	mov	x1, x20
     ea8:	mov	x0, x19
     eac:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
     eb0:	cbnz	x0, ed0 <_Znam+0xdc>
     eb4:	mov	x1, x20
     eb8:	mov	x0, x19
     ebc:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
     ec0:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     ec4:	cbz	x0, e80 <_Znam+0x8c>
     ec8:	ldp	x6, x5, [x0, #144]
     ecc:	b	e88 <_Znam+0x94>
     ed0:	ldp	x29, x30, [sp]
     ed4:	ldp	x19, x20, [sp, #16]
     ed8:	ldp	x21, x22, [sp, #32]
     edc:	ldr	x23, [sp, #48]
     ee0:	add	sp, sp, #0x860
     ee4:	ret

0000000000000ee8 <_ZnwmRKSt9nothrow_t>:
     ee8:	sub	sp, sp, #0x860
     eec:	stp	x29, x30, [sp]
     ef0:	mov	x29, sp
     ef4:	stp	x19, x20, [sp, #16]
     ef8:	mov	x20, x0
     efc:	adrp	x0, 0 <lsan_init_is_running>
     f00:	stp	x21, x22, [sp, #32]
     f04:	ldr	x0, [x0]
     f08:	ldrb	w0, [x0]
     f0c:	str	x23, [sp, #48]
     f10:	cbz	w0, f34 <_ZnwmRKSt9nothrow_t+0x4c>
     f14:	adrp	x2, 0 <__interceptor_mallopt>
     f18:	adrp	x0, 0 <__interceptor_mallopt>
     f1c:	add	x2, x2, #0x0
     f20:	add	x0, x0, #0x0
     f24:	mov	x4, #0x0                   	// #0
     f28:	mov	x3, #0x0                   	// #0
     f2c:	mov	w1, #0xe3                  	// #227
     f30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f34:	adrp	x0, 0 <lsan_inited>
     f38:	ldr	x0, [x0]
     f3c:	ldrb	w0, [x0]
     f40:	cbnz	w0, f48 <_ZnwmRKSt9nothrow_t+0x60>
     f44:	bl	0 <__lsan_init>
     f48:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     f4c:	add	x21, x29, #0x48
     f50:	add	x0, x21, #0x10
     f54:	stp	x0, xzr, [x29, #72]
     f58:	ldr	x19, [x19]
     f5c:	str	xzr, [x29, #2136]
     f60:	ldrsw	x23, [x19, #36]
     f64:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
     f68:	ldrb	w19, [x19, #34]
     f6c:	mov	x22, x0
     f70:	cbnz	w19, fbc <_ZnwmRKSt9nothrow_t+0xd4>
     f74:	mov	x6, #0x0                   	// #0
     f78:	mov	x5, #0x0                   	// #0
     f7c:	mov	w7, w19
     f80:	mov	x3, x29
     f84:	mov	x2, x22
     f88:	mov	x4, #0x0                   	// #0
     f8c:	mov	w1, w23
     f90:	mov	x0, x21
     f94:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     f98:	mov	x1, x21
     f9c:	mov	x0, x20
     fa0:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
     fa4:	ldp	x29, x30, [sp]
     fa8:	ldp	x19, x20, [sp, #16]
     fac:	ldp	x21, x22, [sp, #32]
     fb0:	ldr	x23, [sp, #48]
     fb4:	add	sp, sp, #0x860
     fb8:	ret
     fbc:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
     fc0:	cbz	x0, f74 <_ZnwmRKSt9nothrow_t+0x8c>
     fc4:	ldp	x6, x5, [x0, #144]
     fc8:	b	f7c <_ZnwmRKSt9nothrow_t+0x94>

0000000000000fcc <_ZnamRKSt9nothrow_t>:
     fcc:	sub	sp, sp, #0x860
     fd0:	stp	x29, x30, [sp]
     fd4:	mov	x29, sp
     fd8:	stp	x19, x20, [sp, #16]
     fdc:	mov	x20, x0
     fe0:	adrp	x0, 0 <lsan_init_is_running>
     fe4:	stp	x21, x22, [sp, #32]
     fe8:	ldr	x0, [x0]
     fec:	ldrb	w0, [x0]
     ff0:	str	x23, [sp, #48]
     ff4:	cbz	w0, 1018 <_ZnamRKSt9nothrow_t+0x4c>
     ff8:	adrp	x2, 0 <__interceptor_mallopt>
     ffc:	adrp	x0, 0 <__interceptor_mallopt>
    1000:	add	x2, x2, #0x0
    1004:	add	x0, x0, #0x0
    1008:	mov	x4, #0x0                   	// #0
    100c:	mov	x3, #0x0                   	// #0
    1010:	mov	w1, #0xe6                  	// #230
    1014:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1018:	adrp	x0, 0 <lsan_inited>
    101c:	ldr	x0, [x0]
    1020:	ldrb	w0, [x0]
    1024:	cbnz	w0, 102c <_ZnamRKSt9nothrow_t+0x60>
    1028:	bl	0 <__lsan_init>
    102c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1030:	add	x21, x29, #0x48
    1034:	add	x0, x21, #0x10
    1038:	stp	x0, xzr, [x29, #72]
    103c:	ldr	x19, [x19]
    1040:	str	xzr, [x29, #2136]
    1044:	ldrsw	x23, [x19, #36]
    1048:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    104c:	ldrb	w19, [x19, #34]
    1050:	mov	x22, x0
    1054:	cbnz	w19, 10a0 <_ZnamRKSt9nothrow_t+0xd4>
    1058:	mov	x6, #0x0                   	// #0
    105c:	mov	x5, #0x0                   	// #0
    1060:	mov	w7, w19
    1064:	mov	x3, x29
    1068:	mov	x2, x22
    106c:	mov	x4, #0x0                   	// #0
    1070:	mov	w1, w23
    1074:	mov	x0, x21
    1078:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    107c:	mov	x1, x21
    1080:	mov	x0, x20
    1084:	bl	0 <_ZN6__lsan11lsan_mallocEmRKN11__sanitizer10StackTraceE>
    1088:	ldp	x29, x30, [sp]
    108c:	ldp	x19, x20, [sp, #16]
    1090:	ldp	x21, x22, [sp, #32]
    1094:	ldr	x23, [sp, #48]
    1098:	add	sp, sp, #0x860
    109c:	ret
    10a0:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    10a4:	cbz	x0, 1058 <_ZnamRKSt9nothrow_t+0x8c>
    10a8:	ldp	x6, x5, [x0, #144]
    10ac:	b	1060 <_ZnamRKSt9nothrow_t+0x94>

00000000000010b0 <_ZnwmSt11align_val_t>:
    10b0:	sub	sp, sp, #0x860
    10b4:	stp	x29, x30, [sp]
    10b8:	mov	x29, sp
    10bc:	stp	x19, x20, [sp, #16]
    10c0:	mov	x19, x0
    10c4:	adrp	x0, 0 <lsan_init_is_running>
    10c8:	stp	x21, x22, [sp, #32]
    10cc:	ldr	x0, [x0]
    10d0:	stp	x23, x24, [sp, #48]
    10d4:	ldrb	w0, [x0]
    10d8:	cbz	w0, 10fc <_ZnwmSt11align_val_t+0x4c>
    10dc:	adrp	x2, 0 <__interceptor_mallopt>
    10e0:	adrp	x0, 0 <__interceptor_mallopt>
    10e4:	add	x2, x2, #0x0
    10e8:	add	x0, x0, #0x0
    10ec:	mov	x4, #0x0                   	// #0
    10f0:	mov	x3, #0x0                   	// #0
    10f4:	mov	w1, #0xe9                  	// #233
    10f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    10fc:	adrp	x0, 0 <lsan_inited>
    1100:	mov	x22, x1
    1104:	ldr	x0, [x0]
    1108:	ldrb	w0, [x0]
    110c:	cbnz	w0, 1114 <_ZnwmSt11align_val_t+0x64>
    1110:	bl	0 <__lsan_init>
    1114:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1118:	add	x20, x29, #0x48
    111c:	add	x0, x20, #0x10
    1120:	stp	x0, xzr, [x29, #72]
    1124:	ldr	x21, [x21]
    1128:	str	xzr, [x29, #2136]
    112c:	ldrsw	x24, [x21, #36]
    1130:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    1134:	ldrb	w21, [x21, #34]
    1138:	mov	x23, x0
    113c:	cbnz	w21, 1184 <_ZnwmSt11align_val_t+0xd4>
    1140:	mov	x6, #0x0                   	// #0
    1144:	mov	x5, #0x0                   	// #0
    1148:	mov	w7, w21
    114c:	mov	x3, x29
    1150:	mov	x4, #0x0                   	// #0
    1154:	mov	x2, x23
    1158:	mov	w1, w24
    115c:	mov	x0, x20
    1160:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    1164:	mov	x2, x20
    1168:	mov	x1, x19
    116c:	mov	x0, x22
    1170:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    1174:	cbnz	x0, 1194 <_ZnwmSt11align_val_t+0xe4>
    1178:	mov	x1, x20
    117c:	mov	x0, x19
    1180:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
    1184:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1188:	cbz	x0, 1140 <_ZnwmSt11align_val_t+0x90>
    118c:	ldp	x6, x5, [x0, #144]
    1190:	b	1148 <_ZnwmSt11align_val_t+0x98>
    1194:	ldp	x29, x30, [sp]
    1198:	ldp	x19, x20, [sp, #16]
    119c:	ldp	x21, x22, [sp, #32]
    11a0:	ldp	x23, x24, [sp, #48]
    11a4:	add	sp, sp, #0x860
    11a8:	ret

00000000000011ac <_ZnamSt11align_val_t>:
    11ac:	sub	sp, sp, #0x860
    11b0:	stp	x29, x30, [sp]
    11b4:	mov	x29, sp
    11b8:	stp	x19, x20, [sp, #16]
    11bc:	mov	x19, x0
    11c0:	adrp	x0, 0 <lsan_init_is_running>
    11c4:	stp	x21, x22, [sp, #32]
    11c8:	ldr	x0, [x0]
    11cc:	stp	x23, x24, [sp, #48]
    11d0:	ldrb	w0, [x0]
    11d4:	cbz	w0, 11f8 <_ZnamSt11align_val_t+0x4c>
    11d8:	adrp	x2, 0 <__interceptor_mallopt>
    11dc:	adrp	x0, 0 <__interceptor_mallopt>
    11e0:	add	x2, x2, #0x0
    11e4:	add	x0, x0, #0x0
    11e8:	mov	x4, #0x0                   	// #0
    11ec:	mov	x3, #0x0                   	// #0
    11f0:	mov	w1, #0xec                  	// #236
    11f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11f8:	adrp	x0, 0 <lsan_inited>
    11fc:	mov	x22, x1
    1200:	ldr	x0, [x0]
    1204:	ldrb	w0, [x0]
    1208:	cbnz	w0, 1210 <_ZnamSt11align_val_t+0x64>
    120c:	bl	0 <__lsan_init>
    1210:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1214:	add	x20, x29, #0x48
    1218:	add	x0, x20, #0x10
    121c:	stp	x0, xzr, [x29, #72]
    1220:	ldr	x21, [x21]
    1224:	str	xzr, [x29, #2136]
    1228:	ldrsw	x24, [x21, #36]
    122c:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    1230:	ldrb	w21, [x21, #34]
    1234:	mov	x23, x0
    1238:	cbnz	w21, 1280 <_ZnamSt11align_val_t+0xd4>
    123c:	mov	x6, #0x0                   	// #0
    1240:	mov	x5, #0x0                   	// #0
    1244:	mov	w7, w21
    1248:	mov	x3, x29
    124c:	mov	x4, #0x0                   	// #0
    1250:	mov	x2, x23
    1254:	mov	w1, w24
    1258:	mov	x0, x20
    125c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    1260:	mov	x2, x20
    1264:	mov	x1, x19
    1268:	mov	x0, x22
    126c:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    1270:	cbnz	x0, 1290 <_ZnamSt11align_val_t+0xe4>
    1274:	mov	x1, x20
    1278:	mov	x0, x19
    127c:	bl	0 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>
    1280:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1284:	cbz	x0, 123c <_ZnamSt11align_val_t+0x90>
    1288:	ldp	x6, x5, [x0, #144]
    128c:	b	1244 <_ZnamSt11align_val_t+0x98>
    1290:	ldp	x29, x30, [sp]
    1294:	ldp	x19, x20, [sp, #16]
    1298:	ldp	x21, x22, [sp, #32]
    129c:	ldp	x23, x24, [sp, #48]
    12a0:	add	sp, sp, #0x860
    12a4:	ret

00000000000012a8 <_ZnwmSt11align_val_tRKSt9nothrow_t>:
    12a8:	sub	sp, sp, #0x860
    12ac:	stp	x29, x30, [sp]
    12b0:	mov	x29, sp
    12b4:	stp	x21, x22, [sp, #32]
    12b8:	mov	x21, x0
    12bc:	adrp	x0, 0 <lsan_init_is_running>
    12c0:	stp	x19, x20, [sp, #16]
    12c4:	ldr	x0, [x0]
    12c8:	stp	x23, x24, [sp, #48]
    12cc:	ldrb	w0, [x0]
    12d0:	cbz	w0, 12f4 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x4c>
    12d4:	adrp	x2, 0 <__interceptor_mallopt>
    12d8:	adrp	x0, 0 <__interceptor_mallopt>
    12dc:	add	x2, x2, #0x0
    12e0:	add	x0, x0, #0x0
    12e4:	mov	x4, #0x0                   	// #0
    12e8:	mov	x3, #0x0                   	// #0
    12ec:	mov	w1, #0xef                  	// #239
    12f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    12f4:	adrp	x0, 0 <lsan_inited>
    12f8:	mov	x20, x1
    12fc:	ldr	x0, [x0]
    1300:	ldrb	w0, [x0]
    1304:	cbnz	w0, 130c <_ZnwmSt11align_val_tRKSt9nothrow_t+0x64>
    1308:	bl	0 <__lsan_init>
    130c:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1310:	add	x22, x29, #0x48
    1314:	add	x0, x22, #0x10
    1318:	stp	x0, xzr, [x29, #72]
    131c:	ldr	x19, [x19]
    1320:	str	xzr, [x29, #2136]
    1324:	ldrsw	x24, [x19, #36]
    1328:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    132c:	ldrb	w19, [x19, #34]
    1330:	mov	x23, x0
    1334:	cbnz	w19, 1384 <_ZnwmSt11align_val_tRKSt9nothrow_t+0xdc>
    1338:	mov	x6, #0x0                   	// #0
    133c:	mov	x5, #0x0                   	// #0
    1340:	mov	w7, w19
    1344:	mov	x3, x29
    1348:	mov	x4, #0x0                   	// #0
    134c:	mov	x2, x23
    1350:	mov	w1, w24
    1354:	mov	x0, x22
    1358:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    135c:	mov	x2, x22
    1360:	mov	x1, x21
    1364:	mov	x0, x20
    1368:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    136c:	ldp	x29, x30, [sp]
    1370:	ldp	x19, x20, [sp, #16]
    1374:	ldp	x21, x22, [sp, #32]
    1378:	ldp	x23, x24, [sp, #48]
    137c:	add	sp, sp, #0x860
    1380:	ret
    1384:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1388:	cbz	x0, 1338 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x90>
    138c:	ldp	x6, x5, [x0, #144]
    1390:	b	1340 <_ZnwmSt11align_val_tRKSt9nothrow_t+0x98>

0000000000001394 <_ZnamSt11align_val_tRKSt9nothrow_t>:
    1394:	sub	sp, sp, #0x860
    1398:	stp	x29, x30, [sp]
    139c:	mov	x29, sp
    13a0:	stp	x21, x22, [sp, #32]
    13a4:	mov	x21, x0
    13a8:	adrp	x0, 0 <lsan_init_is_running>
    13ac:	stp	x19, x20, [sp, #16]
    13b0:	ldr	x0, [x0]
    13b4:	stp	x23, x24, [sp, #48]
    13b8:	ldrb	w0, [x0]
    13bc:	cbz	w0, 13e0 <_ZnamSt11align_val_tRKSt9nothrow_t+0x4c>
    13c0:	adrp	x2, 0 <__interceptor_mallopt>
    13c4:	adrp	x0, 0 <__interceptor_mallopt>
    13c8:	add	x2, x2, #0x0
    13cc:	add	x0, x0, #0x0
    13d0:	mov	x4, #0x0                   	// #0
    13d4:	mov	x3, #0x0                   	// #0
    13d8:	mov	w1, #0xf2                  	// #242
    13dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    13e0:	adrp	x0, 0 <lsan_inited>
    13e4:	mov	x20, x1
    13e8:	ldr	x0, [x0]
    13ec:	ldrb	w0, [x0]
    13f0:	cbnz	w0, 13f8 <_ZnamSt11align_val_tRKSt9nothrow_t+0x64>
    13f4:	bl	0 <__lsan_init>
    13f8:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    13fc:	add	x22, x29, #0x48
    1400:	add	x0, x22, #0x10
    1404:	stp	x0, xzr, [x29, #72]
    1408:	ldr	x19, [x19]
    140c:	str	xzr, [x29, #2136]
    1410:	ldrsw	x24, [x19, #36]
    1414:	bl	0 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>
    1418:	ldrb	w19, [x19, #34]
    141c:	mov	x23, x0
    1420:	cbnz	w19, 1470 <_ZnamSt11align_val_tRKSt9nothrow_t+0xdc>
    1424:	mov	x6, #0x0                   	// #0
    1428:	mov	x5, #0x0                   	// #0
    142c:	mov	w7, w19
    1430:	mov	x3, x29
    1434:	mov	x4, #0x0                   	// #0
    1438:	mov	x2, x23
    143c:	mov	w1, w24
    1440:	mov	x0, x22
    1444:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
    1448:	mov	x2, x22
    144c:	mov	x1, x21
    1450:	mov	x0, x20
    1454:	bl	0 <_ZN6__lsan13lsan_memalignEmmRKN11__sanitizer10StackTraceE>
    1458:	ldp	x29, x30, [sp]
    145c:	ldp	x19, x20, [sp, #16]
    1460:	ldp	x21, x22, [sp, #32]
    1464:	ldp	x23, x24, [sp, #48]
    1468:	add	sp, sp, #0x860
    146c:	ret
    1470:	bl	0 <_ZN6__lsan20CurrentThreadContextEv>
    1474:	cbz	x0, 1424 <_ZnamSt11align_val_tRKSt9nothrow_t+0x90>
    1478:	ldp	x6, x5, [x0, #144]
    147c:	b	142c <_ZnamSt11align_val_tRKSt9nothrow_t+0x98>

0000000000001480 <_ZdlPv>:
    1480:	stp	x19, x30, [sp, #-16]!
    1484:	mov	x19, x0
    1488:	adrp	x0, 0 <lsan_init_is_running>
    148c:	ldr	x0, [x0]
    1490:	ldrb	w0, [x0]
    1494:	cbz	w0, 14b8 <_ZdlPv+0x38>
    1498:	adrp	x2, 0 <__interceptor_mallopt>
    149c:	adrp	x0, 0 <__interceptor_mallopt>
    14a0:	add	x2, x2, #0x0
    14a4:	add	x0, x0, #0x0
    14a8:	mov	x4, #0x0                   	// #0
    14ac:	mov	x3, #0x0                   	// #0
    14b0:	mov	w1, #0xf5                  	// #245
    14b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    14b8:	adrp	x0, 0 <lsan_inited>
    14bc:	ldr	x0, [x0]
    14c0:	ldrb	w0, [x0]
    14c4:	cbnz	w0, 14cc <_ZdlPv+0x4c>
    14c8:	bl	0 <__lsan_init>
    14cc:	mov	x0, x19
    14d0:	ldp	x19, x30, [sp], #16
    14d4:	b	0 <_ZN6__lsan9lsan_freeEPv>

00000000000014d8 <_ZdaPv>:
    14d8:	stp	x19, x30, [sp, #-16]!
    14dc:	mov	x19, x0
    14e0:	adrp	x0, 0 <lsan_init_is_running>
    14e4:	ldr	x0, [x0]
    14e8:	ldrb	w0, [x0]
    14ec:	cbz	w0, 1510 <_ZdaPv+0x38>
    14f0:	adrp	x2, 0 <__interceptor_mallopt>
    14f4:	adrp	x0, 0 <__interceptor_mallopt>
    14f8:	add	x2, x2, #0x0
    14fc:	add	x0, x0, #0x0
    1500:	mov	x4, #0x0                   	// #0
    1504:	mov	x3, #0x0                   	// #0
    1508:	mov	w1, #0xf7                  	// #247
    150c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1510:	adrp	x0, 0 <lsan_inited>
    1514:	ldr	x0, [x0]
    1518:	ldrb	w0, [x0]
    151c:	cbnz	w0, 1524 <_ZdaPv+0x4c>
    1520:	bl	0 <__lsan_init>
    1524:	mov	x0, x19
    1528:	ldp	x19, x30, [sp], #16
    152c:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001530 <_ZdlPvRKSt9nothrow_t>:
    1530:	stp	x19, x30, [sp, #-16]!
    1534:	mov	x19, x0
    1538:	adrp	x0, 0 <lsan_init_is_running>
    153c:	ldr	x0, [x0]
    1540:	ldrb	w0, [x0]
    1544:	cbz	w0, 1568 <_ZdlPvRKSt9nothrow_t+0x38>
    1548:	adrp	x2, 0 <__interceptor_mallopt>
    154c:	adrp	x0, 0 <__interceptor_mallopt>
    1550:	add	x2, x2, #0x0
    1554:	add	x0, x0, #0x0
    1558:	mov	x4, #0x0                   	// #0
    155c:	mov	x3, #0x0                   	// #0
    1560:	mov	w1, #0xf9                  	// #249
    1564:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1568:	adrp	x0, 0 <lsan_inited>
    156c:	ldr	x0, [x0]
    1570:	ldrb	w0, [x0]
    1574:	cbnz	w0, 157c <_ZdlPvRKSt9nothrow_t+0x4c>
    1578:	bl	0 <__lsan_init>
    157c:	mov	x0, x19
    1580:	ldp	x19, x30, [sp], #16
    1584:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001588 <_ZdaPvRKSt9nothrow_t>:
    1588:	stp	x19, x30, [sp, #-16]!
    158c:	mov	x19, x0
    1590:	adrp	x0, 0 <lsan_init_is_running>
    1594:	ldr	x0, [x0]
    1598:	ldrb	w0, [x0]
    159c:	cbz	w0, 15c0 <_ZdaPvRKSt9nothrow_t+0x38>
    15a0:	adrp	x2, 0 <__interceptor_mallopt>
    15a4:	adrp	x0, 0 <__interceptor_mallopt>
    15a8:	add	x2, x2, #0x0
    15ac:	add	x0, x0, #0x0
    15b0:	mov	x4, #0x0                   	// #0
    15b4:	mov	x3, #0x0                   	// #0
    15b8:	mov	w1, #0xfc                  	// #252
    15bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15c0:	adrp	x0, 0 <lsan_inited>
    15c4:	ldr	x0, [x0]
    15c8:	ldrb	w0, [x0]
    15cc:	cbnz	w0, 15d4 <_ZdaPvRKSt9nothrow_t+0x4c>
    15d0:	bl	0 <__lsan_init>
    15d4:	mov	x0, x19
    15d8:	ldp	x19, x30, [sp], #16
    15dc:	b	0 <_ZN6__lsan9lsan_freeEPv>

00000000000015e0 <_ZdlPvm>:
    15e0:	stp	x19, x30, [sp, #-16]!
    15e4:	mov	x19, x0
    15e8:	adrp	x0, 0 <lsan_init_is_running>
    15ec:	ldr	x0, [x0]
    15f0:	ldrb	w0, [x0]
    15f4:	cbz	w0, 1618 <_ZdlPvm+0x38>
    15f8:	adrp	x2, 0 <__interceptor_mallopt>
    15fc:	adrp	x0, 0 <__interceptor_mallopt>
    1600:	add	x2, x2, #0x0
    1604:	add	x0, x0, #0x0
    1608:	mov	x4, #0x0                   	// #0
    160c:	mov	x3, #0x0                   	// #0
    1610:	mov	w1, #0xff                  	// #255
    1614:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1618:	adrp	x0, 0 <lsan_inited>
    161c:	ldr	x0, [x0]
    1620:	ldrb	w0, [x0]
    1624:	cbnz	w0, 162c <_ZdlPvm+0x4c>
    1628:	bl	0 <__lsan_init>
    162c:	mov	x0, x19
    1630:	ldp	x19, x30, [sp], #16
    1634:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001638 <_ZdaPvm>:
    1638:	stp	x19, x30, [sp, #-16]!
    163c:	mov	x19, x0
    1640:	adrp	x0, 0 <lsan_init_is_running>
    1644:	ldr	x0, [x0]
    1648:	ldrb	w0, [x0]
    164c:	cbz	w0, 1670 <_ZdaPvm+0x38>
    1650:	adrp	x2, 0 <__interceptor_mallopt>
    1654:	adrp	x0, 0 <__interceptor_mallopt>
    1658:	add	x2, x2, #0x0
    165c:	add	x0, x0, #0x0
    1660:	mov	x4, #0x0                   	// #0
    1664:	mov	x3, #0x0                   	// #0
    1668:	mov	w1, #0x102                 	// #258
    166c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1670:	adrp	x0, 0 <lsan_inited>
    1674:	ldr	x0, [x0]
    1678:	ldrb	w0, [x0]
    167c:	cbnz	w0, 1684 <_ZdaPvm+0x4c>
    1680:	bl	0 <__lsan_init>
    1684:	mov	x0, x19
    1688:	ldp	x19, x30, [sp], #16
    168c:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001690 <_ZdlPvSt11align_val_t>:
    1690:	stp	x19, x30, [sp, #-16]!
    1694:	mov	x19, x0
    1698:	adrp	x0, 0 <lsan_init_is_running>
    169c:	ldr	x0, [x0]
    16a0:	ldrb	w0, [x0]
    16a4:	cbz	w0, 16c8 <_ZdlPvSt11align_val_t+0x38>
    16a8:	adrp	x2, 0 <__interceptor_mallopt>
    16ac:	adrp	x0, 0 <__interceptor_mallopt>
    16b0:	add	x2, x2, #0x0
    16b4:	add	x0, x0, #0x0
    16b8:	mov	x4, #0x0                   	// #0
    16bc:	mov	x3, #0x0                   	// #0
    16c0:	mov	w1, #0x105                 	// #261
    16c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    16c8:	adrp	x0, 0 <lsan_inited>
    16cc:	ldr	x0, [x0]
    16d0:	ldrb	w0, [x0]
    16d4:	cbnz	w0, 16dc <_ZdlPvSt11align_val_t+0x4c>
    16d8:	bl	0 <__lsan_init>
    16dc:	mov	x0, x19
    16e0:	ldp	x19, x30, [sp], #16
    16e4:	b	0 <_ZN6__lsan9lsan_freeEPv>

00000000000016e8 <_ZdaPvSt11align_val_t>:
    16e8:	stp	x19, x30, [sp, #-16]!
    16ec:	mov	x19, x0
    16f0:	adrp	x0, 0 <lsan_init_is_running>
    16f4:	ldr	x0, [x0]
    16f8:	ldrb	w0, [x0]
    16fc:	cbz	w0, 1720 <_ZdaPvSt11align_val_t+0x38>
    1700:	adrp	x2, 0 <__interceptor_mallopt>
    1704:	adrp	x0, 0 <__interceptor_mallopt>
    1708:	add	x2, x2, #0x0
    170c:	add	x0, x0, #0x0
    1710:	mov	x4, #0x0                   	// #0
    1714:	mov	x3, #0x0                   	// #0
    1718:	mov	w1, #0x108                 	// #264
    171c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1720:	adrp	x0, 0 <lsan_inited>
    1724:	ldr	x0, [x0]
    1728:	ldrb	w0, [x0]
    172c:	cbnz	w0, 1734 <_ZdaPvSt11align_val_t+0x4c>
    1730:	bl	0 <__lsan_init>
    1734:	mov	x0, x19
    1738:	ldp	x19, x30, [sp], #16
    173c:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001740 <_ZdlPvSt11align_val_tRKSt9nothrow_t>:
    1740:	stp	x19, x30, [sp, #-16]!
    1744:	mov	x19, x0
    1748:	adrp	x0, 0 <lsan_init_is_running>
    174c:	ldr	x0, [x0]
    1750:	ldrb	w0, [x0]
    1754:	cbz	w0, 1778 <_ZdlPvSt11align_val_tRKSt9nothrow_t+0x38>
    1758:	adrp	x2, 0 <__interceptor_mallopt>
    175c:	adrp	x0, 0 <__interceptor_mallopt>
    1760:	add	x2, x2, #0x0
    1764:	add	x0, x0, #0x0
    1768:	mov	x4, #0x0                   	// #0
    176c:	mov	x3, #0x0                   	// #0
    1770:	mov	w1, #0x10b                 	// #267
    1774:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1778:	adrp	x0, 0 <lsan_inited>
    177c:	ldr	x0, [x0]
    1780:	ldrb	w0, [x0]
    1784:	cbnz	w0, 178c <_ZdlPvSt11align_val_tRKSt9nothrow_t+0x4c>
    1788:	bl	0 <__lsan_init>
    178c:	mov	x0, x19
    1790:	ldp	x19, x30, [sp], #16
    1794:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001798 <_ZdaPvSt11align_val_tRKSt9nothrow_t>:
    1798:	stp	x19, x30, [sp, #-16]!
    179c:	mov	x19, x0
    17a0:	adrp	x0, 0 <lsan_init_is_running>
    17a4:	ldr	x0, [x0]
    17a8:	ldrb	w0, [x0]
    17ac:	cbz	w0, 17d0 <_ZdaPvSt11align_val_tRKSt9nothrow_t+0x38>
    17b0:	adrp	x2, 0 <__interceptor_mallopt>
    17b4:	adrp	x0, 0 <__interceptor_mallopt>
    17b8:	add	x2, x2, #0x0
    17bc:	add	x0, x0, #0x0
    17c0:	mov	x4, #0x0                   	// #0
    17c4:	mov	x3, #0x0                   	// #0
    17c8:	mov	w1, #0x10e                 	// #270
    17cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    17d0:	adrp	x0, 0 <lsan_inited>
    17d4:	ldr	x0, [x0]
    17d8:	ldrb	w0, [x0]
    17dc:	cbnz	w0, 17e4 <_ZdaPvSt11align_val_tRKSt9nothrow_t+0x4c>
    17e0:	bl	0 <__lsan_init>
    17e4:	mov	x0, x19
    17e8:	ldp	x19, x30, [sp], #16
    17ec:	b	0 <_ZN6__lsan9lsan_freeEPv>

00000000000017f0 <_ZdlPvmSt11align_val_t>:
    17f0:	stp	x19, x30, [sp, #-16]!
    17f4:	mov	x19, x0
    17f8:	adrp	x0, 0 <lsan_init_is_running>
    17fc:	ldr	x0, [x0]
    1800:	ldrb	w0, [x0]
    1804:	cbz	w0, 1828 <_ZdlPvmSt11align_val_t+0x38>
    1808:	adrp	x2, 0 <__interceptor_mallopt>
    180c:	adrp	x0, 0 <__interceptor_mallopt>
    1810:	add	x2, x2, #0x0
    1814:	add	x0, x0, #0x0
    1818:	mov	x4, #0x0                   	// #0
    181c:	mov	x3, #0x0                   	// #0
    1820:	mov	w1, #0x111                 	// #273
    1824:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1828:	adrp	x0, 0 <lsan_inited>
    182c:	ldr	x0, [x0]
    1830:	ldrb	w0, [x0]
    1834:	cbnz	w0, 183c <_ZdlPvmSt11align_val_t+0x4c>
    1838:	bl	0 <__lsan_init>
    183c:	mov	x0, x19
    1840:	ldp	x19, x30, [sp], #16
    1844:	b	0 <_ZN6__lsan9lsan_freeEPv>

0000000000001848 <_ZdaPvmSt11align_val_t>:
    1848:	stp	x19, x30, [sp, #-16]!
    184c:	mov	x19, x0
    1850:	adrp	x0, 0 <lsan_init_is_running>
    1854:	ldr	x0, [x0]
    1858:	ldrb	w0, [x0]
    185c:	cbz	w0, 1880 <_ZdaPvmSt11align_val_t+0x38>
    1860:	adrp	x2, 0 <__interceptor_mallopt>
    1864:	adrp	x0, 0 <__interceptor_mallopt>
    1868:	add	x2, x2, #0x0
    186c:	add	x0, x0, #0x0
    1870:	mov	x4, #0x0                   	// #0
    1874:	mov	x3, #0x0                   	// #0
    1878:	mov	w1, #0x114                 	// #276
    187c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1880:	adrp	x0, 0 <lsan_inited>
    1884:	ldr	x0, [x0]
    1888:	ldrb	w0, [x0]
    188c:	cbnz	w0, 1894 <_ZdaPvmSt11align_val_t+0x4c>
    1890:	bl	0 <__lsan_init>
    1894:	mov	x0, x19
    1898:	ldp	x19, x30, [sp], #16
    189c:	b	0 <_ZN6__lsan9lsan_freeEPv>

00000000000018a0 <_ZN11__sanitizer14real_sigactionEiPKvPv>:
    18a0:	adrp	x3, 0 <__interceptor_mallopt>
    18a4:	ldr	x3, [x3]
    18a8:	mov	x16, x3
    18ac:	br	x16

00000000000018b0 <_ZN6__lsan22InitializeInterceptorsEv>:
    18b0:	stp	x19, x30, [sp, #-16]!
    18b4:	adrp	x19, 0 <__interceptor_mallopt>
    18b8:	add	x19, x19, #0x0
    18bc:	ldrb	w0, [x19, #52]
    18c0:	cbz	w0, 18e4 <_ZN6__lsan22InitializeInterceptorsEv+0x34>
    18c4:	adrp	x2, 0 <__interceptor_mallopt>
    18c8:	adrp	x0, 0 <__interceptor_mallopt>
    18cc:	add	x2, x2, #0x0
    18d0:	add	x0, x0, #0x0
    18d4:	mov	x4, #0x0                   	// #0
    18d8:	mov	x3, #0x0                   	// #0
    18dc:	mov	w1, #0x4f                  	// #79
    18e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    18e4:	adrp	x3, 90c <__interceptor_signal>
    18e8:	adrp	x2, 90c <__interceptor_signal>
    18ec:	mov	w0, #0x1                   	// #1
    18f0:	add	x1, x19, #0x10
    18f4:	ldr	x3, [x3]
    18f8:	strb	w0, [x19, #52]
    18fc:	ldr	x2, [x2]
    1900:	adrp	x0, 0 <__interceptor_mallopt>
    1904:	add	x0, x0, #0x0
    1908:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    190c:	adrp	x3, 958 <__interceptor_sigaction>
    1910:	adrp	x2, 958 <__interceptor_sigaction>
    1914:	add	x1, x19, #0x18
    1918:	adrp	x0, 0 <__interceptor_mallopt>
    191c:	ldr	x3, [x3]
    1920:	add	x0, x0, #0x0
    1924:	ldr	x2, [x2]
    1928:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    192c:	adrp	x3, 8 <__interceptor_malloc>
    1930:	adrp	x2, 8 <__interceptor_malloc>
    1934:	add	x1, x19, #0x38
    1938:	adrp	x0, 0 <__interceptor_mallopt>
    193c:	ldr	x3, [x3]
    1940:	add	x0, x0, #0x0
    1944:	ldr	x2, [x2]
    1948:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    194c:	adrp	x3, ec <__interceptor_cfree>
    1950:	adrp	x2, ec <__interceptor_cfree>
    1954:	add	x1, x19, #0x40
    1958:	adrp	x0, 0 <__interceptor_mallopt>
    195c:	ldr	x3, [x3]
    1960:	add	x0, x0, #0x0
    1964:	ldr	x2, [x2]
    1968:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    196c:	adrp	x3, ec <__interceptor_cfree>
    1970:	adrp	x2, ec <__interceptor_cfree>
    1974:	add	x1, x19, #0x48
    1978:	adrp	x0, 0 <__interceptor_mallopt>
    197c:	ldr	x3, [x3]
    1980:	add	x0, x0, #0x0
    1984:	ldr	x2, [x2]
    1988:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    198c:	adrp	x3, a68 <__interceptor_calloc>
    1990:	adrp	x2, a68 <__interceptor_calloc>
    1994:	add	x1, x19, #0x50
    1998:	adrp	x0, 0 <__interceptor_mallopt>
    199c:	ldr	x3, [x3]
    19a0:	add	x0, x0, #0x0
    19a4:	ldr	x2, [x2]
    19a8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    19ac:	adrp	x3, 144 <__interceptor_realloc>
    19b0:	adrp	x2, 144 <__interceptor_realloc>
    19b4:	add	x1, x19, #0x58
    19b8:	adrp	x0, 0 <__interceptor_mallopt>
    19bc:	ldr	x3, [x3]
    19c0:	add	x0, x0, #0x0
    19c4:	ldr	x2, [x2]
    19c8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    19cc:	adrp	x3, 410 <__interceptor_memalign>
    19d0:	adrp	x2, 410 <__interceptor_memalign>
    19d4:	add	x1, x19, #0x60
    19d8:	adrp	x0, 0 <__interceptor_mallopt>
    19dc:	ldr	x3, [x3]
    19e0:	add	x0, x0, #0x0
    19e4:	ldr	x2, [x2]
    19e8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    19ec:	adrp	x3, 4fc <__interceptor___libc_memalign>
    19f0:	adrp	x2, 4fc <__interceptor___libc_memalign>
    19f4:	add	x1, x19, #0x68
    19f8:	adrp	x0, 0 <__interceptor_mallopt>
    19fc:	ldr	x3, [x3]
    1a00:	add	x0, x0, #0x0
    1a04:	ldr	x2, [x2]
    1a08:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1a0c:	adrp	x3, 5f8 <__interceptor_aligned_alloc>
    1a10:	adrp	x2, 5f8 <__interceptor_aligned_alloc>
    1a14:	add	x1, x19, #0x70
    1a18:	adrp	x0, 0 <__interceptor_mallopt>
    1a1c:	ldr	x3, [x3]
    1a20:	add	x0, x0, #0x0
    1a24:	ldr	x2, [x2]
    1a28:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1a2c:	adrp	x3, 230 <__interceptor_posix_memalign>
    1a30:	adrp	x2, 230 <__interceptor_posix_memalign>
    1a34:	add	x1, x19, #0x78
    1a38:	adrp	x0, 0 <__interceptor_mallopt>
    1a3c:	ldr	x3, [x3]
    1a40:	add	x0, x0, #0x0
    1a44:	ldr	x2, [x2]
    1a48:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1a4c:	adrp	x3, 32c <__interceptor_valloc>
    1a50:	adrp	x2, 32c <__interceptor_valloc>
    1a54:	add	x1, x19, #0x80
    1a58:	adrp	x0, 0 <__interceptor_mallopt>
    1a5c:	ldr	x3, [x3]
    1a60:	add	x0, x0, #0x0
    1a64:	ldr	x2, [x2]
    1a68:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1a6c:	adrp	x3, 758 <__interceptor_pvalloc>
    1a70:	adrp	x2, 758 <__interceptor_pvalloc>
    1a74:	add	x1, x19, #0x88
    1a78:	adrp	x0, 0 <__interceptor_mallopt>
    1a7c:	ldr	x3, [x3]
    1a80:	add	x0, x0, #0x0
    1a84:	ldr	x2, [x2]
    1a88:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1a8c:	adrp	x3, 6e4 <__interceptor_malloc_usable_size>
    1a90:	adrp	x2, 6e4 <__interceptor_malloc_usable_size>
    1a94:	add	x1, x19, #0x90
    1a98:	adrp	x0, 0 <__interceptor_mallopt>
    1a9c:	ldr	x3, [x3]
    1aa0:	add	x0, x0, #0x0
    1aa4:	ldr	x2, [x2]
    1aa8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1aac:	adrp	x3, 73c <__interceptor_mallinfo>
    1ab0:	adrp	x2, 73c <__interceptor_mallinfo>
    1ab4:	add	x1, x19, #0x98
    1ab8:	adrp	x0, 0 <__interceptor_mallopt>
    1abc:	ldr	x3, [x3]
    1ac0:	add	x0, x0, #0x0
    1ac4:	ldr	x2, [x2]
    1ac8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1acc:	adrp	x3, 0 <__interceptor_mallopt>
    1ad0:	adrp	x2, 0 <__interceptor_mallopt>
    1ad4:	add	x1, x19, #0xa0
    1ad8:	adrp	x0, 0 <__interceptor_mallopt>
    1adc:	ldr	x3, [x3]
    1ae0:	add	x0, x0, #0x0
    1ae4:	ldr	x2, [x2]
    1ae8:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1aec:	adrp	x3, ad8 <__interceptor_pthread_create>
    1af0:	adrp	x2, ad8 <__interceptor_pthread_create>
    1af4:	add	x1, x19, #0x28
    1af8:	adrp	x0, 0 <__interceptor_mallopt>
    1afc:	ldr	x3, [x3]
    1b00:	add	x0, x0, #0x0
    1b04:	ldr	x2, [x2]
    1b08:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b0c:	adrp	x3, 83c <__interceptor_pthread_join>
    1b10:	adrp	x2, 83c <__interceptor_pthread_join>
    1b14:	mov	x1, x19
    1b18:	adrp	x0, 0 <__interceptor_mallopt>
    1b1c:	ldr	x3, [x3]
    1b20:	add	x0, x0, #0x0
    1b24:	ldr	x2, [x2]
    1b28:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b2c:	adrp	x3, 8d0 <__interceptor__exit>
    1b30:	adrp	x2, 8d0 <__interceptor__exit>
    1b34:	add	x1, x19, #0x8
    1b38:	adrp	x0, 0 <__interceptor_mallopt>
    1b3c:	ldr	x3, [x3]
    1b40:	add	x0, x0, #0x0
    1b44:	ldr	x2, [x2]
    1b48:	bl	0 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>
    1b4c:	adrp	x1, 0 <__interceptor_mallopt>
    1b50:	add	x0, x19, #0x30
    1b54:	add	x1, x1, #0x0
    1b58:	bl	0 <pthread_key_create>
    1b5c:	cbz	w0, 1b70 <_ZN6__lsan22InitializeInterceptorsEv+0x2c0>
    1b60:	adrp	x0, 0 <__interceptor_mallopt>
    1b64:	add	x0, x0, #0x0
    1b68:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1b6c:	bl	0 <_ZN11__sanitizer3DieEv>
    1b70:	ldp	x19, x30, [sp], #16
    1b74:	ret

lsan_thread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN6__lsan13ThreadContext9OnStartedEPv>:
   0:	ldr	x2, [x1]
   4:	str	x2, [x0, #144]
   8:	ldr	x2, [x1, #8]
   c:	str	x2, [x0, #152]
  10:	ldr	x2, [x1, #32]
  14:	str	x2, [x0, #176]
  18:	ldr	x2, [x1, #40]
  1c:	str	x2, [x0, #184]
  20:	ldr	x2, [x1, #16]
  24:	str	x2, [x0, #160]
  28:	ldr	x2, [x1, #24]
  2c:	ldr	x1, [x1, #48]
  30:	str	x2, [x0, #168]
  34:	str	x1, [x0, #192]
  38:	ret

000000000000003c <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv>:
  3c:	ldr	x2, [x0, #40]
  40:	cmp	x1, x2
  44:	b.ne	58 <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv+0x1c>  // b.any
  48:	ldr	w0, [x0, #112]
  4c:	cmp	w0, #0x0
  50:	cset	w0, ne  // ne = any
  54:	ret
  58:	mov	w0, #0x0                   	// #0
  5c:	b	54 <_ZN6__lsanL15FindThreadByUidEPN11__sanitizer17ThreadContextBaseEPv+0x18>

0000000000000060 <_ZN6__lsan13ThreadContext10OnFinishedEv>:
  60:	str	x30, [sp, #-16]!
  64:	bl	0 <_ZN6__lsan21AllocatorThreadFinishEv>
  68:	ldr	x30, [sp], #16
  6c:	b	0 <_ZN11__sanitizer12DTLS_DestroyEv>

0000000000000070 <_ZN6__lsan24InitializeThreadRegistryEv>:
  70:	stp	x19, x30, [sp, #-16]!
  74:	adrp	x19, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  78:	add	x19, x19, #0x0
  7c:	mov	x0, x19
  80:	mov	w4, #0x0                   	// #0
  84:	mov	w3, #0x40                  	// #64
  88:	mov	w2, #0x2000                	// #8192
  8c:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  90:	add	x1, x1, #0x0
  94:	bl	0 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>
  98:	str	x19, [x19, #208]
  9c:	ldp	x19, x30, [sp], #16
  a0:	ret

00000000000000a4 <_ZN6__lsan13ThreadContextC1Ei>:
  a4:	stp	x19, x30, [sp, #-16]!
  a8:	mov	x19, x0
  ac:	bl	0 <_ZN11__sanitizer17ThreadContextBaseC2Ej>
  b0:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  b4:	add	x0, x0, #0x0
  b8:	str	x0, [x19]
  bc:	stp	xzr, xzr, [x19, #144]
  c0:	stp	xzr, xzr, [x19, #160]
  c4:	stp	xzr, xzr, [x19, #176]
  c8:	str	xzr, [x19, #192]
  cc:	ldp	x19, x30, [sp], #16
  d0:	ret

00000000000000d4 <_ZN6__lsanL19CreateThreadContextEj>:
  d4:	stp	x19, x20, [sp, #-32]!
  d8:	mov	w2, #0x0                   	// #0
  dc:	mov	w20, w0
  e0:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
  e4:	mov	x0, #0xc8                  	// #200
  e8:	add	x1, x1, #0x0
  ec:	str	x30, [sp, #16]
  f0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  f4:	mov	x19, x0
  f8:	mov	w1, w20
  fc:	bl	a4 <_ZN6__lsan13ThreadContextC1Ei>
 100:	mov	x0, x19
 104:	ldr	x30, [sp, #16]
 108:	ldp	x19, x20, [sp], #32
 10c:	ret

0000000000000110 <_ZN6__lsan12ThreadCreateEjmb>:
 110:	mov	w3, w0
 114:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 118:	mov	x4, #0x0                   	// #0
 11c:	ldr	x0, [x0]
 120:	b	0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>

0000000000000124 <_ZN6__lsan11ThreadStartEjyb>:
 124:	stp	x19, x20, [sp, #-128]!
 128:	cmp	w0, #0x0
 12c:	mov	w20, w0
 130:	add	x19, sp, #0x48
 134:	cset	w0, eq  // eq = none
 138:	add	x4, sp, #0x40
 13c:	add	x3, sp, #0x68
 140:	stp	x21, x22, [sp, #16]
 144:	mov	x21, x1
 148:	and	w22, w2, #0xff
 14c:	mov	x1, x19
 150:	add	x2, sp, #0x38
 154:	str	x30, [sp, #32]
 158:	stp	xzr, xzr, [sp, #56]
 15c:	bl	0 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>
 160:	ldr	x1, [sp, #56]
 164:	ldr	x0, [sp, #72]
 168:	add	x0, x0, x1
 16c:	str	x0, [sp, #80]
 170:	ldr	x1, [sp, #64]
 174:	ldr	x0, [sp, #104]
 178:	add	x0, x0, x1
 17c:	add	x1, x19, #0x18
 180:	str	x0, [sp, #112]
 184:	add	x0, x19, #0x10
 188:	bl	0 <_ZN6__lsan22GetAllocatorCacheRangeEPmS0_>
 18c:	bl	0 <_ZN11__sanitizer8DTLS_GetEv>
 190:	str	x0, [sp, #120]
 194:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 198:	mov	x4, x19
 19c:	mov	w3, w22
 1a0:	mov	x2, x21
 1a4:	ldr	x0, [x0]
 1a8:	mov	w1, w20
 1ac:	bl	0 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>
 1b0:	ldp	x21, x22, [sp, #16]
 1b4:	ldr	x30, [sp, #32]
 1b8:	ldp	x19, x20, [sp], #128
 1bc:	ret

00000000000001c0 <_ZN6__lsan12ThreadFinishEv>:
 1c0:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 1c4:	stp	x19, x30, [sp, #-16]!
 1c8:	ldr	x19, [x0]
 1cc:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 1d0:	mov	w1, w0
 1d4:	mov	x0, x19
 1d8:	bl	0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>
 1dc:	ldp	x19, x30, [sp], #16
 1e0:	mov	w0, #0xffffffff            	// #-1
 1e4:	b	0 <_ZN6__lsan16SetCurrentThreadEj>

00000000000001e8 <_ZN6__lsan20CurrentThreadContextEv>:
 1e8:	stp	x19, x30, [sp, #-16]!
 1ec:	adrp	x19, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 1f0:	add	x19, x19, #0x0
 1f4:	ldr	x0, [x19, #208]
 1f8:	cbnz	x0, 208 <_ZN6__lsan20CurrentThreadContextEv+0x20>
 1fc:	mov	x0, #0x0                   	// #0
 200:	ldp	x19, x30, [sp], #16
 204:	ret
 208:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 20c:	cmn	w0, #0x1
 210:	b.eq	1fc <_ZN6__lsan20CurrentThreadContextEv+0x14>  // b.none
 214:	ldr	x19, [x19, #208]
 218:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 21c:	ldr	x1, [x19, #152]
 220:	ldr	x0, [x1, w0, uxtw #3]
 224:	b	200 <_ZN6__lsan20CurrentThreadContextEv+0x18>

0000000000000228 <_ZN6__lsan9ThreadTidEm>:
 228:	mov	x2, x0
 22c:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 230:	adrp	x1, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 234:	add	x1, x1, #0x0
 238:	ldr	x0, [x0]
 23c:	b	0 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>

0000000000000240 <_ZN6__lsan10ThreadJoinEj>:
 240:	cmn	w0, #0x1
 244:	b.ne	26c <_ZN6__lsan10ThreadJoinEj+0x2c>  // b.any
 248:	str	x30, [sp, #-16]!
 24c:	mov	x4, #0xffffffff            	// #4294967295
 250:	adrp	x2, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 254:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 258:	mov	x3, x4
 25c:	add	x2, x2, #0x0
 260:	add	x0, x0, #0x0
 264:	mov	w1, #0x75                  	// #117
 268:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 26c:	mov	w1, w0
 270:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 274:	mov	x2, #0x0                   	// #0
 278:	ldr	x0, [x0]
 27c:	b	0 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>

0000000000000280 <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv>:
 280:	stp	x19, x30, [sp, #-16]!
 284:	bl	0 <_ZN6__lsan16GetCurrentThreadEv>
 288:	cbnz	w0, 29c <_ZN6__lsan27EnsureMainThreadIDIsCorrectEv+0x1c>
 28c:	bl	1e8 <_ZN6__lsan20CurrentThreadContextEv>
 290:	mov	x19, x0
 294:	bl	0 <_ZN11__sanitizer6GetTidEv>
 298:	str	x0, [x19, #32]
 29c:	ldp	x19, x30, [sp], #16
 2a0:	ret

00000000000002a4 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE>:
 2a4:	stp	x19, x20, [sp, #-64]!
 2a8:	mov	x20, x6
 2ac:	mov	x19, x7
 2b0:	stp	x25, x30, [sp, #48]
 2b4:	mov	x25, x1
 2b8:	mov	x1, x0
 2bc:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 2c0:	stp	x21, x22, [sp, #16]
 2c4:	mov	x22, x4
 2c8:	ldr	x0, [x0]
 2cc:	mov	x21, x5
 2d0:	stp	x23, x24, [sp, #32]
 2d4:	mov	x24, x2
 2d8:	mov	x23, x3
 2dc:	bl	0 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>
 2e0:	cbz	x0, 334 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE+0x90>
 2e4:	ldr	x1, [x0, #144]
 2e8:	str	x1, [x25]
 2ec:	ldr	x1, [x0, #152]
 2f0:	str	x1, [x24]
 2f4:	ldr	x1, [x0, #176]
 2f8:	str	x1, [x23]
 2fc:	ldr	x1, [x0, #184]
 300:	str	x1, [x22]
 304:	ldr	x1, [x0, #160]
 308:	str	x1, [x21]
 30c:	ldr	x1, [x0, #168]
 310:	ldr	x0, [x0, #192]
 314:	str	x1, [x20]
 318:	str	x0, [x19]
 31c:	mov	w0, #0x1                   	// #1
 320:	ldp	x21, x22, [sp, #16]
 324:	ldp	x23, x24, [sp, #32]
 328:	ldp	x25, x30, [sp, #48]
 32c:	ldp	x19, x20, [sp], #64
 330:	ret
 334:	mov	w0, #0x0                   	// #0
 338:	b	320 <_ZN6__lsan21GetThreadRangesLockedEyPmS0_S0_S0_S0_S0_PPN11__sanitizer4DTLSE+0x7c>

000000000000033c <_ZN6__lsan22ForEachExtraStackRangeEyPFvmmPvES0_>:
 33c:	ret

0000000000000340 <_ZN6__lsan18LockThreadRegistryEv>:
 340:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 344:	ldr	x0, [x0]
 348:	add	x0, x0, #0x18
 34c:	b	0 <_ZN11__sanitizer13BlockingMutex4LockEv>

0000000000000350 <_ZN6__lsan20UnlockThreadRegistryEv>:
 350:	adrp	x0, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 354:	ldr	x0, [x0]
 358:	add	x0, x0, #0x18
 35c:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

0000000000000360 <_ZN6__lsan23GetThreadRegistryLockedEv>:
 360:	stp	x19, x30, [sp, #-16]!
 364:	adrp	x19, 0 <_ZN6__lsan13ThreadContext9OnStartedEPv>
 368:	add	x19, x19, #0x0
 36c:	ldr	x0, [x19, #208]
 370:	add	x0, x0, #0x18
 374:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 378:	ldr	x0, [x19, #208]
 37c:	ldp	x19, x30, [sp], #16
 380:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

sancov_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sancov_default_options>:
   0:	adrp	x0, 0 <__sancov_default_options>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <_ZN8__sancov11SancovFlags11SetDefaultsEv>:
   c:	mov	w1, #0x1                   	// #1
  10:	strh	w1, [x0]
  14:	ret

0000000000000018 <_ZN8__sancov21InitializeSancovFlagsEv>:
  18:	stp	x19, x20, [sp, #-80]!
  1c:	adrp	x20, 0 <__sancov_default_options>
  20:	add	x20, x20, #0x0
  24:	stp	x21, x22, [sp, #16]
  28:	adrp	x22, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  2c:	add	x19, sp, #0x30
  30:	mov	w0, #0x1                   	// #1
  34:	strh	w0, [x20]
  38:	mov	x0, x19
  3c:	str	x30, [sp, #32]
  40:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
  44:	adrp	x21, 0 <__sancov_default_options>
  48:	ldr	x22, [x22]
  4c:	mov	x1, #0x10                  	// #16
  50:	add	x21, x21, #0x0
  54:	mov	x0, x22
  58:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  5c:	adrp	x3, 0 <__sancov_default_options>
  60:	mov	x2, x0
  64:	add	x3, x3, #0x0
  68:	stp	x21, x20, [x0]
  6c:	adrp	x1, 0 <__sancov_default_options>
  70:	mov	x0, x19
  74:	add	x1, x1, #0x0
  78:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  7c:	mov	x1, #0x10                  	// #16
  80:	mov	x0, x22
  84:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  88:	mov	x2, x0
  8c:	str	x21, [x0]
  90:	add	x0, x20, #0x1
  94:	adrp	x3, 0 <__sancov_default_options>
  98:	adrp	x1, 0 <__sancov_default_options>
  9c:	add	x3, x3, #0x0
  a0:	add	x1, x1, #0x0
  a4:	str	x0, [x2, #8]
  a8:	mov	x0, x19
  ac:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  b0:	bl	0 <__sancov_default_options>
  b4:	mov	x1, x0
  b8:	mov	x0, x19
  bc:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  c0:	adrp	x0, 0 <__sancov_default_options>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  cc:	mov	x1, x0
  d0:	mov	x0, x19
  d4:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  d8:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  dc:	ldrb	w0, [x20, #1]
  e0:	cbz	w0, ec <_ZN8__sancov21InitializeSancovFlagsEv+0xd4>
  e4:	mov	x0, x19
  e8:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
  ec:	ldp	x21, x22, [sp, #16]
  f0:	ldr	x30, [sp, #32]
  f4:	ldp	x19, x20, [sp], #80
  f8:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
   c:	add	x1, x1, #0x0
  10:	ldr	x20, [x0, #8]
  14:	mov	x0, x19
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  24:	strb	wzr, [x20]
  28:	mov	w0, #0x1                   	// #1
  2c:	b	a8 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xa8>
  30:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  34:	mov	x0, x19
  38:	add	x1, x1, #0x0
  3c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  40:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  44:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  48:	mov	x0, x19
  4c:	add	x1, x1, #0x0
  50:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  54:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x24>
  58:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  5c:	mov	x0, x19
  60:	add	x1, x1, #0x0
  64:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  68:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  6c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  70:	mov	x0, x19
  74:	add	x1, x1, #0x0
  78:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  7c:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  80:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  84:	mov	x0, x19
  88:	add	x1, x1, #0x0
  8c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  90:	cbz	w0, b4 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0xb4>
  94:	mov	x1, x19
  98:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  a4:	mov	w0, #0x0                   	// #0
  a8:	ldr	x30, [sp, #16]
  ac:	ldp	x19, x20, [sp], #32
  b0:	ret
  b4:	mov	w0, #0x1                   	// #1
  b8:	strb	w0, [x20]
  bc:	b	28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>

sanitizer_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>:
   0:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
   4:	mov	w2, #0x1                   	// #1
   8:	str	x30, [sp, #-16]!
   c:	strb	w2, [x1]
  10:	mov	x2, x0
  14:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  18:	ldr	x0, [x0]
  1c:	ldr	x1, [x0]
  20:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000030 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>:
  30:	stp	x19, x30, [sp, #-16]!
  34:	mov	x19, x0
  38:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  3c:	sub	w2, w0, #0x2
  40:	mov	w1, #0x1                   	// #1
  44:	lsl	w1, w1, w2
  48:	sub	w1, w1, #0x1
  4c:	tst	x1, x19
  50:	lsr	x19, x19, x2
  54:	and	x19, x19, #0x3
  58:	cinc	x19, x19, ne  // ne = any
  5c:	add	x0, x19, x0, lsl #2
  60:	sub	x0, x0, #0x10
  64:	ldp	x19, x30, [sp], #16
  68:	ret

000000000000006c <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>:
  6c:	stp	x19, x20, [sp, #-32]!
  70:	mov	x19, x0
  74:	mov	x0, x1
  78:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  7c:	stp	x21, x30, [sp, #16]
  80:	ldr	x1, [x1]
  84:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  88:	mov	x20, x0
  8c:	ldp	x0, x1, [x19]
  90:	sub	x0, x0, x1
  94:	cmp	x0, x20
  98:	b.ge	dc <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x70>  // b.tcont
  9c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  a0:	cmp	x0, x20
  a4:	csel	x21, x0, x20, cs  // cs = hs, nlast
  a8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  ac:	add	x1, x1, #0x0
  b0:	mov	w2, #0x0                   	// #0
  b4:	mov	x0, x21
  b8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  bc:	add	x1, x0, x21
  c0:	str	x1, [x19]
  c4:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  c8:	str	x0, [x19, #8]
  cc:	ldr	x2, [x1]
  d0:	cbz	x2, dc <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x70>
  d4:	mov	x1, x21
  d8:	blr	x2
  dc:	ldp	x1, x0, [x19]
  e0:	sub	x1, x1, x0
  e4:	cmp	x20, x1
  e8:	b.le	10c <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xa0>
  ec:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  f0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  f4:	add	x2, x2, #0x0
  f8:	add	x0, x0, #0x0
  fc:	mov	x4, #0x0                   	// #0
 100:	mov	x3, #0x0                   	// #0
 104:	mov	w1, #0xd4                  	// #212
 108:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 10c:	add	x20, x0, x20
 110:	ldp	x21, x30, [sp, #16]
 114:	str	x20, [x19, #8]
 118:	ldp	x19, x20, [sp], #32
 11c:	ret

0000000000000120 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm>:
 120:	sub	x1, x0, #0x1
 124:	tst	x1, x0
 128:	b.eq	150 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm+0x30>  // b.none
 12c:	str	x30, [sp, #-16]!
 130:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 134:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 138:	add	x2, x2, #0x0
 13c:	add	x0, x0, #0x0
 140:	mov	x4, #0x0                   	// #0
 144:	mov	x3, #0x0                   	// #0
 148:	mov	w1, #0xdb                  	// #219
 14c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 150:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 154:	ldr	x1, [x2]
 158:	cmp	x1, x0
 15c:	csel	x0, x1, x0, cs  // cs = hs, nlast
 160:	str	x0, [x2]
 164:	ret

0000000000000168 <_ZN11__sanitizer27SetLowLevelAllocateCallbackEPFvmmE>:
 168:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 16c:	str	x0, [x1]
 170:	ret

0000000000000174 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>:
 174:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 178:	ldrb	w0, [x0]
 17c:	tst	w0, #0xff
 180:	cset	w0, ne  // ne = any
 184:	ret

0000000000000188 <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>:
 188:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 18c:	mov	w1, #0x1                   	// #1
 190:	strb	w1, [x0]
 194:	ret

0000000000000198 <_ZN11__sanitizer22AllocatorMayReturnNullEv>:
 198:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 19c:	add	x0, x0, #0x0
 1a0:	ldrb	w0, [x0, #16]
 1a4:	tst	w0, #0xff
 1a8:	cset	w0, ne  // ne = any
 1ac:	ret

00000000000001b0 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>:
 1b0:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1b4:	add	x1, x1, #0x0
 1b8:	and	w0, w0, #0xff
 1bc:	strb	w0, [x1, #16]
 1c0:	ret

00000000000001c4 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>:
 1c4:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1c8:	add	x0, x0, #0x0
 1cc:	b	0 <_ZN11__sanitizer6ReportEPKcz>

00000000000001d0 <_ZN11__sanitizer18internal_allocatorEv>:
 1d0:	stp	x19, x20, [sp, #-64]!
 1d4:	stp	x21, x22, [sp, #16]
 1d8:	str	x30, [sp, #32]
 1dc:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1e0:	add	x20, x20, #0x0
 1e4:	ldrb	w0, [x20, #17]
 1e8:	dmb	ish
 1ec:	and	w0, w0, #0xff
 1f0:	adrp	x22, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1f4:	cbnz	w0, 2a4 <_ZN11__sanitizer18internal_allocatorEv+0xd4>
 1f8:	add	x0, x20, #0x12
 1fc:	str	x0, [sp, #56]
 200:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 204:	ldrb	w0, [x20, #17]
 208:	tst	w0, #0xff
 20c:	b.ne	29c <_ZN11__sanitizer18internal_allocatorEv+0xcc>  // b.any
 210:	add	x19, x22, #0x0
 214:	mov	x2, #0x80000               	// #524288
 218:	add	x21, x19, #0x80, lsl #12
 21c:	mov	x0, x19
 220:	mov	w1, #0x0                   	// #0
 224:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 228:	mov	x2, #0xd80                 	// #3456
 22c:	mov	w1, #0x0                   	// #0
 230:	strb	wzr, [x21]
 234:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 238:	add	x0, x0, #0x0
 23c:	add	x19, x19, #0xc0, lsl #12
 240:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 244:	mov	x2, #0x248                 	// #584
 248:	mov	w1, #0x0                   	// #0
 24c:	movk	x2, #0x4, lsl #16
 250:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 254:	add	x0, x0, #0x0
 258:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 25c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 260:	str	x0, [x21, #3520]
 264:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 268:	add	x0, x0, #0x0
 26c:	str	x0, [x21, #3528]
 270:	mov	x2, #0x28                  	// #40
 274:	mov	w1, #0x0                   	// #0
 278:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 27c:	add	x0, x21, #0x0
 280:	add	x21, x21, #0x0
 284:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 288:	str	x21, [x19, #4104]
 28c:	str	x21, [x19, #4112]
 290:	dmb	ish
 294:	mov	w0, #0x1                   	// #1
 298:	strb	w0, [x20, #17]
 29c:	add	x0, sp, #0x38
 2a0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2a4:	add	x0, x22, #0x0
 2a8:	ldp	x21, x22, [sp, #16]
 2ac:	ldr	x30, [sp, #32]
 2b0:	ldp	x19, x20, [sp], #64
 2b4:	ret

00000000000002b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE9InitCacheEPNS4_8PerClassE.isra.0.part.0>:
 2b8:	stp	x19, x20, [sp, #-64]!
 2bc:	mov	x19, x0
 2c0:	mov	x20, #0x1                   	// #1
 2c4:	mov	x0, #0x200                 	// #512
 2c8:	add	x19, x19, #0x408
 2cc:	stp	x21, x22, [sp, #16]
 2d0:	mov	x22, #0x3e                  	// #62
 2d4:	stp	x23, x24, [sp, #32]
 2d8:	mov	w23, #0x4000                	// #16384
 2dc:	mov	x24, #0x40                  	// #64
 2e0:	stp	x25, x30, [sp, #48]
 2e4:	bl	30 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE7ClassIDEm.part.0>
 2e8:	mov	x25, x20
 2ec:	mov	x21, x0
 2f0:	cmp	x20, #0x35
 2f4:	b.eq	30c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE9InitCacheEPNS4_8PerClassE.isra.0.part.0+0x54>  // b.none
 2f8:	mov	x0, x20
 2fc:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 300:	cbnz	x0, 310 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE9InitCacheEPNS4_8PerClassE.isra.0.part.0+0x58>
 304:	mov	x2, #0x0                   	// #0
 308:	b	328 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE9InitCacheEPNS4_8PerClassE.isra.0.part.0+0x70>
 30c:	mov	x0, #0x200                 	// #512
 310:	udiv	w1, w23, w0
 314:	mov	x2, x0
 318:	cmp	x1, #0x40
 31c:	csel	x1, x1, x24, ls  // ls = plast
 320:	cmp	x1, #0x0
 324:	csel	x0, x1, x25, ne  // ne = any
 328:	cmp	x0, #0x3e
 32c:	add	x20, x20, #0x1
 330:	csel	x1, x0, x22, ls  // ls = plast
 334:	lsl	x0, x1, #1
 338:	add	x1, x1, #0x2
 33c:	stp	x0, x2, [x19]
 340:	cmp	x2, x1, lsl #3
 344:	csel	x0, x21, xzr, cc  // cc = lo, ul, last
 348:	str	x0, [x19, #16]
 34c:	cmp	x20, #0x36
 350:	add	x19, x19, #0x400
 354:	b.ne	2f0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE9InitCacheEPNS4_8PerClassE.isra.0.part.0+0x38>  // b.any
 358:	ldp	x21, x22, [sp, #16]
 35c:	ldp	x23, x24, [sp, #32]
 360:	ldp	x25, x30, [sp, #48]
 364:	ldp	x19, x20, [sp], #64
 368:	ret

000000000000036c <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>:
 36c:	cmn	x0, #0x9
 370:	b.hi	418 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xac>  // b.pmore
 374:	stp	x19, x20, [sp, #-48]!
 378:	cmp	x2, #0x0
 37c:	add	x20, x0, #0x8
 380:	stp	x21, x30, [sp, #16]
 384:	mov	x0, #0x8                   	// #8
 388:	mov	x21, x1
 38c:	csel	x19, x2, x0, ne  // ne = any
 390:	cbnz	x1, 3d8 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x6c>
 394:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 398:	add	x0, x0, #0x0
 39c:	add	x0, x0, #0x13
 3a0:	str	x0, [sp, #40]
 3a4:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3a8:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 3ac:	mov	x3, x19
 3b0:	mov	x2, x20
 3b4:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3b8:	add	x1, x1, #0x0
 3bc:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3c0:	mov	x19, x0
 3c4:	add	x0, sp, #0x28
 3c8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3cc:	cbnz	x19, 3f4 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x88>
 3d0:	mov	x0, x20
 3d4:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3d8:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 3dc:	mov	x3, x19
 3e0:	mov	x2, x20
 3e4:	mov	x1, x21
 3e8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3ec:	mov	x19, x0
 3f0:	b	3cc <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x60>
 3f4:	mov	x0, x19
 3f8:	mov	x1, #0xc041                	// #49217
 3fc:	movk	x1, #0xbceb, lsl #16
 400:	movk	x1, #0xb03a, lsl #32
 404:	movk	x1, #0x6a6c, lsl #48
 408:	str	x1, [x0], #8
 40c:	ldp	x21, x30, [sp, #16]
 410:	ldp	x19, x20, [sp], #48
 414:	ret
 418:	mov	x0, #0x0                   	// #0
 41c:	ret

0000000000000420 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 420:	stp	x19, x20, [sp, #-32]!
 424:	mov	x3, x1
 428:	mov	x1, x2
 42c:	str	x30, [sp, #16]
 430:	cbz	x0, 45c <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3c>
 434:	umulh	x2, x3, x0
 438:	cbz	x2, 45c <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3c>
 43c:	mov	x2, x0
 440:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 444:	ldr	x0, [x0]
 448:	ldr	x1, [x0]
 44c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 450:	add	x0, x0, #0x0
 454:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 458:	bl	0 <_ZN11__sanitizer3DieEv>
 45c:	mul	x19, x0, x3
 460:	mov	x2, #0x0                   	// #0
 464:	mov	x0, x19
 468:	bl	36c <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 46c:	mov	x20, x0
 470:	cbz	x0, 480 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x60>
 474:	mov	x2, x19
 478:	mov	w1, #0x0                   	// #0
 47c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 480:	mov	x0, x20
 484:	ldr	x30, [sp, #16]
 488:	ldp	x19, x20, [sp], #32
 48c:	ret

0000000000000490 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 490:	stp	x19, x20, [sp, #-48]!
 494:	mov	x3, x0
 498:	mov	x20, x2
 49c:	stp	x21, x30, [sp, #16]
 4a0:	mov	x0, x1
 4a4:	cbnz	x3, 4c0 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x30>
 4a8:	mov	x1, x20
 4ac:	mov	x2, #0x0                   	// #0
 4b0:	bl	36c <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 4b4:	ldp	x21, x30, [sp, #16]
 4b8:	ldp	x19, x20, [sp], #48
 4bc:	ret
 4c0:	cmn	x1, #0x9
 4c4:	b.hi	574 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xe4>  // b.pmore
 4c8:	sub	x21, x3, #0x8
 4cc:	add	x19, x1, #0x8
 4d0:	ldur	x4, [x3, #-8]
 4d4:	mov	x3, #0xc041                	// #49217
 4d8:	movk	x3, #0xbceb, lsl #16
 4dc:	movk	x3, #0xb03a, lsl #32
 4e0:	movk	x3, #0x6a6c, lsl #48
 4e4:	cmp	x4, x3
 4e8:	b.eq	504 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x74>  // b.none
 4ec:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4f0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4f4:	add	x2, x2, #0x0
 4f8:	add	x0, x0, #0x0
 4fc:	mov	w1, #0xa5                  	// #165
 500:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 504:	cbnz	x2, 554 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xc4>
 508:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 50c:	add	x0, x0, #0x0
 510:	add	x0, x0, #0x13
 514:	str	x0, [sp, #40]
 518:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 51c:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 520:	mov	x3, x19
 524:	mov	x2, x21
 528:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 52c:	add	x1, x1, #0x0
 530:	mov	x4, #0x8                   	// #8
 534:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 538:	mov	x20, x0
 53c:	add	x0, sp, #0x28
 540:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 544:	add	x0, x20, #0x8
 548:	cbnz	x20, 4b4 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x24>
 54c:	mov	x0, x19
 550:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 554:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 558:	mov	x1, x20
 55c:	mov	x3, x19
 560:	mov	x2, x21
 564:	mov	x4, #0x8                   	// #8
 568:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 56c:	mov	x20, x0
 570:	b	544 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xb4>
 574:	mov	x0, #0x0                   	// #0
 578:	b	4b4 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x24>

000000000000057c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 57c:	cbz	x0, 61c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xa0>
 580:	stp	x19, x20, [sp, #-48]!
 584:	mov	x3, #0xc041                	// #49217
 588:	movk	x3, #0xbceb, lsl #16
 58c:	ldur	x4, [x0, #-8]
 590:	str	x30, [sp, #16]
 594:	movk	x3, #0xb03a, lsl #32
 598:	sub	x20, x0, #0x8
 59c:	movk	x3, #0x6a6c, lsl #48
 5a0:	cmp	x4, x3
 5a4:	b.eq	5c0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44>  // b.none
 5a8:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5ac:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5b0:	add	x2, x2, #0x0
 5b4:	add	x0, x0, #0x0
 5b8:	mov	w1, #0xbd                  	// #189
 5bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5c0:	stur	xzr, [x0, #-8]
 5c4:	mov	x19, x1
 5c8:	cbnz	x1, 608 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x8c>
 5cc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5d0:	add	x0, x0, #0x0
 5d4:	add	x0, x0, #0x13
 5d8:	str	x0, [sp, #40]
 5dc:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5e0:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 5e4:	mov	x2, x20
 5e8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5ec:	add	x1, x1, #0x0
 5f0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5f4:	add	x0, sp, #0x28
 5f8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5fc:	ldr	x30, [sp, #16]
 600:	ldp	x19, x20, [sp], #48
 604:	ret
 608:	bl	1d0 <_ZN11__sanitizer18internal_allocatorEv>
 60c:	mov	x2, x20
 610:	mov	x1, x19
 614:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 618:	b	5fc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x80>
 61c:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex4LockEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex4LockEv>:
   0:	mov	x1, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldxrb	w2, [x1]
   c:	stxrb	w4, w3, [x1]
  10:	cbnz	w4, 8 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x8>
  14:	dmb	ish
  18:	tst	w2, #0xff
  1c:	b.eq	24 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x24>  // b.none
  20:	b	0 <_ZN11__sanitizer15StaticSpinMutex4LockEv>
  24:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer26MostSignificantSetBitIndexEm:

0000000000000000 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>:
   0:	cbnz	x0, 28 <_ZN11__sanitizer26MostSignificantSetBitIndexEm+0x28>
   4:	str	x30, [sp, #-16]!
   8:	adrp	x2, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
   c:	adrp	x0, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
  10:	add	x2, x2, #0x0
  14:	add	x0, x0, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x151                 	// #337
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	clz	x0, x0
  2c:	mov	w1, #0x3f                  	// #63
  30:	sub	w0, w1, w0
  34:	sxtw	x0, w0
  38:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer17GenericScopedLockINS_15StaticSpinMutexEED2Ev:

0000000000000000 <_ZN11__sanitizer17GenericScopedLockINS_15StaticSpinMutexEED1Ev>:
   0:	ldr	x0, [x0]
   4:	dmb	ish
   8:	strb	wzr, [x0]
   c:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	ldr	x0, [x2, #8]
   c:	stp	x21, x22, [sp, #16]
  10:	str	x30, [sp, #32]
  14:	cbnz	x0, 38 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x38>
  18:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  1c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	x3, #0x0                   	// #0
  30:	mov	w1, #0xad                  	// #173
  34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  38:	mov	x0, #0x2001                	// #8193
  3c:	add	x22, x1, x0
  40:	mov	x20, x2
  44:	lsl	x21, x1, #6
  48:	add	x22, x19, x22, lsl #6
  4c:	str	x22, [sp, #56]
  50:	mov	x0, x22
  54:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  58:	ldr	x0, [x22, #8]
  5c:	cbnz	x0, 90 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x90>
  60:	add	x19, x19, x21
  64:	str	xzr, [x20]
  68:	add	x19, x19, #0x80, lsl #12
  6c:	mov	x0, #0x1                   	// #1
  70:	stp	x20, x20, [x19, #80]
  74:	str	x0, [x19, #72]
  78:	add	x0, sp, #0x38
  7c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  80:	ldp	x21, x22, [sp, #16]
  84:	ldr	x30, [sp, #32]
  88:	ldp	x19, x20, [sp], #64
  8c:	ret
  90:	add	x19, x19, x21
  94:	add	x0, x0, #0x1
  98:	add	x19, x19, #0x80, lsl #12
  9c:	ldr	x1, [x19, #80]
  a0:	str	x1, [x20]
  a4:	str	x20, [x19, #80]
  a8:	b	74 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x74>

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE9GetHeaderEm:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE9GetHeaderEm>:
   0:	ldr	x0, [x0]
   4:	sub	x2, x0, #0x1
   8:	tst	x2, x1
   c:	b.eq	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE9GetHeaderEm+0x34>  // b.none
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE9GetHeaderEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE9GetHeaderEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x0                   	// #0
  28:	mov	x3, #0x0                   	// #0
  2c:	mov	w1, #0x123                 	// #291
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	sub	x0, x1, x0
  38:	ret

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x26, [sp, #48]
  10:	sub	x26, x3, #0x1
  14:	tst	x3, x26
  18:	str	x30, [sp, #64]
  1c:	b.eq	40 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x40>  // b.none
  20:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  24:	add	x2, x2, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	x3, #0x0                   	// #0
  30:	mov	w1, #0x53                  	// #83
  34:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  40:	mov	x23, x0
  44:	mov	x22, x1
  48:	mov	x24, x3
  4c:	mov	x25, x2
  50:	mov	x0, x2
  54:	ldr	x1, [x23]
  58:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  5c:	ldr	x1, [x23]
  60:	add	x19, x0, x1
  64:	cmp	x24, x1
  68:	b.ls	70 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x70>  // b.plast
  6c:	add	x19, x19, x24
  70:	cmp	x19, x25
  74:	b.cs	b8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0xb8>  // b.hs, b.nlast
  78:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  7c:	mov	x3, x24
  80:	mov	x2, x19
  84:	mov	x20, #0x0                   	// #0
  88:	ldr	x0, [x0]
  8c:	ldr	x1, [x0]
  90:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  94:	add	x0, x0, #0x0
  98:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  9c:	mov	x0, x20
  a0:	ldp	x21, x22, [sp, #16]
  a4:	ldp	x23, x24, [sp, #32]
  a8:	ldp	x25, x26, [sp, #48]
  ac:	ldr	x30, [sp, #64]
  b0:	ldp	x19, x20, [sp], #96
  b4:	ret
  b8:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  bc:	ldr	x1, [x0]
  c0:	mov	x0, x19
  c4:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
  c8:	mov	x20, x0
  cc:	cbz	x0, 9c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x9c>
  d0:	ldr	x21, [x23]
  d4:	sub	x0, x21, #0x1
  d8:	tst	x20, x0
  dc:	b.eq	f8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0xf8>  // b.none
  e0:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
  e4:	mov	x4, #0x0                   	// #0
  e8:	add	x2, x2, #0x0
  ec:	mov	x3, #0x0                   	// #0
  f0:	mov	w1, #0x62                  	// #98
  f4:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
  f8:	add	x21, x21, x20
  fc:	ands	x1, x21, x26
 100:	b.eq	12c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x12c>  // b.none
 104:	add	x21, x24, x21
 108:	sub	x21, x21, x1
 10c:	tst	x21, x26
 110:	b.eq	12c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x12c>  // b.none
 114:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 118:	mov	x4, #0x0                   	// #0
 11c:	add	x2, x2, #0x0
 120:	mov	x3, #0x0                   	// #0
 124:	mov	w1, #0x68                  	// #104
 128:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 12c:	tst	x21, x0
 130:	b.eq	14c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x14c>  // b.none
 134:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 138:	mov	x4, #0x0                   	// #0
 13c:	add	x2, x2, #0x0
 140:	mov	x3, #0x0                   	// #0
 144:	mov	w1, #0x69                  	// #105
 148:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 14c:	add	x3, x21, x25
 150:	cmp	x20, x3
 154:	b.ls	16c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x16c>  // b.plast
 158:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 15c:	mov	x4, x20
 160:	add	x2, x2, #0x0
 164:	mov	w1, #0x6a                  	// #106
 168:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 16c:	add	x4, x20, x19
 170:	cmp	x4, x3
 174:	b.cs	188 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x188>  // b.hs, b.nlast
 178:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 17c:	mov	w1, #0x6b                  	// #107
 180:	add	x2, x2, #0x0
 184:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 188:	mov	x1, x21
 18c:	mov	x0, x23
 190:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 194:	mov	x24, x0
 198:	mov	x0, x19
 19c:	stp	x20, x19, [x24]
 1a0:	str	x25, [x24, #16]
 1a4:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 1a8:	mov	x20, x0
 1ac:	cmp	x0, #0x3f
 1b0:	b.ls	1cc <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x1cc>  // b.plast
 1b4:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 1b8:	mov	x3, x0
 1bc:	add	x2, x2, #0x0
 1c0:	mov	x4, #0x40                  	// #64
 1c4:	mov	w1, #0x71                  	// #113
 1c8:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 1cc:	add	x0, x23, #0x40, lsl #12
 1d0:	add	x0, x0, #0x240
 1d4:	str	x0, [sp, #88]
 1d8:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 1dc:	add	x1, x23, #0x40, lsl #12
 1e0:	mov	x0, #0x7fff                	// #32767
 1e4:	ldr	x3, [x1, #16]
 1e8:	cmp	x3, x0
 1ec:	b.ls	204 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x204>  // b.plast
 1f0:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 1f4:	mov	x4, #0x8000                	// #32768
 1f8:	add	x2, x2, #0x0
 1fc:	mov	w1, #0x15                  	// #21
 200:	b	34 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x34>
 204:	add	x0, x3, #0x1
 208:	str	x0, [x1, #16]
 20c:	ldr	x0, [x23, #8]
 210:	add	x20, x23, x20, lsl #3
 214:	ldr	x2, [x1, #56]
 218:	str	x3, [x24, #24]
 21c:	str	x24, [x0, x3, lsl #3]
 220:	add	x20, x20, #0x40, lsl #12
 224:	ldr	x0, [x1, #32]
 228:	strb	wzr, [x1, #24]
 22c:	add	x0, x0, #0x1
 230:	str	x0, [x1, #32]
 234:	ldr	x0, [x1, #48]
 238:	add	x0, x19, x0
 23c:	str	x0, [x1, #48]
 240:	cmp	x2, x0
 244:	csel	x0, x2, x0, cs  // cs = hs, nlast
 248:	str	x0, [x1, #56]
 24c:	ldr	x0, [x20, #64]
 250:	add	x0, x0, #0x1
 254:	str	x0, [x20, #64]
 258:	ldr	x0, [x22, #16]
 25c:	mov	x20, x21
 260:	add	x0, x19, x0
 264:	str	x0, [x22, #16]
 268:	add	x0, sp, #0x58
 26c:	ldr	x2, [x22, #24]
 270:	add	x19, x19, x2
 274:	str	x19, [x22, #24]
 278:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm>
 27c:	b	9c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE8AllocateEPNS_14AllocatorStatsEmm+0x9c>

Disassembly of section .text._ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv:

0000000000000000 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	add	x0, x0, #0x40, lsl #12
   c:	add	x0, x0, #0x240
  10:	mov	x19, x1
  14:	str	x30, [sp, #16]
  18:	str	x0, [sp, #40]
  1c:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  20:	add	x0, x20, #0x40, lsl #12
  24:	mov	x3, #0x0                   	// #0
  28:	ldr	x2, [x0, #16]
  2c:	mov	x0, #0x0                   	// #0
  30:	cmp	x2, x0
  34:	b.eq	60 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x60>  // b.none
  38:	ldr	x1, [x20, #8]
  3c:	ldr	x1, [x1, x0, lsl #3]
  40:	cmp	x19, x1
  44:	b.cc	58 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x58>  // b.lo, b.ul, b.last
  48:	sub	x4, x19, x3
  4c:	sub	x5, x19, x1
  50:	cmp	x5, x4
  54:	csel	x3, x3, x1, cs  // cs = hs, nlast
  58:	add	x0, x0, #0x1
  5c:	b	30 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x30>
  60:	cbz	x3, f8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0xf8>
  64:	ldr	x4, [x3]
  68:	cmp	x3, x4
  6c:	b.cs	88 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x88>  // b.hs, b.nlast
  70:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  74:	add	x2, x2, #0x0
  78:	mov	w1, #0xc1                  	// #193
  7c:	adrp	x0, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  80:	add	x0, x0, #0x0
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  88:	ldr	x0, [x3, #8]
  8c:	add	x4, x4, x0
  90:	cmp	x3, x4
  94:	b.cc	a8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0xa8>  // b.lo, b.ul, b.last
  98:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  9c:	mov	w1, #0xc2                  	// #194
  a0:	add	x2, x2, #0x0
  a4:	b	7c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x7c>
  a8:	cmp	x3, x19
  ac:	b.ls	c4 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0xc4>  // b.plast
  b0:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  b4:	mov	x4, x19
  b8:	add	x2, x2, #0x0
  bc:	mov	w1, #0xc3                  	// #195
  c0:	b	7c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x7c>
  c4:	cmp	x19, x4
  c8:	b.cs	f8 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0xf8>  // b.hs, b.nlast
  cc:	ldr	x19, [x20]
  d0:	sub	x0, x19, #0x1
  d4:	add	x19, x3, x19
  d8:	tst	x0, x3
  dc:	b.eq	fc <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0xfc>  // b.none
  e0:	adrp	x2, 0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
  e4:	mov	x4, #0x0                   	// #0
  e8:	add	x2, x2, #0x0
  ec:	mov	x3, #0x0                   	// #0
  f0:	mov	w1, #0x12b                 	// #299
  f4:	b	7c <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv+0x7c>
  f8:	mov	x19, #0x0                   	// #0
  fc:	add	x0, sp, #0x28
 100:	bl	0 <_ZN11__sanitizer18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEE13GetBlockBeginEPKv>
 104:	mov	x0, x19
 108:	ldr	x30, [sp, #16]
 10c:	ldp	x19, x20, [sp], #48
 110:	ret

Disassembly of section .text._ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm:

0000000000000000 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>:
   0:	mov	x3, x1
   4:	mov	x1, #0xffff                	// #65535
   8:	cmp	x3, x1
   c:	b.ls	30 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm+0x30>  // b.plast
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer15TwoLevelByteMapILy65536ELy4096ENS_20NoOpMapUnmapCallbackEE3GetEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x10000               	// #65536
  28:	mov	w1, #0x4f                  	// #79
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x0, [x0, x3, lsl #3]
  34:	dmb	ish
  38:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x2, #0xfffffff             	// #268435455
   8:	lsr	x19, x1, #20
   c:	cmp	x2, x1, lsr #20
  10:	b.cs	34 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv+0x34>  // b.hs, b.nlast
  14:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv>
  18:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv>
  1c:	mov	x3, x19
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x10000000            	// #268435456
  2c:	mov	w1, #0x116                 	// #278
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	lsr	x1, x1, #32
  38:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv>
  3c:	cbz	x0, 54 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv+0x54>
  40:	and	x19, x19, #0xfff
  44:	ldrb	w0, [x0, x19]
  48:	and	x0, x0, #0xff
  4c:	ldp	x19, x30, [sp], #16
  50:	ret
  54:	mov	w0, #0x0                   	// #0
  58:	b	48 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE12GetSizeClassEPKv+0x48>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13PointerIsMineEPKv:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13PointerIsMineEPKv>:
   0:	mov	x2, #0xffffffffffff        	// #281474976710655
   4:	cmp	x1, x2
   8:	b.hi	24 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13PointerIsMineEPKv+0x24>  // b.pmore
   c:	str	x30, [sp, #-16]!
  10:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13PointerIsMineEPKv>
  14:	cmp	x0, #0x0
  18:	cset	w0, ne  // ne = any
  1c:	ldr	x30, [sp], #16
  20:	ret
  24:	mov	w0, #0x0                   	// #0
  28:	ret

Disassembly of section .text._ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE4SizeEm:

0000000000000000 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE4SizeEm>:
   0:	cmp	x0, #0x35
   4:	b.eq	34 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE4SizeEm+0x34>  // b.none
   8:	sub	x3, x0, #0x10
   c:	mov	x2, #0x100                 	// #256
  10:	lsl	x4, x0, #4
  14:	cmp	x0, #0x10
  18:	lsr	x1, x3, #2
  1c:	and	x3, x3, #0x3
  20:	lsl	x2, x2, x1
  24:	lsr	x1, x2, #2
  28:	madd	x1, x1, x3, x2
  2c:	csel	x0, x1, x4, hi  // hi = pmore
  30:	ret
  34:	mov	x0, #0x200                 	// #512
  38:	b	30 <_ZN11__sanitizer12SizeClassMapILm3ELm4ELm8ELm17ELm64ELm14EE4SizeEm+0x30>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x19, x1
   8:	mov	x1, #0x100000              	// #1048576
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x0
  14:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  18:	stp	x23, x24, [sp, #32]
  1c:	mov	x23, x2
  20:	ldr	x2, [x0]
  24:	mov	x0, x1
  28:	str	x30, [sp, #48]
  2c:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  30:	mov	x20, x0
  34:	cbz	x0, 124 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x124>
  38:	tst	x0, #0xfffff
  3c:	ldr	x0, [x19, #24]
  40:	add	x0, x0, #0x100, lsl #12
  44:	str	x0, [x19, #24]
  48:	b.eq	6c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x6c>  // b.none
  4c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  50:	add	x2, x2, #0x0
  54:	mov	x4, #0x0                   	// #0
  58:	mov	x3, #0x0                   	// #0
  5c:	mov	w1, #0x126                 	// #294
  60:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  64:	add	x0, x0, #0x0
  68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  6c:	mov	x0, #0xfffffff             	// #268435455
  70:	lsr	x22, x20, #20
  74:	cmp	x0, x20, lsr #20
  78:	b.cs	94 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x94>  // b.hs, b.nlast
  7c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  80:	mov	x3, x22
  84:	add	x2, x2, #0x0
  88:	mov	x4, #0x10000000            	// #268435456
  8c:	mov	w1, #0x116                 	// #278
  90:	b	60 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x60>
  94:	lsr	x24, x20, #32
  98:	mov	x0, x21
  9c:	mov	x1, x24
  a0:	and	w23, w23, #0xff
  a4:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  a8:	mov	x19, x0
  ac:	cbnz	x0, f8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0xf8>
  b0:	add	x0, x21, #0x80, lsl #12
  b4:	str	x0, [sp, #72]
  b8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  bc:	mov	x1, x24
  c0:	mov	x0, x21
  c4:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  c8:	mov	x19, x0
  cc:	cbnz	x0, f0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0xf0>
  d0:	mov	w2, #0x0                   	// #0
  d4:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  d8:	mov	x0, #0x1000                	// #4096
  dc:	add	x1, x1, #0x0
  e0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  e4:	dmb	ish
  e8:	mov	x19, x0
  ec:	str	x0, [x21, x24, lsl #3]
  f0:	add	x0, sp, #0x48
  f4:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
  f8:	and	x22, x22, #0xfff
  fc:	ldrb	w4, [x19, x22]
 100:	cbz	x4, 120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x120>
 104:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
 108:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm>
 10c:	add	x2, x2, #0x0
 110:	add	x0, x0, #0x0
 114:	mov	x3, #0x0                   	// #0
 118:	mov	w1, #0x42                  	// #66
 11c:	b	68 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE14AllocateRegionEPNS_14AllocatorStatsEm+0x68>
 120:	strb	w23, [x19, x22]
 124:	mov	x0, x20
 128:	ldp	x21, x22, [sp, #16]
 12c:	ldp	x23, x24, [sp, #32]
 130:	ldr	x30, [sp, #48]
 134:	ldp	x19, x20, [sp], #80
 138:	ret

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	mov	x20, x2
   8:	mov	x19, #0x0                   	// #0
   c:	stp	x23, x24, [sp, #32]
  10:	mov	x24, x0
  14:	mov	x23, x6
  18:	ldr	x0, [x4]
  1c:	stp	x21, x22, [sp, #16]
  20:	mov	x22, x1
  24:	mov	x21, x4
  28:	stp	x25, x26, [sp, #48]
  2c:	mov	x25, x5
  30:	mov	x26, x7
  34:	stp	x27, x28, [sp, #64]
  38:	add	x27, x1, x3, lsl #10
  3c:	mov	x28, #0x1                   	// #1
  40:	str	x30, [sp, #80]
  44:	cmp	x19, x26
  48:	b.eq	d0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xd0>  // b.none
  4c:	cbnz	x0, 64 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0x64>
  50:	ldr	x2, [x27, #24]
  54:	cbnz	x2, a8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xa8>
  58:	ldr	x0, [x23, x19, lsl #3]
  5c:	cbz	x0, f4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xf4>
  60:	str	xzr, [x0, #8]
  64:	ldr	x1, [x0, #8]
  68:	ldr	x3, [x23, x19, lsl #3]
  6c:	add	x2, x1, #0x1
  70:	add	x1, x1, #0x2
  74:	str	x2, [x0, #8]
  78:	cmp	x25, x2
  7c:	str	x3, [x0, x1, lsl #3]
  80:	b.ne	a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xa0>  // b.any
  84:	mov	x8, x20
  88:	ldr	x1, [x8, #8]!
  8c:	str	xzr, [x0]
  90:	cbnz	x1, b8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xb8>
  94:	stp	x0, x0, [x8, #8]
  98:	str	x28, [x20, #8]
  9c:	mov	x0, #0x0                   	// #0
  a0:	add	x19, x19, #0x1
  a4:	b	44 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0x44>
  a8:	mov	x1, x24
  ac:	mov	x0, x22
  b0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm>
  b4:	b	5c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0x5c>
  b8:	ldr	x2, [x8, #16]
  bc:	add	x1, x1, #0x1
  c0:	str	x0, [x2]
  c4:	str	x0, [x8, #16]
  c8:	str	x1, [x20, #8]
  cc:	b	9c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0x9c>
  d0:	str	x0, [x21]
  d4:	mov	w0, #0x1                   	// #1
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x23, x24, [sp, #32]
  e0:	ldp	x25, x26, [sp, #48]
  e4:	ldp	x27, x28, [sp, #64]
  e8:	ldr	x30, [sp, #80]
  ec:	ldp	x19, x20, [sp], #96
  f0:	ret
  f4:	mov	w0, #0x0                   	// #0
  f8:	b	d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15PopulateBatchesEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEmPPNS2_13TransferBatchEmPmm+0xd8>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>:
   0:	stp	x19, x20, [sp, #-496]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x22, x0
   c:	mov	x21, x3
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x23, x2
  18:	mov	x24, x4
  1c:	mov	x2, x4
  20:	stp	x25, x26, [sp, #48]
  24:	stp	x27, x28, [sp, #64]
  28:	str	x30, [sp, #80]
  2c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
  30:	cbnz	x0, 54 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x54>
  34:	mov	w0, #0x0                   	// #0
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldp	x23, x24, [sp, #32]
  40:	ldp	x25, x26, [sp, #48]
  44:	ldp	x27, x28, [sp, #64]
  48:	ldr	x30, [sp, #80]
  4c:	ldp	x19, x20, [sp], #496
  50:	ret
  54:	mov	x20, x0
  58:	cmp	x24, #0x35
  5c:	b.eq	7c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x7c>  // b.none
  60:	mov	x0, x24
  64:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
  68:	mov	x2, #0x100000              	// #1048576
  6c:	udiv	x2, x2, x0
  70:	cbnz	x0, 84 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x84>
  74:	mov	x26, #0x0                   	// #0
  78:	b	a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xa4>
  7c:	mov	x0, #0x200                 	// #512
  80:	mov	x2, #0x800                 	// #2048
  84:	mov	w1, #0x4000                	// #16384
  88:	mov	x3, #0x40                  	// #64
  8c:	mov	x26, x0
  90:	udiv	w1, w1, w0
  94:	cmp	x1, #0x40
  98:	csel	x1, x1, x3, ls  // ls = plast
  9c:	cmp	x1, #0x0
  a0:	csinc	x0, x1, xzr, ne  // ne = any
  a4:	madd	x25, x26, x2, x20
  a8:	cmp	x0, #0x3e
  ac:	add	x27, sp, #0x70
  b0:	add	x28, sp, #0x68
  b4:	mov	x19, #0x3e                  	// #62
  b8:	csel	x19, x0, x19, ls  // ls = plast
  bc:	mov	x0, #0x0                   	// #0
  c0:	str	xzr, [sp, #104]
  c4:	cmp	x20, x25
  c8:	b.cs	114 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x114>  // b.hs, b.nlast
  cc:	str	x20, [x27, x0, lsl #3]
  d0:	add	x7, x0, #0x1
  d4:	cmp	x0, #0x2f
  d8:	b.ne	108 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x108>  // b.any
  dc:	mov	x6, x27
  e0:	mov	x5, x19
  e4:	mov	x4, x28
  e8:	mov	x3, x24
  ec:	mov	x2, x21
  f0:	mov	x1, x23
  f4:	mov	x0, x22
  f8:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
  fc:	tst	w0, #0xff
 100:	b.eq	34 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x34>  // b.none
 104:	mov	x7, #0x0                   	// #0
 108:	add	x20, x20, x26
 10c:	mov	x0, x7
 110:	b	c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xc4>
 114:	cbnz	x0, 128 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x128>
 118:	ldr	x0, [sp, #104]
 11c:	cbnz	x0, 158 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x158>
 120:	mov	w0, #0x1                   	// #1
 124:	b	38 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x38>
 128:	mov	x7, x0
 12c:	add	x6, sp, #0x70
 130:	mov	x5, x19
 134:	add	x4, sp, #0x68
 138:	mov	x3, x24
 13c:	mov	x2, x21
 140:	mov	x1, x23
 144:	mov	x0, x22
 148:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 14c:	tst	w0, #0xff
 150:	b.ne	118 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x118>  // b.any
 154:	b	34 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x34>
 158:	ldr	x1, [x0, #8]
 15c:	cbnz	x1, 180 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x180>
 160:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 164:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 168:	add	x2, x2, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	x4, #0x0                   	// #0
 174:	mov	x3, #0x0                   	// #0
 178:	mov	w1, #0x169                 	// #361
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	mov	x1, x21
 184:	ldr	x2, [x1, #8]!
 188:	str	xzr, [x0]
 18c:	cbnz	x2, 1a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1a0>
 190:	stp	x0, x0, [x1, #8]
 194:	mov	x0, #0x1                   	// #1
 198:	str	x0, [x21, #8]
 19c:	b	38 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x38>
 1a0:	ldr	x3, [x1, #16]
 1a4:	add	x2, x2, #0x1
 1a8:	str	x0, [x3]
 1ac:	str	x0, [x1, #16]
 1b0:	str	x2, [x21, #8]
 1b4:	b	120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x120>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x20, x0
   8:	mov	x19, x3
   c:	stp	x21, x22, [sp, #16]
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x23, x1
  18:	mov	x1, #0x2001                	// #8193
  1c:	add	x21, x3, x1
  20:	mov	x24, x2
  24:	stp	x25, x30, [sp, #48]
  28:	lsl	x22, x21, #6
  2c:	add	x22, x22, #0x8
  30:	add	x21, x0, x21, lsl #6
  34:	mov	x0, x21
  38:	str	x21, [sp, #72]
  3c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  40:	add	x25, x20, x22
  44:	ldr	x0, [x20, x22]
  48:	cbz	x0, 78 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x78>
  4c:	ldr	x0, [x20, x22]
  50:	ldr	x21, [x25, #8]
  54:	cbnz	x0, bc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xbc>
  58:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  5c:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  60:	add	x2, x2, #0x0
  64:	add	x0, x0, #0x0
  68:	mov	x4, #0x0                   	// #0
  6c:	mov	x3, #0x0                   	// #0
  70:	mov	w1, #0x40                  	// #64
  74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  78:	mov	x4, x19
  7c:	mov	x3, x21
  80:	mov	x2, x24
  84:	mov	x1, x23
  88:	mov	x0, x20
  8c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  90:	tst	w0, #0xff
  94:	b.ne	4c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x4c>  // b.any
  98:	mov	x21, #0x0                   	// #0
  9c:	add	x0, sp, #0x48
  a0:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  a4:	mov	x0, x21
  a8:	ldp	x21, x22, [sp, #16]
  ac:	ldp	x23, x24, [sp, #32]
  b0:	ldp	x25, x30, [sp, #48]
  b4:	ldp	x19, x20, [sp], #80
  b8:	ret
  bc:	add	x4, x20, x19, lsl #6
  c0:	add	x4, x4, #0x80, lsl #12
  c4:	ldr	x1, [x4, #80]
  c8:	ldr	x1, [x1]
  cc:	str	x1, [x4, #80]
  d0:	cbnz	x1, d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xd8>
  d4:	str	xzr, [x4, #88]
  d8:	sub	x0, x0, #0x1
  dc:	str	x0, [x4, #72]
  e0:	b	9c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x9c>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x0
   8:	mov	x20, x3
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x1
  14:	mov	x22, x2
  18:	ldr	x1, [x1, #8]
  1c:	str	x30, [sp, #32]
  20:	cbnz	x1, 28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>
  24:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  28:	mov	x3, x20
  2c:	mov	x0, #0xd800                	// #55296
  30:	mov	x2, x19
  34:	add	x1, x19, x0
  38:	mov	x0, x22
  3c:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  40:	mov	x3, x0
  44:	cbz	x0, b4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xb4>
  48:	ldr	x1, [x3, #8]
  4c:	mov	x0, #0x0                   	// #0
  50:	cbz	x1, 94 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x94>
  54:	add	x5, x3, #0x10
  58:	add	x2, x21, #0x20
  5c:	ldr	x4, [x5, x0, lsl #3]
  60:	str	x4, [x2, x0, lsl #3]
  64:	add	x0, x0, #0x1
  68:	cmp	x1, x0
  6c:	b.ne	5c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x5c>  // b.any
  70:	add	x20, x19, x20, lsl #10
  74:	ldr	x2, [x20, #24]
  78:	str	x1, [x21]
  7c:	cbz	x2, 8c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x8c>
  80:	mov	x1, x22
  84:	mov	x0, x19
  88:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  8c:	mov	w0, #0x1                   	// #1
  90:	b	b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xb8>
  94:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  98:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  9c:	add	x2, x2, #0x0
  a0:	add	x0, x0, #0x0
  a4:	mov	x4, #0x0                   	// #0
  a8:	mov	x3, #0x0                   	// #0
  ac:	mov	w1, #0xf6                  	// #246
  b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  b4:	mov	w0, #0x0                   	// #0
  b8:	ldp	x21, x22, [sp, #16]
  bc:	ldr	x30, [sp, #32]
  c0:	ldp	x19, x20, [sp], #48
  c4:	ret

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x2, 2c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x9f                  	// #159
  20:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	mov	x19, x2
  30:	cmp	x2, #0x35
  34:	b.ls	50 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0x50>  // b.plast
  38:	mov	x3, x2
  3c:	mov	x4, #0x36                  	// #54
  40:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m>
  44:	mov	w1, #0xa0                  	// #160
  48:	add	x2, x2, #0x0
  4c:	b	20 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0x20>
  50:	lsl	x21, x2, #10
  54:	mov	x4, x1
  58:	add	x1, x0, x2, lsl #10
  5c:	mov	x20, x0
  60:	ldr	x2, [x0, x21]
  64:	cbz	x2, b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0xb8>
  68:	ldr	x3, [x20, x21]
  6c:	sub	x0, x3, #0x1
  70:	str	x0, [x20, x21]
  74:	add	x0, x0, x19, lsl #7
  78:	add	x19, x3, x19, lsl #7
  7c:	add	x19, x19, #0x2
  80:	add	x0, x0, #0x4
  84:	ldr	x1, [x20, x19, lsl #3]
  88:	ldr	x0, [x20, x0, lsl #3]
  8c:	prfm	pldl1keep, [x1]
  90:	mov	x1, #0xd800                	// #55296
  94:	add	x2, x20, x1
  98:	add	x20, x20, x21
  9c:	ldr	x1, [x2, #16]
  a0:	ldr	x3, [x20, #16]
  a4:	add	x1, x1, x3
  a8:	str	x1, [x2, #16]
  ac:	ldp	x21, x30, [sp, #16]
  b0:	ldp	x19, x20, [sp], #32
  b4:	ret
  b8:	mov	x3, x19
  bc:	mov	x2, x4
  c0:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m>
  c4:	tst	w0, #0xff
  c8:	b.ne	68 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0x68>  // b.any
  cc:	mov	x0, #0x0                   	// #0
  d0:	b	ac <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE8AllocateEPS3_m+0xac>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	cmp	x2, #0x0
   8:	csinc	x20, x2, xzr, ne  // ne = any
   c:	stp	x21, x22, [sp, #16]
  10:	cmn	x20, x3
  14:	str	x30, [sp, #32]
  18:	b.cc	4c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x4c>  // b.lo, b.ul, b.last
  1c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  20:	mov	x2, x20
  24:	ldr	x0, [x0]
  28:	ldr	x1, [x0]
  2c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  38:	mov	x0, #0x0                   	// #0
  3c:	ldp	x21, x22, [sp, #16]
  40:	ldr	x30, [sp, #32]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x22, x0
  50:	mov	x21, x1
  54:	mov	x19, x3
  58:	cmp	x3, #0x8
  5c:	b.ls	c8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xc8>  // b.plast
  60:	mov	x1, x3
  64:	mov	x0, x20
  68:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  6c:	cmp	x19, #0x20, lsl #12
  70:	mov	x1, #0x20000               	// #131072
  74:	ccmp	x0, x1, #0x2, ls  // ls = plast
  78:	b.hi	dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xdc>  // b.pmore
  7c:	cmp	x0, #0x100
  80:	b.hi	d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xd0>  // b.pmore
  84:	add	x2, x0, #0xf
  88:	lsr	x2, x2, #4
  8c:	mov	x1, x22
  90:	mov	x0, x21
  94:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  98:	cmp	x19, #0x8
  9c:	b.ls	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3c>  // b.plast
  a0:	sub	x19, x19, #0x1
  a4:	ands	x3, x0, x19
  a8:	b.eq	3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3c>  // b.none
  ac:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  b0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  b4:	add	x2, x2, #0x0
  b8:	add	x0, x0, #0x0
  bc:	mov	x4, #0x0                   	// #0
  c0:	mov	w1, #0x42                  	// #66
  c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  c8:	mov	x0, x20
  cc:	b	6c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x6c>
  d0:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  d4:	mov	x2, x0
  d8:	b	8c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x8c>
  dc:	add	x1, x22, #0xc1, lsl #12
  e0:	add	x0, x22, #0x80, lsl #12
  e4:	mov	x3, x19
  e8:	mov	x2, x20
  ec:	add	x1, x1, #0x8
  f0:	add	x0, x0, #0xdc0
  f4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
  f8:	b	98 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x98>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	ldp	x4, x20, [x1]
   8:	stp	x21, x22, [sp, #16]
   c:	mov	x21, x1
  10:	add	x1, x0, x3, lsl #10
  14:	mov	x22, x2
  18:	stp	x23, x30, [sp, #32]
  1c:	mov	x23, x3
  20:	lsr	x20, x20, #1
  24:	ldr	x2, [x1, #24]
  28:	cmp	x20, x4
  2c:	csel	x20, x20, x4, ls  // ls = plast
  30:	sub	x4, x4, x20
  34:	add	x19, x4, #0x4
  38:	cbnz	x2, 60 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x60>
  3c:	ldr	x2, [x21, x19, lsl #3]
  40:	cbnz	x2, 70 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x70>
  44:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  48:	ldr	x0, [x0]
  4c:	ldr	x1, [x0]
  50:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  5c:	bl	0 <_ZN11__sanitizer3DieEv>
  60:	mov	x1, x22
  64:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
  68:	mov	x2, x0
  6c:	b	40 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x40>
  70:	add	x19, x21, x19, lsl #3
  74:	add	x1, x2, #0x10
  78:	mov	x0, #0x0                   	// #0
  7c:	str	x20, [x2, #8]
  80:	cmp	x20, x0
  84:	b.eq	98 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x98>  // b.none
  88:	ldr	x3, [x19, x0, lsl #3]
  8c:	str	x3, [x1, x0, lsl #3]
  90:	add	x0, x0, #0x1
  94:	b	80 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x80>
  98:	ldr	x0, [x21]
  9c:	mov	x1, x23
  a0:	ldp	x23, x30, [sp, #32]
  a4:	sub	x20, x0, x20
  a8:	str	x20, [x21]
  ac:	mov	x0, x22
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldp	x19, x20, [sp], #48
  b8:	b	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	str	x30, [sp, #48]
  10:	cbnz	x2, 34 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv+0x34>
  14:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>
  18:	add	x2, x2, #0x0
  1c:	mov	x4, #0x0                   	// #0
  20:	mov	x3, #0x0                   	// #0
  24:	mov	w1, #0xae                  	// #174
  28:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	mov	x19, x2
  38:	cmp	x2, #0x35
  3c:	b.ls	58 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv+0x58>  // b.plast
  40:	mov	x3, x2
  44:	mov	x4, #0x36                  	// #54
  48:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>
  4c:	mov	w1, #0xaf                  	// #175
  50:	add	x2, x2, #0x0
  54:	b	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv+0x28>
  58:	add	x23, x0, x2, lsl #10
  5c:	mov	x24, x1
  60:	mov	x20, x0
  64:	mov	x22, x3
  68:	lsl	x21, x2, #10
  6c:	ldr	x1, [x23, #8]
  70:	cbnz	x1, 78 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv+0x78>
  74:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>
  78:	ldr	x1, [x20, x21]
  7c:	ldr	x0, [x23, #8]
  80:	cmp	x1, x0
  84:	b.ne	9c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv+0x9c>  // b.any
  88:	mov	x3, x19
  8c:	mov	x2, x24
  90:	mov	x1, x23
  94:	mov	x0, x20
  98:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE10DeallocateEPS3_mPv>
  9c:	ldr	x2, [x20, x21]
  a0:	ldp	x23, x24, [sp, #32]
  a4:	add	x0, x2, #0x1
  a8:	add	x19, x2, x19, lsl #7
  ac:	str	x0, [x20, x21]
  b0:	add	x19, x19, #0x4
  b4:	mov	x0, #0xd800                	// #55296
  b8:	add	x1, x20, x0
  bc:	ldr	x30, [sp, #48]
  c0:	str	x22, [x20, x19, lsl #3]
  c4:	add	x20, x20, x21
  c8:	ldr	x0, [x1, #16]
  cc:	ldr	x2, [x20, #16]
  d0:	ldp	x21, x22, [sp, #16]
  d4:	sub	x0, x0, x2
  d8:	str	x0, [x1, #16]
  dc:	ldp	x19, x20, [sp], #64
  e0:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>:
   0:	cbz	x2, 13c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x13c>
   4:	stp	x19, x20, [sp, #-48]!
   8:	mov	x20, x2
   c:	mov	x19, x0
  10:	stp	x21, x30, [sp, #16]
  14:	mov	x21, x1
  18:	mov	x1, x2
  1c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  20:	tst	w0, #0xff
  24:	mov	x1, x20
  28:	b.eq	54 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x54>  // b.none
  2c:	mov	x0, x19
  30:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  34:	mov	x3, x20
  38:	mov	x2, x0
  3c:	mov	x1, x19
  40:	mov	x0, x21
  44:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  48:	ldp	x21, x30, [sp, #16]
  4c:	ldp	x19, x20, [sp], #48
  50:	ret
  54:	add	x0, x19, #0x80, lsl #12
  58:	add	x20, x19, #0xc1, lsl #12
  5c:	add	x0, x0, #0xdc0
  60:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  64:	mov	x21, x0
  68:	mov	x0, x20
  6c:	str	x20, [sp, #40]
  70:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  74:	add	x1, x19, #0x80, lsl #12
  78:	ldr	x3, [x21, #24]
  7c:	add	x1, x1, #0xdc0
  80:	ldr	x0, [x1, #8]
  84:	lsl	x5, x3, #3
  88:	ldr	x19, [x0, x5]
  8c:	cmp	x19, x21
  90:	b.eq	b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0xb4>  // b.none
  94:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  98:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  9c:	mov	x4, x21
  a0:	mov	x3, x19
  a4:	add	x2, x2, #0x0
  a8:	add	x0, x0, #0x0
  ac:	mov	w1, #0x88                  	// #136
  b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  b4:	add	x1, x1, #0x40, lsl #12
  b8:	ldr	x4, [x1, #16]
  bc:	cmp	x3, x4
  c0:	b.cc	dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0xdc>  // b.lo, b.ul, b.last
  c4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  c8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
  cc:	add	x2, x2, #0x0
  d0:	add	x0, x0, #0x0
  d4:	mov	w1, #0x89                  	// #137
  d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  dc:	sub	x4, x4, #0x1
  e0:	ldr	x2, [x0, x4, lsl #3]
  e4:	str	x4, [x1, #16]
  e8:	str	x2, [x0, x5]
  ec:	ldr	x0, [x1, #40]
  f0:	str	x3, [x2, #24]
  f4:	ldr	x2, [x19, #8]
  f8:	add	x0, x0, #0x1
  fc:	str	x0, [x1, #40]
 100:	ldr	x0, [x1, #48]
 104:	strb	wzr, [x1, #24]
 108:	sub	x0, x0, x2
 10c:	str	x0, [x1, #48]
 110:	ldr	x1, [x20, #24]
 114:	add	x0, sp, #0x28
 118:	sub	x1, x1, x2
 11c:	str	x1, [x20, #24]
 120:	ldr	x1, [x20, #32]
 124:	sub	x1, x1, x2
 128:	str	x1, [x20, #32]
 12c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv>
 130:	ldp	x0, x1, [x19]
 134:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 138:	b	48 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10DeallocateEPS5_Pv+0x48>
 13c:	ret

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x22, x3
   c:	stp	x23, x24, [sp, #32]
  10:	mov	x23, x4
  14:	str	x30, [sp, #48]
  18:	cbnz	x2, 38 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x38>
  1c:	mov	x2, x22
  20:	mov	x3, x4
  24:	ldp	x21, x22, [sp, #16]
  28:	ldp	x23, x24, [sp, #32]
  2c:	ldr	x30, [sp, #48]
  30:	ldp	x19, x20, [sp], #64
  34:	b	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  38:	cbnz	x3, 5c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5c>
  3c:	mov	x23, #0x0                   	// #0
  40:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  44:	mov	x0, x23
  48:	ldp	x21, x22, [sp, #16]
  4c:	ldp	x23, x24, [sp, #32]
  50:	ldr	x30, [sp, #48]
  54:	ldp	x19, x20, [sp], #64
  58:	ret
  5c:	mov	x20, x0
  60:	mov	x24, x1
  64:	mov	x19, x2
  68:	mov	x1, x2
  6c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  70:	tst	w0, #0xff
  74:	b.ne	ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xac>  // b.any
  78:	add	x0, x20, #0x80, lsl #12
  7c:	mov	x1, x19
  80:	add	x0, x0, #0xdc0
  84:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  88:	cbnz	x0, ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xac>
  8c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  90:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  94:	add	x2, x2, #0x0
  98:	add	x0, x0, #0x0
  9c:	mov	x4, #0x0                   	// #0
  a0:	mov	x3, #0x0                   	// #0
  a4:	mov	w1, #0x62                  	// #98
  a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ac:	mov	x1, x19
  b0:	mov	x0, x20
  b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  b8:	tst	w0, #0xff
  bc:	mov	x1, x19
  c0:	b.eq	150 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x150>  // b.none
  c4:	mov	x0, x20
  c8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  cc:	tst	w0, #0xff
  d0:	b.ne	f4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xf4>  // b.any
  d4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  d8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  dc:	add	x2, x2, #0x0
  e0:	add	x0, x0, #0x0
  e4:	mov	x4, #0x0                   	// #0
  e8:	mov	x3, #0x0                   	// #0
  ec:	mov	w1, #0xcc                  	// #204
  f0:	b	a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xa8>
  f4:	mov	x1, x19
  f8:	mov	x0, x20
  fc:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 100:	cmp	x0, #0x35
 104:	b.eq	174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>  // b.none
 108:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 10c:	mov	x21, x0
 110:	mov	x3, x23
 114:	mov	x2, x22
 118:	mov	x1, x24
 11c:	mov	x0, x20
 120:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 124:	mov	x23, x0
 128:	cbz	x0, 13c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x13c>
 12c:	cmp	x22, x21
 130:	mov	x1, x19
 134:	csel	x2, x22, x21, ls  // ls = plast
 138:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 13c:	mov	x2, x19
 140:	mov	x1, x24
 144:	mov	x0, x20
 148:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 14c:	b	44 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x44>
 150:	add	x0, x20, #0x80, lsl #12
 154:	add	x0, x0, #0xdc0
 158:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 15c:	add	x1, x20, #0x80, lsl #12
 160:	add	x1, x1, #0xc00
 164:	ldr	x0, [x0, #16]
 168:	ldr	x1, [x1, #448]
 16c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 170:	b	10c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x10c>
 174:	mov	x21, #0x200                 	// #512
 178:	b	110 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x110>

sanitizer_allocator_checks.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer16SetErrnoToENOMEMEv>:
   0:	str	x30, [sp, #-16]!
   4:	bl	0 <__errno_location>
   8:	mov	w1, #0xc                   	// #12
   c:	ldr	x30, [sp], #16
  10:	str	w1, [x0]
  14:	ret

sanitizer_allocator_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x0
   8:	add	x19, sp, #0x20
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x0, x19
  14:	mov	x21, x1
  18:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  1c:	add	x1, x1, #0x0
  20:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  24:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  28:	mov	x3, x21
  2c:	mov	x2, x20
  30:	ldr	x0, [x0]
  34:	ldr	x1, [x0]
  38:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  44:	mov	x0, x19
  48:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000050 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>:
  50:	stp	x19, x20, [sp, #-80]!
  54:	mov	x2, x1
  58:	mov	x20, x0
  5c:	stp	x21, x22, [sp, #16]
  60:	add	x21, sp, #0x30
  64:	mov	x0, x21
  68:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  6c:	add	x1, x1, #0x0
  70:	stp	x23, x30, [sp, #32]
  74:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  78:	adrp	x2, 0 <_ZN11__sanitizer14PageSizeCachedE>
  7c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  80:	mov	x19, x2
  84:	ldr	x22, [x2]
  88:	ldr	x0, [x0]
  8c:	ldr	x23, [x0]
  90:	ldr	x0, [x22]
  94:	cbnz	x0, a0 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x50>
  98:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  9c:	str	x0, [x22]
  a0:	ldr	x2, [x19]
  a4:	mov	x1, x23
  a8:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  ac:	add	x0, x0, #0x0
  b0:	ldr	x3, [x2]
  b4:	mov	x2, x20
  b8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  bc:	mov	x0, x21
  c0:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  c4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000000c8 <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>:
  c8:	stp	x19, x20, [sp, #-64]!
  cc:	mov	x2, x1
  d0:	mov	x20, x0
  d4:	add	x19, sp, #0x20
  d8:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  dc:	mov	x0, x19
  e0:	add	x1, x1, #0x0
  e4:	str	x30, [sp, #16]
  e8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  ec:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  f0:	mov	x2, x20
  f4:	ldr	x0, [x0]
  f8:	ldr	x1, [x0]
  fc:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 100:	add	x0, x0, #0x0
 104:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 108:	mov	x0, x19
 10c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 110:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000114 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>:
 114:	stp	x19, x20, [sp, #-64]!
 118:	mov	x20, x1
 11c:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 120:	add	x19, sp, #0x20
 124:	add	x1, x1, #0x0
 128:	stp	x21, x30, [sp, #16]
 12c:	mov	x21, x0
 130:	mov	x0, x19
 134:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 138:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 13c:	mov	x3, x21
 140:	mov	x2, x20
 144:	ldr	x0, [x0]
 148:	ldr	x1, [x0]
 14c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 150:	add	x0, x0, #0x0
 154:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 158:	mov	x0, x19
 15c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 160:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000164 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>:
 164:	stp	x19, x20, [sp, #-64]!
 168:	mov	x2, x1
 16c:	mov	x20, x0
 170:	add	x19, sp, #0x20
 174:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 178:	mov	x0, x19
 17c:	add	x1, x1, #0x0
 180:	str	x30, [sp, #16]
 184:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 188:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 18c:	mov	x2, x20
 190:	mov	x3, #0x8                   	// #8
 194:	ldr	x0, [x0]
 198:	ldr	x1, [x0]
 19c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1a0:	add	x0, x0, #0x0
 1a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1a8:	mov	x0, x19
 1ac:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1b0:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001b4 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>:
 1b4:	stp	x19, x20, [sp, #-64]!
 1b8:	mov	x20, x0
 1bc:	add	x19, sp, #0x20
 1c0:	stp	x21, x30, [sp, #16]
 1c4:	mov	x0, x19
 1c8:	mov	x21, x1
 1cc:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1d0:	add	x1, x1, #0x0
 1d4:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1d8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1dc:	mov	x3, x21
 1e0:	mov	x2, x20
 1e4:	ldr	x0, [x0]
 1e8:	ldr	x1, [x0]
 1ec:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1f0:	add	x0, x0, #0x0
 1f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1f8:	mov	x0, x19
 1fc:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 200:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000204 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>:
 204:	stp	x19, x20, [sp, #-64]!
 208:	mov	x2, x1
 20c:	mov	x20, x0
 210:	add	x19, sp, #0x20
 214:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 218:	mov	x0, x19
 21c:	add	x1, x1, #0x0
 220:	str	x30, [sp, #16]
 224:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 228:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 22c:	mov	x2, x20
 230:	ldr	x0, [x0]
 234:	ldr	x1, [x0]
 238:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 23c:	add	x0, x0, #0x0
 240:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 244:	mov	x0, x19
 248:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 24c:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportC2EPKcPKNS_10StackTraceE:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x2
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x21, x1
  14:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
  18:	stp	x21, x20, [x19, #8]
  1c:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
  20:	strb	w0, [x19, #24]
  24:	ldp	x21, x30, [sp, #16]
  28:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  2c:	ldp	x19, x20, [sp], #32
  30:	tst	w0, #0xff
  34:	adrp	x2, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  38:	add	x0, x1, #0x0
  3c:	add	x1, x2, #0x0
  40:	csel	x1, x1, x0, ne  // ne = any
  44:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  48:	add	x0, x0, #0x0
  4c:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportD2Ev:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
   c:	ldrb	w2, [x0, #24]
  10:	add	x1, x1, #0x0
  14:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  18:	add	x0, x0, #0x0
  1c:	cmp	w2, #0x0
  20:	csel	x1, x1, x0, ne  // ne = any
  24:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  30:	ldr	x0, [x19, #16]
  34:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  38:	bl	0 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>
  3c:	ldp	x0, x1, [x19, #8]
  40:	mov	x2, #0x0                   	// #0
  44:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
  48:	mov	x0, x19
  4c:	ldp	x19, x30, [sp], #16
  50:	b	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>

sanitizer_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>:
   0:	str	x30, [sp, #-16]!
   4:	tst	w4, #0xff
   8:	b.ne	20 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x20>  // b.any
   c:	mov	x5, x1
  10:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  14:	mov	w6, w3
  18:	ldr	w3, [x1]
  1c:	cbz	w3, 30 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x30>
  20:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>
  30:	mov	w3, #0x1                   	// #1
  34:	mov	x4, x0
  38:	str	w3, [x1]
  3c:	mov	x3, x0
  40:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  44:	ldr	x1, [x0]
  48:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  54:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
  58:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  5c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  60:	add	x2, x2, #0x0
  64:	add	x0, x0, #0x0
  68:	mov	x4, #0x0                   	// #0
  6c:	mov	x3, #0x0                   	// #0
  70:	mov	w1, #0x35                  	// #53
  74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000078 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>:
  78:	stp	x19, x20, [sp, #-32]!
  7c:	mov	x19, x0
  80:	stp	x21, x30, [sp, #16]
  84:	cbz	x0, c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x4c>
  88:	mov	x21, x1
  8c:	cbz	x1, c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x4c>
  90:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  94:	mov	x20, x0
  98:	cbz	x0, a8 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x30>
  9c:	mov	x0, x21
  a0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  a4:	add	x19, x20, x0
  a8:	ldrb	w0, [x19]
  ac:	cmp	w0, #0x2e
  b0:	b.ne	c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x4c>  // b.any
  b4:	ldrb	w0, [x19, #1]
  b8:	cmp	w0, #0x2f
  bc:	b.ne	c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x4c>  // b.any
  c0:	add	x19, x19, #0x2
  c4:	mov	x0, x19
  c8:	ldp	x21, x30, [sp, #16]
  cc:	ldp	x19, x20, [sp], #32
  d0:	ret

00000000000000d4 <_ZN11__sanitizer15StripModuleNameEPKc>:
  d4:	stp	x19, x30, [sp, #-16]!
  d8:	mov	x19, x0
  dc:	cbz	x0, f0 <_ZN11__sanitizer15StripModuleNameEPKc+0x1c>
  e0:	mov	w1, #0x2f                  	// #47
  e4:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
  e8:	cbz	x0, f0 <_ZN11__sanitizer15StripModuleNameEPKc+0x1c>
  ec:	add	x19, x0, #0x1
  f0:	mov	x0, x19
  f4:	ldp	x19, x30, [sp], #16
  f8:	ret

00000000000000fc <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>:
  fc:	stp	x19, x20, [sp, #-32]!
 100:	mov	x1, #0x1000                	// #4096
 104:	adrp	x19, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 108:	add	x19, x19, #0x0
 10c:	stp	x21, x30, [sp, #16]
 110:	mov	x0, x19
 114:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
 118:	mov	x0, x19
 11c:	bl	d4 <_ZN11__sanitizer15StripModuleNameEPKc>
 120:	mov	x21, x0
 124:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 128:	cmp	x21, x19
 12c:	mov	x20, x0
 130:	b.eq	148 <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0+0x4c>  // b.none
 134:	mov	x2, x0
 138:	mov	x1, x21
 13c:	mov	x0, x19
 140:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 144:	strb	wzr, [x20, x19]
 148:	mov	x0, x20
 14c:	ldp	x21, x30, [sp, #16]
 150:	ldp	x19, x20, [sp], #32
 154:	ret

0000000000000158 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>:
 158:	cbz	x0, 1e0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x88>
 15c:	stp	x19, x30, [sp, #-16]!
 160:	mov	x19, x0
 164:	ldrb	w1, [x0]
 168:	cbz	w1, 1d4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x7c>
 16c:	cmp	x0, x19
 170:	b.cs	194 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x3c>  // b.hs, b.nlast
 174:	mov	x3, x0
 178:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 17c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 180:	mov	x4, x19
 184:	add	x2, x2, #0x0
 188:	add	x0, x0, #0x0
 18c:	mov	w1, #0x68                  	// #104
 190:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 194:	cmp	w1, #0x1b
 198:	b.ne	1c0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x68>  // b.any
 19c:	ldrb	w2, [x0, #1]
 1a0:	cmp	w2, #0x5b
 1a4:	b.ne	1c0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x68>  // b.any
 1a8:	mov	w1, #0x6d                  	// #109
 1ac:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 1b0:	ldrb	w1, [x0]
 1b4:	cbz	w1, 1d4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x7c>
 1b8:	add	x0, x0, #0x1
 1bc:	b	164 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0xc>
 1c0:	cmp	x0, x19
 1c4:	b.eq	1cc <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x74>  // b.none
 1c8:	strb	w1, [x19]
 1cc:	add	x19, x19, #0x1
 1d0:	b	1b8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x60>
 1d4:	strb	wzr, [x19]
 1d8:	ldp	x19, x30, [sp], #16
 1dc:	ret
 1e0:	ret

00000000000001e4 <_ZN11__sanitizer12LoadedModule5clearEv>:
 1e4:	stp	x19, x20, [sp, #-32]!
 1e8:	mov	x19, x0
 1ec:	add	x20, x0, #0x30
 1f0:	ldr	x0, [x0]
 1f4:	mov	x1, #0x0                   	// #0
 1f8:	str	x30, [sp, #16]
 1fc:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 200:	stp	xzr, xzr, [x19]
 204:	add	x0, x19, #0x1c
 208:	str	xzr, [x19, #16]
 20c:	mov	x2, #0x10                  	// #16
 210:	str	wzr, [x19, #24]
 214:	mov	w1, #0x0                   	// #0
 218:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 21c:	strb	wzr, [x19, #44]
 220:	ldr	x1, [x19, #48]
 224:	cbz	x1, 250 <_ZN11__sanitizer12LoadedModule5clearEv+0x6c>
 228:	ldr	x0, [x19, #56]
 22c:	ldr	x2, [x0]
 230:	str	x2, [x20, #8]
 234:	cbnz	x2, 23c <_ZN11__sanitizer12LoadedModule5clearEv+0x58>
 238:	str	xzr, [x20, #16]
 23c:	sub	x1, x1, #0x1
 240:	str	x1, [x20]
 244:	mov	x1, #0x0                   	// #0
 248:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 24c:	b	220 <_ZN11__sanitizer12LoadedModule5clearEv+0x3c>
 250:	ldr	x30, [sp, #16]
 254:	ldp	x19, x20, [sp], #32
 258:	ret

000000000000025c <_ZN11__sanitizer12LoadedModule3setEPKcm>:
 25c:	stp	x19, x20, [sp, #-32]!
 260:	mov	x19, x0
 264:	mov	x20, x2
 268:	stp	x21, x30, [sp, #16]
 26c:	mov	x21, x1
 270:	bl	1e4 <_ZN11__sanitizer12LoadedModule5clearEv>
 274:	mov	x0, x21
 278:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 27c:	ldp	x21, x30, [sp, #16]
 280:	stp	x0, x20, [x19]
 284:	ldp	x19, x20, [sp], #32
 288:	ret

000000000000028c <_ZN11__sanitizer12LoadedModule3setEPKcmNS_10ModuleArchEPhb>:
 28c:	stp	x19, x20, [sp, #-48]!
 290:	mov	x19, x0
 294:	mov	x20, x4
 298:	stp	x21, x22, [sp, #16]
 29c:	mov	w21, w3
 2a0:	and	w22, w5, #0xff
 2a4:	str	x30, [sp, #32]
 2a8:	bl	25c <_ZN11__sanitizer12LoadedModule3setEPKcm>
 2ac:	str	w21, [x19, #24]
 2b0:	mov	x1, x20
 2b4:	add	x0, x19, #0x1c
 2b8:	mov	x2, #0x10                  	// #16
 2bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2c0:	strb	w22, [x19, #44]
 2c4:	ldp	x21, x22, [sp, #16]
 2c8:	ldr	x30, [sp, #32]
 2cc:	ldp	x19, x20, [sp], #48
 2d0:	ret

00000000000002d4 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>:
 2d4:	stp	x19, x20, [sp, #-64]!
 2d8:	mov	x20, x0
 2dc:	mov	x0, #0x30                  	// #48
 2e0:	stp	x21, x22, [sp, #16]
 2e4:	mov	x22, x2
 2e8:	mov	x21, x5
 2ec:	mov	x2, #0x0                   	// #0
 2f0:	stp	x23, x24, [sp, #32]
 2f4:	mov	x24, x1
 2f8:	and	w23, w3, #0xff
 2fc:	mov	x1, #0x0                   	// #0
 300:	stp	x25, x30, [sp, #48]
 304:	and	w25, w4, #0xff
 308:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 30c:	stp	xzr, x24, [x0]
 310:	mov	x19, x0
 314:	add	x0, x0, #0x1a
 318:	stur	x22, [x0, #-10]
 31c:	sturb	w23, [x0, #-2]
 320:	sturb	w25, [x0, #-1]
 324:	cbnz	x21, 330 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x5c>
 328:	adrp	x21, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 32c:	add	x21, x21, #0x0
 330:	mov	x1, x21
 334:	mov	x2, #0x10                  	// #16
 338:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 33c:	mov	x0, x20
 340:	ldr	x1, [x0, #48]!
 344:	str	xzr, [x19]
 348:	cbnz	x1, 380 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0xac>
 34c:	stp	x19, x19, [x0, #8]
 350:	mov	x0, #0x1                   	// #1
 354:	str	x0, [x20, #48]
 358:	cbz	w23, 36c <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x98>
 35c:	ldr	x0, [x20, #16]
 360:	cmp	x0, x22
 364:	b.cs	36c <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x98>  // b.hs, b.nlast
 368:	str	x22, [x20, #16]
 36c:	ldp	x21, x22, [sp, #16]
 370:	ldp	x23, x24, [sp, #32]
 374:	ldp	x25, x30, [sp, #48]
 378:	ldp	x19, x20, [sp], #64
 37c:	ret
 380:	ldr	x2, [x0, #16]
 384:	add	x1, x1, #0x1
 388:	str	x19, [x2]
 38c:	str	x19, [x0, #16]
 390:	str	x1, [x20, #48]
 394:	b	358 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x84>

0000000000000398 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>:
 398:	ldr	x0, [x0, #56]
 39c:	cbz	x0, 3c0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x28>
 3a0:	ldr	x2, [x0, #8]
 3a4:	cmp	x2, x1
 3a8:	b.hi	3b8 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x20>  // b.pmore
 3ac:	ldr	x2, [x0, #16]
 3b0:	cmp	x2, x1
 3b4:	b.hi	3c8 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x30>  // b.pmore
 3b8:	ldr	x0, [x0]
 3bc:	b	39c <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x4>
 3c0:	mov	w0, #0x0                   	// #0
 3c4:	ret
 3c8:	mov	w0, #0x1                   	// #1
 3cc:	b	3c4 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x2c>

00000000000003d0 <_ZN11__sanitizer17IncreaseTotalMmapEm>:
 3d0:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 3d4:	ldr	x2, [x2]
 3d8:	ldr	x1, [x2, #128]
 3dc:	cbz	x1, 424 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x54>
 3e0:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 3e4:	add	x1, x1, #0x0
 3e8:	add	x1, x1, #0x8
 3ec:	ldxr	x3, [x1]
 3f0:	add	x4, x3, x0
 3f4:	stlxr	w5, x4, [x1]
 3f8:	cbnz	w5, 3ec <_ZN11__sanitizer17IncreaseTotalMmapEm+0x1c>
 3fc:	dmb	ish
 400:	ldr	x1, [x2, #128]
 404:	add	x0, x3, x0
 408:	cmp	x1, x0, lsr #20
 40c:	b.hi	424 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x54>  // b.pmore
 410:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 414:	add	x0, x0, #0x0
 418:	str	x30, [sp, #-16]!
 41c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 420:	bl	0 <_ZN11__sanitizer3DieEv>
 424:	ret

0000000000000428 <_ZN11__sanitizer17DecreaseTotalMmapEm>:
 428:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 42c:	ldr	x1, [x1]
 430:	ldr	x1, [x1, #128]
 434:	cbz	x1, 45c <_ZN11__sanitizer17DecreaseTotalMmapEm+0x34>
 438:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 43c:	add	x1, x1, #0x0
 440:	neg	x0, x0
 444:	add	x1, x1, #0x8
 448:	ldxr	x2, [x1]
 44c:	add	x2, x2, x0
 450:	stlxr	w3, x2, [x1]
 454:	cbnz	w3, 448 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x20>
 458:	dmb	ish
 45c:	ret

0000000000000460 <_ZN11__sanitizer13TemplateMatchEPKcS1_>:
 460:	cbnz	x1, 46c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xc>
 464:	mov	w0, #0x0                   	// #0
 468:	ret
 46c:	stp	x19, x20, [sp, #-80]!
 470:	mov	x20, x0
 474:	stp	x21, x22, [sp, #16]
 478:	mov	x21, x1
 47c:	stp	x23, x24, [sp, #32]
 480:	stp	x25, x26, [sp, #48]
 484:	str	x30, [sp, #64]
 488:	ldrb	w0, [x1]
 48c:	cbz	w0, 57c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x11c>
 490:	cbz	x20, 500 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 494:	ldrb	w0, [x20]
 498:	cmp	w0, #0x5e
 49c:	b.ne	4d4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x74>  // b.any
 4a0:	add	x20, x20, #0x1
 4a4:	mov	w26, #0x1                   	// #1
 4a8:	mov	w0, #0x0                   	// #0
 4ac:	mov	w24, #0x2a                  	// #42
 4b0:	mov	w25, #0x24                  	// #36
 4b4:	ldrb	w1, [x20]
 4b8:	cbz	w1, 500 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 4bc:	cmp	w1, #0x2a
 4c0:	b.ne	4f0 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x90>  // b.any
 4c4:	add	x19, x20, #0x1
 4c8:	mov	x1, x21
 4cc:	mov	w0, #0x1                   	// #1
 4d0:	b	4e0 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x80>
 4d4:	mov	w26, #0x0                   	// #0
 4d8:	b	4a8 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x48>
 4dc:	cbz	x19, 500 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 4e0:	mov	x21, x1
 4e4:	mov	x20, x19
 4e8:	mov	w26, #0x0                   	// #0
 4ec:	b	4b4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x54>
 4f0:	ldrb	w2, [x21]
 4f4:	cmp	w1, #0x24
 4f8:	b.ne	508 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa8>  // b.any
 4fc:	cbnz	w2, 580 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x120>
 500:	mov	w0, #0x1                   	// #1
 504:	b	580 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x120>
 508:	cbz	w2, 57c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x11c>
 50c:	mov	w1, #0x2a                  	// #42
 510:	mov	x0, x20
 514:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 518:	mov	x19, x0
 51c:	mov	w1, #0x24                  	// #36
 520:	mov	x0, x20
 524:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 528:	mov	x22, x0
 52c:	cbz	x19, 598 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x138>
 530:	cmp	x0, #0x0
 534:	ccmp	x19, x0, #0x0, ne  // ne = any
 538:	csel	x19, x19, x0, ls  // ls = plast
 53c:	strb	wzr, [x19]
 540:	mov	x1, x20
 544:	mov	x0, x21
 548:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 54c:	mov	x23, x0
 550:	mov	x0, x20
 554:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 558:	add	x1, x23, x0
 55c:	cbz	x19, 56c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 560:	cmp	x22, x19
 564:	csel	w0, w25, w24, eq  // eq = none
 568:	strb	w0, [x19]
 56c:	cbz	x23, 57c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x11c>
 570:	cmp	x23, x21
 574:	csel	w0, w26, wzr, ne  // ne = any
 578:	cbz	w0, 4dc <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x7c>
 57c:	mov	w0, #0x0                   	// #0
 580:	ldp	x21, x22, [sp, #16]
 584:	ldp	x23, x24, [sp, #32]
 588:	ldp	x25, x26, [sp, #48]
 58c:	ldr	x30, [sp, #64]
 590:	ldp	x19, x20, [sp], #80
 594:	ret
 598:	cbz	x0, 540 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xe0>
 59c:	mov	x19, x0
 5a0:	b	53c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xdc>

00000000000005a4 <_ZN11__sanitizer14GetProcessNameEv>:
 5a4:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 5a8:	add	x0, x0, #0x0
 5ac:	ret

00000000000005b0 <_ZN11__sanitizer17UpdateProcessNameEv>:
 5b0:	b	fc <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>

00000000000005b4 <_ZN11__sanitizer15CacheBinaryNameEv>:
 5b4:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 5b8:	add	x0, x1, #0x0
 5bc:	ldrb	w1, [x1]
 5c0:	cbnz	w1, 5d8 <_ZN11__sanitizer15CacheBinaryNameEv+0x24>
 5c4:	str	x30, [sp, #-16]!
 5c8:	mov	x1, #0x1000                	// #4096
 5cc:	bl	0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
 5d0:	ldr	x30, [sp], #16
 5d4:	b	fc <_ZN11__sanitizerL15ReadProcessNameEPcm.constprop.0>
 5d8:	ret

00000000000005dc <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>:
 5dc:	stp	x19, x20, [sp, #-32]!
 5e0:	mov	x20, x0
 5e4:	mov	x19, x1
 5e8:	stp	x21, x30, [sp, #16]
 5ec:	adrp	x21, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 5f0:	bl	5b4 <_ZN11__sanitizer15CacheBinaryNameEv>
 5f4:	add	x21, x21, #0x0
 5f8:	mov	x0, x21
 5fc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 600:	cbz	x19, 624 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x48>
 604:	sub	x19, x19, #0x1
 608:	mov	x1, x21
 60c:	cmp	x19, x0
 610:	csel	x19, x19, x0, ls  // ls = plast
 614:	mov	x0, x20
 618:	mov	x2, x19
 61c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 620:	strb	wzr, [x20, x19]
 624:	mov	x0, x19
 628:	ldp	x21, x30, [sp, #16]
 62c:	ldp	x19, x20, [sp], #32
 630:	ret

0000000000000634 <_ZN11__sanitizer12PrintCmdlineEv>:
 634:	stp	x19, x20, [sp, #-32]!
 638:	str	x30, [sp, #16]
 63c:	bl	0 <_ZN11__sanitizer7GetArgvEv>
 640:	cbz	x0, 684 <_ZN11__sanitizer12PrintCmdlineEv+0x50>
 644:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 648:	add	x20, x20, #0x0
 64c:	mov	x19, x0
 650:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 654:	add	x0, x0, #0x0
 658:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 65c:	ldr	x1, [x19], #8
 660:	cbz	x1, 670 <_ZN11__sanitizer12PrintCmdlineEv+0x3c>
 664:	mov	x0, x20
 668:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 66c:	b	65c <_ZN11__sanitizer12PrintCmdlineEv+0x28>
 670:	ldr	x30, [sp, #16]
 674:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 678:	ldp	x19, x20, [sp], #32
 67c:	add	x0, x0, #0x0
 680:	b	0 <_ZN11__sanitizer6PrintfEPKcz>
 684:	ldr	x30, [sp, #16]
 688:	ldp	x19, x20, [sp], #32
 68c:	ret

0000000000000690 <_ZN11__sanitizer14RunMallocHooksEPKvm>:
 690:	stp	x19, x20, [sp, #-48]!
 694:	adrp	x19, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 698:	add	x19, x19, #0x0
 69c:	add	x19, x19, #0x10
 6a0:	stp	x21, x22, [sp, #16]
 6a4:	mov	x21, x0
 6a8:	mov	x22, x1
 6ac:	mov	x20, #0x0                   	// #0
 6b0:	str	x30, [sp, #32]
 6b4:	lsl	x0, x20, #4
 6b8:	ldr	x2, [x0, x19]
 6bc:	cbz	x2, 6d8 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x48>
 6c0:	mov	x1, x22
 6c4:	mov	x0, x21
 6c8:	add	x20, x20, #0x1
 6cc:	blr	x2
 6d0:	cmp	x20, #0x5
 6d4:	b.ne	6b4 <_ZN11__sanitizer14RunMallocHooksEPKvm+0x24>  // b.any
 6d8:	ldp	x21, x22, [sp, #16]
 6dc:	ldr	x30, [sp, #32]
 6e0:	ldp	x19, x20, [sp], #48
 6e4:	ret

00000000000006e8 <_ZN11__sanitizer12RunFreeHooksEPKv>:
 6e8:	stp	x19, x20, [sp, #-32]!
 6ec:	adrp	x19, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6f0:	add	x19, x19, #0x0
 6f4:	add	x19, x19, #0x10
 6f8:	stp	x21, x30, [sp, #16]
 6fc:	mov	x21, x0
 700:	mov	x20, #0x0                   	// #0
 704:	add	x0, x19, x20
 708:	ldr	x1, [x0, #8]
 70c:	cbz	x1, 724 <_ZN11__sanitizer12RunFreeHooksEPKv+0x3c>
 710:	mov	x0, x21
 714:	add	x20, x20, #0x10
 718:	blr	x1
 71c:	cmp	x20, #0x50
 720:	b.ne	704 <_ZN11__sanitizer12RunFreeHooksEPKv+0x1c>  // b.any
 724:	ldp	x21, x30, [sp, #16]
 728:	ldp	x19, x20, [sp], #32
 72c:	ret

0000000000000730 <__sanitizer_report_error_summary>:
 730:	mov	x1, x0
 734:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 738:	add	x0, x0, #0x0
 73c:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

0000000000000740 <__sanitizer_acquire_crash_state>:
 740:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 744:	add	x0, x0, #0x0
 748:	add	x0, x0, #0x60
 74c:	mov	w2, #0x1                   	// #1
 750:	ldxrb	w1, [x0]
 754:	stxrb	w3, w2, [x0]
 758:	cbnz	w3, 750 <__sanitizer_acquire_crash_state+0x10>
 75c:	tst	w1, #0xff
 760:	dmb	ish
 764:	cset	w0, eq  // eq = none
 768:	ret

000000000000076c <__sanitizer_install_malloc_and_free_hooks>:
 76c:	cmp	x0, #0x0
 770:	mov	x4, x0
 774:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 778:	b.eq	7c4 <__sanitizer_install_malloc_and_free_hooks+0x58>  // b.none
 77c:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 780:	add	x3, x2, #0x0
 784:	add	x3, x3, #0x10
 788:	mov	w0, #0x0                   	// #0
 78c:	ldr	x6, [x3]
 790:	mov	w5, w0
 794:	add	w0, w0, #0x1
 798:	cbnz	x6, 7b8 <__sanitizer_install_malloc_and_free_hooks+0x4c>
 79c:	add	x2, x2, #0x0
 7a0:	sbfiz	x3, x5, #4, #32
 7a4:	add	x2, x2, #0x10
 7a8:	add	x5, x2, w5, sxtw #4
 7ac:	str	x4, [x2, x3]
 7b0:	str	x1, [x5, #8]
 7b4:	ret
 7b8:	add	x3, x3, #0x10
 7bc:	cmp	w0, #0x5
 7c0:	b.ne	78c <__sanitizer_install_malloc_and_free_hooks+0x20>  // b.any
 7c4:	mov	w0, #0x0                   	// #0
 7c8:	b	7b4 <__sanitizer_install_malloc_and_free_hooks+0x48>

00000000000007cc <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>:
 7cc:	stp	x19, x20, [sp, #-64]!
 7d0:	mov	x20, x0
 7d4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 7d8:	stp	x21, x30, [sp, #16]
 7dc:	ldr	x0, [x0]
 7e0:	ldrb	w0, [x0, #60]
 7e4:	cbz	w0, 830 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x64>
 7e8:	add	x21, sp, #0x20
 7ec:	mov	x19, x1
 7f0:	mov	x0, x21
 7f4:	mov	x1, #0x400                 	// #1024
 7f8:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 7fc:	cbnz	x19, 808 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x3c>
 800:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 804:	ldr	x19, [x0]
 808:	mov	x3, x20
 80c:	mov	x2, x19
 810:	mov	x0, x21
 814:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 818:	add	x1, x1, #0x0
 81c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 820:	ldr	x0, [sp, #32]
 824:	bl	730 <__sanitizer_report_error_summary>
 828:	ldp	x0, x1, [sp, #32]
 82c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 830:	ldp	x21, x30, [sp, #16]
 834:	ldp	x19, x20, [sp], #64
 838:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	mov	x19, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x24>
  58:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  5c:	add	x22, x0, #0x0
  60:	mov	x21, x0
  64:	ldr	x1, [x22, #104]
  68:	cbnz	x1, 74 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x74>
  6c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  70:	str	x0, [x22, #104]
  74:	add	x0, x21, #0x0
  78:	ldr	x0, [x0, #104]
  7c:	sub	x4, x0, #0x1
  80:	tst	x4, x0
  84:	b.eq	98 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x98>  // b.none
  88:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  94:	bl	0 <_ZN11__sanitizer3DieEv>
  98:	add	x19, x19, x4
  9c:	neg	x0, x0
  a0:	and	x19, x19, x0
  a4:	mov	w2, #0x0                   	// #0
  a8:	mov	x0, x19
  ac:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  b0:	add	x1, x1, #0x0
  b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b8:	ldr	x1, [x20]
  bc:	mov	x21, x0
  c0:	ldr	x2, [x20, #16]
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

sanitizer_common_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>:
   0:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
   4:	ldr	x3, [x1]
   8:	cbz	x3, 2c <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE+0x2c>
   c:	str	x30, [sp, #-16]!
  10:	adrp	x2, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  14:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  18:	add	x2, x2, #0x0
  1c:	add	x0, x0, #0x0
  20:	mov	x4, #0x0                   	// #0
  24:	mov	w1, #0x16                  	// #22
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	str	x0, [x1]
  30:	ret

0000000000000034 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  34:	mov	x0, #0x0                   	// #0
  38:	ret

000000000000003c <_ZN11__sanitizer16BackgroundThreadEPv>:
  3c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  40:	stp	x19, x20, [sp, #-112]!
  44:	mov	w20, #0x0                   	// #0
  48:	ldr	x0, [x0]
  4c:	stp	x23, x24, [sp, #32]
  50:	adrp	x23, 0 <_ZN11__sanitizer17current_verbosityE>
  54:	adrp	x24, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  58:	stp	x21, x22, [sp, #16]
  5c:	ldr	x23, [x23]
  60:	stp	x25, x26, [sp, #48]
  64:	adrp	x25, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  68:	ldp	x22, x21, [x0, #136]
  6c:	add	x25, x25, #0x0
  70:	ldrb	w0, [x0, #152]
  74:	mov	x26, #0x0                   	// #0
  78:	str	w0, [sp, #100]
  7c:	ldr	x0, [x24]
  80:	stp	x27, x28, [sp, #64]
  84:	mov	x27, #0x0                   	// #0
  88:	str	x30, [sp, #80]
  8c:	str	d8, [sp, #88]
  90:	fmov	d8, xzr
  94:	str	x0, [sp, #104]
  98:	mov	w0, #0x64                  	// #100
  9c:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
  a0:	bl	0 <_ZN11__sanitizer6GetRSSEv>
  a4:	lsr	x28, x0, #20
  a8:	ldr	w0, [x23]
  ac:	cbz	w0, 128 <_ZN11__sanitizer16BackgroundThreadEPv+0xec>
  b0:	mov	x0, #0xb                   	// #11
  b4:	mov	x1, #0xa                   	// #10
  b8:	mul	x0, x26, x0
  bc:	udiv	x0, x0, x1
  c0:	cmp	x0, x28
  c4:	b.cs	e4 <_ZN11__sanitizer16BackgroundThreadEPv+0xa8>  // b.hs, b.nlast
  c8:	ldr	x0, [x24]
  cc:	mov	x2, x28
  d0:	mov	x26, x28
  d4:	ldr	x1, [x0]
  d8:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  e4:	bl	34 <_ZN11__sanitizer18StackDepotGetStatsEv>
  e8:	mov	x19, x0
  ec:	cbz	x0, 128 <_ZN11__sanitizer16BackgroundThreadEPv+0xec>
  f0:	mov	x0, #0xb                   	// #11
  f4:	mov	x1, #0xa                   	// #10
  f8:	ldr	x3, [x19, #8]
  fc:	mul	x0, x27, x0
 100:	udiv	x0, x0, x1
 104:	cmp	x0, x3
 108:	b.cs	128 <_ZN11__sanitizer16BackgroundThreadEPv+0xec>  // b.hs, b.nlast
 10c:	ldr	x0, [sp, #104]
 110:	lsr	x3, x3, #20
 114:	ldr	x2, [x19]
 118:	ldr	x1, [x0]
 11c:	mov	x0, x25
 120:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 124:	ldr	x27, [x19, #8]
 128:	cmp	x22, #0x0
 12c:	ccmp	x22, x28, #0x2, ne  // ne = any
 130:	b.cs	15c <_ZN11__sanitizer16BackgroundThreadEPv+0x120>  // b.hs, b.nlast
 134:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 138:	mov	x3, x28
 13c:	mov	x2, x22
 140:	ldr	x0, [x0]
 144:	ldr	x1, [x0]
 148:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 154:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
 158:	bl	0 <_ZN11__sanitizer3DieEv>
 15c:	cbz	x21, 210 <_ZN11__sanitizer16BackgroundThreadEPv+0x1d4>
 160:	cmp	x21, x28
 164:	eor	w0, w20, #0x1
 168:	cset	w19, cc  // cc = lo, ul, last
 16c:	ands	w19, w19, w0
 170:	b.eq	1f0 <_ZN11__sanitizer16BackgroundThreadEPv+0x1b4>  // b.none
 174:	ldr	x0, [x24]
 178:	mov	x3, x28
 17c:	mov	x2, x21
 180:	ldr	x1, [x0]
 184:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 188:	add	x0, x0, #0x0
 18c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 190:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 194:	ldr	x1, [x0]
 198:	cbz	x1, 1a4 <_ZN11__sanitizer16BackgroundThreadEPv+0x168>
 19c:	mov	w0, #0x1                   	// #1
 1a0:	blr	x1
 1a4:	ldr	w0, [sp, #100]
 1a8:	cbz	w0, 1e8 <_ZN11__sanitizer16BackgroundThreadEPv+0x1ac>
 1ac:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1b0:	scvtf	d0, d8
 1b4:	ldr	d1, [x0]
 1b8:	fmul	d0, d0, d1
 1bc:	scvtf	d1, x28
 1c0:	fcmpe	d1, d0
 1c4:	b.le	1e8 <_ZN11__sanitizer16BackgroundThreadEPv+0x1ac>
 1c8:	mov	x1, x28
 1cc:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1d0:	add	x0, x0, #0x0
 1d4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 1d8:	mov	x1, #0x14                  	// #20
 1dc:	mov	x0, #0x5a                  	// #90
 1e0:	bl	0 <__sanitizer_print_memory_profile>
 1e4:	fmov	d8, x28
 1e8:	mov	w20, w19
 1ec:	b	98 <_ZN11__sanitizer16BackgroundThreadEPv+0x5c>
 1f0:	cmp	w20, #0x0
 1f4:	ccmp	x21, x28, #0x0, ne  // ne = any
 1f8:	b.cc	210 <_ZN11__sanitizer16BackgroundThreadEPv+0x1d4>  // b.lo, b.ul, b.last
 1fc:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 200:	ldr	x1, [x0]
 204:	cbz	x1, 1a4 <_ZN11__sanitizer16BackgroundThreadEPv+0x168>
 208:	mov	w0, #0x0                   	// #0
 20c:	b	1a0 <_ZN11__sanitizer16BackgroundThreadEPv+0x164>
 210:	mov	w19, w20
 214:	b	1a4 <_ZN11__sanitizer16BackgroundThreadEPv+0x168>

0000000000000218 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv>:
 218:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 21c:	ldr	x0, [x0]
 220:	ldp	x1, x2, [x0, #136]
 224:	orr	x1, x1, x2
 228:	cbnz	x1, 234 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x1c>
 22c:	ldrb	w0, [x0, #152]
 230:	cbz	w0, 250 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 234:	adrp	x0, 0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
 238:	ldr	x0, [x0]
 23c:	cbz	x0, 250 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 240:	mov	x1, #0x0                   	// #0
 244:	adrp	x0, 3c <_ZN11__sanitizer16BackgroundThreadEPv>
 248:	add	x0, x0, #0x0
 24c:	b	0 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>
 250:	ret

0000000000000254 <_ZN11__sanitizer21SetSandboxingCallbackEPFvvE>:
 254:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 258:	str	x0, [x1]
 25c:	ret

0000000000000260 <__sanitizer_sandbox_on_notify>:
 260:	str	x30, [sp, #-16]!
 264:	bl	0 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>
 268:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 26c:	ldr	x0, [x0]
 270:	cbz	x0, 280 <__sanitizer_sandbox_on_notify+0x20>
 274:	ldr	x30, [sp], #16
 278:	mov	x16, x0
 27c:	br	x16
 280:	ldr	x30, [sp], #16
 284:	ret

0000000000000288 <_ZN11__sanitizer13WriteToSyslogEPKc>:
 288:	stp	x19, x20, [sp, #-64]!
 28c:	mov	x1, #0x10000               	// #65536
 290:	mov	x20, x0
 294:	add	x19, sp, #0x20
 298:	str	x30, [sp, #16]
 29c:	mov	x0, x19
 2a0:	bl	0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 2a4:	mov	x0, x19
 2a8:	mov	x2, x20
 2ac:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 2b0:	add	x1, x1, #0x0
 2b4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2b8:	ldr	x19, [sp, #32]
 2bc:	mov	x0, x19
 2c0:	mov	w1, #0xa                   	// #10
 2c4:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 2c8:	mov	x20, x0
 2cc:	cbz	x0, 2e4 <_ZN11__sanitizer13WriteToSyslogEPKc+0x5c>
 2d0:	strb	wzr, [x0]
 2d4:	mov	x0, x19
 2d8:	add	x19, x20, #0x1
 2dc:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 2e0:	b	2bc <_ZN11__sanitizer13WriteToSyslogEPKc+0x34>
 2e4:	ldrb	w0, [x19]
 2e8:	cbz	w0, 2f4 <_ZN11__sanitizer13WriteToSyslogEPKc+0x6c>
 2ec:	mov	x0, x19
 2f0:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 2f4:	ldp	x0, x1, [sp, #32]
 2f8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2fc:	ldr	x30, [sp, #16]
 300:	ldp	x19, x20, [sp], #64
 304:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	mov	x19, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x24>
  58:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  5c:	mov	x21, x0
  60:	ldr	x22, [x0]
  64:	ldr	x1, [x22]
  68:	cbnz	x1, 74 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x74>
  6c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  70:	str	x0, [x22]
  74:	ldr	x0, [x21]
  78:	ldr	x0, [x0]
  7c:	sub	x4, x0, #0x1
  80:	tst	x4, x0
  84:	b.eq	98 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x98>  // b.none
  88:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  94:	bl	0 <_ZN11__sanitizer3DieEv>
  98:	add	x19, x19, x4
  9c:	neg	x0, x0
  a0:	and	x19, x19, x0
  a4:	mov	w2, #0x0                   	// #0
  a8:	mov	x0, x19
  ac:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  b0:	add	x1, x1, #0x0
  b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b8:	ldr	x1, [x20]
  bc:	mov	x21, x0
  c0:	ldr	x2, [x20, #16]
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

sanitizer_coverage_libcdep_new.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x2
  14:	mov	x21, x3
  18:	stp	x23, x30, [sp, #32]
  1c:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
  20:	cbnz	x0, 44 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0x44>
  24:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  28:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  2c:	add	x2, x2, #0x0
  30:	add	x0, x0, #0x0
  34:	mov	x4, #0x0                   	// #0
  38:	mov	x3, #0x0                   	// #0
  3c:	mov	w1, #0x28                  	// #40
  40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  44:	mov	x20, x0
  48:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  4c:	ldr	x0, [x0]
  50:	ldr	x23, [x0, #168]
  54:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  58:	mov	x4, x20
  5c:	mov	x5, x0
  60:	mov	x3, x23
  64:	adrp	x6, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  68:	add	x6, x6, #0x0
  6c:	mov	x1, #0x1000                	// #4096
  70:	mov	x0, x19
  74:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  78:	add	x2, x2, #0x0
  7c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  80:	add	x2, sp, #0x3c
  84:	mov	x0, x19
  88:	mov	w1, #0x1                   	// #1
  8c:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
  90:	mov	w20, w0
  94:	cmn	w0, #0x1
  98:	b.ne	b0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xb0>  // b.any
  9c:	ldr	w2, [sp, #60]
  a0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  a4:	mov	x1, x19
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  b0:	mov	w0, w20
  b4:	mov	x4, #0x0                   	// #0
  b8:	mov	x3, #0x0                   	// #0
  bc:	mov	x2, #0x8                   	// #8
  c0:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  c4:	add	x1, x1, #0x0
  c8:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  cc:	lsl	x2, x21, #3
  d0:	mov	x1, x22
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	x3, #0x0                   	// #0
  dc:	mov	w0, w20
  e0:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  e4:	mov	w0, w20
  e8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  ec:	mov	x2, x21
  f0:	mov	x1, x19
  f4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 100:	ldp	x21, x22, [sp, #16]
 104:	ldp	x23, x30, [sp, #32]
 108:	ldp	x19, x20, [sp], #64
 10c:	ret

0000000000000110 <_ZN11__sanitizer18InitializeCoverageEbPKc>:
 110:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 114:	ldrb	w2, [x1]
 118:	cbnz	w2, 144 <_ZN11__sanitizer18InitializeCoverageEbPKc+0x34>
 11c:	stp	x19, x30, [sp, #-16]!
 120:	adrp	x19, 358 <__sanitizer_cov_dump>
 124:	and	w0, w0, #0xff
 128:	ldr	x19, [x19]
 12c:	strb	w0, [x1]
 130:	mov	x0, x19
 134:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 138:	mov	x0, x19
 13c:	ldp	x19, x30, [sp], #16
 140:	b	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 144:	ret

0000000000000148 <__sanitizer_cov_trace_cmp>:
 148:	ret

000000000000014c <__sanitizer_cov_trace_cmp1>:
 14c:	ret

0000000000000150 <__sanitizer_cov_trace_cmp2>:
 150:	ret

0000000000000154 <__sanitizer_cov_trace_cmp4>:
 154:	ret

0000000000000158 <__sanitizer_cov_trace_cmp8>:
 158:	ret

000000000000015c <__sanitizer_cov_trace_const_cmp1>:
 15c:	ret

0000000000000160 <__sanitizer_cov_trace_const_cmp2>:
 160:	ret

0000000000000164 <__sanitizer_cov_trace_const_cmp4>:
 164:	ret

0000000000000168 <__sanitizer_cov_trace_const_cmp8>:
 168:	ret

000000000000016c <__sanitizer_cov_trace_switch>:
 16c:	ret

0000000000000170 <__sanitizer_cov_trace_div4>:
 170:	ret

0000000000000174 <__sanitizer_cov_trace_div8>:
 174:	ret

0000000000000178 <__sanitizer_cov_trace_gep>:
 178:	ret

000000000000017c <__sanitizer_cov_trace_pc_indir>:
 17c:	ret

0000000000000180 <__sanitizer_cov_8bit_counters_init>:
 180:	ret

0000000000000184 <__sanitizer_cov_pcs_init>:
 184:	ret

0000000000000188 <__sanitizer_dump_coverage>:
 188:	cbz	x1, 320 <__sanitizer_dump_coverage+0x198>
 18c:	stp	x19, x20, [sp, #-128]!
 190:	mov	x2, #0x0                   	// #0
 194:	stp	x21, x22, [sp, #16]
 198:	mov	x21, x1
 19c:	mov	x1, #0x0                   	// #0
 1a0:	stp	x23, x24, [sp, #32]
 1a4:	mov	x24, x0
 1a8:	mov	x0, #0x1000                	// #4096
 1ac:	stp	x25, x26, [sp, #48]
 1b0:	lsl	x20, x21, #3
 1b4:	stp	x27, x28, [sp, #64]
 1b8:	adrp	x27, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1bc:	mov	w28, #0x0                   	// #0
 1c0:	str	x30, [sp, #80]
 1c4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1c8:	mov	x2, #0x0                   	// #0
 1cc:	mov	x1, #0x0                   	// #0
 1d0:	mov	x23, x0
 1d4:	mov	x0, #0x1000                	// #4096
 1d8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1dc:	mov	x22, x0
 1e0:	mov	x2, #0x0                   	// #0
 1e4:	mov	x0, x20
 1e8:	mov	x1, #0x0                   	// #0
 1ec:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1f0:	mov	x2, x20
 1f4:	mov	x1, x24
 1f8:	mov	x19, x0
 1fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 200:	mov	x0, x19
 204:	mov	x1, x21
 208:	mov	w2, #0x0                   	// #0
 20c:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 210:	add	x0, x27, #0x0
 214:	mov	x24, #0x0                   	// #0
 218:	mov	x20, #0x0                   	// #0
 21c:	str	xzr, [sp, #104]
 220:	str	x0, [sp, #120]
 224:	ldr	x27, [x19, x20, lsl #3]
 228:	add	x26, x19, x20, lsl #3
 22c:	cbz	x27, 254 <__sanitizer_dump_coverage+0xcc>
 230:	mov	x3, x26
 234:	mov	x0, x27
 238:	mov	x2, #0x0                   	// #0
 23c:	mov	x1, #0x0                   	// #0
 240:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 244:	cbnz	w0, 2b4 <__sanitizer_dump_coverage+0x12c>
 248:	ldr	x0, [sp, #120]
 24c:	mov	x1, x27
 250:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 254:	add	x20, x20, #0x1
 258:	cmp	x21, x20
 25c:	b.ne	224 <__sanitizer_dump_coverage+0x9c>  // b.any
 260:	cbz	w28, 278 <__sanitizer_dump_coverage+0xf0>
 264:	sub	x3, x21, x24
 268:	add	x2, x19, x24, lsl #3
 26c:	mov	x1, x22
 270:	mov	x0, x23
 274:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 278:	mov	x0, x23
 27c:	mov	x1, #0x0                   	// #0
 280:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 284:	mov	x0, x22
 288:	mov	x1, #0x0                   	// #0
 28c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 290:	mov	x0, x19
 294:	mov	x1, #0x0                   	// #0
 298:	ldp	x21, x22, [sp, #16]
 29c:	ldp	x23, x24, [sp, #32]
 2a0:	ldp	x25, x26, [sp, #48]
 2a4:	ldp	x27, x28, [sp, #64]
 2a8:	ldr	x30, [sp, #80]
 2ac:	ldp	x19, x20, [sp], #128
 2b0:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2b4:	ldr	x0, [x19, x20, lsl #3]
 2b8:	sub	x0, x27, x0
 2bc:	str	x0, [sp, #112]
 2c0:	ldp	x0, x1, [sp, #104]
 2c4:	cmp	x0, x1
 2c8:	eor	w0, w28, #0x1
 2cc:	cset	w25, ne  // ne = any
 2d0:	orr	w25, w25, w0
 2d4:	cbz	w25, 318 <__sanitizer_dump_coverage+0x190>
 2d8:	cbz	w28, 2f0 <__sanitizer_dump_coverage+0x168>
 2dc:	sub	x3, x20, x24
 2e0:	add	x2, x19, x24, lsl #3
 2e4:	mov	x1, x22
 2e8:	mov	x0, x23
 2ec:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 2f0:	mov	x3, x26
 2f4:	mov	x1, x22
 2f8:	mov	x0, x27
 2fc:	mov	x2, #0x1000                	// #4096
 300:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 304:	mov	x24, x20
 308:	ldr	x0, [sp, #112]
 30c:	mov	w28, w25
 310:	str	x0, [sp, #104]
 314:	b	254 <__sanitizer_dump_coverage+0xcc>
 318:	mov	w28, #0x1                   	// #1
 31c:	b	254 <__sanitizer_dump_coverage+0xcc>
 320:	ret

0000000000000324 <__sanitizer_dump_trace_pc_guard_coverage>:
 324:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 328:	add	x0, x0, #0x0
 32c:	add	x2, x0, #0x8
 330:	ldrb	w0, [x0, #8]
 334:	cbz	w0, 354 <__sanitizer_dump_trace_pc_guard_coverage+0x30>
 338:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 33c:	ldr	x0, [x0]
 340:	ldrb	w0, [x0, #161]
 344:	cbz	w0, 354 <__sanitizer_dump_trace_pc_guard_coverage+0x30>
 348:	ldr	x0, [x2, #8]
 34c:	ldr	x1, [x2, #24]
 350:	b	188 <__sanitizer_dump_coverage>
 354:	ret

0000000000000358 <__sanitizer_cov_dump>:
 358:	b	324 <__sanitizer_dump_trace_pc_guard_coverage>

000000000000035c <__sanitizer_cov_trace_pc_guard>:
 35c:	ldr	w1, [x0]
 360:	cbz	w1, 398 <__sanitizer_cov_trace_pc_guard+0x3c>
 364:	stp	x19, x30, [sp, #-16]!
 368:	sub	w1, w1, #0x1
 36c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 370:	add	x0, x0, #0x0
 374:	mov	x19, x30
 378:	add	x0, x0, #0x10
 37c:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 380:	ldr	x1, [x0]
 384:	cbnz	x1, 390 <__sanitizer_cov_trace_pc_guard+0x34>
 388:	sub	x19, x19, #0x1
 38c:	str	x19, [x0]
 390:	ldp	x19, x30, [sp], #16
 394:	ret
 398:	ret

000000000000039c <__sanitizer_cov_reset>:
 39c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3a0:	add	x0, x0, #0x0
 3a4:	stp	x19, x30, [sp, #-16]!
 3a8:	add	x19, x0, #0x8
 3ac:	mov	x1, #0x0                   	// #0
 3b0:	add	x0, x0, #0x10
 3b4:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3b8:	ldr	x2, [x19, #24]
 3bc:	mov	w1, #0x0                   	// #0
 3c0:	ldp	x19, x30, [sp], #16
 3c4:	lsl	x2, x2, #3
 3c8:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

00000000000003cc <__sanitizer_cov_trace_pc_guard_init>:
 3cc:	cmp	x0, x1
 3d0:	b.eq	508 <__sanitizer_cov_trace_pc_guard_init+0x13c>  // b.none
 3d4:	stp	x19, x20, [sp, #-48]!
 3d8:	mov	x19, x0
 3dc:	ldr	w0, [x0]
 3e0:	stp	x21, x22, [sp, #16]
 3e4:	str	x30, [sp, #32]
 3e8:	cbnz	w0, 4f8 <__sanitizer_cov_trace_pc_guard_init+0x12c>
 3ec:	adrp	x20, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3f0:	add	x0, x20, #0x0
 3f4:	mov	x21, x1
 3f8:	add	x22, x0, #0x8
 3fc:	ldrb	w1, [x0, #8]
 400:	cbnz	w1, 440 <__sanitizer_cov_trace_pc_guard_init+0x74>
 404:	mov	w1, #0x1                   	// #1
 408:	strb	w1, [x0, #8]
 40c:	bl	0 <_ZN8__sancov21InitializeSancovFlagsEv>
 410:	ldr	w0, [x19]
 414:	stp	xzr, xzr, [x22, #8]
 418:	str	xzr, [x22, #24]
 41c:	cbz	w0, 440 <__sanitizer_cov_trace_pc_guard_init+0x74>
 420:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 424:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 428:	add	x2, x2, #0x0
 42c:	add	x0, x0, #0x0
 430:	mov	x4, #0x0                   	// #0
 434:	mov	x3, #0x0                   	// #0
 438:	mov	w1, #0x77                  	// #119
 43c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 440:	mov	x0, x19
 444:	cmp	x19, x21
 448:	b.ne	46c <__sanitizer_cov_trace_pc_guard_init+0xa0>  // b.any
 44c:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 450:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 454:	mov	x4, x19
 458:	mov	x3, x19
 45c:	add	x2, x2, #0x0
 460:	add	x0, x0, #0x0
 464:	mov	w1, #0x78                  	// #120
 468:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 46c:	add	x1, x20, #0x0
 470:	ldr	x1, [x1, #32]
 474:	mov	w2, w1
 478:	cmp	x21, x19
 47c:	b.ls	48c <__sanitizer_cov_trace_pc_guard_init+0xc0>  // b.plast
 480:	add	w2, w2, #0x1
 484:	str	w2, [x19], #4
 488:	b	478 <__sanitizer_cov_trace_pc_guard_init+0xac>
 48c:	add	x19, x21, #0x3
 490:	sub	x19, x19, x0
 494:	sub	x0, x0, #0x3
 498:	cmp	x21, x0
 49c:	lsr	x19, x19, #2
 4a0:	csel	w19, w19, wzr, cs  // cs = hs, nlast
 4a4:	add	w19, w19, w1
 4a8:	cmp	x1, x19
 4ac:	b.cs	4f0 <__sanitizer_cov_trace_pc_guard_init+0x124>  // b.hs, b.nlast
 4b0:	add	x0, x20, #0x0
 4b4:	add	x0, x0, #0x8
 4b8:	ldr	x1, [x0, #16]
 4bc:	cmp	x19, x1, lsr #3
 4c0:	b.ls	4d0 <__sanitizer_cov_trace_pc_guard_init+0x104>  // b.plast
 4c4:	mov	x1, x19
 4c8:	add	x0, x0, #0x8
 4cc:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 4d0:	add	x1, x20, #0x0
 4d4:	ldr	x0, [x1, #32]
 4d8:	ldr	x3, [x1, #16]
 4dc:	sub	x2, x19, x0
 4e0:	mov	w1, #0x0                   	// #0
 4e4:	lsl	x2, x2, #3
 4e8:	add	x0, x3, x0, lsl #3
 4ec:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 4f0:	add	x20, x20, #0x0
 4f4:	str	x19, [x20, #32]
 4f8:	ldp	x21, x22, [sp, #16]
 4fc:	ldr	x30, [sp, #32]
 500:	ldp	x19, x20, [sp], #48
 504:	ret
 508:	ret

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	d4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xd4>  // b.plast
   8:	mov	x2, #0x1                   	// #1
   c:	mov	x3, x2
  10:	mov	x4, x3
  14:	sub	x3, x3, #0x1
  18:	lsr	x3, x3, #1
  1c:	lsl	x4, x4, #3
  20:	lsl	x5, x3, #3
  24:	ldr	x6, [x0, x4]
  28:	ldr	x7, [x0, x5]
  2c:	cmp	x7, x6
  30:	b.cs	40 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x40>  // b.hs, b.nlast
  34:	str	x7, [x0, x4]
  38:	str	x6, [x0, x5]
  3c:	cbnz	x3, 10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  40:	add	x3, x2, #0x1
  44:	cmp	x1, x3
  48:	b.ne	d8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xd8>  // b.any
  4c:	ldr	x1, [x0]
  50:	ldr	x3, [x0, x2, lsl #3]
  54:	str	x3, [x0]
  58:	str	x1, [x0, x2, lsl #3]
  5c:	mov	x1, #0x0                   	// #0
  60:	lsl	x4, x1, #1
  64:	add	x5, x1, #0x1
  68:	add	x3, x4, #0x1
  6c:	add	x4, x4, #0x2
  70:	cmp	x3, x2
  74:	b.cs	e8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  78:	ldr	x7, [x0, x1, lsl #3]
  7c:	ldr	x6, [x0, x3, lsl #3]
  80:	cmp	x7, x6
  84:	b.cs	e8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe8>  // b.hs, b.nlast
  88:	cmp	x4, x2
  8c:	b.cs	a4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa4>  // b.hs, b.nlast
  90:	lsl	x5, x5, #4
  94:	ldr	x6, [x0, x3, lsl #3]
  98:	ldr	x5, [x0, x5]
  9c:	cmp	x6, x5
  a0:	csel	x3, x3, x4, cs  // cs = hs, nlast
  a4:	cmp	x3, x1
  a8:	b.eq	cc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xcc>  // b.none
  ac:	lsl	x4, x3, #3
  b0:	lsl	x1, x1, #3
  b4:	cmp	x3, x2
  b8:	ldr	x6, [x0, x4]
  bc:	ldr	x5, [x0, x1]
  c0:	str	x6, [x0, x1]
  c4:	str	x5, [x0, x4]
  c8:	b.cc	e0 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xe0>  // b.lo, b.ul, b.last
  cc:	subs	x2, x2, #0x1
  d0:	b.ne	4c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x4c>  // b.any
  d4:	ret
  d8:	mov	x2, x3
  dc:	b	c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xc>
  e0:	mov	x1, x3
  e4:	b	60 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x60>
  e8:	cmp	x4, x2
  ec:	b.cs	cc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xcc>  // b.hs, b.nlast
  f0:	mov	x3, x1
  f4:	b	90 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x90>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorImEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorImEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorImEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #3
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x4, x1
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x30>
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  18:	add	x2, x2, #0x0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	cmp	x1, x3
  3c:	b.cs	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x50>  // b.hs, b.nlast
  40:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  44:	mov	w1, #0x1fd                 	// #509
  48:	add	x2, x2, #0x0
  4c:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x24>
  50:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  54:	lsl	x19, x1, #3
  58:	mov	x21, x0
  5c:	ldr	x22, [x0]
  60:	ldr	x1, [x22]
  64:	cbnz	x1, 70 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x70>
  68:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  6c:	str	x0, [x22]
  70:	ldr	x0, [x21]
  74:	ldr	x0, [x0]
  78:	sub	x4, x0, #0x1
  7c:	tst	x4, x0
  80:	b.eq	94 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm+0x94>  // b.none
  84:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  90:	bl	0 <_ZN11__sanitizer3DieEv>
  94:	add	x19, x19, x4
  98:	neg	x0, x0
  9c:	and	x19, x19, x0
  a0:	mov	w2, #0x0                   	// #0
  a4:	mov	x0, x19
  a8:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorImE7ReallocEm>
  ac:	add	x1, x1, #0x0
  b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b4:	ldr	x1, [x20]
  b8:	mov	x21, x0
  bc:	ldr	x2, [x20, #16]
  c0:	lsl	x2, x2, #3
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

sanitizer_deadlock_detector1.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

0000000000000008 <_ZN11__sanitizer2DD21DestroyPhysicalThreadEPNS_16DDPhysicalThreadE>:
   8:	ret

000000000000000c <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE>:
   c:	stp	x19, x30, [sp, #-16]!
  10:	mov	x0, x1
  14:	mov	x19, x2
  18:	ldr	x1, [x1]
  1c:	ldr	x1, [x1]
  20:	str	xzr, [x2]
  24:	blr	x1
  28:	str	w0, [x19, #8]
  2c:	ldp	x19, x30, [sp], #16
  30:	ret

0000000000000034 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE>:
  34:	ldr	x0, [x1, #16]
  38:	ldrb	w1, [x0, #2224]
  3c:	cbz	w1, 4c <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x18>
  40:	add	x0, x0, #0x628
  44:	strb	wzr, [x0, #648]
  48:	ret
  4c:	mov	x0, #0x0                   	// #0
  50:	b	48 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x14>

0000000000000054 <_ZN11__sanitizer2DD20DestroyLogicalThreadEPNS_15DDLogicalThreadE>:
  54:	mov	x0, x1
  58:	mov	x1, #0x0                   	// #0
  5c:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>

0000000000000060 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE4idx0Em.isra.0>:
  60:	mov	x1, x0
  64:	mov	x2, #0x1fff                	// #8191
  68:	lsr	x0, x0, #12
  6c:	cmp	x1, x2
  70:	b.ls	98 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE4idx0Em.isra.0+0x38>  // b.plast
  74:	str	x30, [sp, #-16]!
  78:	mov	x3, x0
  7c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
  80:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
  84:	add	x2, x2, #0x0
  88:	add	x0, x0, #0x0
  8c:	mov	x4, #0x1                   	// #1
  90:	mov	w1, #0x147                 	// #327
  94:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  98:	ret

000000000000009c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>:
  9c:	str	x30, [sp, #-16]!
  a0:	cmp	x1, #0xfff
  a4:	b.hi	c8 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0+0x2c>  // b.pmore
  a8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
  ac:	add	x2, x2, #0x0
  b0:	mov	x3, x1
  b4:	mov	x4, #0x1000                	// #4096
  b8:	mov	w1, #0x172                 	// #370
  bc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  c8:	ldr	x3, [x0]
  cc:	and	x4, x1, #0xfffffffffffff000
  d0:	cmp	x3, x4
  d4:	b.eq	e8 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0+0x4c>  // b.none
  d8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
  dc:	mov	w1, #0x173                 	// #371
  e0:	add	x2, x2, #0x0
  e4:	b	bc <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0+0x20>
  e8:	ldr	x30, [sp], #16
  ec:	ret

00000000000000f0 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE9check_idxEm.isra.0>:
  f0:	cmp	x0, #0xfff
  f4:	b.ls	11c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE9check_idxEm.isra.0+0x2c>  // b.plast
  f8:	str	x30, [sp, #-16]!
  fc:	mov	x3, x0
 100:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 104:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 108:	add	x2, x2, #0x0
 10c:	add	x0, x0, #0x0
 110:	mov	x4, #0x1000                	// #4096
 114:	mov	w1, #0x16f                 	// #367
 118:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 11c:	ret

0000000000000120 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE5checkEm.isra.0.part.0>:
 120:	str	x30, [sp, #-16]!
 124:	mov	x3, x0
 128:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 12c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 130:	add	x2, x2, #0x0
 134:	add	x0, x0, #0x0
 138:	mov	x4, #0x1000                	// #4096
 13c:	mov	w1, #0x143                 	// #323
 140:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000144 <_ZNK11__sanitizer14BasicBitVectorImE4maskEm.isra.0>:
 144:	mov	x3, x0
 148:	cmp	x0, #0x3f
 14c:	b.ls	170 <_ZNK11__sanitizer14BasicBitVectorImE4maskEm.isra.0+0x2c>  // b.plast
 150:	str	x30, [sp, #-16]!
 154:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 158:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 15c:	add	x2, x2, #0x0
 160:	add	x0, x0, #0x0
 164:	mov	x4, #0x40                  	// #64
 168:	mov	w1, #0x63                  	// #99
 16c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 170:	mov	x0, #0x1                   	// #1
 174:	lsl	x0, x0, x3
 178:	ret

000000000000017c <_ZN11__sanitizer14BasicBitVectorImE8clearBitEm.isra.0>:
 17c:	stp	x19, x20, [sp, #-32]!
 180:	mov	x19, x0
 184:	mov	x0, x1
 188:	ldr	x20, [x19]
 18c:	str	x30, [sp, #16]
 190:	bl	144 <_ZNK11__sanitizer14BasicBitVectorImE4maskEm.isra.0>
 194:	bic	x1, x20, x0
 198:	ldr	x30, [sp, #16]
 19c:	str	x1, [x19]
 1a0:	cmp	x20, x1
 1a4:	cset	w0, ne  // ne = any
 1a8:	ldp	x19, x20, [sp], #32
 1ac:	ret

00000000000001b0 <_ZN11__sanitizer2DD19CreateLogicalThreadEy>:
 1b0:	stp	x19, x20, [sp, #-32]!
 1b4:	mov	x2, #0x0                   	// #0
 1b8:	mov	x0, #0x8b8                 	// #2232
 1bc:	stp	x21, x30, [sp, #16]
 1c0:	mov	x21, x1
 1c4:	mov	x1, #0x0                   	// #0
 1c8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1cc:	mov	x19, x0
 1d0:	mov	x20, x0
 1d4:	str	x21, [x19], #8
 1d8:	mov	x0, x19
 1dc:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 1e0:	ldp	x21, x30, [sp, #16]
 1e4:	str	xzr, [x19, #520]
 1e8:	str	xzr, [x19, #1040]
 1ec:	mov	x0, x20
 1f0:	str	xzr, [x19, #1560]
 1f4:	strb	wzr, [x20, #2224]
 1f8:	ldp	x19, x20, [sp], #32
 1fc:	ret

0000000000000200 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>:
 200:	stp	x19, x20, [sp, #-32]!
 204:	mov	x19, x0
 208:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 20c:	add	x0, x0, #0x0
 210:	stp	x21, x30, [sp, #16]
 214:	add	x21, x19, #0x208, lsl #12
 218:	str	x0, [x19]
 21c:	add	x0, x19, #0x410, lsl #12
 220:	strb	wzr, [x19, #8]
 224:	add	x20, x19, #0x630
 228:	add	x21, x21, #0x630
 22c:	ldrb	w1, [x1]
 230:	strb	w1, [x0, #2632]
 234:	add	x0, x19, #0x18
 238:	str	xzr, [x19, #16]
 23c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 240:	add	x0, x19, #0x220
 244:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 248:	mov	x0, x20
 24c:	add	x20, x20, #0x208
 250:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 254:	cmp	x20, x21
 258:	b.ne	248 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE+0x48>  // b.any
 25c:	add	x19, x19, #0x10
 260:	add	x19, x19, #0x410, lsl #12
 264:	ldp	x21, x30, [sp, #16]
 268:	str	xzr, [x19, #2608]
 26c:	ldp	x19, x20, [sp], #32
 270:	ret

0000000000000274 <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE>:
 274:	stp	x19, x20, [sp, #-32]!
 278:	mov	w2, #0x0                   	// #0
 27c:	mov	x20, x0
 280:	mov	x0, #0xa50                 	// #2640
 284:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 288:	movk	x0, #0x41, lsl #16
 28c:	add	x1, x1, #0x0
 290:	str	x30, [sp, #16]
 294:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 298:	mov	x1, x20
 29c:	mov	x19, x0
 2a0:	bl	200 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>
 2a4:	mov	x0, x19
 2a8:	ldr	x30, [sp, #16]
 2ac:	ldp	x19, x20, [sp], #32
 2b0:	ret

00000000000002b4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb>:
 2b4:	ldr	x0, [x1, #16]
 2b8:	ldr	x1, [x2]
 2bc:	ldr	x3, [x0, #528]
 2c0:	and	x2, x1, #0xfffffffffffff000
 2c4:	cmp	x3, x2
 2c8:	b.ne	2d8 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x24>  // b.any
 2cc:	and	x1, x1, #0xfff
 2d0:	add	x0, x0, #0x8
 2d4:	b	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 2d8:	ret

00000000000002dc <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE>:
 2dc:	stp	x19, x20, [sp, #-32]!
 2e0:	mov	x19, x0
 2e4:	ldr	x0, [x2]
 2e8:	str	x30, [sp, #16]
 2ec:	cbz	x0, 328 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x4c>
 2f0:	mov	x20, x2
 2f4:	add	x0, x19, #0x8
 2f8:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 2fc:	ldr	x1, [x20]
 300:	cbz	x1, 31c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x40>
 304:	ldr	x2, [x19, #16]
 308:	and	x0, x1, #0xfffffffffffff000
 30c:	cmp	x0, x2
 310:	b.ne	31c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x40>  // b.any
 314:	add	x0, x19, #0x10
 318:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 31c:	str	xzr, [x20]
 320:	dmb	ish
 324:	strb	wzr, [x19, #8]
 328:	ldr	x30, [sp, #16]
 32c:	ldp	x19, x20, [sp], #32
 330:	ret

0000000000000334 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>:
 334:	stp	x19, x20, [sp, #-32]!
 338:	mov	x19, x0
 33c:	mov	x20, x2
 340:	ldr	x0, [x2]
 344:	stp	x21, x30, [sp, #16]
 348:	mov	x21, x1
 34c:	cbz	x0, 360 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2c>
 350:	ldr	x1, [x19, #16]
 354:	and	x0, x0, #0xfffffffffffff000
 358:	cmp	x0, x1
 35c:	b.eq	370 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3c>  // b.none
 360:	mov	x1, x20
 364:	add	x0, x19, #0x10
 368:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 36c:	str	x0, [x20]
 370:	add	x0, x21, #0x8
 374:	ldr	x1, [x19, #16]
 378:	ldp	x21, x30, [sp, #16]
 37c:	ldp	x19, x20, [sp], #32
 380:	b	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>

0000000000000384 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb>:
 384:	stp	x19, x20, [sp, #-96]!
 388:	mov	x19, x0
 38c:	add	x0, x0, #0x410, lsl #12
 390:	stp	x21, x22, [sp, #16]
 394:	mov	x20, x1
 398:	ldrb	w0, [x0, #2632]
 39c:	stp	x23, x24, [sp, #32]
 3a0:	mov	x23, x2
 3a4:	stp	x25, x26, [sp, #48]
 3a8:	stp	x27, x28, [sp, #64]
 3ac:	and	w28, w3, #0xff
 3b0:	and	w27, w4, #0xff
 3b4:	ldr	x26, [x1, #16]
 3b8:	str	x30, [sp, #80]
 3bc:	cbz	w0, 428 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xa4>
 3c0:	ldr	x0, [x1]
 3c4:	ldr	x1, [x0]
 3c8:	mov	x0, x20
 3cc:	blr	x1
 3d0:	mov	w22, w0
 3d4:	add	x21, x26, #0x8
 3d8:	mov	x0, x21
 3dc:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 3e0:	tst	w0, #0xff
 3e4:	ldr	x24, [x23]
 3e8:	b.eq	430 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xac>  // b.none
 3ec:	ldr	x2, [x26, #528]
 3f0:	cbz	x2, 430 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xac>
 3f4:	and	x0, x24, #0xfffffffffffff000
 3f8:	cmp	x2, x0
 3fc:	b.ne	430 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xac>  // b.any
 400:	mov	w3, w22
 404:	and	x1, x24, #0xfff
 408:	mov	x0, x21
 40c:	ldp	x21, x22, [sp, #16]
 410:	ldp	x23, x24, [sp, #32]
 414:	ldp	x25, x26, [sp, #48]
 418:	ldp	x27, x28, [sp, #64]
 41c:	ldr	x30, [sp, #80]
 420:	ldp	x19, x20, [sp], #96
 424:	b	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 428:	mov	w22, #0x0                   	// #0
 42c:	b	3d4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x50>
 430:	add	x25, x19, #0x10
 434:	mov	x2, x24
 438:	mov	x1, x21
 43c:	mov	x0, x25
 440:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 444:	tst	w0, #0xff
 448:	b.eq	458 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xd4>  // b.none
 44c:	mov	w3, w22
 450:	and	x2, x24, #0xfffffffffffff000
 454:	b	404 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x80>
 458:	add	x0, x19, #0x8
 45c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 460:	mov	x2, x23
 464:	mov	x1, x26
 468:	mov	x0, x19
 46c:	bl	334 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
 470:	cbz	w28, 4ac <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x128>
 474:	ldr	x2, [x23]
 478:	mov	x1, x21
 47c:	mov	x0, x25
 480:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 484:	tst	w0, #0xff
 488:	b.eq	4ac <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x128>  // b.none
 48c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 490:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 494:	add	x2, x2, #0x0
 498:	add	x0, x0, #0x0
 49c:	mov	x4, #0x0                   	// #0
 4a0:	mov	x3, #0x0                   	// #0
 4a4:	mov	w1, #0xa5                  	// #165
 4a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4ac:	cbnz	w27, 4f4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x170>
 4b0:	ldr	x26, [x23]
 4b4:	cbnz	w22, 548 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1c4>
 4b8:	ldr	x0, [x20]
 4bc:	ldr	x1, [x0]
 4c0:	mov	x0, x20
 4c4:	blr	x1
 4c8:	mov	w24, w0
 4cc:	ldr	x0, [x20]
 4d0:	ldr	x1, [x0, #8]
 4d4:	mov	x0, x20
 4d8:	blr	x1
 4dc:	mov	w4, w0
 4e0:	mov	w3, w24
 4e4:	mov	x2, x26
 4e8:	mov	x1, x21
 4ec:	mov	x0, x25
 4f0:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 4f4:	ldr	x1, [x19, #16]
 4f8:	mov	x0, x21
 4fc:	ldr	x20, [x23]
 500:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 504:	mov	x1, x20
 508:	mov	x0, x25
 50c:	bl	9c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>
 510:	ldr	x2, [x19, #16]
 514:	mov	w3, w22
 518:	and	x1, x20, #0xfff
 51c:	mov	x0, x21
 520:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 524:	dmb	ish
 528:	strb	wzr, [x19, #8]
 52c:	ldp	x21, x22, [sp, #16]
 530:	ldp	x23, x24, [sp, #32]
 534:	ldp	x25, x26, [sp, #48]
 538:	ldp	x27, x28, [sp, #64]
 53c:	ldr	x30, [sp, #80]
 540:	ldp	x19, x20, [sp], #96
 544:	ret
 548:	mov	w24, w22
 54c:	b	4cc <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x148>

0000000000000550 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>:
 550:	stp	x19, x20, [sp, #-288]!
 554:	mov	x20, x2
 558:	mov	x4, #0x14                  	// #20
 55c:	ldr	x2, [x2]
 560:	stp	x23, x24, [sp, #32]
 564:	add	x23, x0, #0x10
 568:	ldr	x19, [x1, #16]
 56c:	stp	x25, x26, [sp, #48]
 570:	add	x25, sp, #0x80
 574:	mov	x24, x0
 578:	mov	x3, x25
 57c:	mov	x0, x23
 580:	add	x1, x19, #0x8
 584:	stp	x21, x22, [sp, #16]
 588:	stp	x27, x28, [sp, #64]
 58c:	str	x30, [sp, #80]
 590:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 594:	cbnz	x0, 5c0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x70>
 598:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 59c:	add	x0, x0, #0x0
 5a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 5a4:	ldp	x21, x22, [sp, #16]
 5a8:	ldp	x23, x24, [sp, #32]
 5ac:	ldp	x25, x26, [sp, #48]
 5b0:	ldp	x27, x28, [sp, #64]
 5b4:	ldr	x30, [sp, #80]
 5b8:	ldp	x19, x20, [sp], #288
 5bc:	ret
 5c0:	ldr	x3, [x20]
 5c4:	ldr	x4, [sp, #128]
 5c8:	cmp	x3, x4
 5cc:	b.eq	5e8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x98>  // b.none
 5d0:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 5d4:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 5d8:	add	x2, x2, #0x0
 5dc:	add	x0, x0, #0x0
 5e0:	mov	w1, #0x7f                  	// #127
 5e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5e8:	cmp	x0, #0x14
 5ec:	mov	w1, #0x1                   	// #1
 5f0:	mov	x21, #0x14                  	// #20
 5f4:	mov	x22, #0x1146                	// #4422
 5f8:	csel	x21, x0, x21, ls  // ls = plast
 5fc:	add	x5, x23, #0x410, lsl #12
 600:	add	x19, x19, #0x630
 604:	mov	x20, #0x0                   	// #0
 608:	movk	x22, #0x4, lsl #16
 60c:	stur	w21, [x19, #-8]
 610:	strb	w1, [x19, #640]
 614:	ldr	x27, [x25, x20, lsl #3]
 618:	add	x20, x20, #0x1
 61c:	str	x5, [sp, #120]
 620:	mov	x1, x27
 624:	udiv	x0, x20, x21
 628:	msub	x0, x0, x21, x20
 62c:	ldr	x26, [x25, x0, lsl #3]
 630:	mov	x0, x23
 634:	bl	9c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>
 638:	and	x3, x27, #0xfff
 63c:	mov	x1, x26
 640:	add	x0, x3, x22
 644:	and	x28, x26, #0xfff
 648:	ldr	x7, [x23, x0, lsl #3]
 64c:	mov	x0, x23
 650:	stp	x7, x3, [sp, #104]
 654:	bl	9c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>
 658:	add	x0, x28, x22
 65c:	mov	x1, x27
 660:	ldr	x4, [x23, x0, lsl #3]
 664:	mov	x0, x23
 668:	str	x4, [sp, #96]
 66c:	bl	9c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>
 670:	mov	x1, x26
 674:	mov	x0, x23
 678:	bl	9c <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10check_nodeEm.isra.0>
 67c:	ldp	x3, x5, [sp, #112]
 680:	mov	x6, #0xa40                 	// #2624
 684:	ldp	x4, x7, [sp, #96]
 688:	movk	x6, #0x21, lsl #16
 68c:	add	x2, x24, x6
 690:	mov	x1, #0x0                   	// #0
 694:	ldr	x0, [x5, #2608]
 698:	cmp	x0, x1
 69c:	b.eq	704 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1b4>  // b.none
 6a0:	ldrh	w8, [x2]
 6a4:	cmp	x8, x3
 6a8:	b.ne	6f8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1a8>  // b.any
 6ac:	ldrh	w8, [x2, #2]
 6b0:	cmp	x8, x28
 6b4:	b.ne	6f8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1a8>  // b.any
 6b8:	add	x1, x24, x1, lsl #4
 6bc:	add	x1, x1, #0x210, lsl #12
 6c0:	ldr	w2, [x1, #2628]
 6c4:	ldr	w0, [x1, #2632]
 6c8:	ldr	w1, [x1, #2636]
 6cc:	sxtw	x1, w1
 6d0:	str	x1, [x19]
 6d4:	cmp	x20, x21
 6d8:	ldr	x1, [x7, #16]
 6dc:	str	x1, [x19, #8]
 6e0:	ldr	x1, [x4, #16]
 6e4:	str	x1, [x19, #16]
 6e8:	stp	w0, w2, [x19, #24]
 6ec:	add	x19, x19, #0x20
 6f0:	b.ne	614 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xc4>  // b.any
 6f4:	b	5a4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
 6f8:	add	x1, x1, #0x1
 6fc:	add	x2, x2, #0x10
 700:	b	698 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x148>
 704:	mov	w0, #0xffffffff            	// #-1
 708:	mov	w1, #0x0                   	// #0
 70c:	mov	w2, w0
 710:	b	6cc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x17c>

0000000000000714 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb>:
 714:	stp	x19, x20, [sp, #-64]!
 718:	mov	x19, x0
 71c:	mov	x20, x1
 720:	stp	x23, x24, [sp, #32]
 724:	ldr	x24, [x1, #16]
 728:	stp	x21, x22, [sp, #16]
 72c:	mov	x21, x2
 730:	add	x22, x24, #0x8
 734:	stp	x25, x30, [sp, #48]
 738:	mov	x0, x22
 73c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 740:	tst	w0, #0xff
 744:	b.ne	7a0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x8c>  // b.any
 748:	ldr	x2, [x21]
 74c:	add	x23, x19, #0x10
 750:	mov	x1, x22
 754:	mov	x0, x23
 758:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 75c:	tst	w0, #0xff
 760:	b.ne	7a0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x8c>  // b.any
 764:	add	x0, x19, #0x8
 768:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 76c:	mov	x1, x24
 770:	mov	x2, x21
 774:	mov	x0, x19
 778:	bl	334 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
 77c:	ldr	x24, [x21]
 780:	mov	x1, x22
 784:	mov	x0, x23
 788:	mov	x2, x24
 78c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 790:	tst	w0, #0xff
 794:	b.eq	7b4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xa0>  // b.none
 798:	dmb	ish
 79c:	strb	wzr, [x19, #8]
 7a0:	ldp	x21, x22, [sp, #16]
 7a4:	ldp	x23, x24, [sp, #32]
 7a8:	ldp	x25, x30, [sp, #48]
 7ac:	ldp	x19, x20, [sp], #64
 7b0:	ret
 7b4:	mov	x2, x24
 7b8:	mov	x1, x22
 7bc:	mov	x0, x23
 7c0:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 7c4:	tst	w0, #0xff
 7c8:	b.eq	798 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x84>  // b.none
 7cc:	ldr	x0, [x20]
 7d0:	ldr	x25, [x21]
 7d4:	ldr	x1, [x0]
 7d8:	mov	x0, x20
 7dc:	blr	x1
 7e0:	mov	w24, w0
 7e4:	ldr	x0, [x20]
 7e8:	ldr	x1, [x0, #8]
 7ec:	mov	x0, x20
 7f0:	blr	x1
 7f4:	mov	w4, w0
 7f8:	mov	w3, w24
 7fc:	mov	x2, x25
 800:	mov	x1, x22
 804:	mov	x0, x23
 808:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
 80c:	mov	x2, x21
 810:	mov	x1, x20
 814:	mov	x0, x19
 818:	bl	550 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>
 81c:	b	798 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x84>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex4LockEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex4LockEv>:
   0:	mov	x1, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldxrb	w2, [x1]
   c:	stxrb	w4, w3, [x1]
  10:	cbnz	w4, 8 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x8>
  14:	dmb	ish
  18:	tst	w2, #0xff
  1c:	b.eq	24 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x24>  // b.none
  20:	b	0 <_ZN11__sanitizer15StaticSpinMutex4LockEv>
  24:	ret

Disassembly of section .text._ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE5clearEv:

0000000000000000 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE5clearEv>:
   0:	str	xzr, [x0]
   4:	ret

Disassembly of section .text._ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE5emptyEv:

0000000000000000 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE5emptyEv>:
   0:	ldr	x0, [x0]
   4:	cmp	x0, #0x0
   8:	cset	w0, eq  // eq = none
   c:	ret

Disassembly of section .text._ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm:

0000000000000000 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	cmp	x1, #0x1, lsl #12
   8:	mov	x19, x1
   c:	stp	x21, x22, [sp, #16]
  10:	str	x30, [sp, #32]
  14:	b.ls	20 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm+0x20>  // b.plast
  18:	mov	x0, x1
  1c:	bl	0 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm>
  20:	mov	x21, x0
  24:	mov	x0, x1
  28:	bl	0 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm>
  2c:	mov	x20, x0
  30:	ubfx	x22, x19, #6, #6
  34:	mov	x0, x22
  38:	bl	0 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm>
  3c:	ldr	x1, [x21, x20, lsl #3]
  40:	tst	x0, x1
  44:	b.eq	74 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm+0x74>  // b.none
  48:	add	x22, x22, #0x1
  4c:	and	x0, x19, #0x3f
  50:	add	x20, x22, x20, lsl #6
  54:	bl	0 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm>
  58:	ldr	x1, [x21, x20, lsl #3]
  5c:	tst	x0, x1
  60:	cset	w0, ne  // ne = any
  64:	ldp	x21, x22, [sp, #16]
  68:	ldr	x30, [sp, #32]
  6c:	ldp	x19, x20, [sp], #48
  70:	ret
  74:	mov	w0, #0x0                   	// #0
  78:	b	64 <_ZNK11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6getBitEm+0x64>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm>:
   0:	cbz	x2, 74 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x74>
   4:	ldr	x3, [x0]
   8:	ldr	x4, [x1, #520]
   c:	cmp	x3, x4
  10:	b.ne	74 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x74>  // b.any
  14:	and	x4, x2, #0xfffffffffffff000
  18:	cmp	x4, x3
  1c:	b.ne	74 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x74>  // b.any
  20:	stp	x19, x20, [sp, #-64]!
  24:	and	x19, x2, #0xfff
  28:	add	x20, x1, #0x418
  2c:	stp	x21, x22, [sp, #16]
  30:	add	x21, x0, #0x620
  34:	mov	x22, #0x0                   	// #0
  38:	stp	x23, x24, [sp, #32]
  3c:	mov	w24, #0x208                 	// #520
  40:	ldr	x23, [x1, #1560]
  44:	str	x30, [sp, #48]
  48:	cmp	x23, x22
  4c:	b.eq	7c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x7c>  // b.none
  50:	lsl	x0, x22, #3
  54:	mov	x1, x19
  58:	ldr	w0, [x20, x0]
  5c:	umaddl	x0, w0, w24, x21
  60:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm>
  64:	ands	w0, w0, #0xff
  68:	b.eq	80 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x80>  // b.none
  6c:	add	x22, x22, #0x1
  70:	b	48 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE11hasAllEdgesEPNS_19DeadlockDetectorTLSIS4_EEm+0x48>
  74:	mov	w0, #0x0                   	// #0
  78:	ret
  7c:	mov	w0, #0x1                   	// #1
  80:	ldp	x21, x22, [sp, #16]
  84:	ldp	x23, x24, [sp, #32]
  88:	ldr	x30, [sp, #48]
  8c:	ldp	x19, x20, [sp], #64
  90:	ret

Disassembly of section .text._ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE18ensureCurrentEpochEm:

0000000000000000 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE18ensureCurrentEpochEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	ldr	x1, [x0, #520]
   c:	str	x30, [sp, #16]
  10:	cmp	x1, x20
  14:	b.eq	2c <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE18ensureCurrentEpochEm+0x2c>  // b.none
  18:	mov	x19, x0
  1c:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE18ensureCurrentEpochEm>
  20:	str	x20, [x19, #520]
  24:	str	xzr, [x19, #1040]
  28:	str	xzr, [x19, #1560]
  2c:	ldr	x30, [sp, #16]
  30:	ldp	x19, x20, [sp], #32
  34:	ret

Disassembly of section .text._ZNK11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8getLocksEm:

0000000000000000 <_ZNK11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8getLocksEm>:
   0:	ldr	x3, [x0, #520]
   4:	cmp	x3, x1
   8:	b.eq	2c <_ZNK11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8getLocksEm+0x2c>  // b.none
   c:	str	x30, [sp, #-16]!
  10:	mov	x4, x1
  14:	adrp	x2, 0 <_ZNK11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8getLocksEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8getLocksEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x6c                  	// #108
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ret

Disassembly of section .text._ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE6isHeldEPNS_19DeadlockDetectorTLSIS4_EEm:

0000000000000000 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE6isHeldEPNS_19DeadlockDetectorTLSIS4_EEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	x0, x1
   c:	mov	x19, x2
  10:	stp	x21, x30, [sp, #16]
  14:	ldr	x1, [x20]
  18:	bl	0 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE6isHeldEPNS_19DeadlockDetectorTLSIS4_EEm>
  1c:	mov	x21, x0
  20:	mov	x1, x19
  24:	mov	x0, x20
  28:	bl	0 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE6isHeldEPNS_19DeadlockDetectorTLSIS4_EEm>
  2c:	and	x1, x19, #0xfff
  30:	mov	x0, x21
  34:	ldp	x21, x30, [sp, #16]
  38:	ldp	x19, x20, [sp], #32
  3c:	b	0 <_ZNK11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE6isHeldEPNS_19DeadlockDetectorTLSIS4_EEm>

Disassembly of section .text._ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm:

0000000000000000 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x1
   8:	mov	x19, x0
   c:	ldr	x1, [x0, #1040]
  10:	stp	x21, x22, [sp, #16]
  14:	stp	x23, x24, [sp, #32]
  18:	str	x30, [sp, #48]
  1c:	cbz	x1, 70 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x70>
  20:	sub	x2, x1, #0x1
  24:	add	x3, x19, #0x210
  28:	mov	x0, x2
  2c:	tbnz	x0, #63, 70 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x70>
  30:	ldr	x4, [x3, x0, lsl #3]
  34:	cmp	x4, x20
  38:	b.ne	68 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x68>  // b.any
  3c:	add	x1, x19, x1, lsl #3
  40:	add	x0, x0, #0x42
  44:	str	x2, [x19, #1040]
  48:	ldr	x2, [x1, #520]
  4c:	str	x2, [x19, x0, lsl #3]
  50:	str	x20, [x1, #520]
  54:	ldp	x21, x22, [sp, #16]
  58:	ldp	x23, x24, [sp, #32]
  5c:	ldr	x30, [sp, #48]
  60:	ldp	x19, x20, [sp], #64
  64:	ret
  68:	sub	x0, x0, #0x1
  6c:	b	2c <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x2c>
  70:	mov	x0, x20
  74:	cmp	x20, #0x1, lsl #12
  78:	b.ls	80 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x80>  // b.plast
  7c:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>
  80:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>
  84:	lsl	x24, x0, #3
  88:	ubfx	x22, x20, #6, #6
  8c:	mov	x21, x0
  90:	add	x23, x19, x0, lsl #3
  94:	mov	x0, x22
  98:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>
  9c:	ldr	x1, [x19, x24]
  a0:	tst	x0, x1
  a4:	b.eq	54 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x54>  // b.none
  a8:	add	x0, x22, #0x1
  ac:	and	x1, x20, #0x3f
  b0:	add	x0, x0, x21, lsl #6
  b4:	lsl	x24, x0, #3
  b8:	add	x0, x19, x0, lsl #3
  bc:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>
  c0:	and	w21, w0, #0xff
  c4:	ldr	x0, [x19, x24]
  c8:	cbnz	x0, d8 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0xd8>
  cc:	mov	x1, x22
  d0:	mov	x0, x23
  d4:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm>
  d8:	cbz	w21, 54 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x54>
  dc:	ldr	x1, [x19, #1560]
  e0:	cbz	x1, 54 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x54>
  e4:	sub	x2, x1, #0x1
  e8:	add	x4, x19, #0x418
  ec:	mov	x0, x2
  f0:	tbnz	x0, #63, 54 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x54>
  f4:	lsl	x3, x0, #3
  f8:	ldr	w3, [x4, x3]
  fc:	cmp	w3, w20
 100:	b.ne	138 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x138>  // b.any
 104:	add	x1, x1, #0x82
 108:	add	x6, x19, x2, lsl #3
 10c:	add	x4, x19, x0, lsl #3
 110:	add	x0, x19, x0, lsl #3
 114:	lsl	x5, x1, #3
 118:	add	x1, x19, x1, lsl #3
 11c:	ldr	x6, [x6, #1048]
 120:	ldr	w4, [x4, #1052]
 124:	str	x6, [x0, #1048]
 128:	str	w3, [x19, x5]
 12c:	str	w4, [x1, #4]
 130:	str	x2, [x19, #1560]
 134:	b	54 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0x54>
 138:	sub	x0, x0, #0x1
 13c:	b	f0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeLockEm+0xf0>

Disassembly of section .text._ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm:

0000000000000000 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	cmp	x1, #0x1, lsl #12
   8:	mov	x20, x1
   c:	stp	x21, x22, [sp, #16]
  10:	stp	x23, x24, [sp, #32]
  14:	str	x30, [sp, #48]
  18:	b.ls	24 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm+0x24>  // b.plast
  1c:	mov	x0, x1
  20:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm>
  24:	mov	x21, x0
  28:	mov	x0, x1
  2c:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm>
  30:	lsl	x24, x0, #3
  34:	ubfx	x23, x20, #6, #6
  38:	mov	x19, x0
  3c:	mov	x0, x23
  40:	add	x23, x23, #0x1
  44:	ldr	x22, [x21, x24]
  48:	add	x19, x23, x19, lsl #6
  4c:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm>
  50:	and	x20, x20, #0x3f
  54:	lsl	x19, x19, #3
  58:	tst	x22, x0
  5c:	b.ne	6c <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm+0x6c>  // b.any
  60:	orr	x22, x22, x0
  64:	str	x22, [x21, x24]
  68:	str	xzr, [x21, x19]
  6c:	ldr	x22, [x21, x19]
  70:	mov	x0, x20
  74:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE6setBitEm>
  78:	orr	x0, x22, x0
  7c:	str	x0, [x21, x19]
  80:	cmp	x22, x0
  84:	cset	w0, ne  // ne = any
  88:	ldp	x21, x22, [sp, #16]
  8c:	ldp	x23, x24, [sp, #32]
  90:	ldr	x30, [sp, #48]
  94:	ldp	x19, x20, [sp], #64
  98:	ret

Disassembly of section .text._ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj:

0000000000000000 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	mov	w21, w3
   c:	ldr	x3, [x0, #520]
  10:	cmp	x3, x2
  14:	b.eq	34 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x34>  // b.none
  18:	mov	x4, x2
  1c:	adrp	x2, 0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>
  20:	add	x2, x2, #0x0
  24:	mov	w1, #0x3c                  	// #60
  28:	adrp	x0, 0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	mov	x19, x0
  38:	mov	x20, x1
  3c:	bl	0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>
  40:	tst	w0, #0xff
  44:	b.ne	84 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x84>  // b.any
  48:	ldr	x3, [x19, #1040]
  4c:	cmp	x3, #0x3f
  50:	b.ls	68 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x68>  // b.plast
  54:	adrp	x2, 0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>
  58:	mov	x4, #0x40                  	// #64
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x3f                  	// #63
  64:	b	28 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x28>
  68:	add	x1, x3, #0x1
  6c:	add	x3, x3, #0x42
  70:	str	x1, [x19, #1040]
  74:	str	x20, [x19, x3, lsl #3]
  78:	ldp	x21, x30, [sp, #16]
  7c:	ldp	x19, x20, [sp], #32
  80:	ret
  84:	ldr	x3, [x19, #1560]
  88:	cmp	x3, #0x3f
  8c:	b.ls	a4 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0xa4>  // b.plast
  90:	adrp	x2, 0 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj>
  94:	mov	x4, #0x40                  	// #64
  98:	add	x2, x2, #0x0
  9c:	mov	w1, #0x43                  	// #67
  a0:	b	28 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x28>
  a4:	add	x2, x3, #0x83
  a8:	add	x1, x3, #0x1
  ac:	str	x1, [x19, #1560]
  b0:	lsl	x1, x2, #3
  b4:	add	x2, x19, x2, lsl #3
  b8:	str	w20, [x19, x1]
  bc:	str	w21, [x2, #4]
  c0:	b	78 <_ZN11__sanitizer19DeadlockDetectorTLSINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7addLockEmmj+0x78>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	and	x20, x1, #0xfff
   c:	str	x30, [sp, #16]
  10:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  14:	mov	x1, x20
  18:	add	x0, x19, #0x8
  1c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  20:	tst	w0, #0xff
  24:	b.eq	48 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm+0x48>  // b.none
  28:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  2c:	add	x2, x2, #0x0
  30:	mov	x4, #0x0                   	// #0
  34:	mov	x3, #0x0                   	// #0
  38:	mov	w1, #0xc0                  	// #192
  3c:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  40:	add	x0, x0, #0x0
  44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  48:	mov	x1, x20
  4c:	add	x0, x19, #0x210
  50:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  54:	tst	w0, #0xff
  58:	b.ne	74 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm+0x74>  // b.any
  5c:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>
  60:	mov	x4, #0x0                   	// #0
  64:	add	x2, x2, #0x0
  68:	mov	x3, #0x0                   	// #0
  6c:	mov	w1, #0xc1                  	// #193
  70:	b	3c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm+0x3c>
  74:	add	x19, x19, #0x620
  78:	mov	x0, #0x208                 	// #520
  7c:	ldr	x30, [sp, #16]
  80:	madd	x0, x20, x0, x19
  84:	ldp	x19, x20, [sp], #32
  88:	b	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE10removeNodeEm>

Disassembly of section .text._ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv:

0000000000000000 <_ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	ldr	x19, [x0]
   8:	cbnz	x19, 2c <_ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv>
  10:	adrp	x0, 0 <_ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv>
  14:	add	x2, x2, #0x0
  18:	add	x0, x0, #0x0
  1c:	mov	x4, #0x0                   	// #0
  20:	mov	x3, #0x0                   	// #0
  24:	mov	w1, #0x30                  	// #48
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	rbit	x19, x19
  30:	clz	x19, x19
  34:	mov	x1, x19
  38:	bl	0 <_ZN11__sanitizer14BasicBitVectorImE19getAndClearFirstOneEv>
  3c:	mov	x0, x19
  40:	ldp	x19, x30, [sp], #16
  44:	ret

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	mov	x20, x0
   8:	mov	x19, #0x0                   	// #0
   c:	stp	x21, x22, [sp, #16]
  10:	add	x21, sp, #0x58
  14:	mov	w22, #0x1                   	// #1
  18:	stp	x25, x26, [sp, #48]
  1c:	mov	x26, x1
  20:	stp	x23, x24, [sp, #32]
  24:	stp	x27, x30, [sp, #64]
  28:	mov	w27, #0x0                   	// #0
  2c:	add	x23, x20, x19, lsl #3
  30:	ldr	x0, [x20, x19, lsl #3]
  34:	add	x24, x19, #0x1
  38:	ldr	x1, [x26]
  3c:	mov	w25, #0x0                   	// #0
  40:	and	x0, x0, x1
  44:	str	x0, [sp, #88]
  48:	ldr	x0, [sp, #88]
  4c:	cbz	x0, 90 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_+0x90>
  50:	mov	x0, x21
  54:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_>
  58:	add	x2, x24, x0
  5c:	mov	x1, x0
  60:	add	x0, x0, #0x1
  64:	lsl	x2, x2, #3
  68:	ldr	x0, [x26, x0, lsl #3]
  6c:	ldr	x3, [x20, x2]
  70:	bic	x0, x3, x0
  74:	str	x0, [x20, x2]
  78:	cmp	x3, x0
  7c:	csel	w25, w25, w22, eq  // eq = none
  80:	cbnz	x0, 48 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_+0x48>
  84:	mov	x0, x23
  88:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_>
  8c:	b	48 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_+0x48>
  90:	cmp	w25, #0x0
  94:	add	x19, x19, #0x41
  98:	csel	w27, w27, w25, eq  // eq = none
  9c:	cmp	x19, #0x41, lsl #12
  a0:	b.ne	2c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE13removeEdgesToERKS4_+0x2c>  // b.any
  a4:	mov	w0, w27
  a8:	ldp	x21, x22, [sp, #16]
  ac:	ldp	x23, x24, [sp, #32]
  b0:	ldp	x25, x26, [sp, #48]
  b4:	ldp	x27, x30, [sp, #64]
  b8:	ldp	x19, x20, [sp], #96
  bc:	ret

Disassembly of section .text._ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_:

0000000000000000 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x20, x0
   8:	stp	x21, x22, [sp, #16]
   c:	mov	x21, x1
  10:	mov	w22, #0x0                   	// #0
  14:	stp	x25, x30, [sp, #48]
  18:	add	x25, sp, #0x48
  1c:	ldr	x0, [x1]
  20:	stp	x23, x24, [sp, #32]
  24:	mov	w24, #0x1                   	// #1
  28:	str	x0, [sp, #72]
  2c:	ldr	x0, [sp, #72]
  30:	cbz	x0, 80 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_+0x80>
  34:	mov	x0, x25
  38:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_>
  3c:	mov	x19, x0
  40:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_>
  44:	ldr	x23, [x20]
  48:	add	x2, x19, #0x1
  4c:	orr	x0, x23, x0
  50:	str	x0, [x20]
  54:	lsl	x2, x2, #3
  58:	cmp	x23, x0
  5c:	b.eq	64 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_+0x64>  // b.none
  60:	str	xzr, [x20, x2]
  64:	ldr	x1, [x20, x2]
  68:	ldr	x0, [x21, x2]
  6c:	orr	x0, x1, x0
  70:	str	x0, [x20, x2]
  74:	cmp	x1, x0
  78:	csel	w22, w22, w24, eq  // eq = none
  7c:	b	2c <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE8setUnionERKS3_+0x2c>
  80:	mov	w0, w22
  84:	ldp	x21, x22, [sp, #16]
  88:	ldp	x23, x24, [sp, #32]
  8c:	ldp	x25, x30, [sp, #48]
  90:	ldp	x19, x20, [sp], #80
  94:	ret

Disassembly of section .text._ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv:

0000000000000000 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	ldr	x1, [x0]
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 34 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv+0x34>
  14:	adrp	x2, 0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>
  18:	adrp	x0, 0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x4, #0x0                   	// #0
  28:	mov	x3, #0x0                   	// #0
  2c:	mov	w1, #0xbf                  	// #191
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	mov	x19, x0
  38:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>
  3c:	mov	x20, x0
  40:	add	x0, x0, #0x1
  44:	lsl	x22, x0, #3
  48:	add	x0, x19, x0, lsl #3
  4c:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>
  50:	mov	x21, x0
  54:	ldr	x0, [x19, x22]
  58:	cbz	x0, 70 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv+0x70>
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEE19getAndClearFirstOneEv>
  64:	ldr	x1, [x19]
  68:	orr	x1, x1, x0
  6c:	str	x1, [x19]
  70:	add	x0, x21, x20, lsl #6
  74:	ldp	x21, x22, [sp, #16]
  78:	ldr	x30, [sp, #32]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>:
   0:	stp	x19, x20, [sp, #-96]!
   4:	mov	x19, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x1
  14:	mov	x20, x2
  18:	ldr	x1, [x19]
  1c:	stp	x23, x24, [sp, #32]
  20:	stp	x25, x26, [sp, #48]
  24:	add	x25, x19, #0x620
  28:	add	x24, x25, #0x208, lsl #12
  2c:	str	x30, [sp, #64]
  30:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  34:	mov	x1, x20
  38:	mov	x0, x19
  3c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  40:	and	x20, x20, #0xfff
  44:	ldr	x1, [x19]
  48:	mov	x0, x21
  4c:	mov	x21, #0x208                 	// #520
  50:	add	x22, x25, #0x208, lsl #12
  54:	add	x22, x22, #0x208
  58:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  5c:	madd	x26, x20, x21, x25
  60:	mov	x23, x0
  64:	mov	x0, x24
  68:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  6c:	mov	x1, x26
  70:	mov	x26, x21
  74:	mov	x0, x24
  78:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  7c:	mov	x0, x22
  80:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  84:	mov	x1, x20
  88:	mov	x0, x22
  8c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  90:	mov	x0, x24
  94:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  98:	ands	w21, w0, #0xff
  9c:	b.ne	d0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0xd0>  // b.any
  a0:	mov	x0, x24
  a4:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  a8:	mov	x1, x0
  ac:	mov	x20, x0
  b0:	mov	x0, x22
  b4:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  b8:	tst	w0, #0xff
  bc:	b.eq	90 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0x90>  // b.none
  c0:	madd	x1, x20, x26, x25
  c4:	mov	x0, x24
  c8:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  cc:	b	90 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0x90>
  d0:	add	x19, x19, #0x208, lsl #12
  d4:	add	x24, sp, #0x58
  d8:	ldr	x0, [x23]
  dc:	ldr	x1, [x19, #2088]
  e0:	and	x0, x0, x1
  e4:	str	x0, [sp, #88]
  e8:	ldr	x0, [sp, #88]
  ec:	cbz	x0, 140 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0x140>
  f0:	mov	x0, x24
  f4:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
  f8:	mov	x20, x0
  fc:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm>
 100:	ldr	x1, [x19, #2088]
 104:	tst	x0, x1
 108:	b.eq	e8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0xe8>  // b.none
 10c:	add	x1, x20, #0x1
 110:	lsl	x1, x1, #3
 114:	ldr	x2, [x23, x1]
 118:	ldr	x0, [x22, x1]
 11c:	tst	x2, x0
 120:	b.eq	e8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0xe8>  // b.none
 124:	mov	w0, w21
 128:	ldp	x21, x22, [sp, #16]
 12c:	ldp	x23, x24, [sp, #32]
 130:	ldp	x25, x26, [sp, #48]
 134:	ldr	x30, [sp, #64]
 138:	ldp	x19, x20, [sp], #96
 13c:	ret
 140:	mov	w21, #0x0                   	// #0
 144:	b	124 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE12onLockBeforeEPNS_19DeadlockDetectorTLSIS4_EEm+0x124>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>:
   0:	stp	x19, x20, [sp, #-432]!
   4:	mov	x19, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x1
  14:	mov	x20, x2
  18:	ldr	x1, [x19]
  1c:	stp	x23, x24, [sp, #32]
  20:	mov	w23, w4
  24:	stp	x25, x26, [sp, #48]
  28:	add	x26, x19, #0x620
  2c:	add	x22, x26, #0x208, lsl #12
  30:	stp	x27, x28, [sp, #64]
  34:	add	x27, sp, #0x70
  38:	mov	x28, #0x208                 	// #520
  3c:	str	x30, [sp, #80]
  40:	str	w3, [sp, #108]
  44:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  48:	mov	x1, x20
  4c:	mov	x0, x19
  50:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  54:	and	x20, x20, #0xfff
  58:	ldr	x1, [x19]
  5c:	mov	x0, x21
  60:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  64:	mov	x24, x0
  68:	mov	x0, x22
  6c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  70:	mov	x1, x24
  74:	mov	x24, #0x0                   	// #0
  78:	mov	x0, x22
  7c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  80:	mov	x0, x22
  84:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  88:	tst	w0, #0xff
  8c:	b.ne	c4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xc4>  // b.any
  90:	mov	x0, x22
  94:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  98:	mov	x25, x0
  9c:	madd	x0, x0, x28, x26
  a0:	mov	x1, x20
  a4:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
  a8:	tst	w0, #0xff
  ac:	b.eq	80 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x80>  // b.none
  b0:	cmp	x24, #0x27
  b4:	b.hi	80 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x80>  // b.pmore
  b8:	str	x25, [x27, x24, lsl #3]
  bc:	add	x24, x24, #0x1
  c0:	b	80 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x80>
  c4:	mov	x8, #0x10a3                	// #4259
  c8:	add	x2, x19, #0x410, lsl #12
  cc:	add	x6, sp, #0x70
  d0:	and	w20, w20, #0xffff
  d4:	add	x7, x21, #0x418
  d8:	mov	x0, #0x0                   	// #0
  dc:	mov	x4, #0x1ffff               	// #131071
  e0:	movk	x8, #0x2, lsl #16
  e4:	cmp	x0, x24
  e8:	b.eq	16c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x16c>  // b.none
  ec:	ldr	x5, [x2, #2608]
  f0:	cmp	x5, x4
  f4:	b.hi	154 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x154>  // b.pmore
  f8:	ldr	x3, [x6, x0, lsl #3]
  fc:	mov	x1, #0x0                   	// #0
 100:	ldr	x10, [x21, #1560]
 104:	and	w9, w3, #0xffff
 108:	cmp	x10, x1
 10c:	b.eq	164 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x164>  // b.none
 110:	lsl	x11, x1, #3
 114:	ldr	w11, [x7, x11]
 118:	cmp	w11, w3
 11c:	b.ne	15c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x15c>  // b.any
 120:	add	x1, x21, x1, lsl #3
 124:	ldr	w1, [x1, #1052]
 128:	add	x3, x5, #0x1
 12c:	add	x5, x5, x8
 130:	str	x3, [x2, #2608]
 134:	lsl	x3, x5, #4
 138:	add	x5, x19, x5, lsl #4
 13c:	strh	w9, [x19, x3]
 140:	str	w1, [x5, #4]
 144:	ldr	w1, [sp, #108]
 148:	strh	w20, [x5, #2]
 14c:	str	w1, [x5, #8]
 150:	str	w23, [x5, #12]
 154:	add	x0, x0, #0x1
 158:	b	e4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xe4>
 15c:	add	x1, x1, #0x1
 160:	b	108 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x108>
 164:	mov	w1, #0x0                   	// #0
 168:	b	128 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x128>
 16c:	ldp	x21, x22, [sp, #16]
 170:	ldp	x23, x24, [sp, #32]
 174:	ldp	x25, x26, [sp, #48]
 178:	ldp	x27, x28, [sp, #64]
 17c:	ldr	x30, [sp, #80]
 180:	ldp	x19, x20, [sp], #432
 184:	ret

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x19, x0
   8:	stp	x21, x22, [sp, #16]
   c:	add	x22, x0, #0x8
  10:	mov	x21, x1
  14:	mov	x0, x22
  18:	stp	x23, x24, [sp, #32]
  1c:	stp	x25, x26, [sp, #48]
  20:	str	x30, [sp, #64]
  24:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  28:	tst	w0, #0xff
  2c:	b.ne	6c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x6c>  // b.any
  30:	mov	x0, x22
  34:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  38:	add	x1, x0, #0x41, lsl #12
  3c:	mov	x20, x0
  40:	add	x1, x1, #0x146
  44:	str	x21, [x19, x1, lsl #3]
  48:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  4c:	ldr	x0, [x19]
  50:	ldp	x21, x22, [sp, #16]
  54:	add	x0, x20, x0
  58:	ldp	x23, x24, [sp, #32]
  5c:	ldp	x25, x26, [sp, #48]
  60:	ldr	x30, [sp, #64]
  64:	ldp	x19, x20, [sp], #80
  68:	ret
  6c:	add	x23, x19, #0x210
  70:	mov	x0, x23
  74:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  78:	tst	w0, #0xff
  7c:	b.ne	168 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x168>  // b.any
  80:	add	x26, x19, #0x410, lsl #12
  84:	mov	x24, #0x10a2                	// #4258
  88:	movk	x24, #0x2, lsl #16
  8c:	ldr	x20, [x26, #2608]
  90:	sub	x25, x20, #0x1
  94:	add	x20, x20, x24
  98:	add	x20, x19, x20, lsl #4
  9c:	tbnz	x25, #63, 114 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x114>
  a0:	ldrh	w1, [x20]
  a4:	mov	x0, x23
  a8:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  ac:	tst	w0, #0xff
  b0:	b.ne	c8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0xc8>  // b.any
  b4:	ldrh	w1, [x20, #2]
  b8:	mov	x0, x23
  bc:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
  c0:	tst	w0, #0xff
  c4:	b.eq	108 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x108>  // b.none
  c8:	ldr	x0, [x26, #2608]
  cc:	ldrh	w9, [x20]
  d0:	sub	x1, x0, #0x1
  d4:	add	x0, x0, x24
  d8:	ldrh	w7, [x20, #2]
  dc:	lsl	x8, x0, #4
  e0:	add	x0, x19, x0, lsl #4
  e4:	ldp	w6, w5, [x20, #4]
  e8:	ldp	x2, x3, [x0]
  ec:	ldr	w4, [x20, #12]
  f0:	stp	x2, x3, [x20]
  f4:	strh	w9, [x19, x8]
  f8:	strh	w7, [x0, #2]
  fc:	stp	w6, w5, [x0, #4]
 100:	str	w4, [x0, #12]
 104:	str	x1, [x26, #2608]
 108:	sub	x25, x25, #0x1
 10c:	sub	x20, x20, #0x10
 110:	b	9c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x9c>
 114:	mov	x0, x22
 118:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 11c:	tst	w0, #0xff
 120:	b.ne	144 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x144>  // b.any
 124:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 128:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 12c:	add	x2, x2, #0x0
 130:	add	x0, x0, #0x0
 134:	mov	x4, #0x0                   	// #0
 138:	mov	x3, #0x0                   	// #0
 13c:	mov	w1, #0xa7                  	// #167
 140:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 144:	mov	x1, x23
 148:	add	x0, x19, #0x620
 14c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 150:	mov	x1, x23
 154:	mov	x0, x22
 158:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 15c:	mov	x0, x23
 160:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 164:	b	30 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x30>
 168:	ldr	x0, [x19]
 16c:	add	x0, x0, #0x1, lsl #12
 170:	str	x0, [x19]
 174:	mov	x0, x23
 178:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 17c:	mov	x1, #0xffffffffffffffff    	// #-1
 180:	mov	x0, #0x0                   	// #0
 184:	str	x1, [x19, #8]
 188:	add	x0, x0, #0x1
 18c:	cmp	x0, #0x40
 190:	str	x1, [x22, x0, lsl #3]
 194:	b.ne	188 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x188>  // b.any
 198:	add	x23, x19, #0x208, lsl #12
 19c:	add	x20, x19, #0x620
 1a0:	add	x23, x23, #0x620
 1a4:	mov	x0, x20
 1a8:	add	x20, x20, #0x208
 1ac:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm>
 1b0:	cmp	x20, x23
 1b4:	b.ne	1a4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x1a4>  // b.any
 1b8:	add	x0, x19, #0x410, lsl #12
 1bc:	str	xzr, [x0, #2608]
 1c0:	b	30 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE7newNodeEm+0x30>

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	mov	x19, x4
   8:	stp	x21, x22, [sp, #16]
   c:	stp	x23, x24, [sp, #32]
  10:	str	x30, [sp, #48]
  14:	cbz	x4, d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xd4>
  18:	str	x1, [x3]
  1c:	mov	x22, x0
  20:	mov	x21, x1
  24:	mov	x23, x2
  28:	mov	x20, x3
  2c:	mov	x0, x2
  30:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
  34:	tst	w0, #0xff
  38:	b.ne	ec <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xec>  // b.any
  3c:	mov	x1, #0x208                 	// #520
  40:	add	x24, sp, #0x60
  44:	sub	x19, x19, #0x1
  48:	add	x20, x20, #0x8
  4c:	madd	x21, x21, x1, x22
  50:	stp	xzr, xzr, [sp, #88]
  54:	stp	x21, xzr, [sp, #72]
  58:	add	x21, sp, #0x68
  5c:	str	xzr, [sp, #104]
  60:	ldr	x0, [sp, #96]
  64:	cbnz	x0, 84 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x84>
  68:	ldr	x0, [sp, #80]
  6c:	cbnz	x0, 7c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x7c>
  70:	ldr	x0, [sp, #72]
  74:	ldr	x0, [x0]
  78:	cbnz	x0, f4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xf4>
  7c:	mov	x19, #0x0                   	// #0
  80:	b	d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xd4>
  84:	ldr	x0, [sp, #104]
  88:	cbz	x0, 100 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x100>
  8c:	mov	x0, x21
  90:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
  94:	ldp	x2, x1, [sp, #80]
  98:	ldr	x3, [sp, #104]
  9c:	add	x1, x1, x2, lsl #6
  a0:	add	x1, x0, x1, lsl #6
  a4:	ldr	x0, [sp, #96]
  a8:	orr	x0, x0, x3
  ac:	cbnz	x0, b8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xb8>
  b0:	add	x2, x2, #0x1
  b4:	str	x2, [sp, #80]
  b8:	mov	x4, x19
  bc:	mov	x3, x20
  c0:	mov	x2, x23
  c4:	mov	x0, x22
  c8:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
  cc:	cbz	x0, 60 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x60>
  d0:	add	x19, x0, #0x1
  d4:	mov	x0, x19
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x23, x24, [sp, #32]
  e0:	ldr	x30, [sp, #48]
  e4:	ldp	x19, x20, [sp], #112
  e8:	ret
  ec:	mov	x19, #0x1                   	// #1
  f0:	b	d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xd4>
  f4:	ldr	x1, [sp, #104]
  f8:	cbnz	x1, 8c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x8c>
  fc:	str	x0, [sp, #96]
 100:	mov	x0, x24
 104:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 108:	ldr	x1, [sp, #80]
 10c:	str	x0, [sp, #88]
 110:	add	x1, x0, x1, lsl #6
 114:	ldr	x0, [sp, #72]
 118:	add	x1, x1, #0x1
 11c:	ldr	x0, [x0, x1, lsl #3]
 120:	str	x0, [sp, #104]
 124:	cbnz	x0, 8c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x8c>
 128:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 12c:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 130:	add	x2, x2, #0x0
 134:	add	x0, x0, #0x0
 138:	mov	x4, #0x0                   	// #0
 13c:	mov	x3, #0x0                   	// #0
 140:	mov	w1, #0x132                 	// #306
 144:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x19, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x2
  14:	mov	x22, x3
  18:	ldr	x1, [x19]
  1c:	stp	x23, x24, [sp, #32]
  20:	add	x24, x19, #0x418
  24:	stp	x25, x26, [sp, #48]
  28:	and	x26, x2, #0xfff
  2c:	mov	x25, x4
  30:	stp	x27, x30, [sp, #64]
  34:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  38:	mov	x20, x0
  3c:	mov	x0, x24
  40:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  44:	mov	x1, x20
  48:	mov	x0, x24
  4c:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  50:	mov	x1, x21
  54:	mov	x0, x19
  58:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  5c:	mov	x1, x26
  60:	mov	x0, x24
  64:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  68:	tst	w0, #0xff
  6c:	b.eq	90 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x90>  // b.none
  70:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  74:	add	x2, x2, #0x0
  78:	mov	x4, #0x0                   	// #0
  7c:	mov	x3, #0x0                   	// #0
  80:	mov	w1, #0x13e                 	// #318
  84:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  90:	add	x27, x19, #0x620
  94:	mov	x23, #0x1                   	// #1
  98:	cmp	x25, x23
  9c:	b.cc	11c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x11c>  // b.lo, b.ul, b.last
  a0:	mov	x4, x23
  a4:	mov	x3, x22
  a8:	mov	x2, x24
  ac:	mov	x1, x26
  b0:	mov	x0, x27
  b4:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  b8:	mov	x20, x0
  bc:	cmp	x23, x0
  c0:	b.eq	cc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0xcc>  // b.none
  c4:	add	x23, x23, #0x1
  c8:	b	98 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x98>
  cc:	mov	x23, #0x0                   	// #0
  d0:	cmp	x23, x20
  d4:	b.eq	f8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0xf8>  // b.none
  d8:	ldr	x24, [x22, x23, lsl #3]
  dc:	mov	x0, x24
  e0:	bl	0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
  e4:	ldr	x1, [x19]
  e8:	add	x1, x1, x24
  ec:	str	x1, [x22, x23, lsl #3]
  f0:	add	x23, x23, #0x1
  f4:	b	d0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0xd0>
  f8:	cbz	x23, 120 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x120>
  fc:	ldr	x3, [x22]
 100:	cmp	x21, x3
 104:	b.eq	120 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x120>  // b.none
 108:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm>
 10c:	mov	x4, x21
 110:	add	x2, x2, #0x0
 114:	mov	w1, #0x143                 	// #323
 118:	b	84 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE14findPathToLockEPNS_19DeadlockDetectorTLSIS4_EEmPmm+0x84>
 11c:	mov	x20, #0x0                   	// #0
 120:	mov	x0, x20
 124:	ldp	x21, x22, [sp, #16]
 128:	ldp	x23, x24, [sp, #32]
 12c:	ldp	x25, x26, [sp, #48]
 130:	ldp	x27, x30, [sp, #64]
 134:	ldp	x19, x20, [sp], #80
 138:	ret

sanitizer_deadlock_detector2.o:     file format elf64-littleaarch64


sanitizer_errno.o:     file format elf64-littleaarch64


sanitizer_file.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>:
   0:	mov	x2, x1
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x1, x0
   c:	mov	x3, #0x0                   	// #0
  10:	mov	w0, #0x2                   	// #2
  14:	b	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>

0000000000000018 <_ZN11__sanitizer8RawWriteEPKc>:
  18:	stp	x19, x30, [sp, #-16]!
  1c:	mov	x19, x0
  20:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  24:	mov	x2, x0
  28:	mov	x1, x19
  2c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  30:	ldp	x19, x30, [sp], #16
  34:	add	x0, x0, #0x0
  38:	b	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>

000000000000003c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>:
  3c:	stp	x19, x20, [sp, #-32]!
  40:	mov	x19, x0
  44:	ldr	x0, [x0]
  48:	stp	x21, x30, [sp, #16]
  4c:	ldrb	w3, [x0]
  50:	and	x3, x3, #0xff
  54:	cmp	x3, #0x1
  58:	b.eq	78 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x3c>  // b.none
  5c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  60:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  64:	add	x2, x2, #0x0
  68:	add	x0, x0, #0x0
  6c:	mov	x4, #0x1                   	// #1
  70:	mov	w1, #0x2a                  	// #42
  74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  78:	ldr	w0, [x19, #8]
  7c:	sub	w0, w0, #0x1
  80:	cmp	w0, #0x1
  84:	b.ls	194 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x158>  // b.plast
  88:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  8c:	mov	x20, x0
  90:	adrp	x0, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
  94:	ldr	x0, [x0]
  98:	ldr	x0, [x0]
  9c:	cmp	x0, x20
  a0:	b.ne	b0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x74>  // b.any
  a4:	adrp	x0, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
  a8:	ldr	x0, [x0]
  ac:	ldr	x20, [x0]
  b0:	ldr	w0, [x19, #8]
  b4:	cmn	w0, #0x1
  b8:	b.eq	cc <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x90>  // b.none
  bc:	ldr	x1, [x19, #8208]
  c0:	cmp	x1, x20
  c4:	b.eq	194 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x158>  // b.none
  c8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  cc:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
  d0:	mov	x4, x0
  d4:	mov	x0, #0x100c                	// #4108
  d8:	add	x21, x19, x0
  dc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  e0:	add	x3, x19, #0xc
  e4:	ldr	x0, [x0]
  e8:	ldrb	w0, [x0, #48]
  ec:	cbz	w0, 174 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x138>
  f0:	cbz	x4, 174 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x138>
  f4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  f8:	mov	x5, x20
  fc:	add	x2, x2, #0x0
 100:	mov	x0, x21
 104:	mov	x1, #0x1000                	// #4096
 108:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 10c:	mov	x0, x21
 110:	mov	x2, #0x0                   	// #0
 114:	mov	w1, #0x1                   	// #1
 118:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 11c:	str	w0, [x19, #8]
 120:	cmn	w0, #0x1
 124:	b.ne	190 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x154>  // b.any
 128:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 12c:	add	x19, x19, #0x0
 130:	mov	x0, x19
 134:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 138:	mov	x1, x19
 13c:	mov	x2, x0
 140:	mov	x4, #0x0                   	// #0
 144:	mov	x3, #0x0                   	// #0
 148:	mov	w0, #0x2                   	// #2
 14c:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 150:	mov	x0, x21
 154:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 158:	mov	x1, x21
 15c:	mov	x2, x0
 160:	mov	x4, #0x0                   	// #0
 164:	mov	x3, #0x0                   	// #0
 168:	mov	w0, #0x2                   	// #2
 16c:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 170:	bl	0 <_ZN11__sanitizer3DieEv>
 174:	mov	x4, x20
 178:	mov	x0, x21
 17c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 180:	mov	x1, #0x1000                	// #4096
 184:	add	x2, x2, #0x0
 188:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 18c:	b	10c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xd0>
 190:	str	x20, [x19, #8208]
 194:	ldp	x21, x30, [sp, #16]
 198:	ldp	x19, x20, [sp], #32
 19c:	ret

00000000000001a0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>:
 1a0:	cbz	x1, 2b0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x110>
 1a4:	sub	sp, sp, #0x30
 1a8:	stp	x19, x20, [sp, #16]
 1ac:	mov	x20, x0
 1b0:	mov	x19, x1
 1b4:	mov	x0, x1
 1b8:	stp	x21, x30, [sp, #32]
 1bc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1c0:	cmp	x0, #0xf9c
 1c4:	b.ls	1fc <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x5c>  // b.plast
 1c8:	ldrb	w0, [x19, #7]
 1cc:	str	w0, [sp]
 1d0:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 1d4:	add	x0, x0, #0x0
 1d8:	ldrb	w7, [x19, #6]
 1dc:	ldrb	w6, [x19, #5]
 1e0:	ldrb	w5, [x19, #4]
 1e4:	ldrb	w4, [x19, #3]
 1e8:	ldrb	w3, [x19, #2]
 1ec:	ldrb	w2, [x19, #1]
 1f0:	ldrb	w1, [x19]
 1f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1f8:	bl	0 <_ZN11__sanitizer3DieEv>
 1fc:	ldr	x21, [x20]
 200:	mov	w1, #0x1                   	// #1
 204:	ldxrb	w0, [x21]
 208:	stxrb	w2, w1, [x21]
 20c:	cbnz	w2, 204 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x64>
 210:	dmb	ish
 214:	tst	w0, #0xff
 218:	b.eq	224 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x84>  // b.none
 21c:	mov	x0, x21
 220:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 224:	ldr	w0, [x20, #8]
 228:	sub	w1, w0, #0x1
 22c:	cmp	w1, #0x1
 230:	ccmn	w0, #0x1, #0x4, hi  // hi = pmore
 234:	b.eq	23c <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x9c>  // b.none
 238:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 23c:	mov	w0, #0xffffffff            	// #-1
 240:	str	w0, [x20, #8]
 244:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 248:	mov	x0, x19
 24c:	add	x1, x1, #0x0
 250:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 254:	cbnz	w0, 278 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xd8>
 258:	mov	w0, #0x1                   	// #1
 25c:	str	w0, [x20, #8]
 260:	dmb	ish
 264:	strb	wzr, [x21]
 268:	ldp	x19, x20, [sp, #16]
 26c:	ldp	x21, x30, [sp, #32]
 270:	add	sp, sp, #0x30
 274:	ret
 278:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 27c:	mov	x0, x19
 280:	add	x1, x1, #0x0
 284:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 288:	cbnz	w0, 294 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xf4>
 28c:	mov	w0, #0x2                   	// #2
 290:	b	25c <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xbc>
 294:	mov	x3, x19
 298:	add	x0, x20, #0xc
 29c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2a0:	mov	x1, #0x1000                	// #4096
 2a4:	add	x2, x2, #0x0
 2a8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 2ac:	b	260 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xc0>
 2b0:	ret

00000000000002b4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>:
 2b4:	stp	x19, x20, [sp, #-128]!
 2b8:	stp	x21, x22, [sp, #16]
 2bc:	stp	x23, x24, [sp, #32]
 2c0:	stp	x25, x26, [sp, #48]
 2c4:	stp	x27, x28, [sp, #64]
 2c8:	str	x30, [sp, #80]
 2cc:	str	xzr, [x1]
 2d0:	str	xzr, [x2]
 2d4:	str	xzr, [x3]
 2d8:	str	x0, [sp, #104]
 2dc:	cbz	x4, 408 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x154>
 2e0:	mov	x21, x4
 2e4:	mov	x22, x1
 2e8:	mov	x23, x2
 2ec:	mov	x24, x3
 2f0:	mov	x25, x5
 2f4:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2f8:	cmp	x21, x0
 2fc:	adrp	x27, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 300:	csel	x19, x21, x0, ls  // ls = plast
 304:	add	x27, x27, #0x0
 308:	add	x28, sp, #0x78
 30c:	ldr	x0, [x22]
 310:	ldr	x1, [x23]
 314:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 318:	mov	x1, x27
 31c:	mov	w2, #0x0                   	// #0
 320:	mov	x0, x19
 324:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 328:	str	x0, [x22]
 32c:	mov	x2, x25
 330:	ldr	x0, [sp, #104]
 334:	str	x19, [x23]
 338:	mov	w1, #0x0                   	// #0
 33c:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 340:	mov	w26, w0
 344:	cmn	w0, #0x1
 348:	b.ne	37c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xc8>  // b.any
 34c:	ldr	x0, [x22]
 350:	mov	w20, #0x0                   	// #0
 354:	ldr	x1, [x23]
 358:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 35c:	mov	w0, w20
 360:	ldp	x21, x22, [sp, #16]
 364:	ldp	x23, x24, [sp, #32]
 368:	ldp	x25, x26, [sp, #48]
 36c:	ldp	x27, x28, [sp, #64]
 370:	ldr	x30, [sp, #80]
 374:	ldp	x19, x20, [sp], #128
 378:	ret
 37c:	str	xzr, [x24]
 380:	ldr	x0, [x24]
 384:	cmp	x0, x19
 388:	b.cs	400 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x14c>  // b.hs, b.nlast
 38c:	ldr	x1, [x22]
 390:	sub	x2, x19, x0
 394:	mov	x4, x25
 398:	mov	x3, x28
 39c:	add	x1, x1, x0
 3a0:	mov	w0, w26
 3a4:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 3a8:	ands	w20, w0, #0xff
 3ac:	b.ne	3c8 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x114>  // b.any
 3b0:	ldr	x0, [x22]
 3b4:	ldr	x1, [x23]
 3b8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3bc:	mov	w0, w26
 3c0:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 3c4:	b	35c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xa8>
 3c8:	ldr	x0, [x24]
 3cc:	ldr	x1, [sp, #120]
 3d0:	add	x0, x1, x0
 3d4:	str	x0, [x24]
 3d8:	cbz	x1, 3e4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x130>
 3dc:	cmp	x0, x21
 3e0:	b.ne	380 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xcc>  // b.any
 3e4:	mov	w0, w26
 3e8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 3ec:	cbnz	w20, 408 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x154>
 3f0:	lsl	x19, x19, #1
 3f4:	cmp	x19, x21
 3f8:	csel	x19, x19, x21, ls  // ls = plast
 3fc:	b	30c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x58>
 400:	mov	w20, #0x0                   	// #0
 404:	b	3e4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x130>
 408:	mov	w20, #0x1                   	// #1
 40c:	b	35c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xa8>

0000000000000410 <__sanitizer_set_report_path>:
 410:	mov	x1, x0
 414:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 418:	add	x0, x0, #0x0
 41c:	b	1a0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>

0000000000000420 <__sanitizer_set_report_fd>:
 420:	stp	x19, x30, [sp, #-16]!
 424:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 428:	add	x19, x19, #0x0
 42c:	str	w0, [x19, #8]
 430:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 434:	str	x0, [x19, #8208]
 438:	ldp	x19, x30, [sp], #16
 43c:	ret

0000000000000440 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>:
 440:	stp	x19, x20, [sp, #-96]!
 444:	stp	x21, x22, [sp, #16]
 448:	stp	x23, x24, [sp, #32]
 44c:	stp	x25, x26, [sp, #48]
 450:	str	x30, [sp, #64]
 454:	str	xzr, [x1, #16]
 458:	cbz	x2, 57c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x13c>
 45c:	mov	x25, x3
 460:	mov	x19, x0
 464:	mov	x20, x1
 468:	mov	x21, x2
 46c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 470:	mov	x24, x0
 474:	mov	x2, x25
 478:	mov	x0, x19
 47c:	mov	w1, #0x0                   	// #0
 480:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 484:	mov	w23, w0
 488:	cmn	w0, #0x1
 48c:	b.eq	584 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x144>  // b.none
 490:	add	x26, sp, #0x58
 494:	mov	x19, #0x0                   	// #0
 498:	cmp	x19, x21
 49c:	b.cs	568 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x128>  // b.hs, b.nlast
 4a0:	ldr	x0, [x20, #16]
 4a4:	cmp	x19, x0
 4a8:	b.cc	4c8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x88>  // b.lo, b.ul, b.last
 4ac:	lsl	x1, x19, #1
 4b0:	mov	x0, x20
 4b4:	cmp	x1, x24
 4b8:	csel	x1, x1, x24, cs  // cs = hs, nlast
 4bc:	cmp	x1, x21
 4c0:	csel	x1, x1, x21, ls  // ls = plast
 4c4:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 4c8:	ldr	x2, [x20, #16]
 4cc:	cmp	x19, x2
 4d0:	b.cc	4f4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xb4>  // b.lo, b.ul, b.last
 4d4:	mov	x4, x2
 4d8:	mov	x3, x19
 4dc:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 4e0:	add	x2, x2, #0x0
 4e4:	mov	w1, #0x98                  	// #152
 4e8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 4ec:	add	x0, x0, #0x0
 4f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4f4:	cmp	x21, x2
 4f8:	b.cs	514 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xd4>  // b.hs, b.nlast
 4fc:	mov	x3, x2
 500:	mov	x4, x21
 504:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 508:	mov	w1, #0x99                  	// #153
 50c:	add	x2, x2, #0x0
 510:	b	4e8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xa8>
 514:	ldr	x1, [x20]
 518:	mov	x4, x25
 51c:	mov	x3, x26
 520:	sub	x2, x2, x19
 524:	mov	w0, w23
 528:	add	x1, x1, x19
 52c:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 530:	ands	w22, w0, #0xff
 534:	b.ne	55c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x11c>  // b.any
 538:	mov	w0, w23
 53c:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 540:	mov	w0, w22
 544:	ldp	x21, x22, [sp, #16]
 548:	ldp	x23, x24, [sp, #32]
 54c:	ldp	x25, x26, [sp, #48]
 550:	ldr	x30, [sp, #64]
 554:	ldp	x19, x20, [sp], #96
 558:	ret
 55c:	ldr	x0, [sp, #88]
 560:	add	x19, x19, x0
 564:	cbnz	x0, 498 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x58>
 568:	mov	w0, w23
 56c:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 570:	mov	x1, x19
 574:	mov	x0, x20
 578:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 57c:	mov	w22, #0x1                   	// #1
 580:	b	540 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x100>
 584:	mov	w22, #0x0                   	// #0
 588:	b	540 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x100>

000000000000058c <_ZN11__sanitizer16FindPathToBinaryEPKc>:
 58c:	stp	x19, x20, [sp, #-112]!
 590:	stp	x21, x22, [sp, #16]
 594:	mov	x21, x0
 598:	stp	x23, x24, [sp, #32]
 59c:	stp	x25, x26, [sp, #48]
 5a0:	str	x30, [sp, #64]
 5a4:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 5a8:	tst	w0, #0xff
 5ac:	b.eq	5d8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x4c>  // b.none
 5b0:	mov	x0, x21
 5b4:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 5b8:	mov	x19, x0
 5bc:	mov	x0, x19
 5c0:	ldp	x21, x22, [sp, #16]
 5c4:	ldp	x23, x24, [sp, #32]
 5c8:	ldp	x25, x26, [sp, #48]
 5cc:	ldr	x30, [sp, #64]
 5d0:	ldp	x19, x20, [sp], #112
 5d4:	ret
 5d8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 5dc:	add	x0, x0, #0x0
 5e0:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 5e4:	mov	x19, x0
 5e8:	cbz	x0, 5bc <_ZN11__sanitizer16FindPathToBinaryEPKc+0x30>
 5ec:	add	x22, sp, #0x58
 5f0:	mov	x0, x21
 5f4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 5f8:	mov	x23, x0
 5fc:	mov	x1, #0x1000                	// #4096
 600:	mov	x0, x22
 604:	stp	xzr, xzr, [sp, #88]
 608:	mov	w26, #0x2f                  	// #47
 60c:	str	xzr, [sp, #104]
 610:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 614:	mov	x0, x22
 618:	mov	x1, #0x1000                	// #4096
 61c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 620:	mov	x0, x19
 624:	mov	w1, #0x3a                  	// #58
 628:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 62c:	sub	x24, x0, x19
 630:	add	x25, x23, x24
 634:	mov	x20, x0
 638:	add	x0, x25, #0x2
 63c:	cmp	x0, #0x1, lsl #12
 640:	b.hi	6b4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x128>  // b.pmore
 644:	ldr	x0, [sp, #88]
 648:	mov	x2, x24
 64c:	mov	x1, x19
 650:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 654:	mov	x1, x24
 658:	mov	x0, x22
 65c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 660:	strb	w26, [x0]
 664:	add	x1, x24, #0x1
 668:	mov	x0, x22
 66c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 670:	mov	x2, x23
 674:	mov	x1, x21
 678:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 67c:	add	x1, x25, #0x1
 680:	mov	x0, x22
 684:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 688:	strb	wzr, [x0]
 68c:	ldr	x0, [sp, #88]
 690:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 694:	tst	w0, #0xff
 698:	b.eq	6b4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x128>  // b.none
 69c:	ldr	x0, [sp, #88]
 6a0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 6a4:	mov	x19, x0
 6a8:	ldp	x0, x1, [sp, #88]
 6ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6b0:	b	5bc <_ZN11__sanitizer16FindPathToBinaryEPKc+0x30>
 6b4:	ldrb	w0, [x20]
 6b8:	cbz	w0, 6c4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x138>
 6bc:	add	x19, x20, #0x1
 6c0:	b	620 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x94>
 6c4:	mov	x19, #0x0                   	// #0
 6c8:	b	6a8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x11c>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x20, x0
  34:	mov	x19, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	sub	x1, x0, #0x1
  5c:	tst	x1, x0
  60:	b.eq	74 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x74>  // b.none
  64:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  68:	add	x0, x0, #0x0
  6c:	bl	18 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x18>
  70:	bl	0 <_ZN11__sanitizer3DieEv>
  74:	sub	x19, x19, #0x1
  78:	mov	w2, #0x0                   	// #0
  7c:	add	x19, x19, x0
  80:	neg	x0, x0
  84:	and	x19, x19, x0
  88:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  8c:	mov	x0, x19
  90:	add	x1, x1, #0x0
  94:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  98:	mov	x21, x0
  9c:	ldr	x1, [x20]
  a0:	ldr	x2, [x20, #16]
  a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  a8:	ldp	x0, x1, [x20]
  ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  b0:	stp	x21, x19, [x20]
  b4:	ldp	x21, x30, [sp, #16]
  b8:	ldp	x19, x20, [sp], #32
  bc:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	ldr	x2, [x0, #16]
  10:	str	x30, [sp, #16]
  14:	cmp	x2, x1
  18:	b.cs	44 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm+0x44>  // b.hs, b.nlast
  1c:	ldr	x2, [x0, #8]
  20:	cmp	x1, x2
  24:	b.ls	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm+0x2c>  // b.plast
  28:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm>
  2c:	ldr	x3, [x19]
  30:	mov	w1, #0x0                   	// #0
  34:	ldr	x0, [x19, #16]
  38:	sub	x2, x20, x0
  3c:	add	x0, x3, x0
  40:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  44:	ldr	x30, [sp, #16]
  48:	str	x20, [x19, #16]
  4c:	ldp	x19, x20, [sp], #32
  50:	ret

sanitizer_flag_parser.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	adrp	x19, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
   8:	add	x19, x19, #0x0
   c:	stp	x21, x30, [sp, #16]
  10:	ldr	w1, [x19, #160]
  14:	cbz	w1, 54 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x54>
  18:	adrp	x21, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  1c:	add	x21, x21, #0x0
  20:	mov	x20, #0x0                   	// #0
  24:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  30:	ldr	w0, [x19, #160]
  34:	cmp	w0, w20
  38:	b.le	50 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x50>
  3c:	ldr	x1, [x19, x20, lsl #3]
  40:	mov	x0, x21
  44:	add	x20, x20, #0x1
  48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  4c:	b	30 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x30>
  50:	str	wzr, [x19, #160]
  54:	ldp	x21, x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

0000000000000060 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>:
  60:	stp	x19, x20, [sp, #-32]!
  64:	stp	x21, x30, [sp, #16]
  68:	mov	x21, x1
  6c:	mov	x0, x21
  70:	mov	x1, x2
  74:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
  78:	mov	x19, x0
  7c:	add	x1, x0, #0x1
  80:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  84:	add	x0, x0, #0x0
  88:	add	x0, x0, #0xa8
  8c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  90:	mov	x20, x0
  94:	mov	x2, x19
  98:	mov	x1, x21
  9c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  a0:	mov	x0, x20
  a4:	strb	wzr, [x20, x19]
  a8:	ldp	x21, x30, [sp, #16]
  ac:	ldp	x19, x20, [sp], #32
  b0:	ret

00000000000000b4 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>:
  b4:	stp	x19, x20, [sp, #-48]!
  b8:	mov	x20, x0
  bc:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  c0:	mov	x19, #0x0                   	// #0
  c4:	stp	x21, x22, [sp, #16]
  c8:	adrp	x21, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  cc:	ldr	x0, [x0]
  d0:	add	x21, x21, #0x0
  d4:	mov	x22, #0x18                  	// #24
  d8:	ldr	x1, [x0]
  dc:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  e0:	add	x0, x0, #0x0
  e4:	str	x30, [sp, #32]
  e8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  ec:	ldr	w0, [x20, #8]
  f0:	cmp	w0, w19
  f4:	b.le	11c <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x68>
  f8:	ldr	x1, [x20]
  fc:	mul	x0, x19, x22
 100:	add	x19, x19, #0x1
 104:	add	x2, x1, x0
 108:	ldr	x1, [x1, x0]
 10c:	mov	x0, x21
 110:	ldr	x2, [x2, #8]
 114:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 118:	b	ec <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x38>
 11c:	ldp	x21, x22, [sp, #16]
 120:	ldr	x30, [sp, #32]
 124:	ldp	x19, x20, [sp], #48
 128:	ret

000000000000012c <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>:
 12c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 130:	add	x0, x0, #0x0
 134:	str	x30, [sp, #-16]!
 138:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 13c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000140 <_ZN11__sanitizer10FlagParser8is_spaceEc>:
 140:	and	w1, w1, #0xff
 144:	cmp	w1, #0x3a
 148:	b.hi	160 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x20>  // b.pmore
 14c:	mov	x0, #0x400                 	// #1024
 150:	movk	x0, #0x1001, lsl #32
 154:	movk	x0, #0x400, lsl #48
 158:	lsr	x0, x0, x1
 15c:	tbnz	w0, #0, 170 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x30>
 160:	and	w1, w1, #0xfffffffb
 164:	cmp	w1, #0x9
 168:	cset	w0, eq  // eq = none
 16c:	ret
 170:	mov	w0, #0x1                   	// #1
 174:	b	16c <_ZN11__sanitizer10FlagParser8is_spaceEc+0x2c>

0000000000000178 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>:
 178:	ldr	x4, [x0, #16]
 17c:	mov	x2, x0
 180:	str	x30, [sp, #-16]!
 184:	ldr	x3, [x2, #24]
 188:	mov	x0, x2
 18c:	ldrb	w1, [x4, x3]
 190:	bl	140 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 194:	tst	w0, #0xff
 198:	b.eq	1a8 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x30>  // b.none
 19c:	add	x3, x3, #0x1
 1a0:	str	x3, [x2, #24]
 1a4:	b	184 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0xc>
 1a8:	ldr	x30, [sp], #16
 1ac:	ret

00000000000001b0 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>:
 1b0:	stp	x19, x20, [sp, #-64]!
 1b4:	mov	x19, x0
 1b8:	mov	x20, x1
 1bc:	stp	x21, x22, [sp, #16]
 1c0:	mov	x22, x2
 1c4:	mov	x21, #0x0                   	// #0
 1c8:	stp	x23, x24, [sp, #32]
 1cc:	mov	x24, #0x18                  	// #24
 1d0:	str	x30, [sp, #48]
 1d4:	ldr	w0, [x19, #8]
 1d8:	cmp	w0, w21
 1dc:	b.le	22c <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x7c>
 1e0:	mul	x23, x21, x24
 1e4:	add	x21, x21, #0x1
 1e8:	ldr	x0, [x19]
 1ec:	ldr	x1, [x0, x23]
 1f0:	mov	x0, x20
 1f4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 1f8:	cbnz	w0, 1d4 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x24>
 1fc:	ldr	x0, [x19]
 200:	ldr	x30, [sp, #48]
 204:	add	x0, x0, x23
 208:	ldp	x23, x24, [sp, #32]
 20c:	ldr	x0, [x0, #16]
 210:	ldr	x1, [x0]
 214:	ldr	x2, [x1]
 218:	mov	x1, x22
 21c:	ldp	x21, x22, [sp, #16]
 220:	mov	x16, x2
 224:	ldp	x19, x20, [sp], #64
 228:	br	x16
 22c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 230:	add	x0, x0, #0x0
 234:	ldr	w1, [x0, #160]
 238:	sxtw	x3, w1
 23c:	cmp	x3, #0x13
 240:	b.ls	260 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0xb0>  // b.plast
 244:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 248:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 24c:	add	x2, x2, #0x0
 250:	add	x0, x0, #0x0
 254:	mov	x4, #0x14                  	// #20
 258:	mov	w1, #0x1e                  	// #30
 25c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 260:	add	w1, w1, #0x1
 264:	str	x20, [x0, x3, lsl #3]
 268:	ldp	x21, x22, [sp, #16]
 26c:	ldp	x23, x24, [sp, #32]
 270:	ldr	x30, [sp, #48]
 274:	str	w1, [x0, #160]
 278:	mov	w0, #0x1                   	// #1
 27c:	ldp	x19, x20, [sp], #64
 280:	ret

0000000000000284 <_ZN11__sanitizer10FlagParser10parse_flagEv>:
 284:	stp	x19, x20, [sp, #-32]!
 288:	mov	x19, x0
 28c:	ldp	x4, x3, [x0, #16]
 290:	str	x30, [sp, #16]
 294:	ldr	x2, [x19, #24]
 298:	ldrb	w1, [x4, x2]
 29c:	cmp	w1, #0x3d
 2a0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 2a4:	b.eq	2c4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x40>  // b.none
 2a8:	mov	x0, x19
 2ac:	bl	140 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 2b0:	tst	w0, #0xff
 2b4:	b.ne	2cc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x48>  // b.any
 2b8:	add	x2, x2, #0x1
 2bc:	str	x2, [x19, #24]
 2c0:	b	294 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x10>
 2c4:	cmp	w1, #0x3d
 2c8:	b.eq	2dc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x58>  // b.none
 2cc:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2d0:	add	x1, x1, #0x0
 2d4:	mov	x0, x19
 2d8:	bl	12c <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 2dc:	sub	x2, x2, x3
 2e0:	add	x1, x4, x3
 2e4:	mov	x0, x19
 2e8:	bl	60 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 2ec:	ldp	x4, x1, [x19, #16]
 2f0:	mov	x20, x0
 2f4:	mov	w2, #0x22                  	// #34
 2f8:	add	x3, x1, #0x1
 2fc:	str	x3, [x19, #24]
 300:	add	x5, x4, x3
 304:	ldrb	w0, [x4, x3]
 308:	cmp	w0, #0x27
 30c:	ccmp	w0, w2, #0x4, ne  // ne = any
 310:	b.ne	340 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xbc>  // b.any
 314:	add	x1, x1, #0x2
 318:	str	x1, [x19, #24]
 31c:	ldrb	w5, [x4, x3]
 320:	ldr	x2, [x19, #24]
 324:	ldrb	w0, [x4, x2]
 328:	cbz	w0, 39c <_ZN11__sanitizer10FlagParser10parse_flagEv+0x118>
 32c:	cmp	w0, w5
 330:	b.eq	3a8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x124>  // b.none
 334:	add	x2, x2, #0x1
 338:	str	x2, [x19, #24]
 33c:	b	320 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x9c>
 340:	ldr	x2, [x19, #24]
 344:	ldrb	w1, [x4, x2]
 348:	cbz	w1, 368 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xe4>
 34c:	mov	x0, x19
 350:	bl	140 <_ZN11__sanitizer10FlagParser8is_spaceEc>
 354:	tst	w0, #0xff
 358:	b.ne	368 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xe4>  // b.any
 35c:	add	x2, x2, #0x1
 360:	str	x2, [x19, #24]
 364:	b	340 <_ZN11__sanitizer10FlagParser10parse_flagEv+0xbc>
 368:	sub	x2, x2, x3
 36c:	mov	x1, x5
 370:	mov	x0, x19
 374:	bl	60 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 378:	mov	x2, x0
 37c:	mov	x1, x20
 380:	mov	x0, x19
 384:	bl	1b0 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>
 388:	tst	w0, #0xff
 38c:	b.ne	3d0 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x14c>  // b.any
 390:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 394:	add	x1, x1, #0x0
 398:	b	2d4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x50>
 39c:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 3a0:	add	x1, x1, #0x0
 3a4:	b	2d4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x50>
 3a8:	mvn	x3, x3
 3ac:	add	x1, x4, x1
 3b0:	add	x2, x3, x2
 3b4:	mov	x0, x19
 3b8:	bl	60 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>
 3bc:	mov	x2, x0
 3c0:	ldr	x0, [x19, #24]
 3c4:	add	x0, x0, #0x1
 3c8:	str	x0, [x19, #24]
 3cc:	b	37c <_ZN11__sanitizer10FlagParser10parse_flagEv+0xf8>
 3d0:	ldr	x30, [sp, #16]
 3d4:	ldp	x19, x20, [sp], #32
 3d8:	ret

00000000000003dc <_ZN11__sanitizer10FlagParser11parse_flagsEv>:
 3dc:	stp	x19, x30, [sp, #-16]!
 3e0:	mov	x19, x0
 3e4:	mov	x0, x19
 3e8:	bl	178 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>
 3ec:	ldp	x1, x0, [x19, #16]
 3f0:	ldrb	w0, [x1, x0]
 3f4:	cbz	w0, 404 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x28>
 3f8:	mov	x0, x19
 3fc:	bl	284 <_ZN11__sanitizer10FlagParser10parse_flagEv>
 400:	b	3e4 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x8>
 404:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 408:	ldr	x0, [x0]
 40c:	ldr	w1, [x0, #36]
 410:	cmp	w1, #0x0
 414:	b.gt	420 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x44>
 418:	mov	w1, #0x1                   	// #1
 41c:	str	w1, [x0, #36]
 420:	ldp	x19, x30, [sp], #16
 424:	ret

0000000000000428 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>:
 428:	cbz	x1, 454 <_ZN11__sanitizer10FlagParser11ParseStringEPKc+0x2c>
 42c:	stp	x19, x20, [sp, #-32]!
 430:	mov	x19, x0
 434:	stp	x21, x30, [sp, #16]
 438:	ldp	x21, x20, [x0, #16]
 43c:	stp	x1, xzr, [x0, #16]
 440:	bl	3dc <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 444:	stp	x21, x20, [x19, #16]
 448:	ldp	x21, x30, [sp, #16]
 44c:	ldp	x19, x20, [sp], #32
 450:	ret
 454:	ret

0000000000000458 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>:
 458:	stp	x19, x20, [sp, #-80]!
 45c:	mov	x20, x1
 460:	stp	x21, x22, [sp, #16]
 464:	and	w21, w2, #0xff
 468:	adrp	x2, 0 <_ZN11__sanitizer14PageSizeCachedE>
 46c:	stp	x23, x30, [sp, #32]
 470:	mov	x22, x0
 474:	mov	x19, x2
 478:	ldr	x23, [x2]
 47c:	ldr	x0, [x23]
 480:	cbnz	x0, 48c <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x34>
 484:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 488:	str	x0, [x23]
 48c:	ldr	x2, [x19]
 490:	add	x5, sp, #0x34
 494:	add	x3, sp, #0x48
 498:	add	x1, sp, #0x38
 49c:	mov	x4, #0x8000                	// #32768
 4a0:	ldr	x0, [x2]
 4a4:	add	x2, sp, #0x40
 4a8:	cmp	x0, #0x8, lsl #12
 4ac:	csel	x4, x0, x4, cs  // cs = hs, nlast
 4b0:	mov	x0, x20
 4b4:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 4b8:	ands	w19, w0, #0xff
 4bc:	b.ne	4ec <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x94>  // b.any
 4c0:	cbnz	w21, 4d8 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x80>
 4c4:	ldr	w2, [sp, #52]
 4c8:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 4cc:	mov	x1, x20
 4d0:	add	x0, x0, #0x0
 4d4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 4d8:	mov	w0, w21
 4dc:	ldp	x21, x22, [sp, #16]
 4e0:	ldp	x23, x30, [sp, #32]
 4e4:	ldp	x19, x20, [sp], #80
 4e8:	ret
 4ec:	ldr	x1, [sp, #56]
 4f0:	mov	x0, x22
 4f4:	mov	w21, w19
 4f8:	bl	428 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 4fc:	ldp	x0, x1, [sp, #56]
 500:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 504:	b	4d8 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x80>

0000000000000508 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>:
 508:	ldr	w4, [x0, #8]
 50c:	mov	x6, x3
 510:	sxtw	x3, w4
 514:	cmp	x3, #0xc7
 518:	b.ls	53c <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_+0x34>  // b.plast
 51c:	str	x30, [sp, #-16]!
 520:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 524:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 528:	add	x2, x2, #0x0
 52c:	add	x0, x0, #0x0
 530:	mov	x4, #0xc8                  	// #200
 534:	mov	w1, #0x9e                  	// #158
 538:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 53c:	mov	w5, #0x18                  	// #24
 540:	ldr	x7, [x0]
 544:	smull	x5, w4, w5
 548:	add	w4, w4, #0x1
 54c:	add	x3, x7, x5
 550:	str	x1, [x7, x5]
 554:	stp	x6, x2, [x3, #8]
 558:	str	w4, [x0, #8]
 55c:	ret

0000000000000560 <_ZN11__sanitizer10FlagParserC1Ev>:
 560:	stp	x19, x30, [sp, #-16]!
 564:	mov	x19, x0
 568:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 56c:	add	x0, x0, #0x0
 570:	mov	x1, #0x12c0                	// #4800
 574:	str	wzr, [x19, #8]
 578:	add	x0, x0, #0xa8
 57c:	stp	xzr, xzr, [x19, #16]
 580:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 584:	str	x0, [x19]
 588:	ldp	x19, x30, [sp], #16
 58c:	ret

sanitizer_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x0
   8:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
   c:	mov	x20, x1
  10:	mov	x1, #0x10                  	// #16
  14:	ldr	x0, [x0]
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x21, x2
  20:	mov	x22, x3
  24:	str	x30, [sp, #32]
  28:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  2c:	mov	x2, x0
  30:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  34:	add	x0, x0, #0x0
  38:	ldr	x30, [sp, #32]
  3c:	stp	x0, x22, [x2]
  40:	mov	x3, x21
  44:	mov	x1, x20
  48:	mov	x0, x19
  4c:	ldp	x21, x22, [sp, #16]
  50:	ldp	x19, x20, [sp], #48
  54:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000058 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>:
  58:	stp	x19, x20, [sp, #-48]!
  5c:	mov	x19, x0
  60:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  64:	mov	x20, x1
  68:	mov	x1, #0x10                  	// #16
  6c:	ldr	x0, [x0]
  70:	stp	x21, x22, [sp, #16]
  74:	mov	x21, x2
  78:	mov	x22, x3
  7c:	str	x30, [sp, #32]
  80:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  84:	mov	x2, x0
  88:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  8c:	add	x0, x0, #0x0
  90:	ldr	x30, [sp, #32]
  94:	stp	x0, x22, [x2]
  98:	mov	x3, x21
  9c:	mov	x1, x20
  a0:	mov	x0, x19
  a4:	ldp	x21, x22, [sp, #16]
  a8:	ldp	x19, x20, [sp], #48
  ac:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000000b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>:
  b0:	stp	x19, x20, [sp, #-48]!
  b4:	mov	x19, x0
  b8:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  bc:	mov	x20, x1
  c0:	mov	x1, #0x10                  	// #16
  c4:	ldr	x0, [x0]
  c8:	stp	x21, x22, [sp, #16]
  cc:	mov	x21, x2
  d0:	mov	x22, x3
  d4:	str	x30, [sp, #32]
  d8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  dc:	mov	x2, x0
  e0:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
  e4:	add	x0, x0, #0x0
  e8:	ldr	x30, [sp, #32]
  ec:	stp	x0, x22, [x2]
  f0:	mov	x3, x21
  f4:	mov	x1, x20
  f8:	mov	x0, x19
  fc:	ldp	x21, x22, [sp, #16]
 100:	ldp	x19, x20, [sp], #48
 104:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>:
 108:	stp	x19, x20, [sp, #-48]!
 10c:	mov	x19, x0
 110:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 114:	mov	x20, x1
 118:	mov	x1, #0x10                  	// #16
 11c:	ldr	x0, [x0]
 120:	stp	x21, x22, [sp, #16]
 124:	mov	x21, x2
 128:	mov	x22, x3
 12c:	str	x30, [sp, #32]
 130:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 134:	mov	x2, x0
 138:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 13c:	add	x0, x0, #0x0
 140:	ldr	x30, [sp, #32]
 144:	stp	x0, x22, [x2]
 148:	mov	x3, x21
 14c:	mov	x1, x20
 150:	mov	x0, x19
 154:	ldp	x21, x22, [sp, #16]
 158:	ldp	x19, x20, [sp], #48
 15c:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>:
 160:	stp	x19, x20, [sp, #-48]!
 164:	mov	x19, x0
 168:	adrp	x0, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 16c:	mov	x20, x1
 170:	mov	x1, #0x10                  	// #16
 174:	ldr	x0, [x0]
 178:	stp	x21, x22, [sp, #16]
 17c:	mov	x21, x2
 180:	mov	x22, x3
 184:	str	x30, [sp, #32]
 188:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 18c:	mov	x2, x0
 190:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 194:	add	x0, x0, #0x0
 198:	ldr	x30, [sp, #32]
 19c:	stp	x0, x22, [x2]
 1a0:	mov	x3, x21
 1a4:	mov	x1, x20
 1a8:	mov	x0, x19
 1ac:	ldp	x21, x22, [sp, #16]
 1b0:	ldp	x19, x20, [sp], #48
 1b4:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000001b8 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>:
 1b8:	mov	w1, #0x1                   	// #1
 1bc:	strb	w1, [x0]
 1c0:	strb	w1, [x0, #60]
 1c4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1c8:	strb	w1, [x0, #68]
 1cc:	mov	x1, #0x100000001           	// #4294967297
 1d0:	stp	x1, xzr, [x0, #72]
 1d4:	mov	x1, #0x100000000           	// #4294967296
 1d8:	add	x2, x2, #0x0
 1dc:	str	x1, [x0, #88]
 1e0:	mov	w1, #0x101                 	// #257
 1e4:	strh	w1, [x0, #96]
 1e8:	mov	x1, #0x10000               	// #65536
 1ec:	str	x1, [x0, #104]
 1f0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 1f4:	add	x1, x1, #0x0
 1f8:	str	x1, [x0, #112]
 1fc:	mov	w1, #0x1388                	// #5000
 200:	str	w1, [x0, #156]
 204:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 208:	add	x1, x1, #0x0
 20c:	str	x1, [x0, #168]
 210:	mov	w1, #0x100                 	// #256
 214:	movk	w1, #0x101, lsl #16
 218:	str	x2, [x0, #24]
 21c:	mov	x2, #0x10000               	// #65536
 220:	str	w1, [x0, #176]
 224:	movk	x2, #0x1, lsl #32
 228:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 22c:	add	x1, x1, #0x0
 230:	str	x2, [x0, #32]
 234:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 238:	add	x2, x2, #0x0
 23c:	str	x1, [x0, #192]
 240:	mov	x1, #0x101010101010101     	// #72340172838076673
 244:	movk	x1, #0x1
 248:	str	x2, [x0, #40]
 24c:	mov	x2, #0x10100000000         	// #1103806595072
 250:	str	x1, [x0, #200]
 254:	movk	x2, #0x1, lsl #48
 258:	mov	x1, #0x101010101010101     	// #72340172838076673
 25c:	movk	x1, #0x1, lsl #48
 260:	str	xzr, [x0, #8]
 264:	strb	wzr, [x0, #16]
 268:	strh	wzr, [x0, #48]
 26c:	stur	x2, [x0, #52]
 270:	mov	w2, #0x1                   	// #1
 274:	str	wzr, [x0, #64]
 278:	strb	wzr, [x0, #98]
 27c:	strh	wzr, [x0, #120]
 280:	strb	wzr, [x0, #122]
 284:	stp	xzr, xzr, [x0, #128]
 288:	str	xzr, [x0, #144]
 28c:	strb	wzr, [x0, #152]
 290:	strh	w2, [x0, #160]
 294:	strh	w2, [x0, #180]
 298:	str	wzr, [x0, #184]
 29c:	str	x1, [x0, #208]
 2a0:	mov	x1, #0x1                   	// #1
 2a4:	movk	x1, #0x100, lsl #32
 2a8:	str	x1, [x0, #216]
 2ac:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 2b0:	add	x1, x1, #0x0
 2b4:	str	x1, [x0, #224]
 2b8:	mov	w1, #0x100                 	// #256
 2bc:	strh	w1, [x0, #232]
 2c0:	strb	wzr, [x0, #234]
 2c4:	ret

00000000000002c8 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>:
 2c8:	mov	x2, #0xf0                  	// #240
 2cc:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

00000000000002d0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>:
 2d0:	stp	x19, x20, [sp, #-80]!
 2d4:	sub	x2, x2, #0x1
 2d8:	mov	x20, x0
 2dc:	mov	x19, x1
 2e0:	stp	x21, x22, [sp, #16]
 2e4:	add	x21, x1, x2
 2e8:	mov	w22, #0xa                   	// #10
 2ec:	str	x30, [sp, #32]
 2f0:	ldrb	w0, [x20]
 2f4:	cmp	x19, x21
 2f8:	cbz	w0, 3b4 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xe4>
 2fc:	b.cs	3b8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xe8>  // b.hs, b.nlast
 300:	cmp	w0, #0x25
 304:	b.eq	314 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x44>  // b.none
 308:	add	x20, x20, #0x1
 30c:	strb	w0, [x19], #1
 310:	b	2f0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x20>
 314:	ldrb	w1, [x20, #1]
 318:	cmp	w1, #0x62
 31c:	b.eq	368 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x98>  // b.none
 320:	cmp	w1, #0x70
 324:	b.ne	308 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x38>  // b.any
 328:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 32c:	add	x1, sp, #0x50
 330:	sdiv	w2, w0, w22
 334:	msub	w0, w2, w22, w0
 338:	add	w0, w0, #0x30
 33c:	strb	w0, [x1, #-1]!
 340:	mov	w0, w2
 344:	cbnz	w2, 330 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x60>
 348:	add	x0, sp, #0x50
 34c:	cmp	x1, x0
 350:	b.cs	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xdc>  // b.hs, b.nlast
 354:	cmp	x19, x21
 358:	b.cs	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xdc>  // b.hs, b.nlast
 35c:	ldrb	w0, [x1], #1
 360:	strb	w0, [x19], #1
 364:	b	348 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x78>
 368:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 36c:	cbnz	x0, 390 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xc0>
 370:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 374:	add	x2, x2, #0x0
 378:	mov	x4, #0x0                   	// #0
 37c:	mov	x3, #0x0                   	// #0
 380:	mov	w1, #0x2e                  	// #46
 384:	adrp	x0, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 388:	add	x0, x0, #0x0
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	ldrb	w1, [x0]
 394:	cbz	w1, 3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xdc>
 398:	cmp	x19, x21
 39c:	b.cs	3ac <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xdc>  // b.hs, b.nlast
 3a0:	add	x0, x0, #0x1
 3a4:	strb	w1, [x19], #1
 3a8:	b	390 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xc0>
 3ac:	add	x20, x20, #0x2
 3b0:	b	2f0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x20>
 3b4:	b.cc	3d0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x100>  // b.lo, b.ul, b.last
 3b8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 3bc:	mov	x4, #0x0                   	// #0
 3c0:	add	x2, x2, #0x0
 3c4:	mov	x3, #0x0                   	// #0
 3c8:	mov	w1, #0x46                  	// #70
 3cc:	b	384 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb4>
 3d0:	strb	wzr, [x19]
 3d4:	ldp	x21, x22, [sp, #16]
 3d8:	ldr	x30, [sp, #32]
 3dc:	ldp	x19, x20, [sp], #80
 3e0:	ret

00000000000003e4 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 3e4:	stp	x19, x20, [sp, #-32]!
 3e8:	mov	x1, #0x18                  	// #24
 3ec:	mov	x19, x0
 3f0:	stp	x21, x30, [sp, #16]
 3f4:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
 3f8:	adrp	x20, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 3fc:	ldr	x21, [x21]
 400:	add	x20, x20, #0x0
 404:	mov	x0, x21
 408:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 40c:	mov	x2, x0
 410:	strb	wzr, [x0, #16]
 414:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 418:	add	x3, x3, #0x0
 41c:	mov	x0, x19
 420:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 424:	stp	x20, x19, [x2]
 428:	add	x1, x1, #0x0
 42c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 430:	mov	x0, x21
 434:	mov	x1, #0x18                  	// #24
 438:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 43c:	mov	x2, x0
 440:	mov	w0, #0x1                   	// #1
 444:	adrp	x3, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 448:	ldp	x21, x30, [sp, #16]
 44c:	stp	x20, x19, [x2]
 450:	add	x3, x3, #0x0
 454:	strb	w0, [x2, #16]
 458:	mov	x0, x19
 45c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 460:	add	x1, x1, #0x0
 464:	ldp	x19, x20, [sp], #32
 468:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

000000000000046c <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
 46c:	stp	x19, x20, [sp, #-32]!
 470:	mov	x3, x1
 474:	mov	x20, x0
 478:	mov	x19, x1
 47c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 480:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 484:	add	x2, x2, #0x0
 488:	add	x1, x1, #0x0
 48c:	str	x30, [sp, #16]
 490:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 494:	add	x3, x19, #0x8
 498:	mov	x0, x20
 49c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4a0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4a4:	add	x2, x2, #0x0
 4a8:	add	x1, x1, #0x0
 4ac:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 4b0:	add	x3, x19, #0x10
 4b4:	mov	x0, x20
 4b8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4bc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4c0:	add	x2, x2, #0x0
 4c4:	add	x1, x1, #0x0
 4c8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4cc:	add	x3, x19, #0x18
 4d0:	mov	x0, x20
 4d4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4d8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4dc:	add	x2, x2, #0x0
 4e0:	add	x1, x1, #0x0
 4e4:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 4e8:	add	x3, x19, #0x20
 4ec:	mov	x0, x20
 4f0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4f4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 4f8:	add	x2, x2, #0x0
 4fc:	add	x1, x1, #0x0
 500:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 504:	add	x3, x19, #0x21
 508:	mov	x0, x20
 50c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 510:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 514:	add	x2, x2, #0x0
 518:	add	x1, x1, #0x0
 51c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 520:	add	x3, x19, #0x22
 524:	mov	x0, x20
 528:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 52c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 530:	add	x2, x2, #0x0
 534:	add	x1, x1, #0x0
 538:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 53c:	add	x3, x19, #0x23
 540:	mov	x0, x20
 544:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 548:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 54c:	add	x2, x2, #0x0
 550:	add	x1, x1, #0x0
 554:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 558:	add	x3, x19, #0x24
 55c:	mov	x0, x20
 560:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 564:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 568:	add	x2, x2, #0x0
 56c:	add	x1, x1, #0x0
 570:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 574:	add	x3, x19, #0x28
 578:	mov	x0, x20
 57c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 580:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 584:	add	x2, x2, #0x0
 588:	add	x1, x1, #0x0
 58c:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 590:	add	x3, x19, #0x30
 594:	mov	x0, x20
 598:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 59c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5a0:	add	x2, x2, #0x0
 5a4:	add	x1, x1, #0x0
 5a8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5ac:	add	x3, x19, #0x31
 5b0:	mov	x0, x20
 5b4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5b8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5bc:	add	x2, x2, #0x0
 5c0:	add	x1, x1, #0x0
 5c4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5c8:	add	x3, x19, #0x34
 5cc:	mov	x0, x20
 5d0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5d4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5d8:	add	x2, x2, #0x0
 5dc:	add	x1, x1, #0x0
 5e0:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 5e4:	add	x3, x19, #0x38
 5e8:	mov	x0, x20
 5ec:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5f0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 5f4:	add	x2, x2, #0x0
 5f8:	add	x1, x1, #0x0
 5fc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 600:	add	x3, x19, #0x39
 604:	mov	x0, x20
 608:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 60c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 610:	add	x2, x2, #0x0
 614:	add	x1, x1, #0x0
 618:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 61c:	add	x3, x19, #0x3a
 620:	mov	x0, x20
 624:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 628:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 62c:	add	x2, x2, #0x0
 630:	add	x1, x1, #0x0
 634:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 638:	add	x3, x19, #0x3b
 63c:	mov	x0, x20
 640:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 644:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 648:	add	x2, x2, #0x0
 64c:	add	x1, x1, #0x0
 650:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 654:	add	x3, x19, #0x3c
 658:	mov	x0, x20
 65c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 660:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 664:	add	x2, x2, #0x0
 668:	add	x1, x1, #0x0
 66c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 670:	add	x3, x19, #0x40
 674:	mov	x0, x20
 678:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 67c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 680:	add	x2, x2, #0x0
 684:	add	x1, x1, #0x0
 688:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 68c:	add	x3, x19, #0x44
 690:	mov	x0, x20
 694:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 698:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 69c:	add	x2, x2, #0x0
 6a0:	add	x1, x1, #0x0
 6a4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6a8:	add	x3, x19, #0x48
 6ac:	mov	x0, x20
 6b0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6b4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6b8:	add	x2, x2, #0x0
 6bc:	add	x1, x1, #0x0
 6c0:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 6c4:	add	x3, x19, #0x4c
 6c8:	mov	x0, x20
 6cc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6d0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6d4:	add	x2, x2, #0x0
 6d8:	add	x1, x1, #0x0
 6dc:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 6e0:	add	x3, x19, #0x50
 6e4:	mov	x0, x20
 6e8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6ec:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 6f0:	add	x2, x2, #0x0
 6f4:	add	x1, x1, #0x0
 6f8:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 6fc:	add	x3, x19, #0x54
 700:	mov	x0, x20
 704:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 708:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 70c:	add	x2, x2, #0x0
 710:	add	x1, x1, #0x0
 714:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 718:	add	x3, x19, #0x58
 71c:	mov	x0, x20
 720:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 724:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 728:	add	x2, x2, #0x0
 72c:	add	x1, x1, #0x0
 730:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 734:	add	x3, x19, #0x5c
 738:	mov	x0, x20
 73c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 740:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 744:	add	x2, x2, #0x0
 748:	add	x1, x1, #0x0
 74c:	bl	108 <_ZN11__sanitizerL12RegisterFlagINS_16HandleSignalModeEEEvPNS_10FlagParserEPKcS5_PT_>
 750:	add	x3, x19, #0x60
 754:	mov	x0, x20
 758:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 75c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 760:	add	x2, x2, #0x0
 764:	add	x1, x1, #0x0
 768:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 76c:	add	x3, x19, #0x61
 770:	mov	x0, x20
 774:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 778:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 77c:	add	x2, x2, #0x0
 780:	add	x1, x1, #0x0
 784:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 788:	add	x3, x19, #0x62
 78c:	mov	x0, x20
 790:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 794:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 798:	add	x2, x2, #0x0
 79c:	add	x1, x1, #0x0
 7a0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7a4:	add	x3, x19, #0x68
 7a8:	mov	x0, x20
 7ac:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7b0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7b4:	add	x2, x2, #0x0
 7b8:	add	x1, x1, #0x0
 7bc:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 7c0:	add	x3, x19, #0x70
 7c4:	mov	x0, x20
 7c8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7cc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7d0:	add	x2, x2, #0x0
 7d4:	add	x1, x1, #0x0
 7d8:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 7dc:	add	x3, x19, #0x78
 7e0:	mov	x0, x20
 7e4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7e8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7ec:	add	x2, x2, #0x0
 7f0:	add	x1, x1, #0x0
 7f4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 7f8:	add	x3, x19, #0x79
 7fc:	mov	x0, x20
 800:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 804:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 808:	add	x2, x2, #0x0
 80c:	add	x1, x1, #0x0
 810:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 814:	add	x3, x19, #0x7a
 818:	mov	x0, x20
 81c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 820:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 824:	add	x2, x2, #0x0
 828:	add	x1, x1, #0x0
 82c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 830:	add	x3, x19, #0x80
 834:	mov	x0, x20
 838:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 83c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 840:	add	x2, x2, #0x0
 844:	add	x1, x1, #0x0
 848:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 84c:	add	x3, x19, #0x88
 850:	mov	x0, x20
 854:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 858:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 85c:	add	x2, x2, #0x0
 860:	add	x1, x1, #0x0
 864:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 868:	add	x3, x19, #0x90
 86c:	mov	x0, x20
 870:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 874:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 878:	add	x2, x2, #0x0
 87c:	add	x1, x1, #0x0
 880:	bl	160 <_ZN11__sanitizerL12RegisterFlagImEEvPNS_10FlagParserEPKcS4_PT_>
 884:	add	x3, x19, #0x98
 888:	mov	x0, x20
 88c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 890:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 894:	add	x2, x2, #0x0
 898:	add	x1, x1, #0x0
 89c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8a0:	add	x3, x19, #0x9c
 8a4:	mov	x0, x20
 8a8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8ac:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8b0:	add	x2, x2, #0x0
 8b4:	add	x1, x1, #0x0
 8b8:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 8bc:	add	x3, x19, #0xa0
 8c0:	mov	x0, x20
 8c4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8c8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8cc:	add	x2, x2, #0x0
 8d0:	add	x1, x1, #0x0
 8d4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8d8:	add	x3, x19, #0xa1
 8dc:	mov	x0, x20
 8e0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8e4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8e8:	add	x2, x2, #0x0
 8ec:	add	x1, x1, #0x0
 8f0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 8f4:	add	x3, x19, #0xa8
 8f8:	mov	x0, x20
 8fc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 900:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 904:	add	x2, x2, #0x0
 908:	add	x1, x1, #0x0
 90c:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 910:	add	x3, x19, #0xb0
 914:	mov	x0, x20
 918:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 91c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 920:	add	x2, x2, #0x0
 924:	add	x1, x1, #0x0
 928:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 92c:	add	x3, x19, #0xb1
 930:	mov	x0, x20
 934:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 938:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 93c:	add	x2, x2, #0x0
 940:	add	x1, x1, #0x0
 944:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 948:	add	x3, x19, #0xb2
 94c:	mov	x0, x20
 950:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 954:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 958:	add	x2, x2, #0x0
 95c:	add	x1, x1, #0x0
 960:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 964:	add	x3, x19, #0xb3
 968:	mov	x0, x20
 96c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 970:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 974:	add	x2, x2, #0x0
 978:	add	x1, x1, #0x0
 97c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 980:	add	x3, x19, #0xb4
 984:	mov	x0, x20
 988:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 98c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 990:	add	x2, x2, #0x0
 994:	add	x1, x1, #0x0
 998:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 99c:	add	x3, x19, #0xb5
 9a0:	mov	x0, x20
 9a4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9a8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9ac:	add	x2, x2, #0x0
 9b0:	add	x1, x1, #0x0
 9b4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9b8:	add	x3, x19, #0xb8
 9bc:	mov	x0, x20
 9c0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9c4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9c8:	add	x2, x2, #0x0
 9cc:	add	x1, x1, #0x0
 9d0:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 9d4:	add	x3, x19, #0xc0
 9d8:	mov	x0, x20
 9dc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9e0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9e4:	add	x2, x2, #0x0
 9e8:	add	x1, x1, #0x0
 9ec:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 9f0:	add	x3, x19, #0xc8
 9f4:	mov	x0, x20
 9f8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 9fc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a00:	add	x2, x2, #0x0
 a04:	add	x1, x1, #0x0
 a08:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a0c:	add	x3, x19, #0xc9
 a10:	mov	x0, x20
 a14:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a18:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a1c:	add	x2, x2, #0x0
 a20:	add	x1, x1, #0x0
 a24:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a28:	add	x3, x19, #0xca
 a2c:	mov	x0, x20
 a30:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a34:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a38:	add	x2, x2, #0x0
 a3c:	add	x1, x1, #0x0
 a40:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a44:	add	x3, x19, #0xcb
 a48:	mov	x0, x20
 a4c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a50:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a54:	add	x2, x2, #0x0
 a58:	add	x1, x1, #0x0
 a5c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a60:	add	x3, x19, #0xcc
 a64:	mov	x0, x20
 a68:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a6c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a70:	add	x2, x2, #0x0
 a74:	add	x1, x1, #0x0
 a78:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a7c:	add	x3, x19, #0xcd
 a80:	mov	x0, x20
 a84:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a88:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a8c:	add	x2, x2, #0x0
 a90:	add	x1, x1, #0x0
 a94:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 a98:	add	x3, x19, #0xce
 a9c:	mov	x0, x20
 aa0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aa4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aa8:	add	x2, x2, #0x0
 aac:	add	x1, x1, #0x0
 ab0:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ab4:	add	x3, x19, #0xcf
 ab8:	mov	x0, x20
 abc:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ac0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ac4:	add	x2, x2, #0x0
 ac8:	add	x1, x1, #0x0
 acc:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ad0:	add	x3, x19, #0xd0
 ad4:	mov	x0, x20
 ad8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 adc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ae0:	add	x2, x2, #0x0
 ae4:	add	x1, x1, #0x0
 ae8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 aec:	add	x3, x19, #0xd1
 af0:	mov	x0, x20
 af4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 af8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 afc:	add	x2, x2, #0x0
 b00:	add	x1, x1, #0x0
 b04:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b08:	add	x3, x19, #0xd2
 b0c:	mov	x0, x20
 b10:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b14:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b18:	add	x2, x2, #0x0
 b1c:	add	x1, x1, #0x0
 b20:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b24:	add	x3, x19, #0xd3
 b28:	mov	x0, x20
 b2c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b30:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b34:	add	x2, x2, #0x0
 b38:	add	x1, x1, #0x0
 b3c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b40:	add	x3, x19, #0xd4
 b44:	mov	x0, x20
 b48:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b4c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b50:	add	x2, x2, #0x0
 b54:	add	x1, x1, #0x0
 b58:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b5c:	add	x3, x19, #0xd5
 b60:	mov	x0, x20
 b64:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b68:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b6c:	add	x2, x2, #0x0
 b70:	add	x1, x1, #0x0
 b74:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b78:	add	x3, x19, #0xd6
 b7c:	mov	x0, x20
 b80:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b84:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b88:	add	x2, x2, #0x0
 b8c:	add	x1, x1, #0x0
 b90:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 b94:	add	x3, x19, #0xd7
 b98:	mov	x0, x20
 b9c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ba0:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ba4:	add	x2, x2, #0x0
 ba8:	add	x1, x1, #0x0
 bac:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bb0:	add	x3, x19, #0xd8
 bb4:	mov	x0, x20
 bb8:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bbc:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bc0:	add	x2, x2, #0x0
 bc4:	add	x1, x1, #0x0
 bc8:	bl	b0 <_ZN11__sanitizerL12RegisterFlagIiEEvPNS_10FlagParserEPKcS4_PT_>
 bcc:	add	x3, x19, #0xdc
 bd0:	mov	x0, x20
 bd4:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bd8:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bdc:	add	x2, x2, #0x0
 be0:	add	x1, x1, #0x0
 be4:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 be8:	add	x3, x19, #0xdd
 bec:	mov	x0, x20
 bf0:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bf4:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 bf8:	add	x2, x2, #0x0
 bfc:	add	x1, x1, #0x0
 c00:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c04:	add	x3, x19, #0xde
 c08:	mov	x0, x20
 c0c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c10:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c14:	add	x2, x2, #0x0
 c18:	add	x1, x1, #0x0
 c1c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c20:	add	x3, x19, #0xdf
 c24:	mov	x0, x20
 c28:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c2c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c30:	add	x2, x2, #0x0
 c34:	add	x1, x1, #0x0
 c38:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c3c:	add	x3, x19, #0xe0
 c40:	mov	x0, x20
 c44:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c48:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c4c:	add	x2, x2, #0x0
 c50:	add	x1, x1, #0x0
 c54:	bl	58 <_ZN11__sanitizerL12RegisterFlagIPKcEEvPNS_10FlagParserES2_S2_PT_>
 c58:	add	x3, x19, #0xe8
 c5c:	mov	x0, x20
 c60:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c64:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c68:	add	x2, x2, #0x0
 c6c:	add	x1, x1, #0x0
 c70:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c74:	add	x3, x19, #0xe9
 c78:	mov	x0, x20
 c7c:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c80:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c84:	add	x2, x2, #0x0
 c88:	add	x1, x1, #0x0
 c8c:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c90:	add	x3, x19, #0xea
 c94:	mov	x0, x20
 c98:	adrp	x2, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 c9c:	adrp	x1, 0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 ca0:	add	x2, x2, #0x0
 ca4:	add	x1, x1, #0x0
 ca8:	bl	0 <_ZN11__sanitizerL12RegisterFlagIbEEvPNS_10FlagParserEPKcS4_PT_>
 cac:	mov	x1, x19
 cb0:	mov	x0, x20
 cb4:	ldr	x30, [sp, #16]
 cb8:	ldp	x19, x20, [sp], #32
 cbc:	b	3e4 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>

0000000000000cc0 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>:
 cc0:	ldrb	w1, [x0, #161]
 cc4:	ldrb	w2, [x0, #223]
 cc8:	orr	w1, w1, w2
 ccc:	strb	w1, [x0, #161]
 cd0:	ldr	w1, [x0, #52]
 cd4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 cd8:	ldr	x0, [x0]
 cdc:	str	w1, [x0]
 ce0:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	ldr	x0, [x0, #8]
   4:	str	x1, [x0]
   8:	mov	w0, #0x1                   	// #1
   c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerImE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	add	x1, sp, #0x28
  14:	mov	w2, #0xa                   	// #10
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	x0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbz	w0, 4c <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc+0x4c>
  3c:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>
  40:	mov	x1, x19
  44:	add	x0, x0, #0x0
  48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  4c:	mov	w0, w20
  50:	ldr	x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #48
  58:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	add	x1, sp, #0x28
  14:	mov	w2, #0xa                   	// #10
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x1, [x20, #8]
  24:	str	w0, [x1]
  28:	ldr	x0, [sp, #40]
  2c:	ldrb	w0, [x0]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  40:	mov	x1, x19
  44:	add	x0, x0, #0x0
  48:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  4c:	mov	w0, w20
  50:	ldr	x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #48
  58:	ret

Disassembly of section .text._ZN11__sanitizer9ParseBoolEPKcPb:

0000000000000000 <_ZN11__sanitizer9ParseBoolEPKcPb>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	mov	x19, x0
   c:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  10:	add	x1, x1, #0x0
  14:	str	x30, [sp, #16]
  18:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  1c:	cbnz	w0, 34 <_ZN11__sanitizer9ParseBoolEPKcPb+0x34>
  20:	strb	wzr, [x20]
  24:	mov	w0, #0x1                   	// #1
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ret
  34:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  38:	mov	x0, x19
  3c:	add	x1, x1, #0x0
  40:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  44:	cbz	w0, 20 <_ZN11__sanitizer9ParseBoolEPKcPb+0x20>
  48:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  4c:	mov	x0, x19
  50:	add	x1, x1, #0x0
  54:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  58:	cbz	w0, 20 <_ZN11__sanitizer9ParseBoolEPKcPb+0x20>
  5c:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  60:	mov	x0, x19
  64:	add	x1, x1, #0x0
  68:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  6c:	cbnz	w0, 7c <_ZN11__sanitizer9ParseBoolEPKcPb+0x7c>
  70:	mov	w0, #0x1                   	// #1
  74:	strb	w0, [x20]
  78:	b	24 <_ZN11__sanitizer9ParseBoolEPKcPb+0x24>
  7c:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  80:	mov	x0, x19
  84:	add	x1, x1, #0x0
  88:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  8c:	cbz	w0, 70 <_ZN11__sanitizer9ParseBoolEPKcPb+0x70>
  90:	adrp	x1, 0 <_ZN11__sanitizer9ParseBoolEPKcPb>
  94:	mov	x0, x19
  98:	add	x1, x1, #0x0
  9c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a0:	cbz	w0, 70 <_ZN11__sanitizer9ParseBoolEPKcPb+0x70>
  a4:	mov	w0, #0x0                   	// #0
  a8:	b	28 <_ZN11__sanitizer9ParseBoolEPKcPb+0x28>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x1
   8:	add	x1, sp, #0x2f
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x21, x0
  14:	mov	x0, x19
  18:	bl	0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  1c:	ands	w20, w0, #0xff
  20:	b.eq	40 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x40>  // b.none
  24:	ldr	x0, [x21, #8]
  28:	ldrb	w1, [sp, #47]
  2c:	str	w1, [x0]
  30:	mov	w0, w20
  34:	ldp	x21, x30, [sp, #16]
  38:	ldp	x19, x20, [sp], #48
  3c:	ret
  40:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  44:	mov	x0, x19
  48:	add	x1, x1, #0x0
  4c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  50:	cbnz	w0, 68 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x68>
  54:	ldr	x0, [x21, #8]
  58:	mov	w1, #0x2                   	// #2
  5c:	mov	w20, #0x1                   	// #1
  60:	str	w1, [x0]
  64:	b	30 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x30>
  68:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  6c:	mov	x0, x19
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  78:	cbz	w0, 54 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x54>
  7c:	mov	x1, x19
  80:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  84:	add	x0, x0, #0x0
  88:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  8c:	b	30 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x30>

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	ldr	x1, [x0, #8]
   c:	mov	x0, x20
  10:	str	x30, [sp, #16]
  14:	bl	0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  18:	mov	w19, w0
  1c:	tst	w0, #0xff
  20:	b.ne	34 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x34>  // b.any
  24:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  28:	mov	x1, x20
  2c:	add	x0, x0, #0x0
  30:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  34:	mov	w0, w19
  38:	ldr	x30, [sp, #16]
  3c:	ldp	x19, x20, [sp], #32
  40:	ret

Disassembly of section .text._ZN11__sanitizer18FlagHandlerInclude5ParseEPKc:

0000000000000000 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	mov	x19, x0
   c:	mov	w1, #0x25                  	// #37
  10:	mov	x0, x20
  14:	stp	x21, x30, [sp, #16]
  18:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
  1c:	cbnz	x0, 38 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc+0x38>
  20:	ldrb	w2, [x19, #16]
  24:	mov	x1, x20
  28:	ldr	x0, [x19, #8]
  2c:	ldp	x21, x30, [sp, #16]
  30:	ldp	x19, x20, [sp], #32
  34:	b	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  38:	mov	w2, #0x0                   	// #0
  3c:	adrp	x1, 0 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>
  40:	mov	x0, #0x1000                	// #4096
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  4c:	mov	x21, x0
  50:	mov	x1, x0
  54:	mov	x2, #0x1000                	// #4096
  58:	mov	x0, x20
  5c:	bl	2d0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>
  60:	ldrb	w2, [x19, #16]
  64:	mov	x1, x21
  68:	ldr	x0, [x19, #8]
  6c:	bl	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  70:	mov	w19, w0
  74:	mov	x1, #0x1000                	// #4096
  78:	mov	x0, x21
  7c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  80:	mov	w0, w19
  84:	ldp	x21, x30, [sp, #16]
  88:	ldp	x19, x20, [sp], #32
  8c:	ret

sanitizer_libc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer15internal_memchrEPKvim>:
   0:	add	x2, x0, x2
   4:	cmp	x0, x2
   8:	b.eq	20 <_ZN11__sanitizer15internal_memchrEPKvim+0x20>  // b.none
   c:	ldrb	w3, [x0]
  10:	cmp	w3, w1
  14:	b.eq	24 <_ZN11__sanitizer15internal_memchrEPKvim+0x24>  // b.none
  18:	add	x0, x0, #0x1
  1c:	b	4 <_ZN11__sanitizer15internal_memchrEPKvim+0x4>
  20:	mov	x0, #0x0                   	// #0
  24:	ret

0000000000000028 <_ZN11__sanitizer16internal_memrchrEPKvim>:
  28:	mov	x3, x0
  2c:	add	x2, x0, x2
  30:	mov	x0, #0x0                   	// #0
  34:	cmp	x3, x2
  38:	b.eq	50 <_ZN11__sanitizer16internal_memrchrEPKvim+0x28>  // b.none
  3c:	ldrb	w4, [x3]
  40:	cmp	w4, w1
  44:	csel	x0, x0, x3, ne  // ne = any
  48:	add	x3, x3, #0x1
  4c:	b	34 <_ZN11__sanitizer16internal_memrchrEPKvim+0xc>
  50:	ret

0000000000000054 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>:
  54:	mov	x3, #0x0                   	// #0
  58:	cmp	x3, x2
  5c:	b.eq	84 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x30>  // b.none
  60:	ldrb	w5, [x0, x3]
  64:	ldrb	w4, [x1, x3]
  68:	cmp	w5, w4
  6c:	b.eq	7c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x28>  // b.none
  70:	mov	w0, #0x1                   	// #1
  74:	cneg	w0, w0, cc  // cc = lo, ul, last
  78:	ret
  7c:	add	x3, x3, #0x1
  80:	b	58 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x4>
  84:	mov	w0, #0x0                   	// #0
  88:	b	78 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x24>

000000000000008c <_ZN11__sanitizer15internal_memcpyEPvPKvm>:
  8c:	mov	x3, #0x0                   	// #0
  90:	cmp	x3, x2
  94:	b.eq	a8 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x1c>  // b.none
  98:	ldrb	w4, [x1, x3]
  9c:	strb	w4, [x0, x3]
  a0:	add	x3, x3, #0x1
  a4:	b	90 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x4>
  a8:	ret

00000000000000ac <_ZN11__sanitizer16internal_memmoveEPvPKvm>:
  ac:	cmp	x0, x1
  b0:	b.cs	d0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x24>  // b.hs, b.nlast
  b4:	mov	x3, #0x0                   	// #0
  b8:	cmp	x3, x2
  bc:	b.ge	f4 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x48>  // b.tcont
  c0:	ldrb	w4, [x1, x3]
  c4:	strb	w4, [x0, x3]
  c8:	add	x3, x3, #0x1
  cc:	b	b8 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0xc>
  d0:	cmp	x2, #0x0
  d4:	ccmp	x0, x1, #0x0, gt
  d8:	b.ls	f4 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x48>  // b.plast
  dc:	sub	x2, x2, #0x1
  e0:	ldrb	w3, [x1, x2]
  e4:	strb	w3, [x0, x2]
  e8:	sub	x2, x2, #0x1
  ec:	cmn	x2, #0x1
  f0:	b.ne	e0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x34>  // b.any
  f4:	ret

00000000000000f8 <_ZN11__sanitizer15internal_memsetEPvim>:
  f8:	orr	x3, x0, x2
  fc:	tst	x3, #0xf
 100:	b.eq	120 <_ZN11__sanitizer15internal_memsetEPvim+0x28>  // b.none
 104:	add	x2, x0, x2
 108:	mov	x3, x0
 10c:	and	w1, w1, #0xff
 110:	cmp	x2, x3
 114:	b.eq	154 <_ZN11__sanitizer15internal_memsetEPvim+0x5c>  // b.none
 118:	strb	w1, [x3], #1
 11c:	b	110 <_ZN11__sanitizer15internal_memsetEPvim+0x18>
 120:	sxtw	x3, w1
 124:	sbfiz	x1, x1, #8, #32
 128:	orr	x1, x3, x1
 12c:	and	x2, x2, #0xfffffffffffffff8
 130:	add	x2, x0, x2
 134:	mov	x3, x0
 138:	orr	x1, x1, x1, lsl #16
 13c:	orr	x1, x1, x1, lsl #32
 140:	cmp	x2, x3
 144:	b.ls	154 <_ZN11__sanitizer15internal_memsetEPvim+0x5c>  // b.plast
 148:	str	x1, [x3, #8]
 14c:	str	x1, [x3], #16
 150:	b	140 <_ZN11__sanitizer15internal_memsetEPvim+0x48>
 154:	ret

0000000000000158 <_ZN11__sanitizer15internal_strcmpEPKcS1_>:
 158:	mov	x2, #0x0                   	// #0
 15c:	ldrb	w3, [x0, x2]
 160:	ldrb	w4, [x1, x2]
 164:	cmp	w3, w4
 168:	b.eq	178 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x20>  // b.none
 16c:	mov	w0, #0x1                   	// #1
 170:	cneg	w0, w0, cc  // cc = lo, ul, last
 174:	ret
 178:	add	x2, x2, #0x1
 17c:	cbnz	w3, 15c <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x4>
 180:	mov	w0, #0x0                   	// #0
 184:	b	174 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x1c>

0000000000000188 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>:
 188:	mov	x3, #0x0                   	// #0
 18c:	cmp	x3, x2
 190:	b.eq	1bc <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x34>  // b.none
 194:	ldrb	w4, [x0, x3]
 198:	ldrb	w5, [x1, x3]
 19c:	cmp	w4, w5
 1a0:	b.eq	1b0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x28>  // b.none
 1a4:	mov	w0, #0x1                   	// #1
 1a8:	cneg	w0, w0, cc  // cc = lo, ul, last
 1ac:	ret
 1b0:	cbz	w4, 1bc <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x34>
 1b4:	add	x3, x3, #0x1
 1b8:	b	18c <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x4>
 1bc:	mov	w0, #0x0                   	// #0
 1c0:	b	1ac <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x24>

00000000000001c4 <_ZN11__sanitizer15internal_strchrEPKci>:
 1c4:	and	w1, w1, #0xff
 1c8:	ldrb	w2, [x0]
 1cc:	cmp	w2, w1
 1d0:	b.eq	1e4 <_ZN11__sanitizer15internal_strchrEPKci+0x20>  // b.none
 1d4:	cbz	w2, 1e0 <_ZN11__sanitizer15internal_strchrEPKci+0x1c>
 1d8:	add	x0, x0, #0x1
 1dc:	b	1c8 <_ZN11__sanitizer15internal_strchrEPKci+0x4>
 1e0:	mov	x0, #0x0                   	// #0
 1e4:	ret

00000000000001e8 <_ZN11__sanitizer16internal_strcspnEPKcS1_>:
 1e8:	mov	x3, #0x0                   	// #0
 1ec:	mov	x5, x1
 1f0:	mov	x4, x0
 1f4:	ldrb	w1, [x0, x3]
 1f8:	cbnz	w1, 228 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x40>
 1fc:	mov	x0, x3
 200:	ret
 204:	add	x3, x3, #0x1
 208:	ldrb	w1, [x4, x3]
 20c:	cbz	w1, 21c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x34>
 210:	mov	x0, x5
 214:	bl	1c4 <_ZN11__sanitizer15internal_strchrEPKci>
 218:	cbz	x0, 204 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x1c>
 21c:	mov	x0, x3
 220:	ldr	x30, [sp], #16
 224:	ret
 228:	str	x30, [sp, #-16]!
 22c:	b	210 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x28>

0000000000000230 <_ZN11__sanitizer16internal_strrchrEPKci>:
 230:	mov	x2, x0
 234:	mov	x0, #0x0                   	// #0
 238:	ldrb	w3, [x2]
 23c:	cbz	w3, 250 <_ZN11__sanitizer16internal_strrchrEPKci+0x20>
 240:	cmp	w3, w1
 244:	csel	x0, x0, x2, ne  // ne = any
 248:	add	x2, x2, #0x1
 24c:	b	238 <_ZN11__sanitizer16internal_strrchrEPKci+0x8>
 250:	ret

0000000000000254 <_ZN11__sanitizer15internal_strlenEPKc>:
 254:	mov	x1, x0
 258:	mov	x0, #0x0                   	// #0
 25c:	ldrb	w2, [x1, x0]
 260:	cbz	w2, 26c <_ZN11__sanitizer15internal_strlenEPKc+0x18>
 264:	add	x0, x0, #0x1
 268:	b	25c <_ZN11__sanitizer15internal_strlenEPKc+0x8>
 26c:	ret

0000000000000270 <_ZN11__sanitizer15internal_strdupEPKc>:
 270:	stp	x19, x20, [sp, #-32]!
 274:	mov	x20, x0
 278:	str	x30, [sp, #16]
 27c:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 280:	mov	x2, #0x0                   	// #0
 284:	mov	x19, x0
 288:	mov	x1, #0x0                   	// #0
 28c:	add	x0, x0, #0x1
 290:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 294:	mov	x5, x0
 298:	mov	x2, x19
 29c:	mov	x1, x20
 2a0:	bl	8c <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2a4:	strb	wzr, [x5, x19]
 2a8:	mov	x0, x5
 2ac:	ldr	x30, [sp, #16]
 2b0:	ldp	x19, x20, [sp], #32
 2b4:	ret

00000000000002b8 <_ZN11__sanitizer18internal_strchrnulEPKci>:
 2b8:	mov	x3, x0
 2bc:	str	x30, [sp, #-16]!
 2c0:	bl	1c4 <_ZN11__sanitizer15internal_strchrEPKci>
 2c4:	cbnz	x0, 2d4 <_ZN11__sanitizer18internal_strchrnulEPKci+0x1c>
 2c8:	mov	x0, x3
 2cc:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 2d0:	add	x0, x3, x0
 2d4:	ldr	x30, [sp], #16
 2d8:	ret

00000000000002dc <_ZN11__sanitizer16internal_strncatEPcPKcm>:
 2dc:	mov	x4, x0
 2e0:	mov	x5, x1
 2e4:	mov	x6, x2
 2e8:	str	x30, [sp, #-16]!
 2ec:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 2f0:	add	x3, x4, x0
 2f4:	mov	x0, #0x0                   	// #0
 2f8:	cmp	x0, x6
 2fc:	b.eq	314 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x38>  // b.none
 300:	ldrb	w1, [x5, x0]
 304:	cbz	w1, 314 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x38>
 308:	add	x0, x0, #0x1
 30c:	strb	w1, [x3], #1
 310:	b	2f8 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x1c>
 314:	strb	wzr, [x3]
 318:	mov	x0, x4
 31c:	ldr	x30, [sp], #16
 320:	ret

0000000000000324 <_ZN11__sanitizer16internal_strlcpyEPcPKcm>:
 324:	mov	x7, x0
 328:	mov	x5, x2
 32c:	mov	x4, x1
 330:	str	x30, [sp, #-16]!
 334:	mov	x0, x1
 338:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 33c:	mov	x6, x0
 340:	cmp	x0, x5
 344:	b.cs	364 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x40>  // b.hs, b.nlast
 348:	add	x2, x0, #0x1
 34c:	mov	x1, x4
 350:	mov	x0, x7
 354:	bl	ac <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 358:	mov	x0, x6
 35c:	ldr	x30, [sp], #16
 360:	ret
 364:	cbz	x5, 358 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x34>
 368:	sub	x5, x5, #0x1
 36c:	mov	x1, x4
 370:	mov	x2, x5
 374:	mov	x0, x7
 378:	bl	ac <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 37c:	strb	wzr, [x7, x5]
 380:	b	358 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x34>

0000000000000384 <_ZN11__sanitizer16internal_strncpyEPcPKcm>:
 384:	mov	x4, x0
 388:	mov	x3, #0x0                   	// #0
 38c:	str	x30, [sp, #-16]!
 390:	add	x0, x4, x3
 394:	cmp	x3, x2
 398:	b.eq	3b0 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x2c>  // b.none
 39c:	ldrb	w5, [x1, x3]
 3a0:	cbz	w5, 3b0 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x2c>
 3a4:	strb	w5, [x4, x3]
 3a8:	add	x3, x3, #0x1
 3ac:	b	390 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0xc>
 3b0:	sub	x2, x2, x3
 3b4:	mov	w1, #0x0                   	// #0
 3b8:	bl	f8 <_ZN11__sanitizer15internal_memsetEPvim>
 3bc:	mov	x0, x4
 3c0:	ldr	x30, [sp], #16
 3c4:	ret

00000000000003c8 <_ZN11__sanitizer16internal_strnlenEPKcm>:
 3c8:	mov	x2, x0
 3cc:	mov	x0, #0x0                   	// #0
 3d0:	cmp	x0, x1
 3d4:	b.eq	3e8 <_ZN11__sanitizer16internal_strnlenEPKcm+0x20>  // b.none
 3d8:	ldrb	w3, [x2, x0]
 3dc:	cbz	w3, 3e8 <_ZN11__sanitizer16internal_strnlenEPKcm+0x20>
 3e0:	add	x0, x0, #0x1
 3e4:	b	3d0 <_ZN11__sanitizer16internal_strnlenEPKcm+0x8>
 3e8:	ret

00000000000003ec <_ZN11__sanitizer16internal_strlcatEPcPKcm>:
 3ec:	mov	x5, x0
 3f0:	mov	x6, x2
 3f4:	mov	x4, x1
 3f8:	str	x30, [sp, #-16]!
 3fc:	mov	x0, x1
 400:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 404:	mov	x7, x0
 408:	mov	x1, x6
 40c:	mov	x0, x5
 410:	bl	3c8 <_ZN11__sanitizer16internal_strnlenEPKcm>
 414:	add	x8, x7, x0
 418:	cmp	x6, x0
 41c:	b.eq	43c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x50>  // b.none
 420:	sub	x2, x6, x0
 424:	add	x0, x5, x0
 428:	cmp	x2, x7
 42c:	b.ls	448 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x5c>  // b.plast
 430:	add	x2, x7, #0x1
 434:	mov	x1, x4
 438:	bl	ac <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 43c:	mov	x0, x8
 440:	ldr	x30, [sp], #16
 444:	ret
 448:	sub	x2, x2, #0x1
 44c:	mov	x1, x4
 450:	bl	ac <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 454:	add	x5, x5, x6
 458:	sturb	wzr, [x5, #-1]
 45c:	b	43c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x50>

0000000000000460 <_ZN11__sanitizer15internal_strstrEPKcS1_>:
 460:	mov	x9, x1
 464:	mov	x10, x0
 468:	str	x30, [sp, #-16]!
 46c:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 470:	mov	x6, x0
 474:	mov	x0, x9
 478:	bl	254 <_ZN11__sanitizer15internal_strlenEPKc>
 47c:	cmp	x6, x0
 480:	b.cc	4b0 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x50>  // b.lo, b.ul, b.last
 484:	mov	x2, x0
 488:	sub	x6, x6, x0
 48c:	mov	x8, #0x0                   	// #0
 490:	add	x7, x10, x8
 494:	mov	x1, x9
 498:	mov	x0, x7
 49c:	bl	54 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
 4a0:	cbz	w0, 4b4 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x54>
 4a4:	add	x8, x8, #0x1
 4a8:	cmp	x6, x8
 4ac:	b.cs	490 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x30>  // b.hs, b.nlast
 4b0:	mov	x7, #0x0                   	// #0
 4b4:	mov	x0, x7
 4b8:	ldr	x30, [sp], #16
 4bc:	ret

00000000000004c0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>:
 4c0:	cmp	w2, #0xa
 4c4:	b.eq	4f0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x30>  // b.none
 4c8:	str	x30, [sp, #-16]!
 4cc:	sxtw	x3, w2
 4d0:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 4d4:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 4d8:	add	x0, x0, #0x0
 4dc:	add	x2, x2, #0x0
 4e0:	mov	x4, #0xa                   	// #10
 4e4:	mov	w1, #0xe5                  	// #229
 4e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4ec:	add	x0, x0, #0x1
 4f0:	ldrb	w2, [x0]
 4f4:	cmp	w2, #0x20
 4f8:	b.eq	4ec <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x2c>  // b.none
 4fc:	sub	w3, w2, #0x9
 500:	and	w3, w3, #0xff
 504:	cmp	w3, #0x4
 508:	b.ls	4ec <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x2c>  // b.plast
 50c:	cmp	w2, #0x2b
 510:	b.ne	520 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x60>  // b.any
 514:	add	x4, x0, #0x1
 518:	mov	w6, #0x1                   	// #1
 51c:	b	530 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x70>
 520:	cmp	w2, #0x2d
 524:	b.ne	584 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xc4>  // b.any
 528:	add	x4, x0, #0x1
 52c:	mov	w6, #0xffffffff            	// #-1
 530:	mov	x8, #0x9999999999999999    	// #-7378697629483820647
 534:	mov	w5, #0x0                   	// #0
 538:	mov	x2, #0x0                   	// #0
 53c:	movk	x8, #0x1999, lsl #48
 540:	mov	x7, #0xffffffffffffffff    	// #-1
 544:	mov	x9, #0xa                   	// #10
 548:	ldrb	w3, [x4]
 54c:	sub	w3, w3, #0x30
 550:	cmp	w3, #0x9
 554:	b.hi	58c <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xcc>  // b.pmore
 558:	mul	x5, x2, x9
 55c:	cmp	x2, x8
 560:	sxtw	x2, w3
 564:	add	x4, x4, #0x1
 568:	csel	x5, x5, x7, ls  // ls = plast
 56c:	mvn	x3, x2
 570:	cmp	x3, x5
 574:	add	x2, x2, x5
 578:	csel	x2, x2, x7, cs  // cs = hs, nlast
 57c:	mov	w5, #0x1                   	// #1
 580:	b	548 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x88>
 584:	mov	x4, x0
 588:	b	518 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x58>
 58c:	cbz	x1, 59c <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xdc>
 590:	cmp	w5, #0x0
 594:	csel	x4, x4, x0, ne  // ne = any
 598:	str	x4, [x1]
 59c:	cmp	w6, #0x1
 5a0:	b.ne	5b4 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xf4>  // b.any
 5a4:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
 5a8:	cmp	x2, x0
 5ac:	csel	x0, x2, x0, ls  // ls = plast
 5b0:	ret
 5b4:	cmp	x2, #0x0
 5b8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
 5bc:	csneg	x0, x0, x2, lt  // lt = tstop
 5c0:	ret

00000000000005c4 <_ZN11__sanitizer14internal_atollEPKc>:
 5c4:	mov	w2, #0xa                   	// #10
 5c8:	mov	x1, #0x0                   	// #0
 5cc:	b	4c0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>

00000000000005d0 <_ZN11__sanitizer11mem_is_zeroEPKcm>:
 5d0:	mov	x4, #0x10000000000         	// #1099511627776
 5d4:	mov	x3, x1
 5d8:	cmp	x1, x4
 5dc:	b.ls	5fc <_ZN11__sanitizer11mem_is_zeroEPKcm+0x2c>  // b.plast
 5e0:	str	x30, [sp, #-16]!
 5e4:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 5e8:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
 5ec:	add	x2, x2, #0x0
 5f0:	add	x0, x0, #0x0
 5f4:	mov	w1, #0x104                 	// #260
 5f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5fc:	add	x3, x0, x1
 600:	add	x2, x0, #0x7
 604:	and	x2, x2, #0xfffffffffffffff8
 608:	and	x4, x3, #0xfffffffffffffff8
 60c:	mov	x5, x0
 610:	mov	x1, #0x0                   	// #0
 614:	cmp	x5, x2
 618:	ccmp	x5, x3, #0x2, cc  // cc = lo, ul, last
 61c:	b.cs	62c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x5c>  // b.hs, b.nlast
 620:	ldrb	w6, [x5], #1
 624:	orr	x1, x1, x6
 628:	b	614 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x44>
 62c:	cmp	x2, x4
 630:	b.cs	640 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x70>  // b.hs, b.nlast
 634:	ldr	x5, [x2], #8
 638:	orr	x1, x1, x5
 63c:	b	62c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x5c>
 640:	cmp	x0, x4
 644:	b.hi	65c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x8c>  // b.pmore
 648:	cmp	x4, x3
 64c:	b.cs	65c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x8c>  // b.hs, b.nlast
 650:	ldrb	w0, [x4], #1
 654:	orr	x1, x1, x0
 658:	b	648 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x78>
 65c:	cmp	x1, #0x0
 660:	cset	w0, eq  // eq = none
 664:	ret

sanitizer_libignore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>:
   0:	mov	x1, #0x4810                	// #18448
   4:	add	x0, x0, x1
   8:	b	0 <_ZN11__sanitizer13BlockingMutexC1Ev>

000000000000000c <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc>:
   c:	stp	x19, x20, [sp, #-48]!
  10:	mov	x20, x0
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x21, x1
  1c:	mov	x1, #0x4810                	// #18448
  20:	add	x22, x0, x1
  24:	str	x30, [sp, #32]
  28:	mov	x0, x22
  2c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  30:	ldr	x19, [x20, #18536]
  34:	cmp	x19, #0x3ff
  38:	b.ls	5c <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc+0x50>  // b.plast
  3c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  40:	mov	x2, #0x400                 	// #1024
  44:	ldr	x0, [x0]
  48:	ldr	x1, [x0]
  4c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
  50:	add	x0, x0, #0x0
  54:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  58:	bl	0 <_ZN11__sanitizer3DieEv>
  5c:	add	x0, x19, #0x1
  60:	str	x0, [x20, #18536]
  64:	mov	x0, x21
  68:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  6c:	add	x1, x20, x19, lsl #5
  70:	add	x1, x1, #0x4, lsl #12
  74:	ldr	x30, [sp, #32]
  78:	str	x0, [x1, #2160]
  7c:	str	xzr, [x1, #2168]
  80:	mov	x0, x22
  84:	str	xzr, [x1, #2176]
  88:	strb	wzr, [x1, #2184]
  8c:	ldp	x21, x22, [sp, #16]
  90:	ldp	x19, x20, [sp], #48
  94:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

0000000000000098 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>:
  98:	stp	x19, x20, [sp, #-176]!
  9c:	mov	x3, #0x4810                	// #18448
  a0:	mov	x20, x0
  a4:	stp	x23, x24, [sp, #32]
  a8:	add	x23, x0, x3
  ac:	mov	x0, x23
  b0:	add	x19, sp, #0x70
  b4:	stp	x21, x22, [sp, #16]
  b8:	mov	x22, x1
  bc:	stp	x25, x26, [sp, #48]
  c0:	stp	x27, x28, [sp, #64]
  c4:	str	x30, [sp, #80]
  c8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  cc:	mov	x0, x19
  d0:	mov	x1, #0x1000                	// #4096
  d4:	stp	xzr, xzr, [sp, #112]
  d8:	str	xzr, [sp, #128]
  dc:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
  e0:	ldr	x0, [sp, #128]
  e4:	cmp	x0, #0xfff
  e8:	b.hi	120 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x88>  // b.pmore
  ec:	ldr	x0, [sp, #120]
  f0:	cmp	x0, #0xfff
  f4:	b.hi	104 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x6c>  // b.pmore
  f8:	mov	x0, x19
  fc:	mov	x1, #0x1000                	// #4096
 100:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 104:	ldr	x3, [sp, #112]
 108:	mov	x2, #0x1000                	// #4096
 10c:	ldr	x0, [sp, #128]
 110:	mov	w1, #0x0                   	// #0
 114:	sub	x2, x2, x0
 118:	add	x0, x3, x0
 11c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 120:	mov	x2, #0x4870                	// #18544
 124:	mov	x0, #0x1000                	// #4096
 128:	add	x21, x20, x2
 12c:	mov	x1, #0x0                   	// #0
 130:	stp	x0, xzr, [sp, #128]
 134:	mov	x0, x19
 138:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 13c:	strb	wzr, [x0]
 140:	cbz	x22, 1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>
 144:	ldr	x1, [sp, #112]
 148:	mov	x0, x22
 14c:	ldr	x2, [sp, #128]
 150:	sub	x2, x2, #0x1
 154:	bl	0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>
 158:	cbz	x0, 1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>
 15c:	mov	x0, x19
 160:	mov	x1, #0x0                   	// #0
 164:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 168:	ldrb	w0, [x0]
 16c:	cbz	w0, 1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>
 170:	mov	x19, x21
 174:	mov	x24, #0x0                   	// #0
 178:	ldr	x0, [x20, #18536]
 17c:	cmp	x0, x24
 180:	b.ls	1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>  // b.plast
 184:	ldrb	w0, [x19, #24]
 188:	cbnz	w0, 1b4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x11c>
 18c:	ldr	x0, [x19, #16]
 190:	cbnz	x0, 1b4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x11c>
 194:	ldr	x0, [x19]
 198:	mov	x1, x22
 19c:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 1a0:	tst	w0, #0xff
 1a4:	b.eq	1b4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x11c>  // b.none
 1a8:	ldr	x0, [sp, #112]
 1ac:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 1b0:	str	x0, [x19, #16]
 1b4:	add	x24, x24, #0x1
 1b8:	add	x19, x19, #0x20
 1bc:	b	178 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xe0>
 1c0:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
 1c4:	add	x0, sp, #0x90
 1c8:	strb	wzr, [sp, #168]
 1cc:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 1d0:	ldr	x0, [x25]
 1d4:	adrp	x26, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 1d8:	add	x26, x26, #0x0
 1dc:	mov	x22, #0x0                   	// #0
 1e0:	str	x0, [sp, #104]
 1e4:	ldr	x19, [sp, #144]
 1e8:	mov	x0, #0x48                  	// #72
 1ec:	ldr	x24, [sp, #160]
 1f0:	madd	x24, x24, x0, x19
 1f4:	ldr	x0, [x20, #18536]
 1f8:	cmp	x0, x22
 1fc:	b.ls	348 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2b0>  // b.plast
 200:	mov	w28, #0x0                   	// #0
 204:	cmp	x19, x24
 208:	b.eq	308 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x270>  // b.none
 20c:	ldr	x25, [x19, #56]
 210:	cbz	x25, 300 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x268>
 214:	ldrb	w27, [x25, #24]
 218:	cbz	w27, 274 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1dc>
 21c:	ldr	x1, [x19]
 220:	ldr	x0, [x21]
 224:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 228:	tst	w0, #0xff
 22c:	b.eq	260 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c8>  // b.none
 230:	cbz	w28, 27c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1e4>
 234:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 238:	add	x20, x20, x22, lsl #5
 23c:	ldr	x4, [x19]
 240:	ldr	x0, [x0]
 244:	ldr	x2, [x20, #18544]
 248:	ldr	x1, [x0]
 24c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 250:	ldr	x3, [x20, #18552]
 254:	add	x0, x0, #0x0
 258:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 25c:	bl	0 <_ZN11__sanitizer3DieEv>
 260:	ldr	x0, [x21, #16]
 264:	cbz	x0, 274 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1dc>
 268:	ldr	x1, [x19]
 26c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 270:	cbz	w0, 230 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x198>
 274:	ldr	x25, [x25]
 278:	b	210 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x178>
 27c:	ldrb	w28, [x21, #24]
 280:	cbnz	w28, 274 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1dc>
 284:	ldr	x0, [sp, #104]
 288:	ldr	w0, [x0]
 28c:	cbz	w0, 2a0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x208>
 290:	ldr	x2, [x19]
 294:	mov	x0, x26
 298:	ldr	x1, [x21]
 29c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2a0:	mov	w0, #0x1                   	// #1
 2a4:	strb	w0, [x21, #24]
 2a8:	ldr	x0, [x19]
 2ac:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2b0:	ldr	x3, [x20]
 2b4:	str	x0, [x21, #8]
 2b8:	cmp	x3, #0x7f
 2bc:	b.ls	2dc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x244>  // b.plast
 2c0:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 2c4:	add	x2, x2, #0x0
 2c8:	mov	x4, #0x80                  	// #128
 2cc:	mov	w1, #0x52                  	// #82
 2d0:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 2d4:	add	x0, x0, #0x0
 2d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2dc:	add	x0, x20, x3, lsl #4
 2e0:	add	x3, x3, #0x1
 2e4:	ldr	x1, [x25, #8]
 2e8:	str	x1, [x0, #8]
 2ec:	ldr	x1, [x25, #16]
 2f0:	str	x1, [x0, #16]
 2f4:	dmb	ish
 2f8:	str	x3, [x20]
 2fc:	mov	w28, w27
 300:	add	x19, x19, #0x48
 304:	b	204 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x16c>
 308:	ldrb	w0, [x21, #24]
 30c:	cbz	w0, 33c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2a4>
 310:	cbnz	w28, 33c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2a4>
 314:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 318:	add	x20, x20, x22, lsl #5
 31c:	ldr	x0, [x0]
 320:	ldr	x3, [x20, #18544]
 324:	ldr	x1, [x0]
 328:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 32c:	ldr	x2, [x20, #18552]
 330:	add	x0, x0, #0x0
 334:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 338:	b	25c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1c4>
 33c:	add	x22, x22, #0x1
 340:	add	x21, x21, #0x20
 344:	b	1e4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x14c>
 348:	add	x0, x20, #0xc, lsl #12
 34c:	ldrb	w0, [x0, #2160]
 350:	cbz	w0, 41c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>
 354:	adrp	x22, 0 <_ZN11__sanitizer17current_verbosityE>
 358:	adrp	x25, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 35c:	add	x25, x25, #0x0
 360:	ldr	x22, [x22]
 364:	cmp	x24, x19
 368:	b.eq	41c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>  // b.none
 36c:	ldrb	w0, [x19, #44]
 370:	cbz	w0, 414 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x37c>
 374:	ldr	x21, [x19, #56]
 378:	cbz	x21, 414 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x37c>
 37c:	ldrb	w0, [x21, #24]
 380:	cbz	w0, 3e8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x350>
 384:	ldr	x1, [x21, #8]
 388:	mov	x0, x20
 38c:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 390:	tst	w0, #0xff
 394:	b.ne	3d0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x338>  // b.any
 398:	ldr	w0, [x22]
 39c:	cbz	w0, 3b0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x318>
 3a0:	ldp	x1, x2, [x21, #8]
 3a4:	mov	x0, x25
 3a8:	ldr	x3, [x19]
 3ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3b0:	ldr	x3, [x20, #2056]
 3b4:	cmp	x3, #0x3ff
 3b8:	b.ls	3f0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x358>  // b.plast
 3bc:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 3c0:	mov	x4, #0x400                 	// #1024
 3c4:	add	x2, x2, #0x0
 3c8:	mov	w1, #0x6f                  	// #111
 3cc:	b	2d0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x238>
 3d0:	ldr	x1, [x21, #16]
 3d4:	mov	x0, x20
 3d8:	sub	x1, x1, #0x1
 3dc:	bl	0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 3e0:	tst	w0, #0xff
 3e4:	b.eq	398 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x300>  // b.none
 3e8:	ldr	x21, [x21]
 3ec:	b	378 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2e0>
 3f0:	add	x0, x20, x3, lsl #4
 3f4:	add	x3, x3, #0x1
 3f8:	ldr	x1, [x21, #8]
 3fc:	str	x1, [x0, #2064]
 400:	ldr	x1, [x21, #16]
 404:	str	x1, [x0, #2072]
 408:	dmb	ish
 40c:	str	x3, [x20, #2056]
 410:	b	3e8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x350>
 414:	add	x19, x19, #0x48
 418:	b	364 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2cc>
 41c:	ldr	x19, [sp, #144]
 420:	mov	x0, #0x48                  	// #72
 424:	ldr	x20, [sp, #160]
 428:	madd	x20, x20, x0, x19
 42c:	cmp	x20, x19
 430:	b.eq	444 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3ac>  // b.none
 434:	mov	x0, x19
 438:	add	x19, x19, #0x48
 43c:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 440:	b	42c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x394>
 444:	ldp	x0, x1, [sp, #112]
 448:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 44c:	mov	x0, x23
 450:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 454:	ldp	x21, x22, [sp, #16]
 458:	ldp	x23, x24, [sp, #32]
 45c:	ldp	x25, x26, [sp, #48]
 460:	ldp	x27, x28, [sp, #64]
 464:	ldr	x30, [sp, #80]
 468:	ldp	x19, x20, [sp], #176
 46c:	ret

0000000000000470 <_ZN11__sanitizer9LibIgnore17OnLibraryUnloadedEv>:
 470:	mov	x1, #0x0                   	// #0
 474:	b	98 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>

Disassembly of section .text._ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm:

0000000000000000 <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm>:
   0:	ldr	x3, [x0, #2056]
   4:	dmb	ish
   8:	add	x0, x0, #0x810
   c:	mov	x2, #0x0                   	// #0
  10:	cmp	x2, x3
  14:	b.eq	3c <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm+0x3c>  // b.none
  18:	ldr	x4, [x0]
  1c:	cmp	x1, x4
  20:	b.cc	30 <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm+0x30>  // b.lo, b.ul, b.last
  24:	ldr	x4, [x0, #8]
  28:	cmp	x1, x4
  2c:	b.cc	44 <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm+0x44>  // b.lo, b.ul, b.last
  30:	add	x2, x2, #0x1
  34:	add	x0, x0, #0x10
  38:	b	10 <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm+0x10>
  3c:	mov	w0, #0x0                   	// #0
  40:	ret
  44:	mov	w0, #0x1                   	// #1
  48:	b	40 <_ZNK11__sanitizer9LibIgnore16IsPcInstrumentedEm+0x40>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	mov	x19, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x24>
  58:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  5c:	mov	x21, x0
  60:	ldr	x22, [x0]
  64:	ldr	x1, [x22]
  68:	cbnz	x1, 74 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x74>
  6c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  70:	str	x0, [x22]
  74:	ldr	x0, [x21]
  78:	ldr	x0, [x0]
  7c:	sub	x4, x0, #0x1
  80:	tst	x4, x0
  84:	b.eq	98 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x98>  // b.none
  88:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  8c:	add	x0, x0, #0x0
  90:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  94:	bl	0 <_ZN11__sanitizer3DieEv>
  98:	add	x19, x19, x4
  9c:	neg	x0, x0
  a0:	and	x19, x19, x0
  a4:	mov	w2, #0x0                   	// #0
  a8:	mov	x0, x19
  ac:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  b0:	add	x1, x1, #0x0
  b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b8:	ldr	x1, [x20]
  bc:	mov	x21, x0
  c0:	ldr	x2, [x20, #16]
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

sanitizer_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>:
       0:	stp	x19, x20, [sp, #-64]!
       4:	mov	x19, x1
       8:	mov	x20, x0
       c:	mov	w2, #0x0                   	// #0
      10:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      14:	mov	x0, #0x3e80                	// #16000
      18:	add	x1, x1, #0x0
      1c:	str	x30, [sp, #16]
      20:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      24:	str	x0, [x19]
      28:	add	x2, sp, #0x30
      2c:	add	x3, sp, #0x38
      30:	add	x1, sp, #0x28
      34:	mov	x0, x20
      38:	mov	x5, #0x0                   	// #0
      3c:	mov	x4, #0x100000              	// #1048576
      40:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
      44:	tst	w0, #0xff
      48:	ldr	x2, [x19]
      4c:	b.ne	60 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x60>  // b.any
      50:	str	xzr, [x2]
      54:	ldr	x30, [sp, #16]
      58:	ldp	x19, x20, [sp], #64
      5c:	ret
      60:	ldr	x0, [sp, #40]
      64:	str	x0, [x2]
      68:	mov	x0, #0x1                   	// #1
      6c:	mov	w1, w0
      70:	ldr	x4, [sp, #40]
      74:	ldrb	w3, [x4, x0]
      78:	add	x0, x0, #0x1
      7c:	cbnz	w3, 70 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x70>
      80:	add	x7, x4, x0
      84:	ldrb	w4, [x4, x0]
      88:	sxtw	x3, w1
      8c:	sbfiz	x6, x1, #3, #32
      90:	add	x5, x2, w1, sxtw #3
      94:	cbz	w4, c8 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xc8>
      98:	str	x7, [x2, x6]
      9c:	cmp	w1, #0x7cf
      a0:	b.le	c0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xc0>
      a4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      a8:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      ac:	add	x2, x2, #0x0
      b0:	add	x0, x0, #0x0
      b4:	mov	x4, #0x7cf                 	// #1999
      b8:	mov	w1, #0x23f                 	// #575
      bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      c0:	add	w1, w1, #0x1
      c4:	b	70 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x70>
      c8:	str	xzr, [x5]
      cc:	b	54 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x54>

00000000000000d0 <_ZN11__sanitizer16internal_iserrorEmPi>:
      d0:	cmn	x0, #0x1, lsl #12
      d4:	b.ls	ec <_ZN11__sanitizer16internal_iserrorEmPi+0x1c>  // b.plast
      d8:	cbz	x1, e4 <_ZN11__sanitizer16internal_iserrorEmPi+0x14>
      dc:	neg	w0, w0
      e0:	str	w0, [x1]
      e4:	mov	w0, #0x1                   	// #1
      e8:	b	f0 <_ZN11__sanitizer16internal_iserrorEmPi+0x20>
      ec:	mov	w0, #0x0                   	// #0
      f0:	ret

00000000000000f4 <_ZN11__sanitizer13internal_mmapEPvmiiim>:
      f4:	mov	x8, #0xde                  	// #222
      f8:	sxtw	x2, w2
      fc:	sxtw	x3, w3
     100:	sxtw	x4, w4
     104:	svc	#0x0
     108:	ret

000000000000010c <_ZN11__sanitizer15internal_munmapEPvm>:
     10c:	mov	x8, #0xd7                  	// #215
     110:	svc	#0x0
     114:	ret

0000000000000118 <_ZN11__sanitizer17internal_mprotectEPvmi>:
     118:	mov	x8, #0xe2                  	// #226
     11c:	sxtw	x2, w2
     120:	svc	#0x0
     124:	ret

0000000000000128 <_ZN11__sanitizer14internal_closeEi>:
     128:	mov	x8, #0x39                  	// #57
     12c:	sxtw	x0, w0
     130:	svc	#0x0
     134:	ret

0000000000000138 <_ZN11__sanitizer13internal_openEPKci>:
     138:	mov	x3, x0
     13c:	sxtw	x2, w1
     140:	mov	x8, #0x38                  	// #56
     144:	mov	x0, #0xffffffffffffff9c    	// #-100
     148:	mov	x1, x3
     14c:	svc	#0x0
     150:	ret

0000000000000154 <_ZN11__sanitizer13internal_openEPKcij>:
     154:	mov	w4, w1
     158:	mov	x5, x0
     15c:	mov	w3, w2
     160:	mov	x8, #0x38                  	// #56
     164:	mov	x0, #0xffffffffffffff9c    	// #-100
     168:	mov	x1, x5
     16c:	sxtw	x2, w4
     170:	svc	#0x0
     174:	ret

0000000000000178 <_ZN11__sanitizer13internal_readEiPvm>:
     178:	sxtw	x3, w0
     17c:	mov	x0, x3
     180:	mov	x8, #0x3f                  	// #63
     184:	svc	#0x0
     188:	cmn	x0, #0x1, lsl #12
     18c:	b.ls	198 <_ZN11__sanitizer13internal_readEiPvm+0x20>  // b.plast
     190:	cmn	w0, #0x4
     194:	b.eq	17c <_ZN11__sanitizer13internal_readEiPvm+0x4>  // b.none
     198:	ret

000000000000019c <_ZN11__sanitizer14internal_writeEiPKvm>:
     19c:	sxtw	x3, w0
     1a0:	mov	x0, x3
     1a4:	mov	x8, #0x40                  	// #64
     1a8:	svc	#0x0
     1ac:	cmn	x0, #0x1, lsl #12
     1b0:	b.ls	1bc <_ZN11__sanitizer14internal_writeEiPKvm+0x20>  // b.plast
     1b4:	cmn	w0, #0x4
     1b8:	b.eq	1a0 <_ZN11__sanitizer14internal_writeEiPKvm+0x4>  // b.none
     1bc:	ret

00000000000001c0 <_ZN11__sanitizer18internal_ftruncateEim>:
     1c0:	sxtw	x2, w0
     1c4:	mov	x0, x2
     1c8:	mov	x8, #0x2e                  	// #46
     1cc:	svc	#0x0
     1d0:	cmn	x0, #0x1, lsl #12
     1d4:	b.ls	1e0 <_ZN11__sanitizer18internal_ftruncateEim+0x20>  // b.plast
     1d8:	cmn	w0, #0x4
     1dc:	b.eq	1c4 <_ZN11__sanitizer18internal_ftruncateEim+0x4>  // b.none
     1e0:	ret

00000000000001e4 <_ZN11__sanitizer13internal_statEPKcPv>:
     1e4:	mov	x3, x0
     1e8:	mov	x2, x1
     1ec:	mov	x8, #0x4f                  	// #79
     1f0:	mov	x1, x3
     1f4:	mov	x0, #0xffffffffffffff9c    	// #-100
     1f8:	mov	x3, #0x0                   	// #0
     1fc:	svc	#0x0
     200:	ret

0000000000000204 <_ZN11__sanitizer14internal_lstatEPKcPv>:
     204:	mov	x3, x0
     208:	mov	x2, x1
     20c:	mov	x8, #0x4f                  	// #79
     210:	mov	x1, x3
     214:	mov	x0, #0xffffffffffffff9c    	// #-100
     218:	mov	x3, #0x100                 	// #256
     21c:	svc	#0x0
     220:	ret

0000000000000224 <_ZN11__sanitizer14internal_fstatEiPv>:
     224:	mov	x8, #0x50                  	// #80
     228:	sxtw	x0, w0
     22c:	svc	#0x0
     230:	ret

0000000000000234 <_ZN11__sanitizer17internal_filesizeEi>:
     234:	str	x30, [sp, #-144]!
     238:	add	x1, sp, #0x10
     23c:	bl	224 <_ZN11__sanitizer14internal_fstatEiPv>
     240:	cmp	x0, #0x0
     244:	ldr	x0, [sp, #64]
     248:	ldr	x30, [sp], #144
     24c:	csinv	x0, x0, xzr, eq  // eq = none
     250:	ret

0000000000000254 <_ZN11__sanitizer13internal_dup2Eii>:
     254:	mov	x8, #0x18                  	// #24
     258:	sxtw	x0, w0
     25c:	sxtw	x1, w1
     260:	mov	x2, #0x0                   	// #0
     264:	svc	#0x0
     268:	ret

000000000000026c <_ZN11__sanitizer17internal_readlinkEPKcPcm>:
     26c:	mov	x5, x0
     270:	mov	x4, x1
     274:	mov	x3, x2
     278:	mov	x8, #0x4e                  	// #78
     27c:	mov	x0, #0xffffffffffffff9c    	// #-100
     280:	mov	x1, x5
     284:	mov	x2, x4
     288:	svc	#0x0
     28c:	ret

0000000000000290 <_ZN11__sanitizer15internal_unlinkEPKc>:
     290:	mov	x1, x0
     294:	mov	x8, #0x23                  	// #35
     298:	mov	x0, #0xffffffffffffff9c    	// #-100
     29c:	mov	x2, #0x0                   	// #0
     2a0:	svc	#0x0
     2a4:	ret

00000000000002a8 <_ZN11__sanitizer15internal_renameEPKcS1_>:
     2a8:	mov	x2, x0
     2ac:	mov	x3, x1
     2b0:	mov	x0, #0xffffffffffffff9c    	// #-100
     2b4:	mov	x1, x2
     2b8:	mov	x8, #0x26                  	// #38
     2bc:	mov	x2, x0
     2c0:	svc	#0x0
     2c4:	ret

00000000000002c8 <_ZN11__sanitizer20internal_sched_yieldEv>:
     2c8:	mov	x8, #0x7c                  	// #124
     2cc:	svc	#0x0
     2d0:	ret

00000000000002d4 <_ZN11__sanitizer14internal__exitEi>:
     2d4:	sxtw	x0, w0
     2d8:	mov	x8, #0x5e                  	// #94
     2dc:	str	x30, [sp, #-16]!
     2e0:	svc	#0x0
     2e4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000002e8 <_ZN11__sanitizer14internal_sleepEj>:
     2e8:	sub	sp, sp, #0x10
     2ec:	mov	x0, #0x1                   	// #1
     2f0:	mov	x8, #0x65                  	// #101
     2f4:	stp	x0, xzr, [sp]
     2f8:	mov	x0, sp
     2fc:	mov	x1, x0
     300:	svc	#0x0
     304:	cmp	w0, #0x0
     308:	ldr	w0, [sp]
     30c:	add	sp, sp, #0x10
     310:	csel	w0, w0, wzr, ne  // ne = any
     314:	ret

0000000000000318 <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>:
     318:	mov	x8, #0xdd                  	// #221
     31c:	svc	#0x0
     320:	ret

0000000000000324 <_ZN11__sanitizer10FileExistsEPKc>:
     324:	sub	sp, sp, #0x80
     328:	mov	x1, x0
     32c:	mov	x2, sp
     330:	mov	x8, #0x4f                  	// #79
     334:	mov	x0, #0xffffffffffffff9c    	// #-100
     338:	mov	x3, #0x0                   	// #0
     33c:	svc	#0x0
     340:	cbnz	x0, 35c <_ZN11__sanitizer10FileExistsEPKc+0x38>
     344:	ldr	w0, [sp, #16]
     348:	and	w0, w0, #0xf000
     34c:	cmp	w0, #0x8, lsl #12
     350:	cset	w0, eq  // eq = none
     354:	add	sp, sp, #0x80
     358:	ret
     35c:	mov	w0, #0x0                   	// #0
     360:	b	354 <_ZN11__sanitizer10FileExistsEPKc+0x30>

0000000000000364 <_ZN11__sanitizer6GetTidEv>:
     364:	mov	x8, #0xb2                  	// #178
     368:	svc	#0x0
     36c:	ret

0000000000000370 <_ZN11__sanitizer6TgKillEiyi>:
     370:	mov	x8, #0x83                  	// #131
     374:	sxtw	x0, w0
     378:	sxtw	x2, w2
     37c:	svc	#0x0
     380:	ret

0000000000000384 <_ZN11__sanitizer8NanoTimeEv>:
     384:	stp	x19, x30, [sp, #-32]!
     388:	mov	x2, #0x10                  	// #16
     38c:	mov	w1, #0x0                   	// #0
     390:	add	x19, sp, #0x10
     394:	mov	x0, x19
     398:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     39c:	mov	x8, #0xa9                  	// #169
     3a0:	mov	x0, x19
     3a4:	mov	x1, #0x0                   	// #0
     3a8:	svc	#0x0
     3ac:	ldp	x2, x1, [sp, #16]
     3b0:	mov	x0, #0x3e8                 	// #1000
     3b4:	ldp	x19, x30, [sp], #32
     3b8:	mul	x1, x1, x0
     3bc:	mov	x0, #0xca00                	// #51712
     3c0:	movk	x0, #0x3b9a, lsl #16
     3c4:	madd	x0, x2, x0, x1
     3c8:	ret

00000000000003cc <_ZN11__sanitizer22internal_clock_gettimeEiPv>:
     3cc:	mov	x8, #0x71                  	// #113
     3d0:	sxtw	x0, w0
     3d4:	svc	#0x0
     3d8:	ret

00000000000003dc <_ZN11__sanitizer6GetEnvEPKc>:
     3dc:	stp	x19, x20, [sp, #-64]!
     3e0:	adrp	x19, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     3e4:	stp	x23, x30, [sp, #32]
     3e8:	mov	x23, x0
     3ec:	ldrb	w0, [x19]
     3f0:	stp	x21, x22, [sp, #16]
     3f4:	cbnz	w0, 430 <_ZN11__sanitizer6GetEnvEPKc+0x54>
     3f8:	add	x20, x19, #0x0
     3fc:	mov	w0, #0x1                   	// #1
     400:	add	x3, x20, #0x8
     404:	strb	w0, [x19]
     408:	add	x2, sp, #0x38
     40c:	add	x1, x20, #0x10
     410:	mov	x5, #0x0                   	// #0
     414:	mov	x4, #0x4000000             	// #67108864
     418:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     41c:	add	x0, x0, #0x0
     420:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
     424:	tst	w0, #0xff
     428:	b.ne	430 <_ZN11__sanitizer6GetEnvEPKc+0x54>  // b.any
     42c:	str	xzr, [x20, #16]
     430:	add	x19, x19, #0x0
     434:	ldr	x0, [x19, #16]
     438:	cbz	x0, 4bc <_ZN11__sanitizer6GetEnvEPKc+0xe0>
     43c:	ldr	x0, [x19, #8]
     440:	cbz	x0, 4bc <_ZN11__sanitizer6GetEnvEPKc+0xe0>
     444:	mov	x0, x23
     448:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     44c:	ldr	x20, [x19, #16]
     450:	mov	x21, x0
     454:	ldrb	w0, [x20]
     458:	cbz	w0, 4bc <_ZN11__sanitizer6GetEnvEPKc+0xe0>
     45c:	ldp	x2, x0, [x19, #8]
     460:	mov	w1, #0x0                   	// #0
     464:	sub	x0, x20, x0
     468:	sub	x2, x2, x0
     46c:	mov	x0, x20
     470:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
     474:	mov	x22, x0
     478:	cbz	x0, 4bc <_ZN11__sanitizer6GetEnvEPKc+0xe0>
     47c:	mov	x2, x21
     480:	mov	x1, x23
     484:	mov	x0, x20
     488:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
     48c:	cbnz	w0, 4b4 <_ZN11__sanitizer6GetEnvEPKc+0xd8>
     490:	ldrb	w0, [x20, x21]
     494:	cmp	w0, #0x3d
     498:	b.ne	4b4 <_ZN11__sanitizer6GetEnvEPKc+0xd8>  // b.any
     49c:	add	x0, x21, #0x1
     4a0:	add	x0, x20, x0
     4a4:	ldp	x21, x22, [sp, #16]
     4a8:	ldp	x23, x30, [sp, #32]
     4ac:	ldp	x19, x20, [sp], #64
     4b0:	ret
     4b4:	add	x20, x22, #0x1
     4b8:	b	454 <_ZN11__sanitizer6GetEnvEPKc+0x78>
     4bc:	mov	x0, #0x0                   	// #0
     4c0:	b	4a4 <_ZN11__sanitizer6GetEnvEPKc+0xc8>

00000000000004c4 <_ZN11__sanitizer7GetArgvEv>:
     4c4:	adrp	x0, 0 <__libc_stack_end>
     4c8:	str	x30, [sp, #-32]!
     4cc:	ldr	x0, [x0]
     4d0:	cbz	x0, 4ec <_ZN11__sanitizer7GetArgvEv+0x28>
     4d4:	ldr	x0, [x0]
     4d8:	add	x0, x0, #0x8
     4dc:	str	x0, [sp, #16]
     4e0:	ldr	x0, [sp, #16]
     4e4:	ldr	x30, [sp], #32
     4e8:	ret
     4ec:	add	x1, sp, #0x10
     4f0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     4f4:	add	x0, x0, #0x0
     4f8:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     4fc:	add	x1, sp, #0x18
     500:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     504:	add	x0, x0, #0x0
     508:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     50c:	b	4e0 <_ZN11__sanitizer7GetArgvEv+0x1c>

0000000000000510 <_ZN11__sanitizer6ReExecEv>:
     510:	adrp	x0, 0 <__libc_stack_end>
     514:	str	x30, [sp, #-32]!
     518:	ldr	x0, [x0]
     51c:	cbz	x0, 570 <_ZN11__sanitizer6ReExecEv+0x60>
     520:	ldr	x2, [x0]
     524:	mov	x1, x2
     528:	ldr	x0, [x1], #8
     52c:	add	x0, x2, w0, sxtw #3
     530:	add	x0, x0, #0x10
     534:	stp	x1, x0, [sp, #16]
     538:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     53c:	ldp	x1, x2, [sp, #16]
     540:	add	x0, x0, #0x0
     544:	bl	318 <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>
     548:	cmn	x0, #0x1, lsl #12
     54c:	b.hi	594 <_ZN11__sanitizer6ReExecEv+0x84>  // b.pmore
     550:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     554:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     558:	add	x2, x2, #0x0
     55c:	add	x0, x0, #0x0
     560:	mov	x4, #0x1                   	// #1
     564:	mov	x3, #0x0                   	// #0
     568:	mov	w1, #0x286                 	// #646
     56c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     570:	add	x1, sp, #0x10
     574:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     578:	add	x0, x0, #0x0
     57c:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     580:	add	x1, sp, #0x18
     584:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     588:	add	x0, x0, #0x0
     58c:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     590:	b	538 <_ZN11__sanitizer6ReExecEv+0x28>
     594:	neg	w1, w0
     598:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     59c:	add	x0, x0, #0x0
     5a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     5a4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000005a8 <_ZN11__sanitizer13BlockingMutexC1Ev>:
     5a8:	mov	x2, #0x58                  	// #88
     5ac:	mov	w1, #0x0                   	// #0
     5b0:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

00000000000005b4 <_ZN11__sanitizer13BlockingMutex4LockEv>:
     5b4:	ldr	x3, [x0, #80]
     5b8:	cbz	x3, 5dc <_ZN11__sanitizer13BlockingMutex4LockEv+0x28>
     5bc:	str	x30, [sp, #-16]!
     5c0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5c4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5c8:	add	x2, x2, #0x0
     5cc:	add	x0, x0, #0x0
     5d0:	mov	x4, #0x0                   	// #0
     5d4:	mov	w1, #0x298                 	// #664
     5d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5dc:	mov	x6, x0
     5e0:	mov	w1, #0x1                   	// #1
     5e4:	ldxr	w0, [x6]
     5e8:	stxr	w2, w1, [x6]
     5ec:	cbnz	w2, 5e4 <_ZN11__sanitizer13BlockingMutex4LockEv+0x30>
     5f0:	dmb	ish
     5f4:	cbz	w0, 634 <_ZN11__sanitizer13BlockingMutex4LockEv+0x80>
     5f8:	mov	w7, #0x2                   	// #2
     5fc:	ldxr	w0, [x6]
     600:	stxr	w1, w7, [x6]
     604:	cbnz	w1, 5fc <_ZN11__sanitizer13BlockingMutex4LockEv+0x48>
     608:	dmb	ish
     60c:	cbz	w0, 634 <_ZN11__sanitizer13BlockingMutex4LockEv+0x80>
     610:	mov	x0, x6
     614:	mov	x8, #0x62                  	// #98
     618:	mov	x1, #0x80                  	// #128
     61c:	mov	x2, #0x2                   	// #2
     620:	mov	x3, #0x0                   	// #0
     624:	mov	x4, #0x0                   	// #0
     628:	mov	x5, #0x0                   	// #0
     62c:	svc	#0x0
     630:	b	5fc <_ZN11__sanitizer13BlockingMutex4LockEv+0x48>
     634:	ret

0000000000000638 <_ZN11__sanitizer13BlockingMutex6UnlockEv>:
     638:	mov	x1, x0
     63c:	dmb	ish
     640:	ldxr	w2, [x1]
     644:	stxr	w3, wzr, [x1]
     648:	cbnz	w3, 640 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x8>
     64c:	dmb	ish
     650:	cbnz	w2, 678 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x40>
     654:	str	x30, [sp, #-16]!
     658:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     65c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     660:	add	x2, x2, #0x0
     664:	add	x0, x0, #0x0
     668:	mov	x4, #0x0                   	// #0
     66c:	mov	x3, #0x0                   	// #0
     670:	mov	w1, #0x2ab                 	// #683
     674:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     678:	cmp	w2, #0x2
     67c:	b.ne	69c <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x64>  // b.any
     680:	mov	x8, #0x62                  	// #98
     684:	mov	x1, #0x81                  	// #129
     688:	mov	x2, #0x1                   	// #1
     68c:	mov	x3, #0x0                   	// #0
     690:	mov	x4, #0x0                   	// #0
     694:	mov	x5, #0x0                   	// #0
     698:	svc	#0x0
     69c:	ret

00000000000006a0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>:
     6a0:	ldr	w0, [x0]
     6a4:	cbnz	w0, 6cc <_ZN11__sanitizer13BlockingMutex11CheckLockedEv+0x2c>
     6a8:	str	x30, [sp, #-16]!
     6ac:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6b0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6b4:	add	x2, x2, #0x0
     6b8:	add	x0, x0, #0x0
     6bc:	mov	x4, #0x0                   	// #0
     6c0:	mov	x3, #0x0                   	// #0
     6c4:	mov	w1, #0x2b9                 	// #697
     6c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6cc:	ret

00000000000006d0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>:
     6d0:	mov	x8, #0x75                  	// #117
     6d4:	sxtw	x0, w0
     6d8:	sxtw	x1, w1
     6dc:	svc	#0x0
     6e0:	ret

00000000000006e4 <_ZN11__sanitizer16internal_waitpidEiPii>:
     6e4:	mov	x8, #0x104                 	// #260
     6e8:	sxtw	x0, w0
     6ec:	sxtw	x2, w2
     6f0:	mov	x3, #0x0                   	// #0
     6f4:	svc	#0x0
     6f8:	ret

00000000000006fc <_ZN11__sanitizer15internal_getpidEv>:
     6fc:	mov	x8, #0xac                  	// #172
     700:	svc	#0x0
     704:	ret

0000000000000708 <_ZN11__sanitizer16internal_getppidEv>:
     708:	mov	x8, #0xad                  	// #173
     70c:	svc	#0x0
     710:	ret

0000000000000714 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>:
     714:	mov	x8, #0x3d                  	// #61
     718:	sxtw	x0, w0
     71c:	mov	w2, w2
     720:	svc	#0x0
     724:	ret

0000000000000728 <_ZN11__sanitizer14internal_lseekEimi>:
     728:	mov	x8, #0x3e                  	// #62
     72c:	sxtw	x0, w0
     730:	sxtw	x2, w2
     734:	svc	#0x0
     738:	ret

000000000000073c <_ZN11__sanitizer14internal_prctlEimmmm>:
     73c:	mov	x8, #0xa7                  	// #167
     740:	sxtw	x0, w0
     744:	svc	#0x0
     748:	ret

000000000000074c <_ZN11__sanitizer20internal_sigaltstackEPKvPv>:
     74c:	mov	x8, #0x84                  	// #132
     750:	svc	#0x0
     754:	ret

0000000000000758 <_ZN11__sanitizer13internal_forkEv>:
     758:	mov	x8, #0xdc                  	// #220
     75c:	mov	x0, #0x11                  	// #17
     760:	mov	x1, #0x0                   	// #0
     764:	svc	#0x0
     768:	ret

000000000000076c <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>:
     76c:	stp	x19, x20, [sp, #-112]!
     770:	mov	x20, x1
     774:	mov	x19, x2
     778:	stp	x21, x22, [sp, #16]
     77c:	add	x21, sp, #0x30
     780:	mov	x2, #0x20                  	// #32
     784:	mov	w1, #0x0                   	// #0
     788:	mov	w22, w0
     78c:	mov	x0, x21
     790:	stp	x23, x30, [sp, #32]
     794:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     798:	add	x23, sp, #0x50
     79c:	mov	x2, #0x20                  	// #32
     7a0:	mov	x0, x23
     7a4:	mov	w1, #0x0                   	// #0
     7a8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     7ac:	cbz	x20, 7dc <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0x70>
     7b0:	mov	x1, x20
     7b4:	mov	x2, #0x8                   	// #8
     7b8:	ldr	x0, [x1], #8
     7bc:	str	x0, [sp, #48]
     7c0:	add	x0, x21, #0x18
     7c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     7c8:	ldr	w1, [x20, #136]
     7cc:	ldr	x0, [x20, #144]
     7d0:	orr	w1, w1, #0x4000000
     7d4:	sxtw	x1, w1
     7d8:	stp	x1, x0, [sp, #56]
     7dc:	cmp	x20, #0x0
     7e0:	csel	x1, x21, xzr, ne  // ne = any
     7e4:	cmp	x19, #0x0
     7e8:	sxtw	x0, w22
     7ec:	csel	x2, x23, xzr, ne  // ne = any
     7f0:	mov	x8, #0x86                  	// #134
     7f4:	mov	x3, #0x8                   	// #8
     7f8:	svc	#0x0
     7fc:	cmp	x0, #0x0
     800:	mov	x20, x0
     804:	ccmp	x19, #0x0, #0x4, eq  // eq = none
     808:	b.eq	834 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xc8>  // b.none
     80c:	mov	x0, x19
     810:	mov	x2, x3
     814:	ldr	x1, [sp, #80]
     818:	str	x1, [x0], #8
     81c:	add	x1, x23, #0x18
     820:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     824:	ldr	x0, [sp, #88]
     828:	str	w0, [x19, #136]
     82c:	ldr	x0, [sp, #96]
     830:	str	x0, [x19, #144]
     834:	mov	w0, w20
     838:	ldp	x21, x22, [sp, #16]
     83c:	ldp	x23, x30, [sp, #32]
     840:	ldp	x19, x20, [sp], #112
     844:	ret

0000000000000848 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>:
     848:	mov	x8, #0x87                  	// #135
     84c:	sxtw	x0, w0
     850:	mov	x3, #0x8                   	// #8
     854:	svc	#0x0
     858:	ret

000000000000085c <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>:
     85c:	mov	x2, #0x80                  	// #128
     860:	mov	w1, #0xff                  	// #255
     864:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000868 <_ZN11__sanitizer20internal_sigemptysetEPNS_20__sanitizer_sigset_tE>:
     868:	mov	x2, #0x80                  	// #128
     86c:	mov	w1, #0x0                   	// #0
     870:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000874 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>:
     874:	sub	w1, w1, #0x1
     878:	sxtw	x3, w1
     87c:	cmp	x3, #0x3ff
     880:	b.ls	8a4 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi+0x30>  // b.plast
     884:	str	x30, [sp, #-16]!
     888:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     88c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     890:	add	x2, x2, #0x0
     894:	add	x0, x0, #0x0
     898:	mov	x4, #0x400                 	// #1024
     89c:	mov	w1, #0x381                 	// #897
     8a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     8a4:	lsr	x3, x3, #3
     8a8:	and	w1, w1, #0x7
     8ac:	mov	w2, #0x1                   	// #1
     8b0:	lsl	w1, w2, w1
     8b4:	ldrb	w2, [x0, x3]
     8b8:	bic	w1, w2, w1
     8bc:	strb	w1, [x0, x3]
     8c0:	ret

00000000000008c4 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi>:
     8c4:	sub	w1, w1, #0x1
     8c8:	sxtw	x3, w1
     8cc:	cmp	x3, #0x3ff
     8d0:	b.ls	8f4 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi+0x30>  // b.plast
     8d4:	str	x30, [sp, #-16]!
     8d8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     8dc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     8e0:	add	x2, x2, #0x0
     8e4:	add	x0, x0, #0x0
     8e8:	mov	x4, #0x400                 	// #1024
     8ec:	mov	w1, #0x38b                 	// #907
     8f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     8f4:	lsr	x3, x3, #3
     8f8:	and	w1, w1, #0x7
     8fc:	ldrb	w0, [x0, x3]
     900:	asr	w0, w0, w1
     904:	and	w0, w0, #0x1
     908:	ret

000000000000090c <_ZN11__sanitizer12ThreadListerD1Ev>:
     90c:	mov	x2, x0
     910:	ldr	w0, [x0, #4]
     914:	sxtw	x1, w0
     918:	cmn	x1, #0x1, lsl #12
     91c:	b.hi	934 <_ZN11__sanitizer12ThreadListerD1Ev+0x28>  // b.pmore
     920:	str	x30, [sp, #-16]!
     924:	bl	128 <_ZN11__sanitizer14internal_closeEi>
     928:	ldp	x0, x1, [x2, #8]
     92c:	ldr	x30, [sp], #16
     930:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     934:	ldp	x0, x1, [x2, #8]
     938:	b	930 <_ZN11__sanitizer12ThreadListerD1Ev+0x24>

000000000000093c <_ZN11__sanitizer20GetMaxVirtualAddressEv>:
     93c:	stp	x29, x30, [sp, #-16]!
     940:	mov	x29, sp
     944:	mov	x0, x29
     948:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     94c:	add	w1, w0, #0x1
     950:	mov	x0, #0x1                   	// #1
     954:	ldp	x29, x30, [sp], #16
     958:	lsl	x0, x0, x1
     95c:	sub	x0, x0, #0x1
     960:	ret

0000000000000964 <_ZN11__sanitizer24GetMaxUserVirtualAddressEv>:
     964:	b	93c <_ZN11__sanitizer20GetMaxVirtualAddressEv>

0000000000000968 <_ZN11__sanitizer11GetPageSizeEv>:
     968:	mov	x0, #0x6                   	// #6
     96c:	b	0 <getauxval>

0000000000000970 <_ZN11__sanitizer14ReadBinaryNameEPcm>:
     970:	stp	x19, x20, [sp, #-32]!
     974:	mov	x2, x1
     978:	mov	x20, x0
     97c:	stp	x21, x30, [sp, #16]
     980:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     984:	add	x21, x21, #0x0
     988:	mov	x19, x1
     98c:	mov	x1, x0
     990:	mov	x0, x21
     994:	bl	26c <_ZN11__sanitizer17internal_readlinkEPKcPcm>
     998:	cmn	x0, #0x1, lsl #12
     99c:	b.ls	9f8 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x88>  // b.plast
     9a0:	neg	w1, w0
     9a4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9a8:	add	x0, x0, #0x0
     9ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     9b0:	mov	x1, x19
     9b4:	mov	x3, x21
     9b8:	mov	x0, x20
     9bc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9c0:	add	x2, x2, #0x0
     9c4:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     9c8:	mov	w1, w0
     9cc:	sxtw	x0, w0
     9d0:	cmp	x19, w1, sxtw
     9d4:	b.hi	9f8 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x88>  // b.pmore
     9d8:	mov	x3, x0
     9dc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e4:	mov	x4, x19
     9e8:	add	x2, x2, #0x0
     9ec:	add	x0, x0, #0x0
     9f0:	mov	w1, #0x470                 	// #1136
     9f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     9f8:	ldp	x21, x30, [sp, #16]
     9fc:	ldp	x19, x20, [sp], #32
     a00:	ret

0000000000000a04 <_ZN11__sanitizer19ReadLongProcessNameEPcm>:
     a04:	stp	x19, x20, [sp, #-64]!
     a08:	mov	x5, #0x0                   	// #0
     a0c:	mov	x19, x0
     a10:	mov	x20, x1
     a14:	add	x3, sp, #0x38
     a18:	add	x2, sp, #0x30
     a1c:	add	x1, sp, #0x28
     a20:	mov	x4, #0x100000              	// #1048576
     a24:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     a28:	add	x0, x0, #0x0
     a2c:	str	x30, [sp, #16]
     a30:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
     a34:	tst	w0, #0xff
     a38:	b.eq	a68 <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x64>  // b.none
     a3c:	ldr	x1, [sp, #40]
     a40:	mov	x2, x20
     a44:	mov	x0, x19
     a48:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
     a4c:	ldp	x0, x1, [sp, #40]
     a50:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a54:	mov	x0, x19
     a58:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     a5c:	ldr	x30, [sp, #16]
     a60:	ldp	x19, x20, [sp], #64
     a64:	ret
     a68:	mov	x1, x20
     a6c:	mov	x0, x19
     a70:	bl	970 <_ZN11__sanitizer14ReadBinaryNameEPcm>
     a74:	b	a5c <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x58>

0000000000000a78 <_ZN11__sanitizer13LibraryNameIsEPKcS1_>:
     a78:	stp	x19, x20, [sp, #-32]!
     a7c:	mov	x19, x0
     a80:	stp	x21, x30, [sp, #16]
     a84:	mov	x21, x1
     a88:	ldrb	w1, [x19]
     a8c:	cbz	w1, a98 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x20>
     a90:	add	x19, x19, #0x1
     a94:	b	a88 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x10>
     a98:	ldrb	w1, [x19]
     a9c:	cmp	x19, x0
     aa0:	b.ls	ab4 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x3c>  // b.plast
     aa4:	cmp	w1, #0x2f
     aa8:	b.eq	abc <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x44>  // b.none
     aac:	sub	x19, x19, #0x1
     ab0:	b	a98 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x20>
     ab4:	cmp	w1, #0x2f
     ab8:	b.ne	ac0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x48>  // b.any
     abc:	add	x19, x19, #0x1
     ac0:	mov	x0, x21
     ac4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     ac8:	mov	x1, x21
     acc:	mov	x20, x0
     ad0:	mov	x2, x0
     ad4:	mov	x0, x19
     ad8:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
     adc:	cbnz	w0, b00 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x88>
     ae0:	ldrb	w0, [x19, x20]
     ae4:	sub	w0, w0, #0x2d
     ae8:	and	w0, w0, #0xff
     aec:	cmp	w0, #0x1
     af0:	cset	w0, ls  // ls = plast
     af4:	ldp	x21, x30, [sp, #16]
     af8:	ldp	x19, x20, [sp], #32
     afc:	ret
     b00:	mov	w0, #0x0                   	// #0
     b04:	b	af4 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x7c>

0000000000000b08 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE>:
     b08:	stp	x19, x20, [sp, #-80]!
     b0c:	stp	x21, x22, [sp, #16]
     b10:	stp	x23, x24, [sp, #32]
     b14:	stp	x25, x26, [sp, #48]
     b18:	str	x30, [sp, #64]
     b1c:	cbnz	x0, b40 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x38>
     b20:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     b24:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     b28:	add	x2, x2, #0x0
     b2c:	add	x0, x0, #0x0
     b30:	mov	x4, #0x0                   	// #0
     b34:	mov	x3, #0x0                   	// #0
     b38:	mov	w1, #0x495                 	// #1173
     b3c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b40:	ldr	x20, [x0]
     b44:	mov	x24, x1
     b48:	mov	x0, #0xffffffffffffffff    	// #-1
     b4c:	ldrh	w2, [x20, #54]
     b50:	ldrh	w22, [x20, #56]
     b54:	ldr	x19, [x20, #32]
     b58:	mul	w22, w22, w2
     b5c:	add	x19, x20, x19
     b60:	and	x2, x2, #0xffff
     b64:	mov	x1, x19
     b68:	add	x22, x19, w22, sxtw
     b6c:	cmp	x1, x22
     b70:	b.eq	b94 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x8c>  // b.none
     b74:	ldr	w3, [x1]
     b78:	cmp	w3, #0x1
     b7c:	b.ne	b8c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x84>  // b.any
     b80:	ldr	x3, [x1, #16]
     b84:	cmp	x0, x3
     b88:	csel	x0, x0, x3, ls  // ls = plast
     b8c:	add	x1, x1, x2
     b90:	b	b6c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x64>
     b94:	sub	x21, x20, x0
     b98:	cmp	x19, x22
     b9c:	b.eq	bf0 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xe8>  // b.none
     ba0:	ldr	w0, [x19]
     ba4:	cmp	w0, #0x1
     ba8:	b.ne	be4 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xdc>  // b.any
     bac:	ldr	x23, [x19, #16]
     bb0:	ldr	x26, [x19, #40]
     bb4:	add	x25, x21, x23
     bb8:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     bbc:	neg	x23, x0
     bc0:	add	x26, x25, x26
     bc4:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     bc8:	and	x23, x23, x25
     bcc:	mov	x1, x0
     bd0:	mov	x0, x26
     bd4:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     bd8:	sub	x1, x0, x23
     bdc:	mov	x0, x23
     be0:	blr	x24
     be4:	ldrh	w0, [x20, #54]
     be8:	add	x19, x19, x0
     bec:	b	b98 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x90>
     bf0:	ldp	x21, x22, [sp, #16]
     bf4:	ldp	x23, x24, [sp, #32]
     bf8:	ldp	x25, x26, [sp, #48]
     bfc:	ldr	x30, [sp, #64]
     c00:	ldp	x19, x20, [sp], #80
     c04:	ret

0000000000000c08 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>:
     c08:	cmp	x0, #0x0
     c0c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
     c10:	b.eq	c80 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x78>  // b.none
     c14:	str	x30, [sp, #-16]!
     c18:	ands	x9, x1, #0xf
     c1c:	b.eq	c40 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x38>  // b.none
     c20:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     c24:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     c28:	mov	x4, x9
     c2c:	add	x2, x2, #0x0
     c30:	add	x0, x0, #0x0
     c34:	mov	x3, #0x0                   	// #0
     c38:	mov	w1, #0x54b                 	// #1355
     c3c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c40:	stp	x0, x3, [x1, #-16]
     c44:	sub	x1, x1, #0x10
     c48:	mov	x0, x2
     c4c:	mov	x2, x4
     c50:	mov	x3, x5
     c54:	mov	x4, x6
     c58:	mov	x8, #0xdc                  	// #220
     c5c:	svc	#0x0
     c60:	cmp	x0, #0x0
     c64:	b.ne	c78 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x70>  // b.any
     c68:	ldp	x1, x0, [sp], #16
     c6c:	blr	x1
     c70:	mov	x8, #0x5d                  	// #93
     c74:	svc	#0x0
     c78:	ldr	x30, [sp], #16
     c7c:	ret
     c80:	mov	x0, #0xffffffffffffffea    	// #-22
     c84:	ret

0000000000000c88 <_ZN11__sanitizer19GetHandleSignalModeEi>:
     c88:	sub	w0, w0, #0x4
     c8c:	cmp	w0, #0x7
     c90:	b.hi	d2c <_ZN11__sanitizer19GetHandleSignalModeEi+0xa4>  // b.pmore
     c94:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     c98:	add	x1, x1, #0x0
     c9c:	ldrb	w0, [x1, w0, uxtw]
     ca0:	adr	x1, cac <_ZN11__sanitizer19GetHandleSignalModeEi+0x24>
     ca4:	add	x0, x1, w0, sxtb #2
     ca8:	br	x0
     cac:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     cb0:	ldr	x0, [x0]
     cb4:	ldr	w0, [x0, #80]
     cb8:	cmp	w0, #0x1
     cbc:	b.ne	cd8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x50>  // b.any
     cc0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     cc4:	ldr	x1, [x1]
     cc8:	ldrb	w1, [x1, #96]
     ccc:	cmp	w1, #0x0
     cd0:	mov	w1, #0x2                   	// #2
     cd4:	csel	w0, w0, w1, ne  // ne = any
     cd8:	ret
     cdc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     ce0:	ldr	x0, [x0]
     ce4:	ldr	w0, [x0, #84]
     ce8:	b	cb8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>
     cec:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     cf0:	ldr	x0, [x0]
     cf4:	ldr	w0, [x0, #88]
     cf8:	b	cb8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>
     cfc:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d00:	ldr	x0, [x0]
     d04:	ldr	w0, [x0, #92]
     d08:	b	cb8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>
     d0c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d10:	ldr	x0, [x0]
     d14:	ldr	w0, [x0, #72]
     d18:	b	cb8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>
     d1c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     d20:	ldr	x0, [x0]
     d24:	ldr	w0, [x0, #76]
     d28:	b	cb8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>
     d2c:	mov	w0, #0x0                   	// #0
     d30:	b	cd8 <_ZN11__sanitizer19GetHandleSignalModeEi+0x50>

0000000000000d34 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>:
     d34:	stp	x19, x20, [sp, #-320]!
     d38:	mov	x20, x1
     d3c:	mov	x19, x0
     d40:	stp	x21, x22, [sp, #16]
     d44:	add	x21, sp, #0x40
     d48:	mov	x0, x21
     d4c:	str	x30, [sp, #32]
     d50:	bl	85c <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
     d54:	add	x22, sp, #0xc0
     d58:	mov	x0, x21
     d5c:	mov	w1, #0x21                  	// #33
     d60:	bl	874 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
     d64:	mov	x2, x22
     d68:	mov	x1, x21
     d6c:	mov	w0, #0x2                   	// #2
     d70:	bl	848 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     d74:	mov	x3, x20
     d78:	mov	x2, x19
     d7c:	add	x0, sp, #0x38
     d80:	mov	x1, #0x0                   	// #0
     d84:	bl	0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
     d88:	mov	x1, x22
     d8c:	mov	x2, #0x0                   	// #0
     d90:	mov	w0, #0x2                   	// #2
     d94:	bl	848 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     d98:	ldp	x21, x22, [sp, #16]
     d9c:	ldr	x30, [sp, #32]
     da0:	ldr	x0, [sp, #56]
     da4:	ldp	x19, x20, [sp], #320
     da8:	ret

0000000000000dac <_ZN11__sanitizer20internal_join_threadEPv>:
     dac:	mov	x1, #0x0                   	// #0
     db0:	b	0 <_ZN11__sanitizer17real_pthread_joinEPvPS0_>

0000000000000db4 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>:
     db4:	ldr	x1, [x0, #8]
     db8:	mov	w2, #0x5201                	// #20993
     dbc:	movk	w2, #0x4553, lsl #16
     dc0:	add	x1, x1, #0x1d0
     dc4:	ldr	w0, [x1, #4]
     dc8:	cbz	w0, de4 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x30>
     dcc:	ldr	w3, [x1]
     dd0:	cmp	w3, w2
     dd4:	b.ne	de8 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x34>  // b.any
     dd8:	ldr	x0, [x1, #8]
     ddc:	ubfx	w0, w0, #6, #1
     de0:	add	w0, w0, #0x1
     de4:	ret
     de8:	add	x1, x1, w0, uxtw
     dec:	b	dc4 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x10>

0000000000000df0 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>:
     df0:	ret

0000000000000df4 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>:
     df4:	ldr	x1, [x0, #8]
     df8:	ldr	x2, [x1, #440]
     dfc:	str	x2, [x0, #24]
     e00:	ldr	x2, [x1, #416]
     e04:	ldr	x1, [x1, #432]
     e08:	stp	x1, x2, [x0, #32]
     e0c:	ret

0000000000000e10 <_ZN11__sanitizer11MaybeReexecEv>:
     e10:	ret

0000000000000e14 <_ZN11__sanitizer9CheckASLREv>:
     e14:	ret

0000000000000e18 <_ZN11__sanitizer14PrintModuleMapEv>:
     e18:	ret

0000000000000e1c <_ZN11__sanitizer15CheckNoDeepBindEPKci>:
     e1c:	tbz	w1, #3, e3c <_ZN11__sanitizer15CheckNoDeepBindEPKci+0x20>
     e20:	mov	x2, x0
     e24:	mov	x1, x0
     e28:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     e2c:	add	x0, x0, #0x0
     e30:	str	x30, [sp, #-16]!
     e34:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     e38:	bl	0 <_ZN11__sanitizer3DieEv>
     e3c:	ret

0000000000000e40 <_ZN11__sanitizer24FindAvailableMemoryRangeEmmmPmS0_>:
     e40:	str	x30, [sp, #-16]!
     e44:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     e48:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     e4c:	add	x2, x2, #0x0
     e50:	add	x0, x0, #0x0
     e54:	mov	x4, #0x0                   	// #0
     e58:	mov	x3, #0x0                   	// #0
     e5c:	mov	w1, #0x80a                 	// #2058
     e60:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000e64 <_ZN11__sanitizer9GetRandomEPvmb>:
     e64:	sub	x3, x1, #0x1
     e68:	cmp	x3, #0xff
     e6c:	ccmp	x0, #0x0, #0x4, ls  // ls = plast
     e70:	b.ne	e88 <_ZN11__sanitizer9GetRandomEPvmb+0x24>  // b.any
     e74:	mov	w0, #0x0                   	// #0
     e78:	ret
     e7c:	mov	w0, #0x0                   	// #0
     e80:	ldr	x30, [sp], #16
     e84:	ret
     e88:	adrp	x3, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     e8c:	add	x3, x3, #0x0
     e90:	mov	x6, x0
     e94:	mov	x5, x1
     e98:	ldrb	w4, [x3, #24]
     e9c:	tst	w4, #0xff
     ea0:	b.ne	ed0 <_ZN11__sanitizer9GetRandomEPvmb+0x6c>  // b.any
     ea4:	and	w2, w2, #0xff
     ea8:	mov	x8, #0x116                 	// #278
     eac:	eor	w2, w2, #0x1
     eb0:	and	x2, x2, #0xff
     eb4:	svc	#0x0
     eb8:	cmn	x0, #0x1, lsl #12
     ebc:	b.ls	f14 <_ZN11__sanitizer9GetRandomEPvmb+0xb0>  // b.plast
     ec0:	cmn	w0, #0x26
     ec4:	b.ne	ed0 <_ZN11__sanitizer9GetRandomEPvmb+0x6c>  // b.any
     ec8:	mov	w0, #0x1                   	// #1
     ecc:	strb	w0, [x3, #24]
     ed0:	str	x30, [sp, #-16]!
     ed4:	mov	w1, #0x0                   	// #0
     ed8:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     edc:	add	x0, x0, #0x0
     ee0:	bl	138 <_ZN11__sanitizer13internal_openEPKci>
     ee4:	mov	x4, x0
     ee8:	cmn	x0, #0x1, lsl #12
     eec:	b.hi	e7c <_ZN11__sanitizer9GetRandomEPvmb+0x18>  // b.pmore
     ef0:	mov	x2, x5
     ef4:	mov	x1, x6
     ef8:	bl	178 <_ZN11__sanitizer13internal_readEiPvm>
     efc:	cmn	x0, #0x1, lsl #12
     f00:	b.hi	e7c <_ZN11__sanitizer9GetRandomEPvmb+0x18>  // b.pmore
     f04:	mov	w0, w4
     f08:	bl	128 <_ZN11__sanitizer14internal_closeEi>
     f0c:	mov	w0, #0x1                   	// #1
     f10:	b	e80 <_ZN11__sanitizer9GetRandomEPvmb+0x1c>
     f14:	cmp	x1, x0
     f18:	b.ne	ed0 <_ZN11__sanitizer9GetRandomEPvmb+0x6c>  // b.any
     f1c:	mov	w0, #0x1                   	// #1
     f20:	ret

0000000000000f24 <_ZN11__sanitizer12ThreadLister7IsAliveEi>:
     f24:	stp	x19, x20, [sp, #-128]!
     f28:	mov	x20, x0
     f2c:	mov	w4, w1
     f30:	stp	x21, x30, [sp, #16]
     f34:	add	x21, sp, #0x30
     f38:	ldr	w3, [x20], #8
     f3c:	mov	x1, #0x50                  	// #80
     f40:	mov	x19, x0
     f44:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     f48:	mov	x0, x21
     f4c:	add	x2, x2, #0x0
     f50:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     f54:	mov	x1, x20
     f58:	mov	x0, x21
     f5c:	mov	x3, #0x0                   	// #0
     f60:	mov	x2, #0x4000000             	// #67108864
     f64:	bl	0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>
     f68:	tst	w0, #0xff
     f6c:	b.ne	f80 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x5c>  // b.any
     f70:	mov	w0, #0x0                   	// #0
     f74:	ldp	x21, x30, [sp, #16]
     f78:	ldp	x19, x20, [sp], #128
     f7c:	ret
     f80:	ldr	x3, [x19, #24]
     f84:	cbz	x3, f70 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x4c>
     f88:	ldr	x4, [x19, #16]
     f8c:	strb	wzr, [sp, #47]
     f90:	cmp	x3, x4
     f94:	b.ls	fb0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x8c>  // b.plast
     f98:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     f9c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fa0:	add	x2, x2, #0x0
     fa4:	add	x0, x0, #0x0
     fa8:	mov	w1, #0x1be                 	// #446
     fac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fb0:	b.ne	fc8 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0xa4>  // b.any
     fb4:	add	x0, x3, #0x1
     fb8:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fbc:	mov	x1, x0
     fc0:	mov	x0, x20
     fc4:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fc8:	ldr	x0, [x20, #16]
     fcc:	mov	x2, #0x1                   	// #1
     fd0:	ldr	x3, [x19, #8]
     fd4:	add	x1, x0, #0x1
     fd8:	str	x1, [x20, #16]
     fdc:	add	x1, sp, #0x2f
     fe0:	add	x0, x3, x0
     fe4:	adrp	x20, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fe8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     fec:	add	x20, x20, #0x0
     ff0:	ldr	x0, [x19, #8]
     ff4:	mov	x1, x20
     ff8:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     ffc:	mov	x19, x0
    1000:	cbz	x0, f70 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x4c>
    1004:	mov	x0, x20
    1008:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    100c:	add	x0, x19, x0
    1010:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    1014:	cmp	w0, #0x0
    1018:	cset	w0, ne  // ne = any
    101c:	b	f74 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x50>

0000000000001020 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>:
    1020:	stp	x19, x20, [sp, #-128]!
    1024:	mov	x20, x0
    1028:	mov	x19, x1
    102c:	ldr	w0, [x0, #4]
    1030:	stp	x21, x22, [sp, #16]
    1034:	stp	x23, x24, [sp, #32]
    1038:	sxtw	x1, w0
    103c:	cmn	x1, #0x1, lsl #12
    1040:	stp	x25, x26, [sp, #48]
    1044:	stp	x27, x28, [sp, #64]
    1048:	str	x30, [sp, #80]
    104c:	b.hi	10dc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xbc>  // b.pmore
    1050:	adrp	x24, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1054:	add	x27, sp, #0x78
    1058:	add	x24, x24, #0x0
    105c:	mov	w2, #0x0                   	// #0
    1060:	mov	x1, #0x0                   	// #0
    1064:	mov	w26, #0x1                   	// #1
    1068:	bl	728 <_ZN11__sanitizer14internal_lseekEimi>
    106c:	mov	w21, #0x2                   	// #2
    1070:	str	xzr, [x19, #16]
    1074:	ldr	x1, [x20, #16]
    1078:	add	x25, x20, #0x8
    107c:	mov	x0, x25
    1080:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1084:	ldr	x3, [x20, #24]
    1088:	cmp	x3, #0xfff
    108c:	b.hi	10ac <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x8c>  // b.pmore
    1090:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1094:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1098:	add	x2, x2, #0x0
    109c:	add	x0, x0, #0x0
    10a0:	mov	x4, #0x1000                	// #4096
    10a4:	mov	w1, #0x3b5                 	// #949
    10a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    10ac:	ldr	w0, [x20, #4]
    10b0:	mov	w2, w3
    10b4:	ldr	x1, [x20, #8]
    10b8:	bl	714 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>
    10bc:	mov	x22, x0
    10c0:	cbz	x0, 10e0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xc0>
    10c4:	cmn	x0, #0x1, lsl #12
    10c8:	b.ls	1100 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xe0>  // b.plast
    10cc:	ldr	w1, [x20]
    10d0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    10d4:	add	x0, x0, #0x0
    10d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    10dc:	mov	w21, #0x0                   	// #0
    10e0:	mov	w0, w21
    10e4:	ldp	x21, x22, [sp, #16]
    10e8:	ldp	x23, x24, [sp, #32]
    10ec:	ldp	x25, x26, [sp, #48]
    10f0:	ldp	x27, x28, [sp, #64]
    10f4:	ldr	x30, [sp, #80]
    10f8:	ldp	x19, x20, [sp], #128
    10fc:	ret
    1100:	ldr	x23, [x20, #8]
    1104:	add	x28, x0, x23
    1108:	cmp	x23, x28
    110c:	b.cs	1234 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x214>  // b.hs, b.nlast
    1110:	mov	x0, x23
    1114:	ldrh	w1, [x23, #16]
    1118:	add	x23, x23, x1
    111c:	ldr	x1, [x0]
    1120:	cmp	x1, #0x1
    1124:	b.eq	1174 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x154>  // b.none
    1128:	cbz	x1, 1108 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xe8>
    112c:	ldrb	w1, [x0, #19]
    1130:	sub	w1, w1, #0x30
    1134:	and	w1, w1, #0xff
    1138:	cmp	w1, #0x9
    113c:	b.hi	1108 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xe8>  // b.pmore
    1140:	add	x0, x0, #0x13
    1144:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    1148:	ldp	x4, x3, [x19, #8]
    114c:	str	x0, [sp, #120]
    1150:	lsr	x4, x4, #3
    1154:	cmp	x3, x4
    1158:	b.ls	117c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x15c>  // b.plast
    115c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1160:	add	x2, x2, #0x0
    1164:	mov	w1, #0x1be                 	// #446
    1168:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    116c:	add	x0, x0, #0x0
    1170:	b	10a8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x88>
    1174:	mov	w21, w1
    1178:	b	112c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x10c>
    117c:	b.ne	1210 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1f0>  // b.any
    1180:	add	x0, x3, #0x1
    1184:	str	x3, [sp, #96]
    1188:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    118c:	mov	x4, x0
    1190:	ldr	x3, [sp, #96]
    1194:	cbnz	x0, 11ac <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x18c>
    1198:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    119c:	mov	x3, #0x0                   	// #0
    11a0:	add	x2, x2, #0x0
    11a4:	mov	w1, #0x1fc                 	// #508
    11a8:	b	1168 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x148>
    11ac:	cmp	x3, x0
    11b0:	b.ls	11c4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1a4>  // b.plast
    11b4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11b8:	mov	w1, #0x1fd                 	// #509
    11bc:	add	x2, x2, #0x0
    11c0:	b	1168 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x148>
    11c4:	str	x0, [sp, #96]
    11c8:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11cc:	ldr	x4, [sp, #96]
    11d0:	mov	x1, x0
    11d4:	lsl	x0, x4, #3
    11d8:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11dc:	mov	x1, x24
    11e0:	mov	w2, #0x0                   	// #0
    11e4:	str	x0, [sp, #104]
    11e8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    11ec:	ldr	x1, [x19]
    11f0:	str	x0, [sp, #96]
    11f4:	ldr	x2, [x19, #16]
    11f8:	lsl	x2, x2, #3
    11fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1200:	ldp	x0, x1, [x19]
    1204:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1208:	ldp	x4, x3, [sp, #96]
    120c:	stp	x4, x3, [x19]
    1210:	mov	x2, #0x8                   	// #8
    1214:	ldr	x0, [x19, #16]
    1218:	ldr	x3, [x19]
    121c:	add	x1, x0, #0x1
    1220:	str	x1, [x19, #16]
    1224:	mov	x1, x27
    1228:	add	x0, x3, x0, lsl #3
    122c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1230:	b	1108 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xe8>
    1234:	cbz	w26, 1254 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x234>
    1238:	ldr	x1, [x20, #24]
    123c:	sub	x0, x1, #0x400
    1240:	cmp	x0, x22
    1244:	b.cs	125c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x23c>  // b.hs, b.nlast
    1248:	lsl	x1, x1, #1
    124c:	mov	x0, x25
    1250:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1254:	mov	w21, #0x1                   	// #1
    1258:	b	1280 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x260>
    125c:	ldr	x0, [x19, #16]
    1260:	cbz	x0, 1280 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x260>
    1264:	ldr	x1, [x19]
    1268:	add	x0, x1, x0, lsl #3
    126c:	ldur	w1, [x0, #-8]
    1270:	mov	x0, x20
    1274:	bl	f24 <_ZN11__sanitizer12ThreadLister7IsAliveEi>
    1278:	tst	w0, #0xff
    127c:	b.eq	1254 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x234>  // b.none
    1280:	mov	w26, #0x0                   	// #0
    1284:	b	1074 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x54>

0000000000001288 <_ZN11__sanitizer12ThreadListerC1Ei>:
    1288:	stp	x19, x20, [sp, #-112]!
    128c:	mov	x19, x0
    1290:	mov	w0, #0xffffffff            	// #-1
    1294:	stp	x21, x30, [sp, #16]
    1298:	add	x21, x19, #0x8
    129c:	mov	w20, w1
    12a0:	stp	w1, w0, [x19]
    12a4:	mov	x0, x21
    12a8:	stp	xzr, xzr, [x19, #8]
    12ac:	mov	x1, #0x1000                	// #4096
    12b0:	str	xzr, [x19, #24]
    12b4:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    12b8:	mov	x0, x21
    12bc:	mov	x1, #0x1000                	// #4096
    12c0:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    12c4:	add	x21, sp, #0x20
    12c8:	mov	w3, w20
    12cc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    12d0:	add	x2, x2, #0x0
    12d4:	mov	x1, #0x50                  	// #80
    12d8:	mov	x0, x21
    12dc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    12e0:	mov	x0, x21
    12e4:	mov	w1, #0x4000                	// #16384
    12e8:	bl	138 <_ZN11__sanitizer13internal_openEPKci>
    12ec:	str	w0, [x19, #4]
    12f0:	sxtw	x0, w0
    12f4:	cmn	x0, #0x1, lsl #12
    12f8:	b.ls	130c <_ZN11__sanitizer12ThreadListerC1Ei+0x84>  // b.plast
    12fc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1300:	mov	w1, w20
    1304:	add	x0, x0, #0x0
    1308:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    130c:	ldp	x21, x30, [sp, #16]
    1310:	ldp	x19, x20, [sp], #112
    1314:	ret

Disassembly of section .text._ZN11__sanitizer26MostSignificantSetBitIndexEm:

0000000000000000 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>:
   0:	cbnz	x0, 28 <_ZN11__sanitizer26MostSignificantSetBitIndexEm+0x28>
   4:	str	x30, [sp, #-16]!
   8:	adrp	x2, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
   c:	adrp	x0, 0 <_ZN11__sanitizer26MostSignificantSetBitIndexEm>
  10:	add	x2, x2, #0x0
  14:	add	x0, x0, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x151                 	// #337
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	clz	x0, x0
  2c:	mov	w1, #0x3f                  	// #63
  30:	sub	w0, w1, w0
  34:	sxtw	x0, w0
  38:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   8:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
   c:	add	x2, x2, #0x0
  10:	mov	x4, #0x0                   	// #0
  14:	mov	x3, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x1, x0, #0x1
  2c:	mov	x19, x0
  30:	tst	x1, x0
  34:	b.eq	8c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x8c>  // b.none
  38:	bl	0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  3c:	add	w1, w0, #0x1
  40:	mov	x4, #0x1                   	// #1
  44:	mov	x2, x0
  48:	lsl	x0, x4, x1
  4c:	cmp	x19, x0
  50:	b.cc	6c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x6c>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	mov	x3, x19
  60:	add	x2, x2, #0x0
  64:	mov	w1, #0x17b                 	// #379
  68:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  6c:	lsl	x4, x4, x2
  70:	cmp	x19, x4
  74:	b.hi	8c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x8c>  // b.pmore
  78:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  7c:	mov	x3, x19
  80:	add	x2, x2, #0x0
  84:	mov	w1, #0x17c                 	// #380
  88:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  8c:	ldp	x19, x30, [sp], #16
  90:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	968 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	ldr	x2, [x0, #16]
  10:	str	x30, [sp, #16]
  14:	cmp	x2, x1
  18:	b.cs	44 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm+0x44>  // b.hs, b.nlast
  1c:	ldr	x2, [x0, #8]
  20:	cmp	x1, x2
  24:	b.ls	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm+0x2c>  // b.plast
  28:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE6resizeEm>
  2c:	ldr	x3, [x19]
  30:	mov	w1, #0x0                   	// #0
  34:	ldr	x0, [x19, #16]
  38:	sub	x2, x20, x0
  3c:	add	x0, x3, x0
  40:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  44:	ldr	x30, [sp, #16]
  48:	str	x20, [x19, #16]
  4c:	ldp	x19, x20, [sp], #32
  50:	ret

sanitizer_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>:
   0:	str	x30, [sp, #-160]!
   4:	mov	w0, #0x0                   	// #0
   8:	add	x1, sp, #0x10
   c:	bl	0 <getrusage>
  10:	cbnz	w0, 24 <_ZN11__sanitizerL19GetRSSFromGetrusageEv+0x24>
  14:	ldr	x0, [sp, #48]
  18:	lsl	x0, x0, #10
  1c:	ldr	x30, [sp], #160
  20:	ret
  24:	mov	x0, #0x0                   	// #0
  28:	b	1c <_ZN11__sanitizerL19GetRSSFromGetrusageEv+0x1c>

000000000000002c <_ZN11__sanitizer18internal_sigactionEiPKvPv>:
  2c:	adrp	x3, 0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
  30:	ldr	x3, [x3]
  34:	cbz	x3, 3c <_ZN11__sanitizer18internal_sigactionEiPKvPv+0x10>
  38:	b	0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
  3c:	b	0 <sigaction>

0000000000000040 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>:
  40:	stp	x19, x20, [sp, #-192]!
  44:	stp	x21, x22, [sp, #16]
  48:	stp	x23, x24, [sp, #32]
  4c:	str	x30, [sp, #48]
  50:	cbnz	x1, 74 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x34>
  54:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
  58:	add	x2, x2, #0x0
  5c:	mov	x4, #0x0                   	// #0
  60:	mov	x3, #0x0                   	// #0
  64:	mov	w1, #0x5b                  	// #91
  68:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
  6c:	add	x0, x0, #0x0
  70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  74:	mov	x20, x2
  78:	cbnz	x2, 94 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x54>
  7c:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
  80:	mov	x4, #0x0                   	// #0
  84:	add	x2, x2, #0x0
  88:	mov	x3, #0x0                   	// #0
  8c:	mov	w1, #0x5c                  	// #92
  90:	b	68 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x28>
  94:	and	w0, w0, #0xff
  98:	mov	x21, x1
  9c:	add	x23, sp, #0x40
  a0:	add	x24, sp, #0x50
  a4:	add	x22, sp, #0x70
  a8:	cbz	w0, 188 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x148>
  ac:	mov	x1, x23
  b0:	mov	w0, #0x3                   	// #3
  b4:	bl	0 <getrlimit>
  b8:	sxtw	x19, w0
  bc:	cbz	w0, d8 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x98>
  c0:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
  c4:	mov	x3, x19
  c8:	add	x2, x2, #0x0
  cc:	mov	x4, #0x0                   	// #0
  d0:	mov	w1, #0x60                  	// #96
  d4:	b	68 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x28>
  d8:	mov	x0, x24
  dc:	mov	w1, #0x1                   	// #1
  e0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
  e4:	stp	xzr, xzr, [sp, #136]
  e8:	str	xzr, [sp, #184]
  ec:	mov	x1, x22
  f0:	mov	x0, x24
  f4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
  f8:	tst	w0, #0xff
  fc:	b.eq	10c <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xcc>  // b.none
 100:	ldr	x0, [sp, #120]
 104:	cmp	x0, x23
 108:	b.ls	168 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x128>  // b.plast
 10c:	ldr	x0, [sp, #112]
 110:	cmp	x0, x23
 114:	b.hi	170 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x130>  // b.pmore
 118:	ldr	x0, [sp, #120]
 11c:	cmp	x0, x23
 120:	b.ls	170 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x130>  // b.plast
 124:	ldr	x3, [sp, #64]
 128:	mov	x1, #0x40000000            	// #1073741824
 12c:	sub	x19, x0, x19
 130:	str	x0, [x21]
 134:	cmp	x3, x1
 138:	csel	x3, x3, x1, ls  // ls = plast
 13c:	cmp	x19, x3
 140:	csel	x19, x19, x3, ls  // ls = plast
 144:	sub	x19, x0, x19
 148:	str	x19, [x20]
 14c:	mov	x0, x24
 150:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 154:	ldp	x21, x22, [sp, #16]
 158:	ldp	x23, x24, [sp, #32]
 15c:	ldr	x30, [sp, #48]
 160:	ldp	x19, x20, [sp], #192
 164:	ret
 168:	mov	x19, x0
 16c:	b	ec <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xac>
 170:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 174:	mov	x4, #0x0                   	// #0
 178:	add	x2, x2, #0x0
 17c:	mov	x3, #0x0                   	// #0
 180:	mov	w1, #0x6a                  	// #106
 184:	b	68 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x28>
 188:	mov	x0, x22
 18c:	str	xzr, [sp, #64]
 190:	str	xzr, [sp, #80]
 194:	bl	0 <pthread_attr_init>
 198:	bl	0 <pthread_self>
 19c:	mov	x1, x22
 1a0:	bl	0 <pthread_getattr_np>
 1a4:	sxtw	x3, w0
 1a8:	cbz	w0, 1c0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x180>
 1ac:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 1b0:	mov	x4, #0x0                   	// #0
 1b4:	add	x2, x2, #0x0
 1b8:	mov	w1, #0x88                  	// #136
 1bc:	b	68 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x28>
 1c0:	mov	x1, x24
 1c4:	mov	x2, x23
 1c8:	mov	x0, x22
 1cc:	bl	0 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 1d0:	mov	x0, x22
 1d4:	bl	0 <pthread_attr_destroy>
 1d8:	ldr	x0, [sp, #64]
 1dc:	ldr	x1, [sp, #80]
 1e0:	add	x0, x0, x1
 1e4:	str	x0, [x21]
 1e8:	str	x1, [x20]
 1ec:	b	154 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x114>

00000000000001f0 <_ZN11__sanitizer6SetEnvEPKcS1_>:
 1f0:	stp	x19, x20, [sp, #-48]!
 1f4:	mov	x19, x0
 1f8:	mov	x20, x1
 1fc:	mov	x0, #0xffffffffffffffff    	// #-1
 200:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 204:	add	x1, x1, #0x0
 208:	str	x30, [sp, #16]
 20c:	bl	0 <dlsym>
 210:	str	x0, [sp, #32]
 214:	cbz	x0, 250 <_ZN11__sanitizer6SetEnvEPKcS1_+0x60>
 218:	add	x1, sp, #0x20
 21c:	mov	x2, #0x8                   	// #8
 220:	add	x0, sp, #0x28
 224:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 228:	ldr	x3, [sp, #40]
 22c:	mov	x1, x20
 230:	mov	x0, x19
 234:	mov	w2, #0x1                   	// #1
 238:	blr	x3
 23c:	cmp	w0, #0x0
 240:	cset	w0, eq  // eq = none
 244:	ldr	x30, [sp, #16]
 248:	ldp	x19, x20, [sp], #48
 24c:	ret
 250:	mov	w0, #0x0                   	// #0
 254:	b	244 <_ZN11__sanitizer6SetEnvEPKcS1_+0x54>

0000000000000258 <_ZN11__sanitizer11InitTlsSizeEv>:
 258:	str	x30, [sp, #-48]!
 25c:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 260:	mov	x0, #0xffffffffffffffff    	// #-1
 264:	add	x1, x1, #0x0
 268:	bl	0 <dlsym>
 26c:	stp	xzr, xzr, [sp, #16]
 270:	mov	x2, #0x8                   	// #8
 274:	add	x1, sp, #0x20
 278:	str	x0, [sp, #32]
 27c:	add	x0, sp, #0x28
 280:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 284:	ldr	x2, [sp, #40]
 288:	cbnz	x2, 2ac <_ZN11__sanitizer11InitTlsSizeEv+0x54>
 28c:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 290:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 294:	add	x2, x2, #0x0
 298:	add	x0, x0, #0x0
 29c:	mov	x4, #0x0                   	// #0
 2a0:	mov	x3, #0x0                   	// #0
 2a4:	mov	w1, #0xd4                  	// #212
 2a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2ac:	add	x0, sp, #0x10
 2b0:	add	x1, sp, #0x18
 2b4:	blr	x2
 2b8:	ldr	x0, [sp, #24]
 2bc:	cmp	x0, #0xf
 2c0:	b.hi	2cc <_ZN11__sanitizer11InitTlsSizeEv+0x74>  // b.pmore
 2c4:	mov	x0, #0x10                  	// #16
 2c8:	str	x0, [sp, #24]
 2cc:	ldp	x0, x1, [sp, #16]
 2d0:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 2d4:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 2d8:	str	x0, [x1]
 2dc:	ldr	x30, [sp], #48
 2e0:	ret

00000000000002e4 <_ZN11__sanitizer20ThreadDescriptorSizeEv>:
 2e4:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 2e8:	add	x1, x1, #0x0
 2ec:	ldr	x0, [x1, #8]
 2f0:	cbnz	x0, 2fc <_ZN11__sanitizer20ThreadDescriptorSizeEv+0x18>
 2f4:	mov	x0, #0x6f0                 	// #1776
 2f8:	str	x0, [x1, #8]
 2fc:	ret

0000000000000300 <_ZN11__sanitizer16ThreadSelfOffsetEv>:
 300:	mov	x0, #0x10                  	// #16
 304:	ret

0000000000000308 <_ZN11__sanitizer10ThreadSelfEv>:
 308:	str	x30, [sp, #-16]!
 30c:	bl	2e4 <_ZN11__sanitizer20ThreadDescriptorSizeEv>
 310:	mrs	x1, tpidr_el0
 314:	sub	x0, x1, x0
 318:	ldr	x30, [sp], #16
 31c:	ret

0000000000000320 <_ZN11__sanitizer10GetTlsSizeEv>:
 320:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 324:	ldr	x0, [x0]
 328:	ret

000000000000032c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>:
 32c:	stp	x19, x20, [sp, #-64]!
 330:	mov	x20, x1
 334:	mov	x19, x3
 338:	stp	x21, x22, [sp, #16]
 33c:	mov	x21, x2
 340:	mov	x22, x4
 344:	stp	x23, x30, [sp, #32]
 348:	and	w23, w0, #0xff
 34c:	bl	308 <_ZN11__sanitizer10ThreadSelfEv>
 350:	str	x0, [x3]
 354:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 358:	add	x1, sp, #0x30
 35c:	add	x2, sp, #0x38
 360:	ldr	x0, [x0]
 364:	str	x0, [x4]
 368:	mov	w0, w23
 36c:	bl	40 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 370:	ldp	x0, x1, [sp, #48]
 374:	str	x1, [x20]
 378:	sub	x0, x0, x1
 37c:	str	x0, [x21]
 380:	cbnz	w23, 3f8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>
 384:	ldr	x5, [x19]
 388:	ldr	x1, [x20]
 38c:	cmp	x5, x1
 390:	b.ls	3f8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>  // b.plast
 394:	add	x4, x0, x1
 398:	cmp	x5, x4
 39c:	b.cs	3f8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>  // b.hs, b.nlast
 3a0:	ldr	x2, [x22]
 3a4:	add	x3, x5, x2
 3a8:	cmp	x1, x3
 3ac:	b.cc	3cc <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xa0>  // b.lo, b.ul, b.last
 3b0:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 3b4:	add	x2, x2, #0x0
 3b8:	mov	x4, x1
 3bc:	mov	w1, #0x203                 	// #515
 3c0:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 3c4:	add	x0, x0, #0x0
 3c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3cc:	cmp	x4, x3
 3d0:	b.cs	3e4 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xb8>  // b.hs, b.nlast
 3d4:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 3d8:	mov	w1, #0x204                 	// #516
 3dc:	add	x2, x2, #0x0
 3e0:	b	3c0 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0x94>
 3e4:	sub	x0, x0, x2
 3e8:	str	x0, [x21]
 3ec:	ldr	x1, [x20]
 3f0:	add	x0, x1, x0
 3f4:	str	x0, [x19]
 3f8:	ldp	x21, x22, [sp, #16]
 3fc:	ldp	x23, x30, [sp, #32]
 400:	ldp	x19, x20, [sp], #64
 404:	ret

0000000000000408 <_ZN11__sanitizer6GetRSSEv>:
 408:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 40c:	stp	x19, x20, [sp, #-96]!
 410:	ldr	x0, [x0]
 414:	stp	x21, x30, [sp, #16]
 418:	ldrb	w0, [x0, #160]
 41c:	cbnz	w0, 430 <_ZN11__sanitizer6GetRSSEv+0x28>
 420:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 424:	ldp	x21, x30, [sp, #16]
 428:	ldp	x19, x20, [sp], #96
 42c:	ret
 430:	mov	x2, #0x0                   	// #0
 434:	mov	w1, #0x0                   	// #0
 438:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 43c:	add	x0, x0, #0x0
 440:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 444:	mov	w21, w0
 448:	cmn	w0, #0x1
 44c:	b.eq	420 <_ZN11__sanitizer6GetRSSEv+0x18>  // b.none
 450:	add	x19, sp, #0x20
 454:	mov	x2, #0x3f                  	// #63
 458:	mov	x1, x19
 45c:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 460:	mov	x20, x0
 464:	mov	w0, w21
 468:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 46c:	cmp	x20, #0x0
 470:	b.le	4f4 <_ZN11__sanitizer6GetRSSEv+0xec>
 474:	mov	x1, x19
 478:	strb	wzr, [x19, x20]
 47c:	ldrb	w0, [x1]
 480:	sub	w0, w0, #0x30
 484:	and	w0, w0, #0xff
 488:	cmp	w0, #0x9
 48c:	b.hi	498 <_ZN11__sanitizer6GetRSSEv+0x90>  // b.pmore
 490:	add	x1, x1, #0x1
 494:	b	47c <_ZN11__sanitizer6GetRSSEv+0x74>
 498:	ldrb	w2, [x1]
 49c:	sub	w0, w2, #0x30
 4a0:	cmp	w2, #0x0
 4a4:	and	w0, w0, #0xff
 4a8:	ccmp	w0, #0x9, #0x0, ne  // ne = any
 4ac:	b.ls	4b8 <_ZN11__sanitizer6GetRSSEv+0xb0>  // b.plast
 4b0:	add	x1, x1, #0x1
 4b4:	b	498 <_ZN11__sanitizer6GetRSSEv+0x90>
 4b8:	mov	x19, #0x0                   	// #0
 4bc:	mov	x3, #0xa                   	// #10
 4c0:	ldrb	w2, [x1]
 4c4:	sub	w0, w2, #0x30
 4c8:	and	w0, w0, #0xff
 4cc:	cmp	w0, #0x9
 4d0:	b.hi	4e8 <_ZN11__sanitizer6GetRSSEv+0xe0>  // b.pmore
 4d4:	mul	x0, x19, x3
 4d8:	add	x1, x1, #0x1
 4dc:	sub	x0, x0, #0x30
 4e0:	add	x19, x0, w2, uxtb
 4e4:	b	4c0 <_ZN11__sanitizer6GetRSSEv+0xb8>
 4e8:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 4ec:	mul	x0, x0, x19
 4f0:	b	424 <_ZN11__sanitizer6GetRSSEv+0x1c>
 4f4:	mov	x0, #0x0                   	// #0
 4f8:	b	424 <_ZN11__sanitizer6GetRSSEv+0x1c>

00000000000004fc <_ZN11__sanitizer15GetNumberOfCPUsEv>:
 4fc:	stp	x19, x30, [sp, #-144]!
 500:	mov	x1, #0x80                  	// #128
 504:	mov	w0, #0x0                   	// #0
 508:	add	x19, sp, #0x10
 50c:	mov	x2, x19
 510:	bl	0 <sched_getaffinity>
 514:	cbz	w0, 538 <_ZN11__sanitizer15GetNumberOfCPUsEv+0x3c>
 518:	sxtw	x3, w0
 51c:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 520:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 524:	add	x2, x2, #0x0
 528:	add	x0, x0, #0x0
 52c:	mov	x4, #0x0                   	// #0
 530:	mov	w1, #0x2bb                 	// #699
 534:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 538:	mov	x1, x19
 53c:	mov	x0, #0x80                  	// #128
 540:	bl	0 <__sched_cpucount>
 544:	ldp	x19, x30, [sp], #144
 548:	ret

000000000000054c <_ZN11__sanitizer14AndroidLogInitEv>:
 54c:	ret

0000000000000550 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>:
 550:	mov	x2, x0
 554:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 558:	mov	w0, #0x6                   	// #6
 55c:	add	x1, x1, #0x0
 560:	b	0 <syslog>

0000000000000564 <_ZN11__sanitizer15SetAbortMessageEPKc>:
 564:	ret

0000000000000568 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>:
 568:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 56c:	ldr	x1, [x1]
 570:	ldrb	w1, [x1, #49]
 574:	cbz	w1, 57c <_ZN11__sanitizer18LogMessageOnPrintfEPKc+0x14>
 578:	b	0 <_ZN11__sanitizer13WriteToSyslogEPKc>
 57c:	ret

0000000000000580 <_ZN11__sanitizer17MonotonicNanoTimeEv>:
 580:	adrp	x0, 0 <__progname>
 584:	str	x30, [sp, #-32]!
 588:	ldr	x0, [x0]
 58c:	add	x1, sp, #0x10
 590:	cbz	x0, 5dc <_ZN11__sanitizer17MonotonicNanoTimeEv+0x5c>
 594:	ldr	x0, [x0]
 598:	cbz	x0, 5dc <_ZN11__sanitizer17MonotonicNanoTimeEv+0x5c>
 59c:	ldrb	w0, [x0]
 5a0:	cbz	w0, 5dc <_ZN11__sanitizer17MonotonicNanoTimeEv+0x5c>
 5a4:	adrp	x0, 0 <real_clock_gettime>
 5a8:	ldr	x0, [x0]
 5ac:	cbz	x0, 5d0 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x50>
 5b0:	mov	w0, #0x1                   	// #1
 5b4:	bl	0 <real_clock_gettime>
 5b8:	ldp	x2, x1, [sp, #16]
 5bc:	mov	x0, #0xca00                	// #51712
 5c0:	movk	x0, #0x3b9a, lsl #16
 5c4:	ldr	x30, [sp], #32
 5c8:	madd	x0, x2, x0, x1
 5cc:	ret
 5d0:	mov	w0, #0x1                   	// #1
 5d4:	bl	0 <clock_gettime>
 5d8:	b	5b8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x38>
 5dc:	mov	w0, #0x1                   	// #1
 5e0:	bl	0 <_ZN11__sanitizer22internal_clock_gettimeEiPv>
 5e4:	b	5b8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x38>

00000000000005e8 <_ZN11__sanitizer13ListOfModules4initEv>:
 5e8:	stp	x19, x30, [sp, #-32]!
 5ec:	mov	x19, x0
 5f0:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 5f4:	str	x19, [sp, #16]
 5f8:	mov	w0, #0x1                   	// #1
 5fc:	add	x1, sp, #0x10
 600:	strb	w0, [sp, #24]
 604:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 608:	add	x0, x0, #0x0
 60c:	stur	wzr, [sp, #25]
 610:	sturh	wzr, [sp, #29]
 614:	strb	wzr, [sp, #31]
 618:	bl	0 <dl_iterate_phdr>
 61c:	ldp	x19, x30, [sp], #32
 620:	ret

0000000000000624 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>:
 624:	stp	x19, x20, [sp, #-64]!
 628:	mov	x20, x0
 62c:	add	x19, sp, #0x20
 630:	str	x30, [sp, #16]
 634:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 638:	mov	x0, x19
 63c:	mov	w1, #0x1                   	// #1
 640:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 644:	mov	x1, x20
 648:	mov	x0, x19
 64c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 650:	mov	x0, x19
 654:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 658:	ldr	x30, [sp, #16]
 65c:	ldp	x19, x20, [sp], #64
 660:	ret

0000000000000664 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>:
 664:	stp	x19, x20, [sp, #-160]!
 668:	mov	x1, #0x1000                	// #4096
 66c:	mov	x19, x0
 670:	stp	x21, x22, [sp, #16]
 674:	add	x21, sp, #0x38
 678:	mov	x0, x21
 67c:	mov	x20, x2
 680:	stp	x23, x30, [sp, #32]
 684:	stp	xzr, xzr, [sp, #56]
 688:	str	xzr, [sp, #72]
 68c:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 690:	ldr	x0, [sp, #72]
 694:	cmp	x0, #0xfff
 698:	b.hi	6d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x6c>  // b.pmore
 69c:	ldr	x0, [sp, #64]
 6a0:	cmp	x0, #0xfff
 6a4:	b.hi	6b4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x50>  // b.pmore
 6a8:	mov	x0, x21
 6ac:	mov	x1, #0x1000                	// #4096
 6b0:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 6b4:	ldr	x3, [sp, #56]
 6b8:	mov	x2, #0x1000                	// #4096
 6bc:	ldr	x0, [sp, #72]
 6c0:	mov	w1, #0x0                   	// #0
 6c4:	sub	x2, x2, x0
 6c8:	add	x0, x3, x0
 6cc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 6d0:	mov	x0, #0x1000                	// #4096
 6d4:	mov	x1, #0x0                   	// #0
 6d8:	stp	x0, xzr, [sp, #72]
 6dc:	mov	x0, x21
 6e0:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 6e4:	strb	wzr, [x0]
 6e8:	ldrb	w0, [x20, #8]
 6ec:	cbz	w0, 7b0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x14c>
 6f0:	ldr	x0, [sp, #56]
 6f4:	strb	wzr, [x20, #8]
 6f8:	ldr	x1, [sp, #72]
 6fc:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 700:	mov	x0, x21
 704:	mov	x1, #0x0                   	// #0
 708:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 70c:	ldrb	w0, [x0]
 710:	cbz	w0, 834 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1d0>
 714:	add	x21, sp, #0x58
 718:	mov	x2, #0x10                  	// #16
 71c:	mov	w1, #0x0                   	// #0
 720:	add	x0, x21, #0x1c
 724:	stp	xzr, xzr, [sp, #88]
 728:	mov	x22, #0x0                   	// #0
 72c:	mov	x23, #0x38                  	// #56
 730:	str	xzr, [sp, #104]
 734:	str	wzr, [sp, #112]
 738:	strb	wzr, [sp, #132]
 73c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 740:	ldr	x2, [x19]
 744:	mov	x0, x21
 748:	ldr	x1, [sp, #56]
 74c:	stp	xzr, xzr, [sp, #136]
 750:	str	xzr, [sp, #152]
 754:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 758:	ldrh	w0, [x19, #24]
 75c:	cmp	w0, w22
 760:	b.le	7cc <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x168>
 764:	mul	x0, x22, x23
 768:	ldr	x1, [x19, #16]
 76c:	add	x2, x1, x0
 770:	ldr	w0, [x1, x0]
 774:	cmp	w0, #0x1
 778:	b.ne	7a8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x144>  // b.any
 77c:	ldr	x1, [x19]
 780:	mov	x5, #0x0                   	// #0
 784:	ldr	x0, [x2, #16]
 788:	ldr	w3, [x2, #4]
 78c:	ldr	x2, [x2, #40]
 790:	add	x1, x1, x0
 794:	ubfx	x4, x3, #1, #1
 798:	mov	x0, x21
 79c:	and	w3, w3, #0x1
 7a0:	add	x2, x1, x2
 7a4:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 7a8:	add	x22, x22, #0x1
 7ac:	b	758 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xf4>
 7b0:	ldr	x2, [x19, #8]
 7b4:	cbz	x2, 700 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x9c>
 7b8:	mov	x0, x21
 7bc:	adrp	x1, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 7c0:	add	x1, x1, #0x0
 7c4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 7c8:	b	700 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x9c>
 7cc:	ldr	x19, [x20]
 7d0:	mov	x0, #0x48                  	// #72
 7d4:	ldp	x4, x3, [x19, #8]
 7d8:	udiv	x4, x4, x0
 7dc:	cmp	x3, x4
 7e0:	b.ls	7fc <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x198>  // b.plast
 7e4:	adrp	x2, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 7e8:	adrp	x0, 0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 7ec:	add	x2, x2, #0x0
 7f0:	add	x0, x0, #0x0
 7f4:	mov	w1, #0x1be                 	// #446
 7f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7fc:	b.ne	814 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1b0>  // b.any
 800:	add	x0, x3, #0x1
 804:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 808:	mov	x1, x0
 80c:	mov	x0, x19
 810:	bl	0 <_ZN11__sanitizerL19GetRSSFromGetrusageEv>
 814:	ldr	x3, [x19]
 818:	mov	x2, #0x48                  	// #72
 81c:	ldr	x0, [x19, #16]
 820:	add	x1, x0, #0x1
 824:	str	x1, [x19, #16]
 828:	madd	x0, x0, x2, x3
 82c:	mov	x1, x21
 830:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 834:	ldp	x0, x1, [sp, #56]
 838:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 83c:	mov	w0, #0x0                   	// #0
 840:	ldp	x21, x22, [sp, #16]
 844:	ldp	x23, x30, [sp, #32]
 848:	ldp	x19, x20, [sp], #160
 84c:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x3, x0
   8:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   c:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x0, x0, #0x1
  2c:	tst	x0, x3
  30:	b.eq	84 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x84>  // b.none
  34:	clz	x1, x3
  38:	mov	w4, #0x3f                  	// #63
  3c:	sub	w1, w4, w1
  40:	mov	x4, #0x1                   	// #1
  44:	add	w0, w1, #0x1
  48:	lsl	x0, x4, x0
  4c:	cmp	x3, x0
  50:	b.cc	68 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x68>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x17b                 	// #379
  64:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  68:	lsl	x4, x4, x1
  6c:	cmp	x3, x4
  70:	b.hi	88 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x88>  // b.pmore
  74:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  78:	mov	w1, #0x17c                 	// #380
  7c:	add	x2, x2, #0x0
  80:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  84:	mov	x0, x3
  88:	ldr	x30, [sp], #16
  8c:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x19, x0
  38:	mov	x20, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm+0x24>
  58:	mov	x22, #0x48                  	// #72
  5c:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  60:	mov	x1, x0
  64:	mul	x0, x20, x22
  68:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  6c:	mov	x20, x0
  70:	mov	w2, #0x0                   	// #0
  74:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_12LoadedModuleEE7ReallocEm>
  78:	add	x1, x1, #0x0
  7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  80:	ldr	x2, [x19, #16]
  84:	mov	x21, x0
  88:	ldr	x1, [x19]
  8c:	mul	x2, x2, x22
  90:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  94:	ldp	x0, x1, [x19]
  98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  9c:	ldr	x30, [sp, #32]
  a0:	stp	x21, x20, [x19]
  a4:	ldp	x21, x22, [sp, #16]
  a8:	ldp	x19, x20, [sp], #48
  ac:	ret

Disassembly of section .text._ZN11__sanitizer13ListOfModules11clearOrInitEv:

0000000000000000 <_ZN11__sanitizer13ListOfModules11clearOrInitEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	ldrb	w1, [x0, #24]
   c:	stp	x21, x30, [sp, #16]
  10:	cbz	w1, 54 <_ZN11__sanitizer13ListOfModules11clearOrInitEv+0x54>
  14:	ldr	x20, [x19]
  18:	mov	x0, #0x48                  	// #72
  1c:	ldr	x21, [x19, #16]
  20:	madd	x21, x21, x0, x20
  24:	cmp	x21, x20
  28:	b.eq	3c <_ZN11__sanitizer13ListOfModules11clearOrInitEv+0x3c>  // b.none
  2c:	mov	x0, x20
  30:	add	x20, x20, #0x48
  34:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
  38:	b	24 <_ZN11__sanitizer13ListOfModules11clearOrInitEv+0x24>
  3c:	str	xzr, [x19, #16]
  40:	mov	w0, #0x1                   	// #1
  44:	strb	w0, [x19, #24]
  48:	ldp	x21, x30, [sp, #16]
  4c:	ldp	x19, x20, [sp], #32
  50:	ret
  54:	stp	xzr, xzr, [x0]
  58:	mov	x1, #0x4000                	// #16384
  5c:	str	xzr, [x0, #16]
  60:	bl	0 <_ZN11__sanitizer13ListOfModules11clearOrInitEv>
  64:	b	40 <_ZN11__sanitizer13ListOfModules11clearOrInitEv+0x40>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

sanitizer_linux_s390.o:     file format elf64-littleaarch64


sanitizer_mac.o:     file format elf64-littleaarch64


sanitizer_mac_libcdep.o:     file format elf64-littleaarch64


sanitizer_netbsd.o:     file format elf64-littleaarch64


sanitizer_openbsd.o:     file format elf64-littleaarch64


sanitizer_persistent_allocator.o:     file format elf64-littleaarch64


sanitizer_platform_limits_linux.o:     file format elf64-littleaarch64


sanitizer_platform_limits_openbsd.o:     file format elf64-littleaarch64


sanitizer_platform_limits_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22__sanitizer_in_addr_szEi>:
   0:	cmp	w0, #0x2
   4:	b.eq	18 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x18>  // b.none
   8:	cmp	w0, #0xa
   c:	cset	x0, eq  // eq = none
  10:	lsl	x0, x0, #4
  14:	ret
  18:	mov	x0, #0x4                   	// #4
  1c:	b	14 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x14>

sanitizer_platform_limits_solaris.o:     file format elf64-littleaarch64


sanitizer_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18GetMmapGranularityEv>:
   0:	b	0 <_ZN11__sanitizer11GetPageSizeEv>

0000000000000004 <_ZN11__sanitizer9MmapOrDieEmPKcb>:
   4:	stp	x19, x20, [sp, #-64]!
   8:	mov	x19, x0
   c:	stp	x21, x22, [sp, #16]
  10:	and	w22, w2, #0xff
  14:	mov	x21, x1
  18:	str	x30, [sp, #32]
  1c:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
  20:	mov	x1, x0
  24:	mov	x0, x19
  28:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
  2c:	mov	x1, x0
  30:	mov	x5, #0x0                   	// #0
  34:	mov	w4, #0xffffffff            	// #-1
  38:	mov	w3, #0x22                  	// #34
  3c:	mov	w2, #0x3                   	// #3
  40:	mov	x19, x0
  44:	mov	x0, #0x0                   	// #0
  48:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
  4c:	mov	x20, x0
  50:	add	x1, sp, #0x3c
  54:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
  58:	tst	w0, #0xff
  5c:	b.eq	7c <_ZN11__sanitizer9MmapOrDieEmPKcb+0x78>  // b.none
  60:	ldr	w3, [sp, #60]
  64:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  68:	mov	w4, w22
  6c:	add	x2, x2, #0x0
  70:	mov	x1, x21
  74:	mov	x0, x19
  78:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  7c:	mov	x0, x19
  80:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
  84:	mov	x0, x20
  88:	ldp	x21, x22, [sp, #16]
  8c:	ldr	x30, [sp, #32]
  90:	ldp	x19, x20, [sp], #64
  94:	ret

0000000000000098 <_ZN11__sanitizer10UnmapOrDieEPvm>:
  98:	cmp	x0, #0x0
  9c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
  a0:	b.eq	11c <_ZN11__sanitizer10UnmapOrDieEPvm+0x84>  // b.none
  a4:	stp	x19, x20, [sp, #-32]!
  a8:	mov	x19, x1
  ac:	mov	x20, x0
  b0:	str	x30, [sp, #16]
  b4:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
  b8:	mov	x1, #0x0                   	// #0
  bc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
  c0:	tst	w0, #0xff
  c4:	b.eq	10c <_ZN11__sanitizer10UnmapOrDieEPvm+0x74>  // b.none
  c8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  cc:	mov	x4, x20
  d0:	mov	x3, x19
  d4:	mov	x2, x19
  d8:	ldr	x0, [x0]
  dc:	ldr	x1, [x0]
  e0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  e4:	add	x0, x0, #0x0
  e8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  ec:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  f0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
  f4:	add	x2, x2, #0x0
  f8:	add	x0, x0, #0x0
  fc:	mov	x4, #0x0                   	// #0
 100:	mov	x3, #0x0                   	// #0
 104:	mov	w1, #0x3c                  	// #60
 108:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 10c:	mov	x0, x19
 110:	ldr	x30, [sp, #16]
 114:	ldp	x19, x20, [sp], #32
 118:	b	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
 11c:	ret

0000000000000120 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>:
 120:	stp	x19, x20, [sp, #-48]!
 124:	mov	x19, x0
 128:	stp	x21, x30, [sp, #16]
 12c:	mov	x21, x1
 130:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 134:	mov	x1, x0
 138:	mov	x0, x19
 13c:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 140:	mov	x1, x0
 144:	mov	x5, #0x0                   	// #0
 148:	mov	w4, #0xffffffff            	// #-1
 14c:	mov	w3, #0x22                  	// #34
 150:	mov	w2, #0x3                   	// #3
 154:	mov	x20, x0
 158:	mov	x0, #0x0                   	// #0
 15c:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 160:	mov	x19, x0
 164:	add	x1, sp, #0x2c
 168:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 16c:	tst	w0, #0xff
 170:	b.eq	19c <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x7c>  // b.none
 174:	ldr	w3, [sp, #44]
 178:	mov	x0, #0x0                   	// #0
 17c:	cmp	w3, #0xc
 180:	b.eq	1a8 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x88>  // b.none
 184:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 188:	mov	x1, x21
 18c:	add	x2, x2, #0x0
 190:	mov	x0, x20
 194:	mov	w4, #0x0                   	// #0
 198:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 19c:	mov	x0, x20
 1a0:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 1a4:	mov	x0, x19
 1a8:	ldp	x21, x30, [sp, #16]
 1ac:	ldp	x19, x20, [sp], #48
 1b0:	ret

00000000000001b4 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>:
 1b4:	stp	x19, x20, [sp, #-48]!
 1b8:	mov	x20, x0
 1bc:	sub	x0, x0, #0x1
 1c0:	stp	x21, x22, [sp, #16]
 1c4:	tst	x0, x20
 1c8:	stp	x23, x30, [sp, #32]
 1cc:	b.eq	1f0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x3c>  // b.none
 1d0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 1d4:	add	x2, x2, #0x0
 1d8:	mov	x4, #0x0                   	// #0
 1dc:	mov	x3, #0x0                   	// #0
 1e0:	mov	w1, #0x55                  	// #85
 1e4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1f0:	sub	x21, x1, #0x1
 1f4:	mov	x22, x1
 1f8:	tst	x1, x21
 1fc:	b.eq	218 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x64>  // b.none
 200:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 204:	mov	x4, #0x0                   	// #0
 208:	add	x2, x2, #0x0
 20c:	mov	x3, #0x0                   	// #0
 210:	mov	w1, #0x56                  	// #86
 214:	b	1e4 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x30>
 218:	add	x23, x20, x22
 21c:	mov	x1, x2
 220:	mov	x0, x23
 224:	bl	120 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 228:	mov	x19, x0
 22c:	cbz	x0, 268 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xb4>
 230:	add	x23, x23, x0
 234:	tst	x0, x21
 238:	b.eq	254 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xa0>  // b.none
 23c:	add	x21, x0, x21
 240:	neg	x22, x22
 244:	and	x21, x21, x22
 248:	mov	x19, x21
 24c:	sub	x1, x21, x0
 250:	bl	98 <_ZN11__sanitizer10UnmapOrDieEPvm>
 254:	add	x0, x19, x20
 258:	cmp	x23, x0
 25c:	b.eq	268 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xb4>  // b.none
 260:	sub	x1, x23, x0
 264:	bl	98 <_ZN11__sanitizer10UnmapOrDieEPvm>
 268:	mov	x0, x19
 26c:	ldp	x21, x22, [sp, #16]
 270:	ldp	x23, x30, [sp, #32]
 274:	ldp	x19, x20, [sp], #48
 278:	ret

000000000000027c <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc>:
 27c:	stp	x19, x20, [sp, #-48]!
 280:	mov	x19, x0
 284:	stp	x21, x30, [sp, #16]
 288:	mov	x21, x1
 28c:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 290:	mov	x1, x0
 294:	mov	x0, x19
 298:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 29c:	mov	x1, x0
 2a0:	mov	x5, #0x0                   	// #0
 2a4:	mov	w4, #0xffffffff            	// #-1
 2a8:	mov	w3, #0x4022                	// #16418
 2ac:	mov	w2, #0x3                   	// #3
 2b0:	mov	x0, #0x0                   	// #0
 2b4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 2b8:	add	x1, sp, #0x2c
 2bc:	mov	x20, x0
 2c0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 2c4:	tst	w0, #0xff
 2c8:	b.eq	2e8 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x6c>  // b.none
 2cc:	ldr	w3, [sp, #44]
 2d0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 2d4:	mov	x1, x21
 2d8:	add	x2, x2, #0x0
 2dc:	mov	x0, x19
 2e0:	mov	w4, #0x0                   	// #0
 2e4:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 2e8:	mov	x0, x19
 2ec:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 2f0:	mov	x0, x20
 2f4:	ldp	x21, x30, [sp, #16]
 2f8:	ldp	x19, x20, [sp], #48
 2fc:	ret

0000000000000300 <_ZN11__sanitizer13MmapFixedImplEmmb>:
 300:	stp	x19, x20, [sp, #-96]!
 304:	mov	x20, x1
 308:	stp	x21, x22, [sp, #16]
 30c:	and	w22, w2, #0xff
 310:	mov	x21, x0
 314:	str	x30, [sp, #32]
 318:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 31c:	mov	x1, x0
 320:	mov	x19, x0
 324:	mov	x0, x20
 328:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 32c:	neg	x19, x19
 330:	mov	x5, #0x0                   	// #0
 334:	mov	w4, #0xffffffff            	// #-1
 338:	mov	w3, #0x32                  	// #50
 33c:	mov	w2, #0x3                   	// #3
 340:	mov	x1, x0
 344:	and	x0, x19, x21
 348:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 34c:	add	x1, sp, #0x34
 350:	mov	x19, x0
 354:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 358:	tst	w0, #0xff
 35c:	b.eq	3bc <_ZN11__sanitizer13MmapFixedImplEmmb+0xbc>  // b.none
 360:	cbz	w22, 384 <_ZN11__sanitizer13MmapFixedImplEmmb+0x84>
 364:	ldr	w0, [sp, #52]
 368:	cmp	w0, #0xc
 36c:	b.ne	384 <_ZN11__sanitizer13MmapFixedImplEmmb+0x84>  // b.any
 370:	mov	x0, #0x0                   	// #0
 374:	ldp	x21, x22, [sp, #16]
 378:	ldr	x30, [sp, #32]
 37c:	ldp	x19, x20, [sp], #96
 380:	ret
 384:	add	x19, sp, #0x38
 388:	mov	x3, x21
 38c:	mov	x1, #0x28                  	// #40
 390:	mov	x0, x19
 394:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 398:	add	x2, x2, #0x0
 39c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 3a0:	ldr	w3, [sp, #52]
 3a4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 3a8:	mov	x1, x19
 3ac:	add	x2, x2, #0x0
 3b0:	mov	x0, x20
 3b4:	mov	w4, #0x0                   	// #0
 3b8:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 3bc:	mov	x0, x20
 3c0:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 3c4:	mov	x0, x19
 3c8:	b	374 <_ZN11__sanitizer13MmapFixedImplEmmb+0x74>

00000000000003cc <_ZN11__sanitizer14MmapFixedOrDieEmm>:
 3cc:	mov	w2, #0x0                   	// #0
 3d0:	b	300 <_ZN11__sanitizer13MmapFixedImplEmmb>

00000000000003d4 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>:
 3d4:	mov	w2, #0x1                   	// #1
 3d8:	b	300 <_ZN11__sanitizer13MmapFixedImplEmmb>

00000000000003dc <_ZN11__sanitizer16MprotectNoAccessEmm>:
 3dc:	str	x30, [sp, #-16]!
 3e0:	mov	w2, #0x0                   	// #0
 3e4:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 3e8:	cmp	w0, #0x0
 3ec:	cset	w0, eq  // eq = none
 3f0:	ldr	x30, [sp], #16
 3f4:	ret

00000000000003f8 <_ZN11__sanitizer16MprotectReadOnlyEmm>:
 3f8:	str	x30, [sp, #-16]!
 3fc:	mov	w2, #0x1                   	// #1
 400:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
 404:	cmp	w0, #0x0
 408:	cset	w0, eq  // eq = none
 40c:	ldr	x30, [sp], #16
 410:	ret

0000000000000414 <_ZN11__sanitizer19MprotectMallocZonesEPvi>:
 414:	ret

0000000000000418 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>:
 418:	stp	x19, x20, [sp, #-32]!
 41c:	cmp	w1, #0x2
 420:	mov	x20, x2
 424:	str	x30, [sp, #16]
 428:	b.hi	438 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x20>  // b.pmore
 42c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 430:	add	x2, x2, #0x0
 434:	ldrsh	w3, [x2, w1, uxtw #1]
 438:	mov	w2, #0x1b0                 	// #432
 43c:	mov	w1, w3
 440:	bl	0 <_ZN11__sanitizer13internal_openEPKcij>
 444:	mov	x19, x0
 448:	mov	x1, x20
 44c:	sxtw	x0, w0
 450:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 454:	tst	w0, #0xff
 458:	csinv	w0, w19, wzr, eq  // eq = none
 45c:	ldr	x30, [sp, #16]
 460:	ldp	x19, x20, [sp], #32
 464:	ret

0000000000000468 <_ZN11__sanitizer9CloseFileEi>:
 468:	b	0 <_ZN11__sanitizer14internal_closeEi>

000000000000046c <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>:
 46c:	stp	x19, x20, [sp, #-32]!
 470:	mov	x19, x3
 474:	stp	x21, x30, [sp, #16]
 478:	mov	x21, x4
 47c:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 480:	mov	x1, x21
 484:	mov	x20, x0
 488:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 48c:	tst	w0, #0xff
 490:	b.ne	4a4 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x38>  // b.any
 494:	cbz	x19, 49c <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x30>
 498:	str	x20, [x19]
 49c:	mov	w0, #0x1                   	// #1
 4a0:	b	4a8 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x3c>
 4a4:	mov	w0, #0x0                   	// #0
 4a8:	ldp	x21, x30, [sp, #16]
 4ac:	ldp	x19, x20, [sp], #32
 4b0:	ret

00000000000004b4 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>:
 4b4:	stp	x19, x20, [sp, #-32]!
 4b8:	mov	x19, x3
 4bc:	stp	x21, x30, [sp, #16]
 4c0:	mov	x21, x4
 4c4:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 4c8:	mov	x1, x21
 4cc:	mov	x20, x0
 4d0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 4d4:	tst	w0, #0xff
 4d8:	b.ne	4ec <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x38>  // b.any
 4dc:	cbz	x19, 4e4 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x30>
 4e0:	str	x20, [x19]
 4e4:	mov	w0, #0x1                   	// #1
 4e8:	b	4f0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x3c>
 4ec:	mov	w0, #0x0                   	// #0
 4f0:	ldp	x21, x30, [sp, #16]
 4f4:	ldp	x19, x20, [sp], #32
 4f8:	ret

00000000000004fc <_ZN11__sanitizer10RenameFileEPKcS1_Pi>:
 4fc:	stp	x19, x30, [sp, #-16]!
 500:	mov	x19, x2
 504:	bl	0 <_ZN11__sanitizer15internal_renameEPKcS1_>
 508:	mov	x1, x19
 50c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 510:	and	w0, w0, #0xff
 514:	eor	w0, w0, #0x1
 518:	ldp	x19, x30, [sp], #16
 51c:	ret

0000000000000520 <_ZN11__sanitizer15MapFileToMemoryEPKcPm>:
 520:	stp	x19, x20, [sp, #-32]!
 524:	mov	x2, #0x0                   	// #0
 528:	stp	x21, x30, [sp, #16]
 52c:	mov	x21, x1
 530:	mov	w1, #0x0                   	// #0
 534:	bl	418 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 538:	cmn	w0, #0x1
 53c:	b.ne	560 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x40>  // b.any
 540:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 544:	add	x2, x2, #0x0
 548:	mov	x4, #0x0                   	// #0
 54c:	mov	x3, #0x0                   	// #0
 550:	mov	w1, #0xc9                  	// #201
 554:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 558:	add	x0, x0, #0x0
 55c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 560:	mov	w20, w0
 564:	bl	0 <_ZN11__sanitizer17internal_filesizeEi>
 568:	mov	x19, x0
 56c:	cmn	x0, #0x1
 570:	b.ne	58c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x6c>  // b.any
 574:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 578:	mov	x4, x0
 57c:	mov	x3, x0
 580:	add	x2, x2, #0x0
 584:	mov	w1, #0xcb                  	// #203
 588:	b	554 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x34>
 58c:	cbnz	x0, 5a8 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x88>
 590:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 594:	mov	x4, #0x0                   	// #0
 598:	add	x2, x2, #0x0
 59c:	mov	x3, #0x0                   	// #0
 5a0:	mov	w1, #0xcc                  	// #204
 5a4:	b	554 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x34>
 5a8:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 5ac:	mov	x1, x0
 5b0:	mov	x0, x19
 5b4:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 5b8:	mov	w4, w20
 5bc:	mov	x1, x0
 5c0:	str	x1, [x21]
 5c4:	mov	x5, #0x0                   	// #0
 5c8:	mov	w3, #0x2                   	// #2
 5cc:	mov	w2, #0x1                   	// #1
 5d0:	mov	x0, #0x0                   	// #0
 5d4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 5d8:	mov	x1, #0x0                   	// #0
 5dc:	mov	x19, x0
 5e0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 5e4:	tst	w0, #0xff
 5e8:	csel	x0, x19, xzr, eq  // eq = none
 5ec:	ldp	x21, x30, [sp, #16]
 5f0:	ldp	x19, x20, [sp], #32
 5f4:	ret

00000000000005f8 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim>:
 5f8:	stp	x19, x20, [sp, #-64]!
 5fc:	cmp	x0, #0x0
 600:	mov	x5, x3
 604:	mov	w4, w2
 608:	stp	x21, x22, [sp, #16]
 60c:	mov	x21, x3
 610:	mov	x3, #0x11                  	// #17
 614:	csinc	x3, x3, xzr, ne  // ne = any
 618:	mov	w20, w2
 61c:	mov	w2, #0x3                   	// #3
 620:	mov	x22, x1
 624:	str	x30, [sp, #32]
 628:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 62c:	mov	x19, x0
 630:	add	x1, sp, #0x3c
 634:	str	wzr, [sp, #60]
 638:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 63c:	tst	w0, #0xff
 640:	b.eq	678 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x80>  // b.none
 644:	ldr	w5, [sp, #60]
 648:	mov	x4, x19
 64c:	mov	x3, x22
 650:	mov	x2, x21
 654:	mov	w1, w20
 658:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 65c:	add	x0, x0, #0x0
 660:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 664:	mov	x0, #0x0                   	// #0
 668:	ldp	x21, x22, [sp, #16]
 66c:	ldr	x30, [sp, #32]
 670:	ldp	x19, x20, [sp], #64
 674:	ret
 678:	mov	x0, x19
 67c:	b	668 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x70>

0000000000000680 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm>:
 680:	stp	x19, x20, [sp, #-160]!
 684:	mov	x20, x1
 688:	mov	w1, #0x1                   	// #1
 68c:	stp	x21, x22, [sp, #16]
 690:	add	x22, sp, #0x30
 694:	mov	x21, x0
 698:	stp	x23, x30, [sp, #32]
 69c:	add	x23, sp, #0x50
 6a0:	mov	x0, x22
 6a4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 6a8:	stp	xzr, xzr, [sp, #104]
 6ac:	str	xzr, [sp, #152]
 6b0:	mov	x1, x23
 6b4:	mov	x0, x22
 6b8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 6bc:	tst	w0, #0xff
 6c0:	b.eq	76c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xec>  // b.none
 6c4:	ldp	x0, x2, [sp, #80]
 6c8:	cmp	x0, x2
 6cc:	b.eq	6b0 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x30>  // b.none
 6d0:	cbnz	x2, 6f4 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x74>
 6d4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 6d8:	add	x2, x2, #0x0
 6dc:	mov	x4, #0x0                   	// #0
 6e0:	mov	x3, #0x0                   	// #0
 6e4:	mov	w1, #0xef                  	// #239
 6e8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 6ec:	add	x0, x0, #0x0
 6f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6f4:	sub	x2, x2, #0x1
 6f8:	cmp	x0, x2
 6fc:	b.ls	718 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x98>  // b.plast
 700:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 704:	mov	x4, #0x0                   	// #0
 708:	add	x2, x2, #0x0
 70c:	mov	x3, #0x0                   	// #0
 710:	mov	w1, #0xe1                  	// #225
 714:	b	6e8 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x68>
 718:	cmp	x21, x20
 71c:	b.ls	738 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xb8>  // b.plast
 720:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 724:	mov	x4, #0x0                   	// #0
 728:	add	x2, x2, #0x0
 72c:	mov	x3, #0x0                   	// #0
 730:	mov	w1, #0xe2                  	// #226
 734:	b	6e8 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x68>
 738:	cmp	x2, x21
 73c:	cset	w19, cc  // cc = lo, ul, last
 740:	cmp	x0, x20
 744:	cset	w0, hi  // hi = pmore
 748:	orr	w19, w19, w0
 74c:	cbnz	w19, 6b0 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x30>
 750:	mov	x0, x22
 754:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 758:	mov	w0, w19
 75c:	ldp	x21, x22, [sp, #16]
 760:	ldp	x23, x30, [sp, #32]
 764:	ldp	x19, x20, [sp], #160
 768:	ret
 76c:	mov	w19, #0x1                   	// #1
 770:	b	750 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xd0>

0000000000000774 <_ZN11__sanitizer14DumpProcessMapEv>:
 774:	stp	x19, x20, [sp, #-160]!
 778:	mov	w1, #0x1                   	// #1
 77c:	add	x20, sp, #0x30
 780:	stp	x21, x22, [sp, #16]
 784:	mov	x0, x20
 788:	str	x30, [sp, #32]
 78c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 790:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 794:	add	x1, x1, #0x0
 798:	mov	w2, #0x0                   	// #0
 79c:	mov	x0, #0xfff                 	// #4095
 7a0:	bl	4 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 7a4:	mov	x19, x0
 7a8:	mov	x0, #0xfff                 	// #4095
 7ac:	adrp	x21, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 7b0:	add	x22, sp, #0x50
 7b4:	add	x21, x21, #0x0
 7b8:	stp	x19, x0, [sp, #104]
 7bc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 7c0:	add	x0, x0, #0x0
 7c4:	str	xzr, [sp, #152]
 7c8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 7cc:	mov	x1, x22
 7d0:	mov	x0, x20
 7d4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 7d8:	tst	w0, #0xff
 7dc:	b.eq	7f4 <_ZN11__sanitizer14DumpProcessMapEv+0x80>  // b.none
 7e0:	ldp	x1, x2, [sp, #80]
 7e4:	mov	x0, x21
 7e8:	ldr	x3, [sp, #104]
 7ec:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7f0:	b	7cc <_ZN11__sanitizer14DumpProcessMapEv+0x58>
 7f4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 7f8:	add	x0, x0, #0x0
 7fc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 800:	mov	x1, #0xfff                 	// #4095
 804:	mov	x0, x19
 808:	bl	98 <_ZN11__sanitizer10UnmapOrDieEPvm>
 80c:	mov	x0, x20
 810:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 814:	ldp	x21, x22, [sp, #16]
 818:	ldr	x30, [sp, #32]
 81c:	ldp	x19, x20, [sp], #160
 820:	ret

0000000000000824 <_ZN11__sanitizer6GetPwdEv>:
 824:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 828:	add	x0, x0, #0x0
 82c:	b	0 <_ZN11__sanitizer6GetEnvEPKc>

0000000000000830 <_ZN11__sanitizer15IsPathSeparatorEc>:
 830:	and	w0, w0, #0xff
 834:	cmp	w0, #0x2f
 838:	cset	w0, eq  // eq = none
 83c:	ret

0000000000000840 <_ZN11__sanitizer14IsAbsolutePathEPKc>:
 840:	cbz	x0, 854 <_ZN11__sanitizer14IsAbsolutePathEPKc+0x14>
 844:	ldrb	w0, [x0]
 848:	cmp	w0, #0x2f
 84c:	cset	w0, eq  // eq = none
 850:	ret
 854:	mov	w0, #0x0                   	// #0
 858:	b	850 <_ZN11__sanitizer14IsAbsolutePathEPKc+0x10>

000000000000085c <_ZN11__sanitizer10ReportFile5WriteEPKcm>:
 85c:	stp	x19, x20, [sp, #-48]!
 860:	mov	x19, x0
 864:	stp	x21, x22, [sp, #16]
 868:	mov	x21, x2
 86c:	mov	x22, x1
 870:	mov	w1, #0x1                   	// #1
 874:	ldr	x20, [x0]
 878:	str	x30, [sp, #32]
 87c:	ldxrb	w0, [x20]
 880:	stxrb	w2, w1, [x20]
 884:	cbnz	w2, 87c <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x20>
 888:	dmb	ish
 88c:	tst	w0, #0xff
 890:	b.eq	89c <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x40>  // b.none
 894:	mov	x0, x20
 898:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 89c:	mov	x0, x19
 8a0:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
 8a4:	ldr	w0, [x19, #8]
 8a8:	mov	x2, x21
 8ac:	mov	x1, x22
 8b0:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 8b4:	cmp	x0, x21
 8b8:	b.eq	8e4 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x88>  // b.none
 8bc:	ldr	w20, [x19, #8]
 8c0:	adrp	x19, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 8c4:	add	x19, x19, #0x0
 8c8:	mov	x0, x19
 8cc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 8d0:	mov	x1, x19
 8d4:	mov	x2, x0
 8d8:	mov	w0, w20
 8dc:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 8e0:	bl	0 <_ZN11__sanitizer3DieEv>
 8e4:	dmb	ish
 8e8:	strb	wzr, [x20]
 8ec:	ldp	x21, x22, [sp, #16]
 8f0:	ldr	x30, [sp, #32]
 8f4:	ldp	x19, x20, [sp], #48
 8f8:	ret

00000000000008fc <_ZNK11__sanitizer13SignalContext10GetAddressEv>:
 8fc:	ldr	x0, [x0]
 900:	ldr	x0, [x0, #16]
 904:	ret

0000000000000908 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>:
 908:	ldr	x0, [x0]
 90c:	ldr	w0, [x0]
 910:	cmp	w0, #0xb
 914:	cset	w0, eq  // eq = none
 918:	ret

000000000000091c <_ZNK11__sanitizer13SignalContext7GetTypeEv>:
 91c:	ldr	x0, [x0]
 920:	ldr	w0, [x0]
 924:	ret

0000000000000928 <_ZNK11__sanitizer13SignalContext8DescribeEv>:
 928:	ldr	x0, [x0]
 92c:	ldr	w0, [x0]
 930:	sub	w0, w0, #0x4
 934:	cmp	w0, #0x7
 938:	b.hi	984 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x5c>  // b.pmore
 93c:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 940:	add	x1, x1, #0x0
 944:	ldrb	w0, [x1, w0, uxtw]
 948:	adr	x1, 954 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x2c>
 94c:	add	x0, x1, w0, sxtb #2
 950:	br	x0
 954:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 958:	add	x0, x0, #0x0
 95c:	ret
 960:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 964:	add	x0, x0, #0x0
 968:	b	95c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>
 96c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 970:	add	x0, x0, #0x0
 974:	b	95c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>
 978:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 97c:	add	x0, x0, #0x0
 980:	b	95c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>
 984:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 988:	add	x0, x0, #0x0
 98c:	b	95c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>
 990:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
 994:	add	x0, x0, #0x0
 998:	b	95c <_ZNK11__sanitizer13SignalContext8DescribeEv+0x34>

000000000000099c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_>:
 99c:	stp	x19, x20, [sp, #-208]!
 9a0:	add	x20, sp, #0x40
 9a4:	stp	x21, x22, [sp, #16]
 9a8:	mov	x21, x2
 9ac:	mov	x22, x1
 9b0:	mov	w1, #0x0                   	// #0
 9b4:	stp	x23, x24, [sp, #32]
 9b8:	mov	x23, x0
 9bc:	mov	x0, x20
 9c0:	str	x30, [sp, #48]
 9c4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 9c8:	add	x0, sp, #0x60
 9cc:	mov	x1, #0x1000                	// #4096
 9d0:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
 9d4:	add	x24, sp, #0x80
 9d8:	ldr	x0, [sp, #96]
 9dc:	str	x0, [sp, #152]
 9e0:	mov	x0, #0x1000                	// #4096
 9e4:	str	x0, [sp, #160]
 9e8:	str	xzr, [sp, #200]
 9ec:	mov	x1, x24
 9f0:	mov	x0, x20
 9f4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 9f8:	ands	w19, w0, #0xff
 9fc:	b.eq	a28 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x8c>  // b.none
 a00:	ldr	x0, [sp, #168]
 a04:	tbz	w0, #2, 9ec <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x50>
 a08:	ldr	x1, [sp, #152]
 a0c:	mov	x0, x23
 a10:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 a14:	cbnz	w0, 9ec <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x50>
 a18:	ldr	x0, [sp, #128]
 a1c:	str	x0, [x22]
 a20:	ldr	x0, [sp, #136]
 a24:	str	x0, [x21]
 a28:	ldp	x0, x1, [sp, #96]
 a2c:	bl	98 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a30:	mov	x0, x20
 a34:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 a38:	mov	w0, w19
 a3c:	ldp	x21, x22, [sp, #16]
 a40:	ldp	x23, x24, [sp, #32]
 a44:	ldr	x30, [sp, #48]
 a48:	ldp	x19, x20, [sp], #208
 a4c:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	4 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x4>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	98 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x98>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

sanitizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL6getlimEi>:
   0:	str	x30, [sp, #-32]!
   4:	add	x1, sp, #0x10
   8:	bl	0 <getrlimit>
   c:	cbz	w0, 30 <_ZN11__sanitizerL6getlimEi+0x30>
  10:	sxtw	x4, w0
  14:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
  18:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	x3, #0x0                   	// #0
  28:	mov	w1, #0x5a                  	// #90
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x0, [sp, #16]
  34:	ldr	x30, [sp], #32
  38:	ret

000000000000003c <_ZN11__sanitizerL6setlimEim>:
  3c:	stp	x19, x30, [sp, #-32]!
  40:	str	x1, [sp, #16]
  44:	str	x1, [sp, #24]
  48:	add	x1, sp, #0x10
  4c:	bl	0 <setrlimit>
  50:	cbz	w0, 7c <_ZN11__sanitizerL6setlimEim+0x40>
  54:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  58:	ldr	x0, [x0]
  5c:	ldr	x19, [x0]
  60:	bl	0 <__errno_location>
  64:	ldr	w2, [x0]
  68:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
  6c:	mov	x1, x19
  70:	add	x0, x0, #0x0
  74:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  78:	bl	0 <_ZN11__sanitizer3DieEv>
  7c:	ldp	x19, x30, [sp], #32
  80:	ret

0000000000000084 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>:
  84:	stp	x19, x20, [sp, #-192]!
  88:	mov	w19, w0
  8c:	stp	x21, x30, [sp, #16]
  90:	mov	x21, x1
  94:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
  98:	cbz	w0, 130 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0xac>
  9c:	add	x20, sp, #0x28
  a0:	mov	x2, #0x98                  	// #152
  a4:	mov	w1, #0x0                   	// #0
  a8:	mov	x0, x20
  ac:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  b0:	str	x21, [sp, #40]
  b4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  b8:	mov	w1, #0x4                   	// #4
  bc:	movk	w1, #0x4000, lsl #16
  c0:	mov	x2, #0x0                   	// #0
  c4:	ldr	x0, [x0]
  c8:	ldrb	w0, [x0, #97]
  cc:	cmp	w0, #0x0
  d0:	mov	w0, #0x4                   	// #4
  d4:	movk	w0, #0x4800, lsl #16
  d8:	csel	w0, w0, w1, ne  // ne = any
  dc:	mov	x1, x20
  e0:	str	w0, [sp, #176]
  e4:	mov	w0, w19
  e8:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
  ec:	sxtw	x4, w0
  f0:	cbz	w0, 110 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x8c>
  f4:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
  f8:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
  fc:	add	x2, x2, #0x0
 100:	add	x0, x0, #0x0
 104:	mov	x3, #0x0                   	// #0
 108:	mov	w1, #0xd2                  	// #210
 10c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 110:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 114:	ldr	x0, [x0]
 118:	ldr	w0, [x0]
 11c:	cbz	w0, 130 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0xac>
 120:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 124:	mov	w1, w19
 128:	add	x0, x0, #0x0
 12c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 130:	ldp	x21, x30, [sp, #16]
 134:	ldp	x19, x20, [sp], #192
 138:	ret

000000000000013c <_ZN11__sanitizer6GetUidEv>:
 13c:	b	0 <getuid>

0000000000000140 <_ZN11__sanitizer13GetThreadSelfEv>:
 140:	b	0 <pthread_self>

0000000000000144 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm>:
 144:	stp	x19, x20, [sp, #-32]!
 148:	mov	x20, x1
 14c:	stp	x21, x30, [sp, #16]
 150:	mov	x21, x0
 154:	bl	0 <_ZN11__sanitizerL6getlimEi>
 158:	mov	x19, x0
 15c:	mov	x1, x0
 160:	neg	x19, x19
 164:	mov	x0, x21
 168:	bl	0 <_ZN11__sanitizerL6getlimEi>
 16c:	and	x1, x19, x20
 170:	cmp	x0, x1
 174:	b.cs	18c <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x48>  // b.hs, b.nlast
 178:	ldp	x21, x30, [sp, #16]
 17c:	sub	x1, x1, x0
 180:	ldp	x19, x20, [sp], #32
 184:	mov	w2, #0x4                   	// #4
 188:	b	0 <madvise>
 18c:	ldp	x21, x30, [sp, #16]
 190:	ldp	x19, x20, [sp], #32
 194:	ret

0000000000000198 <_ZN11__sanitizer19NoHugePagesInRegionEmm>:
 198:	str	x30, [sp, #-16]!
 19c:	mov	w2, #0xf                   	// #15
 1a0:	bl	0 <madvise>
 1a4:	cmp	w0, #0x0
 1a8:	cset	w0, eq  // eq = none
 1ac:	ldr	x30, [sp], #16
 1b0:	ret

00000000000001b4 <_ZN11__sanitizer20DontDumpShadowMemoryEmm>:
 1b4:	str	x30, [sp, #-16]!
 1b8:	mov	w2, #0x10                  	// #16
 1bc:	bl	0 <madvise>
 1c0:	cmp	w0, #0x0
 1c4:	cset	w0, eq  // eq = none
 1c8:	ldr	x30, [sp], #16
 1cc:	ret

00000000000001d0 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv>:
 1d0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1d4:	ldr	x0, [x0]
 1d8:	ldrb	w0, [x0, #178]
 1dc:	cbz	w0, 1ec <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv+0x1c>
 1e0:	mov	x1, #0x0                   	// #0
 1e4:	mov	w0, #0x4                   	// #4
 1e8:	b	3c <_ZN11__sanitizerL6setlimEim>
 1ec:	ret

00000000000001f0 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>:
 1f0:	str	x30, [sp, #-16]!
 1f4:	mov	w0, #0x3                   	// #3
 1f8:	bl	0 <_ZN11__sanitizerL6getlimEi>
 1fc:	cmn	x0, #0x1
 200:	cset	w0, eq  // eq = none
 204:	ldr	x30, [sp], #16
 208:	ret

000000000000020c <_ZN11__sanitizer24GetStackSizeLimitInBytesEv>:
 20c:	mov	w0, #0x3                   	// #3
 210:	b	0 <_ZN11__sanitizerL6getlimEi>

0000000000000214 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm>:
 214:	mov	x1, x0
 218:	str	x30, [sp, #-16]!
 21c:	mov	w0, #0x3                   	// #3
 220:	bl	3c <_ZN11__sanitizerL6setlimEim>
 224:	bl	1f0 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>
 228:	tst	w0, #0xff
 22c:	b.eq	250 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x3c>  // b.none
 230:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 234:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 238:	add	x2, x2, #0x0
 23c:	add	x0, x0, #0x0
 240:	mov	x4, #0x0                   	// #0
 244:	mov	x3, #0x0                   	// #0
 248:	mov	w1, #0x7a                  	// #122
 24c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 250:	ldr	x30, [sp], #16
 254:	ret

0000000000000258 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>:
 258:	str	x30, [sp, #-16]!
 25c:	mov	w0, #0x9                   	// #9
 260:	bl	0 <_ZN11__sanitizerL6getlimEi>
 264:	cmn	x0, #0x1
 268:	cset	w0, eq  // eq = none
 26c:	ldr	x30, [sp], #16
 270:	ret

0000000000000274 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv>:
 274:	str	x30, [sp, #-16]!
 278:	mov	x1, #0xffffffffffffffff    	// #-1
 27c:	mov	w0, #0x9                   	// #9
 280:	bl	3c <_ZN11__sanitizerL6setlimEim>
 284:	bl	258 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>
 288:	tst	w0, #0xff
 28c:	b.ne	2b0 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x3c>  // b.any
 290:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 294:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 298:	add	x2, x2, #0x0
 29c:	add	x0, x0, #0x0
 2a0:	mov	x4, #0x0                   	// #0
 2a4:	mov	x3, #0x0                   	// #0
 2a8:	mov	w1, #0x84                  	// #132
 2ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2b0:	ldr	x30, [sp], #16
 2b4:	ret

00000000000002b8 <_ZN11__sanitizer15SleepForSecondsEi>:
 2b8:	b	0 <sleep>

00000000000002bc <_ZN11__sanitizer14SleepForMillisEi>:
 2bc:	mov	w1, #0x3e8                 	// #1000
 2c0:	mul	w0, w0, w1
 2c4:	b	0 <usleep>

00000000000002c8 <_ZN11__sanitizer5AbortEv>:
 2c8:	stp	x19, x30, [sp, #-176]!
 2cc:	mov	w0, #0x6                   	// #6
 2d0:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
 2d4:	cbz	w0, 300 <_ZN11__sanitizer5AbortEv+0x38>
 2d8:	add	x19, sp, #0x18
 2dc:	mov	x2, #0x98                  	// #152
 2e0:	mov	w1, #0x0                   	// #0
 2e4:	mov	x0, x19
 2e8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2ec:	str	xzr, [sp, #24]
 2f0:	mov	x1, x19
 2f4:	mov	x2, #0x0                   	// #0
 2f8:	mov	w0, #0x6                   	// #6
 2fc:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
 300:	bl	0 <abort>

0000000000000304 <_ZN11__sanitizer6AtexitEPFvvE>:
 304:	b	0 <atexit>

0000000000000308 <_ZN11__sanitizer21SupportsColoredOutputEi>:
 308:	str	x30, [sp, #-16]!
 30c:	bl	0 <isatty>
 310:	cmp	w0, #0x0
 314:	cset	w0, ne  // ne = any
 318:	ldr	x30, [sp], #16
 31c:	ret

0000000000000320 <_ZN11__sanitizer23SetAlternateSignalStackEv>:
 320:	str	x30, [sp, #-64]!
 324:	mov	x0, #0x0                   	// #0
 328:	add	x1, sp, #0x10
 32c:	bl	0 <sigaltstack>
 330:	cbz	w0, 354 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x34>
 334:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 338:	sxtw	x4, w0
 33c:	add	x2, x2, #0x0
 340:	mov	x3, #0x0                   	// #0
 344:	mov	w1, #0xb0                  	// #176
 348:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 34c:	add	x0, x0, #0x0
 350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 354:	ldr	w0, [sp, #24]
 358:	tbz	w0, #1, 3a8 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x88>
 35c:	mov	w2, #0x0                   	// #0
 360:	adrp	x1, 0 <_ZN11__sanitizerL6getlimEi>
 364:	mov	x0, #0x10000               	// #65536
 368:	add	x1, x1, #0x0
 36c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 370:	str	x0, [sp, #40]
 374:	mov	x0, #0x10000               	// #65536
 378:	mov	x1, #0x0                   	// #0
 37c:	str	wzr, [sp, #48]
 380:	str	x0, [sp, #56]
 384:	add	x0, sp, #0x28
 388:	bl	0 <sigaltstack>
 38c:	sxtw	x4, w0
 390:	cbz	w0, 3a8 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x88>
 394:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 398:	mov	x3, #0x0                   	// #0
 39c:	add	x2, x2, #0x0
 3a0:	mov	w1, #0xbb                  	// #187
 3a4:	b	348 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x28>
 3a8:	ldr	x30, [sp], #64
 3ac:	ret

00000000000003b0 <_ZN11__sanitizer25UnsetAlternateSignalStackEv>:
 3b0:	str	x30, [sp, #-64]!
 3b4:	mov	w0, #0x2                   	// #2
 3b8:	str	w0, [sp, #24]
 3bc:	mov	x0, #0x10000               	// #65536
 3c0:	add	x1, sp, #0x28
 3c4:	str	xzr, [sp, #16]
 3c8:	str	x0, [sp, #32]
 3cc:	add	x0, sp, #0x10
 3d0:	bl	0 <sigaltstack>
 3d4:	cbz	w0, 3f8 <_ZN11__sanitizer25UnsetAlternateSignalStackEv+0x48>
 3d8:	sxtw	x4, w0
 3dc:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 3e0:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 3e4:	add	x2, x2, #0x0
 3e8:	add	x0, x0, #0x0
 3ec:	mov	x3, #0x0                   	// #0
 3f0:	mov	w1, #0xc3                  	// #195
 3f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f8:	ldr	x0, [sp, #40]
 3fc:	ldr	x1, [sp, #56]
 400:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 404:	ldr	x30, [sp], #64
 408:	ret

000000000000040c <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>:
 40c:	stp	x19, x30, [sp, #-16]!
 410:	mov	x19, x0
 414:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 418:	ldr	x0, [x0]
 41c:	ldrb	w0, [x0, #97]
 420:	cbz	w0, 428 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x1c>
 424:	bl	320 <_ZN11__sanitizer23SetAlternateSignalStackEv>
 428:	mov	x1, x19
 42c:	mov	w0, #0xb                   	// #11
 430:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 434:	mov	x1, x19
 438:	mov	w0, #0x7                   	// #7
 43c:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 440:	mov	x1, x19
 444:	mov	w0, #0x6                   	// #6
 448:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 44c:	mov	x1, x19
 450:	mov	w0, #0x8                   	// #8
 454:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 458:	mov	x1, x19
 45c:	mov	w0, #0x4                   	// #4
 460:	bl	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 464:	mov	x1, x19
 468:	mov	w0, #0x5                   	// #5
 46c:	ldp	x19, x30, [sp], #16
 470:	b	84 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>

0000000000000474 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>:
 474:	stp	x19, x20, [sp, #-32]!
 478:	mov	x19, x0
 47c:	ldr	x20, [x0, #16]
 480:	str	x30, [sp, #16]
 484:	bl	0 <_ZN11__sanitizerL6getlimEi>
 488:	ldr	x1, [x19, #32]
 48c:	add	x20, x20, x0
 490:	cmp	x20, x1
 494:	b.ls	4e8 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x74>  // b.plast
 498:	mov	x0, #0xffff                	// #65535
 49c:	add	x1, x1, x0
 4a0:	ldr	x0, [x19, #16]
 4a4:	cmp	x0, x1
 4a8:	b.cs	4e8 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x74>  // b.hs, b.nlast
 4ac:	ldr	x0, [x19]
 4b0:	ldr	w1, [x0, #8]
 4b4:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_MAPERRE>
 4b8:	ldr	x0, [x0]
 4bc:	ldr	w0, [x0]
 4c0:	cmp	w1, w0
 4c4:	b.eq	4f0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.none
 4c8:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_ACCERRE>
 4cc:	ldr	x0, [x0]
 4d0:	ldr	w0, [x0]
 4d4:	cmp	w0, w1
 4d8:	cset	w0, eq  // eq = none
 4dc:	ldr	x30, [sp, #16]
 4e0:	ldp	x19, x20, [sp], #32
 4e4:	ret
 4e8:	mov	w0, #0x0                   	// #0
 4ec:	b	4dc <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x68>
 4f0:	mov	w0, #0x1                   	// #1
 4f4:	b	4dc <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x68>

00000000000004f8 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>:
 4f8:	stp	x19, x20, [sp, #-48]!
 4fc:	mov	x19, x1
 500:	mov	x20, x0
 504:	str	x30, [sp, #16]
 508:	bl	0 <_ZN11__sanitizerL6getlimEi>
 50c:	mov	x4, #0xa                   	// #10
 510:	mul	x4, x0, x4
 514:	cmp	x19, x4
 518:	b.cc	538 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x40>  // b.lo, b.ul, b.last
 51c:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 520:	mov	x3, x19
 524:	add	x2, x2, #0x0
 528:	mov	w1, #0x118                 	// #280
 52c:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 530:	add	x0, x0, #0x0
 534:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 538:	add	x0, sp, #0x28
 53c:	bl	0 <pipe>
 540:	cbnz	w0, 5b4 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xbc>
 544:	ldr	w0, [sp, #44]
 548:	mov	x2, x19
 54c:	mov	x1, x20
 550:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 554:	mov	x20, x0
 558:	add	x1, sp, #0x24
 55c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 560:	tst	w0, #0xff
 564:	b.eq	58c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x94>  // b.none
 568:	ldrsw	x4, [sp, #36]
 56c:	mov	w19, #0x0                   	// #0
 570:	cmp	x4, #0xe
 574:	b.eq	594 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x9c>  // b.none
 578:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 57c:	mov	x3, #0xe                   	// #14
 580:	add	x2, x2, #0x0
 584:	mov	w1, #0x121                 	// #289
 588:	b	52c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x34>
 58c:	cmp	x19, x20
 590:	cset	w19, eq  // eq = none
 594:	ldr	w0, [sp, #40]
 598:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 59c:	ldr	w0, [sp, #44]
 5a0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 5a4:	mov	w0, w19
 5a8:	ldr	x30, [sp, #16]
 5ac:	ldp	x19, x20, [sp], #48
 5b0:	ret
 5b4:	mov	w19, #0x0                   	// #0
 5b8:	b	5a4 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xac>

00000000000005bc <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>:
 5bc:	b	0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>

00000000000005c0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>:
 5c0:	stp	x19, x20, [sp, #-240]!
 5c4:	stp	x21, x30, [sp, #16]
 5c8:	mov	x21, x1
 5cc:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 5d0:	ldr	x1, [x1]
 5d4:	ldrb	w1, [x1, #215]
 5d8:	cbz	w1, 68c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xcc>
 5dc:	mov	x19, x0
 5e0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 5e4:	cmp	x0, #0xbd
 5e8:	b.ls	60c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x4c>  // b.plast
 5ec:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 5f0:	add	x2, x2, #0x0
 5f4:	mov	x4, #0x0                   	// #0
 5f8:	mov	x3, #0x0                   	// #0
 5fc:	mov	w1, #0x13c                 	// #316
 600:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 604:	add	x0, x0, #0x0
 608:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 60c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 610:	add	x20, sp, #0x28
 614:	mov	x4, x19
 618:	mov	x3, x0
 61c:	mov	x1, #0xc8                  	// #200
 620:	mov	x0, x20
 624:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 628:	add	x2, x2, #0x0
 62c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 630:	mov	w2, #0x1c0                 	// #448
 634:	mov	w1, #0x242                 	// #578
 638:	mov	x0, x20
 63c:	bl	0 <shm_open>
 640:	mov	x1, x21
 644:	mov	w19, w0
 648:	bl	0 <_ZN11__sanitizer18internal_ftruncateEim>
 64c:	sxtw	x4, w0
 650:	cbz	w0, 668 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xa8>
 654:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 658:	mov	x3, #0x0                   	// #0
 65c:	add	x2, x2, #0x0
 660:	mov	w1, #0x142                 	// #322
 664:	b	600 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x40>
 668:	mov	x0, x20
 66c:	bl	0 <shm_unlink>
 670:	sxtw	x4, w0
 674:	cbz	w0, 690 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xd0>
 678:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 67c:	mov	x3, #0x0                   	// #0
 680:	add	x2, x2, #0x0
 684:	mov	w1, #0x144                 	// #324
 688:	b	600 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x40>
 68c:	mov	w19, #0xffffffff            	// #-1
 690:	mov	w0, w19
 694:	ldp	x21, x30, [sp, #16]
 698:	ldp	x19, x20, [sp], #240
 69c:	ret

00000000000006a0 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc>:
 6a0:	stp	x19, x20, [sp, #-64]!
 6a4:	mov	x20, x1
 6a8:	stp	x21, x22, [sp, #16]
 6ac:	mov	x22, x0
 6b0:	stp	x23, x30, [sp, #32]
 6b4:	cbz	x2, 754 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xb4>
 6b8:	mov	x0, x2
 6bc:	bl	5c0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 6c0:	cmn	w0, #0x1
 6c4:	mov	w23, #0x4012                	// #16402
 6c8:	mov	w3, #0x4032                	// #16434
 6cc:	mov	w21, w0
 6d0:	csel	w23, w23, w3, ne  // ne = any
 6d4:	bl	0 <_ZN11__sanitizerL6getlimEi>
 6d8:	mov	x1, x0
 6dc:	mov	x19, x0
 6e0:	mov	x0, x20
 6e4:	bl	0 <_ZN11__sanitizerL6getlimEi>
 6e8:	neg	x19, x19
 6ec:	mov	w4, w21
 6f0:	mov	w3, w23
 6f4:	mov	x5, #0x0                   	// #0
 6f8:	mov	w2, #0x3                   	// #3
 6fc:	mov	x1, x0
 700:	and	x0, x19, x22
 704:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 708:	add	x1, sp, #0x3c
 70c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 710:	tst	w0, #0xff
 714:	b.eq	760 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xc0>  // b.none
 718:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 71c:	ldr	w5, [sp, #60]
 720:	mov	x4, x22
 724:	mov	x3, x20
 728:	ldr	x0, [x0]
 72c:	mov	x2, x20
 730:	ldr	x1, [x0]
 734:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 738:	add	x0, x0, #0x0
 73c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 740:	mov	w0, #0x0                   	// #0
 744:	ldp	x21, x22, [sp, #16]
 748:	ldp	x23, x30, [sp, #32]
 74c:	ldp	x19, x20, [sp], #64
 750:	ret
 754:	mov	w21, #0xffffffff            	// #-1
 758:	mov	w23, #0x4032                	// #16434
 75c:	b	6d4 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x34>
 760:	mov	x0, x20
 764:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 768:	mov	w0, #0x1                   	// #1
 76c:	b	744 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xa4>

0000000000000770 <_ZN11__sanitizer20ReservedAddressRange3MapEmm>:
 770:	mov	x0, x1
 774:	mov	x1, x2
 778:	b	0 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>

000000000000077c <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>:
 77c:	mov	x0, x1
 780:	mov	x1, x2
 784:	b	0 <_ZN11__sanitizer14MmapFixedOrDieEmm>

0000000000000788 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm>:
 788:	mov	x5, x0
 78c:	mov	x0, x1
 790:	mov	x1, x2
 794:	str	x30, [sp, #-16]!
 798:	ldr	x2, [x5, #8]
 79c:	cmp	x1, x2
 7a0:	b.ls	7c4 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x3c>  // b.plast
 7a4:	mov	x4, x2
 7a8:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 7ac:	add	x2, x2, #0x0
 7b0:	mov	x3, x1
 7b4:	mov	w1, #0x175                 	// #373
 7b8:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 7bc:	add	x0, x0, #0x0
 7c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7c4:	ldr	x4, [x5]
 7c8:	add	x3, x1, x0
 7cc:	cmp	x4, x0
 7d0:	b.ne	7f0 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x68>  // b.any
 7d4:	cmp	x1, x2
 7d8:	csel	x3, x3, xzr, ne  // ne = any
 7dc:	str	x3, [x5]
 7e0:	ldr	x30, [sp], #16
 7e4:	sub	x2, x2, x1
 7e8:	str	x2, [x5, #8]
 7ec:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7f0:	add	x4, x4, x2
 7f4:	cmp	x3, x4
 7f8:	b.eq	7e0 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x58>  // b.none
 7fc:	adrp	x2, 0 <_ZN11__sanitizerL6getlimEi>
 800:	mov	w1, #0x17a                 	// #378
 804:	add	x2, x2, #0x0
 808:	b	7b8 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x30>

000000000000080c <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>:
 80c:	stp	x19, x20, [sp, #-32]!
 810:	mov	x19, x0
 814:	mov	x20, x1
 818:	str	x30, [sp, #16]
 81c:	cbz	x2, 858 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x4c>
 820:	mov	x0, x2
 824:	bl	5c0 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 828:	cmn	w0, #0x1
 82c:	mov	w4, w0
 830:	mov	w3, #0x4012                	// #16402
 834:	mov	w0, #0x4032                	// #16434
 838:	csel	w3, w3, w0, ne  // ne = any
 83c:	mov	x1, x20
 840:	mov	x0, x19
 844:	ldr	x30, [sp, #16]
 848:	mov	x5, #0x0                   	// #0
 84c:	ldp	x19, x20, [sp], #32
 850:	mov	w2, #0x0                   	// #0
 854:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 858:	mov	w4, #0xffffffff            	// #-1
 85c:	mov	w3, #0x4032                	// #16434
 860:	b	83c <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x30>

0000000000000864 <_ZN11__sanitizer12MmapNoAccessEm>:
 864:	mov	x1, x0
 868:	mov	x5, #0x0                   	// #0
 86c:	mov	w4, #0xffffffff            	// #-1
 870:	mov	w3, #0x4022                	// #16418
 874:	mov	w2, #0x0                   	// #0
 878:	mov	x0, #0x0                   	// #0
 87c:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>

0000000000000880 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>:
 880:	stp	x19, x20, [sp, #-32]!
 884:	mov	x19, x0
 888:	mov	x20, x1
 88c:	stp	x21, x30, [sp, #16]
 890:	mov	x21, x2
 894:	cbz	x3, 8b8 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x38>
 898:	mov	x0, x3
 89c:	mov	x2, #0x0                   	// #0
 8a0:	bl	80c <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>
 8a4:	stp	x0, x20, [x19]
 8a8:	str	x21, [x19, #16]
 8ac:	ldp	x21, x30, [sp, #16]
 8b0:	ldp	x19, x20, [sp], #32
 8b4:	ret
 8b8:	mov	x0, x1
 8bc:	bl	864 <_ZN11__sanitizer12MmapNoAccessEm>
 8c0:	b	8a4 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x24>

00000000000008c4 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>:
 8c4:	adrp	x3, 0 <real_pthread_attr_getstack>
 8c8:	ldr	x3, [x3]
 8cc:	cbz	x3, 8d4 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm+0x10>
 8d0:	b	0 <real_pthread_attr_getstack>
 8d4:	b	0 <pthread_attr_getstack>

00000000000008d8 <_ZN11__sanitizer15AdjustStackSizeEPv>:
 8d8:	stp	x19, x20, [sp, #-48]!
 8dc:	mov	x20, x0
 8e0:	add	x2, sp, #0x28
 8e4:	add	x1, sp, #0x20
 8e8:	stp	x21, x30, [sp, #16]
 8ec:	stp	xzr, xzr, [sp, #32]
 8f0:	bl	8c4 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 8f4:	ldr	x0, [sp, #32]
 8f8:	cbz	x0, 95c <_ZN11__sanitizer15AdjustStackSizeEPv+0x84>
 8fc:	ldr	x1, [sp, #40]
 900:	cmn	x0, x1
 904:	cset	w21, ne  // ne = any
 908:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 90c:	add	x19, x0, #0x20, lsl #12
 910:	ldr	x1, [sp, #40]
 914:	cmp	x1, x19
 918:	b.cs	950 <_ZN11__sanitizer15AdjustStackSizeEPv+0x78>  // b.hs, b.nlast
 91c:	cbnz	w21, 964 <_ZN11__sanitizer15AdjustStackSizeEPv+0x8c>
 920:	cbz	x1, 950 <_ZN11__sanitizer15AdjustStackSizeEPv+0x78>
 924:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 928:	ldr	x0, [x0]
 92c:	ldr	w0, [x0]
 930:	cbz	w0, 944 <_ZN11__sanitizer15AdjustStackSizeEPv+0x6c>
 934:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 938:	mov	x2, x19
 93c:	add	x0, x0, #0x0
 940:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 944:	mov	x1, x19
 948:	mov	x0, x20
 94c:	bl	0 <pthread_attr_setstacksize>
 950:	ldp	x21, x30, [sp, #16]
 954:	ldp	x19, x20, [sp], #48
 958:	ret
 95c:	mov	w21, #0x0                   	// #0
 960:	b	908 <_ZN11__sanitizer15AdjustStackSizeEPv+0x30>
 964:	mov	x2, x19
 968:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 96c:	add	x0, x0, #0x0
 970:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 974:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 978:	add	x0, x0, #0x0
 97c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 980:	b	950 <_ZN11__sanitizer15AdjustStackSizeEPv+0x78>

0000000000000984 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>:
 984:	stp	x19, x20, [sp, #-80]!
 988:	mov	w20, w3
 98c:	mov	w19, w4
 990:	stp	x21, x22, [sp, #16]
 994:	mov	w21, w2
 998:	stp	x23, x24, [sp, #32]
 99c:	mov	x23, x0
 9a0:	mov	x24, x1
 9a4:	str	x30, [sp, #48]
 9a8:	bl	0 <_ZN11__sanitizer13internal_forkEv>
 9ac:	mov	w22, w0
 9b0:	cmp	w0, #0x0
 9b4:	b.ge	a24 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xa0>  // b.tcont
 9b8:	add	x1, sp, #0x4c
 9bc:	sxtw	x0, w0
 9c0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 9c4:	tst	w0, #0xff
 9c8:	b.eq	9dc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x58>  // b.none
 9cc:	ldr	w1, [sp, #76]
 9d0:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 9d4:	add	x0, x0, #0x0
 9d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 9dc:	cmn	w21, #0x1
 9e0:	b.eq	9ec <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x68>  // b.none
 9e4:	mov	w0, w21
 9e8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 9ec:	cmn	w20, #0x1
 9f0:	b.eq	9fc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x78>  // b.none
 9f4:	mov	w0, w20
 9f8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 9fc:	cmn	w19, #0x1
 a00:	b.eq	a0c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x88>  // b.none
 a04:	mov	w0, w19
 a08:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a0c:	mov	w0, w22
 a10:	ldp	x21, x22, [sp, #16]
 a14:	ldp	x23, x24, [sp, #32]
 a18:	ldr	x30, [sp, #48]
 a1c:	ldp	x19, x20, [sp], #80
 a20:	ret
 a24:	b.ne	9dc <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x58>  // b.any
 a28:	cmn	w21, #0x1
 a2c:	b.eq	a48 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xc4>  // b.none
 a30:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a34:	mov	w1, #0x0                   	// #0
 a38:	mov	w0, w21
 a3c:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 a40:	mov	w0, w21
 a44:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a48:	cmn	w20, #0x1
 a4c:	b.eq	a6c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xe8>  // b.none
 a50:	mov	w0, #0x1                   	// #1
 a54:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a58:	mov	w1, #0x1                   	// #1
 a5c:	mov	w0, w20
 a60:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 a64:	mov	w0, w20
 a68:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a6c:	cmn	w19, #0x1
 a70:	b.eq	a90 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x10c>  // b.none
 a74:	mov	w0, #0x2                   	// #2
 a78:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a7c:	mov	w1, #0x2                   	// #2
 a80:	mov	w0, w19
 a84:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 a88:	mov	w0, w19
 a8c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 a90:	mov	w0, #0x4                   	// #4
 a94:	bl	0 <sysconf>
 a98:	mov	w19, w0
 a9c:	cmp	w19, #0x2
 aa0:	b.le	ab4 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x130>
 aa4:	mov	w0, w19
 aa8:	sub	w19, w19, #0x1
 aac:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 ab0:	b	a9c <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x118>
 ab4:	mov	x1, x24
 ab8:	mov	x0, x23
 abc:	bl	0 <execv>
 ac0:	mov	w0, #0x1                   	// #1
 ac4:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000000ac8 <_ZN11__sanitizer16IsProcessRunningEi>:
 ac8:	stp	x19, x30, [sp, #-32]!
 acc:	mov	w2, #0x1                   	// #1
 ad0:	add	x1, sp, #0x18
 ad4:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 ad8:	add	x1, sp, #0x1c
 adc:	mov	x19, x0
 ae0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 ae4:	tst	w0, #0xff
 ae8:	b.eq	b14 <_ZN11__sanitizer16IsProcessRunningEi+0x4c>  // b.none
 aec:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 af0:	ldr	x0, [x0]
 af4:	ldr	w0, [x0]
 af8:	cbz	w0, b0c <_ZN11__sanitizer16IsProcessRunningEi+0x44>
 afc:	ldr	w1, [sp, #28]
 b00:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 b04:	add	x0, x0, #0x0
 b08:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 b0c:	mov	w0, #0x0                   	// #0
 b10:	b	b1c <_ZN11__sanitizer16IsProcessRunningEi+0x54>
 b14:	cmp	x19, #0x0
 b18:	cset	w0, eq  // eq = none
 b1c:	ldp	x19, x30, [sp], #32
 b20:	ret

0000000000000b24 <_ZN11__sanitizer14WaitForProcessEi>:
 b24:	str	x30, [sp, #-32]!
 b28:	mov	w2, #0x0                   	// #0
 b2c:	add	x1, sp, #0x18
 b30:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 b34:	add	x1, sp, #0x1c
 b38:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 b3c:	tst	w0, #0xff
 b40:	b.eq	b6c <_ZN11__sanitizer14WaitForProcessEi+0x48>  // b.none
 b44:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 b48:	ldr	x0, [x0]
 b4c:	ldr	w0, [x0]
 b50:	cbz	w0, b64 <_ZN11__sanitizer14WaitForProcessEi+0x40>
 b54:	ldr	w1, [sp, #28]
 b58:	adrp	x0, 0 <_ZN11__sanitizerL6getlimEi>
 b5c:	add	x0, x0, #0x0
 b60:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 b64:	mov	w0, #0xffffffff            	// #-1
 b68:	b	b70 <_ZN11__sanitizer14WaitForProcessEi+0x4c>
 b6c:	ldr	w0, [sp, #24]
 b70:	ldr	x30, [sp], #32
 b74:	ret

0000000000000b78 <_ZN11__sanitizer15IsStateDetachedEi>:
 b78:	cmp	w0, #0x1
 b7c:	cset	w0, eq  // eq = none
 b80:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

sanitizer_printf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL10AppendCharEPPcPKcc>:
   0:	ldr	x3, [x0]
   4:	and	w2, w2, #0xff
   8:	cmp	x3, x1
   c:	b.cs	20 <_ZN11__sanitizerL10AppendCharEPPcPKcc+0x20>  // b.hs, b.nlast
  10:	strb	w2, [x3]
  14:	ldr	x1, [x0]
  18:	add	x1, x1, #0x1
  1c:	str	x1, [x0]
  20:	mov	w0, #0x1                   	// #1
  24:	ret

0000000000000028 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>:
  28:	str	x30, [sp, #-16]!
  2c:	mov	x6, x0
  30:	mov	x7, x1
  34:	mov	w9, w2
  38:	mov	w8, w3
  3c:	cbnz	x4, 48 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x20>
  40:	adrp	x4, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  44:	add	x4, x4, #0x0
  48:	mov	w5, #0x0                   	// #0
  4c:	ldrb	w2, [x4]
  50:	cbz	w2, 78 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x50>
  54:	cmp	w8, #0x0
  58:	ccmp	w5, w8, #0x1, ge  // ge = tcont
  5c:	b.ge	78 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x50>  // b.tcont
  60:	mov	x1, x7
  64:	mov	x0, x6
  68:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  6c:	add	w5, w5, w0
  70:	add	x4, x4, #0x1
  74:	b	4c <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x24>
  78:	neg	w0, w5
  7c:	cmp	w0, w9
  80:	b.le	9c <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x74>
  84:	mov	x1, x7
  88:	mov	x0, x6
  8c:	mov	w2, #0x20                  	// #32
  90:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  94:	add	w5, w5, w0
  98:	b	78 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_+0x50>
  9c:	mov	w0, w5
  a0:	ldr	x30, [sp], #16
  a4:	ret

00000000000000a8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>:
  a8:	stp	x19, x20, [sp, #-320]!
  ac:	and	w8, w3, #0xff
  b0:	cmp	w8, #0xa
  b4:	mov	x20, x0
  b8:	cset	w0, ne  // ne = any
  bc:	stp	x21, x22, [sp, #16]
  c0:	cmp	w0, #0x0
  c4:	ccmp	w8, #0x10, #0x4, ne  // ne = any
  c8:	stp	x23, x24, [sp, #32]
  cc:	stp	x25, x26, [sp, #48]
  d0:	str	x30, [sp, #64]
  d4:	b.eq	e8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x40>  // b.none
  d8:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  e4:	bl	0 <_ZN11__sanitizer3DieEv>
  e8:	and	w26, w6, #0xff
  ec:	cmp	w0, #0x0
  f0:	ccmp	w26, #0x0, #0x4, ne  // ne = any
  f4:	b.eq	104 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x5c>  // b.none
  f8:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
  fc:	add	x0, x0, #0x0
 100:	b	e0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x38>
 104:	cmp	x2, #0x0
 108:	mov	x9, x2
 10c:	ccmp	w26, #0x0, #0x4, eq  // eq = none
 110:	b.eq	120 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x78>  // b.none
 114:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 118:	add	x0, x0, #0x0
 11c:	b	e0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x38>
 120:	and	w19, w4, #0xff
 124:	cmp	w19, #0x1d
 128:	b.ls	138 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x90>  // b.plast
 12c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 130:	add	x0, x0, #0x0
 134:	b	e0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x38>
 138:	cmp	w19, #0x0
 13c:	mov	w0, w19
 140:	sub	w19, w19, #0x1
 144:	ccmp	w26, #0x0, #0x4, ne  // ne = any
 148:	and	w19, w19, #0xff
 14c:	and	w22, w5, #0xff
 150:	csel	w19, w19, w0, ne  // ne = any
 154:	cmp	w26, #0x0
 158:	mov	x21, x1
 15c:	and	w23, w7, #0xff
 160:	ccmp	w22, #0x0, #0x4, ne  // ne = any
 164:	b.eq	284 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1dc>  // b.none
 168:	mov	x0, x20
 16c:	mov	w2, #0x2d                  	// #45
 170:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 174:	mov	w24, w0
 178:	and	x8, x8, #0xff
 17c:	add	x25, sp, #0x50
 180:	mov	x0, #0x0                   	// #0
 184:	udiv	x1, x9, x8
 188:	add	w4, w0, #0x1
 18c:	msub	x2, x1, x8, x9
 190:	str	x2, [x25, x0, lsl #3]
 194:	mov	x2, x9
 198:	cmp	x2, x8
 19c:	mov	x9, x1
 1a0:	b.cs	28c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1e4>  // b.hs, b.nlast
 1a4:	cmp	w19, w4
 1a8:	b.le	1c4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x11c>
 1ac:	sub	w2, w19, w4
 1b0:	add	x0, x25, w4, sxtw #3
 1b4:	mov	w1, #0x0                   	// #0
 1b8:	sbfiz	x2, x2, #3, #32
 1bc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1c0:	mov	w4, w19
 1c4:	sub	w4, w4, #0x1
 1c8:	mov	w7, #0x20                  	// #32
 1cc:	mov	w6, #0x30                  	// #48
 1d0:	sxtw	x4, w4
 1d4:	ldr	x0, [x25, x4, lsl #3]
 1d8:	mov	w5, w4
 1dc:	cbnz	x0, 20c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x164>
 1e0:	cmp	w4, #0x0
 1e4:	mov	x1, x21
 1e8:	ccmp	w22, #0x0, #0x0, ne  // ne = any
 1ec:	mov	x0, x20
 1f0:	csel	w2, w7, w6, eq  // eq = none
 1f4:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 1f8:	sub	x4, x4, #0x1
 1fc:	add	w24, w24, w0
 200:	mov	w5, w4
 204:	cmn	w4, #0x1
 208:	b.ne	1d4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x12c>  // b.any
 20c:	eor	w22, w22, #0x1
 210:	tst	w26, w22
 214:	b.eq	22c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x184>  // b.none
 218:	mov	x1, x21
 21c:	mov	x0, x20
 220:	mov	w2, #0x2d                  	// #45
 224:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 228:	add	w24, w24, w0
 22c:	cmp	w23, #0x0
 230:	mov	w0, #0x41                  	// #65
 234:	mov	w1, #0x61                  	// #97
 238:	csel	w0, w0, w1, ne  // ne = any
 23c:	sxtw	x4, w5
 240:	sub	w5, w0, #0xa
 244:	cmn	w4, #0x1
 248:	b.eq	2a4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1fc>  // b.none
 24c:	ldr	x0, [x25, x4, lsl #3]
 250:	and	w0, w0, #0xff
 254:	cmp	w0, #0x9
 258:	add	w2, w0, w5
 25c:	add	w1, w0, #0x30
 260:	and	w2, w2, #0xff
 264:	and	w1, w1, #0xff
 268:	mov	x0, x20
 26c:	csel	w2, w2, w1, hi  // hi = pmore
 270:	mov	x1, x21
 274:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 278:	add	w24, w24, w0
 27c:	sub	x4, x4, #0x1
 280:	b	244 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x19c>
 284:	mov	w24, #0x0                   	// #0
 288:	b	178 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xd0>
 28c:	add	x0, x0, #0x1
 290:	cmp	x0, #0x1e
 294:	b.ne	184 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xdc>  // b.any
 298:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 29c:	add	x0, x0, #0x0
 2a0:	b	e0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x38>
 2a4:	mov	w0, w24
 2a8:	ldp	x21, x22, [sp, #16]
 2ac:	ldp	x23, x24, [sp, #32]
 2b0:	ldp	x25, x26, [sp, #48]
 2b4:	ldr	x30, [sp, #64]
 2b8:	ldp	x19, x20, [sp], #320
 2bc:	ret

00000000000002c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>:
 2c0:	stp	x19, x20, [sp, #-128]!
 2c4:	stp	x21, x22, [sp, #16]
 2c8:	stp	x23, x24, [sp, #32]
 2cc:	stp	x25, x26, [sp, #48]
 2d0:	stp	x27, x28, [sp, #64]
 2d4:	str	x30, [sp, #80]
 2d8:	str	x0, [sp, #120]
 2dc:	cbnz	x2, 2f0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x30>
 2e0:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 2e4:	add	x0, x0, #0x0
 2e8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2ec:	bl	0 <_ZN11__sanitizer3DieEv>
 2f0:	cmp	w1, #0x0
 2f4:	b.gt	304 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x44>
 2f8:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 2fc:	add	x0, x0, #0x0
 300:	b	2e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x28>
 304:	ldp	x19, x22, [x3]
 308:	mov	x25, x0
 30c:	sxtw	x0, w1
 310:	ldr	w20, [x3, #24]
 314:	sub	x1, x0, #0x1
 318:	adrp	x26, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 31c:	adrp	x27, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 320:	mov	x28, x2
 324:	add	x24, x25, x1
 328:	add	x23, sp, #0x78
 32c:	add	x26, x26, #0x0
 330:	add	x27, x27, #0x0
 334:	mov	w21, #0x0                   	// #0
 338:	str	x0, [sp, #96]
 33c:	ldrb	w2, [x28]
 340:	cbz	w2, 7e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x528>
 344:	cmp	w2, #0x25
 348:	b.eq	35c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x9c>  // b.none
 34c:	mov	x1, x24
 350:	mov	x0, x23
 354:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 358:	b	540 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x280>
 35c:	mov	x0, x28
 360:	add	x6, x28, #0x2
 364:	mov	w8, #0x0                   	// #0
 368:	ldrb	w10, [x0, #1]!
 36c:	cmp	w10, #0x2d
 370:	csel	x6, x6, x0, eq  // eq = none
 374:	ldrb	w0, [x6]
 378:	sub	w9, w0, #0x30
 37c:	and	w9, w9, #0xff
 380:	cmp	w9, #0x9
 384:	cset	w7, ls  // ls = plast
 388:	cmp	w0, #0x30
 38c:	cset	w5, eq  // eq = none
 390:	cmp	w9, #0x9
 394:	b.hi	3c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x100>  // b.pmore
 398:	mov	w3, #0xa                   	// #10
 39c:	ldrb	w2, [x6]
 3a0:	sub	w0, w2, #0x30
 3a4:	and	w0, w0, #0xff
 3a8:	cmp	w0, #0x9
 3ac:	b.hi	3c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x100>  // b.pmore
 3b0:	madd	w8, w8, w3, w2
 3b4:	add	x6, x6, #0x1
 3b8:	sub	w8, w8, #0x30
 3bc:	b	39c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xdc>
 3c0:	ldrb	w0, [x6]
 3c4:	cmp	w0, #0x2e
 3c8:	b.ne	494 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1d4>  // b.any
 3cc:	ldrb	w0, [x6, #1]
 3d0:	cmp	w0, #0x2a
 3d4:	b.ne	494 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1d4>  // b.any
 3d8:	add	x6, x6, #0x2
 3dc:	tbnz	w20, #31, 470 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1b0>
 3e0:	add	x0, x19, #0xb
 3e4:	mov	w2, w20
 3e8:	and	x0, x0, #0xfffffffffffffff8
 3ec:	ldr	w3, [x19]
 3f0:	mov	w20, w2
 3f4:	mov	x19, x0
 3f8:	ldrb	w4, [x6]
 3fc:	cmp	w4, #0x7a
 400:	cset	w2, eq  // eq = none
 404:	cset	x11, eq  // eq = none
 408:	cinc	x0, x6, eq  // eq = none
 40c:	b.eq	49c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1dc>  // b.none
 410:	ldrb	w4, [x6, x11]
 414:	cmp	w4, #0x6c
 418:	b.ne	49c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1dc>  // b.any
 41c:	ldrb	w4, [x0, #1]
 420:	cmp	w4, #0x6c
 424:	cset	w4, eq  // eq = none
 428:	lsl	w11, w4, #1
 42c:	orr	w2, w4, w2
 430:	cmp	w10, #0x2d
 434:	orr	w6, w7, w2
 438:	add	x28, x0, w11, sxtw
 43c:	ccmp	w3, #0x0, #0x0, ne  // ne = any
 440:	ldrb	w0, [x0, w11, sxtw]
 444:	b.lt	4a4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1e4>  // b.tstop
 448:	cmp	w0, #0x73
 44c:	b.eq	4d4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x214>  // b.none
 450:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 454:	add	x2, x2, #0x0
 458:	mov	x4, #0x0                   	// #0
 45c:	mov	x3, #0x0                   	// #0
 460:	mov	w1, #0xa9                  	// #169
 464:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 468:	add	x0, x0, #0x0
 46c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 470:	add	w2, w20, #0x8
 474:	cmp	w2, #0x0
 478:	b.le	488 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1c8>
 47c:	add	x0, x19, #0xb
 480:	and	x0, x0, #0xfffffffffffffff8
 484:	b	3ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x12c>
 488:	mov	x0, x19
 48c:	add	x19, x22, w20, sxtw
 490:	b	3ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x12c>
 494:	mov	w3, #0xffffffff            	// #-1
 498:	b	3f8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x138>
 49c:	mov	w4, #0x0                   	// #0
 4a0:	b	428 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x168>
 4a4:	cmp	w0, #0x64
 4a8:	b.eq	4fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x23c>  // b.none
 4ac:	b.hi	4d4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x214>  // b.pmore
 4b0:	cmp	w0, #0x58
 4b4:	b.eq	5b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f0>  // b.none
 4b8:	cmp	w0, #0x63
 4bc:	b.eq	784 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4c4>  // b.none
 4c0:	cmp	w0, #0x25
 4c4:	b.eq	7dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x51c>  // b.none
 4c8:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 4cc:	add	x0, x0, #0x0
 4d0:	b	2e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x28>
 4d4:	sub	w7, w0, #0x70
 4d8:	and	w11, w7, #0xff
 4dc:	cmp	w11, #0x8
 4e0:	b.hi	4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>  // b.pmore
 4e4:	cmp	w7, #0x8
 4e8:	b.hi	4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>  // b.pmore
 4ec:	ldrh	w1, [x26, w7, uxtw #1]
 4f0:	adr	x7, 4fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x23c>
 4f4:	add	x1, x7, w1, sxth #2
 4f8:	br	x1
 4fc:	cbz	w4, 54c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x28c>
 500:	tbnz	w20, #31, 568 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2a8>
 504:	add	x0, x19, #0xf
 508:	mov	w3, w20
 50c:	and	x0, x0, #0xfffffffffffffff8
 510:	ldr	x2, [x19]
 514:	cmp	x2, #0x0
 518:	lsr	x6, x2, #63
 51c:	mov	x19, x0
 520:	mov	w4, w8
 524:	cneg	x2, x2, lt  // lt = tstop
 528:	mov	w20, w3
 52c:	mov	w7, #0x0                   	// #0
 530:	mov	w3, #0xa                   	// #10
 534:	mov	x1, x24
 538:	mov	x0, x23
 53c:	bl	a8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 540:	add	w21, w21, w0
 544:	add	x28, x28, #0x1
 548:	b	33c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x7c>
 54c:	cbnz	w2, 500 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x240>
 550:	tbnz	w20, #31, 58c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2cc>
 554:	add	x0, x19, #0xb
 558:	mov	w3, w20
 55c:	and	x0, x0, #0xfffffffffffffff8
 560:	ldrsw	x2, [x19]
 564:	b	514 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x254>
 568:	add	w3, w20, #0x8
 56c:	cmp	w3, #0x0
 570:	b.le	580 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2c0>
 574:	add	x0, x19, #0xf
 578:	and	x0, x0, #0xfffffffffffffff8
 57c:	b	510 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x250>
 580:	mov	x0, x19
 584:	add	x19, x22, w20, sxtw
 588:	b	510 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x250>
 58c:	add	w3, w20, #0x8
 590:	cmp	w3, #0x0
 594:	b.le	5a4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2e4>
 598:	add	x0, x19, #0xb
 59c:	and	x0, x0, #0xfffffffffffffff8
 5a0:	b	560 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2a0>
 5a4:	mov	x0, x19
 5a8:	add	x19, x22, w20, sxtw
 5ac:	b	560 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2a0>
 5b0:	cbz	w4, 5f4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x334>
 5b4:	tbnz	w20, #31, 610 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x350>
 5b8:	add	x3, x19, #0xf
 5bc:	mov	w4, w20
 5c0:	and	x3, x3, #0xfffffffffffffff8
 5c4:	ldr	x2, [x19]
 5c8:	cmp	w0, #0x58
 5cc:	cset	w7, eq  // eq = none
 5d0:	cmp	w0, #0x75
 5d4:	mov	w20, w4
 5d8:	mov	x19, x3
 5dc:	mov	w0, #0x10                  	// #16
 5e0:	mov	w3, #0xa                   	// #10
 5e4:	mov	w4, w8
 5e8:	csel	w3, w3, w0, eq  // eq = none
 5ec:	mov	w6, #0x0                   	// #0
 5f0:	b	534 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x274>
 5f4:	cbnz	w2, 5b4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f4>
 5f8:	tbnz	w20, #31, 634 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x374>
 5fc:	add	x3, x19, #0xb
 600:	mov	w4, w20
 604:	and	x3, x3, #0xfffffffffffffff8
 608:	ldr	w2, [x19]
 60c:	b	5c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x308>
 610:	add	w4, w20, #0x8
 614:	cmp	w4, #0x0
 618:	b.le	628 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x368>
 61c:	add	x3, x19, #0xf
 620:	and	x3, x3, #0xfffffffffffffff8
 624:	b	5c4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x304>
 628:	mov	x3, x19
 62c:	add	x19, x22, w20, sxtw
 630:	b	5c4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x304>
 634:	add	w4, w20, #0x8
 638:	cmp	w4, #0x0
 63c:	b.le	64c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x38c>
 640:	add	x3, x19, #0xb
 644:	and	x3, x3, #0xfffffffffffffff8
 648:	b	608 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x348>
 64c:	mov	x3, x19
 650:	add	x19, x22, w20, sxtw
 654:	b	608 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x348>
 658:	cbnz	w6, 4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>
 65c:	tbnz	w20, #31, 6d4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x414>
 660:	add	x8, x19, #0xf
 664:	mov	w9, w20
 668:	and	x8, x8, #0xfffffffffffffff8
 66c:	ldr	x10, [x19]
 670:	mov	x4, x27
 674:	mov	x1, x24
 678:	mov	w3, #0xffffffff            	// #-1
 67c:	mov	w2, #0x0                   	// #0
 680:	mov	x0, x23
 684:	str	x8, [sp, #104]
 688:	str	w9, [sp, #116]
 68c:	bl	28 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 690:	mov	x1, x24
 694:	mov	w19, w0
 698:	mov	x2, x10
 69c:	mov	x0, x23
 6a0:	mov	w7, #0x0                   	// #0
 6a4:	mov	w6, #0x0                   	// #0
 6a8:	mov	w5, #0x1                   	// #1
 6ac:	mov	w4, #0xc                   	// #12
 6b0:	mov	w3, #0x10                  	// #16
 6b4:	bl	a8 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 6b8:	ldr	x8, [sp, #104]
 6bc:	add	w19, w19, w0
 6c0:	ldr	w9, [sp, #116]
 6c4:	add	w21, w21, w19
 6c8:	mov	x19, x8
 6cc:	mov	w20, w9
 6d0:	b	544 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x284>
 6d4:	add	w9, w20, #0x8
 6d8:	cmp	w9, #0x0
 6dc:	b.le	6ec <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x42c>
 6e0:	add	x8, x19, #0xf
 6e4:	and	x8, x8, #0xfffffffffffffff8
 6e8:	b	66c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3ac>
 6ec:	mov	x8, x19
 6f0:	add	x19, x22, w20, sxtw
 6f4:	b	66c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3ac>
 6f8:	cbnz	w2, 4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>
 6fc:	cmp	w10, #0x2d
 700:	ccmp	w9, #0x9, #0x2, ne  // ne = any
 704:	b.hi	720 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x460>  // b.pmore
 708:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 70c:	mov	x4, #0x0                   	// #0
 710:	add	x2, x2, #0x0
 714:	mov	x3, #0x0                   	// #0
 718:	mov	w1, #0xc6                  	// #198
 71c:	b	464 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1a4>
 720:	cmp	w10, #0x2d
 724:	b.ne	72c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x46c>  // b.any
 728:	neg	w8, w8
 72c:	tbnz	w20, #31, 760 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4a0>
 730:	add	x10, x19, #0xf
 734:	mov	w11, w20
 738:	and	x10, x10, #0xfffffffffffffff8
 73c:	ldr	x4, [x19]
 740:	mov	w2, w8
 744:	mov	x1, x24
 748:	mov	x0, x23
 74c:	bl	28 <_ZN11__sanitizerL12AppendStringEPPcPKciiS3_>
 750:	add	w21, w21, w0
 754:	mov	w20, w11
 758:	mov	x19, x10
 75c:	b	544 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x284>
 760:	add	w11, w20, #0x8
 764:	cmp	w11, #0x0
 768:	b.le	778 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4b8>
 76c:	add	x10, x19, #0xf
 770:	and	x10, x10, #0xfffffffffffffff8
 774:	b	73c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x47c>
 778:	mov	x10, x19
 77c:	add	x19, x22, w20, sxtw
 780:	b	73c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x47c>
 784:	cbnz	w6, 4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>
 788:	tbnz	w20, #31, 7b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4f8>
 78c:	add	x4, x19, #0xb
 790:	mov	w5, w20
 794:	and	x4, x4, #0xfffffffffffffff8
 798:	ldrb	w2, [x19]
 79c:	mov	x1, x24
 7a0:	mov	x0, x23
 7a4:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 7a8:	add	w21, w21, w0
 7ac:	mov	w20, w5
 7b0:	mov	x19, x4
 7b4:	b	544 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x284>
 7b8:	add	w5, w20, #0x8
 7bc:	cmp	w5, #0x0
 7c0:	b.le	7d0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x510>
 7c4:	add	x4, x19, #0xb
 7c8:	and	x4, x4, #0xfffffffffffffff8
 7cc:	b	798 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4d8>
 7d0:	mov	x4, x19
 7d4:	add	x19, x22, w20, sxtw
 7d8:	b	798 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4d8>
 7dc:	cbnz	w6, 4c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x208>
 7e0:	mov	w2, w0
 7e4:	b	34c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x8c>
 7e8:	ldr	x0, [sp, #120]
 7ec:	cmp	x0, x24
 7f0:	b.ls	800 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x540>  // b.plast
 7f4:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 7f8:	add	x0, x0, #0x0
 7fc:	b	2e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x28>
 800:	ldr	x0, [sp, #96]
 804:	mov	w2, #0x0                   	// #0
 808:	add	x1, x25, x0
 80c:	add	x0, sp, #0x78
 810:	bl	0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 814:	mov	w0, w21
 818:	ldp	x21, x22, [sp, #16]
 81c:	ldp	x23, x24, [sp, #32]
 820:	ldp	x25, x26, [sp, #48]
 824:	ldp	x27, x28, [sp, #64]
 828:	ldr	x30, [sp, #80]
 82c:	ldp	x19, x20, [sp], #128
 830:	ret

0000000000000834 <_ZN11__sanitizer26SetPrintfAndReportCallbackEPFvPKcE>:
 834:	adrp	x1, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 838:	str	x0, [x1]
 83c:	ret

0000000000000840 <OnPrint>:
 840:	ret

0000000000000844 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>:
 844:	sub	sp, sp, #0x100
 848:	stp	x3, x4, [sp, #216]
 84c:	add	x3, sp, #0x100
 850:	stp	x3, x3, [sp, #48]
 854:	add	x3, sp, #0xd0
 858:	str	x3, [sp, #64]
 85c:	mov	w3, #0xffffffd8            	// #-40
 860:	str	w3, [sp, #72]
 864:	mov	w3, #0xffffff80            	// #-128
 868:	str	w3, [sp, #76]
 86c:	add	x3, sp, #0x10
 870:	stp	x5, x6, [sp, #232]
 874:	ldp	x4, x5, [sp, #48]
 878:	stp	x4, x5, [sp, #16]
 87c:	ldp	x4, x5, [sp, #64]
 880:	str	x30, [sp]
 884:	stp	x4, x5, [sp, #32]
 888:	str	q0, [sp, #80]
 88c:	str	q1, [sp, #96]
 890:	str	q2, [sp, #112]
 894:	str	q3, [sp, #128]
 898:	str	q4, [sp, #144]
 89c:	str	q5, [sp, #160]
 8a0:	str	q6, [sp, #176]
 8a4:	str	q7, [sp, #192]
 8a8:	str	x7, [sp, #248]
 8ac:	bl	2c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 8b0:	ldr	x30, [sp]
 8b4:	add	sp, sp, #0x100
 8b8:	ret

00000000000008bc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>:
 8bc:	stp	x19, x20, [sp, #-176]!
 8c0:	and	w0, w0, #0xff
 8c4:	mov	x19, x1
 8c8:	stp	x25, x26, [sp, #48]
 8cc:	adrp	x25, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 8d0:	adrp	x26, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 8d4:	ldr	x25, [x25]
 8d8:	stp	x21, x22, [sp, #16]
 8dc:	mov	x21, x1
 8e0:	str	w0, [sp, #108]
 8e4:	add	x26, x26, #0x0
 8e8:	ldp	x0, x1, [x3]
 8ec:	stp	x23, x24, [sp, #32]
 8f0:	mov	x23, x2
 8f4:	add	x24, sp, #0x70
 8f8:	stp	x27, x28, [sp, #64]
 8fc:	mov	x28, x3
 900:	stp	x0, x1, [sp, #144]
 904:	mov	w22, #0x0                   	// #0
 908:	mov	w20, #0x190                 	// #400
 90c:	ldp	x0, x1, [x3, #16]
 910:	str	x30, [sp, #80]
 914:	stp	x0, x1, [sp, #160]
 918:	ldr	w0, [sp, #108]
 91c:	cbz	w0, a8c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1d0>
 920:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 924:	str	x0, [sp, #96]
 928:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 92c:	mov	x3, x0
 930:	ldrb	w0, [x25, #48]
 934:	cbz	w0, 9b0 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf4>
 938:	cbz	x3, 9b0 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf4>
 93c:	sxtw	x1, w20
 940:	mov	x0, x19
 944:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 948:	add	x2, x2, #0x0
 94c:	bl	844 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 950:	mov	w27, w0
 954:	cmp	w20, w0
 958:	b.gt	9b4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 95c:	cbz	w22, 97c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xc0>
 960:	mov	w0, #0x3fff                	// #16383
 964:	cmp	w27, w0
 968:	b.le	9b4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 96c:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 970:	add	x0, x0, #0x0
 974:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 978:	bl	0 <_ZN11__sanitizer3DieEv>
 97c:	ldp	x0, x1, [sp, #144]
 980:	stp	x0, x1, [x28]
 984:	mov	w2, #0x0                   	// #0
 988:	ldp	x0, x1, [sp, #160]
 98c:	stp	x0, x1, [x28, #16]
 990:	mov	w22, #0x1                   	// #1
 994:	mov	w20, #0x4000                	// #16384
 998:	adrp	x1, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 99c:	mov	x0, #0x4000                	// #16384
 9a0:	add	x1, x1, #0x0
 9a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 9a8:	mov	x19, x0
 9ac:	b	918 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x5c>
 9b0:	mov	w27, #0x0                   	// #0
 9b4:	ldr	w3, [sp, #96]
 9b8:	sub	w1, w20, w27
 9bc:	add	x0, x19, w27, sxtw
 9c0:	mov	x2, x26
 9c4:	sxtw	x1, w1
 9c8:	bl	844 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 9cc:	add	w27, w27, w0
 9d0:	cmp	w20, w27
 9d4:	b.gt	9e8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x12c>
 9d8:	cbz	w22, 97c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xc0>
 9dc:	mov	w0, #0x3fff                	// #16383
 9e0:	cmp	w27, w0
 9e4:	b.gt	96c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xb0>
 9e8:	ldp	x0, x1, [x28]
 9ec:	stp	x0, x1, [x24]
 9f0:	mov	x3, x24
 9f4:	ldp	x0, x1, [x28, #16]
 9f8:	mov	x2, x23
 9fc:	stp	x0, x1, [x24, #16]
 a00:	sub	w1, w20, w27
 a04:	add	x0, x19, w27, sxtw
 a08:	bl	2c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 a0c:	add	w4, w27, w0
 a10:	cmp	w20, w4
 a14:	b.gt	a28 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x16c>
 a18:	cbz	w22, 97c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xc0>
 a1c:	mov	w0, #0x3fff                	// #16383
 a20:	cmp	w4, w0
 a24:	b.gt	96c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xb0>
 a28:	mov	x0, x19
 a2c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a30:	mov	x0, x19
 a34:	bl	0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>
 a38:	mov	x0, x19
 a3c:	bl	840 <OnPrint>
 a40:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 a44:	ldr	x1, [x0]
 a48:	cbz	x1, a54 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x198>
 a4c:	mov	x0, x19
 a50:	blr	x1
 a54:	mov	x0, x19
 a58:	bl	0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>
 a5c:	cmp	x19, x21
 a60:	b.eq	a70 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1b4>  // b.none
 a64:	sxtw	x1, w20
 a68:	mov	x0, x19
 a6c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a70:	ldp	x21, x22, [sp, #16]
 a74:	ldp	x23, x24, [sp, #32]
 a78:	ldp	x25, x26, [sp, #48]
 a7c:	ldp	x27, x28, [sp, #64]
 a80:	ldr	x30, [sp, #80]
 a84:	ldp	x19, x20, [sp], #176
 a88:	ret
 a8c:	mov	w27, #0x0                   	// #0
 a90:	b	9e8 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x12c>

0000000000000a94 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>:
 a94:	sub	sp, sp, #0x1c0
 a98:	ldp	x4, x5, [x2]
 a9c:	stp	x4, x5, [sp, #16]
 aa0:	ldp	x2, x3, [x2, #16]
 aa4:	str	x30, [sp]
 aa8:	stp	x2, x3, [sp, #32]
 aac:	add	x3, sp, #0x10
 ab0:	mov	x2, x1
 ab4:	add	x1, sp, #0x30
 ab8:	bl	8bc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>
 abc:	ldr	x30, [sp]
 ac0:	add	sp, sp, #0x1c0
 ac4:	ret

0000000000000ac8 <_ZN11__sanitizer6PrintfEPKcz>:
 ac8:	sub	sp, sp, #0x110
 acc:	stp	x1, x2, [sp, #216]
 ad0:	add	x1, sp, #0x110
 ad4:	stp	x1, x1, [sp, #48]
 ad8:	add	x1, sp, #0xd0
 adc:	str	x1, [sp, #64]
 ae0:	mov	w1, #0xffffffc8            	// #-56
 ae4:	str	w1, [sp, #72]
 ae8:	mov	w1, #0xffffff80            	// #-128
 aec:	str	w1, [sp, #76]
 af0:	mov	x1, x0
 af4:	stp	x3, x4, [sp, #232]
 af8:	mov	w0, #0x0                   	// #0
 afc:	ldp	x2, x3, [sp, #48]
 b00:	stp	x2, x3, [sp, #16]
 b04:	ldp	x2, x3, [sp, #64]
 b08:	str	x30, [sp]
 b0c:	stp	x2, x3, [sp, #32]
 b10:	add	x2, sp, #0x10
 b14:	str	q0, [sp, #80]
 b18:	str	q1, [sp, #96]
 b1c:	str	q2, [sp, #112]
 b20:	str	q3, [sp, #128]
 b24:	str	q4, [sp, #144]
 b28:	str	q5, [sp, #160]
 b2c:	str	q6, [sp, #176]
 b30:	str	q7, [sp, #192]
 b34:	stp	x5, x6, [sp, #248]
 b38:	str	x7, [sp, #264]
 b3c:	bl	a94 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 b40:	ldr	x30, [sp]
 b44:	add	sp, sp, #0x110
 b48:	ret

0000000000000b4c <_ZN11__sanitizer6ReportEPKcz>:
 b4c:	sub	sp, sp, #0x110
 b50:	stp	x1, x2, [sp, #216]
 b54:	add	x1, sp, #0x110
 b58:	stp	x1, x1, [sp, #48]
 b5c:	add	x1, sp, #0xd0
 b60:	str	x1, [sp, #64]
 b64:	mov	w1, #0xffffffc8            	// #-56
 b68:	str	w1, [sp, #72]
 b6c:	mov	w1, #0xffffff80            	// #-128
 b70:	str	w1, [sp, #76]
 b74:	mov	x1, x0
 b78:	stp	x3, x4, [sp, #232]
 b7c:	mov	w0, #0x1                   	// #1
 b80:	ldp	x2, x3, [sp, #48]
 b84:	stp	x2, x3, [sp, #16]
 b88:	ldp	x2, x3, [sp, #64]
 b8c:	str	x30, [sp]
 b90:	stp	x2, x3, [sp, #32]
 b94:	add	x2, sp, #0x10
 b98:	str	q0, [sp, #80]
 b9c:	str	q1, [sp, #96]
 ba0:	str	q2, [sp, #112]
 ba4:	str	q3, [sp, #128]
 ba8:	str	q4, [sp, #144]
 bac:	str	q5, [sp, #160]
 bb0:	str	q6, [sp, #176]
 bb4:	str	q7, [sp, #192]
 bb8:	stp	x5, x6, [sp, #248]
 bbc:	str	x7, [sp, #264]
 bc0:	bl	a94 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 bc4:	ldr	x30, [sp]
 bc8:	add	sp, sp, #0x110
 bcc:	ret

0000000000000bd0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>:
 bd0:	stp	x19, x30, [sp, #-256]!
 bd4:	mov	x19, x0
 bd8:	str	q0, [sp, #80]
 bdc:	str	q1, [sp, #96]
 be0:	str	q2, [sp, #112]
 be4:	str	q3, [sp, #128]
 be8:	str	q4, [sp, #144]
 bec:	str	q5, [sp, #160]
 bf0:	str	q6, [sp, #176]
 bf4:	str	q7, [sp, #192]
 bf8:	stp	x2, x3, [sp, #208]
 bfc:	stp	x4, x5, [sp, #224]
 c00:	stp	x6, x7, [sp, #240]
 c04:	ldr	x4, [x19, #16]
 c08:	ldr	x0, [x0, #24]
 c0c:	cmp	x0, x4
 c10:	b.cc	c30 <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0x60>  // b.lo, b.ul, b.last
 c14:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 c18:	mov	x3, x0
 c1c:	add	x2, x2, #0x0
 c20:	mov	w1, #0x15c                 	// #348
 c24:	adrp	x0, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 c28:	add	x0, x0, #0x0
 c2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 c30:	add	x2, sp, #0x100
 c34:	stp	x2, x2, [sp, #48]
 c38:	add	x2, sp, #0xd0
 c3c:	str	x2, [sp, #64]
 c40:	mov	w2, #0xffffffd0            	// #-48
 c44:	str	w2, [sp, #72]
 c48:	mov	w2, #0xffffff80            	// #-128
 c4c:	str	w2, [sp, #76]
 c50:	ldr	x5, [x19]
 c54:	ldp	x2, x3, [sp, #48]
 c58:	stp	x2, x3, [sp, #16]
 c5c:	ldp	x2, x3, [sp, #64]
 c60:	stp	x2, x3, [sp, #32]
 c64:	add	x3, sp, #0x10
 c68:	mov	x2, x1
 c6c:	sub	w1, w4, w0
 c70:	add	x0, x5, x0
 c74:	bl	2c0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 c78:	ldr	x1, [x19]
 c7c:	ldr	x0, [x19, #24]
 c80:	add	x0, x1, x0
 c84:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 c88:	ldp	x4, x3, [x19, #16]
 c8c:	add	x3, x0, x3
 c90:	str	x3, [x19, #24]
 c94:	cmp	x3, x4
 c98:	b.cc	cac <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xdc>  // b.lo, b.ul, b.last
 c9c:	adrp	x2, 0 <_ZN11__sanitizerL10AppendCharEPPcPKcc>
 ca0:	mov	w1, #0x162                 	// #354
 ca4:	add	x2, x2, #0x0
 ca8:	b	c24 <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0x54>
 cac:	ldp	x19, x30, [sp], #256
 cb0:	ret

sanitizer_procmaps_bsd.o:     file format elf64-littleaarch64


sanitizer_procmaps_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL14TranslateDigitEc>:
   0:	and	w1, w0, #0xff
   4:	sub	w0, w1, #0x30
   8:	and	w2, w0, #0xff
   c:	cmp	w2, #0x9
  10:	b.ls	28 <_ZN11__sanitizerL14TranslateDigitEc+0x28>  // b.plast
  14:	sub	w0, w1, #0x61
  18:	and	w0, w0, #0xff
  1c:	cmp	w0, #0x5
  20:	b.hi	2c <_ZN11__sanitizerL14TranslateDigitEc+0x2c>  // b.pmore
  24:	sub	w0, w1, #0x57
  28:	ret
  2c:	sub	w0, w1, #0x41
  30:	sub	w1, w1, #0x37
  34:	and	w0, w0, #0xff
  38:	cmp	w0, #0x6
  3c:	csinv	w0, w1, wzr, cc  // cc = lo, ul, last
  40:	b	28 <_ZN11__sanitizerL14TranslateDigitEc+0x28>

0000000000000044 <_ZN11__sanitizer9IsDecimalEc>:
  44:	str	x30, [sp, #-16]!
  48:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  4c:	cmp	w0, #0x9
  50:	cset	w0, ls  // ls = plast
  54:	ldr	x30, [sp], #16
  58:	ret

000000000000005c <_ZN11__sanitizer12ParseDecimalEPPKc>:
  5c:	mov	x3, x0
  60:	mov	x5, #0x0                   	// #0
  64:	mov	x6, #0xa                   	// #10
  68:	str	x30, [sp, #-16]!
  6c:	ldr	x4, [x3]
  70:	ldrb	w0, [x4]
  74:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  78:	cmp	w0, #0x9
  7c:	b.hi	94 <_ZN11__sanitizer12ParseDecimalEPPKc+0x38>  // b.pmore
  80:	sxtw	x1, w0
  84:	add	x4, x4, #0x1
  88:	str	x4, [x3]
  8c:	madd	x5, x5, x6, x1
  90:	b	6c <_ZN11__sanitizer12ParseDecimalEPPKc+0x10>
  94:	mov	x0, x5
  98:	ldr	x30, [sp], #16
  9c:	ret

00000000000000a0 <_ZN11__sanitizer5IsHexEc>:
  a0:	str	x30, [sp, #-16]!
  a4:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  a8:	cmp	w0, #0xf
  ac:	cset	w0, ls  // ls = plast
  b0:	ldr	x30, [sp], #16
  b4:	ret

00000000000000b8 <_ZN11__sanitizer8ParseHexEPPKc>:
  b8:	mov	x3, x0
  bc:	mov	x5, #0x0                   	// #0
  c0:	str	x30, [sp, #-16]!
  c4:	ldr	x4, [x3]
  c8:	ldrb	w0, [x4]
  cc:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
  d0:	cmp	w0, #0xf
  d4:	b.hi	ec <_ZN11__sanitizer8ParseHexEPPKc+0x34>  // b.pmore
  d8:	sxtw	x1, w0
  dc:	add	x4, x4, #0x1
  e0:	add	x5, x1, x5, lsl #4
  e4:	str	x4, [x3]
  e8:	b	c4 <_ZN11__sanitizer8ParseHexEPPKc+0xc>
  ec:	mov	x0, x5
  f0:	ldr	x30, [sp], #16
  f4:	ret

00000000000000f8 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>:
  f8:	mov	x6, x0
  fc:	mov	x0, x1
 100:	ldr	x1, [x6, #72]
 104:	cbz	x1, 12c <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE+0x34>
 108:	str	x30, [sp, #-16]!
 10c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 110:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 114:	add	x2, x2, #0x0
 118:	add	x0, x0, #0x0
 11c:	mov	x4, #0x0                   	// #0
 120:	mov	x3, #0x0                   	// #0
 124:	mov	w1, #0x43                  	// #67
 128:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 12c:	ldp	x1, x2, [x6]
 130:	mov	x5, #0x0                   	// #0
 134:	ldr	x3, [x6, #40]
 138:	ubfx	w4, w3, #1, #1
 13c:	ubfx	w3, w3, #2, #1
 140:	b	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>

0000000000000144 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>:
 144:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 148:	mov	x1, x0
 14c:	ldr	x0, [x0]
 150:	ldr	x2, [x2]
 154:	cmp	x0, x2
 158:	b.eq	164 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev+0x20>  // b.none
 15c:	ldr	x1, [x1, #8]
 160:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 164:	ret

0000000000000168 <_ZN11__sanitizer19MemoryMappingLayout5ResetEv>:
 168:	ldr	x1, [x0]
 16c:	str	x1, [x0, #24]
 170:	ret

0000000000000174 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>:
 174:	stp	x19, x20, [sp, #-64]!
 178:	add	x0, sp, #0x28
 17c:	str	x30, [sp, #16]
 180:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 184:	ldr	x0, [sp, #48]
 188:	cbz	x0, 1c8 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x54>
 18c:	adrp	x19, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 190:	add	x20, x19, #0x0
 194:	add	x0, x20, #0x18
 198:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 19c:	ldr	x1, [x20, #8]
 1a0:	cbz	x1, 1ac <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x38>
 1a4:	ldr	x0, [x19]
 1a8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1ac:	add	x0, x19, #0x0
 1b0:	ldp	x2, x3, [sp, #40]
 1b4:	ldr	x1, [sp, #56]
 1b8:	stp	x2, x3, [x0]
 1bc:	str	x1, [x0, #16]
 1c0:	dmb	ish
 1c4:	strb	wzr, [x0, #24]
 1c8:	ldr	x30, [sp, #16]
 1cc:	ldp	x19, x20, [sp], #64
 1d0:	ret

00000000000001d4 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>:
 1d4:	stp	x19, x20, [sp, #-32]!
 1d8:	adrp	x19, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 1dc:	mov	x20, x0
 1e0:	stp	x21, x30, [sp, #16]
 1e4:	add	x21, x19, #0x0
 1e8:	add	x0, x21, #0x18
 1ec:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 1f0:	ldr	x0, [x19]
 1f4:	cbz	x0, 208 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x34>
 1f8:	ldp	x0, x1, [x21]
 1fc:	stp	x0, x1, [x20]
 200:	ldr	x0, [x21, #16]
 204:	str	x0, [x20, #16]
 208:	dmb	ish
 20c:	add	x19, x19, #0x0
 210:	strb	wzr, [x19, #24]
 214:	ldp	x21, x30, [sp, #16]
 218:	ldp	x19, x20, [sp], #32
 21c:	ret

0000000000000220 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>:
 220:	stp	x19, x20, [sp, #-32]!
 224:	mov	x19, x0
 228:	ands	w20, w1, #0xff
 22c:	str	x30, [sp, #16]
 230:	b.eq	238 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x18>  // b.none
 234:	bl	174 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 238:	mov	x0, x19
 23c:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 240:	cbz	w20, 254 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x34>
 244:	ldr	x0, [x19, #8]
 248:	cbnz	x0, 27c <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x5c>
 24c:	mov	x0, x19
 250:	bl	1d4 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>
 254:	ldr	x0, [x19, #8]
 258:	cbnz	x0, 27c <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x5c>
 25c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 260:	add	x2, x2, #0x0
 264:	mov	x4, #0x0                   	// #0
 268:	mov	x3, #0x0                   	// #0
 26c:	mov	w1, #0x51                  	// #81
 270:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 274:	add	x0, x0, #0x0
 278:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 27c:	ldr	x0, [x19, #16]
 280:	cbnz	x0, 29c <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x7c>
 284:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 288:	mov	x4, #0x0                   	// #0
 28c:	add	x2, x2, #0x0
 290:	mov	x3, #0x0                   	// #0
 294:	mov	w1, #0x52                  	// #82
 298:	b	270 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x50>
 29c:	ldr	x0, [x19]
 2a0:	ldr	x30, [sp, #16]
 2a4:	str	x0, [x19, #24]
 2a8:	ldp	x19, x20, [sp], #32
 2ac:	ret

00000000000002b0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m>:
 2b0:	stp	x19, x20, [sp, #-96]!
 2b4:	mov	x5, #0x0                   	// #0
 2b8:	mov	x4, #0x4000000             	// #67108864
 2bc:	add	x3, sp, #0x50
 2c0:	stp	x21, x22, [sp, #16]
 2c4:	mov	x21, x0
 2c8:	mov	x22, x1
 2cc:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 2d0:	add	x1, sp, #0x40
 2d4:	add	x0, x0, #0x0
 2d8:	stp	x23, x24, [sp, #32]
 2dc:	mov	x23, x2
 2e0:	add	x2, sp, #0x48
 2e4:	stp	x25, x30, [sp, #48]
 2e8:	stp	xzr, xzr, [sp, #64]
 2ec:	str	xzr, [sp, #80]
 2f0:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 2f4:	tst	w0, #0xff
 2f8:	b.eq	3e4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x134>  // b.none
 2fc:	adrp	x24, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 300:	add	x25, sp, #0x58
 304:	add	x24, x24, #0x0
 308:	mov	w20, #0x0                   	// #0
 30c:	ldr	x0, [sp, #64]
 310:	mov	x19, #0x0                   	// #0
 314:	str	x0, [sp, #88]
 318:	ldp	x1, x3, [sp, #80]
 31c:	ldr	x0, [sp, #64]
 320:	add	x1, x0, x1
 324:	cmp	x3, x1
 328:	b.cs	3dc <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x12c>  // b.hs, b.nlast
 32c:	ldrb	w0, [x3]
 330:	bl	a0 <_ZN11__sanitizer5IsHexEc>
 334:	tst	w0, #0xff
 338:	b.eq	36c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xbc>  // b.none
 33c:	mov	x0, x25
 340:	bl	b8 <_ZN11__sanitizer8ParseHexEPPKc>
 344:	mov	x19, x0
 348:	ldr	x0, [sp, #88]
 34c:	ldrb	w1, [x0], #1
 350:	cmp	w1, #0x2f
 354:	cset	w20, eq  // eq = none
 358:	cmp	w20, #0x0
 35c:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 360:	b.ls	3c0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x110>  // b.plast
 364:	str	x0, [sp, #88]
 368:	b	348 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x98>
 36c:	mov	x1, x24
 370:	mov	x0, x3
 374:	mov	x2, #0x4                   	// #4
 378:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 37c:	cbnz	w0, 3c0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x110>
 380:	ldr	x3, [sp, #88]
 384:	ldrb	w0, [x3]
 388:	bl	44 <_ZN11__sanitizer9IsDecimalEc>
 38c:	tst	w0, #0xff
 390:	b.ne	3a0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xf0>  // b.any
 394:	add	x3, x3, #0x1
 398:	str	x3, [sp, #88]
 39c:	b	380 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xd0>
 3a0:	mov	x0, x25
 3a4:	bl	5c <_ZN11__sanitizer12ParseDecimalEPPKc>
 3a8:	mov	x4, x23
 3ac:	lsl	x1, x0, #10
 3b0:	mov	x3, x22
 3b4:	mov	w2, w20
 3b8:	mov	x0, x19
 3bc:	blr	x21
 3c0:	ldr	x0, [sp, #88]
 3c4:	add	x1, x0, #0x1
 3c8:	str	x1, [sp, #88]
 3cc:	ldrb	w0, [x0]
 3d0:	cmp	w0, #0xa
 3d4:	b.ne	3c0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x110>  // b.any
 3d8:	b	318 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x68>
 3dc:	ldr	x1, [sp, #72]
 3e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e4:	ldp	x21, x22, [sp, #16]
 3e8:	ldp	x23, x24, [sp, #32]
 3ec:	ldp	x25, x30, [sp, #48]
 3f0:	ldp	x19, x20, [sp], #96
 3f4:	ret

00000000000003f8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>:
 3f8:	stp	x19, x20, [sp, #-288]!
 3fc:	mov	x19, x1
 400:	mov	x1, #0x1000                	// #4096
 404:	stp	x21, x22, [sp, #16]
 408:	mov	x21, x0
 40c:	add	x22, sp, #0x88
 410:	stp	x23, x24, [sp, #32]
 414:	adrp	x24, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 418:	add	x24, x24, #0x0
 41c:	stp	x25, x26, [sp, #48]
 420:	add	x25, sp, #0xd0
 424:	add	x26, x22, #0x1c
 428:	stp	x27, x28, [sp, #64]
 42c:	mov	x23, #0x0                   	// #0
 430:	ldr	x0, [x0]
 434:	str	x0, [x21, #24]
 438:	add	x0, sp, #0x68
 43c:	str	x30, [sp, #80]
 440:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 444:	str	xzr, [sp, #280]
 448:	ldr	x0, [sp, #104]
 44c:	str	x0, [sp, #232]
 450:	ldr	x0, [sp, #120]
 454:	str	x0, [sp, #240]
 458:	mov	x1, x25
 45c:	mov	x0, x21
 460:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 464:	tst	w0, #0xff
 468:	b.eq	574 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x17c>  // b.none
 46c:	ldr	x27, [sp, #232]
 470:	ldrb	w0, [x27]
 474:	cbz	w0, 608 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x210>
 478:	ldr	x20, [sp, #208]
 47c:	cmp	x23, #0x0
 480:	ldr	x0, [sp, #224]
 484:	csel	x20, x20, xzr, ne  // ne = any
 488:	mov	x2, #0x10                  	// #16
 48c:	mov	w1, #0x0                   	// #0
 490:	sub	x20, x20, x0
 494:	mov	x0, x26
 498:	stp	xzr, xzr, [sp, #136]
 49c:	str	xzr, [sp, #152]
 4a0:	str	wzr, [sp, #160]
 4a4:	strb	wzr, [sp, #180]
 4a8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 4ac:	mov	x2, x20
 4b0:	mov	x1, x27
 4b4:	mov	x0, x22
 4b8:	stp	xzr, xzr, [sp, #184]
 4bc:	str	xzr, [sp, #200]
 4c0:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 4c4:	mov	x0, x25
 4c8:	mov	x1, x22
 4cc:	bl	f8 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>
 4d0:	ldp	x4, x3, [x19, #8]
 4d4:	mov	x0, #0x48                  	// #72
 4d8:	udiv	x4, x4, x0
 4dc:	cmp	x3, x4
 4e0:	b.ls	4fc <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x104>  // b.plast
 4e4:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 4e8:	add	x2, x2, #0x0
 4ec:	mov	w1, #0x1be                 	// #446
 4f0:	adrp	x0, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 4f4:	add	x0, x0, #0x0
 4f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4fc:	b.ne	5e8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1f0>  // b.any
 500:	add	x20, x3, #0x1
 504:	tst	x3, x20
 508:	b.eq	5a4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1ac>  // b.none
 50c:	clz	x1, x20
 510:	mov	w0, #0x3f                  	// #63
 514:	sub	w1, w0, w1
 518:	mov	x0, #0x1                   	// #1
 51c:	add	w4, w1, #0x1
 520:	lsl	x4, x0, x4
 524:	cmp	x20, x4
 528:	b.cc	540 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x148>  // b.lo, b.ul, b.last
 52c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 530:	mov	x3, x20
 534:	add	x2, x2, #0x0
 538:	mov	w1, #0x17b                 	// #379
 53c:	b	4f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xf8>
 540:	lsl	x0, x0, x1
 544:	cmp	x20, x0
 548:	b.hi	598 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1a0>  // b.pmore
 54c:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 550:	mov	x4, x0
 554:	mov	x3, x20
 558:	add	x2, x2, #0x0
 55c:	mov	w1, #0x17c                 	// #380
 560:	b	4f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xf8>
 564:	adrp	x2, 0 <_ZN11__sanitizerL14TranslateDigitEc>
 568:	mov	w1, #0x1fd                 	// #509
 56c:	add	x2, x2, #0x0
 570:	b	4f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xf8>
 574:	ldp	x0, x1, [sp, #104]
 578:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 57c:	ldp	x21, x22, [sp, #16]
 580:	ldp	x23, x24, [sp, #32]
 584:	ldp	x25, x26, [sp, #48]
 588:	ldp	x27, x28, [sp, #64]
 58c:	ldr	x30, [sp, #80]
 590:	ldp	x19, x20, [sp], #288
 594:	ret
 598:	cmp	x3, x4
 59c:	b.hi	564 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x16c>  // b.pmore
 5a0:	mov	x20, x4
 5a4:	mov	x28, #0x48                  	// #72
 5a8:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 5ac:	mov	x1, x0
 5b0:	mul	x0, x20, x28
 5b4:	bl	0 <_ZN11__sanitizerL14TranslateDigitEc>
 5b8:	mov	x20, x0
 5bc:	mov	x1, x24
 5c0:	mov	w2, #0x0                   	// #0
 5c4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5c8:	mov	x27, x0
 5cc:	ldr	x2, [x19, #16]
 5d0:	ldr	x1, [x19]
 5d4:	mul	x2, x2, x28
 5d8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5dc:	ldp	x0, x1, [x19]
 5e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5e4:	stp	x27, x20, [x19]
 5e8:	mov	x2, #0x48                  	// #72
 5ec:	ldr	x3, [x19]
 5f0:	ldr	x0, [x19, #16]
 5f4:	add	x1, x0, #0x1
 5f8:	str	x1, [x19, #16]
 5fc:	madd	x0, x0, x2, x3
 600:	mov	x1, x22
 604:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 608:	add	x23, x23, #0x1
 60c:	b	458 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x60>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex4LockEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex4LockEv>:
   0:	mov	x1, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldxrb	w2, [x1]
   c:	stxrb	w4, w3, [x1]
  10:	cbnz	w4, 8 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x8>
  14:	dmb	ish
  18:	tst	w2, #0xff
  1c:	b.eq	24 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x24>  // b.none
  20:	b	0 <_ZN11__sanitizer15StaticSpinMutex4LockEv>
  24:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

sanitizer_procmaps_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	add	x3, x0, #0x10
   8:	add	x2, x0, #0x8
   c:	mov	x1, x0
  10:	mov	x19, x0
  14:	mov	x5, #0x0                   	// #0
  18:	mov	x4, #0x4000000             	// #67108864
  1c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
  28:	tst	w0, #0xff
  2c:	b.ne	38 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE+0x38>  // b.any
  30:	stp	xzr, xzr, [x19]
  34:	str	xzr, [x19, #16]
  38:	ldp	x19, x30, [sp], #16
  3c:	ret

0000000000000040 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>:
  40:	stp	x19, x20, [sp, #-64]!
  44:	mov	x19, x0
  48:	stp	x21, x22, [sp, #16]
  4c:	ldr	x22, [x0]
  50:	stp	x23, x24, [sp, #32]
  54:	ldr	x0, [x0, #16]
  58:	stp	x25, x30, [sp, #48]
  5c:	add	x22, x22, x0
  60:	ldr	x0, [x19, #24]
  64:	cmp	x0, x22
  68:	b.cs	39c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x35c>  // b.hs, b.nlast
  6c:	sub	x2, x22, x0
  70:	mov	x20, x1
  74:	mov	w1, #0xa                   	// #10
  78:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
  7c:	cmp	x0, #0x0
  80:	csel	x21, x0, x22, ne  // ne = any
  84:	add	x22, x19, #0x18
  88:	mov	x0, x22
  8c:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  90:	str	x0, [x20]
  94:	ldr	x0, [x19, #24]
  98:	add	x1, x0, #0x1
  9c:	str	x1, [x19, #24]
  a0:	ldrb	w23, [x0]
  a4:	cmp	x23, #0x2d
  a8:	b.eq	cc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x8c>  // b.none
  ac:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
  b0:	mov	x3, x23
  b4:	add	x2, x2, #0x0
  b8:	mov	x4, #0x2d                  	// #45
  bc:	mov	w1, #0x28                  	// #40
  c0:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  cc:	mov	x0, x22
  d0:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  d4:	ldr	x1, [x19, #24]
  d8:	str	x0, [x20, #8]
  dc:	add	x0, x1, #0x1
  e0:	str	x0, [x19, #24]
  e4:	ldrb	w3, [x1]
  e8:	cmp	x3, #0x20
  ec:	b.eq	104 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0xc4>  // b.none
  f0:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
  f4:	mov	x4, #0x20                  	// #32
  f8:	add	x2, x2, #0x0
  fc:	mov	w1, #0x2a                  	// #42
 100:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 104:	ldrb	w0, [x1, #1]
 108:	cmp	w0, #0x72
 10c:	ccmp	w0, w23, #0x4, ne  // ne = any
 110:	b.eq	12c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0xec>  // b.none
 114:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 118:	mov	x4, #0x0                   	// #0
 11c:	add	x2, x2, #0x0
 120:	mov	x3, #0x0                   	// #0
 124:	mov	w1, #0x2b                  	// #43
 128:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 12c:	str	xzr, [x20, #40]
 130:	add	x0, x1, #0x2
 134:	str	x0, [x19, #24]
 138:	ldrb	w0, [x1, #1]
 13c:	cmp	w0, #0x72
 140:	b.ne	14c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x10c>  // b.any
 144:	mov	x0, #0x1                   	// #1
 148:	str	x0, [x20, #40]
 14c:	ldrb	w0, [x1, #2]
 150:	mov	w2, #0x2d                  	// #45
 154:	cmp	w0, #0x77
 158:	ccmp	w0, w2, #0x4, ne  // ne = any
 15c:	b.eq	178 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x138>  // b.none
 160:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 164:	mov	x4, #0x0                   	// #0
 168:	add	x2, x2, #0x0
 16c:	mov	x3, #0x0                   	// #0
 170:	mov	w1, #0x2e                  	// #46
 174:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 178:	add	x0, x1, #0x3
 17c:	str	x0, [x19, #24]
 180:	ldrb	w0, [x1, #2]
 184:	cmp	w0, #0x77
 188:	b.ne	198 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x158>  // b.any
 18c:	ldr	x0, [x20, #40]
 190:	orr	x0, x0, #0x2
 194:	str	x0, [x20, #40]
 198:	ldrb	w0, [x1, #3]
 19c:	mov	w2, #0x78                  	// #120
 1a0:	cmp	w0, #0x2d
 1a4:	ccmp	w0, w2, #0x4, ne  // ne = any
 1a8:	b.eq	1c4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x184>  // b.none
 1ac:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 1b0:	mov	x4, #0x0                   	// #0
 1b4:	add	x2, x2, #0x0
 1b8:	mov	x3, #0x0                   	// #0
 1bc:	mov	w1, #0x30                  	// #48
 1c0:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 1c4:	add	x0, x1, #0x4
 1c8:	str	x0, [x19, #24]
 1cc:	ldrb	w0, [x1, #3]
 1d0:	cmp	w0, #0x78
 1d4:	b.ne	1e4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1a4>  // b.any
 1d8:	ldr	x0, [x20, #40]
 1dc:	orr	x0, x0, #0x4
 1e0:	str	x0, [x20, #40]
 1e4:	ldrb	w0, [x1, #4]
 1e8:	cmp	w0, #0x73
 1ec:	cset	w23, eq  // eq = none
 1f0:	cmp	w0, #0x70
 1f4:	csinc	w23, w23, wzr, ne  // ne = any
 1f8:	cbnz	w23, 214 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1d4>
 1fc:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 200:	mov	x4, #0x0                   	// #0
 204:	add	x2, x2, #0x0
 208:	mov	x3, #0x0                   	// #0
 20c:	mov	w1, #0x32                  	// #50
 210:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 214:	add	x0, x1, #0x5
 218:	str	x0, [x19, #24]
 21c:	ldrb	w0, [x1, #4]
 220:	cmp	w0, #0x73
 224:	b.ne	234 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1f4>  // b.any
 228:	ldr	x0, [x20, #40]
 22c:	orr	x0, x0, #0x8
 230:	str	x0, [x20, #40]
 234:	add	x0, x1, #0x6
 238:	str	x0, [x19, #24]
 23c:	ldrb	w24, [x1, #5]
 240:	cmp	x24, #0x20
 244:	b.eq	260 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x220>  // b.none
 248:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 24c:	mov	x3, x24
 250:	add	x2, x2, #0x0
 254:	mov	x4, #0x20                  	// #32
 258:	mov	w1, #0x34                  	// #52
 25c:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 260:	mov	x0, x22
 264:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 268:	str	x0, [x20, #16]
 26c:	ldr	x0, [x19, #24]
 270:	add	x1, x0, #0x1
 274:	str	x1, [x19, #24]
 278:	ldrb	w25, [x0]
 27c:	cmp	x25, #0x20
 280:	b.eq	29c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x25c>  // b.none
 284:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 288:	mov	x4, x24
 28c:	mov	x3, x25
 290:	add	x2, x2, #0x0
 294:	mov	w1, #0x36                  	// #54
 298:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 29c:	mov	x0, x22
 2a0:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 2a4:	ldr	x0, [x19, #24]
 2a8:	add	x1, x0, #0x1
 2ac:	str	x1, [x19, #24]
 2b0:	ldrb	w24, [x0]
 2b4:	cmp	x24, #0x3a
 2b8:	b.eq	2d4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x294>  // b.none
 2bc:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2c0:	mov	x3, x24
 2c4:	add	x2, x2, #0x0
 2c8:	mov	x4, #0x3a                  	// #58
 2cc:	mov	w1, #0x38                  	// #56
 2d0:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 2d4:	mov	x0, x22
 2d8:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 2dc:	ldr	x0, [x19, #24]
 2e0:	add	x1, x0, #0x1
 2e4:	str	x1, [x19, #24]
 2e8:	ldrb	w3, [x0]
 2ec:	cmp	x3, #0x20
 2f0:	b.eq	308 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2c8>  // b.none
 2f4:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 2f8:	mov	x4, x25
 2fc:	add	x2, x2, #0x0
 300:	mov	w1, w24
 304:	b	c0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x80>
 308:	ldr	x0, [x19, #24]
 30c:	ldrb	w0, [x0]
 310:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 314:	tst	w0, #0xff
 318:	b.eq	32c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2ec>  // b.none
 31c:	ldr	x0, [x19, #24]
 320:	add	x0, x0, #0x1
 324:	str	x0, [x19, #24]
 328:	b	308 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2c8>
 32c:	ldr	x1, [x19, #24]
 330:	cmp	x1, x21
 334:	b.cs	350 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x310>  // b.hs, b.nlast
 338:	ldrb	w0, [x1]
 33c:	cmp	w0, #0x20
 340:	b.ne	350 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x310>  // b.any
 344:	add	x1, x1, #0x1
 348:	str	x1, [x19, #24]
 34c:	b	32c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2ec>
 350:	ldr	x0, [x20, #24]
 354:	cbz	x0, 37c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x33c>
 358:	ldr	x22, [x20, #32]
 35c:	sub	x2, x21, x1
 360:	sub	x22, x22, #0x1
 364:	cmp	x22, x2
 368:	csel	x22, x22, x2, ls  // ls = plast
 36c:	mov	x2, x22
 370:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 374:	ldr	x0, [x20, #24]
 378:	strb	wzr, [x0, x22]
 37c:	add	x21, x21, #0x1
 380:	str	x21, [x19, #24]
 384:	mov	w0, w23
 388:	ldp	x21, x22, [sp, #16]
 38c:	ldp	x23, x24, [sp, #32]
 390:	ldp	x25, x30, [sp, #48]
 394:	ldp	x19, x20, [sp], #64
 398:	ret
 39c:	mov	w23, #0x0                   	// #0
 3a0:	b	384 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x344>

sanitizer_procmaps_mac.o:     file format elf64-littleaarch64


sanitizer_procmaps_solaris.o:     file format elf64-littleaarch64


sanitizer_rtems.o:     file format elf64-littleaarch64


sanitizer_solaris.o:     file format elf64-littleaarch64


sanitizer_stackdepot.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>:
   0:	ldr	w2, [x0]
   4:	ldr	w0, [x1]
   8:	cmp	w2, w0
   c:	cset	w0, cc  // cc = lo, ul, last
  10:	ret

0000000000000014 <_ZN11__sanitizer16StackDepotHandle2idEv>:
  14:	ldr	x0, [x0]
  18:	ldr	w0, [x0, #8]
  1c:	ret

0000000000000020 <_ZN11__sanitizer16StackDepotHandle9use_countEv>:
  20:	ldr	x0, [x0]
  24:	ldr	w0, [x0, #12]
  28:	and	w0, w0, #0xfffff
  2c:	ret

0000000000000030 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv>:
  30:	ldr	x0, [x0]
  34:	add	x0, x0, #0xc
  38:	ldxr	w1, [x0]
  3c:	add	w2, w1, #0x1
  40:	stlxr	w3, w2, [x0]
  44:	cbnz	w3, 38 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x8>
  48:	mvn	x0, x1
  4c:	dmb	ish
  50:	tst	x0, #0xfffff
  54:	b.ne	7c <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x4c>  // b.any
  58:	str	x30, [sp, #-16]!
  5c:	mov	x4, #0x100000              	// #1048576
  60:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  64:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  68:	mov	x3, x4
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	w1, #0x61                  	// #97
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  7c:	ret

0000000000000080 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  80:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  84:	add	x0, x0, #0x0
  88:	ret

000000000000008c <_ZN11__sanitizer13StackDepotGetEj>:
  8c:	mov	w2, w0
  90:	cbz	w0, 150 <_ZN11__sanitizer13StackDepotGetEj+0xc4>
  94:	str	x30, [sp, #-16]!
  98:	and	x3, x2, #0x7fffffff
  9c:	mov	w4, w0
  a0:	cmp	x3, w0, uxtw
  a4:	b.eq	c0 <_ZN11__sanitizer13StackDepotGetEj+0x34>  // b.none
  a8:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  ac:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  b0:	add	x2, x2, #0x0
  b4:	add	x0, x0, #0x0
  b8:	mov	w1, #0x8c                  	// #140
  bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  c0:	lsr	w3, w0, #23
  c4:	adrp	x4, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  c8:	add	x4, x4, #0x0
  cc:	mov	x6, #0xfffff               	// #1048575
  d0:	lsl	x3, x3, #12
  d4:	add	x5, x3, #0x1, lsl #12
  d8:	cmp	x3, x6
  dc:	b.ls	fc <_ZN11__sanitizer13StackDepotGetEj+0x70>  // b.plast
  e0:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  e4:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
  e8:	add	x2, x2, #0x0
  ec:	add	x0, x0, #0x0
  f0:	mov	x4, #0x100000              	// #1048576
  f4:	mov	w1, #0x91                  	// #145
  f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  fc:	ldr	x1, [x4, x3, lsl #3]
 100:	and	x0, x1, #0xfffffffffffffffe
 104:	cbz	x0, 138 <_ZN11__sanitizer13StackDepotGetEj+0xac>
 108:	ldr	w1, [x0, #8]
 10c:	cmp	w2, w1
 110:	b.ne	130 <_ZN11__sanitizer13StackDepotGetEj+0xa4>  // b.any
 114:	ldp	w2, w3, [x0, #16]
 118:	add	x0, x0, #0x18
 11c:	mov	x1, #0x0                   	// #0
 120:	bfxil	x1, x2, #0, #32
 124:	ldr	x30, [sp], #16
 128:	bfi	x1, x3, #32, #32
 12c:	ret
 130:	ldr	x0, [x0]
 134:	b	104 <_ZN11__sanitizer13StackDepotGetEj+0x78>
 138:	add	x3, x3, #0x1
 13c:	cmp	x5, x3
 140:	b.ne	d8 <_ZN11__sanitizer13StackDepotGetEj+0x4c>  // b.any
 144:	mov	w3, #0x0                   	// #0
 148:	mov	w2, #0x0                   	// #0
 14c:	b	11c <_ZN11__sanitizer13StackDepotGetEj+0x90>
 150:	mov	x1, #0x0                   	// #0
 154:	mov	w3, #0x0                   	// #0
 158:	bfxil	x1, x2, #0, #32
 15c:	mov	x0, #0x0                   	// #0
 160:	bfi	x1, x3, #32, #32
 164:	ret

0000000000000168 <_ZN11__sanitizer19StackDepotUnlockAllEv>:
 168:	adrp	x1, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 16c:	add	x1, x1, #0x0
 170:	mov	w0, #0x0                   	// #0
 174:	sxtw	x3, w0
 178:	ldr	x2, [x1, x3, lsl #3]
 17c:	dmb	ish
 180:	and	x2, x2, #0xfffffffffffffffe
 184:	str	x2, [x1, x3, lsl #3]
 188:	add	w0, w0, #0x1
 18c:	cmp	w0, #0x100, lsl #12
 190:	b.ne	174 <_ZN11__sanitizer19StackDepotUnlockAllEv+0xc>  // b.any
 194:	ret

0000000000000198 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>:
 198:	ldr	x4, [x0, #16]
 19c:	cbnz	x4, 1bc <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x24>
 1a0:	mov	x0, #0x0                   	// #0
 1a4:	mov	x1, #0x0                   	// #0
 1a8:	ret
 1ac:	mov	x0, #0x0                   	// #0
 1b0:	mov	x1, #0x0                   	// #0
 1b4:	ldr	x30, [sp], #16
 1b8:	ret
 1bc:	mov	x5, x4
 1c0:	mov	x2, #0x0                   	// #0
 1c4:	str	x30, [sp, #-16]!
 1c8:	cmp	x5, x2
 1cc:	b.ls	21c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x84>  // b.plast
 1d0:	add	x6, x5, x2
 1d4:	lsr	x3, x6, #1
 1d8:	cmp	x4, x6, lsr #1
 1dc:	b.hi	200 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x68>  // b.pmore
 1e0:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 1e4:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 1e8:	add	x2, x2, #0x0
 1ec:	add	x0, x0, #0x0
 1f0:	mov	w1, #0x1ba                 	// #442
 1f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1f8:	mov	x5, x3
 1fc:	b	1c8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x30>
 200:	ldr	x7, [x0]
 204:	lsl	x6, x3, #4
 208:	ldr	w6, [x7, x6]
 20c:	cmp	w1, w6
 210:	b.ls	1f8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x60>  // b.plast
 214:	add	x2, x3, #0x1
 218:	b	1c8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x30>
 21c:	cmp	x4, x2
 220:	b.cc	1ac <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x14>  // b.lo, b.ul, b.last
 224:	b.ne	244 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xac>  // b.any
 228:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 22c:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 230:	mov	x3, x4
 234:	add	x2, x2, #0x0
 238:	add	x0, x0, #0x0
 23c:	mov	w1, #0x1b6                 	// #438
 240:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 244:	ldr	x0, [x0]
 248:	lsl	x3, x2, #4
 24c:	add	x2, x0, x2, lsl #4
 250:	ldr	w0, [x0, x3]
 254:	cmp	w0, w1
 258:	b.ne	1ac <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x14>  // b.any
 25c:	ldr	x1, [x2, #8]
 260:	add	x0, x1, #0x18
 264:	ldr	x1, [x1, #16]
 268:	b	1b4 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x1c>

000000000000026c <_ZN11__sanitizer17StackDepotLockAllEv>:
 26c:	stp	x19, x20, [sp, #-32]!
 270:	adrp	x19, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 274:	add	x19, x19, #0x0
 278:	mov	w20, #0x100000              	// #1048576
 27c:	str	x30, [sp, #16]
 280:	mov	x0, x19
 284:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 288:	add	x19, x19, #0x8
 28c:	subs	w20, w20, #0x1
 290:	b.ne	280 <_ZN11__sanitizer17StackDepotLockAllEv+0x14>  // b.any
 294:	ldr	x30, [sp, #16]
 298:	ldp	x19, x20, [sp], #32
 29c:	ret

00000000000002a0 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>:
 2a0:	str	x30, [sp, #-16]!
 2a4:	mov	x2, x1
 2a8:	mov	x3, #0x0                   	// #0
 2ac:	mov	x1, x0
 2b0:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2b4:	add	x0, x0, #0x0
 2b8:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2bc:	cbz	x0, 2cc <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x2c>
 2c0:	ldr	w0, [x0, #8]
 2c4:	ldr	x30, [sp], #16
 2c8:	ret
 2cc:	mov	w0, #0x0                   	// #0
 2d0:	b	2c4 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x24>

00000000000002d4 <_ZN11__sanitizer24StackDepotPut_WithHandleENS_10StackTraceE>:
 2d4:	mov	x2, x1
 2d8:	mov	x3, #0x0                   	// #0
 2dc:	mov	x1, x0
 2e0:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 2e4:	add	x0, x0, #0x0
 2e8:	b	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>

00000000000002ec <_ZN11__sanitizer20StackDepotReverseMapC1Ev>:
 2ec:	stp	x19, x20, [sp, #-80]!
 2f0:	mov	x1, #0x1                   	// #1
 2f4:	mov	x19, x0
 2f8:	stp	x21, x22, [sp, #16]
 2fc:	adrp	x21, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 300:	stp	x23, x24, [sp, #32]
 304:	stp	x25, x30, [sp, #48]
 308:	stp	xzr, xzr, [x0]
 30c:	str	xzr, [x0, #16]
 310:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 314:	add	x0, x21, #0x0
 318:	add	x0, x0, #0x800, lsl #12
 31c:	ldr	x1, [x0, #1024]
 320:	ldr	x0, [x19, #8]
 324:	add	x1, x1, #0x64
 328:	cmp	x1, x0, lsr #4
 32c:	b.ls	338 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x4c>  // b.plast
 330:	mov	x0, x19
 334:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 338:	add	x21, x21, #0x0
 33c:	add	x23, sp, #0x40
 340:	mov	w25, #0x0                   	// #0
 344:	mov	w22, #0x3f                  	// #63
 348:	sxtw	x0, w25
 34c:	ldr	x20, [x21, x0, lsl #3]
 350:	and	x20, x20, #0xfffffffffffffffe
 354:	mov	x24, #0x1                   	// #1
 358:	cbz	x20, 424 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x138>
 35c:	ldp	x4, x3, [x19, #8]
 360:	ldr	w0, [x20, #8]
 364:	str	w0, [sp, #64]
 368:	str	x20, [sp, #72]
 36c:	lsr	x4, x4, #4
 370:	cmp	x3, x4
 374:	b.ls	390 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xa4>  // b.plast
 378:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 37c:	add	x2, x2, #0x0
 380:	mov	w1, #0x1be                 	// #446
 384:	adrp	x0, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 388:	add	x0, x0, #0x0
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	b.ne	3fc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x110>  // b.any
 394:	add	x1, x3, #0x1
 398:	tst	x1, x3
 39c:	b.eq	3f4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x108>  // b.none
 3a0:	clz	x0, x1
 3a4:	sub	w0, w22, w0
 3a8:	add	w4, w0, #0x1
 3ac:	lsl	x4, x24, x4
 3b0:	cmp	x1, x4
 3b4:	b.cc	3cc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xe0>  // b.lo, b.ul, b.last
 3b8:	mov	x3, x1
 3bc:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3c0:	mov	w1, #0x17b                 	// #379
 3c4:	add	x2, x2, #0x0
 3c8:	b	384 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x98>
 3cc:	lsl	x0, x24, x0
 3d0:	cmp	x1, x0
 3d4:	b.hi	3f0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x104>  // b.pmore
 3d8:	mov	x3, x1
 3dc:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3e0:	mov	x4, x0
 3e4:	add	x2, x2, #0x0
 3e8:	mov	w1, #0x17c                 	// #380
 3ec:	b	384 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x98>
 3f0:	mov	x1, x4
 3f4:	mov	x0, x19
 3f8:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 3fc:	ldr	x0, [x19, #16]
 400:	mov	x2, #0x10                  	// #16
 404:	ldr	x3, [x19]
 408:	add	x1, x0, #0x1
 40c:	str	x1, [x19, #16]
 410:	mov	x1, x23
 414:	add	x0, x3, x0, lsl #4
 418:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 41c:	ldr	x20, [x20]
 420:	b	358 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x6c>
 424:	add	w25, w25, #0x1
 428:	cmp	w25, #0x100, lsl #12
 42c:	b.ne	348 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x5c>  // b.any
 430:	ldr	x0, [x19]
 434:	adrp	x2, 0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 438:	ldr	x1, [x19, #16]
 43c:	add	x2, x2, #0x0
 440:	bl	0 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>
 444:	ldp	x21, x22, [sp, #16]
 448:	ldp	x23, x24, [sp, #32]
 44c:	ldp	x25, x30, [sp, #48]
 450:	ldp	x19, x20, [sp], #80
 454:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer19PersistentAllocator8tryAllocEm:

0000000000000000 <_ZN11__sanitizer19PersistentAllocator8tryAllocEm>:
   0:	mov	x2, x0
   4:	add	x3, x0, #0x8
   8:	ldr	x0, [x2, #8]
   c:	dmb	ish
  10:	ldr	x5, [x2, #16]
  14:	dmb	ish
  18:	cbz	x0, 4c <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x4c>
  1c:	add	x4, x1, x0
  20:	cmp	x4, x5
  24:	b.hi	4c <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x4c>  // b.pmore
  28:	ldxr	x5, [x3]
  2c:	cmp	x5, x0
  30:	b.ne	3c <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x3c>  // b.any
  34:	stlxr	w6, x4, [x3]
  38:	cbnz	w6, 28 <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x28>
  3c:	dmb	ish
  40:	cmp	x0, x5
  44:	b.ne	8 <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x8>  // b.any
  48:	ret
  4c:	mov	x0, #0x0                   	// #0
  50:	b	48 <_ZN11__sanitizer19PersistentAllocator8tryAllocEm+0x48>

Disassembly of section .text._ZN11__sanitizer15PersistentAllocEm:

0000000000000000 <_ZN11__sanitizer15PersistentAllocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	adrp	x19, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
   8:	mov	x20, x0
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x1, x0
  14:	ldr	x21, [x19]
  18:	stp	x23, x30, [sp, #32]
  1c:	mov	x0, x21
  20:	bl	0 <_ZN11__sanitizer15PersistentAllocEm>
  24:	cbnz	x0, 74 <_ZN11__sanitizer15PersistentAllocEm+0x74>
  28:	mov	w1, #0x1                   	// #1
  2c:	ldxrb	w0, [x21]
  30:	stxrb	w2, w1, [x21]
  34:	cbnz	w2, 2c <_ZN11__sanitizer15PersistentAllocEm+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15PersistentAllocEm+0x4c>  // b.none
  44:	mov	x0, x21
  48:	bl	0 <_ZN11__sanitizer15PersistentAllocEm>
  4c:	ldr	x19, [x19]
  50:	adrp	x22, 0 <_ZN11__sanitizer15PersistentAllocEm>
  54:	add	x22, x22, #0x0
  58:	mov	x23, #0x10000               	// #65536
  5c:	mov	x1, x20
  60:	mov	x0, x19
  64:	bl	0 <_ZN11__sanitizer15PersistentAllocEm>
  68:	cbz	x0, 84 <_ZN11__sanitizer15PersistentAllocEm+0x84>
  6c:	dmb	ish
  70:	strb	wzr, [x19]
  74:	ldp	x21, x22, [sp, #16]
  78:	ldp	x23, x30, [sp, #32]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret
  84:	cmp	x20, #0x10, lsl #12
  88:	str	xzr, [x19, #8]
  8c:	csel	x21, x20, x23, cs  // cs = hs, nlast
  90:	mov	x1, x22
  94:	mov	x0, x21
  98:	mov	w2, #0x0                   	// #0
  9c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  a0:	dmb	ish
  a4:	add	x21, x21, x0
  a8:	str	x21, [x19, #16]
  ac:	dmb	ish
  b0:	str	x0, [x19, #8]
  b4:	b	5c <_ZN11__sanitizer15PersistentAllocEm+0x5c>

Disassembly of section .text._ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	b.ls	16c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x16c>  // b.plast
   8:	stp	x19, x20, [sp, #-80]!
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	stp	x23, x24, [sp, #32]
  18:	mov	x24, x2
  1c:	mov	x23, #0x1                   	// #1
  20:	stp	x21, x22, [sp, #16]
  24:	stp	x25, x26, [sp, #48]
  28:	stp	x27, x30, [sp, #64]
  2c:	mov	x21, x23
  30:	mov	x22, x21
  34:	sub	x21, x21, #0x1
  38:	lsr	x21, x21, #1
  3c:	lsl	x27, x22, #4
  40:	add	x22, x19, x22, lsl #4
  44:	add	x25, x19, x21, lsl #4
  48:	mov	x1, x22
  4c:	mov	x0, x25
  50:	lsl	x26, x21, #4
  54:	blr	x24
  58:	tst	w0, #0xff
  5c:	b.eq	7c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x7c>  // b.none
  60:	ldp	x0, x1, [x25]
  64:	ldr	w3, [x19, x27]
  68:	ldr	x2, [x22, #8]
  6c:	stp	x0, x1, [x22]
  70:	str	w3, [x19, x26]
  74:	str	x2, [x25, #8]
  78:	cbnz	x21, 30 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x30>
  7c:	add	x0, x23, #0x1
  80:	cmp	x20, x0
  84:	b.ne	14c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x14c>  // b.any
  88:	add	x20, x19, x20, lsl #4
  8c:	ldp	x2, x3, [x20, #-16]
  90:	mov	x21, #0x0                   	// #0
  94:	ldr	w1, [x19]
  98:	ldr	x0, [x19, #8]
  9c:	stp	x2, x3, [x19]
  a0:	stur	w1, [x20, #-16]
  a4:	stur	x0, [x20, #-8]
  a8:	lsl	x25, x21, #1
  ac:	add	x26, x21, #0x1
  b0:	add	x22, x25, #0x1
  b4:	add	x25, x25, #0x2
  b8:	cmp	x22, x23
  bc:	b.cs	15c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x15c>  // b.hs, b.nlast
  c0:	add	x1, x19, x22, lsl #4
  c4:	add	x0, x19, x21, lsl #4
  c8:	blr	x24
  cc:	tst	w0, #0xff
  d0:	b.eq	15c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x15c>  // b.none
  d4:	cmp	x25, x23
  d8:	b.cs	f0 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xf0>  // b.hs, b.nlast
  dc:	add	x0, x19, x22, lsl #4
  e0:	add	x1, x19, x26, lsl #5
  e4:	blr	x24
  e8:	tst	w0, #0xff
  ec:	csel	x22, x22, x25, eq  // eq = none
  f0:	cmp	x22, x21
  f4:	b.eq	128 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x128>  // b.none
  f8:	lsl	x2, x21, #4
  fc:	add	x1, x19, x22, lsl #4
 100:	add	x21, x19, x21, lsl #4
 104:	lsl	x0, x22, #4
 108:	cmp	x22, x23
 10c:	ldr	w5, [x19, x2]
 110:	ldp	x2, x3, [x1]
 114:	ldr	x4, [x21, #8]
 118:	stp	x2, x3, [x21]
 11c:	str	w5, [x19, x0]
 120:	str	x4, [x1, #8]
 124:	b.cc	154 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x154>  // b.lo, b.ul, b.last
 128:	sub	x20, x20, #0x10
 12c:	subs	x23, x23, #0x1
 130:	b.ne	8c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x8c>  // b.any
 134:	ldp	x21, x22, [sp, #16]
 138:	ldp	x23, x24, [sp, #32]
 13c:	ldp	x25, x26, [sp, #48]
 140:	ldp	x27, x30, [sp, #64]
 144:	ldp	x19, x20, [sp], #80
 148:	ret
 14c:	mov	x23, x0
 150:	b	2c <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x2c>
 154:	mov	x21, x22
 158:	b	a8 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xa8>
 15c:	cmp	x25, x23
 160:	b.cs	128 <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0x128>  // b.hs, b.nlast
 164:	mov	x22, x21
 168:	b	dc <_ZN11__sanitizer4SortINS_20StackDepotReverseMap10IdDescPairEPFbRKS2_S4_EEEvPT_mT0_+0xdc>
 16c:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj>:
   0:	and	w3, w3, #0xfff00000
   4:	cbz	x0, 58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x58>
   8:	ldr	w4, [x0, #12]
   c:	and	w4, w4, #0xfff00000
  10:	cmp	w4, w3
  14:	b.ne	50 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x50>  // b.any
  18:	ldr	x4, [x0, #16]
  1c:	cmp	x2, x4
  20:	b.ne	50 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x50>  // b.any
  24:	ldr	w5, [x0, #16]
  28:	add	x6, x0, #0x18
  2c:	mov	x4, #0x0                   	// #0
  30:	cmp	x5, x4
  34:	b.ls	58 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x58>  // b.plast
  38:	ldr	x8, [x6, x4, lsl #3]
  3c:	ldr	x7, [x1, x4, lsl #3]
  40:	cmp	x8, x7
  44:	b.ne	50 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x50>  // b.any
  48:	add	x4, x4, #0x1
  4c:	b	30 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x30>
  50:	ldr	x0, [x0]
  54:	b	4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4findEPS1_NS_10StackTraceEj+0x4>
  58:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	str	x30, [sp, #16]
  10:	ldr	x0, [x19]
  14:	tbnz	w0, #0, 3c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x3c>
  18:	orr	x2, x0, #0x1
  1c:	ldxr	x1, [x19]
  20:	cmp	x1, x0
  24:	b.ne	30 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x30>  // b.any
  28:	stlxr	w3, x2, [x19]
  2c:	cbnz	w3, 1c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x1c>
  30:	dmb	ish
  34:	cmp	x0, x1
  38:	b.eq	54 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x54>  // b.none
  3c:	cmp	w20, #0x9
  40:	b.gt	4c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x4c>
  44:	add	w20, w20, #0x1
  48:	b	10 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x10>
  4c:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  50:	b	44 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE4lockEPNS_16atomic_uintptr_tE+0x44>
  54:	ldr	x30, [sp, #16]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>:
   0:	stp	x19, x20, [sp, #-128]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x0
   c:	mov	x22, x3
  10:	stp	x23, x24, [sp, #32]
  14:	mov	w23, w2
  18:	stp	x25, x26, [sp, #48]
  1c:	stp	x27, x28, [sp, #64]
  20:	mov	x28, x1
  24:	mov	x27, x2
  28:	str	x30, [sp, #80]
  2c:	cbz	x3, 34 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x34>
  30:	strb	wzr, [x3]
  34:	cbz	w23, 88 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x88>
  38:	cbz	x28, 88 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x88>
  3c:	mov	w20, #0xb28c                	// #45708
  40:	mov	w1, #0xe995                	// #59797
  44:	movk	w20, #0x9747, lsl #16
  48:	mov	w0, w23
  4c:	eor	w20, w20, w23, lsl #3
  50:	mov	x2, #0x0                   	// #0
  54:	movk	w1, #0x5bd1, lsl #16
  58:	str	x0, [sp, #104]
  5c:	ldr	x0, [sp, #104]
  60:	cmp	x0, x2
  64:	b.ls	a8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xa8>  // b.plast
  68:	ldr	x0, [x28, x2, lsl #3]
  6c:	mul	w20, w20, w1
  70:	add	x2, x2, #0x1
  74:	mul	w0, w1, w0
  78:	eor	w0, w0, w0, lsr #24
  7c:	mul	w0, w0, w1
  80:	eor	w20, w0, w20
  84:	b	5c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x5c>
  88:	mov	x0, #0x0                   	// #0
  8c:	ldp	x21, x22, [sp, #16]
  90:	ldp	x23, x24, [sp, #32]
  94:	ldp	x25, x26, [sp, #48]
  98:	ldp	x27, x28, [sp, #64]
  9c:	ldr	x30, [sp, #80]
  a0:	ldp	x19, x20, [sp], #128
  a4:	ret
  a8:	eor	w20, w20, w20, lsr #13
  ac:	mul	w20, w20, w1
  b0:	eor	w20, w20, w20, lsr #15
  b4:	and	x26, x20, #0xfffff
  b8:	lsl	x24, x26, #3
  bc:	add	x25, x21, x26, lsl #3
  c0:	ldr	x19, [x21, x24]
  c4:	and	x19, x19, #0xfffffffffffffffe
  c8:	bfxil	x27, x23, #0, #32
  cc:	mov	w3, w20
  d0:	mov	x1, x28
  d4:	mov	x2, x27
  d8:	mov	x0, x19
  dc:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  e0:	cbnz	x0, 8c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x8c>
  e4:	mov	x0, x25
  e8:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
  ec:	mov	x25, x0
  f0:	cmp	x19, x0
  f4:	b.eq	118 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x118>  // b.none
  f8:	mov	w3, w20
  fc:	mov	x1, x28
 100:	mov	x2, x27
 104:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 108:	cbz	x0, 118 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x118>
 10c:	dmb	ish
 110:	str	x25, [x21, x24]
 114:	b	8c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x8c>
 118:	lsr	x26, x26, #12
 11c:	add	x0, x26, #0x200, lsl #12
 120:	add	x0, x21, x0, lsl #2
 124:	ldxr	w3, [x0]
 128:	add	w1, w3, #0x1
 12c:	stlxr	w2, w1, [x0]
 130:	cbnz	w2, 124 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x124>
 134:	add	x2, x21, #0x800, lsl #12
 138:	dmb	ish
 13c:	add	w3, w3, #0x1
 140:	ldr	x0, [x2, #1024]
 144:	add	x0, x0, #0x1
 148:	str	x0, [x2, #1024]
 14c:	mov	w0, #0x7fffff              	// #8388607
 150:	cmp	w3, w0
 154:	b.ls	174 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x174>  // b.plast
 158:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 15c:	add	x2, x2, #0x0
 160:	mov	x4, #0x800000              	// #8388608
 164:	mov	w1, #0x77                  	// #119
 168:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 16c:	add	x0, x0, #0x0
 170:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 174:	orr	w26, w3, w26, lsl #23
 178:	cbnz	w26, 194 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x194>
 17c:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 180:	mov	x4, #0x0                   	// #0
 184:	add	x2, x2, #0x0
 188:	mov	x3, #0x0                   	// #0
 18c:	mov	w1, #0x79                  	// #121
 190:	b	168 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x168>
 194:	sub	w1, w23, #0x1
 198:	and	w20, w20, #0xfff00000
 19c:	add	x1, x1, #0x4
 1a0:	lsr	x27, x27, #32
 1a4:	lsl	x1, x1, #3
 1a8:	stp	x1, x2, [sp, #112]
 1ac:	mov	x0, x1
 1b0:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 1b4:	mov	x19, x0
 1b8:	ldp	x1, x2, [sp, #112]
 1bc:	ldr	x0, [x2, #1032]
 1c0:	add	x1, x0, x1
 1c4:	str	x1, [x2, #1032]
 1c8:	ldr	x0, [sp, #104]
 1cc:	str	w26, [x19, #8]
 1d0:	str	w20, [x19, #12]
 1d4:	mov	x1, x28
 1d8:	stp	w23, w27, [x19, #16]
 1dc:	lsl	x2, x0, #3
 1e0:	add	x0, x19, #0x18
 1e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1e8:	str	x25, [x19]
 1ec:	dmb	ish
 1f0:	str	x19, [x21, x24]
 1f4:	cbz	x22, 200 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x200>
 1f8:	mov	w0, #0x1                   	// #1
 1fc:	strb	w0, [x22]
 200:	mov	x0, x19
 204:	b	8c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x8c>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x4, x1
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm+0x30>
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>
  18:	add	x2, x2, #0x0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	cmp	x1, x3
  3c:	b.cs	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm+0x50>  // b.hs, b.nlast
  40:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>
  44:	mov	w1, #0x1fd                 	// #509
  48:	add	x2, x2, #0x0
  4c:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm+0x24>
  50:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  54:	lsl	x19, x1, #4
  58:	mov	x21, x0
  5c:	ldr	x22, [x0]
  60:	ldr	x1, [x22]
  64:	cbnz	x1, 70 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm+0x70>
  68:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  6c:	str	x0, [x22]
  70:	ldr	x0, [x21]
  74:	ldr	x0, [x0]
  78:	sub	x4, x0, #0x1
  7c:	tst	x4, x0
  80:	b.eq	94 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm+0x94>  // b.none
  84:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  90:	bl	0 <_ZN11__sanitizer3DieEv>
  94:	add	x19, x19, x4
  98:	neg	x0, x0
  9c:	and	x19, x19, x0
  a0:	mov	w2, #0x0                   	// #0
  a4:	mov	x0, x19
  a8:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_20StackDepotReverseMap10IdDescPairEE7ReallocEm>
  ac:	add	x1, x1, #0x0
  b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b4:	ldr	x1, [x20]
  b8:	mov	x21, x0
  bc:	ldr	x2, [x20, #16]
  c0:	lsl	x2, x2, #4
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

sanitizer_stacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>:
   0:	add	x0, x0, #0x4
   4:	ret

0000000000000008 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>:
   8:	str	x30, [sp, #-16]!
   c:	mov	x0, x30
  10:	ldr	x30, [sp], #16
  14:	ret

0000000000000018 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm>:
  18:	stp	x19, x20, [sp, #-32]!
  1c:	cmp	x3, #0x0
  20:	stp	x21, x30, [sp, #16]
  24:	mov	x21, x3
  28:	cinc	w3, w2, ne  // ne = any
  2c:	str	w3, [x0, #8]
  30:	cmp	w3, #0x100
  34:	b.ls	58 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x40>  // b.plast
  38:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  3c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  40:	mov	w3, w3
  44:	add	x2, x2, #0x0
  48:	add	x0, x0, #0x0
  4c:	mov	x4, #0x100                 	// #256
  50:	mov	w1, #0x22                  	// #34
  54:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  58:	mov	x20, x0
  5c:	mov	x19, x2
  60:	add	x0, x0, #0x10
  64:	lsl	x2, x2, #3
  68:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  6c:	cbz	x21, 78 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x60>
  70:	add	x19, x19, #0x2
  74:	str	x21, [x20, x19, lsl #3]
  78:	ldp	x21, x30, [sp, #16]
  7c:	str	xzr, [x20, #2064]
  80:	ldp	x19, x20, [sp], #32
  84:	ret

0000000000000088 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>:
  88:	stp	x19, x20, [sp, #-80]!
  8c:	mov	x20, x0
  90:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  94:	stp	x25, x26, [sp, #48]
  98:	mov	x25, x1
  9c:	mov	x19, x2
  a0:	ldr	x26, [x0]
  a4:	stp	x21, x22, [sp, #16]
  a8:	mov	x21, x3
  ac:	stp	x23, x24, [sp, #32]
  b0:	mov	x22, x0
  b4:	mov	x24, x4
  b8:	ldr	x1, [x26]
  bc:	str	x30, [sp, #64]
  c0:	mov	w23, w5
  c4:	cbnz	x1, d0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x48>
  c8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  cc:	str	x0, [x26]
  d0:	ldr	x0, [x22]
  d4:	mov	w3, w23
  d8:	cmp	w23, #0x1
  dc:	ldr	x4, [x0]
  e0:	b.hi	100 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x78>  // b.pmore
  e4:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  e8:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  ec:	add	x2, x2, #0x0
  f0:	add	x0, x0, #0x0
  f4:	mov	x4, #0x2                   	// #2
  f8:	mov	w1, #0x47                  	// #71
  fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 100:	mov	w0, #0x1                   	// #1
 104:	str	w0, [x20, #8]
 108:	str	x25, [x20, #16]
 10c:	cmp	x21, #0xfff
 110:	b.ls	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.plast
 114:	mov	x2, x19
 118:	sub	x21, x21, #0x10
 11c:	mov	x3, x2
 120:	cmp	x2, x24
 124:	b.ls	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.plast
 128:	cmp	x2, x21
 12c:	b.cs	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.hs, b.nlast
 130:	tst	x2, #0x7
 134:	b.ne	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.any
 138:	ldr	w0, [x20, #8]
 13c:	cmp	w0, w23
 140:	b.cs	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.hs, b.nlast
 144:	ldr	x1, [x2, #8]
 148:	cmp	x1, x4
 14c:	b.cc	174 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xec>  // b.lo, b.ul, b.last
 150:	cmp	x25, x1
 154:	b.eq	168 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xe0>  // b.none
 158:	add	w5, w0, #0x1
 15c:	add	x0, x20, w0, uxtw #3
 160:	str	w5, [x20, #8]
 164:	str	x1, [x0, #16]
 168:	mov	x24, x3
 16c:	ldr	x2, [x2]
 170:	b	11c <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x94>
 174:	ldp	x21, x22, [sp, #16]
 178:	ldp	x23, x24, [sp, #32]
 17c:	ldp	x25, x26, [sp, #48]
 180:	ldr	x30, [sp, #64]
 184:	ldp	x19, x20, [sp], #80
 188:	ret

000000000000018c <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>:
 18c:	mov	x3, x1
 190:	ldr	w1, [x0, #8]
 194:	cmp	x3, w1, uxtw
 198:	b.cc	1bc <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x30>  // b.lo, b.ul, b.last
 19c:	str	x30, [sp, #-16]!
 1a0:	mov	w4, w1
 1a4:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 1a8:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 1ac:	add	x2, x2, #0x0
 1b0:	add	x0, x0, #0x0
 1b4:	mov	w1, #0x78                  	// #120
 1b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1bc:	sub	w1, w1, w3
 1c0:	add	x3, x0, x3, lsl #3
 1c4:	mov	x2, #0x1                   	// #1
 1c8:	str	w1, [x0, #8]
 1cc:	add	x4, x2, #0x1
 1d0:	sub	x2, x2, #0x1
 1d4:	cmp	x2, x1
 1d8:	b.cs	1ec <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x60>  // b.hs, b.nlast
 1dc:	ldr	x2, [x3, x4, lsl #3]
 1e0:	str	x2, [x0, x4, lsl #3]
 1e4:	mov	x2, x4
 1e8:	b	1cc <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x40>
 1ec:	ret

00000000000001f0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>:
 1f0:	mov	x3, x0
 1f4:	mov	x2, #0x1                   	// #1
 1f8:	mov	x0, #0x0                   	// #0
 1fc:	ldr	w8, [x3, #8]
 200:	cmp	x8, x2
 204:	b.ls	23c <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x4c>  // b.plast
 208:	ldr	x6, [x3]
 20c:	ldr	x5, [x6, x2, lsl #3]
 210:	ldr	x6, [x6, x0, lsl #3]
 214:	sub	x7, x1, x5
 218:	subs	x4, x5, x1
 21c:	csel	x4, x4, x7, cs  // cs = hs, nlast
 220:	subs	x5, x6, x1
 224:	sub	x7, x1, x6
 228:	csel	x5, x5, x7, cs  // cs = hs, nlast
 22c:	cmp	x5, x4
 230:	csel	x0, x0, x2, ls  // ls = plast
 234:	add	x2, x2, #0x1
 238:	b	200 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x10>
 23c:	ret

sanitizer_stacktrace_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>:
   0:	mov	w8, w1
   4:	mov	x10, x3
   8:	cmp	w8, #0x0
   c:	mov	x3, x5
  10:	csel	x5, x10, xzr, ne  // ne = any
  14:	str	x5, [x0, #2064]
  18:	mov	x1, x2
  1c:	and	w7, w7, #0xff
  20:	mov	x2, x4
  24:	mov	x4, x6
  28:	cbnz	w8, 34 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x34>
  2c:	str	wzr, [x0, #8]
  30:	ret
  34:	cmp	w8, #0x1
  38:	b.ne	48 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x48>  // b.any
  3c:	str	w8, [x0, #8]
  40:	str	x1, [x0, #16]
  44:	b	30 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x30>
  48:	cbnz	w7, 60 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x60>
  4c:	cbz	x2, 58 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x58>
  50:	mov	w3, w8
  54:	b	0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>
  58:	mov	w2, w8
  5c:	b	0 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>
  60:	mov	w5, w8
  64:	mov	x2, x10
  68:	b	0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>

000000000000006c <__sanitizer_get_module_and_offset_for_pc>:
  6c:	stp	x19, x20, [sp, #-64]!
  70:	mov	x19, x1
  74:	mov	x20, x2
  78:	stp	x21, x22, [sp, #16]
  7c:	mov	x21, x0
  80:	mov	x22, x3
  84:	str	x30, [sp, #32]
  88:	str	xzr, [sp, #56]
  8c:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
  90:	mov	x3, x22
  94:	add	x2, sp, #0x38
  98:	mov	x1, x21
  9c:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
  a0:	tst	w0, #0xff
  a4:	b.eq	d4 <__sanitizer_get_module_and_offset_for_pc+0x68>  // b.none
  a8:	cmp	x19, #0x0
  ac:	ccmp	x20, #0x0, #0x4, ne  // ne = any
  b0:	b.eq	cc <__sanitizer_get_module_and_offset_for_pc+0x60>  // b.none
  b4:	ldr	x1, [sp, #56]
  b8:	mov	x0, x19
  bc:	add	x19, x19, x20
  c0:	mov	x2, x20
  c4:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
  c8:	sturb	wzr, [x19, #-1]
  cc:	mov	w0, #0x1                   	// #1
  d0:	b	d8 <__sanitizer_get_module_and_offset_for_pc+0x6c>
  d4:	mov	w0, #0x0                   	// #0
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldr	x30, [sp, #32]
  e0:	ldp	x19, x20, [sp], #64
  e4:	ret

00000000000000e8 <_ZNK11__sanitizer10StackTrace5PrintEv>:
  e8:	stp	x19, x20, [sp, #-192]!
  ec:	mov	x19, x0
  f0:	ldr	x0, [x0]
  f4:	stp	x21, x22, [sp, #16]
  f8:	stp	x23, x24, [sp, #32]
  fc:	stp	x25, x26, [sp, #48]
 100:	stp	x27, x28, [sp, #64]
 104:	str	x30, [sp, #80]
 108:	cbz	x0, 114 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2c>
 10c:	ldr	w0, [x19, #8]
 110:	cbnz	w0, 13c <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 114:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 118:	add	x0, x0, #0x0
 11c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 120:	ldp	x21, x22, [sp, #16]
 124:	ldp	x23, x24, [sp, #32]
 128:	ldp	x25, x26, [sp, #48]
 12c:	ldp	x27, x28, [sp, #64]
 130:	ldr	x30, [sp, #80]
 134:	ldp	x19, x20, [sp], #192
 138:	ret
 13c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 140:	add	x22, sp, #0x80
 144:	lsl	x1, x0, #1
 148:	mov	x0, x22
 14c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 150:	add	x23, sp, #0xa0
 154:	mov	x24, #0x0                   	// #0
 158:	mov	x26, #0x0                   	// #0
 15c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 160:	mov	x1, x0
 164:	mov	x0, x23
 168:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 16c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 170:	str	x0, [sp, #104]
 174:	ldr	x1, [x0]
 178:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 17c:	add	x0, x0, #0x0
 180:	str	x0, [sp, #112]
 184:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 188:	add	x0, x0, #0x0
 18c:	ldr	w25, [x1, #184]
 190:	str	x0, [sp, #120]
 194:	ldr	w0, [x19, #8]
 198:	cmp	x0, x24
 19c:	b.ls	274 <_ZNK11__sanitizer10StackTrace5PrintEv+0x18c>  // b.plast
 1a0:	ldr	x0, [x19]
 1a4:	ldr	x20, [x0, x24, lsl #3]
 1a8:	cbz	x20, 274 <_ZNK11__sanitizer10StackTrace5PrintEv+0x18c>
 1ac:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 1b0:	sub	x1, x20, #0x4
 1b4:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 1b8:	mov	x20, x0
 1bc:	cbnz	x0, 1e0 <_ZNK11__sanitizer10StackTrace5PrintEv+0xf8>
 1c0:	adrp	x2, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 1c4:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 1c8:	add	x2, x2, #0x0
 1cc:	add	x0, x0, #0x0
 1d0:	mov	x4, #0x0                   	// #0
 1d4:	mov	x3, #0x0                   	// #0
 1d8:	mov	w1, #0x22                  	// #34
 1dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1e0:	mov	x21, x0
 1e4:	adrp	x28, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 1e8:	ldr	x0, [sp, #104]
 1ec:	add	x28, x28, #0x0
 1f0:	ldr	x27, [x0]
 1f4:	mov	x0, x22
 1f8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 1fc:	add	x26, x26, #0x1
 200:	ldrb	w4, [x27, #181]
 204:	add	x3, x21, #0x8
 208:	ldr	x5, [x27, #24]
 20c:	sub	w2, w26, #0x1
 210:	ldr	x6, [sp, #112]
 214:	mov	x0, x22
 218:	ldr	x1, [x27, #192]
 21c:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 220:	ldr	x1, [sp, #128]
 224:	mov	x0, x28
 228:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 22c:	cmp	w25, #0x0
 230:	sub	w25, w25, #0x1
 234:	b.le	25c <_ZNK11__sanitizer10StackTrace5PrintEv+0x174>
 238:	ldr	x0, [sp, #184]
 23c:	cbz	x0, 24c <_ZNK11__sanitizer10StackTrace5PrintEv+0x164>
 240:	ldr	x1, [sp, #120]
 244:	mov	x0, x23
 248:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 24c:	ldr	x1, [x21, #40]
 250:	cbz	x1, 25c <_ZNK11__sanitizer10StackTrace5PrintEv+0x174>
 254:	mov	x0, x23
 258:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 25c:	ldr	x21, [x21]
 260:	cbnz	x21, 1f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x10c>
 264:	mov	x0, x20
 268:	add	x24, x24, #0x1
 26c:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 270:	b	194 <_ZNK11__sanitizer10StackTrace5PrintEv+0xac>
 274:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 278:	add	x0, x0, #0x0
 27c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 280:	ldr	x0, [sp, #184]
 284:	cbz	x0, 298 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1b0>
 288:	ldr	x1, [sp, #160]
 28c:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 290:	add	x0, x0, #0x0
 294:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 298:	mov	x0, x23
 29c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 2a0:	mov	x0, x22
 2a4:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 2a8:	b	120 <_ZNK11__sanitizer10StackTrace5PrintEv+0x38>

00000000000002ac <__sanitizer_symbolize_pc>:
 2ac:	cbz	x3, 3f4 <__sanitizer_symbolize_pc+0x148>
 2b0:	stp	x19, x20, [sp, #-112]!
 2b4:	mov	x20, x0
 2b8:	mov	x19, x2
 2bc:	stp	x21, x22, [sp, #16]
 2c0:	mov	x21, x3
 2c4:	sub	x22, x21, #0x1
 2c8:	stp	x23, x24, [sp, #32]
 2cc:	add	x24, x19, x22
 2d0:	stp	x25, x26, [sp, #48]
 2d4:	mov	x25, x1
 2d8:	stp	x27, x30, [sp, #64]
 2dc:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 2e0:	sub	x1, x20, #0x4
 2e4:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 2e8:	mov	x20, x0
 2ec:	cbnz	x0, 320 <__sanitizer_symbolize_pc+0x74>
 2f0:	mov	x2, x21
 2f4:	mov	x0, x19
 2f8:	adrp	x1, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 2fc:	add	x1, x1, #0x0
 300:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 304:	strb	wzr, [x19, x22]
 308:	ldp	x21, x22, [sp, #16]
 30c:	ldp	x23, x24, [sp, #32]
 310:	ldp	x25, x26, [sp, #48]
 314:	ldp	x27, x30, [sp, #64]
 318:	ldp	x19, x20, [sp], #112
 31c:	ret
 320:	adrp	x23, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 324:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 328:	add	x22, sp, #0x50
 32c:	mov	x1, x0
 330:	mov	x0, x22
 334:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 338:	ldr	x23, [x23]
 33c:	adrp	x27, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 340:	add	x27, x27, #0x0
 344:	mov	w26, #0x0                   	// #0
 348:	cmp	x20, #0x0
 34c:	ccmp	x19, x24, #0x2, ne  // ne = any
 350:	b.cs	3bc <__sanitizer_symbolize_pc+0x110>  // b.hs, b.nlast
 354:	mov	x0, x22
 358:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 35c:	ldrb	w4, [x23, #181]
 360:	mov	x0, x22
 364:	ldr	x5, [x23, #24]
 368:	mov	x6, x27
 36c:	add	x3, x20, #0x8
 370:	mov	w2, w26
 374:	mov	x1, x25
 378:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 37c:	ldr	x0, [sp, #104]
 380:	cbz	x0, 3b0 <__sanitizer_symbolize_pc+0x104>
 384:	ldr	x1, [sp, #80]
 388:	sub	x21, x24, x19
 38c:	sub	x21, x21, #0x1
 390:	mov	x0, x19
 394:	mov	x2, x21
 398:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 39c:	ldr	x2, [sp, #104]
 3a0:	cmp	x2, x21
 3a4:	csel	x2, x2, x21, ls  // ls = plast
 3a8:	add	x19, x19, x2
 3ac:	strb	wzr, [x19], #1
 3b0:	add	w26, w26, #0x1
 3b4:	ldr	x20, [x20]
 3b8:	b	348 <__sanitizer_symbolize_pc+0x9c>
 3bc:	cmp	x19, x24
 3c0:	b.ls	3e4 <__sanitizer_symbolize_pc+0x138>  // b.plast
 3c4:	adrp	x2, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 3c8:	adrp	x0, 0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 3cc:	add	x2, x2, #0x0
 3d0:	add	x0, x0, #0x0
 3d4:	mov	x4, #0x0                   	// #0
 3d8:	mov	x3, #0x0                   	// #0
 3dc:	mov	w1, #0x84                  	// #132
 3e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e4:	strb	wzr, [x19]
 3e8:	mov	x0, x22
 3ec:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 3f0:	b	308 <__sanitizer_symbolize_pc+0x5c>
 3f4:	ret

00000000000003f8 <__sanitizer_symbolize_global>:
 3f8:	cbz	x3, 4a0 <__sanitizer_symbolize_global+0xa8>
 3fc:	stp	x19, x20, [sp, #-144]!
 400:	mov	x20, x0
 404:	mov	x19, x2
 408:	stp	x21, x22, [sp, #16]
 40c:	mov	x22, x1
 410:	mov	x21, x3
 414:	stp	x23, x30, [sp, #32]
 418:	add	x23, sp, #0x50
 41c:	mov	x0, x23
 420:	strb	wzr, [x2]
 424:	bl	0 <_ZN11__sanitizer8DataInfoC1Ev>
 428:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 42c:	mov	x2, x23
 430:	mov	x1, x20
 434:	bl	0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>
 438:	tst	w0, #0xff
 43c:	b.eq	490 <__sanitizer_symbolize_global+0x98>  // b.none
 440:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 444:	add	x20, sp, #0x30
 448:	mov	x1, x0
 44c:	mov	x0, x20
 450:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 454:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 458:	mov	x2, x23
 45c:	mov	x1, x22
 460:	ldr	x0, [x0]
 464:	ldr	x3, [x0, #24]
 468:	mov	x0, x20
 46c:	bl	0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 470:	ldr	x1, [sp, #48]
 474:	mov	x0, x19
 478:	add	x19, x19, x21
 47c:	mov	x2, x21
 480:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 484:	sturb	wzr, [x19, #-1]
 488:	mov	x0, x20
 48c:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 490:	ldp	x21, x22, [sp, #16]
 494:	ldp	x23, x30, [sp, #32]
 498:	ldp	x19, x20, [sp], #144
 49c:	ret
 4a0:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1
  34:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedString5clearEv:

0000000000000000 <_ZN11__sanitizer20InternalScopedString5clearEv>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x1, #0x0                   	// #0
   c:	bl	0 <_ZN11__sanitizer20InternalScopedString5clearEv>
  10:	strb	wzr, [x0]
  14:	str	xzr, [x19, #24]
  18:	ldp	x19, x30, [sp], #16
  1c:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7DestroyEv:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7DestroyEv>:
   0:	ldr	x1, [x0, #8]
   4:	ldr	x0, [x0]
   8:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x20, x0
  34:	mov	x19, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	sub	x1, x0, #0x1
  5c:	tst	x1, x0
  60:	b.eq	74 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x74>  // b.none
  64:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  70:	bl	0 <_ZN11__sanitizer3DieEv>
  74:	sub	x19, x19, #0x1
  78:	mov	w2, #0x0                   	// #0
  7c:	add	x19, x19, x0
  80:	neg	x0, x0
  84:	and	x19, x19, x0
  88:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  8c:	mov	x0, x19
  90:	add	x1, x1, #0x0
  94:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  98:	mov	x21, x0
  9c:	ldr	x1, [x20]
  a0:	ldr	x2, [x20, #16]
  a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  a8:	ldp	x0, x1, [x20]
  ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  b0:	stp	x21, x19, [x20]
  b4:	ldp	x21, x30, [sp, #16]
  b8:	ldp	x19, x20, [sp], #32
  bc:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	mov	x0, x19
  64:	mov	x1, #0x0                   	// #0
  68:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	strb	wzr, [x0]
  70:	ldr	x30, [sp, #16]
  74:	ldp	x19, x20, [sp], #32
  78:	ret

sanitizer_stacktrace_printer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	stp	x21, x30, [sp, #16]
   c:	cbz	x0, 3c <_ZN11__sanitizerL17StripFunctionNameEPKcS1_+0x3c>
  10:	mov	x20, x1
  14:	cbz	x1, 3c <_ZN11__sanitizerL17StripFunctionNameEPKcS1_+0x3c>
  18:	mov	x0, x1
  1c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  20:	mov	x1, x20
  24:	mov	x21, x0
  28:	mov	x2, x0
  2c:	mov	x0, x19
  30:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
  34:	cbnz	w0, 3c <_ZN11__sanitizerL17StripFunctionNameEPKcS1_+0x3c>
  38:	add	x19, x19, x21
  3c:	mov	x0, x19
  40:	ldp	x21, x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #32
  48:	ret

000000000000004c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>:
  4c:	stp	x19, x20, [sp, #-80]!
  50:	mov	x20, x0
  54:	mov	x19, x1
  58:	stp	x21, x22, [sp, #16]
  5c:	adrp	x22, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  60:	mov	x21, x2
  64:	add	x22, x22, #0x0
  68:	stp	x23, x24, [sp, #32]
  6c:	adrp	x24, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  70:	mov	x23, x3
  74:	add	x24, x24, #0x0
  78:	stp	x25, x26, [sp, #48]
  7c:	adrp	x26, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  80:	str	x30, [sp, #64]
  84:	ldrb	w2, [x19]
  88:	cbz	w2, 134 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xe8>
  8c:	add	x25, x19, #0x1
  90:	cmp	w2, #0x25
  94:	b.eq	b4 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x68>  // b.none
  98:	mov	x25, x19
  9c:	mov	x0, x20
  a0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  ac:	add	x19, x25, #0x1
  b0:	b	84 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x38>
  b4:	ldrb	w2, [x19, #1]
  b8:	cmp	w2, #0x6c
  bc:	b.eq	118 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xcc>  // b.none
  c0:	b.hi	e8 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x9c>  // b.pmore
  c4:	cmp	w2, #0x25
  c8:	b.eq	108 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xbc>  // b.none
  cc:	cmp	w2, #0x67
  d0:	b.eq	12c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xe0>  // b.none
  d4:	mov	w1, w2
  d8:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  e4:	bl	0 <_ZN11__sanitizer3DieEv>
  e8:	cmp	w2, #0x73
  ec:	b.ne	d4 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x88>  // b.any
  f0:	ldr	x0, [x21, #24]
  f4:	mov	x1, x23
  f8:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
  fc:	mov	x2, x0
 100:	mov	x1, x22
 104:	b	120 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xd4>
 108:	add	x1, x26, #0x0
 10c:	mov	x0, x20
 110:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 114:	b	ac <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x60>
 118:	ldr	x2, [x21, #32]
 11c:	mov	x1, x24
 120:	mov	x0, x20
 124:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 128:	b	ac <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x60>
 12c:	ldr	x2, [x21, #40]
 130:	b	100 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xb4>
 134:	ldp	x21, x22, [sp, #16]
 138:	ldp	x23, x24, [sp, #32]
 13c:	ldp	x25, x26, [sp, #48]
 140:	ldr	x30, [sp, #64]
 144:	ldp	x19, x20, [sp], #80
 148:	ret

000000000000014c <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>:
 14c:	stp	x19, x20, [sp, #-48]!
 150:	and	w4, w4, #0xff
 154:	cmp	w2, #0x0
 158:	stp	x21, x22, [sp, #16]
 15c:	mov	x19, x0
 160:	mov	w21, w2
 164:	str	x30, [sp, #32]
 168:	mov	x0, x1
 16c:	mov	w20, w3
 170:	mov	x1, x5
 174:	ccmp	w4, #0x0, #0x4, gt
 178:	b.eq	1d0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x84>  // b.none
 17c:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 180:	mov	x2, x0
 184:	mov	w3, w21
 188:	mov	x0, x19
 18c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 190:	add	x1, x1, #0x0
 194:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 198:	cmp	w20, #0x0
 19c:	b.le	1b4 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x68>
 1a0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1a4:	mov	w2, w20
 1a8:	add	x1, x1, #0x0
 1ac:	mov	x0, x19
 1b0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1b4:	mov	x0, x19
 1b8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1bc:	ldp	x21, x22, [sp, #16]
 1c0:	add	x1, x1, #0x0
 1c4:	ldr	x30, [sp, #32]
 1c8:	ldp	x19, x20, [sp], #48
 1cc:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1d0:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 1d4:	mov	x2, x0
 1d8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1dc:	mov	x0, x19
 1e0:	add	x1, x1, #0x0
 1e4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1e8:	cmp	w21, #0x0
 1ec:	b.le	22c <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0xe0>
 1f0:	adrp	x22, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 1f4:	add	x22, x22, #0x0
 1f8:	mov	w2, w21
 1fc:	mov	x1, x22
 200:	mov	x0, x19
 204:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 208:	cmp	w20, #0x0
 20c:	b.le	22c <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0xe0>
 210:	mov	w2, w20
 214:	mov	x1, x22
 218:	mov	x0, x19
 21c:	ldp	x21, x22, [sp, #16]
 220:	ldr	x30, [sp, #32]
 224:	ldp	x19, x20, [sp], #48
 228:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 22c:	ldp	x21, x22, [sp, #16]
 230:	ldr	x30, [sp, #32]
 234:	ldp	x19, x20, [sp], #48
 238:	ret

000000000000023c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>:
 23c:	stp	x19, x20, [sp, #-32]!
 240:	mov	x19, x2
 244:	mov	w20, w3
 248:	stp	x21, x30, [sp, #16]
 24c:	mov	x21, x0
 250:	mov	x0, x1
 254:	mov	x1, x4
 258:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 25c:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 260:	mov	x2, x0
 264:	add	x1, x1, #0x0
 268:	mov	x0, x21
 26c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 270:	cbz	w20, 2b0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x74>
 274:	sub	w20, w20, #0x1
 278:	cmp	w20, #0x7
 27c:	b.hi	308 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xcc>  // b.pmore
 280:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 284:	add	x0, x0, #0x0
 288:	ldrb	w0, [x0, w20, uxtw]
 28c:	adr	x1, 298 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x5c>
 290:	add	x0, x1, w0, sxtb #2
 294:	br	x0
 298:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 29c:	add	x2, x1, #0x0
 2a0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2a4:	mov	x0, x21
 2a8:	add	x1, x1, #0x0
 2ac:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2b0:	mov	x2, x19
 2b4:	mov	x0, x21
 2b8:	ldp	x21, x30, [sp, #16]
 2bc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2c0:	ldp	x19, x20, [sp], #32
 2c4:	add	x1, x1, #0x0
 2c8:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2cc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2d0:	add	x2, x1, #0x0
 2d4:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 2d8:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2dc:	add	x2, x1, #0x0
 2e0:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 2e4:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2e8:	add	x2, x1, #0x0
 2ec:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 2f0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 2f4:	add	x2, x1, #0x0
 2f8:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 2fc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 300:	add	x2, x1, #0x0
 304:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 308:	adrp	x2, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 30c:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 310:	add	x2, x2, #0x0
 314:	add	x0, x0, #0x0
 318:	mov	x4, #0x0                   	// #0
 31c:	mov	x3, #0x0                   	// #0
 320:	mov	w1, #0x2a9                 	// #681
 324:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 328:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 32c:	add	x2, x1, #0x0
 330:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>
 334:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 338:	add	x2, x1, #0x0
 33c:	b	2a0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x64>

0000000000000340 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>:
 340:	stp	x19, x20, [sp, #-112]!
 344:	mov	x20, x0
 348:	mov	x19, x3
 34c:	stp	x23, x24, [sp, #32]
 350:	mov	x24, x1
 354:	mov	x0, x24
 358:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 35c:	add	x1, x1, #0x0
 360:	stp	x21, x22, [sp, #16]
 364:	mov	x21, x5
 368:	mov	x22, x6
 36c:	stp	x25, x26, [sp, #48]
 370:	stp	x27, x28, [sp, #64]
 374:	and	w28, w4, #0xff
 378:	str	x30, [sp, #80]
 37c:	str	w2, [sp, #108]
 380:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 384:	cbnz	w0, 390 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x50>
 388:	adrp	x7, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 38c:	add	x24, x7, #0x0
 390:	adrp	x25, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 394:	adrp	x23, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 398:	add	x25, x25, #0x0
 39c:	add	x23, x23, #0x0
 3a0:	adrp	x26, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3a4:	ldrb	w2, [x24]
 3a8:	cbz	w2, 5c8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x288>
 3ac:	add	x27, x24, #0x1
 3b0:	cmp	w2, #0x25
 3b4:	b.eq	3d4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x94>  // b.none
 3b8:	mov	x27, x24
 3bc:	mov	x0, x20
 3c0:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 3c4:	add	x1, x1, #0x0
 3c8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 3cc:	add	x24, x27, #0x1
 3d0:	b	3a4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x64>
 3d4:	ldrb	w2, [x24, #1]
 3d8:	cmp	w2, #0x73
 3dc:	b.hi	404 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xc4>  // b.pmore
 3e0:	cmp	w2, #0x62
 3e4:	b.hi	418 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xd8>  // b.pmore
 3e8:	cmp	w2, #0x4c
 3ec:	b.eq	54c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x20c>  // b.none
 3f0:	b.hi	434 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf4>  // b.pmore
 3f4:	cmp	w2, #0x25
 3f8:	b.eq	460 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x120>  // b.none
 3fc:	cmp	w2, #0x46
 400:	b.eq	508 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1c8>  // b.none
 404:	mov	w1, w2
 408:	adrp	x0, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 40c:	add	x0, x0, #0x0
 410:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 414:	bl	0 <_ZN11__sanitizer3DieEv>
 418:	sub	w0, w2, #0x63
 41c:	cmp	w0, #0x10
 420:	b.hi	404 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xc4>  // b.pmore
 424:	ldrb	w0, [x25, w0, uxtw]
 428:	adr	x1, 434 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf4>
 42c:	add	x0, x1, w0, sxtb #2
 430:	br	x0
 434:	cmp	w2, #0x4d
 438:	b.eq	590 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x250>  // b.none
 43c:	cmp	w2, #0x53
 440:	b.ne	404 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xc4>  // b.any
 444:	ldp	w2, w3, [x19, #56]
 448:	mov	x5, x21
 44c:	ldr	x1, [x19, #48]
 450:	mov	w4, w28
 454:	mov	x0, x20
 458:	bl	14c <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 45c:	b	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 460:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 464:	add	x1, x1, #0x0
 468:	mov	x0, x20
 46c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 470:	b	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 474:	ldr	w2, [sp, #108]
 478:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 47c:	add	x1, x1, #0x0
 480:	mov	x0, x20
 484:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 488:	b	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 48c:	ldr	x2, [x19]
 490:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 494:	add	x1, x1, #0x0
 498:	mov	x0, x20
 49c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 4a0:	b	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 4a4:	ldr	x0, [x19, #8]
 4a8:	mov	x1, x21
 4ac:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 4b0:	b	4c8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x188>
 4b4:	ldr	x2, [x19, #16]
 4b8:	b	490 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x150>
 4bc:	ldr	x0, [x19, #32]
 4c0:	mov	x1, x22
 4c4:	bl	0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 4c8:	mov	x2, x0
 4cc:	add	x1, x26, #0x0
 4d0:	b	498 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x158>
 4d4:	ldr	x2, [x19, #40]
 4d8:	cmn	x2, #0x1
 4dc:	b.ne	490 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x150>  // b.any
 4e0:	mov	x2, #0x0                   	// #0
 4e4:	b	490 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x150>
 4e8:	mov	x1, x21
 4ec:	ldr	x0, [x19, #48]
 4f0:	b	4ac <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x16c>
 4f4:	ldr	w2, [x19, #56]
 4f8:	mov	x1, x23
 4fc:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x140>
 500:	ldr	w2, [x19, #60]
 504:	b	4f8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1b8>
 508:	ldr	x0, [x19, #32]
 50c:	cbz	x0, 3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 510:	mov	x1, x22
 514:	bl	0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 518:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 51c:	mov	x2, x0
 520:	add	x1, x1, #0x0
 524:	mov	x0, x20
 528:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 52c:	ldr	x0, [x19, #48]
 530:	cbnz	x0, 3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 534:	ldr	x2, [x19, #40]
 538:	cmn	x2, #0x1
 53c:	b.eq	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>  // b.none
 540:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 544:	add	x1, x1, #0x0
 548:	b	498 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x158>
 54c:	ldr	x1, [x19, #48]
 550:	cbz	x1, 564 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x224>
 554:	ldp	w2, w3, [x19, #56]
 558:	mov	x5, x21
 55c:	mov	w4, w28
 560:	b	454 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x114>
 564:	ldr	x1, [x19, #8]
 568:	cbz	x1, 584 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x244>
 56c:	ldr	w3, [x19, #24]
 570:	mov	x4, x21
 574:	ldr	x2, [x19, #16]
 578:	mov	x0, x20
 57c:	bl	23c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 580:	b	3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 584:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 588:	add	x1, x1, #0x0
 58c:	b	468 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x128>
 590:	ldr	x2, [x19]
 594:	tbnz	x2, #60, 3cc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x8c>
 598:	ldr	x0, [x19, #8]
 59c:	cbz	x0, 5bc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x27c>
 5a0:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 5a4:	mov	x1, x0
 5a8:	adrp	x4, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 5ac:	ldr	w3, [x19, #24]
 5b0:	add	x4, x4, #0x0
 5b4:	ldr	x2, [x19, #16]
 5b8:	b	578 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x238>
 5bc:	adrp	x1, 0 <_ZN11__sanitizerL17StripFunctionNameEPKcS1_>
 5c0:	add	x1, x1, #0x0
 5c4:	b	498 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x158>
 5c8:	ldp	x21, x22, [sp, #16]
 5cc:	ldp	x23, x24, [sp, #32]
 5d0:	ldp	x25, x26, [sp, #48]
 5d4:	ldp	x27, x28, [sp, #64]
 5d8:	ldr	x30, [sp, #80]
 5dc:	ldp	x19, x20, [sp], #112
 5e0:	ret

sanitizer_stacktrace_sparc.o:     file format elf64-littleaarch64


sanitizer_stoptheworld_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>:
   0:	ldr	x0, [x0, #24]
   4:	ret

0000000000000008 <_ZNK11__sanitizer25SuspendedThreadsListLinux13RegisterCountEv>:
   8:	mov	x0, #0x22                  	// #34
   c:	ret

0000000000000010 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_>:
  10:	stp	x19, x20, [sp, #-352]!
  14:	mov	x20, x2
  18:	ldr	x2, [x0]
  1c:	stp	x21, x22, [sp, #16]
  20:	mov	x21, x3
  24:	stp	x23, x30, [sp, #32]
  28:	add	x22, sp, #0x50
  2c:	mov	x23, #0x110                 	// #272
  30:	ldr	x2, [x2, #24]
  34:	blr	x2
  38:	mov	w1, w0
  3c:	add	x3, sp, #0x40
  40:	mov	x2, #0x1                   	// #1
  44:	mov	x19, x0
  48:	mov	w0, #0x4204                	// #16900
  4c:	stp	x22, x23, [sp, #64]
  50:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
  54:	add	x1, sp, #0x3c
  58:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
  5c:	tst	w0, #0xff
  60:	b.eq	a4 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x94>  // b.none
  64:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
  68:	ldr	x0, [x0]
  6c:	ldr	w0, [x0]
  70:	cbz	w0, 88 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x78>
  74:	ldr	w2, [sp, #60]
  78:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
  7c:	mov	w1, w19
  80:	add	x0, x0, #0x0
  84:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  88:	ldr	w0, [sp, #60]
  8c:	cmp	w0, #0x3
  90:	csetm	w0, eq  // eq = none
  94:	ldp	x21, x22, [sp, #16]
  98:	ldp	x23, x30, [sp, #32]
  9c:	ldp	x19, x20, [sp], #352
  a0:	ret
  a4:	ldr	x0, [sp, #328]
  a8:	str	x0, [x21]
  ac:	mov	x2, x23
  b0:	mov	x1, x22
  b4:	mov	x0, x20
  b8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  bc:	mov	w0, #0x1                   	// #1
  c0:	b	94 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x84>

00000000000000c4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>:
  c4:	stp	x19, x20, [sp, #-208]!
  c8:	mov	x4, #0x0                   	// #0
  cc:	mov	x20, x0
  d0:	mov	x19, x1
  d4:	mov	x3, #0x0                   	// #0
  d8:	mov	x2, #0x0                   	// #0
  dc:	mov	x1, #0x0                   	// #0
  e0:	mov	w0, #0x3                   	// #3
  e4:	stp	x21, x22, [sp, #16]
  e8:	stp	x23, x24, [sp, #32]
  ec:	stp	x25, x26, [sp, #48]
  f0:	str	x30, [sp, #64]
  f4:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
  f8:	mov	x22, x0
  fc:	cbnz	w0, 118 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x54>
 100:	mov	x4, #0x0                   	// #0
 104:	mov	x3, #0x0                   	// #0
 108:	mov	x2, #0x0                   	// #0
 10c:	mov	x1, #0x1                   	// #1
 110:	mov	w0, #0x4                   	// #4
 114:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
 118:	add	x24, sp, #0x58
 11c:	add	x21, x24, #0x10
 120:	mov	x0, x21
 124:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 128:	stp	x20, x19, [sp, #88]
 12c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 130:	str	xzr, [sp, #192]
 134:	str	x0, [sp, #200]
 138:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 13c:	mov	w2, #0x0                   	// #0
 140:	add	x25, x0, #0x200, lsl #12
 144:	mov	x19, x0
 148:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 14c:	mov	x0, x25
 150:	add	x1, x1, #0x0
 154:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 158:	mov	x23, x0
 15c:	mov	x1, x19
 160:	bl	0 <_ZN11__sanitizer16MprotectNoAccessEmm>
 164:	tst	w0, #0xff
 168:	b.ne	18c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xc8>  // b.any
 16c:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 170:	add	x2, x2, #0x0
 174:	mov	x4, #0x0                   	// #0
 178:	mov	x3, #0x0                   	// #0
 17c:	mov	w1, #0x152                 	// #338
 180:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 184:	add	x0, x0, #0x0
 188:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 18c:	mov	x0, x21
 190:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 194:	add	x21, x21, #0x0
 198:	mov	x20, #0x0                   	// #0
 19c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 1a0:	adrp	x19, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 1a4:	add	x19, x19, #0x0
 1a8:	mov	x0, x19
 1ac:	bl	0 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
 1b0:	ldr	w1, [x21, x20, lsl #2]
 1b4:	mov	x0, x19
 1b8:	add	x20, x20, #0x1
 1bc:	bl	0 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
 1c0:	cmp	x20, #0x7
 1c4:	b.ne	1b0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xec>  // b.any
 1c8:	add	x20, x19, #0x80
 1cc:	mov	x1, x19
 1d0:	mov	x2, x20
 1d4:	mov	w0, #0x0                   	// #0
 1d8:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
 1dc:	sxtw	x3, w0
 1e0:	cbz	w0, 1f8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x134>
 1e4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 1e8:	mov	x4, #0x0                   	// #0
 1ec:	add	x2, x2, #0x0
 1f0:	mov	w1, #0x1ac                 	// #428
 1f4:	b	180 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xbc>
 1f8:	mov	x3, x24
 1fc:	mov	w2, #0x700                 	// #1792
 200:	mov	x6, #0x0                   	// #0
 204:	mov	x5, #0x0                   	// #0
 208:	mov	x4, #0x0                   	// #0
 20c:	add	x1, x23, x25
 210:	movk	w2, #0x80, lsl #16
 214:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 218:	add	x0, x0, #0x0
 21c:	bl	0 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>
 220:	mov	x2, #0x0                   	// #0
 224:	mov	x21, x0
 228:	mov	x1, x20
 22c:	add	x26, sp, #0x54
 230:	mov	w0, #0x2                   	// #2
 234:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
 238:	mov	x1, x26
 23c:	mov	x0, x21
 240:	str	wzr, [sp, #84]
 244:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 248:	tst	w0, #0xff
 24c:	b.eq	2b8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1f4>  // b.none
 250:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 254:	ldr	x0, [x0]
 258:	ldr	w0, [x0]
 25c:	cbz	w0, 270 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1ac>
 260:	ldr	w1, [sp, #84]
 264:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 268:	add	x0, x0, #0x0
 26c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 270:	add	x0, x24, #0x10
 274:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 278:	mov	x1, x25
 27c:	mov	x0, x23
 280:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 284:	cbnz	w22, 2a0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1dc>
 288:	mov	x4, #0x0                   	// #0
 28c:	mov	x3, #0x0                   	// #0
 290:	mov	x2, #0x0                   	// #0
 294:	mov	x1, #0x0                   	// #0
 298:	mov	w0, #0x4                   	// #4
 29c:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
 2a0:	ldp	x21, x22, [sp, #16]
 2a4:	ldp	x23, x24, [sp, #32]
 2a8:	ldp	x25, x26, [sp, #48]
 2ac:	ldr	x30, [sp, #64]
 2b0:	ldp	x19, x20, [sp], #208
 2b4:	ret
 2b8:	adrp	x20, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
 2bc:	adrp	x19, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
 2c0:	ldr	x0, [x20]
 2c4:	str	x21, [x0]
 2c8:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 2cc:	ldr	x1, [x19]
 2d0:	mov	x4, #0x0                   	// #0
 2d4:	mov	x3, #0x0                   	// #0
 2d8:	mov	x2, #0x0                   	// #0
 2dc:	str	x0, [x1]
 2e0:	mov	x1, x21
 2e4:	mov	w0, #0x6d61                	// #28001
 2e8:	movk	w0, #0x5961, lsl #16
 2ec:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
 2f0:	add	x0, x24, #0x10
 2f4:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 2f8:	ldr	x0, [sp, #192]
 2fc:	cbnz	x0, 308 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x244>
 300:	bl	0 <sched_yield>
 304:	b	2f8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x234>
 308:	mov	w2, #0x40000000            	// #1073741824
 30c:	mov	x1, #0x0                   	// #0
 310:	mov	w0, w21
 314:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 318:	mov	x1, x26
 31c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 320:	tst	w0, #0xff
 324:	b.eq	350 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x28c>  // b.none
 328:	ldr	w1, [sp, #84]
 32c:	cmp	w1, #0x4
 330:	b.eq	308 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x244>  // b.none
 334:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 338:	ldr	x0, [x0]
 33c:	ldr	w0, [x0]
 340:	cbz	w0, 350 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x28c>
 344:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 348:	add	x0, x0, #0x0
 34c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 350:	ldr	x20, [x20]
 354:	ldr	x19, [x19]
 358:	str	xzr, [x20]
 35c:	str	xzr, [x19]
 360:	b	278 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1b4>

0000000000000364 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>:
 364:	ldr	x4, [x0, #24]
 368:	str	x30, [sp, #-16]!
 36c:	cmp	x1, x4
 370:	b.cc	390 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm+0x2c>  // b.lo, b.ul, b.last
 374:	mov	x3, x1
 378:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 37c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 380:	add	x2, x2, #0x0
 384:	add	x0, x0, #0x0
 388:	mov	w1, #0x202                 	// #514
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	add	x0, x0, #0x8
 394:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 398:	ldr	x0, [x0]
 39c:	ldr	x30, [sp], #16
 3a0:	ret

00000000000003a4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>:
 3a4:	stp	x19, x20, [sp, #-80]!
 3a8:	mov	x20, #0x0                   	// #0
 3ac:	stp	x23, x24, [sp, #32]
 3b0:	adrp	x23, 0 <_ZN11__sanitizer17current_verbosityE>
 3b4:	add	x24, sp, #0x4c
 3b8:	stp	x25, x30, [sp, #48]
 3bc:	ldr	x25, [x23]
 3c0:	stp	x21, x22, [sp, #16]
 3c4:	adrp	x22, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 3c8:	mov	x21, x0
 3cc:	add	x22, x22, #0x0
 3d0:	ldr	x0, [x21, #32]
 3d4:	cmp	x20, x0
 3d8:	b.cs	458 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xb4>  // b.hs, b.nlast
 3dc:	mov	x1, x20
 3e0:	add	x0, x21, #0x8
 3e4:	bl	364 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
 3e8:	mov	w1, w0
 3ec:	mov	x3, #0x0                   	// #0
 3f0:	mov	x2, #0x0                   	// #0
 3f4:	mov	x19, x0
 3f8:	mov	w0, #0x11                  	// #17
 3fc:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
 400:	mov	x1, x24
 404:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 408:	tst	w0, #0xff
 40c:	b.ne	43c <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x98>  // b.any
 410:	ldr	x0, [x23]
 414:	ldr	w0, [x0]
 418:	sxtw	x0, w0
 41c:	cmp	x0, #0x1
 420:	b.ls	434 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x90>  // b.plast
 424:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 428:	mov	w1, w19
 42c:	add	x0, x0, #0x0
 430:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 434:	add	x20, x20, #0x1
 438:	b	3d0 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x2c>
 43c:	ldr	w0, [x25]
 440:	cbz	w0, 434 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x90>
 444:	ldr	w2, [sp, #76]
 448:	mov	w1, w19
 44c:	mov	x0, x22
 450:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 454:	b	434 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x90>
 458:	ldp	x21, x22, [sp, #16]
 45c:	ldp	x23, x24, [sp, #32]
 460:	ldp	x25, x30, [sp, #48]
 464:	ldp	x19, x20, [sp], #80
 468:	ret

000000000000046c <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>:
 46c:	stp	x19, x20, [sp, #-32]!
 470:	mov	x20, x0
 474:	mov	x19, #0x0                   	// #0
 478:	stp	x21, x30, [sp, #16]
 47c:	add	x21, x0, #0x8
 480:	ldr	x0, [x20, #32]
 484:	cmp	x19, x0
 488:	b.cs	4b4 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x48>  // b.hs, b.nlast
 48c:	mov	x1, x19
 490:	mov	x0, x21
 494:	bl	364 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
 498:	add	x19, x19, #0x1
 49c:	mov	w1, w0
 4a0:	mov	x3, #0x0                   	// #0
 4a4:	mov	x2, #0x0                   	// #0
 4a8:	mov	w0, #0x8                   	// #8
 4ac:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
 4b0:	b	480 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x14>
 4b4:	ldp	x21, x30, [sp, #16]
 4b8:	ldp	x19, x20, [sp], #32
 4bc:	ret

00000000000004c0 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv>:
 4c0:	stp	x19, x20, [sp, #-96]!
 4c4:	mov	w20, w0
 4c8:	add	x19, sp, #0x28
 4cc:	stp	x21, x30, [sp, #16]
 4d0:	mov	x0, x19
 4d4:	stp	x1, x2, [sp, #40]
 4d8:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
 4dc:	str	x0, [sp, #56]
 4e0:	mov	x0, x19
 4e4:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
 4e8:	strb	w0, [sp, #88]
 4ec:	mov	x0, x19
 4f0:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
 4f4:	str	w0, [sp, #92]
 4f8:	mov	x0, x19
 4fc:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
 500:	ldp	x2, x3, [sp, #56]
 504:	mov	w1, w20
 508:	ldr	x4, [sp, #72]
 50c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 510:	add	x0, x0, #0x0
 514:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 518:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 51c:	add	x0, x1, #0x0
 520:	ldr	x21, [x0, #256]
 524:	cbz	x21, 57c <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xbc>
 528:	mov	x19, x1
 52c:	mov	x0, x21
 530:	cmp	w20, #0x6
 534:	b.ne	560 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xa0>  // b.any
 538:	bl	46c <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
 53c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 540:	add	x0, x0, #0x0
 544:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
 548:	tst	w0, #0xff
 54c:	b.ne	568 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xa8>  // b.any
 550:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 554:	add	x0, x0, #0x0
 558:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 55c:	bl	0 <_ZN11__sanitizer3DieEv>
 560:	bl	3a4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
 564:	b	53c <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0x7c>
 568:	ldr	x0, [x21]
 56c:	add	x1, x19, #0x0
 570:	str	xzr, [x1, #256]
 574:	mov	x1, #0x1                   	// #1
 578:	str	x1, [x0, #104]
 57c:	cmp	w20, #0x6
 580:	cset	w0, ne  // ne = any
 584:	add	w0, w0, #0x1
 588:	bl	0 <_ZN11__sanitizer14internal__exitEi>

000000000000058c <_ZN11__sanitizerL23TracerThreadDieCallbackEv>:
 58c:	stp	x19, x20, [sp, #-32]!
 590:	adrp	x19, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 594:	add	x19, x19, #0x0
 598:	str	x30, [sp, #16]
 59c:	ldr	x20, [x19, #256]
 5a0:	cbz	x20, 5c8 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x3c>
 5a4:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 5a8:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
 5ac:	ldr	x1, [x1]
 5b0:	ldr	x1, [x1]
 5b4:	cmp	x0, x1
 5b8:	b.ne	5c8 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x3c>  // b.any
 5bc:	mov	x0, x20
 5c0:	bl	46c <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
 5c4:	str	xzr, [x19, #256]
 5c8:	ldr	x30, [sp, #16]
 5cc:	ldp	x19, x20, [sp], #32
 5d0:	ret

00000000000005d4 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>:
 5d4:	stp	x19, x20, [sp, #-48]!
 5d8:	add	x19, x0, #0x8
 5dc:	mov	x20, #0x0                   	// #0
 5e0:	stp	x21, x22, [sp, #16]
 5e4:	mov	x21, x1
 5e8:	ldr	x22, [x0, #24]
 5ec:	str	x30, [sp, #32]
 5f0:	cmp	x20, x22
 5f4:	b.eq	618 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x44>  // b.none
 5f8:	mov	x1, x20
 5fc:	mov	x0, x19
 600:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 604:	ldr	x0, [x0]
 608:	cmp	x0, x21
 60c:	b.eq	62c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x58>  // b.none
 610:	add	x20, x20, #0x1
 614:	b	5f0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x1c>
 618:	mov	w0, #0x0                   	// #0
 61c:	ldp	x21, x22, [sp, #16]
 620:	ldr	x30, [sp, #32]
 624:	ldp	x19, x20, [sp], #48
 628:	ret
 62c:	mov	w0, #0x1                   	// #1
 630:	b	61c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x48>

0000000000000634 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy>:
 634:	str	x30, [sp, #-32]!
 638:	add	x0, x0, #0x8
 63c:	str	x1, [sp, #24]
 640:	add	x1, sp, #0x18
 644:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 648:	ldr	x30, [sp], #32
 64c:	ret

0000000000000650 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>:
 650:	stp	x19, x20, [sp, #-80]!
 654:	mov	x19, x1
 658:	stp	x21, x22, [sp, #16]
 65c:	add	x22, x0, #0x8
 660:	mov	x0, x22
 664:	stp	x23, x24, [sp, #32]
 668:	stp	x25, x30, [sp, #48]
 66c:	bl	5d4 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>
 670:	ands	w20, w0, #0xff
 674:	b.ne	780 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x130>  // b.any
 678:	mov	x3, #0x0                   	// #0
 67c:	mov	x2, #0x0                   	// #0
 680:	mov	w1, w19
 684:	mov	w0, #0x10                  	// #16
 688:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
 68c:	mov	w24, w19
 690:	add	x1, sp, #0x40
 694:	adrp	x21, 0 <_ZN11__sanitizer17current_verbosityE>
 698:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 69c:	tst	w0, #0xff
 6a0:	b.eq	6dc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x8c>  // b.none
 6a4:	ldr	x21, [x21]
 6a8:	ldr	w0, [x21]
 6ac:	cbz	w0, 6c4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x74>
 6b0:	ldr	w2, [sp, #64]
 6b4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 6b8:	mov	x1, x19
 6bc:	add	x0, x0, #0x0
 6c0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 6c4:	mov	w0, w20
 6c8:	ldp	x21, x22, [sp, #16]
 6cc:	ldp	x23, x24, [sp, #32]
 6d0:	ldp	x25, x30, [sp, #48]
 6d4:	ldp	x19, x20, [sp], #80
 6d8:	ret
 6dc:	ldr	x0, [x21]
 6e0:	ldr	w0, [x0]
 6e4:	sxtw	x0, w0
 6e8:	cmp	x0, #0x1
 6ec:	b.ls	700 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xb0>  // b.plast
 6f0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 6f4:	mov	x1, x19
 6f8:	add	x0, x0, #0x0
 6fc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 700:	add	x25, sp, #0x44
 704:	add	x20, sp, #0x48
 708:	mov	w2, #0x40000000            	// #1073741824
 70c:	mov	x1, x25
 710:	mov	w0, w24
 714:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 718:	mov	x1, x20
 71c:	mov	x23, x0
 720:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 724:	tst	w0, #0xff
 728:	b.eq	738 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xe8>  // b.none
 72c:	ldr	w0, [sp, #72]
 730:	cmp	w0, #0x4
 734:	b.eq	708 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xb8>  // b.none
 738:	mov	x1, x20
 73c:	mov	x0, x23
 740:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 744:	tst	w0, #0xff
 748:	b.eq	788 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x138>  // b.none
 74c:	ldr	x21, [x21]
 750:	ldr	w0, [x21]
 754:	cbz	w0, 76c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x11c>
 758:	ldr	w2, [sp, #72]
 75c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 760:	mov	x1, x19
 764:	add	x0, x0, #0x0
 768:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 76c:	mov	w1, w19
 770:	mov	x3, #0x0                   	// #0
 774:	mov	x2, #0x0                   	// #0
 778:	mov	w0, #0x11                  	// #17
 77c:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
 780:	mov	w20, #0x0                   	// #0
 784:	b	6c4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x74>
 788:	ldr	w3, [sp, #68]
 78c:	and	w0, w3, #0xff
 790:	cmp	w0, #0x7f
 794:	b.ne	7bc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x16c>  // b.any
 798:	ubfx	x3, x3, #8, #8
 79c:	cmp	w3, #0x13
 7a0:	b.eq	7bc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x16c>  // b.none
 7a4:	and	x3, x3, #0xff
 7a8:	mov	w1, w24
 7ac:	mov	x2, #0x0                   	// #0
 7b0:	mov	w0, #0x7                   	// #7
 7b4:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
 7b8:	b	708 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xb8>
 7bc:	mov	x1, x20
 7c0:	add	x0, x22, #0x8
 7c4:	mov	w20, #0x1                   	// #1
 7c8:	str	x19, [sp, #72]
 7cc:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 7d0:	b	6c4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x74>

00000000000007d4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>:
 7d4:	stp	x19, x20, [sp, #-128]!
 7d8:	mov	x19, x0
 7dc:	stp	x21, x22, [sp, #16]
 7e0:	add	x22, sp, #0x60
 7e4:	ldr	w1, [x19, #40]
 7e8:	mov	x0, x22
 7ec:	stp	x23, x24, [sp, #32]
 7f0:	add	x23, sp, #0x48
 7f4:	stp	x25, x30, [sp, #48]
 7f8:	mov	w24, #0x0                   	// #0
 7fc:	bl	0 <_ZN11__sanitizer12ThreadListerC1Ei>
 800:	mov	x0, x23
 804:	mov	x1, #0x1                   	// #1
 808:	stp	xzr, xzr, [sp, #72]
 80c:	str	xzr, [sp, #88]
 810:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 814:	mov	x0, x23
 818:	mov	x1, #0x80                  	// #128
 81c:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 820:	mov	x1, x23
 824:	mov	x0, x22
 828:	bl	0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>
 82c:	cbz	w0, 864 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x90>
 830:	ldr	x20, [sp, #72]
 834:	cmp	w0, #0x1
 838:	ldr	x25, [sp, #88]
 83c:	cset	w21, eq  // eq = none
 840:	add	x25, x20, x25, lsl #3
 844:	cmp	x20, x25
 848:	b.eq	898 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xc4>  // b.none
 84c:	ldr	x1, [x20], #8
 850:	mov	x0, x19
 854:	bl	650 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>
 858:	ands	w0, w0, #0xff
 85c:	csel	w21, w21, w0, eq  // eq = none
 860:	b	844 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x70>
 864:	mov	x0, x19
 868:	mov	w19, #0x0                   	// #0
 86c:	bl	3a4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
 870:	ldp	x0, x1, [sp, #72]
 874:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 878:	mov	x0, x22
 87c:	bl	0 <_ZN11__sanitizer12ThreadListerD1Ev>
 880:	mov	w0, w19
 884:	ldp	x21, x22, [sp, #16]
 888:	ldp	x23, x24, [sp, #32]
 88c:	ldp	x25, x30, [sp, #48]
 890:	ldp	x19, x20, [sp], #128
 894:	ret
 898:	add	w24, w24, #0x1
 89c:	eor	w21, w21, #0x1
 8a0:	cmp	w24, #0x1d
 8a4:	cset	w0, gt
 8a8:	orr	w21, w0, w21
 8ac:	tst	w21, #0xff
 8b0:	b.eq	820 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x4c>  // b.none
 8b4:	ldr	x0, [x19, #32]
 8b8:	cmp	x0, #0x0
 8bc:	cset	w19, ne  // ne = any
 8c0:	b	870 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x9c>

00000000000008c4 <_ZN11__sanitizerL12TracerThreadEPv>:
 8c4:	stp	x19, x20, [sp, #-352]!
 8c8:	mov	x1, #0x9                   	// #9
 8cc:	mov	x19, x0
 8d0:	mov	x4, #0x0                   	// #0
 8d4:	mov	x3, #0x0                   	// #0
 8d8:	mov	x2, #0x0                   	// #0
 8dc:	mov	w0, #0x1                   	// #1
 8e0:	stp	x21, x22, [sp, #16]
 8e4:	stp	x23, x24, [sp, #32]
 8e8:	stp	x25, x26, [sp, #48]
 8ec:	stp	x27, x28, [sp, #64]
 8f0:	str	x30, [sp, #80]
 8f4:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
 8f8:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
 8fc:	ldr	x1, [x19, #112]
 900:	cmp	x0, x1
 904:	b.eq	910 <_ZN11__sanitizerL12TracerThreadEPv+0x4c>  // b.none
 908:	mov	w0, #0x4                   	// #4
 90c:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 910:	add	x20, x19, #0x10
 914:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 918:	mov	x0, x20
 91c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 920:	mov	x0, x20
 924:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 928:	add	x0, x24, #0x0
 92c:	bl	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 930:	tst	w0, #0xff
 934:	b.ne	948 <_ZN11__sanitizerL12TracerThreadEPv+0x84>  // b.any
 938:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 93c:	add	x0, x0, #0x0
 940:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 944:	bl	0 <_ZN11__sanitizer3DieEv>
 948:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
 94c:	add	x22, sp, #0x98
 950:	mov	x21, x0
 954:	add	x23, x22, #0x10
 958:	adrp	x20, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 95c:	add	x0, x20, #0x0
 960:	mov	x1, #0x1                   	// #1
 964:	stp	x19, x0, [sp, #152]
 968:	mov	x0, x23
 96c:	stp	xzr, xzr, [sp, #168]
 970:	str	xzr, [sp, #184]
 974:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 978:	mov	x0, x23
 97c:	mov	x1, #0x400                 	// #1024
 980:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 984:	str	w21, [sp, #192]
 988:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 98c:	add	x0, x21, #0x0
 990:	add	x23, sp, #0x68
 994:	mov	x1, #0x2000                	// #8192
 998:	stp	xzr, xzr, [sp, #104]
 99c:	str	xzr, [sp, #120]
 9a0:	str	x22, [x0, #256]
 9a4:	mov	x0, x23
 9a8:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 9ac:	ldr	x1, [sp, #120]
 9b0:	mov	x0, #0x1fff                	// #8191
 9b4:	cmp	x1, x0
 9b8:	b.hi	9f0 <_ZN11__sanitizerL12TracerThreadEPv+0x12c>  // b.pmore
 9bc:	ldr	x1, [sp, #112]
 9c0:	cmp	x1, x0
 9c4:	b.hi	9d4 <_ZN11__sanitizerL12TracerThreadEPv+0x110>  // b.pmore
 9c8:	mov	x0, x23
 9cc:	mov	x1, #0x2000                	// #8192
 9d0:	bl	0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 9d4:	ldr	x3, [sp, #104]
 9d8:	mov	x2, #0x2000                	// #8192
 9dc:	ldr	x0, [sp, #120]
 9e0:	mov	w1, #0x0                   	// #0
 9e4:	sub	x2, x2, x0
 9e8:	add	x0, x3, x0
 9ec:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 9f0:	add	x23, sp, #0x80
 9f4:	mov	x25, #0x2000                	// #8192
 9f8:	mov	x0, x23
 9fc:	mov	x2, #0x18                  	// #24
 a00:	mov	w1, #0x0                   	// #0
 a04:	str	x25, [sp, #120]
 a08:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 a0c:	adrp	x26, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 a10:	mov	w27, #0x4                   	// #4
 a14:	add	x28, sp, #0xc8
 a18:	add	x26, x26, #0x0
 a1c:	str	x25, [sp, #144]
 a20:	adrp	x25, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 a24:	add	x25, x25, #0x0
 a28:	ldr	x0, [sp, #104]
 a2c:	movk	w27, #0x800, lsl #16
 a30:	str	x0, [sp, #128]
 a34:	mov	x0, x23
 a38:	mov	x23, #0x0                   	// #0
 a3c:	mov	x1, #0x0                   	// #0
 a40:	bl	0 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>
 a44:	mov	x2, #0x98                  	// #152
 a48:	mov	w1, #0x0                   	// #0
 a4c:	mov	x0, x28
 a50:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 a54:	ldr	w0, [x25, x23, lsl #2]
 a58:	mov	x1, x28
 a5c:	add	x23, x23, #0x1
 a60:	mov	x2, #0x0                   	// #0
 a64:	str	x26, [sp, #200]
 a68:	str	w27, [sp, #336]
 a6c:	bl	0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>
 a70:	cmp	x23, #0x7
 a74:	b.ne	a44 <_ZN11__sanitizerL12TracerThreadEPv+0x180>  // b.any
 a78:	mov	x0, x22
 a7c:	bl	7d4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>
 a80:	tst	w0, #0xff
 a84:	b.ne	aac <_ZN11__sanitizerL12TracerThreadEPv+0x1e8>  // b.any
 a88:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 a8c:	ldr	x0, [x0]
 a90:	ldr	w0, [x0]
 a94:	cbz	w0, aa4 <_ZN11__sanitizerL12TracerThreadEPv+0x1e0>
 a98:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 a9c:	add	x0, x0, #0x0
 aa0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 aa4:	mov	w22, #0x3                   	// #3
 aa8:	b	ac4 <_ZN11__sanitizerL12TracerThreadEPv+0x200>
 aac:	ldp	x2, x1, [x19]
 ab0:	add	x0, x22, #0x8
 ab4:	blr	x2
 ab8:	mov	x0, x22
 abc:	mov	w22, #0x0                   	// #0
 ac0:	bl	3a4 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
 ac4:	add	x0, x24, #0x0
 ac8:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
 acc:	tst	w0, #0xff
 ad0:	b.ne	ae0 <_ZN11__sanitizerL12TracerThreadEPv+0x21c>  // b.any
 ad4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
 ad8:	add	x0, x0, #0x0
 adc:	b	940 <_ZN11__sanitizerL12TracerThreadEPv+0x7c>
 ae0:	mov	x0, #0x1                   	// #1
 ae4:	str	x0, [x19, #104]
 ae8:	ldr	x0, [sp, #104]
 aec:	add	x21, x21, #0x0
 af0:	ldr	x1, [sp, #112]
 af4:	add	x20, x20, #0x0
 af8:	str	xzr, [x21, #256]
 afc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b00:	str	x20, [sp, #160]
 b04:	ldp	x0, x1, [sp, #168]
 b08:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 b0c:	mov	w0, w22
 b10:	ldp	x21, x22, [sp, #16]
 b14:	ldp	x23, x24, [sp, #32]
 b18:	ldp	x25, x26, [sp, #48]
 b1c:	ldp	x27, x28, [sp, #64]
 b20:	ldr	x30, [sp, #80]
 b24:	ldp	x19, x20, [sp], #352
 b28:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x3, x0
   8:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   c:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x0, x0, #0x1
  2c:	tst	x0, x3
  30:	b.eq	84 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x84>  // b.none
  34:	clz	x1, x3
  38:	mov	w4, #0x3f                  	// #63
  3c:	sub	w1, w4, w1
  40:	mov	x4, #0x1                   	// #1
  44:	add	w0, w1, #0x1
  48:	lsl	x0, x4, x0
  4c:	cmp	x3, x0
  50:	b.cc	68 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x68>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x17b                 	// #379
  64:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  68:	lsl	x4, x4, x1
  6c:	cmp	x3, x4
  70:	b.hi	88 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x88>  // b.pmore
  74:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  78:	mov	w1, #0x17c                 	// #380
  7c:	add	x2, x2, #0x0
  80:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  84:	mov	x0, x3
  88:	ldr	x30, [sp], #16
  8c:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm:

0000000000000000 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer24InternalMmapVectorNoCtorIyEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1ba                 	// #442
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #3
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #3
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #3
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIyE7reserveEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7reserveEm>:
   0:	ldr	x2, [x0, #8]
   4:	cmp	x1, x2, lsr #3
   8:	b.ls	10 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7reserveEm+0x10>  // b.plast
   c:	b	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE7reserveEm>
  10:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	ldp	x4, x3, [x0, #8]
   8:	str	x30, [sp, #16]
   c:	lsr	x4, x4, #3
  10:	cmp	x3, x4
  14:	b.ls	30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy+0x30>  // b.plast
  18:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy>
  1c:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	w1, #0x1be                 	// #446
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	b.ne	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy+0x50>  // b.any
  3c:	add	x0, x3, #0x1
  40:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy>
  44:	mov	x1, x0
  48:	mov	x0, x19
  4c:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIyE9push_backERKy>
  50:	ldr	x0, [x19, #16]
  54:	mov	x2, #0x8                   	// #8
  58:	ldr	x30, [sp, #16]
  5c:	add	x1, x0, #0x1
  60:	str	x1, [x19, #16]
  64:	mov	x1, x20
  68:	ldr	x3, [x19]
  6c:	ldp	x19, x20, [sp], #32
  70:	add	x0, x3, x0, lsl #3
  74:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

sanitizer_stoptheworld_mac.o:     file format elf64-littleaarch64


sanitizer_suppressions.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>:
   0:	ldr	x0, [x0, #32]
   4:	ret

0000000000000008 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>:
   8:	stp	x19, x20, [sp, #-48]!
   c:	mov	x19, x0
  10:	mov	x20, #0x0                   	// #0
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x1
  1c:	str	x30, [sp, #32]
  20:	ldr	w0, [x19, #8]
  24:	mov	w21, w20
  28:	cmp	w0, w20
  2c:	b.le	60 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x58>
  30:	ldr	x0, [x19]
  34:	ldr	x1, [x0, x20, lsl #3]
  38:	mov	x0, x22
  3c:	add	x20, x20, #0x1
  40:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  44:	cbnz	w0, 20 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x18>
  48:	add	x19, x19, w21, sxtw
  4c:	ldrb	w0, [x19, #40]
  50:	ldp	x21, x22, [sp, #16]
  54:	ldr	x30, [sp, #32]
  58:	ldp	x19, x20, [sp], #48
  5c:	ret
  60:	mov	w0, #0x0                   	// #0
  64:	b	50 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x48>

0000000000000068 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm>:
  68:	ldr	x4, [x0, #32]
  6c:	mov	x3, x1
  70:	cmp	x1, x4
  74:	b.cc	94 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm+0x2c>  // b.lo, b.ul, b.last
  78:	str	x30, [sp, #-16]!
  7c:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
  80:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
  84:	add	x2, x2, #0x0
  88:	add	x0, x0, #0x0
  8c:	mov	w1, #0x9e                  	// #158
  90:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  94:	ldr	x0, [x0, #16]
  98:	add	x0, x0, x1, lsl #5
  9c:	ret

00000000000000a0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>:
  a0:	stp	x19, x20, [sp, #-64]!
  a4:	mov	x19, x0
  a8:	stp	x21, x22, [sp, #16]
  ac:	mov	x22, x2
  b0:	stp	x23, x24, [sp, #32]
  b4:	mov	x23, x1
  b8:	mov	x24, x3
  bc:	stp	x25, x30, [sp, #48]
  c0:	mov	x1, x2
  c4:	strb	wzr, [x0, #72]
  c8:	bl	8 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>
  cc:	tst	w0, #0xff
  d0:	b.eq	13c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x9c>  // b.none
  d4:	add	x25, x19, #0x10
  d8:	mov	x21, #0x0                   	// #0
  dc:	ldr	x0, [x19, #32]
  e0:	cmp	x21, x0
  e4:	b.cs	13c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x9c>  // b.hs, b.nlast
  e8:	mov	x1, x21
  ec:	mov	x0, x25
  f0:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
  f4:	mov	x20, x0
  f8:	ldr	x0, [x0]
  fc:	mov	x1, x22
 100:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 104:	cbnz	w0, 134 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x94>
 108:	ldr	x0, [x20, #8]
 10c:	mov	x1, x23
 110:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 114:	ands	w0, w0, #0xff
 118:	b.eq	134 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x94>  // b.none
 11c:	str	x20, [x24]
 120:	ldp	x21, x22, [sp, #16]
 124:	ldp	x23, x24, [sp, #32]
 128:	ldp	x25, x30, [sp, #48]
 12c:	ldp	x19, x20, [sp], #64
 130:	ret
 134:	add	x21, x21, #0x1
 138:	b	dc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x3c>
 13c:	mov	w0, #0x0                   	// #0
 140:	b	120 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x80>

0000000000000144 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>:
 144:	stp	x19, x20, [sp, #-96]!
 148:	mov	x19, x1
 14c:	stp	x23, x24, [sp, #32]
 150:	adrp	x24, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 154:	mov	x23, x0
 158:	add	x24, x24, #0x0
 15c:	stp	x25, x26, [sp, #48]
 160:	add	x25, x0, #0x10
 164:	add	x26, sp, #0x58
 168:	stp	x21, x22, [sp, #16]
 16c:	mov	x22, #0x0                   	// #0
 170:	str	x30, [sp, #64]
 174:	ldr	x0, [x23, #32]
 178:	cmp	x22, x0
 17c:	b.cs	278 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x134>  // b.hs, b.nlast
 180:	mov	x1, x22
 184:	mov	x0, x25
 188:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 18c:	ldr	w1, [x0, #16]
 190:	cbz	w1, 270 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x12c>
 194:	ldp	x4, x21, [x19, #8]
 198:	str	x0, [sp, #88]
 19c:	lsr	x4, x4, #3
 1a0:	cmp	x21, x4
 1a4:	b.ls	1c4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x80>  // b.plast
 1a8:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 1ac:	mov	x3, x21
 1b0:	add	x2, x2, #0x0
 1b4:	mov	w1, #0x1be                 	// #446
 1b8:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 1bc:	add	x0, x0, #0x0
 1c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1c4:	b.ne	250 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x10c>  // b.any
 1c8:	add	x0, x21, #0x1
 1cc:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 1d0:	mov	x20, x0
 1d4:	cbnz	x0, 1f0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xac>
 1d8:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 1dc:	mov	x4, #0x0                   	// #0
 1e0:	add	x2, x2, #0x0
 1e4:	mov	x3, #0x0                   	// #0
 1e8:	mov	w1, #0x1fc                 	// #508
 1ec:	b	1b8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x74>
 1f0:	cmp	x21, x0
 1f4:	b.ls	210 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xcc>  // b.plast
 1f8:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 1fc:	mov	x4, x0
 200:	mov	x3, x21
 204:	add	x2, x2, #0x0
 208:	mov	w1, #0x1fd                 	// #509
 20c:	b	1b8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x74>
 210:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 214:	mov	x1, x0
 218:	lsl	x0, x20, #3
 21c:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 220:	mov	x1, x24
 224:	mov	x20, x0
 228:	mov	w2, #0x0                   	// #0
 22c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 230:	ldr	x1, [x19]
 234:	mov	x21, x0
 238:	ldr	x2, [x19, #16]
 23c:	lsl	x2, x2, #3
 240:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 244:	ldp	x0, x1, [x19]
 248:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 24c:	stp	x21, x20, [x19]
 250:	mov	x2, #0x8                   	// #8
 254:	ldr	x0, [x19, #16]
 258:	ldr	x3, [x19]
 25c:	add	x1, x0, #0x1
 260:	str	x1, [x19, #16]
 264:	mov	x1, x26
 268:	add	x0, x3, x0, lsl #3
 26c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 270:	add	x22, x22, #0x1
 274:	b	174 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x30>
 278:	ldp	x21, x22, [sp, #16]
 27c:	ldp	x23, x24, [sp, #32]
 280:	ldp	x25, x26, [sp, #48]
 284:	ldr	x30, [sp, #64]
 288:	ldp	x19, x20, [sp], #96
 28c:	ret

0000000000000290 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>:
 290:	stp	x19, x20, [sp, #-112]!
 294:	stp	x21, x22, [sp, #16]
 298:	mov	x21, x0
 29c:	ldrb	w0, [x0, #72]
 2a0:	stp	x23, x24, [sp, #32]
 2a4:	stp	x25, x26, [sp, #48]
 2a8:	stp	x27, x30, [sp, #64]
 2ac:	cbz	w0, 2dc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x4c>
 2b0:	mov	x19, x1
 2b4:	add	x24, sp, #0x50
 2b8:	add	x23, x21, #0x10
 2bc:	mov	w25, #0x1                   	// #1
 2c0:	cbz	x19, 494 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x204>
 2c4:	ldrb	w0, [x19]
 2c8:	cmp	w0, #0x20
 2cc:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 2d0:	b.ne	2fc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x6c>  // b.any
 2d4:	add	x19, x19, #0x1
 2d8:	b	2c4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x34>
 2dc:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 2e0:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 2e4:	add	x2, x2, #0x0
 2e8:	add	x0, x0, #0x0
 2ec:	mov	x4, #0x0                   	// #0
 2f0:	mov	x3, #0x0                   	// #0
 2f4:	mov	w1, #0x6a                  	// #106
 2f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2fc:	mov	x0, x19
 300:	mov	w1, #0xa                   	// #10
 304:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 308:	mov	x20, x0
 30c:	cbnz	x0, 31c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x8c>
 310:	mov	x0, x19
 314:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 318:	add	x20, x19, x0
 31c:	cmp	x19, x20
 320:	b.eq	484 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1f4>  // b.none
 324:	ldrb	w0, [x19]
 328:	cmp	w0, #0x23
 32c:	b.eq	484 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1f4>  // b.none
 330:	mov	x22, x20
 334:	ldurb	w0, [x22, #-1]
 338:	and	w1, w0, #0xfffffffb
 33c:	cmp	w0, #0x20
 340:	ccmp	w1, #0x9, #0x4, ne  // ne = any
 344:	b.ne	354 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xc4>  // b.any
 348:	sub	x22, x22, #0x1
 34c:	cmp	x19, x22
 350:	b.ne	334 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xa4>  // b.any
 354:	ldr	w3, [x21, #8]
 358:	mov	x0, #0x0                   	// #0
 35c:	mov	w27, w0
 360:	cmp	w3, w0
 364:	b.le	420 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x190>
 368:	ldr	x1, [x21]
 36c:	ldr	x2, [x1, x0, lsl #3]
 370:	mov	x1, #0x0                   	// #0
 374:	sub	x2, x2, #0x1
 378:	ldrb	w4, [x19, x1]
 37c:	add	x6, x19, x1
 380:	add	x1, x1, #0x1
 384:	ldrb	w5, [x2, x1]
 388:	cmp	w4, w5
 38c:	b.eq	378 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xe8>  // b.none
 390:	cbnz	w5, 418 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x188>
 394:	cmp	w4, #0x3a
 398:	b.ne	418 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x188>  // b.any
 39c:	add	x19, x6, #0x1
 3a0:	mov	x2, #0x20                  	// #32
 3a4:	mov	w1, #0x0                   	// #0
 3a8:	mov	x0, x24
 3ac:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 3b0:	ldr	x0, [x21]
 3b4:	sub	x22, x22, x19
 3b8:	mov	x2, #0x0                   	// #0
 3bc:	mov	x1, #0x0                   	// #0
 3c0:	sxtw	x26, w27
 3c4:	ldr	x0, [x0, w27, sxtw #3]
 3c8:	str	x0, [sp, #80]
 3cc:	add	x0, x22, #0x1
 3d0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 3d4:	mov	x2, x22
 3d8:	mov	x1, x19
 3dc:	str	x0, [sp, #88]
 3e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e4:	ldr	x0, [sp, #88]
 3e8:	strb	wzr, [x0, x22]
 3ec:	ldr	x4, [x21, #24]
 3f0:	ldr	x3, [x23, #16]
 3f4:	lsr	x4, x4, #5
 3f8:	cmp	x3, x4
 3fc:	b.ls	444 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1b4>  // b.plast
 400:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 404:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 408:	add	x2, x2, #0x0
 40c:	add	x0, x0, #0x0
 410:	mov	w1, #0x1be                 	// #446
 414:	b	2f8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x68>
 418:	add	x0, x0, #0x1
 41c:	b	35c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xcc>
 420:	cmp	w3, w0
 424:	b.ne	3a0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x110>  // b.any
 428:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 42c:	ldr	x0, [x0]
 430:	ldr	x1, [x0]
 434:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 438:	add	x0, x0, #0x0
 43c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 440:	bl	0 <_ZN11__sanitizer3DieEv>
 444:	b.ne	45c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1cc>  // b.any
 448:	add	x0, x3, #0x1
 44c:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 450:	mov	x1, x0
 454:	mov	x0, x23
 458:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 45c:	ldr	x0, [x23, #16]
 460:	add	x26, x21, x26
 464:	ldr	x3, [x23]
 468:	add	x1, x0, #0x1
 46c:	str	x1, [x23, #16]
 470:	mov	x2, #0x20                  	// #32
 474:	mov	x1, x24
 478:	add	x0, x3, x0, lsl #5
 47c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 480:	strb	w25, [x26, #40]
 484:	ldrb	w0, [x20]
 488:	cbz	w0, 494 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x204>
 48c:	add	x19, x20, #0x1
 490:	b	2c0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x30>
 494:	ldp	x21, x22, [sp, #16]
 498:	ldp	x23, x24, [sp, #32]
 49c:	ldp	x25, x26, [sp, #48]
 4a0:	ldp	x27, x30, [sp, #64]
 4a4:	ldp	x19, x20, [sp], #112
 4a8:	ret

00000000000004ac <_ZN11__sanitizer18SuppressionContextC1EPPKci>:
 4ac:	stp	x19, x30, [sp, #-16]!
 4b0:	mov	x19, x0
 4b4:	add	x0, x0, #0x10
 4b8:	stur	w2, [x0, #-8]
 4bc:	stur	x1, [x0, #-16]
 4c0:	mov	x1, #0x1                   	// #1
 4c4:	stp	xzr, xzr, [x0, #8]
 4c8:	str	xzr, [x19, #16]
 4cc:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 4d0:	ldrsw	x2, [x19, #8]
 4d4:	mov	w0, #0x1                   	// #1
 4d8:	strb	w0, [x19, #72]
 4dc:	cmp	x2, #0x20
 4e0:	b.ls	504 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0x58>  // b.plast
 4e4:	mov	x3, x2
 4e8:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 4ec:	adrp	x2, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 4f0:	add	x0, x0, #0x0
 4f4:	add	x2, x2, #0x0
 4f8:	mov	x4, #0x20                  	// #32
 4fc:	mov	w1, #0x1c                  	// #28
 500:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 504:	add	x0, x19, #0x28
 508:	mov	w1, #0x0                   	// #0
 50c:	ldp	x19, x30, [sp], #16
 510:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000514 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>:
 514:	stp	x19, x20, [sp, #-144]!
 518:	stp	x21, x22, [sp, #16]
 51c:	mov	x22, x0
 520:	stp	x23, x24, [sp, #32]
 524:	str	x30, [sp, #48]
 528:	ldrb	w0, [x1]
 52c:	cbz	w0, 65c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x148>
 530:	mov	x19, x1
 534:	mov	x1, #0x1000                	// #4096
 538:	add	x0, sp, #0x50
 53c:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 540:	mov	x0, x19
 544:	add	x23, sp, #0x70
 548:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 54c:	tst	w0, #0xff
 550:	b.ne	5d8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc4>  // b.any
 554:	mov	x0, x19
 558:	bl	0 <_ZN11__sanitizer14IsAbsolutePathEPKc>
 55c:	ands	w20, w0, #0xff
 560:	b.ne	5d8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc4>  // b.any
 564:	mov	x0, x23
 568:	mov	x1, #0x1000                	// #4096
 56c:	ldr	x24, [sp, #80]
 570:	ldr	x21, [sp, #96]
 574:	bl	0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 578:	ldr	x0, [sp, #112]
 57c:	ldr	x1, [sp, #128]
 580:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 584:	cbz	x0, 5c8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb4>
 588:	ldr	x0, [sp, #112]
 58c:	sub	x21, x21, #0x1
 590:	mov	w20, #0x1                   	// #1
 594:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 598:	ldr	x1, [sp, #112]
 59c:	sub	x2, x0, x1
 5a0:	mov	x0, x24
 5a4:	cmp	x2, x21
 5a8:	csel	x2, x2, x21, ls  // ls = plast
 5ac:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 5b0:	mov	x0, x24
 5b4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 5b8:	mov	x1, x19
 5bc:	sub	x2, x21, x0
 5c0:	mov	x0, x24
 5c4:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 5c8:	ldp	x0, x1, [sp, #112]
 5cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5d0:	cbz	w20, 5d8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc4>
 5d4:	ldr	x19, [sp, #80]
 5d8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 5dc:	ldr	x0, [x0]
 5e0:	ldr	w0, [x0]
 5e4:	cbz	w0, 604 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xf0>
 5e8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 5ec:	mov	x2, x19
 5f0:	ldr	x0, [x0]
 5f4:	ldr	x1, [x0]
 5f8:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 5fc:	add	x0, x0, #0x0
 600:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 604:	mov	x3, x23
 608:	add	x2, sp, #0x48
 60c:	add	x1, sp, #0x40
 610:	mov	x0, x19
 614:	mov	x5, #0x0                   	// #0
 618:	mov	x4, #0x4000000             	// #67108864
 61c:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 620:	tst	w0, #0xff
 624:	b.ne	648 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x134>  // b.any
 628:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 62c:	mov	x2, x19
 630:	ldr	x0, [x0]
 634:	ldr	x1, [x0]
 638:	adrp	x0, 0 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>
 63c:	add	x0, x0, #0x0
 640:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 644:	bl	0 <_ZN11__sanitizer3DieEv>
 648:	ldr	x1, [sp, #64]
 64c:	mov	x0, x22
 650:	bl	290 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
 654:	ldp	x0, x1, [sp, #80]
 658:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 65c:	ldp	x21, x22, [sp, #16]
 660:	ldp	x23, x24, [sp, #32]
 664:	ldr	x30, [sp, #48]
 668:	ldp	x19, x20, [sp], #144
 66c:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x3, x0
   8:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   c:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x0, x0, #0x1
  2c:	tst	x0, x3
  30:	b.eq	84 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x84>  // b.none
  34:	clz	x1, x3
  38:	mov	w4, #0x3f                  	// #63
  3c:	sub	w1, w4, w1
  40:	mov	x4, #0x1                   	// #1
  44:	add	w0, w1, #0x1
  48:	lsl	x0, x4, x0
  4c:	cmp	x3, x0
  50:	b.cc	68 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x68>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x17b                 	// #379
  64:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  68:	lsl	x4, x4, x1
  6c:	cmp	x3, x4
  70:	b.hi	88 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x88>  // b.pmore
  74:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  78:	mov	w1, #0x17c                 	// #380
  7c:	add	x2, x2, #0x0
  80:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  84:	mov	x0, x3
  88:	ldr	x30, [sp], #16
  8c:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #5
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  58:	mov	x1, x0
  5c:	lsl	x0, x20, #5
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_11SuppressionEE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	lsl	x2, x2, #5
  88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  8c:	ldp	x0, x1, [x19]
  90:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  94:	stp	x21, x20, [x19]
  98:	ldp	x21, x30, [sp, #16]
  9c:	ldp	x19, x20, [sp], #32
  a0:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

sanitizer_symbolizer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer11AddressInfoC1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x2, #0x40                  	// #64
   c:	mov	w1, #0x0                   	// #0
  10:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  14:	mov	x0, #0xffffffffffffffff    	// #-1
  18:	str	x0, [x19, #40]
  1c:	ldp	x19, x30, [sp], #16
  20:	ret

0000000000000024 <_ZN11__sanitizer11AddressInfo5ClearEv>:
  24:	stp	x19, x30, [sp, #-16]!
  28:	mov	x19, x0
  2c:	mov	x1, #0x0                   	// #0
  30:	ldr	x0, [x0, #8]
  34:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  38:	ldr	x0, [x19, #32]
  3c:	mov	x1, #0x0                   	// #0
  40:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  44:	ldr	x0, [x19, #48]
  48:	mov	x1, #0x0                   	// #0
  4c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  50:	mov	x0, x19
  54:	mov	x2, #0x40                  	// #64
  58:	mov	w1, #0x0                   	// #0
  5c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  60:	mov	x0, #0xffffffffffffffff    	// #-1
  64:	str	x0, [x19, #40]
  68:	ldp	x19, x30, [sp], #16
  6c:	ret

0000000000000070 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>:
  70:	stp	x19, x20, [sp, #-32]!
  74:	mov	x19, x0
  78:	mov	w20, w3
  7c:	mov	x0, x1
  80:	stp	x21, x30, [sp, #16]
  84:	mov	x21, x2
  88:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  8c:	stp	x0, x21, [x19, #8]
  90:	str	w20, [x19, #24]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

00000000000000a0 <_ZN11__sanitizer15SymbolizedStackC1Ev>:
  a0:	str	xzr, [x0], #8
  a4:	b	0 <_ZN11__sanitizer11AddressInfoC1Ev>

00000000000000a8 <_ZN11__sanitizer15SymbolizedStack3NewEm>:
  a8:	stp	x19, x20, [sp, #-32]!
  ac:	mov	x2, #0x0                   	// #0
  b0:	mov	x20, x0
  b4:	mov	x1, #0x0                   	// #0
  b8:	mov	x0, #0x48                  	// #72
  bc:	str	x30, [sp, #16]
  c0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  c4:	mov	x19, x0
  c8:	bl	a0 <_ZN11__sanitizer15SymbolizedStackC1Ev>
  cc:	ldr	x30, [sp, #16]
  d0:	mov	x0, x19
  d4:	str	x20, [x19, #8]
  d8:	ldp	x19, x20, [sp], #32
  dc:	ret

00000000000000e0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>:
  e0:	stp	x19, x30, [sp, #-16]!
  e4:	mov	x19, x0
  e8:	add	x0, x0, #0x8
  ec:	bl	24 <_ZN11__sanitizer11AddressInfo5ClearEv>
  f0:	ldr	x0, [x19]
  f4:	cbz	x0, fc <_ZN11__sanitizer15SymbolizedStack8ClearAllEv+0x1c>
  f8:	bl	e0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
  fc:	mov	x0, x19
 100:	mov	x1, #0x0                   	// #0
 104:	ldp	x19, x30, [sp], #16
 108:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>

000000000000010c <_ZN11__sanitizer8DataInfoC1Ev>:
 10c:	mov	x2, #0x40                  	// #64
 110:	mov	w1, #0x0                   	// #0
 114:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000118 <_ZN11__sanitizer8DataInfo5ClearEv>:
 118:	stp	x19, x30, [sp, #-16]!
 11c:	mov	x19, x0
 120:	mov	x1, #0x0                   	// #0
 124:	ldr	x0, [x0]
 128:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 12c:	ldr	x0, [x19, #24]
 130:	mov	x1, #0x0                   	// #0
 134:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 138:	ldr	x0, [x19, #40]
 13c:	mov	x1, #0x0                   	// #0
 140:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 144:	mov	x0, x19
 148:	mov	x2, #0x40                  	// #64
 14c:	ldp	x19, x30, [sp], #16
 150:	mov	w1, #0x0                   	// #0
 154:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000158 <_ZN11__sanitizer10Symbolizer20InvalidateModuleListEv>:
 158:	strb	wzr, [x0, #104]
 15c:	ret

0000000000000160 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_>:
 160:	ldr	x3, [x0, #224]
 164:	cbnz	x3, 178 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x18>
 168:	ldr	x3, [x0, #232]
 16c:	cbnz	x3, 178 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x18>
 170:	stp	x1, x2, [x0, #224]
 174:	ret
 178:	str	x30, [sp, #-16]!
 17c:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 180:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 184:	add	x2, x2, #0x0
 188:	add	x0, x0, #0x0
 18c:	mov	x4, #0x0                   	// #0
 190:	mov	x3, #0x0                   	// #0
 194:	mov	w1, #0x4e                  	// #78
 198:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

000000000000019c <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>:
 19c:	str	x1, [x0]
 1a0:	ldr	x0, [x1, #224]
 1a4:	cbz	x0, 1b0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_+0x14>
 1a8:	mov	x16, x0
 1ac:	br	x16
 1b0:	ret

00000000000001b4 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>:
 1b4:	ldr	x0, [x0]
 1b8:	ldr	x0, [x0, #232]
 1bc:	cbz	x0, 1c8 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev+0x14>
 1c0:	mov	x16, x0
 1c4:	br	x16
 1c8:	ret

00000000000001cc <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>:
 1cc:	stp	x19, x20, [sp, #-32]!
 1d0:	mov	x19, x0
 1d4:	mov	x20, x1
 1d8:	ldr	x0, [x0, #32]
 1dc:	stp	x21, x30, [sp, #16]
 1e0:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 1e4:	ldr	x0, [x19, #24]
 1e8:	cbnz	x0, 238 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x6c>
 1ec:	mov	x21, #0x0                   	// #0
 1f0:	ldr	x0, [x19, #16]
 1f4:	cmp	x21, x0
 1f8:	b.cs	254 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x88>  // b.hs, b.nlast
 1fc:	mov	x1, x21
 200:	mov	x0, x19
 204:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 208:	ldr	x0, [x0]
 20c:	mov	x1, x20
 210:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 214:	cbnz	w0, 24c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x80>
 218:	mov	x1, x21
 21c:	mov	x0, x19
 220:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 224:	ldr	x0, [x0]
 228:	str	x0, [x19, #24]
 22c:	ldp	x21, x30, [sp, #16]
 230:	ldp	x19, x20, [sp], #32
 234:	ret
 238:	mov	x1, x20
 23c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 240:	cbnz	w0, 1ec <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x20>
 244:	ldr	x0, [x19, #24]
 248:	b	22c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x60>
 24c:	add	x21, x21, #0x1
 250:	b	1f0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x24>
 254:	mov	x0, x20
 258:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 25c:	ldp	x4, x3, [x19, #8]
 260:	mov	x20, x19
 264:	str	x0, [x20, #24]!
 268:	lsr	x4, x4, #3
 26c:	cmp	x3, x4
 270:	b.ls	28c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xc0>  // b.plast
 274:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 278:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 27c:	add	x2, x2, #0x0
 280:	add	x0, x0, #0x0
 284:	mov	w1, #0x1be                 	// #446
 288:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 28c:	b.ne	2a4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xd8>  // b.any
 290:	add	x0, x3, #0x1
 294:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 298:	mov	x1, x0
 29c:	mov	x0, x19
 2a0:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2a4:	ldr	x0, [x19, #16]
 2a8:	mov	x2, #0x8                   	// #8
 2ac:	ldr	x3, [x19]
 2b0:	add	x1, x0, #0x1
 2b4:	str	x1, [x19, #16]
 2b8:	mov	x1, x20
 2bc:	add	x0, x3, x0, lsl #3
 2c0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2c4:	b	244 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x78>

00000000000002c8 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>:
 2c8:	stp	x19, x20, [sp, #-32]!
 2cc:	mov	x19, x0
 2d0:	mov	x20, x1
 2d4:	stp	x21, x30, [sp, #16]
 2d8:	mov	x1, #0x1                   	// #1
 2dc:	add	x21, x0, #0x70
 2e0:	stp	xzr, xzr, [x0]
 2e4:	str	xzr, [x0, #16]
 2e8:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 2ec:	stp	xzr, x21, [x19, #24]
 2f0:	ldr	x0, [x19, #8]
 2f4:	lsr	x0, x0, #3
 2f8:	cmp	x0, #0x3e7
 2fc:	b.hi	30c <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x44>  // b.pmore
 300:	mov	x0, x19
 304:	mov	x1, #0x3e8                 	// #1000
 308:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
 30c:	strb	wzr, [x19, #64]
 310:	mov	x0, x21
 314:	strb	wzr, [x19, #96]
 318:	strb	wzr, [x19, #104]
 31c:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 320:	ldp	x0, x1, [x20]
 324:	stp	x0, x1, [x19, #200]
 328:	ldr	x0, [x20, #16]
 32c:	ldp	x21, x30, [sp, #16]
 330:	stp	x0, xzr, [x19, #216]
 334:	str	xzr, [x19, #232]
 338:	ldp	x19, x20, [sp], #32
 33c:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x3, x0
   8:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   c:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x0, x0, #0x1
  2c:	tst	x0, x3
  30:	b.eq	84 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x84>  // b.none
  34:	clz	x1, x3
  38:	mov	w4, #0x3f                  	// #63
  3c:	sub	w1, w4, w1
  40:	mov	x4, #0x1                   	// #1
  44:	add	w0, w1, #0x1
  48:	lsl	x0, x4, x0
  4c:	cmp	x3, x0
  50:	b.cc	68 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x68>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x17b                 	// #379
  64:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  68:	lsl	x4, x4, x1
  6c:	cmp	x3, x4
  70:	b.hi	88 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x88>  // b.pmore
  74:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  78:	mov	w1, #0x17c                 	// #380
  7c:	add	x2, x2, #0x0
  80:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  84:	mov	x0, x3
  88:	ldr	x30, [sp], #16
  8c:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIPKcEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #3
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x4, x1
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm+0x30>
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>
  18:	add	x2, x2, #0x0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	cmp	x1, x3
  3c:	b.cs	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm+0x50>  // b.hs, b.nlast
  40:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>
  44:	mov	w1, #0x1fd                 	// #509
  48:	add	x2, x2, #0x0
  4c:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm+0x24>
  50:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  54:	lsl	x19, x1, #3
  58:	mov	x21, x0
  5c:	ldr	x22, [x0]
  60:	ldr	x1, [x22]
  64:	cbnz	x1, 70 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm+0x70>
  68:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  6c:	str	x0, [x22]
  70:	ldr	x0, [x21]
  74:	ldr	x0, [x0]
  78:	sub	x4, x0, #0x1
  7c:	tst	x4, x0
  80:	b.eq	94 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm+0x94>  // b.none
  84:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  90:	bl	0 <_ZN11__sanitizer3DieEv>
  94:	add	x19, x19, x4
  98:	neg	x0, x0
  9c:	and	x19, x19, x0
  a0:	mov	w2, #0x0                   	// #0
  a4:	mov	x0, x19
  a8:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPKcE7ReallocEm>
  ac:	add	x1, x1, #0x0
  b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b4:	ldr	x1, [x20]
  b8:	mov	x21, x0
  bc:	ldr	x2, [x20, #16]
  c0:	lsl	x2, x2, #3
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

sanitizer_symbolizer_libbacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ErrorCallback>:
   0:	ret

0000000000000004 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   4:	stp	x19, x20, [sp, #-80]!
   8:	mov	x19, x0
   c:	adrp	x20, 0 <ErrorCallback>
  10:	ldr	x0, [x0, #16]
  14:	add	x20, x20, #0x0
  18:	stp	x21, x22, [sp, #16]
  1c:	add	x22, sp, #0x38
  20:	mov	x21, x1
  24:	mov	x4, x22
  28:	mov	x3, x20
  2c:	str	x30, [sp, #32]
  30:	stp	x2, x2, [sp, #56]
  34:	adrp	x2, 0 <ErrorCallback>
  38:	add	x2, x2, #0x0
  3c:	str	xzr, [sp, #72]
  40:	bl	0 <__asan_backtrace_pcinfo>
  44:	ldr	x0, [sp, #72]
  48:	cbnz	x0, 84 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x80>
  4c:	ldr	x0, [x19, #16]
  50:	mov	x4, x22
  54:	mov	x3, x20
  58:	mov	x1, x21
  5c:	adrp	x2, 0 <ErrorCallback>
  60:	add	x2, x2, #0x0
  64:	bl	0 <__asan_backtrace_syminfo>
  68:	ldr	x0, [sp, #72]
  6c:	cmp	x0, #0x0
  70:	cset	w0, ne  // ne = any
  74:	ldp	x21, x22, [sp, #16]
  78:	ldr	x30, [sp, #32]
  7c:	ldp	x19, x20, [sp], #80
  80:	ret
  84:	mov	w0, #0x1                   	// #1
  88:	b	74 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x70>

000000000000008c <_ZN11__sanitizer22LibbacktraceSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
  8c:	ldr	x0, [x0, #16]
  90:	str	x30, [sp, #-16]!
  94:	mov	x4, x2
  98:	adrp	x3, 0 <ErrorCallback>
  9c:	adrp	x2, 0 <ErrorCallback>
  a0:	add	x3, x3, #0x0
  a4:	add	x2, x2, #0x0
  a8:	bl	0 <__asan_backtrace_syminfo>
  ac:	mov	w0, #0x1                   	// #1
  b0:	ldr	x30, [sp], #16
  b4:	ret

00000000000000b8 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm>:
  b8:	stp	x19, x20, [sp, #-32]!
  bc:	mov	x19, x0
  c0:	ldr	x0, [x0, #8]
  c4:	stp	x21, x30, [sp, #16]
  c8:	cbnz	x0, ec <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0x34>
  cc:	adrp	x2, 0 <ErrorCallback>
  d0:	add	x2, x2, #0x0
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	x3, #0x0                   	// #0
  dc:	mov	w1, #0x5c                  	// #92
  e0:	adrp	x0, 0 <ErrorCallback>
  e4:	add	x0, x0, #0x0
  e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ec:	ldr	x0, [x19, #16]
  f0:	mov	x20, x1
  f4:	cbz	x0, 124 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0x6c>
  f8:	mov	x0, x1
  fc:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 100:	mov	x21, x0
 104:	ldr	x0, [x19]
 108:	ldp	x1, x2, [x0, #16]
 10c:	ldr	w3, [x0, #32]
 110:	add	x0, x21, #0x8
 114:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 118:	ldr	x0, [x19, #8]
 11c:	str	x21, [x0]
 120:	str	x21, [x19, #8]
 124:	ldr	x0, [x19]
 128:	ldr	x4, [x0, #8]
 12c:	cmp	x20, x4
 130:	b.eq	148 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0x90>  // b.none
 134:	adrp	x2, 0 <ErrorCallback>
 138:	mov	x3, x20
 13c:	add	x2, x2, #0x0
 140:	mov	w1, #0x65                  	// #101
 144:	b	e0 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0x28>
 148:	ldr	x0, [x19, #8]
 14c:	ldr	x4, [x0, #8]
 150:	cmp	x20, x4
 154:	b.eq	16c <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0xb4>  // b.none
 158:	adrp	x2, 0 <ErrorCallback>
 15c:	mov	x3, x20
 160:	add	x2, x2, #0x0
 164:	mov	w1, #0x66                  	// #102
 168:	b	e0 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm+0x28>
 16c:	add	x0, x0, #0x8
 170:	ldp	x21, x30, [sp, #16]
 174:	ldp	x19, x20, [sp], #32
 178:	ret

000000000000017c <CplusV3DemangleCallback>:
 17c:	stp	x19, x20, [sp, #-48]!
 180:	mov	x19, x2
 184:	mov	x20, x1
 188:	add	x2, x1, #0x1
 18c:	stp	x21, x22, [sp, #16]
 190:	mov	x21, x0
 194:	ldp	x0, x1, [x19, #8]
 198:	str	x30, [sp, #32]
 19c:	add	x2, x2, x0
 1a0:	cmp	x1, x2
 1a4:	b.cs	1e8 <CplusV3DemangleCallback+0x6c>  // b.hs, b.nlast
 1a8:	lsl	x1, x1, #1
 1ac:	cmp	x1, x2
 1b0:	csel	x0, x2, x1, cc  // cc = lo, ul, last
 1b4:	str	x0, [x19, #16]
 1b8:	mov	x1, #0x0                   	// #0
 1bc:	mov	x2, #0x0                   	// #0
 1c0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1c4:	mov	x22, x0
 1c8:	ldr	x1, [x19]
 1cc:	cbz	x1, 1e4 <CplusV3DemangleCallback+0x68>
 1d0:	ldr	x2, [x19, #8]
 1d4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1d8:	ldr	x0, [x19]
 1dc:	mov	x1, #0x0                   	// #0
 1e0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1e4:	str	x22, [x19]
 1e8:	ldp	x3, x0, [x19]
 1ec:	mov	x2, x20
 1f0:	mov	x1, x21
 1f4:	add	x0, x3, x0
 1f8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1fc:	ldp	x0, x1, [x19]
 200:	add	x0, x0, x20
 204:	strb	wzr, [x0, x1]
 208:	ldr	x1, [x19, #8]
 20c:	ldp	x21, x22, [sp, #16]
 210:	add	x20, x1, x20
 214:	ldr	x30, [sp, #32]
 218:	str	x20, [x19, #8]
 21c:	ldp	x19, x20, [sp], #48
 220:	ret

0000000000000224 <_ZN11__sanitizerL13DemangleAllocEPKcb>:
 224:	stp	x19, x20, [sp, #-64]!
 228:	adrp	x2, 0 <ErrorCallback>
 22c:	mov	x20, x0
 230:	add	x3, sp, #0x28
 234:	add	x2, x2, #0x0
 238:	stp	x21, x30, [sp, #16]
 23c:	and	w21, w1, #0xff
 240:	mov	w1, #0x3                   	// #3
 244:	stp	xzr, xzr, [sp, #40]
 248:	str	xzr, [sp, #56]
 24c:	bl	0 <__asan_cplus_demangle_v3_callback>
 250:	ldr	x19, [sp, #40]
 254:	cbz	w0, 294 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x70>
 258:	ldp	x0, x1, [sp, #48]
 25c:	add	x0, x0, #0x40
 260:	cmp	x0, x1
 264:	b.hi	280 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x5c>  // b.pmore
 268:	mov	x0, x19
 26c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 270:	mov	x19, x0
 274:	mov	x1, #0x0                   	// #0
 278:	ldr	x0, [sp, #40]
 27c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 280:	cbz	x19, 2a4 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x80>
 284:	mov	x0, x19
 288:	ldp	x21, x30, [sp, #16]
 28c:	ldp	x19, x20, [sp], #64
 290:	ret
 294:	cbz	x19, 2a4 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x80>
 298:	mov	x0, x19
 29c:	mov	x1, #0x0                   	// #0
 2a0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2a4:	cbz	w21, 2b8 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x94>
 2a8:	mov	x0, x20
 2ac:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2b0:	mov	x19, x0
 2b4:	b	284 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x60>
 2b8:	mov	x19, #0x0                   	// #0
 2bc:	b	284 <_ZN11__sanitizerL13DemangleAllocEPKcb+0x60>

00000000000002c0 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc>:
 2c0:	mov	x0, x1
 2c4:	mov	w1, #0x0                   	// #0
 2c8:	b	224 <_ZN11__sanitizerL13DemangleAllocEPKcb>

00000000000002cc <SymbolizeCodeCallback>:
 2cc:	cbz	x2, 310 <SymbolizeCodeCallback+0x44>
 2d0:	stp	x19, x20, [sp, #-32]!
 2d4:	mov	x20, x2
 2d8:	mov	x19, x0
 2dc:	stp	x21, x30, [sp, #16]
 2e0:	bl	b8 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm>
 2e4:	mov	x21, x0
 2e8:	mov	w1, #0x1                   	// #1
 2ec:	mov	x0, x20
 2f0:	bl	224 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 2f4:	str	x0, [x21, #32]
 2f8:	ldr	x0, [x19, #16]
 2fc:	ldp	x21, x30, [sp, #16]
 300:	add	x0, x0, #0x1
 304:	str	x0, [x19, #16]
 308:	ldp	x19, x20, [sp], #32
 30c:	ret
 310:	ret

0000000000000314 <SymbolizeCodePCInfoCallback>:
 314:	cbz	x4, 380 <SymbolizeCodePCInfoCallback+0x6c>
 318:	stp	x19, x20, [sp, #-48]!
 31c:	mov	x20, x0
 320:	stp	x21, x22, [sp, #16]
 324:	mov	x22, x4
 328:	mov	x21, x2
 32c:	stp	x23, x30, [sp, #32]
 330:	mov	w23, w3
 334:	bl	b8 <_ZN11__sanitizer12_GLOBAL__N_124SymbolizeCodeCallbackArg13get_new_frameEm>
 338:	mov	x19, x0
 33c:	mov	w1, #0x1                   	// #1
 340:	mov	x0, x22
 344:	bl	224 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 348:	str	x0, [x19, #32]
 34c:	cbz	x21, 35c <SymbolizeCodePCInfoCallback+0x48>
 350:	mov	x0, x21
 354:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 358:	str	x0, [x19, #48]
 35c:	ldr	x0, [x20, #16]
 360:	ldp	x21, x22, [sp, #16]
 364:	str	w23, [x19, #56]
 368:	add	x0, x0, #0x1
 36c:	ldp	x23, x30, [sp, #32]
 370:	str	x0, [x20, #16]
 374:	mov	w0, #0x0                   	// #0
 378:	ldp	x19, x20, [sp], #48
 37c:	ret
 380:	mov	w0, #0x0                   	// #0
 384:	ret

0000000000000388 <SymbolizeDataCallback>:
 388:	cmp	x2, #0x0
 38c:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 390:	b.eq	3c8 <SymbolizeDataCallback+0x40>  // b.none
 394:	stp	x19, x20, [sp, #-32]!
 398:	mov	x19, x0
 39c:	mov	x20, x3
 3a0:	mov	x0, x2
 3a4:	mov	w1, #0x1                   	// #1
 3a8:	stp	x21, x30, [sp, #16]
 3ac:	mov	x21, x4
 3b0:	bl	224 <_ZN11__sanitizerL13DemangleAllocEPKcb>
 3b4:	stp	x0, x20, [x19, #40]
 3b8:	str	x21, [x19, #56]
 3bc:	ldp	x21, x30, [sp, #16]
 3c0:	ldp	x19, x20, [sp], #32
 3c4:	ret
 3c8:	ret

00000000000003cc <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>:
 3cc:	stp	x19, x20, [sp, #-32]!
 3d0:	mov	x3, #0x0                   	// #0
 3d4:	mov	x20, x0
 3d8:	adrp	x2, 0 <ErrorCallback>
 3dc:	mov	w1, #0x0                   	// #0
 3e0:	add	x2, x2, #0x0
 3e4:	adrp	x0, 0 <ErrorCallback>
 3e8:	add	x0, x0, #0x0
 3ec:	str	x30, [sp, #16]
 3f0:	bl	0 <__asan_backtrace_create_state>
 3f4:	mov	x19, x0
 3f8:	cbz	x0, 41c <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE+0x50>
 3fc:	mov	x1, #0x18                  	// #24
 400:	mov	x0, x20
 404:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 408:	str	x19, [x0, #16]
 40c:	mov	x19, x0
 410:	adrp	x1, 0 <ErrorCallback>
 414:	add	x1, x1, #0x0
 418:	stp	x1, xzr, [x0]
 41c:	mov	x0, x19
 420:	ldr	x30, [sp, #16]
 424:	ldp	x19, x20, [sp], #32
 428:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

sanitizer_symbolizer_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	stp	x23, x24, [sp, #32]
   c:	stp	x25, x30, [sp, #48]
  10:	cbz	x2, cc <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xcc>
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	mov	x23, x2
  20:	add	x24, sp, #0x48
  24:	sub	x25, x2, #0x1
  28:	mov	x19, #0x0                   	// #0
  2c:	ldr	w0, [x21, #16]
  30:	mov	x3, x24
  34:	sub	x2, x25, x19
  38:	add	x1, x22, x19
  3c:	mov	x4, #0x0                   	// #0
  40:	str	xzr, [sp, #72]
  44:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
  48:	ands	w20, w0, #0xff
  4c:	b.eq	58 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x58>  // b.none
  50:	ldr	x0, [sp, #72]
  54:	cbnz	x0, 84 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x84>
  58:	ldr	w1, [x21, #16]
  5c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  60:	mov	w20, #0x0                   	// #0
  64:	add	x0, x0, #0x0
  68:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  6c:	mov	w0, w20
  70:	ldp	x21, x22, [sp, #16]
  74:	ldp	x23, x24, [sp, #32]
  78:	ldp	x25, x30, [sp, #48]
  7c:	ldp	x19, x20, [sp], #80
  80:	ret
  84:	add	x19, x19, x0
  88:	mov	x1, x22
  8c:	ldr	x0, [x21]
  90:	mov	x2, x19
  94:	ldr	x3, [x0]
  98:	mov	x0, x21
  9c:	blr	x3
  a0:	tst	w0, #0xff
  a4:	b.ne	c4 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0xc4>  // b.any
  a8:	add	x0, x19, #0x1
  ac:	cmp	x23, x0
  b0:	b.ne	2c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x2c>  // b.any
  b4:	mov	x19, #0x0                   	// #0
  b8:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  c4:	strb	wzr, [x22, x19]
  c8:	b	6c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x6c>
  cc:	mov	w20, #0x1                   	// #1
  d0:	b	6c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x6c>

00000000000000d4 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>:
  d4:	stp	x19, x20, [sp, #-32]!
  d8:	mov	x20, x0
  dc:	mov	x19, #0x0                   	// #0
  e0:	stp	x21, x30, [sp, #16]
  e4:	mov	x21, x1
  e8:	ldr	x0, [x20, #16]
  ec:	cmp	x19, x0
  f0:	b.cs	12c <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x58>  // b.hs, b.nlast
  f4:	mov	x1, x19
  f8:	mov	x0, x20
  fc:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 100:	mov	x1, x21
 104:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
 108:	tst	w0, #0xff
 10c:	b.eq	124 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x50>  // b.none
 110:	mov	x1, x19
 114:	mov	x0, x20
 118:	ldp	x21, x30, [sp, #16]
 11c:	ldp	x19, x20, [sp], #32
 120:	b	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 124:	add	x19, x19, #0x1
 128:	b	e8 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm+0x14>
 12c:	mov	x0, #0x0                   	// #0
 130:	ldp	x21, x30, [sp, #16]
 134:	ldp	x19, x20, [sp], #32
 138:	ret

000000000000013c <_ZN11__sanitizer10Symbolizer9GetOrInitEv>:
 13c:	adrp	x1, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
 140:	stp	x19, x20, [sp, #-32]!
 144:	mov	w3, #0x1                   	// #1
 148:	ldr	x0, [x1]
 14c:	str	x30, [sp, #16]
 150:	ldxrb	w2, [x0]
 154:	stxrb	w4, w3, [x0]
 158:	cbnz	w4, 150 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x14>
 15c:	dmb	ish
 160:	tst	w2, #0xff
 164:	mov	x19, x1
 168:	b.eq	170 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x34>  // b.none
 16c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 170:	adrp	x20, 0 <_ZN11__sanitizer10Symbolizer11symbolizer_E>
 174:	ldr	x20, [x20]
 178:	ldr	x0, [x20]
 17c:	cbnz	x0, 1ac <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x70>
 180:	bl	0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>
 184:	str	x0, [x20]
 188:	cbnz	x0, 1ac <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x70>
 18c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 190:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 194:	add	x2, x2, #0x0
 198:	add	x0, x0, #0x0
 19c:	mov	x4, #0x0                   	// #0
 1a0:	mov	x3, #0x0                   	// #0
 1a4:	mov	w1, #0x17                  	// #23
 1a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1ac:	dmb	ish
 1b0:	ldr	x1, [x19]
 1b4:	strb	wzr, [x1]
 1b8:	ldr	x30, [sp, #16]
 1bc:	ldp	x19, x20, [sp], #32
 1c0:	ret

00000000000001c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>:
 1c4:	stp	x19, x20, [sp, #-32]!
 1c8:	mov	x20, x0
 1cc:	stp	x21, x30, [sp, #16]
 1d0:	mov	x21, x2
 1d4:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
 1d8:	mov	x2, #0x0                   	// #0
 1dc:	mov	x19, x0
 1e0:	mov	x1, #0x0                   	// #0
 1e4:	add	x0, x0, #0x1
 1e8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 1ec:	str	x0, [x21]
 1f0:	mov	x1, x20
 1f4:	mov	x2, x19
 1f8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1fc:	ldr	x0, [x21]
 200:	strb	wzr, [x0, x19]
 204:	add	x0, x20, x19
 208:	ldrb	w1, [x20, x19]
 20c:	cbz	w1, 214 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc+0x50>
 210:	add	x0, x0, #0x1
 214:	ldp	x21, x30, [sp, #16]
 218:	ldp	x19, x20, [sp], #32
 21c:	ret

0000000000000220 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi>:
 220:	stp	x19, x20, [sp, #-48]!
 224:	mov	x20, x2
 228:	add	x2, sp, #0x28
 22c:	str	x30, [sp, #16]
 230:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 234:	mov	x19, x0
 238:	ldr	x0, [sp, #40]
 23c:	cbz	x0, 248 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi+0x28>
 240:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 244:	str	w0, [x20]
 248:	ldr	x0, [sp, #40]
 24c:	mov	x1, #0x0                   	// #0
 250:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 254:	mov	x0, x19
 258:	ldr	x30, [sp, #16]
 25c:	ldp	x19, x20, [sp], #48
 260:	ret

0000000000000264 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>:
 264:	stp	x19, x20, [sp, #-48]!
 268:	mov	x20, x2
 26c:	add	x2, sp, #0x28
 270:	str	x30, [sp, #16]
 274:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 278:	mov	x19, x0
 27c:	ldr	x0, [sp, #40]
 280:	cbz	x0, 28c <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm+0x28>
 284:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 288:	str	x0, [x20]
 28c:	ldr	x0, [sp, #40]
 290:	mov	x1, #0x0                   	// #0
 294:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 298:	mov	x0, x19
 29c:	ldr	x30, [sp, #16]
 2a0:	ldp	x19, x20, [sp], #48
 2a4:	ret

00000000000002a8 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc>:
 2a8:	stp	x19, x20, [sp, #-48]!
 2ac:	mov	x20, x0
 2b0:	stp	x21, x22, [sp, #16]
 2b4:	mov	x22, x1
 2b8:	mov	x21, x2
 2bc:	str	x30, [sp, #32]
 2c0:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 2c4:	cbz	x0, 320 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x78>
 2c8:	sub	x19, x0, x20
 2cc:	mov	x2, #0x0                   	// #0
 2d0:	mov	x1, #0x0                   	// #0
 2d4:	add	x0, x19, #0x1
 2d8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 2dc:	str	x0, [x21]
 2e0:	mov	x2, x19
 2e4:	mov	x1, x20
 2e8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2ec:	ldr	x0, [x21]
 2f0:	add	x21, x20, x19
 2f4:	strb	wzr, [x0, x19]
 2f8:	ldrb	w0, [x20, x19]
 2fc:	cbz	w0, 30c <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x64>
 300:	mov	x0, x22
 304:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 308:	add	x21, x21, x0
 30c:	mov	x0, x21
 310:	ldp	x21, x22, [sp, #16]
 314:	ldr	x30, [sp, #32]
 318:	ldp	x19, x20, [sp], #48
 31c:	ret
 320:	mov	x0, x20
 324:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 328:	mov	x19, x0
 32c:	b	2cc <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x24>

0000000000000330 <_ZN11__sanitizer10Symbolizer5FlushEv>:
 330:	stp	x19, x20, [sp, #-64]!
 334:	mov	x20, x0
 338:	stp	x21, x22, [sp, #16]
 33c:	add	x21, x0, #0x70
 340:	mov	x0, x21
 344:	str	x30, [sp, #32]
 348:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 34c:	ldr	x19, [x20, #208]
 350:	add	x22, sp, #0x38
 354:	cbz	x19, 384 <_ZN11__sanitizer10Symbolizer5FlushEv+0x54>
 358:	mov	x1, x20
 35c:	mov	x0, x22
 360:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 364:	ldr	x0, [x19]
 368:	ldr	x1, [x0, #16]
 36c:	mov	x0, x19
 370:	blr	x1
 374:	mov	x0, x22
 378:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 37c:	ldr	x19, [x19, #8]
 380:	b	354 <_ZN11__sanitizer10Symbolizer5FlushEv+0x24>
 384:	mov	x0, x21
 388:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 38c:	ldp	x21, x22, [sp, #16]
 390:	ldr	x30, [sp, #32]
 394:	ldp	x19, x20, [sp], #64
 398:	ret

000000000000039c <_ZN11__sanitizer10Symbolizer8DemangleEPKc>:
 39c:	stp	x19, x20, [sp, #-80]!
 3a0:	mov	x20, x0
 3a4:	stp	x23, x24, [sp, #32]
 3a8:	add	x24, x0, #0x70
 3ac:	mov	x0, x24
 3b0:	stp	x21, x22, [sp, #16]
 3b4:	mov	x22, x1
 3b8:	add	x23, sp, #0x48
 3bc:	str	x30, [sp, #48]
 3c0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 3c4:	ldr	x21, [x20, #208]
 3c8:	cbz	x21, 428 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x8c>
 3cc:	mov	x1, x20
 3d0:	mov	x0, x23
 3d4:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 3d8:	ldr	x0, [x21]
 3dc:	mov	x1, x22
 3e0:	ldr	x2, [x0, #24]
 3e4:	mov	x0, x21
 3e8:	blr	x2
 3ec:	mov	x19, x0
 3f0:	mov	x0, x23
 3f4:	cbz	x19, 41c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x80>
 3f8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 3fc:	mov	x0, x24
 400:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 404:	mov	x0, x19
 408:	ldp	x21, x22, [sp, #16]
 40c:	ldp	x23, x24, [sp, #32]
 410:	ldr	x30, [sp, #48]
 414:	ldp	x19, x20, [sp], #80
 418:	ret
 41c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 420:	ldr	x21, [x21, #8]
 424:	b	3c8 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x2c>
 428:	mov	x1, x22
 42c:	mov	x0, x20
 430:	bl	0 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>
 434:	mov	x19, x0
 438:	b	3fc <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x60>

000000000000043c <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>:
 43c:	stp	x19, x30, [sp, #-16]!
 440:	mov	x19, x0
 444:	add	x0, x0, #0x28
 448:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 44c:	add	x0, x19, #0x48
 450:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
 454:	ldr	x0, [x19, #56]
 458:	cbnz	x0, 46c <_ZN11__sanitizer10Symbolizer14RefreshModulesEv+0x30>
 45c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 460:	add	x0, x0, #0x0
 464:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 468:	bl	0 <_ZN11__sanitizer3DieEv>
 46c:	mov	w0, #0x1                   	// #1
 470:	strb	w0, [x19, #104]
 474:	ldp	x19, x30, [sp], #16
 478:	ret

000000000000047c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>:
 47c:	stp	x19, x20, [sp, #-48]!
 480:	mov	x19, x0
 484:	stp	x21, x22, [sp, #16]
 488:	mov	x21, x1
 48c:	ldrb	w1, [x0, #104]
 490:	stp	x23, x30, [sp, #32]
 494:	cbnz	w1, 4dc <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x60>
 498:	mov	w23, #0x1                   	// #1
 49c:	bl	43c <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>
 4a0:	add	x22, x19, #0x28
 4a4:	mov	x1, x21
 4a8:	mov	x0, x22
 4ac:	bl	d4 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 4b0:	mov	x20, x0
 4b4:	cbnz	x0, 500 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x84>
 4b8:	cbz	w23, 4e4 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x68>
 4bc:	ldr	x0, [x19, #88]
 4c0:	cbz	x0, 500 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x84>
 4c4:	mov	x1, x21
 4c8:	add	x0, x19, #0x48
 4cc:	ldp	x21, x22, [sp, #16]
 4d0:	ldp	x23, x30, [sp, #32]
 4d4:	ldp	x19, x20, [sp], #48
 4d8:	b	d4 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 4dc:	mov	w23, #0x0                   	// #0
 4e0:	b	4a0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x24>
 4e4:	mov	x0, x19
 4e8:	bl	43c <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>
 4ec:	mov	x1, x21
 4f0:	mov	x0, x22
 4f4:	bl	d4 <_ZN11__sanitizerL15SearchForModuleERKNS_13ListOfModulesEm>
 4f8:	cbz	x0, 4bc <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x40>
 4fc:	mov	x20, x0
 500:	mov	x0, x20
 504:	ldp	x21, x22, [sp, #16]
 508:	ldp	x23, x30, [sp, #32]
 50c:	ldp	x19, x20, [sp], #48
 510:	ret

0000000000000514 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>:
 514:	stp	x19, x20, [sp, #-48]!
 518:	mov	x19, x1
 51c:	mov	x20, x4
 520:	stp	x21, x22, [sp, #16]
 524:	mov	x22, x2
 528:	mov	x21, x3
 52c:	str	x30, [sp, #32]
 530:	bl	47c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
 534:	cbz	x0, 568 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x54>
 538:	ldr	x1, [x0]
 53c:	str	x1, [x22]
 540:	ldr	x1, [x0, #8]
 544:	ldr	w0, [x0, #24]
 548:	sub	x19, x19, x1
 54c:	str	x19, [x21]
 550:	str	w0, [x20]
 554:	mov	w0, #0x1                   	// #1
 558:	ldp	x21, x22, [sp, #16]
 55c:	ldr	x30, [sp, #32]
 560:	ldp	x19, x20, [sp], #48
 564:	ret
 568:	mov	w0, #0x0                   	// #0
 56c:	b	558 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x44>

0000000000000570 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>:
 570:	stp	x19, x20, [sp, #-64]!
 574:	mov	x20, x1
 578:	mov	x19, x0
 57c:	stp	x23, x30, [sp, #32]
 580:	add	x23, x0, #0x70
 584:	mov	x0, x23
 588:	stp	x21, x22, [sp, #16]
 58c:	mov	x21, x2
 590:	mov	x22, x3
 594:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 598:	str	xzr, [sp, #56]
 59c:	mov	x1, x20
 5a0:	add	x4, sp, #0x34
 5a4:	mov	x3, x22
 5a8:	add	x2, sp, #0x38
 5ac:	mov	x0, x19
 5b0:	bl	514 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 5b4:	mov	w20, w0
 5b8:	tst	w0, #0xff
 5bc:	b.eq	5d4 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x64>  // b.none
 5c0:	cbz	x21, 5d4 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x64>
 5c4:	ldr	x1, [sp, #56]
 5c8:	mov	x0, x19
 5cc:	bl	0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>
 5d0:	str	x0, [x21]
 5d4:	mov	x0, x23
 5d8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 5dc:	mov	w0, w20
 5e0:	ldp	x21, x22, [sp, #16]
 5e4:	ldp	x23, x30, [sp, #32]
 5e8:	ldp	x19, x20, [sp], #64
 5ec:	ret

00000000000005f0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>:
 5f0:	stp	x19, x20, [sp, #-96]!
 5f4:	mov	x19, x0
 5f8:	stp	x23, x24, [sp, #32]
 5fc:	add	x24, x0, #0x70
 600:	mov	x0, x24
 604:	stp	x21, x22, [sp, #16]
 608:	mov	x22, x1
 60c:	str	x30, [sp, #48]
 610:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 614:	mov	x0, x22
 618:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 61c:	add	x4, sp, #0x44
 620:	mov	x20, x0
 624:	add	x3, sp, #0x50
 628:	add	x2, sp, #0x48
 62c:	mov	x1, x22
 630:	mov	x0, x19
 634:	bl	514 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 638:	tst	w0, #0xff
 63c:	b.eq	690 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xa0>  // b.none
 640:	ldp	x1, x2, [sp, #72]
 644:	add	x0, x20, #0x8
 648:	ldr	w3, [sp, #68]
 64c:	add	x23, sp, #0x58
 650:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 654:	ldr	x21, [x19, #208]
 658:	cbz	x21, 690 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xa0>
 65c:	mov	x1, x19
 660:	mov	x0, x23
 664:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 668:	ldr	x0, [x21]
 66c:	mov	x2, x20
 670:	mov	x1, x22
 674:	ldr	x3, [x0]
 678:	mov	x0, x21
 67c:	blr	x3
 680:	tst	w0, #0xff
 684:	mov	x0, x23
 688:	b.eq	6b0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xc0>  // b.none
 68c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 690:	mov	x0, x24
 694:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 698:	mov	x0, x20
 69c:	ldp	x21, x22, [sp, #16]
 6a0:	ldp	x23, x24, [sp, #32]
 6a4:	ldr	x30, [sp, #48]
 6a8:	ldp	x19, x20, [sp], #96
 6ac:	ret
 6b0:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 6b4:	ldr	x21, [x21, #8]
 6b8:	b	658 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x68>

00000000000006bc <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>:
 6bc:	stp	x19, x20, [sp, #-112]!
 6c0:	mov	x20, x0
 6c4:	mov	x19, x2
 6c8:	stp	x25, x26, [sp, #48]
 6cc:	add	x26, x0, #0x70
 6d0:	mov	x25, x1
 6d4:	mov	x0, x26
 6d8:	stp	x21, x22, [sp, #16]
 6dc:	stp	x23, x24, [sp, #32]
 6e0:	str	x30, [sp, #64]
 6e4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 6e8:	add	x4, sp, #0x54
 6ec:	add	x3, sp, #0x60
 6f0:	add	x2, sp, #0x58
 6f4:	mov	x1, x25
 6f8:	mov	x0, x20
 6fc:	bl	514 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>
 700:	ands	w21, w0, #0xff
 704:	b.eq	770 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xb4>  // b.none
 708:	mov	x0, x19
 70c:	bl	0 <_ZN11__sanitizer8DataInfo5ClearEv>
 710:	ldr	x0, [sp, #88]
 714:	add	x24, sp, #0x68
 718:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 71c:	ldr	x22, [x20, #208]
 720:	str	x0, [x19]
 724:	ldr	x0, [sp, #96]
 728:	str	x0, [x19, #8]
 72c:	ldr	w0, [sp, #84]
 730:	str	w0, [x19, #16]
 734:	cbz	x22, 770 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xb4>
 738:	mov	x1, x20
 73c:	mov	x0, x24
 740:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
 744:	ldr	x0, [x22]
 748:	mov	x2, x19
 74c:	mov	x1, x25
 750:	ldr	x3, [x0, #8]
 754:	mov	x0, x22
 758:	blr	x3
 75c:	ands	w23, w0, #0xff
 760:	mov	x0, x24
 764:	b.eq	794 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0xd8>  // b.none
 768:	mov	w21, w23
 76c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 770:	mov	x0, x26
 774:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 778:	mov	w0, w21
 77c:	ldp	x21, x22, [sp, #16]
 780:	ldp	x23, x24, [sp, #32]
 784:	ldp	x25, x26, [sp, #48]
 788:	ldr	x30, [sp, #64]
 78c:	ldp	x19, x20, [sp], #112
 790:	ret
 794:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
 798:	ldr	x22, [x22, #8]
 79c:	b	734 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x78>

00000000000007a0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>:
 7a0:	stp	x19, x20, [sp, #-128]!
 7a4:	mov	w19, #0x1                   	// #1
 7a8:	stp	x21, x22, [sp, #16]
 7ac:	mov	x21, x1
 7b0:	stp	x23, x24, [sp, #32]
 7b4:	mov	x23, x0
 7b8:	mov	x24, x1
 7bc:	stp	x25, x26, [sp, #48]
 7c0:	adrp	x25, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 7c4:	adrp	x26, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 7c8:	stp	x27, x28, [sp, #64]
 7cc:	add	x27, x25, #0x0
 7d0:	add	x28, x26, #0x0
 7d4:	str	x30, [sp, #80]
 7d8:	add	x2, sp, #0x70
 7dc:	add	x1, x25, #0x0
 7e0:	mov	x0, x23
 7e4:	str	xzr, [sp, #112]
 7e8:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 7ec:	mov	x20, x0
 7f0:	ldr	x0, [sp, #112]
 7f4:	cbnz	x0, 818 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x78>
 7f8:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 7fc:	add	x2, x2, #0x0
 800:	mov	x4, #0x0                   	// #0
 804:	mov	x3, #0x0                   	// #0
 808:	mov	w1, #0x12c                 	// #300
 80c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 810:	add	x0, x0, #0x0
 814:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 818:	ldrb	w1, [x0]
 81c:	cbnz	w1, 844 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xa4>
 820:	mov	x1, #0x0                   	// #0
 824:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 828:	ldp	x21, x22, [sp, #16]
 82c:	ldp	x23, x24, [sp, #32]
 830:	ldp	x25, x26, [sp, #48]
 834:	ldp	x27, x28, [sp, #64]
 838:	ldr	x30, [sp, #80]
 83c:	ldp	x19, x20, [sp], #128
 840:	ret
 844:	cbnz	w19, 8b0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x110>
 848:	ldr	x0, [x21, #8]
 84c:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 850:	mov	x22, x0
 854:	ldp	x1, x2, [x21, #16]
 858:	add	x0, x0, #0x8
 85c:	ldr	w3, [x21, #32]
 860:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 864:	str	x22, [x24]
 868:	mov	x24, x22
 86c:	add	x19, x22, #0x8
 870:	add	x2, sp, #0x78
 874:	ldr	x0, [sp, #112]
 878:	mov	x1, x27
 87c:	str	x0, [x19, #32]
 880:	mov	x0, x20
 884:	str	xzr, [sp, #120]
 888:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 88c:	mov	x23, x0
 890:	ldr	x0, [sp, #120]
 894:	cbnz	x0, 8b8 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x118>
 898:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 89c:	mov	x4, #0x0                   	// #0
 8a0:	add	x2, x2, #0x0
 8a4:	mov	x3, #0x0                   	// #0
 8a8:	mov	w1, #0x10d                 	// #269
 8ac:	b	80c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x6c>
 8b0:	mov	x22, x21
 8b4:	b	86c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xcc>
 8b8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 8bc:	cbz	x0, 910 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x170>
 8c0:	ldr	x20, [sp, #120]
 8c4:	sub	x0, x0, #0x1
 8c8:	mov	w1, #0x2                   	// #2
 8cc:	add	x20, x20, x0
 8d0:	ldr	x2, [sp, #120]
 8d4:	cmp	x2, x20
 8d8:	ldrb	w0, [x20]
 8dc:	b.cs	8f4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x154>  // b.hs, b.nlast
 8e0:	sub	w3, w0, #0x30
 8e4:	cmp	w3, #0x9
 8e8:	b.hi	8f4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x154>  // b.pmore
 8ec:	sub	x20, x20, #0x1
 8f0:	b	8d4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x134>
 8f4:	cmp	w0, #0x3a
 8f8:	b.eq	964 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1c4>  // b.none
 8fc:	ldr	x0, [sp, #120]
 900:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 904:	add	x2, x22, #0x38
 908:	add	x1, x1, #0x0
 90c:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 910:	ldr	x0, [sp, #120]
 914:	mov	x1, #0x0                   	// #0
 918:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 91c:	ldr	x0, [x19, #32]
 920:	add	x1, x26, #0x0
 924:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 928:	cbnz	w0, 93c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x19c>
 92c:	ldr	x0, [x19, #32]
 930:	mov	x1, #0x0                   	// #0
 934:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 938:	str	xzr, [x19, #32]
 93c:	ldr	x0, [x19, #48]
 940:	mov	x1, x28
 944:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 948:	cbnz	w0, 95c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1bc>
 94c:	ldr	x0, [x19, #48]
 950:	mov	x1, #0x0                   	// #0
 954:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 958:	str	xzr, [x19, #48]
 95c:	mov	w19, #0x0                   	// #0
 960:	b	7d8 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x38>
 964:	ldrb	w0, [x20, #1]
 968:	str	w1, [sp, #108]
 96c:	sub	w0, w0, #0x30
 970:	cmp	w0, #0x9
 974:	b.hi	8fc <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x15c>  // b.pmore
 978:	ldr	w0, [x19, #56]
 97c:	str	w0, [x19, #60]
 980:	add	x0, x20, #0x1
 984:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
 988:	str	w0, [x19, #56]
 98c:	ldr	w1, [sp, #108]
 990:	strb	wzr, [x20], #-1
 994:	cmp	w1, #0x1
 998:	b.eq	8fc <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x15c>  // b.none
 99c:	mov	w1, #0x1                   	// #1
 9a0:	b	8d0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x130>

00000000000009a4 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>:
 9a4:	stp	x19, x20, [sp, #-32]!
 9a8:	adrp	x20, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 9ac:	add	x20, x20, #0x0
 9b0:	mov	x19, x1
 9b4:	add	x2, x1, #0x28
 9b8:	mov	x1, x20
 9bc:	str	x30, [sp, #16]
 9c0:	bl	1c4 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>
 9c4:	add	x2, x19, #0x30
 9c8:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 9cc:	add	x1, x1, #0x0
 9d0:	bl	264 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>
 9d4:	add	x2, x19, #0x38
 9d8:	mov	x1, x20
 9dc:	ldr	x30, [sp, #16]
 9e0:	ldp	x19, x20, [sp], #32
 9e4:	b	264 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>

00000000000009e8 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>:
 9e8:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 9ec:	add	x3, x3, #0x0
 9f0:	str	x30, [sp, #-16]!
 9f4:	stp	x3, x1, [x0]
 9f8:	mov	x3, #0xffffffffffffffff    	// #-1
 9fc:	str	x3, [x0, #16]
 a00:	add	x0, x0, #0x4, lsl #12
 a04:	str	xzr, [x0, #24]
 a08:	strh	wzr, [x0, #32]
 a0c:	strb	w2, [x0, #34]
 a10:	cbnz	x1, a34 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x4c>
 a14:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 a18:	add	x2, x2, #0x0
 a1c:	mov	x4, #0x0                   	// #0
 a20:	mov	x3, #0x0                   	// #0
 a24:	mov	w1, #0x18f                 	// #399
 a28:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 a2c:	add	x0, x0, #0x0
 a30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a34:	ldrb	w0, [x1]
 a38:	cbnz	w0, a54 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x6c>
 a3c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 a40:	mov	x4, #0x0                   	// #0
 a44:	add	x2, x2, #0x0
 a48:	mov	x3, #0x0                   	// #0
 a4c:	mov	w1, #0x190                 	// #400
 a50:	b	a28 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x40>
 a54:	ldr	x30, [sp], #16
 a58:	ret

0000000000000a5c <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>:
 a5c:	stp	x19, x20, [sp, #-32]!
 a60:	mov	x19, x0
 a64:	mov	x0, x2
 a68:	stp	x21, x30, [sp, #16]
 a6c:	mov	x21, x1
 a70:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 a74:	add	x1, x1, #0x0
 a78:	stp	x1, xzr, [x19]
 a7c:	mov	x1, #0x4028                	// #16424
 a80:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 a84:	mov	x20, x0
 a88:	mov	x1, x21
 a8c:	mov	w2, #0x0                   	// #0
 a90:	bl	9e8 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>
 a94:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 a98:	add	x0, x0, #0x0
 a9c:	ldp	x21, x30, [sp, #16]
 aa0:	str	x0, [x20]
 aa4:	str	x20, [x19, #16]
 aa8:	ldp	x19, x20, [sp], #32
 aac:	ret

0000000000000ab0 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>:
 ab0:	stp	x19, x30, [sp, #-16]!
 ab4:	mov	x19, x0
 ab8:	ldr	w0, [x0, #16]
 abc:	cmn	w0, #0x1
 ac0:	b.eq	ac8 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x18>  // b.none
 ac4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 ac8:	ldr	w0, [x19, #20]
 acc:	cmn	w0, #0x1
 ad0:	b.eq	ad8 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x28>  // b.none
 ad4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 ad8:	mov	x0, x19
 adc:	ldp	x19, x30, [sp], #16
 ae0:	b	0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>

0000000000000ae4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>:
 ae4:	cbnz	x2, b00 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x1c>
 ae8:	mov	w0, #0x1                   	// #1
 aec:	ret
 af0:	mov	w0, #0x1                   	// #1
 af4:	ldr	x30, [sp, #16]
 af8:	ldp	x19, x20, [sp], #48
 afc:	ret
 b00:	stp	x19, x20, [sp, #-48]!
 b04:	mov	x19, x0
 b08:	mov	x20, x2
 b0c:	ldr	w0, [x0, #20]
 b10:	add	x3, sp, #0x28
 b14:	mov	x4, #0x0                   	// #0
 b18:	str	x30, [sp, #16]
 b1c:	str	xzr, [sp, #40]
 b20:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 b24:	tst	w0, #0xff
 b28:	b.eq	b38 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x54>  // b.none
 b2c:	ldr	x0, [sp, #40]
 b30:	cmp	x0, x20
 b34:	b.eq	af0 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0xc>  // b.none
 b38:	ldr	w1, [x19, #20]
 b3c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 b40:	add	x0, x0, #0x0
 b44:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 b48:	mov	w0, #0x0                   	// #0
 b4c:	b	af4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x10>

0000000000000b50 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>:
 b50:	stp	x19, x20, [sp, #-32]!
 b54:	mov	x19, x0
 b58:	ldr	w0, [x0, #16]
 b5c:	str	x30, [sp, #16]
 b60:	cmn	w0, #0x1
 b64:	b.eq	bbc <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x6c>  // b.none
 b68:	ldr	w0, [x19, #20]
 b6c:	cmn	w0, #0x1
 b70:	b.eq	bbc <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x6c>  // b.none
 b74:	mov	x20, x1
 b78:	mov	x0, x1
 b7c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 b80:	mov	x2, x0
 b84:	mov	x1, x20
 b88:	mov	x0, x19
 b8c:	bl	ae4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>
 b90:	tst	w0, #0xff
 b94:	b.eq	bbc <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x6c>  // b.none
 b98:	mov	x20, x19
 b9c:	mov	x2, #0x4000                	// #16384
 ba0:	ldr	x0, [x20], #24
 ba4:	mov	x1, x20
 ba8:	ldr	x3, [x0, #16]
 bac:	mov	x0, x19
 bb0:	blr	x3
 bb4:	tst	w0, #0xff
 bb8:	b.ne	bc0 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x70>  // b.any
 bbc:	mov	x20, #0x0                   	// #0
 bc0:	mov	x0, x20
 bc4:	ldr	x30, [sp, #16]
 bc8:	ldp	x19, x20, [sp], #32
 bcc:	ret

0000000000000bd0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>:
 bd0:	stp	x19, x20, [sp, #-48]!
 bd4:	add	x20, x0, #0x4, lsl #12
 bd8:	mov	x19, x0
 bdc:	stp	x21, x22, [sp, #16]
 be0:	ldrb	w0, [x20, #32]
 be4:	stp	x23, x30, [sp, #32]
 be8:	cbz	w0, c00 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x30>
 bec:	mov	x0, #0x0                   	// #0
 bf0:	ldp	x21, x22, [sp, #16]
 bf4:	ldp	x23, x30, [sp, #32]
 bf8:	ldp	x19, x20, [sp], #48
 bfc:	ret
 c00:	mov	x22, x1
 c04:	ldr	x23, [x19, #8]
 c08:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 c0c:	mov	x21, x0
 c10:	cbz	x0, c48 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x78>
 c14:	mov	x0, x23
 c18:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 c1c:	mov	x1, x0
 c20:	cbz	x0, c48 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x78>
 c24:	mov	x0, x21
 c28:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 c2c:	cbnz	w0, c48 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x78>
 c30:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 c34:	add	x0, x0, #0x0
 c38:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 c3c:	mov	w0, #0x1                   	// #1
 c40:	strb	w0, [x20, #32]
 c44:	b	bec <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x1c>
 c48:	ldr	x0, [x19, #16408]
 c4c:	cmp	x0, #0x4
 c50:	b.hi	c7c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xac>  // b.pmore
 c54:	mov	x1, x22
 c58:	mov	x0, x19
 c5c:	bl	b50 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>
 c60:	cbnz	x0, bf0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x20>
 c64:	mov	x0, x19
 c68:	bl	ab0 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>
 c6c:	ldr	x0, [x19, #16408]
 c70:	add	x0, x0, #0x1
 c74:	str	x0, [x19, #16408]
 c78:	b	c48 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x78>
 c7c:	ldrb	w0, [x20, #32]
 c80:	cbnz	w0, bec <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x1c>
 c84:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 c88:	add	x0, x0, #0x0
 c8c:	b	c38 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x68>

0000000000000c90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>:
 c90:	stp	x19, x20, [sp, #-32]!
 c94:	str	x30, [sp, #16]
 c98:	cbnz	x2, cbc <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x2c>
 c9c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 ca0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 ca4:	add	x2, x2, #0x0
 ca8:	add	x0, x0, #0x0
 cac:	mov	x4, #0x0                   	// #0
 cb0:	mov	x3, #0x0                   	// #0
 cb4:	mov	w1, #0x173                 	// #371
 cb8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 cbc:	and	w1, w1, #0xff
 cc0:	mov	x19, x0
 cc4:	mov	x5, x3
 cc8:	cmp	w1, #0x0
 ccc:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 cd0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 cd4:	add	x3, x3, #0x0
 cd8:	add	x0, x0, #0x0
 cdc:	csel	x3, x0, x3, ne  // ne = any
 ce0:	add	x20, x19, #0x18
 ce4:	cbnz	w4, d20 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x90>
 ce8:	mov	x4, x2
 cec:	mov	x0, x20
 cf0:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 cf4:	mov	x1, #0x4000                	// #16384
 cf8:	add	x2, x2, #0x0
 cfc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 d00:	mov	w1, #0x3fff                	// #16383
 d04:	cmp	w0, w1
 d08:	b.gt	de4 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x154>
 d0c:	mov	x1, x20
 d10:	ldr	x0, [x19, #16]
 d14:	ldr	x30, [sp, #16]
 d18:	ldp	x19, x20, [sp], #32
 d1c:	b	bd0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
 d20:	sub	w4, w4, #0x1
 d24:	cmp	w4, #0x7
 d28:	b.hi	dac <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x11c>  // b.pmore
 d2c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d30:	add	x0, x0, #0x0
 d34:	ldrb	w0, [x0, w4, uxtw]
 d38:	adr	x1, d44 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xb4>
 d3c:	add	x0, x1, w0, sxtb #2
 d40:	br	x0
 d44:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d48:	add	x1, x1, #0x0
 d4c:	mov	x6, x5
 d50:	mov	x4, x2
 d54:	mov	x5, x1
 d58:	mov	x0, x20
 d5c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d60:	mov	x1, #0x4000                	// #16384
 d64:	add	x2, x2, #0x0
 d68:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 d6c:	b	d00 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x70>
 d70:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d74:	add	x1, x1, #0x0
 d78:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 d7c:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d80:	add	x1, x1, #0x0
 d84:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 d88:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d8c:	add	x1, x1, #0x0
 d90:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 d94:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 d98:	add	x1, x1, #0x0
 d9c:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 da0:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 da4:	add	x1, x1, #0x0
 da8:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 dac:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 db0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 db4:	add	x2, x2, #0x0
 db8:	add	x0, x0, #0x0
 dbc:	mov	x4, #0x0                   	// #0
 dc0:	mov	x3, #0x0                   	// #0
 dc4:	mov	w1, #0x2a9                 	// #681
 dc8:	b	cb8 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x28>
 dcc:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 dd0:	add	x1, x1, #0x0
 dd4:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 dd8:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 ddc:	add	x1, x1, #0x0
 de0:	b	d4c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xbc>
 de4:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
 de8:	add	x0, x0, #0x0
 dec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 df0:	mov	x0, #0x0                   	// #0
 df4:	ldr	x30, [sp, #16]
 df8:	ldp	x19, x20, [sp], #32
 dfc:	ret

0000000000000e00 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
 e00:	stp	x19, x30, [sp, #-16]!
 e04:	mov	x19, x2
 e08:	mov	w1, #0x0                   	// #0
 e0c:	ldr	w4, [x2, #32]
 e10:	ldr	x3, [x2, #24]
 e14:	ldr	x2, [x2, #16]
 e18:	bl	c90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
 e1c:	cbz	x0, e34 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x34>
 e20:	mov	x1, x19
 e24:	bl	7a0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
 e28:	mov	w0, #0x1                   	// #1
 e2c:	ldp	x19, x30, [sp], #16
 e30:	ret
 e34:	mov	w0, #0x0                   	// #0
 e38:	b	e2c <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x2c>

0000000000000e3c <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
 e3c:	stp	x19, x20, [sp, #-32]!
 e40:	mov	x19, x2
 e44:	mov	x20, x1
 e48:	ldr	w4, [x2, #16]
 e4c:	mov	w1, #0x1                   	// #1
 e50:	ldr	x3, [x2, #8]
 e54:	ldr	x2, [x2]
 e58:	str	x30, [sp, #16]
 e5c:	bl	c90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
 e60:	cbz	x0, e90 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x54>
 e64:	mov	x1, x19
 e68:	bl	9a4 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
 e6c:	ldr	x1, [x19, #48]
 e70:	mov	w0, #0x1                   	// #1
 e74:	add	x20, x20, x1
 e78:	ldr	x1, [x19, #8]
 e7c:	sub	x20, x20, x1
 e80:	str	x20, [x19, #48]
 e84:	ldr	x30, [sp, #16]
 e88:	ldp	x19, x20, [sp], #32
 e8c:	ret
 e90:	mov	w0, #0x0                   	// #0
 e94:	b	e84 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x48>

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x1
   4:	b.ls	28 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x28>  // b.plast
   8:	add	x1, x1, x2
   c:	ldurb	w0, [x1, #-1]
  10:	cmp	w0, #0xa
  14:	b.ne	28 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x28>  // b.any
  18:	ldurb	w0, [x1, #-2]
  1c:	cmp	w0, #0xa
  20:	cset	w0, eq  // eq = none
  24:	ret
  28:	mov	w0, #0x0                   	// #0
  2c:	b	24 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x24>

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	adrp	x3, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	add	x3, x3, #0x0
   c:	ldr	x0, [x0]
  10:	ldrb	w4, [x0, #180]
  14:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  18:	add	x0, x0, #0x0
  1c:	str	xzr, [x2, #24]
  20:	cmp	w4, #0x0
  24:	csel	x0, x0, x3, ne  // ne = any
  28:	stp	x1, x0, [x2]
  2c:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  30:	add	x0, x0, #0x0
  34:	str	x0, [x2, #16]
  38:	ret

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x4e                  	// #78
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x57                  	// #87
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZNK11__sanitizer13ListOfModulesixEm:

0000000000000000 <_ZNK11__sanitizer13ListOfModulesixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZNK11__sanitizer13ListOfModulesixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZNK11__sanitizer13ListOfModulesixEm>
  18:	adrp	x0, 0 <_ZNK11__sanitizer13ListOfModulesixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x2f9                 	// #761
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	mov	x1, #0x48                  	// #72
  34:	madd	x0, x3, x1, x0
  38:	ret

sanitizer_symbolizer_mac.o:     file format elf64-littleaarch64


sanitizer_symbolizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x8
   4:	b.ls	38 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm+0x38>  // b.plast
   8:	mov	x3, x1
   c:	str	x30, [sp, #-16]!
  10:	sub	x0, x2, #0x8
  14:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  18:	add	x0, x3, x0
  1c:	add	x1, x1, #0x0
  20:	mov	x2, #0x8                   	// #8
  24:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  28:	cmp	w0, #0x0
  2c:	cset	w0, eq  // eq = none
  30:	ldr	x30, [sp], #16
  34:	ret
  38:	mov	w0, #0x0                   	// #0
  3c:	ret

0000000000000040 <_ZN11__sanitizer14DemangleCXXABIEPKc>:
  40:	adrp	x1, 0 <__cxa_demangle>
  44:	stp	x19, x30, [sp, #-16]!
  48:	mov	x19, x0
  4c:	ldr	x1, [x1]
  50:	cbz	x1, 68 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x28>
  54:	mov	x3, #0x0                   	// #0
  58:	mov	x2, #0x0                   	// #0
  5c:	mov	x1, #0x0                   	// #0
  60:	bl	0 <__cxa_demangle>
  64:	cbnz	x0, 6c <_ZN11__sanitizer14DemangleCXXABIEPKc+0x2c>
  68:	mov	x0, x19
  6c:	ldp	x19, x30, [sp], #16
  70:	ret

0000000000000074 <_ZN11__sanitizer13DemangleSwiftEPKc>:
  74:	cbz	x0, e0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x6c>
  78:	stp	x19, x20, [sp, #-32]!
  7c:	mov	x19, x0
  80:	str	x30, [sp, #16]
  84:	ldrb	w1, [x0]
  88:	cmp	w1, #0x5f
  8c:	b.ne	d0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  90:	ldrb	w1, [x0, #1]
  94:	cmp	w1, #0x54
  98:	b.ne	d0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  9c:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  a0:	ldr	x20, [x1]
  a4:	cbz	x20, d0 <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>
  a8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  ac:	mov	x1, x0
  b0:	mov	x16, x20
  b4:	mov	x0, x19
  b8:	ldr	x30, [sp, #16]
  bc:	mov	w4, #0x0                   	// #0
  c0:	ldp	x19, x20, [sp], #32
  c4:	mov	x3, #0x0                   	// #0
  c8:	mov	x2, #0x0                   	// #0
  cc:	br	x16
  d0:	mov	x0, #0x0                   	// #0
  d4:	ldr	x30, [sp, #16]
  d8:	ldp	x19, x20, [sp], #32
  dc:	ret
  e0:	mov	x0, #0x0                   	// #0
  e4:	ret

00000000000000e8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>:
  e8:	stp	x19, x30, [sp, #-16]!
  ec:	mov	x19, x0
  f0:	cbz	x0, 124 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x3c>
  f4:	bl	74 <_ZN11__sanitizer13DemangleSwiftEPKc>
  f8:	cbnz	x0, 130 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x48>
  fc:	adrp	x0, 0 <__cxa_demangle>
 100:	ldr	x0, [x0]
 104:	cbz	x0, 124 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x3c>
 108:	mov	x0, x19
 10c:	mov	x3, #0x0                   	// #0
 110:	mov	x2, #0x0                   	// #0
 114:	mov	x1, #0x0                   	// #0
 118:	bl	0 <__cxa_demangle>
 11c:	cmp	x0, #0x0
 120:	csel	x19, x19, x0, eq  // eq = none
 124:	mov	x0, x19
 128:	ldp	x19, x30, [sp], #16
 12c:	ret
 130:	mov	x19, x0
 134:	b	124 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x3c>

0000000000000138 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>:
 138:	stp	x19, x20, [sp, #-128]!
 13c:	mov	x19, x0
 140:	ldr	x0, [x0, #8]
 144:	stp	x21, x22, [sp, #16]
 148:	stp	x23, x24, [sp, #32]
 14c:	stp	x25, x30, [sp, #48]
 150:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 154:	ands	w20, w0, #0xff
 158:	b.ne	194 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x5c>  // b.any
 15c:	add	x19, x19, #0x4, lsl #12
 160:	ldrb	w0, [x19, #33]
 164:	cbnz	w0, 17c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x44>
 168:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 16c:	add	x0, x0, #0x0
 170:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 174:	mov	w0, #0x1                   	// #1
 178:	strb	w0, [x19, #33]
 17c:	mov	w0, w20
 180:	ldp	x21, x22, [sp, #16]
 184:	ldp	x23, x24, [sp, #32]
 188:	ldp	x25, x30, [sp, #48]
 18c:	ldp	x19, x20, [sp], #128
 190:	ret
 194:	add	x20, sp, #0x50
 198:	mov	x22, #0x0                   	// #0
 19c:	mov	x21, x20
 1a0:	mov	x25, x20
 1a4:	mov	w23, #0x0                   	// #0
 1a8:	mov	x2, #0x8                   	// #8
 1ac:	mov	w1, #0x0                   	// #0
 1b0:	add	x0, sp, #0x40
 1b4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1b8:	add	x0, sp, #0x48
 1bc:	mov	x2, #0x8                   	// #8
 1c0:	mov	w1, #0x0                   	// #0
 1c4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1c8:	mov	x0, x21
 1cc:	bl	0 <pipe>
 1d0:	cmn	w0, #0x1
 1d4:	b.ne	200 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xc8>  // b.any
 1d8:	mov	w19, #0x0                   	// #0
 1dc:	cmp	w19, w23
 1e0:	b.eq	29c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x164>  // b.none
 1e4:	ldr	w0, [x20]
 1e8:	add	w19, w19, #0x1
 1ec:	add	x20, x20, #0x8
 1f0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 1f4:	ldur	w0, [x20, #-4]
 1f8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 1fc:	b	1dc <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xa4>
 200:	ldr	w0, [x21]
 204:	cmp	w0, #0x2
 208:	b.le	250 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x118>
 20c:	ldr	w0, [x21, #4]
 210:	cmp	w0, #0x2
 214:	b.le	250 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x118>
 218:	cbz	x22, 24c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x114>
 21c:	mov	w24, #0x0                   	// #0
 220:	cmp	w24, w23
 224:	b.eq	350 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x218>  // b.none
 228:	cmp	x20, x22
 22c:	b.eq	240 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x108>  // b.none
 230:	ldr	w0, [x20]
 234:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 238:	ldr	w0, [x20, #4]
 23c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 240:	add	w24, w24, #0x1
 244:	add	x20, x20, #0x8
 248:	b	220 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xe8>
 24c:	mov	x22, x21
 250:	add	w23, w23, #0x1
 254:	add	x21, x21, #0x8
 258:	cmp	w23, #0x5
 25c:	b.ne	1c8 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x90>  // b.any
 260:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 264:	cbz	x22, 280 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x148>
 268:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 26c:	mov	x4, #0x0                   	// #0
 270:	add	x2, x2, #0x0
 274:	mov	x3, #0x0                   	// #0
 278:	mov	w1, #0x88                  	// #136
 27c:	b	294 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x15c>
 280:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 284:	add	x2, x2, #0x0
 288:	mov	x4, #0x0                   	// #0
 28c:	mov	x3, #0x0                   	// #0
 290:	mov	w1, #0x87                  	// #135
 294:	add	x0, x0, #0x0
 298:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 29c:	bl	0 <__errno_location>
 2a0:	ldr	w1, [x0]
 2a4:	mov	w20, #0x0                   	// #0
 2a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2ac:	add	x0, x0, #0x0
 2b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2b4:	b	17c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x44>
 2b8:	ldp	x0, x1, [x19]
 2bc:	mov	x2, x25
 2c0:	ldr	x3, [x0, #8]
 2c4:	mov	x0, x19
 2c8:	blr	x3
 2cc:	ldp	w3, w2, [sp, #68]
 2d0:	mov	x1, x25
 2d4:	ldr	x0, [x19, #8]
 2d8:	mov	w4, #0xffffffff            	// #-1
 2dc:	bl	0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>
 2e0:	mov	w21, w0
 2e4:	cmp	w0, #0x0
 2e8:	ldr	w0, [sp, #64]
 2ec:	b.ge	300 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1c8>  // b.tcont
 2f0:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2f4:	ldr	w0, [sp, #76]
 2f8:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2fc:	b	17c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x44>
 300:	str	w0, [x19, #16]
 304:	ldr	w0, [sp, #76]
 308:	str	w0, [x19, #20]
 30c:	b.ne	328 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1f0>  // b.any
 310:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 314:	mov	x4, #0x0                   	// #0
 318:	add	x2, x2, #0x0
 31c:	mov	x3, #0x0                   	// #0
 320:	mov	w1, #0xef                  	// #239
 324:	b	380 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x248>
 328:	mov	w0, #0xa                   	// #10
 32c:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
 330:	mov	w0, w21
 334:	bl	0 <_ZN11__sanitizer16IsProcessRunningEi>
 338:	ands	w20, w0, #0xff
 33c:	b.ne	17c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x44>  // b.any
 340:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 344:	add	x0, x0, #0x0
 348:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 34c:	b	17c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x44>
 350:	ldr	x0, [x22]
 354:	str	x0, [sp, #64]
 358:	ldr	x0, [x21]
 35c:	str	x0, [sp, #72]
 360:	add	x0, x19, #0x4, lsl #12
 364:	ldrb	w20, [x0, #34]
 368:	cbz	w20, 2b8 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x180>
 36c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 370:	add	x2, x2, #0x0
 374:	mov	x4, #0x0                   	// #0
 378:	mov	x3, #0x0                   	// #0
 37c:	mov	w1, #0xde                  	// #222
 380:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 384:	b	294 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x15c>

0000000000000388 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>:
 388:	mov	x0, x1
 38c:	b	e8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>

0000000000000390 <_ZN11__sanitizer10Symbolizer14LateInitializeEv>:
 390:	str	x30, [sp, #-16]!
 394:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 398:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 39c:	mov	x0, #0x0                   	// #0
 3a0:	add	x1, x1, #0x0
 3a4:	bl	0 <dlsym>
 3a8:	ldr	x30, [sp], #16
 3ac:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 3b0:	str	x0, [x1]
 3b4:	b	0 <dlerror>

00000000000003b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>:
 3b8:	stp	x19, x20, [sp, #-144]!
 3bc:	stp	x21, x22, [sp, #16]
 3c0:	adrp	x22, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 3c4:	adrp	x21, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 3c8:	ldr	x0, [x22]
 3cc:	stp	x23, x24, [sp, #32]
 3d0:	stp	xzr, xzr, [sp, #96]
 3d4:	ldrb	w0, [x0]
 3d8:	str	x30, [sp, #48]
 3dc:	str	xzr, [sp, #112]
 3e0:	cbnz	w0, 458 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xa0>
 3e4:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 3e8:	ldr	x0, [x0]
 3ec:	ldr	w0, [x0]
 3f0:	sxtw	x0, w0
 3f4:	cmp	x0, #0x1
 3f8:	b.ls	408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>  // b.plast
 3fc:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 400:	add	x0, x0, #0x0
 404:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 408:	ldp	x0, x1, [sp, #96]
 40c:	stp	x0, x1, [sp, #120]
 410:	ldr	x0, [sp, #112]
 414:	str	x0, [sp, #136]
 418:	ldr	x0, [x21]
 41c:	mov	x1, #0xf0                  	// #240
 420:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 424:	mov	x19, x0
 428:	ldp	x2, x3, [sp, #120]
 42c:	stp	x2, x3, [sp, #64]
 430:	ldr	x1, [sp, #136]
 434:	str	x1, [sp, #80]
 438:	add	x1, sp, #0x40
 43c:	bl	0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>
 440:	mov	x0, x19
 444:	ldp	x21, x22, [sp, #16]
 448:	ldp	x23, x24, [sp, #32]
 44c:	ldr	x30, [sp, #48]
 450:	ldp	x19, x20, [sp], #144
 454:	ret
 458:	bl	0 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>
 45c:	tst	w0, #0xff
 460:	b.eq	4bc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x104>  // b.none
 464:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 468:	ldr	x0, [x0]
 46c:	ldr	w0, [x0]
 470:	sxtw	x0, w0
 474:	cmp	x0, #0x1
 478:	b.ls	488 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xd0>  // b.plast
 47c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 480:	add	x0, x0, #0x0
 484:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 488:	ldr	x0, [x21]
 48c:	bl	0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>
 490:	mov	x19, x0
 494:	cbz	x0, 524 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x16c>
 498:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 49c:	ldr	x0, [x0]
 4a0:	ldr	w0, [x0]
 4a4:	sxtw	x0, w0
 4a8:	cmp	x0, #0x1
 4ac:	b.ls	514 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x15c>  // b.plast
 4b0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 4b4:	add	x0, x0, #0x0
 4b8:	b	510 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x158>
 4bc:	adrp	x0, 0 <__sanitizer_symbolize_code>
 4c0:	ldr	x0, [x0]
 4c4:	cbz	x0, 488 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xd0>
 4c8:	adrp	x0, 0 <__sanitizer_symbolize_data>
 4cc:	ldr	x0, [x0]
 4d0:	cbz	x0, 488 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xd0>
 4d4:	ldr	x0, [x21]
 4d8:	mov	x1, #0x4010                	// #16400
 4dc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 4e0:	mov	x19, x0
 4e4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 4e8:	add	x0, x0, #0x0
 4ec:	stp	x0, xzr, [x19]
 4f0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 4f4:	ldr	x0, [x0]
 4f8:	ldr	w0, [x0]
 4fc:	sxtw	x0, w0
 500:	cmp	x0, #0x1
 504:	b.ls	514 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x15c>  // b.plast
 508:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 50c:	add	x0, x0, #0x0
 510:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 514:	mov	x1, x19
 518:	add	x0, sp, #0x60
 51c:	bl	0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 520:	b	408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>
 524:	ldr	x0, [x22]
 528:	ldr	x20, [x0, #8]
 52c:	cbz	x20, 568 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1b0>
 530:	mov	x0, x20
 534:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 538:	mov	x19, x0
 53c:	ldrb	w0, [x20]
 540:	cbnz	w0, 570 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1b8>
 544:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 548:	ldr	x0, [x0]
 54c:	ldr	w0, [x0]
 550:	sxtw	x0, w0
 554:	cmp	x0, #0x1
 558:	b.ls	408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>  // b.plast
 55c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 560:	add	x0, x0, #0x0
 564:	b	404 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4c>
 568:	adrp	x19, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 56c:	add	x19, x19, #0x0
 570:	adrp	x24, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 574:	add	x24, x24, #0x0
 578:	mov	x1, x24
 57c:	mov	x0, x19
 580:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 584:	cbnz	w0, 5d8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x220>
 588:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 58c:	ldr	x0, [x0]
 590:	ldr	w0, [x0]
 594:	sxtw	x0, w0
 598:	cmp	x0, #0x1
 59c:	b.ls	5b0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f8>  // b.plast
 5a0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5a4:	mov	x1, x20
 5a8:	add	x0, x0, #0x0
 5ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5b0:	ldr	x22, [x21]
 5b4:	mov	x1, #0x4018                	// #16408
 5b8:	mov	x0, x22
 5bc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 5c0:	mov	x2, x22
 5c4:	mov	x19, x0
 5c8:	mov	x1, x20
 5cc:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 5d0:	cbnz	x19, 514 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x15c>
 5d4:	b	408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>
 5d8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5dc:	mov	x0, x19
 5e0:	add	x1, x1, #0x0
 5e4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 5e8:	cbnz	w0, 5fc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x244>
 5ec:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5f0:	add	x0, x0, #0x0
 5f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5f8:	bl	0 <_ZN11__sanitizer3DieEv>
 5fc:	adrp	x23, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 600:	add	x23, x23, #0x0
 604:	mov	x1, x23
 608:	mov	x0, x19
 60c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 610:	cbnz	w0, 660 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2a8>
 614:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 618:	ldr	x0, [x0]
 61c:	ldr	w0, [x0]
 620:	sxtw	x0, w0
 624:	cmp	x0, #0x1
 628:	b.ls	63c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x284>  // b.plast
 62c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 630:	mov	x1, x20
 634:	add	x0, x0, #0x0
 638:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 63c:	ldr	x22, [x21]
 640:	mov	x1, #0x38                  	// #56
 644:	mov	x0, x22
 648:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 64c:	mov	x2, x22
 650:	mov	x19, x0
 654:	mov	x1, x20
 658:	bl	0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 65c:	b	5d0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x218>
 660:	cbz	x20, 678 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2c0>
 664:	mov	x1, x20
 668:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 66c:	add	x0, x0, #0x0
 670:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 674:	b	5f8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x240>
 678:	mov	x0, x24
 67c:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 680:	mov	x20, x0
 684:	cbz	x0, 6b0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2f8>
 688:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 68c:	ldr	x0, [x0]
 690:	ldr	w0, [x0]
 694:	sxtw	x0, w0
 698:	cmp	x0, #0x1
 69c:	b.ls	5b0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f8>  // b.plast
 6a0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6a4:	mov	x1, x20
 6a8:	add	x0, x0, #0x0
 6ac:	b	5ac <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f4>
 6b0:	ldr	x22, [x22]
 6b4:	ldrb	w0, [x22, #16]
 6b8:	cbz	w0, 408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>
 6bc:	mov	x0, x23
 6c0:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 6c4:	mov	x20, x0
 6c8:	cbz	x0, 408 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x50>
 6cc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 6d0:	ldr	x0, [x0]
 6d4:	ldr	w0, [x0]
 6d8:	sxtw	x0, w0
 6dc:	cmp	x0, #0x1
 6e0:	b.ls	63c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x284>  // b.plast
 6e4:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6e8:	mov	x1, x20
 6ec:	add	x0, x0, #0x0
 6f0:	b	638 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x280>

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x1, [x2]
   4:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>
   8:	add	x1, x1, #0x0
   c:	str	x1, [x2, #8]
  10:	ldr	x0, [x0, #16424]
  14:	stp	x0, xzr, [x2, #16]
  18:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer5FlushEv:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer5FlushEv>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_flush>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 10 <_ZN11__sanitizer18InternalSymbolizer5FlushEv+0x10>
   c:	b	0 <__sanitizer_symbolize_flush>
  10:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x2
   8:	mov	x20, x1
   c:	stp	x21, x22, [sp, #16]
  10:	add	x22, x0, #0x10
  14:	mov	x2, x22
  18:	ldp	x0, x1, [x19]
  1c:	mov	w3, #0x4000                	// #16384
  20:	str	x30, [sp, #32]
  24:	bl	0 <__sanitizer_symbolize_data>
  28:	mov	w21, w0
  2c:	tst	w0, #0xff
  30:	b.eq	54 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x54>  // b.none
  34:	mov	x1, x19
  38:	mov	x0, x22
  3c:	bl	0 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
  40:	ldr	x1, [x19, #48]
  44:	add	x20, x20, x1
  48:	ldr	x1, [x19, #8]
  4c:	sub	x20, x20, x1
  50:	str	x20, [x19, #48]
  54:	mov	w0, w21
  58:	ldp	x21, x22, [sp, #16]
  5c:	ldr	x30, [sp, #32]
  60:	ldp	x19, x20, [sp], #48
  64:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x2
   8:	mov	w3, #0x4000                	// #16384
   c:	stp	x21, x30, [sp, #16]
  10:	add	x21, x0, #0x10
  14:	mov	x2, x21
  18:	ldp	x0, x1, [x19, #16]
  1c:	bl	0 <__sanitizer_symbolize_code>
  20:	mov	w20, w0
  24:	tst	w0, #0xff
  28:	b.eq	38 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x38>  // b.none
  2c:	mov	x1, x19
  30:	mov	x0, x21
  34:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  38:	mov	w0, w20
  3c:	ldp	x21, x30, [sp, #16]
  40:	ldp	x19, x20, [sp], #32
  44:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_demangle>
   4:	stp	x19, x20, [sp, #-32]!
   8:	ldr	x0, [x0]
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x21, x1
  14:	cbz	x0, 64 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x64>
  18:	mov	x20, #0x400                 	// #1024
  1c:	mov	x1, #0x0                   	// #0
  20:	mov	x2, #0x0                   	// #0
  24:	mov	x0, x20
  28:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  2c:	mov	x1, x0
  30:	mov	x19, x0
  34:	mov	w2, w20
  38:	mov	x0, x21
  3c:	bl	0 <__sanitizer_symbolize_demangle>
  40:	sxtw	x1, w0
  44:	cmp	x20, w0, sxtw
  48:	b.cs	68 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x68>  // b.hs, b.nlast
  4c:	add	x20, x1, #0x1
  50:	mov	x0, x19
  54:	mov	x1, #0x0                   	// #0
  58:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  5c:	cmp	x20, #0x20, lsl #12
  60:	b.ls	1c <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x1c>  // b.plast
  64:	mov	x19, x21
  68:	mov	x0, x19
  6c:	ldp	x21, x30, [sp, #16]
  70:	ldp	x19, x20, [sp], #32
  74:	ret

Disassembly of section .text._ZN11__sanitizer19RoundUpToPowerOfTwoEm:

0000000000000000 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>:
   0:	str	x30, [sp, #-16]!
   4:	mov	x3, x0
   8:	cbnz	x0, 28 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x28>
   c:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	w1, #0x177                 	// #375
  1c:	adrp	x0, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  28:	sub	x0, x0, #0x1
  2c:	tst	x0, x3
  30:	b.eq	84 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x84>  // b.none
  34:	clz	x1, x3
  38:	mov	w4, #0x3f                  	// #63
  3c:	sub	w1, w4, w1
  40:	mov	x4, #0x1                   	// #1
  44:	add	w0, w1, #0x1
  48:	lsl	x0, x4, x0
  4c:	cmp	x3, x0
  50:	b.cc	68 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x68>  // b.lo, b.ul, b.last
  54:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  58:	mov	x4, x0
  5c:	add	x2, x2, #0x0
  60:	mov	w1, #0x17b                 	// #379
  64:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  68:	lsl	x4, x4, x1
  6c:	cmp	x3, x4
  70:	b.hi	88 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x88>  // b.pmore
  74:	adrp	x2, 0 <_ZN11__sanitizer19RoundUpToPowerOfTwoEm>
  78:	mov	w1, #0x17c                 	// #380
  7c:	add	x2, x2, #0x0
  80:	b	1c <_ZN11__sanitizer19RoundUpToPowerOfTwoEm+0x1c>
  84:	mov	x0, x3
  88:	ldr	x30, [sp], #16
  8c:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEEixEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEEixEm>:
   0:	ldr	x4, [x0, #16]
   4:	mov	x3, x1
   8:	cmp	x1, x4
   c:	b.cc	2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEEixEm+0x2c>  // b.lo, b.ul, b.last
  10:	str	x30, [sp, #-16]!
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEEixEm>
  18:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEEixEm>
  1c:	add	x2, x2, #0x0
  20:	add	x0, x0, #0x0
  24:	mov	w1, #0x1b6                 	// #438
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x0, [x0]
  30:	add	x0, x0, x1, lsl #3
  34:	ret

Disassembly of section .text._ZN11__sanitizer13IntrusiveListINS_14SymbolizerToolEE9push_backEPS1_:

0000000000000000 <_ZN11__sanitizer13IntrusiveListINS_14SymbolizerToolEE9push_backEPS1_>:
   0:	ldr	x2, [x0]
   4:	str	xzr, [x1, #8]
   8:	cbnz	x2, 1c <_ZN11__sanitizer13IntrusiveListINS_14SymbolizerToolEE9push_backEPS1_+0x1c>
   c:	stp	x1, x1, [x0, #8]
  10:	mov	x1, #0x1                   	// #1
  14:	str	x1, [x0]
  18:	ret
  1c:	ldr	x3, [x0, #16]
  20:	add	x2, x2, #0x1
  24:	str	x1, [x3, #8]
  28:	str	x2, [x0]
  2c:	str	x1, [x0, #16]
  30:	b	18 <_ZN11__sanitizer13IntrusiveListINS_14SymbolizerToolEE9push_backEPS1_+0x18>

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x4, x1
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm+0x30>
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>
  18:	add	x2, x2, #0x0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x20, x0
  38:	cmp	x1, x3
  3c:	b.cs	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm+0x50>  // b.hs, b.nlast
  40:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>
  44:	mov	w1, #0x1fd                 	// #509
  48:	add	x2, x2, #0x0
  4c:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm+0x24>
  50:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
  54:	lsl	x19, x1, #3
  58:	mov	x21, x0
  5c:	ldr	x22, [x0]
  60:	ldr	x1, [x22]
  64:	cbnz	x1, 70 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm+0x70>
  68:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  6c:	str	x0, [x22]
  70:	ldr	x0, [x21]
  74:	ldr	x0, [x0]
  78:	sub	x4, x0, #0x1
  7c:	tst	x4, x0
  80:	b.eq	94 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm+0x94>  // b.none
  84:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  90:	bl	0 <_ZN11__sanitizer3DieEv>
  94:	add	x19, x19, x4
  98:	neg	x0, x0
  9c:	and	x19, x19, x0
  a0:	mov	w2, #0x0                   	// #0
  a4:	mov	x0, x19
  a8:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIPNS_16Addr2LineProcessEE7ReallocEm>
  ac:	add	x1, x1, #0x0
  b0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b4:	ldr	x1, [x20]
  b8:	mov	x21, x0
  bc:	ldr	x2, [x20, #16]
  c0:	lsl	x2, x2, #3
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	ldp	x0, x1, [x20]
  cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  d0:	ldr	x30, [sp, #32]
  d4:	stp	x21, x19, [x20]
  d8:	ldp	x21, x22, [sp, #16]
  dc:	ldp	x19, x20, [sp], #48
  e0:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>:
   0:	stp	x19, x20, [sp, #-128]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x2
  14:	mov	x21, #0x0                   	// #0
  18:	stp	x23, x30, [sp, #32]
  1c:	add	x23, x0, #0x20
  20:	str	xzr, [sp, #56]
  24:	ldr	x0, [x19, #48]
  28:	cmp	x21, x0
  2c:	b.cs	64 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0x64>  // b.hs, b.nlast
  30:	mov	x1, x21
  34:	mov	x0, x23
  38:	bl	0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  3c:	ldr	x0, [x0]
  40:	ldr	x1, [x0, #16424]
  44:	mov	x0, x20
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbnz	w0, d4 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0xd4>
  50:	mov	x1, x21
  54:	mov	x0, x23
  58:	bl	0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  5c:	ldr	x0, [x0]
  60:	str	x0, [sp, #56]
  64:	ldr	x0, [sp, #56]
  68:	cbnz	x0, 114 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0x114>
  6c:	ldr	x0, [x19, #24]
  70:	mov	x1, #0x4030                	// #16432
  74:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19, #16]
  80:	mov	w2, #0x0                   	// #0
  84:	bl	0 <_ZN11__sanitizer17SymbolizerProcessC2EPKcb>
  88:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  8c:	add	x0, x0, #0x0
  90:	str	x0, [x21]
  94:	mov	x0, x20
  98:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  9c:	str	x21, [sp, #56]
  a0:	ldr	x4, [x19, #40]
  a4:	str	x0, [x21, #16424]
  a8:	add	x21, x19, #0x20
  ac:	ldr	x3, [x21, #16]
  b0:	lsr	x4, x4, #3
  b4:	cmp	x3, x4
  b8:	b.ls	dc <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0xdc>  // b.plast
  bc:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  c0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  c4:	add	x2, x2, #0x0
  c8:	add	x0, x0, #0x0
  cc:	mov	w1, #0x1be                 	// #446
  d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  d4:	add	x21, x21, #0x1
  d8:	b	24 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0x24>
  dc:	b.ne	f4 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0xf4>  // b.any
  e0:	add	x0, x3, #0x1
  e4:	bl	0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  e8:	mov	x1, x0
  ec:	mov	x0, x21
  f0:	bl	0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
  f4:	ldr	x0, [x21, #16]
  f8:	mov	x2, #0x8                   	// #8
  fc:	ldr	x3, [x19, #32]
 100:	add	x1, x0, #0x1
 104:	str	x1, [x21, #16]
 108:	add	x1, sp, #0x38
 10c:	add	x0, x3, x0, lsl #3
 110:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 114:	ldr	x0, [sp, #56]
 118:	ldr	x1, [x0, #16424]
 11c:	mov	x0, x20
 120:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 124:	sxtw	x4, w0
 128:	cbz	w0, 148 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0x148>
 12c:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
 130:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
 134:	add	x2, x2, #0x0
 138:	add	x0, x0, #0x0
 13c:	mov	x3, #0x0                   	// #0
 140:	mov	w1, #0x15c                 	// #348
 144:	b	d0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm+0xd0>
 148:	add	x19, sp, #0x40
 14c:	mov	x3, x22
 150:	mov	x4, #0xffffffffffffffff    	// #-1
 154:	mov	x0, x19
 158:	mov	x1, #0x40                  	// #64
 15c:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SendCommandEPKcm>
 160:	add	x2, x2, #0x0
 164:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 168:	ldr	x0, [sp, #56]
 16c:	mov	x1, x19
 170:	bl	0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
 174:	ldp	x21, x22, [sp, #16]
 178:	ldp	x23, x30, [sp, #32]
 17c:	ldp	x19, x20, [sp], #128
 180:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x2
   8:	ldr	x2, [x2, #24]
   c:	ldr	x1, [x19, #16]
  10:	bl	0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  14:	cbz	x0, 2c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2c>
  18:	mov	x1, x19
  1c:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  20:	mov	w0, #0x1                   	// #1
  24:	ldp	x19, x30, [sp], #16
  28:	ret
  2c:	mov	w0, #0x0                   	// #0
  30:	b	24 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x24>

Disassembly of section .text._ZN11__sanitizer13Addr2LinePoolC2EPKcPNS_17LowLevelAllocatorE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePoolC1EPKcPNS_17LowLevelAllocatorE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	add	x20, x0, #0x20
   c:	str	x30, [sp, #16]
  10:	str	xzr, [x0, #8]
  14:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePoolC1EPKcPNS_17LowLevelAllocatorE>
  18:	add	x0, x0, #0x0
  1c:	str	x0, [x19]
  20:	stp	x1, x2, [x19, #16]
  24:	mov	x0, x20
  28:	mov	x1, #0x1                   	// #1
  2c:	stp	xzr, xzr, [x19, #32]
  30:	str	xzr, [x19, #48]
  34:	bl	0 <_ZN11__sanitizer13Addr2LinePoolC1EPKcPNS_17LowLevelAllocatorE>
  38:	ldr	x0, [x19, #40]
  3c:	cmp	x0, #0x7f
  40:	b.hi	58 <_ZN11__sanitizer13Addr2LinePoolC1EPKcPNS_17LowLevelAllocatorE+0x58>  // b.pmore
  44:	mov	x0, x20
  48:	mov	x1, #0x10                  	// #16
  4c:	ldr	x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	b	0 <_ZN11__sanitizer13Addr2LinePoolC1EPKcPNS_17LowLevelAllocatorE>
  58:	ldr	x30, [sp, #16]
  5c:	ldp	x19, x20, [sp], #32
  60:	ret

Disassembly of section .text._ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm:

0000000000000000 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	str	x30, [sp, #16]
   c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  10:	mov	w19, w0
  14:	tst	w0, #0xff
  18:	b.eq	5c <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x5c>  // b.none
  1c:	ldrb	w0, [x20]
  20:	cbz	w0, 5c <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x5c>
  24:	adrp	x1, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  28:	add	x0, x20, #0x1
  2c:	add	x1, x1, #0x0
  30:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  34:	cbnz	x0, 58 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x58>
  38:	adrp	x2, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  3c:	adrp	x0, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  40:	add	x2, x2, #0x0
  44:	add	x0, x0, #0x0
  48:	mov	x4, #0x0                   	// #0
  4c:	mov	x3, #0x0                   	// #0
  50:	mov	w1, #0x11e                 	// #286
  54:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  58:	strb	wzr, [x0]
  5c:	mov	w0, w19
  60:	ldr	x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #32
  68:	ret

sanitizer_symbolizer_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	ldr	x20, [x0]
   c:	str	x30, [sp, #16]
  10:	mov	x0, x20
  14:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  18:	mov	x0, x19
  1c:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
  20:	ldr	w0, [x19, #8]
  24:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
  28:	dmb	ish
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret

000000000000003c <_ZN11__sanitizer15ColorizeReportsEv>:
  3c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  40:	stp	x19, x30, [sp, #-16]!
  44:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  48:	ldr	x0, [x0]
  4c:	add	x1, x1, #0x0
  50:	ldr	x19, [x0, #112]
  54:	mov	x0, x19
  58:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  5c:	cbz	w0, 84 <_ZN11__sanitizer15ColorizeReportsEv+0x48>
  60:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  64:	mov	x0, x19
  68:	add	x1, x1, #0x0
  6c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  70:	cbnz	w0, 90 <_ZN11__sanitizer15ColorizeReportsEv+0x54>
  74:	ldp	x19, x30, [sp], #16
  78:	adrp	x0, 0 <_ZN11__sanitizer11report_fileE>
  7c:	ldr	x0, [x0]
  80:	b	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  84:	mov	w0, #0x1                   	// #1
  88:	ldp	x19, x30, [sp], #16
  8c:	ret
  90:	mov	w0, #0x0                   	// #0
  94:	b	88 <_ZN11__sanitizer15ColorizeReportsEv+0x4c>

0000000000000098 <_ZN11__sanitizer23StartReportDeadlySignalEv>:
  98:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  9c:	stp	x19, x30, [sp, #-16]!
  a0:	ldr	x0, [x0]
  a4:	ldr	x19, [x0]
  a8:	mov	x0, x19
  ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  b0:	mov	x1, x0
  b4:	mov	x0, x19
  b8:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  bc:	ldp	x19, x30, [sp], #16
  c0:	mov	x1, #0xe                   	// #14
  c4:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  c8:	add	x0, x0, #0x0
  cc:	b	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>

00000000000000d0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>:
  d0:	stp	x19, x20, [sp, #-32]!
  d4:	adrp	x19, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
  d8:	add	x19, x19, #0x0
  dc:	str	x30, [sp, #16]
  e0:	bl	0 <_ZN11__sanitizer13GetThreadSelfEv>
  e4:	mov	x20, x0
  e8:	ldxr	x0, [x19]
  ec:	cbnz	x0, f8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x28>
  f0:	stlxr	w1, x20, [x19]
  f4:	cbnz	w1, e8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x18>
  f8:	dmb	ish
  fc:	cbnz	x0, 110 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x40>
 100:	add	x0, x19, #0x8
 104:	ldr	x30, [sp, #16]
 108:	ldp	x19, x20, [sp], #32
 10c:	b	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 110:	cmp	x20, x0
 114:	b.ne	15c <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x8c>  // b.any
 118:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 11c:	ldr	x0, [x0]
 120:	ldr	x19, [x0]
 124:	mov	x0, x19
 128:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 12c:	mov	x1, x0
 130:	mov	x0, x19
 134:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 138:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 13c:	add	x0, x0, #0x0
 140:	add	x0, x0, #0xf
 144:	mov	x1, #0x2b                  	// #43
 148:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 14c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 150:	ldr	x0, [x0]
 154:	ldr	w0, [x0, #216]
 158:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 15c:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 160:	b	e8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x18>

0000000000000164 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>:
 164:	dmb	ish
 168:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 16c:	add	x1, x0, #0x0
 170:	strb	wzr, [x1, #8]
 174:	str	xzr, [x0]
 178:	ret

000000000000017c <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>:
 17c:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 180:	add	x0, x0, #0x0
 184:	ldrb	w3, [x0, #8]
 188:	and	x3, x3, #0xff
 18c:	cmp	x3, #0x1
 190:	b.eq	1b4 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv+0x38>  // b.none
 194:	str	x30, [sp, #-16]!
 198:	adrp	x2, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 19c:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 1a0:	add	x2, x2, #0x0
 1a4:	add	x0, x0, #0x0
 1a8:	mov	x4, #0x1                   	// #1
 1ac:	mov	w1, #0x2a                  	// #42
 1b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1b4:	ret

00000000000001b8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>:
 1b8:	stp	x19, x20, [sp, #-80]!
 1bc:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1c0:	ldr	x20, [x20]
 1c4:	stp	x23, x30, [sp, #32]
 1c8:	mov	x23, x0
 1cc:	stp	x21, x22, [sp, #16]
 1d0:	ldrb	w0, [x20, #60]
 1d4:	cbz	w0, 240 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x88>
 1d8:	add	x19, sp, #0x30
 1dc:	mov	x21, x2
 1e0:	mov	x22, x1
 1e4:	mov	x0, x19
 1e8:	mov	x1, #0x400                 	// #1024
 1ec:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 1f0:	mov	x2, x23
 1f4:	mov	x0, x19
 1f8:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 1fc:	add	x1, x1, #0x0
 200:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 204:	ldrb	w4, [x20, #181]
 208:	mov	x3, x22
 20c:	ldr	x5, [x20, #24]
 210:	mov	x0, x19
 214:	mov	w2, #0x0                   	// #0
 218:	adrp	x6, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 21c:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 220:	add	x6, x6, #0x0
 224:	add	x1, x1, #0x0
 228:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 22c:	ldr	x0, [sp, #48]
 230:	mov	x1, x21
 234:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
 238:	ldp	x0, x1, [sp, #48]
 23c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 240:	ldp	x21, x22, [sp, #16]
 244:	ldp	x23, x30, [sp, #32]
 248:	ldp	x19, x20, [sp], #80
 24c:	ret

0000000000000250 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>:
 250:	stp	x19, x20, [sp, #-32]!
 254:	stp	x21, x30, [sp, #16]
 258:	mov	x21, x2
 25c:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 260:	ldr	x2, [x2]
 264:	ldrb	w2, [x2, #60]
 268:	cbz	w2, 2c4 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x74>
 26c:	ldr	w2, [x1, #8]
 270:	cbnz	w2, 284 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x34>
 274:	ldp	x21, x30, [sp, #16]
 278:	mov	x1, #0x0                   	// #0
 27c:	ldp	x19, x20, [sp], #32
 280:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
 284:	mov	x20, x0
 288:	ldr	x0, [x1]
 28c:	ldr	x19, [x0]
 290:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 294:	sub	x19, x19, #0x4
 298:	mov	x1, x19
 29c:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 2a0:	mov	x2, x21
 2a4:	mov	x19, x0
 2a8:	add	x1, x0, #0x8
 2ac:	mov	x0, x20
 2b0:	bl	1b8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
 2b4:	mov	x0, x19
 2b8:	ldp	x21, x30, [sp, #16]
 2bc:	ldp	x19, x20, [sp], #32
 2c0:	b	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 2c4:	ldp	x21, x30, [sp, #16]
 2c8:	ldp	x19, x20, [sp], #32
 2cc:	ret

00000000000002d0 <_ZN11__sanitizer19ReportMmapWriteExecEi>:
 2d0:	and	w0, w0, #0x6
 2d4:	cmp	w0, #0x6
 2d8:	b.ne	400 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x130>  // b.any
 2dc:	stp	x29, x30, [sp, #-112]!
 2e0:	mov	x29, sp
 2e4:	str	x23, [sp, #48]
 2e8:	add	x23, x29, #0x40
 2ec:	mov	x0, x23
 2f0:	stp	x19, x20, [sp, #16]
 2f4:	mov	x20, x30
 2f8:	stp	x21, x22, [sp, #32]
 2fc:	bl	d0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
 300:	bl	3c <_ZN11__sanitizer15ColorizeReportsEv>
 304:	mov	x1, #0x1                   	// #1
 308:	and	w22, w0, #0xff
 30c:	add	x0, x29, #0x58
 310:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 314:	ldr	x19, [x29, #88]
 318:	add	x0, x19, #0x10
 31c:	stp	x0, xzr, [x19]
 320:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 324:	ldr	x0, [x0]
 328:	stp	xzr, xzr, [x29, #72]
 32c:	str	xzr, [x19, #2064]
 330:	ldrb	w21, [x0, #33]
 334:	cbz	w21, 348 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x78>
 338:	add	x2, x29, #0x50
 33c:	add	x1, x29, #0x48
 340:	mov	w0, #0x0                   	// #0
 344:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 348:	ldp	x5, x6, [x29, #72]
 34c:	mov	w7, w21
 350:	mov	x3, x29
 354:	mov	x4, #0x0                   	// #0
 358:	mov	x2, x20
 35c:	mov	x0, x19
 360:	mov	w1, #0x100                 	// #256
 364:	adrp	x21, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 368:	adrp	x20, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 36c:	add	x21, x21, #0x0
 370:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
 374:	add	x20, x20, #0x0
 378:	cmp	w22, #0x0
 37c:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 380:	add	x1, x1, #0x0
 384:	mov	x0, x20
 388:	csel	x1, x1, x21, ne  // ne = any
 38c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 390:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 394:	ldr	x0, [x0]
 398:	ldr	x1, [x0]
 39c:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 3a0:	add	x0, x0, #0x0
 3a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3a8:	cmp	w22, #0x0
 3ac:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 3b0:	add	x1, x1, #0x0
 3b4:	mov	x0, x20
 3b8:	csel	x1, x1, x21, ne  // ne = any
 3bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 3c0:	mov	x0, x19
 3c4:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 3c8:	mov	x2, #0x0                   	// #0
 3cc:	mov	x1, x19
 3d0:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 3d4:	add	x0, x0, #0x0
 3d8:	bl	250 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 3dc:	ldp	x0, x1, [x29, #88]
 3e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e4:	mov	x0, x23
 3e8:	bl	164 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>
 3ec:	ldp	x19, x20, [sp, #16]
 3f0:	ldp	x21, x22, [sp, #32]
 3f4:	ldr	x23, [sp, #48]
 3f8:	ldp	x29, x30, [sp], #112
 3fc:	ret
 400:	ret

0000000000000404 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>:
 404:	stp	x19, x20, [sp, #-240]!
 408:	mov	x19, x0
 40c:	mov	w20, w1
 410:	stp	x21, x22, [sp, #16]
 414:	add	x22, sp, #0xa0
 418:	adrp	x21, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 41c:	stp	x23, x24, [sp, #32]
 420:	adrp	x23, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 424:	stp	x25, x26, [sp, #48]
 428:	mov	x25, x2
 42c:	mov	x26, x3
 430:	stp	x27, x28, [sp, #64]
 434:	str	x30, [sp, #80]
 438:	bl	0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>
 43c:	tst	w0, #0xff
 440:	b.eq	51c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x118>  // b.none
 444:	bl	3c <_ZN11__sanitizer15ColorizeReportsEv>
 448:	ands	w28, w0, #0xff
 44c:	add	x23, x23, #0x0
 450:	adrp	x27, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 454:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 458:	add	x27, x27, #0x0
 45c:	add	x1, x1, #0x0
 460:	mov	x0, x23
 464:	csel	x1, x1, x27, ne  // ne = any
 468:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 46c:	ldr	x21, [x21]
 470:	adrp	x24, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 474:	ldp	x3, x4, [x19, #16]
 478:	add	x24, x24, #0x0
 47c:	ldp	x6, x5, [x19, #32]
 480:	add	x24, x24, #0x3b
 484:	ldr	x1, [x21]
 488:	mov	w7, w20
 48c:	mov	x2, x24
 490:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 494:	add	x0, x0, #0x0
 498:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 49c:	cmp	w28, #0x0
 4a0:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 4a4:	add	x1, x1, #0x0
 4a8:	mov	x0, x23
 4ac:	csel	x1, x1, x27, ne  // ne = any
 4b0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 4b4:	mov	x0, x22
 4b8:	mov	x1, #0x1                   	// #1
 4bc:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 4c0:	ldr	x20, [sp, #160]
 4c4:	mov	x1, x26
 4c8:	mov	x2, x20
 4cc:	add	x0, x20, #0x10
 4d0:	stp	x0, xzr, [x20]
 4d4:	mov	x0, x19
 4d8:	str	xzr, [x20, #2064]
 4dc:	blr	x25
 4e0:	mov	x0, x20
 4e4:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 4e8:	mov	x1, x20
 4ec:	mov	x0, x24
 4f0:	mov	x2, #0x0                   	// #0
 4f4:	bl	250 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 4f8:	ldp	x0, x1, [sp, #160]
 4fc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 500:	ldp	x21, x22, [sp, #16]
 504:	ldp	x23, x24, [sp, #32]
 508:	ldp	x25, x26, [sp, #48]
 50c:	ldp	x27, x28, [sp, #64]
 510:	ldr	x30, [sp, #80]
 514:	ldp	x19, x20, [sp], #240
 518:	ret
 51c:	bl	3c <_ZN11__sanitizer15ColorizeReportsEv>
 520:	adrp	x28, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 524:	ands	w8, w0, #0xff
 528:	add	x28, x28, #0x0
 52c:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 530:	add	x1, x1, #0x0
 534:	csel	x1, x1, x28, ne  // ne = any
 538:	add	x27, x23, #0x0
 53c:	mov	x0, x27
 540:	str	w8, [sp, #96]
 544:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 548:	mov	x0, x19
 54c:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
 550:	mov	x24, x0
 554:	mov	w7, w20
 558:	ldr	x0, [x21]
 55c:	mov	x2, x24
 560:	ldp	x3, x4, [x19, #16]
 564:	ldp	x6, x5, [x19, #32]
 568:	ldr	x1, [x0]
 56c:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 570:	add	x0, x0, #0x0
 574:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 578:	ldr	w8, [sp, #96]
 57c:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 580:	add	x1, x1, #0x0
 584:	mov	x0, x27
 588:	cmp	w8, #0x0
 58c:	csel	x1, x1, x28, ne  // ne = any
 590:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 594:	ldr	x20, [x19, #24]
 598:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 59c:	cmp	x20, x0
 5a0:	b.cs	5b0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1ac>  // b.hs, b.nlast
 5a4:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5a8:	add	x0, x0, #0x0
 5ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5b0:	ldrb	w0, [x19, #48]
 5b4:	cbz	w0, 604 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x200>
 5b8:	ldr	w2, [x19, #52]
 5bc:	cmp	w2, #0x2
 5c0:	b.eq	668 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x264>  // b.none
 5c4:	cmp	w2, #0x1
 5c8:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5cc:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5d0:	add	x0, x0, #0x0
 5d4:	add	x1, x1, #0x0
 5d8:	csel	x1, x1, x0, eq  // eq = none
 5dc:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5e0:	add	x0, x0, #0x0
 5e4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5e8:	ldr	x20, [x19, #16]
 5ec:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5f0:	cmp	x20, x0
 5f4:	b.cs	604 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x200>  // b.hs, b.nlast
 5f8:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 5fc:	add	x0, x0, #0x0
 600:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 604:	add	x20, sp, #0x80
 608:	adrp	x27, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 60c:	add	x27, x27, #0x0
 610:	mov	x0, x20
 614:	mov	w1, #0x1                   	// #1
 618:	ldr	x28, [x19, #24]
 61c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 620:	stp	xzr, xzr, [sp, #184]
 624:	str	xzr, [sp, #232]
 628:	mov	x1, x22
 62c:	mov	x0, x20
 630:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 634:	tst	w0, #0xff
 638:	b.eq	674 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x270>  // b.none
 63c:	ldr	x0, [sp, #160]
 640:	cmp	x28, x0
 644:	b.cc	628 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x224>  // b.lo, b.ul, b.last
 648:	ldr	x0, [sp, #168]
 64c:	cmp	x28, x0
 650:	b.cs	628 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x224>  // b.hs, b.nlast
 654:	ldr	x0, [sp, #200]
 658:	tbnz	w0, #2, 628 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x224>
 65c:	mov	x0, x27
 660:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 664:	b	628 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x224>
 668:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 66c:	add	x1, x1, #0x0
 670:	b	5dc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1d8>
 674:	mov	x0, x20
 678:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 67c:	mov	x0, x20
 680:	mov	x1, #0x1                   	// #1
 684:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 688:	ldr	x20, [sp, #128]
 68c:	mov	x1, x26
 690:	add	x0, x20, #0x10
 694:	mov	x2, x20
 698:	stp	x0, xzr, [x20]
 69c:	mov	x0, x19
 6a0:	str	xzr, [x20, #2064]
 6a4:	blr	x25
 6a8:	mov	x0, x20
 6ac:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 6b0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 6b4:	str	x0, [sp, #96]
 6b8:	ldr	x1, [x0]
 6bc:	ldrb	w1, [x1, #232]
 6c0:	cbz	w1, 79c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x398>
 6c4:	ldr	x28, [x19, #24]
 6c8:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 6cc:	cmp	x28, x0
 6d0:	b.cc	79c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x398>  // b.lo, b.ul, b.last
 6d4:	mov	x0, x22
 6d8:	mov	x1, #0x400                 	// #1024
 6dc:	bl	0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 6e0:	mov	x0, x22
 6e4:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 6e8:	add	x1, x1, #0x0
 6ec:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 6f0:	mov	x0, x28
 6f4:	mov	x1, #0x10                  	// #16
 6f8:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 6fc:	tst	w0, #0xff
 700:	b.eq	7e0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3dc>  // b.none
 704:	adrp	x2, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 708:	adrp	x27, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 70c:	adrp	x26, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 710:	adrp	x25, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 714:	add	x2, x2, #0x0
 718:	add	x27, x27, #0x0
 71c:	add	x26, x26, #0x0
 720:	add	x25, x25, #0x0
 724:	mov	x7, #0x0                   	// #0
 728:	ldrb	w4, [x28, x7]
 72c:	str	w4, [sp, #104]
 730:	stp	x7, x2, [sp, #112]
 734:	bl	3c <_ZN11__sanitizer15ColorizeReportsEv>
 738:	ands	w0, w0, #0xff
 73c:	ldr	x2, [sp, #120]
 740:	mov	x1, x25
 744:	ldr	w4, [sp, #104]
 748:	csel	x3, x27, x2, ne  // ne = any
 74c:	cmp	w0, #0x0
 750:	csel	x6, x26, x2, ne  // ne = any
 754:	and	w5, w4, #0xf
 758:	mov	x0, x22
 75c:	lsr	w4, w4, #4
 760:	str	x2, [sp, #104]
 764:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 768:	ldp	x2, x7, [sp, #104]
 76c:	add	x7, x7, #0x1
 770:	cmp	x7, #0x10
 774:	b.ne	728 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x324>  // b.any
 778:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 77c:	add	x1, x1, #0x0
 780:	mov	x0, x22
 784:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 788:	ldr	x1, [sp, #160]
 78c:	add	x0, x23, #0x0
 790:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 794:	ldp	x0, x1, [sp, #160]
 798:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 79c:	ldr	x0, [sp, #96]
 7a0:	ldr	x0, [x0]
 7a4:	ldrb	w0, [x0, #233]
 7a8:	cbz	w0, 7b4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3b0>
 7ac:	ldr	x0, [x19, #8]
 7b0:	bl	0 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>
 7b4:	ldr	x21, [x21]
 7b8:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 7bc:	add	x0, x0, #0x0
 7c0:	ldr	x1, [x21]
 7c4:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 7c8:	mov	x1, x20
 7cc:	mov	x0, x24
 7d0:	mov	x2, #0x0                   	// #0
 7d4:	bl	250 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
 7d8:	ldp	x0, x1, [sp, #128]
 7dc:	b	4fc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xf8>
 7e0:	adrp	x1, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 7e4:	add	x1, x1, #0x0
 7e8:	b	780 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x37c>

00000000000007ec <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>:
 7ec:	stp	x19, x20, [sp, #-112]!
 7f0:	mov	x19, x1
 7f4:	mov	w20, w2
 7f8:	stp	x21, x22, [sp, #16]
 7fc:	mov	x22, x4
 800:	mov	x21, x3
 804:	stp	x23, x30, [sp, #32]
 808:	mov	x23, x0
 80c:	bl	98 <_ZN11__sanitizer23StartReportDeadlySignalEv>
 810:	add	x0, sp, #0x30
 814:	bl	d0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
 818:	stp	x23, x19, [sp, #56]
 81c:	add	x19, sp, #0x38
 820:	mov	x0, x19
 824:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
 828:	str	x0, [sp, #72]
 82c:	mov	x0, x19
 830:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
 834:	strb	w0, [sp, #104]
 838:	mov	x0, x19
 83c:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
 840:	str	w0, [sp, #108]
 844:	mov	x0, x19
 848:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
 84c:	mov	x3, x22
 850:	mov	x2, x21
 854:	mov	w1, w20
 858:	mov	x0, x19
 85c:	bl	404 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>
 860:	adrp	x0, 0 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>
 864:	add	x0, x0, #0x0
 868:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 86c:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	w20, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	cmp	w20, #0x9
  18:	b.gt	48 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x48>
  1c:	ldrb	w0, [x19]
  20:	tst	w0, #0xff
  24:	b.ne	40 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x40>  // b.any
  28:	ldxrb	w0, [x19]
  2c:	stxrb	w1, w21, [x19]
  30:	cbnz	w1, 28 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x28>
  34:	dmb	ish
  38:	tst	w0, #0xff
  3c:	b.eq	50 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x50>  // b.none
  40:	add	w20, w20, #0x1
  44:	b	14 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x14>
  48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  4c:	b	1c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x1c>
  50:	ldp	x21, x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex4LockEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex4LockEv>:
   0:	mov	x1, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldxrb	w2, [x1]
   c:	stxrb	w4, w3, [x1]
  10:	cbnz	w4, 8 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x8>
  14:	dmb	ish
  18:	tst	w2, #0xff
  1c:	b.eq	24 <_ZN11__sanitizer15StaticSpinMutex4LockEv+0x24>  // b.none
  20:	b	0 <_ZN11__sanitizer15StaticSpinMutex4LockEv>
  24:	ret

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer9RoundUpToEmm:

0000000000000000 <_ZN11__sanitizer9RoundUpToEmm>:
   0:	sub	x2, x1, #0x1
   4:	tst	x2, x1
   8:	b.eq	20 <_ZN11__sanitizer9RoundUpToEmm+0x20>  // b.none
   c:	adrp	x0, 0 <_ZN11__sanitizer9RoundUpToEmm>
  10:	add	x0, x0, #0x0
  14:	str	x30, [sp, #-16]!
  18:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  1c:	bl	0 <_ZN11__sanitizer3DieEv>
  20:	sub	x0, x0, #0x1
  24:	add	x0, x0, x1
  28:	neg	x1, x1
  2c:	and	x0, x0, x1
  30:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	stp	x21, x30, [sp, #16]
   8:	cbnz	x1, 2c <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x2c>
   c:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  10:	add	x2, x2, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x1fc                 	// #508
  20:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  24:	add	x0, x0, #0x0
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x3, [x0, #16]
  30:	mov	x19, x0
  34:	mov	x20, x1
  38:	cmp	x1, x3
  3c:	b.cs	54 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x54>  // b.hs, b.nlast
  40:	mov	x4, x1
  44:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  48:	mov	w1, #0x1fd                 	// #509
  4c:	add	x2, x2, #0x0
  50:	b	20 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm+0x20>
  54:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  58:	mov	x1, x0
  5c:	mov	x0, x20
  60:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  64:	mov	w2, #0x0                   	// #0
  68:	mov	x20, x0
  6c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorIcE7ReallocEm>
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  78:	mov	x21, x0
  7c:	ldr	x1, [x19]
  80:	ldr	x2, [x19, #16]
  84:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  88:	ldp	x0, x1, [x19]
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	stp	x21, x20, [x19]
  94:	ldp	x21, x30, [sp, #16]
  98:	ldp	x19, x20, [sp], #32
  9c:	ret

Disassembly of section .text._ZN11__sanitizer20InternalScopedStringC2Em:

0000000000000000 <_ZN11__sanitizer20InternalScopedStringC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>
  1c:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	5c <_ZN11__sanitizer20InternalScopedStringC1Em+0x5c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	cmp	x20, x0
  34:	b.ls	44 <_ZN11__sanitizer20InternalScopedStringC1Em+0x44>  // b.plast
  38:	mov	x1, x20
  3c:	mov	x0, x19
  40:	bl	0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  44:	ldr	x3, [x19]
  48:	mov	w1, #0x0                   	// #0
  4c:	ldr	x0, [x19, #16]
  50:	sub	x2, x20, x0
  54:	add	x0, x3, x0
  58:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  5c:	stp	x20, xzr, [x19, #16]
  60:	cbnz	x20, 84 <_ZN11__sanitizer20InternalScopedStringC1Em+0x84>
  64:	adrp	x2, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  68:	adrp	x0, 0 <_ZN11__sanitizer20InternalScopedStringC1Em>
  6c:	add	x2, x2, #0x0
  70:	add	x0, x0, #0x0
  74:	mov	x4, #0x0                   	// #0
  78:	mov	x3, #0x0                   	// #0
  7c:	mov	w1, #0x1b6                 	// #438
  80:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  84:	ldr	x0, [x19]
  88:	strb	wzr, [x0]
  8c:	ldr	x30, [sp, #16]
  90:	ldp	x19, x20, [sp], #32
  94:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	str	x30, [sp, #32]
   c:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm+0x30>
  10:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  14:	add	x2, x2, #0x0
  18:	mov	x4, #0x0                   	// #0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x19, x0
  38:	mov	x20, x1
  3c:	cmp	x1, x3
  40:	b.cs	58 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm+0x58>  // b.hs, b.nlast
  44:	mov	x4, x1
  48:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  4c:	mov	w1, #0x1fd                 	// #509
  50:	add	x2, x2, #0x0
  54:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm+0x24>
  58:	mov	x22, #0x818                 	// #2072
  5c:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  60:	mov	x1, x0
  64:	mul	x0, x20, x22
  68:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  6c:	mov	x20, x0
  70:	mov	w2, #0x0                   	// #0
  74:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_18BufferedStackTraceEE7ReallocEm>
  78:	add	x1, x1, #0x0
  7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  80:	ldr	x2, [x19, #16]
  84:	mov	x21, x0
  88:	ldr	x1, [x19]
  8c:	mul	x2, x2, x22
  90:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  94:	ldp	x0, x1, [x19]
  98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  9c:	ldr	x30, [sp, #32]
  a0:	stp	x21, x20, [x19]
  a4:	ldp	x21, x22, [sp, #16]
  a8:	ldp	x19, x20, [sp], #48
  ac:	ret

Disassembly of section .text._ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC2Em:

0000000000000000 <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x1
   c:	str	x30, [sp, #16]
  10:	stp	xzr, xzr, [x0]
  14:	str	xzr, [x0, #16]
  18:	cbz	x1, 6c <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em+0x6c>
  1c:	bl	0 <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em>
  20:	ldr	x0, [x19, #16]
  24:	cmp	x20, x0
  28:	b.ls	6c <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em+0x6c>  // b.plast
  2c:	ldr	x0, [x19, #8]
  30:	mov	x1, #0x818                 	// #2072
  34:	udiv	x0, x0, x1
  38:	cmp	x20, x0
  3c:	b.ls	4c <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em+0x4c>  // b.plast
  40:	mov	x1, x20
  44:	mov	x0, x19
  48:	bl	0 <_ZN11__sanitizer18InternalMmapVectorINS_18BufferedStackTraceEEC1Em>
  4c:	ldr	x0, [x19, #16]
  50:	mov	x3, #0x818                 	// #2072
  54:	ldr	x4, [x19]
  58:	sub	x2, x20, x0
  5c:	mov	w1, #0x0                   	// #0
  60:	mul	x2, x2, x3
  64:	madd	x0, x0, x3, x4
  68:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  6c:	ldr	x30, [sp, #16]
  70:	str	x20, [x19, #16]
  74:	ldp	x19, x20, [sp], #32
  78:	ret

sanitizer_symbolizer_win.o:     file format elf64-littleaarch64


sanitizer_termination.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer14AddDieCallbackEPFvvE>:
   0:	adrp	x2, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
   4:	add	x2, x2, #0x0
   8:	mov	x1, #0x0                   	// #0
   c:	ldr	x4, [x2, x1, lsl #3]
  10:	mov	w3, w1
  14:	cbnz	x4, 24 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x24>
  18:	str	x0, [x2, w3, sxtw #3]
  1c:	mov	w0, #0x1                   	// #1
  20:	ret
  24:	add	x1, x1, #0x1
  28:	cmp	x1, #0x5
  2c:	b.ne	c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0xc>  // b.any
  30:	mov	w0, #0x0                   	// #0
  34:	b	20 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x20>

0000000000000038 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>:
  38:	stp	x19, x30, [sp, #-16]!
  3c:	adrp	x19, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  40:	add	x19, x19, #0x0
  44:	mov	x2, #0x0                   	// #0
  48:	ldr	x4, [x19, x2, lsl #3]
  4c:	mov	w3, w2
  50:	add	w1, w2, #0x1
  54:	cmp	x4, x0
  58:	b.ne	84 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x4c>  // b.any
  5c:	mov	w2, #0x4                   	// #4
  60:	sub	w2, w2, w3
  64:	add	x1, x19, w1, sxtw #3
  68:	add	x0, x19, w3, sxtw #3
  6c:	sbfiz	x2, x2, #3, #32
  70:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
  74:	mov	w0, #0x1                   	// #1
  78:	str	xzr, [x19, #32]
  7c:	ldp	x19, x30, [sp], #16
  80:	ret
  84:	add	x2, x2, #0x1
  88:	cmp	x2, #0x5
  8c:	b.ne	48 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x10>  // b.any
  90:	mov	w0, #0x0                   	// #0
  94:	b	7c <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x44>

0000000000000098 <_ZN11__sanitizer18SetUserDieCallbackEPFvvE>:
  98:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  9c:	str	x0, [x1]
  a0:	ret

00000000000000a4 <_ZN11__sanitizer3DieEv>:
  a4:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  a8:	add	x1, x0, #0x0
  ac:	stp	x19, x20, [sp, #-32]!
  b0:	mov	x19, x0
  b4:	ldr	x1, [x1, #40]
  b8:	str	x30, [sp, #16]
  bc:	cbz	x1, c4 <_ZN11__sanitizer3DieEv+0x20>
  c0:	blr	x1
  c4:	add	x19, x19, #0x0
  c8:	mov	x20, #0x4                   	// #4
  cc:	ldr	x0, [x19, x20, lsl #3]
  d0:	cbz	x0, d8 <_ZN11__sanitizer3DieEv+0x34>
  d4:	blr	x0
  d8:	sub	x20, x20, #0x1
  dc:	cmn	x20, #0x1
  e0:	b.ne	cc <_ZN11__sanitizer3DieEv+0x28>  // b.any
  e4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  e8:	ldr	x0, [x0]
  ec:	ldrb	w1, [x0, #220]
  f0:	cbz	w1, f8 <_ZN11__sanitizer3DieEv+0x54>
  f4:	bl	0 <_ZN11__sanitizer5AbortEv>
  f8:	ldr	w0, [x0, #216]
  fc:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000000100 <_ZN11__sanitizer22SetCheckFailedCallbackEPFvPKciS1_yyE>:
 100:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 104:	str	x0, [x1]
 108:	ret

000000000000010c <_ZN11__sanitizer11CheckFailedEPKciS1_yy>:
 10c:	stp	x19, x20, [sp, #-48]!
 110:	adrp	x6, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 114:	add	x6, x6, #0x0
 118:	mov	x19, x0
 11c:	mov	w20, w1
 120:	add	x5, x6, #0x38
 124:	stp	x21, x22, [sp, #16]
 128:	mov	x21, x2
 12c:	mov	x22, x3
 130:	stp	x23, x30, [sp, #32]
 134:	mov	x23, x4
 138:	ldxr	w7, [x5]
 13c:	add	w8, w7, #0x1
 140:	stlxr	w9, w8, [x5]
 144:	cbnz	w9, 138 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x2c>
 148:	dmb	ish
 14c:	cmp	w7, #0xa
 150:	b.ls	160 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x54>  // b.plast
 154:	mov	w0, #0x2                   	// #2
 158:	bl	0 <_ZN11__sanitizer15SleepForSecondsEi>
 15c:	brk	#0x3e8
 160:	ldr	x5, [x6, #48]
 164:	cbz	x5, 16c <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x60>
 168:	blr	x5
 16c:	mov	x5, x23
 170:	mov	x4, x22
 174:	mov	x3, x21
 178:	mov	w2, w20
 17c:	mov	x1, x19
 180:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 184:	add	x0, x0, #0x0
 188:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 18c:	bl	a4 <_ZN11__sanitizer3DieEv>

0000000000000190 <__sanitizer_set_death_callback>:
 190:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 194:	str	x0, [x1]
 198:	ret

sanitizer_thread_registry.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>:
   0:	ldr	x2, [x0, #32]
   4:	cmp	x1, x2
   8:	b.ne	1c <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv+0x1c>  // b.any
   c:	ldr	w0, [x0, #112]
  10:	tst	w0, #0xfffffffb
  14:	cset	w0, ne  // ne = any
  18:	ret
  1c:	mov	w0, #0x0                   	// #0
  20:	b	18 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv+0x18>

0000000000000024 <_ZN11__sanitizer17ThreadContextBaseC1Ej>:
  24:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  28:	add	x2, x2, #0x0
  2c:	str	x2, [x0]
  30:	str	w1, [x0, #8]
  34:	str	xzr, [x0, #16]
  38:	str	wzr, [x0, #24]
  3c:	stp	xzr, xzr, [x0, #32]
  40:	strb	wzr, [x0, #48]
  44:	str	wzr, [x0, #112]
  48:	strh	wzr, [x0, #116]
  4c:	str	wzr, [x0, #120]
  50:	str	xzr, [x0, #128]
  54:	dmb	ish
  58:	str	wzr, [x0, #136]
  5c:	ret

0000000000000060 <_ZN11__sanitizer17ThreadContextBaseD1Ev>:
  60:	str	x30, [sp, #-16]!
  64:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  68:	add	x1, x1, #0x0
  6c:	str	x1, [x0]
  70:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  74:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  78:	add	x2, x2, #0x0
  7c:	add	x0, x0, #0x0
  80:	mov	x4, #0x0                   	// #0
  84:	mov	x3, #0x0                   	// #0
  88:	mov	w1, #0x1b                  	// #27
  8c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000090 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>:
  90:	strb	wzr, [x0, #48]
  94:	cbz	x1, b8 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc+0x28>
  98:	stp	x19, x30, [sp, #-16]!
  9c:	mov	x19, x0
  a0:	mov	x2, #0x40                  	// #64
  a4:	add	x0, x0, #0x30
  a8:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
  ac:	strb	wzr, [x19, #111]
  b0:	ldp	x19, x30, [sp], #16
  b4:	ret
  b8:	ret

00000000000000bc <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>:
  bc:	ldr	w2, [x0, #112]
  c0:	sub	w2, w2, #0x2
  c4:	cmp	w2, #0x1
  c8:	b.ls	f0 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x34>  // b.plast
  cc:	str	x30, [sp, #-16]!
  d0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  d4:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
  d8:	add	x2, x2, #0x0
  dc:	add	x0, x0, #0x0
  e0:	mov	x4, #0x0                   	// #0
  e4:	mov	x3, #0x0                   	// #0
  e8:	mov	w1, #0x27                  	// #39
  ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  f0:	ldr	x1, [x0]
  f4:	mov	w2, #0x4                   	// #4
  f8:	str	xzr, [x0, #40]
  fc:	str	w2, [x0, #112]
 100:	ldr	x1, [x1]
 104:	mov	x16, x1
 108:	br	x16

000000000000010c <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>:
 10c:	dmb	ish
 110:	mov	w1, #0x1                   	// #1
 114:	str	w1, [x0, #136]
 118:	ret

000000000000011c <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>:
 11c:	ldr	w0, [x0, #136]
 120:	dmb	ish
 124:	cmp	w0, #0x0
 128:	cset	w0, ne  // ne = any
 12c:	ret

0000000000000130 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>:
 130:	ldrb	w3, [x0, #116]
 134:	str	x30, [sp, #-16]!
 138:	cbz	w3, 15c <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x2c>
 13c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 140:	add	x2, x2, #0x0
 144:	mov	x4, #0x1                   	// #1
 148:	mov	x3, #0x0                   	// #0
 14c:	mov	w1, #0x38                  	// #56
 150:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 154:	add	x0, x0, #0x0
 158:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 15c:	ldr	w4, [x0, #112]
 160:	cmp	x4, #0x3
 164:	b.eq	17c <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x4c>  // b.none
 168:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 16c:	mov	x3, #0x3                   	// #3
 170:	add	x2, x2, #0x0
 174:	mov	w1, #0x39                  	// #57
 178:	b	150 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x20>
 17c:	ldr	x2, [x0]
 180:	mov	w3, #0x4                   	// #4
 184:	ldr	x30, [sp], #16
 188:	str	xzr, [x0, #40]
 18c:	ldr	x2, [x2, #8]
 190:	str	w3, [x0, #112]
 194:	mov	x16, x2
 198:	br	x16

000000000000019c <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>:
 19c:	ldrb	w1, [x0, #116]
 1a0:	cbz	w1, 1b0 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x14>
 1a4:	ldr	w1, [x0, #112]
 1a8:	cmp	w1, #0x1
 1ac:	b.ne	1b8 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x1c>  // b.any
 1b0:	mov	w1, #0x3                   	// #3
 1b4:	str	w1, [x0, #112]
 1b8:	ldr	x1, [x0]
 1bc:	ldr	x1, [x1, #16]
 1c0:	mov	x16, x1
 1c4:	br	x16

00000000000001c8 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>:
 1c8:	str	x1, [x0, #32]
 1cc:	mov	w5, #0x2                   	// #2
 1d0:	ldr	x1, [x0]
 1d4:	strb	w2, [x0, #117]
 1d8:	str	w5, [x0, #112]
 1dc:	ldr	x2, [x1, #24]
 1e0:	mov	x1, x3
 1e4:	mov	x16, x2
 1e8:	br	x16

00000000000001ec <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>:
 1ec:	str	x1, [x0, #40]
 1f0:	mov	w6, #0x1                   	// #1
 1f4:	ldr	w1, [x0, #8]
 1f8:	str	x2, [x0, #16]
 1fc:	str	w6, [x0, #112]
 200:	strb	w3, [x0, #116]
 204:	cbz	w1, 20c <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x20>
 208:	str	w4, [x0, #120]
 20c:	ldr	x1, [x0]
 210:	ldr	x2, [x1, #32]
 214:	mov	x1, x5
 218:	mov	x16, x2
 21c:	br	x16

0000000000000220 <_ZN11__sanitizer17ThreadContextBase5ResetEv>:
 220:	strb	wzr, [x0, #48]
 224:	str	wzr, [x0, #112]
 228:	dmb	ish
 22c:	str	wzr, [x0, #136]
 230:	ldr	x1, [x0]
 234:	ldr	x1, [x1, #40]
 238:	mov	x16, x1
 23c:	br	x16

0000000000000240 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>:
 240:	stp	x19, x30, [sp, #-16]!
 244:	mov	x19, x0
 248:	add	x0, x0, #0x18
 24c:	str	x1, [x19]
 250:	stp	w2, w3, [x19, #8]
 254:	str	w4, [x19, #16]
 258:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 25c:	str	wzr, [x19, #112]
 260:	ldr	w0, [x19, #8]
 264:	mov	w2, #0x0                   	// #0
 268:	stp	xzr, xzr, [x19, #120]
 26c:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 270:	add	x1, x1, #0x0
 274:	stp	xzr, xzr, [x19, #136]
 278:	lsl	x0, x0, #3
 27c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 280:	stp	x0, xzr, [x19, #152]
 284:	stp	xzr, xzr, [x19, #168]
 288:	stp	xzr, xzr, [x19, #184]
 28c:	str	xzr, [x19, #200]
 290:	ldp	x19, x30, [sp], #16
 294:	ret

0000000000000298 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>:
 298:	stp	x19, x20, [sp, #-48]!
 29c:	mov	x19, x0
 2a0:	mov	w20, #0x0                   	// #0
 2a4:	add	x0, x0, #0x18
 2a8:	stp	x21, x22, [sp, #16]
 2ac:	mov	x21, x1
 2b0:	mov	x22, x2
 2b4:	str	x30, [sp, #32]
 2b8:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 2bc:	ldr	w0, [x19, #112]
 2c0:	cmp	w0, w20
 2c4:	b.ls	2e4 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x4c>  // b.plast
 2c8:	ldr	x0, [x19, #152]
 2cc:	ldr	x0, [x0, w20, uxtw #3]
 2d0:	cbz	x0, 2dc <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x44>
 2d4:	mov	x1, x22
 2d8:	blr	x21
 2dc:	add	w20, w20, #0x1
 2e0:	b	2bc <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x24>
 2e4:	ldp	x21, x22, [sp, #16]
 2e8:	ldr	x30, [sp, #32]
 2ec:	ldp	x19, x20, [sp], #48
 2f0:	ret

00000000000002f4 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>:
 2f4:	stp	x19, x20, [sp, #-48]!
 2f8:	mov	x19, x0
 2fc:	add	x0, x0, #0x18
 300:	stp	x21, x22, [sp, #16]
 304:	mov	w21, #0x0                   	// #0
 308:	mov	x22, x1
 30c:	stp	x23, x30, [sp, #32]
 310:	mov	x23, x2
 314:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 318:	ldr	w0, [x19, #112]
 31c:	cmp	w0, w21
 320:	b.ls	360 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x6c>  // b.plast
 324:	ldr	x0, [x19, #152]
 328:	ldr	x20, [x0, w21, uxtw #3]
 32c:	cbnz	x20, 338 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x44>
 330:	add	w21, w21, #0x1
 334:	b	318 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x24>
 338:	mov	x1, x23
 33c:	mov	x0, x20
 340:	blr	x22
 344:	tst	w0, #0xff
 348:	b.eq	330 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x3c>  // b.none
 34c:	mov	x0, x20
 350:	ldp	x21, x22, [sp, #16]
 354:	ldp	x23, x30, [sp, #32]
 358:	ldp	x19, x20, [sp], #48
 35c:	ret
 360:	mov	x20, #0x0                   	// #0
 364:	b	34c <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x58>

0000000000000368 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>:
 368:	mov	x2, x1
 36c:	adrp	x1, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 370:	add	x1, x1, #0x0
 374:	b	2f4 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>

0000000000000378 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_>:
 378:	stp	x19, x20, [sp, #-64]!
 37c:	mov	x19, x0
 380:	mov	x20, x3
 384:	add	x0, x0, #0x18
 388:	stp	x21, x22, [sp, #16]
 38c:	mov	x22, x1
 390:	mov	x21, x2
 394:	str	x30, [sp, #32]
 398:	str	x0, [sp, #56]
 39c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 3a0:	cbz	x22, 3ac <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x34>
 3a4:	ldr	w0, [x19, #112]
 3a8:	str	x0, [x22]
 3ac:	cbz	x21, 3b8 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x40>
 3b0:	ldr	x0, [x19, #144]
 3b4:	str	x0, [x21]
 3b8:	cbz	x20, 3c4 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x4c>
 3bc:	ldr	x0, [x19, #128]
 3c0:	str	x0, [x20]
 3c4:	add	x0, sp, #0x38
 3c8:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 3cc:	ldp	x21, x22, [sp, #16]
 3d0:	ldr	x30, [sp, #32]
 3d4:	ldp	x19, x20, [sp], #64
 3d8:	ret

00000000000003dc <_ZN11__sanitizer14ThreadRegistry18GetMaxAliveThreadsEv>:
 3dc:	stp	x19, x30, [sp, #-32]!
 3e0:	mov	x19, x0
 3e4:	add	x0, x0, #0x18
 3e8:	str	x0, [sp, #24]
 3ec:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 3f0:	ldr	x19, [x19, #136]
 3f4:	add	x0, sp, #0x18
 3f8:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 3fc:	mov	x0, x19
 400:	ldp	x19, x30, [sp], #32
 404:	ret

0000000000000408 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>:
 408:	stp	x19, x20, [sp, #-64]!
 40c:	mov	x19, x0
 410:	mov	w20, #0x0                   	// #0
 414:	add	x0, x0, #0x18
 418:	stp	x21, x22, [sp, #16]
 41c:	mov	x21, x1
 420:	mov	x22, x2
 424:	stp	x23, x30, [sp, #32]
 428:	str	x0, [sp, #56]
 42c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 430:	ldr	w0, [x19, #112]
 434:	cmp	w0, w20
 438:	b.ls	484 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x7c>  // b.plast
 43c:	ldr	x0, [x19, #152]
 440:	ldr	x23, [x0, w20, uxtw #3]
 444:	cbz	x23, 47c <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x74>
 448:	mov	x1, x22
 44c:	mov	x0, x23
 450:	blr	x21
 454:	tst	w0, #0xff
 458:	b.eq	47c <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x74>  // b.none
 45c:	ldr	w19, [x23, #8]
 460:	add	x0, sp, #0x38
 464:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 468:	mov	w0, w19
 46c:	ldp	x21, x22, [sp, #16]
 470:	ldp	x23, x30, [sp, #32]
 474:	ldp	x19, x20, [sp], #64
 478:	ret
 47c:	add	w20, w20, #0x1
 480:	b	430 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x28>
 484:	mov	w19, #0xffffffff            	// #-1
 488:	b	460 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x58>

000000000000048c <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc>:
 48c:	stp	x19, x20, [sp, #-48]!
 490:	mov	x19, x0
 494:	mov	w20, w1
 498:	add	x0, x0, #0x18
 49c:	stp	x21, x30, [sp, #16]
 4a0:	mov	x21, x2
 4a4:	str	x0, [sp, #40]
 4a8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 4ac:	ldr	w4, [x19, #112]
 4b0:	mov	w3, w20
 4b4:	cmp	x4, w20, uxtw
 4b8:	b.hi	4d4 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x48>  // b.pmore
 4bc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 4c0:	add	x2, x2, #0x0
 4c4:	mov	w1, #0xd7                  	// #215
 4c8:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 4cc:	add	x0, x0, #0x0
 4d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4d4:	ldr	x0, [x19, #152]
 4d8:	ldr	x0, [x0, x3, lsl #3]
 4dc:	cbnz	x0, 4f8 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x6c>
 4e0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 4e4:	mov	x4, #0x0                   	// #0
 4e8:	add	x2, x2, #0x0
 4ec:	mov	x3, #0x0                   	// #0
 4f0:	mov	w1, #0xd9                  	// #217
 4f4:	b	4c8 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x3c>
 4f8:	ldr	w4, [x0, #112]
 4fc:	cmp	x4, #0x2
 500:	b.eq	518 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x8c>  // b.none
 504:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 508:	mov	x3, #0x2                   	// #2
 50c:	add	x2, x2, #0x0
 510:	mov	w1, #0xda                  	// #218
 514:	b	4c8 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x3c>
 518:	mov	x1, x21
 51c:	bl	90 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>
 520:	add	x0, sp, #0x28
 524:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 528:	ldp	x21, x30, [sp, #16]
 52c:	ldp	x19, x20, [sp], #48
 530:	ret

0000000000000534 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc>:
 534:	stp	x19, x20, [sp, #-48]!
 538:	mov	x19, x0
 53c:	mov	x20, x1
 540:	add	x0, x0, #0x18
 544:	stp	x21, x30, [sp, #16]
 548:	mov	x21, x2
 54c:	str	x0, [sp, #40]
 550:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 554:	ldr	w1, [x19, #112]
 558:	mov	x3, #0x0                   	// #0
 55c:	cmp	w1, w3
 560:	b.ls	58c <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x58>  // b.plast
 564:	ldr	x0, [x19, #152]
 568:	ldr	x0, [x0, x3, lsl #3]
 56c:	cbz	x0, 5a0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x6c>
 570:	ldr	x2, [x0, #40]
 574:	cmp	x2, x20
 578:	b.ne	5a0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x6c>  // b.any
 57c:	ldr	w2, [x0, #112]
 580:	cbz	w2, 5a0 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x6c>
 584:	mov	x1, x21
 588:	bl	90 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>
 58c:	add	x0, sp, #0x28
 590:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 594:	ldp	x21, x30, [sp, #16]
 598:	ldp	x19, x20, [sp], #48
 59c:	ret
 5a0:	add	x3, x3, #0x1
 5a4:	b	55c <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x28>

00000000000005a8 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>:
 5a8:	stp	x19, x20, [sp, #-64]!
 5ac:	mov	x19, x0
 5b0:	mov	w20, w1
 5b4:	add	x0, x0, #0x18
 5b8:	stp	x21, x22, [sp, #16]
 5bc:	mov	x22, x4
 5c0:	mov	x21, x2
 5c4:	stp	x23, x30, [sp, #32]
 5c8:	and	w23, w3, #0xff
 5cc:	str	x0, [sp, #56]
 5d0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 5d4:	ldr	x0, [x19, #144]
 5d8:	mov	w3, w20
 5dc:	ldr	w4, [x19, #112]
 5e0:	add	x0, x0, #0x1
 5e4:	str	x0, [x19, #144]
 5e8:	cmp	x4, w20, uxtw
 5ec:	b.hi	608 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0x60>  // b.pmore
 5f0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 5f4:	add	x2, x2, #0x0
 5f8:	mov	w1, #0x134                 	// #308
 5fc:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 600:	add	x0, x0, #0x0
 604:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 608:	ldr	x0, [x19, #152]
 60c:	ldr	x0, [x0, x3, lsl #3]
 610:	cbnz	x0, 62c <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0x84>
 614:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 618:	mov	x4, #0x0                   	// #0
 61c:	add	x2, x2, #0x0
 620:	mov	x3, #0x0                   	// #0
 624:	mov	w1, #0x136                 	// #310
 628:	b	5fc <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0x54>
 62c:	ldr	w4, [x0, #112]
 630:	cmp	x4, #0x1
 634:	b.eq	64c <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xa4>  // b.none
 638:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 63c:	mov	x3, #0x1                   	// #1
 640:	add	x2, x2, #0x0
 644:	mov	w1, #0x137                 	// #311
 648:	b	5fc <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0x54>
 64c:	mov	x3, x22
 650:	mov	w2, w23
 654:	mov	x1, x21
 658:	bl	1c8 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>
 65c:	add	x0, sp, #0x38
 660:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 664:	ldp	x21, x22, [sp, #16]
 668:	ldp	x23, x30, [sp, #32]
 66c:	ldp	x19, x20, [sp], #64
 670:	ret

0000000000000674 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>:
 674:	stp	x19, x30, [sp, #-16]!
 678:	ldr	x1, [x0, #184]
 67c:	cbz	x1, 698 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x24>
 680:	add	x0, x0, #0xb8
 684:	ldr	x19, [x0, #8]
 688:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 68c:	mov	x0, x19
 690:	ldp	x19, x30, [sp], #16
 694:	ret
 698:	mov	x19, #0x0                   	// #0
 69c:	b	68c <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x18>

00000000000006a0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>:
 6a0:	stp	x19, x20, [sp, #-80]!
 6a4:	mov	x19, x0
 6a8:	add	x0, x0, #0x18
 6ac:	stp	x21, x22, [sp, #16]
 6b0:	mov	x21, x1
 6b4:	mov	w22, w3
 6b8:	stp	x23, x24, [sp, #32]
 6bc:	and	w24, w2, #0xff
 6c0:	mov	x23, x4
 6c4:	str	x30, [sp, #48]
 6c8:	str	x0, [sp, #72]
 6cc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 6d0:	mov	x0, x19
 6d4:	bl	674 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>
 6d8:	cbz	x0, 704 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x64>
 6dc:	ldr	w20, [x0, #8]
 6e0:	mov	x1, #0xffffffff            	// #4294967295
 6e4:	mov	w3, w20
 6e8:	cmp	x1, w20, uxtw
 6ec:	b.ne	770 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xd0>  // b.any
 6f0:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 6f4:	mov	x4, x3
 6f8:	add	x2, x2, #0x0
 6fc:	mov	w1, #0x9d                  	// #157
 700:	b	748 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xa8>
 704:	ldr	w2, [x19, #8]
 708:	ldr	w20, [x19, #112]
 70c:	cmp	w20, w2
 710:	b.cs	754 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xb4>  // b.hs, b.nlast
 714:	ldr	x1, [x19]
 718:	add	w0, w20, #0x1
 71c:	str	w0, [x19, #112]
 720:	mov	w0, w20
 724:	blr	x1
 728:	ldr	x1, [x19, #152]
 72c:	str	x0, [x1, w20, uxtw #3]
 730:	cbnz	x0, 6e0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x40>
 734:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 738:	add	x2, x2, #0x0
 73c:	mov	x4, #0x0                   	// #0
 740:	mov	x3, #0x0                   	// #0
 744:	mov	w1, #0x9c                  	// #156
 748:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 74c:	add	x0, x0, #0x0
 750:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 754:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 758:	ldr	x0, [x0]
 75c:	ldr	x1, [x0]
 760:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 764:	add	x0, x0, #0x0
 768:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 76c:	bl	0 <_ZN11__sanitizer3DieEv>
 770:	ldr	w4, [x19, #8]
 774:	cmp	x3, x4
 778:	b.cc	78c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xec>  // b.lo, b.ul, b.last
 77c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 780:	mov	w1, #0x9e                  	// #158
 784:	add	x2, x2, #0x0
 788:	b	748 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xa8>
 78c:	ldr	w3, [x0, #112]
 790:	cbz	x3, 7a8 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x108>
 794:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 798:	mov	x4, #0x0                   	// #0
 79c:	add	x2, x2, #0x0
 7a0:	mov	w1, #0x9f                  	// #159
 7a4:	b	748 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xa8>
 7a8:	ldp	x2, x1, [x19, #128]
 7ac:	add	x3, x2, #0x1
 7b0:	str	x3, [x19, #128]
 7b4:	cmp	x3, x1
 7b8:	b.ls	7dc <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x13c>  // b.plast
 7bc:	add	x4, x1, #0x1
 7c0:	str	x4, [x19, #136]
 7c4:	cmp	x2, x1
 7c8:	b.eq	7dc <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x13c>  // b.none
 7cc:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 7d0:	mov	w1, #0xa3                  	// #163
 7d4:	add	x2, x2, #0x0
 7d8:	b	748 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xa8>
 7dc:	ldr	x2, [x19, #120]
 7e0:	mov	x5, x23
 7e4:	mov	w4, w22
 7e8:	mov	w3, w24
 7ec:	add	x1, x2, #0x1
 7f0:	str	x1, [x19, #120]
 7f4:	mov	x1, x21
 7f8:	bl	1ec <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>
 7fc:	add	x0, sp, #0x48
 800:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 804:	mov	w0, w20
 808:	ldp	x21, x22, [sp, #16]
 80c:	ldp	x23, x24, [sp, #32]
 810:	ldr	x30, [sp, #48]
 814:	ldp	x19, x20, [sp], #80
 818:	ret

000000000000081c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>:
 81c:	stp	x19, x20, [sp, #-32]!
 820:	mov	x19, x0
 824:	ldr	w0, [x1, #8]
 828:	str	x30, [sp, #16]
 82c:	cbz	w0, 8e4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc8>
 830:	mov	x0, x19
 834:	ldr	x2, [x0, #160]!
 838:	str	xzr, [x1, #128]
 83c:	cbnz	x2, 88c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x70>
 840:	stp	x1, x1, [x0, #8]
 844:	mov	x1, #0x1                   	// #1
 848:	str	x1, [x19, #160]
 84c:	ldr	x2, [x19, #160]
 850:	ldr	w1, [x19, #12]
 854:	cmp	x2, x1
 858:	b.ls	8e4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc8>  // b.plast
 85c:	ldr	x20, [x19, #168]
 860:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 864:	ldr	w3, [x20, #112]
 868:	cmp	x3, #0x4
 86c:	b.eq	8a4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x88>  // b.none
 870:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 874:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 878:	add	x2, x2, #0x0
 87c:	add	x0, x0, #0x0
 880:	mov	x4, #0x4                   	// #4
 884:	mov	w1, #0x143                 	// #323
 888:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 88c:	ldr	x3, [x0, #16]
 890:	add	x2, x2, #0x1
 894:	str	x1, [x3, #128]
 898:	str	x1, [x0, #16]
 89c:	str	x2, [x19, #160]
 8a0:	b	84c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x30>
 8a4:	mov	x0, x20
 8a8:	bl	220 <_ZN11__sanitizer17ThreadContextBase5ResetEv>
 8ac:	ldr	w0, [x20, #24]
 8b0:	add	w0, w0, #0x1
 8b4:	str	w0, [x20, #24]
 8b8:	ldr	w1, [x19, #16]
 8bc:	cbz	w1, 8c8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xac>
 8c0:	cmp	w0, w1
 8c4:	b.cs	8e4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc8>  // b.hs, b.nlast
 8c8:	mov	x0, x19
 8cc:	ldr	x1, [x0, #184]!
 8d0:	str	xzr, [x20, #128]
 8d4:	cbnz	x1, 8f0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xd4>
 8d8:	stp	x20, x20, [x0, #8]
 8dc:	mov	x0, #0x1                   	// #1
 8e0:	str	x0, [x19, #184]
 8e4:	ldr	x30, [sp, #16]
 8e8:	ldp	x19, x20, [sp], #32
 8ec:	ret
 8f0:	ldr	x2, [x0, #16]
 8f4:	add	x1, x1, #0x1
 8f8:	str	x20, [x2, #128]
 8fc:	str	x20, [x0, #16]
 900:	str	x1, [x19, #184]
 904:	b	8e4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc8>

0000000000000908 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv>:
 908:	stp	x19, x20, [sp, #-64]!
 90c:	mov	x20, x0
 910:	mov	w19, w1
 914:	add	x0, x0, #0x18
 918:	stp	x21, x22, [sp, #16]
 91c:	mov	x21, x2
 920:	str	x30, [sp, #32]
 924:	str	x0, [sp, #56]
 928:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 92c:	ldr	w4, [x20, #112]
 930:	mov	w3, w19
 934:	cmp	x4, w19, uxtw
 938:	b.hi	954 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x4c>  // b.pmore
 93c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 940:	add	x2, x2, #0x0
 944:	mov	w1, #0xed                  	// #237
 948:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 94c:	add	x0, x0, #0x0
 950:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 954:	ldr	x0, [x20, #152]
 958:	ldr	x19, [x0, x3, lsl #3]
 95c:	cbnz	x19, 978 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>
 960:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 964:	mov	x4, #0x0                   	// #0
 968:	add	x2, x2, #0x0
 96c:	mov	x3, #0x0                   	// #0
 970:	mov	w1, #0xef                  	// #239
 974:	b	948 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x40>
 978:	ldr	w0, [x19, #112]
 97c:	add	x22, sp, #0x38
 980:	cbnz	w0, 9b4 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xac>
 984:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 988:	ldr	x0, [x0]
 98c:	ldr	x1, [x0]
 990:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 994:	add	x0, x0, #0x0
 998:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 99c:	mov	x0, x22
 9a0:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 9a4:	ldp	x21, x22, [sp, #16]
 9a8:	ldr	x30, [sp, #32]
 9ac:	ldp	x19, x20, [sp], #64
 9b0:	ret
 9b4:	ldr	x0, [x19]
 9b8:	mov	x1, x21
 9bc:	ldr	x2, [x0, #48]
 9c0:	mov	x0, x19
 9c4:	blr	x2
 9c8:	ldr	w0, [x19, #112]
 9cc:	cmp	w0, #0x3
 9d0:	b.ne	9ec <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xe4>  // b.any
 9d4:	mov	x0, x19
 9d8:	bl	bc <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 9dc:	mov	x1, x19
 9e0:	mov	x0, x20
 9e4:	bl	81c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 9e8:	b	99c <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x94>
 9ec:	mov	w0, #0x1                   	// #1
 9f0:	strb	w0, [x19, #116]
 9f4:	b	99c <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x94>

00000000000009f8 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>:
 9f8:	stp	x19, x20, [sp, #-96]!
 9fc:	mov	x19, x0
 a00:	stp	x21, x22, [sp, #16]
 a04:	add	x22, x0, #0x18
 a08:	stp	x23, x24, [sp, #32]
 a0c:	mov	x23, x2
 a10:	add	x24, sp, #0x58
 a14:	stp	x25, x26, [sp, #48]
 a18:	mov	w25, w1
 a1c:	ubfiz	x26, x1, #3, #32
 a20:	str	x30, [sp, #64]
 a24:	mov	x0, x22
 a28:	str	x22, [sp, #88]
 a2c:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 a30:	ldr	w4, [x19, #112]
 a34:	cmp	x25, x4
 a38:	b.cc	a58 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x60>  // b.lo, b.ul, b.last
 a3c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a40:	mov	x3, x25
 a44:	add	x2, x2, #0x0
 a48:	mov	w1, #0x102                 	// #258
 a4c:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a50:	add	x0, x0, #0x0
 a54:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a58:	ldr	x0, [x19, #152]
 a5c:	ldr	x20, [x0, x26]
 a60:	cbnz	x20, a7c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x84>
 a64:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a68:	mov	x4, #0x0                   	// #0
 a6c:	add	x2, x2, #0x0
 a70:	mov	x3, #0x0                   	// #0
 a74:	mov	w1, #0x104                 	// #260
 a78:	b	a4c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x54>
 a7c:	ldr	w0, [x20, #112]
 a80:	cbnz	w0, abc <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xc4>
 a84:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 a88:	ldr	x0, [x0]
 a8c:	ldr	x1, [x0]
 a90:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 a94:	add	x0, x0, #0x0
 a98:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 a9c:	mov	x0, x24
 aa0:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 aa4:	ldp	x21, x22, [sp, #16]
 aa8:	ldp	x23, x24, [sp, #32]
 aac:	ldp	x25, x26, [sp, #48]
 ab0:	ldr	x30, [sp, #64]
 ab4:	ldp	x19, x20, [sp], #96
 ab8:	ret
 abc:	mov	x0, x20
 ac0:	bl	11c <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>
 ac4:	ands	w21, w0, #0xff
 ac8:	b.eq	ae4 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xec>  // b.none
 acc:	mov	x1, x23
 ad0:	mov	x0, x20
 ad4:	bl	130 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>
 ad8:	mov	x1, x20
 adc:	mov	x0, x19
 ae0:	bl	81c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 ae4:	mov	x0, x24
 ae8:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 aec:	cbnz	w21, aa4 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xac>
 af0:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 af4:	b	a24 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x2c>

0000000000000af8 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>:
 af8:	stp	x19, x20, [sp, #-48]!
 afc:	mov	x19, x0
 b00:	mov	w20, w1
 b04:	add	x0, x0, #0x18
 b08:	stp	x21, x30, [sp, #16]
 b0c:	str	x0, [sp, #40]
 b10:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
 b14:	ldr	x0, [x19, #128]
 b18:	cbnz	x0, b3c <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x44>
 b1c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b20:	add	x2, x2, #0x0
 b24:	mov	x4, #0x0                   	// #0
 b28:	mov	x3, #0x0                   	// #0
 b2c:	mov	w1, #0x11a                 	// #282
 b30:	adrp	x0, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b34:	add	x0, x0, #0x0
 b38:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b3c:	ldr	w4, [x19, #112]
 b40:	sub	x0, x0, #0x1
 b44:	str	x0, [x19, #128]
 b48:	mov	w3, w20
 b4c:	cmp	x4, w20, uxtw
 b50:	b.hi	b64 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x6c>  // b.pmore
 b54:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b58:	mov	w1, #0x11c                 	// #284
 b5c:	add	x2, x2, #0x0
 b60:	b	b30 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x38>
 b64:	ldr	x0, [x19, #152]
 b68:	ldr	x20, [x0, x3, lsl #3]
 b6c:	cbnz	x20, b88 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x90>
 b70:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 b74:	mov	x4, #0x0                   	// #0
 b78:	add	x2, x2, #0x0
 b7c:	mov	x3, #0x0                   	// #0
 b80:	mov	w1, #0x11e                 	// #286
 b84:	b	b30 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x38>
 b88:	ldr	w0, [x20, #112]
 b8c:	cmp	w0, #0x2
 b90:	b.ne	bfc <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x104>  // b.any
 b94:	ldr	x0, [x19, #144]
 b98:	cbnz	x0, bb4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xbc>
 b9c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 ba0:	mov	x4, #0x0                   	// #0
 ba4:	add	x2, x2, #0x0
 ba8:	mov	x3, #0x0                   	// #0
 bac:	mov	w1, #0x121                 	// #289
 bb0:	b	b30 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x38>
 bb4:	ldrb	w21, [x20, #116]
 bb8:	sub	x0, x0, #0x1
 bbc:	str	x0, [x19, #144]
 bc0:	mov	x0, x20
 bc4:	bl	19c <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>
 bc8:	cbz	w21, be0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xe8>
 bcc:	mov	x0, x20
 bd0:	bl	bc <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>
 bd4:	mov	x1, x20
 bd8:	mov	x0, x19
 bdc:	bl	81c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>
 be0:	mov	x0, x20
 be4:	bl	10c <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>
 be8:	add	x0, sp, #0x28
 bec:	bl	0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 bf0:	ldp	x21, x30, [sp, #16]
 bf4:	ldp	x19, x20, [sp], #48
 bf8:	ret
 bfc:	mov	w21, #0x1                   	// #1
 c00:	mov	w3, w0
 c04:	cmp	w0, w21
 c08:	b.eq	bc0 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xc8>  // b.none
 c0c:	adrp	x2, 0 <_ZN11__sanitizerL31FindThreadContextByOsIdCallbackEPNS_17ThreadContextBaseEPv>
 c10:	mov	x4, #0x1                   	// #1
 c14:	add	x2, x2, #0x0
 c18:	mov	w1, #0x125                 	// #293
 c1c:	b	b30 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x38>

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnFinishedEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnFinishedEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnStartedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnStartedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17GenericScopedLockINS_13BlockingMutexEED2Ev:

0000000000000000 <_ZN11__sanitizer17GenericScopedLockINS_13BlockingMutexEED1Ev>:
   0:	ldr	x0, [x0]
   4:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

Disassembly of section .text._ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv:

0000000000000000 <_ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv>:
   0:	ldr	x1, [x0]
   4:	cbnz	x1, 2c <_ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv+0x2c>
   8:	str	x30, [sp, #-16]!
   c:	adrp	x2, 0 <_ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv>
  10:	adrp	x0, 0 <_ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv>
  14:	add	x2, x2, #0x0
  18:	add	x0, x0, #0x0
  1c:	mov	x4, #0x0                   	// #0
  20:	mov	x3, #0x0                   	// #0
  24:	mov	w1, #0x40                  	// #64
  28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  2c:	ldr	x2, [x0, #8]
  30:	ldr	x2, [x2, #128]
  34:	str	x2, [x0, #8]
  38:	cbnz	x2, 40 <_ZN11__sanitizer13IntrusiveListINS_17ThreadContextBaseEE9pop_frontEv+0x40>
  3c:	str	xzr, [x0, #16]
  40:	sub	x1, x1, #0x1
  44:	str	x1, [x0]
  48:	ret

sanitizer_tls_get_addr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
   c:	mov	x20, x1
  10:	ldr	x0, [x0]
  14:	ldr	w0, [x0]
  18:	str	x30, [sp, #16]
  1c:	sxtw	x0, w0
  20:	cmp	x0, #0x1
  24:	b.ls	3c <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0+0x3c>  // b.plast
  28:	mov	x2, x1
  2c:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
  30:	mov	x1, x19
  34:	add	x0, x0, #0x0
  38:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  3c:	mov	x0, x19
  40:	lsl	x1, x20, #4
  44:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  48:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
  4c:	add	x0, x0, #0x0
  50:	ldxr	x1, [x0]
  54:	sub	x1, x1, #0x1
  58:	stlxr	w2, x1, [x0]
  5c:	cbnz	w2, 50 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0+0x50>
  60:	dmb	ish
  64:	ldr	x30, [sp, #16]
  68:	ldp	x19, x20, [sp], #32
  6c:	ret

0000000000000070 <_ZN11__sanitizer12DTLS_DestroyEv>:
  70:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  74:	ldr	x0, [x0]
  78:	ldrb	w0, [x0, #121]
  7c:	cbz	w0, f0 <_ZN11__sanitizer12DTLS_DestroyEv+0x80>
  80:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
  84:	stp	x19, x20, [sp, #-32]!
  88:	adrp	x19, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
  8c:	ldr	x19, [x19]
  90:	ldr	x0, [x0]
  94:	mrs	x20, tpidr_el0
  98:	ldr	w0, [x0]
  9c:	str	x30, [sp, #16]
  a0:	sxtw	x0, w0
  a4:	cmp	x0, #0x1
  a8:	b.ls	c0 <_ZN11__sanitizer12DTLS_DestroyEv+0x50>  // b.plast
  ac:	ldr	x2, [x20, x19]
  b0:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
  b4:	add	x1, x20, x19
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  c0:	ldr	x1, [x20, x19]
  c4:	mov	x2, #0xffffffffffffffff    	// #-1
  c8:	str	x2, [x20, x19]
  cc:	add	x0, x20, x19
  d0:	cbz	x1, e4 <_ZN11__sanitizer12DTLS_DestroyEv+0x74>
  d4:	ldr	x30, [sp, #16]
  d8:	ldp	x19, x20, [sp], #32
  dc:	ldr	x0, [x0, #8]
  e0:	b	0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
  e4:	ldr	x30, [sp, #16]
  e8:	ldp	x19, x20, [sp], #32
  ec:	ret
  f0:	ret

00000000000000f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm>:
  f4:	stp	x19, x20, [sp, #-128]!
  f8:	stp	x23, x24, [sp, #32]
  fc:	mov	x24, x0
 100:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 104:	stp	x21, x22, [sp, #16]
 108:	ldr	x0, [x0]
 10c:	stp	x25, x26, [sp, #48]
 110:	stp	x27, x28, [sp, #64]
 114:	ldrb	w0, [x0, #121]
 118:	str	x30, [sp, #80]
 11c:	cbnz	w0, 140 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x4c>
 120:	mov	x0, #0x0                   	// #0
 124:	ldp	x21, x22, [sp, #16]
 128:	ldp	x23, x24, [sp, #32]
 12c:	ldp	x25, x26, [sp, #48]
 130:	ldp	x27, x28, [sp, #64]
 134:	ldr	x30, [sp, #80]
 138:	ldp	x19, x20, [sp], #128
 13c:	ret
 140:	adrp	x23, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 144:	ldr	x23, [x23]
 148:	mrs	x20, tpidr_el0
 14c:	ldr	x0, [x20, x23]
 150:	cmn	x0, #0x1
 154:	b.eq	120 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2c>  // b.none
 158:	ldr	x21, [x24]
 15c:	mov	x26, x3
 160:	mov	x25, x1
 164:	mov	x27, x2
 168:	add	x3, x21, #0x1
 16c:	cmp	x0, x3
 170:	b.cs	2b4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1c0>  // b.hs, b.nlast
 174:	tst	x3, x21
 178:	b.eq	1d8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xe4>  // b.none
 17c:	clz	x1, x3
 180:	mov	w4, #0x3f                  	// #63
 184:	sub	w1, w4, w1
 188:	mov	x4, #0x1                   	// #1
 18c:	add	w0, w1, #0x1
 190:	lsl	x0, x4, x0
 194:	cmp	x3, x0
 198:	b.cc	1b8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xc4>  // b.lo, b.ul, b.last
 19c:	adrp	x2, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 1a0:	mov	x4, x0
 1a4:	add	x2, x2, #0x0
 1a8:	mov	w1, #0x17b                 	// #379
 1ac:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 1b0:	add	x0, x0, #0x0
 1b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1b8:	lsl	x4, x4, x1
 1bc:	cmp	x3, x4
 1c0:	b.hi	1d4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xe0>  // b.pmore
 1c4:	adrp	x2, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 1c8:	mov	w1, #0x17c                 	// #380
 1cc:	add	x2, x2, #0x0
 1d0:	b	1ac <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xb8>
 1d4:	mov	x3, x0
 1d8:	cmp	x3, #0x100
 1dc:	mov	x19, #0x100                 	// #256
 1e0:	csel	x19, x3, x19, cs  // cs = hs, nlast
 1e4:	mov	w2, #0x0                   	// #0
 1e8:	adrp	x1, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 1ec:	add	x1, x1, #0x0
 1f0:	lsl	x0, x19, #4
 1f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1f8:	adrp	x1, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 1fc:	mov	x22, x0
 200:	add	x1, x1, #0x0
 204:	ldxr	x28, [x1]
 208:	add	x0, x28, #0x1
 20c:	stlxr	w2, x0, [x1]
 210:	cbnz	w2, 204 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x110>
 214:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 218:	dmb	ish
 21c:	ldr	x0, [x0]
 220:	ldr	w0, [x0]
 224:	sxtw	x0, w0
 228:	cmp	x0, #0x1
 22c:	b.ls	244 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x150>  // b.plast
 230:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 234:	mov	x2, x28
 238:	add	x1, x20, x23
 23c:	add	x0, x0, #0x0
 240:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 244:	mov	x0, #0xfffff               	// #1048575
 248:	cmp	x28, x0
 24c:	b.ls	270 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x17c>  // b.plast
 250:	adrp	x2, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 254:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 258:	mov	x3, x28
 25c:	add	x2, x2, #0x0
 260:	add	x0, x0, #0x0
 264:	mov	x4, #0x100000              	// #1048576
 268:	mov	w1, #0x3c                  	// #60
 26c:	b	1b4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xc0>
 270:	ldr	x28, [x20, x23]
 274:	add	x0, x20, x23
 278:	ldr	x3, [x0, #8]
 27c:	cbz	x28, 298 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1a4>
 280:	mov	x1, x3
 284:	lsl	x2, x28, #4
 288:	mov	x0, x22
 28c:	str	x3, [sp, #104]
 290:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 294:	ldr	x3, [sp, #104]
 298:	add	x0, x20, x23
 29c:	str	x19, [x20, x23]
 2a0:	str	x22, [x0, #8]
 2a4:	cbz	x28, 2b4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1c0>
 2a8:	mov	x1, x28
 2ac:	mov	x0, x3
 2b0:	bl	0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 2b4:	add	x0, x20, x23
 2b8:	lsl	x21, x21, #4
 2bc:	ldr	x0, [x0, #8]
 2c0:	ldr	x22, [x0, x21]
 2c4:	cbnz	x22, 120 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2c>
 2c8:	adrp	x19, 0 <_ZN11__sanitizer17current_verbosityE>
 2cc:	ldr	x3, [x24, #8]
 2d0:	ldr	x0, [x19]
 2d4:	sub	x5, x25, x3
 2d8:	str	x5, [sp, #120]
 2dc:	ldr	w0, [x0]
 2e0:	sxtw	x0, w0
 2e4:	cmp	x0, #0x1
 2e8:	b.ls	310 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x21c>  // b.plast
 2ec:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 2f0:	add	x6, sp, #0x78
 2f4:	ldr	x2, [x24]
 2f8:	mov	x4, x25
 2fc:	ldr	x7, [x0]
 300:	mov	x1, x24
 304:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 308:	add	x0, x0, #0x0
 30c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 310:	add	x2, x20, x23
 314:	ldr	x0, [sp, #120]
 318:	ldr	x1, [x2, #24]
 31c:	cmp	x1, x0
 320:	b.ne	350 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x25c>  // b.any
 324:	ldr	x19, [x19]
 328:	ldr	x22, [x2, #16]
 32c:	ldr	w0, [x19]
 330:	sxtw	x0, w0
 334:	cmp	x0, #0x1
 338:	b.ls	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.plast
 33c:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 340:	mov	x2, x22
 344:	add	x0, x0, #0x0
 348:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 34c:	b	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>
 350:	cmp	x0, x27
 354:	b.cc	3a0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2ac>  // b.lo, b.ul, b.last
 358:	cmp	x0, x26
 35c:	b.cs	3a0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2ac>  // b.hs, b.nlast
 360:	ldr	x19, [x19]
 364:	ldr	w1, [x19]
 368:	sxtw	x1, w1
 36c:	cmp	x1, #0x1
 370:	b.ls	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.plast
 374:	mov	x1, x0
 378:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 37c:	add	x0, x0, #0x0
 380:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 384:	add	x20, x20, x23
 388:	ldr	x2, [sp, #120]
 38c:	ldr	x1, [x20, #8]
 390:	add	x0, x1, x21
 394:	str	x2, [x1, x21]
 398:	str	x22, [x0, #8]
 39c:	b	124 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x30>
 3a0:	and	x1, x0, #0xfff
 3a4:	cmp	x1, #0x10
 3a8:	b.ne	3d8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2e4>  // b.any
 3ac:	ldr	x19, [x19]
 3b0:	ldp	x22, x1, [x0, #-16]
 3b4:	str	x1, [sp, #120]
 3b8:	ldr	w0, [x19]
 3bc:	sxtw	x0, w0
 3c0:	cmp	x0, #0x1
 3c4:	b.ls	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.plast
 3c8:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 3cc:	mov	x2, x22
 3d0:	add	x0, x0, #0x0
 3d4:	b	348 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x254>
 3d8:	ldr	x19, [x19]
 3dc:	ldr	w0, [x19]
 3e0:	sxtw	x0, w0
 3e4:	cmp	x0, #0x1
 3e8:	b.ls	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.plast
 3ec:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 3f0:	add	x0, x0, #0x0
 3f4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3f8:	b	384 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>

00000000000003fc <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>:
 3fc:	stp	x19, x20, [sp, #-32]!
 400:	mov	x20, x0
 404:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 408:	ldr	x0, [x0]
 40c:	ldrb	w0, [x0, #121]
 410:	str	x30, [sp, #16]
 414:	cbz	w0, 45c <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x60>
 418:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 41c:	mov	x19, x1
 420:	ldr	x0, [x0]
 424:	ldr	w0, [x0]
 428:	sxtw	x0, w0
 42c:	cmp	x0, #0x1
 430:	b.ls	448 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x4c>  // b.plast
 434:	mov	x2, x1
 438:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 43c:	mov	x1, x20
 440:	add	x0, x0, #0x0
 444:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 448:	adrp	x3, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 44c:	ldr	x3, [x3]
 450:	mrs	x4, tpidr_el0
 454:	add	x3, x4, x3
 458:	stp	x19, x20, [x3, #16]
 45c:	ldr	x30, [sp, #16]
 460:	ldp	x19, x20, [sp], #32
 464:	ret

0000000000000468 <_ZN11__sanitizer8DTLS_GetEv>:
 468:	adrp	x0, 0 <_ZN11__sanitizerL15DTLS_DeallocateEPNS_4DTLS3DTVEm.part.0>
 46c:	ldr	x0, [x0]
 470:	mrs	x1, tpidr_el0
 474:	add	x0, x1, x0
 478:	ret

000000000000047c <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>:
 47c:	ldr	x0, [x0]
 480:	cmn	x0, #0x1
 484:	cset	w0, eq  // eq = none
 488:	ret

sanitizer_unwind_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	ldr	w4, [x1, #8]
   c:	ldr	x1, [x1]
  10:	ldr	w3, [x1, #8]
  14:	str	x30, [sp, #16]
  18:	cmp	x3, x4
  1c:	b.cc	38 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x38>  // b.lo, b.ul, b.last
  20:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  24:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  28:	add	x2, x2, #0x0
  2c:	add	x0, x0, #0x0
  30:	mov	w1, #0x6d                  	// #109
  34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  38:	bl	0 <_Unwind_GetIP>
  3c:	mov	x20, x0
  40:	bl	0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  44:	cmp	x0, x20
  48:	b.hi	70 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x70>  // b.pmore
  4c:	ldr	x0, [x19]
  50:	ldr	w1, [x0, #8]
  54:	add	w2, w1, #0x1
  58:	str	w2, [x0, #8]
  5c:	add	x1, x0, w1, uxtw #3
  60:	ldr	w0, [x19, #8]
  64:	cmp	w2, w0
  68:	str	x20, [x1, #16]
  6c:	b.ne	80 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x80>  // b.any
  70:	mov	w0, #0x4                   	// #4
  74:	ldr	x30, [sp, #16]
  78:	ldp	x19, x20, [sp], #32
  7c:	ret
  80:	mov	w0, #0x0                   	// #0
  84:	b	74 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x74>

0000000000000088 <_ZN11__sanitizer12Unwind_GetIPEP15_Unwind_Context>:
  88:	b	0 <_Unwind_GetIP>

000000000000008c <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>:
  8c:	stp	x19, x20, [sp, #-48]!
  90:	cmp	w2, #0x1
  94:	str	x30, [sp, #16]
  98:	b.hi	bc <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x30>  // b.pmore
  9c:	mov	w3, w2
  a0:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  a4:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  a8:	add	x0, x0, #0x0
  ac:	add	x2, x2, #0x0
  b0:	mov	x4, #0x2                   	// #2
  b4:	mov	w1, #0x7a                  	// #122
  b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  bc:	mov	x19, x0
  c0:	add	w2, w2, #0x1
  c4:	cmp	w2, #0x100
  c8:	mov	w0, #0x100                 	// #256
  cc:	csel	w2, w2, w0, ls  // ls = plast
  d0:	mov	x20, x1
  d4:	str	wzr, [x19, #8]
  d8:	add	x1, sp, #0x20
  dc:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  e0:	add	x0, x0, #0x0
  e4:	str	x19, [sp, #32]
  e8:	str	w2, [sp, #40]
  ec:	bl	0 <_Unwind_Backtrace>
  f0:	mov	x1, x20
  f4:	mov	x0, x19
  f8:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>
  fc:	mov	x1, x0
 100:	cbnz	x0, 110 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x84>
 104:	ldr	w0, [x19, #8]
 108:	cmp	w0, #0x1
 10c:	cset	x1, hi  // hi = pmore
 110:	mov	x0, x19
 114:	bl	0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>
 118:	ldr	x30, [sp, #16]
 11c:	str	x20, [x19, #16]
 120:	ldp	x19, x20, [sp], #48
 124:	ret

0000000000000128 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>:
 128:	stp	x19, x20, [sp, #-96]!
 12c:	stp	x21, x22, [sp, #16]
 130:	stp	x23, x24, [sp, #32]
 134:	mov	w24, w3
 138:	cmp	w24, #0x1
 13c:	stp	x25, x30, [sp, #48]
 140:	b.hi	164 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x3c>  // b.pmore
 144:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 148:	mov	x3, x24
 14c:	add	x2, x2, #0x0
 150:	mov	x4, #0x2                   	// #2
 154:	mov	w1, #0x94                  	// #148
 158:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 164:	adrp	x3, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 168:	add	x4, x3, #0x0
 16c:	mov	x20, x3
 170:	ldr	x5, [x3]
 174:	cbnz	x5, 194 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x6c>
 178:	mov	x2, x24
 17c:	bl	8c <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>
 180:	ldp	x21, x22, [sp, #16]
 184:	ldp	x23, x24, [sp, #32]
 188:	ldp	x25, x30, [sp, #48]
 18c:	ldp	x19, x20, [sp], #96
 190:	ret
 194:	mov	x19, x0
 198:	mov	x22, x2
 19c:	ldr	x0, [x4, #8]
 1a0:	blr	x0
 1a4:	mov	x21, x0
 1a8:	cbnz	x0, 1c4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x9c>
 1ac:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 1b0:	mov	x4, #0x0                   	// #0
 1b4:	add	x2, x2, #0x0
 1b8:	mov	x3, #0x0                   	// #0
 1bc:	mov	w1, #0x9b                  	// #155
 1c0:	b	158 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x30>
 1c4:	add	x23, sp, #0x48
 1c8:	mov	x1, #0x100                 	// #256
 1cc:	mov	x0, x23
 1d0:	stp	xzr, xzr, [sp, #72]
 1d4:	str	xzr, [sp, #88]
 1d8:	bl	0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 1dc:	ldr	x0, [sp, #88]
 1e0:	cmp	x0, #0xff
 1e4:	b.hi	228 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x100>  // b.pmore
 1e8:	ldr	x1, [sp, #80]
 1ec:	mov	x0, #0x17ff                	// #6143
 1f0:	cmp	x1, x0
 1f4:	b.hi	204 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0xdc>  // b.pmore
 1f8:	mov	x0, x23
 1fc:	mov	x1, #0x100                 	// #256
 200:	bl	0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 204:	ldr	x0, [sp, #88]
 208:	mov	x1, #0x100                 	// #256
 20c:	ldr	x4, [sp, #72]
 210:	sub	x1, x1, x0
 214:	mov	x3, #0x18                  	// #24
 218:	mul	x2, x1, x3
 21c:	mov	w1, #0x0                   	// #0
 220:	madd	x0, x0, x3, x4
 224:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 228:	ldr	x6, [x20]
 22c:	add	x25, x20, #0x0
 230:	ldr	x3, [sp, #72]
 234:	mov	x23, #0x100                 	// #256
 238:	str	x23, [sp, #88]
 23c:	mov	x1, x22
 240:	mov	x5, x24
 244:	mov	x2, x21
 248:	mov	x4, #0x0                   	// #0
 24c:	mov	x0, #0x0                   	// #0
 250:	blr	x6
 254:	mov	x20, x0
 258:	ldr	x1, [x25, #16]
 25c:	mov	x0, x21
 260:	blr	x1
 264:	tbz	x20, #63, 274 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x14c>
 268:	ldp	x0, x1, [sp, #72]
 26c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 270:	b	180 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x58>
 274:	cmp	x20, #0x100
 278:	b.le	294 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x16c>
 27c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 280:	mov	x4, x23
 284:	mov	x3, x20
 288:	add	x2, x2, #0x0
 28c:	mov	w1, #0xa3                  	// #163
 290:	b	158 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x30>
 294:	ldr	x0, [sp, #72]
 298:	mov	x1, #0x0                   	// #0
 29c:	ldr	x4, [sp, #88]
 2a0:	mov	x6, #0x18                  	// #24
 2a4:	str	wzr, [x19, #8]
 2a8:	cmp	x1, x20
 2ac:	b.eq	2fc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1d4>  // b.none
 2b0:	cmp	x4, x1
 2b4:	b.ne	2d4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1ac>  // b.any
 2b8:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2bc:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2c0:	mov	x3, x4
 2c4:	add	x2, x2, #0x0
 2c8:	add	x0, x0, #0x0
 2cc:	mov	w1, #0x1b6                 	// #438
 2d0:	b	160 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x38>
 2d4:	mul	x2, x1, x6
 2d8:	add	x1, x1, #0x1
 2dc:	ldr	x3, [x0, x2]
 2e0:	ldr	w2, [x19, #8]
 2e4:	add	x3, x3, #0x2
 2e8:	add	w5, w2, #0x1
 2ec:	str	w5, [x19, #8]
 2f0:	add	x2, x19, w2, uxtw #3
 2f4:	str	x3, [x2, #16]
 2f8:	b	2a8 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x180>
 2fc:	ldr	x1, [sp, #80]
 300:	b	26c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x144>

Disassembly of section .text._ZN11__sanitizer17GetPageSizeCachedEv:

0000000000000000 <_ZN11__sanitizer17GetPageSizeCachedEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x0
   c:	ldr	x20, [x0]
  10:	ldr	x1, [x20]
  14:	str	x30, [sp, #16]
  18:	cbnz	x1, 24 <_ZN11__sanitizer17GetPageSizeCachedEv+0x24>
  1c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  20:	str	x0, [x20]
  24:	ldr	x0, [x19]
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ldr	x0, [x0]
  34:	ret

Disassembly of section .text._ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm:

0000000000000000 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x4, x1
   8:	stp	x21, x22, [sp, #16]
   c:	str	x30, [sp, #32]
  10:	cbnz	x1, 30 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm+0x30>
  14:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  18:	add	x2, x2, #0x0
  1c:	mov	x3, #0x0                   	// #0
  20:	mov	w1, #0x1fc                 	// #508
  24:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  30:	ldr	x3, [x0, #16]
  34:	mov	x21, x0
  38:	cmp	x1, x3
  3c:	b.cs	50 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm+0x50>  // b.hs, b.nlast
  40:	adrp	x2, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  44:	mov	w1, #0x1fd                 	// #509
  48:	add	x2, x2, #0x0
  4c:	b	24 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm+0x24>
  50:	mov	x22, #0x18                  	// #24
  54:	mul	x19, x1, x22
  58:	bl	0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  5c:	sub	x1, x0, #0x1
  60:	tst	x1, x0
  64:	b.eq	78 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm+0x78>  // b.none
  68:	adrp	x0, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  6c:	add	x0, x0, #0x0
  70:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  74:	bl	0 <_ZN11__sanitizer3DieEv>
  78:	sub	x19, x19, #0x1
  7c:	mov	w2, #0x0                   	// #0
  80:	add	x19, x19, x0
  84:	neg	x0, x0
  88:	and	x19, x19, x0
  8c:	adrp	x1, 0 <_ZN11__sanitizer24InternalMmapVectorNoCtorINS_17backtrace_frame_tEE7ReallocEm>
  90:	mov	x0, x19
  94:	add	x1, x1, #0x0
  98:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  9c:	mov	x20, x0
  a0:	ldr	x2, [x21, #16]
  a4:	ldr	x1, [x21]
  a8:	mul	x2, x2, x22
  ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  b0:	ldp	x0, x1, [x21]
  b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  b8:	ldr	x30, [sp, #32]
  bc:	stp	x20, x19, [x21]
  c0:	ldp	x21, x22, [sp, #16]
  c4:	ldp	x19, x20, [sp], #48
  c8:	ret

sanitizer_unwind_win.o:     file format elf64-littleaarch64


sanitizer_win.o:     file format elf64-littleaarch64


interception_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x1, x0
  10:	mov	x0, #0xffffffffffffffff    	// #-1
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x30, [sp, #32]
  24:	bl	0 <dlsym>
  28:	str	x0, [x19]
  2c:	cbnz	x0, 3c <_ZN14__interception22GetRealFunctionAddressEPKcPmmm+0x3c>
  30:	mov	x1, x20
  34:	bl	0 <dlsym>
  38:	str	x0, [x19]
  3c:	cmp	x22, x21
  40:	cset	w0, eq  // eq = none
  44:	ldp	x21, x22, [sp, #16]
  48:	ldr	x30, [sp, #32]
  4c:	ldp	x19, x20, [sp], #48
  50:	ret

0000000000000054 <_ZN14__interception14GetFuncAddrVerEPKcS1_>:
  54:	mov	x2, x1
  58:	mov	x1, x0
  5c:	mov	x0, #0xffffffffffffffff    	// #-1
  60:	b	0 <dlvsym>

interception_mac.o:     file format elf64-littleaarch64


interception_type_test.o:     file format elf64-littleaarch64


interception_win.o:     file format elf64-littleaarch64


atomic.o:     file format elf64-littleaarch64


bridge.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_internal_memcpy>:
   0:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

0000000000000004 <__asan_internal_memset>:
   4:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

0000000000000008 <__asan_internal_memcmp>:
   8:	b	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>

000000000000000c <__asan_internal_strcmp>:
   c:	b	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>

0000000000000010 <__asan_internal_strncmp>:
  10:	b	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>

0000000000000014 <__asan_internal_strlen>:
  14:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>

0000000000000018 <__asan_internal_strnlen>:
  18:	b	0 <_ZN11__sanitizer16internal_strnlenEPKcm>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_fnqual_component_type>:
       0:	sub	w0, w0, #0x1c
       4:	cmp	w0, #0x34
       8:	b.hi	28 <is_fnqual_component_type+0x28>  // b.pmore
       c:	mov	x1, #0x1                   	// #1
      10:	lsl	x0, x1, x0
      14:	mov	x1, #0x1f                  	// #31
      18:	movk	x1, #0x1a, lsl #48
      1c:	tst	x0, x1
      20:	cset	w0, ne  // ne = any
      24:	ret
      28:	mov	w0, #0x0                   	// #0
      2c:	b	24 <is_fnqual_component_type+0x24>

0000000000000030 <d_make_empty>:
      30:	mov	x1, x0
      34:	ldp	w2, w0, [x0, #40]
      38:	cmp	w2, w0
      3c:	b.ge	5c <d_make_empty+0x2c>  // b.tcont
      40:	ldr	x3, [x1, #32]
      44:	mov	w0, #0x18                  	// #24
      48:	smaddl	x0, w2, w0, x3
      4c:	add	w2, w2, #0x1
      50:	str	wzr, [x0, #4]
      54:	str	w2, [x1, #40]
      58:	ret
      5c:	mov	x0, #0x0                   	// #0
      60:	b	58 <d_make_empty+0x28>

0000000000000064 <d_make_comp>:
      64:	mov	x5, x2
      68:	sub	w2, w1, #0x1
      6c:	cmp	w2, #0x4f
      70:	b.hi	a0 <d_make_comp+0x3c>  // b.pmore
      74:	mov	w6, w1
      78:	mov	x4, x3
      7c:	adrp	x1, 0 <is_fnqual_component_type>
      80:	add	x1, x1, #0x0
      84:	ldrb	w1, [x1, w2, uxtw]
      88:	adr	x2, 94 <d_make_comp+0x30>
      8c:	add	x1, x2, w1, sxtb #2
      90:	br	x1
      94:	cmp	x5, #0x0
      98:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      9c:	b.ne	ac <d_make_comp+0x48>  // b.any
      a0:	mov	x0, #0x0                   	// #0
      a4:	ret
      a8:	cbz	x5, a0 <d_make_comp+0x3c>
      ac:	stp	x29, x30, [sp, #-16]!
      b0:	mov	x29, sp
      b4:	bl	30 <d_make_empty>
      b8:	cbz	x0, c4 <d_make_comp+0x60>
      bc:	str	w6, [x0]
      c0:	stp	x5, x4, [x0, #8]
      c4:	ldp	x29, x30, [sp], #16
      c8:	ret
      cc:	cbnz	x3, ac <d_make_comp+0x48>
      d0:	b	a0 <d_make_comp+0x3c>

00000000000000d4 <d_make_builtin_type>:
      d4:	mov	x4, x1
      d8:	stp	x29, x30, [sp, #-16]!
      dc:	mov	x29, sp
      e0:	bl	30 <d_make_empty>
      e4:	cbz	x0, f4 <d_make_builtin_type+0x20>
      e8:	mov	w1, #0x27                  	// #39
      ec:	str	w1, [x0]
      f0:	str	x4, [x0, #8]
      f4:	ldp	x29, x30, [sp], #16
      f8:	ret

00000000000000fc <d_ref_qualifier>:
      fc:	ldr	x4, [x0, #24]
     100:	mov	x2, x1
     104:	mov	w3, #0x4f                  	// #79
     108:	ldrb	w1, [x4]
     10c:	cmp	w1, #0x52
     110:	ccmp	w1, w3, #0x4, ne  // ne = any
     114:	b.ne	14c <d_ref_qualifier+0x50>  // b.any
     118:	ldr	w3, [x0, #72]
     11c:	cmp	w1, #0x52
     120:	b.ne	140 <d_ref_qualifier+0x44>  // b.any
     124:	add	w3, w3, #0x2
     128:	mov	w1, #0x1f                  	// #31
     12c:	add	x4, x4, #0x1
     130:	str	x4, [x0, #24]
     134:	str	w3, [x0, #72]
     138:	mov	x3, #0x0                   	// #0
     13c:	b	64 <d_make_comp>
     140:	add	w3, w3, #0x3
     144:	mov	w1, #0x20                  	// #32
     148:	b	12c <d_ref_qualifier+0x30>
     14c:	mov	x0, x2
     150:	ret

0000000000000154 <d_add_substitution>:
     154:	cbz	x1, 17c <d_add_substitution+0x28>
     158:	ldp	w2, w3, [x0, #56]
     15c:	cmp	w2, w3
     160:	b.ge	17c <d_add_substitution+0x28>  // b.tcont
     164:	ldr	x3, [x0, #48]
     168:	str	x1, [x3, w2, sxtw #3]
     16c:	add	w2, w2, #0x1
     170:	str	w2, [x0, #56]
     174:	mov	w0, #0x1                   	// #1
     178:	ret
     17c:	mov	w0, #0x0                   	// #0
     180:	b	178 <d_add_substitution+0x24>

0000000000000184 <d_count_templates_scopes>:
     184:	stp	x29, x30, [sp, #-32]!
     188:	mov	x29, sp
     18c:	stp	x19, x20, [sp, #16]
     190:	mov	x19, x1
     194:	mov	x20, x0
     198:	adrp	x1, 0 <is_fnqual_component_type>
     19c:	add	x1, x1, #0x0
     1a0:	cbz	x19, 208 <d_count_templates_scopes+0x84>
     1a4:	ldr	w0, [x19]
     1a8:	sub	w0, w0, #0x1
     1ac:	cmp	w0, #0x4f
     1b0:	b.hi	208 <d_count_templates_scopes+0x84>  // b.pmore
     1b4:	ldrb	w0, [x1, w0, uxtw]
     1b8:	adr	x2, 1c4 <d_count_templates_scopes+0x40>
     1bc:	add	x0, x2, w0, sxtb #2
     1c0:	br	x0
     1c4:	ldr	w0, [x20, #364]
     1c8:	add	w0, w0, #0x1
     1cc:	str	w0, [x20, #364]
     1d0:	ldr	w0, [x20, #308]
     1d4:	cmp	w0, #0x800
     1d8:	b.gt	208 <d_count_templates_scopes+0x84>
     1dc:	ldr	x1, [x19, #8]
     1e0:	add	w0, w0, #0x1
     1e4:	str	w0, [x20, #308]
     1e8:	mov	x0, x20
     1ec:	bl	184 <d_count_templates_scopes>
     1f0:	ldr	x1, [x19, #16]
     1f4:	mov	x0, x20
     1f8:	bl	184 <d_count_templates_scopes>
     1fc:	ldr	w0, [x20, #308]
     200:	sub	w0, w0, #0x1
     204:	str	w0, [x20, #308]
     208:	ldp	x19, x20, [sp, #16]
     20c:	ldp	x29, x30, [sp], #32
     210:	ret
     214:	ldr	x0, [x19, #8]
     218:	ldr	w0, [x0]
     21c:	cmp	w0, #0x5
     220:	b.ne	1d0 <d_count_templates_scopes+0x4c>  // b.any
     224:	ldr	w0, [x20, #348]
     228:	add	w0, w0, #0x1
     22c:	str	w0, [x20, #348]
     230:	b	1d0 <d_count_templates_scopes+0x4c>
     234:	ldr	x19, [x19, #16]
     238:	b	1a0 <d_count_templates_scopes+0x1c>
     23c:	ldr	x19, [x19, #8]
     240:	b	1a0 <d_count_templates_scopes+0x1c>

0000000000000244 <d_print_flush>:
     244:	stp	x29, x30, [sp, #-32]!
     248:	mov	x29, sp
     24c:	ldr	x1, [x0, #256]
     250:	str	x19, [sp, #16]
     254:	mov	x19, x0
     258:	strb	wzr, [x0, x1]
     25c:	ldp	x3, x2, [x0, #272]
     260:	blr	x3
     264:	str	xzr, [x19, #256]
     268:	ldr	x0, [x19, #320]
     26c:	add	x0, x0, #0x1
     270:	str	x0, [x19, #320]
     274:	ldr	x19, [sp, #16]
     278:	ldp	x29, x30, [sp], #32
     27c:	ret

0000000000000280 <d_append_char>:
     280:	stp	x29, x30, [sp, #-32]!
     284:	mov	x29, sp
     288:	stp	x19, x20, [sp, #16]
     28c:	and	w20, w1, #0xff
     290:	mov	x19, x0
     294:	ldr	x1, [x0, #256]
     298:	cmp	x1, #0xff
     29c:	b.ne	2a4 <d_append_char+0x24>  // b.any
     2a0:	bl	244 <d_print_flush>
     2a4:	ldr	x0, [x19, #256]
     2a8:	add	x1, x0, #0x1
     2ac:	str	x1, [x19, #256]
     2b0:	strb	w20, [x19, x0]
     2b4:	strb	w20, [x19, #264]
     2b8:	ldp	x19, x20, [sp, #16]
     2bc:	ldp	x29, x30, [sp], #32
     2c0:	ret

00000000000002c4 <d_append_buffer>:
     2c4:	stp	x29, x30, [sp, #-48]!
     2c8:	mov	x29, sp
     2cc:	stp	x19, x20, [sp, #16]
     2d0:	mov	x19, x1
     2d4:	add	x20, x1, x2
     2d8:	str	x21, [sp, #32]
     2dc:	mov	x21, x0
     2e0:	cmp	x19, x20
     2e4:	b.ne	2f8 <d_append_buffer+0x34>  // b.any
     2e8:	ldp	x19, x20, [sp, #16]
     2ec:	ldr	x21, [sp, #32]
     2f0:	ldp	x29, x30, [sp], #48
     2f4:	ret
     2f8:	ldrb	w1, [x19], #1
     2fc:	mov	x0, x21
     300:	bl	280 <d_append_char>
     304:	b	2e0 <d_append_buffer+0x1c>

0000000000000308 <d_pack_length>:
     308:	mov	x1, x0
     30c:	mov	w0, #0x0                   	// #0
     310:	cbz	x1, 328 <d_pack_length+0x20>
     314:	ldr	w2, [x1]
     318:	cmp	w2, #0x2f
     31c:	b.ne	328 <d_pack_length+0x20>  // b.any
     320:	ldr	x2, [x1, #8]
     324:	cbnz	x2, 32c <d_pack_length+0x24>
     328:	ret
     32c:	add	w0, w0, #0x1
     330:	ldr	x1, [x1, #16]
     334:	b	310 <d_pack_length+0x8>

0000000000000338 <d_append_string>:
     338:	stp	x29, x30, [sp, #-32]!
     33c:	mov	x29, sp
     340:	stp	x19, x20, [sp, #16]
     344:	mov	x20, x0
     348:	mov	x19, x1
     34c:	mov	x0, x1
     350:	bl	0 <__asan_internal_strlen>
     354:	mov	x1, x19
     358:	mov	x2, x0
     35c:	mov	x0, x20
     360:	ldp	x19, x20, [sp, #16]
     364:	ldp	x29, x30, [sp], #32
     368:	b	2c4 <d_append_buffer>

000000000000036c <d_append_num>:
     36c:	stp	x29, x30, [sp, #-64]!
     370:	mov	w2, w1
     374:	adrp	x1, 0 <is_fnqual_component_type>
     378:	mov	x29, sp
     37c:	stp	x19, x20, [sp, #16]
     380:	add	x19, sp, #0x20
     384:	mov	x20, x0
     388:	add	x1, x1, #0x0
     38c:	mov	x0, x19
     390:	bl	0 <sprintf>
     394:	mov	x1, x19
     398:	mov	x0, x20
     39c:	bl	338 <d_append_string>
     3a0:	ldp	x19, x20, [sp, #16]
     3a4:	ldp	x29, x30, [sp], #64
     3a8:	ret

00000000000003ac <d_number.isra.0>:
     3ac:	mov	x1, x0
     3b0:	ldr	x0, [x0]
     3b4:	ldrb	w3, [x0]
     3b8:	cmp	w3, #0x6e
     3bc:	b.ne	3f8 <d_number.isra.0+0x4c>  // b.any
     3c0:	add	x2, x0, #0x1
     3c4:	str	x2, [x1]
     3c8:	mov	w5, #0x1                   	// #1
     3cc:	ldrb	w3, [x0, #1]
     3d0:	mov	w0, #0x0                   	// #0
     3d4:	mov	w6, #0x7fffffff            	// #2147483647
     3d8:	mov	w4, #0xa                   	// #10
     3dc:	sub	w2, w3, #0x30
     3e0:	and	w7, w2, #0xff
     3e4:	cmp	w7, #0x9
     3e8:	b.ls	400 <d_number.isra.0+0x54>  // b.plast
     3ec:	cbz	w5, 3f4 <d_number.isra.0+0x48>
     3f0:	neg	w0, w0
     3f4:	ret
     3f8:	mov	w5, #0x0                   	// #0
     3fc:	b	3d0 <d_number.isra.0+0x24>
     400:	sub	w2, w6, w2
     404:	udiv	w2, w2, w4
     408:	cmp	w2, w0
     40c:	b.lt	42c <d_number.isra.0+0x80>  // b.tstop
     410:	ldr	x2, [x1]
     414:	madd	w0, w0, w4, w3
     418:	add	x3, x2, #0x1
     41c:	str	x3, [x1]
     420:	sub	w0, w0, #0x30
     424:	ldrb	w3, [x2, #1]
     428:	b	3dc <d_number.isra.0+0x30>
     42c:	mov	w0, #0xffffffff            	// #-1
     430:	b	3f4 <d_number.isra.0+0x48>

0000000000000434 <d_number_component>:
     434:	mov	x4, x0
     438:	stp	x29, x30, [sp, #-16]!
     43c:	mov	x29, sp
     440:	bl	30 <d_make_empty>
     444:	mov	x8, x0
     448:	cbz	x0, 464 <d_number_component+0x30>
     44c:	mov	w0, #0x42                  	// #66
     450:	str	w0, [x8]
     454:	add	x0, x4, #0x18
     458:	bl	3ac <d_number.isra.0>
     45c:	sxtw	x0, w0
     460:	str	x0, [x8, #8]
     464:	mov	x0, x8
     468:	ldp	x29, x30, [sp], #16
     46c:	ret

0000000000000470 <d_compact_number>:
     470:	mov	x8, x0
     474:	ldr	x0, [x0, #24]
     478:	ldrb	w0, [x0]
     47c:	cmp	w0, #0x5f
     480:	b.eq	4d4 <d_compact_number+0x64>  // b.none
     484:	cmp	w0, #0x6e
     488:	b.ne	4a0 <d_compact_number+0x30>  // b.any
     48c:	mov	w0, #0xffffffff            	// #-1
     490:	ret
     494:	mov	w0, #0xffffffff            	// #-1
     498:	ldp	x29, x30, [sp], #16
     49c:	ret
     4a0:	stp	x29, x30, [sp, #-16]!
     4a4:	add	x0, x8, #0x18
     4a8:	mov	x29, sp
     4ac:	bl	3ac <d_number.isra.0>
     4b0:	adds	w0, w0, #0x1
     4b4:	b.mi	494 <d_compact_number+0x24>  // b.first
     4b8:	ldr	x1, [x8, #24]
     4bc:	ldrb	w2, [x1]
     4c0:	cmp	w2, #0x5f
     4c4:	b.ne	494 <d_compact_number+0x24>  // b.any
     4c8:	add	x1, x1, #0x1
     4cc:	str	x1, [x8, #24]
     4d0:	b	498 <d_compact_number+0x28>
     4d4:	ldr	x1, [x8, #24]
     4d8:	mov	w0, #0x0                   	// #0
     4dc:	ldrb	w2, [x1]
     4e0:	cmp	w2, #0x5f
     4e4:	b.ne	48c <d_compact_number+0x1c>  // b.any
     4e8:	add	x1, x1, #0x1
     4ec:	str	x1, [x8, #24]
     4f0:	ret

00000000000004f4 <d_template_param>:
     4f4:	ldr	x1, [x0, #24]
     4f8:	ldrb	w2, [x1]
     4fc:	cmp	w2, #0x54
     500:	b.eq	518 <d_template_param+0x24>  // b.none
     504:	mov	x0, #0x0                   	// #0
     508:	ret
     50c:	mov	x0, #0x0                   	// #0
     510:	ldp	x29, x30, [sp], #16
     514:	ret
     518:	stp	x29, x30, [sp, #-16]!
     51c:	add	x1, x1, #0x1
     520:	mov	x9, x0
     524:	mov	x29, sp
     528:	str	x1, [x0, #24]
     52c:	bl	470 <d_compact_number>
     530:	sxtw	x4, w0
     534:	tbnz	w4, #31, 50c <d_template_param+0x18>
     538:	mov	x0, x9
     53c:	bl	30 <d_make_empty>
     540:	cbz	x0, 510 <d_template_param+0x1c>
     544:	mov	w1, #0x5                   	// #5
     548:	str	w1, [x0]
     54c:	str	x4, [x0, #8]
     550:	b	510 <d_template_param+0x1c>

0000000000000554 <d_call_offset>:
     554:	mov	x8, x0
     558:	cbnz	w1, 588 <d_call_offset+0x34>
     55c:	ldr	x0, [x0, #24]
     560:	ldrb	w1, [x0]
     564:	cbnz	w1, 57c <d_call_offset+0x28>
     568:	mov	w0, #0x0                   	// #0
     56c:	ret
     570:	mov	w0, #0x0                   	// #0
     574:	ldp	x29, x30, [sp], #16
     578:	ret
     57c:	add	x1, x0, #0x1
     580:	str	x1, [x8, #24]
     584:	ldrb	w1, [x0]
     588:	stp	x29, x30, [sp, #-16]!
     58c:	cmp	w1, #0x68
     590:	mov	x29, sp
     594:	b.ne	5c0 <d_call_offset+0x6c>  // b.any
     598:	add	x0, x8, #0x18
     59c:	bl	3ac <d_number.isra.0>
     5a0:	ldr	x0, [x8, #24]
     5a4:	ldrb	w1, [x0]
     5a8:	cmp	w1, #0x5f
     5ac:	b.ne	570 <d_call_offset+0x1c>  // b.any
     5b0:	add	x0, x0, #0x1
     5b4:	str	x0, [x8, #24]
     5b8:	mov	w0, #0x1                   	// #1
     5bc:	b	574 <d_call_offset+0x20>
     5c0:	cmp	w1, #0x76
     5c4:	b.ne	570 <d_call_offset+0x1c>  // b.any
     5c8:	add	x9, x8, #0x18
     5cc:	mov	x0, x9
     5d0:	bl	3ac <d_number.isra.0>
     5d4:	ldr	x0, [x8, #24]
     5d8:	ldrb	w1, [x0]
     5dc:	cmp	w1, #0x5f
     5e0:	b.ne	570 <d_call_offset+0x1c>  // b.any
     5e4:	add	x0, x0, #0x1
     5e8:	str	x0, [x8, #24]
     5ec:	mov	x0, x9
     5f0:	b	59c <d_call_offset+0x48>

00000000000005f4 <next_is_type_qual.isra.0>:
     5f4:	ldrb	w2, [x0]
     5f8:	sub	w1, w2, #0x4b
     5fc:	and	w1, w1, #0xff
     600:	cmp	w1, #0x27
     604:	b.ls	618 <next_is_type_qual.isra.0+0x24>  // b.plast
     608:	cmp	w2, #0x44
     60c:	b.eq	62c <next_is_type_qual.isra.0+0x38>  // b.none
     610:	mov	w0, #0x0                   	// #0
     614:	ret
     618:	mov	x0, #0x801                 	// #2049
     61c:	movk	x0, #0x80, lsl #32
     620:	lsr	x0, x0, x1
     624:	and	w0, w0, #0x1
     628:	b	614 <next_is_type_qual.isra.0+0x20>
     62c:	ldrb	w0, [x0, #1]
     630:	and	w1, w0, #0xffffffdf
     634:	sub	w0, w0, #0x77
     638:	and	w0, w0, #0xff
     63c:	cmp	w1, #0x4f
     640:	ccmp	w0, #0x1, #0x0, ne  // ne = any
     644:	cset	w0, ls  // ls = plast
     648:	b	614 <next_is_type_qual.isra.0+0x20>

000000000000064c <op_is_new_cast.isra.0>:
     64c:	ldr	x0, [x0]
     650:	ldrb	w1, [x0, #1]
     654:	cmp	w1, #0x63
     658:	b.ne	684 <op_is_new_cast.isra.0+0x38>  // b.any
     65c:	ldrb	w0, [x0]
     660:	sub	w1, w0, #0x63
     664:	and	w1, w1, #0xff
     668:	cmp	w1, #0x1
     66c:	b.ls	68c <op_is_new_cast.isra.0+0x40>  // b.plast
     670:	sub	w0, w0, #0x72
     674:	and	w0, w0, #0xff
     678:	cmp	w0, #0x1
     67c:	cset	w0, ls  // ls = plast
     680:	ret
     684:	mov	w0, #0x0                   	// #0
     688:	b	680 <op_is_new_cast.isra.0+0x34>
     68c:	mov	w0, #0x1                   	// #1
     690:	b	680 <op_is_new_cast.isra.0+0x34>

0000000000000694 <d_discriminator>:
     694:	mov	x8, x0
     698:	ldr	x0, [x0, #24]
     69c:	ldrb	w1, [x0]
     6a0:	cmp	w1, #0x5f
     6a4:	b.eq	6b0 <d_discriminator+0x1c>  // b.none
     6a8:	mov	w0, #0x1                   	// #1
     6ac:	ret
     6b0:	stp	x29, x30, [sp, #-16]!
     6b4:	add	x1, x0, #0x1
     6b8:	mov	x29, sp
     6bc:	str	x1, [x8, #24]
     6c0:	ldrb	w1, [x0, #1]
     6c4:	cmp	w1, #0x5f
     6c8:	b.ne	714 <d_discriminator+0x80>  // b.any
     6cc:	add	x0, x0, #0x2
     6d0:	mov	w9, #0x2                   	// #2
     6d4:	str	x0, [x8, #24]
     6d8:	add	x0, x8, #0x18
     6dc:	bl	3ac <d_number.isra.0>
     6e0:	tbnz	w0, #31, 71c <d_discriminator+0x88>
     6e4:	cmp	w9, #0x1
     6e8:	ccmp	w0, #0x9, #0x4, gt
     6ec:	b.le	708 <d_discriminator+0x74>
     6f0:	ldr	x0, [x8, #24]
     6f4:	ldrb	w1, [x0]
     6f8:	cmp	w1, #0x5f
     6fc:	b.ne	71c <d_discriminator+0x88>  // b.any
     700:	add	x0, x0, #0x1
     704:	str	x0, [x8, #24]
     708:	mov	w0, #0x1                   	// #1
     70c:	ldp	x29, x30, [sp], #16
     710:	ret
     714:	mov	w9, #0x1                   	// #1
     718:	b	6d8 <d_discriminator+0x44>
     71c:	mov	w0, #0x0                   	// #0
     720:	b	70c <d_discriminator+0x78>

0000000000000724 <d_index_template_argument.part.0>:
     724:	cbnz	x0, 72c <d_index_template_argument.part.0+0x8>
     728:	ret
     72c:	ldr	w2, [x0]
     730:	cmp	w2, #0x2f
     734:	b.ne	758 <d_index_template_argument.part.0+0x34>  // b.any
     738:	cmp	w1, #0x0
     73c:	b.le	74c <d_index_template_argument.part.0+0x28>
     740:	sub	w1, w1, #0x1
     744:	ldr	x0, [x0, #16]
     748:	b	724 <d_index_template_argument.part.0>
     74c:	b.ne	758 <d_index_template_argument.part.0+0x34>  // b.any
     750:	ldr	x0, [x0, #8]
     754:	b	728 <d_index_template_argument.part.0+0x4>
     758:	mov	x0, #0x0                   	// #0
     75c:	b	728 <d_index_template_argument.part.0+0x4>

0000000000000760 <d_growable_string_resize>:
     760:	stp	x29, x30, [sp, #-32]!
     764:	mov	x29, sp
     768:	stp	x19, x20, [sp, #16]
     76c:	mov	x19, x0
     770:	ldr	w0, [x0, #24]
     774:	cbnz	w0, 7b8 <d_growable_string_resize+0x58>
     778:	ldr	x20, [x19, #16]
     77c:	mov	x0, #0x2                   	// #2
     780:	cmp	x20, #0x0
     784:	csel	x20, x20, x0, ne  // ne = any
     788:	cmp	x20, x1
     78c:	b.cc	7c4 <d_growable_string_resize+0x64>  // b.lo, b.ul, b.last
     790:	ldr	x0, [x19]
     794:	mov	x1, x20
     798:	bl	0 <realloc>
     79c:	cbnz	x0, 7cc <d_growable_string_resize+0x6c>
     7a0:	ldr	x0, [x19]
     7a4:	bl	0 <free>
     7a8:	stp	xzr, xzr, [x19]
     7ac:	mov	w0, #0x1                   	// #1
     7b0:	str	xzr, [x19, #16]
     7b4:	str	w0, [x19, #24]
     7b8:	ldp	x19, x20, [sp, #16]
     7bc:	ldp	x29, x30, [sp], #32
     7c0:	ret
     7c4:	lsl	x20, x20, #1
     7c8:	b	788 <d_growable_string_resize+0x28>
     7cc:	str	x0, [x19]
     7d0:	str	x20, [x19, #16]
     7d4:	b	7b8 <d_growable_string_resize+0x58>

00000000000007d8 <d_growable_string_callback_adapter>:
     7d8:	stp	x29, x30, [sp, #-48]!
     7dc:	mov	x29, sp
     7e0:	str	x21, [sp, #32]
     7e4:	mov	x21, x0
     7e8:	ldr	x0, [x2, #8]
     7ec:	stp	x19, x20, [sp, #16]
     7f0:	mov	x20, x1
     7f4:	add	x1, x1, #0x1
     7f8:	mov	x19, x2
     7fc:	add	x1, x1, x0
     800:	ldr	x0, [x2, #16]
     804:	cmp	x1, x0
     808:	b.ls	814 <d_growable_string_callback_adapter+0x3c>  // b.plast
     80c:	mov	x0, x2
     810:	bl	760 <d_growable_string_resize>
     814:	ldr	w0, [x19, #24]
     818:	cbnz	w0, 848 <d_growable_string_callback_adapter+0x70>
     81c:	ldp	x3, x0, [x19]
     820:	mov	x2, x20
     824:	mov	x1, x21
     828:	add	x0, x3, x0
     82c:	bl	0 <__asan_internal_memcpy>
     830:	ldp	x0, x1, [x19]
     834:	add	x0, x0, x20
     838:	strb	wzr, [x0, x1]
     83c:	ldr	x1, [x19, #8]
     840:	add	x20, x1, x20
     844:	str	x20, [x19, #8]
     848:	ldp	x19, x20, [sp, #16]
     84c:	ldr	x21, [sp, #32]
     850:	ldp	x29, x30, [sp], #48
     854:	ret

0000000000000858 <d_lookup_template_argument.isra.0>:
     858:	mov	x2, x0
     85c:	ldr	x0, [x0, #288]
     860:	cbnz	x0, 870 <d_lookup_template_argument.isra.0+0x18>
     864:	mov	w1, #0x1                   	// #1
     868:	str	w1, [x2, #304]
     86c:	ret
     870:	ldr	x1, [x1]
     874:	ldr	x0, [x0, #8]
     878:	ldr	x0, [x0, #16]
     87c:	tbnz	w1, #31, 86c <d_lookup_template_argument.isra.0+0x14>
     880:	b	724 <d_index_template_argument.part.0>

0000000000000884 <d_find_pack>:
     884:	stp	x29, x30, [sp, #-64]!
     888:	mov	x29, sp
     88c:	str	x23, [sp, #48]
     890:	mov	x23, #0x8001                	// #32769
     894:	movk	x23, #0x410, lsl #16
     898:	stp	x19, x20, [sp, #16]
     89c:	movk	x23, #0xc600, lsl #32
     8a0:	mov	x20, x0
     8a4:	mov	x19, x1
     8a8:	stp	x21, x22, [sp, #32]
     8ac:	adrp	x21, 0 <is_fnqual_component_type>
     8b0:	add	x21, x21, #0x0
     8b4:	mov	x22, #0x1                   	// #1
     8b8:	movk	x23, #0x19, lsl #48
     8bc:	cbz	x19, 944 <d_find_pack+0xc0>
     8c0:	ldr	w1, [x19]
     8c4:	cmp	w1, #0x8
     8c8:	b.ls	904 <d_find_pack+0x80>  // b.plast
     8cc:	sub	w1, w1, #0x18
     8d0:	cmp	w1, #0x34
     8d4:	b.ls	8ec <d_find_pack+0x68>  // b.plast
     8d8:	ldr	x1, [x19, #8]
     8dc:	mov	x0, x20
     8e0:	bl	884 <d_find_pack>
     8e4:	cbz	x0, 8fc <d_find_pack+0x78>
     8e8:	b	930 <d_find_pack+0xac>
     8ec:	lsl	x1, x22, x1
     8f0:	tst	x1, x23
     8f4:	b.ne	944 <d_find_pack+0xc0>  // b.any
     8f8:	tbz	w1, #27, 8d8 <d_find_pack+0x54>
     8fc:	ldr	x19, [x19, #16]
     900:	b	8bc <d_find_pack+0x38>
     904:	ldrb	w0, [x21, w1, uxtw]
     908:	adr	x1, 914 <d_find_pack+0x90>
     90c:	add	x0, x1, w0, sxtb #2
     910:	br	x0
     914:	add	x1, x19, #0x8
     918:	mov	x0, x20
     91c:	bl	858 <d_lookup_template_argument.isra.0>
     920:	cbz	x0, 944 <d_find_pack+0xc0>
     924:	ldr	w1, [x0]
     928:	cmp	w1, #0x2f
     92c:	b.ne	944 <d_find_pack+0xc0>  // b.any
     930:	ldp	x19, x20, [sp, #16]
     934:	ldp	x21, x22, [sp, #32]
     938:	ldr	x23, [sp, #48]
     93c:	ldp	x29, x30, [sp], #64
     940:	ret
     944:	mov	x0, #0x0                   	// #0
     948:	b	930 <d_find_pack+0xac>

000000000000094c <d_print_comp_inner>:
     94c:	stp	x29, x30, [sp, #-224]!
     950:	mov	x29, sp
     954:	stp	x19, x20, [sp, #16]
     958:	mov	x19, x0
     95c:	stp	x21, x22, [sp, #32]
     960:	stp	x23, x24, [sp, #48]
     964:	str	x25, [sp, #64]
     968:	cbnz	x2, 98c <d_print_comp_inner+0x40>
     96c:	mov	w0, #0x1                   	// #1
     970:	str	w0, [x19, #304]
     974:	ldp	x19, x20, [sp, #16]
     978:	ldp	x21, x22, [sp, #32]
     97c:	ldp	x23, x24, [sp, #48]
     980:	ldr	x25, [sp, #64]
     984:	ldp	x29, x30, [sp], #224
     988:	ret
     98c:	ldr	w22, [x0, #304]
     990:	cbnz	w22, 974 <d_print_comp_inner+0x28>
     994:	ldr	w0, [x2]
     998:	mov	x20, x2
     99c:	cmp	w0, #0x50
     9a0:	b.hi	1b0c <d_print_comp_inner+0x11c0>  // b.pmore
     9a4:	mov	w21, w1
     9a8:	adrp	x1, 0 <is_fnqual_component_type>
     9ac:	add	x1, x1, #0x0
     9b0:	ldrh	w1, [x1, w0, uxtw #1]
     9b4:	adr	x2, 9c0 <d_print_comp_inner+0x74>
     9b8:	add	x1, x2, w1, sxth #2
     9bc:	br	x1
     9c0:	ldrsw	x2, [x20, #16]
     9c4:	ldr	x20, [x20, #8]
     9c8:	tbnz	w21, #2, 9dc <d_print_comp_inner+0x90>
     9cc:	mov	x1, x20
     9d0:	mov	x0, x19
     9d4:	bl	2c4 <d_append_buffer>
     9d8:	b	974 <d_print_comp_inner+0x28>
     9dc:	add	x21, x20, x2
     9e0:	cmp	x21, x20
     9e4:	b.ls	974 <d_print_comp_inner+0x28>  // b.plast
     9e8:	sub	x0, x21, x20
     9ec:	ldrb	w3, [x20]
     9f0:	cmp	x0, #0x3
     9f4:	b.le	a28 <d_print_comp_inner+0xdc>
     9f8:	cmp	w3, #0x5f
     9fc:	b.ne	a28 <d_print_comp_inner+0xdc>  // b.any
     a00:	ldrb	w0, [x20, #1]
     a04:	cmp	w0, #0x5f
     a08:	b.ne	a28 <d_print_comp_inner+0xdc>  // b.any
     a0c:	ldrb	w0, [x20, #2]
     a10:	cmp	w0, #0x55
     a14:	b.ne	a28 <d_print_comp_inner+0xdc>  // b.any
     a18:	add	x22, x20, #0x3
     a1c:	mov	x1, #0x0                   	// #0
     a20:	cmp	x21, x22
     a24:	b.hi	a3c <d_print_comp_inner+0xf0>  // b.pmore
     a28:	mov	w1, w3
     a2c:	mov	x0, x19
     a30:	mov	x22, x20
     a34:	bl	280 <d_append_char>
     a38:	b	aa4 <d_print_comp_inner+0x158>
     a3c:	ldrb	w2, [x22]
     a40:	sub	w0, w2, #0x30
     a44:	and	w4, w0, #0xff
     a48:	cmp	w4, #0x9
     a4c:	b.ls	a64 <d_print_comp_inner+0x118>  // b.plast
     a50:	sub	w0, w2, #0x41
     a54:	and	w0, w0, #0xff
     a58:	cmp	w0, #0x5
     a5c:	b.hi	a74 <d_print_comp_inner+0x128>  // b.pmore
     a60:	sub	w0, w2, #0x37
     a64:	sxtw	x0, w0
     a68:	add	x22, x22, #0x1
     a6c:	add	x1, x0, x1, lsl #4
     a70:	b	a20 <d_print_comp_inner+0xd4>
     a74:	sub	w0, w2, #0x61
     a78:	and	w0, w0, #0xff
     a7c:	cmp	w0, #0x5
     a80:	b.hi	a8c <d_print_comp_inner+0x140>  // b.pmore
     a84:	sub	w0, w2, #0x57
     a88:	b	a64 <d_print_comp_inner+0x118>
     a8c:	cmp	w2, #0x5f
     a90:	b.ne	a28 <d_print_comp_inner+0xdc>  // b.any
     a94:	cmp	x1, #0xff
     a98:	b.hi	a28 <d_print_comp_inner+0xdc>  // b.pmore
     a9c:	mov	x0, x19
     aa0:	bl	280 <d_append_char>
     aa4:	add	x20, x22, #0x1
     aa8:	b	9e0 <d_print_comp_inner+0x94>
     aac:	ldr	x2, [x20, #8]
     ab0:	mov	w1, w21
     ab4:	mov	x0, x19
     ab8:	bl	2170 <d_print_comp>
     abc:	mov	x0, x19
     ac0:	adrp	x1, 0 <is_fnqual_component_type>
     ac4:	add	x1, x1, #0x0
     ac8:	bl	338 <d_append_string>
     acc:	ldr	x2, [x20, #16]
     ad0:	mov	w1, w21
     ad4:	mov	x0, x19
     ad8:	bl	2170 <d_print_comp>
     adc:	mov	x0, x19
     ae0:	mov	w1, #0x5d                  	// #93
     ae4:	bl	280 <d_append_char>
     ae8:	b	974 <d_print_comp_inner+0x28>
     aec:	ldr	x2, [x20, #8]
     af0:	mov	w1, w21
     af4:	mov	x0, x19
     af8:	bl	2170 <d_print_comp>
     afc:	tbnz	w21, #2, b68 <d_print_comp_inner+0x21c>
     b00:	adrp	x1, 0 <is_fnqual_component_type>
     b04:	mov	x0, x19
     b08:	add	x1, x1, #0x0
     b0c:	bl	338 <d_append_string>
     b10:	ldr	x20, [x20, #16]
     b14:	ldr	w0, [x20]
     b18:	cmp	w0, #0x47
     b1c:	b.ne	b54 <d_print_comp_inner+0x208>  // b.any
     b20:	mov	x0, x19
     b24:	adrp	x1, 0 <is_fnqual_component_type>
     b28:	add	x1, x1, #0x0
     b2c:	bl	338 <d_append_string>
     b30:	ldr	w1, [x20, #16]
     b34:	mov	x0, x19
     b38:	add	w1, w1, #0x1
     b3c:	bl	36c <d_append_num>
     b40:	mov	x0, x19
     b44:	adrp	x1, 0 <is_fnqual_component_type>
     b48:	add	x1, x1, #0x0
     b4c:	bl	338 <d_append_string>
     b50:	ldr	x20, [x20, #8]
     b54:	mov	x2, x20
     b58:	mov	w1, w21
     b5c:	mov	x0, x19
     b60:	bl	2170 <d_print_comp>
     b64:	b	974 <d_print_comp_inner+0x28>
     b68:	mov	x0, x19
     b6c:	mov	w1, #0x2e                  	// #46
     b70:	bl	280 <d_append_char>
     b74:	b	b10 <d_print_comp_inner+0x1c4>
     b78:	add	x3, sp, #0x60
     b7c:	mov	w23, #0x0                   	// #0
     b80:	mov	x2, x3
     b84:	ldr	x22, [x20, #8]
     b88:	ldr	x24, [x19, #296]
     b8c:	str	xzr, [x19, #296]
     b90:	cbz	x22, b9c <d_print_comp_inner+0x250>
     b94:	cmp	w23, #0x4
     b98:	b.ne	ba8 <d_print_comp_inner+0x25c>  // b.any
     b9c:	mov	w0, #0x1                   	// #1
     ba0:	str	w0, [x19, #304]
     ba4:	b	974 <d_print_comp_inner+0x28>
     ba8:	str	wzr, [x3, #16]
     bac:	add	w23, w23, #0x1
     bb0:	ldp	x4, x0, [x19, #288]
     bb4:	stp	x0, x22, [x3]
     bb8:	ldr	w5, [x22]
     bbc:	str	x4, [x3, #24]
     bc0:	str	x3, [x19, #296]
     bc4:	mov	w0, w5
     bc8:	bl	0 <is_fnqual_component_type>
     bcc:	add	x3, x3, #0x20
     bd0:	cbz	w0, 2064 <d_print_comp_inner+0x1718>
     bd4:	ldr	x22, [x22, #8]
     bd8:	b	b90 <d_print_comp_inner+0x244>
     bdc:	cmp	w23, #0x4
     be0:	b.eq	b9c <d_print_comp_inner+0x250>  // b.none
     be4:	ldp	x0, x1, [x2, #-32]
     be8:	stur	x22, [x2, #-24]
     bec:	stp	x0, x1, [x2]
     bf0:	sub	x3, x2, #0x20
     bf4:	add	w23, w23, #0x1
     bf8:	ldp	x0, x1, [x2, #-16]
     bfc:	stur	wzr, [x2, #-16]
     c00:	stp	x4, x3, [x2, #-8]
     c04:	stp	x0, x1, [x2, #16]
     c08:	ldr	x22, [x22, #8]
     c0c:	str	x2, [x19, #296]
     c10:	add	x2, x2, #0x20
     c14:	b	208c <d_print_comp_inner+0x1740>
     c18:	ldr	x22, [x20, #8]
     c1c:	ldr	x24, [x19, #296]
     c20:	str	xzr, [x19, #296]
     c24:	ldr	x23, [x19, #368]
     c28:	str	x20, [x19, #368]
     c2c:	tbz	w21, #2, c88 <d_print_comp_inner+0x33c>
     c30:	ldr	w0, [x22]
     c34:	cbnz	w0, c88 <d_print_comp_inner+0x33c>
     c38:	ldr	w0, [x22, #16]
     c3c:	cmp	w0, #0x6
     c40:	b.ne	c88 <d_print_comp_inner+0x33c>  // b.any
     c44:	ldr	x0, [x22, #8]
     c48:	adrp	x1, 0 <is_fnqual_component_type>
     c4c:	mov	x2, #0x6                   	// #6
     c50:	add	x1, x1, #0x0
     c54:	bl	0 <__asan_internal_strncmp>
     c58:	cbnz	w0, c88 <d_print_comp_inner+0x33c>
     c5c:	ldr	x2, [x20, #16]
     c60:	mov	w1, w21
     c64:	mov	x0, x19
     c68:	bl	2170 <d_print_comp>
     c6c:	adrp	x1, 0 <is_fnqual_component_type>
     c70:	mov	x0, x19
     c74:	add	x1, x1, #0x0
     c78:	bl	338 <d_append_string>
     c7c:	str	x24, [x19, #296]
     c80:	str	x23, [x19, #368]
     c84:	b	974 <d_print_comp_inner+0x28>
     c88:	mov	x0, x19
     c8c:	mov	x2, x22
     c90:	mov	w1, w21
     c94:	bl	2170 <d_print_comp>
     c98:	ldrb	w0, [x19, #264]
     c9c:	cmp	w0, #0x3c
     ca0:	b.ne	cb0 <d_print_comp_inner+0x364>  // b.any
     ca4:	mov	x0, x19
     ca8:	mov	w1, #0x20                  	// #32
     cac:	bl	280 <d_append_char>
     cb0:	mov	x0, x19
     cb4:	mov	w1, #0x3c                  	// #60
     cb8:	bl	280 <d_append_char>
     cbc:	ldr	x2, [x20, #16]
     cc0:	mov	x0, x19
     cc4:	mov	w1, w21
     cc8:	bl	2170 <d_print_comp>
     ccc:	ldrb	w0, [x19, #264]
     cd0:	cmp	w0, #0x3e
     cd4:	b.ne	ce4 <d_print_comp_inner+0x398>  // b.any
     cd8:	mov	x0, x19
     cdc:	mov	w1, #0x20                  	// #32
     ce0:	bl	280 <d_append_char>
     ce4:	mov	x0, x19
     ce8:	mov	w1, #0x3e                  	// #62
     cec:	bl	280 <d_append_char>
     cf0:	b	c7c <d_print_comp_inner+0x330>
     cf4:	ldr	w0, [x19, #312]
     cf8:	cbz	w0, d24 <d_print_comp_inner+0x3d8>
     cfc:	mov	x0, x19
     d00:	mov	x2, #0x5                   	// #5
     d04:	adrp	x1, 0 <is_fnqual_component_type>
     d08:	add	x1, x1, #0x0
     d0c:	bl	2c4 <d_append_buffer>
     d10:	ldr	x1, [x20, #8]
     d14:	mov	x0, x19
     d18:	add	w1, w1, #0x1
     d1c:	bl	36c <d_append_num>
     d20:	b	974 <d_print_comp_inner+0x28>
     d24:	add	x1, x20, #0x8
     d28:	mov	x0, x19
     d2c:	bl	858 <d_lookup_template_argument.isra.0>
     d30:	mov	x2, x0
     d34:	cbz	x0, 96c <d_print_comp_inner+0x20>
     d38:	ldr	w1, [x0]
     d3c:	cmp	w1, #0x2f
     d40:	b.ne	d58 <d_print_comp_inner+0x40c>  // b.any
     d44:	ldr	w1, [x19, #316]
     d48:	tbnz	w1, #31, d58 <d_print_comp_inner+0x40c>
     d4c:	bl	724 <d_index_template_argument.part.0>
     d50:	mov	x2, x0
     d54:	cbz	x0, 96c <d_print_comp_inner+0x20>
     d58:	ldr	x20, [x19, #288]
     d5c:	mov	w1, w21
     d60:	ldr	x0, [x20]
     d64:	str	x0, [x19, #288]
     d68:	mov	x0, x19
     d6c:	bl	2170 <d_print_comp>
     d70:	str	x20, [x19, #288]
     d74:	b	974 <d_print_comp_inner+0x28>
     d78:	mov	x0, x19
     d7c:	adrp	x1, 0 <is_fnqual_component_type>
     d80:	add	x1, x1, #0x0
     d84:	bl	338 <d_append_string>
     d88:	ldr	x2, [x20, #8]
     d8c:	mov	w1, w21
     d90:	mov	x0, x19
     d94:	bl	2170 <d_print_comp>
     d98:	b	974 <d_print_comp_inner+0x28>
     d9c:	ldr	x2, [x20, #16]
     da0:	mov	w1, w21
     da4:	mov	x0, x19
     da8:	bl	2170 <d_print_comp>
     dac:	b	974 <d_print_comp_inner+0x28>
     db0:	mov	x0, x19
     db4:	mov	w1, #0x7e                  	// #126
     db8:	bl	280 <d_append_char>
     dbc:	ldr	x2, [x20, #16]
     dc0:	mov	w1, w21
     dc4:	mov	x0, x19
     dc8:	bl	2170 <d_print_comp>
     dcc:	b	974 <d_print_comp_inner+0x28>
     dd0:	mov	x0, x19
     dd4:	adrp	x1, 0 <is_fnqual_component_type>
     dd8:	add	x1, x1, #0x0
     ddc:	bl	338 <d_append_string>
     de0:	ldr	x2, [x20, #8]
     de4:	mov	w1, w21
     de8:	mov	x0, x19
     dec:	bl	2170 <d_print_comp>
     df0:	b	974 <d_print_comp_inner+0x28>
     df4:	mov	x0, x19
     df8:	adrp	x1, 0 <is_fnqual_component_type>
     dfc:	add	x1, x1, #0x0
     e00:	bl	338 <d_append_string>
     e04:	ldr	x2, [x20, #8]
     e08:	mov	w1, w21
     e0c:	mov	x0, x19
     e10:	bl	2170 <d_print_comp>
     e14:	b	974 <d_print_comp_inner+0x28>
     e18:	mov	x0, x19
     e1c:	adrp	x1, 0 <is_fnqual_component_type>
     e20:	add	x1, x1, #0x0
     e24:	bl	338 <d_append_string>
     e28:	ldr	x2, [x20, #8]
     e2c:	mov	w1, w21
     e30:	mov	x0, x19
     e34:	bl	2170 <d_print_comp>
     e38:	mov	x0, x19
     e3c:	adrp	x1, 0 <is_fnqual_component_type>
     e40:	add	x1, x1, #0x0
     e44:	bl	338 <d_append_string>
     e48:	ldr	x2, [x20, #16]
     e4c:	mov	w1, w21
     e50:	mov	x0, x19
     e54:	bl	2170 <d_print_comp>
     e58:	b	974 <d_print_comp_inner+0x28>
     e5c:	mov	x0, x19
     e60:	adrp	x1, 0 <is_fnqual_component_type>
     e64:	add	x1, x1, #0x0
     e68:	bl	338 <d_append_string>
     e6c:	ldr	x2, [x20, #8]
     e70:	mov	w1, w21
     e74:	mov	x0, x19
     e78:	bl	2170 <d_print_comp>
     e7c:	b	974 <d_print_comp_inner+0x28>
     e80:	mov	x0, x19
     e84:	adrp	x1, 0 <is_fnqual_component_type>
     e88:	add	x1, x1, #0x0
     e8c:	bl	338 <d_append_string>
     e90:	ldr	x2, [x20, #8]
     e94:	mov	w1, w21
     e98:	mov	x0, x19
     e9c:	bl	2170 <d_print_comp>
     ea0:	b	974 <d_print_comp_inner+0x28>
     ea4:	mov	x0, x19
     ea8:	adrp	x1, 0 <is_fnqual_component_type>
     eac:	add	x1, x1, #0x0
     eb0:	bl	338 <d_append_string>
     eb4:	ldr	x2, [x20, #8]
     eb8:	mov	w1, w21
     ebc:	mov	x0, x19
     ec0:	bl	2170 <d_print_comp>
     ec4:	b	974 <d_print_comp_inner+0x28>
     ec8:	mov	x0, x19
     ecc:	adrp	x1, 0 <is_fnqual_component_type>
     ed0:	add	x1, x1, #0x0
     ed4:	bl	338 <d_append_string>
     ed8:	ldr	x2, [x20, #8]
     edc:	mov	w1, w21
     ee0:	mov	x0, x19
     ee4:	bl	2170 <d_print_comp>
     ee8:	b	974 <d_print_comp_inner+0x28>
     eec:	mov	x0, x19
     ef0:	adrp	x1, 0 <is_fnqual_component_type>
     ef4:	add	x1, x1, #0x0
     ef8:	bl	338 <d_append_string>
     efc:	ldr	x2, [x20, #8]
     f00:	mov	w1, w21
     f04:	mov	x0, x19
     f08:	bl	2170 <d_print_comp>
     f0c:	b	974 <d_print_comp_inner+0x28>
     f10:	mov	x0, x19
     f14:	adrp	x1, 0 <is_fnqual_component_type>
     f18:	add	x1, x1, #0x0
     f1c:	bl	338 <d_append_string>
     f20:	ldr	x2, [x20, #8]
     f24:	mov	w1, w21
     f28:	mov	x0, x19
     f2c:	bl	2170 <d_print_comp>
     f30:	b	974 <d_print_comp_inner+0x28>
     f34:	mov	x0, x19
     f38:	adrp	x1, 0 <is_fnqual_component_type>
     f3c:	add	x1, x1, #0x0
     f40:	bl	338 <d_append_string>
     f44:	ldr	x2, [x20, #8]
     f48:	mov	w1, w21
     f4c:	mov	x0, x19
     f50:	bl	2170 <d_print_comp>
     f54:	b	974 <d_print_comp_inner+0x28>
     f58:	mov	x0, x19
     f5c:	adrp	x1, 0 <is_fnqual_component_type>
     f60:	add	x1, x1, #0x0
     f64:	bl	338 <d_append_string>
     f68:	ldr	x2, [x20, #8]
     f6c:	mov	w1, w21
     f70:	mov	x0, x19
     f74:	bl	2170 <d_print_comp>
     f78:	b	974 <d_print_comp_inner+0x28>
     f7c:	mov	x0, x19
     f80:	adrp	x1, 0 <is_fnqual_component_type>
     f84:	add	x1, x1, #0x0
     f88:	bl	338 <d_append_string>
     f8c:	ldr	x2, [x20, #8]
     f90:	mov	w1, w21
     f94:	mov	x0, x19
     f98:	bl	2170 <d_print_comp>
     f9c:	b	974 <d_print_comp_inner+0x28>
     fa0:	mov	x0, x19
     fa4:	adrp	x1, 0 <is_fnqual_component_type>
     fa8:	add	x1, x1, #0x0
     fac:	bl	338 <d_append_string>
     fb0:	ldr	x2, [x20, #8]
     fb4:	mov	w1, w21
     fb8:	mov	x0, x19
     fbc:	bl	2170 <d_print_comp>
     fc0:	b	974 <d_print_comp_inner+0x28>
     fc4:	mov	x0, x19
     fc8:	adrp	x1, 0 <is_fnqual_component_type>
     fcc:	add	x1, x1, #0x0
     fd0:	bl	338 <d_append_string>
     fd4:	ldr	x2, [x20, #16]
     fd8:	mov	w1, w21
     fdc:	mov	x0, x19
     fe0:	bl	2170 <d_print_comp>
     fe4:	mov	x0, x19
     fe8:	adrp	x1, 0 <is_fnqual_component_type>
     fec:	add	x1, x1, #0x0
     ff0:	bl	338 <d_append_string>
     ff4:	ldr	x2, [x20, #8]
     ff8:	mov	w1, w21
     ffc:	mov	x0, x19
    1000:	bl	2170 <d_print_comp>
    1004:	b	974 <d_print_comp_inner+0x28>
    1008:	mov	x0, x19
    100c:	adrp	x1, 0 <is_fnqual_component_type>
    1010:	add	x1, x1, #0x0
    1014:	bl	338 <d_append_string>
    1018:	ldr	x2, [x20, #8]
    101c:	mov	w1, w21
    1020:	mov	x0, x19
    1024:	bl	2170 <d_print_comp>
    1028:	b	974 <d_print_comp_inner+0x28>
    102c:	mov	x0, x19
    1030:	adrp	x1, 0 <is_fnqual_component_type>
    1034:	add	x1, x1, #0x0
    1038:	bl	338 <d_append_string>
    103c:	ldr	x2, [x20, #8]
    1040:	mov	w1, w21
    1044:	mov	x0, x19
    1048:	bl	2170 <d_print_comp>
    104c:	b	974 <d_print_comp_inner+0x28>
    1050:	mov	x0, x19
    1054:	adrp	x1, 0 <is_fnqual_component_type>
    1058:	add	x1, x1, #0x0
    105c:	bl	338 <d_append_string>
    1060:	ldr	x2, [x20, #8]
    1064:	mov	w1, w21
    1068:	mov	x0, x19
    106c:	bl	2170 <d_print_comp>
    1070:	b	974 <d_print_comp_inner+0x28>
    1074:	ldrsw	x2, [x20, #16]
    1078:	mov	x0, x19
    107c:	ldr	x1, [x20, #8]
    1080:	bl	2c4 <d_append_buffer>
    1084:	b	974 <d_print_comp_inner+0x28>
    1088:	ldr	x2, [x19, #296]
    108c:	cbnz	x2, 10f0 <d_print_comp_inner+0x7a4>
    1090:	mov	w22, #0x0                   	// #0
    1094:	ldr	x0, [x19, #296]
    1098:	stp	x0, x20, [sp, #96]
    109c:	add	x0, sp, #0x60
    10a0:	str	x0, [x19, #296]
    10a4:	ldr	x0, [x19, #288]
    10a8:	str	wzr, [sp, #112]
    10ac:	str	x0, [sp, #120]
    10b0:	cbnz	x2, 10b8 <d_print_comp_inner+0x76c>
    10b4:	ldr	x2, [x20, #8]
    10b8:	mov	x0, x19
    10bc:	mov	w1, w21
    10c0:	bl	2170 <d_print_comp>
    10c4:	ldr	w0, [sp, #112]
    10c8:	cbnz	w0, 10dc <d_print_comp_inner+0x790>
    10cc:	mov	x2, x20
    10d0:	mov	w1, w21
    10d4:	mov	x0, x19
    10d8:	bl	21fc <d_print_mod>
    10dc:	ldr	x0, [sp, #96]
    10e0:	str	x0, [x19, #296]
    10e4:	cbz	w22, 974 <d_print_comp_inner+0x28>
    10e8:	str	x23, [x19, #288]
    10ec:	b	974 <d_print_comp_inner+0x28>
    10f0:	ldr	w22, [x2, #16]
    10f4:	cbnz	w22, 1128 <d_print_comp_inner+0x7dc>
    10f8:	ldr	x1, [x2, #8]
    10fc:	ldr	w1, [x1]
    1100:	sub	w3, w1, #0x19
    1104:	cmp	w3, #0x2
    1108:	b.hi	12a0 <d_print_comp_inner+0x954>  // b.pmore
    110c:	cmp	w0, w1
    1110:	b.ne	1128 <d_print_comp_inner+0x7dc>  // b.any
    1114:	ldr	x2, [x20, #8]
    1118:	mov	w1, w21
    111c:	mov	x0, x19
    1120:	bl	2170 <d_print_comp>
    1124:	b	974 <d_print_comp_inner+0x28>
    1128:	ldr	x2, [x2]
    112c:	b	108c <d_print_comp_inner+0x740>
    1130:	ldr	w22, [x19, #312]
    1134:	ldr	x2, [x20, #8]
    1138:	cbnz	w22, 1270 <d_print_comp_inner+0x924>
    113c:	ldr	w0, [x2]
    1140:	cmp	w0, #0x5
    1144:	b.ne	1274 <d_print_comp_inner+0x928>  // b.any
    1148:	ldr	w0, [x19, #344]
    114c:	mov	x1, #0x0                   	// #0
    1150:	cmp	w0, w1
    1154:	b.gt	1170 <d_print_comp_inner+0x824>
    1158:	ldr	w1, [x19, #348]
    115c:	cmp	w0, w1
    1160:	b.lt	1198 <d_print_comp_inner+0x84c>  // b.tstop
    1164:	mov	w0, #0x1                   	// #1
    1168:	str	w0, [x19, #304]
    116c:	b	974 <d_print_comp_inner+0x28>
    1170:	ldr	x4, [x19, #336]
    1174:	lsl	x3, x1, #4
    1178:	ldr	x3, [x4, x3]
    117c:	add	x5, x4, x1, lsl #4
    1180:	add	x1, x1, #0x1
    1184:	cmp	x2, x3
    1188:	b.ne	1150 <d_print_comp_inner+0x804>  // b.any
    118c:	ldr	x1, [x19, #328]
    1190:	mov	x0, x1
    1194:	b	1258 <d_print_comp_inner+0x90c>
    1198:	ldr	x3, [x19, #336]
    119c:	sbfiz	x4, x0, #4, #32
    11a0:	add	x1, x3, w0, sxtw #4
    11a4:	add	w0, w0, #0x1
    11a8:	str	w0, [x19, #344]
    11ac:	add	x0, x1, #0x8
    11b0:	str	x2, [x3, x4]
    11b4:	ldr	x4, [x19, #288]
    11b8:	cbnz	x4, 1200 <d_print_comp_inner+0x8b4>
    11bc:	str	xzr, [x0]
    11c0:	add	x1, x2, #0x8
    11c4:	mov	x0, x19
    11c8:	bl	858 <d_lookup_template_argument.isra.0>
    11cc:	mov	x2, x0
    11d0:	cbz	x0, 11f4 <d_print_comp_inner+0x8a8>
    11d4:	ldr	w1, [x0]
    11d8:	cmp	w1, #0x2f
    11dc:	b.ne	1274 <d_print_comp_inner+0x928>  // b.any
    11e0:	ldr	w1, [x19, #316]
    11e4:	tbnz	w1, #31, 1274 <d_print_comp_inner+0x928>
    11e8:	bl	724 <d_index_template_argument.part.0>
    11ec:	mov	x2, x0
    11f0:	cbnz	x0, 1274 <d_print_comp_inner+0x928>
    11f4:	cbz	w22, 96c <d_print_comp_inner+0x20>
    11f8:	str	x23, [x19, #288]
    11fc:	b	96c <d_print_comp_inner+0x20>
    1200:	ldr	w3, [x19, #360]
    1204:	ldr	w1, [x19, #364]
    1208:	cmp	w3, w1
    120c:	b.ge	1164 <d_print_comp_inner+0x818>  // b.tcont
    1210:	ldr	x1, [x19, #352]
    1214:	add	x1, x1, w3, sxtw #4
    1218:	add	w3, w3, #0x1
    121c:	str	w3, [x19, #360]
    1220:	ldr	x3, [x4, #8]
    1224:	str	x3, [x1, #8]
    1228:	str	x1, [x0]
    122c:	mov	x0, x1
    1230:	ldr	x4, [x4]
    1234:	b	11b8 <d_print_comp_inner+0x86c>
    1238:	ldr	x3, [x0]
    123c:	cmp	x3, x2
    1240:	b.eq	11c0 <d_print_comp_inner+0x874>  // b.none
    1244:	cmp	x3, x20
    1248:	b.ne	1254 <d_print_comp_inner+0x908>  // b.any
    124c:	cmp	x0, x1
    1250:	b.ne	11c0 <d_print_comp_inner+0x874>  // b.any
    1254:	ldr	x0, [x0, #8]
    1258:	cbnz	x0, 1238 <d_print_comp_inner+0x8ec>
    125c:	ldr	x0, [x5, #8]
    1260:	mov	w22, #0x1                   	// #1
    1264:	ldr	x23, [x19, #288]
    1268:	str	x0, [x19, #288]
    126c:	b	11c0 <d_print_comp_inner+0x874>
    1270:	mov	w22, #0x0                   	// #0
    1274:	ldr	w0, [x2]
    1278:	cmp	w0, #0x23
    127c:	b.eq	12a8 <d_print_comp_inner+0x95c>  // b.none
    1280:	ldr	w1, [x20]
    1284:	cmp	w0, w1
    1288:	b.eq	12a8 <d_print_comp_inner+0x95c>  // b.none
    128c:	cmp	w0, #0x24
    1290:	b.ne	12a0 <d_print_comp_inner+0x954>  // b.any
    1294:	ldr	x2, [x2, #8]
    1298:	b	1094 <d_print_comp_inner+0x748>
    129c:	mov	w22, #0x0                   	// #0
    12a0:	mov	x2, #0x0                   	// #0
    12a4:	b	1094 <d_print_comp_inner+0x748>
    12a8:	mov	x20, x2
    12ac:	b	12a0 <d_print_comp_inner+0x954>
    12b0:	ldr	x0, [x20, #8]
    12b4:	tbnz	w21, #2, 12cc <d_print_comp_inner+0x980>
    12b8:	ldrsw	x2, [x0, #8]
    12bc:	ldr	x1, [x0]
    12c0:	mov	x0, x19
    12c4:	bl	2c4 <d_append_buffer>
    12c8:	b	974 <d_print_comp_inner+0x28>
    12cc:	ldrsw	x2, [x0, #24]
    12d0:	ldr	x1, [x0, #16]
    12d4:	mov	x0, x19
    12d8:	bl	2c4 <d_append_buffer>
    12dc:	b	974 <d_print_comp_inner+0x28>
    12e0:	ldr	x2, [x20, #8]
    12e4:	mov	w1, w21
    12e8:	mov	x0, x19
    12ec:	bl	2170 <d_print_comp>
    12f0:	b	974 <d_print_comp_inner+0x28>
    12f4:	and	w22, w21, #0x20
    12f8:	tbz	w21, #5, 1310 <d_print_comp_inner+0x9c4>
    12fc:	ldr	x3, [x19, #296]
    1300:	add	x2, x20, #0x10
    1304:	and	w1, w21, #0xffffff9f
    1308:	mov	x0, x19
    130c:	bl	23c4 <d_print_function_type.isra.0>
    1310:	ldr	x2, [x20, #8]
    1314:	cbz	x2, 1388 <d_print_comp_inner+0xa3c>
    1318:	and	w1, w21, #0xffffff9f
    131c:	cbz	w22, 132c <d_print_comp_inner+0x9e0>
    1320:	mov	x0, x19
    1324:	bl	2170 <d_print_comp>
    1328:	b	974 <d_print_comp_inner+0x28>
    132c:	tbnz	w21, #6, 1370 <d_print_comp_inner+0xa24>
    1330:	ldr	x0, [x19, #296]
    1334:	stp	x0, x20, [sp, #96]
    1338:	add	x0, sp, #0x60
    133c:	str	x0, [x19, #296]
    1340:	ldr	x0, [x19, #288]
    1344:	str	wzr, [sp, #112]
    1348:	str	x0, [sp, #120]
    134c:	mov	x0, x19
    1350:	bl	2170 <d_print_comp>
    1354:	ldr	x0, [sp, #96]
    1358:	str	x0, [x19, #296]
    135c:	ldr	w0, [sp, #112]
    1360:	cbnz	w0, 974 <d_print_comp_inner+0x28>
    1364:	mov	x0, x19
    1368:	mov	w1, #0x20                  	// #32
    136c:	bl	280 <d_append_char>
    1370:	ldr	x3, [x19, #296]
    1374:	add	x2, x20, #0x10
    1378:	and	w1, w21, #0xffffff9f
    137c:	mov	x0, x19
    1380:	bl	23c4 <d_print_function_type.isra.0>
    1384:	b	974 <d_print_comp_inner+0x28>
    1388:	cbnz	w22, 974 <d_print_comp_inner+0x28>
    138c:	b	1370 <d_print_comp_inner+0xa24>
    1390:	ldp	x0, x23, [x19, #288]
    1394:	mov	w22, #0x1                   	// #1
    1398:	mov	w6, w22
    139c:	str	x0, [sp, #120]
    13a0:	add	x4, sp, #0x60
    13a4:	stp	x23, x20, [sp, #96]
    13a8:	str	wzr, [sp, #112]
    13ac:	mov	x0, x23
    13b0:	str	x4, [x19, #296]
    13b4:	cbz	x0, 13cc <d_print_comp_inner+0xa80>
    13b8:	ldr	x1, [x0, #8]
    13bc:	ldr	w1, [x1]
    13c0:	sub	w1, w1, #0x19
    13c4:	cmp	w1, #0x2
    13c8:	b.ls	140c <d_print_comp_inner+0xac0>  // b.plast
    13cc:	ldr	x2, [x20, #16]
    13d0:	mov	x0, x19
    13d4:	mov	w1, w21
    13d8:	bl	2170 <d_print_comp>
    13dc:	str	x23, [x19, #296]
    13e0:	ldr	w0, [sp, #112]
    13e4:	cbnz	w0, 974 <d_print_comp_inner+0x28>
    13e8:	add	x23, sp, #0x68
    13ec:	cmp	w22, #0x1
    13f0:	b.ne	145c <d_print_comp_inner+0xb10>  // b.any
    13f4:	ldr	x3, [x19, #296]
    13f8:	add	x2, x20, #0x8
    13fc:	mov	w1, w21
    1400:	mov	x0, x19
    1404:	bl	2678 <d_print_array_type.isra.0>
    1408:	b	974 <d_print_comp_inner+0x28>
    140c:	ldr	w1, [x0, #16]
    1410:	cbnz	w1, 1454 <d_print_comp_inner+0xb08>
    1414:	cmp	w22, #0x3
    1418:	b.ls	1428 <d_print_comp_inner+0xadc>  // b.plast
    141c:	mov	w0, #0x1                   	// #1
    1420:	str	w0, [x19, #304]
    1424:	b	974 <d_print_comp_inner+0x28>
    1428:	ubfiz	x5, x22, #5, #32
    142c:	add	w22, w22, #0x1
    1430:	add	x1, x4, x5
    1434:	ldp	x2, x3, [x0]
    1438:	stp	x2, x3, [x1]
    143c:	ldp	x2, x3, [x0, #16]
    1440:	stp	x2, x3, [x1, #16]
    1444:	ldr	x2, [x19, #296]
    1448:	str	x2, [x4, x5]
    144c:	str	x1, [x19, #296]
    1450:	str	w6, [x0, #16]
    1454:	ldr	x0, [x0]
    1458:	b	13b4 <d_print_comp_inner+0xa68>
    145c:	sub	w22, w22, #0x1
    1460:	mov	w1, w21
    1464:	ubfiz	x0, x22, #5, #32
    1468:	ldr	x2, [x23, x0]
    146c:	mov	x0, x19
    1470:	bl	21fc <d_print_mod>
    1474:	b	13ec <d_print_comp_inner+0xaa0>
    1478:	ldr	x2, [x20, #16]
    147c:	mov	w1, w21
    1480:	ldr	x0, [x19, #296]
    1484:	stp	x0, x20, [sp, #96]
    1488:	add	x0, sp, #0x60
    148c:	str	x0, [x19, #296]
    1490:	ldr	x0, [x19, #288]
    1494:	str	wzr, [sp, #112]
    1498:	str	x0, [sp, #120]
    149c:	mov	x0, x19
    14a0:	bl	2170 <d_print_comp>
    14a4:	ldr	w0, [sp, #112]
    14a8:	cbnz	w0, 14bc <d_print_comp_inner+0xb70>
    14ac:	mov	x2, x20
    14b0:	mov	w1, w21
    14b4:	mov	x0, x19
    14b8:	bl	21fc <d_print_mod>
    14bc:	ldr	x0, [sp, #96]
    14c0:	str	x0, [x19, #296]
    14c4:	b	974 <d_print_comp_inner+0x28>
    14c8:	ldrsh	w0, [x20, #18]
    14cc:	cbz	w0, 14e0 <d_print_comp_inner+0xb94>
    14d0:	adrp	x1, 0 <is_fnqual_component_type>
    14d4:	mov	x0, x19
    14d8:	add	x1, x1, #0x0
    14dc:	bl	338 <d_append_string>
    14e0:	ldr	x2, [x20, #8]
    14e4:	adrp	x0, 188 <d_count_templates_scopes+0x4>
    14e8:	ldr	x0, [x0]
    14ec:	ldr	x1, [x2, #8]
    14f0:	add	x0, x0, #0x100
    14f4:	cmp	x1, x0
    14f8:	b.eq	1514 <d_print_comp_inner+0xbc8>  // b.none
    14fc:	mov	w1, w21
    1500:	mov	x0, x19
    1504:	bl	2170 <d_print_comp>
    1508:	mov	x0, x19
    150c:	mov	w1, #0x20                  	// #32
    1510:	bl	280 <d_append_char>
    1514:	ldrsh	w0, [x20, #16]
    1518:	cbz	w0, 1530 <d_print_comp_inner+0xbe4>
    151c:	mov	x0, x19
    1520:	adrp	x1, 0 <is_fnqual_component_type>
    1524:	add	x1, x1, #0x0
    1528:	bl	338 <d_append_string>
    152c:	b	974 <d_print_comp_inner+0x28>
    1530:	mov	x0, x19
    1534:	adrp	x1, 0 <is_fnqual_component_type>
    1538:	add	x1, x1, #0x0
    153c:	bl	338 <d_append_string>
    1540:	b	974 <d_print_comp_inner+0x28>
    1544:	ldr	x2, [x20, #8]
    1548:	cbz	x2, 1558 <d_print_comp_inner+0xc0c>
    154c:	mov	w1, w21
    1550:	mov	x0, x19
    1554:	bl	2170 <d_print_comp>
    1558:	ldr	x0, [x20, #16]
    155c:	cbz	x0, 974 <d_print_comp_inner+0x28>
    1560:	ldr	x0, [x19, #256]
    1564:	cmp	x0, #0xfd
    1568:	b.ls	1574 <d_print_comp_inner+0xc28>  // b.plast
    156c:	mov	x0, x19
    1570:	bl	244 <d_print_flush>
    1574:	mov	x0, x19
    1578:	adrp	x1, 0 <is_fnqual_component_type>
    157c:	add	x1, x1, #0x0
    1580:	bl	338 <d_append_string>
    1584:	ldr	x2, [x20, #16]
    1588:	mov	x0, x19
    158c:	mov	w1, w21
    1590:	ldr	x22, [x19, #256]
    1594:	ldr	x23, [x19, #320]
    1598:	bl	2170 <d_print_comp>
    159c:	ldr	x0, [x19, #320]
    15a0:	cmp	x0, x23
    15a4:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    15a8:	ldr	x0, [x19, #256]
    15ac:	cmp	x0, x22
    15b0:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    15b4:	sub	x0, x0, #0x2
    15b8:	str	x0, [x19, #256]
    15bc:	b	974 <d_print_comp_inner+0x28>
    15c0:	ldp	x2, x20, [x20, #8]
    15c4:	cbz	x2, 15d4 <d_print_comp_inner+0xc88>
    15c8:	mov	w1, w21
    15cc:	mov	x0, x19
    15d0:	bl	2170 <d_print_comp>
    15d4:	mov	x0, x19
    15d8:	mov	w1, #0x7b                  	// #123
    15dc:	bl	280 <d_append_char>
    15e0:	mov	x2, x20
    15e4:	mov	w1, w21
    15e8:	mov	x0, x19
    15ec:	bl	2170 <d_print_comp>
    15f0:	mov	x0, x19
    15f4:	mov	w1, #0x7d                  	// #125
    15f8:	bl	280 <d_append_char>
    15fc:	b	974 <d_print_comp_inner+0x28>
    1600:	ldr	x21, [x20, #8]
    1604:	mov	x0, x19
    1608:	adrp	x1, 0 <is_fnqual_component_type>
    160c:	add	x1, x1, #0x0
    1610:	ldr	w20, [x21, #16]
    1614:	bl	338 <d_append_string>
    1618:	ldr	x0, [x21, #8]
    161c:	ldrb	w0, [x0]
    1620:	sub	w0, w0, #0x61
    1624:	and	w0, w0, #0xff
    1628:	cmp	w0, #0x19
    162c:	b.hi	163c <d_print_comp_inner+0xcf0>  // b.pmore
    1630:	mov	x0, x19
    1634:	mov	w1, #0x20                  	// #32
    1638:	bl	280 <d_append_char>
    163c:	ldr	x1, [x21, #8]
    1640:	add	x0, x1, w20, sxtw
    1644:	ldurb	w0, [x0, #-1]
    1648:	cmp	w0, #0x20
    164c:	cset	w0, eq  // eq = none
    1650:	sub	w20, w20, w0
    1654:	mov	x0, x19
    1658:	sxtw	x2, w20
    165c:	bl	2c4 <d_append_buffer>
    1660:	b	974 <d_print_comp_inner+0x28>
    1664:	mov	x0, x19
    1668:	adrp	x1, 0 <is_fnqual_component_type>
    166c:	add	x1, x1, #0x0
    1670:	bl	338 <d_append_string>
    1674:	ldr	x2, [x20, #16]
    1678:	mov	w1, w21
    167c:	mov	x0, x19
    1680:	bl	2170 <d_print_comp>
    1684:	b	974 <d_print_comp_inner+0x28>
    1688:	mov	x0, x19
    168c:	adrp	x1, 0 <is_fnqual_component_type>
    1690:	add	x1, x1, #0x0
    1694:	bl	338 <d_append_string>
    1698:	ldr	x0, [x19, #368]
    169c:	cbz	x0, 16b0 <d_print_comp_inner+0xd64>
    16a0:	ldr	x1, [x19, #288]
    16a4:	stp	x1, x0, [sp, #96]
    16a8:	add	x1, sp, #0x60
    16ac:	str	x1, [x19, #288]
    16b0:	ldr	x2, [x20, #8]
    16b4:	ldr	w0, [x2]
    16b8:	cmp	w0, #0x4
    16bc:	b.eq	16e0 <d_print_comp_inner+0xd94>  // b.none
    16c0:	mov	x0, x19
    16c4:	mov	w1, w21
    16c8:	bl	2170 <d_print_comp>
    16cc:	ldr	x0, [x19, #368]
    16d0:	cbz	x0, 974 <d_print_comp_inner+0x28>
    16d4:	ldr	x0, [sp, #96]
    16d8:	str	x0, [x19, #288]
    16dc:	b	974 <d_print_comp_inner+0x28>
    16e0:	ldr	x2, [x2, #8]
    16e4:	mov	x0, x19
    16e8:	mov	w1, w21
    16ec:	bl	2170 <d_print_comp>
    16f0:	ldr	x0, [x19, #368]
    16f4:	cbz	x0, 1700 <d_print_comp_inner+0xdb4>
    16f8:	ldr	x0, [sp, #96]
    16fc:	str	x0, [x19, #288]
    1700:	ldrb	w0, [x19, #264]
    1704:	cmp	w0, #0x3c
    1708:	b.ne	1718 <d_print_comp_inner+0xdcc>  // b.any
    170c:	mov	x0, x19
    1710:	mov	w1, #0x20                  	// #32
    1714:	bl	280 <d_append_char>
    1718:	mov	x0, x19
    171c:	mov	w1, #0x3c                  	// #60
    1720:	bl	280 <d_append_char>
    1724:	ldr	x0, [x20, #8]
    1728:	mov	w1, w21
    172c:	ldr	x2, [x0, #16]
    1730:	mov	x0, x19
    1734:	bl	2170 <d_print_comp>
    1738:	ldrb	w0, [x19, #264]
    173c:	cmp	w0, #0x3e
    1740:	b.ne	1750 <d_print_comp_inner+0xe04>  // b.any
    1744:	mov	x0, x19
    1748:	mov	w1, #0x20                  	// #32
    174c:	bl	280 <d_append_char>
    1750:	mov	x0, x19
    1754:	mov	w1, #0x3e                  	// #62
    1758:	bl	280 <d_append_char>
    175c:	b	974 <d_print_comp_inner+0x28>
    1760:	ldr	x2, [x20, #8]
    1764:	mov	w1, w21
    1768:	mov	x0, x19
    176c:	bl	2760 <d_print_expr_op>
    1770:	b	974 <d_print_comp_inner+0x28>
    1774:	ldp	x23, x20, [x20, #8]
    1778:	ldr	w0, [x23]
    177c:	cmp	w0, #0x32
    1780:	b.ne	1888 <d_print_comp_inner+0xf3c>  // b.any
    1784:	ldr	x0, [x23, #8]
    1788:	adrp	x1, 0 <is_fnqual_component_type>
    178c:	add	x1, x1, #0x0
    1790:	ldr	x22, [x0]
    1794:	mov	x0, x22
    1798:	bl	0 <__asan_internal_strcmp>
    179c:	cbnz	w0, 17cc <d_print_comp_inner+0xe80>
    17a0:	ldr	w0, [x20]
    17a4:	cmp	w0, #0x3
    17a8:	b.ne	17cc <d_print_comp_inner+0xe80>  // b.any
    17ac:	ldr	x0, [x20, #8]
    17b0:	ldr	w1, [x0]
    17b4:	cmp	w1, #0x1
    17b8:	b.ne	17cc <d_print_comp_inner+0xe80>  // b.any
    17bc:	ldr	x1, [x20, #16]
    17c0:	ldr	w1, [x1]
    17c4:	cmp	w1, #0x29
    17c8:	csel	x20, x20, x0, ne  // ne = any
    17cc:	ldr	w0, [x20]
    17d0:	cmp	w0, #0x39
    17d4:	b.ne	17fc <d_print_comp_inner+0xeb0>  // b.any
    17d8:	ldr	x2, [x20, #8]
    17dc:	mov	w1, w21
    17e0:	mov	x0, x19
    17e4:	bl	2780 <d_print_subexpr>
    17e8:	mov	x2, x23
    17ec:	mov	w1, w21
    17f0:	mov	x0, x19
    17f4:	bl	2760 <d_print_expr_op>
    17f8:	b	974 <d_print_comp_inner+0x28>
    17fc:	cbz	x22, 188c <d_print_comp_inner+0xf40>
    1800:	adrp	x1, 0 <is_fnqual_component_type>
    1804:	mov	x0, x22
    1808:	add	x1, x1, #0x0
    180c:	bl	0 <__asan_internal_strcmp>
    1810:	cbnz	w0, 2154 <d_print_comp_inner+0x1808>
    1814:	mov	x1, x20
    1818:	mov	x0, x19
    181c:	bl	884 <d_find_pack>
    1820:	bl	308 <d_pack_length>
    1824:	mov	w1, w0
    1828:	mov	x0, x19
    182c:	bl	36c <d_append_num>
    1830:	b	974 <d_print_comp_inner+0x28>
    1834:	ldr	x0, [x20, #8]
    1838:	cbz	x0, 1870 <d_print_comp_inner+0xf24>
    183c:	ldr	w1, [x0]
    1840:	cmp	w1, #0x4b
    1844:	b.ne	1880 <d_print_comp_inner+0xf34>  // b.any
    1848:	ldr	x1, [x0, #8]
    184c:	mov	x0, x19
    1850:	bl	884 <d_find_pack>
    1854:	bl	308 <d_pack_length>
    1858:	add	w3, w3, w0
    185c:	ldr	x20, [x20, #16]
    1860:	cbz	x20, 1870 <d_print_comp_inner+0xf24>
    1864:	ldr	w0, [x20]
    1868:	cmp	w0, #0x2f
    186c:	b.eq	1834 <d_print_comp_inner+0xee8>  // b.none
    1870:	mov	w1, w3
    1874:	mov	x0, x19
    1878:	bl	36c <d_append_num>
    187c:	b	974 <d_print_comp_inner+0x28>
    1880:	add	w3, w3, #0x1
    1884:	b	185c <d_print_comp_inner+0xf10>
    1888:	mov	x22, #0x0                   	// #0
    188c:	ldr	w0, [x23]
    1890:	cmp	w0, #0x34
    1894:	b.eq	18d4 <d_print_comp_inner+0xf88>  // b.none
    1898:	mov	x2, x23
    189c:	mov	w1, w21
    18a0:	mov	x0, x19
    18a4:	bl	2760 <d_print_expr_op>
    18a8:	cbz	x22, 1900 <d_print_comp_inner+0xfb4>
    18ac:	adrp	x1, 0 <is_fnqual_component_type>
    18b0:	mov	x0, x22
    18b4:	add	x1, x1, #0x0
    18b8:	bl	0 <__asan_internal_strcmp>
    18bc:	cbnz	w0, 2114 <d_print_comp_inner+0x17c8>
    18c0:	mov	x2, x20
    18c4:	mov	w1, w21
    18c8:	mov	x0, x19
    18cc:	bl	2170 <d_print_comp>
    18d0:	b	974 <d_print_comp_inner+0x28>
    18d4:	mov	x0, x19
    18d8:	mov	w1, #0x28                  	// #40
    18dc:	bl	280 <d_append_char>
    18e0:	ldr	x2, [x23, #8]
    18e4:	mov	w1, w21
    18e8:	mov	x0, x19
    18ec:	bl	2170 <d_print_comp>
    18f0:	mov	x0, x19
    18f4:	mov	w1, #0x29                  	// #41
    18f8:	bl	280 <d_append_char>
    18fc:	b	18a8 <d_print_comp_inner+0xf5c>
    1900:	mov	x2, x20
    1904:	mov	w1, w21
    1908:	mov	x0, x19
    190c:	bl	2780 <d_print_subexpr>
    1910:	b	974 <d_print_comp_inner+0x28>
    1914:	ldr	x0, [x20, #16]
    1918:	ldr	w0, [x0]
    191c:	cmp	w0, #0x39
    1920:	b.ne	96c <d_print_comp_inner+0x20>  // b.any
    1924:	ldr	x2, [x20, #8]
    1928:	ldr	x0, [x2, #8]
    192c:	bl	64c <op_is_new_cast.isra.0>
    1930:	cbz	w0, 1994 <d_print_comp_inner+0x1048>
    1934:	mov	w1, w21
    1938:	mov	x0, x19
    193c:	bl	2760 <d_print_expr_op>
    1940:	mov	x0, x19
    1944:	mov	w1, #0x3c                  	// #60
    1948:	bl	280 <d_append_char>
    194c:	ldr	x0, [x20, #16]
    1950:	mov	w1, w21
    1954:	ldr	x2, [x0, #8]
    1958:	mov	x0, x19
    195c:	bl	2170 <d_print_comp>
    1960:	mov	x0, x19
    1964:	adrp	x1, 0 <is_fnqual_component_type>
    1968:	add	x1, x1, #0x0
    196c:	bl	338 <d_append_string>
    1970:	ldr	x0, [x20, #16]
    1974:	mov	w1, w21
    1978:	ldr	x2, [x0, #16]
    197c:	mov	x0, x19
    1980:	bl	2170 <d_print_comp>
    1984:	mov	x0, x19
    1988:	mov	w1, #0x29                  	// #41
    198c:	bl	280 <d_append_char>
    1990:	b	974 <d_print_comp_inner+0x28>
    1994:	mov	x2, x20
    1998:	mov	w1, w21
    199c:	mov	x0, x19
    19a0:	bl	280c <d_maybe_print_fold_expression>
    19a4:	cbnz	w0, 974 <d_print_comp_inner+0x28>
    19a8:	ldr	x0, [x20, #8]
    19ac:	ldr	w1, [x0]
    19b0:	cmp	w1, #0x32
    19b4:	b.ne	19e4 <d_print_comp_inner+0x1098>  // b.any
    19b8:	ldr	x0, [x0, #8]
    19bc:	ldr	w1, [x0, #16]
    19c0:	cmp	w1, #0x1
    19c4:	b.ne	19e4 <d_print_comp_inner+0x1098>  // b.any
    19c8:	ldr	x0, [x0, #8]
    19cc:	ldrb	w0, [x0]
    19d0:	cmp	w0, #0x3e
    19d4:	b.ne	19e4 <d_print_comp_inner+0x1098>  // b.any
    19d8:	mov	x0, x19
    19dc:	mov	w1, #0x28                  	// #40
    19e0:	bl	280 <d_append_char>
    19e4:	ldr	x0, [x20, #8]
    19e8:	adrp	x22, 0 <is_fnqual_component_type>
    19ec:	add	x1, x22, #0x0
    19f0:	ldr	x0, [x0, #8]
    19f4:	ldr	x0, [x0]
    19f8:	bl	0 <__asan_internal_strcmp>
    19fc:	ldr	x2, [x20, #16]
    1a00:	cbnz	w0, 1ac4 <d_print_comp_inner+0x1178>
    1a04:	ldr	x0, [x2, #8]
    1a08:	ldr	w1, [x0]
    1a0c:	cmp	w1, #0x3
    1a10:	b.ne	1ac4 <d_print_comp_inner+0x1178>  // b.any
    1a14:	ldr	x1, [x0, #16]
    1a18:	ldr	w1, [x1]
    1a1c:	cmp	w1, #0x29
    1a20:	b.eq	1a2c <d_print_comp_inner+0x10e0>  // b.none
    1a24:	mov	w1, #0x1                   	// #1
    1a28:	str	w1, [x19, #304]
    1a2c:	ldr	x2, [x0, #8]
    1a30:	mov	w1, w21
    1a34:	mov	x0, x19
    1a38:	bl	2780 <d_print_subexpr>
    1a3c:	ldr	x0, [x20, #8]
    1a40:	adrp	x1, 0 <is_fnqual_component_type>
    1a44:	add	x1, x1, #0x0
    1a48:	ldr	x0, [x0, #8]
    1a4c:	ldr	x0, [x0]
    1a50:	bl	0 <__asan_internal_strcmp>
    1a54:	cbnz	w0, 1acc <d_print_comp_inner+0x1180>
    1a58:	mov	x0, x19
    1a5c:	mov	w1, #0x5b                  	// #91
    1a60:	bl	280 <d_append_char>
    1a64:	ldr	x0, [x20, #16]
    1a68:	mov	w1, w21
    1a6c:	ldr	x2, [x0, #16]
    1a70:	mov	x0, x19
    1a74:	bl	2170 <d_print_comp>
    1a78:	mov	x0, x19
    1a7c:	mov	w1, #0x5d                  	// #93
    1a80:	bl	280 <d_append_char>
    1a84:	ldr	x0, [x20, #8]
    1a88:	ldr	w1, [x0]
    1a8c:	cmp	w1, #0x32
    1a90:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    1a94:	ldr	x0, [x0, #8]
    1a98:	ldr	w1, [x0, #16]
    1a9c:	cmp	w1, #0x1
    1aa0:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    1aa4:	ldr	x0, [x0, #8]
    1aa8:	ldrb	w0, [x0]
    1aac:	cmp	w0, #0x3e
    1ab0:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    1ab4:	mov	x0, x19
    1ab8:	mov	w1, #0x29                  	// #41
    1abc:	bl	280 <d_append_char>
    1ac0:	b	974 <d_print_comp_inner+0x28>
    1ac4:	ldr	x2, [x2, #8]
    1ac8:	b	1a30 <d_print_comp_inner+0x10e4>
    1acc:	ldr	x0, [x20, #8]
    1ad0:	add	x1, x22, #0x0
    1ad4:	ldr	x0, [x0, #8]
    1ad8:	ldr	x0, [x0]
    1adc:	bl	0 <__asan_internal_strcmp>
    1ae0:	cbz	w0, 1af4 <d_print_comp_inner+0x11a8>
    1ae4:	ldr	x2, [x20, #8]
    1ae8:	mov	w1, w21
    1aec:	mov	x0, x19
    1af0:	bl	2760 <d_print_expr_op>
    1af4:	ldr	x0, [x20, #16]
    1af8:	mov	w1, w21
    1afc:	ldr	x2, [x0, #16]
    1b00:	mov	x0, x19
    1b04:	bl	2780 <d_print_subexpr>
    1b08:	b	1a84 <d_print_comp_inner+0x1138>
    1b0c:	mov	w0, #0x1                   	// #1
    1b10:	str	w0, [x19, #304]
    1b14:	b	974 <d_print_comp_inner+0x28>
    1b18:	ldr	x0, [x20, #16]
    1b1c:	ldr	w1, [x0]
    1b20:	cmp	w1, #0x3b
    1b24:	b.ne	96c <d_print_comp_inner+0x20>  // b.any
    1b28:	ldr	x0, [x0, #16]
    1b2c:	ldr	w0, [x0]
    1b30:	cmp	w0, #0x3c
    1b34:	b.ne	96c <d_print_comp_inner+0x20>  // b.any
    1b38:	mov	x2, x20
    1b3c:	mov	w1, w21
    1b40:	mov	x0, x19
    1b44:	bl	280c <d_maybe_print_fold_expression>
    1b48:	cbnz	w0, 974 <d_print_comp_inner+0x28>
    1b4c:	ldp	x22, x0, [x20, #8]
    1b50:	adrp	x1, 0 <is_fnqual_component_type>
    1b54:	add	x1, x1, #0x0
    1b58:	ldp	x20, x0, [x0, #8]
    1b5c:	ldp	x24, x23, [x0, #8]
    1b60:	ldr	x0, [x22, #8]
    1b64:	ldr	x0, [x0]
    1b68:	bl	0 <__asan_internal_strcmp>
    1b6c:	cbnz	w0, 1bc4 <d_print_comp_inner+0x1278>
    1b70:	mov	x2, x20
    1b74:	mov	w1, w21
    1b78:	mov	x0, x19
    1b7c:	bl	2780 <d_print_subexpr>
    1b80:	mov	x2, x22
    1b84:	mov	w1, w21
    1b88:	mov	x0, x19
    1b8c:	bl	2760 <d_print_expr_op>
    1b90:	mov	x2, x24
    1b94:	mov	w1, w21
    1b98:	mov	x0, x19
    1b9c:	bl	2780 <d_print_subexpr>
    1ba0:	mov	x0, x19
    1ba4:	adrp	x1, 0 <is_fnqual_component_type>
    1ba8:	add	x1, x1, #0x0
    1bac:	bl	338 <d_append_string>
    1bb0:	mov	x2, x23
    1bb4:	mov	w1, w21
    1bb8:	mov	x0, x19
    1bbc:	bl	2780 <d_print_subexpr>
    1bc0:	b	974 <d_print_comp_inner+0x28>
    1bc4:	mov	x0, x19
    1bc8:	adrp	x1, 0 <is_fnqual_component_type>
    1bcc:	add	x1, x1, #0x0
    1bd0:	bl	338 <d_append_string>
    1bd4:	ldr	x0, [x20, #8]
    1bd8:	cbz	x0, 1bf8 <d_print_comp_inner+0x12ac>
    1bdc:	mov	x2, x20
    1be0:	mov	w1, w21
    1be4:	mov	x0, x19
    1be8:	bl	2780 <d_print_subexpr>
    1bec:	mov	x0, x19
    1bf0:	mov	w1, #0x20                  	// #32
    1bf4:	bl	280 <d_append_char>
    1bf8:	mov	x2, x24
    1bfc:	mov	w1, w21
    1c00:	mov	x0, x19
    1c04:	bl	2170 <d_print_comp>
    1c08:	cbz	x23, 974 <d_print_comp_inner+0x28>
    1c0c:	mov	x2, x23
    1c10:	mov	w1, w21
    1c14:	mov	x0, x19
    1c18:	bl	2780 <d_print_subexpr>
    1c1c:	b	974 <d_print_comp_inner+0x28>
    1c20:	ldr	x1, [x20, #8]
    1c24:	ldr	w2, [x1]
    1c28:	cmp	w2, #0x27
    1c2c:	b.ne	1dd8 <d_print_comp_inner+0x148c>  // b.any
    1c30:	ldr	x1, [x1, #8]
    1c34:	ldr	w22, [x1, #28]
    1c38:	cmp	w22, #0x6
    1c3c:	b.hi	1c98 <d_print_comp_inner+0x134c>  // b.pmore
    1c40:	cbz	w22, 1ca0 <d_print_comp_inner+0x1354>
    1c44:	ldr	x1, [x20, #16]
    1c48:	ldr	w1, [x1]
    1c4c:	cbnz	w1, 1ca0 <d_print_comp_inner+0x1354>
    1c50:	cmp	w0, #0x3e
    1c54:	b.ne	1c64 <d_print_comp_inner+0x1318>  // b.any
    1c58:	mov	x0, x19
    1c5c:	mov	w1, #0x2d                  	// #45
    1c60:	bl	280 <d_append_char>
    1c64:	ldr	x2, [x20, #16]
    1c68:	mov	w1, w21
    1c6c:	mov	x0, x19
    1c70:	sub	w22, w22, #0x2
    1c74:	bl	2170 <d_print_comp>
    1c78:	cmp	w22, #0x4
    1c7c:	b.hi	974 <d_print_comp_inner+0x28>  // b.pmore
    1c80:	adrp	x0, 0 <is_fnqual_component_type>
    1c84:	add	x0, x0, #0x0
    1c88:	ldrb	w0, [x0, w22, uxtw]
    1c8c:	adr	x1, 1c98 <d_print_comp_inner+0x134c>
    1c90:	add	x0, x1, w0, sxtb #2
    1c94:	br	x0
    1c98:	cmp	w22, #0x7
    1c9c:	b.eq	1d78 <d_print_comp_inner+0x142c>  // b.none
    1ca0:	mov	x0, x19
    1ca4:	mov	w1, #0x28                  	// #40
    1ca8:	bl	280 <d_append_char>
    1cac:	ldr	x2, [x20, #8]
    1cb0:	mov	w1, w21
    1cb4:	mov	x0, x19
    1cb8:	bl	2170 <d_print_comp>
    1cbc:	mov	x0, x19
    1cc0:	mov	w1, #0x29                  	// #41
    1cc4:	bl	280 <d_append_char>
    1cc8:	ldr	w0, [x20]
    1ccc:	cmp	w0, #0x3e
    1cd0:	b.ne	1ce0 <d_print_comp_inner+0x1394>  // b.any
    1cd4:	mov	x0, x19
    1cd8:	mov	w1, #0x2d                  	// #45
    1cdc:	bl	280 <d_append_char>
    1ce0:	cmp	w22, #0x8
    1ce4:	b.ne	1cf4 <d_print_comp_inner+0x13a8>  // b.any
    1ce8:	mov	x0, x19
    1cec:	mov	w1, #0x5b                  	// #91
    1cf0:	bl	280 <d_append_char>
    1cf4:	ldr	x2, [x20, #16]
    1cf8:	mov	w1, w21
    1cfc:	mov	x0, x19
    1d00:	bl	2170 <d_print_comp>
    1d04:	cmp	w22, #0x8
    1d08:	b.ne	974 <d_print_comp_inner+0x28>  // b.any
    1d0c:	mov	x0, x19
    1d10:	mov	w1, #0x5d                  	// #93
    1d14:	bl	280 <d_append_char>
    1d18:	b	974 <d_print_comp_inner+0x28>
    1d1c:	mov	x0, x19
    1d20:	mov	w1, #0x75                  	// #117
    1d24:	bl	280 <d_append_char>
    1d28:	b	974 <d_print_comp_inner+0x28>
    1d2c:	mov	x0, x19
    1d30:	mov	w1, #0x6c                  	// #108
    1d34:	bl	280 <d_append_char>
    1d38:	b	974 <d_print_comp_inner+0x28>
    1d3c:	mov	x0, x19
    1d40:	adrp	x1, 0 <is_fnqual_component_type>
    1d44:	add	x1, x1, #0x0
    1d48:	bl	338 <d_append_string>
    1d4c:	b	974 <d_print_comp_inner+0x28>
    1d50:	mov	x0, x19
    1d54:	adrp	x1, 0 <is_fnqual_component_type>
    1d58:	add	x1, x1, #0x0
    1d5c:	bl	338 <d_append_string>
    1d60:	b	974 <d_print_comp_inner+0x28>
    1d64:	mov	x0, x19
    1d68:	adrp	x1, 0 <is_fnqual_component_type>
    1d6c:	add	x1, x1, #0x0
    1d70:	bl	338 <d_append_string>
    1d74:	b	974 <d_print_comp_inner+0x28>
    1d78:	ldr	x1, [x20, #16]
    1d7c:	ldr	w2, [x1]
    1d80:	cbnz	w2, 1ca0 <d_print_comp_inner+0x1354>
    1d84:	ldr	w2, [x1, #16]
    1d88:	cmp	w2, #0x1
    1d8c:	b.ne	1ca0 <d_print_comp_inner+0x1354>  // b.any
    1d90:	cmp	w0, #0x3d
    1d94:	b.ne	1ca0 <d_print_comp_inner+0x1354>  // b.any
    1d98:	ldr	x0, [x1, #8]
    1d9c:	ldrb	w0, [x0]
    1da0:	cmp	w0, #0x30
    1da4:	b.eq	1dc4 <d_print_comp_inner+0x1478>  // b.none
    1da8:	cmp	w0, #0x31
    1dac:	b.ne	1ca0 <d_print_comp_inner+0x1354>  // b.any
    1db0:	mov	x0, x19
    1db4:	adrp	x1, 0 <is_fnqual_component_type>
    1db8:	add	x1, x1, #0x0
    1dbc:	bl	338 <d_append_string>
    1dc0:	b	974 <d_print_comp_inner+0x28>
    1dc4:	mov	x0, x19
    1dc8:	adrp	x1, 0 <is_fnqual_component_type>
    1dcc:	add	x1, x1, #0x0
    1dd0:	bl	338 <d_append_string>
    1dd4:	b	974 <d_print_comp_inner+0x28>
    1dd8:	mov	w22, #0x0                   	// #0
    1ddc:	b	1ca0 <d_print_comp_inner+0x1354>
    1de0:	ldr	w1, [x20, #8]
    1de4:	mov	x0, x19
    1de8:	bl	36c <d_append_num>
    1dec:	b	974 <d_print_comp_inner+0x28>
    1df0:	mov	x0, x19
    1df4:	adrp	x1, 0 <is_fnqual_component_type>
    1df8:	add	x1, x1, #0x0
    1dfc:	bl	338 <d_append_string>
    1e00:	ldr	x2, [x20, #8]
    1e04:	mov	w1, w21
    1e08:	mov	x0, x19
    1e0c:	bl	2170 <d_print_comp>
    1e10:	b	974 <d_print_comp_inner+0x28>
    1e14:	ldr	x2, [x20, #8]
    1e18:	mov	w1, w21
    1e1c:	mov	x0, x19
    1e20:	bl	2170 <d_print_comp>
    1e24:	ldr	x2, [x20, #16]
    1e28:	mov	w1, w21
    1e2c:	mov	x0, x19
    1e30:	bl	2170 <d_print_comp>
    1e34:	b	974 <d_print_comp_inner+0x28>
    1e38:	ldrb	w1, [x20, #8]
    1e3c:	mov	x0, x19
    1e40:	bl	280 <d_append_char>
    1e44:	b	974 <d_print_comp_inner+0x28>
    1e48:	mov	x0, x19
    1e4c:	adrp	x1, 0 <is_fnqual_component_type>
    1e50:	add	x1, x1, #0x0
    1e54:	bl	338 <d_append_string>
    1e58:	ldr	x2, [x20, #8]
    1e5c:	mov	w1, w21
    1e60:	mov	x0, x19
    1e64:	bl	2170 <d_print_comp>
    1e68:	mov	x0, x19
    1e6c:	mov	w1, #0x29                  	// #41
    1e70:	bl	280 <d_append_char>
    1e74:	b	974 <d_print_comp_inner+0x28>
    1e78:	ldr	x1, [x20, #8]
    1e7c:	mov	x0, x19
    1e80:	bl	884 <d_find_pack>
    1e84:	cbnz	x0, 1eac <d_print_comp_inner+0x1560>
    1e88:	ldr	x2, [x20, #8]
    1e8c:	mov	w1, w21
    1e90:	mov	x0, x19
    1e94:	bl	2780 <d_print_subexpr>
    1e98:	mov	x0, x19
    1e9c:	adrp	x1, 0 <is_fnqual_component_type>
    1ea0:	add	x1, x1, #0x0
    1ea4:	bl	338 <d_append_string>
    1ea8:	b	974 <d_print_comp_inner+0x28>
    1eac:	bl	308 <d_pack_length>
    1eb0:	mov	w23, w0
    1eb4:	sub	w25, w0, #0x1
    1eb8:	ldr	x24, [x20, #8]
    1ebc:	adrp	x20, 0 <is_fnqual_component_type>
    1ec0:	add	x20, x20, #0x0
    1ec4:	cmp	w22, w23
    1ec8:	b.ge	974 <d_print_comp_inner+0x28>  // b.tcont
    1ecc:	str	w22, [x19, #316]
    1ed0:	mov	x2, x24
    1ed4:	mov	w1, w21
    1ed8:	mov	x0, x19
    1edc:	bl	2170 <d_print_comp>
    1ee0:	cmp	w25, w22
    1ee4:	b.le	1ef4 <d_print_comp_inner+0x15a8>
    1ee8:	mov	x1, x20
    1eec:	mov	x0, x19
    1ef0:	bl	338 <d_append_string>
    1ef4:	add	w22, w22, #0x1
    1ef8:	b	1ec4 <d_print_comp_inner+0x1578>
    1efc:	ldr	x20, [x20, #8]
    1f00:	cbnz	x20, 1f18 <d_print_comp_inner+0x15cc>
    1f04:	mov	x0, x19
    1f08:	adrp	x1, 0 <is_fnqual_component_type>
    1f0c:	add	x1, x1, #0x0
    1f10:	bl	338 <d_append_string>
    1f14:	b	974 <d_print_comp_inner+0x28>
    1f18:	mov	x0, x19
    1f1c:	adrp	x1, 0 <is_fnqual_component_type>
    1f20:	add	x1, x1, #0x0
    1f24:	bl	338 <d_append_string>
    1f28:	mov	w1, w20
    1f2c:	mov	x0, x19
    1f30:	bl	36c <d_append_num>
    1f34:	mov	x0, x19
    1f38:	mov	w1, #0x7d                  	// #125
    1f3c:	bl	280 <d_append_char>
    1f40:	b	974 <d_print_comp_inner+0x28>
    1f44:	mov	x0, x19
    1f48:	adrp	x1, 0 <is_fnqual_component_type>
    1f4c:	add	x1, x1, #0x0
    1f50:	bl	338 <d_append_string>
    1f54:	ldr	x2, [x20, #8]
    1f58:	mov	w1, w21
    1f5c:	mov	x0, x19
    1f60:	bl	2170 <d_print_comp>
    1f64:	b	974 <d_print_comp_inner+0x28>
    1f68:	mov	x0, x19
    1f6c:	adrp	x1, 0 <is_fnqual_component_type>
    1f70:	add	x1, x1, #0x0
    1f74:	bl	338 <d_append_string>
    1f78:	ldr	x2, [x20, #8]
    1f7c:	mov	w1, w21
    1f80:	mov	x0, x19
    1f84:	bl	2170 <d_print_comp>
    1f88:	b	974 <d_print_comp_inner+0x28>
    1f8c:	mov	x0, x19
    1f90:	adrp	x1, 0 <is_fnqual_component_type>
    1f94:	add	x1, x1, #0x0
    1f98:	bl	338 <d_append_string>
    1f9c:	ldr	w0, [x19, #312]
    1fa0:	mov	w1, w21
    1fa4:	ldr	x2, [x20, #8]
    1fa8:	add	w0, w0, #0x1
    1fac:	str	w0, [x19, #312]
    1fb0:	mov	x0, x19
    1fb4:	bl	2170 <d_print_comp>
    1fb8:	ldr	w0, [x19, #312]
    1fbc:	adrp	x1, 0 <is_fnqual_component_type>
    1fc0:	add	x1, x1, #0x0
    1fc4:	sub	w0, w0, #0x1
    1fc8:	str	w0, [x19, #312]
    1fcc:	mov	x0, x19
    1fd0:	bl	338 <d_append_string>
    1fd4:	ldr	w1, [x20, #16]
    1fd8:	mov	x0, x19
    1fdc:	add	w1, w1, #0x1
    1fe0:	bl	36c <d_append_num>
    1fe4:	mov	x0, x19
    1fe8:	mov	w1, #0x7d                  	// #125
    1fec:	bl	280 <d_append_char>
    1ff0:	b	974 <d_print_comp_inner+0x28>
    1ff4:	mov	x0, x19
    1ff8:	adrp	x1, 0 <is_fnqual_component_type>
    1ffc:	add	x1, x1, #0x0
    2000:	bl	338 <d_append_string>
    2004:	ldr	x1, [x20, #8]
    2008:	mov	x0, x19
    200c:	add	w1, w1, #0x1
    2010:	bl	36c <d_append_num>
    2014:	mov	x0, x19
    2018:	mov	w1, #0x7d                  	// #125
    201c:	bl	280 <d_append_char>
    2020:	b	974 <d_print_comp_inner+0x28>
    2024:	ldr	x2, [x20, #8]
    2028:	mov	w1, w21
    202c:	mov	x0, x19
    2030:	bl	2170 <d_print_comp>
    2034:	mov	x0, x19
    2038:	adrp	x1, 0 <is_fnqual_component_type>
    203c:	add	x1, x1, #0x0
    2040:	bl	338 <d_append_string>
    2044:	ldr	x2, [x20, #16]
    2048:	mov	w1, w21
    204c:	mov	x0, x19
    2050:	bl	2170 <d_print_comp>
    2054:	mov	x0, x19
    2058:	mov	w1, #0x5d                  	// #93
    205c:	bl	280 <d_append_char>
    2060:	b	974 <d_print_comp_inner+0x28>
    2064:	cmp	w5, #0x2
    2068:	b.ne	2098 <d_print_comp_inner+0x174c>  // b.any
    206c:	ldr	x22, [x22, #16]
    2070:	ldr	w0, [x22]
    2074:	cmp	w0, #0x47
    2078:	b.ne	2084 <d_print_comp_inner+0x1738>  // b.any
    207c:	ldr	x22, [x22, #8]
    2080:	cbz	x22, b9c <d_print_comp_inner+0x250>
    2084:	ubfiz	x0, x23, #5, #32
    2088:	add	x2, x2, x0
    208c:	ldr	w0, [x22]
    2090:	bl	0 <is_fnqual_component_type>
    2094:	cbnz	w0, bdc <d_print_comp_inner+0x290>
    2098:	ldr	w0, [x22]
    209c:	cmp	w0, #0x4
    20a0:	b.ne	20b0 <d_print_comp_inner+0x1764>  // b.any
    20a4:	add	x0, sp, #0x50
    20a8:	stp	x4, x22, [sp, #80]
    20ac:	str	x0, [x19, #288]
    20b0:	ldr	x2, [x20, #16]
    20b4:	mov	x0, x19
    20b8:	mov	w1, w21
    20bc:	bl	2170 <d_print_comp>
    20c0:	ldr	w0, [x22]
    20c4:	cmp	w0, #0x4
    20c8:	b.ne	20d4 <d_print_comp_inner+0x1788>  // b.any
    20cc:	ldr	x0, [sp, #80]
    20d0:	str	x0, [x19, #288]
    20d4:	add	x22, sp, #0x70
    20d8:	add	x25, sp, #0x68
    20dc:	sub	w23, w23, #0x1
    20e0:	ubfiz	x20, x23, #5, #32
    20e4:	ldr	w0, [x22, x20]
    20e8:	cbnz	w0, 2108 <d_print_comp_inner+0x17bc>
    20ec:	mov	x0, x19
    20f0:	mov	w1, #0x20                  	// #32
    20f4:	bl	280 <d_append_char>
    20f8:	ldr	x2, [x25, x20]
    20fc:	mov	w1, w21
    2100:	mov	x0, x19
    2104:	bl	21fc <d_print_mod>
    2108:	cbnz	w23, 20dc <d_print_comp_inner+0x1790>
    210c:	str	x24, [x19, #296]
    2110:	b	974 <d_print_comp_inner+0x28>
    2114:	adrp	x1, 0 <is_fnqual_component_type>
    2118:	mov	x0, x22
    211c:	add	x1, x1, #0x0
    2120:	bl	0 <__asan_internal_strcmp>
    2124:	cbnz	w0, 1900 <d_print_comp_inner+0xfb4>
    2128:	mov	x0, x19
    212c:	mov	w1, #0x28                  	// #40
    2130:	bl	280 <d_append_char>
    2134:	mov	x2, x20
    2138:	mov	w1, w21
    213c:	mov	x0, x19
    2140:	bl	2170 <d_print_comp>
    2144:	mov	x0, x19
    2148:	mov	w1, #0x29                  	// #41
    214c:	bl	280 <d_append_char>
    2150:	b	974 <d_print_comp_inner+0x28>
    2154:	mov	x0, x22
    2158:	adrp	x1, 0 <is_fnqual_component_type>
    215c:	add	x1, x1, #0x0
    2160:	bl	0 <__asan_internal_strcmp>
    2164:	mov	w3, w0
    2168:	cbnz	w0, 188c <d_print_comp_inner+0xf40>
    216c:	b	1864 <d_print_comp_inner+0xf18>

0000000000002170 <d_print_comp>:
    2170:	stp	x29, x30, [sp, #-48]!
    2174:	mov	x29, sp
    2178:	stp	x19, x20, [sp, #16]
    217c:	mov	x19, x0
    2180:	cbz	x2, 21a0 <d_print_comp+0x30>
    2184:	ldr	w4, [x2, #4]
    2188:	mov	x20, x2
    218c:	cmp	w4, #0x1
    2190:	b.gt	21a0 <d_print_comp+0x30>
    2194:	ldr	w3, [x0, #308]
    2198:	cmp	w3, #0x400
    219c:	b.le	21b4 <d_print_comp+0x44>
    21a0:	mov	w0, #0x1                   	// #1
    21a4:	str	w0, [x19, #304]
    21a8:	ldp	x19, x20, [sp, #16]
    21ac:	ldp	x29, x30, [sp], #48
    21b0:	ret
    21b4:	add	w4, w4, #0x1
    21b8:	add	w3, w3, #0x1
    21bc:	str	w4, [x2, #4]
    21c0:	str	w3, [x0, #308]
    21c4:	ldr	x3, [x0, #328]
    21c8:	stp	x2, x3, [sp, #32]
    21cc:	add	x3, sp, #0x20
    21d0:	str	x3, [x0, #328]
    21d4:	bl	94c <d_print_comp_inner>
    21d8:	ldr	x0, [sp, #40]
    21dc:	str	x0, [x19, #328]
    21e0:	ldr	w0, [x20, #4]
    21e4:	sub	w0, w0, #0x1
    21e8:	str	w0, [x20, #4]
    21ec:	ldr	w0, [x19, #308]
    21f0:	sub	w0, w0, #0x1
    21f4:	str	w0, [x19, #308]
    21f8:	b	21a8 <d_print_comp+0x38>

00000000000021fc <d_print_mod>:
    21fc:	stp	x29, x30, [sp, #-48]!
    2200:	mov	x29, sp
    2204:	stp	x19, x20, [sp, #16]
    2208:	mov	x20, x2
    220c:	ldr	w2, [x2]
    2210:	str	x21, [sp, #32]
    2214:	cmp	w2, #0x3
    2218:	b.eq	2380 <d_print_mod+0x184>  // b.none
    221c:	sub	w2, w2, #0x19
    2220:	mov	x19, x0
    2224:	mov	w21, w1
    2228:	cmp	w2, #0x37
    222c:	b.hi	23ac <d_print_mod+0x1b0>  // b.pmore
    2230:	adrp	x0, 0 <is_fnqual_component_type>
    2234:	add	x0, x0, #0x0
    2238:	ldrb	w0, [x0, w2, uxtw]
    223c:	adr	x1, 2248 <d_print_mod+0x4c>
    2240:	add	x0, x1, w0, sxtb #2
    2244:	br	x0
    2248:	adrp	x1, 0 <is_fnqual_component_type>
    224c:	add	x1, x1, #0x0
    2250:	mov	x0, x19
    2254:	ldp	x19, x20, [sp, #16]
    2258:	ldr	x21, [sp, #32]
    225c:	ldp	x29, x30, [sp], #48
    2260:	b	338 <d_append_string>
    2264:	adrp	x1, 0 <is_fnqual_component_type>
    2268:	add	x1, x1, #0x0
    226c:	b	2250 <d_print_mod+0x54>
    2270:	adrp	x1, 0 <is_fnqual_component_type>
    2274:	add	x1, x1, #0x0
    2278:	b	2250 <d_print_mod+0x54>
    227c:	adrp	x1, 0 <is_fnqual_component_type>
    2280:	add	x1, x1, #0x0
    2284:	b	2250 <d_print_mod+0x54>
    2288:	adrp	x1, 0 <is_fnqual_component_type>
    228c:	add	x1, x1, #0x0
    2290:	mov	x0, x19
    2294:	bl	338 <d_append_string>
    2298:	ldr	x0, [x20, #16]
    229c:	cbz	x0, 23b4 <d_print_mod+0x1b8>
    22a0:	mov	x0, x19
    22a4:	mov	w1, #0x28                  	// #40
    22a8:	bl	280 <d_append_char>
    22ac:	ldr	x2, [x20, #16]
    22b0:	mov	w1, w21
    22b4:	mov	x0, x19
    22b8:	bl	2170 <d_print_comp>
    22bc:	mov	w1, #0x29                  	// #41
    22c0:	b	22f4 <d_print_mod+0xf8>
    22c4:	adrp	x1, 0 <is_fnqual_component_type>
    22c8:	add	x1, x1, #0x0
    22cc:	b	2290 <d_print_mod+0x94>
    22d0:	mov	x0, x19
    22d4:	mov	w1, #0x20                  	// #32
    22d8:	bl	280 <d_append_char>
    22dc:	ldr	x2, [x20, #16]
    22e0:	mov	w1, w21
    22e4:	mov	x0, x19
    22e8:	b	2384 <d_print_mod+0x188>
    22ec:	tbnz	w21, #2, 23b4 <d_print_mod+0x1b8>
    22f0:	mov	w1, #0x2a                  	// #42
    22f4:	mov	x0, x19
    22f8:	ldp	x19, x20, [sp, #16]
    22fc:	ldr	x21, [sp, #32]
    2300:	ldp	x29, x30, [sp], #48
    2304:	b	280 <d_append_char>
    2308:	mov	x0, x19
    230c:	mov	w1, #0x20                  	// #32
    2310:	bl	280 <d_append_char>
    2314:	mov	w1, #0x26                  	// #38
    2318:	b	22f4 <d_print_mod+0xf8>
    231c:	mov	x0, x19
    2320:	mov	w1, #0x20                  	// #32
    2324:	bl	280 <d_append_char>
    2328:	adrp	x1, 0 <is_fnqual_component_type>
    232c:	add	x1, x1, #0x0
    2330:	b	2250 <d_print_mod+0x54>
    2334:	adrp	x1, 0 <is_fnqual_component_type>
    2338:	add	x1, x1, #0x0
    233c:	b	2250 <d_print_mod+0x54>
    2340:	adrp	x1, 0 <is_fnqual_component_type>
    2344:	add	x1, x1, #0x0
    2348:	b	2250 <d_print_mod+0x54>
    234c:	ldrb	w0, [x19, #264]
    2350:	cmp	w0, #0x28
    2354:	b.eq	2364 <d_print_mod+0x168>  // b.none
    2358:	mov	x0, x19
    235c:	mov	w1, #0x20                  	// #32
    2360:	bl	280 <d_append_char>
    2364:	ldr	x2, [x20, #8]
    2368:	mov	w1, w21
    236c:	mov	x0, x19
    2370:	bl	2170 <d_print_comp>
    2374:	adrp	x1, 0 <is_fnqual_component_type>
    2378:	add	x1, x1, #0x0
    237c:	b	2250 <d_print_mod+0x54>
    2380:	ldr	x2, [x20, #8]
    2384:	ldp	x19, x20, [sp, #16]
    2388:	ldr	x21, [sp, #32]
    238c:	ldp	x29, x30, [sp], #48
    2390:	b	2170 <d_print_comp>
    2394:	mov	x0, x19
    2398:	adrp	x1, 0 <is_fnqual_component_type>
    239c:	add	x1, x1, #0x0
    23a0:	bl	338 <d_append_string>
    23a4:	ldr	x2, [x20, #8]
    23a8:	b	22b0 <d_print_mod+0xb4>
    23ac:	mov	x2, x20
    23b0:	b	22e0 <d_print_mod+0xe4>
    23b4:	ldp	x19, x20, [sp, #16]
    23b8:	ldr	x21, [sp, #32]
    23bc:	ldp	x29, x30, [sp], #48
    23c0:	ret

00000000000023c4 <d_print_function_type.isra.0>:
    23c4:	stp	x29, x30, [sp, #-64]!
    23c8:	mov	x29, sp
    23cc:	stp	x19, x20, [sp, #16]
    23d0:	mov	x19, x0
    23d4:	mov	w20, w1
    23d8:	mov	x0, x3
    23dc:	stp	x21, x22, [sp, #32]
    23e0:	mov	x22, x2
    23e4:	mov	x21, x3
    23e8:	adrp	x2, 0 <is_fnqual_component_type>
    23ec:	add	x2, x2, #0x0
    23f0:	stp	x23, x24, [sp, #48]
    23f4:	cbnz	x0, 2400 <d_print_function_type.isra.0+0x3c>
    23f8:	mov	w23, #0x0                   	// #0
    23fc:	b	2470 <d_print_function_type.isra.0+0xac>
    2400:	ldr	w1, [x0, #16]
    2404:	cbnz	w1, 23f8 <d_print_function_type.isra.0+0x34>
    2408:	ldr	x1, [x0, #8]
    240c:	ldr	w1, [x1]
    2410:	sub	w1, w1, #0x19
    2414:	cmp	w1, #0x12
    2418:	b.hi	242c <d_print_function_type.isra.0+0x68>  // b.pmore
    241c:	ldrb	w1, [x2, w1, uxtw]
    2420:	adr	x3, 242c <d_print_function_type.isra.0+0x68>
    2424:	add	x1, x3, w1, sxtb #2
    2428:	br	x1
    242c:	ldr	x0, [x0]
    2430:	b	23f4 <d_print_function_type.isra.0+0x30>
    2434:	ldrb	w0, [x19, #264]
    2438:	and	w0, w0, #0xfffffffd
    243c:	and	w0, w0, #0xff
    2440:	cmp	w0, #0x28
    2444:	b.eq	2460 <d_print_function_type.isra.0+0x9c>  // b.none
    2448:	ldrb	w0, [x19, #264]
    244c:	cmp	w0, #0x20
    2450:	b.eq	2460 <d_print_function_type.isra.0+0x9c>  // b.none
    2454:	mov	x0, x19
    2458:	mov	w1, #0x20                  	// #32
    245c:	bl	280 <d_append_char>
    2460:	mov	w23, #0x1                   	// #1
    2464:	mov	x0, x19
    2468:	mov	w1, #0x28                  	// #40
    246c:	bl	280 <d_append_char>
    2470:	ldr	x24, [x19, #296]
    2474:	str	xzr, [x19, #296]
    2478:	mov	x2, x21
    247c:	mov	w1, w20
    2480:	mov	x0, x19
    2484:	mov	w3, #0x0                   	// #0
    2488:	bl	24f4 <d_print_mod_list>
    248c:	cbz	w23, 249c <d_print_function_type.isra.0+0xd8>
    2490:	mov	x0, x19
    2494:	mov	w1, #0x29                  	// #41
    2498:	bl	280 <d_append_char>
    249c:	mov	x0, x19
    24a0:	mov	w1, #0x28                  	// #40
    24a4:	bl	280 <d_append_char>
    24a8:	ldr	x2, [x22]
    24ac:	cbz	x2, 24bc <d_print_function_type.isra.0+0xf8>
    24b0:	mov	w1, w20
    24b4:	mov	x0, x19
    24b8:	bl	2170 <d_print_comp>
    24bc:	mov	x0, x19
    24c0:	mov	w1, #0x29                  	// #41
    24c4:	bl	280 <d_append_char>
    24c8:	mov	x2, x21
    24cc:	mov	w1, w20
    24d0:	mov	x0, x19
    24d4:	mov	w3, #0x1                   	// #1
    24d8:	bl	24f4 <d_print_mod_list>
    24dc:	ldp	x21, x22, [sp, #32]
    24e0:	str	x24, [x19, #296]
    24e4:	ldp	x19, x20, [sp, #16]
    24e8:	ldp	x23, x24, [sp, #48]
    24ec:	ldp	x29, x30, [sp], #64
    24f0:	ret

00000000000024f4 <d_print_mod_list>:
    24f4:	stp	x29, x30, [sp, #-64]!
    24f8:	mov	x29, sp
    24fc:	stp	x19, x20, [sp, #16]
    2500:	mov	x19, x0
    2504:	mov	x20, x2
    2508:	stp	x21, x22, [sp, #32]
    250c:	mov	w21, w1
    2510:	stp	x23, x24, [sp, #48]
    2514:	mov	w23, w3
    2518:	mov	w24, #0x1                   	// #1
    251c:	cbz	x20, 2580 <d_print_mod_list+0x8c>
    2520:	ldr	w0, [x19, #304]
    2524:	cbnz	w0, 2580 <d_print_mod_list+0x8c>
    2528:	ldr	w0, [x20, #16]
    252c:	cbnz	w0, 2548 <d_print_mod_list+0x54>
    2530:	ldr	x2, [x20, #8]
    2534:	ldr	w4, [x2]
    2538:	cbnz	w23, 2550 <d_print_mod_list+0x5c>
    253c:	mov	w0, w4
    2540:	bl	0 <is_fnqual_component_type>
    2544:	cbz	w0, 2550 <d_print_mod_list+0x5c>
    2548:	ldr	x20, [x20]
    254c:	b	251c <d_print_mod_list+0x28>
    2550:	ldr	x0, [x20, #24]
    2554:	cmp	w4, #0x29
    2558:	ldr	x22, [x19, #288]
    255c:	str	w24, [x20, #16]
    2560:	str	x0, [x19, #288]
    2564:	b.ne	2594 <d_print_mod_list+0xa0>  // b.any
    2568:	ldr	x3, [x20]
    256c:	add	x2, x2, #0x10
    2570:	mov	w1, w21
    2574:	mov	x0, x19
    2578:	bl	23c4 <d_print_function_type.isra.0>
    257c:	str	x22, [x19, #288]
    2580:	ldp	x19, x20, [sp, #16]
    2584:	ldp	x21, x22, [sp, #32]
    2588:	ldp	x23, x24, [sp, #48]
    258c:	ldp	x29, x30, [sp], #64
    2590:	ret
    2594:	cmp	w4, #0x2a
    2598:	b.ne	25b4 <d_print_mod_list+0xc0>  // b.any
    259c:	ldr	x3, [x20]
    25a0:	add	x2, x2, #0x8
    25a4:	mov	w1, w21
    25a8:	mov	x0, x19
    25ac:	bl	2678 <d_print_array_type.isra.0>
    25b0:	b	257c <d_print_mod_list+0x88>
    25b4:	cmp	w4, #0x2
    25b8:	b.ne	2664 <d_print_mod_list+0x170>  // b.any
    25bc:	ldr	x2, [x2, #8]
    25c0:	mov	w1, w21
    25c4:	ldr	x23, [x19, #296]
    25c8:	str	xzr, [x19, #296]
    25cc:	mov	x0, x19
    25d0:	bl	2170 <d_print_comp>
    25d4:	str	x23, [x19, #296]
    25d8:	tbnz	w21, #2, 2654 <d_print_mod_list+0x160>
    25dc:	adrp	x1, 0 <is_fnqual_component_type>
    25e0:	mov	x0, x19
    25e4:	add	x1, x1, #0x0
    25e8:	bl	338 <d_append_string>
    25ec:	ldr	x0, [x20, #8]
    25f0:	ldr	x20, [x0, #16]
    25f4:	ldr	w0, [x20]
    25f8:	cmp	w0, #0x47
    25fc:	b.ne	2634 <d_print_mod_list+0x140>  // b.any
    2600:	mov	x0, x19
    2604:	adrp	x1, 0 <is_fnqual_component_type>
    2608:	add	x1, x1, #0x0
    260c:	bl	338 <d_append_string>
    2610:	ldr	w1, [x20, #16]
    2614:	mov	x0, x19
    2618:	add	w1, w1, #0x1
    261c:	bl	36c <d_append_num>
    2620:	adrp	x1, 0 <is_fnqual_component_type>
    2624:	mov	x0, x19
    2628:	add	x1, x1, #0x0
    262c:	bl	338 <d_append_string>
    2630:	ldr	x20, [x20, #8]
    2634:	ldr	w0, [x20]
    2638:	bl	0 <is_fnqual_component_type>
    263c:	cbnz	w0, 2630 <d_print_mod_list+0x13c>
    2640:	mov	x2, x20
    2644:	mov	w1, w21
    2648:	mov	x0, x19
    264c:	bl	2170 <d_print_comp>
    2650:	b	257c <d_print_mod_list+0x88>
    2654:	mov	x0, x19
    2658:	mov	w1, #0x2e                  	// #46
    265c:	bl	280 <d_append_char>
    2660:	b	25ec <d_print_mod_list+0xf8>
    2664:	mov	w1, w21
    2668:	mov	x0, x19
    266c:	bl	21fc <d_print_mod>
    2670:	str	x22, [x19, #288]
    2674:	b	2548 <d_print_mod_list+0x54>

0000000000002678 <d_print_array_type.isra.0>:
    2678:	stp	x29, x30, [sp, #-64]!
    267c:	mov	x29, sp
    2680:	stp	x19, x20, [sp, #16]
    2684:	mov	x19, x0
    2688:	stp	x21, x22, [sp, #32]
    268c:	mov	w21, w1
    2690:	stp	x23, x24, [sp, #48]
    2694:	mov	x24, x2
    2698:	cbnz	x3, 26e4 <d_print_array_type.isra.0+0x6c>
    269c:	mov	x0, x19
    26a0:	mov	w1, #0x20                  	// #32
    26a4:	bl	280 <d_append_char>
    26a8:	mov	x0, x19
    26ac:	mov	w1, #0x5b                  	// #91
    26b0:	bl	280 <d_append_char>
    26b4:	ldr	x2, [x24]
    26b8:	cbz	x2, 26c8 <d_print_array_type.isra.0+0x50>
    26bc:	mov	w1, w21
    26c0:	mov	x0, x19
    26c4:	bl	2170 <d_print_comp>
    26c8:	mov	x0, x19
    26cc:	mov	w1, #0x5d                  	// #93
    26d0:	ldp	x19, x20, [sp, #16]
    26d4:	ldp	x21, x22, [sp, #32]
    26d8:	ldp	x23, x24, [sp, #48]
    26dc:	ldp	x29, x30, [sp], #64
    26e0:	b	280 <d_append_char>
    26e4:	mov	x20, x3
    26e8:	mov	x0, x3
    26ec:	ldr	w22, [x0, #16]
    26f0:	cbnz	w22, 271c <d_print_array_type.isra.0+0xa4>
    26f4:	ldr	x0, [x0, #8]
    26f8:	ldr	w0, [x0]
    26fc:	cmp	w0, #0x2a
    2700:	b.eq	2758 <d_print_array_type.isra.0+0xe0>  // b.none
    2704:	mov	x0, x19
    2708:	adrp	x1, 0 <is_fnqual_component_type>
    270c:	mov	w23, #0x1                   	// #1
    2710:	add	x1, x1, #0x0
    2714:	bl	338 <d_append_string>
    2718:	b	2728 <d_print_array_type.isra.0+0xb0>
    271c:	ldr	x0, [x0]
    2720:	cbnz	x0, 26ec <d_print_array_type.isra.0+0x74>
    2724:	mov	w23, #0x0                   	// #0
    2728:	mov	w22, #0x1                   	// #1
    272c:	mov	x2, x20
    2730:	mov	w1, w21
    2734:	mov	x0, x19
    2738:	mov	w3, #0x0                   	// #0
    273c:	bl	24f4 <d_print_mod_list>
    2740:	cbz	w23, 2750 <d_print_array_type.isra.0+0xd8>
    2744:	mov	x0, x19
    2748:	mov	w1, #0x29                  	// #41
    274c:	bl	280 <d_append_char>
    2750:	cbnz	w22, 269c <d_print_array_type.isra.0+0x24>
    2754:	b	26a8 <d_print_array_type.isra.0+0x30>
    2758:	mov	w23, #0x0                   	// #0
    275c:	b	272c <d_print_array_type.isra.0+0xb4>

0000000000002760 <d_print_expr_op>:
    2760:	ldr	w4, [x2]
    2764:	cmp	w4, #0x32
    2768:	b.ne	277c <d_print_expr_op+0x1c>  // b.any
    276c:	ldr	x1, [x2, #8]
    2770:	ldrsw	x2, [x1, #16]
    2774:	ldr	x1, [x1, #8]
    2778:	b	2c4 <d_append_buffer>
    277c:	b	2170 <d_print_comp>

0000000000002780 <d_print_subexpr>:
    2780:	stp	x29, x30, [sp, #-48]!
    2784:	mov	x29, sp
    2788:	stp	x19, x20, [sp, #16]
    278c:	mov	x19, x0
    2790:	mov	x20, x2
    2794:	stp	x21, x22, [sp, #32]
    2798:	mov	w21, w1
    279c:	ldr	w1, [x2]
    27a0:	cmp	w1, #0x31
    27a4:	b.hi	27b8 <d_print_subexpr+0x38>  // b.pmore
    27a8:	mov	x0, #0x43                  	// #67
    27ac:	movk	x0, #0x2, lsl #48
    27b0:	lsr	x0, x0, x1
    27b4:	tbnz	w0, #0, 27f4 <d_print_subexpr+0x74>
    27b8:	mov	w22, #0x0                   	// #0
    27bc:	mov	x0, x19
    27c0:	mov	w1, #0x28                  	// #40
    27c4:	bl	280 <d_append_char>
    27c8:	mov	x2, x20
    27cc:	mov	w1, w21
    27d0:	mov	x0, x19
    27d4:	bl	2170 <d_print_comp>
    27d8:	cbnz	w22, 27fc <d_print_subexpr+0x7c>
    27dc:	mov	x0, x19
    27e0:	mov	w1, #0x29                  	// #41
    27e4:	ldp	x19, x20, [sp, #16]
    27e8:	ldp	x21, x22, [sp, #32]
    27ec:	ldp	x29, x30, [sp], #48
    27f0:	b	280 <d_append_char>
    27f4:	mov	w22, #0x1                   	// #1
    27f8:	b	27c8 <d_print_subexpr+0x48>
    27fc:	ldp	x19, x20, [sp, #16]
    2800:	ldp	x21, x22, [sp, #32]
    2804:	ldp	x29, x30, [sp], #48
    2808:	ret

000000000000280c <d_maybe_print_fold_expression>:
    280c:	stp	x29, x30, [sp, #-64]!
    2810:	mov	x29, sp
    2814:	stp	x19, x20, [sp, #16]
    2818:	mov	x19, x0
    281c:	mov	w20, w1
    2820:	ldr	x0, [x2, #8]
    2824:	stp	x21, x22, [sp, #32]
    2828:	stp	x23, x24, [sp, #48]
    282c:	ldr	x0, [x0, #8]
    2830:	ldr	x0, [x0]
    2834:	ldrb	w1, [x0]
    2838:	cmp	w1, #0x66
    283c:	b.ne	2988 <d_maybe_print_fold_expression+0x17c>  // b.any
    2840:	ldr	x1, [x2, #16]
    2844:	ldp	x22, x21, [x1, #8]
    2848:	ldr	w1, [x21]
    284c:	cmp	w1, #0x3c
    2850:	b.ne	28a4 <d_maybe_print_fold_expression+0x98>  // b.any
    2854:	ldr	x23, [x21, #16]
    2858:	ldr	x21, [x21, #8]
    285c:	mov	w1, #0xffffffff            	// #-1
    2860:	ldr	w24, [x19, #316]
    2864:	str	w1, [x19, #316]
    2868:	ldrb	w0, [x0, #1]
    286c:	cmp	w0, #0x6c
    2870:	b.eq	28f4 <d_maybe_print_fold_expression+0xe8>  // b.none
    2874:	b.hi	28ac <d_maybe_print_fold_expression+0xa0>  // b.pmore
    2878:	cmp	w0, #0x4c
    287c:	b.eq	2934 <d_maybe_print_fold_expression+0x128>  // b.none
    2880:	cmp	w0, #0x52
    2884:	b.eq	2934 <d_maybe_print_fold_expression+0x128>  // b.none
    2888:	mov	w0, #0x1                   	// #1
    288c:	str	w24, [x19, #316]
    2890:	ldp	x19, x20, [sp, #16]
    2894:	ldp	x21, x22, [sp, #32]
    2898:	ldp	x23, x24, [sp, #48]
    289c:	ldp	x29, x30, [sp], #64
    28a0:	ret
    28a4:	mov	x23, #0x0                   	// #0
    28a8:	b	285c <d_maybe_print_fold_expression+0x50>
    28ac:	cmp	w0, #0x72
    28b0:	b.ne	2888 <d_maybe_print_fold_expression+0x7c>  // b.any
    28b4:	mov	x0, x19
    28b8:	mov	w1, #0x28                  	// #40
    28bc:	bl	280 <d_append_char>
    28c0:	mov	x2, x21
    28c4:	mov	w1, w20
    28c8:	mov	x0, x19
    28cc:	bl	2780 <d_print_subexpr>
    28d0:	mov	x2, x22
    28d4:	mov	w1, w20
    28d8:	mov	x0, x19
    28dc:	bl	2760 <d_print_expr_op>
    28e0:	mov	x0, x19
    28e4:	adrp	x1, 0 <is_fnqual_component_type>
    28e8:	add	x1, x1, #0x0
    28ec:	bl	338 <d_append_string>
    28f0:	b	2888 <d_maybe_print_fold_expression+0x7c>
    28f4:	mov	x0, x19
    28f8:	adrp	x1, 0 <is_fnqual_component_type>
    28fc:	add	x1, x1, #0x0
    2900:	bl	338 <d_append_string>
    2904:	mov	x2, x22
    2908:	mov	w1, w20
    290c:	mov	x0, x19
    2910:	bl	2760 <d_print_expr_op>
    2914:	mov	x2, x21
    2918:	mov	w1, w20
    291c:	mov	x0, x19
    2920:	bl	2780 <d_print_subexpr>
    2924:	mov	x0, x19
    2928:	mov	w1, #0x29                  	// #41
    292c:	bl	280 <d_append_char>
    2930:	b	2888 <d_maybe_print_fold_expression+0x7c>
    2934:	mov	x0, x19
    2938:	mov	w1, #0x28                  	// #40
    293c:	bl	280 <d_append_char>
    2940:	mov	x2, x21
    2944:	mov	w1, w20
    2948:	mov	x0, x19
    294c:	bl	2780 <d_print_subexpr>
    2950:	mov	x2, x22
    2954:	mov	w1, w20
    2958:	mov	x0, x19
    295c:	bl	2760 <d_print_expr_op>
    2960:	mov	x0, x19
    2964:	adrp	x1, 0 <is_fnqual_component_type>
    2968:	add	x1, x1, #0x0
    296c:	bl	338 <d_append_string>
    2970:	mov	x2, x22
    2974:	mov	w1, w20
    2978:	mov	x0, x19
    297c:	bl	2760 <d_print_expr_op>
    2980:	mov	x2, x23
    2984:	b	2918 <d_maybe_print_fold_expression+0x10c>
    2988:	mov	w0, #0x0                   	// #0
    298c:	b	2890 <d_maybe_print_fold_expression+0x84>

0000000000002990 <__asan_cplus_demangle_fill_name>:
    2990:	cmp	x0, #0x0
    2994:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    2998:	b.eq	29b4 <__asan_cplus_demangle_fill_name+0x24>  // b.none
    299c:	cmp	w2, #0x0
    29a0:	b.le	29b4 <__asan_cplus_demangle_fill_name+0x24>
    29a4:	stp	xzr, x1, [x0]
    29a8:	str	w2, [x0, #16]
    29ac:	mov	w0, #0x1                   	// #1
    29b0:	ret
    29b4:	mov	w0, #0x0                   	// #0
    29b8:	b	29b0 <__asan_cplus_demangle_fill_name+0x20>

00000000000029bc <d_make_name>:
    29bc:	stp	x29, x30, [sp, #-32]!
    29c0:	mov	x4, x1
    29c4:	mov	w5, w2
    29c8:	mov	x29, sp
    29cc:	str	x19, [sp, #16]
    29d0:	bl	30 <d_make_empty>
    29d4:	mov	x19, x0
    29d8:	mov	w2, w5
    29dc:	mov	x1, x4
    29e0:	bl	2990 <__asan_cplus_demangle_fill_name>
    29e4:	cmp	w0, #0x0
    29e8:	csel	x0, x19, xzr, ne  // ne = any
    29ec:	ldr	x19, [sp, #16]
    29f0:	ldp	x29, x30, [sp], #32
    29f4:	ret

00000000000029f8 <d_source_name>:
    29f8:	stp	x29, x30, [sp, #-48]!
    29fc:	mov	x29, sp
    2a00:	stp	x19, x20, [sp, #16]
    2a04:	mov	x19, x0
    2a08:	add	x0, x0, #0x18
    2a0c:	str	x21, [sp, #32]
    2a10:	bl	3ac <d_number.isra.0>
    2a14:	cmp	w0, #0x0
    2a18:	b.le	2af8 <d_source_name+0x100>
    2a1c:	mov	w20, w0
    2a20:	sxtw	x1, w0
    2a24:	ldr	x0, [x19, #8]
    2a28:	ldr	x21, [x19, #24]
    2a2c:	sub	x0, x0, x21
    2a30:	cmp	x0, w20, sxtw
    2a34:	b.lt	2af0 <d_source_name+0xf8>  // b.tstop
    2a38:	ldr	w2, [x19, #16]
    2a3c:	add	x0, x21, x1
    2a40:	str	x0, [x19, #24]
    2a44:	tbz	w2, #2, 2a5c <d_source_name+0x64>
    2a48:	ldrb	w1, [x21, x1]
    2a4c:	cmp	w1, #0x24
    2a50:	b.ne	2a5c <d_source_name+0x64>  // b.any
    2a54:	add	x0, x0, #0x1
    2a58:	str	x0, [x19, #24]
    2a5c:	cmp	w20, #0x9
    2a60:	b.le	2ae4 <d_source_name+0xec>
    2a64:	adrp	x1, 0 <is_fnqual_component_type>
    2a68:	mov	x0, x21
    2a6c:	add	x1, x1, #0x0
    2a70:	mov	x2, #0x8                   	// #8
    2a74:	bl	0 <__asan_internal_memcmp>
    2a78:	cbnz	w0, 2ae4 <d_source_name+0xec>
    2a7c:	ldrb	w0, [x21, #8]
    2a80:	sub	w0, w0, #0x24
    2a84:	and	w0, w0, #0xff
    2a88:	cmp	w0, #0x3b
    2a8c:	b.hi	2ae4 <d_source_name+0xec>  // b.pmore
    2a90:	mov	x1, #0x401                 	// #1025
    2a94:	movk	x1, #0x800, lsl #48
    2a98:	lsr	x0, x1, x0
    2a9c:	tbz	w0, #0, 2ae4 <d_source_name+0xec>
    2aa0:	ldrb	w0, [x21, #9]
    2aa4:	cmp	w0, #0x4e
    2aa8:	b.ne	2ae4 <d_source_name+0xec>  // b.any
    2aac:	ldr	w0, [x19, #72]
    2ab0:	adrp	x1, 0 <is_fnqual_component_type>
    2ab4:	add	x1, x1, #0x0
    2ab8:	mov	w2, #0x15                  	// #21
    2abc:	add	w0, w0, #0x16
    2ac0:	sub	w20, w0, w20
    2ac4:	str	w20, [x19, #72]
    2ac8:	mov	x0, x19
    2acc:	bl	29bc <d_make_name>
    2ad0:	str	x0, [x19, #64]
    2ad4:	ldp	x19, x20, [sp, #16]
    2ad8:	ldr	x21, [sp, #32]
    2adc:	ldp	x29, x30, [sp], #48
    2ae0:	ret
    2ae4:	mov	w2, w20
    2ae8:	mov	x1, x21
    2aec:	b	2ac8 <d_source_name+0xd0>
    2af0:	mov	x0, #0x0                   	// #0
    2af4:	b	2ad0 <d_source_name+0xd8>
    2af8:	mov	x0, #0x0                   	// #0
    2afc:	b	2ad4 <d_source_name+0xdc>

0000000000002b00 <d_abi_tags>:
    2b00:	stp	x29, x30, [sp, #-48]!
    2b04:	mov	x29, sp
    2b08:	str	x21, [sp, #32]
    2b0c:	ldr	x21, [x0, #64]
    2b10:	stp	x19, x20, [sp, #16]
    2b14:	mov	x19, x0
    2b18:	mov	x20, x1
    2b1c:	ldr	x0, [x19, #24]
    2b20:	ldrb	w1, [x0]
    2b24:	cmp	w1, #0x42
    2b28:	b.eq	2b44 <d_abi_tags+0x44>  // b.none
    2b2c:	str	x21, [x19, #64]
    2b30:	mov	x0, x20
    2b34:	ldp	x19, x20, [sp, #16]
    2b38:	ldr	x21, [sp, #32]
    2b3c:	ldp	x29, x30, [sp], #48
    2b40:	ret
    2b44:	add	x0, x0, #0x1
    2b48:	str	x0, [x19, #24]
    2b4c:	mov	x0, x19
    2b50:	bl	29f8 <d_source_name>
    2b54:	mov	x3, x0
    2b58:	mov	x2, x20
    2b5c:	mov	x0, x19
    2b60:	mov	w1, #0x4c                  	// #76
    2b64:	bl	64 <d_make_comp>
    2b68:	mov	x20, x0
    2b6c:	b	2b1c <d_abi_tags+0x1c>

0000000000002b70 <d_substitution>:
    2b70:	stp	x29, x30, [sp, #-32]!
    2b74:	mov	x29, sp
    2b78:	ldr	x2, [x0, #24]
    2b7c:	str	x19, [sp, #16]
    2b80:	mov	x19, x0
    2b84:	ldrb	w0, [x2]
    2b88:	cmp	w0, #0x53
    2b8c:	b.ne	2d44 <d_substitution+0x1d4>  // b.any
    2b90:	add	x0, x2, #0x1
    2b94:	str	x0, [x19, #24]
    2b98:	ldrb	w0, [x2, #1]
    2b9c:	cbz	w0, 2c70 <d_substitution+0x100>
    2ba0:	add	x0, x2, #0x2
    2ba4:	str	x0, [x19, #24]
    2ba8:	ldrb	w0, [x2, #1]
    2bac:	sub	w2, w0, #0x30
    2bb0:	and	w2, w2, #0xff
    2bb4:	cmp	w2, #0x2f
    2bb8:	b.hi	2c70 <d_substitution+0x100>  // b.pmore
    2bbc:	mov	w3, #0xfffe03ff            	// #-130049
    2bc0:	movk	x3, #0x87ff, lsl #32
    2bc4:	lsr	x2, x3, x2
    2bc8:	tbz	w2, #0, 2c70 <d_substitution+0x100>
    2bcc:	cmp	w0, #0x5f
    2bd0:	b.ne	2c48 <d_substitution+0xd8>  // b.any
    2bd4:	mov	w0, #0x0                   	// #0
    2bd8:	ldr	w1, [x19, #56]
    2bdc:	cmp	w1, w0
    2be0:	b.ls	2d44 <d_substitution+0x1d4>  // b.plast
    2be4:	ldr	x1, [x19, #48]
    2be8:	ldr	x1, [x1, w0, uxtw #3]
    2bec:	mov	x0, x1
    2bf0:	ldr	x19, [sp, #16]
    2bf4:	ldp	x29, x30, [sp], #32
    2bf8:	ret
    2bfc:	mov	w2, w1
    2c00:	sub	w1, w0, #0x30
    2c04:	and	w1, w1, #0xff
    2c08:	cmp	w1, #0x9
    2c0c:	b.hi	2c54 <d_substitution+0xe4>  // b.pmore
    2c10:	madd	w0, w2, w3, w0
    2c14:	sub	w1, w0, #0x30
    2c18:	cmp	w2, w1
    2c1c:	b.hi	2d44 <d_substitution+0x1d4>  // b.pmore
    2c20:	ldr	x2, [x19, #24]
    2c24:	ldrb	w0, [x2]
    2c28:	cbz	w0, 2bfc <d_substitution+0x8c>
    2c2c:	add	x0, x2, #0x1
    2c30:	str	x0, [x19, #24]
    2c34:	ldrb	w0, [x2]
    2c38:	cmp	w0, #0x5f
    2c3c:	b.ne	2bfc <d_substitution+0x8c>  // b.any
    2c40:	add	w0, w1, #0x1
    2c44:	b	2bd8 <d_substitution+0x68>
    2c48:	mov	w2, #0x0                   	// #0
    2c4c:	mov	w3, #0x24                  	// #36
    2c50:	b	2c00 <d_substitution+0x90>
    2c54:	sub	w1, w0, #0x41
    2c58:	and	w1, w1, #0xff
    2c5c:	cmp	w1, #0x19
    2c60:	b.hi	2d44 <d_substitution+0x1d4>  // b.pmore
    2c64:	madd	w0, w2, w3, w0
    2c68:	sub	w1, w0, #0x37
    2c6c:	b	2c18 <d_substitution+0xa8>
    2c70:	ldr	w5, [x19, #16]
    2c74:	and	w1, w1, #0x1
    2c78:	ands	w2, w5, #0x8
    2c7c:	csel	w1, w1, wzr, eq  // eq = none
    2c80:	ubfx	x5, x5, #3, #1
    2c84:	cbz	w1, 2ca0 <d_substitution+0x130>
    2c88:	ldr	x1, [x19, #24]
    2c8c:	ldrb	w1, [x1]
    2c90:	sub	w1, w1, #0x43
    2c94:	and	w1, w1, #0xff
    2c98:	cmp	w1, #0x1
    2c9c:	csinc	w5, w5, wzr, hi  // hi = pmore
    2ca0:	adrp	x4, 0 <is_fnqual_component_type>
    2ca4:	add	x4, x4, #0x0
    2ca8:	mov	x1, #0x7                   	// #7
    2cac:	ldrb	w2, [x4]
    2cb0:	cmp	w2, w0
    2cb4:	b.ne	2d58 <d_substitution+0x1e8>  // b.any
    2cb8:	ldr	x6, [x4, #40]
    2cbc:	cbz	x6, 2ce4 <d_substitution+0x174>
    2cc0:	ldr	w7, [x4, #48]
    2cc4:	mov	x0, x19
    2cc8:	bl	30 <d_make_empty>
    2ccc:	cbz	x0, 2ce0 <d_substitution+0x170>
    2cd0:	mov	w1, #0x18                  	// #24
    2cd4:	str	w1, [x0]
    2cd8:	str	x6, [x0, #8]
    2cdc:	str	w7, [x0, #16]
    2ce0:	str	x0, [x19, #64]
    2ce4:	cbz	w5, 2d4c <d_substitution+0x1dc>
    2ce8:	ldr	x5, [x4, #24]
    2cec:	ldr	w4, [x4, #32]
    2cf0:	ldr	w0, [x19, #72]
    2cf4:	add	w0, w0, w4
    2cf8:	str	w0, [x19, #72]
    2cfc:	mov	x0, x19
    2d00:	bl	30 <d_make_empty>
    2d04:	mov	x1, x0
    2d08:	cbz	x0, 2d1c <d_substitution+0x1ac>
    2d0c:	mov	w0, #0x18                  	// #24
    2d10:	str	w0, [x1]
    2d14:	str	x5, [x1, #8]
    2d18:	str	w4, [x1, #16]
    2d1c:	ldr	x0, [x19, #24]
    2d20:	ldrb	w0, [x0]
    2d24:	cmp	w0, #0x42
    2d28:	b.ne	2bec <d_substitution+0x7c>  // b.any
    2d2c:	mov	x0, x19
    2d30:	bl	2b00 <d_abi_tags>
    2d34:	mov	x1, x0
    2d38:	mov	x0, x19
    2d3c:	bl	154 <d_add_substitution>
    2d40:	cbnz	w0, 2bec <d_substitution+0x7c>
    2d44:	mov	x1, #0x0                   	// #0
    2d48:	b	2bec <d_substitution+0x7c>
    2d4c:	ldr	x5, [x4, #8]
    2d50:	ldr	w4, [x4, #16]
    2d54:	b	2cf0 <d_substitution+0x180>
    2d58:	add	x4, x4, #0x38
    2d5c:	subs	x1, x1, #0x1
    2d60:	b.ne	2cac <d_substitution+0x13c>  // b.any
    2d64:	b	2d44 <d_substitution+0x1d4>

0000000000002d68 <__asan_cplus_demangle_fill_extended_operator>:
    2d68:	cmp	x0, #0x0
    2d6c:	ccmp	w1, #0x0, #0x1, ne  // ne = any
    2d70:	b.lt	2d90 <__asan_cplus_demangle_fill_extended_operator+0x28>  // b.tstop
    2d74:	cbz	x2, 2d90 <__asan_cplus_demangle_fill_extended_operator+0x28>
    2d78:	mov	x3, #0x33                  	// #51
    2d7c:	str	x3, [x0]
    2d80:	str	w1, [x0, #8]
    2d84:	str	x2, [x0, #16]
    2d88:	mov	w0, #0x1                   	// #1
    2d8c:	ret
    2d90:	mov	w0, #0x0                   	// #0
    2d94:	b	2d8c <__asan_cplus_demangle_fill_extended_operator+0x24>

0000000000002d98 <__asan_cplus_demangle_fill_ctor>:
    2d98:	cmp	x0, #0x0
    2d9c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    2da0:	b.eq	2dc8 <__asan_cplus_demangle_fill_ctor+0x30>  // b.none
    2da4:	sub	w3, w1, #0x1
    2da8:	cmp	w3, #0x4
    2dac:	b.hi	2dc8 <__asan_cplus_demangle_fill_ctor+0x30>  // b.pmore
    2db0:	mov	x3, #0x7                   	// #7
    2db4:	str	x3, [x0]
    2db8:	str	w1, [x0, #8]
    2dbc:	str	x2, [x0, #16]
    2dc0:	mov	w0, #0x1                   	// #1
    2dc4:	ret
    2dc8:	mov	w0, #0x0                   	// #0
    2dcc:	b	2dc4 <__asan_cplus_demangle_fill_ctor+0x2c>

0000000000002dd0 <__asan_cplus_demangle_fill_dtor>:
    2dd0:	cmp	x0, #0x0
    2dd4:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    2dd8:	b.eq	2e00 <__asan_cplus_demangle_fill_dtor+0x30>  // b.none
    2ddc:	sub	w3, w1, #0x1
    2de0:	cmp	w3, #0x4
    2de4:	b.hi	2e00 <__asan_cplus_demangle_fill_dtor+0x30>  // b.pmore
    2de8:	mov	x3, #0x8                   	// #8
    2dec:	str	x3, [x0]
    2df0:	str	w1, [x0, #8]
    2df4:	str	x2, [x0, #16]
    2df8:	mov	w0, #0x1                   	// #1
    2dfc:	ret
    2e00:	mov	w0, #0x0                   	// #0
    2e04:	b	2dfc <__asan_cplus_demangle_fill_dtor+0x2c>

0000000000002e08 <__asan_cplus_demangle_type>:
    2e08:	stp	x29, x30, [sp, #-80]!
    2e0c:	mov	x29, sp
    2e10:	ldr	x3, [x0, #24]
    2e14:	stp	x19, x20, [sp, #16]
    2e18:	mov	x19, x0
    2e1c:	mov	x0, x3
    2e20:	stp	x21, x22, [sp, #32]
    2e24:	str	x23, [sp, #48]
    2e28:	bl	5f4 <next_is_type_qual.isra.0>
    2e2c:	cbz	w0, 2ec8 <__asan_cplus_demangle_type+0xc0>
    2e30:	add	x1, sp, #0x48
    2e34:	mov	x0, x19
    2e38:	mov	w2, #0x0                   	// #0
    2e3c:	bl	50a4 <d_cv_qualifiers>
    2e40:	mov	x20, x0
    2e44:	cbnz	x0, 2e60 <__asan_cplus_demangle_type+0x58>
    2e48:	mov	x0, #0x0                   	// #0
    2e4c:	ldp	x19, x20, [sp, #16]
    2e50:	ldp	x21, x22, [sp, #32]
    2e54:	ldr	x23, [sp, #48]
    2e58:	ldp	x29, x30, [sp], #80
    2e5c:	ret
    2e60:	ldr	x0, [x19, #24]
    2e64:	ldrb	w0, [x0]
    2e68:	cmp	w0, #0x46
    2e6c:	mov	x0, x19
    2e70:	b.ne	2ec0 <__asan_cplus_demangle_type+0xb8>  // b.any
    2e74:	bl	3b14 <d_function_type>
    2e78:	str	x0, [x20]
    2e7c:	ldr	x0, [x20]
    2e80:	cbz	x0, 2e48 <__asan_cplus_demangle_type+0x40>
    2e84:	ldr	w1, [x0]
    2e88:	sub	w1, w1, #0x1f
    2e8c:	cmp	w1, #0x1
    2e90:	b.hi	2eac <__asan_cplus_demangle_type+0xa4>  // b.pmore
    2e94:	ldr	x2, [sp, #72]
    2e98:	ldr	x1, [x0, #8]
    2e9c:	str	x2, [x0, #8]
    2ea0:	ldr	x0, [x20]
    2ea4:	str	x0, [sp, #72]
    2ea8:	str	x1, [x20]
    2eac:	ldr	x1, [sp, #72]
    2eb0:	mov	x0, x19
    2eb4:	bl	154 <d_add_substitution>
    2eb8:	cbnz	w0, 2f30 <__asan_cplus_demangle_type+0x128>
    2ebc:	b	2e48 <__asan_cplus_demangle_type+0x40>
    2ec0:	bl	2e08 <__asan_cplus_demangle_type>
    2ec4:	b	2e78 <__asan_cplus_demangle_type+0x70>
    2ec8:	ldrb	w1, [x3]
    2ecc:	sub	w2, w1, #0x30
    2ed0:	cmp	w2, #0x4a
    2ed4:	b.hi	2e48 <__asan_cplus_demangle_type+0x40>  // b.pmore
    2ed8:	adrp	x0, 0 <is_fnqual_component_type>
    2edc:	add	x0, x0, #0x0
    2ee0:	ldrh	w0, [x0, w2, uxtw #1]
    2ee4:	adr	x2, 2ef0 <__asan_cplus_demangle_type+0xe8>
    2ee8:	add	x0, x2, w0, sxth #2
    2eec:	br	x0
    2ef0:	adrp	x0, 188 <d_count_templates_scopes+0x4>
    2ef4:	sub	w1, w1, #0x61
    2ef8:	ldr	x0, [x0]
    2efc:	sbfiz	x1, x1, #5, #32
    2f00:	add	x1, x0, x1
    2f04:	mov	x0, x19
    2f08:	bl	d4 <d_make_builtin_type>
    2f0c:	str	x0, [sp, #72]
    2f10:	ldr	x1, [x0, #8]
    2f14:	ldr	w0, [x19, #72]
    2f18:	ldr	w1, [x1, #8]
    2f1c:	add	w0, w0, w1
    2f20:	str	w0, [x19, #72]
    2f24:	ldr	x0, [x19, #24]
    2f28:	add	x0, x0, #0x1
    2f2c:	str	x0, [x19, #24]
    2f30:	ldr	x0, [sp, #72]
    2f34:	b	2e4c <__asan_cplus_demangle_type+0x44>
    2f38:	add	x3, x3, #0x1
    2f3c:	str	x3, [x19, #24]
    2f40:	mov	x0, x19
    2f44:	bl	29f8 <d_source_name>
    2f48:	mov	x2, x0
    2f4c:	mov	x3, #0x0                   	// #0
    2f50:	mov	w1, #0x28                  	// #40
    2f54:	mov	x0, x19
    2f58:	bl	64 <d_make_comp>
    2f5c:	b	2f68 <__asan_cplus_demangle_type+0x160>
    2f60:	mov	x0, x19
    2f64:	bl	3b14 <d_function_type>
    2f68:	str	x0, [sp, #72]
    2f6c:	b	2eac <__asan_cplus_demangle_type+0xa4>
    2f70:	mov	x0, x19
    2f74:	bl	3bcc <d_name>
    2f78:	b	2f68 <__asan_cplus_demangle_type+0x160>
    2f7c:	add	x1, x3, #0x1
    2f80:	str	x1, [x19, #24]
    2f84:	ldrb	w0, [x3, #1]
    2f88:	cmp	w0, #0x5f
    2f8c:	b.eq	2fe8 <__asan_cplus_demangle_type+0x1e0>  // b.none
    2f90:	sub	w0, w0, #0x30
    2f94:	and	w0, w0, #0xff
    2f98:	cmp	w0, #0x9
    2f9c:	b.hi	2fdc <__asan_cplus_demangle_type+0x1d4>  // b.pmore
    2fa0:	ldr	x0, [x19, #24]
    2fa4:	add	x2, x0, #0x1
    2fa8:	str	x2, [x19, #24]
    2fac:	ldrb	w0, [x0, #1]
    2fb0:	sub	w0, w0, #0x30
    2fb4:	and	w0, w0, #0xff
    2fb8:	cmp	w0, #0x9
    2fbc:	b.ls	2fa0 <__asan_cplus_demangle_type+0x198>  // b.plast
    2fc0:	sub	w2, w2, w1
    2fc4:	mov	x0, x19
    2fc8:	bl	29bc <d_make_name>
    2fcc:	mov	x20, x0
    2fd0:	cbnz	x0, 2fec <__asan_cplus_demangle_type+0x1e4>
    2fd4:	mov	x0, #0x0                   	// #0
    2fd8:	b	2f68 <__asan_cplus_demangle_type+0x160>
    2fdc:	mov	x0, x19
    2fe0:	bl	4e48 <d_expression>
    2fe4:	b	2fcc <__asan_cplus_demangle_type+0x1c4>
    2fe8:	mov	x20, #0x0                   	// #0
    2fec:	ldr	x0, [x19, #24]
    2ff0:	ldrb	w1, [x0]
    2ff4:	cmp	w1, #0x5f
    2ff8:	b.ne	2fd4 <__asan_cplus_demangle_type+0x1cc>  // b.any
    2ffc:	add	x0, x0, #0x1
    3000:	str	x0, [x19, #24]
    3004:	mov	x0, x19
    3008:	bl	2e08 <__asan_cplus_demangle_type>
    300c:	mov	x3, x0
    3010:	mov	x2, x20
    3014:	mov	w1, #0x2a                  	// #42
    3018:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    301c:	add	x3, x3, #0x1
    3020:	str	x3, [x19, #24]
    3024:	mov	x0, x19
    3028:	bl	2e08 <__asan_cplus_demangle_type>
    302c:	mov	x20, x0
    3030:	cbz	x0, 2fd4 <__asan_cplus_demangle_type+0x1cc>
    3034:	mov	x0, x19
    3038:	bl	2e08 <__asan_cplus_demangle_type>
    303c:	mov	x3, x0
    3040:	cbz	x0, 2fd4 <__asan_cplus_demangle_type+0x1cc>
    3044:	mov	x2, x20
    3048:	mov	w1, #0x2b                  	// #43
    304c:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    3050:	mov	x0, x19
    3054:	bl	4f4 <d_template_param>
    3058:	ldr	x20, [x19, #24]
    305c:	str	x0, [sp, #72]
    3060:	mov	x1, x0
    3064:	ldrb	w0, [x20]
    3068:	cmp	w0, #0x49
    306c:	b.ne	2eac <__asan_cplus_demangle_type+0xa4>  // b.any
    3070:	ldr	w0, [x19, #80]
    3074:	cbnz	w0, 309c <__asan_cplus_demangle_type+0x294>
    3078:	mov	x0, x19
    307c:	bl	154 <d_add_substitution>
    3080:	cbz	w0, 2e48 <__asan_cplus_demangle_type+0x40>
    3084:	ldr	x20, [sp, #72]
    3088:	mov	x0, x19
    308c:	bl	4fc4 <d_template_args>
    3090:	mov	x3, x0
    3094:	mov	x2, x20
    3098:	b	30dc <__asan_cplus_demangle_type+0x2d4>
    309c:	ldr	w23, [x19, #40]
    30a0:	mov	x0, x19
    30a4:	ldr	w22, [x19, #56]
    30a8:	ldr	w21, [x19, #72]
    30ac:	bl	4fc4 <d_template_args>
    30b0:	mov	x4, x0
    30b4:	ldr	x0, [x19, #24]
    30b8:	ldrb	w0, [x0]
    30bc:	cmp	w0, #0x49
    30c0:	b.ne	30e4 <__asan_cplus_demangle_type+0x2dc>  // b.any
    30c4:	ldr	x1, [sp, #72]
    30c8:	mov	x0, x19
    30cc:	bl	154 <d_add_substitution>
    30d0:	cbz	w0, 2e48 <__asan_cplus_demangle_type+0x40>
    30d4:	ldr	x2, [sp, #72]
    30d8:	mov	x3, x4
    30dc:	mov	w1, #0x4                   	// #4
    30e0:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    30e4:	str	x20, [x19, #24]
    30e8:	str	w23, [x19, #40]
    30ec:	str	w22, [x19, #56]
    30f0:	str	w21, [x19, #72]
    30f4:	b	2eac <__asan_cplus_demangle_type+0xa4>
    30f8:	ldrb	w0, [x3, #1]
    30fc:	sub	w0, w0, #0x30
    3100:	and	w0, w0, #0xff
    3104:	cmp	w0, #0x2f
    3108:	b.hi	311c <__asan_cplus_demangle_type+0x314>  // b.pmore
    310c:	mov	w1, #0xfffe03ff            	// #-130049
    3110:	movk	x1, #0x87ff, lsl #32
    3114:	lsr	x0, x1, x0
    3118:	tbnz	w0, #0, 313c <__asan_cplus_demangle_type+0x334>
    311c:	mov	x0, x19
    3120:	bl	3bcc <d_name>
    3124:	str	x0, [sp, #72]
    3128:	cbz	x0, 2eac <__asan_cplus_demangle_type+0xa4>
    312c:	ldr	w0, [x0]
    3130:	cmp	w0, #0x18
    3134:	b.ne	2eac <__asan_cplus_demangle_type+0xa4>  // b.any
    3138:	b	2f30 <__asan_cplus_demangle_type+0x128>
    313c:	mov	x0, x19
    3140:	mov	w1, #0x0                   	// #0
    3144:	bl	2b70 <d_substitution>
    3148:	mov	x20, x0
    314c:	ldr	x0, [x19, #24]
    3150:	str	x20, [sp, #72]
    3154:	ldrb	w0, [x0]
    3158:	cmp	w0, #0x49
    315c:	b.ne	2f30 <__asan_cplus_demangle_type+0x128>  // b.any
    3160:	b	3088 <__asan_cplus_demangle_type+0x280>
    3164:	add	x3, x3, #0x1
    3168:	str	x3, [x19, #24]
    316c:	mov	x0, x19
    3170:	bl	2e08 <__asan_cplus_demangle_type>
    3174:	mov	x2, x0
    3178:	mov	x3, #0x0                   	// #0
    317c:	mov	w1, #0x24                  	// #36
    3180:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    3184:	add	x3, x3, #0x1
    3188:	str	x3, [x19, #24]
    318c:	mov	x0, x19
    3190:	bl	2e08 <__asan_cplus_demangle_type>
    3194:	mov	x2, x0
    3198:	mov	x3, #0x0                   	// #0
    319c:	mov	w1, #0x22                  	// #34
    31a0:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    31a4:	add	x3, x3, #0x1
    31a8:	str	x3, [x19, #24]
    31ac:	mov	x0, x19
    31b0:	bl	2e08 <__asan_cplus_demangle_type>
    31b4:	mov	x2, x0
    31b8:	mov	x3, #0x0                   	// #0
    31bc:	mov	w1, #0x23                  	// #35
    31c0:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    31c4:	add	x3, x3, #0x1
    31c8:	str	x3, [x19, #24]
    31cc:	mov	x0, x19
    31d0:	bl	2e08 <__asan_cplus_demangle_type>
    31d4:	mov	x2, x0
    31d8:	mov	x3, #0x0                   	// #0
    31dc:	mov	w1, #0x25                  	// #37
    31e0:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    31e4:	add	x3, x3, #0x1
    31e8:	str	x3, [x19, #24]
    31ec:	mov	x0, x19
    31f0:	bl	2e08 <__asan_cplus_demangle_type>
    31f4:	mov	x2, x0
    31f8:	mov	x3, #0x0                   	// #0
    31fc:	mov	w1, #0x26                  	// #38
    3200:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    3204:	add	x3, x3, #0x1
    3208:	str	x3, [x19, #24]
    320c:	mov	x0, x19
    3210:	bl	29f8 <d_source_name>
    3214:	mov	x20, x0
    3218:	ldr	x0, [x19, #24]
    321c:	str	x20, [sp, #72]
    3220:	ldrb	w0, [x0]
    3224:	cmp	w0, #0x49
    3228:	b.ne	324c <__asan_cplus_demangle_type+0x444>  // b.any
    322c:	mov	x0, x19
    3230:	bl	4fc4 <d_template_args>
    3234:	mov	x2, x20
    3238:	mov	x3, x0
    323c:	mov	w1, #0x4                   	// #4
    3240:	mov	x0, x19
    3244:	bl	64 <d_make_comp>
    3248:	str	x0, [sp, #72]
    324c:	mov	x0, x19
    3250:	bl	2e08 <__asan_cplus_demangle_type>
    3254:	mov	w1, #0x21                  	// #33
    3258:	mov	x2, x0
    325c:	ldr	x3, [sp, #72]
    3260:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    3264:	add	x0, x3, #0x1
    3268:	str	x0, [x19, #24]
    326c:	ldrb	w0, [x3, #1]
    3270:	cbz	w0, 2e48 <__asan_cplus_demangle_type+0x40>
    3274:	add	x0, x3, #0x2
    3278:	str	x0, [x19, #24]
    327c:	ldrb	w0, [x3, #1]
    3280:	cmp	w0, #0x46
    3284:	b.eq	33dc <__asan_cplus_demangle_type+0x5d4>  // b.none
    3288:	sub	w0, w0, #0x54
    328c:	and	w1, w0, #0xff
    3290:	cmp	w1, #0x22
    3294:	b.hi	2e48 <__asan_cplus_demangle_type+0x40>  // b.pmore
    3298:	cmp	w0, #0x22
    329c:	b.hi	2e48 <__asan_cplus_demangle_type+0x40>  // b.pmore
    32a0:	adrp	x1, 0 <is_fnqual_component_type>
    32a4:	add	x1, x1, #0x0
    32a8:	ldrh	w0, [x1, w0, uxtw #1]
    32ac:	adr	x1, 32b8 <__asan_cplus_demangle_type+0x4b0>
    32b0:	add	x0, x1, w0, sxth #2
    32b4:	br	x0
    32b8:	mov	x0, x19
    32bc:	bl	4e48 <d_expression>
    32c0:	mov	x3, #0x0                   	// #0
    32c4:	mov	x2, x0
    32c8:	mov	w1, #0x43                  	// #67
    32cc:	mov	x0, x19
    32d0:	bl	64 <d_make_comp>
    32d4:	str	x0, [sp, #72]
    32d8:	cbz	x0, 2eac <__asan_cplus_demangle_type+0xa4>
    32dc:	ldr	x0, [x19, #24]
    32e0:	ldrb	w1, [x0]
    32e4:	cbnz	w1, 32f0 <__asan_cplus_demangle_type+0x4e8>
    32e8:	str	xzr, [sp, #72]
    32ec:	b	2eac <__asan_cplus_demangle_type+0xa4>
    32f0:	add	x1, x0, #0x1
    32f4:	str	x1, [x19, #24]
    32f8:	ldrb	w0, [x0]
    32fc:	cmp	w0, #0x45
    3300:	b.ne	32e8 <__asan_cplus_demangle_type+0x4e0>  // b.any
    3304:	b	2eac <__asan_cplus_demangle_type+0xa4>
    3308:	mov	x0, x19
    330c:	bl	2e08 <__asan_cplus_demangle_type>
    3310:	mov	x3, #0x0                   	// #0
    3314:	mov	x2, x0
    3318:	mov	w1, #0x4b                  	// #75
    331c:	b	2f54 <__asan_cplus_demangle_type+0x14c>
    3320:	adrp	x1, 0 <is_fnqual_component_type>
    3324:	add	x1, x1, #0x0
    3328:	mov	w2, #0x4                   	// #4
    332c:	mov	x0, x19
    3330:	bl	29bc <d_make_name>
    3334:	str	x0, [sp, #72]
    3338:	b	2f30 <__asan_cplus_demangle_type+0x128>
    333c:	adrp	x1, 0 <is_fnqual_component_type>
    3340:	mov	w2, #0xe                   	// #14
    3344:	add	x1, x1, #0x0
    3348:	b	332c <__asan_cplus_demangle_type+0x524>
    334c:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    3350:	ldr	x1, [x1]
    3354:	add	x1, x1, #0x340
    3358:	mov	x0, x19
    335c:	bl	d4 <d_make_builtin_type>
    3360:	str	x0, [sp, #72]
    3364:	ldr	x1, [x0, #8]
    3368:	ldr	w0, [x19, #72]
    336c:	ldr	w1, [x1, #8]
    3370:	add	w0, w0, w1
    3374:	str	w0, [x19, #72]
    3378:	b	2f30 <__asan_cplus_demangle_type+0x128>
    337c:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    3380:	ldr	x1, [x1]
    3384:	add	x1, x1, #0x360
    3388:	b	3358 <__asan_cplus_demangle_type+0x550>
    338c:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    3390:	ldr	x1, [x1]
    3394:	add	x1, x1, #0x380
    3398:	b	3358 <__asan_cplus_demangle_type+0x550>
    339c:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    33a0:	ldr	x1, [x1]
    33a4:	add	x1, x1, #0x3a0
    33a8:	b	3358 <__asan_cplus_demangle_type+0x550>
    33ac:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    33b0:	ldr	x1, [x1]
    33b4:	add	x1, x1, #0x3c0
    33b8:	b	3358 <__asan_cplus_demangle_type+0x550>
    33bc:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    33c0:	ldr	x1, [x1]
    33c4:	add	x1, x1, #0x3e0
    33c8:	b	3358 <__asan_cplus_demangle_type+0x550>
    33cc:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    33d0:	ldr	x1, [x1]
    33d4:	add	x1, x1, #0x400
    33d8:	b	3358 <__asan_cplus_demangle_type+0x550>
    33dc:	mov	x0, x19
    33e0:	bl	30 <d_make_empty>
    33e4:	mov	w1, #0x2c                  	// #44
    33e8:	str	x0, [sp, #72]
    33ec:	str	w1, [x0]
    33f0:	ldr	x1, [x19, #24]
    33f4:	ldrb	w1, [x1]
    33f8:	sub	w1, w1, #0x30
    33fc:	and	w1, w1, #0xff
    3400:	cmp	w1, #0x9
    3404:	cset	w2, ls  // ls = plast
    3408:	strh	w2, [x0, #16]
    340c:	b.hi	3418 <__asan_cplus_demangle_type+0x610>  // b.pmore
    3410:	add	x0, x19, #0x18
    3414:	bl	3ac <d_number.isra.0>
    3418:	ldr	x20, [sp, #72]
    341c:	mov	x0, x19
    3420:	bl	2e08 <__asan_cplus_demangle_type>
    3424:	str	x0, [x20, #8]
    3428:	ldr	x0, [sp, #72]
    342c:	ldr	x0, [x0, #8]
    3430:	cbz	x0, 2e48 <__asan_cplus_demangle_type+0x40>
    3434:	add	x0, x19, #0x18
    3438:	bl	3ac <d_number.isra.0>
    343c:	ldr	x1, [x19, #24]
    3440:	ldrb	w0, [x1]
    3444:	cbz	w0, 3454 <__asan_cplus_demangle_type+0x64c>
    3448:	add	x0, x1, #0x1
    344c:	str	x0, [x19, #24]
    3450:	ldrb	w0, [x1]
    3454:	cmp	w0, #0x73
    3458:	ldr	x0, [sp, #72]
    345c:	cset	w1, eq  // eq = none
    3460:	strh	w1, [x0, #18]
    3464:	b	2f30 <__asan_cplus_demangle_type+0x128>
    3468:	ldrb	w0, [x3, #2]
    346c:	cmp	w0, #0x5f
    3470:	b.ne	34cc <__asan_cplus_demangle_type+0x6c4>  // b.any
    3474:	add	x3, x3, #0x3
    3478:	str	x3, [x19, #24]
    347c:	mov	x0, x19
    3480:	bl	4e48 <d_expression>
    3484:	mov	x20, x0
    3488:	cbz	x0, 34c4 <__asan_cplus_demangle_type+0x6bc>
    348c:	ldr	x0, [x19, #24]
    3490:	ldrb	w1, [x0]
    3494:	cmp	w1, #0x5f
    3498:	b.ne	34d8 <__asan_cplus_demangle_type+0x6d0>  // b.any
    349c:	add	x0, x0, #0x1
    34a0:	str	x0, [x19, #24]
    34a4:	mov	x0, x19
    34a8:	bl	2e08 <__asan_cplus_demangle_type>
    34ac:	mov	x3, x0
    34b0:	mov	x2, x20
    34b4:	mov	x0, x19
    34b8:	mov	w1, #0x2d                  	// #45
    34bc:	bl	64 <d_make_comp>
    34c0:	mov	x20, x0
    34c4:	str	x20, [sp, #72]
    34c8:	b	2eac <__asan_cplus_demangle_type+0xa4>
    34cc:	mov	x0, x19
    34d0:	bl	434 <d_number_component>
    34d4:	b	3484 <__asan_cplus_demangle_type+0x67c>
    34d8:	mov	x20, #0x0                   	// #0
    34dc:	b	34c4 <__asan_cplus_demangle_type+0x6bc>
    34e0:	adrp	x1, 188 <d_count_templates_scopes+0x4>
    34e4:	ldr	x1, [x1]
    34e8:	add	x1, x1, #0x420
    34ec:	b	3358 <__asan_cplus_demangle_type+0x550>

00000000000034f0 <d_parmlist>:
    34f0:	stp	x29, x30, [sp, #-64]!
    34f4:	mov	x29, sp
    34f8:	stp	x19, x20, [sp, #16]
    34fc:	mov	x19, x0
    3500:	add	x20, sp, #0x38
    3504:	str	x21, [sp, #32]
    3508:	mov	w21, #0x4f                  	// #79
    350c:	str	xzr, [sp, #56]
    3510:	ldr	x1, [x19, #24]
    3514:	ldrb	w0, [x1]
    3518:	cmp	w0, #0x45
    351c:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    3520:	b.eq	3588 <d_parmlist+0x98>  // b.none
    3524:	cmp	w0, #0x2e
    3528:	b.eq	3588 <d_parmlist+0x98>  // b.none
    352c:	cmp	w0, #0x52
    3530:	ccmp	w0, w21, #0x4, ne  // ne = any
    3534:	b.ne	3544 <d_parmlist+0x54>  // b.any
    3538:	ldrb	w0, [x1, #1]
    353c:	cmp	w0, #0x45
    3540:	b.eq	3588 <d_parmlist+0x98>  // b.none
    3544:	mov	x0, x19
    3548:	bl	2e08 <__asan_cplus_demangle_type>
    354c:	mov	x2, x0
    3550:	cbnz	x0, 3568 <d_parmlist+0x78>
    3554:	mov	x0, #0x0                   	// #0
    3558:	ldp	x19, x20, [sp, #16]
    355c:	ldr	x21, [sp, #32]
    3560:	ldp	x29, x30, [sp], #64
    3564:	ret
    3568:	mov	x0, x19
    356c:	mov	x3, #0x0                   	// #0
    3570:	mov	w1, #0x2e                  	// #46
    3574:	bl	64 <d_make_comp>
    3578:	str	x0, [x20]
    357c:	cbz	x0, 3554 <d_parmlist+0x64>
    3580:	add	x20, x0, #0x10
    3584:	b	3510 <d_parmlist+0x20>
    3588:	ldr	x0, [sp, #56]
    358c:	cbz	x0, 3554 <d_parmlist+0x64>
    3590:	ldr	x1, [x0, #16]
    3594:	cbnz	x1, 3558 <d_parmlist+0x68>
    3598:	ldr	x1, [x0, #8]
    359c:	ldr	w2, [x1]
    35a0:	cmp	w2, #0x27
    35a4:	b.ne	3558 <d_parmlist+0x68>  // b.any
    35a8:	ldr	x2, [x1, #8]
    35ac:	ldr	w1, [x2, #28]
    35b0:	cmp	w1, #0x9
    35b4:	b.ne	3558 <d_parmlist+0x68>  // b.any
    35b8:	ldr	w2, [x2, #8]
    35bc:	ldr	w1, [x19, #72]
    35c0:	sub	w1, w1, w2
    35c4:	str	w1, [x19, #72]
    35c8:	str	xzr, [x0, #8]
    35cc:	b	3558 <d_parmlist+0x68>

00000000000035d0 <d_operator_name>:
    35d0:	stp	x29, x30, [sp, #-48]!
    35d4:	mov	x29, sp
    35d8:	stp	x19, x20, [sp, #16]
    35dc:	mov	x19, x0
    35e0:	ldr	x0, [x0, #24]
    35e4:	str	x21, [sp, #32]
    35e8:	ldrb	w2, [x0]
    35ec:	cbz	w2, 35fc <d_operator_name+0x2c>
    35f0:	add	x1, x0, #0x1
    35f4:	str	x1, [x19, #24]
    35f8:	ldrb	w2, [x0]
    35fc:	ldr	x0, [x19, #24]
    3600:	ldrb	w3, [x0]
    3604:	cbz	w3, 36c4 <d_operator_name+0xf4>
    3608:	add	x1, x0, #0x1
    360c:	str	x1, [x19, #24]
    3610:	cmp	w2, #0x76
    3614:	ldrb	w3, [x0]
    3618:	b.ne	366c <d_operator_name+0x9c>  // b.any
    361c:	sub	w21, w3, #0x30
    3620:	and	w0, w21, #0xff
    3624:	cmp	w0, #0x9
    3628:	b.hi	36c4 <d_operator_name+0xf4>  // b.pmore
    362c:	mov	x0, x19
    3630:	bl	29f8 <d_source_name>
    3634:	mov	x4, x0
    3638:	mov	x0, x19
    363c:	bl	30 <d_make_empty>
    3640:	mov	x20, x0
    3644:	mov	x2, x4
    3648:	mov	w1, w21
    364c:	bl	2d68 <__asan_cplus_demangle_fill_extended_operator>
    3650:	cbnz	w0, 3658 <d_operator_name+0x88>
    3654:	mov	x20, #0x0                   	// #0
    3658:	mov	x0, x20
    365c:	ldp	x19, x20, [sp, #16]
    3660:	ldr	x21, [sp, #32]
    3664:	ldp	x29, x30, [sp], #48
    3668:	ret
    366c:	cmp	w2, #0x63
    3670:	mov	w0, #0x76                  	// #118
    3674:	ccmp	w3, w0, #0x0, eq  // eq = none
    3678:	b.ne	36c4 <d_operator_name+0xf4>  // b.any
    367c:	ldp	w0, w21, [x19, #76]
    3680:	cmp	w0, #0x0
    3684:	cset	w0, eq  // eq = none
    3688:	str	w0, [x19, #80]
    368c:	mov	x0, x19
    3690:	bl	2e08 <__asan_cplus_demangle_type>
    3694:	mov	x2, x0
    3698:	ldr	w0, [x19, #80]
    369c:	mov	x3, #0x0                   	// #0
    36a0:	cbz	w0, 36bc <d_operator_name+0xec>
    36a4:	mov	w1, #0x35                  	// #53
    36a8:	mov	x0, x19
    36ac:	bl	64 <d_make_comp>
    36b0:	mov	x20, x0
    36b4:	str	w21, [x19, #80]
    36b8:	b	3658 <d_operator_name+0x88>
    36bc:	mov	w1, #0x34                  	// #52
    36c0:	b	36a8 <d_operator_name+0xd8>
    36c4:	adrp	x1, 5c8 <d_call_offset+0x74>
    36c8:	mov	w5, #0x43                  	// #67
    36cc:	mov	w4, #0x0                   	// #0
    36d0:	mov	w7, #0x2                   	// #2
    36d4:	ldr	x1, [x1]
    36d8:	mov	w8, #0x18                  	// #24
    36dc:	sub	w0, w5, w4
    36e0:	sdiv	w0, w0, w7
    36e4:	add	w0, w0, w4
    36e8:	smull	x6, w0, w8
    36ec:	add	x9, x6, x1
    36f0:	ldr	x6, [x6, x1]
    36f4:	ldrb	w10, [x6]
    36f8:	cmp	w10, w2
    36fc:	b.ne	372c <d_operator_name+0x15c>  // b.any
    3700:	ldrb	w6, [x6, #1]
    3704:	cmp	w6, w3
    3708:	b.ne	372c <d_operator_name+0x15c>  // b.any
    370c:	mov	x0, x19
    3710:	bl	30 <d_make_empty>
    3714:	mov	x20, x0
    3718:	cbz	x0, 3658 <d_operator_name+0x88>
    371c:	mov	w0, #0x32                  	// #50
    3720:	str	w0, [x20]
    3724:	str	x9, [x20, #8]
    3728:	b	3658 <d_operator_name+0x88>
    372c:	b.hi	3738 <d_operator_name+0x168>  // b.pmore
    3730:	add	w4, w0, #0x1
    3734:	mov	w0, w5
    3738:	cmp	w4, w0
    373c:	b.eq	3654 <d_operator_name+0x84>  // b.none
    3740:	mov	w5, w0
    3744:	b	36dc <d_operator_name+0x10c>

0000000000003748 <d_unqualified_name>:
    3748:	stp	x29, x30, [sp, #-48]!
    374c:	mov	x29, sp
    3750:	ldr	x3, [x0, #24]
    3754:	stp	x19, x20, [sp, #16]
    3758:	mov	x20, x0
    375c:	str	x21, [sp, #32]
    3760:	ldrb	w1, [x3]
    3764:	sub	w2, w1, #0x30
    3768:	and	w2, w2, #0xff
    376c:	cmp	w2, #0x9
    3770:	b.hi	37a4 <d_unqualified_name+0x5c>  // b.pmore
    3774:	bl	29f8 <d_source_name>
    3778:	mov	x19, x0
    377c:	ldr	x0, [x20, #24]
    3780:	ldrb	w0, [x0]
    3784:	cmp	w0, #0x42
    3788:	b.ne	3994 <d_unqualified_name+0x24c>  // b.any
    378c:	mov	x1, x19
    3790:	mov	x0, x20
    3794:	ldp	x19, x20, [sp, #16]
    3798:	ldr	x21, [sp, #32]
    379c:	ldp	x29, x30, [sp], #48
    37a0:	b	2b00 <d_abi_tags>
    37a4:	sub	w2, w1, #0x61
    37a8:	and	w2, w2, #0xff
    37ac:	cmp	w2, #0x19
    37b0:	b.hi	3838 <d_unqualified_name+0xf0>  // b.pmore
    37b4:	cmp	w1, #0x6f
    37b8:	b.ne	37d0 <d_unqualified_name+0x88>  // b.any
    37bc:	ldrb	w0, [x3, #1]
    37c0:	cmp	w0, #0x6e
    37c4:	b.ne	37d0 <d_unqualified_name+0x88>  // b.any
    37c8:	add	x3, x3, #0x2
    37cc:	str	x3, [x20, #24]
    37d0:	mov	x0, x20
    37d4:	bl	35d0 <d_operator_name>
    37d8:	mov	x19, x0
    37dc:	cbz	x0, 3888 <d_unqualified_name+0x140>
    37e0:	ldr	w0, [x0]
    37e4:	cmp	w0, #0x32
    37e8:	b.ne	377c <d_unqualified_name+0x34>  // b.any
    37ec:	ldr	x2, [x19, #8]
    37f0:	ldr	w0, [x20, #72]
    37f4:	ldr	w1, [x2, #16]
    37f8:	add	w0, w0, #0x7
    37fc:	add	w0, w0, w1
    3800:	str	w0, [x20, #72]
    3804:	ldr	x0, [x2]
    3808:	adrp	x1, 0 <is_fnqual_component_type>
    380c:	add	x1, x1, #0x0
    3810:	bl	0 <__asan_internal_strcmp>
    3814:	cbnz	w0, 377c <d_unqualified_name+0x34>
    3818:	mov	x0, x20
    381c:	bl	29f8 <d_source_name>
    3820:	mov	x2, x19
    3824:	mov	x3, x0
    3828:	mov	w1, #0x37                  	// #55
    382c:	mov	x0, x20
    3830:	bl	64 <d_make_comp>
    3834:	b	3778 <d_unqualified_name+0x30>
    3838:	sub	w2, w1, #0x43
    383c:	and	w2, w2, #0xff
    3840:	cmp	w2, #0x1
    3844:	b.hi	3974 <d_unqualified_name+0x22c>  // b.pmore
    3848:	ldr	x5, [x0, #64]
    384c:	cbz	x5, 3874 <d_unqualified_name+0x12c>
    3850:	ldr	w0, [x5]
    3854:	cbnz	w0, 386c <d_unqualified_name+0x124>
    3858:	ldr	w1, [x5, #16]
    385c:	ldr	w0, [x20, #72]
    3860:	add	w0, w0, w1
    3864:	str	w0, [x20, #72]
    3868:	b	3874 <d_unqualified_name+0x12c>
    386c:	cmp	w0, #0x18
    3870:	b.eq	3858 <d_unqualified_name+0x110>  // b.none
    3874:	ldrb	w0, [x3]
    3878:	cmp	w0, #0x43
    387c:	b.eq	3890 <d_unqualified_name+0x148>  // b.none
    3880:	cmp	w0, #0x44
    3884:	b.eq	3904 <d_unqualified_name+0x1bc>  // b.none
    3888:	mov	x19, #0x0                   	// #0
    388c:	b	377c <d_unqualified_name+0x34>
    3890:	ldrb	w0, [x3, #1]
    3894:	cmp	w0, #0x49
    3898:	b.ne	38fc <d_unqualified_name+0x1b4>  // b.any
    389c:	add	x3, x3, #0x1
    38a0:	str	x3, [x20, #24]
    38a4:	mov	w3, #0x1                   	// #1
    38a8:	ldr	x0, [x20, #24]
    38ac:	ldrb	w1, [x0, #1]
    38b0:	sub	w2, w1, #0x31
    38b4:	and	w2, w2, #0xff
    38b8:	cmp	w2, #0x4
    38bc:	b.hi	3888 <d_unqualified_name+0x140>  // b.pmore
    38c0:	add	x0, x0, #0x2
    38c4:	str	x0, [x20, #24]
    38c8:	sub	w21, w1, #0x30
    38cc:	cbz	w3, 38d8 <d_unqualified_name+0x190>
    38d0:	mov	x0, x20
    38d4:	bl	2e08 <__asan_cplus_demangle_type>
    38d8:	ldr	x4, [x20, #64]
    38dc:	mov	x0, x20
    38e0:	bl	30 <d_make_empty>
    38e4:	mov	x19, x0
    38e8:	mov	x2, x4
    38ec:	mov	w1, w21
    38f0:	bl	2d98 <__asan_cplus_demangle_fill_ctor>
    38f4:	cbnz	w0, 377c <d_unqualified_name+0x34>
    38f8:	b	3888 <d_unqualified_name+0x140>
    38fc:	mov	w3, #0x0                   	// #0
    3900:	b	38a8 <d_unqualified_name+0x160>
    3904:	ldrb	w0, [x3, #1]
    3908:	sub	w0, w0, #0x30
    390c:	cmp	w0, #0x5
    3910:	b.hi	3888 <d_unqualified_name+0x140>  // b.pmore
    3914:	adrp	x1, 0 <is_fnqual_component_type>
    3918:	add	x1, x1, #0x0
    391c:	ldrb	w0, [x1, w0, uxtw]
    3920:	adr	x1, 392c <d_unqualified_name+0x1e4>
    3924:	add	x0, x1, w0, sxtb #2
    3928:	br	x0
    392c:	mov	w4, #0x2                   	// #2
    3930:	add	x3, x3, #0x2
    3934:	str	x3, [x20, #24]
    3938:	mov	x0, x20
    393c:	bl	30 <d_make_empty>
    3940:	mov	x19, x0
    3944:	mov	x2, x5
    3948:	mov	w1, w4
    394c:	bl	2dd0 <__asan_cplus_demangle_fill_dtor>
    3950:	b	38f4 <d_unqualified_name+0x1ac>
    3954:	mov	w4, #0x3                   	// #3
    3958:	b	3930 <d_unqualified_name+0x1e8>
    395c:	mov	w4, #0x4                   	// #4
    3960:	b	3930 <d_unqualified_name+0x1e8>
    3964:	mov	w4, #0x5                   	// #5
    3968:	b	3930 <d_unqualified_name+0x1e8>
    396c:	mov	w4, #0x1                   	// #1
    3970:	b	3930 <d_unqualified_name+0x1e8>
    3974:	cmp	w1, #0x4c
    3978:	b.ne	39b8 <d_unqualified_name+0x270>  // b.any
    397c:	add	x3, x3, #0x1
    3980:	str	x3, [x0, #24]
    3984:	bl	29f8 <d_source_name>
    3988:	mov	x19, x0
    398c:	cbnz	x0, 39a8 <d_unqualified_name+0x260>
    3990:	mov	x19, #0x0                   	// #0
    3994:	mov	x0, x19
    3998:	ldp	x19, x20, [sp, #16]
    399c:	ldr	x21, [sp, #32]
    39a0:	ldp	x29, x30, [sp], #48
    39a4:	ret
    39a8:	mov	x0, x20
    39ac:	bl	694 <d_discriminator>
    39b0:	cbnz	w0, 377c <d_unqualified_name+0x34>
    39b4:	b	3990 <d_unqualified_name+0x248>
    39b8:	cmp	w1, #0x55
    39bc:	b.ne	3990 <d_unqualified_name+0x248>  // b.any
    39c0:	ldrb	w1, [x3, #1]
    39c4:	cmp	w1, #0x6c
    39c8:	b.eq	3a1c <d_unqualified_name+0x2d4>  // b.none
    39cc:	cmp	w1, #0x74
    39d0:	b.ne	3990 <d_unqualified_name+0x248>  // b.any
    39d4:	add	x1, x3, #0x1
    39d8:	str	x1, [x0, #24]
    39dc:	ldrb	w1, [x3, #1]
    39e0:	cmp	w1, #0x74
    39e4:	b.ne	3888 <d_unqualified_name+0x140>  // b.any
    39e8:	add	x3, x3, #0x2
    39ec:	str	x3, [x0, #24]
    39f0:	bl	470 <d_compact_number>
    39f4:	sxtw	x4, w0
    39f8:	tbnz	w4, #31, 3888 <d_unqualified_name+0x140>
    39fc:	mov	x0, x20
    3a00:	bl	30 <d_make_empty>
    3a04:	mov	x19, x0
    3a08:	cbz	x0, 3a8c <d_unqualified_name+0x344>
    3a0c:	mov	w0, #0x48                  	// #72
    3a10:	str	w0, [x19]
    3a14:	str	x4, [x19, #8]
    3a18:	b	3a8c <d_unqualified_name+0x344>
    3a1c:	add	x1, x3, #0x1
    3a20:	str	x1, [x0, #24]
    3a24:	ldrb	w1, [x3, #1]
    3a28:	cmp	w1, #0x6c
    3a2c:	b.ne	3888 <d_unqualified_name+0x140>  // b.any
    3a30:	add	x3, x3, #0x2
    3a34:	str	x3, [x0, #24]
    3a38:	bl	34f0 <d_parmlist>
    3a3c:	mov	x9, x0
    3a40:	cbz	x0, 3888 <d_unqualified_name+0x140>
    3a44:	ldr	x0, [x20, #24]
    3a48:	ldrb	w1, [x0]
    3a4c:	cmp	w1, #0x45
    3a50:	b.ne	3888 <d_unqualified_name+0x140>  // b.any
    3a54:	add	x0, x0, #0x1
    3a58:	str	x0, [x20, #24]
    3a5c:	mov	x0, x20
    3a60:	bl	470 <d_compact_number>
    3a64:	mov	w4, w0
    3a68:	tbnz	w0, #31, 3888 <d_unqualified_name+0x140>
    3a6c:	mov	x0, x20
    3a70:	bl	30 <d_make_empty>
    3a74:	mov	x19, x0
    3a78:	cbz	x0, 3a8c <d_unqualified_name+0x344>
    3a7c:	mov	w0, #0x46                  	// #70
    3a80:	str	w0, [x19]
    3a84:	str	x9, [x19, #8]
    3a88:	str	w4, [x19, #16]
    3a8c:	mov	x1, x19
    3a90:	mov	x0, x20
    3a94:	bl	154 <d_add_substitution>
    3a98:	b	38f4 <d_unqualified_name+0x1ac>

0000000000003a9c <d_bare_function_type>:
    3a9c:	stp	x29, x30, [sp, #-32]!
    3aa0:	mov	x29, sp
    3aa4:	stp	x19, x20, [sp, #16]
    3aa8:	mov	x19, x0
    3aac:	ldr	x0, [x0, #24]
    3ab0:	ldrb	w2, [x0]
    3ab4:	cmp	w2, #0x4a
    3ab8:	b.ne	3ae4 <d_bare_function_type+0x48>  // b.any
    3abc:	add	x0, x0, #0x1
    3ac0:	str	x0, [x19, #24]
    3ac4:	mov	x0, x19
    3ac8:	bl	2e08 <__asan_cplus_demangle_type>
    3acc:	mov	x20, x0
    3ad0:	cbnz	x0, 3aec <d_bare_function_type+0x50>
    3ad4:	mov	x0, #0x0                   	// #0
    3ad8:	ldp	x19, x20, [sp, #16]
    3adc:	ldp	x29, x30, [sp], #32
    3ae0:	ret
    3ae4:	cbnz	w1, 3ac4 <d_bare_function_type+0x28>
    3ae8:	mov	x20, #0x0                   	// #0
    3aec:	mov	x0, x19
    3af0:	bl	34f0 <d_parmlist>
    3af4:	mov	x3, x0
    3af8:	cbz	x0, 3ad4 <d_bare_function_type+0x38>
    3afc:	mov	x2, x20
    3b00:	mov	x0, x19
    3b04:	ldp	x19, x20, [sp, #16]
    3b08:	mov	w1, #0x29                  	// #41
    3b0c:	ldp	x29, x30, [sp], #32
    3b10:	b	64 <d_make_comp>

0000000000003b14 <d_function_type>:
    3b14:	stp	x29, x30, [sp, #-32]!
    3b18:	mov	x29, sp
    3b1c:	str	x19, [sp, #16]
    3b20:	mov	x19, x0
    3b24:	ldr	w0, [x0, #16]
    3b28:	tbnz	w0, #18, 3b40 <d_function_type+0x2c>
    3b2c:	ldr	w0, [x19, #84]
    3b30:	cmp	w0, #0x800
    3b34:	b.hi	3bc4 <d_function_type+0xb0>  // b.pmore
    3b38:	add	w0, w0, #0x1
    3b3c:	str	w0, [x19, #84]
    3b40:	ldr	x0, [x19, #24]
    3b44:	ldrb	w1, [x0]
    3b48:	cmp	w1, #0x46
    3b4c:	b.eq	3b74 <d_function_type+0x60>  // b.none
    3b50:	mov	x0, #0x0                   	// #0
    3b54:	ldr	w1, [x19, #16]
    3b58:	tbnz	w1, #18, 3b68 <d_function_type+0x54>
    3b5c:	ldr	w1, [x19, #84]
    3b60:	sub	w1, w1, #0x1
    3b64:	str	w1, [x19, #84]
    3b68:	ldr	x19, [sp, #16]
    3b6c:	ldp	x29, x30, [sp], #32
    3b70:	ret
    3b74:	add	x1, x0, #0x1
    3b78:	str	x1, [x19, #24]
    3b7c:	add	x0, x0, #0x2
    3b80:	ldurb	w2, [x0, #-1]
    3b84:	cmp	w2, #0x59
    3b88:	csel	x0, x0, x1, eq  // eq = none
    3b8c:	str	x0, [x19, #24]
    3b90:	mov	w1, #0x1                   	// #1
    3b94:	mov	x0, x19
    3b98:	bl	3a9c <d_bare_function_type>
    3b9c:	mov	x1, x0
    3ba0:	mov	x0, x19
    3ba4:	bl	fc <d_ref_qualifier>
    3ba8:	ldr	x1, [x19, #24]
    3bac:	ldrb	w2, [x1]
    3bb0:	cmp	w2, #0x45
    3bb4:	b.ne	3b50 <d_function_type+0x3c>  // b.any
    3bb8:	add	x1, x1, #0x1
    3bbc:	str	x1, [x19, #24]
    3bc0:	b	3b54 <d_function_type+0x40>
    3bc4:	mov	x0, #0x0                   	// #0
    3bc8:	b	3b68 <d_function_type+0x54>

0000000000003bcc <d_name>:
    3bcc:	stp	x29, x30, [sp, #-96]!
    3bd0:	mov	x29, sp
    3bd4:	ldr	x1, [x0, #24]
    3bd8:	stp	x19, x20, [sp, #16]
    3bdc:	stp	x21, x22, [sp, #32]
    3be0:	stp	x23, x24, [sp, #48]
    3be4:	str	x25, [sp, #64]
    3be8:	ldrb	w2, [x1]
    3bec:	cmp	w2, #0x55
    3bf0:	b.eq	3f58 <d_name+0x38c>  // b.none
    3bf4:	mov	x19, x0
    3bf8:	b.hi	3c3c <d_name+0x70>  // b.pmore
    3bfc:	cmp	w2, #0x4e
    3c00:	b.eq	3ce0 <d_name+0x114>  // b.none
    3c04:	cmp	w2, #0x53
    3c08:	b.eq	3f64 <d_name+0x398>  // b.none
    3c0c:	mov	x0, x19
    3c10:	bl	3748 <d_unqualified_name>
    3c14:	mov	x20, x0
    3c18:	ldr	x0, [x19, #24]
    3c1c:	ldrb	w0, [x0]
    3c20:	cmp	w0, #0x49
    3c24:	b.ne	3eac <d_name+0x2e0>  // b.any
    3c28:	mov	x1, x20
    3c2c:	mov	x0, x19
    3c30:	bl	154 <d_add_substitution>
    3c34:	cbnz	w0, 3f94 <d_name+0x3c8>
    3c38:	b	3cfc <d_name+0x130>
    3c3c:	cmp	w2, #0x5a
    3c40:	b.ne	3c0c <d_name+0x40>  // b.any
    3c44:	add	x1, x1, #0x1
    3c48:	str	x1, [x0, #24]
    3c4c:	mov	w1, #0x0                   	// #0
    3c50:	bl	3ffc <d_encoding>
    3c54:	mov	x20, x0
    3c58:	cbz	x0, 3cfc <d_name+0x130>
    3c5c:	ldr	x1, [x19, #24]
    3c60:	ldrb	w0, [x1]
    3c64:	cmp	w0, #0x45
    3c68:	b.ne	3cfc <d_name+0x130>  // b.any
    3c6c:	add	x0, x1, #0x1
    3c70:	str	x0, [x19, #24]
    3c74:	ldrb	w0, [x1, #1]
    3c78:	cmp	w0, #0x73
    3c7c:	b.ne	3ec8 <d_name+0x2fc>  // b.any
    3c80:	add	x1, x1, #0x2
    3c84:	str	x1, [x19, #24]
    3c88:	mov	x0, x19
    3c8c:	bl	694 <d_discriminator>
    3c90:	cbz	w0, 3cfc <d_name+0x130>
    3c94:	mov	x0, x19
    3c98:	mov	w2, #0xe                   	// #14
    3c9c:	adrp	x1, 0 <is_fnqual_component_type>
    3ca0:	add	x1, x1, #0x0
    3ca4:	bl	29bc <d_make_name>
    3ca8:	mov	x3, x0
    3cac:	ldr	w0, [x20]
    3cb0:	cmp	w0, #0x3
    3cb4:	b.ne	3ccc <d_name+0x100>  // b.any
    3cb8:	ldr	x0, [x20, #16]
    3cbc:	ldr	w1, [x0]
    3cc0:	cmp	w1, #0x29
    3cc4:	b.ne	3ccc <d_name+0x100>  // b.any
    3cc8:	str	xzr, [x0, #8]
    3ccc:	mov	x2, x20
    3cd0:	mov	w1, #0x2                   	// #2
    3cd4:	mov	x0, x19
    3cd8:	bl	64 <d_make_comp>
    3cdc:	b	3f5c <d_name+0x390>
    3ce0:	add	x1, x1, #0x1
    3ce4:	str	x1, [x0, #24]
    3ce8:	mov	w2, #0x1                   	// #1
    3cec:	add	x1, sp, #0x58
    3cf0:	bl	50a4 <d_cv_qualifiers>
    3cf4:	mov	x21, x0
    3cf8:	cbnz	x0, 3d04 <d_name+0x138>
    3cfc:	mov	x20, #0x0                   	// #0
    3d00:	b	3eac <d_name+0x2e0>
    3d04:	mov	x24, #0x3ff                 	// #1023
    3d08:	mov	x0, x19
    3d0c:	mov	x1, #0x0                   	// #0
    3d10:	movk	x24, #0x1008, lsl #16
    3d14:	bl	fc <d_ref_qualifier>
    3d18:	mov	x22, x0
    3d1c:	mov	x25, #0x0                   	// #0
    3d20:	mov	w23, #0x1                   	// #1
    3d24:	movk	x24, #0x20, lsl #32
    3d28:	ldr	x1, [x19, #24]
    3d2c:	ldrb	w20, [x1]
    3d30:	cbnz	w20, 3d3c <d_name+0x170>
    3d34:	str	xzr, [x21]
    3d38:	b	3cfc <d_name+0x130>
    3d3c:	cmp	w20, #0x44
    3d40:	b.ne	3d94 <d_name+0x1c8>  // b.any
    3d44:	ldrb	w0, [x1, #1]
    3d48:	and	w0, w0, #0xffffffdf
    3d4c:	and	w0, w0, #0xff
    3d50:	cmp	w0, #0x54
    3d54:	mov	x0, x19
    3d58:	b.ne	3d8c <d_name+0x1c0>  // b.any
    3d5c:	bl	2e08 <__asan_cplus_demangle_type>
    3d60:	mov	x4, x0
    3d64:	cbnz	x25, 3e00 <d_name+0x234>
    3d68:	ldr	x0, [x19, #24]
    3d6c:	ldrb	w0, [x0]
    3d70:	cmp	w0, #0x45
    3d74:	b.eq	3de8 <d_name+0x21c>  // b.none
    3d78:	mov	x1, x4
    3d7c:	mov	x0, x19
    3d80:	bl	154 <d_add_substitution>
    3d84:	cbnz	w0, 3de8 <d_name+0x21c>
    3d88:	b	3d34 <d_name+0x168>
    3d8c:	bl	3748 <d_unqualified_name>
    3d90:	b	3d60 <d_name+0x194>
    3d94:	sub	w0, w20, #0x30
    3d98:	and	w2, w0, #0xff
    3d9c:	cmp	w2, #0x26
    3da0:	lsr	x0, x24, x0
    3da4:	sub	w2, w20, #0x61
    3da8:	mvn	x0, x0
    3dac:	and	w2, w2, #0xff
    3db0:	and	w0, w0, #0x1
    3db4:	csel	w0, w0, w23, cc  // cc = lo, ul, last
    3db8:	cmp	w2, #0x19
    3dbc:	cset	w2, ls  // ls = plast
    3dc0:	eor	w0, w0, #0x1
    3dc4:	orr	w0, w2, w0
    3dc8:	cbnz	w0, 3df0 <d_name+0x224>
    3dcc:	cmp	w20, #0x53
    3dd0:	b.ne	3e08 <d_name+0x23c>  // b.any
    3dd4:	mov	x0, x19
    3dd8:	mov	w1, #0x1                   	// #1
    3ddc:	bl	2b70 <d_substitution>
    3de0:	mov	x4, x0
    3de4:	cbnz	x25, 3e00 <d_name+0x234>
    3de8:	mov	x25, x4
    3dec:	b	3d28 <d_name+0x15c>
    3df0:	mov	x0, x19
    3df4:	bl	3748 <d_unqualified_name>
    3df8:	mov	x4, x0
    3dfc:	cbz	x25, 3e38 <d_name+0x26c>
    3e00:	mov	w1, #0x1                   	// #1
    3e04:	b	3e24 <d_name+0x258>
    3e08:	cmp	w20, #0x49
    3e0c:	b.ne	3e44 <d_name+0x278>  // b.any
    3e10:	cbz	x25, 3d34 <d_name+0x168>
    3e14:	mov	x0, x19
    3e18:	bl	4fc4 <d_template_args>
    3e1c:	mov	x4, x0
    3e20:	mov	w1, #0x4                   	// #4
    3e24:	mov	x3, x4
    3e28:	mov	x2, x25
    3e2c:	mov	x0, x19
    3e30:	bl	64 <d_make_comp>
    3e34:	mov	x4, x0
    3e38:	cmp	w20, #0x53
    3e3c:	b.ne	3d68 <d_name+0x19c>  // b.any
    3e40:	b	3de8 <d_name+0x21c>
    3e44:	cmp	w20, #0x54
    3e48:	b.ne	3e58 <d_name+0x28c>  // b.any
    3e4c:	mov	x0, x19
    3e50:	bl	4f4 <d_template_param>
    3e54:	b	3d60 <d_name+0x194>
    3e58:	cmp	w20, #0x45
    3e5c:	b.eq	3e7c <d_name+0x2b0>  // b.none
    3e60:	cmp	w20, #0x4d
    3e64:	b.ne	3d34 <d_name+0x168>  // b.any
    3e68:	cbz	x25, 3d34 <d_name+0x168>
    3e6c:	add	x1, x1, #0x1
    3e70:	mov	x4, x25
    3e74:	str	x1, [x19, #24]
    3e78:	b	3de8 <d_name+0x21c>
    3e7c:	str	x25, [x21]
    3e80:	cbz	x25, 3cfc <d_name+0x130>
    3e84:	cbz	x22, 3e94 <d_name+0x2c8>
    3e88:	ldr	x0, [sp, #88]
    3e8c:	str	x0, [x22, #8]
    3e90:	str	x22, [sp, #88]
    3e94:	ldrb	w0, [x1]
    3e98:	cmp	w0, #0x45
    3e9c:	b.ne	3cfc <d_name+0x130>  // b.any
    3ea0:	ldr	x20, [sp, #88]
    3ea4:	add	x1, x1, #0x1
    3ea8:	str	x1, [x19, #24]
    3eac:	mov	x0, x20
    3eb0:	ldp	x19, x20, [sp, #16]
    3eb4:	ldp	x21, x22, [sp, #32]
    3eb8:	ldp	x23, x24, [sp, #48]
    3ebc:	ldr	x25, [sp, #64]
    3ec0:	ldp	x29, x30, [sp], #96
    3ec4:	ret
    3ec8:	cmp	w0, #0x64
    3ecc:	b.ne	3f08 <d_name+0x33c>  // b.any
    3ed0:	add	x1, x1, #0x2
    3ed4:	str	x1, [x19, #24]
    3ed8:	mov	x0, x19
    3edc:	bl	470 <d_compact_number>
    3ee0:	mov	w21, w0
    3ee4:	tbnz	w0, #31, 3cfc <d_name+0x130>
    3ee8:	mov	x0, x19
    3eec:	bl	3bcc <d_name>
    3ef0:	mov	x10, x0
    3ef4:	cbnz	x0, 3f10 <d_name+0x344>
    3ef8:	cmn	w21, #0x1
    3efc:	b.ne	3f34 <d_name+0x368>  // b.any
    3f00:	mov	x3, x10
    3f04:	b	3cac <d_name+0xe0>
    3f08:	mov	w21, #0xffffffff            	// #-1
    3f0c:	b	3ee8 <d_name+0x31c>
    3f10:	ldr	w0, [x0]
    3f14:	cmp	w0, #0x46
    3f18:	b.eq	3ef8 <d_name+0x32c>  // b.none
    3f1c:	cmp	w0, #0x48
    3f20:	b.eq	3ef8 <d_name+0x32c>  // b.none
    3f24:	mov	x0, x19
    3f28:	bl	694 <d_discriminator>
    3f2c:	cbnz	w0, 3ef8 <d_name+0x32c>
    3f30:	b	3cfc <d_name+0x130>
    3f34:	mov	x0, x19
    3f38:	bl	30 <d_make_empty>
    3f3c:	mov	x3, x0
    3f40:	cbz	x0, 3cac <d_name+0xe0>
    3f44:	mov	w0, #0x47                  	// #71
    3f48:	str	w0, [x3]
    3f4c:	str	x10, [x3, #8]
    3f50:	str	w21, [x3, #16]
    3f54:	b	3cac <d_name+0xe0>
    3f58:	bl	3748 <d_unqualified_name>
    3f5c:	mov	x20, x0
    3f60:	b	3eac <d_name+0x2e0>
    3f64:	ldrb	w2, [x1, #1]
    3f68:	cmp	w2, #0x74
    3f6c:	b.eq	3fac <d_name+0x3e0>  // b.none
    3f70:	mov	w1, #0x0                   	// #0
    3f74:	bl	2b70 <d_substitution>
    3f78:	mov	x20, x0
    3f7c:	mov	w0, #0x1                   	// #1
    3f80:	ldr	x1, [x19, #24]
    3f84:	ldrb	w1, [x1]
    3f88:	cmp	w1, #0x49
    3f8c:	b.ne	3eac <d_name+0x2e0>  // b.any
    3f90:	cbz	w0, 3c28 <d_name+0x5c>
    3f94:	mov	x0, x19
    3f98:	bl	4fc4 <d_template_args>
    3f9c:	mov	x2, x20
    3fa0:	mov	x3, x0
    3fa4:	mov	w1, #0x4                   	// #4
    3fa8:	b	3cd4 <d_name+0x108>
    3fac:	add	x1, x1, #0x2
    3fb0:	str	x1, [x0, #24]
    3fb4:	adrp	x1, 0 <is_fnqual_component_type>
    3fb8:	add	x1, x1, #0x0
    3fbc:	mov	w2, #0x3                   	// #3
    3fc0:	bl	29bc <d_make_name>
    3fc4:	mov	x20, x0
    3fc8:	mov	x0, x19
    3fcc:	bl	3748 <d_unqualified_name>
    3fd0:	mov	x3, x0
    3fd4:	mov	x2, x20
    3fd8:	mov	x0, x19
    3fdc:	mov	w1, #0x1                   	// #1
    3fe0:	bl	64 <d_make_comp>
    3fe4:	mov	x20, x0
    3fe8:	ldr	w0, [x19, #72]
    3fec:	add	w0, w0, #0x3
    3ff0:	str	w0, [x19, #72]
    3ff4:	mov	w0, #0x0                   	// #0
    3ff8:	b	3f80 <d_name+0x3b4>

0000000000003ffc <d_encoding>:
    3ffc:	stp	x29, x30, [sp, #-64]!
    4000:	mov	w3, #0x54                  	// #84
    4004:	mov	x29, sp
    4008:	ldr	x2, [x0, #24]
    400c:	stp	x19, x20, [sp, #16]
    4010:	mov	x19, x0
    4014:	stp	x21, x22, [sp, #32]
    4018:	mov	w21, w1
    401c:	str	x23, [sp, #48]
    4020:	ldrb	w1, [x2]
    4024:	cmp	w1, #0x47
    4028:	ccmp	w1, w3, #0x4, ne  // ne = any
    402c:	b.ne	44b0 <d_encoding+0x4b4>  // b.any
    4030:	ldr	w3, [x0, #72]
    4034:	add	w1, w3, #0x14
    4038:	str	w1, [x0, #72]
    403c:	ldrb	w1, [x2]
    4040:	cmp	w1, #0x54
    4044:	b.ne	4074 <d_encoding+0x78>  // b.any
    4048:	add	x1, x2, #0x1
    404c:	str	x1, [x0, #24]
    4050:	ldrb	w1, [x2, #1]
    4054:	cbnz	w1, 40d4 <d_encoding+0xd8>
    4058:	mov	x20, #0x0                   	// #0
    405c:	mov	x0, x20
    4060:	ldp	x19, x20, [sp, #16]
    4064:	ldp	x21, x22, [sp, #32]
    4068:	ldr	x23, [sp, #48]
    406c:	ldp	x29, x30, [sp], #64
    4070:	ret
    4074:	cmp	w1, #0x47
    4078:	b.ne	4058 <d_encoding+0x5c>  // b.any
    407c:	add	x1, x2, #0x1
    4080:	str	x1, [x0, #24]
    4084:	ldrb	w1, [x2, #1]
    4088:	cbz	w1, 4058 <d_encoding+0x5c>
    408c:	add	x1, x2, #0x2
    4090:	str	x1, [x0, #24]
    4094:	ldrb	w1, [x2, #1]
    4098:	cmp	w1, #0x54
    409c:	b.eq	43fc <d_encoding+0x400>  // b.none
    40a0:	b.hi	42fc <d_encoding+0x300>  // b.pmore
    40a4:	cmp	w1, #0x41
    40a8:	b.eq	43e4 <d_encoding+0x3e8>  // b.none
    40ac:	cmp	w1, #0x52
    40b0:	b.ne	4058 <d_encoding+0x5c>  // b.any
    40b4:	bl	3bcc <d_name>
    40b8:	mov	x9, x0
    40bc:	mov	x0, x19
    40c0:	bl	434 <d_number_component>
    40c4:	mov	x3, x0
    40c8:	mov	x2, x9
    40cc:	mov	w1, #0x16                  	// #22
    40d0:	b	4180 <d_encoding+0x184>
    40d4:	add	x1, x2, #0x2
    40d8:	str	x1, [x0, #24]
    40dc:	ldrb	w1, [x2, #1]
    40e0:	cmp	w1, #0x57
    40e4:	b.hi	4114 <d_encoding+0x118>  // b.pmore
    40e8:	cmp	w1, #0x40
    40ec:	b.ls	4058 <d_encoding+0x5c>  // b.plast
    40f0:	sub	w1, w1, #0x41
    40f4:	cmp	w1, #0x16
    40f8:	b.hi	4058 <d_encoding+0x5c>  // b.pmore
    40fc:	adrp	x0, 0 <is_fnqual_component_type>
    4100:	add	x0, x0, #0x0
    4104:	ldrb	w0, [x0, w1, uxtw]
    4108:	adr	x1, 4114 <d_encoding+0x118>
    410c:	add	x0, x1, w0, sxtb #2
    4110:	br	x0
    4114:	cmp	w1, #0x68
    4118:	b.eq	41e8 <d_encoding+0x1ec>  // b.none
    411c:	cmp	w1, #0x76
    4120:	b.eq	420c <d_encoding+0x210>  // b.none
    4124:	cmp	w1, #0x63
    4128:	b.ne	4058 <d_encoding+0x5c>  // b.any
    412c:	mov	w1, #0x0                   	// #0
    4130:	bl	554 <d_call_offset>
    4134:	cbz	w0, 4058 <d_encoding+0x5c>
    4138:	mov	x0, x19
    413c:	mov	w1, #0x0                   	// #0
    4140:	bl	554 <d_call_offset>
    4144:	cbz	w0, 4058 <d_encoding+0x5c>
    4148:	mov	w1, #0x0                   	// #0
    414c:	mov	x0, x19
    4150:	bl	3ffc <d_encoding>
    4154:	mov	x2, x0
    4158:	mov	x3, #0x0                   	// #0
    415c:	mov	w1, #0x11                  	// #17
    4160:	b	4180 <d_encoding+0x184>
    4164:	add	w3, w3, #0xf
    4168:	str	w3, [x19, #72]
    416c:	mov	x0, x19
    4170:	bl	2e08 <__asan_cplus_demangle_type>
    4174:	mov	x2, x0
    4178:	mov	x3, #0x0                   	// #0
    417c:	mov	w1, #0x9                   	// #9
    4180:	mov	x0, x19
    4184:	ldp	x19, x20, [sp, #16]
    4188:	ldp	x21, x22, [sp, #32]
    418c:	ldr	x23, [sp, #48]
    4190:	ldp	x29, x30, [sp], #64
    4194:	b	64 <d_make_comp>
    4198:	add	w3, w3, #0xa
    419c:	str	w3, [x19, #72]
    41a0:	mov	x0, x19
    41a4:	bl	2e08 <__asan_cplus_demangle_type>
    41a8:	mov	x2, x0
    41ac:	mov	x3, #0x0                   	// #0
    41b0:	mov	w1, #0xa                   	// #10
    41b4:	b	4180 <d_encoding+0x184>
    41b8:	mov	x0, x19
    41bc:	bl	2e08 <__asan_cplus_demangle_type>
    41c0:	mov	x3, #0x0                   	// #0
    41c4:	mov	x2, x0
    41c8:	mov	w1, #0xc                   	// #12
    41cc:	b	4180 <d_encoding+0x184>
    41d0:	mov	x0, x19
    41d4:	bl	2e08 <__asan_cplus_demangle_type>
    41d8:	mov	x3, #0x0                   	// #0
    41dc:	mov	x2, x0
    41e0:	mov	w1, #0xd                   	// #13
    41e4:	b	4180 <d_encoding+0x184>
    41e8:	bl	554 <d_call_offset>
    41ec:	cbz	w0, 4058 <d_encoding+0x5c>
    41f0:	mov	w1, #0x0                   	// #0
    41f4:	mov	x0, x19
    41f8:	bl	3ffc <d_encoding>
    41fc:	mov	x2, x0
    4200:	mov	x3, #0x0                   	// #0
    4204:	mov	w1, #0xf                   	// #15
    4208:	b	4180 <d_encoding+0x184>
    420c:	bl	554 <d_call_offset>
    4210:	cbz	w0, 4058 <d_encoding+0x5c>
    4214:	mov	w1, #0x0                   	// #0
    4218:	mov	x0, x19
    421c:	bl	3ffc <d_encoding>
    4220:	mov	x2, x0
    4224:	mov	x3, #0x0                   	// #0
    4228:	mov	w1, #0x10                  	// #16
    422c:	b	4180 <d_encoding+0x184>
    4230:	mov	x0, x19
    4234:	bl	2e08 <__asan_cplus_demangle_type>
    4238:	mov	x20, x0
    423c:	add	x0, x19, #0x18
    4240:	bl	3ac <d_number.isra.0>
    4244:	tbnz	w0, #31, 4058 <d_encoding+0x5c>
    4248:	ldr	x1, [x19, #24]
    424c:	ldrb	w0, [x1]
    4250:	cmp	w0, #0x5f
    4254:	b.ne	4058 <d_encoding+0x5c>  // b.any
    4258:	add	x1, x1, #0x1
    425c:	str	x1, [x19, #24]
    4260:	mov	x0, x19
    4264:	bl	2e08 <__asan_cplus_demangle_type>
    4268:	mov	x2, x0
    426c:	ldr	w1, [x19, #72]
    4270:	mov	x3, x20
    4274:	add	w1, w1, #0x5
    4278:	str	w1, [x19, #72]
    427c:	mov	w1, #0xb                   	// #11
    4280:	b	4180 <d_encoding+0x184>
    4284:	mov	x0, x19
    4288:	bl	2e08 <__asan_cplus_demangle_type>
    428c:	mov	x3, #0x0                   	// #0
    4290:	mov	x2, x0
    4294:	mov	w1, #0xe                   	// #14
    4298:	b	4180 <d_encoding+0x184>
    429c:	mov	x0, x19
    42a0:	bl	2e08 <__asan_cplus_demangle_type>
    42a4:	mov	x3, #0x0                   	// #0
    42a8:	mov	x2, x0
    42ac:	mov	w1, #0x12                  	// #18
    42b0:	b	4180 <d_encoding+0x184>
    42b4:	mov	x0, x19
    42b8:	bl	3bcc <d_name>
    42bc:	mov	x3, #0x0                   	// #0
    42c0:	mov	x2, x0
    42c4:	mov	w1, #0x14                  	// #20
    42c8:	b	4180 <d_encoding+0x184>
    42cc:	mov	x0, x19
    42d0:	bl	3bcc <d_name>
    42d4:	mov	x3, #0x0                   	// #0
    42d8:	mov	x2, x0
    42dc:	mov	w1, #0x15                  	// #21
    42e0:	b	4180 <d_encoding+0x184>
    42e4:	mov	x0, x19
    42e8:	bl	4e78 <d_template_arg>
    42ec:	mov	x3, #0x0                   	// #0
    42f0:	mov	x2, x0
    42f4:	mov	w1, #0x30                  	// #48
    42f8:	b	4180 <d_encoding+0x184>
    42fc:	cmp	w1, #0x56
    4300:	b.eq	43d0 <d_encoding+0x3d4>  // b.none
    4304:	cmp	w1, #0x72
    4308:	b.ne	4058 <d_encoding+0x5c>  // b.any
    430c:	add	x0, x0, #0x18
    4310:	bl	3ac <d_number.isra.0>
    4314:	cmp	w0, #0x1
    4318:	b.le	4058 <d_encoding+0x5c>
    431c:	ldr	x1, [x19, #24]
    4320:	ldrb	w2, [x1]
    4324:	cbz	w2, 4058 <d_encoding+0x5c>
    4328:	add	x7, x1, #0x1
    432c:	str	x7, [x19, #24]
    4330:	ldrb	w1, [x1]
    4334:	cmp	w1, #0x5f
    4338:	b.ne	4058 <d_encoding+0x5c>  // b.any
    433c:	sub	w20, w0, #0x1
    4340:	mov	x23, #0x0                   	// #0
    4344:	mov	w21, #0x41                  	// #65
    4348:	ldrb	w0, [x7]
    434c:	cbz	w0, 4058 <d_encoding+0x5c>
    4350:	cmp	w0, #0x24
    4354:	b.ne	4464 <d_encoding+0x468>  // b.any
    4358:	ldrb	w4, [x7, #1]
    435c:	cmp	w4, #0x53
    4360:	b.eq	4454 <d_encoding+0x458>  // b.none
    4364:	cmp	w4, #0x5f
    4368:	b.eq	445c <d_encoding+0x460>  // b.none
    436c:	cmp	w4, #0x24
    4370:	b.ne	4058 <d_encoding+0x5c>  // b.any
    4374:	mov	x0, x19
    4378:	bl	30 <d_make_empty>
    437c:	cbz	x0, 4388 <d_encoding+0x38c>
    4380:	str	w21, [x0]
    4384:	str	w4, [x0, #8]
    4388:	ldr	x7, [x19, #24]
    438c:	sub	w20, w20, #0x2
    4390:	add	x7, x7, #0x2
    4394:	str	x7, [x19, #24]
    4398:	cbz	x0, 4058 <d_encoding+0x5c>
    439c:	cbz	x23, 43b8 <d_encoding+0x3bc>
    43a0:	mov	x3, x0
    43a4:	mov	x2, x23
    43a8:	mov	x0, x19
    43ac:	mov	w1, #0x40                  	// #64
    43b0:	bl	64 <d_make_comp>
    43b4:	cbz	x0, 4058 <d_encoding+0x5c>
    43b8:	cmp	w20, #0x0
    43bc:	b.gt	444c <d_encoding+0x450>
    43c0:	mov	x2, x0
    43c4:	mov	x3, #0x0                   	// #0
    43c8:	mov	w1, #0x3f                  	// #63
    43cc:	b	4180 <d_encoding+0x184>
    43d0:	bl	3bcc <d_name>
    43d4:	mov	x2, x0
    43d8:	mov	x3, #0x0                   	// #0
    43dc:	mov	w1, #0x13                  	// #19
    43e0:	b	4180 <d_encoding+0x184>
    43e4:	mov	w1, #0x0                   	// #0
    43e8:	bl	3ffc <d_encoding>
    43ec:	mov	x3, #0x0                   	// #0
    43f0:	mov	x2, x0
    43f4:	mov	w1, #0x17                  	// #23
    43f8:	b	4180 <d_encoding+0x184>
    43fc:	ldrb	w1, [x2, #2]
    4400:	cbz	w1, 4430 <d_encoding+0x434>
    4404:	add	x1, x2, #0x3
    4408:	str	x1, [x0, #24]
    440c:	ldrb	w1, [x2, #2]
    4410:	cmp	w1, #0x6e
    4414:	b.ne	4430 <d_encoding+0x434>  // b.any
    4418:	mov	w1, #0x0                   	// #0
    441c:	bl	3ffc <d_encoding>
    4420:	mov	x3, #0x0                   	// #0
    4424:	mov	x2, x0
    4428:	mov	w1, #0x4a                  	// #74
    442c:	b	4180 <d_encoding+0x184>
    4430:	mov	w1, #0x0                   	// #0
    4434:	mov	x0, x19
    4438:	bl	3ffc <d_encoding>
    443c:	mov	x2, x0
    4440:	mov	x3, #0x0                   	// #0
    4444:	mov	w1, #0x49                  	// #73
    4448:	b	4180 <d_encoding+0x184>
    444c:	mov	x23, x0
    4450:	b	4348 <d_encoding+0x34c>
    4454:	mov	w4, #0x2f                  	// #47
    4458:	b	4374 <d_encoding+0x378>
    445c:	mov	w4, #0x2e                  	// #46
    4460:	b	4374 <d_encoding+0x378>
    4464:	mov	x0, #0x0                   	// #0
    4468:	ldrb	w1, [x7, x0]
    446c:	mov	w22, w0
    4470:	cbz	w1, 448c <d_encoding+0x490>
    4474:	cmp	w1, #0x24
    4478:	b.eq	448c <d_encoding+0x490>  // b.none
    447c:	add	x0, x0, #0x1
    4480:	add	w22, w22, #0x1
    4484:	cmp	w20, w0
    4488:	b.gt	4468 <d_encoding+0x46c>
    448c:	mov	x1, x7
    4490:	mov	w2, w22
    4494:	mov	x0, x19
    4498:	bl	29bc <d_make_name>
    449c:	ldr	x7, [x19, #24]
    44a0:	sub	w20, w20, w22
    44a4:	add	x7, x7, w22, sxtw
    44a8:	str	x7, [x19, #24]
    44ac:	b	4398 <d_encoding+0x39c>
    44b0:	bl	3bcc <d_name>
    44b4:	mov	x20, x0
    44b8:	cbz	x0, 4058 <d_encoding+0x5c>
    44bc:	cbz	w21, 44c8 <d_encoding+0x4cc>
    44c0:	ldr	w0, [x19, #16]
    44c4:	tbz	w0, #0, 4518 <d_encoding+0x51c>
    44c8:	ldr	x0, [x19, #24]
    44cc:	ldrb	w0, [x0]
    44d0:	cmp	w0, #0x45
    44d4:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    44d8:	b.eq	405c <d_encoding+0x60>  // b.none
    44dc:	mov	x3, #0x1f                  	// #31
    44e0:	mov	x2, x20
    44e4:	mov	x1, #0x1                   	// #1
    44e8:	movk	x3, #0x1a, lsl #48
    44ec:	ldr	w0, [x2]
    44f0:	cmp	w0, #0x4
    44f4:	b.eq	456c <d_encoding+0x570>  // b.none
    44f8:	b.hi	454c <d_encoding+0x550>  // b.pmore
    44fc:	cmp	w0, #0x2
    4500:	b.ne	450c <d_encoding+0x510>  // b.any
    4504:	ldr	x2, [x2, #16]
    4508:	cbnz	x2, 44ec <d_encoding+0x4f0>
    450c:	mov	w1, #0x0                   	// #0
    4510:	b	45a8 <d_encoding+0x5ac>
    4514:	ldr	x20, [x20, #8]
    4518:	ldr	w2, [x20]
    451c:	mov	w0, w2
    4520:	bl	0 <is_fnqual_component_type>
    4524:	cbnz	w0, 4514 <d_encoding+0x518>
    4528:	cmp	w2, #0x2
    452c:	b.ne	405c <d_encoding+0x60>  // b.any
    4530:	ldr	x2, [x20, #16]
    4534:	ldr	w0, [x2]
    4538:	bl	0 <is_fnqual_component_type>
    453c:	cbz	w0, 405c <d_encoding+0x60>
    4540:	ldr	x0, [x2, #8]
    4544:	str	x0, [x20, #16]
    4548:	b	4530 <d_encoding+0x534>
    454c:	sub	w0, w0, #0x1c
    4550:	cmp	w0, #0x34
    4554:	b.hi	450c <d_encoding+0x510>  // b.pmore
    4558:	lsl	x0, x1, x0
    455c:	tst	x0, x3
    4560:	b.eq	450c <d_encoding+0x510>  // b.none
    4564:	ldr	x2, [x2, #8]
    4568:	b	4508 <d_encoding+0x50c>
    456c:	ldr	x1, [x2, #8]
    4570:	cbz	x1, 4594 <d_encoding+0x598>
    4574:	ldr	w0, [x1]
    4578:	cmp	w0, #0x8
    457c:	b.hi	459c <d_encoding+0x5a0>  // b.pmore
    4580:	cmp	w0, #0x6
    4584:	b.hi	45ec <d_encoding+0x5f0>  // b.pmore
    4588:	sub	w0, w0, #0x1
    458c:	cmp	w0, #0x1
    4590:	b.ls	45e4 <d_encoding+0x5e8>  // b.plast
    4594:	mov	w0, #0x0                   	// #0
    4598:	b	45a4 <d_encoding+0x5a8>
    459c:	cmp	w0, #0x35
    45a0:	cset	w0, eq  // eq = none
    45a4:	eor	w1, w0, #0x1
    45a8:	mov	x0, x19
    45ac:	bl	3a9c <d_bare_function_type>
    45b0:	mov	x3, x0
    45b4:	cbz	x0, 4058 <d_encoding+0x5c>
    45b8:	cbnz	w21, 45d8 <d_encoding+0x5dc>
    45bc:	ldr	w0, [x20]
    45c0:	cmp	w0, #0x2
    45c4:	b.ne	45d8 <d_encoding+0x5dc>  // b.any
    45c8:	ldr	w0, [x3]
    45cc:	cmp	w0, #0x29
    45d0:	b.ne	45d8 <d_encoding+0x5dc>  // b.any
    45d4:	str	xzr, [x3, #8]
    45d8:	mov	x2, x20
    45dc:	mov	w1, #0x3                   	// #3
    45e0:	b	4180 <d_encoding+0x184>
    45e4:	ldr	x1, [x1, #16]
    45e8:	b	4570 <d_encoding+0x574>
    45ec:	mov	w0, #0x1                   	// #1
    45f0:	b	45a4 <d_encoding+0x5a8>

00000000000045f4 <__asan_cplus_demangle_mangled_name>:
    45f4:	stp	x29, x30, [sp, #-48]!
    45f8:	mov	x29, sp
    45fc:	stp	x19, x20, [sp, #16]
    4600:	mov	x19, x0
    4604:	ldr	x0, [x0, #24]
    4608:	str	x21, [sp, #32]
    460c:	mov	w21, w1
    4610:	ldrb	w1, [x0]
    4614:	cmp	w1, #0x5f
    4618:	b.ne	4698 <__asan_cplus_demangle_mangled_name+0xa4>  // b.any
    461c:	add	x0, x0, #0x1
    4620:	str	x0, [x19, #24]
    4624:	ldr	x0, [x19, #24]
    4628:	ldrb	w1, [x0]
    462c:	cmp	w1, #0x5a
    4630:	b.ne	469c <__asan_cplus_demangle_mangled_name+0xa8>  // b.any
    4634:	add	x0, x0, #0x1
    4638:	str	x0, [x19, #24]
    463c:	mov	w1, w21
    4640:	mov	x0, x19
    4644:	bl	3ffc <d_encoding>
    4648:	mov	x20, x0
    464c:	cbz	w21, 46a0 <__asan_cplus_demangle_mangled_name+0xac>
    4650:	ldr	w0, [x19, #16]
    4654:	tbz	w0, #0, 46a0 <__asan_cplus_demangle_mangled_name+0xac>
    4658:	ldr	x1, [x19, #24]
    465c:	ldrb	w0, [x1]
    4660:	cmp	w0, #0x2e
    4664:	b.ne	46a0 <__asan_cplus_demangle_mangled_name+0xac>  // b.any
    4668:	ldrb	w0, [x1, #1]
    466c:	sub	w2, w0, #0x61
    4670:	cmp	w0, #0x5f
    4674:	and	w2, w2, #0xff
    4678:	ccmp	w2, #0x19, #0x0, ne  // ne = any
    467c:	b.ls	46b4 <__asan_cplus_demangle_mangled_name+0xc0>  // b.plast
    4680:	sub	w0, w0, #0x30
    4684:	and	w0, w0, #0xff
    4688:	cmp	w0, #0x9
    468c:	b.hi	46a0 <__asan_cplus_demangle_mangled_name+0xac>  // b.pmore
    4690:	mov	x2, x1
    4694:	b	46d0 <__asan_cplus_demangle_mangled_name+0xdc>
    4698:	cbz	w21, 4624 <__asan_cplus_demangle_mangled_name+0x30>
    469c:	mov	x20, #0x0                   	// #0
    46a0:	mov	x0, x20
    46a4:	ldp	x19, x20, [sp, #16]
    46a8:	ldr	x21, [sp, #32]
    46ac:	ldp	x29, x30, [sp], #48
    46b0:	ret
    46b4:	add	x2, x1, #0x2
    46b8:	ldrb	w3, [x2]
    46bc:	sub	w0, w3, #0x61
    46c0:	cmp	w3, #0x5f
    46c4:	and	w0, w0, #0xff
    46c8:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    46cc:	b.ls	4708 <__asan_cplus_demangle_mangled_name+0x114>  // b.plast
    46d0:	ldrb	w0, [x2]
    46d4:	cmp	w0, #0x2e
    46d8:	b.eq	4710 <__asan_cplus_demangle_mangled_name+0x11c>  // b.none
    46dc:	str	x2, [x19, #24]
    46e0:	mov	x0, x19
    46e4:	sub	w2, w2, w1
    46e8:	bl	29bc <d_make_name>
    46ec:	mov	x3, x0
    46f0:	mov	x2, x20
    46f4:	mov	x0, x19
    46f8:	mov	w1, #0x4e                  	// #78
    46fc:	bl	64 <d_make_comp>
    4700:	mov	x20, x0
    4704:	b	4658 <__asan_cplus_demangle_mangled_name+0x64>
    4708:	add	x2, x2, #0x1
    470c:	b	46b8 <__asan_cplus_demangle_mangled_name+0xc4>
    4710:	ldrb	w0, [x2, #1]
    4714:	sub	w0, w0, #0x30
    4718:	and	w0, w0, #0xff
    471c:	cmp	w0, #0x9
    4720:	b.hi	46dc <__asan_cplus_demangle_mangled_name+0xe8>  // b.pmore
    4724:	add	x2, x2, #0x2
    4728:	ldrb	w0, [x2]
    472c:	sub	w0, w0, #0x30
    4730:	and	w0, w0, #0xff
    4734:	cmp	w0, #0x9
    4738:	b.hi	46d0 <__asan_cplus_demangle_mangled_name+0xdc>  // b.pmore
    473c:	add	x2, x2, #0x1
    4740:	b	4728 <__asan_cplus_demangle_mangled_name+0x134>

0000000000004744 <d_expr_primary>:
    4744:	ldr	x1, [x0, #24]
    4748:	ldrb	w2, [x1]
    474c:	cmp	w2, #0x4c
    4750:	b.eq	4770 <d_expr_primary+0x2c>  // b.none
    4754:	mov	x0, #0x0                   	// #0
    4758:	ret
    475c:	mov	x0, #0x0                   	// #0
    4760:	ldp	x19, x20, [sp, #16]
    4764:	ldr	x21, [sp, #32]
    4768:	ldp	x29, x30, [sp], #48
    476c:	ret
    4770:	stp	x29, x30, [sp, #-48]!
    4774:	add	x2, x1, #0x1
    4778:	mov	x29, sp
    477c:	stp	x19, x20, [sp, #16]
    4780:	mov	x19, x0
    4784:	str	x21, [sp, #32]
    4788:	str	x2, [x0, #24]
    478c:	mov	w2, #0x5a                  	// #90
    4790:	ldrb	w1, [x1, #1]
    4794:	cmp	w1, #0x5f
    4798:	ccmp	w1, w2, #0x4, ne  // ne = any
    479c:	b.ne	47c4 <d_expr_primary+0x80>  // b.any
    47a0:	mov	w1, #0x0                   	// #0
    47a4:	bl	45f4 <__asan_cplus_demangle_mangled_name>
    47a8:	ldr	x1, [x19, #24]
    47ac:	ldrb	w2, [x1]
    47b0:	cmp	w2, #0x45
    47b4:	b.ne	475c <d_expr_primary+0x18>  // b.any
    47b8:	add	x1, x1, #0x1
    47bc:	str	x1, [x19, #24]
    47c0:	b	4760 <d_expr_primary+0x1c>
    47c4:	bl	2e08 <__asan_cplus_demangle_type>
    47c8:	mov	x20, x0
    47cc:	cbz	x0, 475c <d_expr_primary+0x18>
    47d0:	ldr	w0, [x0]
    47d4:	cmp	w0, #0x27
    47d8:	b.ne	47f8 <d_expr_primary+0xb4>  // b.any
    47dc:	ldr	x1, [x20, #8]
    47e0:	ldr	w0, [x1, #28]
    47e4:	cbz	w0, 47f8 <d_expr_primary+0xb4>
    47e8:	ldr	w1, [x1, #8]
    47ec:	ldr	w0, [x19, #72]
    47f0:	sub	w0, w0, w1
    47f4:	str	w0, [x19, #72]
    47f8:	ldr	x0, [x19, #24]
    47fc:	ldrb	w1, [x0]
    4800:	cmp	w1, #0x6e
    4804:	b.ne	484c <d_expr_primary+0x108>  // b.any
    4808:	add	x0, x0, #0x1
    480c:	mov	w21, #0x3e                  	// #62
    4810:	str	x0, [x19, #24]
    4814:	ldr	x1, [x19, #24]
    4818:	ldr	x2, [x19, #24]
    481c:	ldrb	w0, [x2]
    4820:	cmp	w0, #0x45
    4824:	b.ne	4854 <d_expr_primary+0x110>  // b.any
    4828:	sub	w2, w2, w1
    482c:	mov	x0, x19
    4830:	bl	29bc <d_make_name>
    4834:	mov	x3, x0
    4838:	mov	x2, x20
    483c:	mov	w1, w21
    4840:	mov	x0, x19
    4844:	bl	64 <d_make_comp>
    4848:	b	47a8 <d_expr_primary+0x64>
    484c:	mov	w21, #0x3d                  	// #61
    4850:	b	4814 <d_expr_primary+0xd0>
    4854:	cbz	w0, 475c <d_expr_primary+0x18>
    4858:	add	x2, x2, #0x1
    485c:	str	x2, [x19, #24]
    4860:	b	4818 <d_expr_primary+0xd4>

0000000000004864 <d_expression_1>:
    4864:	ldr	x1, [x0, #24]
    4868:	ldrb	w2, [x1]
    486c:	cmp	w2, #0x4c
    4870:	b.ne	4878 <d_expression_1+0x14>  // b.any
    4874:	b	4744 <d_expr_primary>
    4878:	cmp	w2, #0x54
    487c:	b.ne	4884 <d_expression_1+0x20>  // b.any
    4880:	b	4f4 <d_template_param>
    4884:	stp	x29, x30, [sp, #-48]!
    4888:	cmp	w2, #0x73
    488c:	mov	x29, sp
    4890:	stp	x19, x20, [sp, #16]
    4894:	mov	x19, x0
    4898:	stp	x21, x22, [sp, #32]
    489c:	b.ne	4940 <d_expression_1+0xdc>  // b.any
    48a0:	ldrb	w3, [x1, #1]
    48a4:	cmp	w3, #0x72
    48a8:	b.ne	491c <d_expression_1+0xb8>  // b.any
    48ac:	add	x1, x1, #0x2
    48b0:	str	x1, [x0, #24]
    48b4:	bl	2e08 <__asan_cplus_demangle_type>
    48b8:	mov	x20, x0
    48bc:	mov	x0, x19
    48c0:	bl	3748 <d_unqualified_name>
    48c4:	mov	x21, x0
    48c8:	ldr	x0, [x19, #24]
    48cc:	ldrb	w0, [x0]
    48d0:	cmp	w0, #0x49
    48d4:	b.eq	48f8 <d_expression_1+0x94>  // b.none
    48d8:	mov	x3, x21
    48dc:	mov	x2, x20
    48e0:	mov	w1, #0x1                   	// #1
    48e4:	mov	x0, x19
    48e8:	ldp	x19, x20, [sp, #16]
    48ec:	ldp	x21, x22, [sp, #32]
    48f0:	ldp	x29, x30, [sp], #48
    48f4:	b	64 <d_make_comp>
    48f8:	mov	x0, x19
    48fc:	bl	4fc4 <d_template_args>
    4900:	mov	x3, x0
    4904:	mov	x2, x21
    4908:	mov	x0, x19
    490c:	mov	w1, #0x4                   	// #4
    4910:	bl	64 <d_make_comp>
    4914:	mov	x3, x0
    4918:	b	48dc <d_expression_1+0x78>
    491c:	cmp	w3, #0x70
    4920:	b.ne	4a2c <d_expression_1+0x1c8>  // b.any
    4924:	add	x1, x1, #0x2
    4928:	str	x1, [x0, #24]
    492c:	bl	4864 <d_expression_1>
    4930:	mov	x2, x0
    4934:	mov	x3, #0x0                   	// #0
    4938:	mov	w1, #0x4b                  	// #75
    493c:	b	48e4 <d_expression_1+0x80>
    4940:	cmp	w2, #0x66
    4944:	b.ne	49c8 <d_expression_1+0x164>  // b.any
    4948:	ldrb	w3, [x1, #1]
    494c:	cmp	w3, #0x70
    4950:	b.ne	4a2c <d_expression_1+0x1c8>  // b.any
    4954:	add	x2, x1, #0x2
    4958:	str	x2, [x0, #24]
    495c:	ldrb	w2, [x1, #2]
    4960:	cmp	w2, #0x54
    4964:	b.ne	49a8 <d_expression_1+0x144>  // b.any
    4968:	add	x1, x1, #0x3
    496c:	mov	w4, #0x0                   	// #0
    4970:	str	x1, [x0, #24]
    4974:	mov	x0, x19
    4978:	bl	30 <d_make_empty>
    497c:	mov	x20, x0
    4980:	cbz	x0, 4994 <d_expression_1+0x130>
    4984:	sxtw	x4, w4
    4988:	mov	w0, #0x6                   	// #6
    498c:	str	w0, [x20]
    4990:	str	x4, [x20, #8]
    4994:	mov	x0, x20
    4998:	ldp	x19, x20, [sp, #16]
    499c:	ldp	x21, x22, [sp, #32]
    49a0:	ldp	x29, x30, [sp], #48
    49a4:	ret
    49a8:	bl	470 <d_compact_number>
    49ac:	mvn	x1, x0
    49b0:	tst	x1, #0x7fffffff
    49b4:	b.ne	49c0 <d_expression_1+0x15c>  // b.any
    49b8:	mov	x20, #0x0                   	// #0
    49bc:	b	4994 <d_expression_1+0x130>
    49c0:	add	w4, w0, #0x1
    49c4:	b	4974 <d_expression_1+0x110>
    49c8:	sub	w0, w2, #0x30
    49cc:	and	w0, w0, #0xff
    49d0:	cmp	w0, #0x9
    49d4:	b.ls	49f4 <d_expression_1+0x190>  // b.plast
    49d8:	cmp	w2, #0x6f
    49dc:	b.ne	4a2c <d_expression_1+0x1c8>  // b.any
    49e0:	ldrb	w0, [x1, #1]
    49e4:	cmp	w0, #0x6e
    49e8:	b.ne	4a94 <d_expression_1+0x230>  // b.any
    49ec:	add	x1, x1, #0x2
    49f0:	str	x1, [x19, #24]
    49f4:	mov	x0, x19
    49f8:	bl	3748 <d_unqualified_name>
    49fc:	mov	x20, x0
    4a00:	cbz	x0, 49b8 <d_expression_1+0x154>
    4a04:	ldr	x0, [x19, #24]
    4a08:	ldrb	w0, [x0]
    4a0c:	cmp	w0, #0x49
    4a10:	b.ne	4994 <d_expression_1+0x130>  // b.any
    4a14:	mov	x0, x19
    4a18:	bl	4fc4 <d_template_args>
    4a1c:	mov	x2, x20
    4a20:	mov	x3, x0
    4a24:	mov	w1, #0x4                   	// #4
    4a28:	b	48e4 <d_expression_1+0x80>
    4a2c:	cmp	w2, #0x69
    4a30:	mov	w0, #0x74                  	// #116
    4a34:	ccmp	w2, w0, #0x4, ne  // ne = any
    4a38:	b.ne	4a94 <d_expression_1+0x230>  // b.any
    4a3c:	ldrb	w0, [x1, #1]
    4a40:	cmp	w0, #0x6c
    4a44:	b.ne	4a94 <d_expression_1+0x230>  // b.any
    4a48:	add	x1, x1, #0x2
    4a4c:	str	x1, [x19, #24]
    4a50:	cmp	w2, #0x74
    4a54:	b.ne	4a8c <d_expression_1+0x228>  // b.any
    4a58:	mov	x0, x19
    4a5c:	bl	2e08 <__asan_cplus_demangle_type>
    4a60:	mov	x20, x0
    4a64:	ldr	x0, [x19, #24]
    4a68:	ldrb	w0, [x0, #1]
    4a6c:	cbz	w0, 49b8 <d_expression_1+0x154>
    4a70:	mov	w1, #0x45                  	// #69
    4a74:	mov	x0, x19
    4a78:	bl	4ff0 <d_exprlist>
    4a7c:	mov	x3, x0
    4a80:	mov	x2, x20
    4a84:	mov	w1, #0x31                  	// #49
    4a88:	b	48e4 <d_expression_1+0x80>
    4a8c:	mov	x20, #0x0                   	// #0
    4a90:	b	4a64 <d_expression_1+0x200>
    4a94:	mov	x0, x19
    4a98:	bl	35d0 <d_operator_name>
    4a9c:	mov	x21, x0
    4aa0:	cbz	x0, 49b8 <d_expression_1+0x154>
    4aa4:	ldr	w0, [x0]
    4aa8:	cmp	w0, #0x32
    4aac:	b.ne	4af8 <d_expression_1+0x294>  // b.any
    4ab0:	ldr	x0, [x21, #8]
    4ab4:	ldr	x20, [x0]
    4ab8:	ldr	w0, [x0, #16]
    4abc:	sub	w1, w0, #0x2
    4ac0:	ldr	w0, [x19, #72]
    4ac4:	add	w0, w0, w1
    4ac8:	str	w0, [x19, #72]
    4acc:	adrp	x1, 0 <is_fnqual_component_type>
    4ad0:	mov	x0, x20
    4ad4:	add	x1, x1, #0x0
    4ad8:	bl	0 <__asan_internal_strcmp>
    4adc:	cbnz	w0, 4afc <d_expression_1+0x298>
    4ae0:	mov	x0, x19
    4ae4:	bl	2e08 <__asan_cplus_demangle_type>
    4ae8:	mov	x3, x0
    4aec:	mov	x2, x21
    4af0:	mov	w1, #0x37                  	// #55
    4af4:	b	48e4 <d_expression_1+0x80>
    4af8:	mov	x20, #0x0                   	// #0
    4afc:	ldr	w0, [x21]
    4b00:	cmp	w0, #0x33
    4b04:	b.eq	4b40 <d_expression_1+0x2dc>  // b.none
    4b08:	cmp	w0, #0x34
    4b0c:	b.eq	4b58 <d_expression_1+0x2f4>  // b.none
    4b10:	cmp	w0, #0x32
    4b14:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4b18:	ldr	x1, [x21, #8]
    4b1c:	ldr	w2, [x1, #20]
    4b20:	cmp	w2, #0x3
    4b24:	b.hi	49b8 <d_expression_1+0x154>  // b.pmore
    4b28:	adrp	x1, 0 <is_fnqual_component_type>
    4b2c:	add	x1, x1, #0x0
    4b30:	ldrb	w1, [x1, w2, uxtw]
    4b34:	adr	x2, 4b40 <d_expression_1+0x2dc>
    4b38:	add	x1, x2, w1, sxtb #2
    4b3c:	br	x1
    4b40:	ldr	w2, [x21, #8]
    4b44:	b	4b20 <d_expression_1+0x2bc>
    4b48:	mov	x2, x21
    4b4c:	mov	x3, #0x0                   	// #0
    4b50:	mov	w1, #0x36                  	// #54
    4b54:	b	48e4 <d_expression_1+0x80>
    4b58:	cbz	x20, 4e28 <d_expression_1+0x5c4>
    4b5c:	ldrb	w1, [x20]
    4b60:	mov	w2, #0x6d                  	// #109
    4b64:	cmp	w1, #0x70
    4b68:	ccmp	w1, w2, #0x4, ne  // ne = any
    4b6c:	b.ne	4b94 <d_expression_1+0x330>  // b.any
    4b70:	ldrb	w2, [x20, #1]
    4b74:	cmp	w2, w1
    4b78:	b.ne	4b94 <d_expression_1+0x330>  // b.any
    4b7c:	ldr	x1, [x19, #24]
    4b80:	ldrb	w2, [x1]
    4b84:	cmp	w2, #0x5f
    4b88:	b.ne	4e40 <d_expression_1+0x5dc>  // b.any
    4b8c:	add	x1, x1, #0x1
    4b90:	str	x1, [x19, #24]
    4b94:	mov	w22, #0x0                   	// #0
    4b98:	cmp	w0, #0x34
    4b9c:	b.ne	4be4 <d_expression_1+0x380>  // b.any
    4ba0:	ldr	x0, [x19, #24]
    4ba4:	ldrb	w1, [x0]
    4ba8:	cmp	w1, #0x5f
    4bac:	b.ne	4be0 <d_expression_1+0x37c>  // b.any
    4bb0:	add	x0, x0, #0x1
    4bb4:	str	x0, [x19, #24]
    4bb8:	mov	w1, #0x45                  	// #69
    4bbc:	mov	x0, x19
    4bc0:	bl	4ff0 <d_exprlist>
    4bc4:	mov	x3, x0
    4bc8:	cbz	w22, 4aec <d_expression_1+0x288>
    4bcc:	mov	x2, x0
    4bd0:	mov	w1, #0x39                  	// #57
    4bd4:	mov	x0, x19
    4bd8:	bl	64 <d_make_comp>
    4bdc:	b	4ae8 <d_expression_1+0x284>
    4be0:	cbz	x20, 4e34 <d_expression_1+0x5d0>
    4be4:	adrp	x1, 0 <is_fnqual_component_type>
    4be8:	mov	x0, x20
    4bec:	add	x1, x1, #0x0
    4bf0:	bl	0 <__asan_internal_strcmp>
    4bf4:	cbnz	w0, 4e34 <d_expression_1+0x5d0>
    4bf8:	mov	x0, x19
    4bfc:	bl	4f0c <d_template_args_1>
    4c00:	b	4bc4 <d_expression_1+0x360>
    4c04:	cbz	x20, 49b8 <d_expression_1+0x154>
    4c08:	ldr	x0, [x21, #8]
    4c0c:	bl	64c <op_is_new_cast.isra.0>
    4c10:	cbz	w0, 4c68 <d_expression_1+0x404>
    4c14:	mov	x0, x19
    4c18:	bl	2e08 <__asan_cplus_demangle_type>
    4c1c:	mov	x22, x0
    4c20:	adrp	x1, 0 <is_fnqual_component_type>
    4c24:	mov	x0, x20
    4c28:	add	x1, x1, #0x0
    4c2c:	bl	0 <__asan_internal_strcmp>
    4c30:	cbnz	w0, 4c88 <d_expression_1+0x424>
    4c34:	mov	x0, x19
    4c38:	mov	w1, #0x45                  	// #69
    4c3c:	bl	4ff0 <d_exprlist>
    4c40:	mov	x20, x0
    4c44:	mov	x3, x20
    4c48:	mov	x2, x22
    4c4c:	mov	w1, #0x39                  	// #57
    4c50:	mov	x0, x19
    4c54:	bl	64 <d_make_comp>
    4c58:	mov	x3, x0
    4c5c:	mov	x2, x21
    4c60:	mov	w1, #0x38                  	// #56
    4c64:	b	48e4 <d_expression_1+0x80>
    4c68:	ldrb	w0, [x20]
    4c6c:	cmp	w0, #0x66
    4c70:	mov	x0, x19
    4c74:	b.ne	4c80 <d_expression_1+0x41c>  // b.any
    4c78:	bl	35d0 <d_operator_name>
    4c7c:	b	4c1c <d_expression_1+0x3b8>
    4c80:	bl	4864 <d_expression_1>
    4c84:	b	4c1c <d_expression_1+0x3b8>
    4c88:	adrp	x1, 0 <is_fnqual_component_type>
    4c8c:	mov	x0, x20
    4c90:	add	x1, x1, #0x0
    4c94:	bl	0 <__asan_internal_strcmp>
    4c98:	cbnz	w0, 4cd8 <d_expression_1+0x474>
    4c9c:	mov	x0, x19
    4ca0:	bl	3748 <d_unqualified_name>
    4ca4:	mov	x20, x0
    4ca8:	ldr	x0, [x19, #24]
    4cac:	ldrb	w0, [x0]
    4cb0:	cmp	w0, #0x49
    4cb4:	b.ne	4c44 <d_expression_1+0x3e0>  // b.any
    4cb8:	mov	x0, x19
    4cbc:	bl	4fc4 <d_template_args>
    4cc0:	mov	x2, x20
    4cc4:	mov	x3, x0
    4cc8:	mov	w1, #0x4                   	// #4
    4ccc:	mov	x0, x19
    4cd0:	bl	64 <d_make_comp>
    4cd4:	b	4c40 <d_expression_1+0x3dc>
    4cd8:	adrp	x1, 0 <is_fnqual_component_type>
    4cdc:	mov	x0, x20
    4ce0:	add	x1, x1, #0x0
    4ce4:	bl	0 <__asan_internal_strcmp>
    4ce8:	cbz	w0, 4c9c <d_expression_1+0x438>
    4cec:	mov	x0, x19
    4cf0:	bl	4864 <d_expression_1>
    4cf4:	b	4c40 <d_expression_1+0x3dc>
    4cf8:	cbz	x20, 49b8 <d_expression_1+0x154>
    4cfc:	adrp	x1, 0 <is_fnqual_component_type>
    4d00:	mov	x0, x20
    4d04:	add	x1, x1, #0x0
    4d08:	bl	0 <__asan_internal_strcmp>
    4d0c:	cbnz	w0, 4d6c <d_expression_1+0x508>
    4d10:	mov	x0, x19
    4d14:	bl	4864 <d_expression_1>
    4d18:	mov	x20, x0
    4d1c:	mov	x0, x19
    4d20:	bl	4864 <d_expression_1>
    4d24:	mov	x22, x0
    4d28:	mov	x0, x19
    4d2c:	bl	4864 <d_expression_1>
    4d30:	cbz	x0, 49b8 <d_expression_1+0x154>
    4d34:	mov	x3, x0
    4d38:	mov	x2, x22
    4d3c:	mov	w1, #0x3c                  	// #60
    4d40:	mov	x0, x19
    4d44:	bl	64 <d_make_comp>
    4d48:	mov	x3, x0
    4d4c:	mov	x2, x20
    4d50:	mov	w1, #0x3b                  	// #59
    4d54:	mov	x0, x19
    4d58:	bl	64 <d_make_comp>
    4d5c:	mov	x2, x21
    4d60:	mov	x3, x0
    4d64:	mov	w1, #0x3a                  	// #58
    4d68:	b	48e4 <d_expression_1+0x80>
    4d6c:	ldrb	w0, [x20]
    4d70:	cmp	w0, #0x66
    4d74:	b.ne	4d84 <d_expression_1+0x520>  // b.any
    4d78:	mov	x0, x19
    4d7c:	bl	35d0 <d_operator_name>
    4d80:	b	4d18 <d_expression_1+0x4b4>
    4d84:	cmp	w0, #0x6e
    4d88:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4d8c:	ldrb	w0, [x20, #1]
    4d90:	mov	w1, #0x61                  	// #97
    4d94:	cmp	w0, #0x77
    4d98:	ccmp	w0, w1, #0x4, ne  // ne = any
    4d9c:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4da0:	mov	w1, #0x5f                  	// #95
    4da4:	mov	x0, x19
    4da8:	bl	4ff0 <d_exprlist>
    4dac:	mov	x20, x0
    4db0:	mov	x0, x19
    4db4:	bl	2e08 <__asan_cplus_demangle_type>
    4db8:	mov	x22, x0
    4dbc:	ldr	x0, [x19, #24]
    4dc0:	ldrb	w1, [x0]
    4dc4:	cmp	w1, #0x45
    4dc8:	b.ne	4ddc <d_expression_1+0x578>  // b.any
    4dcc:	add	x0, x0, #0x1
    4dd0:	str	x0, [x19, #24]
    4dd4:	mov	x0, #0x0                   	// #0
    4dd8:	b	4d34 <d_expression_1+0x4d0>
    4ddc:	cmp	w1, #0x70
    4de0:	b.ne	4e08 <d_expression_1+0x5a4>  // b.any
    4de4:	ldrb	w1, [x0, #1]
    4de8:	cmp	w1, #0x69
    4dec:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4df0:	add	x0, x0, #0x2
    4df4:	str	x0, [x19, #24]
    4df8:	mov	w1, #0x45                  	// #69
    4dfc:	mov	x0, x19
    4e00:	bl	4ff0 <d_exprlist>
    4e04:	b	4d34 <d_expression_1+0x4d0>
    4e08:	cmp	w1, #0x69
    4e0c:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4e10:	ldrb	w0, [x0, #1]
    4e14:	cmp	w0, #0x6c
    4e18:	b.ne	49b8 <d_expression_1+0x154>  // b.any
    4e1c:	mov	x0, x19
    4e20:	bl	4864 <d_expression_1>
    4e24:	b	4d34 <d_expression_1+0x4d0>
    4e28:	cmp	w0, #0x34
    4e2c:	mov	w22, #0x0                   	// #0
    4e30:	b.eq	4ba0 <d_expression_1+0x33c>  // b.none
    4e34:	mov	x0, x19
    4e38:	bl	4864 <d_expression_1>
    4e3c:	b	4bc4 <d_expression_1+0x360>
    4e40:	mov	w22, #0x1                   	// #1
    4e44:	b	4b98 <d_expression_1+0x334>

0000000000004e48 <d_expression>:
    4e48:	stp	x29, x30, [sp, #-32]!
    4e4c:	mov	w1, #0x1                   	// #1
    4e50:	mov	x29, sp
    4e54:	stp	x19, x20, [sp, #16]
    4e58:	mov	x19, x0
    4e5c:	ldr	w20, [x0, #76]
    4e60:	str	w1, [x0, #76]
    4e64:	bl	4864 <d_expression_1>
    4e68:	str	w20, [x19, #76]
    4e6c:	ldp	x19, x20, [sp, #16]
    4e70:	ldp	x29, x30, [sp], #32
    4e74:	ret

0000000000004e78 <d_template_arg>:
    4e78:	ldr	x2, [x0, #24]
    4e7c:	ldrb	w1, [x2]
    4e80:	cmp	w1, #0x4c
    4e84:	b.eq	4ef4 <d_template_arg+0x7c>  // b.none
    4e88:	stp	x29, x30, [sp, #-32]!
    4e8c:	mov	x29, sp
    4e90:	str	x19, [sp, #16]
    4e94:	mov	x19, x0
    4e98:	b.hi	4ebc <d_template_arg+0x44>  // b.pmore
    4e9c:	sub	w1, w1, #0x49
    4ea0:	and	w1, w1, #0xff
    4ea4:	cmp	w1, #0x1
    4ea8:	b.ls	4ef8 <d_template_arg+0x80>  // b.plast
    4eac:	mov	x0, x19
    4eb0:	ldr	x19, [sp, #16]
    4eb4:	ldp	x29, x30, [sp], #32
    4eb8:	b	2e08 <__asan_cplus_demangle_type>
    4ebc:	cmp	w1, #0x58
    4ec0:	b.ne	4eac <d_template_arg+0x34>  // b.any
    4ec4:	add	x2, x2, #0x1
    4ec8:	str	x2, [x0, #24]
    4ecc:	bl	4e48 <d_expression>
    4ed0:	ldr	x1, [x19, #24]
    4ed4:	ldrb	w2, [x1]
    4ed8:	cmp	w2, #0x45
    4edc:	b.ne	4f04 <d_template_arg+0x8c>  // b.any
    4ee0:	add	x1, x1, #0x1
    4ee4:	str	x1, [x19, #24]
    4ee8:	ldr	x19, [sp, #16]
    4eec:	ldp	x29, x30, [sp], #32
    4ef0:	ret
    4ef4:	b	4744 <d_expr_primary>
    4ef8:	ldr	x19, [sp, #16]
    4efc:	ldp	x29, x30, [sp], #32
    4f00:	b	4fc4 <d_template_args>
    4f04:	mov	x0, #0x0                   	// #0
    4f08:	b	4ee8 <d_template_arg+0x70>

0000000000004f0c <d_template_args_1>:
    4f0c:	stp	x29, x30, [sp, #-64]!
    4f10:	mov	x29, sp
    4f14:	ldr	x1, [x0, #24]
    4f18:	stp	x19, x20, [sp, #16]
    4f1c:	mov	x19, x0
    4f20:	str	x21, [sp, #32]
    4f24:	ldr	x21, [x0, #64]
    4f28:	ldrb	w2, [x1]
    4f2c:	cmp	w2, #0x45
    4f30:	b.ne	4f58 <d_template_args_1+0x4c>  // b.any
    4f34:	add	x1, x1, #0x1
    4f38:	mov	x3, #0x0                   	// #0
    4f3c:	ldr	x21, [sp, #32]
    4f40:	str	x1, [x0, #24]
    4f44:	ldp	x19, x20, [sp, #16]
    4f48:	mov	x2, #0x0                   	// #0
    4f4c:	ldp	x29, x30, [sp], #64
    4f50:	mov	w1, #0x2f                  	// #47
    4f54:	b	64 <d_make_comp>
    4f58:	add	x20, sp, #0x38
    4f5c:	str	xzr, [sp, #56]
    4f60:	mov	x0, x19
    4f64:	bl	4e78 <d_template_arg>
    4f68:	mov	x2, x0
    4f6c:	cbnz	x0, 4f84 <d_template_args_1+0x78>
    4f70:	mov	x0, #0x0                   	// #0
    4f74:	ldp	x19, x20, [sp, #16]
    4f78:	ldr	x21, [sp, #32]
    4f7c:	ldp	x29, x30, [sp], #64
    4f80:	ret
    4f84:	mov	x0, x19
    4f88:	mov	x3, #0x0                   	// #0
    4f8c:	mov	w1, #0x2f                  	// #47
    4f90:	bl	64 <d_make_comp>
    4f94:	str	x0, [x20]
    4f98:	cbz	x0, 4f70 <d_template_args_1+0x64>
    4f9c:	add	x20, x0, #0x10
    4fa0:	ldr	x0, [x19, #24]
    4fa4:	ldrb	w1, [x0]
    4fa8:	cmp	w1, #0x45
    4fac:	b.ne	4f60 <d_template_args_1+0x54>  // b.any
    4fb0:	add	x0, x0, #0x1
    4fb4:	str	x0, [x19, #24]
    4fb8:	str	x21, [x19, #64]
    4fbc:	ldr	x0, [sp, #56]
    4fc0:	b	4f74 <d_template_args_1+0x68>

0000000000004fc4 <d_template_args>:
    4fc4:	ldr	x3, [x0, #24]
    4fc8:	ldrb	w1, [x3]
    4fcc:	sub	w1, w1, #0x49
    4fd0:	and	w1, w1, #0xff
    4fd4:	cmp	w1, #0x1
    4fd8:	b.hi	4fe8 <d_template_args+0x24>  // b.pmore
    4fdc:	add	x3, x3, #0x1
    4fe0:	str	x3, [x0, #24]
    4fe4:	b	4f0c <d_template_args_1>
    4fe8:	mov	x0, #0x0                   	// #0
    4fec:	ret

0000000000004ff0 <d_exprlist>:
    4ff0:	stp	x29, x30, [sp, #-64]!
    4ff4:	mov	x29, sp
    4ff8:	ldr	x2, [x0, #24]
    4ffc:	stp	x19, x20, [sp, #16]
    5000:	mov	x19, x0
    5004:	str	x21, [sp, #32]
    5008:	str	xzr, [sp, #56]
    500c:	ldrb	w3, [x2]
    5010:	cmp	w3, w1, uxtb
    5014:	b.ne	503c <d_exprlist+0x4c>  // b.any
    5018:	add	x2, x2, #0x1
    501c:	mov	x3, #0x0                   	// #0
    5020:	ldr	x21, [sp, #32]
    5024:	str	x2, [x0, #24]
    5028:	ldp	x19, x20, [sp, #16]
    502c:	mov	w1, #0x2e                  	// #46
    5030:	ldp	x29, x30, [sp], #64
    5034:	mov	x2, #0x0                   	// #0
    5038:	b	64 <d_make_comp>
    503c:	and	w21, w1, #0xff
    5040:	add	x20, sp, #0x38
    5044:	mov	x0, x19
    5048:	bl	4e48 <d_expression>
    504c:	mov	x2, x0
    5050:	cbnz	x0, 5068 <d_exprlist+0x78>
    5054:	mov	x0, #0x0                   	// #0
    5058:	ldp	x19, x20, [sp, #16]
    505c:	ldr	x21, [sp, #32]
    5060:	ldp	x29, x30, [sp], #64
    5064:	ret
    5068:	mov	x0, x19
    506c:	mov	x3, #0x0                   	// #0
    5070:	mov	w1, #0x2e                  	// #46
    5074:	bl	64 <d_make_comp>
    5078:	str	x0, [x20]
    507c:	cbz	x0, 5054 <d_exprlist+0x64>
    5080:	add	x20, x0, #0x10
    5084:	ldr	x0, [x19, #24]
    5088:	ldrb	w1, [x0]
    508c:	cmp	w1, w21
    5090:	b.ne	5044 <d_exprlist+0x54>  // b.any
    5094:	add	x0, x0, #0x1
    5098:	str	x0, [x19, #24]
    509c:	ldr	x0, [sp, #56]
    50a0:	b	5058 <d_exprlist+0x68>

00000000000050a4 <d_cv_qualifiers>:
    50a4:	stp	x29, x30, [sp, #-80]!
    50a8:	cmp	w2, #0x0
    50ac:	mov	x29, sp
    50b0:	stp	x19, x20, [sp, #16]
    50b4:	mov	x19, x0
    50b8:	mov	x20, x1
    50bc:	ldr	x0, [x0, #24]
    50c0:	stp	x21, x22, [sp, #32]
    50c4:	mov	w21, w2
    50c8:	stp	x23, x24, [sp, #48]
    50cc:	mov	x22, x1
    50d0:	mov	w24, #0x1d                  	// #29
    50d4:	str	x25, [sp, #64]
    50d8:	mov	w25, #0x1e                  	// #30
    50dc:	mov	w23, #0x1c                  	// #28
    50e0:	ldrb	w3, [x0]
    50e4:	mov	w0, #0x1b                  	// #27
    50e8:	csel	w25, w25, w0, ne  // ne = any
    50ec:	mov	w0, #0x1a                  	// #26
    50f0:	csel	w24, w24, w0, ne  // ne = any
    50f4:	mov	w0, #0x19                  	// #25
    50f8:	csel	w23, w23, w0, ne  // ne = any
    50fc:	ldr	x4, [x19, #24]
    5100:	mov	x0, x4
    5104:	bl	5f4 <next_is_type_qual.isra.0>
    5108:	cbnz	w0, 5160 <d_cv_qualifiers+0xbc>
    510c:	cmp	w3, #0x46
    5110:	eor	w21, w21, #0x1
    5114:	cset	w0, eq  // eq = none
    5118:	tst	w21, w0
    511c:	b.eq	52cc <d_cv_qualifiers+0x228>  // b.none
    5120:	mov	w1, #0x1d                  	// #29
    5124:	mov	w2, #0x1e                  	// #30
    5128:	mov	w3, #0x1c                  	// #28
    512c:	cmp	x22, x20
    5130:	b.eq	51cc <d_cv_qualifiers+0x128>  // b.none
    5134:	ldr	x20, [x20]
    5138:	ldr	w0, [x20]
    513c:	cmp	w0, #0x1a
    5140:	b.eq	52d4 <d_cv_qualifiers+0x230>  // b.none
    5144:	cmp	w0, #0x1b
    5148:	b.eq	52dc <d_cv_qualifiers+0x238>  // b.none
    514c:	cmp	w0, #0x19
    5150:	b.ne	5158 <d_cv_qualifiers+0xb4>  // b.any
    5154:	str	w3, [x20]
    5158:	add	x20, x20, #0x8
    515c:	b	512c <d_cv_qualifiers+0x88>
    5160:	add	x0, x4, #0x1
    5164:	str	x0, [x19, #24]
    5168:	cmp	w3, #0x72
    516c:	b.ne	5188 <d_cv_qualifiers+0xe4>  // b.any
    5170:	ldr	w0, [x19, #72]
    5174:	mov	w1, w23
    5178:	add	w0, w0, #0x9
    517c:	str	w0, [x19, #72]
    5180:	mov	x3, #0x0                   	// #0
    5184:	b	5210 <d_cv_qualifiers+0x16c>
    5188:	cmp	w3, #0x56
    518c:	b.ne	51a4 <d_cv_qualifiers+0x100>  // b.any
    5190:	ldr	w0, [x19, #72]
    5194:	mov	w1, w24
    5198:	add	w0, w0, #0x9
    519c:	str	w0, [x19, #72]
    51a0:	b	5180 <d_cv_qualifiers+0xdc>
    51a4:	cmp	w3, #0x4b
    51a8:	b.ne	51c0 <d_cv_qualifiers+0x11c>  // b.any
    51ac:	ldr	w0, [x19, #72]
    51b0:	mov	w1, w25
    51b4:	add	w0, w0, #0x6
    51b8:	str	w0, [x19, #72]
    51bc:	b	5180 <d_cv_qualifiers+0xdc>
    51c0:	ldrb	w0, [x4, #1]
    51c4:	cbnz	w0, 51e8 <d_cv_qualifiers+0x144>
    51c8:	mov	x20, #0x0                   	// #0
    51cc:	mov	x0, x20
    51d0:	ldp	x19, x20, [sp, #16]
    51d4:	ldp	x21, x22, [sp, #32]
    51d8:	ldp	x23, x24, [sp, #48]
    51dc:	ldr	x25, [sp, #64]
    51e0:	ldp	x29, x30, [sp], #80
    51e4:	ret
    51e8:	add	x0, x4, #0x2
    51ec:	str	x0, [x19, #24]
    51f0:	ldrb	w0, [x4, #1]
    51f4:	cmp	w0, #0x78
    51f8:	b.ne	5234 <d_cv_qualifiers+0x190>  // b.any
    51fc:	ldr	w0, [x19, #72]
    5200:	mov	x3, #0x0                   	// #0
    5204:	mov	w1, #0x4d                  	// #77
    5208:	add	w0, w0, #0x11
    520c:	str	w0, [x19, #72]
    5210:	mov	x0, x19
    5214:	mov	x2, #0x0                   	// #0
    5218:	bl	64 <d_make_comp>
    521c:	str	x0, [x22]
    5220:	cbz	x0, 51c8 <d_cv_qualifiers+0x124>
    5224:	add	x22, x0, #0x8
    5228:	ldr	x0, [x19, #24]
    522c:	ldrb	w3, [x0]
    5230:	b	50fc <d_cv_qualifiers+0x58>
    5234:	and	w2, w0, #0xffffffdf
    5238:	and	w1, w2, #0xff
    523c:	cmp	w2, #0x4f
    5240:	b.ne	5288 <d_cv_qualifiers+0x1e4>  // b.any
    5244:	ldr	w2, [x19, #72]
    5248:	cmp	w0, #0x4f
    524c:	add	w2, w2, #0x9
    5250:	str	w2, [x19, #72]
    5254:	b.ne	5180 <d_cv_qualifiers+0xdc>  // b.any
    5258:	mov	x0, x19
    525c:	bl	4e48 <d_expression>
    5260:	mov	x3, x0
    5264:	cbz	x0, 51c8 <d_cv_qualifiers+0x124>
    5268:	ldr	x0, [x19, #24]
    526c:	ldrb	w1, [x0]
    5270:	cmp	w1, #0x45
    5274:	b.ne	51c8 <d_cv_qualifiers+0x124>  // b.any
    5278:	add	x0, x0, #0x1
    527c:	mov	w1, #0x4f                  	// #79
    5280:	str	x0, [x19, #24]
    5284:	b	5210 <d_cv_qualifiers+0x16c>
    5288:	cmp	w0, #0x77
    528c:	b.ne	51c8 <d_cv_qualifiers+0x124>  // b.any
    5290:	ldr	w0, [x19, #72]
    5294:	add	w0, w0, #0x6
    5298:	str	w0, [x19, #72]
    529c:	mov	x0, x19
    52a0:	bl	34f0 <d_parmlist>
    52a4:	mov	x3, x0
    52a8:	cbz	x0, 51c8 <d_cv_qualifiers+0x124>
    52ac:	ldr	x0, [x19, #24]
    52b0:	ldrb	w1, [x0]
    52b4:	cmp	w1, #0x45
    52b8:	b.ne	51c8 <d_cv_qualifiers+0x124>  // b.any
    52bc:	add	x0, x0, #0x1
    52c0:	mov	w1, #0x50                  	// #80
    52c4:	str	x0, [x19, #24]
    52c8:	b	5210 <d_cv_qualifiers+0x16c>
    52cc:	mov	x20, x22
    52d0:	b	51cc <d_cv_qualifiers+0x128>
    52d4:	str	w1, [x20]
    52d8:	b	5158 <d_cv_qualifiers+0xb4>
    52dc:	str	w2, [x20]
    52e0:	b	5158 <d_cv_qualifiers+0xb4>

00000000000052e4 <__asan_cplus_demangle_print_callback>:
    52e4:	stp	x29, x30, [sp, #-416]!
    52e8:	mov	w4, w0
    52ec:	mov	x5, x1
    52f0:	mov	x29, sp
    52f4:	stp	x19, x20, [sp, #16]
    52f8:	add	x19, x29, #0x28
    52fc:	mov	x0, x19
    5300:	str	xzr, [x29, #296]
    5304:	strb	wzr, [x29, #304]
    5308:	stp	x2, x3, [x29, #312]
    530c:	stp	xzr, xzr, [x29, #328]
    5310:	stp	xzr, xzr, [x29, #344]
    5314:	stp	xzr, xzr, [x29, #360]
    5318:	stp	xzr, xzr, [x29, #376]
    531c:	stp	xzr, xzr, [x29, #392]
    5320:	bl	184 <d_count_templates_scopes>
    5324:	ldr	w0, [x29, #348]
    5328:	cmp	w0, #0x7ff
    532c:	b.gt	5334 <__asan_cplus_demangle_print_callback+0x50>
    5330:	str	wzr, [x29, #348]
    5334:	ldr	w3, [x29, #388]
    5338:	mov	w0, #0x1                   	// #1
    533c:	ldr	w2, [x29, #404]
    5340:	mov	x20, sp
    5344:	cmp	w3, #0x0
    5348:	str	xzr, [x29, #408]
    534c:	mul	w2, w3, w2
    5350:	csel	w3, w3, w0, gt
    5354:	str	w2, [x29, #404]
    5358:	cmp	w2, #0x0
    535c:	sub	sp, sp, w3, sxtw #4
    5360:	csel	w2, w2, w0, gt
    5364:	mov	x1, sp
    5368:	str	x1, [x29, #376]
    536c:	mov	w1, w4
    5370:	sub	sp, sp, w2, sxtw #4
    5374:	mov	x2, x5
    5378:	mov	x0, sp
    537c:	str	x0, [x29, #392]
    5380:	mov	x0, x19
    5384:	bl	2170 <d_print_comp>
    5388:	mov	x0, x19
    538c:	mov	sp, x20
    5390:	bl	244 <d_print_flush>
    5394:	ldr	w0, [x29, #344]
    5398:	mov	sp, x29
    539c:	cmp	w0, #0x0
    53a0:	cset	w0, eq  // eq = none
    53a4:	ldp	x19, x20, [sp, #16]
    53a8:	ldp	x29, x30, [sp], #416
    53ac:	ret

00000000000053b0 <__asan_cplus_demangle_print>:
    53b0:	stp	x29, x30, [sp, #-80]!
    53b4:	mov	x29, sp
    53b8:	stp	x19, x20, [sp, #16]
    53bc:	mov	w20, w0
    53c0:	mov	x19, x3
    53c4:	stp	x21, x22, [sp, #32]
    53c8:	mov	x21, x1
    53cc:	add	x22, sp, #0x30
    53d0:	stp	xzr, xzr, [sp, #48]
    53d4:	str	xzr, [sp, #64]
    53d8:	str	wzr, [sp, #72]
    53dc:	cbz	w2, 53ec <__asan_cplus_demangle_print+0x3c>
    53e0:	sxtw	x1, w2
    53e4:	mov	x0, x22
    53e8:	bl	760 <d_growable_string_resize>
    53ec:	adrp	x2, 0 <is_fnqual_component_type>
    53f0:	mov	x3, x22
    53f4:	add	x2, x2, #0x0
    53f8:	mov	x1, x21
    53fc:	mov	w0, w20
    5400:	bl	52e4 <__asan_cplus_demangle_print_callback>
    5404:	cbnz	w0, 5428 <__asan_cplus_demangle_print+0x78>
    5408:	ldr	x0, [sp, #48]
    540c:	bl	0 <free>
    5410:	str	xzr, [x19]
    5414:	mov	x0, #0x0                   	// #0
    5418:	ldp	x19, x20, [sp, #16]
    541c:	ldp	x21, x22, [sp, #32]
    5420:	ldp	x29, x30, [sp], #80
    5424:	ret
    5428:	ldr	w0, [sp, #72]
    542c:	cmp	w0, #0x0
    5430:	ldr	x0, [sp, #64]
    5434:	csinc	x0, x0, xzr, eq  // eq = none
    5438:	str	x0, [x19]
    543c:	ldr	x0, [sp, #48]
    5440:	b	5418 <__asan_cplus_demangle_print+0x68>

0000000000005444 <__asan_cplus_demangle_init_info>:
    5444:	add	x4, x0, x2
    5448:	stp	x0, x4, [x3]
    544c:	str	w1, [x3, #16]
    5450:	str	x0, [x3, #24]
    5454:	lsl	w0, w2, #1
    5458:	str	wzr, [x3, #40]
    545c:	str	w0, [x3, #44]
    5460:	stp	wzr, w2, [x3, #56]
    5464:	stp	xzr, xzr, [x3, #64]
    5468:	str	xzr, [x3, #80]
    546c:	ret

0000000000005470 <d_demangle_callback>:
    5470:	stp	x29, x30, [sp, #-176]!
    5474:	mov	x29, sp
    5478:	stp	x19, x20, [sp, #16]
    547c:	mov	x19, x0
    5480:	stp	x21, x22, [sp, #32]
    5484:	mov	w21, w1
    5488:	mov	x22, x2
    548c:	stp	x23, x24, [sp, #48]
    5490:	mov	x23, x3
    5494:	stp	x25, x26, [sp, #64]
    5498:	ldrb	w0, [x0]
    549c:	cmp	w0, #0x5f
    54a0:	b.ne	54b0 <d_demangle_callback+0x40>  // b.any
    54a4:	ldrb	w0, [x19, #1]
    54a8:	cmp	w0, #0x5a
    54ac:	b.eq	5628 <d_demangle_callback+0x1b8>  // b.none
    54b0:	adrp	x1, 0 <is_fnqual_component_type>
    54b4:	mov	x0, x19
    54b8:	add	x1, x1, #0x0
    54bc:	mov	x2, #0x8                   	// #8
    54c0:	bl	0 <__asan_internal_strncmp>
    54c4:	cbnz	w0, 5604 <d_demangle_callback+0x194>
    54c8:	ldrb	w0, [x19, #8]
    54cc:	sub	w0, w0, #0x24
    54d0:	and	w0, w0, #0xff
    54d4:	cmp	w0, #0x3b
    54d8:	b.hi	5604 <d_demangle_callback+0x194>  // b.pmore
    54dc:	mov	x1, #0x401                 	// #1025
    54e0:	movk	x1, #0x800, lsl #48
    54e4:	lsr	x0, x1, x0
    54e8:	tbz	w0, #0, 5604 <d_demangle_callback+0x194>
    54ec:	ldrb	w0, [x19, #9]
    54f0:	mov	w1, #0x49                  	// #73
    54f4:	cmp	w0, #0x44
    54f8:	ccmp	w0, w1, #0x4, ne  // ne = any
    54fc:	b.ne	5604 <d_demangle_callback+0x194>  // b.any
    5500:	ldrb	w1, [x19, #10]
    5504:	cmp	w1, #0x5f
    5508:	b.ne	5604 <d_demangle_callback+0x194>  // b.any
    550c:	cmp	w0, #0x49
    5510:	cset	w20, ne  // ne = any
    5514:	add	w20, w20, #0x2
    5518:	mov	x0, x19
    551c:	add	x25, x29, #0x58
    5520:	bl	0 <__asan_internal_strlen>
    5524:	mov	x2, x0
    5528:	mov	x3, x25
    552c:	mov	x0, x19
    5530:	mov	w1, w21
    5534:	bl	5444 <__asan_cplus_demangle_init_info>
    5538:	ldr	w0, [x29, #132]
    553c:	tbnz	w21, #18, 5548 <d_demangle_callback+0xd8>
    5540:	cmp	w0, #0x800
    5544:	b.hi	5608 <d_demangle_callback+0x198>  // b.pmore
    5548:	mov	w1, #0x18                  	// #24
    554c:	mov	x24, sp
    5550:	cmp	w20, #0x1
    5554:	smull	x0, w0, w1
    5558:	add	x0, x0, #0xf
    555c:	and	x0, x0, #0xfffffffffffffff0
    5560:	sub	sp, sp, x0
    5564:	ldrsw	x0, [x29, #148]
    5568:	mov	x1, sp
    556c:	str	x1, [x29, #120]
    5570:	lsl	x0, x0, #3
    5574:	add	x0, x0, #0xf
    5578:	and	x0, x0, #0xfffffffffffffff0
    557c:	sub	sp, sp, x0
    5580:	mov	x0, sp
    5584:	str	x0, [x29, #136]
    5588:	b.eq	5674 <d_demangle_callback+0x204>  // b.none
    558c:	sub	w0, w20, #0x2
    5590:	cmp	w0, #0x1
    5594:	b.hi	5638 <d_demangle_callback+0x1c8>  // b.pmore
    5598:	ldr	x0, [x29, #112]
    559c:	cmp	w20, #0x2
    55a0:	cset	w19, ne  // ne = any
    55a4:	add	x26, x0, #0xb
    55a8:	str	x26, [x29, #112]
    55ac:	add	w19, w19, #0x44
    55b0:	ldrb	w1, [x0, #11]
    55b4:	cmp	w1, #0x5f
    55b8:	b.eq	5684 <d_demangle_callback+0x214>  // b.none
    55bc:	mov	x0, x26
    55c0:	bl	0 <__asan_internal_strlen>
    55c4:	mov	x1, x26
    55c8:	mov	w2, w0
    55cc:	mov	x0, x25
    55d0:	bl	29bc <d_make_name>
    55d4:	mov	w1, w19
    55d8:	mov	x2, x0
    55dc:	mov	x3, #0x0                   	// #0
    55e0:	mov	x0, x25
    55e4:	bl	64 <d_make_comp>
    55e8:	mov	x19, x0
    55ec:	ldr	x0, [x29, #112]
    55f0:	bl	0 <__asan_internal_strlen>
    55f4:	ldr	x1, [x29, #112]
    55f8:	add	x1, x1, x0
    55fc:	str	x1, [x29, #112]
    5600:	b	5644 <d_demangle_callback+0x1d4>
    5604:	tbnz	w21, #4, 5630 <d_demangle_callback+0x1c0>
    5608:	mov	w0, #0x0                   	// #0
    560c:	mov	sp, x29
    5610:	ldp	x19, x20, [sp, #16]
    5614:	ldp	x21, x22, [sp, #32]
    5618:	ldp	x23, x24, [sp, #48]
    561c:	ldp	x25, x26, [sp, #64]
    5620:	ldp	x29, x30, [sp], #176
    5624:	ret
    5628:	mov	w20, #0x1                   	// #1
    562c:	b	5518 <d_demangle_callback+0xa8>
    5630:	mov	w20, #0x0                   	// #0
    5634:	b	5518 <d_demangle_callback+0xa8>
    5638:	mov	x0, x25
    563c:	bl	2e08 <__asan_cplus_demangle_type>
    5640:	mov	x19, x0
    5644:	tbz	w21, #0, 5654 <d_demangle_callback+0x1e4>
    5648:	ldr	x0, [x29, #112]
    564c:	ldrb	w0, [x0]
    5650:	cbnz	w0, 56a8 <d_demangle_callback+0x238>
    5654:	cbz	x19, 56a8 <d_demangle_callback+0x238>
    5658:	mov	x3, x23
    565c:	mov	x2, x22
    5660:	mov	x1, x19
    5664:	mov	w0, w21
    5668:	bl	52e4 <__asan_cplus_demangle_print_callback>
    566c:	mov	sp, x24
    5670:	b	560c <d_demangle_callback+0x19c>
    5674:	mov	w1, w20
    5678:	mov	x0, x25
    567c:	bl	45f4 <__asan_cplus_demangle_mangled_name>
    5680:	b	5640 <d_demangle_callback+0x1d0>
    5684:	ldrb	w1, [x0, #12]
    5688:	cmp	w1, #0x5a
    568c:	b.ne	55bc <d_demangle_callback+0x14c>  // b.any
    5690:	add	x0, x0, #0xd
    5694:	mov	w1, #0x0                   	// #0
    5698:	str	x0, [x29, #112]
    569c:	mov	x0, x25
    56a0:	bl	3ffc <d_encoding>
    56a4:	b	55d4 <d_demangle_callback+0x164>
    56a8:	mov	w0, #0x0                   	// #0
    56ac:	b	566c <d_demangle_callback+0x1fc>

00000000000056b0 <d_demangle>:
    56b0:	stp	x29, x30, [sp, #-64]!
    56b4:	mov	x29, sp
    56b8:	add	x3, sp, #0x20
    56bc:	str	x19, [sp, #16]
    56c0:	mov	x19, x2
    56c4:	adrp	x2, 0 <is_fnqual_component_type>
    56c8:	add	x2, x2, #0x0
    56cc:	stp	xzr, xzr, [sp, #32]
    56d0:	str	xzr, [sp, #48]
    56d4:	str	wzr, [sp, #56]
    56d8:	bl	5470 <d_demangle_callback>
    56dc:	cbnz	w0, 56fc <d_demangle+0x4c>
    56e0:	ldr	x0, [sp, #32]
    56e4:	bl	0 <free>
    56e8:	str	xzr, [x19]
    56ec:	mov	x0, #0x0                   	// #0
    56f0:	ldr	x19, [sp, #16]
    56f4:	ldp	x29, x30, [sp], #64
    56f8:	ret
    56fc:	ldr	w0, [sp, #56]
    5700:	cmp	w0, #0x0
    5704:	ldr	x0, [sp, #48]
    5708:	csinc	x0, x0, xzr, eq  // eq = none
    570c:	str	x0, [x19]
    5710:	ldr	x0, [sp, #32]
    5714:	b	56f0 <d_demangle+0x40>

0000000000005718 <is_ctor_or_dtor>:
    5718:	stp	x29, x30, [sp, #-144]!
    571c:	mov	x29, sp
    5720:	stp	x19, x20, [sp, #16]
    5724:	mov	x19, x1
    5728:	mov	x20, x2
    572c:	stp	x21, x22, [sp, #32]
    5730:	mov	x21, x0
    5734:	add	x22, x29, #0x38
    5738:	str	wzr, [x1]
    573c:	str	wzr, [x2]
    5740:	bl	0 <__asan_internal_strlen>
    5744:	mov	x2, x0
    5748:	mov	x3, x22
    574c:	mov	x0, x21
    5750:	mov	w1, #0x4000                	// #16384
    5754:	bl	5444 <__asan_cplus_demangle_init_info>
    5758:	ldr	w0, [x29, #100]
    575c:	mov	w1, #0x18                  	// #24
    5760:	smull	x0, w0, w1
    5764:	add	x0, x0, #0xf
    5768:	and	x0, x0, #0xfffffffffffffff0
    576c:	sub	sp, sp, x0
    5770:	ldrsw	x0, [x29, #116]
    5774:	mov	x1, sp
    5778:	str	x1, [x29, #88]
    577c:	mov	w1, #0x1                   	// #1
    5780:	lsl	x0, x0, #3
    5784:	add	x0, x0, #0xf
    5788:	and	x0, x0, #0xfffffffffffffff0
    578c:	sub	sp, sp, x0
    5790:	mov	x0, sp
    5794:	str	x0, [x29, #104]
    5798:	mov	x0, x22
    579c:	bl	45f4 <__asan_cplus_demangle_mangled_name>
    57a0:	adrp	x2, 0 <is_fnqual_component_type>
    57a4:	add	x2, x2, #0x0
    57a8:	cbz	x0, 57e8 <is_ctor_or_dtor+0xd0>
    57ac:	ldr	w1, [x0]
    57b0:	sub	w1, w1, #0x1
    57b4:	cmp	w1, #0x7
    57b8:	b.hi	5808 <is_ctor_or_dtor+0xf0>  // b.pmore
    57bc:	ldrb	w1, [x2, w1, uxtw]
    57c0:	adr	x3, 57cc <is_ctor_or_dtor+0xb4>
    57c4:	add	x1, x3, w1, sxtb #2
    57c8:	br	x1
    57cc:	ldr	x0, [x0, #8]
    57d0:	b	57a8 <is_ctor_or_dtor+0x90>
    57d4:	ldr	x0, [x0, #16]
    57d8:	b	57a8 <is_ctor_or_dtor+0x90>
    57dc:	ldr	w0, [x0, #8]
    57e0:	str	w0, [x19]
    57e4:	mov	w0, #0x1                   	// #1
    57e8:	mov	sp, x29
    57ec:	ldp	x19, x20, [sp, #16]
    57f0:	ldp	x21, x22, [sp, #32]
    57f4:	ldp	x29, x30, [sp], #144
    57f8:	ret
    57fc:	ldr	w0, [x0, #8]
    5800:	str	w0, [x20]
    5804:	b	57e4 <is_ctor_or_dtor+0xcc>
    5808:	mov	w0, #0x0                   	// #0
    580c:	b	57e8 <is_ctor_or_dtor+0xd0>

0000000000005810 <__asan_cplus_demangle_v3>:
    5810:	stp	x29, x30, [sp, #-32]!
    5814:	mov	x29, sp
    5818:	add	x2, sp, #0x18
    581c:	bl	56b0 <d_demangle>
    5820:	ldp	x29, x30, [sp], #32
    5824:	ret

0000000000005828 <__asan_cplus_demangle_v3_callback>:
    5828:	b	5470 <d_demangle_callback>

000000000000582c <__asan_java_demangle_v3>:
    582c:	stp	x29, x30, [sp, #-32]!
    5830:	mov	w1, #0x25                  	// #37
    5834:	mov	x29, sp
    5838:	add	x2, sp, #0x18
    583c:	bl	56b0 <d_demangle>
    5840:	ldp	x29, x30, [sp], #32
    5844:	ret

0000000000005848 <__asan_java_demangle_v3_callback>:
    5848:	mov	x3, x2
    584c:	mov	x2, x1
    5850:	mov	w1, #0x25                  	// #37
    5854:	b	5470 <d_demangle_callback>

0000000000005858 <__asan_is_gnu_v3_mangled_ctor>:
    5858:	stp	x29, x30, [sp, #-32]!
    585c:	mov	x29, sp
    5860:	add	x2, sp, #0x1c
    5864:	add	x1, sp, #0x18
    5868:	bl	5718 <is_ctor_or_dtor>
    586c:	cmp	w0, #0x0
    5870:	ldr	w0, [sp, #24]
    5874:	ldp	x29, x30, [sp], #32
    5878:	csel	w0, w0, wzr, ne  // ne = any
    587c:	ret

0000000000005880 <__asan_is_gnu_v3_mangled_dtor>:
    5880:	stp	x29, x30, [sp, #-32]!
    5884:	mov	x29, sp
    5888:	add	x2, sp, #0x1c
    588c:	add	x1, sp, #0x18
    5890:	bl	5718 <is_ctor_or_dtor>
    5894:	cmp	w0, #0x0
    5898:	ldr	w0, [sp, #28]
    589c:	ldp	x29, x30, [sp], #32
    58a0:	csel	w0, w0, wzr, ne  // ne = any
    58a4:	ret

dwarf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <is_highest_address>:
       0:	sub	w1, w1, #0x1
       4:	cmp	w1, #0x7
       8:	b.hi	4c <is_highest_address+0x4c>  // b.pmore
       c:	adrp	x2, 0 <is_highest_address>
      10:	add	x2, x2, #0x0
      14:	ldrb	w1, [x2, w1, uxtw]
      18:	adr	x2, 24 <is_highest_address+0x24>
      1c:	add	x1, x2, w1, sxtb #2
      20:	br	x1
      24:	cmp	x0, #0xff
      28:	cset	w0, eq  // eq = none
      2c:	ret
      30:	mov	x1, #0xffff                	// #65535
      34:	cmp	x0, x1
      38:	b	28 <is_highest_address+0x28>
      3c:	mov	x1, #0xffffffff            	// #4294967295
      40:	b	34 <is_highest_address+0x34>
      44:	cmn	x0, #0x1
      48:	b	28 <is_highest_address+0x28>
      4c:	mov	w0, #0x0                   	// #0
      50:	b	2c <is_highest_address+0x2c>

0000000000000054 <units_search>:
      54:	ldr	x1, [x1]
      58:	ldr	x0, [x0]
      5c:	ldr	x2, [x1, #24]
      60:	cmp	x2, x0
      64:	b.hi	78 <units_search+0x24>  // b.pmore
      68:	ldr	x1, [x1, #32]
      6c:	cmp	x1, x0
      70:	cset	w0, ls  // ls = plast
      74:	ret
      78:	mov	w0, #0xffffffff            	// #-1
      7c:	b	74 <units_search+0x20>

0000000000000080 <function_addrs_search>:
      80:	ldr	x0, [x0]
      84:	ldr	x2, [x1]
      88:	cmp	x2, x0
      8c:	b.hi	a0 <function_addrs_search+0x20>  // b.pmore
      90:	ldr	x1, [x1, #8]
      94:	cmp	x1, x0
      98:	cset	w0, ls  // ls = plast
      9c:	ret
      a0:	mov	w0, #0xffffffff            	// #-1
      a4:	b	9c <function_addrs_search+0x1c>

00000000000000a8 <unit_addrs_search>:
      a8:	ldr	x0, [x0]
      ac:	ldr	x2, [x1]
      b0:	cmp	x2, x0
      b4:	b.hi	c8 <unit_addrs_search+0x20>  // b.pmore
      b8:	ldr	x1, [x1, #8]
      bc:	cmp	x1, x0
      c0:	cset	w0, ls  // ls = plast
      c4:	ret
      c8:	mov	w0, #0xffffffff            	// #-1
      cc:	b	c4 <unit_addrs_search+0x1c>

00000000000000d0 <line_search>:
      d0:	ldr	x0, [x0]
      d4:	ldr	x2, [x1]
      d8:	cmp	x2, x0
      dc:	b.hi	f0 <line_search+0x20>  // b.pmore
      e0:	ldr	x1, [x1, #24]
      e4:	cmp	x1, x0
      e8:	cset	w0, ls  // ls = plast
      ec:	ret
      f0:	mov	w0, #0xffffffff            	// #-1
      f4:	b	ec <line_search+0x1c>

00000000000000f8 <abbrev_compare>:
      f8:	ldr	x2, [x0]
      fc:	ldr	x1, [x1]
     100:	cmp	x2, x1
     104:	cset	w0, hi  // hi = pmore
     108:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
     10c:	ret

0000000000000110 <report_inlined_functions>:
     110:	stp	x29, x30, [sp, #-80]!
     114:	mov	x29, sp
     118:	stp	x21, x22, [sp, #32]
     11c:	mov	x21, x2
     120:	ldr	x2, [x1, #32]
     124:	stp	x19, x20, [sp, #16]
     128:	str	x23, [sp, #48]
     12c:	str	x0, [sp, #72]
     130:	cbnz	x2, 14c <report_inlined_functions+0x3c>
     134:	mov	w0, #0x0                   	// #0
     138:	ldp	x19, x20, [sp, #16]
     13c:	ldp	x21, x22, [sp, #32]
     140:	ldr	x23, [sp, #48]
     144:	ldp	x29, x30, [sp], #80
     148:	ret
     14c:	mov	x22, x1
     150:	mov	x23, x3
     154:	ldr	x1, [x1, #24]
     158:	mov	x20, x4
     15c:	mov	x19, x5
     160:	add	x0, sp, #0x48
     164:	adrp	x4, 0 <is_highest_address>
     168:	mov	x3, #0x18                  	// #24
     16c:	add	x4, x4, #0x0
     170:	bl	0 <bsearch>
     174:	mov	x6, x0
     178:	cbz	x0, 134 <report_inlined_functions+0x24>
     17c:	ldp	x2, x3, [x22, #24]
     180:	mov	x4, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
     184:	ldr	x0, [sp, #72]
     188:	movk	x4, #0xaaab
     18c:	sub	x1, x6, x2
     190:	asr	x1, x1, #3
     194:	mul	x1, x1, x4
     198:	add	x1, x1, #0x1
     19c:	cmp	x1, x3
     1a0:	b.cs	1bc <report_inlined_functions+0xac>  // b.hs, b.nlast
     1a4:	ldr	x1, [x6, #24]
     1a8:	cmp	x1, x0
     1ac:	b.hi	1bc <report_inlined_functions+0xac>  // b.pmore
     1b0:	ldr	x1, [x6, #32]
     1b4:	cmp	x0, x1
     1b8:	b.cc	20c <report_inlined_functions+0xfc>  // b.lo, b.ul, b.last
     1bc:	ldr	x22, [x6, #16]
     1c0:	mov	x5, x19
     1c4:	mov	x4, x20
     1c8:	mov	x3, x23
     1cc:	mov	x2, x21
     1d0:	mov	x1, x22
     1d4:	bl	110 <report_inlined_functions>
     1d8:	cbnz	w0, 138 <report_inlined_functions+0x28>
     1dc:	ldr	w3, [x19]
     1e0:	mov	x0, x23
     1e4:	ldr	x2, [x20]
     1e8:	ldr	x4, [x22]
     1ec:	ldr	x1, [sp, #72]
     1f0:	blr	x21
     1f4:	cbnz	w0, 138 <report_inlined_functions+0x28>
     1f8:	ldr	x1, [x22, #8]
     1fc:	str	x1, [x20]
     200:	ldr	w1, [x22, #16]
     204:	str	w1, [x19]
     208:	b	138 <report_inlined_functions+0x28>
     20c:	add	x6, x6, #0x18
     210:	b	18c <report_inlined_functions+0x7c>

0000000000000214 <add_unit_addr>:
     214:	stp	x29, x30, [sp, #-48]!
     218:	mov	x29, sp
     21c:	stp	x19, x20, [sp, #16]
     220:	mov	x19, x2
     224:	mov	x2, x3
     228:	stp	x21, x22, [sp, #32]
     22c:	mov	x3, x4
     230:	mov	x21, x5
     234:	ldp	x22, x20, [x19]
     238:	add	x22, x1, x22
     23c:	add	x20, x1, x20
     240:	ldr	x1, [x5, #24]
     244:	cbz	x1, 2a4 <add_unit_addr+0x90>
     248:	mov	x4, #0x18                  	// #24
     24c:	ldr	x5, [x5]
     250:	mul	x1, x1, x4
     254:	sub	x1, x1, #0x18
     258:	add	x1, x5, x1
     25c:	ldr	x4, [x1, #8]
     260:	cmp	x22, x4
     264:	b.eq	274 <add_unit_addr+0x60>  // b.none
     268:	add	x5, x4, #0x1
     26c:	cmp	x22, x5
     270:	b.ne	2a4 <add_unit_addr+0x90>  // b.any
     274:	ldr	x5, [x1, #16]
     278:	ldr	x6, [x19, #16]
     27c:	cmp	x6, x5
     280:	b.ne	2a4 <add_unit_addr+0x90>  // b.any
     284:	cmp	x20, x4
     288:	b.ls	290 <add_unit_addr+0x7c>  // b.plast
     28c:	str	x20, [x1, #8]
     290:	mov	w0, #0x1                   	// #1
     294:	ldp	x19, x20, [sp, #16]
     298:	ldp	x21, x22, [sp, #32]
     29c:	ldp	x29, x30, [sp], #48
     2a0:	ret
     2a4:	mov	x4, x21
     2a8:	mov	x1, #0x18                  	// #24
     2ac:	bl	0 <__asan_backtrace_vector_grow>
     2b0:	cbz	x0, 2d8 <add_unit_addr+0xc4>
     2b4:	stp	x22, x20, [x19]
     2b8:	ldp	x2, x3, [x19]
     2bc:	stp	x2, x3, [x0]
     2c0:	ldr	x1, [x19, #16]
     2c4:	str	x1, [x0, #16]
     2c8:	ldr	x0, [x21, #24]
     2cc:	add	x0, x0, #0x1
     2d0:	str	x0, [x21, #24]
     2d4:	b	290 <add_unit_addr+0x7c>
     2d8:	mov	w0, #0x0                   	// #0
     2dc:	b	294 <add_unit_addr+0x80>

00000000000002e0 <dwarf_buf_error>:
     2e0:	stp	x29, x30, [sp, #-240]!
     2e4:	mov	x3, x1
     2e8:	adrp	x2, 0 <is_highest_address>
     2ec:	mov	x29, sp
     2f0:	stp	x19, x20, [sp, #16]
     2f4:	mov	x19, x0
     2f8:	add	x20, sp, #0x28
     2fc:	ldp	x4, x0, [x0]
     300:	add	x2, x2, #0x0
     304:	ldr	x5, [x19, #16]
     308:	mov	x1, #0xc8                  	// #200
     30c:	sub	w5, w5, w0
     310:	mov	x0, x20
     314:	bl	0 <snprintf>
     318:	ldp	x3, x0, [x19, #40]
     31c:	mov	x1, x20
     320:	mov	w2, #0x0                   	// #0
     324:	blr	x3
     328:	ldp	x19, x20, [sp, #16]
     32c:	ldp	x29, x30, [sp], #240
     330:	ret

0000000000000334 <free_line_header>:
     334:	stp	x29, x30, [sp, #-48]!
     338:	mov	x29, sp
     33c:	stp	x19, x20, [sp, #16]
     340:	mov	x20, x2
     344:	mov	x19, x1
     348:	ldr	x2, [x1, #32]
     34c:	stp	x21, x22, [sp, #32]
     350:	mov	x22, x0
     354:	mov	x21, x3
     358:	cbz	x2, 370 <free_line_header+0x3c>
     35c:	ldr	x1, [x1, #40]
     360:	mov	x4, x3
     364:	lsl	x2, x2, #3
     368:	mov	x3, x20
     36c:	bl	0 <__asan_backtrace_free>
     370:	mov	x4, x21
     374:	mov	x3, x20
     378:	mov	x0, x22
     37c:	ldp	x21, x22, [sp, #32]
     380:	ldp	x2, x1, [x19, #48]
     384:	ldp	x19, x20, [sp, #16]
     388:	ldp	x29, x30, [sp], #48
     38c:	lsl	x2, x2, #3
     390:	b	0 <__asan_backtrace_free>

0000000000000394 <free_abbrevs>:
     394:	stp	x29, x30, [sp, #-64]!
     398:	mov	x29, sp
     39c:	stp	x19, x20, [sp, #16]
     3a0:	mov	x20, x0
     3a4:	mov	x19, x1
     3a8:	stp	x21, x22, [sp, #32]
     3ac:	mov	x21, x2
     3b0:	mov	x22, x3
     3b4:	str	x23, [sp, #48]
     3b8:	mov	x23, #0x0                   	// #0
     3bc:	ldp	x2, x1, [x19]
     3c0:	cmp	x2, x23
     3c4:	b.hi	3f4 <free_abbrevs+0x60>  // b.pmore
     3c8:	mov	x4, x22
     3cc:	mov	x3, x21
     3d0:	mov	x0, x20
     3d4:	lsl	x2, x2, #5
     3d8:	bl	0 <__asan_backtrace_free>
     3dc:	ldp	x21, x22, [sp, #32]
     3e0:	ldr	x23, [sp, #48]
     3e4:	stp	xzr, xzr, [x19]
     3e8:	ldp	x19, x20, [sp, #16]
     3ec:	ldp	x29, x30, [sp], #64
     3f0:	ret
     3f4:	add	x1, x1, x23, lsl #5
     3f8:	mov	x4, x22
     3fc:	mov	x3, x21
     400:	mov	x0, x20
     404:	add	x23, x23, #0x1
     408:	ldp	x2, x1, [x1, #16]
     40c:	lsl	x2, x2, #3
     410:	bl	0 <__asan_backtrace_free>
     414:	b	3bc <free_abbrevs+0x28>

0000000000000418 <unit_addrs_compare>:
     418:	ldr	x3, [x0]
     41c:	ldr	x2, [x1]
     420:	cmp	x3, x2
     424:	b.cc	468 <unit_addrs_compare+0x50>  // b.lo, b.ul, b.last
     428:	b.hi	460 <unit_addrs_compare+0x48>  // b.pmore
     42c:	ldr	x3, [x0, #8]
     430:	ldr	x2, [x1, #8]
     434:	cmp	x3, x2
     438:	b.cc	460 <unit_addrs_compare+0x48>  // b.lo, b.ul, b.last
     43c:	b.hi	468 <unit_addrs_compare+0x50>  // b.pmore
     440:	ldr	x0, [x0, #16]
     444:	ldr	x2, [x0, #56]
     448:	ldr	x0, [x1, #16]
     44c:	ldr	x1, [x0, #56]
     450:	cmp	x2, x1
     454:	cset	w0, gt
     458:	csinv	w0, w0, wzr, ge  // ge = tcont
     45c:	ret
     460:	mov	w0, #0x1                   	// #1
     464:	b	45c <unit_addrs_compare+0x44>
     468:	mov	w0, #0xffffffff            	// #-1
     46c:	b	45c <unit_addrs_compare+0x44>

0000000000000470 <line_compare>:
     470:	ldr	x3, [x0]
     474:	ldr	x2, [x1]
     478:	cmp	x3, x2
     47c:	b.cc	49c <line_compare+0x2c>  // b.lo, b.ul, b.last
     480:	b.hi	4a4 <line_compare+0x34>  // b.pmore
     484:	ldr	w2, [x0, #20]
     488:	ldr	w1, [x1, #20]
     48c:	cmp	w2, w1
     490:	cset	w0, gt
     494:	csinv	w0, w0, wzr, ge  // ge = tcont
     498:	ret
     49c:	mov	w0, #0xffffffff            	// #-1
     4a0:	b	498 <line_compare+0x28>
     4a4:	mov	w0, #0x1                   	// #1
     4a8:	b	498 <line_compare+0x28>

00000000000004ac <lookup_abbrev>:
     4ac:	stp	x29, x30, [sp, #-96]!
     4b0:	mov	x29, sp
     4b4:	stp	x19, x20, [sp, #16]
     4b8:	mov	x19, x0
     4bc:	mov	x20, x1
     4c0:	ldr	x0, [x0]
     4c4:	stp	x21, x22, [sp, #32]
     4c8:	sub	x1, x1, #0x1
     4cc:	str	x23, [sp, #48]
     4d0:	mov	x22, x2
     4d4:	cmp	x1, x0
     4d8:	mov	x23, x3
     4dc:	b.cs	4fc <lookup_abbrev+0x50>  // b.hs, b.nlast
     4e0:	lsl	x0, x20, #5
     4e4:	ldr	x1, [x19, #8]
     4e8:	sub	x0, x0, #0x20
     4ec:	add	x21, x1, x0
     4f0:	ldr	x0, [x1, x0]
     4f4:	cmp	x0, x20
     4f8:	b.eq	548 <lookup_abbrev+0x9c>  // b.none
     4fc:	add	x21, sp, #0x40
     500:	mov	x2, #0x20                  	// #32
     504:	mov	x0, x21
     508:	mov	w1, #0x0                   	// #0
     50c:	bl	0 <__asan_internal_memset>
     510:	str	x20, [sp, #64]
     514:	ldp	x2, x1, [x19]
     518:	mov	x0, x21
     51c:	adrp	x4, 0 <is_highest_address>
     520:	mov	x3, #0x20                  	// #32
     524:	add	x4, x4, #0x0
     528:	bl	0 <bsearch>
     52c:	mov	x21, x0
     530:	cbnz	x0, 548 <lookup_abbrev+0x9c>
     534:	adrp	x1, 0 <is_highest_address>
     538:	mov	x0, x23
     53c:	add	x1, x1, #0x0
     540:	mov	w2, #0x0                   	// #0
     544:	blr	x22
     548:	mov	x0, x21
     54c:	ldp	x19, x20, [sp, #16]
     550:	ldp	x21, x22, [sp, #32]
     554:	ldr	x23, [sp, #48]
     558:	ldp	x29, x30, [sp], #96
     55c:	ret

0000000000000560 <add_line.isra.0>:
     560:	stp	x29, x30, [sp, #-64]!
     564:	mov	x29, sp
     568:	stp	x19, x20, [sp, #16]
     56c:	mov	x19, x7
     570:	mov	w20, w4
     574:	ldr	x7, [x7, #24]
     578:	stp	x21, x22, [sp, #32]
     57c:	mov	x22, x2
     580:	str	x23, [sp, #48]
     584:	mov	x21, x3
     588:	mov	x2, x5
     58c:	mov	x3, x6
     590:	mov	x23, x1
     594:	cbz	x7, 5d0 <add_line.isra.0+0x70>
     598:	mov	x1, #0x18                  	// #24
     59c:	ldr	x4, [x19]
     5a0:	mul	x7, x7, x1
     5a4:	sub	x7, x7, #0x18
     5a8:	add	x1, x4, x7
     5ac:	ldr	x4, [x4, x7]
     5b0:	cmp	x4, x22
     5b4:	b.ne	5d0 <add_line.isra.0+0x70>  // b.any
     5b8:	ldr	x4, [x1, #8]
     5bc:	cmp	x4, x21
     5c0:	b.ne	5d0 <add_line.isra.0+0x70>  // b.any
     5c4:	ldr	w1, [x1, #16]
     5c8:	cmp	w1, w20
     5cc:	b.eq	5fc <add_line.isra.0+0x9c>  // b.none
     5d0:	mov	x4, x19
     5d4:	mov	x1, #0x18                  	// #24
     5d8:	bl	0 <__asan_backtrace_vector_grow>
     5dc:	cbz	x0, 614 <add_line.isra.0+0xb4>
     5e0:	ldr	x2, [x23]
     5e4:	ldr	x1, [x19, #24]
     5e8:	add	x22, x2, x22
     5ec:	stp	x22, x21, [x0]
     5f0:	stp	w20, w1, [x0, #16]
     5f4:	add	x1, x1, #0x1
     5f8:	str	x1, [x19, #24]
     5fc:	mov	w0, #0x1                   	// #1
     600:	ldp	x19, x20, [sp, #16]
     604:	ldp	x21, x22, [sp, #32]
     608:	ldr	x23, [sp, #48]
     60c:	ldp	x29, x30, [sp], #64
     610:	ret
     614:	mov	w0, #0x0                   	// #0
     618:	b	600 <add_line.isra.0+0xa0>

000000000000061c <add_function_range.isra.0>:
     61c:	stp	x29, x30, [sp, #-48]!
     620:	mov	x29, sp
     624:	stp	x21, x22, [sp, #32]
     628:	mov	x21, x3
     62c:	add	x21, x21, x1
     630:	stp	x19, x20, [sp, #16]
     634:	add	x20, x4, x1
     638:	mov	x22, x2
     63c:	ldr	x1, [x7, #24]
     640:	mov	x2, x5
     644:	mov	x3, x6
     648:	mov	x19, x7
     64c:	cbz	x1, 6a8 <add_function_range.isra.0+0x8c>
     650:	mov	x4, #0x18                  	// #24
     654:	mul	x1, x1, x4
     658:	ldr	x4, [x7]
     65c:	sub	x1, x1, #0x18
     660:	add	x1, x4, x1
     664:	ldr	x4, [x1, #8]
     668:	cmp	x21, x4
     66c:	b.eq	67c <add_function_range.isra.0+0x60>  // b.none
     670:	add	x5, x4, #0x1
     674:	cmp	x21, x5
     678:	b.ne	6a8 <add_function_range.isra.0+0x8c>  // b.any
     67c:	ldr	x5, [x1, #16]
     680:	cmp	x5, x22
     684:	b.ne	6a8 <add_function_range.isra.0+0x8c>  // b.any
     688:	cmp	x20, x4
     68c:	b.ls	694 <add_function_range.isra.0+0x78>  // b.plast
     690:	str	x20, [x1, #8]
     694:	mov	w0, #0x1                   	// #1
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x21, x22, [sp, #32]
     6a0:	ldp	x29, x30, [sp], #48
     6a4:	ret
     6a8:	mov	x4, x19
     6ac:	mov	x1, #0x18                  	// #24
     6b0:	bl	0 <__asan_backtrace_vector_grow>
     6b4:	cbz	x0, 6d0 <add_function_range.isra.0+0xb4>
     6b8:	stp	x21, x20, [x0]
     6bc:	str	x22, [x0, #16]
     6c0:	ldr	x0, [x19, #24]
     6c4:	add	x0, x0, #0x1
     6c8:	str	x0, [x19, #24]
     6cc:	b	694 <add_function_range.isra.0+0x78>
     6d0:	mov	w0, #0x0                   	// #0
     6d4:	b	698 <add_function_range.isra.0+0x7c>

00000000000006d8 <advance>:
     6d8:	stp	x29, x30, [sp, #-32]!
     6dc:	mov	x29, sp
     6e0:	ldr	x2, [x0, #24]
     6e4:	stp	x19, x20, [sp, #16]
     6e8:	mov	x19, x0
     6ec:	cmp	x1, x2
     6f0:	b.hi	718 <advance+0x40>  // b.pmore
     6f4:	ldr	x0, [x0, #16]
     6f8:	mov	w20, #0x1                   	// #1
     6fc:	add	x0, x0, x1
     700:	sub	x1, x2, x1
     704:	stp	x0, x1, [x19, #16]
     708:	mov	w0, w20
     70c:	ldp	x19, x20, [sp, #16]
     710:	ldp	x29, x30, [sp], #32
     714:	ret
     718:	ldr	w20, [x0, #56]
     71c:	cbnz	w20, 738 <advance+0x60>
     720:	adrp	x1, 0 <is_highest_address>
     724:	add	x1, x1, #0x0
     728:	bl	2e0 <dwarf_buf_error>
     72c:	mov	w0, #0x1                   	// #1
     730:	str	w0, [x19, #56]
     734:	b	708 <advance+0x30>
     738:	mov	w20, #0x0                   	// #0
     73c:	b	708 <advance+0x30>

0000000000000740 <read_uint32>:
     740:	stp	x29, x30, [sp, #-32]!
     744:	mov	x1, #0x4                   	// #4
     748:	mov	x29, sp
     74c:	stp	x19, x20, [sp, #16]
     750:	mov	x19, x0
     754:	ldr	x20, [x0, #16]
     758:	bl	6d8 <advance>
     75c:	cbz	w0, 77c <read_uint32+0x3c>
     760:	ldr	w1, [x19, #32]
     764:	ldr	w0, [x20]
     768:	cbz	w1, 770 <read_uint32+0x30>
     76c:	rev	w0, w0
     770:	ldp	x19, x20, [sp, #16]
     774:	ldp	x29, x30, [sp], #32
     778:	ret
     77c:	mov	w0, #0x0                   	// #0
     780:	b	770 <read_uint32+0x30>

0000000000000784 <read_uint64>:
     784:	stp	x29, x30, [sp, #-32]!
     788:	mov	x1, #0x8                   	// #8
     78c:	mov	x29, sp
     790:	stp	x19, x20, [sp, #16]
     794:	mov	x19, x0
     798:	ldr	x20, [x0, #16]
     79c:	bl	6d8 <advance>
     7a0:	cbz	w0, 7c0 <read_uint64+0x3c>
     7a4:	ldr	w1, [x19, #32]
     7a8:	ldr	x0, [x20]
     7ac:	cbz	w1, 7b4 <read_uint64+0x30>
     7b0:	rev	x0, x0
     7b4:	ldp	x19, x20, [sp, #16]
     7b8:	ldp	x29, x30, [sp], #32
     7bc:	ret
     7c0:	mov	x0, #0x0                   	// #0
     7c4:	b	7b4 <read_uint64+0x30>

00000000000007c8 <read_offset>:
     7c8:	cbz	w1, 7d0 <read_offset+0x8>
     7cc:	b	784 <read_uint64>
     7d0:	stp	x29, x30, [sp, #-16]!
     7d4:	mov	x29, sp
     7d8:	bl	740 <read_uint32>
     7dc:	mov	w0, w0
     7e0:	ldp	x29, x30, [sp], #16
     7e4:	ret

00000000000007e8 <read_uint16>:
     7e8:	stp	x29, x30, [sp, #-32]!
     7ec:	mov	x1, #0x2                   	// #2
     7f0:	mov	x29, sp
     7f4:	stp	x19, x20, [sp, #16]
     7f8:	mov	x19, x0
     7fc:	ldr	x20, [x0, #16]
     800:	bl	6d8 <advance>
     804:	cbz	w0, 830 <read_uint16+0x48>
     808:	ldrb	w1, [x20, #1]
     80c:	ldrb	w0, [x20]
     810:	ldr	w3, [x19, #32]
     814:	orr	w2, w1, w0, lsl #8
     818:	cmp	w3, #0x0
     81c:	orr	w0, w0, w1, lsl #8
     820:	csel	w0, w0, w2, eq  // eq = none
     824:	ldp	x19, x20, [sp, #16]
     828:	ldp	x29, x30, [sp], #32
     82c:	ret
     830:	mov	w0, #0x0                   	// #0
     834:	b	824 <read_uint16+0x3c>

0000000000000838 <read_byte>:
     838:	stp	x29, x30, [sp, #-32]!
     83c:	mov	x1, #0x1                   	// #1
     840:	mov	x29, sp
     844:	str	x19, [sp, #16]
     848:	ldr	x19, [x0, #16]
     84c:	bl	6d8 <advance>
     850:	cbz	w0, 864 <read_byte+0x2c>
     854:	ldrb	w0, [x19]
     858:	ldr	x19, [sp, #16]
     85c:	ldp	x29, x30, [sp], #32
     860:	ret
     864:	mov	w0, #0x0                   	// #0
     868:	b	858 <read_byte+0x20>

000000000000086c <read_address>:
     86c:	stp	x29, x30, [sp, #-16]!
     870:	sub	w1, w1, #0x1
     874:	cmp	w1, #0x7
     878:	mov	x29, sp
     87c:	b.hi	8c8 <read_address+0x5c>  // b.pmore
     880:	adrp	x2, 0 <is_highest_address>
     884:	add	x2, x2, #0x0
     888:	ldrb	w1, [x2, w1, uxtw]
     88c:	adr	x2, 898 <read_address+0x2c>
     890:	add	x1, x2, w1, sxtb #2
     894:	br	x1
     898:	bl	838 <read_byte>
     89c:	and	x0, x0, #0xff
     8a0:	ldp	x29, x30, [sp], #16
     8a4:	ret
     8a8:	bl	7e8 <read_uint16>
     8ac:	and	x0, x0, #0xffff
     8b0:	b	8a0 <read_address+0x34>
     8b4:	bl	740 <read_uint32>
     8b8:	mov	w0, w0
     8bc:	b	8a0 <read_address+0x34>
     8c0:	ldp	x29, x30, [sp], #16
     8c4:	b	784 <read_uint64>
     8c8:	adrp	x1, 0 <is_highest_address>
     8cc:	add	x1, x1, #0x0
     8d0:	bl	2e0 <dwarf_buf_error>
     8d4:	mov	x0, #0x0                   	// #0
     8d8:	b	8a0 <read_address+0x34>

00000000000008dc <read_uleb128>:
     8dc:	stp	x29, x30, [sp, #-64]!
     8e0:	mov	x29, sp
     8e4:	stp	x19, x20, [sp, #16]
     8e8:	mov	x19, x0
     8ec:	mov	x20, #0x0                   	// #0
     8f0:	stp	x21, x22, [sp, #32]
     8f4:	adrp	x22, 0 <is_highest_address>
     8f8:	add	x22, x22, #0x0
     8fc:	mov	w21, #0x0                   	// #0
     900:	stp	x23, x24, [sp, #48]
     904:	mov	w24, #0x0                   	// #0
     908:	mov	x0, x19
     90c:	mov	x1, #0x1                   	// #1
     910:	ldr	x23, [x19, #16]
     914:	bl	6d8 <advance>
     918:	cbz	w0, 96c <read_uleb128+0x90>
     91c:	ldrb	w23, [x23]
     920:	cmp	w21, #0x3f
     924:	b.hi	954 <read_uleb128+0x78>  // b.pmore
     928:	and	x0, x23, #0x7f
     92c:	lsl	x0, x0, x21
     930:	orr	x20, x20, x0
     934:	add	w21, w21, #0x7
     938:	tbnz	w23, #7, 908 <read_uleb128+0x2c>
     93c:	mov	x0, x20
     940:	ldp	x19, x20, [sp, #16]
     944:	ldp	x21, x22, [sp, #32]
     948:	ldp	x23, x24, [sp, #48]
     94c:	ldp	x29, x30, [sp], #64
     950:	ret
     954:	cbnz	w24, 934 <read_uleb128+0x58>
     958:	mov	x1, x22
     95c:	mov	x0, x19
     960:	mov	w24, #0x1                   	// #1
     964:	bl	2e0 <dwarf_buf_error>
     968:	b	934 <read_uleb128+0x58>
     96c:	mov	x20, #0x0                   	// #0
     970:	b	93c <read_uleb128+0x60>

0000000000000974 <read_sleb128>:
     974:	stp	x29, x30, [sp, #-64]!
     978:	mov	x29, sp
     97c:	stp	x21, x22, [sp, #32]
     980:	mov	x21, x0
     984:	stp	x23, x24, [sp, #48]
     988:	adrp	x23, 0 <is_highest_address>
     98c:	add	x23, x23, #0x0
     990:	mov	w24, #0x0                   	// #0
     994:	stp	x19, x20, [sp, #16]
     998:	mov	w20, #0x0                   	// #0
     99c:	mov	x19, #0x0                   	// #0
     9a0:	mov	x0, x21
     9a4:	mov	x1, #0x1                   	// #1
     9a8:	ldr	x22, [x21, #16]
     9ac:	bl	6d8 <advance>
     9b0:	cbz	w0, a1c <read_sleb128+0xa8>
     9b4:	ldrb	w22, [x22]
     9b8:	cmp	w20, #0x3f
     9bc:	b.hi	a04 <read_sleb128+0x90>  // b.pmore
     9c0:	and	x0, x22, #0x7f
     9c4:	lsl	x0, x0, x20
     9c8:	orr	x19, x19, x0
     9cc:	add	w20, w20, #0x7
     9d0:	tbnz	w22, #7, 9a0 <read_sleb128+0x2c>
     9d4:	tbz	w22, #6, 9ec <read_sleb128+0x78>
     9d8:	cmp	w20, #0x3f
     9dc:	b.hi	9ec <read_sleb128+0x78>  // b.pmore
     9e0:	mov	x0, #0xffffffffffffffff    	// #-1
     9e4:	lsl	x20, x0, x20
     9e8:	orr	x19, x19, x20
     9ec:	mov	x0, x19
     9f0:	ldp	x19, x20, [sp, #16]
     9f4:	ldp	x21, x22, [sp, #32]
     9f8:	ldp	x23, x24, [sp, #48]
     9fc:	ldp	x29, x30, [sp], #64
     a00:	ret
     a04:	cbnz	w24, 9cc <read_sleb128+0x58>
     a08:	mov	x1, x23
     a0c:	mov	x0, x21
     a10:	mov	w24, #0x1                   	// #1
     a14:	bl	2e0 <dwarf_buf_error>
     a18:	b	9cc <read_sleb128+0x58>
     a1c:	mov	x0, #0x0                   	// #0
     a20:	b	9f0 <read_sleb128+0x7c>

0000000000000a24 <read_string>:
     a24:	stp	x29, x30, [sp, #-32]!
     a28:	mov	x29, sp
     a2c:	stp	x19, x20, [sp, #16]
     a30:	mov	x19, x0
     a34:	ldp	x20, x1, [x0, #16]
     a38:	mov	x0, x20
     a3c:	bl	0 <__asan_internal_strnlen>
     a40:	add	x1, x0, #0x1
     a44:	mov	x0, x19
     a48:	bl	6d8 <advance>
     a4c:	cmp	w0, #0x0
     a50:	csel	x0, x20, xzr, ne  // ne = any
     a54:	ldp	x19, x20, [sp, #16]
     a58:	ldp	x29, x30, [sp], #32
     a5c:	ret

0000000000000a60 <read_attribute>:
     a60:	stp	x29, x30, [sp, #-96]!
     a64:	mov	x29, sp
     a68:	stp	x19, x20, [sp, #16]
     a6c:	mov	x20, x1
     a70:	ldr	x19, [sp, #96]
     a74:	stp	x21, x22, [sp, #32]
     a78:	mov	w21, w0
     a7c:	mov	w22, w4
     a80:	stp	x23, x24, [sp, #48]
     a84:	mov	x24, x5
     a88:	mov	x23, x7
     a8c:	stp	x25, x26, [sp, #64]
     a90:	mov	w26, w3
     a94:	mov	x25, x6
     a98:	stp	x27, x28, [sp, #80]
     a9c:	adrp	x27, 0 <is_highest_address>
     aa0:	mov	w28, w2
     aa4:	add	x27, x27, #0x0
     aa8:	mov	x0, x19
     aac:	mov	x2, #0x10                  	// #16
     ab0:	mov	w1, #0x0                   	// #0
     ab4:	bl	0 <__asan_internal_memset>
     ab8:	cmp	w21, #0x20
     abc:	b.hi	ae0 <read_attribute+0x80>  // b.pmore
     ac0:	cbz	w21, b00 <read_attribute+0xa0>
     ac4:	sub	w21, w21, #0x1
     ac8:	cmp	w21, #0x1f
     acc:	b.hi	b00 <read_attribute+0xa0>  // b.pmore
     ad0:	ldrh	w0, [x27, w21, uxtw #1]
     ad4:	adr	x1, ae0 <read_attribute+0x80>
     ad8:	add	x0, x1, w0, sxth #2
     adc:	br	x0
     ae0:	mov	w0, #0x1f20                	// #7968
     ae4:	cmp	w21, w0
     ae8:	b.eq	d60 <read_attribute+0x300>  // b.none
     aec:	b.hi	b0c <read_attribute+0xac>  // b.pmore
     af0:	mov	w0, #0xffffe0ff            	// #-7937
     af4:	add	w21, w21, w0
     af8:	cmp	w21, #0x1
     afc:	b.ls	d58 <read_attribute+0x2f8>  // b.plast
     b00:	adrp	x1, 0 <is_highest_address>
     b04:	add	x1, x1, #0x0
     b08:	b	c9c <read_attribute+0x23c>
     b0c:	mov	w0, #0x1f21                	// #7969
     b10:	cmp	w21, w0
     b14:	b.ne	b00 <read_attribute+0xa0>  // b.any
     b18:	mov	w1, w28
     b1c:	mov	x0, x20
     b20:	bl	7c8 <read_offset>
     b24:	cbz	x23, d74 <read_attribute+0x314>
     b28:	ldr	x1, [x23, #112]
     b2c:	cmp	x1, x0
     b30:	b.hi	d8c <read_attribute+0x32c>  // b.pmore
     b34:	adrp	x1, 0 <is_highest_address>
     b38:	add	x1, x1, #0x0
     b3c:	b	c9c <read_attribute+0x23c>
     b40:	mov	w21, #0x1                   	// #1
     b44:	str	w21, [x19]
     b48:	mov	w1, w22
     b4c:	mov	x0, x20
     b50:	bl	86c <read_address>
     b54:	b	c78 <read_attribute+0x218>
     b58:	mov	w0, #0xa                   	// #10
     b5c:	str	w0, [x19]
     b60:	mov	x0, x20
     b64:	bl	7e8 <read_uint16>
     b68:	and	x1, x0, #0xffff
     b6c:	mov	x0, x20
     b70:	ldp	x19, x20, [sp, #16]
     b74:	ldp	x21, x22, [sp, #32]
     b78:	ldp	x23, x24, [sp, #48]
     b7c:	ldp	x25, x26, [sp, #64]
     b80:	ldp	x27, x28, [sp, #80]
     b84:	ldp	x29, x30, [sp], #96
     b88:	b	6d8 <advance>
     b8c:	mov	w0, #0xa                   	// #10
     b90:	str	w0, [x19]
     b94:	mov	x0, x20
     b98:	bl	740 <read_uint32>
     b9c:	mov	w1, w0
     ba0:	b	b6c <read_attribute+0x10c>
     ba4:	mov	w0, #0x2                   	// #2
     ba8:	str	w0, [x19]
     bac:	mov	x0, x20
     bb0:	bl	7e8 <read_uint16>
     bb4:	and	x0, x0, #0xffff
     bb8:	b	c78 <read_attribute+0x218>
     bbc:	mov	w0, #0x2                   	// #2
     bc0:	str	w0, [x19]
     bc4:	mov	x0, x20
     bc8:	bl	740 <read_uint32>
     bcc:	mov	w0, w0
     bd0:	b	c78 <read_attribute+0x218>
     bd4:	mov	w0, #0x2                   	// #2
     bd8:	str	w0, [x19]
     bdc:	mov	x0, x20
     be0:	bl	784 <read_uint64>
     be4:	b	c78 <read_attribute+0x218>
     be8:	mov	w0, #0x4                   	// #4
     bec:	str	w0, [x19]
     bf0:	mov	x0, x20
     bf4:	bl	a24 <read_string>
     bf8:	cmp	x0, #0x0
     bfc:	str	x0, [x19, #8]
     c00:	cset	w0, ne  // ne = any
     c04:	ldp	x19, x20, [sp, #16]
     c08:	ldp	x21, x22, [sp, #32]
     c0c:	ldp	x23, x24, [sp, #48]
     c10:	ldp	x25, x26, [sp, #64]
     c14:	ldp	x27, x28, [sp, #80]
     c18:	ldp	x29, x30, [sp], #96
     c1c:	ret
     c20:	mov	w0, #0xa                   	// #10
     c24:	str	w0, [x19]
     c28:	mov	x0, x20
     c2c:	bl	8dc <read_uleb128>
     c30:	mov	x1, x0
     c34:	b	b6c <read_attribute+0x10c>
     c38:	mov	w0, #0xa                   	// #10
     c3c:	str	w0, [x19]
     c40:	mov	x0, x20
     c44:	bl	838 <read_byte>
     c48:	and	x1, x0, #0xff
     c4c:	b	b6c <read_attribute+0x10c>
     c50:	mov	w0, #0x2                   	// #2
     c54:	str	w0, [x19]
     c58:	mov	x0, x20
     c5c:	bl	838 <read_byte>
     c60:	and	x0, x0, #0xff
     c64:	b	c78 <read_attribute+0x218>
     c68:	mov	w0, #0x3                   	// #3
     c6c:	str	w0, [x19]
     c70:	mov	x0, x20
     c74:	bl	974 <read_sleb128>
     c78:	str	x0, [x19, #8]
     c7c:	b	d78 <read_attribute+0x318>
     c80:	mov	w1, w28
     c84:	mov	x0, x20
     c88:	bl	7c8 <read_offset>
     c8c:	cmp	x25, x0
     c90:	b.hi	cac <read_attribute+0x24c>  // b.pmore
     c94:	adrp	x1, 0 <is_highest_address>
     c98:	add	x1, x1, #0x0
     c9c:	mov	x0, x20
     ca0:	bl	2e0 <dwarf_buf_error>
     ca4:	mov	w0, #0x0                   	// #0
     ca8:	b	c04 <read_attribute+0x1a4>
     cac:	mov	w1, #0x4                   	// #4
     cb0:	add	x0, x24, x0
     cb4:	str	w1, [x19]
     cb8:	b	c78 <read_attribute+0x218>
     cbc:	mov	w0, #0x2                   	// #2
     cc0:	str	w0, [x19]
     cc4:	mov	x0, x20
     cc8:	bl	8dc <read_uleb128>
     ccc:	b	c78 <read_attribute+0x218>
     cd0:	mov	w0, #0x6                   	// #6
     cd4:	str	w0, [x19]
     cd8:	cmp	w26, #0x2
     cdc:	b.eq	b48 <read_attribute+0xe8>  // b.none
     ce0:	mov	w1, w28
     ce4:	mov	x0, x20
     ce8:	bl	7c8 <read_offset>
     cec:	b	c78 <read_attribute+0x218>
     cf0:	mov	w0, #0x5                   	// #5
     cf4:	b	c54 <read_attribute+0x1f4>
     cf8:	mov	w0, #0x5                   	// #5
     cfc:	b	ba8 <read_attribute+0x148>
     d00:	mov	w0, #0x5                   	// #5
     d04:	b	bc0 <read_attribute+0x160>
     d08:	mov	w0, #0x5                   	// #5
     d0c:	b	bd8 <read_attribute+0x178>
     d10:	mov	w0, #0x5                   	// #5
     d14:	b	cc0 <read_attribute+0x260>
     d18:	mov	x0, x20
     d1c:	bl	8dc <read_uleb128>
     d20:	mov	w21, w0
     d24:	b	aa8 <read_attribute+0x48>
     d28:	mov	w0, #0x8                   	// #8
     d2c:	str	w0, [x19]
     d30:	b	ce0 <read_attribute+0x280>
     d34:	mov	w0, #0xb                   	// #11
     d38:	b	c24 <read_attribute+0x1c4>
     d3c:	mov	w0, #0x2                   	// #2
     d40:	str	w0, [x19]
     d44:	mov	x0, #0x1                   	// #1
     d48:	str	x0, [x19, #8]
     d4c:	b	c04 <read_attribute+0x1a4>
     d50:	mov	w0, #0x9                   	// #9
     d54:	b	bd8 <read_attribute+0x178>
     d58:	mov	w0, #0x8                   	// #8
     d5c:	b	cc0 <read_attribute+0x260>
     d60:	mov	w1, w28
     d64:	mov	x0, x20
     d68:	bl	7c8 <read_offset>
     d6c:	str	x0, [x19, #8]
     d70:	cbnz	x23, d80 <read_attribute+0x320>
     d74:	str	wzr, [x19]
     d78:	mov	w0, #0x1                   	// #1
     d7c:	b	c04 <read_attribute+0x1a4>
     d80:	mov	w0, #0x7                   	// #7
     d84:	str	w0, [x19]
     d88:	b	d78 <read_attribute+0x318>
     d8c:	mov	w1, #0x4                   	// #4
     d90:	str	w1, [x19]
     d94:	ldr	x1, [x23, #104]
     d98:	add	x0, x1, x0
     d9c:	b	c78 <read_attribute+0x218>

0000000000000da0 <find_address_ranges>:
     da0:	sub	sp, sp, #0x170
     da4:	stp	x29, x30, [sp, #48]
     da8:	add	x29, sp, #0x30
     dac:	stp	x21, x22, [sp, #80]
     db0:	ldp	x21, x22, [sp, #376]
     db4:	stp	x19, x20, [sp, #64]
     db8:	mov	x20, x2
     dbc:	ldr	x19, [sp, #392]
     dc0:	stp	x23, x24, [sp, #96]
     dc4:	add	x23, sp, #0xf0
     dc8:	stp	x25, x26, [sp, #112]
     dcc:	mov	x25, x0
     dd0:	mov	x26, x1
     dd4:	stp	x27, x28, [sp, #128]
     dd8:	add	x27, sp, #0x130
     ddc:	stp	x5, x6, [sp, #160]
     de0:	stp	x3, x4, [sp, #176]
     de4:	str	w7, [sp, #224]
     de8:	adrp	x0, 0 <is_highest_address>
     dec:	add	x0, x0, #0x0
     df0:	str	x0, [sp, #192]
     df4:	ldr	x0, [x20, #24]
     df8:	cbz	x0, e0c <find_address_ranges+0x6c>
     dfc:	mov	x0, x20
     e00:	bl	8dc <read_uleb128>
     e04:	mov	x1, x0
     e08:	cbnz	x0, e30 <find_address_ranges+0x90>
     e0c:	mov	w0, #0x1                   	// #1
     e10:	ldp	x29, x30, [sp, #48]
     e14:	ldp	x19, x20, [sp, #64]
     e18:	ldp	x21, x22, [sp, #80]
     e1c:	ldp	x23, x24, [sp, #96]
     e20:	ldp	x25, x26, [sp, #112]
     e24:	ldp	x27, x28, [sp, #128]
     e28:	add	sp, sp, #0x170
     e2c:	ret
     e30:	mov	x3, x22
     e34:	mov	x2, x21
     e38:	add	x0, x19, #0x58
     e3c:	bl	4ac <lookup_abbrev>
     e40:	mov	x28, x0
     e44:	cbnz	x0, e50 <find_address_ranges+0xb0>
     e48:	mov	w0, #0x0                   	// #0
     e4c:	b	e10 <find_address_ranges+0x70>
     e50:	ldr	x0, [sp, #408]
     e54:	cbz	x0, e64 <find_address_ranges+0xc4>
     e58:	ldr	x1, [sp, #408]
     e5c:	ldr	w0, [x28, #8]
     e60:	str	w0, [x1]
     e64:	mov	x11, #0x0                   	// #0
     e68:	mov	x9, #0x0                   	// #0
     e6c:	mov	w12, #0x0                   	// #0
     e70:	mov	x10, #0x0                   	// #0
     e74:	mov	x24, #0x0                   	// #0
     e78:	stp	wzr, wzr, [sp, #148]
     e7c:	str	wzr, [sp, #156]
     e80:	ldr	x0, [x28, #16]
     e84:	cmp	x0, x11
     e88:	b.hi	ee0 <find_address_ranges+0x140>  // b.pmore
     e8c:	ldr	w0, [x28, #8]
     e90:	cmp	w0, #0x2e
     e94:	ccmp	w0, #0x11, #0x4, ne  // ne = any
     e98:	b.eq	1058 <find_address_ranges+0x2b8>  // b.none
     e9c:	ldr	w0, [x28, #12]
     ea0:	cbz	w0, df4 <find_address_ranges+0x54>
     ea4:	ldp	x5, x6, [sp, #160]
     ea8:	stp	x21, x22, [sp, #8]
     eac:	ldr	w7, [sp, #224]
     eb0:	ldp	x3, x4, [sp, #176]
     eb4:	str	xzr, [sp, #40]
     eb8:	ldr	x0, [sp, #400]
     ebc:	stp	x19, x0, [sp, #24]
     ec0:	mov	x2, x20
     ec4:	ldr	x0, [sp, #368]
     ec8:	str	x0, [sp]
     ecc:	mov	x1, x26
     ed0:	mov	x0, x25
     ed4:	bl	da0 <find_address_ranges>
     ed8:	cbnz	w0, de8 <find_address_ranges+0x48>
     edc:	b	e48 <find_address_ranges+0xa8>
     ee0:	ldr	x0, [x28, #24]
     ee4:	str	x27, [sp]
     ee8:	ldp	x5, x6, [sp, #176]
     eec:	lsl	x13, x11, #3
     ef0:	add	x0, x0, x11, lsl #3
     ef4:	ldr	w4, [x19, #48]
     ef8:	ldp	w3, w2, [x19, #40]
     efc:	mov	x1, x20
     f00:	ldr	w0, [x0, #4]
     f04:	ldr	x7, [sp, #368]
     f08:	stp	x11, x13, [sp, #200]
     f0c:	str	x10, [sp, #216]
     f10:	str	w12, [sp, #228]
     f14:	str	x9, [sp, #232]
     f18:	bl	a60 <read_attribute>
     f1c:	cbz	w0, e10 <find_address_ranges+0x70>
     f20:	ldp	x11, x13, [sp, #200]
     f24:	ldr	x0, [x28, #24]
     f28:	ldr	w12, [sp, #228]
     f2c:	ldr	x10, [sp, #216]
     f30:	ldr	w0, [x0, x13]
     f34:	ldr	x9, [sp, #232]
     f38:	cmp	w0, #0x1b
     f3c:	b.hi	f78 <find_address_ranges+0x1d8>  // b.pmore
     f40:	cmp	w0, #0xf
     f44:	b.hi	f58 <find_address_ranges+0x1b8>  // b.pmore
     f48:	cmp	w0, #0x3
     f4c:	b.eq	1010 <find_address_ranges+0x270>  // b.none
     f50:	add	x11, x11, #0x1
     f54:	b	e80 <find_address_ranges+0xe0>
     f58:	sub	w0, w0, #0x10
     f5c:	cmp	w0, #0xb
     f60:	b.hi	f50 <find_address_ranges+0x1b0>  // b.pmore
     f64:	ldr	x1, [sp, #192]
     f68:	ldrb	w0, [x1, w0, uxtw]
     f6c:	adr	x1, f78 <find_address_ranges+0x1d8>
     f70:	add	x0, x1, w0, sxtb #2
     f74:	br	x0
     f78:	cmp	w0, #0x55
     f7c:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
     f80:	ldr	w0, [sp, #304]
     f84:	cmp	w0, #0x2
     f88:	ccmp	w0, #0x8, #0x4, ne  // ne = any
     f8c:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
     f90:	mov	w0, #0x1                   	// #1
     f94:	str	w0, [sp, #156]
     f98:	ldr	x9, [sp, #312]
     f9c:	b	f50 <find_address_ranges+0x1b0>
     fa0:	ldr	w0, [sp, #304]
     fa4:	cmp	w0, #0x1
     fa8:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
     fac:	str	w0, [sp, #152]
     fb0:	ldr	x24, [sp, #312]
     fb4:	b	f50 <find_address_ranges+0x1b0>
     fb8:	ldr	w0, [sp, #304]
     fbc:	cmp	w0, #0x1
     fc0:	b.ne	fd0 <find_address_ranges+0x230>  // b.any
     fc4:	str	w0, [sp, #148]
     fc8:	ldr	x10, [sp, #312]
     fcc:	b	f50 <find_address_ranges+0x1b0>
     fd0:	cmp	w0, #0x2
     fd4:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
     fd8:	mov	w12, #0x1                   	// #1
     fdc:	str	w12, [sp, #148]
     fe0:	ldr	x10, [sp, #312]
     fe4:	b	f50 <find_address_ranges+0x1b0>
     fe8:	ldr	w0, [x28, #8]
     fec:	cmp	w0, #0x11
     ff0:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
     ff4:	ldr	w0, [sp, #304]
     ff8:	cmp	w0, #0x2
     ffc:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1000:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
    1004:	ldr	x0, [sp, #312]
    1008:	str	x0, [x19, #56]
    100c:	b	f50 <find_address_ranges+0x1b0>
    1010:	ldr	w0, [x28, #8]
    1014:	cmp	w0, #0x11
    1018:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
    101c:	ldr	w0, [sp, #304]
    1020:	cmp	w0, #0x4
    1024:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
    1028:	ldr	x0, [sp, #312]
    102c:	str	x0, [x19, #64]
    1030:	b	f50 <find_address_ranges+0x1b0>
    1034:	ldr	w0, [x28, #8]
    1038:	cmp	w0, #0x11
    103c:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
    1040:	ldr	w0, [sp, #304]
    1044:	cmp	w0, #0x4
    1048:	b.ne	f50 <find_address_ranges+0x1b0>  // b.any
    104c:	ldr	x0, [sp, #312]
    1050:	str	x0, [x19, #72]
    1054:	b	f50 <find_address_ranges+0x1b0>
    1058:	ldr	w0, [sp, #156]
    105c:	cbz	w0, 1180 <find_address_ranges+0x3e0>
    1060:	ldr	x0, [sp, #168]
    1064:	cmp	x9, x0
    1068:	b.cc	1084 <find_address_ranges+0x2e4>  // b.lo, b.ul, b.last
    106c:	mov	x0, x22
    1070:	mov	w2, #0x0                   	// #0
    1074:	adrp	x1, 0 <is_highest_address>
    1078:	add	x1, x1, #0x0
    107c:	blr	x21
    1080:	b	e48 <find_address_ranges+0xa8>
    1084:	adrp	x0, 0 <is_highest_address>
    1088:	add	x0, x0, #0x0
    108c:	str	x0, [sp, #304]
    1090:	ldr	x0, [sp, #160]
    1094:	str	x0, [sp, #312]
    1098:	stp	x21, x22, [sp, #344]
    109c:	add	x0, x0, x9
    10a0:	str	x0, [sp, #320]
    10a4:	ldr	x0, [sp, #168]
    10a8:	str	wzr, [sp, #360]
    10ac:	sub	x9, x0, x9
    10b0:	ldr	w0, [sp, #224]
    10b4:	str	x9, [sp, #328]
    10b8:	str	w0, [sp, #336]
    10bc:	ldr	w0, [sp, #360]
    10c0:	cbnz	w0, e48 <find_address_ranges+0xa8>
    10c4:	ldr	w1, [x19, #48]
    10c8:	mov	x0, x27
    10cc:	bl	86c <read_address>
    10d0:	mov	x2, x0
    10d4:	ldr	w1, [x19, #48]
    10d8:	mov	x0, x27
    10dc:	str	x2, [sp, #200]
    10e0:	bl	86c <read_address>
    10e4:	mov	x3, x0
    10e8:	ldr	x2, [sp, #200]
    10ec:	orr	x0, x2, x0
    10f0:	cbz	x0, 1154 <find_address_ranges+0x3b4>
    10f4:	ldr	w1, [x19, #48]
    10f8:	mov	x0, x2
    10fc:	bl	0 <is_highest_address>
    1100:	ldr	x2, [sp, #200]
    1104:	cbnz	w0, 114c <find_address_ranges+0x3ac>
    1108:	add	x0, sp, #0x200
    110c:	add	x2, x2, x24
    1110:	add	x3, x3, x24
    1114:	stp	x2, x3, [sp, #280]
    1118:	mov	x4, x22
    111c:	ldr	x5, [sp, #400]
    1120:	str	x19, [sp, #296]
    1124:	ldp	x0, x1, [x0, #-232]
    1128:	mov	x3, x21
    112c:	mov	x2, x23
    1130:	stp	x0, x1, [x23]
    1134:	mov	x1, x26
    1138:	mov	x0, x25
    113c:	str	x19, [x23, #16]
    1140:	bl	214 <add_unit_addr>
    1144:	cbnz	w0, 10bc <find_address_ranges+0x31c>
    1148:	b	e10 <find_address_ranges+0x70>
    114c:	mov	x24, x3
    1150:	b	10bc <find_address_ranges+0x31c>
    1154:	ldr	w0, [sp, #360]
    1158:	cbnz	w0, e48 <find_address_ranges+0xa8>
    115c:	ldr	w0, [x28, #8]
    1160:	cmp	w0, #0x11
    1164:	b.ne	e9c <find_address_ranges+0xfc>  // b.any
    1168:	ldr	w0, [sp, #156]
    116c:	cbnz	w0, e0c <find_address_ranges+0x6c>
    1170:	ldp	w1, w0, [sp, #148]
    1174:	tst	w0, w1
    1178:	b.eq	e9c <find_address_ranges+0xfc>  // b.none
    117c:	b	e0c <find_address_ranges+0x6c>
    1180:	ldp	w1, w0, [sp, #148]
    1184:	tst	w0, w1
    1188:	b.eq	115c <find_address_ranges+0x3bc>  // b.none
    118c:	cbz	w12, 1194 <find_address_ranges+0x3f4>
    1190:	add	x10, x10, x24
    1194:	stp	x24, x10, [sp, #304]
    1198:	mov	x4, x22
    119c:	mov	x3, x21
    11a0:	ldr	x5, [sp, #400]
    11a4:	str	x19, [sp, #320]
    11a8:	ldp	x0, x1, [x27]
    11ac:	mov	x2, x23
    11b0:	stp	x0, x1, [x23]
    11b4:	mov	x1, x26
    11b8:	mov	x0, x25
    11bc:	str	x19, [x23, #16]
    11c0:	bl	214 <add_unit_addr>
    11c4:	cbnz	w0, 115c <find_address_ranges+0x3bc>
    11c8:	b	e10 <find_address_ranges+0x70>

00000000000011cc <function_addrs_compare>:
    11cc:	ldr	x3, [x0]
    11d0:	ldr	x2, [x1]
    11d4:	cmp	x3, x2
    11d8:	b.cc	1210 <function_addrs_compare+0x44>  // b.lo, b.ul, b.last
    11dc:	b.hi	1208 <function_addrs_compare+0x3c>  // b.pmore
    11e0:	ldr	x3, [x0, #8]
    11e4:	ldr	x2, [x1, #8]
    11e8:	cmp	x3, x2
    11ec:	b.cc	1208 <function_addrs_compare+0x3c>  // b.lo, b.ul, b.last
    11f0:	b.hi	1210 <function_addrs_compare+0x44>  // b.pmore
    11f4:	ldr	x0, [x0, #16]
    11f8:	ldr	x1, [x1, #16]
    11fc:	ldr	x0, [x0]
    1200:	ldr	x1, [x1]
    1204:	b	0 <__asan_internal_strcmp>
    1208:	mov	w0, #0x1                   	// #1
    120c:	ret
    1210:	mov	w0, #0xffffffff            	// #-1
    1214:	b	120c <function_addrs_compare+0x40>

0000000000001218 <read_referenced_name>:
    1218:	sub	sp, sp, #0xd0
    121c:	stp	x29, x30, [sp, #16]
    1220:	add	x29, sp, #0x10
    1224:	stp	x21, x22, [sp, #48]
    1228:	mov	x21, x0
    122c:	ldr	x0, [x1, #16]
    1230:	stp	x19, x20, [sp, #32]
    1234:	stp	x23, x24, [sp, #64]
    1238:	cmp	x0, x2
    123c:	mov	x23, x3
    1240:	stp	x25, x26, [sp, #80]
    1244:	mov	x24, x4
    1248:	stp	x27, x28, [sp, #96]
    124c:	b.hi	1264 <read_referenced_name+0x4c>  // b.pmore
    1250:	ldr	x4, [x1, #8]
    1254:	sub	x5, x2, x0
    1258:	mov	x20, x1
    125c:	cmp	x5, x4
    1260:	b.cc	1280 <read_referenced_name+0x68>  // b.lo, b.ul, b.last
    1264:	adrp	x1, 0 <is_highest_address>
    1268:	mov	x0, x24
    126c:	add	x1, x1, #0x0
    1270:	mov	w2, #0x0                   	// #0
    1274:	blr	x23
    1278:	mov	x19, #0x0                   	// #0
    127c:	b	1394 <read_referenced_name+0x17c>
    1280:	ldr	x1, [x21, #56]
    1284:	adrp	x3, 0 <is_highest_address>
    1288:	add	x3, x3, #0x0
    128c:	stp	x3, x1, [sp, #144]
    1290:	add	x0, x0, x4
    1294:	ldr	x1, [x20]
    1298:	sub	x0, x0, x2
    129c:	add	x26, sp, #0x90
    12a0:	str	x0, [sp, #168]
    12a4:	add	x1, x1, x5
    12a8:	ldr	w0, [x21, #120]
    12ac:	str	x1, [sp, #160]
    12b0:	str	w0, [sp, #176]
    12b4:	mov	x0, x26
    12b8:	stp	x23, x24, [sp, #184]
    12bc:	str	wzr, [sp, #200]
    12c0:	bl	8dc <read_uleb128>
    12c4:	mov	x1, x0
    12c8:	cbnz	x0, 12e0 <read_referenced_name+0xc8>
    12cc:	mov	x0, x26
    12d0:	adrp	x1, 0 <is_highest_address>
    12d4:	add	x1, x1, #0x0
    12d8:	bl	2e0 <dwarf_buf_error>
    12dc:	b	1278 <read_referenced_name+0x60>
    12e0:	mov	x3, x24
    12e4:	mov	x2, x23
    12e8:	add	x0, x20, #0x58
    12ec:	bl	4ac <lookup_abbrev>
    12f0:	mov	x22, x0
    12f4:	cbz	x0, 1278 <read_referenced_name+0x60>
    12f8:	add	x27, sp, #0x80
    12fc:	mov	x25, #0x0                   	// #0
    1300:	mov	x19, #0x0                   	// #0
    1304:	mov	w28, #0x2007                	// #8199
    1308:	ldr	x0, [x22, #16]
    130c:	cmp	x0, x25
    1310:	b.ls	1394 <read_referenced_name+0x17c>  // b.plast
    1314:	ldr	x0, [x22, #24]
    1318:	lsl	x8, x25, #3
    131c:	ldr	x7, [x21, #8]
    1320:	mov	x1, x26
    1324:	add	x0, x0, x25, lsl #3
    1328:	str	x8, [sp, #120]
    132c:	ldp	x5, x6, [x21, #104]
    1330:	str	x27, [sp]
    1334:	ldr	w0, [x0, #4]
    1338:	ldp	w3, w2, [x20, #40]
    133c:	ldr	w4, [x20, #48]
    1340:	bl	a60 <read_attribute>
    1344:	cbz	w0, 1278 <read_referenced_name+0x60>
    1348:	ldr	x0, [x22, #24]
    134c:	ldr	x8, [sp, #120]
    1350:	add	x1, x0, x8
    1354:	ldr	w0, [x0, x8]
    1358:	cmp	w0, #0x47
    135c:	b.eq	13d0 <read_referenced_name+0x1b8>  // b.none
    1360:	b.hi	1374 <read_referenced_name+0x15c>  // b.pmore
    1364:	cmp	w0, #0x3
    1368:	b.eq	13b8 <read_referenced_name+0x1a0>  // b.none
    136c:	add	x25, x25, #0x1
    1370:	b	1308 <read_referenced_name+0xf0>
    1374:	cmp	w0, #0x6e
    1378:	b.eq	1384 <read_referenced_name+0x16c>  // b.none
    137c:	cmp	w0, w28
    1380:	b.ne	136c <read_referenced_name+0x154>  // b.any
    1384:	ldr	w0, [sp, #128]
    1388:	cmp	w0, #0x4
    138c:	b.ne	136c <read_referenced_name+0x154>  // b.any
    1390:	ldr	x19, [sp, #136]
    1394:	mov	x0, x19
    1398:	ldp	x29, x30, [sp, #16]
    139c:	ldp	x19, x20, [sp, #32]
    13a0:	ldp	x21, x22, [sp, #48]
    13a4:	ldp	x23, x24, [sp, #64]
    13a8:	ldp	x25, x26, [sp, #80]
    13ac:	ldp	x27, x28, [sp, #96]
    13b0:	add	sp, sp, #0xd0
    13b4:	ret
    13b8:	cbnz	x19, 136c <read_referenced_name+0x154>
    13bc:	ldr	w0, [sp, #128]
    13c0:	cmp	w0, #0x4
    13c4:	b.ne	136c <read_referenced_name+0x154>  // b.any
    13c8:	ldr	x19, [sp, #136]
    13cc:	b	136c <read_referenced_name+0x154>
    13d0:	ldr	w0, [x1, #4]
    13d4:	cmp	w0, #0x20
    13d8:	b.eq	136c <read_referenced_name+0x154>  // b.none
    13dc:	mov	x4, x24
    13e0:	mov	x3, x23
    13e4:	mov	x2, x27
    13e8:	mov	x1, x20
    13ec:	mov	x0, x21
    13f0:	bl	1400 <read_referenced_name_from_attr.part.0>
    13f4:	cmp	x0, #0x0
    13f8:	csel	x19, x19, x0, eq  // eq = none
    13fc:	b	136c <read_referenced_name+0x154>

0000000000001400 <read_referenced_name_from_attr.part.0>:
    1400:	stp	x29, x30, [sp, #-64]!
    1404:	mov	x29, sp
    1408:	stp	x19, x20, [sp, #16]
    140c:	mov	x19, x2
    1410:	ldr	w2, [x2]
    1414:	stp	x21, x22, [sp, #32]
    1418:	mov	x20, x0
    141c:	mov	x21, x3
    1420:	mov	x22, x4
    1424:	cmp	w2, #0x6
    1428:	b.ne	148c <read_referenced_name_from_attr.part.0+0x8c>  // b.any
    142c:	ldp	x1, x2, [x20, #40]
    1430:	adrp	x4, 0 <is_highest_address>
    1434:	ldr	x0, [x19, #8]
    1438:	add	x4, x4, #0x0
    143c:	mov	x3, #0x8                   	// #8
    1440:	str	x0, [sp, #56]
    1444:	add	x0, sp, #0x38
    1448:	bl	0 <bsearch>
    144c:	cbz	x0, 145c <read_referenced_name_from_attr.part.0+0x5c>
    1450:	ldr	x1, [x0]
    1454:	cbnz	x1, 146c <read_referenced_name_from_attr.part.0+0x6c>
    1458:	mov	x0, #0x0                   	// #0
    145c:	ldp	x19, x20, [sp, #16]
    1460:	ldp	x21, x22, [sp, #32]
    1464:	ldp	x29, x30, [sp], #64
    1468:	ret
    146c:	ldr	x2, [x19, #8]
    1470:	mov	x4, x22
    1474:	ldr	x0, [x1, #24]
    1478:	mov	x3, x21
    147c:	sub	x2, x2, x0
    1480:	mov	x0, x20
    1484:	bl	1218 <read_referenced_name>
    1488:	b	145c <read_referenced_name_from_attr.part.0+0x5c>
    148c:	cmp	w2, #0x2
    1490:	ccmp	w2, #0x5, #0x4, ne  // ne = any
    1494:	b.ne	14a0 <read_referenced_name_from_attr.part.0+0xa0>  // b.any
    1498:	ldr	x2, [x19, #8]
    149c:	b	1484 <read_referenced_name_from_attr.part.0+0x84>
    14a0:	cmp	w2, #0x7
    14a4:	b.ne	1458 <read_referenced_name_from_attr.part.0+0x58>  // b.any
    14a8:	ldr	x0, [x0, #8]
    14ac:	adrp	x4, 0 <is_highest_address>
    14b0:	mov	x3, #0x8                   	// #8
    14b4:	add	x4, x4, #0x0
    14b8:	ldp	x1, x2, [x0, #40]
    14bc:	ldr	x0, [x19, #8]
    14c0:	str	x0, [sp, #56]
    14c4:	add	x0, sp, #0x38
    14c8:	bl	0 <bsearch>
    14cc:	cbz	x0, 145c <read_referenced_name_from_attr.part.0+0x5c>
    14d0:	ldr	x1, [x0]
    14d4:	cbz	x1, 1458 <read_referenced_name_from_attr.part.0+0x58>
    14d8:	ldr	x2, [x19, #8]
    14dc:	mov	x4, x22
    14e0:	ldr	x0, [x1, #24]
    14e4:	mov	x3, x21
    14e8:	sub	x2, x2, x0
    14ec:	ldr	x0, [x20, #8]
    14f0:	b	1484 <read_referenced_name_from_attr.part.0+0x84>

00000000000014f4 <read_function_entry>:
    14f4:	sub	sp, sp, #0x120
    14f8:	stp	x29, x30, [sp, #16]
    14fc:	add	x29, sp, #0x10
    1500:	stp	x19, x20, [sp, #32]
    1504:	mov	x20, x6
    1508:	stp	x21, x22, [sp, #48]
    150c:	mov	x22, x1
    1510:	mov	x21, x7
    1514:	stp	x23, x24, [sp, #64]
    1518:	mov	x23, x2
    151c:	stp	x25, x26, [sp, #80]
    1520:	mov	x26, x4
    1524:	mov	x25, x0
    1528:	stp	x27, x28, [sp, #96]
    152c:	add	x27, sp, #0xe0
    1530:	adrp	x0, 0 <is_highest_address>
    1534:	add	x0, x0, #0x0
    1538:	stp	x3, x5, [sp, #128]
    153c:	str	x0, [sp, #160]
    1540:	ldr	x0, [x26, #24]
    1544:	cbz	x0, 1558 <read_function_entry+0x64>
    1548:	mov	x0, x26
    154c:	bl	8dc <read_uleb128>
    1550:	mov	x1, x0
    1554:	cbnz	x0, 157c <read_function_entry+0x88>
    1558:	mov	w0, #0x1                   	// #1
    155c:	ldp	x29, x30, [sp, #16]
    1560:	ldp	x19, x20, [sp, #32]
    1564:	ldp	x21, x22, [sp, #48]
    1568:	ldp	x23, x24, [sp, #64]
    156c:	ldp	x25, x26, [sp, #80]
    1570:	ldp	x27, x28, [sp, #96]
    1574:	add	sp, sp, #0x120
    1578:	ret
    157c:	mov	x3, x21
    1580:	mov	x2, x20
    1584:	add	x0, x23, #0x58
    1588:	bl	4ac <lookup_abbrev>
    158c:	mov	x24, x0
    1590:	cbnz	x0, 159c <read_function_entry+0xa8>
    1594:	mov	w0, #0x0                   	// #0
    1598:	b	155c <read_function_entry+0x68>
    159c:	ldr	w0, [x0, #8]
    15a0:	cmp	w0, #0x2e
    15a4:	ccmp	w0, #0x3, #0x4, ne  // ne = any
    15a8:	b.eq	1ad0 <read_function_entry+0x5dc>  // b.none
    15ac:	cmp	w0, #0x1d
    15b0:	b.ne	1680 <read_function_entry+0x18c>  // b.any
    15b4:	ldr	x0, [sp, #296]
    15b8:	mov	x3, x21
    15bc:	mov	x2, x20
    15c0:	mov	x1, #0x28                  	// #40
    15c4:	str	x0, [sp, #120]
    15c8:	mov	x0, x25
    15cc:	bl	0 <__asan_backtrace_alloc>
    15d0:	mov	x19, x0
    15d4:	cbz	x0, 1594 <read_function_entry+0xa0>
    15d8:	mov	w28, #0x1                   	// #1
    15dc:	mov	x2, #0x28                  	// #40
    15e0:	mov	w1, #0x0                   	// #0
    15e4:	bl	0 <__asan_internal_memset>
    15e8:	mov	w9, #0x0                   	// #0
    15ec:	mov	x13, #0x0                   	// #0
    15f0:	mov	w12, #0x0                   	// #0
    15f4:	mov	x11, #0x0                   	// #0
    15f8:	mov	x14, #0x0                   	// #0
    15fc:	mov	x10, #0x0                   	// #0
    1600:	stp	wzr, wzr, [sp, #148]
    1604:	str	wzr, [sp, #216]
    1608:	ldr	x0, [x24, #16]
    160c:	cmp	x0, x10
    1610:	b.hi	1694 <read_function_entry+0x1a0>  // b.pmore
    1614:	cbz	w28, 163c <read_function_entry+0x148>
    1618:	ldr	x0, [x19]
    161c:	cbnz	x0, 18fc <read_function_entry+0x408>
    1620:	mov	w28, #0x0                   	// #0
    1624:	mov	x4, x21
    1628:	mov	x3, x20
    162c:	mov	x1, x19
    1630:	mov	x0, x25
    1634:	mov	x2, #0x28                  	// #40
    1638:	bl	0 <__asan_backtrace_free>
    163c:	ldr	w0, [x24, #12]
    1640:	cbz	w0, 1540 <read_function_entry+0x4c>
    1644:	cbnz	w28, 1a4c <read_function_entry+0x558>
    1648:	ldp	x3, x5, [sp, #128]
    164c:	mov	x7, x21
    1650:	ldr	x0, [sp, #296]
    1654:	str	x0, [sp, #8]
    1658:	ldr	x0, [sp, #288]
    165c:	str	x0, [sp]
    1660:	mov	x6, x20
    1664:	mov	x4, x26
    1668:	mov	x2, x23
    166c:	mov	x1, x22
    1670:	mov	x0, x25
    1674:	bl	14f4 <read_function_entry>
    1678:	cbnz	w0, 1540 <read_function_entry+0x4c>
    167c:	b	1594 <read_function_entry+0xa0>
    1680:	ldr	x0, [sp, #288]
    1684:	mov	w28, #0x0                   	// #0
    1688:	mov	x19, #0x0                   	// #0
    168c:	str	x0, [sp, #120]
    1690:	b	15e8 <read_function_entry+0xf4>
    1694:	ldr	x0, [x24, #24]
    1698:	lsl	x15, x10, #3
    169c:	ldp	w3, w2, [x23, #40]
    16a0:	mov	x1, x26
    16a4:	add	x0, x0, x10, lsl #3
    16a8:	ldr	w4, [x23, #48]
    16ac:	ldr	x7, [x22, #8]
    16b0:	stp	x10, x15, [sp, #168]
    16b4:	ldp	x5, x6, [x22, #104]
    16b8:	str	x27, [sp]
    16bc:	stp	x14, x11, [sp, #184]
    16c0:	ldr	w0, [x0, #4]
    16c4:	str	w12, [sp, #200]
    16c8:	str	x13, [sp, #208]
    16cc:	str	w9, [sp, #220]
    16d0:	bl	a60 <read_attribute>
    16d4:	cbz	w0, 1594 <read_function_entry+0xa0>
    16d8:	ldr	w0, [x24, #8]
    16dc:	ldr	w12, [sp, #200]
    16e0:	ldr	w9, [sp, #220]
    16e4:	cmp	w0, #0x11
    16e8:	ldp	x10, x15, [sp, #168]
    16ec:	ldp	x14, x11, [sp, #184]
    16f0:	ldr	x13, [sp, #208]
    16f4:	b.ne	171c <read_function_entry+0x228>  // b.any
    16f8:	ldr	x0, [x24, #24]
    16fc:	ldr	w0, [x0, x15]
    1700:	cmp	w0, #0x11
    1704:	b.ne	171c <read_function_entry+0x228>  // b.any
    1708:	ldr	w0, [sp, #224]
    170c:	cmp	w0, #0x1
    1710:	b.ne	171c <read_function_entry+0x228>  // b.any
    1714:	ldr	x0, [sp, #232]
    1718:	str	x0, [sp, #128]
    171c:	cbz	w28, 1754 <read_function_entry+0x260>
    1720:	ldr	x0, [x24, #24]
    1724:	add	x1, x0, x15
    1728:	ldr	w0, [x0, x15]
    172c:	cmp	w0, #0x55
    1730:	b.eq	18e0 <read_function_entry+0x3ec>  // b.none
    1734:	b.hi	17c4 <read_function_entry+0x2d0>  // b.pmore
    1738:	cmp	w0, #0x12
    173c:	b.eq	18b4 <read_function_entry+0x3c0>  // b.none
    1740:	b.hi	175c <read_function_entry+0x268>  // b.pmore
    1744:	cmp	w0, #0x3
    1748:	b.eq	187c <read_function_entry+0x388>  // b.none
    174c:	cmp	w0, #0x11
    1750:	b.eq	189c <read_function_entry+0x3a8>  // b.none
    1754:	add	x10, x10, #0x1
    1758:	b	1608 <read_function_entry+0x114>
    175c:	cmp	w0, #0x31
    1760:	b.eq	176c <read_function_entry+0x278>  // b.none
    1764:	cmp	w0, #0x47
    1768:	b.ne	1754 <read_function_entry+0x260>  // b.any
    176c:	cbnz	w9, 1754 <read_function_entry+0x260>
    1770:	ldr	w0, [x1, #4]
    1774:	cmp	w0, #0x20
    1778:	b.eq	17bc <read_function_entry+0x2c8>  // b.none
    177c:	mov	x4, x21
    1780:	mov	x3, x20
    1784:	mov	x2, x27
    1788:	mov	x1, x23
    178c:	mov	x0, x22
    1790:	stp	x10, x14, [sp, #168]
    1794:	str	x11, [sp, #184]
    1798:	str	w12, [sp, #192]
    179c:	str	x13, [sp, #200]
    17a0:	bl	1400 <read_referenced_name_from_attr.part.0>
    17a4:	ldr	w12, [sp, #192]
    17a8:	ldp	x10, x14, [sp, #168]
    17ac:	ldr	x11, [sp, #184]
    17b0:	ldr	x13, [sp, #200]
    17b4:	cbz	x0, 17bc <read_function_entry+0x2c8>
    17b8:	str	x0, [x19]
    17bc:	mov	w9, #0x0                   	// #0
    17c0:	b	1754 <read_function_entry+0x260>
    17c4:	cmp	w0, #0x59
    17c8:	b.eq	1864 <read_function_entry+0x370>  // b.none
    17cc:	b.hi	17f8 <read_function_entry+0x304>  // b.pmore
    17d0:	cmp	w0, #0x58
    17d4:	b.ne	1754 <read_function_entry+0x260>  // b.any
    17d8:	ldr	w0, [sp, #224]
    17dc:	cmp	w0, #0x2
    17e0:	b.ne	1754 <read_function_entry+0x260>  // b.any
    17e4:	ldr	x0, [sp, #232]
    17e8:	cbnz	x0, 1828 <read_function_entry+0x334>
    17ec:	ldr	x0, [sp, #160]
    17f0:	str	x0, [x19, #8]
    17f4:	b	1754 <read_function_entry+0x260>
    17f8:	cmp	w0, #0x6e
    17fc:	b.eq	180c <read_function_entry+0x318>  // b.none
    1800:	mov	w1, #0x2007                	// #8199
    1804:	cmp	w0, w1
    1808:	b.ne	1754 <read_function_entry+0x260>  // b.any
    180c:	ldr	w0, [sp, #224]
    1810:	cmp	w0, #0x4
    1814:	b.ne	1754 <read_function_entry+0x260>  // b.any
    1818:	ldr	x0, [sp, #232]
    181c:	mov	w9, w28
    1820:	str	x0, [x19]
    1824:	b	1754 <read_function_entry+0x260>
    1828:	ldr	x2, [sp, #136]
    182c:	sub	x1, x0, #0x1
    1830:	ldr	x2, [x2, #48]
    1834:	cmp	x1, x2
    1838:	b.cc	1850 <read_function_entry+0x35c>  // b.lo, b.ul, b.last
    183c:	mov	x0, x26
    1840:	adrp	x1, 0 <is_highest_address>
    1844:	add	x1, x1, #0x0
    1848:	bl	2e0 <dwarf_buf_error>
    184c:	b	1594 <read_function_entry+0xa0>
    1850:	ldr	x1, [sp, #136]
    1854:	ldr	x1, [x1, #56]
    1858:	add	x0, x1, x0, lsl #3
    185c:	ldur	x0, [x0, #-8]
    1860:	b	17f0 <read_function_entry+0x2fc>
    1864:	ldr	w0, [sp, #224]
    1868:	cmp	w0, #0x2
    186c:	b.ne	1754 <read_function_entry+0x260>  // b.any
    1870:	ldr	x0, [sp, #232]
    1874:	str	w0, [x19, #16]
    1878:	b	1754 <read_function_entry+0x260>
    187c:	ldr	x0, [x19]
    1880:	cbnz	x0, 1754 <read_function_entry+0x260>
    1884:	ldr	w0, [sp, #224]
    1888:	cmp	w0, #0x4
    188c:	b.ne	1754 <read_function_entry+0x260>  // b.any
    1890:	ldr	x0, [sp, #232]
    1894:	str	x0, [x19]
    1898:	b	1754 <read_function_entry+0x260>
    189c:	ldr	w0, [sp, #224]
    18a0:	cmp	w0, #0x1
    18a4:	b.ne	1754 <read_function_entry+0x260>  // b.any
    18a8:	str	w28, [sp, #152]
    18ac:	ldr	x14, [sp, #232]
    18b0:	b	1754 <read_function_entry+0x260>
    18b4:	ldr	w0, [sp, #224]
    18b8:	cmp	w0, #0x1
    18bc:	b.ne	18cc <read_function_entry+0x3d8>  // b.any
    18c0:	ldr	x11, [sp, #232]
    18c4:	mov	w12, w28
    18c8:	b	1754 <read_function_entry+0x260>
    18cc:	cmp	w0, #0x2
    18d0:	b.ne	1754 <read_function_entry+0x260>  // b.any
    18d4:	str	w28, [sp, #216]
    18d8:	ldr	x11, [sp, #232]
    18dc:	b	18c4 <read_function_entry+0x3d0>
    18e0:	ldr	w0, [sp, #224]
    18e4:	cmp	w0, #0x2
    18e8:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    18ec:	b.ne	1754 <read_function_entry+0x260>  // b.any
    18f0:	str	w28, [sp, #148]
    18f4:	ldr	x13, [sp, #232]
    18f8:	b	1754 <read_function_entry+0x260>
    18fc:	ldr	w0, [sp, #148]
    1900:	cbz	w0, 19ec <read_function_entry+0x4f8>
    1904:	ldr	x0, [x22, #96]
    1908:	cmp	x13, x0
    190c:	b.cc	1928 <read_function_entry+0x434>  // b.lo, b.ul, b.last
    1910:	mov	x0, x21
    1914:	mov	w2, #0x0                   	// #0
    1918:	adrp	x1, 0 <is_highest_address>
    191c:	add	x1, x1, #0x0
    1920:	blr	x20
    1924:	b	1594 <read_function_entry+0xa0>
    1928:	adrp	x1, 0 <is_highest_address>
    192c:	add	x1, x1, #0x0
    1930:	str	x1, [sp, #224]
    1934:	ldr	x1, [x22, #88]
    1938:	str	x1, [sp, #232]
    193c:	ldr	x28, [sp, #128]
    1940:	add	x1, x1, x13
    1944:	sub	x13, x0, x13
    1948:	ldr	w0, [x22, #120]
    194c:	stp	x1, x13, [sp, #240]
    1950:	str	w0, [sp, #256]
    1954:	stp	x20, x21, [sp, #264]
    1958:	str	wzr, [sp, #280]
    195c:	ldr	w0, [sp, #280]
    1960:	cbnz	w0, 1594 <read_function_entry+0xa0>
    1964:	ldr	w1, [x23, #48]
    1968:	mov	x0, x27
    196c:	bl	86c <read_address>
    1970:	mov	x3, x0
    1974:	ldr	w1, [x23, #48]
    1978:	mov	x0, x27
    197c:	str	x3, [sp, #152]
    1980:	bl	86c <read_address>
    1984:	mov	x4, x0
    1988:	ldr	x3, [sp, #152]
    198c:	orr	x0, x3, x0
    1990:	cbz	x0, 19dc <read_function_entry+0x4e8>
    1994:	ldr	w1, [x23, #48]
    1998:	mov	x0, x3
    199c:	bl	0 <is_highest_address>
    19a0:	ldr	x3, [sp, #152]
    19a4:	cbnz	w0, 19d4 <read_function_entry+0x4e0>
    19a8:	ldr	x1, [x22, #16]
    19ac:	mov	x6, x21
    19b0:	ldr	x7, [sp, #120]
    19b4:	mov	x5, x20
    19b8:	add	x4, x4, x28
    19bc:	add	x3, x3, x28
    19c0:	mov	x2, x19
    19c4:	mov	x0, x25
    19c8:	bl	61c <add_function_range.isra.0>
    19cc:	cbnz	w0, 195c <read_function_entry+0x468>
    19d0:	b	1594 <read_function_entry+0xa0>
    19d4:	mov	x28, x4
    19d8:	b	195c <read_function_entry+0x468>
    19dc:	ldr	w0, [sp, #280]
    19e0:	cbnz	w0, 1594 <read_function_entry+0xa0>
    19e4:	ldr	w28, [sp, #148]
    19e8:	b	163c <read_function_entry+0x148>
    19ec:	ldr	w0, [sp, #152]
    19f0:	ands	w28, w0, w12
    19f4:	b.eq	1a30 <read_function_entry+0x53c>  // b.none
    19f8:	ldr	w0, [sp, #216]
    19fc:	cbz	w0, 1a04 <read_function_entry+0x510>
    1a00:	add	x11, x11, x14
    1a04:	ldr	x1, [x22, #16]
    1a08:	mov	x6, x21
    1a0c:	ldr	x7, [sp, #120]
    1a10:	mov	x5, x20
    1a14:	mov	x4, x11
    1a18:	mov	x3, x14
    1a1c:	mov	x2, x19
    1a20:	mov	x0, x25
    1a24:	bl	61c <add_function_range.isra.0>
    1a28:	cbnz	w0, 163c <read_function_entry+0x148>
    1a2c:	b	1594 <read_function_entry+0xa0>
    1a30:	mov	x4, x21
    1a34:	mov	x3, x20
    1a38:	mov	x1, x19
    1a3c:	mov	x0, x25
    1a40:	mov	x2, #0x28                  	// #40
    1a44:	bl	0 <__asan_backtrace_free>
    1a48:	b	163c <read_function_entry+0x148>
    1a4c:	mov	x2, #0x20                  	// #32
    1a50:	mov	w1, #0x0                   	// #0
    1a54:	mov	x0, x27
    1a58:	bl	0 <__asan_internal_memset>
    1a5c:	ldp	x3, x5, [sp, #128]
    1a60:	mov	x7, x21
    1a64:	ldr	x0, [sp, #288]
    1a68:	stp	x0, x27, [sp]
    1a6c:	mov	x6, x20
    1a70:	mov	x4, x26
    1a74:	mov	x2, x23
    1a78:	mov	x1, x22
    1a7c:	mov	x0, x25
    1a80:	bl	14f4 <read_function_entry>
    1a84:	cbz	w0, 1594 <read_function_entry+0xa0>
    1a88:	ldr	x0, [sp, #248]
    1a8c:	cbz	x0, 1540 <read_function_entry+0x4c>
    1a90:	mov	x3, x21
    1a94:	mov	x2, x20
    1a98:	mov	x1, x27
    1a9c:	mov	x0, x25
    1aa0:	bl	0 <__asan_backtrace_vector_release>
    1aa4:	cbz	w0, 1594 <read_function_entry+0xa0>
    1aa8:	ldr	x1, [sp, #248]
    1aac:	adrp	x3, 0 <is_highest_address>
    1ab0:	ldr	x24, [sp, #224]
    1ab4:	add	x3, x3, #0x0
    1ab8:	mov	x2, #0x18                  	// #24
    1abc:	mov	x0, x24
    1ac0:	bl	0 <__asan_backtrace_qsort>
    1ac4:	ldr	x0, [sp, #248]
    1ac8:	stp	x24, x0, [x19, #24]
    1acc:	b	1540 <read_function_entry+0x4c>
    1ad0:	cmp	w0, #0x1d
    1ad4:	ldp	x1, x0, [sp, #288]
    1ad8:	csel	x0, x0, x1, eq  // eq = none
    1adc:	b	15b8 <read_function_entry+0xc4>

0000000000001ae0 <dwarf_lookup_pc>:
    1ae0:	sub	sp, sp, #0x1d0
    1ae4:	stp	x29, x30, [sp, #16]
    1ae8:	add	x29, sp, #0x10
    1aec:	str	x2, [sp, #232]
    1af0:	ldr	x2, [x1, #32]
    1af4:	stp	x19, x20, [sp, #32]
    1af8:	stp	x21, x22, [sp, #48]
    1afc:	mov	x21, x0
    1b00:	mov	w0, #0x1                   	// #1
    1b04:	stp	x23, x24, [sp, #64]
    1b08:	mov	x23, x1
    1b0c:	stp	x25, x26, [sp, #80]
    1b10:	stp	x27, x28, [sp, #96]
    1b14:	str	w0, [x6]
    1b18:	str	x3, [sp, #136]
    1b1c:	str	x6, [sp, #176]
    1b20:	cbz	x2, 1cc4 <dwarf_lookup_pc+0x1e4>
    1b24:	ldr	x1, [x1, #24]
    1b28:	add	x0, sp, #0xe8
    1b2c:	mov	x24, x4
    1b30:	mov	x22, x5
    1b34:	adrp	x4, 0 <is_highest_address>
    1b38:	mov	x3, #0x18                  	// #24
    1b3c:	add	x4, x4, #0x0
    1b40:	str	x0, [sp, #184]
    1b44:	bl	0 <bsearch>
    1b48:	mov	x20, x0
    1b4c:	cbz	x0, 1cc4 <dwarf_lookup_pc+0x1e4>
    1b50:	ldp	x2, x3, [x23, #24]
    1b54:	mov	x4, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    1b58:	ldr	x1, [sp, #232]
    1b5c:	movk	x4, #0xaaab
    1b60:	sub	x0, x20, x2
    1b64:	asr	x0, x0, #3
    1b68:	mul	x0, x0, x4
    1b6c:	add	x0, x0, #0x1
    1b70:	cmp	x0, x3
    1b74:	b.cs	1b90 <dwarf_lookup_pc+0xb0>  // b.hs, b.nlast
    1b78:	ldr	x0, [x20, #24]
    1b7c:	cmp	x0, x1
    1b80:	b.hi	1b90 <dwarf_lookup_pc+0xb0>  // b.pmore
    1b84:	ldr	x0, [x20, #32]
    1b88:	cmp	x1, x0
    1b8c:	b.cc	1cf0 <dwarf_lookup_pc+0x210>  // b.lo, b.ul, b.last
    1b90:	ldr	x0, [x20, #16]
    1b94:	ldr	w3, [x21, #8]
    1b98:	ldr	x1, [x0, #104]
    1b9c:	str	x0, [sp, #112]
    1ba0:	ldr	x0, [x23, #24]
    1ba4:	cmp	x0, x20
    1ba8:	b.cs	1bc8 <dwarf_lookup_pc+0xe8>  // b.hs, b.nlast
    1bac:	ldur	x2, [x20, #-24]
    1bb0:	ldr	x0, [sp, #232]
    1bb4:	cmp	x2, x0
    1bb8:	b.hi	1bc8 <dwarf_lookup_pc+0xe8>  // b.pmore
    1bbc:	ldur	x2, [x20, #-16]
    1bc0:	cmp	x0, x2
    1bc4:	b.cc	1cf8 <dwarf_lookup_pc+0x218>  // b.lo, b.ul, b.last
    1bc8:	ldr	w0, [x21, #8]
    1bcc:	cbz	w0, 1bdc <dwarf_lookup_pc+0xfc>
    1bd0:	ldr	x0, [sp, #112]
    1bd4:	add	x0, x0, #0x68
    1bd8:	ldar	x1, [x0]
    1bdc:	cbnz	x1, 27f0 <dwarf_lookup_pc+0xd10>
    1be0:	ldr	x0, [x20, #16]
    1be4:	mov	x2, #0x18                  	// #24
    1be8:	str	x0, [sp, #152]
    1bec:	add	x0, sp, #0xf0
    1bf0:	str	x0, [sp, #144]
    1bf4:	bl	0 <__asan_internal_memset>
    1bf8:	add	x0, sp, #0x110
    1bfc:	mov	x2, #0x40                  	// #64
    1c00:	mov	w1, #0x0                   	// #0
    1c04:	str	x0, [sp, #160]
    1c08:	str	xzr, [sp, #264]
    1c0c:	bl	0 <__asan_internal_memset>
    1c10:	ldr	x0, [sp, #152]
    1c14:	ldr	x2, [x0, #56]
    1c18:	ldr	x0, [x23, #80]
    1c1c:	cmp	x2, x0
    1c20:	b.cc	1d18 <dwarf_lookup_pc+0x238>  // b.lo, b.ul, b.last
    1c24:	adrp	x1, 0 <is_highest_address>
    1c28:	mov	x0, x22
    1c2c:	add	x1, x1, #0x0
    1c30:	mov	w2, #0x0                   	// #0
    1c34:	blr	x24
    1c38:	ldp	x1, x0, [sp, #248]
    1c3c:	mov	x3, x22
    1c40:	mov	x2, x24
    1c44:	mov	x19, #0x0                   	// #0
    1c48:	mov	x27, #0x0                   	// #0
    1c4c:	mov	x25, #0x0                   	// #0
    1c50:	add	x0, x0, x1
    1c54:	stp	xzr, x0, [sp, #248]
    1c58:	mov	x0, x21
    1c5c:	ldr	x1, [sp, #144]
    1c60:	bl	0 <__asan_backtrace_vector_release>
    1c64:	ldr	x1, [sp, #160]
    1c68:	mov	x0, x21
    1c6c:	mov	x3, x22
    1c70:	mov	x2, x24
    1c74:	bl	334 <free_line_header>
    1c78:	mov	x1, #0xffffffffffffffff    	// #-1
    1c7c:	mov	w0, #0x0                   	// #0
    1c80:	ldr	w2, [x21, #8]
    1c84:	cbnz	w2, 2624 <dwarf_lookup_pc+0xb44>
    1c88:	ldr	x2, [sp, #112]
    1c8c:	stp	x1, x27, [x2, #104]
    1c90:	stp	x19, x25, [x2, #120]
    1c94:	cmn	x1, #0x1
    1c98:	b.ne	2658 <dwarf_lookup_pc+0xb78>  // b.any
    1c9c:	cbz	w0, 27f8 <dwarf_lookup_pc+0xd18>
    1ca0:	ldr	x3, [sp, #136]
    1ca4:	mov	x5, x22
    1ca8:	ldr	x6, [sp, #176]
    1cac:	mov	x4, x24
    1cb0:	ldr	x2, [sp, #232]
    1cb4:	mov	x1, x23
    1cb8:	mov	x0, x21
    1cbc:	bl	1ae0 <dwarf_lookup_pc>
    1cc0:	b	1cd0 <dwarf_lookup_pc+0x1f0>
    1cc4:	ldr	x0, [sp, #176]
    1cc8:	str	wzr, [x0]
    1ccc:	mov	w0, #0x0                   	// #0
    1cd0:	ldp	x29, x30, [sp, #16]
    1cd4:	ldp	x19, x20, [sp, #32]
    1cd8:	ldp	x21, x22, [sp, #48]
    1cdc:	ldp	x23, x24, [sp, #64]
    1ce0:	ldp	x25, x26, [sp, #80]
    1ce4:	ldp	x27, x28, [sp, #96]
    1ce8:	add	sp, sp, #0x1d0
    1cec:	ret
    1cf0:	add	x20, x20, #0x18
    1cf4:	b	1b60 <dwarf_lookup_pc+0x80>
    1cf8:	cbz	w3, 1d08 <dwarf_lookup_pc+0x228>
    1cfc:	ldr	x0, [sp, #112]
    1d00:	add	x0, x0, #0x68
    1d04:	ldar	x1, [x0]
    1d08:	cmn	x1, #0x1
    1d0c:	b.ne	1bc8 <dwarf_lookup_pc+0xe8>  // b.any
    1d10:	sub	x20, x20, #0x18
    1d14:	b	1b90 <dwarf_lookup_pc+0xb0>
    1d18:	adrp	x1, 0 <is_highest_address>
    1d1c:	add	x1, x1, #0x0
    1d20:	str	x1, [sp, #336]
    1d24:	sub	x0, x0, x2
    1d28:	ldr	x1, [x23, #72]
    1d2c:	str	x1, [sp, #344]
    1d30:	add	x19, sp, #0x150
    1d34:	str	x0, [sp, #360]
    1d38:	add	x1, x1, x2
    1d3c:	ldr	w0, [x23, #120]
    1d40:	str	x1, [sp, #352]
    1d44:	str	w0, [sp, #368]
    1d48:	mov	x0, x19
    1d4c:	stp	x24, x22, [sp, #376]
    1d50:	str	wzr, [sp, #392]
    1d54:	bl	740 <read_uint32>
    1d58:	mov	x1, #0xffffffff            	// #4294967295
    1d5c:	mov	w2, w0
    1d60:	cmp	x1, w0, uxtw
    1d64:	b.ne	1dac <dwarf_lookup_pc+0x2cc>  // b.any
    1d68:	mov	x0, x19
    1d6c:	bl	784 <read_uint64>
    1d70:	mov	x2, x0
    1d74:	mov	w25, #0x1                   	// #1
    1d78:	mov	x0, x19
    1d7c:	str	x2, [sp, #360]
    1d80:	bl	7e8 <read_uint16>
    1d84:	and	w0, w0, #0xffff
    1d88:	str	w0, [sp, #272]
    1d8c:	sub	w0, w0, #0x2
    1d90:	cmp	w0, #0x2
    1d94:	b.ls	1db4 <dwarf_lookup_pc+0x2d4>  // b.plast
    1d98:	adrp	x1, 0 <is_highest_address>
    1d9c:	add	x1, x1, #0x0
    1da0:	mov	x0, x19
    1da4:	bl	2e0 <dwarf_buf_error>
    1da8:	b	1c38 <dwarf_lookup_pc+0x158>
    1dac:	mov	w25, #0x0                   	// #0
    1db0:	b	1d78 <dwarf_lookup_pc+0x298>
    1db4:	mov	w1, w25
    1db8:	mov	x0, x19
    1dbc:	bl	7c8 <read_offset>
    1dc0:	add	x25, sp, #0x190
    1dc4:	ldp	x2, x3, [sp, #336]
    1dc8:	stp	x2, x3, [sp, #400]
    1dcc:	mov	x1, x0
    1dd0:	ldp	x2, x3, [sp, #352]
    1dd4:	stp	x2, x3, [sp, #416]
    1dd8:	mov	x0, x19
    1ddc:	ldp	x2, x3, [sp, #368]
    1de0:	stp	x2, x3, [sp, #432]
    1de4:	ldp	x2, x3, [sp, #384]
    1de8:	str	x1, [sp, #424]
    1dec:	stp	x2, x3, [sp, #448]
    1df0:	bl	6d8 <advance>
    1df4:	cbz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1df8:	mov	x0, x25
    1dfc:	bl	838 <read_byte>
    1e00:	and	w0, w0, #0xff
    1e04:	str	w0, [sp, #276]
    1e08:	ldr	w0, [sp, #272]
    1e0c:	cmp	w0, #0x3
    1e10:	b.gt	1fec <dwarf_lookup_pc+0x50c>
    1e14:	mov	w0, #0x1                   	// #1
    1e18:	str	w0, [sp, #280]
    1e1c:	mov	x0, x25
    1e20:	bl	838 <read_byte>
    1e24:	mov	x0, x25
    1e28:	mov	x1, #0x1                   	// #1
    1e2c:	ldr	x26, [sp, #416]
    1e30:	bl	6d8 <advance>
    1e34:	cbz	w0, 1ffc <dwarf_lookup_pc+0x51c>
    1e38:	ldrb	w0, [x26]
    1e3c:	eor	w0, w0, #0xffffff80
    1e40:	sub	w0, w0, #0x80
    1e44:	sxtb	w0, w0
    1e48:	str	w0, [sp, #284]
    1e4c:	mov	x0, x25
    1e50:	bl	838 <read_byte>
    1e54:	and	w0, w0, #0xff
    1e58:	str	w0, [sp, #288]
    1e5c:	mov	x0, x25
    1e60:	bl	838 <read_byte>
    1e64:	and	w1, w0, #0xff
    1e68:	ldr	x0, [sp, #416]
    1e6c:	str	w1, [sp, #292]
    1e70:	sub	w1, w1, #0x1
    1e74:	str	x0, [sp, #296]
    1e78:	mov	x0, x25
    1e7c:	bl	6d8 <advance>
    1e80:	cbz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1e84:	ldp	x26, x27, [sp, #416]
    1e88:	str	xzr, [sp, #304]
    1e8c:	add	x27, x26, x27
    1e90:	cmp	x27, x26
    1e94:	b.ls	1ea0 <dwarf_lookup_pc+0x3c0>  // b.plast
    1e98:	ldrb	w0, [x26]
    1e9c:	cbnz	w0, 2004 <dwarf_lookup_pc+0x524>
    1ea0:	ldr	x1, [sp, #304]
    1ea4:	str	xzr, [sp, #312]
    1ea8:	cbnz	x1, 2028 <dwarf_lookup_pc+0x548>
    1eac:	mov	x26, #0x0                   	// #0
    1eb0:	ldr	x0, [sp, #416]
    1eb4:	ldrb	w0, [x0]
    1eb8:	cbnz	w0, 2044 <dwarf_lookup_pc+0x564>
    1ebc:	mov	x0, x25
    1ec0:	mov	x1, #0x1                   	// #1
    1ec4:	bl	6d8 <advance>
    1ec8:	cbz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1ecc:	ldp	x26, x27, [sp, #416]
    1ed0:	str	xzr, [sp, #320]
    1ed4:	add	x27, x26, x27
    1ed8:	cmp	x27, x26
    1edc:	b.ls	1ee8 <dwarf_lookup_pc+0x408>  // b.plast
    1ee0:	ldrb	w0, [x26]
    1ee4:	cbnz	w0, 2070 <dwarf_lookup_pc+0x590>
    1ee8:	ldp	x2, x3, [sp, #376]
    1eec:	mov	x0, x21
    1ef0:	ldr	x1, [sp, #320]
    1ef4:	lsl	x1, x1, #3
    1ef8:	bl	0 <__asan_backtrace_alloc>
    1efc:	str	x0, [sp, #328]
    1f00:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    1f04:	mov	x28, #0x0                   	// #0
    1f08:	ldr	x1, [sp, #416]
    1f0c:	ldr	w0, [sp, #456]
    1f10:	ldrb	w1, [x1]
    1f14:	cbnz	w1, 20e8 <dwarf_lookup_pc+0x608>
    1f18:	cbnz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1f1c:	ldr	x0, [sp, #320]
    1f20:	cbz	x0, 21e4 <dwarf_lookup_pc+0x704>
    1f24:	ldr	x0, [sp, #328]
    1f28:	ldr	x0, [x0]
    1f2c:	str	x0, [sp, #168]
    1f30:	mov	w0, #0x1                   	// #1
    1f34:	str	w0, [sp, #128]
    1f38:	ldr	x27, [sp, #168]
    1f3c:	adrp	x0, 0 <is_highest_address>
    1f40:	add	x0, x0, #0x0
    1f44:	mov	x26, #0x0                   	// #0
    1f48:	str	wzr, [sp, #120]
    1f4c:	str	x0, [sp, #200]
    1f50:	adrp	x0, 0 <is_highest_address>
    1f54:	add	x0, x0, #0x0
    1f58:	str	x0, [sp, #208]
    1f5c:	ldr	x0, [sp, #360]
    1f60:	cbnz	x0, 21f0 <dwarf_lookup_pc+0x710>
    1f64:	ldr	w0, [sp, #392]
    1f68:	cbnz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1f6c:	ldr	x0, [sp, #264]
    1f70:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    1f74:	ldr	x4, [sp, #144]
    1f78:	mov	x3, x22
    1f7c:	mov	x2, x24
    1f80:	mov	x0, x21
    1f84:	mov	x1, #0x18                  	// #24
    1f88:	bl	0 <__asan_backtrace_vector_grow>
    1f8c:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    1f90:	mov	x1, #0xffffffffffffffff    	// #-1
    1f94:	stp	x1, xzr, [x0]
    1f98:	mov	x3, x22
    1f9c:	ldr	x1, [sp, #144]
    1fa0:	str	xzr, [x0, #16]
    1fa4:	mov	x2, x24
    1fa8:	mov	x0, x21
    1fac:	bl	0 <__asan_backtrace_vector_release>
    1fb0:	cbz	w0, 1c38 <dwarf_lookup_pc+0x158>
    1fb4:	ldr	x0, [sp, #240]
    1fb8:	adrp	x3, 0 <is_highest_address>
    1fbc:	ldr	x1, [sp, #264]
    1fc0:	add	x3, x3, #0x0
    1fc4:	mov	x2, #0x18                  	// #24
    1fc8:	str	x0, [sp, #120]
    1fcc:	bl	0 <__asan_backtrace_qsort>
    1fd0:	ldr	w0, [x21, #8]
    1fd4:	ldr	x9, [x20, #16]
    1fd8:	ldr	x27, [sp, #264]
    1fdc:	cbnz	w0, 250c <dwarf_lookup_pc+0xa2c>
    1fe0:	add	x28, x23, #0x80
    1fe4:	mov	x26, x28
    1fe8:	b	252c <dwarf_lookup_pc+0xa4c>
    1fec:	mov	x0, x25
    1ff0:	bl	838 <read_byte>
    1ff4:	and	w0, w0, #0xff
    1ff8:	b	1e18 <dwarf_lookup_pc+0x338>
    1ffc:	mov	w0, #0x0                   	// #0
    2000:	b	1e48 <dwarf_lookup_pc+0x368>
    2004:	sub	x1, x27, x26
    2008:	mov	x0, x26
    200c:	bl	0 <__asan_internal_strnlen>
    2010:	add	x0, x0, #0x1
    2014:	add	x26, x26, x0
    2018:	ldr	x0, [sp, #304]
    201c:	add	x0, x0, #0x1
    2020:	str	x0, [sp, #304]
    2024:	b	1e90 <dwarf_lookup_pc+0x3b0>
    2028:	ldp	x2, x3, [sp, #376]
    202c:	lsl	x1, x1, #3
    2030:	mov	x0, x21
    2034:	bl	0 <__asan_backtrace_alloc>
    2038:	str	x0, [sp, #312]
    203c:	cbnz	x0, 1eac <dwarf_lookup_pc+0x3cc>
    2040:	b	1c38 <dwarf_lookup_pc+0x158>
    2044:	ldr	w0, [sp, #456]
    2048:	cbnz	w0, 1c38 <dwarf_lookup_pc+0x158>
    204c:	ldr	x27, [sp, #312]
    2050:	mov	x0, x25
    2054:	bl	a24 <read_string>
    2058:	str	x0, [x27, x26]
    205c:	ldr	x0, [sp, #312]
    2060:	ldr	x0, [x0, x26]
    2064:	add	x26, x26, #0x8
    2068:	cbnz	x0, 1eb0 <dwarf_lookup_pc+0x3d0>
    206c:	b	1c38 <dwarf_lookup_pc+0x158>
    2070:	sub	x1, x27, x26
    2074:	mov	x0, x26
    2078:	bl	0 <__asan_internal_strnlen>
    207c:	add	x2, x0, #0x1
    2080:	add	x0, x26, x0
    2084:	mov	x1, #0x1                   	// #1
    2088:	ldrsb	w3, [x0, x1]
    208c:	tbnz	w3, #31, 20d0 <dwarf_lookup_pc+0x5f0>
    2090:	add	x1, x2, x1
    2094:	mov	x0, #0x1                   	// #1
    2098:	add	x26, x26, x1
    209c:	sub	x2, x26, #0x1
    20a0:	ldrsb	w1, [x2, x0]
    20a4:	tbnz	w1, #31, 20d8 <dwarf_lookup_pc+0x5f8>
    20a8:	add	x26, x26, x0
    20ac:	mov	x0, #0x1                   	// #1
    20b0:	sub	x2, x26, #0x1
    20b4:	ldrsb	w1, [x2, x0]
    20b8:	tbnz	w1, #31, 20e0 <dwarf_lookup_pc+0x600>
    20bc:	add	x26, x26, x0
    20c0:	ldr	x0, [sp, #320]
    20c4:	add	x0, x0, #0x1
    20c8:	str	x0, [sp, #320]
    20cc:	b	1ed8 <dwarf_lookup_pc+0x3f8>
    20d0:	add	x1, x1, #0x1
    20d4:	b	2088 <dwarf_lookup_pc+0x5a8>
    20d8:	add	x0, x0, #0x1
    20dc:	b	20a0 <dwarf_lookup_pc+0x5c0>
    20e0:	add	x0, x0, #0x1
    20e4:	b	20b4 <dwarf_lookup_pc+0x5d4>
    20e8:	cbnz	w0, 1c38 <dwarf_lookup_pc+0x158>
    20ec:	mov	x0, x25
    20f0:	bl	a24 <read_string>
    20f4:	mov	x27, x0
    20f8:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    20fc:	mov	x0, x25
    2100:	bl	8dc <read_uleb128>
    2104:	ldrb	w1, [x27]
    2108:	cmp	w1, #0x2f
    210c:	b.eq	2120 <dwarf_lookup_pc+0x640>  // b.none
    2110:	cbnz	x0, 2140 <dwarf_lookup_pc+0x660>
    2114:	ldr	x0, [sp, #152]
    2118:	ldr	x4, [x0, #72]
    211c:	cbnz	x4, 215c <dwarf_lookup_pc+0x67c>
    2120:	ldr	x0, [sp, #328]
    2124:	str	x27, [x0, x28]
    2128:	mov	x0, x25
    212c:	bl	8dc <read_uleb128>
    2130:	mov	x0, x25
    2134:	add	x28, x28, #0x8
    2138:	bl	8dc <read_uleb128>
    213c:	b	1f08 <dwarf_lookup_pc+0x428>
    2140:	ldr	x2, [sp, #304]
    2144:	sub	x1, x0, #0x1
    2148:	cmp	x1, x2
    214c:	b.cs	21d8 <dwarf_lookup_pc+0x6f8>  // b.hs, b.nlast
    2150:	ldr	x1, [sp, #312]
    2154:	add	x0, x1, x0, lsl #3
    2158:	ldur	x4, [x0, #-8]
    215c:	mov	x0, x4
    2160:	str	x4, [sp, #168]
    2164:	bl	0 <__asan_internal_strlen>
    2168:	mov	x26, x0
    216c:	mov	x0, x27
    2170:	bl	0 <__asan_internal_strlen>
    2174:	add	x1, x26, x0
    2178:	ldp	x2, x3, [sp, #376]
    217c:	add	x1, x1, #0x2
    2180:	str	x0, [sp, #120]
    2184:	mov	x0, x21
    2188:	bl	0 <__asan_backtrace_alloc>
    218c:	str	x0, [sp, #128]
    2190:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    2194:	ldr	x4, [sp, #168]
    2198:	mov	x2, x26
    219c:	mov	x1, x4
    21a0:	bl	0 <__asan_internal_memcpy>
    21a4:	ldp	x1, x3, [sp, #120]
    21a8:	mov	w0, #0x2f                  	// #47
    21ac:	str	x3, [sp, #120]
    21b0:	strb	w0, [x3, x26]
    21b4:	add	x0, x26, #0x1
    21b8:	add	x2, x1, #0x1
    21bc:	add	x0, x3, x0
    21c0:	mov	x1, x27
    21c4:	bl	0 <__asan_internal_memcpy>
    21c8:	ldr	x0, [sp, #328]
    21cc:	ldr	x3, [sp, #120]
    21d0:	str	x3, [x0, x28]
    21d4:	b	2128 <dwarf_lookup_pc+0x648>
    21d8:	adrp	x1, 0 <is_highest_address>
    21dc:	add	x1, x1, #0x0
    21e0:	b	1da0 <dwarf_lookup_pc+0x2c0>
    21e4:	adrp	x0, 0 <is_highest_address>
    21e8:	add	x0, x0, #0x0
    21ec:	b	1f2c <dwarf_lookup_pc+0x44c>
    21f0:	mov	x0, x19
    21f4:	bl	838 <read_byte>
    21f8:	ldr	w2, [sp, #292]
    21fc:	and	w1, w0, #0xff
    2200:	cmp	w2, w0, uxtb
    2204:	b.hi	2274 <dwarf_lookup_pc+0x794>  // b.pmore
    2208:	ldr	w5, [sp, #288]
    220c:	sub	w1, w1, w2
    2210:	ldr	w0, [sp, #120]
    2214:	ldr	w3, [sp, #276]
    2218:	ldr	x7, [sp, #144]
    221c:	udiv	w2, w1, w5
    2220:	add	w4, w2, w0
    2224:	ldr	w0, [sp, #280]
    2228:	msub	w1, w2, w5, w1
    222c:	ldr	w2, [sp, #284]
    2230:	ldp	x5, x6, [sp, #376]
    2234:	mul	w3, w4, w3
    2238:	add	w1, w1, w2
    223c:	udiv	w3, w3, w0
    2240:	add	x26, x26, x3
    2244:	udiv	w3, w4, w0
    2248:	msub	w0, w3, w0, w4
    224c:	str	w0, [sp, #120]
    2250:	ldr	w0, [sp, #128]
    2254:	add	w4, w0, w1
    2258:	str	w4, [sp, #128]
    225c:	mov	x3, x27
    2260:	mov	x2, x26
    2264:	add	x1, x23, #0x10
    2268:	mov	x0, x21
    226c:	bl	560 <add_line.isra.0>
    2270:	b	1f5c <dwarf_lookup_pc+0x47c>
    2274:	cbnz	w1, 23c8 <dwarf_lookup_pc+0x8e8>
    2278:	mov	x0, x19
    227c:	bl	8dc <read_uleb128>
    2280:	mov	x28, x0
    2284:	mov	x0, x19
    2288:	bl	838 <read_byte>
    228c:	and	w2, w0, #0xff
    2290:	sub	w2, w2, #0x1
    2294:	cmp	w2, #0x3
    2298:	b.hi	23b4 <dwarf_lookup_pc+0x8d4>  // b.pmore
    229c:	adrp	x0, 0 <is_highest_address>
    22a0:	add	x0, x0, #0x0
    22a4:	ldrh	w0, [x0, w2, uxtw #1]
    22a8:	adr	x1, 22b4 <dwarf_lookup_pc+0x7d4>
    22ac:	add	x0, x1, w0, sxth #2
    22b0:	br	x0
    22b4:	ldr	x0, [sp, #152]
    22b8:	ldr	w1, [x0, #48]
    22bc:	mov	x0, x19
    22c0:	bl	86c <read_address>
    22c4:	mov	x26, x0
    22c8:	b	1f5c <dwarf_lookup_pc+0x47c>
    22cc:	mov	x0, x19
    22d0:	bl	a24 <read_string>
    22d4:	mov	x27, x0
    22d8:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    22dc:	mov	x0, x19
    22e0:	bl	8dc <read_uleb128>
    22e4:	mov	x28, x0
    22e8:	mov	x0, x19
    22ec:	bl	8dc <read_uleb128>
    22f0:	mov	x0, x19
    22f4:	bl	8dc <read_uleb128>
    22f8:	ldrb	w0, [x27]
    22fc:	cmp	w0, #0x2f
    2300:	b.eq	1f5c <dwarf_lookup_pc+0x47c>  // b.none
    2304:	cbnz	w28, 238c <dwarf_lookup_pc+0x8ac>
    2308:	ldr	x0, [sp, #152]
    230c:	ldr	x4, [x0, #72]
    2310:	mov	x0, x4
    2314:	str	x4, [sp, #224]
    2318:	bl	0 <__asan_internal_strlen>
    231c:	mov	x28, x0
    2320:	mov	x0, x27
    2324:	bl	0 <__asan_internal_strlen>
    2328:	add	x1, x28, x0
    232c:	ldp	x2, x3, [sp, #376]
    2330:	add	x1, x1, #0x2
    2334:	str	x0, [sp, #192]
    2338:	mov	x0, x21
    233c:	bl	0 <__asan_backtrace_alloc>
    2340:	str	x0, [sp, #216]
    2344:	cbz	x0, 1c38 <dwarf_lookup_pc+0x158>
    2348:	ldr	x4, [sp, #224]
    234c:	mov	x2, x28
    2350:	mov	x1, x4
    2354:	bl	0 <__asan_internal_memcpy>
    2358:	ldr	x3, [sp, #216]
    235c:	mov	w0, #0x2f                  	// #47
    2360:	ldr	x1, [sp, #192]
    2364:	str	x3, [sp, #192]
    2368:	strb	w0, [x3, x28]
    236c:	add	x0, x28, #0x1
    2370:	add	x2, x1, #0x1
    2374:	add	x0, x3, x0
    2378:	mov	x1, x27
    237c:	bl	0 <__asan_internal_memcpy>
    2380:	ldr	x3, [sp, #192]
    2384:	mov	x27, x3
    2388:	b	1f5c <dwarf_lookup_pc+0x47c>
    238c:	ldr	x0, [sp, #304]
    2390:	sub	w28, w28, #0x1
    2394:	cmp	x28, x0
    2398:	b.cs	23a8 <dwarf_lookup_pc+0x8c8>  // b.hs, b.nlast
    239c:	ldr	x0, [sp, #312]
    23a0:	ldr	x4, [x0, x28, lsl #3]
    23a4:	b	2310 <dwarf_lookup_pc+0x830>
    23a8:	adrp	x1, 0 <is_highest_address>
    23ac:	add	x1, x1, #0x0
    23b0:	b	1da0 <dwarf_lookup_pc+0x2c0>
    23b4:	sub	x1, x28, #0x1
    23b8:	mov	x0, x19
    23bc:	bl	6d8 <advance>
    23c0:	cbnz	w0, 1f5c <dwarf_lookup_pc+0x47c>
    23c4:	b	1c38 <dwarf_lookup_pc+0x158>
    23c8:	sub	w1, w1, #0x1
    23cc:	cmp	w1, #0xb
    23d0:	b.hi	24d0 <dwarf_lookup_pc+0x9f0>  // b.pmore
    23d4:	ldr	x0, [sp, #200]
    23d8:	ldrh	w0, [x0, w1, uxtw #1]
    23dc:	adr	x1, 23e8 <dwarf_lookup_pc+0x908>
    23e0:	add	x0, x1, w0, sxth #2
    23e4:	br	x0
    23e8:	ldr	w4, [sp, #128]
    23ec:	ldr	x7, [sp, #144]
    23f0:	ldp	x5, x6, [sp, #376]
    23f4:	b	225c <dwarf_lookup_pc+0x77c>
    23f8:	mov	x0, x19
    23fc:	bl	8dc <read_uleb128>
    2400:	ldr	w1, [sp, #120]
    2404:	ldr	w2, [sp, #280]
    2408:	add	x0, x0, w1, uxtw
    240c:	ldr	w1, [sp, #276]
    2410:	mul	x1, x1, x0
    2414:	udiv	x1, x1, x2
    2418:	add	x26, x26, x1
    241c:	udiv	x1, x0, x2
    2420:	msub	w0, w1, w2, w0
    2424:	str	w0, [sp, #120]
    2428:	b	1f5c <dwarf_lookup_pc+0x47c>
    242c:	mov	x0, x19
    2430:	bl	974 <read_sleb128>
    2434:	ldr	w1, [sp, #128]
    2438:	add	w0, w1, w0
    243c:	str	w0, [sp, #128]
    2440:	b	1f5c <dwarf_lookup_pc+0x47c>
    2444:	mov	x0, x19
    2448:	bl	8dc <read_uleb128>
    244c:	cbz	x0, 2504 <dwarf_lookup_pc+0xa24>
    2450:	ldr	x2, [sp, #320]
    2454:	sub	x1, x0, #0x1
    2458:	cmp	x1, x2
    245c:	b.cc	246c <dwarf_lookup_pc+0x98c>  // b.lo, b.ul, b.last
    2460:	adrp	x1, 0 <is_highest_address>
    2464:	add	x1, x1, #0x0
    2468:	b	1da0 <dwarf_lookup_pc+0x2c0>
    246c:	ldr	x1, [sp, #328]
    2470:	add	x0, x1, x0, lsl #3
    2474:	ldur	x27, [x0, #-8]
    2478:	b	1f5c <dwarf_lookup_pc+0x47c>
    247c:	ldr	w1, [sp, #288]
    2480:	mov	w0, #0xff                  	// #255
    2484:	sub	w0, w0, w2
    2488:	ldr	w2, [sp, #280]
    248c:	udiv	w0, w0, w1
    2490:	ldr	w1, [sp, #120]
    2494:	add	w0, w0, w1
    2498:	ldr	w1, [sp, #276]
    249c:	mul	w1, w0, w1
    24a0:	udiv	w1, w1, w2
    24a4:	add	x26, x26, x1
    24a8:	udiv	w1, w0, w2
    24ac:	b	2420 <dwarf_lookup_pc+0x940>
    24b0:	mov	x0, x19
    24b4:	bl	7e8 <read_uint16>
    24b8:	add	x26, x26, w0, uxth
    24bc:	str	wzr, [sp, #120]
    24c0:	b	1f5c <dwarf_lookup_pc+0x47c>
    24c4:	mov	x0, x19
    24c8:	bl	8dc <read_uleb128>
    24cc:	b	1f5c <dwarf_lookup_pc+0x47c>
    24d0:	ldr	x0, [sp, #296]
    24d4:	ldrb	w28, [x0, w1, uxtw]
    24d8:	cbz	w28, 1f5c <dwarf_lookup_pc+0x47c>
    24dc:	mov	x0, x19
    24e0:	sub	w28, w28, #0x1
    24e4:	bl	8dc <read_uleb128>
    24e8:	b	24d8 <dwarf_lookup_pc+0x9f8>
    24ec:	mov	w0, #0x1                   	// #1
    24f0:	mov	x26, #0x0                   	// #0
    24f4:	str	wzr, [sp, #120]
    24f8:	str	w0, [sp, #128]
    24fc:	ldr	x27, [sp, #168]
    2500:	b	1f5c <dwarf_lookup_pc+0x47c>
    2504:	ldr	x27, [sp, #208]
    2508:	b	1f5c <dwarf_lookup_pc+0x47c>
    250c:	mov	x0, x19
    2510:	mov	x2, #0x20                  	// #32
    2514:	mov	w1, #0x0                   	// #0
    2518:	str	x9, [sp, #128]
    251c:	bl	0 <__asan_internal_memset>
    2520:	mov	x28, x19
    2524:	ldr	x9, [sp, #128]
    2528:	mov	x26, #0x0                   	// #0
    252c:	adrp	x0, 0 <is_highest_address>
    2530:	add	x0, x0, #0x0
    2534:	str	x0, [sp, #400]
    2538:	ldr	x0, [x23, #56]
    253c:	str	x0, [sp, #408]
    2540:	ldr	x0, [x9]
    2544:	str	x0, [sp, #416]
    2548:	ldr	x0, [x9, #8]
    254c:	str	x0, [sp, #424]
    2550:	ldr	w0, [x23, #120]
    2554:	str	w0, [sp, #432]
    2558:	stp	x24, x22, [sp, #440]
    255c:	str	wzr, [sp, #456]
    2560:	ldr	x0, [sp, #424]
    2564:	cbnz	x0, 25c8 <dwarf_lookup_pc+0xae8>
    2568:	ldr	x25, [x28, #24]
    256c:	cbz	x25, 25fc <dwarf_lookup_pc+0xb1c>
    2570:	mov	x3, x22
    2574:	mov	x2, x24
    2578:	cbnz	x26, 2608 <dwarf_lookup_pc+0xb28>
    257c:	mov	x1, x19
    2580:	mov	x0, x21
    2584:	bl	0 <__asan_backtrace_vector_release>
    2588:	cbz	w0, 25fc <dwarf_lookup_pc+0xb1c>
    258c:	ldr	x19, [x28]
    2590:	adrp	x3, 0 <is_highest_address>
    2594:	mov	x1, x25
    2598:	add	x3, x3, #0x0
    259c:	mov	x0, x19
    25a0:	mov	x2, #0x18                  	// #24
    25a4:	bl	0 <__asan_backtrace_qsort>
    25a8:	ldr	x1, [sp, #160]
    25ac:	mov	x0, x21
    25b0:	mov	x3, x22
    25b4:	mov	x2, x24
    25b8:	bl	334 <free_line_header>
    25bc:	mov	w0, #0x1                   	// #1
    25c0:	ldr	x1, [sp, #120]
    25c4:	b	1c80 <dwarf_lookup_pc+0x1a0>
    25c8:	ldr	x5, [sp, #160]
    25cc:	stp	x28, x28, [sp]
    25d0:	mov	x2, x9
    25d4:	mov	x7, x22
    25d8:	mov	x6, x24
    25dc:	mov	x4, x25
    25e0:	mov	x1, x23
    25e4:	mov	x0, x21
    25e8:	mov	x3, #0x0                   	// #0
    25ec:	str	x9, [sp, #128]
    25f0:	bl	14f4 <read_function_entry>
    25f4:	ldr	x9, [sp, #128]
    25f8:	cbnz	w0, 2560 <dwarf_lookup_pc+0xa80>
    25fc:	mov	x25, #0x0                   	// #0
    2600:	mov	x19, #0x0                   	// #0
    2604:	b	25a8 <dwarf_lookup_pc+0xac8>
    2608:	mov	x1, x26
    260c:	mov	x0, x21
    2610:	bl	0 <__asan_backtrace_vector_finish>
    2614:	mov	x19, x0
    2618:	cbz	x0, 25fc <dwarf_lookup_pc+0xb1c>
    261c:	str	xzr, [x26, #24]
    2620:	b	2590 <dwarf_lookup_pc+0xab0>
    2624:	ldr	x2, [sp, #112]
    2628:	add	x2, x2, #0x70
    262c:	stlr	x27, [x2]
    2630:	ldr	x2, [sp, #112]
    2634:	add	x2, x2, #0x78
    2638:	stlr	x19, [x2]
    263c:	ldr	x2, [sp, #112]
    2640:	add	x2, x2, #0x80
    2644:	stlr	x25, [x2]
    2648:	ldr	x2, [sp, #112]
    264c:	add	x2, x2, #0x68
    2650:	stlr	x1, [x2]
    2654:	b	1c94 <dwarf_lookup_pc+0x1b4>
    2658:	ldr	x0, [x20, #16]
    265c:	adrp	x4, 0 <is_highest_address>
    2660:	mov	x3, #0x18                  	// #24
    2664:	add	x4, x4, #0x0
    2668:	ldr	x2, [x0, #112]
    266c:	ldr	x0, [sp, #184]
    2670:	bl	0 <bsearch>
    2674:	mov	x19, x0
    2678:	ldr	x0, [x20, #16]
    267c:	cbnz	x19, 272c <dwarf_lookup_pc+0xc4c>
    2680:	ldr	x1, [x0, #80]
    2684:	cbnz	x1, 2718 <dwarf_lookup_pc+0xc38>
    2688:	ldr	x25, [x0, #64]
    268c:	cbz	x25, 2710 <dwarf_lookup_pc+0xc30>
    2690:	ldrb	w1, [x25]
    2694:	cmp	w1, #0x2f
    2698:	b.eq	2710 <dwarf_lookup_pc+0xc30>  // b.none
    269c:	ldr	x0, [x0, #72]
    26a0:	cbz	x0, 2710 <dwarf_lookup_pc+0xc30>
    26a4:	mov	x0, x25
    26a8:	bl	0 <__asan_internal_strlen>
    26ac:	mov	x23, x0
    26b0:	ldr	x0, [x20, #16]
    26b4:	ldr	x26, [x0, #72]
    26b8:	mov	x0, x26
    26bc:	bl	0 <__asan_internal_strlen>
    26c0:	add	x1, x23, x0
    26c4:	mov	x19, x0
    26c8:	mov	x3, x22
    26cc:	mov	x0, x21
    26d0:	mov	x2, x24
    26d4:	add	x1, x1, #0x2
    26d8:	bl	0 <__asan_backtrace_alloc>
    26dc:	mov	x21, x0
    26e0:	cbz	x0, 1cc4 <dwarf_lookup_pc+0x1e4>
    26e4:	mov	x2, x19
    26e8:	mov	x1, x26
    26ec:	bl	0 <__asan_internal_memcpy>
    26f0:	mov	x1, x25
    26f4:	mov	x25, x21
    26f8:	mov	w0, #0x2f                  	// #47
    26fc:	strb	w0, [x21, x19]
    2700:	add	x19, x19, #0x1
    2704:	add	x2, x23, #0x1
    2708:	add	x0, x21, x19
    270c:	bl	0 <__asan_internal_memcpy>
    2710:	ldr	x0, [x20, #16]
    2714:	str	x25, [x0, #80]
    2718:	ldr	x0, [x20, #16]
    271c:	mov	x4, #0x0                   	// #0
    2720:	mov	w3, #0x0                   	// #0
    2724:	ldr	x2, [x0, #80]
    2728:	b	2804 <dwarf_lookup_pc+0xd24>
    272c:	ldr	x2, [x0, #128]
    2730:	cbnz	x2, 2744 <dwarf_lookup_pc+0xc64>
    2734:	ldr	w3, [x19, #16]
    2738:	mov	x4, #0x0                   	// #0
    273c:	ldr	x2, [x19, #8]
    2740:	b	2804 <dwarf_lookup_pc+0xd24>
    2744:	ldr	x1, [x0, #120]
    2748:	adrp	x4, 0 <is_highest_address>
    274c:	ldr	x0, [sp, #184]
    2750:	add	x4, x4, #0x0
    2754:	mov	x3, #0x18                  	// #24
    2758:	bl	0 <bsearch>
    275c:	mov	x1, x0
    2760:	cbz	x0, 2734 <dwarf_lookup_pc+0xc54>
    2764:	ldr	x0, [x20, #16]
    2768:	mov	x5, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    276c:	movk	x5, #0xaaab
    2770:	ldp	x3, x4, [x0, #120]
    2774:	ldr	x0, [sp, #232]
    2778:	sub	x2, x1, x3
    277c:	asr	x2, x2, #3
    2780:	mul	x2, x2, x5
    2784:	add	x2, x2, #0x1
    2788:	cmp	x2, x4
    278c:	b.cs	27a8 <dwarf_lookup_pc+0xcc8>  // b.hs, b.nlast
    2790:	ldr	x2, [x1, #24]
    2794:	cmp	x2, x0
    2798:	b.hi	27a8 <dwarf_lookup_pc+0xcc8>  // b.pmore
    279c:	ldr	x2, [x1, #32]
    27a0:	cmp	x0, x2
    27a4:	b.cc	27e8 <dwarf_lookup_pc+0xd08>  // b.lo, b.ul, b.last
    27a8:	ldr	x2, [sp, #136]
    27ac:	add	x5, sp, #0x150
    27b0:	ldr	x20, [x1, #16]
    27b4:	add	x4, sp, #0x190
    27b8:	ldr	x1, [x19, #8]
    27bc:	str	x1, [sp, #400]
    27c0:	ldr	w1, [x19, #16]
    27c4:	mov	x3, x22
    27c8:	str	w1, [sp, #336]
    27cc:	mov	x1, x20
    27d0:	bl	110 <report_inlined_functions>
    27d4:	cbnz	w0, 1cd0 <dwarf_lookup_pc+0x1f0>
    27d8:	ldr	w3, [sp, #336]
    27dc:	ldr	x4, [x20]
    27e0:	ldr	x2, [sp, #400]
    27e4:	b	2804 <dwarf_lookup_pc+0xd24>
    27e8:	add	x1, x1, #0x18
    27ec:	b	2778 <dwarf_lookup_pc+0xc98>
    27f0:	cmn	x1, #0x1
    27f4:	b.ne	2658 <dwarf_lookup_pc+0xb78>  // b.any
    27f8:	mov	x4, #0x0                   	// #0
    27fc:	mov	w3, #0x0                   	// #0
    2800:	mov	x2, #0x0                   	// #0
    2804:	ldr	x5, [sp, #136]
    2808:	mov	x0, x22
    280c:	ldr	x1, [sp, #232]
    2810:	blr	x5
    2814:	b	1cd0 <dwarf_lookup_pc+0x1f0>

0000000000002818 <dwarf_fileline>:
    2818:	stp	x29, x30, [sp, #-96]!
    281c:	mov	x29, sp
    2820:	stp	x19, x20, [sp, #16]
    2824:	mov	x19, x0
    2828:	ldr	w0, [x0, #8]
    282c:	stp	x21, x22, [sp, #32]
    2830:	mov	x21, x2
    2834:	mov	x22, x4
    2838:	stp	x23, x24, [sp, #48]
    283c:	mov	x23, x1
    2840:	mov	x24, x3
    2844:	str	x25, [sp, #64]
    2848:	cbnz	w0, 28c4 <dwarf_fileline+0xac>
    284c:	ldr	x20, [x19, #32]
    2850:	add	x25, sp, #0x5c
    2854:	cbnz	x20, 2874 <dwarf_fileline+0x5c>
    2858:	mov	x1, x23
    285c:	mov	x0, x22
    2860:	mov	x4, #0x0                   	// #0
    2864:	mov	w3, #0x0                   	// #0
    2868:	mov	x2, #0x0                   	// #0
    286c:	blr	x21
    2870:	b	28a4 <dwarf_fileline+0x8c>
    2874:	mov	x6, x25
    2878:	mov	x5, x22
    287c:	mov	x4, x24
    2880:	mov	x3, x21
    2884:	mov	x2, x23
    2888:	mov	x1, x20
    288c:	mov	x0, x19
    2890:	bl	1ae0 <dwarf_lookup_pc>
    2894:	cbnz	w0, 28a4 <dwarf_fileline+0x8c>
    2898:	ldr	w0, [sp, #92]
    289c:	cbz	w0, 28bc <dwarf_fileline+0xa4>
    28a0:	mov	w0, #0x0                   	// #0
    28a4:	ldp	x19, x20, [sp, #16]
    28a8:	ldp	x21, x22, [sp, #32]
    28ac:	ldp	x23, x24, [sp, #48]
    28b0:	ldr	x25, [sp, #64]
    28b4:	ldp	x29, x30, [sp], #96
    28b8:	ret
    28bc:	ldr	x20, [x20]
    28c0:	b	2854 <dwarf_fileline+0x3c>
    28c4:	add	x20, x19, #0x20
    28c8:	add	x25, sp, #0x5c
    28cc:	ldar	x20, [x20]
    28d0:	cbz	x20, 2858 <dwarf_fileline+0x40>
    28d4:	mov	x6, x25
    28d8:	mov	x5, x22
    28dc:	mov	x4, x24
    28e0:	mov	x3, x21
    28e4:	mov	x2, x23
    28e8:	mov	x1, x20
    28ec:	mov	x0, x19
    28f0:	bl	1ae0 <dwarf_lookup_pc>
    28f4:	cbnz	w0, 28a4 <dwarf_fileline+0x8c>
    28f8:	ldr	w0, [sp, #92]
    28fc:	cbz	w0, 28cc <dwarf_fileline+0xb4>
    2900:	b	28a0 <dwarf_fileline+0x88>

0000000000002904 <__asan_backtrace_dwarf_add>:
    2904:	sub	sp, sp, #0x290
    2908:	stp	x29, x30, [sp, #48]
    290c:	add	x29, sp, #0x30
    2910:	stp	x19, x20, [sp, #64]
    2914:	mov	x20, x0
    2918:	add	x0, sp, #0x150
    291c:	stp	x21, x22, [sp, #80]
    2920:	add	x19, sp, #0x138
    2924:	add	x21, sp, #0x250
    2928:	stp	x23, x24, [sp, #96]
    292c:	add	x24, sp, #0x1d0
    2930:	stp	x25, x26, [sp, #112]
    2934:	add	x25, sp, #0x190
    2938:	stp	x27, x28, [sp, #128]
    293c:	str	x2, [sp, #176]
    2940:	mov	x2, #0x18                  	// #24
    2944:	stp	x1, x3, [sp, #192]
    2948:	mov	w1, #0x0                   	// #0
    294c:	stp	x6, x7, [sp, #208]
    2950:	stp	x4, x5, [sp, #256]
    2954:	ldr	x22, [sp, #704]
    2958:	ldr	x23, [sp, #712]
    295c:	bl	0 <__asan_internal_memset>
    2960:	mov	x2, #0x18                  	// #24
    2964:	mov	w1, #0x0                   	// #0
    2968:	add	x0, sp, #0x170
    296c:	bl	0 <__asan_internal_memset>
    2970:	adrp	x0, 0 <is_highest_address>
    2974:	add	x0, x0, #0x0
    2978:	stp	xzr, x0, [sp, #392]
    297c:	mov	x2, #0x18                  	// #24
    2980:	mov	w1, #0x0                   	// #0
    2984:	ldr	x0, [sp, #176]
    2988:	stp	x0, x0, [sp, #408]
    298c:	ldr	x0, [sp, #200]
    2990:	str	x0, [sp, #424]
    2994:	ldr	w0, [sp, #688]
    2998:	str	xzr, [sp, #360]
    299c:	str	w0, [sp, #432]
    29a0:	mov	x0, x19
    29a4:	stp	x22, x23, [sp, #440]
    29a8:	str	wzr, [sp, #456]
    29ac:	bl	0 <__asan_internal_memset>
    29b0:	stp	xzr, xzr, [sp, #144]
    29b4:	str	x19, [sp, #272]
    29b8:	ldr	x0, [sp, #424]
    29bc:	ldr	w26, [sp, #456]
    29c0:	cbnz	x0, 2a20 <__asan_backtrace_dwarf_add+0x11c>
    29c4:	cbnz	w26, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    29c8:	add	x0, sp, #0x200
    29cc:	mov	x3, x23
    29d0:	mov	x2, x22
    29d4:	ldp	x0, x1, [x0, #-200]
    29d8:	stp	x0, x1, [sp, #368]
    29dc:	ldr	x0, [sp, #328]
    29e0:	str	x0, [sp, #384]
    29e4:	ldr	x0, [sp, #144]
    29e8:	add	x1, sp, #0x150
    29ec:	str	x0, [sp, #392]
    29f0:	mov	x0, x20
    29f4:	bl	0 <__asan_backtrace_vector_release>
    29f8:	cbnz	w0, 2f04 <__asan_backtrace_dwarf_add+0x600>
    29fc:	mov	w0, #0x0                   	// #0
    2a00:	ldp	x29, x30, [sp, #48]
    2a04:	ldp	x19, x20, [sp, #64]
    2a08:	ldp	x21, x22, [sp, #80]
    2a0c:	ldp	x23, x24, [sp, #96]
    2a10:	ldp	x25, x26, [sp, #112]
    2a14:	ldp	x27, x28, [sp, #128]
    2a18:	add	sp, sp, #0x290
    2a1c:	ret
    2a20:	cbnz	w26, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2a24:	ldr	x0, [sp, #416]
    2a28:	str	x0, [sp, #224]
    2a2c:	mov	x0, x25
    2a30:	bl	740 <read_uint32>
    2a34:	mov	w1, w0
    2a38:	str	x1, [sp, #160]
    2a3c:	mov	x1, #0xffffffff            	// #4294967295
    2a40:	cmp	x1, w0, uxtw
    2a44:	b.ne	2a58 <__asan_backtrace_dwarf_add+0x154>  // b.any
    2a48:	mov	x0, x25
    2a4c:	mov	w26, #0x1                   	// #1
    2a50:	bl	784 <read_uint64>
    2a54:	str	x0, [sp, #160]
    2a58:	ldp	x0, x1, [x25]
    2a5c:	stp	x0, x1, [x24]
    2a60:	ldp	x0, x1, [x25, #16]
    2a64:	stp	x0, x1, [x24, #16]
    2a68:	ldp	x0, x1, [x25, #32]
    2a6c:	stp	x0, x1, [x24, #32]
    2a70:	ldp	x0, x1, [x25, #48]
    2a74:	stp	x0, x1, [x24, #48]
    2a78:	ldr	x0, [sp, #160]
    2a7c:	str	x0, [sp, #488]
    2a80:	mov	x1, x0
    2a84:	mov	x0, x25
    2a88:	bl	6d8 <advance>
    2a8c:	cbz	w0, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2a90:	mov	x0, x24
    2a94:	bl	7e8 <read_uint16>
    2a98:	and	w0, w0, #0xffff
    2a9c:	str	w0, [sp, #248]
    2aa0:	sub	w0, w0, #0x2
    2aa4:	cmp	w0, #0x2
    2aa8:	b.ls	2b58 <__asan_backtrace_dwarf_add+0x254>  // b.plast
    2aac:	adrp	x1, 0 <is_highest_address>
    2ab0:	mov	x0, x24
    2ab4:	add	x1, x1, #0x0
    2ab8:	bl	2e0 <dwarf_buf_error>
    2abc:	ldr	x0, [sp, #144]
    2ac0:	cbz	x0, 2b2c <__asan_backtrace_dwarf_add+0x228>
    2ac4:	ldr	x21, [sp, #312]
    2ac8:	mov	x19, #0x0                   	// #0
    2acc:	ldr	x1, [x21, x19, lsl #3]
    2ad0:	mov	x3, x23
    2ad4:	mov	x2, x22
    2ad8:	mov	x0, x20
    2adc:	add	x1, x1, #0x58
    2ae0:	bl	394 <free_abbrevs>
    2ae4:	ldr	x1, [x21, x19, lsl #3]
    2ae8:	mov	x0, x20
    2aec:	mov	x4, x23
    2af0:	mov	x3, x22
    2af4:	mov	x2, #0x88                  	// #136
    2af8:	add	x19, x19, #0x1
    2afc:	bl	0 <__asan_backtrace_free>
    2b00:	ldr	x0, [sp, #144]
    2b04:	cmp	x0, x19
    2b08:	b.ne	2acc <__asan_backtrace_dwarf_add+0x1c8>  // b.any
    2b0c:	ldp	x1, x0, [sp, #320]
    2b10:	mov	x3, x23
    2b14:	mov	x2, x22
    2b18:	add	x0, x0, x1
    2b1c:	add	x1, sp, #0x138
    2b20:	stp	xzr, x0, [sp, #320]
    2b24:	mov	x0, x20
    2b28:	bl	0 <__asan_backtrace_vector_release>
    2b2c:	ldr	x0, [sp, #360]
    2b30:	cbz	x0, 29fc <__asan_backtrace_dwarf_add+0xf8>
    2b34:	ldp	x1, x0, [sp, #344]
    2b38:	mov	x3, x23
    2b3c:	mov	x2, x22
    2b40:	add	x0, x0, x1
    2b44:	add	x1, sp, #0x150
    2b48:	stp	xzr, x0, [sp, #344]
    2b4c:	mov	x0, x20
    2b50:	bl	0 <__asan_backtrace_vector_release>
    2b54:	b	29fc <__asan_backtrace_dwarf_add+0xf8>
    2b58:	ldr	x4, [sp, #272]
    2b5c:	mov	x3, x23
    2b60:	mov	x2, x22
    2b64:	mov	x0, x20
    2b68:	mov	x1, #0x8                   	// #8
    2b6c:	bl	0 <__asan_backtrace_vector_grow>
    2b70:	mov	x27, x0
    2b74:	cbz	x0, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2b78:	mov	x3, x23
    2b7c:	mov	x2, x22
    2b80:	mov	x0, x20
    2b84:	mov	x1, #0x88                  	// #136
    2b88:	bl	0 <__asan_backtrace_alloc>
    2b8c:	mov	x19, x0
    2b90:	cbz	x0, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2b94:	ldr	x0, [sp, #144]
    2b98:	str	x19, [x27]
    2b9c:	mov	x2, #0x10                  	// #16
    2ba0:	mov	w1, #0x0                   	// #0
    2ba4:	add	x0, x0, #0x1
    2ba8:	str	x0, [sp, #144]
    2bac:	add	x0, x19, #0x58
    2bb0:	str	x0, [sp, #232]
    2bb4:	bl	0 <__asan_internal_memset>
    2bb8:	mov	w1, w26
    2bbc:	mov	x0, x24
    2bc0:	bl	7c8 <read_offset>
    2bc4:	stp	xzr, xzr, [x19, #88]
    2bc8:	ldr	x1, [sp, #216]
    2bcc:	cmp	x1, x0
    2bd0:	b.hi	2bec <__asan_backtrace_dwarf_add+0x2e8>  // b.pmore
    2bd4:	mov	x0, x23
    2bd8:	mov	w2, #0x0                   	// #0
    2bdc:	adrp	x1, 0 <is_highest_address>
    2be0:	add	x1, x1, #0x0
    2be4:	blr	x22
    2be8:	b	2abc <__asan_backtrace_dwarf_add+0x1b8>
    2bec:	adrp	x1, 0 <is_highest_address>
    2bf0:	add	x1, x1, #0x0
    2bf4:	str	x1, [sp, #528]
    2bf8:	mov	x27, #0x0                   	// #0
    2bfc:	ldr	x1, [sp, #208]
    2c00:	str	x1, [sp, #536]
    2c04:	str	x22, [sp, #568]
    2c08:	add	x1, x1, x0
    2c0c:	str	x1, [sp, #544]
    2c10:	ldr	x1, [sp, #216]
    2c14:	str	x23, [sp, #576]
    2c18:	str	wzr, [sp, #584]
    2c1c:	sub	x0, x1, x0
    2c20:	str	x0, [sp, #552]
    2c24:	ldr	w0, [sp, #688]
    2c28:	str	w0, [sp, #560]
    2c2c:	add	x0, sp, #0x200
    2c30:	ldp	x0, x1, [x0, #16]
    2c34:	stp	x0, x1, [x21]
    2c38:	add	x0, sp, #0x200
    2c3c:	ldp	x0, x1, [x0, #32]
    2c40:	stp	x0, x1, [x21, #16]
    2c44:	add	x0, sp, #0x200
    2c48:	ldp	x0, x1, [x0, #48]
    2c4c:	stp	x0, x1, [x21, #32]
    2c50:	add	x0, sp, #0x200
    2c54:	ldp	x0, x1, [x0, #64]
    2c58:	stp	x0, x1, [x21, #48]
    2c5c:	mov	x0, x21
    2c60:	bl	8dc <read_uleb128>
    2c64:	ldr	w1, [sp, #648]
    2c68:	cbnz	x0, 2d68 <__asan_backtrace_dwarf_add+0x464>
    2c6c:	cbnz	w1, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2c70:	cbz	x27, 2e48 <__asan_backtrace_dwarf_add+0x544>
    2c74:	lsl	x28, x27, #5
    2c78:	mov	x3, x23
    2c7c:	mov	x2, x22
    2c80:	mov	x1, x28
    2c84:	mov	x0, x20
    2c88:	bl	0 <__asan_backtrace_alloc>
    2c8c:	str	x0, [x19, #96]
    2c90:	cbz	x0, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2c94:	str	x27, [x19, #88]
    2c98:	add	x27, sp, #0x210
    2c9c:	mov	x2, x28
    2ca0:	mov	x28, #0x0                   	// #0
    2ca4:	mov	w1, #0x0                   	// #0
    2ca8:	bl	0 <__asan_internal_memset>
    2cac:	ldr	w0, [sp, #584]
    2cb0:	cbnz	w0, 2e1c <__asan_backtrace_dwarf_add+0x518>
    2cb4:	mov	x0, x27
    2cb8:	bl	8dc <read_uleb128>
    2cbc:	str	x0, [sp, #184]
    2cc0:	cbz	x0, 2e34 <__asan_backtrace_dwarf_add+0x530>
    2cc4:	mov	x0, x27
    2cc8:	bl	8dc <read_uleb128>
    2ccc:	str	x0, [sp, #240]
    2cd0:	mov	x0, x27
    2cd4:	bl	838 <read_byte>
    2cd8:	and	w0, w0, #0xff
    2cdc:	str	w0, [sp, #252]
    2ce0:	ldp	x0, x1, [x27]
    2ce4:	stp	x0, x1, [x21]
    2ce8:	ldp	x0, x1, [x27, #16]
    2cec:	stp	x0, x1, [x21, #16]
    2cf0:	ldp	x0, x1, [x27, #32]
    2cf4:	stp	x0, x1, [x21, #32]
    2cf8:	ldp	x0, x1, [x27, #48]
    2cfc:	stp	x0, x1, [x21, #48]
    2d00:	mov	x1, #0x0                   	// #0
    2d04:	mov	x0, x21
    2d08:	str	x1, [sp, #280]
    2d0c:	bl	8dc <read_uleb128>
    2d10:	str	x0, [sp, #168]
    2d14:	ldr	x1, [sp, #280]
    2d18:	cbnz	x0, 2da4 <__asan_backtrace_dwarf_add+0x4a0>
    2d1c:	cbnz	x1, 2dbc <__asan_backtrace_dwarf_add+0x4b8>
    2d20:	mov	x0, x27
    2d24:	bl	8dc <read_uleb128>
    2d28:	mov	x0, x27
    2d2c:	bl	8dc <read_uleb128>
    2d30:	mov	x1, #0x0                   	// #0
    2d34:	ldr	x2, [x19, #96]
    2d38:	ldr	x3, [sp, #184]
    2d3c:	add	x0, x2, x28
    2d40:	str	x3, [x2, x28]
    2d44:	add	x28, x28, #0x20
    2d48:	ldr	w2, [sp, #240]
    2d4c:	str	w2, [x0, #8]
    2d50:	ldr	w2, [sp, #252]
    2d54:	str	w2, [x0, #12]
    2d58:	ldr	x2, [sp, #168]
    2d5c:	str	x2, [x0, #16]
    2d60:	str	x1, [x0, #24]
    2d64:	b	2cac <__asan_backtrace_dwarf_add+0x3a8>
    2d68:	cbnz	w1, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2d6c:	mov	x0, x21
    2d70:	bl	8dc <read_uleb128>
    2d74:	add	x27, x27, #0x1
    2d78:	mov	x0, x21
    2d7c:	bl	838 <read_byte>
    2d80:	mov	x0, x21
    2d84:	bl	8dc <read_uleb128>
    2d88:	cbnz	x0, 2d98 <__asan_backtrace_dwarf_add+0x494>
    2d8c:	mov	x0, x21
    2d90:	bl	8dc <read_uleb128>
    2d94:	b	2c5c <__asan_backtrace_dwarf_add+0x358>
    2d98:	mov	x0, x21
    2d9c:	bl	8dc <read_uleb128>
    2da0:	b	2d80 <__asan_backtrace_dwarf_add+0x47c>
    2da4:	add	x1, x1, #0x1
    2da8:	mov	x0, x21
    2dac:	str	x1, [sp, #168]
    2db0:	bl	8dc <read_uleb128>
    2db4:	ldr	x1, [sp, #168]
    2db8:	b	2d04 <__asan_backtrace_dwarf_add+0x400>
    2dbc:	lsl	x1, x1, #3
    2dc0:	mov	x3, x23
    2dc4:	mov	x2, x22
    2dc8:	mov	x0, x20
    2dcc:	bl	0 <__asan_backtrace_alloc>
    2dd0:	mov	x1, x0
    2dd4:	cbz	x0, 2e1c <__asan_backtrace_dwarf_add+0x518>
    2dd8:	mov	x2, x0
    2ddc:	mov	x0, x27
    2de0:	stp	x1, x2, [sp, #288]
    2de4:	bl	8dc <read_uleb128>
    2de8:	mov	x3, x0
    2dec:	mov	x0, x27
    2df0:	str	x3, [sp, #280]
    2df4:	bl	8dc <read_uleb128>
    2df8:	ldp	x3, x1, [sp, #280]
    2dfc:	cbz	x3, 2d34 <__asan_backtrace_dwarf_add+0x430>
    2e00:	ldr	x2, [sp, #296]
    2e04:	stp	w3, w0, [x2]
    2e08:	add	x2, x2, #0x8
    2e0c:	ldr	x0, [sp, #168]
    2e10:	add	x0, x0, #0x1
    2e14:	str	x0, [sp, #168]
    2e18:	b	2ddc <__asan_backtrace_dwarf_add+0x4d8>
    2e1c:	ldr	x1, [sp, #232]
    2e20:	mov	x3, x23
    2e24:	mov	x2, x22
    2e28:	mov	x0, x20
    2e2c:	bl	394 <free_abbrevs>
    2e30:	b	2abc <__asan_backtrace_dwarf_add+0x1b8>
    2e34:	ldp	x1, x0, [x19, #88]
    2e38:	adrp	x3, 0 <is_highest_address>
    2e3c:	mov	x2, #0x20                  	// #32
    2e40:	add	x3, x3, #0x0
    2e44:	bl	0 <__asan_backtrace_qsort>
    2e48:	mov	x0, x24
    2e4c:	bl	838 <read_byte>
    2e50:	and	w2, w0, #0xff
    2e54:	mov	x1, #0x4                   	// #4
    2e58:	ldr	x0, [sp, #152]
    2e5c:	cmp	w26, #0x0
    2e60:	str	x0, [x19, #24]
    2e64:	mov	x0, #0xc                   	// #12
    2e68:	csel	x0, x0, x1, ne  // ne = any
    2e6c:	stp	w26, w2, [x19, #44]
    2e70:	ldr	x1, [sp, #160]
    2e74:	stp	xzr, xzr, [x19, #56]
    2e78:	ldr	w7, [sp, #688]
    2e7c:	add	x0, x0, x1
    2e80:	stp	xzr, xzr, [x19, #72]
    2e84:	mov	x2, x24
    2e88:	ldr	x1, [sp, #152]
    2e8c:	stp	xzr, xzr, [x19, #104]
    2e90:	add	x0, x1, x0
    2e94:	str	x0, [x19, #32]
    2e98:	str	x0, [sp, #152]
    2e9c:	ldr	x0, [sp, #488]
    2ea0:	str	x0, [x19, #8]
    2ea4:	ldr	x0, [sp, #224]
    2ea8:	stp	xzr, xzr, [x19, #120]
    2eac:	ldr	x1, [sp, #480]
    2eb0:	str	x1, [x19]
    2eb4:	sub	x1, x1, x0
    2eb8:	ldr	w0, [sp, #248]
    2ebc:	str	x1, [x19, #16]
    2ec0:	add	x1, sp, #0x290
    2ec4:	str	w0, [x19, #40]
    2ec8:	add	x0, sp, #0x150
    2ecc:	stp	x19, x0, [sp, #24]
    2ed0:	ldr	x0, [sp, #696]
    2ed4:	str	x0, [sp]
    2ed8:	stp	x22, x23, [sp, #8]
    2edc:	mov	x0, x20
    2ee0:	str	x21, [sp, #40]
    2ee4:	ldp	x5, x6, [x1]
    2ee8:	ldp	x3, x4, [x1, #16]
    2eec:	ldr	x1, [sp, #192]
    2ef0:	bl	da0 <find_address_ranges>
    2ef4:	cbz	w0, 2abc <__asan_backtrace_dwarf_add+0x1b8>
    2ef8:	ldr	w0, [sp, #520]
    2efc:	cbz	w0, 29b8 <__asan_backtrace_dwarf_add+0xb4>
    2f00:	b	2abc <__asan_backtrace_dwarf_add+0x1b8>
    2f04:	mov	x3, x23
    2f08:	mov	x2, x22
    2f0c:	add	x1, sp, #0x170
    2f10:	mov	x0, x20
    2f14:	bl	0 <__asan_backtrace_vector_release>
    2f18:	cbz	w0, 29fc <__asan_backtrace_dwarf_add+0xf8>
    2f1c:	ldp	x21, x26, [sp, #360]
    2f20:	mov	x2, #0x18                  	// #24
    2f24:	ldr	x24, [sp, #336]
    2f28:	adrp	x3, 0 <is_highest_address>
    2f2c:	add	x3, x3, #0x0
    2f30:	mov	x0, x24
    2f34:	mov	x1, x21
    2f38:	ldr	x25, [sp, #392]
    2f3c:	bl	0 <__asan_backtrace_qsort>
    2f40:	mov	x3, x23
    2f44:	mov	x2, x22
    2f48:	mov	x0, x20
    2f4c:	mov	x1, #0xa0                  	// #160
    2f50:	bl	0 <__asan_backtrace_alloc>
    2f54:	mov	x19, x0
    2f58:	cbz	x0, 29fc <__asan_backtrace_dwarf_add+0xf8>
    2f5c:	ldr	x0, [sp, #696]
    2f60:	stp	xzr, x0, [x19]
    2f64:	mov	x2, #0x20                  	// #32
    2f68:	ldr	x0, [sp, #192]
    2f6c:	str	x0, [x19, #16]
    2f70:	ldr	x0, [sp, #176]
    2f74:	str	x0, [x19, #56]
    2f78:	ldr	x0, [sp, #200]
    2f7c:	str	x0, [x19, #64]
    2f80:	ldr	x0, [sp, #256]
    2f84:	str	x0, [x19, #72]
    2f88:	ldr	x0, [sp, #264]
    2f8c:	str	x0, [x19, #80]
    2f90:	ldr	x0, [sp, #656]
    2f94:	str	x0, [x19, #88]
    2f98:	ldr	x0, [sp, #664]
    2f9c:	str	x0, [x19, #96]
    2fa0:	ldr	x0, [sp, #672]
    2fa4:	str	x0, [x19, #104]
    2fa8:	ldr	x0, [sp, #680]
    2fac:	str	x0, [x19, #112]
    2fb0:	ldr	w0, [sp, #688]
    2fb4:	mov	w1, #0x0                   	// #0
    2fb8:	stp	x24, x21, [x19, #24]
    2fbc:	stp	x26, x25, [x19, #40]
    2fc0:	str	w0, [x19, #120]
    2fc4:	add	x0, x19, #0x80
    2fc8:	bl	0 <__asan_internal_memset>
    2fcc:	ldr	x0, [sp, #728]
    2fd0:	cbz	x0, 2fd8 <__asan_backtrace_dwarf_add+0x6d4>
    2fd4:	str	x19, [x0]
    2fd8:	ldr	w0, [x20, #8]
    2fdc:	add	x1, x20, #0x20
    2fe0:	cbnz	w0, 3030 <__asan_backtrace_dwarf_add+0x72c>
    2fe4:	ldr	x0, [x20, #32]
    2fe8:	cbnz	x0, 3008 <__asan_backtrace_dwarf_add+0x704>
    2fec:	str	x19, [x1]
    2ff0:	ldr	x1, [sp, #720]
    2ff4:	adrp	x0, 0 <is_highest_address>
    2ff8:	add	x0, x0, #0x0
    2ffc:	str	x0, [x1]
    3000:	mov	w0, #0x1                   	// #1
    3004:	b	2a00 <__asan_backtrace_dwarf_add+0xfc>
    3008:	mov	x1, x0
    300c:	ldr	x0, [x0]
    3010:	b	2fe8 <__asan_backtrace_dwarf_add+0x6e4>
    3014:	ldxr	x2, [x0]
    3018:	cbnz	x2, 3024 <__asan_backtrace_dwarf_add+0x720>
    301c:	stlxr	w3, x19, [x0]
    3020:	cbnz	w3, 3014 <__asan_backtrace_dwarf_add+0x710>
    3024:	dmb	ish
    3028:	cmp	x2, #0x0
    302c:	b.eq	2ff0 <__asan_backtrace_dwarf_add+0x6ec>  // b.none
    3030:	mov	x0, x1
    3034:	ldar	x2, [x0]
    3038:	cbz	x2, 3014 <__asan_backtrace_dwarf_add+0x710>
    303c:	mov	x0, x2
    3040:	b	3034 <__asan_backtrace_dwarf_add+0x730>

elf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <elf_nodebug>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x0, x4
       8:	mov	w2, #0xffffffff            	// #-1
       c:	mov	x29, sp
      10:	adrp	x1, 0 <elf_nodebug>
      14:	add	x1, x1, #0x0
      18:	blr	x3
      1c:	mov	w0, #0x0                   	// #0
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <elf_nosyms>:
      28:	mov	x16, x3
      2c:	mov	x0, x4
      30:	mov	w2, #0xffffffff            	// #-1
      34:	adrp	x1, 0 <elf_nodebug>
      38:	add	x1, x1, #0x0
      3c:	br	x16

0000000000000040 <elf_symbol_compare>:
      40:	ldr	x2, [x0, #8]
      44:	ldr	x1, [x1, #8]
      48:	cmp	x2, x1
      4c:	cset	w0, hi  // hi = pmore
      50:	csinv	w0, w0, wzr, cs  // cs = hs, nlast
      54:	ret

0000000000000058 <elf_symbol_search>:
      58:	ldr	x2, [x0]
      5c:	ldr	x0, [x1, #8]
      60:	cmp	x0, x2
      64:	b.hi	7c <elf_symbol_search+0x24>  // b.pmore
      68:	ldr	x1, [x1, #16]
      6c:	add	x0, x0, x1
      70:	cmp	x0, x2
      74:	cset	w0, ls  // ls = plast
      78:	ret
      7c:	mov	w0, #0xffffffff            	// #-1
      80:	b	78 <elf_symbol_search+0x20>

0000000000000084 <elf_zlib_inflate_table>:
      84:	stp	x29, x30, [sp, #-192]!
      88:	mov	x29, sp
      8c:	stp	x19, x20, [sp, #16]
      90:	add	x20, sp, #0x60
      94:	mov	x19, x3
      98:	stp	x21, x22, [sp, #32]
      9c:	mov	x22, x0
      a0:	add	x21, x2, #0x1, lsl #12
      a4:	mov	x0, x20
      a8:	mov	x2, #0x20                  	// #32
      ac:	stp	x23, x24, [sp, #48]
      b0:	mov	x23, x1
      b4:	mov	w1, #0x0                   	// #0
      b8:	str	x25, [sp, #64]
      bc:	bl	0 <__asan_internal_memset>
      c0:	add	x2, sp, #0xa0
      c4:	add	x5, sp, #0x80
      c8:	mov	x3, #0x0                   	// #0
      cc:	ldrb	w4, [x22, x3]
      d0:	cmp	w4, #0xf
      d4:	b.ls	f4 <elf_zlib_inflate_table+0x70>  // b.plast
      d8:	mov	w0, #0x0                   	// #0
      dc:	ldp	x19, x20, [sp, #16]
      e0:	ldp	x21, x22, [sp, #32]
      e4:	ldp	x23, x24, [sp, #48]
      e8:	ldr	x25, [sp, #64]
      ec:	ldp	x29, x30, [sp], #192
      f0:	ret
      f4:	sbfiz	x1, x4, #1, #32
      f8:	ldrh	w4, [x20, w4, sxtw #1]
      fc:	and	w0, w3, #0xffff
     100:	cbnz	w4, 25c <elf_zlib_inflate_table+0x1d8>
     104:	strh	w0, [x5, x1]
     108:	strh	w0, [x2, x1]
     10c:	ldrb	w0, [x22, x3]
     110:	add	x3, x3, #0x1
     114:	cmp	x23, x3
     118:	lsl	x0, x0, #1
     11c:	ldrh	w1, [x20, x0]
     120:	add	w1, w1, #0x1
     124:	strh	w1, [x20, x0]
     128:	b.ne	cc <elf_zlib_inflate_table+0x48>  // b.any
     12c:	mov	w1, #0x0                   	// #0
     130:	mov	x0, x19
     134:	mov	x2, #0x800                 	// #2048
     138:	bl	0 <__asan_internal_memset>
     13c:	mov	x0, #0x1                   	// #1
     140:	add	x11, sp, #0x80
     144:	mov	w10, w0
     148:	mov	w1, #0x0                   	// #0
     14c:	ldrh	w3, [x20, x0, lsl #1]
     150:	cbz	w3, 18c <elf_zlib_inflate_table+0x108>
     154:	lsl	w4, w10, w0
     158:	cmp	w4, w3
     15c:	b.cc	d8 <elf_zlib_inflate_table+0x54>  // b.lo, b.ul, b.last
     160:	ubfiz	w2, w0, #9, #7
     164:	sub	w8, w0, #0x1
     168:	sub	w2, w2, #0x200
     16c:	ldrh	w5, [x11, x0, lsl #1]
     170:	sxtw	x7, w4
     174:	and	w2, w2, #0xffff
     178:	and	x4, x3, #0xffff
     17c:	lsl	w8, w10, w8
     180:	mov	x6, #0x0                   	// #0
     184:	cmp	x4, x6
     188:	b.hi	270 <elf_zlib_inflate_table+0x1ec>  // b.pmore
     18c:	add	x0, x0, #0x1
     190:	cmp	x0, #0x9
     194:	b.ne	14c <elf_zlib_inflate_table+0xc8>  // b.any
     198:	add	x9, sp, #0x50
     19c:	mov	x5, #0x0                   	// #0
     1a0:	mov	w8, #0x1                   	// #1
     1a4:	ldrh	w2, [x20, x0, lsl #1]
     1a8:	cbz	w2, 1c8 <elf_zlib_inflate_table+0x144>
     1ac:	sub	w10, w0, #0x1
     1b0:	mov	w3, #0x0                   	// #0
     1b4:	strh	w1, [x5, x9]
     1b8:	mov	w6, w3
     1bc:	cmp	x0, w3, uxtw
     1c0:	b.hi	2dc <elf_zlib_inflate_table+0x258>  // b.pmore
     1c4:	cbnz	w2, d8 <elf_zlib_inflate_table+0x54>
     1c8:	add	x0, x0, #0x1
     1cc:	add	x5, x5, #0x2
     1d0:	cmp	x0, #0x10
     1d4:	b.ne	1a4 <elf_zlib_inflate_table+0x120>  // b.any
     1d8:	add	x16, sp, #0x80
     1dc:	add	x17, sp, #0x50
     1e0:	mov	x10, #0x6                   	// #6
     1e4:	mov	x7, #0x0                   	// #0
     1e8:	mov	x0, #0xf                   	// #15
     1ec:	mov	w11, #0x1                   	// #1
     1f0:	ldrh	w2, [x20, x0, lsl #1]
     1f4:	cbz	w2, 244 <elf_zlib_inflate_table+0x1c0>
     1f8:	sub	w1, w0, #0x8
     1fc:	ubfiz	w14, w0, #9, #7
     200:	sub	w12, w14, #0x1, lsl #12
     204:	sub	w13, w0, #0x1
     208:	ldrh	w8, [x16, x0, lsl #1]
     20c:	lsl	w1, w11, w1
     210:	ldrh	w6, [x17, x10, lsl #1]
     214:	sub	x15, x0, #0x8
     218:	and	w12, w12, #0xffff
     21c:	and	x2, x2, #0xffff
     220:	sxtw	x18, w1
     224:	mov	w5, w1
     228:	lsl	w13, w11, w13
     22c:	mov	x1, #0x0                   	// #0
     230:	mov	x22, #0x0                   	// #0
     234:	mov	x4, #0x100                 	// #256
     238:	mov	x9, #0x0                   	// #0
     23c:	cmp	x2, x9
     240:	b.hi	328 <elf_zlib_inflate_table+0x2a4>  // b.pmore
     244:	sub	x0, x0, #0x1
     248:	sub	x10, x10, #0x1
     24c:	cmp	x0, #0x8
     250:	b.ne	1f0 <elf_zlib_inflate_table+0x16c>  // b.any
     254:	mov	w0, #0x1                   	// #1
     258:	b	dc <elf_zlib_inflate_table+0x58>
     25c:	ldrh	w1, [x2, x1]
     260:	strh	w0, [x21, x1, lsl #1]
     264:	ldrb	w1, [x22, x3]
     268:	strh	w0, [x2, x1, lsl #1]
     26c:	b	10c <elf_zlib_inflate_table+0x88>
     270:	tst	w5, #0xfe00
     274:	b.ne	d8 <elf_zlib_inflate_table+0x54>  // b.any
     278:	orr	w9, w2, w5
     27c:	mov	w3, w1
     280:	cmp	x3, #0xff
     284:	b.ls	2c0 <elf_zlib_inflate_table+0x23c>  // b.plast
     288:	add	x6, x6, #0x1
     28c:	cmp	x6, x4
     290:	b.cs	29c <elf_zlib_inflate_table+0x218>  // b.hs, b.nlast
     294:	ubfiz	x5, x5, #1, #16
     298:	ldrh	w5, [x21, x5]
     29c:	mov	w3, w8
     2a0:	tst	w1, w3
     2a4:	b.ne	2d4 <elf_zlib_inflate_table+0x250>  // b.any
     2a8:	cbz	w3, 2b8 <elf_zlib_inflate_table+0x234>
     2ac:	sub	w9, w3, #0x1
     2b0:	and	w1, w9, w1
     2b4:	add	w3, w3, w1
     2b8:	mov	w1, w3
     2bc:	b	184 <elf_zlib_inflate_table+0x100>
     2c0:	ldrh	w12, [x19, x3, lsl #1]
     2c4:	cbnz	w12, d8 <elf_zlib_inflate_table+0x54>
     2c8:	strh	w9, [x19, x3, lsl #1]
     2cc:	add	x3, x3, x7
     2d0:	b	280 <elf_zlib_inflate_table+0x1fc>
     2d4:	lsr	w3, w3, #1
     2d8:	b	2a0 <elf_zlib_inflate_table+0x21c>
     2dc:	lsr	w4, w2, w3
     2e0:	tbz	w4, #0, 310 <elf_zlib_inflate_table+0x28c>
     2e4:	sub	w4, w10, w3
     2e8:	sub	x6, x0, x6
     2ec:	mov	w7, #0x0                   	// #0
     2f0:	lsl	w4, w8, w4
     2f4:	cmp	x6, w7, uxtw
     2f8:	b.ls	308 <elf_zlib_inflate_table+0x284>  // b.plast
     2fc:	tst	w1, w4
     300:	b.ne	318 <elf_zlib_inflate_table+0x294>  // b.any
     304:	add	w1, w1, w4
     308:	lsl	w4, w8, w3
     30c:	bic	w2, w2, w4
     310:	add	w3, w3, #0x1
     314:	b	1b8 <elf_zlib_inflate_table+0x134>
     318:	bic	w1, w1, w4
     31c:	add	w7, w7, #0x1
     320:	lsr	w4, w4, #1
     324:	b	2f4 <elf_zlib_inflate_table+0x270>
     328:	and	x23, x6, #0xff
     32c:	cmp	x4, w6, uxtb
     330:	b.eq	3cc <elf_zlib_inflate_table+0x348>  // b.none
     334:	ldrh	w1, [x19, x23, lsl #1]
     338:	lsl	x3, x23, #1
     33c:	cbnz	w1, 3b4 <elf_zlib_inflate_table+0x330>
     340:	tst	x7, #0xfffffffffffffe00
     344:	b.ne	d8 <elf_zlib_inflate_table+0x54>  // b.any
     348:	add	w1, w14, w7
     34c:	mov	x22, x7
     350:	add	x7, x18, x7
     354:	strh	w1, [x19, x3]
     358:	mov	x1, x15
     35c:	add	x4, x19, x22, lsl #1
     360:	orr	w24, w12, w8
     364:	lsr	w3, w6, #8
     368:	add	x4, x4, #0x200
     36c:	lsl	w30, w11, w1
     370:	cmp	x30, x3
     374:	b.hi	3d4 <elf_zlib_inflate_table+0x350>  // b.pmore
     378:	add	x9, x9, #0x1
     37c:	cmp	x9, x2
     380:	b.cs	38c <elf_zlib_inflate_table+0x308>  // b.hs, b.nlast
     384:	ubfiz	x8, x8, #1, #16
     388:	ldrh	w8, [x21, x8]
     38c:	mov	w3, w13
     390:	tst	w6, w3
     394:	b.ne	3e8 <elf_zlib_inflate_table+0x364>  // b.any
     398:	cbz	w3, 3a8 <elf_zlib_inflate_table+0x324>
     39c:	sub	w4, w3, #0x1
     3a0:	and	w6, w4, w6
     3a4:	add	w3, w3, w6
     3a8:	mov	x4, x23
     3ac:	mov	w6, w3
     3b0:	b	23c <elf_zlib_inflate_table+0x1b8>
     3b4:	tbz	w1, #12, d8 <elf_zlib_inflate_table+0x54>
     3b8:	and	x22, x1, #0x1ff
     3bc:	ubfx	x1, x1, #9, #3
     3c0:	cmp	x1, x15
     3c4:	b.cs	35c <elf_zlib_inflate_table+0x2d8>  // b.hs, b.nlast
     3c8:	b	d8 <elf_zlib_inflate_table+0x54>
     3cc:	mov	x23, x4
     3d0:	b	35c <elf_zlib_inflate_table+0x2d8>
     3d4:	ldrh	w25, [x4, x3, lsl #1]
     3d8:	cbnz	w25, d8 <elf_zlib_inflate_table+0x54>
     3dc:	strh	w24, [x4, x3, lsl #1]
     3e0:	add	x3, x3, x5
     3e4:	b	370 <elf_zlib_inflate_table+0x2ec>
     3e8:	lsr	w3, w3, #1
     3ec:	b	390 <elf_zlib_inflate_table+0x30c>

00000000000003f0 <elf_zlib_fetch>:
     3f0:	ldr	w4, [x3]
     3f4:	mov	x6, x1
     3f8:	cmp	w4, #0xe
     3fc:	b.hi	434 <elf_zlib_fetch+0x44>  // b.pmore
     400:	ldr	x1, [x0]
     404:	ldr	x7, [x2]
     408:	sub	x6, x6, x1
     40c:	cmp	x6, #0x3
     410:	b.le	43c <elf_zlib_fetch+0x4c>
     414:	ldr	w5, [x1], #4
     418:	lsl	x5, x5, x4
     41c:	orr	x5, x5, x7
     420:	prfm	pldl1strm, [x1]
     424:	add	w4, w4, #0x20
     428:	str	x1, [x0]
     42c:	str	x5, [x2]
     430:	str	w4, [x3]
     434:	mov	w0, #0x1                   	// #1
     438:	ret
     43c:	mov	w0, #0x0                   	// #0
     440:	b	438 <elf_zlib_fetch+0x48>

0000000000000444 <elf_syminfo>:
     444:	stp	x29, x30, [sp, #-80]!
     448:	mov	x29, sp
     44c:	str	x1, [sp, #72]
     450:	ldr	w1, [x0, #8]
     454:	stp	x19, x20, [sp, #16]
     458:	mov	x20, x2
     45c:	stp	x21, x22, [sp, #32]
     460:	mov	x21, x4
     464:	str	x23, [sp, #48]
     468:	cbnz	w1, 4cc <elf_syminfo+0x88>
     46c:	ldr	x19, [x0, #48]
     470:	adrp	x22, 0 <elf_nodebug>
     474:	add	x23, sp, #0x48
     478:	add	x22, x22, #0x0
     47c:	cbnz	x19, 4ac <elf_syminfo+0x68>
     480:	mov	x4, #0x0                   	// #0
     484:	mov	x3, #0x0                   	// #0
     488:	mov	x2, #0x0                   	// #0
     48c:	ldr	x1, [sp, #72]
     490:	mov	x0, x21
     494:	blr	x20
     498:	ldp	x19, x20, [sp, #16]
     49c:	ldp	x21, x22, [sp, #32]
     4a0:	ldr	x23, [sp, #48]
     4a4:	ldp	x29, x30, [sp], #80
     4a8:	ret
     4ac:	ldp	x1, x2, [x19, #8]
     4b0:	mov	x4, x22
     4b4:	mov	x0, x23
     4b8:	mov	x3, #0x18                  	// #24
     4bc:	bl	0 <bsearch>
     4c0:	cbnz	x0, 4fc <elf_syminfo+0xb8>
     4c4:	ldr	x19, [x19]
     4c8:	b	47c <elf_syminfo+0x38>
     4cc:	adrp	x22, 0 <elf_nodebug>
     4d0:	add	x19, x0, #0x30
     4d4:	add	x22, x22, #0x0
     4d8:	add	x23, sp, #0x48
     4dc:	ldar	x19, [x19]
     4e0:	cbz	x19, 480 <elf_syminfo+0x3c>
     4e4:	ldp	x1, x2, [x19, #8]
     4e8:	mov	x4, x22
     4ec:	mov	x0, x23
     4f0:	mov	x3, #0x18                  	// #24
     4f4:	bl	0 <bsearch>
     4f8:	cbz	x0, 4dc <elf_syminfo+0x98>
     4fc:	ldp	x2, x3, [x0]
     500:	ldr	x4, [x0, #16]
     504:	b	48c <elf_syminfo+0x48>

0000000000000508 <elf_try_debugfile>:
     508:	stp	x29, x30, [sp, #-144]!
     50c:	mov	x29, sp
     510:	stp	x27, x28, [sp, #80]
     514:	add	x28, x2, x4
     518:	mov	x27, x5
     51c:	stp	x19, x20, [sp, #16]
     520:	mov	x20, x6
     524:	stp	x21, x22, [sp, #32]
     528:	mov	x22, x2
     52c:	mov	x21, x7
     530:	stp	x23, x24, [sp, #48]
     534:	mov	x23, x0
     538:	mov	x0, x5
     53c:	stp	x25, x26, [sp, #64]
     540:	mov	x25, x4
     544:	stp	x3, x1, [sp, #112]
     548:	bl	0 <__asan_internal_strlen>
     54c:	mov	x24, x0
     550:	add	x0, x28, x0
     554:	mov	x3, x21
     558:	add	x26, x0, #0x1
     55c:	mov	x2, x20
     560:	mov	x1, x26
     564:	str	x0, [sp, #104]
     568:	mov	x0, x23
     56c:	bl	0 <__asan_backtrace_alloc>
     570:	cbz	x0, 600 <elf_try_debugfile+0xf8>
     574:	ldr	x8, [sp, #120]
     578:	mov	x19, x0
     57c:	mov	x2, x22
     580:	mov	x1, x8
     584:	bl	0 <__asan_internal_memcpy>
     588:	ldr	x1, [sp, #112]
     58c:	mov	x2, x25
     590:	add	x0, x19, x22
     594:	bl	0 <__asan_internal_memcpy>
     598:	mov	x2, x24
     59c:	mov	x1, x27
     5a0:	add	x0, x19, x28
     5a4:	bl	0 <__asan_internal_memcpy>
     5a8:	ldr	x0, [sp, #104]
     5ac:	add	x3, sp, #0x8c
     5b0:	mov	x2, x21
     5b4:	mov	x1, x20
     5b8:	strb	wzr, [x19, x0]
     5bc:	mov	x0, x19
     5c0:	bl	0 <__asan_backtrace_open>
     5c4:	mov	w22, w0
     5c8:	mov	x4, x21
     5cc:	mov	x3, x20
     5d0:	mov	x2, x26
     5d4:	mov	x1, x19
     5d8:	mov	x0, x23
     5dc:	bl	0 <__asan_backtrace_free>
     5e0:	mov	w0, w22
     5e4:	ldp	x19, x20, [sp, #16]
     5e8:	ldp	x21, x22, [sp, #32]
     5ec:	ldp	x23, x24, [sp, #48]
     5f0:	ldp	x25, x26, [sp, #64]
     5f4:	ldp	x27, x28, [sp, #80]
     5f8:	ldp	x29, x30, [sp], #144
     5fc:	ret
     600:	mov	w22, #0xffffffff            	// #-1
     604:	b	5e0 <elf_try_debugfile+0xd8>

0000000000000608 <elf_find_debugfile_by_debuglink>:
     608:	stp	x29, x30, [sp, #-256]!
     60c:	mov	x29, sp
     610:	stp	x19, x20, [sp, #16]
     614:	mov	x20, x1
     618:	stp	x21, x22, [sp, #32]
     61c:	mov	x22, x3
     620:	mov	x21, x0
     624:	stp	x23, x24, [sp, #48]
     628:	mov	x23, x4
     62c:	add	x0, sp, #0x80
     630:	stp	x27, x28, [sp, #80]
     634:	mov	x27, x2
     638:	mov	x24, #0x0                   	// #0
     63c:	stp	x25, x26, [sp, #64]
     640:	mov	x25, #0x0                   	// #0
     644:	str	x0, [sp, #112]
     648:	ldr	x1, [sp, #112]
     64c:	mov	x0, x20
     650:	bl	0 <lstat>
     654:	tbnz	w0, #31, 6b4 <elf_find_debugfile_by_debuglink+0xac>
     658:	ldr	w0, [sp, #144]
     65c:	and	w0, w0, #0xf000
     660:	cmp	w0, #0xa, lsl #12
     664:	b.ne	6b4 <elf_find_debugfile_by_debuglink+0xac>  // b.any
     668:	mov	x26, #0x80                  	// #128
     66c:	mov	x3, x23
     670:	mov	x2, x22
     674:	mov	x1, x26
     678:	mov	x0, x21
     67c:	bl	0 <__asan_backtrace_alloc>
     680:	mov	x28, x0
     684:	cbz	x0, 6b4 <elf_find_debugfile_by_debuglink+0xac>
     688:	mov	x1, x0
     68c:	mov	x2, x26
     690:	mov	x0, x20
     694:	bl	0 <readlink>
     698:	tbz	x0, #63, 7b8 <elf_find_debugfile_by_debuglink+0x1b0>
     69c:	mov	x4, x23
     6a0:	mov	x3, x22
     6a4:	mov	x2, x26
     6a8:	mov	x1, x28
     6ac:	mov	x0, x21
     6b0:	bl	0 <__asan_backtrace_free>
     6b4:	mov	x0, x20
     6b8:	mov	w1, #0x2f                  	// #47
     6bc:	bl	0 <strrchr>
     6c0:	adrp	x3, 0 <elf_nodebug>
     6c4:	cbz	x0, 8c8 <elf_find_debugfile_by_debuglink+0x2c0>
     6c8:	add	x0, x0, #0x1
     6cc:	sub	x26, x0, x20
     6d0:	mov	x7, x23
     6d4:	mov	x6, x22
     6d8:	mov	x5, x27
     6dc:	add	x3, x3, #0x0
     6e0:	mov	x2, x26
     6e4:	mov	x1, x20
     6e8:	mov	x0, x21
     6ec:	mov	x4, #0x0                   	// #0
     6f0:	bl	508 <elf_try_debugfile>
     6f4:	mov	w19, w0
     6f8:	tbz	w0, #31, 774 <elf_find_debugfile_by_debuglink+0x16c>
     6fc:	adrp	x19, 0 <elf_nodebug>
     700:	add	x19, x19, #0x0
     704:	mov	x0, x19
     708:	bl	0 <__asan_internal_strlen>
     70c:	mov	x3, x19
     710:	mov	x4, x0
     714:	mov	x7, x23
     718:	mov	x6, x22
     71c:	mov	x5, x27
     720:	mov	x2, x26
     724:	mov	x1, x20
     728:	mov	x0, x21
     72c:	bl	508 <elf_try_debugfile>
     730:	mov	w19, w0
     734:	tbz	w0, #31, 774 <elf_find_debugfile_by_debuglink+0x16c>
     738:	adrp	x19, 0 <elf_nodebug>
     73c:	add	x19, x19, #0x0
     740:	mov	x0, x19
     744:	bl	0 <__asan_internal_strlen>
     748:	mov	x1, x19
     74c:	mov	x2, x0
     750:	mov	x7, x23
     754:	mov	x6, x22
     758:	mov	x5, x27
     75c:	mov	x4, x26
     760:	mov	x3, x20
     764:	mov	x0, x21
     768:	bl	508 <elf_try_debugfile>
     76c:	cmp	w0, #0x0
     770:	csinv	w19, w0, wzr, ge  // ge = tcont
     774:	cmp	x24, #0x0
     778:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     77c:	b.eq	798 <elf_find_debugfile_by_debuglink+0x190>  // b.none
     780:	mov	x4, x23
     784:	mov	x3, x22
     788:	mov	x2, x25
     78c:	mov	x1, x24
     790:	mov	x0, x21
     794:	bl	0 <__asan_backtrace_free>
     798:	mov	w0, w19
     79c:	ldp	x19, x20, [sp, #16]
     7a0:	ldp	x21, x22, [sp, #32]
     7a4:	ldp	x23, x24, [sp, #48]
     7a8:	ldp	x25, x26, [sp, #64]
     7ac:	ldp	x27, x28, [sp, #80]
     7b0:	ldp	x29, x30, [sp], #256
     7b4:	ret
     7b8:	sub	x1, x26, #0x1
     7bc:	cmp	x1, x0
     7c0:	b.ls	800 <elf_find_debugfile_by_debuglink+0x1f8>  // b.plast
     7c4:	strb	wzr, [x28, x0]
     7c8:	ldrb	w0, [x28]
     7cc:	cmp	w0, #0x2f
     7d0:	b.ne	820 <elf_find_debugfile_by_debuglink+0x218>  // b.any
     7d4:	cbz	x24, 7f0 <elf_find_debugfile_by_debuglink+0x1e8>
     7d8:	mov	x4, x23
     7dc:	mov	x3, x22
     7e0:	mov	x2, x25
     7e4:	mov	x1, x24
     7e8:	mov	x0, x21
     7ec:	bl	0 <__asan_backtrace_free>
     7f0:	mov	x25, x26
     7f4:	mov	x24, x28
     7f8:	mov	x20, x28
     7fc:	b	648 <elf_find_debugfile_by_debuglink+0x40>
     800:	mov	x2, x26
     804:	mov	x4, x23
     808:	mov	x3, x22
     80c:	mov	x1, x28
     810:	mov	x0, x21
     814:	lsl	x26, x26, #1
     818:	bl	0 <__asan_backtrace_free>
     81c:	b	66c <elf_find_debugfile_by_debuglink+0x64>
     820:	mov	x0, x20
     824:	mov	w1, #0x2f                  	// #47
     828:	bl	0 <strrchr>
     82c:	cbz	x0, 7d4 <elf_find_debugfile_by_debuglink+0x1cc>
     830:	add	x0, x0, #0x1
     834:	sub	x19, x0, x20
     838:	mov	x0, x28
     83c:	bl	0 <__asan_internal_strlen>
     840:	add	x1, x19, #0x1
     844:	mov	x3, x23
     848:	add	x0, x1, x0
     84c:	mov	x2, x22
     850:	mov	x1, x0
     854:	str	x0, [sp, #104]
     858:	mov	x0, x21
     85c:	bl	0 <__asan_backtrace_alloc>
     860:	str	x0, [sp, #120]
     864:	cbz	x0, 8d4 <elf_find_debugfile_by_debuglink+0x2cc>
     868:	mov	x2, x19
     86c:	mov	x1, x20
     870:	bl	0 <__asan_internal_memcpy>
     874:	ldr	x7, [sp, #120]
     878:	mov	x0, x28
     87c:	add	x19, x7, x19
     880:	bl	0 <__asan_internal_strlen>
     884:	mov	x2, x0
     888:	mov	x1, x28
     88c:	mov	x0, x19
     890:	bl	0 <__asan_internal_memcpy>
     894:	mov	x0, x28
     898:	bl	0 <__asan_internal_strlen>
     89c:	strb	wzr, [x19, x0]
     8a0:	mov	x2, x26
     8a4:	mov	x1, x28
     8a8:	mov	x4, x23
     8ac:	mov	x3, x22
     8b0:	mov	x0, x21
     8b4:	bl	0 <__asan_backtrace_free>
     8b8:	ldr	x7, [sp, #120]
     8bc:	ldr	x26, [sp, #104]
     8c0:	mov	x28, x7
     8c4:	b	7d4 <elf_find_debugfile_by_debuglink+0x1cc>
     8c8:	add	x20, x3, #0x0
     8cc:	mov	x26, #0x0                   	// #0
     8d0:	b	6d0 <elf_find_debugfile_by_debuglink+0xc8>
     8d4:	mov	w19, #0xffffffff            	// #-1
     8d8:	b	774 <elf_find_debugfile_by_debuglink+0x16c>

00000000000008dc <elf_zlib_inflate_and_verify>:
     8dc:	stp	x29, x30, [sp, #-240]!
     8e0:	mov	x29, sp
     8e4:	stp	x19, x20, [sp, #16]
     8e8:	mov	x19, x3
     8ec:	mov	x20, x3
     8f0:	stp	x21, x22, [sp, #32]
     8f4:	add	x21, x0, x1
     8f8:	mov	x22, x2
     8fc:	stp	x23, x24, [sp, #48]
     900:	add	x23, sp, #0xc4
     904:	stp	x25, x26, [sp, #64]
     908:	mov	x26, x4
     90c:	stp	x27, x28, [sp, #80]
     910:	add	x27, x3, x4
     914:	str	x0, [sp, #128]
     918:	str	x0, [sp, #200]
     91c:	adrp	x0, 0 <elf_nodebug>
     920:	add	x0, x0, #0x0
     924:	str	x1, [sp, #144]
     928:	str	x0, [sp, #152]
     92c:	add	x0, x0, #0x200
     930:	str	x0, [sp, #160]
     934:	ldr	x0, [sp, #200]
     938:	sub	x1, x21, x0
     93c:	cmp	x1, #0x4
     940:	b.gt	96c <elf_zlib_inflate_and_verify+0x90>
     944:	cmp	x27, x20
     948:	b.eq	1388 <elf_zlib_inflate_and_verify+0xaac>  // b.none
     94c:	mov	w0, #0x0                   	// #0
     950:	ldp	x19, x20, [sp, #16]
     954:	ldp	x21, x22, [sp, #32]
     958:	ldp	x23, x24, [sp, #48]
     95c:	ldp	x25, x26, [sp, #64]
     960:	ldp	x27, x28, [sp, #80]
     964:	ldp	x29, x30, [sp], #240
     968:	ret
     96c:	ldrb	w1, [x0]
     970:	and	w2, w1, #0xf
     974:	cmp	w2, #0x8
     978:	b.ne	94c <elf_zlib_inflate_and_verify+0x70>  // b.any
     97c:	cmp	w1, #0x7f
     980:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
     984:	ldrb	w2, [x0, #1]
     988:	ldrh	w1, [x0]
     98c:	rev16	w1, w1
     990:	tbnz	w2, #5, 94c <elf_zlib_inflate_and_verify+0x70>
     994:	and	x1, x1, #0xffff
     998:	mov	x3, #0x1f                  	// #31
     99c:	udiv	x2, x1, x3
     9a0:	msub	x1, x2, x3, x1
     9a4:	cbnz	x1, 94c <elf_zlib_inflate_and_verify+0x70>
     9a8:	add	x0, x0, #0x2
     9ac:	str	wzr, [sp, #196]
     9b0:	stp	x0, xzr, [sp, #200]
     9b4:	ldr	x0, [sp, #200]
     9b8:	tst	x0, #0x3
     9bc:	b.ne	ac8 <elf_zlib_inflate_and_verify+0x1ec>  // b.any
     9c0:	add	x24, sp, #0xd0
     9c4:	add	x25, sp, #0xc8
     9c8:	mov	x3, x23
     9cc:	mov	x2, x24
     9d0:	mov	x1, x21
     9d4:	mov	x0, x25
     9d8:	bl	3f0 <elf_zlib_fetch>
     9dc:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     9e0:	ldr	x0, [sp, #208]
     9e4:	str	x0, [sp, #104]
     9e8:	ldr	w0, [sp, #104]
     9ec:	ubfx	w1, w0, #1, #2
     9f0:	ldr	x0, [sp, #104]
     9f4:	cmp	w1, #0x3
     9f8:	lsr	x0, x0, #3
     9fc:	str	x0, [sp, #208]
     a00:	ldr	w0, [sp, #196]
     a04:	sub	w0, w0, #0x3
     a08:	str	w0, [sp, #196]
     a0c:	b.eq	94c <elf_zlib_inflate_and_verify+0x70>  // b.none
     a10:	cbnz	w1, b1c <elf_zlib_inflate_and_verify+0x240>
     a14:	ldr	x1, [sp, #200]
     a18:	mov	w2, #0x0                   	// #0
     a1c:	mov	x3, x1
     a20:	cmp	w0, #0x8
     a24:	sub	x1, x1, #0x1
     a28:	b.hi	aec <elf_zlib_inflate_and_verify+0x210>  // b.pmore
     a2c:	cbz	w2, a34 <elf_zlib_inflate_and_verify+0x158>
     a30:	str	x3, [sp, #200]
     a34:	ldr	x1, [sp, #200]
     a38:	str	wzr, [sp, #196]
     a3c:	str	xzr, [sp, #208]
     a40:	sub	x0, x21, x1
     a44:	cmp	x0, #0x3
     a48:	b.le	94c <elf_zlib_inflate_and_verify+0x70>
     a4c:	ldrb	w0, [x1]
     a50:	add	x1, x1, #0x4
     a54:	ldurb	w2, [x1, #-3]
     a58:	ldurb	w3, [x1, #-2]
     a5c:	orr	w2, w0, w2, lsl #8
     a60:	ldurb	w0, [x1, #-1]
     a64:	str	x1, [sp, #200]
     a68:	orr	w0, w3, w0, lsl #8
     a6c:	mvn	w0, w0
     a70:	cmp	w2, w0, uxth
     a74:	b.ne	94c <elf_zlib_inflate_and_verify+0x70>  // b.any
     a78:	sub	x0, x21, x1
     a7c:	cmp	w2, w0
     a80:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
     a84:	sub	x0, x27, x20
     a88:	cmp	w2, w0
     a8c:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
     a90:	and	x25, x2, #0xffff
     a94:	mov	x0, x20
     a98:	mov	x2, x25
     a9c:	bl	0 <__asan_internal_memcpy>
     aa0:	ldr	x2, [sp, #200]
     aa4:	add	x20, x20, x25
     aa8:	add	x2, x2, x25
     aac:	str	x2, [sp, #200]
     ab0:	ldr	x0, [sp, #200]
     ab4:	tst	x0, #0x3
     ab8:	b.ne	af8 <elf_zlib_inflate_and_verify+0x21c>  // b.any
     abc:	ldr	x0, [sp, #104]
     ac0:	tbz	w0, #0, 9c4 <elf_zlib_inflate_and_verify+0xe8>
     ac4:	b	934 <elf_zlib_inflate_and_verify+0x58>
     ac8:	ldrb	w2, [x0], #1
     acc:	ldr	w1, [sp, #196]
     ad0:	lsl	x3, x2, x1
     ad4:	add	w1, w1, #0x8
     ad8:	ldr	x2, [sp, #208]
     adc:	str	w1, [sp, #196]
     ae0:	orr	x2, x2, x3
     ae4:	stp	x0, x2, [sp, #200]
     ae8:	b	9b4 <elf_zlib_inflate_and_verify+0xd8>
     aec:	sub	w0, w0, #0x8
     af0:	mov	w2, #0x1                   	// #1
     af4:	b	a1c <elf_zlib_inflate_and_verify+0x140>
     af8:	ldrb	w2, [x0], #1
     afc:	ldr	w1, [sp, #196]
     b00:	lsl	x3, x2, x1
     b04:	add	w1, w1, #0x8
     b08:	ldr	x2, [sp, #208]
     b0c:	str	w1, [sp, #196]
     b10:	orr	x2, x2, x3
     b14:	stp	x0, x2, [sp, #200]
     b18:	b	ab0 <elf_zlib_inflate_and_verify+0x1d4>
     b1c:	cmp	w1, #0x1
     b20:	b.eq	10dc <elf_zlib_inflate_and_verify+0x800>  // b.none
     b24:	mov	x1, x21
     b28:	mov	x0, x25
     b2c:	bl	3f0 <elf_zlib_fetch>
     b30:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     b34:	ldr	x0, [sp, #208]
     b38:	and	w1, w0, #0x1f
     b3c:	add	w1, w1, #0x101
     b40:	ubfx	w4, w0, #10, #4
     b44:	str	w1, [sp, #112]
     b48:	ubfx	w1, w0, #5, #5
     b4c:	lsr	x0, x0, #14
     b50:	str	x0, [sp, #208]
     b54:	ldr	w0, [sp, #196]
     b58:	add	w1, w1, #0x1
     b5c:	str	w1, [sp, #120]
     b60:	add	w28, w4, #0x4
     b64:	sub	w0, w0, #0xe
     b68:	str	w0, [sp, #196]
     b6c:	ldr	w0, [sp, #112]
     b70:	cmp	w0, #0x11e
     b74:	mov	w0, w1
     b78:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
     b7c:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
     b80:	add	x0, sp, #0xd8
     b84:	mov	x2, #0x13                  	// #19
     b88:	mov	w1, #0x0                   	// #0
     b8c:	str	x0, [sp, #136]
     b90:	bl	0 <__asan_internal_memset>
     b94:	mov	x3, x23
     b98:	mov	x2, x24
     b9c:	mov	x1, x21
     ba0:	mov	x0, x25
     ba4:	bl	3f0 <elf_zlib_fetch>
     ba8:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     bac:	ldr	x0, [sp, #208]
     bb0:	cmp	w28, #0x4
     bb4:	and	w1, w0, #0x7
     bb8:	strb	w1, [sp, #232]
     bbc:	ubfx	w1, w0, #3, #3
     bc0:	strb	w1, [sp, #233]
     bc4:	ubfx	w1, w0, #6, #3
     bc8:	strb	w1, [sp, #234]
     bcc:	ubfx	w1, w0, #9, #3
     bd0:	strb	w1, [sp, #216]
     bd4:	ldr	w1, [sp, #196]
     bd8:	lsr	x2, x0, #12
     bdc:	str	x2, [sp, #208]
     be0:	sub	w3, w1, #0xc
     be4:	str	w3, [sp, #196]
     be8:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     bec:	and	w2, w2, #0x7
     bf0:	lsr	x0, x0, #15
     bf4:	sub	w1, w1, #0xf
     bf8:	str	w1, [sp, #196]
     bfc:	str	x0, [sp, #208]
     c00:	cmp	w28, #0x5
     c04:	strb	w2, [sp, #224]
     c08:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     c0c:	mov	x3, x23
     c10:	mov	x2, x24
     c14:	mov	x1, x21
     c18:	mov	x0, x25
     c1c:	bl	3f0 <elf_zlib_fetch>
     c20:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     c24:	ldr	x0, [sp, #208]
     c28:	cmp	w28, #0x6
     c2c:	and	w1, w0, #0x7
     c30:	strb	w1, [sp, #223]
     c34:	ldr	w1, [sp, #196]
     c38:	lsr	x2, x0, #3
     c3c:	str	x2, [sp, #208]
     c40:	sub	w3, w1, #0x3
     c44:	str	w3, [sp, #196]
     c48:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     c4c:	and	w2, w2, #0x7
     c50:	sub	w3, w1, #0x6
     c54:	str	w3, [sp, #196]
     c58:	cmp	w28, #0x7
     c5c:	strb	w2, [sp, #225]
     c60:	lsr	x2, x0, #6
     c64:	str	x2, [sp, #208]
     c68:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     c6c:	and	w2, w2, #0x7
     c70:	sub	w3, w1, #0x9
     c74:	str	w3, [sp, #196]
     c78:	cmp	w28, #0x8
     c7c:	strb	w2, [sp, #222]
     c80:	lsr	x2, x0, #9
     c84:	str	x2, [sp, #208]
     c88:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     c8c:	and	w2, w2, #0x7
     c90:	sub	w3, w1, #0xc
     c94:	str	w3, [sp, #196]
     c98:	cmp	w28, #0x9
     c9c:	strb	w2, [sp, #226]
     ca0:	lsr	x2, x0, #12
     ca4:	str	x2, [sp, #208]
     ca8:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     cac:	and	w2, w2, #0x7
     cb0:	lsr	x0, x0, #15
     cb4:	sub	w1, w1, #0xf
     cb8:	str	w1, [sp, #196]
     cbc:	str	x0, [sp, #208]
     cc0:	cmp	w28, #0xa
     cc4:	strb	w2, [sp, #221]
     cc8:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     ccc:	mov	x3, x23
     cd0:	mov	x2, x24
     cd4:	mov	x1, x21
     cd8:	mov	x0, x25
     cdc:	bl	3f0 <elf_zlib_fetch>
     ce0:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     ce4:	ldr	x0, [sp, #208]
     ce8:	cmp	w28, #0xb
     cec:	and	w1, w0, #0x7
     cf0:	strb	w1, [sp, #227]
     cf4:	ldr	w1, [sp, #196]
     cf8:	lsr	x2, x0, #3
     cfc:	str	x2, [sp, #208]
     d00:	sub	w3, w1, #0x3
     d04:	str	w3, [sp, #196]
     d08:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     d0c:	and	w2, w2, #0x7
     d10:	sub	w3, w1, #0x6
     d14:	str	w3, [sp, #196]
     d18:	cmp	w28, #0xc
     d1c:	strb	w2, [sp, #220]
     d20:	lsr	x2, x0, #6
     d24:	str	x2, [sp, #208]
     d28:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     d2c:	and	w2, w2, #0x7
     d30:	sub	w3, w1, #0x9
     d34:	str	w3, [sp, #196]
     d38:	cmp	w28, #0xd
     d3c:	strb	w2, [sp, #228]
     d40:	lsr	x2, x0, #9
     d44:	str	x2, [sp, #208]
     d48:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     d4c:	and	w2, w2, #0x7
     d50:	sub	w3, w1, #0xc
     d54:	str	w3, [sp, #196]
     d58:	cmp	w28, #0xe
     d5c:	strb	w2, [sp, #219]
     d60:	lsr	x2, x0, #12
     d64:	str	x2, [sp, #208]
     d68:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     d6c:	and	w2, w2, #0x7
     d70:	lsr	x0, x0, #15
     d74:	sub	w1, w1, #0xf
     d78:	str	w1, [sp, #196]
     d7c:	str	x0, [sp, #208]
     d80:	cmp	w28, #0xf
     d84:	strb	w2, [sp, #229]
     d88:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     d8c:	mov	x3, x23
     d90:	mov	x2, x24
     d94:	mov	x1, x21
     d98:	mov	x0, x25
     d9c:	bl	3f0 <elf_zlib_fetch>
     da0:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     da4:	ldr	x0, [sp, #208]
     da8:	cmp	w28, #0x10
     dac:	and	w1, w0, #0x7
     db0:	strb	w1, [sp, #218]
     db4:	ldr	w1, [sp, #196]
     db8:	lsr	x2, x0, #3
     dbc:	str	x2, [sp, #208]
     dc0:	sub	w3, w1, #0x3
     dc4:	str	w3, [sp, #196]
     dc8:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     dcc:	and	w2, w2, #0x7
     dd0:	sub	w3, w1, #0x6
     dd4:	str	w3, [sp, #196]
     dd8:	cmp	w28, #0x11
     ddc:	strb	w2, [sp, #230]
     de0:	lsr	x2, x0, #6
     de4:	str	x2, [sp, #208]
     de8:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     dec:	and	w2, w2, #0x7
     df0:	sub	w3, w1, #0x9
     df4:	str	w3, [sp, #196]
     df8:	cmp	w28, #0x12
     dfc:	strb	w2, [sp, #217]
     e00:	lsr	x2, x0, #9
     e04:	str	x2, [sp, #208]
     e08:	b.eq	e24 <elf_zlib_inflate_and_verify+0x548>  // b.none
     e0c:	and	w2, w2, #0x7
     e10:	lsr	x0, x0, #12
     e14:	sub	w1, w1, #0xc
     e18:	str	w1, [sp, #196]
     e1c:	str	x0, [sp, #208]
     e20:	strb	w2, [sp, #231]
     e24:	ldr	x0, [sp, #136]
     e28:	mov	x3, x22
     e2c:	mov	x2, x22
     e30:	mov	x1, #0x13                  	// #19
     e34:	bl	84 <elf_zlib_inflate_table>
     e38:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     e3c:	mov	x0, #0x1278                	// #4728
     e40:	add	x28, x22, x0
     e44:	ldr	w0, [sp, #112]
     e48:	mov	x4, x28
     e4c:	str	x0, [sp, #112]
     e50:	ldr	w0, [sp, #120]
     e54:	str	x0, [sp, #136]
     e58:	ldr	x0, [sp, #112]
     e5c:	ldr	x1, [sp, #136]
     e60:	add	x5, x0, x1
     e64:	adrp	x0, 0 <elf_nodebug>
     e68:	add	x5, x28, x5
     e6c:	add	x0, x0, #0x0
     e70:	str	x0, [sp, #120]
     e74:	cmp	x5, x4
     e78:	b.hi	f38 <elf_zlib_inflate_and_verify+0x65c>  // b.pmore
     e7c:	add	x0, x22, #0x1, lsl #12
     e80:	ldrb	w0, [x0, #888]
     e84:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     e88:	ldr	x1, [sp, #112]
     e8c:	mov	x3, x22
     e90:	mov	x2, x22
     e94:	mov	x0, x28
     e98:	bl	84 <elf_zlib_inflate_table>
     e9c:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     ea0:	add	x0, x22, #0x800
     ea4:	str	x0, [sp, #120]
     ea8:	ldr	x1, [sp, #136]
     eac:	mov	x3, x0
     eb0:	ldr	x0, [sp, #112]
     eb4:	mov	x2, x22
     eb8:	add	x0, x28, x0
     ebc:	bl	84 <elf_zlib_inflate_table>
     ec0:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     ec4:	str	x22, [sp, #112]
     ec8:	mov	x3, x23
     ecc:	mov	x2, x24
     ed0:	mov	x1, x21
     ed4:	mov	x0, x25
     ed8:	bl	3f0 <elf_zlib_fetch>
     edc:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     ee0:	ldr	x3, [sp, #208]
     ee4:	ldr	x1, [sp, #112]
     ee8:	and	x0, x3, #0xff
     eec:	ldrh	w2, [x1, x0, lsl #1]
     ef0:	ldr	w0, [sp, #196]
     ef4:	and	w4, w2, #0x1ff
     ef8:	ubfx	x1, x2, #9, #3
     efc:	tbnz	w2, #12, 10f0 <elf_zlib_inflate_and_verify+0x814>
     f00:	add	w2, w1, #0x1
     f04:	mov	w28, w4
     f08:	sub	w0, w0, #0x1
     f0c:	lsr	x3, x3, x2
     f10:	str	x3, [sp, #208]
     f14:	sub	w0, w0, w1
     f18:	str	w0, [sp, #196]
     f1c:	cmp	w28, #0xff
     f20:	b.hi	112c <elf_zlib_inflate_and_verify+0x850>  // b.pmore
     f24:	cmp	x27, x20
     f28:	b.eq	94c <elf_zlib_inflate_and_verify+0x70>  // b.none
     f2c:	strb	w28, [x20], #1
     f30:	prfm	pstl1keep, [x20]
     f34:	b	ec8 <elf_zlib_inflate_and_verify+0x5ec>
     f38:	mov	x3, x23
     f3c:	mov	x2, x24
     f40:	mov	x1, x21
     f44:	mov	x0, x25
     f48:	stp	x5, x4, [sp, #168]
     f4c:	bl	3f0 <elf_zlib_fetch>
     f50:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
     f54:	ldr	x0, [sp, #208]
     f58:	and	x1, x0, #0xff
     f5c:	ldrh	w3, [x22, x1, lsl #1]
     f60:	tbnz	w3, #12, 94c <elf_zlib_inflate_and_verify+0x70>
     f64:	ubfx	x2, x3, #9, #3
     f68:	tst	w3, #0x1f0
     f6c:	add	w1, w2, #0x1
     f70:	ldp	x5, x4, [sp, #168]
     f74:	lsr	x0, x0, x1
     f78:	ldr	w1, [sp, #196]
     f7c:	str	x0, [sp, #208]
     f80:	sub	w1, w1, w2
     f84:	sub	w2, w1, #0x1
     f88:	str	w2, [sp, #196]
     f8c:	and	w2, w3, #0x1ff
     f90:	b.ne	f9c <elf_zlib_inflate_and_verify+0x6c0>  // b.any
     f94:	strb	w2, [x4], #1
     f98:	b	e74 <elf_zlib_inflate_and_verify+0x598>
     f9c:	cmp	w2, #0x10
     fa0:	b.ne	1010 <elf_zlib_inflate_and_verify+0x734>  // b.any
     fa4:	cmp	x28, x4
     fa8:	b.eq	94c <elf_zlib_inflate_and_verify+0x70>  // b.none
     fac:	and	w2, w0, #0x3
     fb0:	sub	w1, w1, #0x3
     fb4:	lsr	x0, x0, #2
     fb8:	str	w1, [sp, #196]
     fbc:	str	x0, [sp, #208]
     fc0:	add	w2, w2, #0x3
     fc4:	sub	x0, x5, x4
     fc8:	cmp	w2, w0
     fcc:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
     fd0:	ldurb	w0, [x4, #-1]
     fd4:	cmp	w2, #0x5
     fd8:	b.eq	1008 <elf_zlib_inflate_and_verify+0x72c>  // b.none
     fdc:	cmp	w2, #0x6
     fe0:	b.eq	1004 <elf_zlib_inflate_and_verify+0x728>  // b.none
     fe4:	cmp	w2, #0x4
     fe8:	b.ne	ff0 <elf_zlib_inflate_and_verify+0x714>  // b.any
     fec:	strb	w0, [x4], #1
     ff0:	add	x4, x4, #0x3
     ff4:	sturb	w0, [x4, #-3]
     ff8:	sturb	w0, [x4, #-2]
     ffc:	sturb	w0, [x4, #-1]
    1000:	b	e74 <elf_zlib_inflate_and_verify+0x598>
    1004:	strb	w0, [x4], #1
    1008:	strb	w0, [x4], #1
    100c:	b	fec <elf_zlib_inflate_and_verify+0x710>
    1010:	cmp	w2, #0x11
    1014:	b.ne	108c <elf_zlib_inflate_and_verify+0x7b0>  // b.any
    1018:	and	w2, w0, #0x7
    101c:	sub	w1, w1, #0x4
    1020:	lsr	x0, x0, #3
    1024:	str	w1, [sp, #196]
    1028:	str	x0, [sp, #208]
    102c:	add	w3, w2, #0x3
    1030:	sub	x0, x5, x4
    1034:	cmp	w3, w0
    1038:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    103c:	sub	w0, w2, #0x1
    1040:	cmp	w0, #0x6
    1044:	b.hi	1078 <elf_zlib_inflate_and_verify+0x79c>  // b.pmore
    1048:	ldr	x1, [sp, #120]
    104c:	ldrb	w0, [x1, w0, uxtw]
    1050:	adr	x1, 105c <elf_zlib_inflate_and_verify+0x780>
    1054:	add	x0, x1, w0, sxtb #2
    1058:	br	x0
    105c:	strb	wzr, [x4], #1
    1060:	strb	wzr, [x4], #1
    1064:	strb	wzr, [x4], #1
    1068:	strb	wzr, [x4], #1
    106c:	strb	wzr, [x4], #1
    1070:	strb	wzr, [x4], #1
    1074:	strb	wzr, [x4], #1
    1078:	mov	x0, x4
    107c:	strh	wzr, [x0], #3
    1080:	strb	wzr, [x4, #2]
    1084:	mov	x4, x0
    1088:	b	e74 <elf_zlib_inflate_and_verify+0x598>
    108c:	cmp	w2, #0x12
    1090:	b.ne	94c <elf_zlib_inflate_and_verify+0x70>  // b.any
    1094:	and	w2, w0, #0x7f
    1098:	sub	w1, w1, #0x8
    109c:	lsr	x0, x0, #7
    10a0:	str	x5, [sp, #184]
    10a4:	str	w1, [sp, #196]
    10a8:	add	w2, w2, #0xb
    10ac:	str	x0, [sp, #208]
    10b0:	sub	x0, x5, x4
    10b4:	cmp	w2, w0
    10b8:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    10bc:	mov	x0, x4
    10c0:	mov	w1, #0x0                   	// #0
    10c4:	stp	x4, x2, [sp, #168]
    10c8:	bl	0 <__asan_internal_memset>
    10cc:	ldp	x4, x2, [sp, #168]
    10d0:	ldr	x5, [sp, #184]
    10d4:	add	x4, x4, x2
    10d8:	b	e74 <elf_zlib_inflate_and_verify+0x598>
    10dc:	ldr	x0, [sp, #152]
    10e0:	str	x0, [sp, #120]
    10e4:	ldr	x0, [sp, #160]
    10e8:	str	x0, [sp, #112]
    10ec:	b	ec8 <elf_zlib_inflate_and_verify+0x5ec>
    10f0:	mov	w2, #0x1                   	// #1
    10f4:	add	w4, w4, #0x100
    10f8:	lsl	w1, w2, w1
    10fc:	sub	w1, w1, #0x1
    1100:	and	x1, x1, x3, lsr #8
    1104:	sub	w0, w0, #0x8
    1108:	ldr	x2, [sp, #112]
    110c:	add	x1, x1, w4, sxtw
    1110:	ldrh	w4, [x2, x1, lsl #1]
    1114:	and	w28, w4, #0x1ff
    1118:	ubfx	x1, x4, #9, #3
    111c:	add	w2, w1, #0x8
    1120:	lsr	x3, x3, x2
    1124:	str	x3, [sp, #208]
    1128:	b	f14 <elf_zlib_inflate_and_verify+0x638>
    112c:	cmp	w28, #0x100
    1130:	b.eq	abc <elf_zlib_inflate_and_verify+0x1e0>  // b.none
    1134:	cmp	w28, #0x108
    1138:	b.hi	11c4 <elf_zlib_inflate_and_verify+0x8e8>  // b.pmore
    113c:	sub	w28, w28, #0xfe
    1140:	mov	x3, x23
    1144:	mov	x2, x24
    1148:	mov	x1, x21
    114c:	mov	x0, x25
    1150:	bl	3f0 <elf_zlib_fetch>
    1154:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
    1158:	ldr	x2, [sp, #208]
    115c:	ldr	x1, [sp, #120]
    1160:	and	x0, x2, #0xff
    1164:	ldrh	w5, [x1, x0, lsl #1]
    1168:	ldr	w0, [sp, #196]
    116c:	and	w3, w5, #0x1ff
    1170:	ubfx	x1, x5, #9, #3
    1174:	tbnz	w5, #12, 1244 <elf_zlib_inflate_and_verify+0x968>
    1178:	mov	w8, w3
    117c:	sub	w0, w0, #0x1
    1180:	add	w3, w1, #0x1
    1184:	sub	w0, w0, w1
    1188:	lsr	x2, x2, x3
    118c:	str	x2, [sp, #208]
    1190:	str	w0, [sp, #196]
    1194:	cbnz	w8, 1284 <elf_zlib_inflate_and_verify+0x9a8>
    1198:	cmp	x19, x20
    119c:	b.eq	94c <elf_zlib_inflate_and_verify+0x70>  // b.none
    11a0:	sub	x0, x27, x20
    11a4:	cmp	w28, w0
    11a8:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    11ac:	ldurb	w1, [x20, #-1]
    11b0:	mov	x2, x28
    11b4:	mov	x0, x20
    11b8:	bl	0 <__asan_internal_memset>
    11bc:	add	x20, x20, x28
    11c0:	b	ec8 <elf_zlib_inflate_and_verify+0x5ec>
    11c4:	cmp	w28, #0x11d
    11c8:	b.eq	123c <elf_zlib_inflate_and_verify+0x960>  // b.none
    11cc:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    11d0:	mov	x3, x23
    11d4:	mov	x2, x24
    11d8:	mov	x1, x21
    11dc:	mov	x0, x25
    11e0:	bl	3f0 <elf_zlib_fetch>
    11e4:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
    11e8:	sub	w4, w28, #0x109
    11ec:	mov	w2, #0x1                   	// #1
    11f0:	ldr	x3, [sp, #208]
    11f4:	lsr	w0, w4, #2
    11f8:	add	w1, w0, #0x1
    11fc:	and	w4, w4, #0x3
    1200:	lsl	w4, w4, w1
    1204:	add	w8, w4, #0xb
    1208:	lsl	w4, w2, w0
    120c:	mov	w0, #0xffffffff            	// #-1
    1210:	sub	w4, w4, #0x1
    1214:	lsl	w2, w0, w1
    1218:	ldr	w0, [sp, #196]
    121c:	bic	w2, w3, w2
    1220:	add	w4, w2, w4, lsl #3
    1224:	lsr	x3, x3, x1
    1228:	add	w28, w4, w8
    122c:	sub	w1, w0, w1
    1230:	str	w1, [sp, #196]
    1234:	str	x3, [sp, #208]
    1238:	b	1140 <elf_zlib_inflate_and_verify+0x864>
    123c:	mov	x28, #0x102                 	// #258
    1240:	b	1140 <elf_zlib_inflate_and_verify+0x864>
    1244:	mov	w4, #0x1                   	// #1
    1248:	add	w3, w3, #0x100
    124c:	lsl	w1, w4, w1
    1250:	sub	w1, w1, #0x1
    1254:	and	x1, x1, x2, lsr #8
    1258:	sub	w0, w0, #0x8
    125c:	add	x1, x1, w3, sxtw
    1260:	ldr	x3, [sp, #120]
    1264:	ldrh	w3, [x3, x1, lsl #1]
    1268:	and	w8, w3, #0x1ff
    126c:	ubfx	x5, x3, #9, #3
    1270:	add	w1, w5, #0x8
    1274:	sub	w0, w0, w5
    1278:	lsr	x2, x2, x1
    127c:	str	x2, [sp, #208]
    1280:	b	1190 <elf_zlib_inflate_and_verify+0x8b4>
    1284:	cmp	w8, #0x1d
    1288:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    128c:	cmp	w8, #0x3
    1290:	b.hi	12d4 <elf_zlib_inflate_and_verify+0x9f8>  // b.pmore
    1294:	add	w3, w8, #0x1
    1298:	sub	x0, x20, x19
    129c:	cmp	w3, w0
    12a0:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    12a4:	sub	x0, x27, x20
    12a8:	cmp	w28, w0
    12ac:	b.hi	94c <elf_zlib_inflate_and_verify+0x70>  // b.pmore
    12b0:	mov	w5, w3
    12b4:	cmp	w28, w3
    12b8:	neg	x5, x5
    12bc:	b.hi	1340 <elf_zlib_inflate_and_verify+0xa64>  // b.pmore
    12c0:	mov	x2, x28
    12c4:	add	x1, x20, x5
    12c8:	mov	x0, x20
    12cc:	bl	0 <__asan_internal_memcpy>
    12d0:	b	11bc <elf_zlib_inflate_and_verify+0x8e0>
    12d4:	mov	x3, x23
    12d8:	mov	x2, x24
    12dc:	mov	x1, x21
    12e0:	mov	x0, x25
    12e4:	bl	3f0 <elf_zlib_fetch>
    12e8:	cbz	w0, 94c <elf_zlib_inflate_and_verify+0x70>
    12ec:	sub	w3, w8, #0x4
    12f0:	ldr	x5, [sp, #208]
    12f4:	lsr	w0, w3, #1
    12f8:	add	w2, w0, #0x1
    12fc:	and	w3, w3, #0x1
    1300:	lsl	w3, w3, w2
    1304:	add	w1, w3, #0x5
    1308:	mov	w3, #0x1                   	// #1
    130c:	lsl	w3, w3, w0
    1310:	mov	w0, #0xffffffff            	// #-1
    1314:	sub	w3, w3, #0x1
    1318:	lsl	w0, w0, w2
    131c:	bic	w0, w5, w0
    1320:	lsr	x5, x5, x2
    1324:	add	w3, w0, w3, lsl #2
    1328:	ldr	w0, [sp, #196]
    132c:	add	w3, w3, w1
    1330:	str	x5, [sp, #208]
    1334:	sub	w2, w0, w2
    1338:	str	w2, [sp, #196]
    133c:	b	1298 <elf_zlib_inflate_and_verify+0x9bc>
    1340:	cmp	w3, w28
    1344:	add	x1, x20, x5
    1348:	csel	w6, w3, w28, ls  // ls = plast
    134c:	csel	w2, w3, w28, ls  // ls = plast
    1350:	mov	x0, x20
    1354:	str	x5, [sp, #136]
    1358:	str	x2, [sp, #168]
    135c:	str	w3, [sp, #176]
    1360:	str	w6, [sp, #184]
    1364:	bl	0 <__asan_internal_memcpy>
    1368:	ldr	x2, [sp, #168]
    136c:	ldr	w6, [sp, #184]
    1370:	ldr	w3, [sp, #176]
    1374:	add	x20, x20, x2
    1378:	subs	w28, w28, w6
    137c:	ldr	x5, [sp, #136]
    1380:	b.ne	1340 <elf_zlib_inflate_and_verify+0xa64>  // b.any
    1384:	b	ec8 <elf_zlib_inflate_and_verify+0x5ec>
    1388:	ldr	x0, [sp, #144]
    138c:	mov	w8, #0x0                   	// #0
    1390:	ldr	x1, [sp, #128]
    1394:	sub	x0, x0, #0x4
    1398:	add	x0, x1, x0
    139c:	ldrb	w1, [x0], #1
    13a0:	cmp	x21, x0
    13a4:	orr	w8, w1, w8, lsl #8
    13a8:	b.ne	139c <elf_zlib_inflate_and_verify+0xac0>  // b.any
    13ac:	mov	w13, #0x0                   	// #0
    13b0:	mov	w12, #0x1                   	// #1
    13b4:	mov	x15, #0x15af                	// #5551
    13b8:	mov	x14, #0x15b0                	// #5552
    13bc:	mov	w1, #0xfff1                	// #65521
    13c0:	cmp	x26, x15
    13c4:	b.hi	1414 <elf_zlib_inflate_and_verify+0xb38>  // b.pmore
    13c8:	and	x14, x26, #0xfffffffffffffff0
    13cc:	lsr	x4, x26, #4
    13d0:	add	x14, x19, x14
    13d4:	cmp	x19, x14
    13d8:	b.ne	14fc <elf_zlib_inflate_and_verify+0xc20>  // b.any
    13dc:	mov	x0, #0xfffffffffffffff0    	// #-16
    13e0:	mov	x3, #0x0                   	// #0
    13e4:	madd	x26, x4, x0, x26
    13e8:	cmp	x26, w3, uxtw
    13ec:	b.hi	15c4 <elf_zlib_inflate_and_verify+0xce8>  // b.pmore
    13f0:	mov	w2, #0xfff1                	// #65521
    13f4:	udiv	w1, w13, w2
    13f8:	udiv	w0, w12, w2
    13fc:	msub	w1, w1, w2, w13
    1400:	msub	w2, w0, w2, w12
    1404:	add	w1, w2, w1, lsl #16
    1408:	cmp	w1, w8
    140c:	cset	w0, eq  // eq = none
    1410:	b	950 <elf_zlib_inflate_and_verify+0x74>
    1414:	add	x16, x19, x14
    1418:	ldrb	w11, [x19]
    141c:	add	x19, x19, #0x10
    1420:	ldurb	w24, [x19, #-15]
    1424:	ldurb	w4, [x19, #-14]
    1428:	add	w11, w11, w12
    142c:	add	w24, w24, w11
    1430:	ldurb	w10, [x19, #-12]
    1434:	add	w3, w4, w24
    1438:	ldurb	w4, [x19, #-13]
    143c:	ldurb	w23, [x19, #-11]
    1440:	add	w11, w11, w24
    1444:	add	w25, w4, w3
    1448:	ldurb	w9, [x19, #-10]
    144c:	add	w10, w10, w25
    1450:	ldurb	w22, [x19, #-9]
    1454:	add	w23, w23, w10
    1458:	ldurb	w7, [x19, #-8]
    145c:	add	w9, w9, w23
    1460:	ldurb	w21, [x19, #-7]
    1464:	add	w22, w22, w9
    1468:	ldurb	w6, [x19, #-6]
    146c:	add	w7, w7, w22
    1470:	ldurb	w20, [x19, #-5]
    1474:	add	w21, w21, w7
    1478:	ldurb	w5, [x19, #-4]
    147c:	add	w6, w6, w21
    1480:	ldurb	w18, [x19, #-3]
    1484:	add	w20, w20, w6
    1488:	ldurb	w4, [x19, #-2]
    148c:	add	w5, w5, w20
    1490:	add	w10, w10, w23
    1494:	add	w18, w18, w5
    1498:	add	w9, w9, w22
    149c:	add	w0, w4, w18
    14a0:	add	w4, w3, w25
    14a4:	add	w4, w4, w11
    14a8:	ldurb	w17, [x19, #-1]
    14ac:	add	w4, w4, w10
    14b0:	add	w7, w7, w21
    14b4:	add	w4, w4, w9
    14b8:	add	w6, w6, w20
    14bc:	add	w2, w4, w7
    14c0:	add	w5, w5, w18
    14c4:	add	w2, w2, w6
    14c8:	add	w4, w17, w0, lsl #1
    14cc:	add	w2, w2, w5
    14d0:	add	w12, w17, w0
    14d4:	add	w2, w2, w4
    14d8:	cmp	x19, x16
    14dc:	add	w13, w13, w2
    14e0:	b.ne	1418 <elf_zlib_inflate_and_verify+0xb3c>  // b.any
    14e4:	udiv	w0, w12, w1
    14e8:	sub	x26, x26, x14
    14ec:	msub	w12, w0, w1, w12
    14f0:	udiv	w0, w13, w1
    14f4:	msub	w13, w0, w1, w13
    14f8:	b	13c0 <elf_zlib_inflate_and_verify+0xae4>
    14fc:	ldrb	w1, [x19]
    1500:	add	x19, x19, #0x10
    1504:	ldurb	w11, [x19, #-15]
    1508:	add	w2, w1, w12
    150c:	ldurb	w22, [x19, #-14]
    1510:	add	w11, w11, w2
    1514:	ldurb	w10, [x19, #-13]
    1518:	ldurb	w21, [x19, #-12]
    151c:	add	w22, w22, w11
    1520:	ldurb	w9, [x19, #-11]
    1524:	add	w10, w10, w22
    1528:	ldurb	w20, [x19, #-10]
    152c:	add	w21, w21, w10
    1530:	ldurb	w7, [x19, #-9]
    1534:	add	w9, w9, w21
    1538:	ldurb	w18, [x19, #-8]
    153c:	add	w20, w20, w9
    1540:	ldurb	w6, [x19, #-7]
    1544:	add	w7, w7, w20
    1548:	ldurb	w17, [x19, #-6]
    154c:	add	w18, w18, w7
    1550:	add	w1, w2, w13
    1554:	ldurb	w5, [x19, #-5]
    1558:	add	w6, w6, w18
    155c:	add	w11, w11, w22
    1560:	ldurb	w16, [x19, #-2]
    1564:	add	w17, w17, w6
    1568:	ldurb	w15, [x19, #-4]
    156c:	add	w1, w1, w11
    1570:	ldurb	w3, [x19, #-3]
    1574:	add	w10, w10, w21
    1578:	add	w5, w5, w17
    157c:	add	w1, w1, w10
    1580:	add	w9, w9, w20
    1584:	add	w15, w15, w5
    1588:	add	w1, w1, w9
    158c:	add	w7, w7, w18
    1590:	add	w3, w3, w15
    1594:	add	w0, w1, w7
    1598:	add	w6, w6, w17
    159c:	ldurb	w2, [x19, #-1]
    15a0:	add	w0, w0, w6
    15a4:	add	w5, w5, w15
    15a8:	add	w12, w16, w3
    15ac:	add	w0, w0, w5
    15b0:	add	w3, w16, w3, lsl #1
    15b4:	add	w12, w2, w12
    15b8:	add	w0, w0, w3
    15bc:	add	w13, w12, w0
    15c0:	b	13d4 <elf_zlib_inflate_and_verify+0xaf8>
    15c4:	ldrb	w0, [x19, x3]
    15c8:	add	x3, x3, #0x1
    15cc:	add	w12, w12, w0
    15d0:	add	w13, w13, w12
    15d4:	b	13e8 <elf_zlib_inflate_and_verify+0xb0c>

00000000000015d8 <elf_uncompress_zdebug.part.0>:
    15d8:	stp	x29, x30, [sp, #-80]!
    15dc:	mov	x29, sp
    15e0:	stp	x23, x24, [sp, #48]
    15e4:	mov	x23, x1
    15e8:	mov	x24, x2
    15ec:	mov	x2, x4
    15f0:	stp	x21, x22, [sp, #32]
    15f4:	mov	x22, x6
    15f8:	mov	x21, x7
    15fc:	str	x25, [sp, #64]
    1600:	mov	x25, x3
    1604:	mov	x3, x5
    1608:	add	x5, x23, #0x4
    160c:	mov	x1, #0x0                   	// #0
    1610:	stp	x19, x20, [sp, #16]
    1614:	mov	x20, #0x0                   	// #0
    1618:	ldrb	w4, [x5, x1]
    161c:	add	x1, x1, #0x1
    1620:	cmp	x1, #0x8
    1624:	orr	x20, x4, x20, lsl #8
    1628:	b.ne	1618 <elf_uncompress_zdebug.part.0+0x40>  // b.any
    162c:	ldr	x19, [x22]
    1630:	cbz	x19, 1640 <elf_uncompress_zdebug.part.0+0x68>
    1634:	ldr	x1, [x21]
    1638:	cmp	x20, x1
    163c:	b.ls	1650 <elf_uncompress_zdebug.part.0+0x78>  // b.plast
    1640:	mov	x1, x20
    1644:	bl	0 <__asan_backtrace_alloc>
    1648:	mov	x19, x0
    164c:	cbz	x0, 167c <elf_uncompress_zdebug.part.0+0xa4>
    1650:	mov	x4, x20
    1654:	mov	x3, x19
    1658:	mov	x2, x25
    165c:	sub	x1, x24, #0xc
    1660:	add	x0, x23, #0xc
    1664:	bl	8dc <elf_zlib_inflate_and_verify>
    1668:	cbz	w0, 1674 <elf_uncompress_zdebug.part.0+0x9c>
    166c:	str	x19, [x22]
    1670:	str	x20, [x21]
    1674:	mov	w0, #0x1                   	// #1
    1678:	b	1680 <elf_uncompress_zdebug.part.0+0xa8>
    167c:	mov	w0, #0x0                   	// #0
    1680:	ldp	x19, x20, [sp, #16]
    1684:	ldp	x21, x22, [sp, #32]
    1688:	ldp	x23, x24, [sp, #48]
    168c:	ldr	x25, [sp, #64]
    1690:	ldp	x29, x30, [sp], #80
    1694:	ret

0000000000001698 <elf_add>:
    1698:	sub	sp, sp, #0x490
    169c:	stp	x29, x30, [sp, #80]
    16a0:	add	x29, sp, #0x50
    16a4:	stp	x27, x28, [sp, #160]
    16a8:	mov	x28, x0
    16ac:	ldr	w0, [sp, #1192]
    16b0:	stp	x19, x20, [sp, #96]
    16b4:	mov	x19, x4
    16b8:	mov	x20, x5
    16bc:	stp	x21, x22, [sp, #112]
    16c0:	ldr	w21, [sp, #1184]
    16c4:	stp	x23, x24, [sp, #128]
    16c8:	mov	w24, w2
    16cc:	stp	x25, x26, [sp, #144]
    16d0:	stp	x3, x7, [sp, #240]
    16d4:	str	x6, [sp, #272]
    16d8:	str	x1, [sp, #296]
    16dc:	cbnz	w0, 16ec <elf_add+0x54>
    16e0:	ldr	x0, [sp, #1168]
    16e4:	str	wzr, [x7]
    16e8:	str	wzr, [x0]
    16ec:	add	x22, sp, #0x188
    16f0:	mov	x5, x20
    16f4:	mov	x6, x22
    16f8:	mov	x4, x19
    16fc:	mov	w1, w24
    1700:	mov	x0, x28
    1704:	mov	x3, #0x40                  	// #64
    1708:	mov	x2, #0x0                   	// #0
    170c:	bl	0 <__asan_backtrace_get_view>
    1710:	cbz	w0, 1760 <elf_add+0xc8>
    1714:	ldr	x1, [sp, #392]
    1718:	mov	x2, #0x40                  	// #64
    171c:	add	x0, sp, #0x290
    1720:	bl	0 <__asan_internal_memcpy>
    1724:	mov	x1, x22
    1728:	mov	x0, x28
    172c:	mov	x3, x20
    1730:	mov	x2, x19
    1734:	bl	0 <__asan_backtrace_release_view>
    1738:	ldr	w1, [sp, #656]
    173c:	mov	w0, #0x457f                	// #17791
    1740:	movk	w0, #0x464c, lsl #16
    1744:	cmp	w1, w0
    1748:	b.eq	176c <elf_add+0xd4>  // b.none
    174c:	adrp	x1, 0 <elf_nodebug>
    1750:	add	x1, x1, #0x0
    1754:	mov	w2, #0x0                   	// #0
    1758:	mov	x0, x20
    175c:	blr	x19
    1760:	mov	w27, #0x0                   	// #0
    1764:	mov	x22, #0x0                   	// #0
    1768:	b	27e0 <elf_add+0x1148>
    176c:	ldrb	w0, [sp, #662]
    1770:	cmp	w0, #0x1
    1774:	b.eq	1788 <elf_add+0xf0>  // b.none
    1778:	adrp	x1, 0 <elf_nodebug>
    177c:	mov	w2, #0x0                   	// #0
    1780:	add	x1, x1, #0x0
    1784:	b	1758 <elf_add+0xc0>
    1788:	ldrb	w0, [sp, #660]
    178c:	cmp	w0, #0x2
    1790:	b.eq	17a4 <elf_add+0x10c>  // b.none
    1794:	adrp	x1, 0 <elf_nodebug>
    1798:	mov	w2, #0x0                   	// #0
    179c:	add	x1, x1, #0x0
    17a0:	b	1758 <elf_add+0xc0>
    17a4:	ldrb	w0, [sp, #661]
    17a8:	sub	w0, w0, #0x1
    17ac:	and	w0, w0, #0xff
    17b0:	cmp	w0, #0x1
    17b4:	b.ls	17c8 <elf_add+0x130>  // b.plast
    17b8:	adrp	x1, 0 <elf_nodebug>
    17bc:	mov	w2, #0x0                   	// #0
    17c0:	add	x1, x1, #0x0
    17c4:	b	1758 <elf_add+0xc0>
    17c8:	cbz	w21, 17d8 <elf_add+0x140>
    17cc:	ldrh	w0, [sp, #672]
    17d0:	cmp	w0, #0x3
    17d4:	b.eq	270c <elf_add+0x1074>  // b.none
    17d8:	ldrh	w0, [sp, #716]
    17dc:	mov	w23, #0xffff                	// #65535
    17e0:	ldrh	w21, [sp, #718]
    17e4:	str	w0, [sp, #208]
    17e8:	cmp	w0, #0x0
    17ec:	ccmp	w21, w23, #0x4, ne  // ne = any
    17f0:	ldr	x26, [sp, #696]
    17f4:	b.ne	1874 <elf_add+0x1dc>  // b.any
    17f8:	cbz	x26, 1874 <elf_add+0x1dc>
    17fc:	add	x22, sp, #0x350
    1800:	mov	x5, x20
    1804:	mov	x6, x22
    1808:	mov	x4, x19
    180c:	mov	x2, x26
    1810:	mov	w1, w24
    1814:	mov	x0, x28
    1818:	mov	x3, #0x8                   	// #8
    181c:	bl	0 <__asan_backtrace_get_view>
    1820:	cbz	w0, 1760 <elf_add+0xc8>
    1824:	ldr	w1, [sp, #208]
    1828:	ldr	x0, [sp, #848]
    182c:	cbnz	w1, 1840 <elf_add+0x1a8>
    1830:	ldr	w1, [x0, #32]
    1834:	cmp	w21, w23
    1838:	str	w1, [sp, #208]
    183c:	b.ne	1860 <elf_add+0x1c8>  // b.any
    1840:	ldr	w21, [x0, #40]
    1844:	ldr	w0, [sp, #208]
    1848:	cmp	w0, w21
    184c:	mov	w0, #0xffff                	// #65535
    1850:	ccmp	w21, w0, #0x0, ls  // ls = plast
    1854:	mov	w0, w21
    1858:	sub	w21, w21, #0x100
    185c:	csel	w21, w21, w0, hi  // hi = pmore
    1860:	mov	x3, x20
    1864:	mov	x2, x19
    1868:	mov	x1, x22
    186c:	mov	x0, x28
    1870:	bl	0 <__asan_backtrace_release_view>
    1874:	ldr	w0, [sp, #208]
    1878:	add	x6, sp, #0x1a0
    187c:	mov	x5, x20
    1880:	mov	x4, x19
    1884:	sub	w3, w0, #0x1
    1888:	add	x2, x26, #0x40
    188c:	mov	w1, w24
    1890:	mov	x0, x28
    1894:	lsl	x3, x3, #6
    1898:	bl	0 <__asan_backtrace_get_view>
    189c:	cbz	w0, 1760 <elf_add+0xc8>
    18a0:	ldr	x0, [sp, #416]
    18a4:	sub	w21, w21, #0x1
    18a8:	str	x0, [sp, #264]
    18ac:	add	x6, sp, #0x1b8
    18b0:	mov	x5, x20
    18b4:	mov	x4, x19
    18b8:	add	x21, x0, x21, lsl #6
    18bc:	mov	w1, w24
    18c0:	ldr	x2, [x21, #24]
    18c4:	ldr	x0, [x21, #32]
    18c8:	str	x0, [sp, #320]
    18cc:	mov	x3, x0
    18d0:	mov	x0, x28
    18d4:	bl	0 <__asan_backtrace_get_view>
    18d8:	mov	w21, w0
    18dc:	cbz	w0, 2714 <elf_add+0x107c>
    18e0:	add	x21, sp, #0x350
    18e4:	mov	x2, #0x140                 	// #320
    18e8:	ldr	x0, [sp, #440]
    18ec:	mov	w1, #0x0                   	// #0
    18f0:	str	x0, [sp, #336]
    18f4:	mov	x0, x21
    18f8:	bl	0 <__asan_internal_memset>
    18fc:	mov	x22, #0x0                   	// #0
    1900:	mov	w0, #0x1                   	// #1
    1904:	str	w0, [sp, #224]
    1908:	adrp	x0, 0 <elf_nodebug>
    190c:	add	x0, x0, #0x0
    1910:	ldr	x26, [sp, #264]
    1914:	str	x0, [sp, #344]
    1918:	add	x0, sp, #0x260
    191c:	str	wzr, [sp, #184]
    1920:	str	wzr, [sp, #192]
    1924:	str	wzr, [sp, #200]
    1928:	str	wzr, [sp, #216]
    192c:	str	xzr, [sp, #232]
    1930:	str	xzr, [sp, #256]
    1934:	str	wzr, [sp, #280]
    1938:	str	wzr, [sp, #284]
    193c:	str	xzr, [sp, #288]
    1940:	str	xzr, [sp, #304]
    1944:	str	wzr, [sp, #312]
    1948:	str	wzr, [sp, #316]
    194c:	str	x0, [sp, #328]
    1950:	add	x0, x0, #0x18
    1954:	str	x21, [sp, #352]
    1958:	str	x0, [sp, #360]
    195c:	ldr	w0, [sp, #208]
    1960:	ldr	w1, [sp, #224]
    1964:	cmp	w0, w1
    1968:	b.hi	19c8 <elf_add+0x330>  // b.pmore
    196c:	ldr	w0, [sp, #216]
    1970:	ldr	w1, [sp, #284]
    1974:	cmp	w0, #0x0
    1978:	csel	w0, w0, w1, ne  // ne = any
    197c:	str	w0, [sp, #216]
    1980:	cmp	w0, #0x0
    1984:	ldr	w0, [sp, #1192]
    1988:	eor	w0, w0, #0x1
    198c:	and	w0, w0, #0x1
    1990:	csel	w0, w0, wzr, ne  // ne = any
    1994:	cbz	w0, 2138 <elf_add+0xaa0>
    1998:	ldr	w0, [sp, #216]
    199c:	sub	w21, w0, #0x1
    19a0:	ldr	x0, [sp, #264]
    19a4:	add	x21, x0, x21, lsl #6
    19a8:	ldr	w0, [sp, #208]
    19ac:	ldr	w26, [x21, #40]
    19b0:	cmp	w0, w26
    19b4:	b.hi	1d0c <elf_add+0x674>  // b.pmore
    19b8:	adrp	x1, 0 <elf_nodebug>
    19bc:	mov	w2, #0x0                   	// #0
    19c0:	add	x1, x1, #0x0
    19c4:	b	1a04 <elf_add+0x36c>
    19c8:	ldr	w0, [x26, #4]
    19cc:	cmp	w0, #0x2
    19d0:	b.eq	1a1c <elf_add+0x384>  // b.none
    19d4:	cmp	w0, #0xb
    19d8:	ldr	w1, [sp, #224]
    19dc:	ldr	w0, [sp, #284]
    19e0:	csel	w0, w0, w1, ne  // ne = any
    19e4:	str	w0, [sp, #284]
    19e8:	ldr	x0, [sp, #320]
    19ec:	ldr	w23, [x26]
    19f0:	cmp	x23, x0
    19f4:	b.cc	1a28 <elf_add+0x390>  // b.lo, b.ul, b.last
    19f8:	adrp	x1, 0 <elf_nodebug>
    19fc:	add	x1, x1, #0x0
    1a00:	mov	w2, #0x0                   	// #0
    1a04:	mov	w27, #0x0                   	// #0
    1a08:	mov	w25, #0x0                   	// #0
    1a0c:	mov	x0, x20
    1a10:	blr	x19
    1a14:	mov	w21, #0x1                   	// #1
    1a18:	b	272c <elf_add+0x1094>
    1a1c:	ldr	w0, [sp, #224]
    1a20:	str	w0, [sp, #216]
    1a24:	b	19e8 <elf_add+0x350>
    1a28:	ldr	x0, [sp, #336]
    1a2c:	mov	x21, #0x0                   	// #0
    1a30:	add	x23, x0, x23
    1a34:	ldr	x0, [sp, #344]
    1a38:	ldr	x1, [x0, x21, lsl #3]
    1a3c:	mov	x0, x23
    1a40:	bl	0 <__asan_internal_strcmp>
    1a44:	cbnz	w0, 1bf4 <elf_add+0x55c>
    1a48:	ldr	x2, [sp, #352]
    1a4c:	sbfiz	x0, x21, #5, #32
    1a50:	ldr	x1, [x26, #24]
    1a54:	str	x1, [x2, x0]
    1a58:	add	x1, sp, #0x358
    1a5c:	ldr	x2, [x26, #32]
    1a60:	str	x2, [x1, x0]
    1a64:	add	x2, sp, #0x368
    1a68:	ldr	x1, [x26, #8]
    1a6c:	ubfx	w1, w1, #11, #1
    1a70:	str	w1, [x2, x0]
    1a74:	ldr	w0, [sp, #1192]
    1a78:	ldr	x1, [sp, #1200]
    1a7c:	eor	w0, w0, #0x1
    1a80:	and	w0, w0, #0x1
    1a84:	cmp	x1, #0x0
    1a88:	csinc	w0, w0, wzr, eq  // eq = none
    1a8c:	cbz	w0, 1b6c <elf_add+0x4d4>
    1a90:	ldr	w0, [sp, #184]
    1a94:	cbnz	w0, 1b6c <elf_add+0x4d4>
    1a98:	mov	x0, x23
    1a9c:	adrp	x1, 0 <elf_nodebug>
    1aa0:	add	x1, x1, #0x0
    1aa4:	bl	0 <__asan_internal_strcmp>
    1aa8:	mov	w25, w0
    1aac:	cbnz	w0, 1b6c <elf_add+0x4d4>
    1ab0:	ldp	x2, x3, [x26, #24]
    1ab4:	add	x6, sp, #0x200
    1ab8:	mov	x5, x20
    1abc:	mov	x4, x19
    1ac0:	mov	w1, w24
    1ac4:	mov	x0, x28
    1ac8:	bl	0 <__asan_backtrace_get_view>
    1acc:	mov	w27, w0
    1ad0:	cbz	w0, 2830 <elf_add+0x1198>
    1ad4:	ldr	x21, [sp, #512]
    1ad8:	ldr	w0, [x21, #8]
    1adc:	cmp	w0, #0x3
    1ae0:	b.ne	1b38 <elf_add+0x4a0>  // b.any
    1ae4:	ldr	w0, [x21]
    1ae8:	cmp	w0, #0x4
    1aec:	b.ne	1b38 <elf_add+0x4a0>  // b.any
    1af0:	add	x27, x21, #0xc
    1af4:	adrp	x1, 0 <elf_nodebug>
    1af8:	mov	x0, x27
    1afc:	add	x1, x1, #0x0
    1b00:	mov	x2, #0x4                   	// #4
    1b04:	bl	0 <__asan_internal_strncmp>
    1b08:	cbnz	w0, 1b38 <elf_add+0x4a0>
    1b0c:	ldp	w0, w2, [x21]
    1b10:	ldr	x3, [x26, #32]
    1b14:	add	w0, w0, #0x3
    1b18:	and	w0, w0, #0xfffffffc
    1b1c:	add	w1, w2, #0xc
    1b20:	add	w1, w1, w0
    1b24:	cmp	x3, x1
    1b28:	b.hi	1b38 <elf_add+0x4a0>  // b.pmore
    1b2c:	add	x0, x27, w0, uxtw
    1b30:	str	x0, [sp, #256]
    1b34:	str	w2, [sp, #280]
    1b38:	ldr	w0, [sp, #1208]
    1b3c:	cbz	w0, 1b64 <elf_add+0x4cc>
    1b40:	ldr	w0, [sp, #280]
    1b44:	ldr	w1, [sp, #1208]
    1b48:	cmp	w0, w1
    1b4c:	b.ne	2838 <elf_add+0x11a0>  // b.any
    1b50:	mov	x2, x0
    1b54:	ldr	x0, [sp, #256]
    1b58:	ldr	x1, [sp, #1200]
    1b5c:	bl	0 <__asan_internal_memcmp>
    1b60:	cbnz	w0, 2838 <elf_add+0x11a0>
    1b64:	mov	w0, #0x1                   	// #1
    1b68:	str	w0, [sp, #184]
    1b6c:	ldr	w0, [sp, #192]
    1b70:	ldr	w1, [sp, #1192]
    1b74:	orr	w0, w0, w1
    1b78:	cbnz	w0, 1c08 <elf_add+0x570>
    1b7c:	adrp	x1, 0 <elf_nodebug>
    1b80:	mov	x0, x23
    1b84:	add	x1, x1, #0x0
    1b88:	bl	0 <__asan_internal_strcmp>
    1b8c:	cbnz	w0, 1c04 <elf_add+0x56c>
    1b90:	ldp	x2, x3, [x26, #24]
    1b94:	add	x6, sp, #0x218
    1b98:	mov	x5, x20
    1b9c:	mov	x4, x19
    1ba0:	mov	w1, w24
    1ba4:	mov	x0, x28
    1ba8:	bl	0 <__asan_backtrace_get_view>
    1bac:	mov	w25, w0
    1bb0:	cbz	w0, 2848 <elf_add+0x11b0>
    1bb4:	ldr	x1, [x26, #32]
    1bb8:	ldr	x21, [sp, #536]
    1bbc:	mov	x0, x21
    1bc0:	bl	0 <__asan_internal_strnlen>
    1bc4:	add	x0, x0, #0x3
    1bc8:	ldr	x1, [x26, #32]
    1bcc:	and	x0, x0, #0xfffffffffffffffc
    1bd0:	add	x2, x0, #0x4
    1bd4:	cmp	x2, x1
    1bd8:	b.hi	1be8 <elf_add+0x550>  // b.pmore
    1bdc:	ldr	w0, [x21, x0]
    1be0:	str	x21, [sp, #288]
    1be4:	str	w0, [sp, #312]
    1be8:	mov	w0, #0x1                   	// #1
    1bec:	str	w0, [sp, #192]
    1bf0:	b	1c08 <elf_add+0x570>
    1bf4:	add	x21, x21, #0x1
    1bf8:	cmp	x21, #0xa
    1bfc:	b.ne	1a34 <elf_add+0x39c>  // b.any
    1c00:	b	1a74 <elf_add+0x3dc>
    1c04:	str	wzr, [sp, #192]
    1c08:	ldr	w0, [sp, #200]
    1c0c:	cbnz	w0, 1c84 <elf_add+0x5ec>
    1c10:	adrp	x1, 0 <elf_nodebug>
    1c14:	mov	x0, x23
    1c18:	add	x1, x1, #0x0
    1c1c:	bl	0 <__asan_internal_strcmp>
    1c20:	cbnz	w0, 1c84 <elf_add+0x5ec>
    1c24:	ldp	x2, x3, [x26, #24]
    1c28:	add	x6, sp, #0x230
    1c2c:	mov	x5, x20
    1c30:	mov	x4, x19
    1c34:	mov	w1, w24
    1c38:	mov	x0, x28
    1c3c:	bl	0 <__asan_backtrace_get_view>
    1c40:	mov	w25, w0
    1c44:	cbz	w0, 284c <elf_add+0x11b4>
    1c48:	ldr	x1, [x26, #32]
    1c4c:	ldr	x0, [sp, #560]
    1c50:	str	x0, [sp, #232]
    1c54:	bl	0 <__asan_internal_strnlen>
    1c58:	ldr	x1, [x26, #32]
    1c5c:	cmp	x1, x0
    1c60:	b.ls	1c7c <elf_add+0x5e4>  // b.plast
    1c64:	ldr	x2, [sp, #232]
    1c68:	add	x0, x0, #0x1
    1c6c:	add	x2, x2, x0
    1c70:	sub	w0, w1, w0
    1c74:	str	x2, [sp, #304]
    1c78:	str	w0, [sp, #316]
    1c7c:	mov	w0, #0x1                   	// #1
    1c80:	str	w0, [sp, #200]
    1c84:	ldrh	w0, [sp, #674]
    1c88:	cmp	w0, #0x15
    1c8c:	b.ne	1cf8 <elf_add+0x660>  // b.any
    1c90:	ldr	w0, [sp, #704]
    1c94:	tbnz	w0, #1, 1cf8 <elf_add+0x660>
    1c98:	ldr	w21, [x26, #4]
    1c9c:	cmp	w21, #0x1
    1ca0:	b.ne	1cf8 <elf_add+0x660>  // b.any
    1ca4:	adrp	x1, 0 <elf_nodebug>
    1ca8:	mov	x0, x23
    1cac:	add	x1, x1, #0x0
    1cb0:	bl	0 <__asan_internal_strcmp>
    1cb4:	cbnz	w0, 1cf8 <elf_add+0x660>
    1cb8:	ldp	x2, x3, [x26, #24]
    1cbc:	mov	x5, x20
    1cc0:	ldr	x6, [sp, #360]
    1cc4:	mov	x4, x19
    1cc8:	mov	w1, w24
    1ccc:	mov	x0, x28
    1cd0:	bl	0 <__asan_backtrace_get_view>
    1cd4:	mov	w25, w0
    1cd8:	cbz	w0, 2854 <elf_add+0x11bc>
    1cdc:	ldr	x0, [x26, #16]
    1ce0:	str	x0, [sp, #608]
    1ce4:	ldr	x22, [sp, #328]
    1ce8:	ldr	x0, [sp, #632]
    1cec:	str	x0, [sp, #616]
    1cf0:	ldr	x0, [x26, #32]
    1cf4:	str	x0, [sp, #624]
    1cf8:	ldr	w0, [sp, #224]
    1cfc:	add	x26, x26, #0x40
    1d00:	add	w0, w0, #0x1
    1d04:	str	w0, [sp, #224]
    1d08:	b	195c <elf_add+0x2c4>
    1d0c:	ldp	x2, x3, [x21, #24]
    1d10:	add	x6, sp, #0x1d0
    1d14:	mov	x5, x20
    1d18:	mov	x4, x19
    1d1c:	mov	w1, w24
    1d20:	mov	x0, x28
    1d24:	bl	0 <__asan_backtrace_get_view>
    1d28:	mov	w25, w0
    1d2c:	cbz	w0, 284c <elf_add+0x11b4>
    1d30:	ldr	x0, [sp, #264]
    1d34:	sub	w26, w26, #0x1
    1d38:	add	x6, sp, #0x1e8
    1d3c:	mov	x5, x20
    1d40:	mov	x4, x19
    1d44:	mov	w1, w24
    1d48:	add	x26, x0, x26, lsl #6
    1d4c:	mov	x0, x28
    1d50:	ldp	x2, x3, [x26, #24]
    1d54:	bl	0 <__asan_backtrace_get_view>
    1d58:	mov	w27, w0
    1d5c:	cbz	w0, 285c <elf_add+0x11c4>
    1d60:	mov	x3, x20
    1d64:	mov	x2, x19
    1d68:	mov	x0, x28
    1d6c:	mov	x1, #0x18                  	// #24
    1d70:	bl	0 <__asan_backtrace_alloc>
    1d74:	mov	x25, x0
    1d78:	cbz	x0, 1eec <elf_add+0x854>
    1d7c:	ldr	x0, [x21, #32]
    1d80:	mov	x1, #0x18                  	// #24
    1d84:	ldr	x23, [sp, #464]
    1d88:	mov	x27, #0x0                   	// #0
    1d8c:	udiv	x0, x0, x1
    1d90:	ldr	x4, [sp, #488]
    1d94:	ldr	x6, [x26, #32]
    1d98:	madd	x0, x0, x1, x23
    1d9c:	mov	x26, x23
    1da0:	cmp	x0, x26
    1da4:	b.ne	1e50 <elf_add+0x7b8>  // b.any
    1da8:	mov	x7, #0x18                  	// #24
    1dac:	mov	x3, x20
    1db0:	mov	x2, x19
    1db4:	mov	x0, x28
    1db8:	mul	x5, x27, x7
    1dbc:	str	x6, [sp, #224]
    1dc0:	stp	x5, x4, [sp, #208]
    1dc4:	mov	x1, x5
    1dc8:	bl	0 <__asan_backtrace_alloc>
    1dcc:	mov	x21, x0
    1dd0:	cbz	x0, 1ed4 <elf_add+0x83c>
    1dd4:	ldp	x5, x4, [sp, #208]
    1dd8:	mov	x7, #0x18                  	// #24
    1ddc:	ldr	x6, [sp, #224]
    1de0:	mov	w2, w7
    1de4:	mov	w3, #0x0                   	// #0
    1de8:	cmp	x26, x23
    1dec:	b.ne	1e78 <elf_add+0x7e0>  // b.any
    1df0:	mov	x1, x27
    1df4:	mov	x0, x21
    1df8:	mov	x2, #0x18                  	// #24
    1dfc:	adrp	x3, 0 <elf_nodebug>
    1e00:	add	x3, x3, #0x0
    1e04:	bl	0 <__asan_backtrace_qsort>
    1e08:	stp	xzr, x21, [x25]
    1e0c:	add	x1, sp, #0x1d0
    1e10:	mov	x0, x28
    1e14:	str	x27, [x25, #16]
    1e18:	mov	x3, x20
    1e1c:	mov	x2, x19
    1e20:	bl	0 <__asan_backtrace_release_view>
    1e24:	ldr	x1, [sp, #248]
    1e28:	mov	w0, #0x1                   	// #1
    1e2c:	str	w0, [x1]
    1e30:	add	x1, x28, #0x30
    1e34:	ldr	w0, [x28, #8]
    1e38:	cbz	w0, 1f5c <elf_add+0x8c4>
    1e3c:	mov	x0, x1
    1e40:	ldar	x2, [x0]
    1e44:	cbz	x2, 2118 <elf_add+0xa80>
    1e48:	mov	x0, x2
    1e4c:	b	1e40 <elf_add+0x7a8>
    1e50:	ldrb	w1, [x26, #4]
    1e54:	and	w1, w1, #0xf
    1e58:	sub	w1, w1, #0x1
    1e5c:	cmp	w1, #0x1
    1e60:	b.hi	1e70 <elf_add+0x7d8>  // b.pmore
    1e64:	ldrh	w1, [x26, #6]
    1e68:	cbz	w1, 1e70 <elf_add+0x7d8>
    1e6c:	add	x27, x27, #0x1
    1e70:	add	x26, x26, #0x18
    1e74:	b	1da0 <elf_add+0x708>
    1e78:	ldrb	w0, [x23, #4]
    1e7c:	and	w0, w0, #0xf
    1e80:	sub	w0, w0, #0x1
    1e84:	cmp	w0, #0x1
    1e88:	b.hi	1f54 <elf_add+0x8bc>  // b.pmore
    1e8c:	ldrh	w0, [x23, #6]
    1e90:	cbz	w0, 1f54 <elf_add+0x8bc>
    1e94:	ldr	w0, [x23]
    1e98:	cmp	x6, x0
    1e9c:	b.hi	1efc <elf_add+0x864>  // b.pmore
    1ea0:	str	x5, [sp, #208]
    1ea4:	mov	x0, x20
    1ea8:	mov	w2, #0x0                   	// #0
    1eac:	adrp	x1, 0 <elf_nodebug>
    1eb0:	add	x1, x1, #0x0
    1eb4:	blr	x19
    1eb8:	ldr	x5, [sp, #208]
    1ebc:	mov	x4, x20
    1ec0:	mov	x3, x19
    1ec4:	mov	x1, x21
    1ec8:	mov	x0, x28
    1ecc:	mov	x2, x5
    1ed0:	bl	0 <__asan_backtrace_free>
    1ed4:	mov	x4, x20
    1ed8:	mov	x3, x19
    1edc:	mov	x1, x25
    1ee0:	mov	x0, x28
    1ee4:	mov	x2, #0x18                  	// #24
    1ee8:	bl	0 <__asan_backtrace_free>
    1eec:	mov	w27, #0x1                   	// #1
    1ef0:	mov	w25, w27
    1ef4:	mov	w21, w27
    1ef8:	b	272c <elf_add+0x1094>
    1efc:	umull	x1, w3, w2
    1f00:	add	x0, x4, x0
    1f04:	add	x8, x21, x1
    1f08:	str	x0, [x21, x1]
    1f0c:	ldr	x1, [x23, #8]
    1f10:	cbz	x22, 1f3c <elf_add+0x8a4>
    1f14:	ldr	x0, [x22]
    1f18:	cmp	x0, x1
    1f1c:	b.hi	1f3c <elf_add+0x8a4>  // b.pmore
    1f20:	ldr	x7, [x22, #16]
    1f24:	add	x7, x0, x7
    1f28:	cmp	x7, x1
    1f2c:	b.ls	1f3c <elf_add+0x8a4>  // b.plast
    1f30:	sub	x1, x1, x0
    1f34:	ldr	x0, [x22, #8]
    1f38:	ldr	x1, [x0, x1]
    1f3c:	add	w3, w3, #0x1
    1f40:	ldr	x0, [sp, #240]
    1f44:	add	x1, x0, x1
    1f48:	str	x1, [x8, #8]
    1f4c:	ldr	x0, [x23, #16]
    1f50:	str	x0, [x8, #16]
    1f54:	add	x23, x23, #0x18
    1f58:	b	1de8 <elf_add+0x750>
    1f5c:	ldr	x0, [x28, #48]
    1f60:	cbnz	x0, 210c <elf_add+0xa74>
    1f64:	str	x25, [x1]
    1f68:	mov	w0, #0x1                   	// #1
    1f6c:	str	w0, [sp, #208]
    1f70:	mov	x3, x20
    1f74:	mov	x2, x19
    1f78:	add	x1, sp, #0x1a0
    1f7c:	mov	x0, x28
    1f80:	bl	0 <__asan_backtrace_release_view>
    1f84:	mov	x0, x28
    1f88:	mov	x3, x20
    1f8c:	mov	x2, x19
    1f90:	add	x1, sp, #0x1b8
    1f94:	bl	0 <__asan_backtrace_release_view>
    1f98:	ldr	x0, [sp, #256]
    1f9c:	cbz	x0, 21c0 <elf_add+0xb28>
    1fa0:	adrp	x4, 0 <elf_nodebug>
    1fa4:	add	x4, x4, #0x0
    1fa8:	mov	x0, x4
    1fac:	ldr	w25, [sp, #280]
    1fb0:	str	x4, [sp, #216]
    1fb4:	bl	0 <__asan_internal_strlen>
    1fb8:	add	x27, x25, #0x1
    1fbc:	adrp	x6, 0 <elf_nodebug>
    1fc0:	mov	x21, x0
    1fc4:	add	x0, x6, #0x0
    1fc8:	bl	0 <__asan_internal_strlen>
    1fcc:	mov	x26, x0
    1fd0:	add	x0, x21, x0
    1fd4:	mov	x3, x20
    1fd8:	add	x27, x0, x27, lsl #1
    1fdc:	mov	x2, x19
    1fe0:	mov	x1, x27
    1fe4:	mov	x0, x28
    1fe8:	bl	0 <__asan_backtrace_alloc>
    1fec:	mov	x23, x0
    1ff0:	cbz	x0, 21c0 <elf_add+0xb28>
    1ff4:	ldr	x4, [sp, #216]
    1ff8:	mov	x2, x21
    1ffc:	add	x21, x0, x21
    2000:	mov	x1, x4
    2004:	bl	0 <__asan_internal_memcpy>
    2008:	mov	x2, #0x0                   	// #0
    200c:	mov	w0, #0x2f                  	// #47
    2010:	adrp	x6, 0 <elf_nodebug>
    2014:	cmp	x25, x2
    2018:	b.hi	2140 <elf_add+0xaa8>  // b.pmore
    201c:	add	x1, x6, #0x0
    2020:	mov	x2, x26
    2024:	mov	x0, x21
    2028:	bl	0 <__asan_internal_memcpy>
    202c:	strb	wzr, [x21, x26]
    2030:	add	x3, sp, #0x2d0
    2034:	mov	x2, x20
    2038:	mov	x1, x19
    203c:	mov	x0, x23
    2040:	bl	0 <__asan_backtrace_open>
    2044:	mov	x4, x20
    2048:	mov	w21, w0
    204c:	mov	x3, x19
    2050:	mov	x2, x27
    2054:	mov	x1, x23
    2058:	mov	x0, x28
    205c:	bl	0 <__asan_backtrace_free>
    2060:	tbnz	w21, #31, 21c0 <elf_add+0xb28>
    2064:	mov	x0, x28
    2068:	mov	x3, x20
    206c:	mov	x2, x19
    2070:	add	x1, sp, #0x200
    2074:	bl	0 <__asan_backtrace_release_view>
    2078:	ldr	w0, [sp, #192]
    207c:	cbz	w0, 2094 <elf_add+0x9fc>
    2080:	mov	x3, x20
    2084:	mov	x2, x19
    2088:	add	x1, sp, #0x218
    208c:	mov	x0, x28
    2090:	bl	0 <__asan_backtrace_release_view>
    2094:	ldr	w0, [sp, #200]
    2098:	cbz	w0, 20b0 <elf_add+0xa18>
    209c:	mov	x3, x20
    20a0:	mov	x2, x19
    20a4:	add	x1, sp, #0x230
    20a8:	mov	x0, x28
    20ac:	bl	0 <__asan_backtrace_release_view>
    20b0:	ldp	x3, x7, [sp, #240]
    20b4:	mov	w0, #0x1                   	// #1
    20b8:	ldr	x6, [sp, #272]
    20bc:	str	w0, [sp, #24]
    20c0:	ldr	x0, [sp, #1168]
    20c4:	str	x0, [sp]
    20c8:	str	xzr, [sp, #8]
    20cc:	mov	w2, w21
    20d0:	str	wzr, [sp, #16]
    20d4:	mov	x5, x20
    20d8:	str	xzr, [sp, #32]
    20dc:	mov	x4, x19
    20e0:	str	wzr, [sp, #40]
    20e4:	mov	x0, x28
    20e8:	adrp	x1, 0 <elf_nodebug>
    20ec:	add	x1, x1, #0x0
    20f0:	bl	1698 <elf_add>
    20f4:	mov	w22, w0
    20f8:	mov	x2, x20
    20fc:	mov	x1, x19
    2100:	tbz	w0, #31, 2194 <elf_add+0xafc>
    2104:	mov	w0, w21
    2108:	b	2198 <elf_add+0xb00>
    210c:	mov	x1, x0
    2110:	ldr	x0, [x0]
    2114:	b	1f60 <elf_add+0x8c8>
    2118:	ldxr	x2, [x0]
    211c:	cbnz	x2, 2128 <elf_add+0xa90>
    2120:	stlxr	w3, x25, [x0]
    2124:	cbnz	w3, 2118 <elf_add+0xa80>
    2128:	dmb	ish
    212c:	cmp	x2, #0x0
    2130:	b.eq	1f68 <elf_add+0x8d0>  // b.none
    2134:	b	1e3c <elf_add+0x7a4>
    2138:	str	wzr, [sp, #208]
    213c:	b	1f70 <elf_add+0x8d8>
    2140:	ldr	x1, [sp, #256]
    2144:	ldrb	w1, [x1, x2]
    2148:	lsr	w4, w1, #4
    214c:	and	w1, w1, #0xf
    2150:	cmp	w4, #0x9
    2154:	add	w7, w4, #0x30
    2158:	add	w3, w4, #0x57
    215c:	add	w4, w1, #0x30
    2160:	csel	w3, w3, w7, hi  // hi = pmore
    2164:	cmp	w1, #0x9
    2168:	strb	w3, [x21]
    216c:	add	w3, w1, #0x57
    2170:	csel	w1, w3, w4, hi  // hi = pmore
    2174:	strb	w1, [x21, #1]
    2178:	cbz	x2, 2188 <elf_add+0xaf0>
    217c:	add	x21, x21, #0x2
    2180:	add	x2, x2, #0x1
    2184:	b	2014 <elf_add+0x97c>
    2188:	add	x21, x21, #0x3
    218c:	sturb	w0, [x21, #-1]
    2190:	b	2180 <elf_add+0xae8>
    2194:	mov	w0, w24
    2198:	bl	0 <__asan_backtrace_close>
    219c:	mov	w0, w22
    21a0:	ldp	x29, x30, [sp, #80]
    21a4:	ldp	x19, x20, [sp, #96]
    21a8:	ldp	x21, x22, [sp, #112]
    21ac:	ldp	x23, x24, [sp, #128]
    21b0:	ldp	x25, x26, [sp, #144]
    21b4:	ldp	x27, x28, [sp, #160]
    21b8:	add	sp, sp, #0x490
    21bc:	ret
    21c0:	ldr	w0, [sp, #184]
    21c4:	cbz	w0, 21dc <elf_add+0xb44>
    21c8:	mov	x3, x20
    21cc:	mov	x2, x19
    21d0:	add	x1, sp, #0x200
    21d4:	mov	x0, x28
    21d8:	bl	0 <__asan_backtrace_release_view>
    21dc:	cbz	x22, 21f4 <elf_add+0xb5c>
    21e0:	mov	x3, x20
    21e4:	mov	x2, x19
    21e8:	add	x1, x22, #0x18
    21ec:	mov	x0, x28
    21f0:	bl	0 <__asan_backtrace_release_view>
    21f4:	ldr	x0, [sp, #288]
    21f8:	cbz	x0, 2258 <elf_add+0xbc0>
    21fc:	ldr	x1, [sp, #296]
    2200:	mov	x2, x0
    2204:	mov	x4, x20
    2208:	mov	x3, x19
    220c:	mov	x0, x28
    2210:	bl	608 <elf_find_debugfile_by_debuglink>
    2214:	mov	w21, w0
    2218:	tbnz	w0, #31, 2258 <elf_add+0xbc0>
    221c:	ldr	w1, [sp, #312]
    2220:	cbz	w1, 2080 <elf_add+0x9e8>
    2224:	add	x1, sp, #0x2d0
    2228:	bl	0 <fstat>
    222c:	tbz	w0, #31, 2314 <elf_add+0xc7c>
    2230:	bl	0 <__errno_location>
    2234:	ldr	w2, [x0]
    2238:	adrp	x1, 0 <elf_nodebug>
    223c:	mov	x0, x20
    2240:	add	x1, x1, #0x0
    2244:	blr	x19
    2248:	mov	x2, x20
    224c:	mov	x1, x19
    2250:	mov	w0, w21
    2254:	bl	0 <__asan_backtrace_close>
    2258:	ldr	w0, [sp, #192]
    225c:	cbz	w0, 2274 <elf_add+0xbdc>
    2260:	mov	x3, x20
    2264:	mov	x2, x19
    2268:	add	x1, sp, #0x218
    226c:	mov	x0, x28
    2270:	bl	0 <__asan_backtrace_release_view>
    2274:	ldr	x0, [sp, #232]
    2278:	str	xzr, [sp, #376]
    227c:	cbz	x0, 23a0 <elf_add+0xd08>
    2280:	ldr	x1, [sp, #296]
    2284:	mov	x2, x0
    2288:	mov	x4, x20
    228c:	mov	x3, x19
    2290:	mov	x0, x28
    2294:	bl	608 <elf_find_debugfile_by_debuglink>
    2298:	mov	w21, w0
    229c:	tbnz	w0, #31, 23a0 <elf_add+0xd08>
    22a0:	mov	w2, w0
    22a4:	ldr	w0, [sp, #316]
    22a8:	str	w0, [sp, #40]
    22ac:	mov	x5, x20
    22b0:	ldr	x0, [sp, #304]
    22b4:	str	x0, [sp, #32]
    22b8:	ldp	x3, x7, [sp, #240]
    22bc:	mov	w0, #0x1                   	// #1
    22c0:	str	w0, [sp, #24]
    22c4:	add	x0, sp, #0x178
    22c8:	ldr	x6, [sp, #272]
    22cc:	str	x0, [sp, #8]
    22d0:	ldr	x1, [sp, #296]
    22d4:	mov	x4, x19
    22d8:	ldr	x0, [sp, #1168]
    22dc:	str	x0, [sp]
    22e0:	str	wzr, [sp, #16]
    22e4:	mov	x0, x28
    22e8:	bl	1698 <elf_add>
    22ec:	mov	w22, w0
    22f0:	mov	x3, x20
    22f4:	mov	x2, x19
    22f8:	add	x1, sp, #0x230
    22fc:	mov	x0, x28
    2300:	bl	0 <__asan_backtrace_release_view>
    2304:	tbz	w22, #31, 23bc <elf_add+0xd24>
    2308:	mov	x2, x20
    230c:	mov	x1, x19
    2310:	b	2104 <elf_add+0xa6c>
    2314:	ldr	x3, [sp, #768]
    2318:	add	x25, sp, #0x248
    231c:	mov	x6, x25
    2320:	mov	x5, x20
    2324:	mov	x4, x19
    2328:	mov	w1, w21
    232c:	mov	x0, x28
    2330:	mov	x2, #0x0                   	// #0
    2334:	bl	0 <__asan_backtrace_get_view>
    2338:	cbz	w0, 2248 <elf_add+0xbb0>
    233c:	ldr	x2, [sp, #584]
    2340:	adrp	x0, 0 <elf_nodebug>
    2344:	ldr	x3, [sp, #768]
    2348:	add	x0, x0, #0x0
    234c:	add	x0, x0, #0x4e0
    2350:	mov	w22, #0xffffffff            	// #-1
    2354:	add	x3, x2, x3
    2358:	cmp	x3, x2
    235c:	b.hi	2388 <elf_add+0xcf0>  // b.pmore
    2360:	mov	x0, x28
    2364:	mov	x3, x20
    2368:	mov	x2, x19
    236c:	mov	x1, x25
    2370:	bl	0 <__asan_backtrace_release_view>
    2374:	mvn	w22, w22
    2378:	ldr	w0, [sp, #312]
    237c:	cmp	w0, w22
    2380:	b.eq	2080 <elf_add+0x9e8>  // b.none
    2384:	b	2248 <elf_add+0xbb0>
    2388:	ldrb	w1, [x2], #1
    238c:	eor	w1, w1, w22
    2390:	and	x1, x1, #0xff
    2394:	ldr	w1, [x0, x1, lsl #2]
    2398:	eor	w22, w1, w22, lsr #8
    239c:	b	2358 <elf_add+0xcc0>
    23a0:	ldr	w0, [sp, #200]
    23a4:	cbz	w0, 23bc <elf_add+0xd24>
    23a8:	mov	x3, x20
    23ac:	mov	x2, x19
    23b0:	add	x1, sp, #0x230
    23b4:	mov	x0, x28
    23b8:	bl	0 <__asan_backtrace_release_view>
    23bc:	add	x21, sp, #0x350
    23c0:	mov	w22, #0xa                   	// #10
    23c4:	mov	x1, x21
    23c8:	mov	x3, #0x0                   	// #0
    23cc:	mov	x25, #0x0                   	// #0
    23d0:	ldr	x2, [x1, #8]
    23d4:	cbz	x2, 23f4 <elf_add+0xd5c>
    23d8:	ldr	x0, [x1]
    23dc:	cbz	x25, 242c <elf_add+0xd94>
    23e0:	cmp	x0, x25
    23e4:	csel	x25, x25, x0, ge  // ge = tcont
    23e8:	add	x0, x0, x2
    23ec:	cmp	x3, x0
    23f0:	csel	x3, x3, x0, ge  // ge = tcont
    23f4:	add	x1, x1, #0x20
    23f8:	subs	w22, w22, #0x1
    23fc:	b.ne	23d0 <elf_add+0xd38>  // b.any
    2400:	cmp	x25, #0x0
    2404:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    2408:	b.ne	2434 <elf_add+0xd9c>  // b.any
    240c:	mov	x2, x20
    2410:	mov	x1, x19
    2414:	mov	w0, w24
    2418:	bl	0 <__asan_backtrace_close>
    241c:	mov	w27, w0
    2420:	cbz	w0, 2874 <elf_add+0x11dc>
    2424:	mov	w22, #0x1                   	// #1
    2428:	b	219c <elf_add+0xb04>
    242c:	mov	x25, x0
    2430:	b	23e8 <elf_add+0xd50>
    2434:	add	x26, sp, #0x2d0
    2438:	mov	x5, x20
    243c:	mov	x6, x26
    2440:	mov	x4, x19
    2444:	sub	x3, x3, x25
    2448:	mov	x2, x25
    244c:	mov	w1, w24
    2450:	mov	x0, x28
    2454:	bl	0 <__asan_backtrace_get_view>
    2458:	mov	w27, w0
    245c:	cbz	w0, 2874 <elf_add+0x11dc>
    2460:	mov	x2, x20
    2464:	mov	x1, x19
    2468:	mov	w0, w24
    246c:	bl	0 <__asan_backtrace_close>
    2470:	cbz	w0, 2870 <elf_add+0x11d8>
    2474:	ldr	x3, [sp, #720]
    2478:	mov	x0, x21
    247c:	mov	w2, #0x0                   	// #0
    2480:	ldr	x1, [x0, #8]
    2484:	cbnz	x1, 2690 <elf_add+0xff8>
    2488:	str	xzr, [x0, #16]
    248c:	add	w2, w2, #0x1
    2490:	add	x0, x0, #0x20
    2494:	cmp	w2, #0xa
    2498:	b.ne	2480 <elf_add+0xde8>  // b.any
    249c:	add	x0, sp, #0x248
    24a0:	adrp	x25, 0 <elf_nodebug>
    24a4:	mov	x27, x21
    24a8:	add	x25, x25, #0x0
    24ac:	mov	w24, #0x5                   	// #5
    24b0:	mov	x23, #0x0                   	// #0
    24b4:	str	x0, [sp, #184]
    24b8:	add	x0, sp, #0x180
    24bc:	str	x0, [sp, #192]
    24c0:	ldr	x0, [x27, #8]
    24c4:	cbnz	x0, 2518 <elf_add+0xe80>
    24c8:	ldr	x0, [x27, #168]
    24cc:	cbz	x0, 2518 <elf_add+0xe80>
    24d0:	cbnz	x23, 24f0 <elf_add+0xe58>
    24d4:	mov	x3, x20
    24d8:	mov	x2, x19
    24dc:	mov	x0, x28
    24e0:	mov	x1, #0x13b4                	// #5044
    24e4:	bl	0 <__asan_backtrace_alloc>
    24e8:	mov	x23, x0
    24ec:	cbz	x0, 26f8 <elf_add+0x1060>
    24f0:	ldr	x11, [x27, #168]
    24f4:	str	xzr, [sp, #384]
    24f8:	str	xzr, [sp, #584]
    24fc:	cmp	x11, #0xb
    2500:	b.hi	26ac <elf_add+0x1014>  // b.pmore
    2504:	ldr	x0, [sp, #384]
    2508:	str	x0, [x27, #16]
    250c:	ldr	x0, [sp, #584]
    2510:	str	x0, [x27, #8]
    2514:	str	wzr, [x27, #24]
    2518:	add	x27, x27, #0x20
    251c:	subs	w24, w24, #0x1
    2520:	b.ne	24c0 <elf_add+0xe28>  // b.any
    2524:	mov	w24, #0x5                   	// #5
    2528:	ldr	x0, [x21, #8]
    252c:	cbz	x0, 25cc <elf_add+0xf34>
    2530:	ldr	w0, [x21, #24]
    2534:	cbz	w0, 25cc <elf_add+0xf34>
    2538:	cbnz	x23, 2558 <elf_add+0xec0>
    253c:	mov	x3, x20
    2540:	mov	x2, x19
    2544:	mov	x0, x28
    2548:	mov	x1, #0x13b4                	// #5044
    254c:	bl	0 <__asan_backtrace_alloc>
    2550:	mov	x23, x0
    2554:	cbz	x0, 26f8 <elf_add+0x1060>
    2558:	ldr	x5, [x21, #8]
    255c:	cmp	x5, #0x17
    2560:	b.ls	2864 <elf_add+0x11cc>  // b.plast
    2564:	ldr	x27, [x21, #16]
    2568:	ldr	w4, [x27]
    256c:	cmp	w4, #0x1
    2570:	b.ne	2864 <elf_add+0x11cc>  // b.any
    2574:	ldr	x1, [x27, #8]
    2578:	mov	x3, x20
    257c:	mov	x2, x19
    2580:	mov	x0, x28
    2584:	str	x5, [sp, #184]
    2588:	str	w4, [sp, #192]
    258c:	bl	0 <__asan_backtrace_alloc>
    2590:	ldr	w4, [sp, #192]
    2594:	mov	x25, x0
    2598:	cbz	x0, 2890 <elf_add+0x11f8>
    259c:	ldr	x4, [x27, #8]
    25a0:	mov	x3, x0
    25a4:	ldr	x5, [sp, #184]
    25a8:	mov	x2, x23
    25ac:	add	x0, x27, #0x18
    25b0:	sub	x1, x5, #0x18
    25b4:	bl	8dc <elf_zlib_inflate_and_verify>
    25b8:	cbz	w0, 2864 <elf_add+0x11cc>
    25bc:	ldr	x0, [x27, #8]
    25c0:	sub	w22, w22, #0x1
    25c4:	stp	x0, x25, [x21, #8]
    25c8:	str	wzr, [x21, #24]
    25cc:	add	x21, x21, #0x20
    25d0:	subs	w24, w24, #0x1
    25d4:	b.ne	2528 <elf_add+0xe90>  // b.any
    25d8:	cbz	x23, 25f4 <elf_add+0xf5c>
    25dc:	mov	x4, x20
    25e0:	mov	x3, x19
    25e4:	mov	x1, x23
    25e8:	mov	x0, x28
    25ec:	mov	x2, #0x13b4                	// #5044
    25f0:	bl	0 <__asan_backtrace_free>
    25f4:	cbnz	w22, 2704 <elf_add+0x106c>
    25f8:	mov	w27, #0x0                   	// #0
    25fc:	mov	x3, x20
    2600:	mov	x2, x19
    2604:	mov	x1, x26
    2608:	mov	x0, x28
    260c:	bl	0 <__asan_backtrace_release_view>
    2610:	add	x0, sp, #0x358
    2614:	ldr	x1, [sp, #240]
    2618:	ldp	x3, x2, [x0]
    261c:	ldp	x5, x4, [x0, #32]
    2620:	stp	x19, x20, [sp, #48]
    2624:	ldr	x0, [sp, #1176]
    2628:	str	x0, [sp, #72]
    262c:	ldr	x0, [sp, #272]
    2630:	str	x0, [sp, #64]
    2634:	ldr	x0, [sp, #376]
    2638:	str	x0, [sp, #40]
    263c:	ldrb	w0, [sp, #661]
    2640:	ldr	x7, [sp, #920]
    2644:	cmp	w0, #0x2
    2648:	cset	w0, eq  // eq = none
    264c:	str	w0, [sp, #32]
    2650:	ldr	x0, [sp, #984]
    2654:	str	x0, [sp, #24]
    2658:	ldr	x0, [sp, #992]
    265c:	str	x0, [sp, #16]
    2660:	ldr	x6, [sp, #928]
    2664:	ldr	x0, [sp, #952]
    2668:	str	x0, [sp, #8]
    266c:	ldr	x0, [sp, #960]
    2670:	str	x0, [sp]
    2674:	mov	x0, x28
    2678:	bl	0 <__asan_backtrace_dwarf_add>
    267c:	cbz	w0, 26fc <elf_add+0x1064>
    2680:	ldr	x0, [sp, #1168]
    2684:	mov	w22, #0x1                   	// #1
    2688:	str	w22, [x0]
    268c:	b	219c <elf_add+0xb04>
    2690:	ldr	x1, [x0]
    2694:	cmp	w2, #0x5
    2698:	cinc	w22, w22, cc  // cc = lo, ul, last
    269c:	sub	x1, x1, x25
    26a0:	add	x1, x3, x1
    26a4:	str	x1, [x0, #16]
    26a8:	b	248c <elf_add+0xdf4>
    26ac:	ldr	x10, [x27, #176]
    26b0:	mov	x1, x25
    26b4:	mov	x2, #0x4                   	// #4
    26b8:	str	x10, [sp, #200]
    26bc:	mov	x0, x10
    26c0:	str	x11, [sp, #216]
    26c4:	bl	0 <__asan_internal_memcmp>
    26c8:	cbnz	w0, 2504 <elf_add+0xe6c>
    26cc:	ldp	x7, x6, [sp, #184]
    26d0:	mov	x5, x20
    26d4:	ldr	x10, [sp, #200]
    26d8:	mov	x4, x19
    26dc:	ldr	x11, [sp, #216]
    26e0:	mov	x3, x23
    26e4:	mov	x0, x28
    26e8:	mov	x1, x10
    26ec:	mov	x2, x11
    26f0:	bl	15d8 <elf_uncompress_zdebug.part.0>
    26f4:	cbnz	w0, 2504 <elf_add+0xe6c>
    26f8:	mov	w27, #0x1                   	// #1
    26fc:	mov	w24, #0xffffffff            	// #-1
    2700:	b	2874 <elf_add+0x11dc>
    2704:	mov	w27, #0x1                   	// #1
    2708:	b	2610 <elf_add+0xf78>
    270c:	mov	w22, #0xffffffff            	// #-1
    2710:	b	219c <elf_add+0xb04>
    2714:	mov	w27, #0x0                   	// #0
    2718:	mov	w25, #0x0                   	// #0
    271c:	mov	x22, #0x0                   	// #0
    2720:	str	wzr, [sp, #184]
    2724:	str	wzr, [sp, #192]
    2728:	str	wzr, [sp, #200]
    272c:	mov	x3, x20
    2730:	mov	x2, x19
    2734:	add	x1, sp, #0x1a0
    2738:	mov	x0, x28
    273c:	bl	0 <__asan_backtrace_release_view>
    2740:	cbz	w21, 2758 <elf_add+0x10c0>
    2744:	mov	x3, x20
    2748:	mov	x2, x19
    274c:	add	x1, sp, #0x1b8
    2750:	mov	x0, x28
    2754:	bl	0 <__asan_backtrace_release_view>
    2758:	cbz	w25, 2770 <elf_add+0x10d8>
    275c:	mov	x3, x20
    2760:	mov	x2, x19
    2764:	add	x1, sp, #0x1d0
    2768:	mov	x0, x28
    276c:	bl	0 <__asan_backtrace_release_view>
    2770:	cbz	w27, 278c <elf_add+0x10f4>
    2774:	mov	w27, #0x0                   	// #0
    2778:	mov	x3, x20
    277c:	mov	x2, x19
    2780:	add	x1, sp, #0x1e8
    2784:	mov	x0, x28
    2788:	bl	0 <__asan_backtrace_release_view>
    278c:	ldr	w0, [sp, #192]
    2790:	cbz	w0, 27a8 <elf_add+0x1110>
    2794:	mov	x3, x20
    2798:	mov	x2, x19
    279c:	add	x1, sp, #0x218
    27a0:	mov	x0, x28
    27a4:	bl	0 <__asan_backtrace_release_view>
    27a8:	ldr	w0, [sp, #200]
    27ac:	cbz	w0, 27c4 <elf_add+0x112c>
    27b0:	mov	x3, x20
    27b4:	mov	x2, x19
    27b8:	add	x1, sp, #0x230
    27bc:	mov	x0, x28
    27c0:	bl	0 <__asan_backtrace_release_view>
    27c4:	ldr	w0, [sp, #184]
    27c8:	cbz	w0, 27e0 <elf_add+0x1148>
    27cc:	mov	x3, x20
    27d0:	mov	x2, x19
    27d4:	add	x1, sp, #0x200
    27d8:	mov	x0, x28
    27dc:	bl	0 <__asan_backtrace_release_view>
    27e0:	cbz	w27, 27f8 <elf_add+0x1160>
    27e4:	mov	x3, x20
    27e8:	mov	x2, x19
    27ec:	add	x1, sp, #0x2d0
    27f0:	mov	x0, x28
    27f4:	bl	0 <__asan_backtrace_release_view>
    27f8:	cbz	x22, 2810 <elf_add+0x1178>
    27fc:	mov	x3, x20
    2800:	mov	x2, x19
    2804:	add	x1, x22, #0x18
    2808:	mov	x0, x28
    280c:	bl	0 <__asan_backtrace_release_view>
    2810:	cmn	w24, #0x1
    2814:	b.eq	2828 <elf_add+0x1190>  // b.none
    2818:	mov	x2, x20
    281c:	mov	x1, x19
    2820:	mov	w0, w24
    2824:	bl	0 <__asan_backtrace_close>
    2828:	mov	w22, #0x0                   	// #0
    282c:	b	219c <elf_add+0xb04>
    2830:	ldr	w25, [sp, #184]
    2834:	b	1a14 <elf_add+0x37c>
    2838:	mov	x21, #0x1                   	// #1
    283c:	mov	w27, #0x0                   	// #0
    2840:	str	w21, [sp, #184]
    2844:	b	272c <elf_add+0x1094>
    2848:	str	wzr, [sp, #192]
    284c:	mov	w27, #0x0                   	// #0
    2850:	b	1a14 <elf_add+0x37c>
    2854:	mov	w27, #0x0                   	// #0
    2858:	b	272c <elf_add+0x1094>
    285c:	mov	w25, #0x1                   	// #1
    2860:	b	1a14 <elf_add+0x37c>
    2864:	mov	x0, #0x0                   	// #0
    2868:	mov	x25, #0x0                   	// #0
    286c:	b	25c0 <elf_add+0xf28>
    2870:	mov	w27, #0x1                   	// #1
    2874:	ldr	w0, [sp, #208]
    2878:	cbz	w0, 1764 <elf_add+0xcc>
    287c:	mov	x22, #0x0                   	// #0
    2880:	str	wzr, [sp, #184]
    2884:	str	wzr, [sp, #192]
    2888:	str	wzr, [sp, #200]
    288c:	b	2778 <elf_add+0x10e0>
    2890:	mov	w27, w4
    2894:	b	26fc <elf_add+0x1064>

0000000000002898 <phdr_callback>:
    2898:	sub	sp, sp, #0x70
    289c:	stp	x29, x30, [sp, #48]
    28a0:	add	x29, sp, #0x30
    28a4:	ldr	x1, [x0, #8]
    28a8:	stp	x19, x20, [sp, #64]
    28ac:	mov	x20, x0
    28b0:	ldr	w0, [x2, #56]
    28b4:	mov	x19, x2
    28b8:	str	x21, [sp, #80]
    28bc:	cmn	w0, #0x1
    28c0:	cbz	x1, 28cc <phdr_callback+0x34>
    28c4:	ldrb	w1, [x1]
    28c8:	cbnz	w1, 293c <phdr_callback+0xa4>
    28cc:	b.eq	2968 <phdr_callback+0xd0>  // b.none
    28d0:	ldr	x21, [x19, #48]
    28d4:	mov	w1, #0xffffffff            	// #-1
    28d8:	str	w1, [x19, #56]
    28dc:	mov	w2, w0
    28e0:	add	x1, sp, #0x64
    28e4:	ldp	x0, x4, [x19]
    28e8:	add	x6, sp, #0x68
    28ec:	ldr	x3, [x20]
    28f0:	ldr	x5, [x19, #16]
    28f4:	ldr	x7, [x19, #32]
    28f8:	stp	x1, xzr, [sp]
    28fc:	mov	x1, x21
    2900:	str	wzr, [sp, #16]
    2904:	str	wzr, [sp, #24]
    2908:	str	xzr, [sp, #32]
    290c:	str	wzr, [sp, #40]
    2910:	bl	1698 <elf_add>
    2914:	cbz	w0, 2968 <phdr_callback+0xd0>
    2918:	ldr	w0, [sp, #100]
    291c:	cbz	w0, 2968 <phdr_callback+0xd0>
    2920:	ldr	x0, [x19, #40]
    2924:	mov	w1, #0x1                   	// #1
    2928:	str	w1, [x0]
    292c:	ldr	x0, [x19, #24]
    2930:	ldr	x1, [sp, #104]
    2934:	str	x1, [x0]
    2938:	b	2968 <phdr_callback+0xd0>
    293c:	b.eq	2950 <phdr_callback+0xb8>  // b.none
    2940:	ldp	x1, x2, [x2, #8]
    2944:	bl	0 <__asan_backtrace_close>
    2948:	mov	w0, #0xffffffff            	// #-1
    294c:	str	w0, [x19, #56]
    2950:	ldp	x1, x2, [x19, #8]
    2954:	add	x3, sp, #0x60
    2958:	ldr	x21, [x20, #8]
    295c:	mov	x0, x21
    2960:	bl	0 <__asan_backtrace_open>
    2964:	tbz	w0, #31, 28dc <phdr_callback+0x44>
    2968:	mov	w0, #0x0                   	// #0
    296c:	ldp	x29, x30, [sp, #48]
    2970:	ldp	x19, x20, [sp, #64]
    2974:	ldr	x21, [sp, #80]
    2978:	add	sp, sp, #0x70
    297c:	ret

0000000000002980 <__asan_backtrace_uncompress_zdebug>:
    2980:	stp	x29, x30, [sp, #-80]!
    2984:	mov	x29, sp
    2988:	stp	x21, x22, [sp, #32]
    298c:	mov	x21, x3
    2990:	mov	x22, x4
    2994:	mov	x3, x4
    2998:	stp	x19, x20, [sp, #16]
    299c:	mov	x19, x1
    29a0:	mov	x1, #0x13b4                	// #5044
    29a4:	stp	x23, x24, [sp, #48]
    29a8:	mov	x24, x2
    29ac:	mov	x23, x0
    29b0:	mov	x2, x21
    29b4:	stp	x25, x26, [sp, #64]
    29b8:	mov	x25, x5
    29bc:	mov	x26, x6
    29c0:	bl	0 <__asan_backtrace_alloc>
    29c4:	cbz	x0, 2a58 <__asan_backtrace_uncompress_zdebug+0xd8>
    29c8:	str	xzr, [x25]
    29cc:	mov	x20, x0
    29d0:	str	xzr, [x26]
    29d4:	cmp	x24, #0xb
    29d8:	b.hi	2a14 <__asan_backtrace_uncompress_zdebug+0x94>  // b.pmore
    29dc:	mov	w19, #0x1                   	// #1
    29e0:	mov	x4, x22
    29e4:	mov	x3, x21
    29e8:	mov	x1, x20
    29ec:	mov	x0, x23
    29f0:	mov	x2, #0x13b4                	// #5044
    29f4:	bl	0 <__asan_backtrace_free>
    29f8:	mov	w0, w19
    29fc:	ldp	x19, x20, [sp, #16]
    2a00:	ldp	x21, x22, [sp, #32]
    2a04:	ldp	x23, x24, [sp, #48]
    2a08:	ldp	x25, x26, [sp, #64]
    2a0c:	ldp	x29, x30, [sp], #80
    2a10:	ret
    2a14:	adrp	x1, 0 <elf_nodebug>
    2a18:	mov	x0, x19
    2a1c:	add	x1, x1, #0x0
    2a20:	mov	x2, #0x4                   	// #4
    2a24:	bl	0 <__asan_internal_memcmp>
    2a28:	cbnz	w0, 29dc <__asan_backtrace_uncompress_zdebug+0x5c>
    2a2c:	mov	x1, x19
    2a30:	mov	x7, x26
    2a34:	mov	x6, x25
    2a38:	mov	x5, x22
    2a3c:	mov	x4, x21
    2a40:	mov	x3, x20
    2a44:	mov	x2, x24
    2a48:	mov	x0, x23
    2a4c:	bl	15d8 <elf_uncompress_zdebug.part.0>
    2a50:	mov	w19, w0
    2a54:	b	29e0 <__asan_backtrace_uncompress_zdebug+0x60>
    2a58:	mov	w19, #0x0                   	// #0
    2a5c:	b	29f8 <__asan_backtrace_uncompress_zdebug+0x78>

0000000000002a60 <__asan_backtrace_initialize>:
    2a60:	sub	sp, sp, #0xe0
    2a64:	stp	x29, x30, [sp, #48]
    2a68:	add	x29, sp, #0x30
    2a6c:	stp	x23, x24, [sp, #96]
    2a70:	mov	x23, x3
    2a74:	mov	x24, x1
    2a78:	stp	x27, x28, [sp, #128]
    2a7c:	adrp	x28, 0 <elf_nodebug>
    2a80:	add	x3, x28, #0x0
    2a84:	str	wzr, [sp, #24]
    2a88:	add	x27, sp, #0x98
    2a8c:	str	xzr, [sp, #32]
    2a90:	mov	x6, x27
    2a94:	str	wzr, [sp, #40]
    2a98:	stp	x25, x26, [sp, #112]
    2a9c:	add	x25, sp, #0x94
    2aa0:	add	x26, sp, #0x90
    2aa4:	stp	x25, xzr, [sp]
    2aa8:	mov	x7, x26
    2aac:	str	x3, [sp, #152]
    2ab0:	mov	w3, #0x1                   	// #1
    2ab4:	str	w3, [sp, #16]
    2ab8:	mov	x3, #0x0                   	// #0
    2abc:	stp	x19, x20, [sp, #64]
    2ac0:	mov	x20, x5
    2ac4:	mov	x19, x0
    2ac8:	mov	x5, x4
    2acc:	stp	x21, x22, [sp, #80]
    2ad0:	mov	x22, x4
    2ad4:	mov	w21, w2
    2ad8:	mov	x4, x23
    2adc:	bl	1698 <elf_add>
    2ae0:	cbz	w0, 2b90 <__asan_backtrace_initialize+0x130>
    2ae4:	cmp	w0, #0x0
    2ae8:	add	x1, sp, #0xa0
    2aec:	csinv	w21, w21, wzr, lt  // lt = tstop
    2af0:	adrp	x0, 0 <elf_nodebug>
    2af4:	add	x0, x0, #0x0
    2af8:	stp	x19, x23, [sp, #160]
    2afc:	stp	x22, x27, [sp, #176]
    2b00:	stp	x26, x25, [sp, #192]
    2b04:	str	x24, [sp, #208]
    2b08:	str	w21, [sp, #216]
    2b0c:	bl	0 <dl_iterate_phdr>
    2b10:	ldr	w0, [x19, #8]
    2b14:	ldr	w1, [sp, #144]
    2b18:	cbnz	w0, 2b48 <__asan_backtrace_initialize+0xe8>
    2b1c:	cbz	w1, 2b34 <__asan_backtrace_initialize+0xd4>
    2b20:	adrp	x0, 0 <elf_nodebug>
    2b24:	add	x0, x0, #0x0
    2b28:	str	x0, [x19, #40]
    2b2c:	ldr	x0, [x19, #24]
    2b30:	b	2b6c <__asan_backtrace_initialize+0x10c>
    2b34:	ldr	x0, [x19, #40]
    2b38:	cbnz	x0, 2b2c <__asan_backtrace_initialize+0xcc>
    2b3c:	adrp	x0, 0 <elf_nodebug>
    2b40:	add	x0, x0, #0x0
    2b44:	b	2b28 <__asan_backtrace_initialize+0xc8>
    2b48:	add	x0, x19, #0x28
    2b4c:	cbz	w1, 2bb0 <__asan_backtrace_initialize+0x150>
    2b50:	adrp	x1, 0 <elf_nodebug>
    2b54:	add	x1, x1, #0x0
    2b58:	stlr	x1, [x0]
    2b5c:	ldr	w0, [x19, #8]
    2b60:	cbz	w0, 2b2c <__asan_backtrace_initialize+0xcc>
    2b64:	add	x19, x19, #0x18
    2b68:	ldar	x0, [x19]
    2b6c:	str	x0, [x20]
    2b70:	ldr	x0, [x20]
    2b74:	cbz	x0, 2b84 <__asan_backtrace_initialize+0x124>
    2b78:	add	x28, x28, #0x0
    2b7c:	cmp	x0, x28
    2b80:	b.ne	2b8c <__asan_backtrace_initialize+0x12c>  // b.any
    2b84:	ldr	x0, [sp, #152]
    2b88:	str	x0, [x20]
    2b8c:	mov	w0, #0x1                   	// #1
    2b90:	ldp	x29, x30, [sp, #48]
    2b94:	ldp	x19, x20, [sp, #64]
    2b98:	ldp	x21, x22, [sp, #80]
    2b9c:	ldp	x23, x24, [sp, #96]
    2ba0:	ldp	x25, x26, [sp, #112]
    2ba4:	ldp	x27, x28, [sp, #128]
    2ba8:	add	sp, sp, #0xe0
    2bac:	ret
    2bb0:	adrp	x1, 0 <elf_nodebug>
    2bb4:	add	x1, x1, #0x0
    2bb8:	ldxr	x2, [x0]
    2bbc:	cbnz	x2, 2bc8 <__asan_backtrace_initialize+0x168>
    2bc0:	stlxr	w3, x1, [x0]
    2bc4:	cbnz	w3, 2bb8 <__asan_backtrace_initialize+0x158>
    2bc8:	dmb	ish
    2bcc:	b	2b5c <__asan_backtrace_initialize+0xfc>

fileline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fileline_initialize>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	w0, [x0, #8]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x1
  1c:	mov	x22, x2
  20:	stp	x23, x24, [sp, #48]
  24:	stp	x25, x26, [sp, #64]
  28:	cbnz	w0, 94 <fileline_initialize+0x94>
  2c:	ldr	w0, [x19, #56]
  30:	cbnz	w0, 78 <fileline_initialize+0x78>
  34:	ldr	x0, [x19, #24]
  38:	str	x0, [sp, #88]
  3c:	ldr	x0, [sp, #88]
  40:	cbnz	x0, 184 <fileline_initialize+0x184>
  44:	adrp	x23, 0 <fileline_initialize>
  48:	adrp	x24, 0 <fileline_initialize>
  4c:	add	x25, sp, #0x54
  50:	add	x23, x23, #0x0
  54:	add	x24, x24, #0x0
  58:	mov	w26, #0x0                   	// #0
  5c:	sub	w0, w26, #0x1
  60:	cmp	w0, #0x3
  64:	b.hi	b4 <fileline_initialize+0xb4>  // b.pmore
  68:	ldrb	w0, [x23, w0, uxtw]
  6c:	adr	x1, 78 <fileline_initialize+0x78>
  70:	add	x0, x1, w0, sxtb #2
  74:	br	x0
  78:	adrp	x1, 0 <fileline_initialize>
  7c:	mov	x0, x22
  80:	add	x1, x1, #0x0
  84:	mov	w2, #0xffffffff            	// #-1
  88:	blr	x21
  8c:	mov	w0, #0x0                   	// #0
  90:	b	110 <fileline_initialize+0x110>
  94:	add	x0, x19, #0x38
  98:	ldar	w0, [x0]
  9c:	cbnz	w0, 78 <fileline_initialize+0x78>
  a0:	ldr	w0, [x19, #8]
  a4:	cbz	w0, 34 <fileline_initialize+0x34>
  a8:	add	x0, x19, #0x18
  ac:	ldar	x0, [x0]
  b0:	b	38 <fileline_initialize+0x38>
  b4:	ldr	x20, [x19]
  b8:	cbz	x20, e0 <fileline_initialize+0xe0>
  bc:	mov	x2, x22
  c0:	mov	x3, x25
  c4:	mov	x1, x21
  c8:	mov	x0, x20
  cc:	bl	0 <__asan_backtrace_open>
  d0:	mov	w2, w0
  d4:	tbz	w0, #31, 18c <fileline_initialize+0x18c>
  d8:	ldr	w0, [sp, #84]
  dc:	cbz	w0, 100 <fileline_initialize+0x100>
  e0:	add	w26, w26, #0x1
  e4:	cmp	w26, #0x5
  e8:	b.ne	5c <fileline_initialize+0x5c>  // b.any
  ec:	ldr	x1, [x19]
  f0:	cbz	x1, 160 <fileline_initialize+0x160>
  f4:	mov	w2, #0x2                   	// #2
  f8:	mov	x0, x22
  fc:	blr	x21
 100:	ldr	w0, [x19, #8]
 104:	cbnz	w0, 170 <fileline_initialize+0x170>
 108:	mov	w1, #0x1                   	// #1
 10c:	str	w1, [x19, #56]
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x21, x22, [sp, #32]
 118:	ldp	x23, x24, [sp, #48]
 11c:	ldp	x25, x26, [sp, #64]
 120:	ldp	x29, x30, [sp], #160
 124:	ret
 128:	bl	0 <getpid>
 12c:	add	x20, sp, #0x60
 130:	sxtw	x3, w0
 134:	adrp	x2, 0 <fileline_initialize>
 138:	mov	x0, x20
 13c:	add	x2, x2, #0x0
 140:	mov	x1, #0x40                  	// #64
 144:	bl	0 <snprintf>
 148:	b	bc <fileline_initialize+0xbc>
 14c:	adrp	x20, 0 <fileline_initialize>
 150:	add	x20, x20, #0x0
 154:	b	bc <fileline_initialize+0xbc>
 158:	mov	x20, x24
 15c:	b	bc <fileline_initialize+0xbc>
 160:	adrp	x1, 0 <fileline_initialize>
 164:	mov	w2, #0x0                   	// #0
 168:	add	x1, x1, #0x0
 16c:	b	f8 <fileline_initialize+0xf8>
 170:	mov	w0, #0x1                   	// #1
 174:	add	x19, x19, #0x38
 178:	stlr	w0, [x19]
 17c:	b	8c <fileline_initialize+0x8c>
 180:	str	x1, [x19, #24]
 184:	mov	w0, #0x1                   	// #1
 188:	b	110 <fileline_initialize+0x110>
 18c:	add	x5, sp, #0x58
 190:	mov	x4, x22
 194:	mov	x3, x21
 198:	mov	x1, x20
 19c:	mov	x0, x19
 1a0:	bl	0 <__asan_backtrace_initialize>
 1a4:	cbz	w0, 100 <fileline_initialize+0x100>
 1a8:	ldr	w0, [x19, #8]
 1ac:	ldr	x1, [sp, #88]
 1b0:	cbz	w0, 180 <fileline_initialize+0x180>
 1b4:	add	x19, x19, #0x18
 1b8:	stlr	x1, [x19]
 1bc:	b	184 <fileline_initialize+0x184>

00000000000001c0 <__asan_backtrace_pcinfo>:
 1c0:	stp	x29, x30, [sp, #-64]!
 1c4:	mov	x29, sp
 1c8:	stp	x19, x20, [sp, #16]
 1cc:	mov	x19, x0
 1d0:	mov	x20, x3
 1d4:	stp	x21, x22, [sp, #32]
 1d8:	mov	x22, x1
 1dc:	mov	x21, x4
 1e0:	mov	x1, x3
 1e4:	str	x23, [sp, #48]
 1e8:	mov	x23, x2
 1ec:	mov	x2, x4
 1f0:	bl	0 <fileline_initialize>
 1f4:	cbz	w0, 230 <__asan_backtrace_pcinfo+0x70>
 1f8:	ldr	w0, [x19, #56]
 1fc:	cbnz	w0, 230 <__asan_backtrace_pcinfo+0x70>
 200:	mov	x4, x21
 204:	mov	x3, x20
 208:	mov	x2, x23
 20c:	mov	x1, x22
 210:	mov	x0, x19
 214:	ldr	x5, [x19, #24]
 218:	ldp	x19, x20, [sp, #16]
 21c:	mov	x16, x5
 220:	ldp	x21, x22, [sp, #32]
 224:	ldr	x23, [sp, #48]
 228:	ldp	x29, x30, [sp], #64
 22c:	br	x16
 230:	mov	w0, #0x0                   	// #0
 234:	ldp	x19, x20, [sp, #16]
 238:	ldp	x21, x22, [sp, #32]
 23c:	ldr	x23, [sp, #48]
 240:	ldp	x29, x30, [sp], #64
 244:	ret

0000000000000248 <__asan_backtrace_syminfo>:
 248:	stp	x29, x30, [sp, #-64]!
 24c:	mov	x29, sp
 250:	stp	x19, x20, [sp, #16]
 254:	mov	x19, x0
 258:	mov	x20, x3
 25c:	stp	x21, x22, [sp, #32]
 260:	mov	x22, x1
 264:	mov	x21, x4
 268:	mov	x1, x3
 26c:	str	x23, [sp, #48]
 270:	mov	x23, x2
 274:	mov	x2, x4
 278:	bl	0 <fileline_initialize>
 27c:	cbz	w0, 2a8 <__asan_backtrace_syminfo+0x60>
 280:	ldr	w0, [x19, #56]
 284:	cbnz	w0, 2bc <__asan_backtrace_syminfo+0x74>
 288:	ldr	x5, [x19, #40]
 28c:	mov	x0, x19
 290:	mov	x4, x21
 294:	mov	x3, x20
 298:	mov	x2, x23
 29c:	mov	x1, x22
 2a0:	blr	x5
 2a4:	mov	w0, #0x1                   	// #1
 2a8:	ldp	x19, x20, [sp, #16]
 2ac:	ldp	x21, x22, [sp, #32]
 2b0:	ldr	x23, [sp, #48]
 2b4:	ldp	x29, x30, [sp], #64
 2b8:	ret
 2bc:	mov	w0, #0x0                   	// #0
 2c0:	b	2a8 <__asan_backtrace_syminfo+0x60>

mmap.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <backtrace_free_locked.part.0>:
   0:	ldr	x4, [x0, #64]
   4:	add	x5, x0, #0x40
   8:	mov	x3, #0x0                   	// #0
   c:	mov	x6, #0x0                   	// #0
  10:	cbnz	x4, 44 <backtrace_free_locked.part.0+0x44>
  14:	cmp	x6, #0xf
  18:	b.ls	34 <backtrace_free_locked.part.0+0x34>  // b.plast
  1c:	ldr	x4, [x3]
  20:	ldr	x5, [x4, #8]
  24:	cmp	x5, x2
  28:	b.cs	40 <backtrace_free_locked.part.0+0x40>  // b.hs, b.nlast
  2c:	ldr	x4, [x4]
  30:	str	x4, [x3]
  34:	ldr	x3, [x0, #64]
  38:	stp	x3, x2, [x1]
  3c:	str	x1, [x0, #64]
  40:	ret
  44:	cbz	x3, 5c <backtrace_free_locked.part.0+0x5c>
  48:	ldr	x7, [x3]
  4c:	ldr	x8, [x4, #8]
  50:	ldr	x7, [x7, #8]
  54:	cmp	x8, x7
  58:	csel	x5, x5, x3, cc  // cc = lo, ul, last
  5c:	mov	x3, x5
  60:	add	x6, x6, #0x1
  64:	mov	x5, x4
  68:	ldr	x4, [x4]
  6c:	b	10 <backtrace_free_locked.part.0+0x10>

0000000000000070 <__asan_backtrace_free>:
  70:	stp	x29, x30, [sp, #-48]!
  74:	mov	x29, sp
  78:	stp	x19, x20, [sp, #16]
  7c:	mov	x19, x0
  80:	mov	x20, x2
  84:	str	x21, [sp, #32]
  88:	mov	x0, #0xffff                	// #65535
  8c:	mov	x21, x1
  90:	cmp	x2, x0
  94:	b.hi	e8 <__asan_backtrace_free+0x78>  // b.pmore
  98:	ldr	w0, [x19, #8]
  9c:	cbz	w0, 120 <__asan_backtrace_free+0xb0>
  a0:	add	x0, x19, #0x3c
  a4:	mov	w2, #0x1                   	// #1
  a8:	ldxr	w1, [x0]
  ac:	stxr	w3, w2, [x0]
  b0:	cbnz	w3, a8 <__asan_backtrace_free+0x38>
  b4:	dmb	ish
  b8:	cbnz	w1, 110 <__asan_backtrace_free+0xa0>
  bc:	cmp	x20, #0xf
  c0:	b.ls	d4 <__asan_backtrace_free+0x64>  // b.plast
  c4:	mov	x2, x20
  c8:	mov	x1, x21
  cc:	mov	x0, x19
  d0:	bl	0 <backtrace_free_locked.part.0>
  d4:	ldr	w0, [x19, #8]
  d8:	cbz	w0, 110 <__asan_backtrace_free+0xa0>
  dc:	add	x19, x19, #0x3c
  e0:	stlr	wzr, [x19]
  e4:	b	110 <__asan_backtrace_free+0xa0>
  e8:	bl	0 <getpagesize>
  ec:	sxtw	x0, w0
  f0:	sub	x0, x0, #0x1
  f4:	orr	x1, x21, x20
  f8:	tst	x0, x1
  fc:	b.ne	98 <__asan_backtrace_free+0x28>  // b.any
 100:	mov	x1, x20
 104:	mov	x0, x21
 108:	bl	0 <munmap>
 10c:	cbnz	w0, 98 <__asan_backtrace_free+0x28>
 110:	ldp	x19, x20, [sp, #16]
 114:	ldr	x21, [sp, #32]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret
 120:	cmp	x20, #0xf
 124:	b.hi	c4 <__asan_backtrace_free+0x54>  // b.pmore
 128:	b	110 <__asan_backtrace_free+0xa0>

000000000000012c <__asan_backtrace_alloc>:
 12c:	stp	x29, x30, [sp, #-64]!
 130:	mov	x29, sp
 134:	stp	x21, x22, [sp, #32]
 138:	mov	x21, x0
 13c:	ldr	w0, [x0, #8]
 140:	stp	x19, x20, [sp, #16]
 144:	mov	x19, x1
 148:	stp	x23, x24, [sp, #48]
 14c:	mov	x23, x2
 150:	mov	x24, x3
 154:	cbnz	w0, 1c8 <__asan_backtrace_alloc+0x9c>
 158:	ldr	x20, [x21, #64]
 15c:	add	x0, x21, #0x40
 160:	cbz	x20, 19c <__asan_backtrace_alloc+0x70>
 164:	ldp	x1, x2, [x20]
 168:	cmp	x2, x19
 16c:	b.cc	248 <__asan_backtrace_alloc+0x11c>  // b.lo, b.ul, b.last
 170:	add	x19, x19, #0x7
 174:	str	x1, [x0]
 178:	and	x19, x19, #0xfffffffffffffff8
 17c:	cmp	x2, x19
 180:	b.ls	19c <__asan_backtrace_alloc+0x70>  // b.plast
 184:	sub	x2, x2, x19
 188:	cmp	x2, #0xf
 18c:	b.ls	19c <__asan_backtrace_alloc+0x70>  // b.plast
 190:	add	x1, x20, x19
 194:	mov	x0, x21
 198:	bl	0 <backtrace_free_locked.part.0>
 19c:	ldr	w0, [x21, #8]
 1a0:	cbz	w0, 1ac <__asan_backtrace_alloc+0x80>
 1a4:	add	x0, x21, #0x3c
 1a8:	stlr	wzr, [x0]
 1ac:	cbz	x20, 1e4 <__asan_backtrace_alloc+0xb8>
 1b0:	mov	x0, x20
 1b4:	ldp	x19, x20, [sp, #16]
 1b8:	ldp	x21, x22, [sp, #32]
 1bc:	ldp	x23, x24, [sp, #48]
 1c0:	ldp	x29, x30, [sp], #64
 1c4:	ret
 1c8:	add	x0, x21, #0x3c
 1cc:	mov	w2, #0x1                   	// #1
 1d0:	ldxr	w1, [x0]
 1d4:	stxr	w3, w2, [x0]
 1d8:	cbnz	w3, 1d0 <__asan_backtrace_alloc+0xa4>
 1dc:	dmb	ish
 1e0:	cbz	w1, 158 <__asan_backtrace_alloc+0x2c>
 1e4:	bl	0 <getpagesize>
 1e8:	sub	x22, x19, #0x1
 1ec:	sxtw	x2, w0
 1f0:	add	x0, x22, w0, sxtw
 1f4:	neg	x22, x2
 1f8:	mov	x5, #0x0                   	// #0
 1fc:	and	x22, x0, x22
 200:	mov	w4, #0xffffffff            	// #-1
 204:	mov	x1, x22
 208:	mov	w3, #0x22                  	// #34
 20c:	mov	w2, #0x3                   	// #3
 210:	mov	x0, #0x0                   	// #0
 214:	bl	0 <mmap>
 218:	mov	x20, x0
 21c:	cmn	x0, #0x1
 220:	b.ne	254 <__asan_backtrace_alloc+0x128>  // b.any
 224:	cbz	x23, 240 <__asan_backtrace_alloc+0x114>
 228:	bl	0 <__errno_location>
 22c:	ldr	w2, [x0]
 230:	adrp	x1, 0 <backtrace_free_locked.part.0>
 234:	mov	x0, x24
 238:	add	x1, x1, #0x0
 23c:	blr	x23
 240:	mov	x20, #0x0                   	// #0
 244:	b	1b0 <__asan_backtrace_alloc+0x84>
 248:	mov	x0, x20
 24c:	mov	x20, x1
 250:	b	160 <__asan_backtrace_alloc+0x34>
 254:	add	x19, x19, #0x7
 258:	and	x19, x19, #0xfffffffffffffff8
 25c:	cmp	x22, x19
 260:	b.ls	1b0 <__asan_backtrace_alloc+0x84>  // b.plast
 264:	add	x1, x0, x19
 268:	mov	x4, x24
 26c:	mov	x3, x23
 270:	sub	x2, x22, x19
 274:	mov	x0, x21
 278:	bl	70 <__asan_backtrace_free>
 27c:	b	1b0 <__asan_backtrace_alloc+0x84>

0000000000000280 <__asan_backtrace_vector_grow>:
 280:	stp	x29, x30, [sp, #-80]!
 284:	mov	x29, sp
 288:	stp	x23, x24, [sp, #48]
 28c:	mov	x23, x0
 290:	ldr	x0, [x4, #16]
 294:	stp	x19, x20, [sp, #16]
 298:	mov	x19, x4
 29c:	stp	x21, x22, [sp, #32]
 2a0:	cmp	x0, x1
 2a4:	mov	x22, x1
 2a8:	str	x25, [sp, #64]
 2ac:	b.cs	320 <__asan_backtrace_vector_grow+0xa0>  // b.hs, b.nlast
 2b0:	ldr	x0, [x4, #8]
 2b4:	mov	x24, x2
 2b8:	mov	x25, x3
 2bc:	add	x21, x1, x0
 2c0:	cbnz	x0, 354 <__asan_backtrace_vector_grow+0xd4>
 2c4:	lsl	x20, x21, #4
 2c8:	mov	x3, x25
 2cc:	mov	x2, x24
 2d0:	mov	x1, x20
 2d4:	mov	x0, x23
 2d8:	bl	12c <__asan_backtrace_alloc>
 2dc:	mov	x21, x0
 2e0:	cbz	x0, 338 <__asan_backtrace_vector_grow+0xb8>
 2e4:	ldr	x1, [x19]
 2e8:	cbz	x1, 310 <__asan_backtrace_vector_grow+0x90>
 2ec:	ldr	x2, [x19, #8]
 2f0:	bl	0 <__asan_internal_memcpy>
 2f4:	ldp	x1, x2, [x19]
 2f8:	mov	x4, x25
 2fc:	ldr	x0, [x19, #16]
 300:	mov	x3, x24
 304:	add	x2, x2, x0
 308:	mov	x0, x23
 30c:	bl	70 <__asan_backtrace_free>
 310:	ldr	x0, [x19, #8]
 314:	str	x21, [x19]
 318:	sub	x20, x20, x0
 31c:	str	x20, [x19, #16]
 320:	ldp	x21, x0, [x19]
 324:	ldr	x1, [x19, #16]
 328:	add	x21, x21, x0
 32c:	add	x0, x0, x22
 330:	sub	x22, x1, x22
 334:	stp	x0, x22, [x19, #8]
 338:	mov	x0, x21
 33c:	ldp	x19, x20, [sp, #16]
 340:	ldp	x21, x22, [sp, #32]
 344:	ldp	x23, x24, [sp, #48]
 348:	ldr	x25, [sp, #64]
 34c:	ldp	x29, x30, [sp], #80
 350:	ret
 354:	bl	0 <getpagesize>
 358:	lsl	x20, x21, #1
 35c:	sxtw	x1, w0
 360:	cmp	x21, w0, sxtw
 364:	b.cs	374 <__asan_backtrace_vector_grow+0xf4>  // b.hs, b.nlast
 368:	cmp	x1, x20
 36c:	csel	x20, x1, x20, ls  // ls = plast
 370:	b	2c8 <__asan_backtrace_vector_grow+0x48>
 374:	sub	x20, x20, #0x1
 378:	add	x20, x20, x1
 37c:	neg	x1, x1
 380:	and	x20, x20, x1
 384:	b	2c8 <__asan_backtrace_vector_grow+0x48>

0000000000000388 <__asan_backtrace_vector_finish>:
 388:	ldp	x0, x2, [x1]
 38c:	add	x2, x0, x2
 390:	stp	x2, xzr, [x1]
 394:	ret

0000000000000398 <__asan_backtrace_vector_release>:
 398:	stp	x29, x30, [sp, #-32]!
 39c:	mov	x29, sp
 3a0:	ldr	x5, [x1, #8]
 3a4:	str	x19, [sp, #16]
 3a8:	mov	x19, x1
 3ac:	add	x1, x5, #0x7
 3b0:	and	x1, x1, #0xfffffffffffffff8
 3b4:	ldr	x4, [x19, #16]
 3b8:	ldr	x6, [x19]
 3bc:	add	x5, x5, x4
 3c0:	mov	x4, x3
 3c4:	mov	x3, x2
 3c8:	sub	x2, x5, x1
 3cc:	add	x1, x6, x1
 3d0:	bl	70 <__asan_backtrace_free>
 3d4:	str	xzr, [x19, #16]
 3d8:	ldr	x0, [x19, #8]
 3dc:	cbnz	x0, 3e4 <__asan_backtrace_vector_release+0x4c>
 3e0:	str	xzr, [x19]
 3e4:	mov	w0, #0x1                   	// #1
 3e8:	ldr	x19, [sp, #16]
 3ec:	ldp	x29, x30, [sp], #32
 3f0:	ret

mmapio.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_get_view>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	sub	x19, x3, #0x1
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x4
  18:	mov	x22, x5
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x24, x2
  24:	mov	x23, x6
  28:	str	x25, [sp, #64]
  2c:	mov	w25, w1
  30:	bl	0 <getpagesize>
  34:	sxtw	x0, w0
  38:	mov	w4, w25
  3c:	mov	w3, #0x2                   	// #2
  40:	mov	w2, #0x1                   	// #1
  44:	udiv	x20, x24, x0
  48:	msub	w20, w20, w0, w24
  4c:	add	x1, x0, x20
  50:	neg	x0, x0
  54:	add	x19, x19, x1
  58:	sub	x5, x24, x20
  5c:	and	x19, x0, x19
  60:	mov	x0, #0x0                   	// #0
  64:	mov	x1, x19
  68:	bl	0 <mmap>
  6c:	cmn	x0, #0x1
  70:	b.ne	a8 <__asan_backtrace_get_view+0xa8>  // b.any
  74:	bl	0 <__errno_location>
  78:	ldr	w2, [x0]
  7c:	adrp	x1, 0 <__asan_backtrace_get_view>
  80:	mov	x0, x22
  84:	add	x1, x1, #0x0
  88:	blr	x21
  8c:	mov	w0, #0x0                   	// #0
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x21, x22, [sp, #32]
  98:	ldp	x23, x24, [sp, #48]
  9c:	ldr	x25, [sp, #64]
  a0:	ldp	x29, x30, [sp], #80
  a4:	ret
  a8:	add	x20, x0, x20
  ac:	stp	x20, x0, [x23]
  b0:	mov	w0, #0x1                   	// #1
  b4:	str	x19, [x23, #16]
  b8:	b	90 <__asan_backtrace_get_view+0x90>

00000000000000bc <__asan_backtrace_release_view>:
  bc:	mov	x4, x1
  c0:	stp	x29, x30, [sp, #-32]!
  c4:	mov	x29, sp
  c8:	ldr	x0, [x4, #8]
  cc:	stp	x19, x20, [sp, #16]
  d0:	mov	x19, x2
  d4:	ldr	x1, [x1, #16]
  d8:	mov	x20, x3
  dc:	bl	0 <munmap>
  e0:	tbz	w0, #31, 108 <__asan_backtrace_release_view+0x4c>
  e4:	bl	0 <__errno_location>
  e8:	ldr	w2, [x0]
  ec:	mov	x16, x19
  f0:	mov	x0, x20
  f4:	ldp	x19, x20, [sp, #16]
  f8:	adrp	x1, 0 <__asan_backtrace_get_view>
  fc:	ldp	x29, x30, [sp], #32
 100:	add	x1, x1, #0x0
 104:	br	x16
 108:	ldp	x19, x20, [sp, #16]
 10c:	ldp	x29, x30, [sp], #32
 110:	ret

posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_open>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x3
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	str	x23, [sp, #48]
  20:	mov	x23, x2
  24:	cbz	x3, 2c <__asan_backtrace_open+0x2c>
  28:	str	wzr, [x3]
  2c:	mov	x0, x21
  30:	mov	w1, #0x80000               	// #524288
  34:	bl	0 <open>
  38:	mov	w19, w0
  3c:	tbz	w0, #31, 88 <__asan_backtrace_open+0x88>
  40:	bl	0 <__errno_location>
  44:	ldr	w2, [x0]
  48:	cbz	x20, 78 <__asan_backtrace_open+0x78>
  4c:	cmp	w2, #0x2
  50:	b.ne	78 <__asan_backtrace_open+0x78>  // b.any
  54:	mov	w0, #0x1                   	// #1
  58:	str	w0, [x20]
  5c:	mov	w19, #0xffffffff            	// #-1
  60:	mov	w0, w19
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldr	x23, [sp, #48]
  70:	ldp	x29, x30, [sp], #64
  74:	ret
  78:	mov	x1, x21
  7c:	mov	x0, x23
  80:	blr	x22
  84:	b	5c <__asan_backtrace_open+0x5c>
  88:	mov	w2, #0x1                   	// #1
  8c:	mov	w1, #0x2                   	// #2
  90:	bl	0 <fcntl>
  94:	b	60 <__asan_backtrace_open+0x60>

0000000000000098 <__asan_backtrace_close>:
  98:	stp	x29, x30, [sp, #-32]!
  9c:	mov	x29, sp
  a0:	stp	x19, x20, [sp, #16]
  a4:	mov	x19, x1
  a8:	mov	x20, x2
  ac:	bl	0 <close>
  b0:	tbz	w0, #31, dc <__asan_backtrace_close+0x44>
  b4:	bl	0 <__errno_location>
  b8:	ldr	w2, [x0]
  bc:	adrp	x1, 0 <__asan_backtrace_open>
  c0:	mov	x0, x20
  c4:	add	x1, x1, #0x0
  c8:	blr	x19
  cc:	mov	w0, #0x0                   	// #0
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret
  dc:	mov	w0, #0x1                   	// #1
  e0:	b	d0 <__asan_backtrace_close+0x38>

sort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <swap>:
   0:	mov	x3, #0x0                   	// #0
   4:	cmp	x3, x2
   8:	b.ne	10 <swap+0x10>  // b.any
   c:	ret
  10:	ldrb	w5, [x1, x3]
  14:	ldrb	w4, [x0, x3]
  18:	strb	w5, [x0, x3]
  1c:	strb	w4, [x1, x3]
  20:	add	x3, x3, #0x1
  24:	b	4 <swap+0x4>

0000000000000028 <__asan_backtrace_qsort>:
  28:	stp	x29, x30, [sp, #-80]!
  2c:	mov	x29, sp
  30:	stp	x19, x20, [sp, #16]
  34:	mov	x20, x0
  38:	mov	x19, x2
  3c:	stp	x21, x22, [sp, #32]
  40:	mov	x22, x1
  44:	stp	x23, x24, [sp, #48]
  48:	mov	x24, x3
  4c:	str	x25, [sp, #64]
  50:	cmp	x22, #0x1
  54:	b.ls	124 <__asan_backtrace_qsort+0xfc>  // b.plast
  58:	lsr	x1, x22, #1
  5c:	add	x25, x20, x19
  60:	mov	x21, #0x0                   	// #0
  64:	mov	x23, #0x1                   	// #1
  68:	mov	x2, x19
  6c:	mov	x0, x20
  70:	madd	x1, x1, x19, x20
  74:	bl	0 <swap>
  78:	mov	x1, x25
  7c:	mov	x0, x20
  80:	blr	x24
  84:	cmp	w0, #0x0
  88:	b.le	a8 <__asan_backtrace_qsort+0x80>
  8c:	add	x21, x21, #0x1
  90:	cmp	x21, x23
  94:	b.eq	a8 <__asan_backtrace_qsort+0x80>  // b.none
  98:	madd	x0, x21, x19, x20
  9c:	mov	x2, x19
  a0:	mov	x1, x25
  a4:	bl	0 <swap>
  a8:	add	x23, x23, #0x1
  ac:	add	x25, x25, x19
  b0:	cmp	x22, x23
  b4:	b.ne	78 <__asan_backtrace_qsort+0x50>  // b.any
  b8:	madd	x1, x21, x19, x19
  bc:	sub	x23, x22, #0x1
  c0:	sub	x23, x23, x21
  c4:	add	x25, x20, x1
  c8:	cbnz	x21, ec <__asan_backtrace_qsort+0xc4>
  cc:	mov	x3, x24
  d0:	mov	x2, x19
  d4:	mov	x1, x21
  d8:	mov	x0, x20
  dc:	bl	28 <__asan_backtrace_qsort>
  e0:	mov	x20, x25
  e4:	mov	x22, x23
  e8:	b	50 <__asan_backtrace_qsort+0x28>
  ec:	sub	x1, x1, x19
  f0:	mov	x2, x19
  f4:	add	x1, x20, x1
  f8:	mov	x0, x20
  fc:	bl	0 <swap>
 100:	cmp	x22, x21, lsl #1
 104:	b.hi	cc <__asan_backtrace_qsort+0xa4>  // b.pmore
 108:	mov	x1, x23
 10c:	mov	x0, x25
 110:	mov	x3, x24
 114:	mov	x25, x20
 118:	mov	x23, x21
 11c:	bl	28 <__asan_backtrace_qsort>
 120:	b	e0 <__asan_backtrace_qsort+0xb8>
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x21, x22, [sp, #32]
 12c:	ldp	x23, x24, [sp, #48]
 130:	ldr	x25, [sp, #64]
 134:	ldp	x29, x30, [sp], #80
 138:	ret

state.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_create_state>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x20, sp, #0x48
  10:	mov	x19, x2
  14:	mov	x2, #0x48                  	// #72
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	w22, w1
  20:	mov	x21, x3
  24:	mov	w1, #0x0                   	// #0
  28:	str	x23, [sp, #48]
  2c:	mov	x23, x0
  30:	mov	x0, x20
  34:	bl	0 <__asan_internal_memset>
  38:	mov	x2, x19
  3c:	mov	x3, x21
  40:	mov	x0, x20
  44:	mov	x1, #0x48                  	// #72
  48:	str	x23, [sp, #72]
  4c:	str	w22, [sp, #80]
  50:	bl	0 <__asan_backtrace_alloc>
  54:	mov	x19, x0
  58:	cbz	x0, 68 <__asan_backtrace_create_state+0x68>
  5c:	mov	x1, x20
  60:	mov	x2, #0x48                  	// #72
  64:	bl	0 <memcpy>
  68:	mov	x0, x19
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldr	x23, [sp, #48]
  78:	ldp	x29, x30, [sp], #144
  7c:	ret
