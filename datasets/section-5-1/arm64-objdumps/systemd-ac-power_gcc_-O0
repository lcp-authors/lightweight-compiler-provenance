
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-ac-power_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400ae8 <_init>:
  400ae8:	stp	x29, x30, [sp, #-16]!
  400aec:	mov	x29, sp
  400af0:	bl	400c90 <call_weak_fn>
  400af4:	ldp	x29, x30, [sp], #16
  400af8:	ret

Disassembly of section .plt:

0000000000400b00 <.plt>:
  400b00:	stp	x16, x30, [sp, #-16]!
  400b04:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b08:	ldr	x17, [x16, #3928]
  400b0c:	add	x16, x16, #0xf58
  400b10:	br	x17
  400b14:	nop
  400b18:	nop
  400b1c:	nop

0000000000400b20 <__libc_start_main@plt>:
  400b20:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b24:	ldr	x17, [x16, #3936]
  400b28:	add	x16, x16, #0xf60
  400b2c:	br	x17

0000000000400b30 <__gmon_start__@plt>:
  400b30:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b34:	ldr	x17, [x16, #3944]
  400b38:	add	x16, x16, #0xf68
  400b3c:	br	x17

0000000000400b40 <polkit_agent_close@plt>:
  400b40:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b44:	ldr	x17, [x16, #3952]
  400b48:	add	x16, x16, #0xf70
  400b4c:	br	x17

0000000000400b50 <log_parse_environment_realm@plt>:
  400b50:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b54:	ldr	x17, [x16, #3960]
  400b58:	add	x16, x16, #0xf78
  400b5c:	br	x17

0000000000400b60 <log_assert_failed_realm@plt>:
  400b60:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b64:	ldr	x17, [x16, #3968]
  400b68:	add	x16, x16, #0xf80
  400b6c:	br	x17

0000000000400b70 <getopt_long@plt>:
  400b70:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b74:	ldr	x17, [x16, #3976]
  400b78:	add	x16, x16, #0xf88
  400b7c:	br	x17

0000000000400b80 <log_assert_failed_unreachable_realm@plt>:
  400b80:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b84:	ldr	x17, [x16, #3984]
  400b88:	add	x16, x16, #0xf90
  400b8c:	br	x17

0000000000400b90 <abort@plt>:
  400b90:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400b94:	ldr	x17, [x16, #3992]
  400b98:	add	x16, x16, #0xf98
  400b9c:	br	x17

0000000000400ba0 <ask_password_agent_close@plt>:
  400ba0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400ba4:	ldr	x17, [x16, #4000]
  400ba8:	add	x16, x16, #0xfa0
  400bac:	br	x17

0000000000400bb0 <version@plt>:
  400bb0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400bb4:	ldr	x17, [x16, #4008]
  400bb8:	add	x16, x16, #0xfa8
  400bbc:	br	x17

0000000000400bc0 <pager_close@plt>:
  400bc0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400bc4:	ldr	x17, [x16, #4016]
  400bc8:	add	x16, x16, #0xfb0
  400bcc:	br	x17

0000000000400bd0 <log_internal_realm@plt>:
  400bd0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400bd4:	ldr	x17, [x16, #4024]
  400bd8:	add	x16, x16, #0xfb8
  400bdc:	br	x17

0000000000400be0 <on_ac_power@plt>:
  400be0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400be4:	ldr	x17, [x16, #4032]
  400be8:	add	x16, x16, #0xfc0
  400bec:	br	x17

0000000000400bf0 <puts@plt>:
  400bf0:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400bf4:	ldr	x17, [x16, #4040]
  400bf8:	add	x16, x16, #0xfc8
  400bfc:	br	x17

0000000000400c00 <mac_selinux_finish@plt>:
  400c00:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400c04:	ldr	x17, [x16, #4048]
  400c08:	add	x16, x16, #0xfd0
  400c0c:	br	x17

0000000000400c10 <printf@plt>:
  400c10:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400c14:	ldr	x17, [x16, #4056]
  400c18:	add	x16, x16, #0xfd8
  400c1c:	br	x17

0000000000400c20 <log_open@plt>:
  400c20:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400c24:	ldr	x17, [x16, #4064]
  400c28:	add	x16, x16, #0xfe0
  400c2c:	br	x17

0000000000400c30 <log_get_max_level_realm@plt>:
  400c30:	adrp	x16, 411000 <__FRAME_END__+0xf7e0>
  400c34:	ldr	x17, [x16, #4072]
  400c38:	add	x16, x16, #0xfe8
  400c3c:	br	x17

Disassembly of section .text:

0000000000400c40 <_start>:
  400c40:	mov	x29, #0x0                   	// #0
  400c44:	mov	x30, #0x0                   	// #0
  400c48:	mov	x5, x0
  400c4c:	ldr	x1, [sp]
  400c50:	add	x2, sp, #0x8
  400c54:	mov	x6, sp
  400c58:	movz	x0, #0x0, lsl #48
  400c5c:	movk	x0, #0x0, lsl #32
  400c60:	movk	x0, #0x40, lsl #16
  400c64:	movk	x0, #0x129c
  400c68:	movz	x3, #0x0, lsl #48
  400c6c:	movk	x3, #0x0, lsl #32
  400c70:	movk	x3, #0x40, lsl #16
  400c74:	movk	x3, #0x1300
  400c78:	movz	x4, #0x0, lsl #48
  400c7c:	movk	x4, #0x0, lsl #32
  400c80:	movk	x4, #0x40, lsl #16
  400c84:	movk	x4, #0x1380
  400c88:	bl	400b20 <__libc_start_main@plt>
  400c8c:	bl	400b90 <abort@plt>

0000000000400c90 <call_weak_fn>:
  400c90:	adrp	x0, 411000 <__FRAME_END__+0xf7e0>
  400c94:	ldr	x0, [x0, #4088]
  400c98:	cbz	x0, 400ca0 <call_weak_fn+0x10>
  400c9c:	b	400b30 <__gmon_start__@plt>
  400ca0:	ret

0000000000400ca4 <deregister_tm_clones>:
  400ca4:	stp	x29, x30, [sp, #-32]!
  400ca8:	mov	x29, sp
  400cac:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400cb0:	add	x0, x0, #0x0
  400cb4:	str	x0, [sp, #24]
  400cb8:	ldr	x0, [sp, #24]
  400cbc:	str	x0, [sp, #24]
  400cc0:	ldr	x1, [sp, #24]
  400cc4:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400cc8:	add	x0, x0, #0x0
  400ccc:	cmp	x1, x0
  400cd0:	b.eq	400d0c <deregister_tm_clones+0x68>  // b.none
  400cd4:	adrp	x0, 401000 <parse_argv+0xa8>
  400cd8:	add	x0, x0, #0x398
  400cdc:	ldr	x0, [x0]
  400ce0:	str	x0, [sp, #16]
  400ce4:	ldr	x0, [sp, #16]
  400ce8:	str	x0, [sp, #16]
  400cec:	ldr	x0, [sp, #16]
  400cf0:	cmp	x0, #0x0
  400cf4:	b.eq	400d10 <deregister_tm_clones+0x6c>  // b.none
  400cf8:	ldr	x1, [sp, #16]
  400cfc:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400d00:	add	x0, x0, #0x0
  400d04:	blr	x1
  400d08:	b	400d10 <deregister_tm_clones+0x6c>
  400d0c:	nop
  400d10:	ldp	x29, x30, [sp], #32
  400d14:	ret

0000000000400d18 <register_tm_clones>:
  400d18:	stp	x29, x30, [sp, #-48]!
  400d1c:	mov	x29, sp
  400d20:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400d24:	add	x0, x0, #0x0
  400d28:	str	x0, [sp, #40]
  400d2c:	ldr	x0, [sp, #40]
  400d30:	str	x0, [sp, #40]
  400d34:	ldr	x1, [sp, #40]
  400d38:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400d3c:	add	x0, x0, #0x0
  400d40:	sub	x0, x1, x0
  400d44:	asr	x0, x0, #3
  400d48:	lsr	x1, x0, #63
  400d4c:	add	x0, x1, x0
  400d50:	asr	x0, x0, #1
  400d54:	str	x0, [sp, #32]
  400d58:	ldr	x0, [sp, #32]
  400d5c:	cmp	x0, #0x0
  400d60:	b.eq	400da0 <register_tm_clones+0x88>  // b.none
  400d64:	adrp	x0, 401000 <parse_argv+0xa8>
  400d68:	add	x0, x0, #0x3a0
  400d6c:	ldr	x0, [x0]
  400d70:	str	x0, [sp, #24]
  400d74:	ldr	x0, [sp, #24]
  400d78:	str	x0, [sp, #24]
  400d7c:	ldr	x0, [sp, #24]
  400d80:	cmp	x0, #0x0
  400d84:	b.eq	400da4 <register_tm_clones+0x8c>  // b.none
  400d88:	ldr	x2, [sp, #24]
  400d8c:	ldr	x1, [sp, #32]
  400d90:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400d94:	add	x0, x0, #0x0
  400d98:	blr	x2
  400d9c:	b	400da4 <register_tm_clones+0x8c>
  400da0:	nop
  400da4:	ldp	x29, x30, [sp], #48
  400da8:	ret

0000000000400dac <__do_global_dtors_aux>:
  400dac:	stp	x29, x30, [sp, #-16]!
  400db0:	mov	x29, sp
  400db4:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400db8:	add	x0, x0, #0x18
  400dbc:	ldrb	w0, [x0]
  400dc0:	and	x0, x0, #0xff
  400dc4:	cmp	x0, #0x0
  400dc8:	b.ne	400de4 <__do_global_dtors_aux+0x38>  // b.any
  400dcc:	bl	400ca4 <deregister_tm_clones>
  400dd0:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400dd4:	add	x0, x0, #0x18
  400dd8:	mov	w1, #0x1                   	// #1
  400ddc:	strb	w1, [x0]
  400de0:	b	400de8 <__do_global_dtors_aux+0x3c>
  400de4:	nop
  400de8:	ldp	x29, x30, [sp], #16
  400dec:	ret

0000000000400df0 <frame_dummy>:
  400df0:	stp	x29, x30, [sp, #-16]!
  400df4:	mov	x29, sp
  400df8:	bl	400d18 <register_tm_clones>
  400dfc:	nop
  400e00:	ldp	x29, x30, [sp], #16
  400e04:	ret

0000000000400e08 <ALIGN_TO>:
  400e08:	sub	sp, sp, #0x10
  400e0c:	str	x0, [sp, #8]
  400e10:	str	x1, [sp]
  400e14:	ldr	x1, [sp, #8]
  400e18:	ldr	x0, [sp]
  400e1c:	add	x0, x1, x0
  400e20:	sub	x1, x0, #0x1
  400e24:	ldr	x0, [sp]
  400e28:	neg	x0, x0
  400e2c:	and	x0, x1, x0
  400e30:	add	sp, sp, #0x10
  400e34:	ret

0000000000400e38 <save_argc_argv>:
  400e38:	sub	sp, sp, #0x10
  400e3c:	str	w0, [sp, #12]
  400e40:	str	x1, [sp]
  400e44:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400e48:	add	x0, x0, #0x14
  400e4c:	ldr	w1, [sp, #12]
  400e50:	str	w1, [x0]
  400e54:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400e58:	add	x0, x0, #0x0
  400e5c:	ldr	x1, [sp]
  400e60:	str	x1, [x0]
  400e64:	nop
  400e68:	add	sp, sp, #0x10
  400e6c:	ret

0000000000400e70 <yes_no>:
  400e70:	sub	sp, sp, #0x10
  400e74:	strb	w0, [sp, #15]
  400e78:	ldrb	w0, [sp, #15]
  400e7c:	cmp	w0, #0x0
  400e80:	b.eq	400e90 <yes_no+0x20>  // b.none
  400e84:	adrp	x0, 401000 <parse_argv+0xa8>
  400e88:	add	x0, x0, #0x3a8
  400e8c:	b	400e98 <yes_no+0x28>
  400e90:	adrp	x0, 401000 <parse_argv+0xa8>
  400e94:	add	x0, x0, #0x3b0
  400e98:	add	sp, sp, #0x10
  400e9c:	ret

0000000000400ea0 <static_destruct>:
  400ea0:	stp	x29, x30, [sp, #-32]!
  400ea4:	mov	x29, sp
  400ea8:	adrp	x0, 401000 <parse_argv+0xa8>
  400eac:	add	x0, x0, #0x528
  400eb0:	ldr	x0, [x0]
  400eb4:	cmp	x0, #0x0
  400eb8:	b.eq	400f1c <static_destruct+0x7c>  // b.none
  400ebc:	adrp	x0, 401000 <parse_argv+0xa8>
  400ec0:	add	x0, x0, #0x528
  400ec4:	ldr	x0, [x0]
  400ec8:	mov	x1, #0x8                   	// #8
  400ecc:	bl	400e08 <ALIGN_TO>
  400ed0:	str	x0, [sp, #24]
  400ed4:	b	400f00 <static_destruct+0x60>
  400ed8:	ldr	x0, [sp, #24]
  400edc:	ldr	x1, [x0, #8]
  400ee0:	ldr	x0, [sp, #24]
  400ee4:	ldr	x0, [x0]
  400ee8:	blr	x1
  400eec:	ldr	x0, [sp, #24]
  400ef0:	add	x0, x0, #0x10
  400ef4:	mov	x1, #0x8                   	// #8
  400ef8:	bl	400e08 <ALIGN_TO>
  400efc:	str	x0, [sp, #24]
  400f00:	ldr	x1, [sp, #24]
  400f04:	adrp	x0, 401000 <parse_argv+0xa8>
  400f08:	add	x0, x0, #0x530
  400f0c:	ldr	x0, [x0]
  400f10:	cmp	x1, x0
  400f14:	b.cc	400ed8 <static_destruct+0x38>  // b.lo, b.ul, b.last
  400f18:	b	400f20 <static_destruct+0x80>
  400f1c:	nop
  400f20:	ldp	x29, x30, [sp], #32
  400f24:	ret

0000000000400f28 <help>:
  400f28:	stp	x29, x30, [sp, #-16]!
  400f2c:	mov	x29, sp
  400f30:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  400f34:	add	x0, x0, #0x8
  400f38:	ldr	x0, [x0]
  400f3c:	mov	x1, x0
  400f40:	adrp	x0, 401000 <parse_argv+0xa8>
  400f44:	add	x0, x0, #0x3b8
  400f48:	bl	400c10 <printf@plt>
  400f4c:	nop
  400f50:	ldp	x29, x30, [sp], #16
  400f54:	ret

0000000000400f58 <parse_argv>:
  400f58:	stp	x29, x30, [sp, #-48]!
  400f5c:	mov	x29, sp
  400f60:	str	w0, [sp, #28]
  400f64:	str	x1, [sp, #16]
  400f68:	ldr	w0, [sp, #28]
  400f6c:	lsr	w0, w0, #31
  400f70:	and	w0, w0, #0xff
  400f74:	and	x0, x0, #0xff
  400f78:	cmp	x0, #0x0
  400f7c:	b.eq	400fa8 <parse_argv+0x50>  // b.none
  400f80:	adrp	x0, 401000 <parse_argv+0xa8>
  400f84:	add	x1, x0, #0x483
  400f88:	adrp	x0, 401000 <parse_argv+0xa8>
  400f8c:	add	x4, x0, #0x538
  400f90:	mov	w3, #0x22                  	// #34
  400f94:	mov	x2, x1
  400f98:	adrp	x0, 401000 <parse_argv+0xa8>
  400f9c:	add	x1, x0, #0x4a0
  400fa0:	mov	w0, #0x0                   	// #0
  400fa4:	bl	400b60 <log_assert_failed_realm@plt>
  400fa8:	ldr	x0, [sp, #16]
  400fac:	cmp	x0, #0x0
  400fb0:	cset	w0, eq  // eq = none
  400fb4:	and	w0, w0, #0xff
  400fb8:	and	x0, x0, #0xff
  400fbc:	cmp	x0, #0x0
  400fc0:	b.eq	40108c <parse_argv+0x134>  // b.none
  400fc4:	adrp	x0, 401000 <parse_argv+0xa8>
  400fc8:	add	x1, x0, #0x483
  400fcc:	adrp	x0, 401000 <parse_argv+0xa8>
  400fd0:	add	x4, x0, #0x538
  400fd4:	mov	w3, #0x23                  	// #35
  400fd8:	mov	x2, x1
  400fdc:	adrp	x0, 401000 <parse_argv+0xa8>
  400fe0:	add	x1, x0, #0x4b0
  400fe4:	mov	w0, #0x0                   	// #0
  400fe8:	bl	400b60 <log_assert_failed_realm@plt>
  400fec:	ldr	w0, [sp, #32]
  400ff0:	cmp	w0, #0x100
  400ff4:	b.eq	401040 <parse_argv+0xe8>  // b.none
  400ff8:	ldr	w0, [sp, #32]
  400ffc:	cmp	w0, #0x100
  401000:	b.gt	401064 <parse_argv+0x10c>
  401004:	ldr	w0, [sp, #32]
  401008:	cmp	w0, #0x76
  40100c:	b.eq	401048 <parse_argv+0xf0>  // b.none
  401010:	ldr	w0, [sp, #32]
  401014:	cmp	w0, #0x76
  401018:	b.gt	401064 <parse_argv+0x10c>
  40101c:	ldr	w0, [sp, #32]
  401020:	cmp	w0, #0x3f
  401024:	b.eq	40105c <parse_argv+0x104>  // b.none
  401028:	ldr	w0, [sp, #32]
  40102c:	cmp	w0, #0x68
  401030:	b.ne	401064 <parse_argv+0x10c>  // b.any
  401034:	bl	400f28 <help>
  401038:	mov	w0, #0x0                   	// #0
  40103c:	b	401174 <parse_argv+0x21c>
  401040:	bl	400bb0 <version@plt>
  401044:	b	401174 <parse_argv+0x21c>
  401048:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  40104c:	add	x0, x0, #0x19
  401050:	mov	w1, #0x1                   	// #1
  401054:	strb	w1, [x0]
  401058:	b	40108c <parse_argv+0x134>
  40105c:	mov	w0, #0xffffffea            	// #-22
  401060:	b	401174 <parse_argv+0x21c>
  401064:	adrp	x0, 401000 <parse_argv+0xa8>
  401068:	add	x1, x0, #0x483
  40106c:	adrp	x0, 401000 <parse_argv+0xa8>
  401070:	add	x4, x0, #0x538
  401074:	mov	w3, #0x38                  	// #56
  401078:	mov	x2, x1
  40107c:	adrp	x0, 401000 <parse_argv+0xa8>
  401080:	add	x1, x0, #0x4b8
  401084:	mov	w0, #0x0                   	// #0
  401088:	bl	400b80 <log_assert_failed_unreachable_realm@plt>
  40108c:	mov	x4, #0x0                   	// #0
  401090:	adrp	x0, 401000 <parse_argv+0xa8>
  401094:	add	x3, x0, #0x548
  401098:	adrp	x0, 401000 <parse_argv+0xa8>
  40109c:	add	x2, x0, #0x4d0
  4010a0:	ldr	x1, [sp, #16]
  4010a4:	ldr	w0, [sp, #28]
  4010a8:	bl	400b70 <getopt_long@plt>
  4010ac:	str	w0, [sp, #32]
  4010b0:	ldr	w0, [sp, #32]
  4010b4:	cmp	w0, #0x0
  4010b8:	b.ge	400fec <parse_argv+0x94>  // b.tcont
  4010bc:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  4010c0:	add	x0, x0, #0x10
  4010c4:	ldr	w0, [x0]
  4010c8:	ldr	w1, [sp, #28]
  4010cc:	cmp	w1, w0
  4010d0:	b.le	401170 <parse_argv+0x218>
  4010d4:	mov	w0, #0x3                   	// #3
  4010d8:	str	w0, [sp, #36]
  4010dc:	mov	w0, #0x16                  	// #22
  4010e0:	movk	w0, #0x4000, lsl #16
  4010e4:	str	w0, [sp, #40]
  4010e8:	str	wzr, [sp, #44]
  4010ec:	ldr	w0, [sp, #44]
  4010f0:	bl	400c30 <log_get_max_level_realm@plt>
  4010f4:	mov	w1, w0
  4010f8:	ldr	w0, [sp, #36]
  4010fc:	and	w0, w0, #0x7
  401100:	cmp	w1, w0
  401104:	b.lt	401158 <parse_argv+0x200>  // b.tstop
  401108:	ldr	w0, [sp, #44]
  40110c:	lsl	w1, w0, #10
  401110:	ldr	w0, [sp, #36]
  401114:	orr	w7, w1, w0
  401118:	adrp	x0, 401000 <parse_argv+0xa8>
  40111c:	add	x1, x0, #0x483
  401120:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  401124:	add	x0, x0, #0x8
  401128:	ldr	x0, [x0]
  40112c:	mov	x6, x0
  401130:	adrp	x0, 401000 <parse_argv+0xa8>
  401134:	add	x5, x0, #0x4d8
  401138:	adrp	x0, 401000 <parse_argv+0xa8>
  40113c:	add	x4, x0, #0x5c8
  401140:	mov	w3, #0x3c                  	// #60
  401144:	mov	x2, x1
  401148:	ldr	w1, [sp, #40]
  40114c:	mov	w0, w7
  401150:	bl	400bd0 <log_internal_realm@plt>
  401154:	b	401174 <parse_argv+0x21c>
  401158:	ldr	w0, [sp, #40]
  40115c:	cmp	w0, #0x0
  401160:	cneg	w0, w0, lt  // lt = tstop
  401164:	and	w0, w0, #0xff
  401168:	neg	w0, w0
  40116c:	b	401174 <parse_argv+0x21c>
  401170:	mov	w0, #0x1                   	// #1
  401174:	ldp	x29, x30, [sp], #48
  401178:	ret

000000000040117c <run>:
  40117c:	stp	x29, x30, [sp, #-48]!
  401180:	mov	x29, sp
  401184:	str	w0, [sp, #28]
  401188:	str	x1, [sp, #16]
  40118c:	mov	w0, #0x0                   	// #0
  401190:	bl	400b50 <log_parse_environment_realm@plt>
  401194:	bl	400c20 <log_open@plt>
  401198:	ldr	x1, [sp, #16]
  40119c:	ldr	w0, [sp, #28]
  4011a0:	bl	400f58 <parse_argv>
  4011a4:	str	w0, [sp, #32]
  4011a8:	ldr	w0, [sp, #32]
  4011ac:	cmp	w0, #0x0
  4011b0:	b.gt	4011bc <run+0x40>
  4011b4:	ldr	w0, [sp, #32]
  4011b8:	b	401294 <run+0x118>
  4011bc:	bl	400be0 <on_ac_power@plt>
  4011c0:	str	w0, [sp, #32]
  4011c4:	ldr	w0, [sp, #32]
  4011c8:	cmp	w0, #0x0
  4011cc:	b.ge	401258 <run+0xdc>  // b.tcont
  4011d0:	mov	w0, #0x3                   	// #3
  4011d4:	str	w0, [sp, #36]
  4011d8:	ldr	w0, [sp, #32]
  4011dc:	str	w0, [sp, #40]
  4011e0:	str	wzr, [sp, #44]
  4011e4:	ldr	w0, [sp, #44]
  4011e8:	bl	400c30 <log_get_max_level_realm@plt>
  4011ec:	mov	w1, w0
  4011f0:	ldr	w0, [sp, #36]
  4011f4:	and	w0, w0, #0x7
  4011f8:	cmp	w1, w0
  4011fc:	b.lt	401240 <run+0xc4>  // b.tstop
  401200:	ldr	w0, [sp, #44]
  401204:	lsl	w1, w0, #10
  401208:	ldr	w0, [sp, #36]
  40120c:	orr	w6, w1, w0
  401210:	adrp	x0, 401000 <parse_argv+0xa8>
  401214:	add	x1, x0, #0x483
  401218:	adrp	x0, 401000 <parse_argv+0xa8>
  40121c:	add	x5, x0, #0x4f0
  401220:	adrp	x0, 401000 <parse_argv+0xa8>
  401224:	add	x4, x0, #0x5d8
  401228:	mov	w3, #0x52                  	// #82
  40122c:	mov	x2, x1
  401230:	ldr	w1, [sp, #40]
  401234:	mov	w0, w6
  401238:	bl	400bd0 <log_internal_realm@plt>
  40123c:	b	401294 <run+0x118>
  401240:	ldr	w0, [sp, #40]
  401244:	cmp	w0, #0x0
  401248:	cneg	w0, w0, lt  // lt = tstop
  40124c:	and	w0, w0, #0xff
  401250:	neg	w0, w0
  401254:	b	401294 <run+0x118>
  401258:	adrp	x0, 412000 <saved_argv@@SD_SHARED>
  40125c:	add	x0, x0, #0x19
  401260:	ldrb	w0, [x0]
  401264:	cmp	w0, #0x0
  401268:	b.eq	401284 <run+0x108>  // b.none
  40126c:	ldr	w0, [sp, #32]
  401270:	cmp	w0, #0x0
  401274:	cset	w0, ne  // ne = any
  401278:	and	w0, w0, #0xff
  40127c:	bl	400e70 <yes_no>
  401280:	bl	400bf0 <puts@plt>
  401284:	ldr	w0, [sp, #32]
  401288:	cmp	w0, #0x0
  40128c:	cset	w0, eq  // eq = none
  401290:	and	w0, w0, #0xff
  401294:	ldp	x29, x30, [sp], #48
  401298:	ret

000000000040129c <main>:
  40129c:	stp	x29, x30, [sp, #-48]!
  4012a0:	mov	x29, sp
  4012a4:	str	w0, [sp, #28]
  4012a8:	str	x1, [sp, #16]
  4012ac:	ldr	x1, [sp, #16]
  4012b0:	ldr	w0, [sp, #28]
  4012b4:	bl	400e38 <save_argc_argv>
  4012b8:	ldr	x1, [sp, #16]
  4012bc:	ldr	w0, [sp, #28]
  4012c0:	bl	40117c <run>
  4012c4:	str	w0, [sp, #44]
  4012c8:	bl	400ba0 <ask_password_agent_close@plt>
  4012cc:	bl	400b40 <polkit_agent_close@plt>
  4012d0:	bl	400bc0 <pager_close@plt>
  4012d4:	bl	400c00 <mac_selinux_finish@plt>
  4012d8:	bl	400ea0 <static_destruct>
  4012dc:	ldr	w0, [sp, #44]
  4012e0:	cmp	w0, #0x0
  4012e4:	b.lt	4012f0 <main+0x54>  // b.tstop
  4012e8:	ldr	w0, [sp, #44]
  4012ec:	b	4012f4 <main+0x58>
  4012f0:	mov	w0, #0x1                   	// #1
  4012f4:	ldp	x29, x30, [sp], #48
  4012f8:	ret
  4012fc:	nop

0000000000401300 <__libc_csu_init>:
  401300:	stp	x29, x30, [sp, #-64]!
  401304:	mov	x29, sp
  401308:	stp	x19, x20, [sp, #16]
  40130c:	adrp	x20, 411000 <__FRAME_END__+0xf7e0>
  401310:	add	x20, x20, #0xd20
  401314:	stp	x21, x22, [sp, #32]
  401318:	adrp	x21, 411000 <__FRAME_END__+0xf7e0>
  40131c:	add	x21, x21, #0xd18
  401320:	sub	x20, x20, x21
  401324:	mov	w22, w0
  401328:	stp	x23, x24, [sp, #48]
  40132c:	mov	x23, x1
  401330:	mov	x24, x2
  401334:	bl	400ae8 <_init>
  401338:	cmp	xzr, x20, asr #3
  40133c:	b.eq	401368 <__libc_csu_init+0x68>  // b.none
  401340:	asr	x20, x20, #3
  401344:	mov	x19, #0x0                   	// #0
  401348:	ldr	x3, [x21, x19, lsl #3]
  40134c:	mov	x2, x24
  401350:	add	x19, x19, #0x1
  401354:	mov	x1, x23
  401358:	mov	w0, w22
  40135c:	blr	x3
  401360:	cmp	x20, x19
  401364:	b.ne	401348 <__libc_csu_init+0x48>  // b.any
  401368:	ldp	x19, x20, [sp, #16]
  40136c:	ldp	x21, x22, [sp, #32]
  401370:	ldp	x23, x24, [sp, #48]
  401374:	ldp	x29, x30, [sp], #64
  401378:	ret
  40137c:	nop

0000000000401380 <__libc_csu_fini>:
  401380:	ret

Disassembly of section .fini:

0000000000401384 <_fini>:
  401384:	stp	x29, x30, [sp, #-16]!
  401388:	mov	x29, sp
  40138c:	ldp	x29, x30, [sp], #16
  401390:	ret
