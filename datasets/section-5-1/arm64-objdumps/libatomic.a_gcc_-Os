In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libatomic.a_gcc_-Os:

gload.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_load>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x0, #0x10
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x0
  14:	mov	x19, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	b.hi	134 <__atomic_load+0x134>  // b.pmore
  24:	cmp	w0, #0x10
  28:	b.hi	134 <__atomic_load+0x134>  // b.pmore
  2c:	adrp	x0, 0 <__atomic_load>
  30:	mov	w1, w3
  34:	add	x0, x0, #0x0
  38:	ldrb	w0, [x0, w20, uxtw]
  3c:	adr	x2, 48 <__atomic_load+0x48>
  40:	add	x0, x2, w0, sxtb #2
  44:	br	x0
  48:	mov	x0, x19
  4c:	bl	0 <__atomic_load_1>
  50:	strb	w0, [x21]
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	tbnz	w19, #0, c0 <__atomic_load+0xc0>
  68:	mov	x0, x19
  6c:	bl	0 <__atomic_load_2>
  70:	strh	w0, [x21]
  74:	b	54 <__atomic_load+0x54>
  78:	tst	x19, #0x3
  7c:	b.ne	f4 <__atomic_load+0xf4>  // b.any
  80:	mov	x0, x19
  84:	bl	0 <__atomic_load_4>
  88:	str	w0, [x21]
  8c:	b	54 <__atomic_load+0x54>
  90:	tst	x19, #0x7
  94:	b.ne	114 <__atomic_load+0x114>  // b.any
  98:	mov	x0, x19
  9c:	bl	0 <__atomic_load_8>
  a0:	str	x0, [x21]
  a4:	b	54 <__atomic_load+0x54>
  a8:	tst	x19, #0xf
  ac:	b.ne	134 <__atomic_load+0x134>  // b.any
  b0:	mov	x0, x19
  b4:	bl	0 <__atomic_load_16>
  b8:	stp	x0, x1, [x21]
  bc:	b	54 <__atomic_load+0x54>
  c0:	and	x22, x19, #0x3
  c4:	add	x0, x20, x22
  c8:	cmp	x0, #0x4
  cc:	b.hi	f4 <__atomic_load+0xf4>  // b.pmore
  d0:	and	x0, x19, #0xfffffffffffffffc
  d4:	bl	0 <__atomic_load_4>
  d8:	str	w0, [sp, #48]
  dc:	add	x0, sp, #0x30
  e0:	mov	x2, x20
  e4:	add	x1, x0, x22
  e8:	mov	x0, x21
  ec:	bl	0 <memcpy>
  f0:	b	54 <__atomic_load+0x54>
  f4:	and	x22, x19, #0x7
  f8:	add	x0, x20, x22
  fc:	cmp	x0, #0x8
 100:	b.hi	114 <__atomic_load+0x114>  // b.pmore
 104:	and	x0, x19, #0xfffffffffffffff8
 108:	bl	0 <__atomic_load_8>
 10c:	str	x0, [sp, #48]
 110:	b	dc <__atomic_load+0xdc>
 114:	and	x22, x19, #0xf
 118:	add	x0, x20, x22
 11c:	cmp	x0, #0x10
 120:	b.hi	134 <__atomic_load+0x134>  // b.pmore
 124:	and	x0, x19, #0xfffffffffffffff0
 128:	bl	0 <__atomic_load_16>
 12c:	stp	x0, x1, [sp, #48]
 130:	b	dc <__atomic_load+0xdc>
 134:	mov	x1, x20
 138:	mov	x0, x19
 13c:	bl	0 <libat_lock_n>
 140:	mov	x2, x20
 144:	mov	x1, x19
 148:	mov	x0, x21
 14c:	bl	0 <memcpy>
 150:	mov	x1, x20
 154:	mov	x0, x19
 158:	ldp	x19, x20, [sp, #16]
 15c:	ldp	x21, x22, [sp, #32]
 160:	ldp	x29, x30, [sp], #64
 164:	b	0 <libat_unlock_n>

gstore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_store>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	cmp	x0, #0x10
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x0
  14:	mov	x19, x1
  18:	str	x21, [sp, #32]
  1c:	mov	x21, x2
  20:	b.hi	1a4 <__atomic_store+0x1a4>  // b.pmore
  24:	cmp	w0, #0x10
  28:	b.hi	1a4 <__atomic_store+0x1a4>  // b.pmore
  2c:	adrp	x0, 0 <__atomic_store>
  30:	mov	w2, w3
  34:	add	x0, x0, #0x0
  38:	ldrb	w0, [x0, w20, uxtw]
  3c:	adr	x1, 48 <__atomic_store+0x48>
  40:	add	x0, x1, w0, sxtb #2
  44:	br	x0
  48:	ldrb	w1, [x21]
  4c:	mov	x0, x19
  50:	bl	0 <__atomic_store_1>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldr	x21, [sp, #32]
  5c:	ldp	x29, x30, [sp], #80
  60:	ret
  64:	tbnz	w19, #0, c4 <__atomic_store+0xc4>
  68:	ldrh	w1, [x21]
  6c:	mov	x0, x19
  70:	bl	0 <__atomic_store_2>
  74:	b	54 <__atomic_store+0x54>
  78:	tst	x19, #0x3
  7c:	b.ne	130 <__atomic_store+0x130>  // b.any
  80:	ldr	w1, [x21]
  84:	mov	x0, x19
  88:	bl	0 <__atomic_store_4>
  8c:	b	54 <__atomic_store+0x54>
  90:	tst	x19, #0x7
  94:	b.ne	1a4 <__atomic_store+0x1a4>  // b.any
  98:	ldr	x1, [x21]
  9c:	mov	x0, x19
  a0:	bl	0 <__atomic_store_8>
  a4:	b	54 <__atomic_store+0x54>
  a8:	tst	x19, #0xf
  ac:	b.ne	1a4 <__atomic_store+0x1a4>  // b.any
  b0:	mov	w4, w3
  b4:	mov	x0, x19
  b8:	ldp	x2, x3, [x21]
  bc:	bl	0 <__atomic_store_16>
  c0:	b	54 <__atomic_store+0x54>
  c4:	and	x3, x19, #0x3
  c8:	add	x0, x20, x3
  cc:	cmp	x0, #0x4
  d0:	b.hi	130 <__atomic_store+0x130>  // b.pmore
  d4:	dmb	ish
  d8:	and	x19, x19, #0xfffffffffffffffc
  dc:	ldr	w0, [x19]
  e0:	str	w0, [sp, #48]
  e4:	add	x0, sp, #0x40
  e8:	add	x3, x0, x3
  ec:	ldp	x0, x1, [sp, #48]
  f0:	mov	x2, x20
  f4:	stp	x0, x1, [sp, #64]
  f8:	mov	x1, x21
  fc:	mov	x0, x3
 100:	bl	0 <memcpy>
 104:	ldr	w1, [sp, #48]
 108:	mov	x3, x0
 10c:	ldr	w2, [sp, #64]
 110:	ldxr	w0, [x19]
 114:	cmp	w0, w1
 118:	b.ne	124 <__atomic_store+0x124>  // b.any
 11c:	stxr	w4, w2, [x19]
 120:	cmp	w4, #0x0
 124:	b.eq	19c <__atomic_store+0x19c>  // b.none
 128:	str	w0, [sp, #48]
 12c:	b	ec <__atomic_store+0xec>
 130:	and	x3, x19, #0x7
 134:	add	x0, x20, x3
 138:	cmp	x0, #0x8
 13c:	b.hi	1a4 <__atomic_store+0x1a4>  // b.pmore
 140:	dmb	ish
 144:	and	x19, x19, #0xfffffffffffffff8
 148:	ldr	x0, [x19]
 14c:	str	x0, [sp, #48]
 150:	add	x0, sp, #0x40
 154:	add	x3, x0, x3
 158:	ldp	x0, x1, [sp, #48]
 15c:	mov	x2, x20
 160:	stp	x0, x1, [sp, #64]
 164:	mov	x1, x21
 168:	mov	x0, x3
 16c:	bl	0 <memcpy>
 170:	mov	x3, x0
 174:	ldr	x1, [sp, #48]
 178:	ldr	x2, [sp, #64]
 17c:	ldxr	x0, [x19]
 180:	cmp	x0, x1
 184:	b.ne	190 <__atomic_store+0x190>  // b.any
 188:	stxr	w4, x2, [x19]
 18c:	cmp	w4, #0x0
 190:	b.eq	19c <__atomic_store+0x19c>  // b.none
 194:	str	x0, [sp, #48]
 198:	b	158 <__atomic_store+0x158>
 19c:	dmb	ish
 1a0:	b	54 <__atomic_store+0x54>
 1a4:	mov	x1, x20
 1a8:	mov	x0, x19
 1ac:	bl	0 <libat_lock_n>
 1b0:	mov	x2, x20
 1b4:	mov	x1, x21
 1b8:	mov	x0, x19
 1bc:	bl	0 <memcpy>
 1c0:	mov	x1, x20
 1c4:	mov	x0, x19
 1c8:	bl	0 <libat_unlock_n>
 1cc:	b	54 <__atomic_store+0x54>

gcas.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_compare_exchange>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	cmp	x0, #0x10
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x1
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x0
  1c:	mov	x22, x2
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x3
  28:	str	x25, [sp, #64]
  2c:	b.hi	22c <__atomic_compare_exchange+0x22c>  // b.pmore
  30:	cmp	w0, #0x10
  34:	b.hi	22c <__atomic_compare_exchange+0x22c>  // b.pmore
  38:	mov	w3, w4
  3c:	adrp	x0, 0 <__atomic_compare_exchange>
  40:	mov	w4, w5
  44:	add	x0, x0, #0x0
  48:	ldrb	w0, [x0, w21, uxtw]
  4c:	adr	x1, 58 <__atomic_compare_exchange+0x58>
  50:	add	x0, x1, w0, sxtb #2
  54:	br	x0
  58:	ldrb	w2, [x23]
  5c:	mov	x1, x22
  60:	mov	x0, x19
  64:	bl	0 <__atomic_compare_exchange_1>
  68:	and	w20, w0, #0xff
  6c:	mov	w0, w20
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x23, x24, [sp, #48]
  7c:	ldr	x25, [sp, #64]
  80:	ldp	x29, x30, [sp], #112
  84:	ret
  88:	tbnz	w19, #0, f8 <__atomic_compare_exchange+0xf8>
  8c:	ldrh	w2, [x23]
  90:	mov	x1, x22
  94:	mov	x0, x19
  98:	bl	0 <__atomic_compare_exchange_2>
  9c:	b	68 <__atomic_compare_exchange+0x68>
  a0:	tst	x19, #0x3
  a4:	b.ne	17c <__atomic_compare_exchange+0x17c>  // b.any
  a8:	mov	x1, x2
  ac:	ldr	w2, [x23]
  b0:	mov	x0, x19
  b4:	bl	0 <__atomic_compare_exchange_4>
  b8:	b	68 <__atomic_compare_exchange+0x68>
  bc:	tst	x19, #0x7
  c0:	b.ne	22c <__atomic_compare_exchange+0x22c>  // b.any
  c4:	mov	x1, x2
  c8:	mov	x0, x19
  cc:	ldr	x2, [x23]
  d0:	bl	0 <__atomic_compare_exchange_8>
  d4:	b	68 <__atomic_compare_exchange+0x68>
  d8:	tst	x19, #0xf
  dc:	b.ne	22c <__atomic_compare_exchange+0x22c>  // b.any
  e0:	mov	w4, w3
  e4:	mov	x1, x22
  e8:	ldp	x2, x3, [x23]
  ec:	mov	x0, x19
  f0:	bl	0 <__atomic_compare_exchange_16>
  f4:	b	68 <__atomic_compare_exchange+0x68>
  f8:	and	x20, x19, #0x3
  fc:	add	x0, x21, x20
 100:	cmp	x0, #0x4
 104:	b.hi	17c <__atomic_compare_exchange+0x17c>  // b.pmore
 108:	dmb	ish
 10c:	and	x19, x19, #0xfffffffffffffffc
 110:	ldr	w0, [x19]
 114:	str	w0, [sp, #80]
 118:	add	x0, sp, #0x50
 11c:	add	x25, x0, x20
 120:	add	x0, sp, #0x60
 124:	add	x24, x0, x20
 128:	mov	x2, x21
 12c:	mov	x1, x22
 130:	mov	x0, x25
 134:	bl	0 <memcmp>
 138:	cbnz	w0, 20c <__atomic_compare_exchange+0x20c>
 13c:	ldp	x0, x1, [sp, #80]
 140:	mov	x2, x21
 144:	stp	x0, x1, [sp, #96]
 148:	mov	x1, x23
 14c:	mov	x0, x24
 150:	bl	0 <memcpy>
 154:	ldr	w1, [sp, #80]
 158:	ldr	w2, [sp, #96]
 15c:	ldxr	w0, [x19]
 160:	cmp	w0, w1
 164:	b.ne	170 <__atomic_compare_exchange+0x170>  // b.any
 168:	stxr	w3, w2, [x19]
 16c:	cmp	w3, #0x0
 170:	b.eq	200 <__atomic_compare_exchange+0x200>  // b.none
 174:	str	w0, [sp, #80]
 178:	b	128 <__atomic_compare_exchange+0x128>
 17c:	and	x20, x19, #0x7
 180:	add	x0, x21, x20
 184:	cmp	x0, #0x8
 188:	b.hi	22c <__atomic_compare_exchange+0x22c>  // b.pmore
 18c:	dmb	ish
 190:	and	x19, x19, #0xfffffffffffffff8
 194:	ldr	x0, [x19]
 198:	str	x0, [sp, #80]
 19c:	add	x0, sp, #0x50
 1a0:	add	x25, x0, x20
 1a4:	add	x0, sp, #0x60
 1a8:	add	x24, x0, x20
 1ac:	mov	x2, x21
 1b0:	mov	x1, x22
 1b4:	mov	x0, x25
 1b8:	bl	0 <memcmp>
 1bc:	cbnz	w0, 20c <__atomic_compare_exchange+0x20c>
 1c0:	ldp	x0, x1, [sp, #80]
 1c4:	mov	x2, x21
 1c8:	stp	x0, x1, [sp, #96]
 1cc:	mov	x1, x23
 1d0:	mov	x0, x24
 1d4:	bl	0 <memcpy>
 1d8:	ldr	x1, [sp, #80]
 1dc:	ldr	x2, [sp, #96]
 1e0:	ldxr	x0, [x19]
 1e4:	cmp	x0, x1
 1e8:	b.ne	1f4 <__atomic_compare_exchange+0x1f4>  // b.any
 1ec:	stxr	w3, x2, [x19]
 1f0:	cmp	w3, #0x0
 1f4:	b.eq	200 <__atomic_compare_exchange+0x200>  // b.none
 1f8:	str	x0, [sp, #80]
 1fc:	b	1ac <__atomic_compare_exchange+0x1ac>
 200:	dmb	ish
 204:	mov	w20, #0x1                   	// #1
 208:	b	6c <__atomic_compare_exchange+0x6c>
 20c:	dmb	ish
 210:	add	x0, sp, #0x50
 214:	mov	x2, x21
 218:	add	x1, x0, x20
 21c:	mov	x0, x22
 220:	mov	w20, #0x0                   	// #0
 224:	bl	0 <memcpy>
 228:	b	6c <__atomic_compare_exchange+0x6c>
 22c:	mov	x1, x21
 230:	mov	x0, x19
 234:	bl	0 <libat_lock_n>
 238:	mov	x2, x21
 23c:	mov	x1, x22
 240:	mov	x0, x19
 244:	bl	0 <memcmp>
 248:	cmp	w0, #0x0
 24c:	mov	x2, x21
 250:	csel	x22, x22, x19, ne  // ne = any
 254:	csel	x1, x19, x23, ne  // ne = any
 258:	cset	w20, eq  // eq = none
 25c:	mov	x0, x22
 260:	bl	0 <memcpy>
 264:	mov	x1, x21
 268:	mov	x0, x19
 26c:	bl	0 <libat_unlock_n>
 270:	b	6c <__atomic_compare_exchange+0x6c>

gexch.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_large_inplace>:
   0:	sub	sp, sp, #0x450
   4:	stp	x29, x30, [sp]
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x20, x1
  14:	mov	x19, x2
  18:	stp	x23, x24, [sp, #48]
  1c:	mov	x23, x0
  20:	str	x25, [sp, #64]
  24:	and	x25, x0, #0xfffffffffffffc00
  28:	stp	x21, x22, [sp, #32]
  2c:	mov	x21, #0x0                   	// #0
  30:	cmp	x21, x25
  34:	b.ne	9c <libat_exchange_large_inplace+0x9c>  // b.any
  38:	lsr	x22, x23, #10
  3c:	mov	x2, #0xfffffffffffffc00    	// #-1024
  40:	madd	x22, x22, x2, x23
  44:	cbz	x22, 80 <libat_exchange_large_inplace+0x80>
  48:	add	x20, x20, x21
  4c:	mov	x2, x22
  50:	mov	x1, x20
  54:	add	x19, x19, x21
  58:	add	x0, sp, #0x50
  5c:	bl	0 <memcpy>
  60:	mov	x2, x22
  64:	mov	x1, x19
  68:	mov	x0, x20
  6c:	bl	0 <memcpy>
  70:	mov	x2, x22
  74:	add	x1, sp, #0x50
  78:	mov	x0, x19
  7c:	bl	0 <memcpy>
  80:	ldp	x29, x30, [sp]
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x21, x22, [sp, #32]
  8c:	ldp	x23, x24, [sp, #48]
  90:	ldr	x25, [sp, #64]
  94:	add	sp, sp, #0x450
  98:	ret
  9c:	add	x24, x20, x21
  a0:	add	x22, x19, x21
  a4:	mov	x1, x24
  a8:	mov	x2, #0x400                 	// #1024
  ac:	add	x0, sp, #0x50
  b0:	bl	0 <memcpy>
  b4:	mov	x1, x22
  b8:	mov	x2, #0x400                 	// #1024
  bc:	mov	x0, x24
  c0:	bl	0 <memcpy>
  c4:	add	x1, sp, #0x50
  c8:	mov	x0, x22
  cc:	mov	x2, #0x400                 	// #1024
  d0:	add	x21, x21, #0x400
  d4:	bl	0 <memcpy>
  d8:	b	30 <libat_exchange_large_inplace+0x30>

00000000000000dc <__atomic_exchange>:
  dc:	stp	x29, x30, [sp, #-96]!
  e0:	cmp	x0, #0x10
  e4:	mov	x29, sp
  e8:	stp	x19, x20, [sp, #16]
  ec:	mov	x20, x0
  f0:	mov	x19, x1
  f4:	stp	x21, x22, [sp, #32]
  f8:	mov	x21, x2
  fc:	mov	x22, x3
 100:	str	x23, [sp, #48]
 104:	b.hi	2b0 <__atomic_exchange+0x1d4>  // b.pmore
 108:	cmp	w0, #0x10
 10c:	b.hi	2b0 <__atomic_exchange+0x1d4>  // b.pmore
 110:	adrp	x0, 0 <libat_exchange_large_inplace>
 114:	mov	w2, w4
 118:	add	x0, x0, #0x0
 11c:	ldrb	w0, [x0, w20, uxtw]
 120:	adr	x1, 12c <__atomic_exchange+0x50>
 124:	add	x0, x1, w0, sxtb #2
 128:	br	x0
 12c:	ldrb	w1, [x21]
 130:	mov	x0, x19
 134:	bl	0 <__atomic_exchange_1>
 138:	strb	w0, [x22]
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldp	x21, x22, [sp, #32]
 144:	ldr	x23, [sp, #48]
 148:	ldp	x29, x30, [sp], #96
 14c:	ret
 150:	tbnz	w19, #0, 1bc <__atomic_exchange+0xe0>
 154:	ldrh	w1, [x21]
 158:	mov	x0, x19
 15c:	bl	0 <__atomic_exchange_2>
 160:	strh	w0, [x22]
 164:	b	13c <__atomic_exchange+0x60>
 168:	tst	x19, #0x3
 16c:	b.ne	228 <__atomic_exchange+0x14c>  // b.any
 170:	ldr	w1, [x21]
 174:	mov	x0, x19
 178:	bl	0 <__atomic_exchange_4>
 17c:	str	w0, [x22]
 180:	b	13c <__atomic_exchange+0x60>
 184:	tst	x19, #0x7
 188:	b.ne	2b0 <__atomic_exchange+0x1d4>  // b.any
 18c:	ldr	x1, [x21]
 190:	mov	x0, x19
 194:	bl	0 <__atomic_exchange_8>
 198:	str	x0, [x22]
 19c:	b	13c <__atomic_exchange+0x60>
 1a0:	tst	x19, #0xf
 1a4:	b.ne	2b0 <__atomic_exchange+0x1d4>  // b.any
 1a8:	ldp	x2, x3, [x21]
 1ac:	mov	x0, x19
 1b0:	bl	0 <__atomic_exchange_16>
 1b4:	stp	x0, x1, [x22]
 1b8:	b	13c <__atomic_exchange+0x60>
 1bc:	and	x23, x19, #0x3
 1c0:	add	x0, x20, x23
 1c4:	cmp	x0, #0x4
 1c8:	b.hi	228 <__atomic_exchange+0x14c>  // b.pmore
 1cc:	dmb	ish
 1d0:	and	x19, x19, #0xfffffffffffffffc
 1d4:	ldr	w0, [x19]
 1d8:	str	w0, [sp, #64]
 1dc:	add	x0, sp, #0x50
 1e0:	add	x3, x0, x23
 1e4:	ldp	x0, x1, [sp, #64]
 1e8:	mov	x2, x20
 1ec:	stp	x0, x1, [sp, #80]
 1f0:	mov	x1, x21
 1f4:	mov	x0, x3
 1f8:	bl	0 <memcpy>
 1fc:	ldr	w1, [sp, #64]
 200:	mov	x3, x0
 204:	ldr	w2, [sp, #80]
 208:	ldxr	w0, [x19]
 20c:	cmp	w0, w1
 210:	b.ne	21c <__atomic_exchange+0x140>  // b.any
 214:	stxr	w4, w2, [x19]
 218:	cmp	w4, #0x0
 21c:	b.eq	294 <__atomic_exchange+0x1b8>  // b.none
 220:	str	w0, [sp, #64]
 224:	b	1e4 <__atomic_exchange+0x108>
 228:	and	x23, x19, #0x7
 22c:	add	x0, x20, x23
 230:	cmp	x0, #0x8
 234:	b.hi	2b0 <__atomic_exchange+0x1d4>  // b.pmore
 238:	dmb	ish
 23c:	and	x19, x19, #0xfffffffffffffff8
 240:	ldr	x0, [x19]
 244:	str	x0, [sp, #64]
 248:	add	x0, sp, #0x50
 24c:	add	x3, x0, x23
 250:	ldp	x0, x1, [sp, #64]
 254:	mov	x2, x20
 258:	stp	x0, x1, [sp, #80]
 25c:	mov	x1, x21
 260:	mov	x0, x3
 264:	bl	0 <memcpy>
 268:	mov	x3, x0
 26c:	ldr	x1, [sp, #64]
 270:	ldr	x2, [sp, #80]
 274:	ldxr	x0, [x19]
 278:	cmp	x0, x1
 27c:	b.ne	288 <__atomic_exchange+0x1ac>  // b.any
 280:	stxr	w4, x2, [x19]
 284:	cmp	w4, #0x0
 288:	b.eq	294 <__atomic_exchange+0x1b8>  // b.none
 28c:	str	x0, [sp, #64]
 290:	b	250 <__atomic_exchange+0x174>
 294:	dmb	ish
 298:	add	x0, sp, #0x40
 29c:	mov	x2, x20
 2a0:	add	x1, x0, x23
 2a4:	mov	x0, x22
 2a8:	bl	0 <memcpy>
 2ac:	b	13c <__atomic_exchange+0x60>
 2b0:	mov	x1, x20
 2b4:	mov	x0, x19
 2b8:	bl	0 <libat_lock_n>
 2bc:	cmp	x21, x22
 2c0:	b.eq	2f4 <__atomic_exchange+0x218>  // b.none
 2c4:	mov	x2, x20
 2c8:	mov	x1, x19
 2cc:	mov	x0, x22
 2d0:	bl	0 <memcpy>
 2d4:	mov	x2, x20
 2d8:	mov	x1, x21
 2dc:	mov	x0, x19
 2e0:	bl	0 <memcpy>
 2e4:	mov	x1, x20
 2e8:	mov	x0, x19
 2ec:	bl	0 <libat_unlock_n>
 2f0:	b	13c <__atomic_exchange+0x60>
 2f4:	mov	x2, x21
 2f8:	mov	x1, x19
 2fc:	mov	x0, x20
 300:	bl	0 <libat_exchange_large_inplace>
 304:	b	2e4 <__atomic_exchange+0x208>

glfree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_is_lock_free>:
   0:	cmp	x0, #0x8
   4:	b.hi	28 <__atomic_is_lock_free+0x28>  // b.pmore
   8:	cmp	w0, #0x8
   c:	b.hi	28 <__atomic_is_lock_free+0x28>  // b.pmore
  10:	adrp	x2, 0 <__atomic_is_lock_free>
  14:	add	x2, x2, #0x0
  18:	ldrb	w2, [x2, w0, uxtw]
  1c:	adr	x3, 28 <__atomic_is_lock_free+0x28>
  20:	add	x2, x3, w2, sxtb #2
  24:	br	x2
  28:	mov	w0, #0x0                   	// #0
  2c:	ret
  30:	tbnz	w1, #0, 64 <__atomic_is_lock_free+0x64>
  34:	mov	w0, #0x1                   	// #1
  38:	b	2c <__atomic_is_lock_free+0x2c>
  3c:	tst	x1, #0x3
  40:	b.eq	34 <__atomic_is_lock_free+0x34>  // b.none
  44:	and	x1, x1, #0x7
  48:	add	x1, x1, x0
  4c:	cmp	x1, #0x8
  50:	cset	w0, ls  // ls = plast
  54:	b	2c <__atomic_is_lock_free+0x2c>
  58:	tst	x1, #0x7
  5c:	cset	w0, eq  // eq = none
  60:	b	2c <__atomic_is_lock_free+0x2c>
  64:	and	x2, x1, #0x3
  68:	add	x2, x2, x0
  6c:	cmp	x2, #0x4
  70:	b.hi	44 <__atomic_is_lock_free+0x44>  // b.pmore
  74:	b	34 <__atomic_is_lock_free+0x34>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_lock_1>:
   0:	and	x0, x0, #0xfc0
   4:	adrp	x1, 0 <libat_lock_1>
   8:	add	x1, x1, #0x0
   c:	add	x0, x1, x0
  10:	b	0 <pthread_mutex_lock>

0000000000000014 <libat_unlock_1>:
  14:	and	x0, x0, #0xfc0
  18:	adrp	x1, 0 <libat_lock_1>
  1c:	add	x1, x1, #0x0
  20:	add	x0, x1, x0
  24:	b	0 <pthread_mutex_unlock>

0000000000000028 <libat_lock_n>:
  28:	stp	x29, x30, [sp, #-48]!
  2c:	cmp	x1, #0x1, lsl #12
  30:	mov	x29, sp
  34:	stp	x19, x20, [sp, #16]
  38:	mov	x20, #0x1000                	// #4096
  3c:	ubfx	x19, x0, #6, #6
  40:	csel	x20, x1, x20, ls  // ls = plast
  44:	stp	x21, x22, [sp, #32]
  48:	adrp	x22, 0 <libat_lock_1>
  4c:	add	x22, x22, #0x0
  50:	mov	x21, #0x0                   	// #0
  54:	add	x0, x22, x19, lsl #6
  58:	add	x19, x19, #0x1
  5c:	bl	0 <pthread_mutex_lock>
  60:	add	x21, x21, #0x40
  64:	cmp	x19, #0x40
  68:	csel	x19, x19, xzr, ne  // ne = any
  6c:	cmp	x21, x20
  70:	b.cc	54 <libat_lock_n+0x2c>  // b.lo, b.ul, b.last
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret

0000000000000084 <libat_unlock_n>:
  84:	stp	x29, x30, [sp, #-48]!
  88:	cmp	x1, #0x1, lsl #12
  8c:	mov	x29, sp
  90:	stp	x19, x20, [sp, #16]
  94:	mov	x20, #0x1000                	// #4096
  98:	ubfx	x19, x0, #6, #6
  9c:	csel	x20, x1, x20, ls  // ls = plast
  a0:	stp	x21, x22, [sp, #32]
  a4:	adrp	x22, 0 <libat_lock_1>
  a8:	add	x22, x22, #0x0
  ac:	mov	x21, #0x0                   	// #0
  b0:	add	x0, x22, x19, lsl #6
  b4:	add	x19, x19, #0x1
  b8:	bl	0 <pthread_mutex_unlock>
  bc:	add	x21, x21, #0x40
  c0:	cmp	x19, #0x40
  c4:	csel	x19, x19, xzr, ne  // ne = any
  c8:	cmp	x21, x20
  cc:	b.cc	b0 <libat_unlock_n+0x2c>  // b.lo, b.ul, b.last
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x21, x22, [sp, #32]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret

init.o:     file format elf64-littleaarch64


fenv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_feraiseexcept>:
   0:	sub	sp, sp, #0x20
   4:	tbz	w0, #0, 1c <__atomic_feraiseexcept+0x1c>
   8:	str	wzr, [sp, #12]
   c:	ldr	s0, [sp, #12]
  10:	ldr	s1, [sp, #12]
  14:	fdiv	s0, s0, s1
  18:	str	s0, [sp, #8]
  1c:	tbz	w0, #1, 34 <__atomic_feraiseexcept+0x34>
  20:	str	wzr, [sp, #16]
  24:	fmov	s0, #1.000000000000000000e+00
  28:	ldr	s1, [sp, #16]
  2c:	fdiv	s0, s0, s1
  30:	str	s0, [sp, #8]
  34:	tbz	w0, #2, 50 <__atomic_feraiseexcept+0x50>
  38:	mov	w1, #0x7f7fffff            	// #2139095039
  3c:	str	w1, [sp, #20]
  40:	ldr	s0, [sp, #20]
  44:	ldr	s1, [sp, #20]
  48:	fmul	s0, s0, s1
  4c:	str	s0, [sp, #8]
  50:	tbz	w0, #3, 6c <__atomic_feraiseexcept+0x6c>
  54:	movi	v0.2s, #0x80, lsl #16
  58:	str	s0, [sp, #24]
  5c:	ldr	s0, [sp, #24]
  60:	ldr	s1, [sp, #24]
  64:	fmul	s0, s0, s1
  68:	str	s0, [sp, #8]
  6c:	tbz	w0, #4, 88 <__atomic_feraiseexcept+0x88>
  70:	fmov	s0, #3.000000000000000000e+00
  74:	str	s0, [sp, #28]
  78:	fmov	s0, #1.000000000000000000e+00
  7c:	ldr	s1, [sp, #28]
  80:	fdiv	s0, s0, s1
  84:	str	s0, [sp, #8]
  88:	add	sp, sp, #0x20
  8c:	ret

fence.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_thread_fence>:
   0:	dmb	ish
   4:	ret

0000000000000008 <atomic_signal_fence>:
   8:	ret

flag.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_flag_test_and_set>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <atomic_flag_test_and_set+0x8>
  14:	ret

0000000000000018 <atomic_flag_test_and_set_explicit>:
  18:	mov	x1, x0
  1c:	mov	w2, #0x1                   	// #1
  20:	ldaxrb	w0, [x1]
  24:	stlxrb	w3, w2, [x1]
  28:	cbnz	w3, 20 <atomic_flag_test_and_set_explicit+0x8>
  2c:	ret

0000000000000030 <atomic_flag_clear>:
  30:	stlrb	wzr, [x0]
  34:	ret

0000000000000038 <atomic_flag_clear_explicit>:
  38:	stlrb	wzr, [x0]
  3c:	ret

load_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1>:
   0:	ldarb	w0, [x0]
   4:	ret

0000000000000008 <select_load_1>:
   8:	adrp	x0, 0 <libat_load_1>
   c:	add	x0, x0, #0x0
  10:	ret

store_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1>:
   0:	and	w1, w1, #0xff
   4:	stlrb	w1, [x0]
   8:	ret

000000000000000c <select_store_1>:
   c:	adrp	x0, 0 <libat_store_1>
  10:	add	x0, x0, #0x0
  14:	ret

cas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1>:
   0:	ldrb	w4, [x1]
   4:	and	w2, w2, #0xff
   8:	ldaxrb	w3, [x0]
   c:	cmp	w3, w4, uxtb
  10:	b.ne	1c <libat_compare_exchange_1+0x1c>  // b.any
  14:	stlxrb	w5, w2, [x0]
  18:	cbnz	w5, 8 <libat_compare_exchange_1+0x8>
  1c:	cset	w0, eq  // eq = none
  20:	b.eq	28 <libat_compare_exchange_1+0x28>  // b.none
  24:	strb	w3, [x1]
  28:	ret

000000000000002c <select_compare_exchange_1>:
  2c:	adrp	x0, 0 <libat_compare_exchange_1>
  30:	add	x0, x0, #0x0
  34:	ret

exch_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	stlxrb	w3, w1, [x2]
  10:	cbnz	w3, 8 <libat_exchange_1+0x8>
  14:	ret

0000000000000018 <select_exchange_1>:
  18:	adrp	x0, 0 <libat_exchange_1>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	add	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_add_1+0x8>
  18:	ret

000000000000001c <libat_add_fetch_1>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xff
  24:	ldaxrb	w0, [x2]
  28:	add	w0, w0, w1
  2c:	stlxrb	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_add_fetch_1+0x8>
  34:	ret

0000000000000038 <select_fetch_add_1>:
  38:	adrp	x0, 0 <libat_fetch_add_1>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_add_fetch_1>:
  44:	adrp	x0, 1c <libat_add_fetch_1>
  48:	add	x0, x0, #0x0
  4c:	ret

fsub_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	sub	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_sub_1+0x8>
  18:	ret

000000000000001c <libat_sub_fetch_1>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xff
  24:	ldaxrb	w0, [x2]
  28:	sub	w0, w0, w1
  2c:	stlxrb	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_sub_fetch_1+0x8>
  34:	ret

0000000000000038 <select_fetch_sub_1>:
  38:	adrp	x0, 0 <libat_fetch_sub_1>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_sub_fetch_1>:
  44:	adrp	x0, 1c <libat_sub_fetch_1>
  48:	add	x0, x0, #0x0
  4c:	ret

fand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_and_1+0x8>
  18:	ret

000000000000001c <libat_and_fetch_1>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xff
  24:	ldaxrb	w0, [x2]
  28:	and	w0, w0, w1
  2c:	stlxrb	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_and_fetch_1+0x8>
  34:	ret

0000000000000038 <select_fetch_and_1>:
  38:	adrp	x0, 0 <libat_fetch_and_1>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_and_fetch_1>:
  44:	adrp	x0, 1c <libat_and_fetch_1>
  48:	add	x0, x0, #0x0
  4c:	ret

fior_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	orr	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_or_1+0x8>
  18:	ret

000000000000001c <libat_or_fetch_1>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xff
  24:	ldaxrb	w0, [x2]
  28:	orr	w0, w0, w1
  2c:	stlxrb	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_or_fetch_1+0x8>
  34:	ret

0000000000000038 <select_fetch_or_1>:
  38:	adrp	x0, 0 <libat_fetch_or_1>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_or_fetch_1>:
  44:	adrp	x0, 1c <libat_or_fetch_1>
  48:	add	x0, x0, #0x0
  4c:	ret

fxor_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	eor	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_xor_1+0x8>
  18:	ret

000000000000001c <libat_xor_fetch_1>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xff
  24:	ldaxrb	w0, [x2]
  28:	eor	w0, w0, w1
  2c:	stlxrb	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_xor_fetch_1+0x8>
  34:	ret

0000000000000038 <select_fetch_xor_1>:
  38:	adrp	x0, 0 <libat_fetch_xor_1>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_xor_fetch_1>:
  44:	adrp	x0, 1c <libat_xor_fetch_1>
  48:	add	x0, x0, #0x0
  4c:	ret

fnand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrb	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_1>:
  20:	mov	x2, x0
  24:	and	w1, w1, #0xff
  28:	ldaxrb	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrb	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_1+0x8>
  3c:	ret

0000000000000040 <select_fetch_nand_1>:
  40:	adrp	x0, 0 <libat_fetch_nand_1>
  44:	add	x0, x0, #0x0
  48:	ret

000000000000004c <select_nand_fetch_1>:
  4c:	adrp	x0, 20 <libat_nand_fetch_1>
  50:	add	x0, x0, #0x0
  54:	ret

tas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_1+0x8>
  14:	ret

0000000000000018 <select_test_and_set_1>:
  18:	adrp	x0, 0 <libat_test_and_set_1>
  1c:	add	x0, x0, #0x0
  20:	ret

load_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2>:
   0:	ldarh	w0, [x0]
   4:	ret

0000000000000008 <select_load_2>:
   8:	adrp	x0, 0 <libat_load_2>
   c:	add	x0, x0, #0x0
  10:	ret

store_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2>:
   0:	and	w1, w1, #0xffff
   4:	stlrh	w1, [x0]
   8:	ret

000000000000000c <select_store_2>:
   c:	adrp	x0, 0 <libat_store_2>
  10:	add	x0, x0, #0x0
  14:	ret

cas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2>:
   0:	ldrh	w4, [x1]
   4:	and	w2, w2, #0xffff
   8:	ldaxrh	w3, [x0]
   c:	cmp	w3, w4, uxth
  10:	b.ne	1c <libat_compare_exchange_2+0x1c>  // b.any
  14:	stlxrh	w5, w2, [x0]
  18:	cbnz	w5, 8 <libat_compare_exchange_2+0x8>
  1c:	cset	w0, eq  // eq = none
  20:	b.eq	28 <libat_compare_exchange_2+0x28>  // b.none
  24:	strh	w3, [x1]
  28:	ret

000000000000002c <select_compare_exchange_2>:
  2c:	adrp	x0, 0 <libat_compare_exchange_2>
  30:	add	x0, x0, #0x0
  34:	ret

exch_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	stlxrh	w3, w1, [x2]
  10:	cbnz	w3, 8 <libat_exchange_2+0x8>
  14:	ret

0000000000000018 <select_exchange_2>:
  18:	adrp	x0, 0 <libat_exchange_2>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	add	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_add_2+0x8>
  18:	ret

000000000000001c <libat_add_fetch_2>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xffff
  24:	ldaxrh	w0, [x2]
  28:	add	w0, w0, w1
  2c:	stlxrh	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_add_fetch_2+0x8>
  34:	ret

0000000000000038 <select_fetch_add_2>:
  38:	adrp	x0, 0 <libat_fetch_add_2>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_add_fetch_2>:
  44:	adrp	x0, 1c <libat_add_fetch_2>
  48:	add	x0, x0, #0x0
  4c:	ret

fsub_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	sub	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_sub_2+0x8>
  18:	ret

000000000000001c <libat_sub_fetch_2>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xffff
  24:	ldaxrh	w0, [x2]
  28:	sub	w0, w0, w1
  2c:	stlxrh	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_sub_fetch_2+0x8>
  34:	ret

0000000000000038 <select_fetch_sub_2>:
  38:	adrp	x0, 0 <libat_fetch_sub_2>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_sub_fetch_2>:
  44:	adrp	x0, 1c <libat_sub_fetch_2>
  48:	add	x0, x0, #0x0
  4c:	ret

fand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_and_2+0x8>
  18:	ret

000000000000001c <libat_and_fetch_2>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xffff
  24:	ldaxrh	w0, [x2]
  28:	and	w0, w0, w1
  2c:	stlxrh	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_and_fetch_2+0x8>
  34:	ret

0000000000000038 <select_fetch_and_2>:
  38:	adrp	x0, 0 <libat_fetch_and_2>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_and_fetch_2>:
  44:	adrp	x0, 1c <libat_and_fetch_2>
  48:	add	x0, x0, #0x0
  4c:	ret

fior_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	orr	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_or_2+0x8>
  18:	ret

000000000000001c <libat_or_fetch_2>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xffff
  24:	ldaxrh	w0, [x2]
  28:	orr	w0, w0, w1
  2c:	stlxrh	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_or_fetch_2+0x8>
  34:	ret

0000000000000038 <select_fetch_or_2>:
  38:	adrp	x0, 0 <libat_fetch_or_2>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_or_fetch_2>:
  44:	adrp	x0, 1c <libat_or_fetch_2>
  48:	add	x0, x0, #0x0
  4c:	ret

fxor_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	eor	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_xor_2+0x8>
  18:	ret

000000000000001c <libat_xor_fetch_2>:
  1c:	mov	x2, x0
  20:	and	w1, w1, #0xffff
  24:	ldaxrh	w0, [x2]
  28:	eor	w0, w0, w1
  2c:	stlxrh	w3, w0, [x2]
  30:	cbnz	w3, 24 <libat_xor_fetch_2+0x8>
  34:	ret

0000000000000038 <select_fetch_xor_2>:
  38:	adrp	x0, 0 <libat_fetch_xor_2>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_xor_fetch_2>:
  44:	adrp	x0, 1c <libat_xor_fetch_2>
  48:	add	x0, x0, #0x0
  4c:	ret

fnand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrh	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_2+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_2>:
  20:	mov	x2, x0
  24:	and	w1, w1, #0xffff
  28:	ldaxrh	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrh	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_2+0x8>
  3c:	ret

0000000000000040 <select_fetch_nand_2>:
  40:	adrp	x0, 0 <libat_fetch_nand_2>
  44:	add	x0, x0, #0x0
  48:	ret

000000000000004c <select_nand_fetch_2>:
  4c:	adrp	x0, 20 <libat_nand_fetch_2>
  50:	add	x0, x0, #0x0
  54:	ret

tas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_2+0x8>
  14:	ret

0000000000000018 <select_test_and_set_2>:
  18:	adrp	x0, 0 <libat_test_and_set_2>
  1c:	add	x0, x0, #0x0
  20:	ret

load_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4>:
   0:	ldar	w0, [x0]
   4:	ret

0000000000000008 <select_load_4>:
   8:	adrp	x0, 0 <libat_load_4>
   c:	add	x0, x0, #0x0
  10:	ret

store_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4>:
   0:	stlr	w1, [x0]
   4:	ret

0000000000000008 <select_store_4>:
   8:	adrp	x0, 0 <libat_store_4>
   c:	add	x0, x0, #0x0
  10:	ret

cas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4>:
   0:	ldr	w4, [x1]
   4:	ldaxr	w3, [x0]
   8:	cmp	w3, w4
   c:	b.ne	18 <libat_compare_exchange_4+0x18>  // b.any
  10:	stlxr	w5, w2, [x0]
  14:	cbnz	w5, 4 <libat_compare_exchange_4+0x4>
  18:	cset	w0, eq  // eq = none
  1c:	b.eq	24 <libat_compare_exchange_4+0x24>  // b.none
  20:	str	w3, [x1]
  24:	ret

0000000000000028 <select_compare_exchange_4>:
  28:	adrp	x0, 0 <libat_compare_exchange_4>
  2c:	add	x0, x0, #0x0
  30:	ret

exch_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	stlxr	w3, w1, [x2]
   c:	cbnz	w3, 4 <libat_exchange_4+0x4>
  10:	ret

0000000000000014 <select_exchange_4>:
  14:	adrp	x0, 0 <libat_exchange_4>
  18:	add	x0, x0, #0x0
  1c:	ret

fadd_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	add	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_add_4+0x4>
  14:	ret

0000000000000018 <libat_add_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	add	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_add_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_add_4>:
  30:	adrp	x0, 0 <libat_fetch_add_4>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_add_fetch_4>:
  3c:	adrp	x0, 18 <libat_add_fetch_4>
  40:	add	x0, x0, #0x0
  44:	ret

fsub_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	sub	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_sub_4+0x4>
  14:	ret

0000000000000018 <libat_sub_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	sub	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_sub_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_sub_4>:
  30:	adrp	x0, 0 <libat_fetch_sub_4>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_sub_fetch_4>:
  3c:	adrp	x0, 18 <libat_sub_fetch_4>
  40:	add	x0, x0, #0x0
  44:	ret

fand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_and_4+0x4>
  14:	ret

0000000000000018 <libat_and_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	and	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_and_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_and_4>:
  30:	adrp	x0, 0 <libat_fetch_and_4>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_and_fetch_4>:
  3c:	adrp	x0, 18 <libat_and_fetch_4>
  40:	add	x0, x0, #0x0
  44:	ret

fior_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	orr	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_or_4+0x4>
  14:	ret

0000000000000018 <libat_or_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	orr	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_or_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_or_4>:
  30:	adrp	x0, 0 <libat_fetch_or_4>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_or_fetch_4>:
  3c:	adrp	x0, 18 <libat_or_fetch_4>
  40:	add	x0, x0, #0x0
  44:	ret

fxor_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	eor	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_xor_4+0x4>
  14:	ret

0000000000000018 <libat_xor_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	eor	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_xor_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_xor_4>:
  30:	adrp	x0, 0 <libat_fetch_xor_4>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_xor_fetch_4>:
  3c:	adrp	x0, 18 <libat_xor_fetch_4>
  40:	add	x0, x0, #0x0
  44:	ret

fnand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	mvn	w3, w3
  10:	stlxr	w4, w3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_4+0x4>
  18:	ret

000000000000001c <libat_nand_fetch_4>:
  1c:	mov	x2, x0
  20:	ldaxr	w0, [x2]
  24:	and	w0, w0, w1
  28:	mvn	w0, w0
  2c:	stlxr	w3, w0, [x2]
  30:	cbnz	w3, 20 <libat_nand_fetch_4+0x4>
  34:	ret

0000000000000038 <select_fetch_nand_4>:
  38:	adrp	x0, 0 <libat_fetch_nand_4>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_nand_fetch_4>:
  44:	adrp	x0, 1c <libat_nand_fetch_4>
  48:	add	x0, x0, #0x0
  4c:	ret

tas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_4+0x8>
  14:	ret

0000000000000018 <select_test_and_set_4>:
  18:	adrp	x0, 0 <libat_test_and_set_4>
  1c:	add	x0, x0, #0x0
  20:	ret

load_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8>:
   0:	ldar	x0, [x0]
   4:	ret

0000000000000008 <select_load_8>:
   8:	adrp	x0, 0 <libat_load_8>
   c:	add	x0, x0, #0x0
  10:	ret

store_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8>:
   0:	stlr	x1, [x0]
   4:	ret

0000000000000008 <select_store_8>:
   8:	adrp	x0, 0 <libat_store_8>
   c:	add	x0, x0, #0x0
  10:	ret

cas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8>:
   0:	ldr	x4, [x1]
   4:	ldaxr	x3, [x0]
   8:	cmp	x3, x4
   c:	b.ne	18 <libat_compare_exchange_8+0x18>  // b.any
  10:	stlxr	w5, x2, [x0]
  14:	cbnz	w5, 4 <libat_compare_exchange_8+0x4>
  18:	cset	w0, eq  // eq = none
  1c:	b.eq	24 <libat_compare_exchange_8+0x24>  // b.none
  20:	str	x3, [x1]
  24:	ret

0000000000000028 <select_compare_exchange_8>:
  28:	adrp	x0, 0 <libat_compare_exchange_8>
  2c:	add	x0, x0, #0x0
  30:	ret

exch_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	stlxr	w3, x1, [x2]
   c:	cbnz	w3, 4 <libat_exchange_8+0x4>
  10:	ret

0000000000000014 <select_exchange_8>:
  14:	adrp	x0, 0 <libat_exchange_8>
  18:	add	x0, x0, #0x0
  1c:	ret

fadd_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	add	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_add_8+0x4>
  14:	ret

0000000000000018 <libat_add_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	add	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_add_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_add_8>:
  30:	adrp	x0, 0 <libat_fetch_add_8>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_add_fetch_8>:
  3c:	adrp	x0, 18 <libat_add_fetch_8>
  40:	add	x0, x0, #0x0
  44:	ret

fsub_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	sub	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_sub_8+0x4>
  14:	ret

0000000000000018 <libat_sub_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	sub	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_sub_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_sub_8>:
  30:	adrp	x0, 0 <libat_fetch_sub_8>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_sub_fetch_8>:
  3c:	adrp	x0, 18 <libat_sub_fetch_8>
  40:	add	x0, x0, #0x0
  44:	ret

fand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_and_8+0x4>
  14:	ret

0000000000000018 <libat_and_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	and	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_and_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_and_8>:
  30:	adrp	x0, 0 <libat_fetch_and_8>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_and_fetch_8>:
  3c:	adrp	x0, 18 <libat_and_fetch_8>
  40:	add	x0, x0, #0x0
  44:	ret

fior_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	orr	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_or_8+0x4>
  14:	ret

0000000000000018 <libat_or_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	orr	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_or_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_or_8>:
  30:	adrp	x0, 0 <libat_fetch_or_8>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_or_fetch_8>:
  3c:	adrp	x0, 18 <libat_or_fetch_8>
  40:	add	x0, x0, #0x0
  44:	ret

fxor_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	eor	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_xor_8+0x4>
  14:	ret

0000000000000018 <libat_xor_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	eor	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_xor_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_xor_8>:
  30:	adrp	x0, 0 <libat_fetch_xor_8>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <select_xor_fetch_8>:
  3c:	adrp	x0, 18 <libat_xor_fetch_8>
  40:	add	x0, x0, #0x0
  44:	ret

fnand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	mvn	x3, x3
  10:	stlxr	w4, x3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_8+0x4>
  18:	ret

000000000000001c <libat_nand_fetch_8>:
  1c:	mov	x2, x0
  20:	ldaxr	x0, [x2]
  24:	and	x0, x0, x1
  28:	mvn	x0, x0
  2c:	stlxr	w3, x0, [x2]
  30:	cbnz	w3, 20 <libat_nand_fetch_8+0x4>
  34:	ret

0000000000000038 <select_fetch_nand_8>:
  38:	adrp	x0, 0 <libat_fetch_nand_8>
  3c:	add	x0, x0, #0x0
  40:	ret

0000000000000044 <select_nand_fetch_8>:
  44:	adrp	x0, 1c <libat_nand_fetch_8>
  48:	add	x0, x0, #0x0
  4c:	ret

tas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_8+0x8>
  14:	ret

0000000000000018 <select_test_and_set_8>:
  18:	adrp	x0, 0 <libat_test_and_set_8>
  1c:	add	x0, x0, #0x0
  20:	ret

load_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_16>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	bl	0 <libat_lock_1>
  18:	ldp	x20, x21, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <libat_unlock_1>
  24:	mov	x0, x20
  28:	mov	x1, x21
  2c:	ldp	x19, x20, [sp, #16]
  30:	ldr	x21, [sp, #32]
  34:	ldp	x29, x30, [sp], #48
  38:	ret

000000000000003c <select_load_16>:
  3c:	adrp	x0, 0 <libat_load_16>
  40:	add	x0, x0, #0x0
  44:	ret

store_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_16>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <libat_lock_1>
  20:	stp	x21, x20, [x19]
  24:	mov	x0, x19
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldr	x21, [sp, #32]
  30:	ldp	x29, x30, [sp], #48
  34:	b	0 <libat_unlock_1>

0000000000000038 <select_store_16>:
  38:	adrp	x0, 0 <libat_store_16>
  3c:	add	x0, x0, #0x0
  40:	ret

cas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x23, [sp, #48]
  24:	bl	0 <libat_lock_1>
  28:	ldp	x1, x0, [x19]
  2c:	ldp	x4, x3, [x20]
  30:	eor	x2, x4, x1
  34:	eor	x5, x3, x0
  38:	orr	x2, x2, x5
  3c:	cmp	x2, #0x0
  40:	cset	w23, eq  // eq = none
  44:	cmp	x4, x1
  48:	b.ne	78 <libat_compare_exchange_16+0x78>  // b.any
  4c:	cmp	x3, x0
  50:	b.ne	78 <libat_compare_exchange_16+0x78>  // b.any
  54:	stp	x22, x21, [x19]
  58:	mov	x0, x19
  5c:	bl	0 <libat_unlock_1>
  60:	mov	w0, w23
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldr	x23, [sp, #48]
  70:	ldp	x29, x30, [sp], #64
  74:	ret
  78:	stp	x1, x0, [x20]
  7c:	b	58 <libat_compare_exchange_16+0x58>

0000000000000080 <select_compare_exchange_16>:
  80:	adrp	x0, 0 <libat_compare_exchange_16>
  84:	add	x0, x0, #0x0
  88:	ret

exch_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	stp	x21, x20, [x19]
  2c:	mov	x0, x19
  30:	bl	0 <libat_unlock_1>
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x0, x22
  3c:	mov	x1, x23
  40:	ldp	x21, x22, [sp, #32]
  44:	ldr	x23, [sp, #48]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

0000000000000050 <select_exchange_16>:
  50:	adrp	x0, 0 <libat_exchange_16>
  54:	add	x0, x0, #0x0
  58:	ret

fadd_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	adds	x20, x22, x20
  30:	adc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_add_fetch_16>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x20, x0
  68:	mov	x19, x2
  6c:	str	x21, [sp, #32]
  70:	mov	x21, x3
  74:	bl	0 <libat_lock_1>
  78:	ldp	x2, x1, [x20]
  7c:	mov	x0, x20
  80:	adds	x19, x19, x2
  84:	adc	x21, x21, x1
  88:	stp	x19, x21, [x20]
  8c:	bl	0 <libat_unlock_1>
  90:	mov	x0, x19
  94:	mov	x1, x21
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

00000000000000a8 <select_fetch_add_16>:
  a8:	adrp	x0, 0 <libat_fetch_add_16>
  ac:	add	x0, x0, #0x0
  b0:	ret

00000000000000b4 <select_add_fetch_16>:
  b4:	adrp	x0, 58 <libat_add_fetch_16>
  b8:	add	x0, x0, #0x0
  bc:	ret

fsub_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	subs	x20, x22, x20
  30:	sbc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_sub_fetch_16>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x2
  70:	str	x23, [sp, #48]
  74:	mov	x23, x3
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x20, x21, [x19]
  80:	mov	x0, x19
  84:	subs	x20, x20, x22
  88:	sbc	x21, x21, x23
  8c:	stp	x20, x21, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x20
  98:	mov	x1, x21
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <select_fetch_sub_16>:
  b0:	adrp	x0, 0 <libat_fetch_sub_16>
  b4:	add	x0, x0, #0x0
  b8:	ret

00000000000000bc <select_sub_fetch_16>:
  bc:	adrp	x0, 58 <libat_sub_fetch_16>
  c0:	add	x0, x0, #0x0
  c4:	ret

fand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_and_fetch_16>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	and	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	and	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

00000000000000ac <select_fetch_and_16>:
  ac:	adrp	x0, 0 <libat_fetch_and_16>
  b0:	add	x0, x0, #0x0
  b4:	ret

00000000000000b8 <select_and_fetch_16>:
  b8:	adrp	x0, 58 <libat_and_fetch_16>
  bc:	add	x0, x0, #0x0
  c0:	ret

fior_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	orr	x21, x23, x21
  30:	orr	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_or_fetch_16>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	orr	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	orr	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

00000000000000ac <select_fetch_or_16>:
  ac:	adrp	x0, 0 <libat_fetch_or_16>
  b0:	add	x0, x0, #0x0
  b4:	ret

00000000000000b8 <select_or_fetch_16>:
  b8:	adrp	x0, 58 <libat_or_fetch_16>
  bc:	add	x0, x0, #0x0
  c0:	ret

fxor_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	eor	x21, x23, x21
  30:	eor	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_xor_fetch_16>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	eor	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	eor	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

00000000000000ac <select_fetch_xor_16>:
  ac:	adrp	x0, 0 <libat_fetch_xor_16>
  b0:	add	x0, x0, #0x0
  b4:	ret

00000000000000b8 <select_xor_fetch_16>:
  b8:	adrp	x0, 58 <libat_xor_fetch_16>
  bc:	add	x0, x0, #0x0
  c0:	ret

fnand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	mvn	x21, x21
  38:	mvn	x20, x20
  3c:	stp	x21, x20, [x19]
  40:	bl	0 <libat_unlock_1>
  44:	mov	x0, x23
  48:	mov	x1, x22
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldr	x23, [sp, #48]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

0000000000000060 <libat_nand_fetch_16>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	mov	x19, x0
  70:	mov	x20, x2
  74:	stp	x21, x22, [sp, #32]
  78:	mov	x22, x3
  7c:	bl	0 <libat_lock_1>
  80:	ldr	x21, [x19]
  84:	mov	x0, x19
  88:	and	x21, x21, x20
  8c:	ldr	x20, [x19, #8]
  90:	mvn	x21, x21
  94:	and	x20, x20, x22
  98:	mvn	x20, x20
  9c:	stp	x21, x20, [x19]
  a0:	bl	0 <libat_unlock_1>
  a4:	mov	x0, x21
  a8:	mov	x1, x20
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

00000000000000bc <select_fetch_nand_16>:
  bc:	adrp	x0, 0 <libat_fetch_nand_16>
  c0:	add	x0, x0, #0x0
  c4:	ret

00000000000000c8 <select_nand_fetch_16>:
  c8:	adrp	x0, 60 <libat_nand_fetch_16>
  cc:	add	x0, x0, #0x0
  d0:	ret

tas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_16+0x8>
  14:	ret

0000000000000018 <select_test_and_set_16>:
  18:	adrp	x0, 0 <libat_test_and_set_16>
  1c:	add	x0, x0, #0x0
  20:	ret

load_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1_i1>:
   0:	ldarb	w0, [x0]
   4:	ret

store_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1_i1>:
   0:	and	w1, w1, #0xff
   4:	stlrb	w1, [x0]
   8:	ret

cas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1_i1>:
   0:	ldrb	w4, [x1]
   4:	and	w2, w2, #0xff
   8:	mov	w3, w4
   c:	casalb	w3, w2, [x0]
  10:	cmp	w3, w4, uxtb
  14:	cset	w0, eq  // eq = none
  18:	b.eq	20 <libat_compare_exchange_1_i1+0x20>  // b.none
  1c:	strb	w3, [x1]
  20:	ret

exch_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1_i1>:
   0:	mov	x2, x0
   4:	and	w0, w1, #0xff
   8:	swpalb	w0, w0, [x2]
   c:	ret

fadd_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1_i1>:
   0:	ldaddalb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldaddalb	w1, w2, [x0]
  10:	add	w0, w1, w2
  14:	ret

fsub_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1_i1>:
   0:	and	w1, w1, #0xff
   4:	neg	w1, w1
   8:	ldaddalb	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_sub_fetch_1_i1>:
  10:	and	w1, w1, #0xff
  14:	neg	w2, w1
  18:	ldaddalb	w2, w2, [x0]
  1c:	sub	w0, w2, w1
  20:	ret

fand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1_i1>:
   0:	and	w1, w1, #0xff
   4:	mvn	w1, w1
   8:	ldclralb	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_and_fetch_1_i1>:
  10:	and	w1, w1, #0xff
  14:	mvn	w2, w1
  18:	ldclralb	w2, w2, [x0]
  1c:	and	w0, w1, w2
  20:	ret

fior_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1_i1>:
   0:	ldsetalb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldsetalb	w1, w2, [x0]
  10:	orr	w0, w1, w2
  14:	ret

fxor_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1_i1>:
   0:	ldeoralb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldeoralb	w1, w2, [x0]
  10:	eor	w0, w1, w2
  14:	ret

fnand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1_i1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xff
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrb	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_1_i1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_1_i1>:
  20:	mov	x2, x0
  24:	and	w1, w1, #0xff
  28:	ldaxrb	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrb	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_1_i1+0x8>
  3c:	ret

tas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1_i1>:
   0:	mov	x1, x0
   4:	mov	w0, #0x1                   	// #1
   8:	swpalb	w0, w0, [x1]
   c:	ret

load_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2_i1>:
   0:	ldarh	w0, [x0]
   4:	ret

store_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	stlrh	w1, [x0]
   8:	ret

cas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2_i1>:
   0:	ldrh	w4, [x1]
   4:	and	w2, w2, #0xffff
   8:	mov	w3, w4
   c:	casalh	w3, w2, [x0]
  10:	cmp	w3, w4, uxth
  14:	cset	w0, eq  // eq = none
  18:	b.eq	20 <libat_compare_exchange_2_i1+0x20>  // b.none
  1c:	strh	w3, [x1]
  20:	ret

exch_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2_i1>:
   0:	mov	x2, x0
   4:	and	w0, w1, #0xffff
   8:	swpalh	w0, w0, [x2]
   c:	ret

fadd_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2_i1>:
   0:	ldaddalh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldaddalh	w1, w2, [x0]
  10:	add	w0, w1, w2
  14:	ret

fsub_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	neg	w1, w1
   8:	ldaddalh	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_sub_fetch_2_i1>:
  10:	and	w1, w1, #0xffff
  14:	neg	w2, w1
  18:	ldaddalh	w2, w2, [x0]
  1c:	sub	w0, w2, w1
  20:	ret

fand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	mvn	w1, w1
   8:	ldclralh	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_and_fetch_2_i1>:
  10:	and	w1, w1, #0xffff
  14:	mvn	w2, w1
  18:	ldclralh	w2, w2, [x0]
  1c:	and	w0, w1, w2
  20:	ret

fior_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2_i1>:
   0:	ldsetalh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldsetalh	w1, w2, [x0]
  10:	orr	w0, w1, w2
  14:	ret

fxor_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2_i1>:
   0:	ldeoralh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldeoralh	w1, w2, [x0]
  10:	eor	w0, w1, w2
  14:	ret

fnand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2_i1>:
   0:	mov	x2, x0
   4:	and	w1, w1, #0xffff
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrh	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_2_i1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_2_i1>:
  20:	mov	x2, x0
  24:	and	w1, w1, #0xffff
  28:	ldaxrh	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrh	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_2_i1+0x8>
  3c:	ret

tas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2_i1>:
   0:	mov	x1, x0
   4:	mov	w0, #0x1                   	// #1
   8:	swpalb	w0, w0, [x1]
   c:	ret

load_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4_i1>:
   0:	ldar	w0, [x0]
   4:	ret

store_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4_i1>:
   0:	stlr	w1, [x0]
   4:	ret

cas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4_i1>:
   0:	ldr	w4, [x1]
   4:	mov	w3, w4
   8:	casal	w3, w2, [x0]
   c:	cmp	w3, w4
  10:	cset	w0, eq  // eq = none
  14:	b.eq	1c <libat_compare_exchange_4_i1+0x1c>  // b.none
  18:	str	w3, [x1]
  1c:	ret

exch_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4_i1>:
   0:	swpal	w1, w0, [x0]
   4:	ret

fadd_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4_i1>:
   0:	ldaddal	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_4_i1>:
   8:	ldaddal	w1, w2, [x0]
   c:	add	w0, w2, w1
  10:	ret

fsub_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4_i1>:
   0:	neg	w1, w1
   4:	ldaddal	w1, w0, [x0]
   8:	ret

000000000000000c <libat_sub_fetch_4_i1>:
   c:	neg	w2, w1
  10:	ldaddal	w2, w2, [x0]
  14:	sub	w0, w2, w1
  18:	ret

fand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4_i1>:
   0:	mvn	w1, w1
   4:	ldclral	w1, w0, [x0]
   8:	ret

000000000000000c <libat_and_fetch_4_i1>:
   c:	mvn	w2, w1
  10:	ldclral	w2, w2, [x0]
  14:	and	w0, w2, w1
  18:	ret

fior_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4_i1>:
   0:	ldsetal	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_4_i1>:
   8:	ldsetal	w1, w2, [x0]
   c:	orr	w0, w2, w1
  10:	ret

fxor_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4_i1>:
   0:	ldeoral	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_4_i1>:
   8:	ldeoral	w1, w2, [x0]
   c:	eor	w0, w2, w1
  10:	ret

fnand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4_i1>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	mvn	w3, w3
  10:	stlxr	w4, w3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_4_i1+0x4>
  18:	ret

000000000000001c <libat_nand_fetch_4_i1>:
  1c:	mov	x2, x0
  20:	ldaxr	w0, [x2]
  24:	and	w0, w0, w1
  28:	mvn	w0, w0
  2c:	stlxr	w3, w0, [x2]
  30:	cbnz	w3, 20 <libat_nand_fetch_4_i1+0x4>
  34:	ret

tas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4_i1>:
   0:	mov	x1, x0
   4:	mov	w0, #0x1                   	// #1
   8:	swpalb	w0, w0, [x1]
   c:	ret

load_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8_i1>:
   0:	ldar	x0, [x0]
   4:	ret

store_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8_i1>:
   0:	stlr	x1, [x0]
   4:	ret

cas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8_i1>:
   0:	ldr	x4, [x1]
   4:	mov	x3, x4
   8:	casal	x3, x2, [x0]
   c:	cmp	x3, x4
  10:	cset	w0, eq  // eq = none
  14:	b.eq	1c <libat_compare_exchange_8_i1+0x1c>  // b.none
  18:	str	x3, [x1]
  1c:	ret

exch_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8_i1>:
   0:	swpal	x1, x0, [x0]
   4:	ret

fadd_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8_i1>:
   0:	ldaddal	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_8_i1>:
   8:	ldaddal	x1, x2, [x0]
   c:	add	x0, x2, x1
  10:	ret

fsub_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8_i1>:
   0:	neg	x1, x1
   4:	ldaddal	x1, x0, [x0]
   8:	ret

000000000000000c <libat_sub_fetch_8_i1>:
   c:	neg	x2, x1
  10:	ldaddal	x2, x2, [x0]
  14:	sub	x0, x2, x1
  18:	ret

fand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8_i1>:
   0:	mvn	x1, x1
   4:	ldclral	x1, x0, [x0]
   8:	ret

000000000000000c <libat_and_fetch_8_i1>:
   c:	mvn	x2, x1
  10:	ldclral	x2, x2, [x0]
  14:	and	x0, x2, x1
  18:	ret

fior_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8_i1>:
   0:	ldsetal	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_8_i1>:
   8:	ldsetal	x1, x2, [x0]
   c:	orr	x0, x2, x1
  10:	ret

fxor_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8_i1>:
   0:	ldeoral	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_8_i1>:
   8:	ldeoral	x1, x2, [x0]
   c:	eor	x0, x2, x1
  10:	ret

fnand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8_i1>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	mvn	x3, x3
  10:	stlxr	w4, x3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_8_i1+0x4>
  18:	ret

000000000000001c <libat_nand_fetch_8_i1>:
  1c:	mov	x2, x0
  20:	ldaxr	x0, [x2]
  24:	and	x0, x0, x1
  28:	mvn	x0, x0
  2c:	stlxr	w3, x0, [x2]
  30:	cbnz	w3, 20 <libat_nand_fetch_8_i1+0x4>
  34:	ret

tas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8_i1>:
   0:	mov	x1, x0
   4:	mov	w0, #0x1                   	// #1
   8:	swpalb	w0, w0, [x1]
   c:	ret

load_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_16_i1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	bl	0 <libat_lock_1>
  18:	ldp	x20, x21, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <libat_unlock_1>
  24:	mov	x0, x20
  28:	mov	x1, x21
  2c:	ldp	x19, x20, [sp, #16]
  30:	ldr	x21, [sp, #32]
  34:	ldp	x29, x30, [sp], #48
  38:	ret

store_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_16_i1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <libat_lock_1>
  20:	stp	x21, x20, [x19]
  24:	mov	x0, x19
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldr	x21, [sp, #32]
  30:	ldp	x29, x30, [sp], #48
  34:	b	0 <libat_unlock_1>

cas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x23, [sp, #48]
  24:	bl	0 <libat_lock_1>
  28:	ldp	x1, x0, [x19]
  2c:	ldp	x4, x3, [x20]
  30:	eor	x2, x4, x1
  34:	eor	x5, x3, x0
  38:	orr	x2, x2, x5
  3c:	cmp	x2, #0x0
  40:	cset	w23, eq  // eq = none
  44:	cmp	x4, x1
  48:	b.ne	78 <libat_compare_exchange_16_i1+0x78>  // b.any
  4c:	cmp	x3, x0
  50:	b.ne	78 <libat_compare_exchange_16_i1+0x78>  // b.any
  54:	stp	x22, x21, [x19]
  58:	mov	x0, x19
  5c:	bl	0 <libat_unlock_1>
  60:	mov	w0, w23
  64:	ldp	x19, x20, [sp, #16]
  68:	ldp	x21, x22, [sp, #32]
  6c:	ldr	x23, [sp, #48]
  70:	ldp	x29, x30, [sp], #64
  74:	ret
  78:	stp	x1, x0, [x20]
  7c:	b	58 <libat_compare_exchange_16_i1+0x58>

exch_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	stp	x21, x20, [x19]
  2c:	mov	x0, x19
  30:	bl	0 <libat_unlock_1>
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x0, x22
  3c:	mov	x1, x23
  40:	ldp	x21, x22, [sp, #32]
  44:	ldr	x23, [sp, #48]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

fadd_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	adds	x20, x22, x20
  30:	adc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_add_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x20, x0
  68:	mov	x19, x2
  6c:	str	x21, [sp, #32]
  70:	mov	x21, x3
  74:	bl	0 <libat_lock_1>
  78:	ldp	x2, x1, [x20]
  7c:	mov	x0, x20
  80:	adds	x19, x19, x2
  84:	adc	x21, x21, x1
  88:	stp	x19, x21, [x20]
  8c:	bl	0 <libat_unlock_1>
  90:	mov	x0, x19
  94:	mov	x1, x21
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

fsub_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	subs	x20, x22, x20
  30:	sbc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_sub_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x2
  70:	str	x23, [sp, #48]
  74:	mov	x23, x3
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x20, x21, [x19]
  80:	mov	x0, x19
  84:	subs	x20, x20, x22
  88:	sbc	x21, x21, x23
  8c:	stp	x20, x21, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x20
  98:	mov	x1, x21
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

fand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_and_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	and	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	and	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

fior_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	orr	x21, x23, x21
  30:	orr	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_or_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	orr	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	orr	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

fxor_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	eor	x21, x23, x21
  30:	eor	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_xor_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	mov	x20, x2
  6c:	stp	x21, x22, [sp, #32]
  70:	mov	x22, x3
  74:	bl	0 <libat_lock_1>
  78:	ldr	x21, [x19]
  7c:	mov	x0, x19
  80:	eor	x21, x21, x20
  84:	ldr	x20, [x19, #8]
  88:	eor	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

fnand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	mvn	x21, x21
  38:	mvn	x20, x20
  3c:	stp	x21, x20, [x19]
  40:	bl	0 <libat_unlock_1>
  44:	mov	x0, x23
  48:	mov	x1, x22
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldr	x23, [sp, #48]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

0000000000000060 <libat_nand_fetch_16_i1>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	mov	x19, x0
  70:	mov	x20, x2
  74:	stp	x21, x22, [sp, #32]
  78:	mov	x22, x3
  7c:	bl	0 <libat_lock_1>
  80:	ldr	x21, [x19]
  84:	mov	x0, x19
  88:	and	x21, x21, x20
  8c:	ldr	x20, [x19, #8]
  90:	mvn	x21, x21
  94:	and	x20, x20, x22
  98:	mvn	x20, x20
  9c:	stp	x21, x20, [x19]
  a0:	bl	0 <libat_unlock_1>
  a4:	mov	x0, x21
  a8:	mov	x1, x20
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

tas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16_i1>:
   0:	mov	x1, x0
   4:	mov	w0, #0x1                   	// #1
   8:	swpalb	w0, w0, [x1]
   c:	ret
