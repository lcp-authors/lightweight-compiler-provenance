
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//macho.mod_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_macho_close>:
       0:	stp	x29, x30, [sp, #-32]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x0
      10:	ldr	x0, [x0, #48]
      14:	ldr	x20, [x19]
      18:	cbz	x0, 58 <grub_macho_close+0x58>
      1c:	bl	0 <grub_free>
      20:	ldr	x0, [x19, #120]
      24:	cbz	x0, 70 <grub_macho_close+0x70>
      28:	bl	0 <grub_free>
      2c:	mov	x0, x19
      30:	bl	0 <grub_free>
      34:	cbz	x20, 40 <grub_macho_close+0x40>
      38:	mov	x0, x20
      3c:	bl	0 <grub_file_close>
      40:	adrp	x0, 0 <grub_macho_close>
      44:	ldp	x19, x20, [sp, #16]
      48:	ldr	x0, [x0]
      4c:	ldp	x29, x30, [sp], #32
      50:	ldr	w0, [x0]
      54:	ret
      58:	ldr	x0, [x19, #40]
      5c:	bl	0 <grub_free>
      60:	ldr	x0, [x19, #48]
      64:	bl	0 <grub_free>
      68:	ldr	x0, [x19, #120]
      6c:	cbnz	x0, 28 <grub_macho_close+0x28>
      70:	ldr	x0, [x19, #112]
      74:	bl	0 <grub_free>
      78:	ldr	x0, [x19, #120]
      7c:	b	28 <grub_macho_close+0x28>
	...

0000000000000088 <grub_macho_file>:
      88:	stp	x29, x30, [sp, #-112]!
      8c:	mov	x29, sp
      90:	stp	x19, x20, [sp, #16]
      94:	mov	x20, x0
      98:	mov	x0, #0x98                  	// #152
      9c:	stp	x21, x22, [sp, #32]
      a0:	mov	x22, x1
      a4:	mov	w21, w2
      a8:	bl	0 <grub_malloc>
      ac:	mov	x19, x0
      b0:	cbz	x0, 1bc <grub_macho_file+0x134>
      b4:	mov	x3, #0xffffffffffffffff    	// #-1
      b8:	stp	x20, x3, [x19]
      bc:	mov	x0, x20
      c0:	str	x3, [x19, #16]
      c4:	mov	x1, #0x0                   	// #0
      c8:	stp	xzr, xzr, [x19, #40]
      cc:	str	wzr, [x19, #56]
      d0:	stp	x3, x3, [x19, #80]
      d4:	stp	xzr, xzr, [x19, #112]
      d8:	str	wzr, [x19, #128]
      dc:	bl	0 <grub_file_seek>
      e0:	cmn	x0, #0x1
      e4:	b.eq	1e0 <grub_macho_file+0x158>  // b.none
      e8:	ldr	x0, [x19]
      ec:	add	x1, sp, #0x50
      f0:	mov	x2, #0x20                  	// #32
      f4:	bl	0 <grub_file_read>
      f8:	cmp	x0, #0x20
      fc:	b.ne	1d0 <grub_macho_file+0x148>  // b.any
     100:	ldr	w0, [sp, #80]
     104:	mov	w1, #0xfeca                	// #65226
     108:	stp	x23, x24, [sp, #48]
     10c:	movk	w1, #0xbeba, lsl #16
     110:	cmp	w0, w1
     114:	b.eq	3c0 <grub_macho_file+0x338>  // b.none
     118:	mov	w1, #0xface                	// #64206
     11c:	movk	w1, #0xfeed, lsl #16
     120:	cmp	w0, w1
     124:	b.eq	354 <grub_macho_file+0x2cc>  // b.none
     128:	mov	w1, #0xfacf                	// #64207
     12c:	movk	w1, #0xfeed, lsl #16
     130:	cmp	w0, w1
     134:	adrp	x1, 0 <grub_macho_close>
     138:	b.ne	204 <grub_macho_file+0x17c>  // b.any
     13c:	cbz	w21, 4a4 <grub_macho_file+0x41c>
     140:	str	xzr, [x19, #80]
     144:	add	x0, sp, #0x50
     148:	ldr	x23, [x1]
     14c:	mov	x2, #0x8                   	// #8
     150:	ldr	x1, [x20, #64]
     154:	str	x1, [x19, #88]
     158:	mov	x1, x23
     15c:	bl	0 <grub_memcmp>
     160:	cbnz	w0, 2d0 <grub_macho_file+0x248>
     164:	mov	x1, x23
     168:	add	x0, sp, #0x50
     16c:	mov	x2, #0x8                   	// #8
     170:	bl	0 <grub_memcmp>
     174:	cbnz	w0, 308 <grub_macho_file+0x280>
     178:	str	xzr, [x19, #80]
     17c:	mov	x1, x22
     180:	mov	x0, x19
     184:	ldr	x2, [x20, #64]
     188:	str	x2, [x19, #88]
     18c:	bl	a80 <grub_macho_parse32>
     190:	mov	x0, x19
     194:	mov	x1, x22
     198:	bl	1338 <grub_macho_parse64>
     19c:	ldr	x0, [x19, #8]
     1a0:	cmn	x0, #0x1
     1a4:	b.eq	330 <grub_macho_file+0x2a8>  // b.none
     1a8:	ldr	x0, [x19, #80]
     1ac:	cmp	w21, #0x0
     1b0:	ccmn	x0, #0x1, #0x0, ne  // ne = any
     1b4:	b.eq	33c <grub_macho_file+0x2b4>  // b.none
     1b8:	ldp	x23, x24, [sp, #48]
     1bc:	mov	x0, x19
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x21, x22, [sp, #32]
     1c8:	ldp	x29, x30, [sp], #112
     1cc:	ret
     1d0:	adrp	x0, 0 <grub_macho_close>
     1d4:	ldr	x0, [x0]
     1d8:	ldr	w0, [x0]
     1dc:	cbz	w0, 2a0 <grub_macho_file+0x218>
     1e0:	str	xzr, [x19]
     1e4:	mov	x0, x19
     1e8:	mov	x19, #0x0                   	// #0
     1ec:	bl	0 <grub_macho_close>
     1f0:	mov	x0, x19
     1f4:	ldp	x19, x20, [sp, #16]
     1f8:	ldp	x21, x22, [sp, #32]
     1fc:	ldp	x29, x30, [sp], #112
     200:	ret
     204:	ldr	x23, [x1]
     208:	add	x0, sp, #0x50
     20c:	mov	x2, #0x8                   	// #8
     210:	mov	x1, x23
     214:	bl	0 <grub_memcmp>
     218:	cbnz	w0, 2f0 <grub_macho_file+0x268>
     21c:	cbnz	w21, 164 <grub_macho_file+0xdc>
     220:	str	xzr, [x19, #8]
     224:	mov	x1, x23
     228:	add	x0, sp, #0x50
     22c:	mov	x2, #0x8                   	// #8
     230:	ldr	x3, [x20, #64]
     234:	str	x3, [x19, #16]
     238:	bl	0 <grub_memcmp>
     23c:	cbnz	w0, 308 <grub_macho_file+0x280>
     240:	mov	x1, x22
     244:	mov	x0, x19
     248:	bl	a80 <grub_macho_parse32>
     24c:	mov	x0, x19
     250:	mov	x1, x22
     254:	bl	1338 <grub_macho_parse64>
     258:	ldr	x0, [x19, #8]
     25c:	cmn	x0, #0x1
     260:	b.ne	1a8 <grub_macho_file+0x120>  // b.any
     264:	adrp	x1, 0 <grub_macho_close>
     268:	mov	w0, #0x15                  	// #21
     26c:	ldr	x1, [x1]
     270:	bl	0 <grub_error>
     274:	ldp	x23, x24, [sp, #48]
     278:	b	1e0 <grub_macho_file+0x158>
     27c:	mov	x0, x24
     280:	bl	0 <grub_free>
     284:	adrp	x0, 0 <grub_macho_close>
     288:	ldp	x23, x24, [sp, #48]
     28c:	ldr	x0, [x0]
     290:	ldr	x25, [sp, #64]
     294:	ldr	w0, [x0]
     298:	cbnz	w0, 1e0 <grub_macho_file+0x158>
     29c:	nop
     2a0:	adrp	x1, 0 <grub_macho_close>
     2a4:	mov	x2, x22
     2a8:	mov	w0, #0x15                  	// #21
     2ac:	ldr	x1, [x1]
     2b0:	bl	0 <grub_error>
     2b4:	b	1e0 <grub_macho_file+0x158>
     2b8:	ldr	x23, [x1]
     2bc:	add	x0, sp, #0x50
     2c0:	mov	x2, #0x8                   	// #8
     2c4:	mov	x1, x23
     2c8:	bl	0 <grub_memcmp>
     2cc:	cbz	w0, 164 <grub_macho_file+0xdc>
     2d0:	mov	x1, x23
     2d4:	add	x0, sp, #0x50
     2d8:	mov	x2, #0x8                   	// #8
     2dc:	bl	0 <grub_memcmp>
     2e0:	cbz	w0, 178 <grub_macho_file+0xf0>
     2e4:	mov	x1, x22
     2e8:	mov	x0, x19
     2ec:	b	18c <grub_macho_file+0x104>
     2f0:	mov	x1, x23
     2f4:	add	x0, sp, #0x50
     2f8:	mov	x2, #0x8                   	// #8
     2fc:	bl	0 <grub_memcmp>
     300:	cbz	w0, 4d4 <grub_macho_file+0x44c>
     304:	nop
     308:	mov	x1, x22
     30c:	mov	x0, x19
     310:	bl	a80 <grub_macho_parse32>
     314:	mov	x0, x19
     318:	mov	x1, x22
     31c:	bl	1338 <grub_macho_parse64>
     320:	ldr	x0, [x19, #8]
     324:	cmn	x0, #0x1
     328:	b.ne	1a8 <grub_macho_file+0x120>  // b.any
     32c:	cbz	w21, 264 <grub_macho_file+0x1dc>
     330:	ldr	x0, [x19, #80]
     334:	cmn	x0, #0x1
     338:	b.ne	1b8 <grub_macho_file+0x130>  // b.any
     33c:	adrp	x1, 0 <grub_macho_close>
     340:	mov	w0, #0x15                  	// #21
     344:	ldr	x1, [x1]
     348:	bl	0 <grub_error>
     34c:	ldp	x23, x24, [sp, #48]
     350:	b	1e0 <grub_macho_file+0x158>
     354:	adrp	x1, 0 <grub_macho_close>
     358:	cbnz	w21, 2b8 <grub_macho_file+0x230>
     35c:	str	xzr, [x19, #8]
     360:	add	x0, sp, #0x50
     364:	ldr	x23, [x1]
     368:	mov	x2, #0x8                   	// #8
     36c:	ldr	x1, [x20, #64]
     370:	str	x1, [x19, #16]
     374:	mov	x1, x23
     378:	bl	0 <grub_memcmp>
     37c:	cbz	w0, 220 <grub_macho_file+0x198>
     380:	mov	x1, x23
     384:	add	x0, sp, #0x50
     388:	mov	x2, #0x8                   	// #8
     38c:	bl	0 <grub_memcmp>
     390:	cbnz	w0, 308 <grub_macho_file+0x280>
     394:	mov	x1, x22
     398:	mov	x0, x19
     39c:	bl	a80 <grub_macho_parse32>
     3a0:	mov	x0, x19
     3a4:	mov	x1, x22
     3a8:	bl	1338 <grub_macho_parse64>
     3ac:	ldr	x0, [x19, #8]
     3b0:	cmn	x0, #0x1
     3b4:	b.eq	264 <grub_macho_file+0x1dc>  // b.none
     3b8:	ldp	x23, x24, [sp, #48]
     3bc:	b	1bc <grub_macho_file+0x134>
     3c0:	ldr	x0, [x19]
     3c4:	mov	x1, #0x8                   	// #8
     3c8:	ldr	w23, [sp, #84]
     3cc:	bl	0 <grub_file_seek>
     3d0:	rev	w23, w23
     3d4:	cmn	x0, #0x1
     3d8:	b.eq	4dc <grub_macho_file+0x454>  // b.none
     3dc:	str	x25, [sp, #64]
     3e0:	mov	w25, #0x14                  	// #20
     3e4:	smull	x25, w23, w25
     3e8:	mov	x0, x25
     3ec:	bl	0 <grub_malloc>
     3f0:	mov	x24, x0
     3f4:	cbz	x0, 4e4 <grub_macho_file+0x45c>
     3f8:	mov	x1, x0
     3fc:	mov	x2, x25
     400:	ldr	x0, [x19]
     404:	bl	0 <grub_file_read>
     408:	cmp	x0, x25
     40c:	b.ne	27c <grub_macho_file+0x1f4>  // b.any
     410:	cmp	w23, #0x0
     414:	b.le	4c0 <grub_macho_file+0x438>
     418:	sub	w4, w23, #0x1
     41c:	mov	w5, #0x1                   	// #1
     420:	add	x4, x4, #0x1
     424:	mov	x3, x24
     428:	mov	w0, #0x7000000             	// #117440512
     42c:	movk	w5, #0x700, lsl #16
     430:	add	x4, x4, x4, lsl #2
     434:	add	x4, x24, x4, lsl #2
     438:	b	454 <grub_macho_file+0x3cc>
     43c:	cmp	w21, #0x0
     440:	ccmp	w2, w5, #0x0, ne  // ne = any
     444:	b.eq	484 <grub_macho_file+0x3fc>  // b.none
     448:	add	x3, x3, #0x14
     44c:	cmp	x4, x3
     450:	b.eq	4c0 <grub_macho_file+0x438>  // b.none
     454:	ldr	w2, [x3]
     458:	cmp	w2, w0
     45c:	b.ne	43c <grub_macho_file+0x3b4>  // b.any
     460:	cbnz	w21, 448 <grub_macho_file+0x3c0>
     464:	ldp	w1, w6, [x3, #8]
     468:	rev	w2, w1
     46c:	rev	w6, w6
     470:	rev	w1, w1
     474:	str	x1, [x19, #8]
     478:	add	w1, w2, w6
     47c:	str	x1, [x19, #16]
     480:	b	448 <grub_macho_file+0x3c0>
     484:	ldp	w1, w6, [x3, #8]
     488:	rev	w2, w1
     48c:	rev	w6, w6
     490:	rev	w1, w1
     494:	str	x1, [x19, #80]
     498:	add	w1, w2, w6
     49c:	str	x1, [x19, #88]
     4a0:	b	448 <grub_macho_file+0x3c0>
     4a4:	ldr	x23, [x1]
     4a8:	add	x0, sp, #0x50
     4ac:	mov	x2, #0x8                   	// #8
     4b0:	mov	x1, x23
     4b4:	bl	0 <grub_memcmp>
     4b8:	cbz	w0, 220 <grub_macho_file+0x198>
     4bc:	b	380 <grub_macho_file+0x2f8>
     4c0:	mov	x0, x24
     4c4:	bl	0 <grub_free>
     4c8:	ldr	w0, [sp, #80]
     4cc:	ldr	x25, [sp, #64]
     4d0:	b	118 <grub_macho_file+0x90>
     4d4:	cbnz	w21, 178 <grub_macho_file+0xf0>
     4d8:	b	394 <grub_macho_file+0x30c>
     4dc:	ldp	x23, x24, [sp, #48]
     4e0:	b	1e0 <grub_macho_file+0x158>
     4e4:	ldp	x23, x24, [sp, #48]
     4e8:	ldr	x25, [sp, #64]
     4ec:	b	1e0 <grub_macho_file+0x158>
	...

0000000000000518 <grub_macho_open>:
     518:	stp	x29, x30, [sp, #-48]!
     51c:	mov	x29, sp
     520:	stp	x19, x20, [sp, #16]
     524:	mov	x19, x0
     528:	str	x21, [sp, #32]
     52c:	mov	w21, w2
     530:	bl	0 <grub_file_open>
     534:	cbz	x0, 564 <grub_macho_open+0x4c>
     538:	mov	x1, x19
     53c:	mov	x20, x0
     540:	mov	w2, w21
     544:	bl	88 <grub_macho_file>
     548:	mov	x19, x0
     54c:	cbz	x0, 57c <grub_macho_open+0x64>
     550:	mov	x0, x19
     554:	ldp	x19, x20, [sp, #16]
     558:	ldr	x21, [sp, #32]
     55c:	ldp	x29, x30, [sp], #48
     560:	ret
     564:	mov	x19, #0x0                   	// #0
     568:	mov	x0, x19
     56c:	ldp	x19, x20, [sp, #16]
     570:	ldr	x21, [sp, #32]
     574:	ldp	x29, x30, [sp], #48
     578:	ret
     57c:	mov	x0, x20
     580:	bl	0 <grub_file_close>
     584:	mov	x0, x19
     588:	ldp	x19, x20, [sp, #16]
     58c:	ldr	x21, [sp, #32]
     590:	ldp	x29, x30, [sp], #48
     594:	ret
     598:	ldr	w0, [x1]
     59c:	cmp	w0, #0x5
     5a0:	b.ne	5ac <grub_macho_open+0x94>  // b.any
     5a4:	ldr	w0, [x1, #56]
     5a8:	str	w0, [x2]
     5ac:	mov	w0, #0x0                   	// #0
     5b0:	ret
     5b4:	nop
     5b8:	stp	x29, x30, [sp, #-64]!
     5bc:	mov	x29, sp
     5c0:	stp	x21, x22, [sp, #32]
     5c4:	mov	x21, x0
     5c8:	ldr	w0, [x0, #56]
     5cc:	stp	x19, x20, [sp, #16]
     5d0:	mov	x22, x1
     5d4:	str	x23, [sp, #48]
     5d8:	mov	x23, x2
     5dc:	cbz	w0, 5e8 <grub_macho_open+0xd0>
     5e0:	ldr	x0, [x21, #48]
     5e4:	cbz	x0, 650 <grub_macho_open+0x138>
     5e8:	ldr	x19, [x21, #40]
     5ec:	cbz	x19, 6d8 <grub_macho_open+0x1c0>
     5f0:	ldr	w0, [x21, #24]
     5f4:	cmp	w0, #0x0
     5f8:	mov	w20, #0x0                   	// #0
     5fc:	b.gt	618 <grub_macho_open+0x100>
     600:	b	630 <grub_macho_open+0x118>
     604:	ldr	w3, [x19, #4]
     608:	ldr	w0, [x21, #24]
     60c:	add	x19, x19, x3
     610:	cmp	w0, w20
     614:	b.le	630 <grub_macho_open+0x118>
     618:	add	w20, w20, #0x1
     61c:	mov	x2, x23
     620:	mov	x1, x19
     624:	mov	x0, x21
     628:	blr	x22
     62c:	cbz	w0, 604 <grub_macho_open+0xec>
     630:	adrp	x0, 0 <grub_macho_close>
     634:	ldr	x0, [x0]
     638:	ldr	w0, [x0]
     63c:	ldp	x19, x20, [sp, #16]
     640:	ldp	x21, x22, [sp, #32]
     644:	ldr	x23, [sp, #48]
     648:	ldp	x29, x30, [sp], #64
     64c:	ret
     650:	ldr	x0, [x21, #72]
     654:	mov	x20, x3
     658:	bl	0 <grub_malloc>
     65c:	str	x0, [x21, #48]
     660:	cbz	x0, 630 <grub_macho_open+0x118>
     664:	ldr	x0, [x21, #64]
     668:	bl	0 <grub_malloc>
     66c:	mov	x19, x0
     670:	cbz	x0, 6f8 <grub_macho_open+0x1e0>
     674:	ldp	x0, x1, [x21]
     678:	add	x1, x1, #0x180
     67c:	bl	0 <grub_file_seek>
     680:	cmn	x0, #0x1
     684:	b.eq	6a4 <grub_macho_open+0x18c>  // b.none
     688:	ldr	x0, [x21]
     68c:	mov	x1, x19
     690:	ldr	x2, [x21, #64]
     694:	bl	0 <grub_file_read>
     698:	ldr	x1, [x21, #64]
     69c:	cmp	x0, x1
     6a0:	b.eq	72c <grub_macho_open+0x214>  // b.none
     6a4:	adrp	x0, 0 <grub_macho_close>
     6a8:	ldr	x22, [x0]
     6ac:	ldr	w0, [x22]
     6b0:	cbz	w0, 714 <grub_macho_open+0x1fc>
     6b4:	mov	x0, x19
     6b8:	bl	0 <grub_free>
     6bc:	ldr	x0, [x21, #48]
     6c0:	bl	0 <grub_free>
     6c4:	str	xzr, [x21, #48]
     6c8:	mov	x0, #0xffffffffffffffff    	// #-1
     6cc:	str	x0, [x21, #8]
     6d0:	ldr	w0, [x22]
     6d4:	b	63c <grub_macho_open+0x124>
     6d8:	adrp	x1, 0 <grub_macho_close>
     6dc:	mov	w0, #0x15                  	// #21
     6e0:	ldp	x19, x20, [sp, #16]
     6e4:	ldp	x21, x22, [sp, #32]
     6e8:	ldr	x23, [sp, #48]
     6ec:	ldp	x29, x30, [sp], #64
     6f0:	ldr	x1, [x1]
     6f4:	b	0 <grub_error>
     6f8:	ldr	x0, [x21, #48]
     6fc:	bl	0 <grub_free>
     700:	str	xzr, [x21, #48]
     704:	adrp	x0, 0 <grub_macho_close>
     708:	ldr	x0, [x0]
     70c:	ldr	w0, [x0]
     710:	b	63c <grub_macho_open+0x124>
     714:	adrp	x1, 0 <grub_macho_close>
     718:	mov	x2, x20
     71c:	mov	w0, #0x15                  	// #21
     720:	ldr	x1, [x1]
     724:	bl	0 <grub_error>
     728:	b	6b4 <grub_macho_open+0x19c>
     72c:	ldr	x4, [x21, #72]
     730:	add	x3, x19, x0
     734:	ldr	x1, [x21, #48]
     738:	mov	x2, x19
     73c:	mov	x0, x1
     740:	add	x1, x1, x4
     744:	bl	1708 <grub_decompress_lzss>
     748:	ldr	x1, [x21, #72]
     74c:	cmp	x0, x1
     750:	b.ne	6a4 <grub_macho_open+0x18c>  // b.any
     754:	mov	x0, x19
     758:	bl	0 <grub_free>
     75c:	ldr	x0, [x21, #48]
     760:	ldr	x2, [x21, #72]
     764:	add	x19, x0, #0x1c
     768:	ldr	w1, [x0, #20]
     76c:	ldr	w0, [x0, #16]
     770:	str	w0, [x21, #24]
     774:	add	x3, x1, #0x1c
     778:	stp	x1, x19, [x21, #32]
     77c:	cmp	x3, x2
     780:	b.cc	5f4 <grub_macho_open+0xdc>  // b.lo, b.ul, b.last
     784:	adrp	x1, 0 <grub_macho_close>
     788:	mov	x2, x20
     78c:	mov	w0, #0x15                  	// #21
     790:	ldr	x1, [x1]
     794:	bl	0 <grub_error>
     798:	ldr	x0, [x21, #48]
     79c:	bl	0 <grub_free>
     7a0:	str	xzr, [x21, #48]
     7a4:	adrp	x0, 0 <grub_macho_close>
     7a8:	mov	x1, #0xffffffffffffffff    	// #-1
     7ac:	str	x1, [x21, #8]
     7b0:	ldr	x0, [x0]
     7b4:	ldr	w0, [x0]
     7b8:	b	63c <grub_macho_open+0x124>
     7bc:	nop
	...
     7d8:	ldr	w0, [x1]
     7dc:	cmp	w0, #0x1
     7e0:	b.ne	83c <grub_macho_open+0x324>  // b.any
     7e4:	ldr	w0, [x1, #28]
     7e8:	cbz	w0, 83c <grub_macho_open+0x324>
     7ec:	ldr	w3, [x1, #36]
     7f0:	cbnz	w3, 7fc <grub_macho_open+0x2e4>
     7f4:	ldr	w3, [x2]
     7f8:	tbnz	w3, #0, 83c <grub_macho_open+0x324>
     7fc:	ldr	w3, [x2, #4]
     800:	ldr	x4, [x2, #8]
     804:	add	w3, w3, #0x1
     808:	str	w3, [x2, #4]
     80c:	ldr	w3, [x1, #24]
     810:	ldr	w5, [x4]
     814:	cmp	w3, w5
     818:	b.cs	824 <grub_macho_open+0x30c>  // b.hs, b.nlast
     81c:	str	w3, [x4]
     820:	ldp	w3, w0, [x1, #24]
     824:	add	w0, w0, w3
     828:	ldr	x1, [x2, #16]
     82c:	ldr	w2, [x1]
     830:	cmp	w0, w2
     834:	b.ls	83c <grub_macho_open+0x324>  // b.plast
     838:	str	w0, [x1]
     83c:	mov	w0, #0x0                   	// #0
     840:	ret
     844:	nop
     848:	stp	x29, x30, [sp, #-64]!
     84c:	mov	x29, sp
     850:	stp	x19, x20, [sp, #16]
     854:	mov	x20, x0
     858:	ldr	w0, [x1]
     85c:	cmp	w0, #0x1
     860:	b.ne	8c8 <grub_macho_open+0x3b0>  // b.any
     864:	ldr	w3, [x1, #36]
     868:	mov	x19, x1
     86c:	stp	x21, x22, [sp, #32]
     870:	mov	x22, x2
     874:	cbnz	w3, 8bc <grub_macho_open+0x3a4>
     878:	ldr	w0, [x2]
     87c:	tbnz	w0, #0, 8c4 <grub_macho_open+0x3ac>
     880:	ldr	w2, [x1, #28]
     884:	cbz	w2, 8c4 <grub_macho_open+0x3ac>
     888:	cmp	w3, w2
     88c:	b.cs	8c4 <grub_macho_open+0x3ac>  // b.hs, b.nlast
     890:	ldr	w4, [x19, #24]
     894:	mov	w1, w3
     898:	ldr	x0, [x22, #8]
     89c:	add	x1, x1, x4
     8a0:	add	x0, x0, x1
     8a4:	sub	w2, w2, w3
     8a8:	mov	w1, #0x0                   	// #0
     8ac:	bl	0 <grub_memset>
     8b0:	mov	w0, #0x0                   	// #0
     8b4:	ldp	x21, x22, [sp, #32]
     8b8:	b	8cc <grub_macho_open+0x3b4>
     8bc:	ldr	w21, [x1, #28]
     8c0:	cbnz	w21, 8d8 <grub_macho_open+0x3c0>
     8c4:	ldp	x21, x22, [sp, #32]
     8c8:	mov	w0, #0x0                   	// #0
     8cc:	ldp	x19, x20, [sp, #16]
     8d0:	ldp	x29, x30, [sp], #64
     8d4:	ret
     8d8:	ldr	x4, [x20, #48]
     8dc:	cmp	w3, w21
     8e0:	ldr	w1, [x19, #32]
     8e4:	csel	w21, w3, w21, ls  // ls = plast
     8e8:	cbz	x4, 9f8 <grub_macho_open+0x4e0>
     8ec:	ldr	x0, [x20, #72]
     8f0:	mov	w1, w1
     8f4:	mov	w21, w21
     8f8:	add	x2, x1, x21
     8fc:	cmp	x2, x0
     900:	b.ls	920 <grub_macho_open+0x408>  // b.plast
     904:	adrp	x0, 0 <grub_macho_close>
     908:	ldr	x0, [x0]
     90c:	ldr	w0, [x0]
     910:	cbz	w0, a50 <grub_macho_open+0x538>
     914:	mov	w0, #0x1                   	// #1
     918:	ldp	x21, x22, [sp, #32]
     91c:	b	8cc <grub_macho_open+0x3b4>
     920:	ldr	x5, [x22, #8]
     924:	mov	x2, x21
     928:	ldr	w0, [x19, #24]
     92c:	add	x1, x4, x1
     930:	add	x0, x5, x0
     934:	bl	0 <grub_memmove>
     938:	ldr	x0, [x22, #24]
     93c:	ldr	w2, [x19, #28]
     940:	ldr	w3, [x19, #36]
     944:	cbz	x0, 888 <grub_macho_open+0x370>
     948:	ldr	x0, [x22, #8]
     94c:	cmp	w2, w3
     950:	ldr	w4, [x19, #24]
     954:	add	x20, x0, x4
     958:	b.ls	a34 <grub_macho_open+0x51c>  // b.plast
     95c:	mov	w1, w3
     960:	sub	x21, x1, #0x16
     964:	add	x21, x20, x21
     968:	cmp	x20, x21
     96c:	b.cs	89c <grub_macho_open+0x384>  // b.hs, b.nlast
     970:	adrp	x0, 0 <grub_macho_close>
     974:	str	x23, [sp, #48]
     978:	ldr	x23, [x0]
     97c:	b	98c <grub_macho_open+0x474>
     980:	add	x20, x20, #0x1
     984:	cmp	x20, x21
     988:	b.cs	9e8 <grub_macho_open+0x4d0>  // b.hs, b.nlast
     98c:	mov	x1, x23
     990:	mov	x0, x20
     994:	mov	x2, #0x16                  	// #22
     998:	bl	0 <grub_memcmp>
     99c:	cbnz	w0, 980 <grub_macho_open+0x468>
     9a0:	ldr	x2, [x22, #24]
     9a4:	add	x20, x20, #0x16
     9a8:	add	x21, x21, #0x16
     9ac:	cmp	x20, x21
     9b0:	str	wzr, [x2]
     9b4:	b.cc	9d4 <grub_macho_open+0x4bc>  // b.lo, b.ul, b.last
     9b8:	b	9e8 <grub_macho_open+0x4d0>
     9bc:	ldr	w0, [x2]
     9c0:	cmp	x21, x20
     9c4:	add	w0, w0, w0, lsl #2
     9c8:	add	w0, w1, w0, lsl #1
     9cc:	str	w0, [x2]
     9d0:	b.eq	9e8 <grub_macho_open+0x4d0>  // b.none
     9d4:	ldrb	w0, [x20]
     9d8:	add	x20, x20, #0x1
     9dc:	sub	w1, w0, #0x30
     9e0:	cmp	w1, #0x9
     9e4:	b.ls	9bc <grub_macho_open+0x4a4>  // b.plast
     9e8:	ldr	w2, [x19, #28]
     9ec:	ldr	w3, [x19, #36]
     9f0:	ldr	x23, [sp, #48]
     9f4:	b	888 <grub_macho_open+0x370>
     9f8:	ldp	x0, x2, [x20]
     9fc:	add	x1, x2, w1, uxtw
     a00:	bl	0 <grub_file_seek>
     a04:	cmn	x0, #0x1
     a08:	b.eq	914 <grub_macho_open+0x3fc>  // b.none
     a0c:	ldr	x0, [x20]
     a10:	mov	w21, w21
     a14:	ldr	x3, [x22, #8]
     a18:	mov	x2, x21
     a1c:	ldr	w1, [x19, #24]
     a20:	add	x1, x3, x1
     a24:	bl	0 <grub_file_read>
     a28:	cmp	x21, x0
     a2c:	b.eq	938 <grub_macho_open+0x420>  // b.none
     a30:	b	904 <grub_macho_open+0x3ec>
     a34:	mov	w0, w2
     a38:	sub	x0, x0, #0x16
     a3c:	add	x21, x20, x0
     a40:	cmp	x20, x21
     a44:	b.cc	970 <grub_macho_open+0x458>  // b.lo, b.ul, b.last
     a48:	ldp	x21, x22, [sp, #32]
     a4c:	b	8c8 <grub_macho_open+0x3b0>
     a50:	adrp	x1, 0 <grub_macho_close>
     a54:	mov	w0, #0x15                  	// #21
     a58:	ldr	x2, [x22, #16]
     a5c:	ldr	x1, [x1]
     a60:	bl	0 <grub_error>
     a64:	b	914 <grub_macho_open+0x3fc>
	...

0000000000000a80 <grub_macho_parse32>:
     a80:	stp	x29, x30, [sp, #-64]!
     a84:	mov	x29, sp
     a88:	stp	x19, x20, [sp, #16]
     a8c:	mov	x20, x1
     a90:	ldr	x1, [x0, #8]
     a94:	cmn	x1, #0x1
     a98:	b.eq	ae0 <grub_macho_parse32+0x60>  // b.none
     a9c:	mov	x19, x0
     aa0:	ldr	x0, [x0]
     aa4:	bl	0 <grub_file_seek>
     aa8:	cmn	x0, #0x1
     aac:	b.eq	ac8 <grub_macho_parse32+0x48>  // b.none
     ab0:	ldr	x0, [x19]
     ab4:	add	x1, sp, #0x20
     ab8:	mov	x2, #0x1c                  	// #28
     abc:	bl	0 <grub_file_read>
     ac0:	cmp	x0, #0x1c
     ac4:	b.eq	b04 <grub_macho_parse32+0x84>  // b.none
     ac8:	adrp	x0, 0 <grub_macho_close>
     acc:	ldr	x0, [x0]
     ad0:	ldr	w0, [x0]
     ad4:	cbz	w0, aec <grub_macho_parse32+0x6c>
     ad8:	mov	x0, #0xffffffffffffffff    	// #-1
     adc:	str	x0, [x19, #8]
     ae0:	ldp	x19, x20, [sp, #16]
     ae4:	ldp	x29, x30, [sp], #64
     ae8:	ret
     aec:	adrp	x1, 0 <grub_macho_close>
     af0:	mov	x2, x20
     af4:	mov	w0, #0x15                  	// #21
     af8:	ldr	x1, [x1]
     afc:	bl	0 <grub_error>
     b00:	b	ad8 <grub_macho_parse32+0x58>
     b04:	adrp	x1, 0 <grub_macho_close>
     b08:	add	x0, sp, #0x20
     b0c:	mov	x2, #0x8                   	// #8
     b10:	ldr	x1, [x1]
     b14:	bl	0 <grub_memcmp>
     b18:	cbnz	w0, b44 <grub_macho_parse32+0xc4>
     b1c:	ldp	w0, w1, [sp, #44]
     b20:	rev	w2, w0
     b24:	rev	w1, w1
     b28:	stp	x1, x2, [x19, #64]
     b2c:	rev	w0, w0
     b30:	cmp	w0, #0x1b
     b34:	b.ls	bb4 <grub_macho_parse32+0x134>  // b.plast
     b38:	mov	w0, #0x1                   	// #1
     b3c:	str	w0, [x19, #56]
     b40:	b	ae0 <grub_macho_parse32+0x60>
     b44:	ldr	w1, [sp, #32]
     b48:	mov	w0, #0xface                	// #64206
     b4c:	movk	w0, #0xfeed, lsl #16
     b50:	cmp	w1, w0
     b54:	b.ne	ba0 <grub_macho_parse32+0x120>  // b.any
     b58:	ldp	w1, w0, [sp, #48]
     b5c:	str	w1, [x19, #24]
     b60:	str	x0, [x19, #32]
     b64:	bl	0 <grub_malloc>
     b68:	str	x0, [x19, #40]
     b6c:	cbz	x0, ae0 <grub_macho_parse32+0x60>
     b70:	ldp	x0, x1, [x19]
     b74:	add	x1, x1, #0x1c
     b78:	bl	0 <grub_file_seek>
     b7c:	cmn	x0, #0x1
     b80:	b.eq	ac8 <grub_macho_parse32+0x48>  // b.none
     b84:	ldp	x2, x1, [x19, #32]
     b88:	ldr	x0, [x19]
     b8c:	bl	0 <grub_file_read>
     b90:	ldr	x1, [x19, #32]
     b94:	cmp	x0, x1
     b98:	b.ne	ac8 <grub_macho_parse32+0x48>  // b.any
     b9c:	b	ae0 <grub_macho_parse32+0x60>
     ba0:	adrp	x1, 0 <grub_macho_close>
     ba4:	mov	w0, #0x15                  	// #21
     ba8:	ldr	x1, [x1]
     bac:	bl	0 <grub_error>
     bb0:	b	ad8 <grub_macho_parse32+0x58>
     bb4:	adrp	x1, 0 <grub_macho_close>
     bb8:	mov	x2, x20
     bbc:	mov	w0, #0x15                  	// #21
     bc0:	ldr	x1, [x1]
     bc4:	bl	0 <grub_error>
     bc8:	mov	x0, #0xffffffffffffffff    	// #-1
     bcc:	str	x0, [x19, #8]
     bd0:	b	ae0 <grub_macho_parse32+0x60>
     bd4:	nop
	...

0000000000000bf8 <grub_macho_filesize32>:
     bf8:	ldr	x1, [x0, #8]
     bfc:	cmn	x1, #0x1
     c00:	b.eq	c10 <grub_macho_filesize32+0x18>  // b.none
     c04:	ldr	x0, [x0, #16]
     c08:	sub	x0, x0, x1
     c0c:	ret
     c10:	mov	x0, #0x0                   	// #0
     c14:	ret

0000000000000c18 <grub_macho_readfile32>:
     c18:	stp	x29, x30, [sp, #-48]!
     c1c:	mov	x29, sp
     c20:	str	x21, [sp, #32]
     c24:	mov	x21, x1
     c28:	ldr	x1, [x0, #8]
     c2c:	cmn	x1, #0x1
     c30:	b.eq	cb8 <grub_macho_readfile32+0xa0>  // b.none
     c34:	stp	x19, x20, [sp, #16]
     c38:	mov	x19, x0
     c3c:	mov	x20, x2
     c40:	ldr	x0, [x0]
     c44:	bl	0 <grub_file_seek>
     c48:	cmn	x0, #0x1
     c4c:	b.eq	c9c <grub_macho_readfile32+0x84>  // b.none
     c50:	ldp	x0, x2, [x19]
     c54:	mov	x1, x20
     c58:	ldr	x3, [x19, #16]
     c5c:	sub	x2, x3, x2
     c60:	bl	0 <grub_file_read>
     c64:	ldp	x3, x2, [x19, #8]
     c68:	mov	x1, x0
     c6c:	mov	w0, #0x0                   	// #0
     c70:	sub	x2, x2, x3
     c74:	cmp	x2, x1
     c78:	b.eq	c8c <grub_macho_readfile32+0x74>  // b.none
     c7c:	adrp	x0, 0 <grub_macho_close>
     c80:	ldr	x19, [x0]
     c84:	ldr	w0, [x19]
     c88:	cbz	w0, cd0 <grub_macho_readfile32+0xb8>
     c8c:	ldp	x19, x20, [sp, #16]
     c90:	ldr	x21, [sp, #32]
     c94:	ldp	x29, x30, [sp], #48
     c98:	ret
     c9c:	adrp	x0, 0 <grub_macho_close>
     ca0:	ldp	x19, x20, [sp, #16]
     ca4:	ldr	x0, [x0]
     ca8:	ldr	x21, [sp, #32]
     cac:	ldr	w0, [x0]
     cb0:	ldp	x29, x30, [sp], #48
     cb4:	ret
     cb8:	adrp	x1, 0 <grub_macho_close>
     cbc:	mov	w0, #0x15                  	// #21
     cc0:	ldr	x21, [sp, #32]
     cc4:	ldp	x29, x30, [sp], #48
     cc8:	ldr	x1, [x1]
     ccc:	b	0 <grub_error>
     cd0:	adrp	x1, 0 <grub_macho_close>
     cd4:	mov	x2, x21
     cd8:	mov	w0, #0x15                  	// #21
     cdc:	ldr	x1, [x1]
     ce0:	bl	0 <grub_error>
     ce4:	ldr	w0, [x19]
     ce8:	b	c8c <grub_macho_readfile32+0x74>
     cec:	nop
	...

0000000000000d08 <grub_macho_size32>:
     d08:	stp	x29, x30, [sp, #-64]!
     d0c:	mov	w5, w3
     d10:	mov	x3, x4
     d14:	mov	x29, sp
     d18:	stp	x19, x20, [sp, #16]
     d1c:	mov	x19, x1
     d20:	adrp	x1, 0 <grub_macho_close>
     d24:	mov	x20, x2
     d28:	mov	w2, #0xffffffff            	// #-1
     d2c:	ldr	x1, [x1]
     d30:	str	w2, [x19]
     d34:	str	wzr, [x20]
     d38:	add	x2, sp, #0x28
     d3c:	stp	w5, wzr, [sp, #40]
     d40:	stp	x19, x20, [sp, #48]
     d44:	bl	5b8 <grub_macho_open+0xa0>
     d48:	ldr	w0, [sp, #44]
     d4c:	cbz	w0, d70 <grub_macho_size32+0x68>
     d50:	ldr	w1, [x19]
     d54:	mov	w0, #0x0                   	// #0
     d58:	ldr	w2, [x20]
     d5c:	cmp	w2, w1
     d60:	b.cc	d8c <grub_macho_size32+0x84>  // b.lo, b.ul, b.last
     d64:	ldp	x19, x20, [sp, #16]
     d68:	ldp	x29, x30, [sp], #64
     d6c:	ret
     d70:	adrp	x1, 0 <grub_macho_close>
     d74:	mov	w0, #0x15                  	// #21
     d78:	ldr	x1, [x1]
     d7c:	bl	0 <grub_error>
     d80:	ldp	x19, x20, [sp, #16]
     d84:	ldp	x29, x30, [sp], #64
     d88:	ret
     d8c:	adrp	x1, 0 <grub_macho_close>
     d90:	mov	w0, #0x15                  	// #21
     d94:	ldr	x1, [x1]
     d98:	bl	0 <grub_error>
     d9c:	ldp	x19, x20, [sp, #16]
     da0:	ldp	x29, x30, [sp], #64
     da4:	ret
	...

0000000000000dc0 <grub_macho_load32>:
     dc0:	stp	x29, x30, [sp, #-48]!
     dc4:	mov	x29, sp
     dc8:	str	w3, [sp, #16]
     dcc:	stp	x2, x1, [sp, #24]
     dd0:	str	x4, [sp, #40]
     dd4:	cbz	x4, ddc <grub_macho_load32+0x1c>
     dd8:	str	wzr, [x4]
     ddc:	adrp	x4, 0 <grub_macho_close>
     de0:	mov	x3, x1
     de4:	add	x2, sp, #0x10
     de8:	ldr	x1, [x4]
     dec:	bl	5b8 <grub_macho_open+0xa0>
     df0:	adrp	x0, 0 <grub_macho_close>
     df4:	ldr	x0, [x0]
     df8:	ldr	w0, [x0]
     dfc:	ldp	x29, x30, [sp], #48
     e00:	ret
     e04:	nop
	...

0000000000000e18 <grub_macho_get_entry_point32>:
     e18:	stp	x29, x30, [sp, #-32]!
     e1c:	adrp	x4, 0 <grub_macho_close>
     e20:	mov	x3, x1
     e24:	mov	x29, sp
     e28:	ldr	x1, [x4]
     e2c:	add	x2, sp, #0x1c
     e30:	str	wzr, [sp, #28]
     e34:	bl	5b8 <grub_macho_open+0xa0>
     e38:	ldr	w0, [sp, #28]
     e3c:	ldp	x29, x30, [sp], #32
     e40:	ret
     e44:	nop
	...
     e50:	ldr	w0, [x1]
     e54:	cmp	w0, #0x5
     e58:	b.ne	e64 <grub_macho_get_entry_point32+0x4c>  // b.any
     e5c:	ldr	x0, [x1, #144]
     e60:	str	x0, [x2]
     e64:	mov	w0, #0x0                   	// #0
     e68:	ret
     e6c:	nop
     e70:	stp	x29, x30, [sp, #-64]!
     e74:	mov	x29, sp
     e78:	stp	x21, x22, [sp, #32]
     e7c:	mov	x21, x0
     e80:	ldr	w0, [x0, #128]
     e84:	stp	x19, x20, [sp, #16]
     e88:	mov	x22, x1
     e8c:	str	x23, [sp, #48]
     e90:	mov	x23, x2
     e94:	cbz	w0, ea0 <grub_macho_get_entry_point32+0x88>
     e98:	ldr	x0, [x21, #120]
     e9c:	cbz	x0, f08 <grub_macho_get_entry_point32+0xf0>
     ea0:	ldr	x19, [x21, #112]
     ea4:	cbz	x19, f94 <grub_macho_get_entry_point32+0x17c>
     ea8:	ldr	w0, [x21, #96]
     eac:	cmp	w0, #0x0
     eb0:	mov	w20, #0x0                   	// #0
     eb4:	b.gt	ed0 <grub_macho_get_entry_point32+0xb8>
     eb8:	b	ee8 <grub_macho_get_entry_point32+0xd0>
     ebc:	ldr	w3, [x19, #4]
     ec0:	ldr	w0, [x21, #96]
     ec4:	add	x19, x19, x3
     ec8:	cmp	w0, w20
     ecc:	b.le	ee8 <grub_macho_get_entry_point32+0xd0>
     ed0:	add	w20, w20, #0x1
     ed4:	mov	x2, x23
     ed8:	mov	x1, x19
     edc:	mov	x0, x21
     ee0:	blr	x22
     ee4:	cbz	w0, ebc <grub_macho_get_entry_point32+0xa4>
     ee8:	adrp	x0, 0 <grub_macho_close>
     eec:	ldr	x0, [x0]
     ef0:	ldr	w0, [x0]
     ef4:	ldp	x19, x20, [sp, #16]
     ef8:	ldp	x21, x22, [sp, #32]
     efc:	ldr	x23, [sp, #48]
     f00:	ldp	x29, x30, [sp], #64
     f04:	ret
     f08:	ldr	x0, [x21, #144]
     f0c:	mov	x20, x3
     f10:	bl	0 <grub_malloc>
     f14:	str	x0, [x21, #120]
     f18:	cbz	x0, ee8 <grub_macho_get_entry_point32+0xd0>
     f1c:	ldr	x0, [x21, #136]
     f20:	bl	0 <grub_malloc>
     f24:	mov	x19, x0
     f28:	cbz	x0, fb4 <grub_macho_get_entry_point32+0x19c>
     f2c:	ldr	x0, [x21]
     f30:	ldr	x1, [x21, #80]
     f34:	add	x1, x1, #0x180
     f38:	bl	0 <grub_file_seek>
     f3c:	cmn	x0, #0x1
     f40:	b.eq	f60 <grub_macho_get_entry_point32+0x148>  // b.none
     f44:	ldr	x0, [x21]
     f48:	mov	x1, x19
     f4c:	ldr	x2, [x21, #136]
     f50:	bl	0 <grub_file_read>
     f54:	ldr	x1, [x21, #136]
     f58:	cmp	x0, x1
     f5c:	b.eq	fe8 <grub_macho_get_entry_point32+0x1d0>  // b.none
     f60:	adrp	x0, 0 <grub_macho_close>
     f64:	ldr	x22, [x0]
     f68:	ldr	w0, [x22]
     f6c:	cbz	w0, fd0 <grub_macho_get_entry_point32+0x1b8>
     f70:	mov	x0, x19
     f74:	bl	0 <grub_free>
     f78:	ldr	x0, [x21, #120]
     f7c:	bl	0 <grub_free>
     f80:	str	xzr, [x21, #120]
     f84:	mov	x0, #0xffffffffffffffff    	// #-1
     f88:	str	x0, [x21, #80]
     f8c:	ldr	w0, [x22]
     f90:	b	ef4 <grub_macho_get_entry_point32+0xdc>
     f94:	adrp	x1, 0 <grub_macho_close>
     f98:	mov	w0, #0x15                  	// #21
     f9c:	ldp	x19, x20, [sp, #16]
     fa0:	ldp	x21, x22, [sp, #32]
     fa4:	ldr	x23, [sp, #48]
     fa8:	ldp	x29, x30, [sp], #64
     fac:	ldr	x1, [x1]
     fb0:	b	0 <grub_error>
     fb4:	ldr	x0, [x21, #120]
     fb8:	bl	0 <grub_free>
     fbc:	str	xzr, [x21, #120]
     fc0:	adrp	x0, 0 <grub_macho_close>
     fc4:	ldr	x0, [x0]
     fc8:	ldr	w0, [x0]
     fcc:	b	ef4 <grub_macho_get_entry_point32+0xdc>
     fd0:	adrp	x1, 0 <grub_macho_close>
     fd4:	mov	x2, x20
     fd8:	mov	w0, #0x15                  	// #21
     fdc:	ldr	x1, [x1]
     fe0:	bl	0 <grub_error>
     fe4:	b	f70 <grub_macho_get_entry_point32+0x158>
     fe8:	ldr	x4, [x21, #144]
     fec:	add	x3, x19, x0
     ff0:	ldr	x1, [x21, #120]
     ff4:	mov	x2, x19
     ff8:	mov	x0, x1
     ffc:	add	x1, x1, x4
    1000:	bl	1708 <grub_decompress_lzss>
    1004:	ldr	x1, [x21, #144]
    1008:	cmp	x0, x1
    100c:	b.ne	f60 <grub_macho_get_entry_point32+0x148>  // b.any
    1010:	mov	x0, x19
    1014:	bl	0 <grub_free>
    1018:	ldr	x0, [x21, #120]
    101c:	ldr	x2, [x21, #144]
    1020:	add	x19, x0, #0x20
    1024:	ldr	w1, [x0, #20]
    1028:	ldr	w0, [x0, #16]
    102c:	str	w0, [x21, #96]
    1030:	add	x3, x1, #0x20
    1034:	stp	x1, x19, [x21, #104]
    1038:	cmp	x3, x2
    103c:	b.cc	eac <grub_macho_get_entry_point32+0x94>  // b.lo, b.ul, b.last
    1040:	adrp	x1, 0 <grub_macho_close>
    1044:	mov	x2, x20
    1048:	mov	w0, #0x15                  	// #21
    104c:	ldr	x1, [x1]
    1050:	bl	0 <grub_error>
    1054:	ldr	x0, [x21, #120]
    1058:	bl	0 <grub_free>
    105c:	str	xzr, [x21, #120]
    1060:	adrp	x0, 0 <grub_macho_close>
    1064:	mov	x1, #0xffffffffffffffff    	// #-1
    1068:	str	x1, [x21, #80]
    106c:	ldr	x0, [x0]
    1070:	ldr	w0, [x0]
    1074:	b	ef4 <grub_macho_get_entry_point32+0xdc>
	...
    1090:	ldr	w0, [x1]
    1094:	cmp	w0, #0x19
    1098:	b.ne	10f4 <grub_macho_get_entry_point32+0x2dc>  // b.any
    109c:	ldr	x0, [x1, #32]
    10a0:	cbz	x0, 10f4 <grub_macho_get_entry_point32+0x2dc>
    10a4:	ldr	x3, [x1, #48]
    10a8:	cbnz	x3, 10b4 <grub_macho_get_entry_point32+0x29c>
    10ac:	ldr	w3, [x2]
    10b0:	tbnz	w3, #0, 10f4 <grub_macho_get_entry_point32+0x2dc>
    10b4:	ldr	x5, [x2, #8]
    10b8:	ldr	w4, [x2, #4]
    10bc:	ldr	x3, [x1, #24]
    10c0:	add	w4, w4, #0x1
    10c4:	ldr	x6, [x5]
    10c8:	str	w4, [x2, #4]
    10cc:	cmp	x3, x6
    10d0:	b.cs	10dc <grub_macho_get_entry_point32+0x2c4>  // b.hs, b.nlast
    10d4:	str	x3, [x5]
    10d8:	ldp	x3, x0, [x1, #24]
    10dc:	add	x0, x0, x3
    10e0:	ldr	x1, [x2, #16]
    10e4:	ldr	x2, [x1]
    10e8:	cmp	x0, x2
    10ec:	b.ls	10f4 <grub_macho_get_entry_point32+0x2dc>  // b.plast
    10f0:	str	x0, [x1]
    10f4:	mov	w0, #0x0                   	// #0
    10f8:	ret
    10fc:	nop
    1100:	stp	x29, x30, [sp, #-64]!
    1104:	mov	x29, sp
    1108:	stp	x19, x20, [sp, #16]
    110c:	mov	x20, x0
    1110:	ldr	w0, [x1]
    1114:	cmp	w0, #0x19
    1118:	b.ne	117c <grub_macho_get_entry_point32+0x364>  // b.any
    111c:	ldr	x3, [x1, #48]
    1120:	stp	x21, x22, [sp, #32]
    1124:	mov	x19, x1
    1128:	mov	x22, x2
    112c:	cbnz	x3, 1170 <grub_macho_get_entry_point32+0x358>
    1130:	ldr	w0, [x2]
    1134:	tbnz	w0, #0, 1178 <grub_macho_get_entry_point32+0x360>
    1138:	ldr	x2, [x1, #32]
    113c:	cbz	x2, 1178 <grub_macho_get_entry_point32+0x360>
    1140:	cmp	x3, x2
    1144:	b.cs	1178 <grub_macho_get_entry_point32+0x360>  // b.hs, b.nlast
    1148:	ldr	x0, [x22, #8]
    114c:	ldr	x1, [x19, #24]
    1150:	add	x1, x1, x3
    1154:	add	x0, x0, x1
    1158:	sub	x2, x2, x3
    115c:	mov	w1, #0x0                   	// #0
    1160:	bl	0 <grub_memset>
    1164:	mov	w0, #0x0                   	// #0
    1168:	ldp	x21, x22, [sp, #32]
    116c:	b	1180 <grub_macho_get_entry_point32+0x368>
    1170:	ldr	x21, [x1, #32]
    1174:	cbnz	x21, 118c <grub_macho_get_entry_point32+0x374>
    1178:	ldp	x21, x22, [sp, #32]
    117c:	mov	w0, #0x0                   	// #0
    1180:	ldp	x19, x20, [sp, #16]
    1184:	ldp	x29, x30, [sp], #64
    1188:	ret
    118c:	ldr	x4, [x20, #120]
    1190:	cmp	x3, x21
    1194:	csel	x21, x3, x21, ls  // ls = plast
    1198:	ldr	x1, [x19, #40]
    119c:	cbz	x4, 12c4 <grub_macho_get_entry_point32+0x4ac>
    11a0:	ldr	x3, [x20, #144]
    11a4:	add	x2, x21, x1
    11a8:	mov	x0, #0xffffffffffffffff    	// #-1
    11ac:	cmp	x2, x3
    11b0:	b.ls	11d8 <grub_macho_get_entry_point32+0x3c0>  // b.plast
    11b4:	cmp	x21, x0
    11b8:	b.eq	11f0 <grub_macho_get_entry_point32+0x3d8>  // b.none
    11bc:	adrp	x0, 0 <grub_macho_close>
    11c0:	ldr	x0, [x0]
    11c4:	ldr	w0, [x0]
    11c8:	cbz	w0, 12ac <grub_macho_get_entry_point32+0x494>
    11cc:	mov	w0, #0x1                   	// #1
    11d0:	ldp	x21, x22, [sp, #32]
    11d4:	b	1180 <grub_macho_get_entry_point32+0x368>
    11d8:	ldr	x3, [x22, #8]
    11dc:	mov	x2, x21
    11e0:	ldr	x0, [x19, #24]
    11e4:	add	x1, x4, x1
    11e8:	add	x0, x3, x0
    11ec:	bl	0 <grub_memmove>
    11f0:	ldr	x0, [x22, #24]
    11f4:	ldr	x2, [x19, #32]
    11f8:	ldr	x3, [x19, #48]
    11fc:	cbz	x0, 1140 <grub_macho_get_entry_point32+0x328>
    1200:	ldr	x0, [x22, #8]
    1204:	cmp	x2, x3
    1208:	ldr	x1, [x19, #24]
    120c:	add	x20, x0, x1
    1210:	b.ls	12f8 <grub_macho_get_entry_point32+0x4e0>  // b.plast
    1214:	sub	x21, x3, #0x16
    1218:	add	x21, x20, x21
    121c:	cmp	x20, x21
    1220:	b.cs	1150 <grub_macho_get_entry_point32+0x338>  // b.hs, b.nlast
    1224:	adrp	x0, 0 <grub_macho_close>
    1228:	str	x23, [sp, #48]
    122c:	ldr	x23, [x0]
    1230:	b	1240 <grub_macho_get_entry_point32+0x428>
    1234:	add	x20, x20, #0x1
    1238:	cmp	x20, x21
    123c:	b.cs	1310 <grub_macho_get_entry_point32+0x4f8>  // b.hs, b.nlast
    1240:	mov	x1, x23
    1244:	mov	x0, x20
    1248:	mov	x2, #0x16                  	// #22
    124c:	bl	0 <grub_memcmp>
    1250:	cbnz	w0, 1234 <grub_macho_get_entry_point32+0x41c>
    1254:	ldr	x4, [x22, #24]
    1258:	add	x20, x20, #0x16
    125c:	ldr	x2, [x19, #32]
    1260:	add	x21, x21, #0x16
    1264:	ldr	x3, [x19, #48]
    1268:	str	wzr, [x4]
    126c:	cmp	x20, x21
    1270:	b.cc	1290 <grub_macho_get_entry_point32+0x478>  // b.lo, b.ul, b.last
    1274:	b	12a4 <grub_macho_get_entry_point32+0x48c>
    1278:	ldr	w0, [x4]
    127c:	cmp	x21, x20
    1280:	add	w0, w0, w0, lsl #2
    1284:	add	w0, w1, w0, lsl #1
    1288:	str	w0, [x4]
    128c:	b.eq	12a4 <grub_macho_get_entry_point32+0x48c>  // b.none
    1290:	ldrb	w0, [x20]
    1294:	add	x20, x20, #0x1
    1298:	sub	w1, w0, #0x30
    129c:	cmp	w1, #0x9
    12a0:	b.ls	1278 <grub_macho_get_entry_point32+0x460>  // b.plast
    12a4:	ldr	x23, [sp, #48]
    12a8:	b	1140 <grub_macho_get_entry_point32+0x328>
    12ac:	adrp	x1, 0 <grub_macho_close>
    12b0:	mov	w0, #0x15                  	// #21
    12b4:	ldr	x2, [x22, #16]
    12b8:	ldr	x1, [x1]
    12bc:	bl	0 <grub_error>
    12c0:	b	11cc <grub_macho_get_entry_point32+0x3b4>
    12c4:	ldr	x0, [x20]
    12c8:	ldr	x2, [x20, #80]
    12cc:	add	x1, x1, x2
    12d0:	bl	0 <grub_file_seek>
    12d4:	cmn	x0, #0x1
    12d8:	b.eq	11cc <grub_macho_get_entry_point32+0x3b4>  // b.none
    12dc:	ldr	x0, [x20]
    12e0:	mov	x2, x21
    12e4:	ldr	x3, [x22, #8]
    12e8:	ldr	x1, [x19, #24]
    12ec:	add	x1, x3, x1
    12f0:	bl	0 <grub_file_read>
    12f4:	b	11b4 <grub_macho_get_entry_point32+0x39c>
    12f8:	sub	x2, x2, #0x16
    12fc:	add	x21, x20, x2
    1300:	cmp	x20, x21
    1304:	b.cc	1224 <grub_macho_get_entry_point32+0x40c>  // b.lo, b.ul, b.last
    1308:	ldp	x21, x22, [sp, #32]
    130c:	b	117c <grub_macho_get_entry_point32+0x364>
    1310:	ldr	x2, [x19, #32]
    1314:	ldr	x3, [x19, #48]
    1318:	ldr	x23, [sp, #48]
    131c:	b	1140 <grub_macho_get_entry_point32+0x328>
	...

0000000000001338 <grub_macho_parse64>:
    1338:	stp	x29, x30, [sp, #-64]!
    133c:	mov	x29, sp
    1340:	stp	x19, x20, [sp, #16]
    1344:	mov	x20, x1
    1348:	ldr	x1, [x0, #80]
    134c:	cmn	x1, #0x1
    1350:	b.eq	1398 <grub_macho_parse64+0x60>  // b.none
    1354:	mov	x19, x0
    1358:	ldr	x0, [x0]
    135c:	bl	0 <grub_file_seek>
    1360:	cmn	x0, #0x1
    1364:	b.eq	1380 <grub_macho_parse64+0x48>  // b.none
    1368:	ldr	x0, [x19]
    136c:	add	x1, sp, #0x20
    1370:	mov	x2, #0x20                  	// #32
    1374:	bl	0 <grub_file_read>
    1378:	cmp	x0, #0x20
    137c:	b.eq	13bc <grub_macho_parse64+0x84>  // b.none
    1380:	adrp	x0, 0 <grub_macho_close>
    1384:	ldr	x0, [x0]
    1388:	ldr	w0, [x0]
    138c:	cbz	w0, 13a4 <grub_macho_parse64+0x6c>
    1390:	mov	x0, #0xffffffffffffffff    	// #-1
    1394:	str	x0, [x19, #80]
    1398:	ldp	x19, x20, [sp, #16]
    139c:	ldp	x29, x30, [sp], #64
    13a0:	ret
    13a4:	adrp	x1, 0 <grub_macho_close>
    13a8:	mov	x2, x20
    13ac:	mov	w0, #0x15                  	// #21
    13b0:	ldr	x1, [x1]
    13b4:	bl	0 <grub_error>
    13b8:	b	1390 <grub_macho_parse64+0x58>
    13bc:	adrp	x1, 0 <grub_macho_close>
    13c0:	add	x0, sp, #0x20
    13c4:	mov	x2, #0x8                   	// #8
    13c8:	ldr	x1, [x1]
    13cc:	bl	0 <grub_memcmp>
    13d0:	cbnz	w0, 13fc <grub_macho_parse64+0xc4>
    13d4:	ldp	w0, w1, [sp, #44]
    13d8:	rev	w2, w0
    13dc:	rev	w1, w1
    13e0:	stp	x1, x2, [x19, #136]
    13e4:	rev	w0, w0
    13e8:	cmp	w0, #0x1f
    13ec:	b.ls	1470 <grub_macho_parse64+0x138>  // b.plast
    13f0:	mov	w0, #0x1                   	// #1
    13f4:	str	w0, [x19, #128]
    13f8:	b	1398 <grub_macho_parse64+0x60>
    13fc:	ldr	w1, [sp, #32]
    1400:	mov	w0, #0xfacf                	// #64207
    1404:	movk	w0, #0xfeed, lsl #16
    1408:	cmp	w1, w0
    140c:	b.ne	145c <grub_macho_parse64+0x124>  // b.any
    1410:	ldp	w1, w0, [sp, #48]
    1414:	str	w1, [x19, #96]
    1418:	str	x0, [x19, #104]
    141c:	bl	0 <grub_malloc>
    1420:	str	x0, [x19, #112]
    1424:	cbz	x0, 1398 <grub_macho_parse64+0x60>
    1428:	ldr	x0, [x19]
    142c:	ldr	x1, [x19, #80]
    1430:	add	x1, x1, #0x20
    1434:	bl	0 <grub_file_seek>
    1438:	cmn	x0, #0x1
    143c:	b.eq	1380 <grub_macho_parse64+0x48>  // b.none
    1440:	ldp	x2, x1, [x19, #104]
    1444:	ldr	x0, [x19]
    1448:	bl	0 <grub_file_read>
    144c:	ldr	x1, [x19, #104]
    1450:	cmp	x0, x1
    1454:	b.ne	1380 <grub_macho_parse64+0x48>  // b.any
    1458:	b	1398 <grub_macho_parse64+0x60>
    145c:	adrp	x1, 0 <grub_macho_close>
    1460:	mov	w0, #0x15                  	// #21
    1464:	ldr	x1, [x1]
    1468:	bl	0 <grub_error>
    146c:	b	1390 <grub_macho_parse64+0x58>
    1470:	adrp	x1, 0 <grub_macho_close>
    1474:	mov	x2, x20
    1478:	mov	w0, #0x15                  	// #21
    147c:	ldr	x1, [x1]
    1480:	bl	0 <grub_error>
    1484:	mov	x0, #0xffffffffffffffff    	// #-1
    1488:	str	x0, [x19, #80]
    148c:	b	1398 <grub_macho_parse64+0x60>
	...

00000000000014b0 <grub_macho_filesize64>:
    14b0:	ldr	x1, [x0, #80]
    14b4:	cmn	x1, #0x1
    14b8:	b.eq	14c8 <grub_macho_filesize64+0x18>  // b.none
    14bc:	ldr	x0, [x0, #88]
    14c0:	sub	x0, x0, x1
    14c4:	ret
    14c8:	mov	x0, #0x0                   	// #0
    14cc:	ret

00000000000014d0 <grub_macho_readfile64>:
    14d0:	stp	x29, x30, [sp, #-48]!
    14d4:	mov	x29, sp
    14d8:	str	x21, [sp, #32]
    14dc:	mov	x21, x1
    14e0:	ldr	x1, [x0, #80]
    14e4:	cmn	x1, #0x1
    14e8:	b.eq	1570 <grub_macho_readfile64+0xa0>  // b.none
    14ec:	stp	x19, x20, [sp, #16]
    14f0:	mov	x19, x0
    14f4:	mov	x20, x2
    14f8:	ldr	x0, [x0]
    14fc:	bl	0 <grub_file_seek>
    1500:	cmn	x0, #0x1
    1504:	b.eq	1554 <grub_macho_readfile64+0x84>  // b.none
    1508:	ldp	x2, x3, [x19, #80]
    150c:	mov	x1, x20
    1510:	ldr	x0, [x19]
    1514:	sub	x2, x3, x2
    1518:	bl	0 <grub_file_read>
    151c:	ldp	x3, x2, [x19, #80]
    1520:	mov	x1, x0
    1524:	mov	w0, #0x0                   	// #0
    1528:	sub	x2, x2, x3
    152c:	cmp	x2, x1
    1530:	b.eq	1544 <grub_macho_readfile64+0x74>  // b.none
    1534:	adrp	x0, 0 <grub_macho_close>
    1538:	ldr	x19, [x0]
    153c:	ldr	w0, [x19]
    1540:	cbz	w0, 1588 <grub_macho_readfile64+0xb8>
    1544:	ldp	x19, x20, [sp, #16]
    1548:	ldr	x21, [sp, #32]
    154c:	ldp	x29, x30, [sp], #48
    1550:	ret
    1554:	adrp	x0, 0 <grub_macho_close>
    1558:	ldp	x19, x20, [sp, #16]
    155c:	ldr	x0, [x0]
    1560:	ldr	x21, [sp, #32]
    1564:	ldr	w0, [x0]
    1568:	ldp	x29, x30, [sp], #48
    156c:	ret
    1570:	adrp	x1, 0 <grub_macho_close>
    1574:	mov	w0, #0x15                  	// #21
    1578:	ldr	x21, [sp, #32]
    157c:	ldp	x29, x30, [sp], #48
    1580:	ldr	x1, [x1]
    1584:	b	0 <grub_error>
    1588:	adrp	x1, 0 <grub_macho_close>
    158c:	mov	x2, x21
    1590:	mov	w0, #0x15                  	// #21
    1594:	ldr	x1, [x1]
    1598:	bl	0 <grub_error>
    159c:	ldr	w0, [x19]
    15a0:	b	1544 <grub_macho_readfile64+0x74>
    15a4:	nop
	...

00000000000015c0 <grub_macho_size64>:
    15c0:	stp	x29, x30, [sp, #-64]!
    15c4:	mov	w5, w3
    15c8:	mov	x3, x4
    15cc:	mov	x29, sp
    15d0:	stp	x19, x20, [sp, #16]
    15d4:	mov	x19, x1
    15d8:	adrp	x1, 0 <grub_macho_close>
    15dc:	mov	x20, x2
    15e0:	mov	x2, #0xffffffffffffffff    	// #-1
    15e4:	ldr	x1, [x1]
    15e8:	str	x2, [x19]
    15ec:	str	xzr, [x20]
    15f0:	add	x2, sp, #0x28
    15f4:	stp	w5, wzr, [sp, #40]
    15f8:	stp	x19, x20, [sp, #48]
    15fc:	bl	e70 <grub_macho_get_entry_point32+0x58>
    1600:	ldr	w0, [sp, #44]
    1604:	cbz	w0, 1628 <grub_macho_size64+0x68>
    1608:	ldr	x1, [x19]
    160c:	mov	w0, #0x0                   	// #0
    1610:	ldr	x2, [x20]
    1614:	cmp	x2, x1
    1618:	b.cc	1644 <grub_macho_size64+0x84>  // b.lo, b.ul, b.last
    161c:	ldp	x19, x20, [sp, #16]
    1620:	ldp	x29, x30, [sp], #64
    1624:	ret
    1628:	adrp	x1, 0 <grub_macho_close>
    162c:	mov	w0, #0x15                  	// #21
    1630:	ldr	x1, [x1]
    1634:	bl	0 <grub_error>
    1638:	ldp	x19, x20, [sp, #16]
    163c:	ldp	x29, x30, [sp], #64
    1640:	ret
    1644:	adrp	x1, 0 <grub_macho_close>
    1648:	mov	w0, #0x15                  	// #21
    164c:	ldr	x1, [x1]
    1650:	bl	0 <grub_error>
    1654:	ldp	x19, x20, [sp, #16]
    1658:	ldp	x29, x30, [sp], #64
    165c:	ret
	...

0000000000001678 <grub_macho_load64>:
    1678:	stp	x29, x30, [sp, #-48]!
    167c:	mov	x29, sp
    1680:	str	w3, [sp, #16]
    1684:	stp	x2, x1, [sp, #24]
    1688:	str	x4, [sp, #40]
    168c:	cbz	x4, 1694 <grub_macho_load64+0x1c>
    1690:	str	wzr, [x4]
    1694:	adrp	x4, 0 <grub_macho_close>
    1698:	mov	x3, x1
    169c:	add	x2, sp, #0x10
    16a0:	ldr	x1, [x4]
    16a4:	bl	e70 <grub_macho_get_entry_point32+0x58>
    16a8:	adrp	x0, 0 <grub_macho_close>
    16ac:	ldr	x0, [x0]
    16b0:	ldr	w0, [x0]
    16b4:	ldp	x29, x30, [sp], #48
    16b8:	ret
    16bc:	nop
	...

00000000000016d0 <grub_macho_get_entry_point64>:
    16d0:	stp	x29, x30, [sp, #-32]!
    16d4:	adrp	x4, 0 <grub_macho_close>
    16d8:	mov	x3, x1
    16dc:	mov	x29, sp
    16e0:	ldr	x1, [x4]
    16e4:	add	x2, sp, #0x18
    16e8:	str	xzr, [sp, #24]
    16ec:	bl	e70 <grub_macho_get_entry_point32+0x58>
    16f0:	ldr	x0, [sp, #24]
    16f4:	ldp	x29, x30, [sp], #32
    16f8:	ret
    16fc:	nop
	...

0000000000001708 <grub_decompress_lzss>:
    1708:	adrp	x4, 0 <grub_macho_close>
    170c:	mov	w5, #0x20                  	// #32
    1710:	ldr	x10, [x4]
    1714:	mov	x4, x10
    1718:	add	x6, x10, #0xfee
    171c:	nop
    1720:	strb	w5, [x4], #1
    1724:	cmp	x4, x6
    1728:	b.ne	1720 <grub_decompress_lzss+0x18>  // b.any
    172c:	mov	x7, x0
    1730:	mov	w8, #0x0                   	// #0
    1734:	mov	w6, #0xfee                 	// #4078
    1738:	lsr	w8, w8, #1
    173c:	tbnz	w8, #8, 1750 <grub_decompress_lzss+0x48>
    1740:	cmp	x2, x3
    1744:	b.cs	17f4 <grub_decompress_lzss+0xec>  // b.hs, b.nlast
    1748:	ldrb	w8, [x2], #1
    174c:	orr	w8, w8, #0xff00
    1750:	tbz	w8, #0, 177c <grub_decompress_lzss+0x74>
    1754:	cmp	x2, x3
    1758:	b.cs	17f4 <grub_decompress_lzss+0xec>  // b.hs, b.nlast
    175c:	ldrb	w4, [x2], #1
    1760:	cmp	x7, x1
    1764:	b.cs	176c <grub_decompress_lzss+0x64>  // b.hs, b.nlast
    1768:	strb	w4, [x7], #1
    176c:	add	w5, w6, #0x1
    1770:	strb	w4, [x10, w6, sxtw]
    1774:	and	w6, w5, #0xfff
    1778:	b	1738 <grub_decompress_lzss+0x30>
    177c:	cmp	x2, x3
    1780:	b.cs	17f4 <grub_decompress_lzss+0xec>  // b.hs, b.nlast
    1784:	mov	x4, x2
    1788:	ldrb	w9, [x4], #1
    178c:	cmp	x3, x4
    1790:	b.ls	17f4 <grub_decompress_lzss+0xec>  // b.plast
    1794:	ldrb	w4, [x2, #1]
    1798:	add	x5, x2, #0x2
    179c:	and	w12, w4, #0xf
    17a0:	lsl	w2, w4, #4
    17a4:	add	w12, w12, #0x3
    17a8:	and	w2, w2, #0xf00
    17ac:	orr	w2, w2, w9
    17b0:	add	w12, w12, w2
    17b4:	nop
    17b8:	and	w4, w2, #0xfff
    17bc:	mov	x9, x7
    17c0:	add	w11, w6, #0x1
    17c4:	cmp	x1, x7
    17c8:	add	w2, w2, #0x1
    17cc:	ldrb	w4, [x10, w4, sxtw]
    17d0:	b.ls	17dc <grub_decompress_lzss+0xd4>  // b.plast
    17d4:	strb	w4, [x9], #1
    17d8:	mov	x7, x9
    17dc:	strb	w4, [x10, w6, sxtw]
    17e0:	cmp	w2, w12
    17e4:	and	w6, w11, #0xfff
    17e8:	b.ne	17b8 <grub_decompress_lzss+0xb0>  // b.any
    17ec:	mov	x2, x5
    17f0:	b	1738 <grub_decompress_lzss+0x30>
    17f4:	sub	x0, x7, x0
    17f8:	ret
    17fc:	nop
	...
