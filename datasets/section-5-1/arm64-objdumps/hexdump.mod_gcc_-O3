
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//hexdump.mod_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_mod_init-0x260>:
   0:	sub	sp, sp, #0x850
   4:	cmp	w1, #0x1
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	b.eq	30 <grub_mod_init-0x230>  // b.none
  14:	adrp	x1, 0 <grub_mod_init-0x260>
  18:	mov	w0, #0x12                  	// #18
  1c:	ldr	x1, [x1]
  20:	bl	0 <grub_error>
  24:	ldp	x29, x30, [sp]
  28:	add	sp, sp, #0x850
  2c:	ret
  30:	stp	x21, x22, [sp, #32]
  34:	mov	x21, #0x0                   	// #0
  38:	ldr	x22, [x0, #8]
  3c:	stp	x19, x20, [sp, #16]
  40:	mov	x19, x2
  44:	ldr	x0, [x2]
  48:	stp	x23, x24, [sp, #48]
  4c:	bl	0 <grub_strlen>
  50:	mov	x23, x0
  54:	ldr	w2, [x22]
  58:	cbnz	w2, 164 <grub_mod_init-0xfc>
  5c:	ldr	w2, [x22, #16]
  60:	mov	x20, #0x100                 	// #256
  64:	cbnz	w2, 184 <grub_mod_init-0xdc>
  68:	adrp	x2, 0 <grub_mod_init-0x260>
  6c:	ldr	x0, [x19]
  70:	ldr	x1, [x2]
  74:	bl	0 <grub_strcmp>
  78:	cbz	w0, 138 <grub_mod_init-0x128>
  7c:	ldr	x0, [x19]
  80:	ldrb	w1, [x0]
  84:	cmp	w1, #0x28
  88:	b.ne	a0 <grub_mod_init-0x1c0>  // b.any
  8c:	sxtw	x1, w23
  90:	sub	x1, x1, #0x1
  94:	ldrb	w2, [x0, x1]
  98:	cmp	w2, #0x29
  9c:	b.eq	1b0 <grub_mod_init-0xb0>  // b.none
  a0:	mov	w1, #0x2c                  	// #44
  a4:	bl	0 <grub_file_open>
  a8:	mov	x23, x0
  ac:	cbz	x0, 104 <grub_mod_init-0x15c>
  b0:	add	x22, sp, #0x50
  b4:	str	x21, [x0, #24]
  b8:	mov	x1, x22
  bc:	mov	x0, x23
  c0:	mov	x2, #0x800                 	// #2048
  c4:	bl	0 <grub_file_read>
  c8:	mov	x19, x0
  cc:	mov	x1, x22
  d0:	mov	x0, x21
  d4:	cmp	x19, #0x0
  d8:	b.le	fc <grub_mod_init-0x164>
  dc:	cmp	x20, #0x0
  e0:	mov	w2, w19
  e4:	ccmp	x20, x19, #0x0, ne  // ne = any
  e8:	b.ge	120 <grub_mod_init-0x140>  // b.tcont
  ec:	mov	w2, w20
  f0:	mov	x1, x22
  f4:	mov	x0, x21
  f8:	bl	2f8 <hexdump>
  fc:	mov	x0, x23
 100:	bl	0 <grub_file_close>
 104:	mov	w0, #0x0                   	// #0
 108:	ldp	x29, x30, [sp]
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x21, x22, [sp, #32]
 114:	ldp	x23, x24, [sp, #48]
 118:	add	sp, sp, #0x850
 11c:	ret
 120:	add	x21, x21, x19
 124:	bl	2f8 <hexdump>
 128:	cbz	x20, b8 <grub_mod_init-0x1a8>
 12c:	subs	x20, x20, x19
 130:	b.ne	b8 <grub_mod_init-0x1a8>  // b.any
 134:	b	fc <grub_mod_init-0x164>
 138:	mov	w2, w20
 13c:	mov	x1, x21
 140:	mov	x0, x21
 144:	bl	2f8 <hexdump>
 148:	mov	w0, #0x0                   	// #0
 14c:	ldp	x29, x30, [sp]
 150:	ldp	x19, x20, [sp, #16]
 154:	ldp	x21, x22, [sp, #32]
 158:	ldp	x23, x24, [sp, #48]
 15c:	add	sp, sp, #0x850
 160:	ret
 164:	ldr	x0, [x22, #8]
 168:	mov	w2, #0x0                   	// #0
 16c:	mov	x1, #0x0                   	// #0
 170:	mov	x20, #0x100                 	// #256
 174:	bl	0 <grub_strtoull>
 178:	mov	x21, x0
 17c:	ldr	w2, [x22, #16]
 180:	cbz	w2, 68 <grub_mod_init-0x1f8>
 184:	ldr	x0, [x22, #24]
 188:	mov	w2, #0x0                   	// #0
 18c:	mov	x1, #0x0                   	// #0
 190:	bl	0 <grub_strtoul>
 194:	mov	x20, x0
 198:	adrp	x2, 0 <grub_mod_init-0x260>
 19c:	ldr	x0, [x19]
 1a0:	ldr	x1, [x2]
 1a4:	bl	0 <grub_strcmp>
 1a8:	cbnz	w0, 7c <grub_mod_init-0x1e4>
 1ac:	b	138 <grub_mod_init-0x128>
 1b0:	strb	wzr, [x0, x1]
 1b4:	ldr	x0, [x19]
 1b8:	add	x0, x0, #0x1
 1bc:	bl	0 <grub_disk_open>
 1c0:	mov	x24, x0
 1c4:	cbz	x0, 104 <grub_mod_init-0x15c>
 1c8:	lsr	x23, x21, #11
 1cc:	str	x25, [sp, #64]
 1d0:	and	x2, x21, #0x7ff
 1d4:	add	x22, sp, #0x50
 1d8:	lsl	x23, x23, #2
 1dc:	mov	x25, #0x800                 	// #2048
 1e0:	cbnz	x20, 200 <grub_mod_init-0x60>
 1e4:	b	230 <grub_mod_init-0x30>
 1e8:	bl	2f8 <hexdump>
 1ec:	add	x21, x21, x19
 1f0:	add	x23, x23, #0x4
 1f4:	subs	x20, x20, x19
 1f8:	mov	x2, #0x0                   	// #0
 1fc:	b.eq	230 <grub_mod_init-0x30>  // b.none
 200:	cmp	x20, #0x800
 204:	mov	x1, x23
 208:	csel	x19, x20, x25, ls  // ls = plast
 20c:	mov	x4, x22
 210:	mov	x3, x19
 214:	mov	x0, x24
 218:	bl	0 <grub_disk_read>
 21c:	mov	w3, w0
 220:	mov	w2, w19
 224:	mov	x0, x21
 228:	mov	x1, x22
 22c:	cbz	w3, 1e8 <grub_mod_init-0x78>
 230:	mov	x0, x24
 234:	bl	0 <grub_disk_close>
 238:	mov	w0, #0x0                   	// #0
 23c:	ldp	x19, x20, [sp, #16]
 240:	ldp	x21, x22, [sp, #32]
 244:	ldp	x23, x24, [sp, #48]
 248:	ldr	x25, [sp, #64]
 24c:	b	24 <grub_mod_init-0x23c>
	...

0000000000000260 <grub_mod_init>:
 260:	stp	x29, x30, [sp, #-16]!
 264:	adrp	x5, 0 <grub_mod_init-0x260>
 268:	adrp	x4, 0 <grub_mod_init-0x260>
 26c:	adrp	x3, 0 <grub_mod_init-0x260>
 270:	adrp	x1, 0 <grub_mod_init-0x260>
 274:	adrp	x0, 0 <grub_mod_init-0x260>
 278:	mov	x29, sp
 27c:	ldr	x5, [x5]
 280:	mov	w2, #0x0                   	// #0
 284:	ldr	x4, [x4]
 288:	ldr	x3, [x3]
 28c:	ldr	x1, [x1]
 290:	ldr	x0, [x0]
 294:	bl	0 <grub_register_extcmd>
 298:	adrp	x1, 0 <grub_mod_init-0x260>
 29c:	ldr	x1, [x1]
 2a0:	str	x0, [x1]
 2a4:	ldp	x29, x30, [sp], #16
 2a8:	ret
 2ac:	nop
	...

00000000000002e0 <grub_mod_fini>:
 2e0:	adrp	x0, 0 <grub_mod_init-0x260>
 2e4:	ldr	x0, [x0]
 2e8:	ldr	x0, [x0]
 2ec:	b	0 <grub_unregister_extcmd>
	...

00000000000002f8 <hexdump>:
 2f8:	cmp	w2, #0x0
 2fc:	b.le	77c <hexdump+0x484>
 300:	stp	x29, x30, [sp, #-208]!
 304:	mov	x3, x0
 308:	adrp	x0, 0 <grub_mod_init-0x260>
 30c:	mov	x29, sp
 310:	stp	x21, x22, [sp, #32]
 314:	mov	x21, x1
 318:	adrp	x1, 0 <grub_mod_init-0x260>
 31c:	stp	x25, x26, [sp, #64]
 320:	mov	w25, w2
 324:	adrp	x2, 0 <grub_mod_init-0x260>
 328:	stp	x23, x24, [sp, #48]
 32c:	mov	x22, #0x50                  	// #80
 330:	mov	w26, #0x20                  	// #32
 334:	ldr	x24, [x1]
 338:	stp	x19, x20, [sp, #16]
 33c:	add	x19, sp, #0x80
 340:	ldr	x2, [x2]
 344:	stp	x27, x28, [sp, #80]
 348:	ldr	x0, [x0]
 34c:	stp	x2, x0, [sp, #112]
 350:	add	x0, x3, #0x10
 354:	ldr	x2, [sp, #112]
 358:	mov	x1, #0x50                  	// #80
 35c:	str	x0, [sp, #104]
 360:	mov	x0, x19
 364:	bl	0 <grub_snprintf>
 368:	mov	w28, w0
 36c:	sxtw	x0, w0
 370:	ldrb	w3, [x21]
 374:	sub	x1, x22, x0
 378:	cmp	w25, #0xf
 37c:	add	x0, x19, x0
 380:	mov	x2, x24
 384:	b.gt	6b4 <hexdump+0x3bc>
 388:	bl	0 <grub_snprintf>
 38c:	mov	w20, w25
 390:	add	w28, w28, w0
 394:	cmp	w25, #0x1
 398:	b.eq	3e4 <hexdump+0xec>  // b.none
 39c:	mov	x23, #0x1                   	// #1
 3a0:	ldrb	w3, [x21, x23]
 3a4:	sxtw	x0, w28
 3a8:	sub	x1, x22, x0
 3ac:	mov	x2, x24
 3b0:	add	x0, x19, x0
 3b4:	bl	0 <grub_snprintf>
 3b8:	add	w28, w28, w0
 3bc:	and	w1, w23, #0x7
 3c0:	add	x23, x23, #0x1
 3c4:	cmp	w1, #0x7
 3c8:	b.ne	3d4 <hexdump+0xdc>  // b.any
 3cc:	strb	w26, [x19, w28, sxtw]
 3d0:	add	w28, w28, #0x1
 3d4:	cmp	w20, w23
 3d8:	b.gt	3a0 <hexdump+0xa8>
 3dc:	cmp	w20, #0x10
 3e0:	b.eq	428 <hexdump+0x130>  // b.none
 3e4:	adrp	x0, 0 <grub_mod_init-0x260>
 3e8:	mov	w27, w20
 3ec:	ldr	x23, [x0]
 3f0:	sxtw	x0, w28
 3f4:	sub	x1, x22, x0
 3f8:	mov	x2, x23
 3fc:	add	x0, x19, x0
 400:	bl	0 <grub_snprintf>
 404:	and	w1, w27, #0x7
 408:	add	w28, w28, w0
 40c:	cmp	w1, #0x7
 410:	add	w27, w27, #0x1
 414:	b.ne	420 <hexdump+0x128>  // b.any
 418:	strb	w26, [x19, w28, sxtw]
 41c:	add	w28, w28, #0x1
 420:	cmp	w27, #0x10
 424:	b.ne	3f0 <hexdump+0xf8>  // b.any
 428:	ldrb	w1, [x21]
 42c:	add	w2, w28, #0x1
 430:	mov	w0, #0x7c                  	// #124
 434:	strb	w0, [x19, w28, sxtw]
 438:	sub	w3, w1, #0x20
 43c:	mov	w0, #0x2e                  	// #46
 440:	and	w3, w3, #0xff
 444:	add	w5, w28, #0x2
 448:	cmp	w3, #0x5f
 44c:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 450:	strb	w1, [x19, w2, sxtw]
 454:	cmp	w20, #0x1
 458:	b.eq	670 <hexdump+0x378>  // b.none
 45c:	ldrb	w1, [x21, #1]
 460:	add	w6, w28, #0x3
 464:	sub	w3, w1, #0x20
 468:	and	w3, w3, #0xff
 46c:	cmp	w3, #0x5f
 470:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 474:	strb	w1, [x19, w5, sxtw]
 478:	cmp	w20, #0x2
 47c:	b.eq	670 <hexdump+0x378>  // b.none
 480:	ldrb	w1, [x21, #2]
 484:	add	w5, w28, #0x4
 488:	sub	w3, w1, #0x20
 48c:	and	w3, w3, #0xff
 490:	cmp	w3, #0x5f
 494:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 498:	strb	w1, [x19, w6, sxtw]
 49c:	cmp	w20, #0x3
 4a0:	b.eq	670 <hexdump+0x378>  // b.none
 4a4:	ldrb	w1, [x21, #3]
 4a8:	add	w6, w28, #0x5
 4ac:	sub	w3, w1, #0x20
 4b0:	and	w3, w3, #0xff
 4b4:	cmp	w3, #0x5f
 4b8:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 4bc:	strb	w1, [x19, w5, sxtw]
 4c0:	cmp	w20, #0x4
 4c4:	b.eq	670 <hexdump+0x378>  // b.none
 4c8:	ldrb	w1, [x21, #4]
 4cc:	add	w5, w28, #0x6
 4d0:	sub	w3, w1, #0x20
 4d4:	and	w3, w3, #0xff
 4d8:	cmp	w3, #0x5f
 4dc:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 4e0:	strb	w1, [x19, w6, sxtw]
 4e4:	cmp	w20, #0x5
 4e8:	b.eq	670 <hexdump+0x378>  // b.none
 4ec:	ldrb	w1, [x21, #5]
 4f0:	add	w6, w28, #0x7
 4f4:	sub	w3, w1, #0x20
 4f8:	and	w3, w3, #0xff
 4fc:	cmp	w3, #0x5f
 500:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 504:	strb	w1, [x19, w5, sxtw]
 508:	cmp	w20, #0x6
 50c:	b.eq	670 <hexdump+0x378>  // b.none
 510:	ldrb	w1, [x21, #6]
 514:	add	w5, w28, #0x8
 518:	sub	w3, w1, #0x20
 51c:	and	w3, w3, #0xff
 520:	cmp	w3, #0x5f
 524:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 528:	strb	w1, [x19, w6, sxtw]
 52c:	cmp	w20, #0x7
 530:	b.eq	670 <hexdump+0x378>  // b.none
 534:	ldrb	w1, [x21, #7]
 538:	add	w6, w28, #0x9
 53c:	sub	w3, w1, #0x20
 540:	and	w3, w3, #0xff
 544:	cmp	w3, #0x5f
 548:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 54c:	strb	w1, [x19, w5, sxtw]
 550:	cmp	w20, #0x8
 554:	b.eq	670 <hexdump+0x378>  // b.none
 558:	ldrb	w1, [x21, #8]
 55c:	add	w5, w28, #0xa
 560:	sub	w3, w1, #0x20
 564:	and	w3, w3, #0xff
 568:	cmp	w3, #0x5f
 56c:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 570:	strb	w1, [x19, w6, sxtw]
 574:	cmp	w20, #0x9
 578:	b.eq	670 <hexdump+0x378>  // b.none
 57c:	ldrb	w1, [x21, #9]
 580:	add	w6, w28, #0xb
 584:	sub	w3, w1, #0x20
 588:	and	w3, w3, #0xff
 58c:	cmp	w3, #0x5f
 590:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 594:	strb	w1, [x19, w5, sxtw]
 598:	cmp	w20, #0xa
 59c:	b.eq	670 <hexdump+0x378>  // b.none
 5a0:	ldrb	w1, [x21, #10]
 5a4:	add	w5, w28, #0xc
 5a8:	sub	w3, w1, #0x20
 5ac:	and	w3, w3, #0xff
 5b0:	cmp	w3, #0x5f
 5b4:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 5b8:	strb	w1, [x19, w6, sxtw]
 5bc:	cmp	w20, #0xb
 5c0:	b.eq	670 <hexdump+0x378>  // b.none
 5c4:	ldrb	w1, [x21, #11]
 5c8:	add	w6, w28, #0xd
 5cc:	sub	w3, w1, #0x20
 5d0:	and	w3, w3, #0xff
 5d4:	cmp	w3, #0x5f
 5d8:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 5dc:	strb	w1, [x19, w5, sxtw]
 5e0:	cmp	w20, #0xc
 5e4:	b.eq	670 <hexdump+0x378>  // b.none
 5e8:	ldrb	w1, [x21, #12]
 5ec:	add	w5, w28, #0xe
 5f0:	sub	w3, w1, #0x20
 5f4:	and	w3, w3, #0xff
 5f8:	cmp	w3, #0x5f
 5fc:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 600:	strb	w1, [x19, w6, sxtw]
 604:	cmp	w20, #0xd
 608:	b.eq	670 <hexdump+0x378>  // b.none
 60c:	ldrb	w1, [x21, #13]
 610:	add	w6, w28, #0xf
 614:	sub	w3, w1, #0x20
 618:	and	w3, w3, #0xff
 61c:	cmp	w3, #0x5f
 620:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 624:	strb	w1, [x19, w5, sxtw]
 628:	cmp	w20, #0xe
 62c:	b.eq	670 <hexdump+0x378>  // b.none
 630:	ldrb	w1, [x21, #14]
 634:	add	w4, w28, #0x10
 638:	sub	w3, w1, #0x20
 63c:	and	w3, w3, #0xff
 640:	cmp	w3, #0x5f
 644:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 648:	strb	w1, [x19, w6, sxtw]
 64c:	cmp	w20, #0x10
 650:	b.ne	670 <hexdump+0x378>  // b.any
 654:	ldrb	w1, [x21, #15]
 658:	sub	w3, w1, #0x20
 65c:	and	w3, w3, #0xff
 660:	cmp	w3, #0x5f
 664:	csel	w1, w1, w0, cc  // cc = lo, ul, last
 668:	strb	w1, [x19, w4, sxtw]
 66c:	nop
 670:	add	w2, w2, w20
 674:	mov	w4, #0x7c                  	// #124
 678:	ldr	x0, [sp, #120]
 67c:	add	w3, w2, #0x1
 680:	strb	w4, [x19, w2, sxtw]
 684:	mov	x1, x19
 688:	add	x23, x21, #0x10
 68c:	strb	wzr, [x19, w3, sxtw]
 690:	bl	0 <grub_printf>
 694:	cmp	w25, #0x3f
 698:	b.gt	6c4 <hexdump+0x3cc>
 69c:	sub	w25, w25, w20
 6a0:	cmp	w25, #0x0
 6a4:	b.le	760 <hexdump+0x468>
 6a8:	mov	x21, x23
 6ac:	ldr	x3, [sp, #104]
 6b0:	b	350 <hexdump+0x58>
 6b4:	bl	0 <grub_snprintf>
 6b8:	mov	w20, #0x10                  	// #16
 6bc:	add	w28, w28, w0
 6c0:	b	39c <hexdump+0xa4>
 6c4:	mov	x1, x23
 6c8:	mov	x0, x21
 6cc:	mov	x2, #0x10                  	// #16
 6d0:	bl	0 <grub_memcmp>
 6d4:	cbz	w0, 6e0 <hexdump+0x3e8>
 6d8:	sub	w25, w25, w20
 6dc:	b	6a8 <hexdump+0x3b0>
 6e0:	add	x1, x21, #0x20
 6e4:	mov	x0, x21
 6e8:	mov	x2, #0x10                  	// #16
 6ec:	bl	0 <grub_memcmp>
 6f0:	cbnz	w0, 6d8 <hexdump+0x3e0>
 6f4:	add	x1, x21, #0x30
 6f8:	mov	x0, x21
 6fc:	mov	x2, #0x10                  	// #16
 700:	bl	0 <grub_memcmp>
 704:	cbnz	w0, 6d8 <hexdump+0x3e0>
 708:	adrp	x0, 0 <grub_mod_init-0x260>
 70c:	sub	w25, w25, #0x10
 710:	ldr	x0, [x0]
 714:	bl	0 <grub_printf>
 718:	add	x1, x23, #0x20
 71c:	mov	x0, x23
 720:	mov	x2, #0x10                  	// #16
 724:	bl	0 <grub_memcmp>
 728:	ldr	x2, [sp, #104]
 72c:	sub	x1, x23, x21
 730:	add	x1, x1, x2
 734:	mov	x2, x23
 738:	add	x23, x23, #0x10
 73c:	cbnz	w0, 780 <hexdump+0x488>
 740:	sub	w25, w25, #0x10
 744:	cmp	w25, #0x2f
 748:	b.gt	718 <hexdump+0x420>
 74c:	add	x0, x1, #0x10
 750:	add	x23, x2, #0x20
 754:	sub	w25, w25, w20
 758:	str	x0, [sp, #104]
 75c:	b	6a8 <hexdump+0x3b0>
 760:	ldp	x19, x20, [sp, #16]
 764:	ldp	x21, x22, [sp, #32]
 768:	ldp	x23, x24, [sp, #48]
 76c:	ldp	x25, x26, [sp, #64]
 770:	ldp	x27, x28, [sp, #80]
 774:	ldp	x29, x30, [sp], #208
 778:	ret
 77c:	ret
 780:	sub	w25, w25, w20
 784:	str	x1, [sp, #104]
 788:	b	6a8 <hexdump+0x3b0>
 78c:	nop
	...
