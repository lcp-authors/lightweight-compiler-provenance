In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_clang_-Os:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x0, 0 <setup_et_lock>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	mov	w1, wzr
  14:	str	x19, [sp, #16]
  18:	mov	x29, sp
  1c:	mov	w19, #0x1                   	// #1
  20:	bl	0 <sem_init>
  24:	adrp	x8, 0 <setup_et_lock>
  28:	strb	w19, [x8]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

0000000000000038 <fini_et_lock>:
  38:	stp	x29, x30, [sp, #-16]!
  3c:	adrp	x0, 0 <setup_et_lock>
  40:	add	x0, x0, #0x0
  44:	mov	x29, sp
  48:	bl	0 <sem_destroy>
  4c:	adrp	x8, 0 <setup_et_lock>
  50:	strb	wzr, [x8]
  54:	ldp	x29, x30, [sp], #16
  58:	ret

000000000000005c <et_list_lock>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	stp	x20, x19, [sp, #16]
  64:	adrp	x19, 0 <setup_et_lock>
  68:	ldrb	w8, [x19]
  6c:	mov	x29, sp
  70:	tbnz	w8, #0, 90 <et_list_lock+0x34>
  74:	adrp	x0, 0 <setup_et_lock>
  78:	add	x0, x0, #0x0
  7c:	mov	w2, #0x1                   	// #1
  80:	mov	w1, wzr
  84:	mov	w20, #0x1                   	// #1
  88:	bl	0 <sem_init>
  8c:	strb	w20, [x19]
  90:	ldp	x20, x19, [sp, #16]
  94:	adrp	x0, 0 <setup_et_lock>
  98:	add	x0, x0, #0x0
  9c:	ldp	x29, x30, [sp], #32
  a0:	b	0 <sem_wait>

00000000000000a4 <et_list_unlock>:
  a4:	adrp	x8, 0 <setup_et_lock>
  a8:	ldrb	w8, [x8]
  ac:	cmp	w8, #0x1
  b0:	b.ne	c0 <et_list_unlock+0x1c>  // b.any
  b4:	adrp	x0, 0 <setup_et_lock>
  b8:	add	x0, x0, #0x0
  bc:	b	0 <sem_post>
  c0:	mov	w0, wzr
  c4:	ret

00000000000000c8 <set_com_err_gettext>:
  c8:	adrp	x9, 0 <setup_et_lock>
  cc:	ldr	x8, [x9]
  d0:	str	x0, [x9]
  d4:	mov	x0, x8
  d8:	ret

00000000000000dc <error_message>:
  dc:	stp	x29, x30, [sp, #-48]!
  e0:	stp	x20, x19, [sp, #32]
  e4:	and	w19, w0, #0xff
  e8:	stp	x22, x21, [sp, #16]
  ec:	subs	x20, x0, x19
  f0:	mrs	x22, tpidr_el0
  f4:	mov	x29, sp
  f8:	b.eq	12c <error_message+0x50>  // b.none
  fc:	bl	5c <et_list_lock>
 100:	adrp	x8, 0 <setup_et_lock>
 104:	ldr	x8, [x8]
 108:	cbz	x8, 16c <error_message+0x90>
 10c:	ldr	x9, [x8, #8]
 110:	ldr	w10, [x9, #8]
 114:	eor	w10, w10, w20
 118:	tst	x10, #0xffffff
 11c:	b.eq	160 <error_message+0x84>  // b.none
 120:	ldr	x8, [x8]
 124:	cbnz	x8, 10c <error_message+0x30>
 128:	b	16c <error_message+0x90>
 12c:	mov	w0, w19
 130:	bl	0 <strerror>
 134:	mov	x20, x0
 138:	cbnz	x0, 2cc <error_message+0x1f0>
 13c:	adrp	x8, 0 <setup_et_lock>
 140:	add	x8, x8, #0x0
 144:	ldr	x9, [x8]
 148:	ldur	x8, [x8, #6]
 14c:	add	x10, x22, #0x0, lsl #12
 150:	add	x10, x10, #0x0
 154:	str	x9, [x10]
 158:	stur	x8, [x10, #6]
 15c:	b	244 <error_message+0x168>
 160:	ldr	w8, [x9, #16]
 164:	cmp	w8, w19
 168:	b.gt	1a4 <error_message+0xc8>
 16c:	adrp	x8, 8 <setup_et_lock+0x8>
 170:	ldr	x8, [x8]
 174:	cbz	x8, 1e8 <error_message+0x10c>
 178:	ldr	x9, [x8, #8]
 17c:	ldr	w10, [x9, #8]
 180:	eor	w10, w10, w20
 184:	tst	x10, #0xffffff
 188:	b.eq	198 <error_message+0xbc>  // b.none
 18c:	ldr	x8, [x8]
 190:	cbnz	x8, 178 <error_message+0x9c>
 194:	b	1e8 <error_message+0x10c>
 198:	ldr	w8, [x9, #16]
 19c:	cmp	w8, w19
 1a0:	b.le	1e8 <error_message+0x10c>
 1a4:	ldr	x8, [x9]
 1a8:	adrp	x9, 0 <setup_et_lock>
 1ac:	ldrb	w9, [x9]
 1b0:	ldr	x20, [x8, x19, lsl #3]
 1b4:	cmp	w9, #0x1
 1b8:	b.ne	1c8 <error_message+0xec>  // b.any
 1bc:	adrp	x0, 0 <setup_et_lock>
 1c0:	add	x0, x0, #0x0
 1c4:	bl	0 <sem_post>
 1c8:	adrp	x8, 0 <setup_et_lock>
 1cc:	ldr	x1, [x8]
 1d0:	cbz	x1, 2cc <error_message+0x1f0>
 1d4:	mov	x0, x20
 1d8:	ldp	x20, x19, [sp, #32]
 1dc:	ldp	x22, x21, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #48
 1e4:	br	x1
 1e8:	adrp	x8, 0 <setup_et_lock>
 1ec:	ldrb	w8, [x8]
 1f0:	cmp	w8, #0x1
 1f4:	b.ne	204 <error_message+0x128>  // b.any
 1f8:	adrp	x0, 0 <setup_et_lock>
 1fc:	add	x0, x0, #0x0
 200:	bl	0 <sem_post>
 204:	adrp	x8, 0 <setup_et_lock>
 208:	add	x8, x8, #0x0
 20c:	ldr	x9, [x8]
 210:	ldur	x8, [x8, #6]
 214:	add	x10, x22, #0x0, lsl #12
 218:	add	x21, x10, #0x0
 21c:	mov	x0, x20
 220:	str	x9, [x21]
 224:	stur	x8, [x21, #6]
 228:	bl	0 <error_table_name>
 22c:	mov	x1, x0
 230:	mov	x0, x21
 234:	bl	0 <strcat>
 238:	bl	0 <strlen>
 23c:	mov	w8, #0x20                  	// #32
 240:	strh	w8, [x21, x0]
 244:	add	x8, x22, #0x0, lsl #12
 248:	add	x9, x8, #0x0
 24c:	ldrb	w8, [x9], #1
 250:	cbnz	w8, 24c <error_message+0x170>
 254:	cmp	w19, #0x64
 258:	sub	x8, x9, #0x1
 25c:	b.cc	288 <error_message+0x1ac>  // b.lo, b.ul, b.last
 260:	mov	w10, #0x851f                	// #34079
 264:	movk	w10, #0x51eb, lsl #16
 268:	umull	x10, w19, w10
 26c:	lsr	x10, x10, #37
 270:	mov	w11, #0x64                  	// #100
 274:	orr	w12, w10, #0x30
 278:	strb	w12, [x8]
 27c:	msub	w19, w10, w11, w19
 280:	mov	x8, x9
 284:	b	290 <error_message+0x1b4>
 288:	cmp	w19, #0xa
 28c:	b.cc	2b8 <error_message+0x1dc>  // b.lo, b.ul, b.last
 290:	mov	w10, #0xcccd                	// #52429
 294:	and	w9, w19, #0xff
 298:	movk	w10, #0xcccc, lsl #16
 29c:	umull	x9, w9, w10
 2a0:	mov	w11, #0xa                   	// #10
 2a4:	lsr	x9, x9, #35
 2a8:	add	w10, w9, #0x30
 2ac:	msub	w9, w9, w11, w19
 2b0:	strb	w10, [x8], #1
 2b4:	and	w19, w9, #0xff
 2b8:	add	x10, x22, #0x0, lsl #12
 2bc:	add	w9, w19, #0x30
 2c0:	add	x20, x10, #0x0
 2c4:	strb	wzr, [x8, #1]
 2c8:	strb	w9, [x8]
 2cc:	mov	x0, x20
 2d0:	ldp	x20, x19, [sp, #32]
 2d4:	ldp	x22, x21, [sp, #16]
 2d8:	ldp	x29, x30, [sp], #48
 2dc:	ret

00000000000002e0 <add_error_table>:
 2e0:	stp	x29, x30, [sp, #-32]!
 2e4:	stp	x20, x19, [sp, #16]
 2e8:	mov	x19, x0
 2ec:	mov	w0, #0x10                  	// #16
 2f0:	mov	x29, sp
 2f4:	bl	0 <malloc>
 2f8:	cbz	x0, 31c <add_error_table+0x3c>
 2fc:	mov	x20, x0
 300:	bl	5c <et_list_lock>
 304:	cbz	w0, 324 <add_error_table+0x44>
 308:	mov	x0, x20
 30c:	bl	0 <free>
 310:	bl	0 <__errno_location>
 314:	ldrsw	x0, [x0]
 318:	b	38c <add_error_table+0xac>
 31c:	mov	w0, #0xc                   	// #12
 320:	b	38c <add_error_table+0xac>
 324:	adrp	x8, 8 <setup_et_lock+0x8>
 328:	ldr	x9, [x8]
 32c:	str	x20, [x8]
 330:	stp	x9, x19, [x20]
 334:	bl	398 <init_debug>
 338:	adrp	x8, 0 <setup_et_lock>
 33c:	ldrb	w8, [x8]
 340:	tbz	w8, #0, 36c <add_error_table+0x8c>
 344:	adrp	x8, 0 <setup_et_lock>
 348:	ldr	x0, [x19, #8]
 34c:	ldr	x20, [x8]
 350:	bl	0 <error_table_name>
 354:	adrp	x1, 0 <setup_et_lock>
 358:	mov	x2, x0
 35c:	add	x1, x1, #0x0
 360:	mov	x0, x20
 364:	mov	x3, x19
 368:	bl	0 <fprintf>
 36c:	adrp	x8, 0 <setup_et_lock>
 370:	ldrb	w8, [x8]
 374:	cmp	w8, #0x1
 378:	b.ne	388 <add_error_table+0xa8>  // b.any
 37c:	adrp	x0, 0 <setup_et_lock>
 380:	add	x0, x0, #0x0
 384:	bl	0 <sem_post>
 388:	mov	x0, xzr
 38c:	ldp	x20, x19, [sp, #16]
 390:	ldp	x29, x30, [sp], #32
 394:	ret

0000000000000398 <init_debug>:
 398:	stp	x29, x30, [sp, #-48]!
 39c:	stp	x20, x19, [sp, #32]
 3a0:	adrp	x20, 0 <setup_et_lock>
 3a4:	ldr	w19, [x20]
 3a8:	str	x21, [sp, #16]
 3ac:	mov	x29, sp
 3b0:	tbnz	w19, #15, 4f4 <init_debug+0x15c>
 3b4:	adrp	x0, 0 <setup_et_lock>
 3b8:	add	x0, x0, #0x0
 3bc:	bl	0 <getenv>
 3c0:	cbz	x0, 3f0 <init_debug+0x58>
 3c4:	add	x1, x29, #0x18
 3c8:	mov	w2, wzr
 3cc:	bl	0 <strtoul>
 3d0:	ldr	x8, [x29, #24]
 3d4:	mov	x19, x0
 3d8:	str	w19, [x20]
 3dc:	ldrb	w8, [x8]
 3e0:	cbnz	w8, 4ec <init_debug+0x154>
 3e4:	bl	0 <__errno_location>
 3e8:	ldr	w8, [x0]
 3ec:	cbnz	w8, 4ec <init_debug+0x154>
 3f0:	orr	w8, w19, #0x8000
 3f4:	cmp	w8, #0x8, lsl #12
 3f8:	str	w8, [x20]
 3fc:	b.eq	4f4 <init_debug+0x15c>  // b.none
 400:	bl	0 <getuid>
 404:	mov	w19, w0
 408:	bl	0 <geteuid>
 40c:	cmp	w19, w0
 410:	adrp	x21, 0 <setup_et_lock>
 414:	b.ne	46c <init_debug+0xd4>  // b.any
 418:	bl	0 <getgid>
 41c:	mov	w19, w0
 420:	bl	0 <getegid>
 424:	cmp	w19, w0
 428:	b.ne	46c <init_debug+0xd4>  // b.any
 42c:	mov	w0, #0x3                   	// #3
 430:	mov	w1, wzr
 434:	mov	w2, wzr
 438:	mov	w3, wzr
 43c:	mov	w4, wzr
 440:	bl	0 <prctl>
 444:	cbz	w0, 46c <init_debug+0xd4>
 448:	adrp	x0, 0 <setup_et_lock>
 44c:	add	x0, x0, #0x0
 450:	bl	0 <secure_getenv>
 454:	cbz	x0, 46c <init_debug+0xd4>
 458:	adrp	x1, 0 <setup_et_lock>
 45c:	add	x1, x1, #0x0
 460:	bl	0 <fopen>
 464:	str	x0, [x21]
 468:	b	470 <init_debug+0xd8>
 46c:	ldr	x0, [x21]
 470:	cbnz	x0, 490 <init_debug+0xf8>
 474:	adrp	x0, 0 <setup_et_lock>
 478:	adrp	x1, 0 <setup_et_lock>
 47c:	add	x0, x0, #0x0
 480:	add	x1, x1, #0x0
 484:	bl	0 <fopen>
 488:	str	x0, [x21]
 48c:	cbz	x0, 4ec <init_debug+0x154>
 490:	bl	0 <fileno>
 494:	tbnz	w0, #31, 4f4 <init_debug+0x15c>
 498:	mov	w1, #0x1                   	// #1
 49c:	mov	w19, w0
 4a0:	bl	0 <fcntl>
 4a4:	tbnz	w0, #31, 4bc <init_debug+0x124>
 4a8:	orr	w2, w0, #0x1
 4ac:	mov	w1, #0x2                   	// #2
 4b0:	mov	w0, w19
 4b4:	bl	0 <fcntl>
 4b8:	tbz	w0, #31, 4f4 <init_debug+0x15c>
 4bc:	ldr	x19, [x21]
 4c0:	bl	0 <__errno_location>
 4c4:	ldr	w0, [x0]
 4c8:	bl	0 <strerror>
 4cc:	adrp	x1, 0 <setup_et_lock>
 4d0:	mov	x2, x0
 4d4:	add	x1, x1, #0x0
 4d8:	mov	x0, x19
 4dc:	bl	0 <fprintf>
 4e0:	ldr	x0, [x21]
 4e4:	bl	0 <fclose>
 4e8:	str	xzr, [x21]
 4ec:	mov	w8, #0x8000                	// #32768
 4f0:	str	w8, [x20]
 4f4:	ldp	x20, x19, [sp, #32]
 4f8:	ldr	x21, [sp, #16]
 4fc:	ldp	x29, x30, [sp], #48
 500:	ret

0000000000000504 <remove_error_table>:
 504:	stp	x29, x30, [sp, #-32]!
 508:	stp	x20, x19, [sp, #16]
 50c:	mov	x29, sp
 510:	mov	x19, x0
 514:	bl	5c <et_list_lock>
 518:	cbz	w0, 52c <remove_error_table+0x28>
 51c:	mov	w0, #0x2                   	// #2
 520:	ldp	x20, x19, [sp, #16]
 524:	ldp	x29, x30, [sp], #32
 528:	ret
 52c:	adrp	x8, 8 <setup_et_lock+0x8>
 530:	ldr	x20, [x8]
 534:	bl	398 <init_debug>
 538:	cbz	x20, 5f4 <remove_error_table+0xf0>
 53c:	ldr	x9, [x20, #8]
 540:	ldr	x8, [x19, #8]
 544:	ldr	x9, [x9, #8]
 548:	cmp	x9, x8
 54c:	b.ne	558 <remove_error_table+0x54>  // b.any
 550:	mov	x10, xzr
 554:	b	57c <remove_error_table+0x78>
 558:	mov	x9, x20
 55c:	ldr	x20, [x9]
 560:	cbz	x20, 5f4 <remove_error_table+0xf0>
 564:	ldr	x10, [x20, #8]
 568:	ldr	x10, [x10, #8]
 56c:	cmp	x10, x8
 570:	mov	x10, x9
 574:	mov	x9, x20
 578:	b.ne	55c <remove_error_table+0x58>  // b.any
 57c:	ldr	x8, [x20]
 580:	adrp	x9, 8 <setup_et_lock+0x8>
 584:	add	x9, x9, #0x0
 588:	cmp	x10, #0x0
 58c:	csel	x9, x9, x10, eq  // eq = none
 590:	mov	x0, x20
 594:	str	x8, [x9]
 598:	bl	0 <free>
 59c:	adrp	x8, 0 <setup_et_lock>
 5a0:	ldrb	w8, [x8]
 5a4:	tbz	w8, #0, 5d0 <remove_error_table+0xcc>
 5a8:	adrp	x8, 0 <setup_et_lock>
 5ac:	ldr	x0, [x19, #8]
 5b0:	ldr	x20, [x8]
 5b4:	bl	0 <error_table_name>
 5b8:	adrp	x1, 0 <setup_et_lock>
 5bc:	mov	x2, x0
 5c0:	add	x1, x1, #0x0
 5c4:	mov	x0, x20
 5c8:	mov	x3, x19
 5cc:	bl	0 <fprintf>
 5d0:	adrp	x8, 0 <setup_et_lock>
 5d4:	ldrb	w8, [x8]
 5d8:	cmp	w8, #0x1
 5dc:	b.ne	5ec <remove_error_table+0xe8>  // b.any
 5e0:	adrp	x0, 0 <setup_et_lock>
 5e4:	add	x0, x0, #0x0
 5e8:	bl	0 <sem_post>
 5ec:	mov	x0, xzr
 5f0:	b	520 <remove_error_table+0x1c>
 5f4:	adrp	x8, 0 <setup_et_lock>
 5f8:	ldrb	w8, [x8]
 5fc:	tbz	w8, #0, 628 <remove_error_table+0x124>
 600:	adrp	x8, 0 <setup_et_lock>
 604:	ldr	x0, [x19, #8]
 608:	ldr	x20, [x8]
 60c:	bl	0 <error_table_name>
 610:	adrp	x1, 0 <setup_et_lock>
 614:	mov	x2, x0
 618:	add	x1, x1, #0x0
 61c:	mov	x0, x20
 620:	mov	x3, x19
 624:	bl	0 <fprintf>
 628:	adrp	x8, 0 <setup_et_lock>
 62c:	ldrb	w8, [x8]
 630:	cmp	w8, #0x1
 634:	b.ne	51c <remove_error_table+0x18>  // b.any
 638:	adrp	x0, 0 <setup_et_lock>
 63c:	add	x0, x0, #0x0
 640:	bl	0 <sem_post>
 644:	b	51c <remove_error_table+0x18>

0000000000000648 <add_to_error_table>:
 648:	ldr	x0, [x0, #8]
 64c:	b	2e0 <add_error_table>

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	adrp	x8, 0 <error_table_name>
   4:	adrp	x11, 0 <error_table_name>
   8:	ubfx	x9, x0, #8, #24
   c:	add	x8, x8, #0x0
  10:	mov	w10, #0x18                  	// #24
  14:	add	x11, x11, #0x0
  18:	lsr	x12, x9, x10
  1c:	and	x12, x12, #0x3f
  20:	cbz	w12, 30 <error_table_name+0x30>
  24:	add	x12, x12, x11
  28:	ldurb	w12, [x12, #-1]
  2c:	strb	w12, [x8], #1
  30:	sub	x10, x10, #0x6
  34:	cmn	x10, #0x6
  38:	b.ne	18 <error_table_name+0x18>  // b.any
  3c:	adrp	x0, 0 <error_table_name>
  40:	add	x0, x0, #0x0
  44:	strb	wzr, [x8]
  48:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	mov	x21, x0
   c:	mov	w0, wzr
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	cbz	x21, 68 <init_error_table+0x68>
  1c:	mov	x20, x1
  20:	cbz	x1, 68 <init_error_table+0x68>
  24:	mov	w19, w2
  28:	cbz	w2, 68 <init_error_table+0x68>
  2c:	mov	w0, #0x28                  	// #40
  30:	bl	0 <malloc>
  34:	cbz	x0, 64 <init_error_table+0x64>
  38:	adrp	x10, 0 <_et_dynamic_list>
  3c:	ldr	x11, [x10]
  40:	mov	x8, x0
  44:	mov	x9, x8
  48:	mov	w0, wzr
  4c:	str	x21, [x9, #16]!
  50:	str	x20, [x8, #24]
  54:	str	w19, [x8, #32]
  58:	stp	x11, x9, [x8]
  5c:	str	x8, [x10]
  60:	b	68 <init_error_table+0x68>
  64:	mov	w0, #0xc                   	// #12
  68:	ldp	x20, x19, [sp, #32]
  6c:	ldr	x21, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	sub	sp, sp, #0x80
   4:	stp	x24, x23, [sp, #80]
   8:	adrp	x24, 0 <stderr>
   c:	ldr	x8, [x24]
  10:	mov	x23, x0
  14:	stp	x29, x30, [sp, #64]
  18:	stp	x22, x21, [sp, #96]
  1c:	mov	x0, x8
  20:	stp	x20, x19, [sp, #112]
  24:	add	x29, sp, #0x40
  28:	mov	x21, x3
  2c:	mov	x20, x2
  30:	mov	x22, x1
  34:	bl	0 <fileno>
  38:	mov	w19, w0
  3c:	cbnz	x23, c4 <default_com_err_proc+0xc4>
  40:	cbnz	x22, e4 <default_com_err_proc+0xe4>
  44:	cbz	x20, 60 <default_com_err_proc+0x60>
  48:	ldp	q1, q0, [x21]
  4c:	ldr	x0, [x24]
  50:	mov	x2, sp
  54:	mov	x1, x20
  58:	stp	q1, q0, [sp]
  5c:	bl	0 <vfprintf>
  60:	mov	w0, w19
  64:	bl	0 <isatty>
  68:	cbz	w0, 98 <default_com_err_proc+0x98>
  6c:	mov	x1, sp
  70:	mov	w0, w19
  74:	bl	0 <tcgetattr>
  78:	cbnz	w0, 8c <default_com_err_proc+0x8c>
  7c:	ldr	w8, [sp, #4]
  80:	mov	w9, #0x5                   	// #5
  84:	bics	wzr, w9, w8
  88:	b.eq	98 <default_com_err_proc+0x98>  // b.none
  8c:	ldr	x1, [x24]
  90:	mov	w0, #0xd                   	// #13
  94:	bl	0 <fputc>
  98:	ldr	x1, [x24]
  9c:	mov	w0, #0xa                   	// #10
  a0:	bl	0 <fputc>
  a4:	ldr	x0, [x24]
  a8:	bl	0 <fflush>
  ac:	ldp	x20, x19, [sp, #112]
  b0:	ldp	x22, x21, [sp, #96]
  b4:	ldp	x24, x23, [sp, #80]
  b8:	ldp	x29, x30, [sp, #64]
  bc:	add	sp, sp, #0x80
  c0:	ret
  c4:	ldr	x1, [x24]
  c8:	mov	x0, x23
  cc:	bl	0 <fputs>
  d0:	ldr	x1, [x24]
  d4:	adrp	x0, 0 <default_com_err_proc>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <fputs>
  e0:	cbz	x22, 44 <default_com_err_proc+0x44>
  e4:	mov	x0, x22
  e8:	bl	0 <error_message>
  ec:	ldr	x1, [x24]
  f0:	bl	0 <fputs>
  f4:	ldr	x1, [x24]
  f8:	adrp	x0, 0 <default_com_err_proc>
  fc:	add	x0, x0, #0x0
 100:	bl	0 <fputs>
 104:	cbnz	x20, 48 <default_com_err_proc+0x48>
 108:	b	60 <default_com_err_proc+0x60>

000000000000010c <com_err_va>:
 10c:	sub	sp, sp, #0x30
 110:	stp	x29, x30, [sp, #32]
 114:	adrp	x8, 0 <default_com_err_proc>
 118:	ldp	q0, q1, [x3]
 11c:	ldr	x8, [x8]
 120:	mov	x3, sp
 124:	add	x29, sp, #0x20
 128:	stp	q0, q1, [sp]
 12c:	blr	x8
 130:	ldp	x29, x30, [sp, #32]
 134:	add	sp, sp, #0x30
 138:	ret

000000000000013c <com_err>:
 13c:	sub	sp, sp, #0x100
 140:	adrp	x8, 0 <default_com_err_proc>
 144:	ldr	x9, [x8]
 148:	stp	x29, x30, [sp, #240]
 14c:	add	x29, sp, #0xf0
 150:	stp	x3, x4, [x29, #-104]
 154:	stp	x5, x6, [x29, #-88]
 158:	stur	x7, [x29, #-72]
 15c:	stp	q1, q2, [sp, #16]
 160:	str	q3, [sp, #48]
 164:	str	q0, [sp]
 168:	stp	q4, q5, [sp, #64]
 16c:	stp	q6, q7, [sp, #96]
 170:	cbnz	x9, 180 <com_err+0x44>
 174:	adrp	x9, 0 <default_com_err_proc>
 178:	add	x9, x9, #0x0
 17c:	str	x9, [x8]
 180:	mov	x9, #0xffffffffffffffd8    	// #-40
 184:	mov	x11, sp
 188:	sub	x12, x29, #0x68
 18c:	movk	x9, #0xff80, lsl #32
 190:	add	x10, x29, #0x10
 194:	add	x11, x11, #0x80
 198:	add	x12, x12, #0x28
 19c:	stp	x11, x9, [x29, #-48]
 1a0:	stp	x10, x12, [x29, #-64]
 1a4:	ldp	q0, q1, [x29, #-64]
 1a8:	ldr	x8, [x8]
 1ac:	sub	x3, x29, #0x20
 1b0:	stp	q0, q1, [x29, #-32]
 1b4:	blr	x8
 1b8:	ldp	x29, x30, [sp, #240]
 1bc:	add	sp, sp, #0x100
 1c0:	ret

00000000000001c4 <set_com_err_hook>:
 1c4:	adrp	x9, 0 <default_com_err_proc>
 1c8:	ldr	x8, [x9]
 1cc:	adrp	x10, 0 <default_com_err_proc>
 1d0:	add	x10, x10, #0x0
 1d4:	cmp	x0, #0x0
 1d8:	csel	x10, x10, x0, eq  // eq = none
 1dc:	mov	x0, x8
 1e0:	str	x10, [x9]
 1e4:	ret

00000000000001e8 <reset_com_err_hook>:
 1e8:	adrp	x8, 0 <default_com_err_proc>
 1ec:	ldr	x0, [x8]
 1f0:	adrp	x9, 0 <default_com_err_proc>
 1f4:	add	x9, x9, #0x0
 1f8:	str	x9, [x8]
 1fc:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbz	x0, 2c <com_right+0x2c>
   4:	ldr	x8, [x0, #8]
   8:	ldr	x9, [x8, #8]
   c:	cmp	x9, x1
  10:	b.gt	24 <com_right+0x24>
  14:	ldrsw	x10, [x8, #16]
  18:	add	x10, x9, x10
  1c:	cmp	x10, x1
  20:	b.gt	30 <com_right+0x30>
  24:	ldr	x0, [x0]
  28:	cbnz	x0, 4 <com_right+0x4>
  2c:	ret
  30:	ldr	x8, [x8]
  34:	sub	x9, x1, x9
  38:	ldr	x0, [x8, x9, lsl #3]
  3c:	ret

0000000000000040 <com_right_r>:
  40:	stp	x29, x30, [sp, #-32]!
  44:	stp	x20, x19, [sp, #16]
  48:	mov	x29, sp
  4c:	cbz	x0, 80 <com_right_r+0x40>
  50:	mov	x20, x3
  54:	mov	x19, x2
  58:	ldr	x8, [x0, #8]
  5c:	ldr	x9, [x8, #8]
  60:	cmp	x9, x1
  64:	b.gt	78 <com_right_r+0x38>
  68:	ldrsw	x10, [x8, #16]
  6c:	add	x10, x9, x10
  70:	cmp	x10, x1
  74:	b.gt	88 <com_right_r+0x48>
  78:	ldr	x0, [x0]
  7c:	cbnz	x0, 58 <com_right_r+0x18>
  80:	mov	x19, xzr
  84:	b	a8 <com_right_r+0x68>
  88:	ldr	x8, [x8]
  8c:	sub	x9, x1, x9
  90:	mov	x0, x19
  94:	mov	x2, x20
  98:	ldr	x1, [x8, x9, lsl #3]
  9c:	bl	0 <strncpy>
  a0:	add	x8, x20, x19
  a4:	sturb	wzr, [x8, #-1]
  a8:	mov	x0, x19
  ac:	ldp	x20, x19, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <initialize_error_table_r>:
  b8:	stp	x29, x30, [sp, #-48]!
  bc:	stp	x22, x21, [sp, #16]
  c0:	stp	x20, x19, [sp, #32]
  c4:	ldr	x8, [x0]
  c8:	mov	x19, x3
  cc:	mov	w20, w2
  d0:	mov	x21, x0
  d4:	mov	x22, x1
  d8:	mov	x29, sp
  dc:	cbz	x8, fc <initialize_error_table_r+0x44>
  e0:	mov	x21, x8
  e4:	ldr	x8, [x8, #8]
  e8:	ldr	x8, [x8]
  ec:	cmp	x8, x22
  f0:	b.eq	120 <initialize_error_table_r+0x68>  // b.none
  f4:	ldr	x8, [x21]
  f8:	cbnz	x8, e0 <initialize_error_table_r+0x28>
  fc:	mov	w0, #0x28                  	// #40
 100:	bl	0 <malloc>
 104:	cbz	x0, 120 <initialize_error_table_r+0x68>
 108:	mov	x8, x0
 10c:	str	x22, [x8, #16]!
 110:	str	w20, [x0, #32]
 114:	str	x19, [x0, #24]
 118:	stp	xzr, x8, [x0]
 11c:	str	x0, [x21]
 120:	ldp	x20, x19, [sp, #32]
 124:	ldp	x22, x21, [sp, #16]
 128:	ldp	x29, x30, [sp], #48
 12c:	ret

0000000000000130 <free_error_table>:
 130:	stp	x29, x30, [sp, #-32]!
 134:	str	x19, [sp, #16]
 138:	mov	x29, sp
 13c:	cbz	x0, 150 <free_error_table+0x20>
 140:	ldr	x19, [x0]
 144:	bl	0 <free>
 148:	mov	x0, x19
 14c:	cbnz	x19, 140 <free_error_table+0x10>
 150:	ldr	x19, [sp, #16]
 154:	ldp	x29, x30, [sp], #32
 158:	ret
