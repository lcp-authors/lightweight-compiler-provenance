In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgomp.a_gcc_-O1:

alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_malloc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <malloc>
  14:	cbz	x0, 24 <gomp_malloc+0x24>
  18:	ldr	x19, [sp, #16]
  1c:	ldp	x29, x30, [sp], #32
  20:	ret
  24:	mov	x1, x19
  28:	adrp	x0, 0 <gomp_malloc>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>

0000000000000034 <gomp_malloc_cleared>:
  34:	stp	x29, x30, [sp, #-32]!
  38:	mov	x29, sp
  3c:	str	x19, [sp, #16]
  40:	mov	x19, x0
  44:	mov	x1, x0
  48:	mov	x0, #0x1                   	// #1
  4c:	bl	0 <calloc>
  50:	cbz	x0, 60 <gomp_malloc_cleared+0x2c>
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	mov	x1, x19
  64:	adrp	x0, 0 <gomp_malloc>
  68:	add	x0, x0, #0x0
  6c:	bl	0 <gomp_fatal>

0000000000000070 <gomp_realloc>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	mov	x29, sp
  78:	str	x19, [sp, #16]
  7c:	mov	x19, x1
  80:	bl	0 <realloc>
  84:	cbz	x0, 94 <gomp_realloc+0x24>
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	mov	x1, x19
  98:	adrp	x0, 0 <gomp_malloc>
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <gomp_fatal>

00000000000000a4 <gomp_aligned_alloc>:
  a4:	stp	x29, x30, [sp, #-32]!
  a8:	mov	x29, sp
  ac:	str	x19, [sp, #16]
  b0:	mov	x19, x1
  b4:	cmp	x0, #0x8
  b8:	mov	x2, #0x8                   	// #8
  bc:	csel	x0, x0, x2, cs  // cs = hs, nlast
  c0:	bl	0 <aligned_alloc>
  c4:	cbz	x0, d4 <gomp_aligned_alloc+0x30>
  c8:	ldr	x19, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	mov	x1, x19
  d8:	adrp	x0, 0 <gomp_malloc>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <gomp_fatal>

00000000000000e4 <gomp_aligned_free>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	bl	0 <free>
  f0:	ldp	x29, x30, [sp], #16
  f4:	ret

atomic.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_atomic_start>:
   0:	adrp	x0, 0 <GOMP_atomic_start>
   4:	add	x0, x0, #0x0
   8:	mov	w2, #0x1                   	// #1
   c:	ldaxr	w1, [x0]
  10:	cbnz	w1, 1c <GOMP_atomic_start+0x1c>
  14:	stxr	w3, w2, [x0]
  18:	cbnz	w3, c <GOMP_atomic_start+0xc>
  1c:	cmp	w1, #0x0
  20:	b.ne	28 <GOMP_atomic_start+0x28>  // b.any
  24:	ret
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	adrp	x0, 0 <GOMP_atomic_start>
  34:	add	x0, x0, #0x0
  38:	bl	0 <gomp_mutex_lock_slow>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret

0000000000000044 <GOMP_atomic_end>:
  44:	adrp	x0, 0 <GOMP_atomic_start>
  48:	add	x0, x0, #0x0
  4c:	ldxr	w1, [x0]
  50:	stlxr	w2, wzr, [x0]
  54:	cbnz	w2, 4c <GOMP_atomic_end+0x8>
  58:	tbnz	w1, #31, 60 <GOMP_atomic_end+0x1c>
  5c:	ret
  60:	stp	x29, x30, [sp, #-16]!
  64:	mov	x29, sp
  68:	adrp	x0, 0 <GOMP_atomic_start>
  6c:	add	x0, x0, #0x0
  70:	bl	0 <gomp_mutex_unlock_slow>
  74:	ldp	x29, x30, [sp], #16
  78:	ret

barrier.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_barrier>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 30 <GOMP_barrier+0x30>
  18:	stp	x29, x30, [sp, #-16]!
  1c:	mov	x29, sp
  20:	add	x0, x0, #0x80
  24:	bl	0 <gomp_team_barrier_wait>
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	ret

0000000000000034 <GOMP_barrier_cancel>:
  34:	stp	x29, x30, [sp, #-16]!
  38:	mov	x29, sp
  3c:	adrp	x0, 0 <gomp_tls_data>
  40:	ldr	x0, [x0]
  44:	mrs	x1, tpidr_el0
  48:	add	x0, x1, x0
  4c:	ldr	x0, [x0, #16]
  50:	add	x0, x0, #0x80
  54:	bl	0 <gomp_team_barrier_wait_cancel>
  58:	ldp	x29, x30, [sp], #16
  5c:	ret

critical.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_critical_start>:
   0:	dmb	ish
   4:	adrp	x0, 0 <GOMP_critical_start>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	cbnz	w1, 20 <GOMP_critical_start+0x20>
  18:	stxr	w3, w2, [x0]
  1c:	cbnz	w3, 10 <GOMP_critical_start+0x10>
  20:	cmp	w1, #0x0
  24:	b.ne	2c <GOMP_critical_start+0x2c>  // b.any
  28:	ret
  2c:	stp	x29, x30, [sp, #-16]!
  30:	mov	x29, sp
  34:	adrp	x0, 0 <GOMP_critical_start>
  38:	add	x0, x0, #0x0
  3c:	bl	0 <gomp_mutex_lock_slow>
  40:	ldp	x29, x30, [sp], #16
  44:	ret

0000000000000048 <GOMP_critical_end>:
  48:	adrp	x0, 0 <GOMP_critical_start>
  4c:	add	x0, x0, #0x0
  50:	ldxr	w1, [x0]
  54:	stlxr	w2, wzr, [x0]
  58:	cbnz	w2, 50 <GOMP_critical_end+0x8>
  5c:	tbnz	w1, #31, 64 <GOMP_critical_end+0x1c>
  60:	ret
  64:	stp	x29, x30, [sp, #-16]!
  68:	mov	x29, sp
  6c:	adrp	x0, 0 <GOMP_critical_start>
  70:	add	x0, x0, #0x0
  74:	bl	0 <gomp_mutex_unlock_slow>
  78:	ldp	x29, x30, [sp], #16
  7c:	ret

0000000000000080 <GOMP_critical_name_start>:
  80:	mov	w2, #0x1                   	// #1
  84:	ldaxr	w1, [x0]
  88:	cbnz	w1, 94 <GOMP_critical_name_start+0x14>
  8c:	stxr	w3, w2, [x0]
  90:	cbnz	w3, 84 <GOMP_critical_name_start+0x4>
  94:	cmp	w1, #0x0
  98:	b.ne	a0 <GOMP_critical_name_start+0x20>  // b.any
  9c:	ret
  a0:	stp	x29, x30, [sp, #-16]!
  a4:	mov	x29, sp
  a8:	bl	0 <gomp_mutex_lock_slow>
  ac:	ldp	x29, x30, [sp], #16
  b0:	ret

00000000000000b4 <GOMP_critical_name_end>:
  b4:	ldxr	w1, [x0]
  b8:	stlxr	w2, wzr, [x0]
  bc:	cbnz	w2, b4 <GOMP_critical_name_end>
  c0:	tbnz	w1, #31, c8 <GOMP_critical_name_end+0x14>
  c4:	ret
  c8:	stp	x29, x30, [sp, #-16]!
  cc:	mov	x29, sp
  d0:	bl	0 <gomp_mutex_unlock_slow>
  d4:	ldp	x29, x30, [sp], #16
  d8:	ret

env.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_boolean>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	stp	x21, x22, [sp, #32]
      10:	mov	x20, x0
      14:	mov	x22, x1
      18:	bl	0 <getenv>
      1c:	cbz	x0, 90 <parse_boolean+0x90>
      20:	mov	x19, x0
      24:	bl	0 <__ctype_b_loc>
      28:	mov	x21, x0
      2c:	ldr	x3, [x0]
      30:	ldrb	w2, [x19]
      34:	ldrh	w2, [x3, x2, lsl #1]
      38:	tbz	w2, #13, 44 <parse_boolean+0x44>
      3c:	add	x19, x19, #0x1
      40:	b	30 <parse_boolean+0x30>
      44:	mov	x2, #0x4                   	// #4
      48:	adrp	x1, 0 <parse_boolean>
      4c:	add	x1, x1, #0x0
      50:	mov	x0, x19
      54:	bl	0 <strncasecmp>
      58:	cbnz	w0, ac <parse_boolean+0xac>
      5c:	mov	w0, #0x1                   	// #1
      60:	strb	w0, [x22]
      64:	add	x19, x19, #0x4
      68:	ldr	x3, [x21]
      6c:	ldrb	w1, [x19]
      70:	and	x0, x1, #0xff
      74:	ldrh	w0, [x3, x0, lsl #1]
      78:	tbz	w0, #13, 8c <parse_boolean+0x8c>
      7c:	ldrb	w1, [x19, #1]!
      80:	and	x2, x1, #0xff
      84:	ldrh	w2, [x3, x2, lsl #1]
      88:	tbnz	w2, #13, 7c <parse_boolean+0x7c>
      8c:	cbnz	w1, d0 <parse_boolean+0xd0>
      90:	ldp	x19, x20, [sp, #16]
      94:	ldp	x21, x22, [sp, #32]
      98:	ldp	x29, x30, [sp], #48
      9c:	ret
      a0:	adrp	x19, 0 <parse_boolean>
      a4:	add	x19, x19, #0x0
      a8:	b	68 <parse_boolean+0x68>
      ac:	mov	x2, #0x5                   	// #5
      b0:	adrp	x1, 0 <parse_boolean>
      b4:	add	x1, x1, #0x0
      b8:	mov	x0, x19
      bc:	bl	0 <strncasecmp>
      c0:	cbnz	w0, a0 <parse_boolean+0xa0>
      c4:	strb	wzr, [x22]
      c8:	add	x19, x19, #0x5
      cc:	b	68 <parse_boolean+0x68>
      d0:	mov	x1, x20
      d4:	adrp	x0, 0 <parse_boolean>
      d8:	add	x0, x0, #0x0
      dc:	bl	0 <gomp_error>
      e0:	b	90 <parse_boolean+0x90>

00000000000000e4 <parse_unsigned_long_1>:
      e4:	stp	x29, x30, [sp, #-80]!
      e8:	mov	x29, sp
      ec:	stp	x19, x20, [sp, #16]
      f0:	stp	x21, x22, [sp, #32]
      f4:	stp	x23, x24, [sp, #48]
      f8:	mov	x20, x0
      fc:	mov	x22, x1
     100:	and	w24, w2, #0xff
     104:	tst	w3, #0xff
     108:	b.eq	128 <parse_unsigned_long_1+0x44>  // b.none
     10c:	bl	0 <secure_getenv>
     110:	mov	x19, x0
     114:	cbz	x19, 1e4 <parse_unsigned_long_1+0x100>
     118:	bl	0 <__ctype_b_loc>
     11c:	mov	x21, x0
     120:	ldr	x4, [x0]
     124:	b	138 <parse_unsigned_long_1+0x54>
     128:	bl	0 <getenv>
     12c:	mov	x19, x0
     130:	b	114 <parse_unsigned_long_1+0x30>
     134:	add	x19, x19, #0x1
     138:	ldrb	w2, [x19]
     13c:	and	x3, x2, #0xff
     140:	ldrh	w3, [x4, x3, lsl #1]
     144:	tbnz	w3, #13, 134 <parse_unsigned_long_1+0x50>
     148:	cbnz	w2, 174 <parse_unsigned_long_1+0x90>
     14c:	mov	x1, x20
     150:	adrp	x0, 0 <parse_boolean>
     154:	add	x0, x0, #0x0
     158:	bl	0 <gomp_error>
     15c:	mov	w0, #0x0                   	// #0
     160:	ldp	x19, x20, [sp, #16]
     164:	ldp	x21, x22, [sp, #32]
     168:	ldp	x23, x24, [sp, #48]
     16c:	ldp	x29, x30, [sp], #80
     170:	ret
     174:	bl	0 <__errno_location>
     178:	mov	x23, x0
     17c:	str	wzr, [x0]
     180:	mov	w2, #0xa                   	// #10
     184:	add	x1, sp, #0x48
     188:	mov	x0, x19
     18c:	bl	0 <strtoul>
     190:	ldr	w1, [x23]
     194:	cbnz	w1, 14c <parse_unsigned_long_1+0x68>
     198:	neg	w24, w24
     19c:	cmp	x0, w24, sxtw
     1a0:	b.le	14c <parse_unsigned_long_1+0x68>
     1a4:	ldr	x4, [x21]
     1a8:	ldr	x2, [sp, #72]
     1ac:	ldrb	w1, [x2]
     1b0:	ldrb	w3, [x2]
     1b4:	ldrh	w3, [x4, x3, lsl #1]
     1b8:	tbz	w3, #13, 1d4 <parse_unsigned_long_1+0xf0>
     1bc:	add	x2, x2, #0x1
     1c0:	str	x2, [sp, #72]
     1c4:	ldrb	w1, [x2], #1
     1c8:	and	x3, x1, #0xff
     1cc:	ldrh	w3, [x4, x3, lsl #1]
     1d0:	tbnz	w3, #13, 1c0 <parse_unsigned_long_1+0xdc>
     1d4:	cbnz	w1, 14c <parse_unsigned_long_1+0x68>
     1d8:	str	x0, [x22]
     1dc:	mov	w0, #0x1                   	// #1
     1e0:	b	160 <parse_unsigned_long_1+0x7c>
     1e4:	mov	w0, #0x0                   	// #0
     1e8:	b	160 <parse_unsigned_long_1+0x7c>

00000000000001ec <parse_int_1>:
     1ec:	stp	x29, x30, [sp, #-48]!
     1f0:	mov	x29, sp
     1f4:	stp	x19, x20, [sp, #16]
     1f8:	mov	x20, x0
     1fc:	mov	x19, x1
     200:	add	x1, sp, #0x28
     204:	bl	e4 <parse_unsigned_long_1>
     208:	ands	w0, w0, #0xff
     20c:	b.eq	224 <parse_int_1+0x38>  // b.none
     210:	ldr	x1, [sp, #40]
     214:	mov	x2, #0x7fffffff            	// #2147483647
     218:	cmp	x1, x2
     21c:	b.hi	230 <parse_int_1+0x44>  // b.pmore
     220:	str	w1, [x19]
     224:	ldp	x19, x20, [sp, #16]
     228:	ldp	x29, x30, [sp], #48
     22c:	ret
     230:	mov	x1, x20
     234:	adrp	x0, 0 <parse_boolean>
     238:	add	x0, x0, #0x0
     23c:	bl	0 <gomp_error>
     240:	mov	w0, #0x0                   	// #0
     244:	b	224 <parse_int_1+0x38>

0000000000000248 <parse_one_place>:
     248:	stp	x29, x30, [sp, #-176]!
     24c:	mov	x29, sp
     250:	stp	x21, x22, [sp, #32]
     254:	stp	x23, x24, [sp, #48]
     258:	stp	x27, x28, [sp, #80]
     25c:	str	x0, [sp, #136]
     260:	str	x1, [sp, #128]
     264:	str	x2, [sp, #144]
     268:	str	x3, [sp, #152]
     26c:	ldr	x0, [x0]
     270:	str	x0, [sp, #168]
     274:	adrp	x0, 8 <parse_boolean+0x8>
     278:	ldr	x28, [x0]
     27c:	cbz	x28, 28c <parse_one_place+0x44>
     280:	adrp	x0, 8 <parse_boolean+0x8>
     284:	ldr	x0, [x0]
     288:	ldr	x28, [x28, x0, lsl #3]
     28c:	ldr	x0, [sp, #128]
     290:	strb	wzr, [x0]
     294:	bl	0 <__ctype_b_loc>
     298:	mov	x21, x0
     29c:	ldr	x3, [x0]
     2a0:	b	2ac <parse_one_place+0x64>
     2a4:	add	x0, x0, #0x1
     2a8:	str	x0, [sp, #168]
     2ac:	ldr	x0, [sp, #168]
     2b0:	ldrb	w1, [x0]
     2b4:	and	x2, x1, #0xff
     2b8:	ldrh	w2, [x3, x2, lsl #1]
     2bc:	tbnz	w2, #13, 2a4 <parse_one_place+0x5c>
     2c0:	cmp	w1, #0x21
     2c4:	b.eq	340 <parse_one_place+0xf8>  // b.none
     2c8:	ldr	x0, [sp, #168]
     2cc:	ldrb	w1, [x0]
     2d0:	mov	w23, #0x0                   	// #0
     2d4:	cmp	w1, #0x7b
     2d8:	b.ne	7e4 <parse_one_place+0x59c>  // b.any
     2dc:	stp	x19, x20, [sp, #16]
     2e0:	stp	x25, x26, [sp, #64]
     2e4:	add	x25, x0, #0x1
     2e8:	str	x25, [sp, #168]
     2ec:	ldr	x2, [x21]
     2f0:	ldrb	w1, [x0, #1]
     2f4:	ldrh	w1, [x2, x1, lsl #1]
     2f8:	tbz	w1, #13, 318 <parse_one_place+0xd0>
     2fc:	add	x0, x0, #0x2
     300:	mov	x25, x0
     304:	str	x0, [sp, #168]
     308:	add	x0, x0, #0x1
     30c:	ldrb	w1, [x25]
     310:	ldrh	w1, [x2, x1, lsl #1]
     314:	tbnz	w1, #13, 300 <parse_one_place+0xb8>
     318:	str	wzr, [sp, #124]
     31c:	mov	w27, #0x0                   	// #0
     320:	mov	w0, #0x1                   	// #1
     324:	adrp	x26, 8 <parse_boolean+0x8>
     328:	mov	x1, #0x1                   	// #1
     32c:	str	x1, [sp, #112]
     330:	cmp	w0, w27
     334:	b.le	610 <parse_one_place+0x3c8>
     338:	str	x25, [sp, #168]
     33c:	b	52c <parse_one_place+0x2e4>
     340:	mov	w1, #0x1                   	// #1
     344:	ldr	x2, [sp, #128]
     348:	strb	w1, [x2]
     34c:	add	x1, x0, #0x1
     350:	str	x1, [sp, #168]
     354:	ldr	x2, [x21]
     358:	ldrb	w1, [x0, #1]
     35c:	ldrh	w1, [x2, x1, lsl #1]
     360:	tbz	w1, #13, 2c8 <parse_one_place+0x80>
     364:	add	x0, x0, #0x2
     368:	str	x0, [sp, #168]
     36c:	ldrb	w1, [x0]
     370:	add	x0, x0, #0x1
     374:	ldrh	w1, [x2, x1, lsl #1]
     378:	tbnz	w1, #13, 368 <parse_one_place+0x120>
     37c:	b	2c8 <parse_one_place+0x80>
     380:	ldr	x1, [x26]
     384:	cmp	x1, #0x0
     388:	ldr	w1, [sp, #124]
     38c:	csinc	w1, w1, wzr, eq  // eq = none
     390:	str	w1, [sp, #124]
     394:	add	x1, x0, #0x1
     398:	str	x1, [sp, #168]
     39c:	ldr	x2, [x21]
     3a0:	ldrb	w1, [x0, #1]
     3a4:	ldrh	w1, [x2, x1, lsl #1]
     3a8:	tbz	w1, #13, 540 <parse_one_place+0x2f8>
     3ac:	add	x0, x0, #0x2
     3b0:	str	x0, [sp, #168]
     3b4:	ldrb	w1, [x0]
     3b8:	add	x0, x0, #0x1
     3bc:	ldrh	w1, [x2, x1, lsl #1]
     3c0:	tbnz	w1, #13, 3b0 <parse_one_place+0x168>
     3c4:	b	540 <parse_one_place+0x2f8>
     3c8:	add	x0, x2, x3
     3cc:	str	x0, [sp, #168]
     3d0:	ldrb	w1, [x2, #1]
     3d4:	ldrh	w1, [x4, x1, lsl #1]
     3d8:	tbz	w1, #13, 3f8 <parse_one_place+0x1b0>
     3dc:	add	x2, x2, #0x2
     3e0:	mov	x0, x2
     3e4:	str	x2, [sp, #168]
     3e8:	add	x2, x2, #0x1
     3ec:	ldrb	w1, [x0]
     3f0:	ldrh	w1, [x4, x1, lsl #1]
     3f4:	tbnz	w1, #13, 3e0 <parse_one_place+0x198>
     3f8:	str	wzr, [x19]
     3fc:	mov	w2, #0xa                   	// #10
     400:	add	x1, sp, #0xa8
     404:	bl	0 <strtoul>
     408:	mov	x22, x0
     40c:	ldr	w0, [x19]
     410:	cmp	w0, #0x0
     414:	cset	w23, ne  // ne = any
     418:	cmp	x22, #0x0
     41c:	csinc	w23, w23, wzr, ne  // ne = any
     420:	cbnz	w23, 7fc <parse_one_place+0x5b4>
     424:	ldr	x4, [x21]
     428:	ldr	x2, [sp, #168]
     42c:	ldrb	w1, [x2]
     430:	and	x0, x1, #0xff
     434:	ldrh	w0, [x4, x0, lsl #1]
     438:	tbz	w0, #13, 458 <parse_one_place+0x210>
     43c:	add	x0, x2, #0x1
     440:	mov	x2, x0
     444:	str	x0, [sp, #168]
     448:	ldrb	w1, [x0], #1
     44c:	and	x3, x1, #0xff
     450:	ldrh	w3, [x4, x3, lsl #1]
     454:	tbnz	w3, #13, 440 <parse_one_place+0x1f8>
     458:	mov	x3, #0x1                   	// #1
     45c:	cmp	w1, #0x3a
     460:	b.eq	47c <parse_one_place+0x234>  // b.none
     464:	cmp	w24, #0x0
     468:	ccmp	x22, #0x1, #0x4, ne  // ne = any
     46c:	b.eq	5ac <parse_one_place+0x364>  // b.none
     470:	ldp	x19, x20, [sp, #16]
     474:	ldp	x25, x26, [sp, #64]
     478:	b	7e4 <parse_one_place+0x59c>
     47c:	add	x0, x2, x3
     480:	str	x0, [sp, #168]
     484:	ldrb	w1, [x2, #1]
     488:	ldrh	w1, [x4, x1, lsl #1]
     48c:	tbz	w1, #13, 4ac <parse_one_place+0x264>
     490:	add	x2, x2, #0x2
     494:	mov	x0, x2
     498:	str	x2, [sp, #168]
     49c:	add	x2, x2, #0x1
     4a0:	ldrb	w1, [x0]
     4a4:	ldrh	w1, [x4, x1, lsl #1]
     4a8:	tbnz	w1, #13, 494 <parse_one_place+0x24c>
     4ac:	str	wzr, [x19]
     4b0:	mov	w2, #0xa                   	// #10
     4b4:	add	x1, sp, #0xa8
     4b8:	bl	0 <strtol>
     4bc:	mov	x3, x0
     4c0:	ldr	w0, [x19]
     4c4:	cbnz	w0, 82c <parse_one_place+0x5e4>
     4c8:	ldr	x2, [x21]
     4cc:	ldr	x0, [sp, #168]
     4d0:	ldrb	w1, [x0]
     4d4:	ldrh	w1, [x2, x1, lsl #1]
     4d8:	tbz	w1, #13, 464 <parse_one_place+0x21c>
     4dc:	add	x0, x0, #0x1
     4e0:	str	x0, [sp, #168]
     4e4:	ldrb	w1, [x0]
     4e8:	add	x0, x0, #0x1
     4ec:	ldrh	w1, [x2, x1, lsl #1]
     4f0:	tbnz	w1, #13, 4e0 <parse_one_place+0x298>
     4f4:	b	464 <parse_one_place+0x21c>
     4f8:	ldr	x1, [sp, #104]
     4fc:	mov	x0, x28
     500:	bl	0 <gomp_affinity_remove_cpu>
     504:	ands	w23, w0, #0xff
     508:	b.eq	5ec <parse_one_place+0x3a4>  // b.none
     50c:	ldr	x0, [sp, #168]
     510:	ldrb	w1, [x0]
     514:	cmp	w1, #0x7d
     518:	b.eq	5f8 <parse_one_place+0x3b0>  // b.none
     51c:	cmp	w1, #0x2c
     520:	b.ne	80c <parse_one_place+0x5c4>  // b.any
     524:	add	x0, x0, #0x1
     528:	str	x0, [sp, #168]
     52c:	ldr	x0, [sp, #168]
     530:	ldrb	w20, [x0]
     534:	cmp	w20, #0x21
     538:	cset	w24, eq  // eq = none
     53c:	b.eq	380 <parse_one_place+0x138>  // b.none
     540:	bl	0 <__errno_location>
     544:	mov	x19, x0
     548:	str	wzr, [x0]
     54c:	mov	w2, #0xa                   	// #10
     550:	add	x1, sp, #0xa8
     554:	ldr	x0, [sp, #168]
     558:	bl	0 <strtoul>
     55c:	str	x0, [sp, #104]
     560:	ldr	w0, [x19]
     564:	cbnz	w0, 7d8 <parse_one_place+0x590>
     568:	ldr	x4, [x21]
     56c:	ldr	x2, [sp, #168]
     570:	ldrb	w1, [x2]
     574:	and	x0, x1, #0xff
     578:	ldrh	w0, [x4, x0, lsl #1]
     57c:	tbz	w0, #13, 59c <parse_one_place+0x354>
     580:	add	x0, x2, #0x1
     584:	mov	x2, x0
     588:	str	x0, [sp, #168]
     58c:	ldrb	w1, [x0], #1
     590:	and	x3, x1, #0xff
     594:	ldrh	w3, [x4, x3, lsl #1]
     598:	tbnz	w3, #13, 584 <parse_one_place+0x33c>
     59c:	mov	x3, #0x1                   	// #1
     5a0:	ldr	x22, [sp, #112]
     5a4:	cmp	w1, #0x3a
     5a8:	b.eq	3c8 <parse_one_place+0x180>  // b.none
     5ac:	ldr	x0, [x26]
     5b0:	cbz	x0, 50c <parse_one_place+0x2c4>
     5b4:	cmp	w24, w27
     5b8:	b.ne	50c <parse_one_place+0x2c4>  // b.any
     5bc:	cmp	w20, #0x21
     5c0:	b.eq	4f8 <parse_one_place+0x2b0>  // b.none
     5c4:	mov	w4, #0x0                   	// #0
     5c8:	mov	x2, x22
     5cc:	ldr	x1, [sp, #104]
     5d0:	mov	x0, x28
     5d4:	bl	0 <gomp_affinity_add_cpus>
     5d8:	ands	w23, w0, #0xff
     5dc:	b.ne	50c <parse_one_place+0x2c4>  // b.any
     5e0:	ldp	x19, x20, [sp, #16]
     5e4:	ldp	x25, x26, [sp, #64]
     5e8:	b	7e4 <parse_one_place+0x59c>
     5ec:	ldp	x19, x20, [sp, #16]
     5f0:	ldp	x25, x26, [sp, #64]
     5f4:	b	7e4 <parse_one_place+0x59c>
     5f8:	add	w27, w27, #0x1
     5fc:	ldr	w0, [sp, #124]
     600:	cmp	w0, #0x0
     604:	cset	w0, ne  // ne = any
     608:	add	w0, w0, #0x1
     60c:	b	330 <parse_one_place+0xe8>
     610:	ldr	x1, [sp, #168]
     614:	add	x0, x1, #0x1
     618:	str	x0, [sp, #168]
     61c:	ldr	x3, [x21]
     620:	ldrb	w4, [x1, #1]
     624:	and	x2, x4, #0xff
     628:	ldrh	w2, [x3, x2, lsl #1]
     62c:	tbz	w2, #13, 64c <parse_one_place+0x404>
     630:	add	x1, x1, #0x2
     634:	mov	x0, x1
     638:	str	x1, [sp, #168]
     63c:	ldrb	w4, [x1], #1
     640:	and	x2, x4, #0xff
     644:	ldrh	w2, [x3, x2, lsl #1]
     648:	tbnz	w2, #13, 634 <parse_one_place+0x3ec>
     64c:	mov	x2, #0x1                   	// #1
     650:	mov	x19, x2
     654:	cmp	w4, #0x3a
     658:	b.eq	688 <parse_one_place+0x440>  // b.none
     65c:	ldr	x0, [sp, #168]
     660:	ldr	x1, [sp, #136]
     664:	str	x0, [x1]
     668:	ldr	x0, [sp, #144]
     66c:	str	x19, [x0]
     670:	ldr	x0, [sp, #152]
     674:	str	x2, [x0]
     678:	mov	w23, #0x1                   	// #1
     67c:	ldp	x19, x20, [sp, #16]
     680:	ldp	x25, x26, [sp, #64]
     684:	b	7e4 <parse_one_place+0x59c>
     688:	add	x19, x0, x2
     68c:	str	x19, [sp, #168]
     690:	ldrb	w1, [x0, #1]
     694:	ldrh	w1, [x3, x1, lsl #1]
     698:	tbz	w1, #13, 6b8 <parse_one_place+0x470>
     69c:	add	x0, x0, #0x2
     6a0:	mov	x19, x0
     6a4:	str	x0, [sp, #168]
     6a8:	add	x0, x0, #0x1
     6ac:	ldrb	w1, [x19]
     6b0:	ldrh	w1, [x3, x1, lsl #1]
     6b4:	tbnz	w1, #13, 6a0 <parse_one_place+0x458>
     6b8:	bl	0 <__errno_location>
     6bc:	mov	x20, x0
     6c0:	str	wzr, [x0]
     6c4:	mov	w2, #0xa                   	// #10
     6c8:	add	x1, sp, #0xa8
     6cc:	mov	x0, x19
     6d0:	bl	0 <strtoul>
     6d4:	mov	x19, x0
     6d8:	ldr	w0, [x20]
     6dc:	mov	w23, #0x0                   	// #0
     6e0:	cbnz	w0, 838 <parse_one_place+0x5f0>
     6e4:	sub	x1, x19, #0x1
     6e8:	mov	x0, #0xfffe                	// #65534
     6ec:	cmp	x1, x0
     6f0:	b.hi	844 <parse_one_place+0x5fc>  // b.pmore
     6f4:	ldr	x3, [x21]
     6f8:	ldr	x1, [sp, #168]
     6fc:	ldrb	w0, [x1]
     700:	and	x2, x0, #0xff
     704:	ldrh	w2, [x3, x2, lsl #1]
     708:	tbz	w2, #13, 728 <parse_one_place+0x4e0>
     70c:	add	x2, x1, #0x1
     710:	mov	x1, x2
     714:	str	x2, [sp, #168]
     718:	ldrb	w0, [x2], #1
     71c:	and	x4, x0, #0xff
     720:	ldrh	w4, [x3, x4, lsl #1]
     724:	tbnz	w4, #13, 710 <parse_one_place+0x4c8>
     728:	mov	x2, #0x1                   	// #1
     72c:	cmp	w0, #0x3a
     730:	b.eq	75c <parse_one_place+0x514>  // b.none
     734:	cmp	x19, #0x1
     738:	cset	w1, ne  // ne = any
     73c:	ldr	x0, [sp, #128]
     740:	ldrb	w0, [x0]
     744:	mov	w23, #0x0                   	// #0
     748:	tst	w1, w0
     74c:	b.eq	65c <parse_one_place+0x414>  // b.none
     750:	ldp	x19, x20, [sp, #16]
     754:	ldp	x25, x26, [sp, #64]
     758:	b	7e4 <parse_one_place+0x59c>
     75c:	add	x0, x1, x2
     760:	str	x0, [sp, #168]
     764:	ldrb	w2, [x1, #1]
     768:	ldrh	w2, [x3, x2, lsl #1]
     76c:	tbz	w2, #13, 78c <parse_one_place+0x544>
     770:	add	x1, x1, #0x2
     774:	mov	x0, x1
     778:	str	x1, [sp, #168]
     77c:	add	x1, x1, #0x1
     780:	ldrb	w2, [x0]
     784:	ldrh	w2, [x3, x2, lsl #1]
     788:	tbnz	w2, #13, 774 <parse_one_place+0x52c>
     78c:	str	wzr, [x20]
     790:	mov	w2, #0xa                   	// #10
     794:	add	x1, sp, #0xa8
     798:	bl	0 <strtol>
     79c:	mov	x2, x0
     7a0:	ldr	w0, [x20]
     7a4:	cbnz	w0, 81c <parse_one_place+0x5d4>
     7a8:	ldr	x3, [x21]
     7ac:	ldr	x0, [sp, #168]
     7b0:	ldrb	w1, [x0]
     7b4:	ldrh	w1, [x3, x1, lsl #1]
     7b8:	tbz	w1, #13, 734 <parse_one_place+0x4ec>
     7bc:	add	x0, x0, #0x1
     7c0:	str	x0, [sp, #168]
     7c4:	ldrb	w1, [x0]
     7c8:	add	x0, x0, #0x1
     7cc:	ldrh	w1, [x3, x1, lsl #1]
     7d0:	tbnz	w1, #13, 7c0 <parse_one_place+0x578>
     7d4:	b	734 <parse_one_place+0x4ec>
     7d8:	mov	w23, #0x0                   	// #0
     7dc:	ldp	x19, x20, [sp, #16]
     7e0:	ldp	x25, x26, [sp, #64]
     7e4:	mov	w0, w23
     7e8:	ldp	x21, x22, [sp, #32]
     7ec:	ldp	x23, x24, [sp, #48]
     7f0:	ldp	x27, x28, [sp, #80]
     7f4:	ldp	x29, x30, [sp], #176
     7f8:	ret
     7fc:	mov	w23, #0x0                   	// #0
     800:	ldp	x19, x20, [sp, #16]
     804:	ldp	x25, x26, [sp, #64]
     808:	b	7e4 <parse_one_place+0x59c>
     80c:	mov	w23, #0x0                   	// #0
     810:	ldp	x19, x20, [sp, #16]
     814:	ldp	x25, x26, [sp, #64]
     818:	b	7e4 <parse_one_place+0x59c>
     81c:	mov	w23, #0x0                   	// #0
     820:	ldp	x19, x20, [sp, #16]
     824:	ldp	x25, x26, [sp, #64]
     828:	b	7e4 <parse_one_place+0x59c>
     82c:	ldp	x19, x20, [sp, #16]
     830:	ldp	x25, x26, [sp, #64]
     834:	b	7e4 <parse_one_place+0x59c>
     838:	ldp	x19, x20, [sp, #16]
     83c:	ldp	x25, x26, [sp, #64]
     840:	b	7e4 <parse_one_place+0x59c>
     844:	ldp	x19, x20, [sp, #16]
     848:	ldp	x25, x26, [sp, #64]
     84c:	b	7e4 <parse_one_place+0x59c>

0000000000000850 <parse_stacksize>:
     850:	stp	x29, x30, [sp, #-80]!
     854:	mov	x29, sp
     858:	stp	x19, x20, [sp, #16]
     85c:	stp	x21, x22, [sp, #32]
     860:	mov	x20, x0
     864:	mov	x21, x1
     868:	bl	0 <getenv>
     86c:	cbz	x0, 9f0 <parse_stacksize+0x1a0>
     870:	mov	x19, x0
     874:	bl	0 <__ctype_b_loc>
     878:	mov	x22, x0
     87c:	ldr	x4, [x0]
     880:	b	888 <parse_stacksize+0x38>
     884:	add	x19, x19, #0x1
     888:	ldrb	w2, [x19]
     88c:	and	x3, x2, #0xff
     890:	ldrh	w3, [x4, x3, lsl #1]
     894:	tbnz	w3, #13, 884 <parse_stacksize+0x34>
     898:	cbnz	w2, 8c0 <parse_stacksize+0x70>
     89c:	mov	x1, x20
     8a0:	adrp	x0, 0 <parse_boolean>
     8a4:	add	x0, x0, #0x0
     8a8:	bl	0 <gomp_error>
     8ac:	mov	w0, #0x0                   	// #0
     8b0:	ldp	x19, x20, [sp, #16]
     8b4:	ldp	x21, x22, [sp, #32]
     8b8:	ldp	x29, x30, [sp], #80
     8bc:	ret
     8c0:	stp	x23, x24, [sp, #48]
     8c4:	bl	0 <__errno_location>
     8c8:	mov	x23, x0
     8cc:	str	wzr, [x0]
     8d0:	mov	w2, #0xa                   	// #10
     8d4:	add	x1, sp, #0x48
     8d8:	mov	x0, x19
     8dc:	bl	0 <strtoul>
     8e0:	mov	x24, x0
     8e4:	ldr	w0, [x23]
     8e8:	cbnz	w0, 9d8 <parse_stacksize+0x188>
     8ec:	ldr	x23, [x22]
     8f0:	ldr	x19, [sp, #72]
     8f4:	ldrb	w1, [x19]
     8f8:	ldrb	w22, [x19]
     8fc:	ldrh	w0, [x23, x22, lsl #1]
     900:	tbz	w0, #13, 920 <parse_stacksize+0xd0>
     904:	add	x2, x19, #0x1
     908:	mov	x19, x2
     90c:	str	x2, [sp, #72]
     910:	ldrb	w1, [x2], #1
     914:	and	x22, x1, #0xff
     918:	ldrh	w3, [x23, x22, lsl #1]
     91c:	tbnz	w3, #13, 908 <parse_stacksize+0xb8>
     920:	cbz	w1, 9b4 <parse_stacksize+0x164>
     924:	bl	0 <__ctype_tolower_loc>
     928:	ldr	x0, [x0]
     92c:	ldr	w0, [x0, x22, lsl #2]
     930:	cmp	w0, #0x6b
     934:	b.eq	9a4 <parse_stacksize+0x154>  // b.none
     938:	b.gt	994 <parse_stacksize+0x144>
     93c:	cmp	w0, #0x62
     940:	b.eq	9ac <parse_stacksize+0x15c>  // b.none
     944:	mov	x2, #0x1e                  	// #30
     948:	cmp	w0, #0x67
     94c:	b.ne	98c <parse_stacksize+0x13c>  // b.any
     950:	add	x0, x19, #0x1
     954:	str	x0, [sp, #72]
     958:	ldrb	w0, [x19, #1]
     95c:	ldrb	w1, [x19, #1]
     960:	ldrh	w1, [x23, x1, lsl #1]
     964:	tbz	w1, #13, 980 <parse_stacksize+0x130>
     968:	add	x19, x19, #0x2
     96c:	str	x19, [sp, #72]
     970:	ldrb	w0, [x19], #1
     974:	and	x1, x0, #0xff
     978:	ldrh	w1, [x23, x1, lsl #1]
     97c:	tbnz	w1, #13, 96c <parse_stacksize+0x11c>
     980:	cbz	w0, 9b8 <parse_stacksize+0x168>
     984:	ldp	x23, x24, [sp, #48]
     988:	b	89c <parse_stacksize+0x4c>
     98c:	ldp	x23, x24, [sp, #48]
     990:	b	89c <parse_stacksize+0x4c>
     994:	cmp	w0, #0x6d
     998:	b.ne	9e0 <parse_stacksize+0x190>  // b.any
     99c:	mov	x2, #0x14                  	// #20
     9a0:	b	950 <parse_stacksize+0x100>
     9a4:	mov	x2, #0xa                   	// #10
     9a8:	b	950 <parse_stacksize+0x100>
     9ac:	mov	x2, #0x0                   	// #0
     9b0:	b	950 <parse_stacksize+0x100>
     9b4:	mov	x2, #0xa                   	// #10
     9b8:	lsl	x0, x24, x2
     9bc:	lsr	x2, x0, x2
     9c0:	cmp	x2, x24
     9c4:	b.ne	9e8 <parse_stacksize+0x198>  // b.any
     9c8:	str	x0, [x21]
     9cc:	mov	w0, #0x1                   	// #1
     9d0:	ldp	x23, x24, [sp, #48]
     9d4:	b	8b0 <parse_stacksize+0x60>
     9d8:	ldp	x23, x24, [sp, #48]
     9dc:	b	89c <parse_stacksize+0x4c>
     9e0:	ldp	x23, x24, [sp, #48]
     9e4:	b	89c <parse_stacksize+0x4c>
     9e8:	ldp	x23, x24, [sp, #48]
     9ec:	b	89c <parse_stacksize+0x4c>
     9f0:	mov	w0, #0x0                   	// #0
     9f4:	b	8b0 <parse_stacksize+0x60>

00000000000009f8 <initialize_env>:
     9f8:	stp	x29, x30, [sp, #-192]!
     9fc:	mov	x29, sp
     a00:	stp	x19, x20, [sp, #16]
     a04:	stp	x21, x22, [sp, #32]
     a08:	stp	x23, x24, [sp, #48]
     a0c:	stp	x25, x26, [sp, #64]
     a10:	stp	x27, x28, [sp, #80]
     a14:	str	xzr, [sp, #176]
     a18:	adrp	x0, 0 <parse_boolean>
     a1c:	add	x0, x0, #0x0
     a20:	bl	0 <getenv>
     a24:	cbz	x0, cc4 <initialize_env+0x2cc>
     a28:	mov	x19, x0
     a2c:	bl	0 <__ctype_b_loc>
     a30:	mov	x21, x0
     a34:	ldr	x20, [x0]
     a38:	b	a40 <initialize_env+0x48>
     a3c:	add	x19, x19, #0x1
     a40:	ldrb	w0, [x19]
     a44:	ldrh	w0, [x20, x0, lsl #1]
     a48:	tbnz	w0, #13, a3c <initialize_env+0x44>
     a4c:	mov	x2, #0x9                   	// #9
     a50:	adrp	x1, 0 <parse_boolean>
     a54:	add	x1, x1, #0x0
     a58:	mov	x0, x19
     a5c:	bl	0 <strncasecmp>
     a60:	cbnz	w0, b70 <initialize_env+0x178>
     a64:	add	x1, x19, #0x9
     a68:	mov	w22, #0x1                   	// #1
     a6c:	ldrb	w2, [x1]
     a70:	ldrb	w0, [x1]
     a74:	ldrh	w0, [x20, x0, lsl #1]
     a78:	tbz	w0, #13, a8c <initialize_env+0x94>
     a7c:	ldrb	w2, [x1, #1]!
     a80:	and	x0, x2, #0xff
     a84:	ldrh	w0, [x20, x0, lsl #1]
     a88:	tbnz	w0, #13, a7c <initialize_env+0x84>
     a8c:	cmp	w2, #0x3a
     a90:	b.ne	cb8 <initialize_env+0x2c0>  // b.any
     a94:	add	x19, x1, #0x1
     a98:	ldrb	w0, [x1, #1]
     a9c:	ldrh	w0, [x20, x0, lsl #1]
     aa0:	tbz	w0, #13, ab0 <initialize_env+0xb8>
     aa4:	ldrb	w0, [x19, #1]!
     aa8:	ldrh	w0, [x20, x0, lsl #1]
     aac:	tbnz	w0, #13, aa4 <initialize_env+0xac>
     ab0:	mov	x2, #0x6                   	// #6
     ab4:	adrp	x1, 0 <parse_boolean>
     ab8:	add	x1, x1, #0x0
     abc:	mov	x0, x19
     ac0:	bl	0 <strncasecmp>
     ac4:	cbnz	w0, b9c <initialize_env+0x1a4>
     ac8:	adrp	x0, 0 <parse_boolean>
     acc:	mov	w1, #0x1                   	// #1
     ad0:	str	w1, [x0]
     ad4:	add	x19, x19, #0x6
     ad8:	cmp	w22, #0x1
     adc:	b.eq	af4 <initialize_env+0xfc>  // b.none
     ae0:	cbnz	w22, b08 <initialize_env+0x110>
     ae4:	adrp	x0, 0 <parse_boolean>
     ae8:	ldr	w0, [x0]
     aec:	cmp	w0, #0x1
     af0:	b.ne	b08 <initialize_env+0x110>  // b.any
     af4:	adrp	x0, 0 <parse_boolean>
     af8:	add	x0, x0, #0x0
     afc:	ldr	w1, [x0, #8]
     b00:	orr	w1, w1, #0x80000000
     b04:	str	w1, [x0, #8]
     b08:	ldr	x2, [x21]
     b0c:	ldrb	w1, [x19]
     b10:	ldrb	w0, [x19]
     b14:	ldrh	w0, [x2, x0, lsl #1]
     b18:	tbz	w0, #13, b2c <initialize_env+0x134>
     b1c:	ldrb	w1, [x19, #1]!
     b20:	and	x0, x1, #0xff
     b24:	ldrh	w0, [x2, x0, lsl #1]
     b28:	tbnz	w0, #13, b1c <initialize_env+0x124>
     b2c:	cbz	w1, c20 <initialize_env+0x228>
     b30:	cmp	w1, #0x2c
     b34:	b.ne	cb8 <initialize_env+0x2c0>  // b.any
     b38:	add	x20, x19, #0x1
     b3c:	ldrb	w1, [x19, #1]
     b40:	ldrb	w0, [x19, #1]
     b44:	ldrh	w0, [x2, x0, lsl #1]
     b48:	tbz	w0, #13, b5c <initialize_env+0x164>
     b4c:	ldrb	w1, [x20, #1]!
     b50:	and	x0, x1, #0xff
     b54:	ldrh	w0, [x2, x0, lsl #1]
     b58:	tbnz	w0, #13, b4c <initialize_env+0x154>
     b5c:	cbnz	w1, c40 <initialize_env+0x248>
     b60:	adrp	x0, 0 <parse_boolean>
     b64:	add	x0, x0, #0x0
     b68:	bl	0 <gomp_error>
     b6c:	b	cc4 <initialize_env+0x2cc>
     b70:	mov	x2, #0xc                   	// #12
     b74:	adrp	x1, 0 <parse_boolean>
     b78:	add	x1, x1, #0x0
     b7c:	mov	x0, x19
     b80:	bl	0 <strncasecmp>
     b84:	cbnz	w0, b94 <initialize_env+0x19c>
     b88:	add	x1, x19, #0xc
     b8c:	mov	w22, #0xffffffff            	// #-1
     b90:	b	a6c <initialize_env+0x74>
     b94:	mov	w22, #0x0                   	// #0
     b98:	b	ab0 <initialize_env+0xb8>
     b9c:	mov	x2, #0x7                   	// #7
     ba0:	adrp	x1, 0 <parse_boolean>
     ba4:	add	x1, x1, #0x0
     ba8:	mov	x0, x19
     bac:	bl	0 <strncasecmp>
     bb0:	cbnz	w0, bc8 <initialize_env+0x1d0>
     bb4:	adrp	x0, 0 <parse_boolean>
     bb8:	mov	w1, #0x2                   	// #2
     bbc:	str	w1, [x0]
     bc0:	add	x19, x19, #0x7
     bc4:	b	ad8 <initialize_env+0xe0>
     bc8:	mov	x2, #0x6                   	// #6
     bcc:	adrp	x1, 0 <parse_boolean>
     bd0:	add	x1, x1, #0x0
     bd4:	mov	x0, x19
     bd8:	bl	0 <strncasecmp>
     bdc:	cbnz	w0, bf4 <initialize_env+0x1fc>
     be0:	adrp	x0, 0 <parse_boolean>
     be4:	mov	w1, #0x3                   	// #3
     be8:	str	w1, [x0]
     bec:	add	x19, x19, #0x6
     bf0:	b	ad8 <initialize_env+0xe0>
     bf4:	mov	x2, #0x4                   	// #4
     bf8:	adrp	x1, 0 <parse_boolean>
     bfc:	add	x1, x1, #0x0
     c00:	mov	x0, x19
     c04:	bl	0 <strncasecmp>
     c08:	cbnz	w0, cb8 <initialize_env+0x2c0>
     c0c:	adrp	x0, 0 <parse_boolean>
     c10:	mov	w1, #0x4                   	// #4
     c14:	str	w1, [x0]
     c18:	add	x19, x19, #0x4
     c1c:	b	ad8 <initialize_env+0xe0>
     c20:	adrp	x0, 0 <parse_boolean>
     c24:	add	x0, x0, #0x0
     c28:	ldr	w1, [x0, #8]
     c2c:	and	w1, w1, #0x7fffffff
     c30:	cmp	w1, #0x1
     c34:	cset	w1, ne  // ne = any
     c38:	str	w1, [x0, #12]
     c3c:	b	cc4 <initialize_env+0x2cc>
     c40:	bl	0 <__errno_location>
     c44:	mov	x19, x0
     c48:	str	wzr, [x0]
     c4c:	mov	w2, #0xa                   	// #10
     c50:	add	x1, sp, #0xa8
     c54:	mov	x0, x20
     c58:	bl	0 <strtoul>
     c5c:	ldr	w1, [x19]
     c60:	cbnz	w1, b60 <initialize_env+0x168>
     c64:	ldr	x4, [x21]
     c68:	b	c74 <initialize_env+0x27c>
     c6c:	add	x1, x1, #0x1
     c70:	str	x1, [sp, #168]
     c74:	ldr	x1, [sp, #168]
     c78:	ldrb	w3, [x1]
     c7c:	ldrb	w2, [x1]
     c80:	ldrh	w2, [x4, x2, lsl #1]
     c84:	tbnz	w2, #13, c6c <initialize_env+0x274>
     c88:	cbnz	w3, b60 <initialize_env+0x168>
     c8c:	cmp	x0, w0, sxtw
     c90:	b.ne	b60 <initialize_env+0x168>  // b.any
     c94:	cbnz	x0, cac <initialize_env+0x2b4>
     c98:	adrp	x0, 0 <parse_boolean>
     c9c:	ldr	w0, [x0]
     ca0:	and	w0, w0, #0x7fffffff
     ca4:	cmp	w0, #0x1
     ca8:	cset	x0, ne  // ne = any
     cac:	adrp	x1, 0 <parse_boolean>
     cb0:	str	w0, [x1]
     cb4:	b	cc4 <initialize_env+0x2cc>
     cb8:	adrp	x0, 0 <parse_boolean>
     cbc:	add	x0, x0, #0x0
     cc0:	bl	0 <gomp_error>
     cc4:	adrp	x19, 0 <parse_boolean>
     cc8:	add	x19, x19, #0x0
     ccc:	add	x1, x19, #0x18
     cd0:	adrp	x0, 0 <parse_boolean>
     cd4:	add	x0, x0, #0x0
     cd8:	bl	0 <parse_boolean>
     cdc:	add	x1, x19, #0x19
     ce0:	adrp	x0, 0 <parse_boolean>
     ce4:	add	x0, x0, #0x0
     ce8:	bl	0 <parse_boolean>
     cec:	adrp	x20, 0 <parse_boolean>
     cf0:	add	x20, x20, #0x0
     cf4:	mov	x1, x20
     cf8:	adrp	x0, 0 <parse_boolean>
     cfc:	add	x0, x0, #0x0
     d00:	bl	0 <parse_boolean>
     d04:	adrp	x1, 1 <parse_boolean+0x1>
     d08:	add	x1, x1, #0x0
     d0c:	adrp	x0, 0 <parse_boolean>
     d10:	add	x0, x0, #0x0
     d14:	bl	0 <parse_boolean>
     d18:	mov	w3, #0x0                   	// #0
     d1c:	mov	w2, #0x1                   	// #1
     d20:	add	x1, x19, #0x10
     d24:	adrp	x0, 0 <parse_boolean>
     d28:	add	x0, x0, #0x0
     d2c:	bl	1ec <parse_int_1>
     d30:	mov	w3, #0x0                   	// #0
     d34:	mov	w2, #0x1                   	// #1
     d38:	add	x1, x20, #0x4
     d3c:	adrp	x0, 0 <parse_boolean>
     d40:	add	x0, x0, #0x0
     d44:	bl	1ec <parse_int_1>
     d48:	mov	w3, #0x0                   	// #0
     d4c:	mov	w2, #0x1                   	// #1
     d50:	add	x1, x19, #0x28
     d54:	adrp	x0, 0 <parse_boolean>
     d58:	add	x0, x0, #0x0
     d5c:	bl	e4 <parse_unsigned_long_1>
     d60:	mov	w3, #0x0                   	// #0
     d64:	mov	w2, #0x0                   	// #0
     d68:	add	x1, sp, #0xb8
     d6c:	adrp	x0, 0 <parse_boolean>
     d70:	add	x0, x0, #0x0
     d74:	bl	e4 <parse_unsigned_long_1>
     d78:	and	w0, w0, #0xff
     d7c:	cbz	w0, d9c <initialize_env+0x3a4>
     d80:	ldr	x0, [sp, #184]
     d84:	mov	x1, #0x7fffffff            	// #2147483647
     d88:	cmp	x0, x1
     d8c:	mov	x1, #0xffffffff            	// #4294967295
     d90:	csel	x0, x0, x1, ls  // ls = plast
     d94:	adrp	x1, 0 <parse_boolean>
     d98:	str	w0, [x1]
     d9c:	mov	w3, #0x1                   	// #1
     da0:	mov	w2, w3
     da4:	adrp	x1, 4 <parse_boolean+0x4>
     da8:	add	x1, x1, #0x0
     dac:	adrp	x0, 0 <parse_boolean>
     db0:	add	x0, x0, #0x0
     db4:	bl	1ec <parse_int_1>
     db8:	bl	0 <gomp_init_num_threads>
     dbc:	adrp	x0, 0 <parse_boolean>
     dc0:	add	x1, x0, #0x0
     dc4:	ldr	x0, [x0]
     dc8:	str	x0, [x1, #48]
     dcc:	adrp	x0, 0 <parse_boolean>
     dd0:	add	x0, x0, #0x0
     dd4:	bl	0 <getenv>
     dd8:	mov	x20, x0
     ddc:	cbz	x0, e28 <initialize_env+0x430>
     de0:	bl	0 <__ctype_b_loc>
     de4:	mov	x19, x0
     de8:	ldr	x2, [x0]
     dec:	ldrb	w0, [x20]
     df0:	and	x1, x0, #0xff
     df4:	ldrh	w1, [x2, x1, lsl #1]
     df8:	tbz	w1, #13, e04 <initialize_env+0x40c>
     dfc:	add	x20, x20, #0x1
     e00:	b	dec <initialize_env+0x3f4>
     e04:	mov	x23, #0x0                   	// #0
     e08:	cbnz	w0, e6c <initialize_env+0x474>
     e0c:	mov	x0, x23
     e10:	bl	0 <free>
     e14:	adrp	x1, 0 <parse_boolean>
     e18:	add	x1, x1, #0x0
     e1c:	adrp	x0, 0 <parse_boolean>
     e20:	add	x0, x0, #0x0
     e24:	bl	0 <gomp_error>
     e28:	adrp	x0, 0 <parse_boolean>
     e2c:	add	x1, x0, #0x0
     e30:	ldr	x1, [x1, #48]
     e34:	str	x1, [x0]
     e38:	adrp	x0, 0 <parse_boolean>
     e3c:	add	x0, x0, #0x0
     e40:	bl	0 <getenv>
     e44:	mov	x21, x0
     e48:	cbz	x0, 1238 <initialize_env+0x840>
     e4c:	bl	0 <__ctype_b_loc>
     e50:	ldr	x19, [x0]
     e54:	ldrb	w1, [x21]
     e58:	and	x0, x1, #0xff
     e5c:	ldrh	w0, [x19, x0, lsl #1]
     e60:	tbz	w0, #13, 1040 <initialize_env+0x648>
     e64:	add	x21, x21, #0x1
     e68:	b	e54 <initialize_env+0x45c>
     e6c:	bl	0 <__errno_location>
     e70:	mov	x22, x0
     e74:	str	wzr, [x0]
     e78:	mov	w2, #0xa                   	// #10
     e7c:	add	x1, sp, #0xa8
     e80:	mov	x0, x20
     e84:	bl	0 <strtoul>
     e88:	mov	x20, x0
     e8c:	ldr	w0, [x22]
     e90:	cbnz	w0, 1028 <initialize_env+0x630>
     e94:	cmp	x20, #0x0
     e98:	b.le	1030 <initialize_env+0x638>
     e9c:	ldr	x3, [x19]
     ea0:	ldr	x0, [sp, #168]
     ea4:	ldrb	w1, [x0]
     ea8:	ldrb	w2, [x0]
     eac:	ldrh	w2, [x3, x2, lsl #1]
     eb0:	tbz	w2, #13, ecc <initialize_env+0x4d4>
     eb4:	add	x0, x0, #0x1
     eb8:	str	x0, [sp, #168]
     ebc:	ldrb	w1, [x0], #1
     ec0:	and	x2, x1, #0xff
     ec4:	ldrh	w2, [x3, x2, lsl #1]
     ec8:	tbnz	w2, #13, eb8 <initialize_env+0x4c0>
     ecc:	cbz	w1, 101c <initialize_env+0x624>
     ed0:	cmp	w1, #0x2c
     ed4:	b.ne	1038 <initialize_env+0x640>  // b.any
     ed8:	mov	x26, #0x0                   	// #0
     edc:	mov	x24, #0x0                   	// #0
     ee0:	mov	x23, #0x0                   	// #0
     ee4:	mov	x28, #0x80                  	// #128
     ee8:	mov	w27, #0xa                   	// #10
     eec:	b	fa8 <initialize_env+0x5b0>
     ef0:	mov	x1, x28
     ef4:	mov	x0, x23
     ef8:	bl	0 <realloc>
     efc:	cbz	x0, fdc <initialize_env+0x5e4>
     f00:	str	x20, [x0]
     f04:	mov	x23, x0
     f08:	mov	x26, #0x10                  	// #16
     f0c:	mov	x24, #0x1                   	// #1
     f10:	ldr	x1, [x19]
     f14:	ldrb	w0, [x25, #1]
     f18:	ldrb	w2, [x25, #1]
     f1c:	ldrh	w2, [x1, x2, lsl #1]
     f20:	tbz	w2, #13, f34 <initialize_env+0x53c>
     f24:	ldrb	w0, [x21, #1]!
     f28:	and	x2, x0, #0xff
     f2c:	ldrh	w2, [x1, x2, lsl #1]
     f30:	tbnz	w2, #13, f24 <initialize_env+0x52c>
     f34:	cbz	w0, e0c <initialize_env+0x414>
     f38:	str	wzr, [x22]
     f3c:	mov	w2, w27
     f40:	add	x1, sp, #0xa8
     f44:	mov	x0, x21
     f48:	bl	0 <strtoul>
     f4c:	mov	x20, x0
     f50:	ldr	w0, [x22]
     f54:	cbnz	w0, e0c <initialize_env+0x414>
     f58:	cmp	x20, #0x0
     f5c:	b.le	e0c <initialize_env+0x414>
     f60:	add	x4, x24, #0x1
     f64:	str	x20, [x23, x24, lsl #3]
     f68:	ldr	x3, [x19]
     f6c:	ldr	x0, [sp, #168]
     f70:	ldrb	w1, [x0]
     f74:	ldrb	w2, [x0]
     f78:	ldrh	w2, [x3, x2, lsl #1]
     f7c:	tbz	w2, #13, f98 <initialize_env+0x5a0>
     f80:	add	x0, x0, #0x1
     f84:	str	x0, [sp, #168]
     f88:	ldrb	w1, [x0], #1
     f8c:	and	x2, x1, #0xff
     f90:	ldrh	w2, [x3, x2, lsl #1]
     f94:	tbnz	w2, #13, f84 <initialize_env+0x58c>
     f98:	cbz	w1, ffc <initialize_env+0x604>
     f9c:	cmp	w1, #0x2c
     fa0:	b.ne	e0c <initialize_env+0x414>  // b.any
     fa4:	mov	x24, x4
     fa8:	ldr	x25, [sp, #168]
     fac:	add	x21, x25, #0x1
     fb0:	cmp	x24, x26
     fb4:	b.ne	f10 <initialize_env+0x518>  // b.any
     fb8:	cbz	x26, ef0 <initialize_env+0x4f8>
     fbc:	lsl	x20, x26, #1
     fc0:	lsl	x1, x26, #4
     fc4:	mov	x0, x23
     fc8:	bl	0 <realloc>
     fcc:	cbz	x0, fdc <initialize_env+0x5e4>
     fd0:	mov	x26, x20
     fd4:	mov	x23, x0
     fd8:	b	f10 <initialize_env+0x518>
     fdc:	mov	x0, x23
     fe0:	bl	0 <free>
     fe4:	adrp	x1, 0 <parse_boolean>
     fe8:	add	x1, x1, #0x0
     fec:	adrp	x0, 0 <parse_boolean>
     ff0:	add	x0, x0, #0x0
     ff4:	bl	0 <gomp_error>
     ff8:	b	e28 <initialize_env+0x430>
     ffc:	ldr	x1, [x23]
    1000:	adrp	x0, 0 <parse_boolean>
    1004:	str	x1, [x0]
    1008:	adrp	x0, 8 <parse_boolean+0x8>
    100c:	str	x23, [x0]
    1010:	adrp	x0, 8 <parse_boolean+0x8>
    1014:	str	x4, [x0]
    1018:	b	e38 <initialize_env+0x440>
    101c:	adrp	x0, 0 <parse_boolean>
    1020:	str	x20, [x0]
    1024:	b	e38 <initialize_env+0x440>
    1028:	mov	x23, #0x0                   	// #0
    102c:	b	e0c <initialize_env+0x414>
    1030:	mov	x23, #0x0                   	// #0
    1034:	b	e0c <initialize_env+0x414>
    1038:	mov	x23, #0x0                   	// #0
    103c:	b	e0c <initialize_env+0x414>
    1040:	cbz	w1, 12bc <initialize_env+0x8c4>
    1044:	adrp	x20, 0 <parse_boolean>
    1048:	add	x20, x20, #0x0
    104c:	add	x20, x20, #0x38
    1050:	mov	w22, #0x0                   	// #0
    1054:	ldrb	w23, [x20, #7]
    1058:	mov	x2, x23
    105c:	mov	x1, x20
    1060:	mov	x0, x21
    1064:	bl	0 <strncasecmp>
    1068:	cbz	w0, 1084 <initialize_env+0x68c>
    106c:	add	w22, w22, #0x1
    1070:	add	x20, x20, #0xc
    1074:	cmp	w22, #0x5
    1078:	b.ne	1054 <initialize_env+0x65c>  // b.any
    107c:	mov	x25, #0x0                   	// #0
    1080:	b	121c <initialize_env+0x824>
    1084:	sxtw	x0, w22
    1088:	adrp	x1, 0 <parse_boolean>
    108c:	add	x1, x1, #0x0
    1090:	mov	x2, #0xc                   	// #12
    1094:	madd	x0, x0, x2, x1
    1098:	ldrb	w26, [x0, #64]
    109c:	add	x20, x21, x23
    10a0:	cmp	w22, #0x5
    10a4:	b.eq	12c4 <initialize_env+0x8cc>  // b.none
    10a8:	ldrb	w1, [x21, x23]
    10ac:	ldrb	w0, [x21, x23]
    10b0:	ldrh	w0, [x19, x0, lsl #1]
    10b4:	tbz	w0, #13, 10c8 <initialize_env+0x6d0>
    10b8:	ldrb	w1, [x20, #1]!
    10bc:	and	x0, x1, #0xff
    10c0:	ldrh	w0, [x19, x0, lsl #1]
    10c4:	tbnz	w0, #13, 10b8 <initialize_env+0x6c0>
    10c8:	cbz	w1, 1260 <initialize_env+0x868>
    10cc:	cmp	w1, #0x2c
    10d0:	ccmp	w26, #0x1, #0x0, eq  // eq = none
    10d4:	b.hi	10e0 <initialize_env+0x6e8>  // b.pmore
    10d8:	mov	x25, #0x0                   	// #0
    10dc:	b	121c <initialize_env+0x824>
    10e0:	mov	x27, #0x0                   	// #0
    10e4:	mov	x21, #0x0                   	// #0
    10e8:	mov	x25, #0x0                   	// #0
    10ec:	adrp	x28, 0 <parse_boolean>
    10f0:	add	x28, x28, #0x0
    10f4:	add	x0, x28, #0x38
    10f8:	str	x0, [sp, #104]
    10fc:	b	11b8 <initialize_env+0x7c0>
    1100:	cbz	x27, 1120 <initialize_env+0x728>
    1104:	lsl	x27, x27, #1
    1108:	mov	x1, x27
    110c:	mov	x0, x25
    1110:	bl	0 <realloc>
    1114:	cbz	x0, 1144 <initialize_env+0x74c>
    1118:	mov	x25, x0
    111c:	b	11c8 <initialize_env+0x7d0>
    1120:	mov	x1, #0x10                  	// #16
    1124:	mov	x0, x25
    1128:	bl	0 <realloc>
    112c:	cbz	x0, 1144 <initialize_env+0x74c>
    1130:	strb	w26, [x0]
    1134:	mov	x25, x0
    1138:	mov	x27, #0x10                  	// #16
    113c:	mov	x24, #0x1                   	// #1
    1140:	b	11c8 <initialize_env+0x7d0>
    1144:	mov	x0, x25
    1148:	bl	0 <free>
    114c:	adrp	x1, 0 <parse_boolean>
    1150:	add	x1, x1, #0x0
    1154:	adrp	x0, 0 <parse_boolean>
    1158:	add	x0, x0, #0x0
    115c:	bl	0 <gomp_error>
    1160:	b	1238 <initialize_env+0x840>
    1164:	sbfiz	x0, x21, #1, #32
    1168:	add	x0, x0, w21, sxtw
    116c:	ldr	x1, [sp, #104]
    1170:	add	x0, x1, x0, lsl #2
    1174:	ldrb	w26, [x0, #8]
    1178:	add	x20, x22, x23
    117c:	cmp	w21, #0x5
    1180:	b.eq	121c <initialize_env+0x824>  // b.none
    1184:	add	x21, x24, #0x1
    1188:	strb	w26, [x25, x24]
    118c:	ldrb	w0, [x22, x23]
    1190:	and	x1, x0, #0xff
    1194:	ldrh	w1, [x19, x1, lsl #1]
    1198:	tbz	w1, #13, 11ac <initialize_env+0x7b4>
    119c:	ldrb	w0, [x20, #1]!
    11a0:	and	x1, x0, #0xff
    11a4:	ldrh	w1, [x19, x1, lsl #1]
    11a8:	tbnz	w1, #13, 119c <initialize_env+0x7a4>
    11ac:	cbz	w0, 1240 <initialize_env+0x848>
    11b0:	cmp	w0, #0x2c
    11b4:	b.ne	121c <initialize_env+0x824>  // b.any
    11b8:	add	x22, x20, #0x1
    11bc:	mov	x24, x21
    11c0:	cmp	x21, x27
    11c4:	b.eq	1100 <initialize_env+0x708>  // b.none
    11c8:	ldrb	w0, [x20, #1]
    11cc:	and	x1, x0, #0xff
    11d0:	ldrh	w1, [x19, x1, lsl #1]
    11d4:	tbz	w1, #13, 11e8 <initialize_env+0x7f0>
    11d8:	ldrb	w0, [x22, #1]!
    11dc:	and	x1, x0, #0xff
    11e0:	ldrh	w1, [x19, x1, lsl #1]
    11e4:	tbnz	w1, #13, 11d8 <initialize_env+0x7e0>
    11e8:	cbz	w0, 121c <initialize_env+0x824>
    11ec:	add	x20, x28, #0x50
    11f0:	mov	w21, #0x2                   	// #2
    11f4:	ldrb	w23, [x20, #7]
    11f8:	mov	x2, x23
    11fc:	mov	x1, x20
    1200:	mov	x0, x22
    1204:	bl	0 <strncasecmp>
    1208:	cbz	w0, 1164 <initialize_env+0x76c>
    120c:	add	w21, w21, #0x1
    1210:	add	x20, x20, #0xc
    1214:	cmp	w21, #0x5
    1218:	b.ne	11f4 <initialize_env+0x7fc>  // b.any
    121c:	mov	x0, x25
    1220:	bl	0 <free>
    1224:	adrp	x1, 0 <parse_boolean>
    1228:	add	x1, x1, #0x0
    122c:	adrp	x0, 0 <parse_boolean>
    1230:	add	x0, x0, #0x0
    1234:	bl	0 <gomp_error>
    1238:	str	wzr, [sp, #116]
    123c:	b	127c <initialize_env+0x884>
    1240:	ldrb	w1, [x25]
    1244:	adrp	x0, 0 <parse_boolean>
    1248:	strb	w1, [x0]
    124c:	adrp	x0, 8 <parse_boolean+0x8>
    1250:	str	x25, [x0]
    1254:	adrp	x0, 8 <parse_boolean+0x8>
    1258:	str	x21, [x0]
    125c:	b	1268 <initialize_env+0x870>
    1260:	adrp	x0, 0 <parse_boolean>
    1264:	strb	w26, [x0]
    1268:	adrp	x0, 0 <parse_boolean>
    126c:	ldrb	w0, [x0]
    1270:	cmp	w0, #0x0
    1274:	cset	w0, eq  // eq = none
    1278:	str	w0, [sp, #116]
    127c:	adrp	x0, 0 <parse_boolean>
    1280:	add	x0, x0, #0x0
    1284:	bl	0 <getenv>
    1288:	str	x0, [sp, #144]
    128c:	cbz	x0, 1484 <initialize_env+0xa8c>
    1290:	bl	0 <__ctype_b_loc>
    1294:	mov	x21, x0
    1298:	ldr	x20, [x0]
    129c:	ldr	x19, [sp, #144]
    12a0:	ldrb	w1, [x19]
    12a4:	and	x0, x1, #0xff
    12a8:	ldrh	w0, [x20, x0, lsl #1]
    12ac:	tbz	w0, #13, 12cc <initialize_env+0x8d4>
    12b0:	add	x19, x19, #0x1
    12b4:	str	x19, [sp, #144]
    12b8:	b	129c <initialize_env+0x8a4>
    12bc:	mov	x25, #0x0                   	// #0
    12c0:	b	121c <initialize_env+0x824>
    12c4:	mov	x25, #0x0                   	// #0
    12c8:	b	121c <initialize_env+0x824>
    12cc:	cbz	w1, 1458 <initialize_env+0xa60>
    12d0:	mov	x2, #0x7                   	// #7
    12d4:	adrp	x1, 0 <parse_boolean>
    12d8:	add	x1, x1, #0x0
    12dc:	mov	x0, x19
    12e0:	bl	0 <strncasecmp>
    12e4:	cbnz	w0, 13f4 <initialize_env+0x9fc>
    12e8:	add	x19, x19, #0x7
    12ec:	str	x19, [sp, #144]
    12f0:	mov	w19, #0x1                   	// #1
    12f4:	ldr	x1, [sp, #144]
    12f8:	mov	x2, x1
    12fc:	ldrb	w3, [x2], #1
    1300:	and	x0, x3, #0xff
    1304:	ldrh	w0, [x20, x0, lsl #1]
    1308:	tbz	w0, #13, 1324 <initialize_env+0x92c>
    130c:	mov	x1, x2
    1310:	str	x2, [sp, #144]
    1314:	ldrb	w3, [x2], #1
    1318:	and	x0, x3, #0xff
    131c:	ldrh	w0, [x20, x0, lsl #1]
    1320:	tbnz	w0, #13, 130c <initialize_env+0x914>
    1324:	cbz	w3, 14b8 <initialize_env+0xac0>
    1328:	add	x22, x1, #0x1
    132c:	str	x22, [sp, #144]
    1330:	ldrb	w0, [x1]
    1334:	cmp	w0, #0x28
    1338:	b.ne	1458 <initialize_env+0xa60>  // b.any
    133c:	ldrb	w0, [x1, #1]
    1340:	ldrh	w0, [x20, x0, lsl #1]
    1344:	tbz	w0, #13, 1364 <initialize_env+0x96c>
    1348:	add	x1, x1, #0x2
    134c:	mov	x22, x1
    1350:	str	x1, [sp, #144]
    1354:	add	x1, x1, #0x1
    1358:	ldrb	w0, [x22]
    135c:	ldrh	w0, [x20, x0, lsl #1]
    1360:	tbnz	w0, #13, 134c <initialize_env+0x954>
    1364:	bl	0 <__errno_location>
    1368:	mov	x20, x0
    136c:	str	wzr, [x0]
    1370:	mov	w2, #0xa                   	// #10
    1374:	add	x1, sp, #0x98
    1378:	mov	x0, x22
    137c:	bl	0 <strtoul>
    1380:	mov	x1, x0
    1384:	ldr	w0, [x20]
    1388:	cbnz	w0, 1458 <initialize_env+0xa60>
    138c:	ldr	x6, [sp, #152]
    1390:	str	x6, [sp, #144]
    1394:	ldr	x5, [x21]
    1398:	ldrb	w3, [x6]
    139c:	ldrb	w0, [x6]
    13a0:	ldrh	w0, [x5, x0, lsl #1]
    13a4:	tbz	w0, #13, 13c4 <initialize_env+0x9cc>
    13a8:	add	x2, x6, #0x1
    13ac:	mov	x6, x2
    13b0:	str	x2, [sp, #144]
    13b4:	ldrb	w3, [x2], #1
    13b8:	and	x4, x3, #0xff
    13bc:	ldrh	w4, [x5, x4, lsl #1]
    13c0:	tbnz	w4, #13, 13ac <initialize_env+0x9b4>
    13c4:	cmp	w3, #0x29
    13c8:	b.ne	1458 <initialize_env+0xa60>  // b.any
    13cc:	add	x6, x6, #0x1
    13d0:	str	x6, [sp, #144]
    13d4:	ldr	x2, [sp, #144]
    13d8:	ldrb	w3, [x2]
    13dc:	ldrb	w0, [x2]
    13e0:	ldrh	w0, [x5, x0, lsl #1]
    13e4:	tbz	w0, #13, 1454 <initialize_env+0xa5c>
    13e8:	add	x2, x2, #0x1
    13ec:	str	x2, [sp, #144]
    13f0:	b	13d4 <initialize_env+0x9dc>
    13f4:	mov	x2, #0x5                   	// #5
    13f8:	adrp	x1, 0 <parse_boolean>
    13fc:	add	x1, x1, #0x0
    1400:	mov	x0, x19
    1404:	bl	0 <strncasecmp>
    1408:	cbnz	w0, 141c <initialize_env+0xa24>
    140c:	add	x19, x19, #0x5
    1410:	str	x19, [sp, #144]
    1414:	mov	w19, #0x2                   	// #2
    1418:	b	12f4 <initialize_env+0x8fc>
    141c:	mov	x2, #0x7                   	// #7
    1420:	adrp	x1, 0 <parse_boolean>
    1424:	add	x1, x1, #0x0
    1428:	mov	x0, x19
    142c:	bl	0 <strncasecmp>
    1430:	cbnz	w0, 1444 <initialize_env+0xa4c>
    1434:	add	x19, x19, #0x7
    1438:	str	x19, [sp, #144]
    143c:	mov	w19, #0x3                   	// #3
    1440:	b	12f4 <initialize_env+0x8fc>
    1444:	str	x19, [sp, #152]
    1448:	mov	x19, #0x0                   	// #0
    144c:	mov	w20, #0x0                   	// #0
    1450:	b	152c <initialize_env+0xb34>
    1454:	cbz	w3, 14bc <initialize_env+0xac4>
    1458:	adrp	x19, 8 <parse_boolean+0x8>
    145c:	ldr	x0, [x19]
    1460:	bl	0 <free>
    1464:	str	xzr, [x19]
    1468:	adrp	x0, 8 <parse_boolean+0x8>
    146c:	str	xzr, [x0]
    1470:	adrp	x1, 0 <parse_boolean>
    1474:	add	x1, x1, #0x0
    1478:	adrp	x0, 0 <parse_boolean>
    147c:	add	x0, x0, #0x0
    1480:	bl	0 <gomp_error>
    1484:	adrp	x0, 0 <parse_boolean>
    1488:	add	x0, x0, #0x0
    148c:	bl	0 <getenv>
    1490:	str	x0, [sp, #120]
    1494:	cbz	x0, 1924 <initialize_env+0xf2c>
    1498:	bl	0 <__ctype_b_loc>
    149c:	mov	x23, x0
    14a0:	str	xzr, [sp, #104]
    14a4:	mov	w25, #0x0                   	// #0
    14a8:	mov	x27, #0xffff                	// #65535
    14ac:	adrp	x24, 8 <parse_boolean+0x8>
    14b0:	ldr	x19, [sp, #120]
    14b4:	b	1724 <initialize_env+0xd2c>
    14b8:	mov	x1, #0xffffffffffffffff    	// #-1
    14bc:	ldr	w0, [sp, #116]
    14c0:	cbnz	w0, 1484 <initialize_env+0xa8c>
    14c4:	mov	w2, #0x0                   	// #0
    14c8:	mov	w0, w19
    14cc:	bl	0 <gomp_affinity_init_level>
    14d0:	ands	w0, w0, #0xff
    14d4:	str	w0, [sp, #116]
    14d8:	b.eq	1484 <initialize_env+0xa8c>  // b.none
    14dc:	adrp	x0, 0 <parse_boolean>
    14e0:	ldrb	w0, [x0]
    14e4:	cbnz	w0, 1714 <initialize_env+0xd1c>
    14e8:	adrp	x0, 0 <parse_boolean>
    14ec:	mov	w1, #0x1                   	// #1
    14f0:	strb	w1, [x0]
    14f4:	mov	w0, #0x1                   	// #1
    14f8:	str	w0, [sp, #116]
    14fc:	b	1484 <initialize_env+0xa8c>
    1500:	ldr	x0, [sp, #160]
    1504:	add	x19, x19, x0
    1508:	cmp	x19, #0x10, lsl #12
    150c:	b.hi	1458 <initialize_env+0xa60>  // b.pmore
    1510:	ldr	x0, [sp, #152]
    1514:	ldrb	w1, [x0]
    1518:	cbz	w1, 1560 <initialize_env+0xb68>
    151c:	cmp	w1, #0x2c
    1520:	b.ne	1458 <initialize_env+0xa60>  // b.any
    1524:	add	x0, x0, #0x1
    1528:	str	x0, [sp, #152]
    152c:	add	x3, sp, #0xa8
    1530:	add	x2, sp, #0xa0
    1534:	add	x1, sp, #0x8f
    1538:	add	x0, sp, #0x98
    153c:	bl	248 <parse_one_place>
    1540:	and	w0, w0, #0xff
    1544:	cbz	w0, 1458 <initialize_env+0xa60>
    1548:	ldrb	w0, [sp, #143]
    154c:	cbz	w0, 1500 <initialize_env+0xb08>
    1550:	cbnz	w20, 1508 <initialize_env+0xb10>
    1554:	add	x19, x19, #0x1
    1558:	mov	w20, w0
    155c:	b	1508 <initialize_env+0xb10>
    1560:	ldr	w0, [sp, #116]
    1564:	cbnz	w0, 1484 <initialize_env+0xa8c>
    1568:	adrp	x0, 8 <parse_boolean+0x8>
    156c:	str	xzr, [x0]
    1570:	mov	w1, #0x0                   	// #0
    1574:	mov	x0, x19
    1578:	bl	0 <gomp_affinity_alloc>
    157c:	adrp	x1, 8 <parse_boolean+0x8>
    1580:	str	x0, [x1]
    1584:	cbz	x0, 1484 <initialize_env+0xa8c>
    1588:	adrp	x20, 8 <parse_boolean+0x8>
    158c:	b	1624 <initialize_env+0xc2c>
    1590:	mov	x19, #0x0                   	// #0
    1594:	adrp	x21, 8 <parse_boolean+0x8>
    1598:	ldr	x0, [x20]
    159c:	cmp	x19, x0
    15a0:	b.cs	15c4 <initialize_env+0xbcc>  // b.hs, b.nlast
    15a4:	ldr	x2, [x21]
    15a8:	ldr	x1, [x2, x0, lsl #3]
    15ac:	ldr	x0, [x2, x19, lsl #3]
    15b0:	bl	0 <gomp_affinity_same_place>
    15b4:	and	w0, w0, #0xff
    15b8:	cbnz	w0, 15c4 <initialize_env+0xbcc>
    15bc:	add	x19, x19, #0x1
    15c0:	b	1598 <initialize_env+0xba0>
    15c4:	ldr	x1, [x20]
    15c8:	cmp	x19, x1
    15cc:	b.eq	1678 <initialize_env+0xc80>  // b.none
    15d0:	adrp	x21, 8 <parse_boolean+0x8>
    15d4:	ldr	x0, [x21]
    15d8:	lsl	x3, x19, #3
    15dc:	ldr	x22, [x0, x3]
    15e0:	sub	x1, x1, #0x1
    15e4:	sub	x2, x1, x19
    15e8:	add	x1, x3, #0x8
    15ec:	lsl	x2, x2, #3
    15f0:	add	x1, x0, x1
    15f4:	add	x0, x0, x19, lsl #3
    15f8:	bl	0 <memmove>
    15fc:	ldr	x0, [x20]
    1600:	sub	x0, x0, #0x1
    1604:	str	x0, [x20]
    1608:	ldr	x1, [x21]
    160c:	str	x22, [x1, x0, lsl #3]
    1610:	ldr	x0, [sp, #144]
    1614:	ldrb	w1, [x0]
    1618:	cbz	w1, 16e4 <initialize_env+0xcec>
    161c:	add	x0, x0, #0x1
    1620:	str	x0, [sp, #144]
    1624:	ldr	x1, [x20]
    1628:	adrp	x0, 8 <parse_boolean+0x8>
    162c:	ldr	x0, [x0]
    1630:	ldr	x0, [x0, x1, lsl #3]
    1634:	bl	0 <gomp_affinity_init_place>
    1638:	add	x3, sp, #0xa8
    163c:	add	x2, sp, #0xa0
    1640:	add	x1, sp, #0x8f
    1644:	add	x0, sp, #0x90
    1648:	bl	248 <parse_one_place>
    164c:	and	w0, w0, #0xff
    1650:	cbz	w0, 1458 <initialize_env+0xa60>
    1654:	ldrb	w0, [sp, #143]
    1658:	cbnz	w0, 1590 <initialize_env+0xb98>
    165c:	ldr	x0, [sp, #160]
    1660:	cmp	x0, #0x1
    1664:	b.ne	16c8 <initialize_env+0xcd0>  // b.any
    1668:	ldr	x0, [x20]
    166c:	add	x0, x0, #0x1
    1670:	str	x0, [x20]
    1674:	b	1610 <initialize_env+0xc18>
    1678:	adrp	x0, 0 <parse_boolean>
    167c:	add	x0, x0, #0x0
    1680:	bl	0 <gomp_error>
    1684:	b	1458 <initialize_env+0xa60>
    1688:	add	x19, x19, #0x1
    168c:	ldr	x0, [sp, #160]
    1690:	sub	x1, x0, #0x1
    1694:	cmp	x19, x1
    1698:	b.cs	16d4 <initialize_env+0xcdc>  // b.hs, b.nlast
    169c:	ldr	x3, [x21]
    16a0:	ldr	x0, [x20]
    16a4:	add	x0, x19, x0
    16a8:	add	x4, x0, #0x1
    16ac:	ldr	x2, [sp, #168]
    16b0:	ldr	x1, [x3, x0, lsl #3]
    16b4:	ldr	x0, [x3, x4, lsl #3]
    16b8:	bl	0 <gomp_affinity_copy_place>
    16bc:	and	w0, w0, #0xff
    16c0:	cbnz	w0, 1688 <initialize_env+0xc90>
    16c4:	b	1458 <initialize_env+0xa60>
    16c8:	mov	x19, #0x0                   	// #0
    16cc:	adrp	x21, 8 <parse_boolean+0x8>
    16d0:	b	168c <initialize_env+0xc94>
    16d4:	ldr	x1, [x20]
    16d8:	add	x0, x1, x0
    16dc:	str	x0, [x20]
    16e0:	b	1610 <initialize_env+0xc18>
    16e4:	adrp	x0, 8 <parse_boolean+0x8>
    16e8:	ldr	x0, [x0]
    16ec:	cbz	x0, 1704 <initialize_env+0xd0c>
    16f0:	mov	w0, #0x0                   	// #0
    16f4:	bl	0 <gomp_affinity_finalize_place_list>
    16f8:	and	w0, w0, #0xff
    16fc:	cbnz	w0, 14dc <initialize_env+0xae4>
    1700:	b	1458 <initialize_env+0xa60>
    1704:	adrp	x0, 0 <parse_boolean>
    1708:	add	x0, x0, #0x0
    170c:	bl	0 <gomp_error>
    1710:	b	1458 <initialize_env+0xa60>
    1714:	mov	w0, #0x1                   	// #1
    1718:	str	w0, [sp, #116]
    171c:	b	1484 <initialize_env+0xa8c>
    1720:	add	x19, x19, #0x1
    1724:	ldrb	w1, [x19]
    1728:	ldr	x0, [x23]
    172c:	ldrh	w0, [x0, x1, lsl #1]
    1730:	tbnz	w0, #13, 1720 <initialize_env+0xd28>
    1734:	bl	0 <__errno_location>
    1738:	mov	x26, x0
    173c:	str	wzr, [x0]
    1740:	mov	w2, #0x0                   	// #0
    1744:	add	x1, sp, #0xa8
    1748:	mov	x0, x19
    174c:	bl	0 <strtoul>
    1750:	mov	x21, x0
    1754:	ldr	w0, [x26]
    1758:	cmp	w0, #0x0
    175c:	ccmp	x21, x27, #0x2, eq  // eq = none
    1760:	b.hi	1918 <initialize_env+0xf20>  // b.pmore
    1764:	ldr	x19, [sp, #168]
    1768:	ldrb	w0, [x19]
    176c:	cmp	w0, #0x2d
    1770:	b.eq	17fc <initialize_env+0xe04>  // b.none
    1774:	mov	x0, #0x1                   	// #1
    1778:	mov	x22, x0
    177c:	mov	x20, #0x0                   	// #0
    1780:	cbnz	w25, 184c <initialize_env+0xe54>
    1784:	ldr	x1, [sp, #104]
    1788:	add	x0, x1, x0
    178c:	str	x0, [sp, #104]
    1790:	ldr	x1, [x23]
    1794:	ldrb	w0, [x19]
    1798:	and	x2, x0, #0xff
    179c:	ldrh	w2, [x1, x2, lsl #1]
    17a0:	tbz	w2, #13, 17b4 <initialize_env+0xdbc>
    17a4:	ldrb	w0, [x19, #1]!
    17a8:	and	x2, x0, #0xff
    17ac:	ldrh	w2, [x1, x2, lsl #1]
    17b0:	tbnz	w2, #13, 17a4 <initialize_env+0xdac>
    17b4:	cmp	w0, #0x2c
    17b8:	b.eq	18dc <initialize_env+0xee4>  // b.none
    17bc:	cbnz	w0, 1724 <initialize_env+0xd2c>
    17c0:	add	w25, w25, #0x1
    17c4:	cmp	w25, #0x2
    17c8:	b.eq	18e4 <initialize_env+0xeec>  // b.none
    17cc:	cmp	w25, #0x1
    17d0:	b.ne	14b0 <initialize_env+0xab8>  // b.any
    17d4:	ldr	w0, [sp, #116]
    17d8:	cbnz	w0, 1924 <initialize_env+0xf2c>
    17dc:	str	xzr, [x24]
    17e0:	mov	w1, #0x1                   	// #1
    17e4:	ldr	x0, [sp, #104]
    17e8:	bl	0 <gomp_affinity_alloc>
    17ec:	adrp	x1, 8 <parse_boolean+0x8>
    17f0:	str	x0, [x1]
    17f4:	cbnz	x0, 14b0 <initialize_env+0xab8>
    17f8:	b	1924 <initialize_env+0xf2c>
    17fc:	mov	w2, #0x0                   	// #0
    1800:	add	x1, sp, #0xa8
    1804:	add	x0, x19, #0x1
    1808:	bl	0 <strtoul>
    180c:	mov	x20, x0
    1810:	ldr	w0, [x26]
    1814:	cbnz	w0, 1918 <initialize_env+0xf20>
    1818:	cmp	x20, x27
    181c:	ccmp	x21, x20, #0x2, ls  // ls = plast
    1820:	b.hi	1918 <initialize_env+0xf20>  // b.pmore
    1824:	ldr	x19, [sp, #168]
    1828:	ldrb	w0, [x19]
    182c:	mov	x22, #0x1                   	// #1
    1830:	cmp	w0, #0x3a
    1834:	b.eq	1854 <initialize_env+0xe5c>  // b.none
    1838:	sub	x20, x20, x21
    183c:	udiv	x20, x20, x22
    1840:	add	x0, x20, #0x1
    1844:	cbz	w25, 1784 <initialize_env+0xd8c>
    1848:	cbz	x0, 1790 <initialize_env+0xd98>
    184c:	adrp	x28, 8 <parse_boolean+0x8>
    1850:	b	18a4 <initialize_env+0xeac>
    1854:	mov	w2, #0x0                   	// #0
    1858:	add	x1, sp, #0xa8
    185c:	add	x0, x19, x22
    1860:	bl	0 <strtoul>
    1864:	mov	x22, x0
    1868:	ldr	w0, [x26]
    186c:	cbnz	w0, 1918 <initialize_env+0xf20>
    1870:	sub	x1, x22, #0x1
    1874:	mov	x0, #0xfffe                	// #65534
    1878:	cmp	x1, x0
    187c:	b.hi	1918 <initialize_env+0xf20>  // b.pmore
    1880:	ldr	x19, [sp, #168]
    1884:	b	1838 <initialize_env+0xe40>
    1888:	ldr	x0, [x24]
    188c:	add	x0, x0, #0x1
    1890:	str	x0, [x24]
    1894:	add	x21, x21, x22
    1898:	sub	x20, x20, #0x1
    189c:	cmn	x20, #0x1
    18a0:	b.eq	1790 <initialize_env+0xd98>  // b.none
    18a4:	ldr	x1, [x24]
    18a8:	ldr	x0, [x28]
    18ac:	ldr	x26, [x0, x1, lsl #3]
    18b0:	mov	x0, x26
    18b4:	bl	0 <gomp_affinity_init_place>
    18b8:	mov	w4, #0x1                   	// #1
    18bc:	mov	x3, #0x0                   	// #0
    18c0:	mov	x2, #0x1                   	// #1
    18c4:	mov	x1, x21
    18c8:	mov	x0, x26
    18cc:	bl	0 <gomp_affinity_add_cpus>
    18d0:	and	w0, w0, #0xff
    18d4:	cbz	w0, 1894 <initialize_env+0xe9c>
    18d8:	b	1888 <initialize_env+0xe90>
    18dc:	add	x19, x19, #0x1
    18e0:	b	1724 <initialize_env+0xd2c>
    18e4:	adrp	x0, 8 <parse_boolean+0x8>
    18e8:	ldr	x0, [x0]
    18ec:	cbz	x0, 1904 <initialize_env+0xf0c>
    18f0:	adrp	x0, 0 <parse_boolean>
    18f4:	ldrb	w0, [x0]
    18f8:	cbz	w0, 1974 <initialize_env+0xf7c>
    18fc:	bl	0 <gomp_init_affinity>
    1900:	b	1930 <initialize_env+0xf38>
    1904:	adrp	x19, 8 <parse_boolean+0x8>
    1908:	ldr	x0, [x19]
    190c:	bl	0 <free>
    1910:	str	xzr, [x19]
    1914:	b	1924 <initialize_env+0xf2c>
    1918:	adrp	x0, 0 <parse_boolean>
    191c:	add	x0, x0, #0x0
    1920:	bl	0 <gomp_error>
    1924:	adrp	x0, 0 <parse_boolean>
    1928:	ldrb	w0, [x0]
    192c:	cbnz	w0, 18fc <initialize_env+0xf04>
    1930:	adrp	x0, 0 <parse_boolean>
    1934:	add	x0, x0, #0x0
    1938:	bl	0 <getenv>
    193c:	mov	x19, x0
    1940:	cbz	x0, 1954 <initialize_env+0xf5c>
    1944:	bl	0 <strlen>
    1948:	mov	x1, x0
    194c:	mov	x0, x19
    1950:	bl	0 <gomp_set_affinity_format>
    1954:	adrp	x0, 0 <parse_boolean>
    1958:	add	x0, x0, #0x0
    195c:	bl	0 <getenv>
    1960:	mov	x19, x0
    1964:	cbz	x0, 1a30 <initialize_env+0x1038>
    1968:	bl	0 <__ctype_b_loc>
    196c:	ldr	x21, [x0]
    1970:	b	1988 <initialize_env+0xf90>
    1974:	adrp	x0, 0 <parse_boolean>
    1978:	mov	w1, #0x1                   	// #1
    197c:	strb	w1, [x0]
    1980:	b	18fc <initialize_env+0xf04>
    1984:	add	x19, x19, #0x1
    1988:	ldrb	w0, [x19]
    198c:	ldrh	w0, [x21, x0, lsl #1]
    1990:	tbnz	w0, #13, 1984 <initialize_env+0xf8c>
    1994:	mov	x2, #0x6                   	// #6
    1998:	adrp	x1, 0 <parse_boolean>
    199c:	add	x1, x1, #0x0
    19a0:	mov	x0, x19
    19a4:	bl	0 <strncasecmp>
    19a8:	cbnz	w0, 19f0 <initialize_env+0xff8>
    19ac:	add	x19, x19, #0x6
    19b0:	mov	w20, #0x1                   	// #1
    19b4:	ldrb	w0, [x19]
    19b8:	and	x1, x0, #0xff
    19bc:	ldrh	w1, [x21, x1, lsl #1]
    19c0:	tbz	w1, #13, 19d4 <initialize_env+0xfdc>
    19c4:	ldrb	w0, [x19, #1]!
    19c8:	and	x1, x0, #0xff
    19cc:	ldrh	w1, [x21, x1, lsl #1]
    19d0:	tbnz	w1, #13, 19c4 <initialize_env+0xfcc>
    19d4:	cbnz	w0, 1a24 <initialize_env+0x102c>
    19d8:	adrp	x0, 0 <parse_boolean>
    19dc:	add	x0, x0, #0x0
    19e0:	bl	0 <getenv>
    19e4:	mov	x19, x0
    19e8:	cbnz	x0, 1a48 <initialize_env+0x1050>
    19ec:	b	1bec <initialize_env+0x11f4>
    19f0:	mov	x2, #0x7                   	// #7
    19f4:	adrp	x1, 0 <parse_boolean>
    19f8:	add	x1, x1, #0x0
    19fc:	mov	x0, x19
    1a00:	bl	0 <strncasecmp>
    1a04:	mov	w20, w0
    1a08:	cbnz	w0, 1a14 <initialize_env+0x101c>
    1a0c:	add	x19, x19, #0x7
    1a10:	b	19b4 <initialize_env+0xfbc>
    1a14:	mov	w20, #0xffffffff            	// #-1
    1a18:	adrp	x19, 0 <parse_boolean>
    1a1c:	add	x19, x19, #0x0
    1a20:	b	19b4 <initialize_env+0xfbc>
    1a24:	adrp	x0, 0 <parse_boolean>
    1a28:	add	x0, x0, #0x0
    1a2c:	bl	0 <gomp_error>
    1a30:	adrp	x0, 0 <parse_boolean>
    1a34:	add	x0, x0, #0x0
    1a38:	bl	0 <getenv>
    1a3c:	mov	x19, x0
    1a40:	cbz	x0, 25cc <initialize_env+0x1bd4>
    1a44:	mov	w20, #0xffffffff            	// #-1
    1a48:	bl	0 <__ctype_b_loc>
    1a4c:	mov	x21, x0
    1a50:	ldr	x0, [x0]
    1a54:	ldrb	w1, [x19]
    1a58:	and	x2, x1, #0xff
    1a5c:	ldrh	w2, [x0, x2, lsl #1]
    1a60:	tbz	w2, #13, 1a6c <initialize_env+0x1074>
    1a64:	add	x19, x19, #0x1
    1a68:	b	1a54 <initialize_env+0x105c>
    1a6c:	cbz	w1, 1bd8 <initialize_env+0x11e0>
    1a70:	mov	x2, #0x8                   	// #8
    1a74:	adrp	x1, 0 <parse_boolean>
    1a78:	add	x1, x1, #0x0
    1a7c:	mov	x0, x19
    1a80:	bl	0 <strncasecmp>
    1a84:	cbz	w0, 1aa0 <initialize_env+0x10a8>
    1a88:	mov	x2, #0x8                   	// #8
    1a8c:	adrp	x1, 0 <parse_boolean>
    1a90:	add	x1, x1, #0x0
    1a94:	mov	x0, x19
    1a98:	bl	0 <strncasecmp>
    1a9c:	cbnz	w0, 1af0 <initialize_env+0x10f8>
    1aa0:	add	x19, x19, #0x8
    1aa4:	str	x19, [sp, #168]
    1aa8:	mov	x4, #0x1                   	// #1
    1aac:	mov	x22, #0xffffffffffffffff    	// #-1
    1ab0:	ldr	x0, [x21]
    1ab4:	ldr	x1, [sp, #168]
    1ab8:	ldrb	w2, [x1], #1
    1abc:	and	x3, x2, #0xff
    1ac0:	ldrh	w3, [x0, x3, lsl #1]
    1ac4:	tbz	w3, #13, 1adc <initialize_env+0x10e4>
    1ac8:	str	x1, [sp, #168]
    1acc:	ldrb	w2, [x1], #1
    1ad0:	and	x3, x2, #0xff
    1ad4:	ldrh	w3, [x0, x3, lsl #1]
    1ad8:	tbnz	w3, #13, 1ac8 <initialize_env+0x10d0>
    1adc:	cbnz	w2, 1bd8 <initialize_env+0x11e0>
    1ae0:	umulh	x0, x22, x4
    1ae4:	cbz	x0, 1bbc <initialize_env+0x11c4>
    1ae8:	mov	x22, #0xffffffffffffffff    	// #-1
    1aec:	b	1bc0 <initialize_env+0x11c8>
    1af0:	bl	0 <__errno_location>
    1af4:	mov	x23, x0
    1af8:	str	wzr, [x0]
    1afc:	mov	w2, #0xa                   	// #10
    1b00:	add	x1, sp, #0xa8
    1b04:	mov	x0, x19
    1b08:	bl	0 <strtoull>
    1b0c:	mov	x22, x0
    1b10:	ldr	w0, [x23]
    1b14:	cbnz	w0, 1bd8 <initialize_env+0x11e0>
    1b18:	ldr	x3, [x21]
    1b1c:	ldr	x23, [sp, #168]
    1b20:	ldrb	w2, [x23]
    1b24:	ldrb	w19, [x23]
    1b28:	ldrh	w0, [x3, x19, lsl #1]
    1b2c:	tbz	w0, #13, 1b4c <initialize_env+0x1154>
    1b30:	add	x1, x23, #0x1
    1b34:	mov	x23, x1
    1b38:	str	x1, [sp, #168]
    1b3c:	ldrb	w2, [x1], #1
    1b40:	and	x19, x2, #0xff
    1b44:	ldrh	w0, [x3, x19, lsl #1]
    1b48:	tbnz	w0, #13, 1b34 <initialize_env+0x113c>
    1b4c:	cbz	w2, 1bb8 <initialize_env+0x11c0>
    1b50:	bl	0 <__ctype_tolower_loc>
    1b54:	ldr	x0, [x0]
    1b58:	ldr	w0, [x0, x19, lsl #2]
    1b5c:	cmp	w0, #0x6d
    1b60:	b.eq	1ba0 <initialize_env+0x11a8>  // b.none
    1b64:	b.gt	1b88 <initialize_env+0x1190>
    1b68:	cmp	w0, #0x67
    1b6c:	b.eq	1bac <initialize_env+0x11b4>  // b.none
    1b70:	mov	x4, #0x3e8                 	// #1000
    1b74:	cmp	w0, #0x6b
    1b78:	b.ne	1bd8 <initialize_env+0x11e0>  // b.any
    1b7c:	add	x23, x23, #0x1
    1b80:	str	x23, [sp, #168]
    1b84:	b	1ab0 <initialize_env+0x10b8>
    1b88:	cmp	w0, #0x74
    1b8c:	b.ne	1bd8 <initialize_env+0x11e0>  // b.any
    1b90:	mov	x4, #0x1000                	// #4096
    1b94:	movk	x4, #0xd4a5, lsl #16
    1b98:	movk	x4, #0xe8, lsl #32
    1b9c:	b	1b7c <initialize_env+0x1184>
    1ba0:	mov	x4, #0x4240                	// #16960
    1ba4:	movk	x4, #0xf, lsl #16
    1ba8:	b	1b7c <initialize_env+0x1184>
    1bac:	mov	x4, #0xca00                	// #51712
    1bb0:	movk	x4, #0x3b9a, lsl #16
    1bb4:	b	1b7c <initialize_env+0x1184>
    1bb8:	mov	x4, #0x1                   	// #1
    1bbc:	mul	x22, x22, x4
    1bc0:	adrp	x0, 8 <parse_boolean+0x8>
    1bc4:	str	x22, [x0]
    1bc8:	cmp	w20, #0x0
    1bcc:	b.gt	1c08 <initialize_env+0x1210>
    1bd0:	tbz	w20, #31, 1c14 <initialize_env+0x121c>
    1bd4:	b	25e0 <initialize_env+0x1be8>
    1bd8:	adrp	x1, 0 <parse_boolean>
    1bdc:	add	x1, x1, #0x0
    1be0:	adrp	x0, 0 <parse_boolean>
    1be4:	add	x0, x0, #0x0
    1be8:	bl	0 <gomp_error>
    1bec:	cmp	w20, #0x0
    1bf0:	b.le	1cc0 <initialize_env+0x12c8>
    1bf4:	adrp	x0, 8 <parse_boolean+0x8>
    1bf8:	mov	x1, #0xac00                	// #44032
    1bfc:	movk	x1, #0xfc23, lsl #16
    1c00:	movk	x1, #0x6, lsl #32
    1c04:	str	x1, [x0]
    1c08:	adrp	x0, 8 <parse_boolean+0x8>
    1c0c:	mov	x1, #0x3e8                 	// #1000
    1c10:	str	x1, [x0]
    1c14:	adrp	x0, 8 <parse_boolean+0x8>
    1c18:	ldr	x0, [x0]
    1c1c:	adrp	x1, 8 <parse_boolean+0x8>
    1c20:	ldr	x1, [x1]
    1c24:	cmp	x1, x0
    1c28:	b.ls	1c34 <initialize_env+0x123c>  // b.plast
    1c2c:	adrp	x1, 8 <parse_boolean+0x8>
    1c30:	str	x0, [x1]
    1c34:	adrp	x0, 0 <gomp_thread_attr>
    1c38:	add	x0, x0, #0x0
    1c3c:	bl	0 <pthread_attr_init>
    1c40:	add	x1, sp, #0xb0
    1c44:	adrp	x0, 0 <parse_boolean>
    1c48:	add	x0, x0, #0x0
    1c4c:	bl	850 <parse_stacksize>
    1c50:	and	w0, w0, #0xff
    1c54:	cbnz	w0, 1c70 <initialize_env+0x1278>
    1c58:	add	x1, sp, #0xb0
    1c5c:	adrp	x0, 0 <parse_boolean>
    1c60:	add	x0, x0, #0x0
    1c64:	bl	850 <parse_stacksize>
    1c68:	and	w0, w0, #0xff
    1c6c:	cbz	w0, 1c8c <initialize_env+0x1294>
    1c70:	ldr	x1, [sp, #176]
    1c74:	adrp	x0, 0 <gomp_thread_attr>
    1c78:	add	x0, x0, #0x0
    1c7c:	bl	0 <pthread_attr_setstacksize>
    1c80:	cmp	w0, #0x16
    1c84:	b.eq	1cc8 <initialize_env+0x12d0>  // b.none
    1c88:	cbnz	w0, 1cfc <initialize_env+0x1304>
    1c8c:	ldr	x21, [sp, #176]
    1c90:	adrp	x0, 0 <parse_boolean>
    1c94:	add	x0, x0, #0x0
    1c98:	bl	0 <getenv>
    1c9c:	mov	x19, x0
    1ca0:	cbz	x0, 1d60 <initialize_env+0x1368>
    1ca4:	bl	0 <__ctype_b_loc>
    1ca8:	ldr	x23, [x0]
    1cac:	ldrb	w0, [x19]
    1cb0:	ldrh	w0, [x23, x0, lsl #1]
    1cb4:	tbz	w0, #13, 1d14 <initialize_env+0x131c>
    1cb8:	add	x19, x19, #0x1
    1cbc:	b	1cac <initialize_env+0x12b4>
    1cc0:	tbz	w20, #31, 1c14 <initialize_env+0x121c>
    1cc4:	b	25d0 <initialize_env+0x1bd8>
    1cc8:	ldr	x1, [sp, #176]
    1ccc:	mov	x0, #0x1ffff               	// #131071
    1cd0:	cmp	x1, x0
    1cd4:	b.hi	1cec <initialize_env+0x12f4>  // b.pmore
    1cd8:	mov	x1, #0x80                  	// #128
    1cdc:	adrp	x0, 0 <parse_boolean>
    1ce0:	add	x0, x0, #0x0
    1ce4:	bl	0 <gomp_error>
    1ce8:	b	1c8c <initialize_env+0x1294>
    1cec:	adrp	x0, 0 <parse_boolean>
    1cf0:	add	x0, x0, #0x0
    1cf4:	bl	0 <gomp_error>
    1cf8:	b	1c8c <initialize_env+0x1294>
    1cfc:	bl	0 <strerror>
    1d00:	mov	x1, x0
    1d04:	adrp	x0, 0 <parse_boolean>
    1d08:	add	x0, x0, #0x0
    1d0c:	bl	0 <gomp_error>
    1d10:	b	1c8c <initialize_env+0x1294>
    1d14:	mov	x2, #0x4                   	// #4
    1d18:	adrp	x1, 0 <parse_boolean>
    1d1c:	add	x1, x1, #0x0
    1d20:	mov	x0, x19
    1d24:	bl	0 <strncasecmp>
    1d28:	cbnz	w0, 1ddc <initialize_env+0x13e4>
    1d2c:	add	x19, x19, #0x4
    1d30:	mov	w22, #0x0                   	// #0
    1d34:	mov	w24, #0x1                   	// #1
    1d38:	ldrb	w0, [x19]
    1d3c:	and	x1, x0, #0xff
    1d40:	ldrh	w1, [x23, x1, lsl #1]
    1d44:	tbz	w1, #13, 1d58 <initialize_env+0x1360>
    1d48:	ldrb	w0, [x19, #1]!
    1d4c:	and	x1, x0, #0xff
    1d50:	ldrh	w1, [x23, x1, lsl #1]
    1d54:	tbnz	w1, #13, 1d48 <initialize_env+0x1350>
    1d58:	cbnz	w0, 1e40 <initialize_env+0x1448>
    1d5c:	cbnz	w24, 1e50 <initialize_env+0x1458>
    1d60:	mov	w3, #0x0                   	// #0
    1d64:	mov	w2, #0x1                   	// #1
    1d68:	adrp	x1, 4 <parse_boolean+0x4>
    1d6c:	add	x1, x1, #0x0
    1d70:	adrp	x0, 0 <parse_boolean>
    1d74:	add	x0, x0, #0x0
    1d78:	bl	1ec <parse_int_1>
    1d7c:	and	w0, w0, #0xff
    1d80:	cbnz	w0, 1d8c <initialize_env+0x1394>
    1d84:	adrp	x0, 4 <parse_boolean+0x4>
    1d88:	str	wzr, [x0]
    1d8c:	adrp	x0, 0 <parse_boolean>
    1d90:	add	x0, x0, #0x0
    1d94:	bl	0 <getenv>
    1d98:	cbz	x0, 1da4 <initialize_env+0x13ac>
    1d9c:	ldrb	w1, [x0]
    1da0:	cbnz	w1, 2530 <initialize_env+0x1b38>
    1da4:	adrp	x0, 8 <parse_boolean+0x8>
    1da8:	str	xzr, [x0]
    1dac:	adrp	x0, 0 <parse_boolean>
    1db0:	add	x0, x0, #0x0
    1db4:	bl	0 <getenv>
    1db8:	mov	x19, x0
    1dbc:	cbz	x0, 25ac <initialize_env+0x1bb4>
    1dc0:	ldrb	w0, [x0]
    1dc4:	mov	x21, #0x1                   	// #1
    1dc8:	cbz	w0, 25ac <initialize_env+0x1bb4>
    1dcc:	mov	w23, #0xa                   	// #10
    1dd0:	adrp	x22, c <parse_boolean+0xc>
    1dd4:	add	x22, x22, #0x0
    1dd8:	b	2544 <initialize_env+0x1b4c>
    1ddc:	mov	x2, #0x5                   	// #5
    1de0:	adrp	x1, 0 <parse_boolean>
    1de4:	add	x1, x1, #0x0
    1de8:	mov	x0, x19
    1dec:	bl	0 <strncasecmp>
    1df0:	cbnz	w0, 1e04 <initialize_env+0x140c>
    1df4:	add	x19, x19, #0x5
    1df8:	mov	w22, #0x0                   	// #0
    1dfc:	mov	w24, #0x0                   	// #0
    1e00:	b	1d38 <initialize_env+0x1340>
    1e04:	mov	x2, #0x7                   	// #7
    1e08:	adrp	x1, 0 <parse_boolean>
    1e0c:	add	x1, x1, #0x0
    1e10:	mov	x0, x19
    1e14:	bl	0 <strncasecmp>
    1e18:	cbnz	w0, 1e2c <initialize_env+0x1434>
    1e1c:	add	x19, x19, #0x7
    1e20:	mov	w22, #0x1                   	// #1
    1e24:	mov	w24, w22
    1e28:	b	1d38 <initialize_env+0x1340>
    1e2c:	mov	w22, #0x0                   	// #0
    1e30:	mov	w24, #0x0                   	// #0
    1e34:	adrp	x19, 0 <parse_boolean>
    1e38:	add	x19, x19, #0x0
    1e3c:	b	1d38 <initialize_env+0x1340>
    1e40:	adrp	x0, 0 <parse_boolean>
    1e44:	add	x0, x0, #0x0
    1e48:	bl	0 <gomp_error>
    1e4c:	b	1d5c <initialize_env+0x1364>
    1e50:	adrp	x19, 0 <stderr>
    1e54:	ldr	x3, [x19]
    1e58:	mov	x2, #0x22                  	// #34
    1e5c:	mov	x1, #0x1                   	// #1
    1e60:	adrp	x0, 0 <parse_boolean>
    1e64:	add	x0, x0, #0x0
    1e68:	bl	0 <fwrite>
    1e6c:	ldr	x3, [x19]
    1e70:	mov	x2, #0x15                  	// #21
    1e74:	mov	x1, #0x1                   	// #1
    1e78:	adrp	x0, 0 <parse_boolean>
    1e7c:	add	x0, x0, #0x0
    1e80:	bl	0 <fwrite>
    1e84:	adrp	x0, 0 <parse_boolean>
    1e88:	ldrb	w1, [x0]
    1e8c:	adrp	x0, 0 <parse_boolean>
    1e90:	add	x0, x0, #0x0
    1e94:	adrp	x2, 0 <parse_boolean>
    1e98:	add	x2, x2, #0x0
    1e9c:	cmp	w1, #0x0
    1ea0:	csel	x2, x2, x0, ne  // ne = any
    1ea4:	adrp	x1, 0 <parse_boolean>
    1ea8:	add	x1, x1, #0x0
    1eac:	ldr	x0, [x19]
    1eb0:	bl	0 <fprintf>
    1eb4:	adrp	x0, 0 <parse_boolean>
    1eb8:	ldrb	w1, [x0]
    1ebc:	adrp	x0, 0 <parse_boolean>
    1ec0:	add	x0, x0, #0x0
    1ec4:	adrp	x2, 0 <parse_boolean>
    1ec8:	add	x2, x2, #0x0
    1ecc:	cmp	w1, #0x0
    1ed0:	csel	x2, x2, x0, ne  // ne = any
    1ed4:	adrp	x1, 0 <parse_boolean>
    1ed8:	add	x1, x1, #0x0
    1edc:	ldr	x0, [x19]
    1ee0:	bl	0 <fprintf>
    1ee4:	adrp	x0, 0 <parse_boolean>
    1ee8:	ldr	x2, [x0]
    1eec:	adrp	x1, 0 <parse_boolean>
    1ef0:	add	x1, x1, #0x0
    1ef4:	ldr	x0, [x19]
    1ef8:	bl	0 <fprintf>
    1efc:	adrp	x0, 8 <parse_boolean+0x8>
    1f00:	ldr	x0, [x0]
    1f04:	cmp	x0, #0x1
    1f08:	b.ls	1f48 <initialize_env+0x1550>  // b.plast
    1f0c:	mov	x23, #0x1                   	// #1
    1f10:	adrp	x25, 8 <parse_boolean+0x8>
    1f14:	adrp	x19, 0 <parse_boolean>
    1f18:	add	x19, x19, #0x0
    1f1c:	adrp	x26, 0 <stderr>
    1f20:	adrp	x24, 8 <parse_boolean+0x8>
    1f24:	ldr	x0, [x25]
    1f28:	ldr	x2, [x0, x23, lsl #3]
    1f2c:	mov	x1, x19
    1f30:	ldr	x0, [x26]
    1f34:	bl	0 <fprintf>
    1f38:	add	x23, x23, #0x1
    1f3c:	ldr	x0, [x24]
    1f40:	cmp	x23, x0
    1f44:	b.cc	1f24 <initialize_env+0x152c>  // b.lo, b.ul, b.last
    1f48:	adrp	x19, 0 <stderr>
    1f4c:	ldr	x3, [x19]
    1f50:	mov	x2, #0x2                   	// #2
    1f54:	mov	x1, #0x1                   	// #1
    1f58:	adrp	x0, 0 <parse_boolean>
    1f5c:	add	x0, x0, #0x0
    1f60:	bl	0 <fwrite>
    1f64:	ldr	x3, [x19]
    1f68:	mov	x2, #0x12                  	// #18
    1f6c:	mov	x1, #0x1                   	// #1
    1f70:	adrp	x0, 0 <parse_boolean>
    1f74:	add	x0, x0, #0x0
    1f78:	bl	0 <fwrite>
    1f7c:	adrp	x0, 0 <parse_boolean>
    1f80:	ldr	w0, [x0]
    1f84:	tbnz	w0, #31, 2004 <initialize_env+0x160c>
    1f88:	cmp	w0, #0x1
    1f8c:	b.eq	206c <initialize_env+0x1674>  // b.none
    1f90:	adrp	x0, 0 <parse_boolean>
    1f94:	ldr	w1, [x0]
    1f98:	and	w0, w1, #0x7fffffff
    1f9c:	cmp	w0, #0x3
    1fa0:	b.eq	2178 <initialize_env+0x1780>  // b.none
    1fa4:	tst	w1, #0x7ffffffc
    1fa8:	b.ne	210c <initialize_env+0x1714>  // b.any
    1fac:	cmp	w0, #0x2
    1fb0:	b.eq	2134 <initialize_env+0x173c>  // b.none
    1fb4:	cmp	w0, #0x3
    1fb8:	b.eq	2094 <initialize_env+0x169c>  // b.none
    1fbc:	cbnz	w0, 208c <initialize_env+0x1694>
    1fc0:	adrp	x0, 0 <stderr>
    1fc4:	ldr	x3, [x0]
    1fc8:	mov	x2, #0x7                   	// #7
    1fcc:	mov	x1, #0x1                   	// #1
    1fd0:	adrp	x0, 0 <parse_boolean>
    1fd4:	add	x0, x0, #0x0
    1fd8:	bl	0 <fwrite>
    1fdc:	adrp	x0, 0 <parse_boolean>
    1fe0:	ldr	w2, [x0]
    1fe4:	cmp	w2, #0x1
    1fe8:	b.eq	2094 <initialize_env+0x169c>  // b.none
    1fec:	adrp	x1, 0 <parse_boolean>
    1ff0:	add	x1, x1, #0x0
    1ff4:	adrp	x0, 0 <stderr>
    1ff8:	ldr	x0, [x0]
    1ffc:	bl	0 <fprintf>
    2000:	b	2094 <initialize_env+0x169c>
    2004:	mov	w1, #0x80000001            	// #-2147483647
    2008:	cmp	w0, w1
    200c:	b.ne	2050 <initialize_env+0x1658>  // b.any
    2010:	adrp	x0, 0 <stderr>
    2014:	ldr	x3, [x0]
    2018:	mov	x2, #0x6                   	// #6
    201c:	mov	x1, #0x1                   	// #1
    2020:	adrp	x0, 0 <parse_boolean>
    2024:	add	x0, x0, #0x0
    2028:	bl	0 <fwrite>
    202c:	adrp	x0, 0 <parse_boolean>
    2030:	ldr	w2, [x0]
    2034:	cbz	w2, 2094 <initialize_env+0x169c>
    2038:	adrp	x1, 0 <parse_boolean>
    203c:	add	x1, x1, #0x0
    2040:	adrp	x0, 0 <stderr>
    2044:	ldr	x0, [x0]
    2048:	bl	0 <fprintf>
    204c:	b	2094 <initialize_env+0x169c>
    2050:	ldr	x3, [x19]
    2054:	mov	x2, #0xa                   	// #10
    2058:	mov	x1, #0x1                   	// #1
    205c:	adrp	x0, 0 <parse_boolean>
    2060:	add	x0, x0, #0x0
    2064:	bl	0 <fwrite>
    2068:	b	1f90 <initialize_env+0x1598>
    206c:	adrp	x0, 0 <stderr>
    2070:	ldr	x3, [x0]
    2074:	mov	x2, #0xd                   	// #13
    2078:	mov	x1, #0x1                   	// #1
    207c:	adrp	x0, 0 <parse_boolean>
    2080:	add	x0, x0, #0x0
    2084:	bl	0 <fwrite>
    2088:	b	1f90 <initialize_env+0x1598>
    208c:	cmp	w0, #0x1
    2090:	b.eq	2010 <initialize_env+0x1618>  // b.none
    2094:	adrp	x19, 0 <stderr>
    2098:	ldr	x3, [x19]
    209c:	mov	x2, #0x2                   	// #2
    20a0:	mov	x1, #0x1                   	// #1
    20a4:	adrp	x0, 0 <parse_boolean>
    20a8:	add	x0, x0, #0x0
    20ac:	bl	0 <fwrite>
    20b0:	ldr	x3, [x19]
    20b4:	mov	x2, #0x13                  	// #19
    20b8:	mov	x1, #0x1                   	// #1
    20bc:	adrp	x0, 0 <parse_boolean>
    20c0:	add	x0, x0, #0x0
    20c4:	bl	0 <fwrite>
    20c8:	adrp	x0, 0 <parse_boolean>
    20cc:	ldrb	w0, [x0]
    20d0:	cmp	w0, #0x2
    20d4:	b.eq	2228 <initialize_env+0x1830>  // b.none
    20d8:	b.ls	21bc <initialize_env+0x17c4>  // b.plast
    20dc:	cmp	w0, #0x3
    20e0:	b.eq	2248 <initialize_env+0x1850>  // b.none
    20e4:	cmp	w0, #0x4
    20e8:	b.ne	21fc <initialize_env+0x1804>  // b.any
    20ec:	adrp	x0, 0 <stderr>
    20f0:	ldr	x3, [x0]
    20f4:	mov	x2, #0x6                   	// #6
    20f8:	mov	x1, #0x1                   	// #1
    20fc:	adrp	x0, 0 <parse_boolean>
    2100:	add	x0, x0, #0x0
    2104:	bl	0 <fwrite>
    2108:	b	21fc <initialize_env+0x1804>
    210c:	cmp	w0, #0x4
    2110:	b.ne	2094 <initialize_env+0x169c>  // b.any
    2114:	adrp	x0, 0 <stderr>
    2118:	ldr	x3, [x0]
    211c:	mov	x2, #0x4                   	// #4
    2120:	mov	x1, #0x1                   	// #1
    2124:	adrp	x0, 0 <parse_boolean>
    2128:	add	x0, x0, #0x0
    212c:	bl	0 <fwrite>
    2130:	b	2094 <initialize_env+0x169c>
    2134:	adrp	x0, 0 <stderr>
    2138:	ldr	x3, [x0]
    213c:	mov	x2, #0x7                   	// #7
    2140:	mov	x1, #0x1                   	// #1
    2144:	adrp	x0, 0 <parse_boolean>
    2148:	add	x0, x0, #0x0
    214c:	bl	0 <fwrite>
    2150:	adrp	x0, 0 <parse_boolean>
    2154:	ldr	w2, [x0]
    2158:	cmp	w2, #0x1
    215c:	b.eq	2094 <initialize_env+0x169c>  // b.none
    2160:	adrp	x1, 0 <parse_boolean>
    2164:	add	x1, x1, #0x0
    2168:	adrp	x0, 0 <stderr>
    216c:	ldr	x0, [x0]
    2170:	bl	0 <fprintf>
    2174:	b	2094 <initialize_env+0x169c>
    2178:	adrp	x0, 0 <stderr>
    217c:	ldr	x3, [x0]
    2180:	mov	x2, #0x6                   	// #6
    2184:	mov	x1, #0x1                   	// #1
    2188:	adrp	x0, 0 <parse_boolean>
    218c:	add	x0, x0, #0x0
    2190:	bl	0 <fwrite>
    2194:	adrp	x0, 0 <parse_boolean>
    2198:	ldr	w2, [x0]
    219c:	cmp	w2, #0x1
    21a0:	b.eq	2094 <initialize_env+0x169c>  // b.none
    21a4:	adrp	x1, 0 <parse_boolean>
    21a8:	add	x1, x1, #0x0
    21ac:	adrp	x0, 0 <stderr>
    21b0:	ldr	x0, [x0]
    21b4:	bl	0 <fprintf>
    21b8:	b	2094 <initialize_env+0x169c>
    21bc:	cbz	w0, 21e0 <initialize_env+0x17e8>
    21c0:	adrp	x0, 0 <stderr>
    21c4:	ldr	x3, [x0]
    21c8:	mov	x2, #0x4                   	// #4
    21cc:	mov	x1, #0x1                   	// #1
    21d0:	adrp	x0, 0 <parse_boolean>
    21d4:	add	x0, x0, #0x0
    21d8:	bl	0 <fwrite>
    21dc:	b	21fc <initialize_env+0x1804>
    21e0:	adrp	x0, 0 <stderr>
    21e4:	ldr	x3, [x0]
    21e8:	mov	x2, #0x5                   	// #5
    21ec:	mov	x1, #0x1                   	// #1
    21f0:	adrp	x0, 0 <parse_boolean>
    21f4:	add	x0, x0, #0x0
    21f8:	bl	0 <fwrite>
    21fc:	adrp	x0, 8 <parse_boolean+0x8>
    2200:	ldr	x0, [x0]
    2204:	mov	x19, #0x1                   	// #1
    2208:	cmp	x0, x19
    220c:	b.ls	22f0 <initialize_env+0x18f8>  // b.plast
    2210:	adrp	x25, 8 <parse_boolean+0x8>
    2214:	adrp	x24, 0 <parse_boolean>
    2218:	add	x24, x24, #0x0
    221c:	adrp	x23, 0 <parse_boolean>
    2220:	add	x23, x23, #0x0
    2224:	b	2294 <initialize_env+0x189c>
    2228:	adrp	x0, 0 <stderr>
    222c:	ldr	x3, [x0]
    2230:	mov	x2, #0x6                   	// #6
    2234:	mov	x1, #0x1                   	// #1
    2238:	adrp	x0, 0 <parse_boolean>
    223c:	add	x0, x0, #0x0
    2240:	bl	0 <fwrite>
    2244:	b	21fc <initialize_env+0x1804>
    2248:	adrp	x0, 0 <stderr>
    224c:	ldr	x3, [x0]
    2250:	mov	x2, #0x5                   	// #5
    2254:	mov	x1, #0x1                   	// #1
    2258:	adrp	x0, 0 <parse_boolean>
    225c:	add	x0, x0, #0x0
    2260:	bl	0 <fwrite>
    2264:	b	21fc <initialize_env+0x1804>
    2268:	adrp	x0, 0 <stderr>
    226c:	ldr	x3, [x0]
    2270:	mov	x2, #0x6                   	// #6
    2274:	mov	x1, #0x1                   	// #1
    2278:	mov	x0, x24
    227c:	bl	0 <fwrite>
    2280:	add	x19, x19, #0x1
    2284:	adrp	x0, 8 <parse_boolean+0x8>
    2288:	ldr	x0, [x0]
    228c:	cmp	x0, x19
    2290:	b.ls	22f0 <initialize_env+0x18f8>  // b.plast
    2294:	ldr	x0, [x25]
    2298:	ldrb	w0, [x0, x19]
    229c:	cmp	w0, #0x3
    22a0:	b.eq	2268 <initialize_env+0x1870>  // b.none
    22a4:	cmp	w0, #0x4
    22a8:	b.eq	22d4 <initialize_env+0x18dc>  // b.none
    22ac:	cmp	w0, #0x2
    22b0:	b.ne	2280 <initialize_env+0x1888>  // b.any
    22b4:	adrp	x0, 0 <stderr>
    22b8:	ldr	x3, [x0]
    22bc:	mov	x2, #0x7                   	// #7
    22c0:	mov	x1, #0x1                   	// #1
    22c4:	adrp	x0, 0 <parse_boolean>
    22c8:	add	x0, x0, #0x0
    22cc:	bl	0 <fwrite>
    22d0:	b	2280 <initialize_env+0x1888>
    22d4:	adrp	x0, 0 <stderr>
    22d8:	ldr	x3, [x0]
    22dc:	mov	x2, #0x7                   	// #7
    22e0:	mov	x1, #0x1                   	// #1
    22e4:	mov	x0, x23
    22e8:	bl	0 <fwrite>
    22ec:	b	2280 <initialize_env+0x1888>
    22f0:	adrp	x19, 0 <stderr>
    22f4:	ldr	x3, [x19]
    22f8:	mov	x2, #0x2                   	// #2
    22fc:	mov	x1, #0x1                   	// #1
    2300:	adrp	x0, 0 <parse_boolean>
    2304:	add	x0, x0, #0x0
    2308:	bl	0 <fwrite>
    230c:	ldr	x3, [x19]
    2310:	mov	x2, #0x10                  	// #16
    2314:	mov	x1, #0x1                   	// #1
    2318:	adrp	x0, 0 <parse_boolean>
    231c:	add	x0, x0, #0x0
    2320:	bl	0 <fwrite>
    2324:	adrp	x0, 8 <parse_boolean+0x8>
    2328:	ldr	x0, [x0]
    232c:	cbz	x0, 2390 <initialize_env+0x1998>
    2330:	mov	x19, #0x0                   	// #0
    2334:	adrp	x24, 0 <stderr>
    2338:	mov	w27, #0x7b                  	// #123
    233c:	adrp	x23, 8 <parse_boolean+0x8>
    2340:	adrp	x26, 0 <parse_boolean>
    2344:	add	x26, x26, #0x0
    2348:	adrp	x25, 0 <parse_boolean>
    234c:	add	x25, x25, #0x0
    2350:	ldr	x1, [x24]
    2354:	mov	w0, w27
    2358:	bl	0 <fputc>
    235c:	adrp	x0, 8 <parse_boolean+0x8>
    2360:	ldr	x0, [x0]
    2364:	ldr	x0, [x0, x19, lsl #3]
    2368:	bl	0 <gomp_affinity_print_place>
    236c:	add	x19, x19, #0x1
    2370:	ldr	x0, [x23]
    2374:	cmp	x0, x19
    2378:	ldr	x1, [x24]
    237c:	csel	x0, x25, x26, eq  // eq = none
    2380:	bl	0 <fputs>
    2384:	ldr	x0, [x23]
    2388:	cmp	x0, x19
    238c:	b.hi	2350 <initialize_env+0x1958>  // b.pmore
    2390:	adrp	x19, 0 <stderr>
    2394:	ldr	x3, [x19]
    2398:	mov	x2, #0x2                   	// #2
    239c:	mov	x1, #0x1                   	// #1
    23a0:	adrp	x0, 0 <parse_boolean>
    23a4:	add	x0, x0, #0x0
    23a8:	bl	0 <fwrite>
    23ac:	mov	x2, x21
    23b0:	adrp	x1, 0 <parse_boolean>
    23b4:	add	x1, x1, #0x0
    23b8:	ldr	x0, [x19]
    23bc:	bl	0 <fprintf>
    23c0:	adrp	x0, 0 <parse_boolean>
    23c4:	add	x0, x0, #0x0
    23c8:	adrp	x2, 0 <parse_boolean>
    23cc:	add	x2, x2, #0x0
    23d0:	cmp	w20, #0x0
    23d4:	csel	x2, x2, x0, gt
    23d8:	adrp	x1, 0 <parse_boolean>
    23dc:	add	x1, x1, #0x0
    23e0:	ldr	x0, [x19]
    23e4:	bl	0 <fprintf>
    23e8:	adrp	x19, 0 <parse_boolean>
    23ec:	add	x19, x19, #0x0
    23f0:	adrp	x20, 0 <stderr>
    23f4:	ldr	w2, [x19, #20]
    23f8:	adrp	x1, 0 <parse_boolean>
    23fc:	add	x1, x1, #0x0
    2400:	ldr	x0, [x20]
    2404:	bl	0 <fprintf>
    2408:	ldr	x2, [x19, #40]
    240c:	adrp	x1, 0 <parse_boolean>
    2410:	add	x1, x1, #0x0
    2414:	ldr	x0, [x20]
    2418:	bl	0 <fprintf>
    241c:	adrp	x0, 0 <parse_boolean>
    2420:	ldrb	w1, [x0]
    2424:	adrp	x0, 0 <parse_boolean>
    2428:	add	x0, x0, #0x0
    242c:	adrp	x2, 0 <parse_boolean>
    2430:	add	x2, x2, #0x0
    2434:	cmp	w1, #0x0
    2438:	csel	x2, x2, x0, ne  // ne = any
    243c:	adrp	x1, 0 <parse_boolean>
    2440:	add	x1, x1, #0x0
    2444:	ldr	x0, [x20]
    2448:	bl	0 <fprintf>
    244c:	adrp	x0, 0 <parse_boolean>
    2450:	ldr	w2, [x0]
    2454:	adrp	x1, 0 <parse_boolean>
    2458:	add	x1, x1, #0x0
    245c:	ldr	x0, [x20]
    2460:	bl	0 <fprintf>
    2464:	adrp	x0, 0 <parse_boolean>
    2468:	ldr	w2, [x0]
    246c:	adrp	x1, 0 <parse_boolean>
    2470:	add	x1, x1, #0x0
    2474:	ldr	x0, [x20]
    2478:	bl	0 <fprintf>
    247c:	adrp	x0, 1 <parse_boolean+0x1>
    2480:	ldrb	w1, [x0]
    2484:	adrp	x0, 0 <parse_boolean>
    2488:	add	x0, x0, #0x0
    248c:	adrp	x2, 0 <parse_boolean>
    2490:	add	x2, x2, #0x0
    2494:	cmp	w1, #0x0
    2498:	csel	x2, x2, x0, ne  // ne = any
    249c:	adrp	x1, 0 <parse_boolean>
    24a0:	add	x1, x1, #0x0
    24a4:	ldr	x0, [x20]
    24a8:	bl	0 <fprintf>
    24ac:	adrp	x0, 0 <parse_boolean>
    24b0:	ldr	x2, [x0]
    24b4:	adrp	x1, 0 <parse_boolean>
    24b8:	add	x1, x1, #0x0
    24bc:	ldr	x0, [x20]
    24c0:	bl	0 <fprintf>
    24c4:	cbnz	w22, 24e8 <initialize_env+0x1af0>
    24c8:	adrp	x0, 0 <stderr>
    24cc:	ldr	x3, [x0]
    24d0:	mov	x2, #0x1f                  	// #31
    24d4:	mov	x1, #0x1                   	// #1
    24d8:	adrp	x0, 0 <parse_boolean>
    24dc:	add	x0, x0, #0x0
    24e0:	bl	0 <fwrite>
    24e4:	b	1d60 <initialize_env+0x1368>
    24e8:	ldr	x3, [x20]
    24ec:	mov	x2, #0x19                  	// #25
    24f0:	mov	x1, #0x1                   	// #1
    24f4:	adrp	x0, 0 <parse_boolean>
    24f8:	add	x0, x0, #0x0
    24fc:	bl	0 <fwrite>
    2500:	mov	x2, x21
    2504:	adrp	x1, 0 <parse_boolean>
    2508:	add	x1, x1, #0x0
    250c:	ldr	x0, [x20]
    2510:	bl	0 <fprintf>
    2514:	adrp	x0, 8 <parse_boolean+0x8>
    2518:	ldr	x2, [x0]
    251c:	adrp	x1, 0 <parse_boolean>
    2520:	add	x1, x1, #0x0
    2524:	ldr	x0, [x20]
    2528:	bl	0 <fprintf>
    252c:	b	24c8 <initialize_env+0x1ad0>
    2530:	bl	0 <strdup>
    2534:	adrp	x1, 8 <parse_boolean+0x8>
    2538:	str	x0, [x1]
    253c:	b	1dac <initialize_env+0x13b4>
    2540:	add	x21, x21, #0x1
    2544:	ldrb	w0, [x19]
    2548:	cmp	w0, #0x3a
    254c:	b.eq	258c <initialize_env+0x1b94>  // b.none
    2550:	bl	0 <__errno_location>
    2554:	mov	x20, x0
    2558:	str	wzr, [x0]
    255c:	mov	w2, w23
    2560:	add	x1, sp, #0xa8
    2564:	mov	x0, x19
    2568:	bl	0 <strtol>
    256c:	ldr	w1, [x20]
    2570:	cmp	w1, #0x0
    2574:	ccmp	x0, #0x0, #0x1, eq  // eq = none
    2578:	b.lt	25ac <initialize_env+0x1bb4>  // b.tstop
    257c:	tst	x0, #0xffffffff00000000
    2580:	b.ne	25ac <initialize_env+0x1bb4>  // b.any
    2584:	str	w0, [x22, x21, lsl #2]
    2588:	ldr	x19, [sp, #168]
    258c:	ldrb	w0, [x19]
    2590:	cmp	w0, #0x0
    2594:	ccmp	w21, #0x3, #0x4, ne  // ne = any
    2598:	b.eq	25ac <initialize_env+0x1bb4>  // b.none
    259c:	cbz	w21, 2540 <initialize_env+0x1b48>
    25a0:	add	x19, x19, #0x1
    25a4:	cmp	w0, #0x3a
    25a8:	b.eq	2540 <initialize_env+0x1b48>  // b.none
    25ac:	bl	0 <goacc_runtime_initialize>
    25b0:	ldp	x19, x20, [sp, #16]
    25b4:	ldp	x21, x22, [sp, #32]
    25b8:	ldp	x23, x24, [sp, #48]
    25bc:	ldp	x25, x26, [sp, #64]
    25c0:	ldp	x27, x28, [sp, #80]
    25c4:	ldp	x29, x30, [sp], #192
    25c8:	ret
    25cc:	mov	w20, #0xffffffff            	// #-1
    25d0:	adrp	x0, 8 <parse_boolean+0x8>
    25d4:	mov	x1, #0x93e0                	// #37856
    25d8:	movk	x1, #0x4, lsl #16
    25dc:	str	x1, [x0]
    25e0:	adrp	x0, 8 <parse_boolean+0x8>
    25e4:	mov	x1, #0x64                  	// #100
    25e8:	str	x1, [x0]
    25ec:	b	1c14 <initialize_env+0x121c>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_vdebug>:
   0:	adrp	x0, 0 <gomp_debug_var>
   4:	ldr	w0, [x0]
   8:	cbnz	w0, 10 <gomp_vdebug+0x10>
   c:	ret
  10:	stp	x29, x30, [sp, #-48]!
  14:	mov	x29, sp
  18:	ldp	x4, x5, [x2]
  1c:	stp	x4, x5, [sp, #16]
  20:	ldp	x2, x3, [x2, #16]
  24:	stp	x2, x3, [sp, #32]
  28:	add	x2, sp, #0x10
  2c:	adrp	x0, 0 <stderr>
  30:	ldr	x0, [x0]
  34:	bl	0 <vfprintf>
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

0000000000000040 <gomp_debug>:
  40:	stp	x29, x30, [sp, #-256]!
  44:	mov	x29, sp
  48:	str	x2, [sp, #208]
  4c:	str	x3, [sp, #216]
  50:	str	x4, [sp, #224]
  54:	str	x5, [sp, #232]
  58:	str	x6, [sp, #240]
  5c:	str	x7, [sp, #248]
  60:	str	q0, [sp, #80]
  64:	str	q1, [sp, #96]
  68:	str	q2, [sp, #112]
  6c:	str	q3, [sp, #128]
  70:	str	q4, [sp, #144]
  74:	str	q5, [sp, #160]
  78:	str	q6, [sp, #176]
  7c:	str	q7, [sp, #192]
  80:	add	x2, sp, #0x100
  84:	str	x2, [sp, #48]
  88:	str	x2, [sp, #56]
  8c:	add	x2, sp, #0xd0
  90:	str	x2, [sp, #64]
  94:	mov	w2, #0xffffffd0            	// #-48
  98:	str	w2, [sp, #72]
  9c:	mov	w2, #0xffffff80            	// #-128
  a0:	str	w2, [sp, #76]
  a4:	ldp	x2, x3, [sp, #48]
  a8:	stp	x2, x3, [sp, #16]
  ac:	ldp	x2, x3, [sp, #64]
  b0:	stp	x2, x3, [sp, #32]
  b4:	add	x2, sp, #0x10
  b8:	bl	0 <gomp_vdebug>
  bc:	ldp	x29, x30, [sp], #256
  c0:	ret

00000000000000c4 <gomp_verror>:
  c4:	stp	x29, x30, [sp, #-80]!
  c8:	mov	x29, sp
  cc:	stp	x19, x20, [sp, #16]
  d0:	str	x21, [sp, #32]
  d4:	mov	x21, x0
  d8:	mov	x19, x1
  dc:	adrp	x20, 0 <stderr>
  e0:	ldr	x3, [x20]
  e4:	mov	x2, #0xa                   	// #10
  e8:	mov	x1, #0x1                   	// #1
  ec:	adrp	x0, 0 <gomp_vdebug>
  f0:	add	x0, x0, #0x0
  f4:	bl	0 <fwrite>
  f8:	ldp	x0, x1, [x19]
  fc:	stp	x0, x1, [sp, #48]
 100:	ldp	x0, x1, [x19, #16]
 104:	stp	x0, x1, [sp, #64]
 108:	add	x2, sp, #0x30
 10c:	mov	x1, x21
 110:	ldr	x0, [x20]
 114:	bl	0 <vfprintf>
 118:	ldr	x1, [x20]
 11c:	mov	w0, #0xa                   	// #10
 120:	bl	0 <fputc>
 124:	ldp	x19, x20, [sp, #16]
 128:	ldr	x21, [sp, #32]
 12c:	ldp	x29, x30, [sp], #80
 130:	ret

0000000000000134 <gomp_error>:
 134:	stp	x29, x30, [sp, #-272]!
 138:	mov	x29, sp
 13c:	str	x1, [sp, #216]
 140:	str	x2, [sp, #224]
 144:	str	x3, [sp, #232]
 148:	str	x4, [sp, #240]
 14c:	str	x5, [sp, #248]
 150:	str	x6, [sp, #256]
 154:	str	x7, [sp, #264]
 158:	str	q0, [sp, #80]
 15c:	str	q1, [sp, #96]
 160:	str	q2, [sp, #112]
 164:	str	q3, [sp, #128]
 168:	str	q4, [sp, #144]
 16c:	str	q5, [sp, #160]
 170:	str	q6, [sp, #176]
 174:	str	q7, [sp, #192]
 178:	add	x1, sp, #0x110
 17c:	str	x1, [sp, #48]
 180:	str	x1, [sp, #56]
 184:	add	x1, sp, #0xd0
 188:	str	x1, [sp, #64]
 18c:	mov	w1, #0xffffffc8            	// #-56
 190:	str	w1, [sp, #72]
 194:	mov	w1, #0xffffff80            	// #-128
 198:	str	w1, [sp, #76]
 19c:	ldp	x2, x3, [sp, #48]
 1a0:	stp	x2, x3, [sp, #16]
 1a4:	ldp	x2, x3, [sp, #64]
 1a8:	stp	x2, x3, [sp, #32]
 1ac:	add	x1, sp, #0x10
 1b0:	bl	c4 <gomp_verror>
 1b4:	ldp	x29, x30, [sp], #272
 1b8:	ret

00000000000001bc <gomp_vfatal>:
 1bc:	stp	x29, x30, [sp, #-48]!
 1c0:	mov	x29, sp
 1c4:	ldp	x2, x3, [x1]
 1c8:	stp	x2, x3, [sp, #16]
 1cc:	ldp	x2, x3, [x1, #16]
 1d0:	stp	x2, x3, [sp, #32]
 1d4:	add	x1, sp, #0x10
 1d8:	bl	c4 <gomp_verror>
 1dc:	mov	w0, #0x1                   	// #1
 1e0:	bl	0 <exit>

00000000000001e4 <gomp_fatal>:
 1e4:	stp	x29, x30, [sp, #-272]!
 1e8:	mov	x29, sp
 1ec:	str	x1, [sp, #216]
 1f0:	str	x2, [sp, #224]
 1f4:	str	x3, [sp, #232]
 1f8:	str	x4, [sp, #240]
 1fc:	str	x5, [sp, #248]
 200:	str	x6, [sp, #256]
 204:	str	x7, [sp, #264]
 208:	str	q0, [sp, #80]
 20c:	str	q1, [sp, #96]
 210:	str	q2, [sp, #112]
 214:	str	q3, [sp, #128]
 218:	str	q4, [sp, #144]
 21c:	str	q5, [sp, #160]
 220:	str	q6, [sp, #176]
 224:	str	q7, [sp, #192]
 228:	add	x1, sp, #0x110
 22c:	str	x1, [sp, #48]
 230:	str	x1, [sp, #56]
 234:	add	x1, sp, #0xd0
 238:	str	x1, [sp, #64]
 23c:	mov	w1, #0xffffffc8            	// #-56
 240:	str	w1, [sp, #72]
 244:	mov	w1, #0xffffff80            	// #-128
 248:	str	w1, [sp, #76]
 24c:	ldp	x2, x3, [sp, #48]
 250:	stp	x2, x3, [sp, #16]
 254:	ldp	x2, x3, [sp, #64]
 258:	stp	x2, x3, [sp, #32]
 25c:	add	x1, sp, #0x10
 260:	bl	1bc <gomp_vfatal>

icv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_num_threads>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w0
  10:	adrp	x0, 0 <gomp_tls_data>
  14:	ldr	x0, [x0]
  18:	mrs	x1, tpidr_el0
  1c:	add	x0, x1, x0
  20:	ldr	x0, [x0, #80]
  24:	cbz	x0, 48 <gomp_ialias_omp_set_num_threads+0x48>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csinc	w19, w19, wzr, gt
  34:	sxtw	x19, w19
  38:	str	x19, [x0]
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	bl	0 <gomp_new_icv>
  4c:	b	2c <gomp_ialias_omp_set_num_threads+0x2c>

0000000000000050 <gomp_ialias_omp_set_dynamic>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	mov	w19, w0
  60:	adrp	x0, 0 <gomp_tls_data>
  64:	ldr	x0, [x0]
  68:	mrs	x1, tpidr_el0
  6c:	add	x0, x1, x0
  70:	ldr	x1, [x0, #80]
  74:	cbz	x1, 94 <gomp_ialias_omp_set_dynamic+0x44>
  78:	add	x1, x1, #0x90
  7c:	cmp	w19, #0x0
  80:	cset	w0, ne  // ne = any
  84:	strb	w0, [x1, #24]
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	bl	0 <gomp_new_icv>
  98:	mov	x1, x0
  9c:	b	7c <gomp_ialias_omp_set_dynamic+0x2c>

00000000000000a0 <gomp_ialias_omp_get_dynamic>:
  a0:	adrp	x0, 0 <gomp_tls_data>
  a4:	ldr	x0, [x0]
  a8:	mrs	x1, tpidr_el0
  ac:	add	x0, x1, x0
  b0:	ldr	x1, [x0, #80]
  b4:	add	x2, x1, #0x90
  b8:	adrp	x0, 0 <gomp_global_icv>
  bc:	add	x0, x0, #0x0
  c0:	cmp	x1, #0x0
  c4:	csel	x0, x0, x2, eq  // eq = none
  c8:	ldrb	w0, [x0, #24]
  cc:	ret

00000000000000d0 <gomp_ialias_omp_set_nested>:
  d0:	stp	x29, x30, [sp, #-32]!
  d4:	mov	x29, sp
  d8:	str	x19, [sp, #16]
  dc:	mov	w19, w0
  e0:	adrp	x0, 0 <gomp_tls_data>
  e4:	ldr	x0, [x0]
  e8:	mrs	x1, tpidr_el0
  ec:	add	x0, x1, x0
  f0:	ldr	x1, [x0, #80]
  f4:	cbz	x1, 114 <gomp_ialias_omp_set_nested+0x44>
  f8:	add	x1, x1, #0x90
  fc:	cmp	w19, #0x0
 100:	cset	w0, ne  // ne = any
 104:	strb	w0, [x1, #25]
 108:	ldr	x19, [sp, #16]
 10c:	ldp	x29, x30, [sp], #32
 110:	ret
 114:	bl	0 <gomp_new_icv>
 118:	mov	x1, x0
 11c:	b	fc <gomp_ialias_omp_set_nested+0x2c>

0000000000000120 <gomp_ialias_omp_get_nested>:
 120:	adrp	x0, 0 <gomp_tls_data>
 124:	ldr	x0, [x0]
 128:	mrs	x1, tpidr_el0
 12c:	add	x0, x1, x0
 130:	ldr	x1, [x0, #80]
 134:	add	x2, x1, #0x90
 138:	adrp	x0, 0 <gomp_global_icv>
 13c:	add	x0, x0, #0x0
 140:	cmp	x1, #0x0
 144:	csel	x0, x0, x2, eq  // eq = none
 148:	ldrb	w0, [x0, #25]
 14c:	ret

0000000000000150 <gomp_ialias_omp_set_schedule>:
 150:	stp	x29, x30, [sp, #-32]!
 154:	mov	x29, sp
 158:	stp	x19, x20, [sp, #16]
 15c:	mov	w19, w0
 160:	mov	w20, w1
 164:	adrp	x0, 0 <gomp_tls_data>
 168:	ldr	x0, [x0]
 16c:	mrs	x1, tpidr_el0
 170:	add	x0, x1, x0
 174:	ldr	x0, [x0, #80]
 178:	cbz	x0, 1ac <gomp_ialias_omp_set_schedule+0x5c>
 17c:	add	x0, x0, #0x90
 180:	and	w1, w19, #0x7fffffff
 184:	tst	w19, #0x7ffffffc
 188:	b.ne	1b4 <gomp_ialias_omp_set_schedule+0x64>  // b.any
 18c:	tst	w19, #0x7ffffffe
 190:	b.ne	1cc <gomp_ialias_omp_set_schedule+0x7c>  // b.any
 194:	cmp	w1, #0x1
 198:	b.ne	1c0 <gomp_ialias_omp_set_schedule+0x70>  // b.any
 19c:	cmp	w20, #0x0
 1a0:	csel	w20, w20, wzr, ge  // ge = tcont
 1a4:	str	w20, [x0, #12]
 1a8:	b	1bc <gomp_ialias_omp_set_schedule+0x6c>
 1ac:	bl	0 <gomp_new_icv>
 1b0:	b	180 <gomp_ialias_omp_set_schedule+0x30>
 1b4:	cmp	w1, #0x4
 1b8:	b.ne	1c0 <gomp_ialias_omp_set_schedule+0x70>  // b.any
 1bc:	str	w19, [x0, #8]
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldp	x29, x30, [sp], #32
 1c8:	ret
 1cc:	cmp	w20, #0x0
 1d0:	csinc	w20, w20, wzr, gt
 1d4:	str	w20, [x0, #12]
 1d8:	b	1bc <gomp_ialias_omp_set_schedule+0x6c>

00000000000001dc <gomp_ialias_omp_get_schedule>:
 1dc:	adrp	x2, 0 <gomp_tls_data>
 1e0:	ldr	x2, [x2]
 1e4:	mrs	x3, tpidr_el0
 1e8:	add	x2, x3, x2
 1ec:	ldr	x3, [x2, #80]
 1f0:	add	x4, x3, #0x90
 1f4:	adrp	x2, 0 <gomp_global_icv>
 1f8:	add	x2, x2, #0x0
 1fc:	cmp	x3, #0x0
 200:	csel	x2, x2, x4, eq  // eq = none
 204:	ldr	w3, [x2, #8]
 208:	str	w3, [x0]
 20c:	ldr	w0, [x2, #12]
 210:	str	w0, [x1]
 214:	ret

0000000000000218 <gomp_ialias_omp_get_max_threads>:
 218:	adrp	x0, 0 <gomp_tls_data>
 21c:	ldr	x0, [x0]
 220:	mrs	x1, tpidr_el0
 224:	add	x0, x1, x0
 228:	ldr	x1, [x0, #80]
 22c:	add	x2, x1, #0x90
 230:	adrp	x0, 0 <gomp_global_icv>
 234:	add	x0, x0, #0x0
 238:	cmp	x1, #0x0
 23c:	csel	x0, x0, x2, eq  // eq = none
 240:	ldr	w0, [x0]
 244:	ret

0000000000000248 <gomp_ialias_omp_get_thread_limit>:
 248:	adrp	x0, 0 <gomp_tls_data>
 24c:	ldr	x0, [x0]
 250:	mrs	x1, tpidr_el0
 254:	add	x0, x1, x0
 258:	ldr	x1, [x0, #80]
 25c:	add	x2, x1, #0x90
 260:	adrp	x0, 0 <gomp_global_icv>
 264:	add	x0, x0, #0x0
 268:	cmp	x1, #0x0
 26c:	csel	x0, x0, x2, eq  // eq = none
 270:	ldr	w0, [x0, #20]
 274:	cmp	w0, #0x0
 278:	mov	w1, #0x7fffffff            	// #2147483647
 27c:	csel	w0, w0, w1, ge  // ge = tcont
 280:	ret

0000000000000284 <gomp_ialias_omp_set_max_active_levels>:
 284:	tbnz	w0, #31, 294 <gomp_ialias_omp_set_max_active_levels+0x10>
 288:	sxtw	x0, w0
 28c:	adrp	x1, 0 <gomp_max_active_levels_var>
 290:	str	x0, [x1]
 294:	ret

0000000000000298 <gomp_ialias_omp_get_max_active_levels>:
 298:	adrp	x0, 0 <gomp_max_active_levels_var>
 29c:	ldr	w0, [x0]
 2a0:	ret

00000000000002a4 <gomp_ialias_omp_get_cancellation>:
 2a4:	adrp	x0, 0 <gomp_cancel_var>
 2a8:	ldrb	w0, [x0]
 2ac:	ret

00000000000002b0 <gomp_ialias_omp_get_max_task_priority>:
 2b0:	adrp	x0, 0 <gomp_max_task_priority_var>
 2b4:	ldr	w0, [x0]
 2b8:	ret

00000000000002bc <gomp_ialias_omp_get_proc_bind>:
 2bc:	adrp	x0, 0 <gomp_tls_data>
 2c0:	ldr	x0, [x0]
 2c4:	mrs	x1, tpidr_el0
 2c8:	add	x0, x1, x0
 2cc:	ldr	x1, [x0, #80]
 2d0:	add	x2, x1, #0x90
 2d4:	adrp	x0, 0 <gomp_global_icv>
 2d8:	add	x0, x0, #0x0
 2dc:	cmp	x1, #0x0
 2e0:	csel	x0, x0, x2, eq  // eq = none
 2e4:	ldrb	w0, [x0, #26]
 2e8:	ret

00000000000002ec <gomp_ialias_omp_get_initial_device>:
 2ec:	mov	w0, #0xfffffffe            	// #-2
 2f0:	ret

00000000000002f4 <gomp_ialias_omp_get_num_places>:
 2f4:	adrp	x0, 0 <gomp_places_list_len>
 2f8:	ldr	w0, [x0]
 2fc:	ret

0000000000000300 <gomp_ialias_omp_get_place_num>:
 300:	adrp	x0, 0 <gomp_places_list>
 304:	ldr	x0, [x0]
 308:	cbz	x0, 36c <gomp_ialias_omp_get_place_num+0x6c>
 30c:	adrp	x0, 0 <gomp_tls_data>
 310:	ldr	x0, [x0]
 314:	mrs	x1, tpidr_el0
 318:	add	x0, x1, x0
 31c:	ldr	w0, [x0, #92]
 320:	cbz	w0, 340 <gomp_ialias_omp_get_place_num+0x40>
 324:	adrp	x0, 0 <gomp_tls_data>
 328:	ldr	x0, [x0]
 32c:	mrs	x1, tpidr_el0
 330:	add	x0, x1, x0
 334:	ldr	w0, [x0, #92]
 338:	sub	w0, w0, #0x1
 33c:	ret
 340:	stp	x29, x30, [sp, #-16]!
 344:	mov	x29, sp
 348:	bl	0 <gomp_init_affinity>
 34c:	adrp	x0, 0 <gomp_tls_data>
 350:	ldr	x0, [x0]
 354:	mrs	x1, tpidr_el0
 358:	add	x0, x1, x0
 35c:	ldr	w0, [x0, #92]
 360:	sub	w0, w0, #0x1
 364:	ldp	x29, x30, [sp], #16
 368:	ret
 36c:	mov	w0, #0xffffffff            	// #-1
 370:	ret

0000000000000374 <gomp_ialias_omp_get_partition_num_places>:
 374:	adrp	x0, 0 <gomp_places_list>
 378:	ldr	x0, [x0]
 37c:	cbz	x0, 3d8 <gomp_ialias_omp_get_partition_num_places+0x64>
 380:	adrp	x0, 0 <gomp_tls_data>
 384:	ldr	x0, [x0]
 388:	mrs	x1, tpidr_el0
 38c:	add	x0, x1, x0
 390:	ldr	w0, [x0, #92]
 394:	cbz	w0, 3b0 <gomp_ialias_omp_get_partition_num_places+0x3c>
 398:	adrp	x0, 0 <gomp_tls_data>
 39c:	ldr	x0, [x0]
 3a0:	mrs	x1, tpidr_el0
 3a4:	add	x0, x1, x0
 3a8:	ldr	w0, [x0, #56]
 3ac:	ret
 3b0:	stp	x29, x30, [sp, #-16]!
 3b4:	mov	x29, sp
 3b8:	bl	0 <gomp_init_affinity>
 3bc:	adrp	x0, 0 <gomp_tls_data>
 3c0:	ldr	x0, [x0]
 3c4:	mrs	x1, tpidr_el0
 3c8:	add	x0, x1, x0
 3cc:	ldr	w0, [x0, #56]
 3d0:	ldp	x29, x30, [sp], #16
 3d4:	ret
 3d8:	mov	w0, #0x0                   	// #0
 3dc:	ret

00000000000003e0 <gomp_ialias_omp_get_partition_place_nums>:
 3e0:	stp	x29, x30, [sp, #-32]!
 3e4:	mov	x29, sp
 3e8:	str	x19, [sp, #16]
 3ec:	mov	x19, x0
 3f0:	adrp	x0, 0 <gomp_places_list>
 3f4:	ldr	x0, [x0]
 3f8:	cbz	x0, 45c <gomp_ialias_omp_get_partition_place_nums+0x7c>
 3fc:	adrp	x0, 0 <gomp_tls_data>
 400:	ldr	x0, [x0]
 404:	mrs	x1, tpidr_el0
 408:	add	x0, x1, x0
 40c:	ldr	w0, [x0, #92]
 410:	cbz	w0, 468 <gomp_ialias_omp_get_partition_place_nums+0x88>
 414:	adrp	x0, 0 <gomp_tls_data>
 418:	ldr	x0, [x0]
 41c:	mrs	x1, tpidr_el0
 420:	add	x0, x1, x0
 424:	ldr	w0, [x0, #56]
 428:	cbz	w0, 45c <gomp_ialias_omp_get_partition_place_nums+0x7c>
 42c:	mov	x1, #0x0                   	// #0
 430:	adrp	x3, 0 <gomp_tls_data>
 434:	ldr	x3, [x3]
 438:	mrs	x2, tpidr_el0
 43c:	add	x3, x2, x3
 440:	ldr	w2, [x3, #52]
 444:	add	w2, w2, w1
 448:	str	w2, [x19, x1, lsl #2]
 44c:	add	x1, x1, #0x1
 450:	ldr	w2, [x3, #56]
 454:	cmp	w2, w1
 458:	b.hi	440 <gomp_ialias_omp_get_partition_place_nums+0x60>  // b.pmore
 45c:	ldr	x19, [sp, #16]
 460:	ldp	x29, x30, [sp], #32
 464:	ret
 468:	bl	0 <gomp_init_affinity>
 46c:	b	414 <gomp_ialias_omp_get_partition_place_nums+0x34>

icv-device.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_default_device>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w0
  10:	adrp	x0, 0 <gomp_tls_data>
  14:	ldr	x0, [x0]
  18:	mrs	x1, tpidr_el0
  1c:	add	x0, x1, x0
  20:	ldr	x0, [x0, #80]
  24:	cbz	x0, 44 <gomp_ialias_omp_set_default_device+0x44>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csel	w19, w19, wzr, ge  // ge = tcont
  34:	str	w19, [x0, #16]
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	bl	0 <gomp_new_icv>
  48:	b	2c <gomp_ialias_omp_set_default_device+0x2c>

000000000000004c <gomp_ialias_omp_get_default_device>:
  4c:	adrp	x0, 0 <gomp_tls_data>
  50:	ldr	x0, [x0]
  54:	mrs	x1, tpidr_el0
  58:	add	x0, x1, x0
  5c:	ldr	x1, [x0, #80]
  60:	add	x2, x1, #0x90
  64:	adrp	x0, 0 <gomp_global_icv>
  68:	add	x0, x0, #0x0
  6c:	cmp	x1, #0x0
  70:	csel	x0, x0, x2, eq  // eq = none
  74:	ldr	w0, [x0, #16]
  78:	ret

000000000000007c <gomp_ialias_omp_get_num_devices>:
  7c:	stp	x29, x30, [sp, #-16]!
  80:	mov	x29, sp
  84:	bl	0 <gomp_get_num_devices>
  88:	ldp	x29, x30, [sp], #16
  8c:	ret

0000000000000090 <gomp_ialias_omp_is_initial_device>:
  90:	mov	w0, #0x1                   	// #1
  94:	ret

iter.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_static_next>:
   0:	mov	x7, x0
   4:	adrp	x2, 0 <gomp_tls_data>
   8:	ldr	x2, [x2]
   c:	mrs	x3, tpidr_el0
  10:	add	x2, x3, x2
  14:	ldr	x4, [x2, #16]
  18:	ldr	x3, [x2, #24]
  1c:	cbz	x4, 1b8 <gomp_iter_static_next+0x1b8>
  20:	ldr	w6, [x4]
  24:	ldr	x2, [x2, #72]
  28:	cmn	x2, #0x1
  2c:	b.eq	1b0 <gomp_iter_static_next+0x1b0>  // b.none
  30:	cmp	x6, #0x1
  34:	b.eq	1d8 <gomp_iter_static_next+0x1d8>  // b.none
  38:	ldr	x4, [x3, #8]
  3c:	cbnz	x4, 100 <gomp_iter_static_next+0x100>
  40:	mov	w0, #0x1                   	// #1
  44:	cbnz	x2, 210 <gomp_iter_static_next+0x210>
  48:	ldr	x5, [x3, #24]
  4c:	mov	x0, #0x1                   	// #1
  50:	cmp	x5, #0x0
  54:	cneg	x4, x0, gt
  58:	ldr	x8, [x3, #72]
  5c:	ldr	x0, [x3, #16]
  60:	sub	x0, x0, x8
  64:	add	x3, x5, x4
  68:	add	x0, x0, x3
  6c:	sdiv	x0, x0, x5
  70:	adrp	x3, 0 <gomp_tls_data>
  74:	ldr	x3, [x3]
  78:	mrs	x4, tpidr_el0
  7c:	add	x3, x4, x3
  80:	ldr	w4, [x3, #40]
  84:	udiv	x3, x0, x6
  88:	msub	x6, x3, x6, x0
  8c:	cmp	x4, x6
  90:	b.cs	9c <gomp_iter_static_next+0x9c>  // b.hs, b.nlast
  94:	add	x3, x3, #0x1
  98:	mov	x6, x2
  9c:	madd	x2, x3, x4, x6
  a0:	add	x3, x3, x2
  a4:	cmp	x2, x3
  a8:	b.cc	c8 <gomp_iter_static_next+0xc8>  // b.lo, b.ul, b.last
  ac:	mov	x0, #0x1                   	// #1
  b0:	adrp	x1, 0 <gomp_tls_data>
  b4:	ldr	x1, [x1]
  b8:	mrs	x2, tpidr_el0
  bc:	add	x1, x2, x1
  c0:	str	x0, [x1, #72]
  c4:	b	210 <gomp_iter_static_next+0x210>
  c8:	madd	x2, x2, x5, x8
  cc:	str	x2, [x7]
  d0:	madd	x5, x3, x5, x8
  d4:	str	x5, [x1]
  d8:	mov	x1, #0x1                   	// #1
  dc:	cmp	x0, x3
  e0:	cneg	x1, x1, eq  // eq = none
  e4:	adrp	x0, 0 <gomp_tls_data>
  e8:	ldr	x0, [x0]
  ec:	mrs	x2, tpidr_el0
  f0:	add	x0, x2, x0
  f4:	str	x1, [x0, #72]
  f8:	mov	w0, #0x0                   	// #0
  fc:	b	210 <gomp_iter_static_next+0x210>
 100:	ldr	x8, [x3, #24]
 104:	mov	x5, #0x1                   	// #1
 108:	cmp	x8, #0x0
 10c:	cneg	x5, x5, gt
 110:	ldr	x9, [x3, #72]
 114:	ldr	x3, [x3, #16]
 118:	sub	x3, x3, x9
 11c:	add	x5, x8, x5
 120:	add	x3, x3, x5
 124:	sdiv	x3, x3, x8
 128:	adrp	x0, 0 <gomp_tls_data>
 12c:	ldr	x0, [x0]
 130:	mrs	x5, tpidr_el0
 134:	add	x0, x5, x0
 138:	ldr	w0, [x0, #40]
 13c:	madd	x2, x2, x6, x0
 140:	mul	x2, x2, x4
 144:	mov	w0, #0x1                   	// #1
 148:	cmp	x3, x2
 14c:	b.ls	210 <gomp_iter_static_next+0x210>  // b.plast
 150:	add	x4, x4, x2
 154:	madd	x2, x2, x8, x9
 158:	str	x2, [x7]
 15c:	cmp	x3, x4
 160:	csel	x0, x3, x4, ls  // ls = plast
 164:	madd	x8, x0, x8, x9
 168:	str	x8, [x1]
 16c:	b.ls	194 <gomp_iter_static_next+0x194>  // b.plast
 170:	adrp	x0, 0 <gomp_tls_data>
 174:	ldr	x0, [x0]
 178:	mrs	x1, tpidr_el0
 17c:	add	x0, x1, x0
 180:	ldr	x1, [x0, #72]
 184:	add	x1, x1, #0x1
 188:	str	x1, [x0, #72]
 18c:	mov	w0, #0x0                   	// #0
 190:	b	210 <gomp_iter_static_next+0x210>
 194:	adrp	x0, 0 <gomp_tls_data>
 198:	ldr	x0, [x0]
 19c:	add	x0, x5, x0
 1a0:	mov	x1, #0xffffffffffffffff    	// #-1
 1a4:	str	x1, [x0, #72]
 1a8:	mov	w0, #0x0                   	// #0
 1ac:	b	210 <gomp_iter_static_next+0x210>
 1b0:	mov	w0, #0xffffffff            	// #-1
 1b4:	b	210 <gomp_iter_static_next+0x210>
 1b8:	adrp	x0, 0 <gomp_tls_data>
 1bc:	ldr	x0, [x0]
 1c0:	mrs	x2, tpidr_el0
 1c4:	add	x0, x2, x0
 1c8:	ldr	x2, [x0, #72]
 1cc:	mov	w0, #0xffffffff            	// #-1
 1d0:	cmn	x2, #0x1
 1d4:	b.eq	210 <gomp_iter_static_next+0x210>  // b.none
 1d8:	ldr	x0, [x3, #72]
 1dc:	str	x0, [x7]
 1e0:	ldr	x0, [x3, #16]
 1e4:	str	x0, [x1]
 1e8:	adrp	x0, 0 <gomp_tls_data>
 1ec:	ldr	x0, [x0]
 1f0:	mrs	x1, tpidr_el0
 1f4:	add	x0, x1, x0
 1f8:	mov	x1, #0xffffffffffffffff    	// #-1
 1fc:	str	x1, [x0, #72]
 200:	ldr	x1, [x3, #72]
 204:	ldr	x0, [x3, #16]
 208:	cmp	x1, x0
 20c:	cset	w0, eq  // eq = none
 210:	ret

0000000000000214 <gomp_iter_dynamic_next_locked>:
 214:	adrp	x2, 0 <gomp_tls_data>
 218:	ldr	x2, [x2]
 21c:	mrs	x3, tpidr_el0
 220:	add	x2, x3, x2
 224:	ldr	x3, [x2, #24]
 228:	ldr	x4, [x3, #72]
 22c:	ldr	x2, [x3, #16]
 230:	cmp	x2, x4
 234:	b.eq	274 <gomp_iter_dynamic_next_locked+0x60>  // b.none
 238:	ldr	x6, [x3, #8]
 23c:	sub	x2, x2, x4
 240:	ldr	x7, [x3, #24]
 244:	cmp	x6, x2
 248:	csel	x5, x6, x2, le
 24c:	tbnz	x7, #63, 268 <gomp_iter_dynamic_next_locked+0x54>
 250:	add	x2, x5, x4
 254:	str	x2, [x3, #72]
 258:	str	x4, [x0]
 25c:	str	x2, [x1]
 260:	mov	w0, #0x1                   	// #1
 264:	ret
 268:	cmp	x6, x2
 26c:	csel	x5, x6, x2, ge  // ge = tcont
 270:	b	250 <gomp_iter_dynamic_next_locked+0x3c>
 274:	mov	w0, #0x0                   	// #0
 278:	b	264 <gomp_iter_dynamic_next_locked+0x50>

000000000000027c <gomp_iter_dynamic_next>:
 27c:	adrp	x2, 0 <gomp_tls_data>
 280:	ldr	x2, [x2]
 284:	mrs	x3, tpidr_el0
 288:	add	x2, x3, x2
 28c:	ldr	x2, [x2, #24]
 290:	ldr	x4, [x2, #16]
 294:	ldr	x6, [x2, #24]
 298:	ldr	x3, [x2, #8]
 29c:	ldr	w5, [x2, #4]
 2a0:	cbz	w5, 318 <gomp_iter_dynamic_next+0x9c>
 2a4:	add	x2, x2, #0x48
 2a8:	ldxr	x5, [x2]
 2ac:	add	x7, x5, x3
 2b0:	stlxr	w8, x7, [x2]
 2b4:	cbnz	w8, 2a8 <gomp_iter_dynamic_next+0x2c>
 2b8:	dmb	ish
 2bc:	cmp	x6, #0x0
 2c0:	b.le	2f0 <gomp_iter_dynamic_next+0x74>
 2c4:	mov	w2, #0x0                   	// #0
 2c8:	cmp	x4, x5
 2cc:	b.le	2e8 <gomp_iter_dynamic_next+0x6c>
 2d0:	add	x3, x3, x5
 2d4:	str	x5, [x0]
 2d8:	cmp	x4, x3
 2dc:	csel	x3, x4, x3, le
 2e0:	str	x3, [x1]
 2e4:	mov	w2, #0x1                   	// #1
 2e8:	mov	w0, w2
 2ec:	ret
 2f0:	mov	w2, #0x0                   	// #0
 2f4:	cmp	x4, x5
 2f8:	b.ge	2e8 <gomp_iter_dynamic_next+0x6c>  // b.tcont
 2fc:	add	x3, x3, x5
 300:	str	x5, [x0]
 304:	cmp	x4, x3
 308:	csel	x3, x4, x3, ge  // ge = tcont
 30c:	str	x3, [x1]
 310:	mov	w2, #0x1                   	// #1
 314:	b	2e8 <gomp_iter_dynamic_next+0x6c>
 318:	add	x2, x2, #0x48
 31c:	ldr	x5, [x2]
 320:	sub	x7, x4, x5
 324:	cmp	x5, x4
 328:	b.eq	380 <gomp_iter_dynamic_next+0x104>  // b.none
 32c:	tbnz	x6, #63, 374 <gomp_iter_dynamic_next+0xf8>
 330:	cmp	x3, x7
 334:	csel	x3, x3, x7, le
 338:	add	x8, x5, x3
 33c:	ldxr	x7, [x2]
 340:	cmp	x7, x5
 344:	b.ne	350 <gomp_iter_dynamic_next+0xd4>  // b.any
 348:	stlxr	w9, x8, [x2]
 34c:	cbnz	w9, 33c <gomp_iter_dynamic_next+0xc0>
 350:	dmb	ish
 354:	cmp	x5, x7
 358:	b.ne	36c <gomp_iter_dynamic_next+0xf0>  // b.any
 35c:	str	x7, [x0]
 360:	str	x8, [x1]
 364:	mov	w2, #0x1                   	// #1
 368:	b	2e8 <gomp_iter_dynamic_next+0x6c>
 36c:	mov	x5, x7
 370:	b	320 <gomp_iter_dynamic_next+0xa4>
 374:	cmp	x3, x7
 378:	csel	x3, x3, x7, ge  // ge = tcont
 37c:	b	338 <gomp_iter_dynamic_next+0xbc>
 380:	mov	w2, #0x0                   	// #0
 384:	b	2e8 <gomp_iter_dynamic_next+0x6c>

0000000000000388 <gomp_iter_guided_next_locked>:
 388:	adrp	x2, 0 <gomp_tls_data>
 38c:	ldr	x2, [x2]
 390:	mrs	x3, tpidr_el0
 394:	add	x2, x3, x2
 398:	ldr	x4, [x2, #24]
 39c:	ldr	x2, [x2, #16]
 3a0:	mov	x5, #0x1                   	// #1
 3a4:	cbz	x2, 3ac <gomp_iter_guided_next_locked+0x24>
 3a8:	ldr	w5, [x2]
 3ac:	ldr	x6, [x4, #72]
 3b0:	ldr	x2, [x4, #16]
 3b4:	mov	w3, #0x0                   	// #0
 3b8:	cmp	x6, x2
 3bc:	b.eq	400 <gomp_iter_guided_next_locked+0x78>  // b.none
 3c0:	ldr	x7, [x4, #24]
 3c4:	sub	x8, x2, x6
 3c8:	sdiv	x8, x8, x7
 3cc:	sub	x3, x8, #0x1
 3d0:	add	x3, x3, x5
 3d4:	udiv	x3, x3, x5
 3d8:	ldr	x5, [x4, #8]
 3dc:	cmp	x5, x3
 3e0:	csel	x3, x5, x3, cs  // cs = hs, nlast
 3e4:	madd	x7, x7, x3, x6
 3e8:	cmp	x3, x8
 3ec:	csel	x2, x7, x2, ls  // ls = plast
 3f0:	str	x2, [x4, #72]
 3f4:	str	x6, [x0]
 3f8:	str	x2, [x1]
 3fc:	mov	w3, #0x1                   	// #1
 400:	mov	w0, w3
 404:	ret

0000000000000408 <gomp_iter_guided_next>:
 408:	adrp	x3, 0 <gomp_tls_data>
 40c:	ldr	x3, [x3]
 410:	mrs	x2, tpidr_el0
 414:	add	x3, x2, x3
 418:	ldr	x2, [x3, #24]
 41c:	ldr	x3, [x3, #16]
 420:	mov	x8, #0x1                   	// #1
 424:	cbz	x3, 42c <gomp_iter_guided_next+0x24>
 428:	ldr	w8, [x3]
 42c:	add	x7, x2, #0x48
 430:	ldr	x3, [x7]
 434:	ldr	x6, [x2, #16]
 438:	ldr	x10, [x2, #24]
 43c:	ldr	x9, [x2, #8]
 440:	sub	x12, x8, #0x1
 444:	mov	x11, x6
 448:	cmp	x3, x6
 44c:	b.eq	4ac <gomp_iter_guided_next+0xa4>  // b.none
 450:	sub	x4, x6, x3
 454:	sdiv	x4, x4, x10
 458:	add	x2, x12, x4
 45c:	udiv	x2, x2, x8
 460:	cmp	x9, x2
 464:	csel	x2, x9, x2, cs  // cs = hs, nlast
 468:	madd	x5, x10, x2, x3
 46c:	cmp	x2, x4
 470:	csel	x2, x5, x11, ls  // ls = plast
 474:	ldxr	x4, [x7]
 478:	cmp	x4, x3
 47c:	b.ne	488 <gomp_iter_guided_next+0x80>  // b.any
 480:	stlxr	w5, x2, [x7]
 484:	cbnz	w5, 474 <gomp_iter_guided_next+0x6c>
 488:	dmb	ish
 48c:	cmp	x3, x4
 490:	b.ne	4a4 <gomp_iter_guided_next+0x9c>  // b.any
 494:	str	x4, [x0]
 498:	str	x2, [x1]
 49c:	mov	w0, #0x1                   	// #1
 4a0:	ret
 4a4:	mov	x3, x4
 4a8:	b	448 <gomp_iter_guided_next+0x40>
 4ac:	mov	w0, #0x0                   	// #0
 4b0:	b	4a0 <gomp_iter_guided_next+0x98>

iter_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_ull_static_next>:
   0:	mov	x7, x0
   4:	adrp	x2, 0 <gomp_tls_data>
   8:	ldr	x2, [x2]
   c:	mrs	x3, tpidr_el0
  10:	add	x2, x3, x2
  14:	ldr	x3, [x2, #16]
  18:	ldr	x2, [x2, #24]
  1c:	cbz	x3, 218 <gomp_iter_ull_static_next+0x218>
  20:	ldr	w6, [x3]
  24:	adrp	x4, 0 <gomp_tls_data>
  28:	ldr	x4, [x4]
  2c:	mrs	x5, tpidr_el0
  30:	add	x4, x5, x4
  34:	ldr	x3, [x4, #72]
  38:	cmn	x3, #0x1
  3c:	b.eq	210 <gomp_iter_ull_static_next+0x210>  // b.none
  40:	cmp	x6, #0x1
  44:	b.eq	238 <gomp_iter_ull_static_next+0x238>  // b.none
  48:	ldr	x5, [x2, #8]
  4c:	cbnz	x5, 138 <gomp_iter_ull_static_next+0x138>
  50:	mov	w0, #0x1                   	// #1
  54:	cbnz	x3, 270 <gomp_iter_ull_static_next+0x270>
  58:	ldr	w0, [x2, #4]
  5c:	cbnz	w0, d4 <gomp_iter_ull_static_next+0xd4>
  60:	ldr	x5, [x2, #24]
  64:	ldr	x0, [x2, #16]
  68:	add	x0, x5, x0
  6c:	ldr	x4, [x2, #72]
  70:	mvn	x4, x4
  74:	add	x0, x0, x4
  78:	udiv	x0, x0, x5
  7c:	adrp	x4, 0 <gomp_tls_data>
  80:	ldr	x4, [x4]
  84:	mrs	x5, tpidr_el0
  88:	add	x4, x5, x4
  8c:	ldr	w5, [x4, #40]
  90:	udiv	x4, x0, x6
  94:	msub	x6, x4, x6, x0
  98:	cmp	x5, x6
  9c:	b.cs	a8 <gomp_iter_ull_static_next+0xa8>  // b.hs, b.nlast
  a0:	add	x4, x4, #0x1
  a4:	mov	x6, x3
  a8:	madd	x3, x4, x5, x6
  ac:	add	x4, x4, x3
  b0:	cmp	x3, x4
  b4:	b.cc	f8 <gomp_iter_ull_static_next+0xf8>  // b.lo, b.ul, b.last
  b8:	mov	x0, #0x1                   	// #1
  bc:	adrp	x1, 0 <gomp_tls_data>
  c0:	ldr	x1, [x1]
  c4:	mrs	x2, tpidr_el0
  c8:	add	x1, x2, x1
  cc:	str	x0, [x1, #72]
  d0:	b	270 <gomp_iter_ull_static_next+0x270>
  d4:	ldr	x4, [x2, #24]
  d8:	ldr	x0, [x2, #72]
  dc:	sub	x0, x0, #0x1
  e0:	ldr	x5, [x2, #16]
  e4:	add	x5, x4, x5
  e8:	sub	x0, x0, x5
  ec:	neg	x4, x4
  f0:	udiv	x0, x0, x4
  f4:	b	7c <gomp_iter_ull_static_next+0x7c>
  f8:	ldr	x5, [x2, #24]
  fc:	ldr	x2, [x2, #72]
 100:	madd	x3, x5, x3, x2
 104:	str	x3, [x7]
 108:	madd	x5, x5, x4, x2
 10c:	str	x5, [x1]
 110:	mov	x1, #0x1                   	// #1
 114:	cmp	x0, x4
 118:	cneg	x1, x1, eq  // eq = none
 11c:	adrp	x0, 0 <gomp_tls_data>
 120:	ldr	x0, [x0]
 124:	mrs	x2, tpidr_el0
 128:	add	x0, x2, x0
 12c:	str	x1, [x0, #72]
 130:	mov	w0, #0x0                   	// #0
 134:	b	270 <gomp_iter_ull_static_next+0x270>
 138:	ldr	w0, [x2, #4]
 13c:	cbnz	w0, 1d0 <gomp_iter_ull_static_next+0x1d0>
 140:	ldr	x8, [x2, #24]
 144:	ldr	x4, [x2, #16]
 148:	add	x4, x8, x4
 14c:	ldr	x0, [x2, #72]
 150:	mvn	x0, x0
 154:	add	x4, x4, x0
 158:	udiv	x4, x4, x8
 15c:	adrp	x0, 0 <gomp_tls_data>
 160:	ldr	x0, [x0]
 164:	mrs	x8, tpidr_el0
 168:	add	x0, x8, x0
 16c:	ldr	w0, [x0, #40]
 170:	madd	x3, x3, x6, x0
 174:	mul	x3, x3, x5
 178:	mov	w0, #0x1                   	// #1
 17c:	cmp	x4, x3
 180:	b.ls	270 <gomp_iter_ull_static_next+0x270>  // b.plast
 184:	add	x5, x5, x3
 188:	ldr	x6, [x2, #24]
 18c:	ldr	x2, [x2, #72]
 190:	madd	x3, x6, x3, x2
 194:	str	x3, [x7]
 198:	cmp	x4, x5
 19c:	csel	x0, x4, x5, ls  // ls = plast
 1a0:	madd	x0, x0, x6, x2
 1a4:	str	x0, [x1]
 1a8:	b.ls	1f4 <gomp_iter_ull_static_next+0x1f4>  // b.plast
 1ac:	adrp	x0, 0 <gomp_tls_data>
 1b0:	ldr	x0, [x0]
 1b4:	mrs	x1, tpidr_el0
 1b8:	add	x0, x1, x0
 1bc:	ldr	x1, [x0, #72]
 1c0:	add	x1, x1, #0x1
 1c4:	str	x1, [x0, #72]
 1c8:	mov	w0, #0x0                   	// #0
 1cc:	b	270 <gomp_iter_ull_static_next+0x270>
 1d0:	ldr	x0, [x2, #24]
 1d4:	ldr	x4, [x2, #72]
 1d8:	sub	x4, x4, #0x1
 1dc:	ldr	x8, [x2, #16]
 1e0:	add	x8, x0, x8
 1e4:	sub	x4, x4, x8
 1e8:	neg	x0, x0
 1ec:	udiv	x4, x4, x0
 1f0:	b	15c <gomp_iter_ull_static_next+0x15c>
 1f4:	adrp	x0, 0 <gomp_tls_data>
 1f8:	ldr	x0, [x0]
 1fc:	add	x0, x8, x0
 200:	mov	x1, #0xffffffffffffffff    	// #-1
 204:	str	x1, [x0, #72]
 208:	mov	w0, #0x0                   	// #0
 20c:	b	270 <gomp_iter_ull_static_next+0x270>
 210:	mov	w0, #0xffffffff            	// #-1
 214:	b	270 <gomp_iter_ull_static_next+0x270>
 218:	adrp	x0, 0 <gomp_tls_data>
 21c:	ldr	x0, [x0]
 220:	mrs	x3, tpidr_el0
 224:	add	x0, x3, x0
 228:	ldr	x3, [x0, #72]
 22c:	mov	w0, #0xffffffff            	// #-1
 230:	cmn	x3, #0x1
 234:	b.eq	270 <gomp_iter_ull_static_next+0x270>  // b.none
 238:	ldr	x0, [x2, #72]
 23c:	str	x0, [x7]
 240:	ldr	x0, [x2, #16]
 244:	str	x0, [x1]
 248:	adrp	x0, 0 <gomp_tls_data>
 24c:	ldr	x0, [x0]
 250:	mrs	x1, tpidr_el0
 254:	add	x0, x1, x0
 258:	mov	x1, #0xffffffffffffffff    	// #-1
 25c:	str	x1, [x0, #72]
 260:	ldr	x1, [x2, #72]
 264:	ldr	x0, [x2, #16]
 268:	cmp	x1, x0
 26c:	cset	w0, eq  // eq = none
 270:	ret

0000000000000274 <gomp_iter_ull_dynamic_next_locked>:
 274:	adrp	x2, 0 <gomp_tls_data>
 278:	ldr	x2, [x2]
 27c:	mrs	x3, tpidr_el0
 280:	add	x2, x3, x2
 284:	ldr	x2, [x2, #24]
 288:	ldr	x4, [x2, #72]
 28c:	ldr	x3, [x2, #16]
 290:	cmp	x3, x4
 294:	b.eq	2d4 <gomp_iter_ull_dynamic_next_locked+0x60>  // b.none
 298:	ldr	x6, [x2, #8]
 29c:	sub	x3, x3, x4
 2a0:	ldr	w7, [x2, #4]
 2a4:	cmp	x6, x3
 2a8:	csel	x5, x6, x3, ls  // ls = plast
 2ac:	tbnz	w7, #1, 2c8 <gomp_iter_ull_dynamic_next_locked+0x54>
 2b0:	add	x3, x5, x4
 2b4:	str	x3, [x2, #72]
 2b8:	str	x4, [x0]
 2bc:	str	x3, [x1]
 2c0:	mov	w0, #0x1                   	// #1
 2c4:	ret
 2c8:	cmp	x6, x3
 2cc:	csel	x5, x6, x3, cs  // cs = hs, nlast
 2d0:	b	2b0 <gomp_iter_ull_dynamic_next_locked+0x3c>
 2d4:	mov	w0, #0x0                   	// #0
 2d8:	b	2c4 <gomp_iter_ull_dynamic_next_locked+0x50>

00000000000002dc <gomp_iter_ull_dynamic_next>:
 2dc:	adrp	x2, 0 <gomp_tls_data>
 2e0:	ldr	x2, [x2]
 2e4:	mrs	x3, tpidr_el0
 2e8:	add	x2, x3, x2
 2ec:	ldr	x2, [x2, #24]
 2f0:	ldr	x4, [x2, #16]
 2f4:	ldr	x3, [x2, #8]
 2f8:	ldr	w5, [x2, #4]
 2fc:	tbz	w5, #0, 374 <gomp_iter_ull_dynamic_next+0x98>
 300:	add	x5, x2, #0x48
 304:	ldxr	x6, [x5]
 308:	add	x7, x6, x3
 30c:	stlxr	w8, x7, [x5]
 310:	cbnz	w8, 304 <gomp_iter_ull_dynamic_next+0x28>
 314:	dmb	ish
 318:	ldr	w2, [x2, #4]
 31c:	tbnz	w2, #1, 34c <gomp_iter_ull_dynamic_next+0x70>
 320:	mov	w2, #0x0                   	// #0
 324:	cmp	x4, x6
 328:	b.ls	344 <gomp_iter_ull_dynamic_next+0x68>  // b.plast
 32c:	add	x3, x3, x6
 330:	str	x6, [x0]
 334:	cmp	x4, x3
 338:	csel	x3, x4, x3, ls  // ls = plast
 33c:	str	x3, [x1]
 340:	mov	w2, #0x1                   	// #1
 344:	mov	w0, w2
 348:	ret
 34c:	mov	w2, #0x0                   	// #0
 350:	cmp	x4, x6
 354:	b.cs	344 <gomp_iter_ull_dynamic_next+0x68>  // b.hs, b.nlast
 358:	add	x2, x3, x6
 35c:	str	x6, [x0]
 360:	cmp	x4, x2
 364:	csel	x3, x4, x2, cs  // cs = hs, nlast
 368:	str	x3, [x1]
 36c:	mov	w2, #0x1                   	// #1
 370:	b	344 <gomp_iter_ull_dynamic_next+0x68>
 374:	add	x6, x2, #0x48
 378:	ldr	x5, [x6]
 37c:	sub	x7, x4, x5
 380:	cmp	x5, x4
 384:	b.eq	3e0 <gomp_iter_ull_dynamic_next+0x104>  // b.none
 388:	ldr	w8, [x2, #4]
 38c:	tbnz	w8, #1, 3d4 <gomp_iter_ull_dynamic_next+0xf8>
 390:	cmp	x3, x7
 394:	csel	x3, x3, x7, ls  // ls = plast
 398:	add	x8, x5, x3
 39c:	ldxr	x7, [x6]
 3a0:	cmp	x7, x5
 3a4:	b.ne	3b0 <gomp_iter_ull_dynamic_next+0xd4>  // b.any
 3a8:	stlxr	w9, x8, [x6]
 3ac:	cbnz	w9, 39c <gomp_iter_ull_dynamic_next+0xc0>
 3b0:	dmb	ish
 3b4:	cmp	x5, x7
 3b8:	b.ne	3cc <gomp_iter_ull_dynamic_next+0xf0>  // b.any
 3bc:	str	x7, [x0]
 3c0:	str	x8, [x1]
 3c4:	mov	w2, #0x1                   	// #1
 3c8:	b	344 <gomp_iter_ull_dynamic_next+0x68>
 3cc:	mov	x5, x7
 3d0:	b	37c <gomp_iter_ull_dynamic_next+0xa0>
 3d4:	cmp	x3, x7
 3d8:	csel	x3, x3, x7, cs  // cs = hs, nlast
 3dc:	b	398 <gomp_iter_ull_dynamic_next+0xbc>
 3e0:	mov	w2, #0x0                   	// #0
 3e4:	b	344 <gomp_iter_ull_dynamic_next+0x68>

00000000000003e8 <gomp_iter_ull_guided_next_locked>:
 3e8:	adrp	x3, 0 <gomp_tls_data>
 3ec:	ldr	x3, [x3]
 3f0:	mrs	x2, tpidr_el0
 3f4:	add	x3, x2, x3
 3f8:	ldr	x2, [x3, #24]
 3fc:	ldr	x3, [x3, #16]
 400:	mov	x6, #0x1                   	// #1
 404:	cbz	x3, 40c <gomp_iter_ull_guided_next_locked+0x24>
 408:	ldr	w6, [x3]
 40c:	ldr	x7, [x2, #72]
 410:	ldr	x3, [x2, #16]
 414:	mov	w4, #0x0                   	// #0
 418:	cmp	x7, x3
 41c:	b.eq	46c <gomp_iter_ull_guided_next_locked+0x84>  // b.none
 420:	ldr	w4, [x2, #4]
 424:	cbnz	w4, 474 <gomp_iter_ull_guided_next_locked+0x8c>
 428:	sub	x4, x3, x7
 42c:	ldr	x5, [x2, #24]
 430:	udiv	x4, x4, x5
 434:	sub	x5, x6, #0x1
 438:	add	x5, x5, x4
 43c:	udiv	x5, x5, x6
 440:	ldr	x6, [x2, #8]
 444:	cmp	x6, x5
 448:	csel	x5, x6, x5, cs  // cs = hs, nlast
 44c:	cmp	x4, x5
 450:	b.cc	45c <gomp_iter_ull_guided_next_locked+0x74>  // b.lo, b.ul, b.last
 454:	ldr	x3, [x2, #24]
 458:	madd	x3, x5, x3, x7
 45c:	str	x3, [x2, #72]
 460:	str	x7, [x0]
 464:	str	x3, [x1]
 468:	mov	w4, #0x1                   	// #1
 46c:	mov	w0, w4
 470:	ret
 474:	sub	x4, x7, x3
 478:	ldr	x5, [x2, #24]
 47c:	neg	x5, x5
 480:	udiv	x4, x4, x5
 484:	b	434 <gomp_iter_ull_guided_next_locked+0x4c>

0000000000000488 <gomp_iter_ull_guided_next>:
 488:	adrp	x2, 0 <gomp_tls_data>
 48c:	ldr	x2, [x2]
 490:	mrs	x3, tpidr_el0
 494:	add	x2, x3, x2
 498:	ldr	x4, [x2, #24]
 49c:	ldr	x2, [x2, #16]
 4a0:	mov	x10, #0x1                   	// #1
 4a4:	cbz	x2, 4ac <gomp_iter_ull_guided_next+0x24>
 4a8:	ldr	w10, [x2]
 4ac:	add	x8, x4, #0x48
 4b0:	ldr	x3, [x8]
 4b4:	ldr	x7, [x4, #16]
 4b8:	ldr	x9, [x4, #24]
 4bc:	ldr	x11, [x4, #8]
 4c0:	neg	x14, x9
 4c4:	sub	x13, x10, #0x1
 4c8:	mov	x12, x7
 4cc:	cmp	x3, x7
 4d0:	b.eq	544 <gomp_iter_ull_guided_next+0xbc>  // b.none
 4d4:	ldr	w2, [x4, #4]
 4d8:	cbnz	w2, 538 <gomp_iter_ull_guided_next+0xb0>
 4dc:	sub	x5, x7, x3
 4e0:	udiv	x5, x5, x9
 4e4:	add	x2, x13, x5
 4e8:	udiv	x2, x2, x10
 4ec:	cmp	x11, x2
 4f0:	csel	x2, x11, x2, cs  // cs = hs, nlast
 4f4:	madd	x6, x2, x9, x3
 4f8:	cmp	x5, x2
 4fc:	csel	x2, x6, x12, cs  // cs = hs, nlast
 500:	ldxr	x5, [x8]
 504:	cmp	x5, x3
 508:	b.ne	514 <gomp_iter_ull_guided_next+0x8c>  // b.any
 50c:	stlxr	w6, x2, [x8]
 510:	cbnz	w6, 500 <gomp_iter_ull_guided_next+0x78>
 514:	dmb	ish
 518:	cmp	x3, x5
 51c:	b.ne	530 <gomp_iter_ull_guided_next+0xa8>  // b.any
 520:	str	x5, [x0]
 524:	str	x2, [x1]
 528:	mov	w0, #0x1                   	// #1
 52c:	ret
 530:	mov	x3, x5
 534:	b	4cc <gomp_iter_ull_guided_next+0x44>
 538:	sub	x5, x3, x7
 53c:	udiv	x5, x5, x14
 540:	b	4e4 <gomp_iter_ull_guided_next+0x5c>
 544:	mov	w0, #0x0                   	// #0
 548:	b	52c <gomp_iter_ull_guided_next+0xa4>

loop.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_adjust_sched>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	x2, x0
       c:	and	x0, x0, #0x7fffffff
      10:	tst	x2, #0x7ffffffc
      14:	b.ne	20 <gomp_adjust_sched+0x20>  // b.any
      18:	cbz	x0, 28 <gomp_adjust_sched+0x28>
      1c:	b	70 <gomp_adjust_sched+0x70>
      20:	cmp	x0, #0x4
      24:	b.ne	90 <gomp_adjust_sched+0x90>  // b.any
      28:	adrp	x0, 0 <gomp_tls_data>
      2c:	ldr	x0, [x0]
      30:	mrs	x2, tpidr_el0
      34:	add	x0, x2, x0
      38:	ldr	x0, [x0, #80]
      3c:	add	x3, x0, #0x90
      40:	adrp	x2, 0 <gomp_global_icv>
      44:	add	x2, x2, #0x0
      48:	cmp	x0, #0x0
      4c:	csel	x2, x2, x3, eq  // eq = none
      50:	ldr	w3, [x2, #8]
      54:	and	w0, w3, #0x7fffffff
      58:	tst	w3, #0x7ffffffc
      5c:	b.ne	78 <gomp_adjust_sched+0x78>  // b.any
      60:	cbz	w0, 8c <gomp_adjust_sched+0x8c>
      64:	mov	w0, w0
      68:	ldrsw	x2, [x2, #12]
      6c:	str	x2, [x1]
      70:	ldp	x29, x30, [sp], #16
      74:	ret
      78:	cmp	w0, #0x4
      7c:	b.ne	8c <gomp_adjust_sched+0x8c>  // b.any
      80:	str	xzr, [x1]
      84:	mov	x0, #0x1                   	// #1
      88:	b	70 <gomp_adjust_sched+0x70>
      8c:	bl	0 <abort>
      90:	bl	0 <abort>

0000000000000094 <gomp_parallel_loop_start>:
      94:	stp	x29, x30, [sp, #-80]!
      98:	mov	x29, sp
      9c:	stp	x19, x20, [sp, #16]
      a0:	stp	x21, x22, [sp, #32]
      a4:	stp	x23, x24, [sp, #48]
      a8:	stp	x25, x26, [sp, #64]
      ac:	mov	x21, x0
      b0:	mov	x22, x1
      b4:	mov	w0, w2
      b8:	mov	x24, x3
      bc:	mov	x19, x4
      c0:	mov	x25, x5
      c4:	mov	w26, w6
      c8:	mov	x20, x7
      cc:	mov	w1, #0x0                   	// #0
      d0:	bl	0 <gomp_resolve_num_threads>
      d4:	mov	w23, w0
      d8:	bl	0 <gomp_new_team>
      dc:	mov	x4, x0
      e0:	str	w26, [x0, #256]
      e4:	str	x20, [x0, #264]
      e8:	cmp	x25, #0x0
      ec:	ccmp	x24, x19, #0x4, gt
      f0:	b.gt	104 <gomp_parallel_loop_start+0x70>
      f4:	cmp	x25, #0x0
      f8:	ccmp	x24, x19, #0x0, lt  // lt = tstop
      fc:	csel	x19, x19, x24, ge  // ge = tcont
     100:	b	108 <gomp_parallel_loop_start+0x74>
     104:	mov	x19, x24
     108:	str	x19, [x4, #272]
     10c:	str	x25, [x4, #280]
     110:	str	x24, [x4, #328]
     114:	cmp	w26, #0x2
     118:	b.eq	14c <gomp_parallel_loop_start+0xb8>  // b.none
     11c:	mov	x5, #0x0                   	// #0
     120:	ldr	w3, [sp, #80]
     124:	mov	w2, w23
     128:	mov	x1, x22
     12c:	mov	x0, x21
     130:	bl	0 <gomp_team_start>
     134:	ldp	x19, x20, [sp, #16]
     138:	ldp	x21, x22, [sp, #32]
     13c:	ldp	x23, x24, [sp, #48]
     140:	ldp	x25, x26, [sp, #64]
     144:	ldp	x29, x30, [sp], #80
     148:	ret
     14c:	mul	x20, x25, x20
     150:	str	x20, [x4, #264]
     154:	adrp	x0, 0 <gomp_tls_data>
     158:	ldr	x0, [x0]
     15c:	mrs	x1, tpidr_el0
     160:	add	x0, x1, x0
     164:	ldr	x1, [x0, #16]
     168:	mov	x0, #0x1                   	// #1
     16c:	cbz	x1, 174 <gomp_parallel_loop_start+0xe0>
     170:	ldr	w0, [x1]
     174:	cmp	x25, #0x0
     178:	b.le	1b0 <gomp_parallel_loop_start+0x11c>
     17c:	orr	x2, x20, x0
     180:	mov	x1, #0x7fffffff            	// #2147483647
     184:	cmp	x2, x1
     188:	b.hi	1a8 <gomp_parallel_loop_start+0x114>  // b.pmore
     18c:	madd	x20, x0, x20, x20
     190:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
     194:	sub	x20, x0, x20
     198:	cmp	x19, x20
     19c:	cset	w0, lt  // lt = tstop
     1a0:	str	w0, [x4, #260]
     1a4:	b	11c <gomp_parallel_loop_start+0x88>
     1a8:	str	wzr, [x4, #260]
     1ac:	b	11c <gomp_parallel_loop_start+0x88>
     1b0:	neg	x2, x20
     1b4:	orr	x3, x0, x2
     1b8:	mov	x1, #0x7fffffff            	// #2147483647
     1bc:	cmp	x3, x1
     1c0:	b.hi	1e4 <gomp_parallel_loop_start+0x150>  // b.pmore
     1c4:	madd	x2, x0, x2, x2
     1c8:	mov	x0, #0x2                   	// #2
     1cc:	movk	x0, #0x8000, lsl #48
     1d0:	add	x2, x2, x0
     1d4:	cmp	x19, x2
     1d8:	cset	w0, ge  // ge = tcont
     1dc:	str	w0, [x4, #260]
     1e0:	b	11c <gomp_parallel_loop_start+0x88>
     1e4:	str	wzr, [x4, #260]
     1e8:	b	11c <gomp_parallel_loop_start+0x88>

00000000000001ec <GOMP_loop_static_start>:
     1ec:	stp	x29, x30, [sp, #-64]!
     1f0:	mov	x29, sp
     1f4:	stp	x19, x20, [sp, #16]
     1f8:	stp	x21, x22, [sp, #32]
     1fc:	stp	x23, x24, [sp, #48]
     200:	mov	x20, x0
     204:	mov	x19, x1
     208:	mov	x21, x2
     20c:	mov	x24, x3
     210:	mov	x22, x4
     214:	mov	x23, x5
     218:	adrp	x0, 0 <gomp_tls_data>
     21c:	ldr	x0, [x0]
     220:	mrs	x1, tpidr_el0
     224:	add	x0, x1, x0
     228:	str	xzr, [x0, #72]
     22c:	mov	x0, #0x0                   	// #0
     230:	bl	0 <gomp_work_share_start>
     234:	and	w0, w0, #0xff
     238:	cbz	w0, 2cc <GOMP_loop_static_start+0xe0>
     23c:	adrp	x0, 0 <gomp_tls_data>
     240:	ldr	x0, [x0]
     244:	mrs	x1, tpidr_el0
     248:	add	x0, x1, x0
     24c:	ldr	x0, [x0, #24]
     250:	mov	w1, #0x1                   	// #1
     254:	str	w1, [x0]
     258:	str	x24, [x0, #8]
     25c:	cmp	x21, #0x0
     260:	ccmp	x20, x19, #0x4, gt
     264:	b.gt	278 <GOMP_loop_static_start+0x8c>
     268:	cmp	x21, #0x0
     26c:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     270:	csel	x19, x19, x20, ge  // ge = tcont
     274:	b	27c <GOMP_loop_static_start+0x90>
     278:	mov	x19, x20
     27c:	str	x19, [x0, #16]
     280:	str	x21, [x0, #24]
     284:	str	x20, [x0, #72]
     288:	adrp	x0, 0 <gomp_tls_data>
     28c:	ldr	x0, [x0]
     290:	mrs	x1, tpidr_el0
     294:	add	x0, x1, x0
     298:	ldr	x0, [x0, #32]
     29c:	cbz	x0, 2cc <GOMP_loop_static_start+0xe0>
     2a0:	add	x0, x0, #0x50
     2a4:	adrp	x1, 0 <gomp_tls_data>
     2a8:	ldr	x1, [x1]
     2ac:	mrs	x2, tpidr_el0
     2b0:	add	x1, x2, x1
     2b4:	ldr	x2, [x1, #24]
     2b8:	ldxr	x1, [x0]
     2bc:	stlxr	w3, x2, [x0]
     2c0:	cbnz	w3, 2b8 <GOMP_loop_static_start+0xcc>
     2c4:	cmp	x1, #0x1
     2c8:	b.ne	2f4 <GOMP_loop_static_start+0x108>  // b.any
     2cc:	mov	x1, x23
     2d0:	mov	x0, x22
     2d4:	bl	0 <gomp_iter_static_next>
     2d8:	cmp	w0, #0x0
     2dc:	cset	w0, eq  // eq = none
     2e0:	ldp	x19, x20, [sp, #16]
     2e4:	ldp	x21, x22, [sp, #32]
     2e8:	ldp	x23, x24, [sp, #48]
     2ec:	ldp	x29, x30, [sp], #64
     2f0:	ret
     2f4:	bl	0 <gomp_ptrlock_set_slow>
     2f8:	b	2cc <GOMP_loop_static_start+0xe0>

00000000000002fc <GOMP_loop_dynamic_start>:
     2fc:	stp	x29, x30, [sp, #-64]!
     300:	mov	x29, sp
     304:	stp	x19, x20, [sp, #16]
     308:	stp	x21, x22, [sp, #32]
     30c:	stp	x23, x24, [sp, #48]
     310:	mov	x24, x0
     314:	mov	x20, x1
     318:	mov	x23, x2
     31c:	mov	x19, x3
     320:	mov	x21, x4
     324:	mov	x22, x5
     328:	mov	x0, #0x0                   	// #0
     32c:	bl	0 <gomp_work_share_start>
     330:	and	w3, w0, #0xff
     334:	cbnz	w3, 358 <GOMP_loop_dynamic_start+0x5c>
     338:	mov	x1, x22
     33c:	mov	x0, x21
     340:	bl	0 <gomp_iter_dynamic_next>
     344:	ldp	x19, x20, [sp, #16]
     348:	ldp	x21, x22, [sp, #32]
     34c:	ldp	x23, x24, [sp, #48]
     350:	ldp	x29, x30, [sp], #64
     354:	ret
     358:	adrp	x0, 0 <gomp_tls_data>
     35c:	ldr	x0, [x0]
     360:	mrs	x1, tpidr_el0
     364:	add	x0, x1, x0
     368:	ldr	x1, [x0, #24]
     36c:	mov	w0, #0x2                   	// #2
     370:	str	w0, [x1]
     374:	str	x19, [x1, #8]
     378:	cmp	x23, #0x0
     37c:	ccmp	x24, x20, #0x4, gt
     380:	b.gt	484 <GOMP_loop_dynamic_start+0x188>
     384:	cmp	x23, #0x0
     388:	ccmp	x24, x20, #0x0, lt  // lt = tstop
     38c:	csel	x20, x20, x24, ge  // ge = tcont
     390:	str	x20, [x1, #16]
     394:	str	x23, [x1, #24]
     398:	str	x24, [x1, #72]
     39c:	mul	x19, x23, x19
     3a0:	str	x19, [x1, #8]
     3a4:	adrp	x0, 0 <gomp_tls_data>
     3a8:	ldr	x0, [x0]
     3ac:	mrs	x2, tpidr_el0
     3b0:	add	x0, x2, x0
     3b4:	ldr	x0, [x0, #16]
     3b8:	mov	x2, #0x1                   	// #1
     3bc:	cbz	x0, 3c4 <GOMP_loop_dynamic_start+0xc8>
     3c0:	ldr	w2, [x0]
     3c4:	cmp	x23, #0x0
     3c8:	b.le	448 <GOMP_loop_dynamic_start+0x14c>
     3cc:	orr	x3, x19, x2
     3d0:	mov	x0, #0x7fffffff            	// #2147483647
     3d4:	cmp	x3, x0
     3d8:	b.hi	440 <GOMP_loop_dynamic_start+0x144>  // b.pmore
     3dc:	madd	x19, x2, x19, x19
     3e0:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
     3e4:	sub	x19, x0, x19
     3e8:	cmp	x20, x19
     3ec:	cset	w0, lt  // lt = tstop
     3f0:	str	w0, [x1, #4]
     3f4:	adrp	x0, 0 <gomp_tls_data>
     3f8:	ldr	x0, [x0]
     3fc:	mrs	x1, tpidr_el0
     400:	add	x0, x1, x0
     404:	ldr	x0, [x0, #32]
     408:	cbz	x0, 338 <GOMP_loop_dynamic_start+0x3c>
     40c:	add	x0, x0, #0x50
     410:	adrp	x1, 0 <gomp_tls_data>
     414:	ldr	x1, [x1]
     418:	mrs	x2, tpidr_el0
     41c:	add	x1, x2, x1
     420:	ldr	x2, [x1, #24]
     424:	ldxr	x1, [x0]
     428:	stlxr	w3, x2, [x0]
     42c:	cbnz	w3, 424 <GOMP_loop_dynamic_start+0x128>
     430:	cmp	x1, #0x1
     434:	b.eq	338 <GOMP_loop_dynamic_start+0x3c>  // b.none
     438:	bl	0 <gomp_ptrlock_set_slow>
     43c:	b	338 <GOMP_loop_dynamic_start+0x3c>
     440:	str	wzr, [x1, #4]
     444:	b	3f4 <GOMP_loop_dynamic_start+0xf8>
     448:	neg	x0, x19
     44c:	orr	x4, x2, x0
     450:	mov	x3, #0x7fffffff            	// #2147483647
     454:	cmp	x4, x3
     458:	b.hi	47c <GOMP_loop_dynamic_start+0x180>  // b.pmore
     45c:	madd	x0, x2, x0, x0
     460:	mov	x2, #0x2                   	// #2
     464:	movk	x2, #0x8000, lsl #48
     468:	add	x0, x0, x2
     46c:	cmp	x20, x0
     470:	cset	w0, ge  // ge = tcont
     474:	str	w0, [x1, #4]
     478:	b	3f4 <GOMP_loop_dynamic_start+0xf8>
     47c:	str	wzr, [x1, #4]
     480:	b	3f4 <GOMP_loop_dynamic_start+0xf8>
     484:	str	x24, [x1, #16]
     488:	str	x23, [x1, #24]
     48c:	str	x24, [x1, #72]
     490:	mul	x19, x23, x19
     494:	str	x19, [x1, #8]
     498:	adrp	x0, 0 <gomp_tls_data>
     49c:	ldr	x0, [x0]
     4a0:	mrs	x2, tpidr_el0
     4a4:	add	x0, x2, x0
     4a8:	ldr	x0, [x0, #16]
     4ac:	mov	x20, x24
     4b0:	mov	x2, #0x1                   	// #1
     4b4:	cbnz	x0, 3c0 <GOMP_loop_dynamic_start+0xc4>
     4b8:	b	3cc <GOMP_loop_dynamic_start+0xd0>

00000000000004bc <GOMP_loop_guided_start>:
     4bc:	stp	x29, x30, [sp, #-64]!
     4c0:	mov	x29, sp
     4c4:	stp	x19, x20, [sp, #16]
     4c8:	stp	x21, x22, [sp, #32]
     4cc:	stp	x23, x24, [sp, #48]
     4d0:	mov	x20, x0
     4d4:	mov	x19, x1
     4d8:	mov	x21, x2
     4dc:	mov	x24, x3
     4e0:	mov	x22, x4
     4e4:	mov	x23, x5
     4e8:	mov	x0, #0x0                   	// #0
     4ec:	bl	0 <gomp_work_share_start>
     4f0:	and	w0, w0, #0xff
     4f4:	cbz	w0, 588 <GOMP_loop_guided_start+0xcc>
     4f8:	adrp	x0, 0 <gomp_tls_data>
     4fc:	ldr	x0, [x0]
     500:	mrs	x1, tpidr_el0
     504:	add	x0, x1, x0
     508:	ldr	x0, [x0, #24]
     50c:	mov	w1, #0x3                   	// #3
     510:	str	w1, [x0]
     514:	str	x24, [x0, #8]
     518:	cmp	x21, #0x0
     51c:	ccmp	x20, x19, #0x4, gt
     520:	b.gt	534 <GOMP_loop_guided_start+0x78>
     524:	cmp	x21, #0x0
     528:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     52c:	csel	x19, x19, x20, ge  // ge = tcont
     530:	b	538 <GOMP_loop_guided_start+0x7c>
     534:	mov	x19, x20
     538:	str	x19, [x0, #16]
     53c:	str	x21, [x0, #24]
     540:	str	x20, [x0, #72]
     544:	adrp	x0, 0 <gomp_tls_data>
     548:	ldr	x0, [x0]
     54c:	mrs	x1, tpidr_el0
     550:	add	x0, x1, x0
     554:	ldr	x0, [x0, #32]
     558:	cbz	x0, 588 <GOMP_loop_guided_start+0xcc>
     55c:	add	x0, x0, #0x50
     560:	adrp	x1, 0 <gomp_tls_data>
     564:	ldr	x1, [x1]
     568:	mrs	x2, tpidr_el0
     56c:	add	x1, x2, x1
     570:	ldr	x2, [x1, #24]
     574:	ldxr	x1, [x0]
     578:	stlxr	w3, x2, [x0]
     57c:	cbnz	w3, 574 <GOMP_loop_guided_start+0xb8>
     580:	cmp	x1, #0x1
     584:	b.ne	5a8 <GOMP_loop_guided_start+0xec>  // b.any
     588:	mov	x1, x23
     58c:	mov	x0, x22
     590:	bl	0 <gomp_iter_guided_next>
     594:	ldp	x19, x20, [sp, #16]
     598:	ldp	x21, x22, [sp, #32]
     59c:	ldp	x23, x24, [sp, #48]
     5a0:	ldp	x29, x30, [sp], #64
     5a4:	ret
     5a8:	bl	0 <gomp_ptrlock_set_slow>
     5ac:	b	588 <GOMP_loop_guided_start+0xcc>

00000000000005b0 <GOMP_loop_maybe_nonmonotonic_runtime_start>:
     5b0:	stp	x29, x30, [sp, #-16]!
     5b4:	mov	x29, sp
     5b8:	mov	x5, x4
     5bc:	adrp	x4, 0 <gomp_tls_data>
     5c0:	ldr	x4, [x4]
     5c4:	mrs	x6, tpidr_el0
     5c8:	add	x4, x6, x4
     5cc:	ldr	x4, [x4, #80]
     5d0:	add	x7, x4, #0x90
     5d4:	adrp	x6, 0 <gomp_global_icv>
     5d8:	add	x6, x6, #0x0
     5dc:	cmp	x4, #0x0
     5e0:	csel	x6, x6, x7, eq  // eq = none
     5e4:	ldr	w4, [x6, #8]
     5e8:	and	w7, w4, #0x7fffffff
     5ec:	cmp	w7, #0x3
     5f0:	b.eq	654 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xa4>  // b.none
     5f4:	tst	w4, #0x7ffffffc
     5f8:	b.ne	620 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x70>  // b.any
     5fc:	cmp	w7, #0x1
     600:	b.eq	63c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x8c>  // b.none
     604:	cmp	w7, #0x2
     608:	b.ne	668 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xb8>  // b.any
     60c:	mov	x4, x3
     610:	ldrsw	x3, [x6, #12]
     614:	bl	2fc <GOMP_loop_dynamic_start>
     618:	and	w0, w0, #0xff
     61c:	b	64c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x9c>
     620:	cmp	w7, #0x4
     624:	b.ne	668 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xb8>  // b.any
     628:	mov	x4, x3
     62c:	mov	x3, #0x0                   	// #0
     630:	bl	1ec <GOMP_loop_static_start>
     634:	and	w0, w0, #0xff
     638:	b	64c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x9c>
     63c:	mov	x4, x3
     640:	ldrsw	x3, [x6, #12]
     644:	bl	1ec <GOMP_loop_static_start>
     648:	and	w0, w0, #0xff
     64c:	ldp	x29, x30, [sp], #16
     650:	ret
     654:	mov	x4, x3
     658:	ldrsw	x3, [x6, #12]
     65c:	bl	4bc <GOMP_loop_guided_start>
     660:	and	w0, w0, #0xff
     664:	b	64c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x9c>
     668:	bl	0 <abort>

000000000000066c <GOMP_loop_ordered_static_start>:
     66c:	stp	x29, x30, [sp, #-64]!
     670:	mov	x29, sp
     674:	stp	x19, x20, [sp, #16]
     678:	stp	x21, x22, [sp, #32]
     67c:	stp	x23, x24, [sp, #48]
     680:	mov	x20, x0
     684:	mov	x19, x1
     688:	mov	x21, x2
     68c:	mov	x24, x3
     690:	mov	x22, x4
     694:	mov	x23, x5
     698:	adrp	x0, 0 <gomp_tls_data>
     69c:	ldr	x0, [x0]
     6a0:	mrs	x1, tpidr_el0
     6a4:	add	x0, x1, x0
     6a8:	str	xzr, [x0, #72]
     6ac:	mov	x0, #0x1                   	// #1
     6b0:	bl	0 <gomp_work_share_start>
     6b4:	and	w0, w0, #0xff
     6b8:	cbz	w0, 750 <GOMP_loop_ordered_static_start+0xe4>
     6bc:	adrp	x0, 0 <gomp_tls_data>
     6c0:	ldr	x0, [x0]
     6c4:	mrs	x1, tpidr_el0
     6c8:	add	x0, x1, x0
     6cc:	ldr	x0, [x0, #24]
     6d0:	mov	w1, #0x1                   	// #1
     6d4:	str	w1, [x0]
     6d8:	str	x24, [x0, #8]
     6dc:	cmp	x21, #0x0
     6e0:	ccmp	x20, x19, #0x4, gt
     6e4:	b.gt	6f8 <GOMP_loop_ordered_static_start+0x8c>
     6e8:	cmp	x21, #0x0
     6ec:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     6f0:	csel	x19, x19, x20, ge  // ge = tcont
     6f4:	b	6fc <GOMP_loop_ordered_static_start+0x90>
     6f8:	mov	x19, x20
     6fc:	str	x19, [x0, #16]
     700:	str	x21, [x0, #24]
     704:	str	x20, [x0, #72]
     708:	bl	0 <gomp_ordered_static_init>
     70c:	adrp	x0, 0 <gomp_tls_data>
     710:	ldr	x0, [x0]
     714:	mrs	x1, tpidr_el0
     718:	add	x0, x1, x0
     71c:	ldr	x0, [x0, #32]
     720:	cbz	x0, 750 <GOMP_loop_ordered_static_start+0xe4>
     724:	add	x0, x0, #0x50
     728:	adrp	x1, 0 <gomp_tls_data>
     72c:	ldr	x1, [x1]
     730:	mrs	x2, tpidr_el0
     734:	add	x1, x2, x1
     738:	ldr	x2, [x1, #24]
     73c:	ldxr	x1, [x0]
     740:	stlxr	w3, x2, [x0]
     744:	cbnz	w3, 73c <GOMP_loop_ordered_static_start+0xd0>
     748:	cmp	x1, #0x1
     74c:	b.ne	778 <GOMP_loop_ordered_static_start+0x10c>  // b.any
     750:	mov	x1, x23
     754:	mov	x0, x22
     758:	bl	0 <gomp_iter_static_next>
     75c:	cmp	w0, #0x0
     760:	cset	w0, eq  // eq = none
     764:	ldp	x19, x20, [sp, #16]
     768:	ldp	x21, x22, [sp, #32]
     76c:	ldp	x23, x24, [sp, #48]
     770:	ldp	x29, x30, [sp], #64
     774:	ret
     778:	bl	0 <gomp_ptrlock_set_slow>
     77c:	b	750 <GOMP_loop_ordered_static_start+0xe4>

0000000000000780 <GOMP_loop_ordered_dynamic_start>:
     780:	stp	x29, x30, [sp, #-64]!
     784:	mov	x29, sp
     788:	stp	x19, x20, [sp, #16]
     78c:	stp	x21, x22, [sp, #32]
     790:	stp	x23, x24, [sp, #48]
     794:	mov	x24, x0
     798:	mov	x20, x1
     79c:	mov	x23, x2
     7a0:	mov	x19, x3
     7a4:	mov	x21, x4
     7a8:	mov	x22, x5
     7ac:	mov	x0, #0x1                   	// #1
     7b0:	bl	0 <gomp_work_share_start>
     7b4:	and	w3, w0, #0xff
     7b8:	cbnz	w3, 848 <GOMP_loop_ordered_dynamic_start+0xc8>
     7bc:	adrp	x0, 0 <gomp_tls_data>
     7c0:	ldr	x0, [x0]
     7c4:	mrs	x1, tpidr_el0
     7c8:	add	x0, x1, x0
     7cc:	ldr	x0, [x0, #24]
     7d0:	add	x0, x0, #0x40
     7d4:	mov	w2, #0x1                   	// #1
     7d8:	ldaxr	w1, [x0]
     7dc:	cbnz	w1, 7e8 <GOMP_loop_ordered_dynamic_start+0x68>
     7e0:	stxr	w3, w2, [x0]
     7e4:	cbnz	w3, 7d8 <GOMP_loop_ordered_dynamic_start+0x58>
     7e8:	cmp	w1, #0x0
     7ec:	b.ne	9b0 <GOMP_loop_ordered_dynamic_start+0x230>  // b.any
     7f0:	mov	x1, x22
     7f4:	mov	x0, x21
     7f8:	bl	0 <gomp_iter_dynamic_next_locked>
     7fc:	mov	w19, w0
     800:	tst	w0, #0xff
     804:	b.ne	9b8 <GOMP_loop_ordered_dynamic_start+0x238>  // b.any
     808:	adrp	x0, 0 <gomp_tls_data>
     80c:	ldr	x0, [x0]
     810:	mrs	x1, tpidr_el0
     814:	add	x0, x1, x0
     818:	ldr	x0, [x0, #24]
     81c:	add	x0, x0, #0x40
     820:	ldxr	w1, [x0]
     824:	stlxr	w2, wzr, [x0]
     828:	cbnz	w2, 820 <GOMP_loop_ordered_dynamic_start+0xa0>
     82c:	tbnz	w1, #31, 9c0 <GOMP_loop_ordered_dynamic_start+0x240>
     830:	mov	w0, w19
     834:	ldp	x19, x20, [sp, #16]
     838:	ldp	x21, x22, [sp, #32]
     83c:	ldp	x23, x24, [sp, #48]
     840:	ldp	x29, x30, [sp], #64
     844:	ret
     848:	adrp	x0, 0 <gomp_tls_data>
     84c:	ldr	x0, [x0]
     850:	mrs	x1, tpidr_el0
     854:	add	x0, x1, x0
     858:	ldr	x1, [x0, #24]
     85c:	mov	w0, #0x2                   	// #2
     860:	str	w0, [x1]
     864:	str	x19, [x1, #8]
     868:	cmp	x23, #0x0
     86c:	ccmp	x24, x20, #0x4, gt
     870:	b.gt	9c8 <GOMP_loop_ordered_dynamic_start+0x248>
     874:	cmp	x23, #0x0
     878:	ccmp	x24, x20, #0x0, lt  // lt = tstop
     87c:	csel	x20, x20, x24, ge  // ge = tcont
     880:	str	x20, [x1, #16]
     884:	str	x23, [x1, #24]
     888:	str	x24, [x1, #72]
     88c:	mul	x19, x23, x19
     890:	str	x19, [x1, #8]
     894:	adrp	x0, 0 <gomp_tls_data>
     898:	ldr	x0, [x0]
     89c:	mrs	x2, tpidr_el0
     8a0:	add	x0, x2, x0
     8a4:	ldr	x0, [x0, #16]
     8a8:	mov	x2, #0x1                   	// #1
     8ac:	cbz	x0, 8b4 <GOMP_loop_ordered_dynamic_start+0x134>
     8b0:	ldr	w2, [x0]
     8b4:	cmp	x23, #0x0
     8b8:	b.le	96c <GOMP_loop_ordered_dynamic_start+0x1ec>
     8bc:	orr	x3, x2, x19
     8c0:	mov	x0, #0x7fffffff            	// #2147483647
     8c4:	cmp	x3, x0
     8c8:	b.hi	964 <GOMP_loop_ordered_dynamic_start+0x1e4>  // b.pmore
     8cc:	madd	x19, x2, x19, x19
     8d0:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
     8d4:	sub	x19, x0, x19
     8d8:	cmp	x20, x19
     8dc:	cset	w0, lt  // lt = tstop
     8e0:	str	w0, [x1, #4]
     8e4:	adrp	x0, 0 <gomp_tls_data>
     8e8:	ldr	x0, [x0]
     8ec:	mrs	x1, tpidr_el0
     8f0:	add	x0, x1, x0
     8f4:	ldr	x0, [x0, #24]
     8f8:	add	x0, x0, #0x40
     8fc:	mov	w2, #0x1                   	// #1
     900:	ldaxr	w1, [x0]
     904:	cbnz	w1, 910 <GOMP_loop_ordered_dynamic_start+0x190>
     908:	stxr	w3, w2, [x0]
     90c:	cbnz	w3, 900 <GOMP_loop_ordered_dynamic_start+0x180>
     910:	cmp	w1, #0x0
     914:	b.ne	9a8 <GOMP_loop_ordered_dynamic_start+0x228>  // b.any
     918:	adrp	x0, 0 <gomp_tls_data>
     91c:	ldr	x0, [x0]
     920:	mrs	x1, tpidr_el0
     924:	add	x0, x1, x0
     928:	ldr	x0, [x0, #32]
     92c:	cbz	x0, 7f0 <GOMP_loop_ordered_dynamic_start+0x70>
     930:	add	x0, x0, #0x50
     934:	adrp	x1, 0 <gomp_tls_data>
     938:	ldr	x1, [x1]
     93c:	mrs	x2, tpidr_el0
     940:	add	x1, x2, x1
     944:	ldr	x2, [x1, #24]
     948:	ldxr	x1, [x0]
     94c:	stlxr	w3, x2, [x0]
     950:	cbnz	w3, 948 <GOMP_loop_ordered_dynamic_start+0x1c8>
     954:	cmp	x1, #0x1
     958:	b.eq	7f0 <GOMP_loop_ordered_dynamic_start+0x70>  // b.none
     95c:	bl	0 <gomp_ptrlock_set_slow>
     960:	b	7f0 <GOMP_loop_ordered_dynamic_start+0x70>
     964:	str	wzr, [x1, #4]
     968:	b	8e4 <GOMP_loop_ordered_dynamic_start+0x164>
     96c:	neg	x0, x19
     970:	orr	x4, x2, x0
     974:	mov	x3, #0x7fffffff            	// #2147483647
     978:	cmp	x4, x3
     97c:	b.hi	9a0 <GOMP_loop_ordered_dynamic_start+0x220>  // b.pmore
     980:	madd	x0, x2, x0, x0
     984:	mov	x2, #0x2                   	// #2
     988:	movk	x2, #0x8000, lsl #48
     98c:	add	x0, x0, x2
     990:	cmp	x0, x20
     994:	cset	w0, le
     998:	str	w0, [x1, #4]
     99c:	b	8e4 <GOMP_loop_ordered_dynamic_start+0x164>
     9a0:	str	wzr, [x1, #4]
     9a4:	b	8e4 <GOMP_loop_ordered_dynamic_start+0x164>
     9a8:	bl	0 <gomp_mutex_lock_slow>
     9ac:	b	918 <GOMP_loop_ordered_dynamic_start+0x198>
     9b0:	bl	0 <gomp_mutex_lock_slow>
     9b4:	b	7f0 <GOMP_loop_ordered_dynamic_start+0x70>
     9b8:	bl	0 <gomp_ordered_first>
     9bc:	b	808 <GOMP_loop_ordered_dynamic_start+0x88>
     9c0:	bl	0 <gomp_mutex_unlock_slow>
     9c4:	b	830 <GOMP_loop_ordered_dynamic_start+0xb0>
     9c8:	str	x24, [x1, #16]
     9cc:	str	x23, [x1, #24]
     9d0:	str	x24, [x1, #72]
     9d4:	mul	x19, x23, x19
     9d8:	str	x19, [x1, #8]
     9dc:	adrp	x0, 0 <gomp_tls_data>
     9e0:	ldr	x0, [x0]
     9e4:	mrs	x2, tpidr_el0
     9e8:	add	x0, x2, x0
     9ec:	ldr	x0, [x0, #16]
     9f0:	mov	x20, x24
     9f4:	mov	x2, #0x1                   	// #1
     9f8:	cbnz	x0, 8b0 <GOMP_loop_ordered_dynamic_start+0x130>
     9fc:	b	8bc <GOMP_loop_ordered_dynamic_start+0x13c>

0000000000000a00 <GOMP_loop_ordered_guided_start>:
     a00:	stp	x29, x30, [sp, #-64]!
     a04:	mov	x29, sp
     a08:	stp	x19, x20, [sp, #16]
     a0c:	stp	x21, x22, [sp, #32]
     a10:	stp	x23, x24, [sp, #48]
     a14:	mov	x20, x0
     a18:	mov	x19, x1
     a1c:	mov	x21, x2
     a20:	mov	x24, x3
     a24:	mov	x22, x4
     a28:	mov	x23, x5
     a2c:	mov	x0, #0x1                   	// #1
     a30:	bl	0 <gomp_work_share_start>
     a34:	and	w0, w0, #0xff
     a38:	cbz	w0, b68 <GOMP_loop_ordered_guided_start+0x168>
     a3c:	adrp	x0, 0 <gomp_tls_data>
     a40:	ldr	x0, [x0]
     a44:	mrs	x1, tpidr_el0
     a48:	add	x0, x1, x0
     a4c:	ldr	x0, [x0, #24]
     a50:	mov	w1, #0x3                   	// #3
     a54:	str	w1, [x0]
     a58:	str	x24, [x0, #8]
     a5c:	cmp	x21, #0x0
     a60:	ccmp	x20, x19, #0x4, gt
     a64:	b.gt	a78 <GOMP_loop_ordered_guided_start+0x78>
     a68:	cmp	x21, #0x0
     a6c:	ccmp	x20, x19, #0x0, lt  // lt = tstop
     a70:	csel	x19, x19, x20, ge  // ge = tcont
     a74:	b	a7c <GOMP_loop_ordered_guided_start+0x7c>
     a78:	mov	x19, x20
     a7c:	str	x19, [x0, #16]
     a80:	str	x21, [x0, #24]
     a84:	str	x20, [x0, #72]
     a88:	adrp	x0, 0 <gomp_tls_data>
     a8c:	ldr	x0, [x0]
     a90:	mrs	x1, tpidr_el0
     a94:	add	x0, x1, x0
     a98:	ldr	x0, [x0, #24]
     a9c:	add	x0, x0, #0x40
     aa0:	mov	w2, #0x1                   	// #1
     aa4:	ldaxr	w1, [x0]
     aa8:	cbnz	w1, ab4 <GOMP_loop_ordered_guided_start+0xb4>
     aac:	stxr	w3, w2, [x0]
     ab0:	cbnz	w3, aa4 <GOMP_loop_ordered_guided_start+0xa4>
     ab4:	cmp	w1, #0x0
     ab8:	b.ne	b58 <GOMP_loop_ordered_guided_start+0x158>  // b.any
     abc:	adrp	x0, 0 <gomp_tls_data>
     ac0:	ldr	x0, [x0]
     ac4:	mrs	x1, tpidr_el0
     ac8:	add	x0, x1, x0
     acc:	ldr	x0, [x0, #32]
     ad0:	cbz	x0, b00 <GOMP_loop_ordered_guided_start+0x100>
     ad4:	add	x0, x0, #0x50
     ad8:	adrp	x1, 0 <gomp_tls_data>
     adc:	ldr	x1, [x1]
     ae0:	mrs	x2, tpidr_el0
     ae4:	add	x1, x2, x1
     ae8:	ldr	x2, [x1, #24]
     aec:	ldxr	x1, [x0]
     af0:	stlxr	w3, x2, [x0]
     af4:	cbnz	w3, aec <GOMP_loop_ordered_guided_start+0xec>
     af8:	cmp	x1, #0x1
     afc:	b.ne	b60 <GOMP_loop_ordered_guided_start+0x160>  // b.any
     b00:	mov	x1, x23
     b04:	mov	x0, x22
     b08:	bl	0 <gomp_iter_guided_next_locked>
     b0c:	mov	w19, w0
     b10:	tst	w0, #0xff
     b14:	b.ne	ba4 <GOMP_loop_ordered_guided_start+0x1a4>  // b.any
     b18:	adrp	x0, 0 <gomp_tls_data>
     b1c:	ldr	x0, [x0]
     b20:	mrs	x1, tpidr_el0
     b24:	add	x0, x1, x0
     b28:	ldr	x0, [x0, #24]
     b2c:	add	x0, x0, #0x40
     b30:	ldxr	w1, [x0]
     b34:	stlxr	w2, wzr, [x0]
     b38:	cbnz	w2, b30 <GOMP_loop_ordered_guided_start+0x130>
     b3c:	tbnz	w1, #31, bac <GOMP_loop_ordered_guided_start+0x1ac>
     b40:	mov	w0, w19
     b44:	ldp	x19, x20, [sp, #16]
     b48:	ldp	x21, x22, [sp, #32]
     b4c:	ldp	x23, x24, [sp, #48]
     b50:	ldp	x29, x30, [sp], #64
     b54:	ret
     b58:	bl	0 <gomp_mutex_lock_slow>
     b5c:	b	abc <GOMP_loop_ordered_guided_start+0xbc>
     b60:	bl	0 <gomp_ptrlock_set_slow>
     b64:	b	b00 <GOMP_loop_ordered_guided_start+0x100>
     b68:	adrp	x0, 0 <gomp_tls_data>
     b6c:	ldr	x0, [x0]
     b70:	mrs	x1, tpidr_el0
     b74:	add	x0, x1, x0
     b78:	ldr	x0, [x0, #24]
     b7c:	add	x0, x0, #0x40
     b80:	mov	w2, #0x1                   	// #1
     b84:	ldaxr	w1, [x0]
     b88:	cbnz	w1, b94 <GOMP_loop_ordered_guided_start+0x194>
     b8c:	stxr	w3, w2, [x0]
     b90:	cbnz	w3, b84 <GOMP_loop_ordered_guided_start+0x184>
     b94:	cmp	w1, #0x0
     b98:	b.eq	b00 <GOMP_loop_ordered_guided_start+0x100>  // b.none
     b9c:	bl	0 <gomp_mutex_lock_slow>
     ba0:	b	b00 <GOMP_loop_ordered_guided_start+0x100>
     ba4:	bl	0 <gomp_ordered_first>
     ba8:	b	b18 <GOMP_loop_ordered_guided_start+0x118>
     bac:	bl	0 <gomp_mutex_unlock_slow>
     bb0:	b	b40 <GOMP_loop_ordered_guided_start+0x140>

0000000000000bb4 <GOMP_loop_ordered_runtime_start>:
     bb4:	stp	x29, x30, [sp, #-16]!
     bb8:	mov	x29, sp
     bbc:	mov	x5, x4
     bc0:	adrp	x4, 0 <gomp_tls_data>
     bc4:	ldr	x4, [x4]
     bc8:	mrs	x6, tpidr_el0
     bcc:	add	x4, x6, x4
     bd0:	ldr	x4, [x4, #80]
     bd4:	add	x7, x4, #0x90
     bd8:	adrp	x6, 0 <gomp_global_icv>
     bdc:	add	x6, x6, #0x0
     be0:	cmp	x4, #0x0
     be4:	csel	x6, x6, x7, eq  // eq = none
     be8:	ldr	w4, [x6, #8]
     bec:	and	w7, w4, #0x7fffffff
     bf0:	cmp	w7, #0x3
     bf4:	b.eq	c58 <GOMP_loop_ordered_runtime_start+0xa4>  // b.none
     bf8:	tst	w4, #0x7ffffffc
     bfc:	b.ne	c24 <GOMP_loop_ordered_runtime_start+0x70>  // b.any
     c00:	cmp	w7, #0x1
     c04:	b.eq	c40 <GOMP_loop_ordered_runtime_start+0x8c>  // b.none
     c08:	cmp	w7, #0x2
     c0c:	b.ne	c6c <GOMP_loop_ordered_runtime_start+0xb8>  // b.any
     c10:	mov	x4, x3
     c14:	ldrsw	x3, [x6, #12]
     c18:	bl	780 <GOMP_loop_ordered_dynamic_start>
     c1c:	and	w0, w0, #0xff
     c20:	b	c50 <GOMP_loop_ordered_runtime_start+0x9c>
     c24:	cmp	w7, #0x4
     c28:	b.ne	c6c <GOMP_loop_ordered_runtime_start+0xb8>  // b.any
     c2c:	mov	x4, x3
     c30:	mov	x3, #0x0                   	// #0
     c34:	bl	66c <GOMP_loop_ordered_static_start>
     c38:	and	w0, w0, #0xff
     c3c:	b	c50 <GOMP_loop_ordered_runtime_start+0x9c>
     c40:	mov	x4, x3
     c44:	ldrsw	x3, [x6, #12]
     c48:	bl	66c <GOMP_loop_ordered_static_start>
     c4c:	and	w0, w0, #0xff
     c50:	ldp	x29, x30, [sp], #16
     c54:	ret
     c58:	mov	x4, x3
     c5c:	ldrsw	x3, [x6, #12]
     c60:	bl	a00 <GOMP_loop_ordered_guided_start>
     c64:	and	w0, w0, #0xff
     c68:	b	c50 <GOMP_loop_ordered_runtime_start+0x9c>
     c6c:	bl	0 <abort>

0000000000000c70 <GOMP_loop_ordered_start>:
     c70:	stp	x29, x30, [sp, #-96]!
     c74:	mov	x29, sp
     c78:	stp	x19, x20, [sp, #16]
     c7c:	stp	x21, x22, [sp, #32]
     c80:	stp	x23, x24, [sp, #48]
     c84:	stp	x25, x26, [sp, #64]
     c88:	mov	x25, x0
     c8c:	mov	x21, x1
     c90:	mov	x26, x2
     c94:	mov	x19, x3
     c98:	str	x4, [sp, #88]
     c9c:	mov	x23, x5
     ca0:	mov	x24, x6
     ca4:	mov	x20, x7
     ca8:	ldr	x22, [sp, #96]
     cac:	adrp	x0, 0 <gomp_tls_data>
     cb0:	ldr	x0, [x0]
     cb4:	mrs	x1, tpidr_el0
     cb8:	add	x0, x1, x0
     cbc:	str	xzr, [x0, #72]
     cc0:	cbz	x7, cc8 <GOMP_loop_ordered_start+0x58>
     cc4:	bl	0 <gomp_workshare_taskgroup_start>
     cc8:	mov	x0, #0x1                   	// #1
     ccc:	cbz	x22, cd8 <GOMP_loop_ordered_start+0x68>
     cd0:	ldr	x0, [x22]
     cd4:	add	x0, x0, #0x1
     cd8:	bl	0 <gomp_work_share_start>
     cdc:	and	w0, w0, #0xff
     ce0:	cbnz	w0, d50 <GOMP_loop_ordered_start+0xe0>
     ce4:	cbz	x20, d08 <GOMP_loop_ordered_start+0x98>
     ce8:	adrp	x0, 0 <gomp_tls_data>
     cec:	ldr	x0, [x0]
     cf0:	mrs	x1, tpidr_el0
     cf4:	add	x0, x1, x0
     cf8:	ldr	x0, [x0, #24]
     cfc:	ldr	x1, [x0, #88]
     d00:	mov	x0, x20
     d04:	bl	0 <gomp_workshare_task_reduction_register>
     d08:	adrp	x0, 0 <gomp_tls_data>
     d0c:	ldr	x0, [x0]
     d10:	mrs	x1, tpidr_el0
     d14:	add	x0, x1, x0
     d18:	ldr	x0, [x0, #24]
     d1c:	ldr	w19, [x0]
     d20:	cmp	x19, #0x1
     d24:	b.eq	1024 <GOMP_loop_ordered_start+0x3b4>  // b.none
     d28:	add	x0, x0, #0x40
     d2c:	mov	w2, #0x1                   	// #1
     d30:	ldaxr	w1, [x0]
     d34:	cbnz	w1, d40 <GOMP_loop_ordered_start+0xd0>
     d38:	stxr	w3, w2, [x0]
     d3c:	cbnz	w3, d30 <GOMP_loop_ordered_start+0xc0>
     d40:	cmp	w1, #0x0
     d44:	b.eq	e64 <GOMP_loop_ordered_start+0x1f4>  // b.none
     d48:	bl	0 <gomp_mutex_lock_slow>
     d4c:	b	e64 <GOMP_loop_ordered_start+0x1f4>
     d50:	add	x1, sp, #0x58
     d54:	mov	x0, x19
     d58:	bl	0 <gomp_adjust_sched>
     d5c:	mov	x19, x0
     d60:	adrp	x0, 0 <gomp_tls_data>
     d64:	ldr	x0, [x0]
     d68:	mrs	x1, tpidr_el0
     d6c:	add	x0, x1, x0
     d70:	ldr	x0, [x0, #24]
     d74:	mov	w2, w19
     d78:	ldr	x1, [sp, #88]
     d7c:	str	w19, [x0]
     d80:	str	x1, [x0, #8]
     d84:	cmp	x26, #0x0
     d88:	ccmp	x25, x21, #0x4, gt
     d8c:	b.gt	ecc <GOMP_loop_ordered_start+0x25c>
     d90:	cmp	x26, #0x0
     d94:	ccmp	x25, x21, #0x0, lt  // lt = tstop
     d98:	csel	x21, x21, x25, ge  // ge = tcont
     d9c:	str	x21, [x0, #16]
     da0:	str	x26, [x0, #24]
     da4:	str	x25, [x0, #72]
     da8:	cmp	w2, #0x2
     dac:	b.eq	ed4 <GOMP_loop_ordered_start+0x264>  // b.none
     db0:	cbz	x20, de4 <GOMP_loop_ordered_start+0x174>
     db4:	mov	x0, x20
     db8:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     dbc:	adrp	x0, 0 <gomp_tls_data>
     dc0:	ldr	x0, [x0]
     dc4:	mrs	x1, tpidr_el0
     dc8:	add	x0, x1, x0
     dcc:	ldr	x1, [x0, #80]
     dd0:	ldr	x1, [x1, #40]
     dd4:	mov	w2, #0x1                   	// #1
     dd8:	strb	w2, [x1, #50]
     ddc:	ldr	x0, [x0, #24]
     de0:	str	x20, [x0, #88]
     de4:	cmp	x19, #0x1
     de8:	b.eq	f78 <GOMP_loop_ordered_start+0x308>  // b.none
     dec:	adrp	x0, 0 <gomp_tls_data>
     df0:	ldr	x0, [x0]
     df4:	mrs	x1, tpidr_el0
     df8:	add	x0, x1, x0
     dfc:	ldr	x0, [x0, #24]
     e00:	add	x0, x0, #0x40
     e04:	mov	w2, #0x1                   	// #1
     e08:	ldaxr	w1, [x0]
     e0c:	cbnz	w1, e18 <GOMP_loop_ordered_start+0x1a8>
     e10:	stxr	w3, w2, [x0]
     e14:	cbnz	w3, e08 <GOMP_loop_ordered_start+0x198>
     e18:	cmp	w1, #0x0
     e1c:	b.ne	f80 <GOMP_loop_ordered_start+0x310>  // b.any
     e20:	adrp	x0, 0 <gomp_tls_data>
     e24:	ldr	x0, [x0]
     e28:	mrs	x1, tpidr_el0
     e2c:	add	x0, x1, x0
     e30:	ldr	x0, [x0, #32]
     e34:	cbz	x0, e64 <GOMP_loop_ordered_start+0x1f4>
     e38:	add	x0, x0, #0x50
     e3c:	adrp	x1, 0 <gomp_tls_data>
     e40:	ldr	x1, [x1]
     e44:	mrs	x2, tpidr_el0
     e48:	add	x1, x2, x1
     e4c:	ldr	x2, [x1, #24]
     e50:	ldxr	x1, [x0]
     e54:	stlxr	w3, x2, [x0]
     e58:	cbnz	w3, e50 <GOMP_loop_ordered_start+0x1e0>
     e5c:	cmp	x1, #0x1
     e60:	b.ne	f88 <GOMP_loop_ordered_start+0x318>  // b.any
     e64:	cbz	x22, ea4 <GOMP_loop_ordered_start+0x234>
     e68:	adrp	x1, 0 <gomp_tls_data>
     e6c:	ldr	x1, [x1]
     e70:	mrs	x0, tpidr_el0
     e74:	add	x1, x0, x1
     e78:	ldr	x0, [x1, #24]
     e7c:	ldr	x0, [x0, #32]
     e80:	ldr	x2, [x1, #16]
     e84:	mov	x1, #0x4                   	// #4
     e88:	cbz	x2, e94 <GOMP_loop_ordered_start+0x224>
     e8c:	ldr	w1, [x2]
     e90:	lsl	x1, x1, #2
     e94:	add	x0, x0, x1
     e98:	add	x0, x0, #0x7
     e9c:	and	x0, x0, #0xfffffffffffffff8
     ea0:	str	x0, [x22]
     ea4:	cmp	x19, #0x2
     ea8:	b.eq	fbc <GOMP_loop_ordered_start+0x34c>  // b.none
     eac:	b.le	f90 <GOMP_loop_ordered_start+0x320>
     eb0:	cmp	x19, #0x3
     eb4:	b.ne	fb0 <GOMP_loop_ordered_start+0x340>  // b.any
     eb8:	mov	x1, x24
     ebc:	mov	x0, x23
     ec0:	bl	0 <gomp_iter_guided_next_locked>
     ec4:	and	w19, w0, #0xff
     ec8:	b	fcc <GOMP_loop_ordered_start+0x35c>
     ecc:	mov	x21, x25
     ed0:	b	d9c <GOMP_loop_ordered_start+0x12c>
     ed4:	mul	x1, x1, x26
     ed8:	str	x1, [x0, #8]
     edc:	adrp	x2, 0 <gomp_tls_data>
     ee0:	ldr	x2, [x2]
     ee4:	mrs	x3, tpidr_el0
     ee8:	add	x2, x3, x2
     eec:	ldr	x2, [x2, #16]
     ef0:	mov	x3, #0x1                   	// #1
     ef4:	cbz	x2, efc <GOMP_loop_ordered_start+0x28c>
     ef8:	ldr	w3, [x2]
     efc:	cmp	x26, #0x0
     f00:	b.le	f3c <GOMP_loop_ordered_start+0x2cc>
     f04:	orr	x4, x1, x3
     f08:	mov	x2, #0x7fffffff            	// #2147483647
     f0c:	cmp	x4, x2
     f10:	b.hi	f34 <GOMP_loop_ordered_start+0x2c4>  // b.pmore
     f14:	madd	x1, x3, x1, x1
     f18:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     f1c:	sub	x1, x2, x1
     f20:	cmp	x21, x1
     f24:	cset	w1, lt  // lt = tstop
     f28:	str	w1, [x0, #4]
     f2c:	cbnz	x20, db4 <GOMP_loop_ordered_start+0x144>
     f30:	b	dec <GOMP_loop_ordered_start+0x17c>
     f34:	str	wzr, [x0, #4]
     f38:	b	f2c <GOMP_loop_ordered_start+0x2bc>
     f3c:	neg	x2, x1
     f40:	orr	x4, x3, x2
     f44:	mov	x1, #0x7fffffff            	// #2147483647
     f48:	cmp	x4, x1
     f4c:	b.hi	f70 <GOMP_loop_ordered_start+0x300>  // b.pmore
     f50:	madd	x1, x3, x2, x2
     f54:	mov	x2, #0x2                   	// #2
     f58:	movk	x2, #0x8000, lsl #48
     f5c:	add	x1, x1, x2
     f60:	cmp	x21, x1
     f64:	cset	w1, ge  // ge = tcont
     f68:	str	w1, [x0, #4]
     f6c:	b	f2c <GOMP_loop_ordered_start+0x2bc>
     f70:	str	wzr, [x0, #4]
     f74:	b	f2c <GOMP_loop_ordered_start+0x2bc>
     f78:	bl	0 <gomp_ordered_static_init>
     f7c:	b	e20 <GOMP_loop_ordered_start+0x1b0>
     f80:	bl	0 <gomp_mutex_lock_slow>
     f84:	b	e20 <GOMP_loop_ordered_start+0x1b0>
     f88:	bl	0 <gomp_ptrlock_set_slow>
     f8c:	b	e64 <GOMP_loop_ordered_start+0x1f4>
     f90:	cmp	x19, #0x1
     f94:	b.ne	fb8 <GOMP_loop_ordered_start+0x348>  // b.any
     f98:	mov	x1, x24
     f9c:	mov	x0, x23
     fa0:	bl	0 <gomp_iter_static_next>
     fa4:	cmp	w0, #0x0
     fa8:	cset	w19, eq  // eq = none
     fac:	b	ff8 <GOMP_loop_ordered_start+0x388>
     fb0:	cmp	x19, #0x4
     fb4:	b.eq	f98 <GOMP_loop_ordered_start+0x328>  // b.none
     fb8:	bl	0 <abort>
     fbc:	mov	x1, x24
     fc0:	mov	x0, x23
     fc4:	bl	0 <gomp_iter_dynamic_next_locked>
     fc8:	and	w19, w0, #0xff
     fcc:	cbnz	w19, 1014 <GOMP_loop_ordered_start+0x3a4>
     fd0:	adrp	x0, 0 <gomp_tls_data>
     fd4:	ldr	x0, [x0]
     fd8:	mrs	x1, tpidr_el0
     fdc:	add	x0, x1, x0
     fe0:	ldr	x0, [x0, #24]
     fe4:	add	x0, x0, #0x40
     fe8:	ldxr	w1, [x0]
     fec:	stlxr	w2, wzr, [x0]
     ff0:	cbnz	w2, fe8 <GOMP_loop_ordered_start+0x378>
     ff4:	tbnz	w1, #31, 101c <GOMP_loop_ordered_start+0x3ac>
     ff8:	mov	w0, w19
     ffc:	ldp	x19, x20, [sp, #16]
    1000:	ldp	x21, x22, [sp, #32]
    1004:	ldp	x23, x24, [sp, #48]
    1008:	ldp	x25, x26, [sp, #64]
    100c:	ldp	x29, x30, [sp], #96
    1010:	ret
    1014:	bl	0 <gomp_ordered_first>
    1018:	b	fd0 <GOMP_loop_ordered_start+0x360>
    101c:	bl	0 <gomp_mutex_unlock_slow>
    1020:	b	ff8 <GOMP_loop_ordered_start+0x388>
    1024:	cbnz	x22, e68 <GOMP_loop_ordered_start+0x1f8>
    1028:	b	f98 <GOMP_loop_ordered_start+0x328>

000000000000102c <GOMP_loop_doacross_static_start>:
    102c:	stp	x29, x30, [sp, #-64]!
    1030:	mov	x29, sp
    1034:	stp	x19, x20, [sp, #16]
    1038:	stp	x21, x22, [sp, #32]
    103c:	stp	x23, x24, [sp, #48]
    1040:	mov	w23, w0
    1044:	mov	x21, x1
    1048:	mov	x22, x2
    104c:	mov	x19, x3
    1050:	mov	x20, x4
    1054:	adrp	x3, 0 <gomp_tls_data>
    1058:	ldr	x3, [x3]
    105c:	mrs	x4, tpidr_el0
    1060:	add	x3, x4, x3
    1064:	str	xzr, [x3, #72]
    1068:	mov	x0, #0x0                   	// #0
    106c:	bl	0 <gomp_work_share_start>
    1070:	and	w3, w0, #0xff
    1074:	cbnz	w3, 10a0 <GOMP_loop_doacross_static_start+0x74>
    1078:	mov	x1, x20
    107c:	mov	x0, x19
    1080:	bl	0 <gomp_iter_static_next>
    1084:	cmp	w0, #0x0
    1088:	cset	w0, eq  // eq = none
    108c:	ldp	x19, x20, [sp, #16]
    1090:	ldp	x21, x22, [sp, #32]
    1094:	ldp	x23, x24, [sp, #48]
    1098:	ldp	x29, x30, [sp], #64
    109c:	ret
    10a0:	adrp	x24, 0 <gomp_tls_data>
    10a4:	ldr	x24, [x24]
    10a8:	mrs	x0, tpidr_el0
    10ac:	add	x24, x0, x24
    10b0:	ldr	x0, [x24, #24]
    10b4:	ldr	x1, [x21]
    10b8:	mov	w2, #0x1                   	// #1
    10bc:	str	w2, [x0]
    10c0:	str	x22, [x0, #8]
    10c4:	cmp	x1, #0x0
    10c8:	csel	x1, x1, xzr, ge  // ge = tcont
    10cc:	str	x1, [x0, #16]
    10d0:	mov	x1, #0x1                   	// #1
    10d4:	str	x1, [x0, #24]
    10d8:	str	xzr, [x0, #72]
    10dc:	mov	x3, #0x0                   	// #0
    10e0:	mov	x2, x22
    10e4:	mov	x1, x21
    10e8:	mov	w0, w23
    10ec:	bl	0 <gomp_doacross_init>
    10f0:	ldr	x0, [x24, #32]
    10f4:	cbz	x0, 1078 <GOMP_loop_doacross_static_start+0x4c>
    10f8:	add	x0, x0, #0x50
    10fc:	ldr	x2, [x24, #24]
    1100:	ldxr	x1, [x0]
    1104:	stlxr	w3, x2, [x0]
    1108:	cbnz	w3, 1100 <GOMP_loop_doacross_static_start+0xd4>
    110c:	cmp	x1, #0x1
    1110:	b.eq	1078 <GOMP_loop_doacross_static_start+0x4c>  // b.none
    1114:	bl	0 <gomp_ptrlock_set_slow>
    1118:	b	1078 <GOMP_loop_doacross_static_start+0x4c>

000000000000111c <GOMP_loop_doacross_dynamic_start>:
    111c:	stp	x29, x30, [sp, #-64]!
    1120:	mov	x29, sp
    1124:	stp	x19, x20, [sp, #16]
    1128:	stp	x21, x22, [sp, #32]
    112c:	str	x23, [sp, #48]
    1130:	mov	w22, w0
    1134:	mov	x21, x1
    1138:	mov	x19, x2
    113c:	mov	x23, x3
    1140:	mov	x20, x4
    1144:	mov	x0, #0x0                   	// #0
    1148:	bl	0 <gomp_work_share_start>
    114c:	and	w2, w0, #0xff
    1150:	cbnz	w2, 1174 <GOMP_loop_doacross_dynamic_start+0x58>
    1154:	mov	x1, x20
    1158:	mov	x0, x23
    115c:	bl	0 <gomp_iter_dynamic_next>
    1160:	ldp	x19, x20, [sp, #16]
    1164:	ldp	x21, x22, [sp, #32]
    1168:	ldr	x23, [sp, #48]
    116c:	ldp	x29, x30, [sp], #64
    1170:	ret
    1174:	adrp	x1, 0 <gomp_tls_data>
    1178:	ldr	x1, [x1]
    117c:	mrs	x0, tpidr_el0
    1180:	add	x1, x0, x1
    1184:	ldr	x2, [x1, #24]
    1188:	ldr	x0, [x21]
    118c:	mov	w3, #0x2                   	// #2
    1190:	str	w3, [x2]
    1194:	str	x19, [x2, #8]
    1198:	cmp	x0, #0x0
    119c:	csel	x0, x0, xzr, ge  // ge = tcont
    11a0:	str	x0, [x2, #16]
    11a4:	mov	x3, #0x1                   	// #1
    11a8:	str	x3, [x2, #24]
    11ac:	str	xzr, [x2, #72]
    11b0:	ldr	x3, [x1, #16]
    11b4:	mov	x1, #0x1                   	// #1
    11b8:	cbz	x3, 11c0 <GOMP_loop_doacross_dynamic_start+0xa4>
    11bc:	ldr	w1, [x3]
    11c0:	orr	x4, x19, x1
    11c4:	mov	x3, #0x7fffffff            	// #2147483647
    11c8:	cmp	x4, x3
    11cc:	b.hi	1248 <GOMP_loop_doacross_dynamic_start+0x12c>  // b.pmore
    11d0:	madd	x1, x1, x19, x19
    11d4:	mov	x3, #0x7fffffffffffffff    	// #9223372036854775807
    11d8:	sub	x1, x3, x1
    11dc:	cmp	x1, x0
    11e0:	cset	w0, gt
    11e4:	str	w0, [x2, #4]
    11e8:	mov	x3, #0x0                   	// #0
    11ec:	mov	x2, x19
    11f0:	mov	x1, x21
    11f4:	mov	w0, w22
    11f8:	bl	0 <gomp_doacross_init>
    11fc:	adrp	x0, 0 <gomp_tls_data>
    1200:	ldr	x0, [x0]
    1204:	mrs	x1, tpidr_el0
    1208:	add	x0, x1, x0
    120c:	ldr	x0, [x0, #32]
    1210:	cbz	x0, 1154 <GOMP_loop_doacross_dynamic_start+0x38>
    1214:	add	x0, x0, #0x50
    1218:	adrp	x1, 0 <gomp_tls_data>
    121c:	ldr	x1, [x1]
    1220:	mrs	x2, tpidr_el0
    1224:	add	x1, x2, x1
    1228:	ldr	x2, [x1, #24]
    122c:	ldxr	x1, [x0]
    1230:	stlxr	w3, x2, [x0]
    1234:	cbnz	w3, 122c <GOMP_loop_doacross_dynamic_start+0x110>
    1238:	cmp	x1, #0x1
    123c:	b.eq	1154 <GOMP_loop_doacross_dynamic_start+0x38>  // b.none
    1240:	bl	0 <gomp_ptrlock_set_slow>
    1244:	b	1154 <GOMP_loop_doacross_dynamic_start+0x38>
    1248:	mov	w0, #0x0                   	// #0
    124c:	b	11e4 <GOMP_loop_doacross_dynamic_start+0xc8>

0000000000001250 <GOMP_loop_doacross_guided_start>:
    1250:	stp	x29, x30, [sp, #-64]!
    1254:	mov	x29, sp
    1258:	stp	x19, x20, [sp, #16]
    125c:	stp	x21, x22, [sp, #32]
    1260:	stp	x23, x24, [sp, #48]
    1264:	mov	w22, w0
    1268:	mov	x23, x1
    126c:	mov	x21, x2
    1270:	mov	x19, x3
    1274:	mov	x20, x4
    1278:	mov	x0, #0x0                   	// #0
    127c:	bl	0 <gomp_work_share_start>
    1280:	and	w3, w0, #0xff
    1284:	cbnz	w3, 12a8 <GOMP_loop_doacross_guided_start+0x58>
    1288:	mov	x1, x20
    128c:	mov	x0, x19
    1290:	bl	0 <gomp_iter_guided_next>
    1294:	ldp	x19, x20, [sp, #16]
    1298:	ldp	x21, x22, [sp, #32]
    129c:	ldp	x23, x24, [sp, #48]
    12a0:	ldp	x29, x30, [sp], #64
    12a4:	ret
    12a8:	adrp	x24, 0 <gomp_tls_data>
    12ac:	ldr	x24, [x24]
    12b0:	mrs	x0, tpidr_el0
    12b4:	add	x24, x0, x24
    12b8:	ldr	x0, [x24, #24]
    12bc:	ldr	x1, [x23]
    12c0:	mov	w2, #0x3                   	// #3
    12c4:	str	w2, [x0]
    12c8:	str	x21, [x0, #8]
    12cc:	cmp	x1, #0x0
    12d0:	csel	x1, x1, xzr, ge  // ge = tcont
    12d4:	str	x1, [x0, #16]
    12d8:	mov	x1, #0x1                   	// #1
    12dc:	str	x1, [x0, #24]
    12e0:	str	xzr, [x0, #72]
    12e4:	mov	x3, #0x0                   	// #0
    12e8:	mov	x2, x21
    12ec:	mov	x1, x23
    12f0:	mov	w0, w22
    12f4:	bl	0 <gomp_doacross_init>
    12f8:	ldr	x0, [x24, #32]
    12fc:	cbz	x0, 1288 <GOMP_loop_doacross_guided_start+0x38>
    1300:	add	x0, x0, #0x50
    1304:	ldr	x2, [x24, #24]
    1308:	ldxr	x1, [x0]
    130c:	stlxr	w3, x2, [x0]
    1310:	cbnz	w3, 1308 <GOMP_loop_doacross_guided_start+0xb8>
    1314:	cmp	x1, #0x1
    1318:	b.eq	1288 <GOMP_loop_doacross_guided_start+0x38>  // b.none
    131c:	bl	0 <gomp_ptrlock_set_slow>
    1320:	b	1288 <GOMP_loop_doacross_guided_start+0x38>

0000000000001324 <GOMP_loop_doacross_runtime_start>:
    1324:	stp	x29, x30, [sp, #-16]!
    1328:	mov	x29, sp
    132c:	mov	x4, x3
    1330:	adrp	x3, 0 <gomp_tls_data>
    1334:	ldr	x3, [x3]
    1338:	mrs	x5, tpidr_el0
    133c:	add	x3, x5, x3
    1340:	ldr	x3, [x3, #80]
    1344:	add	x6, x3, #0x90
    1348:	adrp	x5, 0 <gomp_global_icv>
    134c:	add	x5, x5, #0x0
    1350:	cmp	x3, #0x0
    1354:	csel	x5, x5, x6, eq  // eq = none
    1358:	ldr	w3, [x5, #8]
    135c:	and	w6, w3, #0x7fffffff
    1360:	cmp	w6, #0x3
    1364:	b.eq	13c8 <GOMP_loop_doacross_runtime_start+0xa4>  // b.none
    1368:	tst	w3, #0x7ffffffc
    136c:	b.ne	1394 <GOMP_loop_doacross_runtime_start+0x70>  // b.any
    1370:	cmp	w6, #0x1
    1374:	b.eq	13b0 <GOMP_loop_doacross_runtime_start+0x8c>  // b.none
    1378:	cmp	w6, #0x2
    137c:	b.ne	13dc <GOMP_loop_doacross_runtime_start+0xb8>  // b.any
    1380:	mov	x3, x2
    1384:	ldrsw	x2, [x5, #12]
    1388:	bl	111c <GOMP_loop_doacross_dynamic_start>
    138c:	and	w0, w0, #0xff
    1390:	b	13c0 <GOMP_loop_doacross_runtime_start+0x9c>
    1394:	cmp	w6, #0x4
    1398:	b.ne	13dc <GOMP_loop_doacross_runtime_start+0xb8>  // b.any
    139c:	mov	x3, x2
    13a0:	mov	x2, #0x0                   	// #0
    13a4:	bl	102c <GOMP_loop_doacross_static_start>
    13a8:	and	w0, w0, #0xff
    13ac:	b	13c0 <GOMP_loop_doacross_runtime_start+0x9c>
    13b0:	mov	x3, x2
    13b4:	ldrsw	x2, [x5, #12]
    13b8:	bl	102c <GOMP_loop_doacross_static_start>
    13bc:	and	w0, w0, #0xff
    13c0:	ldp	x29, x30, [sp], #16
    13c4:	ret
    13c8:	mov	x3, x2
    13cc:	ldrsw	x2, [x5, #12]
    13d0:	bl	1250 <GOMP_loop_doacross_guided_start>
    13d4:	and	w0, w0, #0xff
    13d8:	b	13c0 <GOMP_loop_doacross_runtime_start+0x9c>
    13dc:	bl	0 <abort>

00000000000013e0 <GOMP_loop_static_next>:
    13e0:	stp	x29, x30, [sp, #-16]!
    13e4:	mov	x29, sp
    13e8:	bl	0 <gomp_iter_static_next>
    13ec:	cmp	w0, #0x0
    13f0:	cset	w0, eq  // eq = none
    13f4:	ldp	x29, x30, [sp], #16
    13f8:	ret

00000000000013fc <GOMP_loop_dynamic_next>:
    13fc:	stp	x29, x30, [sp, #-16]!
    1400:	mov	x29, sp
    1404:	bl	0 <gomp_iter_dynamic_next>
    1408:	ldp	x29, x30, [sp], #16
    140c:	ret

0000000000001410 <GOMP_loop_guided_next>:
    1410:	stp	x29, x30, [sp, #-16]!
    1414:	mov	x29, sp
    1418:	bl	0 <gomp_iter_guided_next>
    141c:	ldp	x29, x30, [sp], #16
    1420:	ret

0000000000001424 <GOMP_loop_maybe_nonmonotonic_runtime_next>:
    1424:	stp	x29, x30, [sp, #-16]!
    1428:	mov	x29, sp
    142c:	adrp	x2, 0 <gomp_tls_data>
    1430:	ldr	x2, [x2]
    1434:	mrs	x3, tpidr_el0
    1438:	add	x2, x3, x2
    143c:	ldr	x2, [x2, #24]
    1440:	ldr	w2, [x2]
    1444:	cmp	w2, #0x2
    1448:	b.eq	1488 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x64>  // b.none
    144c:	b.ls	1464 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x40>  // b.plast
    1450:	cmp	w2, #0x3
    1454:	b.ne	147c <GOMP_loop_maybe_nonmonotonic_runtime_next+0x58>  // b.any
    1458:	bl	0 <gomp_iter_guided_next>
    145c:	and	w0, w0, #0xff
    1460:	b	1474 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x50>
    1464:	cmp	w2, #0x1
    1468:	b.ne	1484 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x60>  // b.any
    146c:	bl	13e0 <GOMP_loop_static_next>
    1470:	and	w0, w0, #0xff
    1474:	ldp	x29, x30, [sp], #16
    1478:	ret
    147c:	cmp	w2, #0x4
    1480:	b.eq	146c <GOMP_loop_maybe_nonmonotonic_runtime_next+0x48>  // b.none
    1484:	bl	0 <abort>
    1488:	bl	0 <gomp_iter_dynamic_next>
    148c:	and	w0, w0, #0xff
    1490:	b	1474 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x50>

0000000000001494 <GOMP_loop_start>:
    1494:	stp	x29, x30, [sp, #-96]!
    1498:	mov	x29, sp
    149c:	stp	x19, x20, [sp, #16]
    14a0:	stp	x21, x22, [sp, #32]
    14a4:	stp	x23, x24, [sp, #48]
    14a8:	stp	x25, x26, [sp, #64]
    14ac:	mov	x22, x0
    14b0:	mov	x21, x1
    14b4:	mov	x23, x2
    14b8:	mov	x25, x3
    14bc:	str	x4, [sp, #88]
    14c0:	mov	x20, x5
    14c4:	mov	x24, x6
    14c8:	mov	x19, x7
    14cc:	ldr	x26, [sp, #96]
    14d0:	adrp	x0, 0 <gomp_tls_data>
    14d4:	ldr	x0, [x0]
    14d8:	mrs	x1, tpidr_el0
    14dc:	add	x0, x1, x0
    14e0:	str	xzr, [x0, #72]
    14e4:	cbz	x7, 163c <GOMP_loop_start+0x1a8>
    14e8:	bl	0 <gomp_workshare_taskgroup_start>
    14ec:	mov	x0, #0x0                   	// #0
    14f0:	bl	0 <gomp_work_share_start>
    14f4:	and	w0, w0, #0xff
    14f8:	cbnz	w0, 164c <GOMP_loop_start+0x1b8>
    14fc:	adrp	x0, 0 <gomp_tls_data>
    1500:	ldr	x0, [x0]
    1504:	mrs	x1, tpidr_el0
    1508:	add	x0, x1, x0
    150c:	ldr	x0, [x0, #24]
    1510:	ldr	x1, [x0, #88]
    1514:	mov	x0, x19
    1518:	bl	0 <gomp_workshare_task_reduction_register>
    151c:	cbz	x26, 153c <GOMP_loop_start+0xa8>
    1520:	adrp	x0, 0 <gomp_tls_data>
    1524:	ldr	x0, [x0]
    1528:	mrs	x1, tpidr_el0
    152c:	add	x0, x1, x0
    1530:	ldr	x0, [x0, #24]
    1534:	ldr	x0, [x0, #32]
    1538:	str	x0, [x26]
    153c:	mov	w0, #0x1                   	// #1
    1540:	cbz	x20, 1554 <GOMP_loop_start+0xc0>
    1544:	mov	x1, x24
    1548:	mov	x0, x20
    154c:	bl	1424 <GOMP_loop_maybe_nonmonotonic_runtime_next>
    1550:	and	w0, w0, #0xff
    1554:	ldp	x19, x20, [sp, #16]
    1558:	ldp	x21, x22, [sp, #32]
    155c:	ldp	x23, x24, [sp, #48]
    1560:	ldp	x25, x26, [sp, #64]
    1564:	ldp	x29, x30, [sp], #96
    1568:	ret
    156c:	mov	x21, x22
    1570:	b	1690 <GOMP_loop_start+0x1fc>
    1574:	mul	x2, x2, x23
    1578:	str	x2, [x1, #8]
    157c:	adrp	x0, 0 <gomp_tls_data>
    1580:	ldr	x0, [x0]
    1584:	mrs	x3, tpidr_el0
    1588:	add	x0, x3, x0
    158c:	ldr	x0, [x0, #16]
    1590:	mov	x3, #0x1                   	// #1
    1594:	cbz	x0, 159c <GOMP_loop_start+0x108>
    1598:	ldr	w3, [x0]
    159c:	cmp	x23, #0x0
    15a0:	b.le	15d8 <GOMP_loop_start+0x144>
    15a4:	orr	x4, x2, x3
    15a8:	mov	x0, #0x7fffffff            	// #2147483647
    15ac:	cmp	x4, x0
    15b0:	b.hi	15d0 <GOMP_loop_start+0x13c>  // b.pmore
    15b4:	madd	x2, x3, x2, x2
    15b8:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    15bc:	sub	x2, x0, x2
    15c0:	cmp	x21, x2
    15c4:	cset	w0, lt  // lt = tstop
    15c8:	str	w0, [x1, #4]
    15cc:	b	16a4 <GOMP_loop_start+0x210>
    15d0:	str	wzr, [x1, #4]
    15d4:	b	16a4 <GOMP_loop_start+0x210>
    15d8:	neg	x0, x2
    15dc:	orr	x4, x3, x0
    15e0:	mov	x2, #0x7fffffff            	// #2147483647
    15e4:	cmp	x4, x2
    15e8:	b.hi	160c <GOMP_loop_start+0x178>  // b.pmore
    15ec:	madd	x0, x3, x0, x0
    15f0:	mov	x2, #0x2                   	// #2
    15f4:	movk	x2, #0x8000, lsl #48
    15f8:	add	x0, x0, x2
    15fc:	cmp	x21, x0
    1600:	cset	w0, ge  // ge = tcont
    1604:	str	w0, [x1, #4]
    1608:	b	16a4 <GOMP_loop_start+0x210>
    160c:	str	wzr, [x1, #4]
    1610:	b	16a4 <GOMP_loop_start+0x210>
    1614:	adrp	x0, 0 <gomp_tls_data>
    1618:	ldr	x0, [x0]
    161c:	mrs	x1, tpidr_el0
    1620:	add	x0, x1, x0
    1624:	ldr	x0, [x0, #24]
    1628:	mov	w1, #0x0                   	// #0
    162c:	add	x0, x0, #0x60
    1630:	bl	0 <memset>
    1634:	str	x0, [x26]
    1638:	b	170c <GOMP_loop_start+0x278>
    163c:	mov	x0, #0x0                   	// #0
    1640:	bl	0 <gomp_work_share_start>
    1644:	and	w0, w0, #0xff
    1648:	cbz	w0, 151c <GOMP_loop_start+0x88>
    164c:	add	x1, sp, #0x58
    1650:	mov	x0, x25
    1654:	bl	0 <gomp_adjust_sched>
    1658:	adrp	x1, 0 <gomp_tls_data>
    165c:	ldr	x1, [x1]
    1660:	mrs	x2, tpidr_el0
    1664:	add	x1, x2, x1
    1668:	ldr	x1, [x1, #24]
    166c:	ldr	x2, [sp, #88]
    1670:	str	w0, [x1]
    1674:	str	x2, [x1, #8]
    1678:	cmp	x23, #0x0
    167c:	ccmp	x22, x21, #0x4, gt
    1680:	b.gt	156c <GOMP_loop_start+0xd8>
    1684:	cmp	x23, #0x0
    1688:	ccmp	x22, x21, #0x0, lt  // lt = tstop
    168c:	csel	x21, x21, x22, ge  // ge = tcont
    1690:	str	x21, [x1, #16]
    1694:	str	x23, [x1, #24]
    1698:	str	x22, [x1, #72]
    169c:	cmp	w0, #0x2
    16a0:	b.eq	1574 <GOMP_loop_start+0xe0>  // b.none
    16a4:	cbz	x19, 16d8 <GOMP_loop_start+0x244>
    16a8:	mov	x0, x19
    16ac:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    16b0:	adrp	x0, 0 <gomp_tls_data>
    16b4:	ldr	x0, [x0]
    16b8:	mrs	x1, tpidr_el0
    16bc:	add	x0, x1, x0
    16c0:	ldr	x1, [x0, #80]
    16c4:	ldr	x1, [x1, #40]
    16c8:	mov	w2, #0x1                   	// #1
    16cc:	strb	w2, [x1, #50]
    16d0:	ldr	x0, [x0, #24]
    16d4:	str	x19, [x0, #88]
    16d8:	cbz	x26, 170c <GOMP_loop_start+0x278>
    16dc:	ldr	x2, [x26]
    16e0:	cmp	x2, #0x20
    16e4:	b.ls	1614 <GOMP_loop_start+0x180>  // b.plast
    16e8:	adrp	x0, 0 <gomp_tls_data>
    16ec:	ldr	x0, [x0]
    16f0:	mrs	x1, tpidr_el0
    16f4:	add	x0, x1, x0
    16f8:	ldr	x19, [x0, #24]
    16fc:	mov	x0, x2
    1700:	bl	0 <gomp_malloc_cleared>
    1704:	str	x0, [x19, #32]
    1708:	str	x0, [x26]
    170c:	adrp	x0, 0 <gomp_tls_data>
    1710:	ldr	x0, [x0]
    1714:	mrs	x1, tpidr_el0
    1718:	add	x0, x1, x0
    171c:	ldr	x0, [x0, #32]
    1720:	cbz	x0, 153c <GOMP_loop_start+0xa8>
    1724:	add	x0, x0, #0x50
    1728:	adrp	x1, 0 <gomp_tls_data>
    172c:	ldr	x1, [x1]
    1730:	mrs	x2, tpidr_el0
    1734:	add	x1, x2, x1
    1738:	ldr	x2, [x1, #24]
    173c:	ldxr	x1, [x0]
    1740:	stlxr	w3, x2, [x0]
    1744:	cbnz	w3, 173c <GOMP_loop_start+0x2a8>
    1748:	cmp	x1, #0x1
    174c:	b.eq	153c <GOMP_loop_start+0xa8>  // b.none
    1750:	bl	0 <gomp_ptrlock_set_slow>
    1754:	b	153c <GOMP_loop_start+0xa8>

0000000000001758 <GOMP_loop_doacross_start>:
    1758:	stp	x29, x30, [sp, #-96]!
    175c:	mov	x29, sp
    1760:	stp	x19, x20, [sp, #16]
    1764:	stp	x21, x22, [sp, #32]
    1768:	stp	x23, x24, [sp, #48]
    176c:	stp	x25, x26, [sp, #64]
    1770:	mov	w24, w0
    1774:	mov	x23, x1
    1778:	mov	x25, x2
    177c:	str	x3, [sp, #88]
    1780:	mov	x21, x4
    1784:	mov	x22, x5
    1788:	mov	x20, x6
    178c:	mov	x19, x7
    1790:	adrp	x1, 0 <gomp_tls_data>
    1794:	ldr	x1, [x1]
    1798:	mrs	x3, tpidr_el0
    179c:	add	x1, x3, x1
    17a0:	str	xzr, [x1, #72]
    17a4:	cbz	x6, 196c <GOMP_loop_doacross_start+0x214>
    17a8:	bl	0 <gomp_workshare_taskgroup_start>
    17ac:	mov	x0, #0x0                   	// #0
    17b0:	bl	0 <gomp_work_share_start>
    17b4:	and	w0, w0, #0xff
    17b8:	cbz	w0, 1948 <GOMP_loop_doacross_start+0x1f0>
    17bc:	mov	x26, #0x0                   	// #0
    17c0:	cbz	x19, 17c8 <GOMP_loop_doacross_start+0x70>
    17c4:	ldr	x26, [x19]
    17c8:	add	x1, sp, #0x58
    17cc:	mov	x0, x25
    17d0:	bl	0 <gomp_adjust_sched>
    17d4:	adrp	x1, 0 <gomp_tls_data>
    17d8:	ldr	x1, [x1]
    17dc:	mrs	x2, tpidr_el0
    17e0:	add	x1, x2, x1
    17e4:	ldr	x1, [x1, #24]
    17e8:	ldr	x2, [x23]
    17ec:	ldr	x3, [sp, #88]
    17f0:	str	w0, [x1]
    17f4:	str	x3, [x1, #8]
    17f8:	cmp	x2, #0x0
    17fc:	csel	x2, x2, xzr, ge  // ge = tcont
    1800:	str	x2, [x1, #16]
    1804:	mov	x4, #0x1                   	// #1
    1808:	str	x4, [x1, #24]
    180c:	str	xzr, [x1, #72]
    1810:	cmp	w0, #0x2
    1814:	b.eq	18ec <GOMP_loop_doacross_start+0x194>  // b.none
    1818:	mov	x3, x26
    181c:	ldr	x2, [sp, #88]
    1820:	mov	x1, x23
    1824:	mov	w0, w24
    1828:	bl	0 <gomp_doacross_init>
    182c:	cbz	x20, 1860 <GOMP_loop_doacross_start+0x108>
    1830:	mov	x0, x20
    1834:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1838:	adrp	x0, 0 <gomp_tls_data>
    183c:	ldr	x0, [x0]
    1840:	mrs	x1, tpidr_el0
    1844:	add	x0, x1, x0
    1848:	ldr	x1, [x0, #80]
    184c:	ldr	x1, [x1, #40]
    1850:	mov	w2, #0x1                   	// #1
    1854:	strb	w2, [x1, #50]
    1858:	ldr	x0, [x0, #24]
    185c:	str	x20, [x0, #88]
    1860:	adrp	x0, 0 <gomp_tls_data>
    1864:	ldr	x0, [x0]
    1868:	mrs	x1, tpidr_el0
    186c:	add	x0, x1, x0
    1870:	ldr	x0, [x0, #32]
    1874:	cbz	x0, 18a4 <GOMP_loop_doacross_start+0x14c>
    1878:	add	x0, x0, #0x50
    187c:	adrp	x1, 0 <gomp_tls_data>
    1880:	ldr	x1, [x1]
    1884:	mrs	x2, tpidr_el0
    1888:	add	x1, x2, x1
    188c:	ldr	x2, [x1, #24]
    1890:	ldxr	x1, [x0]
    1894:	stlxr	w3, x2, [x0]
    1898:	cbnz	w3, 1890 <GOMP_loop_doacross_start+0x138>
    189c:	cmp	x1, #0x1
    18a0:	b.ne	1940 <GOMP_loop_doacross_start+0x1e8>  // b.any
    18a4:	cbz	x19, 18c8 <GOMP_loop_doacross_start+0x170>
    18a8:	adrp	x0, 0 <gomp_tls_data>
    18ac:	ldr	x0, [x0]
    18b0:	mrs	x1, tpidr_el0
    18b4:	add	x0, x1, x0
    18b8:	ldr	x0, [x0, #24]
    18bc:	ldr	x0, [x0, #32]
    18c0:	ldr	x0, [x0, #48]
    18c4:	str	x0, [x19]
    18c8:	mov	x1, x22
    18cc:	mov	x0, x21
    18d0:	bl	1424 <GOMP_loop_maybe_nonmonotonic_runtime_next>
    18d4:	ldp	x19, x20, [sp, #16]
    18d8:	ldp	x21, x22, [sp, #32]
    18dc:	ldp	x23, x24, [sp, #48]
    18e0:	ldp	x25, x26, [sp, #64]
    18e4:	ldp	x29, x30, [sp], #96
    18e8:	ret
    18ec:	adrp	x0, 0 <gomp_tls_data>
    18f0:	ldr	x0, [x0]
    18f4:	mrs	x4, tpidr_el0
    18f8:	add	x0, x4, x0
    18fc:	ldr	x4, [x0, #16]
    1900:	mov	x0, #0x1                   	// #1
    1904:	cbz	x4, 190c <GOMP_loop_doacross_start+0x1b4>
    1908:	ldr	w0, [x4]
    190c:	orr	x5, x3, x0
    1910:	mov	x4, #0x7fffffff            	// #2147483647
    1914:	cmp	x5, x4
    1918:	b.hi	1938 <GOMP_loop_doacross_start+0x1e0>  // b.pmore
    191c:	madd	x3, x0, x3, x3
    1920:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    1924:	sub	x3, x0, x3
    1928:	cmp	x2, x3
    192c:	cset	w0, lt  // lt = tstop
    1930:	str	w0, [x1, #4]
    1934:	b	1818 <GOMP_loop_doacross_start+0xc0>
    1938:	str	wzr, [x1, #4]
    193c:	b	1818 <GOMP_loop_doacross_start+0xc0>
    1940:	bl	0 <gomp_ptrlock_set_slow>
    1944:	b	18a4 <GOMP_loop_doacross_start+0x14c>
    1948:	adrp	x0, 0 <gomp_tls_data>
    194c:	ldr	x0, [x0]
    1950:	mrs	x1, tpidr_el0
    1954:	add	x0, x1, x0
    1958:	ldr	x0, [x0, #24]
    195c:	ldr	x1, [x0, #88]
    1960:	mov	x0, x20
    1964:	bl	0 <gomp_workshare_task_reduction_register>
    1968:	b	18a4 <GOMP_loop_doacross_start+0x14c>
    196c:	mov	x0, #0x0                   	// #0
    1970:	bl	0 <gomp_work_share_start>
    1974:	and	w0, w0, #0xff
    1978:	cbnz	w0, 17bc <GOMP_loop_doacross_start+0x64>
    197c:	b	18a4 <GOMP_loop_doacross_start+0x14c>

0000000000001980 <GOMP_loop_ordered_static_next>:
    1980:	stp	x29, x30, [sp, #-32]!
    1984:	mov	x29, sp
    1988:	stp	x19, x20, [sp, #16]
    198c:	mov	x19, x0
    1990:	mov	x20, x1
    1994:	bl	0 <gomp_ordered_sync>
    1998:	adrp	x0, 0 <gomp_tls_data>
    199c:	ldr	x0, [x0]
    19a0:	mrs	x1, tpidr_el0
    19a4:	add	x0, x1, x0
    19a8:	ldr	x2, [x0, #24]
    19ac:	add	x2, x2, #0x40
    19b0:	mov	w0, #0x1                   	// #1
    19b4:	ldaxr	w1, [x2]
    19b8:	cbnz	w1, 19c4 <GOMP_loop_ordered_static_next+0x44>
    19bc:	stxr	w3, w0, [x2]
    19c0:	cbnz	w3, 19b4 <GOMP_loop_ordered_static_next+0x34>
    19c4:	cmp	w1, #0x0
    19c8:	b.ne	1a1c <GOMP_loop_ordered_static_next+0x9c>  // b.any
    19cc:	mov	x1, x20
    19d0:	mov	x0, x19
    19d4:	bl	0 <gomp_iter_static_next>
    19d8:	mov	w19, w0
    19dc:	tbz	w0, #31, 1a28 <GOMP_loop_ordered_static_next+0xa8>
    19e0:	adrp	x0, 0 <gomp_tls_data>
    19e4:	ldr	x0, [x0]
    19e8:	mrs	x1, tpidr_el0
    19ec:	add	x0, x1, x0
    19f0:	ldr	x1, [x0, #24]
    19f4:	add	x1, x1, #0x40
    19f8:	ldxr	w0, [x1]
    19fc:	stlxr	w2, wzr, [x1]
    1a00:	cbnz	w2, 19f8 <GOMP_loop_ordered_static_next+0x78>
    1a04:	tbnz	w0, #31, 1a30 <GOMP_loop_ordered_static_next+0xb0>
    1a08:	cmp	w19, #0x0
    1a0c:	cset	w0, eq  // eq = none
    1a10:	ldp	x19, x20, [sp, #16]
    1a14:	ldp	x29, x30, [sp], #32
    1a18:	ret
    1a1c:	mov	x0, x2
    1a20:	bl	0 <gomp_mutex_lock_slow>
    1a24:	b	19cc <GOMP_loop_ordered_static_next+0x4c>
    1a28:	bl	0 <gomp_ordered_static_next>
    1a2c:	b	19e0 <GOMP_loop_ordered_static_next+0x60>
    1a30:	mov	x0, x1
    1a34:	bl	0 <gomp_mutex_unlock_slow>
    1a38:	b	1a08 <GOMP_loop_ordered_static_next+0x88>

0000000000001a3c <GOMP_loop_ordered_dynamic_next>:
    1a3c:	stp	x29, x30, [sp, #-32]!
    1a40:	mov	x29, sp
    1a44:	stp	x19, x20, [sp, #16]
    1a48:	mov	x19, x0
    1a4c:	mov	x20, x1
    1a50:	bl	0 <gomp_ordered_sync>
    1a54:	adrp	x0, 0 <gomp_tls_data>
    1a58:	ldr	x0, [x0]
    1a5c:	mrs	x1, tpidr_el0
    1a60:	add	x0, x1, x0
    1a64:	ldr	x2, [x0, #24]
    1a68:	add	x2, x2, #0x40
    1a6c:	mov	w0, #0x1                   	// #1
    1a70:	ldaxr	w1, [x2]
    1a74:	cbnz	w1, 1a80 <GOMP_loop_ordered_dynamic_next+0x44>
    1a78:	stxr	w3, w0, [x2]
    1a7c:	cbnz	w3, 1a70 <GOMP_loop_ordered_dynamic_next+0x34>
    1a80:	cmp	w1, #0x0
    1a84:	b.ne	1adc <GOMP_loop_ordered_dynamic_next+0xa0>  // b.any
    1a88:	mov	x1, x20
    1a8c:	mov	x0, x19
    1a90:	bl	0 <gomp_iter_dynamic_next_locked>
    1a94:	mov	w19, w0
    1a98:	tst	w0, #0xff
    1a9c:	b.eq	1ae8 <GOMP_loop_ordered_dynamic_next+0xac>  // b.none
    1aa0:	bl	0 <gomp_ordered_next>
    1aa4:	adrp	x0, 0 <gomp_tls_data>
    1aa8:	ldr	x0, [x0]
    1aac:	mrs	x1, tpidr_el0
    1ab0:	add	x0, x1, x0
    1ab4:	ldr	x0, [x0, #24]
    1ab8:	add	x0, x0, #0x40
    1abc:	ldxr	w1, [x0]
    1ac0:	stlxr	w2, wzr, [x0]
    1ac4:	cbnz	w2, 1abc <GOMP_loop_ordered_dynamic_next+0x80>
    1ac8:	tbnz	w1, #31, 1af0 <GOMP_loop_ordered_dynamic_next+0xb4>
    1acc:	mov	w0, w19
    1ad0:	ldp	x19, x20, [sp, #16]
    1ad4:	ldp	x29, x30, [sp], #32
    1ad8:	ret
    1adc:	mov	x0, x2
    1ae0:	bl	0 <gomp_mutex_lock_slow>
    1ae4:	b	1a88 <GOMP_loop_ordered_dynamic_next+0x4c>
    1ae8:	bl	0 <gomp_ordered_last>
    1aec:	b	1aa4 <GOMP_loop_ordered_dynamic_next+0x68>
    1af0:	bl	0 <gomp_mutex_unlock_slow>
    1af4:	b	1acc <GOMP_loop_ordered_dynamic_next+0x90>

0000000000001af8 <GOMP_loop_ordered_guided_next>:
    1af8:	stp	x29, x30, [sp, #-32]!
    1afc:	mov	x29, sp
    1b00:	stp	x19, x20, [sp, #16]
    1b04:	mov	x19, x0
    1b08:	mov	x20, x1
    1b0c:	bl	0 <gomp_ordered_sync>
    1b10:	adrp	x0, 0 <gomp_tls_data>
    1b14:	ldr	x0, [x0]
    1b18:	mrs	x1, tpidr_el0
    1b1c:	add	x0, x1, x0
    1b20:	ldr	x2, [x0, #24]
    1b24:	add	x2, x2, #0x40
    1b28:	mov	w0, #0x1                   	// #1
    1b2c:	ldaxr	w1, [x2]
    1b30:	cbnz	w1, 1b3c <GOMP_loop_ordered_guided_next+0x44>
    1b34:	stxr	w3, w0, [x2]
    1b38:	cbnz	w3, 1b2c <GOMP_loop_ordered_guided_next+0x34>
    1b3c:	cmp	w1, #0x0
    1b40:	b.ne	1b98 <GOMP_loop_ordered_guided_next+0xa0>  // b.any
    1b44:	mov	x1, x20
    1b48:	mov	x0, x19
    1b4c:	bl	0 <gomp_iter_guided_next_locked>
    1b50:	mov	w19, w0
    1b54:	tst	w0, #0xff
    1b58:	b.eq	1ba4 <GOMP_loop_ordered_guided_next+0xac>  // b.none
    1b5c:	bl	0 <gomp_ordered_next>
    1b60:	adrp	x0, 0 <gomp_tls_data>
    1b64:	ldr	x0, [x0]
    1b68:	mrs	x1, tpidr_el0
    1b6c:	add	x0, x1, x0
    1b70:	ldr	x0, [x0, #24]
    1b74:	add	x0, x0, #0x40
    1b78:	ldxr	w1, [x0]
    1b7c:	stlxr	w2, wzr, [x0]
    1b80:	cbnz	w2, 1b78 <GOMP_loop_ordered_guided_next+0x80>
    1b84:	tbnz	w1, #31, 1bac <GOMP_loop_ordered_guided_next+0xb4>
    1b88:	mov	w0, w19
    1b8c:	ldp	x19, x20, [sp, #16]
    1b90:	ldp	x29, x30, [sp], #32
    1b94:	ret
    1b98:	mov	x0, x2
    1b9c:	bl	0 <gomp_mutex_lock_slow>
    1ba0:	b	1b44 <GOMP_loop_ordered_guided_next+0x4c>
    1ba4:	bl	0 <gomp_ordered_last>
    1ba8:	b	1b60 <GOMP_loop_ordered_guided_next+0x68>
    1bac:	bl	0 <gomp_mutex_unlock_slow>
    1bb0:	b	1b88 <GOMP_loop_ordered_guided_next+0x90>

0000000000001bb4 <GOMP_loop_ordered_runtime_next>:
    1bb4:	stp	x29, x30, [sp, #-16]!
    1bb8:	mov	x29, sp
    1bbc:	adrp	x2, 0 <gomp_tls_data>
    1bc0:	ldr	x2, [x2]
    1bc4:	mrs	x3, tpidr_el0
    1bc8:	add	x2, x3, x2
    1bcc:	ldr	x2, [x2, #24]
    1bd0:	ldr	w2, [x2]
    1bd4:	cmp	w2, #0x2
    1bd8:	b.eq	1c18 <GOMP_loop_ordered_runtime_next+0x64>  // b.none
    1bdc:	b.ls	1bf4 <GOMP_loop_ordered_runtime_next+0x40>  // b.plast
    1be0:	cmp	w2, #0x3
    1be4:	b.ne	1c0c <GOMP_loop_ordered_runtime_next+0x58>  // b.any
    1be8:	bl	1af8 <GOMP_loop_ordered_guided_next>
    1bec:	and	w0, w0, #0xff
    1bf0:	b	1c04 <GOMP_loop_ordered_runtime_next+0x50>
    1bf4:	cmp	w2, #0x1
    1bf8:	b.ne	1c14 <GOMP_loop_ordered_runtime_next+0x60>  // b.any
    1bfc:	bl	1980 <GOMP_loop_ordered_static_next>
    1c00:	and	w0, w0, #0xff
    1c04:	ldp	x29, x30, [sp], #16
    1c08:	ret
    1c0c:	cmp	w2, #0x4
    1c10:	b.eq	1bfc <GOMP_loop_ordered_runtime_next+0x48>  // b.none
    1c14:	bl	0 <abort>
    1c18:	bl	1a3c <GOMP_loop_ordered_dynamic_next>
    1c1c:	and	w0, w0, #0xff
    1c20:	b	1c04 <GOMP_loop_ordered_runtime_next+0x50>

0000000000001c24 <GOMP_parallel_loop_static_start>:
    1c24:	sub	sp, sp, #0x20
    1c28:	stp	x29, x30, [sp, #16]
    1c2c:	add	x29, sp, #0x10
    1c30:	str	wzr, [sp]
    1c34:	mov	x7, x6
    1c38:	mov	w6, #0x1                   	// #1
    1c3c:	bl	94 <gomp_parallel_loop_start>
    1c40:	ldp	x29, x30, [sp, #16]
    1c44:	add	sp, sp, #0x20
    1c48:	ret

0000000000001c4c <GOMP_parallel_loop_dynamic_start>:
    1c4c:	sub	sp, sp, #0x20
    1c50:	stp	x29, x30, [sp, #16]
    1c54:	add	x29, sp, #0x10
    1c58:	str	wzr, [sp]
    1c5c:	mov	x7, x6
    1c60:	mov	w6, #0x2                   	// #2
    1c64:	bl	94 <gomp_parallel_loop_start>
    1c68:	ldp	x29, x30, [sp, #16]
    1c6c:	add	sp, sp, #0x20
    1c70:	ret

0000000000001c74 <GOMP_parallel_loop_guided_start>:
    1c74:	sub	sp, sp, #0x20
    1c78:	stp	x29, x30, [sp, #16]
    1c7c:	add	x29, sp, #0x10
    1c80:	str	wzr, [sp]
    1c84:	mov	x7, x6
    1c88:	mov	w6, #0x3                   	// #3
    1c8c:	bl	94 <gomp_parallel_loop_start>
    1c90:	ldp	x29, x30, [sp, #16]
    1c94:	add	sp, sp, #0x20
    1c98:	ret

0000000000001c9c <GOMP_parallel_loop_runtime_start>:
    1c9c:	sub	sp, sp, #0x20
    1ca0:	stp	x29, x30, [sp, #16]
    1ca4:	add	x29, sp, #0x10
    1ca8:	adrp	x6, 0 <gomp_tls_data>
    1cac:	ldr	x6, [x6]
    1cb0:	mrs	x7, tpidr_el0
    1cb4:	add	x6, x7, x6
    1cb8:	ldr	x7, [x6, #80]
    1cbc:	add	x8, x7, #0x90
    1cc0:	adrp	x6, 0 <gomp_global_icv>
    1cc4:	add	x6, x6, #0x0
    1cc8:	cmp	x7, #0x0
    1ccc:	csel	x6, x6, x8, eq  // eq = none
    1cd0:	ldrsw	x7, [x6, #12]
    1cd4:	ldr	w6, [x6, #8]
    1cd8:	str	wzr, [sp]
    1cdc:	and	w6, w6, #0x7fffffff
    1ce0:	bl	94 <gomp_parallel_loop_start>
    1ce4:	ldp	x29, x30, [sp, #16]
    1ce8:	add	sp, sp, #0x20
    1cec:	ret

0000000000001cf0 <GOMP_parallel_loop_static>:
    1cf0:	sub	sp, sp, #0x30
    1cf4:	stp	x29, x30, [sp, #16]
    1cf8:	add	x29, sp, #0x10
    1cfc:	stp	x19, x20, [sp, #32]
    1d00:	mov	x19, x0
    1d04:	mov	x20, x1
    1d08:	str	w7, [sp]
    1d0c:	mov	x7, x6
    1d10:	mov	w6, #0x1                   	// #1
    1d14:	bl	94 <gomp_parallel_loop_start>
    1d18:	mov	x0, x20
    1d1c:	blr	x19
    1d20:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1d24:	ldp	x19, x20, [sp, #32]
    1d28:	ldp	x29, x30, [sp, #16]
    1d2c:	add	sp, sp, #0x30
    1d30:	ret

0000000000001d34 <GOMP_parallel_loop_dynamic>:
    1d34:	sub	sp, sp, #0x30
    1d38:	stp	x29, x30, [sp, #16]
    1d3c:	add	x29, sp, #0x10
    1d40:	stp	x19, x20, [sp, #32]
    1d44:	mov	x19, x0
    1d48:	mov	x20, x1
    1d4c:	str	w7, [sp]
    1d50:	mov	x7, x6
    1d54:	mov	w6, #0x2                   	// #2
    1d58:	bl	94 <gomp_parallel_loop_start>
    1d5c:	mov	x0, x20
    1d60:	blr	x19
    1d64:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1d68:	ldp	x19, x20, [sp, #32]
    1d6c:	ldp	x29, x30, [sp, #16]
    1d70:	add	sp, sp, #0x30
    1d74:	ret

0000000000001d78 <GOMP_parallel_loop_guided>:
    1d78:	sub	sp, sp, #0x30
    1d7c:	stp	x29, x30, [sp, #16]
    1d80:	add	x29, sp, #0x10
    1d84:	stp	x19, x20, [sp, #32]
    1d88:	mov	x19, x0
    1d8c:	mov	x20, x1
    1d90:	str	w7, [sp]
    1d94:	mov	x7, x6
    1d98:	mov	w6, #0x3                   	// #3
    1d9c:	bl	94 <gomp_parallel_loop_start>
    1da0:	mov	x0, x20
    1da4:	blr	x19
    1da8:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1dac:	ldp	x19, x20, [sp, #32]
    1db0:	ldp	x29, x30, [sp, #16]
    1db4:	add	sp, sp, #0x30
    1db8:	ret

0000000000001dbc <GOMP_parallel_loop_maybe_nonmonotonic_runtime>:
    1dbc:	sub	sp, sp, #0x30
    1dc0:	stp	x29, x30, [sp, #16]
    1dc4:	add	x29, sp, #0x10
    1dc8:	stp	x19, x20, [sp, #32]
    1dcc:	mov	x19, x0
    1dd0:	mov	x20, x1
    1dd4:	adrp	x0, 0 <gomp_tls_data>
    1dd8:	ldr	x0, [x0]
    1ddc:	mrs	x1, tpidr_el0
    1de0:	add	x0, x1, x0
    1de4:	ldr	x0, [x0, #80]
    1de8:	add	x1, x0, #0x90
    1dec:	adrp	x8, 0 <gomp_global_icv>
    1df0:	add	x8, x8, #0x0
    1df4:	cmp	x0, #0x0
    1df8:	csel	x8, x8, x1, eq  // eq = none
    1dfc:	ldrsw	x7, [x8, #12]
    1e00:	ldr	w0, [x8, #8]
    1e04:	str	w6, [sp]
    1e08:	and	w6, w0, #0x7fffffff
    1e0c:	mov	x1, x20
    1e10:	mov	x0, x19
    1e14:	bl	94 <gomp_parallel_loop_start>
    1e18:	mov	x0, x20
    1e1c:	blr	x19
    1e20:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1e24:	ldp	x19, x20, [sp, #32]
    1e28:	ldp	x29, x30, [sp, #16]
    1e2c:	add	sp, sp, #0x30
    1e30:	ret

0000000000001e34 <GOMP_loop_end>:
    1e34:	stp	x29, x30, [sp, #-16]!
    1e38:	mov	x29, sp
    1e3c:	bl	0 <gomp_work_share_end>
    1e40:	ldp	x29, x30, [sp], #16
    1e44:	ret

0000000000001e48 <GOMP_loop_end_cancel>:
    1e48:	stp	x29, x30, [sp, #-16]!
    1e4c:	mov	x29, sp
    1e50:	bl	0 <gomp_work_share_end_cancel>
    1e54:	ldp	x29, x30, [sp], #16
    1e58:	ret

0000000000001e5c <GOMP_loop_end_nowait>:
    1e5c:	stp	x29, x30, [sp, #-16]!
    1e60:	mov	x29, sp
    1e64:	bl	0 <gomp_work_share_end_nowait>
    1e68:	ldp	x29, x30, [sp], #16
    1e6c:	ret

loop_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_adjust_sched>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	x2, x0
       c:	and	x0, x0, #0x7fffffff
      10:	tst	x2, #0x7ffffffc
      14:	b.ne	20 <gomp_adjust_sched+0x20>  // b.any
      18:	cbz	x0, 28 <gomp_adjust_sched+0x28>
      1c:	b	70 <gomp_adjust_sched+0x70>
      20:	cmp	x0, #0x4
      24:	b.ne	90 <gomp_adjust_sched+0x90>  // b.any
      28:	adrp	x0, 0 <gomp_tls_data>
      2c:	ldr	x0, [x0]
      30:	mrs	x2, tpidr_el0
      34:	add	x0, x2, x0
      38:	ldr	x0, [x0, #80]
      3c:	add	x3, x0, #0x90
      40:	adrp	x2, 0 <gomp_global_icv>
      44:	add	x2, x2, #0x0
      48:	cmp	x0, #0x0
      4c:	csel	x2, x2, x3, eq  // eq = none
      50:	ldr	w3, [x2, #8]
      54:	and	w0, w3, #0x7fffffff
      58:	tst	w3, #0x7ffffffc
      5c:	b.ne	78 <gomp_adjust_sched+0x78>  // b.any
      60:	cbz	w0, 8c <gomp_adjust_sched+0x8c>
      64:	mov	w0, w0
      68:	ldrsw	x2, [x2, #12]
      6c:	str	x2, [x1]
      70:	ldp	x29, x30, [sp], #16
      74:	ret
      78:	cmp	w0, #0x4
      7c:	b.ne	8c <gomp_adjust_sched+0x8c>  // b.any
      80:	str	xzr, [x1]
      84:	mov	x0, #0x1                   	// #1
      88:	b	70 <gomp_adjust_sched+0x70>
      8c:	bl	0 <abort>
      90:	bl	0 <abort>

0000000000000094 <GOMP_loop_ull_static_start>:
      94:	stp	x29, x30, [sp, #-80]!
      98:	mov	x29, sp
      9c:	stp	x19, x20, [sp, #16]
      a0:	stp	x21, x22, [sp, #32]
      a4:	stp	x23, x24, [sp, #48]
      a8:	str	x25, [sp, #64]
      ac:	and	w25, w0, #0xff
      b0:	mov	x19, x1
      b4:	mov	x22, x2
      b8:	mov	x23, x3
      bc:	mov	x24, x4
      c0:	mov	x20, x5
      c4:	mov	x21, x6
      c8:	adrp	x0, 0 <gomp_tls_data>
      cc:	ldr	x0, [x0]
      d0:	mrs	x1, tpidr_el0
      d4:	add	x0, x1, x0
      d8:	str	xzr, [x0, #72]
      dc:	mov	x0, #0x0                   	// #0
      e0:	bl	0 <gomp_work_share_start>
      e4:	and	w0, w0, #0xff
      e8:	cbz	w0, 1b8 <GOMP_loop_ull_static_start+0x124>
      ec:	adrp	x0, 0 <gomp_tls_data>
      f0:	ldr	x0, [x0]
      f4:	mrs	x1, tpidr_el0
      f8:	add	x0, x1, x0
      fc:	ldr	x0, [x0, #24]
     100:	mov	w1, #0x1                   	// #1
     104:	str	w1, [x0]
     108:	str	x24, [x0, #8]
     10c:	cmp	w25, #0x0
     110:	ccmp	x19, x22, #0x0, ne  // ne = any
     114:	b.hi	164 <GOMP_loop_ull_static_start+0xd0>  // b.pmore
     118:	eor	w1, w25, w1
     11c:	cmp	x19, x22
     120:	cset	w2, cc  // cc = lo, ul, last
     124:	tst	w2, w1
     128:	b.ne	154 <GOMP_loop_ull_static_start+0xc0>  // b.any
     12c:	str	x22, [x0, #16]
     130:	str	x23, [x0, #24]
     134:	str	x19, [x0, #72]
     138:	str	wzr, [x0, #4]
     13c:	cbnz	w25, 174 <GOMP_loop_ull_static_start+0xe0>
     140:	mov	w1, #0x2                   	// #2
     144:	str	w1, [x0, #4]
     148:	b	174 <GOMP_loop_ull_static_start+0xe0>
     14c:	bl	0 <gomp_ptrlock_set_slow>
     150:	b	1b8 <GOMP_loop_ull_static_start+0x124>
     154:	str	x19, [x0, #16]
     158:	str	x23, [x0, #24]
     15c:	str	x19, [x0, #72]
     160:	b	140 <GOMP_loop_ull_static_start+0xac>
     164:	str	x19, [x0, #16]
     168:	str	x23, [x0, #24]
     16c:	str	x19, [x0, #72]
     170:	str	wzr, [x0, #4]
     174:	adrp	x0, 0 <gomp_tls_data>
     178:	ldr	x0, [x0]
     17c:	mrs	x1, tpidr_el0
     180:	add	x0, x1, x0
     184:	ldr	x0, [x0, #32]
     188:	cbz	x0, 1b8 <GOMP_loop_ull_static_start+0x124>
     18c:	add	x0, x0, #0x50
     190:	adrp	x1, 0 <gomp_tls_data>
     194:	ldr	x1, [x1]
     198:	mrs	x2, tpidr_el0
     19c:	add	x1, x2, x1
     1a0:	ldr	x2, [x1, #24]
     1a4:	ldxr	x1, [x0]
     1a8:	stlxr	w3, x2, [x0]
     1ac:	cbnz	w3, 1a4 <GOMP_loop_ull_static_start+0x110>
     1b0:	cmp	x1, #0x1
     1b4:	b.ne	14c <GOMP_loop_ull_static_start+0xb8>  // b.any
     1b8:	mov	x1, x21
     1bc:	mov	x0, x20
     1c0:	bl	0 <gomp_iter_ull_static_next>
     1c4:	cmp	w0, #0x0
     1c8:	cset	w0, eq  // eq = none
     1cc:	ldp	x19, x20, [sp, #16]
     1d0:	ldp	x21, x22, [sp, #32]
     1d4:	ldp	x23, x24, [sp, #48]
     1d8:	ldr	x25, [sp, #64]
     1dc:	ldp	x29, x30, [sp], #80
     1e0:	ret

00000000000001e4 <GOMP_loop_ull_dynamic_start>:
     1e4:	stp	x29, x30, [sp, #-80]!
     1e8:	mov	x29, sp
     1ec:	stp	x19, x20, [sp, #16]
     1f0:	stp	x21, x22, [sp, #32]
     1f4:	stp	x23, x24, [sp, #48]
     1f8:	str	x25, [sp, #64]
     1fc:	and	w25, w0, #0xff
     200:	mov	x20, x1
     204:	mov	x24, x2
     208:	mov	x19, x3
     20c:	mov	x23, x4
     210:	mov	x21, x5
     214:	mov	x22, x6
     218:	mov	x0, #0x0                   	// #0
     21c:	bl	0 <gomp_work_share_start>
     220:	and	w0, w0, #0xff
     224:	cbnz	w0, 24c <GOMP_loop_ull_dynamic_start+0x68>
     228:	mov	x1, x22
     22c:	mov	x0, x21
     230:	bl	0 <gomp_iter_ull_dynamic_next>
     234:	ldp	x19, x20, [sp, #16]
     238:	ldp	x21, x22, [sp, #32]
     23c:	ldp	x23, x24, [sp, #48]
     240:	ldr	x25, [sp, #64]
     244:	ldp	x29, x30, [sp], #80
     248:	ret
     24c:	adrp	x0, 0 <gomp_tls_data>
     250:	ldr	x0, [x0]
     254:	mrs	x1, tpidr_el0
     258:	add	x0, x1, x0
     25c:	ldr	x1, [x0, #24]
     260:	mov	w0, #0x2                   	// #2
     264:	str	w0, [x1]
     268:	str	x23, [x1, #8]
     26c:	cmp	w25, #0x0
     270:	ccmp	x20, x24, #0x0, ne  // ne = any
     274:	b.hi	2d0 <GOMP_loop_ull_dynamic_start+0xec>  // b.pmore
     278:	eor	w0, w25, #0x1
     27c:	cmp	x20, x24
     280:	cset	w2, cc  // cc = lo, ul, last
     284:	tst	w2, w0
     288:	b.ne	37c <GOMP_loop_ull_dynamic_start+0x198>  // b.any
     28c:	str	x24, [x1, #16]
     290:	str	x19, [x1, #24]
     294:	str	x20, [x1, #72]
     298:	str	wzr, [x1, #4]
     29c:	mul	x19, x19, x23
     2a0:	str	x19, [x1, #8]
     2a4:	adrp	x0, 0 <gomp_tls_data>
     2a8:	ldr	x0, [x0]
     2ac:	mrs	x2, tpidr_el0
     2b0:	add	x0, x2, x0
     2b4:	ldr	x0, [x0, #16]
     2b8:	cbz	x0, 2c4 <GOMP_loop_ull_dynamic_start+0xe0>
     2bc:	mov	x20, x24
     2c0:	b	304 <GOMP_loop_ull_dynamic_start+0x120>
     2c4:	mov	x20, x24
     2c8:	mov	x2, #0x1                   	// #1
     2cc:	b	308 <GOMP_loop_ull_dynamic_start+0x124>
     2d0:	str	x20, [x1, #16]
     2d4:	str	x19, [x1, #24]
     2d8:	str	x20, [x1, #72]
     2dc:	str	wzr, [x1, #4]
     2e0:	mul	x19, x19, x23
     2e4:	str	x19, [x1, #8]
     2e8:	adrp	x0, 0 <gomp_tls_data>
     2ec:	ldr	x0, [x0]
     2f0:	mrs	x2, tpidr_el0
     2f4:	add	x0, x2, x0
     2f8:	ldr	x0, [x0, #16]
     2fc:	mov	x2, #0x1                   	// #1
     300:	cbz	x0, 30c <GOMP_loop_ull_dynamic_start+0x128>
     304:	ldr	w2, [x0]
     308:	cbz	w25, 3b0 <GOMP_loop_ull_dynamic_start+0x1cc>
     30c:	orr	x3, x2, x19
     310:	mov	x0, #0x7fffffff            	// #2147483647
     314:	cmp	x3, x0
     318:	b.hi	330 <GOMP_loop_ull_dynamic_start+0x14c>  // b.pmore
     31c:	madd	x19, x2, x19, x19
     320:	mvn	x19, x19
     324:	cmp	x19, x20
     328:	cset	w0, hi  // hi = pmore
     32c:	str	w0, [x1, #4]
     330:	adrp	x0, 0 <gomp_tls_data>
     334:	ldr	x0, [x0]
     338:	mrs	x1, tpidr_el0
     33c:	add	x0, x1, x0
     340:	ldr	x0, [x0, #32]
     344:	cbz	x0, 228 <GOMP_loop_ull_dynamic_start+0x44>
     348:	add	x0, x0, #0x50
     34c:	adrp	x1, 0 <gomp_tls_data>
     350:	ldr	x1, [x1]
     354:	mrs	x2, tpidr_el0
     358:	add	x1, x2, x1
     35c:	ldr	x2, [x1, #24]
     360:	ldxr	x1, [x0]
     364:	stlxr	w3, x2, [x0]
     368:	cbnz	w3, 360 <GOMP_loop_ull_dynamic_start+0x17c>
     36c:	cmp	x1, #0x1
     370:	b.eq	228 <GOMP_loop_ull_dynamic_start+0x44>  // b.none
     374:	bl	0 <gomp_ptrlock_set_slow>
     378:	b	228 <GOMP_loop_ull_dynamic_start+0x44>
     37c:	str	x20, [x1, #16]
     380:	str	x19, [x1, #24]
     384:	str	x20, [x1, #72]
     388:	str	wzr, [x1, #4]
     38c:	mul	x19, x19, x23
     390:	str	x19, [x1, #8]
     394:	adrp	x0, 0 <gomp_tls_data>
     398:	ldr	x0, [x0]
     39c:	mrs	x2, tpidr_el0
     3a0:	add	x0, x2, x0
     3a4:	ldr	x0, [x0, #16]
     3a8:	mov	x2, #0x1                   	// #1
     3ac:	cbnz	x0, 304 <GOMP_loop_ull_dynamic_start+0x120>
     3b0:	neg	x0, x19
     3b4:	orr	x4, x2, x0
     3b8:	mov	x3, #0x7fffffff            	// #2147483647
     3bc:	cmp	x4, x3
     3c0:	b.hi	3d8 <GOMP_loop_ull_dynamic_start+0x1f4>  // b.pmore
     3c4:	madd	x0, x2, x0, x0
     3c8:	add	x0, x0, #0x1
     3cc:	cmp	x0, x20
     3d0:	cset	w0, cc  // cc = lo, ul, last
     3d4:	str	w0, [x1, #4]
     3d8:	ldr	w0, [x1, #4]
     3dc:	orr	w0, w0, #0x2
     3e0:	str	w0, [x1, #4]
     3e4:	b	330 <GOMP_loop_ull_dynamic_start+0x14c>

00000000000003e8 <GOMP_loop_ull_guided_start>:
     3e8:	stp	x29, x30, [sp, #-80]!
     3ec:	mov	x29, sp
     3f0:	stp	x19, x20, [sp, #16]
     3f4:	stp	x21, x22, [sp, #32]
     3f8:	stp	x23, x24, [sp, #48]
     3fc:	str	x25, [sp, #64]
     400:	and	w25, w0, #0xff
     404:	mov	x19, x1
     408:	mov	x22, x2
     40c:	mov	x23, x3
     410:	mov	x24, x4
     414:	mov	x20, x5
     418:	mov	x21, x6
     41c:	mov	x0, #0x0                   	// #0
     420:	bl	0 <gomp_work_share_start>
     424:	and	w0, w0, #0xff
     428:	cbz	w0, 4f8 <GOMP_loop_ull_guided_start+0x110>
     42c:	adrp	x0, 0 <gomp_tls_data>
     430:	ldr	x0, [x0]
     434:	mrs	x1, tpidr_el0
     438:	add	x0, x1, x0
     43c:	ldr	x0, [x0, #24]
     440:	mov	w1, #0x3                   	// #3
     444:	str	w1, [x0]
     448:	str	x24, [x0, #8]
     44c:	cmp	w25, #0x0
     450:	ccmp	x19, x22, #0x0, ne  // ne = any
     454:	b.hi	4a4 <GOMP_loop_ull_guided_start+0xbc>  // b.pmore
     458:	eor	w1, w25, #0x1
     45c:	cmp	x19, x22
     460:	cset	w2, cc  // cc = lo, ul, last
     464:	tst	w2, w1
     468:	b.ne	494 <GOMP_loop_ull_guided_start+0xac>  // b.any
     46c:	str	x22, [x0, #16]
     470:	str	x23, [x0, #24]
     474:	str	x19, [x0, #72]
     478:	str	wzr, [x0, #4]
     47c:	cbnz	w25, 4b4 <GOMP_loop_ull_guided_start+0xcc>
     480:	mov	w1, #0x2                   	// #2
     484:	str	w1, [x0, #4]
     488:	b	4b4 <GOMP_loop_ull_guided_start+0xcc>
     48c:	bl	0 <gomp_ptrlock_set_slow>
     490:	b	4f8 <GOMP_loop_ull_guided_start+0x110>
     494:	str	x19, [x0, #16]
     498:	str	x23, [x0, #24]
     49c:	str	x19, [x0, #72]
     4a0:	b	480 <GOMP_loop_ull_guided_start+0x98>
     4a4:	str	x19, [x0, #16]
     4a8:	str	x23, [x0, #24]
     4ac:	str	x19, [x0, #72]
     4b0:	str	wzr, [x0, #4]
     4b4:	adrp	x0, 0 <gomp_tls_data>
     4b8:	ldr	x0, [x0]
     4bc:	mrs	x1, tpidr_el0
     4c0:	add	x0, x1, x0
     4c4:	ldr	x0, [x0, #32]
     4c8:	cbz	x0, 4f8 <GOMP_loop_ull_guided_start+0x110>
     4cc:	add	x0, x0, #0x50
     4d0:	adrp	x1, 0 <gomp_tls_data>
     4d4:	ldr	x1, [x1]
     4d8:	mrs	x2, tpidr_el0
     4dc:	add	x1, x2, x1
     4e0:	ldr	x2, [x1, #24]
     4e4:	ldxr	x1, [x0]
     4e8:	stlxr	w3, x2, [x0]
     4ec:	cbnz	w3, 4e4 <GOMP_loop_ull_guided_start+0xfc>
     4f0:	cmp	x1, #0x1
     4f4:	b.ne	48c <GOMP_loop_ull_guided_start+0xa4>  // b.any
     4f8:	mov	x1, x21
     4fc:	mov	x0, x20
     500:	bl	0 <gomp_iter_ull_guided_next>
     504:	ldp	x19, x20, [sp, #16]
     508:	ldp	x21, x22, [sp, #32]
     50c:	ldp	x23, x24, [sp, #48]
     510:	ldr	x25, [sp, #64]
     514:	ldp	x29, x30, [sp], #80
     518:	ret

000000000000051c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start>:
     51c:	stp	x29, x30, [sp, #-16]!
     520:	mov	x29, sp
     524:	and	w0, w0, #0xff
     528:	mov	x6, x5
     52c:	adrp	x5, 0 <gomp_tls_data>
     530:	ldr	x5, [x5]
     534:	mrs	x7, tpidr_el0
     538:	add	x5, x7, x5
     53c:	ldr	x5, [x5, #80]
     540:	add	x8, x5, #0x90
     544:	adrp	x7, 0 <gomp_global_icv>
     548:	add	x7, x7, #0x0
     54c:	cmp	x5, #0x0
     550:	csel	x7, x7, x8, eq  // eq = none
     554:	ldr	w5, [x7, #8]
     558:	and	w8, w5, #0x7fffffff
     55c:	cmp	w8, #0x3
     560:	b.eq	5c4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xa8>  // b.none
     564:	tst	w5, #0x7ffffffc
     568:	b.ne	590 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x74>  // b.any
     56c:	cmp	w8, #0x1
     570:	b.eq	5ac <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x90>  // b.none
     574:	cmp	w8, #0x2
     578:	b.ne	5d8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xbc>  // b.any
     57c:	mov	x5, x4
     580:	ldrsw	x4, [x7, #12]
     584:	bl	1e4 <GOMP_loop_ull_dynamic_start>
     588:	and	w0, w0, #0xff
     58c:	b	5bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xa0>
     590:	cmp	w8, #0x4
     594:	b.ne	5d8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xbc>  // b.any
     598:	mov	x5, x4
     59c:	mov	x4, #0x0                   	// #0
     5a0:	bl	94 <GOMP_loop_ull_static_start>
     5a4:	and	w0, w0, #0xff
     5a8:	b	5bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xa0>
     5ac:	mov	x5, x4
     5b0:	ldrsw	x4, [x7, #12]
     5b4:	bl	94 <GOMP_loop_ull_static_start>
     5b8:	and	w0, w0, #0xff
     5bc:	ldp	x29, x30, [sp], #16
     5c0:	ret
     5c4:	mov	x5, x4
     5c8:	ldrsw	x4, [x7, #12]
     5cc:	bl	3e8 <GOMP_loop_ull_guided_start>
     5d0:	and	w0, w0, #0xff
     5d4:	b	5bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xa0>
     5d8:	bl	0 <abort>

00000000000005dc <GOMP_loop_ull_ordered_static_start>:
     5dc:	stp	x29, x30, [sp, #-80]!
     5e0:	mov	x29, sp
     5e4:	stp	x19, x20, [sp, #16]
     5e8:	stp	x21, x22, [sp, #32]
     5ec:	stp	x23, x24, [sp, #48]
     5f0:	str	x25, [sp, #64]
     5f4:	and	w25, w0, #0xff
     5f8:	mov	x19, x1
     5fc:	mov	x22, x2
     600:	mov	x23, x3
     604:	mov	x24, x4
     608:	mov	x20, x5
     60c:	mov	x21, x6
     610:	adrp	x0, 0 <gomp_tls_data>
     614:	ldr	x0, [x0]
     618:	mrs	x1, tpidr_el0
     61c:	add	x0, x1, x0
     620:	str	xzr, [x0, #72]
     624:	mov	x0, #0x1                   	// #1
     628:	bl	0 <gomp_work_share_start>
     62c:	and	w0, w0, #0xff
     630:	cbz	w0, 704 <GOMP_loop_ull_ordered_static_start+0x128>
     634:	adrp	x0, 0 <gomp_tls_data>
     638:	ldr	x0, [x0]
     63c:	mrs	x1, tpidr_el0
     640:	add	x0, x1, x0
     644:	ldr	x0, [x0, #24]
     648:	mov	w1, #0x1                   	// #1
     64c:	str	w1, [x0]
     650:	str	x24, [x0, #8]
     654:	cmp	w25, #0x0
     658:	ccmp	x19, x22, #0x0, ne  // ne = any
     65c:	b.hi	6ac <GOMP_loop_ull_ordered_static_start+0xd0>  // b.pmore
     660:	eor	w1, w25, w1
     664:	cmp	x19, x22
     668:	cset	w2, cc  // cc = lo, ul, last
     66c:	tst	w2, w1
     670:	b.ne	69c <GOMP_loop_ull_ordered_static_start+0xc0>  // b.any
     674:	str	x22, [x0, #16]
     678:	str	x23, [x0, #24]
     67c:	str	x19, [x0, #72]
     680:	str	wzr, [x0, #4]
     684:	cbnz	w25, 6bc <GOMP_loop_ull_ordered_static_start+0xe0>
     688:	mov	w1, #0x2                   	// #2
     68c:	str	w1, [x0, #4]
     690:	b	6bc <GOMP_loop_ull_ordered_static_start+0xe0>
     694:	bl	0 <gomp_ptrlock_set_slow>
     698:	b	704 <GOMP_loop_ull_ordered_static_start+0x128>
     69c:	str	x19, [x0, #16]
     6a0:	str	x23, [x0, #24]
     6a4:	str	x19, [x0, #72]
     6a8:	b	688 <GOMP_loop_ull_ordered_static_start+0xac>
     6ac:	str	x19, [x0, #16]
     6b0:	str	x23, [x0, #24]
     6b4:	str	x19, [x0, #72]
     6b8:	str	wzr, [x0, #4]
     6bc:	bl	0 <gomp_ordered_static_init>
     6c0:	adrp	x0, 0 <gomp_tls_data>
     6c4:	ldr	x0, [x0]
     6c8:	mrs	x1, tpidr_el0
     6cc:	add	x0, x1, x0
     6d0:	ldr	x0, [x0, #32]
     6d4:	cbz	x0, 704 <GOMP_loop_ull_ordered_static_start+0x128>
     6d8:	add	x0, x0, #0x50
     6dc:	adrp	x1, 0 <gomp_tls_data>
     6e0:	ldr	x1, [x1]
     6e4:	mrs	x2, tpidr_el0
     6e8:	add	x1, x2, x1
     6ec:	ldr	x2, [x1, #24]
     6f0:	ldxr	x1, [x0]
     6f4:	stlxr	w3, x2, [x0]
     6f8:	cbnz	w3, 6f0 <GOMP_loop_ull_ordered_static_start+0x114>
     6fc:	cmp	x1, #0x1
     700:	b.ne	694 <GOMP_loop_ull_ordered_static_start+0xb8>  // b.any
     704:	mov	x1, x21
     708:	mov	x0, x20
     70c:	bl	0 <gomp_iter_ull_static_next>
     710:	cmp	w0, #0x0
     714:	cset	w0, eq  // eq = none
     718:	ldp	x19, x20, [sp, #16]
     71c:	ldp	x21, x22, [sp, #32]
     720:	ldp	x23, x24, [sp, #48]
     724:	ldr	x25, [sp, #64]
     728:	ldp	x29, x30, [sp], #80
     72c:	ret

0000000000000730 <GOMP_loop_ull_ordered_dynamic_start>:
     730:	stp	x29, x30, [sp, #-80]!
     734:	mov	x29, sp
     738:	stp	x19, x20, [sp, #16]
     73c:	stp	x21, x22, [sp, #32]
     740:	stp	x23, x24, [sp, #48]
     744:	str	x25, [sp, #64]
     748:	and	w25, w0, #0xff
     74c:	mov	x20, x1
     750:	mov	x24, x2
     754:	mov	x19, x3
     758:	mov	x23, x4
     75c:	mov	x21, x5
     760:	mov	x22, x6
     764:	mov	x0, #0x1                   	// #1
     768:	bl	0 <gomp_work_share_start>
     76c:	and	w0, w0, #0xff
     770:	cbnz	w0, 804 <GOMP_loop_ull_ordered_dynamic_start+0xd4>
     774:	adrp	x0, 0 <gomp_tls_data>
     778:	ldr	x0, [x0]
     77c:	mrs	x1, tpidr_el0
     780:	add	x0, x1, x0
     784:	ldr	x0, [x0, #24]
     788:	add	x0, x0, #0x40
     78c:	mov	w2, #0x1                   	// #1
     790:	ldaxr	w1, [x0]
     794:	cbnz	w1, 7a0 <GOMP_loop_ull_ordered_dynamic_start+0x70>
     798:	stxr	w3, w2, [x0]
     79c:	cbnz	w3, 790 <GOMP_loop_ull_ordered_dynamic_start+0x60>
     7a0:	cmp	w1, #0x0
     7a4:	b.ne	890 <GOMP_loop_ull_ordered_dynamic_start+0x160>  // b.any
     7a8:	mov	x1, x22
     7ac:	mov	x0, x21
     7b0:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     7b4:	mov	w19, w0
     7b8:	tst	w0, #0xff
     7bc:	b.ne	898 <GOMP_loop_ull_ordered_dynamic_start+0x168>  // b.any
     7c0:	adrp	x0, 0 <gomp_tls_data>
     7c4:	ldr	x0, [x0]
     7c8:	mrs	x1, tpidr_el0
     7cc:	add	x0, x1, x0
     7d0:	ldr	x0, [x0, #24]
     7d4:	add	x0, x0, #0x40
     7d8:	ldxr	w1, [x0]
     7dc:	stlxr	w2, wzr, [x0]
     7e0:	cbnz	w2, 7d8 <GOMP_loop_ull_ordered_dynamic_start+0xa8>
     7e4:	tbnz	w1, #31, 8a0 <GOMP_loop_ull_ordered_dynamic_start+0x170>
     7e8:	mov	w0, w19
     7ec:	ldp	x19, x20, [sp, #16]
     7f0:	ldp	x21, x22, [sp, #32]
     7f4:	ldp	x23, x24, [sp, #48]
     7f8:	ldr	x25, [sp, #64]
     7fc:	ldp	x29, x30, [sp], #80
     800:	ret
     804:	adrp	x0, 0 <gomp_tls_data>
     808:	ldr	x0, [x0]
     80c:	mrs	x1, tpidr_el0
     810:	add	x0, x1, x0
     814:	ldr	x1, [x0, #24]
     818:	mov	w0, #0x2                   	// #2
     81c:	str	w0, [x1]
     820:	str	x23, [x1, #8]
     824:	cmp	w25, #0x0
     828:	ccmp	x20, x24, #0x0, ne  // ne = any
     82c:	b.hi	8a8 <GOMP_loop_ull_ordered_dynamic_start+0x178>  // b.pmore
     830:	eor	w0, w25, #0x1
     834:	cmp	x20, x24
     838:	cset	w2, cc  // cc = lo, ul, last
     83c:	tst	w2, w0
     840:	b.ne	988 <GOMP_loop_ull_ordered_dynamic_start+0x258>  // b.any
     844:	str	x24, [x1, #16]
     848:	str	x19, [x1, #24]
     84c:	str	x20, [x1, #72]
     850:	str	wzr, [x1, #4]
     854:	mul	x19, x19, x23
     858:	str	x19, [x1, #8]
     85c:	adrp	x0, 0 <gomp_tls_data>
     860:	ldr	x0, [x0]
     864:	mrs	x2, tpidr_el0
     868:	add	x0, x2, x0
     86c:	ldr	x0, [x0, #16]
     870:	cbz	x0, 87c <GOMP_loop_ull_ordered_dynamic_start+0x14c>
     874:	mov	x20, x24
     878:	b	8dc <GOMP_loop_ull_ordered_dynamic_start+0x1ac>
     87c:	mov	x20, x24
     880:	mov	x2, #0x1                   	// #1
     884:	b	8e0 <GOMP_loop_ull_ordered_dynamic_start+0x1b0>
     888:	bl	0 <gomp_mutex_lock_slow>
     88c:	b	93c <GOMP_loop_ull_ordered_dynamic_start+0x20c>
     890:	bl	0 <gomp_mutex_lock_slow>
     894:	b	7a8 <GOMP_loop_ull_ordered_dynamic_start+0x78>
     898:	bl	0 <gomp_ordered_first>
     89c:	b	7c0 <GOMP_loop_ull_ordered_dynamic_start+0x90>
     8a0:	bl	0 <gomp_mutex_unlock_slow>
     8a4:	b	7e8 <GOMP_loop_ull_ordered_dynamic_start+0xb8>
     8a8:	str	x20, [x1, #16]
     8ac:	str	x19, [x1, #24]
     8b0:	str	x20, [x1, #72]
     8b4:	str	wzr, [x1, #4]
     8b8:	mul	x19, x19, x23
     8bc:	str	x19, [x1, #8]
     8c0:	adrp	x0, 0 <gomp_tls_data>
     8c4:	ldr	x0, [x0]
     8c8:	mrs	x2, tpidr_el0
     8cc:	add	x0, x2, x0
     8d0:	ldr	x0, [x0, #16]
     8d4:	mov	x2, #0x1                   	// #1
     8d8:	cbz	x0, 8e4 <GOMP_loop_ull_ordered_dynamic_start+0x1b4>
     8dc:	ldr	w2, [x0]
     8e0:	cbz	w25, 9bc <GOMP_loop_ull_ordered_dynamic_start+0x28c>
     8e4:	orr	x3, x2, x19
     8e8:	mov	x0, #0x7fffffff            	// #2147483647
     8ec:	cmp	x3, x0
     8f0:	b.hi	908 <GOMP_loop_ull_ordered_dynamic_start+0x1d8>  // b.pmore
     8f4:	madd	x19, x2, x19, x19
     8f8:	mvn	x19, x19
     8fc:	cmp	x19, x20
     900:	cset	w0, hi  // hi = pmore
     904:	str	w0, [x1, #4]
     908:	adrp	x0, 0 <gomp_tls_data>
     90c:	ldr	x0, [x0]
     910:	mrs	x1, tpidr_el0
     914:	add	x0, x1, x0
     918:	ldr	x0, [x0, #24]
     91c:	add	x0, x0, #0x40
     920:	mov	w2, #0x1                   	// #1
     924:	ldaxr	w1, [x0]
     928:	cbnz	w1, 934 <GOMP_loop_ull_ordered_dynamic_start+0x204>
     92c:	stxr	w3, w2, [x0]
     930:	cbnz	w3, 924 <GOMP_loop_ull_ordered_dynamic_start+0x1f4>
     934:	cmp	w1, #0x0
     938:	b.ne	888 <GOMP_loop_ull_ordered_dynamic_start+0x158>  // b.any
     93c:	adrp	x0, 0 <gomp_tls_data>
     940:	ldr	x0, [x0]
     944:	mrs	x1, tpidr_el0
     948:	add	x0, x1, x0
     94c:	ldr	x0, [x0, #32]
     950:	cbz	x0, 7a8 <GOMP_loop_ull_ordered_dynamic_start+0x78>
     954:	add	x0, x0, #0x50
     958:	adrp	x1, 0 <gomp_tls_data>
     95c:	ldr	x1, [x1]
     960:	mrs	x2, tpidr_el0
     964:	add	x1, x2, x1
     968:	ldr	x2, [x1, #24]
     96c:	ldxr	x1, [x0]
     970:	stlxr	w3, x2, [x0]
     974:	cbnz	w3, 96c <GOMP_loop_ull_ordered_dynamic_start+0x23c>
     978:	cmp	x1, #0x1
     97c:	b.eq	7a8 <GOMP_loop_ull_ordered_dynamic_start+0x78>  // b.none
     980:	bl	0 <gomp_ptrlock_set_slow>
     984:	b	7a8 <GOMP_loop_ull_ordered_dynamic_start+0x78>
     988:	str	x20, [x1, #16]
     98c:	str	x19, [x1, #24]
     990:	str	x20, [x1, #72]
     994:	str	wzr, [x1, #4]
     998:	mul	x19, x19, x23
     99c:	str	x19, [x1, #8]
     9a0:	adrp	x0, 0 <gomp_tls_data>
     9a4:	ldr	x0, [x0]
     9a8:	mrs	x2, tpidr_el0
     9ac:	add	x0, x2, x0
     9b0:	ldr	x0, [x0, #16]
     9b4:	mov	x2, #0x1                   	// #1
     9b8:	cbnz	x0, 8dc <GOMP_loop_ull_ordered_dynamic_start+0x1ac>
     9bc:	neg	x0, x19
     9c0:	orr	x4, x2, x0
     9c4:	mov	x3, #0x7fffffff            	// #2147483647
     9c8:	cmp	x4, x3
     9cc:	b.hi	9e4 <GOMP_loop_ull_ordered_dynamic_start+0x2b4>  // b.pmore
     9d0:	madd	x0, x2, x0, x0
     9d4:	add	x0, x0, #0x1
     9d8:	cmp	x0, x20
     9dc:	cset	w0, cc  // cc = lo, ul, last
     9e0:	str	w0, [x1, #4]
     9e4:	ldr	w0, [x1, #4]
     9e8:	orr	w0, w0, #0x2
     9ec:	str	w0, [x1, #4]
     9f0:	b	908 <GOMP_loop_ull_ordered_dynamic_start+0x1d8>

00000000000009f4 <GOMP_loop_ull_ordered_guided_start>:
     9f4:	stp	x29, x30, [sp, #-80]!
     9f8:	mov	x29, sp
     9fc:	stp	x19, x20, [sp, #16]
     a00:	stp	x21, x22, [sp, #32]
     a04:	stp	x23, x24, [sp, #48]
     a08:	str	x25, [sp, #64]
     a0c:	and	w25, w0, #0xff
     a10:	mov	x19, x1
     a14:	mov	x22, x2
     a18:	mov	x23, x3
     a1c:	mov	x24, x4
     a20:	mov	x20, x5
     a24:	mov	x21, x6
     a28:	mov	x0, #0x1                   	// #1
     a2c:	bl	0 <gomp_work_share_start>
     a30:	and	w0, w0, #0xff
     a34:	cbz	w0, aa8 <GOMP_loop_ull_ordered_guided_start+0xb4>
     a38:	adrp	x0, 0 <gomp_tls_data>
     a3c:	ldr	x0, [x0]
     a40:	mrs	x1, tpidr_el0
     a44:	add	x0, x1, x0
     a48:	ldr	x0, [x0, #24]
     a4c:	mov	w1, #0x3                   	// #3
     a50:	str	w1, [x0]
     a54:	str	x24, [x0, #8]
     a58:	cmp	w25, #0x0
     a5c:	ccmp	x19, x22, #0x0, ne  // ne = any
     a60:	b.hi	b04 <GOMP_loop_ull_ordered_guided_start+0x110>  // b.pmore
     a64:	eor	w1, w25, #0x1
     a68:	cmp	x19, x22
     a6c:	cset	w2, cc  // cc = lo, ul, last
     a70:	tst	w2, w1
     a74:	b.ne	af4 <GOMP_loop_ull_ordered_guided_start+0x100>  // b.any
     a78:	str	x22, [x0, #16]
     a7c:	str	x23, [x0, #24]
     a80:	str	x19, [x0, #72]
     a84:	str	wzr, [x0, #4]
     a88:	cbnz	w25, b14 <GOMP_loop_ull_ordered_guided_start+0x120>
     a8c:	mov	w1, #0x2                   	// #2
     a90:	str	w1, [x0, #4]
     a94:	b	b14 <GOMP_loop_ull_ordered_guided_start+0x120>
     a98:	bl	0 <gomp_mutex_lock_slow>
     a9c:	b	b48 <GOMP_loop_ull_ordered_guided_start+0x154>
     aa0:	bl	0 <gomp_ptrlock_set_slow>
     aa4:	b	b8c <GOMP_loop_ull_ordered_guided_start+0x198>
     aa8:	adrp	x0, 0 <gomp_tls_data>
     aac:	ldr	x0, [x0]
     ab0:	mrs	x1, tpidr_el0
     ab4:	add	x0, x1, x0
     ab8:	ldr	x0, [x0, #24]
     abc:	add	x0, x0, #0x40
     ac0:	mov	w2, #0x1                   	// #1
     ac4:	ldaxr	w1, [x0]
     ac8:	cbnz	w1, ad4 <GOMP_loop_ull_ordered_guided_start+0xe0>
     acc:	stxr	w3, w2, [x0]
     ad0:	cbnz	w3, ac4 <GOMP_loop_ull_ordered_guided_start+0xd0>
     ad4:	cmp	w1, #0x0
     ad8:	b.eq	b8c <GOMP_loop_ull_ordered_guided_start+0x198>  // b.none
     adc:	bl	0 <gomp_mutex_lock_slow>
     ae0:	b	b8c <GOMP_loop_ull_ordered_guided_start+0x198>
     ae4:	bl	0 <gomp_ordered_first>
     ae8:	b	ba4 <GOMP_loop_ull_ordered_guided_start+0x1b0>
     aec:	bl	0 <gomp_mutex_unlock_slow>
     af0:	b	bcc <GOMP_loop_ull_ordered_guided_start+0x1d8>
     af4:	str	x19, [x0, #16]
     af8:	str	x23, [x0, #24]
     afc:	str	x19, [x0, #72]
     b00:	b	a8c <GOMP_loop_ull_ordered_guided_start+0x98>
     b04:	str	x19, [x0, #16]
     b08:	str	x23, [x0, #24]
     b0c:	str	x19, [x0, #72]
     b10:	str	wzr, [x0, #4]
     b14:	adrp	x0, 0 <gomp_tls_data>
     b18:	ldr	x0, [x0]
     b1c:	mrs	x1, tpidr_el0
     b20:	add	x0, x1, x0
     b24:	ldr	x0, [x0, #24]
     b28:	add	x0, x0, #0x40
     b2c:	mov	w2, #0x1                   	// #1
     b30:	ldaxr	w1, [x0]
     b34:	cbnz	w1, b40 <GOMP_loop_ull_ordered_guided_start+0x14c>
     b38:	stxr	w3, w2, [x0]
     b3c:	cbnz	w3, b30 <GOMP_loop_ull_ordered_guided_start+0x13c>
     b40:	cmp	w1, #0x0
     b44:	b.ne	a98 <GOMP_loop_ull_ordered_guided_start+0xa4>  // b.any
     b48:	adrp	x0, 0 <gomp_tls_data>
     b4c:	ldr	x0, [x0]
     b50:	mrs	x1, tpidr_el0
     b54:	add	x0, x1, x0
     b58:	ldr	x0, [x0, #32]
     b5c:	cbz	x0, b8c <GOMP_loop_ull_ordered_guided_start+0x198>
     b60:	add	x0, x0, #0x50
     b64:	adrp	x1, 0 <gomp_tls_data>
     b68:	ldr	x1, [x1]
     b6c:	mrs	x2, tpidr_el0
     b70:	add	x1, x2, x1
     b74:	ldr	x2, [x1, #24]
     b78:	ldxr	x1, [x0]
     b7c:	stlxr	w3, x2, [x0]
     b80:	cbnz	w3, b78 <GOMP_loop_ull_ordered_guided_start+0x184>
     b84:	cmp	x1, #0x1
     b88:	b.ne	aa0 <GOMP_loop_ull_ordered_guided_start+0xac>  // b.any
     b8c:	mov	x1, x21
     b90:	mov	x0, x20
     b94:	bl	0 <gomp_iter_ull_guided_next_locked>
     b98:	mov	w19, w0
     b9c:	tst	w0, #0xff
     ba0:	b.ne	ae4 <GOMP_loop_ull_ordered_guided_start+0xf0>  // b.any
     ba4:	adrp	x0, 0 <gomp_tls_data>
     ba8:	ldr	x0, [x0]
     bac:	mrs	x1, tpidr_el0
     bb0:	add	x0, x1, x0
     bb4:	ldr	x0, [x0, #24]
     bb8:	add	x0, x0, #0x40
     bbc:	ldxr	w1, [x0]
     bc0:	stlxr	w2, wzr, [x0]
     bc4:	cbnz	w2, bbc <GOMP_loop_ull_ordered_guided_start+0x1c8>
     bc8:	tbnz	w1, #31, aec <GOMP_loop_ull_ordered_guided_start+0xf8>
     bcc:	mov	w0, w19
     bd0:	ldp	x19, x20, [sp, #16]
     bd4:	ldp	x21, x22, [sp, #32]
     bd8:	ldp	x23, x24, [sp, #48]
     bdc:	ldr	x25, [sp, #64]
     be0:	ldp	x29, x30, [sp], #80
     be4:	ret

0000000000000be8 <GOMP_loop_ull_ordered_runtime_start>:
     be8:	stp	x29, x30, [sp, #-16]!
     bec:	mov	x29, sp
     bf0:	and	w0, w0, #0xff
     bf4:	mov	x6, x5
     bf8:	adrp	x5, 0 <gomp_tls_data>
     bfc:	ldr	x5, [x5]
     c00:	mrs	x7, tpidr_el0
     c04:	add	x5, x7, x5
     c08:	ldr	x5, [x5, #80]
     c0c:	add	x8, x5, #0x90
     c10:	adrp	x7, 0 <gomp_global_icv>
     c14:	add	x7, x7, #0x0
     c18:	cmp	x5, #0x0
     c1c:	csel	x7, x7, x8, eq  // eq = none
     c20:	ldr	w5, [x7, #8]
     c24:	and	w8, w5, #0x7fffffff
     c28:	cmp	w8, #0x3
     c2c:	b.eq	c90 <GOMP_loop_ull_ordered_runtime_start+0xa8>  // b.none
     c30:	tst	w5, #0x7ffffffc
     c34:	b.ne	c5c <GOMP_loop_ull_ordered_runtime_start+0x74>  // b.any
     c38:	cmp	w8, #0x1
     c3c:	b.eq	c78 <GOMP_loop_ull_ordered_runtime_start+0x90>  // b.none
     c40:	cmp	w8, #0x2
     c44:	b.ne	ca4 <GOMP_loop_ull_ordered_runtime_start+0xbc>  // b.any
     c48:	mov	x5, x4
     c4c:	ldrsw	x4, [x7, #12]
     c50:	bl	730 <GOMP_loop_ull_ordered_dynamic_start>
     c54:	and	w0, w0, #0xff
     c58:	b	c88 <GOMP_loop_ull_ordered_runtime_start+0xa0>
     c5c:	cmp	w8, #0x4
     c60:	b.ne	ca4 <GOMP_loop_ull_ordered_runtime_start+0xbc>  // b.any
     c64:	mov	x5, x4
     c68:	mov	x4, #0x0                   	// #0
     c6c:	bl	5dc <GOMP_loop_ull_ordered_static_start>
     c70:	and	w0, w0, #0xff
     c74:	b	c88 <GOMP_loop_ull_ordered_runtime_start+0xa0>
     c78:	mov	x5, x4
     c7c:	ldrsw	x4, [x7, #12]
     c80:	bl	5dc <GOMP_loop_ull_ordered_static_start>
     c84:	and	w0, w0, #0xff
     c88:	ldp	x29, x30, [sp], #16
     c8c:	ret
     c90:	mov	x5, x4
     c94:	ldrsw	x4, [x7, #12]
     c98:	bl	9f4 <GOMP_loop_ull_ordered_guided_start>
     c9c:	and	w0, w0, #0xff
     ca0:	b	c88 <GOMP_loop_ull_ordered_runtime_start+0xa0>
     ca4:	bl	0 <abort>

0000000000000ca8 <GOMP_loop_ull_ordered_start>:
     ca8:	stp	x29, x30, [sp, #-112]!
     cac:	mov	x29, sp
     cb0:	stp	x19, x20, [sp, #16]
     cb4:	stp	x21, x22, [sp, #32]
     cb8:	stp	x23, x24, [sp, #48]
     cbc:	stp	x25, x26, [sp, #64]
     cc0:	str	x27, [sp, #80]
     cc4:	and	w27, w0, #0xff
     cc8:	mov	x21, x1
     ccc:	mov	x25, x2
     cd0:	mov	x26, x3
     cd4:	mov	x19, x4
     cd8:	str	x5, [sp, #104]
     cdc:	mov	x22, x6
     ce0:	mov	x23, x7
     ce4:	ldr	x24, [sp, #112]
     ce8:	ldr	x20, [sp, #120]
     cec:	adrp	x0, 0 <gomp_tls_data>
     cf0:	ldr	x0, [x0]
     cf4:	mrs	x1, tpidr_el0
     cf8:	add	x0, x1, x0
     cfc:	str	xzr, [x0, #72]
     d00:	cbz	x24, d08 <GOMP_loop_ull_ordered_start+0x60>
     d04:	bl	0 <gomp_workshare_taskgroup_start>
     d08:	mov	x0, #0x1                   	// #1
     d0c:	cbz	x20, d18 <GOMP_loop_ull_ordered_start+0x70>
     d10:	ldr	x0, [x20]
     d14:	add	x0, x0, #0x1
     d18:	bl	0 <gomp_work_share_start>
     d1c:	and	w0, w0, #0xff
     d20:	cbnz	w0, d90 <GOMP_loop_ull_ordered_start+0xe8>
     d24:	cbz	x24, d48 <GOMP_loop_ull_ordered_start+0xa0>
     d28:	adrp	x0, 0 <gomp_tls_data>
     d2c:	ldr	x0, [x0]
     d30:	mrs	x1, tpidr_el0
     d34:	add	x0, x1, x0
     d38:	ldr	x0, [x0, #24]
     d3c:	ldr	x1, [x0, #88]
     d40:	mov	x0, x24
     d44:	bl	0 <gomp_workshare_task_reduction_register>
     d48:	adrp	x0, 0 <gomp_tls_data>
     d4c:	ldr	x0, [x0]
     d50:	mrs	x1, tpidr_el0
     d54:	add	x0, x1, x0
     d58:	ldr	x0, [x0, #24]
     d5c:	ldr	w19, [x0]
     d60:	cmp	x19, #0x1
     d64:	b.eq	1008 <GOMP_loop_ull_ordered_start+0x360>  // b.none
     d68:	add	x0, x0, #0x40
     d6c:	mov	w2, #0x1                   	// #1
     d70:	ldaxr	w1, [x0]
     d74:	cbnz	w1, d80 <GOMP_loop_ull_ordered_start+0xd8>
     d78:	stxr	w3, w2, [x0]
     d7c:	cbnz	w3, d70 <GOMP_loop_ull_ordered_start+0xc8>
     d80:	cmp	w1, #0x0
     d84:	b.eq	ebc <GOMP_loop_ull_ordered_start+0x214>  // b.none
     d88:	bl	0 <gomp_mutex_lock_slow>
     d8c:	b	ebc <GOMP_loop_ull_ordered_start+0x214>
     d90:	add	x1, sp, #0x68
     d94:	mov	x0, x19
     d98:	bl	0 <gomp_adjust_sched>
     d9c:	mov	x19, x0
     da0:	adrp	x0, 0 <gomp_tls_data>
     da4:	ldr	x0, [x0]
     da8:	mrs	x1, tpidr_el0
     dac:	add	x0, x1, x0
     db0:	ldr	x0, [x0, #24]
     db4:	ldr	x1, [sp, #104]
     db8:	str	w19, [x0]
     dbc:	str	x1, [x0, #8]
     dc0:	cmp	w27, #0x0
     dc4:	ccmp	x21, x25, #0x0, ne  // ne = any
     dc8:	b.hi	1078 <GOMP_loop_ull_ordered_start+0x3d0>  // b.pmore
     dcc:	eor	w2, w27, #0x1
     dd0:	cmp	x21, x25
     dd4:	cset	w4, cc  // cc = lo, ul, last
     dd8:	tst	w4, w2
     ddc:	b.ne	1010 <GOMP_loop_ull_ordered_start+0x368>  // b.any
     de0:	str	x25, [x0, #16]
     de4:	str	x26, [x0, #24]
     de8:	str	x21, [x0, #72]
     dec:	str	wzr, [x0, #4]
     df0:	cmp	w19, #0x2
     df4:	b.eq	f24 <GOMP_loop_ull_ordered_start+0x27c>  // b.none
     df8:	cbnz	w27, e08 <GOMP_loop_ull_ordered_start+0x160>
     dfc:	ldr	w1, [x0, #4]
     e00:	orr	w1, w1, #0x2
     e04:	str	w1, [x0, #4]
     e08:	cbz	x24, e3c <GOMP_loop_ull_ordered_start+0x194>
     e0c:	mov	x0, x24
     e10:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     e14:	adrp	x0, 0 <gomp_tls_data>
     e18:	ldr	x0, [x0]
     e1c:	mrs	x1, tpidr_el0
     e20:	add	x0, x1, x0
     e24:	ldr	x1, [x0, #80]
     e28:	ldr	x1, [x1, #40]
     e2c:	mov	w2, #0x1                   	// #1
     e30:	strb	w2, [x1, #50]
     e34:	ldr	x0, [x0, #24]
     e38:	str	x24, [x0, #88]
     e3c:	cmp	x19, #0x1
     e40:	b.eq	f58 <GOMP_loop_ull_ordered_start+0x2b0>  // b.none
     e44:	adrp	x0, 0 <gomp_tls_data>
     e48:	ldr	x0, [x0]
     e4c:	mrs	x1, tpidr_el0
     e50:	add	x0, x1, x0
     e54:	ldr	x0, [x0, #24]
     e58:	add	x0, x0, #0x40
     e5c:	mov	w2, #0x1                   	// #1
     e60:	ldaxr	w1, [x0]
     e64:	cbnz	w1, e70 <GOMP_loop_ull_ordered_start+0x1c8>
     e68:	stxr	w3, w2, [x0]
     e6c:	cbnz	w3, e60 <GOMP_loop_ull_ordered_start+0x1b8>
     e70:	cmp	w1, #0x0
     e74:	b.ne	f60 <GOMP_loop_ull_ordered_start+0x2b8>  // b.any
     e78:	adrp	x0, 0 <gomp_tls_data>
     e7c:	ldr	x0, [x0]
     e80:	mrs	x1, tpidr_el0
     e84:	add	x0, x1, x0
     e88:	ldr	x0, [x0, #32]
     e8c:	cbz	x0, ebc <GOMP_loop_ull_ordered_start+0x214>
     e90:	add	x0, x0, #0x50
     e94:	adrp	x1, 0 <gomp_tls_data>
     e98:	ldr	x1, [x1]
     e9c:	mrs	x2, tpidr_el0
     ea0:	add	x1, x2, x1
     ea4:	ldr	x2, [x1, #24]
     ea8:	ldxr	x1, [x0]
     eac:	stlxr	w3, x2, [x0]
     eb0:	cbnz	w3, ea8 <GOMP_loop_ull_ordered_start+0x200>
     eb4:	cmp	x1, #0x1
     eb8:	b.ne	f68 <GOMP_loop_ull_ordered_start+0x2c0>  // b.any
     ebc:	cbz	x20, efc <GOMP_loop_ull_ordered_start+0x254>
     ec0:	adrp	x1, 0 <gomp_tls_data>
     ec4:	ldr	x1, [x1]
     ec8:	mrs	x0, tpidr_el0
     ecc:	add	x1, x0, x1
     ed0:	ldr	x0, [x1, #24]
     ed4:	ldr	x0, [x0, #32]
     ed8:	ldr	x2, [x1, #16]
     edc:	mov	x1, #0x4                   	// #4
     ee0:	cbz	x2, eec <GOMP_loop_ull_ordered_start+0x244>
     ee4:	ldr	w1, [x2]
     ee8:	lsl	x1, x1, #2
     eec:	add	x0, x0, x1
     ef0:	add	x0, x0, #0x7
     ef4:	and	x0, x0, #0xfffffffffffffff8
     ef8:	str	x0, [x20]
     efc:	cmp	x19, #0x2
     f00:	b.eq	f9c <GOMP_loop_ull_ordered_start+0x2f4>  // b.none
     f04:	b.le	f70 <GOMP_loop_ull_ordered_start+0x2c8>
     f08:	cmp	x19, #0x3
     f0c:	b.ne	f90 <GOMP_loop_ull_ordered_start+0x2e8>  // b.any
     f10:	mov	x1, x23
     f14:	mov	x0, x22
     f18:	bl	0 <gomp_iter_ull_guided_next_locked>
     f1c:	and	w19, w0, #0xff
     f20:	b	fac <GOMP_loop_ull_ordered_start+0x304>
     f24:	mul	x26, x1, x26
     f28:	str	x26, [x0, #8]
     f2c:	adrp	x2, 0 <gomp_tls_data>
     f30:	ldr	x2, [x2]
     f34:	mrs	x1, tpidr_el0
     f38:	add	x1, x1, x2
     f3c:	ldr	x1, [x1, #16]
     f40:	cbz	x1, f4c <GOMP_loop_ull_ordered_start+0x2a4>
     f44:	mov	x21, x25
     f48:	b	10b0 <GOMP_loop_ull_ordered_start+0x408>
     f4c:	mov	x21, x25
     f50:	mov	x1, #0x1                   	// #1
     f54:	b	10b4 <GOMP_loop_ull_ordered_start+0x40c>
     f58:	bl	0 <gomp_ordered_static_init>
     f5c:	b	e78 <GOMP_loop_ull_ordered_start+0x1d0>
     f60:	bl	0 <gomp_mutex_lock_slow>
     f64:	b	e78 <GOMP_loop_ull_ordered_start+0x1d0>
     f68:	bl	0 <gomp_ptrlock_set_slow>
     f6c:	b	ebc <GOMP_loop_ull_ordered_start+0x214>
     f70:	cmp	x19, #0x1
     f74:	b.ne	f98 <GOMP_loop_ull_ordered_start+0x2f0>  // b.any
     f78:	mov	x1, x23
     f7c:	mov	x0, x22
     f80:	bl	0 <gomp_iter_ull_static_next>
     f84:	cmp	w0, #0x0
     f88:	cset	w19, eq  // eq = none
     f8c:	b	fd8 <GOMP_loop_ull_ordered_start+0x330>
     f90:	cmp	x19, #0x4
     f94:	b.eq	f78 <GOMP_loop_ull_ordered_start+0x2d0>  // b.none
     f98:	bl	0 <abort>
     f9c:	mov	x1, x23
     fa0:	mov	x0, x22
     fa4:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     fa8:	and	w19, w0, #0xff
     fac:	cbnz	w19, ff8 <GOMP_loop_ull_ordered_start+0x350>
     fb0:	adrp	x0, 0 <gomp_tls_data>
     fb4:	ldr	x0, [x0]
     fb8:	mrs	x1, tpidr_el0
     fbc:	add	x0, x1, x0
     fc0:	ldr	x0, [x0, #24]
     fc4:	add	x0, x0, #0x40
     fc8:	ldxr	w1, [x0]
     fcc:	stlxr	w2, wzr, [x0]
     fd0:	cbnz	w2, fc8 <GOMP_loop_ull_ordered_start+0x320>
     fd4:	tbnz	w1, #31, 1000 <GOMP_loop_ull_ordered_start+0x358>
     fd8:	mov	w0, w19
     fdc:	ldp	x19, x20, [sp, #16]
     fe0:	ldp	x21, x22, [sp, #32]
     fe4:	ldp	x23, x24, [sp, #48]
     fe8:	ldp	x25, x26, [sp, #64]
     fec:	ldr	x27, [sp, #80]
     ff0:	ldp	x29, x30, [sp], #112
     ff4:	ret
     ff8:	bl	0 <gomp_ordered_first>
     ffc:	b	fb0 <GOMP_loop_ull_ordered_start+0x308>
    1000:	bl	0 <gomp_mutex_unlock_slow>
    1004:	b	fd8 <GOMP_loop_ull_ordered_start+0x330>
    1008:	cbnz	x20, ec0 <GOMP_loop_ull_ordered_start+0x218>
    100c:	b	f78 <GOMP_loop_ull_ordered_start+0x2d0>
    1010:	str	x21, [x0, #16]
    1014:	str	x26, [x0, #24]
    1018:	str	x21, [x0, #72]
    101c:	str	wzr, [x0, #4]
    1020:	cmp	w19, #0x2
    1024:	b.ne	dfc <GOMP_loop_ull_ordered_start+0x154>  // b.any
    1028:	mul	x26, x1, x26
    102c:	str	x26, [x0, #8]
    1030:	adrp	x2, 0 <gomp_tls_data>
    1034:	ldr	x2, [x2]
    1038:	mrs	x1, tpidr_el0
    103c:	add	x1, x1, x2
    1040:	ldr	x1, [x1, #16]
    1044:	cbnz	x1, 10b0 <GOMP_loop_ull_ordered_start+0x408>
    1048:	mov	x1, #0x1                   	// #1
    104c:	neg	x2, x26
    1050:	orr	x4, x1, x2
    1054:	mov	x3, #0x7fffffff            	// #2147483647
    1058:	cmp	x4, x3
    105c:	b.hi	dfc <GOMP_loop_ull_ordered_start+0x154>  // b.pmore
    1060:	madd	x2, x1, x2, x2
    1064:	add	x1, x2, #0x1
    1068:	cmp	x1, x21
    106c:	cset	w1, cc  // cc = lo, ul, last
    1070:	str	w1, [x0, #4]
    1074:	b	dfc <GOMP_loop_ull_ordered_start+0x154>
    1078:	str	x21, [x0, #16]
    107c:	str	x26, [x0, #24]
    1080:	str	x21, [x0, #72]
    1084:	str	wzr, [x0, #4]
    1088:	cmp	w19, #0x2
    108c:	b.ne	e08 <GOMP_loop_ull_ordered_start+0x160>  // b.any
    1090:	mul	x26, x1, x26
    1094:	str	x26, [x0, #8]
    1098:	adrp	x1, 0 <gomp_tls_data>
    109c:	ldr	x1, [x1]
    10a0:	mrs	x2, tpidr_el0
    10a4:	add	x1, x2, x1
    10a8:	ldr	x1, [x1, #16]
    10ac:	cbz	x1, 10e0 <GOMP_loop_ull_ordered_start+0x438>
    10b0:	ldr	w1, [x1]
    10b4:	cbz	w27, 104c <GOMP_loop_ull_ordered_start+0x3a4>
    10b8:	orr	x3, x1, x26
    10bc:	mov	x2, #0x7fffffff            	// #2147483647
    10c0:	cmp	x3, x2
    10c4:	b.hi	e08 <GOMP_loop_ull_ordered_start+0x160>  // b.pmore
    10c8:	madd	x26, x1, x26, x26
    10cc:	mvn	x1, x26
    10d0:	cmp	x1, x21
    10d4:	cset	w1, hi  // hi = pmore
    10d8:	str	w1, [x0, #4]
    10dc:	b	e08 <GOMP_loop_ull_ordered_start+0x160>
    10e0:	mov	x1, #0x1                   	// #1
    10e4:	b	10b8 <GOMP_loop_ull_ordered_start+0x410>

00000000000010e8 <GOMP_loop_ull_doacross_static_start>:
    10e8:	stp	x29, x30, [sp, #-64]!
    10ec:	mov	x29, sp
    10f0:	stp	x19, x20, [sp, #16]
    10f4:	stp	x21, x22, [sp, #32]
    10f8:	stp	x23, x24, [sp, #48]
    10fc:	mov	w23, w0
    1100:	mov	x21, x1
    1104:	mov	x22, x2
    1108:	mov	x19, x3
    110c:	mov	x20, x4
    1110:	adrp	x3, 0 <gomp_tls_data>
    1114:	ldr	x3, [x3]
    1118:	mrs	x4, tpidr_el0
    111c:	add	x3, x4, x3
    1120:	str	xzr, [x3, #72]
    1124:	mov	x0, #0x0                   	// #0
    1128:	bl	0 <gomp_work_share_start>
    112c:	and	w3, w0, #0xff
    1130:	cbnz	w3, 115c <GOMP_loop_ull_doacross_static_start+0x74>
    1134:	mov	x1, x20
    1138:	mov	x0, x19
    113c:	bl	0 <gomp_iter_ull_static_next>
    1140:	cmp	w0, #0x0
    1144:	cset	w0, eq  // eq = none
    1148:	ldp	x19, x20, [sp, #16]
    114c:	ldp	x21, x22, [sp, #32]
    1150:	ldp	x23, x24, [sp, #48]
    1154:	ldp	x29, x30, [sp], #64
    1158:	ret
    115c:	adrp	x24, 0 <gomp_tls_data>
    1160:	ldr	x24, [x24]
    1164:	mrs	x0, tpidr_el0
    1168:	add	x24, x0, x24
    116c:	ldr	x0, [x24, #24]
    1170:	ldr	x1, [x21]
    1174:	mov	w2, #0x1                   	// #1
    1178:	str	w2, [x0]
    117c:	str	x22, [x0, #8]
    1180:	str	x1, [x0, #16]
    1184:	mov	x1, #0x1                   	// #1
    1188:	str	x1, [x0, #24]
    118c:	str	xzr, [x0, #72]
    1190:	str	wzr, [x0, #4]
    1194:	mov	x3, #0x0                   	// #0
    1198:	mov	x2, x22
    119c:	mov	x1, x21
    11a0:	mov	w0, w23
    11a4:	bl	0 <gomp_doacross_ull_init>
    11a8:	ldr	x0, [x24, #32]
    11ac:	cbz	x0, 1134 <GOMP_loop_ull_doacross_static_start+0x4c>
    11b0:	add	x0, x0, #0x50
    11b4:	ldr	x2, [x24, #24]
    11b8:	ldxr	x1, [x0]
    11bc:	stlxr	w3, x2, [x0]
    11c0:	cbnz	w3, 11b8 <GOMP_loop_ull_doacross_static_start+0xd0>
    11c4:	cmp	x1, #0x1
    11c8:	b.eq	1134 <GOMP_loop_ull_doacross_static_start+0x4c>  // b.none
    11cc:	bl	0 <gomp_ptrlock_set_slow>
    11d0:	b	1134 <GOMP_loop_ull_doacross_static_start+0x4c>

00000000000011d4 <GOMP_loop_ull_doacross_dynamic_start>:
    11d4:	stp	x29, x30, [sp, #-64]!
    11d8:	mov	x29, sp
    11dc:	stp	x19, x20, [sp, #16]
    11e0:	stp	x21, x22, [sp, #32]
    11e4:	str	x23, [sp, #48]
    11e8:	mov	w23, w0
    11ec:	mov	x22, x1
    11f0:	mov	x19, x2
    11f4:	mov	x20, x3
    11f8:	mov	x21, x4
    11fc:	mov	x0, #0x0                   	// #0
    1200:	bl	0 <gomp_work_share_start>
    1204:	and	w2, w0, #0xff
    1208:	cbnz	w2, 122c <GOMP_loop_ull_doacross_dynamic_start+0x58>
    120c:	mov	x1, x21
    1210:	mov	x0, x20
    1214:	bl	0 <gomp_iter_ull_dynamic_next>
    1218:	ldp	x19, x20, [sp, #16]
    121c:	ldp	x21, x22, [sp, #32]
    1220:	ldr	x23, [sp, #48]
    1224:	ldp	x29, x30, [sp], #64
    1228:	ret
    122c:	adrp	x1, 0 <gomp_tls_data>
    1230:	ldr	x1, [x1]
    1234:	mrs	x0, tpidr_el0
    1238:	add	x1, x0, x1
    123c:	ldr	x0, [x1, #24]
    1240:	ldr	x2, [x22]
    1244:	mov	w3, #0x2                   	// #2
    1248:	str	w3, [x0]
    124c:	str	x19, [x0, #8]
    1250:	str	x2, [x0, #16]
    1254:	mov	x3, #0x1                   	// #1
    1258:	str	x3, [x0, #24]
    125c:	str	xzr, [x0, #72]
    1260:	str	wzr, [x0, #4]
    1264:	ldr	x3, [x1, #16]
    1268:	mov	x1, #0x1                   	// #1
    126c:	cbz	x3, 1274 <GOMP_loop_ull_doacross_dynamic_start+0xa0>
    1270:	ldr	w1, [x3]
    1274:	orr	x4, x1, x19
    1278:	mov	x3, #0x7fffffff            	// #2147483647
    127c:	cmp	x4, x3
    1280:	b.hi	1298 <GOMP_loop_ull_doacross_dynamic_start+0xc4>  // b.pmore
    1284:	madd	x1, x1, x19, x19
    1288:	mvn	x1, x1
    128c:	cmp	x2, x1
    1290:	cset	w1, cc  // cc = lo, ul, last
    1294:	str	w1, [x0, #4]
    1298:	mov	x3, #0x0                   	// #0
    129c:	mov	x2, x19
    12a0:	mov	x1, x22
    12a4:	mov	w0, w23
    12a8:	bl	0 <gomp_doacross_ull_init>
    12ac:	adrp	x0, 0 <gomp_tls_data>
    12b0:	ldr	x0, [x0]
    12b4:	mrs	x1, tpidr_el0
    12b8:	add	x0, x1, x0
    12bc:	ldr	x0, [x0, #32]
    12c0:	cbz	x0, 120c <GOMP_loop_ull_doacross_dynamic_start+0x38>
    12c4:	add	x0, x0, #0x50
    12c8:	adrp	x1, 0 <gomp_tls_data>
    12cc:	ldr	x1, [x1]
    12d0:	mrs	x2, tpidr_el0
    12d4:	add	x1, x2, x1
    12d8:	ldr	x2, [x1, #24]
    12dc:	ldxr	x1, [x0]
    12e0:	stlxr	w3, x2, [x0]
    12e4:	cbnz	w3, 12dc <GOMP_loop_ull_doacross_dynamic_start+0x108>
    12e8:	cmp	x1, #0x1
    12ec:	b.eq	120c <GOMP_loop_ull_doacross_dynamic_start+0x38>  // b.none
    12f0:	bl	0 <gomp_ptrlock_set_slow>
    12f4:	b	120c <GOMP_loop_ull_doacross_dynamic_start+0x38>

00000000000012f8 <GOMP_loop_ull_doacross_guided_start>:
    12f8:	stp	x29, x30, [sp, #-64]!
    12fc:	mov	x29, sp
    1300:	stp	x19, x20, [sp, #16]
    1304:	stp	x21, x22, [sp, #32]
    1308:	stp	x23, x24, [sp, #48]
    130c:	mov	w22, w0
    1310:	mov	x21, x1
    1314:	mov	x23, x2
    1318:	mov	x19, x3
    131c:	mov	x20, x4
    1320:	mov	x0, #0x0                   	// #0
    1324:	bl	0 <gomp_work_share_start>
    1328:	and	w3, w0, #0xff
    132c:	cbnz	w3, 1350 <GOMP_loop_ull_doacross_guided_start+0x58>
    1330:	mov	x1, x20
    1334:	mov	x0, x19
    1338:	bl	0 <gomp_iter_ull_guided_next>
    133c:	ldp	x19, x20, [sp, #16]
    1340:	ldp	x21, x22, [sp, #32]
    1344:	ldp	x23, x24, [sp, #48]
    1348:	ldp	x29, x30, [sp], #64
    134c:	ret
    1350:	adrp	x24, 0 <gomp_tls_data>
    1354:	ldr	x24, [x24]
    1358:	mrs	x0, tpidr_el0
    135c:	add	x24, x0, x24
    1360:	ldr	x3, [x24, #24]
    1364:	ldr	x0, [x21]
    1368:	mov	w1, #0x3                   	// #3
    136c:	str	w1, [x3]
    1370:	str	x23, [x3, #8]
    1374:	str	x0, [x3, #16]
    1378:	mov	x0, #0x1                   	// #1
    137c:	str	x0, [x3, #24]
    1380:	str	xzr, [x3, #72]
    1384:	str	wzr, [x3, #4]
    1388:	mov	x3, #0x0                   	// #0
    138c:	mov	x2, x23
    1390:	mov	x1, x21
    1394:	mov	w0, w22
    1398:	bl	0 <gomp_doacross_ull_init>
    139c:	ldr	x0, [x24, #32]
    13a0:	cbz	x0, 1330 <GOMP_loop_ull_doacross_guided_start+0x38>
    13a4:	add	x0, x0, #0x50
    13a8:	ldr	x2, [x24, #24]
    13ac:	ldxr	x1, [x0]
    13b0:	stlxr	w3, x2, [x0]
    13b4:	cbnz	w3, 13ac <GOMP_loop_ull_doacross_guided_start+0xb4>
    13b8:	cmp	x1, #0x1
    13bc:	b.eq	1330 <GOMP_loop_ull_doacross_guided_start+0x38>  // b.none
    13c0:	bl	0 <gomp_ptrlock_set_slow>
    13c4:	b	1330 <GOMP_loop_ull_doacross_guided_start+0x38>

00000000000013c8 <GOMP_loop_ull_doacross_runtime_start>:
    13c8:	stp	x29, x30, [sp, #-16]!
    13cc:	mov	x29, sp
    13d0:	mov	x4, x3
    13d4:	adrp	x3, 0 <gomp_tls_data>
    13d8:	ldr	x3, [x3]
    13dc:	mrs	x5, tpidr_el0
    13e0:	add	x3, x5, x3
    13e4:	ldr	x3, [x3, #80]
    13e8:	add	x6, x3, #0x90
    13ec:	adrp	x5, 0 <gomp_global_icv>
    13f0:	add	x5, x5, #0x0
    13f4:	cmp	x3, #0x0
    13f8:	csel	x5, x5, x6, eq  // eq = none
    13fc:	ldr	w3, [x5, #8]
    1400:	and	w6, w3, #0x7fffffff
    1404:	cmp	w6, #0x3
    1408:	b.eq	146c <GOMP_loop_ull_doacross_runtime_start+0xa4>  // b.none
    140c:	tst	w3, #0x7ffffffc
    1410:	b.ne	1438 <GOMP_loop_ull_doacross_runtime_start+0x70>  // b.any
    1414:	cmp	w6, #0x1
    1418:	b.eq	1454 <GOMP_loop_ull_doacross_runtime_start+0x8c>  // b.none
    141c:	cmp	w6, #0x2
    1420:	b.ne	1480 <GOMP_loop_ull_doacross_runtime_start+0xb8>  // b.any
    1424:	mov	x3, x2
    1428:	ldrsw	x2, [x5, #12]
    142c:	bl	11d4 <GOMP_loop_ull_doacross_dynamic_start>
    1430:	and	w0, w0, #0xff
    1434:	b	1464 <GOMP_loop_ull_doacross_runtime_start+0x9c>
    1438:	cmp	w6, #0x4
    143c:	b.ne	1480 <GOMP_loop_ull_doacross_runtime_start+0xb8>  // b.any
    1440:	mov	x3, x2
    1444:	mov	x2, #0x0                   	// #0
    1448:	bl	10e8 <GOMP_loop_ull_doacross_static_start>
    144c:	and	w0, w0, #0xff
    1450:	b	1464 <GOMP_loop_ull_doacross_runtime_start+0x9c>
    1454:	mov	x3, x2
    1458:	ldrsw	x2, [x5, #12]
    145c:	bl	10e8 <GOMP_loop_ull_doacross_static_start>
    1460:	and	w0, w0, #0xff
    1464:	ldp	x29, x30, [sp], #16
    1468:	ret
    146c:	mov	x3, x2
    1470:	ldrsw	x2, [x5, #12]
    1474:	bl	12f8 <GOMP_loop_ull_doacross_guided_start>
    1478:	and	w0, w0, #0xff
    147c:	b	1464 <GOMP_loop_ull_doacross_runtime_start+0x9c>
    1480:	bl	0 <abort>

0000000000001484 <GOMP_loop_ull_static_next>:
    1484:	stp	x29, x30, [sp, #-16]!
    1488:	mov	x29, sp
    148c:	bl	0 <gomp_iter_ull_static_next>
    1490:	cmp	w0, #0x0
    1494:	cset	w0, eq  // eq = none
    1498:	ldp	x29, x30, [sp], #16
    149c:	ret

00000000000014a0 <GOMP_loop_ull_dynamic_next>:
    14a0:	stp	x29, x30, [sp, #-16]!
    14a4:	mov	x29, sp
    14a8:	bl	0 <gomp_iter_ull_dynamic_next>
    14ac:	ldp	x29, x30, [sp], #16
    14b0:	ret

00000000000014b4 <GOMP_loop_ull_guided_next>:
    14b4:	stp	x29, x30, [sp, #-16]!
    14b8:	mov	x29, sp
    14bc:	bl	0 <gomp_iter_ull_guided_next>
    14c0:	ldp	x29, x30, [sp], #16
    14c4:	ret

00000000000014c8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>:
    14c8:	stp	x29, x30, [sp, #-16]!
    14cc:	mov	x29, sp
    14d0:	adrp	x2, 0 <gomp_tls_data>
    14d4:	ldr	x2, [x2]
    14d8:	mrs	x3, tpidr_el0
    14dc:	add	x2, x3, x2
    14e0:	ldr	x2, [x2, #24]
    14e4:	ldr	w2, [x2]
    14e8:	cmp	w2, #0x2
    14ec:	b.eq	152c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x64>  // b.none
    14f0:	b.ls	1508 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x40>  // b.plast
    14f4:	cmp	w2, #0x3
    14f8:	b.ne	1520 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x58>  // b.any
    14fc:	bl	0 <gomp_iter_ull_guided_next>
    1500:	and	w0, w0, #0xff
    1504:	b	1518 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x50>
    1508:	cmp	w2, #0x1
    150c:	b.ne	1528 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x60>  // b.any
    1510:	bl	1484 <GOMP_loop_ull_static_next>
    1514:	and	w0, w0, #0xff
    1518:	ldp	x29, x30, [sp], #16
    151c:	ret
    1520:	cmp	w2, #0x4
    1524:	b.eq	1510 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x48>  // b.none
    1528:	bl	0 <abort>
    152c:	bl	0 <gomp_iter_ull_dynamic_next>
    1530:	and	w0, w0, #0xff
    1534:	b	1518 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x50>

0000000000001538 <GOMP_loop_ull_start>:
    1538:	stp	x29, x30, [sp, #-112]!
    153c:	mov	x29, sp
    1540:	stp	x19, x20, [sp, #16]
    1544:	stp	x21, x22, [sp, #32]
    1548:	stp	x23, x24, [sp, #48]
    154c:	stp	x25, x26, [sp, #64]
    1550:	str	x27, [sp, #80]
    1554:	and	w27, w0, #0xff
    1558:	mov	x19, x1
    155c:	mov	x22, x2
    1560:	mov	x23, x3
    1564:	mov	x24, x4
    1568:	str	x5, [sp, #104]
    156c:	mov	x20, x6
    1570:	mov	x21, x7
    1574:	ldr	x25, [sp, #112]
    1578:	ldr	x26, [sp, #120]
    157c:	adrp	x0, 0 <gomp_tls_data>
    1580:	ldr	x0, [x0]
    1584:	mrs	x1, tpidr_el0
    1588:	add	x0, x1, x0
    158c:	str	xzr, [x0, #72]
    1590:	cbz	x25, 1740 <GOMP_loop_ull_start+0x208>
    1594:	bl	0 <gomp_workshare_taskgroup_start>
    1598:	mov	x0, #0x0                   	// #0
    159c:	bl	0 <gomp_work_share_start>
    15a0:	and	w0, w0, #0xff
    15a4:	cbnz	w0, 1750 <GOMP_loop_ull_start+0x218>
    15a8:	adrp	x0, 0 <gomp_tls_data>
    15ac:	ldr	x0, [x0]
    15b0:	mrs	x1, tpidr_el0
    15b4:	add	x0, x1, x0
    15b8:	ldr	x0, [x0, #24]
    15bc:	ldr	x1, [x0, #88]
    15c0:	mov	x0, x25
    15c4:	bl	0 <gomp_workshare_task_reduction_register>
    15c8:	cbz	x26, 15e8 <GOMP_loop_ull_start+0xb0>
    15cc:	adrp	x0, 0 <gomp_tls_data>
    15d0:	ldr	x0, [x0]
    15d4:	mrs	x1, tpidr_el0
    15d8:	add	x0, x1, x0
    15dc:	ldr	x0, [x0, #24]
    15e0:	ldr	x0, [x0, #32]
    15e4:	str	x0, [x26]
    15e8:	mov	x1, x21
    15ec:	mov	x0, x20
    15f0:	bl	14c8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
    15f4:	ldp	x19, x20, [sp, #16]
    15f8:	ldp	x21, x22, [sp, #32]
    15fc:	ldp	x23, x24, [sp, #48]
    1600:	ldp	x25, x26, [sp, #64]
    1604:	ldr	x27, [sp, #80]
    1608:	ldp	x29, x30, [sp], #112
    160c:	ret
    1610:	mul	x23, x2, x23
    1614:	str	x23, [x1, #8]
    1618:	adrp	x2, 0 <gomp_tls_data>
    161c:	ldr	x2, [x2]
    1620:	mrs	x0, tpidr_el0
    1624:	add	x0, x0, x2
    1628:	ldr	x0, [x0, #16]
    162c:	cbz	x0, 1638 <GOMP_loop_ull_start+0x100>
    1630:	mov	x19, x22
    1634:	b	1710 <GOMP_loop_ull_start+0x1d8>
    1638:	mov	x19, x22
    163c:	mov	x2, #0x1                   	// #1
    1640:	b	1714 <GOMP_loop_ull_start+0x1dc>
    1644:	adrp	x0, 0 <gomp_tls_data>
    1648:	ldr	x0, [x0]
    164c:	mrs	x1, tpidr_el0
    1650:	add	x0, x1, x0
    1654:	ldr	x0, [x0, #24]
    1658:	mov	w1, #0x0                   	// #0
    165c:	add	x0, x0, #0x60
    1660:	bl	0 <memset>
    1664:	str	x0, [x26]
    1668:	b	182c <GOMP_loop_ull_start+0x2f4>
    166c:	str	x19, [x1, #16]
    1670:	str	x23, [x1, #24]
    1674:	str	x19, [x1, #72]
    1678:	str	wzr, [x1, #4]
    167c:	cmp	w0, #0x2
    1680:	b.ne	17b8 <GOMP_loop_ull_start+0x280>  // b.any
    1684:	mul	x23, x2, x23
    1688:	str	x23, [x1, #8]
    168c:	adrp	x2, 0 <gomp_tls_data>
    1690:	ldr	x2, [x2]
    1694:	mrs	x0, tpidr_el0
    1698:	add	x0, x0, x2
    169c:	ldr	x0, [x0, #16]
    16a0:	mov	x2, #0x1                   	// #1
    16a4:	cbnz	x0, 1710 <GOMP_loop_ull_start+0x1d8>
    16a8:	neg	x0, x23
    16ac:	orr	x4, x2, x0
    16b0:	mov	x3, #0x7fffffff            	// #2147483647
    16b4:	cmp	x4, x3
    16b8:	b.hi	17b8 <GOMP_loop_ull_start+0x280>  // b.pmore
    16bc:	madd	x0, x2, x0, x0
    16c0:	add	x0, x0, #0x1
    16c4:	cmp	x0, x19
    16c8:	cset	w0, cc  // cc = lo, ul, last
    16cc:	str	w0, [x1, #4]
    16d0:	b	17b8 <GOMP_loop_ull_start+0x280>
    16d4:	str	x19, [x1, #16]
    16d8:	str	x23, [x1, #24]
    16dc:	str	x19, [x1, #72]
    16e0:	str	wzr, [x1, #4]
    16e4:	cmp	w0, #0x2
    16e8:	b.ne	17c4 <GOMP_loop_ull_start+0x28c>  // b.any
    16ec:	mul	x23, x2, x23
    16f0:	str	x23, [x1, #8]
    16f4:	adrp	x0, 0 <gomp_tls_data>
    16f8:	ldr	x0, [x0]
    16fc:	mrs	x2, tpidr_el0
    1700:	add	x0, x2, x0
    1704:	ldr	x0, [x0, #16]
    1708:	mov	x2, #0x1                   	// #1
    170c:	cbz	x0, 1718 <GOMP_loop_ull_start+0x1e0>
    1710:	ldr	w2, [x0]
    1714:	cbz	w27, 16a8 <GOMP_loop_ull_start+0x170>
    1718:	orr	x3, x2, x23
    171c:	mov	x0, #0x7fffffff            	// #2147483647
    1720:	cmp	x3, x0
    1724:	b.hi	17c4 <GOMP_loop_ull_start+0x28c>  // b.pmore
    1728:	madd	x23, x2, x23, x23
    172c:	mvn	x2, x23
    1730:	cmp	x2, x19
    1734:	cset	w0, hi  // hi = pmore
    1738:	str	w0, [x1, #4]
    173c:	b	17c4 <GOMP_loop_ull_start+0x28c>
    1740:	mov	x0, #0x0                   	// #0
    1744:	bl	0 <gomp_work_share_start>
    1748:	and	w0, w0, #0xff
    174c:	cbz	w0, 15c8 <GOMP_loop_ull_start+0x90>
    1750:	add	x1, sp, #0x68
    1754:	mov	x0, x24
    1758:	bl	0 <gomp_adjust_sched>
    175c:	adrp	x1, 0 <gomp_tls_data>
    1760:	ldr	x1, [x1]
    1764:	mrs	x2, tpidr_el0
    1768:	add	x1, x2, x1
    176c:	ldr	x1, [x1, #24]
    1770:	ldr	x2, [sp, #104]
    1774:	str	w0, [x1]
    1778:	str	x2, [x1, #8]
    177c:	cmp	w27, #0x0
    1780:	ccmp	x19, x22, #0x0, ne  // ne = any
    1784:	b.hi	16d4 <GOMP_loop_ull_start+0x19c>  // b.pmore
    1788:	eor	w3, w27, #0x1
    178c:	cmp	x19, x22
    1790:	cset	w4, cc  // cc = lo, ul, last
    1794:	tst	w4, w3
    1798:	b.ne	166c <GOMP_loop_ull_start+0x134>  // b.any
    179c:	str	x22, [x1, #16]
    17a0:	str	x23, [x1, #24]
    17a4:	str	x19, [x1, #72]
    17a8:	str	wzr, [x1, #4]
    17ac:	cmp	w0, #0x2
    17b0:	b.eq	1610 <GOMP_loop_ull_start+0xd8>  // b.none
    17b4:	cbnz	w27, 17c4 <GOMP_loop_ull_start+0x28c>
    17b8:	ldr	w0, [x1, #4]
    17bc:	orr	w0, w0, #0x2
    17c0:	str	w0, [x1, #4]
    17c4:	cbz	x25, 17f8 <GOMP_loop_ull_start+0x2c0>
    17c8:	mov	x0, x25
    17cc:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    17d0:	adrp	x0, 0 <gomp_tls_data>
    17d4:	ldr	x0, [x0]
    17d8:	mrs	x1, tpidr_el0
    17dc:	add	x0, x1, x0
    17e0:	ldr	x1, [x0, #80]
    17e4:	ldr	x1, [x1, #40]
    17e8:	mov	w2, #0x1                   	// #1
    17ec:	strb	w2, [x1, #50]
    17f0:	ldr	x0, [x0, #24]
    17f4:	str	x25, [x0, #88]
    17f8:	cbz	x26, 182c <GOMP_loop_ull_start+0x2f4>
    17fc:	ldr	x2, [x26]
    1800:	cmp	x2, #0x20
    1804:	b.ls	1644 <GOMP_loop_ull_start+0x10c>  // b.plast
    1808:	adrp	x0, 0 <gomp_tls_data>
    180c:	ldr	x0, [x0]
    1810:	mrs	x1, tpidr_el0
    1814:	add	x0, x1, x0
    1818:	ldr	x19, [x0, #24]
    181c:	mov	x0, x2
    1820:	bl	0 <gomp_malloc_cleared>
    1824:	str	x0, [x19, #32]
    1828:	str	x0, [x26]
    182c:	adrp	x0, 0 <gomp_tls_data>
    1830:	ldr	x0, [x0]
    1834:	mrs	x1, tpidr_el0
    1838:	add	x0, x1, x0
    183c:	ldr	x0, [x0, #32]
    1840:	cbz	x0, 15e8 <GOMP_loop_ull_start+0xb0>
    1844:	add	x0, x0, #0x50
    1848:	adrp	x1, 0 <gomp_tls_data>
    184c:	ldr	x1, [x1]
    1850:	mrs	x2, tpidr_el0
    1854:	add	x1, x2, x1
    1858:	ldr	x2, [x1, #24]
    185c:	ldxr	x1, [x0]
    1860:	stlxr	w3, x2, [x0]
    1864:	cbnz	w3, 185c <GOMP_loop_ull_start+0x324>
    1868:	cmp	x1, #0x1
    186c:	b.eq	15e8 <GOMP_loop_ull_start+0xb0>  // b.none
    1870:	bl	0 <gomp_ptrlock_set_slow>
    1874:	b	15e8 <GOMP_loop_ull_start+0xb0>

0000000000001878 <GOMP_loop_ull_doacross_start>:
    1878:	stp	x29, x30, [sp, #-96]!
    187c:	mov	x29, sp
    1880:	stp	x19, x20, [sp, #16]
    1884:	stp	x21, x22, [sp, #32]
    1888:	stp	x23, x24, [sp, #48]
    188c:	stp	x25, x26, [sp, #64]
    1890:	mov	w24, w0
    1894:	mov	x23, x1
    1898:	mov	x25, x2
    189c:	str	x3, [sp, #88]
    18a0:	mov	x21, x4
    18a4:	mov	x22, x5
    18a8:	mov	x20, x6
    18ac:	mov	x19, x7
    18b0:	adrp	x1, 0 <gomp_tls_data>
    18b4:	ldr	x1, [x1]
    18b8:	mrs	x3, tpidr_el0
    18bc:	add	x1, x3, x1
    18c0:	str	xzr, [x1, #72]
    18c4:	cbz	x6, 1a7c <GOMP_loop_ull_doacross_start+0x204>
    18c8:	bl	0 <gomp_workshare_taskgroup_start>
    18cc:	mov	x0, #0x0                   	// #0
    18d0:	bl	0 <gomp_work_share_start>
    18d4:	and	w0, w0, #0xff
    18d8:	cbz	w0, 1a58 <GOMP_loop_ull_doacross_start+0x1e0>
    18dc:	mov	x26, #0x0                   	// #0
    18e0:	cbz	x19, 18e8 <GOMP_loop_ull_doacross_start+0x70>
    18e4:	ldr	x26, [x19]
    18e8:	add	x1, sp, #0x58
    18ec:	mov	x0, x25
    18f0:	bl	0 <gomp_adjust_sched>
    18f4:	adrp	x1, 0 <gomp_tls_data>
    18f8:	ldr	x1, [x1]
    18fc:	mrs	x2, tpidr_el0
    1900:	add	x1, x2, x1
    1904:	ldr	x1, [x1, #24]
    1908:	ldr	x3, [x23]
    190c:	ldr	x2, [sp, #88]
    1910:	str	w0, [x1]
    1914:	str	x2, [x1, #8]
    1918:	str	x3, [x1, #16]
    191c:	mov	x4, #0x1                   	// #1
    1920:	str	x4, [x1, #24]
    1924:	str	xzr, [x1, #72]
    1928:	str	wzr, [x1, #4]
    192c:	cmp	w0, #0x2
    1930:	b.eq	1a08 <GOMP_loop_ull_doacross_start+0x190>  // b.none
    1934:	mov	x3, x26
    1938:	ldr	x2, [sp, #88]
    193c:	mov	x1, x23
    1940:	mov	w0, w24
    1944:	bl	0 <gomp_doacross_ull_init>
    1948:	cbz	x20, 197c <GOMP_loop_ull_doacross_start+0x104>
    194c:	mov	x0, x20
    1950:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1954:	adrp	x0, 0 <gomp_tls_data>
    1958:	ldr	x0, [x0]
    195c:	mrs	x1, tpidr_el0
    1960:	add	x0, x1, x0
    1964:	ldr	x1, [x0, #80]
    1968:	ldr	x1, [x1, #40]
    196c:	mov	w2, #0x1                   	// #1
    1970:	strb	w2, [x1, #50]
    1974:	ldr	x0, [x0, #24]
    1978:	str	x20, [x0, #88]
    197c:	adrp	x0, 0 <gomp_tls_data>
    1980:	ldr	x0, [x0]
    1984:	mrs	x1, tpidr_el0
    1988:	add	x0, x1, x0
    198c:	ldr	x0, [x0, #32]
    1990:	cbz	x0, 19c0 <GOMP_loop_ull_doacross_start+0x148>
    1994:	add	x0, x0, #0x50
    1998:	adrp	x1, 0 <gomp_tls_data>
    199c:	ldr	x1, [x1]
    19a0:	mrs	x2, tpidr_el0
    19a4:	add	x1, x2, x1
    19a8:	ldr	x2, [x1, #24]
    19ac:	ldxr	x1, [x0]
    19b0:	stlxr	w3, x2, [x0]
    19b4:	cbnz	w3, 19ac <GOMP_loop_ull_doacross_start+0x134>
    19b8:	cmp	x1, #0x1
    19bc:	b.ne	1a50 <GOMP_loop_ull_doacross_start+0x1d8>  // b.any
    19c0:	cbz	x19, 19e4 <GOMP_loop_ull_doacross_start+0x16c>
    19c4:	adrp	x0, 0 <gomp_tls_data>
    19c8:	ldr	x0, [x0]
    19cc:	mrs	x1, tpidr_el0
    19d0:	add	x0, x1, x0
    19d4:	ldr	x0, [x0, #24]
    19d8:	ldr	x0, [x0, #32]
    19dc:	ldr	x0, [x0, #48]
    19e0:	str	x0, [x19]
    19e4:	mov	x1, x22
    19e8:	mov	x0, x21
    19ec:	bl	14c8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
    19f0:	ldp	x19, x20, [sp, #16]
    19f4:	ldp	x21, x22, [sp, #32]
    19f8:	ldp	x23, x24, [sp, #48]
    19fc:	ldp	x25, x26, [sp, #64]
    1a00:	ldp	x29, x30, [sp], #96
    1a04:	ret
    1a08:	adrp	x0, 0 <gomp_tls_data>
    1a0c:	ldr	x0, [x0]
    1a10:	mrs	x4, tpidr_el0
    1a14:	add	x0, x4, x0
    1a18:	ldr	x4, [x0, #16]
    1a1c:	mov	x0, #0x1                   	// #1
    1a20:	cbz	x4, 1a28 <GOMP_loop_ull_doacross_start+0x1b0>
    1a24:	ldr	w0, [x4]
    1a28:	orr	x5, x0, x2
    1a2c:	mov	x4, #0x7fffffff            	// #2147483647
    1a30:	cmp	x5, x4
    1a34:	b.hi	1934 <GOMP_loop_ull_doacross_start+0xbc>  // b.pmore
    1a38:	madd	x2, x0, x2, x2
    1a3c:	mvn	x2, x2
    1a40:	cmp	x3, x2
    1a44:	cset	w0, cc  // cc = lo, ul, last
    1a48:	str	w0, [x1, #4]
    1a4c:	b	1934 <GOMP_loop_ull_doacross_start+0xbc>
    1a50:	bl	0 <gomp_ptrlock_set_slow>
    1a54:	b	19c0 <GOMP_loop_ull_doacross_start+0x148>
    1a58:	adrp	x0, 0 <gomp_tls_data>
    1a5c:	ldr	x0, [x0]
    1a60:	mrs	x1, tpidr_el0
    1a64:	add	x0, x1, x0
    1a68:	ldr	x0, [x0, #24]
    1a6c:	ldr	x1, [x0, #88]
    1a70:	mov	x0, x20
    1a74:	bl	0 <gomp_workshare_task_reduction_register>
    1a78:	b	19c0 <GOMP_loop_ull_doacross_start+0x148>
    1a7c:	mov	x0, #0x0                   	// #0
    1a80:	bl	0 <gomp_work_share_start>
    1a84:	and	w0, w0, #0xff
    1a88:	cbnz	w0, 18dc <GOMP_loop_ull_doacross_start+0x64>
    1a8c:	b	19c0 <GOMP_loop_ull_doacross_start+0x148>

0000000000001a90 <GOMP_loop_ull_ordered_static_next>:
    1a90:	stp	x29, x30, [sp, #-32]!
    1a94:	mov	x29, sp
    1a98:	stp	x19, x20, [sp, #16]
    1a9c:	mov	x19, x0
    1aa0:	mov	x20, x1
    1aa4:	bl	0 <gomp_ordered_sync>
    1aa8:	adrp	x0, 0 <gomp_tls_data>
    1aac:	ldr	x0, [x0]
    1ab0:	mrs	x1, tpidr_el0
    1ab4:	add	x0, x1, x0
    1ab8:	ldr	x2, [x0, #24]
    1abc:	add	x2, x2, #0x40
    1ac0:	mov	w0, #0x1                   	// #1
    1ac4:	ldaxr	w1, [x2]
    1ac8:	cbnz	w1, 1ad4 <GOMP_loop_ull_ordered_static_next+0x44>
    1acc:	stxr	w3, w0, [x2]
    1ad0:	cbnz	w3, 1ac4 <GOMP_loop_ull_ordered_static_next+0x34>
    1ad4:	cmp	w1, #0x0
    1ad8:	b.ne	1b2c <GOMP_loop_ull_ordered_static_next+0x9c>  // b.any
    1adc:	mov	x1, x20
    1ae0:	mov	x0, x19
    1ae4:	bl	0 <gomp_iter_ull_static_next>
    1ae8:	mov	w19, w0
    1aec:	tbz	w0, #31, 1b38 <GOMP_loop_ull_ordered_static_next+0xa8>
    1af0:	adrp	x0, 0 <gomp_tls_data>
    1af4:	ldr	x0, [x0]
    1af8:	mrs	x1, tpidr_el0
    1afc:	add	x0, x1, x0
    1b00:	ldr	x1, [x0, #24]
    1b04:	add	x1, x1, #0x40
    1b08:	ldxr	w0, [x1]
    1b0c:	stlxr	w2, wzr, [x1]
    1b10:	cbnz	w2, 1b08 <GOMP_loop_ull_ordered_static_next+0x78>
    1b14:	tbnz	w0, #31, 1b40 <GOMP_loop_ull_ordered_static_next+0xb0>
    1b18:	cmp	w19, #0x0
    1b1c:	cset	w0, eq  // eq = none
    1b20:	ldp	x19, x20, [sp, #16]
    1b24:	ldp	x29, x30, [sp], #32
    1b28:	ret
    1b2c:	mov	x0, x2
    1b30:	bl	0 <gomp_mutex_lock_slow>
    1b34:	b	1adc <GOMP_loop_ull_ordered_static_next+0x4c>
    1b38:	bl	0 <gomp_ordered_static_next>
    1b3c:	b	1af0 <GOMP_loop_ull_ordered_static_next+0x60>
    1b40:	mov	x0, x1
    1b44:	bl	0 <gomp_mutex_unlock_slow>
    1b48:	b	1b18 <GOMP_loop_ull_ordered_static_next+0x88>

0000000000001b4c <GOMP_loop_ull_ordered_dynamic_next>:
    1b4c:	stp	x29, x30, [sp, #-32]!
    1b50:	mov	x29, sp
    1b54:	stp	x19, x20, [sp, #16]
    1b58:	mov	x19, x0
    1b5c:	mov	x20, x1
    1b60:	bl	0 <gomp_ordered_sync>
    1b64:	adrp	x0, 0 <gomp_tls_data>
    1b68:	ldr	x0, [x0]
    1b6c:	mrs	x1, tpidr_el0
    1b70:	add	x0, x1, x0
    1b74:	ldr	x2, [x0, #24]
    1b78:	add	x2, x2, #0x40
    1b7c:	mov	w0, #0x1                   	// #1
    1b80:	ldaxr	w1, [x2]
    1b84:	cbnz	w1, 1b90 <GOMP_loop_ull_ordered_dynamic_next+0x44>
    1b88:	stxr	w3, w0, [x2]
    1b8c:	cbnz	w3, 1b80 <GOMP_loop_ull_ordered_dynamic_next+0x34>
    1b90:	cmp	w1, #0x0
    1b94:	b.ne	1bec <GOMP_loop_ull_ordered_dynamic_next+0xa0>  // b.any
    1b98:	mov	x1, x20
    1b9c:	mov	x0, x19
    1ba0:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    1ba4:	mov	w19, w0
    1ba8:	tst	w0, #0xff
    1bac:	b.eq	1bf8 <GOMP_loop_ull_ordered_dynamic_next+0xac>  // b.none
    1bb0:	bl	0 <gomp_ordered_next>
    1bb4:	adrp	x0, 0 <gomp_tls_data>
    1bb8:	ldr	x0, [x0]
    1bbc:	mrs	x1, tpidr_el0
    1bc0:	add	x0, x1, x0
    1bc4:	ldr	x0, [x0, #24]
    1bc8:	add	x0, x0, #0x40
    1bcc:	ldxr	w1, [x0]
    1bd0:	stlxr	w2, wzr, [x0]
    1bd4:	cbnz	w2, 1bcc <GOMP_loop_ull_ordered_dynamic_next+0x80>
    1bd8:	tbnz	w1, #31, 1c00 <GOMP_loop_ull_ordered_dynamic_next+0xb4>
    1bdc:	mov	w0, w19
    1be0:	ldp	x19, x20, [sp, #16]
    1be4:	ldp	x29, x30, [sp], #32
    1be8:	ret
    1bec:	mov	x0, x2
    1bf0:	bl	0 <gomp_mutex_lock_slow>
    1bf4:	b	1b98 <GOMP_loop_ull_ordered_dynamic_next+0x4c>
    1bf8:	bl	0 <gomp_ordered_last>
    1bfc:	b	1bb4 <GOMP_loop_ull_ordered_dynamic_next+0x68>
    1c00:	bl	0 <gomp_mutex_unlock_slow>
    1c04:	b	1bdc <GOMP_loop_ull_ordered_dynamic_next+0x90>

0000000000001c08 <GOMP_loop_ull_ordered_guided_next>:
    1c08:	stp	x29, x30, [sp, #-32]!
    1c0c:	mov	x29, sp
    1c10:	stp	x19, x20, [sp, #16]
    1c14:	mov	x19, x0
    1c18:	mov	x20, x1
    1c1c:	bl	0 <gomp_ordered_sync>
    1c20:	adrp	x0, 0 <gomp_tls_data>
    1c24:	ldr	x0, [x0]
    1c28:	mrs	x1, tpidr_el0
    1c2c:	add	x0, x1, x0
    1c30:	ldr	x2, [x0, #24]
    1c34:	add	x2, x2, #0x40
    1c38:	mov	w0, #0x1                   	// #1
    1c3c:	ldaxr	w1, [x2]
    1c40:	cbnz	w1, 1c4c <GOMP_loop_ull_ordered_guided_next+0x44>
    1c44:	stxr	w3, w0, [x2]
    1c48:	cbnz	w3, 1c3c <GOMP_loop_ull_ordered_guided_next+0x34>
    1c4c:	cmp	w1, #0x0
    1c50:	b.ne	1ca8 <GOMP_loop_ull_ordered_guided_next+0xa0>  // b.any
    1c54:	mov	x1, x20
    1c58:	mov	x0, x19
    1c5c:	bl	0 <gomp_iter_ull_guided_next_locked>
    1c60:	mov	w19, w0
    1c64:	tst	w0, #0xff
    1c68:	b.eq	1cb4 <GOMP_loop_ull_ordered_guided_next+0xac>  // b.none
    1c6c:	bl	0 <gomp_ordered_next>
    1c70:	adrp	x0, 0 <gomp_tls_data>
    1c74:	ldr	x0, [x0]
    1c78:	mrs	x1, tpidr_el0
    1c7c:	add	x0, x1, x0
    1c80:	ldr	x0, [x0, #24]
    1c84:	add	x0, x0, #0x40
    1c88:	ldxr	w1, [x0]
    1c8c:	stlxr	w2, wzr, [x0]
    1c90:	cbnz	w2, 1c88 <GOMP_loop_ull_ordered_guided_next+0x80>
    1c94:	tbnz	w1, #31, 1cbc <GOMP_loop_ull_ordered_guided_next+0xb4>
    1c98:	mov	w0, w19
    1c9c:	ldp	x19, x20, [sp, #16]
    1ca0:	ldp	x29, x30, [sp], #32
    1ca4:	ret
    1ca8:	mov	x0, x2
    1cac:	bl	0 <gomp_mutex_lock_slow>
    1cb0:	b	1c54 <GOMP_loop_ull_ordered_guided_next+0x4c>
    1cb4:	bl	0 <gomp_ordered_last>
    1cb8:	b	1c70 <GOMP_loop_ull_ordered_guided_next+0x68>
    1cbc:	bl	0 <gomp_mutex_unlock_slow>
    1cc0:	b	1c98 <GOMP_loop_ull_ordered_guided_next+0x90>

0000000000001cc4 <GOMP_loop_ull_ordered_runtime_next>:
    1cc4:	stp	x29, x30, [sp, #-16]!
    1cc8:	mov	x29, sp
    1ccc:	adrp	x2, 0 <gomp_tls_data>
    1cd0:	ldr	x2, [x2]
    1cd4:	mrs	x3, tpidr_el0
    1cd8:	add	x2, x3, x2
    1cdc:	ldr	x2, [x2, #24]
    1ce0:	ldr	w2, [x2]
    1ce4:	cmp	w2, #0x2
    1ce8:	b.eq	1d28 <GOMP_loop_ull_ordered_runtime_next+0x64>  // b.none
    1cec:	b.ls	1d04 <GOMP_loop_ull_ordered_runtime_next+0x40>  // b.plast
    1cf0:	cmp	w2, #0x3
    1cf4:	b.ne	1d1c <GOMP_loop_ull_ordered_runtime_next+0x58>  // b.any
    1cf8:	bl	1c08 <GOMP_loop_ull_ordered_guided_next>
    1cfc:	and	w0, w0, #0xff
    1d00:	b	1d14 <GOMP_loop_ull_ordered_runtime_next+0x50>
    1d04:	cmp	w2, #0x1
    1d08:	b.ne	1d24 <GOMP_loop_ull_ordered_runtime_next+0x60>  // b.any
    1d0c:	bl	1a90 <GOMP_loop_ull_ordered_static_next>
    1d10:	and	w0, w0, #0xff
    1d14:	ldp	x29, x30, [sp], #16
    1d18:	ret
    1d1c:	cmp	w2, #0x4
    1d20:	b.eq	1d0c <GOMP_loop_ull_ordered_runtime_next+0x48>  // b.none
    1d24:	bl	0 <abort>
    1d28:	bl	1b4c <GOMP_loop_ull_ordered_dynamic_next>
    1d2c:	and	w0, w0, #0xff
    1d30:	b	1d14 <GOMP_loop_ull_ordered_runtime_next+0x50>

ordered.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ordered_first>:
       0:	adrp	x0, 0 <gomp_tls_data>
       4:	ldr	x0, [x0]
       8:	mrs	x1, tpidr_el0
       c:	add	x0, x1, x0
      10:	ldr	x2, [x0, #16]
      14:	cbz	x2, 78 <gomp_ordered_first+0x78>
      18:	ldr	w3, [x2]
      1c:	cmp	w3, #0x1
      20:	b.eq	78 <gomp_ordered_first+0x78>  // b.none
      24:	adrp	x0, 0 <gomp_tls_data>
      28:	ldr	x0, [x0]
      2c:	add	x0, x1, x0
      30:	ldr	x0, [x0, #24]
      34:	ldr	w1, [x0, #48]
      38:	ldr	w4, [x0, #40]
      3c:	add	w1, w1, w4
      40:	sub	w4, w1, w3
      44:	cmp	w3, w1
      48:	adrp	x3, 0 <gomp_tls_data>
      4c:	ldr	x3, [x3]
      50:	mrs	x5, tpidr_el0
      54:	add	x3, x5, x3
      58:	ldr	w5, [x3, #40]
      5c:	csel	w1, w4, w1, ls  // ls = plast
      60:	ldr	x3, [x0, #32]
      64:	str	w5, [x3, x1, lsl #2]
      68:	ldr	w1, [x0, #40]
      6c:	add	w3, w1, #0x1
      70:	str	w3, [x0, #40]
      74:	cbz	w1, 7c <gomp_ordered_first+0x7c>
      78:	ret
      7c:	adrp	x0, 0 <gomp_tls_data>
      80:	ldr	x0, [x0]
      84:	mrs	x1, tpidr_el0
      88:	add	x0, x1, x0
      8c:	ldr	w1, [x0, #40]
      90:	ldr	x0, [x2, #80]
      94:	ldr	x0, [x0, x1, lsl #3]
      98:	ldr	w1, [x0]
      9c:	add	w2, w1, #0x1
      a0:	and	w2, w2, #0x7fffffff
      a4:	ldxr	w3, [x0]
      a8:	cmp	w3, w1
      ac:	b.ne	b8 <gomp_ordered_first+0xb8>  // b.any
      b0:	stlxr	w4, w2, [x0]
      b4:	cmp	w4, #0x0
      b8:	mov	w1, w3
      bc:	b.ne	9c <gomp_ordered_first+0x9c>  // b.any
      c0:	tbz	w3, #31, 78 <gomp_ordered_first+0x78>
      c4:	stp	x29, x30, [sp, #-16]!
      c8:	mov	x29, sp
      cc:	bl	0 <gomp_sem_post_slow>
      d0:	ldp	x29, x30, [sp], #16
      d4:	ret

00000000000000d8 <gomp_ordered_last>:
      d8:	adrp	x0, 0 <gomp_tls_data>
      dc:	ldr	x0, [x0]
      e0:	mrs	x1, tpidr_el0
      e4:	add	x0, x1, x0
      e8:	ldr	x1, [x0, #16]
      ec:	cbz	x1, 17c <gomp_ordered_last+0xa4>
      f0:	ldr	w0, [x1]
      f4:	cmp	w0, #0x1
      f8:	b.eq	17c <gomp_ordered_last+0xa4>  // b.none
      fc:	adrp	x0, 0 <gomp_tls_data>
     100:	ldr	x0, [x0]
     104:	mrs	x2, tpidr_el0
     108:	add	x0, x2, x0
     10c:	ldr	x0, [x0, #24]
     110:	mov	w2, #0xffffffff            	// #-1
     114:	str	w2, [x0, #44]
     118:	ldr	w2, [x0, #40]
     11c:	sub	w2, w2, #0x1
     120:	str	w2, [x0, #40]
     124:	cbz	w2, 17c <gomp_ordered_last+0xa4>
     128:	ldr	w2, [x0, #48]
     12c:	add	w2, w2, #0x1
     130:	ldr	w3, [x1]
     134:	cmp	w3, w2
     138:	csel	w2, w2, wzr, ne  // ne = any
     13c:	str	w2, [x0, #48]
     140:	ldr	x0, [x0, #32]
     144:	ldr	w2, [x0, w2, uxtw #2]
     148:	ldr	x0, [x1, #80]
     14c:	ldr	x0, [x0, x2, lsl #3]
     150:	ldr	w1, [x0]
     154:	add	w2, w1, #0x1
     158:	and	w2, w2, #0x7fffffff
     15c:	ldxr	w3, [x0]
     160:	cmp	w3, w1
     164:	b.ne	170 <gomp_ordered_last+0x98>  // b.any
     168:	stlxr	w4, w2, [x0]
     16c:	cmp	w4, #0x0
     170:	mov	w1, w3
     174:	b.ne	154 <gomp_ordered_last+0x7c>  // b.any
     178:	tbnz	w3, #31, 180 <gomp_ordered_last+0xa8>
     17c:	ret
     180:	stp	x29, x30, [sp, #-16]!
     184:	mov	x29, sp
     188:	bl	0 <gomp_sem_post_slow>
     18c:	ldp	x29, x30, [sp], #16
     190:	ret

0000000000000194 <gomp_ordered_next>:
     194:	adrp	x0, 0 <gomp_tls_data>
     198:	ldr	x0, [x0]
     19c:	mrs	x1, tpidr_el0
     1a0:	add	x0, x1, x0
     1a4:	ldr	x0, [x0, #16]
     1a8:	cbz	x0, 2d8 <gomp_ordered_next+0x144>
     1ac:	ldr	w1, [x0]
     1b0:	cmp	w1, #0x1
     1b4:	b.eq	2d8 <gomp_ordered_next+0x144>  // b.none
     1b8:	stp	x29, x30, [sp, #-16]!
     1bc:	mov	x29, sp
     1c0:	adrp	x1, 0 <gomp_tls_data>
     1c4:	ldr	x1, [x1]
     1c8:	mrs	x2, tpidr_el0
     1cc:	add	x1, x2, x1
     1d0:	ldr	x2, [x1, #24]
     1d4:	mov	w1, #0xffffffff            	// #-1
     1d8:	str	w1, [x2, #44]
     1dc:	ldr	w1, [x2, #40]
     1e0:	cmp	w1, #0x1
     1e4:	b.eq	280 <gomp_ordered_next+0xec>  // b.none
     1e8:	ldr	w3, [x0]
     1ec:	cmp	w1, w3
     1f0:	b.cs	224 <gomp_ordered_next+0x90>  // b.hs, b.nlast
     1f4:	ldr	w4, [x2, #48]
     1f8:	add	w1, w1, w4
     1fc:	sub	w4, w1, w3
     200:	cmp	w3, w1
     204:	adrp	x3, 0 <gomp_tls_data>
     208:	ldr	x3, [x3]
     20c:	mrs	x5, tpidr_el0
     210:	add	x3, x5, x3
     214:	ldr	w5, [x3, #40]
     218:	csel	w1, w4, w1, ls  // ls = plast
     21c:	ldr	x3, [x2, #32]
     220:	str	w5, [x3, x1, lsl #2]
     224:	ldr	w1, [x2, #48]
     228:	add	w1, w1, #0x1
     22c:	ldr	w3, [x0]
     230:	cmp	w3, w1
     234:	csel	w1, w1, wzr, ne  // ne = any
     238:	str	w1, [x2, #48]
     23c:	ldr	x2, [x2, #32]
     240:	ldr	w1, [x2, w1, uxtw #2]
     244:	ldr	x0, [x0, #80]
     248:	ldr	x0, [x0, x1, lsl #3]
     24c:	ldr	w1, [x0]
     250:	add	w2, w1, #0x1
     254:	and	w2, w2, #0x7fffffff
     258:	ldxr	w3, [x0]
     25c:	cmp	w3, w1
     260:	b.ne	26c <gomp_ordered_next+0xd8>  // b.any
     264:	stlxr	w4, w2, [x0]
     268:	cmp	w4, #0x0
     26c:	mov	w1, w3
     270:	b.ne	250 <gomp_ordered_next+0xbc>  // b.any
     274:	tbnz	w3, #31, 2d0 <gomp_ordered_next+0x13c>
     278:	ldp	x29, x30, [sp], #16
     27c:	ret
     280:	adrp	x1, 0 <gomp_tls_data>
     284:	ldr	x1, [x1]
     288:	mrs	x2, tpidr_el0
     28c:	add	x1, x2, x1
     290:	ldr	w1, [x1, #40]
     294:	ldr	x0, [x0, #80]
     298:	ldr	x0, [x0, x1, lsl #3]
     29c:	ldr	w1, [x0]
     2a0:	add	w2, w1, #0x1
     2a4:	and	w2, w2, #0x7fffffff
     2a8:	ldxr	w3, [x0]
     2ac:	cmp	w3, w1
     2b0:	b.ne	2bc <gomp_ordered_next+0x128>  // b.any
     2b4:	stlxr	w4, w2, [x0]
     2b8:	cmp	w4, #0x0
     2bc:	mov	w1, w3
     2c0:	b.ne	2a0 <gomp_ordered_next+0x10c>  // b.any
     2c4:	tbz	w3, #31, 278 <gomp_ordered_next+0xe4>
     2c8:	bl	0 <gomp_sem_post_slow>
     2cc:	b	278 <gomp_ordered_next+0xe4>
     2d0:	bl	0 <gomp_sem_post_slow>
     2d4:	b	278 <gomp_ordered_next+0xe4>
     2d8:	ret

00000000000002dc <gomp_ordered_static_init>:
     2dc:	adrp	x0, 0 <gomp_tls_data>
     2e0:	ldr	x0, [x0]
     2e4:	mrs	x1, tpidr_el0
     2e8:	add	x0, x1, x0
     2ec:	ldr	x0, [x0, #16]
     2f0:	cbz	x0, 334 <gomp_ordered_static_init+0x58>
     2f4:	ldr	w1, [x0]
     2f8:	cmp	w1, #0x1
     2fc:	b.eq	334 <gomp_ordered_static_init+0x58>  // b.none
     300:	ldr	x0, [x0, #80]
     304:	ldr	x0, [x0]
     308:	ldr	w1, [x0]
     30c:	add	w2, w1, #0x1
     310:	and	w2, w2, #0x7fffffff
     314:	ldxr	w3, [x0]
     318:	cmp	w3, w1
     31c:	b.ne	328 <gomp_ordered_static_init+0x4c>  // b.any
     320:	stlxr	w4, w2, [x0]
     324:	cmp	w4, #0x0
     328:	mov	w1, w3
     32c:	b.ne	30c <gomp_ordered_static_init+0x30>  // b.any
     330:	tbnz	w3, #31, 338 <gomp_ordered_static_init+0x5c>
     334:	ret
     338:	stp	x29, x30, [sp, #-16]!
     33c:	mov	x29, sp
     340:	bl	0 <gomp_sem_post_slow>
     344:	ldp	x29, x30, [sp], #16
     348:	ret

000000000000034c <gomp_ordered_static_next>:
     34c:	adrp	x0, 0 <gomp_tls_data>
     350:	ldr	x0, [x0]
     354:	mrs	x1, tpidr_el0
     358:	add	x0, x1, x0
     35c:	ldr	x1, [x0, #16]
     360:	cbz	x1, 3dc <gomp_ordered_static_next+0x90>
     364:	ldr	w0, [x1]
     368:	cmp	w0, #0x1
     36c:	b.eq	3dc <gomp_ordered_static_next+0x90>  // b.none
     370:	adrp	x0, 0 <gomp_tls_data>
     374:	ldr	x0, [x0]
     378:	mrs	x2, tpidr_el0
     37c:	add	x0, x2, x0
     380:	ldr	x2, [x0, #24]
     384:	ldr	w0, [x0, #40]
     388:	mov	w3, #0xffffffff            	// #-1
     38c:	str	w3, [x2, #44]
     390:	add	w0, w0, #0x1
     394:	ldr	w3, [x1]
     398:	cmp	w3, w0
     39c:	csel	w0, w0, wzr, ne  // ne = any
     3a0:	ldr	x2, [x2, #32]
     3a4:	str	w0, [x2]
     3a8:	ldr	x1, [x1, #80]
     3ac:	ldr	x0, [x1, w0, uxtw #3]
     3b0:	ldr	w1, [x0]
     3b4:	add	w2, w1, #0x1
     3b8:	and	w2, w2, #0x7fffffff
     3bc:	ldxr	w3, [x0]
     3c0:	cmp	w3, w1
     3c4:	b.ne	3d0 <gomp_ordered_static_next+0x84>  // b.any
     3c8:	stlxr	w4, w2, [x0]
     3cc:	cmp	w4, #0x0
     3d0:	mov	w1, w3
     3d4:	b.ne	3b4 <gomp_ordered_static_next+0x68>  // b.any
     3d8:	tbnz	w3, #31, 3e0 <gomp_ordered_static_next+0x94>
     3dc:	ret
     3e0:	stp	x29, x30, [sp, #-16]!
     3e4:	mov	x29, sp
     3e8:	bl	0 <gomp_sem_post_slow>
     3ec:	ldp	x29, x30, [sp], #16
     3f0:	ret

00000000000003f4 <GOMP_ordered_start>:
     3f4:	adrp	x0, 0 <gomp_tls_data>
     3f8:	ldr	x0, [x0]
     3fc:	mrs	x1, tpidr_el0
     400:	add	x0, x1, x0
     404:	ldr	x0, [x0, #16]
     408:	cbz	x0, 4b0 <GOMP_ordered_start+0xbc>
     40c:	ldr	w1, [x0]
     410:	cmp	w1, #0x1
     414:	b.eq	4b0 <GOMP_ordered_start+0xbc>  // b.none
     418:	stp	x29, x30, [sp, #-32]!
     41c:	mov	x29, sp
     420:	str	x19, [sp, #16]
     424:	adrp	x1, 0 <gomp_tls_data>
     428:	ldr	x1, [x1]
     42c:	mrs	x2, tpidr_el0
     430:	add	x1, x2, x1
     434:	ldr	x19, [x1, #24]
     438:	dmb	ish
     43c:	ldr	w1, [x1, #40]
     440:	ldr	w2, [x19, #44]
     444:	cmp	w2, w1
     448:	b.ne	458 <GOMP_ordered_start+0x64>  // b.any
     44c:	ldr	x19, [sp, #16]
     450:	ldp	x29, x30, [sp], #32
     454:	ret
     458:	ldr	x0, [x0, #80]
     45c:	ldr	x0, [x0, w1, uxtw #3]
     460:	ldr	w1, [x0]
     464:	tst	x1, #0x7fffffff
     468:	b.eq	4a8 <GOMP_ordered_start+0xb4>  // b.none
     46c:	sub	w3, w1, #0x1
     470:	ldaxr	w2, [x0]
     474:	cmp	w2, w1
     478:	b.ne	484 <GOMP_ordered_start+0x90>  // b.any
     47c:	stxr	w4, w3, [x0]
     480:	cmp	w4, #0x0
     484:	mov	w1, w2
     488:	b.ne	464 <GOMP_ordered_start+0x70>  // b.any
     48c:	adrp	x0, 0 <gomp_tls_data>
     490:	ldr	x0, [x0]
     494:	mrs	x1, tpidr_el0
     498:	add	x0, x1, x0
     49c:	ldr	w0, [x0, #40]
     4a0:	str	w0, [x19, #44]
     4a4:	b	44c <GOMP_ordered_start+0x58>
     4a8:	bl	0 <gomp_sem_wait_slow>
     4ac:	b	48c <GOMP_ordered_start+0x98>
     4b0:	ret

00000000000004b4 <GOMP_ordered_end>:
     4b4:	ret

00000000000004b8 <gomp_doacross_init>:
     4b8:	stp	x29, x30, [sp, #-368]!
     4bc:	mov	x29, sp
     4c0:	stp	x21, x22, [sp, #32]
     4c4:	stp	x23, x24, [sp, #48]
     4c8:	stp	x25, x26, [sp, #64]
     4cc:	stp	x27, x28, [sp, #80]
     4d0:	mov	x21, x1
     4d4:	mov	x26, x2
     4d8:	mov	x24, x3
     4dc:	adrp	x1, 0 <gomp_tls_data>
     4e0:	ldr	x1, [x1]
     4e4:	mrs	x2, tpidr_el0
     4e8:	add	x1, x2, x1
     4ec:	ldr	x2, [x1, #16]
     4f0:	ldr	x28, [x1, #24]
     4f4:	cbz	x2, 5fc <gomp_doacross_init+0x144>
     4f8:	stp	x19, x20, [sp, #16]
     4fc:	mov	w20, w0
     500:	add	x0, x3, #0x77
     504:	ldr	w23, [x2]
     508:	cmp	w23, #0x1
     50c:	b.eq	5f0 <gomp_doacross_init+0x138>  // b.none
     510:	mov	x1, #0x0                   	// #0
     514:	mov	w19, #0x0                   	// #0
     518:	cbz	w20, 52c <gomp_doacross_init+0x74>
     51c:	mov	w5, #0x1                   	// #1
     520:	mov	w4, #0x40                  	// #64
     524:	add	x6, sp, #0x70
     528:	b	644 <gomp_doacross_init+0x18c>
     52c:	mov	w19, w20
     530:	ldr	w1, [x28]
     534:	mov	w23, w23
     538:	cmp	w1, #0x1
     53c:	b.eq	558 <gomp_doacross_init+0xa0>  // b.none
     540:	cmp	w1, #0x3
     544:	b.eq	67c <gomp_doacross_init+0x1c4>  // b.none
     548:	ldr	x23, [x21]
     54c:	sub	x23, x23, #0x1
     550:	sdiv	x23, x23, x26
     554:	add	x23, x23, #0x1
     558:	cmp	w19, #0x40
     55c:	b.hi	684 <gomp_doacross_init+0x1cc>  // b.pmore
     560:	ubfiz	x27, x20, #2, #32
     564:	mov	x25, #0x8                   	// #8
     568:	add	x25, x25, #0x3f
     56c:	and	x25, x25, #0xffffffffffffffc0
     570:	mul	x1, x23, x25
     574:	str	x1, [sp, #104]
     578:	add	x1, x1, x27
     57c:	add	x0, x1, x0
     580:	bl	0 <gomp_malloc>
     584:	mov	x22, x0
     588:	str	x26, [x0]
     58c:	str	x25, [x0, #8]
     590:	str	w20, [x0, #16]
     594:	strb	wzr, [x0, #20]
     598:	add	x0, x27, #0x77
     59c:	add	x0, x22, x0
     5a0:	and	x0, x0, #0xffffffffffffffc0
     5a4:	str	x0, [x22, #24]
     5a8:	cbnz	x24, 690 <gomp_doacross_init+0x1d8>
     5ac:	str	xzr, [x22, #48]
     5b0:	cmp	w19, #0x40
     5b4:	b.ls	6ac <gomp_doacross_init+0x1f4>  // b.plast
     5b8:	ubfiz	x20, x20, #3, #32
     5bc:	mov	x24, #0x0                   	// #0
     5c0:	mov	x19, #0x0                   	// #0
     5c4:	cbz	x23, 71c <gomp_doacross_init+0x264>
     5c8:	ldr	x0, [x22, #24]
     5cc:	mov	x2, x20
     5d0:	mov	w1, #0x0                   	// #0
     5d4:	add	x0, x0, x24
     5d8:	bl	0 <memset>
     5dc:	add	x19, x19, #0x1
     5e0:	add	x24, x24, x25
     5e4:	cmp	x23, x19
     5e8:	b.ne	5c8 <gomp_doacross_init+0x110>  // b.any
     5ec:	b	71c <gomp_doacross_init+0x264>
     5f0:	ldp	x19, x20, [sp, #16]
     5f4:	b	5fc <gomp_doacross_init+0x144>
     5f8:	ldp	x19, x20, [sp, #16]
     5fc:	cbnz	x24, 61c <gomp_doacross_init+0x164>
     600:	str	xzr, [x28, #32]
     604:	ldp	x21, x22, [sp, #32]
     608:	ldp	x23, x24, [sp, #48]
     60c:	ldp	x25, x26, [sp, #64]
     610:	ldp	x27, x28, [sp, #80]
     614:	ldp	x29, x30, [sp], #368
     618:	ret
     61c:	add	x0, x24, #0x38
     620:	bl	0 <gomp_malloc_cleared>
     624:	add	x1, x0, #0x38
     628:	str	x1, [x0, #48]
     62c:	str	x0, [x28, #32]
     630:	b	604 <gomp_doacross_init+0x14c>
     634:	mov	w19, #0x41                  	// #65
     638:	add	x1, x1, #0x1
     63c:	cmp	w20, w1
     640:	b.ls	530 <gomp_doacross_init+0x78>  // b.plast
     644:	ldr	x3, [x21, x1, lsl #3]
     648:	cbz	x3, 5f8 <gomp_doacross_init+0x140>
     64c:	cmp	w19, #0x40
     650:	b.hi	638 <gomp_doacross_init+0x180>  // b.pmore
     654:	sub	x2, x3, #0x1
     658:	clz	x2, x2
     65c:	sub	w2, w4, w2
     660:	cmp	x3, #0x1
     664:	csel	w2, w2, w5, ne  // ne = any
     668:	add	w19, w19, w2
     66c:	cmp	w19, #0x40
     670:	b.hi	634 <gomp_doacross_init+0x17c>  // b.pmore
     674:	str	w2, [x6, x1, lsl #2]
     678:	b	638 <gomp_doacross_init+0x180>
     67c:	ldr	x23, [x21]
     680:	b	558 <gomp_doacross_init+0xa0>
     684:	ubfiz	x25, x20, #3, #32
     688:	mov	x27, #0x0                   	// #0
     68c:	b	568 <gomp_doacross_init+0xb0>
     690:	ldr	x1, [sp, #104]
     694:	add	x0, x0, x1
     698:	str	x0, [x22, #48]
     69c:	mov	x2, x24
     6a0:	mov	w1, #0x0                   	// #0
     6a4:	bl	0 <memset>
     6a8:	b	5b0 <gomp_doacross_init+0xf8>
     6ac:	mov	w0, #0x1                   	// #1
     6b0:	strb	w0, [x22, #20]
     6b4:	cbz	w20, 6f8 <gomp_doacross_init+0x240>
     6b8:	sub	w0, w20, #0x1
     6bc:	mvn	x5, x0
     6c0:	lsl	x5, x5, #2
     6c4:	lsl	x0, x0, #2
     6c8:	add	x4, x0, #0x38
     6cc:	add	x4, x22, x4
     6d0:	add	x1, sp, #0x70
     6d4:	add	x3, x1, x0
     6d8:	mov	x0, #0x0                   	// #0
     6dc:	mov	w1, #0x0                   	// #0
     6e0:	str	w1, [x4, x0]
     6e4:	ldr	w2, [x3, x0]
     6e8:	add	w1, w1, w2
     6ec:	sub	x0, x0, #0x4
     6f0:	cmp	x0, x5
     6f4:	b.ne	6e0 <gomp_doacross_init+0x228>  // b.any
     6f8:	cbz	x23, 71c <gomp_doacross_init+0x264>
     6fc:	mov	x1, #0x0                   	// #0
     700:	mov	x0, #0x0                   	// #0
     704:	ldr	x2, [x22, #24]
     708:	str	xzr, [x2, x1]
     70c:	add	x0, x0, #0x1
     710:	add	x1, x1, x25
     714:	cmp	x23, x0
     718:	b.ne	704 <gomp_doacross_init+0x24c>  // b.any
     71c:	ldr	w0, [x28]
     720:	cmp	x26, #0x0
     724:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     728:	b.eq	738 <gomp_doacross_init+0x280>  // b.none
     72c:	str	x22, [x28, #32]
     730:	ldp	x19, x20, [sp, #16]
     734:	b	604 <gomp_doacross_init+0x14c>
     738:	ldr	x1, [x21]
     73c:	udiv	x0, x1, x23
     740:	msub	x23, x0, x23, x1
     744:	madd	x1, x0, x23, x23
     748:	str	x1, [x22, #40]
     74c:	str	x0, [x22]
     750:	str	x23, [x22, #32]
     754:	b	72c <gomp_doacross_init+0x274>

0000000000000758 <GOMP_doacross_post>:
     758:	adrp	x1, 0 <gomp_tls_data>
     75c:	ldr	x1, [x1]
     760:	mrs	x2, tpidr_el0
     764:	add	x1, x2, x1
     768:	ldr	x1, [x1, #24]
     76c:	ldr	x2, [x1, #32]
     770:	cbz	x2, 800 <GOMP_doacross_post+0xa8>
     774:	ldr	x4, [x2, #24]
     778:	cbz	x4, 800 <GOMP_doacross_post+0xa8>
     77c:	ldr	w1, [x1]
     780:	cmp	w1, #0x1
     784:	b.ne	808 <GOMP_doacross_post+0xb0>  // b.any
     788:	adrp	x1, 0 <gomp_tls_data>
     78c:	ldr	x1, [x1]
     790:	mrs	x3, tpidr_el0
     794:	add	x1, x3, x1
     798:	ldr	w7, [x1, #40]
     79c:	ldr	x1, [x2, #8]
     7a0:	madd	x7, x7, x1, x4
     7a4:	ldrb	w1, [x2, #20]
     7a8:	cbz	w1, 830 <GOMP_doacross_post+0xd8>
     7ac:	ldr	w1, [x2, #56]
     7b0:	ldr	x3, [x0]
     7b4:	lsl	x3, x3, x1
     7b8:	ldr	w6, [x2, #16]
     7bc:	cmp	w6, #0x1
     7c0:	b.ls	7e8 <GOMP_doacross_post+0x90>  // b.plast
     7c4:	mov	x1, #0x1                   	// #1
     7c8:	add	x4, x2, #0x38
     7cc:	ldr	w5, [x4, x1, lsl #2]
     7d0:	ldr	x2, [x0, x1, lsl #3]
     7d4:	lsl	x2, x2, x5
     7d8:	orr	x3, x3, x2
     7dc:	add	x1, x1, #0x1
     7e0:	cmp	w6, w1
     7e4:	b.hi	7cc <GOMP_doacross_post+0x74>  // b.pmore
     7e8:	add	x3, x3, #0x1
     7ec:	ldar	x0, [x7]
     7f0:	cmp	x0, x3
     7f4:	b.eq	828 <GOMP_doacross_post+0xd0>  // b.none
     7f8:	stlr	x3, [x7]
     7fc:	ret
     800:	dmb	ish
     804:	b	7fc <GOMP_doacross_post+0xa4>
     808:	cmp	w1, #0x3
     80c:	b.eq	820 <GOMP_doacross_post+0xc8>  // b.none
     810:	ldr	x1, [x0]
     814:	ldr	x7, [x2]
     818:	sdiv	x7, x1, x7
     81c:	b	79c <GOMP_doacross_post+0x44>
     820:	ldr	x7, [x0]
     824:	b	79c <GOMP_doacross_post+0x44>
     828:	dmb	ish
     82c:	b	7fc <GOMP_doacross_post+0xa4>
     830:	dmb	ishld
     834:	ldr	w2, [x2, #16]
     838:	sub	w1, w2, #0x1
     83c:	cbz	w2, 7fc <GOMP_doacross_post+0xa4>
     840:	ubfiz	x1, x1, #3, #32
     844:	b	854 <GOMP_doacross_post+0xfc>
     848:	sub	x1, x1, #0x8
     84c:	cmn	x1, #0x8
     850:	b.eq	7fc <GOMP_doacross_post+0xa4>  // b.none
     854:	ldr	x2, [x0, x1]
     858:	add	x2, x2, #0x1
     85c:	add	x3, x7, x1
     860:	ldr	x4, [x3]
     864:	cmp	x2, x4
     868:	b.eq	848 <GOMP_doacross_post+0xf0>  // b.none
     86c:	ldr	x2, [x0, x1]
     870:	add	x2, x2, #0x1
     874:	stlr	x2, [x3]
     878:	b	848 <GOMP_doacross_post+0xf0>

000000000000087c <GOMP_doacross_wait>:
     87c:	sub	sp, sp, #0x60
     880:	str	x1, [sp, #40]
     884:	str	x2, [sp, #48]
     888:	str	x3, [sp, #56]
     88c:	str	x4, [sp, #64]
     890:	str	x5, [sp, #72]
     894:	str	x6, [sp, #80]
     898:	str	x7, [sp, #88]
     89c:	adrp	x1, 0 <gomp_tls_data>
     8a0:	ldr	x1, [x1]
     8a4:	mrs	x2, tpidr_el0
     8a8:	add	x1, x2, x1
     8ac:	ldr	x1, [x1, #24]
     8b0:	ldr	x5, [x1, #32]
     8b4:	cbz	x5, 8f0 <GOMP_doacross_wait+0x74>
     8b8:	ldr	x2, [x5, #24]
     8bc:	cbz	x2, 8f0 <GOMP_doacross_wait+0x74>
     8c0:	ldr	w3, [x1]
     8c4:	cmp	w3, #0x1
     8c8:	b.ne	990 <GOMP_doacross_wait+0x114>  // b.any
     8cc:	ldr	x1, [x1, #8]
     8d0:	cbnz	x1, 910 <GOMP_doacross_wait+0x94>
     8d4:	ldr	x1, [x5, #40]
     8d8:	cmp	x1, x0
     8dc:	b.le	8f8 <GOMP_doacross_wait+0x7c>
     8e0:	ldr	x6, [x5]
     8e4:	add	x6, x6, #0x1
     8e8:	sdiv	x6, x0, x6
     8ec:	b	934 <GOMP_doacross_wait+0xb8>
     8f0:	dmb	ish
     8f4:	b	a28 <GOMP_doacross_wait+0x1ac>
     8f8:	sub	x1, x0, x1
     8fc:	ldr	x6, [x5]
     900:	sdiv	x6, x1, x6
     904:	ldr	x1, [x5, #32]
     908:	add	x6, x6, x1
     90c:	b	934 <GOMP_doacross_wait+0xb8>
     910:	sdiv	x1, x0, x1
     914:	adrp	x3, 0 <gomp_tls_data>
     918:	ldr	x3, [x3]
     91c:	mrs	x4, tpidr_el0
     920:	add	x3, x4, x3
     924:	ldr	x3, [x3, #16]
     928:	ldr	w3, [x3]
     92c:	sdiv	x6, x1, x3
     930:	msub	x6, x6, x3, x1
     934:	ldr	x1, [x5, #8]
     938:	madd	x6, x6, x1, x2
     93c:	ldrb	w1, [x5, #20]
     940:	add	x8, sp, #0x20
     944:	mov	w7, #0xffffffc8            	// #-56
     948:	add	x3, x0, #0x1
     94c:	cbz	w1, ac0 <GOMP_doacross_wait+0x244>
     950:	ldr	w2, [x5, #56]
     954:	lsl	x2, x0, x2
     958:	add	x0, sp, #0x60
     95c:	str	x0, [sp]
     960:	str	x0, [sp, #8]
     964:	add	x0, sp, #0x20
     968:	str	x0, [sp, #16]
     96c:	mov	w0, #0xffffffc8            	// #-56
     970:	str	w0, [sp, #24]
     974:	str	wzr, [sp, #28]
     978:	ldr	w0, [x5, #16]
     97c:	cmp	w0, #0x1
     980:	b.ls	a0c <GOMP_doacross_wait+0x190>  // b.plast
     984:	ldr	x7, [sp, #8]
     988:	mov	w0, #0x1                   	// #1
     98c:	b	9e8 <GOMP_doacross_wait+0x16c>
     990:	mov	x6, x0
     994:	cmp	w3, #0x3
     998:	b.eq	934 <GOMP_doacross_wait+0xb8>  // b.none
     99c:	ldr	x1, [x5]
     9a0:	sdiv	x6, x0, x1
     9a4:	b	934 <GOMP_doacross_wait+0xb8>
     9a8:	add	w4, w1, #0x8
     9ac:	str	w4, [sp, #24]
     9b0:	cmp	w4, #0x0
     9b4:	b.le	a04 <GOMP_doacross_wait+0x188>
     9b8:	add	x1, x3, #0xf
     9bc:	and	x1, x1, #0xfffffffffffffff8
     9c0:	str	x1, [sp]
     9c4:	add	x1, x5, w0, uxtw #2
     9c8:	ldr	w4, [x1, #56]
     9cc:	ldr	x1, [x3]
     9d0:	lsl	x1, x1, x4
     9d4:	orr	x2, x2, x1
     9d8:	add	w0, w0, #0x1
     9dc:	ldr	w1, [x5, #16]
     9e0:	cmp	w1, w0
     9e4:	b.ls	a0c <GOMP_doacross_wait+0x190>  // b.plast
     9e8:	ldr	w1, [sp, #24]
     9ec:	ldr	x3, [sp]
     9f0:	tbnz	w1, #31, 9a8 <GOMP_doacross_wait+0x12c>
     9f4:	add	x1, x3, #0xf
     9f8:	and	x1, x1, #0xfffffffffffffff8
     9fc:	str	x1, [sp]
     a00:	b	9c4 <GOMP_doacross_wait+0x148>
     a04:	add	x3, x7, w1, sxtw
     a08:	b	9c4 <GOMP_doacross_wait+0x148>
     a0c:	ldar	x0, [x6]
     a10:	cmp	x2, x0
     a14:	b.cc	a30 <GOMP_doacross_wait+0x1b4>  // b.lo, b.ul, b.last
     a18:	ldr	x0, [x6]
     a1c:	cmp	x0, x2
     a20:	b.ls	a18 <GOMP_doacross_wait+0x19c>  // b.plast
     a24:	dmb	ish
     a28:	add	sp, sp, #0x60
     a2c:	ret
     a30:	dmb	ish
     a34:	b	a28 <GOMP_doacross_wait+0x1ac>
     a38:	add	w4, w2, #0x8
     a3c:	str	w4, [sp, #24]
     a40:	cmp	w4, #0x0
     a44:	b.le	aa4 <GOMP_doacross_wait+0x228>
     a48:	add	x2, x1, #0xf
     a4c:	and	x2, x2, #0xfffffffffffffff8
     a50:	str	x2, [sp]
     a54:	ldr	x1, [x1]
     a58:	add	x1, x1, #0x1
     a5c:	add	x2, x6, w0, uxtw #3
     a60:	ldr	x2, [x2]
     a64:	cmp	x1, x2
     a68:	b.cc	ab0 <GOMP_doacross_wait+0x234>  // b.lo, b.ul, b.last
     a6c:	b.hi	ab4 <GOMP_doacross_wait+0x238>  // b.pmore
     a70:	add	w0, w0, #0x1
     a74:	ldr	w1, [x5, #16]
     a78:	cmp	w1, w0
     a7c:	b.ls	ab4 <GOMP_doacross_wait+0x238>  // b.plast
     a80:	mov	x1, x3
     a84:	cbz	w0, a5c <GOMP_doacross_wait+0x1e0>
     a88:	ldr	w2, [sp, #24]
     a8c:	ldr	x1, [sp]
     a90:	tbnz	w2, #31, a38 <GOMP_doacross_wait+0x1bc>
     a94:	add	x2, x1, #0xf
     a98:	and	x2, x2, #0xfffffffffffffff8
     a9c:	str	x2, [sp]
     aa0:	b	a54 <GOMP_doacross_wait+0x1d8>
     aa4:	ldr	x1, [sp, #8]
     aa8:	add	x1, x1, w2, sxtw
     aac:	b	a54 <GOMP_doacross_wait+0x1d8>
     ab0:	ldr	w0, [x5, #16]
     ab4:	ldr	w1, [x5, #16]
     ab8:	cmp	w1, w0
     abc:	b.eq	ae8 <GOMP_doacross_wait+0x26c>  // b.none
     ac0:	add	x0, sp, #0x60
     ac4:	str	x0, [sp]
     ac8:	str	x0, [sp, #8]
     acc:	str	x8, [sp, #16]
     ad0:	str	w7, [sp, #24]
     ad4:	str	wzr, [sp, #28]
     ad8:	ldr	w0, [x5, #16]
     adc:	cbz	w0, ab4 <GOMP_doacross_wait+0x238>
     ae0:	mov	w0, #0x0                   	// #0
     ae4:	b	a80 <GOMP_doacross_wait+0x204>
     ae8:	dmb	ish
     aec:	b	a28 <GOMP_doacross_wait+0x1ac>

0000000000000af0 <gomp_doacross_ull_init>:
     af0:	stp	x29, x30, [sp, #-368]!
     af4:	mov	x29, sp
     af8:	stp	x19, x20, [sp, #16]
     afc:	stp	x21, x22, [sp, #32]
     b00:	stp	x25, x26, [sp, #64]
     b04:	stp	x27, x28, [sp, #80]
     b08:	mov	w20, w0
     b0c:	mov	x21, x1
     b10:	mov	x25, x3
     b14:	adrp	x0, 0 <gomp_tls_data>
     b18:	ldr	x0, [x0]
     b1c:	mrs	x1, tpidr_el0
     b20:	add	x0, x1, x0
     b24:	ldr	x1, [x0, #16]
     b28:	ldr	x28, [x0, #24]
     b2c:	cbz	x1, c30 <gomp_doacross_ull_init+0x140>
     b30:	stp	x23, x24, [sp, #48]
     b34:	mov	x26, x2
     b38:	ldr	w23, [x1]
     b3c:	cmp	w23, #0x1
     b40:	b.eq	c24 <gomp_doacross_ull_init+0x134>  // b.none
     b44:	mov	x0, #0x0                   	// #0
     b48:	mov	w19, #0x0                   	// #0
     b4c:	cbz	w20, b60 <gomp_doacross_ull_init+0x70>
     b50:	mov	w4, #0x1                   	// #1
     b54:	mov	w3, #0x40                  	// #64
     b58:	add	x5, sp, #0x70
     b5c:	b	c78 <gomp_doacross_ull_init+0x188>
     b60:	mov	w19, w20
     b64:	ldr	w0, [x28]
     b68:	mov	w23, w23
     b6c:	cmp	w0, #0x1
     b70:	b.eq	b8c <gomp_doacross_ull_init+0x9c>  // b.none
     b74:	cmp	w0, #0x3
     b78:	b.eq	cb0 <gomp_doacross_ull_init+0x1c0>  // b.none
     b7c:	ldr	x23, [x21]
     b80:	sub	x23, x23, #0x1
     b84:	udiv	x23, x23, x26
     b88:	add	x23, x23, #0x1
     b8c:	cmp	w19, #0x40
     b90:	b.hi	cb8 <gomp_doacross_ull_init+0x1c8>  // b.pmore
     b94:	ubfiz	x27, x20, #2, #32
     b98:	mov	x24, #0x8                   	// #8
     b9c:	add	x24, x24, #0x3f
     ba0:	and	x24, x24, #0xffffffffffffffc0
     ba4:	mul	x0, x23, x24
     ba8:	str	x0, [sp, #104]
     bac:	add	x27, x27, #0x77
     bb0:	add	x0, x0, x27
     bb4:	bl	0 <gomp_malloc>
     bb8:	mov	x22, x0
     bbc:	str	x26, [x0]
     bc0:	str	x24, [x0, #8]
     bc4:	str	w20, [x0, #16]
     bc8:	strb	wzr, [x0, #20]
     bcc:	str	xzr, [x0, #40]
     bd0:	add	x27, x0, x27
     bd4:	and	x27, x27, #0xffffffffffffffc0
     bd8:	str	x27, [x0, #24]
     bdc:	cbnz	x25, cc4 <gomp_doacross_ull_init+0x1d4>
     be0:	str	xzr, [x0, #48]
     be4:	cmp	w19, #0x40
     be8:	b.ls	ce0 <gomp_doacross_ull_init+0x1f0>  // b.plast
     bec:	ubfiz	x20, x20, #3, #32
     bf0:	mov	x25, #0x0                   	// #0
     bf4:	mov	x19, #0x0                   	// #0
     bf8:	cbz	x23, d50 <gomp_doacross_ull_init+0x260>
     bfc:	ldr	x0, [x22, #24]
     c00:	mov	x2, x20
     c04:	mov	w1, #0x0                   	// #0
     c08:	add	x0, x0, x25
     c0c:	bl	0 <memset>
     c10:	add	x19, x19, #0x1
     c14:	add	x25, x25, x24
     c18:	cmp	x23, x19
     c1c:	b.ne	bfc <gomp_doacross_ull_init+0x10c>  // b.any
     c20:	b	d50 <gomp_doacross_ull_init+0x260>
     c24:	ldp	x23, x24, [sp, #48]
     c28:	b	c30 <gomp_doacross_ull_init+0x140>
     c2c:	ldp	x23, x24, [sp, #48]
     c30:	cbnz	x25, c50 <gomp_doacross_ull_init+0x160>
     c34:	str	xzr, [x28, #32]
     c38:	ldp	x19, x20, [sp, #16]
     c3c:	ldp	x21, x22, [sp, #32]
     c40:	ldp	x25, x26, [sp, #64]
     c44:	ldp	x27, x28, [sp, #80]
     c48:	ldp	x29, x30, [sp], #368
     c4c:	ret
     c50:	add	x0, x25, #0x38
     c54:	bl	0 <gomp_malloc_cleared>
     c58:	add	x1, x0, #0x38
     c5c:	str	x1, [x0, #48]
     c60:	str	x0, [x28, #32]
     c64:	b	c38 <gomp_doacross_ull_init+0x148>
     c68:	mov	w19, #0x41                  	// #65
     c6c:	add	x0, x0, #0x1
     c70:	cmp	w20, w0
     c74:	b.ls	b64 <gomp_doacross_ull_init+0x74>  // b.plast
     c78:	ldr	x2, [x21, x0, lsl #3]
     c7c:	cbz	x2, c2c <gomp_doacross_ull_init+0x13c>
     c80:	cmp	w19, #0x40
     c84:	b.hi	c6c <gomp_doacross_ull_init+0x17c>  // b.pmore
     c88:	sub	x1, x2, #0x1
     c8c:	clz	x1, x1
     c90:	sub	w1, w3, w1
     c94:	cmp	x2, #0x1
     c98:	csel	w1, w1, w4, ne  // ne = any
     c9c:	add	w19, w19, w1
     ca0:	cmp	w19, #0x40
     ca4:	b.hi	c68 <gomp_doacross_ull_init+0x178>  // b.pmore
     ca8:	str	w1, [x5, x0, lsl #2]
     cac:	b	c6c <gomp_doacross_ull_init+0x17c>
     cb0:	ldr	x23, [x21]
     cb4:	b	b8c <gomp_doacross_ull_init+0x9c>
     cb8:	ubfiz	x24, x20, #3, #32
     cbc:	mov	x27, #0x0                   	// #0
     cc0:	b	b9c <gomp_doacross_ull_init+0xac>
     cc4:	ldr	x0, [sp, #104]
     cc8:	add	x0, x27, x0
     ccc:	str	x0, [x22, #48]
     cd0:	mov	x2, x25
     cd4:	mov	w1, #0x0                   	// #0
     cd8:	bl	0 <memset>
     cdc:	b	be4 <gomp_doacross_ull_init+0xf4>
     ce0:	mov	w0, #0x1                   	// #1
     ce4:	strb	w0, [x22, #20]
     ce8:	cbz	w20, d2c <gomp_doacross_ull_init+0x23c>
     cec:	sub	w0, w20, #0x1
     cf0:	mvn	x5, x0
     cf4:	lsl	x5, x5, #2
     cf8:	lsl	x0, x0, #2
     cfc:	add	x4, x0, #0x38
     d00:	add	x4, x22, x4
     d04:	add	x1, sp, #0x70
     d08:	add	x3, x1, x0
     d0c:	mov	x0, #0x0                   	// #0
     d10:	mov	w1, #0x0                   	// #0
     d14:	str	w1, [x4, x0]
     d18:	ldr	w2, [x3, x0]
     d1c:	add	w1, w1, w2
     d20:	sub	x0, x0, #0x4
     d24:	cmp	x0, x5
     d28:	b.ne	d14 <gomp_doacross_ull_init+0x224>  // b.any
     d2c:	cbz	x23, d50 <gomp_doacross_ull_init+0x260>
     d30:	mov	x1, #0x0                   	// #0
     d34:	mov	x0, #0x0                   	// #0
     d38:	ldr	x2, [x22, #24]
     d3c:	str	xzr, [x2, x1]
     d40:	add	x0, x0, #0x1
     d44:	add	x1, x1, x24
     d48:	cmp	x23, x0
     d4c:	b.ne	d38 <gomp_doacross_ull_init+0x248>  // b.any
     d50:	ldr	w0, [x28]
     d54:	cmp	x26, #0x0
     d58:	ccmp	w0, #0x1, #0x0, eq  // eq = none
     d5c:	b.eq	d6c <gomp_doacross_ull_init+0x27c>  // b.none
     d60:	str	x22, [x28, #32]
     d64:	ldp	x23, x24, [sp, #48]
     d68:	b	c38 <gomp_doacross_ull_init+0x148>
     d6c:	ldr	x1, [x21]
     d70:	udiv	x0, x1, x23
     d74:	msub	x23, x0, x23, x1
     d78:	madd	x1, x0, x23, x23
     d7c:	str	x1, [x22, #40]
     d80:	str	x0, [x22]
     d84:	str	x23, [x22, #32]
     d88:	b	d60 <gomp_doacross_ull_init+0x270>

0000000000000d8c <GOMP_doacross_ull_post>:
     d8c:	adrp	x1, 0 <gomp_tls_data>
     d90:	ldr	x1, [x1]
     d94:	mrs	x2, tpidr_el0
     d98:	add	x1, x2, x1
     d9c:	ldr	x1, [x1, #24]
     da0:	ldr	x2, [x1, #32]
     da4:	cbz	x2, e34 <GOMP_doacross_ull_post+0xa8>
     da8:	ldr	x4, [x2, #24]
     dac:	cbz	x4, e34 <GOMP_doacross_ull_post+0xa8>
     db0:	ldr	w1, [x1]
     db4:	cmp	w1, #0x1
     db8:	b.ne	e3c <GOMP_doacross_ull_post+0xb0>  // b.any
     dbc:	adrp	x1, 0 <gomp_tls_data>
     dc0:	ldr	x1, [x1]
     dc4:	mrs	x3, tpidr_el0
     dc8:	add	x1, x3, x1
     dcc:	ldr	w7, [x1, #40]
     dd0:	ldrb	w1, [x2, #20]
     dd4:	cbz	w1, e64 <GOMP_doacross_ull_post+0xd8>
     dd8:	ldr	x1, [x2, #8]
     ddc:	madd	x7, x7, x1, x4
     de0:	ldr	w1, [x2, #56]
     de4:	ldr	x3, [x0]
     de8:	lsl	x3, x3, x1
     dec:	ldr	w6, [x2, #16]
     df0:	cmp	w6, #0x1
     df4:	b.ls	e1c <GOMP_doacross_ull_post+0x90>  // b.plast
     df8:	mov	x1, #0x1                   	// #1
     dfc:	add	x4, x2, #0x38
     e00:	ldr	w5, [x4, x1, lsl #2]
     e04:	ldr	x2, [x0, x1, lsl #3]
     e08:	lsl	x2, x2, x5
     e0c:	orr	x3, x3, x2
     e10:	add	x1, x1, #0x1
     e14:	cmp	w6, w1
     e18:	b.hi	e00 <GOMP_doacross_ull_post+0x74>  // b.pmore
     e1c:	add	x3, x3, #0x1
     e20:	ldar	x0, [x7]
     e24:	cmp	x0, x3
     e28:	b.eq	e5c <GOMP_doacross_ull_post+0xd0>  // b.none
     e2c:	stlr	x3, [x7]
     e30:	ret
     e34:	dmb	ish
     e38:	b	e30 <GOMP_doacross_ull_post+0xa4>
     e3c:	cmp	w1, #0x3
     e40:	b.eq	e54 <GOMP_doacross_ull_post+0xc8>  // b.none
     e44:	ldr	x1, [x0]
     e48:	ldr	x7, [x2]
     e4c:	udiv	x7, x1, x7
     e50:	b	dd0 <GOMP_doacross_ull_post+0x44>
     e54:	ldr	x7, [x0]
     e58:	b	dd0 <GOMP_doacross_ull_post+0x44>
     e5c:	dmb	ish
     e60:	b	e30 <GOMP_doacross_ull_post+0xa4>
     e64:	dmb	ishld
     e68:	ldr	x3, [x2, #24]
     e6c:	ldr	x1, [x2, #8]
     e70:	mul	x7, x7, x1
     e74:	ldr	w1, [x2, #16]
     e78:	sub	w2, w1, #0x1
     e7c:	cbz	w1, e30 <GOMP_doacross_ull_post+0xa4>
     e80:	ubfiz	x2, x2, #3, #32
     e84:	add	x1, x0, x2
     e88:	add	x7, x2, x7
     e8c:	add	x3, x3, x7
     e90:	b	ea8 <GOMP_doacross_ull_post+0x11c>
     e94:	sub	x2, x1, #0x8
     e98:	sub	x3, x3, #0x8
     e9c:	cmp	x1, x0
     ea0:	b.eq	e30 <GOMP_doacross_ull_post+0xa4>  // b.none
     ea4:	mov	x1, x2
     ea8:	ldr	x2, [x1]
     eac:	add	x2, x2, #0x1
     eb0:	ldr	x4, [x3]
     eb4:	cmp	x2, x4
     eb8:	b.eq	e94 <GOMP_doacross_ull_post+0x108>  // b.none
     ebc:	ldr	x2, [x1]
     ec0:	add	x2, x2, #0x1
     ec4:	stlr	x2, [x3]
     ec8:	b	e94 <GOMP_doacross_ull_post+0x108>

0000000000000ecc <GOMP_doacross_ull_wait>:
     ecc:	sub	sp, sp, #0x60
     ed0:	str	x1, [sp, #40]
     ed4:	str	x2, [sp, #48]
     ed8:	str	x3, [sp, #56]
     edc:	str	x4, [sp, #64]
     ee0:	str	x5, [sp, #72]
     ee4:	str	x6, [sp, #80]
     ee8:	str	x7, [sp, #88]
     eec:	adrp	x1, 0 <gomp_tls_data>
     ef0:	ldr	x1, [x1]
     ef4:	mrs	x2, tpidr_el0
     ef8:	add	x1, x2, x1
     efc:	ldr	x1, [x1, #24]
     f00:	ldr	x3, [x1, #32]
     f04:	cbz	x3, f40 <GOMP_doacross_ull_wait+0x74>
     f08:	ldr	x7, [x3, #24]
     f0c:	cbz	x7, f40 <GOMP_doacross_ull_wait+0x74>
     f10:	ldr	w2, [x1]
     f14:	cmp	w2, #0x1
     f18:	b.ne	fd4 <GOMP_doacross_ull_wait+0x108>  // b.any
     f1c:	ldr	x5, [x1, #8]
     f20:	cbnz	x5, f60 <GOMP_doacross_ull_wait+0x94>
     f24:	ldr	x1, [x3, #40]
     f28:	cmp	x1, x0
     f2c:	b.ls	f48 <GOMP_doacross_ull_wait+0x7c>  // b.plast
     f30:	ldr	x4, [x3]
     f34:	add	x4, x4, #0x1
     f38:	udiv	x5, x0, x4
     f3c:	b	f84 <GOMP_doacross_ull_wait+0xb8>
     f40:	dmb	ish
     f44:	b	106c <GOMP_doacross_ull_wait+0x1a0>
     f48:	sub	x1, x0, x1
     f4c:	ldr	x4, [x3]
     f50:	udiv	x4, x1, x4
     f54:	ldr	x5, [x3, #32]
     f58:	add	x5, x4, x5
     f5c:	b	f84 <GOMP_doacross_ull_wait+0xb8>
     f60:	udiv	x4, x0, x5
     f64:	adrp	x1, 0 <gomp_tls_data>
     f68:	ldr	x1, [x1]
     f6c:	mrs	x2, tpidr_el0
     f70:	add	x1, x2, x1
     f74:	ldr	x1, [x1, #16]
     f78:	ldr	w1, [x1]
     f7c:	udiv	x5, x4, x1
     f80:	msub	x5, x5, x1, x4
     f84:	ldrb	w1, [x3, #20]
     f88:	cbz	w1, 107c <GOMP_doacross_ull_wait+0x1b0>
     f8c:	ldr	x4, [x3, #8]
     f90:	madd	x5, x5, x4, x7
     f94:	ldr	w2, [x3, #56]
     f98:	lsl	x2, x0, x2
     f9c:	add	x0, sp, #0x60
     fa0:	str	x0, [sp]
     fa4:	str	x0, [sp, #8]
     fa8:	add	x0, sp, #0x20
     fac:	str	x0, [sp, #16]
     fb0:	mov	w0, #0xffffffc8            	// #-56
     fb4:	str	w0, [sp, #24]
     fb8:	str	wzr, [sp, #28]
     fbc:	ldr	w0, [x3, #16]
     fc0:	cmp	w0, #0x1
     fc4:	b.ls	1050 <GOMP_doacross_ull_wait+0x184>  // b.plast
     fc8:	ldr	x7, [sp, #8]
     fcc:	mov	w0, #0x1                   	// #1
     fd0:	b	102c <GOMP_doacross_ull_wait+0x160>
     fd4:	mov	x5, x0
     fd8:	cmp	w2, #0x3
     fdc:	b.eq	f84 <GOMP_doacross_ull_wait+0xb8>  // b.none
     fe0:	ldr	x4, [x3]
     fe4:	udiv	x5, x0, x4
     fe8:	b	f84 <GOMP_doacross_ull_wait+0xb8>
     fec:	add	w6, w1, #0x8
     ff0:	str	w6, [sp, #24]
     ff4:	cmp	w6, #0x0
     ff8:	b.le	1048 <GOMP_doacross_ull_wait+0x17c>
     ffc:	add	x1, x4, #0xf
    1000:	and	x1, x1, #0xfffffffffffffff8
    1004:	str	x1, [sp]
    1008:	add	x1, x3, w0, uxtw #2
    100c:	ldr	w6, [x1, #56]
    1010:	ldr	x1, [x4]
    1014:	lsl	x1, x1, x6
    1018:	orr	x2, x2, x1
    101c:	add	w0, w0, #0x1
    1020:	ldr	w1, [x3, #16]
    1024:	cmp	w1, w0
    1028:	b.ls	1050 <GOMP_doacross_ull_wait+0x184>  // b.plast
    102c:	ldr	w1, [sp, #24]
    1030:	ldr	x4, [sp]
    1034:	tbnz	w1, #31, fec <GOMP_doacross_ull_wait+0x120>
    1038:	add	x1, x4, #0xf
    103c:	and	x1, x1, #0xfffffffffffffff8
    1040:	str	x1, [sp]
    1044:	b	1008 <GOMP_doacross_ull_wait+0x13c>
    1048:	add	x4, x7, w1, sxtw
    104c:	b	1008 <GOMP_doacross_ull_wait+0x13c>
    1050:	ldar	x0, [x5]
    1054:	cmp	x2, x0
    1058:	b.cc	1074 <GOMP_doacross_ull_wait+0x1a8>  // b.lo, b.ul, b.last
    105c:	ldr	x0, [x5]
    1060:	cmp	x0, x2
    1064:	b.ls	105c <GOMP_doacross_ull_wait+0x190>  // b.plast
    1068:	dmb	ish
    106c:	add	sp, sp, #0x60
    1070:	ret
    1074:	dmb	ish
    1078:	b	106c <GOMP_doacross_ull_wait+0x1a0>
    107c:	ldr	x4, [x3, #8]
    1080:	mul	x4, x5, x4
    1084:	add	x9, sp, #0x20
    1088:	mov	w8, #0xffffffc8            	// #-56
    108c:	add	x6, x0, #0x1
    1090:	b	1120 <GOMP_doacross_ull_wait+0x254>
    1094:	add	w5, w2, #0x8
    1098:	str	w5, [sp, #24]
    109c:	cmp	w5, #0x0
    10a0:	b.le	1104 <GOMP_doacross_ull_wait+0x238>
    10a4:	add	x2, x1, #0xf
    10a8:	and	x2, x2, #0xfffffffffffffff8
    10ac:	str	x2, [sp]
    10b0:	ldr	x1, [x1]
    10b4:	add	x1, x1, #0x1
    10b8:	add	x2, x7, w0, uxtw #3
    10bc:	add	x2, x2, x4
    10c0:	ldr	x2, [x2]
    10c4:	cmp	x1, x2
    10c8:	b.cc	1110 <GOMP_doacross_ull_wait+0x244>  // b.lo, b.ul, b.last
    10cc:	b.hi	1114 <GOMP_doacross_ull_wait+0x248>  // b.pmore
    10d0:	add	w0, w0, #0x1
    10d4:	ldr	w1, [x3, #16]
    10d8:	cmp	w1, w0
    10dc:	b.ls	1114 <GOMP_doacross_ull_wait+0x248>  // b.plast
    10e0:	mov	x1, x6
    10e4:	cbz	w0, 10b8 <GOMP_doacross_ull_wait+0x1ec>
    10e8:	ldr	w2, [sp, #24]
    10ec:	ldr	x1, [sp]
    10f0:	tbnz	w2, #31, 1094 <GOMP_doacross_ull_wait+0x1c8>
    10f4:	add	x2, x1, #0xf
    10f8:	and	x2, x2, #0xfffffffffffffff8
    10fc:	str	x2, [sp]
    1100:	b	10b0 <GOMP_doacross_ull_wait+0x1e4>
    1104:	ldr	x1, [sp, #8]
    1108:	add	x1, x1, w2, sxtw
    110c:	b	10b0 <GOMP_doacross_ull_wait+0x1e4>
    1110:	ldr	w0, [x3, #16]
    1114:	ldr	w1, [x3, #16]
    1118:	cmp	w1, w0
    111c:	b.eq	1148 <GOMP_doacross_ull_wait+0x27c>  // b.none
    1120:	add	x0, sp, #0x60
    1124:	str	x0, [sp]
    1128:	str	x0, [sp, #8]
    112c:	str	x9, [sp, #16]
    1130:	str	w8, [sp, #24]
    1134:	str	wzr, [sp, #28]
    1138:	ldr	w0, [x3, #16]
    113c:	cbz	w0, 1114 <GOMP_doacross_ull_wait+0x248>
    1140:	mov	w0, #0x0                   	// #0
    1144:	b	10e0 <GOMP_doacross_ull_wait+0x214>
    1148:	dmb	ish
    114c:	b	106c <GOMP_doacross_ull_wait+0x1a0>

parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_resolve_num_threads>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	w21, w1
  14:	adrp	x2, 0 <gomp_tls_data>
  18:	ldr	x2, [x2]
  1c:	mrs	x3, tpidr_el0
  20:	add	x2, x3, x2
  24:	ldr	x1, [x2, #80]
  28:	add	x2, x1, #0x90
  2c:	adrp	x19, 0 <gomp_global_icv>
  30:	add	x19, x19, #0x0
  34:	cmp	x1, #0x0
  38:	csel	x19, x19, x2, eq  // eq = none
  3c:	mov	w20, w0
  40:	cmp	w0, #0x1
  44:	b.eq	a0 <gomp_resolve_num_threads+0xa0>  // b.none
  48:	adrp	x1, 0 <gomp_tls_data>
  4c:	ldr	x1, [x1]
  50:	add	x1, x3, x1
  54:	ldr	w1, [x1, #48]
  58:	cbz	w1, 68 <gomp_resolve_num_threads+0x68>
  5c:	ldrb	w2, [x19, #25]
  60:	mov	w20, #0x1                   	// #1
  64:	cbz	w2, a0 <gomp_resolve_num_threads+0xa0>
  68:	adrp	x2, 0 <gomp_max_active_levels_var>
  6c:	ldr	x2, [x2]
  70:	mov	w20, #0x1                   	// #1
  74:	cmp	x2, w1, uxtw
  78:	b.ls	a0 <gomp_resolve_num_threads+0xa0>  // b.plast
  7c:	mov	w20, w0
  80:	cbnz	w0, 88 <gomp_resolve_num_threads+0x88>
  84:	ldr	w20, [x19]
  88:	ldrb	w0, [x19, #24]
  8c:	cbnz	w0, b4 <gomp_resolve_num_threads+0xb4>
  90:	ldr	w0, [x19, #20]
  94:	cmp	w20, #0x1
  98:	ccmn	w0, #0x1, #0x4, ne  // ne = any
  9c:	b.ne	d0 <gomp_resolve_num_threads+0xd0>  // b.any
  a0:	mov	w0, w20
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldr	x21, [sp, #32]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret
  b4:	bl	0 <gomp_dynamic_max_threads>
  b8:	cmp	w20, w0
  bc:	csel	w20, w20, w0, ls  // ls = plast
  c0:	cmp	w21, #0x0
  c4:	ccmp	w20, w21, #0x0, ne  // ne = any
  c8:	csel	w20, w20, w21, ls  // ls = plast
  cc:	b	90 <gomp_resolve_num_threads+0x90>
  d0:	adrp	x1, 0 <gomp_tls_data>
  d4:	ldr	x1, [x1]
  d8:	mrs	x2, tpidr_el0
  dc:	add	x1, x2, x1
  e0:	ldr	x6, [x1, #96]
  e4:	ldr	x1, [x1, #16]
  e8:	cmp	x1, #0x0
  ec:	ccmp	x6, #0x0, #0x4, ne  // ne = any
  f0:	b.eq	158 <gomp_resolve_num_threads+0x158>  // b.none
  f4:	mov	x9, #0x1                   	// #1
  f8:	mov	w8, w20
  fc:	mov	w5, w20
 100:	mov	w7, #0x1                   	// #1
 104:	add	x4, x6, #0x18
 108:	ldr	x1, [x6, #24]
 10c:	ldr	w3, [x19, #20]
 110:	sub	x2, x9, x1
 114:	add	x2, x2, w3, uxtw
 118:	sub	w0, w7, w1
 11c:	add	w0, w0, w3
 120:	cmp	x2, x8
 124:	csel	w20, w0, w5, cc  // cc = lo, ul, last
 128:	sub	x2, x1, #0x1
 12c:	csel	w0, w0, w5, cc  // cc = lo, ul, last
 130:	add	x0, x2, x0
 134:	ldxr	x2, [x4]
 138:	cmp	x2, x1
 13c:	b.ne	148 <gomp_resolve_num_threads+0x148>  // b.any
 140:	stlxr	w3, x0, [x4]
 144:	cbnz	w3, 134 <gomp_resolve_num_threads+0x134>
 148:	dmb	ish
 14c:	cmp	x2, x1
 150:	b.ne	108 <gomp_resolve_num_threads+0x108>  // b.any
 154:	b	a0 <gomp_resolve_num_threads+0xa0>
 158:	cmp	w20, w0
 15c:	csel	w20, w20, w0, ls  // ls = plast
 160:	cbz	x6, a0 <gomp_resolve_num_threads+0xa0>
 164:	mov	w0, w20
 168:	str	x0, [x6, #24]
 16c:	b	a0 <gomp_resolve_num_threads+0xa0>

0000000000000170 <GOMP_parallel_start>:
 170:	stp	x29, x30, [sp, #-48]!
 174:	mov	x29, sp
 178:	stp	x19, x20, [sp, #16]
 17c:	str	x21, [sp, #32]
 180:	mov	x19, x0
 184:	mov	x20, x1
 188:	mov	w0, w2
 18c:	mov	w1, #0x0                   	// #0
 190:	bl	0 <gomp_resolve_num_threads>
 194:	mov	w21, w0
 198:	bl	0 <gomp_new_team>
 19c:	mov	x5, #0x0                   	// #0
 1a0:	mov	x4, x0
 1a4:	mov	w3, #0x0                   	// #0
 1a8:	mov	w2, w21
 1ac:	mov	x1, x20
 1b0:	mov	x0, x19
 1b4:	bl	0 <gomp_team_start>
 1b8:	ldp	x19, x20, [sp, #16]
 1bc:	ldr	x21, [sp, #32]
 1c0:	ldp	x29, x30, [sp], #48
 1c4:	ret

00000000000001c8 <GOMP_parallel_end>:
 1c8:	stp	x29, x30, [sp, #-32]!
 1cc:	mov	x29, sp
 1d0:	adrp	x0, 0 <gomp_tls_data>
 1d4:	ldr	x0, [x0]
 1d8:	mrs	x1, tpidr_el0
 1dc:	add	x0, x1, x0
 1e0:	ldr	x1, [x0, #80]
 1e4:	add	x2, x1, #0x90
 1e8:	adrp	x0, 0 <gomp_global_icv>
 1ec:	add	x0, x0, #0x0
 1f0:	cmp	x1, #0x0
 1f4:	csel	x0, x0, x2, eq  // eq = none
 1f8:	ldr	w0, [x0, #20]
 1fc:	cmn	w0, #0x1
 200:	b.ne	210 <GOMP_parallel_end+0x48>  // b.any
 204:	bl	0 <gomp_team_end>
 208:	ldp	x29, x30, [sp], #32
 20c:	ret
 210:	adrp	x0, 0 <gomp_tls_data>
 214:	ldr	x0, [x0]
 218:	mrs	x1, tpidr_el0
 21c:	add	x0, x1, x0
 220:	ldr	x0, [x0, #16]
 224:	cbz	x0, 290 <GOMP_parallel_end+0xc8>
 228:	str	x19, [sp, #16]
 22c:	ldr	w19, [x0]
 230:	bl	0 <gomp_team_end>
 234:	cmp	w19, #0x1
 238:	b.ls	2b8 <GOMP_parallel_end+0xf0>  // b.plast
 23c:	adrp	x0, 0 <gomp_tls_data>
 240:	ldr	x0, [x0]
 244:	mrs	x1, tpidr_el0
 248:	add	x0, x1, x0
 24c:	ldr	x0, [x0, #16]
 250:	cbz	x0, 298 <GOMP_parallel_end+0xd0>
 254:	adrp	x0, 0 <gomp_tls_data>
 258:	ldr	x0, [x0]
 25c:	mrs	x1, tpidr_el0
 260:	add	x0, x1, x0
 264:	ldr	x0, [x0, #96]
 268:	mov	x1, #0x1                   	// #1
 26c:	sub	x19, x1, w19, uxtw
 270:	add	x0, x0, #0x18
 274:	ldxr	x1, [x0]
 278:	add	x1, x1, x19
 27c:	stlxr	w2, x1, [x0]
 280:	cbnz	w2, 274 <GOMP_parallel_end+0xac>
 284:	dmb	ish
 288:	ldr	x19, [sp, #16]
 28c:	b	208 <GOMP_parallel_end+0x40>
 290:	bl	0 <gomp_team_end>
 294:	b	208 <GOMP_parallel_end+0x40>
 298:	adrp	x0, 0 <gomp_tls_data>
 29c:	ldr	x0, [x0]
 2a0:	add	x0, x1, x0
 2a4:	ldr	x0, [x0, #96]
 2a8:	mov	x1, #0x1                   	// #1
 2ac:	str	x1, [x0, #24]
 2b0:	ldr	x19, [sp, #16]
 2b4:	b	208 <GOMP_parallel_end+0x40>
 2b8:	ldr	x19, [sp, #16]
 2bc:	b	208 <GOMP_parallel_end+0x40>

00000000000002c0 <GOMP_parallel>:
 2c0:	stp	x29, x30, [sp, #-48]!
 2c4:	mov	x29, sp
 2c8:	stp	x19, x20, [sp, #16]
 2cc:	stp	x21, x22, [sp, #32]
 2d0:	mov	x19, x0
 2d4:	mov	x20, x1
 2d8:	mov	w0, w2
 2dc:	mov	w22, w3
 2e0:	mov	w1, #0x0                   	// #0
 2e4:	bl	0 <gomp_resolve_num_threads>
 2e8:	mov	w21, w0
 2ec:	bl	0 <gomp_new_team>
 2f0:	mov	x5, #0x0                   	// #0
 2f4:	mov	x4, x0
 2f8:	mov	w3, w22
 2fc:	mov	w2, w21
 300:	mov	x1, x20
 304:	mov	x0, x19
 308:	bl	0 <gomp_team_start>
 30c:	mov	x0, x20
 310:	blr	x19
 314:	bl	1c8 <GOMP_parallel_end>
 318:	ldp	x19, x20, [sp, #16]
 31c:	ldp	x21, x22, [sp, #32]
 320:	ldp	x29, x30, [sp], #48
 324:	ret

0000000000000328 <GOMP_parallel_reductions>:
 328:	stp	x29, x30, [sp, #-64]!
 32c:	mov	x29, sp
 330:	stp	x19, x20, [sp, #16]
 334:	stp	x21, x22, [sp, #32]
 338:	str	x23, [sp, #48]
 33c:	mov	x22, x0
 340:	mov	x20, x1
 344:	mov	w0, w2
 348:	mov	w23, w3
 34c:	mov	w1, #0x0                   	// #0
 350:	bl	0 <gomp_resolve_num_threads>
 354:	mov	w19, w0
 358:	mov	w1, w0
 35c:	ldr	x0, [x20]
 360:	bl	0 <gomp_parallel_reduction_register>
 364:	mov	x21, x0
 368:	mov	w0, w19
 36c:	bl	0 <gomp_new_team>
 370:	mov	x5, x21
 374:	mov	x4, x0
 378:	mov	w3, w23
 37c:	mov	w2, w19
 380:	mov	x1, x20
 384:	mov	x0, x22
 388:	bl	0 <gomp_team_start>
 38c:	mov	x0, x20
 390:	blr	x22
 394:	bl	1c8 <GOMP_parallel_end>
 398:	mov	x0, x21
 39c:	bl	0 <free>
 3a0:	mov	w0, w19
 3a4:	ldp	x19, x20, [sp, #16]
 3a8:	ldp	x21, x22, [sp, #32]
 3ac:	ldr	x23, [sp, #48]
 3b0:	ldp	x29, x30, [sp], #64
 3b4:	ret

00000000000003b8 <GOMP_cancellation_point>:
 3b8:	mov	w1, w0
 3bc:	adrp	x0, 0 <gomp_cancel_var>
 3c0:	ldrb	w0, [x0]
 3c4:	cbz	w0, 3f8 <GOMP_cancellation_point+0x40>
 3c8:	adrp	x0, 0 <gomp_tls_data>
 3cc:	ldr	x0, [x0]
 3d0:	mrs	x2, tpidr_el0
 3d4:	add	x0, x2, x0
 3d8:	ldr	x2, [x0, #16]
 3dc:	tst	w1, #0x6
 3e0:	b.eq	3fc <GOMP_cancellation_point+0x44>  // b.none
 3e4:	mov	w0, #0x0                   	// #0
 3e8:	cbz	x2, 3f8 <GOMP_cancellation_point+0x40>
 3ec:	ldr	w0, [x2, #1332]
 3f0:	cmp	w0, #0x0
 3f4:	cset	w0, ne  // ne = any
 3f8:	ret
 3fc:	tbz	w1, #3, 43c <GOMP_cancellation_point+0x84>
 400:	adrp	x0, 0 <gomp_tls_data>
 404:	ldr	x0, [x0]
 408:	mrs	x1, tpidr_el0
 40c:	add	x0, x1, x0
 410:	ldr	x0, [x0, #80]
 414:	ldr	x1, [x0, #40]
 418:	cbz	x1, 43c <GOMP_cancellation_point+0x84>
 41c:	ldrb	w0, [x1, #49]
 420:	cbnz	w0, 3f8 <GOMP_cancellation_point+0x40>
 424:	ldrb	w0, [x1, #50]
 428:	cbz	w0, 43c <GOMP_cancellation_point+0x84>
 42c:	ldr	x0, [x1]
 430:	cbz	x0, 43c <GOMP_cancellation_point+0x84>
 434:	ldrb	w0, [x0, #49]
 438:	cbnz	w0, 3f8 <GOMP_cancellation_point+0x40>
 43c:	mov	w0, #0x0                   	// #0
 440:	cbz	x2, 3f8 <GOMP_cancellation_point+0x40>
 444:	ldr	w0, [x2, #132]
 448:	ubfx	x0, x0, #2, #1
 44c:	b	3f8 <GOMP_cancellation_point+0x40>

0000000000000450 <GOMP_cancel>:
 450:	stp	x29, x30, [sp, #-48]!
 454:	mov	x29, sp
 458:	stp	x19, x20, [sp, #16]
 45c:	and	w19, w1, #0xff
 460:	adrp	x1, 0 <gomp_cancel_var>
 464:	ldrb	w1, [x1]
 468:	cbz	w1, 51c <GOMP_cancel+0xcc>
 46c:	cbz	w19, 514 <GOMP_cancel+0xc4>
 470:	adrp	x1, 0 <gomp_tls_data>
 474:	ldr	x1, [x1]
 478:	mrs	x2, tpidr_el0
 47c:	add	x1, x2, x1
 480:	ldr	x20, [x1, #16]
 484:	tst	w0, #0x6
 488:	b.ne	52c <GOMP_cancel+0xdc>  // b.any
 48c:	tbz	w0, #3, 560 <GOMP_cancel+0x110>
 490:	str	x21, [sp, #32]
 494:	adrp	x0, 0 <gomp_tls_data>
 498:	ldr	x0, [x0]
 49c:	mrs	x1, tpidr_el0
 4a0:	add	x0, x1, x0
 4a4:	ldr	x0, [x0, #80]
 4a8:	ldr	x21, [x0, #40]
 4ac:	mov	w1, w19
 4b0:	cbz	x21, 578 <GOMP_cancel+0x128>
 4b4:	ldrb	w0, [x21, #50]
 4b8:	cbz	w0, 4c8 <GOMP_cancel+0x78>
 4bc:	ldr	x0, [x21]
 4c0:	cmp	x0, #0x0
 4c4:	csel	x21, x21, x0, eq  // eq = none
 4c8:	ldrb	w1, [x21, #49]
 4cc:	cbnz	w1, 580 <GOMP_cancel+0x130>
 4d0:	add	x20, x20, #0x500
 4d4:	mov	w0, #0x1                   	// #1
 4d8:	ldaxr	w1, [x20]
 4dc:	cbnz	w1, 4e8 <GOMP_cancel+0x98>
 4e0:	stxr	w2, w0, [x20]
 4e4:	cbnz	w2, 4d8 <GOMP_cancel+0x88>
 4e8:	cmp	w1, #0x0
 4ec:	b.ne	540 <GOMP_cancel+0xf0>  // b.any
 4f0:	mov	w0, #0x1                   	// #1
 4f4:	strb	w0, [x21, #49]
 4f8:	ldxr	w0, [x20]
 4fc:	stlxr	w1, wzr, [x20]
 500:	cbnz	w1, 4f8 <GOMP_cancel+0xa8>
 504:	mov	w1, w19
 508:	tbnz	w0, #31, 54c <GOMP_cancel+0xfc>
 50c:	ldr	x21, [sp, #32]
 510:	b	51c <GOMP_cancel+0xcc>
 514:	bl	3b8 <GOMP_cancellation_point>
 518:	and	w1, w0, #0xff
 51c:	mov	w0, w1
 520:	ldp	x19, x20, [sp, #16]
 524:	ldp	x29, x30, [sp], #48
 528:	ret
 52c:	mov	w1, w19
 530:	cbz	x20, 51c <GOMP_cancel+0xcc>
 534:	mov	w0, #0x1                   	// #1
 538:	str	w0, [x20, #1332]
 53c:	b	51c <GOMP_cancel+0xcc>
 540:	mov	x0, x20
 544:	bl	0 <gomp_mutex_lock_slow>
 548:	b	4f0 <GOMP_cancel+0xa0>
 54c:	mov	x0, x20
 550:	bl	0 <gomp_mutex_unlock_slow>
 554:	mov	w1, w19
 558:	ldr	x21, [sp, #32]
 55c:	b	51c <GOMP_cancel+0xcc>
 560:	mov	w0, #0x1                   	// #1
 564:	str	w0, [x20, #1336]
 568:	mov	x0, x20
 56c:	bl	0 <gomp_team_barrier_cancel>
 570:	mov	w1, w19
 574:	b	51c <GOMP_cancel+0xcc>
 578:	ldr	x21, [sp, #32]
 57c:	b	51c <GOMP_cancel+0xcc>
 580:	ldr	x21, [sp, #32]
 584:	b	51c <GOMP_cancel+0xcc>

0000000000000588 <gomp_ialias_omp_get_num_threads>:
 588:	adrp	x0, 0 <gomp_tls_data>
 58c:	ldr	x0, [x0]
 590:	mrs	x1, tpidr_el0
 594:	add	x0, x1, x0
 598:	ldr	x1, [x0, #16]
 59c:	mov	w0, #0x1                   	// #1
 5a0:	cbz	x1, 5a8 <gomp_ialias_omp_get_num_threads+0x20>
 5a4:	ldr	w0, [x1]
 5a8:	ret

00000000000005ac <gomp_ialias_omp_get_thread_num>:
 5ac:	adrp	x0, 0 <gomp_tls_data>
 5b0:	ldr	x0, [x0]
 5b4:	mrs	x1, tpidr_el0
 5b8:	add	x0, x1, x0
 5bc:	ldr	w0, [x0, #40]
 5c0:	ret

00000000000005c4 <gomp_ialias_omp_in_parallel>:
 5c4:	adrp	x0, 0 <gomp_tls_data>
 5c8:	ldr	x0, [x0]
 5cc:	mrs	x1, tpidr_el0
 5d0:	add	x0, x1, x0
 5d4:	ldr	w0, [x0, #48]
 5d8:	cmp	w0, #0x0
 5dc:	cset	w0, ne  // ne = any
 5e0:	ret

00000000000005e4 <gomp_ialias_omp_get_level>:
 5e4:	adrp	x0, 0 <gomp_tls_data>
 5e8:	ldr	x0, [x0]
 5ec:	mrs	x1, tpidr_el0
 5f0:	add	x0, x1, x0
 5f4:	ldr	w0, [x0, #44]
 5f8:	ret

00000000000005fc <gomp_ialias_omp_get_ancestor_thread_num>:
 5fc:	tbnz	w0, #31, 66c <gomp_ialias_omp_get_ancestor_thread_num+0x70>
 600:	adrp	x1, 0 <gomp_tls_data>
 604:	ldr	x1, [x1]
 608:	mrs	x2, tpidr_el0
 60c:	add	x1, x2, x1
 610:	ldr	w2, [x1, #44]
 614:	cmp	w2, w0
 618:	b.cc	674 <gomp_ialias_omp_get_ancestor_thread_num+0x78>  // b.lo, b.ul, b.last
 61c:	sub	w2, w2, w0
 620:	cmp	w2, #0x0
 624:	b.le	654 <gomp_ialias_omp_get_ancestor_thread_num+0x58>
 628:	adrp	x0, 0 <gomp_tls_data>
 62c:	ldr	x0, [x0]
 630:	mrs	x1, tpidr_el0
 634:	add	x0, x1, x0
 638:	add	x0, x0, #0x10
 63c:	ldr	x0, [x0]
 640:	add	x0, x0, #0x8
 644:	subs	w2, w2, #0x1
 648:	b.ne	63c <gomp_ialias_omp_get_ancestor_thread_num+0x40>  // b.any
 64c:	ldr	w0, [x0, #24]
 650:	ret
 654:	adrp	x0, 0 <gomp_tls_data>
 658:	ldr	x0, [x0]
 65c:	mrs	x1, tpidr_el0
 660:	add	x0, x1, x0
 664:	add	x0, x0, #0x10
 668:	b	64c <gomp_ialias_omp_get_ancestor_thread_num+0x50>
 66c:	mov	w0, #0xffffffff            	// #-1
 670:	b	650 <gomp_ialias_omp_get_ancestor_thread_num+0x54>
 674:	mov	w0, #0xffffffff            	// #-1
 678:	b	650 <gomp_ialias_omp_get_ancestor_thread_num+0x54>

000000000000067c <gomp_ialias_omp_get_team_size>:
 67c:	tbnz	w0, #31, 6f8 <gomp_ialias_omp_get_team_size+0x7c>
 680:	adrp	x1, 0 <gomp_tls_data>
 684:	ldr	x1, [x1]
 688:	mrs	x2, tpidr_el0
 68c:	add	x1, x2, x1
 690:	ldr	w2, [x1, #44]
 694:	cmp	w2, w0
 698:	b.cc	700 <gomp_ialias_omp_get_team_size+0x84>  // b.lo, b.ul, b.last
 69c:	sub	w2, w2, w0
 6a0:	cmp	w2, #0x0
 6a4:	b.le	6e0 <gomp_ialias_omp_get_team_size+0x64>
 6a8:	adrp	x0, 0 <gomp_tls_data>
 6ac:	ldr	x0, [x0]
 6b0:	mrs	x1, tpidr_el0
 6b4:	add	x0, x1, x0
 6b8:	add	x0, x0, #0x10
 6bc:	ldr	x0, [x0]
 6c0:	add	x0, x0, #0x8
 6c4:	subs	w2, w2, #0x1
 6c8:	b.ne	6bc <gomp_ialias_omp_get_team_size+0x40>  // b.any
 6cc:	ldr	x1, [x0]
 6d0:	mov	w0, #0x1                   	// #1
 6d4:	cbz	x1, 6dc <gomp_ialias_omp_get_team_size+0x60>
 6d8:	ldr	w0, [x1]
 6dc:	ret
 6e0:	adrp	x0, 0 <gomp_tls_data>
 6e4:	ldr	x0, [x0]
 6e8:	mrs	x1, tpidr_el0
 6ec:	add	x0, x1, x0
 6f0:	add	x0, x0, #0x10
 6f4:	b	6cc <gomp_ialias_omp_get_team_size+0x50>
 6f8:	mov	w0, #0xffffffff            	// #-1
 6fc:	b	6dc <gomp_ialias_omp_get_team_size+0x60>
 700:	mov	w0, #0xffffffff            	// #-1
 704:	b	6dc <gomp_ialias_omp_get_team_size+0x60>

0000000000000708 <gomp_ialias_omp_get_active_level>:
 708:	adrp	x0, 0 <gomp_tls_data>
 70c:	ldr	x0, [x0]
 710:	mrs	x1, tpidr_el0
 714:	add	x0, x1, x0
 718:	ldr	w0, [x0, #48]
 71c:	ret

sections.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_sections_start>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w0
  10:	mov	x0, #0x0                   	// #0
  14:	bl	0 <gomp_work_share_start>
  18:	and	w0, w0, #0xff
  1c:	cbz	w0, 90 <GOMP_sections_start+0x90>
  20:	adrp	x2, 0 <gomp_tls_data>
  24:	ldr	x2, [x2]
  28:	mrs	x0, tpidr_el0
  2c:	add	x2, x0, x2
  30:	ldr	x1, [x2, #24]
  34:	mov	w0, #0x2                   	// #2
  38:	str	w0, [x1]
  3c:	mov	x3, #0x1                   	// #1
  40:	str	x3, [x1, #8]
  44:	mov	w0, w19
  48:	add	x0, x0, x3
  4c:	str	x0, [x1, #16]
  50:	str	x3, [x1, #24]
  54:	str	x3, [x1, #72]
  58:	str	w3, [x1, #4]
  5c:	ldr	x0, [x2, #32]
  60:	cbz	x0, 90 <GOMP_sections_start+0x90>
  64:	add	x0, x0, #0x50
  68:	adrp	x1, 0 <gomp_tls_data>
  6c:	ldr	x1, [x1]
  70:	mrs	x2, tpidr_el0
  74:	add	x1, x2, x1
  78:	ldr	x2, [x1, #24]
  7c:	ldxr	x1, [x0]
  80:	stlxr	w3, x2, [x0]
  84:	cbnz	w3, 7c <GOMP_sections_start+0x7c>
  88:	cmp	x1, #0x1
  8c:	b.ne	b4 <GOMP_sections_start+0xb4>  // b.any
  90:	add	x1, sp, #0x20
  94:	add	x0, sp, #0x28
  98:	bl	0 <gomp_iter_dynamic_next>
  9c:	ands	w0, w0, #0xff
  a0:	ldr	x0, [sp, #40]
  a4:	csel	x0, x0, xzr, ne  // ne = any
  a8:	ldr	x19, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret
  b4:	bl	0 <gomp_ptrlock_set_slow>
  b8:	b	90 <GOMP_sections_start+0x90>

00000000000000bc <GOMP_sections2_start>:
  bc:	stp	x29, x30, [sp, #-80]!
  c0:	mov	x29, sp
  c4:	stp	x19, x20, [sp, #16]
  c8:	stp	x21, x22, [sp, #32]
  cc:	mov	w21, w0
  d0:	mov	x19, x2
  d4:	cbz	x1, 164 <GOMP_sections2_start+0xa8>
  d8:	mov	x20, x1
  dc:	bl	0 <gomp_workshare_taskgroup_start>
  e0:	mov	x0, #0x0                   	// #0
  e4:	bl	0 <gomp_work_share_start>
  e8:	and	w1, w0, #0xff
  ec:	cbnz	w1, 1b4 <GOMP_sections2_start+0xf8>
  f0:	adrp	x0, 0 <gomp_tls_data>
  f4:	ldr	x0, [x0]
  f8:	mrs	x1, tpidr_el0
  fc:	add	x0, x1, x0
 100:	ldr	x0, [x0, #24]
 104:	ldr	x1, [x0, #88]
 108:	mov	x0, x20
 10c:	bl	0 <gomp_workshare_task_reduction_register>
 110:	cbz	x19, 28c <GOMP_sections2_start+0x1d0>
 114:	adrp	x0, 0 <gomp_tls_data>
 118:	ldr	x0, [x0]
 11c:	mrs	x1, tpidr_el0
 120:	add	x0, x1, x0
 124:	ldr	x0, [x0, #24]
 128:	ldr	x0, [x0, #32]
 12c:	str	x0, [x19]
 130:	b	28c <GOMP_sections2_start+0x1d0>
 134:	adrp	x0, 0 <gomp_tls_data>
 138:	ldr	x0, [x0]
 13c:	mrs	x1, tpidr_el0
 140:	add	x0, x1, x0
 144:	ldr	x0, [x0, #24]
 148:	mov	w1, #0x0                   	// #0
 14c:	add	x0, x0, #0x60
 150:	bl	0 <memset>
 154:	str	x0, [x19]
 158:	b	248 <GOMP_sections2_start+0x18c>
 15c:	bl	0 <gomp_ptrlock_set_slow>
 160:	b	28c <GOMP_sections2_start+0x1d0>
 164:	mov	x0, #0x0                   	// #0
 168:	bl	0 <gomp_work_share_start>
 16c:	and	w0, w0, #0xff
 170:	cbz	w0, 110 <GOMP_sections2_start+0x54>
 174:	adrp	x0, 0 <gomp_tls_data>
 178:	ldr	x0, [x0]
 17c:	mrs	x1, tpidr_el0
 180:	add	x0, x1, x0
 184:	ldr	x1, [x0, #24]
 188:	mov	w0, #0x2                   	// #2
 18c:	str	w0, [x1]
 190:	mov	x2, #0x1                   	// #1
 194:	str	x2, [x1, #8]
 198:	mov	w0, w21
 19c:	add	x0, x0, x2
 1a0:	str	x0, [x1, #16]
 1a4:	str	x2, [x1, #24]
 1a8:	str	x2, [x1, #72]
 1ac:	str	w2, [x1, #4]
 1b0:	b	214 <GOMP_sections2_start+0x158>
 1b4:	str	x23, [sp, #48]
 1b8:	adrp	x22, 0 <gomp_tls_data>
 1bc:	ldr	x22, [x22]
 1c0:	mrs	x0, tpidr_el0
 1c4:	add	x22, x0, x22
 1c8:	ldr	x1, [x22, #24]
 1cc:	mov	w0, #0x2                   	// #2
 1d0:	str	w0, [x1]
 1d4:	mov	x23, #0x1                   	// #1
 1d8:	str	x23, [x1, #8]
 1dc:	mov	w0, w21
 1e0:	add	x0, x0, x23
 1e4:	str	x0, [x1, #16]
 1e8:	str	x23, [x1, #24]
 1ec:	str	x23, [x1, #72]
 1f0:	str	w23, [x1, #4]
 1f4:	mov	x0, x20
 1f8:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
 1fc:	ldr	x0, [x22, #80]
 200:	ldr	x0, [x0, #40]
 204:	strb	w23, [x0, #50]
 208:	ldr	x0, [x22, #24]
 20c:	str	x20, [x0, #88]
 210:	ldr	x23, [sp, #48]
 214:	cbz	x19, 248 <GOMP_sections2_start+0x18c>
 218:	ldr	x2, [x19]
 21c:	cmp	x2, #0x20
 220:	b.ls	134 <GOMP_sections2_start+0x78>  // b.plast
 224:	adrp	x0, 0 <gomp_tls_data>
 228:	ldr	x0, [x0]
 22c:	mrs	x1, tpidr_el0
 230:	add	x0, x1, x0
 234:	ldr	x20, [x0, #24]
 238:	mov	x0, x2
 23c:	bl	0 <gomp_malloc_cleared>
 240:	str	x0, [x20, #32]
 244:	str	x0, [x19]
 248:	adrp	x0, 0 <gomp_tls_data>
 24c:	ldr	x0, [x0]
 250:	mrs	x1, tpidr_el0
 254:	add	x0, x1, x0
 258:	ldr	x0, [x0, #32]
 25c:	cbz	x0, 28c <GOMP_sections2_start+0x1d0>
 260:	add	x0, x0, #0x50
 264:	adrp	x1, 0 <gomp_tls_data>
 268:	ldr	x1, [x1]
 26c:	mrs	x2, tpidr_el0
 270:	add	x1, x2, x1
 274:	ldr	x2, [x1, #24]
 278:	ldxr	x1, [x0]
 27c:	stlxr	w3, x2, [x0]
 280:	cbnz	w3, 278 <GOMP_sections2_start+0x1bc>
 284:	cmp	x1, #0x1
 288:	b.ne	15c <GOMP_sections2_start+0xa0>  // b.any
 28c:	add	x1, sp, #0x40
 290:	add	x0, sp, #0x48
 294:	bl	0 <gomp_iter_dynamic_next>
 298:	ands	w0, w0, #0xff
 29c:	ldr	x0, [sp, #72]
 2a0:	csel	x0, x0, xzr, ne  // ne = any
 2a4:	ldp	x19, x20, [sp, #16]
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	ldp	x29, x30, [sp], #80
 2b0:	ret

00000000000002b4 <GOMP_sections_next>:
 2b4:	stp	x29, x30, [sp, #-32]!
 2b8:	mov	x29, sp
 2bc:	add	x1, sp, #0x10
 2c0:	add	x0, sp, #0x18
 2c4:	bl	0 <gomp_iter_dynamic_next>
 2c8:	ands	w0, w0, #0xff
 2cc:	ldr	x0, [sp, #24]
 2d0:	csel	x0, x0, xzr, ne  // ne = any
 2d4:	ldp	x29, x30, [sp], #32
 2d8:	ret

00000000000002dc <GOMP_parallel_sections_start>:
 2dc:	stp	x29, x30, [sp, #-48]!
 2e0:	mov	x29, sp
 2e4:	stp	x19, x20, [sp, #16]
 2e8:	stp	x21, x22, [sp, #32]
 2ec:	mov	x20, x0
 2f0:	mov	x21, x1
 2f4:	mov	w0, w2
 2f8:	mov	w19, w3
 2fc:	mov	w1, w3
 300:	bl	0 <gomp_resolve_num_threads>
 304:	mov	w22, w0
 308:	bl	0 <gomp_new_team>
 30c:	mov	x4, x0
 310:	mov	w0, #0x2                   	// #2
 314:	str	w0, [x4, #256]
 318:	mov	x3, #0x1                   	// #1
 31c:	str	x3, [x4, #264]
 320:	mov	w19, w19
 324:	add	x19, x19, x3
 328:	str	x19, [x4, #272]
 32c:	str	x3, [x4, #280]
 330:	str	x3, [x4, #328]
 334:	str	w3, [x4, #260]
 338:	mov	x5, #0x0                   	// #0
 33c:	mov	w3, #0x0                   	// #0
 340:	mov	w2, w22
 344:	mov	x1, x21
 348:	mov	x0, x20
 34c:	bl	0 <gomp_team_start>
 350:	ldp	x19, x20, [sp, #16]
 354:	ldp	x21, x22, [sp, #32]
 358:	ldp	x29, x30, [sp], #48
 35c:	ret

0000000000000360 <GOMP_parallel_sections>:
 360:	stp	x29, x30, [sp, #-64]!
 364:	mov	x29, sp
 368:	stp	x19, x20, [sp, #16]
 36c:	stp	x21, x22, [sp, #32]
 370:	str	x23, [sp, #48]
 374:	mov	x20, x0
 378:	mov	x21, x1
 37c:	mov	w0, w2
 380:	mov	w19, w3
 384:	mov	w23, w4
 388:	mov	w1, w3
 38c:	bl	0 <gomp_resolve_num_threads>
 390:	mov	w22, w0
 394:	bl	0 <gomp_new_team>
 398:	mov	x4, x0
 39c:	mov	w0, #0x2                   	// #2
 3a0:	str	w0, [x4, #256]
 3a4:	mov	x0, #0x1                   	// #1
 3a8:	str	x0, [x4, #264]
 3ac:	mov	w19, w19
 3b0:	add	x19, x19, x0
 3b4:	str	x19, [x4, #272]
 3b8:	str	x0, [x4, #280]
 3bc:	str	x0, [x4, #328]
 3c0:	str	w0, [x4, #260]
 3c4:	mov	x5, #0x0                   	// #0
 3c8:	mov	w3, w23
 3cc:	mov	w2, w22
 3d0:	mov	x1, x21
 3d4:	mov	x0, x20
 3d8:	bl	0 <gomp_team_start>
 3dc:	mov	x0, x21
 3e0:	blr	x20
 3e4:	bl	0 <gomp_ialias_GOMP_parallel_end>
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldp	x21, x22, [sp, #32]
 3f0:	ldr	x23, [sp, #48]
 3f4:	ldp	x29, x30, [sp], #64
 3f8:	ret

00000000000003fc <GOMP_sections_end>:
 3fc:	stp	x29, x30, [sp, #-16]!
 400:	mov	x29, sp
 404:	bl	0 <gomp_work_share_end>
 408:	ldp	x29, x30, [sp], #16
 40c:	ret

0000000000000410 <GOMP_sections_end_cancel>:
 410:	stp	x29, x30, [sp, #-16]!
 414:	mov	x29, sp
 418:	bl	0 <gomp_work_share_end_cancel>
 41c:	ldp	x29, x30, [sp], #16
 420:	ret

0000000000000424 <GOMP_sections_end_nowait>:
 424:	stp	x29, x30, [sp, #-16]!
 428:	mov	x29, sp
 42c:	bl	0 <gomp_work_share_end_nowait>
 430:	ldp	x29, x30, [sp], #16
 434:	ret

single.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_single_start>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 58 <GOMP_single_start+0x58>
  18:	adrp	x1, 0 <gomp_tls_data>
  1c:	ldr	x1, [x1]
  20:	mrs	x2, tpidr_el0
  24:	add	x1, x2, x1
  28:	ldr	x2, [x1, #64]
  2c:	add	x3, x2, #0x1
  30:	str	x3, [x1, #64]
  34:	add	x0, x0, #0x70
  38:	ldxr	x1, [x0]
  3c:	cmp	x1, x2
  40:	b.ne	4c <GOMP_single_start+0x4c>  // b.any
  44:	stlxr	w4, x3, [x0]
  48:	cbnz	w4, 38 <GOMP_single_start+0x38>
  4c:	dmb	ish
  50:	cset	w0, eq  // eq = none
  54:	ret
  58:	mov	w0, #0x1                   	// #1
  5c:	b	54 <GOMP_single_start+0x54>

0000000000000060 <GOMP_single_copy_start>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	mov	x29, sp
  68:	str	x19, [sp, #16]
  6c:	mov	x0, #0x0                   	// #0
  70:	bl	0 <gomp_work_share_start>
  74:	and	w0, w0, #0xff
  78:	cbz	w0, dc <GOMP_single_copy_start+0x7c>
  7c:	adrp	x0, 0 <gomp_tls_data>
  80:	ldr	x0, [x0]
  84:	mrs	x1, tpidr_el0
  88:	add	x0, x1, x0
  8c:	ldr	x19, [x0, #32]
  90:	cbz	x19, c4 <GOMP_single_copy_start+0x64>
  94:	add	x0, x19, #0x50
  98:	adrp	x1, 0 <gomp_tls_data>
  9c:	ldr	x1, [x1]
  a0:	mrs	x2, tpidr_el0
  a4:	add	x1, x2, x1
  a8:	ldr	x2, [x1, #24]
  ac:	ldxr	x1, [x0]
  b0:	stlxr	w3, x2, [x0]
  b4:	cbnz	w3, ac <GOMP_single_copy_start+0x4c>
  b8:	mov	x19, #0x0                   	// #0
  bc:	cmp	x1, #0x1
  c0:	b.ne	d4 <GOMP_single_copy_start+0x74>  // b.any
  c4:	mov	x0, x19
  c8:	ldr	x19, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	bl	0 <gomp_ptrlock_set_slow>
  d8:	b	c4 <GOMP_single_copy_start+0x64>
  dc:	adrp	x19, 0 <gomp_tls_data>
  e0:	ldr	x19, [x19]
  e4:	mrs	x0, tpidr_el0
  e8:	add	x19, x0, x19
  ec:	ldr	x0, [x19, #16]
  f0:	add	x0, x0, #0x80
  f4:	bl	0 <gomp_team_barrier_wait>
  f8:	ldr	x0, [x19, #24]
  fc:	ldr	x19, [x0, #72]
 100:	bl	0 <gomp_work_share_end_nowait>
 104:	b	c4 <GOMP_single_copy_start+0x64>

0000000000000108 <GOMP_single_copy_end>:
 108:	stp	x29, x30, [sp, #-16]!
 10c:	mov	x29, sp
 110:	adrp	x1, 0 <gomp_tls_data>
 114:	ldr	x1, [x1]
 118:	mrs	x2, tpidr_el0
 11c:	add	x1, x2, x1
 120:	ldr	x1, [x1, #16]
 124:	cbz	x1, 148 <GOMP_single_copy_end+0x40>
 128:	adrp	x2, 0 <gomp_tls_data>
 12c:	ldr	x2, [x2]
 130:	mrs	x3, tpidr_el0
 134:	add	x2, x3, x2
 138:	ldr	x2, [x2, #24]
 13c:	str	x0, [x2, #72]
 140:	add	x0, x1, #0x80
 144:	bl	0 <gomp_team_barrier_wait>
 148:	bl	0 <gomp_work_share_end_nowait>
 14c:	ldp	x29, x30, [sp], #16
 150:	ret

task.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <htab_find>:
       0:	mov	x5, x0
       4:	ldr	x6, [x1]
       8:	eor	x3, x6, x6, lsr #32
       c:	ldr	w8, [x0, #24]
      10:	adrp	x0, 0 <htab_find>
      14:	add	x0, x0, #0x0
      18:	ubfiz	x2, x8, #4, #32
      1c:	add	x1, x0, x2
      20:	ldr	w7, [x0, x2]
      24:	ldr	w10, [x1, #12]
      28:	and	x2, x3, #0xffffffff
      2c:	ldr	w1, [x1, #4]
      30:	mul	x1, x1, x2
      34:	lsr	x0, x1, #32
      38:	sub	w1, w3, w0
      3c:	add	w1, w0, w1, lsr #1
      40:	lsr	w1, w1, w10
      44:	msub	w1, w1, w7, w3
      48:	add	x0, x5, w1, uxtw #3
      4c:	ldr	x0, [x0, #32]
      50:	cbz	x0, d0 <htab_find+0xd0>
      54:	cmp	x0, #0x1
      58:	b.eq	68 <htab_find+0x68>  // b.none
      5c:	ldr	x4, [x0]
      60:	cmp	x6, x4
      64:	b.eq	d0 <htab_find+0xd0>  // b.none
      68:	ldr	x4, [x5]
      6c:	ubfiz	x8, x8, #4, #32
      70:	adrp	x9, 0 <htab_find>
      74:	add	x9, x9, #0x0
      78:	add	x8, x9, x8
      7c:	ldr	w0, [x8, #8]
      80:	mul	x0, x0, x2
      84:	lsr	x0, x0, #32
      88:	add	w8, w3, #0x1
      8c:	sub	w2, w3, w0
      90:	add	w2, w0, w2, lsr #1
      94:	lsr	w2, w2, w10
      98:	sub	w7, w7, #0x2
      9c:	msub	w2, w2, w7, w8
      a0:	add	w1, w1, w2
      a4:	sub	w3, w1, w4
      a8:	cmp	x4, w1, uxtw
      ac:	csel	w1, w3, w1, ls  // ls = plast
      b0:	add	x3, x5, w1, uxtw #3
      b4:	ldr	x0, [x3, #32]
      b8:	cbz	x0, d0 <htab_find+0xd0>
      bc:	cmp	x0, #0x1
      c0:	b.eq	a0 <htab_find+0xa0>  // b.none
      c4:	ldr	x3, [x0]
      c8:	cmp	x6, x3
      cc:	b.ne	a0 <htab_find+0xa0>  // b.any
      d0:	ret

00000000000000d4 <gomp_clear_parent_in_tree>:
      d4:	cbz	x1, 140 <gomp_clear_parent_in_tree+0x6c>
      d8:	stp	x29, x30, [sp, #-48]!
      dc:	mov	x29, sp
      e0:	stp	x19, x20, [sp, #16]
      e4:	str	x21, [sp, #32]
      e8:	mov	x19, x0
      ec:	mov	x0, x1
      f0:	ldr	x21, [x1, #24]
      f4:	ldr	x20, [x1, #32]
      f8:	ldr	x2, [x1, #8]
      fc:	cbz	x2, 114 <gomp_clear_parent_in_tree+0x40>
     100:	stur	xzr, [x2, #-112]
     104:	ldr	x2, [x2]
     108:	ldr	x1, [x0, #8]
     10c:	cmp	x2, x1
     110:	b.ne	100 <gomp_clear_parent_in_tree+0x2c>  // b.any
     114:	bl	0 <free>
     118:	mov	x1, x21
     11c:	mov	x0, x19
     120:	bl	d4 <gomp_clear_parent_in_tree>
     124:	mov	x1, x20
     128:	mov	x0, x19
     12c:	bl	d4 <gomp_clear_parent_in_tree>
     130:	ldp	x19, x20, [sp, #16]
     134:	ldr	x21, [sp, #32]
     138:	ldp	x29, x30, [sp], #48
     13c:	ret
     140:	ret

0000000000000144 <htab_create>:
     144:	stp	x29, x30, [sp, #-48]!
     148:	mov	x29, sp
     14c:	stp	x19, x20, [sp, #16]
     150:	stp	x21, x22, [sp, #32]
     154:	mov	w3, #0x1e                  	// #30
     158:	mov	w20, #0x0                   	// #0
     15c:	adrp	x2, 0 <htab_find>
     160:	add	x2, x2, #0x0
     164:	cmp	w3, w20
     168:	b.eq	194 <htab_create+0x50>  // b.none
     16c:	sub	w1, w3, w20
     170:	add	w1, w20, w1, lsr #1
     174:	ubfiz	x4, x1, #4, #32
     178:	ldr	w4, [x2, x4]
     17c:	cmp	x0, x4
     180:	b.hi	18c <htab_create+0x48>  // b.pmore
     184:	mov	w3, w1
     188:	b	164 <htab_create+0x20>
     18c:	add	w20, w1, #0x1
     190:	b	164 <htab_create+0x20>
     194:	ubfiz	x1, x20, #4, #32
     198:	adrp	x2, 0 <htab_find>
     19c:	add	x2, x2, #0x0
     1a0:	ldr	w22, [x2, x1]
     1a4:	cmp	x0, x22
     1a8:	b.hi	1f4 <htab_create+0xb0>  // b.pmore
     1ac:	add	x21, x22, #0x4
     1b0:	lsl	x21, x21, #3
     1b4:	mov	x0, x21
     1b8:	bl	0 <gomp_malloc>
     1bc:	mov	x19, x0
     1c0:	str	x22, [x0]
     1c4:	str	xzr, [x0, #8]
     1c8:	str	xzr, [x0, #16]
     1cc:	str	w20, [x0, #24]
     1d0:	sub	x2, x21, #0x20
     1d4:	mov	w1, #0x0                   	// #0
     1d8:	add	x0, x0, #0x20
     1dc:	bl	0 <memset>
     1e0:	mov	x0, x19
     1e4:	ldp	x19, x20, [sp, #16]
     1e8:	ldp	x21, x22, [sp, #32]
     1ec:	ldp	x29, x30, [sp], #48
     1f0:	ret
     1f4:	bl	0 <abort>

00000000000001f8 <find_empty_slot_for_expand>:
     1f8:	mov	x5, x0
     1fc:	ldr	w7, [x0, #24]
     200:	adrp	x0, 0 <htab_find>
     204:	add	x0, x0, #0x0
     208:	ubfiz	x3, x7, #4, #32
     20c:	add	x2, x0, x3
     210:	ldr	w6, [x0, x3]
     214:	ldr	w8, [x2, #12]
     218:	mov	w9, w1
     21c:	ldr	w2, [x2, #4]
     220:	mul	x2, x2, x9
     224:	lsr	x4, x2, #32
     228:	sub	w2, w1, w4
     22c:	add	w2, w4, w2, lsr #1
     230:	lsr	w2, w2, w8
     234:	msub	w2, w2, w6, w1
     238:	add	x4, x5, #0x20
     23c:	add	x0, x4, w2, uxtw #3
     240:	ldr	x3, [x4, w2, uxtw #3]
     244:	cbz	x3, 2c4 <find_empty_slot_for_expand+0xcc>
     248:	stp	x29, x30, [sp, #-16]!
     24c:	mov	x29, sp
     250:	cmp	x3, #0x1
     254:	b.eq	2b8 <find_empty_slot_for_expand+0xc0>  // b.none
     258:	ldr	x5, [x5]
     25c:	ubfiz	x7, x7, #4, #32
     260:	adrp	x0, 0 <htab_find>
     264:	add	x0, x0, #0x0
     268:	add	x0, x0, x7
     26c:	ldr	w3, [x0, #8]
     270:	mul	x3, x3, x9
     274:	lsr	x3, x3, #32
     278:	add	w0, w1, #0x1
     27c:	sub	w1, w1, w3
     280:	add	w3, w3, w1, lsr #1
     284:	lsr	w3, w3, w8
     288:	sub	w6, w6, #0x2
     28c:	msub	w3, w3, w6, w0
     290:	add	w2, w2, w3
     294:	sub	w0, w2, w5
     298:	cmp	x5, w2, uxtw
     29c:	csel	w2, w0, w2, ls  // ls = plast
     2a0:	add	x0, x4, w2, uxtw #3
     2a4:	ldr	x1, [x4, w2, uxtw #3]
     2a8:	cbz	x1, 2bc <find_empty_slot_for_expand+0xc4>
     2ac:	cmp	x1, #0x1
     2b0:	b.ne	290 <find_empty_slot_for_expand+0x98>  // b.any
     2b4:	bl	0 <abort>
     2b8:	bl	0 <abort>
     2bc:	ldp	x29, x30, [sp], #16
     2c0:	ret
     2c4:	ret

00000000000002c8 <htab_find_slot>:
     2c8:	stp	x29, x30, [sp, #-96]!
     2cc:	mov	x29, sp
     2d0:	stp	x19, x20, [sp, #16]
     2d4:	stp	x21, x22, [sp, #32]
     2d8:	mov	x20, x1
     2dc:	mov	w21, w2
     2e0:	ldr	x5, [x1]
     2e4:	eor	x22, x5, x5, lsr #32
     2e8:	ldr	x19, [x0]
     2ec:	ldr	x6, [x19]
     2f0:	cmp	w2, #0x1
     2f4:	b.eq	394 <htab_find_slot+0xcc>  // b.none
     2f8:	ldr	w2, [x19, #24]
     2fc:	adrp	x0, 0 <htab_find>
     300:	add	x0, x0, #0x0
     304:	ubfiz	x1, x2, #4, #32
     308:	add	x3, x0, x1
     30c:	ldr	w4, [x0, x1]
     310:	ldr	w8, [x3, #12]
     314:	and	x5, x22, #0xffffffff
     318:	ldr	w1, [x3, #4]
     31c:	mul	x1, x1, x5
     320:	lsr	x1, x1, #32
     324:	sub	w3, w22, w1
     328:	add	w3, w1, w3, lsr #1
     32c:	lsr	w3, w3, w8
     330:	msub	w3, w3, w4, w22
     334:	add	x0, x19, w3, uxtw #3
     338:	ldr	x0, [x0, #32]
     33c:	cbz	x0, 518 <htab_find_slot+0x250>
     340:	cmp	x0, #0x1
     344:	b.eq	470 <htab_find_slot+0x1a8>  // b.none
     348:	ldr	x7, [x0]
     34c:	ldr	x1, [x20]
     350:	mov	x0, #0x0                   	// #0
     354:	cmp	x7, x1
     358:	b.eq	480 <htab_find_slot+0x1b8>  // b.none
     35c:	ubfiz	x7, x2, #4, #32
     360:	adrp	x2, 0 <htab_find>
     364:	add	x2, x2, #0x0
     368:	add	x2, x2, x7
     36c:	ldr	w1, [x2, #8]
     370:	mul	x1, x1, x5
     374:	lsr	x1, x1, #32
     378:	add	w2, w22, #0x1
     37c:	sub	w5, w22, w1
     380:	add	w5, w1, w5, lsr #1
     384:	lsr	w5, w5, w8
     388:	sub	w4, w4, #0x2
     38c:	msub	w5, w5, w4, w2
     390:	b	4a4 <htab_find_slot+0x1dc>
     394:	stp	x23, x24, [sp, #48]
     398:	mov	x24, x0
     39c:	ldr	x0, [x19, #8]
     3a0:	add	x1, x6, x6, lsl #1
     3a4:	cmp	x1, x0, lsl #2
     3a8:	b.ls	3b4 <htab_find_slot+0xec>  // b.plast
     3ac:	ldp	x23, x24, [sp, #48]
     3b0:	b	2f8 <htab_find_slot+0x30>
     3b4:	stp	x25, x26, [sp, #64]
     3b8:	str	x27, [sp, #80]
     3bc:	add	x23, x19, #0x20
     3c0:	add	x26, x23, x6, lsl #3
     3c4:	ldr	x1, [x19, #16]
     3c8:	sub	x1, x0, x1
     3cc:	lsl	x0, x1, #1
     3d0:	cmp	x6, x1, lsl #1
     3d4:	b.cc	400 <htab_find_slot+0x138>  // b.lo, b.ul, b.last
     3d8:	lsl	x1, x1, #3
     3dc:	cmp	x1, #0x20
     3e0:	mov	x2, #0x20                  	// #32
     3e4:	csel	x1, x1, x2, cs  // cs = hs, nlast
     3e8:	cmp	x6, x1
     3ec:	b.hi	400 <htab_find_slot+0x138>  // b.pmore
     3f0:	sub	x0, x6, #0x1
     3f4:	bl	144 <htab_create>
     3f8:	mov	x27, x0
     3fc:	b	408 <htab_find_slot+0x140>
     400:	bl	144 <htab_create>
     404:	mov	x27, x0
     408:	ldr	x0, [x19, #8]
     40c:	ldr	x1, [x19, #16]
     410:	sub	x0, x0, x1
     414:	str	x0, [x27, #8]
     418:	b	43c <htab_find_slot+0x174>
     41c:	ldr	x1, [x25]
     420:	eor	x1, x1, x1, lsr #32
     424:	mov	x0, x27
     428:	bl	1f8 <find_empty_slot_for_expand>
     42c:	str	x25, [x0]
     430:	add	x23, x23, #0x8
     434:	cmp	x26, x23
     438:	b.ls	44c <htab_find_slot+0x184>  // b.plast
     43c:	ldr	x25, [x23]
     440:	cmp	x25, #0x1
     444:	b.ls	430 <htab_find_slot+0x168>  // b.plast
     448:	b	41c <htab_find_slot+0x154>
     44c:	mov	x0, x19
     450:	bl	0 <free>
     454:	str	x27, [x24]
     458:	ldr	x6, [x27]
     45c:	mov	x19, x27
     460:	ldp	x23, x24, [sp, #48]
     464:	ldp	x25, x26, [sp, #64]
     468:	ldr	x27, [sp, #80]
     46c:	b	2f8 <htab_find_slot+0x30>
     470:	ubfiz	x0, x3, #3, #32
     474:	add	x0, x0, #0x20
     478:	add	x0, x19, x0
     47c:	b	35c <htab_find_slot+0x94>
     480:	ubfiz	x0, x3, #3, #32
     484:	add	x0, x0, #0x20
     488:	add	x0, x19, x0
     48c:	b	4e4 <htab_find_slot+0x21c>
     490:	ubfiz	x1, x3, #3, #32
     494:	add	x1, x1, #0x20
     498:	add	x1, x19, x1
     49c:	cmp	x0, #0x0
     4a0:	csel	x0, x1, x0, eq  // eq = none
     4a4:	add	w3, w3, w5
     4a8:	sub	w1, w3, w6
     4ac:	cmp	x6, w3, uxtw
     4b0:	csel	w3, w1, w3, ls  // ls = plast
     4b4:	add	x1, x19, w3, uxtw #3
     4b8:	ldr	x4, [x1, #32]
     4bc:	cbz	x4, 4f4 <htab_find_slot+0x22c>
     4c0:	cmp	x4, #0x1
     4c4:	b.eq	490 <htab_find_slot+0x1c8>  // b.none
     4c8:	ldr	x2, [x4]
     4cc:	ldr	x1, [x20]
     4d0:	cmp	x2, x1
     4d4:	b.ne	4a4 <htab_find_slot+0x1dc>  // b.any
     4d8:	ubfiz	x0, x3, #3, #32
     4dc:	add	x0, x0, #0x20
     4e0:	add	x0, x19, x0
     4e4:	ldp	x19, x20, [sp, #16]
     4e8:	ldp	x21, x22, [sp, #32]
     4ec:	ldp	x29, x30, [sp], #96
     4f0:	ret
     4f4:	cbz	w21, 510 <htab_find_slot+0x248>
     4f8:	cbz	x0, 51c <htab_find_slot+0x254>
     4fc:	ldr	x1, [x19, #16]
     500:	sub	x1, x1, #0x1
     504:	str	x1, [x19, #16]
     508:	str	xzr, [x0]
     50c:	b	4e4 <htab_find_slot+0x21c>
     510:	mov	x0, x4
     514:	b	4e4 <htab_find_slot+0x21c>
     518:	cbz	w21, 4e4 <htab_find_slot+0x21c>
     51c:	ldr	x0, [x19, #8]
     520:	add	x0, x0, #0x1
     524:	str	x0, [x19, #8]
     528:	ubfiz	x0, x3, #3, #32
     52c:	add	x0, x0, #0x20
     530:	add	x0, x19, x0
     534:	b	4e4 <htab_find_slot+0x21c>

0000000000000538 <gomp_task_handle_depend>:
     538:	stp	x29, x30, [sp, #-96]!
     53c:	mov	x29, sp
     540:	stp	x19, x20, [sp, #16]
     544:	stp	x25, x26, [sp, #64]
     548:	stp	x27, x28, [sp, #80]
     54c:	mov	x20, x0
     550:	mov	x27, x1
     554:	ldr	x3, [x2]
     558:	cbz	x3, 5c0 <gomp_task_handle_depend+0x88>
     55c:	ldr	x4, [x2, #8]
     560:	add	x0, x0, #0xd0
     564:	mov	x25, #0x0                   	// #0
     568:	add	x2, x2, #0x10
     56c:	ldr	x1, [x2, x25, lsl #3]
     570:	str	x1, [x0]
     574:	cmp	x4, x25
     578:	cset	w1, ls  // ls = plast
     57c:	strb	w1, [x0, #32]
     580:	add	x25, x25, #0x1
     584:	add	x0, x0, #0x28
     588:	cmp	x3, x25
     58c:	b.ne	56c <gomp_task_handle_depend+0x34>  // b.any
     590:	str	x25, [x20, #72]
     594:	str	xzr, [x20, #80]
     598:	ldr	x0, [x27, #56]
     59c:	cbz	x0, 69c <gomp_task_handle_depend+0x164>
     5a0:	cbz	x25, 81c <gomp_task_handle_depend+0x2e4>
     5a4:	stp	x21, x22, [sp, #32]
     5a8:	stp	x23, x24, [sp, #48]
     5ac:	add	x22, x20, #0xd0
     5b0:	add	x25, x25, x25, lsl #2
     5b4:	add	x25, x22, x25, lsl #3
     5b8:	add	x27, x27, #0x38
     5bc:	b	840 <gomp_task_handle_depend+0x308>
     5c0:	ldr	x25, [x2, #8]
     5c4:	ldr	x8, [x2, #16]
     5c8:	ldr	x0, [x2, #24]
     5cc:	add	x8, x8, x0
     5d0:	ldr	x6, [x2, #32]
     5d4:	add	x6, x6, x8
     5d8:	cmp	x25, x6
     5dc:	b.ls	64c <gomp_task_handle_depend+0x114>  // b.plast
     5e0:	mov	x4, x6
     5e4:	mov	x3, #0x0                   	// #0
     5e8:	add	x7, x2, #0x28
     5ec:	b	624 <gomp_task_handle_depend+0xec>
     5f0:	sub	x5, x1, #0x2
     5f4:	cmp	x5, #0x2
     5f8:	b.hi	638 <gomp_task_handle_depend+0x100>  // b.pmore
     5fc:	ldr	x5, [x0]
     600:	lsl	x0, x3, #2
     604:	add	x1, x0, x3
     608:	add	x1, x20, x1, lsl #3
     60c:	str	x5, [x1, #208]
     610:	strb	wzr, [x1, #240]
     614:	add	x3, x3, #0x1
     618:	add	x4, x4, #0x1
     61c:	cmp	x25, x4
     620:	b.eq	898 <gomp_task_handle_depend+0x360>  // b.none
     624:	ldr	x0, [x7, x4, lsl #3]
     628:	ldr	x1, [x0, #8]
     62c:	cmp	x1, #0x1
     630:	b.ne	5f0 <gomp_task_handle_depend+0xb8>  // b.any
     634:	b	618 <gomp_task_handle_depend+0xe0>
     638:	stp	x21, x22, [sp, #32]
     63c:	stp	x23, x24, [sp, #48]
     640:	adrp	x0, 0 <htab_find>
     644:	add	x0, x0, #0x0
     648:	bl	0 <gomp_fatal>
     64c:	cbz	x6, 658 <gomp_task_handle_depend+0x120>
     650:	mov	x3, #0x0                   	// #0
     654:	b	89c <gomp_task_handle_depend+0x364>
     658:	mov	x3, x6
     65c:	b	8dc <gomp_task_handle_depend+0x3a4>
     660:	add	x6, x6, #0x1
     664:	cmp	x25, x6
     668:	b.ls	590 <gomp_task_handle_depend+0x58>  // b.plast
     66c:	ldr	x0, [x2, x6, lsl #3]
     670:	ldr	x1, [x0, #8]
     674:	cmp	x1, #0x1
     678:	b.ne	660 <gomp_task_handle_depend+0x128>  // b.any
     67c:	ldr	x4, [x0]
     680:	lsl	x0, x3, #2
     684:	add	x1, x0, x3
     688:	add	x1, x20, x1, lsl #3
     68c:	str	x4, [x1, #208]
     690:	strb	w5, [x1, #240]
     694:	add	x3, x3, #0x1
     698:	b	660 <gomp_task_handle_depend+0x128>
     69c:	lsl	x0, x25, #1
     6a0:	cmp	x0, #0xc
     6a4:	mov	x1, #0xc                   	// #12
     6a8:	csel	x0, x0, x1, cs  // cs = hs, nlast
     6ac:	bl	144 <htab_create>
     6b0:	str	x0, [x27, #56]
     6b4:	b	5a0 <gomp_task_handle_depend+0x68>
     6b8:	ldrb	w0, [x19, #32]
     6bc:	cmp	w0, #0x0
     6c0:	csel	x23, x23, x19, ne  // ne = any
     6c4:	ldr	x21, [x19, #24]
     6c8:	ldr	x0, [x21, #48]
     6cc:	cbz	x0, 748 <gomp_task_handle_depend+0x210>
     6d0:	ldr	x1, [x0]
     6d4:	cbz	x1, 6e8 <gomp_task_handle_depend+0x1b0>
     6d8:	add	x2, x1, #0x1
     6dc:	ldr	x2, [x0, x2, lsl #3]
     6e0:	cmp	x2, x20
     6e4:	b.eq	718 <gomp_task_handle_depend+0x1e0>  // b.none
     6e8:	ldr	x2, [x0, #8]
     6ec:	cmp	x1, x2
     6f0:	b.eq	780 <gomp_task_handle_depend+0x248>  // b.none
     6f4:	ldr	x1, [x21, #48]
     6f8:	ldr	x0, [x1]
     6fc:	add	x2, x0, #0x1
     700:	str	x2, [x1]
     704:	add	x0, x0, #0x2
     708:	str	x20, [x1, x0, lsl #3]
     70c:	ldr	x0, [x20, #80]
     710:	add	x0, x0, #0x1
     714:	str	x0, [x20, #80]
     718:	ldr	x0, [x19, #8]
     71c:	mov	x1, x19
     720:	cbz	x0, 7a8 <gomp_task_handle_depend+0x270>
     724:	mov	x19, x0
     728:	ldrb	w0, [x19, #34]
     72c:	cbnz	w0, 7a8 <gomp_task_handle_depend+0x270>
     730:	ldrb	w0, [x24, #32]
     734:	cbz	w0, 6b8 <gomp_task_handle_depend+0x180>
     738:	ldrb	w0, [x19, #32]
     73c:	cbnz	w0, 718 <gomp_task_handle_depend+0x1e0>
     740:	mov	x23, x19
     744:	b	6c4 <gomp_task_handle_depend+0x18c>
     748:	mov	x0, x28
     74c:	bl	0 <gomp_malloc>
     750:	str	x0, [x21, #48]
     754:	mov	x1, #0x1                   	// #1
     758:	str	x1, [x0]
     75c:	ldr	x0, [x21, #48]
     760:	mov	x1, #0x6                   	// #6
     764:	str	x1, [x0, #8]
     768:	ldr	x0, [x21, #48]
     76c:	str	x20, [x0, #16]
     770:	ldr	x0, [x20, #80]
     774:	add	x0, x0, #0x1
     778:	str	x0, [x20, #80]
     77c:	b	718 <gomp_task_handle_depend+0x1e0>
     780:	add	x2, x2, #0x1
     784:	lsl	x2, x2, #1
     788:	str	x2, [x0, #8]
     78c:	ldr	x0, [x21, #48]
     790:	ldr	x1, [x0, #8]
     794:	add	x1, x1, #0x2
     798:	lsl	x1, x1, #3
     79c:	bl	0 <gomp_realloc>
     7a0:	str	x0, [x21, #48]
     7a4:	b	6f4 <gomp_task_handle_depend+0x1bc>
     7a8:	ldr	x0, [x26]
     7ac:	str	x0, [x24, #8]
     7b0:	str	x24, [x0, #16]
     7b4:	str	x24, [x26]
     7b8:	ldrb	w0, [x24, #32]
     7bc:	eor	w0, w0, #0x1
     7c0:	cmp	x23, #0x0
     7c4:	cset	w2, ne  // ne = any
     7c8:	tst	w2, w0
     7cc:	b.eq	834 <gomp_task_handle_depend+0x2fc>  // b.none
     7d0:	cmp	x23, x1
     7d4:	b.eq	808 <gomp_task_handle_depend+0x2d0>  // b.none
     7d8:	ldr	x2, [x23, #8]
     7dc:	ldr	x0, [x23, #16]
     7e0:	str	x0, [x2, #16]
     7e4:	ldr	x2, [x23, #8]
     7e8:	str	x2, [x0, #8]
     7ec:	ldr	x0, [x1, #8]
     7f0:	str	x0, [x23, #8]
     7f4:	str	x1, [x23, #16]
     7f8:	str	x23, [x1, #8]
     7fc:	ldr	x0, [x23, #8]
     800:	cbz	x0, 808 <gomp_task_handle_depend+0x2d0>
     804:	str	x23, [x0, #16]
     808:	mov	w0, #0x1                   	// #1
     80c:	strb	w0, [x23, #34]
     810:	b	834 <gomp_task_handle_depend+0x2fc>
     814:	ldp	x21, x22, [sp, #32]
     818:	ldp	x23, x24, [sp, #48]
     81c:	ldp	x19, x20, [sp, #16]
     820:	ldp	x25, x26, [sp, #64]
     824:	ldp	x27, x28, [sp, #80]
     828:	ldp	x29, x30, [sp], #96
     82c:	ret
     830:	str	x22, [x0]
     834:	add	x22, x22, #0x28
     838:	cmp	x25, x22
     83c:	b.eq	814 <gomp_task_handle_depend+0x2dc>  // b.none
     840:	mov	x24, x22
     844:	str	xzr, [x22, #8]
     848:	str	xzr, [x22, #16]
     84c:	str	x20, [x22, #24]
     850:	strb	wzr, [x22, #33]
     854:	strb	wzr, [x22, #34]
     858:	mov	w2, #0x1                   	// #1
     85c:	mov	x1, x22
     860:	mov	x0, x27
     864:	bl	2c8 <htab_find_slot>
     868:	mov	x26, x0
     86c:	ldr	x19, [x0]
     870:	cbz	x19, 830 <gomp_task_handle_depend+0x2f8>
     874:	ldr	x0, [x19, #24]
     878:	mov	x1, #0x0                   	// #0
     87c:	mov	x23, #0x0                   	// #0
     880:	mov	x28, #0x40                  	// #64
     884:	cmp	x0, x20
     888:	b.ne	728 <gomp_task_handle_depend+0x1f0>  // b.any
     88c:	mov	w0, #0x1                   	// #1
     890:	strb	w0, [x22, #33]
     894:	b	834 <gomp_task_handle_depend+0x2fc>
     898:	cbz	x6, 8e4 <gomp_task_handle_depend+0x3ac>
     89c:	add	x1, x3, x3, lsl #2
     8a0:	add	x1, x20, x1, lsl #3
     8a4:	mov	x0, #0x0                   	// #0
     8a8:	add	x5, x2, #0x28
     8ac:	ldr	x4, [x5, x0, lsl #3]
     8b0:	str	x4, [x1, #208]
     8b4:	cmp	x8, x0
     8b8:	cset	w4, ls  // ls = plast
     8bc:	strb	w4, [x1, #240]
     8c0:	add	x0, x0, #0x1
     8c4:	add	x1, x1, #0x28
     8c8:	cmp	x6, x0
     8cc:	b.hi	8ac <gomp_task_handle_depend+0x374>  // b.pmore
     8d0:	cmp	x6, #0x0
     8d4:	csinc	x0, x6, xzr, ne  // ne = any
     8d8:	add	x3, x3, x0
     8dc:	cmp	x25, x6
     8e0:	b.ls	590 <gomp_task_handle_depend+0x58>  // b.plast
     8e4:	add	x2, x2, #0x28
     8e8:	mov	w5, #0x1                   	// #1
     8ec:	b	66c <gomp_task_handle_depend+0x134>

00000000000008f0 <gomp_task_run_post_handle_depend_hash>:
     8f0:	stp	x29, x30, [sp, #-80]!
     8f4:	mov	x29, sp
     8f8:	stp	x21, x22, [sp, #32]
     8fc:	stp	x23, x24, [sp, #48]
     900:	mov	x22, x0
     904:	ldr	x23, [x0]
     908:	ldr	x0, [x0, #72]
     90c:	cbz	x0, 9e8 <gomp_task_run_post_handle_depend_hash+0xf8>
     910:	stp	x19, x20, [sp, #16]
     914:	stp	x25, x26, [sp, #64]
     918:	add	x19, x22, #0xd8
     91c:	mov	x20, #0x0                   	// #0
     920:	add	x24, x23, #0x38
     924:	mov	x25, #0x1                   	// #1
     928:	b	950 <gomp_task_run_post_handle_depend_hash+0x60>
     92c:	ldr	x0, [x21, #8]
     930:	cbz	x0, 970 <gomp_task_run_post_handle_depend_hash+0x80>
     934:	ldr	x1, [x21]
     938:	str	x1, [x0, #8]
     93c:	add	x20, x20, #0x1
     940:	add	x19, x19, #0x28
     944:	ldr	x1, [x22, #72]
     948:	cmp	x1, x20
     94c:	b.ls	9e0 <gomp_task_run_post_handle_depend_hash+0xf0>  // b.plast
     950:	mov	x21, x19
     954:	ldrb	w1, [x19, #25]
     958:	cbnz	w1, 93c <gomp_task_run_post_handle_depend_hash+0x4c>
     95c:	ldr	x0, [x19]
     960:	cbz	x0, 92c <gomp_task_run_post_handle_depend_hash+0x3c>
     964:	ldr	x1, [x19, #8]
     968:	str	x1, [x0, #16]
     96c:	b	92c <gomp_task_run_post_handle_depend_hash+0x3c>
     970:	sub	x26, x19, #0x8
     974:	mov	w2, #0x0                   	// #0
     978:	mov	x1, x26
     97c:	mov	x0, x24
     980:	bl	2c8 <htab_find_slot>
     984:	ldr	x1, [x0]
     988:	cmp	x1, x26
     98c:	b.ne	9a0 <gomp_task_run_post_handle_depend_hash+0xb0>  // b.any
     990:	ldr	x1, [x21]
     994:	cbz	x1, 9a4 <gomp_task_run_post_handle_depend_hash+0xb4>
     998:	str	x1, [x0]
     99c:	b	93c <gomp_task_run_post_handle_depend_hash+0x4c>
     9a0:	bl	0 <abort>
     9a4:	ldr	x1, [x23, #56]
     9a8:	add	x3, x1, #0x20
     9ac:	cmp	x0, x3
     9b0:	b.cc	9dc <gomp_task_run_post_handle_depend_hash+0xec>  // b.lo, b.ul, b.last
     9b4:	ldr	x2, [x1]
     9b8:	add	x2, x3, x2, lsl #3
     9bc:	cmp	x0, x2
     9c0:	ccmp	x19, #0x9, #0x4, cc  // cc = lo, ul, last
     9c4:	b.eq	9dc <gomp_task_run_post_handle_depend_hash+0xec>  // b.none
     9c8:	str	x25, [x0]
     9cc:	ldr	x0, [x1, #16]
     9d0:	add	x0, x0, #0x1
     9d4:	str	x0, [x1, #16]
     9d8:	b	93c <gomp_task_run_post_handle_depend_hash+0x4c>
     9dc:	bl	0 <abort>
     9e0:	ldp	x19, x20, [sp, #16]
     9e4:	ldp	x25, x26, [sp, #64]
     9e8:	ldp	x21, x22, [sp, #32]
     9ec:	ldp	x23, x24, [sp, #48]
     9f0:	ldp	x29, x30, [sp], #80
     9f4:	ret

00000000000009f8 <gomp_mutex_unlock>:
     9f8:	ldxr	w1, [x0]
     9fc:	stlxr	w2, wzr, [x0]
     a00:	cbnz	w2, 9f8 <gomp_mutex_unlock>
     a04:	tbnz	w1, #31, a0c <gomp_mutex_unlock+0x14>
     a08:	ret
     a0c:	stp	x29, x30, [sp, #-16]!
     a10:	mov	x29, sp
     a14:	bl	0 <gomp_mutex_unlock_slow>
     a18:	ldp	x29, x30, [sp], #16
     a1c:	ret

0000000000000a20 <gomp_task_run_pre>:
     a20:	stp	x29, x30, [sp, #-80]!
     a24:	mov	x29, sp
     a28:	stp	x19, x20, [sp, #16]
     a2c:	str	x21, [sp, #32]
     a30:	mov	x19, x0
     a34:	mov	x20, x2
     a38:	cbz	x1, a78 <gomp_task_run_pre+0x58>
     a3c:	mov	x0, x1
     a40:	ldr	x1, [x1, #8]
     a44:	cbnz	x1, b2c <gomp_task_run_pre+0x10c>
     a48:	add	x2, x19, #0x70
     a4c:	ldr	x1, [x0, #24]
     a50:	cmp	x2, x1
     a54:	b.eq	bf0 <gomp_task_run_pre+0x1d0>  // b.none
     a58:	ldr	x3, [x19, #112]
     a5c:	cmp	x1, x3
     a60:	b.eq	a70 <gomp_task_run_pre+0x50>  // b.none
     a64:	ldr	w1, [x3, #88]
     a68:	cmp	w1, #0x2
     a6c:	b.eq	bfc <gomp_task_run_pre+0x1dc>  // b.none
     a70:	ldrb	w1, [x19, #207]
     a74:	cbnz	w1, c34 <gomp_task_run_pre+0x214>
     a78:	ldr	x21, [x19, #40]
     a7c:	cbz	x21, ab8 <gomp_task_run_pre+0x98>
     a80:	ldr	x0, [x21, #8]
     a84:	cbnz	x0, c70 <gomp_task_run_pre+0x250>
     a88:	add	x1, x19, #0x80
     a8c:	ldr	x0, [x21, #24]
     a90:	cmp	x1, x0
     a94:	b.eq	d34 <gomp_task_run_pre+0x314>  // b.none
     a98:	ldr	x2, [x19, #128]
     a9c:	cmp	x0, x2
     aa0:	b.eq	ab0 <gomp_task_run_pre+0x90>  // b.none
     aa4:	ldr	w0, [x2, #72]
     aa8:	cmp	w0, #0x2
     aac:	b.eq	d40 <gomp_task_run_pre+0x320>  // b.none
     ab0:	ldrb	w0, [x19, #207]
     ab4:	cbnz	w0, d78 <gomp_task_run_pre+0x358>
     ab8:	ldr	x0, [x20, #1288]
     abc:	cbnz	x0, db4 <gomp_task_run_pre+0x394>
     ac0:	add	x1, x19, #0x60
     ac4:	ldr	x2, [x19, #104]
     ac8:	ldr	x0, [x19, #96]
     acc:	str	x0, [x2]
     ad0:	ldr	x2, [x19, #104]
     ad4:	str	x2, [x0, #8]
     ad8:	ldr	x0, [x20, #1304]
     adc:	cmp	x1, x0
     ae0:	b.eq	dc8 <gomp_task_run_pre+0x3a8>  // b.none
     ae4:	str	xzr, [x19, #96]
     ae8:	str	xzr, [x19, #104]
     aec:	mov	w0, #0x3                   	// #3
     af0:	str	w0, [x19, #200]
     af4:	ldr	w0, [x20, #1324]
     af8:	sub	w0, w0, #0x1
     afc:	str	w0, [x20, #1324]
     b00:	cbnz	w0, b10 <gomp_task_run_pre+0xf0>
     b04:	ldr	w0, [x20, #132]
     b08:	and	w0, w0, #0xfffffffe
     b0c:	str	w0, [x20, #132]
     b10:	adrp	x0, 0 <gomp_cancel_var>
     b14:	ldrb	w0, [x0]
     b18:	cbnz	w0, ddc <gomp_task_run_pre+0x3bc>
     b1c:	ldp	x19, x20, [sp, #16]
     b20:	ldr	x21, [sp, #32]
     b24:	ldp	x29, x30, [sp], #80
     b28:	ret
     b2c:	ldr	w1, [x19, #88]
     b30:	str	w1, [sp, #56]
     b34:	add	x1, sp, #0x38
     b38:	add	x0, x0, #0x8
     b3c:	bl	0 <prio_splay_tree_lookup>
     b40:	add	x2, x19, #0x70
     b44:	ldr	x1, [x0, #8]
     b48:	cmp	x2, x1
     b4c:	b.eq	b9c <gomp_task_run_pre+0x17c>  // b.none
     b50:	ldr	x3, [x19, #112]
     b54:	cmp	x1, x3
     b58:	b.eq	b68 <gomp_task_run_pre+0x148>  // b.none
     b5c:	ldr	w1, [x3, #88]
     b60:	cmp	w1, #0x2
     b64:	b.eq	ba8 <gomp_task_run_pre+0x188>  // b.none
     b68:	ldrb	w1, [x19, #207]
     b6c:	cbz	w1, a78 <gomp_task_run_pre+0x58>
     b70:	ldr	x1, [x0, #16]
     b74:	cmp	x2, x1
     b78:	b.ne	a78 <gomp_task_run_pre+0x58>  // b.any
     b7c:	ldr	x1, [x19, #120]
     b80:	cmp	x2, x1
     b84:	b.eq	b94 <gomp_task_run_pre+0x174>  // b.none
     b88:	ldr	w2, [x1, #88]
     b8c:	cmp	w2, #0x2
     b90:	b.eq	be0 <gomp_task_run_pre+0x1c0>  // b.none
     b94:	str	xzr, [x0, #16]
     b98:	b	a78 <gomp_task_run_pre+0x58>
     b9c:	ldr	x1, [x19, #112]
     ba0:	str	x1, [x0, #8]
     ba4:	b	b68 <gomp_task_run_pre+0x148>
     ba8:	ldr	x1, [x19, #120]
     bac:	str	x3, [x1]
     bb0:	ldr	x1, [x19, #120]
     bb4:	str	x1, [x3, #8]
     bb8:	ldr	x1, [x0, #8]
     bbc:	str	x1, [x19, #112]
     bc0:	ldr	x1, [x1, #8]
     bc4:	str	x1, [x19, #120]
     bc8:	ldr	x1, [x0, #8]
     bcc:	ldr	x1, [x1, #8]
     bd0:	str	x2, [x1]
     bd4:	ldr	x1, [x0, #8]
     bd8:	str	x2, [x1, #8]
     bdc:	b	b68 <gomp_task_run_pre+0x148>
     be0:	ldrb	w2, [x1, #95]
     be4:	cbz	w2, b94 <gomp_task_run_pre+0x174>
     be8:	str	x1, [x0, #16]
     bec:	b	a78 <gomp_task_run_pre+0x58>
     bf0:	ldr	x1, [x19, #112]
     bf4:	str	x1, [x0, #24]
     bf8:	b	a70 <gomp_task_run_pre+0x50>
     bfc:	ldr	x1, [x19, #120]
     c00:	str	x3, [x1]
     c04:	ldr	x1, [x19, #120]
     c08:	str	x1, [x3, #8]
     c0c:	ldr	x3, [x0, #24]
     c10:	str	x3, [x19, #112]
     c14:	ldr	x3, [x3, #8]
     c18:	str	x3, [x19, #120]
     c1c:	ldr	x3, [x0, #24]
     c20:	ldr	x3, [x3, #8]
     c24:	str	x2, [x3]
     c28:	ldr	x1, [x0, #24]
     c2c:	str	x2, [x1, #8]
     c30:	b	a70 <gomp_task_run_pre+0x50>
     c34:	ldr	x1, [x0, #32]
     c38:	cmp	x2, x1
     c3c:	b.ne	a78 <gomp_task_run_pre+0x58>  // b.any
     c40:	ldr	x1, [x19, #120]
     c44:	cmp	x2, x1
     c48:	b.eq	c58 <gomp_task_run_pre+0x238>  // b.none
     c4c:	ldr	w2, [x1, #88]
     c50:	cmp	w2, #0x2
     c54:	b.eq	c60 <gomp_task_run_pre+0x240>  // b.none
     c58:	str	xzr, [x0, #32]
     c5c:	b	a78 <gomp_task_run_pre+0x58>
     c60:	ldrb	w2, [x1, #95]
     c64:	cbz	w2, c58 <gomp_task_run_pre+0x238>
     c68:	str	x1, [x0, #32]
     c6c:	b	a78 <gomp_task_run_pre+0x58>
     c70:	ldr	w0, [x19, #88]
     c74:	str	w0, [sp, #56]
     c78:	add	x1, sp, #0x38
     c7c:	add	x0, x21, #0x8
     c80:	bl	0 <prio_splay_tree_lookup>
     c84:	add	x2, x19, #0x80
     c88:	ldr	x1, [x0, #8]
     c8c:	cmp	x2, x1
     c90:	b.eq	ce0 <gomp_task_run_pre+0x2c0>  // b.none
     c94:	ldr	x3, [x19, #128]
     c98:	cmp	x1, x3
     c9c:	b.eq	cac <gomp_task_run_pre+0x28c>  // b.none
     ca0:	ldr	w1, [x3, #72]
     ca4:	cmp	w1, #0x2
     ca8:	b.eq	cec <gomp_task_run_pre+0x2cc>  // b.none
     cac:	ldrb	w1, [x19, #207]
     cb0:	cbz	w1, ab8 <gomp_task_run_pre+0x98>
     cb4:	ldr	x1, [x0, #16]
     cb8:	cmp	x2, x1
     cbc:	b.ne	ab8 <gomp_task_run_pre+0x98>  // b.any
     cc0:	ldr	x1, [x19, #136]
     cc4:	cmp	x2, x1
     cc8:	b.eq	cd8 <gomp_task_run_pre+0x2b8>  // b.none
     ccc:	ldr	w2, [x1, #72]
     cd0:	cmp	w2, #0x2
     cd4:	b.eq	d24 <gomp_task_run_pre+0x304>  // b.none
     cd8:	str	xzr, [x0, #16]
     cdc:	b	ab8 <gomp_task_run_pre+0x98>
     ce0:	ldr	x1, [x19, #128]
     ce4:	str	x1, [x0, #8]
     ce8:	b	cac <gomp_task_run_pre+0x28c>
     cec:	ldr	x1, [x19, #136]
     cf0:	str	x3, [x1]
     cf4:	ldr	x1, [x19, #136]
     cf8:	str	x1, [x3, #8]
     cfc:	ldr	x1, [x0, #8]
     d00:	str	x1, [x19, #128]
     d04:	ldr	x1, [x1, #8]
     d08:	str	x1, [x19, #136]
     d0c:	ldr	x1, [x0, #8]
     d10:	ldr	x1, [x1, #8]
     d14:	str	x2, [x1]
     d18:	ldr	x1, [x0, #8]
     d1c:	str	x2, [x1, #8]
     d20:	b	cac <gomp_task_run_pre+0x28c>
     d24:	ldrb	w2, [x1, #79]
     d28:	cbz	w2, cd8 <gomp_task_run_pre+0x2b8>
     d2c:	str	x1, [x0, #16]
     d30:	b	ab8 <gomp_task_run_pre+0x98>
     d34:	ldr	x0, [x19, #128]
     d38:	str	x0, [x21, #24]
     d3c:	b	ab0 <gomp_task_run_pre+0x90>
     d40:	ldr	x0, [x19, #136]
     d44:	str	x2, [x0]
     d48:	ldr	x0, [x19, #136]
     d4c:	str	x0, [x2, #8]
     d50:	ldr	x2, [x21, #24]
     d54:	str	x2, [x19, #128]
     d58:	ldr	x2, [x2, #8]
     d5c:	str	x2, [x19, #136]
     d60:	ldr	x2, [x21, #24]
     d64:	ldr	x2, [x2, #8]
     d68:	str	x1, [x2]
     d6c:	ldr	x0, [x21, #24]
     d70:	str	x1, [x0, #8]
     d74:	b	ab0 <gomp_task_run_pre+0x90>
     d78:	ldr	x0, [x21, #32]
     d7c:	cmp	x1, x0
     d80:	b.ne	ab8 <gomp_task_run_pre+0x98>  // b.any
     d84:	ldr	x0, [x19, #136]
     d88:	cmp	x1, x0
     d8c:	b.eq	d9c <gomp_task_run_pre+0x37c>  // b.none
     d90:	ldr	w1, [x0, #72]
     d94:	cmp	w1, #0x2
     d98:	b.eq	da4 <gomp_task_run_pre+0x384>  // b.none
     d9c:	str	xzr, [x21, #32]
     da0:	b	ab8 <gomp_task_run_pre+0x98>
     da4:	ldrb	w1, [x0, #79]
     da8:	cbz	w1, d9c <gomp_task_run_pre+0x37c>
     dac:	str	x0, [x21, #32]
     db0:	b	ab8 <gomp_task_run_pre+0x98>
     db4:	add	x2, x19, #0x60
     db8:	add	x1, x20, #0x508
     dbc:	mov	w0, #0x0                   	// #0
     dc0:	bl	0 <priority_tree_remove>
     dc4:	b	ae4 <gomp_task_run_pre+0xc4>
     dc8:	ldr	x0, [x19, #96]
     dcc:	cmp	x1, x0
     dd0:	csel	x0, x0, xzr, ne  // ne = any
     dd4:	str	x0, [x20, #1304]
     dd8:	b	ae4 <gomp_task_run_pre+0xc4>
     ddc:	ldrb	w1, [x19, #206]
     de0:	cbnz	w1, e14 <gomp_task_run_pre+0x3f4>
     de4:	ldr	w2, [x20, #132]
     de8:	tbnz	w2, #2, b1c <gomp_task_run_pre+0xfc>
     dec:	mov	w0, w1
     df0:	cbz	x21, b1c <gomp_task_run_pre+0xfc>
     df4:	ldrb	w0, [x21, #49]
     df8:	cbnz	w0, b1c <gomp_task_run_pre+0xfc>
     dfc:	ldrb	w1, [x21, #50]
     e00:	cbz	w1, e1c <gomp_task_run_pre+0x3fc>
     e04:	ldr	x1, [x21]
     e08:	cbz	x1, b1c <gomp_task_run_pre+0xfc>
     e0c:	ldrb	w0, [x1, #49]
     e10:	b	b1c <gomp_task_run_pre+0xfc>
     e14:	mov	w0, #0x0                   	// #0
     e18:	b	b1c <gomp_task_run_pre+0xfc>
     e1c:	mov	w0, w1
     e20:	b	b1c <gomp_task_run_pre+0xfc>

0000000000000e24 <gomp_task_run_post_handle_dependers>:
     e24:	stp	x29, x30, [sp, #-144]!
     e28:	mov	x29, sp
     e2c:	stp	x23, x24, [sp, #48]
     e30:	stp	x25, x26, [sp, #64]
     e34:	mov	x24, x0
     e38:	ldr	x23, [x0]
     e3c:	ldr	x0, [x0, #48]
     e40:	ldr	x26, [x0]
     e44:	cbz	x26, 13b0 <gomp_task_run_post_handle_dependers+0x58c>
     e48:	stp	x19, x20, [sp, #16]
     e4c:	stp	x21, x22, [sp, #32]
     e50:	stp	x27, x28, [sp, #80]
     e54:	mov	x20, x1
     e58:	mov	x25, #0x0                   	// #0
     e5c:	mov	x21, #0x0                   	// #0
     e60:	b	1070 <gomp_task_run_post_handle_dependers+0x24c>
     e64:	add	x1, x23, #0x8
     e68:	str	x1, [sp, #96]
     e6c:	cbz	x0, ed8 <gomp_task_run_post_handle_dependers+0xb4>
     e70:	str	w28, [sp, #120]
     e74:	add	x1, sp, #0x78
     e78:	ldr	x0, [sp, #96]
     e7c:	bl	0 <prio_splay_tree_lookup>
     e80:	cbz	x0, f28 <gomp_task_run_post_handle_dependers+0x104>
     e84:	add	x1, x19, #0x70
     e88:	ldr	x2, [x0, #8]
     e8c:	cbz	x2, f6c <gomp_task_run_post_handle_dependers+0x148>
     e90:	ldr	x3, [x0, #16]
     e94:	cmp	x3, #0x0
     e98:	ccmp	w27, #0x0, #0x0, ne  // ne = any
     e9c:	b.eq	f5c <gomp_task_run_post_handle_dependers+0x138>  // b.none
     ea0:	str	x2, [x19, #112]
     ea4:	ldr	x2, [x2, #8]
     ea8:	str	x2, [x19, #120]
     eac:	str	x1, [x0, #8]
     eb0:	ldr	x2, [x19, #112]
     eb4:	str	x1, [x2, #8]
     eb8:	ldr	x2, [x19, #120]
     ebc:	str	x1, [x2]
     ec0:	ldr	x2, [x0, #16]
     ec4:	cmp	x2, #0x0
     ec8:	ccmp	w27, #0x0, #0x4, eq  // eq = none
     ecc:	b.eq	fac <gomp_task_run_post_handle_dependers+0x188>  // b.none
     ed0:	str	x1, [x0, #16]
     ed4:	b	fac <gomp_task_run_post_handle_dependers+0x188>
     ed8:	ldr	x0, [x23, #24]
     edc:	cbz	x0, f28 <gomp_task_run_post_handle_dependers+0x104>
     ee0:	mov	x0, #0x28                  	// #40
     ee4:	bl	0 <gomp_malloc>
     ee8:	mov	x1, x0
     eec:	str	xzr, [x0, #24]
     ef0:	str	xzr, [x0, #32]
     ef4:	str	wzr, [x0]
     ef8:	add	x2, x23, #0x8
     efc:	ldr	x0, [x23, #24]
     f00:	str	x0, [x1, #8]
     f04:	str	x2, [sp, #104]
     f08:	ldr	x0, [x23, #32]
     f0c:	str	x0, [x1, #16]
     f10:	ldr	x0, [sp, #96]
     f14:	bl	0 <prio_splay_tree_insert>
     f18:	ldr	x2, [sp, #104]
     f1c:	str	xzr, [x2, #16]
     f20:	ldr	x0, [x23, #8]
     f24:	cbnz	x0, e70 <gomp_task_run_post_handle_dependers+0x4c>
     f28:	mov	x0, #0x28                  	// #40
     f2c:	bl	0 <gomp_malloc>
     f30:	str	xzr, [x0, #24]
     f34:	str	xzr, [x0, #32]
     f38:	str	w28, [x0]
     f3c:	str	xzr, [x0, #8]
     f40:	mov	x28, x0
     f44:	str	xzr, [x0, #16]
     f48:	mov	x1, x0
     f4c:	ldr	x0, [sp, #96]
     f50:	bl	0 <prio_splay_tree_insert>
     f54:	mov	x0, x28
     f58:	b	e84 <gomp_task_run_post_handle_dependers+0x60>
     f5c:	ldr	x2, [x3]
     f60:	str	x2, [x19, #112]
     f64:	str	x3, [x19, #120]
     f68:	b	eb0 <gomp_task_run_post_handle_dependers+0x8c>
     f6c:	str	x1, [x19, #112]
     f70:	str	x1, [x19, #120]
     f74:	str	x1, [x0, #8]
     f78:	b	ec0 <gomp_task_run_post_handle_dependers+0x9c>
     f7c:	str	x1, [x19, #112]
     f80:	ldr	x1, [x1, #8]
     f84:	str	x1, [x19, #120]
     f88:	str	x0, [x23, #24]
     f8c:	ldr	x1, [x19, #112]
     f90:	str	x0, [x1, #8]
     f94:	ldr	x1, [x19, #120]
     f98:	str	x0, [x1]
     f9c:	ldr	x1, [x23, #32]
     fa0:	cmp	x1, #0x0
     fa4:	ccmp	w27, #0x0, #0x4, eq  // eq = none
     fa8:	b.ne	10e8 <gomp_task_run_post_handle_dependers+0x2c4>  // b.any
     fac:	ldr	x0, [x23, #64]
     fb0:	cbz	x0, fc4 <gomp_task_run_post_handle_dependers+0x1a0>
     fb4:	ldrb	w1, [x0]
     fb8:	cbnz	w1, 10f0 <gomp_task_run_post_handle_dependers+0x2cc>
     fbc:	ldrb	w1, [x0, #1]
     fc0:	cbnz	w1, 1130 <gomp_task_run_post_handle_dependers+0x30c>
     fc4:	cbz	x22, 1010 <gomp_task_run_post_handle_dependers+0x1ec>
     fc8:	ldr	w27, [x19, #88]
     fcc:	ldr	x0, [x22, #8]
     fd0:	cmp	w27, #0x0
     fd4:	ccmp	x0, #0x0, #0x0, le
     fd8:	b.ne	1170 <gomp_task_run_post_handle_dependers+0x34c>  // b.any
     fdc:	add	x0, x19, #0x80
     fe0:	ldr	x1, [x22, #24]
     fe4:	cbz	x1, 1248 <gomp_task_run_post_handle_dependers+0x424>
     fe8:	str	x1, [x19, #128]
     fec:	ldr	x1, [x1, #8]
     ff0:	str	x1, [x19, #136]
     ff4:	str	x0, [x22, #24]
     ff8:	ldr	x1, [x19, #128]
     ffc:	str	x0, [x1, #8]
    1000:	ldr	x1, [x19, #136]
    1004:	str	x0, [x1]
    1008:	ldrb	w0, [x22, #48]
    100c:	cbnz	w0, 1258 <gomp_task_run_post_handle_dependers+0x434>
    1010:	ldr	w22, [x19, #88]
    1014:	ldr	x0, [x20, #1288]
    1018:	cmp	w22, #0x0
    101c:	ccmp	x0, #0x0, #0x0, le
    1020:	b.ne	1294 <gomp_task_run_post_handle_dependers+0x470>  // b.any
    1024:	add	x1, x19, #0x60
    1028:	ldr	x0, [x20, #1304]
    102c:	cbz	x0, 1360 <gomp_task_run_post_handle_dependers+0x53c>
    1030:	str	x0, [x19, #96]
    1034:	ldr	x2, [x0, #8]
    1038:	str	x2, [x19, #104]
    103c:	str	x1, [x0, #8]
    1040:	ldr	x0, [x19, #104]
    1044:	str	x1, [x0]
    1048:	ldr	w0, [x20, #1320]
    104c:	add	w0, w0, #0x1
    1050:	str	w0, [x20, #1320]
    1054:	ldr	w0, [x20, #1324]
    1058:	add	w0, w0, #0x1
    105c:	str	w0, [x20, #1324]
    1060:	add	x25, x25, #0x1
    1064:	add	x21, x21, #0x1
    1068:	cmp	x26, x21
    106c:	b.eq	1370 <gomp_task_run_post_handle_dependers+0x54c>  // b.none
    1070:	ldr	x0, [x24, #48]
    1074:	add	x1, x21, #0x2
    1078:	ldr	x19, [x0, x1, lsl #3]
    107c:	ldr	x0, [x19, #80]
    1080:	sub	x0, x0, #0x1
    1084:	str	x0, [x19, #80]
    1088:	cbnz	x0, 1064 <gomp_task_run_post_handle_dependers+0x240>
    108c:	ldr	x22, [x19, #40]
    1090:	cbz	x23, fc4 <gomp_task_run_post_handle_dependers+0x1a0>
    1094:	ldr	w28, [x19, #88]
    1098:	ldrb	w27, [x19, #207]
    109c:	ldr	x0, [x23, #8]
    10a0:	cmp	w28, #0x0
    10a4:	ccmp	x0, #0x0, #0x0, le
    10a8:	b.ne	e64 <gomp_task_run_post_handle_dependers+0x40>  // b.any
    10ac:	add	x0, x19, #0x70
    10b0:	ldr	x1, [x23, #24]
    10b4:	cbz	x1, 10d8 <gomp_task_run_post_handle_dependers+0x2b4>
    10b8:	ldr	x2, [x23, #32]
    10bc:	cmp	x2, #0x0
    10c0:	ccmp	w27, #0x0, #0x0, ne  // ne = any
    10c4:	b.ne	f7c <gomp_task_run_post_handle_dependers+0x158>  // b.any
    10c8:	ldr	x1, [x2]
    10cc:	str	x1, [x19, #112]
    10d0:	str	x2, [x19, #120]
    10d4:	b	f8c <gomp_task_run_post_handle_dependers+0x168>
    10d8:	str	x0, [x19, #112]
    10dc:	str	x0, [x19, #120]
    10e0:	str	x0, [x23, #24]
    10e4:	b	f9c <gomp_task_run_post_handle_dependers+0x178>
    10e8:	str	x0, [x23, #32]
    10ec:	b	fac <gomp_task_run_post_handle_dependers+0x188>
    10f0:	strb	wzr, [x0]
    10f4:	ldr	x1, [x23, #64]
    10f8:	add	x0, x1, #0x10
    10fc:	ldr	w1, [x1, #16]
    1100:	add	w2, w1, #0x1
    1104:	and	w2, w2, #0x7fffffff
    1108:	ldxr	w3, [x0]
    110c:	cmp	w3, w1
    1110:	b.ne	111c <gomp_task_run_post_handle_dependers+0x2f8>  // b.any
    1114:	stlxr	w4, w2, [x0]
    1118:	cmp	w4, #0x0
    111c:	mov	w1, w3
    1120:	b.ne	1100 <gomp_task_run_post_handle_dependers+0x2dc>  // b.any
    1124:	tbz	w3, #31, fc4 <gomp_task_run_post_handle_dependers+0x1a0>
    1128:	bl	0 <gomp_sem_post_slow>
    112c:	b	fc4 <gomp_task_run_post_handle_dependers+0x1a0>
    1130:	strb	wzr, [x0, #1]
    1134:	ldr	x1, [x23, #64]
    1138:	add	x0, x1, #0x10
    113c:	ldr	w1, [x1, #16]
    1140:	add	w2, w1, #0x1
    1144:	and	w2, w2, #0x7fffffff
    1148:	ldxr	w3, [x0]
    114c:	cmp	w3, w1
    1150:	b.ne	115c <gomp_task_run_post_handle_dependers+0x338>  // b.any
    1154:	stlxr	w4, w2, [x0]
    1158:	cmp	w4, #0x0
    115c:	mov	w1, w3
    1160:	b.ne	1140 <gomp_task_run_post_handle_dependers+0x31c>  // b.any
    1164:	tbz	w3, #31, fc4 <gomp_task_run_post_handle_dependers+0x1a0>
    1168:	bl	0 <gomp_sem_post_slow>
    116c:	b	fc4 <gomp_task_run_post_handle_dependers+0x1a0>
    1170:	add	x1, x22, #0x8
    1174:	str	x1, [sp, #96]
    1178:	cbz	x0, 11c0 <gomp_task_run_post_handle_dependers+0x39c>
    117c:	str	w27, [sp, #120]
    1180:	add	x1, sp, #0x78
    1184:	ldr	x0, [sp, #96]
    1188:	bl	0 <prio_splay_tree_lookup>
    118c:	cbz	x0, 1204 <gomp_task_run_post_handle_dependers+0x3e0>
    1190:	add	x1, x19, #0x80
    1194:	ldr	x2, [x0, #8]
    1198:	cbz	x2, 1238 <gomp_task_run_post_handle_dependers+0x414>
    119c:	str	x2, [x19, #128]
    11a0:	ldr	x2, [x2, #8]
    11a4:	str	x2, [x19, #136]
    11a8:	str	x1, [x0, #8]
    11ac:	ldr	x0, [x19, #128]
    11b0:	str	x1, [x0, #8]
    11b4:	ldr	x0, [x19, #136]
    11b8:	str	x1, [x0]
    11bc:	b	1008 <gomp_task_run_post_handle_dependers+0x1e4>
    11c0:	ldr	x0, [x22, #24]
    11c4:	cbz	x0, 1204 <gomp_task_run_post_handle_dependers+0x3e0>
    11c8:	mov	x0, #0x28                  	// #40
    11cc:	bl	0 <gomp_malloc>
    11d0:	mov	x1, x0
    11d4:	str	xzr, [x0, #24]
    11d8:	str	xzr, [x0, #32]
    11dc:	str	wzr, [x0]
    11e0:	ldr	x0, [x22, #24]
    11e4:	str	x0, [x1, #8]
    11e8:	ldr	x0, [x22, #32]
    11ec:	str	x0, [x1, #16]
    11f0:	ldr	x0, [sp, #96]
    11f4:	bl	0 <prio_splay_tree_insert>
    11f8:	str	xzr, [x22, #24]
    11fc:	ldr	x0, [x22, #8]
    1200:	cbnz	x0, 117c <gomp_task_run_post_handle_dependers+0x358>
    1204:	mov	x0, #0x28                  	// #40
    1208:	bl	0 <gomp_malloc>
    120c:	mov	x28, x0
    1210:	str	xzr, [x0, #24]
    1214:	str	xzr, [x0, #32]
    1218:	str	w27, [x0]
    121c:	str	xzr, [x0, #8]
    1220:	str	xzr, [x0, #16]
    1224:	mov	x1, x0
    1228:	ldr	x0, [sp, #96]
    122c:	bl	0 <prio_splay_tree_insert>
    1230:	mov	x0, x28
    1234:	b	1190 <gomp_task_run_post_handle_dependers+0x36c>
    1238:	str	x1, [x19, #128]
    123c:	str	x1, [x19, #136]
    1240:	str	x1, [x0, #8]
    1244:	b	1008 <gomp_task_run_post_handle_dependers+0x1e4>
    1248:	str	x0, [x19, #128]
    124c:	str	x0, [x19, #136]
    1250:	str	x0, [x22, #24]
    1254:	b	1008 <gomp_task_run_post_handle_dependers+0x1e4>
    1258:	strb	wzr, [x22, #48]
    125c:	add	x0, x22, #0x34
    1260:	ldr	w1, [x22, #52]
    1264:	add	w2, w1, #0x1
    1268:	and	w2, w2, #0x7fffffff
    126c:	ldxr	w3, [x0]
    1270:	cmp	w3, w1
    1274:	b.ne	1280 <gomp_task_run_post_handle_dependers+0x45c>  // b.any
    1278:	stlxr	w4, w2, [x0]
    127c:	cmp	w4, #0x0
    1280:	mov	w1, w3
    1284:	b.ne	1264 <gomp_task_run_post_handle_dependers+0x440>  // b.any
    1288:	tbz	w3, #31, 1010 <gomp_task_run_post_handle_dependers+0x1ec>
    128c:	bl	0 <gomp_sem_post_slow>
    1290:	b	1010 <gomp_task_run_post_handle_dependers+0x1ec>
    1294:	add	x28, x20, #0x508
    1298:	cbz	x0, 12d8 <gomp_task_run_post_handle_dependers+0x4b4>
    129c:	str	w22, [sp, #120]
    12a0:	add	x1, sp, #0x78
    12a4:	mov	x0, x28
    12a8:	bl	0 <prio_splay_tree_lookup>
    12ac:	cbz	x0, 131c <gomp_task_run_post_handle_dependers+0x4f8>
    12b0:	add	x2, x19, #0x60
    12b4:	ldr	x1, [x0, #8]
    12b8:	cbz	x1, 1350 <gomp_task_run_post_handle_dependers+0x52c>
    12bc:	str	x1, [x19, #96]
    12c0:	ldr	x0, [x1, #8]
    12c4:	str	x0, [x19, #104]
    12c8:	str	x2, [x1, #8]
    12cc:	ldr	x0, [x19, #104]
    12d0:	str	x2, [x0]
    12d4:	b	1048 <gomp_task_run_post_handle_dependers+0x224>
    12d8:	ldr	x0, [x20, #1304]
    12dc:	cbz	x0, 131c <gomp_task_run_post_handle_dependers+0x4f8>
    12e0:	mov	x0, #0x28                  	// #40
    12e4:	bl	0 <gomp_malloc>
    12e8:	mov	x1, x0
    12ec:	str	xzr, [x0, #24]
    12f0:	str	xzr, [x0, #32]
    12f4:	str	wzr, [x0]
    12f8:	ldr	x0, [x28, #16]
    12fc:	str	x0, [x1, #8]
    1300:	ldr	x0, [x28, #24]
    1304:	str	x0, [x1, #16]
    1308:	mov	x0, x28
    130c:	bl	0 <prio_splay_tree_insert>
    1310:	str	xzr, [x28, #16]
    1314:	ldr	x0, [x20, #1288]
    1318:	cbnz	x0, 129c <gomp_task_run_post_handle_dependers+0x478>
    131c:	mov	x0, #0x28                  	// #40
    1320:	bl	0 <gomp_malloc>
    1324:	mov	x27, x0
    1328:	str	xzr, [x0, #24]
    132c:	str	xzr, [x0, #32]
    1330:	str	w22, [x0]
    1334:	str	xzr, [x0, #8]
    1338:	str	xzr, [x0, #16]
    133c:	mov	x1, x0
    1340:	mov	x0, x28
    1344:	bl	0 <prio_splay_tree_insert>
    1348:	mov	x0, x27
    134c:	b	12b0 <gomp_task_run_post_handle_dependers+0x48c>
    1350:	str	x2, [x19, #96]
    1354:	str	x2, [x19, #104]
    1358:	str	x2, [x0, #8]
    135c:	b	1048 <gomp_task_run_post_handle_dependers+0x224>
    1360:	str	x1, [x19, #96]
    1364:	str	x1, [x19, #104]
    1368:	str	x1, [x20, #1304]
    136c:	b	1048 <gomp_task_run_post_handle_dependers+0x224>
    1370:	ldr	x0, [x24, #48]
    1374:	bl	0 <free>
    1378:	str	xzr, [x24, #48]
    137c:	cmp	x25, #0x1
    1380:	b.ls	13c0 <gomp_task_run_post_handle_dependers+0x59c>  // b.plast
    1384:	ldr	w0, [x20, #132]
    1388:	orr	w0, w0, #0x1
    138c:	str	w0, [x20, #132]
    1390:	ldp	x19, x20, [sp, #16]
    1394:	ldp	x21, x22, [sp, #32]
    1398:	ldp	x27, x28, [sp, #80]
    139c:	mov	x0, x25
    13a0:	ldp	x23, x24, [sp, #48]
    13a4:	ldp	x25, x26, [sp, #64]
    13a8:	ldp	x29, x30, [sp], #144
    13ac:	ret
    13b0:	bl	0 <free>
    13b4:	str	xzr, [x24, #48]
    13b8:	mov	x25, x26
    13bc:	b	139c <gomp_task_run_post_handle_dependers+0x578>
    13c0:	ldp	x19, x20, [sp, #16]
    13c4:	ldp	x21, x22, [sp, #32]
    13c8:	ldp	x27, x28, [sp, #80]
    13cc:	b	139c <gomp_task_run_post_handle_dependers+0x578>

00000000000013d0 <gomp_target_task_completion>:
    13d0:	stp	x29, x30, [sp, #-112]!
    13d4:	mov	x29, sp
    13d8:	stp	x19, x20, [sp, #16]
    13dc:	stp	x21, x22, [sp, #32]
    13e0:	stp	x23, x24, [sp, #48]
    13e4:	mov	x20, x0
    13e8:	mov	x19, x1
    13ec:	ldr	x22, [x1]
    13f0:	cbz	x22, 1474 <gomp_target_task_completion+0xa4>
    13f4:	mov	x0, x22
    13f8:	ldr	x1, [x0, #8]!
    13fc:	add	x0, x0, #0x8
    1400:	cbnz	x1, 1584 <gomp_target_task_completion+0x1b4>
    1404:	add	x1, x19, #0x70
    1408:	ldr	x3, [x19, #120]
    140c:	ldr	x2, [x19, #112]
    1410:	str	x2, [x3]
    1414:	ldr	x3, [x19, #120]
    1418:	str	x3, [x2, #8]
    141c:	ldr	x2, [x0, #8]
    1420:	cmp	x1, x2
    1424:	b.eq	159c <gomp_target_task_completion+0x1cc>  // b.none
    1428:	ldrb	w3, [x19, #207]
    142c:	ldr	x2, [x0, #8]
    1430:	cbz	x2, 15b8 <gomp_target_task_completion+0x1e8>
    1434:	ldr	x4, [x0, #16]
    1438:	cmp	x4, #0x0
    143c:	ccmp	w3, #0x0, #0x0, ne  // ne = any
    1440:	b.eq	15c8 <gomp_target_task_completion+0x1f8>  // b.none
    1444:	str	x2, [x19, #112]
    1448:	ldr	x2, [x2, #8]
    144c:	str	x2, [x19, #120]
    1450:	str	x1, [x0, #8]
    1454:	ldr	x2, [x19, #112]
    1458:	str	x1, [x2, #8]
    145c:	ldr	x2, [x19, #120]
    1460:	str	x1, [x2]
    1464:	ldr	x2, [x0, #16]
    1468:	cmp	x2, #0x0
    146c:	ccmp	w3, #0x0, #0x4, eq  // eq = none
    1470:	b.ne	15d8 <gomp_target_task_completion+0x208>  // b.any
    1474:	ldr	x21, [x19, #40]
    1478:	cbz	x21, 14d8 <gomp_target_task_completion+0x108>
    147c:	mov	x0, x21
    1480:	ldr	x1, [x0, #8]!
    1484:	add	x0, x0, #0x8
    1488:	cbnz	x1, 15e0 <gomp_target_task_completion+0x210>
    148c:	add	x1, x19, #0x80
    1490:	ldr	x3, [x19, #136]
    1494:	ldr	x2, [x19, #128]
    1498:	str	x2, [x3]
    149c:	ldr	x3, [x19, #136]
    14a0:	str	x3, [x2, #8]
    14a4:	ldr	x2, [x0, #8]
    14a8:	cmp	x1, x2
    14ac:	b.eq	15f8 <gomp_target_task_completion+0x228>  // b.none
    14b0:	ldr	x2, [x0, #8]
    14b4:	cbz	x2, 160c <gomp_target_task_completion+0x23c>
    14b8:	str	x2, [x19, #128]
    14bc:	ldr	x2, [x2, #8]
    14c0:	str	x2, [x19, #136]
    14c4:	str	x1, [x0, #8]
    14c8:	ldr	x0, [x19, #128]
    14cc:	str	x1, [x0, #8]
    14d0:	ldr	x0, [x19, #136]
    14d4:	str	x1, [x0]
    14d8:	ldr	w23, [x19, #88]
    14dc:	ldr	x0, [x20, #1288]
    14e0:	cmp	x0, #0x0
    14e4:	ccmp	w23, #0x0, #0x0, eq  // eq = none
    14e8:	b.gt	161c <gomp_target_task_completion+0x24c>
    14ec:	add	x0, x19, #0x60
    14f0:	ldr	x1, [x20, #1304]
    14f4:	cbz	x1, 16fc <gomp_target_task_completion+0x32c>
    14f8:	str	x1, [x19, #96]
    14fc:	ldr	x1, [x1, #8]
    1500:	str	x1, [x19, #104]
    1504:	str	x0, [x20, #1304]
    1508:	ldr	x1, [x19, #96]
    150c:	str	x0, [x1, #8]
    1510:	ldr	x1, [x19, #104]
    1514:	str	x0, [x1]
    1518:	mov	w0, #0x2                   	// #2
    151c:	str	w0, [x19, #200]
    1520:	cbz	x22, 153c <gomp_target_task_completion+0x16c>
    1524:	ldr	x0, [x22, #64]
    1528:	cbz	x0, 153c <gomp_target_task_completion+0x16c>
    152c:	ldrb	w1, [x0]
    1530:	cbnz	w1, 170c <gomp_target_task_completion+0x33c>
    1534:	ldrb	w1, [x0, #1]
    1538:	cbnz	w1, 174c <gomp_target_task_completion+0x37c>
    153c:	cbz	x21, 1548 <gomp_target_task_completion+0x178>
    1540:	ldrb	w0, [x21, #48]
    1544:	cbnz	w0, 178c <gomp_target_task_completion+0x3bc>
    1548:	ldr	w0, [x20, #1324]
    154c:	add	w0, w0, #0x1
    1550:	str	w0, [x20, #1324]
    1554:	ldr	w0, [x20, #132]
    1558:	orr	w0, w0, #0x1
    155c:	str	w0, [x20, #132]
    1560:	ldr	w1, [x20]
    1564:	ldr	w0, [x20, #1328]
    1568:	cmp	w1, w0
    156c:	b.hi	17c8 <gomp_target_task_completion+0x3f8>  // b.pmore
    1570:	ldp	x19, x20, [sp, #16]
    1574:	ldp	x21, x22, [sp, #32]
    1578:	ldp	x23, x24, [sp, #48]
    157c:	ldp	x29, x30, [sp], #112
    1580:	ret
    1584:	ldr	w0, [x19, #88]
    1588:	str	w0, [sp, #88]
    158c:	add	x1, sp, #0x58
    1590:	add	x0, x22, #0x8
    1594:	bl	0 <prio_splay_tree_lookup>
    1598:	b	1404 <gomp_target_task_completion+0x34>
    159c:	ldr	x2, [x19, #112]
    15a0:	cmp	x1, x2
    15a4:	b.eq	15b0 <gomp_target_task_completion+0x1e0>  // b.none
    15a8:	str	x2, [x0, #8]
    15ac:	b	1428 <gomp_target_task_completion+0x58>
    15b0:	str	xzr, [x0, #8]
    15b4:	ldrb	w3, [x19, #207]
    15b8:	str	x1, [x19, #112]
    15bc:	str	x1, [x19, #120]
    15c0:	str	x1, [x0, #8]
    15c4:	b	1464 <gomp_target_task_completion+0x94>
    15c8:	ldr	x2, [x4]
    15cc:	str	x2, [x19, #112]
    15d0:	str	x4, [x19, #120]
    15d4:	b	1454 <gomp_target_task_completion+0x84>
    15d8:	str	x1, [x0, #16]
    15dc:	b	1474 <gomp_target_task_completion+0xa4>
    15e0:	ldr	w0, [x19, #88]
    15e4:	str	w0, [sp, #88]
    15e8:	add	x1, sp, #0x58
    15ec:	add	x0, x21, #0x8
    15f0:	bl	0 <prio_splay_tree_lookup>
    15f4:	b	148c <gomp_target_task_completion+0xbc>
    15f8:	ldr	x2, [x19, #128]
    15fc:	cmp	x1, x2
    1600:	b.eq	160c <gomp_target_task_completion+0x23c>  // b.none
    1604:	str	x2, [x0, #8]
    1608:	b	14b0 <gomp_target_task_completion+0xe0>
    160c:	str	x1, [x19, #128]
    1610:	str	x1, [x19, #136]
    1614:	str	x1, [x0, #8]
    1618:	b	14d8 <gomp_target_task_completion+0x108>
    161c:	str	x25, [sp, #64]
    1620:	add	x25, x20, #0x508
    1624:	cbz	x0, 1670 <gomp_target_task_completion+0x2a0>
    1628:	str	w23, [sp, #88]
    162c:	add	x1, sp, #0x58
    1630:	mov	x0, x25
    1634:	bl	0 <prio_splay_tree_lookup>
    1638:	cbz	x0, 16b4 <gomp_target_task_completion+0x2e4>
    163c:	add	x1, x19, #0x60
    1640:	ldr	x2, [x0, #8]
    1644:	cbz	x2, 16e8 <gomp_target_task_completion+0x318>
    1648:	str	x2, [x19, #96]
    164c:	ldr	x2, [x2, #8]
    1650:	str	x2, [x19, #104]
    1654:	str	x1, [x0, #8]
    1658:	ldr	x0, [x19, #96]
    165c:	str	x1, [x0, #8]
    1660:	ldr	x0, [x19, #104]
    1664:	str	x1, [x0]
    1668:	ldr	x25, [sp, #64]
    166c:	b	1518 <gomp_target_task_completion+0x148>
    1670:	ldr	x0, [x20, #1304]
    1674:	cbz	x0, 16b4 <gomp_target_task_completion+0x2e4>
    1678:	mov	x0, #0x28                  	// #40
    167c:	bl	0 <gomp_malloc>
    1680:	mov	x1, x0
    1684:	str	xzr, [x0, #24]
    1688:	str	xzr, [x0, #32]
    168c:	str	wzr, [x0]
    1690:	ldr	x0, [x25, #16]
    1694:	str	x0, [x1, #8]
    1698:	ldr	x0, [x25, #24]
    169c:	str	x0, [x1, #16]
    16a0:	mov	x0, x25
    16a4:	bl	0 <prio_splay_tree_insert>
    16a8:	str	xzr, [x25, #16]
    16ac:	ldr	x0, [x20, #1288]
    16b0:	cbnz	x0, 1628 <gomp_target_task_completion+0x258>
    16b4:	mov	x0, #0x28                  	// #40
    16b8:	bl	0 <gomp_malloc>
    16bc:	mov	x24, x0
    16c0:	str	xzr, [x0, #24]
    16c4:	str	xzr, [x0, #32]
    16c8:	str	w23, [x0]
    16cc:	str	xzr, [x0, #8]
    16d0:	str	xzr, [x0, #16]
    16d4:	mov	x1, x0
    16d8:	mov	x0, x25
    16dc:	bl	0 <prio_splay_tree_insert>
    16e0:	mov	x0, x24
    16e4:	b	163c <gomp_target_task_completion+0x26c>
    16e8:	str	x1, [x19, #96]
    16ec:	str	x1, [x19, #104]
    16f0:	str	x1, [x0, #8]
    16f4:	ldr	x25, [sp, #64]
    16f8:	b	1518 <gomp_target_task_completion+0x148>
    16fc:	str	x0, [x19, #96]
    1700:	str	x0, [x19, #104]
    1704:	str	x0, [x20, #1304]
    1708:	b	1518 <gomp_target_task_completion+0x148>
    170c:	strb	wzr, [x0]
    1710:	ldr	x1, [x22, #64]
    1714:	add	x0, x1, #0x10
    1718:	ldr	w1, [x1, #16]
    171c:	add	w2, w1, #0x1
    1720:	and	w2, w2, #0x7fffffff
    1724:	ldxr	w3, [x0]
    1728:	cmp	w3, w1
    172c:	b.ne	1738 <gomp_target_task_completion+0x368>  // b.any
    1730:	stlxr	w4, w2, [x0]
    1734:	cmp	w4, #0x0
    1738:	mov	w1, w3
    173c:	b.ne	171c <gomp_target_task_completion+0x34c>  // b.any
    1740:	tbz	w3, #31, 153c <gomp_target_task_completion+0x16c>
    1744:	bl	0 <gomp_sem_post_slow>
    1748:	b	153c <gomp_target_task_completion+0x16c>
    174c:	strb	wzr, [x0, #1]
    1750:	ldr	x1, [x22, #64]
    1754:	add	x0, x1, #0x10
    1758:	ldr	w1, [x1, #16]
    175c:	add	w2, w1, #0x1
    1760:	and	w2, w2, #0x7fffffff
    1764:	ldxr	w3, [x0]
    1768:	cmp	w3, w1
    176c:	b.ne	1778 <gomp_target_task_completion+0x3a8>  // b.any
    1770:	stlxr	w4, w2, [x0]
    1774:	cmp	w4, #0x0
    1778:	mov	w1, w3
    177c:	b.ne	175c <gomp_target_task_completion+0x38c>  // b.any
    1780:	tbz	w3, #31, 153c <gomp_target_task_completion+0x16c>
    1784:	bl	0 <gomp_sem_post_slow>
    1788:	b	153c <gomp_target_task_completion+0x16c>
    178c:	strb	wzr, [x21, #48]
    1790:	add	x0, x21, #0x34
    1794:	ldr	w1, [x21, #52]
    1798:	add	w2, w1, #0x1
    179c:	and	w2, w2, #0x7fffffff
    17a0:	ldxr	w3, [x0]
    17a4:	cmp	w3, w1
    17a8:	b.ne	17b4 <gomp_target_task_completion+0x3e4>  // b.any
    17ac:	stlxr	w4, w2, [x0]
    17b0:	cmp	w4, #0x0
    17b4:	mov	w1, w3
    17b8:	b.ne	1798 <gomp_target_task_completion+0x3c8>  // b.any
    17bc:	tbz	w3, #31, 1548 <gomp_target_task_completion+0x178>
    17c0:	bl	0 <gomp_sem_post_slow>
    17c4:	b	1548 <gomp_target_task_completion+0x178>
    17c8:	mov	w1, #0x1                   	// #1
    17cc:	add	x0, x20, #0x80
    17d0:	bl	0 <gomp_team_barrier_wake>
    17d4:	b	1570 <gomp_target_task_completion+0x1a0>

00000000000017d8 <gomp_init_task>:
    17d8:	mov	x3, x0
    17dc:	str	x1, [x3], #144
    17e0:	ldp	x4, x5, [x2]
    17e4:	stp	x4, x5, [x0, #144]
    17e8:	ldp	x4, x5, [x2, #16]
    17ec:	stp	x4, x5, [x3, #16]
    17f0:	ldr	x1, [x2, #32]
    17f4:	str	x1, [x3, #32]
    17f8:	str	wzr, [x0, #200]
    17fc:	str	xzr, [x0, #64]
    1800:	strb	wzr, [x0, #204]
    1804:	strb	wzr, [x0, #205]
    1808:	strb	wzr, [x0, #206]
    180c:	strb	wzr, [x0, #207]
    1810:	str	xzr, [x0, #8]
    1814:	str	xzr, [x0, #24]
    1818:	str	xzr, [x0, #32]
    181c:	str	xzr, [x0, #40]
    1820:	str	xzr, [x0, #48]
    1824:	str	xzr, [x0, #56]
    1828:	str	xzr, [x0, #72]
    182c:	ret

0000000000001830 <gomp_end_task>:
    1830:	stp	x29, x30, [sp, #-32]!
    1834:	mov	x29, sp
    1838:	str	x19, [sp, #16]
    183c:	adrp	x0, 0 <gomp_tls_data>
    1840:	ldr	x0, [x0]
    1844:	mrs	x1, tpidr_el0
    1848:	add	x0, x1, x0
    184c:	ldr	x19, [x0, #80]
    1850:	ldr	x0, [x19, #56]
    1854:	cbnz	x0, 187c <gomp_end_task+0x4c>
    1858:	ldr	x2, [x19]
    185c:	adrp	x0, 0 <gomp_tls_data>
    1860:	ldr	x0, [x0]
    1864:	mrs	x1, tpidr_el0
    1868:	add	x0, x1, x0
    186c:	str	x2, [x0, #80]
    1870:	ldr	x19, [sp, #16]
    1874:	ldp	x29, x30, [sp], #32
    1878:	ret
    187c:	bl	0 <free>
    1880:	b	1858 <gomp_end_task+0x28>

0000000000001884 <gomp_create_artificial_team>:
    1884:	stp	x29, x30, [sp, #-48]!
    1888:	mov	x29, sp
    188c:	stp	x19, x20, [sp, #16]
    1890:	str	x21, [sp, #32]
    1894:	mov	w0, #0x1                   	// #1
    1898:	bl	0 <gomp_new_team>
    189c:	adrp	x1, 0 <gomp_tls_data>
    18a0:	ldr	x1, [x1]
    18a4:	mrs	x2, tpidr_el0
    18a8:	add	x1, x2, x1
    18ac:	ldr	x21, [x1, #80]
    18b0:	cbz	x21, 193c <gomp_create_artificial_team+0xb8>
    18b4:	adrp	x2, 0 <gomp_tls_data>
    18b8:	ldr	x2, [x2]
    18bc:	mrs	x20, tpidr_el0
    18c0:	add	x20, x20, x2
    18c4:	ldp	x4, x5, [x20, #16]
    18c8:	stp	x4, x5, [x0, #8]
    18cc:	ldp	x4, x5, [x20, #32]
    18d0:	stp	x4, x5, [x0, #24]
    18d4:	ldp	x4, x5, [x20, #48]
    18d8:	stp	x4, x5, [x0, #40]
    18dc:	ldp	x2, x3, [x20, #64]
    18e0:	stp	x2, x3, [x0, #56]
    18e4:	str	x0, [x20, #16]
    18e8:	str	wzr, [x20, #40]
    18ec:	add	x1, x0, #0x100
    18f0:	str	x1, [x20, #24]
    18f4:	str	xzr, [x20, #32]
    18f8:	str	xzr, [x20, #64]
    18fc:	str	xzr, [x20, #72]
    1900:	add	x19, x0, #0x540
    1904:	str	x19, [x20, #80]
    1908:	add	x2, x21, #0x90
    190c:	mov	x1, #0x0                   	// #0
    1910:	mov	x0, x19
    1914:	bl	17d8 <gomp_init_task>
    1918:	str	x21, [x20, #80]
    191c:	bl	1830 <gomp_end_task>
    1920:	mov	x0, x21
    1924:	bl	0 <free>
    1928:	str	x19, [x20, #80]
    192c:	ldp	x19, x20, [sp, #16]
    1930:	ldr	x21, [sp, #32]
    1934:	ldp	x29, x30, [sp], #48
    1938:	ret
    193c:	adrp	x19, 0 <gomp_tls_data>
    1940:	ldr	x19, [x19]
    1944:	mrs	x2, tpidr_el0
    1948:	add	x19, x2, x19
    194c:	ldp	x4, x5, [x19, #16]
    1950:	stp	x4, x5, [x0, #8]
    1954:	ldp	x4, x5, [x19, #32]
    1958:	stp	x4, x5, [x0, #24]
    195c:	ldp	x4, x5, [x19, #48]
    1960:	stp	x4, x5, [x0, #40]
    1964:	ldp	x2, x3, [x19, #64]
    1968:	stp	x2, x3, [x0, #56]
    196c:	str	x0, [x19, #16]
    1970:	str	wzr, [x19, #40]
    1974:	add	x1, x0, #0x100
    1978:	str	x1, [x19, #24]
    197c:	str	xzr, [x19, #32]
    1980:	str	xzr, [x19, #64]
    1984:	str	xzr, [x19, #72]
    1988:	add	x0, x0, #0x540
    198c:	str	x0, [x19, #80]
    1990:	adrp	x2, 0 <gomp_global_icv>
    1994:	add	x2, x2, #0x0
    1998:	mov	x1, #0x0                   	// #0
    199c:	bl	17d8 <gomp_init_task>
    19a0:	mov	x1, x19
    19a4:	adrp	x0, 0 <gomp_thread_destructor>
    19a8:	ldr	w0, [x0]
    19ac:	bl	0 <pthread_setspecific>
    19b0:	b	192c <gomp_create_artificial_team+0xa8>

00000000000019b4 <GOMP_PLUGIN_target_task_completion>:
    19b4:	stp	x29, x30, [sp, #-48]!
    19b8:	mov	x29, sp
    19bc:	stp	x19, x20, [sp, #16]
    19c0:	stp	x21, x22, [sp, #32]
    19c4:	mov	x19, x0
    19c8:	ldr	x22, [x0, #56]
    19cc:	ldr	x21, [x0, #64]
    19d0:	add	x20, x21, #0x500
    19d4:	mov	w0, #0x1                   	// #1
    19d8:	ldaxr	w1, [x20]
    19dc:	cbnz	w1, 19e8 <GOMP_PLUGIN_target_task_completion+0x34>
    19e0:	stxr	w2, w0, [x20]
    19e4:	cbnz	w2, 19d8 <GOMP_PLUGIN_target_task_completion+0x24>
    19e8:	cmp	w1, #0x0
    19ec:	b.ne	1a30 <GOMP_PLUGIN_target_task_completion+0x7c>  // b.any
    19f0:	ldr	w0, [x19, #44]
    19f4:	cmp	w0, #0x3
    19f8:	b.eq	1a3c <GOMP_PLUGIN_target_task_completion+0x88>  // b.none
    19fc:	mov	w0, #0x5                   	// #5
    1a00:	str	w0, [x19, #44]
    1a04:	mov	x1, x22
    1a08:	mov	x0, x21
    1a0c:	bl	13d0 <gomp_target_task_completion>
    1a10:	ldxr	w0, [x20]
    1a14:	stlxr	w1, wzr, [x20]
    1a18:	cbnz	w1, 1a10 <GOMP_PLUGIN_target_task_completion+0x5c>
    1a1c:	tbnz	w0, #31, 1a60 <GOMP_PLUGIN_target_task_completion+0xac>
    1a20:	ldp	x19, x20, [sp, #16]
    1a24:	ldp	x21, x22, [sp, #32]
    1a28:	ldp	x29, x30, [sp], #48
    1a2c:	ret
    1a30:	mov	x0, x20
    1a34:	bl	0 <gomp_mutex_lock_slow>
    1a38:	b	19f0 <GOMP_PLUGIN_target_task_completion+0x3c>
    1a3c:	mov	w0, #0x5                   	// #5
    1a40:	str	w0, [x19, #44]
    1a44:	ldxr	w0, [x20]
    1a48:	stlxr	w1, wzr, [x20]
    1a4c:	cbnz	w1, 1a44 <GOMP_PLUGIN_target_task_completion+0x90>
    1a50:	tbz	w0, #31, 1a20 <GOMP_PLUGIN_target_task_completion+0x6c>
    1a54:	mov	x0, x20
    1a58:	bl	0 <gomp_mutex_unlock_slow>
    1a5c:	b	1a20 <GOMP_PLUGIN_target_task_completion+0x6c>
    1a60:	mov	x0, x20
    1a64:	bl	0 <gomp_mutex_unlock_slow>
    1a68:	b	1a20 <GOMP_PLUGIN_target_task_completion+0x6c>

0000000000001a6c <gomp_create_target_task>:
    1a6c:	stp	x29, x30, [sp, #-192]!
    1a70:	mov	x29, sp
    1a74:	stp	x19, x20, [sp, #16]
    1a78:	stp	x21, x22, [sp, #32]
    1a7c:	stp	x23, x24, [sp, #48]
    1a80:	stp	x25, x26, [sp, #64]
    1a84:	stp	x27, x28, [sp, #80]
    1a88:	str	x0, [sp, #112]
    1a8c:	mov	x28, x1
    1a90:	mov	x21, x2
    1a94:	str	x3, [sp, #104]
    1a98:	mov	x25, x4
    1a9c:	mov	x23, x5
    1aa0:	str	w6, [sp, #132]
    1aa4:	str	x7, [sp, #120]
    1aa8:	adrp	x0, 0 <gomp_tls_data>
    1aac:	ldr	x0, [x0]
    1ab0:	mrs	x1, tpidr_el0
    1ab4:	add	x0, x1, x0
    1ab8:	ldr	x24, [x0, #16]
    1abc:	cmp	x24, #0x0
    1ac0:	cset	w20, ne  // ne = any
    1ac4:	adrp	x0, 0 <gomp_cancel_var>
    1ac8:	ldrb	w0, [x0]
    1acc:	ands	w20, w20, w0
    1ad0:	b.ne	1b28 <gomp_create_target_task+0xbc>  // b.any
    1ad4:	adrp	x0, 0 <gomp_tls_data>
    1ad8:	ldr	x0, [x0]
    1adc:	mrs	x1, tpidr_el0
    1ae0:	add	x0, x1, x0
    1ae4:	ldr	x26, [x0, #80]
    1ae8:	ldr	x27, [x26, #40]
    1aec:	ldr	x0, [sp, #120]
    1af0:	cbz	x0, 1b78 <gomp_create_target_task+0x10c>
    1af4:	ldr	x0, [x0]
    1af8:	cbz	x0, 1b6c <gomp_create_target_task+0x100>
    1afc:	mov	x22, x0
    1b00:	add	x0, x0, x0, lsl #2
    1b04:	lsl	x0, x0, #3
    1b08:	str	x0, [sp, #96]
    1b0c:	cbz	x28, 1cf0 <gomp_create_target_task+0x284>
    1b10:	cbz	x21, 1cfc <gomp_create_target_task+0x290>
    1b14:	mov	x1, #0x0                   	// #0
    1b18:	mov	x2, #0x0                   	// #0
    1b1c:	mov	x20, #0x0                   	// #0
    1b20:	mov	x4, #0x1                   	// #1
    1b24:	b	1b90 <gomp_create_target_task+0x124>
    1b28:	ldr	w0, [x24, #132]
    1b2c:	tbnz	w0, #2, 1eec <gomp_create_target_task+0x480>
    1b30:	adrp	x0, 0 <gomp_tls_data>
    1b34:	ldr	x0, [x0]
    1b38:	add	x0, x1, x0
    1b3c:	ldr	x0, [x0, #80]
    1b40:	ldr	x0, [x0, #40]
    1b44:	cbz	x0, 1ad4 <gomp_create_target_task+0x68>
    1b48:	ldrb	w20, [x0, #49]
    1b4c:	cbnz	w20, 1eec <gomp_create_target_task+0x480>
    1b50:	ldrb	w1, [x0, #50]
    1b54:	cbz	w1, 1ad4 <gomp_create_target_task+0x68>
    1b58:	ldr	x0, [x0]
    1b5c:	cbz	x0, 1ad4 <gomp_create_target_task+0x68>
    1b60:	ldrb	w20, [x0, #49]
    1b64:	cbz	w20, 1ad4 <gomp_create_target_task+0x68>
    1b68:	b	1eec <gomp_create_target_task+0x480>
    1b6c:	ldr	x0, [sp, #120]
    1b70:	ldr	x0, [x0, #8]
    1b74:	b	1afc <gomp_create_target_task+0x90>
    1b78:	mov	x22, #0x0                   	// #0
    1b7c:	str	xzr, [sp, #96]
    1b80:	b	1b0c <gomp_create_target_task+0xa0>
    1b84:	add	x1, x1, #0x1
    1b88:	cmp	x21, x1
    1b8c:	b.eq	1bcc <gomp_create_target_task+0x160>  // b.none
    1b90:	ldrh	w0, [x23, x1, lsl #1]
    1b94:	and	w3, w0, #0xff
    1b98:	cmp	w3, #0xc
    1b9c:	b.ne	1b84 <gomp_create_target_task+0x118>  // b.any
    1ba0:	lsr	w0, w0, #8
    1ba4:	lsl	x0, x4, x0
    1ba8:	cmp	x20, x0
    1bac:	csel	x20, x20, x0, cs  // cs = hs, nlast
    1bb0:	sub	x2, x2, #0x1
    1bb4:	add	x2, x2, x0
    1bb8:	neg	x0, x0
    1bbc:	and	x0, x0, x2
    1bc0:	ldr	x2, [x25, x1, lsl #3]
    1bc4:	add	x2, x0, x2
    1bc8:	b	1b84 <gomp_create_target_task+0x118>
    1bcc:	add	x0, x20, x2
    1bd0:	sub	x0, x0, #0x1
    1bd4:	cmp	x20, #0x0
    1bd8:	csel	x0, x0, x20, ne  // ne = any
    1bdc:	add	x1, x21, x21, lsl #3
    1be0:	lsl	x1, x1, #1
    1be4:	add	x1, x1, #0x120
    1be8:	ldr	x2, [sp, #96]
    1bec:	add	x0, x2, x0
    1bf0:	add	x0, x1, x0
    1bf4:	bl	0 <gomp_malloc>
    1bf8:	mov	x19, x0
    1bfc:	adrp	x0, 0 <gomp_tls_data>
    1c00:	ldr	x0, [x0]
    1c04:	mrs	x1, tpidr_el0
    1c08:	add	x0, x1, x0
    1c0c:	ldr	x1, [x0, #80]
    1c10:	add	x2, x1, #0x90
    1c14:	adrp	x0, 0 <gomp_global_icv>
    1c18:	add	x0, x0, #0x0
    1c1c:	cmp	x1, #0x0
    1c20:	csel	x2, x0, x2, eq  // eq = none
    1c24:	mov	x1, x26
    1c28:	mov	x0, x19
    1c2c:	bl	17d8 <gomp_init_task>
    1c30:	str	wzr, [x19, #88]
    1c34:	mov	w0, #0x2                   	// #2
    1c38:	str	w0, [x19, #200]
    1c3c:	ldrb	w0, [x26, #204]
    1c40:	strb	w0, [x19, #204]
    1c44:	str	x27, [x19, #40]
    1c48:	add	x0, x22, x22, lsl #2
    1c4c:	lsl	x0, x0, #3
    1c50:	add	x0, x0, #0xd0
    1c54:	add	x22, x19, x0
    1c58:	ldr	x1, [sp, #112]
    1c5c:	str	x1, [x19, x0]
    1c60:	str	x28, [x22, #8]
    1c64:	str	x21, [x22, #16]
    1c68:	ldr	x0, [sp, #192]
    1c6c:	str	x0, [x22, #72]
    1c70:	lsl	x28, x21, #3
    1c74:	mov	x2, x28
    1c78:	ldr	x1, [sp, #104]
    1c7c:	add	x0, x22, #0x50
    1c80:	bl	0 <memcpy>
    1c84:	add	x0, x28, #0x50
    1c88:	add	x0, x22, x0
    1c8c:	str	x0, [x22, #24]
    1c90:	mov	x2, x28
    1c94:	mov	x1, x25
    1c98:	bl	0 <memcpy>
    1c9c:	ldr	x0, [x22, #24]
    1ca0:	add	x0, x0, x28
    1ca4:	str	x0, [x22, #32]
    1ca8:	lsl	x28, x21, #1
    1cac:	mov	x2, x28
    1cb0:	mov	x1, x23
    1cb4:	bl	0 <memcpy>
    1cb8:	cbz	x20, 1d80 <gomp_create_target_task+0x314>
    1cbc:	ldr	x0, [x22, #32]
    1cc0:	add	x28, x0, x28
    1cc4:	sub	x0, x20, #0x1
    1cc8:	ands	x0, x28, x0
    1ccc:	sub	x20, x20, x0
    1cd0:	add	x20, x28, x20
    1cd4:	csel	x28, x20, x28, ne  // ne = any
    1cd8:	cbz	x21, 1d80 <gomp_create_target_task+0x314>
    1cdc:	mov	x20, #0x0                   	// #0
    1ce0:	mov	x2, #0x0                   	// #0
    1ce4:	add	x0, x22, #0x50
    1ce8:	str	x0, [sp, #152]
    1cec:	b	1d14 <gomp_create_target_task+0x2a8>
    1cf0:	mov	x0, #0x0                   	// #0
    1cf4:	mov	x20, #0x0                   	// #0
    1cf8:	b	1bdc <gomp_create_target_task+0x170>
    1cfc:	mov	x0, x21
    1d00:	mov	x20, x21
    1d04:	b	1bdc <gomp_create_target_task+0x170>
    1d08:	add	x20, x20, #0x1
    1d0c:	cmp	x21, x20
    1d10:	b.eq	1d80 <gomp_create_target_task+0x314>  // b.none
    1d14:	ldrh	w0, [x23, x20, lsl #1]
    1d18:	and	w1, w0, #0xff
    1d1c:	cmp	w1, #0xc
    1d20:	b.ne	1d08 <gomp_create_target_task+0x29c>  // b.any
    1d24:	lsr	w0, w0, #8
    1d28:	mov	x1, #0x1                   	// #1
    1d2c:	lsl	x0, x1, x0
    1d30:	sub	x2, x2, #0x1
    1d34:	add	x2, x2, x0
    1d38:	neg	x0, x0
    1d3c:	and	x0, x0, x2
    1d40:	str	x0, [sp, #144]
    1d44:	add	x1, x28, x0
    1d48:	mov	x3, x1
    1d4c:	ldr	x2, [x25, x20, lsl #3]
    1d50:	ldr	x1, [sp, #104]
    1d54:	ldr	x1, [x1, x20, lsl #3]
    1d58:	str	x3, [sp, #136]
    1d5c:	mov	x0, x3
    1d60:	bl	0 <memcpy>
    1d64:	ldr	x2, [sp, #152]
    1d68:	ldr	x1, [sp, #136]
    1d6c:	str	x1, [x2, x20, lsl #3]
    1d70:	ldr	x2, [x25, x20, lsl #3]
    1d74:	ldr	x0, [sp, #144]
    1d78:	add	x2, x0, x2
    1d7c:	b	1d08 <gomp_create_target_task+0x29c>
    1d80:	ldr	w0, [sp, #132]
    1d84:	str	w0, [x22, #40]
    1d88:	ldr	w0, [sp, #200]
    1d8c:	str	w0, [x22, #44]
    1d90:	str	x19, [x22, #56]
    1d94:	str	x24, [x22, #64]
    1d98:	str	xzr, [x19, #184]
    1d9c:	str	x22, [x19, #192]
    1da0:	strb	wzr, [x19, #205]
    1da4:	add	x21, x24, #0x500
    1da8:	mov	w0, #0x1                   	// #1
    1dac:	ldaxr	w1, [x21]
    1db0:	cbnz	w1, 1dbc <gomp_create_target_task+0x350>
    1db4:	stxr	w2, w0, [x21]
    1db8:	cbnz	w2, 1dac <gomp_create_target_task+0x340>
    1dbc:	cmp	w1, #0x0
    1dc0:	b.ne	1f0c <gomp_create_target_task+0x4a0>  // b.any
    1dc4:	adrp	x0, 0 <gomp_cancel_var>
    1dc8:	ldrb	w20, [x0]
    1dcc:	cbnz	w20, 1f18 <gomp_create_target_task+0x4ac>
    1dd0:	ldr	x0, [sp, #96]
    1dd4:	cbnz	x0, 1f7c <gomp_create_target_task+0x510>
    1dd8:	ldr	w0, [sp, #200]
    1ddc:	cbz	w0, 1fc4 <gomp_create_target_task+0x558>
    1de0:	cbz	x27, 1df0 <gomp_create_target_task+0x384>
    1de4:	ldr	x0, [x27, #56]
    1de8:	add	x0, x0, #0x1
    1dec:	str	x0, [x27, #56]
    1df0:	ldr	x0, [sp, #112]
    1df4:	cbz	x0, 1e00 <gomp_create_target_task+0x394>
    1df8:	ldr	w0, [x0, #8]
    1dfc:	tbnz	w0, #2, 2008 <gomp_create_target_task+0x59c>
    1e00:	ldr	x0, [x26, #8]
    1e04:	cbnz	x0, 2258 <gomp_create_target_task+0x7ec>
    1e08:	add	x0, x19, #0x70
    1e0c:	ldr	x1, [x26, #24]
    1e10:	cbz	x1, 22e4 <gomp_create_target_task+0x878>
    1e14:	str	x1, [x19, #112]
    1e18:	ldr	x1, [x1, #8]
    1e1c:	str	x1, [x19, #120]
    1e20:	str	x0, [x26, #24]
    1e24:	ldr	x1, [x19, #112]
    1e28:	str	x0, [x1, #8]
    1e2c:	ldr	x1, [x19, #120]
    1e30:	str	x0, [x1]
    1e34:	cbz	x27, 1e6c <gomp_create_target_task+0x400>
    1e38:	ldr	x0, [x27, #8]
    1e3c:	cbnz	x0, 22f4 <gomp_create_target_task+0x888>
    1e40:	add	x0, x19, #0x80
    1e44:	ldr	x1, [x27, #24]
    1e48:	cbz	x1, 2380 <gomp_create_target_task+0x914>
    1e4c:	str	x1, [x19, #128]
    1e50:	ldr	x1, [x1, #8]
    1e54:	str	x1, [x19, #136]
    1e58:	str	x0, [x27, #24]
    1e5c:	ldr	x1, [x19, #128]
    1e60:	str	x0, [x1, #8]
    1e64:	ldr	x1, [x19, #136]
    1e68:	str	x0, [x1]
    1e6c:	ldr	x0, [x24, #1288]
    1e70:	cbnz	x0, 2390 <gomp_create_target_task+0x924>
    1e74:	add	x1, x19, #0x60
    1e78:	ldr	x0, [x24, #1304]
    1e7c:	cbz	x0, 2414 <gomp_create_target_task+0x9a8>
    1e80:	str	x0, [x19, #96]
    1e84:	ldr	x2, [x0, #8]
    1e88:	str	x2, [x19, #104]
    1e8c:	str	x1, [x0, #8]
    1e90:	ldr	x0, [x19, #104]
    1e94:	str	x1, [x0]
    1e98:	ldr	w0, [x24, #1320]
    1e9c:	add	w0, w0, #0x1
    1ea0:	str	w0, [x24, #1320]
    1ea4:	ldr	w0, [x24, #1324]
    1ea8:	add	w0, w0, #0x1
    1eac:	str	w0, [x24, #1324]
    1eb0:	ldr	w0, [x24, #132]
    1eb4:	orr	w0, w0, #0x1
    1eb8:	str	w0, [x24, #132]
    1ebc:	ldrb	w19, [x26, #204]
    1ec0:	eor	w19, w19, #0x1
    1ec4:	ldr	w0, [x24, #1328]
    1ec8:	add	w19, w19, w0
    1ecc:	ldr	w22, [x24]
    1ed0:	ldxr	w0, [x21]
    1ed4:	stlxr	w1, wzr, [x21]
    1ed8:	cbnz	w1, 1ed0 <gomp_create_target_task+0x464>
    1edc:	tbnz	w0, #31, 2424 <gomp_create_target_task+0x9b8>
    1ee0:	mov	w20, #0x1                   	// #1
    1ee4:	cmp	w19, w22
    1ee8:	b.cc	2430 <gomp_create_target_task+0x9c4>  // b.lo, b.ul, b.last
    1eec:	mov	w0, w20
    1ef0:	ldp	x19, x20, [sp, #16]
    1ef4:	ldp	x21, x22, [sp, #32]
    1ef8:	ldp	x23, x24, [sp, #48]
    1efc:	ldp	x25, x26, [sp, #64]
    1f00:	ldp	x27, x28, [sp, #80]
    1f04:	ldp	x29, x30, [sp], #192
    1f08:	ret
    1f0c:	mov	x0, x21
    1f10:	bl	0 <gomp_mutex_lock_slow>
    1f14:	b	1dc4 <gomp_create_target_task+0x358>
    1f18:	ldr	w0, [x24, #132]
    1f1c:	tbnz	w0, #2, 1f44 <gomp_create_target_task+0x4d8>
    1f20:	cbz	x27, 1dd0 <gomp_create_target_task+0x364>
    1f24:	ldrb	w0, [x27, #49]
    1f28:	cbnz	w0, 1f44 <gomp_create_target_task+0x4d8>
    1f2c:	ldrb	w0, [x27, #50]
    1f30:	cbz	w0, 1dd0 <gomp_create_target_task+0x364>
    1f34:	ldr	x0, [x27]
    1f38:	cbz	x0, 1dd0 <gomp_create_target_task+0x364>
    1f3c:	ldrb	w0, [x0, #49]
    1f40:	cbz	w0, 1dd0 <gomp_create_target_task+0x364>
    1f44:	ldxr	w0, [x21]
    1f48:	stlxr	w1, wzr, [x21]
    1f4c:	cbnz	w1, 1f44 <gomp_create_target_task+0x4d8>
    1f50:	tbnz	w0, #31, 1f68 <gomp_create_target_task+0x4fc>
    1f54:	ldr	x0, [x19, #56]
    1f58:	cbnz	x0, 1f74 <gomp_create_target_task+0x508>
    1f5c:	mov	x0, x19
    1f60:	bl	0 <free>
    1f64:	b	1eec <gomp_create_target_task+0x480>
    1f68:	mov	x0, x21
    1f6c:	bl	0 <gomp_mutex_unlock_slow>
    1f70:	b	1f54 <gomp_create_target_task+0x4e8>
    1f74:	bl	0 <free>
    1f78:	b	1f5c <gomp_create_target_task+0x4f0>
    1f7c:	ldr	x2, [sp, #120]
    1f80:	mov	x1, x26
    1f84:	mov	x0, x19
    1f88:	bl	538 <gomp_task_handle_depend>
    1f8c:	ldr	x0, [x19, #80]
    1f90:	cbz	x0, 1dd8 <gomp_create_target_task+0x36c>
    1f94:	cbz	x27, 1fa4 <gomp_create_target_task+0x538>
    1f98:	ldr	x0, [x27, #56]
    1f9c:	add	x0, x0, #0x1
    1fa0:	str	x0, [x27, #56]
    1fa4:	ldxr	w0, [x21]
    1fa8:	stlxr	w1, wzr, [x21]
    1fac:	cbnz	w1, 1fa4 <gomp_create_target_task+0x538>
    1fb0:	mov	w20, #0x1                   	// #1
    1fb4:	tbz	w0, #31, 1eec <gomp_create_target_task+0x480>
    1fb8:	mov	x0, x21
    1fbc:	bl	0 <gomp_mutex_unlock_slow>
    1fc0:	b	1eec <gomp_create_target_task+0x480>
    1fc4:	mov	x0, x19
    1fc8:	bl	8f0 <gomp_task_run_post_handle_depend_hash>
    1fcc:	ldxr	w0, [x21]
    1fd0:	stlxr	w1, wzr, [x21]
    1fd4:	cbnz	w1, 1fcc <gomp_create_target_task+0x560>
    1fd8:	tbnz	w0, #31, 1ff4 <gomp_create_target_task+0x588>
    1fdc:	ldr	x0, [x19, #56]
    1fe0:	cbnz	x0, 2000 <gomp_create_target_task+0x594>
    1fe4:	mov	x0, x19
    1fe8:	bl	0 <free>
    1fec:	mov	w20, #0x0                   	// #0
    1ff0:	b	1eec <gomp_create_target_task+0x480>
    1ff4:	mov	x0, x21
    1ff8:	bl	0 <gomp_mutex_unlock_slow>
    1ffc:	b	1fdc <gomp_create_target_task+0x570>
    2000:	bl	0 <free>
    2004:	b	1fe4 <gomp_create_target_task+0x578>
    2008:	ldr	x0, [x26, #8]
    200c:	cbnz	x0, 2108 <gomp_create_target_task+0x69c>
    2010:	add	x1, x19, #0x70
    2014:	ldr	x0, [x26, #24]
    2018:	cbz	x0, 218c <gomp_create_target_task+0x720>
    201c:	str	x0, [x19, #112]
    2020:	ldr	x2, [x0, #8]
    2024:	str	x2, [x19, #120]
    2028:	str	x1, [x0, #8]
    202c:	ldr	x0, [x19, #120]
    2030:	str	x1, [x0]
    2034:	cbz	x27, 2064 <gomp_create_target_task+0x5f8>
    2038:	ldr	x0, [x27, #8]
    203c:	cbnz	x0, 219c <gomp_create_target_task+0x730>
    2040:	add	x1, x19, #0x80
    2044:	ldr	x0, [x27, #24]
    2048:	cbz	x0, 2220 <gomp_create_target_task+0x7b4>
    204c:	str	x0, [x19, #128]
    2050:	ldr	x2, [x0, #8]
    2054:	str	x2, [x19, #136]
    2058:	str	x1, [x0, #8]
    205c:	ldr	x0, [x19, #136]
    2060:	str	x1, [x0]
    2064:	str	xzr, [x19, #96]
    2068:	str	xzr, [x19, #104]
    206c:	mov	w0, #0x3                   	// #3
    2070:	str	w0, [x19, #200]
    2074:	ldr	w0, [x24, #1320]
    2078:	add	w0, w0, #0x1
    207c:	str	w0, [x24, #1320]
    2080:	ldxr	w0, [x21]
    2084:	stlxr	w1, wzr, [x21]
    2088:	cbnz	w1, 2080 <gomp_create_target_task+0x614>
    208c:	tbnz	w0, #31, 2230 <gomp_create_target_task+0x7c4>
    2090:	adrp	x20, 0 <gomp_tls_data>
    2094:	ldr	x20, [x20]
    2098:	mrs	x0, tpidr_el0
    209c:	add	x20, x0, x20
    20a0:	str	x19, [x20, #80]
    20a4:	ldr	x0, [x19, #192]
    20a8:	bl	0 <gomp_target_task_fn>
    20ac:	str	x26, [x20, #80]
    20b0:	mov	w0, #0x1                   	// #1
    20b4:	ldaxr	w1, [x21]
    20b8:	cbnz	w1, 20c4 <gomp_create_target_task+0x658>
    20bc:	stxr	w2, w0, [x21]
    20c0:	cbnz	w2, 20b4 <gomp_create_target_task+0x648>
    20c4:	cmp	w1, #0x0
    20c8:	b.ne	223c <gomp_create_target_task+0x7d0>  // b.any
    20cc:	mov	w0, #0x4                   	// #4
    20d0:	str	w0, [x19, #200]
    20d4:	ldr	w0, [x22, #44]
    20d8:	cmp	w0, #0x5
    20dc:	b.eq	2248 <gomp_create_target_task+0x7dc>  // b.none
    20e0:	mov	w0, #0x4                   	// #4
    20e4:	str	w0, [x22, #44]
    20e8:	ldxr	w0, [x21]
    20ec:	stlxr	w1, wzr, [x21]
    20f0:	cbnz	w1, 20e8 <gomp_create_target_task+0x67c>
    20f4:	mov	w20, #0x1                   	// #1
    20f8:	tbz	w0, #31, 1eec <gomp_create_target_task+0x480>
    20fc:	mov	x0, x21
    2100:	bl	0 <gomp_mutex_unlock_slow>
    2104:	b	1eec <gomp_create_target_task+0x480>
    2108:	add	x23, x26, #0x8
    210c:	str	wzr, [sp, #168]
    2110:	add	x1, sp, #0xa8
    2114:	mov	x0, x23
    2118:	bl	0 <prio_splay_tree_lookup>
    211c:	cbz	x0, 2148 <gomp_create_target_task+0x6dc>
    2120:	add	x2, x19, #0x70
    2124:	ldr	x1, [x0, #8]
    2128:	cbz	x1, 217c <gomp_create_target_task+0x710>
    212c:	str	x1, [x19, #112]
    2130:	ldr	x0, [x1, #8]
    2134:	str	x0, [x19, #120]
    2138:	str	x2, [x1, #8]
    213c:	ldr	x0, [x19, #120]
    2140:	str	x2, [x0]
    2144:	b	2034 <gomp_create_target_task+0x5c8>
    2148:	mov	x0, #0x28                  	// #40
    214c:	bl	0 <gomp_malloc>
    2150:	mov	x20, x0
    2154:	str	xzr, [x0, #24]
    2158:	str	xzr, [x0, #32]
    215c:	str	wzr, [x0]
    2160:	str	xzr, [x0, #8]
    2164:	str	xzr, [x0, #16]
    2168:	mov	x1, x0
    216c:	mov	x0, x23
    2170:	bl	0 <prio_splay_tree_insert>
    2174:	mov	x0, x20
    2178:	b	2120 <gomp_create_target_task+0x6b4>
    217c:	str	x2, [x19, #112]
    2180:	str	x2, [x19, #120]
    2184:	str	x2, [x0, #8]
    2188:	b	2034 <gomp_create_target_task+0x5c8>
    218c:	str	x1, [x19, #112]
    2190:	str	x1, [x19, #120]
    2194:	str	x1, [x26, #24]
    2198:	b	2034 <gomp_create_target_task+0x5c8>
    219c:	add	x27, x27, #0x8
    21a0:	str	wzr, [sp, #168]
    21a4:	add	x1, sp, #0xa8
    21a8:	mov	x0, x27
    21ac:	bl	0 <prio_splay_tree_lookup>
    21b0:	mov	x20, x0
    21b4:	cbz	x0, 21e0 <gomp_create_target_task+0x774>
    21b8:	add	x0, x19, #0x80
    21bc:	ldr	x1, [x20, #8]
    21c0:	cbz	x1, 2210 <gomp_create_target_task+0x7a4>
    21c4:	str	x1, [x19, #128]
    21c8:	ldr	x2, [x1, #8]
    21cc:	str	x2, [x19, #136]
    21d0:	str	x0, [x1, #8]
    21d4:	ldr	x1, [x19, #136]
    21d8:	str	x0, [x1]
    21dc:	b	2064 <gomp_create_target_task+0x5f8>
    21e0:	mov	x0, #0x28                  	// #40
    21e4:	bl	0 <gomp_malloc>
    21e8:	mov	x20, x0
    21ec:	str	xzr, [x0, #24]
    21f0:	str	xzr, [x0, #32]
    21f4:	str	wzr, [x0]
    21f8:	str	xzr, [x0, #8]
    21fc:	str	xzr, [x0, #16]
    2200:	mov	x1, x0
    2204:	mov	x0, x27
    2208:	bl	0 <prio_splay_tree_insert>
    220c:	b	21b8 <gomp_create_target_task+0x74c>
    2210:	str	x0, [x19, #128]
    2214:	str	x0, [x19, #136]
    2218:	str	x0, [x20, #8]
    221c:	b	2064 <gomp_create_target_task+0x5f8>
    2220:	str	x1, [x19, #128]
    2224:	str	x1, [x19, #136]
    2228:	str	x1, [x27, #24]
    222c:	b	2064 <gomp_create_target_task+0x5f8>
    2230:	mov	x0, x21
    2234:	bl	0 <gomp_mutex_unlock_slow>
    2238:	b	2090 <gomp_create_target_task+0x624>
    223c:	mov	x0, x21
    2240:	bl	0 <gomp_mutex_lock_slow>
    2244:	b	20cc <gomp_create_target_task+0x660>
    2248:	mov	x1, x19
    224c:	mov	x0, x24
    2250:	bl	13d0 <gomp_target_task_completion>
    2254:	b	20e8 <gomp_create_target_task+0x67c>
    2258:	add	x22, x26, #0x8
    225c:	str	wzr, [sp, #168]
    2260:	add	x1, sp, #0xa8
    2264:	mov	x0, x22
    2268:	bl	0 <prio_splay_tree_lookup>
    226c:	cbz	x0, 22a0 <gomp_create_target_task+0x834>
    2270:	add	x1, x19, #0x70
    2274:	ldr	x2, [x0, #8]
    2278:	cbz	x2, 22d4 <gomp_create_target_task+0x868>
    227c:	str	x2, [x19, #112]
    2280:	ldr	x2, [x2, #8]
    2284:	str	x2, [x19, #120]
    2288:	str	x1, [x0, #8]
    228c:	ldr	x0, [x19, #112]
    2290:	str	x1, [x0, #8]
    2294:	ldr	x0, [x19, #120]
    2298:	str	x1, [x0]
    229c:	b	1e34 <gomp_create_target_task+0x3c8>
    22a0:	mov	x0, #0x28                  	// #40
    22a4:	bl	0 <gomp_malloc>
    22a8:	mov	x20, x0
    22ac:	str	xzr, [x0, #24]
    22b0:	str	xzr, [x0, #32]
    22b4:	str	wzr, [x0]
    22b8:	str	xzr, [x0, #8]
    22bc:	str	xzr, [x0, #16]
    22c0:	mov	x1, x0
    22c4:	mov	x0, x22
    22c8:	bl	0 <prio_splay_tree_insert>
    22cc:	mov	x0, x20
    22d0:	b	2270 <gomp_create_target_task+0x804>
    22d4:	str	x1, [x19, #112]
    22d8:	str	x1, [x19, #120]
    22dc:	str	x1, [x0, #8]
    22e0:	b	1e34 <gomp_create_target_task+0x3c8>
    22e4:	str	x0, [x19, #112]
    22e8:	str	x0, [x19, #120]
    22ec:	str	x0, [x26, #24]
    22f0:	b	1e34 <gomp_create_target_task+0x3c8>
    22f4:	add	x27, x27, #0x8
    22f8:	str	wzr, [sp, #168]
    22fc:	add	x1, sp, #0xa8
    2300:	mov	x0, x27
    2304:	bl	0 <prio_splay_tree_lookup>
    2308:	cbz	x0, 233c <gomp_create_target_task+0x8d0>
    230c:	add	x1, x19, #0x80
    2310:	ldr	x2, [x0, #8]
    2314:	cbz	x2, 2370 <gomp_create_target_task+0x904>
    2318:	str	x2, [x19, #128]
    231c:	ldr	x2, [x2, #8]
    2320:	str	x2, [x19, #136]
    2324:	str	x1, [x0, #8]
    2328:	ldr	x0, [x19, #128]
    232c:	str	x1, [x0, #8]
    2330:	ldr	x0, [x19, #136]
    2334:	str	x1, [x0]
    2338:	b	1e6c <gomp_create_target_task+0x400>
    233c:	mov	x0, #0x28                  	// #40
    2340:	bl	0 <gomp_malloc>
    2344:	mov	x20, x0
    2348:	str	xzr, [x0, #24]
    234c:	str	xzr, [x0, #32]
    2350:	str	wzr, [x0]
    2354:	str	xzr, [x0, #8]
    2358:	str	xzr, [x0, #16]
    235c:	mov	x1, x0
    2360:	mov	x0, x27
    2364:	bl	0 <prio_splay_tree_insert>
    2368:	mov	x0, x20
    236c:	b	230c <gomp_create_target_task+0x8a0>
    2370:	str	x1, [x19, #128]
    2374:	str	x1, [x19, #136]
    2378:	str	x1, [x0, #8]
    237c:	b	1e6c <gomp_create_target_task+0x400>
    2380:	str	x0, [x19, #128]
    2384:	str	x0, [x19, #136]
    2388:	str	x0, [x27, #24]
    238c:	b	1e6c <gomp_create_target_task+0x400>
    2390:	add	x22, x24, #0x508
    2394:	str	wzr, [sp, #168]
    2398:	add	x1, sp, #0xa8
    239c:	mov	x0, x22
    23a0:	bl	0 <prio_splay_tree_lookup>
    23a4:	cbz	x0, 23d0 <gomp_create_target_task+0x964>
    23a8:	add	x2, x19, #0x60
    23ac:	ldr	x1, [x0, #8]
    23b0:	cbz	x1, 2404 <gomp_create_target_task+0x998>
    23b4:	str	x1, [x19, #96]
    23b8:	ldr	x0, [x1, #8]
    23bc:	str	x0, [x19, #104]
    23c0:	str	x2, [x1, #8]
    23c4:	ldr	x0, [x19, #104]
    23c8:	str	x2, [x0]
    23cc:	b	1e98 <gomp_create_target_task+0x42c>
    23d0:	mov	x0, #0x28                  	// #40
    23d4:	bl	0 <gomp_malloc>
    23d8:	mov	x20, x0
    23dc:	str	xzr, [x0, #24]
    23e0:	str	xzr, [x0, #32]
    23e4:	str	wzr, [x0]
    23e8:	str	xzr, [x0, #8]
    23ec:	str	xzr, [x0, #16]
    23f0:	mov	x1, x0
    23f4:	mov	x0, x22
    23f8:	bl	0 <prio_splay_tree_insert>
    23fc:	mov	x0, x20
    2400:	b	23a8 <gomp_create_target_task+0x93c>
    2404:	str	x2, [x19, #96]
    2408:	str	x2, [x19, #104]
    240c:	str	x2, [x0, #8]
    2410:	b	1e98 <gomp_create_target_task+0x42c>
    2414:	str	x1, [x19, #96]
    2418:	str	x1, [x19, #104]
    241c:	str	x1, [x24, #1304]
    2420:	b	1e98 <gomp_create_target_task+0x42c>
    2424:	mov	x0, x21
    2428:	bl	0 <gomp_mutex_unlock_slow>
    242c:	b	1ee0 <gomp_create_target_task+0x474>
    2430:	mov	w1, w20
    2434:	add	x0, x24, #0x80
    2438:	bl	0 <gomp_team_barrier_wake>
    243c:	b	1eec <gomp_create_target_task+0x480>

0000000000002440 <gomp_barrier_handle_tasks>:
    2440:	stp	x29, x30, [sp, #-128]!
    2444:	mov	x29, sp
    2448:	stp	x19, x20, [sp, #16]
    244c:	stp	x21, x22, [sp, #32]
    2450:	stp	x27, x28, [sp, #80]
    2454:	mov	w19, w0
    2458:	adrp	x0, 0 <gomp_tls_data>
    245c:	ldr	x0, [x0]
    2460:	mrs	x1, tpidr_el0
    2464:	add	x0, x1, x0
    2468:	ldr	x20, [x0, #16]
    246c:	ldr	x27, [x0, #80]
    2470:	add	x21, x20, #0x500
    2474:	mov	w0, #0x1                   	// #1
    2478:	ldaxr	w1, [x21]
    247c:	cbnz	w1, 2488 <gomp_barrier_handle_tasks+0x48>
    2480:	stxr	w2, w0, [x21]
    2484:	cbnz	w2, 2478 <gomp_barrier_handle_tasks+0x38>
    2488:	cmp	w1, #0x0
    248c:	b.ne	24d4 <gomp_barrier_handle_tasks+0x94>  // b.any
    2490:	tbz	w19, #0, 2518 <gomp_barrier_handle_tasks+0xd8>
    2494:	ldr	w0, [x20, #1320]
    2498:	cbz	w0, 24e0 <gomp_barrier_handle_tasks+0xa0>
    249c:	stp	x23, x24, [sp, #48]
    24a0:	stp	x25, x26, [sp, #64]
    24a4:	ldr	w0, [x20, #132]
    24a8:	orr	w0, w0, #0x2
    24ac:	str	w0, [x20, #132]
    24b0:	mov	w24, #0x0                   	// #0
    24b4:	mov	x22, #0x0                   	// #0
    24b8:	and	w19, w19, #0xfffffff8
    24bc:	add	w28, w19, #0x8
    24c0:	mrs	x26, tpidr_el0
    24c4:	adrp	x0, 0 <gomp_tls_data>
    24c8:	ldr	x0, [x0]
    24cc:	add	x26, x26, x0
    24d0:	b	2810 <gomp_barrier_handle_tasks+0x3d0>
    24d4:	mov	x0, x21
    24d8:	bl	0 <gomp_mutex_lock_slow>
    24dc:	b	2490 <gomp_barrier_handle_tasks+0x50>
    24e0:	and	w0, w19, #0xfffffff8
    24e4:	add	w0, w0, #0x8
    24e8:	str	w0, [x20, #132]
    24ec:	ldxr	w0, [x21]
    24f0:	stlxr	w1, wzr, [x21]
    24f4:	cbnz	w1, 24ec <gomp_barrier_handle_tasks+0xac>
    24f8:	tbnz	w0, #31, 250c <gomp_barrier_handle_tasks+0xcc>
    24fc:	mov	w1, #0x0                   	// #0
    2500:	add	x0, x20, #0x80
    2504:	bl	0 <gomp_team_barrier_wake>
    2508:	b	2a30 <gomp_barrier_handle_tasks+0x5f0>
    250c:	mov	x0, x21
    2510:	bl	0 <gomp_mutex_unlock_slow>
    2514:	b	24fc <gomp_barrier_handle_tasks+0xbc>
    2518:	stp	x23, x24, [sp, #48]
    251c:	stp	x25, x26, [sp, #64]
    2520:	b	24b0 <gomp_barrier_handle_tasks+0x70>
    2524:	add	x4, sp, #0x7f
    2528:	mov	x3, #0x0                   	// #0
    252c:	mov	w2, #0x3e7                 	// #999
    2530:	add	x1, x20, #0x508
    2534:	mov	w0, #0x0                   	// #0
    2538:	bl	0 <priority_tree_next_task>
    253c:	mov	x19, x0
    2540:	cbnz	x0, 2564 <gomp_barrier_handle_tasks+0x124>
    2544:	ldr	x0, [x20, #1288]
    2548:	ldr	x19, [x0, #8]
    254c:	sub	x19, x19, #0x60
    2550:	b	2564 <gomp_barrier_handle_tasks+0x124>
    2554:	mov	w0, #0x1                   	// #1
    2558:	strb	w0, [sp, #127]
    255c:	ldr	x19, [x20, #1304]
    2560:	sub	x19, x19, #0x60
    2564:	mov	x2, x20
    2568:	ldr	x1, [x19]
    256c:	mov	x0, x19
    2570:	bl	a20 <gomp_task_run_pre>
    2574:	ands	w23, w0, #0xff
    2578:	b.ne	2594 <gomp_barrier_handle_tasks+0x154>  // b.any
    257c:	ldr	w0, [x20, #1328]
    2580:	add	w0, w0, #0x1
    2584:	str	w0, [x20, #1328]
    2588:	mov	w0, #0x1                   	// #1
    258c:	strb	w0, [x19, #204]
    2590:	b	2820 <gomp_barrier_handle_tasks+0x3e0>
    2594:	cbz	x22, 288c <gomp_barrier_handle_tasks+0x44c>
    2598:	ldr	x0, [x22, #56]
    259c:	cbnz	x0, 25ac <gomp_barrier_handle_tasks+0x16c>
    25a0:	mov	x0, x22
    25a4:	bl	0 <free>
    25a8:	b	288c <gomp_barrier_handle_tasks+0x44c>
    25ac:	bl	0 <free>
    25b0:	b	25a0 <gomp_barrier_handle_tasks+0x160>
    25b4:	mov	x0, x21
    25b8:	bl	0 <gomp_mutex_unlock_slow>
    25bc:	b	2830 <gomp_barrier_handle_tasks+0x3f0>
    25c0:	mov	w1, w24
    25c4:	add	x0, x20, #0x80
    25c8:	bl	0 <gomp_team_barrier_wake>
    25cc:	b	2834 <gomp_barrier_handle_tasks+0x3f4>
    25d0:	bl	0 <free>
    25d4:	b	2840 <gomp_barrier_handle_tasks+0x400>
    25d8:	ldr	x0, [x19, #192]
    25dc:	bl	0 <gomp_target_task_fn>
    25e0:	and	w0, w0, #0xff
    25e4:	cbz	w0, 2860 <gomp_barrier_handle_tasks+0x420>
    25e8:	str	x27, [x26, #80]
    25ec:	mov	w0, #0x1                   	// #1
    25f0:	ldaxr	w1, [x21]
    25f4:	cbnz	w1, 2600 <gomp_barrier_handle_tasks+0x1c0>
    25f8:	stxr	w2, w0, [x21]
    25fc:	cbnz	w2, 25f0 <gomp_barrier_handle_tasks+0x1b0>
    2600:	cmp	w1, #0x0
    2604:	b.ne	2640 <gomp_barrier_handle_tasks+0x200>  // b.any
    2608:	mov	w0, #0x4                   	// #4
    260c:	str	w0, [x19, #200]
    2610:	ldr	w0, [x20, #1328]
    2614:	sub	w0, w0, #0x1
    2618:	str	w0, [x20, #1328]
    261c:	ldr	x0, [x19, #192]
    2620:	ldr	w1, [x0, #44]
    2624:	cmp	w1, #0x5
    2628:	b.eq	264c <gomp_barrier_handle_tasks+0x20c>  // b.none
    262c:	mov	w1, #0x4                   	// #4
    2630:	str	w1, [x0, #44]
    2634:	mov	w24, #0x0                   	// #0
    2638:	mov	x19, #0x0                   	// #0
    263c:	b	280c <gomp_barrier_handle_tasks+0x3cc>
    2640:	mov	x0, x21
    2644:	bl	0 <gomp_mutex_lock_slow>
    2648:	b	2608 <gomp_barrier_handle_tasks+0x1c8>
    264c:	mov	x1, x19
    2650:	mov	x0, x20
    2654:	bl	13d0 <gomp_target_task_completion>
    2658:	mov	w24, #0x0                   	// #0
    265c:	mov	x19, #0x0                   	// #0
    2660:	b	280c <gomp_barrier_handle_tasks+0x3cc>
    2664:	mov	x0, x21
    2668:	bl	0 <gomp_mutex_lock_slow>
    266c:	mov	w24, #0x0                   	// #0
    2670:	b	288c <gomp_barrier_handle_tasks+0x44c>
    2674:	ldr	x1, [x25, #64]
    2678:	ldr	x0, [x1, #8]
    267c:	sub	x0, x0, #0x1
    2680:	str	x0, [x1, #8]
    2684:	cbnz	x0, 28d0 <gomp_barrier_handle_tasks+0x490>
    2688:	ldr	x0, [x25, #64]
    268c:	ldrb	w1, [x0, #1]
    2690:	cbz	w1, 28d0 <gomp_barrier_handle_tasks+0x490>
    2694:	strb	wzr, [x0, #1]
    2698:	ldr	x1, [x25, #64]
    269c:	add	x0, x1, #0x10
    26a0:	ldr	w1, [x1, #16]
    26a4:	add	w2, w1, #0x1
    26a8:	and	w2, w2, #0x7fffffff
    26ac:	ldxr	w3, [x0]
    26b0:	cmp	w3, w1
    26b4:	b.ne	26c0 <gomp_barrier_handle_tasks+0x280>  // b.any
    26b8:	stlxr	w4, w2, [x0]
    26bc:	cmp	w4, #0x0
    26c0:	mov	w1, w3
    26c4:	b.ne	26a4 <gomp_barrier_handle_tasks+0x264>  // b.any
    26c8:	tbz	w3, #31, 28d0 <gomp_barrier_handle_tasks+0x490>
    26cc:	bl	0 <gomp_sem_post_slow>
    26d0:	b	28d0 <gomp_barrier_handle_tasks+0x490>
    26d4:	add	x0, x25, #0x8
    26d8:	str	x0, [sp, #104]
    26dc:	add	x2, x19, #0x70
    26e0:	mov	x1, x0
    26e4:	mov	w0, #0x1                   	// #1
    26e8:	bl	0 <priority_tree_remove>
    26ec:	ldr	x0, [x25, #8]
    26f0:	cbnz	x0, 28fc <gomp_barrier_handle_tasks+0x4bc>
    26f4:	ldr	x0, [sp, #104]
    26f8:	stlr	xzr, [x0]
    26fc:	b	271c <gomp_barrier_handle_tasks+0x2dc>
    2700:	ldr	x0, [x19, #112]
    2704:	cmp	x1, x0
    2708:	b.eq	2714 <gomp_barrier_handle_tasks+0x2d4>  // b.none
    270c:	str	x0, [x25, #24]
    2710:	b	28fc <gomp_barrier_handle_tasks+0x4bc>
    2714:	add	x0, x25, #0x18
    2718:	stlr	xzr, [x0]
    271c:	ldr	x0, [x25, #64]
    2720:	cbz	x0, 28fc <gomp_barrier_handle_tasks+0x4bc>
    2724:	ldrb	w1, [x0]
    2728:	cbz	w1, 28fc <gomp_barrier_handle_tasks+0x4bc>
    272c:	strb	wzr, [x0]
    2730:	ldr	x1, [x25, #64]
    2734:	add	x0, x1, #0x10
    2738:	ldr	w1, [x1, #16]
    273c:	add	w2, w1, #0x1
    2740:	and	w2, w2, #0x7fffffff
    2744:	ldxr	w3, [x0]
    2748:	cmp	w3, w1
    274c:	b.ne	2758 <gomp_barrier_handle_tasks+0x318>  // b.any
    2750:	stlxr	w4, w2, [x0]
    2754:	cmp	w4, #0x0
    2758:	mov	w1, w3
    275c:	b.ne	273c <gomp_barrier_handle_tasks+0x2fc>  // b.any
    2760:	tbz	w3, #31, 28fc <gomp_barrier_handle_tasks+0x4bc>
    2764:	bl	0 <gomp_sem_post_slow>
    2768:	b	28fc <gomp_barrier_handle_tasks+0x4bc>
    276c:	add	x0, x19, #0x8
    2770:	bl	d4 <gomp_clear_parent_in_tree>
    2774:	str	xzr, [x19, #8]
    2778:	b	2928 <gomp_barrier_handle_tasks+0x4e8>
    277c:	add	x2, x19, #0x80
    2780:	add	x1, x25, #0x8
    2784:	mov	w0, #0x2                   	// #2
    2788:	bl	0 <priority_tree_remove>
    278c:	ldr	x0, [x25, #8]
    2790:	cmp	x0, #0x0
    2794:	cset	w1, eq  // eq = none
    2798:	b	2960 <gomp_barrier_handle_tasks+0x520>
    279c:	ldr	x0, [x19, #128]
    27a0:	cmp	x2, x0
    27a4:	b.eq	27b0 <gomp_barrier_handle_tasks+0x370>  // b.none
    27a8:	str	x0, [x25, #24]
    27ac:	b	2960 <gomp_barrier_handle_tasks+0x520>
    27b0:	str	xzr, [x25, #24]
    27b4:	mov	w1, #0x1                   	// #1
    27b8:	b	2960 <gomp_barrier_handle_tasks+0x520>
    27bc:	add	x0, x25, #0x38
    27c0:	stlr	xzr, [x0]
    27c4:	b	297c <gomp_barrier_handle_tasks+0x53c>
    27c8:	cbnz	w23, 27d8 <gomp_barrier_handle_tasks+0x398>
    27cc:	ldr	w0, [x20, #1328]
    27d0:	sub	w0, w0, #0x1
    27d4:	str	w0, [x20, #1328]
    27d8:	cmp	x22, #0x1
    27dc:	b.ls	27f4 <gomp_barrier_handle_tasks+0x3b4>  // b.plast
    27e0:	ldr	w0, [x20]
    27e4:	ldr	w1, [x20, #1328]
    27e8:	sub	w24, w0, w1
    27ec:	cmp	x22, w24, sxtw
    27f0:	csel	w24, w22, w24, cc  // cc = lo, ul, last
    27f4:	ldr	w0, [x20, #1320]
    27f8:	sub	w0, w0, #0x1
    27fc:	str	w0, [x20, #1320]
    2800:	cbnz	w0, 280c <gomp_barrier_handle_tasks+0x3cc>
    2804:	ldr	w0, [x20, #132]
    2808:	tbnz	w0, #1, 29c4 <gomp_barrier_handle_tasks+0x584>
    280c:	mov	x22, x19
    2810:	ldr	x0, [x20, #1288]
    2814:	cbnz	x0, 2524 <gomp_barrier_handle_tasks+0xe4>
    2818:	ldr	x19, [x20, #1304]
    281c:	cbnz	x19, 2554 <gomp_barrier_handle_tasks+0x114>
    2820:	ldxr	w0, [x21]
    2824:	stlxr	w1, wzr, [x21]
    2828:	cbnz	w1, 2820 <gomp_barrier_handle_tasks+0x3e0>
    282c:	tbnz	w0, #31, 25b4 <gomp_barrier_handle_tasks+0x174>
    2830:	cbnz	w24, 25c0 <gomp_barrier_handle_tasks+0x180>
    2834:	cbz	x22, 2848 <gomp_barrier_handle_tasks+0x408>
    2838:	ldr	x0, [x22, #56]
    283c:	cbnz	x0, 25d0 <gomp_barrier_handle_tasks+0x190>
    2840:	mov	x0, x22
    2844:	bl	0 <free>
    2848:	cbz	x19, 2a28 <gomp_barrier_handle_tasks+0x5e8>
    284c:	str	x19, [x26, #80]
    2850:	ldr	x1, [x19, #184]
    2854:	cbz	x1, 25d8 <gomp_barrier_handle_tasks+0x198>
    2858:	ldr	x0, [x19, #192]
    285c:	blr	x1
    2860:	str	x27, [x26, #80]
    2864:	mov	w0, #0x1                   	// #1
    2868:	ldaxr	w1, [x21]
    286c:	cbnz	w1, 2878 <gomp_barrier_handle_tasks+0x438>
    2870:	stxr	w2, w0, [x21]
    2874:	cbnz	w2, 2868 <gomp_barrier_handle_tasks+0x428>
    2878:	cmp	w1, #0x0
    287c:	cset	w23, eq  // eq = none
    2880:	b.ne	2664 <gomp_barrier_handle_tasks+0x224>  // b.any
    2884:	mov	w23, #0x0                   	// #0
    2888:	mov	w24, #0x0                   	// #0
    288c:	ldr	x22, [x19, #72]
    2890:	cbz	x22, 28c0 <gomp_barrier_handle_tasks+0x480>
    2894:	ldr	x0, [x19]
    2898:	cbz	x0, 2a18 <gomp_barrier_handle_tasks+0x5d8>
    289c:	mov	x0, x19
    28a0:	bl	8f0 <gomp_task_run_post_handle_depend_hash>
    28a4:	ldr	x0, [x19, #48]
    28a8:	mov	x22, #0x0                   	// #0
    28ac:	cbz	x0, 28c0 <gomp_barrier_handle_tasks+0x480>
    28b0:	mov	x1, x20
    28b4:	mov	x0, x19
    28b8:	bl	e24 <gomp_task_run_post_handle_dependers>
    28bc:	mov	x22, x0
    28c0:	ldr	x25, [x19]
    28c4:	cbz	x25, 2904 <gomp_barrier_handle_tasks+0x4c4>
    28c8:	ldrb	w0, [x19, #207]
    28cc:	cbnz	w0, 2674 <gomp_barrier_handle_tasks+0x234>
    28d0:	ldr	x0, [x25, #8]
    28d4:	cbnz	x0, 26d4 <gomp_barrier_handle_tasks+0x294>
    28d8:	add	x1, x19, #0x70
    28dc:	ldr	x2, [x19, #120]
    28e0:	ldr	x0, [x19, #112]
    28e4:	str	x0, [x2]
    28e8:	ldr	x2, [x19, #120]
    28ec:	str	x2, [x0, #8]
    28f0:	ldr	x0, [x25, #24]
    28f4:	cmp	x1, x0
    28f8:	b.eq	2700 <gomp_barrier_handle_tasks+0x2c0>  // b.none
    28fc:	str	xzr, [x19, #112]
    2900:	str	xzr, [x19, #120]
    2904:	ldr	x1, [x19, #8]
    2908:	cbnz	x1, 276c <gomp_barrier_handle_tasks+0x32c>
    290c:	ldr	x0, [x19, #24]
    2910:	cbz	x0, 2928 <gomp_barrier_handle_tasks+0x4e8>
    2914:	stur	xzr, [x0, #-112]
    2918:	ldr	x0, [x0]
    291c:	ldr	x1, [x19, #24]
    2920:	cmp	x0, x1
    2924:	b.ne	2914 <gomp_barrier_handle_tasks+0x4d4>  // b.any
    2928:	ldr	x25, [x19, #40]
    292c:	cbz	x25, 27c8 <gomp_barrier_handle_tasks+0x388>
    2930:	ldr	x0, [x25, #8]
    2934:	cbnz	x0, 277c <gomp_barrier_handle_tasks+0x33c>
    2938:	add	x2, x19, #0x80
    293c:	ldr	x1, [x19, #136]
    2940:	ldr	x0, [x19, #128]
    2944:	str	x0, [x1]
    2948:	ldr	x1, [x19, #136]
    294c:	str	x1, [x0, #8]
    2950:	ldr	x0, [x25, #24]
    2954:	mov	w1, #0x0                   	// #0
    2958:	cmp	x2, x0
    295c:	b.eq	279c <gomp_barrier_handle_tasks+0x35c>  // b.none
    2960:	str	xzr, [x19, #128]
    2964:	str	xzr, [x19, #136]
    2968:	ldr	x0, [x25, #56]
    296c:	cmp	x0, #0x1
    2970:	b.ls	27bc <gomp_barrier_handle_tasks+0x37c>  // b.plast
    2974:	sub	x0, x0, #0x1
    2978:	str	x0, [x25, #56]
    297c:	cbz	w1, 27c8 <gomp_barrier_handle_tasks+0x388>
    2980:	ldrb	w0, [x25, #48]
    2984:	cbz	w0, 27c8 <gomp_barrier_handle_tasks+0x388>
    2988:	strb	wzr, [x25, #48]
    298c:	add	x0, x25, #0x34
    2990:	ldr	w1, [x25, #52]
    2994:	add	w2, w1, #0x1
    2998:	and	w2, w2, #0x7fffffff
    299c:	ldxr	w3, [x0]
    29a0:	cmp	w3, w1
    29a4:	b.ne	29b0 <gomp_barrier_handle_tasks+0x570>  // b.any
    29a8:	stlxr	w4, w2, [x0]
    29ac:	cmp	w4, #0x0
    29b0:	mov	w1, w3
    29b4:	b.ne	2994 <gomp_barrier_handle_tasks+0x554>  // b.any
    29b8:	tbz	w3, #31, 27c8 <gomp_barrier_handle_tasks+0x388>
    29bc:	bl	0 <gomp_sem_post_slow>
    29c0:	b	27c8 <gomp_barrier_handle_tasks+0x388>
    29c4:	str	w28, [x20, #132]
    29c8:	ldxr	w0, [x21]
    29cc:	stlxr	w1, wzr, [x21]
    29d0:	cbnz	w1, 29c8 <gomp_barrier_handle_tasks+0x588>
    29d4:	tbnz	w0, #31, 2a0c <gomp_barrier_handle_tasks+0x5cc>
    29d8:	mov	w1, #0x0                   	// #0
    29dc:	add	x0, x20, #0x80
    29e0:	bl	0 <gomp_team_barrier_wake>
    29e4:	mov	w0, #0x1                   	// #1
    29e8:	ldaxr	w1, [x21]
    29ec:	cbnz	w1, 29f8 <gomp_barrier_handle_tasks+0x5b8>
    29f0:	stxr	w2, w0, [x21]
    29f4:	cbnz	w2, 29e8 <gomp_barrier_handle_tasks+0x5a8>
    29f8:	cmp	w1, #0x0
    29fc:	b.eq	280c <gomp_barrier_handle_tasks+0x3cc>  // b.none
    2a00:	mov	x0, x21
    2a04:	bl	0 <gomp_mutex_lock_slow>
    2a08:	b	280c <gomp_barrier_handle_tasks+0x3cc>
    2a0c:	mov	x0, x21
    2a10:	bl	0 <gomp_mutex_unlock_slow>
    2a14:	b	29d8 <gomp_barrier_handle_tasks+0x598>
    2a18:	ldr	x0, [x19, #48]
    2a1c:	mov	x22, #0x0                   	// #0
    2a20:	cbnz	x0, 28b0 <gomp_barrier_handle_tasks+0x470>
    2a24:	b	2904 <gomp_barrier_handle_tasks+0x4c4>
    2a28:	ldp	x23, x24, [sp, #48]
    2a2c:	ldp	x25, x26, [sp, #64]
    2a30:	ldp	x19, x20, [sp, #16]
    2a34:	ldp	x21, x22, [sp, #32]
    2a38:	ldp	x27, x28, [sp, #80]
    2a3c:	ldp	x29, x30, [sp], #128
    2a40:	ret

0000000000002a44 <GOMP_taskwait>:
    2a44:	stp	x29, x30, [sp, #-144]!
    2a48:	mov	x29, sp
    2a4c:	stp	x19, x20, [sp, #16]
    2a50:	adrp	x0, 0 <gomp_tls_data>
    2a54:	ldr	x0, [x0]
    2a58:	mrs	x1, tpidr_el0
    2a5c:	add	x0, x1, x0
    2a60:	ldr	x20, [x0, #80]
    2a64:	cbz	x20, 2aa8 <GOMP_taskwait+0x64>
    2a68:	stp	x25, x26, [sp, #64]
    2a6c:	stp	x27, x28, [sp, #80]
    2a70:	adrp	x0, 0 <gomp_tls_data>
    2a74:	ldr	x0, [x0]
    2a78:	add	x0, x1, x0
    2a7c:	ldr	x25, [x0, #16]
    2a80:	add	x27, x20, #0x8
    2a84:	ldr	x0, [x20, #8]
    2a88:	cbnz	x0, 2ab4 <GOMP_taskwait+0x70>
    2a8c:	add	x0, x20, #0x18
    2a90:	ldar	x0, [x0]
    2a94:	cmp	x0, #0x0
    2a98:	cset	w26, eq  // eq = none
    2a9c:	cbz	w26, 2ac4 <GOMP_taskwait+0x80>
    2aa0:	ldp	x25, x26, [sp, #64]
    2aa4:	ldp	x27, x28, [sp, #80]
    2aa8:	ldp	x19, x20, [sp, #16]
    2aac:	ldp	x29, x30, [sp], #144
    2ab0:	ret
    2ab4:	ldar	x0, [x27]
    2ab8:	cmp	x0, #0x0
    2abc:	cset	w26, eq  // eq = none
    2ac0:	b	2a9c <GOMP_taskwait+0x58>
    2ac4:	stp	x21, x22, [sp, #32]
    2ac8:	stp	x23, x24, [sp, #48]
    2acc:	stp	xzr, xzr, [sp, #120]
    2ad0:	str	xzr, [sp, #136]
    2ad4:	strb	wzr, [sp, #119]
    2ad8:	add	x21, x25, #0x500
    2adc:	mov	w0, #0x1                   	// #1
    2ae0:	ldaxr	w1, [x21]
    2ae4:	cbnz	w1, 2af0 <GOMP_taskwait+0xac>
    2ae8:	stxr	w2, w0, [x21]
    2aec:	cbnz	w2, 2ae0 <GOMP_taskwait+0x9c>
    2af0:	cmp	w1, #0x0
    2af4:	b.ne	2b10 <GOMP_taskwait+0xcc>  // b.any
    2af8:	mov	w24, #0x0                   	// #0
    2afc:	mov	x22, #0x0                   	// #0
    2b00:	add	x28, sp, #0x78
    2b04:	add	x0, x28, #0x10
    2b08:	str	x0, [sp, #104]
    2b0c:	b	2dd4 <GOMP_taskwait+0x390>
    2b10:	mov	x0, x21
    2b14:	bl	0 <gomp_mutex_lock_slow>
    2b18:	b	2af8 <GOMP_taskwait+0xb4>
    2b1c:	str	xzr, [x20, #64]
    2b20:	ldxr	w0, [x21]
    2b24:	stlxr	w1, wzr, [x21]
    2b28:	cbnz	w1, 2b20 <GOMP_taskwait+0xdc>
    2b2c:	tbnz	w0, #31, 2b58 <GOMP_taskwait+0x114>
    2b30:	cbz	x22, 2fc4 <GOMP_taskwait+0x580>
    2b34:	ldr	x0, [x22, #56]
    2b38:	cbnz	x0, 2b64 <GOMP_taskwait+0x120>
    2b3c:	mov	x0, x22
    2b40:	bl	0 <free>
    2b44:	ldp	x21, x22, [sp, #32]
    2b48:	ldp	x23, x24, [sp, #48]
    2b4c:	ldp	x25, x26, [sp, #64]
    2b50:	ldp	x27, x28, [sp, #80]
    2b54:	b	2aa8 <GOMP_taskwait+0x64>
    2b58:	mov	x0, x21
    2b5c:	bl	0 <gomp_mutex_unlock_slow>
    2b60:	b	2b30 <GOMP_taskwait+0xec>
    2b64:	bl	0 <free>
    2b68:	b	2b3c <GOMP_taskwait+0xf8>
    2b6c:	mov	x2, x25
    2b70:	mov	x1, x20
    2b74:	mov	x0, x19
    2b78:	bl	a20 <gomp_task_run_pre>
    2b7c:	and	w0, w0, #0xff
    2b80:	cbz	w0, 2e14 <GOMP_taskwait+0x3d0>
    2b84:	cbz	x22, 2e98 <GOMP_taskwait+0x454>
    2b88:	ldr	x0, [x22, #56]
    2b8c:	cbnz	x0, 2b9c <GOMP_taskwait+0x158>
    2b90:	mov	x0, x22
    2b94:	bl	0 <free>
    2b98:	b	2e98 <GOMP_taskwait+0x454>
    2b9c:	bl	0 <free>
    2ba0:	b	2b90 <GOMP_taskwait+0x14c>
    2ba4:	strb	wzr, [sp, #121]
    2ba8:	str	wzr, [sp, #136]
    2bac:	str	x28, [x20, #64]
    2bb0:	b	2e08 <GOMP_taskwait+0x3c4>
    2bb4:	mov	x0, x21
    2bb8:	bl	0 <gomp_mutex_unlock_slow>
    2bbc:	b	2e24 <GOMP_taskwait+0x3e0>
    2bc0:	mov	w1, w24
    2bc4:	add	x0, x25, #0x80
    2bc8:	bl	0 <gomp_team_barrier_wake>
    2bcc:	b	2e28 <GOMP_taskwait+0x3e4>
    2bd0:	bl	0 <free>
    2bd4:	b	2e34 <GOMP_taskwait+0x3f0>
    2bd8:	ldr	x0, [x19, #192]
    2bdc:	bl	0 <gomp_target_task_fn>
    2be0:	and	w0, w0, #0xff
    2be4:	cbz	w0, 2e64 <GOMP_taskwait+0x420>
    2be8:	adrp	x0, 0 <gomp_tls_data>
    2bec:	ldr	x0, [x0]
    2bf0:	mrs	x1, tpidr_el0
    2bf4:	add	x0, x1, x0
    2bf8:	str	x20, [x0, #80]
    2bfc:	mov	w0, #0x1                   	// #1
    2c00:	ldaxr	w1, [x21]
    2c04:	cbnz	w1, 2c10 <GOMP_taskwait+0x1cc>
    2c08:	stxr	w2, w0, [x21]
    2c0c:	cbnz	w2, 2c00 <GOMP_taskwait+0x1bc>
    2c10:	cmp	w1, #0x0
    2c14:	b.ne	2c44 <GOMP_taskwait+0x200>  // b.any
    2c18:	mov	w0, #0x4                   	// #4
    2c1c:	str	w0, [x19, #200]
    2c20:	ldr	x0, [x19, #192]
    2c24:	ldr	w1, [x0, #44]
    2c28:	cmp	w1, #0x5
    2c2c:	b.eq	2c50 <GOMP_taskwait+0x20c>  // b.none
    2c30:	mov	w1, #0x4                   	// #4
    2c34:	str	w1, [x0, #44]
    2c38:	mov	w24, #0x0                   	// #0
    2c3c:	mov	x19, #0x0                   	// #0
    2c40:	b	2dd0 <GOMP_taskwait+0x38c>
    2c44:	mov	x0, x21
    2c48:	bl	0 <gomp_mutex_lock_slow>
    2c4c:	b	2c18 <GOMP_taskwait+0x1d4>
    2c50:	mov	x1, x19
    2c54:	mov	x0, x25
    2c58:	bl	13d0 <gomp_target_task_completion>
    2c5c:	mov	w24, #0x0                   	// #0
    2c60:	mov	x19, #0x0                   	// #0
    2c64:	b	2dd0 <GOMP_taskwait+0x38c>
    2c68:	ldr	w1, [sp, #136]
    2c6c:	tst	x1, #0x7fffffff
    2c70:	b.eq	2cc4 <GOMP_taskwait+0x280>  // b.none
    2c74:	sub	w2, w1, #0x1
    2c78:	add	x3, sp, #0x88
    2c7c:	ldaxr	w0, [x3]
    2c80:	cmp	w0, w1
    2c84:	b.ne	2c90 <GOMP_taskwait+0x24c>  // b.any
    2c88:	stxr	w4, w2, [x3]
    2c8c:	cmp	w4, #0x0
    2c90:	mov	w1, w0
    2c94:	b.ne	2c6c <GOMP_taskwait+0x228>  // b.any
    2c98:	mov	w0, #0x1                   	// #1
    2c9c:	ldaxr	w1, [x21]
    2ca0:	cbnz	w1, 2cac <GOMP_taskwait+0x268>
    2ca4:	stxr	w2, w0, [x21]
    2ca8:	cbnz	w2, 2c9c <GOMP_taskwait+0x258>
    2cac:	cmp	w1, #0x0
    2cb0:	mov	w24, #0x0                   	// #0
    2cb4:	b.eq	2dd0 <GOMP_taskwait+0x38c>  // b.none
    2cb8:	mov	x0, x21
    2cbc:	bl	0 <gomp_mutex_lock_slow>
    2cc0:	b	2dd0 <GOMP_taskwait+0x38c>
    2cc4:	ldr	x0, [sp, #104]
    2cc8:	bl	0 <gomp_sem_wait_slow>
    2ccc:	b	2c98 <GOMP_taskwait+0x254>
    2cd0:	mov	x0, x21
    2cd4:	bl	0 <gomp_mutex_lock_slow>
    2cd8:	mov	w24, #0x0                   	// #0
    2cdc:	b	2e98 <GOMP_taskwait+0x454>
    2ce0:	ldr	x0, [x20, #8]
    2ce4:	cbnz	x0, 2d18 <GOMP_taskwait+0x2d4>
    2ce8:	add	x1, x19, #0x70
    2cec:	ldr	x2, [x19, #120]
    2cf0:	ldr	x0, [x19, #112]
    2cf4:	str	x0, [x2]
    2cf8:	ldr	x2, [x19, #120]
    2cfc:	str	x2, [x0, #8]
    2d00:	ldr	x0, [x20, #24]
    2d04:	cmp	x1, x0
    2d08:	b.eq	2d2c <GOMP_taskwait+0x2e8>  // b.none
    2d0c:	str	xzr, [x19, #112]
    2d10:	str	xzr, [x19, #120]
    2d14:	b	2ed4 <GOMP_taskwait+0x490>
    2d18:	add	x2, x19, #0x70
    2d1c:	mov	x1, x27
    2d20:	mov	w0, #0x1                   	// #1
    2d24:	bl	0 <priority_tree_remove>
    2d28:	b	2d0c <GOMP_taskwait+0x2c8>
    2d2c:	ldr	x0, [x19, #112]
    2d30:	cmp	x1, x0
    2d34:	csel	x0, x0, xzr, ne  // ne = any
    2d38:	str	x0, [x20, #24]
    2d3c:	b	2d0c <GOMP_taskwait+0x2c8>
    2d40:	add	x0, x19, #0x8
    2d44:	bl	d4 <gomp_clear_parent_in_tree>
    2d48:	str	xzr, [x19, #8]
    2d4c:	b	2ef8 <GOMP_taskwait+0x4b4>
    2d50:	add	x2, x19, #0x80
    2d54:	add	x1, x23, #0x8
    2d58:	mov	w0, #0x2                   	// #2
    2d5c:	bl	0 <priority_tree_remove>
    2d60:	ldr	x0, [x23, #8]
    2d64:	cmp	x0, #0x0
    2d68:	cset	w1, eq  // eq = none
    2d6c:	b	2f30 <GOMP_taskwait+0x4ec>
    2d70:	ldr	x0, [x19, #128]
    2d74:	cmp	x2, x0
    2d78:	b.eq	2d84 <GOMP_taskwait+0x340>  // b.none
    2d7c:	str	x0, [x23, #24]
    2d80:	b	2f30 <GOMP_taskwait+0x4ec>
    2d84:	str	xzr, [x23, #24]
    2d88:	mov	w1, #0x1                   	// #1
    2d8c:	b	2f30 <GOMP_taskwait+0x4ec>
    2d90:	add	x0, x23, #0x38
    2d94:	stlr	xzr, [x0]
    2d98:	b	2f4c <GOMP_taskwait+0x508>
    2d9c:	ldr	w0, [x25, #1320]
    2da0:	sub	w0, w0, #0x1
    2da4:	str	w0, [x25, #1320]
    2da8:	cmp	x22, #0x1
    2dac:	b.ls	2dd0 <GOMP_taskwait+0x38c>  // b.plast
    2db0:	ldr	w0, [x25]
    2db4:	ldr	w1, [x25, #1328]
    2db8:	sub	w0, w0, w1
    2dbc:	ldrb	w1, [x20, #204]
    2dc0:	eor	w1, w1, #0x1
    2dc4:	sub	w24, w0, w1
    2dc8:	cmp	x22, w24, sxtw
    2dcc:	csel	w24, w22, w24, cc  // cc = lo, ul, last
    2dd0:	mov	x22, x19
    2dd4:	ldr	x0, [x20, #8]
    2dd8:	cbnz	x0, 2f94 <GOMP_taskwait+0x550>
    2ddc:	ldr	x0, [x20, #24]
    2de0:	cbz	x0, 2b1c <GOMP_taskwait+0xd8>
    2de4:	mov	w0, #0x1                   	// #1
    2de8:	strb	w0, [sp, #119]
    2dec:	ldr	x19, [x20, #24]
    2df0:	sub	x19, x19, #0x70
    2df4:	ldr	w0, [x19, #200]
    2df8:	cmp	w0, #0x2
    2dfc:	b.eq	2b6c <GOMP_taskwait+0x128>  // b.none
    2e00:	ldr	x0, [x20, #64]
    2e04:	cbz	x0, 2ba4 <GOMP_taskwait+0x160>
    2e08:	mov	w0, #0x1                   	// #1
    2e0c:	strb	w0, [sp, #120]
    2e10:	mov	x19, #0x0                   	// #0
    2e14:	ldxr	w0, [x21]
    2e18:	stlxr	w1, wzr, [x21]
    2e1c:	cbnz	w1, 2e14 <GOMP_taskwait+0x3d0>
    2e20:	tbnz	w0, #31, 2bb4 <GOMP_taskwait+0x170>
    2e24:	cbnz	w24, 2bc0 <GOMP_taskwait+0x17c>
    2e28:	cbz	x22, 2e3c <GOMP_taskwait+0x3f8>
    2e2c:	ldr	x0, [x22, #56]
    2e30:	cbnz	x0, 2bd0 <GOMP_taskwait+0x18c>
    2e34:	mov	x0, x22
    2e38:	bl	0 <free>
    2e3c:	cbz	x19, 2c68 <GOMP_taskwait+0x224>
    2e40:	adrp	x0, 0 <gomp_tls_data>
    2e44:	ldr	x0, [x0]
    2e48:	mrs	x1, tpidr_el0
    2e4c:	add	x0, x1, x0
    2e50:	str	x19, [x0, #80]
    2e54:	ldr	x1, [x19, #184]
    2e58:	cbz	x1, 2bd8 <GOMP_taskwait+0x194>
    2e5c:	ldr	x0, [x19, #192]
    2e60:	blr	x1
    2e64:	adrp	x0, 0 <gomp_tls_data>
    2e68:	ldr	x0, [x0]
    2e6c:	mrs	x1, tpidr_el0
    2e70:	add	x0, x1, x0
    2e74:	str	x20, [x0, #80]
    2e78:	mov	w0, #0x1                   	// #1
    2e7c:	ldaxr	w1, [x21]
    2e80:	cbnz	w1, 2e8c <GOMP_taskwait+0x448>
    2e84:	stxr	w2, w0, [x21]
    2e88:	cbnz	w2, 2e7c <GOMP_taskwait+0x438>
    2e8c:	cmp	w1, #0x0
    2e90:	mov	w24, #0x0                   	// #0
    2e94:	b.ne	2cd0 <GOMP_taskwait+0x28c>  // b.any
    2e98:	ldr	x22, [x19, #72]
    2e9c:	cbz	x22, 2ecc <GOMP_taskwait+0x488>
    2ea0:	ldr	x0, [x19]
    2ea4:	cbz	x0, 2eb0 <GOMP_taskwait+0x46c>
    2ea8:	mov	x0, x19
    2eac:	bl	8f0 <gomp_task_run_post_handle_depend_hash>
    2eb0:	ldr	x0, [x19, #48]
    2eb4:	mov	x22, #0x0                   	// #0
    2eb8:	cbz	x0, 2ecc <GOMP_taskwait+0x488>
    2ebc:	mov	x1, x25
    2ec0:	mov	x0, x19
    2ec4:	bl	e24 <gomp_task_run_post_handle_dependers>
    2ec8:	mov	x22, x0
    2ecc:	ldrb	w0, [sp, #119]
    2ed0:	cbnz	w0, 2ce0 <GOMP_taskwait+0x29c>
    2ed4:	ldr	x1, [x19, #8]
    2ed8:	cbnz	x1, 2d40 <GOMP_taskwait+0x2fc>
    2edc:	ldr	x0, [x19, #24]
    2ee0:	cbz	x0, 2ef8 <GOMP_taskwait+0x4b4>
    2ee4:	stur	xzr, [x0, #-112]
    2ee8:	ldr	x0, [x0]
    2eec:	ldr	x1, [x19, #24]
    2ef0:	cmp	x0, x1
    2ef4:	b.ne	2ee4 <GOMP_taskwait+0x4a0>  // b.any
    2ef8:	ldr	x23, [x19, #40]
    2efc:	cbz	x23, 2d9c <GOMP_taskwait+0x358>
    2f00:	ldr	x0, [x23, #8]
    2f04:	cbnz	x0, 2d50 <GOMP_taskwait+0x30c>
    2f08:	add	x2, x19, #0x80
    2f0c:	ldr	x1, [x19, #136]
    2f10:	ldr	x0, [x19, #128]
    2f14:	str	x0, [x1]
    2f18:	ldr	x1, [x19, #136]
    2f1c:	str	x1, [x0, #8]
    2f20:	ldr	x0, [x23, #24]
    2f24:	mov	w1, w26
    2f28:	cmp	x2, x0
    2f2c:	b.eq	2d70 <GOMP_taskwait+0x32c>  // b.none
    2f30:	str	xzr, [x19, #128]
    2f34:	str	xzr, [x19, #136]
    2f38:	ldr	x0, [x23, #56]
    2f3c:	cmp	x0, #0x1
    2f40:	b.ls	2d90 <GOMP_taskwait+0x34c>  // b.plast
    2f44:	sub	x0, x0, #0x1
    2f48:	str	x0, [x23, #56]
    2f4c:	cbz	w1, 2d9c <GOMP_taskwait+0x358>
    2f50:	ldrb	w0, [x23, #48]
    2f54:	cbz	w0, 2d9c <GOMP_taskwait+0x358>
    2f58:	strb	wzr, [x23, #48]
    2f5c:	add	x0, x23, #0x34
    2f60:	ldr	w1, [x23, #52]
    2f64:	add	w2, w1, #0x1
    2f68:	and	w2, w2, #0x7fffffff
    2f6c:	ldxr	w3, [x0]
    2f70:	cmp	w3, w1
    2f74:	b.ne	2f80 <GOMP_taskwait+0x53c>  // b.any
    2f78:	stlxr	w4, w2, [x0]
    2f7c:	cmp	w4, #0x0
    2f80:	mov	w1, w3
    2f84:	b.ne	2f64 <GOMP_taskwait+0x520>  // b.any
    2f88:	tbz	w3, #31, 2d9c <GOMP_taskwait+0x358>
    2f8c:	bl	0 <gomp_sem_post_slow>
    2f90:	b	2d9c <GOMP_taskwait+0x358>
    2f94:	add	x4, sp, #0x77
    2f98:	add	x3, x25, #0x508
    2f9c:	mov	w2, #0x0                   	// #0
    2fa0:	mov	x1, x27
    2fa4:	mov	w0, #0x1                   	// #1
    2fa8:	bl	0 <priority_tree_next_task>
    2fac:	mov	x19, x0
    2fb0:	cbnz	x0, 2df4 <GOMP_taskwait+0x3b0>
    2fb4:	ldr	x0, [x20, #8]
    2fb8:	ldr	x19, [x0, #8]
    2fbc:	sub	x19, x19, #0x70
    2fc0:	b	2df4 <GOMP_taskwait+0x3b0>
    2fc4:	ldp	x21, x22, [sp, #32]
    2fc8:	ldp	x23, x24, [sp, #48]
    2fcc:	ldp	x25, x26, [sp, #64]
    2fd0:	ldp	x27, x28, [sp, #80]
    2fd4:	b	2aa8 <GOMP_taskwait+0x64>

0000000000002fd8 <gomp_task_maybe_wait_for_dependencies>:
    2fd8:	stp	x29, x30, [sp, #-224]!
    2fdc:	mov	x29, sp
    2fe0:	stp	x19, x20, [sp, #16]
    2fe4:	stp	x23, x24, [sp, #48]
    2fe8:	stp	x25, x26, [sp, #64]
    2fec:	stp	x27, x28, [sp, #80]
    2ff0:	mov	x19, x0
    2ff4:	adrp	x1, 0 <gomp_tls_data>
    2ff8:	ldr	x1, [x1]
    2ffc:	mrs	x0, tpidr_el0
    3000:	add	x0, x0, x1
    3004:	ldr	x23, [x0, #80]
    3008:	ldr	x28, [x0, #16]
    300c:	ldr	x0, [x19]
    3010:	ldr	x27, [x19, #8]
    3014:	cbz	x0, 3080 <gomp_task_maybe_wait_for_dependencies+0xa8>
    3018:	str	x0, [sp, #104]
    301c:	add	x1, x28, #0x500
    3020:	str	x1, [sp, #120]
    3024:	mov	w2, #0x1                   	// #1
    3028:	mov	x3, x1
    302c:	ldaxr	w1, [x3]
    3030:	cbnz	w1, 303c <gomp_task_maybe_wait_for_dependencies+0x64>
    3034:	stxr	w4, w2, [x3]
    3038:	cbnz	w4, 302c <gomp_task_maybe_wait_for_dependencies+0x54>
    303c:	cmp	w1, #0x0
    3040:	b.ne	3064 <gomp_task_maybe_wait_for_dependencies+0x8c>  // b.any
    3044:	stp	x21, x22, [sp, #32]
    3048:	str	x0, [sp, #112]
    304c:	mov	x26, #0x2                   	// #2
    3050:	add	x26, x19, x26, lsl #3
    3054:	mov	x21, #0x0                   	// #0
    3058:	mov	x22, #0x0                   	// #0
    305c:	mov	w24, #0x1                   	// #1
    3060:	b	329c <gomp_task_maybe_wait_for_dependencies+0x2c4>
    3064:	str	x0, [sp, #112]
    3068:	mov	x26, #0x2                   	// #2
    306c:	ldr	x0, [sp, #120]
    3070:	bl	0 <gomp_mutex_lock_slow>
    3074:	mov	x0, x27
    3078:	ldr	x27, [sp, #104]
    307c:	b	30c4 <gomp_task_maybe_wait_for_dependencies+0xec>
    3080:	ldr	x0, [x19, #16]
    3084:	ldr	x1, [x19, #24]
    3088:	add	x0, x0, x1
    308c:	ldr	x1, [x19, #32]
    3090:	add	x1, x1, x0
    3094:	str	x1, [sp, #112]
    3098:	add	x1, x28, #0x500
    309c:	str	x1, [sp, #120]
    30a0:	mov	w2, #0x1                   	// #1
    30a4:	mov	x3, x1
    30a8:	ldaxr	w1, [x3]
    30ac:	cbnz	w1, 30b8 <gomp_task_maybe_wait_for_dependencies+0xe0>
    30b0:	stxr	w4, w2, [x3]
    30b4:	cbnz	w4, 30a8 <gomp_task_maybe_wait_for_dependencies+0xd0>
    30b8:	cmp	w1, #0x0
    30bc:	mov	x26, #0x5                   	// #5
    30c0:	b.ne	30d8 <gomp_task_maybe_wait_for_dependencies+0x100>  // b.any
    30c4:	cbz	x27, 32fc <gomp_task_maybe_wait_for_dependencies+0x324>
    30c8:	stp	x21, x22, [sp, #32]
    30cc:	str	x27, [sp, #104]
    30d0:	mov	x27, x0
    30d4:	b	3050 <gomp_task_maybe_wait_for_dependencies+0x78>
    30d8:	str	x27, [sp, #104]
    30dc:	mov	x27, x0
    30e0:	b	306c <gomp_task_maybe_wait_for_dependencies+0x94>
    30e4:	ldr	x1, [x0, #8]
    30e8:	cmp	x1, #0x1
    30ec:	b.eq	3100 <gomp_task_maybe_wait_for_dependencies+0x128>  // b.none
    30f0:	sub	x2, x1, #0x2
    30f4:	cmp	x2, #0x2
    30f8:	b.hi	310c <gomp_task_maybe_wait_for_dependencies+0x134>  // b.pmore
    30fc:	strb	wzr, [sp, #216]
    3100:	ldr	x0, [x0]
    3104:	str	x0, [sp, #184]
    3108:	b	32bc <gomp_task_maybe_wait_for_dependencies+0x2e4>
    310c:	adrp	x0, 0 <htab_find>
    3110:	add	x0, x0, #0x0
    3114:	bl	0 <gomp_fatal>
    3118:	ldr	w0, [x20, #88]
    311c:	str	w0, [sp, #136]
    3120:	add	x1, sp, #0x88
    3124:	add	x0, x23, #0x8
    3128:	bl	0 <prio_splay_tree_lookup>
    312c:	ldr	x1, [x0, #16]
    3130:	cbz	x1, 316c <gomp_task_maybe_wait_for_dependencies+0x194>
    3134:	ldr	x2, [x20, #120]
    3138:	ldr	x3, [x20, #112]
    313c:	str	x3, [x2]
    3140:	ldr	x2, [x20, #112]
    3144:	ldr	x3, [x20, #120]
    3148:	str	x3, [x2, #8]
    314c:	str	x1, [x20, #120]
    3150:	ldr	x2, [x1]
    3154:	str	x2, [x20, #112]
    3158:	str	x25, [x1]
    315c:	ldr	x1, [x20, #112]
    3160:	str	x25, [x1, #8]
    3164:	str	x25, [x0, #16]
    3168:	b	31ec <gomp_task_maybe_wait_for_dependencies+0x214>
    316c:	ldr	x1, [x0, #8]
    3170:	cmp	x25, x1
    3174:	b.eq	3164 <gomp_task_maybe_wait_for_dependencies+0x18c>  // b.none
    3178:	ldr	x2, [x20, #120]
    317c:	ldr	x1, [x20, #112]
    3180:	str	x1, [x2]
    3184:	ldr	x2, [x20, #120]
    3188:	str	x2, [x1, #8]
    318c:	ldr	x1, [x0, #8]
    3190:	ldr	x1, [x1, #8]
    3194:	str	x1, [x20, #120]
    3198:	ldr	x1, [x0, #8]
    319c:	str	x1, [x20, #112]
    31a0:	str	x25, [x0, #8]
    31a4:	ldr	x1, [x20, #120]
    31a8:	str	x25, [x1]
    31ac:	ldr	x1, [x20, #112]
    31b0:	str	x25, [x1, #8]
    31b4:	b	3164 <gomp_task_maybe_wait_for_dependencies+0x18c>
    31b8:	ldr	x1, [x20, #120]
    31bc:	ldr	x2, [x20, #112]
    31c0:	str	x2, [x1]
    31c4:	ldr	x1, [x20, #112]
    31c8:	ldr	x2, [x20, #120]
    31cc:	str	x2, [x1, #8]
    31d0:	str	x0, [x20, #120]
    31d4:	ldr	x1, [x0]
    31d8:	str	x1, [x20, #112]
    31dc:	str	x25, [x0]
    31e0:	ldr	x0, [x20, #112]
    31e4:	str	x25, [x0, #8]
    31e8:	str	x25, [x23, #32]
    31ec:	ldr	x19, [x19, #8]
    31f0:	cbz	x19, 328c <gomp_task_maybe_wait_for_dependencies+0x2b4>
    31f4:	ldrb	w0, [sp, #216]
    31f8:	cbz	w0, 3204 <gomp_task_maybe_wait_for_dependencies+0x22c>
    31fc:	ldrb	w0, [x19, #32]
    3200:	cbnz	w0, 31ec <gomp_task_maybe_wait_for_dependencies+0x214>
    3204:	ldr	x20, [x19, #24]
    3208:	ldrb	w0, [x20, #207]
    320c:	cbnz	w0, 31ec <gomp_task_maybe_wait_for_dependencies+0x214>
    3210:	strb	w24, [x20, #207]
    3214:	add	x21, x21, #0x1
    3218:	ldr	x0, [x20, #80]
    321c:	cbnz	x0, 31ec <gomp_task_maybe_wait_for_dependencies+0x214>
    3220:	ldr	w0, [x20, #200]
    3224:	cmp	w0, #0x2
    3228:	b.ne	31ec <gomp_task_maybe_wait_for_dependencies+0x214>  // b.any
    322c:	add	x25, x20, #0x70
    3230:	ldr	x0, [x23, #8]
    3234:	cbnz	x0, 3118 <gomp_task_maybe_wait_for_dependencies+0x140>
    3238:	ldr	x0, [x23, #32]
    323c:	cbnz	x0, 31b8 <gomp_task_maybe_wait_for_dependencies+0x1e0>
    3240:	ldr	x0, [x23, #24]
    3244:	cmp	x25, x0
    3248:	b.eq	31e8 <gomp_task_maybe_wait_for_dependencies+0x210>  // b.none
    324c:	ldr	x1, [x20, #120]
    3250:	ldr	x0, [x20, #112]
    3254:	str	x0, [x1]
    3258:	ldr	x1, [x20, #120]
    325c:	str	x1, [x0, #8]
    3260:	ldr	x1, [x23, #24]
    3264:	ldr	x1, [x1, #8]
    3268:	str	x1, [x20, #120]
    326c:	ldr	x1, [x23, #24]
    3270:	str	x1, [x20, #112]
    3274:	str	x25, [x23, #24]
    3278:	ldr	x0, [x20, #120]
    327c:	str	x25, [x0]
    3280:	ldr	x0, [x20, #112]
    3284:	str	x25, [x0, #8]
    3288:	b	31e8 <gomp_task_maybe_wait_for_dependencies+0x210>
    328c:	add	x22, x22, #0x1
    3290:	ldr	x0, [sp, #104]
    3294:	cmp	x22, x0
    3298:	b.eq	32d4 <gomp_task_maybe_wait_for_dependencies+0x2fc>  // b.none
    329c:	ldr	x0, [x26, x22, lsl #3]
    32a0:	str	x0, [sp, #184]
    32a4:	cmp	x22, x27
    32a8:	cset	w1, cs  // cs = hs, nlast
    32ac:	strb	w1, [sp, #216]
    32b0:	ldr	x1, [sp, #112]
    32b4:	cmp	x1, x22
    32b8:	b.ls	30e4 <gomp_task_maybe_wait_for_dependencies+0x10c>  // b.plast
    32bc:	add	x1, sp, #0xb8
    32c0:	ldr	x0, [x23, #56]
    32c4:	bl	0 <htab_find>
    32c8:	mov	x19, x0
    32cc:	cbnz	x0, 31f4 <gomp_task_maybe_wait_for_dependencies+0x21c>
    32d0:	b	328c <gomp_task_maybe_wait_for_dependencies+0x2b4>
    32d4:	cbz	x21, 32f8 <gomp_task_maybe_wait_for_dependencies+0x320>
    32d8:	stp	xzr, xzr, [sp, #160]
    32dc:	str	xzr, [sp, #176]
    32e0:	str	x21, [sp, #168]
    32e4:	add	x0, sp, #0xa0
    32e8:	str	x0, [x23, #64]
    32ec:	mov	w22, #0x0                   	// #0
    32f0:	mov	x20, #0x0                   	// #0
    32f4:	b	35d4 <gomp_task_maybe_wait_for_dependencies+0x5fc>
    32f8:	ldp	x21, x22, [sp, #32]
    32fc:	ldr	x1, [sp, #120]
    3300:	ldxr	w0, [x1]
    3304:	stlxr	w2, wzr, [x1]
    3308:	cbnz	w2, 3300 <gomp_task_maybe_wait_for_dependencies+0x328>
    330c:	tbnz	w0, #31, 3328 <gomp_task_maybe_wait_for_dependencies+0x350>
    3310:	ldp	x19, x20, [sp, #16]
    3314:	ldp	x23, x24, [sp, #48]
    3318:	ldp	x25, x26, [sp, #64]
    331c:	ldp	x27, x28, [sp, #80]
    3320:	ldp	x29, x30, [sp], #224
    3324:	ret
    3328:	ldr	x0, [sp, #120]
    332c:	bl	0 <gomp_mutex_unlock_slow>
    3330:	b	3310 <gomp_task_maybe_wait_for_dependencies+0x338>
    3334:	str	xzr, [x23, #64]
    3338:	ldr	x1, [sp, #120]
    333c:	ldxr	w0, [x1]
    3340:	stlxr	w2, wzr, [x1]
    3344:	cbnz	w2, 333c <gomp_task_maybe_wait_for_dependencies+0x364>
    3348:	tbnz	w0, #31, 3368 <gomp_task_maybe_wait_for_dependencies+0x390>
    334c:	cbz	x20, 37d0 <gomp_task_maybe_wait_for_dependencies+0x7f8>
    3350:	ldr	x0, [x20, #56]
    3354:	cbnz	x0, 3374 <gomp_task_maybe_wait_for_dependencies+0x39c>
    3358:	mov	x0, x20
    335c:	bl	0 <free>
    3360:	ldp	x21, x22, [sp, #32]
    3364:	b	3310 <gomp_task_maybe_wait_for_dependencies+0x338>
    3368:	ldr	x0, [sp, #120]
    336c:	bl	0 <gomp_mutex_unlock_slow>
    3370:	b	334c <gomp_task_maybe_wait_for_dependencies+0x374>
    3374:	bl	0 <free>
    3378:	b	3358 <gomp_task_maybe_wait_for_dependencies+0x380>
    337c:	add	x4, sp, #0x88
    3380:	mov	x3, #0x0                   	// #0
    3384:	mov	w2, #0x3e7                 	// #999
    3388:	mov	x1, x21
    338c:	mov	w0, #0x1                   	// #1
    3390:	bl	0 <priority_tree_next_task>
    3394:	mov	x19, x0
    3398:	cbnz	x0, 35f0 <gomp_task_maybe_wait_for_dependencies+0x618>
    339c:	ldr	x0, [x23, #8]
    33a0:	ldr	x19, [x0, #8]
    33a4:	sub	x19, x19, #0x70
    33a8:	b	35f0 <gomp_task_maybe_wait_for_dependencies+0x618>
    33ac:	mov	x2, x28
    33b0:	mov	x1, x23
    33b4:	mov	x0, x19
    33b8:	bl	a20 <gomp_task_run_pre>
    33bc:	and	w0, w0, #0xff
    33c0:	cbz	w0, 3608 <gomp_task_maybe_wait_for_dependencies+0x630>
    33c4:	cbz	x20, 3694 <gomp_task_maybe_wait_for_dependencies+0x6bc>
    33c8:	ldr	x0, [x20, #56]
    33cc:	cbnz	x0, 33dc <gomp_task_maybe_wait_for_dependencies+0x404>
    33d0:	mov	x0, x20
    33d4:	bl	0 <free>
    33d8:	b	3694 <gomp_task_maybe_wait_for_dependencies+0x6bc>
    33dc:	bl	0 <free>
    33e0:	b	33d0 <gomp_task_maybe_wait_for_dependencies+0x3f8>
    33e4:	ldr	x0, [sp, #120]
    33e8:	bl	0 <gomp_mutex_unlock_slow>
    33ec:	b	361c <gomp_task_maybe_wait_for_dependencies+0x644>
    33f0:	mov	w1, w22
    33f4:	add	x0, x28, #0x80
    33f8:	bl	0 <gomp_team_barrier_wake>
    33fc:	b	3620 <gomp_task_maybe_wait_for_dependencies+0x648>
    3400:	bl	0 <free>
    3404:	b	362c <gomp_task_maybe_wait_for_dependencies+0x654>
    3408:	ldr	x0, [x19, #192]
    340c:	bl	0 <gomp_target_task_fn>
    3410:	and	w0, w0, #0xff
    3414:	cbz	w0, 365c <gomp_task_maybe_wait_for_dependencies+0x684>
    3418:	adrp	x1, 0 <gomp_tls_data>
    341c:	ldr	x1, [x1]
    3420:	mrs	x0, tpidr_el0
    3424:	add	x0, x0, x1
    3428:	str	x23, [x0, #80]
    342c:	mov	w0, #0x1                   	// #1
    3430:	ldr	x2, [sp, #120]
    3434:	ldaxr	w1, [x2]
    3438:	cbnz	w1, 3444 <gomp_task_maybe_wait_for_dependencies+0x46c>
    343c:	stxr	w3, w0, [x2]
    3440:	cbnz	w3, 3434 <gomp_task_maybe_wait_for_dependencies+0x45c>
    3444:	cmp	w1, #0x0
    3448:	b.ne	3478 <gomp_task_maybe_wait_for_dependencies+0x4a0>  // b.any
    344c:	mov	w0, #0x4                   	// #4
    3450:	str	w0, [x19, #200]
    3454:	ldr	x0, [x19, #192]
    3458:	ldr	w1, [x0, #44]
    345c:	cmp	w1, #0x5
    3460:	b.eq	3484 <gomp_task_maybe_wait_for_dependencies+0x4ac>  // b.none
    3464:	mov	w1, #0x4                   	// #4
    3468:	str	w1, [x0, #44]
    346c:	mov	w22, #0x0                   	// #0
    3470:	mov	x20, #0x0                   	// #0
    3474:	b	35cc <gomp_task_maybe_wait_for_dependencies+0x5f4>
    3478:	ldr	x0, [sp, #120]
    347c:	bl	0 <gomp_mutex_lock_slow>
    3480:	b	344c <gomp_task_maybe_wait_for_dependencies+0x474>
    3484:	mov	x1, x19
    3488:	mov	x0, x28
    348c:	bl	13d0 <gomp_target_task_completion>
    3490:	b	346c <gomp_task_maybe_wait_for_dependencies+0x494>
    3494:	ldr	w1, [sp, #176]
    3498:	tst	x1, #0x7fffffff
    349c:	b.eq	34f4 <gomp_task_maybe_wait_for_dependencies+0x51c>  // b.none
    34a0:	sub	w2, w1, #0x1
    34a4:	add	x3, sp, #0xb0
    34a8:	ldaxr	w0, [x3]
    34ac:	cmp	w0, w1
    34b0:	b.ne	34bc <gomp_task_maybe_wait_for_dependencies+0x4e4>  // b.any
    34b4:	stxr	w4, w2, [x3]
    34b8:	cmp	w4, #0x0
    34bc:	mov	w1, w0
    34c0:	b.ne	3498 <gomp_task_maybe_wait_for_dependencies+0x4c0>  // b.any
    34c4:	mov	w0, #0x1                   	// #1
    34c8:	ldr	x2, [sp, #120]
    34cc:	ldaxr	w1, [x2]
    34d0:	cbnz	w1, 34dc <gomp_task_maybe_wait_for_dependencies+0x504>
    34d4:	stxr	w3, w0, [x2]
    34d8:	cbnz	w3, 34cc <gomp_task_maybe_wait_for_dependencies+0x4f4>
    34dc:	cmp	w1, #0x0
    34e0:	mov	w22, #0x0                   	// #0
    34e4:	b.eq	35c8 <gomp_task_maybe_wait_for_dependencies+0x5f0>  // b.none
    34e8:	ldr	x0, [sp, #120]
    34ec:	bl	0 <gomp_mutex_lock_slow>
    34f0:	b	35c8 <gomp_task_maybe_wait_for_dependencies+0x5f0>
    34f4:	add	x0, sp, #0xb0
    34f8:	bl	0 <gomp_sem_wait_slow>
    34fc:	b	34c4 <gomp_task_maybe_wait_for_dependencies+0x4ec>
    3500:	ldr	x0, [sp, #120]
    3504:	bl	0 <gomp_mutex_lock_slow>
    3508:	mov	w22, #0x0                   	// #0
    350c:	b	3694 <gomp_task_maybe_wait_for_dependencies+0x6bc>
    3510:	add	x2, x19, #0x70
    3514:	mov	x1, x21
    3518:	mov	w0, #0x1                   	// #1
    351c:	bl	0 <priority_tree_remove>
    3520:	b	3708 <gomp_task_maybe_wait_for_dependencies+0x730>
    3524:	ldr	x0, [x19, #112]
    3528:	cmp	x1, x0
    352c:	csel	x0, x0, xzr, ne  // ne = any
    3530:	str	x0, [x23, #24]
    3534:	b	3708 <gomp_task_maybe_wait_for_dependencies+0x730>
    3538:	add	x0, x19, #0x8
    353c:	bl	d4 <gomp_clear_parent_in_tree>
    3540:	str	xzr, [x19, #8]
    3544:	b	3734 <gomp_task_maybe_wait_for_dependencies+0x75c>
    3548:	add	x2, x19, #0x80
    354c:	add	x1, x21, #0x8
    3550:	mov	w0, #0x2                   	// #2
    3554:	bl	0 <priority_tree_remove>
    3558:	ldr	x0, [x21, #8]
    355c:	cmp	x0, #0x0
    3560:	cset	w1, eq  // eq = none
    3564:	b	376c <gomp_task_maybe_wait_for_dependencies+0x794>
    3568:	ldr	x0, [x19, #128]
    356c:	cmp	x2, x0
    3570:	b.eq	357c <gomp_task_maybe_wait_for_dependencies+0x5a4>  // b.none
    3574:	str	x0, [x21, #24]
    3578:	b	376c <gomp_task_maybe_wait_for_dependencies+0x794>
    357c:	str	xzr, [x21, #24]
    3580:	mov	w1, #0x1                   	// #1
    3584:	b	376c <gomp_task_maybe_wait_for_dependencies+0x794>
    3588:	add	x0, x21, #0x38
    358c:	stlr	xzr, [x0]
    3590:	b	3788 <gomp_task_maybe_wait_for_dependencies+0x7b0>
    3594:	ldr	w0, [x28, #1320]
    3598:	sub	w0, w0, #0x1
    359c:	str	w0, [x28, #1320]
    35a0:	cmp	x20, #0x1
    35a4:	b.ls	35c8 <gomp_task_maybe_wait_for_dependencies+0x5f0>  // b.plast
    35a8:	ldr	w0, [x28]
    35ac:	ldr	w1, [x28, #1328]
    35b0:	sub	w0, w0, w1
    35b4:	ldrb	w1, [x23, #204]
    35b8:	eor	w1, w1, #0x1
    35bc:	sub	w22, w0, w1
    35c0:	cmp	x20, w22, sxtw
    35c4:	csel	w22, w20, w22, cc  // cc = lo, ul, last
    35c8:	mov	x20, x19
    35cc:	ldr	x0, [sp, #168]
    35d0:	cbz	x0, 3334 <gomp_task_maybe_wait_for_dependencies+0x35c>
    35d4:	add	x21, x23, #0x8
    35d8:	ldr	x0, [x23, #8]
    35dc:	cbnz	x0, 337c <gomp_task_maybe_wait_for_dependencies+0x3a4>
    35e0:	mov	w0, #0x1                   	// #1
    35e4:	strb	w0, [sp, #136]
    35e8:	ldr	x19, [x23, #24]
    35ec:	sub	x19, x19, #0x70
    35f0:	ldr	w0, [x19, #200]
    35f4:	cmp	w0, #0x2
    35f8:	b.eq	33ac <gomp_task_maybe_wait_for_dependencies+0x3d4>  // b.none
    35fc:	mov	w0, #0x1                   	// #1
    3600:	strb	w0, [sp, #161]
    3604:	mov	x19, #0x0                   	// #0
    3608:	ldr	x1, [sp, #120]
    360c:	ldxr	w0, [x1]
    3610:	stlxr	w2, wzr, [x1]
    3614:	cbnz	w2, 360c <gomp_task_maybe_wait_for_dependencies+0x634>
    3618:	tbnz	w0, #31, 33e4 <gomp_task_maybe_wait_for_dependencies+0x40c>
    361c:	cbnz	w22, 33f0 <gomp_task_maybe_wait_for_dependencies+0x418>
    3620:	cbz	x20, 3634 <gomp_task_maybe_wait_for_dependencies+0x65c>
    3624:	ldr	x0, [x20, #56]
    3628:	cbnz	x0, 3400 <gomp_task_maybe_wait_for_dependencies+0x428>
    362c:	mov	x0, x20
    3630:	bl	0 <free>
    3634:	cbz	x19, 3494 <gomp_task_maybe_wait_for_dependencies+0x4bc>
    3638:	adrp	x0, 0 <gomp_tls_data>
    363c:	ldr	x0, [x0]
    3640:	mrs	x1, tpidr_el0
    3644:	add	x0, x1, x0
    3648:	str	x19, [x0, #80]
    364c:	ldr	x1, [x19, #184]
    3650:	cbz	x1, 3408 <gomp_task_maybe_wait_for_dependencies+0x430>
    3654:	ldr	x0, [x19, #192]
    3658:	blr	x1
    365c:	adrp	x0, 0 <gomp_tls_data>
    3660:	ldr	x0, [x0]
    3664:	mrs	x1, tpidr_el0
    3668:	add	x0, x1, x0
    366c:	str	x23, [x0, #80]
    3670:	mov	w0, #0x1                   	// #1
    3674:	ldr	x2, [sp, #120]
    3678:	ldaxr	w1, [x2]
    367c:	cbnz	w1, 3688 <gomp_task_maybe_wait_for_dependencies+0x6b0>
    3680:	stxr	w3, w0, [x2]
    3684:	cbnz	w3, 3678 <gomp_task_maybe_wait_for_dependencies+0x6a0>
    3688:	cmp	w1, #0x0
    368c:	mov	w22, #0x0                   	// #0
    3690:	b.ne	3500 <gomp_task_maybe_wait_for_dependencies+0x528>  // b.any
    3694:	ldr	x20, [x19, #72]
    3698:	cbz	x20, 36c8 <gomp_task_maybe_wait_for_dependencies+0x6f0>
    369c:	ldr	x0, [x19]
    36a0:	cbz	x0, 36ac <gomp_task_maybe_wait_for_dependencies+0x6d4>
    36a4:	mov	x0, x19
    36a8:	bl	8f0 <gomp_task_run_post_handle_depend_hash>
    36ac:	ldr	x0, [x19, #48]
    36b0:	mov	x20, #0x0                   	// #0
    36b4:	cbz	x0, 36c8 <gomp_task_maybe_wait_for_dependencies+0x6f0>
    36b8:	mov	x1, x28
    36bc:	mov	x0, x19
    36c0:	bl	e24 <gomp_task_run_post_handle_dependers>
    36c4:	mov	x20, x0
    36c8:	ldrb	w0, [x19, #207]
    36cc:	cbz	w0, 36dc <gomp_task_maybe_wait_for_dependencies+0x704>
    36d0:	ldr	x0, [sp, #168]
    36d4:	sub	x0, x0, #0x1
    36d8:	str	x0, [sp, #168]
    36dc:	ldr	x0, [x23, #8]
    36e0:	cbnz	x0, 3510 <gomp_task_maybe_wait_for_dependencies+0x538>
    36e4:	add	x1, x19, #0x70
    36e8:	ldr	x2, [x19, #120]
    36ec:	ldr	x0, [x19, #112]
    36f0:	str	x0, [x2]
    36f4:	ldr	x2, [x19, #120]
    36f8:	str	x2, [x0, #8]
    36fc:	ldr	x0, [x23, #24]
    3700:	cmp	x1, x0
    3704:	b.eq	3524 <gomp_task_maybe_wait_for_dependencies+0x54c>  // b.none
    3708:	str	xzr, [x19, #112]
    370c:	str	xzr, [x19, #120]
    3710:	ldr	x1, [x19, #8]
    3714:	cbnz	x1, 3538 <gomp_task_maybe_wait_for_dependencies+0x560>
    3718:	ldr	x1, [x19, #24]
    371c:	cbz	x1, 3734 <gomp_task_maybe_wait_for_dependencies+0x75c>
    3720:	stur	xzr, [x1, #-112]
    3724:	ldr	x1, [x1]
    3728:	ldr	x2, [x19, #24]
    372c:	cmp	x1, x2
    3730:	b.ne	3720 <gomp_task_maybe_wait_for_dependencies+0x748>  // b.any
    3734:	ldr	x21, [x19, #40]
    3738:	cbz	x21, 3594 <gomp_task_maybe_wait_for_dependencies+0x5bc>
    373c:	ldr	x0, [x21, #8]
    3740:	cbnz	x0, 3548 <gomp_task_maybe_wait_for_dependencies+0x570>
    3744:	add	x2, x19, #0x80
    3748:	ldr	x1, [x19, #136]
    374c:	ldr	x0, [x19, #128]
    3750:	str	x0, [x1]
    3754:	ldr	x1, [x19, #136]
    3758:	str	x1, [x0, #8]
    375c:	ldr	x0, [x21, #24]
    3760:	mov	w1, #0x0                   	// #0
    3764:	cmp	x2, x0
    3768:	b.eq	3568 <gomp_task_maybe_wait_for_dependencies+0x590>  // b.none
    376c:	str	xzr, [x19, #128]
    3770:	str	xzr, [x19, #136]
    3774:	ldr	x0, [x21, #56]
    3778:	cmp	x0, #0x1
    377c:	b.ls	3588 <gomp_task_maybe_wait_for_dependencies+0x5b0>  // b.plast
    3780:	sub	x0, x0, #0x1
    3784:	str	x0, [x21, #56]
    3788:	cbz	w1, 3594 <gomp_task_maybe_wait_for_dependencies+0x5bc>
    378c:	ldrb	w0, [x21, #48]
    3790:	cbz	w0, 3594 <gomp_task_maybe_wait_for_dependencies+0x5bc>
    3794:	strb	wzr, [x21, #48]
    3798:	add	x0, x21, #0x34
    379c:	ldr	w1, [x21, #52]
    37a0:	add	w2, w1, #0x1
    37a4:	and	w2, w2, #0x7fffffff
    37a8:	ldxr	w3, [x0]
    37ac:	cmp	w3, w1
    37b0:	b.ne	37bc <gomp_task_maybe_wait_for_dependencies+0x7e4>  // b.any
    37b4:	stlxr	w4, w2, [x0]
    37b8:	cmp	w4, #0x0
    37bc:	mov	w1, w3
    37c0:	b.ne	37a0 <gomp_task_maybe_wait_for_dependencies+0x7c8>  // b.any
    37c4:	tbz	w3, #31, 3594 <gomp_task_maybe_wait_for_dependencies+0x5bc>
    37c8:	bl	0 <gomp_sem_post_slow>
    37cc:	b	3594 <gomp_task_maybe_wait_for_dependencies+0x5bc>
    37d0:	ldp	x21, x22, [sp, #32]
    37d4:	b	3310 <gomp_task_maybe_wait_for_dependencies+0x338>

00000000000037d8 <GOMP_task>:
    37d8:	stp	x29, x30, [sp, #-336]!
    37dc:	mov	x29, sp
    37e0:	stp	x19, x20, [sp, #16]
    37e4:	stp	x21, x22, [sp, #32]
    37e8:	stp	x23, x24, [sp, #48]
    37ec:	stp	x25, x26, [sp, #64]
    37f0:	stp	x27, x28, [sp, #80]
    37f4:	mov	x25, x0
    37f8:	mov	x26, x1
    37fc:	mov	x22, x2
    3800:	str	x3, [x29, #112]
    3804:	mov	x24, x4
    3808:	and	w5, w5, #0xff
    380c:	mov	w20, w6
    3810:	str	x7, [x29, #120]
    3814:	adrp	x0, 0 <gomp_tls_data>
    3818:	ldr	x0, [x0]
    381c:	mrs	x1, tpidr_el0
    3820:	add	x0, x1, x0
    3824:	ldr	x19, [x0, #16]
    3828:	cmp	x19, #0x0
    382c:	cset	w1, ne  // ne = any
    3830:	adrp	x0, 0 <gomp_cancel_var>
    3834:	ldrb	w0, [x0]
    3838:	tst	w1, w0
    383c:	b.ne	38f4 <GOMP_task+0x11c>  // b.any
    3840:	mov	w23, #0x0                   	// #0
    3844:	tbz	w20, #4, 3860 <GOMP_task+0x88>
    3848:	adrp	x0, 0 <gomp_max_task_priority_var>
    384c:	ldr	w23, [x0]
    3850:	ldr	w0, [x29, #336]
    3854:	cmp	w23, w0
    3858:	ldr	w0, [x29, #336]
    385c:	csel	w23, w23, w0, le
    3860:	eor	w5, w5, #0x1
    3864:	cmp	x19, #0x0
    3868:	cset	w0, eq  // eq = none
    386c:	orr	w5, w0, w5
    3870:	cbnz	w5, 38a4 <GOMP_task+0xcc>
    3874:	adrp	x0, 0 <gomp_tls_data>
    3878:	ldr	x0, [x0]
    387c:	mrs	x1, tpidr_el0
    3880:	add	x0, x1, x0
    3884:	ldr	x21, [x0, #80]
    3888:	cbz	x21, 3894 <GOMP_task+0xbc>
    388c:	ldrb	w0, [x21, #205]
    3890:	cbnz	w0, 40bc <GOMP_task+0x8e4>
    3894:	ldr	w1, [x19]
    3898:	ldr	w0, [x19, #1320]
    389c:	cmp	w0, w1, lsl #6
    38a0:	b.ls	39b4 <GOMP_task+0x1dc>  // b.plast
    38a4:	tbz	w20, #3, 38d0 <GOMP_task+0xf8>
    38a8:	adrp	x0, 0 <gomp_tls_data>
    38ac:	ldr	x0, [x0]
    38b0:	mrs	x1, tpidr_el0
    38b4:	add	x0, x1, x0
    38b8:	ldr	x21, [x0, #80]
    38bc:	cbz	x21, 393c <GOMP_task+0x164>
    38c0:	ldr	x0, [x21, #56]
    38c4:	cbz	x0, 4060 <GOMP_task+0x888>
    38c8:	ldr	x0, [x29, #120]
    38cc:	bl	2fd8 <gomp_task_maybe_wait_for_dependencies>
    38d0:	adrp	x0, 0 <gomp_tls_data>
    38d4:	ldr	x0, [x0]
    38d8:	mrs	x1, tpidr_el0
    38dc:	add	x0, x1, x0
    38e0:	ldr	x21, [x0, #80]
    38e4:	cbnz	x21, 4074 <GOMP_task+0x89c>
    38e8:	adrp	x2, 0 <gomp_global_icv>
    38ec:	add	x2, x2, #0x0
    38f0:	b	4078 <GOMP_task+0x8a0>
    38f4:	ldr	w0, [x19, #132]
    38f8:	tbnz	w0, #2, 4040 <GOMP_task+0x868>
    38fc:	adrp	x0, 0 <gomp_tls_data>
    3900:	ldr	x0, [x0]
    3904:	mrs	x1, tpidr_el0
    3908:	add	x0, x1, x0
    390c:	ldr	x0, [x0, #80]
    3910:	ldr	x0, [x0, #40]
    3914:	cbz	x0, 3840 <GOMP_task+0x68>
    3918:	ldrb	w1, [x0, #49]
    391c:	cbnz	w1, 4040 <GOMP_task+0x868>
    3920:	ldrb	w1, [x0, #50]
    3924:	cbz	w1, 3840 <GOMP_task+0x68>
    3928:	ldr	x0, [x0]
    392c:	cbz	x0, 3840 <GOMP_task+0x68>
    3930:	ldrb	w0, [x0, #49]
    3934:	cbz	w0, 3840 <GOMP_task+0x68>
    3938:	b	4040 <GOMP_task+0x868>
    393c:	adrp	x2, 0 <gomp_global_icv>
    3940:	add	x2, x2, #0x0
    3944:	b	4078 <GOMP_task+0x8a0>
    3948:	mov	x20, sp
    394c:	ldr	x0, [x29, #112]
    3950:	add	x0, x0, x24
    3954:	add	x0, x0, #0xe
    3958:	and	x0, x0, #0xfffffffffffffff0
    395c:	sub	sp, sp, x0
    3960:	sub	x0, x24, #0x1
    3964:	add	x0, sp, x0
    3968:	neg	x24, x24
    396c:	and	x24, x0, x24
    3970:	mov	x1, x26
    3974:	mov	x0, x24
    3978:	blr	x22
    397c:	mov	x0, x24
    3980:	blr	x25
    3984:	mov	sp, x20
    3988:	b	3fd8 <GOMP_task+0x800>
    398c:	mov	x0, x19
    3990:	bl	0 <gomp_mutex_lock_slow>
    3994:	b	4008 <GOMP_task+0x830>
    3998:	add	x0, x29, #0x88
    399c:	bl	d4 <gomp_clear_parent_in_tree>
    39a0:	str	xzr, [x29, #136]
    39a4:	b	402c <GOMP_task+0x854>
    39a8:	mov	x0, x19
    39ac:	bl	0 <gomp_mutex_unlock_slow>
    39b0:	b	403c <GOMP_task+0x864>
    39b4:	ldr	x28, [x21, #40]
    39b8:	str	xzr, [x29, #104]
    39bc:	tbz	w20, #3, 39d8 <GOMP_task+0x200>
    39c0:	ldr	x0, [x29, #120]
    39c4:	ldr	x0, [x0]
    39c8:	cbz	x0, 3c28 <GOMP_task+0x450>
    39cc:	add	x0, x0, x0, lsl #2
    39d0:	lsl	x0, x0, #3
    39d4:	str	x0, [x29, #104]
    39d8:	add	x1, x24, #0xcf
    39dc:	ldr	x0, [x29, #104]
    39e0:	ldr	x2, [x29, #112]
    39e4:	add	x0, x0, x2
    39e8:	str	x1, [x29, #96]
    39ec:	add	x0, x0, x1
    39f0:	bl	0 <gomp_malloc>
    39f4:	mov	x27, x0
    39f8:	ldr	x0, [x29, #104]
    39fc:	add	x0, x27, x0
    3a00:	ldr	x1, [x29, #96]
    3a04:	add	x0, x0, x1
    3a08:	neg	x24, x24
    3a0c:	and	x24, x0, x24
    3a10:	adrp	x0, 0 <gomp_tls_data>
    3a14:	ldr	x0, [x0]
    3a18:	mrs	x1, tpidr_el0
    3a1c:	add	x0, x1, x0
    3a20:	ldr	x1, [x0, #80]
    3a24:	add	x2, x1, #0x90
    3a28:	adrp	x0, 0 <gomp_global_icv>
    3a2c:	add	x0, x0, #0x0
    3a30:	cmp	x1, #0x0
    3a34:	csel	x2, x0, x2, eq  // eq = none
    3a38:	mov	x1, x21
    3a3c:	mov	x0, x27
    3a40:	bl	17d8 <gomp_init_task>
    3a44:	str	w23, [x27, #88]
    3a48:	mov	w0, #0x1                   	// #1
    3a4c:	str	w0, [x27, #200]
    3a50:	ldrb	w0, [x21, #204]
    3a54:	strb	w0, [x27, #204]
    3a58:	str	x28, [x27, #40]
    3a5c:	adrp	x0, 0 <gomp_tls_data>
    3a60:	ldr	x0, [x0]
    3a64:	mrs	x1, tpidr_el0
    3a68:	add	x0, x1, x0
    3a6c:	str	x27, [x0, #80]
    3a70:	cbz	x22, 3c40 <GOMP_task+0x468>
    3a74:	mov	x1, x26
    3a78:	mov	x0, x24
    3a7c:	blr	x22
    3a80:	mov	w0, #0x1                   	// #1
    3a84:	strb	w0, [x27, #206]
    3a88:	adrp	x0, 0 <gomp_tls_data>
    3a8c:	ldr	x0, [x0]
    3a90:	mrs	x1, tpidr_el0
    3a94:	add	x0, x1, x0
    3a98:	str	x21, [x0, #80]
    3a9c:	mov	w0, #0x2                   	// #2
    3aa0:	str	w0, [x27, #200]
    3aa4:	str	x25, [x27, #184]
    3aa8:	str	x24, [x27, #192]
    3aac:	ubfx	x20, x20, #1, #1
    3ab0:	strb	w20, [x27, #205]
    3ab4:	add	x22, x19, #0x500
    3ab8:	mov	w0, #0x1                   	// #1
    3abc:	ldaxr	w1, [x22]
    3ac0:	cbnz	w1, 3acc <GOMP_task+0x2f4>
    3ac4:	stxr	w2, w0, [x22]
    3ac8:	cbnz	w2, 3abc <GOMP_task+0x2e4>
    3acc:	cmp	w1, #0x0
    3ad0:	b.ne	3c54 <GOMP_task+0x47c>  // b.any
    3ad4:	adrp	x0, 0 <gomp_cancel_var>
    3ad8:	ldrb	w0, [x0]
    3adc:	cbnz	w0, 3c60 <GOMP_task+0x488>
    3ae0:	cbz	x28, 3af0 <GOMP_task+0x318>
    3ae4:	ldr	x0, [x28, #56]
    3ae8:	add	x0, x0, #0x1
    3aec:	str	x0, [x28, #56]
    3af0:	ldr	x0, [x29, #104]
    3af4:	cbz	x0, 3b10 <GOMP_task+0x338>
    3af8:	ldr	x2, [x29, #120]
    3afc:	mov	x1, x21
    3b00:	mov	x0, x27
    3b04:	bl	538 <gomp_task_handle_depend>
    3b08:	ldr	x0, [x27, #80]
    3b0c:	cbnz	x0, 3ccc <GOMP_task+0x4f4>
    3b10:	ldr	x0, [x21, #8]
    3b14:	cmp	w23, #0x0
    3b18:	cset	w20, gt
    3b1c:	cmp	x0, #0x0
    3b20:	ccmp	w20, #0x0, #0x0, eq  // eq = none
    3b24:	b.ne	3ce8 <GOMP_task+0x510>  // b.any
    3b28:	add	x0, x27, #0x70
    3b2c:	ldr	x1, [x21, #24]
    3b30:	cbz	x1, 3dbc <GOMP_task+0x5e4>
    3b34:	str	x1, [x27, #112]
    3b38:	ldr	x1, [x1, #8]
    3b3c:	str	x1, [x27, #120]
    3b40:	str	x0, [x21, #24]
    3b44:	ldr	x1, [x27, #112]
    3b48:	str	x0, [x1, #8]
    3b4c:	ldr	x1, [x27, #120]
    3b50:	str	x0, [x1]
    3b54:	cbz	x28, 3b94 <GOMP_task+0x3bc>
    3b58:	ldr	x0, [x28, #8]
    3b5c:	cmp	x0, #0x0
    3b60:	ccmp	w20, #0x0, #0x0, eq  // eq = none
    3b64:	b.ne	3dcc <GOMP_task+0x5f4>  // b.any
    3b68:	add	x0, x27, #0x80
    3b6c:	ldr	x1, [x28, #24]
    3b70:	cbz	x1, 3ea0 <GOMP_task+0x6c8>
    3b74:	str	x1, [x27, #128]
    3b78:	ldr	x1, [x1, #8]
    3b7c:	str	x1, [x27, #136]
    3b80:	str	x0, [x28, #24]
    3b84:	ldr	x1, [x27, #128]
    3b88:	str	x0, [x1, #8]
    3b8c:	ldr	x1, [x27, #136]
    3b90:	str	x0, [x1]
    3b94:	ldr	x0, [x19, #1288]
    3b98:	cmp	x0, #0x0
    3b9c:	ccmp	w20, #0x0, #0x0, eq  // eq = none
    3ba0:	b.ne	3eb0 <GOMP_task+0x6d8>  // b.any
    3ba4:	add	x1, x27, #0x60
    3ba8:	ldr	x0, [x19, #1304]
    3bac:	cbz	x0, 3f7c <GOMP_task+0x7a4>
    3bb0:	str	x0, [x27, #96]
    3bb4:	ldr	x2, [x0, #8]
    3bb8:	str	x2, [x27, #104]
    3bbc:	str	x1, [x0, #8]
    3bc0:	ldr	x0, [x27, #104]
    3bc4:	str	x1, [x0]
    3bc8:	ldr	w0, [x19, #1320]
    3bcc:	add	w0, w0, #0x1
    3bd0:	str	w0, [x19, #1320]
    3bd4:	ldr	w0, [x19, #1324]
    3bd8:	add	w0, w0, #0x1
    3bdc:	str	w0, [x19, #1324]
    3be0:	ldr	w0, [x19, #132]
    3be4:	orr	w0, w0, #0x1
    3be8:	str	w0, [x19, #132]
    3bec:	ldrb	w20, [x21, #204]
    3bf0:	eor	w20, w20, #0x1
    3bf4:	ldr	w0, [x19, #1328]
    3bf8:	add	w20, w20, w0
    3bfc:	ldr	w21, [x19]
    3c00:	ldxr	w0, [x22]
    3c04:	stlxr	w1, wzr, [x22]
    3c08:	cbnz	w1, 3c00 <GOMP_task+0x428>
    3c0c:	tbnz	w0, #31, 3f8c <GOMP_task+0x7b4>
    3c10:	cmp	w20, w21
    3c14:	b.cs	4040 <GOMP_task+0x868>  // b.hs, b.nlast
    3c18:	mov	w1, #0x1                   	// #1
    3c1c:	add	x0, x19, #0x80
    3c20:	bl	0 <gomp_team_barrier_wake>
    3c24:	b	4040 <GOMP_task+0x868>
    3c28:	ldr	x0, [x29, #120]
    3c2c:	ldr	x0, [x0, #8]
    3c30:	add	x0, x0, x0, lsl #2
    3c34:	lsl	x0, x0, #3
    3c38:	str	x0, [x29, #104]
    3c3c:	b	39d8 <GOMP_task+0x200>
    3c40:	ldr	x2, [x29, #112]
    3c44:	mov	x1, x26
    3c48:	mov	x0, x24
    3c4c:	bl	0 <memcpy>
    3c50:	b	3a88 <GOMP_task+0x2b0>
    3c54:	mov	x0, x22
    3c58:	bl	0 <gomp_mutex_lock_slow>
    3c5c:	b	3ad4 <GOMP_task+0x2fc>
    3c60:	ldrb	w0, [x27, #206]
    3c64:	cbnz	w0, 3ae0 <GOMP_task+0x308>
    3c68:	ldr	w0, [x19, #132]
    3c6c:	tbnz	w0, #2, 3c94 <GOMP_task+0x4bc>
    3c70:	cbz	x28, 3af0 <GOMP_task+0x318>
    3c74:	ldrb	w0, [x28, #49]
    3c78:	cbnz	w0, 3c94 <GOMP_task+0x4bc>
    3c7c:	ldrb	w0, [x28, #50]
    3c80:	cbz	w0, 3ae4 <GOMP_task+0x30c>
    3c84:	ldr	x0, [x28]
    3c88:	cbz	x0, 3ae4 <GOMP_task+0x30c>
    3c8c:	ldrb	w0, [x0, #49]
    3c90:	cbz	w0, 3ae4 <GOMP_task+0x30c>
    3c94:	ldxr	w0, [x22]
    3c98:	stlxr	w1, wzr, [x22]
    3c9c:	cbnz	w1, 3c94 <GOMP_task+0x4bc>
    3ca0:	tbnz	w0, #31, 3cb8 <GOMP_task+0x4e0>
    3ca4:	ldr	x0, [x27, #56]
    3ca8:	cbnz	x0, 3cc4 <GOMP_task+0x4ec>
    3cac:	mov	x0, x27
    3cb0:	bl	0 <free>
    3cb4:	b	4040 <GOMP_task+0x868>
    3cb8:	mov	x0, x22
    3cbc:	bl	0 <gomp_mutex_unlock_slow>
    3cc0:	b	3ca4 <GOMP_task+0x4cc>
    3cc4:	bl	0 <free>
    3cc8:	b	3cac <GOMP_task+0x4d4>
    3ccc:	ldxr	w0, [x22]
    3cd0:	stlxr	w1, wzr, [x22]
    3cd4:	cbnz	w1, 3ccc <GOMP_task+0x4f4>
    3cd8:	tbz	w0, #31, 4040 <GOMP_task+0x868>
    3cdc:	mov	x0, x22
    3ce0:	bl	0 <gomp_mutex_unlock_slow>
    3ce4:	b	4040 <GOMP_task+0x868>
    3ce8:	add	x24, x21, #0x8
    3cec:	cbz	x0, 3d34 <GOMP_task+0x55c>
    3cf0:	str	w23, [x29, #128]
    3cf4:	add	x1, x29, #0x80
    3cf8:	mov	x0, x24
    3cfc:	bl	0 <prio_splay_tree_lookup>
    3d00:	cbz	x0, 3d78 <GOMP_task+0x5a0>
    3d04:	add	x1, x27, #0x70
    3d08:	ldr	x2, [x0, #8]
    3d0c:	cbz	x2, 3dac <GOMP_task+0x5d4>
    3d10:	str	x2, [x27, #112]
    3d14:	ldr	x2, [x2, #8]
    3d18:	str	x2, [x27, #120]
    3d1c:	str	x1, [x0, #8]
    3d20:	ldr	x0, [x27, #112]
    3d24:	str	x1, [x0, #8]
    3d28:	ldr	x0, [x27, #120]
    3d2c:	str	x1, [x0]
    3d30:	b	3b54 <GOMP_task+0x37c>
    3d34:	ldr	x0, [x21, #24]
    3d38:	cbz	x0, 3d78 <GOMP_task+0x5a0>
    3d3c:	mov	x0, #0x28                  	// #40
    3d40:	bl	0 <gomp_malloc>
    3d44:	mov	x1, x0
    3d48:	str	xzr, [x0, #24]
    3d4c:	str	xzr, [x0, #32]
    3d50:	str	wzr, [x0]
    3d54:	ldr	x0, [x24, #16]
    3d58:	str	x0, [x1, #8]
    3d5c:	ldr	x0, [x24, #24]
    3d60:	str	x0, [x1, #16]
    3d64:	mov	x0, x24
    3d68:	bl	0 <prio_splay_tree_insert>
    3d6c:	str	xzr, [x24, #16]
    3d70:	ldr	x0, [x21, #8]
    3d74:	cbnz	x0, 3cf0 <GOMP_task+0x518>
    3d78:	mov	x0, #0x28                  	// #40
    3d7c:	bl	0 <gomp_malloc>
    3d80:	mov	x25, x0
    3d84:	str	xzr, [x0, #24]
    3d88:	str	xzr, [x0, #32]
    3d8c:	str	w23, [x0]
    3d90:	str	xzr, [x0, #8]
    3d94:	str	xzr, [x0, #16]
    3d98:	mov	x1, x0
    3d9c:	mov	x0, x24
    3da0:	bl	0 <prio_splay_tree_insert>
    3da4:	mov	x0, x25
    3da8:	b	3d04 <GOMP_task+0x52c>
    3dac:	str	x1, [x27, #112]
    3db0:	str	x1, [x27, #120]
    3db4:	str	x1, [x0, #8]
    3db8:	b	3b54 <GOMP_task+0x37c>
    3dbc:	str	x0, [x27, #112]
    3dc0:	str	x0, [x27, #120]
    3dc4:	str	x0, [x21, #24]
    3dc8:	b	3b54 <GOMP_task+0x37c>
    3dcc:	add	x24, x28, #0x8
    3dd0:	cbz	x0, 3e18 <GOMP_task+0x640>
    3dd4:	str	w23, [x29, #128]
    3dd8:	add	x1, x29, #0x80
    3ddc:	mov	x0, x24
    3de0:	bl	0 <prio_splay_tree_lookup>
    3de4:	cbz	x0, 3e5c <GOMP_task+0x684>
    3de8:	add	x1, x27, #0x80
    3dec:	ldr	x2, [x0, #8]
    3df0:	cbz	x2, 3e90 <GOMP_task+0x6b8>
    3df4:	str	x2, [x27, #128]
    3df8:	ldr	x2, [x2, #8]
    3dfc:	str	x2, [x27, #136]
    3e00:	str	x1, [x0, #8]
    3e04:	ldr	x0, [x27, #128]
    3e08:	str	x1, [x0, #8]
    3e0c:	ldr	x0, [x27, #136]
    3e10:	str	x1, [x0]
    3e14:	b	3b94 <GOMP_task+0x3bc>
    3e18:	ldr	x0, [x28, #24]
    3e1c:	cbz	x0, 3e5c <GOMP_task+0x684>
    3e20:	mov	x0, #0x28                  	// #40
    3e24:	bl	0 <gomp_malloc>
    3e28:	mov	x1, x0
    3e2c:	str	xzr, [x0, #24]
    3e30:	str	xzr, [x0, #32]
    3e34:	str	wzr, [x0]
    3e38:	ldr	x0, [x24, #16]
    3e3c:	str	x0, [x1, #8]
    3e40:	ldr	x0, [x24, #24]
    3e44:	str	x0, [x1, #16]
    3e48:	mov	x0, x24
    3e4c:	bl	0 <prio_splay_tree_insert>
    3e50:	str	xzr, [x24, #16]
    3e54:	ldr	x0, [x28, #8]
    3e58:	cbnz	x0, 3dd4 <GOMP_task+0x5fc>
    3e5c:	mov	x0, #0x28                  	// #40
    3e60:	bl	0 <gomp_malloc>
    3e64:	mov	x25, x0
    3e68:	str	xzr, [x0, #24]
    3e6c:	str	xzr, [x0, #32]
    3e70:	str	w23, [x0]
    3e74:	str	xzr, [x0, #8]
    3e78:	str	xzr, [x0, #16]
    3e7c:	mov	x1, x0
    3e80:	mov	x0, x24
    3e84:	bl	0 <prio_splay_tree_insert>
    3e88:	mov	x0, x25
    3e8c:	b	3de8 <GOMP_task+0x610>
    3e90:	str	x1, [x27, #128]
    3e94:	str	x1, [x27, #136]
    3e98:	str	x1, [x0, #8]
    3e9c:	b	3b94 <GOMP_task+0x3bc>
    3ea0:	str	x0, [x27, #128]
    3ea4:	str	x0, [x27, #136]
    3ea8:	str	x0, [x28, #24]
    3eac:	b	3b94 <GOMP_task+0x3bc>
    3eb0:	add	x24, x19, #0x508
    3eb4:	cbz	x0, 3ef4 <GOMP_task+0x71c>
    3eb8:	str	w23, [x29, #128]
    3ebc:	add	x1, x29, #0x80
    3ec0:	mov	x0, x24
    3ec4:	bl	0 <prio_splay_tree_lookup>
    3ec8:	cbz	x0, 3f38 <GOMP_task+0x760>
    3ecc:	add	x2, x27, #0x60
    3ed0:	ldr	x1, [x0, #8]
    3ed4:	cbz	x1, 3f6c <GOMP_task+0x794>
    3ed8:	str	x1, [x27, #96]
    3edc:	ldr	x0, [x1, #8]
    3ee0:	str	x0, [x27, #104]
    3ee4:	str	x2, [x1, #8]
    3ee8:	ldr	x0, [x27, #104]
    3eec:	str	x2, [x0]
    3ef0:	b	3bc8 <GOMP_task+0x3f0>
    3ef4:	ldr	x0, [x19, #1304]
    3ef8:	cbz	x0, 3f38 <GOMP_task+0x760>
    3efc:	mov	x0, #0x28                  	// #40
    3f00:	bl	0 <gomp_malloc>
    3f04:	mov	x1, x0
    3f08:	str	xzr, [x0, #24]
    3f0c:	str	xzr, [x0, #32]
    3f10:	str	wzr, [x0]
    3f14:	ldr	x0, [x24, #16]
    3f18:	str	x0, [x1, #8]
    3f1c:	ldr	x0, [x24, #24]
    3f20:	str	x0, [x1, #16]
    3f24:	mov	x0, x24
    3f28:	bl	0 <prio_splay_tree_insert>
    3f2c:	str	xzr, [x24, #16]
    3f30:	ldr	x0, [x19, #1288]
    3f34:	cbnz	x0, 3eb8 <GOMP_task+0x6e0>
    3f38:	mov	x0, #0x28                  	// #40
    3f3c:	bl	0 <gomp_malloc>
    3f40:	mov	x20, x0
    3f44:	str	xzr, [x0, #24]
    3f48:	str	xzr, [x0, #32]
    3f4c:	str	w23, [x0]
    3f50:	str	xzr, [x0, #8]
    3f54:	str	xzr, [x0, #16]
    3f58:	mov	x1, x0
    3f5c:	mov	x0, x24
    3f60:	bl	0 <prio_splay_tree_insert>
    3f64:	mov	x0, x20
    3f68:	b	3ecc <GOMP_task+0x6f4>
    3f6c:	str	x2, [x27, #96]
    3f70:	str	x2, [x27, #104]
    3f74:	str	x2, [x0, #8]
    3f78:	b	3bc8 <GOMP_task+0x3f0>
    3f7c:	str	x1, [x27, #96]
    3f80:	str	x1, [x27, #104]
    3f84:	str	x1, [x19, #1304]
    3f88:	b	3bc8 <GOMP_task+0x3f0>
    3f8c:	mov	x0, x22
    3f90:	bl	0 <gomp_mutex_unlock_slow>
    3f94:	b	3c10 <GOMP_task+0x438>
    3f98:	mov	w1, #0x1                   	// #1
    3f9c:	strb	w1, [x29, #333]
    3fa0:	str	w23, [x29, #216]
    3fa4:	ldrb	w1, [x0, #204]
    3fa8:	strb	w1, [x29, #332]
    3fac:	ldr	x0, [x0, #40]
    3fb0:	str	x0, [x29, #168]
    3fb4:	adrp	x0, 0 <gomp_tls_data>
    3fb8:	ldr	x0, [x0]
    3fbc:	mrs	x1, tpidr_el0
    3fc0:	add	x0, x1, x0
    3fc4:	add	x1, x29, #0x80
    3fc8:	str	x1, [x0, #80]
    3fcc:	cbnz	x22, 3948 <GOMP_task+0x170>
    3fd0:	mov	x0, x26
    3fd4:	blr	x25
    3fd8:	ldr	x0, [x29, #136]
    3fdc:	cbnz	x0, 3fe8 <GOMP_task+0x810>
    3fe0:	ldr	x0, [x29, #152]
    3fe4:	cbz	x0, 403c <GOMP_task+0x864>
    3fe8:	add	x19, x19, #0x500
    3fec:	mov	w0, #0x1                   	// #1
    3ff0:	ldaxr	w1, [x19]
    3ff4:	cbnz	w1, 4000 <GOMP_task+0x828>
    3ff8:	stxr	w2, w0, [x19]
    3ffc:	cbnz	w2, 3ff0 <GOMP_task+0x818>
    4000:	cmp	w1, #0x0
    4004:	b.ne	398c <GOMP_task+0x1b4>  // b.any
    4008:	ldr	x1, [x29, #136]
    400c:	cbnz	x1, 3998 <GOMP_task+0x1c0>
    4010:	ldr	x0, [x29, #152]
    4014:	cbz	x0, 402c <GOMP_task+0x854>
    4018:	stur	xzr, [x0, #-112]
    401c:	ldr	x0, [x0]
    4020:	ldr	x1, [x29, #152]
    4024:	cmp	x0, x1
    4028:	b.ne	4018 <GOMP_task+0x840>  // b.any
    402c:	ldxr	w0, [x19]
    4030:	stlxr	w1, wzr, [x19]
    4034:	cbnz	w1, 402c <GOMP_task+0x854>
    4038:	tbnz	w0, #31, 39a8 <GOMP_task+0x1d0>
    403c:	bl	1830 <gomp_end_task>
    4040:	mov	sp, x29
    4044:	ldp	x19, x20, [sp, #16]
    4048:	ldp	x21, x22, [sp, #32]
    404c:	ldp	x23, x24, [sp, #48]
    4050:	ldp	x25, x26, [sp, #64]
    4054:	ldp	x27, x28, [sp, #80]
    4058:	ldp	x29, x30, [sp], #336
    405c:	ret
    4060:	adrp	x0, 0 <gomp_tls_data>
    4064:	ldr	x0, [x0]
    4068:	mrs	x1, tpidr_el0
    406c:	add	x0, x1, x0
    4070:	ldr	x21, [x0, #80]
    4074:	add	x2, x21, #0x90
    4078:	mov	x1, x21
    407c:	add	x0, x29, #0x80
    4080:	bl	17d8 <gomp_init_task>
    4084:	mov	w0, #0x1                   	// #1
    4088:	str	w0, [x29, #328]
    408c:	adrp	x0, 0 <gomp_tls_data>
    4090:	ldr	x0, [x0]
    4094:	mrs	x1, tpidr_el0
    4098:	add	x0, x1, x0
    409c:	ldr	x0, [x0, #80]
    40a0:	cbz	x0, 40d8 <GOMP_task+0x900>
    40a4:	ldrb	w1, [x0, #205]
    40a8:	cbnz	w1, 3f98 <GOMP_task+0x7c0>
    40ac:	ubfx	x20, x20, #1, #1
    40b0:	strb	w20, [x29, #333]
    40b4:	str	w23, [x29, #216]
    40b8:	b	3fa4 <GOMP_task+0x7cc>
    40bc:	tbnz	w20, #3, 38c0 <GOMP_task+0xe8>
    40c0:	adrp	x0, 0 <gomp_tls_data>
    40c4:	ldr	x0, [x0]
    40c8:	mrs	x1, tpidr_el0
    40cc:	add	x0, x1, x0
    40d0:	ldr	x21, [x0, #80]
    40d4:	b	4074 <GOMP_task+0x89c>
    40d8:	ubfx	x20, x20, #1, #1
    40dc:	strb	w20, [x29, #333]
    40e0:	str	w23, [x29, #216]
    40e4:	b	3fb4 <GOMP_task+0x7dc>

00000000000040e8 <GOMP_taskwait_depend>:
    40e8:	adrp	x1, 0 <gomp_tls_data>
    40ec:	ldr	x1, [x1]
    40f0:	mrs	x2, tpidr_el0
    40f4:	add	x1, x2, x1
    40f8:	ldr	x1, [x1, #16]
    40fc:	cmp	x1, #0x0
    4100:	cset	w3, ne  // ne = any
    4104:	adrp	x2, 0 <gomp_cancel_var>
    4108:	ldrb	w2, [x2]
    410c:	tst	w3, w2
    4110:	b.ne	4148 <GOMP_taskwait_depend+0x60>  // b.any
    4114:	adrp	x1, 0 <gomp_tls_data>
    4118:	ldr	x1, [x1]
    411c:	mrs	x2, tpidr_el0
    4120:	add	x1, x2, x1
    4124:	ldr	x1, [x1, #80]
    4128:	cbz	x1, 4190 <GOMP_taskwait_depend+0xa8>
    412c:	ldr	x1, [x1, #56]
    4130:	cbz	x1, 4190 <GOMP_taskwait_depend+0xa8>
    4134:	stp	x29, x30, [sp, #-16]!
    4138:	mov	x29, sp
    413c:	bl	2fd8 <gomp_task_maybe_wait_for_dependencies>
    4140:	ldp	x29, x30, [sp], #16
    4144:	ret
    4148:	ldr	w1, [x1, #132]
    414c:	tbnz	w1, #2, 4190 <GOMP_taskwait_depend+0xa8>
    4150:	adrp	x1, 0 <gomp_tls_data>
    4154:	ldr	x1, [x1]
    4158:	mrs	x2, tpidr_el0
    415c:	add	x1, x2, x1
    4160:	ldr	x1, [x1, #80]
    4164:	ldr	x2, [x1, #40]
    4168:	cbz	x2, 412c <GOMP_taskwait_depend+0x44>
    416c:	ldrb	w3, [x2, #49]
    4170:	cbnz	w3, 4190 <GOMP_taskwait_depend+0xa8>
    4174:	ldrb	w3, [x2, #50]
    4178:	cbz	w3, 412c <GOMP_taskwait_depend+0x44>
    417c:	ldr	x2, [x2]
    4180:	cbz	x2, 412c <GOMP_taskwait_depend+0x44>
    4184:	ldrb	w2, [x2, #49]
    4188:	cbz	w2, 412c <GOMP_taskwait_depend+0x44>
    418c:	ret
    4190:	ret

0000000000004194 <GOMP_taskyield>:
    4194:	ret

0000000000004198 <GOMP_taskgroup_start>:
    4198:	adrp	x0, 0 <gomp_tls_data>
    419c:	ldr	x0, [x0]
    41a0:	mrs	x1, tpidr_el0
    41a4:	add	x0, x1, x0
    41a8:	ldr	x0, [x0, #16]
    41ac:	cbz	x0, 421c <GOMP_taskgroup_start+0x84>
    41b0:	stp	x29, x30, [sp, #-32]!
    41b4:	mov	x29, sp
    41b8:	stp	x19, x20, [sp, #16]
    41bc:	adrp	x0, 0 <gomp_tls_data>
    41c0:	ldr	x0, [x0]
    41c4:	add	x0, x1, x0
    41c8:	ldr	x20, [x0, #80]
    41cc:	ldr	x19, [x20, #40]
    41d0:	mov	x0, #0x40                  	// #64
    41d4:	bl	0 <gomp_malloc>
    41d8:	mov	x1, x0
    41dc:	str	x19, [x1], #8
    41e0:	str	xzr, [x0, #8]
    41e4:	str	xzr, [x1, #16]
    41e8:	str	xzr, [x1, #24]
    41ec:	cbz	x19, 41f4 <GOMP_taskgroup_start+0x5c>
    41f0:	ldr	x19, [x19, #40]
    41f4:	str	x19, [x0, #40]
    41f8:	strb	wzr, [x0, #48]
    41fc:	strb	wzr, [x0, #49]
    4200:	strb	wzr, [x0, #50]
    4204:	str	xzr, [x0, #56]
    4208:	str	wzr, [x0, #52]
    420c:	str	x0, [x20, #40]
    4210:	ldp	x19, x20, [sp, #16]
    4214:	ldp	x29, x30, [sp], #32
    4218:	ret
    421c:	ret

0000000000004220 <GOMP_taskgroup_end>:
    4220:	stp	x29, x30, [sp, #-128]!
    4224:	mov	x29, sp
    4228:	stp	x23, x24, [sp, #48]
    422c:	adrp	x0, 0 <gomp_tls_data>
    4230:	ldr	x0, [x0]
    4234:	mrs	x1, tpidr_el0
    4238:	add	x0, x1, x0
    423c:	ldr	x24, [x0, #16]
    4240:	cbz	x24, 4360 <GOMP_taskgroup_end+0x140>
    4244:	stp	x19, x20, [sp, #16]
    4248:	stp	x25, x26, [sp, #64]
    424c:	adrp	x0, 0 <gomp_tls_data>
    4250:	ldr	x0, [x0]
    4254:	add	x0, x1, x0
    4258:	ldr	x25, [x0, #80]
    425c:	ldr	x20, [x25, #40]
    4260:	cbz	x20, 42b8 <GOMP_taskgroup_end+0x98>
    4264:	add	x0, x20, #0x38
    4268:	ldar	x0, [x0]
    426c:	cbz	x0, 4348 <GOMP_taskgroup_end+0x128>
    4270:	stp	x21, x22, [sp, #32]
    4274:	stp	x27, x28, [sp, #80]
    4278:	add	x21, x24, #0x500
    427c:	mov	w0, #0x1                   	// #1
    4280:	ldaxr	w1, [x21]
    4284:	cbnz	w1, 4290 <GOMP_taskgroup_end+0x70>
    4288:	stxr	w2, w0, [x21]
    428c:	cbnz	w2, 4280 <GOMP_taskgroup_end+0x60>
    4290:	cmp	w1, #0x0
    4294:	b.ne	42e0 <GOMP_taskgroup_end+0xc0>  // b.any
    4298:	mov	w23, #0x0                   	// #0
    429c:	mov	x22, #0x0                   	// #0
    42a0:	mov	w28, #0x0                   	// #0
    42a4:	mrs	x27, tpidr_el0
    42a8:	adrp	x0, 0 <gomp_tls_data>
    42ac:	ldr	x0, [x0]
    42b0:	add	x27, x27, x0
    42b4:	b	4570 <GOMP_taskgroup_end+0x350>
    42b8:	adrp	x0, 0 <gomp_tls_data>
    42bc:	ldr	x0, [x0]
    42c0:	add	x0, x1, x0
    42c4:	ldr	w0, [x0, #44]
    42c8:	cbnz	w0, 4264 <GOMP_taskgroup_end+0x44>
    42cc:	add	x0, x24, #0x80
    42d0:	bl	0 <gomp_team_barrier_wait>
    42d4:	ldp	x19, x20, [sp, #16]
    42d8:	ldp	x25, x26, [sp, #64]
    42dc:	b	4360 <GOMP_taskgroup_end+0x140>
    42e0:	mov	x0, x21
    42e4:	bl	0 <gomp_mutex_lock_slow>
    42e8:	b	4298 <GOMP_taskgroup_end+0x78>
    42ec:	add	x4, sp, #0x7f
    42f0:	add	x3, x24, #0x508
    42f4:	mov	w2, w28
    42f8:	add	x1, x25, #0x8
    42fc:	mov	w0, #0x1                   	// #1
    4300:	bl	0 <priority_tree_next_task>
    4304:	mov	x19, x0
    4308:	cbnz	x0, 43c0 <GOMP_taskgroup_end+0x1a0>
    430c:	ldr	x0, [x25, #8]
    4310:	ldr	x19, [x0, #8]
    4314:	sub	x19, x19, #0x70
    4318:	b	43c0 <GOMP_taskgroup_end+0x1a0>
    431c:	ldxr	w0, [x21]
    4320:	stlxr	w1, wzr, [x21]
    4324:	cbnz	w1, 431c <GOMP_taskgroup_end+0xfc>
    4328:	tbnz	w0, #31, 436c <GOMP_taskgroup_end+0x14c>
    432c:	cbz	x22, 4888 <GOMP_taskgroup_end+0x668>
    4330:	ldr	x0, [x22, #56]
    4334:	cbnz	x0, 4378 <GOMP_taskgroup_end+0x158>
    4338:	mov	x0, x22
    433c:	bl	0 <free>
    4340:	ldp	x21, x22, [sp, #32]
    4344:	ldp	x27, x28, [sp, #80]
    4348:	ldr	x0, [x20]
    434c:	str	x0, [x25, #40]
    4350:	mov	x0, x20
    4354:	bl	0 <free>
    4358:	ldp	x19, x20, [sp, #16]
    435c:	ldp	x25, x26, [sp, #64]
    4360:	ldp	x23, x24, [sp, #48]
    4364:	ldp	x29, x30, [sp], #128
    4368:	ret
    436c:	mov	x0, x21
    4370:	bl	0 <gomp_mutex_unlock_slow>
    4374:	b	432c <GOMP_taskgroup_end+0x10c>
    4378:	bl	0 <free>
    437c:	b	4338 <GOMP_taskgroup_end+0x118>
    4380:	add	x4, sp, #0x7f
    4384:	add	x3, x24, #0x508
    4388:	mov	w2, w28
    438c:	add	x1, x20, #0x8
    4390:	mov	w0, #0x2                   	// #2
    4394:	bl	0 <priority_tree_next_task>
    4398:	mov	x19, x0
    439c:	cbnz	x0, 43c0 <GOMP_taskgroup_end+0x1a0>
    43a0:	ldr	x0, [x20, #8]
    43a4:	ldr	x19, [x0, #8]
    43a8:	sub	x19, x19, #0x80
    43ac:	b	43c0 <GOMP_taskgroup_end+0x1a0>
    43b0:	mov	w0, #0x1                   	// #1
    43b4:	strb	w0, [sp, #127]
    43b8:	ldr	x19, [x20, #24]
    43bc:	sub	x19, x19, #0x80
    43c0:	ldr	w0, [x19, #200]
    43c4:	cmp	w0, #0x2
    43c8:	b.eq	45ac <GOMP_taskgroup_end+0x38c>  // b.none
    43cc:	mov	w0, #0x1                   	// #1
    43d0:	strb	w0, [x20, #48]
    43d4:	mov	x19, #0x0                   	// #0
    43d8:	ldxr	w0, [x21]
    43dc:	stlxr	w1, wzr, [x21]
    43e0:	cbnz	w1, 43d8 <GOMP_taskgroup_end+0x1b8>
    43e4:	tbnz	w0, #31, 45e4 <GOMP_taskgroup_end+0x3c4>
    43e8:	cbnz	w23, 45f0 <GOMP_taskgroup_end+0x3d0>
    43ec:	cbz	x22, 4400 <GOMP_taskgroup_end+0x1e0>
    43f0:	ldr	x0, [x22, #56]
    43f4:	cbnz	x0, 4600 <GOMP_taskgroup_end+0x3e0>
    43f8:	mov	x0, x22
    43fc:	bl	0 <free>
    4400:	cbz	x19, 4688 <GOMP_taskgroup_end+0x468>
    4404:	str	x19, [x27, #80]
    4408:	ldr	x1, [x19, #184]
    440c:	cbz	x1, 4608 <GOMP_taskgroup_end+0x3e8>
    4410:	ldr	x0, [x19, #192]
    4414:	blr	x1
    4418:	str	x25, [x27, #80]
    441c:	mov	w0, #0x1                   	// #1
    4420:	ldaxr	w1, [x21]
    4424:	cbnz	w1, 4430 <GOMP_taskgroup_end+0x210>
    4428:	stxr	w2, w0, [x21]
    442c:	cbnz	w2, 4420 <GOMP_taskgroup_end+0x200>
    4430:	cmp	w1, #0x0
    4434:	mov	w23, w28
    4438:	b.ne	46ec <GOMP_taskgroup_end+0x4cc>  // b.any
    443c:	ldr	x22, [x19, #72]
    4440:	cbz	x22, 4470 <GOMP_taskgroup_end+0x250>
    4444:	ldr	x0, [x19]
    4448:	cbz	x0, 4894 <GOMP_taskgroup_end+0x674>
    444c:	mov	x0, x19
    4450:	bl	8f0 <gomp_task_run_post_handle_depend_hash>
    4454:	ldr	x0, [x19, #48]
    4458:	mov	x22, #0x0                   	// #0
    445c:	cbz	x0, 4470 <GOMP_taskgroup_end+0x250>
    4460:	mov	x1, x24
    4464:	mov	x0, x19
    4468:	bl	e24 <gomp_task_run_post_handle_dependers>
    446c:	mov	x22, x0
    4470:	ldr	x26, [x19]
    4474:	cbz	x26, 44b4 <GOMP_taskgroup_end+0x294>
    4478:	ldrb	w0, [x19, #207]
    447c:	cbnz	w0, 46f8 <GOMP_taskgroup_end+0x4d8>
    4480:	ldr	x0, [x26, #8]
    4484:	cbnz	x0, 4758 <GOMP_taskgroup_end+0x538>
    4488:	add	x1, x19, #0x70
    448c:	ldr	x2, [x19, #120]
    4490:	ldr	x0, [x19, #112]
    4494:	str	x0, [x2]
    4498:	ldr	x2, [x19, #120]
    449c:	str	x2, [x0, #8]
    44a0:	ldr	x0, [x26, #24]
    44a4:	cmp	x1, x0
    44a8:	b.eq	4784 <GOMP_taskgroup_end+0x564>  // b.none
    44ac:	str	xzr, [x19, #112]
    44b0:	str	xzr, [x19, #120]
    44b4:	ldr	x1, [x19, #8]
    44b8:	cbnz	x1, 47f0 <GOMP_taskgroup_end+0x5d0>
    44bc:	ldr	x0, [x19, #24]
    44c0:	cbz	x0, 44d8 <GOMP_taskgroup_end+0x2b8>
    44c4:	stur	xzr, [x0, #-112]
    44c8:	ldr	x0, [x0]
    44cc:	ldr	x1, [x19, #24]
    44d0:	cmp	x0, x1
    44d4:	b.ne	44c4 <GOMP_taskgroup_end+0x2a4>  // b.any
    44d8:	ldr	x26, [x19, #40]
    44dc:	cbz	x26, 4538 <GOMP_taskgroup_end+0x318>
    44e0:	ldr	x0, [x26, #8]
    44e4:	cbnz	x0, 4800 <GOMP_taskgroup_end+0x5e0>
    44e8:	add	x2, x19, #0x80
    44ec:	ldr	x1, [x19, #136]
    44f0:	ldr	x0, [x19, #128]
    44f4:	str	x0, [x1]
    44f8:	ldr	x1, [x19, #136]
    44fc:	str	x1, [x0, #8]
    4500:	ldr	x0, [x26, #24]
    4504:	mov	w1, w28
    4508:	cmp	x2, x0
    450c:	b.eq	4820 <GOMP_taskgroup_end+0x600>  // b.none
    4510:	str	xzr, [x19, #128]
    4514:	str	xzr, [x19, #136]
    4518:	ldr	x0, [x26, #56]
    451c:	cmp	x0, #0x1
    4520:	b.ls	4840 <GOMP_taskgroup_end+0x620>  // b.plast
    4524:	sub	x0, x0, #0x1
    4528:	str	x0, [x26, #56]
    452c:	cbz	w1, 4538 <GOMP_taskgroup_end+0x318>
    4530:	ldrb	w0, [x26, #48]
    4534:	cbnz	w0, 484c <GOMP_taskgroup_end+0x62c>
    4538:	ldr	w0, [x24, #1320]
    453c:	sub	w0, w0, #0x1
    4540:	str	w0, [x24, #1320]
    4544:	cmp	x22, #0x1
    4548:	b.ls	456c <GOMP_taskgroup_end+0x34c>  // b.plast
    454c:	ldr	w0, [x24]
    4550:	ldr	w1, [x24, #1328]
    4554:	sub	w0, w0, w1
    4558:	ldrb	w1, [x25, #204]
    455c:	eor	w1, w1, #0x1
    4560:	sub	w23, w0, w1
    4564:	cmp	x22, w23, sxtw
    4568:	csel	w23, w22, w23, cc  // cc = lo, ul, last
    456c:	mov	x22, x19
    4570:	ldr	x0, [x20, #8]
    4574:	cbnz	x0, 4380 <GOMP_taskgroup_end+0x160>
    4578:	ldr	x0, [x20, #24]
    457c:	cbnz	x0, 43b0 <GOMP_taskgroup_end+0x190>
    4580:	ldr	x0, [x20, #56]
    4584:	cbz	x0, 431c <GOMP_taskgroup_end+0xfc>
    4588:	ldr	x0, [x25, #8]
    458c:	cbnz	x0, 42ec <GOMP_taskgroup_end+0xcc>
    4590:	ldr	x0, [x25, #24]
    4594:	cbz	x0, 43cc <GOMP_taskgroup_end+0x1ac>
    4598:	mov	w0, #0x1                   	// #1
    459c:	strb	w0, [sp, #127]
    45a0:	ldr	x19, [x25, #24]
    45a4:	sub	x19, x19, #0x70
    45a8:	b	43c0 <GOMP_taskgroup_end+0x1a0>
    45ac:	mov	x2, x24
    45b0:	ldr	x1, [x19]
    45b4:	mov	x0, x19
    45b8:	bl	a20 <gomp_task_run_pre>
    45bc:	and	w0, w0, #0xff
    45c0:	cbz	w0, 43d8 <GOMP_taskgroup_end+0x1b8>
    45c4:	cbz	x22, 443c <GOMP_taskgroup_end+0x21c>
    45c8:	ldr	x0, [x22, #56]
    45cc:	cbnz	x0, 45dc <GOMP_taskgroup_end+0x3bc>
    45d0:	mov	x0, x22
    45d4:	bl	0 <free>
    45d8:	b	443c <GOMP_taskgroup_end+0x21c>
    45dc:	bl	0 <free>
    45e0:	b	45d0 <GOMP_taskgroup_end+0x3b0>
    45e4:	mov	x0, x21
    45e8:	bl	0 <gomp_mutex_unlock_slow>
    45ec:	b	43e8 <GOMP_taskgroup_end+0x1c8>
    45f0:	mov	w1, w23
    45f4:	add	x0, x24, #0x80
    45f8:	bl	0 <gomp_team_barrier_wake>
    45fc:	b	43ec <GOMP_taskgroup_end+0x1cc>
    4600:	bl	0 <free>
    4604:	b	43f8 <GOMP_taskgroup_end+0x1d8>
    4608:	ldr	x0, [x19, #192]
    460c:	bl	0 <gomp_target_task_fn>
    4610:	and	w0, w0, #0xff
    4614:	cbz	w0, 4418 <GOMP_taskgroup_end+0x1f8>
    4618:	str	x25, [x27, #80]
    461c:	mov	w0, #0x1                   	// #1
    4620:	ldaxr	w1, [x21]
    4624:	cbnz	w1, 4630 <GOMP_taskgroup_end+0x410>
    4628:	stxr	w2, w0, [x21]
    462c:	cbnz	w2, 4620 <GOMP_taskgroup_end+0x400>
    4630:	cmp	w1, #0x0
    4634:	b.ne	4664 <GOMP_taskgroup_end+0x444>  // b.any
    4638:	mov	w0, #0x4                   	// #4
    463c:	str	w0, [x19, #200]
    4640:	ldr	x0, [x19, #192]
    4644:	ldr	w1, [x0, #44]
    4648:	cmp	w1, #0x5
    464c:	b.eq	4670 <GOMP_taskgroup_end+0x450>  // b.none
    4650:	mov	w1, #0x4                   	// #4
    4654:	str	w1, [x0, #44]
    4658:	mov	w23, w28
    465c:	mov	x19, #0x0                   	// #0
    4660:	b	456c <GOMP_taskgroup_end+0x34c>
    4664:	mov	x0, x21
    4668:	bl	0 <gomp_mutex_lock_slow>
    466c:	b	4638 <GOMP_taskgroup_end+0x418>
    4670:	mov	x1, x19
    4674:	mov	x0, x24
    4678:	bl	13d0 <gomp_target_task_completion>
    467c:	mov	w23, w28
    4680:	mov	x19, #0x0                   	// #0
    4684:	b	456c <GOMP_taskgroup_end+0x34c>
    4688:	add	x0, x20, #0x34
    468c:	ldr	w1, [x20, #52]
    4690:	tst	x1, #0x7fffffff
    4694:	b.eq	46e4 <GOMP_taskgroup_end+0x4c4>  // b.none
    4698:	sub	w3, w1, #0x1
    469c:	ldaxr	w2, [x0]
    46a0:	cmp	w2, w1
    46a4:	b.ne	46b0 <GOMP_taskgroup_end+0x490>  // b.any
    46a8:	stxr	w4, w3, [x0]
    46ac:	cmp	w4, #0x0
    46b0:	mov	w1, w2
    46b4:	b.ne	4690 <GOMP_taskgroup_end+0x470>  // b.any
    46b8:	mov	w0, #0x1                   	// #1
    46bc:	ldaxr	w1, [x21]
    46c0:	cbnz	w1, 46cc <GOMP_taskgroup_end+0x4ac>
    46c4:	stxr	w2, w0, [x21]
    46c8:	cbnz	w2, 46bc <GOMP_taskgroup_end+0x49c>
    46cc:	cmp	w1, #0x0
    46d0:	mov	w23, w28
    46d4:	b.eq	456c <GOMP_taskgroup_end+0x34c>  // b.none
    46d8:	mov	x0, x21
    46dc:	bl	0 <gomp_mutex_lock_slow>
    46e0:	b	456c <GOMP_taskgroup_end+0x34c>
    46e4:	bl	0 <gomp_sem_wait_slow>
    46e8:	b	46b8 <GOMP_taskgroup_end+0x498>
    46ec:	mov	x0, x21
    46f0:	bl	0 <gomp_mutex_lock_slow>
    46f4:	b	443c <GOMP_taskgroup_end+0x21c>
    46f8:	ldr	x1, [x26, #64]
    46fc:	ldr	x0, [x1, #8]
    4700:	sub	x0, x0, #0x1
    4704:	str	x0, [x1, #8]
    4708:	cbnz	x0, 4480 <GOMP_taskgroup_end+0x260>
    470c:	ldr	x0, [x26, #64]
    4710:	ldrb	w1, [x0, #1]
    4714:	cbz	w1, 4480 <GOMP_taskgroup_end+0x260>
    4718:	strb	wzr, [x0, #1]
    471c:	ldr	x1, [x26, #64]
    4720:	add	x0, x1, #0x10
    4724:	ldr	w1, [x1, #16]
    4728:	add	w2, w1, #0x1
    472c:	and	w2, w2, #0x7fffffff
    4730:	ldxr	w3, [x0]
    4734:	cmp	w3, w1
    4738:	b.ne	4744 <GOMP_taskgroup_end+0x524>  // b.any
    473c:	stlxr	w4, w2, [x0]
    4740:	cmp	w4, #0x0
    4744:	mov	w1, w3
    4748:	b.ne	4728 <GOMP_taskgroup_end+0x508>  // b.any
    474c:	tbz	w3, #31, 4480 <GOMP_taskgroup_end+0x260>
    4750:	bl	0 <gomp_sem_post_slow>
    4754:	b	4480 <GOMP_taskgroup_end+0x260>
    4758:	add	x0, x26, #0x8
    475c:	str	x0, [sp, #104]
    4760:	add	x2, x19, #0x70
    4764:	mov	x1, x0
    4768:	mov	w0, #0x1                   	// #1
    476c:	bl	0 <priority_tree_remove>
    4770:	ldr	x0, [x26, #8]
    4774:	cbnz	x0, 44ac <GOMP_taskgroup_end+0x28c>
    4778:	ldr	x0, [sp, #104]
    477c:	stlr	xzr, [x0]
    4780:	b	47a0 <GOMP_taskgroup_end+0x580>
    4784:	ldr	x0, [x19, #112]
    4788:	cmp	x1, x0
    478c:	b.eq	4798 <GOMP_taskgroup_end+0x578>  // b.none
    4790:	str	x0, [x26, #24]
    4794:	b	44ac <GOMP_taskgroup_end+0x28c>
    4798:	add	x0, x26, #0x18
    479c:	stlr	xzr, [x0]
    47a0:	ldr	x0, [x26, #64]
    47a4:	cbz	x0, 44ac <GOMP_taskgroup_end+0x28c>
    47a8:	ldrb	w1, [x0]
    47ac:	cbz	w1, 44ac <GOMP_taskgroup_end+0x28c>
    47b0:	strb	wzr, [x0]
    47b4:	ldr	x1, [x26, #64]
    47b8:	add	x0, x1, #0x10
    47bc:	ldr	w1, [x1, #16]
    47c0:	add	w2, w1, #0x1
    47c4:	and	w2, w2, #0x7fffffff
    47c8:	ldxr	w3, [x0]
    47cc:	cmp	w3, w1
    47d0:	b.ne	47dc <GOMP_taskgroup_end+0x5bc>  // b.any
    47d4:	stlxr	w4, w2, [x0]
    47d8:	cmp	w4, #0x0
    47dc:	mov	w1, w3
    47e0:	b.ne	47c0 <GOMP_taskgroup_end+0x5a0>  // b.any
    47e4:	tbz	w3, #31, 44ac <GOMP_taskgroup_end+0x28c>
    47e8:	bl	0 <gomp_sem_post_slow>
    47ec:	b	44ac <GOMP_taskgroup_end+0x28c>
    47f0:	add	x0, x19, #0x8
    47f4:	bl	d4 <gomp_clear_parent_in_tree>
    47f8:	str	xzr, [x19, #8]
    47fc:	b	44d8 <GOMP_taskgroup_end+0x2b8>
    4800:	add	x2, x19, #0x80
    4804:	add	x1, x26, #0x8
    4808:	mov	w0, #0x2                   	// #2
    480c:	bl	0 <priority_tree_remove>
    4810:	ldr	x0, [x26, #8]
    4814:	cmp	x0, #0x0
    4818:	cset	w1, eq  // eq = none
    481c:	b	4510 <GOMP_taskgroup_end+0x2f0>
    4820:	ldr	x0, [x19, #128]
    4824:	cmp	x2, x0
    4828:	b.eq	4834 <GOMP_taskgroup_end+0x614>  // b.none
    482c:	str	x0, [x26, #24]
    4830:	b	4510 <GOMP_taskgroup_end+0x2f0>
    4834:	str	xzr, [x26, #24]
    4838:	mov	w1, #0x1                   	// #1
    483c:	b	4510 <GOMP_taskgroup_end+0x2f0>
    4840:	add	x0, x26, #0x38
    4844:	stlr	xzr, [x0]
    4848:	b	452c <GOMP_taskgroup_end+0x30c>
    484c:	strb	wzr, [x26, #48]
    4850:	add	x0, x26, #0x34
    4854:	ldr	w1, [x26, #52]
    4858:	add	w2, w1, #0x1
    485c:	and	w2, w2, #0x7fffffff
    4860:	ldxr	w3, [x0]
    4864:	cmp	w3, w1
    4868:	b.ne	4874 <GOMP_taskgroup_end+0x654>  // b.any
    486c:	stlxr	w4, w2, [x0]
    4870:	cmp	w4, #0x0
    4874:	mov	w1, w3
    4878:	b.ne	4858 <GOMP_taskgroup_end+0x638>  // b.any
    487c:	tbz	w3, #31, 4538 <GOMP_taskgroup_end+0x318>
    4880:	bl	0 <gomp_sem_post_slow>
    4884:	b	4538 <GOMP_taskgroup_end+0x318>
    4888:	ldp	x21, x22, [sp, #32]
    488c:	ldp	x27, x28, [sp, #80]
    4890:	b	4348 <GOMP_taskgroup_end+0x128>
    4894:	ldr	x0, [x19, #48]
    4898:	mov	x22, #0x0                   	// #0
    489c:	cbnz	x0, 4460 <GOMP_taskgroup_end+0x240>
    48a0:	b	44b4 <GOMP_taskgroup_end+0x294>

00000000000048a4 <GOMP_taskgroup_reduction_register>:
    48a4:	stp	x29, x30, [sp, #-112]!
    48a8:	mov	x29, sp
    48ac:	stp	x19, x20, [sp, #16]
    48b0:	stp	x21, x22, [sp, #32]
    48b4:	stp	x23, x24, [sp, #48]
    48b8:	stp	x25, x26, [sp, #64]
    48bc:	str	x27, [sp, #80]
    48c0:	mov	x26, x0
    48c4:	adrp	x0, 0 <gomp_tls_data>
    48c8:	ldr	x0, [x0]
    48cc:	mrs	x1, tpidr_el0
    48d0:	add	x0, x1, x0
    48d4:	ldr	x2, [x0, #16]
    48d8:	cbz	x2, 4950 <GOMP_taskgroup_reduction_register+0xac>
    48dc:	adrp	x0, 0 <gomp_tls_data>
    48e0:	ldr	x0, [x0]
    48e4:	mrs	x1, tpidr_el0
    48e8:	add	x0, x1, x0
    48ec:	ldr	x27, [x0, #80]
    48f0:	ldr	x0, [x27, #40]
    48f4:	ldr	x22, [x0, #40]
    48f8:	mov	x19, x26
    48fc:	mov	x21, #0x0                   	// #0
    4900:	ldr	w23, [x2]
    4904:	ldr	x20, [x19, #8]
    4908:	mul	x20, x23, x20
    490c:	mov	x1, x20
    4910:	ldr	x0, [x19, #16]
    4914:	bl	0 <gomp_aligned_alloc>
    4918:	mov	x24, x0
    491c:	mov	x2, x20
    4920:	mov	w1, #0x0                   	// #0
    4924:	bl	0 <memset>
    4928:	str	x24, [x19, #16]
    492c:	add	x20, x20, x24
    4930:	str	x20, [x19, #48]
    4934:	str	xzr, [x19, #40]
    4938:	ldr	x0, [x19]
    493c:	add	x21, x21, x0
    4940:	ldr	x24, [x19, #32]
    4944:	cbz	x24, 4970 <GOMP_taskgroup_reduction_register+0xcc>
    4948:	mov	x19, x24
    494c:	b	4904 <GOMP_taskgroup_reduction_register+0x60>
    4950:	bl	1884 <gomp_create_artificial_team>
    4954:	bl	4198 <GOMP_taskgroup_start>
    4958:	adrp	x1, 0 <gomp_tls_data>
    495c:	ldr	x1, [x1]
    4960:	mrs	x0, tpidr_el0
    4964:	add	x0, x0, x1
    4968:	ldr	x2, [x0, #16]
    496c:	b	48dc <GOMP_taskgroup_reduction_register+0x38>
    4970:	mov	x25, x22
    4974:	str	x22, [x19, #32]
    4978:	cbz	x22, 4a68 <GOMP_taskgroup_reduction_register+0x1c4>
    497c:	ldr	x19, [x22, #40]
    4980:	cbz	x19, 4a68 <GOMP_taskgroup_reduction_register+0x1c4>
    4984:	ldr	x0, [x19, #8]
    4988:	ldr	x1, [x19, #16]
    498c:	sub	x0, x0, x1
    4990:	add	x0, x0, x21
    4994:	bl	144 <htab_create>
    4998:	str	x0, [sp, #104]
    499c:	ldr	x1, [x19, #8]
    49a0:	ldr	x2, [x19, #16]
    49a4:	sub	x1, x1, x2
    49a8:	str	x1, [x0, #8]
    49ac:	ldr	x21, [x19], #32
    49b0:	add	x21, x19, x21, lsl #3
    49b4:	b	49c4 <GOMP_taskgroup_reduction_register+0x120>
    49b8:	add	x19, x19, #0x8
    49bc:	cmp	x21, x19
    49c0:	b.ls	4a74 <GOMP_taskgroup_reduction_register+0x1d0>  // b.plast
    49c4:	ldr	x20, [x19]
    49c8:	cmp	x20, #0x1
    49cc:	b.ls	49b8 <GOMP_taskgroup_reduction_register+0x114>  // b.plast
    49d0:	ldr	x1, [x20]
    49d4:	eor	x1, x1, x1, lsr #32
    49d8:	ldr	x0, [sp, #104]
    49dc:	bl	1f8 <find_empty_slot_for_expand>
    49e0:	str	x20, [x0]
    49e4:	b	49b8 <GOMP_taskgroup_reduction_register+0x114>
    49e8:	ldr	x0, [x22, #32]
    49ec:	cmp	x25, x0
    49f0:	b.eq	4a3c <GOMP_taskgroup_reduction_register+0x198>  // b.none
    49f4:	mov	x22, x0
    49f8:	ldr	x0, [x22]
    49fc:	cbz	x0, 49e8 <GOMP_taskgroup_reduction_register+0x144>
    4a00:	add	x20, x22, #0x38
    4a04:	mov	x21, x24
    4a08:	str	x22, [x20, #16]
    4a0c:	mov	x19, x20
    4a10:	mov	w2, w23
    4a14:	mov	x1, x19
    4a18:	add	x0, sp, #0x68
    4a1c:	bl	2c8 <htab_find_slot>
    4a20:	str	x19, [x0]
    4a24:	add	x21, x21, #0x1
    4a28:	add	x20, x20, #0x18
    4a2c:	ldr	x1, [x22]
    4a30:	cmp	x21, x1
    4a34:	b.cc	4a08 <GOMP_taskgroup_reduction_register+0x164>  // b.lo, b.ul, b.last
    4a38:	b	49e8 <GOMP_taskgroup_reduction_register+0x144>
    4a3c:	ldr	x0, [sp, #104]
    4a40:	str	x0, [x22, #40]
    4a44:	ldr	x0, [x27, #40]
    4a48:	str	x26, [x0, #40]
    4a4c:	ldp	x19, x20, [sp, #16]
    4a50:	ldp	x21, x22, [sp, #32]
    4a54:	ldp	x23, x24, [sp, #48]
    4a58:	ldp	x25, x26, [sp, #64]
    4a5c:	ldr	x27, [sp, #80]
    4a60:	ldp	x29, x30, [sp], #112
    4a64:	ret
    4a68:	mov	x0, x21
    4a6c:	bl	144 <htab_create>
    4a70:	str	x0, [sp, #104]
    4a74:	mov	x22, x26
    4a78:	mov	w23, #0x1                   	// #1
    4a7c:	b	49f8 <GOMP_taskgroup_reduction_register+0x154>

0000000000004a80 <GOMP_taskloop>:
    4a80:	stp	x29, x30, [sp, #-416]!
    4a84:	mov	x29, sp
    4a88:	stp	x19, x20, [sp, #16]
    4a8c:	stp	x21, x22, [sp, #32]
    4a90:	stp	x23, x24, [sp, #48]
    4a94:	stp	x25, x26, [sp, #64]
    4a98:	stp	x27, x28, [sp, #80]
    4a9c:	str	x0, [x29, #184]
    4aa0:	mov	x22, x1
    4aa4:	str	x2, [x29, #168]
    4aa8:	str	x3, [x29, #160]
    4aac:	mov	x23, x4
    4ab0:	mov	w24, w5
    4ab4:	mov	w21, w7
    4ab8:	ldr	x20, [x29, #416]
    4abc:	ldr	x19, [x29, #424]
    4ac0:	adrp	x0, 0 <gomp_tls_data>
    4ac4:	ldr	x0, [x0]
    4ac8:	mrs	x1, tpidr_el0
    4acc:	add	x0, x1, x0
    4ad0:	ldr	x28, [x0, #16]
    4ad4:	cbz	x28, 4ae0 <GOMP_taskloop+0x60>
    4ad8:	ldr	w0, [x28, #132]
    4adc:	tbnz	w0, #2, 56c8 <GOMP_taskloop+0xc48>
    4ae0:	ldr	x0, [x29, #432]
    4ae4:	cmp	x0, #0x0
    4ae8:	b.le	4b54 <GOMP_taskloop+0xd4>
    4aec:	cmp	x20, x19
    4af0:	b.ge	56c8 <GOMP_taskloop+0xc48>  // b.tcont
    4af4:	sub	x0, x0, #0x1
    4af8:	sub	x19, x19, x20
    4afc:	add	x0, x19, x0
    4b00:	ldr	x1, [x29, #432]
    4b04:	sdiv	x1, x0, x1
    4b08:	str	x1, [x29, #192]
    4b0c:	tbz	w24, #9, 4b94 <GOMP_taskloop+0x114>
    4b10:	udiv	x0, x1, x6
    4b14:	str	x0, [x29, #200]
    4b18:	cmp	x0, #0x1
    4b1c:	b.ls	4bd8 <GOMP_taskloop+0x158>  // b.plast
    4b20:	cmp	x6, x0
    4b24:	b.hi	4b68 <GOMP_taskloop+0xe8>  // b.pmore
    4b28:	mul	x0, x6, x0
    4b2c:	ldr	x2, [x29, #432]
    4b30:	mul	x19, x6, x2
    4b34:	cmp	x1, x0
    4b38:	b.eq	4be4 <GOMP_taskloop+0x164>  // b.none
    4b3c:	add	x19, x19, x2
    4b40:	udiv	x0, x1, x6
    4b44:	msub	x6, x0, x6, x1
    4b48:	sub	x0, x6, #0x1
    4b4c:	str	x0, [x29, #192]
    4b50:	b	4bf8 <GOMP_taskloop+0x178>
    4b54:	cmp	x20, x19
    4b58:	b.le	56c8 <GOMP_taskloop+0xc48>
    4b5c:	ldr	x0, [x29, #432]
    4b60:	add	x0, x0, #0x1
    4b64:	b	4af8 <GOMP_taskloop+0x78>
    4b68:	ldr	x0, [x29, #192]
    4b6c:	ldr	x1, [x29, #200]
    4b70:	udiv	x19, x0, x1
    4b74:	msub	x0, x19, x1, x0
    4b78:	ldr	x1, [x29, #432]
    4b7c:	mul	x19, x19, x1
    4b80:	cbz	x0, 4bf8 <GOMP_taskloop+0x178>
    4b84:	add	x19, x19, x1
    4b88:	sub	x0, x0, #0x1
    4b8c:	str	x0, [x29, #192]
    4b90:	b	4bf8 <GOMP_taskloop+0x178>
    4b94:	cbnz	x6, 4ba4 <GOMP_taskloop+0x124>
    4b98:	mov	x6, #0x1                   	// #1
    4b9c:	cbz	x28, 4ba4 <GOMP_taskloop+0x124>
    4ba0:	ldr	w6, [x28]
    4ba4:	ldr	x0, [x29, #192]
    4ba8:	cmp	x6, x0
    4bac:	b.cs	4bec <GOMP_taskloop+0x16c>  // b.hs, b.nlast
    4bb0:	udiv	x19, x0, x6
    4bb4:	msub	x0, x19, x6, x0
    4bb8:	ldr	x1, [x29, #432]
    4bbc:	mul	x19, x19, x1
    4bc0:	str	x6, [x29, #200]
    4bc4:	cbz	x0, 4bf8 <GOMP_taskloop+0x178>
    4bc8:	add	x19, x19, x1
    4bcc:	sub	x0, x0, #0x1
    4bd0:	str	x0, [x29, #192]
    4bd4:	b	4bf8 <GOMP_taskloop+0x178>
    4bd8:	mov	x0, #0x1                   	// #1
    4bdc:	str	x0, [x29, #200]
    4be0:	b	4bf8 <GOMP_taskloop+0x178>
    4be4:	str	x0, [x29, #192]
    4be8:	b	4bf8 <GOMP_taskloop+0x178>
    4bec:	ldr	x19, [x29, #432]
    4bf0:	ldr	x0, [x29, #192]
    4bf4:	str	x0, [x29, #200]
    4bf8:	and	w0, w24, #0x800
    4bfc:	str	w0, [x29, #176]
    4c00:	tbz	w24, #11, 4cdc <GOMP_taskloop+0x25c>
    4c04:	adrp	x0, 0 <gomp_cancel_var>
    4c08:	ldrb	w0, [x0]
    4c0c:	cbnz	w0, 4c78 <GOMP_taskloop+0x1f8>
    4c10:	adrp	x0, 0 <gomp_max_task_priority_var>
    4c14:	ldr	w7, [x0]
    4c18:	cmp	w7, w21
    4c1c:	csel	w0, w7, w21, le
    4c20:	str	w0, [x29, #180]
    4c24:	tst	x24, #0x400
    4c28:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    4c2c:	b.ne	4cf0 <GOMP_taskloop+0x270>  // b.any
    4c30:	ldr	x0, [x29, #168]
    4c34:	cbnz	x0, 4db0 <GOMP_taskloop+0x330>
    4c38:	mov	x21, #0x0                   	// #0
    4c3c:	ldr	x0, [x29, #200]
    4c40:	cbz	x0, 56c0 <GOMP_taskloop+0xc40>
    4c44:	adrp	x23, 0 <gomp_tls_data>
    4c48:	ldr	x23, [x23]
    4c4c:	mrs	x0, tpidr_el0
    4c50:	add	x23, x0, x23
    4c54:	adrp	x0, 0 <gomp_global_icv>
    4c58:	add	x0, x0, #0x0
    4c5c:	add	x26, x29, #0xd0
    4c60:	mov	w27, #0x1                   	// #1
    4c64:	add	x1, x26, #0x8
    4c68:	str	x1, [x29, #160]
    4c6c:	str	x28, [x29, #168]
    4c70:	mov	x28, x0
    4c74:	b	4fd0 <GOMP_taskloop+0x550>
    4c78:	adrp	x0, 0 <gomp_tls_data>
    4c7c:	ldr	x0, [x0]
    4c80:	mrs	x1, tpidr_el0
    4c84:	add	x0, x1, x0
    4c88:	ldr	x25, [x0, #80]
    4c8c:	cbz	x25, 56e8 <GOMP_taskloop+0xc68>
    4c90:	ldr	x0, [x25, #40]
    4c94:	cbz	x0, 4cb8 <GOMP_taskloop+0x238>
    4c98:	ldrb	w1, [x0, #49]
    4c9c:	cbnz	w1, 56c8 <GOMP_taskloop+0xc48>
    4ca0:	ldrb	w1, [x0, #50]
    4ca4:	cbz	w1, 4cb8 <GOMP_taskloop+0x238>
    4ca8:	ldr	x0, [x0]
    4cac:	cbz	x0, 4cb8 <GOMP_taskloop+0x238>
    4cb0:	ldrb	w0, [x0, #49]
    4cb4:	cbnz	w0, 56c8 <GOMP_taskloop+0xc48>
    4cb8:	adrp	x0, 0 <gomp_max_task_priority_var>
    4cbc:	ldr	w0, [x0]
    4cc0:	cmp	w0, w21
    4cc4:	csel	w0, w0, w21, le
    4cc8:	str	w0, [x29, #180]
    4ccc:	tst	x24, #0x400
    4cd0:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    4cd4:	b.eq	4c30 <GOMP_taskloop+0x1b0>  // b.none
    4cd8:	b	4d08 <GOMP_taskloop+0x288>
    4cdc:	bl	4198 <GOMP_taskgroup_start>
    4ce0:	tbz	w24, #12, 4c10 <GOMP_taskloop+0x190>
    4ce4:	ldr	x0, [x22, #16]
    4ce8:	bl	48a4 <GOMP_taskgroup_reduction_register>
    4cec:	b	4c10 <GOMP_taskloop+0x190>
    4cf0:	adrp	x0, 0 <gomp_tls_data>
    4cf4:	ldr	x0, [x0]
    4cf8:	mrs	x1, tpidr_el0
    4cfc:	add	x0, x1, x0
    4d00:	ldr	x25, [x0, #80]
    4d04:	cbz	x25, 4d10 <GOMP_taskloop+0x290>
    4d08:	ldrb	w0, [x25, #205]
    4d0c:	cbnz	w0, 4c30 <GOMP_taskloop+0x1b0>
    4d10:	ldr	w1, [x28, #1320]
    4d14:	ldr	x0, [x29, #200]
    4d18:	add	x1, x1, x0
    4d1c:	ldr	w0, [x28]
    4d20:	lsl	w0, w0, #6
    4d24:	cmp	x1, x0
    4d28:	b.hi	4c30 <GOMP_taskloop+0x1b0>  // b.pmore
    4d2c:	mov	x0, sp
    4d30:	str	x0, [x29, #104]
    4d34:	ldr	x1, [x29, #200]
    4d38:	lsl	x0, x1, #3
    4d3c:	add	x0, x0, #0xf
    4d40:	and	x0, x0, #0xfffffffffffffff0
    4d44:	sub	sp, sp, x0
    4d48:	mov	x0, sp
    4d4c:	str	x0, [x29, #152]
    4d50:	ldr	x27, [x25, #40]
    4d54:	cbz	x1, 5194 <GOMP_taskloop+0x714>
    4d58:	ubfx	x0, x24, #1, #1
    4d5c:	mov	x2, x0
    4d60:	mov	x24, #0x0                   	// #0
    4d64:	add	x0, x23, #0xcf
    4d68:	str	x0, [x29, #144]
    4d6c:	ldr	x1, [x29, #160]
    4d70:	add	x0, x1, x0
    4d74:	str	x0, [x29, #136]
    4d78:	neg	x0, x23
    4d7c:	str	x0, [x29, #128]
    4d80:	adrp	x26, 0 <gomp_tls_data>
    4d84:	ldr	x26, [x26]
    4d88:	mrs	x0, tpidr_el0
    4d8c:	add	x26, x0, x26
    4d90:	adrp	x0, 0 <gomp_global_icv>
    4d94:	add	x0, x0, #0x0
    4d98:	str	x0, [x29, #120]
    4d9c:	str	x28, [x29, #96]
    4da0:	str	x22, [x29, #112]
    4da4:	mov	w22, w2
    4da8:	ldr	x28, [x29, #168]
    4dac:	b	5110 <GOMP_taskloop+0x690>
    4db0:	mov	x0, sp
    4db4:	str	x0, [x29, #144]
    4db8:	ldr	x3, [x29, #200]
    4dbc:	add	x0, x3, x3, lsl #1
    4dc0:	add	x0, x3, x0, lsl #2
    4dc4:	lsl	x2, x0, #4
    4dc8:	mov	x1, sp
    4dcc:	sub	x0, x1, x0, lsl #4
    4dd0:	mov	sp, x0
    4dd4:	mov	x21, sp
    4dd8:	adrp	x0, 0 <gomp_tls_data>
    4ddc:	ldr	x0, [x0]
    4de0:	mrs	x1, tpidr_el0
    4de4:	add	x0, x1, x0
    4de8:	ldr	x0, [x0, #80]
    4dec:	str	x0, [x29, #152]
    4df0:	ldr	x0, [x29, #160]
    4df4:	add	x0, x0, x23
    4df8:	sub	x0, x0, #0x1
    4dfc:	neg	x25, x23
    4e00:	and	x0, x0, x25
    4e04:	str	x0, [x29, #160]
    4e08:	sub	x23, x23, #0x1
    4e0c:	madd	x0, x0, x3, x23
    4e10:	add	x0, x0, #0xf
    4e14:	and	x0, x0, #0xfffffffffffffff0
    4e18:	sub	sp, sp, x0
    4e1c:	add	x23, sp, x23
    4e20:	and	x25, x23, x25
    4e24:	cbz	x3, 4f88 <GOMP_taskloop+0x508>
    4e28:	add	x1, x21, x2
    4e2c:	mov	x27, x25
    4e30:	adrp	x26, 0 <gomp_tls_data>
    4e34:	ldr	x26, [x26]
    4e38:	mrs	x0, tpidr_el0
    4e3c:	add	x26, x0, x26
    4e40:	adrp	x0, 0 <gomp_global_icv>
    4e44:	add	x0, x0, #0x0
    4e48:	ubfx	x2, x24, #1, #1
    4e4c:	str	x19, [x29, #136]
    4e50:	str	x28, [x29, #128]
    4e54:	str	x25, [x29, #120]
    4e58:	str	x21, [x29, #112]
    4e5c:	ldr	w23, [x29, #180]
    4e60:	ldr	x24, [x29, #168]
    4e64:	str	x20, [x29, #416]
    4e68:	mov	x20, x1
    4e6c:	mov	x25, x0
    4e70:	mov	w28, w2
    4e74:	b	5734 <GOMP_taskloop+0xcb4>
    4e78:	ldr	x19, [x29, #136]
    4e7c:	ldr	x28, [x29, #128]
    4e80:	ldr	x25, [x29, #120]
    4e84:	ldr	x23, [x29, #112]
    4e88:	ldr	x20, [x29, #416]
    4e8c:	mov	x21, #0x0                   	// #0
    4e90:	adrp	x26, 0 <gomp_tls_data>
    4e94:	ldr	x26, [x26]
    4e98:	mrs	x0, tpidr_el0
    4e9c:	add	x26, x0, x26
    4ea0:	add	x28, x28, #0x500
    4ea4:	mov	w27, #0x1                   	// #1
    4ea8:	ldr	x24, [x29, #432]
    4eac:	b	4f04 <GOMP_taskloop+0x484>
    4eb0:	mov	x0, x28
    4eb4:	bl	0 <gomp_mutex_lock_slow>
    4eb8:	b	4f64 <GOMP_taskloop+0x4e4>
    4ebc:	bl	d4 <gomp_clear_parent_in_tree>
    4ec0:	str	xzr, [x22, #8]
    4ec4:	b	4edc <GOMP_taskloop+0x45c>
    4ec8:	stur	xzr, [x0, #-112]
    4ecc:	ldr	x0, [x0]
    4ed0:	ldr	x1, [x22, #24]
    4ed4:	cmp	x0, x1
    4ed8:	b.ne	4ec8 <GOMP_taskloop+0x448>  // b.any
    4edc:	ldxr	w0, [x28]
    4ee0:	stlxr	w1, wzr, [x28]
    4ee4:	cbnz	w1, 4edc <GOMP_taskloop+0x45c>
    4ee8:	tbnz	w0, #31, 4f7c <GOMP_taskloop+0x4fc>
    4eec:	bl	1830 <gomp_end_task>
    4ef0:	add	x21, x21, #0x1
    4ef4:	add	x23, x23, #0xd0
    4ef8:	ldr	x0, [x29, #200]
    4efc:	cmp	x0, x21
    4f00:	b.eq	4f88 <GOMP_taskloop+0x508>  // b.none
    4f04:	mov	x22, x23
    4f08:	str	x23, [x26, #80]
    4f0c:	str	x20, [x25]
    4f10:	add	x20, x20, x19
    4f14:	str	x20, [x25, #8]
    4f18:	sub	x0, x19, x24
    4f1c:	ldr	x1, [x29, #192]
    4f20:	cmp	x1, x21
    4f24:	csel	x19, x0, x19, eq  // eq = none
    4f28:	mov	x0, x25
    4f2c:	ldr	x1, [x29, #184]
    4f30:	blr	x1
    4f34:	ldr	x0, [x29, #160]
    4f38:	add	x25, x25, x0
    4f3c:	ldr	x0, [x23, #8]
    4f40:	cbnz	x0, 4f4c <GOMP_taskloop+0x4cc>
    4f44:	ldr	x0, [x23, #24]
    4f48:	cbz	x0, 4eec <GOMP_taskloop+0x46c>
    4f4c:	ldaxr	w1, [x28]
    4f50:	cbnz	w1, 4f5c <GOMP_taskloop+0x4dc>
    4f54:	stxr	w0, w27, [x28]
    4f58:	cbnz	w0, 4f4c <GOMP_taskloop+0x4cc>
    4f5c:	cmp	w1, #0x0
    4f60:	b.ne	4eb0 <GOMP_taskloop+0x430>  // b.any
    4f64:	add	x0, x23, #0x8
    4f68:	ldr	x1, [x22, #8]
    4f6c:	cbnz	x1, 4ebc <GOMP_taskloop+0x43c>
    4f70:	ldr	x0, [x22, #24]
    4f74:	cbnz	x0, 4ec8 <GOMP_taskloop+0x448>
    4f78:	b	4edc <GOMP_taskloop+0x45c>
    4f7c:	mov	x0, x28
    4f80:	bl	0 <gomp_mutex_unlock_slow>
    4f84:	b	4eec <GOMP_taskloop+0x46c>
    4f88:	ldr	x0, [x29, #144]
    4f8c:	mov	sp, x0
    4f90:	b	56c0 <GOMP_taskloop+0xc40>
    4f94:	mov	x0, x25
    4f98:	bl	0 <gomp_mutex_lock_slow>
    4f9c:	b	5080 <GOMP_taskloop+0x600>
    4fa0:	ldr	x0, [x29, #160]
    4fa4:	bl	d4 <gomp_clear_parent_in_tree>
    4fa8:	str	xzr, [x29, #216]
    4fac:	ldxr	w0, [x25]
    4fb0:	stlxr	w1, wzr, [x25]
    4fb4:	cbnz	w1, 4fac <GOMP_taskloop+0x52c>
    4fb8:	tbnz	w0, #31, 50a8 <GOMP_taskloop+0x628>
    4fbc:	bl	1830 <gomp_end_task>
    4fc0:	add	x21, x21, #0x1
    4fc4:	ldr	x0, [x29, #200]
    4fc8:	cmp	x0, x21
    4fcc:	b.eq	56c0 <GOMP_taskloop+0xc40>  // b.none
    4fd0:	ldr	x1, [x23, #80]
    4fd4:	add	x2, x1, #0x90
    4fd8:	cmp	x1, #0x0
    4fdc:	csel	x2, x28, x2, eq  // eq = none
    4fe0:	mov	x0, x26
    4fe4:	bl	17d8 <gomp_init_task>
    4fe8:	ldr	w0, [x29, #180]
    4fec:	str	w0, [x29, #296]
    4ff0:	str	w27, [x29, #408]
    4ff4:	ldr	x0, [x23, #80]
    4ff8:	cbz	x0, 578c <GOMP_taskloop+0xd0c>
    4ffc:	ldrb	w2, [x0, #205]
    5000:	ubfx	x1, x24, #1, #1
    5004:	cmp	w2, #0x0
    5008:	csinc	w1, w1, wzr, eq  // eq = none
    500c:	strb	w1, [x29, #413]
    5010:	ldrb	w1, [x0, #204]
    5014:	strb	w1, [x29, #412]
    5018:	ldr	x0, [x0, #40]
    501c:	str	x0, [x29, #248]
    5020:	str	x26, [x23, #80]
    5024:	str	x20, [x22]
    5028:	add	x20, x20, x19
    502c:	str	x20, [x22, #8]
    5030:	ldr	x0, [x29, #432]
    5034:	sub	x0, x19, x0
    5038:	ldr	x1, [x29, #192]
    503c:	cmp	x1, x21
    5040:	csel	x19, x0, x19, eq  // eq = none
    5044:	mov	x0, x22
    5048:	ldr	x1, [x29, #184]
    504c:	blr	x1
    5050:	ldr	x0, [x29, #216]
    5054:	cbnz	x0, 5060 <GOMP_taskloop+0x5e0>
    5058:	ldr	x0, [x29, #232]
    505c:	cbz	x0, 4fbc <GOMP_taskloop+0x53c>
    5060:	ldr	x0, [x29, #168]
    5064:	add	x25, x0, #0x500
    5068:	ldaxr	w1, [x25]
    506c:	cbnz	w1, 5078 <GOMP_taskloop+0x5f8>
    5070:	stxr	w0, w27, [x25]
    5074:	cbnz	w0, 5068 <GOMP_taskloop+0x5e8>
    5078:	cmp	w1, #0x0
    507c:	b.ne	4f94 <GOMP_taskloop+0x514>  // b.any
    5080:	ldr	x1, [x29, #216]
    5084:	cbnz	x1, 4fa0 <GOMP_taskloop+0x520>
    5088:	ldr	x0, [x29, #232]
    508c:	cbz	x0, 4fac <GOMP_taskloop+0x52c>
    5090:	stur	xzr, [x0, #-112]
    5094:	ldr	x0, [x0]
    5098:	ldr	x1, [x29, #232]
    509c:	cmp	x0, x1
    50a0:	b.ne	5090 <GOMP_taskloop+0x610>  // b.any
    50a4:	b	4fac <GOMP_taskloop+0x52c>
    50a8:	mov	x0, x25
    50ac:	bl	0 <gomp_mutex_unlock_slow>
    50b0:	b	4fbc <GOMP_taskloop+0x53c>
    50b4:	ldr	x2, [x29, #160]
    50b8:	ldr	x1, [x29, #112]
    50bc:	mov	x0, x23
    50c0:	bl	0 <memcpy>
    50c4:	str	x20, [x23]
    50c8:	add	x20, x20, x19
    50cc:	str	x20, [x23, #8]
    50d0:	ldr	x0, [x29, #432]
    50d4:	sub	x0, x19, x0
    50d8:	ldr	x1, [x29, #192]
    50dc:	cmp	x1, x24
    50e0:	csel	x19, x0, x19, eq  // eq = none
    50e4:	str	x25, [x26, #80]
    50e8:	mov	w0, #0x2                   	// #2
    50ec:	str	w0, [x21, #200]
    50f0:	ldr	x0, [x29, #184]
    50f4:	str	x0, [x21, #184]
    50f8:	str	x23, [x21, #192]
    50fc:	strb	w22, [x21, #205]
    5100:	add	x24, x24, #0x1
    5104:	ldr	x0, [x29, #200]
    5108:	cmp	x0, x24
    510c:	b.eq	5190 <GOMP_taskloop+0x710>  // b.none
    5110:	ldr	x0, [x29, #136]
    5114:	bl	0 <gomp_malloc>
    5118:	mov	x21, x0
    511c:	ldr	x0, [x29, #152]
    5120:	str	x21, [x0, x24, lsl #3]
    5124:	ldr	x0, [x29, #144]
    5128:	add	x23, x21, x0
    512c:	ldr	x0, [x29, #128]
    5130:	and	x23, x23, x0
    5134:	ldr	x0, [x26, #80]
    5138:	add	x2, x0, #0x90
    513c:	cmp	x0, #0x0
    5140:	ldr	x0, [x29, #120]
    5144:	csel	x2, x0, x2, eq  // eq = none
    5148:	mov	x1, x25
    514c:	mov	x0, x21
    5150:	bl	17d8 <gomp_init_task>
    5154:	ldr	w0, [x29, #180]
    5158:	str	w0, [x21, #88]
    515c:	mov	w0, #0x1                   	// #1
    5160:	str	w0, [x21, #200]
    5164:	ldrb	w0, [x25, #204]
    5168:	strb	w0, [x21, #204]
    516c:	str	x27, [x21, #40]
    5170:	str	x21, [x26, #80]
    5174:	cbz	x28, 50b4 <GOMP_taskloop+0x634>
    5178:	ldr	x1, [x29, #112]
    517c:	mov	x0, x23
    5180:	blr	x28
    5184:	mov	w0, #0x1                   	// #1
    5188:	strb	w0, [x21, #206]
    518c:	b	50c4 <GOMP_taskloop+0x644>
    5190:	ldr	x28, [x29, #96]
    5194:	add	x24, x28, #0x500
    5198:	mov	w0, #0x1                   	// #1
    519c:	ldaxr	w1, [x24]
    51a0:	cbnz	w1, 51ac <GOMP_taskloop+0x72c>
    51a4:	stxr	w2, w0, [x24]
    51a8:	cbnz	w2, 519c <GOMP_taskloop+0x71c>
    51ac:	cmp	w1, #0x0
    51b0:	b.ne	5204 <GOMP_taskloop+0x784>  // b.any
    51b4:	ldr	x0, [x29, #168]
    51b8:	cmp	x0, #0x0
    51bc:	cset	w1, eq  // eq = none
    51c0:	adrp	x0, 0 <gomp_cancel_var>
    51c4:	ldrb	w0, [x0]
    51c8:	tst	w1, w0
    51cc:	b.ne	5210 <GOMP_taskloop+0x790>  // b.any
    51d0:	cbz	x27, 51e4 <GOMP_taskloop+0x764>
    51d4:	ldr	x0, [x27, #56]
    51d8:	ldr	x1, [x29, #200]
    51dc:	add	x0, x0, x1
    51e0:	str	x0, [x27, #56]
    51e4:	mov	x20, #0x0                   	// #0
    51e8:	mov	x26, #0x28                  	// #40
    51ec:	ldr	x0, [x29, #200]
    51f0:	cbz	x0, 5630 <GOMP_taskloop+0xbb0>
    51f4:	str	x24, [x29, #184]
    51f8:	ldr	w23, [x29, #180]
    51fc:	ldr	x24, [x29, #152]
    5200:	b	54c4 <GOMP_taskloop+0xa44>
    5204:	mov	x0, x24
    5208:	bl	0 <gomp_mutex_lock_slow>
    520c:	b	51b4 <GOMP_taskloop+0x734>
    5210:	ldr	w0, [x28, #132]
    5214:	tbnz	w0, #2, 523c <GOMP_taskloop+0x7bc>
    5218:	cbz	x27, 51e4 <GOMP_taskloop+0x764>
    521c:	ldrb	w0, [x27, #49]
    5220:	cbnz	w0, 523c <GOMP_taskloop+0x7bc>
    5224:	ldrb	w0, [x27, #50]
    5228:	cbz	w0, 51d4 <GOMP_taskloop+0x754>
    522c:	ldr	x0, [x27]
    5230:	cbz	x0, 51d4 <GOMP_taskloop+0x754>
    5234:	ldrb	w0, [x0, #49]
    5238:	cbz	w0, 51d4 <GOMP_taskloop+0x754>
    523c:	mov	x0, x24
    5240:	bl	9f8 <gomp_mutex_unlock>
    5244:	ldr	x0, [x29, #200]
    5248:	cbz	x0, 5278 <GOMP_taskloop+0x7f8>
    524c:	mov	x19, #0x0                   	// #0
    5250:	ldr	x0, [x29, #152]
    5254:	ldr	x20, [x0, x19, lsl #3]
    5258:	ldr	x0, [x20, #56]
    525c:	cbnz	x0, 528c <GOMP_taskloop+0x80c>
    5260:	mov	x0, x20
    5264:	bl	0 <free>
    5268:	add	x19, x19, #0x1
    526c:	ldr	x0, [x29, #200]
    5270:	cmp	x0, x19
    5274:	b.ne	5250 <GOMP_taskloop+0x7d0>  // b.any
    5278:	ldr	w0, [x29, #176]
    527c:	cbz	w0, 5294 <GOMP_taskloop+0x814>
    5280:	ldr	x0, [x29, #104]
    5284:	mov	sp, x0
    5288:	b	56c8 <GOMP_taskloop+0xc48>
    528c:	bl	0 <free>
    5290:	b	5260 <GOMP_taskloop+0x7e0>
    5294:	bl	4220 <GOMP_taskgroup_end>
    5298:	b	5280 <GOMP_taskloop+0x800>
    529c:	add	x1, x25, #0x8
    52a0:	str	x1, [x29, #192]
    52a4:	cbz	x0, 52ec <GOMP_taskloop+0x86c>
    52a8:	str	w23, [x29, #208]
    52ac:	add	x1, x29, #0xd0
    52b0:	ldr	x0, [x29, #192]
    52b4:	bl	0 <prio_splay_tree_lookup>
    52b8:	cbz	x0, 5330 <GOMP_taskloop+0x8b0>
    52bc:	add	x1, x19, #0x70
    52c0:	ldr	x2, [x0, #8]
    52c4:	cbz	x2, 5364 <GOMP_taskloop+0x8e4>
    52c8:	str	x2, [x19, #112]
    52cc:	ldr	x2, [x2, #8]
    52d0:	str	x2, [x19, #120]
    52d4:	str	x1, [x0, #8]
    52d8:	ldr	x0, [x19, #112]
    52dc:	str	x1, [x0, #8]
    52e0:	ldr	x0, [x19, #120]
    52e4:	str	x1, [x0]
    52e8:	b	550c <GOMP_taskloop+0xa8c>
    52ec:	ldr	x0, [x25, #24]
    52f0:	cbz	x0, 5330 <GOMP_taskloop+0x8b0>
    52f4:	mov	x0, x26
    52f8:	bl	0 <gomp_malloc>
    52fc:	mov	x1, x0
    5300:	str	xzr, [x0, #24]
    5304:	str	xzr, [x0, #32]
    5308:	str	wzr, [x0]
    530c:	ldr	x0, [x25, #24]
    5310:	str	x0, [x1, #8]
    5314:	ldr	x0, [x25, #32]
    5318:	str	x0, [x1, #16]
    531c:	ldr	x0, [x29, #192]
    5320:	bl	0 <prio_splay_tree_insert>
    5324:	str	xzr, [x25, #24]
    5328:	ldr	x0, [x25, #8]
    532c:	cbnz	x0, 52a8 <GOMP_taskloop+0x828>
    5330:	mov	x0, x26
    5334:	bl	0 <gomp_malloc>
    5338:	mov	x22, x0
    533c:	str	xzr, [x0, #24]
    5340:	str	xzr, [x0, #32]
    5344:	str	w23, [x0]
    5348:	str	xzr, [x0, #8]
    534c:	str	xzr, [x0, #16]
    5350:	mov	x1, x0
    5354:	ldr	x0, [x29, #192]
    5358:	bl	0 <prio_splay_tree_insert>
    535c:	mov	x0, x22
    5360:	b	52bc <GOMP_taskloop+0x83c>
    5364:	str	x1, [x19, #112]
    5368:	str	x1, [x19, #120]
    536c:	str	x1, [x0, #8]
    5370:	b	550c <GOMP_taskloop+0xa8c>
    5374:	str	x0, [x19, #112]
    5378:	str	x0, [x19, #120]
    537c:	str	x0, [x25, #24]
    5380:	b	550c <GOMP_taskloop+0xa8c>
    5384:	add	x1, x27, #0x8
    5388:	str	x1, [x29, #192]
    538c:	cbz	x0, 53d4 <GOMP_taskloop+0x954>
    5390:	str	w23, [x29, #208]
    5394:	add	x1, x29, #0xd0
    5398:	ldr	x0, [x29, #192]
    539c:	bl	0 <prio_splay_tree_lookup>
    53a0:	cbz	x0, 5418 <GOMP_taskloop+0x998>
    53a4:	add	x1, x19, #0x80
    53a8:	ldr	x2, [x0, #8]
    53ac:	cbz	x2, 544c <GOMP_taskloop+0x9cc>
    53b0:	str	x2, [x19, #128]
    53b4:	ldr	x2, [x2, #8]
    53b8:	str	x2, [x19, #136]
    53bc:	str	x1, [x0, #8]
    53c0:	ldr	x0, [x19, #128]
    53c4:	str	x1, [x0, #8]
    53c8:	ldr	x0, [x19, #136]
    53cc:	str	x1, [x0]
    53d0:	b	5468 <GOMP_taskloop+0x9e8>
    53d4:	ldr	x0, [x27, #24]
    53d8:	cbz	x0, 5418 <GOMP_taskloop+0x998>
    53dc:	mov	x0, x26
    53e0:	bl	0 <gomp_malloc>
    53e4:	mov	x1, x0
    53e8:	str	xzr, [x0, #24]
    53ec:	str	xzr, [x0, #32]
    53f0:	str	wzr, [x0]
    53f4:	ldr	x0, [x27, #24]
    53f8:	str	x0, [x1, #8]
    53fc:	ldr	x0, [x27, #32]
    5400:	str	x0, [x1, #16]
    5404:	ldr	x0, [x29, #192]
    5408:	bl	0 <prio_splay_tree_insert>
    540c:	str	xzr, [x27, #24]
    5410:	ldr	x0, [x27, #8]
    5414:	cbnz	x0, 5390 <GOMP_taskloop+0x910>
    5418:	mov	x0, x26
    541c:	bl	0 <gomp_malloc>
    5420:	mov	x22, x0
    5424:	str	xzr, [x0, #24]
    5428:	str	xzr, [x0, #32]
    542c:	str	w23, [x0]
    5430:	str	xzr, [x0, #8]
    5434:	str	xzr, [x0, #16]
    5438:	mov	x1, x0
    543c:	ldr	x0, [x29, #192]
    5440:	bl	0 <prio_splay_tree_insert>
    5444:	mov	x0, x22
    5448:	b	53a4 <GOMP_taskloop+0x924>
    544c:	str	x1, [x19, #128]
    5450:	str	x1, [x19, #136]
    5454:	str	x1, [x0, #8]
    5458:	b	5468 <GOMP_taskloop+0x9e8>
    545c:	str	x0, [x19, #128]
    5460:	str	x0, [x19, #136]
    5464:	str	x0, [x27, #24]
    5468:	ldr	x0, [x28, #1288]
    546c:	cmp	x0, #0x0
    5470:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    5474:	b.ne	5550 <GOMP_taskloop+0xad0>  // b.any
    5478:	add	x1, x19, #0x60
    547c:	ldr	x0, [x28, #1304]
    5480:	cbz	x0, 561c <GOMP_taskloop+0xb9c>
    5484:	str	x0, [x19, #96]
    5488:	ldr	x2, [x0, #8]
    548c:	str	x2, [x19, #104]
    5490:	str	x1, [x0, #8]
    5494:	ldr	x0, [x19, #104]
    5498:	str	x1, [x0]
    549c:	ldr	w0, [x28, #1320]
    54a0:	add	w0, w0, #0x1
    54a4:	str	w0, [x28, #1320]
    54a8:	ldr	w0, [x28, #1324]
    54ac:	add	w0, w0, #0x1
    54b0:	str	w0, [x28, #1324]
    54b4:	add	x20, x20, #0x1
    54b8:	ldr	x0, [x29, #200]
    54bc:	cmp	x0, x20
    54c0:	b.eq	562c <GOMP_taskloop+0xbac>  // b.none
    54c4:	ldr	x19, [x24, x20, lsl #3]
    54c8:	ldr	x0, [x25, #8]
    54cc:	cmp	w23, #0x0
    54d0:	cset	w21, gt
    54d4:	cmp	x0, #0x0
    54d8:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    54dc:	b.ne	529c <GOMP_taskloop+0x81c>  // b.any
    54e0:	add	x0, x19, #0x70
    54e4:	ldr	x1, [x25, #24]
    54e8:	cbz	x1, 5374 <GOMP_taskloop+0x8f4>
    54ec:	str	x1, [x19, #112]
    54f0:	ldr	x1, [x1, #8]
    54f4:	str	x1, [x19, #120]
    54f8:	str	x0, [x25, #24]
    54fc:	ldr	x1, [x19, #112]
    5500:	str	x0, [x1, #8]
    5504:	ldr	x1, [x19, #120]
    5508:	str	x0, [x1]
    550c:	cbz	x27, 5468 <GOMP_taskloop+0x9e8>
    5510:	ldr	x0, [x27, #8]
    5514:	cmp	x0, #0x0
    5518:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    551c:	b.ne	5384 <GOMP_taskloop+0x904>  // b.any
    5520:	add	x0, x19, #0x80
    5524:	ldr	x1, [x27, #24]
    5528:	cbz	x1, 545c <GOMP_taskloop+0x9dc>
    552c:	str	x1, [x19, #128]
    5530:	ldr	x1, [x1, #8]
    5534:	str	x1, [x19, #136]
    5538:	str	x0, [x27, #24]
    553c:	ldr	x1, [x19, #128]
    5540:	str	x0, [x1, #8]
    5544:	ldr	x1, [x19, #136]
    5548:	str	x0, [x1]
    554c:	b	5468 <GOMP_taskloop+0x9e8>
    5550:	add	x22, x28, #0x508
    5554:	cbz	x0, 5594 <GOMP_taskloop+0xb14>
    5558:	str	w23, [x29, #208]
    555c:	add	x1, x29, #0xd0
    5560:	mov	x0, x22
    5564:	bl	0 <prio_splay_tree_lookup>
    5568:	cbz	x0, 55d8 <GOMP_taskloop+0xb58>
    556c:	add	x2, x19, #0x60
    5570:	ldr	x1, [x0, #8]
    5574:	cbz	x1, 560c <GOMP_taskloop+0xb8c>
    5578:	str	x1, [x19, #96]
    557c:	ldr	x0, [x1, #8]
    5580:	str	x0, [x19, #104]
    5584:	str	x2, [x1, #8]
    5588:	ldr	x0, [x19, #104]
    558c:	str	x2, [x0]
    5590:	b	549c <GOMP_taskloop+0xa1c>
    5594:	ldr	x0, [x28, #1304]
    5598:	cbz	x0, 55d8 <GOMP_taskloop+0xb58>
    559c:	mov	x0, x26
    55a0:	bl	0 <gomp_malloc>
    55a4:	mov	x1, x0
    55a8:	str	xzr, [x0, #24]
    55ac:	str	xzr, [x0, #32]
    55b0:	str	wzr, [x0]
    55b4:	ldr	x0, [x22, #16]
    55b8:	str	x0, [x1, #8]
    55bc:	ldr	x0, [x22, #24]
    55c0:	str	x0, [x1, #16]
    55c4:	mov	x0, x22
    55c8:	bl	0 <prio_splay_tree_insert>
    55cc:	str	xzr, [x22, #16]
    55d0:	ldr	x0, [x28, #1288]
    55d4:	cbnz	x0, 5558 <GOMP_taskloop+0xad8>
    55d8:	mov	x0, x26
    55dc:	bl	0 <gomp_malloc>
    55e0:	mov	x21, x0
    55e4:	str	xzr, [x0, #24]
    55e8:	str	xzr, [x0, #32]
    55ec:	str	w23, [x0]
    55f0:	str	xzr, [x0, #8]
    55f4:	str	xzr, [x0, #16]
    55f8:	mov	x1, x0
    55fc:	mov	x0, x22
    5600:	bl	0 <prio_splay_tree_insert>
    5604:	mov	x0, x21
    5608:	b	556c <GOMP_taskloop+0xaec>
    560c:	str	x2, [x19, #96]
    5610:	str	x2, [x19, #104]
    5614:	str	x2, [x0, #8]
    5618:	b	549c <GOMP_taskloop+0xa1c>
    561c:	str	x1, [x19, #96]
    5620:	str	x1, [x19, #104]
    5624:	str	x1, [x28, #1304]
    5628:	b	549c <GOMP_taskloop+0xa1c>
    562c:	ldr	x24, [x29, #184]
    5630:	ldr	w0, [x28, #132]
    5634:	orr	w0, w0, #0x1
    5638:	str	w0, [x28, #132]
    563c:	ldr	w2, [x28, #1328]
    5640:	ldrb	w0, [x25, #204]
    5644:	eor	w0, w0, #0x1
    5648:	ldr	w1, [x28]
    564c:	add	w3, w2, w0
    5650:	cmp	w3, w1
    5654:	b.cs	56a8 <GOMP_taskloop+0xc28>  // b.hs, b.nlast
    5658:	sub	w1, w1, w2
    565c:	sub	w19, w1, w0
    5660:	ldr	x0, [x29, #200]
    5664:	cmp	x0, w19, sxtw
    5668:	csel	w19, w0, w19, cc  // cc = lo, ul, last
    566c:	ldxr	w0, [x24]
    5670:	stlxr	w1, wzr, [x24]
    5674:	cbnz	w1, 566c <GOMP_taskloop+0xbec>
    5678:	tbnz	w0, #31, 5694 <GOMP_taskloop+0xc14>
    567c:	cbz	w19, 56b8 <GOMP_taskloop+0xc38>
    5680:	mov	w1, w19
    5684:	add	x0, x28, #0x80
    5688:	bl	0 <gomp_team_barrier_wake>
    568c:	b	56b8 <GOMP_taskloop+0xc38>
    5690:	mov	w19, #0x0                   	// #0
    5694:	mov	x0, x24
    5698:	bl	0 <gomp_mutex_unlock_slow>
    569c:	b	567c <GOMP_taskloop+0xbfc>
    56a0:	bl	4220 <GOMP_taskgroup_end>
    56a4:	b	56c8 <GOMP_taskloop+0xc48>
    56a8:	ldxr	w0, [x24]
    56ac:	stlxr	w1, wzr, [x24]
    56b0:	cbnz	w1, 56a8 <GOMP_taskloop+0xc28>
    56b4:	tbnz	w0, #31, 5690 <GOMP_taskloop+0xc10>
    56b8:	ldr	x0, [x29, #104]
    56bc:	mov	sp, x0
    56c0:	ldr	w0, [x29, #176]
    56c4:	cbz	w0, 56a0 <GOMP_taskloop+0xc20>
    56c8:	mov	sp, x29
    56cc:	ldp	x19, x20, [sp, #16]
    56d0:	ldp	x21, x22, [sp, #32]
    56d4:	ldp	x23, x24, [sp, #48]
    56d8:	ldp	x25, x26, [sp, #64]
    56dc:	ldp	x27, x28, [sp, #80]
    56e0:	ldp	x29, x30, [sp], #416
    56e4:	ret
    56e8:	adrp	x0, 0 <gomp_max_task_priority_var>
    56ec:	ldr	w0, [x0]
    56f0:	cmp	w0, w21
    56f4:	csel	w0, w0, w21, le
    56f8:	str	w0, [x29, #180]
    56fc:	tst	x24, #0x400
    5700:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    5704:	b.eq	4c30 <GOMP_taskloop+0x1b0>  // b.none
    5708:	b	4d10 <GOMP_taskloop+0x290>
    570c:	strb	w28, [x21, #205]
    5710:	str	x19, [x26, #80]
    5714:	mov	x1, x22
    5718:	mov	x0, x27
    571c:	blr	x24
    5720:	ldr	x0, [x29, #160]
    5724:	add	x27, x27, x0
    5728:	add	x21, x21, #0xd0
    572c:	cmp	x20, x21
    5730:	b.eq	4e78 <GOMP_taskloop+0x3f8>  // b.none
    5734:	mov	x19, x21
    5738:	ldr	x0, [x26, #80]
    573c:	add	x2, x0, #0x90
    5740:	cmp	x0, #0x0
    5744:	csel	x2, x25, x2, eq  // eq = none
    5748:	ldr	x1, [x29, #152]
    574c:	mov	x0, x21
    5750:	bl	17d8 <gomp_init_task>
    5754:	str	w23, [x21, #88]
    5758:	mov	w0, #0x1                   	// #1
    575c:	str	w0, [x21, #200]
    5760:	ldr	x0, [x26, #80]
    5764:	cbz	x0, 570c <GOMP_taskloop+0xc8c>
    5768:	ldrb	w1, [x0, #205]
    576c:	cmp	w1, #0x0
    5770:	csinc	w1, w28, wzr, eq  // eq = none
    5774:	strb	w1, [x21, #205]
    5778:	ldrb	w1, [x0, #204]
    577c:	strb	w1, [x21, #204]
    5780:	ldr	x0, [x0, #40]
    5784:	str	x0, [x21, #40]
    5788:	b	5710 <GOMP_taskloop+0xc90>
    578c:	ubfx	x0, x24, #1, #1
    5790:	strb	w0, [x29, #413]
    5794:	b	5020 <GOMP_taskloop+0x5a0>

0000000000005798 <GOMP_taskloop_ull>:
    5798:	stp	x29, x30, [sp, #-432]!
    579c:	mov	x29, sp
    57a0:	stp	x19, x20, [sp, #16]
    57a4:	stp	x21, x22, [sp, #32]
    57a8:	stp	x23, x24, [sp, #48]
    57ac:	stp	x25, x26, [sp, #64]
    57b0:	stp	x27, x28, [sp, #80]
    57b4:	str	x0, [x29, #200]
    57b8:	mov	x22, x1
    57bc:	str	x2, [x29, #184]
    57c0:	str	x3, [x29, #176]
    57c4:	mov	x23, x4
    57c8:	mov	w24, w5
    57cc:	mov	w21, w7
    57d0:	ldr	x20, [x29, #432]
    57d4:	ldr	x19, [x29, #440]
    57d8:	ldr	x0, [x29, #448]
    57dc:	sub	x2, x0, #0x1
    57e0:	adrp	x0, 0 <gomp_tls_data>
    57e4:	ldr	x0, [x0]
    57e8:	mrs	x1, tpidr_el0
    57ec:	add	x0, x1, x0
    57f0:	ldr	x28, [x0, #16]
    57f4:	cbz	x28, 5800 <GOMP_taskloop_ull+0x68>
    57f8:	ldr	w0, [x28, #132]
    57fc:	tbnz	w0, #2, 640c <GOMP_taskloop_ull+0xc74>
    5800:	tbz	w24, #8, 587c <GOMP_taskloop_ull+0xe4>
    5804:	cmp	x20, x19
    5808:	b.cs	640c <GOMP_taskloop_ull+0xc74>  // b.hs, b.nlast
    580c:	sub	x0, x19, x20
    5810:	add	x2, x0, x2
    5814:	ldr	x0, [x29, #448]
    5818:	udiv	x0, x2, x0
    581c:	str	x0, [x29, #208]
    5820:	tbz	w24, #9, 58e4 <GOMP_taskloop_ull+0x14c>
    5824:	ldr	x0, [x29, #208]
    5828:	udiv	x0, x0, x6
    582c:	str	x0, [x29, #216]
    5830:	cmp	x0, #0x1
    5834:	b.ls	58a8 <GOMP_taskloop_ull+0x110>  // b.plast
    5838:	ldr	x0, [x29, #216]
    583c:	cmp	x6, x0
    5840:	ccmn	x0, #0x1, #0x4, ls  // ls = plast
    5844:	b.eq	58b8 <GOMP_taskloop_ull+0x120>  // b.none
    5848:	mul	x0, x6, x0
    584c:	ldr	x1, [x29, #448]
    5850:	mul	x19, x1, x6
    5854:	ldr	x1, [x29, #208]
    5858:	cmp	x1, x0
    585c:	b.eq	5928 <GOMP_taskloop_ull+0x190>  // b.none
    5860:	ldr	x0, [x29, #448]
    5864:	add	x19, x19, x0
    5868:	udiv	x0, x1, x6
    586c:	msub	x6, x0, x6, x1
    5870:	sub	x0, x6, #0x1
    5874:	str	x0, [x29, #208]
    5878:	b	593c <GOMP_taskloop_ull+0x1a4>
    587c:	cmp	x20, x19
    5880:	b.ls	640c <GOMP_taskloop_ull+0xc74>  // b.plast
    5884:	sub	x0, x20, x19
    5888:	ldr	x1, [x29, #448]
    588c:	mvn	x1, x1
    5890:	add	x0, x0, x1
    5894:	ldr	x1, [x29, #448]
    5898:	neg	x1, x1
    589c:	udiv	x0, x0, x1
    58a0:	str	x0, [x29, #208]
    58a4:	b	5820 <GOMP_taskloop_ull+0x88>
    58a8:	sub	x19, x19, x20
    58ac:	mov	x0, #0x1                   	// #1
    58b0:	str	x0, [x29, #216]
    58b4:	b	593c <GOMP_taskloop_ull+0x1a4>
    58b8:	ldr	x0, [x29, #208]
    58bc:	ldr	x1, [x29, #216]
    58c0:	udiv	x19, x0, x1
    58c4:	msub	x0, x19, x1, x0
    58c8:	ldr	x1, [x29, #448]
    58cc:	mul	x19, x19, x1
    58d0:	cbz	x0, 593c <GOMP_taskloop_ull+0x1a4>
    58d4:	add	x19, x19, x1
    58d8:	sub	x0, x0, #0x1
    58dc:	str	x0, [x29, #208]
    58e0:	b	593c <GOMP_taskloop_ull+0x1a4>
    58e4:	cbnz	x6, 58f4 <GOMP_taskloop_ull+0x15c>
    58e8:	mov	x6, #0x1                   	// #1
    58ec:	cbz	x28, 58f4 <GOMP_taskloop_ull+0x15c>
    58f0:	ldr	w6, [x28]
    58f4:	ldr	x0, [x29, #208]
    58f8:	cmp	x0, x6
    58fc:	b.ls	5930 <GOMP_taskloop_ull+0x198>  // b.plast
    5900:	udiv	x19, x0, x6
    5904:	msub	x0, x19, x6, x0
    5908:	ldr	x1, [x29, #448]
    590c:	mul	x19, x19, x1
    5910:	str	x6, [x29, #216]
    5914:	cbz	x0, 593c <GOMP_taskloop_ull+0x1a4>
    5918:	add	x19, x19, x1
    591c:	sub	x0, x0, #0x1
    5920:	str	x0, [x29, #208]
    5924:	b	593c <GOMP_taskloop_ull+0x1a4>
    5928:	str	x0, [x29, #208]
    592c:	b	593c <GOMP_taskloop_ull+0x1a4>
    5930:	ldr	x19, [x29, #448]
    5934:	ldr	x0, [x29, #208]
    5938:	str	x0, [x29, #216]
    593c:	and	w0, w24, #0x800
    5940:	str	w0, [x29, #192]
    5944:	tbz	w24, #11, 5a20 <GOMP_taskloop_ull+0x288>
    5948:	adrp	x0, 0 <gomp_cancel_var>
    594c:	ldrb	w0, [x0]
    5950:	cbnz	w0, 59bc <GOMP_taskloop_ull+0x224>
    5954:	adrp	x0, 0 <gomp_max_task_priority_var>
    5958:	ldr	w7, [x0]
    595c:	cmp	w7, w21
    5960:	csel	w0, w7, w21, le
    5964:	str	w0, [x29, #196]
    5968:	tst	x24, #0x400
    596c:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    5970:	b.ne	5a34 <GOMP_taskloop_ull+0x29c>  // b.any
    5974:	ldr	x0, [x29, #184]
    5978:	cbnz	x0, 5af4 <GOMP_taskloop_ull+0x35c>
    597c:	mov	x21, #0x0                   	// #0
    5980:	ldr	x0, [x29, #216]
    5984:	cbz	x0, 6404 <GOMP_taskloop_ull+0xc6c>
    5988:	adrp	x23, 0 <gomp_tls_data>
    598c:	ldr	x23, [x23]
    5990:	mrs	x0, tpidr_el0
    5994:	add	x23, x0, x23
    5998:	adrp	x0, 0 <gomp_global_icv>
    599c:	add	x0, x0, #0x0
    59a0:	add	x26, x29, #0xe0
    59a4:	mov	w27, #0x1                   	// #1
    59a8:	add	x1, x26, #0x8
    59ac:	str	x1, [x29, #176]
    59b0:	str	x28, [x29, #184]
    59b4:	mov	x28, x0
    59b8:	b	5d14 <GOMP_taskloop_ull+0x57c>
    59bc:	adrp	x0, 0 <gomp_tls_data>
    59c0:	ldr	x0, [x0]
    59c4:	mrs	x1, tpidr_el0
    59c8:	add	x0, x1, x0
    59cc:	ldr	x25, [x0, #80]
    59d0:	cbz	x25, 642c <GOMP_taskloop_ull+0xc94>
    59d4:	ldr	x0, [x25, #40]
    59d8:	cbz	x0, 59fc <GOMP_taskloop_ull+0x264>
    59dc:	ldrb	w1, [x0, #49]
    59e0:	cbnz	w1, 640c <GOMP_taskloop_ull+0xc74>
    59e4:	ldrb	w1, [x0, #50]
    59e8:	cbz	w1, 59fc <GOMP_taskloop_ull+0x264>
    59ec:	ldr	x0, [x0]
    59f0:	cbz	x0, 59fc <GOMP_taskloop_ull+0x264>
    59f4:	ldrb	w0, [x0, #49]
    59f8:	cbnz	w0, 640c <GOMP_taskloop_ull+0xc74>
    59fc:	adrp	x0, 0 <gomp_max_task_priority_var>
    5a00:	ldr	w0, [x0]
    5a04:	cmp	w0, w21
    5a08:	csel	w0, w0, w21, le
    5a0c:	str	w0, [x29, #196]
    5a10:	tst	x24, #0x400
    5a14:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    5a18:	b.eq	5974 <GOMP_taskloop_ull+0x1dc>  // b.none
    5a1c:	b	5a4c <GOMP_taskloop_ull+0x2b4>
    5a20:	bl	4198 <GOMP_taskgroup_start>
    5a24:	tbz	w24, #12, 5954 <GOMP_taskloop_ull+0x1bc>
    5a28:	ldr	x0, [x22, #16]
    5a2c:	bl	48a4 <GOMP_taskgroup_reduction_register>
    5a30:	b	5954 <GOMP_taskloop_ull+0x1bc>
    5a34:	adrp	x0, 0 <gomp_tls_data>
    5a38:	ldr	x0, [x0]
    5a3c:	mrs	x1, tpidr_el0
    5a40:	add	x0, x1, x0
    5a44:	ldr	x25, [x0, #80]
    5a48:	cbz	x25, 5a54 <GOMP_taskloop_ull+0x2bc>
    5a4c:	ldrb	w0, [x25, #205]
    5a50:	cbnz	w0, 5974 <GOMP_taskloop_ull+0x1dc>
    5a54:	ldr	w1, [x28, #1320]
    5a58:	ldr	x0, [x29, #216]
    5a5c:	add	x1, x1, x0
    5a60:	ldr	w0, [x28]
    5a64:	lsl	w0, w0, #6
    5a68:	cmp	x1, x0
    5a6c:	b.hi	5974 <GOMP_taskloop_ull+0x1dc>  // b.pmore
    5a70:	mov	x0, sp
    5a74:	str	x0, [x29, #112]
    5a78:	ldr	x1, [x29, #216]
    5a7c:	lsl	x0, x1, #3
    5a80:	add	x0, x0, #0xf
    5a84:	and	x0, x0, #0xfffffffffffffff0
    5a88:	sub	sp, sp, x0
    5a8c:	mov	x0, sp
    5a90:	str	x0, [x29, #168]
    5a94:	ldr	x27, [x25, #40]
    5a98:	cbz	x1, 5ed8 <GOMP_taskloop_ull+0x740>
    5a9c:	ubfx	x0, x24, #1, #1
    5aa0:	str	x0, [x29, #160]
    5aa4:	mov	x24, #0x0                   	// #0
    5aa8:	add	x0, x23, #0xcf
    5aac:	str	x0, [x29, #152]
    5ab0:	ldr	x1, [x29, #176]
    5ab4:	add	x0, x1, x0
    5ab8:	str	x0, [x29, #144]
    5abc:	neg	x0, x23
    5ac0:	str	x0, [x29, #136]
    5ac4:	adrp	x26, 0 <gomp_tls_data>
    5ac8:	ldr	x26, [x26]
    5acc:	mrs	x0, tpidr_el0
    5ad0:	add	x26, x0, x26
    5ad4:	adrp	x0, 0 <gomp_global_icv>
    5ad8:	add	x0, x0, #0x0
    5adc:	str	x0, [x29, #128]
    5ae0:	str	x28, [x29, #104]
    5ae4:	str	x22, [x29, #120]
    5ae8:	ldr	x22, [x29, #208]
    5aec:	ldr	x28, [x29, #184]
    5af0:	b	5e54 <GOMP_taskloop_ull+0x6bc>
    5af4:	mov	x0, sp
    5af8:	str	x0, [x29, #160]
    5afc:	ldr	x3, [x29, #216]
    5b00:	add	x0, x3, x3, lsl #1
    5b04:	add	x0, x3, x0, lsl #2
    5b08:	lsl	x2, x0, #4
    5b0c:	mov	x1, sp
    5b10:	sub	x0, x1, x0, lsl #4
    5b14:	mov	sp, x0
    5b18:	mov	x21, sp
    5b1c:	adrp	x0, 0 <gomp_tls_data>
    5b20:	ldr	x0, [x0]
    5b24:	mrs	x1, tpidr_el0
    5b28:	add	x0, x1, x0
    5b2c:	ldr	x0, [x0, #80]
    5b30:	str	x0, [x29, #168]
    5b34:	ldr	x0, [x29, #176]
    5b38:	add	x0, x0, x23
    5b3c:	sub	x0, x0, #0x1
    5b40:	neg	x25, x23
    5b44:	and	x0, x0, x25
    5b48:	str	x0, [x29, #176]
    5b4c:	sub	x23, x23, #0x1
    5b50:	madd	x0, x0, x3, x23
    5b54:	add	x0, x0, #0xf
    5b58:	and	x0, x0, #0xfffffffffffffff0
    5b5c:	sub	sp, sp, x0
    5b60:	add	x23, sp, x23
    5b64:	and	x25, x23, x25
    5b68:	cbz	x3, 5ccc <GOMP_taskloop_ull+0x534>
    5b6c:	add	x1, x21, x2
    5b70:	mov	x27, x25
    5b74:	adrp	x26, 0 <gomp_tls_data>
    5b78:	ldr	x26, [x26]
    5b7c:	mrs	x0, tpidr_el0
    5b80:	add	x26, x0, x26
    5b84:	adrp	x0, 0 <gomp_global_icv>
    5b88:	add	x0, x0, #0x0
    5b8c:	ubfx	x2, x24, #1, #1
    5b90:	str	x19, [x29, #152]
    5b94:	str	x28, [x29, #144]
    5b98:	str	x25, [x29, #136]
    5b9c:	str	x21, [x29, #128]
    5ba0:	ldr	w23, [x29, #196]
    5ba4:	ldr	x24, [x29, #184]
    5ba8:	str	x20, [x29, #432]
    5bac:	mov	x20, x1
    5bb0:	mov	x25, x0
    5bb4:	mov	w28, w2
    5bb8:	b	6478 <GOMP_taskloop_ull+0xce0>
    5bbc:	ldr	x19, [x29, #152]
    5bc0:	ldr	x28, [x29, #144]
    5bc4:	ldr	x25, [x29, #136]
    5bc8:	ldr	x23, [x29, #128]
    5bcc:	ldr	x20, [x29, #432]
    5bd0:	mov	x21, #0x0                   	// #0
    5bd4:	adrp	x26, 0 <gomp_tls_data>
    5bd8:	ldr	x26, [x26]
    5bdc:	mrs	x0, tpidr_el0
    5be0:	add	x26, x0, x26
    5be4:	add	x28, x28, #0x500
    5be8:	mov	w27, #0x1                   	// #1
    5bec:	ldr	x24, [x29, #448]
    5bf0:	b	5c48 <GOMP_taskloop_ull+0x4b0>
    5bf4:	mov	x0, x28
    5bf8:	bl	0 <gomp_mutex_lock_slow>
    5bfc:	b	5ca8 <GOMP_taskloop_ull+0x510>
    5c00:	bl	d4 <gomp_clear_parent_in_tree>
    5c04:	str	xzr, [x22, #8]
    5c08:	b	5c20 <GOMP_taskloop_ull+0x488>
    5c0c:	stur	xzr, [x0, #-112]
    5c10:	ldr	x0, [x0]
    5c14:	ldr	x1, [x22, #24]
    5c18:	cmp	x0, x1
    5c1c:	b.ne	5c0c <GOMP_taskloop_ull+0x474>  // b.any
    5c20:	ldxr	w0, [x28]
    5c24:	stlxr	w1, wzr, [x28]
    5c28:	cbnz	w1, 5c20 <GOMP_taskloop_ull+0x488>
    5c2c:	tbnz	w0, #31, 5cc0 <GOMP_taskloop_ull+0x528>
    5c30:	bl	1830 <gomp_end_task>
    5c34:	add	x21, x21, #0x1
    5c38:	add	x23, x23, #0xd0
    5c3c:	ldr	x0, [x29, #216]
    5c40:	cmp	x0, x21
    5c44:	b.eq	5ccc <GOMP_taskloop_ull+0x534>  // b.none
    5c48:	mov	x22, x23
    5c4c:	str	x23, [x26, #80]
    5c50:	str	x20, [x25]
    5c54:	add	x20, x20, x19
    5c58:	str	x20, [x25, #8]
    5c5c:	sub	x0, x19, x24
    5c60:	ldr	x1, [x29, #208]
    5c64:	cmp	x1, x21
    5c68:	csel	x19, x0, x19, eq  // eq = none
    5c6c:	mov	x0, x25
    5c70:	ldr	x1, [x29, #200]
    5c74:	blr	x1
    5c78:	ldr	x0, [x29, #176]
    5c7c:	add	x25, x25, x0
    5c80:	ldr	x0, [x23, #8]
    5c84:	cbnz	x0, 5c90 <GOMP_taskloop_ull+0x4f8>
    5c88:	ldr	x0, [x23, #24]
    5c8c:	cbz	x0, 5c30 <GOMP_taskloop_ull+0x498>
    5c90:	ldaxr	w1, [x28]
    5c94:	cbnz	w1, 5ca0 <GOMP_taskloop_ull+0x508>
    5c98:	stxr	w0, w27, [x28]
    5c9c:	cbnz	w0, 5c90 <GOMP_taskloop_ull+0x4f8>
    5ca0:	cmp	w1, #0x0
    5ca4:	b.ne	5bf4 <GOMP_taskloop_ull+0x45c>  // b.any
    5ca8:	add	x0, x23, #0x8
    5cac:	ldr	x1, [x22, #8]
    5cb0:	cbnz	x1, 5c00 <GOMP_taskloop_ull+0x468>
    5cb4:	ldr	x0, [x22, #24]
    5cb8:	cbnz	x0, 5c0c <GOMP_taskloop_ull+0x474>
    5cbc:	b	5c20 <GOMP_taskloop_ull+0x488>
    5cc0:	mov	x0, x28
    5cc4:	bl	0 <gomp_mutex_unlock_slow>
    5cc8:	b	5c30 <GOMP_taskloop_ull+0x498>
    5ccc:	ldr	x0, [x29, #160]
    5cd0:	mov	sp, x0
    5cd4:	b	6404 <GOMP_taskloop_ull+0xc6c>
    5cd8:	mov	x0, x25
    5cdc:	bl	0 <gomp_mutex_lock_slow>
    5ce0:	b	5dc4 <GOMP_taskloop_ull+0x62c>
    5ce4:	ldr	x0, [x29, #176]
    5ce8:	bl	d4 <gomp_clear_parent_in_tree>
    5cec:	str	xzr, [x29, #232]
    5cf0:	ldxr	w0, [x25]
    5cf4:	stlxr	w1, wzr, [x25]
    5cf8:	cbnz	w1, 5cf0 <GOMP_taskloop_ull+0x558>
    5cfc:	tbnz	w0, #31, 5dec <GOMP_taskloop_ull+0x654>
    5d00:	bl	1830 <gomp_end_task>
    5d04:	add	x21, x21, #0x1
    5d08:	ldr	x0, [x29, #216]
    5d0c:	cmp	x0, x21
    5d10:	b.eq	6404 <GOMP_taskloop_ull+0xc6c>  // b.none
    5d14:	ldr	x1, [x23, #80]
    5d18:	add	x2, x1, #0x90
    5d1c:	cmp	x1, #0x0
    5d20:	csel	x2, x28, x2, eq  // eq = none
    5d24:	mov	x0, x26
    5d28:	bl	17d8 <gomp_init_task>
    5d2c:	ldr	w0, [x29, #196]
    5d30:	str	w0, [x29, #312]
    5d34:	str	w27, [x29, #424]
    5d38:	ldr	x0, [x23, #80]
    5d3c:	cbz	x0, 64d0 <GOMP_taskloop_ull+0xd38>
    5d40:	ldrb	w2, [x0, #205]
    5d44:	ubfx	x1, x24, #1, #1
    5d48:	cmp	w2, #0x0
    5d4c:	csinc	w1, w1, wzr, eq  // eq = none
    5d50:	strb	w1, [x29, #429]
    5d54:	ldrb	w1, [x0, #204]
    5d58:	strb	w1, [x29, #428]
    5d5c:	ldr	x0, [x0, #40]
    5d60:	str	x0, [x29, #264]
    5d64:	str	x26, [x23, #80]
    5d68:	str	x20, [x22]
    5d6c:	add	x20, x20, x19
    5d70:	str	x20, [x22, #8]
    5d74:	ldr	x0, [x29, #448]
    5d78:	sub	x0, x19, x0
    5d7c:	ldr	x1, [x29, #208]
    5d80:	cmp	x1, x21
    5d84:	csel	x19, x0, x19, eq  // eq = none
    5d88:	mov	x0, x22
    5d8c:	ldr	x1, [x29, #200]
    5d90:	blr	x1
    5d94:	ldr	x0, [x29, #232]
    5d98:	cbnz	x0, 5da4 <GOMP_taskloop_ull+0x60c>
    5d9c:	ldr	x0, [x29, #248]
    5da0:	cbz	x0, 5d00 <GOMP_taskloop_ull+0x568>
    5da4:	ldr	x0, [x29, #184]
    5da8:	add	x25, x0, #0x500
    5dac:	ldaxr	w1, [x25]
    5db0:	cbnz	w1, 5dbc <GOMP_taskloop_ull+0x624>
    5db4:	stxr	w0, w27, [x25]
    5db8:	cbnz	w0, 5dac <GOMP_taskloop_ull+0x614>
    5dbc:	cmp	w1, #0x0
    5dc0:	b.ne	5cd8 <GOMP_taskloop_ull+0x540>  // b.any
    5dc4:	ldr	x1, [x29, #232]
    5dc8:	cbnz	x1, 5ce4 <GOMP_taskloop_ull+0x54c>
    5dcc:	ldr	x0, [x29, #248]
    5dd0:	cbz	x0, 5cf0 <GOMP_taskloop_ull+0x558>
    5dd4:	stur	xzr, [x0, #-112]
    5dd8:	ldr	x0, [x0]
    5ddc:	ldr	x1, [x29, #248]
    5de0:	cmp	x0, x1
    5de4:	b.ne	5dd4 <GOMP_taskloop_ull+0x63c>  // b.any
    5de8:	b	5cf0 <GOMP_taskloop_ull+0x558>
    5dec:	mov	x0, x25
    5df0:	bl	0 <gomp_mutex_unlock_slow>
    5df4:	b	5d00 <GOMP_taskloop_ull+0x568>
    5df8:	ldr	x2, [x29, #176]
    5dfc:	ldr	x1, [x29, #120]
    5e00:	mov	x0, x23
    5e04:	bl	0 <memcpy>
    5e08:	str	x20, [x23]
    5e0c:	add	x20, x20, x19
    5e10:	str	x20, [x23, #8]
    5e14:	ldr	x0, [x29, #448]
    5e18:	sub	x0, x19, x0
    5e1c:	cmp	x22, x24
    5e20:	csel	x19, x0, x19, eq  // eq = none
    5e24:	str	x25, [x26, #80]
    5e28:	mov	w0, #0x2                   	// #2
    5e2c:	str	w0, [x21, #200]
    5e30:	ldr	x0, [x29, #200]
    5e34:	str	x0, [x21, #184]
    5e38:	str	x23, [x21, #192]
    5e3c:	ldrb	w0, [x29, #160]
    5e40:	strb	w0, [x21, #205]
    5e44:	add	x24, x24, #0x1
    5e48:	ldr	x0, [x29, #216]
    5e4c:	cmp	x0, x24
    5e50:	b.eq	5ed4 <GOMP_taskloop_ull+0x73c>  // b.none
    5e54:	ldr	x0, [x29, #144]
    5e58:	bl	0 <gomp_malloc>
    5e5c:	mov	x21, x0
    5e60:	ldr	x0, [x29, #168]
    5e64:	str	x21, [x0, x24, lsl #3]
    5e68:	ldr	x0, [x29, #152]
    5e6c:	add	x23, x21, x0
    5e70:	ldr	x0, [x29, #136]
    5e74:	and	x23, x23, x0
    5e78:	ldr	x0, [x26, #80]
    5e7c:	add	x2, x0, #0x90
    5e80:	cmp	x0, #0x0
    5e84:	ldr	x0, [x29, #128]
    5e88:	csel	x2, x0, x2, eq  // eq = none
    5e8c:	mov	x1, x25
    5e90:	mov	x0, x21
    5e94:	bl	17d8 <gomp_init_task>
    5e98:	ldr	w0, [x29, #196]
    5e9c:	str	w0, [x21, #88]
    5ea0:	mov	w0, #0x1                   	// #1
    5ea4:	str	w0, [x21, #200]
    5ea8:	ldrb	w0, [x25, #204]
    5eac:	strb	w0, [x21, #204]
    5eb0:	str	x27, [x21, #40]
    5eb4:	str	x21, [x26, #80]
    5eb8:	cbz	x28, 5df8 <GOMP_taskloop_ull+0x660>
    5ebc:	ldr	x1, [x29, #120]
    5ec0:	mov	x0, x23
    5ec4:	blr	x28
    5ec8:	mov	w0, #0x1                   	// #1
    5ecc:	strb	w0, [x21, #206]
    5ed0:	b	5e08 <GOMP_taskloop_ull+0x670>
    5ed4:	ldr	x28, [x29, #104]
    5ed8:	add	x24, x28, #0x500
    5edc:	mov	w0, #0x1                   	// #1
    5ee0:	ldaxr	w1, [x24]
    5ee4:	cbnz	w1, 5ef0 <GOMP_taskloop_ull+0x758>
    5ee8:	stxr	w2, w0, [x24]
    5eec:	cbnz	w2, 5ee0 <GOMP_taskloop_ull+0x748>
    5ef0:	cmp	w1, #0x0
    5ef4:	b.ne	5f48 <GOMP_taskloop_ull+0x7b0>  // b.any
    5ef8:	ldr	x0, [x29, #184]
    5efc:	cmp	x0, #0x0
    5f00:	cset	w1, eq  // eq = none
    5f04:	adrp	x0, 0 <gomp_cancel_var>
    5f08:	ldrb	w0, [x0]
    5f0c:	tst	w1, w0
    5f10:	b.ne	5f54 <GOMP_taskloop_ull+0x7bc>  // b.any
    5f14:	cbz	x27, 5f28 <GOMP_taskloop_ull+0x790>
    5f18:	ldr	x0, [x27, #56]
    5f1c:	ldr	x1, [x29, #216]
    5f20:	add	x0, x0, x1
    5f24:	str	x0, [x27, #56]
    5f28:	mov	x20, #0x0                   	// #0
    5f2c:	mov	x26, #0x28                  	// #40
    5f30:	ldr	x0, [x29, #216]
    5f34:	cbz	x0, 6374 <GOMP_taskloop_ull+0xbdc>
    5f38:	str	x24, [x29, #200]
    5f3c:	ldr	w23, [x29, #196]
    5f40:	ldr	x24, [x29, #168]
    5f44:	b	6208 <GOMP_taskloop_ull+0xa70>
    5f48:	mov	x0, x24
    5f4c:	bl	0 <gomp_mutex_lock_slow>
    5f50:	b	5ef8 <GOMP_taskloop_ull+0x760>
    5f54:	ldr	w0, [x28, #132]
    5f58:	tbnz	w0, #2, 5f80 <GOMP_taskloop_ull+0x7e8>
    5f5c:	cbz	x27, 5f28 <GOMP_taskloop_ull+0x790>
    5f60:	ldrb	w0, [x27, #49]
    5f64:	cbnz	w0, 5f80 <GOMP_taskloop_ull+0x7e8>
    5f68:	ldrb	w0, [x27, #50]
    5f6c:	cbz	w0, 5f18 <GOMP_taskloop_ull+0x780>
    5f70:	ldr	x0, [x27]
    5f74:	cbz	x0, 5f18 <GOMP_taskloop_ull+0x780>
    5f78:	ldrb	w0, [x0, #49]
    5f7c:	cbz	w0, 5f18 <GOMP_taskloop_ull+0x780>
    5f80:	mov	x0, x24
    5f84:	bl	9f8 <gomp_mutex_unlock>
    5f88:	ldr	x0, [x29, #216]
    5f8c:	cbz	x0, 5fbc <GOMP_taskloop_ull+0x824>
    5f90:	mov	x19, #0x0                   	// #0
    5f94:	ldr	x0, [x29, #168]
    5f98:	ldr	x20, [x0, x19, lsl #3]
    5f9c:	ldr	x0, [x20, #56]
    5fa0:	cbnz	x0, 5fd0 <GOMP_taskloop_ull+0x838>
    5fa4:	mov	x0, x20
    5fa8:	bl	0 <free>
    5fac:	add	x19, x19, #0x1
    5fb0:	ldr	x0, [x29, #216]
    5fb4:	cmp	x0, x19
    5fb8:	b.ne	5f94 <GOMP_taskloop_ull+0x7fc>  // b.any
    5fbc:	ldr	w0, [x29, #192]
    5fc0:	cbz	w0, 5fd8 <GOMP_taskloop_ull+0x840>
    5fc4:	ldr	x0, [x29, #112]
    5fc8:	mov	sp, x0
    5fcc:	b	640c <GOMP_taskloop_ull+0xc74>
    5fd0:	bl	0 <free>
    5fd4:	b	5fa4 <GOMP_taskloop_ull+0x80c>
    5fd8:	bl	4220 <GOMP_taskgroup_end>
    5fdc:	b	5fc4 <GOMP_taskloop_ull+0x82c>
    5fe0:	add	x1, x25, #0x8
    5fe4:	str	x1, [x29, #208]
    5fe8:	cbz	x0, 6030 <GOMP_taskloop_ull+0x898>
    5fec:	str	w23, [x29, #224]
    5ff0:	add	x1, x29, #0xe0
    5ff4:	ldr	x0, [x29, #208]
    5ff8:	bl	0 <prio_splay_tree_lookup>
    5ffc:	cbz	x0, 6074 <GOMP_taskloop_ull+0x8dc>
    6000:	add	x1, x19, #0x70
    6004:	ldr	x2, [x0, #8]
    6008:	cbz	x2, 60a8 <GOMP_taskloop_ull+0x910>
    600c:	str	x2, [x19, #112]
    6010:	ldr	x2, [x2, #8]
    6014:	str	x2, [x19, #120]
    6018:	str	x1, [x0, #8]
    601c:	ldr	x0, [x19, #112]
    6020:	str	x1, [x0, #8]
    6024:	ldr	x0, [x19, #120]
    6028:	str	x1, [x0]
    602c:	b	6250 <GOMP_taskloop_ull+0xab8>
    6030:	ldr	x0, [x25, #24]
    6034:	cbz	x0, 6074 <GOMP_taskloop_ull+0x8dc>
    6038:	mov	x0, x26
    603c:	bl	0 <gomp_malloc>
    6040:	mov	x1, x0
    6044:	str	xzr, [x0, #24]
    6048:	str	xzr, [x0, #32]
    604c:	str	wzr, [x0]
    6050:	ldr	x0, [x25, #24]
    6054:	str	x0, [x1, #8]
    6058:	ldr	x0, [x25, #32]
    605c:	str	x0, [x1, #16]
    6060:	ldr	x0, [x29, #208]
    6064:	bl	0 <prio_splay_tree_insert>
    6068:	str	xzr, [x25, #24]
    606c:	ldr	x0, [x25, #8]
    6070:	cbnz	x0, 5fec <GOMP_taskloop_ull+0x854>
    6074:	mov	x0, x26
    6078:	bl	0 <gomp_malloc>
    607c:	mov	x22, x0
    6080:	str	xzr, [x0, #24]
    6084:	str	xzr, [x0, #32]
    6088:	str	w23, [x0]
    608c:	str	xzr, [x0, #8]
    6090:	str	xzr, [x0, #16]
    6094:	mov	x1, x0
    6098:	ldr	x0, [x29, #208]
    609c:	bl	0 <prio_splay_tree_insert>
    60a0:	mov	x0, x22
    60a4:	b	6000 <GOMP_taskloop_ull+0x868>
    60a8:	str	x1, [x19, #112]
    60ac:	str	x1, [x19, #120]
    60b0:	str	x1, [x0, #8]
    60b4:	b	6250 <GOMP_taskloop_ull+0xab8>
    60b8:	str	x0, [x19, #112]
    60bc:	str	x0, [x19, #120]
    60c0:	str	x0, [x25, #24]
    60c4:	b	6250 <GOMP_taskloop_ull+0xab8>
    60c8:	add	x1, x27, #0x8
    60cc:	str	x1, [x29, #208]
    60d0:	cbz	x0, 6118 <GOMP_taskloop_ull+0x980>
    60d4:	str	w23, [x29, #224]
    60d8:	add	x1, x29, #0xe0
    60dc:	ldr	x0, [x29, #208]
    60e0:	bl	0 <prio_splay_tree_lookup>
    60e4:	cbz	x0, 615c <GOMP_taskloop_ull+0x9c4>
    60e8:	add	x1, x19, #0x80
    60ec:	ldr	x2, [x0, #8]
    60f0:	cbz	x2, 6190 <GOMP_taskloop_ull+0x9f8>
    60f4:	str	x2, [x19, #128]
    60f8:	ldr	x2, [x2, #8]
    60fc:	str	x2, [x19, #136]
    6100:	str	x1, [x0, #8]
    6104:	ldr	x0, [x19, #128]
    6108:	str	x1, [x0, #8]
    610c:	ldr	x0, [x19, #136]
    6110:	str	x1, [x0]
    6114:	b	61ac <GOMP_taskloop_ull+0xa14>
    6118:	ldr	x0, [x27, #24]
    611c:	cbz	x0, 615c <GOMP_taskloop_ull+0x9c4>
    6120:	mov	x0, x26
    6124:	bl	0 <gomp_malloc>
    6128:	mov	x1, x0
    612c:	str	xzr, [x0, #24]
    6130:	str	xzr, [x0, #32]
    6134:	str	wzr, [x0]
    6138:	ldr	x0, [x27, #24]
    613c:	str	x0, [x1, #8]
    6140:	ldr	x0, [x27, #32]
    6144:	str	x0, [x1, #16]
    6148:	ldr	x0, [x29, #208]
    614c:	bl	0 <prio_splay_tree_insert>
    6150:	str	xzr, [x27, #24]
    6154:	ldr	x0, [x27, #8]
    6158:	cbnz	x0, 60d4 <GOMP_taskloop_ull+0x93c>
    615c:	mov	x0, x26
    6160:	bl	0 <gomp_malloc>
    6164:	mov	x22, x0
    6168:	str	xzr, [x0, #24]
    616c:	str	xzr, [x0, #32]
    6170:	str	w23, [x0]
    6174:	str	xzr, [x0, #8]
    6178:	str	xzr, [x0, #16]
    617c:	mov	x1, x0
    6180:	ldr	x0, [x29, #208]
    6184:	bl	0 <prio_splay_tree_insert>
    6188:	mov	x0, x22
    618c:	b	60e8 <GOMP_taskloop_ull+0x950>
    6190:	str	x1, [x19, #128]
    6194:	str	x1, [x19, #136]
    6198:	str	x1, [x0, #8]
    619c:	b	61ac <GOMP_taskloop_ull+0xa14>
    61a0:	str	x0, [x19, #128]
    61a4:	str	x0, [x19, #136]
    61a8:	str	x0, [x27, #24]
    61ac:	ldr	x0, [x28, #1288]
    61b0:	cmp	x0, #0x0
    61b4:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    61b8:	b.ne	6294 <GOMP_taskloop_ull+0xafc>  // b.any
    61bc:	add	x1, x19, #0x60
    61c0:	ldr	x0, [x28, #1304]
    61c4:	cbz	x0, 6360 <GOMP_taskloop_ull+0xbc8>
    61c8:	str	x0, [x19, #96]
    61cc:	ldr	x2, [x0, #8]
    61d0:	str	x2, [x19, #104]
    61d4:	str	x1, [x0, #8]
    61d8:	ldr	x0, [x19, #104]
    61dc:	str	x1, [x0]
    61e0:	ldr	w0, [x28, #1320]
    61e4:	add	w0, w0, #0x1
    61e8:	str	w0, [x28, #1320]
    61ec:	ldr	w0, [x28, #1324]
    61f0:	add	w0, w0, #0x1
    61f4:	str	w0, [x28, #1324]
    61f8:	add	x20, x20, #0x1
    61fc:	ldr	x0, [x29, #216]
    6200:	cmp	x0, x20
    6204:	b.eq	6370 <GOMP_taskloop_ull+0xbd8>  // b.none
    6208:	ldr	x19, [x24, x20, lsl #3]
    620c:	ldr	x0, [x25, #8]
    6210:	cmp	w23, #0x0
    6214:	cset	w21, gt
    6218:	cmp	x0, #0x0
    621c:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    6220:	b.ne	5fe0 <GOMP_taskloop_ull+0x848>  // b.any
    6224:	add	x0, x19, #0x70
    6228:	ldr	x1, [x25, #24]
    622c:	cbz	x1, 60b8 <GOMP_taskloop_ull+0x920>
    6230:	str	x1, [x19, #112]
    6234:	ldr	x1, [x1, #8]
    6238:	str	x1, [x19, #120]
    623c:	str	x0, [x25, #24]
    6240:	ldr	x1, [x19, #112]
    6244:	str	x0, [x1, #8]
    6248:	ldr	x1, [x19, #120]
    624c:	str	x0, [x1]
    6250:	cbz	x27, 61ac <GOMP_taskloop_ull+0xa14>
    6254:	ldr	x0, [x27, #8]
    6258:	cmp	x0, #0x0
    625c:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    6260:	b.ne	60c8 <GOMP_taskloop_ull+0x930>  // b.any
    6264:	add	x0, x19, #0x80
    6268:	ldr	x1, [x27, #24]
    626c:	cbz	x1, 61a0 <GOMP_taskloop_ull+0xa08>
    6270:	str	x1, [x19, #128]
    6274:	ldr	x1, [x1, #8]
    6278:	str	x1, [x19, #136]
    627c:	str	x0, [x27, #24]
    6280:	ldr	x1, [x19, #128]
    6284:	str	x0, [x1, #8]
    6288:	ldr	x1, [x19, #136]
    628c:	str	x0, [x1]
    6290:	b	61ac <GOMP_taskloop_ull+0xa14>
    6294:	add	x22, x28, #0x508
    6298:	cbz	x0, 62d8 <GOMP_taskloop_ull+0xb40>
    629c:	str	w23, [x29, #224]
    62a0:	add	x1, x29, #0xe0
    62a4:	mov	x0, x22
    62a8:	bl	0 <prio_splay_tree_lookup>
    62ac:	cbz	x0, 631c <GOMP_taskloop_ull+0xb84>
    62b0:	add	x2, x19, #0x60
    62b4:	ldr	x1, [x0, #8]
    62b8:	cbz	x1, 6350 <GOMP_taskloop_ull+0xbb8>
    62bc:	str	x1, [x19, #96]
    62c0:	ldr	x0, [x1, #8]
    62c4:	str	x0, [x19, #104]
    62c8:	str	x2, [x1, #8]
    62cc:	ldr	x0, [x19, #104]
    62d0:	str	x2, [x0]
    62d4:	b	61e0 <GOMP_taskloop_ull+0xa48>
    62d8:	ldr	x0, [x28, #1304]
    62dc:	cbz	x0, 631c <GOMP_taskloop_ull+0xb84>
    62e0:	mov	x0, x26
    62e4:	bl	0 <gomp_malloc>
    62e8:	mov	x1, x0
    62ec:	str	xzr, [x0, #24]
    62f0:	str	xzr, [x0, #32]
    62f4:	str	wzr, [x0]
    62f8:	ldr	x0, [x22, #16]
    62fc:	str	x0, [x1, #8]
    6300:	ldr	x0, [x22, #24]
    6304:	str	x0, [x1, #16]
    6308:	mov	x0, x22
    630c:	bl	0 <prio_splay_tree_insert>
    6310:	str	xzr, [x22, #16]
    6314:	ldr	x0, [x28, #1288]
    6318:	cbnz	x0, 629c <GOMP_taskloop_ull+0xb04>
    631c:	mov	x0, x26
    6320:	bl	0 <gomp_malloc>
    6324:	mov	x21, x0
    6328:	str	xzr, [x0, #24]
    632c:	str	xzr, [x0, #32]
    6330:	str	w23, [x0]
    6334:	str	xzr, [x0, #8]
    6338:	str	xzr, [x0, #16]
    633c:	mov	x1, x0
    6340:	mov	x0, x22
    6344:	bl	0 <prio_splay_tree_insert>
    6348:	mov	x0, x21
    634c:	b	62b0 <GOMP_taskloop_ull+0xb18>
    6350:	str	x2, [x19, #96]
    6354:	str	x2, [x19, #104]
    6358:	str	x2, [x0, #8]
    635c:	b	61e0 <GOMP_taskloop_ull+0xa48>
    6360:	str	x1, [x19, #96]
    6364:	str	x1, [x19, #104]
    6368:	str	x1, [x28, #1304]
    636c:	b	61e0 <GOMP_taskloop_ull+0xa48>
    6370:	ldr	x24, [x29, #200]
    6374:	ldr	w0, [x28, #132]
    6378:	orr	w0, w0, #0x1
    637c:	str	w0, [x28, #132]
    6380:	ldr	w2, [x28, #1328]
    6384:	ldrb	w0, [x25, #204]
    6388:	eor	w0, w0, #0x1
    638c:	ldr	w1, [x28]
    6390:	add	w3, w2, w0
    6394:	cmp	w3, w1
    6398:	b.cs	63ec <GOMP_taskloop_ull+0xc54>  // b.hs, b.nlast
    639c:	sub	w1, w1, w2
    63a0:	sub	w19, w1, w0
    63a4:	ldr	x0, [x29, #216]
    63a8:	cmp	x0, w19, sxtw
    63ac:	csel	w19, w0, w19, cc  // cc = lo, ul, last
    63b0:	ldxr	w0, [x24]
    63b4:	stlxr	w1, wzr, [x24]
    63b8:	cbnz	w1, 63b0 <GOMP_taskloop_ull+0xc18>
    63bc:	tbnz	w0, #31, 63d8 <GOMP_taskloop_ull+0xc40>
    63c0:	cbz	w19, 63fc <GOMP_taskloop_ull+0xc64>
    63c4:	mov	w1, w19
    63c8:	add	x0, x28, #0x80
    63cc:	bl	0 <gomp_team_barrier_wake>
    63d0:	b	63fc <GOMP_taskloop_ull+0xc64>
    63d4:	mov	w19, #0x0                   	// #0
    63d8:	mov	x0, x24
    63dc:	bl	0 <gomp_mutex_unlock_slow>
    63e0:	b	63c0 <GOMP_taskloop_ull+0xc28>
    63e4:	bl	4220 <GOMP_taskgroup_end>
    63e8:	b	640c <GOMP_taskloop_ull+0xc74>
    63ec:	ldxr	w0, [x24]
    63f0:	stlxr	w1, wzr, [x24]
    63f4:	cbnz	w1, 63ec <GOMP_taskloop_ull+0xc54>
    63f8:	tbnz	w0, #31, 63d4 <GOMP_taskloop_ull+0xc3c>
    63fc:	ldr	x0, [x29, #112]
    6400:	mov	sp, x0
    6404:	ldr	w0, [x29, #192]
    6408:	cbz	w0, 63e4 <GOMP_taskloop_ull+0xc4c>
    640c:	mov	sp, x29
    6410:	ldp	x19, x20, [sp, #16]
    6414:	ldp	x21, x22, [sp, #32]
    6418:	ldp	x23, x24, [sp, #48]
    641c:	ldp	x25, x26, [sp, #64]
    6420:	ldp	x27, x28, [sp, #80]
    6424:	ldp	x29, x30, [sp], #432
    6428:	ret
    642c:	adrp	x0, 0 <gomp_max_task_priority_var>
    6430:	ldr	w0, [x0]
    6434:	cmp	w0, w21
    6438:	csel	w0, w0, w21, le
    643c:	str	w0, [x29, #196]
    6440:	tst	x24, #0x400
    6444:	ccmp	x28, #0x0, #0x4, ne  // ne = any
    6448:	b.eq	5974 <GOMP_taskloop_ull+0x1dc>  // b.none
    644c:	b	5a54 <GOMP_taskloop_ull+0x2bc>
    6450:	strb	w28, [x21, #205]
    6454:	str	x19, [x26, #80]
    6458:	mov	x1, x22
    645c:	mov	x0, x27
    6460:	blr	x24
    6464:	ldr	x0, [x29, #176]
    6468:	add	x27, x27, x0
    646c:	add	x21, x21, #0xd0
    6470:	cmp	x20, x21
    6474:	b.eq	5bbc <GOMP_taskloop_ull+0x424>  // b.none
    6478:	mov	x19, x21
    647c:	ldr	x0, [x26, #80]
    6480:	add	x2, x0, #0x90
    6484:	cmp	x0, #0x0
    6488:	csel	x2, x25, x2, eq  // eq = none
    648c:	ldr	x1, [x29, #168]
    6490:	mov	x0, x21
    6494:	bl	17d8 <gomp_init_task>
    6498:	str	w23, [x21, #88]
    649c:	mov	w0, #0x1                   	// #1
    64a0:	str	w0, [x21, #200]
    64a4:	ldr	x0, [x26, #80]
    64a8:	cbz	x0, 6450 <GOMP_taskloop_ull+0xcb8>
    64ac:	ldrb	w1, [x0, #205]
    64b0:	cmp	w1, #0x0
    64b4:	csinc	w1, w28, wzr, eq  // eq = none
    64b8:	strb	w1, [x21, #205]
    64bc:	ldrb	w1, [x0, #204]
    64c0:	strb	w1, [x21, #204]
    64c4:	ldr	x0, [x0, #40]
    64c8:	str	x0, [x21, #40]
    64cc:	b	6454 <GOMP_taskloop_ull+0xcbc>
    64d0:	ubfx	x0, x24, #1, #1
    64d4:	strb	w0, [x29, #429]
    64d8:	b	5d64 <GOMP_taskloop_ull+0x5cc>

00000000000064dc <GOMP_taskgroup_reduction_unregister>:
    64dc:	stp	x29, x30, [sp, #-32]!
    64e0:	mov	x29, sp
    64e4:	str	x19, [sp, #16]
    64e8:	mov	x19, x0
    64ec:	ldr	x0, [x0, #40]
    64f0:	bl	0 <free>
    64f4:	ldr	x0, [x19, #16]
    64f8:	bl	0 <gomp_aligned_free>
    64fc:	ldr	x19, [x19, #32]
    6500:	cbz	x19, 650c <GOMP_taskgroup_reduction_unregister+0x30>
    6504:	ldr	x0, [x19, #40]
    6508:	cbz	x0, 64f4 <GOMP_taskgroup_reduction_unregister+0x18>
    650c:	ldr	x19, [sp, #16]
    6510:	ldp	x29, x30, [sp], #32
    6514:	ret

0000000000006518 <GOMP_task_reduction_remap>:
    6518:	stp	x29, x30, [sp, #-96]!
    651c:	mov	x29, sp
    6520:	stp	x21, x22, [sp, #32]
    6524:	stp	x23, x24, [sp, #48]
    6528:	stp	x25, x26, [sp, #64]
    652c:	mov	x22, x0
    6530:	mov	x24, x1
    6534:	adrp	x0, 0 <gomp_tls_data>
    6538:	ldr	x0, [x0]
    653c:	mrs	x1, tpidr_el0
    6540:	add	x0, x1, x0
    6544:	ldr	w23, [x0, #40]
    6548:	ldr	x0, [x0, #80]
    654c:	ldr	x0, [x0, #40]
    6550:	ldr	x26, [x0, #40]
    6554:	ldr	x25, [x26, #40]
    6558:	cbz	x22, 6698 <GOMP_task_reduction_remap+0x180>
    655c:	stp	x19, x20, [sp, #16]
    6560:	str	x27, [sp, #80]
    6564:	mov	x19, x2
    6568:	mov	x20, #0x0                   	// #0
    656c:	mov	w23, w23
    6570:	mov	x27, #0x0                   	// #0
    6574:	b	65d8 <GOMP_task_reduction_remap+0xc0>
    6578:	ldr	x1, [x19]
    657c:	mov	x2, x26
    6580:	b	658c <GOMP_task_reduction_remap+0x74>
    6584:	ldr	x2, [x2, #32]
    6588:	cbz	x2, 66ac <GOMP_task_reduction_remap+0x194>
    658c:	ldr	x0, [x2, #16]
    6590:	cmp	x1, x0
    6594:	b.cc	6584 <GOMP_task_reduction_remap+0x6c>  // b.lo, b.ul, b.last
    6598:	ldr	x3, [x2, #48]
    659c:	cmp	x1, x3
    65a0:	b.cs	6584 <GOMP_task_reduction_remap+0x6c>  // b.hs, b.nlast
    65a4:	ldr	x3, [x2, #8]
    65a8:	sub	x1, x1, x0
    65ac:	udiv	x4, x1, x3
    65b0:	msub	x1, x4, x3, x1
    65b4:	madd	x0, x23, x3, x0
    65b8:	add	x0, x0, x1
    65bc:	str	x0, [x21]
    65c0:	cmp	x24, x20
    65c4:	b.hi	661c <GOMP_task_reduction_remap+0x104>  // b.pmore
    65c8:	add	x20, x20, #0x1
    65cc:	add	x19, x19, #0x8
    65d0:	cmp	x22, x20
    65d4:	b.eq	6690 <GOMP_task_reduction_remap+0x178>  // b.none
    65d8:	mov	x21, x19
    65dc:	mov	x1, x19
    65e0:	mov	x0, x25
    65e4:	bl	0 <htab_find>
    65e8:	cbz	x0, 6578 <GOMP_task_reduction_remap+0x60>
    65ec:	ldr	x3, [x0, #16]
    65f0:	ldr	x1, [x3, #16]
    65f4:	ldr	x2, [x0, #8]
    65f8:	add	x2, x1, x2
    65fc:	ldr	x1, [x3, #8]
    6600:	madd	x1, x23, x1, x2
    6604:	str	x1, [x19]
    6608:	cmp	x24, x20
    660c:	b.ls	65c8 <GOMP_task_reduction_remap+0xb0>  // b.plast
    6610:	ldr	x0, [x0]
    6614:	str	x0, [x19, x22, lsl #3]
    6618:	b	65c8 <GOMP_task_reduction_remap+0xb0>
    661c:	ldr	x4, [x2]
    6620:	sub	x4, x4, #0x1
    6624:	mov	x5, x27
    6628:	b	663c <GOMP_task_reduction_remap+0x124>
    662c:	b.eq	666c <GOMP_task_reduction_remap+0x154>  // b.none
    6630:	sub	x4, x3, #0x1
    6634:	cmp	x4, x5
    6638:	b.cc	6680 <GOMP_task_reduction_remap+0x168>  // b.lo, b.ul, b.last
    663c:	add	x0, x5, x4
    6640:	lsr	x3, x0, #1
    6644:	and	x0, x0, #0xfffffffffffffffe
    6648:	add	x0, x0, x3
    664c:	lsl	x0, x0, #3
    6650:	mov	x6, x0
    6654:	add	x0, x2, x0
    6658:	ldr	x0, [x0, #64]
    665c:	cmp	x0, x1
    6660:	b.cs	662c <GOMP_task_reduction_remap+0x114>  // b.hs, b.nlast
    6664:	add	x5, x3, #0x1
    6668:	b	6634 <GOMP_task_reduction_remap+0x11c>
    666c:	add	x2, x2, x6
    6670:	ldr	x0, [x2, #56]
    6674:	str	x0, [x21, x22, lsl #3]
    6678:	cmp	x5, x4
    667c:	b.ls	65c8 <GOMP_task_reduction_remap+0xb0>  // b.plast
    6680:	ldr	x1, [x21]
    6684:	adrp	x0, 0 <htab_find>
    6688:	add	x0, x0, #0x0
    668c:	bl	0 <gomp_fatal>
    6690:	ldp	x19, x20, [sp, #16]
    6694:	ldr	x27, [sp, #80]
    6698:	ldp	x21, x22, [sp, #32]
    669c:	ldp	x23, x24, [sp, #48]
    66a0:	ldp	x25, x26, [sp, #64]
    66a4:	ldp	x29, x30, [sp], #96
    66a8:	ret
    66ac:	ldr	x1, [x21]
    66b0:	adrp	x0, 0 <htab_find>
    66b4:	add	x0, x0, #0x0
    66b8:	bl	0 <gomp_fatal>

00000000000066bc <gomp_parallel_reduction_register>:
    66bc:	stp	x29, x30, [sp, #-96]!
    66c0:	mov	x29, sp
    66c4:	stp	x19, x20, [sp, #16]
    66c8:	stp	x21, x22, [sp, #32]
    66cc:	stp	x23, x24, [sp, #48]
    66d0:	stp	x25, x26, [sp, #64]
    66d4:	mov	x25, x0
    66d8:	mov	w23, w1
    66dc:	mov	x0, #0x40                  	// #64
    66e0:	bl	0 <gomp_malloc>
    66e4:	mov	x24, x0
    66e8:	str	xzr, [x0], #8
    66ec:	str	xzr, [x24, #8]
    66f0:	str	xzr, [x0, #16]
    66f4:	str	xzr, [x0, #24]
    66f8:	str	xzr, [x24, #40]
    66fc:	strb	wzr, [x24, #48]
    6700:	strb	wzr, [x24, #49]
    6704:	strb	wzr, [x24, #50]
    6708:	str	xzr, [x24, #56]
    670c:	str	wzr, [x24, #52]
    6710:	mov	x26, x25
    6714:	mov	x22, #0x0                   	// #0
    6718:	mov	w23, w23
    671c:	ldr	x19, [x26, #8]
    6720:	mul	x19, x23, x19
    6724:	mov	x1, x19
    6728:	ldr	x0, [x26, #16]
    672c:	bl	0 <gomp_aligned_alloc>
    6730:	mov	x21, x0
    6734:	mov	x2, x19
    6738:	mov	w1, #0x0                   	// #0
    673c:	bl	0 <memset>
    6740:	str	x21, [x26, #16]
    6744:	add	x19, x19, x21
    6748:	str	x19, [x26, #48]
    674c:	str	xzr, [x26, #40]
    6750:	ldr	x0, [x26]
    6754:	add	x22, x22, x0
    6758:	ldr	x26, [x26, #32]
    675c:	cbnz	x26, 671c <gomp_parallel_reduction_register+0x60>
    6760:	mov	x0, x22
    6764:	bl	144 <htab_create>
    6768:	str	x0, [sp, #88]
    676c:	mov	x22, x25
    6770:	mov	w23, #0x1                   	// #1
    6774:	ldr	x0, [x22]
    6778:	cbz	x0, 67b4 <gomp_parallel_reduction_register+0xf8>
    677c:	add	x20, x22, #0x38
    6780:	mov	x21, x26
    6784:	str	x22, [x20, #16]
    6788:	mov	x19, x20
    678c:	mov	w2, w23
    6790:	mov	x1, x19
    6794:	add	x0, sp, #0x58
    6798:	bl	2c8 <htab_find_slot>
    679c:	str	x19, [x0]
    67a0:	add	x21, x21, #0x1
    67a4:	add	x20, x20, #0x18
    67a8:	ldr	x1, [x22]
    67ac:	cmp	x21, x1
    67b0:	b.cc	6784 <gomp_parallel_reduction_register+0xc8>  // b.lo, b.ul, b.last
    67b4:	ldr	x0, [x22, #32]
    67b8:	cbz	x0, 67c4 <gomp_parallel_reduction_register+0x108>
    67bc:	mov	x22, x0
    67c0:	b	6774 <gomp_parallel_reduction_register+0xb8>
    67c4:	ldr	x0, [sp, #88]
    67c8:	str	x0, [x22, #40]
    67cc:	str	x25, [x24, #40]
    67d0:	mov	x0, x24
    67d4:	ldp	x19, x20, [sp, #16]
    67d8:	ldp	x21, x22, [sp, #32]
    67dc:	ldp	x23, x24, [sp, #48]
    67e0:	ldp	x25, x26, [sp, #64]
    67e4:	ldp	x29, x30, [sp], #96
    67e8:	ret

00000000000067ec <gomp_workshare_task_reduction_register>:
    67ec:	stp	x29, x30, [sp, #-112]!
    67f0:	mov	x29, sp
    67f4:	stp	x19, x20, [sp, #16]
    67f8:	stp	x21, x22, [sp, #32]
    67fc:	stp	x23, x24, [sp, #48]
    6800:	stp	x25, x26, [sp, #64]
    6804:	str	x27, [sp, #80]
    6808:	mov	x26, x0
    680c:	mov	x22, x1
    6810:	adrp	x0, 0 <gomp_tls_data>
    6814:	ldr	x0, [x0]
    6818:	mrs	x1, tpidr_el0
    681c:	add	x0, x1, x0
    6820:	ldr	x27, [x0, #80]
    6824:	ldr	x0, [x0, #16]
    6828:	ldr	x1, [x27, #40]
    682c:	ldr	x23, [x1, #40]
    6830:	mov	x19, x26
    6834:	mov	x21, #0x0                   	// #0
    6838:	ldr	w25, [x0]
    683c:	cbnz	x22, 688c <gomp_workshare_task_reduction_register+0xa0>
    6840:	ldr	x20, [x19, #8]
    6844:	mul	x20, x25, x20
    6848:	mov	x1, x20
    684c:	ldr	x0, [x19, #16]
    6850:	bl	0 <gomp_aligned_alloc>
    6854:	mov	x24, x0
    6858:	mov	x2, x20
    685c:	mov	w1, #0x0                   	// #0
    6860:	bl	0 <memset>
    6864:	str	x24, [x19, #16]
    6868:	add	x20, x20, x24
    686c:	str	x20, [x19, #48]
    6870:	str	xzr, [x19, #40]
    6874:	ldr	x0, [x19]
    6878:	add	x21, x21, x0
    687c:	ldr	x24, [x19, #32]
    6880:	cbz	x24, 68a4 <gomp_workshare_task_reduction_register+0xb8>
    6884:	mov	x19, x24
    6888:	b	683c <gomp_workshare_task_reduction_register+0x50>
    688c:	ldr	x0, [x22, #16]
    6890:	str	x0, [x19, #16]
    6894:	ldr	x0, [x22, #48]
    6898:	str	x0, [x19, #48]
    689c:	ldr	x22, [x22, #32]
    68a0:	b	6870 <gomp_workshare_task_reduction_register+0x84>
    68a4:	mov	x25, x23
    68a8:	str	x23, [x19, #32]
    68ac:	cbz	x23, 699c <gomp_workshare_task_reduction_register+0x1b0>
    68b0:	ldr	x19, [x23, #40]
    68b4:	cbz	x19, 699c <gomp_workshare_task_reduction_register+0x1b0>
    68b8:	ldr	x0, [x19, #8]
    68bc:	ldr	x1, [x19, #16]
    68c0:	sub	x0, x0, x1
    68c4:	add	x0, x0, x21
    68c8:	bl	144 <htab_create>
    68cc:	str	x0, [sp, #104]
    68d0:	ldr	x1, [x19, #8]
    68d4:	ldr	x2, [x19, #16]
    68d8:	sub	x1, x1, x2
    68dc:	str	x1, [x0, #8]
    68e0:	ldr	x21, [x19], #32
    68e4:	add	x21, x19, x21, lsl #3
    68e8:	b	68f8 <gomp_workshare_task_reduction_register+0x10c>
    68ec:	add	x19, x19, #0x8
    68f0:	cmp	x21, x19
    68f4:	b.ls	69a8 <gomp_workshare_task_reduction_register+0x1bc>  // b.plast
    68f8:	ldr	x20, [x19]
    68fc:	cmp	x20, #0x1
    6900:	b.ls	68ec <gomp_workshare_task_reduction_register+0x100>  // b.plast
    6904:	ldr	x1, [x20]
    6908:	eor	x1, x1, x1, lsr #32
    690c:	ldr	x0, [sp, #104]
    6910:	bl	1f8 <find_empty_slot_for_expand>
    6914:	str	x20, [x0]
    6918:	b	68ec <gomp_workshare_task_reduction_register+0x100>
    691c:	ldr	x0, [x22, #32]
    6920:	cmp	x25, x0
    6924:	b.eq	6970 <gomp_workshare_task_reduction_register+0x184>  // b.none
    6928:	mov	x22, x0
    692c:	ldr	x0, [x22]
    6930:	cbz	x0, 691c <gomp_workshare_task_reduction_register+0x130>
    6934:	add	x20, x22, #0x38
    6938:	mov	x21, x24
    693c:	str	x22, [x20, #16]
    6940:	mov	x19, x20
    6944:	mov	w2, w23
    6948:	mov	x1, x19
    694c:	add	x0, sp, #0x68
    6950:	bl	2c8 <htab_find_slot>
    6954:	str	x19, [x0]
    6958:	add	x21, x21, #0x1
    695c:	add	x20, x20, #0x18
    6960:	ldr	x1, [x22]
    6964:	cmp	x21, x1
    6968:	b.cc	693c <gomp_workshare_task_reduction_register+0x150>  // b.lo, b.ul, b.last
    696c:	b	691c <gomp_workshare_task_reduction_register+0x130>
    6970:	ldr	x0, [sp, #104]
    6974:	str	x0, [x22, #40]
    6978:	ldr	x0, [x27, #40]
    697c:	str	x26, [x0, #40]
    6980:	ldp	x19, x20, [sp, #16]
    6984:	ldp	x21, x22, [sp, #32]
    6988:	ldp	x23, x24, [sp, #48]
    698c:	ldp	x25, x26, [sp, #64]
    6990:	ldr	x27, [sp, #80]
    6994:	ldp	x29, x30, [sp], #112
    6998:	ret
    699c:	mov	x0, x21
    69a0:	bl	144 <htab_create>
    69a4:	str	x0, [sp, #104]
    69a8:	mov	x22, x26
    69ac:	mov	w23, #0x1                   	// #1
    69b0:	b	692c <gomp_workshare_task_reduction_register+0x140>

00000000000069b4 <gomp_workshare_taskgroup_start>:
    69b4:	stp	x29, x30, [sp, #-32]!
    69b8:	mov	x29, sp
    69bc:	stp	x19, x20, [sp, #16]
    69c0:	adrp	x0, 0 <gomp_tls_data>
    69c4:	ldr	x0, [x0]
    69c8:	mrs	x1, tpidr_el0
    69cc:	add	x0, x1, x0
    69d0:	ldr	x0, [x0, #16]
    69d4:	cbz	x0, 6a40 <gomp_workshare_taskgroup_start+0x8c>
    69d8:	adrp	x0, 0 <gomp_tls_data>
    69dc:	ldr	x0, [x0]
    69e0:	mrs	x1, tpidr_el0
    69e4:	add	x0, x1, x0
    69e8:	ldr	x20, [x0, #80]
    69ec:	ldr	x19, [x20, #40]
    69f0:	mov	x0, #0x40                  	// #64
    69f4:	bl	0 <gomp_malloc>
    69f8:	mov	x1, x0
    69fc:	str	x19, [x1], #8
    6a00:	str	xzr, [x0, #8]
    6a04:	str	xzr, [x1, #16]
    6a08:	str	xzr, [x1, #24]
    6a0c:	cbz	x19, 6a14 <gomp_workshare_taskgroup_start+0x60>
    6a10:	ldr	x19, [x19, #40]
    6a14:	str	x19, [x0, #40]
    6a18:	strb	wzr, [x0, #48]
    6a1c:	strb	wzr, [x0, #49]
    6a20:	str	xzr, [x0, #56]
    6a24:	str	wzr, [x0, #52]
    6a28:	str	x0, [x20, #40]
    6a2c:	mov	w1, #0x1                   	// #1
    6a30:	strb	w1, [x0, #50]
    6a34:	ldp	x19, x20, [sp, #16]
    6a38:	ldp	x29, x30, [sp], #32
    6a3c:	ret
    6a40:	bl	1884 <gomp_create_artificial_team>
    6a44:	b	69d8 <gomp_workshare_taskgroup_start+0x24>

0000000000006a48 <GOMP_workshare_task_reduction_unregister>:
    6a48:	stp	x29, x30, [sp, #-48]!
    6a4c:	mov	x29, sp
    6a50:	stp	x19, x20, [sp, #16]
    6a54:	stp	x21, x22, [sp, #32]
    6a58:	and	w20, w0, #0xff
    6a5c:	adrp	x19, 0 <gomp_tls_data>
    6a60:	ldr	x19, [x19]
    6a64:	mrs	x0, tpidr_el0
    6a68:	add	x19, x0, x19
    6a6c:	ldr	x22, [x19, #16]
    6a70:	ldr	x0, [x19, #80]
    6a74:	ldr	x0, [x0, #40]
    6a78:	ldr	x21, [x0, #40]
    6a7c:	bl	4220 <GOMP_taskgroup_end>
    6a80:	ldr	w0, [x19, #40]
    6a84:	cbnz	w0, 6aa4 <GOMP_workshare_task_reduction_unregister+0x5c>
    6a88:	mov	x0, x21
    6a8c:	bl	64dc <GOMP_taskgroup_reduction_unregister>
    6a90:	cbz	w20, 6ab0 <GOMP_workshare_task_reduction_unregister+0x68>
    6a94:	ldp	x19, x20, [sp, #16]
    6a98:	ldp	x21, x22, [sp, #32]
    6a9c:	ldp	x29, x30, [sp], #48
    6aa0:	ret
    6aa4:	ldr	x0, [x21, #40]
    6aa8:	bl	0 <free>
    6aac:	b	6a90 <GOMP_workshare_task_reduction_unregister+0x48>
    6ab0:	add	x0, x22, #0x80
    6ab4:	bl	0 <gomp_team_barrier_wait>
    6ab8:	b	6a94 <GOMP_workshare_task_reduction_unregister+0x4c>

0000000000006abc <gomp_ialias_omp_in_final>:
    6abc:	adrp	x0, 0 <gomp_tls_data>
    6ac0:	ldr	x0, [x0]
    6ac4:	mrs	x1, tpidr_el0
    6ac8:	add	x0, x1, x0
    6acc:	ldr	x1, [x0, #80]
    6ad0:	mov	w0, #0x0                   	// #0
    6ad4:	cbz	x1, 6adc <gomp_ialias_omp_in_final+0x20>
    6ad8:	ldrb	w0, [x1, #205]
    6adc:	ret

team.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_free_pool_helper>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	add	x0, x0, #0x40
       c:	bl	0 <gomp_barrier_wait_last>
      10:	mrs	x0, tpidr_el0
      14:	add	x0, x0, #0x0, lsl #12
      18:	add	x0, x0, #0x0
      1c:	str	xzr, [x0, #96]
      20:	str	xzr, [x0, #80]
      24:	bl	0 <pthread_self>
      28:	bl	0 <pthread_detach>
      2c:	mov	x0, #0x0                   	// #0
      30:	bl	0 <pthread_exit>

0000000000000034 <gomp_pause_pool_helper>:
      34:	stp	x29, x30, [sp, #-16]!
      38:	mov	x29, sp
      3c:	add	x0, x0, #0x40
      40:	bl	0 <gomp_barrier_wait_last>
      44:	mrs	x0, tpidr_el0
      48:	add	x0, x0, #0x0, lsl #12
      4c:	add	x0, x0, #0x0
      50:	str	xzr, [x0, #96]
      54:	str	xzr, [x0, #80]
      58:	mov	x0, #0x0                   	// #0
      5c:	bl	0 <pthread_exit>

0000000000000060 <gomp_thread_start>:
      60:	stp	x29, x30, [sp, #-64]!
      64:	mov	x29, sp
      68:	stp	x19, x20, [sp, #16]
      6c:	stp	x21, x22, [sp, #32]
      70:	mrs	x1, tpidr_el0
      74:	add	x1, x1, #0x0, lsl #12
      78:	add	x1, x1, #0x0
      7c:	str	wzr, [x1, #88]
      80:	ldr	x20, [x0]
      84:	ldr	x21, [x0, #8]
      88:	ldr	x2, [x0, #88]
      8c:	str	x2, [x1, #96]
      90:	ldp	x4, x5, [x0, #16]
      94:	stp	x4, x5, [x1, #16]
      98:	ldp	x4, x5, [x0, #32]
      9c:	stp	x4, x5, [x1, #32]
      a0:	ldp	x4, x5, [x0, #48]
      a4:	stp	x4, x5, [x1, #48]
      a8:	ldp	x4, x5, [x0, #64]
      ac:	stp	x4, x5, [x1, #64]
      b0:	ldr	x2, [x0, #80]
      b4:	str	x2, [x1, #80]
      b8:	ldr	w2, [x0, #96]
      bc:	str	w2, [x1, #92]
      c0:	ldr	x2, [x1, #16]
      c4:	ldr	w3, [x1, #40]
      c8:	ldr	x2, [x2, #80]
      cc:	add	x1, x1, #0x58
      d0:	str	x1, [x2, x3, lsl #3]
      d4:	ldrb	w0, [x0, #100]
      d8:	cbz	w0, 154 <gomp_thread_start+0xf4>
      dc:	mrs	x0, tpidr_el0
      e0:	add	x0, x0, #0x0, lsl #12
      e4:	add	x0, x0, #0x0
      e8:	ldr	x22, [x0, #80]
      ec:	ldr	x19, [x0, #16]
      f0:	add	x19, x19, #0x80
      f4:	mov	x0, x19
      f8:	bl	0 <gomp_barrier_wait>
      fc:	mov	x0, x21
     100:	blr	x20
     104:	mov	x0, x19
     108:	bl	0 <gomp_team_barrier_wait_final>
     10c:	ldr	x0, [x22, #56]
     110:	cbnz	x0, 14c <gomp_thread_start+0xec>
     114:	mov	x0, x19
     118:	bl	0 <gomp_barrier_wait_last>
     11c:	bl	0 <pthread_self>
     120:	bl	0 <pthread_detach>
     124:	mrs	x0, tpidr_el0
     128:	add	x0, x0, #0x0, lsl #12
     12c:	add	x0, x0, #0x0
     130:	str	xzr, [x0, #96]
     134:	str	xzr, [x0, #80]
     138:	mov	x0, #0x0                   	// #0
     13c:	ldp	x19, x20, [sp, #16]
     140:	ldp	x21, x22, [sp, #32]
     144:	ldp	x29, x30, [sp], #64
     148:	ret
     14c:	bl	0 <free>
     150:	b	114 <gomp_thread_start+0xb4>
     154:	stp	x23, x24, [sp, #48]
     158:	mrs	x0, tpidr_el0
     15c:	add	x0, x0, #0x0, lsl #12
     160:	add	x0, x0, #0x0
     164:	ldr	w2, [x0, #40]
     168:	ldr	x24, [x0, #96]
     16c:	ldr	x1, [x24], #64
     170:	str	x0, [x1, x2, lsl #3]
     174:	mov	x0, x24
     178:	bl	0 <gomp_barrier_wait>
     17c:	mrs	x19, tpidr_el0
     180:	add	x19, x19, #0x0, lsl #12
     184:	add	x19, x19, #0x0
     188:	ldr	x23, [x19, #16]
     18c:	ldr	x22, [x19, #80]
     190:	mov	x0, x21
     194:	blr	x20
     198:	add	x0, x23, #0x80
     19c:	bl	0 <gomp_team_barrier_wait_final>
     1a0:	ldr	x0, [x22, #56]
     1a4:	cbnz	x0, 1c8 <gomp_thread_start+0x168>
     1a8:	mov	x0, x24
     1ac:	bl	0 <gomp_barrier_wait>
     1b0:	ldr	x20, [x19]
     1b4:	ldr	x21, [x19, #8]
     1b8:	str	xzr, [x19]
     1bc:	cbnz	x20, 188 <gomp_thread_start+0x128>
     1c0:	ldp	x23, x24, [sp, #48]
     1c4:	b	11c <gomp_thread_start+0xbc>
     1c8:	bl	0 <free>
     1cc:	b	1a8 <gomp_thread_start+0x148>

00000000000001d0 <gomp_new_team>:
     1d0:	stp	x29, x30, [sp, #-48]!
     1d4:	mov	x29, sp
     1d8:	stp	x19, x20, [sp, #16]
     1dc:	mov	w20, w0
     1e0:	mrs	x0, tpidr_el0
     1e4:	add	x0, x0, #0x0, lsl #12
     1e8:	add	x0, x0, #0x0
     1ec:	ldr	x0, [x0, #16]
     1f0:	cbz	x0, 2ec <gomp_new_team+0x11c>
     1f4:	mov	w1, w20
     1f8:	ubfiz	x0, x20, #3, #32
     1fc:	sub	x0, x0, x1
     200:	lsl	x0, x0, #2
     204:	sub	x0, x0, x1
     208:	lsl	x0, x0, #3
     20c:	add	x0, x0, #0x540
     210:	bl	0 <gomp_malloc>
     214:	mov	x19, x0
     218:	str	w20, [x0, #128]
     21c:	str	w20, [x0, #192]
     220:	str	w20, [x0, #196]
     224:	str	wzr, [x0, #132]
     228:	str	wzr, [x0, #1280]
     22c:	str	w20, [x0]
     230:	mov	w0, #0x8                   	// #8
     234:	str	w0, [x19, #4]
     238:	str	xzr, [x19, #112]
     23c:	add	x0, x19, #0x100
     240:	str	x0, [x19, #88]
     244:	mov	w2, w20
     248:	mov	x1, #0x0                   	// #0
     24c:	bl	0 <gomp_init_work_share>
     250:	str	xzr, [x19, #312]
     254:	str	xzr, [x19, #104]
     258:	add	x0, x19, #0x180
     25c:	str	x0, [x19, #96]
     260:	add	x0, x19, #0x200
     264:	str	x0, [x19, #464]
     268:	add	x0, x19, #0x280
     26c:	str	x0, [x19, #592]
     270:	add	x0, x19, #0x300
     274:	str	x0, [x19, #720]
     278:	add	x0, x19, #0x380
     27c:	str	x0, [x19, #848]
     280:	add	x0, x19, #0x400
     284:	str	x0, [x19, #976]
     288:	add	x0, x19, #0x480
     28c:	str	x0, [x19, #1104]
     290:	str	xzr, [x19, #1232]
     294:	str	wzr, [x19, #72]
     298:	mov	w1, w20
     29c:	add	x0, x1, w20, uxtw #1
     2a0:	add	x0, x1, x0, lsl #2
     2a4:	lsl	x0, x0, #4
     2a8:	add	x0, x0, #0x540
     2ac:	add	x1, x19, x0
     2b0:	str	x1, [x19, #80]
     2b4:	add	x1, x19, #0x48
     2b8:	str	x1, [x19, x0]
     2bc:	str	xzr, [x19, #1288]
     2c0:	str	xzr, [x19, #1304]
     2c4:	str	xzr, [x19, #1312]
     2c8:	str	wzr, [x19, #1320]
     2cc:	str	wzr, [x19, #1324]
     2d0:	str	wzr, [x19, #1328]
     2d4:	str	wzr, [x19, #1332]
     2d8:	str	wzr, [x19, #1336]
     2dc:	mov	x0, x19
     2e0:	ldp	x19, x20, [sp, #16]
     2e4:	ldp	x29, x30, [sp], #48
     2e8:	ret
     2ec:	str	x21, [sp, #32]
     2f0:	mrs	x0, tpidr_el0
     2f4:	add	x0, x0, #0x0, lsl #12
     2f8:	add	x0, x0, #0x0
     2fc:	ldr	x21, [x0, #96]
     300:	cbz	x21, 320 <gomp_new_team+0x150>
     304:	ldr	x19, [x21, #16]
     308:	cbz	x19, 370 <gomp_new_team+0x1a0>
     30c:	ldr	w0, [x19]
     310:	cmp	w20, w0
     314:	b.eq	364 <gomp_new_team+0x194>  // b.none
     318:	ldr	x21, [sp, #32]
     31c:	b	1f4 <gomp_new_team+0x24>
     320:	mov	x0, #0xc0                  	// #192
     324:	bl	0 <gomp_malloc>
     328:	mov	x21, x0
     32c:	str	xzr, [x0]
     330:	str	wzr, [x0, #8]
     334:	str	wzr, [x0, #12]
     338:	str	xzr, [x0, #16]
     33c:	mov	w0, w20
     340:	str	x0, [x21, #24]
     344:	mrs	x1, tpidr_el0
     348:	add	x1, x1, #0x0, lsl #12
     34c:	add	x1, x1, #0x0
     350:	str	x21, [x1, #96]
     354:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
     358:	ldr	w0, [x0]
     35c:	bl	0 <pthread_setspecific>
     360:	b	304 <gomp_new_team+0x134>
     364:	str	xzr, [x21, #16]
     368:	ldr	x21, [sp, #32]
     36c:	b	230 <gomp_new_team+0x60>
     370:	ldr	x21, [sp, #32]
     374:	b	1f4 <gomp_new_team+0x24>

0000000000000378 <gomp_team_start>:
     378:	stp	x29, x30, [sp, #-320]!
     37c:	mov	x29, sp
     380:	stp	x19, x20, [sp, #16]
     384:	stp	x21, x22, [sp, #32]
     388:	stp	x23, x24, [sp, #48]
     38c:	stp	x25, x26, [sp, #64]
     390:	stp	x27, x28, [sp, #80]
     394:	str	x0, [x29, #200]
     398:	str	x1, [x29, #192]
     39c:	str	w2, [x29, #228]
     3a0:	mov	w20, w3
     3a4:	mov	x22, x4
     3a8:	str	x5, [x29, #136]
     3ac:	mrs	x0, tpidr_el0
     3b0:	add	x0, x0, #0x0, lsl #12
     3b4:	add	x0, x0, #0x0
     3b8:	ldr	w1, [x0, #44]
     3bc:	str	w1, [x29, #176]
     3c0:	cmp	w1, #0x0
     3c4:	cset	w1, ne  // ne = any
     3c8:	str	w1, [x29, #180]
     3cc:	ldr	x25, [x0, #96]
     3d0:	ldr	x2, [x0, #80]
     3d4:	str	x2, [x29, #208]
     3d8:	add	x1, x2, #0x90
     3dc:	adrp	x0, 0 <gomp_global_icv>
     3e0:	add	x0, x0, #0x0
     3e4:	cmp	x2, #0x0
     3e8:	csel	x0, x0, x1, eq  // eq = none
     3ec:	str	x0, [x29, #232]
     3f0:	adrp	x0, 0 <gomp_places_list>
     3f4:	ldr	x0, [x0]
     3f8:	cbnz	x0, 574 <gomp_team_start+0x1fc>
     3fc:	mrs	x0, tpidr_el0
     400:	add	x0, x0, #0x0, lsl #12
     404:	add	x0, x0, #0x0
     408:	ldp	x4, x5, [x0, #16]
     40c:	stp	x4, x5, [x22, #8]
     410:	ldp	x4, x5, [x0, #32]
     414:	stp	x4, x5, [x22, #24]
     418:	ldp	x4, x5, [x0, #48]
     41c:	stp	x4, x5, [x22, #40]
     420:	ldp	x2, x3, [x0, #64]
     424:	stp	x2, x3, [x22, #56]
     428:	str	x22, [x0, #16]
     42c:	str	wzr, [x0, #40]
     430:	ldr	w2, [x0, #44]
     434:	add	w2, w2, #0x1
     438:	str	w2, [x0, #44]
     43c:	ldr	w0, [x29, #228]
     440:	cmp	w0, #0x1
     444:	b.ls	460 <gomp_team_start+0xe8>  // b.plast
     448:	mrs	x0, tpidr_el0
     44c:	add	x0, x0, #0x0, lsl #12
     450:	add	x0, x0, #0x0
     454:	ldr	w1, [x0, #48]
     458:	add	w1, w1, #0x1
     45c:	str	w1, [x0, #48]
     460:	add	x0, x22, #0x100
     464:	str	x0, [x29, #168]
     468:	mrs	x1, tpidr_el0
     46c:	add	x1, x1, #0x0, lsl #12
     470:	add	x1, x1, #0x0
     474:	str	x0, [x1, #24]
     478:	str	xzr, [x1, #32]
     47c:	str	xzr, [x1, #64]
     480:	str	xzr, [x1, #72]
     484:	add	x0, x22, #0x540
     488:	str	x0, [x1, #80]
     48c:	ldr	x1, [x29, #232]
     490:	ldr	x1, [x1]
     494:	str	x1, [x29, #216]
     498:	adrp	x1, 0 <gomp_nthreads_var_list>
     49c:	ldr	x1, [x1]
     4a0:	cbnz	x1, 600 <gomp_team_start+0x288>
     4a4:	ldr	x1, [x29, #232]
     4a8:	ldrb	w3, [x1, #26]
     4ac:	str	w3, [x29, #164]
     4b0:	cbz	w3, 4c4 <gomp_team_start+0x14c>
     4b4:	and	w1, w20, #0x7
     4b8:	tst	x20, #0x7
     4bc:	csel	w1, w1, w3, ne  // ne = any
     4c0:	str	w1, [x29, #164]
     4c4:	adrp	x1, 0 <gomp_bind_var_list>
     4c8:	ldr	x1, [x1]
     4cc:	ldr	w3, [x29, #164]
     4d0:	str	w3, [x29, #224]
     4d4:	cbnz	x1, 620 <gomp_team_start+0x2a8>
     4d8:	ldr	x2, [x29, #232]
     4dc:	ldr	x1, [x29, #208]
     4e0:	bl	0 <gomp_init_task>
     4e4:	mrs	x0, tpidr_el0
     4e8:	add	x0, x0, #0x0, lsl #12
     4ec:	add	x0, x0, #0x0
     4f0:	ldr	x0, [x0, #80]
     4f4:	ldr	x1, [x29, #136]
     4f8:	str	x1, [x0, #40]
     4fc:	ldr	x0, [x29, #216]
     500:	str	x0, [x22, #1488]
     504:	ldrb	w0, [x29, #224]
     508:	strb	w0, [x22, #1514]
     50c:	ldr	w0, [x29, #228]
     510:	cmp	w0, #0x1
     514:	b.eq	11e8 <gomp_team_start+0xe70>  // b.none
     518:	adrp	x0, 0 <gomp_places_list>
     51c:	ldr	x0, [x0]
     520:	cbnz	x0, 644 <gomp_team_start+0x2cc>
     524:	str	wzr, [x29, #148]
     528:	str	wzr, [x29, #160]
     52c:	str	wzr, [x29, #124]
     530:	str	wzr, [x29, #128]
     534:	str	wzr, [x29, #164]
     538:	ldr	w0, [x29, #176]
     53c:	cbnz	w0, 1340 <gomp_team_start+0xfc8>
     540:	ldr	w0, [x25, #12]
     544:	str	w0, [x29, #132]
     548:	ldr	w1, [x29, #228]
     54c:	mov	w28, w1
     550:	cmp	w1, w0
     554:	b.ls	7e0 <gomp_team_start+0x468>  // b.plast
     558:	mov	w28, w0
     55c:	cbnz	w0, 7b8 <gomp_team_start+0x440>
     560:	str	w1, [x25, #64]
     564:	str	w1, [x25, #128]
     568:	str	w1, [x25, #132]
     56c:	str	wzr, [x25, #68]
     570:	b	7e0 <gomp_team_start+0x468>
     574:	mrs	x0, tpidr_el0
     578:	add	x0, x0, #0x0, lsl #12
     57c:	add	x0, x0, #0x0
     580:	ldr	w0, [x0, #92]
     584:	cbnz	w0, 3fc <gomp_team_start+0x84>
     588:	bl	0 <gomp_init_affinity>
     58c:	ldr	w0, [x29, #228]
     590:	cmp	w0, #0x1
     594:	cset	w1, eq  // eq = none
     598:	adrp	x0, 0 <gomp_display_affinity_var>
     59c:	ldrb	w0, [x0]
     5a0:	tst	w1, w0
     5a4:	b.eq	3fc <gomp_team_start+0x84>  // b.none
     5a8:	bl	0 <pthread_self>
     5ac:	mrs	x21, tpidr_el0
     5b0:	add	x21, x21, #0x0, lsl #12
     5b4:	add	x21, x21, #0x0
     5b8:	add	x23, x21, #0x10
     5bc:	ldr	w2, [x21, #92]
     5c0:	mov	x1, x23
     5c4:	bl	0 <gomp_display_affinity_thread>
     5c8:	ldp	x2, x3, [x21, #16]
     5cc:	stp	x2, x3, [x22, #8]
     5d0:	ldp	x2, x3, [x21, #32]
     5d4:	stp	x2, x3, [x22, #24]
     5d8:	ldp	x2, x3, [x21, #48]
     5dc:	stp	x2, x3, [x22, #40]
     5e0:	ldp	x2, x3, [x21, #64]
     5e4:	stp	x2, x3, [x22, #56]
     5e8:	str	x22, [x21, #16]
     5ec:	str	wzr, [x21, #40]
     5f0:	ldr	w2, [x21, #44]
     5f4:	add	w2, w2, #0x1
     5f8:	str	w2, [x21, #44]
     5fc:	b	460 <gomp_team_start+0xe8>
     600:	mov	w4, w2
     604:	adrp	x3, 0 <gomp_nthreads_var_list_len>
     608:	ldr	x3, [x3]
     60c:	cmp	x3, w2, uxtw
     610:	b.ls	4a4 <gomp_team_start+0x12c>  // b.plast
     614:	ldr	x1, [x1, x4, lsl #3]
     618:	str	x1, [x29, #216]
     61c:	b	4a4 <gomp_team_start+0x12c>
     620:	adrp	x3, 0 <gomp_bind_var_list_len>
     624:	ldr	x3, [x3]
     628:	ldr	w4, [x29, #164]
     62c:	str	w4, [x29, #224]
     630:	cmp	x3, w2, uxtw
     634:	b.ls	4d8 <gomp_team_start+0x160>  // b.plast
     638:	ldrb	w1, [x1, w2, uxtw]
     63c:	str	w1, [x29, #224]
     640:	b	4d8 <gomp_team_start+0x160>
     644:	mrs	x0, tpidr_el0
     648:	add	x0, x0, #0x0, lsl #12
     64c:	add	x0, x0, #0x0
     650:	ldr	w0, [x0, #92]
     654:	sub	w0, w0, #0x1
     658:	str	w0, [x29, #160]
     65c:	ldr	w0, [x29, #164]
     660:	cmp	w0, #0x3
     664:	b.eq	688 <gomp_team_start+0x310>  // b.none
     668:	cmp	w0, #0x4
     66c:	b.eq	6c0 <gomp_team_start+0x348>  // b.none
     670:	cmp	w0, #0x1
     674:	b.eq	688 <gomp_team_start+0x310>  // b.none
     678:	str	wzr, [x29, #148]
     67c:	str	wzr, [x29, #124]
     680:	str	wzr, [x29, #128]
     684:	b	538 <gomp_team_start+0x1c0>
     688:	mrs	x0, tpidr_el0
     68c:	add	x0, x0, #0x0, lsl #12
     690:	add	x0, x0, #0x0
     694:	ldr	w0, [x0, #56]
     698:	ldr	w1, [x29, #228]
     69c:	cmp	w0, w1
     6a0:	b.cs	7a4 <gomp_team_start+0x42c>  // b.hs, b.nlast
     6a4:	udiv	w2, w1, w0
     6a8:	str	w2, [x29, #128]
     6ac:	msub	w0, w2, w0, w1
     6b0:	str	w0, [x29, #124]
     6b4:	mov	w0, #0x1                   	// #1
     6b8:	str	w0, [x29, #148]
     6bc:	b	538 <gomp_team_start+0x1c0>
     6c0:	mrs	x0, tpidr_el0
     6c4:	add	x0, x0, #0x0, lsl #12
     6c8:	add	x0, x0, #0x0
     6cc:	ldr	w0, [x0, #56]
     6d0:	ldr	w1, [x29, #228]
     6d4:	cmp	w0, w1
     6d8:	b.cc	76c <gomp_team_start+0x3f4>  // b.lo, b.ul, b.last
     6dc:	udiv	w3, w0, w1
     6e0:	str	w3, [x29, #128]
     6e4:	add	w2, w3, #0x1
     6e8:	msub	w0, w3, w1, w0
     6ec:	madd	w0, w3, w0, w0
     6f0:	mrs	x1, tpidr_el0
     6f4:	add	x1, x1, #0x0, lsl #12
     6f8:	add	x1, x1, #0x0
     6fc:	ldr	w1, [x1, #52]
     700:	add	w0, w0, w1
     704:	str	w0, [x29, #124]
     708:	ldr	w3, [x29, #160]
     70c:	cmp	w3, w0
     710:	b.cs	748 <gomp_team_start+0x3d0>  // b.hs, b.nlast
     714:	sub	w0, w3, w1
     718:	udiv	w1, w0, w2
     71c:	msub	w0, w1, w2, w0
     720:	sub	w0, w3, w0
     724:	str	w0, [x29, #160]
     728:	mrs	x0, tpidr_el0
     72c:	add	x0, x0, #0x0, lsl #12
     730:	add	x0, x0, #0x0
     734:	str	w2, [x0, #56]
     738:	ldr	w1, [x29, #160]
     73c:	str	w1, [x0, #52]
     740:	str	wzr, [x29, #148]
     744:	b	538 <gomp_team_start+0x1c0>
     748:	ldr	w3, [x29, #160]
     74c:	ldr	w0, [x29, #124]
     750:	sub	w1, w3, w0
     754:	ldr	w2, [x29, #128]
     758:	udiv	w0, w1, w2
     75c:	msub	w0, w0, w2, w1
     760:	sub	w0, w3, w0
     764:	str	w0, [x29, #160]
     768:	b	728 <gomp_team_start+0x3b0>
     76c:	ldr	w2, [x29, #228]
     770:	udiv	w1, w2, w0
     774:	str	w1, [x29, #128]
     778:	msub	w0, w1, w0, w2
     77c:	str	w0, [x29, #124]
     780:	mrs	x0, tpidr_el0
     784:	add	x0, x0, #0x0, lsl #12
     788:	add	x0, x0, #0x0
     78c:	ldr	w1, [x29, #160]
     790:	str	w1, [x0, #52]
     794:	mov	w1, #0x1                   	// #1
     798:	str	w1, [x0, #56]
     79c:	str	w1, [x29, #148]
     7a0:	b	538 <gomp_team_start+0x1c0>
     7a4:	mov	w0, #0x1                   	// #1
     7a8:	str	w0, [x29, #148]
     7ac:	str	wzr, [x29, #124]
     7b0:	str	w0, [x29, #128]
     7b4:	b	538 <gomp_team_start+0x1c0>
     7b8:	ldr	w0, [x25, #64]
     7bc:	ldr	w2, [x29, #228]
     7c0:	sub	w0, w2, w0
     7c4:	add	x1, x25, #0x80
     7c8:	ldaxr	w3, [x1]
     7cc:	add	w3, w3, w0
     7d0:	stlxr	w4, w3, [x1]
     7d4:	cbnz	w4, 7c8 <gomp_team_start+0x450>
     7d8:	str	w2, [x25, #64]
     7dc:	ldr	w28, [x29, #132]
     7e0:	ldr	w1, [x29, #228]
     7e4:	str	w1, [x25, #12]
     7e8:	ldr	w0, [x25, #8]
     7ec:	cmp	w0, w1
     7f0:	b.ls	854 <gomp_team_start+0x4dc>  // b.plast
     7f4:	cmp	w28, #0x1
     7f8:	b.ls	e88 <gomp_team_start+0xb10>  // b.plast
     7fc:	ldr	w1, [x29, #132]
     800:	ubfiz	x0, x1, #3, #32
     804:	str	x0, [x29, #104]
     808:	ldr	w0, [x29, #228]
     80c:	sub	w0, w0, w1
     810:	lsl	x0, x0, #3
     814:	str	x0, [x29, #96]
     818:	ldr	w0, [x29, #176]
     81c:	str	w0, [x29, #144]
     820:	str	wzr, [x29, #120]
     824:	str	xzr, [x29, #152]
     828:	mov	w20, #0x1                   	// #1
     82c:	mrs	x26, tpidr_el0
     830:	add	x26, x26, #0x0, lsl #12
     834:	add	x26, x26, #0x0
     838:	adrp	x27, 0 <gomp_places_list>
     83c:	sub	w0, w1, #0x1
     840:	str	w0, [x29, #116]
     844:	str	w20, [x29, #112]
     848:	str	x19, [x29, #184]
     84c:	ldr	x24, [x29, #136]
     850:	b	c4c <gomp_team_start+0x8d4>
     854:	ldr	w0, [x29, #228]
     858:	add	w1, w0, #0x1
     85c:	str	w1, [x25, #8]
     860:	ubfiz	x1, x1, #3, #32
     864:	ldr	x0, [x25]
     868:	bl	0 <gomp_realloc>
     86c:	str	x0, [x25]
     870:	mrs	x1, tpidr_el0
     874:	add	x1, x1, #0x0, lsl #12
     878:	add	x1, x1, #0x0
     87c:	str	x1, [x0]
     880:	b	7f4 <gomp_team_start+0x47c>
     884:	ldr	w0, [x29, #128]
     888:	ldr	w1, [x29, #148]
     88c:	cmp	w0, w1
     890:	b.eq	8dc <gomp_team_start+0x564>  // b.none
     894:	ldr	w0, [x29, #148]
     898:	add	w0, w0, #0x1
     89c:	str	w0, [x29, #148]
     8a0:	ldr	x0, [x29, #152]
     8a4:	cbnz	x0, c80 <gomp_team_start+0x908>
     8a8:	ldr	w0, [x29, #164]
     8ac:	cmp	w0, #0x1
     8b0:	b.ne	9f0 <gomp_team_start+0x678>  // b.any
     8b4:	ldr	x0, [x25]
     8b8:	ldr	x19, [x0, w20, uxtw #3]
     8bc:	ldr	w0, [x19, #92]
     8c0:	cmp	w0, w21
     8c4:	b.ls	a0c <gomp_team_start+0x694>  // b.plast
     8c8:	add	w1, w21, w23
     8cc:	cmp	w0, w1
     8d0:	b.hi	a0c <gomp_team_start+0x694>  // b.pmore
     8d4:	str	xzr, [x29, #152]
     8d8:	b	cd4 <gomp_team_start+0x95c>
     8dc:	ldr	w0, [x29, #160]
     8e0:	add	w2, w0, #0x1
     8e4:	ldr	w1, [x22, #44]
     8e8:	ldr	w0, [x22, #48]
     8ec:	add	w0, w1, w0
     8f0:	cmp	w0, w2
     8f4:	csel	w0, w2, w1, ne  // ne = any
     8f8:	str	w0, [x29, #160]
     8fc:	ldr	w0, [x29, #228]
     900:	ldr	w1, [x29, #124]
     904:	sub	w0, w0, w1
     908:	cmp	w0, w20
     90c:	b.eq	9e0 <gomp_team_start+0x668>  // b.none
     910:	mov	w0, #0x1                   	// #1
     914:	str	w0, [x29, #148]
     918:	b	8a0 <gomp_team_start+0x528>
     91c:	ldr	w0, [x29, #148]
     920:	cbnz	w0, 96c <gomp_team_start+0x5f4>
     924:	ldr	w3, [x29, #128]
     928:	ldr	w2, [x29, #160]
     92c:	add	w1, w3, w2
     930:	ldr	w4, [x29, #124]
     934:	cmp	w4, w2
     938:	cinc	w2, w1, hi  // hi = pmore
     93c:	ldr	w1, [x22, #44]
     940:	ldr	w0, [x22, #48]
     944:	add	w0, w1, w0
     948:	cmp	w0, w2
     94c:	csel	w21, w2, w1, ne  // ne = any
     950:	str	w21, [x29, #160]
     954:	add	w23, w3, #0x1
     958:	cmp	w4, w21
     95c:	b.hi	c78 <gomp_team_start+0x900>  // b.pmore
     960:	ldr	w23, [x29, #128]
     964:	ldr	w21, [x29, #160]
     968:	b	c78 <gomp_team_start+0x900>
     96c:	ldr	w0, [x29, #128]
     970:	ldr	w1, [x29, #148]
     974:	cmp	w0, w1
     978:	b.eq	994 <gomp_team_start+0x61c>  // b.none
     97c:	ldr	w0, [x29, #148]
     980:	add	w0, w0, #0x1
     984:	str	w0, [x29, #148]
     988:	ldr	w21, [x29, #160]
     98c:	mov	w23, #0x1                   	// #1
     990:	b	c78 <gomp_team_start+0x900>
     994:	ldr	w0, [x29, #160]
     998:	add	w2, w0, #0x1
     99c:	ldr	w1, [x22, #44]
     9a0:	ldr	w0, [x22, #48]
     9a4:	add	w0, w1, w0
     9a8:	cmp	w0, w2
     9ac:	csel	w21, w2, w1, ne  // ne = any
     9b0:	str	w21, [x29, #160]
     9b4:	ldr	w0, [x29, #228]
     9b8:	ldr	w1, [x29, #124]
     9bc:	sub	w0, w0, w1
     9c0:	cmp	w0, w20
     9c4:	mov	w23, #0x1                   	// #1
     9c8:	str	w23, [x29, #148]
     9cc:	ldr	w0, [x29, #128]
     9d0:	ldr	w1, [x29, #112]
     9d4:	csel	w0, w0, w1, ne  // ne = any
     9d8:	str	w0, [x29, #128]
     9dc:	b	c78 <gomp_team_start+0x900>
     9e0:	mov	w0, #0x1                   	// #1
     9e4:	str	w0, [x29, #148]
     9e8:	str	w0, [x29, #128]
     9ec:	b	8a0 <gomp_team_start+0x528>
     9f0:	ldr	x0, [x25]
     9f4:	ldr	x1, [x0, w20, uxtw #3]
     9f8:	ldr	w0, [x29, #160]
     9fc:	add	w0, w0, #0x1
     a00:	ldr	w1, [x1, #92]
     a04:	cmp	w1, w0
     a08:	b.eq	8b4 <gomp_team_start+0x53c>  // b.none
     a0c:	ldr	w0, [x22, #48]
     a10:	cmp	w0, #0x40
     a14:	b.hi	a78 <gomp_team_start+0x700>  // b.pmore
     a18:	ubfiz	x0, x0, #3, #32
     a1c:	add	x0, x0, #0xf
     a20:	and	x0, x0, #0xffffffff0
     a24:	sub	sp, sp, x0
     a28:	mov	x0, sp
     a2c:	str	x0, [x29, #152]
     a30:	ldr	w2, [x22, #48]
     a34:	lsl	x2, x2, #3
     a38:	mov	w1, #0x0                   	// #0
     a3c:	ldr	x19, [x29, #152]
     a40:	mov	x0, x19
     a44:	bl	0 <memset>
     a48:	ldr	w0, [x29, #132]
     a4c:	cmp	w20, w0
     a50:	b.cs	ae4 <gomp_team_start+0x76c>  // b.hs, b.nlast
     a54:	mov	w1, w20
     a58:	ubfiz	x0, x20, #3, #32
     a5c:	ldr	w2, [x29, #116]
     a60:	sub	w5, w2, w20
     a64:	add	x1, x1, #0x1
     a68:	add	x5, x5, x1
     a6c:	lsl	x5, x5, #3
     a70:	mov	x6, x19
     a74:	b	a9c <gomp_team_start+0x724>
     a78:	ubfiz	x0, x0, #3, #32
     a7c:	bl	0 <gomp_malloc>
     a80:	str	x0, [x29, #152]
     a84:	b	a30 <gomp_team_start+0x6b8>
     a88:	ldr	x1, [x25]
     a8c:	str	xzr, [x1, x0]
     a90:	add	x0, x0, #0x8
     a94:	cmp	x0, x5
     a98:	b.eq	ae4 <gomp_team_start+0x76c>  // b.none
     a9c:	ldr	x1, [x25]
     aa0:	ldr	x3, [x1, x0]
     aa4:	ldr	w2, [x3, #92]
     aa8:	ldr	w1, [x22, #44]
     aac:	cmp	w2, w1
     ab0:	b.ls	a88 <gomp_team_start+0x710>  // b.plast
     ab4:	ldr	w4, [x22, #48]
     ab8:	add	w4, w1, w4
     abc:	cmp	w2, w4
     ac0:	b.hi	a88 <gomp_team_start+0x710>  // b.pmore
     ac4:	mvn	w1, w1
     ac8:	add	w1, w1, w2
     acc:	ldr	x2, [x6, x1, lsl #3]
     ad0:	str	x2, [x3, #8]
     ad4:	ldr	x2, [x25]
     ad8:	ldr	x2, [x2, x0]
     adc:	str	x2, [x6, x1, lsl #3]
     ae0:	b	a88 <gomp_team_start+0x710>
     ae4:	ldr	w0, [x29, #228]
     ae8:	ldr	w1, [x29, #132]
     aec:	cmp	w0, w1
     af0:	b.hi	b08 <gomp_team_start+0x790>  // b.pmore
     af4:	ldr	w0, [x29, #132]
     af8:	sub	w0, w0, w20
     afc:	str	w0, [x29, #144]
     b00:	ldr	w28, [x29, #228]
     b04:	b	c80 <gomp_team_start+0x908>
     b08:	ldr	x0, [x25]
     b0c:	ldr	x2, [x29, #96]
     b10:	mov	w1, #0x0                   	// #0
     b14:	ldr	x3, [x29, #104]
     b18:	add	x0, x0, x3
     b1c:	bl	0 <memset>
     b20:	b	af4 <gomp_team_start+0x77c>
     b24:	mov	w0, #0x1                   	// #1
     b28:	str	w0, [x29, #120]
     b2c:	ldr	w0, [x29, #164]
     b30:	cmp	w0, #0x1
     b34:	b.ne	c40 <gomp_team_start+0x8c8>  // b.any
     b38:	add	w4, w21, w23
     b3c:	cmp	w4, w21
     b40:	b.ls	b74 <gomp_team_start+0x7fc>  // b.plast
     b44:	sub	w2, w21, w1
     b48:	mov	w0, w21
     b4c:	ldr	x5, [x29, #152]
     b50:	ldr	x3, [x5, w2, uxtw #3]
     b54:	cbnz	x3, b78 <gomp_team_start+0x800>
     b58:	add	w0, w0, #0x1
     b5c:	add	w2, w2, #0x1
     b60:	cmp	w4, w0
     b64:	b.ne	b50 <gomp_team_start+0x7d8>  // b.any
     b68:	mov	w0, #0x1                   	// #1
     b6c:	str	w0, [x29, #120]
     b70:	b	c40 <gomp_team_start+0x8c8>
     b74:	mov	w0, w21
     b78:	cmp	w4, w0
     b7c:	b.ne	ca4 <gomp_team_start+0x92c>  // b.any
     b80:	mov	w0, #0x1                   	// #1
     b84:	str	w0, [x29, #120]
     b88:	b	c40 <gomp_team_start+0x8c8>
     b8c:	ldr	x0, [x25]
     b90:	ldr	x19, [x0, w20, uxtw #3]
     b94:	ldr	w1, [x29, #176]
     b98:	str	x22, [x19, #16]
     b9c:	ldr	x0, [x29, #168]
     ba0:	str	x0, [x19, #24]
     ba4:	str	xzr, [x19, #32]
     ba8:	str	w20, [x19, #40]
     bac:	ldr	w0, [x22, #36]
     bb0:	add	w0, w0, #0x1
     bb4:	str	w0, [x19, #44]
     bb8:	ldr	w0, [x26, #48]
     bbc:	str	w0, [x19, #48]
     bc0:	str	w21, [x19, #52]
     bc4:	str	w23, [x19, #56]
     bc8:	str	xzr, [x19, #64]
     bcc:	str	xzr, [x19, #72]
     bd0:	mov	w23, w20
     bd4:	ubfiz	x21, x20, #1, #32
     bd8:	add	x0, x21, x23
     bdc:	add	x0, x23, x0, lsl #2
     be0:	add	x0, x22, x0, lsl #4
     be4:	add	x0, x0, #0x540
     be8:	str	x0, [x19, #80]
     bec:	str	w1, [x19, #92]
     bf0:	ldr	x2, [x29, #232]
     bf4:	ldr	x1, [x29, #208]
     bf8:	bl	0 <gomp_init_task>
     bfc:	add	x0, x21, x23
     c00:	add	x0, x23, x0, lsl #2
     c04:	add	x0, x22, x0, lsl #4
     c08:	ldr	x1, [x29, #216]
     c0c:	str	x1, [x0, #1488]
     c10:	mov	x21, x0
     c14:	ldrb	w0, [x29, #224]
     c18:	strb	w0, [x21, #1514]
     c1c:	ldr	x0, [x19, #80]
     c20:	str	x24, [x0, #40]
     c24:	ldr	x0, [x29, #200]
     c28:	str	x0, [x19]
     c2c:	ldr	x0, [x29, #192]
     c30:	str	x0, [x19, #8]
     c34:	ldr	x0, [x22, #80]
     c38:	add	x19, x19, #0x58
     c3c:	str	x19, [x0, x23, lsl #3]
     c40:	add	w20, w20, #0x1
     c44:	cmp	w28, w20
     c48:	b.ls	ce0 <gomp_team_start+0x968>  // b.plast
     c4c:	ldr	w21, [x26, #52]
     c50:	ldr	w23, [x26, #56]
     c54:	ldr	x0, [x27]
     c58:	cbz	x0, b8c <gomp_team_start+0x814>
     c5c:	ldr	w0, [x29, #164]
     c60:	cmp	w0, #0x3
     c64:	b.eq	884 <gomp_team_start+0x50c>  // b.none
     c68:	cmp	w0, #0x4
     c6c:	b.eq	91c <gomp_team_start+0x5a4>  // b.none
     c70:	cmp	w0, #0x1
     c74:	b.eq	884 <gomp_team_start+0x50c>  // b.none
     c78:	ldr	x0, [x29, #152]
     c7c:	cbz	x0, 9f0 <gomp_team_start+0x678>
     c80:	ldr	w0, [x29, #144]
     c84:	cbz	w0, d44 <gomp_team_start+0x9cc>
     c88:	ldr	w1, [x22, #44]
     c8c:	ldr	w3, [x29, #160]
     c90:	sub	w0, w3, w1
     c94:	ldr	x2, [x29, #152]
     c98:	ldr	x2, [x2, x0, lsl #3]
     c9c:	mov	w0, w3
     ca0:	cbz	x2, b24 <gomp_team_start+0x7ac>
     ca4:	sub	w0, w0, w1
     ca8:	ldr	x2, [x29, #152]
     cac:	ldr	x19, [x2, x0, lsl #3]
     cb0:	ldr	x1, [x19, #8]
     cb4:	str	x1, [x2, x0, lsl #3]
     cb8:	ldr	w0, [x29, #144]
     cbc:	sub	w0, w0, #0x1
     cc0:	str	w0, [x29, #144]
     cc4:	ldr	x0, [x25]
     cc8:	str	x19, [x0, w20, uxtw #3]
     ccc:	mov	w0, #0x1                   	// #1
     cd0:	str	w0, [x29, #120]
     cd4:	ldr	w0, [x29, #160]
     cd8:	add	w1, w0, #0x1
     cdc:	b	b98 <gomp_team_start+0x820>
     ce0:	ldr	x19, [x29, #184]
     ce4:	ldr	x0, [x29, #152]
     ce8:	cbnz	x0, d54 <gomp_team_start+0x9dc>
     cec:	ldr	w0, [x29, #228]
     cf0:	cmp	w20, w0
     cf4:	b.eq	1214 <gomp_team_start+0xe9c>  // b.none
     cf8:	str	xzr, [x29, #152]
     cfc:	ldr	w0, [x29, #144]
     d00:	ldr	w1, [x29, #228]
     d04:	add	w0, w0, w1
     d08:	ldr	w1, [x29, #132]
     d0c:	cmp	w0, w1
     d10:	b.ls	135c <gomp_team_start+0xfe4>  // b.plast
     d14:	mov	w0, w0
     d18:	ldr	w1, [x29, #132]
     d1c:	sub	x0, x0, w1, uxtw
     d20:	cbz	w1, 1334 <gomp_team_start+0xfbc>
     d24:	adrp	x1, 0 <gomp_managed_threads>
     d28:	add	x1, x1, #0x0
     d2c:	ldxr	x2, [x1]
     d30:	add	x2, x2, x0
     d34:	stlxr	w3, x2, [x1]
     d38:	cbnz	w3, d2c <gomp_team_start+0x9b4>
     d3c:	dmb	ish
     d40:	b	135c <gomp_team_start+0xfe4>
     d44:	ldr	x19, [x29, #184]
     d48:	mov	w0, #0x1                   	// #1
     d4c:	str	w0, [x29, #120]
     d50:	b	ce4 <gomp_team_start+0x96c>
     d54:	ldr	w0, [x29, #228]
     d58:	ldr	w1, [x29, #132]
     d5c:	cmp	w0, w1
     d60:	b.hi	da0 <gomp_team_start+0xa28>  // b.pmore
     d64:	sub	w0, w1, w0
     d68:	ldr	w1, [x29, #144]
     d6c:	cmp	w0, w1
     d70:	cset	w0, eq  // eq = none
     d74:	cbz	w0, db0 <gomp_team_start+0xa38>
     d78:	ldr	w0, [x22, #48]
     d7c:	ldr	w1, [x29, #176]
     d80:	str	w1, [x29, #144]
     d84:	cmp	w0, #0x40
     d88:	b.ls	cec <gomp_team_start+0x974>  // b.plast
     d8c:	ldr	x0, [x29, #152]
     d90:	bl	0 <free>
     d94:	ldr	w0, [x29, #176]
     d98:	str	w0, [x29, #144]
     d9c:	b	cec <gomp_team_start+0x974>
     da0:	ldr	w0, [x29, #132]
     da4:	cmp	w20, w0
     da8:	cset	w0, eq  // eq = none
     dac:	b	d74 <gomp_team_start+0x9fc>
     db0:	ldr	w0, [x29, #164]
     db4:	cmp	w0, #0x3
     db8:	b.eq	e08 <gomp_team_start+0xa90>  // b.none
     dbc:	cmp	w0, #0x4
     dc0:	b.eq	e50 <gomp_team_start+0xad8>  // b.none
     dc4:	cmp	w0, #0x1
     dc8:	b.eq	e08 <gomp_team_start+0xa90>  // b.none
     dcc:	ldr	w0, [x29, #144]
     dd0:	cbz	w0, e00 <gomp_team_start+0xa88>
     dd4:	ldr	w0, [x29, #144]
     dd8:	ldr	w1, [x29, #228]
     ddc:	add	w0, w0, w1
     de0:	ldr	w1, [x25, #64]
     de4:	sub	w1, w0, w1
     de8:	add	x2, x25, #0x80
     dec:	ldaxr	w3, [x2]
     df0:	add	w3, w3, w1
     df4:	stlxr	w4, w3, [x2]
     df8:	cbnz	w4, dec <gomp_team_start+0xa74>
     dfc:	str	w0, [x25, #64]
     e00:	mov	w20, #0x1                   	// #1
     e04:	b	cfc <gomp_team_start+0x984>
     e08:	mrs	x0, tpidr_el0
     e0c:	add	x0, x0, #0x0, lsl #12
     e10:	add	x0, x0, #0x0
     e14:	ldr	w0, [x0, #56]
     e18:	ldr	w1, [x29, #228]
     e1c:	cmp	w0, w1
     e20:	b.cs	e2c <gomp_team_start+0xab4>  // b.hs, b.nlast
     e24:	udiv	w0, w1, w0
     e28:	str	w0, [x29, #128]
     e2c:	mrs	x0, tpidr_el0
     e30:	add	x0, x0, #0x0, lsl #12
     e34:	add	x0, x0, #0x0
     e38:	ldr	w0, [x0, #92]
     e3c:	sub	w0, w0, #0x1
     e40:	str	w0, [x29, #160]
     e44:	mov	w0, #0x1                   	// #1
     e48:	str	w0, [x29, #148]
     e4c:	b	dcc <gomp_team_start+0xa54>
     e50:	mrs	x0, tpidr_el0
     e54:	add	x0, x0, #0x0, lsl #12
     e58:	add	x0, x0, #0x0
     e5c:	ldr	w0, [x0, #52]
     e60:	str	w0, [x29, #160]
     e64:	ldr	w0, [x29, #148]
     e68:	cbz	w0, dcc <gomp_team_start+0xa54>
     e6c:	ldr	w0, [x22, #48]
     e70:	ldr	w1, [x29, #228]
     e74:	udiv	w0, w1, w0
     e78:	str	w0, [x29, #128]
     e7c:	mov	w0, #0x1                   	// #1
     e80:	str	w0, [x29, #148]
     e84:	b	dcc <gomp_team_start+0xa54>
     e88:	ldr	w0, [x29, #176]
     e8c:	str	w0, [x29, #144]
     e90:	str	wzr, [x29, #120]
     e94:	str	xzr, [x29, #152]
     e98:	mov	w20, #0x1                   	// #1
     e9c:	b	cfc <gomp_team_start+0x984>
     ea0:	add	x0, x29, #0x100
     ea4:	bl	0 <pthread_attr_init>
     ea8:	add	x1, x29, #0xf8
     eac:	adrp	x0, 40 <gomp_pause_pool_helper+0xc>
     eb0:	add	x0, x0, #0x0
     eb4:	bl	0 <pthread_attr_getstacksize>
     eb8:	cbz	w0, eec <gomp_team_start+0xb74>
     ebc:	ldr	w2, [x29, #228]
     ec0:	sub	w1, w2, w20
     ec4:	lsl	x0, x1, #3
     ec8:	sub	x0, x0, x1
     ecc:	mov	x1, sp
     ed0:	sub	x0, x1, x0, lsl #4
     ed4:	mov	sp, x0
     ed8:	mov	x19, sp
     edc:	cmp	w2, w20
     ee0:	b.ls	1208 <gomp_team_start+0xe90>  // b.plast
     ee4:	add	x26, x29, #0x100
     ee8:	b	1398 <gomp_team_start+0x1020>
     eec:	ldr	x1, [x29, #248]
     ef0:	add	x0, x29, #0x100
     ef4:	bl	0 <pthread_attr_setstacksize>
     ef8:	b	ebc <gomp_team_start+0xb44>
     efc:	ldr	w0, [x29, #128]
     f00:	ldr	w1, [x29, #148]
     f04:	cmp	w0, w1
     f08:	b.eq	f1c <gomp_team_start+0xba4>  // b.none
     f0c:	ldr	w0, [x29, #148]
     f10:	add	w0, w0, #0x1
     f14:	str	w0, [x29, #148]
     f18:	b	1104 <gomp_team_start+0xd8c>
     f1c:	ldr	w0, [x29, #160]
     f20:	add	w2, w0, #0x1
     f24:	ldr	w1, [x22, #44]
     f28:	ldr	w0, [x22, #48]
     f2c:	add	w0, w1, w0
     f30:	cmp	w0, w2
     f34:	csel	w0, w2, w1, ne  // ne = any
     f38:	str	w0, [x29, #160]
     f3c:	mov	w0, #0x1                   	// #1
     f40:	str	w0, [x29, #148]
     f44:	ldr	w0, [x29, #116]
     f48:	cmp	w0, w20
     f4c:	b.ne	1104 <gomp_team_start+0xd8c>  // b.any
     f50:	mov	w0, #0x1                   	// #1
     f54:	str	w0, [x29, #128]
     f58:	b	1104 <gomp_team_start+0xd8c>
     f5c:	ldr	w0, [x29, #148]
     f60:	cbnz	w0, fa8 <gomp_team_start+0xc30>
     f64:	ldr	w2, [x29, #128]
     f68:	ldr	w3, [x29, #160]
     f6c:	add	w1, w2, w3
     f70:	ldr	w4, [x29, #124]
     f74:	cmp	w4, w3
     f78:	cinc	w3, w1, hi  // hi = pmore
     f7c:	ldr	w1, [x22, #44]
     f80:	ldr	w0, [x22, #48]
     f84:	add	w0, w1, w0
     f88:	cmp	w0, w3
     f8c:	csel	w0, w3, w1, ne  // ne = any
     f90:	str	w0, [x29, #160]
     f94:	str	w0, [x19, #52]
     f98:	cmp	w4, w0
     f9c:	cinc	w0, w2, hi  // hi = pmore
     fa0:	str	w0, [x19, #56]
     fa4:	b	1104 <gomp_team_start+0xd8c>
     fa8:	ldr	w0, [x29, #128]
     fac:	ldr	w1, [x29, #148]
     fb0:	cmp	w0, w1
     fb4:	b.eq	fd8 <gomp_team_start+0xc60>  // b.none
     fb8:	ldr	w0, [x29, #148]
     fbc:	add	w0, w0, #0x1
     fc0:	str	w0, [x29, #148]
     fc4:	ldr	w0, [x29, #160]
     fc8:	str	w0, [x19, #52]
     fcc:	mov	w0, #0x1                   	// #1
     fd0:	str	w0, [x19, #56]
     fd4:	b	1104 <gomp_team_start+0xd8c>
     fd8:	ldr	w0, [x29, #160]
     fdc:	add	w2, w0, #0x1
     fe0:	ldr	w1, [x22, #44]
     fe4:	ldr	w0, [x22, #48]
     fe8:	add	w0, w1, w0
     fec:	cmp	w0, w2
     ff0:	csel	w0, w2, w1, ne  // ne = any
     ff4:	str	w0, [x29, #160]
     ff8:	mov	w0, #0x1                   	// #1
     ffc:	str	w0, [x29, #148]
    1000:	ldr	w0, [x29, #116]
    1004:	cmp	w0, w20
    1008:	b.ne	fc4 <gomp_team_start+0xc4c>  // b.any
    100c:	mov	w0, #0x1                   	// #1
    1010:	str	w0, [x29, #128]
    1014:	b	fc4 <gomp_team_start+0xc4c>
    1018:	ldr	w1, [x29, #160]
    101c:	ldr	x0, [x29, #184]
    1020:	bl	0 <gomp_init_thread_affinity>
    1024:	ldr	x0, [x29, #200]
    1028:	str	x0, [x19]
    102c:	ldr	x0, [x29, #192]
    1030:	str	x0, [x19, #8]
    1034:	str	x22, [x19, #16]
    1038:	str	x26, [x19, #24]
    103c:	str	xzr, [x19, #32]
    1040:	str	w20, [x19, #40]
    1044:	ldr	w0, [x22, #36]
    1048:	add	w0, w0, #0x1
    104c:	str	w0, [x19, #44]
    1050:	ldr	w0, [x23, #48]
    1054:	str	w0, [x19, #48]
    1058:	str	xzr, [x19, #64]
    105c:	str	xzr, [x19, #72]
    1060:	str	x21, [x19, #80]
    1064:	ldr	x2, [x29, #232]
    1068:	ldr	x1, [x29, #208]
    106c:	mov	x0, x21
    1070:	bl	0 <gomp_init_task>
    1074:	ldr	x0, [x29, #216]
    1078:	str	x0, [x21, #144]
    107c:	ldrb	w0, [x29, #224]
    1080:	strb	w0, [x21, #170]
    1084:	ldr	x0, [x19, #80]
    1088:	str	x27, [x0, #40]
    108c:	str	x25, [x19, #88]
    1090:	ldrb	w0, [x29, #180]
    1094:	strb	w0, [x19, #100]
    1098:	mov	x3, x19
    109c:	ldr	x2, [x29, #168]
    10a0:	ldr	x1, [x29, #184]
    10a4:	add	x0, x19, #0x68
    10a8:	bl	0 <pthread_create>
    10ac:	add	x19, x19, #0x70
    10b0:	cbnz	w0, 1128 <gomp_team_start+0xdb0>
    10b4:	add	w20, w20, #0x1
    10b8:	add	x24, x24, #0x8
    10bc:	add	x21, x21, #0xd0
    10c0:	ldr	w0, [x29, #228]
    10c4:	cmp	w0, w20
    10c8:	b.eq	113c <gomp_team_start+0xdc4>  // b.none
    10cc:	ldr	w0, [x23, #52]
    10d0:	str	w0, [x19, #52]
    10d4:	ldr	w0, [x23, #56]
    10d8:	str	w0, [x19, #56]
    10dc:	str	wzr, [x19, #96]
    10e0:	ldr	x0, [x28]
    10e4:	cbz	x0, 1024 <gomp_team_start+0xcac>
    10e8:	ldr	w0, [x29, #164]
    10ec:	cmp	w0, #0x3
    10f0:	b.eq	efc <gomp_team_start+0xb84>  // b.none
    10f4:	cmp	w0, #0x4
    10f8:	b.eq	f5c <gomp_team_start+0xbe4>  // b.none
    10fc:	cmp	w0, #0x1
    1100:	b.eq	efc <gomp_team_start+0xb84>  // b.none
    1104:	ldr	w0, [x29, #160]
    1108:	add	w0, w0, #0x1
    110c:	str	w0, [x19, #96]
    1110:	ldr	x0, [x29, #152]
    1114:	cbz	x0, 1018 <gomp_team_start+0xca0>
    1118:	ldr	x0, [x25]
    111c:	ldr	x0, [x0, x24]
    1120:	cbnz	x0, 10b4 <gomp_team_start+0xd3c>
    1124:	b	1018 <gomp_team_start+0xca0>
    1128:	bl	0 <strerror>
    112c:	mov	x1, x0
    1130:	adrp	x0, 0 <gomp_free_pool_helper>
    1134:	add	x0, x0, #0x0
    1138:	bl	0 <gomp_fatal>
    113c:	ldr	x26, [x29, #184]
    1140:	add	x0, x29, #0x100
    1144:	cmp	x26, x0
    1148:	b.eq	1208 <gomp_team_start+0xe90>  // b.none
    114c:	ldr	w0, [x29, #176]
    1150:	cbz	w0, 1218 <gomp_team_start+0xea0>
    1154:	add	x0, x22, #0x80
    1158:	bl	0 <gomp_barrier_wait>
    115c:	ldr	w0, [x29, #144]
    1160:	cmp	w0, #0x0
    1164:	ldr	w0, [x29, #228]
    1168:	ldr	w1, [x29, #132]
    116c:	ccmp	w0, w1, #0x0, eq  // eq = none
    1170:	b.cs	11d4 <gomp_team_start+0xe5c>  // b.hs, b.nlast
    1174:	ldr	w2, [x29, #228]
    1178:	mov	w0, w2
    117c:	ldr	w1, [x29, #132]
    1180:	sub	x0, x0, w1, uxtw
    1184:	ldr	w3, [x29, #144]
    1188:	neg	w1, w3
    118c:	cmp	w3, #0x0
    1190:	csel	x1, x1, x0, ne  // ne = any
    1194:	ldr	w0, [x25, #64]
    1198:	mov	w3, w2
    119c:	sub	w0, w2, w0
    11a0:	add	x2, x25, #0x80
    11a4:	ldaxr	w4, [x2]
    11a8:	add	w4, w4, w0
    11ac:	stlxr	w5, w4, [x2]
    11b0:	cbnz	w5, 11a4 <gomp_team_start+0xe2c>
    11b4:	str	w3, [x25, #64]
    11b8:	adrp	x0, 0 <gomp_managed_threads>
    11bc:	add	x0, x0, #0x0
    11c0:	ldxr	x2, [x0]
    11c4:	add	x2, x2, x1
    11c8:	stlxr	w3, x2, [x0]
    11cc:	cbnz	w3, 11c0 <gomp_team_start+0xe48>
    11d0:	dmb	ish
    11d4:	adrp	x0, 0 <gomp_display_affinity_var>
    11d8:	ldrb	w0, [x0]
    11dc:	cbnz	w0, 1224 <gomp_team_start+0xeac>
    11e0:	ldr	x0, [x29, #152]
    11e4:	cbnz	x0, 1308 <gomp_team_start+0xf90>
    11e8:	mov	sp, x29
    11ec:	ldp	x19, x20, [sp, #16]
    11f0:	ldp	x21, x22, [sp, #32]
    11f4:	ldp	x23, x24, [sp, #48]
    11f8:	ldp	x25, x26, [sp, #64]
    11fc:	ldp	x27, x28, [sp, #80]
    1200:	ldp	x29, x30, [sp], #320
    1204:	ret
    1208:	add	x0, x29, #0x100
    120c:	bl	0 <pthread_attr_destroy>
    1210:	b	114c <gomp_team_start+0xdd4>
    1214:	str	xzr, [x29, #152]
    1218:	add	x0, x25, #0x40
    121c:	bl	0 <gomp_barrier_wait>
    1220:	b	115c <gomp_team_start+0xde4>
    1224:	ldr	w0, [x29, #180]
    1228:	cmp	w0, #0x0
    122c:	ldr	w0, [x29, #120]
    1230:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    1234:	ldr	w0, [x29, #228]
    1238:	ldr	w1, [x29, #132]
    123c:	ccmp	w0, w1, #0x0, eq  // eq = none
    1240:	b.eq	11e0 <gomp_team_start+0xe68>  // b.none
    1244:	bl	0 <pthread_self>
    1248:	mov	x20, x0
    124c:	mrs	x1, tpidr_el0
    1250:	add	x1, x1, #0x0, lsl #12
    1254:	add	x1, x1, #0x0
    1258:	ldr	w2, [x1, #92]
    125c:	add	x1, x1, #0x10
    1260:	bl	0 <gomp_display_affinity_thread>
    1264:	ldr	w0, [x29, #176]
    1268:	cbz	w0, 12e8 <gomp_team_start+0xf70>
    126c:	ldr	w0, [x29, #228]
    1270:	sub	w0, w0, #0x1
    1274:	mov	x1, #0x70                  	// #112
    1278:	mov	x2, #0x10                  	// #16
    127c:	msub	x0, x0, x1, x2
    1280:	add	x19, x19, x0
    1284:	mov	w20, #0x1                   	// #1
    1288:	ldr	w0, [x29, #228]
    128c:	cmp	w20, w0
    1290:	b.cs	11e0 <gomp_team_start+0xe68>  // b.hs, b.nlast
    1294:	ldr	w2, [x19, #80]
    1298:	mov	x1, x19
    129c:	ldr	x0, [x19, #88]
    12a0:	bl	0 <gomp_display_affinity_thread>
    12a4:	add	w20, w20, #0x1
    12a8:	add	x19, x19, #0x70
    12ac:	b	1288 <gomp_team_start+0xf10>
    12b0:	ldr	x0, [x25]
    12b4:	ldr	x1, [x0, x23]
    12b8:	add	x0, x1, x20
    12bc:	cmp	x19, x1
    12c0:	ldr	w2, [x1, #92]
    12c4:	add	x1, x1, #0x10
    12c8:	csel	x0, x0, x24, ne  // ne = any
    12cc:	bl	0 <gomp_display_affinity_thread>
    12d0:	add	w21, w21, #0x1
    12d4:	add	x23, x23, #0x8
    12d8:	ldr	w0, [x29, #228]
    12dc:	cmp	w21, w0
    12e0:	b.cs	11e0 <gomp_team_start+0xe68>  // b.hs, b.nlast
    12e4:	b	12b0 <gomp_team_start+0xf38>
    12e8:	mov	x23, #0x8                   	// #8
    12ec:	mov	w21, #0x1                   	// #1
    12f0:	mrs	x19, tpidr_el0
    12f4:	add	x19, x19, #0x0, lsl #12
    12f8:	add	x19, x19, #0x0
    12fc:	mov	x24, x20
    1300:	sub	x20, x20, x19
    1304:	b	12d8 <gomp_team_start+0xf60>
    1308:	ldr	w0, [x22, #48]
    130c:	cmp	w0, #0x40
    1310:	b.ls	11e8 <gomp_team_start+0xe70>  // b.plast
    1314:	ldr	x0, [x29, #152]
    1318:	bl	0 <free>
    131c:	b	11e8 <gomp_team_start+0xe70>
    1320:	ldr	w0, [x29, #228]
    1324:	str	wzr, [x29, #120]
    1328:	str	xzr, [x29, #152]
    132c:	str	wzr, [x29, #144]
    1330:	mov	w20, #0x1                   	// #1
    1334:	sub	x0, x0, #0x1
    1338:	str	wzr, [x29, #132]
    133c:	b	d24 <gomp_team_start+0x9ac>
    1340:	ldr	w0, [x29, #228]
    1344:	cbnz	w0, 1320 <gomp_team_start+0xfa8>
    1348:	str	w0, [x29, #144]
    134c:	str	w0, [x29, #132]
    1350:	str	wzr, [x29, #120]
    1354:	str	xzr, [x29, #152]
    1358:	mov	w20, #0x1                   	// #1
    135c:	adrp	x0, 0 <gomp_places_list>
    1360:	ldr	x0, [x0]
    1364:	cbnz	x0, ea0 <gomp_team_start+0xb28>
    1368:	ldr	w2, [x29, #228]
    136c:	sub	w1, w2, w20
    1370:	lsl	x0, x1, #3
    1374:	sub	x0, x0, x1
    1378:	mov	x1, sp
    137c:	sub	x0, x1, x0, lsl #4
    1380:	mov	sp, x0
    1384:	mov	x19, sp
    1388:	adrp	x26, 40 <gomp_pause_pool_helper+0xc>
    138c:	add	x26, x26, #0x0
    1390:	cmp	w2, w20
    1394:	b.ls	114c <gomp_team_start+0xdd4>  // b.plast
    1398:	mov	w21, w20
    139c:	ubfiz	x24, x20, #3, #32
    13a0:	mov	x0, x21
    13a4:	add	x21, x21, w20, uxtw #1
    13a8:	add	x21, x0, x21, lsl #2
    13ac:	add	x21, x22, x21, lsl #4
    13b0:	add	x21, x21, #0x540
    13b4:	mrs	x23, tpidr_el0
    13b8:	add	x23, x23, #0x0, lsl #12
    13bc:	add	x23, x23, #0x0
    13c0:	adrp	x28, 0 <gomp_places_list>
    13c4:	adrp	x27, 0 <gomp_free_pool_helper>
    13c8:	add	x27, x27, #0x0
    13cc:	ldr	w0, [x29, #228]
    13d0:	ldr	w1, [x29, #124]
    13d4:	sub	w0, w0, w1
    13d8:	str	w0, [x29, #116]
    13dc:	str	x26, [x29, #184]
    13e0:	ldr	x26, [x29, #168]
    13e4:	str	x27, [x29, #168]
    13e8:	ldr	x27, [x29, #136]
    13ec:	b	10cc <gomp_team_start+0xd54>

00000000000013f0 <gomp_team_end>:
    13f0:	stp	x29, x30, [sp, #-64]!
    13f4:	mov	x29, sp
    13f8:	stp	x19, x20, [sp, #16]
    13fc:	stp	x21, x22, [sp, #32]
    1400:	mrs	x0, tpidr_el0
    1404:	add	x0, x0, #0x0, lsl #12
    1408:	add	x0, x0, #0x0
    140c:	ldr	x19, [x0, #16]
    1410:	add	x22, x19, #0x80
    1414:	mov	x0, x22
    1418:	bl	0 <gomp_team_barrier_wait_final>
    141c:	ldr	w0, [x19, #1336]
    1420:	cbnz	w0, 14c8 <gomp_team_end+0xd8>
    1424:	mrs	x0, tpidr_el0
    1428:	add	x0, x0, #0x0, lsl #12
    142c:	add	x0, x0, #0x0
    1430:	ldr	x0, [x0, #24]
    1434:	bl	0 <gomp_fini_work_share>
    1438:	bl	0 <gomp_end_task>
    143c:	mrs	x0, tpidr_el0
    1440:	add	x0, x0, #0x0, lsl #12
    1444:	add	x0, x0, #0x0
    1448:	ldp	x4, x5, [x19, #8]
    144c:	stp	x4, x5, [x0, #16]
    1450:	ldp	x4, x5, [x19, #24]
    1454:	stp	x4, x5, [x0, #32]
    1458:	ldp	x4, x5, [x19, #40]
    145c:	stp	x4, x5, [x0, #48]
    1460:	ldp	x2, x3, [x19, #56]
    1464:	stp	x2, x3, [x0, #64]
    1468:	ldr	w0, [x0, #44]
    146c:	cbnz	w0, 1550 <gomp_team_end+0x160>
    1470:	ldr	x20, [x19, #312]
    1474:	cbnz	x20, 1584 <gomp_team_end+0x194>
    1478:	mrs	x0, tpidr_el0
    147c:	add	x0, x0, #0x0, lsl #12
    1480:	add	x0, x0, #0x0
    1484:	ldr	x0, [x0, #16]
    1488:	cbnz	x0, 1598 <gomp_team_end+0x1a8>
    148c:	ldr	w0, [x19]
    1490:	cmp	w0, #0x1
    1494:	b.eq	1598 <gomp_team_end+0x1a8>  // b.none
    1498:	mrs	x0, tpidr_el0
    149c:	add	x0, x0, #0x0, lsl #12
    14a0:	add	x0, x0, #0x0
    14a4:	ldr	x20, [x0, #96]
    14a8:	ldr	x0, [x20, #16]
    14ac:	cbz	x0, 14b4 <gomp_team_end+0xc4>
    14b0:	bl	0 <free>
    14b4:	str	x19, [x20, #16]
    14b8:	ldp	x19, x20, [sp, #16]
    14bc:	ldp	x21, x22, [sp, #32]
    14c0:	ldp	x29, x30, [sp], #64
    14c4:	ret
    14c8:	stp	x23, x24, [sp, #48]
    14cc:	ldr	x23, [x19, #88]
    14d0:	mov	x24, #0x1                   	// #1
    14d4:	b	14f4 <gomp_team_end+0x104>
    14d8:	mov	x0, x21
    14dc:	bl	0 <gomp_ptrlock_get_slow>
    14e0:	mov	x20, x0
    14e4:	cbz	x0, 1520 <gomp_team_end+0x130>
    14e8:	mov	x0, x23
    14ec:	bl	0 <gomp_fini_work_share>
    14f0:	mov	x23, x20
    14f4:	add	x21, x23, #0x50
    14f8:	ldar	x0, [x21]
    14fc:	mov	x20, x0
    1500:	cmp	x0, #0x2
    1504:	b.hi	14e8 <gomp_team_end+0xf8>  // b.pmore
    1508:	ldaxr	x0, [x21]
    150c:	cbnz	x0, 1518 <gomp_team_end+0x128>
    1510:	stxr	w1, x24, [x21]
    1514:	cbnz	w1, 1508 <gomp_team_end+0x118>
    1518:	cmp	x0, #0x0
    151c:	b.ne	14d8 <gomp_team_end+0xe8>  // b.any
    1520:	ldxr	x0, [x21]
    1524:	stlxr	w1, x23, [x21]
    1528:	cbnz	w1, 1520 <gomp_team_end+0x130>
    152c:	cmp	x0, #0x1
    1530:	b.ne	1544 <gomp_team_end+0x154>  // b.any
    1534:	mov	x0, x23
    1538:	bl	0 <gomp_fini_work_share>
    153c:	ldp	x23, x24, [sp, #48]
    1540:	b	1438 <gomp_team_end+0x48>
    1544:	mov	x0, x21
    1548:	bl	0 <gomp_ptrlock_set_slow>
    154c:	b	1534 <gomp_team_end+0x144>
    1550:	adrp	x0, 0 <gomp_managed_threads>
    1554:	add	x0, x0, #0x0
    1558:	ldr	w2, [x19]
    155c:	mov	x1, #0x1                   	// #1
    1560:	sub	x1, x1, x2
    1564:	ldxr	x2, [x0]
    1568:	add	x2, x2, x1
    156c:	stlxr	w3, x2, [x0]
    1570:	cbnz	w3, 1564 <gomp_team_end+0x174>
    1574:	dmb	ish
    1578:	mov	x0, x22
    157c:	bl	0 <gomp_barrier_wait>
    1580:	b	1470 <gomp_team_end+0x80>
    1584:	mov	x0, x20
    1588:	ldr	x20, [x20, #56]
    158c:	bl	0 <free>
    1590:	cbnz	x20, 1584 <gomp_team_end+0x194>
    1594:	b	1478 <gomp_team_end+0x88>
    1598:	mov	x0, x19
    159c:	bl	0 <free>
    15a0:	b	14b8 <gomp_team_end+0xc8>

00000000000015a4 <gomp_free_thread>:
    15a4:	stp	x29, x30, [sp, #-32]!
    15a8:	mov	x29, sp
    15ac:	stp	x19, x20, [sp, #16]
    15b0:	mrs	x0, tpidr_el0
    15b4:	add	x0, x0, #0x0, lsl #12
    15b8:	add	x0, x0, #0x0
    15bc:	ldr	x19, [x0, #96]
    15c0:	cbz	x19, 1670 <gomp_free_thread+0xcc>
    15c4:	ldr	w0, [x19, #12]
    15c8:	cbz	w0, 1644 <gomp_free_thread+0xa0>
    15cc:	cmp	w0, #0x1
    15d0:	b.ls	1608 <gomp_free_thread+0x64>  // b.plast
    15d4:	mov	x1, #0x8                   	// #8
    15d8:	mov	w0, #0x1                   	// #1
    15dc:	adrp	x3, 0 <gomp_free_pool_helper>
    15e0:	add	x3, x3, #0x0
    15e4:	ldr	x2, [x19]
    15e8:	ldr	x2, [x2, x1]
    15ec:	str	x3, [x2]
    15f0:	str	x19, [x2, #8]
    15f4:	add	w0, w0, #0x1
    15f8:	add	x1, x1, #0x8
    15fc:	ldr	w2, [x19, #12]
    1600:	cmp	w2, w0
    1604:	b.hi	15e4 <gomp_free_thread+0x40>  // b.pmore
    1608:	add	x20, x19, #0x40
    160c:	mov	x0, x20
    1610:	bl	0 <gomp_barrier_wait>
    1614:	mov	x0, x20
    1618:	bl	0 <gomp_barrier_wait>
    161c:	adrp	x0, 0 <gomp_managed_threads>
    1620:	add	x0, x0, #0x0
    1624:	ldr	w2, [x19, #12]
    1628:	mov	x1, #0x1                   	// #1
    162c:	sub	x1, x1, x2
    1630:	ldxr	x2, [x0]
    1634:	add	x2, x2, x1
    1638:	stlxr	w3, x2, [x0]
    163c:	cbnz	w3, 1630 <gomp_free_thread+0x8c>
    1640:	dmb	ish
    1644:	ldr	x0, [x19, #16]
    1648:	cbz	x0, 1650 <gomp_free_thread+0xac>
    164c:	bl	0 <free>
    1650:	ldr	x0, [x19]
    1654:	bl	0 <free>
    1658:	mov	x0, x19
    165c:	bl	0 <free>
    1660:	mrs	x0, tpidr_el0
    1664:	add	x0, x0, #0x0, lsl #12
    1668:	add	x0, x0, #0x0
    166c:	str	xzr, [x0, #96]
    1670:	mrs	x0, tpidr_el0
    1674:	add	x0, x0, #0x0, lsl #12
    1678:	add	x0, x0, #0x0
    167c:	ldr	w0, [x0, #44]
    1680:	cbnz	w0, 1698 <gomp_free_thread+0xf4>
    1684:	mrs	x0, tpidr_el0
    1688:	add	x0, x0, #0x0, lsl #12
    168c:	add	x0, x0, #0x0
    1690:	ldr	x0, [x0, #16]
    1694:	cbnz	x0, 16c4 <gomp_free_thread+0x120>
    1698:	mrs	x0, tpidr_el0
    169c:	add	x0, x0, #0x0, lsl #12
    16a0:	add	x0, x0, #0x0
    16a4:	ldr	x19, [x0, #80]
    16a8:	cbz	x19, 16b8 <gomp_free_thread+0x114>
    16ac:	bl	0 <gomp_end_task>
    16b0:	mov	x0, x19
    16b4:	bl	0 <free>
    16b8:	ldp	x19, x20, [sp, #16]
    16bc:	ldp	x29, x30, [sp], #32
    16c0:	ret
    16c4:	bl	13f0 <gomp_team_end>
    16c8:	b	1698 <gomp_free_thread+0xf4>

00000000000016cc <initialize_team>:
    16cc:	stp	x29, x30, [sp, #-16]!
    16d0:	mov	x29, sp
    16d4:	adrp	x1, 15a4 <gomp_free_thread>
    16d8:	add	x1, x1, #0x0
    16dc:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    16e0:	add	x0, x0, #0x0
    16e4:	bl	0 <pthread_key_create>
    16e8:	cbnz	w0, 16f4 <initialize_team+0x28>
    16ec:	ldp	x29, x30, [sp], #16
    16f0:	ret
    16f4:	adrp	x0, 0 <gomp_free_pool_helper>
    16f8:	add	x0, x0, #0x0
    16fc:	bl	0 <gomp_fatal>

0000000000001700 <team_destructor>:
    1700:	stp	x29, x30, [sp, #-16]!
    1704:	mov	x29, sp
    1708:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    170c:	ldr	w0, [x0]
    1710:	bl	0 <pthread_key_delete>
    1714:	ldp	x29, x30, [sp], #16
    1718:	ret

000000000000171c <gomp_pause_host>:
    171c:	stp	x29, x30, [sp, #-64]!
    1720:	mov	x29, sp
    1724:	stp	x19, x20, [sp, #16]
    1728:	stp	x21, x22, [sp, #32]
    172c:	stp	x23, x24, [sp, #48]
    1730:	mrs	x0, tpidr_el0
    1734:	add	x0, x0, #0x0, lsl #12
    1738:	add	x0, x0, #0x0
    173c:	ldr	x20, [x0, #96]
    1740:	ldr	w0, [x0, #44]
    1744:	cbnz	w0, 187c <gomp_pause_host+0x160>
    1748:	cbz	x20, 1864 <gomp_pause_host+0x148>
    174c:	ldr	w0, [x20, #12]
    1750:	cbz	w0, 1834 <gomp_pause_host+0x118>
    1754:	ubfiz	x1, x0, #3, #32
    1758:	add	x1, x1, #0xf
    175c:	and	x1, x1, #0xffffffff0
    1760:	sub	sp, sp, x1
    1764:	mov	x23, sp
    1768:	cmp	w0, #0x1
    176c:	b.ls	17cc <gomp_pause_host+0xb0>  // b.plast
    1770:	mov	x21, #0x1                   	// #1
    1774:	adrp	x24, 0 <gomp_free_pool_helper>
    1778:	add	x24, x24, #0x0
    177c:	mrs	x22, tpidr_el0
    1780:	add	x22, x22, #0x0, lsl #12
    1784:	add	x22, x22, #0x0
    1788:	b	17a4 <gomp_pause_host+0x88>
    178c:	bl	0 <pthread_self>
    1790:	str	x0, [x23, x21, lsl #3]
    1794:	add	x21, x21, #0x1
    1798:	ldr	w0, [x20, #12]
    179c:	cmp	w0, w21
    17a0:	b.ls	17cc <gomp_pause_host+0xb0>  // b.plast
    17a4:	ldr	x0, [x20]
    17a8:	ldr	x19, [x0, x21, lsl #3]
    17ac:	str	x24, [x19]
    17b0:	str	x20, [x19, #8]
    17b4:	cmp	x22, x19
    17b8:	b.eq	178c <gomp_pause_host+0x70>  // b.none
    17bc:	bl	0 <pthread_self>
    17c0:	sub	x19, x19, x22
    17c4:	add	x0, x19, x0
    17c8:	b	1790 <gomp_pause_host+0x74>
    17cc:	add	x19, x20, #0x40
    17d0:	mov	x0, x19
    17d4:	bl	0 <gomp_barrier_wait>
    17d8:	mov	x0, x19
    17dc:	bl	0 <gomp_barrier_wait>
    17e0:	adrp	x0, 0 <gomp_managed_threads>
    17e4:	add	x0, x0, #0x0
    17e8:	ldr	w2, [x20, #12]
    17ec:	mov	x1, #0x1                   	// #1
    17f0:	sub	x1, x1, x2
    17f4:	ldxr	x2, [x0]
    17f8:	add	x2, x2, x1
    17fc:	stlxr	w3, x2, [x0]
    1800:	cbnz	w3, 17f4 <gomp_pause_host+0xd8>
    1804:	dmb	ish
    1808:	ldr	w0, [x20, #12]
    180c:	cmp	w0, #0x1
    1810:	b.ls	1834 <gomp_pause_host+0x118>  // b.plast
    1814:	mov	x19, #0x1                   	// #1
    1818:	mov	x1, #0x0                   	// #0
    181c:	ldr	x0, [x23, x19, lsl #3]
    1820:	bl	0 <pthread_join>
    1824:	add	x19, x19, #0x1
    1828:	ldr	w0, [x20, #12]
    182c:	cmp	w0, w19
    1830:	b.hi	1818 <gomp_pause_host+0xfc>  // b.pmore
    1834:	ldr	x0, [x20, #16]
    1838:	cbz	x0, 1840 <gomp_pause_host+0x124>
    183c:	bl	0 <free>
    1840:	ldr	x0, [x20]
    1844:	bl	0 <free>
    1848:	mov	x0, x20
    184c:	bl	0 <free>
    1850:	mrs	x0, tpidr_el0
    1854:	add	x0, x0, #0x0, lsl #12
    1858:	add	x0, x0, #0x0
    185c:	str	xzr, [x0, #96]
    1860:	mov	w0, #0x0                   	// #0
    1864:	mov	sp, x29
    1868:	ldp	x19, x20, [sp, #16]
    186c:	ldp	x21, x22, [sp, #32]
    1870:	ldp	x23, x24, [sp, #48]
    1874:	ldp	x29, x30, [sp], #64
    1878:	ret
    187c:	mov	w0, #0xffffffff            	// #-1
    1880:	b	1864 <gomp_pause_host+0x148>

0000000000001884 <gomp_new_icv>:
    1884:	stp	x29, x30, [sp, #-32]!
    1888:	mov	x29, sp
    188c:	str	x19, [sp, #16]
    1890:	mov	x0, #0xd0                  	// #208
    1894:	bl	0 <gomp_malloc>
    1898:	mov	x19, x0
    189c:	adrp	x2, 0 <gomp_global_icv>
    18a0:	add	x2, x2, #0x0
    18a4:	mov	x1, #0x0                   	// #0
    18a8:	bl	0 <gomp_init_task>
    18ac:	mrs	x1, tpidr_el0
    18b0:	add	x1, x1, #0x0, lsl #12
    18b4:	add	x1, x1, #0x0
    18b8:	str	x19, [x1, #80]
    18bc:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    18c0:	ldr	w0, [x0]
    18c4:	bl	0 <pthread_setspecific>
    18c8:	add	x0, x19, #0x90
    18cc:	ldr	x19, [sp, #16]
    18d0:	ldp	x29, x30, [sp], #32
    18d4:	ret

work.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_work_share>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	wzr, [x0, #64]
  14:	cbnz	x1, 34 <gomp_init_work_share+0x34>
  18:	add	x0, x0, #0x60
  1c:	str	x0, [x19, #32]
  20:	str	xzr, [x19, #80]
  24:	str	wzr, [x19, #68]
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	ubfiz	x20, x2, #2, #32
  38:	cmp	x1, #0x1
  3c:	add	x20, x20, #0x7
  40:	sub	x0, x1, #0x1
  44:	and	x20, x20, #0xfffffffffffffff8
  48:	add	x20, x20, x0
  4c:	ubfiz	x2, x2, #2, #32
  50:	csel	x20, x2, x20, eq  // eq = none
  54:	cmp	x20, #0x20
  58:	b.hi	88 <gomp_init_work_share+0x88>  // b.pmore
  5c:	add	x0, x19, #0x60
  60:	str	x0, [x19, #32]
  64:	mov	x2, x20
  68:	mov	w1, #0x0                   	// #0
  6c:	ldr	x0, [x19, #32]
  70:	bl	0 <memset>
  74:	str	wzr, [x19, #40]
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	str	w0, [x19, #44]
  80:	str	wzr, [x19, #48]
  84:	b	20 <gomp_init_work_share+0x20>
  88:	mov	x0, x20
  8c:	bl	0 <gomp_malloc>
  90:	str	x0, [x19, #32]
  94:	b	64 <gomp_init_work_share+0x64>

0000000000000098 <gomp_fini_work_share>:
  98:	mov	x1, x0
  9c:	ldr	x0, [x0, #32]
  a0:	add	x1, x1, #0x60
  a4:	cmp	x0, x1
  a8:	b.eq	c0 <gomp_fini_work_share+0x28>  // b.none
  ac:	stp	x29, x30, [sp, #-16]!
  b0:	mov	x29, sp
  b4:	bl	0 <free>
  b8:	ldp	x29, x30, [sp], #16
  bc:	ret
  c0:	ret

00000000000000c4 <gomp_work_share_start>:
  c4:	stp	x29, x30, [sp, #-48]!
  c8:	mov	x29, sp
  cc:	stp	x19, x20, [sp, #16]
  d0:	mov	x19, x0
  d4:	adrp	x1, 0 <gomp_tls_data>
  d8:	ldr	x1, [x1]
  dc:	mrs	x2, tpidr_el0
  e0:	add	x1, x2, x1
  e4:	ldr	x20, [x1, #16]
  e8:	cbz	x20, 174 <gomp_work_share_start+0xb0>
  ec:	adrp	x2, 0 <gomp_tls_data>
  f0:	ldr	x2, [x2]
  f4:	mrs	x1, tpidr_el0
  f8:	add	x2, x1, x2
  fc:	ldr	x1, [x2, #24]
 100:	str	x1, [x2, #32]
 104:	add	x0, x1, #0x50
 108:	ldar	x1, [x0]
 10c:	cmp	x1, #0x2
 110:	b.hi	1b4 <gomp_work_share_start+0xf0>  // b.pmore
 114:	mov	x1, #0x1                   	// #1
 118:	ldaxr	x2, [x0]
 11c:	cbnz	x2, 128 <gomp_work_share_start+0x64>
 120:	stxr	w3, x1, [x0]
 124:	cbnz	w3, 118 <gomp_work_share_start+0x54>
 128:	cmp	x2, #0x0
 12c:	b.ne	1a8 <gomp_work_share_start+0xe4>  // b.any
 130:	str	x21, [sp, #32]
 134:	ldr	x21, [x20, #96]
 138:	cbz	x21, 1d8 <gomp_work_share_start+0x114>
 13c:	ldr	x0, [x21, #80]
 140:	str	x0, [x20, #96]
 144:	ldr	w2, [x20]
 148:	mov	x1, x19
 14c:	mov	x0, x21
 150:	bl	0 <gomp_init_work_share>
 154:	adrp	x0, 0 <gomp_tls_data>
 158:	ldr	x0, [x0]
 15c:	mrs	x1, tpidr_el0
 160:	add	x0, x1, x0
 164:	str	x21, [x0, #24]
 168:	mov	w0, #0x1                   	// #1
 16c:	ldr	x21, [sp, #32]
 170:	b	1cc <gomp_work_share_start+0x108>
 174:	mov	x0, #0x80                  	// #128
 178:	bl	0 <gomp_malloc>
 17c:	mov	x20, x0
 180:	mov	w2, #0x1                   	// #1
 184:	mov	x1, x19
 188:	bl	0 <gomp_init_work_share>
 18c:	adrp	x1, 0 <gomp_tls_data>
 190:	ldr	x1, [x1]
 194:	mrs	x2, tpidr_el0
 198:	add	x1, x2, x1
 19c:	str	x20, [x1, #24]
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	b	1cc <gomp_work_share_start+0x108>
 1a8:	bl	0 <gomp_ptrlock_get_slow>
 1ac:	mov	x1, x0
 1b0:	cbz	x0, 130 <gomp_work_share_start+0x6c>
 1b4:	adrp	x0, 0 <gomp_tls_data>
 1b8:	ldr	x0, [x0]
 1bc:	mrs	x2, tpidr_el0
 1c0:	add	x0, x2, x0
 1c4:	str	x1, [x0, #24]
 1c8:	mov	w0, #0x0                   	// #0
 1cc:	ldp	x19, x20, [sp, #16]
 1d0:	ldp	x29, x30, [sp], #48
 1d4:	ret
 1d8:	ldr	x0, [x20, #104]
 1dc:	cbz	x0, 1f8 <gomp_work_share_start+0x134>
 1e0:	ldr	x21, [x0, #80]
 1e4:	cbz	x21, 1f8 <gomp_work_share_start+0x134>
 1e8:	str	xzr, [x0, #80]
 1ec:	ldr	x0, [x21, #80]
 1f0:	str	x0, [x20, #96]
 1f4:	b	144 <gomp_work_share_start+0x80>
 1f8:	ldr	w1, [x20, #4]
 1fc:	lsl	w1, w1, #1
 200:	str	w1, [x20, #4]
 204:	mov	w1, w1
 208:	lsl	x1, x1, #7
 20c:	mov	x0, #0x40                  	// #64
 210:	bl	0 <gomp_aligned_alloc>
 214:	mov	x21, x0
 218:	ldr	x0, [x20, #312]
 21c:	str	x0, [x21, #56]
 220:	str	x21, [x20, #312]
 224:	add	x0, x21, #0x80
 228:	str	x0, [x20, #96]
 22c:	ldr	w0, [x20, #4]
 230:	sub	w0, w0, #0x1
 234:	cmp	w0, #0x1
 238:	b.ls	27c <gomp_work_share_start+0x1b8>  // b.plast
 23c:	mov	w2, #0x1                   	// #1
 240:	mov	w1, w2
 244:	add	w2, w2, #0x1
 248:	ubfiz	x1, x1, #7, #32
 24c:	add	x1, x21, x1
 250:	ubfiz	x0, x2, #7, #32
 254:	add	x0, x21, x0
 258:	str	x0, [x1, #80]
 25c:	ldr	w0, [x20, #4]
 260:	sub	w0, w0, #0x1
 264:	cmp	w2, w0
 268:	b.cc	240 <gomp_work_share_start+0x17c>  // b.lo, b.ul, b.last
 26c:	ubfiz	x2, x2, #7, #32
 270:	add	x2, x21, x2
 274:	str	xzr, [x2, #80]
 278:	b	144 <gomp_work_share_start+0x80>
 27c:	mov	w2, #0x1                   	// #1
 280:	b	26c <gomp_work_share_start+0x1a8>

0000000000000284 <gomp_work_share_end>:
 284:	stp	x29, x30, [sp, #-48]!
 288:	mov	x29, sp
 28c:	stp	x19, x20, [sp, #16]
 290:	stp	x21, x22, [sp, #32]
 294:	adrp	x0, 0 <gomp_tls_data>
 298:	ldr	x0, [x0]
 29c:	mrs	x1, tpidr_el0
 2a0:	add	x0, x1, x0
 2a4:	ldr	x21, [x0, #16]
 2a8:	cbz	x21, 36c <gomp_work_share_end+0xe8>
 2ac:	add	x22, x21, #0x80
 2b0:	add	x0, x21, #0x84
 2b4:	ldar	w19, [x0]
 2b8:	and	w19, w19, #0xfffffffc
 2bc:	add	x0, x21, #0xc0
 2c0:	ldaxr	w1, [x0]
 2c4:	sub	w1, w1, #0x1
 2c8:	stlxr	w2, w1, [x0]
 2cc:	cbnz	w2, 2c0 <gomp_work_share_end+0x3c>
 2d0:	orr	w0, w19, #0x1
 2d4:	cmp	w1, #0x0
 2d8:	csel	w19, w0, w19, eq  // eq = none
 2dc:	tbz	w19, #0, 33c <gomp_work_share_end+0xb8>
 2e0:	adrp	x0, 0 <gomp_tls_data>
 2e4:	ldr	x0, [x0]
 2e8:	mrs	x1, tpidr_el0
 2ec:	add	x0, x1, x0
 2f0:	ldr	x20, [x0, #32]
 2f4:	cbz	x20, 33c <gomp_work_share_end+0xb8>
 2f8:	adrp	x0, 0 <gomp_tls_data>
 2fc:	ldr	x0, [x0]
 300:	add	x0, x1, x0
 304:	ldr	x0, [x0, #24]
 308:	str	x0, [x21, #88]
 30c:	mov	x0, x20
 310:	bl	98 <gomp_fini_work_share>
 314:	add	x0, x21, #0x68
 318:	ldr	x1, [x21, #104]
 31c:	str	x1, [x20, #80]
 320:	ldxr	x2, [x0]
 324:	cmp	x2, x1
 328:	b.ne	334 <gomp_work_share_end+0xb0>  // b.any
 32c:	stlxr	w3, x20, [x0]
 330:	cbnz	w3, 320 <gomp_work_share_end+0x9c>
 334:	dmb	ish
 338:	b.ne	318 <gomp_work_share_end+0x94>  // b.any
 33c:	mov	w1, w19
 340:	mov	x0, x22
 344:	bl	0 <gomp_team_barrier_wait_end>
 348:	adrp	x0, 0 <gomp_tls_data>
 34c:	ldr	x0, [x0]
 350:	mrs	x1, tpidr_el0
 354:	add	x0, x1, x0
 358:	str	xzr, [x0, #32]
 35c:	ldp	x19, x20, [sp, #16]
 360:	ldp	x21, x22, [sp, #32]
 364:	ldp	x29, x30, [sp], #48
 368:	ret
 36c:	adrp	x19, 0 <gomp_tls_data>
 370:	ldr	x19, [x19]
 374:	add	x19, x1, x19
 378:	ldr	x20, [x19, #24]
 37c:	mov	x0, x20
 380:	bl	98 <gomp_fini_work_share>
 384:	mov	x0, x20
 388:	bl	0 <free>
 38c:	str	xzr, [x19, #24]
 390:	b	35c <gomp_work_share_end+0xd8>

0000000000000394 <gomp_work_share_end_cancel>:
 394:	stp	x29, x30, [sp, #-48]!
 398:	mov	x29, sp
 39c:	stp	x19, x20, [sp, #16]
 3a0:	stp	x21, x22, [sp, #32]
 3a4:	adrp	x0, 0 <gomp_tls_data>
 3a8:	ldr	x0, [x0]
 3ac:	mrs	x1, tpidr_el0
 3b0:	add	x0, x1, x0
 3b4:	ldr	x20, [x0, #16]
 3b8:	add	x22, x20, #0x80
 3bc:	add	x0, x20, #0x84
 3c0:	ldar	w19, [x0]
 3c4:	and	w19, w19, #0xfffffffc
 3c8:	add	x0, x20, #0xc0
 3cc:	ldaxr	w1, [x0]
 3d0:	sub	w1, w1, #0x1
 3d4:	stlxr	w2, w1, [x0]
 3d8:	cbnz	w2, 3cc <gomp_work_share_end_cancel+0x38>
 3dc:	orr	w0, w19, #0x1
 3e0:	cmp	w1, #0x0
 3e4:	csel	w19, w0, w19, eq  // eq = none
 3e8:	tbz	w19, #0, 448 <gomp_work_share_end_cancel+0xb4>
 3ec:	adrp	x0, 0 <gomp_tls_data>
 3f0:	ldr	x0, [x0]
 3f4:	mrs	x1, tpidr_el0
 3f8:	add	x0, x1, x0
 3fc:	ldr	x21, [x0, #32]
 400:	cbz	x21, 448 <gomp_work_share_end_cancel+0xb4>
 404:	adrp	x0, 0 <gomp_tls_data>
 408:	ldr	x0, [x0]
 40c:	add	x0, x1, x0
 410:	ldr	x0, [x0, #24]
 414:	str	x0, [x20, #88]
 418:	mov	x0, x21
 41c:	bl	98 <gomp_fini_work_share>
 420:	add	x0, x20, #0x68
 424:	ldr	x1, [x20, #104]
 428:	str	x1, [x21, #80]
 42c:	ldxr	x2, [x0]
 430:	cmp	x2, x1
 434:	b.ne	440 <gomp_work_share_end_cancel+0xac>  // b.any
 438:	stlxr	w3, x21, [x0]
 43c:	cbnz	w3, 42c <gomp_work_share_end_cancel+0x98>
 440:	dmb	ish
 444:	b.ne	424 <gomp_work_share_end_cancel+0x90>  // b.any
 448:	adrp	x0, 0 <gomp_tls_data>
 44c:	ldr	x0, [x0]
 450:	mrs	x1, tpidr_el0
 454:	add	x0, x1, x0
 458:	str	xzr, [x0, #32]
 45c:	mov	w1, w19
 460:	mov	x0, x22
 464:	bl	0 <gomp_team_barrier_wait_cancel_end>
 468:	ldp	x19, x20, [sp, #16]
 46c:	ldp	x21, x22, [sp, #32]
 470:	ldp	x29, x30, [sp], #48
 474:	ret

0000000000000478 <gomp_work_share_end_nowait>:
 478:	stp	x29, x30, [sp, #-32]!
 47c:	mov	x29, sp
 480:	stp	x19, x20, [sp, #16]
 484:	adrp	x0, 0 <gomp_tls_data>
 488:	ldr	x0, [x0]
 48c:	mrs	x1, tpidr_el0
 490:	add	x0, x1, x0
 494:	ldr	x20, [x0, #16]
 498:	ldr	x19, [x0, #24]
 49c:	cbz	x20, 4fc <gomp_work_share_end_nowait+0x84>
 4a0:	adrp	x0, 0 <gomp_tls_data>
 4a4:	ldr	x0, [x0]
 4a8:	mrs	x1, tpidr_el0
 4ac:	add	x0, x1, x0
 4b0:	ldr	x0, [x0, #32]
 4b4:	cbz	x0, 4f0 <gomp_work_share_end_nowait+0x78>
 4b8:	add	x0, x19, #0x44
 4bc:	ldxr	w1, [x0]
 4c0:	add	w1, w1, #0x1
 4c4:	stlxr	w2, w1, [x0]
 4c8:	cbnz	w2, 4bc <gomp_work_share_end_nowait+0x44>
 4cc:	dmb	ish
 4d0:	ldr	w0, [x20]
 4d4:	cmp	w0, w1
 4d8:	b.eq	524 <gomp_work_share_end_nowait+0xac>  // b.none
 4dc:	adrp	x0, 0 <gomp_tls_data>
 4e0:	ldr	x0, [x0]
 4e4:	mrs	x1, tpidr_el0
 4e8:	add	x0, x1, x0
 4ec:	str	xzr, [x0, #32]
 4f0:	ldp	x19, x20, [sp, #16]
 4f4:	ldp	x29, x30, [sp], #32
 4f8:	ret
 4fc:	mov	x0, x19
 500:	bl	98 <gomp_fini_work_share>
 504:	mov	x0, x19
 508:	bl	0 <free>
 50c:	adrp	x0, 0 <gomp_tls_data>
 510:	ldr	x0, [x0]
 514:	mrs	x1, tpidr_el0
 518:	add	x0, x1, x0
 51c:	str	xzr, [x0, #24]
 520:	b	4f0 <gomp_work_share_end_nowait+0x78>
 524:	adrp	x0, 0 <gomp_tls_data>
 528:	ldr	x0, [x0]
 52c:	mrs	x1, tpidr_el0
 530:	add	x0, x1, x0
 534:	ldr	x1, [x0, #24]
 538:	str	x1, [x20, #88]
 53c:	ldr	x19, [x0, #32]
 540:	mov	x0, x19
 544:	bl	98 <gomp_fini_work_share>
 548:	add	x0, x20, #0x68
 54c:	ldr	x1, [x20, #104]
 550:	str	x1, [x19, #80]
 554:	ldxr	x2, [x0]
 558:	cmp	x2, x1
 55c:	b.ne	568 <gomp_work_share_end_nowait+0xf0>  // b.any
 560:	stlxr	w3, x19, [x0]
 564:	cbnz	w3, 554 <gomp_work_share_end_nowait+0xdc>
 568:	dmb	ish
 56c:	b.eq	4dc <gomp_work_share_end_nowait+0x64>  // b.none
 570:	b	54c <gomp_work_share_end_nowait+0xd4>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_init_lock>:
   0:	str	wzr, [x0]
   4:	ret

0000000000000008 <gomp_ialias_omp_destroy_lock>:
   8:	ret

000000000000000c <gomp_ialias_omp_set_lock>:
   c:	mov	w2, #0x1                   	// #1
  10:	ldaxr	w1, [x0]
  14:	cbnz	w1, 20 <gomp_ialias_omp_set_lock+0x14>
  18:	stxr	w3, w2, [x0]
  1c:	cbnz	w3, 10 <gomp_ialias_omp_set_lock+0x4>
  20:	cmp	w1, #0x0
  24:	b.ne	2c <gomp_ialias_omp_set_lock+0x20>  // b.any
  28:	ret
  2c:	stp	x29, x30, [sp, #-16]!
  30:	mov	x29, sp
  34:	bl	0 <gomp_mutex_lock_slow>
  38:	ldp	x29, x30, [sp], #16
  3c:	ret

0000000000000040 <gomp_ialias_omp_unset_lock>:
  40:	ldxr	w1, [x0]
  44:	stlxr	w2, wzr, [x0]
  48:	cbnz	w2, 40 <gomp_ialias_omp_unset_lock>
  4c:	tbnz	w1, #31, 54 <gomp_ialias_omp_unset_lock+0x14>
  50:	ret
  54:	stp	x29, x30, [sp, #-16]!
  58:	mov	x29, sp
  5c:	bl	0 <gomp_mutex_unlock_slow>
  60:	ldp	x29, x30, [sp], #16
  64:	ret

0000000000000068 <gomp_ialias_omp_test_lock>:
  68:	mov	w1, #0x1                   	// #1
  6c:	ldaxr	w2, [x0]
  70:	cbnz	w2, 7c <gomp_ialias_omp_test_lock+0x14>
  74:	stxr	w3, w1, [x0]
  78:	cbnz	w3, 6c <gomp_ialias_omp_test_lock+0x4>
  7c:	cmp	w2, #0x0
  80:	cset	w0, eq  // eq = none
  84:	ret

0000000000000088 <gomp_ialias_omp_init_nest_lock>:
  88:	stp	xzr, xzr, [x0]
  8c:	ret

0000000000000090 <gomp_ialias_omp_destroy_nest_lock>:
  90:	ret

0000000000000094 <gomp_ialias_omp_set_nest_lock>:
  94:	stp	x29, x30, [sp, #-32]!
  98:	mov	x29, sp
  9c:	stp	x19, x20, [sp, #16]
  a0:	mov	x19, x0
  a4:	adrp	x0, 0 <gomp_tls_data>
  a8:	ldr	x0, [x0]
  ac:	mrs	x1, tpidr_el0
  b0:	add	x0, x1, x0
  b4:	ldr	x20, [x0, #80]
  b8:	cbz	x20, 104 <gomp_ialias_omp_set_nest_lock+0x70>
  bc:	add	x20, x20, #0x90
  c0:	ldr	x0, [x19, #8]
  c4:	cmp	x0, x20
  c8:	b.eq	ec <gomp_ialias_omp_set_nest_lock+0x58>  // b.none
  cc:	mov	w0, #0x1                   	// #1
  d0:	ldaxr	w1, [x19]
  d4:	cbnz	w1, e0 <gomp_ialias_omp_set_nest_lock+0x4c>
  d8:	stxr	w2, w0, [x19]
  dc:	cbnz	w2, d0 <gomp_ialias_omp_set_nest_lock+0x3c>
  e0:	cmp	w1, #0x0
  e4:	b.ne	110 <gomp_ialias_omp_set_nest_lock+0x7c>  // b.any
  e8:	str	x20, [x19, #8]
  ec:	ldr	w0, [x19, #4]
  f0:	add	w0, w0, #0x1
  f4:	str	w0, [x19, #4]
  f8:	ldp	x19, x20, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret
 104:	bl	0 <gomp_new_icv>
 108:	mov	x20, x0
 10c:	b	c0 <gomp_ialias_omp_set_nest_lock+0x2c>
 110:	mov	x0, x19
 114:	bl	0 <gomp_mutex_lock_slow>
 118:	b	e8 <gomp_ialias_omp_set_nest_lock+0x54>

000000000000011c <gomp_ialias_omp_unset_nest_lock>:
 11c:	ldr	w1, [x0, #4]
 120:	sub	w1, w1, #0x1
 124:	str	w1, [x0, #4]
 128:	cbnz	w1, 144 <gomp_ialias_omp_unset_nest_lock+0x28>
 12c:	str	xzr, [x0, #8]
 130:	mov	x1, x0
 134:	ldxr	w2, [x1]
 138:	stlxr	w3, wzr, [x1]
 13c:	cbnz	w3, 134 <gomp_ialias_omp_unset_nest_lock+0x18>
 140:	tbnz	w2, #31, 148 <gomp_ialias_omp_unset_nest_lock+0x2c>
 144:	ret
 148:	stp	x29, x30, [sp, #-16]!
 14c:	mov	x29, sp
 150:	bl	0 <gomp_mutex_unlock_slow>
 154:	ldp	x29, x30, [sp], #16
 158:	ret

000000000000015c <gomp_ialias_omp_test_nest_lock>:
 15c:	stp	x29, x30, [sp, #-32]!
 160:	mov	x29, sp
 164:	str	x19, [sp, #16]
 168:	mov	x19, x0
 16c:	adrp	x0, 0 <gomp_tls_data>
 170:	ldr	x0, [x0]
 174:	mrs	x1, tpidr_el0
 178:	add	x0, x1, x0
 17c:	ldr	x0, [x0, #80]
 180:	cbz	x0, 1c8 <gomp_ialias_omp_test_nest_lock+0x6c>
 184:	add	x0, x0, #0x90
 188:	ldr	x1, [x19, #8]
 18c:	cmp	x1, x0
 190:	b.eq	1d0 <gomp_ialias_omp_test_nest_lock+0x74>  // b.none
 194:	mov	w1, #0x1                   	// #1
 198:	ldaxr	w2, [x19]
 19c:	cbnz	w2, 1a8 <gomp_ialias_omp_test_nest_lock+0x4c>
 1a0:	stxr	w3, w1, [x19]
 1a4:	cbnz	w3, 198 <gomp_ialias_omp_test_nest_lock+0x3c>
 1a8:	cmp	w2, #0x0
 1ac:	b.ne	1e0 <gomp_ialias_omp_test_nest_lock+0x84>  // b.any
 1b0:	str	x0, [x19, #8]
 1b4:	mov	w0, w1
 1b8:	str	w1, [x19, #4]
 1bc:	ldr	x19, [sp, #16]
 1c0:	ldp	x29, x30, [sp], #32
 1c4:	ret
 1c8:	bl	0 <gomp_new_icv>
 1cc:	b	188 <gomp_ialias_omp_test_nest_lock+0x2c>
 1d0:	ldr	w0, [x19, #4]
 1d4:	add	w0, w0, #0x1
 1d8:	str	w0, [x19, #4]
 1dc:	b	1bc <gomp_ialias_omp_test_nest_lock+0x60>
 1e0:	mov	w0, #0x0                   	// #0
 1e4:	b	1bc <gomp_ialias_omp_test_nest_lock+0x60>

mutex.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock_slow>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x0, 0 <gomp_spin_count_var>
  14:	add	x3, x0, #0x0
  18:	adrp	x0, 0 <gomp_managed_threads>
  1c:	add	x2, x0, #0x0
  20:	adrp	x6, 0 <gomp_available_cpus>
  24:	adrp	x0, 0 <gomp_throttled_spin_count_var>
  28:	add	x0, x0, #0x0
  2c:	mov	w7, #0x1                   	// #1
  30:	cmp	w1, #0x1
  34:	b.ne	ec <gomp_mutex_lock_slow+0xec>  // b.any
  38:	ldr	x4, [x2]
  3c:	ldr	x1, [x6]
  40:	cmp	x4, x1
  44:	csel	x1, x0, x3, hi  // hi = pmore
  48:	ldr	x4, [x1]
  4c:	cbz	x4, 6c <gomp_mutex_lock_slow+0x6c>
  50:	mov	x1, #0x0                   	// #0
  54:	ldr	w5, [x19]
  58:	cmp	w5, #0x1
  5c:	b.ne	1c4 <gomp_mutex_lock_slow+0x1c4>  // b.any
  60:	add	x1, x1, #0x1
  64:	cmp	x1, x4
  68:	b.ne	54 <gomp_mutex_lock_slow+0x54>  // b.any
  6c:	mov	w1, #0xffffffff            	// #-1
  70:	ldaxr	w0, [x19]
  74:	stxr	w2, w1, [x19]
  78:	cbnz	w2, 70 <gomp_mutex_lock_slow+0x70>
  7c:	cbz	w0, 1dc <gomp_mutex_lock_slow+0x1dc>
  80:	str	x21, [sp, #32]
  84:	mov	x4, #0x0                   	// #0
  88:	mov	w3, #0xffffffff            	// #-1
  8c:	adrp	x0, 0 <gomp_mutex_lock_slow>
  90:	ldr	w2, [x0]
  94:	mov	x1, x19
  98:	mov	x0, #0x62                  	// #98
  9c:	bl	0 <syscall>
  a0:	tbz	w0, #31, f0 <gomp_mutex_lock_slow+0xf0>
  a4:	bl	0 <__errno_location>
  a8:	ldr	w0, [x0]
  ac:	cmp	w0, #0x26
  b0:	b.ne	f0 <gomp_mutex_lock_slow+0xf0>  // b.any
  b4:	adrp	x0, 0 <gomp_mutex_lock_slow>
  b8:	add	x1, x0, #0x0
  bc:	ldr	w2, [x0]
  c0:	and	w2, w2, #0xffffff7f
  c4:	str	w2, [x0]
  c8:	ldr	w0, [x1, #4]
  cc:	and	w0, w0, #0xffffff7f
  d0:	str	w0, [x1, #4]
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, #0xffffffff            	// #-1
  dc:	mov	x1, x19
  e0:	mov	x0, #0x62                  	// #98
  e4:	bl	0 <syscall>
  e8:	b	f0 <gomp_mutex_lock_slow+0xf0>
  ec:	str	x21, [sp, #32]
  f0:	adrp	x21, 0 <gomp_spin_count_var>
  f4:	add	x21, x21, #0x0
  f8:	adrp	x20, 0 <gomp_managed_threads>
  fc:	add	x20, x20, #0x0
 100:	mov	w4, #0xffffffff            	// #-1
 104:	adrp	x5, 0 <gomp_available_cpus>
 108:	adrp	x3, 0 <gomp_throttled_spin_count_var>
 10c:	add	x3, x3, #0x0
 110:	ldaxr	w0, [x19]
 114:	stxr	w1, w4, [x19]
 118:	cbnz	w1, 110 <gomp_mutex_lock_slow+0x110>
 11c:	cbz	w0, 1bc <gomp_mutex_lock_slow+0x1bc>
 120:	ldr	x1, [x20]
 124:	ldr	x0, [x5]
 128:	cmp	x1, x0
 12c:	csel	x0, x3, x21, hi  // hi = pmore
 130:	ldr	x2, [x0]
 134:	cbz	x2, 154 <gomp_mutex_lock_slow+0x154>
 138:	mov	x0, #0x0                   	// #0
 13c:	ldr	w1, [x19]
 140:	cmn	w1, #0x1
 144:	b.ne	110 <gomp_mutex_lock_slow+0x110>  // b.any
 148:	add	x0, x0, #0x1
 14c:	cmp	x0, x2
 150:	b.ne	13c <gomp_mutex_lock_slow+0x13c>  // b.any
 154:	mov	x4, #0x0                   	// #0
 158:	mov	w3, #0xffffffff            	// #-1
 15c:	adrp	x0, 0 <gomp_mutex_lock_slow>
 160:	ldr	w2, [x0]
 164:	mov	x1, x19
 168:	mov	x0, #0x62                  	// #98
 16c:	bl	0 <syscall>
 170:	tbz	w0, #31, 100 <gomp_mutex_lock_slow+0x100>
 174:	bl	0 <__errno_location>
 178:	ldr	w0, [x0]
 17c:	cmp	w0, #0x26
 180:	b.ne	100 <gomp_mutex_lock_slow+0x100>  // b.any
 184:	adrp	x0, 0 <gomp_mutex_lock_slow>
 188:	add	x1, x0, #0x0
 18c:	ldr	w2, [x0]
 190:	and	w2, w2, #0xffffff7f
 194:	str	w2, [x0]
 198:	ldr	w0, [x1, #4]
 19c:	and	w0, w0, #0xffffff7f
 1a0:	str	w0, [x1, #4]
 1a4:	mov	x4, #0x0                   	// #0
 1a8:	mov	w3, #0xffffffff            	// #-1
 1ac:	mov	x1, x19
 1b0:	mov	x0, #0x62                  	// #98
 1b4:	bl	0 <syscall>
 1b8:	b	100 <gomp_mutex_lock_slow+0x100>
 1bc:	ldr	x21, [sp, #32]
 1c0:	b	1dc <gomp_mutex_lock_slow+0x1dc>
 1c4:	ldaxr	w1, [x19]
 1c8:	cbnz	w1, 1d4 <gomp_mutex_lock_slow+0x1d4>
 1cc:	stxr	w4, w7, [x19]
 1d0:	cbnz	w4, 1c4 <gomp_mutex_lock_slow+0x1c4>
 1d4:	cmp	w1, #0x0
 1d8:	b.ne	30 <gomp_mutex_lock_slow+0x30>  // b.any
 1dc:	ldp	x19, x20, [sp, #16]
 1e0:	ldp	x29, x30, [sp], #48
 1e4:	ret

00000000000001e8 <gomp_mutex_unlock_slow>:
 1e8:	stp	x29, x30, [sp, #-32]!
 1ec:	mov	x29, sp
 1f0:	str	x19, [sp, #16]
 1f4:	mov	x19, x0
 1f8:	mov	w3, #0x1                   	// #1
 1fc:	adrp	x0, 0 <gomp_mutex_lock_slow>
 200:	ldr	w2, [x0]
 204:	mov	x1, x19
 208:	mov	x0, #0x62                  	// #98
 20c:	bl	0 <syscall>
 210:	tbnz	w0, #31, 220 <gomp_mutex_unlock_slow+0x38>
 214:	ldr	x19, [sp, #16]
 218:	ldp	x29, x30, [sp], #32
 21c:	ret
 220:	bl	0 <__errno_location>
 224:	ldr	w0, [x0]
 228:	cmp	w0, #0x26
 22c:	b.ne	214 <gomp_mutex_unlock_slow+0x2c>  // b.any
 230:	adrp	x0, 0 <gomp_mutex_lock_slow>
 234:	add	x3, x0, #0x0
 238:	ldr	w1, [x0]
 23c:	and	w1, w1, #0xffffff7f
 240:	str	w1, [x0]
 244:	ldr	w2, [x3, #4]
 248:	and	w2, w2, #0xffffff7f
 24c:	str	w2, [x3, #4]
 250:	mov	w3, #0x1                   	// #1
 254:	mov	x1, x19
 258:	mov	x0, #0x62                  	// #98
 25c:	bl	0 <syscall>
 260:	b	214 <gomp_mutex_unlock_slow+0x2c>

proc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_num_procs>:
   0:	adrp	x0, 0 <gomp_places_list>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 18 <get_num_procs+0x18>
   c:	adrp	x0, 0 <gomp_available_cpus>
  10:	ldr	w0, [x0]
  14:	ret
  18:	stp	x29, x30, [sp, #-32]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	adrp	x0, 8 <get_num_procs+0x8>
  28:	ldr	x19, [x0]
  2c:	cbz	x19, 4c <get_num_procs+0x4c>
  30:	bl	0 <pthread_self>
  34:	adrp	x1, 0 <get_num_procs>
  38:	ldr	x20, [x1]
  3c:	mov	x2, x19
  40:	mov	x1, x20
  44:	bl	0 <pthread_getaffinity_np>
  48:	cbz	w0, 60 <get_num_procs+0x60>
  4c:	mov	w0, #0x54                  	// #84
  50:	bl	0 <sysconf>
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret
  60:	adrp	x0, 8 <get_num_procs+0x8>
  64:	ldr	x1, [x0]
  68:	mov	x0, x20
  6c:	bl	0 <__sched_cpucount>
  70:	cmp	w0, #0x0
  74:	csinc	w0, w0, wzr, ne  // ne = any
  78:	b	54 <get_num_procs+0x54>

000000000000007c <gomp_cpuset_popcount>:
  7c:	stp	x29, x30, [sp, #-16]!
  80:	mov	x29, sp
  84:	bl	0 <__sched_cpucount>
  88:	sxtw	x0, w0
  8c:	ldp	x29, x30, [sp], #16
  90:	ret

0000000000000094 <gomp_init_num_threads>:
  94:	stp	x29, x30, [sp, #-64]!
  98:	mov	x29, sp
  9c:	stp	x19, x20, [sp, #16]
  a0:	stp	x21, x22, [sp, #32]
  a4:	str	x23, [sp, #48]
  a8:	mov	w0, #0x53                  	// #83
  ac:	bl	0 <sysconf>
  b0:	add	x0, x0, #0x3f
  b4:	lsr	x0, x0, #6
  b8:	lsl	x0, x0, #3
  bc:	adrp	x1, 8 <get_num_procs+0x8>
  c0:	str	x0, [x1]
  c4:	bl	0 <gomp_malloc>
  c8:	adrp	x1, 8 <get_num_procs+0x8>
  cc:	str	x0, [x1]
  d0:	bl	0 <pthread_self>
  d4:	mov	x21, x0
  d8:	adrp	x20, 8 <get_num_procs+0x8>
  dc:	adrp	x19, 8 <get_num_procs+0x8>
  e0:	mov	x22, #0x80                  	// #128
  e4:	mov	x23, x22
  e8:	b	1d0 <gomp_init_num_threads+0x13c>
  ec:	adrp	x0, 8 <get_num_procs+0x8>
  f0:	ldr	x1, [x0]
  f4:	adrp	x0, 8 <get_num_procs+0x8>
  f8:	ldr	x0, [x0]
  fc:	bl	0 <__sched_cpucount>
 100:	sxtw	x0, w0
 104:	adrp	x1, 0 <gomp_global_icv>
 108:	str	x0, [x1]
 10c:	cbnz	x0, 154 <gomp_init_num_threads+0xc0>
 110:	adrp	x0, 8 <get_num_procs+0x8>
 114:	str	xzr, [x0]
 118:	adrp	x19, 0 <gomp_global_icv>
 11c:	mov	x0, #0x1                   	// #1
 120:	str	x0, [x19]
 124:	adrp	x20, 8 <get_num_procs+0x8>
 128:	ldr	x0, [x20]
 12c:	bl	0 <free>
 130:	str	xzr, [x20]
 134:	mov	w0, #0x54                  	// #84
 138:	bl	0 <sysconf>
 13c:	str	x0, [x19]
 140:	ldp	x19, x20, [sp, #16]
 144:	ldp	x21, x22, [sp, #32]
 148:	ldr	x23, [sp, #48]
 14c:	ldp	x29, x30, [sp], #64
 150:	ret
 154:	adrp	x0, 8 <get_num_procs+0x8>
 158:	ldr	x2, [x0]
 15c:	adrp	x0, 0 <get_num_procs>
 160:	str	x2, [x0]
 164:	lsl	x0, x2, #3
 168:	cmp	xzr, x2, lsl #3
 16c:	b.eq	1a4 <gomp_init_num_threads+0x110>  // b.none
 170:	adrp	x1, 8 <get_num_procs+0x8>
 174:	ldr	x4, [x1]
 178:	b	180 <gomp_init_num_threads+0xec>
 17c:	cbz	x0, 1a4 <gomp_init_num_threads+0x110>
 180:	mov	x3, x0
 184:	sub	x0, x0, #0x1
 188:	cmp	x2, x0, lsr #3
 18c:	b.ls	17c <gomp_init_num_threads+0xe8>  // b.plast
 190:	lsr	x1, x0, #6
 194:	ldr	x1, [x4, x1, lsl #3]
 198:	lsr	x1, x1, x0
 19c:	tbz	w1, #0, 17c <gomp_init_num_threads+0xe8>
 1a0:	mov	x0, x3
 1a4:	add	x0, x0, #0x3f
 1a8:	lsr	x0, x0, #6
 1ac:	lsl	x0, x0, #3
 1b0:	adrp	x1, 8 <get_num_procs+0x8>
 1b4:	str	x0, [x1]
 1b8:	b	140 <gomp_init_num_threads+0xac>
 1bc:	str	x22, [x19]
 1c0:	mov	x1, x23
 1c4:	ldr	x0, [x20]
 1c8:	bl	0 <gomp_realloc>
 1cc:	str	x0, [x20]
 1d0:	ldr	x2, [x20]
 1d4:	ldr	x1, [x19]
 1d8:	mov	x0, x21
 1dc:	bl	0 <pthread_getaffinity_np>
 1e0:	cbz	w0, ec <gomp_init_num_threads+0x58>
 1e4:	cmp	w0, #0x16
 1e8:	b.ne	110 <gomp_init_num_threads+0x7c>  // b.any
 1ec:	ldr	x1, [x19]
 1f0:	cmp	x1, #0x7f
 1f4:	b.ls	1bc <gomp_init_num_threads+0x128>  // b.plast
 1f8:	lsl	x1, x1, #1
 1fc:	str	x1, [x19]
 200:	cmp	x1, #0x3ff
 204:	b.ls	1c4 <gomp_init_num_threads+0x130>  // b.plast
 208:	ldr	x0, [x20]
 20c:	bl	0 <realloc>
 210:	cbz	x0, 110 <gomp_init_num_threads+0x7c>
 214:	str	x0, [x20]
 218:	b	1d0 <gomp_init_num_threads+0x13c>

000000000000021c <gomp_dynamic_max_threads>:
 21c:	stp	x29, x30, [sp, #-64]!
 220:	mov	x29, sp
 224:	str	x20, [sp, #16]
 228:	adrp	x0, 0 <gomp_tls_data>
 22c:	ldr	x0, [x0]
 230:	mrs	x1, tpidr_el0
 234:	add	x0, x1, x0
 238:	ldr	x1, [x0, #80]
 23c:	add	x2, x1, #0x90
 240:	adrp	x0, 0 <gomp_global_icv>
 244:	add	x0, x0, #0x0
 248:	cmp	x1, #0x0
 24c:	csel	x0, x0, x2, eq  // eq = none
 250:	ldr	x20, [x0]
 254:	bl	0 <get_num_procs>
 258:	cmp	w20, w0
 25c:	csel	w20, w20, w0, ls  // ls = plast
 260:	mov	w1, #0x3                   	// #3
 264:	add	x0, sp, #0x28
 268:	bl	0 <getloadavg>
 26c:	mov	w1, #0x0                   	// #0
 270:	cmp	w0, #0x3
 274:	b.eq	290 <gomp_dynamic_max_threads+0x74>  // b.none
 278:	sub	w0, w20, w1
 27c:	cmp	w1, w20
 280:	csinc	w0, w0, wzr, cc  // cc = lo, ul, last
 284:	ldr	x20, [sp, #16]
 288:	ldp	x29, x30, [sp], #64
 28c:	ret
 290:	ldr	d0, [sp, #56]
 294:	adrp	x0, 0 <get_num_procs>
 298:	ldr	d1, [x0]
 29c:	fadd	d0, d0, d1
 2a0:	fcvtzu	w1, d0
 2a4:	b	278 <gomp_dynamic_max_threads+0x5c>

00000000000002a8 <gomp_ialias_omp_get_num_procs>:
 2a8:	stp	x29, x30, [sp, #-16]!
 2ac:	mov	x29, sp
 2b0:	bl	0 <get_num_procs>
 2b4:	ldp	x29, x30, [sp], #16
 2b8:	ret

sem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_post_slow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	mov	w3, #0x1                   	// #1
  14:	adrp	x0, 0 <gomp_futex_wake>
  18:	ldr	w2, [x0]
  1c:	mov	x1, x19
  20:	mov	x0, #0x62                  	// #98
  24:	bl	0 <syscall>
  28:	tbnz	w0, #31, 38 <gomp_sem_post_slow+0x38>
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	bl	0 <__errno_location>
  3c:	ldr	w0, [x0]
  40:	cmp	w0, #0x26
  44:	b.ne	2c <gomp_sem_post_slow+0x2c>  // b.any
  48:	adrp	x1, 0 <gomp_futex_wait>
  4c:	ldr	w0, [x1]
  50:	and	w0, w0, #0xffffff7f
  54:	str	w0, [x1]
  58:	adrp	x0, 0 <gomp_futex_wake>
  5c:	ldr	w2, [x0]
  60:	and	w2, w2, #0xffffff7f
  64:	str	w2, [x0]
  68:	mov	w3, #0x1                   	// #1
  6c:	mov	x1, x19
  70:	mov	x0, #0x62                  	// #98
  74:	bl	0 <syscall>
  78:	b	2c <gomp_sem_post_slow+0x2c>

000000000000007c <gomp_sem_wait_slow>:
  7c:	stp	x29, x30, [sp, #-48]!
  80:	mov	x29, sp
  84:	stp	x19, x20, [sp, #16]
  88:	mov	x19, x0
  8c:	adrp	x5, 0 <gomp_spin_count_var>
  90:	add	x5, x5, #0x0
  94:	adrp	x4, 0 <gomp_managed_threads>
  98:	add	x4, x4, #0x0
  9c:	adrp	x6, 0 <gomp_available_cpus>
  a0:	adrp	x3, 0 <gomp_throttled_spin_count_var>
  a4:	add	x3, x3, #0x0
  a8:	mov	w7, #0x80000000            	// #-2147483648
  ac:	cbnz	w1, 1b0 <gomp_sem_wait_slow+0x134>
  b0:	ldr	x1, [x4]
  b4:	ldr	x0, [x6]
  b8:	cmp	x1, x0
  bc:	csel	x0, x3, x5, hi  // hi = pmore
  c0:	ldr	x2, [x0]
  c4:	cbz	x2, e0 <gomp_sem_wait_slow+0x64>
  c8:	mov	x0, #0x0                   	// #0
  cc:	ldr	w1, [x19]
  d0:	cbnz	w1, 178 <gomp_sem_wait_slow+0xfc>
  d4:	add	x0, x0, #0x1
  d8:	cmp	x0, x2
  dc:	b.ne	cc <gomp_sem_wait_slow+0x50>  // b.any
  e0:	ldaxr	w0, [x19]
  e4:	cbnz	w0, f0 <gomp_sem_wait_slow+0x74>
  e8:	stxr	w1, w7, [x19]
  ec:	cbnz	w1, e0 <gomp_sem_wait_slow+0x64>
  f0:	cmp	w0, #0x0
  f4:	b.ne	178 <gomp_sem_wait_slow+0xfc>  // b.any
  f8:	str	x21, [sp, #32]
  fc:	mov	x4, #0x0                   	// #0
 100:	mov	w3, #0x80000000            	// #-2147483648
 104:	adrp	x0, 0 <gomp_futex_wait>
 108:	ldr	w2, [x0]
 10c:	mov	x1, x19
 110:	mov	x0, #0x62                  	// #98
 114:	bl	0 <syscall>
 118:	tbnz	w0, #31, 130 <gomp_sem_wait_slow+0xb4>
 11c:	ldr	w1, [x19]
 120:	mov	w20, #0x80000000            	// #-2147483648
 124:	adrp	x21, 0 <gomp_spin_count_var>
 128:	add	x21, x21, #0x0
 12c:	b	23c <gomp_sem_wait_slow+0x1c0>
 130:	bl	0 <__errno_location>
 134:	ldr	w0, [x0]
 138:	cmp	w0, #0x26
 13c:	b.ne	11c <gomp_sem_wait_slow+0xa0>  // b.any
 140:	adrp	x0, 0 <gomp_futex_wait>
 144:	ldr	w2, [x0]
 148:	and	w2, w2, #0xffffff7f
 14c:	str	w2, [x0]
 150:	adrp	x1, 0 <gomp_futex_wake>
 154:	ldr	w0, [x1]
 158:	and	w0, w0, #0xffffff7f
 15c:	str	w0, [x1]
 160:	mov	x4, #0x0                   	// #0
 164:	mov	w3, #0x80000000            	// #-2147483648
 168:	mov	x1, x19
 16c:	mov	x0, #0x62                  	// #98
 170:	bl	0 <syscall>
 174:	b	11c <gomp_sem_wait_slow+0xa0>
 178:	ldr	w1, [x19]
 17c:	cmp	w1, #0x0
 180:	b.le	ac <gomp_sem_wait_slow+0x30>
 184:	sub	w2, w1, #0x1
 188:	ldaxr	w0, [x19]
 18c:	cmp	w0, w1
 190:	b.ne	19c <gomp_sem_wait_slow+0x120>  // b.any
 194:	stxr	w8, w2, [x19]
 198:	cbnz	w8, 188 <gomp_sem_wait_slow+0x10c>
 19c:	mov	w1, w0
 1a0:	b.ne	ac <gomp_sem_wait_slow+0x30>  // b.any
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	ldp	x29, x30, [sp], #48
 1ac:	ret
 1b0:	str	x21, [sp, #32]
 1b4:	b	120 <gomp_sem_wait_slow+0xa4>
 1b8:	ldaxr	w1, [x19]
 1bc:	cmp	w1, w0
 1c0:	b.ne	1cc <gomp_sem_wait_slow+0x150>  // b.any
 1c4:	stxr	w2, w20, [x19]
 1c8:	cbnz	w2, 1b8 <gomp_sem_wait_slow+0x13c>
 1cc:	b.ne	23c <gomp_sem_wait_slow+0x1c0>  // b.any
 1d0:	adrp	x0, 0 <gomp_managed_threads>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x2, [x0]
 1dc:	adrp	x0, 0 <gomp_available_cpus>
 1e0:	ldr	x1, [x0]
 1e4:	adrp	x0, 0 <gomp_throttled_spin_count_var>
 1e8:	add	x0, x0, #0x0
 1ec:	cmp	x2, x1
 1f0:	csel	x0, x0, x21, hi  // hi = pmore
 1f4:	ldr	x1, [x0]
 1f8:	mov	x0, #0x0                   	// #0
 1fc:	cbz	x1, 218 <gomp_sem_wait_slow+0x19c>
 200:	ldr	w2, [x19]
 204:	cmp	w2, w20
 208:	b.ne	238 <gomp_sem_wait_slow+0x1bc>  // b.any
 20c:	add	x0, x0, #0x1
 210:	cmp	x0, x1
 214:	b.ne	200 <gomp_sem_wait_slow+0x184>  // b.any
 218:	mov	x4, #0x0                   	// #0
 21c:	mov	w3, w20
 220:	adrp	x0, 0 <gomp_futex_wait>
 224:	ldr	w2, [x0]
 228:	mov	x1, x19
 22c:	mov	x0, #0x62                  	// #98
 230:	bl	0 <syscall>
 234:	tbnz	w0, #31, 288 <gomp_sem_wait_slow+0x20c>
 238:	ldr	w1, [x19]
 23c:	mov	w0, w1
 240:	ands	w1, w1, #0x7fffffff
 244:	b.eq	1b8 <gomp_sem_wait_slow+0x13c>  // b.none
 248:	sub	w1, w1, #0x1
 24c:	orr	w2, w1, #0x80000000
 250:	ldaxr	w1, [x19]
 254:	cmp	w1, w0
 258:	b.ne	264 <gomp_sem_wait_slow+0x1e8>  // b.any
 25c:	stxr	w3, w2, [x19]
 260:	cbnz	w3, 250 <gomp_sem_wait_slow+0x1d4>
 264:	b.ne	23c <gomp_sem_wait_slow+0x1c0>  // b.any
 268:	tst	w0, #0x7ffffffe
 26c:	b.ne	278 <gomp_sem_wait_slow+0x1fc>  // b.any
 270:	ldr	x21, [sp, #32]
 274:	b	1a4 <gomp_sem_wait_slow+0x128>
 278:	mov	x0, x19
 27c:	bl	0 <gomp_sem_post_slow>
 280:	ldr	x21, [sp, #32]
 284:	b	1a4 <gomp_sem_wait_slow+0x128>
 288:	bl	0 <__errno_location>
 28c:	ldr	w0, [x0]
 290:	cmp	w0, #0x26
 294:	b.ne	238 <gomp_sem_wait_slow+0x1bc>  // b.any
 298:	adrp	x0, 0 <gomp_futex_wait>
 29c:	ldr	w2, [x0]
 2a0:	and	w2, w2, #0xffffff7f
 2a4:	str	w2, [x0]
 2a8:	adrp	x1, 0 <gomp_futex_wake>
 2ac:	ldr	w0, [x1]
 2b0:	and	w0, w0, #0xffffff7f
 2b4:	str	w0, [x1]
 2b8:	mov	x4, #0x0                   	// #0
 2bc:	mov	w3, w20
 2c0:	mov	x1, x19
 2c4:	mov	x0, #0x62                  	// #98
 2c8:	bl	0 <syscall>
 2cc:	b	238 <gomp_sem_wait_slow+0x1bc>

bar.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_barrier_wait_end>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w20, w1
  10:	tbnz	w20, #0, 3c <gomp_barrier_wait_end+0x3c>
  14:	stp	x21, x22, [sp, #32]
  18:	str	x23, [sp, #48]
  1c:	add	x19, x0, #0x4
  20:	adrp	x23, 0 <gomp_spin_count_var>
  24:	add	x23, x23, #0x0
  28:	adrp	x22, 0 <gomp_managed_threads>
  2c:	add	x22, x22, #0x0
  30:	adrp	x21, 0 <gomp_throttled_spin_count_var>
  34:	add	x21, x21, #0x0
  38:	b	f4 <gomp_barrier_wait_end+0xf4>
  3c:	ldr	w1, [x0]
  40:	str	w1, [x0, #64]
  44:	add	x19, x0, #0x4
  48:	ldr	w0, [x0, #4]
  4c:	add	w0, w0, #0x8
  50:	stlr	w0, [x19]
  54:	mov	w3, #0x7fffffff            	// #2147483647
  58:	adrp	x0, 0 <gomp_futex_wake>
  5c:	ldr	w2, [x0]
  60:	mov	x1, x19
  64:	mov	x0, #0x62                  	// #98
  68:	bl	0 <syscall>
  6c:	tbz	w0, #31, 16c <gomp_barrier_wait_end+0x16c>
  70:	bl	0 <__errno_location>
  74:	ldr	w0, [x0]
  78:	cmp	w0, #0x26
  7c:	b.ne	16c <gomp_barrier_wait_end+0x16c>  // b.any
  80:	adrp	x1, 0 <gomp_futex_wait>
  84:	ldr	w0, [x1]
  88:	and	w0, w0, #0xffffff7f
  8c:	str	w0, [x1]
  90:	adrp	x0, 0 <gomp_futex_wake>
  94:	ldr	w2, [x0]
  98:	and	w2, w2, #0xffffff7f
  9c:	str	w2, [x0]
  a0:	mov	w3, #0x7fffffff            	// #2147483647
  a4:	mov	x1, x19
  a8:	mov	x0, #0x62                  	// #98
  ac:	bl	0 <syscall>
  b0:	b	16c <gomp_barrier_wait_end+0x16c>
  b4:	adrp	x0, 0 <gomp_futex_wait>
  b8:	ldr	w2, [x0]
  bc:	and	w2, w2, #0xffffff7f
  c0:	str	w2, [x0]
  c4:	adrp	x1, 0 <gomp_futex_wake>
  c8:	ldr	w0, [x1]
  cc:	and	w0, w0, #0xffffff7f
  d0:	str	w0, [x1]
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	w3, w20
  dc:	mov	x1, x19
  e0:	mov	x0, #0x62                  	// #98
  e4:	bl	0 <syscall>
  e8:	ldar	w0, [x19]
  ec:	cmp	w0, w20
  f0:	b.ne	164 <gomp_barrier_wait_end+0x164>  // b.any
  f4:	mov	w1, w20
  f8:	ldr	x2, [x22]
  fc:	adrp	x0, 0 <gomp_available_cpus>
 100:	ldr	x0, [x0]
 104:	cmp	x2, x0
 108:	csel	x0, x21, x23, hi  // hi = pmore
 10c:	ldr	x2, [x0]
 110:	cbz	x2, 130 <gomp_barrier_wait_end+0x130>
 114:	mov	x0, #0x0                   	// #0
 118:	ldr	w3, [x19]
 11c:	cmp	w1, w3
 120:	b.ne	e8 <gomp_barrier_wait_end+0xe8>  // b.any
 124:	add	x0, x0, #0x1
 128:	cmp	x0, x2
 12c:	b.ne	118 <gomp_barrier_wait_end+0x118>  // b.any
 130:	mov	x4, #0x0                   	// #0
 134:	mov	w3, w20
 138:	adrp	x0, 0 <gomp_futex_wait>
 13c:	ldr	w2, [x0]
 140:	mov	x1, x19
 144:	mov	x0, #0x62                  	// #98
 148:	bl	0 <syscall>
 14c:	tbz	w0, #31, e8 <gomp_barrier_wait_end+0xe8>
 150:	bl	0 <__errno_location>
 154:	ldr	w0, [x0]
 158:	cmp	w0, #0x26
 15c:	b.ne	e8 <gomp_barrier_wait_end+0xe8>  // b.any
 160:	b	b4 <gomp_barrier_wait_end+0xb4>
 164:	ldp	x21, x22, [sp, #32]
 168:	ldr	x23, [sp, #48]
 16c:	ldp	x19, x20, [sp, #16]
 170:	ldp	x29, x30, [sp], #64
 174:	ret

0000000000000178 <gomp_barrier_wait>:
 178:	stp	x29, x30, [sp, #-16]!
 17c:	mov	x29, sp
 180:	add	x1, x0, #0x4
 184:	ldar	w1, [x1]
 188:	and	w1, w1, #0xfffffffc
 18c:	add	x2, x0, #0x40
 190:	ldaxr	w3, [x2]
 194:	sub	w3, w3, #0x1
 198:	stlxr	w4, w3, [x2]
 19c:	cbnz	w4, 190 <gomp_barrier_wait+0x18>
 1a0:	orr	w2, w1, #0x1
 1a4:	cmp	w3, #0x0
 1a8:	csel	w1, w2, w1, eq  // eq = none
 1ac:	bl	0 <gomp_barrier_wait_end>
 1b0:	ldp	x29, x30, [sp], #16
 1b4:	ret

00000000000001b8 <gomp_barrier_wait_last>:
 1b8:	add	x1, x0, #0x4
 1bc:	ldar	w1, [x1]
 1c0:	and	w1, w1, #0xfffffffc
 1c4:	add	x2, x0, #0x40
 1c8:	ldaxr	w3, [x2]
 1cc:	sub	w3, w3, #0x1
 1d0:	stlxr	w4, w3, [x2]
 1d4:	cbnz	w4, 1c8 <gomp_barrier_wait_last+0x10>
 1d8:	orr	w2, w1, #0x1
 1dc:	cmp	w3, #0x0
 1e0:	csel	w1, w2, w1, eq  // eq = none
 1e4:	tbnz	w1, #0, 1ec <gomp_barrier_wait_last+0x34>
 1e8:	ret
 1ec:	stp	x29, x30, [sp, #-16]!
 1f0:	mov	x29, sp
 1f4:	bl	0 <gomp_barrier_wait_end>
 1f8:	ldp	x29, x30, [sp], #16
 1fc:	ret

0000000000000200 <gomp_team_barrier_wake>:
 200:	stp	x29, x30, [sp, #-32]!
 204:	mov	x29, sp
 208:	stp	x19, x20, [sp, #16]
 20c:	add	x20, x0, #0x4
 210:	cmp	w1, #0x0
 214:	mov	w0, #0x7fffffff            	// #2147483647
 218:	csel	w19, w1, w0, ne  // ne = any
 21c:	mov	w3, w19
 220:	adrp	x0, 0 <gomp_futex_wake>
 224:	ldr	w2, [x0]
 228:	mov	x1, x20
 22c:	mov	x0, #0x62                  	// #98
 230:	bl	0 <syscall>
 234:	tbnz	w0, #31, 244 <gomp_team_barrier_wake+0x44>
 238:	ldp	x19, x20, [sp, #16]
 23c:	ldp	x29, x30, [sp], #32
 240:	ret
 244:	bl	0 <__errno_location>
 248:	ldr	w0, [x0]
 24c:	cmp	w0, #0x26
 250:	b.ne	238 <gomp_team_barrier_wake+0x38>  // b.any
 254:	adrp	x1, 0 <gomp_futex_wait>
 258:	ldr	w0, [x1]
 25c:	and	w0, w0, #0xffffff7f
 260:	str	w0, [x1]
 264:	adrp	x0, 0 <gomp_futex_wake>
 268:	ldr	w2, [x0]
 26c:	and	w2, w2, #0xffffff7f
 270:	str	w2, [x0]
 274:	mov	w3, w19
 278:	mov	x1, x20
 27c:	mov	x0, #0x62                  	// #98
 280:	bl	0 <syscall>
 284:	b	238 <gomp_team_barrier_wake+0x38>

0000000000000288 <gomp_team_barrier_wait_end>:
 288:	stp	x29, x30, [sp, #-80]!
 28c:	mov	x29, sp
 290:	stp	x19, x20, [sp, #16]
 294:	mov	x20, x0
 298:	mov	w19, w1
 29c:	tbnz	w19, #0, 2d0 <gomp_team_barrier_wait_end+0x48>
 2a0:	stp	x21, x22, [sp, #32]
 2a4:	stp	x23, x24, [sp, #48]
 2a8:	str	x25, [sp, #64]
 2ac:	and	w25, w19, #0xfffffffb
 2b0:	add	x20, x20, #0x4
 2b4:	adrp	x24, 0 <gomp_spin_count_var>
 2b8:	add	x24, x24, #0x0
 2bc:	adrp	x23, 0 <gomp_managed_threads>
 2c0:	add	x23, x23, #0x0
 2c4:	adrp	x22, 0 <gomp_throttled_spin_count_var>
 2c8:	add	x22, x22, #0x0
 2cc:	b	3d4 <gomp_team_barrier_wait_end+0x14c>
 2d0:	adrp	x0, 0 <gomp_tls_data>
 2d4:	ldr	x0, [x0]
 2d8:	mrs	x1, tpidr_el0
 2dc:	add	x0, x1, x0
 2e0:	ldr	x0, [x0, #16]
 2e4:	ldr	w1, [x20]
 2e8:	str	w1, [x20, #64]
 2ec:	str	wzr, [x0, #1332]
 2f0:	ldr	w0, [x0, #1320]
 2f4:	cbnz	w0, 368 <gomp_team_barrier_wait_end+0xe0>
 2f8:	and	w0, w19, #0xfffffffb
 2fc:	add	x20, x20, #0x4
 300:	add	w0, w0, #0x7
 304:	stlr	w0, [x20]
 308:	mov	w3, #0x7fffffff            	// #2147483647
 30c:	adrp	x0, 0 <gomp_futex_wake>
 310:	ldr	w2, [x0]
 314:	mov	x1, x20
 318:	mov	x0, #0x62                  	// #98
 31c:	bl	0 <syscall>
 320:	tbz	w0, #31, 460 <gomp_team_barrier_wait_end+0x1d8>
 324:	bl	0 <__errno_location>
 328:	ldr	w0, [x0]
 32c:	cmp	w0, #0x26
 330:	b.ne	460 <gomp_team_barrier_wait_end+0x1d8>  // b.any
 334:	adrp	x1, 0 <gomp_futex_wait>
 338:	ldr	w0, [x1]
 33c:	and	w0, w0, #0xffffff7f
 340:	str	w0, [x1]
 344:	adrp	x0, 0 <gomp_futex_wake>
 348:	ldr	w2, [x0]
 34c:	and	w2, w2, #0xffffff7f
 350:	str	w2, [x0]
 354:	mov	w3, #0x7fffffff            	// #2147483647
 358:	mov	x1, x20
 35c:	mov	x0, #0x62                  	// #98
 360:	bl	0 <syscall>
 364:	b	460 <gomp_team_barrier_wait_end+0x1d8>
 368:	stp	x21, x22, [sp, #32]
 36c:	stp	x23, x24, [sp, #48]
 370:	str	x25, [sp, #64]
 374:	mov	w0, w19
 378:	bl	0 <gomp_barrier_handle_tasks>
 37c:	and	w19, w19, #0xfffffffe
 380:	b	2ac <gomp_team_barrier_wait_end+0x24>
 384:	adrp	x0, 0 <gomp_futex_wait>
 388:	ldr	w2, [x0]
 38c:	and	w2, w2, #0xffffff7f
 390:	str	w2, [x0]
 394:	adrp	x1, 0 <gomp_futex_wake>
 398:	ldr	w0, [x1]
 39c:	and	w0, w0, #0xffffff7f
 3a0:	str	w0, [x1]
 3a4:	mov	x4, #0x0                   	// #0
 3a8:	mov	w3, w21
 3ac:	mov	x1, x20
 3b0:	mov	x0, #0x62                  	// #98
 3b4:	bl	0 <syscall>
 3b8:	ldar	w0, [x20]
 3bc:	tbnz	w0, #0, 444 <gomp_team_barrier_wait_end+0x1bc>
 3c0:	and	w1, w0, #0x2
 3c4:	orr	w19, w19, w1
 3c8:	add	w1, w25, #0x8
 3cc:	cmp	w1, w0
 3d0:	b.eq	454 <gomp_team_barrier_wait_end+0x1cc>  // b.none
 3d4:	mov	w21, w19
 3d8:	ldr	x1, [x23]
 3dc:	adrp	x0, 0 <gomp_available_cpus>
 3e0:	ldr	x0, [x0]
 3e4:	cmp	x1, x0
 3e8:	csel	x0, x22, x24, hi  // hi = pmore
 3ec:	ldr	x1, [x0]
 3f0:	cbz	x1, 410 <gomp_team_barrier_wait_end+0x188>
 3f4:	mov	x0, #0x0                   	// #0
 3f8:	ldr	w2, [x20]
 3fc:	cmp	w21, w2
 400:	b.ne	3b8 <gomp_team_barrier_wait_end+0x130>  // b.any
 404:	add	x0, x0, #0x1
 408:	cmp	x0, x1
 40c:	b.ne	3f8 <gomp_team_barrier_wait_end+0x170>  // b.any
 410:	mov	x4, #0x0                   	// #0
 414:	mov	w3, w21
 418:	adrp	x0, 0 <gomp_futex_wait>
 41c:	ldr	w2, [x0]
 420:	mov	x1, x20
 424:	mov	x0, #0x62                  	// #98
 428:	bl	0 <syscall>
 42c:	tbz	w0, #31, 3b8 <gomp_team_barrier_wait_end+0x130>
 430:	bl	0 <__errno_location>
 434:	ldr	w0, [x0]
 438:	cmp	w0, #0x26
 43c:	b.ne	3b8 <gomp_team_barrier_wait_end+0x130>  // b.any
 440:	b	384 <gomp_team_barrier_wait_end+0xfc>
 444:	mov	w0, w25
 448:	bl	0 <gomp_barrier_handle_tasks>
 44c:	ldar	w0, [x20]
 450:	b	3c0 <gomp_team_barrier_wait_end+0x138>
 454:	ldp	x21, x22, [sp, #32]
 458:	ldp	x23, x24, [sp, #48]
 45c:	ldr	x25, [sp, #64]
 460:	ldp	x19, x20, [sp, #16]
 464:	ldp	x29, x30, [sp], #80
 468:	ret

000000000000046c <gomp_team_barrier_wait>:
 46c:	stp	x29, x30, [sp, #-16]!
 470:	mov	x29, sp
 474:	add	x1, x0, #0x4
 478:	ldar	w1, [x1]
 47c:	and	w1, w1, #0xfffffffc
 480:	add	x2, x0, #0x40
 484:	ldaxr	w3, [x2]
 488:	sub	w3, w3, #0x1
 48c:	stlxr	w4, w3, [x2]
 490:	cbnz	w4, 484 <gomp_team_barrier_wait+0x18>
 494:	orr	w2, w1, #0x1
 498:	cmp	w3, #0x0
 49c:	csel	w1, w2, w1, eq  // eq = none
 4a0:	bl	288 <gomp_team_barrier_wait_end>
 4a4:	ldp	x29, x30, [sp], #16
 4a8:	ret

00000000000004ac <gomp_team_barrier_wait_final>:
 4ac:	stp	x29, x30, [sp, #-16]!
 4b0:	mov	x29, sp
 4b4:	add	x1, x0, #0x4
 4b8:	ldar	w1, [x1]
 4bc:	and	w1, w1, #0xfffffffc
 4c0:	add	x2, x0, #0x44
 4c4:	ldaxr	w3, [x2]
 4c8:	sub	w3, w3, #0x1
 4cc:	stlxr	w4, w3, [x2]
 4d0:	cbnz	w4, 4c4 <gomp_team_barrier_wait_final+0x18>
 4d4:	orr	w2, w1, #0x1
 4d8:	cmp	w3, #0x0
 4dc:	csel	w1, w2, w1, eq  // eq = none
 4e0:	tbnz	w1, #0, 4f0 <gomp_team_barrier_wait_final+0x44>
 4e4:	bl	288 <gomp_team_barrier_wait_end>
 4e8:	ldp	x29, x30, [sp], #16
 4ec:	ret
 4f0:	ldr	w2, [x0]
 4f4:	str	w2, [x0, #68]
 4f8:	b	4e4 <gomp_team_barrier_wait_final+0x38>

00000000000004fc <gomp_team_barrier_wait_cancel_end>:
 4fc:	stp	x29, x30, [sp, #-80]!
 500:	mov	x29, sp
 504:	stp	x19, x20, [sp, #16]
 508:	stp	x21, x22, [sp, #32]
 50c:	mov	x19, x0
 510:	mov	w22, w1
 514:	tbnz	w22, #0, 548 <gomp_team_barrier_wait_cancel_end+0x4c>
 518:	tbnz	w22, #2, 6e0 <gomp_team_barrier_wait_cancel_end+0x1e4>
 51c:	stp	x23, x24, [sp, #48]
 520:	str	x25, [sp, #64]
 524:	mov	w20, w22
 528:	add	x19, x19, #0x4
 52c:	adrp	x25, 0 <gomp_spin_count_var>
 530:	add	x25, x25, #0x0
 534:	adrp	x24, 0 <gomp_managed_threads>
 538:	add	x24, x24, #0x0
 53c:	adrp	x23, 0 <gomp_throttled_spin_count_var>
 540:	add	x23, x23, #0x0
 544:	b	650 <gomp_team_barrier_wait_cancel_end+0x154>
 548:	adrp	x0, 0 <gomp_tls_data>
 54c:	ldr	x0, [x0]
 550:	mrs	x1, tpidr_el0
 554:	add	x0, x1, x0
 558:	ldr	x0, [x0, #16]
 55c:	ldr	w1, [x19]
 560:	str	w1, [x19, #64]
 564:	str	wzr, [x0, #1332]
 568:	ldr	w0, [x0, #1320]
 56c:	cbnz	w0, 5ec <gomp_team_barrier_wait_cancel_end+0xf0>
 570:	add	x19, x19, #0x4
 574:	add	w22, w22, #0x7
 578:	stlr	w22, [x19]
 57c:	mov	w3, #0x7fffffff            	// #2147483647
 580:	adrp	x0, 0 <gomp_futex_wake>
 584:	ldr	w2, [x0]
 588:	mov	x1, x19
 58c:	mov	x0, #0x62                  	// #98
 590:	bl	0 <syscall>
 594:	mov	x1, x0
 598:	mov	w0, #0x0                   	// #0
 59c:	tbz	w1, #31, 6f4 <gomp_team_barrier_wait_cancel_end+0x1f8>
 5a0:	bl	0 <__errno_location>
 5a4:	ldr	w1, [x0]
 5a8:	mov	w0, #0x0                   	// #0
 5ac:	cmp	w1, #0x26
 5b0:	b.ne	6f4 <gomp_team_barrier_wait_cancel_end+0x1f8>  // b.any
 5b4:	adrp	x1, 0 <gomp_futex_wait>
 5b8:	ldr	w0, [x1]
 5bc:	and	w0, w0, #0xffffff7f
 5c0:	str	w0, [x1]
 5c4:	adrp	x0, 0 <gomp_futex_wake>
 5c8:	ldr	w2, [x0]
 5cc:	and	w2, w2, #0xffffff7f
 5d0:	str	w2, [x0]
 5d4:	mov	w3, #0x7fffffff            	// #2147483647
 5d8:	mov	x1, x19
 5dc:	mov	x0, #0x62                  	// #98
 5e0:	bl	0 <syscall>
 5e4:	mov	w0, #0x0                   	// #0
 5e8:	b	6f4 <gomp_team_barrier_wait_cancel_end+0x1f8>
 5ec:	mov	w0, w22
 5f0:	bl	0 <gomp_barrier_handle_tasks>
 5f4:	and	w22, w22, #0xfffffffe
 5f8:	b	518 <gomp_team_barrier_wait_cancel_end+0x1c>
 5fc:	adrp	x0, 0 <gomp_futex_wait>
 600:	ldr	w2, [x0]
 604:	and	w2, w2, #0xffffff7f
 608:	str	w2, [x0]
 60c:	adrp	x1, 0 <gomp_futex_wake>
 610:	ldr	w0, [x1]
 614:	and	w0, w0, #0xffffff7f
 618:	str	w0, [x1]
 61c:	mov	x4, #0x0                   	// #0
 620:	mov	w3, w21
 624:	mov	x1, x19
 628:	mov	x0, #0x62                  	// #98
 62c:	bl	0 <syscall>
 630:	ldar	w0, [x19]
 634:	tbnz	w0, #2, 6e8 <gomp_team_barrier_wait_cancel_end+0x1ec>
 638:	tbnz	w0, #0, 6c0 <gomp_team_barrier_wait_cancel_end+0x1c4>
 63c:	and	w1, w0, #0x2
 640:	orr	w20, w20, w1
 644:	add	w1, w22, #0x8
 648:	cmp	w1, w0
 64c:	b.eq	6d0 <gomp_team_barrier_wait_cancel_end+0x1d4>  // b.none
 650:	mov	w21, w20
 654:	ldr	x1, [x24]
 658:	adrp	x0, 0 <gomp_available_cpus>
 65c:	ldr	x0, [x0]
 660:	cmp	x1, x0
 664:	csel	x0, x23, x25, hi  // hi = pmore
 668:	ldr	x2, [x0]
 66c:	cbz	x2, 68c <gomp_team_barrier_wait_cancel_end+0x190>
 670:	mov	x0, #0x0                   	// #0
 674:	ldr	w1, [x19]
 678:	cmp	w21, w1
 67c:	b.ne	630 <gomp_team_barrier_wait_cancel_end+0x134>  // b.any
 680:	add	x0, x0, #0x1
 684:	cmp	x0, x2
 688:	b.ne	674 <gomp_team_barrier_wait_cancel_end+0x178>  // b.any
 68c:	mov	x4, #0x0                   	// #0
 690:	mov	w3, w21
 694:	adrp	x0, 0 <gomp_futex_wait>
 698:	ldr	w2, [x0]
 69c:	mov	x1, x19
 6a0:	mov	x0, #0x62                  	// #98
 6a4:	bl	0 <syscall>
 6a8:	tbz	w0, #31, 630 <gomp_team_barrier_wait_cancel_end+0x134>
 6ac:	bl	0 <__errno_location>
 6b0:	ldr	w0, [x0]
 6b4:	cmp	w0, #0x26
 6b8:	b.ne	630 <gomp_team_barrier_wait_cancel_end+0x134>  // b.any
 6bc:	b	5fc <gomp_team_barrier_wait_cancel_end+0x100>
 6c0:	mov	w0, w22
 6c4:	bl	0 <gomp_barrier_handle_tasks>
 6c8:	ldar	w0, [x19]
 6cc:	b	63c <gomp_team_barrier_wait_cancel_end+0x140>
 6d0:	mov	w0, #0x0                   	// #0
 6d4:	ldp	x23, x24, [sp, #48]
 6d8:	ldr	x25, [sp, #64]
 6dc:	b	6f4 <gomp_team_barrier_wait_cancel_end+0x1f8>
 6e0:	mov	w0, #0x1                   	// #1
 6e4:	b	6f4 <gomp_team_barrier_wait_cancel_end+0x1f8>
 6e8:	mov	w0, #0x1                   	// #1
 6ec:	ldp	x23, x24, [sp, #48]
 6f0:	ldr	x25, [sp, #64]
 6f4:	ldp	x19, x20, [sp, #16]
 6f8:	ldp	x21, x22, [sp, #32]
 6fc:	ldp	x29, x30, [sp], #80
 700:	ret

0000000000000704 <gomp_team_barrier_wait_cancel>:
 704:	stp	x29, x30, [sp, #-16]!
 708:	mov	x29, sp
 70c:	add	x1, x0, #0x4
 710:	ldar	w1, [x1]
 714:	and	w1, w1, #0xfffffffc
 718:	add	x2, x0, #0x40
 71c:	ldaxr	w3, [x2]
 720:	sub	w3, w3, #0x1
 724:	stlxr	w4, w3, [x2]
 728:	cbnz	w4, 71c <gomp_team_barrier_wait_cancel+0x18>
 72c:	orr	w2, w1, #0x1
 730:	cmp	w3, #0x0
 734:	csel	w1, w2, w1, eq  // eq = none
 738:	bl	4fc <gomp_team_barrier_wait_cancel_end>
 73c:	ldp	x29, x30, [sp], #16
 740:	ret

0000000000000744 <gomp_team_barrier_cancel>:
 744:	stp	x29, x30, [sp, #-32]!
 748:	mov	x29, sp
 74c:	stp	x19, x20, [sp, #16]
 750:	mov	x19, x0
 754:	add	x20, x0, #0x500
 758:	mov	w0, #0x1                   	// #1
 75c:	ldaxr	w1, [x20]
 760:	cbnz	w1, 76c <gomp_team_barrier_cancel+0x28>
 764:	stxr	w2, w0, [x20]
 768:	cbnz	w2, 75c <gomp_team_barrier_cancel+0x18>
 76c:	cmp	w1, #0x0
 770:	b.ne	7f8 <gomp_team_barrier_cancel+0xb4>  // b.any
 774:	ldr	w0, [x19, #132]
 778:	tbnz	w0, #2, 804 <gomp_team_barrier_cancel+0xc0>
 77c:	orr	w0, w0, #0x4
 780:	str	w0, [x19, #132]
 784:	ldxr	w0, [x20]
 788:	stlxr	w1, wzr, [x20]
 78c:	cbnz	w1, 784 <gomp_team_barrier_cancel+0x40>
 790:	tbnz	w0, #31, 82c <gomp_team_barrier_cancel+0xe8>
 794:	add	x19, x19, #0x84
 798:	mov	w3, #0x7fffffff            	// #2147483647
 79c:	adrp	x0, 0 <gomp_futex_wake>
 7a0:	ldr	w2, [x0]
 7a4:	mov	x1, x19
 7a8:	mov	x0, #0x62                  	// #98
 7ac:	bl	0 <syscall>
 7b0:	tbz	w0, #31, 814 <gomp_team_barrier_cancel+0xd0>
 7b4:	bl	0 <__errno_location>
 7b8:	ldr	w0, [x0]
 7bc:	cmp	w0, #0x26
 7c0:	b.ne	814 <gomp_team_barrier_cancel+0xd0>  // b.any
 7c4:	adrp	x1, 0 <gomp_futex_wait>
 7c8:	ldr	w0, [x1]
 7cc:	and	w0, w0, #0xffffff7f
 7d0:	str	w0, [x1]
 7d4:	adrp	x0, 0 <gomp_futex_wake>
 7d8:	ldr	w2, [x0]
 7dc:	and	w2, w2, #0xffffff7f
 7e0:	str	w2, [x0]
 7e4:	mov	w3, #0x7fffffff            	// #2147483647
 7e8:	mov	x1, x19
 7ec:	mov	x0, #0x62                  	// #98
 7f0:	bl	0 <syscall>
 7f4:	b	814 <gomp_team_barrier_cancel+0xd0>
 7f8:	mov	x0, x20
 7fc:	bl	0 <gomp_mutex_lock_slow>
 800:	b	774 <gomp_team_barrier_cancel+0x30>
 804:	ldxr	w0, [x20]
 808:	stlxr	w1, wzr, [x20]
 80c:	cbnz	w1, 804 <gomp_team_barrier_cancel+0xc0>
 810:	tbnz	w0, #31, 820 <gomp_team_barrier_cancel+0xdc>
 814:	ldp	x19, x20, [sp, #16]
 818:	ldp	x29, x30, [sp], #32
 81c:	ret
 820:	mov	x0, x20
 824:	bl	0 <gomp_mutex_unlock_slow>
 828:	b	814 <gomp_team_barrier_cancel+0xd0>
 82c:	mov	x0, x20
 830:	bl	0 <gomp_mutex_unlock_slow>
 834:	b	794 <gomp_team_barrier_cancel+0x50>

ptrlock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_get_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x24, x0
  18:	mov	x0, #0x2                   	// #2
  1c:	ldxr	x1, [x24]
  20:	cmp	x1, #0x1
  24:	b.ne	30 <gomp_ptrlock_get_slow+0x30>  // b.any
  28:	stxr	w2, x0, [x24]
  2c:	cbnz	w2, 1c <gomp_ptrlock_get_slow+0x1c>
  30:	mov	x19, x24
  34:	adrp	x22, 0 <gomp_spin_count_var>
  38:	add	x22, x22, #0x0
  3c:	adrp	x21, 0 <gomp_managed_threads>
  40:	add	x21, x21, #0x0
  44:	adrp	x23, 0 <gomp_available_cpus>
  48:	adrp	x20, 0 <gomp_throttled_spin_count_var>
  4c:	add	x20, x20, #0x0
  50:	b	94 <gomp_ptrlock_get_slow+0x94>
  54:	adrp	x0, 0 <gomp_futex_wait>
  58:	ldr	w2, [x0]
  5c:	and	w2, w2, #0xffffff7f
  60:	str	w2, [x0]
  64:	adrp	x1, 0 <gomp_futex_wake>
  68:	ldr	w0, [x1]
  6c:	and	w0, w0, #0xffffff7f
  70:	str	w0, [x1]
  74:	mov	x4, #0x0                   	// #0
  78:	mov	w3, #0x2                   	// #2
  7c:	mov	x1, x19
  80:	mov	x0, #0x62                  	// #98
  84:	bl	0 <syscall>
  88:	ldr	w1, [x19]
  8c:	cmp	w1, #0x2
  90:	b.ne	fc <gomp_ptrlock_get_slow+0xfc>  // b.any
  94:	ldr	x1, [x21]
  98:	ldr	x0, [x23]
  9c:	cmp	x1, x0
  a0:	csel	x1, x20, x22, hi  // hi = pmore
  a4:	ldr	x2, [x1]
  a8:	cbz	x2, c8 <gomp_ptrlock_get_slow+0xc8>
  ac:	mov	x1, #0x0                   	// #0
  b0:	ldr	w0, [x19]
  b4:	cmp	w0, #0x2
  b8:	b.ne	88 <gomp_ptrlock_get_slow+0x88>  // b.any
  bc:	add	x1, x1, #0x1
  c0:	cmp	x1, x2
  c4:	b.ne	b0 <gomp_ptrlock_get_slow+0xb0>  // b.any
  c8:	mov	x4, #0x0                   	// #0
  cc:	mov	w3, #0x2                   	// #2
  d0:	adrp	x0, 0 <gomp_futex_wait>
  d4:	ldr	w2, [x0]
  d8:	mov	x1, x19
  dc:	mov	x0, #0x62                  	// #98
  e0:	bl	0 <syscall>
  e4:	tbz	w0, #31, 88 <gomp_ptrlock_get_slow+0x88>
  e8:	bl	0 <__errno_location>
  ec:	ldr	w0, [x0]
  f0:	cmp	w0, #0x26
  f4:	b.ne	88 <gomp_ptrlock_get_slow+0x88>  // b.any
  f8:	b	54 <gomp_ptrlock_get_slow+0x54>
  fc:	ldar	x0, [x24]
 100:	ldp	x19, x20, [sp, #16]
 104:	ldp	x21, x22, [sp, #32]
 108:	ldp	x23, x24, [sp, #48]
 10c:	ldp	x29, x30, [sp], #64
 110:	ret

0000000000000114 <gomp_ptrlock_set_slow>:
 114:	stp	x29, x30, [sp, #-32]!
 118:	mov	x29, sp
 11c:	str	x19, [sp, #16]
 120:	mov	x19, x0
 124:	mov	w3, #0x7fffffff            	// #2147483647
 128:	adrp	x0, 0 <gomp_futex_wake>
 12c:	ldr	w2, [x0]
 130:	mov	x1, x19
 134:	mov	x0, #0x62                  	// #98
 138:	bl	0 <syscall>
 13c:	tbnz	w0, #31, 14c <gomp_ptrlock_set_slow+0x38>
 140:	ldr	x19, [sp, #16]
 144:	ldp	x29, x30, [sp], #32
 148:	ret
 14c:	bl	0 <__errno_location>
 150:	ldr	w0, [x0]
 154:	cmp	w0, #0x26
 158:	b.ne	140 <gomp_ptrlock_set_slow+0x2c>  // b.any
 15c:	adrp	x1, 0 <gomp_futex_wait>
 160:	ldr	w0, [x1]
 164:	and	w0, w0, #0xffffff7f
 168:	str	w0, [x1]
 16c:	adrp	x0, 0 <gomp_futex_wake>
 170:	ldr	w2, [x0]
 174:	and	w2, w2, #0xffffff7f
 178:	str	w2, [x0]
 17c:	mov	w3, #0x7fffffff            	// #2147483647
 180:	mov	x1, x19
 184:	mov	x0, #0x62                  	// #98
 188:	bl	0 <syscall>
 18c:	b	140 <gomp_ptrlock_set_slow+0x2c>

time.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_get_wtime>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	add	x1, sp, #0x10
   c:	mov	w0, #0x1                   	// #1
  10:	bl	0 <clock_gettime>
  14:	tbnz	w0, #31, 44 <gomp_ialias_omp_get_wtime+0x44>
  18:	ldr	d1, [sp, #24]
  1c:	scvtf	d1, d1
  20:	mov	x0, #0xcd6500000000        	// #225833675390976
  24:	movk	x0, #0x41cd, lsl #48
  28:	fmov	d0, x0
  2c:	fdiv	d1, d1, d0
  30:	ldr	d0, [sp, #16]
  34:	scvtf	d0, d0
  38:	fadd	d0, d1, d0
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	add	x1, sp, #0x10
  48:	mov	w0, #0x0                   	// #0
  4c:	bl	0 <clock_gettime>
  50:	b	18 <gomp_ialias_omp_get_wtime+0x18>

0000000000000054 <gomp_ialias_omp_get_wtick>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	add	x1, sp, #0x10
  60:	mov	w0, #0x1                   	// #1
  64:	bl	0 <clock_getres>
  68:	tbnz	w0, #31, 98 <gomp_ialias_omp_get_wtick+0x44>
  6c:	ldr	d1, [sp, #24]
  70:	scvtf	d1, d1
  74:	mov	x0, #0xcd6500000000        	// #225833675390976
  78:	movk	x0, #0x41cd, lsl #48
  7c:	fmov	d0, x0
  80:	fdiv	d1, d1, d0
  84:	ldr	d0, [sp, #16]
  88:	scvtf	d0, d0
  8c:	fadd	d0, d1, d0
  90:	ldp	x29, x30, [sp], #32
  94:	ret
  98:	add	x1, sp, #0x10
  9c:	mov	w0, #0x0                   	// #0
  a0:	bl	0 <clock_getres>
  a4:	b	6c <gomp_ialias_omp_get_wtick+0x18>

fortran.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_init_lock_>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <gomp_ialias_omp_init_lock>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

0000000000000014 <omp_init_nest_lock_>:
  14:	stp	x29, x30, [sp, #-32]!
  18:	mov	x29, sp
  1c:	str	x19, [sp, #16]
  20:	mov	x19, x0
  24:	mov	x0, #0x10                  	// #16
  28:	bl	0 <malloc>
  2c:	str	x0, [x19]
  30:	bl	0 <gomp_ialias_omp_init_nest_lock>
  34:	ldr	x19, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	ret

0000000000000040 <omp_destroy_lock_>:
  40:	stp	x29, x30, [sp, #-16]!
  44:	mov	x29, sp
  48:	bl	0 <gomp_ialias_omp_destroy_lock>
  4c:	ldp	x29, x30, [sp], #16
  50:	ret

0000000000000054 <omp_destroy_nest_lock_>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	mov	x19, x0
  64:	ldr	x0, [x0]
  68:	bl	0 <gomp_ialias_omp_destroy_nest_lock>
  6c:	ldr	x0, [x19]
  70:	bl	0 <free>
  74:	str	xzr, [x19]
  78:	ldr	x19, [sp, #16]
  7c:	ldp	x29, x30, [sp], #32
  80:	ret

0000000000000084 <omp_set_lock_>:
  84:	stp	x29, x30, [sp, #-16]!
  88:	mov	x29, sp
  8c:	bl	0 <gomp_ialias_omp_set_lock>
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <omp_set_nest_lock_>:
  98:	stp	x29, x30, [sp, #-16]!
  9c:	mov	x29, sp
  a0:	ldr	x0, [x0]
  a4:	bl	0 <gomp_ialias_omp_set_nest_lock>
  a8:	ldp	x29, x30, [sp], #16
  ac:	ret

00000000000000b0 <omp_unset_lock_>:
  b0:	stp	x29, x30, [sp, #-16]!
  b4:	mov	x29, sp
  b8:	bl	0 <gomp_ialias_omp_unset_lock>
  bc:	ldp	x29, x30, [sp], #16
  c0:	ret

00000000000000c4 <omp_unset_nest_lock_>:
  c4:	stp	x29, x30, [sp, #-16]!
  c8:	mov	x29, sp
  cc:	ldr	x0, [x0]
  d0:	bl	0 <gomp_ialias_omp_unset_nest_lock>
  d4:	ldp	x29, x30, [sp], #16
  d8:	ret

00000000000000dc <omp_test_lock_>:
  dc:	stp	x29, x30, [sp, #-16]!
  e0:	mov	x29, sp
  e4:	bl	0 <gomp_ialias_omp_test_lock>
  e8:	ldp	x29, x30, [sp], #16
  ec:	ret

00000000000000f0 <omp_test_nest_lock_>:
  f0:	stp	x29, x30, [sp, #-16]!
  f4:	mov	x29, sp
  f8:	ldr	x0, [x0]
  fc:	bl	0 <gomp_ialias_omp_test_nest_lock>
 100:	ldp	x29, x30, [sp], #16
 104:	ret

0000000000000108 <omp_set_dynamic_>:
 108:	stp	x29, x30, [sp, #-16]!
 10c:	mov	x29, sp
 110:	ldr	w0, [x0]
 114:	bl	0 <gomp_ialias_omp_set_dynamic>
 118:	ldp	x29, x30, [sp], #16
 11c:	ret

0000000000000120 <omp_set_dynamic_8_>:
 120:	stp	x29, x30, [sp, #-16]!
 124:	mov	x29, sp
 128:	ldr	x0, [x0]
 12c:	cmp	x0, #0x0
 130:	cset	w0, ne  // ne = any
 134:	bl	0 <gomp_ialias_omp_set_dynamic>
 138:	ldp	x29, x30, [sp], #16
 13c:	ret

0000000000000140 <omp_set_nested_>:
 140:	stp	x29, x30, [sp, #-16]!
 144:	mov	x29, sp
 148:	ldr	w0, [x0]
 14c:	bl	0 <gomp_ialias_omp_set_nested>
 150:	ldp	x29, x30, [sp], #16
 154:	ret

0000000000000158 <omp_set_nested_8_>:
 158:	stp	x29, x30, [sp, #-16]!
 15c:	mov	x29, sp
 160:	ldr	x0, [x0]
 164:	cmp	x0, #0x0
 168:	cset	w0, ne  // ne = any
 16c:	bl	0 <gomp_ialias_omp_set_nested>
 170:	ldp	x29, x30, [sp], #16
 174:	ret

0000000000000178 <omp_set_num_threads_>:
 178:	stp	x29, x30, [sp, #-16]!
 17c:	mov	x29, sp
 180:	ldr	w0, [x0]
 184:	bl	0 <gomp_ialias_omp_set_num_threads>
 188:	ldp	x29, x30, [sp], #16
 18c:	ret

0000000000000190 <omp_set_num_threads_8_>:
 190:	stp	x29, x30, [sp, #-16]!
 194:	mov	x29, sp
 198:	ldr	x1, [x0]
 19c:	mov	w0, #0x80000000            	// #-2147483648
 1a0:	mov	x2, #0xffffffff80000001    	// #-2147483647
 1a4:	cmp	x1, x2
 1a8:	b.lt	1b8 <omp_set_num_threads_8_+0x28>  // b.tstop
 1ac:	mov	x0, #0x7fffffff            	// #2147483647
 1b0:	cmp	x1, x0
 1b4:	csel	x0, x1, x0, le
 1b8:	bl	0 <gomp_ialias_omp_set_num_threads>
 1bc:	ldp	x29, x30, [sp], #16
 1c0:	ret

00000000000001c4 <omp_get_dynamic_>:
 1c4:	stp	x29, x30, [sp, #-16]!
 1c8:	mov	x29, sp
 1cc:	bl	0 <gomp_ialias_omp_get_dynamic>
 1d0:	ldp	x29, x30, [sp], #16
 1d4:	ret

00000000000001d8 <omp_get_nested_>:
 1d8:	stp	x29, x30, [sp, #-16]!
 1dc:	mov	x29, sp
 1e0:	bl	0 <gomp_ialias_omp_get_nested>
 1e4:	ldp	x29, x30, [sp], #16
 1e8:	ret

00000000000001ec <omp_in_parallel_>:
 1ec:	stp	x29, x30, [sp, #-16]!
 1f0:	mov	x29, sp
 1f4:	bl	0 <gomp_ialias_omp_in_parallel>
 1f8:	ldp	x29, x30, [sp], #16
 1fc:	ret

0000000000000200 <omp_get_max_threads_>:
 200:	stp	x29, x30, [sp, #-16]!
 204:	mov	x29, sp
 208:	bl	0 <gomp_ialias_omp_get_max_threads>
 20c:	ldp	x29, x30, [sp], #16
 210:	ret

0000000000000214 <omp_get_num_procs_>:
 214:	stp	x29, x30, [sp, #-16]!
 218:	mov	x29, sp
 21c:	bl	0 <gomp_ialias_omp_get_num_procs>
 220:	ldp	x29, x30, [sp], #16
 224:	ret

0000000000000228 <omp_get_num_threads_>:
 228:	stp	x29, x30, [sp, #-16]!
 22c:	mov	x29, sp
 230:	bl	0 <gomp_ialias_omp_get_num_threads>
 234:	ldp	x29, x30, [sp], #16
 238:	ret

000000000000023c <omp_get_thread_num_>:
 23c:	stp	x29, x30, [sp, #-16]!
 240:	mov	x29, sp
 244:	bl	0 <gomp_ialias_omp_get_thread_num>
 248:	ldp	x29, x30, [sp], #16
 24c:	ret

0000000000000250 <omp_get_wtick_>:
 250:	stp	x29, x30, [sp, #-16]!
 254:	mov	x29, sp
 258:	bl	0 <gomp_ialias_omp_get_wtick>
 25c:	ldp	x29, x30, [sp], #16
 260:	ret

0000000000000264 <omp_get_wtime_>:
 264:	stp	x29, x30, [sp, #-16]!
 268:	mov	x29, sp
 26c:	bl	0 <gomp_ialias_omp_get_wtime>
 270:	ldp	x29, x30, [sp], #16
 274:	ret

0000000000000278 <omp_set_schedule_>:
 278:	stp	x29, x30, [sp, #-16]!
 27c:	mov	x29, sp
 280:	ldr	w1, [x1]
 284:	ldr	w0, [x0]
 288:	bl	0 <gomp_ialias_omp_set_schedule>
 28c:	ldp	x29, x30, [sp], #16
 290:	ret

0000000000000294 <omp_set_schedule_8_>:
 294:	stp	x29, x30, [sp, #-16]!
 298:	mov	x29, sp
 29c:	ldr	w0, [x0]
 2a0:	ldr	x2, [x1]
 2a4:	mov	w1, #0x80000000            	// #-2147483648
 2a8:	mov	x3, #0xffffffff80000001    	// #-2147483647
 2ac:	cmp	x2, x3
 2b0:	b.lt	2c0 <omp_set_schedule_8_+0x2c>  // b.tstop
 2b4:	mov	x1, #0x7fffffff            	// #2147483647
 2b8:	cmp	x2, x1
 2bc:	csel	x1, x2, x1, le
 2c0:	bl	0 <gomp_ialias_omp_set_schedule>
 2c4:	ldp	x29, x30, [sp], #16
 2c8:	ret

00000000000002cc <omp_get_schedule_>:
 2cc:	stp	x29, x30, [sp, #-48]!
 2d0:	mov	x29, sp
 2d4:	stp	x19, x20, [sp, #16]
 2d8:	mov	x20, x0
 2dc:	mov	x19, x1
 2e0:	add	x1, sp, #0x28
 2e4:	add	x0, sp, #0x2c
 2e8:	bl	0 <gomp_ialias_omp_get_schedule>
 2ec:	ldr	w0, [sp, #44]
 2f0:	and	w0, w0, #0x7fffffff
 2f4:	str	w0, [x20]
 2f8:	ldr	w0, [sp, #40]
 2fc:	str	w0, [x19]
 300:	ldp	x19, x20, [sp, #16]
 304:	ldp	x29, x30, [sp], #48
 308:	ret

000000000000030c <omp_get_schedule_8_>:
 30c:	stp	x29, x30, [sp, #-48]!
 310:	mov	x29, sp
 314:	stp	x19, x20, [sp, #16]
 318:	mov	x20, x0
 31c:	mov	x19, x1
 320:	add	x1, sp, #0x28
 324:	add	x0, sp, #0x2c
 328:	bl	0 <gomp_ialias_omp_get_schedule>
 32c:	ldr	w0, [sp, #44]
 330:	and	w0, w0, #0x7fffffff
 334:	str	w0, [x20]
 338:	ldrsw	x0, [sp, #40]
 33c:	str	x0, [x19]
 340:	ldp	x19, x20, [sp, #16]
 344:	ldp	x29, x30, [sp], #48
 348:	ret

000000000000034c <omp_get_thread_limit_>:
 34c:	stp	x29, x30, [sp, #-16]!
 350:	mov	x29, sp
 354:	bl	0 <gomp_ialias_omp_get_thread_limit>
 358:	ldp	x29, x30, [sp], #16
 35c:	ret

0000000000000360 <omp_set_max_active_levels_>:
 360:	stp	x29, x30, [sp, #-16]!
 364:	mov	x29, sp
 368:	ldr	w0, [x0]
 36c:	bl	0 <gomp_ialias_omp_set_max_active_levels>
 370:	ldp	x29, x30, [sp], #16
 374:	ret

0000000000000378 <omp_set_max_active_levels_8_>:
 378:	stp	x29, x30, [sp, #-16]!
 37c:	mov	x29, sp
 380:	ldr	x1, [x0]
 384:	mov	w0, #0x80000000            	// #-2147483648
 388:	mov	x2, #0xffffffff80000001    	// #-2147483647
 38c:	cmp	x1, x2
 390:	b.lt	3a0 <omp_set_max_active_levels_8_+0x28>  // b.tstop
 394:	mov	x0, #0x7fffffff            	// #2147483647
 398:	cmp	x1, x0
 39c:	csel	x0, x1, x0, le
 3a0:	bl	0 <gomp_ialias_omp_set_max_active_levels>
 3a4:	ldp	x29, x30, [sp], #16
 3a8:	ret

00000000000003ac <omp_get_max_active_levels_>:
 3ac:	stp	x29, x30, [sp, #-16]!
 3b0:	mov	x29, sp
 3b4:	bl	0 <gomp_ialias_omp_get_max_active_levels>
 3b8:	ldp	x29, x30, [sp], #16
 3bc:	ret

00000000000003c0 <omp_get_level_>:
 3c0:	stp	x29, x30, [sp, #-16]!
 3c4:	mov	x29, sp
 3c8:	bl	0 <gomp_ialias_omp_get_level>
 3cc:	ldp	x29, x30, [sp], #16
 3d0:	ret

00000000000003d4 <omp_get_ancestor_thread_num_>:
 3d4:	stp	x29, x30, [sp, #-16]!
 3d8:	mov	x29, sp
 3dc:	ldr	w0, [x0]
 3e0:	bl	0 <gomp_ialias_omp_get_ancestor_thread_num>
 3e4:	ldp	x29, x30, [sp], #16
 3e8:	ret

00000000000003ec <omp_get_ancestor_thread_num_8_>:
 3ec:	stp	x29, x30, [sp, #-16]!
 3f0:	mov	x29, sp
 3f4:	ldr	x0, [x0]
 3f8:	mov	x1, #0xffffffff80000001    	// #-2147483647
 3fc:	cmp	x0, x1
 400:	b.lt	41c <omp_get_ancestor_thread_num_8_+0x30>  // b.tstop
 404:	mov	x1, #0x7fffffff            	// #2147483647
 408:	cmp	x0, x1
 40c:	csel	x0, x0, x1, le
 410:	bl	0 <gomp_ialias_omp_get_ancestor_thread_num>
 414:	ldp	x29, x30, [sp], #16
 418:	ret
 41c:	mov	w0, #0x80000000            	// #-2147483648
 420:	b	410 <omp_get_ancestor_thread_num_8_+0x24>

0000000000000424 <omp_get_team_size_>:
 424:	stp	x29, x30, [sp, #-16]!
 428:	mov	x29, sp
 42c:	ldr	w0, [x0]
 430:	bl	0 <gomp_ialias_omp_get_team_size>
 434:	ldp	x29, x30, [sp], #16
 438:	ret

000000000000043c <omp_get_team_size_8_>:
 43c:	stp	x29, x30, [sp, #-16]!
 440:	mov	x29, sp
 444:	ldr	x0, [x0]
 448:	mov	x1, #0xffffffff80000001    	// #-2147483647
 44c:	cmp	x0, x1
 450:	b.lt	46c <omp_get_team_size_8_+0x30>  // b.tstop
 454:	mov	x1, #0x7fffffff            	// #2147483647
 458:	cmp	x0, x1
 45c:	csel	x0, x0, x1, le
 460:	bl	0 <gomp_ialias_omp_get_team_size>
 464:	ldp	x29, x30, [sp], #16
 468:	ret
 46c:	mov	w0, #0x80000000            	// #-2147483648
 470:	b	460 <omp_get_team_size_8_+0x24>

0000000000000474 <omp_get_active_level_>:
 474:	stp	x29, x30, [sp, #-16]!
 478:	mov	x29, sp
 47c:	bl	0 <gomp_ialias_omp_get_active_level>
 480:	ldp	x29, x30, [sp], #16
 484:	ret

0000000000000488 <omp_in_final_>:
 488:	stp	x29, x30, [sp, #-16]!
 48c:	mov	x29, sp
 490:	bl	0 <gomp_ialias_omp_in_final>
 494:	ldp	x29, x30, [sp], #16
 498:	ret

000000000000049c <omp_get_cancellation_>:
 49c:	stp	x29, x30, [sp, #-16]!
 4a0:	mov	x29, sp
 4a4:	bl	0 <gomp_ialias_omp_get_cancellation>
 4a8:	ldp	x29, x30, [sp], #16
 4ac:	ret

00000000000004b0 <omp_get_proc_bind_>:
 4b0:	stp	x29, x30, [sp, #-16]!
 4b4:	mov	x29, sp
 4b8:	bl	0 <gomp_ialias_omp_get_proc_bind>
 4bc:	ldp	x29, x30, [sp], #16
 4c0:	ret

00000000000004c4 <omp_get_num_places_>:
 4c4:	stp	x29, x30, [sp, #-16]!
 4c8:	mov	x29, sp
 4cc:	bl	0 <gomp_ialias_omp_get_num_places>
 4d0:	ldp	x29, x30, [sp], #16
 4d4:	ret

00000000000004d8 <omp_get_place_num_procs_>:
 4d8:	stp	x29, x30, [sp, #-16]!
 4dc:	mov	x29, sp
 4e0:	ldr	w0, [x0]
 4e4:	bl	0 <gomp_ialias_omp_get_place_num_procs>
 4e8:	ldp	x29, x30, [sp], #16
 4ec:	ret

00000000000004f0 <omp_get_place_num_procs_8_>:
 4f0:	stp	x29, x30, [sp, #-16]!
 4f4:	mov	x29, sp
 4f8:	ldr	x0, [x0]
 4fc:	mov	x1, #0xffffffff80000001    	// #-2147483647
 500:	cmp	x0, x1
 504:	b.lt	520 <omp_get_place_num_procs_8_+0x30>  // b.tstop
 508:	mov	x1, #0x7fffffff            	// #2147483647
 50c:	cmp	x0, x1
 510:	csel	x0, x0, x1, le
 514:	bl	0 <gomp_ialias_omp_get_place_num_procs>
 518:	ldp	x29, x30, [sp], #16
 51c:	ret
 520:	mov	w0, #0x80000000            	// #-2147483648
 524:	b	514 <omp_get_place_num_procs_8_+0x24>

0000000000000528 <omp_get_place_proc_ids_>:
 528:	stp	x29, x30, [sp, #-16]!
 52c:	mov	x29, sp
 530:	ldr	w0, [x0]
 534:	bl	0 <gomp_ialias_omp_get_place_proc_ids>
 538:	ldp	x29, x30, [sp], #16
 53c:	ret

0000000000000540 <omp_get_place_proc_ids_8_>:
 540:	stp	x29, x30, [sp, #-16]!
 544:	mov	x29, sp
 548:	ldr	x2, [x0]
 54c:	mov	w0, #0x80000000            	// #-2147483648
 550:	mov	x3, #0xffffffff80000001    	// #-2147483647
 554:	cmp	x2, x3
 558:	b.lt	568 <omp_get_place_proc_ids_8_+0x28>  // b.tstop
 55c:	mov	x0, #0x7fffffff            	// #2147483647
 560:	cmp	x2, x0
 564:	csel	x0, x2, x0, le
 568:	bl	0 <gomp_get_place_proc_ids_8>
 56c:	ldp	x29, x30, [sp], #16
 570:	ret

0000000000000574 <omp_get_place_num_>:
 574:	stp	x29, x30, [sp, #-16]!
 578:	mov	x29, sp
 57c:	bl	0 <gomp_ialias_omp_get_place_num>
 580:	ldp	x29, x30, [sp], #16
 584:	ret

0000000000000588 <omp_get_partition_num_places_>:
 588:	stp	x29, x30, [sp, #-16]!
 58c:	mov	x29, sp
 590:	bl	0 <gomp_ialias_omp_get_partition_num_places>
 594:	ldp	x29, x30, [sp], #16
 598:	ret

000000000000059c <omp_get_partition_place_nums_>:
 59c:	stp	x29, x30, [sp, #-16]!
 5a0:	mov	x29, sp
 5a4:	bl	0 <gomp_ialias_omp_get_partition_place_nums>
 5a8:	ldp	x29, x30, [sp], #16
 5ac:	ret

00000000000005b0 <omp_get_partition_place_nums_8_>:
 5b0:	stp	x29, x30, [sp, #-32]!
 5b4:	mov	x29, sp
 5b8:	str	x19, [sp, #16]
 5bc:	mov	x19, x0
 5c0:	adrp	x0, 0 <gomp_places_list>
 5c4:	ldr	x0, [x0]
 5c8:	cbz	x0, 62c <omp_get_partition_place_nums_8_+0x7c>
 5cc:	adrp	x0, 0 <gomp_tls_data>
 5d0:	ldr	x0, [x0]
 5d4:	mrs	x1, tpidr_el0
 5d8:	add	x0, x1, x0
 5dc:	ldr	w0, [x0, #92]
 5e0:	cbz	w0, 638 <omp_get_partition_place_nums_8_+0x88>
 5e4:	adrp	x0, 0 <gomp_tls_data>
 5e8:	ldr	x0, [x0]
 5ec:	mrs	x1, tpidr_el0
 5f0:	add	x0, x1, x0
 5f4:	ldr	w0, [x0, #56]
 5f8:	cbz	w0, 62c <omp_get_partition_place_nums_8_+0x7c>
 5fc:	mov	x1, #0x0                   	// #0
 600:	adrp	x3, 0 <gomp_tls_data>
 604:	ldr	x3, [x3]
 608:	mrs	x2, tpidr_el0
 60c:	add	x3, x2, x3
 610:	ldr	w2, [x3, #52]
 614:	add	x2, x2, w1, uxtw
 618:	str	x2, [x19, x1, lsl #3]
 61c:	add	x1, x1, #0x1
 620:	ldr	w2, [x3, #56]
 624:	cmp	w2, w1
 628:	b.hi	610 <omp_get_partition_place_nums_8_+0x60>  // b.pmore
 62c:	ldr	x19, [sp, #16]
 630:	ldp	x29, x30, [sp], #32
 634:	ret
 638:	bl	0 <gomp_init_affinity>
 63c:	b	5e4 <omp_get_partition_place_nums_8_+0x34>

0000000000000640 <omp_set_default_device_>:
 640:	stp	x29, x30, [sp, #-16]!
 644:	mov	x29, sp
 648:	ldr	w0, [x0]
 64c:	bl	0 <gomp_ialias_omp_set_default_device>
 650:	ldp	x29, x30, [sp], #16
 654:	ret

0000000000000658 <omp_set_default_device_8_>:
 658:	stp	x29, x30, [sp, #-16]!
 65c:	mov	x29, sp
 660:	ldr	x1, [x0]
 664:	mov	w0, #0x80000000            	// #-2147483648
 668:	mov	x2, #0xffffffff80000001    	// #-2147483647
 66c:	cmp	x1, x2
 670:	b.lt	680 <omp_set_default_device_8_+0x28>  // b.tstop
 674:	mov	x0, #0x7fffffff            	// #2147483647
 678:	cmp	x1, x0
 67c:	csel	x0, x1, x0, le
 680:	bl	0 <gomp_ialias_omp_set_default_device>
 684:	ldp	x29, x30, [sp], #16
 688:	ret

000000000000068c <omp_get_default_device_>:
 68c:	stp	x29, x30, [sp, #-16]!
 690:	mov	x29, sp
 694:	bl	0 <gomp_ialias_omp_get_default_device>
 698:	ldp	x29, x30, [sp], #16
 69c:	ret

00000000000006a0 <omp_get_num_devices_>:
 6a0:	stp	x29, x30, [sp, #-16]!
 6a4:	mov	x29, sp
 6a8:	bl	0 <gomp_ialias_omp_get_num_devices>
 6ac:	ldp	x29, x30, [sp], #16
 6b0:	ret

00000000000006b4 <omp_get_num_teams_>:
 6b4:	stp	x29, x30, [sp, #-16]!
 6b8:	mov	x29, sp
 6bc:	bl	0 <gomp_ialias_omp_get_num_teams>
 6c0:	ldp	x29, x30, [sp], #16
 6c4:	ret

00000000000006c8 <omp_get_team_num_>:
 6c8:	stp	x29, x30, [sp, #-16]!
 6cc:	mov	x29, sp
 6d0:	bl	0 <gomp_ialias_omp_get_team_num>
 6d4:	ldp	x29, x30, [sp], #16
 6d8:	ret

00000000000006dc <omp_is_initial_device_>:
 6dc:	stp	x29, x30, [sp, #-16]!
 6e0:	mov	x29, sp
 6e4:	bl	0 <gomp_ialias_omp_is_initial_device>
 6e8:	ldp	x29, x30, [sp], #16
 6ec:	ret

00000000000006f0 <omp_get_initial_device_>:
 6f0:	stp	x29, x30, [sp, #-16]!
 6f4:	mov	x29, sp
 6f8:	bl	0 <gomp_ialias_omp_get_initial_device>
 6fc:	ldp	x29, x30, [sp], #16
 700:	ret

0000000000000704 <omp_get_max_task_priority_>:
 704:	stp	x29, x30, [sp, #-16]!
 708:	mov	x29, sp
 70c:	bl	0 <gomp_ialias_omp_get_max_task_priority>
 710:	ldp	x29, x30, [sp], #16
 714:	ret

0000000000000718 <omp_set_affinity_format_>:
 718:	stp	x29, x30, [sp, #-16]!
 71c:	mov	x29, sp
 720:	bl	0 <gomp_set_affinity_format>
 724:	ldp	x29, x30, [sp], #16
 728:	ret

000000000000072c <omp_get_affinity_format_>:
 72c:	stp	x29, x30, [sp, #-48]!
 730:	mov	x29, sp
 734:	stp	x19, x20, [sp, #16]
 738:	stp	x21, x22, [sp, #32]
 73c:	mov	x21, x0
 740:	mov	x20, x1
 744:	adrp	x0, 0 <gomp_affinity_format_var>
 748:	ldr	x22, [x0]
 74c:	mov	x0, x22
 750:	bl	0 <strlen>
 754:	mov	x19, x0
 758:	cbz	x20, 784 <omp_get_affinity_format_+0x58>
 75c:	cmp	x0, x20
 760:	b.cs	798 <omp_get_affinity_format_+0x6c>  // b.hs, b.nlast
 764:	mov	x2, x0
 768:	mov	x1, x22
 76c:	mov	x0, x21
 770:	bl	0 <memcpy>
 774:	sub	x2, x20, x19
 778:	mov	w1, #0x20                  	// #32
 77c:	add	x0, x21, x19
 780:	bl	0 <memset>
 784:	mov	w0, w19
 788:	ldp	x19, x20, [sp, #16]
 78c:	ldp	x21, x22, [sp, #32]
 790:	ldp	x29, x30, [sp], #48
 794:	ret
 798:	mov	x2, x20
 79c:	mov	x1, x22
 7a0:	mov	x0, x21
 7a4:	bl	0 <memcpy>
 7a8:	b	784 <omp_get_affinity_format_+0x58>

00000000000007ac <omp_display_affinity_>:
 7ac:	sub	sp, sp, #0x340
 7b0:	stp	x29, x30, [sp]
 7b4:	mov	x29, sp
 7b8:	stp	x19, x20, [sp, #16]
 7bc:	stp	x21, x22, [sp, #32]
 7c0:	cbz	x1, 8ec <omp_display_affinity_+0x140>
 7c4:	mov	x21, x0
 7c8:	mov	x19, x1
 7cc:	add	x20, sp, #0x240
 7d0:	cmp	x1, #0xff
 7d4:	b.hi	864 <omp_display_affinity_+0xb8>  // b.pmore
 7d8:	mov	x2, x19
 7dc:	mov	x1, x21
 7e0:	mov	x0, x20
 7e4:	bl	0 <memcpy>
 7e8:	strb	wzr, [x20, x19]
 7ec:	bl	0 <pthread_self>
 7f0:	mov	x21, x0
 7f4:	adrp	x4, 0 <gomp_tls_data>
 7f8:	ldr	x4, [x4]
 7fc:	mrs	x0, tpidr_el0
 800:	add	x4, x0, x4
 804:	ldr	w5, [x4, #92]
 808:	add	x4, x4, #0x10
 80c:	mov	x3, x21
 810:	mov	x2, x20
 814:	mov	x1, #0x200                 	// #512
 818:	add	x0, sp, #0x40
 81c:	bl	0 <gomp_display_affinity>
 820:	mov	x19, x0
 824:	cmp	x0, #0x1ff
 828:	b.hi	888 <omp_display_affinity_+0xdc>  // b.pmore
 82c:	add	x0, sp, #0x40
 830:	mov	w1, #0xa                   	// #10
 834:	strb	w1, [x0, x19]
 838:	add	x1, x19, #0x1
 83c:	bl	0 <gomp_print_string>
 840:	cmp	x20, #0x0
 844:	add	x0, sp, #0x240
 848:	ccmp	x0, x20, #0x4, ne  // ne = any
 84c:	b.ne	87c <omp_display_affinity_+0xd0>  // b.any
 850:	ldp	x19, x20, [sp, #16]
 854:	ldp	x21, x22, [sp, #32]
 858:	ldp	x29, x30, [sp]
 85c:	add	sp, sp, #0x340
 860:	ret
 864:	add	x0, x1, #0x1
 868:	bl	0 <gomp_malloc>
 86c:	mov	x20, x0
 870:	b	7d8 <omp_display_affinity_+0x2c>
 874:	mov	x20, #0x0                   	// #0
 878:	b	82c <omp_display_affinity_+0x80>
 87c:	mov	x0, x20
 880:	bl	0 <free>
 884:	b	850 <omp_display_affinity_+0xa4>
 888:	str	x23, [sp, #48]
 88c:	add	x23, x0, #0x1
 890:	mov	x0, x23
 894:	bl	0 <gomp_malloc>
 898:	mov	x22, x0
 89c:	mov	x2, x20
 8a0:	adrp	x4, 0 <gomp_tls_data>
 8a4:	ldr	x4, [x4]
 8a8:	mrs	x0, tpidr_el0
 8ac:	add	x4, x0, x4
 8b0:	ldr	w5, [x4, #92]
 8b4:	add	x4, x4, #0x10
 8b8:	mov	x3, x21
 8bc:	mov	x1, #0x200                 	// #512
 8c0:	add	x0, sp, #0x40
 8c4:	bl	0 <gomp_display_affinity>
 8c8:	mov	w0, #0xa                   	// #10
 8cc:	strb	w0, [x22, x19]
 8d0:	mov	x1, x23
 8d4:	mov	x0, x22
 8d8:	bl	0 <gomp_print_string>
 8dc:	mov	x0, x22
 8e0:	bl	0 <free>
 8e4:	ldr	x23, [sp, #48]
 8e8:	b	840 <omp_display_affinity_+0x94>
 8ec:	adrp	x0, 0 <gomp_affinity_format_var>
 8f0:	ldr	x19, [x0]
 8f4:	bl	0 <pthread_self>
 8f8:	mov	x21, x0
 8fc:	adrp	x4, 0 <gomp_tls_data>
 900:	ldr	x4, [x4]
 904:	mrs	x0, tpidr_el0
 908:	add	x4, x0, x4
 90c:	ldr	w5, [x4, #92]
 910:	add	x4, x4, #0x10
 914:	mov	x3, x21
 918:	mov	x2, x19
 91c:	mov	x1, #0x200                 	// #512
 920:	add	x0, sp, #0x40
 924:	bl	0 <gomp_display_affinity>
 928:	mov	x19, x0
 92c:	cmp	x0, #0x1ff
 930:	b.ls	874 <omp_display_affinity_+0xc8>  // b.plast
 934:	str	x23, [sp, #48]
 938:	add	x23, x0, #0x1
 93c:	mov	x0, x23
 940:	bl	0 <gomp_malloc>
 944:	mov	x22, x0
 948:	adrp	x0, 0 <gomp_affinity_format_var>
 94c:	ldr	x2, [x0]
 950:	mov	x20, #0x0                   	// #0
 954:	b	8a0 <omp_display_affinity_+0xf4>

0000000000000958 <omp_capture_affinity_>:
 958:	stp	x29, x30, [sp, #-320]!
 95c:	mov	x29, sp
 960:	stp	x19, x20, [sp, #16]
 964:	stp	x21, x22, [sp, #32]
 968:	mov	x21, x0
 96c:	mov	x20, x2
 970:	cbz	x3, a20 <omp_capture_affinity_+0xc8>
 974:	str	x23, [sp, #48]
 978:	mov	x23, x1
 97c:	mov	x19, x3
 980:	add	x22, sp, #0x40
 984:	cmp	x3, #0xff
 988:	b.hi	9f4 <omp_capture_affinity_+0x9c>  // b.pmore
 98c:	mov	x2, x19
 990:	mov	x1, x23
 994:	mov	x0, x22
 998:	bl	0 <memcpy>
 99c:	strb	wzr, [x22, x19]
 9a0:	bl	0 <pthread_self>
 9a4:	adrp	x4, 0 <gomp_tls_data>
 9a8:	ldr	x4, [x4]
 9ac:	mrs	x1, tpidr_el0
 9b0:	add	x4, x1, x4
 9b4:	ldr	w5, [x4, #92]
 9b8:	add	x4, x4, #0x10
 9bc:	mov	x3, x0
 9c0:	mov	x2, x22
 9c4:	mov	x1, x20
 9c8:	mov	x0, x21
 9cc:	bl	0 <gomp_display_affinity>
 9d0:	mov	x19, x0
 9d4:	cmp	x22, #0x0
 9d8:	add	x0, sp, #0x40
 9dc:	ccmp	x0, x22, #0x4, ne  // ne = any
 9e0:	b.eq	a04 <omp_capture_affinity_+0xac>  // b.none
 9e4:	mov	x0, x22
 9e8:	bl	0 <free>
 9ec:	ldr	x23, [sp, #48]
 9f0:	b	a5c <omp_capture_affinity_+0x104>
 9f4:	add	x0, x3, #0x1
 9f8:	bl	0 <gomp_malloc>
 9fc:	mov	x22, x0
 a00:	b	98c <omp_capture_affinity_+0x34>
 a04:	ldr	x23, [sp, #48]
 a08:	b	a5c <omp_capture_affinity_+0x104>
 a0c:	sub	x2, x20, x19
 a10:	mov	w1, #0x20                  	// #32
 a14:	add	x0, x21, x19
 a18:	bl	0 <memset>
 a1c:	b	a64 <omp_capture_affinity_+0x10c>
 a20:	adrp	x0, 0 <gomp_affinity_format_var>
 a24:	ldr	x19, [x0]
 a28:	bl	0 <pthread_self>
 a2c:	adrp	x4, 0 <gomp_tls_data>
 a30:	ldr	x4, [x4]
 a34:	mrs	x1, tpidr_el0
 a38:	add	x4, x1, x4
 a3c:	ldr	w5, [x4, #92]
 a40:	add	x4, x4, #0x10
 a44:	mov	x3, x0
 a48:	mov	x2, x19
 a4c:	mov	x1, x20
 a50:	mov	x0, x21
 a54:	bl	0 <gomp_display_affinity>
 a58:	mov	x19, x0
 a5c:	cmp	x20, x19
 a60:	b.hi	a0c <omp_capture_affinity_+0xb4>  // b.pmore
 a64:	mov	w0, w19
 a68:	ldp	x19, x20, [sp, #16]
 a6c:	ldp	x21, x22, [sp, #32]
 a70:	ldp	x29, x30, [sp], #320
 a74:	ret

0000000000000a78 <omp_pause_resource_>:
 a78:	stp	x29, x30, [sp, #-16]!
 a7c:	mov	x29, sp
 a80:	ldr	w1, [x1]
 a84:	ldr	w0, [x0]
 a88:	bl	0 <gomp_ialias_omp_pause_resource>
 a8c:	ldp	x29, x30, [sp], #16
 a90:	ret

0000000000000a94 <omp_pause_resource_all_>:
 a94:	stp	x29, x30, [sp, #-16]!
 a98:	mov	x29, sp
 a9c:	ldr	w0, [x0]
 aa0:	bl	0 <gomp_ialias_omp_pause_resource_all>
 aa4:	ldp	x29, x30, [sp], #16
 aa8:	ret

affinity.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_thread_affinity>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x2, 0 <gomp_places_list>
   c:	ldr	x2, [x2]
  10:	ldr	x2, [x2, w1, uxtw #3]
  14:	adrp	x1, 0 <gomp_cpuset_size>
  18:	ldr	x1, [x1]
  1c:	bl	0 <pthread_attr_setaffinity_np>
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <gomp_affinity_alloc>:
  28:	stp	x29, x30, [sp, #-48]!
  2c:	mov	x29, sp
  30:	stp	x19, x20, [sp, #16]
  34:	stp	x21, x22, [sp, #32]
  38:	mov	x21, x0
  3c:	and	w22, w1, #0xff
  40:	adrp	x0, 0 <gomp_cpusetp>
  44:	ldr	x19, [x0]
  48:	cbz	x19, a0 <gomp_affinity_alloc+0x78>
  4c:	adrp	x0, 0 <gomp_cpuset_size>
  50:	ldr	x20, [x0]
  54:	add	x0, x20, #0x8
  58:	mul	x0, x0, x21
  5c:	bl	0 <malloc>
  60:	mov	x19, x0
  64:	cbz	x0, b4 <gomp_affinity_alloc+0x8c>
  68:	lsl	x3, x21, #3
  6c:	add	x1, x0, x3
  70:	cbz	x21, 8c <gomp_affinity_alloc+0x64>
  74:	mov	x2, x0
  78:	mov	x3, x1
  7c:	str	x1, [x2], #8
  80:	add	x1, x1, x20
  84:	cmp	x2, x3
  88:	b.ne	7c <gomp_affinity_alloc+0x54>  // b.any
  8c:	mov	x0, x19
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x21, x22, [sp, #32]
  98:	ldp	x29, x30, [sp], #48
  9c:	ret
  a0:	cbnz	w22, 8c <gomp_affinity_alloc+0x64>
  a4:	adrp	x0, 0 <gomp_init_thread_affinity>
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <gomp_error>
  b0:	b	8c <gomp_affinity_alloc+0x64>
  b4:	cbnz	w22, 8c <gomp_affinity_alloc+0x64>
  b8:	adrp	x0, 0 <gomp_init_thread_affinity>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <gomp_error>
  c4:	b	8c <gomp_affinity_alloc+0x64>

00000000000000c8 <gomp_affinity_init_place>:
  c8:	stp	x29, x30, [sp, #-16]!
  cc:	mov	x29, sp
  d0:	adrp	x1, 0 <gomp_cpuset_size>
  d4:	ldr	x2, [x1]
  d8:	mov	w1, #0x0                   	// #0
  dc:	bl	0 <memset>
  e0:	ldp	x29, x30, [sp], #16
  e4:	ret

00000000000000e8 <gomp_affinity_add_cpus>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	mov	x29, sp
  f0:	str	x19, [sp, #16]
  f4:	and	w19, w4, #0xff
  f8:	adrp	x4, 0 <gomp_cpuset_size>
  fc:	ldr	x4, [x4]
 100:	lsl	x8, x4, #3
 104:	adrp	x7, 0 <gomp_cpuset_size>
 108:	mov	x9, #0x1                   	// #1
 10c:	cmp	x1, x4, lsl #3
 110:	b.cc	158 <gomp_affinity_add_cpus+0x70>  // b.lo, b.ul, b.last
 114:	cbz	w19, 120 <gomp_affinity_add_cpus+0x38>
 118:	mov	w19, #0x0                   	// #0
 11c:	b	1ac <gomp_affinity_add_cpus+0xc4>
 120:	adrp	x0, 0 <gomp_init_thread_affinity>
 124:	add	x0, x0, #0x0
 128:	bl	0 <gomp_error>
 12c:	b	1ac <gomp_affinity_add_cpus+0xc4>
 130:	subs	x2, x2, #0x1
 134:	b.eq	1a8 <gomp_affinity_add_cpus+0xc0>  // b.none
 138:	tbnz	x3, #63, 17c <gomp_affinity_add_cpus+0x94>
 13c:	cmp	x3, #0x0
 140:	b.le	14c <gomp_affinity_add_cpus+0x64>
 144:	cmn	x3, x1
 148:	b.cs	188 <gomp_affinity_add_cpus+0xa0>  // b.hs, b.nlast
 14c:	add	x1, x1, x3
 150:	cmp	x8, x1
 154:	b.ls	114 <gomp_affinity_add_cpus+0x2c>  // b.plast
 158:	ldr	x4, [x7]
 15c:	cmp	x4, x1, lsr #3
 160:	b.ls	130 <gomp_affinity_add_cpus+0x48>  // b.plast
 164:	lsr	x6, x1, #6
 168:	lsl	x4, x9, x1
 16c:	ldr	x5, [x0, x6, lsl #3]
 170:	orr	x4, x5, x4
 174:	str	x4, [x0, x6, lsl #3]
 178:	b	130 <gomp_affinity_add_cpus+0x48>
 17c:	add	x4, x3, x1
 180:	cmp	x1, x4
 184:	b.cs	14c <gomp_affinity_add_cpus+0x64>  // b.hs, b.nlast
 188:	cbz	w19, 194 <gomp_affinity_add_cpus+0xac>
 18c:	mov	w19, #0x0                   	// #0
 190:	b	1ac <gomp_affinity_add_cpus+0xc4>
 194:	mov	x2, x3
 198:	adrp	x0, 0 <gomp_init_thread_affinity>
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <gomp_error>
 1a4:	b	1ac <gomp_affinity_add_cpus+0xc4>
 1a8:	mov	w19, #0x1                   	// #1
 1ac:	mov	w0, w19
 1b0:	ldr	x19, [sp, #16]
 1b4:	ldp	x29, x30, [sp], #32
 1b8:	ret

00000000000001bc <gomp_affinity_init_level_1>:
 1bc:	stp	x29, x30, [sp, #-240]!
 1c0:	mov	x29, sp
 1c4:	str	w0, [sp, #152]
 1c8:	str	w1, [sp, #156]
 1cc:	str	x4, [sp, #112]
 1d0:	and	w0, w5, #0xff
 1d4:	str	w0, [sp, #148]
 1d8:	str	xzr, [sp, #232]
 1dc:	str	xzr, [sp, #224]
 1e0:	adrp	x0, 0 <gomp_cpuset_size>
 1e4:	ldr	x0, [x0]
 1e8:	cmp	xzr, x0, lsl #3
 1ec:	b.eq	5cc <gomp_affinity_init_level_1+0x410>  // b.none
 1f0:	stp	x19, x20, [sp, #16]
 1f4:	stp	x21, x22, [sp, #32]
 1f8:	stp	x23, x24, [sp, #48]
 1fc:	stp	x25, x26, [sp, #64]
 200:	stp	x27, x28, [sp, #80]
 204:	lsl	x26, x0, #3
 208:	cmp	w1, #0x3
 20c:	adrp	x1, 0 <gomp_init_thread_affinity>
 210:	add	x1, x1, #0x0
 214:	adrp	x0, 0 <gomp_init_thread_affinity>
 218:	add	x0, x0, #0x0
 21c:	csel	x0, x1, x0, eq  // eq = none
 220:	str	x0, [sp, #128]
 224:	mov	x21, #0x0                   	// #0
 228:	adrp	x28, 0 <gomp_cpuset_size>
 22c:	adrp	x0, 0 <gomp_init_thread_affinity>
 230:	add	x0, x0, #0x0
 234:	str	x0, [sp, #136]
 238:	mov	x25, x2
 23c:	mov	x27, x26
 240:	mov	x26, x3
 244:	b	4b8 <gomp_affinity_init_level_1+0x2fc>
 248:	ldr	x0, [x28]
 24c:	ldr	x1, [sp, #104]
 250:	cmp	x1, x0
 254:	b.cs	4ac <gomp_affinity_init_level_1+0x2f0>  // b.hs, b.nlast
 258:	mov	x0, #0x1                   	// #1
 25c:	ldrb	w1, [sp, #144]
 260:	lsl	x0, x0, x1
 264:	ldr	x1, [x26, x24, lsl #3]
 268:	bic	x0, x1, x0
 26c:	str	x0, [x26, x24, lsl #3]
 270:	b	4ac <gomp_affinity_init_level_1+0x2f0>
 274:	ldr	x0, [sp, #160]
 278:	bl	c8 <gomp_affinity_init_place>
 27c:	ldr	x19, [sp, #216]
 280:	ldrb	w0, [x19]
 284:	cmp	w0, #0x0
 288:	ccmp	w0, #0xa, #0x4, ne  // ne = any
 28c:	b.ne	588 <gomp_affinity_init_level_1+0x3cc>  // b.any
 290:	ldr	x0, [x28]
 294:	ldr	x1, [sp, #104]
 298:	cmp	x1, x0
 29c:	b.cs	2b0 <gomp_affinity_init_level_1+0xf4>  // b.hs, b.nlast
 2a0:	ldr	x0, [x26, x24, lsl #3]
 2a4:	ldrb	w1, [sp, #144]
 2a8:	lsr	x0, x0, x1
 2ac:	tbnz	w0, #0, 48c <gomp_affinity_init_level_1+0x2d0>
 2b0:	adrp	x1, 0 <gomp_places_list_len>
 2b4:	ldr	x0, [x1]
 2b8:	add	x0, x0, #0x1
 2bc:	str	x0, [x1]
 2c0:	b	47c <gomp_affinity_init_level_1+0x2c0>
 2c4:	ldrb	w5, [sp, #148]
 2c8:	ldr	x4, [sp, #112]
 2cc:	ldr	x3, [sp, #176]
 2d0:	ldr	x2, [sp, #168]
 2d4:	mov	w1, #0x2                   	// #2
 2d8:	mov	w0, w25
 2dc:	bl	1bc <gomp_affinity_init_level_1>
 2e0:	add	x19, x19, #0x1
 2e4:	cmp	x21, x19
 2e8:	b.cc	3a4 <gomp_affinity_init_level_1+0x1e8>  // b.lo, b.ul, b.last
 2ec:	lsr	x24, x19, #3
 2f0:	ldr	x0, [x28]
 2f4:	cmp	x0, x19, lsr #3
 2f8:	b.ls	2e0 <gomp_affinity_init_level_1+0x124>  // b.plast
 2fc:	lsr	x23, x19, #6
 300:	and	w20, w19, #0x3f
 304:	ldr	x0, [x22, x23, lsl #3]
 308:	lsr	x0, x0, x20
 30c:	tbz	w0, #0, 2e0 <gomp_affinity_init_level_1+0x124>
 310:	cmp	w26, #0x3
 314:	ccmp	w26, w25, #0x4, eq  // eq = none
 318:	b.gt	2c4 <gomp_affinity_init_level_1+0x108>
 31c:	cmp	w25, #0x1
 320:	b.eq	384 <gomp_affinity_init_level_1+0x1c8>  // b.none
 324:	mov	w4, #0x1                   	// #1
 328:	mov	x3, #0x0                   	// #0
 32c:	mov	x2, #0x1                   	// #1
 330:	mov	x1, x19
 334:	ldr	x0, [sp, #160]
 338:	bl	e8 <gomp_affinity_add_cpus>
 33c:	and	w0, w0, #0xff
 340:	cbz	w0, 2e0 <gomp_affinity_init_level_1+0x124>
 344:	ldr	x0, [x28]
 348:	cmp	x24, x0
 34c:	b.cs	364 <gomp_affinity_init_level_1+0x1a8>  // b.hs, b.nlast
 350:	mov	x0, #0x1                   	// #1
 354:	lsl	x20, x0, x20
 358:	ldr	x0, [x22, x23, lsl #3]
 35c:	bic	x20, x0, x20
 360:	str	x20, [x22, x23, lsl #3]
 364:	cmp	w25, #0x1
 368:	b.ne	2e0 <gomp_affinity_init_level_1+0x124>  // b.any
 36c:	adrp	x0, 0 <gomp_places_list_len>
 370:	ldr	x0, [x0]
 374:	add	x0, x0, #0x1
 378:	adrp	x1, 0 <gomp_places_list_len>
 37c:	str	x0, [x1]
 380:	b	2e0 <gomp_affinity_init_level_1+0x124>
 384:	adrp	x0, 0 <gomp_places_list_len>
 388:	ldr	x1, [x0]
 38c:	adrp	x0, 0 <gomp_places_list>
 390:	ldr	x0, [x0]
 394:	ldr	x0, [x0, x1, lsl #3]
 398:	str	x0, [sp, #160]
 39c:	bl	c8 <gomp_affinity_init_place>
 3a0:	b	324 <gomp_affinity_init_level_1+0x168>
 3a4:	ldr	x0, [sp, #216]
 3a8:	ldrb	w1, [x0]
 3ac:	cmp	w1, #0x2c
 3b0:	b.eq	434 <gomp_affinity_init_level_1+0x278>  // b.none
 3b4:	ldr	x0, [sp, #216]
 3b8:	ldrb	w1, [x0]
 3bc:	cmp	w1, #0x0
 3c0:	ccmp	w1, #0xa, #0x4, ne  // ne = any
 3c4:	b.eq	440 <gomp_affinity_init_level_1+0x284>  // b.none
 3c8:	str	wzr, [x27]
 3cc:	mov	w2, #0xa                   	// #10
 3d0:	add	x1, sp, #0xd8
 3d4:	bl	0 <strtoul>
 3d8:	mov	x19, x0
 3dc:	ldr	w0, [x27]
 3e0:	cbnz	w0, 458 <gomp_affinity_init_level_1+0x29c>
 3e4:	ldr	x0, [sp, #216]
 3e8:	ldrb	w1, [x0]
 3ec:	mov	x21, x19
 3f0:	cmp	w1, #0x2d
 3f4:	b.ne	2ec <gomp_affinity_init_level_1+0x130>  // b.any
 3f8:	mov	w2, #0xa                   	// #10
 3fc:	add	x1, sp, #0xd8
 400:	add	x0, x0, #0x1
 404:	bl	0 <strtoul>
 408:	mov	x21, x0
 40c:	ldr	w0, [x27]
 410:	cmp	w0, #0x0
 414:	ccmp	x19, x21, #0x2, eq  // eq = none
 418:	b.ls	2ec <gomp_affinity_init_level_1+0x130>  // b.plast
 41c:	ldr	x27, [sp, #184]
 420:	ldr	x21, [sp, #192]
 424:	ldr	x25, [sp, #168]
 428:	ldr	x26, [sp, #176]
 42c:	ldr	x24, [sp, #200]
 430:	b	46c <gomp_affinity_init_level_1+0x2b0>
 434:	add	x0, x0, #0x1
 438:	str	x0, [sp, #216]
 43c:	b	3b4 <gomp_affinity_init_level_1+0x1f8>
 440:	ldr	x27, [sp, #184]
 444:	ldr	x21, [sp, #192]
 448:	ldr	x25, [sp, #168]
 44c:	ldr	x26, [sp, #176]
 450:	ldr	x24, [sp, #200]
 454:	b	46c <gomp_affinity_init_level_1+0x2b0>
 458:	ldr	x27, [sp, #184]
 45c:	ldr	x21, [sp, #192]
 460:	ldr	x25, [sp, #168]
 464:	ldr	x26, [sp, #176]
 468:	ldr	x24, [sp, #200]
 46c:	ldr	w0, [sp, #156]
 470:	ldr	w1, [sp, #152]
 474:	cmp	w0, w1
 478:	b.eq	290 <gomp_affinity_init_level_1+0xd4>  // b.none
 47c:	ldr	x0, [x28]
 480:	ldr	x1, [sp, #104]
 484:	cmp	x1, x0
 488:	b.cs	4a4 <gomp_affinity_init_level_1+0x2e8>  // b.hs, b.nlast
 48c:	mov	x0, #0x1                   	// #1
 490:	ldrb	w1, [sp, #144]
 494:	lsl	x0, x0, x1
 498:	ldr	x1, [x26, x24, lsl #3]
 49c:	bic	x0, x1, x0
 4a0:	str	x0, [x26, x24, lsl #3]
 4a4:	ldr	x0, [sp, #120]
 4a8:	bl	0 <fclose>
 4ac:	add	x21, x21, #0x1
 4b0:	cmp	x27, x21
 4b4:	b.eq	5dc <gomp_affinity_init_level_1+0x420>  // b.none
 4b8:	adrp	x0, 0 <gomp_places_list_len>
 4bc:	ldr	x0, [x0]
 4c0:	cmp	x0, x25
 4c4:	b.cs	5b8 <gomp_affinity_init_level_1+0x3fc>  // b.hs, b.nlast
 4c8:	lsr	x0, x21, #3
 4cc:	str	x0, [sp, #104]
 4d0:	ldr	x0, [x28]
 4d4:	cmp	x0, x21, lsr #3
 4d8:	b.ls	4ac <gomp_affinity_init_level_1+0x2f0>  // b.plast
 4dc:	mov	x22, x26
 4e0:	lsr	x24, x21, #6
 4e4:	and	w0, w21, #0x3f
 4e8:	mov	w1, w0
 4ec:	str	w0, [sp, #144]
 4f0:	ldr	x0, [x26, x24, lsl #3]
 4f4:	lsr	x0, x0, x1
 4f8:	tbz	w0, #0, 4ac <gomp_affinity_init_level_1+0x2f0>
 4fc:	ldr	x3, [sp, #128]
 500:	mov	x2, x21
 504:	ldr	x1, [sp, #136]
 508:	ldr	x19, [sp, #112]
 50c:	add	x0, x19, #0x1b
 510:	bl	0 <sprintf>
 514:	adrp	x1, 0 <gomp_init_thread_affinity>
 518:	add	x1, x1, #0x0
 51c:	mov	x0, x19
 520:	bl	0 <fopen>
 524:	str	x0, [sp, #120]
 528:	cbz	x0, 248 <gomp_affinity_init_level_1+0x8c>
 52c:	ldr	x3, [sp, #120]
 530:	mov	w2, #0xa                   	// #10
 534:	add	x1, sp, #0xe0
 538:	add	x0, sp, #0xe8
 53c:	bl	0 <__getdelim>
 540:	cmp	x0, #0x0
 544:	b.le	4a4 <gomp_affinity_init_level_1+0x2e8>
 548:	ldr	x19, [sp, #232]
 54c:	str	x19, [sp, #216]
 550:	adrp	x0, 0 <gomp_places_list_len>
 554:	ldr	x1, [x0]
 558:	adrp	x0, 0 <gomp_places_list>
 55c:	ldr	x0, [x0]
 560:	ldr	x0, [x0, x1, lsl #3]
 564:	str	x0, [sp, #160]
 568:	ldr	w0, [sp, #156]
 56c:	ldr	w1, [sp, #152]
 570:	cmp	w0, w1
 574:	b.eq	274 <gomp_affinity_init_level_1+0xb8>  // b.none
 578:	ldrb	w0, [x19]
 57c:	cmp	w0, #0x0
 580:	ccmp	w0, #0xa, #0x4, ne  // ne = any
 584:	b.eq	47c <gomp_affinity_init_level_1+0x2c0>  // b.none
 588:	bl	0 <__errno_location>
 58c:	mov	x1, x0
 590:	mov	x0, x19
 594:	str	x27, [sp, #184]
 598:	mov	x27, x1
 59c:	str	x21, [sp, #192]
 5a0:	str	x25, [sp, #168]
 5a4:	ldr	w25, [sp, #152]
 5a8:	str	x26, [sp, #176]
 5ac:	ldr	w26, [sp, #156]
 5b0:	str	x24, [sp, #200]
 5b4:	b	3c8 <gomp_affinity_init_level_1+0x20c>
 5b8:	ldp	x19, x20, [sp, #16]
 5bc:	ldp	x21, x22, [sp, #32]
 5c0:	ldp	x23, x24, [sp, #48]
 5c4:	ldp	x25, x26, [sp, #64]
 5c8:	ldp	x27, x28, [sp, #80]
 5cc:	ldr	x0, [sp, #232]
 5d0:	bl	0 <free>
 5d4:	ldp	x29, x30, [sp], #240
 5d8:	ret
 5dc:	ldp	x19, x20, [sp, #16]
 5e0:	ldp	x21, x22, [sp, #32]
 5e4:	ldp	x23, x24, [sp, #48]
 5e8:	ldp	x25, x26, [sp, #64]
 5ec:	ldp	x27, x28, [sp, #80]
 5f0:	b	5cc <gomp_affinity_init_level_1+0x410>

00000000000005f4 <gomp_affinity_remove_cpu>:
 5f4:	stp	x29, x30, [sp, #-16]!
 5f8:	mov	x29, sp
 5fc:	adrp	x2, 0 <gomp_cpuset_size>
 600:	ldr	x2, [x2]
 604:	cmp	x1, x2, lsl #3
 608:	b.cs	644 <gomp_affinity_remove_cpu+0x50>  // b.hs, b.nlast
 60c:	cmp	x2, x1, lsr #3
 610:	b.ls	658 <gomp_affinity_remove_cpu+0x64>  // b.plast
 614:	lsr	x3, x1, #6
 618:	ldr	x4, [x0, x3, lsl #3]
 61c:	and	w2, w1, #0x3f
 620:	lsr	x5, x4, x2
 624:	tbz	w5, #0, 658 <gomp_affinity_remove_cpu+0x64>
 628:	mov	x1, #0x1                   	// #1
 62c:	lsl	x2, x1, x2
 630:	bic	x2, x4, x2
 634:	str	x2, [x0, x3, lsl #3]
 638:	mov	w0, w1
 63c:	ldp	x29, x30, [sp], #16
 640:	ret
 644:	adrp	x0, 0 <gomp_init_thread_affinity>
 648:	add	x0, x0, #0x0
 64c:	bl	0 <gomp_error>
 650:	mov	w0, #0x0                   	// #0
 654:	b	63c <gomp_affinity_remove_cpu+0x48>
 658:	adrp	x0, 0 <gomp_init_thread_affinity>
 65c:	add	x0, x0, #0x0
 660:	bl	0 <gomp_error>
 664:	mov	w0, #0x0                   	// #0
 668:	b	63c <gomp_affinity_remove_cpu+0x48>

000000000000066c <gomp_affinity_copy_place>:
 66c:	stp	x29, x30, [sp, #-48]!
 670:	mov	x29, sp
 674:	stp	x19, x20, [sp, #16]
 678:	stp	x21, x22, [sp, #32]
 67c:	mov	x22, x0
 680:	mov	x21, x1
 684:	mov	x20, x2
 688:	adrp	x1, 0 <gomp_cpuset_size>
 68c:	ldr	x2, [x1]
 690:	lsl	x19, x2, #3
 694:	mov	w1, #0x0                   	// #0
 698:	bl	0 <memset>
 69c:	cbz	x19, 758 <gomp_affinity_copy_place+0xec>
 6a0:	mov	x1, #0x0                   	// #0
 6a4:	adrp	x0, 0 <gomp_cpuset_size>
 6a8:	mov	x5, #0x1                   	// #1
 6ac:	b	6e0 <gomp_affinity_copy_place+0x74>
 6b0:	add	x4, x20, x1
 6b4:	cmp	x1, x4
 6b8:	b.cs	71c <gomp_affinity_copy_place+0xb0>  // b.hs, b.nlast
 6bc:	mov	x2, x20
 6c0:	adrp	x0, 0 <gomp_init_thread_affinity>
 6c4:	add	x0, x0, #0x0
 6c8:	bl	0 <gomp_error>
 6cc:	mov	w0, #0x0                   	// #0
 6d0:	b	748 <gomp_affinity_copy_place+0xdc>
 6d4:	add	x1, x1, #0x1
 6d8:	cmp	x19, x1
 6dc:	b.eq	744 <gomp_affinity_copy_place+0xd8>  // b.none
 6e0:	ldr	x3, [x0]
 6e4:	cmp	x3, x1, lsr #3
 6e8:	b.ls	6d4 <gomp_affinity_copy_place+0x68>  // b.plast
 6ec:	mov	w2, w1
 6f0:	lsr	x4, x1, #6
 6f4:	ldr	x4, [x21, x4, lsl #3]
 6f8:	lsr	x4, x4, x1
 6fc:	tbz	w4, #0, 6d4 <gomp_affinity_copy_place+0x68>
 700:	tbnz	x20, #63, 6b0 <gomp_affinity_copy_place+0x44>
 704:	cmp	x20, #0x0
 708:	b.le	71c <gomp_affinity_copy_place+0xb0>
 70c:	add	x4, x20, x1
 710:	cmp	x19, x4
 714:	ccmp	x1, x4, #0x2, hi  // hi = pmore
 718:	b.hi	6bc <gomp_affinity_copy_place+0x50>  // b.pmore
 71c:	add	x4, x20, x1
 720:	cmp	x3, x4, lsr #3
 724:	b.ls	6d4 <gomp_affinity_copy_place+0x68>  // b.plast
 728:	lsr	x4, x4, #6
 72c:	add	w2, w2, w20
 730:	lsl	x2, x5, x2
 734:	ldr	x3, [x22, x4, lsl #3]
 738:	orr	x2, x3, x2
 73c:	str	x2, [x22, x4, lsl #3]
 740:	b	6d4 <gomp_affinity_copy_place+0x68>
 744:	mov	w0, #0x1                   	// #1
 748:	ldp	x19, x20, [sp, #16]
 74c:	ldp	x21, x22, [sp, #32]
 750:	ldp	x29, x30, [sp], #48
 754:	ret
 758:	mov	w0, #0x1                   	// #1
 75c:	b	748 <gomp_affinity_copy_place+0xdc>

0000000000000760 <gomp_affinity_same_place>:
 760:	stp	x29, x30, [sp, #-16]!
 764:	mov	x29, sp
 768:	adrp	x2, 0 <gomp_cpuset_size>
 76c:	ldr	x2, [x2]
 770:	bl	0 <memcmp>
 774:	cmp	w0, #0x0
 778:	cset	w0, eq  // eq = none
 77c:	ldp	x29, x30, [sp], #16
 780:	ret

0000000000000784 <gomp_affinity_finalize_place_list>:
 784:	stp	x29, x30, [sp, #-80]!
 788:	mov	x29, sp
 78c:	stp	x25, x26, [sp, #64]
 790:	and	w26, w0, #0xff
 794:	adrp	x0, 0 <gomp_places_list_len>
 798:	ldr	x0, [x0]
 79c:	cbz	x0, 87c <gomp_affinity_finalize_place_list+0xf8>
 7a0:	stp	x19, x20, [sp, #16]
 7a4:	stp	x21, x22, [sp, #32]
 7a8:	stp	x23, x24, [sp, #48]
 7ac:	mov	x21, #0x0                   	// #0
 7b0:	mov	x19, #0x0                   	// #0
 7b4:	adrp	x22, 0 <gomp_places_list>
 7b8:	adrp	x25, 0 <gomp_cpusetp>
 7bc:	adrp	x20, 0 <gomp_cpuset_size>
 7c0:	adrp	x24, 0 <gomp_places_list_len>
 7c4:	b	7d8 <gomp_affinity_finalize_place_list+0x54>
 7c8:	add	x19, x19, #0x1
 7cc:	ldr	x1, [x24]
 7d0:	cmp	x1, x19
 7d4:	b.ls	838 <gomp_affinity_finalize_place_list+0xb4>  // b.plast
 7d8:	lsl	x23, x19, #3
 7dc:	ldr	x0, [x22]
 7e0:	ldr	x1, [x0, x19, lsl #3]
 7e4:	ldr	x4, [x25]
 7e8:	ldr	x0, [x20]
 7ec:	lsr	x5, x0, #3
 7f0:	cmp	x0, #0x7
 7f4:	b.ls	818 <gomp_affinity_finalize_place_list+0x94>  // b.plast
 7f8:	mov	x0, #0x0                   	// #0
 7fc:	ldr	x2, [x1, x0, lsl #3]
 800:	ldr	x3, [x4, x0, lsl #3]
 804:	and	x2, x2, x3
 808:	str	x2, [x1, x0, lsl #3]
 80c:	add	x0, x0, #0x1
 810:	cmp	x5, x0
 814:	b.hi	7fc <gomp_affinity_finalize_place_list+0x78>  // b.pmore
 818:	ldr	x0, [x20]
 81c:	bl	0 <gomp_cpuset_popcount>
 820:	cbz	x0, 7c8 <gomp_affinity_finalize_place_list+0x44>
 824:	ldr	x0, [x22]
 828:	ldr	x1, [x0, x23]
 82c:	str	x1, [x0, x21, lsl #3]
 830:	add	x21, x21, #0x1
 834:	b	7c8 <gomp_affinity_finalize_place_list+0x44>
 838:	cbz	x21, 870 <gomp_affinity_finalize_place_list+0xec>
 83c:	cmp	x1, x21
 840:	b.ls	8ac <gomp_affinity_finalize_place_list+0x128>  // b.plast
 844:	cbz	w26, 898 <gomp_affinity_finalize_place_list+0x114>
 848:	adrp	x0, 0 <gomp_places_list_len>
 84c:	str	x21, [x0]
 850:	mov	w26, #0x1                   	// #1
 854:	ldp	x19, x20, [sp, #16]
 858:	ldp	x21, x22, [sp, #32]
 85c:	ldp	x23, x24, [sp, #48]
 860:	mov	w0, w26
 864:	ldp	x25, x26, [sp, #64]
 868:	ldp	x29, x30, [sp], #80
 86c:	ret
 870:	ldp	x19, x20, [sp, #16]
 874:	ldp	x21, x22, [sp, #32]
 878:	ldp	x23, x24, [sp, #48]
 87c:	cbz	w26, 888 <gomp_affinity_finalize_place_list+0x104>
 880:	mov	w26, #0x0                   	// #0
 884:	b	860 <gomp_affinity_finalize_place_list+0xdc>
 888:	adrp	x0, 0 <gomp_init_thread_affinity>
 88c:	add	x0, x0, #0x0
 890:	bl	0 <gomp_error>
 894:	b	860 <gomp_affinity_finalize_place_list+0xdc>
 898:	mov	x2, x21
 89c:	adrp	x0, 0 <gomp_init_thread_affinity>
 8a0:	add	x0, x0, #0x0
 8a4:	bl	0 <gomp_error>
 8a8:	b	848 <gomp_affinity_finalize_place_list+0xc4>
 8ac:	mov	w26, #0x1                   	// #1
 8b0:	ldp	x19, x20, [sp, #16]
 8b4:	ldp	x21, x22, [sp, #32]
 8b8:	ldp	x23, x24, [sp, #48]
 8bc:	b	860 <gomp_affinity_finalize_place_list+0xdc>

00000000000008c0 <gomp_affinity_init_level>:
 8c0:	stp	x29, x30, [sp, #-144]!
 8c4:	mov	x29, sp
 8c8:	stp	x19, x20, [sp, #16]
 8cc:	stp	x21, x22, [sp, #32]
 8d0:	mov	w20, w0
 8d4:	mov	x19, x1
 8d8:	and	w21, w2, #0xff
 8dc:	adrp	x0, 0 <gomp_cpusetp>
 8e0:	ldr	x1, [x0]
 8e4:	cbz	x1, 8fc <gomp_affinity_init_level+0x3c>
 8e8:	adrp	x0, 0 <gomp_cpuset_size>
 8ec:	ldr	x0, [x0]
 8f0:	bl	0 <gomp_cpuset_popcount>
 8f4:	cmp	x19, x0
 8f8:	csel	x19, x19, x0, ls  // ls = plast
 8fc:	mov	w1, w21
 900:	mov	x0, x19
 904:	bl	28 <gomp_affinity_alloc>
 908:	mov	x1, x0
 90c:	adrp	x0, 0 <gomp_places_list>
 910:	str	x1, [x0]
 914:	adrp	x0, 0 <gomp_places_list_len>
 918:	str	xzr, [x0]
 91c:	mov	w0, #0x0                   	// #0
 920:	cbz	x1, 998 <gomp_affinity_init_level+0xd8>
 924:	adrp	x0, 0 <gomp_cpuset_size>
 928:	ldr	x2, [x0]
 92c:	add	x0, x2, #0xf
 930:	and	x0, x0, #0xfffffffffffffff0
 934:	sub	sp, sp, x0
 938:	mov	x22, sp
 93c:	adrp	x1, 0 <gomp_init_thread_affinity>
 940:	add	x1, x1, #0x0
 944:	ldp	x4, x5, [x1]
 948:	stp	x4, x5, [x29, #56]
 94c:	ldr	x0, [x1, #16]
 950:	str	x0, [x29, #72]
 954:	ldr	w0, [x1, #24]
 958:	str	w0, [x29, #80]
 95c:	adrp	x0, 0 <gomp_cpusetp>
 960:	ldr	x1, [x0]
 964:	mov	x0, x22
 968:	bl	0 <memcpy>
 96c:	mov	w5, w21
 970:	add	x4, x29, #0x38
 974:	mov	x3, x22
 978:	mov	x2, x19
 97c:	mov	w1, #0x3                   	// #3
 980:	mov	w0, w20
 984:	bl	1bc <gomp_affinity_init_level_1>
 988:	adrp	x0, 0 <gomp_places_list_len>
 98c:	ldr	x1, [x0]
 990:	mov	w0, #0x1                   	// #1
 994:	cbz	x1, 9ac <gomp_affinity_init_level+0xec>
 998:	mov	sp, x29
 99c:	ldp	x19, x20, [sp, #16]
 9a0:	ldp	x21, x22, [sp, #32]
 9a4:	ldp	x29, x30, [sp], #144
 9a8:	ret
 9ac:	cbz	w21, 9c8 <gomp_affinity_init_level+0x108>
 9b0:	adrp	x19, 0 <gomp_places_list>
 9b4:	ldr	x0, [x19]
 9b8:	bl	0 <free>
 9bc:	str	xzr, [x19]
 9c0:	mov	w0, #0x0                   	// #0
 9c4:	b	998 <gomp_affinity_init_level+0xd8>
 9c8:	adrp	x0, 0 <gomp_init_thread_affinity>
 9cc:	add	x0, x0, #0x0
 9d0:	bl	0 <gomp_error>
 9d4:	b	9b0 <gomp_affinity_init_level+0xf0>

00000000000009d8 <gomp_init_affinity>:
 9d8:	stp	x29, x30, [sp, #-16]!
 9dc:	mov	x29, sp
 9e0:	adrp	x0, 0 <gomp_places_list>
 9e4:	ldr	x0, [x0]
 9e8:	cbz	x0, a38 <gomp_init_affinity+0x60>
 9ec:	bl	0 <pthread_self>
 9f0:	adrp	x1, 0 <gomp_places_list>
 9f4:	ldr	x1, [x1]
 9f8:	ldr	x2, [x1]
 9fc:	adrp	x1, 0 <gomp_cpuset_size>
 a00:	ldr	x1, [x1]
 a04:	bl	0 <pthread_setaffinity_np>
 a08:	adrp	x0, 0 <gomp_tls_data>
 a0c:	ldr	x0, [x0]
 a10:	mrs	x1, tpidr_el0
 a14:	add	x0, x1, x0
 a18:	mov	w1, #0x1                   	// #1
 a1c:	str	w1, [x0, #92]
 a20:	str	wzr, [x0, #52]
 a24:	adrp	x1, 0 <gomp_places_list_len>
 a28:	ldr	x1, [x1]
 a2c:	str	w1, [x0, #56]
 a30:	ldp	x29, x30, [sp], #16
 a34:	ret
 a38:	mov	w2, #0x1                   	// #1
 a3c:	mov	x1, #0xffffffffffffffff    	// #-1
 a40:	mov	w0, #0x1                   	// #1
 a44:	bl	8c0 <gomp_affinity_init_level>
 a48:	and	w0, w0, #0xff
 a4c:	cbnz	w0, 9ec <gomp_init_affinity+0x14>
 a50:	b	a30 <gomp_init_affinity+0x58>

0000000000000a54 <gomp_affinity_print_place>:
 a54:	stp	x29, x30, [sp, #-80]!
 a58:	mov	x29, sp
 a5c:	stp	x23, x24, [sp, #48]
 a60:	mov	x23, x0
 a64:	adrp	x0, 0 <gomp_cpuset_size>
 a68:	ldr	x0, [x0]
 a6c:	cmp	xzr, x0, lsl #3
 a70:	b.eq	b4c <gomp_affinity_print_place+0xf8>  // b.none
 a74:	stp	x19, x20, [sp, #16]
 a78:	stp	x21, x22, [sp, #32]
 a7c:	stp	x25, x26, [sp, #64]
 a80:	lsl	x21, x0, #3
 a84:	mov	w26, #0x0                   	// #0
 a88:	mov	x20, #0x0                   	// #0
 a8c:	mov	x19, #0x0                   	// #0
 a90:	adrp	x22, 0 <gomp_cpuset_size>
 a94:	adrp	x24, 0 <gomp_init_thread_affinity>
 a98:	add	x24, x24, #0x0
 a9c:	adrp	x25, 0 <gomp_init_thread_affinity>
 aa0:	add	x25, x25, #0x0
 aa4:	b	ac0 <gomp_affinity_print_place+0x6c>
 aa8:	cmp	x20, #0x1
 aac:	b.hi	b1c <gomp_affinity_print_place+0xc8>  // b.pmore
 ab0:	mov	x20, #0x0                   	// #0
 ab4:	add	x19, x19, #0x1
 ab8:	cmp	x21, x19
 abc:	b.eq	b38 <gomp_affinity_print_place+0xe4>  // b.none
 ac0:	ldr	x0, [x22]
 ac4:	cmp	x0, x19, lsr #3
 ac8:	b.ls	aa8 <gomp_affinity_print_place+0x54>  // b.plast
 acc:	lsr	x0, x19, #6
 ad0:	ldr	x1, [x23, x0, lsl #3]
 ad4:	lsr	x1, x1, x19
 ad8:	tbz	w1, #0, aa8 <gomp_affinity_print_place+0x54>
 adc:	cbz	x20, ae8 <gomp_affinity_print_place+0x94>
 ae0:	add	x20, x20, #0x1
 ae4:	b	ab4 <gomp_affinity_print_place+0x60>
 ae8:	cbnz	w26, b08 <gomp_affinity_print_place+0xb4>
 aec:	mov	x2, x19
 af0:	mov	x1, x25
 af4:	adrp	x0, 0 <stderr>
 af8:	ldr	x0, [x0]
 afc:	bl	0 <fprintf>
 b00:	mov	w26, #0x1                   	// #1
 b04:	b	ae0 <gomp_affinity_print_place+0x8c>
 b08:	adrp	x0, 0 <stderr>
 b0c:	ldr	x1, [x0]
 b10:	mov	w0, #0x2c                  	// #44
 b14:	bl	0 <fputc>
 b18:	b	aec <gomp_affinity_print_place+0x98>
 b1c:	mov	x2, x20
 b20:	mov	x1, x24
 b24:	adrp	x0, 0 <stderr>
 b28:	ldr	x0, [x0]
 b2c:	bl	0 <fprintf>
 b30:	mov	x20, #0x0                   	// #0
 b34:	b	ab4 <gomp_affinity_print_place+0x60>
 b38:	cmp	x20, #0x1
 b3c:	b.hi	b58 <gomp_affinity_print_place+0x104>  // b.pmore
 b40:	ldp	x19, x20, [sp, #16]
 b44:	ldp	x21, x22, [sp, #32]
 b48:	ldp	x25, x26, [sp, #64]
 b4c:	ldp	x23, x24, [sp, #48]
 b50:	ldp	x29, x30, [sp], #80
 b54:	ret
 b58:	mov	x2, x20
 b5c:	adrp	x1, 0 <gomp_init_thread_affinity>
 b60:	add	x1, x1, #0x0
 b64:	adrp	x0, 0 <stderr>
 b68:	ldr	x0, [x0]
 b6c:	bl	0 <fprintf>
 b70:	ldp	x19, x20, [sp, #16]
 b74:	ldp	x21, x22, [sp, #32]
 b78:	ldp	x25, x26, [sp, #64]
 b7c:	b	b4c <gomp_affinity_print_place+0xf8>

0000000000000b80 <gomp_ialias_omp_get_place_num_procs>:
 b80:	tbnz	w0, #31, bcc <gomp_ialias_omp_get_place_num_procs+0x4c>
 b84:	mov	w1, w0
 b88:	sxtw	x3, w0
 b8c:	adrp	x0, 0 <gomp_places_list_len>
 b90:	ldr	x2, [x0]
 b94:	mov	w0, #0x0                   	// #0
 b98:	cmp	x2, w1, sxtw
 b9c:	b.hi	ba4 <gomp_ialias_omp_get_place_num_procs+0x24>  // b.pmore
 ba0:	ret
 ba4:	stp	x29, x30, [sp, #-16]!
 ba8:	mov	x29, sp
 bac:	adrp	x0, 0 <gomp_places_list>
 bb0:	ldr	x0, [x0]
 bb4:	ldr	x1, [x0, x3, lsl #3]
 bb8:	adrp	x0, 0 <gomp_cpuset_size>
 bbc:	ldr	x0, [x0]
 bc0:	bl	0 <gomp_cpuset_popcount>
 bc4:	ldp	x29, x30, [sp], #16
 bc8:	ret
 bcc:	mov	w0, #0x0                   	// #0
 bd0:	ret

0000000000000bd4 <gomp_ialias_omp_get_place_proc_ids>:
 bd4:	tbnz	w0, #31, c48 <gomp_ialias_omp_get_place_proc_ids+0x74>
 bd8:	sxtw	x3, w0
 bdc:	adrp	x2, 0 <gomp_places_list_len>
 be0:	ldr	x2, [x2]
 be4:	cmp	x2, w0, sxtw
 be8:	b.ls	c48 <gomp_ialias_omp_get_place_proc_ids+0x74>  // b.plast
 bec:	adrp	x0, 0 <gomp_places_list>
 bf0:	ldr	x0, [x0]
 bf4:	ldr	x5, [x0, x3, lsl #3]
 bf8:	adrp	x0, 0 <gomp_cpuset_size>
 bfc:	ldr	x0, [x0]
 c00:	lsl	x3, x0, #3
 c04:	cmp	xzr, x0, lsl #3
 c08:	b.eq	c48 <gomp_ialias_omp_get_place_proc_ids+0x74>  // b.none
 c0c:	mov	x0, #0x0                   	// #0
 c10:	adrp	x4, 0 <gomp_cpuset_size>
 c14:	b	c24 <gomp_ialias_omp_get_place_proc_ids+0x50>
 c18:	add	x0, x0, #0x1
 c1c:	cmp	x3, x0
 c20:	b.eq	c48 <gomp_ialias_omp_get_place_proc_ids+0x74>  // b.none
 c24:	ldr	x2, [x4]
 c28:	cmp	x2, x0, lsr #3
 c2c:	b.ls	c18 <gomp_ialias_omp_get_place_proc_ids+0x44>  // b.plast
 c30:	lsr	x2, x0, #6
 c34:	ldr	x2, [x5, x2, lsl #3]
 c38:	lsr	x2, x2, x0
 c3c:	tbz	w2, #0, c18 <gomp_ialias_omp_get_place_proc_ids+0x44>
 c40:	str	w0, [x1], #4
 c44:	b	c18 <gomp_ialias_omp_get_place_proc_ids+0x44>
 c48:	ret

0000000000000c4c <gomp_get_place_proc_ids_8>:
 c4c:	tbnz	w0, #31, cc0 <gomp_get_place_proc_ids_8+0x74>
 c50:	sxtw	x3, w0
 c54:	adrp	x2, 0 <gomp_places_list_len>
 c58:	ldr	x2, [x2]
 c5c:	cmp	x2, w0, sxtw
 c60:	b.ls	cc0 <gomp_get_place_proc_ids_8+0x74>  // b.plast
 c64:	adrp	x0, 0 <gomp_places_list>
 c68:	ldr	x0, [x0]
 c6c:	ldr	x5, [x0, x3, lsl #3]
 c70:	adrp	x0, 0 <gomp_cpuset_size>
 c74:	ldr	x0, [x0]
 c78:	lsl	x3, x0, #3
 c7c:	cmp	xzr, x0, lsl #3
 c80:	b.eq	cc0 <gomp_get_place_proc_ids_8+0x74>  // b.none
 c84:	mov	x0, #0x0                   	// #0
 c88:	adrp	x4, 0 <gomp_cpuset_size>
 c8c:	b	c9c <gomp_get_place_proc_ids_8+0x50>
 c90:	add	x0, x0, #0x1
 c94:	cmp	x3, x0
 c98:	b.eq	cc0 <gomp_get_place_proc_ids_8+0x74>  // b.none
 c9c:	ldr	x2, [x4]
 ca0:	cmp	x2, x0, lsr #3
 ca4:	b.ls	c90 <gomp_get_place_proc_ids_8+0x44>  // b.plast
 ca8:	lsr	x2, x0, #6
 cac:	ldr	x2, [x5, x2, lsl #3]
 cb0:	lsr	x2, x2, x0
 cb4:	tbz	w2, #0, c90 <gomp_get_place_proc_ids_8+0x44>
 cb8:	str	x0, [x1], #8
 cbc:	b	c90 <gomp_get_place_proc_ids_8+0x44>
 cc0:	ret

0000000000000cc4 <gomp_display_affinity_place>:
 cc4:	stp	x29, x30, [sp, #-128]!
 cc8:	mov	x29, sp
 ccc:	stp	x23, x24, [sp, #48]
 cd0:	stp	x25, x26, [sp, #64]
 cd4:	mov	x23, x0
 cd8:	mov	x24, x1
 cdc:	mov	x25, x2
 ce0:	tbnz	w3, #31, d14 <gomp_display_affinity_place+0x50>
 ce4:	sxtw	x1, w3
 ce8:	adrp	x0, 0 <gomp_places_list_len>
 cec:	ldr	x0, [x0]
 cf0:	cmp	x0, w3, sxtw
 cf4:	b.ls	d14 <gomp_display_affinity_place+0x50>  // b.plast
 cf8:	stp	x19, x20, [sp, #16]
 cfc:	stp	x21, x22, [sp, #32]
 d00:	stp	x27, x28, [sp, #80]
 d04:	adrp	x0, 0 <gomp_places_list>
 d08:	ldr	x0, [x0]
 d0c:	ldr	x26, [x0, x1, lsl #3]
 d10:	b	d2c <gomp_display_affinity_place+0x68>
 d14:	adrp	x0, 0 <gomp_cpusetp>
 d18:	ldr	x26, [x0]
 d1c:	cbz	x26, d54 <gomp_display_affinity_place+0x90>
 d20:	stp	x19, x20, [sp, #16]
 d24:	stp	x21, x22, [sp, #32]
 d28:	stp	x27, x28, [sp, #80]
 d2c:	adrp	x0, 0 <gomp_cpuset_size>
 d30:	ldr	x20, [x0]
 d34:	lsl	x20, x20, #3
 d38:	mov	x22, x20
 d3c:	mov	w21, #0x0                   	// #0
 d40:	mov	x19, #0x0                   	// #0
 d44:	adrp	x27, 0 <gomp_init_thread_affinity>
 d48:	add	x27, x27, #0x0
 d4c:	add	x28, sp, #0x61
 d50:	b	e30 <gomp_display_affinity_place+0x16c>
 d54:	adrp	x0, 0 <gomp_available_cpus>
 d58:	ldr	x2, [x0]
 d5c:	cmp	x2, #0x1
 d60:	b.ls	d9c <gomp_display_affinity_place+0xd8>  // b.plast
 d64:	sub	x2, x2, #0x1
 d68:	adrp	x1, 0 <gomp_init_thread_affinity>
 d6c:	add	x1, x1, #0x0
 d70:	add	x0, sp, #0x60
 d74:	bl	0 <sprintf>
 d78:	add	x0, sp, #0x60
 d7c:	bl	0 <strlen>
 d80:	mov	x4, x0
 d84:	add	x3, sp, #0x60
 d88:	mov	x2, x25
 d8c:	mov	x1, x24
 d90:	mov	x0, x23
 d94:	bl	0 <gomp_display_string>
 d98:	b	db4 <gomp_display_affinity_place+0xf0>
 d9c:	mov	w0, #0x30                  	// #48
 da0:	strh	w0, [sp, #96]
 da4:	b	d78 <gomp_display_affinity_place+0xb4>
 da8:	ldp	x19, x20, [sp, #16]
 dac:	ldp	x21, x22, [sp, #32]
 db0:	ldp	x27, x28, [sp, #80]
 db4:	ldp	x23, x24, [sp, #48]
 db8:	ldp	x25, x26, [sp, #64]
 dbc:	ldp	x29, x30, [sp], #128
 dc0:	ret
 dc4:	cbnz	w21, e5c <gomp_display_affinity_place+0x198>
 dc8:	b	e20 <gomp_display_affinity_place+0x15c>
 dcc:	cbnz	w21, e20 <gomp_display_affinity_place+0x15c>
 dd0:	add	x0, sp, #0x60
 dd4:	cmp	x20, x22
 dd8:	b.eq	de8 <gomp_display_affinity_place+0x124>  // b.none
 ddc:	mov	w0, #0x2c                  	// #44
 de0:	strb	w0, [sp, #96]
 de4:	mov	x0, x28
 de8:	mov	x2, x19
 dec:	adrp	x1, 0 <gomp_init_thread_affinity>
 df0:	add	x1, x1, #0x0
 df4:	bl	0 <sprintf>
 df8:	mov	x22, x19
 dfc:	mov	w21, #0x1                   	// #1
 e00:	add	x0, sp, #0x60
 e04:	bl	0 <strlen>
 e08:	mov	x4, x0
 e0c:	add	x3, sp, #0x60
 e10:	mov	x2, x25
 e14:	mov	x1, x24
 e18:	mov	x0, x23
 e1c:	bl	0 <gomp_display_string>
 e20:	add	x0, x19, #0x1
 e24:	cmp	x20, x19
 e28:	b.eq	da8 <gomp_display_affinity_place+0xe4>  // b.none
 e2c:	mov	x19, x0
 e30:	cmp	x20, x19
 e34:	b.eq	dc4 <gomp_display_affinity_place+0x100>  // b.none
 e38:	adrp	x0, 0 <gomp_cpuset_size>
 e3c:	ldr	x0, [x0]
 e40:	cmp	x0, x19, lsr #3
 e44:	b.ls	e58 <gomp_display_affinity_place+0x194>  // b.plast
 e48:	lsr	x0, x19, #6
 e4c:	ldr	x0, [x26, x0, lsl #3]
 e50:	lsr	x0, x0, x19
 e54:	tbnz	w0, #0, dcc <gomp_display_affinity_place+0x108>
 e58:	cbz	w21, e20 <gomp_display_affinity_place+0x15c>
 e5c:	add	x0, x22, #0x1
 e60:	mov	w21, #0x0                   	// #0
 e64:	cmp	x0, x19
 e68:	b.eq	e20 <gomp_display_affinity_place+0x15c>  // b.none
 e6c:	sub	x2, x19, #0x1
 e70:	mov	x1, x27
 e74:	add	x0, sp, #0x60
 e78:	bl	0 <sprintf>
 e7c:	b	e00 <gomp_display_affinity_place+0x13c>

target.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_kind>:
       0:	tst	w0, #0xff
       4:	b.eq	10 <get_kind+0x10>  // b.none
       8:	ldrh	w0, [x1, w2, sxtw #1]
       c:	ret
      10:	ldrb	w0, [x1, w2, sxtw]
      14:	b	c <get_kind+0xc>

0000000000000018 <omp_target_memcpy_rect_worker>:
      18:	sub	sp, sp, #0xa0
      1c:	stp	x29, x30, [sp, #32]
      20:	add	x29, sp, #0x20
      24:	stp	x21, x22, [sp, #64]
      28:	stp	x23, x24, [sp, #80]
      2c:	stp	x25, x26, [sp, #96]
      30:	stp	x27, x28, [sp, #112]
      34:	mov	x25, x0
      38:	mov	x22, x2
      3c:	mov	x27, x4
      40:	ldr	x23, [sp, #160]
      44:	cmp	w3, #0x1
      48:	b.eq	b0 <omp_target_memcpy_rect_worker+0x98>  // b.none
      4c:	stp	x19, x20, [sp, #48]
      50:	b.le	19c <omp_target_memcpy_rect_worker+0x184>
      54:	ldr	x19, [x7, #8]
      58:	umulh	x0, x2, x19
      5c:	mul	x19, x2, x19
      60:	cbnz	x0, 260 <omp_target_memcpy_rect_worker+0x248>
      64:	ldr	x20, [x23, #8]
      68:	umulh	x0, x2, x20
      6c:	mul	x20, x2, x20
      70:	cbnz	x0, 26c <omp_target_memcpy_rect_worker+0x254>
      74:	mov	x2, #0x2                   	// #2
      78:	cmp	w3, w2
      7c:	b.le	1a4 <omp_target_memcpy_rect_worker+0x18c>
      80:	ldr	x4, [x7, x2, lsl #3]
      84:	umulh	x8, x19, x4
      88:	mul	x19, x19, x4
      8c:	cbnz	x8, 278 <omp_target_memcpy_rect_worker+0x260>
      90:	ldr	x4, [x23, x2, lsl #3]
      94:	umulh	x8, x20, x4
      98:	mul	x20, x20, x4
      9c:	add	x2, x2, #0x1
      a0:	cbz	x8, 78 <omp_target_memcpy_rect_worker+0x60>
      a4:	mov	w0, #0x16                  	// #22
      a8:	ldp	x19, x20, [sp, #48]
      ac:	b	280 <omp_target_memcpy_rect_worker+0x268>
      b0:	ldr	x0, [x4]
      b4:	mul	x3, x2, x0
      b8:	umulh	x4, x2, x0
      bc:	mov	w0, #0x16                  	// #22
      c0:	cbnz	x4, 280 <omp_target_memcpy_rect_worker+0x268>
      c4:	ldr	x4, [x5]
      c8:	mul	x5, x2, x4
      cc:	umulh	x4, x2, x4
      d0:	cbnz	x4, 280 <omp_target_memcpy_rect_worker+0x268>
      d4:	ldr	x4, [x6]
      d8:	mul	x6, x2, x4
      dc:	umulh	x22, x2, x4
      e0:	cbnz	x22, 280 <omp_target_memcpy_rect_worker+0x268>
      e4:	ldr	x0, [sp, #168]
      e8:	ldr	x2, [sp, #176]
      ec:	orr	x0, x0, x2
      f0:	cbz	x0, 138 <omp_target_memcpy_rect_worker+0x120>
      f4:	ldr	x0, [sp, #176]
      f8:	cbz	x0, 150 <omp_target_memcpy_rect_worker+0x138>
      fc:	ldr	x0, [sp, #168]
     100:	cbz	x0, 17c <omp_target_memcpy_rect_worker+0x164>
     104:	mov	w0, #0x16                  	// #22
     108:	ldr	x2, [sp, #168]
     10c:	ldr	x4, [sp, #176]
     110:	cmp	x2, x4
     114:	b.ne	280 <omp_target_memcpy_rect_worker+0x268>  // b.any
     118:	mov	x0, x4
     11c:	ldr	x4, [x4, #128]
     120:	add	x2, x1, x6
     124:	add	x1, x25, x5
     128:	ldr	w0, [x0, #12]
     12c:	blr	x4
     130:	and	w0, w0, #0xff
     134:	b	16c <omp_target_memcpy_rect_worker+0x154>
     138:	mov	x2, x3
     13c:	add	x1, x1, x6
     140:	add	x0, x25, x5
     144:	bl	0 <memcpy>
     148:	mov	w0, #0x0                   	// #0
     14c:	b	280 <omp_target_memcpy_rect_worker+0x268>
     150:	ldr	x0, [sp, #168]
     154:	ldr	x4, [x0, #120]
     158:	add	x2, x1, x6
     15c:	add	x1, x25, x5
     160:	ldr	w0, [x0, #12]
     164:	blr	x4
     168:	and	w0, w0, #0xff
     16c:	cmp	w0, #0x0
     170:	mov	w0, #0x16                  	// #22
     174:	csel	w0, w0, wzr, eq  // eq = none
     178:	b	280 <omp_target_memcpy_rect_worker+0x268>
     17c:	ldr	x0, [sp, #176]
     180:	ldr	x4, [x0, #112]
     184:	add	x2, x1, x6
     188:	add	x1, x25, x5
     18c:	ldr	w0, [x0, #12]
     190:	blr	x4
     194:	and	w0, w0, #0xff
     198:	b	16c <omp_target_memcpy_rect_worker+0x154>
     19c:	mov	x20, x2
     1a0:	mov	x19, x2
     1a4:	ldr	x0, [x5]
     1a8:	mul	x4, x19, x0
     1ac:	umulh	x2, x19, x0
     1b0:	mov	w0, #0x16                  	// #22
     1b4:	cbnz	x2, 2a8 <omp_target_memcpy_rect_worker+0x290>
     1b8:	ldr	x0, [x6]
     1bc:	mul	x24, x20, x0
     1c0:	umulh	x2, x20, x0
     1c4:	mov	w0, #0x16                  	// #22
     1c8:	cbnz	x2, 2b0 <omp_target_memcpy_rect_worker+0x298>
     1cc:	ldr	x0, [x27]
     1d0:	cbz	x0, 29c <omp_target_memcpy_rect_worker+0x284>
     1d4:	add	x25, x25, x4
     1d8:	add	x24, x1, x24
     1dc:	mov	x28, #0x0                   	// #0
     1e0:	add	x21, x7, #0x8
     1e4:	add	x26, x6, #0x8
     1e8:	add	x0, x5, #0x8
     1ec:	str	x0, [sp, #136]
     1f0:	add	x0, x27, #0x8
     1f4:	str	x0, [sp, #144]
     1f8:	sub	w0, w3, #0x1
     1fc:	str	w0, [sp, #156]
     200:	ldr	x0, [sp, #176]
     204:	str	x0, [sp, #16]
     208:	ldr	x0, [sp, #168]
     20c:	str	x0, [sp, #8]
     210:	add	x0, x23, #0x8
     214:	str	x0, [sp]
     218:	mov	x7, x21
     21c:	mov	x6, x26
     220:	ldr	x5, [sp, #136]
     224:	ldr	x4, [sp, #144]
     228:	ldr	w3, [sp, #156]
     22c:	mov	x2, x22
     230:	mov	x1, x24
     234:	mov	x0, x25
     238:	bl	18 <omp_target_memcpy_rect_worker>
     23c:	cbnz	w0, 2b8 <omp_target_memcpy_rect_worker+0x2a0>
     240:	add	x28, x28, #0x1
     244:	add	x25, x25, x19
     248:	add	x24, x24, x20
     24c:	ldr	x1, [x27]
     250:	cmp	x1, x28
     254:	b.hi	200 <omp_target_memcpy_rect_worker+0x1e8>  // b.pmore
     258:	ldp	x19, x20, [sp, #48]
     25c:	b	280 <omp_target_memcpy_rect_worker+0x268>
     260:	mov	w0, #0x16                  	// #22
     264:	ldp	x19, x20, [sp, #48]
     268:	b	280 <omp_target_memcpy_rect_worker+0x268>
     26c:	mov	w0, #0x16                  	// #22
     270:	ldp	x19, x20, [sp, #48]
     274:	b	280 <omp_target_memcpy_rect_worker+0x268>
     278:	mov	w0, #0x16                  	// #22
     27c:	ldp	x19, x20, [sp, #48]
     280:	ldp	x21, x22, [sp, #64]
     284:	ldp	x23, x24, [sp, #80]
     288:	ldp	x25, x26, [sp, #96]
     28c:	ldp	x27, x28, [sp, #112]
     290:	ldp	x29, x30, [sp, #32]
     294:	add	sp, sp, #0xa0
     298:	ret
     29c:	mov	w0, #0x0                   	// #0
     2a0:	ldp	x19, x20, [sp, #48]
     2a4:	b	280 <omp_target_memcpy_rect_worker+0x268>
     2a8:	ldp	x19, x20, [sp, #48]
     2ac:	b	280 <omp_target_memcpy_rect_worker+0x268>
     2b0:	ldp	x19, x20, [sp, #48]
     2b4:	b	280 <omp_target_memcpy_rect_worker+0x268>
     2b8:	ldp	x19, x20, [sp, #48]
     2bc:	b	280 <omp_target_memcpy_rect_worker+0x268>

00000000000002c0 <gomp_target_init>:
     2c0:	stp	x29, x30, [sp, #-32]!
     2c4:	mov	x29, sp
     2c8:	str	x19, [sp, #16]
     2cc:	adrp	x0, 0 <get_kind>
     2d0:	add	x19, x0, #0x0
     2d4:	str	wzr, [x0]
     2d8:	mov	x0, #0x0                   	// #0
     2dc:	bl	0 <malloc>
     2e0:	str	wzr, [x19, #4]
     2e4:	str	x0, [x19, #8]
     2e8:	adrp	x0, 0 <get_kind>
     2ec:	add	x0, x0, #0x0
     2f0:	bl	0 <atexit>
     2f4:	cbnz	w0, 304 <gomp_target_init+0x44>
     2f8:	ldr	x19, [sp, #16]
     2fc:	ldp	x29, x30, [sp], #32
     300:	ret
     304:	adrp	x0, 0 <get_kind>
     308:	add	x0, x0, #0x0
     30c:	bl	0 <gomp_fatal>

0000000000000310 <gomp_mutex_unlock>:
     310:	ldxr	w1, [x0]
     314:	stlxr	w2, wzr, [x0]
     318:	cbnz	w2, 310 <gomp_mutex_unlock>
     31c:	tbnz	w1, #31, 324 <gomp_mutex_unlock+0x14>
     320:	ret
     324:	stp	x29, x30, [sp, #-16]!
     328:	mov	x29, sp
     32c:	bl	0 <gomp_mutex_unlock_slow>
     330:	ldp	x29, x30, [sp], #16
     334:	ret

0000000000000338 <gomp_copy_host2dev>:
     338:	stp	x29, x30, [sp, #-48]!
     33c:	mov	x29, sp
     340:	stp	x19, x20, [sp, #16]
     344:	stp	x21, x22, [sp, #32]
     348:	mov	x19, x0
     34c:	mov	x20, x1
     350:	mov	x22, x2
     354:	mov	x21, x3
     358:	cbz	x4, 404 <gomp_copy_host2dev+0xcc>
     35c:	ldr	x0, [x4, #8]
     360:	ldr	x0, [x0, #16]
     364:	sub	x0, x1, x0
     368:	ldr	x2, [x4, #16]
     36c:	ldr	x6, [x4, #24]
     370:	add	x1, x2, x6, lsl #4
     374:	ldur	x1, [x1, #-8]
     378:	cmp	x1, x0
     37c:	b.ls	404 <gomp_copy_host2dev+0xcc>  // b.plast
     380:	subs	x6, x6, #0x1
     384:	b.mi	404 <gomp_copy_host2dev+0xcc>  // b.first
     388:	mov	x7, #0x0                   	// #0
     38c:	b	3a8 <gomp_copy_host2dev+0x70>
     390:	ldr	x3, [x2, x8]
     394:	cmp	x3, x0
     398:	b.ls	3cc <gomp_copy_host2dev+0x94>  // b.plast
     39c:	sub	x6, x5, #0x1
     3a0:	cmp	x7, x6
     3a4:	b.gt	404 <gomp_copy_host2dev+0xcc>
     3a8:	add	x5, x7, x6
     3ac:	asr	x5, x5, #1
     3b0:	lsl	x8, x5, #4
     3b4:	add	x1, x2, x8
     3b8:	ldr	x1, [x1, #8]
     3bc:	cmp	x1, x0
     3c0:	b.hi	390 <gomp_copy_host2dev+0x58>  // b.pmore
     3c4:	add	x7, x5, #0x1
     3c8:	b	3a0 <gomp_copy_host2dev+0x68>
     3cc:	add	x3, x0, x21
     3d0:	cmp	x1, x3
     3d4:	b.cc	3f8 <gomp_copy_host2dev+0xc0>  // b.lo, b.ul, b.last
     3d8:	ldr	x1, [x2]
     3dc:	sub	x0, x0, x1
     3e0:	ldr	x3, [x4]
     3e4:	mov	x2, x21
     3e8:	mov	x1, x22
     3ec:	add	x0, x3, x0
     3f0:	bl	0 <memcpy>
     3f4:	b	424 <gomp_copy_host2dev+0xec>
     3f8:	adrp	x0, 0 <get_kind>
     3fc:	add	x0, x0, #0x0
     400:	bl	0 <gomp_fatal>
     404:	ldr	x4, [x19, #120]
     408:	mov	x3, x21
     40c:	mov	x2, x22
     410:	mov	x1, x20
     414:	ldr	w0, [x19, #12]
     418:	blr	x4
     41c:	and	w0, w0, #0xff
     420:	cbz	w0, 434 <gomp_copy_host2dev+0xfc>
     424:	ldp	x19, x20, [sp, #16]
     428:	ldp	x21, x22, [sp, #32]
     42c:	ldp	x29, x30, [sp], #48
     430:	ret
     434:	add	x0, x19, #0xa8
     438:	bl	310 <gomp_mutex_unlock>
     43c:	add	x6, x20, x21
     440:	mov	x5, x20
     444:	adrp	x4, 0 <get_kind>
     448:	add	x4, x4, #0x0
     44c:	add	x3, x22, x21
     450:	mov	x2, x22
     454:	adrp	x1, 0 <get_kind>
     458:	add	x1, x1, #0x0
     45c:	adrp	x0, 0 <get_kind>
     460:	add	x0, x0, #0x0
     464:	bl	0 <gomp_fatal>

0000000000000468 <gomp_free_device_memory>:
     468:	stp	x29, x30, [sp, #-32]!
     46c:	mov	x29, sp
     470:	stp	x19, x20, [sp, #16]
     474:	mov	x19, x0
     478:	mov	x20, x1
     47c:	ldr	x2, [x0, #104]
     480:	ldr	w0, [x0, #12]
     484:	blr	x2
     488:	and	w0, w0, #0xff
     48c:	cbz	w0, 49c <gomp_free_device_memory+0x34>
     490:	ldp	x19, x20, [sp, #16]
     494:	ldp	x29, x30, [sp], #32
     498:	ret
     49c:	add	x0, x19, #0xa8
     4a0:	bl	310 <gomp_mutex_unlock>
     4a4:	mov	x1, x20
     4a8:	adrp	x0, 0 <get_kind>
     4ac:	add	x0, x0, #0x0
     4b0:	bl	0 <gomp_fatal>

00000000000004b4 <gomp_unmap_tgt>:
     4b4:	stp	x29, x30, [sp, #-32]!
     4b8:	mov	x29, sp
     4bc:	str	x19, [sp, #16]
     4c0:	mov	x19, x0
     4c4:	ldr	x0, [x0, #24]
     4c8:	cbnz	x0, 4e8 <gomp_unmap_tgt+0x34>
     4cc:	ldr	x0, [x19, #8]
     4d0:	bl	0 <free>
     4d4:	mov	x0, x19
     4d8:	bl	0 <free>
     4dc:	ldr	x19, [sp, #16]
     4e0:	ldp	x29, x30, [sp], #32
     4e4:	ret
     4e8:	ldr	x1, [x19, #32]
     4ec:	ldr	x0, [x19, #56]
     4f0:	bl	468 <gomp_free_device_memory>
     4f4:	b	4cc <gomp_unmap_tgt+0x18>

00000000000004f8 <gomp_target_fallback>:
     4f8:	stp	x29, x30, [sp, #-144]!
     4fc:	mov	x29, sp
     500:	str	x19, [sp, #16]
     504:	mov	x4, x0
     508:	mov	x0, x1
     50c:	adrp	x2, 0 <gomp_tls_data>
     510:	ldr	x2, [x2]
     514:	mrs	x3, tpidr_el0
     518:	add	x2, x3, x2
     51c:	ldp	x6, x7, [x2]
     520:	stp	x6, x7, [sp, #40]
     524:	ldp	x6, x7, [x2, #16]
     528:	stp	x6, x7, [sp, #56]
     52c:	ldp	x6, x7, [x2, #32]
     530:	stp	x6, x7, [sp, #72]
     534:	ldp	x6, x7, [x2, #48]
     538:	stp	x6, x7, [sp, #88]
     53c:	ldp	x6, x7, [x2, #64]
     540:	stp	x6, x7, [sp, #104]
     544:	ldp	x6, x7, [x2, #80]
     548:	stp	x6, x7, [sp, #120]
     54c:	ldr	x1, [x2, #96]
     550:	str	x1, [sp, #136]
     554:	ldr	w3, [x2, #92]
     558:	stp	xzr, xzr, [x2]
     55c:	stp	xzr, xzr, [x2, #16]
     560:	stp	xzr, xzr, [x2, #32]
     564:	stp	xzr, xzr, [x2, #48]
     568:	stp	xzr, xzr, [x2, #64]
     56c:	stp	xzr, xzr, [x2, #80]
     570:	str	xzr, [x2, #96]
     574:	adrp	x1, 0 <gomp_places_list>
     578:	ldr	x1, [x1]
     57c:	cbz	x1, 5a0 <gomp_target_fallback+0xa8>
     580:	adrp	x1, 0 <gomp_tls_data>
     584:	ldr	x1, [x1]
     588:	mrs	x2, tpidr_el0
     58c:	add	x1, x2, x1
     590:	str	w3, [x1, #92]
     594:	adrp	x2, 0 <gomp_places_list_len>
     598:	ldr	x2, [x2]
     59c:	str	w2, [x1, #56]
     5a0:	blr	x4
     5a4:	adrp	x19, 0 <gomp_tls_data>
     5a8:	ldr	x19, [x19]
     5ac:	mrs	x0, tpidr_el0
     5b0:	add	x19, x0, x19
     5b4:	mov	x0, x19
     5b8:	bl	0 <gomp_free_thread>
     5bc:	ldp	x0, x1, [sp, #40]
     5c0:	stp	x0, x1, [x19]
     5c4:	ldp	x0, x1, [sp, #56]
     5c8:	stp	x0, x1, [x19, #16]
     5cc:	ldp	x0, x1, [sp, #72]
     5d0:	stp	x0, x1, [x19, #32]
     5d4:	ldp	x0, x1, [sp, #88]
     5d8:	stp	x0, x1, [x19, #48]
     5dc:	ldp	x0, x1, [sp, #104]
     5e0:	stp	x0, x1, [x19, #64]
     5e4:	ldp	x0, x1, [sp, #120]
     5e8:	stp	x0, x1, [x19, #80]
     5ec:	ldr	x0, [sp, #136]
     5f0:	str	x0, [x19, #96]
     5f4:	ldr	x19, [sp, #16]
     5f8:	ldp	x29, x30, [sp], #144
     5fc:	ret

0000000000000600 <gomp_copy_dev2host>:
     600:	stp	x29, x30, [sp, #-48]!
     604:	mov	x29, sp
     608:	stp	x19, x20, [sp, #16]
     60c:	stp	x21, x22, [sp, #32]
     610:	mov	x19, x0
     614:	mov	x22, x1
     618:	mov	x20, x2
     61c:	mov	x21, x3
     620:	ldr	x4, [x0, #112]
     624:	ldr	w0, [x0, #12]
     628:	blr	x4
     62c:	and	w0, w0, #0xff
     630:	cbz	w0, 644 <gomp_copy_dev2host+0x44>
     634:	ldp	x19, x20, [sp, #16]
     638:	ldp	x21, x22, [sp, #32]
     63c:	ldp	x29, x30, [sp], #48
     640:	ret
     644:	add	x0, x19, #0xa8
     648:	bl	310 <gomp_mutex_unlock>
     64c:	add	x6, x22, x21
     650:	mov	x5, x22
     654:	adrp	x4, 0 <get_kind>
     658:	add	x4, x4, #0x0
     65c:	add	x3, x20, x21
     660:	mov	x2, x20
     664:	adrp	x1, 0 <get_kind>
     668:	add	x1, x1, #0x0
     66c:	adrp	x0, 0 <get_kind>
     670:	add	x0, x0, #0x0
     674:	bl	0 <gomp_fatal>

0000000000000678 <gomp_target_fini>:
     678:	adrp	x0, 0 <get_kind>
     67c:	ldr	w0, [x0]
     680:	cmp	w0, #0x0
     684:	b.le	778 <gomp_target_fini+0x100>
     688:	stp	x29, x30, [sp, #-80]!
     68c:	mov	x29, sp
     690:	stp	x19, x20, [sp, #16]
     694:	stp	x21, x22, [sp, #32]
     698:	stp	x23, x24, [sp, #48]
     69c:	stp	x25, x26, [sp, #64]
     6a0:	mov	x21, #0x0                   	// #0
     6a4:	mov	w22, #0x0                   	// #0
     6a8:	adrp	x23, 0 <get_kind>
     6ac:	add	x23, x23, #0x0
     6b0:	mov	w24, #0x1                   	// #1
     6b4:	mov	w25, #0x2                   	// #2
     6b8:	b	6fc <gomp_target_fini+0x84>
     6bc:	mov	x0, x20
     6c0:	bl	0 <gomp_mutex_lock_slow>
     6c4:	b	720 <gomp_target_fini+0xa8>
     6c8:	mov	w26, w24
     6cc:	mov	x0, x20
     6d0:	bl	0 <gomp_mutex_unlock_slow>
     6d4:	b	750 <gomp_target_fini+0xd8>
     6d8:	ldxr	w0, [x20]
     6dc:	stlxr	w1, wzr, [x20]
     6e0:	cbnz	w1, 6d8 <gomp_target_fini+0x60>
     6e4:	tbnz	w0, #31, 6c8 <gomp_target_fini+0x50>
     6e8:	add	w22, w22, #0x1
     6ec:	add	x21, x21, #0x130
     6f0:	ldr	w0, [x23]
     6f4:	cmp	w0, w22
     6f8:	b.le	760 <gomp_target_fini+0xe8>
     6fc:	ldr	x19, [x23, #8]
     700:	add	x19, x19, x21
     704:	add	x20, x19, #0xa8
     708:	ldaxr	w1, [x20]
     70c:	cbnz	w1, 718 <gomp_target_fini+0xa0>
     710:	stxr	w0, w24, [x20]
     714:	cbnz	w0, 708 <gomp_target_fini+0x90>
     718:	cmp	w1, #0x0
     71c:	b.ne	6bc <gomp_target_fini+0x44>  // b.any
     720:	ldr	w0, [x19, #172]
     724:	cmp	w0, #0x1
     728:	b.ne	6d8 <gomp_target_fini+0x60>  // b.any
     72c:	ldr	x1, [x19, #64]
     730:	ldr	w0, [x19, #12]
     734:	blr	x1
     738:	and	w26, w0, #0xff
     73c:	str	w25, [x19, #172]
     740:	ldxr	w0, [x20]
     744:	stlxr	w1, wzr, [x20]
     748:	cbnz	w1, 740 <gomp_target_fini+0xc8>
     74c:	tbnz	w0, #31, 6cc <gomp_target_fini+0x54>
     750:	cbnz	w26, 6e8 <gomp_target_fini+0x70>
     754:	adrp	x0, 0 <get_kind>
     758:	add	x0, x0, #0x0
     75c:	bl	0 <gomp_fatal>
     760:	ldp	x19, x20, [sp, #16]
     764:	ldp	x21, x22, [sp, #32]
     768:	ldp	x23, x24, [sp, #48]
     76c:	ldp	x25, x26, [sp, #64]
     770:	ldp	x29, x30, [sp], #80
     774:	ret
     778:	ret

000000000000077c <gomp_map_pointer>:
     77c:	stp	x29, x30, [sp, #-128]!
     780:	mov	x29, sp
     784:	stp	x19, x20, [sp, #16]
     788:	stp	x21, x22, [sp, #32]
     78c:	mov	x19, x0
     790:	mov	x20, x2
     794:	mov	x21, x4
     798:	ldr	x22, [x0, #56]
     79c:	str	x1, [sp, #72]
     7a0:	cbz	x1, 838 <gomp_map_pointer+0xbc>
     7a4:	stp	x23, x24, [sp, #48]
     7a8:	mov	x23, x3
     7ac:	add	x24, x22, #0xa0
     7b0:	add	x1, x1, x3
     7b4:	str	x1, [sp, #72]
     7b8:	add	x1, x1, #0x1
     7bc:	str	x1, [sp, #80]
     7c0:	add	x1, sp, #0x48
     7c4:	mov	x0, x24
     7c8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     7cc:	ldr	x1, [sp, #80]
     7d0:	sub	x1, x1, #0x1
     7d4:	str	x1, [sp, #80]
     7d8:	cbz	x0, 858 <gomp_map_pointer+0xdc>
     7dc:	ldr	x2, [x0]
     7e0:	ldr	x1, [sp, #72]
     7e4:	sub	x1, x1, x2
     7e8:	str	x1, [sp, #72]
     7ec:	ldr	x2, [x0, #16]
     7f0:	ldr	x2, [x2, #16]
     7f4:	add	x1, x1, x2
     7f8:	ldr	x3, [x0, #24]
     7fc:	sub	x23, x3, x23
     800:	add	x1, x1, x23
     804:	str	x1, [sp, #96]
     808:	ldr	x1, [x19, #16]
     80c:	mov	x4, x21
     810:	mov	x3, #0x8                   	// #8
     814:	add	x2, sp, #0x60
     818:	add	x1, x20, x1
     81c:	mov	x0, x22
     820:	bl	338 <gomp_copy_host2dev>
     824:	ldp	x23, x24, [sp, #48]
     828:	ldp	x19, x20, [sp, #16]
     82c:	ldp	x21, x22, [sp, #32]
     830:	ldp	x29, x30, [sp], #128
     834:	ret
     838:	str	xzr, [sp, #96]
     83c:	ldr	x1, [x0, #16]
     840:	mov	x3, #0x8                   	// #8
     844:	add	x2, sp, #0x60
     848:	add	x1, x20, x1
     84c:	mov	x0, x22
     850:	bl	338 <gomp_copy_host2dev>
     854:	b	828 <gomp_map_pointer+0xac>
     858:	ldr	x0, [sp, #72]
     85c:	sub	x0, x0, #0x1
     860:	str	x0, [sp, #72]
     864:	add	x1, sp, #0x48
     868:	mov	x0, x24
     86c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     870:	ldr	x1, [sp, #72]
     874:	add	x1, x1, #0x1
     878:	str	x1, [sp, #72]
     87c:	cbnz	x0, 7dc <gomp_map_pointer+0x60>
     880:	add	x1, sp, #0x48
     884:	mov	x0, x24
     888:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     88c:	cbnz	x0, 7dc <gomp_map_pointer+0x60>
     890:	add	x0, x22, #0xa8
     894:	bl	310 <gomp_mutex_unlock>
     898:	adrp	x0, 0 <get_kind>
     89c:	add	x0, x0, #0x0
     8a0:	bl	0 <gomp_fatal>

00000000000008a4 <gomp_get_target_fn_addr>:
     8a4:	stp	x29, x30, [sp, #-112]!
     8a8:	mov	x29, sp
     8ac:	stp	x19, x20, [sp, #16]
     8b0:	mov	x20, x0
     8b4:	mov	x19, x1
     8b8:	ldr	w0, [x0, #8]
     8bc:	tbnz	w0, #1, 950 <gomp_get_target_fn_addr+0xac>
     8c0:	str	x21, [sp, #32]
     8c4:	add	x21, x20, #0xa8
     8c8:	mov	w0, #0x1                   	// #1
     8cc:	ldaxr	w1, [x21]
     8d0:	cbnz	w1, 8dc <gomp_get_target_fn_addr+0x38>
     8d4:	stxr	w2, w0, [x21]
     8d8:	cbnz	w2, 8cc <gomp_get_target_fn_addr+0x28>
     8dc:	cmp	w1, #0x0
     8e0:	b.ne	92c <gomp_get_target_fn_addr+0x88>  // b.any
     8e4:	ldr	w0, [x20, #172]
     8e8:	cmp	w0, #0x2
     8ec:	b.eq	938 <gomp_get_target_fn_addr+0x94>  // b.none
     8f0:	str	x19, [sp, #56]
     8f4:	add	x19, x19, #0x1
     8f8:	str	x19, [sp, #64]
     8fc:	add	x1, sp, #0x38
     900:	add	x0, x20, #0xa0
     904:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     908:	mov	x19, x0
     90c:	ldxr	w0, [x21]
     910:	stlxr	w1, wzr, [x21]
     914:	cbnz	w1, 90c <gomp_get_target_fn_addr+0x68>
     918:	tbnz	w0, #31, 970 <gomp_get_target_fn_addr+0xcc>
     91c:	cbz	x19, 97c <gomp_get_target_fn_addr+0xd8>
     920:	ldr	x19, [x19, #24]
     924:	ldr	x21, [sp, #32]
     928:	b	950 <gomp_get_target_fn_addr+0xac>
     92c:	mov	x0, x21
     930:	bl	0 <gomp_mutex_lock_slow>
     934:	b	8e4 <gomp_get_target_fn_addr+0x40>
     938:	ldxr	w0, [x21]
     93c:	stlxr	w1, wzr, [x21]
     940:	cbnz	w1, 938 <gomp_get_target_fn_addr+0x94>
     944:	mov	x19, #0x0                   	// #0
     948:	tbnz	w0, #31, 960 <gomp_get_target_fn_addr+0xbc>
     94c:	ldr	x21, [sp, #32]
     950:	mov	x0, x19
     954:	ldp	x19, x20, [sp, #16]
     958:	ldp	x29, x30, [sp], #112
     95c:	ret
     960:	mov	x0, x21
     964:	bl	0 <gomp_mutex_unlock_slow>
     968:	ldr	x21, [sp, #32]
     96c:	b	950 <gomp_get_target_fn_addr+0xac>
     970:	mov	x0, x21
     974:	bl	0 <gomp_mutex_unlock_slow>
     978:	b	91c <gomp_get_target_fn_addr+0x78>
     97c:	ldr	x21, [sp, #32]
     980:	b	950 <gomp_get_target_fn_addr+0xac>

0000000000000984 <gomp_exit_data>:
     984:	stp	x29, x30, [sp, #-192]!
     988:	mov	x29, sp
     98c:	stp	x23, x24, [sp, #48]
     990:	stp	x25, x26, [sp, #64]
     994:	str	x0, [sp, #112]
     998:	mov	x24, x1
     99c:	str	x2, [sp, #104]
     9a0:	mov	x26, x3
     9a4:	mov	x25, x4
     9a8:	add	x0, x0, #0xa8
     9ac:	mov	x2, x0
     9b0:	str	x0, [sp, #120]
     9b4:	mov	w0, #0x1                   	// #1
     9b8:	ldaxr	w1, [x2]
     9bc:	cbnz	w1, 9c8 <gomp_exit_data+0x44>
     9c0:	stxr	w3, w0, [x2]
     9c4:	cbnz	w3, 9b8 <gomp_exit_data+0x34>
     9c8:	cmp	w1, #0x0
     9cc:	b.ne	a08 <gomp_exit_data+0x84>  // b.any
     9d0:	ldr	x1, [sp, #112]
     9d4:	ldr	w0, [x1, #172]
     9d8:	cmp	w0, #0x2
     9dc:	b.eq	a14 <gomp_exit_data+0x90>  // b.none
     9e0:	stp	x21, x22, [sp, #32]
     9e4:	mov	x21, #0x0                   	// #0
     9e8:	cbz	x24, bf8 <gomp_exit_data+0x274>
     9ec:	stp	x19, x20, [sp, #16]
     9f0:	stp	x27, x28, [sp, #80]
     9f4:	mov	x28, #0x1                   	// #1
     9f8:	mov	x27, #0x8084                	// #32900
     9fc:	movk	x27, #0x8084, lsl #16
     a00:	add	x23, x1, #0xa0
     a04:	b	ae4 <gomp_exit_data+0x160>
     a08:	ldr	x0, [sp, #120]
     a0c:	bl	0 <gomp_mutex_lock_slow>
     a10:	b	9d0 <gomp_exit_data+0x4c>
     a14:	ldr	x1, [sp, #120]
     a18:	ldxr	w0, [x1]
     a1c:	stlxr	w2, wzr, [x1]
     a20:	cbnz	w2, a18 <gomp_exit_data+0x94>
     a24:	tbz	w0, #31, c10 <gomp_exit_data+0x28c>
     a28:	ldr	x0, [sp, #120]
     a2c:	bl	0 <gomp_mutex_unlock_slow>
     a30:	b	c10 <gomp_exit_data+0x28c>
     a34:	add	x0, x0, #0x1
     a38:	str	x0, [sp, #144]
     a3c:	add	x1, sp, #0x88
     a40:	mov	x0, x23
     a44:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     a48:	mov	x20, x0
     a4c:	ldr	x0, [sp, #144]
     a50:	sub	x0, x0, #0x1
     a54:	str	x0, [sp, #144]
     a58:	b	a6c <gomp_exit_data+0xe8>
     a5c:	add	x1, sp, #0x88
     a60:	mov	x0, x23
     a64:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     a68:	mov	x20, x0
     a6c:	cbz	x20, ad8 <gomp_exit_data+0x154>
     a70:	ldr	x1, [x20, #32]
     a74:	sub	x0, x1, #0x1
     a78:	cmn	x0, #0x3
     a7c:	b.hi	b4c <gomp_exit_data+0x1c8>  // b.pmore
     a80:	str	x0, [x20, #32]
     a84:	cmp	w22, #0x0
     a88:	ccmp	w19, #0x7, #0x4, eq  // eq = none
     a8c:	b.eq	b60 <gomp_exit_data+0x1dc>  // b.none
     a90:	cmp	w19, #0x2
     a94:	b.eq	bac <gomp_exit_data+0x228>  // b.none
     a98:	cmp	w19, #0x12
     a9c:	b.ne	ad0 <gomp_exit_data+0x14c>  // b.any
     aa0:	ldr	x1, [sp, #136]
     aa4:	ldr	x0, [x20, #16]
     aa8:	ldr	x2, [x0, #16]
     aac:	ldr	x0, [x20]
     ab0:	sub	x2, x2, x0
     ab4:	ldr	x0, [x20, #24]
     ab8:	add	x0, x1, x0
     abc:	ldr	x3, [sp, #144]
     ac0:	sub	x3, x3, x1
     ac4:	add	x2, x2, x0
     ac8:	ldr	x0, [sp, #112]
     acc:	bl	600 <gomp_copy_dev2host>
     ad0:	ldr	x0, [x20, #32]
     ad4:	cbz	x0, b74 <gomp_exit_data+0x1f0>
     ad8:	add	x21, x21, #0x1
     adc:	cmp	x24, x21
     ae0:	b.eq	bf0 <gomp_exit_data+0x26c>  // b.none
     ae4:	ldrh	w0, [x25, x21, lsl #1]
     ae8:	and	w19, w0, #0xff
     aec:	cmp	w19, #0x1f
     af0:	b.hi	bc0 <gomp_exit_data+0x23c>  // b.pmore
     af4:	lsl	x0, x28, x19
     af8:	tst	x0, x27
     afc:	b.eq	bc0 <gomp_exit_data+0x23c>  // b.none
     b00:	ldr	x0, [sp, #104]
     b04:	ldr	x2, [x0, x21, lsl #3]
     b08:	str	x2, [sp, #136]
     b0c:	ldr	x0, [x26, x21, lsl #3]
     b10:	add	x0, x2, x0
     b14:	str	x0, [sp, #144]
     b18:	cmp	w19, #0x1f
     b1c:	cset	w22, eq  // eq = none
     b20:	and	w1, w19, #0xffffffef
     b24:	and	w1, w1, #0xff
     b28:	cmp	w1, #0xf
     b2c:	b.ne	a5c <gomp_exit_data+0xd8>  // b.any
     b30:	cmp	x2, x0
     b34:	b.eq	a34 <gomp_exit_data+0xb0>  // b.none
     b38:	add	x1, sp, #0x88
     b3c:	mov	x0, x23
     b40:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     b44:	mov	x20, x0
     b48:	b	a6c <gomp_exit_data+0xe8>
     b4c:	cmp	w22, #0x0
     b50:	ccmp	w19, #0x7, #0x4, eq  // eq = none
     b54:	b.ne	a90 <gomp_exit_data+0x10c>  // b.any
     b58:	cmn	x1, #0x1
     b5c:	b.eq	a90 <gomp_exit_data+0x10c>  // b.none
     b60:	str	xzr, [x20, #32]
     b64:	cmp	w19, #0x2
     b68:	b.eq	aa0 <gomp_exit_data+0x11c>  // b.none
     b6c:	cmp	w19, #0x12
     b70:	b.eq	aa0 <gomp_exit_data+0x11c>  // b.none
     b74:	mov	x1, x20
     b78:	mov	x0, x23
     b7c:	bl	0 <splay_tree_prefix_splay_tree_remove>
     b80:	ldr	x1, [x20, #48]
     b84:	cbz	x1, b90 <gomp_exit_data+0x20c>
     b88:	mov	x0, x23
     b8c:	bl	0 <splay_tree_prefix_splay_tree_insert>
     b90:	ldr	x0, [x20, #16]
     b94:	ldr	x1, [x0]
     b98:	cmp	x1, #0x1
     b9c:	b.ls	bb8 <gomp_exit_data+0x234>  // b.plast
     ba0:	sub	x1, x1, #0x1
     ba4:	str	x1, [x0]
     ba8:	b	ad8 <gomp_exit_data+0x154>
     bac:	ldr	x0, [x20, #32]
     bb0:	cbnz	x0, ad8 <gomp_exit_data+0x154>
     bb4:	b	aa0 <gomp_exit_data+0x11c>
     bb8:	bl	4b4 <gomp_unmap_tgt>
     bbc:	b	ad8 <gomp_exit_data+0x154>
     bc0:	ldr	x1, [sp, #120]
     bc4:	ldxr	w0, [x1]
     bc8:	stlxr	w2, wzr, [x1]
     bcc:	cbnz	w2, bc4 <gomp_exit_data+0x240>
     bd0:	tbnz	w0, #31, be4 <gomp_exit_data+0x260>
     bd4:	mov	w1, w19
     bd8:	adrp	x0, 0 <get_kind>
     bdc:	add	x0, x0, #0x0
     be0:	bl	0 <gomp_fatal>
     be4:	ldr	x0, [sp, #120]
     be8:	bl	0 <gomp_mutex_unlock_slow>
     bec:	b	bd4 <gomp_exit_data+0x250>
     bf0:	ldp	x19, x20, [sp, #16]
     bf4:	ldp	x27, x28, [sp, #80]
     bf8:	ldr	x1, [sp, #120]
     bfc:	ldxr	w0, [x1]
     c00:	stlxr	w2, wzr, [x1]
     c04:	cbnz	w2, bfc <gomp_exit_data+0x278>
     c08:	tbnz	w0, #31, c20 <gomp_exit_data+0x29c>
     c0c:	ldp	x21, x22, [sp, #32]
     c10:	ldp	x23, x24, [sp, #48]
     c14:	ldp	x25, x26, [sp, #64]
     c18:	ldp	x29, x30, [sp], #192
     c1c:	ret
     c20:	ldr	x0, [sp, #120]
     c24:	bl	0 <gomp_mutex_unlock_slow>
     c28:	ldp	x21, x22, [sp, #32]
     c2c:	b	c10 <gomp_exit_data+0x28c>

0000000000000c30 <gomp_update>:
     c30:	stp	x29, x30, [sp, #-192]!
     c34:	mov	x29, sp
     c38:	stp	x27, x28, [sp, #80]
     c3c:	mov	x27, x0
     c40:	str	x4, [sp, #104]
     c44:	ands	w0, w5, #0xff
     c48:	str	w0, [sp, #116]
     c4c:	mov	w28, #0xff                  	// #255
     c50:	mov	w0, #0x7                   	// #7
     c54:	csel	w28, w28, w0, ne  // ne = any
     c58:	cmp	x1, #0x0
     c5c:	ccmp	x27, #0x0, #0x4, ne  // ne = any
     c60:	b.eq	e4c <gomp_update+0x21c>  // b.none
     c64:	stp	x19, x20, [sp, #16]
     c68:	stp	x21, x22, [sp, #32]
     c6c:	stp	x23, x24, [sp, #48]
     c70:	stp	x25, x26, [sp, #64]
     c74:	mov	x21, x1
     c78:	mov	x26, x2
     c7c:	mov	x23, x3
     c80:	add	x0, x27, #0xa8
     c84:	mov	x2, x0
     c88:	str	x0, [sp, #120]
     c8c:	mov	w0, #0x1                   	// #1
     c90:	ldaxr	w1, [x2]
     c94:	cbnz	w1, ca0 <gomp_update+0x70>
     c98:	stxr	w3, w0, [x2]
     c9c:	cbnz	w3, c90 <gomp_update+0x60>
     ca0:	cmp	w1, #0x0
     ca4:	b.ne	cc4 <gomp_update+0x94>  // b.any
     ca8:	ldr	w0, [x27, #172]
     cac:	mov	x19, #0x0                   	// #0
     cb0:	cmp	w0, #0x2
     cb4:	b.eq	cd0 <gomp_update+0xa0>  // b.none
     cb8:	add	x0, x27, #0xa0
     cbc:	str	x0, [sp, #96]
     cc0:	b	d78 <gomp_update+0x148>
     cc4:	ldr	x0, [sp, #120]
     cc8:	bl	0 <gomp_mutex_lock_slow>
     ccc:	b	ca8 <gomp_update+0x78>
     cd0:	ldr	x1, [sp, #120]
     cd4:	ldxr	w0, [x1]
     cd8:	stlxr	w2, wzr, [x1]
     cdc:	cbnz	w2, cd4 <gomp_update+0xa4>
     ce0:	tbnz	w0, #31, cf8 <gomp_update+0xc8>
     ce4:	ldp	x19, x20, [sp, #16]
     ce8:	ldp	x21, x22, [sp, #32]
     cec:	ldp	x23, x24, [sp, #48]
     cf0:	ldp	x25, x26, [sp, #64]
     cf4:	b	e4c <gomp_update+0x21c>
     cf8:	ldr	x0, [sp, #120]
     cfc:	bl	0 <gomp_mutex_unlock_slow>
     d00:	ldp	x19, x20, [sp, #16]
     d04:	ldp	x21, x22, [sp, #32]
     d08:	ldp	x23, x24, [sp, #48]
     d0c:	ldp	x25, x26, [sp, #64]
     d10:	b	e4c <gomp_update+0x21c>
     d14:	ldr	x1, [sp, #120]
     d18:	ldxr	w0, [x1]
     d1c:	stlxr	w2, wzr, [x1]
     d20:	cbnz	w2, d18 <gomp_update+0xe8>
     d24:	tbnz	w0, #31, d44 <gomp_update+0x114>
     d28:	ldr	x4, [x25, #8]
     d2c:	ldr	x3, [x25]
     d30:	ldr	x2, [sp, #144]
     d34:	ldr	x1, [sp, #136]
     d38:	adrp	x0, 0 <get_kind>
     d3c:	add	x0, x0, #0x0
     d40:	bl	0 <gomp_fatal>
     d44:	ldr	x0, [sp, #120]
     d48:	bl	0 <gomp_mutex_unlock_slow>
     d4c:	b	d28 <gomp_update+0xf8>
     d50:	mov	x4, #0x0                   	// #0
     d54:	mov	x3, x25
     d58:	mov	x2, x24
     d5c:	mov	x1, x22
     d60:	mov	x0, x27
     d64:	bl	338 <gomp_copy_host2dev>
     d68:	b	e04 <gomp_update+0x1d4>
     d6c:	add	x19, x19, #0x1
     d70:	cmp	x21, x19
     d74:	b.ls	e28 <gomp_update+0x1f8>  // b.plast
     d78:	ldr	x0, [x23, x19, lsl #3]
     d7c:	cbz	x0, d6c <gomp_update+0x13c>
     d80:	ldr	x1, [x26, x19, lsl #3]
     d84:	str	x1, [sp, #136]
     d88:	add	x0, x0, x1
     d8c:	str	x0, [sp, #144]
     d90:	add	x1, sp, #0x88
     d94:	ldr	x0, [sp, #96]
     d98:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     d9c:	mov	x25, x0
     da0:	cbz	x0, d6c <gomp_update+0x13c>
     da4:	mov	w2, w19
     da8:	ldr	x1, [sp, #104]
     dac:	ldrb	w0, [sp, #116]
     db0:	bl	0 <get_kind>
     db4:	ldr	x1, [x25]
     db8:	ldr	x24, [sp, #136]
     dbc:	cmp	x1, x24
     dc0:	b.hi	d14 <gomp_update+0xe4>  // b.pmore
     dc4:	ldr	x2, [sp, #144]
     dc8:	ldr	x3, [x25, #8]
     dcc:	cmp	x3, x2
     dd0:	b.cc	d14 <gomp_update+0xe4>  // b.lo, b.ul, b.last
     dd4:	ldr	x3, [x25, #16]
     dd8:	ldr	x22, [x3, #16]
     ddc:	sub	x22, x22, x1
     de0:	ldr	x1, [x25, #24]
     de4:	add	x1, x24, x1
     de8:	add	x22, x22, x1
     dec:	sub	x25, x2, x24
     df0:	and	w20, w28, w0
     df4:	mov	w0, #0xd                   	// #13
     df8:	and	w0, w20, w0
     dfc:	cmp	w0, #0x1
     e00:	b.eq	d50 <gomp_update+0x120>  // b.none
     e04:	and	w20, w20, #0xe
     e08:	cmp	w20, #0x2
     e0c:	b.ne	d6c <gomp_update+0x13c>  // b.any
     e10:	mov	x3, x25
     e14:	mov	x2, x22
     e18:	mov	x1, x24
     e1c:	mov	x0, x27
     e20:	bl	600 <gomp_copy_dev2host>
     e24:	b	d6c <gomp_update+0x13c>
     e28:	ldr	x1, [sp, #120]
     e2c:	ldxr	w0, [x1]
     e30:	stlxr	w2, wzr, [x1]
     e34:	cbnz	w2, e2c <gomp_update+0x1fc>
     e38:	tbnz	w0, #31, e58 <gomp_update+0x228>
     e3c:	ldp	x19, x20, [sp, #16]
     e40:	ldp	x21, x22, [sp, #32]
     e44:	ldp	x23, x24, [sp, #48]
     e48:	ldp	x25, x26, [sp, #64]
     e4c:	ldp	x27, x28, [sp, #80]
     e50:	ldp	x29, x30, [sp], #192
     e54:	ret
     e58:	ldr	x0, [sp, #120]
     e5c:	bl	0 <gomp_mutex_unlock_slow>
     e60:	ldp	x19, x20, [sp, #16]
     e64:	ldp	x21, x22, [sp, #32]
     e68:	ldp	x23, x24, [sp, #48]
     e6c:	ldp	x25, x26, [sp, #64]
     e70:	b	e4c <gomp_update+0x21c>

0000000000000e74 <gomp_load_image_to_device>:
     e74:	stp	x29, x30, [sp, #-144]!
     e78:	mov	x29, sp
     e7c:	stp	x19, x20, [sp, #16]
     e80:	stp	x21, x22, [sp, #32]
     e84:	stp	x23, x24, [sp, #48]
     e88:	stp	x25, x26, [sp, #64]
     e8c:	stp	x27, x28, [sp, #80]
     e90:	mov	x28, x0
     e94:	mov	x0, x2
     e98:	mov	x2, x3
     e9c:	and	w3, w4, #0xff
     ea0:	str	w3, [sp, #124]
     ea4:	ldr	x24, [x0]
     ea8:	ldr	x3, [x0, #16]
     eac:	str	x3, [sp, #112]
     eb0:	ldr	x23, [x0, #8]
     eb4:	sub	x23, x23, x24
     eb8:	asr	x23, x23, #3
     ebc:	ldr	x0, [x0, #24]
     ec0:	sub	x0, x0, x3
     ec4:	lsr	x3, x0, #63
     ec8:	add	x0, x3, x0, asr #3
     ecc:	asr	x20, x0, #1
     ed0:	str	x20, [sp, #104]
     ed4:	str	xzr, [sp, #136]
     ed8:	ldr	x4, [x28, #80]
     edc:	add	x3, sp, #0x88
     ee0:	ldr	w0, [x28, #12]
     ee4:	blr	x4
     ee8:	mov	w19, w0
     eec:	add	w20, w20, w23
     ef0:	cmp	w20, w0
     ef4:	b.ne	108c <gomp_load_image_to_device+0x218>  // b.any
     ef8:	mov	w25, w23
     efc:	mov	x0, #0x40                  	// #64
     f00:	bl	0 <gomp_malloc>
     f04:	mov	x22, x0
     f08:	sbfiz	x0, x19, #3, #32
     f0c:	add	x0, x0, w19, sxtw
     f10:	lsl	x0, x0, #3
     f14:	bl	0 <gomp_malloc>
     f18:	mov	x19, x0
     f1c:	str	x0, [x22, #8]
     f20:	mov	x0, #0xffffffffffffffff    	// #-1
     f24:	str	x0, [x22]
     f28:	str	xzr, [x22, #16]
     f2c:	str	xzr, [x22, #24]
     f30:	str	xzr, [x22, #32]
     f34:	str	xzr, [x22, #40]
     f38:	str	xzr, [x22, #48]
     f3c:	str	x28, [x22, #56]
     f40:	cmp	w23, #0x0
     f44:	b.le	fb8 <gomp_load_image_to_device+0x144>
     f48:	mov	x20, x19
     f4c:	mov	x21, #0x0                   	// #0
     f50:	mov	x27, x0
     f54:	add	x26, x28, #0xa0
     f58:	ldr	x0, [x24, x21, lsl #3]
     f5c:	str	x0, [x20]
     f60:	add	x0, x0, #0x1
     f64:	str	x0, [x20, #8]
     f68:	str	x22, [x20, #16]
     f6c:	lsl	x0, x21, #4
     f70:	ldr	x1, [sp, #136]
     f74:	ldr	x0, [x1, x0]
     f78:	str	x0, [x20, #24]
     f7c:	str	x27, [x20, #32]
     f80:	str	xzr, [x20, #48]
     f84:	str	xzr, [x20, #56]
     f88:	str	xzr, [x20, #64]
     f8c:	mov	x1, x20
     f90:	mov	x0, x26
     f94:	bl	0 <splay_tree_prefix_splay_tree_insert>
     f98:	add	x20, x20, #0x48
     f9c:	add	x21, x21, #0x1
     fa0:	cmp	w25, w21
     fa4:	b.gt	f58 <gomp_load_image_to_device+0xe4>
     fa8:	sub	w0, w23, #0x1
     fac:	add	x0, x0, #0x1
     fb0:	add	x0, x0, x0, lsl #3
     fb4:	add	x19, x19, x0, lsl #3
     fb8:	ldr	x0, [sp, #104]
     fbc:	cmp	w0, #0x0
     fc0:	b.le	1068 <gomp_load_image_to_device+0x1f4>
     fc4:	ldr	x1, [sp, #112]
     fc8:	mov	x20, x1
     fcc:	sub	w21, w0, #0x1
     fd0:	add	x21, x21, #0x1
     fd4:	add	x21, x21, x21, lsl #3
     fd8:	add	x21, x19, x21, lsl #3
     fdc:	sbfiz	x23, x23, #4, #32
     fe0:	sub	x23, x23, x1
     fe4:	add	x24, x28, #0xa0
     fe8:	add	x2, x20, x23
     fec:	ldr	x3, [sp, #136]
     ff0:	add	x0, x3, x2
     ff4:	ldr	x0, [x0, #8]
     ff8:	ldr	x1, [x3, x2]
     ffc:	sub	x0, x0, x1
    1000:	ldr	x1, [x20, #8]
    1004:	cmp	x1, x0
    1008:	b.ne	10c4 <gomp_load_image_to_device+0x250>  // b.any
    100c:	ldr	x4, [x20]
    1010:	str	x4, [x19]
    1014:	ldr	x1, [x20, #8]
    1018:	and	x1, x1, #0x7fffffffffffffff
    101c:	add	x1, x1, x4
    1020:	str	x1, [x19, #8]
    1024:	str	x22, [x19, #16]
    1028:	ldr	x1, [x3, x2]
    102c:	str	x1, [x19, #24]
    1030:	mvn	x0, x0
    1034:	lsr	x0, x0, #63
    1038:	sub	x0, x0, #0x2
    103c:	str	x0, [x19, #32]
    1040:	str	xzr, [x19, #48]
    1044:	str	xzr, [x19, #56]
    1048:	str	xzr, [x19, #64]
    104c:	mov	x1, x19
    1050:	mov	x0, x24
    1054:	bl	0 <splay_tree_prefix_splay_tree_insert>
    1058:	add	x19, x19, #0x48
    105c:	add	x20, x20, #0x10
    1060:	cmp	x19, x21
    1064:	b.ne	fe8 <gomp_load_image_to_device+0x174>  // b.any
    1068:	ldr	x0, [sp, #136]
    106c:	bl	0 <free>
    1070:	ldp	x19, x20, [sp, #16]
    1074:	ldp	x21, x22, [sp, #32]
    1078:	ldp	x23, x24, [sp, #48]
    107c:	ldp	x25, x26, [sp, #64]
    1080:	ldp	x27, x28, [sp, #80]
    1084:	ldp	x29, x30, [sp], #144
    1088:	ret
    108c:	add	x0, x28, #0xa8
    1090:	bl	310 <gomp_mutex_unlock>
    1094:	ldr	w0, [sp, #124]
    1098:	cbnz	w0, 10b0 <gomp_load_image_to_device+0x23c>
    109c:	mov	w2, w19
    10a0:	mov	w1, w20
    10a4:	adrp	x0, 0 <get_kind>
    10a8:	add	x0, x0, #0x0
    10ac:	bl	0 <gomp_fatal>
    10b0:	adrp	x0, 0 <get_kind>
    10b4:	add	x0, x0, #0x0
    10b8:	add	x0, x0, #0x10
    10bc:	bl	310 <gomp_mutex_unlock>
    10c0:	b	109c <gomp_load_image_to_device+0x228>
    10c4:	add	x0, x28, #0xa8
    10c8:	ldxr	w1, [x0]
    10cc:	stlxr	w2, wzr, [x0]
    10d0:	cbnz	w2, 10c8 <gomp_load_image_to_device+0x254>
    10d4:	tbnz	w1, #31, 1108 <gomp_load_image_to_device+0x294>
    10d8:	ldr	w0, [sp, #124]
    10dc:	cbz	w0, 10fc <gomp_load_image_to_device+0x288>
    10e0:	adrp	x0, 0 <get_kind>
    10e4:	add	x0, x0, #0x0
    10e8:	add	x0, x0, #0x10
    10ec:	ldxr	w1, [x0]
    10f0:	stlxr	w2, wzr, [x0]
    10f4:	cbnz	w2, 10ec <gomp_load_image_to_device+0x278>
    10f8:	tbnz	w1, #31, 1110 <gomp_load_image_to_device+0x29c>
    10fc:	adrp	x0, 0 <get_kind>
    1100:	add	x0, x0, #0x0
    1104:	bl	0 <gomp_fatal>
    1108:	bl	0 <gomp_mutex_unlock_slow>
    110c:	b	10d8 <gomp_load_image_to_device+0x264>
    1110:	adrp	x0, 0 <get_kind>
    1114:	add	x0, x0, #0x0
    1118:	add	x0, x0, #0x10
    111c:	bl	0 <gomp_mutex_unlock_slow>
    1120:	b	10fc <gomp_load_image_to_device+0x288>

0000000000001124 <gomp_map_fields_existing>:
    1124:	stp	x29, x30, [sp, #-176]!
    1128:	mov	x29, sp
    112c:	stp	x19, x20, [sp, #16]
    1130:	stp	x21, x22, [sp, #32]
    1134:	stp	x23, x24, [sp, #48]
    1138:	stp	x25, x26, [sp, #64]
    113c:	stp	x27, x28, [sp, #80]
    1140:	mov	x24, x0
    1144:	mov	x20, x1
    1148:	mov	x22, x2
    114c:	mov	x19, x3
    1150:	mov	x25, x4
    1154:	mov	x26, x5
    1158:	mov	x21, x6
    115c:	str	x7, [sp, #104]
    1160:	ldr	x28, [x0, #56]
    1164:	add	x27, x28, #0xa0
    1168:	ldr	x1, [x4, x3, lsl #3]
    116c:	str	x1, [sp, #120]
    1170:	ldr	x0, [x5, x3, lsl #3]
    1174:	add	x0, x0, x1
    1178:	str	x0, [sp, #128]
    117c:	add	x1, sp, #0x78
    1180:	mov	x0, x27
    1184:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1188:	mov	x23, x0
    118c:	mov	w2, w19
    1190:	mov	x1, x21
    1194:	mov	w0, #0x1                   	// #1
    1198:	bl	0 <get_kind>
    119c:	mov	w21, w0
    11a0:	cbz	x23, 11b4 <gomp_map_fields_existing+0x90>
    11a4:	ldr	x1, [x23, #16]
    11a8:	ldr	x0, [x20, #16]
    11ac:	cmp	x1, x0
    11b0:	b.eq	1308 <gomp_map_fields_existing+0x1e4>  // b.none
    11b4:	ldr	x0, [x26, x19, lsl #3]
    11b8:	cbnz	x0, 155c <gomp_map_fields_existing+0x438>
    11bc:	ldr	x0, [sp, #120]
    11c0:	add	x22, x25, x22, lsl #3
    11c4:	ldur	x1, [x22, #-8]
    11c8:	cmp	x1, x0
    11cc:	b.cs	1208 <gomp_map_fields_existing+0xe4>  // b.hs, b.nlast
    11d0:	sub	x0, x0, #0x1
    11d4:	str	x0, [sp, #120]
    11d8:	add	x1, sp, #0x78
    11dc:	mov	x0, x27
    11e0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    11e4:	mov	x22, x0
    11e8:	ldr	x2, [sp, #120]
    11ec:	add	x2, x2, #0x1
    11f0:	str	x2, [sp, #120]
    11f4:	cbz	x0, 1208 <gomp_map_fields_existing+0xe4>
    11f8:	ldr	x1, [x0, #16]
    11fc:	ldr	x0, [x20, #16]
    1200:	cmp	x1, x0
    1204:	b.eq	1404 <gomp_map_fields_existing+0x2e0>  // b.none
    1208:	ldr	x0, [sp, #128]
    120c:	add	x0, x0, #0x1
    1210:	str	x0, [sp, #128]
    1214:	add	x1, sp, #0x78
    1218:	mov	x0, x27
    121c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1220:	mov	x22, x0
    1224:	ldr	x4, [sp, #128]
    1228:	sub	x4, x4, #0x1
    122c:	str	x4, [sp, #128]
    1230:	cbz	x0, 155c <gomp_map_fields_existing+0x438>
    1234:	ldr	x1, [x0, #16]
    1238:	ldr	x0, [x20, #16]
    123c:	cmp	x1, x0
    1240:	b.ne	155c <gomp_map_fields_existing+0x438>  // b.any
    1244:	ldr	x1, [x22]
    1248:	ldr	x0, [x20]
    124c:	sub	x1, x1, x0
    1250:	ldr	x0, [x22, #24]
    1254:	ldr	x2, [x20, #24]
    1258:	sub	x0, x0, x2
    125c:	cmp	x1, x0
    1260:	b.ne	155c <gomp_map_fields_existing+0x438>  // b.any
    1264:	and	w0, w21, #0xff
    1268:	add	x19, x24, x19, lsl #5
    126c:	str	x22, [x19, #64]
    1270:	and	w1, w21, #0xe
    1274:	cmp	w1, #0x2
    1278:	cset	w1, eq  // eq = none
    127c:	strb	w1, [x19, #72]
    1280:	sub	w1, w0, #0x12
    1284:	and	w1, w1, #0xff
    1288:	cmp	w1, #0x1
    128c:	cset	w1, ls  // ls = plast
    1290:	strb	w1, [x19, #73]
    1294:	ldr	x2, [sp, #120]
    1298:	ldr	x1, [x22]
    129c:	sub	x1, x2, x1
    12a0:	str	x1, [x19, #80]
    12a4:	sub	x3, x4, x2
    12a8:	str	x3, [x19, #88]
    12ac:	tbnz	w21, #7, 14fc <gomp_map_fields_existing+0x3d8>
    12b0:	ldr	x1, [x22]
    12b4:	cmp	x2, x1
    12b8:	b.cc	14fc <gomp_map_fields_existing+0x3d8>  // b.lo, b.ul, b.last
    12bc:	ldr	x5, [x22, #8]
    12c0:	cmp	x4, x5
    12c4:	b.hi	14fc <gomp_map_fields_existing+0x3d8>  // b.pmore
    12c8:	and	w0, w0, #0xfffffffd
    12cc:	and	w0, w0, #0xff
    12d0:	cmp	w0, #0x11
    12d4:	b.eq	1534 <gomp_map_fields_existing+0x410>  // b.none
    12d8:	ldr	x0, [x22, #32]
    12dc:	cmn	x0, #0x1
    12e0:	b.eq	12ec <gomp_map_fields_existing+0x1c8>  // b.none
    12e4:	add	x0, x0, #0x1
    12e8:	str	x0, [x22, #32]
    12ec:	ldp	x19, x20, [sp, #16]
    12f0:	ldp	x21, x22, [sp, #32]
    12f4:	ldp	x23, x24, [sp, #48]
    12f8:	ldp	x25, x26, [sp, #64]
    12fc:	ldp	x27, x28, [sp, #80]
    1300:	ldp	x29, x30, [sp], #176
    1304:	ret
    1308:	ldr	x1, [x23]
    130c:	ldr	x0, [x20]
    1310:	sub	x1, x1, x0
    1314:	ldr	x0, [x23, #24]
    1318:	ldr	x2, [x20, #24]
    131c:	sub	x0, x0, x2
    1320:	cmp	x1, x0
    1324:	b.ne	11b4 <gomp_map_fields_existing+0x90>  // b.any
    1328:	and	w0, w21, #0xff
    132c:	add	x19, x24, x19, lsl #5
    1330:	str	x23, [x19, #64]
    1334:	and	w1, w21, #0xe
    1338:	cmp	w1, #0x2
    133c:	cset	w1, eq  // eq = none
    1340:	strb	w1, [x19, #72]
    1344:	sub	w1, w0, #0x12
    1348:	and	w1, w1, #0xff
    134c:	cmp	w1, #0x1
    1350:	cset	w1, ls  // ls = plast
    1354:	strb	w1, [x19, #73]
    1358:	ldr	x2, [sp, #120]
    135c:	ldr	x1, [x23]
    1360:	sub	x1, x2, x1
    1364:	str	x1, [x19, #80]
    1368:	ldr	x1, [sp, #128]
    136c:	sub	x3, x1, x2
    1370:	str	x3, [x19, #88]
    1374:	tbnz	w21, #7, 13b8 <gomp_map_fields_existing+0x294>
    1378:	ldr	x4, [x23]
    137c:	cmp	x2, x4
    1380:	b.cc	13b8 <gomp_map_fields_existing+0x294>  // b.lo, b.ul, b.last
    1384:	ldr	x5, [x23, #8]
    1388:	cmp	x1, x5
    138c:	b.hi	13b8 <gomp_map_fields_existing+0x294>  // b.pmore
    1390:	and	w0, w0, #0xfffffffd
    1394:	and	w0, w0, #0xff
    1398:	cmp	w0, #0x11
    139c:	b.eq	13dc <gomp_map_fields_existing+0x2b8>  // b.none
    13a0:	ldr	x0, [x23, #32]
    13a4:	cmn	x0, #0x1
    13a8:	b.eq	12ec <gomp_map_fields_existing+0x1c8>  // b.none
    13ac:	add	x0, x0, #0x1
    13b0:	str	x0, [x23, #32]
    13b4:	b	12ec <gomp_map_fields_existing+0x1c8>
    13b8:	add	x0, x28, #0xa8
    13bc:	bl	310 <gomp_mutex_unlock>
    13c0:	ldr	x4, [x23, #8]
    13c4:	ldr	x3, [x23]
    13c8:	ldr	x2, [sp, #128]
    13cc:	ldr	x1, [sp, #120]
    13d0:	adrp	x0, 0 <get_kind>
    13d4:	add	x0, x0, #0x0
    13d8:	bl	0 <gomp_fatal>
    13dc:	ldr	x0, [x23, #16]
    13e0:	ldr	x1, [x0, #16]
    13e4:	sub	x1, x1, x4
    13e8:	ldr	x0, [x23, #24]
    13ec:	add	x0, x2, x0
    13f0:	ldr	x4, [sp, #104]
    13f4:	add	x1, x1, x0
    13f8:	mov	x0, x28
    13fc:	bl	338 <gomp_copy_host2dev>
    1400:	b	13a0 <gomp_map_fields_existing+0x27c>
    1404:	ldr	x1, [x22]
    1408:	ldr	x0, [x20]
    140c:	sub	x1, x1, x0
    1410:	ldr	x0, [x22, #24]
    1414:	ldr	x3, [x20, #24]
    1418:	sub	x0, x0, x3
    141c:	cmp	x1, x0
    1420:	b.ne	1208 <gomp_map_fields_existing+0xe4>  // b.any
    1424:	and	w0, w21, #0xff
    1428:	add	x19, x24, x19, lsl #5
    142c:	str	x22, [x19, #64]
    1430:	and	w1, w21, #0xe
    1434:	cmp	w1, #0x2
    1438:	cset	w1, eq  // eq = none
    143c:	strb	w1, [x19, #72]
    1440:	sub	w1, w0, #0x12
    1444:	and	w1, w1, #0xff
    1448:	cmp	w1, #0x1
    144c:	cset	w1, ls  // ls = plast
    1450:	strb	w1, [x19, #73]
    1454:	ldr	x1, [x22]
    1458:	sub	x1, x2, x1
    145c:	str	x1, [x19, #80]
    1460:	ldr	x1, [sp, #128]
    1464:	sub	x3, x1, x2
    1468:	str	x3, [x19, #88]
    146c:	tbnz	w21, #7, 14b0 <gomp_map_fields_existing+0x38c>
    1470:	ldr	x4, [x22]
    1474:	cmp	x2, x4
    1478:	b.cc	14b0 <gomp_map_fields_existing+0x38c>  // b.lo, b.ul, b.last
    147c:	ldr	x5, [x22, #8]
    1480:	cmp	x1, x5
    1484:	b.hi	14b0 <gomp_map_fields_existing+0x38c>  // b.pmore
    1488:	and	w0, w0, #0xfffffffd
    148c:	and	w0, w0, #0xff
    1490:	cmp	w0, #0x11
    1494:	b.eq	14d4 <gomp_map_fields_existing+0x3b0>  // b.none
    1498:	ldr	x0, [x22, #32]
    149c:	cmn	x0, #0x1
    14a0:	b.eq	12ec <gomp_map_fields_existing+0x1c8>  // b.none
    14a4:	add	x0, x0, #0x1
    14a8:	str	x0, [x22, #32]
    14ac:	b	12ec <gomp_map_fields_existing+0x1c8>
    14b0:	add	x0, x28, #0xa8
    14b4:	bl	310 <gomp_mutex_unlock>
    14b8:	ldr	x4, [x22, #8]
    14bc:	ldr	x3, [x22]
    14c0:	ldr	x2, [sp, #128]
    14c4:	ldr	x1, [sp, #120]
    14c8:	adrp	x0, 0 <get_kind>
    14cc:	add	x0, x0, #0x0
    14d0:	bl	0 <gomp_fatal>
    14d4:	ldr	x0, [x22, #16]
    14d8:	ldr	x1, [x0, #16]
    14dc:	sub	x1, x1, x4
    14e0:	ldr	x0, [x22, #24]
    14e4:	add	x0, x2, x0
    14e8:	ldr	x4, [sp, #104]
    14ec:	add	x1, x1, x0
    14f0:	mov	x0, x28
    14f4:	bl	338 <gomp_copy_host2dev>
    14f8:	b	1498 <gomp_map_fields_existing+0x374>
    14fc:	add	x0, x28, #0xa8
    1500:	ldxr	w1, [x0]
    1504:	stlxr	w2, wzr, [x0]
    1508:	cbnz	w2, 1500 <gomp_map_fields_existing+0x3dc>
    150c:	tbnz	w1, #31, 152c <gomp_map_fields_existing+0x408>
    1510:	ldr	x4, [x22, #8]
    1514:	ldr	x3, [x22]
    1518:	ldr	x2, [sp, #128]
    151c:	ldr	x1, [sp, #120]
    1520:	adrp	x0, 0 <get_kind>
    1524:	add	x0, x0, #0x0
    1528:	bl	0 <gomp_fatal>
    152c:	bl	0 <gomp_mutex_unlock_slow>
    1530:	b	1510 <gomp_map_fields_existing+0x3ec>
    1534:	ldr	x0, [x22, #16]
    1538:	ldr	x0, [x0, #16]
    153c:	sub	x1, x0, x1
    1540:	ldr	x0, [x22, #24]
    1544:	add	x0, x2, x0
    1548:	ldr	x4, [sp, #104]
    154c:	add	x1, x1, x0
    1550:	mov	x0, x28
    1554:	bl	338 <gomp_copy_host2dev>
    1558:	b	12d8 <gomp_map_fields_existing+0x1b4>
    155c:	add	x0, x28, #0xa8
    1560:	ldxr	w1, [x0]
    1564:	stlxr	w2, wzr, [x0]
    1568:	cbnz	w2, 1560 <gomp_map_fields_existing+0x43c>
    156c:	tbnz	w1, #31, 1584 <gomp_map_fields_existing+0x460>
    1570:	ldr	x2, [sp, #128]
    1574:	ldr	x1, [sp, #120]
    1578:	adrp	x0, 0 <get_kind>
    157c:	add	x0, x0, #0x0
    1580:	bl	0 <gomp_fatal>
    1584:	bl	0 <gomp_mutex_unlock_slow>
    1588:	b	1570 <gomp_map_fields_existing+0x44c>

000000000000158c <gomp_init_targets_once>:
    158c:	stp	x29, x30, [sp, #-16]!
    1590:	mov	x29, sp
    1594:	adrp	x1, 0 <get_kind>
    1598:	add	x1, x1, #0x0
    159c:	adrp	x0, 0 <get_kind>
    15a0:	add	x0, x0, #0x0
    15a4:	add	x0, x0, #0x14
    15a8:	bl	0 <pthread_once>
    15ac:	ldp	x29, x30, [sp], #16
    15b0:	ret

00000000000015b4 <gomp_get_num_devices>:
    15b4:	stp	x29, x30, [sp, #-16]!
    15b8:	mov	x29, sp
    15bc:	bl	158c <gomp_init_targets_once>
    15c0:	adrp	x0, 0 <get_kind>
    15c4:	ldr	w0, [x0]
    15c8:	ldp	x29, x30, [sp], #16
    15cc:	ret

00000000000015d0 <gomp_map_vars>:
    15d0:	stp	x29, x30, [sp, #-336]!
    15d4:	mov	x29, sp
    15d8:	stp	x19, x20, [sp, #16]
    15dc:	stp	x21, x22, [sp, #32]
    15e0:	stp	x23, x24, [sp, #48]
    15e4:	stp	x25, x26, [sp, #64]
    15e8:	stp	x27, x28, [sp, #80]
    15ec:	mov	x22, x0
    15f0:	str	x0, [x29, #160]
    15f4:	mov	x21, x1
    15f8:	mov	x23, x2
    15fc:	str	x3, [x29, #176]
    1600:	str	x4, [x29, #208]
    1604:	mov	x28, x5
    1608:	mov	w19, w7
    160c:	str	w7, [x29, #152]
    1610:	ands	w2, w6, #0xff
    1614:	str	w2, [x29, #220]
    1618:	mov	w1, #0x3                   	// #3
    161c:	mov	w0, #0x8                   	// #8
    1620:	csel	w0, w1, w0, eq  // eq = none
    1624:	str	w0, [x29, #156]
    1628:	cmp	w2, #0x0
    162c:	mov	w1, #0x7                   	// #7
    1630:	mov	w0, #0xff                  	// #255
    1634:	csel	w0, w1, w0, eq  // eq = none
    1638:	str	w0, [x29, #216]
    163c:	add	x0, x21, #0x2
    1640:	lsl	x0, x0, #5
    1644:	bl	0 <gomp_malloc>
    1648:	mov	x20, x0
    164c:	str	x21, [x0, #48]
    1650:	cmp	w19, #0x3
    1654:	cset	x0, ne  // ne = any
    1658:	str	x0, [x20]
    165c:	str	x22, [x20, #56]
    1660:	cbz	x21, 16e4 <gomp_map_vars+0x114>
    1664:	str	xzr, [x29, #256]
    1668:	mov	x0, #0xffffffffffffffff    	// #-1
    166c:	str	x0, [x29, #264]
    1670:	str	xzr, [x29, #272]
    1674:	str	xzr, [x29, #240]
    1678:	ldr	w1, [x29, #152]
    167c:	cmp	w1, #0x1
    1680:	cset	w0, eq  // eq = none
    1684:	str	w0, [x29, #104]
    1688:	cmp	w0, #0x0
    168c:	ccmp	x21, #0x1, #0x2, eq  // eq = none
    1690:	b.ls	1704 <gomp_map_vars+0x134>  // b.plast
    1694:	lsl	x0, x21, #4
    1698:	add	x0, x0, #0x10
    169c:	sub	sp, sp, x0
    16a0:	mov	x0, sp
    16a4:	str	x0, [x29, #256]
    16a8:	cmp	w1, #0x1
    16ac:	b.ne	16f0 <gomp_map_vars+0x120>  // b.any
    16b0:	lsl	x2, x21, #3
    16b4:	str	x2, [x29, #136]
    16b8:	mov	x1, #0x1                   	// #1
    16bc:	str	x1, [x29, #264]
    16c0:	cmp	x21, x1
    16c4:	cset	x1, hi  // hi = pmore
    16c8:	add	x1, x1, #0x1
    16cc:	str	x1, [x29, #272]
    16d0:	str	xzr, [x0]
    16d4:	str	x2, [x0, #8]
    16d8:	mov	x0, #0x20                  	// #32
    16dc:	str	x0, [x29, #184]
    16e0:	b	1710 <gomp_map_vars+0x140>
    16e4:	str	xzr, [x20, #16]
    16e8:	str	xzr, [x20, #24]
    16ec:	b	2984 <gomp_map_vars+0x13b4>
    16f0:	str	xzr, [x29, #264]
    16f4:	str	xzr, [x29, #136]
    16f8:	mov	x0, #0x8                   	// #8
    16fc:	str	x0, [x29, #184]
    1700:	b	1710 <gomp_map_vars+0x140>
    1704:	str	xzr, [x29, #136]
    1708:	mov	x0, #0x8                   	// #8
    170c:	str	x0, [x29, #184]
    1710:	ldr	x0, [x29, #160]
    1714:	add	x0, x0, #0xa8
    1718:	mov	x2, x0
    171c:	str	x0, [x29, #128]
    1720:	mov	w0, #0x1                   	// #1
    1724:	ldaxr	w1, [x2]
    1728:	cbnz	w1, 1734 <gomp_map_vars+0x164>
    172c:	stxr	w3, w0, [x2]
    1730:	cbnz	w3, 1724 <gomp_map_vars+0x154>
    1734:	cmp	w1, #0x0
    1738:	b.ne	1784 <gomp_map_vars+0x1b4>  // b.any
    173c:	ldr	x0, [x29, #160]
    1740:	ldr	w0, [x0, #172]
    1744:	cmp	w0, #0x2
    1748:	b.eq	1790 <gomp_map_vars+0x1c0>  // b.none
    174c:	ldr	x0, [x29, #160]
    1750:	add	x0, x0, #0xa0
    1754:	str	x0, [x29, #200]
    1758:	ldr	x0, [x29, #136]
    175c:	str	x0, [x29, #192]
    1760:	str	wzr, [x29, #144]
    1764:	str	xzr, [x29, #168]
    1768:	mov	x19, #0x0                   	// #0
    176c:	add	x0, x20, #0x40
    1770:	str	x0, [x29, #112]
    1774:	mov	x24, #0x5                   	// #5
    1778:	movk	x24, #0x4, lsl #16
    177c:	mov	x27, x21
    1780:	b	17dc <gomp_map_vars+0x20c>
    1784:	ldr	x0, [x29, #128]
    1788:	bl	0 <gomp_mutex_lock_slow>
    178c:	b	173c <gomp_map_vars+0x16c>
    1790:	ldr	x1, [x29, #128]
    1794:	ldxr	w0, [x1]
    1798:	stlxr	w2, wzr, [x1]
    179c:	cbnz	w2, 1794 <gomp_map_vars+0x1c4>
    17a0:	tbnz	w0, #31, 17b4 <gomp_map_vars+0x1e4>
    17a4:	mov	x0, x20
    17a8:	bl	0 <free>
    17ac:	mov	x20, #0x0                   	// #0
    17b0:	b	2984 <gomp_map_vars+0x13b4>
    17b4:	ldr	x0, [x29, #128]
    17b8:	bl	0 <gomp_mutex_unlock_slow>
    17bc:	b	17a4 <gomp_map_vars+0x1d4>
    17c0:	add	x0, x20, x19, lsl #5
    17c4:	str	xzr, [x0, #64]
    17c8:	mov	x1, #0xffffffffffffffff    	// #-1
    17cc:	str	x1, [x0, #80]
    17d0:	add	x19, x19, #0x1
    17d4:	cmp	x27, x19
    17d8:	b.ls	1fe8 <gomp_map_vars+0xa18>  // b.plast
    17dc:	mov	w2, w19
    17e0:	mov	x1, x28
    17e4:	ldrb	w0, [x29, #220]
    17e8:	bl	0 <get_kind>
    17ec:	mov	w21, w0
    17f0:	lsl	x25, x19, #3
    17f4:	ldr	x0, [x23, x19, lsl #3]
    17f8:	cbz	x0, 17c0 <gomp_map_vars+0x1f0>
    17fc:	ldr	w1, [x29, #216]
    1800:	and	w22, w1, w21
    1804:	cmp	w22, #0xd
    1808:	b.eq	17c0 <gomp_map_vars+0x1f0>  // b.none
    180c:	cmp	w22, #0xe
    1810:	b.eq	1880 <gomp_map_vars+0x2b0>  // b.none
    1814:	cmp	w22, #0x1c
    1818:	b.eq	1930 <gomp_map_vars+0x360>  // b.none
    181c:	cmp	w22, #0x1d
    1820:	b.eq	1b78 <gomp_map_vars+0x5a8>  // b.none
    1824:	str	x0, [x29, #280]
    1828:	cmp	w22, #0x4
    182c:	b.eq	1b94 <gomp_map_vars+0x5c4>  // b.none
    1830:	ldr	x1, [x29, #208]
    1834:	ldr	x2, [x1, x25]
    1838:	add	x1, x0, x2
    183c:	str	x1, [x29, #288]
    1840:	cmp	w22, #0xc
    1844:	b.eq	1c3c <gomp_map_vars+0x66c>  // b.none
    1848:	cmp	w22, #0xf
    184c:	b.ne	1b9c <gomp_map_vars+0x5cc>  // b.any
    1850:	cmp	x0, x1
    1854:	b.eq	1d50 <gomp_map_vars+0x780>  // b.none
    1858:	add	x1, x29, #0x118
    185c:	ldr	x0, [x29, #200]
    1860:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1864:	mov	x26, x0
    1868:	cbnz	x26, 1bb0 <gomp_map_vars+0x5e0>
    186c:	add	x0, x20, x19, lsl #5
    1870:	str	xzr, [x0, #64]
    1874:	mov	x1, #0xfffffffffffffffe    	// #-2
    1878:	str	x1, [x0, #80]
    187c:	b	17d0 <gomp_map_vars+0x200>
    1880:	str	x0, [x29, #280]
    1884:	add	x0, x0, #0x1
    1888:	str	x0, [x29, #288]
    188c:	add	x1, x29, #0x118
    1890:	ldr	x0, [x29, #200]
    1894:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1898:	ldr	x1, [x29, #288]
    189c:	sub	x1, x1, #0x1
    18a0:	str	x1, [x29, #288]
    18a4:	cbz	x0, 18e4 <gomp_map_vars+0x314>
    18a8:	ldr	x2, [x0]
    18ac:	ldr	x1, [x29, #280]
    18b0:	sub	x1, x1, x2
    18b4:	str	x1, [x29, #280]
    18b8:	ldr	x2, [x0, #16]
    18bc:	ldr	x2, [x2, #16]
    18c0:	add	x1, x1, x2
    18c4:	ldr	x0, [x0, #24]
    18c8:	add	x1, x1, x0
    18cc:	str	x1, [x23, x25]
    18d0:	add	x0, x20, x19, lsl #5
    18d4:	str	xzr, [x0, #64]
    18d8:	mov	x1, #0xffffffffffffffff    	// #-1
    18dc:	str	x1, [x0, #80]
    18e0:	b	17d0 <gomp_map_vars+0x200>
    18e4:	ldr	x0, [x29, #280]
    18e8:	sub	x0, x0, #0x1
    18ec:	str	x0, [x29, #280]
    18f0:	add	x1, x29, #0x118
    18f4:	ldr	x0, [x29, #200]
    18f8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    18fc:	ldr	x1, [x29, #280]
    1900:	add	x1, x1, #0x1
    1904:	str	x1, [x29, #280]
    1908:	cbnz	x0, 18a8 <gomp_map_vars+0x2d8>
    190c:	add	x1, x29, #0x118
    1910:	ldr	x0, [x29, #200]
    1914:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1918:	cbnz	x0, 18a8 <gomp_map_vars+0x2d8>
    191c:	ldr	x0, [x29, #128]
    1920:	bl	310 <gomp_mutex_unlock>
    1924:	adrp	x0, 0 <get_kind>
    1928:	add	x0, x0, #0x0
    192c:	bl	0 <gomp_fatal>
    1930:	add	x22, x19, #0x1
    1934:	ldr	x1, [x29, #208]
    1938:	ldr	x2, [x1, x25]
    193c:	str	x2, [x29, #120]
    1940:	add	x26, x2, x19
    1944:	str	x0, [x29, #280]
    1948:	ldr	x0, [x23, x26, lsl #3]
    194c:	ldr	x1, [x1, x26, lsl #3]
    1950:	add	x0, x0, x1
    1954:	str	x0, [x29, #288]
    1958:	add	x0, x20, x19, lsl #5
    195c:	str	xzr, [x0, #64]
    1960:	mov	x19, x0
    1964:	mov	x0, #0xfffffffffffffffd    	// #-3
    1968:	str	x0, [x19, #80]
    196c:	add	x1, x29, #0x118
    1970:	ldr	x0, [x29, #200]
    1974:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1978:	mov	x19, x0
    197c:	cbz	x0, 19c8 <gomp_map_vars+0x3f8>
    1980:	mov	x21, x22
    1984:	cmp	x22, x26
    1988:	b.hi	19c0 <gomp_map_vars+0x3f0>  // b.pmore
    198c:	ldr	x25, [x29, #208]
    1990:	mov	x7, #0x0                   	// #0
    1994:	mov	x6, x28
    1998:	mov	x5, x25
    199c:	mov	x4, x23
    19a0:	mov	x3, x21
    19a4:	mov	x2, x22
    19a8:	mov	x1, x19
    19ac:	mov	x0, x20
    19b0:	bl	1124 <gomp_map_fields_existing>
    19b4:	add	x21, x21, #0x1
    19b8:	cmp	x26, x21
    19bc:	b.cs	1990 <gomp_map_vars+0x3c0>  // b.hs, b.nlast
    19c0:	sub	x19, x21, #0x1
    19c4:	b	17d0 <gomp_map_vars+0x200>
    19c8:	ldrb	w0, [x29, #156]
    19cc:	asr	w21, w21, w0
    19d0:	mov	x0, #0x1                   	// #1
    19d4:	lsl	x0, x0, x21
    19d8:	ldr	x1, [x29, #184]
    19dc:	cmp	x1, x0
    19e0:	csel	x1, x1, x0, cs  // cs = hs, nlast
    19e4:	str	x1, [x29, #184]
    19e8:	ldr	x2, [x29, #280]
    19ec:	sub	x1, x2, #0x1
    19f0:	ldr	x3, [x29, #192]
    19f4:	add	x3, x3, x0
    19f8:	add	x1, x1, x3
    19fc:	add	x25, x23, x25
    1a00:	ldr	x3, [x25, #8]
    1a04:	sub	x1, x1, x3
    1a08:	neg	x0, x0
    1a0c:	and	x0, x0, x1
    1a10:	ldr	x1, [x29, #288]
    1a14:	sub	x1, x1, x2
    1a18:	add	x0, x1, x0
    1a1c:	str	x0, [x29, #192]
    1a20:	ldr	x0, [x29, #168]
    1a24:	ldr	x1, [x29, #120]
    1a28:	add	x0, x0, x1
    1a2c:	str	x0, [x29, #168]
    1a30:	cmp	x22, x26
    1a34:	b.hi	1b70 <gomp_map_vars+0x5a0>  // b.pmore
    1a38:	mov	x21, #0x7fff                	// #32767
    1a3c:	mov	x19, #0x1                   	// #1
    1a40:	mov	x25, #0xffffffffffffffff    	// #-1
    1a44:	str	x20, [x29, #120]
    1a48:	ldr	w20, [x29, #216]
    1a4c:	str	x27, [x29, #96]
    1a50:	ldr	x27, [x29, #112]
    1a54:	b	1b08 <gomp_map_vars+0x538>
    1a58:	cmp	w0, #0x80
    1a5c:	b.eq	1afc <gomp_map_vars+0x52c>  // b.none
    1a60:	ldr	x0, [x29, #208]
    1a64:	ldr	x2, [x0, x22, lsl #3]
    1a68:	sub	x0, x2, #0x1
    1a6c:	cmp	x0, x21
    1a70:	b.hi	1afc <gomp_map_vars+0x52c>  // b.pmore
    1a74:	ldr	x1, [x29, #288]
    1a78:	ldr	x0, [x29, #192]
    1a7c:	sub	x1, x0, x1
    1a80:	ldr	x0, [x23, x22, lsl #3]
    1a84:	add	x0, x0, x1
    1a88:	ldr	x1, [x29, #264]
    1a8c:	cbz	x1, 1ac8 <gomp_map_vars+0x4f8>
    1a90:	tbnz	x1, #63, 1afc <gomp_map_vars+0x52c>
    1a94:	lsl	x3, x1, #4
    1a98:	sub	x4, x3, #0x10
    1a9c:	ldr	x3, [x29, #256]
    1aa0:	add	x3, x3, x4
    1aa4:	ldr	x4, [x3, #8]
    1aa8:	cmp	x0, x4
    1aac:	b.cc	1b3c <gomp_map_vars+0x56c>  // b.lo, b.ul, b.last
    1ab0:	add	x4, x4, #0x1, lsl #12
    1ab4:	cmp	x0, x4
    1ab8:	b.cc	1b44 <gomp_map_vars+0x574>  // b.lo, b.ul, b.last
    1abc:	ldr	x3, [x29, #272]
    1ac0:	cmp	x3, #0x1
    1ac4:	b.eq	1b5c <gomp_map_vars+0x58c>  // b.none
    1ac8:	ldr	x1, [x29, #264]
    1acc:	lsl	x1, x1, #4
    1ad0:	ldr	x3, [x29, #256]
    1ad4:	str	x0, [x3, x1]
    1ad8:	ldr	x1, [x29, #264]
    1adc:	ldr	x3, [x29, #256]
    1ae0:	add	x1, x3, x1, lsl #4
    1ae4:	add	x0, x0, x2
    1ae8:	str	x0, [x1, #8]
    1aec:	ldr	x0, [x29, #264]
    1af0:	add	x0, x0, #0x1
    1af4:	str	x0, [x29, #264]
    1af8:	str	x19, [x29, #272]
    1afc:	add	x22, x22, #0x1
    1b00:	cmp	x26, x22
    1b04:	b.cc	1b68 <gomp_map_vars+0x598>  // b.lo, b.ul, b.last
    1b08:	lsl	x0, x22, #5
    1b0c:	str	xzr, [x27, x0]
    1b10:	mov	w2, w22
    1b14:	mov	x1, x28
    1b18:	ldrb	w0, [x29, #220]
    1b1c:	bl	0 <get_kind>
    1b20:	and	w0, w0, w20
    1b24:	cmp	w0, #0x12
    1b28:	b.gt	1a58 <gomp_map_vars+0x488>
    1b2c:	lsl	x0, x19, x0
    1b30:	tst	x0, x24
    1b34:	b.eq	1a60 <gomp_map_vars+0x490>  // b.none
    1b38:	b	1afc <gomp_map_vars+0x52c>
    1b3c:	str	x25, [x29, #264]
    1b40:	b	1afc <gomp_map_vars+0x52c>
    1b44:	add	x0, x0, x2
    1b48:	str	x0, [x3, #8]
    1b4c:	ldr	x0, [x29, #272]
    1b50:	add	x0, x0, #0x1
    1b54:	str	x0, [x29, #272]
    1b58:	b	1afc <gomp_map_vars+0x52c>
    1b5c:	sub	x1, x1, #0x1
    1b60:	str	x1, [x29, #264]
    1b64:	b	1ac8 <gomp_map_vars+0x4f8>
    1b68:	ldr	x20, [x29, #120]
    1b6c:	ldr	x27, [x29, #96]
    1b70:	sub	x19, x22, #0x1
    1b74:	b	17d0 <gomp_map_vars+0x200>
    1b78:	add	x0, x20, x19, lsl #5
    1b7c:	str	xzr, [x0, #64]
    1b80:	mov	x1, #0xfffffffffffffffe    	// #-2
    1b84:	str	x1, [x0, #80]
    1b88:	mov	w0, #0x1                   	// #1
    1b8c:	str	w0, [x29, #144]
    1b90:	b	17d0 <gomp_map_vars+0x200>
    1b94:	add	x0, x0, #0x8
    1b98:	str	x0, [x29, #288]
    1b9c:	add	x1, x29, #0x118
    1ba0:	ldr	x0, [x29, #200]
    1ba4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1ba8:	mov	x26, x0
    1bac:	cbz	x0, 1bbc <gomp_map_vars+0x5ec>
    1bb0:	ldr	x0, [x26, #32]
    1bb4:	cmn	x0, #0x2
    1bb8:	b.ne	1d78 <gomp_map_vars+0x7a8>  // b.any
    1bbc:	add	x0, x20, x19, lsl #5
    1bc0:	str	xzr, [x0, #64]
    1bc4:	ldrb	w0, [x29, #156]
    1bc8:	asr	w21, w21, w0
    1bcc:	mov	x0, #0x1                   	// #1
    1bd0:	lsl	x21, x0, x21
    1bd4:	ldr	x0, [x29, #168]
    1bd8:	add	x0, x0, #0x1
    1bdc:	str	x0, [x29, #168]
    1be0:	ldr	x0, [x29, #184]
    1be4:	cmp	x0, x21
    1be8:	csel	x0, x0, x21, cs  // cs = hs, nlast
    1bec:	str	x0, [x29, #184]
    1bf0:	ldr	x0, [x29, #192]
    1bf4:	sub	x1, x0, #0x1
    1bf8:	add	x1, x1, x21
    1bfc:	neg	x21, x21
    1c00:	and	x1, x21, x1
    1c04:	cmp	w22, #0x12
    1c08:	b.gt	1e70 <gomp_map_vars+0x8a0>
    1c0c:	mov	x0, #0x1                   	// #1
    1c10:	lsl	x0, x0, x22
    1c14:	tst	x0, x24
    1c18:	b.ne	1f0c <gomp_map_vars+0x93c>  // b.any
    1c1c:	ldr	x2, [x29, #288]
    1c20:	ldr	x0, [x29, #280]
    1c24:	sub	x0, x2, x0
    1c28:	sub	x3, x0, #0x1
    1c2c:	mov	x2, #0x7fff                	// #32767
    1c30:	cmp	x3, x2
    1c34:	b.ls	1e94 <gomp_map_vars+0x8c4>  // b.plast
    1c38:	b	1f0c <gomp_map_vars+0x93c>
    1c3c:	add	x0, x20, x19, lsl #5
    1c40:	str	xzr, [x0, #64]
    1c44:	ldrb	w0, [x29, #156]
    1c48:	asr	w21, w21, w0
    1c4c:	mov	x0, #0x1                   	// #1
    1c50:	lsl	x0, x0, x21
    1c54:	ldr	x1, [x29, #184]
    1c58:	cmp	x1, x0
    1c5c:	csel	x1, x1, x0, cs  // cs = hs, nlast
    1c60:	str	x1, [x29, #184]
    1c64:	ldr	x1, [x29, #192]
    1c68:	sub	x1, x1, #0x1
    1c6c:	add	x1, x1, x0
    1c70:	neg	x0, x0
    1c74:	and	x0, x0, x1
    1c78:	sub	x3, x2, #0x1
    1c7c:	mov	x1, #0x7fff                	// #32767
    1c80:	cmp	x3, x1
    1c84:	b.hi	1d00 <gomp_map_vars+0x730>  // b.pmore
    1c88:	ldr	x1, [x29, #264]
    1c8c:	cbz	x1, 1cc8 <gomp_map_vars+0x6f8>
    1c90:	tbnz	x1, #63, 1d00 <gomp_map_vars+0x730>
    1c94:	lsl	x3, x1, #4
    1c98:	sub	x4, x3, #0x10
    1c9c:	ldr	x3, [x29, #256]
    1ca0:	add	x3, x3, x4
    1ca4:	ldr	x4, [x3, #8]
    1ca8:	cmp	x0, x4
    1cac:	b.cc	1d20 <gomp_map_vars+0x750>  // b.lo, b.ul, b.last
    1cb0:	add	x4, x4, #0x1, lsl #12
    1cb4:	cmp	x0, x4
    1cb8:	b.cc	1d2c <gomp_map_vars+0x75c>  // b.lo, b.ul, b.last
    1cbc:	ldr	x3, [x29, #272]
    1cc0:	cmp	x3, #0x1
    1cc4:	b.eq	1d44 <gomp_map_vars+0x774>  // b.none
    1cc8:	ldr	x1, [x29, #264]
    1ccc:	lsl	x1, x1, #4
    1cd0:	ldr	x3, [x29, #256]
    1cd4:	str	x0, [x3, x1]
    1cd8:	ldr	x1, [x29, #264]
    1cdc:	ldr	x3, [x29, #256]
    1ce0:	add	x1, x3, x1, lsl #4
    1ce4:	add	x2, x2, x0
    1ce8:	str	x2, [x1, #8]
    1cec:	ldr	x1, [x29, #264]
    1cf0:	add	x1, x1, #0x1
    1cf4:	str	x1, [x29, #264]
    1cf8:	mov	x1, #0x1                   	// #1
    1cfc:	str	x1, [x29, #272]
    1d00:	ldr	x1, [x29, #288]
    1d04:	ldr	x2, [x29, #280]
    1d08:	sub	x1, x1, x2
    1d0c:	add	x0, x1, x0
    1d10:	str	x0, [x29, #192]
    1d14:	mov	w0, #0x1                   	// #1
    1d18:	str	w0, [x29, #144]
    1d1c:	b	17d0 <gomp_map_vars+0x200>
    1d20:	mov	x1, #0xffffffffffffffff    	// #-1
    1d24:	str	x1, [x29, #264]
    1d28:	b	1d00 <gomp_map_vars+0x730>
    1d2c:	add	x2, x2, x0
    1d30:	str	x2, [x3, #8]
    1d34:	ldr	x1, [x29, #272]
    1d38:	add	x1, x1, #0x1
    1d3c:	str	x1, [x29, #272]
    1d40:	b	1d00 <gomp_map_vars+0x730>
    1d44:	sub	x1, x1, #0x1
    1d48:	str	x1, [x29, #264]
    1d4c:	b	1cc8 <gomp_map_vars+0x6f8>
    1d50:	add	x1, x1, #0x1
    1d54:	str	x1, [x29, #288]
    1d58:	add	x1, x29, #0x118
    1d5c:	ldr	x0, [x29, #200]
    1d60:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1d64:	mov	x26, x0
    1d68:	ldr	x0, [x29, #288]
    1d6c:	sub	x0, x0, #0x1
    1d70:	str	x0, [x29, #288]
    1d74:	b	1868 <gomp_map_vars+0x298>
    1d78:	ldr	w0, [x29, #216]
    1d7c:	and	w21, w21, w0
    1d80:	sxtb	w0, w21
    1d84:	add	x4, x20, x19, lsl #5
    1d88:	str	x26, [x4, #64]
    1d8c:	and	w2, w21, #0xe
    1d90:	cmp	w2, #0x2
    1d94:	cset	w2, eq  // eq = none
    1d98:	strb	w2, [x4, #72]
    1d9c:	sub	w1, w21, #0x12
    1da0:	and	w1, w1, #0xff
    1da4:	cmp	w1, #0x1
    1da8:	cset	w1, ls  // ls = plast
    1dac:	strb	w1, [x4, #73]
    1db0:	ldr	x2, [x29, #280]
    1db4:	ldr	x1, [x26]
    1db8:	sub	x1, x2, x1
    1dbc:	str	x1, [x4, #80]
    1dc0:	ldr	x1, [x29, #288]
    1dc4:	sub	x3, x1, x2
    1dc8:	str	x3, [x4, #88]
    1dcc:	tbnz	w21, #7, 1e0c <gomp_map_vars+0x83c>
    1dd0:	ldr	x4, [x26]
    1dd4:	cmp	x2, x4
    1dd8:	b.cc	1e0c <gomp_map_vars+0x83c>  // b.lo, b.ul, b.last
    1ddc:	ldr	x5, [x26, #8]
    1de0:	cmp	x1, x5
    1de4:	b.hi	1e0c <gomp_map_vars+0x83c>  // b.pmore
    1de8:	and	w0, w0, #0xfffffffd
    1dec:	cmp	w0, #0x11
    1df0:	b.eq	1e48 <gomp_map_vars+0x878>  // b.none
    1df4:	ldr	x0, [x26, #32]
    1df8:	cmn	x0, #0x1
    1dfc:	b.eq	17d0 <gomp_map_vars+0x200>  // b.none
    1e00:	add	x0, x0, #0x1
    1e04:	str	x0, [x26, #32]
    1e08:	b	17d0 <gomp_map_vars+0x200>
    1e0c:	ldr	x1, [x29, #128]
    1e10:	ldxr	w0, [x1]
    1e14:	stlxr	w2, wzr, [x1]
    1e18:	cbnz	w2, 1e10 <gomp_map_vars+0x840>
    1e1c:	tbnz	w0, #31, 1e3c <gomp_map_vars+0x86c>
    1e20:	ldr	x4, [x26, #8]
    1e24:	ldr	x3, [x26]
    1e28:	ldr	x2, [x29, #288]
    1e2c:	ldr	x1, [x29, #280]
    1e30:	adrp	x0, 0 <get_kind>
    1e34:	add	x0, x0, #0x0
    1e38:	bl	0 <gomp_fatal>
    1e3c:	ldr	x0, [x29, #128]
    1e40:	bl	0 <gomp_mutex_unlock_slow>
    1e44:	b	1e20 <gomp_map_vars+0x850>
    1e48:	ldr	x0, [x26, #16]
    1e4c:	ldr	x1, [x0, #16]
    1e50:	sub	x1, x1, x4
    1e54:	ldr	x0, [x26, #24]
    1e58:	add	x0, x2, x0
    1e5c:	mov	x4, #0x0                   	// #0
    1e60:	add	x1, x1, x0
    1e64:	ldr	x0, [x29, #160]
    1e68:	bl	338 <gomp_copy_host2dev>
    1e6c:	b	1df4 <gomp_map_vars+0x824>
    1e70:	cmp	w22, #0x80
    1e74:	b.eq	2bf0 <gomp_map_vars+0x1620>  // b.none
    1e78:	ldr	x2, [x29, #288]
    1e7c:	ldr	x0, [x29, #280]
    1e80:	sub	x0, x2, x0
    1e84:	sub	x3, x0, #0x1
    1e88:	mov	x2, #0x7fff                	// #32767
    1e8c:	cmp	x3, x2
    1e90:	b.hi	2c08 <gomp_map_vars+0x1638>  // b.pmore
    1e94:	ldr	x2, [x29, #264]
    1e98:	cbz	x2, 1ed4 <gomp_map_vars+0x904>
    1e9c:	tbnz	x2, #63, 1f0c <gomp_map_vars+0x93c>
    1ea0:	lsl	x3, x2, #4
    1ea4:	sub	x4, x3, #0x10
    1ea8:	ldr	x3, [x29, #256]
    1eac:	add	x3, x3, x4
    1eb0:	ldr	x4, [x3, #8]
    1eb4:	cmp	x1, x4
    1eb8:	b.cc	1f44 <gomp_map_vars+0x974>  // b.lo, b.ul, b.last
    1ebc:	add	x4, x4, #0x1, lsl #12
    1ec0:	cmp	x1, x4
    1ec4:	b.cc	1f50 <gomp_map_vars+0x980>  // b.lo, b.ul, b.last
    1ec8:	ldr	x3, [x29, #272]
    1ecc:	cmp	x3, #0x1
    1ed0:	b.eq	1f68 <gomp_map_vars+0x998>  // b.none
    1ed4:	ldr	x2, [x29, #264]
    1ed8:	lsl	x2, x2, #4
    1edc:	ldr	x3, [x29, #256]
    1ee0:	str	x1, [x3, x2]
    1ee4:	ldr	x2, [x29, #264]
    1ee8:	ldr	x3, [x29, #256]
    1eec:	add	x2, x3, x2, lsl #4
    1ef0:	add	x0, x1, x0
    1ef4:	str	x0, [x2, #8]
    1ef8:	ldr	x0, [x29, #264]
    1efc:	add	x0, x0, #0x1
    1f00:	str	x0, [x29, #264]
    1f04:	mov	x0, #0x1                   	// #1
    1f08:	str	x0, [x29, #272]
    1f0c:	ldr	x25, [x29, #288]
    1f10:	ldr	x21, [x29, #280]
    1f14:	sub	x0, x25, x21
    1f18:	add	x0, x0, x1
    1f1c:	str	x0, [x29, #192]
    1f20:	cmp	w22, #0x5
    1f24:	b.ne	17d0 <gomp_map_vars+0x200>  // b.any
    1f28:	add	x22, x19, #0x1
    1f2c:	cmp	x27, x22
    1f30:	b.ls	1fe8 <gomp_map_vars+0xa18>  // b.plast
    1f34:	str	x20, [x29, #120]
    1f38:	ldr	w20, [x29, #216]
    1f3c:	ldr	x26, [x29, #112]
    1f40:	b	1f78 <gomp_map_vars+0x9a8>
    1f44:	mov	x0, #0xffffffffffffffff    	// #-1
    1f48:	str	x0, [x29, #264]
    1f4c:	b	1f0c <gomp_map_vars+0x93c>
    1f50:	add	x0, x1, x0
    1f54:	str	x0, [x3, #8]
    1f58:	ldr	x0, [x29, #272]
    1f5c:	add	x0, x0, #0x1
    1f60:	str	x0, [x29, #272]
    1f64:	b	1f0c <gomp_map_vars+0x93c>
    1f68:	sub	x2, x2, #0x1
    1f6c:	str	x2, [x29, #264]
    1f70:	b	1ed4 <gomp_map_vars+0x904>
    1f74:	mov	x22, x0
    1f78:	sub	x19, x22, #0x1
    1f7c:	mov	w2, w22
    1f80:	mov	x1, x28
    1f84:	ldrb	w0, [x29, #220]
    1f88:	bl	0 <get_kind>
    1f8c:	and	w0, w0, w20
    1f90:	cmp	w0, #0x4
    1f94:	b.ne	1fd0 <gomp_map_vars+0xa00>  // b.any
    1f98:	ldr	x0, [x23, x22, lsl #3]
    1f9c:	cmp	x21, x0
    1fa0:	b.hi	1fd8 <gomp_map_vars+0xa08>  // b.pmore
    1fa4:	add	x0, x0, #0x8
    1fa8:	cmp	x25, x0
    1fac:	b.cc	1fe0 <gomp_map_vars+0xa10>  // b.lo, b.ul, b.last
    1fb0:	lsl	x0, x22, #5
    1fb4:	str	xzr, [x26, x0]
    1fb8:	add	x0, x22, #0x1
    1fbc:	cmp	x27, x0
    1fc0:	b.hi	1f74 <gomp_map_vars+0x9a4>  // b.pmore
    1fc4:	ldr	x20, [x29, #120]
    1fc8:	mov	x19, x22
    1fcc:	b	17d0 <gomp_map_vars+0x200>
    1fd0:	ldr	x20, [x29, #120]
    1fd4:	b	17d0 <gomp_map_vars+0x200>
    1fd8:	ldr	x20, [x29, #120]
    1fdc:	b	17d0 <gomp_map_vars+0x200>
    1fe0:	ldr	x20, [x29, #120]
    1fe4:	b	17d0 <gomp_map_vars+0x200>
    1fe8:	mov	x21, x27
    1fec:	ldr	x0, [x29, #176]
    1ff0:	cbz	x0, 2080 <gomp_map_vars+0xab0>
    1ff4:	cmp	x27, #0x1
    1ff8:	b.ne	206c <gomp_map_vars+0xa9c>  // b.any
    1ffc:	ldr	x0, [x29, #176]
    2000:	ldr	x1, [x0]
    2004:	str	x1, [x20, #32]
    2008:	str	x1, [x20, #16]
    200c:	ldr	x0, [x29, #208]
    2010:	ldr	x0, [x0]
    2014:	add	x0, x0, x1
    2018:	str	x0, [x20, #24]
    201c:	str	xzr, [x29, #176]
    2020:	str	xzr, [x20, #8]
    2024:	ldr	x0, [x29, #168]
    2028:	cmp	x0, #0x0
    202c:	ldr	w1, [x29, #144]
    2030:	ccmp	w1, #0x0, #0x0, eq  // eq = none
    2034:	b.eq	28e4 <gomp_map_vars+0x1314>  // b.none
    2038:	cbnz	x0, 216c <gomp_map_vars+0xb9c>
    203c:	ldr	x26, [x20, #8]
    2040:	str	xzr, [x29, #96]
    2044:	mov	x0, #0xffffffffffffffff    	// #-1
    2048:	str	x0, [x29, #120]
    204c:	str	xzr, [x29, #104]
    2050:	mov	x19, #0x0                   	// #0
    2054:	add	x0, x29, #0x130
    2058:	str	x0, [x29, #112]
    205c:	ldr	x25, [x29, #136]
    2060:	str	x28, [x29, #184]
    2064:	mov	x28, x23
    2068:	b	22e0 <gomp_map_vars+0xd10>
    206c:	ldr	x0, [x29, #128]
    2070:	bl	310 <gomp_mutex_unlock>
    2074:	adrp	x0, 0 <get_kind>
    2078:	add	x0, x0, #0x0
    207c:	bl	0 <gomp_fatal>
    2080:	ldr	x0, [x29, #168]
    2084:	cmp	x0, #0x0
    2088:	ldr	w0, [x29, #104]
    208c:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    2090:	b.eq	2150 <gomp_map_vars+0xb80>  // b.none
    2094:	ldr	x0, [x29, #192]
    2098:	ldr	x1, [x29, #184]
    209c:	add	x1, x0, x1
    20a0:	ldr	x0, [x29, #160]
    20a4:	ldr	x2, [x0, #96]
    20a8:	sub	x1, x1, #0x1
    20ac:	ldr	w0, [x0, #12]
    20b0:	blr	x2
    20b4:	str	x0, [x20, #32]
    20b8:	cbz	x0, 212c <gomp_map_vars+0xb5c>
    20bc:	ldr	x2, [x29, #184]
    20c0:	sub	x1, x2, #0x1
    20c4:	add	x1, x0, x1
    20c8:	neg	x0, x2
    20cc:	and	x0, x1, x0
    20d0:	str	x0, [x20, #16]
    20d4:	ldr	x1, [x29, #192]
    20d8:	add	x0, x0, x1
    20dc:	str	x0, [x20, #24]
    20e0:	ldr	x0, [x29, #272]
    20e4:	cmp	x0, #0x1
    20e8:	b.eq	2140 <gomp_map_vars+0xb70>  // b.none
    20ec:	ldr	x0, [x29, #264]
    20f0:	cmp	x0, #0x0
    20f4:	b.le	2020 <gomp_map_vars+0xa50>
    20f8:	ldr	x1, [x29, #256]
    20fc:	add	x0, x1, x0, lsl #4
    2100:	ldur	x2, [x0, #-8]
    2104:	ldr	x0, [x1]
    2108:	sub	x0, x2, x0
    210c:	bl	0 <malloc>
    2110:	str	x0, [x29, #176]
    2114:	str	x0, [x29, #240]
    2118:	cbz	x0, 2020 <gomp_map_vars+0xa50>
    211c:	str	x20, [x29, #248]
    2120:	add	x0, x29, #0xf0
    2124:	str	x0, [x29, #176]
    2128:	b	2020 <gomp_map_vars+0xa50>
    212c:	ldr	x0, [x29, #128]
    2130:	bl	310 <gomp_mutex_unlock>
    2134:	adrp	x0, 0 <get_kind>
    2138:	add	x0, x0, #0x0
    213c:	bl	0 <gomp_fatal>
    2140:	ldr	x0, [x29, #264]
    2144:	sub	x0, x0, #0x1
    2148:	str	x0, [x29, #264]
    214c:	b	20ec <gomp_map_vars+0xb1c>
    2150:	str	xzr, [x20, #32]
    2154:	str	xzr, [x20, #16]
    2158:	str	xzr, [x20, #24]
    215c:	str	xzr, [x20, #8]
    2160:	ldr	w0, [x29, #144]
    2164:	cbnz	w0, 203c <gomp_map_vars+0xa6c>
    2168:	b	2964 <gomp_map_vars+0x1394>
    216c:	add	x0, x0, x0, lsl #3
    2170:	lsl	x0, x0, #3
    2174:	bl	0 <gomp_malloc>
    2178:	str	x0, [x20, #8]
    217c:	b	203c <gomp_map_vars+0xa6c>
    2180:	cmp	w23, #0x1d
    2184:	b.ne	2ab4 <gomp_map_vars+0x14e4>  // b.any
    2188:	str	x2, [x29, #280]
    218c:	add	x2, x2, #0x8
    2190:	str	x2, [x29, #288]
    2194:	add	x1, x29, #0x118
    2198:	ldr	x0, [x29, #200]
    219c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    21a0:	mov	x23, x0
    21a4:	cbz	x0, 2464 <gomp_map_vars+0xe94>
    21a8:	ldr	x24, [x29, #280]
    21ac:	ldr	x0, [x0]
    21b0:	cmp	x0, x24
    21b4:	b.hi	2464 <gomp_map_vars+0xe94>  // b.pmore
    21b8:	ldr	x1, [x23, #8]
    21bc:	ldr	x0, [x29, #288]
    21c0:	cmp	x1, x0
    21c4:	b.cc	2464 <gomp_map_vars+0xe94>  // b.lo, b.ul, b.last
    21c8:	sub	w2, w19, #0x1
    21cc:	ldr	x1, [x29, #184]
    21d0:	ldrb	w0, [x29, #220]
    21d4:	bl	0 <get_kind>
    21d8:	ldr	w1, [x29, #216]
    21dc:	and	w0, w0, w1
    21e0:	cmp	w0, #0x1d
    21e4:	b.eq	2214 <gomp_map_vars+0xc44>  // b.none
    21e8:	sub	x1, x19, #0x1
    21ec:	ldr	x2, [x22, #32]
    21f0:	cbz	x2, 2478 <gomp_map_vars+0xea8>
    21f4:	add	x1, x20, x1, lsl #5
    21f8:	ldr	x0, [x2, #24]
    21fc:	ldr	x1, [x1, #80]
    2200:	add	x0, x0, x1
    2204:	ldr	x1, [x2, #16]
    2208:	ldr	x1, [x1, #16]
    220c:	add	x0, x0, x1
    2210:	str	x0, [x29, #304]
    2214:	ldr	x0, [x29, #304]
    2218:	cbz	x0, 2230 <gomp_map_vars+0xc60>
    221c:	ldr	x1, [x29, #208]
    2220:	ldr	x2, [x29, #192]
    2224:	ldr	x1, [x1, x2]
    2228:	sub	x0, x0, x1
    222c:	str	x0, [x29, #304]
    2230:	ldr	x0, [x23, #16]
    2234:	ldr	x1, [x0, #16]
    2238:	ldr	x0, [x23]
    223c:	sub	x1, x1, x0
    2240:	ldr	x0, [x23, #24]
    2244:	add	x24, x24, x0
    2248:	ldr	x4, [x29, #176]
    224c:	mov	x3, #0x8                   	// #8
    2250:	ldr	x2, [x29, #112]
    2254:	add	x1, x1, x24
    2258:	ldr	x0, [x29, #160]
    225c:	bl	338 <gomp_copy_host2dev>
    2260:	ldr	x0, [x23, #16]
    2264:	ldr	x0, [x0, #16]
    2268:	ldr	x1, [x23]
    226c:	sub	x0, x0, x1
    2270:	ldr	x1, [x23, #24]
    2274:	ldr	x2, [x29, #280]
    2278:	add	x1, x1, x2
    227c:	add	x0, x0, x1
    2280:	str	x0, [x29, #304]
    2284:	b	22d4 <gomp_map_vars+0xd04>
    2288:	ldrb	w0, [x29, #156]
    228c:	asr	w24, w24, w0
    2290:	mov	x0, #0x1                   	// #1
    2294:	lsl	x24, x0, x24
    2298:	add	x25, x24, x27
    229c:	neg	x24, x24
    22a0:	and	x25, x25, x24
    22a4:	add	x0, x20, x19, lsl #5
    22a8:	str	x25, [x0, #80]
    22ac:	ldr	x0, [x29, #208]
    22b0:	ldr	x1, [x29, #192]
    22b4:	ldr	x22, [x0, x1]
    22b8:	ldr	x1, [x20, #16]
    22bc:	ldr	x4, [x29, #176]
    22c0:	mov	x3, x22
    22c4:	add	x1, x25, x1
    22c8:	ldr	x0, [x29, #160]
    22cc:	bl	338 <gomp_copy_host2dev>
    22d0:	add	x25, x25, x22
    22d4:	add	x19, x19, #0x1
    22d8:	cmp	x21, x19
    22dc:	b.ls	28e0 <gomp_map_vars+0x1310>  // b.plast
    22e0:	sub	x27, x25, #0x1
    22e4:	add	x22, x20, x19, lsl #5
    22e8:	ldr	x0, [x22, #64]
    22ec:	cbnz	x0, 22d4 <gomp_map_vars+0xd04>
    22f0:	mov	w2, w19
    22f4:	ldr	x1, [x29, #184]
    22f8:	ldrb	w0, [x29, #220]
    22fc:	bl	0 <get_kind>
    2300:	mov	w24, w0
    2304:	lsl	x0, x19, #3
    2308:	str	x0, [x29, #192]
    230c:	ldr	x2, [x28, x19, lsl #3]
    2310:	cbz	x2, 22d4 <gomp_map_vars+0xd04>
    2314:	ldr	w0, [x29, #216]
    2318:	and	w23, w0, w24
    231c:	cmp	w23, #0x1c
    2320:	b.eq	235c <gomp_map_vars+0xd8c>  // b.none
    2324:	cmp	w23, #0x1c
    2328:	b.gt	2180 <gomp_map_vars+0xbb0>
    232c:	cmp	w23, #0xc
    2330:	b.eq	2288 <gomp_map_vars+0xcb8>  // b.none
    2334:	sub	w0, w23, #0xd
    2338:	cmp	w0, #0x2
    233c:	b.ls	22d4 <gomp_map_vars+0xd04>  // b.plast
    2340:	str	x26, [x29, #168]
    2344:	mov	x0, x2
    2348:	str	x2, [x26]
    234c:	add	x2, x2, #0x8
    2350:	cmp	w23, #0x4
    2354:	b.eq	2ad0 <gomp_map_vars+0x1500>  // b.none
    2358:	b	2ac0 <gomp_map_vars+0x14f0>
    235c:	add	x0, x19, #0x1
    2360:	str	x0, [x29, #168]
    2364:	ldr	x1, [x29, #208]
    2368:	ldr	x0, [x29, #192]
    236c:	ldr	x23, [x1, x0]
    2370:	add	x23, x19, x23
    2374:	str	x2, [x29, #280]
    2378:	ldr	x0, [x28, x23, lsl #3]
    237c:	ldr	x1, [x1, x23, lsl #3]
    2380:	add	x0, x0, x1
    2384:	str	x0, [x29, #288]
    2388:	ldr	x0, [x22, #96]
    238c:	cbnz	x0, 22d4 <gomp_map_vars+0xd04>
    2390:	add	x1, x29, #0x118
    2394:	ldr	x0, [x29, #200]
    2398:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    239c:	mov	x22, x0
    23a0:	cbnz	x0, 23fc <gomp_map_vars+0xe2c>
    23a4:	ldrb	w0, [x29, #156]
    23a8:	asr	w1, w24, w0
    23ac:	mov	x0, #0x1                   	// #1
    23b0:	lsl	x1, x0, x1
    23b4:	ldr	x0, [x29, #192]
    23b8:	ldr	x2, [x28, x0]
    23bc:	add	x0, x28, x0
    23c0:	ldr	x3, [x0, #8]
    23c4:	str	x3, [x29, #96]
    23c8:	sub	x0, x2, x3
    23cc:	add	x0, x0, x27
    23d0:	add	x0, x0, x1
    23d4:	neg	x1, x1
    23d8:	and	x0, x0, x1
    23dc:	sub	x2, x3, x2
    23e0:	add	x0, x2, x0
    23e4:	str	x0, [x29, #104]
    23e8:	ldr	x25, [x29, #288]
    23ec:	sub	x25, x25, x3
    23f0:	add	x25, x25, x0
    23f4:	str	x23, [x29, #120]
    23f8:	b	22d4 <gomp_map_vars+0xd04>
    23fc:	ldr	x0, [x29, #168]
    2400:	mov	x19, x0
    2404:	cmp	x0, x23
    2408:	b.hi	245c <gomp_map_vars+0xe8c>  // b.pmore
    240c:	str	x25, [x29, #192]
    2410:	ldr	x24, [x29, #168]
    2414:	str	x21, [x29, #168]
    2418:	ldr	x21, [x29, #176]
    241c:	ldr	x25, [x29, #208]
    2420:	ldr	x27, [x29, #184]
    2424:	mov	x7, x21
    2428:	mov	x6, x27
    242c:	mov	x5, x25
    2430:	mov	x4, x28
    2434:	mov	x3, x19
    2438:	mov	x2, x24
    243c:	mov	x1, x22
    2440:	mov	x0, x20
    2444:	bl	1124 <gomp_map_fields_existing>
    2448:	add	x19, x19, #0x1
    244c:	cmp	x23, x19
    2450:	b.cs	2424 <gomp_map_vars+0xe54>  // b.hs, b.nlast
    2454:	ldr	x25, [x29, #192]
    2458:	ldr	x21, [x29, #168]
    245c:	sub	x19, x19, #0x1
    2460:	b	22d4 <gomp_map_vars+0xd04>
    2464:	ldr	x0, [x29, #128]
    2468:	bl	310 <gomp_mutex_unlock>
    246c:	adrp	x0, 0 <get_kind>
    2470:	add	x0, x0, #0x0
    2474:	bl	0 <gomp_fatal>
    2478:	add	x0, x20, x1, lsl #5
    247c:	ldr	x2, [x0, #80]
    2480:	cmn	x2, #0x1
    2484:	b.eq	24a8 <gomp_map_vars+0xed8>  // b.none
    2488:	mov	x0, #0x0                   	// #0
    248c:	cmn	x2, #0x2
    2490:	b.eq	2210 <gomp_map_vars+0xc40>  // b.none
    2494:	cmn	x2, #0x3
    2498:	b.eq	24b0 <gomp_map_vars+0xee0>  // b.none
    249c:	ldr	x0, [x20, #16]
    24a0:	add	x0, x2, x0
    24a4:	b	2210 <gomp_map_vars+0xc40>
    24a8:	ldr	x0, [x28, x1, lsl #3]
    24ac:	b	2210 <gomp_map_vars+0xc40>
    24b0:	ldr	x3, [x22, #64]
    24b4:	ldr	x0, [x28, x1, lsl #3]
    24b8:	ldr	x1, [x29, #192]
    24bc:	ldr	x1, [x28, x1]
    24c0:	sub	x0, x0, x1
    24c4:	add	x2, x20, x19, lsl #5
    24c8:	ldr	x1, [x3, #24]
    24cc:	ldr	x2, [x2, #80]
    24d0:	add	x1, x1, x2
    24d4:	add	x0, x0, x1
    24d8:	ldr	x1, [x3, #16]
    24dc:	ldr	x1, [x1, #16]
    24e0:	add	x0, x0, x1
    24e4:	b	2210 <gomp_map_vars+0xc40>
    24e8:	ldr	w0, [x29, #216]
    24ec:	and	w24, w24, w0
    24f0:	sxtb	w1, w24
    24f4:	str	x3, [x22, #64]
    24f8:	and	w2, w24, #0xe
    24fc:	cmp	w2, #0x2
    2500:	cset	w2, eq  // eq = none
    2504:	strb	w2, [x22, #72]
    2508:	sub	w0, w24, #0x12
    250c:	and	w0, w0, #0xff
    2510:	cmp	w0, #0x1
    2514:	cset	w0, ls  // ls = plast
    2518:	strb	w0, [x22, #73]
    251c:	add	x2, x20, x19, lsl #5
    2520:	ldr	x0, [x26]
    2524:	ldr	x3, [x3]
    2528:	sub	x0, x0, x3
    252c:	str	x0, [x2, #80]
    2530:	ldr	x0, [x26, #8]
    2534:	ldr	x3, [x26]
    2538:	sub	x0, x0, x3
    253c:	str	x0, [x2, #88]
    2540:	tbnz	w24, #7, 2590 <gomp_map_vars+0xfc0>
    2544:	mov	x0, x4
    2548:	ldr	x4, [x4]
    254c:	ldr	x2, [x26]
    2550:	cmp	x4, x2
    2554:	b.hi	2590 <gomp_map_vars+0xfc0>  // b.pmore
    2558:	ldr	x3, [x26, #8]
    255c:	ldr	x0, [x0, #8]
    2560:	cmp	x0, x3
    2564:	b.cc	2590 <gomp_map_vars+0xfc0>  // b.lo, b.ul, b.last
    2568:	and	w0, w1, #0xfffffffd
    256c:	cmp	w0, #0x11
    2570:	b.eq	25b8 <gomp_map_vars+0xfe8>  // b.none
    2574:	ldr	x1, [x29, #144]
    2578:	ldr	x0, [x1, #32]
    257c:	cmn	x0, #0x1
    2580:	b.eq	22d4 <gomp_map_vars+0xd04>  // b.none
    2584:	add	x0, x0, #0x1
    2588:	str	x0, [x1, #32]
    258c:	b	22d4 <gomp_map_vars+0xd04>
    2590:	ldr	x0, [x29, #128]
    2594:	bl	310 <gomp_mutex_unlock>
    2598:	ldr	x0, [x29, #144]
    259c:	ldr	x4, [x0, #8]
    25a0:	ldr	x3, [x0]
    25a4:	ldr	x2, [x26, #8]
    25a8:	ldr	x1, [x26]
    25ac:	adrp	x0, 0 <get_kind>
    25b0:	add	x0, x0, #0x0
    25b4:	bl	0 <gomp_fatal>
    25b8:	ldr	x5, [x29, #144]
    25bc:	ldr	x0, [x5, #16]
    25c0:	ldr	x1, [x0, #16]
    25c4:	sub	x1, x1, x4
    25c8:	ldr	x0, [x5, #24]
    25cc:	add	x0, x2, x0
    25d0:	ldr	x4, [x29, #176]
    25d4:	sub	x3, x3, x2
    25d8:	add	x1, x1, x0
    25dc:	ldr	x0, [x29, #160]
    25e0:	bl	338 <gomp_copy_host2dev>
    25e4:	b	2574 <gomp_map_vars+0xfa4>
    25e8:	ldr	x1, [x29, #144]
    25ec:	ldr	x0, [x29, #200]
    25f0:	bl	0 <splay_tree_prefix_splay_tree_remove>
    25f4:	ldr	x0, [x29, #144]
    25f8:	str	x0, [x26, #48]
    25fc:	b	2b10 <gomp_map_vars+0x1540>
    2600:	ldrb	w0, [x29, #156]
    2604:	asr	w0, w24, w0
    2608:	mov	x1, #0x1                   	// #1
    260c:	lsl	x0, x1, x0
    2610:	add	x25, x0, x27
    2614:	neg	x0, x0
    2618:	and	x0, x25, x0
    261c:	str	x0, [x26, #24]
    2620:	ldr	x25, [x26, #8]
    2624:	ldr	x1, [x26]
    2628:	sub	x25, x25, x1
    262c:	add	x25, x25, x0
    2630:	b	2b4c <gomp_map_vars+0x157c>
    2634:	cmp	w23, #0x4
    2638:	b.ne	2664 <gomp_map_vars+0x1094>  // b.any
    263c:	ldr	x0, [x26]
    2640:	ldr	x4, [x29, #176]
    2644:	ldr	x1, [x29, #208]
    2648:	ldr	x2, [x29, #192]
    264c:	ldr	x3, [x1, x2]
    2650:	ldr	x2, [x26, #24]
    2654:	ldr	x1, [x0]
    2658:	mov	x0, x20
    265c:	bl	77c <gomp_map_pointer>
    2660:	b	268c <gomp_map_vars+0x10bc>
    2664:	cmp	w23, #0x5
    2668:	b.eq	28a0 <gomp_map_vars+0x12d0>  // b.none
    266c:	cmp	w23, #0x2
    2670:	b.eq	268c <gomp_map_vars+0x10bc>  // b.none
    2674:	b.le	2688 <gomp_map_vars+0x10b8>
    2678:	cmp	w23, #0x3
    267c:	b.eq	26d0 <gomp_map_vars+0x1100>  // b.none
    2680:	mov	w19, w24
    2684:	b	28a4 <gomp_map_vars+0x12d4>
    2688:	cbnz	w23, 26c8 <gomp_map_vars+0x10f8>
    268c:	ldr	x0, [x26, #48]
    2690:	cbz	x0, 26c0 <gomp_map_vars+0x10f0>
    2694:	ldr	x0, [x20, #16]
    2698:	ldr	x1, [x26, #24]
    269c:	add	x0, x0, x1
    26a0:	str	x0, [x29, #232]
    26a4:	mov	x4, #0x0                   	// #0
    26a8:	mov	x3, #0x8                   	// #8
    26ac:	add	x2, x29, #0xe8
    26b0:	ldr	x0, [x29, #144]
    26b4:	ldr	x1, [x0, #24]
    26b8:	ldr	x0, [x29, #160]
    26bc:	bl	338 <gomp_copy_host2dev>
    26c0:	add	x26, x26, #0x48
    26c4:	b	22d4 <gomp_map_vars+0xd04>
    26c8:	cmp	w23, #0x1
    26cc:	b.ne	26f8 <gomp_map_vars+0x1128>  // b.any
    26d0:	ldr	x2, [x26]
    26d4:	ldr	x3, [x26, #8]
    26d8:	ldr	x1, [x20, #16]
    26dc:	ldr	x0, [x26, #24]
    26e0:	ldr	x4, [x29, #176]
    26e4:	sub	x3, x3, x2
    26e8:	add	x1, x1, x0
    26ec:	ldr	x0, [x29, #160]
    26f0:	bl	338 <gomp_copy_host2dev>
    26f4:	b	268c <gomp_map_vars+0x10bc>
    26f8:	mov	w19, w24
    26fc:	b	28a4 <gomp_map_vars+0x12d4>
    2700:	cmp	w23, #0x6
    2704:	b.eq	2854 <gomp_map_vars+0x1284>  // b.none
    2708:	cmp	w23, #0x8
    270c:	b.ne	2744 <gomp_map_vars+0x1174>  // b.any
    2710:	ldr	x2, [x26]
    2714:	ldr	x0, [x26, #8]
    2718:	sub	x0, x0, x2
    271c:	cmp	x0, #0x8
    2720:	b.ne	2880 <gomp_map_vars+0x12b0>  // b.any
    2724:	ldr	x1, [x20, #16]
    2728:	ldr	x0, [x26, #24]
    272c:	ldr	x4, [x29, #176]
    2730:	mov	x3, #0x8                   	// #8
    2734:	add	x1, x1, x0
    2738:	ldr	x0, [x29, #160]
    273c:	bl	338 <gomp_copy_host2dev>
    2740:	b	268c <gomp_map_vars+0x10bc>
    2744:	mov	w19, w24
    2748:	b	28a4 <gomp_map_vars+0x12d4>
    274c:	cmp	w23, #0x12
    2750:	b.eq	268c <gomp_map_vars+0x10bc>  // b.none
    2754:	cmp	w23, #0x13
    2758:	b.eq	26d0 <gomp_map_vars+0x1100>  // b.none
    275c:	mov	w19, w24
    2760:	b	28a4 <gomp_map_vars+0x12d4>
    2764:	ldr	x2, [x26]
    2768:	ldr	x3, [x26, #8]
    276c:	ldr	x1, [x20, #16]
    2770:	ldr	x0, [x26, #24]
    2774:	ldr	x4, [x29, #176]
    2778:	sub	x3, x3, x2
    277c:	add	x1, x1, x0
    2780:	ldr	x0, [x29, #160]
    2784:	bl	338 <gomp_copy_host2dev>
    2788:	add	x23, x19, #0x1
    278c:	cmp	x21, x23
    2790:	b.ls	268c <gomp_map_vars+0x10bc>  // b.plast
    2794:	str	x25, [x29, #192]
    2798:	ldr	w24, [x29, #216]
    279c:	ldr	x25, [x29, #168]
    27a0:	ldr	x27, [x29, #208]
    27a4:	b	27e4 <gomp_map_vars+0x1214>
    27a8:	ldr	x0, [x28, x23, lsl #3]
    27ac:	ldr	x2, [x26, #24]
    27b0:	ldr	x1, [x26]
    27b4:	sub	x2, x2, x1
    27b8:	ldr	x4, [x29, #176]
    27bc:	ldr	x3, [x27, x23, lsl #3]
    27c0:	add	x2, x0, x2
    27c4:	ldr	x1, [x0]
    27c8:	mov	x0, x20
    27cc:	bl	77c <gomp_map_pointer>
    27d0:	add	x0, x23, #0x1
    27d4:	add	x22, x22, #0x20
    27d8:	cmp	x21, x0
    27dc:	b.ls	2848 <gomp_map_vars+0x1278>  // b.plast
    27e0:	mov	x23, x0
    27e4:	sub	x19, x23, #0x1
    27e8:	mov	w2, w23
    27ec:	ldr	x1, [x29, #184]
    27f0:	ldrb	w0, [x29, #220]
    27f4:	bl	0 <get_kind>
    27f8:	and	w0, w0, w24
    27fc:	cmp	w0, #0x4
    2800:	b.ne	28c8 <gomp_map_vars+0x12f8>  // b.any
    2804:	ldr	x0, [x28, x23, lsl #3]
    2808:	ldr	x1, [x26]
    280c:	cmp	x0, x1
    2810:	b.cc	28d0 <gomp_map_vars+0x1300>  // b.lo, b.ul, b.last
    2814:	add	x0, x0, #0x8
    2818:	ldr	x1, [x26, #8]
    281c:	cmp	x0, x1
    2820:	b.hi	28d8 <gomp_map_vars+0x1308>  // b.pmore
    2824:	str	x25, [x22, #96]
    2828:	strb	wzr, [x22, #104]
    282c:	strb	wzr, [x22, #105]
    2830:	ldr	x0, [x26, #32]
    2834:	cmn	x0, #0x1
    2838:	b.eq	27a8 <gomp_map_vars+0x11d8>  // b.none
    283c:	add	x0, x0, #0x1
    2840:	str	x0, [x26, #32]
    2844:	b	27a8 <gomp_map_vars+0x11d8>
    2848:	ldr	x25, [x29, #192]
    284c:	mov	x19, x23
    2850:	b	268c <gomp_map_vars+0x10bc>
    2854:	ldr	x19, [x26, #8]
    2858:	ldr	x0, [x26]
    285c:	sub	x19, x19, x0
    2860:	ldr	x0, [x29, #128]
    2864:	bl	310 <gomp_mutex_unlock>
    2868:	mov	x3, x19
    286c:	mov	x2, x19
    2870:	ldr	x1, [x26]
    2874:	adrp	x0, 0 <get_kind>
    2878:	add	x0, x0, #0x0
    287c:	bl	0 <gomp_fatal>
    2880:	adrp	x3, 0 <get_kind>
    2884:	add	x3, x3, #0x0
    2888:	mov	w2, #0x3b4                 	// #948
    288c:	adrp	x1, 0 <get_kind>
    2890:	add	x1, x1, #0x0
    2894:	adrp	x0, 0 <get_kind>
    2898:	add	x0, x0, #0x0
    289c:	bl	0 <__assert_fail>
    28a0:	mov	w19, w24
    28a4:	ldr	x0, [x29, #128]
    28a8:	bl	310 <gomp_mutex_unlock>
    28ac:	mov	w2, w19
    28b0:	adrp	x1, 0 <get_kind>
    28b4:	add	x1, x1, #0x0
    28b8:	add	x1, x1, #0x10
    28bc:	adrp	x0, 0 <get_kind>
    28c0:	add	x0, x0, #0x0
    28c4:	bl	0 <gomp_fatal>
    28c8:	ldr	x25, [x29, #192]
    28cc:	b	268c <gomp_map_vars+0x10bc>
    28d0:	ldr	x25, [x29, #192]
    28d4:	b	268c <gomp_map_vars+0x10bc>
    28d8:	ldr	x25, [x29, #192]
    28dc:	b	268c <gomp_map_vars+0x10bc>
    28e0:	mov	x23, x28
    28e4:	ldr	w0, [x29, #152]
    28e8:	cmp	w0, #0x1
    28ec:	b.eq	29a8 <gomp_map_vars+0x13d8>  // b.none
    28f0:	ldr	x0, [x29, #176]
    28f4:	cbz	x0, 2964 <gomp_map_vars+0x1394>
    28f8:	ldr	x0, [x29, #264]
    28fc:	cmp	x0, #0x0
    2900:	b.le	2958 <gomp_map_vars+0x1388>
    2904:	mov	x19, #0x0                   	// #0
    2908:	ldr	x21, [x29, #160]
    290c:	ldr	x1, [x29, #256]
    2910:	lsl	x0, x19, #4
    2914:	add	x2, x1, x0
    2918:	ldr	x0, [x1, x0]
    291c:	ldr	x3, [x2, #8]
    2920:	ldr	x2, [x1]
    2924:	sub	x2, x0, x2
    2928:	ldr	x1, [x20, #16]
    292c:	mov	x4, #0x0                   	// #0
    2930:	sub	x3, x3, x0
    2934:	ldr	x5, [x29, #240]
    2938:	add	x2, x5, x2
    293c:	add	x1, x0, x1
    2940:	mov	x0, x21
    2944:	bl	338 <gomp_copy_host2dev>
    2948:	add	x19, x19, #0x1
    294c:	ldr	x0, [x29, #264]
    2950:	cmp	x0, x19
    2954:	b.gt	290c <gomp_map_vars+0x133c>
    2958:	ldr	x0, [x29, #240]
    295c:	bl	0 <free>
    2960:	str	xzr, [x29, #240]
    2964:	ldr	w0, [x29, #152]
    2968:	cmp	w0, #0x3
    296c:	b.eq	2a7c <gomp_map_vars+0x14ac>  // b.none
    2970:	ldr	x1, [x29, #128]
    2974:	ldxr	w0, [x1]
    2978:	stlxr	w2, wzr, [x1]
    297c:	cbnz	w2, 2974 <gomp_map_vars+0x13a4>
    2980:	tbnz	w0, #31, 2a94 <gomp_map_vars+0x14c4>
    2984:	mov	x0, x20
    2988:	mov	sp, x29
    298c:	ldp	x19, x20, [sp, #16]
    2990:	ldp	x21, x22, [sp, #32]
    2994:	ldp	x23, x24, [sp, #48]
    2998:	ldp	x25, x26, [sp, #64]
    299c:	ldp	x27, x28, [sp, #80]
    29a0:	ldp	x29, x30, [sp], #336
    29a4:	ret
    29a8:	add	x19, x20, #0x40
    29ac:	mov	x22, #0x0                   	// #0
    29b0:	mov	x25, #0x0                   	// #0
    29b4:	add	x26, x23, #0x8
    29b8:	mov	x24, #0x8                   	// #8
    29bc:	ldr	x27, [x29, #160]
    29c0:	ldr	x28, [x29, #176]
    29c4:	b	2a20 <gomp_map_vars+0x1450>
    29c8:	ldr	x1, [x19, #16]
    29cc:	cmn	x1, #0x1
    29d0:	b.eq	2a44 <gomp_map_vars+0x1474>  // b.none
    29d4:	mov	x0, x25
    29d8:	cmn	x1, #0x2
    29dc:	b.eq	29f0 <gomp_map_vars+0x1420>  // b.none
    29e0:	cmn	x1, #0x3
    29e4:	b.eq	2a4c <gomp_map_vars+0x147c>  // b.none
    29e8:	ldr	x0, [x20, #16]
    29ec:	add	x0, x1, x0
    29f0:	str	x0, [x29, #304]
    29f4:	ldr	x1, [x20, #16]
    29f8:	mov	x4, x28
    29fc:	mov	x3, x24
    2a00:	add	x2, x29, #0x130
    2a04:	add	x1, x1, x22, lsl #3
    2a08:	mov	x0, x27
    2a0c:	bl	338 <gomp_copy_host2dev>
    2a10:	add	x22, x22, #0x1
    2a14:	add	x19, x19, #0x20
    2a18:	cmp	x21, x22
    2a1c:	b.eq	2aa0 <gomp_map_vars+0x14d0>  // b.none
    2a20:	ldr	x1, [x19]
    2a24:	cbz	x1, 29c8 <gomp_map_vars+0x13f8>
    2a28:	ldr	x0, [x1, #24]
    2a2c:	ldr	x2, [x19, #16]
    2a30:	add	x0, x0, x2
    2a34:	ldr	x1, [x1, #16]
    2a38:	ldr	x1, [x1, #16]
    2a3c:	add	x0, x0, x1
    2a40:	b	29f0 <gomp_map_vars+0x1420>
    2a44:	ldr	x0, [x23, x22, lsl #3]
    2a48:	b	29f0 <gomp_map_vars+0x1420>
    2a4c:	ldr	x3, [x19, #32]
    2a50:	ldr	x0, [x3, #24]
    2a54:	ldr	x1, [x26, x22, lsl #3]
    2a58:	sub	x0, x0, x1
    2a5c:	ldr	x1, [x23, x22, lsl #3]
    2a60:	ldr	x2, [x19, #48]
    2a64:	add	x1, x1, x2
    2a68:	add	x0, x0, x1
    2a6c:	ldr	x1, [x3, #16]
    2a70:	ldr	x1, [x1, #16]
    2a74:	add	x0, x0, x1
    2a78:	b	29f0 <gomp_map_vars+0x1420>
    2a7c:	ldr	x0, [x20]
    2a80:	cbnz	x0, 2970 <gomp_map_vars+0x13a0>
    2a84:	mov	x0, x20
    2a88:	bl	0 <free>
    2a8c:	mov	x20, #0x0                   	// #0
    2a90:	b	2970 <gomp_map_vars+0x13a0>
    2a94:	ldr	x0, [x29, #128]
    2a98:	bl	0 <gomp_mutex_unlock_slow>
    2a9c:	b	2984 <gomp_map_vars+0x13b4>
    2aa0:	ldr	x0, [x29, #176]
    2aa4:	cbnz	x0, 28f8 <gomp_map_vars+0x1328>
    2aa8:	b	2970 <gomp_map_vars+0x13a0>
    2aac:	str	xzr, [x26, #48]
    2ab0:	b	2b10 <gomp_map_vars+0x1540>
    2ab4:	str	x26, [x29, #168]
    2ab8:	mov	x0, x2
    2abc:	str	x2, [x26]
    2ac0:	ldr	x1, [x29, #208]
    2ac4:	ldr	x2, [x29, #192]
    2ac8:	ldr	x2, [x1, x2]
    2acc:	add	x2, x0, x2
    2ad0:	str	x2, [x26, #8]
    2ad4:	ldr	x1, [x29, #168]
    2ad8:	ldr	x0, [x29, #200]
    2adc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2ae0:	mov	x3, x0
    2ae4:	str	x0, [x29, #144]
    2ae8:	cbz	x0, 2aac <gomp_map_vars+0x14dc>
    2aec:	mov	x4, x0
    2af0:	ldr	x0, [x0, #32]
    2af4:	cmn	x0, #0x2
    2af8:	b.ne	24e8 <gomp_map_vars+0xf18>  // b.any
    2afc:	str	xzr, [x26, #48]
    2b00:	ldr	x0, [x29, #144]
    2b04:	ldr	x0, [x0, #32]
    2b08:	cmn	x0, #0x2
    2b0c:	b.eq	25e8 <gomp_map_vars+0x1018>  // b.none
    2b10:	ldr	x0, [x29, #168]
    2b14:	str	x0, [x22, #64]
    2b18:	str	x20, [x26, #16]
    2b1c:	ldr	x1, [x29, #120]
    2b20:	cmn	x1, #0x1
    2b24:	b.eq	2600 <gomp_map_vars+0x1030>  // b.none
    2b28:	ldr	x0, [x26]
    2b2c:	ldr	x2, [x29, #96]
    2b30:	sub	x0, x0, x2
    2b34:	ldr	x2, [x29, #104]
    2b38:	add	x0, x0, x2
    2b3c:	str	x0, [x26, #24]
    2b40:	cmp	x19, x1
    2b44:	csinv	x0, x1, xzr, ne  // ne = any
    2b48:	str	x0, [x29, #120]
    2b4c:	and	w0, w23, #0xe
    2b50:	cmp	w0, #0x2
    2b54:	cset	w0, eq  // eq = none
    2b58:	strb	w0, [x22, #72]
    2b5c:	and	w0, w23, #0xfffffffe
    2b60:	cmp	w0, #0x12
    2b64:	cset	w0, eq  // eq = none
    2b68:	strb	w0, [x22, #73]
    2b6c:	add	x1, x20, x19, lsl #5
    2b70:	str	xzr, [x1, #80]
    2b74:	ldr	x0, [x26, #8]
    2b78:	ldr	x2, [x26]
    2b7c:	sub	x0, x0, x2
    2b80:	str	x0, [x1, #88]
    2b84:	mov	x0, #0x1                   	// #1
    2b88:	str	x0, [x26, #32]
    2b8c:	str	xzr, [x26, #40]
    2b90:	ldr	x0, [x20]
    2b94:	add	x0, x0, #0x1
    2b98:	str	x0, [x20]
    2b9c:	str	xzr, [x26, #56]
    2ba0:	str	xzr, [x26, #64]
    2ba4:	mov	x1, x26
    2ba8:	ldr	x0, [x29, #200]
    2bac:	bl	0 <splay_tree_prefix_splay_tree_insert>
    2bb0:	cmp	w23, #0x5
    2bb4:	b.eq	2764 <gomp_map_vars+0x1194>  // b.none
    2bb8:	b.le	2634 <gomp_map_vars+0x1064>
    2bbc:	cmp	w23, #0x11
    2bc0:	b.eq	26d0 <gomp_map_vars+0x1100>  // b.none
    2bc4:	b.le	2700 <gomp_map_vars+0x1130>
    2bc8:	cmp	w23, #0x80
    2bcc:	b.eq	268c <gomp_map_vars+0x10bc>  // b.none
    2bd0:	b.le	274c <gomp_map_vars+0x117c>
    2bd4:	cmp	w23, #0x82
    2bd8:	b.eq	268c <gomp_map_vars+0x10bc>  // b.none
    2bdc:	and	w23, w23, #0xfffffffd
    2be0:	cmp	w23, #0x81
    2be4:	b.eq	26d0 <gomp_map_vars+0x1100>  // b.none
    2be8:	mov	w19, w24
    2bec:	b	28a4 <gomp_map_vars+0x12d4>
    2bf0:	ldr	x0, [x29, #288]
    2bf4:	ldr	x2, [x29, #280]
    2bf8:	sub	x0, x0, x2
    2bfc:	add	x0, x0, x1
    2c00:	str	x0, [x29, #192]
    2c04:	b	17d0 <gomp_map_vars+0x200>
    2c08:	ldr	x0, [x29, #288]
    2c0c:	ldr	x2, [x29, #280]
    2c10:	sub	x0, x0, x2
    2c14:	add	x0, x0, x1
    2c18:	str	x0, [x29, #192]
    2c1c:	b	17d0 <gomp_map_vars+0x200>

0000000000002c20 <gomp_target_data_fallback>:
    2c20:	stp	x29, x30, [sp, #-32]!
    2c24:	mov	x29, sp
    2c28:	str	x19, [sp, #16]
    2c2c:	adrp	x0, 0 <gomp_tls_data>
    2c30:	ldr	x0, [x0]
    2c34:	mrs	x1, tpidr_el0
    2c38:	add	x0, x1, x0
    2c3c:	ldr	x0, [x0, #80]
    2c40:	add	x1, x0, #0x90
    2c44:	adrp	x19, 0 <gomp_global_icv>
    2c48:	add	x19, x19, #0x0
    2c4c:	cmp	x0, #0x0
    2c50:	csel	x19, x19, x1, eq  // eq = none
    2c54:	ldr	x0, [x19, #32]
    2c58:	cbz	x0, 2c8c <gomp_target_data_fallback+0x6c>
    2c5c:	mov	w7, #0x2                   	// #2
    2c60:	mov	w6, #0x0                   	// #0
    2c64:	mov	x5, #0x0                   	// #0
    2c68:	mov	x4, #0x0                   	// #0
    2c6c:	mov	x3, #0x0                   	// #0
    2c70:	mov	x2, #0x0                   	// #0
    2c74:	mov	x1, #0x0                   	// #0
    2c78:	mov	x0, #0x0                   	// #0
    2c7c:	bl	15d0 <gomp_map_vars>
    2c80:	ldr	x1, [x19, #32]
    2c84:	str	x1, [x0, #40]
    2c88:	str	x0, [x19, #32]
    2c8c:	ldr	x19, [sp, #16]
    2c90:	ldp	x29, x30, [sp], #32
    2c94:	ret

0000000000002c98 <gomp_remove_var>:
    2c98:	stp	x29, x30, [sp, #-32]!
    2c9c:	mov	x29, sp
    2ca0:	stp	x19, x20, [sp, #16]
    2ca4:	mov	x19, x1
    2ca8:	add	x20, x0, #0xa0
    2cac:	mov	x0, x20
    2cb0:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2cb4:	ldr	x1, [x19, #48]
    2cb8:	cbz	x1, 2cc4 <gomp_remove_var+0x2c>
    2cbc:	mov	x0, x20
    2cc0:	bl	0 <splay_tree_prefix_splay_tree_insert>
    2cc4:	ldr	x0, [x19, #16]
    2cc8:	ldr	x1, [x0]
    2ccc:	cmp	x1, #0x1
    2cd0:	b.ls	2cec <gomp_remove_var+0x54>  // b.plast
    2cd4:	sub	x1, x1, #0x1
    2cd8:	str	x1, [x0]
    2cdc:	mov	w0, #0x0                   	// #0
    2ce0:	ldp	x19, x20, [sp, #16]
    2ce4:	ldp	x29, x30, [sp], #32
    2ce8:	ret
    2cec:	bl	4b4 <gomp_unmap_tgt>
    2cf0:	mov	w0, #0x1                   	// #1
    2cf4:	b	2ce0 <gomp_remove_var+0x48>

0000000000002cf8 <gomp_unload_image_from_device>:
    2cf8:	stp	x29, x30, [sp, #-160]!
    2cfc:	mov	x29, sp
    2d00:	stp	x19, x20, [sp, #16]
    2d04:	stp	x21, x22, [sp, #32]
    2d08:	stp	x23, x24, [sp, #48]
    2d0c:	stp	x25, x26, [sp, #64]
    2d10:	stp	x27, x28, [sp, #80]
    2d14:	mov	x20, x0
    2d18:	mov	w19, w1
    2d1c:	mov	x28, x3
    2d20:	ldr	x23, [x2]
    2d24:	ldr	x25, [x2, #16]
    2d28:	ldr	x27, [x2, #8]
    2d2c:	sub	x27, x27, x23
    2d30:	asr	x27, x27, #3
    2d34:	ldr	x22, [x2, #24]
    2d38:	sub	x22, x22, x25
    2d3c:	lsr	x0, x22, #63
    2d40:	add	x22, x0, x22, asr #3
    2d44:	asr	x22, x22, #1
    2d48:	orr	w0, w22, w27
    2d4c:	cbz	w0, 2edc <gomp_unload_image_from_device+0x1e4>
    2d50:	mov	w24, w27
    2d54:	cbz	w27, 2df0 <gomp_unload_image_from_device+0xf8>
    2d58:	ldr	x0, [x23]
    2d5c:	str	x0, [sp, #104]
    2d60:	add	x0, x0, #0x1
    2d64:	str	x0, [sp, #112]
    2d68:	add	x26, x20, #0xa0
    2d6c:	add	x1, sp, #0x68
    2d70:	mov	x0, x26
    2d74:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2d78:	mov	x21, x0
    2d7c:	ldr	x3, [x20, #88]
    2d80:	mov	x2, x28
    2d84:	mov	w1, w19
    2d88:	ldr	w0, [x20, #12]
    2d8c:	blr	x3
    2d90:	and	w0, w0, #0xff
    2d94:	cbz	w0, 2ef4 <gomp_unload_image_from_device+0x1fc>
    2d98:	mov	x19, #0x0                   	// #0
    2d9c:	cmp	w27, #0x0
    2da0:	b.le	2dcc <gomp_unload_image_from_device+0xd4>
    2da4:	ldr	x1, [x23, x19, lsl #3]
    2da8:	str	x1, [sp, #104]
    2dac:	add	x1, x1, #0x1
    2db0:	str	x1, [sp, #112]
    2db4:	add	x1, sp, #0x68
    2db8:	mov	x0, x26
    2dbc:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2dc0:	add	x19, x19, #0x1
    2dc4:	cmp	w24, w19
    2dc8:	b.gt	2da4 <gomp_unload_image_from_device+0xac>
    2dcc:	cmp	w22, #0x0
    2dd0:	b.le	2e88 <gomp_unload_image_from_device+0x190>
    2dd4:	add	x19, x25, #0x8
    2dd8:	sub	w22, w22, #0x1
    2ddc:	add	x25, x25, #0x18
    2de0:	add	x22, x25, x22, lsl #4
    2de4:	mov	w23, #0x0                   	// #0
    2de8:	add	x24, x20, #0xa0
    2dec:	b	2e58 <gomp_unload_image_from_device+0x160>
    2df0:	ldr	x0, [x25]
    2df4:	str	x0, [sp, #104]
    2df8:	add	x0, x0, #0x1
    2dfc:	str	x0, [sp, #112]
    2e00:	add	x1, sp, #0x68
    2e04:	add	x0, x20, #0xa0
    2e08:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2e0c:	mov	x21, x0
    2e10:	ldr	x3, [x20, #88]
    2e14:	mov	x2, x28
    2e18:	mov	w1, w19
    2e1c:	ldr	w0, [x20, #12]
    2e20:	blr	x3
    2e24:	and	w0, w0, #0xff
    2e28:	cbnz	w0, 2dcc <gomp_unload_image_from_device+0xd4>
    2e2c:	b	2ef4 <gomp_unload_image_from_device+0x1fc>
    2e30:	add	x1, sp, #0x68
    2e34:	mov	x0, x24
    2e38:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2e3c:	mov	x1, x0
    2e40:	mov	x0, x20
    2e44:	bl	2c98 <gomp_remove_var>
    2e48:	and	w23, w0, #0xff
    2e4c:	add	x19, x19, #0x10
    2e50:	cmp	x19, x22
    2e54:	b.eq	2e98 <gomp_unload_image_from_device+0x1a0>  // b.none
    2e58:	ldur	x2, [x19, #-8]
    2e5c:	str	x2, [sp, #104]
    2e60:	ldr	x1, [x19]
    2e64:	and	x1, x1, #0x7fffffffffffffff
    2e68:	add	x1, x1, x2
    2e6c:	str	x1, [sp, #112]
    2e70:	ldr	x0, [x19]
    2e74:	tbnz	x0, #63, 2e30 <gomp_unload_image_from_device+0x138>
    2e78:	add	x1, sp, #0x68
    2e7c:	mov	x0, x24
    2e80:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2e84:	b	2e4c <gomp_unload_image_from_device+0x154>
    2e88:	mov	w23, #0x0                   	// #0
    2e8c:	b	2e98 <gomp_unload_image_from_device+0x1a0>
    2e90:	mov	x21, #0x0                   	// #0
    2e94:	mov	w23, #0x0                   	// #0
    2e98:	cmp	x21, #0x0
    2e9c:	cset	w0, ne  // ne = any
    2ea0:	eor	w23, w23, #0x1
    2ea4:	tst	w0, w23
    2ea8:	b.ne	2ec8 <gomp_unload_image_from_device+0x1d0>  // b.any
    2eac:	ldp	x19, x20, [sp, #16]
    2eb0:	ldp	x21, x22, [sp, #32]
    2eb4:	ldp	x23, x24, [sp, #48]
    2eb8:	ldp	x25, x26, [sp, #64]
    2ebc:	ldp	x27, x28, [sp, #80]
    2ec0:	ldp	x29, x30, [sp], #160
    2ec4:	ret
    2ec8:	ldr	x0, [x21, #16]
    2ecc:	bl	0 <free>
    2ed0:	mov	x0, x21
    2ed4:	bl	0 <free>
    2ed8:	b	2eac <gomp_unload_image_from_device+0x1b4>
    2edc:	ldr	x3, [x20, #88]
    2ee0:	mov	x2, x28
    2ee4:	ldr	w0, [x20, #12]
    2ee8:	blr	x3
    2eec:	and	w0, w0, #0xff
    2ef0:	cbnz	w0, 2e90 <gomp_unload_image_from_device+0x198>
    2ef4:	add	x0, x20, #0xa8
    2ef8:	bl	310 <gomp_mutex_unlock>
    2efc:	adrp	x0, 0 <get_kind>
    2f00:	add	x0, x0, #0x0
    2f04:	bl	0 <gomp_fatal>

0000000000002f08 <gomp_unmap_vars>:
    2f08:	stp	x29, x30, [sp, #-96]!
    2f0c:	mov	x29, sp
    2f10:	stp	x21, x22, [sp, #32]
    2f14:	mov	x22, x0
    2f18:	ldr	x0, [x0, #48]
    2f1c:	cbz	x0, 2fbc <gomp_unmap_vars+0xb4>
    2f20:	stp	x23, x24, [sp, #48]
    2f24:	stp	x25, x26, [sp, #64]
    2f28:	and	w25, w1, #0xff
    2f2c:	ldr	x23, [x22, #56]
    2f30:	add	x24, x23, #0xa8
    2f34:	mov	w0, #0x1                   	// #1
    2f38:	ldaxr	w1, [x24]
    2f3c:	cbnz	w1, 2f48 <gomp_unmap_vars+0x40>
    2f40:	stxr	w2, w0, [x24]
    2f44:	cbnz	w2, 2f38 <gomp_unmap_vars+0x30>
    2f48:	cmp	w1, #0x0
    2f4c:	b.ne	2fc8 <gomp_unmap_vars+0xc0>  // b.any
    2f50:	ldr	w0, [x23, #172]
    2f54:	cmp	w0, #0x2
    2f58:	b.eq	2fd4 <gomp_unmap_vars+0xcc>  // b.none
    2f5c:	stp	x19, x20, [sp, #16]
    2f60:	stp	x27, x28, [sp, #80]
    2f64:	ldr	x0, [x22, #48]
    2f68:	add	x20, x22, #0x40
    2f6c:	mov	x21, #0x0                   	// #0
    2f70:	mov	w26, #0x0                   	// #0
    2f74:	mov	w27, #0x1                   	// #1
    2f78:	cbnz	x0, 3088 <gomp_unmap_vars+0x180>
    2f7c:	ldr	x0, [x22]
    2f80:	cmp	x0, #0x1
    2f84:	b.ls	30bc <gomp_unmap_vars+0x1b4>  // b.plast
    2f88:	sub	x0, x0, #0x1
    2f8c:	str	x0, [x22]
    2f90:	ldxr	w0, [x24]
    2f94:	stlxr	w1, wzr, [x24]
    2f98:	cbnz	w1, 2f90 <gomp_unmap_vars+0x88>
    2f9c:	tbnz	w0, #31, 30c8 <gomp_unmap_vars+0x1c0>
    2fa0:	ldp	x19, x20, [sp, #16]
    2fa4:	ldp	x23, x24, [sp, #48]
    2fa8:	ldp	x25, x26, [sp, #64]
    2fac:	ldp	x27, x28, [sp, #80]
    2fb0:	ldp	x21, x22, [sp, #32]
    2fb4:	ldp	x29, x30, [sp], #96
    2fb8:	ret
    2fbc:	mov	x0, x22
    2fc0:	bl	0 <free>
    2fc4:	b	2fb0 <gomp_unmap_vars+0xa8>
    2fc8:	mov	x0, x24
    2fcc:	bl	0 <gomp_mutex_lock_slow>
    2fd0:	b	2f50 <gomp_unmap_vars+0x48>
    2fd4:	ldxr	w0, [x24]
    2fd8:	stlxr	w1, wzr, [x24]
    2fdc:	cbnz	w1, 2fd4 <gomp_unmap_vars+0xcc>
    2fe0:	tbnz	w0, #31, 3000 <gomp_unmap_vars+0xf8>
    2fe4:	ldr	x0, [x22, #8]
    2fe8:	bl	0 <free>
    2fec:	mov	x0, x22
    2ff0:	bl	0 <free>
    2ff4:	ldp	x23, x24, [sp, #48]
    2ff8:	ldp	x25, x26, [sp, #64]
    2ffc:	b	2fb0 <gomp_unmap_vars+0xa8>
    3000:	mov	x0, x24
    3004:	bl	0 <gomp_mutex_unlock_slow>
    3008:	b	2fe4 <gomp_unmap_vars+0xdc>
    300c:	cmp	x1, #0x1
    3010:	b.ne	30ac <gomp_unmap_vars+0x1a4>  // b.any
    3014:	str	xzr, [x19, #32]
    3018:	cbz	w25, 303c <gomp_unmap_vars+0x134>
    301c:	ldrb	w28, [x20, #8]
    3020:	cbnz	w28, 3044 <gomp_unmap_vars+0x13c>
    3024:	ldrb	w28, [x20, #9]
    3028:	cbnz	w28, 3044 <gomp_unmap_vars+0x13c>
    302c:	mov	x1, x19
    3030:	mov	x0, x23
    3034:	bl	2c98 <gomp_remove_var>
    3038:	b	3074 <gomp_unmap_vars+0x16c>
    303c:	mov	w28, w27
    3040:	b	30b0 <gomp_unmap_vars+0x1a8>
    3044:	ldr	x1, [x0, #16]
    3048:	ldr	x2, [x19, #24]
    304c:	add	x2, x1, x2
    3050:	ldr	x3, [x19, #16]
    3054:	ldr	x5, [x3, #16]
    3058:	ldr	x4, [x19]
    305c:	ldr	x3, [x0, #24]
    3060:	add	x2, x2, x5
    3064:	add	x1, x1, x4
    3068:	mov	x0, x23
    306c:	bl	600 <gomp_copy_dev2host>
    3070:	cbnz	w28, 302c <gomp_unmap_vars+0x124>
    3074:	add	x21, x21, #0x1
    3078:	add	x20, x20, #0x20
    307c:	ldr	x0, [x22, #48]
    3080:	cmp	x0, x21
    3084:	b.ls	2f7c <gomp_unmap_vars+0x74>  // b.plast
    3088:	mov	x0, x20
    308c:	ldr	x19, [x20]
    3090:	cbz	x19, 3074 <gomp_unmap_vars+0x16c>
    3094:	ldr	x1, [x19, #32]
    3098:	sub	x2, x1, #0x2
    309c:	cmn	x2, #0x4
    30a0:	b.hi	300c <gomp_unmap_vars+0x104>  // b.pmore
    30a4:	sub	x1, x1, #0x1
    30a8:	str	x1, [x19, #32]
    30ac:	mov	w28, w26
    30b0:	ldrb	w1, [x0, #9]
    30b4:	cbz	w1, 3070 <gomp_unmap_vars+0x168>
    30b8:	b	3044 <gomp_unmap_vars+0x13c>
    30bc:	mov	x0, x22
    30c0:	bl	4b4 <gomp_unmap_tgt>
    30c4:	b	2f90 <gomp_unmap_vars+0x88>
    30c8:	mov	x0, x24
    30cc:	bl	0 <gomp_mutex_unlock_slow>
    30d0:	ldp	x19, x20, [sp, #16]
    30d4:	ldp	x23, x24, [sp, #48]
    30d8:	ldp	x25, x26, [sp, #64]
    30dc:	ldp	x27, x28, [sp, #80]
    30e0:	b	2fb0 <gomp_unmap_vars+0xa8>

00000000000030e4 <GOMP_offload_register_ver>:
    30e4:	stp	x29, x30, [sp, #-96]!
    30e8:	mov	x29, sp
    30ec:	stp	x23, x24, [sp, #48]
    30f0:	mov	w24, w2
    30f4:	lsr	w2, w0, #16
    30f8:	cmp	w2, #0x1
    30fc:	b.hi	316c <GOMP_offload_register_ver+0x88>  // b.pmore
    3100:	stp	x19, x20, [sp, #16]
    3104:	stp	x25, x26, [sp, #64]
    3108:	stp	x27, x28, [sp, #80]
    310c:	mov	w26, w0
    3110:	mov	x28, x1
    3114:	mov	x27, x3
    3118:	adrp	x0, 0 <get_kind>
    311c:	add	x0, x0, #0x0
    3120:	add	x0, x0, #0x10
    3124:	mov	w2, #0x1                   	// #1
    3128:	ldaxr	w1, [x0]
    312c:	cbnz	w1, 3138 <GOMP_offload_register_ver+0x54>
    3130:	stxr	w3, w2, [x0]
    3134:	cbnz	w3, 3128 <GOMP_offload_register_ver+0x44>
    3138:	cmp	w1, #0x0
    313c:	b.ne	318c <GOMP_offload_register_ver+0xa8>  // b.any
    3140:	adrp	x0, 0 <get_kind>
    3144:	ldr	w0, [x0]
    3148:	cmp	w0, #0x0
    314c:	b.le	3238 <GOMP_offload_register_ver+0x154>
    3150:	stp	x21, x22, [sp, #32]
    3154:	mov	x22, #0x0                   	// #0
    3158:	mov	w21, #0x0                   	// #0
    315c:	adrp	x23, 0 <get_kind>
    3160:	add	x23, x23, #0x0
    3164:	mov	w25, #0x1                   	// #1
    3168:	b	31e8 <GOMP_offload_register_ver+0x104>
    316c:	stp	x19, x20, [sp, #16]
    3170:	stp	x21, x22, [sp, #32]
    3174:	stp	x25, x26, [sp, #64]
    3178:	stp	x27, x28, [sp, #80]
    317c:	mov	w1, #0x1                   	// #1
    3180:	adrp	x0, 0 <get_kind>
    3184:	add	x0, x0, #0x0
    3188:	bl	0 <gomp_fatal>
    318c:	adrp	x0, 0 <get_kind>
    3190:	add	x0, x0, #0x0
    3194:	add	x0, x0, #0x10
    3198:	bl	0 <gomp_mutex_lock_slow>
    319c:	b	3140 <GOMP_offload_register_ver+0x5c>
    31a0:	mov	x0, x20
    31a4:	bl	0 <gomp_mutex_lock_slow>
    31a8:	b	320c <GOMP_offload_register_ver+0x128>
    31ac:	mov	w4, #0x1                   	// #1
    31b0:	mov	x3, x27
    31b4:	mov	x2, x28
    31b8:	mov	w1, w26
    31bc:	mov	x0, x19
    31c0:	bl	e74 <gomp_load_image_to_device>
    31c4:	ldxr	w0, [x20]
    31c8:	stlxr	w1, wzr, [x20]
    31cc:	cbnz	w1, 31c4 <GOMP_offload_register_ver+0xe0>
    31d0:	tbnz	w0, #31, 3228 <GOMP_offload_register_ver+0x144>
    31d4:	add	w21, w21, #0x1
    31d8:	add	x22, x22, #0x130
    31dc:	ldr	w0, [x23]
    31e0:	cmp	w0, w21
    31e4:	b.le	3234 <GOMP_offload_register_ver+0x150>
    31e8:	ldr	x19, [x23, #8]
    31ec:	add	x19, x19, x22
    31f0:	add	x20, x19, #0xa8
    31f4:	ldaxr	w1, [x20]
    31f8:	cbnz	w1, 3204 <GOMP_offload_register_ver+0x120>
    31fc:	stxr	w0, w25, [x20]
    3200:	cbnz	w0, 31f4 <GOMP_offload_register_ver+0x110>
    3204:	cmp	w1, #0x0
    3208:	b.ne	31a0 <GOMP_offload_register_ver+0xbc>  // b.any
    320c:	ldr	w0, [x19, #16]
    3210:	cmp	w0, w24
    3214:	b.ne	31c4 <GOMP_offload_register_ver+0xe0>  // b.any
    3218:	ldr	w0, [x19, #172]
    321c:	cmp	w0, #0x1
    3220:	b.ne	31c4 <GOMP_offload_register_ver+0xe0>  // b.any
    3224:	b	31ac <GOMP_offload_register_ver+0xc8>
    3228:	mov	x0, x20
    322c:	bl	0 <gomp_mutex_unlock_slow>
    3230:	b	31d4 <GOMP_offload_register_ver+0xf0>
    3234:	ldp	x21, x22, [sp, #32]
    3238:	adrp	x0, 0 <get_kind>
    323c:	add	x0, x0, #0x0
    3240:	ldr	w20, [x0, #24]
    3244:	add	w20, w20, #0x1
    3248:	sbfiz	x19, x20, #1, #32
    324c:	add	x19, x19, w20, sxtw
    3250:	lsl	x19, x19, #3
    3254:	mov	x1, x19
    3258:	ldr	x0, [x0, #32]
    325c:	bl	0 <realloc>
    3260:	cbz	x0, 32b8 <GOMP_offload_register_ver+0x1d4>
    3264:	adrp	x1, 0 <get_kind>
    3268:	add	x1, x1, #0x0
    326c:	str	x0, [x1, #32]
    3270:	sub	x19, x19, #0x18
    3274:	add	x2, x0, x19
    3278:	str	w26, [x0, x19]
    327c:	str	w24, [x2, #4]
    3280:	str	x28, [x2, #8]
    3284:	str	x27, [x2, #16]
    3288:	str	w20, [x1, #24]
    328c:	add	x1, x1, #0x10
    3290:	ldxr	w0, [x1]
    3294:	stlxr	w2, wzr, [x1]
    3298:	cbnz	w2, 3290 <GOMP_offload_register_ver+0x1ac>
    329c:	tbnz	w0, #31, 32dc <GOMP_offload_register_ver+0x1f8>
    32a0:	ldp	x19, x20, [sp, #16]
    32a4:	ldp	x25, x26, [sp, #64]
    32a8:	ldp	x27, x28, [sp, #80]
    32ac:	ldp	x23, x24, [sp, #48]
    32b0:	ldp	x29, x30, [sp], #96
    32b4:	ret
    32b8:	stp	x21, x22, [sp, #32]
    32bc:	adrp	x0, 0 <get_kind>
    32c0:	add	x0, x0, #0x0
    32c4:	add	x0, x0, #0x10
    32c8:	bl	310 <gomp_mutex_unlock>
    32cc:	mov	x1, x19
    32d0:	adrp	x0, 0 <get_kind>
    32d4:	add	x0, x0, #0x0
    32d8:	bl	0 <gomp_fatal>
    32dc:	mov	x0, x1
    32e0:	bl	0 <gomp_mutex_unlock_slow>
    32e4:	b	32a0 <GOMP_offload_register_ver+0x1bc>

00000000000032e8 <GOMP_offload_register>:
    32e8:	stp	x29, x30, [sp, #-16]!
    32ec:	mov	x29, sp
    32f0:	mov	x3, x2
    32f4:	mov	w2, w1
    32f8:	mov	x1, x0
    32fc:	mov	w0, #0x0                   	// #0
    3300:	bl	30e4 <GOMP_offload_register_ver>
    3304:	ldp	x29, x30, [sp], #16
    3308:	ret

000000000000330c <GOMP_offload_unregister_ver>:
    330c:	stp	x29, x30, [sp, #-96]!
    3310:	mov	x29, sp
    3314:	stp	x23, x24, [sp, #48]
    3318:	stp	x25, x26, [sp, #64]
    331c:	stp	x27, x28, [sp, #80]
    3320:	mov	w27, w0
    3324:	mov	x28, x1
    3328:	mov	w25, w2
    332c:	mov	x24, x3
    3330:	adrp	x0, 0 <get_kind>
    3334:	add	x0, x0, #0x0
    3338:	add	x0, x0, #0x10
    333c:	mov	w2, #0x1                   	// #1
    3340:	ldaxr	w1, [x0]
    3344:	cbnz	w1, 3350 <GOMP_offload_unregister_ver+0x44>
    3348:	stxr	w3, w2, [x0]
    334c:	cbnz	w3, 3340 <GOMP_offload_unregister_ver+0x34>
    3350:	cmp	w1, #0x0
    3354:	b.ne	3388 <GOMP_offload_unregister_ver+0x7c>  // b.any
    3358:	adrp	x0, 0 <get_kind>
    335c:	ldr	w0, [x0]
    3360:	cmp	w0, #0x0
    3364:	b.le	3434 <GOMP_offload_unregister_ver+0x128>
    3368:	stp	x19, x20, [sp, #16]
    336c:	stp	x21, x22, [sp, #32]
    3370:	mov	x22, #0x0                   	// #0
    3374:	mov	w21, #0x0                   	// #0
    3378:	adrp	x23, 0 <get_kind>
    337c:	add	x23, x23, #0x0
    3380:	mov	w26, #0x1                   	// #1
    3384:	b	33cc <GOMP_offload_unregister_ver+0xc0>
    3388:	adrp	x0, 0 <get_kind>
    338c:	add	x0, x0, #0x0
    3390:	add	x0, x0, #0x10
    3394:	bl	0 <gomp_mutex_lock_slow>
    3398:	b	3358 <GOMP_offload_unregister_ver+0x4c>
    339c:	mov	x0, x20
    33a0:	bl	0 <gomp_mutex_lock_slow>
    33a4:	b	33f0 <GOMP_offload_unregister_ver+0xe4>
    33a8:	ldxr	w0, [x20]
    33ac:	stlxr	w1, wzr, [x20]
    33b0:	cbnz	w1, 33a8 <GOMP_offload_unregister_ver+0x9c>
    33b4:	tbnz	w0, #31, 3420 <GOMP_offload_unregister_ver+0x114>
    33b8:	add	w21, w21, #0x1
    33bc:	add	x22, x22, #0x130
    33c0:	ldr	w0, [x23]
    33c4:	cmp	w0, w21
    33c8:	b.le	342c <GOMP_offload_unregister_ver+0x120>
    33cc:	ldr	x19, [x23, #8]
    33d0:	add	x19, x19, x22
    33d4:	add	x20, x19, #0xa8
    33d8:	ldaxr	w1, [x20]
    33dc:	cbnz	w1, 33e8 <GOMP_offload_unregister_ver+0xdc>
    33e0:	stxr	w0, w26, [x20]
    33e4:	cbnz	w0, 33d8 <GOMP_offload_unregister_ver+0xcc>
    33e8:	cmp	w1, #0x0
    33ec:	b.ne	339c <GOMP_offload_unregister_ver+0x90>  // b.any
    33f0:	ldr	w0, [x19, #16]
    33f4:	cmp	w0, w25
    33f8:	b.ne	33a8 <GOMP_offload_unregister_ver+0x9c>  // b.any
    33fc:	ldr	w0, [x19, #172]
    3400:	cmp	w0, #0x1
    3404:	b.ne	33a8 <GOMP_offload_unregister_ver+0x9c>  // b.any
    3408:	mov	x3, x24
    340c:	mov	x2, x28
    3410:	mov	w1, w27
    3414:	mov	x0, x19
    3418:	bl	2cf8 <gomp_unload_image_from_device>
    341c:	b	33a8 <GOMP_offload_unregister_ver+0x9c>
    3420:	mov	x0, x20
    3424:	bl	0 <gomp_mutex_unlock_slow>
    3428:	b	33b8 <GOMP_offload_unregister_ver+0xac>
    342c:	ldp	x19, x20, [sp, #16]
    3430:	ldp	x21, x22, [sp, #32]
    3434:	adrp	x0, 0 <get_kind>
    3438:	ldr	w4, [x0]
    343c:	cmp	w4, #0x0
    3440:	b.le	34a8 <GOMP_offload_unregister_ver+0x19c>
    3444:	adrp	x0, 0 <get_kind>
    3448:	ldr	x5, [x0]
    344c:	mov	x0, x5
    3450:	sub	w2, w4, #0x1
    3454:	add	x2, x2, x2, lsl #1
    3458:	add	x1, x5, #0x18
    345c:	add	x2, x1, x2, lsl #3
    3460:	mov	x3, x0
    3464:	ldr	x1, [x0, #16]
    3468:	cmp	x1, x24
    346c:	b.eq	3480 <GOMP_offload_unregister_ver+0x174>  // b.none
    3470:	add	x0, x0, #0x18
    3474:	cmp	x0, x2
    3478:	b.ne	3460 <GOMP_offload_unregister_ver+0x154>  // b.any
    347c:	b	34a8 <GOMP_offload_unregister_ver+0x19c>
    3480:	sub	w4, w4, #0x1
    3484:	adrp	x0, 0 <get_kind>
    3488:	str	w4, [x0]
    348c:	sbfiz	x0, x4, #1, #32
    3490:	add	x4, x0, w4, sxtw
    3494:	add	x4, x5, x4, lsl #3
    3498:	ldp	x0, x1, [x4]
    349c:	stp	x0, x1, [x3]
    34a0:	ldr	x0, [x4, #16]
    34a4:	str	x0, [x3, #16]
    34a8:	adrp	x0, 0 <get_kind>
    34ac:	add	x0, x0, #0x0
    34b0:	add	x0, x0, #0x10
    34b4:	ldxr	w1, [x0]
    34b8:	stlxr	w2, wzr, [x0]
    34bc:	cbnz	w2, 34b4 <GOMP_offload_unregister_ver+0x1a8>
    34c0:	tbnz	w1, #31, 34d8 <GOMP_offload_unregister_ver+0x1cc>
    34c4:	ldp	x23, x24, [sp, #48]
    34c8:	ldp	x25, x26, [sp, #64]
    34cc:	ldp	x27, x28, [sp, #80]
    34d0:	ldp	x29, x30, [sp], #96
    34d4:	ret
    34d8:	adrp	x0, 0 <get_kind>
    34dc:	add	x0, x0, #0x0
    34e0:	add	x0, x0, #0x10
    34e4:	bl	0 <gomp_mutex_unlock_slow>
    34e8:	b	34c4 <GOMP_offload_unregister_ver+0x1b8>

00000000000034ec <GOMP_offload_unregister>:
    34ec:	stp	x29, x30, [sp, #-16]!
    34f0:	mov	x29, sp
    34f4:	mov	x3, x2
    34f8:	mov	w2, w1
    34fc:	mov	x1, x0
    3500:	mov	w0, #0x0                   	// #0
    3504:	bl	330c <GOMP_offload_unregister_ver>
    3508:	ldp	x29, x30, [sp], #16
    350c:	ret

0000000000003510 <gomp_init_device>:
    3510:	stp	x29, x30, [sp, #-48]!
    3514:	mov	x29, sp
    3518:	stp	x19, x20, [sp, #16]
    351c:	stp	x21, x22, [sp, #32]
    3520:	mov	x22, x0
    3524:	ldr	x1, [x0, #56]
    3528:	ldr	w0, [x0, #12]
    352c:	blr	x1
    3530:	and	w0, w0, #0xff
    3534:	cbz	w0, 3570 <gomp_init_device+0x60>
    3538:	adrp	x0, 0 <get_kind>
    353c:	ldr	w0, [x0]
    3540:	mov	x19, #0x0                   	// #0
    3544:	mov	w20, #0x0                   	// #0
    3548:	adrp	x21, 0 <get_kind>
    354c:	add	x21, x21, #0x0
    3550:	cmp	w0, #0x0
    3554:	b.gt	35b0 <gomp_init_device+0xa0>
    3558:	mov	w0, #0x1                   	// #1
    355c:	str	w0, [x22, #172]
    3560:	ldp	x19, x20, [sp, #16]
    3564:	ldp	x21, x22, [sp, #32]
    3568:	ldp	x29, x30, [sp], #48
    356c:	ret
    3570:	add	x0, x22, #0xa8
    3574:	bl	310 <gomp_mutex_unlock>
    3578:	adrp	x0, 0 <get_kind>
    357c:	add	x0, x0, #0x0
    3580:	bl	0 <gomp_fatal>
    3584:	mov	w4, #0x0                   	// #0
    3588:	ldr	x3, [x1, #16]
    358c:	ldr	x2, [x1, #8]
    3590:	ldr	w1, [x5, x19]
    3594:	mov	x0, x22
    3598:	bl	e74 <gomp_load_image_to_device>
    359c:	add	w20, w20, #0x1
    35a0:	add	x19, x19, #0x18
    35a4:	ldr	w1, [x21, #24]
    35a8:	cmp	w1, w20
    35ac:	b.le	3558 <gomp_init_device+0x48>
    35b0:	ldr	x5, [x21, #32]
    35b4:	add	x1, x5, x19
    35b8:	ldr	w3, [x1, #4]
    35bc:	ldr	w2, [x22, #16]
    35c0:	cmp	w3, w2
    35c4:	b.ne	359c <gomp_init_device+0x8c>  // b.any
    35c8:	b	3584 <gomp_init_device+0x74>

00000000000035cc <resolve_device>:
    35cc:	stp	x29, x30, [sp, #-32]!
    35d0:	mov	x29, sp
    35d4:	str	x19, [sp, #16]
    35d8:	mov	w19, w0
    35dc:	cmn	w0, #0x1
    35e0:	b.eq	3694 <resolve_device+0xc8>  // b.none
    35e4:	mov	x0, #0x0                   	// #0
    35e8:	tbnz	w19, #31, 3688 <resolve_device+0xbc>
    35ec:	bl	158c <gomp_init_targets_once>
    35f0:	adrp	x0, 0 <get_kind>
    35f4:	ldr	w0, [x0]
    35f8:	cmp	w19, w0
    35fc:	b.ge	3704 <resolve_device+0x138>  // b.tcont
    3600:	sxtw	x0, w19
    3604:	add	x19, x0, w19, sxtw #2
    3608:	lsl	x19, x19, #2
    360c:	sub	x19, x19, x0
    3610:	lsl	x19, x19, #4
    3614:	adrp	x0, 0 <get_kind>
    3618:	ldr	x0, [x0]
    361c:	add	x0, x0, x19
    3620:	add	x0, x0, #0xa8
    3624:	mov	w2, #0x1                   	// #1
    3628:	ldaxr	w1, [x0]
    362c:	cbnz	w1, 3638 <resolve_device+0x6c>
    3630:	stxr	w3, w2, [x0]
    3634:	cbnz	w3, 3628 <resolve_device+0x5c>
    3638:	cmp	w1, #0x0
    363c:	b.ne	36c4 <resolve_device+0xf8>  // b.any
    3640:	adrp	x0, 0 <get_kind>
    3644:	ldr	x0, [x0]
    3648:	add	x0, x0, x19
    364c:	ldr	w1, [x0, #172]
    3650:	cbz	w1, 36cc <resolve_device+0x100>
    3654:	cmp	w1, #0x2
    3658:	b.eq	36d4 <resolve_device+0x108>  // b.none
    365c:	adrp	x0, 0 <get_kind>
    3660:	ldr	x0, [x0]
    3664:	add	x0, x0, x19
    3668:	add	x0, x0, #0xa8
    366c:	ldxr	w1, [x0]
    3670:	stlxr	w2, wzr, [x0]
    3674:	cbnz	w2, 366c <resolve_device+0xa0>
    3678:	tbnz	w1, #31, 36fc <resolve_device+0x130>
    367c:	adrp	x0, 0 <get_kind>
    3680:	ldr	x0, [x0]
    3684:	add	x0, x0, x19
    3688:	ldr	x19, [sp, #16]
    368c:	ldp	x29, x30, [sp], #32
    3690:	ret
    3694:	adrp	x0, 0 <gomp_tls_data>
    3698:	ldr	x0, [x0]
    369c:	mrs	x1, tpidr_el0
    36a0:	add	x0, x1, x0
    36a4:	ldr	x1, [x0, #80]
    36a8:	add	x2, x1, #0x90
    36ac:	adrp	x0, 0 <gomp_global_icv>
    36b0:	add	x0, x0, #0x0
    36b4:	cmp	x1, #0x0
    36b8:	csel	x0, x0, x2, eq  // eq = none
    36bc:	ldr	w19, [x0, #16]
    36c0:	b	35e4 <resolve_device+0x18>
    36c4:	bl	0 <gomp_mutex_lock_slow>
    36c8:	b	3640 <resolve_device+0x74>
    36cc:	bl	3510 <gomp_init_device>
    36d0:	b	365c <resolve_device+0x90>
    36d4:	add	x1, x0, #0xa8
    36d8:	ldxr	w2, [x1]
    36dc:	stlxr	w0, wzr, [x1]
    36e0:	cbnz	w0, 36d8 <resolve_device+0x10c>
    36e4:	mov	x0, #0x0                   	// #0
    36e8:	tbz	w2, #31, 3688 <resolve_device+0xbc>
    36ec:	mov	x0, x1
    36f0:	bl	0 <gomp_mutex_unlock_slow>
    36f4:	mov	x0, #0x0                   	// #0
    36f8:	b	3688 <resolve_device+0xbc>
    36fc:	bl	0 <gomp_mutex_unlock_slow>
    3700:	b	367c <resolve_device+0xb0>
    3704:	mov	x0, #0x0                   	// #0
    3708:	b	3688 <resolve_device+0xbc>

000000000000370c <gomp_unload_device>:
    370c:	stp	x29, x30, [sp, #-48]!
    3710:	mov	x29, sp
    3714:	stp	x19, x20, [sp, #16]
    3718:	mov	x20, x0
    371c:	ldr	w0, [x0, #172]
    3720:	cmp	w0, #0x1
    3724:	b.eq	3734 <gomp_unload_device+0x28>  // b.none
    3728:	ldp	x19, x20, [sp, #16]
    372c:	ldp	x29, x30, [sp], #48
    3730:	ret
    3734:	adrp	x0, 0 <get_kind>
    3738:	ldr	w0, [x0]
    373c:	cbz	w0, 3728 <gomp_unload_device+0x1c>
    3740:	str	x21, [sp, #32]
    3744:	mov	w19, #0x0                   	// #0
    3748:	adrp	x21, 0 <get_kind>
    374c:	add	x21, x21, #0x0
    3750:	b	3778 <gomp_unload_device+0x6c>
    3754:	ldr	x3, [x0, #16]
    3758:	ldr	x2, [x0, #8]
    375c:	ldr	w1, [x4, x1]
    3760:	mov	x0, x20
    3764:	bl	2cf8 <gomp_unload_image_from_device>
    3768:	add	w19, w19, #0x1
    376c:	ldr	w0, [x21, #24]
    3770:	cmp	w0, w19
    3774:	b.ls	37a0 <gomp_unload_device+0x94>  // b.plast
    3778:	ubfiz	x1, x19, #1, #32
    377c:	add	x1, x1, w19, uxtw
    3780:	lsl	x1, x1, #3
    3784:	ldr	x4, [x21, #32]
    3788:	add	x0, x4, x1
    378c:	ldr	w3, [x0, #4]
    3790:	ldr	w2, [x20, #16]
    3794:	cmp	w3, w2
    3798:	b.ne	3768 <gomp_unload_device+0x5c>  // b.any
    379c:	b	3754 <gomp_unload_device+0x48>
    37a0:	ldr	x21, [sp, #32]
    37a4:	b	3728 <gomp_unload_device+0x1c>

00000000000037a8 <gomp_free_memmap>:
    37a8:	stp	x29, x30, [sp, #-32]!
    37ac:	mov	x29, sp
    37b0:	stp	x19, x20, [sp, #16]
    37b4:	mov	x20, x0
    37b8:	ldr	x1, [x0]
    37bc:	cbz	x1, 37e4 <gomp_free_memmap+0x3c>
    37c0:	ldr	x19, [x1, #16]
    37c4:	mov	x0, x20
    37c8:	bl	0 <splay_tree_prefix_splay_tree_remove>
    37cc:	ldr	x0, [x19, #8]
    37d0:	bl	0 <free>
    37d4:	mov	x0, x19
    37d8:	bl	0 <free>
    37dc:	ldr	x1, [x20]
    37e0:	cbnz	x1, 37c0 <gomp_free_memmap+0x18>
    37e4:	ldp	x19, x20, [sp, #16]
    37e8:	ldp	x29, x30, [sp], #32
    37ec:	ret

00000000000037f0 <GOMP_target>:
    37f0:	stp	x29, x30, [sp, #-80]!
    37f4:	mov	x29, sp
    37f8:	stp	x19, x20, [sp, #16]
    37fc:	stp	x21, x22, [sp, #32]
    3800:	stp	x23, x24, [sp, #48]
    3804:	mov	x20, x1
    3808:	mov	x22, x3
    380c:	mov	x21, x4
    3810:	mov	x24, x5
    3814:	mov	x23, x6
    3818:	bl	35cc <resolve_device>
    381c:	cbz	x0, 3838 <GOMP_target+0x48>
    3820:	mov	x19, x0
    3824:	ldr	w0, [x0, #8]
    3828:	mov	w1, #0x5                   	// #5
    382c:	and	w0, w0, w1
    3830:	cmp	w0, #0x4
    3834:	b.eq	3858 <GOMP_target+0x68>  // b.none
    3838:	mov	x1, x21
    383c:	mov	x0, x20
    3840:	bl	4f8 <gomp_target_fallback>
    3844:	ldp	x19, x20, [sp, #16]
    3848:	ldp	x21, x22, [sp, #32]
    384c:	ldp	x23, x24, [sp, #48]
    3850:	ldp	x29, x30, [sp], #80
    3854:	ret
    3858:	str	x25, [sp, #64]
    385c:	mov	x1, x20
    3860:	mov	x0, x19
    3864:	bl	8a4 <gomp_get_target_fn_addr>
    3868:	mov	x25, x0
    386c:	cbz	x0, 38c4 <GOMP_target+0xd4>
    3870:	mov	w7, #0x1                   	// #1
    3874:	mov	w6, #0x0                   	// #0
    3878:	mov	x5, x23
    387c:	mov	x4, x24
    3880:	mov	x3, #0x0                   	// #0
    3884:	mov	x2, x21
    3888:	mov	x1, x22
    388c:	mov	x0, x19
    3890:	bl	15d0 <gomp_map_vars>
    3894:	mov	x20, x0
    3898:	ldr	x4, [x19, #144]
    389c:	mov	x3, #0x0                   	// #0
    38a0:	ldr	x2, [x0, #16]
    38a4:	mov	x1, x25
    38a8:	ldr	w0, [x19, #12]
    38ac:	blr	x4
    38b0:	mov	w1, #0x1                   	// #1
    38b4:	mov	x0, x20
    38b8:	bl	2f08 <gomp_unmap_vars>
    38bc:	ldr	x25, [sp, #64]
    38c0:	b	3844 <GOMP_target+0x54>
    38c4:	ldr	x25, [sp, #64]
    38c8:	b	3838 <GOMP_target+0x48>

00000000000038cc <GOMP_target_ext>:
    38cc:	stp	x29, x30, [sp, #-144]!
    38d0:	mov	x29, sp
    38d4:	stp	x19, x20, [sp, #16]
    38d8:	stp	x21, x22, [sp, #32]
    38dc:	stp	x23, x24, [sp, #48]
    38e0:	stp	x25, x26, [sp, #64]
    38e4:	stp	x27, x28, [sp, #80]
    38e8:	sub	sp, sp, #0x10
    38ec:	str	x1, [x29, #128]
    38f0:	mov	x20, x2
    38f4:	str	x3, [x29, #136]
    38f8:	mov	x21, x4
    38fc:	mov	x24, x5
    3900:	mov	w19, w6
    3904:	mov	x28, x7
    3908:	bl	35cc <resolve_device>
    390c:	mov	x23, x0
    3910:	tbz	w19, #0, 3a60 <GOMP_target_ext+0x194>
    3914:	adrp	x0, 0 <gomp_tls_data>
    3918:	ldr	x0, [x0]
    391c:	mrs	x1, tpidr_el0
    3920:	add	x0, x1, x0
    3924:	ldr	x0, [x0, #16]
    3928:	cbz	x0, 39b4 <GOMP_target_ext+0xe8>
    392c:	adrp	x0, 0 <gomp_tls_data>
    3930:	ldr	x0, [x0]
    3934:	mrs	x1, tpidr_el0
    3938:	add	x0, x1, x0
    393c:	ldr	x0, [x0, #80]
    3940:	ldrb	w1, [x0, #205]
    3944:	cbz	w1, 3a9c <GOMP_target_ext+0x1d0>
    3948:	cbnz	x28, 3a7c <GOMP_target_ext+0x1b0>
    394c:	cbz	x23, 3f08 <GOMP_target_ext+0x63c>
    3950:	ldr	w0, [x23, #8]
    3954:	tbz	w0, #2, 3c40 <GOMP_target_ext+0x374>
    3958:	mov	x19, #0x0                   	// #0
    395c:	mov	x22, #0x0                   	// #0
    3960:	mov	w26, #0x0                   	// #0
    3964:	ldr	x1, [x29, #128]
    3968:	mov	x0, x23
    396c:	bl	8a4 <gomp_get_target_fn_addr>
    3970:	mov	x25, x0
    3974:	cbz	x0, 3c10 <GOMP_target_ext+0x344>
    3978:	ldr	x1, [x23, #136]
    397c:	cbz	x1, 398c <GOMP_target_ext+0xc0>
    3980:	blr	x1
    3984:	and	w0, w0, #0xff
    3988:	cbz	w0, 3c10 <GOMP_target_ext+0x344>
    398c:	ldr	w0, [x23, #8]
    3990:	tbz	w0, #0, 3e3c <GOMP_target_ext+0x570>
    3994:	cbz	w26, 3d3c <GOMP_target_ext+0x470>
    3998:	ldr	x4, [x23, #144]
    399c:	ldr	w0, [x23, #12]
    39a0:	ldr	x3, [x29, #144]
    39a4:	ldr	x2, [x29, #136]
    39a8:	mov	x1, x25
    39ac:	blr	x4
    39b0:	b	3c20 <GOMP_target_ext+0x354>
    39b4:	mov	w0, #0x1                   	// #1
    39b8:	bl	0 <gomp_new_team>
    39bc:	adrp	x1, 0 <gomp_tls_data>
    39c0:	ldr	x1, [x1]
    39c4:	mrs	x2, tpidr_el0
    39c8:	add	x1, x2, x1
    39cc:	ldr	x26, [x1, #80]
    39d0:	cbz	x26, 3e90 <GOMP_target_ext+0x5c4>
    39d4:	adrp	x25, 0 <gomp_tls_data>
    39d8:	ldr	x25, [x25]
    39dc:	add	x25, x2, x25
    39e0:	ldp	x4, x5, [x25, #16]
    39e4:	stp	x4, x5, [x0, #8]
    39e8:	ldp	x4, x5, [x25, #32]
    39ec:	stp	x4, x5, [x0, #24]
    39f0:	ldp	x4, x5, [x25, #48]
    39f4:	stp	x4, x5, [x0, #40]
    39f8:	ldp	x2, x3, [x25, #64]
    39fc:	stp	x2, x3, [x0, #56]
    3a00:	str	x0, [x25, #16]
    3a04:	str	wzr, [x25, #40]
    3a08:	add	x1, x0, #0x100
    3a0c:	str	x1, [x25, #24]
    3a10:	str	xzr, [x25, #32]
    3a14:	str	xzr, [x25, #64]
    3a18:	str	xzr, [x25, #72]
    3a1c:	add	x22, x0, #0x540
    3a20:	str	x22, [x25, #80]
    3a24:	add	x2, x26, #0x90
    3a28:	mov	x1, #0x0                   	// #0
    3a2c:	mov	x0, x22
    3a30:	bl	0 <gomp_init_task>
    3a34:	str	x26, [x25, #80]
    3a38:	bl	0 <gomp_end_task>
    3a3c:	mov	x0, x26
    3a40:	bl	0 <free>
    3a44:	str	x22, [x25, #80]
    3a48:	adrp	x0, 0 <gomp_tls_data>
    3a4c:	ldr	x0, [x0]
    3a50:	mrs	x1, tpidr_el0
    3a54:	add	x0, x1, x0
    3a58:	ldr	x0, [x0, #16]
    3a5c:	cbnz	x0, 392c <GOMP_target_ext+0x60>
    3a60:	cbz	x28, 394c <GOMP_target_ext+0x80>
    3a64:	adrp	x0, 0 <gomp_tls_data>
    3a68:	ldr	x0, [x0]
    3a6c:	mrs	x1, tpidr_el0
    3a70:	add	x0, x1, x0
    3a74:	ldr	x0, [x0, #80]
    3a78:	cbz	x0, 394c <GOMP_target_ext+0x80>
    3a7c:	ldr	x0, [x0, #56]
    3a80:	cbz	x0, 394c <GOMP_target_ext+0x80>
    3a84:	cbz	x20, 3c04 <GOMP_target_ext+0x338>
    3a88:	mov	x19, #0x0                   	// #0
    3a8c:	mov	x22, #0x0                   	// #0
    3a90:	mov	x1, #0x0                   	// #0
    3a94:	mov	x3, #0x1                   	// #1
    3a98:	b	3ae0 <GOMP_target_ext+0x214>
    3a9c:	mov	w0, #0x1                   	// #1
    3aa0:	str	w0, [sp, #8]
    3aa4:	ldr	x0, [x29, #144]
    3aa8:	str	x0, [sp]
    3aac:	mov	x7, x28
    3ab0:	mov	w6, w19
    3ab4:	mov	x5, x24
    3ab8:	mov	x4, x21
    3abc:	ldr	x3, [x29, #136]
    3ac0:	mov	x2, x20
    3ac4:	ldr	x1, [x29, #128]
    3ac8:	mov	x0, x23
    3acc:	bl	0 <gomp_create_target_task>
    3ad0:	b	3c20 <GOMP_target_ext+0x354>
    3ad4:	add	x1, x1, #0x1
    3ad8:	cmp	x20, x1
    3adc:	b.eq	3b1c <GOMP_target_ext+0x250>  // b.none
    3ae0:	ldrh	w0, [x24, x1, lsl #1]
    3ae4:	and	w2, w0, #0xff
    3ae8:	cmp	w2, #0xc
    3aec:	b.ne	3ad4 <GOMP_target_ext+0x208>  // b.any
    3af0:	lsr	w0, w0, #8
    3af4:	lsl	x0, x3, x0
    3af8:	cmp	x22, x0
    3afc:	csel	x22, x22, x0, cs  // cs = hs, nlast
    3b00:	sub	x19, x19, #0x1
    3b04:	add	x19, x19, x0
    3b08:	neg	x0, x0
    3b0c:	and	x0, x19, x0
    3b10:	ldr	x19, [x21, x1, lsl #3]
    3b14:	add	x19, x0, x19
    3b18:	b	3ad4 <GOMP_target_ext+0x208>
    3b1c:	cbnz	x22, 3b3c <GOMP_target_ext+0x270>
    3b20:	mov	x0, x28
    3b24:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    3b28:	cbz	x23, 3c14 <GOMP_target_ext+0x348>
    3b2c:	ldr	w0, [x23, #8]
    3b30:	mov	w26, #0x1                   	// #1
    3b34:	tbz	w0, #2, 3c14 <GOMP_target_ext+0x348>
    3b38:	b	3964 <GOMP_target_ext+0x98>
    3b3c:	add	x0, x22, x19
    3b40:	add	x0, x0, #0xe
    3b44:	and	x0, x0, #0xfffffffffffffff0
    3b48:	sub	sp, sp, x0
    3b4c:	add	x3, sp, #0x10
    3b50:	sub	x0, x22, #0x1
    3b54:	ands	x0, x3, x0
    3b58:	sub	x2, x22, x0
    3b5c:	add	x2, x3, x2
    3b60:	csel	x0, x2, x3, ne  // ne = any
    3b64:	str	x0, [x29, #96]
    3b68:	mov	x25, x24
    3b6c:	ldr	x27, [x29, #136]
    3b70:	mov	x26, x21
    3b74:	add	x0, x24, x1, lsl #1
    3b78:	str	x0, [x29, #120]
    3b7c:	mov	x2, #0x0                   	// #0
    3b80:	b	3b9c <GOMP_target_ext+0x2d0>
    3b84:	add	x25, x25, #0x2
    3b88:	add	x27, x27, #0x8
    3b8c:	add	x26, x26, #0x8
    3b90:	ldr	x0, [x29, #120]
    3b94:	cmp	x0, x25
    3b98:	b.eq	3b20 <GOMP_target_ext+0x254>  // b.none
    3b9c:	ldrh	w0, [x25]
    3ba0:	and	w1, w0, #0xff
    3ba4:	cmp	w1, #0xc
    3ba8:	b.ne	3b84 <GOMP_target_ext+0x2b8>  // b.any
    3bac:	lsr	w0, w0, #8
    3bb0:	mov	x1, #0x1                   	// #1
    3bb4:	lsl	x0, x1, x0
    3bb8:	sub	x2, x2, #0x1
    3bbc:	add	x2, x2, x0
    3bc0:	neg	x0, x0
    3bc4:	and	x0, x0, x2
    3bc8:	ldr	x1, [x29, #96]
    3bcc:	str	x0, [x29, #112]
    3bd0:	add	x1, x1, x0
    3bd4:	mov	x3, x1
    3bd8:	ldr	x2, [x26]
    3bdc:	ldr	x1, [x27]
    3be0:	str	x3, [x29, #104]
    3be4:	mov	x0, x3
    3be8:	bl	0 <memcpy>
    3bec:	ldr	x1, [x29, #104]
    3bf0:	str	x1, [x27]
    3bf4:	ldr	x2, [x26]
    3bf8:	ldr	x0, [x29, #112]
    3bfc:	add	x2, x0, x2
    3c00:	b	3b84 <GOMP_target_ext+0x2b8>
    3c04:	mov	x22, x20
    3c08:	mov	x19, x20
    3c0c:	b	3b20 <GOMP_target_ext+0x254>
    3c10:	cbz	w26, 3c48 <GOMP_target_ext+0x37c>
    3c14:	ldr	x1, [x29, #136]
    3c18:	ldr	x0, [x29, #128]
    3c1c:	bl	4f8 <gomp_target_fallback>
    3c20:	mov	sp, x29
    3c24:	ldp	x19, x20, [sp, #16]
    3c28:	ldp	x21, x22, [sp, #32]
    3c2c:	ldp	x23, x24, [sp, #48]
    3c30:	ldp	x25, x26, [sp, #64]
    3c34:	ldp	x27, x28, [sp, #80]
    3c38:	ldp	x29, x30, [sp], #144
    3c3c:	ret
    3c40:	mov	x19, #0x0                   	// #0
    3c44:	mov	x22, #0x0                   	// #0
    3c48:	cbnz	x20, 3f14 <GOMP_target_ext+0x648>
    3c4c:	cbz	x22, 3c14 <GOMP_target_ext+0x348>
    3c50:	add	x0, x19, x22
    3c54:	add	x0, x0, #0xe
    3c58:	and	x0, x0, #0xfffffffffffffff0
    3c5c:	sub	sp, sp, x0
    3c60:	add	x23, sp, #0x10
    3c64:	sub	x0, x22, #0x1
    3c68:	ands	x0, x23, x0
    3c6c:	sub	x22, x22, x0
    3c70:	add	x22, x23, x22
    3c74:	csel	x23, x22, x23, ne  // ne = any
    3c78:	cbz	x20, 3c14 <GOMP_target_ext+0x348>
    3c7c:	mov	x19, x24
    3c80:	ldr	x22, [x29, #136]
    3c84:	add	x20, x24, x20, lsl #1
    3c88:	mov	x25, #0x0                   	// #0
    3c8c:	mov	x24, #0x1                   	// #1
    3c90:	b	3d28 <GOMP_target_ext+0x45c>
    3c94:	add	x1, x1, #0x1
    3c98:	cmp	x20, x1
    3c9c:	b.eq	3c4c <GOMP_target_ext+0x380>  // b.none
    3ca0:	ldrh	w0, [x24, x1, lsl #1]
    3ca4:	and	w2, w0, #0xff
    3ca8:	cmp	w2, #0xc
    3cac:	b.ne	3c94 <GOMP_target_ext+0x3c8>  // b.any
    3cb0:	lsr	w0, w0, #8
    3cb4:	lsl	x0, x3, x0
    3cb8:	cmp	x22, x0
    3cbc:	csel	x22, x22, x0, cs  // cs = hs, nlast
    3cc0:	sub	x19, x19, #0x1
    3cc4:	add	x19, x19, x0
    3cc8:	neg	x0, x0
    3ccc:	and	x0, x19, x0
    3cd0:	ldr	x19, [x21, x1, lsl #3]
    3cd4:	add	x19, x0, x19
    3cd8:	b	3c94 <GOMP_target_ext+0x3c8>
    3cdc:	lsr	w0, w0, #8
    3ce0:	lsl	x0, x24, x0
    3ce4:	sub	x25, x25, #0x1
    3ce8:	add	x25, x25, x0
    3cec:	neg	x0, x0
    3cf0:	and	x25, x0, x25
    3cf4:	add	x26, x23, x25
    3cf8:	ldr	x2, [x21]
    3cfc:	ldr	x1, [x22]
    3d00:	mov	x0, x26
    3d04:	bl	0 <memcpy>
    3d08:	str	x26, [x22]
    3d0c:	ldr	x0, [x21]
    3d10:	add	x25, x25, x0
    3d14:	add	x19, x19, #0x2
    3d18:	add	x22, x22, #0x8
    3d1c:	add	x21, x21, #0x8
    3d20:	cmp	x19, x20
    3d24:	b.eq	3c14 <GOMP_target_ext+0x348>  // b.none
    3d28:	ldrh	w0, [x19]
    3d2c:	and	w1, w0, #0xff
    3d30:	cmp	w1, #0xc
    3d34:	b.ne	3d14 <GOMP_target_ext+0x448>  // b.any
    3d38:	b	3cdc <GOMP_target_ext+0x410>
    3d3c:	cbz	x20, 3d94 <GOMP_target_ext+0x4c8>
    3d40:	mov	x1, #0x0                   	// #0
    3d44:	mov	x3, #0x1                   	// #1
    3d48:	b	3d58 <GOMP_target_ext+0x48c>
    3d4c:	add	x1, x1, #0x1
    3d50:	cmp	x20, x1
    3d54:	b.eq	3d94 <GOMP_target_ext+0x4c8>  // b.none
    3d58:	ldrh	w0, [x24, x1, lsl #1]
    3d5c:	and	w2, w0, #0xff
    3d60:	cmp	w2, #0xc
    3d64:	b.ne	3d4c <GOMP_target_ext+0x480>  // b.any
    3d68:	lsr	w0, w0, #8
    3d6c:	lsl	x0, x3, x0
    3d70:	cmp	x22, x0
    3d74:	csel	x22, x22, x0, cs  // cs = hs, nlast
    3d78:	sub	x19, x19, #0x1
    3d7c:	add	x19, x19, x0
    3d80:	neg	x0, x0
    3d84:	and	x0, x19, x0
    3d88:	ldr	x19, [x21, x1, lsl #3]
    3d8c:	add	x19, x0, x19
    3d90:	b	3d4c <GOMP_target_ext+0x480>
    3d94:	cbz	x22, 3998 <GOMP_target_ext+0xcc>
    3d98:	add	x0, x19, x22
    3d9c:	add	x0, x0, #0xe
    3da0:	and	x0, x0, #0xfffffffffffffff0
    3da4:	sub	sp, sp, x0
    3da8:	add	x26, sp, #0x10
    3dac:	sub	x0, x22, #0x1
    3db0:	ands	x0, x26, x0
    3db4:	sub	x1, x22, x0
    3db8:	add	x1, x26, x1
    3dbc:	csel	x26, x1, x26, ne  // ne = any
    3dc0:	cbz	x20, 3998 <GOMP_target_ext+0xcc>
    3dc4:	mov	x19, x24
    3dc8:	ldr	x22, [x29, #136]
    3dcc:	add	x20, x24, x20, lsl #1
    3dd0:	mov	x24, #0x0                   	// #0
    3dd4:	mov	x28, #0x1                   	// #1
    3dd8:	b	3e28 <GOMP_target_ext+0x55c>
    3ddc:	lsr	w0, w0, #8
    3de0:	lsl	x0, x28, x0
    3de4:	sub	x24, x24, #0x1
    3de8:	add	x24, x24, x0
    3dec:	neg	x0, x0
    3df0:	and	x24, x0, x24
    3df4:	add	x27, x26, x24
    3df8:	ldr	x2, [x21]
    3dfc:	ldr	x1, [x22]
    3e00:	mov	x0, x27
    3e04:	bl	0 <memcpy>
    3e08:	str	x27, [x22]
    3e0c:	ldr	x0, [x21]
    3e10:	add	x24, x24, x0
    3e14:	add	x19, x19, #0x2
    3e18:	add	x22, x22, #0x8
    3e1c:	add	x21, x21, #0x8
    3e20:	cmp	x20, x19
    3e24:	b.eq	3998 <GOMP_target_ext+0xcc>  // b.none
    3e28:	ldrh	w0, [x19]
    3e2c:	and	w1, w0, #0xff
    3e30:	cmp	w1, #0xc
    3e34:	b.ne	3e14 <GOMP_target_ext+0x548>  // b.any
    3e38:	b	3ddc <GOMP_target_ext+0x510>
    3e3c:	mov	w7, #0x1                   	// #1
    3e40:	mov	w6, w7
    3e44:	mov	x5, x24
    3e48:	mov	x4, x21
    3e4c:	mov	x3, #0x0                   	// #0
    3e50:	ldr	x2, [x29, #136]
    3e54:	mov	x1, x20
    3e58:	mov	x0, x23
    3e5c:	bl	15d0 <gomp_map_vars>
    3e60:	mov	x19, x0
    3e64:	ldr	x4, [x23, #144]
    3e68:	ldr	w0, [x23, #12]
    3e6c:	cbz	x19, 39a0 <GOMP_target_ext+0xd4>
    3e70:	ldr	x3, [x29, #144]
    3e74:	ldr	x2, [x19, #16]
    3e78:	mov	x1, x25
    3e7c:	blr	x4
    3e80:	mov	w1, #0x1                   	// #1
    3e84:	mov	x0, x19
    3e88:	bl	2f08 <gomp_unmap_vars>
    3e8c:	b	3c20 <GOMP_target_ext+0x354>
    3e90:	adrp	x25, 0 <gomp_tls_data>
    3e94:	ldr	x25, [x25]
    3e98:	mrs	x3, tpidr_el0
    3e9c:	add	x25, x3, x25
    3ea0:	ldp	x4, x5, [x25, #16]
    3ea4:	stp	x4, x5, [x0, #8]
    3ea8:	ldp	x4, x5, [x25, #32]
    3eac:	stp	x4, x5, [x0, #24]
    3eb0:	ldp	x4, x5, [x25, #48]
    3eb4:	stp	x4, x5, [x0, #40]
    3eb8:	ldp	x2, x3, [x25, #64]
    3ebc:	stp	x2, x3, [x0, #56]
    3ec0:	str	x0, [x25, #16]
    3ec4:	str	wzr, [x25, #40]
    3ec8:	add	x1, x0, #0x100
    3ecc:	str	x1, [x25, #24]
    3ed0:	str	xzr, [x25, #32]
    3ed4:	str	xzr, [x25, #64]
    3ed8:	str	xzr, [x25, #72]
    3edc:	add	x0, x0, #0x540
    3ee0:	str	x0, [x25, #80]
    3ee4:	adrp	x2, 0 <gomp_global_icv>
    3ee8:	add	x2, x2, #0x0
    3eec:	mov	x1, #0x0                   	// #0
    3ef0:	bl	0 <gomp_init_task>
    3ef4:	mov	x1, x25
    3ef8:	adrp	x0, 0 <gomp_thread_destructor>
    3efc:	ldr	w0, [x0]
    3f00:	bl	0 <pthread_setspecific>
    3f04:	b	3a48 <GOMP_target_ext+0x17c>
    3f08:	mov	x19, #0x0                   	// #0
    3f0c:	mov	x22, #0x0                   	// #0
    3f10:	cbz	x20, 3c14 <GOMP_target_ext+0x348>
    3f14:	mov	x1, #0x0                   	// #0
    3f18:	mov	x3, #0x1                   	// #1
    3f1c:	b	3ca0 <GOMP_target_ext+0x3d4>

0000000000003f20 <GOMP_target_data>:
    3f20:	stp	x29, x30, [sp, #-48]!
    3f24:	mov	x29, sp
    3f28:	stp	x19, x20, [sp, #16]
    3f2c:	stp	x21, x22, [sp, #32]
    3f30:	mov	x19, x2
    3f34:	mov	x22, x3
    3f38:	mov	x20, x4
    3f3c:	mov	x21, x5
    3f40:	bl	35cc <resolve_device>
    3f44:	cbz	x0, 3f5c <GOMP_target_data+0x3c>
    3f48:	ldr	w1, [x0, #8]
    3f4c:	mov	w2, #0x5                   	// #5
    3f50:	and	w1, w1, w2
    3f54:	cmp	w1, #0x4
    3f58:	b.eq	3f70 <GOMP_target_data+0x50>  // b.none
    3f5c:	bl	2c20 <gomp_target_data_fallback>
    3f60:	ldp	x19, x20, [sp, #16]
    3f64:	ldp	x21, x22, [sp, #32]
    3f68:	ldp	x29, x30, [sp], #48
    3f6c:	ret
    3f70:	mov	w7, #0x2                   	// #2
    3f74:	mov	w6, #0x0                   	// #0
    3f78:	mov	x5, x21
    3f7c:	mov	x4, x20
    3f80:	mov	x3, #0x0                   	// #0
    3f84:	mov	x2, x22
    3f88:	mov	x1, x19
    3f8c:	bl	15d0 <gomp_map_vars>
    3f90:	mov	x19, x0
    3f94:	adrp	x0, 0 <gomp_tls_data>
    3f98:	ldr	x0, [x0]
    3f9c:	mrs	x1, tpidr_el0
    3fa0:	add	x0, x1, x0
    3fa4:	ldr	x1, [x0, #80]
    3fa8:	cbz	x1, 3fc0 <GOMP_target_data+0xa0>
    3fac:	add	x1, x1, #0x90
    3fb0:	ldr	x0, [x1, #32]
    3fb4:	str	x0, [x19, #40]
    3fb8:	str	x19, [x1, #32]
    3fbc:	b	3f60 <GOMP_target_data+0x40>
    3fc0:	bl	0 <gomp_new_icv>
    3fc4:	mov	x1, x0
    3fc8:	b	3fb0 <GOMP_target_data+0x90>

0000000000003fcc <GOMP_target_data_ext>:
    3fcc:	stp	x29, x30, [sp, #-48]!
    3fd0:	mov	x29, sp
    3fd4:	stp	x19, x20, [sp, #16]
    3fd8:	stp	x21, x22, [sp, #32]
    3fdc:	mov	x19, x1
    3fe0:	mov	x22, x2
    3fe4:	mov	x20, x3
    3fe8:	mov	x21, x4
    3fec:	bl	35cc <resolve_device>
    3ff0:	cbz	x0, 4008 <GOMP_target_data_ext+0x3c>
    3ff4:	ldr	w5, [x0, #8]
    3ff8:	mov	w1, #0x5                   	// #5
    3ffc:	and	w5, w5, w1
    4000:	cmp	w5, #0x4
    4004:	b.eq	401c <GOMP_target_data_ext+0x50>  // b.none
    4008:	bl	2c20 <gomp_target_data_fallback>
    400c:	ldp	x19, x20, [sp, #16]
    4010:	ldp	x21, x22, [sp, #32]
    4014:	ldp	x29, x30, [sp], #48
    4018:	ret
    401c:	mov	w7, #0x2                   	// #2
    4020:	mov	w6, #0x1                   	// #1
    4024:	mov	x5, x21
    4028:	mov	x4, x20
    402c:	mov	x3, #0x0                   	// #0
    4030:	mov	x2, x22
    4034:	mov	x1, x19
    4038:	bl	15d0 <gomp_map_vars>
    403c:	mov	x19, x0
    4040:	adrp	x0, 0 <gomp_tls_data>
    4044:	ldr	x0, [x0]
    4048:	mrs	x1, tpidr_el0
    404c:	add	x0, x1, x0
    4050:	ldr	x1, [x0, #80]
    4054:	cbz	x1, 406c <GOMP_target_data_ext+0xa0>
    4058:	add	x1, x1, #0x90
    405c:	ldr	x0, [x1, #32]
    4060:	str	x0, [x19, #40]
    4064:	str	x19, [x1, #32]
    4068:	b	400c <GOMP_target_data_ext+0x40>
    406c:	bl	0 <gomp_new_icv>
    4070:	mov	x1, x0
    4074:	b	405c <GOMP_target_data_ext+0x90>

0000000000004078 <GOMP_target_end_data>:
    4078:	adrp	x0, 0 <gomp_tls_data>
    407c:	ldr	x0, [x0]
    4080:	mrs	x1, tpidr_el0
    4084:	add	x0, x1, x0
    4088:	ldr	x0, [x0, #80]
    408c:	add	x2, x0, #0x90
    4090:	adrp	x1, 0 <gomp_global_icv>
    4094:	add	x1, x1, #0x0
    4098:	cmp	x0, #0x0
    409c:	csel	x1, x1, x2, eq  // eq = none
    40a0:	ldr	x0, [x1, #32]
    40a4:	cbz	x0, 40c8 <GOMP_target_end_data+0x50>
    40a8:	stp	x29, x30, [sp, #-16]!
    40ac:	mov	x29, sp
    40b0:	ldr	x2, [x0, #40]
    40b4:	str	x2, [x1, #32]
    40b8:	mov	w1, #0x1                   	// #1
    40bc:	bl	2f08 <gomp_unmap_vars>
    40c0:	ldp	x29, x30, [sp], #16
    40c4:	ret
    40c8:	ret

00000000000040cc <GOMP_target_update>:
    40cc:	stp	x29, x30, [sp, #-48]!
    40d0:	mov	x29, sp
    40d4:	stp	x19, x20, [sp, #16]
    40d8:	stp	x21, x22, [sp, #32]
    40dc:	mov	x19, x2
    40e0:	mov	x22, x3
    40e4:	mov	x20, x4
    40e8:	mov	x21, x5
    40ec:	bl	35cc <resolve_device>
    40f0:	cbz	x0, 4108 <GOMP_target_update+0x3c>
    40f4:	ldr	w1, [x0, #8]
    40f8:	mov	w2, #0x5                   	// #5
    40fc:	and	w1, w1, w2
    4100:	cmp	w1, #0x4
    4104:	b.eq	4118 <GOMP_target_update+0x4c>  // b.none
    4108:	ldp	x19, x20, [sp, #16]
    410c:	ldp	x21, x22, [sp, #32]
    4110:	ldp	x29, x30, [sp], #48
    4114:	ret
    4118:	mov	w5, #0x0                   	// #0
    411c:	mov	x4, x21
    4120:	mov	x3, x20
    4124:	mov	x2, x22
    4128:	mov	x1, x19
    412c:	bl	c30 <gomp_update>
    4130:	b	4108 <GOMP_target_update+0x3c>

0000000000004134 <GOMP_target_update_ext>:
    4134:	sub	sp, sp, #0x60
    4138:	stp	x29, x30, [sp, #16]
    413c:	add	x29, sp, #0x10
    4140:	stp	x19, x20, [sp, #32]
    4144:	stp	x21, x22, [sp, #48]
    4148:	stp	x23, x24, [sp, #64]
    414c:	str	x25, [sp, #80]
    4150:	mov	x21, x1
    4154:	mov	x22, x2
    4158:	mov	x23, x3
    415c:	mov	x24, x4
    4160:	mov	w25, w5
    4164:	mov	x20, x6
    4168:	bl	35cc <resolve_device>
    416c:	mov	x19, x0
    4170:	cbz	x20, 41ec <GOMP_target_update_ext+0xb8>
    4174:	adrp	x0, 0 <gomp_tls_data>
    4178:	ldr	x0, [x0]
    417c:	mrs	x1, tpidr_el0
    4180:	add	x0, x1, x0
    4184:	ldr	x0, [x0, #80]
    4188:	cbz	x0, 41ec <GOMP_target_update_ext+0xb8>
    418c:	ldr	x1, [x0, #56]
    4190:	cbz	x1, 41ec <GOMP_target_update_ext+0xb8>
    4194:	tbz	w25, #0, 41b8 <GOMP_target_update_ext+0x84>
    4198:	adrp	x1, 0 <gomp_tls_data>
    419c:	ldr	x1, [x1]
    41a0:	mrs	x2, tpidr_el0
    41a4:	add	x1, x2, x1
    41a8:	ldr	x1, [x1, #16]
    41ac:	cbz	x1, 41e4 <GOMP_target_update_ext+0xb0>
    41b0:	ldrb	w1, [x0, #205]
    41b4:	cbz	w1, 4268 <GOMP_target_update_ext+0x134>
    41b8:	adrp	x1, 0 <gomp_tls_data>
    41bc:	ldr	x1, [x1]
    41c0:	mrs	x2, tpidr_el0
    41c4:	add	x1, x2, x1
    41c8:	ldr	x1, [x1, #16]
    41cc:	cmp	x1, #0x0
    41d0:	cset	w3, ne  // ne = any
    41d4:	adrp	x2, 0 <gomp_cancel_var>
    41d8:	ldrb	w2, [x2]
    41dc:	tst	w3, w2
    41e0:	b.ne	42a0 <GOMP_target_update_ext+0x16c>  // b.any
    41e4:	mov	x0, x20
    41e8:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    41ec:	cbz	x19, 424c <GOMP_target_update_ext+0x118>
    41f0:	ldr	w0, [x19, #8]
    41f4:	mov	w1, #0x5                   	// #5
    41f8:	and	w0, w0, w1
    41fc:	cmp	w0, #0x4
    4200:	b.ne	424c <GOMP_target_update_ext+0x118>  // b.any
    4204:	adrp	x0, 0 <gomp_tls_data>
    4208:	ldr	x0, [x0]
    420c:	mrs	x1, tpidr_el0
    4210:	add	x0, x1, x0
    4214:	ldr	x0, [x0, #16]
    4218:	cmp	x0, #0x0
    421c:	cset	w2, ne  // ne = any
    4220:	adrp	x1, 0 <gomp_cancel_var>
    4224:	ldrb	w1, [x1]
    4228:	tst	w2, w1
    422c:	b.ne	42d4 <GOMP_target_update_ext+0x1a0>  // b.any
    4230:	mov	w5, #0x1                   	// #1
    4234:	mov	x4, x24
    4238:	mov	x3, x23
    423c:	mov	x2, x22
    4240:	mov	x1, x21
    4244:	mov	x0, x19
    4248:	bl	c30 <gomp_update>
    424c:	ldp	x19, x20, [sp, #32]
    4250:	ldp	x21, x22, [sp, #48]
    4254:	ldp	x23, x24, [sp, #64]
    4258:	ldr	x25, [sp, #80]
    425c:	ldp	x29, x30, [sp, #16]
    4260:	add	sp, sp, #0x60
    4264:	ret
    4268:	str	wzr, [sp, #8]
    426c:	str	xzr, [sp]
    4270:	mov	x7, x20
    4274:	orr	w6, w25, #0x80000000
    4278:	mov	x5, x24
    427c:	mov	x4, x23
    4280:	mov	x3, x22
    4284:	mov	x2, x21
    4288:	mov	x1, #0x0                   	// #0
    428c:	mov	x0, x19
    4290:	bl	0 <gomp_create_target_task>
    4294:	and	w0, w0, #0xff
    4298:	cbz	w0, 41ec <GOMP_target_update_ext+0xb8>
    429c:	b	424c <GOMP_target_update_ext+0x118>
    42a0:	ldr	w1, [x1, #132]
    42a4:	tbnz	w1, #2, 424c <GOMP_target_update_ext+0x118>
    42a8:	ldr	x0, [x0, #40]
    42ac:	cbz	x0, 41e4 <GOMP_target_update_ext+0xb0>
    42b0:	ldrb	w1, [x0, #49]
    42b4:	cbnz	w1, 424c <GOMP_target_update_ext+0x118>
    42b8:	ldrb	w1, [x0, #50]
    42bc:	cbz	w1, 41e4 <GOMP_target_update_ext+0xb0>
    42c0:	ldr	x0, [x0]
    42c4:	cbz	x0, 41e4 <GOMP_target_update_ext+0xb0>
    42c8:	ldrb	w0, [x0, #49]
    42cc:	cbz	w0, 41e4 <GOMP_target_update_ext+0xb0>
    42d0:	b	424c <GOMP_target_update_ext+0x118>
    42d4:	ldr	w0, [x0, #132]
    42d8:	tbnz	w0, #2, 424c <GOMP_target_update_ext+0x118>
    42dc:	adrp	x0, 0 <gomp_tls_data>
    42e0:	ldr	x0, [x0]
    42e4:	mrs	x1, tpidr_el0
    42e8:	add	x0, x1, x0
    42ec:	ldr	x0, [x0, #80]
    42f0:	ldr	x0, [x0, #40]
    42f4:	cbz	x0, 4230 <GOMP_target_update_ext+0xfc>
    42f8:	ldrb	w1, [x0, #49]
    42fc:	cbnz	w1, 424c <GOMP_target_update_ext+0x118>
    4300:	ldrb	w1, [x0, #50]
    4304:	cbz	w1, 4230 <GOMP_target_update_ext+0xfc>
    4308:	ldr	x0, [x0]
    430c:	cbz	x0, 4230 <GOMP_target_update_ext+0xfc>
    4310:	ldrb	w0, [x0, #49]
    4314:	cbz	w0, 4230 <GOMP_target_update_ext+0xfc>
    4318:	b	424c <GOMP_target_update_ext+0x118>

000000000000431c <GOMP_target_enter_exit_data>:
    431c:	sub	sp, sp, #0x70
    4320:	stp	x29, x30, [sp, #16]
    4324:	add	x29, sp, #0x10
    4328:	stp	x19, x20, [sp, #32]
    432c:	stp	x21, x22, [sp, #48]
    4330:	stp	x23, x24, [sp, #64]
    4334:	stp	x25, x26, [sp, #80]
    4338:	mov	x23, x1
    433c:	mov	x24, x2
    4340:	mov	x22, x3
    4344:	mov	x20, x4
    4348:	mov	w25, w5
    434c:	mov	x19, x6
    4350:	bl	35cc <resolve_device>
    4354:	mov	x21, x0
    4358:	cbz	x19, 43d4 <GOMP_target_enter_exit_data+0xb8>
    435c:	adrp	x0, 0 <gomp_tls_data>
    4360:	ldr	x0, [x0]
    4364:	mrs	x1, tpidr_el0
    4368:	add	x0, x1, x0
    436c:	ldr	x0, [x0, #80]
    4370:	cbz	x0, 43d4 <GOMP_target_enter_exit_data+0xb8>
    4374:	ldr	x1, [x0, #56]
    4378:	cbz	x1, 43d4 <GOMP_target_enter_exit_data+0xb8>
    437c:	tbz	w25, #0, 43a0 <GOMP_target_enter_exit_data+0x84>
    4380:	adrp	x1, 0 <gomp_tls_data>
    4384:	ldr	x1, [x1]
    4388:	mrs	x2, tpidr_el0
    438c:	add	x1, x2, x1
    4390:	ldr	x1, [x1, #16]
    4394:	cbz	x1, 43cc <GOMP_target_enter_exit_data+0xb0>
    4398:	ldrb	w1, [x0, #205]
    439c:	cbz	w1, 4438 <GOMP_target_enter_exit_data+0x11c>
    43a0:	adrp	x1, 0 <gomp_tls_data>
    43a4:	ldr	x1, [x1]
    43a8:	mrs	x2, tpidr_el0
    43ac:	add	x1, x2, x1
    43b0:	ldr	x1, [x1, #16]
    43b4:	cmp	x1, #0x0
    43b8:	cset	w3, ne  // ne = any
    43bc:	adrp	x2, 0 <gomp_cancel_var>
    43c0:	ldrb	w2, [x2]
    43c4:	tst	w3, w2
    43c8:	b.ne	4470 <GOMP_target_enter_exit_data+0x154>  // b.any
    43cc:	mov	x0, x19
    43d0:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    43d4:	cbz	x21, 4568 <GOMP_target_enter_exit_data+0x24c>
    43d8:	ldr	w0, [x21, #8]
    43dc:	mov	w1, #0x5                   	// #5
    43e0:	and	w0, w0, w1
    43e4:	cmp	w0, #0x4
    43e8:	b.ne	4568 <GOMP_target_enter_exit_data+0x24c>  // b.any
    43ec:	adrp	x0, 0 <gomp_tls_data>
    43f0:	ldr	x0, [x0]
    43f4:	mrs	x1, tpidr_el0
    43f8:	add	x0, x1, x0
    43fc:	ldr	x0, [x0, #16]
    4400:	cmp	x0, #0x0
    4404:	cset	w2, ne  // ne = any
    4408:	adrp	x1, 0 <gomp_cancel_var>
    440c:	ldrb	w1, [x1]
    4410:	tst	w2, w1
    4414:	b.ne	44a4 <GOMP_target_enter_exit_data+0x188>  // b.any
    4418:	tbnz	w25, #1, 4584 <GOMP_target_enter_exit_data+0x268>
    441c:	cbz	x23, 4568 <GOMP_target_enter_exit_data+0x24c>
    4420:	str	x27, [sp, #96]
    4424:	mov	x19, #0x0                   	// #0
    4428:	mov	w26, #0x3                   	// #3
    442c:	mov	w25, #0x1                   	// #1
    4430:	mov	x27, #0x1                   	// #1
    4434:	b	451c <GOMP_target_enter_exit_data+0x200>
    4438:	str	wzr, [sp, #8]
    443c:	str	xzr, [sp]
    4440:	mov	x7, x19
    4444:	mov	w6, w25
    4448:	mov	x5, x20
    444c:	mov	x4, x22
    4450:	mov	x3, x24
    4454:	mov	x2, x23
    4458:	mov	x1, #0x0                   	// #0
    445c:	mov	x0, x21
    4460:	bl	0 <gomp_create_target_task>
    4464:	and	w0, w0, #0xff
    4468:	cbz	w0, 43d4 <GOMP_target_enter_exit_data+0xb8>
    446c:	b	4568 <GOMP_target_enter_exit_data+0x24c>
    4470:	ldr	w1, [x1, #132]
    4474:	tbnz	w1, #2, 4568 <GOMP_target_enter_exit_data+0x24c>
    4478:	ldr	x0, [x0, #40]
    447c:	cbz	x0, 43cc <GOMP_target_enter_exit_data+0xb0>
    4480:	ldrb	w1, [x0, #49]
    4484:	cbnz	w1, 4568 <GOMP_target_enter_exit_data+0x24c>
    4488:	ldrb	w1, [x0, #50]
    448c:	cbz	w1, 43cc <GOMP_target_enter_exit_data+0xb0>
    4490:	ldr	x0, [x0]
    4494:	cbz	x0, 43cc <GOMP_target_enter_exit_data+0xb0>
    4498:	ldrb	w0, [x0, #49]
    449c:	cbz	w0, 43cc <GOMP_target_enter_exit_data+0xb0>
    44a0:	b	4568 <GOMP_target_enter_exit_data+0x24c>
    44a4:	ldr	w0, [x0, #132]
    44a8:	tbnz	w0, #2, 4568 <GOMP_target_enter_exit_data+0x24c>
    44ac:	adrp	x0, 0 <gomp_tls_data>
    44b0:	ldr	x0, [x0]
    44b4:	mrs	x1, tpidr_el0
    44b8:	add	x0, x1, x0
    44bc:	ldr	x0, [x0, #80]
    44c0:	ldr	x0, [x0, #40]
    44c4:	cbz	x0, 4418 <GOMP_target_enter_exit_data+0xfc>
    44c8:	ldrb	w1, [x0, #49]
    44cc:	cbnz	w1, 4568 <GOMP_target_enter_exit_data+0x24c>
    44d0:	ldrb	w1, [x0, #50]
    44d4:	cbz	w1, 4418 <GOMP_target_enter_exit_data+0xfc>
    44d8:	ldr	x0, [x0]
    44dc:	cbz	x0, 4418 <GOMP_target_enter_exit_data+0xfc>
    44e0:	ldrb	w0, [x0, #49]
    44e4:	cbz	w0, 4418 <GOMP_target_enter_exit_data+0xfc>
    44e8:	b	4568 <GOMP_target_enter_exit_data+0x24c>
    44ec:	lsl	x0, x19, #3
    44f0:	mov	w7, w26
    44f4:	mov	w6, w25
    44f8:	add	x4, x22, x0
    44fc:	mov	x3, #0x0                   	// #0
    4500:	add	x2, x24, x0
    4504:	mov	x1, x27
    4508:	mov	x0, x21
    450c:	bl	15d0 <gomp_map_vars>
    4510:	add	x19, x19, #0x1
    4514:	cmp	x23, x19
    4518:	b.ls	4564 <GOMP_target_enter_exit_data+0x248>  // b.plast
    451c:	lsl	x0, x19, #1
    4520:	add	x5, x20, x0
    4524:	ldrb	w0, [x20, x0]
    4528:	cmp	w0, #0x1c
    452c:	b.ne	44ec <GOMP_target_enter_exit_data+0x1d0>  // b.any
    4530:	lsl	x2, x19, #3
    4534:	ldr	x1, [x22, x19, lsl #3]
    4538:	mov	w7, w26
    453c:	mov	w6, w25
    4540:	add	x4, x22, x2
    4544:	mov	x3, #0x0                   	// #0
    4548:	add	x2, x24, x2
    454c:	add	x1, x1, #0x1
    4550:	mov	x0, x21
    4554:	bl	15d0 <gomp_map_vars>
    4558:	ldr	x0, [x22, x19, lsl #3]
    455c:	add	x19, x19, x0
    4560:	b	4510 <GOMP_target_enter_exit_data+0x1f4>
    4564:	ldr	x27, [sp, #96]
    4568:	ldp	x19, x20, [sp, #32]
    456c:	ldp	x21, x22, [sp, #48]
    4570:	ldp	x23, x24, [sp, #64]
    4574:	ldp	x25, x26, [sp, #80]
    4578:	ldp	x29, x30, [sp, #16]
    457c:	add	sp, sp, #0x70
    4580:	ret
    4584:	mov	x4, x20
    4588:	mov	x3, x22
    458c:	mov	x2, x24
    4590:	mov	x1, x23
    4594:	mov	x0, x21
    4598:	bl	984 <gomp_exit_data>
    459c:	b	4568 <GOMP_target_enter_exit_data+0x24c>

00000000000045a0 <gomp_target_task_fn>:
    45a0:	stp	x29, x30, [sp, #-64]!
    45a4:	mov	x29, sp
    45a8:	stp	x19, x20, [sp, #16]
    45ac:	mov	x19, x0
    45b0:	ldr	x20, [x0]
    45b4:	ldr	x1, [x0, #8]
    45b8:	cbz	x1, 46c0 <gomp_target_task_fn+0x120>
    45bc:	cbz	x20, 45c8 <gomp_target_task_fn+0x28>
    45c0:	ldr	w0, [x20, #8]
    45c4:	tbnz	w0, #2, 45ec <gomp_target_task_fn+0x4c>
    45c8:	mov	w0, #0x2                   	// #2
    45cc:	str	w0, [x19, #44]
    45d0:	add	x1, x19, #0x50
    45d4:	ldr	x0, [x19, #8]
    45d8:	bl	4f8 <gomp_target_fallback>
    45dc:	mov	w0, #0x0                   	// #0
    45e0:	ldp	x19, x20, [sp, #16]
    45e4:	ldp	x29, x30, [sp], #64
    45e8:	ret
    45ec:	stp	x21, x22, [sp, #32]
    45f0:	mov	x0, x20
    45f4:	bl	8a4 <gomp_get_target_fn_addr>
    45f8:	mov	x21, x0
    45fc:	cbz	x0, 4664 <gomp_target_task_fn+0xc4>
    4600:	ldr	x1, [x20, #136]
    4604:	cbz	x1, 4614 <gomp_target_task_fn+0x74>
    4608:	blr	x1
    460c:	and	w0, w0, #0xff
    4610:	cbz	w0, 465c <gomp_target_task_fn+0xbc>
    4614:	ldr	w0, [x19, #44]
    4618:	cmp	w0, #0x5
    461c:	b.eq	466c <gomp_target_task_fn+0xcc>  // b.none
    4620:	ldr	w0, [x20, #8]
    4624:	tbz	w0, #0, 4690 <gomp_target_task_fn+0xf0>
    4628:	str	xzr, [x19, #48]
    462c:	add	x2, x19, #0x50
    4630:	mov	w0, #0x3                   	// #3
    4634:	str	w0, [x19, #44]
    4638:	ldr	x5, [x20, #152]
    463c:	mov	x4, x19
    4640:	ldr	x3, [x19, #72]
    4644:	mov	x1, x21
    4648:	ldr	w0, [x20, #12]
    464c:	blr	x5
    4650:	mov	w0, #0x1                   	// #1
    4654:	ldp	x21, x22, [sp, #32]
    4658:	b	45e0 <gomp_target_task_fn+0x40>
    465c:	ldp	x21, x22, [sp, #32]
    4660:	b	45c8 <gomp_target_task_fn+0x28>
    4664:	ldp	x21, x22, [sp, #32]
    4668:	b	45c8 <gomp_target_task_fn+0x28>
    466c:	ldr	x2, [x19, #48]
    4670:	mov	w0, #0x0                   	// #0
    4674:	cbz	x2, 4808 <gomp_target_task_fn+0x268>
    4678:	mov	w1, #0x1                   	// #1
    467c:	mov	x0, x2
    4680:	bl	2f08 <gomp_unmap_vars>
    4684:	mov	w0, #0x0                   	// #0
    4688:	ldp	x21, x22, [sp, #32]
    468c:	b	45e0 <gomp_target_task_fn+0x40>
    4690:	mov	w7, #0x1                   	// #1
    4694:	mov	w6, w7
    4698:	ldr	x5, [x19, #32]
    469c:	ldr	x4, [x19, #24]
    46a0:	mov	x3, #0x0                   	// #0
    46a4:	add	x2, x19, #0x50
    46a8:	ldr	x1, [x19, #16]
    46ac:	mov	x0, x20
    46b0:	bl	15d0 <gomp_map_vars>
    46b4:	str	x0, [x19, #48]
    46b8:	ldr	x2, [x0, #16]
    46bc:	b	4630 <gomp_target_task_fn+0x90>
    46c0:	cbz	x20, 47f8 <gomp_target_task_fn+0x258>
    46c4:	ldr	w1, [x20, #8]
    46c8:	mov	w0, #0x5                   	// #5
    46cc:	and	w1, w1, w0
    46d0:	mov	w0, #0x0                   	// #0
    46d4:	cmp	w1, #0x4
    46d8:	b.ne	45e0 <gomp_target_task_fn+0x40>  // b.any
    46dc:	ldr	w0, [x19, #40]
    46e0:	tbnz	w0, #31, 470c <gomp_target_task_fn+0x16c>
    46e4:	tbnz	w0, #1, 47d8 <gomp_target_task_fn+0x238>
    46e8:	ldr	x0, [x19, #16]
    46ec:	cbz	x0, 4800 <gomp_target_task_fn+0x260>
    46f0:	stp	x21, x22, [sp, #32]
    46f4:	stp	x23, x24, [sp, #48]
    46f8:	mov	x21, #0x0                   	// #0
    46fc:	mov	w23, #0x3                   	// #3
    4700:	mov	w22, #0x1                   	// #1
    4704:	mov	x24, #0x1                   	// #1
    4708:	b	4770 <gomp_target_task_fn+0x1d0>
    470c:	mov	w5, #0x1                   	// #1
    4710:	ldr	x4, [x19, #32]
    4714:	ldr	x3, [x19, #24]
    4718:	add	x2, x19, #0x50
    471c:	ldr	x1, [x19, #16]
    4720:	mov	x0, x20
    4724:	bl	c30 <gomp_update>
    4728:	mov	w0, #0x0                   	// #0
    472c:	b	45e0 <gomp_target_task_fn+0x40>
    4730:	add	x2, x21, #0xa
    4734:	lsl	x2, x2, #3
    4738:	sub	x0, x2, #0x50
    473c:	ldr	x4, [x19, #24]
    4740:	mov	w7, w23
    4744:	mov	w6, w22
    4748:	add	x4, x4, x0
    474c:	mov	x3, #0x0                   	// #0
    4750:	add	x2, x19, x2
    4754:	mov	x1, x24
    4758:	mov	x0, x20
    475c:	bl	15d0 <gomp_map_vars>
    4760:	add	x21, x21, #0x1
    4764:	ldr	x0, [x19, #16]
    4768:	cmp	x0, x21
    476c:	b.ls	47c8 <gomp_target_task_fn+0x228>  // b.plast
    4770:	lsl	x0, x21, #1
    4774:	ldr	x1, [x19, #32]
    4778:	add	x5, x1, x0
    477c:	ldrb	w0, [x1, x0]
    4780:	cmp	w0, #0x1c
    4784:	b.ne	4730 <gomp_target_task_fn+0x190>  // b.any
    4788:	lsl	x0, x21, #3
    478c:	ldr	x4, [x19, #24]
    4790:	add	x2, x0, #0x50
    4794:	ldr	x1, [x4, x21, lsl #3]
    4798:	mov	w7, w23
    479c:	mov	w6, w22
    47a0:	add	x4, x4, x0
    47a4:	mov	x3, #0x0                   	// #0
    47a8:	add	x2, x19, x2
    47ac:	add	x1, x1, #0x1
    47b0:	mov	x0, x20
    47b4:	bl	15d0 <gomp_map_vars>
    47b8:	ldr	x0, [x19, #24]
    47bc:	ldr	x0, [x0, x21, lsl #3]
    47c0:	add	x21, x21, x0
    47c4:	b	4760 <gomp_target_task_fn+0x1c0>
    47c8:	mov	w0, #0x0                   	// #0
    47cc:	ldp	x21, x22, [sp, #32]
    47d0:	ldp	x23, x24, [sp, #48]
    47d4:	b	45e0 <gomp_target_task_fn+0x40>
    47d8:	ldr	x4, [x19, #32]
    47dc:	ldr	x3, [x19, #24]
    47e0:	add	x2, x19, #0x50
    47e4:	ldr	x1, [x19, #16]
    47e8:	mov	x0, x20
    47ec:	bl	984 <gomp_exit_data>
    47f0:	mov	w0, #0x0                   	// #0
    47f4:	b	45e0 <gomp_target_task_fn+0x40>
    47f8:	mov	w0, #0x0                   	// #0
    47fc:	b	45e0 <gomp_target_task_fn+0x40>
    4800:	mov	w0, #0x0                   	// #0
    4804:	b	45e0 <gomp_target_task_fn+0x40>
    4808:	ldp	x21, x22, [sp, #32]
    480c:	b	45e0 <gomp_target_task_fn+0x40>

0000000000004810 <GOMP_teams>:
    4810:	cbz	w1, 4860 <GOMP_teams+0x50>
    4814:	stp	x29, x30, [sp, #-32]!
    4818:	mov	x29, sp
    481c:	str	x19, [sp, #16]
    4820:	mov	w19, w1
    4824:	adrp	x0, 0 <gomp_tls_data>
    4828:	ldr	x0, [x0]
    482c:	mrs	x1, tpidr_el0
    4830:	add	x0, x1, x0
    4834:	ldr	x0, [x0, #80]
    4838:	cbz	x0, 4858 <GOMP_teams+0x48>
    483c:	add	x0, x0, #0x90
    4840:	cmp	w19, #0x0
    4844:	csinv	w19, w19, wzr, ge  // ge = tcont
    4848:	str	w19, [x0, #20]
    484c:	ldr	x19, [sp, #16]
    4850:	ldp	x29, x30, [sp], #32
    4854:	ret
    4858:	bl	0 <gomp_new_icv>
    485c:	b	4840 <GOMP_teams+0x30>
    4860:	ret

0000000000004864 <omp_target_alloc>:
    4864:	stp	x29, x30, [sp, #-48]!
    4868:	mov	x29, sp
    486c:	stp	x19, x20, [sp, #16]
    4870:	str	x21, [sp, #32]
    4874:	mov	x21, x0
    4878:	cmn	w1, #0x2
    487c:	b.eq	4904 <omp_target_alloc+0xa0>  // b.none
    4880:	mov	w0, w1
    4884:	mov	x19, #0x0                   	// #0
    4888:	tbnz	w1, #31, 48f0 <omp_target_alloc+0x8c>
    488c:	bl	35cc <resolve_device>
    4890:	mov	x19, x0
    4894:	cbz	x0, 48f0 <omp_target_alloc+0x8c>
    4898:	ldr	w1, [x0, #8]
    489c:	mov	w0, #0x5                   	// #5
    48a0:	and	w1, w1, w0
    48a4:	add	x20, x19, #0xa8
    48a8:	mov	w0, #0x1                   	// #1
    48ac:	cmp	w1, #0x4
    48b0:	b.ne	4910 <omp_target_alloc+0xac>  // b.any
    48b4:	ldaxr	w1, [x20]
    48b8:	cbnz	w1, 48c4 <omp_target_alloc+0x60>
    48bc:	stxr	w2, w0, [x20]
    48c0:	cbnz	w2, 48b4 <omp_target_alloc+0x50>
    48c4:	cmp	w1, #0x0
    48c8:	b.ne	4920 <omp_target_alloc+0xbc>  // b.any
    48cc:	ldr	x2, [x19, #96]
    48d0:	mov	x1, x21
    48d4:	ldr	w0, [x19, #12]
    48d8:	blr	x2
    48dc:	mov	x19, x0
    48e0:	ldxr	w0, [x20]
    48e4:	stlxr	w1, wzr, [x20]
    48e8:	cbnz	w1, 48e0 <omp_target_alloc+0x7c>
    48ec:	tbnz	w0, #31, 492c <omp_target_alloc+0xc8>
    48f0:	mov	x0, x19
    48f4:	ldp	x19, x20, [sp, #16]
    48f8:	ldr	x21, [sp, #32]
    48fc:	ldp	x29, x30, [sp], #48
    4900:	ret
    4904:	bl	0 <malloc>
    4908:	mov	x19, x0
    490c:	b	48f0 <omp_target_alloc+0x8c>
    4910:	mov	x0, x21
    4914:	bl	0 <malloc>
    4918:	mov	x19, x0
    491c:	b	48f0 <omp_target_alloc+0x8c>
    4920:	mov	x0, x20
    4924:	bl	0 <gomp_mutex_lock_slow>
    4928:	b	48cc <omp_target_alloc+0x68>
    492c:	mov	x0, x20
    4930:	bl	0 <gomp_mutex_unlock_slow>
    4934:	b	48f0 <omp_target_alloc+0x8c>

0000000000004938 <omp_target_free>:
    4938:	cbz	x0, 49fc <omp_target_free+0xc4>
    493c:	stp	x29, x30, [sp, #-48]!
    4940:	mov	x29, sp
    4944:	stp	x19, x20, [sp, #16]
    4948:	mov	x19, x0
    494c:	cmn	w1, #0x2
    4950:	b.eq	49cc <omp_target_free+0x94>  // b.none
    4954:	tbnz	w1, #31, 49c0 <omp_target_free+0x88>
    4958:	mov	w0, w1
    495c:	bl	35cc <resolve_device>
    4960:	mov	x20, x0
    4964:	cbz	x0, 49c0 <omp_target_free+0x88>
    4968:	ldr	w0, [x0, #8]
    496c:	mov	w1, #0x5                   	// #5
    4970:	and	w0, w0, w1
    4974:	cmp	w0, #0x4
    4978:	b.ne	49d4 <omp_target_free+0x9c>  // b.any
    497c:	str	x21, [sp, #32]
    4980:	add	x21, x20, #0xa8
    4984:	mov	w0, #0x1                   	// #1
    4988:	ldaxr	w1, [x21]
    498c:	cbnz	w1, 4998 <omp_target_free+0x60>
    4990:	stxr	w2, w0, [x21]
    4994:	cbnz	w2, 4988 <omp_target_free+0x50>
    4998:	cmp	w1, #0x0
    499c:	b.ne	49e0 <omp_target_free+0xa8>  // b.any
    49a0:	mov	x1, x19
    49a4:	mov	x0, x20
    49a8:	bl	468 <gomp_free_device_memory>
    49ac:	ldxr	w0, [x21]
    49b0:	stlxr	w1, wzr, [x21]
    49b4:	cbnz	w1, 49ac <omp_target_free+0x74>
    49b8:	tbnz	w0, #31, 49ec <omp_target_free+0xb4>
    49bc:	ldr	x21, [sp, #32]
    49c0:	ldp	x19, x20, [sp, #16]
    49c4:	ldp	x29, x30, [sp], #48
    49c8:	ret
    49cc:	bl	0 <free>
    49d0:	b	49c0 <omp_target_free+0x88>
    49d4:	mov	x0, x19
    49d8:	bl	0 <free>
    49dc:	b	49c0 <omp_target_free+0x88>
    49e0:	mov	x0, x21
    49e4:	bl	0 <gomp_mutex_lock_slow>
    49e8:	b	49a0 <omp_target_free+0x68>
    49ec:	mov	x0, x21
    49f0:	bl	0 <gomp_mutex_unlock_slow>
    49f4:	ldr	x21, [sp, #32]
    49f8:	b	49c0 <omp_target_free+0x88>
    49fc:	ret

0000000000004a00 <omp_target_is_present>:
    4a00:	stp	x29, x30, [sp, #-112]!
    4a04:	mov	x29, sp
    4a08:	stp	x19, x20, [sp, #16]
    4a0c:	cmp	x0, #0x0
    4a10:	ccmn	w1, #0x2, #0x4, ne  // ne = any
    4a14:	mov	w20, #0x1                   	// #1
    4a18:	b.eq	4ab4 <omp_target_is_present+0xb4>  // b.none
    4a1c:	mov	x19, x0
    4a20:	mov	w20, #0x0                   	// #0
    4a24:	tbnz	w1, #31, 4ab4 <omp_target_is_present+0xb4>
    4a28:	stp	x21, x22, [sp, #32]
    4a2c:	mov	w0, w1
    4a30:	bl	35cc <resolve_device>
    4a34:	mov	x21, x0
    4a38:	cbz	x0, 4ae0 <omp_target_is_present+0xe0>
    4a3c:	ldr	w0, [x0, #8]
    4a40:	mov	w1, #0x5                   	// #5
    4a44:	and	w0, w0, w1
    4a48:	mov	w20, #0x1                   	// #1
    4a4c:	cmp	w0, #0x4
    4a50:	b.ne	4aec <omp_target_is_present+0xec>  // b.any
    4a54:	add	x22, x21, #0xa8
    4a58:	mov	w0, w20
    4a5c:	ldaxr	w1, [x22]
    4a60:	cbnz	w1, 4a6c <omp_target_is_present+0x6c>
    4a64:	stxr	w2, w0, [x22]
    4a68:	cbnz	w2, 4a5c <omp_target_is_present+0x5c>
    4a6c:	cmp	w1, #0x0
    4a70:	b.ne	4ac4 <omp_target_is_present+0xc4>  // b.any
    4a74:	str	x19, [sp, #56]
    4a78:	add	x19, x19, #0x1
    4a7c:	str	x19, [sp, #64]
    4a80:	add	x1, sp, #0x38
    4a84:	add	x0, x21, #0xa0
    4a88:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    4a8c:	ldr	x1, [sp, #64]
    4a90:	sub	x1, x1, #0x1
    4a94:	str	x1, [sp, #64]
    4a98:	cmp	x0, #0x0
    4a9c:	cset	w20, ne  // ne = any
    4aa0:	ldxr	w0, [x22]
    4aa4:	stlxr	w1, wzr, [x22]
    4aa8:	cbnz	w1, 4aa0 <omp_target_is_present+0xa0>
    4aac:	tbnz	w0, #31, 4ad0 <omp_target_is_present+0xd0>
    4ab0:	ldp	x21, x22, [sp, #32]
    4ab4:	mov	w0, w20
    4ab8:	ldp	x19, x20, [sp, #16]
    4abc:	ldp	x29, x30, [sp], #112
    4ac0:	ret
    4ac4:	mov	x0, x22
    4ac8:	bl	0 <gomp_mutex_lock_slow>
    4acc:	b	4a74 <omp_target_is_present+0x74>
    4ad0:	mov	x0, x22
    4ad4:	bl	0 <gomp_mutex_unlock_slow>
    4ad8:	ldp	x21, x22, [sp, #32]
    4adc:	b	4ab4 <omp_target_is_present+0xb4>
    4ae0:	mov	w20, #0x0                   	// #0
    4ae4:	ldp	x21, x22, [sp, #32]
    4ae8:	b	4ab4 <omp_target_is_present+0xb4>
    4aec:	ldp	x21, x22, [sp, #32]
    4af0:	b	4ab4 <omp_target_is_present+0xb4>

0000000000004af4 <omp_target_memcpy>:
    4af4:	stp	x29, x30, [sp, #-80]!
    4af8:	mov	x29, sp
    4afc:	stp	x19, x20, [sp, #16]
    4b00:	stp	x21, x22, [sp, #32]
    4b04:	stp	x23, x24, [sp, #48]
    4b08:	str	x25, [sp, #64]
    4b0c:	mov	x21, x0
    4b10:	mov	x22, x1
    4b14:	mov	x23, x2
    4b18:	mov	x24, x3
    4b1c:	mov	x25, x4
    4b20:	mov	w19, w6
    4b24:	cmn	w5, #0x2
    4b28:	b.eq	4b58 <omp_target_memcpy+0x64>  // b.none
    4b2c:	mov	w0, #0x16                  	// #22
    4b30:	tbnz	w5, #31, 4ccc <omp_target_memcpy+0x1d8>
    4b34:	mov	w0, w5
    4b38:	bl	35cc <resolve_device>
    4b3c:	mov	x20, x0
    4b40:	cbz	x0, 4cac <omp_target_memcpy+0x1b8>
    4b44:	ldr	w0, [x0, #8]
    4b48:	mov	w1, #0x5                   	// #5
    4b4c:	and	w0, w0, w1
    4b50:	cmp	w0, #0x4
    4b54:	b.eq	4ce4 <omp_target_memcpy+0x1f0>  // b.none
    4b58:	mov	x20, #0x0                   	// #0
    4b5c:	cmn	w19, #0x2
    4b60:	b.eq	4b94 <omp_target_memcpy+0xa0>  // b.none
    4b64:	mov	w0, #0x16                  	// #22
    4b68:	tbnz	w19, #31, 4ccc <omp_target_memcpy+0x1d8>
    4b6c:	mov	w0, w19
    4b70:	bl	35cc <resolve_device>
    4b74:	mov	x19, x0
    4b78:	cbz	x0, 4cb4 <omp_target_memcpy+0x1c0>
    4b7c:	ldr	w0, [x0, #8]
    4b80:	mov	w1, #0x5                   	// #5
    4b84:	and	w0, w0, w1
    4b88:	cmp	w0, #0x4
    4b8c:	b.eq	4cbc <omp_target_memcpy+0x1c8>  // b.none
    4b90:	cbnz	x20, 4cec <omp_target_memcpy+0x1f8>
    4b94:	mov	x2, x23
    4b98:	add	x1, x22, x25
    4b9c:	add	x0, x21, x24
    4ba0:	bl	0 <memcpy>
    4ba4:	mov	w0, #0x0                   	// #0
    4ba8:	b	4ccc <omp_target_memcpy+0x1d8>
    4bac:	mov	x0, x19
    4bb0:	bl	0 <gomp_mutex_lock_slow>
    4bb4:	b	4d0c <omp_target_memcpy+0x218>
    4bb8:	mov	x0, x19
    4bbc:	bl	0 <gomp_mutex_unlock_slow>
    4bc0:	b	4d38 <omp_target_memcpy+0x244>
    4bc4:	add	x20, x19, #0xa8
    4bc8:	mov	w0, #0x1                   	// #1
    4bcc:	ldaxr	w1, [x20]
    4bd0:	cbnz	w1, 4bdc <omp_target_memcpy+0xe8>
    4bd4:	stxr	w2, w0, [x20]
    4bd8:	cbnz	w2, 4bcc <omp_target_memcpy+0xd8>
    4bdc:	cmp	w1, #0x0
    4be0:	b.ne	4c20 <omp_target_memcpy+0x12c>  // b.any
    4be4:	ldr	x4, [x19, #112]
    4be8:	mov	x3, x23
    4bec:	add	x2, x22, x25
    4bf0:	add	x1, x21, x24
    4bf4:	ldr	w0, [x19, #12]
    4bf8:	blr	x4
    4bfc:	and	w19, w0, #0xff
    4c00:	ldxr	w0, [x20]
    4c04:	stlxr	w1, wzr, [x20]
    4c08:	cbnz	w1, 4c00 <omp_target_memcpy+0x10c>
    4c0c:	tbnz	w0, #31, 4c2c <omp_target_memcpy+0x138>
    4c10:	cmp	w19, #0x0
    4c14:	mov	w0, #0x16                  	// #22
    4c18:	csel	w0, w0, wzr, eq  // eq = none
    4c1c:	b	4ccc <omp_target_memcpy+0x1d8>
    4c20:	mov	x0, x20
    4c24:	bl	0 <gomp_mutex_lock_slow>
    4c28:	b	4be4 <omp_target_memcpy+0xf0>
    4c2c:	mov	x0, x20
    4c30:	bl	0 <gomp_mutex_unlock_slow>
    4c34:	b	4c10 <omp_target_memcpy+0x11c>
    4c38:	add	x20, x19, #0xa8
    4c3c:	mov	w0, #0x1                   	// #1
    4c40:	ldaxr	w1, [x20]
    4c44:	cbnz	w1, 4c50 <omp_target_memcpy+0x15c>
    4c48:	stxr	w2, w0, [x20]
    4c4c:	cbnz	w2, 4c40 <omp_target_memcpy+0x14c>
    4c50:	cmp	w1, #0x0
    4c54:	b.ne	4c94 <omp_target_memcpy+0x1a0>  // b.any
    4c58:	ldr	x4, [x19, #128]
    4c5c:	mov	x3, x23
    4c60:	add	x2, x22, x25
    4c64:	add	x1, x21, x24
    4c68:	ldr	w0, [x19, #12]
    4c6c:	blr	x4
    4c70:	and	w19, w0, #0xff
    4c74:	ldxr	w0, [x20]
    4c78:	stlxr	w1, wzr, [x20]
    4c7c:	cbnz	w1, 4c74 <omp_target_memcpy+0x180>
    4c80:	tbnz	w0, #31, 4ca0 <omp_target_memcpy+0x1ac>
    4c84:	cmp	w19, #0x0
    4c88:	mov	w0, #0x16                  	// #22
    4c8c:	csel	w0, w0, wzr, eq  // eq = none
    4c90:	b	4ccc <omp_target_memcpy+0x1d8>
    4c94:	mov	x0, x20
    4c98:	bl	0 <gomp_mutex_lock_slow>
    4c9c:	b	4c58 <omp_target_memcpy+0x164>
    4ca0:	mov	x0, x20
    4ca4:	bl	0 <gomp_mutex_unlock_slow>
    4ca8:	b	4c84 <omp_target_memcpy+0x190>
    4cac:	mov	w0, #0x16                  	// #22
    4cb0:	b	4ccc <omp_target_memcpy+0x1d8>
    4cb4:	mov	w0, #0x16                  	// #22
    4cb8:	b	4ccc <omp_target_memcpy+0x1d8>
    4cbc:	cbz	x20, 4bc4 <omp_target_memcpy+0xd0>
    4cc0:	mov	w0, #0x16                  	// #22
    4cc4:	cmp	x19, x20
    4cc8:	b.eq	4c38 <omp_target_memcpy+0x144>  // b.none
    4ccc:	ldp	x19, x20, [sp, #16]
    4cd0:	ldp	x21, x22, [sp, #32]
    4cd4:	ldp	x23, x24, [sp, #48]
    4cd8:	ldr	x25, [sp, #64]
    4cdc:	ldp	x29, x30, [sp], #80
    4ce0:	ret
    4ce4:	cmn	w19, #0x2
    4ce8:	b.ne	4b64 <omp_target_memcpy+0x70>  // b.any
    4cec:	add	x19, x20, #0xa8
    4cf0:	mov	w0, #0x1                   	// #1
    4cf4:	ldaxr	w1, [x19]
    4cf8:	cbnz	w1, 4d04 <omp_target_memcpy+0x210>
    4cfc:	stxr	w2, w0, [x19]
    4d00:	cbnz	w2, 4cf4 <omp_target_memcpy+0x200>
    4d04:	cmp	w1, #0x0
    4d08:	b.ne	4bac <omp_target_memcpy+0xb8>  // b.any
    4d0c:	ldr	x4, [x20, #120]
    4d10:	mov	x3, x23
    4d14:	add	x2, x22, x25
    4d18:	add	x1, x21, x24
    4d1c:	ldr	w0, [x20, #12]
    4d20:	blr	x4
    4d24:	and	w20, w0, #0xff
    4d28:	ldxr	w0, [x19]
    4d2c:	stlxr	w1, wzr, [x19]
    4d30:	cbnz	w1, 4d28 <omp_target_memcpy+0x234>
    4d34:	tbnz	w0, #31, 4bb8 <omp_target_memcpy+0xc4>
    4d38:	cmp	w20, #0x0
    4d3c:	mov	w0, #0x16                  	// #22
    4d40:	csel	w0, w0, wzr, eq  // eq = none
    4d44:	b	4ccc <omp_target_memcpy+0x1d8>

0000000000004d48 <omp_target_memcpy_rect>:
    4d48:	sub	sp, sp, #0x90
    4d4c:	stp	x29, x30, [sp, #32]
    4d50:	add	x29, sp, #0x20
    4d54:	stp	x19, x20, [sp, #48]
    4d58:	stp	x25, x26, [sp, #96]
    4d5c:	stp	x27, x28, [sp, #112]
    4d60:	mov	x19, x0
    4d64:	mov	x20, x1
    4d68:	str	x2, [sp, #128]
    4d6c:	str	w3, [sp, #140]
    4d70:	ldr	w0, [sp, #152]
    4d74:	ldr	w27, [sp, #160]
    4d78:	orr	x1, x19, x1
    4d7c:	mov	w25, #0x7fffffff            	// #2147483647
    4d80:	cbz	x1, 4fa0 <omp_target_memcpy_rect+0x258>
    4d84:	stp	x21, x22, [sp, #64]
    4d88:	stp	x23, x24, [sp, #80]
    4d8c:	mov	x21, x4
    4d90:	mov	x22, x5
    4d94:	mov	x23, x6
    4d98:	mov	x24, x7
    4d9c:	cmn	w0, #0x2
    4da0:	b.eq	4dcc <omp_target_memcpy_rect+0x84>  // b.none
    4da4:	mov	w25, #0x16                  	// #22
    4da8:	tbnz	w0, #31, 4fd4 <omp_target_memcpy_rect+0x28c>
    4dac:	bl	35cc <resolve_device>
    4db0:	mov	x26, x0
    4db4:	cbz	x0, 4ebc <omp_target_memcpy_rect+0x174>
    4db8:	ldr	w0, [x0, #8]
    4dbc:	mov	w1, #0x5                   	// #5
    4dc0:	and	w0, w0, w1
    4dc4:	cmp	w0, #0x4
    4dc8:	b.eq	4fc8 <omp_target_memcpy_rect+0x280>  // b.none
    4dcc:	mov	x26, #0x0                   	// #0
    4dd0:	cmn	w27, #0x2
    4dd4:	b.eq	4edc <omp_target_memcpy_rect+0x194>  // b.none
    4dd8:	mov	w25, #0x16                  	// #22
    4ddc:	tbnz	w27, #31, 4fe0 <omp_target_memcpy_rect+0x298>
    4de0:	mov	w0, w27
    4de4:	bl	35cc <resolve_device>
    4de8:	mov	x27, x0
    4dec:	cbz	x0, 4ecc <omp_target_memcpy_rect+0x184>
    4df0:	ldr	w0, [x0, #8]
    4df4:	mov	w1, #0x5                   	// #5
    4df8:	and	w0, w0, w1
    4dfc:	cmp	w0, #0x4
    4e00:	b.eq	4f20 <omp_target_memcpy_rect+0x1d8>  // b.none
    4e04:	cbz	x26, 4edc <omp_target_memcpy_rect+0x194>
    4e08:	add	x27, x26, #0xa8
    4e0c:	mov	w0, #0x1                   	// #1
    4e10:	ldaxr	w1, [x27]
    4e14:	cbnz	w1, 4e20 <omp_target_memcpy_rect+0xd8>
    4e18:	stxr	w2, w0, [x27]
    4e1c:	cbnz	w2, 4e10 <omp_target_memcpy_rect+0xc8>
    4e20:	cmp	w1, #0x0
    4e24:	b.ne	4e88 <omp_target_memcpy_rect+0x140>  // b.any
    4e28:	str	xzr, [sp, #16]
    4e2c:	str	x26, [sp, #8]
    4e30:	ldr	x0, [sp, #144]
    4e34:	str	x0, [sp]
    4e38:	mov	x7, x24
    4e3c:	mov	x6, x23
    4e40:	mov	x5, x22
    4e44:	mov	x4, x21
    4e48:	ldr	w3, [sp, #140]
    4e4c:	ldr	x2, [sp, #128]
    4e50:	mov	x1, x20
    4e54:	mov	x0, x19
    4e58:	bl	18 <omp_target_memcpy_rect_worker>
    4e5c:	mov	w25, w0
    4e60:	ldxr	w0, [x27]
    4e64:	stlxr	w1, wzr, [x27]
    4e68:	cbnz	w1, 4e60 <omp_target_memcpy_rect+0x118>
    4e6c:	tbnz	w0, #31, 4ea8 <omp_target_memcpy_rect+0x160>
    4e70:	ldp	x21, x22, [sp, #64]
    4e74:	ldp	x23, x24, [sp, #80]
    4e78:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4e7c:	mov	x0, x28
    4e80:	bl	0 <gomp_mutex_lock_slow>
    4e84:	b	4f50 <omp_target_memcpy_rect+0x208>
    4e88:	mov	x0, x27
    4e8c:	bl	0 <gomp_mutex_lock_slow>
    4e90:	b	4e28 <omp_target_memcpy_rect+0xe0>
    4e94:	mov	x0, x28
    4e98:	bl	0 <gomp_mutex_unlock_slow>
    4e9c:	ldp	x21, x22, [sp, #64]
    4ea0:	ldp	x23, x24, [sp, #80]
    4ea4:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4ea8:	mov	x0, x27
    4eac:	bl	0 <gomp_mutex_unlock_slow>
    4eb0:	ldp	x21, x22, [sp, #64]
    4eb4:	ldp	x23, x24, [sp, #80]
    4eb8:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4ebc:	mov	w25, #0x16                  	// #22
    4ec0:	ldp	x21, x22, [sp, #64]
    4ec4:	ldp	x23, x24, [sp, #80]
    4ec8:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4ecc:	mov	w25, #0x16                  	// #22
    4ed0:	ldp	x21, x22, [sp, #64]
    4ed4:	ldp	x23, x24, [sp, #80]
    4ed8:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4edc:	str	xzr, [sp, #16]
    4ee0:	str	xzr, [sp, #8]
    4ee4:	ldr	x0, [sp, #144]
    4ee8:	str	x0, [sp]
    4eec:	mov	x7, x24
    4ef0:	mov	x6, x23
    4ef4:	mov	x5, x22
    4ef8:	mov	x4, x21
    4efc:	ldr	w3, [sp, #140]
    4f00:	ldr	x2, [sp, #128]
    4f04:	mov	x1, x20
    4f08:	mov	x0, x19
    4f0c:	bl	18 <omp_target_memcpy_rect_worker>
    4f10:	mov	w25, w0
    4f14:	ldp	x21, x22, [sp, #64]
    4f18:	ldp	x23, x24, [sp, #80]
    4f1c:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4f20:	cmp	x26, #0x0
    4f24:	mov	w25, #0x16                  	// #22
    4f28:	ccmp	x27, x26, #0x4, ne  // ne = any
    4f2c:	add	x28, x27, #0xa8
    4f30:	mov	w0, #0x1                   	// #1
    4f34:	b.ne	4fbc <omp_target_memcpy_rect+0x274>  // b.any
    4f38:	ldaxr	w1, [x28]
    4f3c:	cbnz	w1, 4f48 <omp_target_memcpy_rect+0x200>
    4f40:	stxr	w2, w0, [x28]
    4f44:	cbnz	w2, 4f38 <omp_target_memcpy_rect+0x1f0>
    4f48:	cmp	w1, #0x0
    4f4c:	b.ne	4e7c <omp_target_memcpy_rect+0x134>  // b.any
    4f50:	str	x27, [sp, #16]
    4f54:	str	x26, [sp, #8]
    4f58:	ldr	x0, [sp, #144]
    4f5c:	str	x0, [sp]
    4f60:	mov	x7, x24
    4f64:	mov	x6, x23
    4f68:	mov	x5, x22
    4f6c:	mov	x4, x21
    4f70:	ldr	w3, [sp, #140]
    4f74:	ldr	x2, [sp, #128]
    4f78:	mov	x1, x20
    4f7c:	mov	x0, x19
    4f80:	bl	18 <omp_target_memcpy_rect_worker>
    4f84:	mov	w25, w0
    4f88:	ldxr	w0, [x28]
    4f8c:	stlxr	w1, wzr, [x28]
    4f90:	cbnz	w1, 4f88 <omp_target_memcpy_rect+0x240>
    4f94:	tbnz	w0, #31, 4e94 <omp_target_memcpy_rect+0x14c>
    4f98:	ldp	x21, x22, [sp, #64]
    4f9c:	ldp	x23, x24, [sp, #80]
    4fa0:	mov	w0, w25
    4fa4:	ldp	x19, x20, [sp, #48]
    4fa8:	ldp	x25, x26, [sp, #96]
    4fac:	ldp	x27, x28, [sp, #112]
    4fb0:	ldp	x29, x30, [sp, #32]
    4fb4:	add	sp, sp, #0x90
    4fb8:	ret
    4fbc:	ldp	x21, x22, [sp, #64]
    4fc0:	ldp	x23, x24, [sp, #80]
    4fc4:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4fc8:	cmn	w27, #0x2
    4fcc:	b.ne	4dd8 <omp_target_memcpy_rect+0x90>  // b.any
    4fd0:	b	4e08 <omp_target_memcpy_rect+0xc0>
    4fd4:	ldp	x21, x22, [sp, #64]
    4fd8:	ldp	x23, x24, [sp, #80]
    4fdc:	b	4fa0 <omp_target_memcpy_rect+0x258>
    4fe0:	ldp	x21, x22, [sp, #64]
    4fe4:	ldp	x23, x24, [sp, #80]
    4fe8:	b	4fa0 <omp_target_memcpy_rect+0x258>

0000000000004fec <omp_target_associate_ptr>:
    4fec:	stp	x29, x30, [sp, #-144]!
    4ff0:	mov	x29, sp
    4ff4:	stp	x23, x24, [sp, #48]
    4ff8:	mov	w24, #0x16                  	// #22
    4ffc:	tbnz	w4, #31, 50c8 <omp_target_associate_ptr+0xdc>
    5000:	stp	x19, x20, [sp, #16]
    5004:	stp	x21, x22, [sp, #32]
    5008:	mov	x20, x0
    500c:	mov	x23, x1
    5010:	mov	x19, x2
    5014:	mov	x21, x3
    5018:	mov	w0, w4
    501c:	bl	35cc <resolve_device>
    5020:	mov	x22, x0
    5024:	cbz	x0, 51f4 <omp_target_associate_ptr+0x208>
    5028:	ldr	w0, [x0, #8]
    502c:	mov	w1, #0x5                   	// #5
    5030:	and	w0, w0, w1
    5034:	mov	w24, #0x16                  	// #22
    5038:	cmp	w0, #0x4
    503c:	b.ne	5204 <omp_target_associate_ptr+0x218>  // b.any
    5040:	str	x25, [sp, #64]
    5044:	add	x25, x22, #0xa8
    5048:	mov	w0, #0x1                   	// #1
    504c:	ldaxr	w1, [x25]
    5050:	cbnz	w1, 505c <omp_target_associate_ptr+0x70>
    5054:	stxr	w2, w0, [x25]
    5058:	cbnz	w2, 504c <omp_target_associate_ptr+0x60>
    505c:	cmp	w1, #0x0
    5060:	b.ne	50d8 <omp_target_associate_ptr+0xec>  // b.any
    5064:	add	x24, x22, #0xa0
    5068:	str	x20, [sp, #88]
    506c:	add	x19, x20, x19
    5070:	str	x19, [sp, #96]
    5074:	cmp	x20, x19
    5078:	b.eq	50e4 <omp_target_associate_ptr+0xf8>  // b.none
    507c:	add	x1, sp, #0x58
    5080:	mov	x0, x24
    5084:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5088:	cbz	x0, 5164 <omp_target_associate_ptr+0x178>
    508c:	ldr	x1, [x0, #16]
    5090:	ldr	x2, [x1, #16]
    5094:	ldr	x1, [x0, #24]
    5098:	add	x2, x2, x1
    509c:	add	x21, x23, x21
    50a0:	mov	w24, #0x16                  	// #22
    50a4:	cmp	x2, x21
    50a8:	b.eq	5140 <omp_target_associate_ptr+0x154>  // b.none
    50ac:	ldxr	w0, [x25]
    50b0:	stlxr	w1, wzr, [x25]
    50b4:	cbnz	w1, 50ac <omp_target_associate_ptr+0xc0>
    50b8:	tbnz	w0, #31, 51dc <omp_target_associate_ptr+0x1f0>
    50bc:	ldp	x19, x20, [sp, #16]
    50c0:	ldp	x21, x22, [sp, #32]
    50c4:	ldr	x25, [sp, #64]
    50c8:	mov	w0, w24
    50cc:	ldp	x23, x24, [sp, #48]
    50d0:	ldp	x29, x30, [sp], #144
    50d4:	ret
    50d8:	mov	x0, x25
    50dc:	bl	0 <gomp_mutex_lock_slow>
    50e0:	b	5064 <omp_target_associate_ptr+0x78>
    50e4:	add	x19, x19, #0x1
    50e8:	str	x19, [sp, #96]
    50ec:	add	x1, sp, #0x58
    50f0:	mov	x0, x24
    50f4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    50f8:	ldr	x1, [sp, #96]
    50fc:	sub	x1, x1, #0x1
    5100:	str	x1, [sp, #96]
    5104:	cbnz	x0, 508c <omp_target_associate_ptr+0xa0>
    5108:	ldr	x0, [sp, #88]
    510c:	sub	x0, x0, #0x1
    5110:	str	x0, [sp, #88]
    5114:	add	x1, sp, #0x58
    5118:	mov	x0, x24
    511c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5120:	ldr	x1, [sp, #88]
    5124:	add	x1, x1, #0x1
    5128:	str	x1, [sp, #88]
    512c:	cbnz	x0, 508c <omp_target_associate_ptr+0xa0>
    5130:	add	x1, sp, #0x58
    5134:	mov	x0, x24
    5138:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    513c:	b	5088 <omp_target_associate_ptr+0x9c>
    5140:	ldr	x2, [x0]
    5144:	ldr	x1, [sp, #88]
    5148:	cmp	x2, x1
    514c:	b.hi	50ac <omp_target_associate_ptr+0xc0>  // b.pmore
    5150:	ldr	x1, [x0, #8]
    5154:	ldr	x0, [sp, #96]
    5158:	cmp	x1, x0
    515c:	csel	w24, w24, wzr, cc  // cc = lo, ul, last
    5160:	b	50ac <omp_target_associate_ptr+0xc0>
    5164:	mov	x0, #0x40                  	// #64
    5168:	bl	0 <gomp_malloc>
    516c:	mov	x19, x0
    5170:	mov	x0, #0x48                  	// #72
    5174:	bl	0 <gomp_malloc>
    5178:	mov	x1, x0
    517c:	str	x0, [x19, #8]
    5180:	mov	x0, #0x1                   	// #1
    5184:	str	x0, [x19]
    5188:	str	xzr, [x19, #16]
    518c:	str	xzr, [x19, #24]
    5190:	str	xzr, [x19, #32]
    5194:	str	xzr, [x19, #40]
    5198:	str	xzr, [x19, #48]
    519c:	str	x22, [x19, #56]
    51a0:	ldr	x0, [sp, #88]
    51a4:	str	x0, [x1]
    51a8:	ldr	x0, [sp, #96]
    51ac:	str	x0, [x1, #8]
    51b0:	str	x19, [x1, #16]
    51b4:	add	x21, x23, x21
    51b8:	str	x21, [x1, #24]
    51bc:	mov	x0, #0xffffffffffffffff    	// #-1
    51c0:	str	x0, [x1, #32]
    51c4:	str	xzr, [x1, #56]
    51c8:	str	xzr, [x1, #64]
    51cc:	mov	x0, x24
    51d0:	bl	0 <splay_tree_prefix_splay_tree_insert>
    51d4:	mov	w24, #0x0                   	// #0
    51d8:	b	50ac <omp_target_associate_ptr+0xc0>
    51dc:	mov	x0, x25
    51e0:	bl	0 <gomp_mutex_unlock_slow>
    51e4:	ldp	x19, x20, [sp, #16]
    51e8:	ldp	x21, x22, [sp, #32]
    51ec:	ldr	x25, [sp, #64]
    51f0:	b	50c8 <omp_target_associate_ptr+0xdc>
    51f4:	mov	w24, #0x16                  	// #22
    51f8:	ldp	x19, x20, [sp, #16]
    51fc:	ldp	x21, x22, [sp, #32]
    5200:	b	50c8 <omp_target_associate_ptr+0xdc>
    5204:	ldp	x19, x20, [sp, #16]
    5208:	ldp	x21, x22, [sp, #32]
    520c:	b	50c8 <omp_target_associate_ptr+0xdc>

0000000000005210 <omp_target_disassociate_ptr>:
    5210:	stp	x29, x30, [sp, #-112]!
    5214:	mov	x29, sp
    5218:	stp	x21, x22, [sp, #32]
    521c:	mov	w21, #0x16                  	// #22
    5220:	tbnz	w1, #31, 52c0 <omp_target_disassociate_ptr+0xb0>
    5224:	stp	x19, x20, [sp, #16]
    5228:	mov	x20, x0
    522c:	mov	w0, w1
    5230:	bl	35cc <resolve_device>
    5234:	mov	x19, x0
    5238:	cbz	x0, 5384 <omp_target_disassociate_ptr+0x174>
    523c:	ldr	w0, [x0, #8]
    5240:	mov	w21, #0x16                  	// #22
    5244:	tbz	w0, #2, 5390 <omp_target_disassociate_ptr+0x180>
    5248:	add	x22, x19, #0xa8
    524c:	mov	w0, #0x1                   	// #1
    5250:	ldaxr	w1, [x22]
    5254:	cbnz	w1, 5260 <omp_target_disassociate_ptr+0x50>
    5258:	stxr	w2, w0, [x22]
    525c:	cbnz	w2, 5250 <omp_target_disassociate_ptr+0x40>
    5260:	cmp	w1, #0x0
    5264:	b.ne	52d0 <omp_target_disassociate_ptr+0xc0>  // b.any
    5268:	add	x19, x19, #0xa0
    526c:	str	x20, [sp, #56]
    5270:	add	x0, x20, #0x1
    5274:	str	x0, [sp, #64]
    5278:	add	x1, sp, #0x38
    527c:	mov	x0, x19
    5280:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5284:	mov	x20, x0
    5288:	ldr	x0, [sp, #64]
    528c:	sub	x0, x0, #0x1
    5290:	str	x0, [sp, #64]
    5294:	cbz	x20, 52dc <omp_target_disassociate_ptr+0xcc>
    5298:	ldr	x1, [x20]
    529c:	mov	w21, #0x16                  	// #22
    52a0:	ldr	x0, [sp, #56]
    52a4:	cmp	x1, x0
    52a8:	b.eq	5324 <omp_target_disassociate_ptr+0x114>  // b.none
    52ac:	ldxr	w0, [x22]
    52b0:	stlxr	w1, wzr, [x22]
    52b4:	cbnz	w1, 52ac <omp_target_disassociate_ptr+0x9c>
    52b8:	tbnz	w0, #31, 5374 <omp_target_disassociate_ptr+0x164>
    52bc:	ldp	x19, x20, [sp, #16]
    52c0:	mov	w0, w21
    52c4:	ldp	x21, x22, [sp, #32]
    52c8:	ldp	x29, x30, [sp], #112
    52cc:	ret
    52d0:	mov	x0, x22
    52d4:	bl	0 <gomp_mutex_lock_slow>
    52d8:	b	5268 <omp_target_disassociate_ptr+0x58>
    52dc:	ldr	x0, [sp, #56]
    52e0:	sub	x0, x0, #0x1
    52e4:	str	x0, [sp, #56]
    52e8:	add	x1, sp, #0x38
    52ec:	mov	x0, x19
    52f0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    52f4:	mov	x20, x0
    52f8:	ldr	x0, [sp, #56]
    52fc:	add	x0, x0, #0x1
    5300:	str	x0, [sp, #56]
    5304:	cbnz	x20, 5298 <omp_target_disassociate_ptr+0x88>
    5308:	add	x1, sp, #0x38
    530c:	mov	x0, x19
    5310:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5314:	mov	x20, x0
    5318:	mov	w21, #0x16                  	// #22
    531c:	cbz	x0, 52ac <omp_target_disassociate_ptr+0x9c>
    5320:	b	5298 <omp_target_disassociate_ptr+0x88>
    5324:	ldr	x0, [x20, #32]
    5328:	cmn	x0, #0x1
    532c:	b.ne	52ac <omp_target_disassociate_ptr+0x9c>  // b.any
    5330:	ldr	x0, [x20, #16]
    5334:	ldr	x1, [x0, #16]
    5338:	cbnz	x1, 52ac <omp_target_disassociate_ptr+0x9c>
    533c:	ldr	x1, [x0, #32]
    5340:	cbnz	x1, 52ac <omp_target_disassociate_ptr+0x9c>
    5344:	ldr	x1, [x0]
    5348:	cmp	x1, #0x1
    534c:	b.ne	52ac <omp_target_disassociate_ptr+0x9c>  // b.any
    5350:	ldr	x0, [x0, #48]
    5354:	cbnz	x0, 52ac <omp_target_disassociate_ptr+0x9c>
    5358:	mov	x1, x20
    535c:	mov	x0, x19
    5360:	bl	0 <splay_tree_prefix_splay_tree_remove>
    5364:	ldr	x0, [x20, #16]
    5368:	bl	4b4 <gomp_unmap_tgt>
    536c:	mov	w21, #0x0                   	// #0
    5370:	b	52ac <omp_target_disassociate_ptr+0x9c>
    5374:	mov	x0, x22
    5378:	bl	0 <gomp_mutex_unlock_slow>
    537c:	ldp	x19, x20, [sp, #16]
    5380:	b	52c0 <omp_target_disassociate_ptr+0xb0>
    5384:	mov	w21, #0x16                  	// #22
    5388:	ldp	x19, x20, [sp, #16]
    538c:	b	52c0 <omp_target_disassociate_ptr+0xb0>
    5390:	ldp	x19, x20, [sp, #16]
    5394:	b	52c0 <omp_target_disassociate_ptr+0xb0>

0000000000005398 <gomp_ialias_omp_pause_resource>:
    5398:	stp	x29, x30, [sp, #-32]!
    539c:	mov	x29, sp
    53a0:	cmn	w1, #0x2
    53a4:	b.eq	53d4 <gomp_ialias_omp_pause_resource+0x3c>  // b.none
    53a8:	str	x19, [sp, #16]
    53ac:	mov	w19, w1
    53b0:	tbnz	w1, #31, 53dc <gomp_ialias_omp_pause_resource+0x44>
    53b4:	bl	158c <gomp_init_targets_once>
    53b8:	adrp	x0, 0 <get_kind>
    53bc:	ldr	w0, [x0]
    53c0:	cmp	w19, w0
    53c4:	csetm	w0, ge  // ge = tcont
    53c8:	ldr	x19, [sp, #16]
    53cc:	ldp	x29, x30, [sp], #32
    53d0:	ret
    53d4:	bl	0 <gomp_pause_host>
    53d8:	b	53cc <gomp_ialias_omp_pause_resource+0x34>
    53dc:	mov	w0, #0xffffffff            	// #-1
    53e0:	ldr	x19, [sp, #16]
    53e4:	b	53cc <gomp_ialias_omp_pause_resource+0x34>

00000000000053e8 <gomp_ialias_omp_pause_resource_all>:
    53e8:	stp	x29, x30, [sp, #-16]!
    53ec:	mov	x29, sp
    53f0:	bl	0 <gomp_pause_host>
    53f4:	cmp	w0, #0x0
    53f8:	csetm	w0, ne  // ne = any
    53fc:	ldp	x29, x30, [sp], #16
    5400:	ret

splay-tree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <splay_tree_splay>:
   0:	ldr	x2, [x0]
   4:	cbz	x2, 3c <splay_tree_splay+0x3c>
   8:	mov	w9, #0xffffffff            	// #-1
   c:	mov	w7, #0x1                   	// #1
  10:	ldr	x2, [x0]
  14:	ldr	x5, [x1]
  18:	ldr	x3, [x1, #8]
  1c:	cmp	x3, x5
  20:	b.eq	40 <splay_tree_splay+0x40>  // b.none
  24:	ldr	x4, [x2]
  28:	cmp	x3, x4
  2c:	b.ls	13c <splay_tree_splay+0x13c>  // b.plast
  30:	ldr	x4, [x2, #8]
  34:	cmp	x5, x4
  38:	b.cs	148 <splay_tree_splay+0x148>  // b.hs, b.nlast
  3c:	ret
  40:	ldr	x6, [x2]
  44:	ldr	x4, [x2, #8]
  48:	cmp	x6, x4
  4c:	b.ne	24 <splay_tree_splay+0x24>  // b.any
  50:	b	3c <splay_tree_splay+0x3c>
  54:	ldr	x10, [x4]
  58:	ldr	x8, [x4, #8]
  5c:	cmp	x10, x8
  60:	b.ne	15c <splay_tree_splay+0x15c>  // b.any
  64:	b	174 <splay_tree_splay+0x174>
  68:	ldr	x1, [x4, #64]
  6c:	str	x2, [x4, #64]
  70:	str	x1, [x2, #56]
  74:	str	x4, [x0]
  78:	b	3c <splay_tree_splay+0x3c>
  7c:	ldr	x5, [x3, #56]
  80:	str	x4, [x3, #56]
  84:	str	x5, [x4, #64]
  88:	str	x3, [x2, #64]
  8c:	ldr	x4, [x3, #56]
  90:	str	x2, [x3, #56]
  94:	str	x4, [x2, #64]
  98:	str	x3, [x0]
  9c:	b	10 <splay_tree_splay+0x10>
  a0:	cmp	w6, #0x0
  a4:	b.le	10 <splay_tree_splay+0x10>
  a8:	ldr	x3, [x4, #56]
  ac:	ldr	x5, [x3, #64]
  b0:	str	x4, [x3, #64]
  b4:	str	x5, [x4, #56]
  b8:	str	x3, [x2, #64]
  bc:	ldr	x4, [x3, #56]
  c0:	str	x2, [x3, #56]
  c4:	str	x4, [x2, #64]
  c8:	str	x3, [x0]
  cc:	b	10 <splay_tree_splay+0x10>
  d0:	ldr	x3, [x4, #56]
  d4:	cbz	x3, 174 <splay_tree_splay+0x174>
  d8:	tbz	w6, #31, a0 <splay_tree_splay+0xa0>
  dc:	ldr	x5, [x3, #64]
  e0:	str	x4, [x3, #64]
  e4:	str	x5, [x4, #56]
  e8:	str	x3, [x2, #56]
  ec:	ldr	x4, [x3, #64]
  f0:	str	x2, [x3, #64]
  f4:	str	x4, [x2, #56]
  f8:	str	x3, [x0]
  fc:	b	10 <splay_tree_splay+0x10>
 100:	ldr	x3, [x4, #64]
 104:	cbz	x3, 174 <splay_tree_splay+0x174>
 108:	cmp	w6, #0x0
 10c:	b.gt	7c <splay_tree_splay+0x7c>
 110:	tbz	w6, #31, 10 <splay_tree_splay+0x10>
 114:	ldr	x3, [x4, #64]
 118:	ldr	x5, [x3, #56]
 11c:	str	x4, [x3, #56]
 120:	str	x5, [x4, #64]
 124:	str	x3, [x2, #56]
 128:	ldr	x4, [x3, #64]
 12c:	str	x2, [x3, #64]
 130:	str	x4, [x2, #56]
 134:	str	x3, [x0]
 138:	b	10 <splay_tree_splay+0x10>
 13c:	ldr	x4, [x2, #56]
 140:	mov	w6, w9
 144:	b	150 <splay_tree_splay+0x150>
 148:	ldr	x4, [x2, #64]
 14c:	mov	w6, w7
 150:	cbz	x4, 3c <splay_tree_splay+0x3c>
 154:	cmp	x3, x5
 158:	b.eq	54 <splay_tree_splay+0x54>  // b.none
 15c:	ldr	x8, [x4]
 160:	cmp	x3, x8
 164:	b.ls	d0 <splay_tree_splay+0xd0>  // b.plast
 168:	ldr	x3, [x4, #8]
 16c:	cmp	x5, x3
 170:	b.cs	100 <splay_tree_splay+0x100>  // b.hs, b.nlast
 174:	tbnz	w6, #31, 68 <splay_tree_splay+0x68>
 178:	ldr	x1, [x4, #56]
 17c:	str	x2, [x4, #56]
 180:	str	x1, [x2, #64]
 184:	str	x4, [x0]
 188:	b	3c <splay_tree_splay+0x3c>

000000000000018c <splay_tree_foreach_internal>:
 18c:	cbz	x0, 1e4 <splay_tree_foreach_internal+0x58>
 190:	stp	x29, x30, [sp, #-48]!
 194:	mov	x29, sp
 198:	stp	x19, x20, [sp, #16]
 19c:	str	x21, [sp, #32]
 1a0:	mov	x19, x0
 1a4:	mov	x20, x1
 1a8:	mov	x21, x2
 1ac:	mov	x1, x2
 1b0:	blr	x20
 1b4:	mov	x2, x21
 1b8:	mov	x1, x20
 1bc:	ldr	x0, [x19, #56]
 1c0:	bl	18c <splay_tree_foreach_internal>
 1c4:	mov	x2, x21
 1c8:	mov	x1, x20
 1cc:	ldr	x0, [x19, #64]
 1d0:	bl	18c <splay_tree_foreach_internal>
 1d4:	ldp	x19, x20, [sp, #16]
 1d8:	ldr	x21, [sp, #32]
 1dc:	ldp	x29, x30, [sp], #48
 1e0:	ret
 1e4:	ret

00000000000001e8 <splay_tree_prefix_splay_tree_insert>:
 1e8:	stp	x29, x30, [sp, #-32]!
 1ec:	mov	x29, sp
 1f0:	stp	x19, x20, [sp, #16]
 1f4:	mov	x20, x0
 1f8:	mov	x19, x1
 1fc:	bl	0 <splay_tree_splay>
 200:	ldr	x1, [x20]
 204:	cbz	x1, 26c <splay_tree_prefix_splay_tree_insert+0x84>
 208:	ldr	x0, [x1]
 20c:	ldr	x2, [x1, #8]
 210:	cmp	x0, x2
 214:	b.eq	250 <splay_tree_prefix_splay_tree_insert+0x68>  // b.none
 218:	ldr	x3, [x19]
 21c:	cmp	x2, x3
 220:	b.ls	278 <splay_tree_prefix_splay_tree_insert+0x90>  // b.plast
 224:	ldr	x2, [x19, #8]
 228:	cmp	x0, x2
 22c:	b.cc	260 <splay_tree_prefix_splay_tree_insert+0x78>  // b.lo, b.ul, b.last
 230:	str	x1, [x19, #64]
 234:	ldr	x0, [x1, #56]
 238:	str	x0, [x19, #56]
 23c:	str	xzr, [x1, #56]
 240:	str	x19, [x20]
 244:	ldp	x19, x20, [sp, #16]
 248:	ldp	x29, x30, [sp], #32
 24c:	ret
 250:	ldr	x4, [x19]
 254:	ldr	x3, [x19, #8]
 258:	cmp	x4, x3
 25c:	b.ne	218 <splay_tree_prefix_splay_tree_insert+0x30>  // b.any
 260:	adrp	x0, 0 <splay_tree_splay>
 264:	add	x0, x0, #0x0
 268:	bl	0 <gomp_fatal>
 26c:	str	xzr, [x19, #64]
 270:	str	xzr, [x19, #56]
 274:	b	240 <splay_tree_prefix_splay_tree_insert+0x58>
 278:	str	x1, [x19, #56]
 27c:	ldr	x0, [x1, #64]
 280:	str	x0, [x19, #64]
 284:	str	xzr, [x1, #64]
 288:	b	240 <splay_tree_prefix_splay_tree_insert+0x58>

000000000000028c <splay_tree_prefix_splay_tree_remove>:
 28c:	stp	x29, x30, [sp, #-32]!
 290:	mov	x29, sp
 294:	stp	x19, x20, [sp, #16]
 298:	mov	x20, x0
 29c:	mov	x19, x1
 2a0:	bl	0 <splay_tree_splay>
 2a4:	ldr	x0, [x20]
 2a8:	cbz	x0, 2f8 <splay_tree_prefix_splay_tree_remove+0x6c>
 2ac:	ldr	x2, [x0]
 2b0:	ldr	x1, [x0, #8]
 2b4:	cmp	x2, x1
 2b8:	b.eq	304 <splay_tree_prefix_splay_tree_remove+0x78>  // b.none
 2bc:	ldr	x3, [x19]
 2c0:	cmp	x1, x3
 2c4:	b.ls	2f8 <splay_tree_prefix_splay_tree_remove+0x6c>  // b.plast
 2c8:	ldr	x1, [x19, #8]
 2cc:	cmp	x2, x1
 2d0:	b.cs	2f8 <splay_tree_prefix_splay_tree_remove+0x6c>  // b.hs, b.nlast
 2d4:	ldr	x1, [x0, #56]
 2d8:	ldr	x2, [x0, #64]
 2dc:	cbz	x1, 318 <splay_tree_prefix_splay_tree_remove+0x8c>
 2e0:	str	x1, [x20]
 2e4:	cbz	x2, 2f8 <splay_tree_prefix_splay_tree_remove+0x6c>
 2e8:	mov	x0, x1
 2ec:	ldr	x1, [x1, #64]
 2f0:	cbnz	x1, 2e8 <splay_tree_prefix_splay_tree_remove+0x5c>
 2f4:	str	x2, [x0, #64]
 2f8:	ldp	x19, x20, [sp, #16]
 2fc:	ldp	x29, x30, [sp], #32
 300:	ret
 304:	ldr	x4, [x19]
 308:	ldr	x3, [x19, #8]
 30c:	cmp	x4, x3
 310:	b.ne	2bc <splay_tree_prefix_splay_tree_remove+0x30>  // b.any
 314:	b	2d4 <splay_tree_prefix_splay_tree_remove+0x48>
 318:	str	x2, [x20]
 31c:	b	2f8 <splay_tree_prefix_splay_tree_remove+0x6c>

0000000000000320 <splay_tree_prefix_splay_tree_lookup>:
 320:	stp	x29, x30, [sp, #-32]!
 324:	mov	x29, sp
 328:	stp	x19, x20, [sp, #16]
 32c:	mov	x20, x0
 330:	mov	x19, x1
 334:	bl	0 <splay_tree_splay>
 338:	ldr	x0, [x20]
 33c:	cbz	x0, 368 <splay_tree_prefix_splay_tree_lookup+0x48>
 340:	ldr	x2, [x0]
 344:	ldr	x1, [x0, #8]
 348:	cmp	x2, x1
 34c:	b.eq	374 <splay_tree_prefix_splay_tree_lookup+0x54>  // b.none
 350:	ldr	x3, [x19]
 354:	cmp	x1, x3
 358:	b.ls	388 <splay_tree_prefix_splay_tree_lookup+0x68>  // b.plast
 35c:	ldr	x1, [x19, #8]
 360:	cmp	x2, x1
 364:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
 368:	ldp	x19, x20, [sp, #16]
 36c:	ldp	x29, x30, [sp], #32
 370:	ret
 374:	ldr	x4, [x19]
 378:	ldr	x3, [x19, #8]
 37c:	cmp	x4, x3
 380:	b.ne	350 <splay_tree_prefix_splay_tree_lookup+0x30>  // b.any
 384:	b	368 <splay_tree_prefix_splay_tree_lookup+0x48>
 388:	mov	x0, #0x0                   	// #0
 38c:	b	368 <splay_tree_prefix_splay_tree_lookup+0x48>

0000000000000390 <splay_tree_prefix_splay_tree_foreach>:
 390:	stp	x29, x30, [sp, #-16]!
 394:	mov	x29, sp
 398:	ldr	x0, [x0]
 39c:	bl	18c <splay_tree_foreach_internal>
 3a0:	ldp	x29, x30, [sp], #16
 3a4:	ret

libgomp-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_malloc>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <gomp_malloc>
   c:	ldp	x29, x30, [sp], #16
  10:	ret

0000000000000014 <GOMP_PLUGIN_malloc_cleared>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <gomp_malloc_cleared>
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <GOMP_PLUGIN_realloc>:
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	bl	0 <gomp_realloc>
  34:	ldp	x29, x30, [sp], #16
  38:	ret

000000000000003c <GOMP_PLUGIN_debug>:
  3c:	stp	x29, x30, [sp, #-256]!
  40:	mov	x29, sp
  44:	str	x2, [sp, #208]
  48:	str	x3, [sp, #216]
  4c:	str	x4, [sp, #224]
  50:	str	x5, [sp, #232]
  54:	str	x6, [sp, #240]
  58:	str	x7, [sp, #248]
  5c:	str	q0, [sp, #80]
  60:	str	q1, [sp, #96]
  64:	str	q2, [sp, #112]
  68:	str	q3, [sp, #128]
  6c:	str	q4, [sp, #144]
  70:	str	q5, [sp, #160]
  74:	str	q6, [sp, #176]
  78:	str	q7, [sp, #192]
  7c:	add	x2, sp, #0x100
  80:	str	x2, [sp, #48]
  84:	str	x2, [sp, #56]
  88:	add	x2, sp, #0xd0
  8c:	str	x2, [sp, #64]
  90:	mov	w2, #0xffffffd0            	// #-48
  94:	str	w2, [sp, #72]
  98:	mov	w2, #0xffffff80            	// #-128
  9c:	str	w2, [sp, #76]
  a0:	adrp	x2, 0 <gomp_debug_var>
  a4:	ldr	w2, [x2]
  a8:	cbnz	w2, b4 <GOMP_PLUGIN_debug+0x78>
  ac:	ldp	x29, x30, [sp], #256
  b0:	ret
  b4:	ldp	x2, x3, [sp, #48]
  b8:	stp	x2, x3, [sp, #16]
  bc:	ldp	x2, x3, [sp, #64]
  c0:	stp	x2, x3, [sp, #32]
  c4:	add	x2, sp, #0x10
  c8:	bl	0 <gomp_vdebug>
  cc:	b	ac <GOMP_PLUGIN_debug+0x70>

00000000000000d0 <GOMP_PLUGIN_error>:
  d0:	stp	x29, x30, [sp, #-272]!
  d4:	mov	x29, sp
  d8:	str	x1, [sp, #216]
  dc:	str	x2, [sp, #224]
  e0:	str	x3, [sp, #232]
  e4:	str	x4, [sp, #240]
  e8:	str	x5, [sp, #248]
  ec:	str	x6, [sp, #256]
  f0:	str	x7, [sp, #264]
  f4:	str	q0, [sp, #80]
  f8:	str	q1, [sp, #96]
  fc:	str	q2, [sp, #112]
 100:	str	q3, [sp, #128]
 104:	str	q4, [sp, #144]
 108:	str	q5, [sp, #160]
 10c:	str	q6, [sp, #176]
 110:	str	q7, [sp, #192]
 114:	add	x1, sp, #0x110
 118:	str	x1, [sp, #48]
 11c:	str	x1, [sp, #56]
 120:	add	x1, sp, #0xd0
 124:	str	x1, [sp, #64]
 128:	mov	w1, #0xffffffc8            	// #-56
 12c:	str	w1, [sp, #72]
 130:	mov	w1, #0xffffff80            	// #-128
 134:	str	w1, [sp, #76]
 138:	ldp	x2, x3, [sp, #48]
 13c:	stp	x2, x3, [sp, #16]
 140:	ldp	x2, x3, [sp, #64]
 144:	stp	x2, x3, [sp, #32]
 148:	add	x1, sp, #0x10
 14c:	bl	0 <gomp_verror>
 150:	ldp	x29, x30, [sp], #272
 154:	ret

0000000000000158 <GOMP_PLUGIN_fatal>:
 158:	stp	x29, x30, [sp, #-272]!
 15c:	mov	x29, sp
 160:	str	x1, [sp, #216]
 164:	str	x2, [sp, #224]
 168:	str	x3, [sp, #232]
 16c:	str	x4, [sp, #240]
 170:	str	x5, [sp, #248]
 174:	str	x6, [sp, #256]
 178:	str	x7, [sp, #264]
 17c:	str	q0, [sp, #80]
 180:	str	q1, [sp, #96]
 184:	str	q2, [sp, #112]
 188:	str	q3, [sp, #128]
 18c:	str	q4, [sp, #144]
 190:	str	q5, [sp, #160]
 194:	str	q6, [sp, #176]
 198:	str	q7, [sp, #192]
 19c:	add	x1, sp, #0x110
 1a0:	str	x1, [sp, #48]
 1a4:	str	x1, [sp, #56]
 1a8:	add	x1, sp, #0xd0
 1ac:	str	x1, [sp, #64]
 1b0:	mov	w1, #0xffffffc8            	// #-56
 1b4:	str	w1, [sp, #72]
 1b8:	mov	w1, #0xffffff80            	// #-128
 1bc:	str	w1, [sp, #76]
 1c0:	ldp	x2, x3, [sp, #48]
 1c4:	stp	x2, x3, [sp, #16]
 1c8:	ldp	x2, x3, [sp, #64]
 1cc:	stp	x2, x3, [sp, #32]
 1d0:	add	x1, sp, #0x10
 1d4:	bl	0 <gomp_vfatal>

oacc-parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	w22, w0
  14:	mov	w21, w1
  18:	mov	x20, x2
  1c:	cbnz	w1, 98 <goacc_wait+0x98>
  20:	b	60 <goacc_wait+0x60>
  24:	add	w0, w2, #0x8
  28:	str	w0, [x20, #24]
  2c:	cmp	w0, #0x0
  30:	b.le	44 <goacc_wait+0x44>
  34:	add	x0, x1, #0xb
  38:	and	x0, x0, #0xfffffffffffffff8
  3c:	str	x0, [x20]
  40:	b	b0 <goacc_wait+0xb0>
  44:	ldr	x1, [x20, #8]
  48:	add	x1, x1, w2, sxtw
  4c:	b	b0 <goacc_wait+0xb0>
  50:	cmn	w22, #0x2
  54:	b.eq	70 <goacc_wait+0x70>  // b.none
  58:	mov	w0, w22
  5c:	bl	0 <acc_wait_all_async>
  60:	ldp	x19, x20, [sp, #16]
  64:	ldp	x21, x22, [sp, #32]
  68:	ldp	x29, x30, [sp], #48
  6c:	ret
  70:	bl	0 <acc_wait_all>
  74:	b	60 <goacc_wait+0x60>
  78:	mov	w0, w19
  7c:	bl	0 <acc_wait>
  80:	b	90 <goacc_wait+0x90>
  84:	mov	w1, w22
  88:	mov	w0, w19
  8c:	bl	0 <acc_wait_async>
  90:	subs	w21, w21, #0x1
  94:	b.eq	60 <goacc_wait+0x60>  // b.none
  98:	ldr	w2, [x20, #24]
  9c:	ldr	x1, [x20]
  a0:	tbnz	w2, #31, 24 <goacc_wait+0x24>
  a4:	add	x2, x1, #0xb
  a8:	and	x2, x2, #0xfffffffffffffff8
  ac:	str	x2, [x20]
  b0:	ldr	w19, [x1]
  b4:	cmn	w19, #0x1
  b8:	b.eq	50 <goacc_wait+0x50>  // b.none
  bc:	mov	w0, w19
  c0:	bl	0 <acc_async_test>
  c4:	cbnz	w0, 90 <goacc_wait+0x90>
  c8:	cmn	w22, #0x2
  cc:	b.eq	78 <goacc_wait+0x78>  // b.none
  d0:	cmp	w19, w22
  d4:	b.eq	90 <goacc_wait+0x90>  // b.none
  d8:	b	84 <goacc_wait+0x84>

00000000000000dc <GOACC_parallel_keyed>:
  dc:	stp	x29, x30, [sp, #-352]!
  e0:	mov	x29, sp
  e4:	stp	x19, x20, [sp, #16]
  e8:	stp	x21, x22, [sp, #32]
  ec:	stp	x23, x24, [sp, #48]
  f0:	stp	x25, x26, [sp, #64]
  f4:	stp	x27, x28, [sp, #80]
  f8:	mov	x26, x1
  fc:	mov	x20, x2
 100:	mov	x24, x3
 104:	mov	x25, x4
 108:	mov	x22, x5
 10c:	str	x6, [x29, #336]
 110:	str	x7, [x29, #344]
 114:	str	q0, [x29, #208]
 118:	str	q1, [x29, #224]
 11c:	str	q2, [x29, #240]
 120:	str	q3, [x29, #256]
 124:	str	q4, [x29, #272]
 128:	str	q5, [x29, #288]
 12c:	str	q6, [x29, #304]
 130:	str	q7, [x29, #320]
 134:	mvn	w19, w0
 138:	adrp	x0, 0 <gomp_debug_var>
 13c:	ldr	w0, [x0]
 140:	cbnz	w0, 174 <GOACC_parallel_keyed+0x98>
 144:	bl	0 <goacc_lazy_initialize>
 148:	adrp	x0, 0 <goacc_tls_data>
 14c:	ldr	x0, [x0]
 150:	mrs	x1, tpidr_el0
 154:	ldr	x0, [x1, x0]
 158:	ldr	x28, [x0, #8]
 15c:	cbz	x20, 1a0 <GOACC_parallel_keyed+0xc4>
 160:	mov	x2, #0x1                   	// #1
 164:	mov	x1, #0x0                   	// #0
 168:	sub	w4, w20, #0x1
 16c:	mov	x6, #0x8                   	// #8
 170:	b	56c <GOACC_parallel_keyed+0x490>
 174:	mov	x6, x5
 178:	mov	x5, x4
 17c:	mov	x4, x3
 180:	mov	x3, x2
 184:	adrp	x2, 0 <goacc_wait>
 188:	add	x2, x2, #0x0
 18c:	adrp	x1, 0 <goacc_wait>
 190:	add	x1, x1, #0x0
 194:	mov	w0, #0x0                   	// #0
 198:	bl	0 <gomp_debug>
 19c:	b	144 <GOACC_parallel_keyed+0x68>
 1a0:	tbnz	w19, #0, 1f0 <GOACC_parallel_keyed+0x114>
 1a4:	ldr	w0, [x28, #16]
 1a8:	cmp	w0, #0x2
 1ac:	b.eq	208 <GOACC_parallel_keyed+0x12c>  // b.none
 1b0:	str	wzr, [x29, #104]
 1b4:	str	wzr, [x29, #108]
 1b8:	str	wzr, [x29, #112]
 1bc:	add	x0, x29, #0x160
 1c0:	str	x0, [x29, #176]
 1c4:	str	x0, [x29, #184]
 1c8:	add	x0, x29, #0x150
 1cc:	str	x0, [x29, #192]
 1d0:	mov	w0, #0xfffffff0            	// #-16
 1d4:	str	w0, [x29, #200]
 1d8:	mov	w0, #0xffffff80            	// #-128
 1dc:	str	w0, [x29, #204]
 1e0:	mov	w21, #0xfffffffe            	// #-2
 1e4:	mov	w27, #0xffff                	// #65535
 1e8:	add	x23, x29, #0x68
 1ec:	b	2f4 <GOACC_parallel_keyed+0x218>
 1f0:	mov	w0, #0x2                   	// #2
 1f4:	bl	0 <goacc_save_and_set_bind>
 1f8:	mov	x0, x24
 1fc:	blr	x26
 200:	bl	0 <goacc_restore_bind>
 204:	b	4ac <GOACC_parallel_keyed+0x3d0>
 208:	mov	x0, x24
 20c:	blr	x26
 210:	b	4ac <GOACC_parallel_keyed+0x3d0>
 214:	adrp	x0, 0 <goacc_wait>
 218:	add	x0, x0, #0x0
 21c:	bl	0 <gomp_fatal>
 220:	and	w19, w19, #0xffff
 224:	ldr	x4, [x29, #184]
 228:	mov	x0, #0x0                   	// #0
 22c:	b	260 <GOACC_parallel_keyed+0x184>
 230:	add	w3, w2, #0x8
 234:	str	w3, [x29, #200]
 238:	cmp	w3, #0x0
 23c:	b.le	284 <GOACC_parallel_keyed+0x1a8>
 240:	add	x2, x1, #0xb
 244:	and	x2, x2, #0xfffffffffffffff8
 248:	str	x2, [x29, #176]
 24c:	ldr	w1, [x1]
 250:	str	w1, [x23, x0, lsl #2]
 254:	add	x0, x0, #0x1
 258:	cmp	x0, #0x3
 25c:	b.eq	2f4 <GOACC_parallel_keyed+0x218>  // b.none
 260:	lsr	w1, w19, w0
 264:	tbz	w1, #0, 254 <GOACC_parallel_keyed+0x178>
 268:	ldr	w2, [x29, #200]
 26c:	ldr	x1, [x29, #176]
 270:	tbnz	w2, #31, 230 <GOACC_parallel_keyed+0x154>
 274:	add	x2, x1, #0xb
 278:	and	x2, x2, #0xfffffffffffffff8
 27c:	str	x2, [x29, #176]
 280:	b	24c <GOACC_parallel_keyed+0x170>
 284:	add	x1, x4, w2, sxtw
 288:	b	24c <GOACC_parallel_keyed+0x170>
 28c:	and	w21, w19, #0xffff
 290:	cmp	w27, w19, uxth
 294:	b.ne	2f4 <GOACC_parallel_keyed+0x218>  // b.any
 298:	ldr	w1, [x29, #200]
 29c:	ldr	x0, [x29, #176]
 2a0:	tbnz	w1, #31, 2b8 <GOACC_parallel_keyed+0x1dc>
 2a4:	add	x1, x0, #0xb
 2a8:	and	x1, x1, #0xfffffffffffffff8
 2ac:	str	x1, [x29, #176]
 2b0:	ldr	w21, [x0]
 2b4:	b	2f4 <GOACC_parallel_keyed+0x218>
 2b8:	add	w2, w1, #0x8
 2bc:	str	w2, [x29, #200]
 2c0:	cmp	w2, #0x0
 2c4:	b.le	2d8 <GOACC_parallel_keyed+0x1fc>
 2c8:	add	x1, x0, #0xb
 2cc:	and	x1, x1, #0xfffffffffffffff8
 2d0:	str	x1, [x29, #176]
 2d4:	b	2b0 <GOACC_parallel_keyed+0x1d4>
 2d8:	ldr	x0, [x29, #184]
 2dc:	add	x0, x0, w1, sxtw
 2e0:	b	2b0 <GOACC_parallel_keyed+0x1d4>
 2e4:	add	x2, x29, #0xb0
 2e8:	and	w1, w19, #0xffff
 2ec:	mov	w0, w21
 2f0:	bl	0 <goacc_wait>
 2f4:	ldr	w1, [x29, #200]
 2f8:	ldr	x0, [x29, #176]
 2fc:	tbnz	w1, #31, 344 <GOACC_parallel_keyed+0x268>
 300:	add	x1, x0, #0xb
 304:	and	x1, x1, #0xfffffffffffffff8
 308:	str	x1, [x29, #176]
 30c:	ldr	w19, [x0]
 310:	cbz	w19, 370 <GOACC_parallel_keyed+0x294>
 314:	ubfx	x1, x19, #16, #12
 318:	cbnz	w1, 214 <GOACC_parallel_keyed+0x138>
 31c:	lsr	w1, w19, #28
 320:	cmp	w1, #0x2
 324:	b.eq	28c <GOACC_parallel_keyed+0x1b0>  // b.none
 328:	cmp	w1, #0x3
 32c:	b.eq	2e4 <GOACC_parallel_keyed+0x208>  // b.none
 330:	cmp	w1, #0x1
 334:	b.eq	220 <GOACC_parallel_keyed+0x144>  // b.none
 338:	adrp	x0, 0 <goacc_wait>
 33c:	add	x0, x0, #0x0
 340:	bl	0 <gomp_fatal>
 344:	add	w2, w1, #0x8
 348:	str	w2, [x29, #200]
 34c:	cmp	w2, #0x0
 350:	b.le	364 <GOACC_parallel_keyed+0x288>
 354:	add	x1, x0, #0xb
 358:	and	x1, x1, #0xfffffffffffffff8
 35c:	str	x1, [x29, #176]
 360:	b	30c <GOACC_parallel_keyed+0x230>
 364:	ldr	x0, [x29, #184]
 368:	add	x0, x0, w1, sxtw
 36c:	b	30c <GOACC_parallel_keyed+0x230>
 370:	ldr	x1, [x28, #248]
 374:	mov	w0, w21
 378:	blr	x1
 37c:	ldr	w0, [x28, #8]
 380:	tbnz	w0, #1, 3d8 <GOACC_parallel_keyed+0x2fc>
 384:	str	x26, [x29, #120]
 388:	add	x26, x26, #0x1
 38c:	str	x26, [x29, #128]
 390:	add	x23, x28, #0xa8
 394:	mov	w0, #0x1                   	// #1
 398:	ldaxr	w1, [x23]
 39c:	cbnz	w1, 3a8 <GOACC_parallel_keyed+0x2cc>
 3a0:	stxr	w2, w0, [x23]
 3a4:	cbnz	w2, 398 <GOACC_parallel_keyed+0x2bc>
 3a8:	cmp	w1, #0x0
 3ac:	b.ne	4cc <GOACC_parallel_keyed+0x3f0>  // b.any
 3b0:	add	x1, x29, #0x78
 3b4:	add	x0, x28, #0xa0
 3b8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
 3bc:	mov	x26, x0
 3c0:	ldxr	w0, [x23]
 3c4:	stlxr	w1, wzr, [x23]
 3c8:	cbnz	w1, 3c0 <GOACC_parallel_keyed+0x2e4>
 3cc:	tbnz	w0, #31, 4d8 <GOACC_parallel_keyed+0x3fc>
 3d0:	cbz	x26, 4e4 <GOACC_parallel_keyed+0x408>
 3d4:	ldr	x26, [x26, #24]
 3d8:	mov	w7, #0x0                   	// #0
 3dc:	mov	w6, #0x1                   	// #1
 3e0:	mov	x5, x22
 3e4:	mov	x4, x25
 3e8:	mov	x3, #0x0                   	// #0
 3ec:	mov	x2, x24
 3f0:	mov	x1, x20
 3f4:	mov	x0, x28
 3f8:	bl	0 <gomp_map_vars>
 3fc:	mov	x22, x0
 400:	lsl	x0, x20, #3
 404:	add	x0, x0, #0xf
 408:	and	x0, x0, #0xfffffffffffffff0
 40c:	sub	sp, sp, x0
 410:	mov	x3, sp
 414:	cbz	x20, 458 <GOACC_parallel_keyed+0x37c>
 418:	mov	x4, #0x0                   	// #0
 41c:	mov	w0, w19
 420:	add	x1, x22, x0, lsl #5
 424:	ldr	x2, [x1, #64]
 428:	mov	x0, x1
 42c:	ldr	x1, [x2, #24]
 430:	ldr	x0, [x0, #80]
 434:	add	x1, x1, x0
 438:	ldr	x0, [x2, #16]
 43c:	ldr	x0, [x0, #16]
 440:	add	x1, x1, x0
 444:	str	x1, [x3, x4, lsl #3]
 448:	add	w19, w19, #0x1
 44c:	mov	w4, w19
 450:	cmp	x20, w19, uxtw
 454:	b.hi	41c <GOACC_parallel_keyed+0x340>  // b.pmore
 458:	ldr	x7, [x28, #184]
 45c:	mov	x6, x22
 460:	add	x5, x29, #0x68
 464:	mov	w4, w21
 468:	mov	x2, x24
 46c:	mov	x1, x20
 470:	mov	x0, x26
 474:	blr	x7
 478:	add	w0, w21, #0x2
 47c:	cmp	w21, #0x0
 480:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
 484:	cset	w0, hi  // hi = pmore
 488:	cmn	w21, #0x2
 48c:	csinc	w0, w0, wzr, ne  // ne = any
 490:	cbz	w0, 4f0 <GOACC_parallel_keyed+0x414>
 494:	mov	w1, #0x1                   	// #1
 498:	mov	x0, x22
 49c:	bl	0 <gomp_unmap_vars>
 4a0:	ldr	x1, [x28, #248]
 4a4:	mov	w0, #0xfffffffe            	// #-2
 4a8:	blr	x1
 4ac:	mov	sp, x29
 4b0:	ldp	x19, x20, [sp, #16]
 4b4:	ldp	x21, x22, [sp, #32]
 4b8:	ldp	x23, x24, [sp, #48]
 4bc:	ldp	x25, x26, [sp, #64]
 4c0:	ldp	x27, x28, [sp, #80]
 4c4:	ldp	x29, x30, [sp], #352
 4c8:	ret
 4cc:	mov	x0, x23
 4d0:	bl	0 <gomp_mutex_lock_slow>
 4d4:	b	3b0 <GOACC_parallel_keyed+0x2d4>
 4d8:	mov	x0, x23
 4dc:	bl	0 <gomp_mutex_unlock_slow>
 4e0:	b	3d0 <GOACC_parallel_keyed+0x2f4>
 4e4:	adrp	x0, 0 <goacc_wait>
 4e8:	add	x0, x0, #0x0
 4ec:	bl	0 <gomp_fatal>
 4f0:	ldr	x2, [x22, #48]
 4f4:	mov	x0, #0x0                   	// #0
 4f8:	add	x3, x22, #0x40
 4fc:	cbnz	x2, 51c <GOACC_parallel_keyed+0x440>
 500:	mov	w1, #0x0                   	// #0
 504:	mov	x0, x22
 508:	bl	0 <gomp_unmap_vars>
 50c:	b	4a0 <GOACC_parallel_keyed+0x3c4>
 510:	add	x0, x0, #0x1
 514:	cmp	x0, x2
 518:	b.eq	500 <GOACC_parallel_keyed+0x424>  // b.none
 51c:	lsl	x1, x0, #5
 520:	ldr	x1, [x3, x1]
 524:	cbz	x1, 510 <GOACC_parallel_keyed+0x434>
 528:	ldr	x1, [x1, #32]
 52c:	cmp	x1, #0x1
 530:	b.ne	510 <GOACC_parallel_keyed+0x434>  // b.any
 534:	ldr	x0, [x22, #56]
 538:	ldr	x2, [x0, #192]
 53c:	mov	w1, w21
 540:	mov	x0, x22
 544:	blr	x2
 548:	b	4a0 <GOACC_parallel_keyed+0x3c4>
 54c:	ldr	x0, [x25, x1, lsl #3]
 550:	cmp	x0, #0x8
 554:	b.eq	55c <GOACC_parallel_keyed+0x480>  // b.none
 558:	str	xzr, [x24, x1, lsl #3]
 55c:	add	x1, x1, #0x1
 560:	add	x2, x2, #0x1
 564:	cmp	x20, x1
 568:	b.eq	1a0 <GOACC_parallel_keyed+0xc4>  // b.none
 56c:	ldrh	w3, [x22, x1, lsl #1]
 570:	and	w0, w3, #0xff
 574:	cmp	w0, #0x8
 578:	b.ne	55c <GOACC_parallel_keyed+0x480>  // b.any
 57c:	cmp	w4, w1
 580:	b.le	54c <GOACC_parallel_keyed+0x470>
 584:	ldrh	w0, [x22, x2, lsl #1]
 588:	and	w0, w0, #0xff
 58c:	ldr	x5, [x25, x1, lsl #3]
 590:	cmp	x5, #0x8
 594:	b.eq	55c <GOACC_parallel_keyed+0x480>  // b.none
 598:	cmp	w0, #0x4
 59c:	b.ne	558 <GOACC_parallel_keyed+0x47c>  // b.any
 5a0:	ldr	x0, [x25, x2, lsl #3]
 5a4:	cbnz	x0, 558 <GOACC_parallel_keyed+0x47c>
 5a8:	ldr	x0, [x24, x2, lsl #3]
 5ac:	ldr	x5, [x24, x1, lsl #3]
 5b0:	ldr	x0, [x0]
 5b4:	cmp	x5, x0
 5b8:	b.ne	558 <GOACC_parallel_keyed+0x47c>  // b.any
 5bc:	strh	w3, [x22, x2, lsl #1]
 5c0:	str	x6, [x25, x2, lsl #3]
 5c4:	b	558 <GOACC_parallel_keyed+0x47c>

00000000000005c8 <GOACC_parallel>:
 5c8:	stp	x29, x30, [sp, #-32]!
 5cc:	mov	x29, sp
 5d0:	stp	x19, x20, [sp, #16]
 5d4:	mov	x19, x1
 5d8:	mov	x20, x3
 5dc:	mov	w0, #0x2                   	// #2
 5e0:	bl	0 <goacc_save_and_set_bind>
 5e4:	mov	x0, x20
 5e8:	blr	x19
 5ec:	bl	0 <goacc_restore_bind>
 5f0:	ldp	x19, x20, [sp, #16]
 5f4:	ldp	x29, x30, [sp], #32
 5f8:	ret

00000000000005fc <GOACC_data_start>:
 5fc:	stp	x29, x30, [sp, #-80]!
 600:	mov	x29, sp
 604:	stp	x19, x20, [sp, #16]
 608:	stp	x21, x22, [sp, #32]
 60c:	stp	x23, x24, [sp, #48]
 610:	str	x25, [sp, #64]
 614:	mov	x21, x1
 618:	mov	x22, x2
 61c:	mov	x23, x3
 620:	mov	x24, x4
 624:	mvn	w19, w0
 628:	adrp	x0, 0 <gomp_debug_var>
 62c:	ldr	w0, [x0]
 630:	cbnz	w0, 6bc <GOACC_data_start+0xc0>
 634:	bl	0 <goacc_lazy_initialize>
 638:	adrp	x0, 0 <goacc_tls_data>
 63c:	ldr	x0, [x0]
 640:	mrs	x1, tpidr_el0
 644:	ldr	x20, [x1, x0]
 648:	ldr	x25, [x20, #8]
 64c:	ldr	w0, [x25, #8]
 650:	orr	w19, w19, w0
 654:	tbnz	w19, #0, 6ec <GOACC_data_start+0xf0>
 658:	adrp	x0, 0 <gomp_debug_var>
 65c:	ldr	w0, [x0]
 660:	cbnz	w0, 720 <GOACC_data_start+0x124>
 664:	mov	w7, #0x0                   	// #0
 668:	mov	w6, #0x1                   	// #1
 66c:	mov	x5, x24
 670:	mov	x4, x23
 674:	mov	x3, #0x0                   	// #0
 678:	mov	x2, x22
 67c:	mov	x1, x21
 680:	mov	x0, x25
 684:	bl	0 <gomp_map_vars>
 688:	mov	x19, x0
 68c:	adrp	x0, 0 <gomp_debug_var>
 690:	ldr	w0, [x0]
 694:	cbnz	w0, 740 <GOACC_data_start+0x144>
 698:	ldr	x0, [x20, #24]
 69c:	str	x0, [x19, #40]
 6a0:	str	x19, [x20, #24]
 6a4:	ldp	x19, x20, [sp, #16]
 6a8:	ldp	x21, x22, [sp, #32]
 6ac:	ldp	x23, x24, [sp, #48]
 6b0:	ldr	x25, [sp, #64]
 6b4:	ldp	x29, x30, [sp], #80
 6b8:	ret
 6bc:	mov	x6, x4
 6c0:	mov	x5, x3
 6c4:	mov	x4, x2
 6c8:	mov	x3, x1
 6cc:	adrp	x2, 0 <goacc_wait>
 6d0:	add	x2, x2, #0x0
 6d4:	add	x2, x2, #0x18
 6d8:	adrp	x1, 0 <goacc_wait>
 6dc:	add	x1, x1, #0x0
 6e0:	mov	w0, #0x0                   	// #0
 6e4:	bl	0 <gomp_debug>
 6e8:	b	634 <GOACC_data_start+0x38>
 6ec:	mov	w7, #0x0                   	// #0
 6f0:	mov	w6, #0x1                   	// #1
 6f4:	mov	x5, #0x0                   	// #0
 6f8:	mov	x4, #0x0                   	// #0
 6fc:	mov	x3, #0x0                   	// #0
 700:	mov	x2, #0x0                   	// #0
 704:	mov	x1, #0x0                   	// #0
 708:	mov	x0, #0x0                   	// #0
 70c:	bl	0 <gomp_map_vars>
 710:	ldr	x1, [x20, #24]
 714:	str	x1, [x0, #40]
 718:	str	x0, [x20, #24]
 71c:	b	6a4 <GOACC_data_start+0xa8>
 720:	adrp	x2, 0 <goacc_wait>
 724:	add	x2, x2, #0x0
 728:	add	x2, x2, #0x18
 72c:	adrp	x1, 0 <goacc_wait>
 730:	add	x1, x1, #0x0
 734:	mov	w0, #0x0                   	// #0
 738:	bl	0 <gomp_debug>
 73c:	b	664 <GOACC_data_start+0x68>
 740:	adrp	x2, 0 <goacc_wait>
 744:	add	x2, x2, #0x0
 748:	add	x2, x2, #0x18
 74c:	adrp	x1, 0 <goacc_wait>
 750:	add	x1, x1, #0x0
 754:	mov	w0, #0x0                   	// #0
 758:	bl	0 <gomp_debug>
 75c:	b	698 <GOACC_data_start+0x9c>

0000000000000760 <GOACC_data_end>:
 760:	stp	x29, x30, [sp, #-32]!
 764:	mov	x29, sp
 768:	stp	x19, x20, [sp, #16]
 76c:	adrp	x0, 0 <goacc_tls_data>
 770:	ldr	x0, [x0]
 774:	mrs	x1, tpidr_el0
 778:	ldr	x20, [x1, x0]
 77c:	ldr	x19, [x20, #24]
 780:	adrp	x0, 0 <gomp_debug_var>
 784:	ldr	w0, [x0]
 788:	cbnz	w0, 7b8 <GOACC_data_end+0x58>
 78c:	ldr	x0, [x19, #40]
 790:	str	x0, [x20, #24]
 794:	mov	w1, #0x1                   	// #1
 798:	mov	x0, x19
 79c:	bl	0 <gomp_unmap_vars>
 7a0:	adrp	x0, 0 <gomp_debug_var>
 7a4:	ldr	w0, [x0]
 7a8:	cbnz	w0, 7d8 <GOACC_data_end+0x78>
 7ac:	ldp	x19, x20, [sp, #16]
 7b0:	ldp	x29, x30, [sp], #32
 7b4:	ret
 7b8:	adrp	x2, 0 <goacc_wait>
 7bc:	add	x2, x2, #0x0
 7c0:	add	x2, x2, #0x30
 7c4:	adrp	x1, 0 <goacc_wait>
 7c8:	add	x1, x1, #0x0
 7cc:	mov	w0, #0x0                   	// #0
 7d0:	bl	0 <gomp_debug>
 7d4:	b	78c <GOACC_data_end+0x2c>
 7d8:	adrp	x2, 0 <goacc_wait>
 7dc:	add	x2, x2, #0x0
 7e0:	add	x2, x2, #0x30
 7e4:	adrp	x1, 0 <goacc_wait>
 7e8:	add	x1, x1, #0x0
 7ec:	mov	w0, #0x0                   	// #0
 7f0:	bl	0 <gomp_debug>
 7f4:	b	7ac <GOACC_data_end+0x4c>

00000000000007f8 <GOACC_enter_exit_data>:
 7f8:	stp	x29, x30, [sp, #-272]!
 7fc:	mov	x29, sp
 800:	stp	x19, x20, [sp, #16]
 804:	stp	x21, x22, [sp, #32]
 808:	stp	x23, x24, [sp, #48]
 80c:	stp	x25, x26, [sp, #64]
 810:	mov	w21, w0
 814:	mov	x20, x1
 818:	mov	x22, x2
 81c:	mov	x23, x3
 820:	mov	x19, x4
 824:	mov	w24, w5
 828:	mov	w26, w6
 82c:	str	x7, [sp, #264]
 830:	str	q0, [sp, #128]
 834:	str	q1, [sp, #144]
 838:	str	q2, [sp, #160]
 83c:	str	q3, [sp, #176]
 840:	str	q4, [sp, #192]
 844:	str	q5, [sp, #208]
 848:	str	q6, [sp, #224]
 84c:	str	q7, [sp, #240]
 850:	bl	0 <goacc_lazy_initialize>
 854:	adrp	x0, 0 <goacc_tls_data>
 858:	ldr	x0, [x0]
 85c:	mrs	x1, tpidr_el0
 860:	ldr	x0, [x1, x0]
 864:	ldr	x25, [x0, #8]
 868:	ldr	w0, [x25, #8]
 86c:	orn	w21, w0, w21
 870:	tbnz	w21, #0, 9e0 <GOACC_enter_exit_data+0x1e8>
 874:	cbnz	w26, 8fc <GOACC_enter_exit_data+0x104>
 878:	cbz	x20, b3c <GOACC_enter_exit_data+0x344>
 87c:	stp	x27, x28, [sp, #80]
 880:	ldrh	w26, [x19]
 884:	ldr	x1, [x25, #248]
 888:	mov	w0, w24
 88c:	blr	x1
 890:	mov	x2, #0x0                   	// #0
 894:	ldrh	w0, [x19, x2, lsl #1]
 898:	and	w1, w0, #0xff
 89c:	sub	w0, w1, #0x4
 8a0:	and	w0, w0, #0xff
 8a4:	cmp	w0, #0x1
 8a8:	b.ls	934 <GOACC_enter_exit_data+0x13c>  // b.plast
 8ac:	cmp	w1, #0x6
 8b0:	b.eq	950 <GOACC_enter_exit_data+0x158>  // b.none
 8b4:	mov	x21, #0x0                   	// #0
 8b8:	tst	w1, #0x7e
 8bc:	b.eq	954 <GOACC_enter_exit_data+0x15c>  // b.none
 8c0:	and	w0, w1, #0xffffffef
 8c4:	and	w0, w0, #0xff
 8c8:	cmp	w0, #0x7
 8cc:	b.eq	8dc <GOACC_enter_exit_data+0xe4>  // b.none
 8d0:	and	w0, w1, #0x7f
 8d4:	cmp	w0, #0x2
 8d8:	b.ne	944 <GOACC_enter_exit_data+0x14c>  // b.any
 8dc:	and	w26, w26, #0xff
 8e0:	cmp	w26, #0x7
 8e4:	cset	w27, eq  // eq = none
 8e8:	cmp	w26, #0x82
 8ec:	csinc	w27, w27, wzr, ne  // ne = any
 8f0:	mov	x21, #0x0                   	// #0
 8f4:	mov	w28, #0x3                   	// #3
 8f8:	b	a68 <GOACC_enter_exit_data+0x270>
 8fc:	add	x0, sp, #0x110
 900:	str	x0, [sp, #96]
 904:	str	x0, [sp, #104]
 908:	add	x0, sp, #0x100
 90c:	str	x0, [sp, #112]
 910:	mov	w0, #0xfffffff8            	// #-8
 914:	str	w0, [sp, #120]
 918:	mov	w0, #0xffffff80            	// #-128
 91c:	str	w0, [sp, #124]
 920:	add	x2, sp, #0x60
 924:	mov	w1, w26
 928:	mov	w0, w24
 92c:	bl	0 <goacc_wait>
 930:	b	878 <GOACC_enter_exit_data+0x80>
 934:	add	x2, x2, #0x1
 938:	cmp	x20, x2
 93c:	b.ne	894 <GOACC_enter_exit_data+0x9c>  // b.any
 940:	b	8dc <GOACC_enter_exit_data+0xe4>
 944:	adrp	x0, 0 <goacc_wait>
 948:	add	x0, x0, #0x0
 94c:	bl	0 <gomp_fatal>
 950:	mov	x21, #0x0                   	// #0
 954:	mov	w24, #0x3                   	// #3
 958:	mov	w26, #0x2                   	// #2
 95c:	b	978 <GOACC_enter_exit_data+0x180>
 960:	ldr	x1, [x23, x21, lsl #3]
 964:	ldr	x0, [x22, x21, lsl #3]
 968:	bl	0 <acc_create>
 96c:	add	x21, x21, #0x1
 970:	cmp	x20, x21
 974:	b.ls	9d0 <GOACC_enter_exit_data+0x1d8>  // b.plast
 978:	lsl	x0, x21, #1
 97c:	add	x3, x19, x0
 980:	add	w1, w21, #0x1
 984:	cmp	x20, w1, sxtw
 988:	b.ls	9a4 <GOACC_enter_exit_data+0x1ac>  // b.plast
 98c:	add	x1, x19, w21, sxtw #1
 990:	ldrb	w1, [x1, #2]
 994:	cmp	w1, #0x5
 998:	b.eq	b10 <GOACC_enter_exit_data+0x318>  // b.none
 99c:	cmp	w1, #0x4
 9a0:	b.eq	b34 <GOACC_enter_exit_data+0x33c>  // b.none
 9a4:	ldrb	w1, [x19, x0]
 9a8:	cmp	w1, #0x80
 9ac:	b.eq	960 <GOACC_enter_exit_data+0x168>  // b.none
 9b0:	b.hi	afc <GOACC_enter_exit_data+0x304>  // b.pmore
 9b4:	cbz	w1, 960 <GOACC_enter_exit_data+0x168>
 9b8:	cmp	w1, #0x1
 9bc:	b.ne	b04 <GOACC_enter_exit_data+0x30c>  // b.any
 9c0:	ldr	x1, [x23, x21, lsl #3]
 9c4:	ldr	x0, [x22, x21, lsl #3]
 9c8:	bl	0 <acc_copyin>
 9cc:	b	96c <GOACC_enter_exit_data+0x174>
 9d0:	ldp	x27, x28, [sp, #80]
 9d4:	ldr	x1, [x25, #248]
 9d8:	mov	w0, #0xfffffffe            	// #-2
 9dc:	blr	x1
 9e0:	ldp	x19, x20, [sp, #16]
 9e4:	ldp	x21, x22, [sp, #32]
 9e8:	ldp	x23, x24, [sp, #48]
 9ec:	ldp	x25, x26, [sp, #64]
 9f0:	ldp	x29, x30, [sp], #272
 9f4:	ret
 9f8:	ldr	x1, [x23, x26]
 9fc:	ldr	x0, [x22, x26]
 a00:	bl	0 <acc_delete>
 a04:	b	a5c <GOACC_enter_exit_data+0x264>
 a08:	ldr	x1, [x23, x21, lsl #3]
 a0c:	ldr	x0, [x22, x21, lsl #3]
 a10:	bl	0 <acc_copyout>
 a14:	b	a5c <GOACC_enter_exit_data+0x264>
 a18:	adrp	x0, 0 <goacc_wait>
 a1c:	add	x0, x0, #0x0
 a20:	bl	0 <gomp_fatal>
 a24:	ldp	x27, x28, [sp, #80]
 a28:	b	9d4 <GOACC_enter_exit_data+0x1dc>
 a2c:	mov	w26, w28
 a30:	and	w1, w1, #0x7f
 a34:	cmp	w1, #0x2
 a38:	mov	w5, w26
 a3c:	mov	w4, w27
 a40:	mov	w3, w24
 a44:	cset	w2, eq  // eq = none
 a48:	ldr	x1, [x23, x21, lsl #3]
 a4c:	ldr	x0, [x22, x21, lsl #3]
 a50:	bl	0 <gomp_acc_remove_pointer>
 a54:	sub	w26, w26, #0x1
 a58:	add	x21, x21, w26, sxtw
 a5c:	add	x21, x21, #0x1
 a60:	cmp	x20, x21
 a64:	b.ls	a24 <GOACC_enter_exit_data+0x22c>  // b.plast
 a68:	ldrh	w0, [x19, x21, lsl #1]
 a6c:	and	w1, w0, #0xff
 a70:	add	w0, w21, #0x1
 a74:	cmp	x20, w0, sxtw
 a78:	b.ls	a94 <GOACC_enter_exit_data+0x29c>  // b.plast
 a7c:	add	x0, x19, w21, sxtw #1
 a80:	ldrb	w0, [x0, #2]
 a84:	cmp	w0, #0x5
 a88:	b.eq	a2c <GOACC_enter_exit_data+0x234>  // b.none
 a8c:	cmp	w0, #0x4
 a90:	b.eq	ad8 <GOACC_enter_exit_data+0x2e0>  // b.none
 a94:	cmp	w1, #0x17
 a98:	b.eq	ab0 <GOACC_enter_exit_data+0x2b8>  // b.none
 a9c:	b.hi	ae0 <GOACC_enter_exit_data+0x2e8>  // b.pmore
 aa0:	cmp	w1, #0x2
 aa4:	b.eq	ae8 <GOACC_enter_exit_data+0x2f0>  // b.none
 aa8:	cmp	w1, #0x7
 aac:	b.ne	a18 <GOACC_enter_exit_data+0x220>  // b.any
 ab0:	lsl	x26, x21, #3
 ab4:	ldr	x1, [x23, x21, lsl #3]
 ab8:	ldr	x0, [x22, x21, lsl #3]
 abc:	bl	0 <acc_is_present>
 ac0:	cbz	w0, a5c <GOACC_enter_exit_data+0x264>
 ac4:	cbz	w27, 9f8 <GOACC_enter_exit_data+0x200>
 ac8:	ldr	x1, [x23, x26]
 acc:	ldr	x0, [x22, x26]
 ad0:	bl	0 <acc_delete_finalize>
 ad4:	b	a5c <GOACC_enter_exit_data+0x264>
 ad8:	mov	w26, #0x2                   	// #2
 adc:	b	a30 <GOACC_enter_exit_data+0x238>
 ae0:	cmp	w1, #0x82
 ae4:	b.ne	a18 <GOACC_enter_exit_data+0x220>  // b.any
 ae8:	cbz	w27, a08 <GOACC_enter_exit_data+0x210>
 aec:	ldr	x1, [x23, x21, lsl #3]
 af0:	ldr	x0, [x22, x21, lsl #3]
 af4:	bl	0 <acc_copyout_finalize>
 af8:	b	a5c <GOACC_enter_exit_data+0x264>
 afc:	cmp	w1, #0x81
 b00:	b.eq	9c0 <GOACC_enter_exit_data+0x1c8>  // b.none
 b04:	adrp	x0, 0 <goacc_wait>
 b08:	add	x0, x0, #0x0
 b0c:	bl	0 <gomp_fatal>
 b10:	mov	w27, w24
 b14:	lsl	x1, x21, #3
 b18:	add	x2, x23, x1
 b1c:	add	x1, x22, x1
 b20:	sxtw	x0, w27
 b24:	bl	0 <gomp_acc_insert_pointer>
 b28:	sub	w27, w27, #0x1
 b2c:	add	x21, x21, w27, sxtw
 b30:	b	96c <GOACC_enter_exit_data+0x174>
 b34:	mov	w27, w26
 b38:	b	b14 <GOACC_enter_exit_data+0x31c>
 b3c:	ldr	x1, [x25, #248]
 b40:	mov	w0, w24
 b44:	blr	x1
 b48:	b	9d4 <GOACC_enter_exit_data+0x1dc>

0000000000000b4c <GOACC_update>:
 b4c:	stp	x29, x30, [sp, #-272]!
 b50:	mov	x29, sp
 b54:	stp	x19, x20, [sp, #16]
 b58:	stp	x21, x22, [sp, #32]
 b5c:	stp	x23, x24, [sp, #48]
 b60:	stp	x25, x26, [sp, #64]
 b64:	mov	w19, w0
 b68:	mov	x21, x1
 b6c:	mov	x20, x2
 b70:	mov	x23, x3
 b74:	mov	x22, x4
 b78:	mov	w24, w5
 b7c:	mov	w26, w6
 b80:	str	x7, [sp, #264]
 b84:	str	q0, [sp, #128]
 b88:	str	q1, [sp, #144]
 b8c:	str	q2, [sp, #160]
 b90:	str	q3, [sp, #176]
 b94:	str	q4, [sp, #192]
 b98:	str	q5, [sp, #208]
 b9c:	str	q6, [sp, #224]
 ba0:	str	q7, [sp, #240]
 ba4:	bl	0 <goacc_lazy_initialize>
 ba8:	adrp	x0, 0 <goacc_tls_data>
 bac:	ldr	x0, [x0]
 bb0:	mrs	x1, tpidr_el0
 bb4:	ldr	x0, [x1, x0]
 bb8:	ldr	x25, [x0, #8]
 bbc:	ldr	w0, [x25, #8]
 bc0:	orn	w19, w0, w19
 bc4:	tbnz	w19, #0, d30 <GOACC_update+0x1e4>
 bc8:	cbnz	w26, bf8 <GOACC_update+0xac>
 bcc:	ldr	x1, [x25, #248]
 bd0:	mov	w0, w24
 bd4:	blr	x1
 bd8:	cbz	x21, d24 <GOACC_update+0x1d8>
 bdc:	stp	x27, x28, [sp, #80]
 be0:	mov	w2, #0x0                   	// #0
 be4:	mov	x19, #0x0                   	// #0
 be8:	mov	x27, #0x8                   	// #8
 bec:	mov	w24, #0x0                   	// #0
 bf0:	mov	w26, #0x1                   	// #1
 bf4:	b	c5c <GOACC_update+0x110>
 bf8:	add	x0, sp, #0x110
 bfc:	str	x0, [sp, #96]
 c00:	str	x0, [sp, #104]
 c04:	add	x0, sp, #0x100
 c08:	str	x0, [sp, #112]
 c0c:	mov	w0, #0xfffffff8            	// #-8
 c10:	str	w0, [sp, #120]
 c14:	mov	w0, #0xffffff80            	// #-128
 c18:	str	w0, [sp, #124]
 c1c:	add	x2, sp, #0x60
 c20:	mov	w1, w26
 c24:	mov	w0, w24
 c28:	bl	0 <goacc_wait>
 c2c:	b	bcc <GOACC_update+0x80>
 c30:	cmp	w0, #0x2
 c34:	b.eq	cf8 <GOACC_update+0x1ac>  // b.none
 c38:	b.ls	c94 <GOACC_update+0x148>  // b.plast
 c3c:	sub	w1, w0, #0x4
 c40:	and	w1, w1, #0xff
 c44:	cmp	w1, #0x1
 c48:	b.hi	d10 <GOACC_update+0x1c4>  // b.pmore
 c4c:	add	x19, x19, #0x1
 c50:	add	x20, x20, #0x8
 c54:	cmp	x21, x19
 c58:	b.eq	d20 <GOACC_update+0x1d4>  // b.none
 c5c:	ldrh	w0, [x22, x19, lsl #1]
 c60:	and	w0, w0, #0xff
 c64:	cmp	w0, #0x1d
 c68:	b.eq	cc4 <GOACC_update+0x178>  // b.none
 c6c:	b.ls	c30 <GOACC_update+0xe4>  // b.plast
 c70:	cmp	w0, #0x81
 c74:	b.eq	cb0 <GOACC_update+0x164>  // b.none
 c78:	cmp	w0, #0x82
 c7c:	b.ne	d10 <GOACC_update+0x1c4>  // b.any
 c80:	ldr	x1, [x23, x19, lsl #3]
 c84:	ldr	x0, [x20]
 c88:	bl	0 <acc_update_self>
 c8c:	mov	w2, w24
 c90:	b	c4c <GOACC_update+0x100>
 c94:	cmp	w0, #0x1
 c98:	b.ne	d10 <GOACC_update+0x1c4>  // b.any
 c9c:	ldr	x1, [x23, x19, lsl #3]
 ca0:	ldr	x0, [x20]
 ca4:	bl	0 <acc_is_present>
 ca8:	mov	w2, w24
 cac:	cbz	w0, c4c <GOACC_update+0x100>
 cb0:	ldr	x1, [x23, x19, lsl #3]
 cb4:	ldr	x0, [x20]
 cb8:	bl	0 <acc_update_device>
 cbc:	mov	w2, w26
 cc0:	b	c4c <GOACC_update+0x100>
 cc4:	cbz	w2, c4c <GOACC_update+0x100>
 cc8:	ldur	x0, [x20, #-8]
 ccc:	bl	0 <acc_deviceptr>
 cd0:	ldr	x1, [x20]
 cd4:	ldr	x28, [x1]
 cd8:	str	x0, [x1]
 cdc:	mov	x1, x27
 ce0:	ldr	x0, [x20]
 ce4:	bl	0 <acc_update_device>
 ce8:	ldr	x0, [x20]
 cec:	str	x28, [x0]
 cf0:	mov	w2, w24
 cf4:	b	c4c <GOACC_update+0x100>
 cf8:	ldr	x1, [x23, x19, lsl #3]
 cfc:	ldr	x0, [x20]
 d00:	bl	0 <acc_is_present>
 d04:	mov	w2, w24
 d08:	cbz	w0, c4c <GOACC_update+0x100>
 d0c:	b	c80 <GOACC_update+0x134>
 d10:	mov	w1, w0
 d14:	adrp	x0, 0 <goacc_wait>
 d18:	add	x0, x0, #0x0
 d1c:	bl	0 <gomp_fatal>
 d20:	ldp	x27, x28, [sp, #80]
 d24:	ldr	x1, [x25, #248]
 d28:	mov	w0, #0xfffffffe            	// #-2
 d2c:	blr	x1
 d30:	ldp	x19, x20, [sp, #16]
 d34:	ldp	x21, x22, [sp, #32]
 d38:	ldp	x23, x24, [sp, #48]
 d3c:	ldp	x25, x26, [sp, #64]
 d40:	ldp	x29, x30, [sp], #272
 d44:	ret

0000000000000d48 <GOACC_wait>:
 d48:	stp	x29, x30, [sp, #-224]!
 d4c:	mov	x29, sp
 d50:	str	x2, [sp, #176]
 d54:	str	x3, [sp, #184]
 d58:	str	x4, [sp, #192]
 d5c:	str	x5, [sp, #200]
 d60:	str	x6, [sp, #208]
 d64:	str	x7, [sp, #216]
 d68:	str	q0, [sp, #48]
 d6c:	str	q1, [sp, #64]
 d70:	str	q2, [sp, #80]
 d74:	str	q3, [sp, #96]
 d78:	str	q4, [sp, #112]
 d7c:	str	q5, [sp, #128]
 d80:	str	q6, [sp, #144]
 d84:	str	q7, [sp, #160]
 d88:	cbnz	w1, da0 <GOACC_wait+0x58>
 d8c:	cmn	w0, #0x2
 d90:	b.eq	dd0 <GOACC_wait+0x88>  // b.none
 d94:	bl	0 <acc_wait_all_async>
 d98:	ldp	x29, x30, [sp], #224
 d9c:	ret
 da0:	add	x2, sp, #0xe0
 da4:	str	x2, [sp, #16]
 da8:	str	x2, [sp, #24]
 dac:	add	x2, sp, #0xb0
 db0:	str	x2, [sp, #32]
 db4:	mov	w2, #0xffffffd0            	// #-48
 db8:	str	w2, [sp, #40]
 dbc:	mov	w2, #0xffffff80            	// #-128
 dc0:	str	w2, [sp, #44]
 dc4:	add	x2, sp, #0x10
 dc8:	bl	0 <goacc_wait>
 dcc:	b	d98 <GOACC_wait+0x50>
 dd0:	bl	0 <acc_wait_all>
 dd4:	b	d98 <GOACC_wait+0x50>

0000000000000dd8 <GOACC_get_num_threads>:
 dd8:	mov	w0, #0x1                   	// #1
 ddc:	ret

0000000000000de0 <GOACC_get_thread_num>:
 de0:	mov	w0, #0x0                   	// #0
 de4:	ret

0000000000000de8 <GOACC_declare>:
 de8:	cbz	x1, fd4 <GOACC_declare+0x1ec>
 dec:	stp	x29, x30, [sp, #-112]!
 df0:	mov	x29, sp
 df4:	stp	x19, x20, [sp, #16]
 df8:	stp	x21, x22, [sp, #32]
 dfc:	stp	x23, x24, [sp, #48]
 e00:	stp	x25, x26, [sp, #64]
 e04:	stp	x27, x28, [sp, #80]
 e08:	mov	w26, w0
 e0c:	mov	x22, x1
 e10:	mov	x23, x2
 e14:	mov	x24, x3
 e18:	mov	x19, x4
 e1c:	mov	x20, #0x0                   	// #0
 e20:	mov	w28, #0xfffffffe            	// #-2
 e24:	mov	x27, #0x1                   	// #1
 e28:	b	e9c <GOACC_declare+0xb4>
 e2c:	cbz	w0, f4c <GOACC_declare+0x164>
 e30:	cmp	w0, #0x1
 e34:	b.ne	f28 <GOACC_declare+0x140>  // b.any
 e38:	lsl	x2, x20, #3
 e3c:	mov	w6, #0x0                   	// #0
 e40:	mov	w5, w28
 e44:	mov	x4, x19
 e48:	add	x3, x24, x2
 e4c:	add	x2, x23, x2
 e50:	mov	x1, x27
 e54:	mov	w0, w26
 e58:	bl	7f8 <GOACC_enter_exit_data>
 e5c:	b	e8c <GOACC_declare+0xa4>
 e60:	cmp	w0, #0x7
 e64:	b.ne	f04 <GOACC_declare+0x11c>  // b.any
 e68:	lsl	x2, x20, #3
 e6c:	mov	w6, #0x0                   	// #0
 e70:	mov	w5, w28
 e74:	mov	x4, x21
 e78:	add	x3, x24, x2
 e7c:	add	x2, x23, x2
 e80:	mov	x1, x27
 e84:	mov	w0, w26
 e88:	bl	7f8 <GOACC_enter_exit_data>
 e8c:	add	x20, x20, #0x1
 e90:	add	x19, x19, #0x2
 e94:	cmp	x22, x20
 e98:	b.eq	fb8 <GOACC_declare+0x1d0>  // b.none
 e9c:	mov	x21, x19
 ea0:	ldrb	w0, [x19]
 ea4:	sub	w1, w0, #0x4
 ea8:	and	w1, w1, #0xff
 eac:	cmp	w1, #0x1
 eb0:	b.ls	e8c <GOACC_declare+0xa4>  // b.plast
 eb4:	cmp	w0, #0x2
 eb8:	b.eq	f90 <GOACC_declare+0x1a8>  // b.none
 ebc:	b.ls	e2c <GOACC_declare+0x44>  // b.plast
 ec0:	cmp	w0, #0x8
 ec4:	b.eq	e8c <GOACC_declare+0xa4>  // b.none
 ec8:	b.hi	f10 <GOACC_declare+0x128>  // b.pmore
 ecc:	cmp	w0, #0x6
 ed0:	b.ne	e60 <GOACC_declare+0x78>  // b.any
 ed4:	lsl	x0, x20, #3
 ed8:	add	x21, x23, x0
 edc:	add	x25, x24, x0
 ee0:	ldr	x1, [x24, x20, lsl #3]
 ee4:	ldr	x0, [x23, x20, lsl #3]
 ee8:	bl	0 <acc_is_present>
 eec:	cbnz	w0, e8c <GOACC_declare+0xa4>
 ef0:	ldr	x2, [x25]
 ef4:	ldr	x1, [x21]
 ef8:	adrp	x0, 0 <goacc_wait>
 efc:	add	x0, x0, #0x0
 f00:	bl	0 <gomp_fatal>
 f04:	cmp	w0, #0x4
 f08:	b.eq	e68 <GOACC_declare+0x80>  // b.none
 f0c:	b	f28 <GOACC_declare+0x140>
 f10:	cmp	w0, #0x17
 f14:	b.eq	e68 <GOACC_declare+0x80>  // b.none
 f18:	sub	w0, w0, #0x80
 f1c:	and	w0, w0, #0xff
 f20:	cmp	w0, #0x2
 f24:	b.ls	e68 <GOACC_declare+0x80>  // b.plast
 f28:	adrp	x3, 0 <goacc_wait>
 f2c:	add	x3, x3, #0x0
 f30:	add	x3, x3, #0x40
 f34:	mov	w2, #0x2cc                 	// #716
 f38:	adrp	x1, 0 <goacc_wait>
 f3c:	add	x1, x1, #0x0
 f40:	adrp	x0, 0 <goacc_wait>
 f44:	add	x0, x0, #0x0
 f48:	bl	0 <__assert_fail>
 f4c:	lsl	x25, x20, #3
 f50:	add	x0, x23, x25
 f54:	str	x0, [sp, #104]
 f58:	add	x25, x24, x25
 f5c:	ldr	x1, [x24, x20, lsl #3]
 f60:	ldr	x0, [x23, x20, lsl #3]
 f64:	bl	0 <acc_is_present>
 f68:	cbnz	w0, e8c <GOACC_declare+0xa4>
 f6c:	mov	w6, #0x0                   	// #0
 f70:	mov	w5, w28
 f74:	mov	x4, x19
 f78:	mov	x3, x25
 f7c:	ldr	x2, [sp, #104]
 f80:	mov	x1, x27
 f84:	mov	w0, w26
 f88:	bl	7f8 <GOACC_enter_exit_data>
 f8c:	b	e8c <GOACC_declare+0xa4>
 f90:	lsl	x2, x20, #3
 f94:	mov	w6, #0x0                   	// #0
 f98:	mov	w5, w28
 f9c:	mov	x4, x19
 fa0:	add	x3, x24, x2
 fa4:	add	x2, x23, x2
 fa8:	mov	x1, x27
 fac:	mov	w0, w26
 fb0:	bl	7f8 <GOACC_enter_exit_data>
 fb4:	b	e8c <GOACC_declare+0xa4>
 fb8:	ldp	x19, x20, [sp, #16]
 fbc:	ldp	x21, x22, [sp, #32]
 fc0:	ldp	x23, x24, [sp, #48]
 fc4:	ldp	x25, x26, [sp, #64]
 fc8:	ldp	x27, x28, [sp, #80]
 fcc:	ldp	x29, x30, [sp], #112
 fd0:	ret
 fd4:	ret

oacc-host.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <host_get_name>:
   0:	adrp	x0, 0 <host_get_name>
   4:	ldr	x0, [x0]
   8:	ret

000000000000000c <host_get_caps>:
   c:	adrp	x0, 0 <host_get_name>
  10:	ldr	w0, [x0]
  14:	ret

0000000000000018 <host_get_type>:
  18:	adrp	x0, 0 <host_get_name>
  1c:	ldr	w0, [x0]
  20:	ret

0000000000000024 <host_get_num_devices>:
  24:	mov	w0, #0x1                   	// #1
  28:	ret

000000000000002c <host_init_device>:
  2c:	mov	w0, #0x1                   	// #1
  30:	ret

0000000000000034 <host_fini_device>:
  34:	mov	w0, #0x1                   	// #1
  38:	ret

000000000000003c <host_version>:
  3c:	mov	w0, #0x1                   	// #1
  40:	ret

0000000000000044 <host_load_image>:
  44:	mov	w0, #0x0                   	// #0
  48:	ret

000000000000004c <host_unload_image>:
  4c:	mov	w0, #0x1                   	// #1
  50:	ret

0000000000000054 <host_dev2host>:
  54:	mov	w0, #0x1                   	// #1
  58:	ret

000000000000005c <host_host2dev>:
  5c:	mov	w0, #0x1                   	// #1
  60:	ret

0000000000000064 <host_run>:
  64:	stp	x29, x30, [sp, #-16]!
  68:	mov	x29, sp
  6c:	mov	x0, x2
  70:	blr	x1
  74:	ldp	x29, x30, [sp], #16
  78:	ret

000000000000007c <host_openacc_exec>:
  7c:	stp	x29, x30, [sp, #-16]!
  80:	mov	x29, sp
  84:	mov	x1, x0
  88:	mov	x0, x2
  8c:	blr	x1
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <host_openacc_register_async_cleanup>:
  98:	ret

000000000000009c <host_openacc_async_test>:
  9c:	mov	w0, #0x1                   	// #1
  a0:	ret

00000000000000a4 <host_openacc_async_test_all>:
  a4:	mov	w0, #0x1                   	// #1
  a8:	ret

00000000000000ac <host_openacc_async_wait>:
  ac:	ret

00000000000000b0 <host_openacc_async_wait_async>:
  b0:	ret

00000000000000b4 <host_openacc_async_wait_all>:
  b4:	ret

00000000000000b8 <host_openacc_async_wait_all_async>:
  b8:	ret

00000000000000bc <host_openacc_async_set_async>:
  bc:	ret

00000000000000c0 <host_openacc_create_thread_data>:
  c0:	mov	x0, #0x0                   	// #0
  c4:	ret

00000000000000c8 <host_openacc_destroy_thread_data>:
  c8:	ret

00000000000000cc <host_free>:
  cc:	stp	x29, x30, [sp, #-16]!
  d0:	mov	x29, sp
  d4:	mov	x0, x1
  d8:	bl	0 <free>
  dc:	mov	w0, #0x1                   	// #1
  e0:	ldp	x29, x30, [sp], #16
  e4:	ret

00000000000000e8 <host_alloc>:
  e8:	stp	x29, x30, [sp, #-16]!
  ec:	mov	x29, sp
  f0:	mov	x0, x1
  f4:	bl	0 <gomp_malloc>
  f8:	ldp	x29, x30, [sp], #16
  fc:	ret

0000000000000100 <goacc_host_init>:
 100:	stp	x29, x30, [sp, #-16]!
 104:	mov	x29, sp
 108:	adrp	x0, 0 <host_get_name>
 10c:	add	x0, x0, #0x0
 110:	str	wzr, [x0, #168]
 114:	bl	0 <goacc_register>
 118:	ldp	x29, x30, [sp], #16
 11c:	ret

oacc-init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
       0:	ldxr	w1, [x0]
       4:	stlxr	w2, wzr, [x0]
       8:	cbnz	w2, 0 <gomp_mutex_unlock>
       c:	tbnz	w1, #31, 14 <gomp_mutex_unlock+0x14>
      10:	ret
      14:	stp	x29, x30, [sp, #-16]!
      18:	mov	x29, sp
      1c:	bl	0 <gomp_mutex_unlock_slow>
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <name_of_acc_device_t>:
      28:	cmp	w0, #0x2
      2c:	b.eq	84 <name_of_acc_device_t+0x5c>  // b.none
      30:	cmp	w0, #0x2
      34:	b.gt	50 <name_of_acc_device_t+0x28>
      38:	cbz	w0, 90 <name_of_acc_device_t+0x68>
      3c:	cmp	w0, #0x1
      40:	b.ne	6c <name_of_acc_device_t+0x44>  // b.any
      44:	adrp	x0, 0 <gomp_mutex_unlock>
      48:	add	x0, x0, #0x0
      4c:	ret
      50:	cmp	w0, #0x4
      54:	b.eq	9c <name_of_acc_device_t+0x74>  // b.none
      58:	cmp	w0, #0x5
      5c:	b.ne	6c <name_of_acc_device_t+0x44>  // b.any
      60:	adrp	x0, 0 <gomp_mutex_unlock>
      64:	add	x0, x0, #0x0
      68:	ret
      6c:	stp	x29, x30, [sp, #-16]!
      70:	mov	x29, sp
      74:	mov	w1, w0
      78:	adrp	x0, 0 <gomp_mutex_unlock>
      7c:	add	x0, x0, #0x0
      80:	bl	0 <gomp_fatal>
      84:	adrp	x0, 0 <gomp_mutex_unlock>
      88:	add	x0, x0, #0x0
      8c:	ret
      90:	adrp	x0, 0 <gomp_mutex_unlock>
      94:	add	x0, x0, #0x0
      98:	ret
      9c:	adrp	x0, 0 <gomp_mutex_unlock>
      a0:	add	x0, x0, #0x0
      a4:	ret

00000000000000a8 <acc_dev_num_out_of_range>:
      a8:	stp	x29, x30, [sp, #-16]!
      ac:	mov	x29, sp
      b0:	cbnz	w2, c8 <acc_dev_num_out_of_range+0x20>
      b4:	bl	28 <name_of_acc_device_t>
      b8:	mov	x1, x0
      bc:	adrp	x0, 0 <gomp_mutex_unlock>
      c0:	add	x0, x0, #0x0
      c4:	bl	0 <gomp_fatal>
      c8:	adrp	x0, 0 <gomp_mutex_unlock>
      cc:	add	x0, x0, #0x0
      d0:	bl	0 <gomp_fatal>
      d4:	nop

00000000000000d8 <resolve_device>:
      d8:	stp	x29, x30, [sp, #-96]!
      dc:	mov	x29, sp
      e0:	stp	x19, x20, [sp, #16]
      e4:	stp	x25, x26, [sp, #64]
      e8:	mov	w19, w0
      ec:	and	w25, w1, #0xff
      f0:	cmp	w0, #0x2
      f4:	b.eq	22c <resolve_device+0x154>  // b.none
      f8:	cmp	w0, #0x4
      fc:	b.eq	2a4 <resolve_device+0x1cc>  // b.none
     100:	cmp	w0, #0x1
     104:	b.eq	11c <resolve_device+0x44>  // b.none
     108:	cmp	w0, #0x6
     10c:	b.le	1b4 <resolve_device+0xdc>
     110:	cbnz	w25, 254 <resolve_device+0x17c>
     114:	mov	x0, #0x0                   	// #0
     118:	b	244 <resolve_device+0x16c>
     11c:	adrp	x0, 0 <goacc_device_type>
     120:	ldr	x0, [x0]
     124:	cbz	x0, 290 <resolve_device+0x1b8>
     128:	stp	x21, x22, [sp, #32]
     12c:	stp	x23, x24, [sp, #48]
     130:	str	x27, [sp, #80]
     134:	mov	x20, #0x2                   	// #2
     138:	adrp	x24, 0 <gomp_mutex_unlock>
     13c:	add	x24, x24, #0x0
     140:	adrp	x27, 0 <gomp_mutex_unlock>
     144:	add	x27, x27, #0x0
     148:	adrp	x26, 0 <gomp_mutex_unlock>
     14c:	add	x26, x26, #0x0
     150:	b	160 <resolve_device+0x88>
     154:	add	x20, x20, #0x1
     158:	cmp	w20, #0x6
     15c:	b.eq	1ec <resolve_device+0x114>  // b.none
     160:	mov	w19, w20
     164:	ldr	x21, [x24, x20, lsl #3]
     168:	cbz	x21, 154 <resolve_device+0x7c>
     16c:	adrp	x0, 0 <goacc_device_type>
     170:	ldr	x23, [x0]
     174:	ldr	x22, [x21]
     178:	mov	x1, x27
     17c:	mov	x0, x22
     180:	bl	0 <strcmp>
     184:	cmp	w0, #0x0
     188:	csel	x1, x26, x22, eq  // eq = none
     18c:	mov	x0, x23
     190:	bl	0 <strcasecmp>
     194:	cbnz	w0, 154 <resolve_device+0x7c>
     198:	ldr	x0, [x21, #48]
     19c:	blr	x0
     1a0:	cmp	w0, #0x0
     1a4:	b.le	154 <resolve_device+0x7c>
     1a8:	ldp	x21, x22, [sp, #32]
     1ac:	ldp	x23, x24, [sp, #48]
     1b0:	ldr	x27, [sp, #80]
     1b4:	cmp	w19, #0x1
     1b8:	ccmp	w19, #0x4, #0x4, hi  // hi = pmore
     1bc:	b.ne	22c <resolve_device+0x154>  // b.any
     1c0:	stp	x21, x22, [sp, #32]
     1c4:	stp	x23, x24, [sp, #48]
     1c8:	str	x27, [sp, #80]
     1cc:	adrp	x3, 0 <gomp_mutex_unlock>
     1d0:	add	x3, x3, #0x0
     1d4:	mov	w2, #0xb6                  	// #182
     1d8:	adrp	x1, 0 <gomp_mutex_unlock>
     1dc:	add	x1, x1, #0x0
     1e0:	adrp	x0, 0 <gomp_mutex_unlock>
     1e4:	add	x0, x0, #0x0
     1e8:	bl	0 <__assert_fail>
     1ec:	mov	x0, #0x0                   	// #0
     1f0:	cbnz	w25, 204 <resolve_device+0x12c>
     1f4:	ldp	x21, x22, [sp, #32]
     1f8:	ldp	x23, x24, [sp, #48]
     1fc:	ldr	x27, [sp, #80]
     200:	b	244 <resolve_device+0x16c>
     204:	adrp	x0, 0 <gomp_mutex_unlock>
     208:	add	x0, x0, #0x0
     20c:	add	x0, x0, #0x30
     210:	bl	0 <gomp_mutex_unlock>
     214:	adrp	x0, 0 <goacc_device_type>
     218:	ldr	x1, [x0]
     21c:	adrp	x0, 0 <gomp_mutex_unlock>
     220:	add	x0, x0, #0x0
     224:	bl	0 <gomp_fatal>
     228:	mov	w19, #0x2                   	// #2
     22c:	adrp	x0, 0 <gomp_mutex_unlock>
     230:	add	x0, x0, #0x0
     234:	ldr	x0, [x0, w19, sxtw #3]
     238:	cmp	x0, #0x0
     23c:	ccmp	w25, #0x0, #0x4, eq  // eq = none
     240:	b.ne	254 <resolve_device+0x17c>  // b.any
     244:	ldp	x19, x20, [sp, #16]
     248:	ldp	x25, x26, [sp, #64]
     24c:	ldp	x29, x30, [sp], #96
     250:	ret
     254:	stp	x21, x22, [sp, #32]
     258:	stp	x23, x24, [sp, #48]
     25c:	str	x27, [sp, #80]
     260:	adrp	x0, 0 <gomp_mutex_unlock>
     264:	add	x0, x0, #0x0
     268:	add	x0, x0, #0x30
     26c:	bl	0 <gomp_mutex_unlock>
     270:	mov	w0, w19
     274:	bl	28 <name_of_acc_device_t>
     278:	mov	x1, x0
     27c:	adrp	x0, 0 <gomp_mutex_unlock>
     280:	add	x0, x0, #0x0
     284:	bl	0 <gomp_fatal>
     288:	mov	w19, #0x5                   	// #5
     28c:	b	22c <resolve_device+0x154>
     290:	adrp	x0, 0 <gomp_mutex_unlock>
     294:	ldr	x0, [x0]
     298:	cbnz	x0, 2b0 <resolve_device+0x1d8>
     29c:	mov	w19, #0x2                   	// #2
     2a0:	b	22c <resolve_device+0x154>
     2a4:	adrp	x0, 0 <gomp_mutex_unlock>
     2a8:	ldr	x0, [x0]
     2ac:	cbz	x0, 2c8 <resolve_device+0x1f0>
     2b0:	ldr	x0, [x0, #48]
     2b4:	blr	x0
     2b8:	cmp	w0, #0x0
     2bc:	b.gt	288 <resolve_device+0x1b0>
     2c0:	cmp	w19, #0x1
     2c4:	b.eq	228 <resolve_device+0x150>  // b.none
     2c8:	mov	x0, #0x0                   	// #0
     2cc:	cbz	w25, 244 <resolve_device+0x16c>
     2d0:	stp	x21, x22, [sp, #32]
     2d4:	stp	x23, x24, [sp, #48]
     2d8:	str	x27, [sp, #80]
     2dc:	adrp	x0, 0 <gomp_mutex_unlock>
     2e0:	add	x0, x0, #0x0
     2e4:	add	x0, x0, #0x30
     2e8:	bl	0 <gomp_mutex_unlock>
     2ec:	adrp	x0, 0 <gomp_mutex_unlock>
     2f0:	add	x0, x0, #0x0
     2f4:	bl	0 <gomp_fatal>

00000000000002f8 <goacc_destroy_thread>:
     2f8:	stp	x29, x30, [sp, #-32]!
     2fc:	mov	x29, sp
     300:	str	x19, [sp, #16]
     304:	mov	x19, x0
     308:	adrp	x0, 0 <gomp_mutex_unlock>
     30c:	add	x0, x0, #0x0
     310:	add	x0, x0, #0x34
     314:	mov	w2, #0x1                   	// #1
     318:	ldaxr	w1, [x0]
     31c:	cbnz	w1, 328 <goacc_destroy_thread+0x30>
     320:	stxr	w3, w2, [x0]
     324:	cbnz	w3, 318 <goacc_destroy_thread+0x20>
     328:	cmp	w1, #0x0
     32c:	b.ne	3bc <goacc_destroy_thread+0xc4>  // b.any
     330:	cbz	x19, 394 <goacc_destroy_thread+0x9c>
     334:	ldr	x1, [x19, #8]
     338:	cbz	x1, 350 <goacc_destroy_thread+0x58>
     33c:	ldr	x0, [x19, #40]
     340:	cbz	x0, 350 <goacc_destroy_thread+0x58>
     344:	ldr	x1, [x1, #264]
     348:	blr	x1
     34c:	str	xzr, [x19, #40]
     350:	ldr	x0, [x19, #24]
     354:	cbnz	x0, 3d0 <goacc_destroy_thread+0xd8>
     358:	adrp	x0, 0 <gomp_mutex_unlock>
     35c:	ldr	x1, [x0]
     360:	cbz	x1, 3f4 <goacc_destroy_thread+0xfc>
     364:	cmp	x19, x1
     368:	b.eq	42c <goacc_destroy_thread+0x134>  // b.none
     36c:	nop
     370:	mov	x0, x1
     374:	ldr	x1, [x1, #32]
     378:	cbz	x1, 3f4 <goacc_destroy_thread+0xfc>
     37c:	cmp	x19, x1
     380:	b.ne	370 <goacc_destroy_thread+0x78>  // b.any
     384:	ldr	x1, [x1, #32]
     388:	str	x1, [x0, #32]
     38c:	mov	x0, x19
     390:	bl	0 <free>
     394:	adrp	x0, 0 <gomp_mutex_unlock>
     398:	add	x0, x0, #0x0
     39c:	add	x0, x0, #0x34
     3a0:	ldxr	w1, [x0]
     3a4:	stlxr	w2, wzr, [x0]
     3a8:	cbnz	w2, 3a0 <goacc_destroy_thread+0xa8>
     3ac:	tbnz	w1, #31, 418 <goacc_destroy_thread+0x120>
     3b0:	ldr	x19, [sp, #16]
     3b4:	ldp	x29, x30, [sp], #32
     3b8:	ret
     3bc:	adrp	x0, 0 <gomp_mutex_unlock>
     3c0:	add	x0, x0, #0x0
     3c4:	add	x0, x0, #0x34
     3c8:	bl	0 <gomp_mutex_lock_slow>
     3cc:	b	330 <goacc_destroy_thread+0x38>
     3d0:	adrp	x3, 0 <gomp_mutex_unlock>
     3d4:	add	x3, x3, #0x0
     3d8:	add	x3, x3, #0x10
     3dc:	mov	w2, #0x16b                 	// #363
     3e0:	adrp	x1, 0 <gomp_mutex_unlock>
     3e4:	add	x1, x1, #0x0
     3e8:	adrp	x0, 0 <gomp_mutex_unlock>
     3ec:	add	x0, x0, #0x0
     3f0:	bl	0 <__assert_fail>
     3f4:	adrp	x3, 0 <gomp_mutex_unlock>
     3f8:	add	x3, x3, #0x0
     3fc:	add	x3, x3, #0x10
     400:	mov	w2, #0x17c                 	// #380
     404:	adrp	x1, 0 <gomp_mutex_unlock>
     408:	add	x1, x1, #0x0
     40c:	adrp	x0, 0 <gomp_mutex_unlock>
     410:	add	x0, x0, #0x0
     414:	bl	0 <__assert_fail>
     418:	adrp	x0, 0 <gomp_mutex_unlock>
     41c:	add	x0, x0, #0x0
     420:	add	x0, x0, #0x34
     424:	bl	0 <gomp_mutex_unlock_slow>
     428:	b	3b0 <goacc_destroy_thread+0xb8>
     42c:	ldr	x1, [x1, #32]
     430:	adrp	x0, 0 <gomp_mutex_unlock>
     434:	str	x1, [x0]
     438:	b	38c <goacc_destroy_thread+0x94>
     43c:	nop

0000000000000440 <goacc_register>:
     440:	stp	x29, x30, [sp, #-32]!
     444:	mov	x29, sp
     448:	str	x19, [sp, #16]
     44c:	mov	x19, x0
     450:	ldr	w0, [x0, #12]
     454:	cbnz	w0, 4c0 <goacc_register+0x80>
     458:	adrp	x0, 0 <gomp_mutex_unlock>
     45c:	add	x0, x0, #0x0
     460:	add	x0, x0, #0x30
     464:	mov	w2, #0x1                   	// #1
     468:	ldaxr	w1, [x0]
     46c:	cbnz	w1, 478 <goacc_register+0x38>
     470:	stxr	w3, w2, [x0]
     474:	cbnz	w3, 468 <goacc_register+0x28>
     478:	cmp	w1, #0x0
     47c:	b.ne	4cc <goacc_register+0x8c>  // b.any
     480:	ldr	w1, [x19, #16]
     484:	cmp	w1, #0x4
     488:	ccmp	w1, #0x1, #0x0, ne  // ne = any
     48c:	b.ls	4e0 <goacc_register+0xa0>  // b.plast
     490:	adrp	x0, 0 <gomp_mutex_unlock>
     494:	add	x0, x0, #0x0
     498:	ldr	x0, [x0, w1, uxtw #3]
     49c:	cbnz	x0, 504 <goacc_register+0xc4>
     4a0:	adrp	x0, 0 <gomp_mutex_unlock>
     4a4:	add	x0, x0, #0x0
     4a8:	str	x19, [x0, w1, uxtw #3]
     4ac:	add	x0, x0, #0x30
     4b0:	ldxr	w1, [x0]
     4b4:	stlxr	w2, wzr, [x0]
     4b8:	cbnz	w2, 4b0 <goacc_register+0x70>
     4bc:	tbnz	w1, #31, 528 <goacc_register+0xe8>
     4c0:	ldr	x19, [sp, #16]
     4c4:	ldp	x29, x30, [sp], #32
     4c8:	ret
     4cc:	adrp	x0, 0 <gomp_mutex_unlock>
     4d0:	add	x0, x0, #0x0
     4d4:	add	x0, x0, #0x30
     4d8:	bl	0 <gomp_mutex_lock_slow>
     4dc:	b	480 <goacc_register+0x40>
     4e0:	adrp	x3, 0 <gomp_mutex_unlock>
     4e4:	add	x3, x3, #0x0
     4e8:	add	x3, x3, #0x28
     4ec:	mov	w2, #0x4c                  	// #76
     4f0:	adrp	x1, 0 <gomp_mutex_unlock>
     4f4:	add	x1, x1, #0x0
     4f8:	adrp	x0, 0 <gomp_mutex_unlock>
     4fc:	add	x0, x0, #0x0
     500:	bl	0 <__assert_fail>
     504:	adrp	x3, 0 <gomp_mutex_unlock>
     508:	add	x3, x3, #0x0
     50c:	add	x3, x3, #0x28
     510:	mov	w2, #0x4f                  	// #79
     514:	adrp	x1, 0 <gomp_mutex_unlock>
     518:	add	x1, x1, #0x0
     51c:	adrp	x0, 0 <gomp_mutex_unlock>
     520:	add	x0, x0, #0x0
     524:	bl	0 <__assert_fail>
     528:	adrp	x0, 0 <gomp_mutex_unlock>
     52c:	add	x0, x0, #0x0
     530:	add	x0, x0, #0x30
     534:	bl	0 <gomp_mutex_unlock_slow>
     538:	b	4c0 <goacc_register+0x80>
     53c:	nop

0000000000000540 <goacc_attach_host_thread_to_device>:
     540:	stp	x29, x30, [sp, #-48]!
     544:	mov	x29, sp
     548:	stp	x19, x20, [sp, #16]
     54c:	stp	x21, x22, [sp, #32]
     550:	mov	w20, w0
     554:	mrs	x0, tpidr_el0
     558:	add	x0, x0, #0x0, lsl #12
     55c:	add	x0, x0, #0x0
     560:	ldr	x19, [x0]
     564:	cbz	x19, 638 <goacc_attach_host_thread_to_device+0xf8>
     568:	ldr	x0, [x19, #8]
     56c:	cbz	x0, 630 <goacc_attach_host_thread_to_device+0xf0>
     570:	ldr	w0, [x0, #12]
     574:	cmp	w20, #0x0
     578:	ccmp	w0, w20, #0x4, ge  // ge = tcont
     57c:	b.eq	5e0 <goacc_attach_host_thread_to_device+0xa0>  // b.none
     580:	ldr	x22, [x19]
     584:	cbz	x22, 648 <goacc_attach_host_thread_to_device+0x108>
     588:	ldr	x0, [x22, #48]
     58c:	blr	x0
     590:	cmp	w20, #0x0
     594:	csel	w1, w20, wzr, ge  // ge = tcont
     598:	cmp	w0, w1
     59c:	b.le	614 <goacc_attach_host_thread_to_device+0xd4>
     5a0:	str	x22, [x19]
     5a4:	sxtw	x0, w20
     5a8:	add	x21, x0, w20, sxtw #2
     5ac:	lsl	x21, x21, #2
     5b0:	sub	x21, x21, x0
     5b4:	add	x21, x22, x21, lsl #4
     5b8:	str	x21, [x19, #8]
     5bc:	str	xzr, [x19, #16]
     5c0:	str	xzr, [x19, #24]
     5c4:	ldr	x1, [x21, #256]
     5c8:	mov	w0, w20
     5cc:	blr	x1
     5d0:	str	x0, [x19, #40]
     5d4:	ldr	x1, [x21, #248]
     5d8:	mov	w0, #0xfffffffe            	// #-2
     5dc:	blr	x1
     5e0:	ldp	x19, x20, [sp, #16]
     5e4:	ldp	x21, x22, [sp, #32]
     5e8:	ldp	x29, x30, [sp], #48
     5ec:	ret
     5f0:	adrp	x3, 0 <gomp_mutex_unlock>
     5f4:	add	x3, x3, #0x0
     5f8:	add	x3, x3, #0x38
     5fc:	mov	w2, #0x19a                 	// #410
     600:	adrp	x1, 0 <gomp_mutex_unlock>
     604:	add	x1, x1, #0x0
     608:	adrp	x0, 0 <gomp_mutex_unlock>
     60c:	add	x0, x0, #0x0
     610:	bl	0 <__assert_fail>
     614:	mov	w2, w0
     618:	mov	w1, w20
     61c:	ldr	w0, [x22, #16]
     620:	bl	a8 <acc_dev_num_out_of_range>
     624:	mov	x0, x21
     628:	bl	0 <gomp_mutex_lock_slow>
     62c:	b	6c0 <goacc_attach_host_thread_to_device+0x180>
     630:	tbnz	w20, #31, 63c <goacc_attach_host_thread_to_device+0xfc>
     634:	b	580 <goacc_attach_host_thread_to_device+0x40>
     638:	tbz	w20, #31, 648 <goacc_attach_host_thread_to_device+0x108>
     63c:	adrp	x0, 0 <goacc_device_num>
     640:	ldr	w20, [x0]
     644:	cbnz	x19, 580 <goacc_attach_host_thread_to_device+0x40>
     648:	adrp	x0, 0 <gomp_mutex_unlock>
     64c:	ldr	x22, [x0]
     650:	cbz	x22, 5f0 <goacc_attach_host_thread_to_device+0xb0>
     654:	ldr	x0, [x22, #48]
     658:	blr	x0
     65c:	cmp	w20, #0x0
     660:	csel	w1, w20, wzr, ge  // ge = tcont
     664:	cmp	w1, w0
     668:	b.ge	614 <goacc_attach_host_thread_to_device+0xd4>  // b.tcont
     66c:	cbnz	x19, 5a0 <goacc_attach_host_thread_to_device+0x60>
     670:	mov	x0, #0x30                  	// #48
     674:	bl	0 <gomp_malloc>
     678:	mov	x19, x0
     67c:	mrs	x0, tpidr_el0
     680:	add	x0, x0, #0x0, lsl #12
     684:	add	x0, x0, #0x0
     688:	str	x19, [x0]
     68c:	adrp	x21, 0 <gomp_mutex_unlock>
     690:	add	x21, x21, #0x0
     694:	mov	x1, x19
     698:	ldr	w0, [x21, #72]
     69c:	bl	0 <pthread_setspecific>
     6a0:	add	x21, x21, #0x34
     6a4:	mov	w0, #0x1                   	// #1
     6a8:	ldaxr	w1, [x21]
     6ac:	cbnz	w1, 6b8 <goacc_attach_host_thread_to_device+0x178>
     6b0:	stxr	w2, w0, [x21]
     6b4:	cbnz	w2, 6a8 <goacc_attach_host_thread_to_device+0x168>
     6b8:	cmp	w1, #0x0
     6bc:	b.ne	624 <goacc_attach_host_thread_to_device+0xe4>  // b.any
     6c0:	adrp	x0, 0 <gomp_mutex_unlock>
     6c4:	add	x0, x0, #0x0
     6c8:	ldr	x1, [x0, #56]
     6cc:	str	x1, [x19, #32]
     6d0:	str	x19, [x0, #56]
     6d4:	add	x0, x0, #0x34
     6d8:	ldxr	w1, [x0]
     6dc:	stlxr	w2, wzr, [x0]
     6e0:	cbnz	w2, 6d8 <goacc_attach_host_thread_to_device+0x198>
     6e4:	tbz	w1, #31, 5a0 <goacc_attach_host_thread_to_device+0x60>
     6e8:	adrp	x0, 0 <gomp_mutex_unlock>
     6ec:	add	x0, x0, #0x0
     6f0:	add	x0, x0, #0x34
     6f4:	bl	0 <gomp_mutex_unlock_slow>
     6f8:	b	5a0 <goacc_attach_host_thread_to_device+0x60>
     6fc:	nop

0000000000000700 <acc_init>:
     700:	stp	x29, x30, [sp, #-48]!
     704:	mov	x29, sp
     708:	stp	x19, x20, [sp, #16]
     70c:	str	x21, [sp, #32]
     710:	mov	w19, w0
     714:	bl	0 <gomp_init_targets_once>
     718:	adrp	x2, 0 <gomp_mutex_unlock>
     71c:	add	x2, x2, #0x0
     720:	add	x2, x2, #0x30
     724:	mov	w0, #0x1                   	// #1
     728:	ldaxr	w1, [x2]
     72c:	cbnz	w1, 738 <acc_init+0x38>
     730:	stxr	w3, w0, [x2]
     734:	cbnz	w3, 728 <acc_init+0x28>
     738:	cmp	w1, #0x0
     73c:	b.ne	800 <acc_init+0x100>  // b.any
     740:	mov	w1, #0x1                   	// #1
     744:	mov	w0, w19
     748:	bl	d8 <resolve_device>
     74c:	mov	x20, x0
     750:	ldr	x0, [x0, #48]
     754:	blr	x0
     758:	cmp	w0, #0x0
     75c:	b.le	80c <acc_init+0x10c>
     760:	adrp	x1, 0 <goacc_device_num>
     764:	ldr	w1, [x1]
     768:	cmp	w0, w1
     76c:	b.le	80c <acc_init+0x10c>
     770:	sxtw	x0, w1
     774:	add	x19, x0, w1, sxtw #2
     778:	lsl	x19, x19, #2
     77c:	sub	x19, x19, x0
     780:	add	x19, x20, x19, lsl #4
     784:	add	x21, x19, #0xa8
     788:	mov	w0, #0x1                   	// #1
     78c:	ldaxr	w1, [x21]
     790:	cbnz	w1, 79c <acc_init+0x9c>
     794:	stxr	w2, w0, [x21]
     798:	cbnz	w2, 78c <acc_init+0x8c>
     79c:	cmp	w1, #0x0
     7a0:	b.ne	820 <acc_init+0x120>  // b.any
     7a4:	ldr	w0, [x19, #172]
     7a8:	cmp	w0, #0x1
     7ac:	b.eq	82c <acc_init+0x12c>  // b.none
     7b0:	mov	x0, x19
     7b4:	bl	0 <gomp_init_device>
     7b8:	ldxr	w0, [x21]
     7bc:	stlxr	w1, wzr, [x21]
     7c0:	cbnz	w1, 7b8 <acc_init+0xb8>
     7c4:	tbnz	w0, #31, 840 <acc_init+0x140>
     7c8:	adrp	x1, 0 <gomp_mutex_unlock>
     7cc:	add	x1, x1, #0x0
     7d0:	str	x20, [x1, #64]
     7d4:	add	x0, x1, #0x30
     7d8:	ldxr	w1, [x0]
     7dc:	stlxr	w2, wzr, [x0]
     7e0:	cbnz	w2, 7d8 <acc_init+0xd8>
     7e4:	tbnz	w1, #31, 84c <acc_init+0x14c>
     7e8:	mov	w0, #0xffffffff            	// #-1
     7ec:	bl	540 <goacc_attach_host_thread_to_device>
     7f0:	ldp	x19, x20, [sp, #16]
     7f4:	ldr	x21, [sp, #32]
     7f8:	ldp	x29, x30, [sp], #48
     7fc:	ret
     800:	mov	x0, x2
     804:	bl	0 <gomp_mutex_lock_slow>
     808:	b	740 <acc_init+0x40>
     80c:	mov	w2, w0
     810:	adrp	x0, 0 <goacc_device_num>
     814:	ldr	w1, [x0]
     818:	mov	w0, w19
     81c:	bl	a8 <acc_dev_num_out_of_range>
     820:	mov	x0, x21
     824:	bl	0 <gomp_mutex_lock_slow>
     828:	b	7a4 <acc_init+0xa4>
     82c:	mov	x0, x21
     830:	bl	0 <gomp_mutex_unlock>
     834:	adrp	x0, 0 <gomp_mutex_unlock>
     838:	add	x0, x0, #0x0
     83c:	bl	0 <gomp_fatal>
     840:	mov	x0, x21
     844:	bl	0 <gomp_mutex_unlock_slow>
     848:	b	7c8 <acc_init+0xc8>
     84c:	adrp	x0, 0 <gomp_mutex_unlock>
     850:	add	x0, x0, #0x0
     854:	add	x0, x0, #0x30
     858:	bl	0 <gomp_mutex_unlock_slow>
     85c:	b	7e8 <acc_init+0xe8>

0000000000000860 <acc_shutdown>:
     860:	stp	x29, x30, [sp, #-80]!
     864:	mov	x29, sp
     868:	stp	x19, x20, [sp, #16]
     86c:	stp	x21, x22, [sp, #32]
     870:	stp	x23, x24, [sp, #48]
     874:	str	x25, [sp, #64]
     878:	mov	w19, w0
     87c:	bl	0 <gomp_init_targets_once>
     880:	adrp	x2, 0 <gomp_mutex_unlock>
     884:	add	x2, x2, #0x0
     888:	add	x2, x2, #0x30
     88c:	mov	w0, #0x1                   	// #1
     890:	ldaxr	w1, [x2]
     894:	cbnz	w1, 8a0 <acc_shutdown+0x40>
     898:	stxr	w3, w0, [x2]
     89c:	cbnz	w3, 890 <acc_shutdown+0x30>
     8a0:	cmp	w1, #0x0
     8a4:	b.ne	970 <acc_shutdown+0x110>  // b.any
     8a8:	mov	w1, #0x1                   	// #1
     8ac:	mov	w0, w19
     8b0:	bl	d8 <resolve_device>
     8b4:	mov	x20, x0
     8b8:	ldr	x0, [x0, #48]
     8bc:	blr	x0
     8c0:	mov	w21, w0
     8c4:	cmp	w0, #0x0
     8c8:	b.le	934 <acc_shutdown+0xd4>
     8cc:	add	x19, x20, #0xa8
     8d0:	sub	w0, w0, #0x1
     8d4:	add	x22, x0, x0, lsl #2
     8d8:	lsl	x22, x22, #2
     8dc:	sub	x22, x22, x0
     8e0:	add	x0, x20, #0x1d8
     8e4:	add	x22, x0, x22, lsl #4
     8e8:	mov	w25, #0x1                   	// #1
     8ec:	nop
     8f0:	sub	x24, x19, #0xa8
     8f4:	mov	x23, x19
     8f8:	ldaxr	w1, [x19]
     8fc:	cbnz	w1, 908 <acc_shutdown+0xa8>
     900:	stxr	w0, w25, [x19]
     904:	cbnz	w0, 8f8 <acc_shutdown+0x98>
     908:	cmp	w1, #0x0
     90c:	b.ne	97c <acc_shutdown+0x11c>  // b.any
     910:	mov	x0, x24
     914:	bl	0 <gomp_unload_device>
     918:	ldxr	w0, [x23]
     91c:	stlxr	w1, wzr, [x23]
     920:	cbnz	w1, 918 <acc_shutdown+0xb8>
     924:	tbnz	w0, #31, 988 <acc_shutdown+0x128>
     928:	add	x19, x19, #0x130
     92c:	cmp	x19, x22
     930:	b.ne	8f0 <acc_shutdown+0x90>  // b.any
     934:	adrp	x0, 0 <gomp_mutex_unlock>
     938:	add	x0, x0, #0x0
     93c:	add	x0, x0, #0x34
     940:	mov	w2, #0x1                   	// #1
     944:	ldaxr	w1, [x0]
     948:	cbnz	w1, 954 <acc_shutdown+0xf4>
     94c:	stxr	w3, w2, [x0]
     950:	cbnz	w3, 944 <acc_shutdown+0xe4>
     954:	cmp	w1, #0x0
     958:	b.ne	994 <acc_shutdown+0x134>  // b.any
     95c:	adrp	x0, 0 <gomp_mutex_unlock>
     960:	ldr	x19, [x0]
     964:	cbz	x19, ab0 <acc_shutdown+0x250>
     968:	mov	w22, #0x1                   	// #1
     96c:	b	a5c <acc_shutdown+0x1fc>
     970:	mov	x0, x2
     974:	bl	0 <gomp_mutex_lock_slow>
     978:	b	8a8 <acc_shutdown+0x48>
     97c:	mov	x0, x19
     980:	bl	0 <gomp_mutex_lock_slow>
     984:	b	910 <acc_shutdown+0xb0>
     988:	mov	x0, x23
     98c:	bl	0 <gomp_mutex_unlock_slow>
     990:	b	928 <acc_shutdown+0xc8>
     994:	adrp	x0, 0 <gomp_mutex_unlock>
     998:	add	x0, x0, #0x0
     99c:	add	x0, x0, #0x34
     9a0:	bl	0 <gomp_mutex_lock_slow>
     9a4:	b	95c <acc_shutdown+0xfc>
     9a8:	adrp	x0, 0 <gomp_mutex_unlock>
     9ac:	add	x0, x0, #0x0
     9b0:	add	x0, x0, #0x34
     9b4:	ldxr	w1, [x0]
     9b8:	stlxr	w2, wzr, [x0]
     9bc:	cbnz	w2, 9b4 <acc_shutdown+0x154>
     9c0:	tbnz	w1, #31, 9d0 <acc_shutdown+0x170>
     9c4:	adrp	x0, 0 <gomp_mutex_unlock>
     9c8:	add	x0, x0, #0x0
     9cc:	bl	0 <gomp_fatal>
     9d0:	adrp	x0, 0 <gomp_mutex_unlock>
     9d4:	add	x0, x0, #0x0
     9d8:	add	x0, x0, #0x34
     9dc:	bl	0 <gomp_mutex_unlock_slow>
     9e0:	b	9c4 <acc_shutdown+0x164>
     9e4:	adrp	x0, 0 <gomp_mutex_unlock>
     9e8:	add	x0, x0, #0x0
     9ec:	add	x0, x0, #0x34
     9f0:	ldxr	w1, [x0]
     9f4:	stlxr	w2, wzr, [x0]
     9f8:	cbnz	w2, 9f0 <acc_shutdown+0x190>
     9fc:	tbnz	w1, #31, a0c <acc_shutdown+0x1ac>
     a00:	adrp	x0, 0 <gomp_mutex_unlock>
     a04:	add	x0, x0, #0x0
     a08:	bl	0 <gomp_fatal>
     a0c:	adrp	x0, 0 <gomp_mutex_unlock>
     a10:	add	x0, x0, #0x0
     a14:	add	x0, x0, #0x34
     a18:	bl	0 <gomp_mutex_unlock_slow>
     a1c:	b	a00 <acc_shutdown+0x1a0>
     a20:	cmp	w1, #0x0
     a24:	b.ne	aa0 <acc_shutdown+0x240>  // b.any
     a28:	ldr	x0, [x19, #8]
     a2c:	add	x0, x0, #0xa0
     a30:	bl	0 <gomp_free_memmap>
     a34:	ldr	x0, [x19, #8]
     a38:	add	x0, x0, #0xa8
     a3c:	ldxr	w1, [x0]
     a40:	stlxr	w2, wzr, [x0]
     a44:	cbnz	w2, a3c <acc_shutdown+0x1dc>
     a48:	tbnz	w1, #31, aa8 <acc_shutdown+0x248>
     a4c:	str	xzr, [x19, #8]
     a50:	str	xzr, [x19]
     a54:	ldr	x19, [x19, #32]
     a58:	cbz	x19, ab0 <acc_shutdown+0x250>
     a5c:	ldr	x0, [x19, #40]
     a60:	cbz	x0, a6c <acc_shutdown+0x20c>
     a64:	ldr	x1, [x20, #264]
     a68:	blr	x1
     a6c:	str	xzr, [x19, #40]
     a70:	ldr	x0, [x19, #24]
     a74:	cbnz	x0, 9a8 <acc_shutdown+0x148>
     a78:	ldr	x0, [x19, #16]
     a7c:	cbnz	x0, 9e4 <acc_shutdown+0x184>
     a80:	ldr	x0, [x19, #8]
     a84:	cbz	x0, a54 <acc_shutdown+0x1f4>
     a88:	add	x0, x0, #0xa8
     a8c:	ldaxr	w1, [x0]
     a90:	cbnz	w1, a20 <acc_shutdown+0x1c0>
     a94:	stxr	w2, w22, [x0]
     a98:	cbz	w2, a20 <acc_shutdown+0x1c0>
     a9c:	b	a8c <acc_shutdown+0x22c>
     aa0:	bl	0 <gomp_mutex_lock_slow>
     aa4:	b	a28 <acc_shutdown+0x1c8>
     aa8:	bl	0 <gomp_mutex_unlock_slow>
     aac:	b	a4c <acc_shutdown+0x1ec>
     ab0:	adrp	x0, 0 <gomp_mutex_unlock>
     ab4:	add	x0, x0, #0x0
     ab8:	add	x0, x0, #0x34
     abc:	ldxr	w1, [x0]
     ac0:	stlxr	w2, wzr, [x0]
     ac4:	cbnz	w2, abc <acc_shutdown+0x25c>
     ac8:	tbnz	w1, #31, b00 <acc_shutdown+0x2a0>
     acc:	cmp	w21, #0x0
     ad0:	b.le	bd4 <acc_shutdown+0x374>
     ad4:	add	x22, x20, #0xa8
     ad8:	sub	w21, w21, #0x1
     adc:	add	x0, x21, x21, lsl #2
     ae0:	lsl	x0, x0, #2
     ae4:	sub	x21, x0, x21
     ae8:	add	x20, x20, #0x1d8
     aec:	add	x20, x20, x21, lsl #4
     af0:	mov	w24, #0x0                   	// #0
     af4:	mov	w21, #0x1                   	// #1
     af8:	mov	w23, w21
     afc:	b	b3c <acc_shutdown+0x2dc>
     b00:	adrp	x0, 0 <gomp_mutex_unlock>
     b04:	add	x0, x0, #0x0
     b08:	add	x0, x0, #0x34
     b0c:	bl	0 <gomp_mutex_unlock_slow>
     b10:	b	acc <acc_shutdown+0x26c>
     b14:	mov	x0, x22
     b18:	bl	0 <gomp_mutex_lock_slow>
     b1c:	b	b58 <acc_shutdown+0x2f8>
     b20:	ldxr	w0, [x19]
     b24:	stlxr	w1, wzr, [x19]
     b28:	cbnz	w1, b20 <acc_shutdown+0x2c0>
     b2c:	tbnz	w0, #31, b80 <acc_shutdown+0x320>
     b30:	add	x22, x22, #0x130
     b34:	cmp	x20, x22
     b38:	b.eq	b8c <acc_shutdown+0x32c>  // b.none
     b3c:	mov	x19, x22
     b40:	ldaxr	w1, [x22]
     b44:	cbnz	w1, b50 <acc_shutdown+0x2f0>
     b48:	stxr	w0, w23, [x22]
     b4c:	cbnz	w0, b40 <acc_shutdown+0x2e0>
     b50:	cmp	w1, #0x0
     b54:	b.ne	b14 <acc_shutdown+0x2b4>  // b.any
     b58:	ldr	w0, [x19, #4]
     b5c:	cmp	w0, #0x1
     b60:	b.ne	b20 <acc_shutdown+0x2c0>  // b.any
     b64:	ldur	x1, [x19, #-104]
     b68:	ldur	w0, [x19, #-156]
     b6c:	blr	x1
     b70:	and	w21, w21, w0
     b74:	str	wzr, [x19, #4]
     b78:	mov	w24, w23
     b7c:	b	b20 <acc_shutdown+0x2c0>
     b80:	mov	x0, x19
     b84:	bl	0 <gomp_mutex_unlock_slow>
     b88:	b	b30 <acc_shutdown+0x2d0>
     b8c:	cbz	w21, bc8 <acc_shutdown+0x368>
     b90:	cbz	w24, bd4 <acc_shutdown+0x374>
     b94:	adrp	x0, 0 <gomp_mutex_unlock>
     b98:	add	x0, x0, #0x0
     b9c:	add	x0, x0, #0x30
     ba0:	ldxr	w1, [x0]
     ba4:	stlxr	w2, wzr, [x0]
     ba8:	cbnz	w2, ba0 <acc_shutdown+0x340>
     bac:	tbnz	w1, #31, be0 <acc_shutdown+0x380>
     bb0:	ldp	x19, x20, [sp, #16]
     bb4:	ldp	x21, x22, [sp, #32]
     bb8:	ldp	x23, x24, [sp, #48]
     bbc:	ldr	x25, [sp, #64]
     bc0:	ldp	x29, x30, [sp], #80
     bc4:	ret
     bc8:	adrp	x0, 0 <gomp_mutex_unlock>
     bcc:	add	x0, x0, #0x0
     bd0:	bl	0 <gomp_fatal>
     bd4:	adrp	x0, 0 <gomp_mutex_unlock>
     bd8:	add	x0, x0, #0x0
     bdc:	bl	0 <gomp_fatal>
     be0:	adrp	x0, 0 <gomp_mutex_unlock>
     be4:	add	x0, x0, #0x0
     be8:	add	x0, x0, #0x30
     bec:	bl	0 <gomp_mutex_unlock_slow>
     bf0:	b	bb0 <acc_shutdown+0x350>
     bf4:	nop

0000000000000bf8 <acc_get_num_devices>:
     bf8:	stp	x29, x30, [sp, #-32]!
     bfc:	mov	x29, sp
     c00:	str	x19, [sp, #16]
     c04:	mov	w19, w0
     c08:	cbnz	w0, c1c <acc_get_num_devices+0x24>
     c0c:	mov	w0, w19
     c10:	ldr	x19, [sp, #16]
     c14:	ldp	x29, x30, [sp], #32
     c18:	ret
     c1c:	bl	0 <gomp_init_targets_once>
     c20:	adrp	x0, 0 <gomp_mutex_unlock>
     c24:	add	x0, x0, #0x0
     c28:	add	x0, x0, #0x30
     c2c:	mov	w2, #0x1                   	// #1
     c30:	ldaxr	w1, [x0]
     c34:	cbnz	w1, c40 <acc_get_num_devices+0x48>
     c38:	stxr	w3, w2, [x0]
     c3c:	cbnz	w3, c30 <acc_get_num_devices+0x38>
     c40:	cmp	w1, #0x0
     c44:	b.ne	c8c <acc_get_num_devices+0x94>  // b.any
     c48:	mov	w1, #0x0                   	// #0
     c4c:	mov	w0, w19
     c50:	bl	d8 <resolve_device>
     c54:	mov	x19, x0
     c58:	adrp	x1, 0 <gomp_mutex_unlock>
     c5c:	add	x1, x1, #0x0
     c60:	add	x1, x1, #0x30
     c64:	ldxr	w0, [x1]
     c68:	stlxr	w2, wzr, [x1]
     c6c:	cbnz	w2, c64 <acc_get_num_devices+0x6c>
     c70:	tbnz	w0, #31, ca0 <acc_get_num_devices+0xa8>
     c74:	cbz	x19, cac <acc_get_num_devices+0xb4>
     c78:	ldr	x0, [x19, #48]
     c7c:	blr	x0
     c80:	cmp	w0, #0x0
     c84:	csel	w19, w0, wzr, ge  // ge = tcont
     c88:	b	c0c <acc_get_num_devices+0x14>
     c8c:	adrp	x0, 0 <gomp_mutex_unlock>
     c90:	add	x0, x0, #0x0
     c94:	add	x0, x0, #0x30
     c98:	bl	0 <gomp_mutex_lock_slow>
     c9c:	b	c48 <acc_get_num_devices+0x50>
     ca0:	mov	x0, x1
     ca4:	bl	0 <gomp_mutex_unlock_slow>
     ca8:	b	c74 <acc_get_num_devices+0x7c>
     cac:	mov	w19, #0x0                   	// #0
     cb0:	b	c0c <acc_get_num_devices+0x14>
     cb4:	nop

0000000000000cb8 <acc_set_device_type>:
     cb8:	stp	x29, x30, [sp, #-48]!
     cbc:	mov	x29, sp
     cc0:	stp	x19, x20, [sp, #16]
     cc4:	stp	x21, x22, [sp, #32]
     cc8:	mov	w19, w0
     ccc:	mrs	x0, tpidr_el0
     cd0:	add	x0, x0, #0x0, lsl #12
     cd4:	add	x0, x0, #0x0
     cd8:	ldr	x20, [x0]
     cdc:	bl	0 <gomp_init_targets_once>
     ce0:	adrp	x2, 0 <gomp_mutex_unlock>
     ce4:	add	x2, x2, #0x0
     ce8:	add	x2, x2, #0x30
     cec:	mov	w0, #0x1                   	// #1
     cf0:	ldaxr	w1, [x2]
     cf4:	cbnz	w1, d00 <acc_set_device_type+0x48>
     cf8:	stxr	w3, w0, [x2]
     cfc:	cbnz	w3, cf0 <acc_set_device_type+0x38>
     d00:	cmp	w1, #0x0
     d04:	b.ne	dc4 <acc_set_device_type+0x10c>  // b.any
     d08:	mov	w1, #0x1                   	// #1
     d0c:	mov	w0, w19
     d10:	bl	d8 <resolve_device>
     d14:	mov	x21, x0
     d18:	adrp	x0, 0 <gomp_mutex_unlock>
     d1c:	str	x21, [x0]
     d20:	adrp	x0, 0 <goacc_device_num>
     d24:	ldrsw	x0, [x0]
     d28:	add	x19, x0, x0, lsl #2
     d2c:	lsl	x19, x19, #2
     d30:	sub	x19, x19, x0
     d34:	add	x19, x21, x19, lsl #4
     d38:	add	x22, x19, #0xa8
     d3c:	mov	w0, #0x1                   	// #1
     d40:	ldaxr	w1, [x22]
     d44:	cbnz	w1, d50 <acc_set_device_type+0x98>
     d48:	stxr	w2, w0, [x22]
     d4c:	cbnz	w2, d40 <acc_set_device_type+0x88>
     d50:	cmp	w1, #0x0
     d54:	b.ne	dd0 <acc_set_device_type+0x118>  // b.any
     d58:	ldr	w0, [x19, #172]
     d5c:	cbz	w0, ddc <acc_set_device_type+0x124>
     d60:	ldxr	w0, [x22]
     d64:	stlxr	w1, wzr, [x22]
     d68:	cbnz	w1, d60 <acc_set_device_type+0xa8>
     d6c:	tbnz	w0, #31, de8 <acc_set_device_type+0x130>
     d70:	adrp	x1, 0 <gomp_mutex_unlock>
     d74:	add	x1, x1, #0x0
     d78:	add	x1, x1, #0x30
     d7c:	ldxr	w0, [x1]
     d80:	stlxr	w2, wzr, [x1]
     d84:	cbnz	w2, d7c <acc_set_device_type+0xc4>
     d88:	tbnz	w0, #31, df4 <acc_set_device_type+0x13c>
     d8c:	cbz	x20, dac <acc_set_device_type+0xf4>
     d90:	ldr	x0, [x20]
     d94:	cmp	x0, x21
     d98:	b.eq	dac <acc_set_device_type+0xf4>  // b.none
     d9c:	str	xzr, [x20, #8]
     da0:	str	xzr, [x20]
     da4:	ldr	x0, [x20, #24]
     da8:	cbnz	x0, e00 <acc_set_device_type+0x148>
     dac:	mov	w0, #0xffffffff            	// #-1
     db0:	bl	540 <goacc_attach_host_thread_to_device>
     db4:	ldp	x19, x20, [sp, #16]
     db8:	ldp	x21, x22, [sp, #32]
     dbc:	ldp	x29, x30, [sp], #48
     dc0:	ret
     dc4:	mov	x0, x2
     dc8:	bl	0 <gomp_mutex_lock_slow>
     dcc:	b	d08 <acc_set_device_type+0x50>
     dd0:	mov	x0, x22
     dd4:	bl	0 <gomp_mutex_lock_slow>
     dd8:	b	d58 <acc_set_device_type+0xa0>
     ddc:	mov	x0, x19
     de0:	bl	0 <gomp_init_device>
     de4:	b	d60 <acc_set_device_type+0xa8>
     de8:	mov	x0, x22
     dec:	bl	0 <gomp_mutex_unlock_slow>
     df0:	b	d70 <acc_set_device_type+0xb8>
     df4:	mov	x0, x1
     df8:	bl	0 <gomp_mutex_unlock_slow>
     dfc:	b	d8c <acc_set_device_type+0xd4>
     e00:	adrp	x0, 0 <gomp_mutex_unlock>
     e04:	add	x0, x0, #0x0
     e08:	bl	0 <gomp_fatal>
     e0c:	nop

0000000000000e10 <acc_get_device_type>:
     e10:	stp	x29, x30, [sp, #-32]!
     e14:	mov	x29, sp
     e18:	mrs	x0, tpidr_el0
     e1c:	add	x0, x0, #0x0, lsl #12
     e20:	add	x0, x0, #0x0
     e24:	ldr	x0, [x0]
     e28:	cbz	x0, e4c <acc_get_device_type+0x3c>
     e2c:	ldr	x0, [x0]
     e30:	cbz	x0, e4c <acc_get_device_type+0x3c>
     e34:	ldr	w0, [x0, #16]
     e38:	cmp	w0, #0x1
     e3c:	ccmp	w0, #0x4, #0x4, ne  // ne = any
     e40:	b.eq	ed4 <acc_get_device_type+0xc4>  // b.none
     e44:	ldp	x29, x30, [sp], #32
     e48:	ret
     e4c:	str	x19, [sp, #16]
     e50:	bl	0 <gomp_init_targets_once>
     e54:	adrp	x0, 0 <gomp_mutex_unlock>
     e58:	add	x0, x0, #0x0
     e5c:	add	x0, x0, #0x30
     e60:	mov	w2, #0x1                   	// #1
     e64:	ldaxr	w1, [x0]
     e68:	cbnz	w1, e74 <acc_get_device_type+0x64>
     e6c:	stxr	w3, w2, [x0]
     e70:	cbnz	w3, e64 <acc_get_device_type+0x54>
     e74:	cmp	w1, #0x0
     e78:	b.ne	eb4 <acc_get_device_type+0xa4>  // b.any
     e7c:	mov	w1, #0x1                   	// #1
     e80:	mov	w0, #0x1                   	// #1
     e84:	bl	d8 <resolve_device>
     e88:	mov	x19, x0
     e8c:	adrp	x1, 0 <gomp_mutex_unlock>
     e90:	add	x1, x1, #0x0
     e94:	add	x1, x1, #0x30
     e98:	ldxr	w0, [x1]
     e9c:	stlxr	w2, wzr, [x1]
     ea0:	cbnz	w2, e98 <acc_get_device_type+0x88>
     ea4:	tbnz	w0, #31, ec8 <acc_get_device_type+0xb8>
     ea8:	ldr	w0, [x19, #16]
     eac:	ldr	x19, [sp, #16]
     eb0:	b	e38 <acc_get_device_type+0x28>
     eb4:	adrp	x0, 0 <gomp_mutex_unlock>
     eb8:	add	x0, x0, #0x0
     ebc:	add	x0, x0, #0x30
     ec0:	bl	0 <gomp_mutex_lock_slow>
     ec4:	b	e7c <acc_get_device_type+0x6c>
     ec8:	mov	x0, x1
     ecc:	bl	0 <gomp_mutex_unlock_slow>
     ed0:	b	ea8 <acc_get_device_type+0x98>
     ed4:	str	x19, [sp, #16]
     ed8:	adrp	x3, 0 <gomp_mutex_unlock>
     edc:	add	x3, x3, #0x0
     ee0:	add	x3, x3, #0x60
     ee4:	mov	w2, #0x226                 	// #550
     ee8:	adrp	x1, 0 <gomp_mutex_unlock>
     eec:	add	x1, x1, #0x0
     ef0:	adrp	x0, 0 <gomp_mutex_unlock>
     ef4:	add	x0, x0, #0x0
     ef8:	bl	0 <__assert_fail>
     efc:	nop

0000000000000f00 <acc_get_device_num>:
     f00:	stp	x29, x30, [sp, #-32]!
     f04:	mov	x29, sp
     f08:	stp	x19, x20, [sp, #16]
     f0c:	mov	w19, w0
     f10:	mrs	x0, tpidr_el0
     f14:	add	x0, x0, #0x0, lsl #12
     f18:	add	x0, x0, #0x0
     f1c:	ldr	x20, [x0]
     f20:	cmp	w19, #0x5
     f24:	b.gt	fa4 <acc_get_device_num+0xa4>
     f28:	bl	0 <gomp_init_targets_once>
     f2c:	adrp	x2, 0 <gomp_mutex_unlock>
     f30:	add	x2, x2, #0x0
     f34:	add	x2, x2, #0x30
     f38:	mov	w0, #0x1                   	// #1
     f3c:	ldaxr	w1, [x2]
     f40:	cbnz	w1, f4c <acc_get_device_num+0x4c>
     f44:	stxr	w3, w0, [x2]
     f48:	cbnz	w3, f3c <acc_get_device_num+0x3c>
     f4c:	cmp	w1, #0x0
     f50:	b.ne	fb4 <acc_get_device_num+0xb4>  // b.any
     f54:	mov	w1, #0x1                   	// #1
     f58:	mov	w0, w19
     f5c:	bl	d8 <resolve_device>
     f60:	mov	x19, x0
     f64:	adrp	x1, 0 <gomp_mutex_unlock>
     f68:	add	x1, x1, #0x0
     f6c:	add	x1, x1, #0x30
     f70:	ldxr	w0, [x1]
     f74:	stlxr	w2, wzr, [x1]
     f78:	cbnz	w2, f70 <acc_get_device_num+0x70>
     f7c:	tbnz	w0, #31, fc0 <acc_get_device_num+0xc0>
     f80:	cbz	x20, f90 <acc_get_device_num+0x90>
     f84:	ldr	x0, [x20]
     f88:	cmp	x0, x19
     f8c:	b.eq	fcc <acc_get_device_num+0xcc>  // b.none
     f90:	adrp	x0, 0 <goacc_device_num>
     f94:	ldr	w0, [x0]
     f98:	ldp	x19, x20, [sp, #16]
     f9c:	ldp	x29, x30, [sp], #32
     fa0:	ret
     fa4:	mov	w1, w19
     fa8:	adrp	x0, 0 <gomp_mutex_unlock>
     fac:	add	x0, x0, #0x0
     fb0:	bl	0 <gomp_fatal>
     fb4:	mov	x0, x2
     fb8:	bl	0 <gomp_mutex_lock_slow>
     fbc:	b	f54 <acc_get_device_num+0x54>
     fc0:	mov	x0, x1
     fc4:	bl	0 <gomp_mutex_unlock_slow>
     fc8:	b	f80 <acc_get_device_num+0x80>
     fcc:	ldr	x0, [x20, #8]
     fd0:	cbz	x0, f90 <acc_get_device_num+0x90>
     fd4:	ldr	w0, [x0, #12]
     fd8:	b	f98 <acc_get_device_num+0x98>
     fdc:	nop

0000000000000fe0 <acc_set_device_num>:
     fe0:	stp	x29, x30, [sp, #-48]!
     fe4:	mov	x29, sp
     fe8:	stp	x19, x20, [sp, #16]
     fec:	stp	x21, x22, [sp, #32]
     ff0:	mov	w19, w0
     ff4:	mov	w21, w1
     ff8:	bl	0 <gomp_init_targets_once>
     ffc:	adrp	x0, 0 <goacc_device_num>
    1000:	ldr	w0, [x0]
    1004:	cmp	w19, #0x0
    1008:	csel	w19, w0, w19, lt  // lt = tstop
    100c:	cbz	w21, 10f0 <acc_set_device_num+0x110>
    1010:	adrp	x0, 0 <gomp_mutex_unlock>
    1014:	add	x0, x0, #0x0
    1018:	add	x0, x0, #0x30
    101c:	mov	w2, #0x1                   	// #1
    1020:	ldaxr	w1, [x0]
    1024:	cbnz	w1, 1030 <acc_set_device_num+0x50>
    1028:	stxr	w3, w2, [x0]
    102c:	cbnz	w3, 1020 <acc_set_device_num+0x40>
    1030:	cmp	w1, #0x0
    1034:	b.ne	10fc <acc_set_device_num+0x11c>  // b.any
    1038:	mov	w1, #0x1                   	// #1
    103c:	mov	w0, w21
    1040:	bl	d8 <resolve_device>
    1044:	mov	x22, x0
    1048:	adrp	x0, 0 <gomp_mutex_unlock>
    104c:	str	x22, [x0]
    1050:	ldr	x0, [x22, #48]
    1054:	blr	x0
    1058:	cmp	w19, #0x0
    105c:	csel	w1, w19, wzr, ge  // ge = tcont
    1060:	cmp	w0, w1
    1064:	b.le	1110 <acc_set_device_num+0x130>
    1068:	sxtw	x0, w19
    106c:	add	x20, x0, w19, sxtw #2
    1070:	lsl	x20, x20, #2
    1074:	sub	x20, x20, x0
    1078:	add	x20, x22, x20, lsl #4
    107c:	add	x21, x20, #0xa8
    1080:	mov	w0, #0x1                   	// #1
    1084:	ldaxr	w1, [x21]
    1088:	cbnz	w1, 1094 <acc_set_device_num+0xb4>
    108c:	stxr	w2, w0, [x21]
    1090:	cbnz	w2, 1084 <acc_set_device_num+0xa4>
    1094:	cmp	w1, #0x0
    1098:	b.ne	1120 <acc_set_device_num+0x140>  // b.any
    109c:	ldr	w0, [x20, #172]
    10a0:	cbz	w0, 112c <acc_set_device_num+0x14c>
    10a4:	ldxr	w0, [x21]
    10a8:	stlxr	w1, wzr, [x21]
    10ac:	cbnz	w1, 10a4 <acc_set_device_num+0xc4>
    10b0:	tbnz	w0, #31, 1138 <acc_set_device_num+0x158>
    10b4:	adrp	x0, 0 <gomp_mutex_unlock>
    10b8:	add	x0, x0, #0x0
    10bc:	add	x0, x0, #0x30
    10c0:	ldxr	w1, [x0]
    10c4:	stlxr	w2, wzr, [x0]
    10c8:	cbnz	w2, 10c0 <acc_set_device_num+0xe0>
    10cc:	tbnz	w1, #31, 1144 <acc_set_device_num+0x164>
    10d0:	mov	w0, w19
    10d4:	bl	540 <goacc_attach_host_thread_to_device>
    10d8:	adrp	x0, 0 <goacc_device_num>
    10dc:	str	w19, [x0]
    10e0:	ldp	x19, x20, [sp, #16]
    10e4:	ldp	x21, x22, [sp, #32]
    10e8:	ldp	x29, x30, [sp], #48
    10ec:	ret
    10f0:	mov	w0, w19
    10f4:	bl	540 <goacc_attach_host_thread_to_device>
    10f8:	b	10d8 <acc_set_device_num+0xf8>
    10fc:	adrp	x0, 0 <gomp_mutex_unlock>
    1100:	add	x0, x0, #0x0
    1104:	add	x0, x0, #0x30
    1108:	bl	0 <gomp_mutex_lock_slow>
    110c:	b	1038 <acc_set_device_num+0x58>
    1110:	mov	w2, w0
    1114:	mov	w1, w19
    1118:	mov	w0, w21
    111c:	bl	a8 <acc_dev_num_out_of_range>
    1120:	mov	x0, x21
    1124:	bl	0 <gomp_mutex_lock_slow>
    1128:	b	109c <acc_set_device_num+0xbc>
    112c:	mov	x0, x20
    1130:	bl	0 <gomp_init_device>
    1134:	b	10a4 <acc_set_device_num+0xc4>
    1138:	mov	x0, x21
    113c:	bl	0 <gomp_mutex_unlock_slow>
    1140:	b	10b4 <acc_set_device_num+0xd4>
    1144:	adrp	x0, 0 <gomp_mutex_unlock>
    1148:	add	x0, x0, #0x0
    114c:	add	x0, x0, #0x30
    1150:	bl	0 <gomp_mutex_unlock_slow>
    1154:	b	10d0 <acc_set_device_num+0xf0>

0000000000001158 <acc_on_device>:
    1158:	tst	w0, #0xfffffffd
    115c:	cset	w0, eq  // eq = none
    1160:	ret
    1164:	nop

0000000000001168 <goacc_runtime_initialize>:
    1168:	stp	x29, x30, [sp, #-32]!
    116c:	mov	x29, sp
    1170:	str	x19, [sp, #16]
    1174:	adrp	x19, 0 <gomp_mutex_unlock>
    1178:	add	x19, x19, #0x0
    117c:	str	wzr, [x19, #48]
    1180:	adrp	x1, 0 <gomp_mutex_unlock>
    1184:	add	x1, x1, #0x0
    1188:	add	x0, x19, #0x48
    118c:	bl	0 <pthread_key_create>
    1190:	str	xzr, [x19, #64]
    1194:	str	xzr, [x19, #56]
    1198:	str	wzr, [x19, #52]
    119c:	bl	0 <goacc_host_init>
    11a0:	ldr	x19, [sp, #16]
    11a4:	ldp	x29, x30, [sp], #32
    11a8:	ret
    11ac:	nop

00000000000011b0 <goacc_save_and_set_bind>:
    11b0:	mrs	x1, tpidr_el0
    11b4:	add	x1, x1, #0x0, lsl #12
    11b8:	add	x1, x1, #0x0
    11bc:	ldr	x1, [x1]
    11c0:	ldr	x2, [x1, #16]
    11c4:	cbnz	x2, 11e4 <goacc_save_and_set_bind+0x34>
    11c8:	ldr	x2, [x1, #8]
    11cc:	str	x2, [x1, #16]
    11d0:	adrp	x2, 0 <gomp_mutex_unlock>
    11d4:	add	x2, x2, #0x0
    11d8:	ldr	x0, [x2, w0, sxtw #3]
    11dc:	str	x0, [x1, #8]
    11e0:	ret
    11e4:	stp	x29, x30, [sp, #-16]!
    11e8:	mov	x29, sp
    11ec:	adrp	x3, 0 <gomp_mutex_unlock>
    11f0:	add	x3, x3, #0x0
    11f4:	add	x3, x3, #0x78
    11f8:	mov	w2, #0x29b                 	// #667
    11fc:	adrp	x1, 0 <gomp_mutex_unlock>
    1200:	add	x1, x1, #0x0
    1204:	adrp	x0, 0 <gomp_mutex_unlock>
    1208:	add	x0, x0, #0x0
    120c:	bl	0 <__assert_fail>

0000000000001210 <goacc_restore_bind>:
    1210:	mrs	x0, tpidr_el0
    1214:	add	x0, x0, #0x0, lsl #12
    1218:	add	x0, x0, #0x0
    121c:	ldr	x0, [x0]
    1220:	ldr	x1, [x0, #16]
    1224:	str	x1, [x0, #8]
    1228:	str	xzr, [x0, #16]
    122c:	ret

0000000000001230 <goacc_lazy_initialize>:
    1230:	mrs	x0, tpidr_el0
    1234:	add	x0, x0, #0x0, lsl #12
    1238:	add	x0, x0, #0x0
    123c:	ldr	x0, [x0]
    1240:	cbz	x0, 1250 <goacc_lazy_initialize+0x20>
    1244:	ldr	x0, [x0, #8]
    1248:	cbz	x0, 1250 <goacc_lazy_initialize+0x20>
    124c:	ret
    1250:	stp	x29, x30, [sp, #-16]!
    1254:	mov	x29, sp
    1258:	adrp	x0, 0 <gomp_mutex_unlock>
    125c:	ldr	x0, [x0]
    1260:	cbz	x0, 1274 <goacc_lazy_initialize+0x44>
    1264:	mov	w0, #0xffffffff            	// #-1
    1268:	bl	540 <goacc_attach_host_thread_to_device>
    126c:	ldp	x29, x30, [sp], #16
    1270:	ret
    1274:	mov	w0, #0x1                   	// #1
    1278:	bl	700 <acc_init>
    127c:	b	126c <goacc_lazy_initialize+0x3c>

oacc-mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lookup_dev>:
       0:	cbz	x0, 74 <lookup_dev+0x74>
       4:	add	x3, x1, x2
       8:	b	14 <lookup_dev+0x14>
       c:	ldr	x0, [x0, #40]
      10:	cbz	x0, 74 <lookup_dev+0x74>
      14:	ldr	x4, [x0, #16]
      18:	cmp	x4, x1
      1c:	b.hi	c <lookup_dev+0xc>  // b.pmore
      20:	ldr	x2, [x0, #24]
      24:	cmp	x2, x3
      28:	b.cc	c <lookup_dev+0xc>  // b.lo, b.ul, b.last
      2c:	ldr	x7, [x0, #48]
      30:	cbz	x7, 78 <lookup_dev+0x78>
      34:	ldr	x3, [x0, #8]
      38:	mov	x5, #0x0                   	// #0
      3c:	mov	x0, x3
      40:	ldr	x2, [x3, #24]
      44:	ldr	x6, [x3]
      48:	add	x2, x2, x6
      4c:	sub	x2, x2, x4
      50:	add	x2, x1, x2
      54:	ldr	x6, [x3, #8]
      58:	cmp	x2, x6
      5c:	b.ls	74 <lookup_dev+0x74>  // b.plast
      60:	add	x5, x5, #0x1
      64:	add	x3, x3, #0x48
      68:	cmp	x7, x5
      6c:	b.ne	3c <lookup_dev+0x3c>  // b.any
      70:	mov	x0, #0x0                   	// #0
      74:	ret
      78:	mov	x0, #0x0                   	// #0
      7c:	b	74 <lookup_dev+0x74>

0000000000000080 <gomp_mutex_unlock>:
      80:	ldxr	w1, [x0]
      84:	stlxr	w2, wzr, [x0]
      88:	cbnz	w2, 80 <gomp_mutex_unlock>
      8c:	tbnz	w1, #31, 94 <gomp_mutex_unlock+0x14>
      90:	ret
      94:	stp	x29, x30, [sp, #-16]!
      98:	mov	x29, sp
      9c:	bl	0 <gomp_mutex_unlock_slow>
      a0:	ldp	x29, x30, [sp], #16
      a4:	ret

00000000000000a8 <memcpy_tofrom_device>:
      a8:	stp	x29, x30, [sp, #-80]!
      ac:	mov	x29, sp
      b0:	stp	x19, x20, [sp, #16]
      b4:	stp	x21, x22, [sp, #32]
      b8:	stp	x23, x24, [sp, #48]
      bc:	str	x25, [sp, #64]
      c0:	and	w25, w0, #0xff
      c4:	mov	x21, x1
      c8:	adrp	x0, 0 <goacc_tls_data>
      cc:	ldr	x0, [x0]
      d0:	mrs	x1, tpidr_el0
      d4:	ldr	x20, [x1, x0]
      d8:	cbz	x20, 168 <memcpy_tofrom_device+0xc0>
      dc:	mov	x22, x2
      e0:	mov	x23, x3
      e4:	mov	w19, w4
      e8:	mov	x24, x5
      ec:	ldr	x0, [x20, #8]
      f0:	cbz	x0, 168 <memcpy_tofrom_device+0xc0>
      f4:	ldr	w1, [x0, #8]
      f8:	tbnz	w1, #0, 188 <memcpy_tofrom_device+0xe0>
      fc:	cmn	w4, #0x1
     100:	b.lt	110 <memcpy_tofrom_device+0x68>  // b.tstop
     104:	ldr	x1, [x0, #248]
     108:	mov	w0, w4
     10c:	blr	x1
     110:	cbz	w25, 1b4 <memcpy_tofrom_device+0x10c>
     114:	ldr	x0, [x20, #8]
     118:	ldr	x4, [x0, #112]
     11c:	mov	x3, x23
     120:	mov	x2, x21
     124:	mov	x1, x22
     128:	ldr	w0, [x0, #12]
     12c:	blr	x4
     130:	and	w21, w0, #0xff
     134:	cmn	w19, #0x1
     138:	b.lt	14c <memcpy_tofrom_device+0xa4>  // b.tstop
     13c:	ldr	x0, [x20, #8]
     140:	ldr	x1, [x0, #248]
     144:	mov	w0, #0xfffffffe            	// #-2
     148:	blr	x1
     14c:	cbz	w21, 1d8 <memcpy_tofrom_device+0x130>
     150:	ldp	x19, x20, [sp, #16]
     154:	ldp	x21, x22, [sp, #32]
     158:	ldp	x23, x24, [sp, #48]
     15c:	ldr	x25, [sp, #64]
     160:	ldp	x29, x30, [sp], #80
     164:	ret
     168:	adrp	x3, 0 <lookup_dev>
     16c:	add	x3, x3, #0x0
     170:	mov	w2, #0xa4                  	// #164
     174:	adrp	x1, 0 <lookup_dev>
     178:	add	x1, x1, #0x0
     17c:	adrp	x0, 0 <lookup_dev>
     180:	add	x0, x0, #0x0
     184:	bl	0 <__assert_fail>
     188:	cbz	w25, 1a0 <memcpy_tofrom_device+0xf8>
     18c:	mov	x2, x3
     190:	mov	x1, x21
     194:	mov	x0, x22
     198:	bl	0 <memmove>
     19c:	b	150 <memcpy_tofrom_device+0xa8>
     1a0:	mov	x2, x3
     1a4:	mov	x1, x22
     1a8:	mov	x0, x21
     1ac:	bl	0 <memmove>
     1b0:	b	150 <memcpy_tofrom_device+0xa8>
     1b4:	ldr	x0, [x20, #8]
     1b8:	ldr	x4, [x0, #120]
     1bc:	mov	x3, x23
     1c0:	mov	x2, x22
     1c4:	mov	x1, x21
     1c8:	ldr	w0, [x0, #12]
     1cc:	blr	x4
     1d0:	and	w21, w0, #0xff
     1d4:	b	134 <memcpy_tofrom_device+0x8c>
     1d8:	mov	x1, x24
     1dc:	adrp	x0, 0 <lookup_dev>
     1e0:	add	x0, x0, #0x0
     1e4:	bl	0 <gomp_fatal>

00000000000001e8 <lookup_host>:
     1e8:	stp	x29, x30, [sp, #-80]!
     1ec:	mov	x29, sp
     1f0:	str	x1, [sp, #24]
     1f4:	add	x1, x1, x2
     1f8:	str	x1, [sp, #32]
     1fc:	add	x1, sp, #0x18
     200:	add	x0, x0, #0xa0
     204:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     208:	ldp	x29, x30, [sp], #80
     20c:	ret

0000000000000210 <update_dev_host>:
     210:	stp	x29, x30, [sp, #-80]!
     214:	mov	x29, sp
     218:	stp	x19, x20, [sp, #16]
     21c:	stp	x21, x22, [sp, #32]
     220:	stp	x23, x24, [sp, #48]
     224:	mov	w23, w0
     228:	mov	x20, x1
     22c:	mov	x22, x2
     230:	mov	w21, w3
     234:	bl	0 <goacc_lazy_initialize>
     238:	adrp	x1, 0 <goacc_tls_data>
     23c:	ldr	x1, [x1]
     240:	mrs	x0, tpidr_el0
     244:	ldr	x0, [x0, x1]
     248:	ldr	x19, [x0, #8]
     24c:	ldr	w0, [x19, #8]
     250:	tbnz	w0, #0, 300 <update_dev_host+0xf0>
     254:	str	x25, [sp, #64]
     258:	add	x24, x19, #0xa8
     25c:	mov	w0, #0x1                   	// #1
     260:	ldaxr	w1, [x24]
     264:	cbnz	w1, 270 <update_dev_host+0x60>
     268:	stxr	w2, w0, [x24]
     26c:	cbnz	w2, 260 <update_dev_host+0x50>
     270:	cmp	w1, #0x0
     274:	b.ne	314 <update_dev_host+0x104>  // b.any
     278:	mov	x2, x22
     27c:	mov	x1, x20
     280:	mov	x0, x19
     284:	bl	1e8 <lookup_host>
     288:	cbz	x0, 320 <update_dev_host+0x110>
     28c:	ldr	x1, [x0, #16]
     290:	ldr	x1, [x1, #16]
     294:	ldr	x2, [x0]
     298:	sub	x1, x1, x2
     29c:	ldr	x25, [x0, #24]
     2a0:	add	x25, x20, x25
     2a4:	add	x25, x1, x25
     2a8:	cmn	w21, #0x1
     2ac:	b.lt	2bc <update_dev_host+0xac>  // b.tstop
     2b0:	ldr	x1, [x19, #248]
     2b4:	mov	w0, w21
     2b8:	blr	x1
     2bc:	cbz	w23, 33c <update_dev_host+0x12c>
     2c0:	ldr	x4, [x19, #120]
     2c4:	mov	x3, x22
     2c8:	mov	x2, x20
     2cc:	mov	x1, x25
     2d0:	ldr	w0, [x19, #12]
     2d4:	blr	x4
     2d8:	cmn	w21, #0x1
     2dc:	b.lt	2ec <update_dev_host+0xdc>  // b.tstop
     2e0:	ldr	x1, [x19, #248]
     2e4:	mov	w0, #0xfffffffe            	// #-2
     2e8:	blr	x1
     2ec:	ldxr	w0, [x24]
     2f0:	stlxr	w1, wzr, [x24]
     2f4:	cbnz	w1, 2ec <update_dev_host+0xdc>
     2f8:	tbnz	w0, #31, 358 <update_dev_host+0x148>
     2fc:	ldr	x25, [sp, #64]
     300:	ldp	x19, x20, [sp, #16]
     304:	ldp	x21, x22, [sp, #32]
     308:	ldp	x23, x24, [sp, #48]
     30c:	ldp	x29, x30, [sp], #80
     310:	ret
     314:	mov	x0, x24
     318:	bl	0 <gomp_mutex_lock_slow>
     31c:	b	278 <update_dev_host+0x68>
     320:	mov	x0, x24
     324:	bl	80 <gomp_mutex_unlock>
     328:	mov	w2, w22
     32c:	mov	x1, x20
     330:	adrp	x0, 0 <lookup_dev>
     334:	add	x0, x0, #0x0
     338:	bl	0 <gomp_fatal>
     33c:	ldr	x4, [x19, #112]
     340:	mov	x3, x22
     344:	mov	x2, x25
     348:	mov	x1, x20
     34c:	ldr	w0, [x19, #12]
     350:	blr	x4
     354:	b	2d8 <update_dev_host+0xc8>
     358:	mov	x0, x24
     35c:	bl	0 <gomp_mutex_unlock_slow>
     360:	ldr	x25, [sp, #64]
     364:	b	300 <update_dev_host+0xf0>

0000000000000368 <delete_copyout>:
     368:	stp	x29, x30, [sp, #-80]!
     36c:	mov	x29, sp
     370:	stp	x19, x20, [sp, #16]
     374:	stp	x21, x22, [sp, #32]
     378:	stp	x23, x24, [sp, #48]
     37c:	mov	w23, w0
     380:	mov	x20, x1
     384:	adrp	x1, 0 <goacc_tls_data>
     388:	ldr	x1, [x1]
     38c:	mrs	x0, tpidr_el0
     390:	ldr	x0, [x0, x1]
     394:	ldr	x22, [x0, #8]
     398:	ldr	w0, [x22, #8]
     39c:	tbnz	w0, #0, 4ac <delete_copyout+0x144>
     3a0:	stp	x25, x26, [sp, #64]
     3a4:	mov	x21, x2
     3a8:	mov	w25, w3
     3ac:	add	x24, x22, #0xa8
     3b0:	mov	w0, #0x1                   	// #1
     3b4:	ldaxr	w1, [x24]
     3b8:	cbnz	w1, 3c4 <delete_copyout+0x5c>
     3bc:	stxr	w2, w0, [x24]
     3c0:	cbnz	w2, 3b4 <delete_copyout+0x4c>
     3c4:	cmp	w1, #0x0
     3c8:	b.ne	4c0 <delete_copyout+0x158>  // b.any
     3cc:	mov	x2, x21
     3d0:	mov	x1, x20
     3d4:	mov	x0, x22
     3d8:	bl	1e8 <lookup_host>
     3dc:	mov	x19, x0
     3e0:	cbz	x0, 4cc <delete_copyout+0x164>
     3e4:	ldr	x3, [x0, #16]
     3e8:	ldr	x5, [x3, #16]
     3ec:	ldr	x0, [x0, #24]
     3f0:	add	x2, x20, x0
     3f4:	ldr	x4, [x19]
     3f8:	ldr	x26, [x19, #8]
     3fc:	sub	x26, x26, x4
     400:	cmp	x21, x26
     404:	ccmp	x20, x4, #0x0, eq  // eq = none
     408:	b.ne	4e8 <delete_copyout+0x180>  // b.any
     40c:	ldr	x0, [x19, #32]
     410:	cmn	x0, #0x1
     414:	b.eq	50c <delete_copyout+0x1a4>  // b.none
     418:	ldr	x1, [x19, #40]
     41c:	cmp	x0, x1
     420:	b.cc	524 <delete_copyout+0x1bc>  // b.lo, b.ul, b.last
     424:	tbz	w23, #1, 538 <delete_copyout+0x1d0>
     428:	sub	x0, x0, x1
     42c:	str	x0, [x19, #32]
     430:	str	xzr, [x19, #40]
     434:	ldr	x0, [x19, #32]
     438:	cbnz	x0, 498 <delete_copyout+0x130>
     43c:	ldr	x0, [x3]
     440:	cmp	x0, #0x2
     444:	b.eq	550 <delete_copyout+0x1e8>  // b.none
     448:	tbz	w23, #0, 48c <delete_copyout+0x124>
     44c:	sub	x4, x5, x4
     450:	add	x23, x4, x2
     454:	cmn	w25, #0x1
     458:	b.lt	590 <delete_copyout+0x228>  // b.tstop
     45c:	ldr	x1, [x22, #248]
     460:	mov	w0, w25
     464:	blr	x1
     468:	ldr	x4, [x22, #112]
     46c:	mov	x3, x21
     470:	mov	x2, x23
     474:	mov	x1, x20
     478:	ldr	w0, [x22, #12]
     47c:	blr	x4
     480:	ldr	x1, [x22, #248]
     484:	mov	w0, #0xfffffffe            	// #-2
     488:	blr	x1
     48c:	mov	x1, x19
     490:	mov	x0, x22
     494:	bl	0 <gomp_remove_var>
     498:	ldxr	w0, [x24]
     49c:	stlxr	w1, wzr, [x24]
     4a0:	cbnz	w1, 498 <delete_copyout+0x130>
     4a4:	tbnz	w0, #31, 580 <delete_copyout+0x218>
     4a8:	ldp	x25, x26, [sp, #64]
     4ac:	ldp	x19, x20, [sp, #16]
     4b0:	ldp	x21, x22, [sp, #32]
     4b4:	ldp	x23, x24, [sp, #48]
     4b8:	ldp	x29, x30, [sp], #80
     4bc:	ret
     4c0:	mov	x0, x24
     4c4:	bl	0 <gomp_mutex_lock_slow>
     4c8:	b	3cc <delete_copyout+0x64>
     4cc:	mov	x0, x24
     4d0:	bl	80 <gomp_mutex_unlock>
     4d4:	mov	w2, w21
     4d8:	mov	x1, x20
     4dc:	adrp	x0, 0 <lookup_dev>
     4e0:	add	x0, x0, #0x0
     4e4:	bl	0 <gomp_fatal>
     4e8:	mov	x0, x24
     4ec:	bl	80 <gomp_mutex_unlock>
     4f0:	mov	w4, w21
     4f4:	mov	x3, x20
     4f8:	mov	w2, w26
     4fc:	ldr	x1, [x19]
     500:	adrp	x0, 0 <lookup_dev>
     504:	add	x0, x0, #0x0
     508:	bl	0 <gomp_fatal>
     50c:	str	xzr, [x19, #32]
     510:	str	xzr, [x19, #40]
     514:	tbz	w23, #1, 434 <delete_copyout+0xcc>
     518:	mov	x1, #0x0                   	// #0
     51c:	mov	x0, #0x0                   	// #0
     520:	b	428 <delete_copyout+0xc0>
     524:	mov	x0, x24
     528:	bl	80 <gomp_mutex_unlock>
     52c:	adrp	x0, 0 <lookup_dev>
     530:	add	x0, x0, #0x0
     534:	bl	0 <gomp_fatal>
     538:	cbz	x1, 434 <delete_copyout+0xcc>
     53c:	sub	x1, x1, #0x1
     540:	str	x1, [x19, #40]
     544:	sub	x0, x0, #0x1
     548:	str	x0, [x19, #32]
     54c:	b	434 <delete_copyout+0xcc>
     550:	ldr	x1, [x22, #176]
     554:	cbz	x1, 448 <delete_copyout+0xe0>
     558:	cmp	x3, x1
     55c:	b.eq	5ac <delete_copyout+0x244>  // b.none
     560:	mov	x0, x1
     564:	ldr	x1, [x1, #40]
     568:	cbz	x1, 448 <delete_copyout+0xe0>
     56c:	cmp	x3, x1
     570:	b.ne	560 <delete_copyout+0x1f8>  // b.any
     574:	ldr	x1, [x1, #40]
     578:	str	x1, [x0, #40]
     57c:	b	448 <delete_copyout+0xe0>
     580:	mov	x0, x24
     584:	bl	0 <gomp_mutex_unlock_slow>
     588:	ldp	x25, x26, [sp, #64]
     58c:	b	4ac <delete_copyout+0x144>
     590:	ldr	x4, [x22, #112]
     594:	mov	x3, x21
     598:	mov	x2, x23
     59c:	mov	x1, x20
     5a0:	ldr	w0, [x22, #12]
     5a4:	blr	x4
     5a8:	b	48c <delete_copyout+0x124>
     5ac:	ldr	x0, [x1, #40]
     5b0:	str	x0, [x22, #176]
     5b4:	b	448 <delete_copyout+0xe0>

00000000000005b8 <present_create_copy>:
     5b8:	stp	x29, x30, [sp, #-96]!
     5bc:	mov	x29, sp
     5c0:	stp	x19, x20, [sp, #16]
     5c4:	stp	x21, x22, [sp, #32]
     5c8:	str	x23, [sp, #48]
     5cc:	mov	x19, x1
     5d0:	str	x2, [sp, #72]
     5d4:	cmp	x1, #0x0
     5d8:	ccmp	x2, #0x0, #0x4, ne  // ne = any
     5dc:	b.eq	6ac <present_create_copy+0xf4>  // b.none
     5e0:	mov	w20, w0
     5e4:	mov	w23, w3
     5e8:	bl	0 <goacc_lazy_initialize>
     5ec:	adrp	x0, 0 <goacc_tls_data>
     5f0:	ldr	x0, [x0]
     5f4:	mrs	x1, tpidr_el0
     5f8:	ldr	x0, [x1, x0]
     5fc:	ldr	x22, [x0, #8]
     600:	ldr	w0, [x22, #8]
     604:	tbnz	w0, #0, 800 <present_create_copy+0x248>
     608:	add	x21, x22, #0xa8
     60c:	mov	w0, #0x1                   	// #1
     610:	ldaxr	w1, [x21]
     614:	cbnz	w1, 620 <present_create_copy+0x68>
     618:	stxr	w2, w0, [x21]
     61c:	cbnz	w2, 610 <present_create_copy+0x58>
     620:	cmp	w1, #0x0
     624:	b.ne	6b8 <present_create_copy+0x100>  // b.any
     628:	ldr	x2, [sp, #72]
     62c:	mov	x1, x19
     630:	mov	x0, x22
     634:	bl	1e8 <lookup_host>
     638:	cbz	x0, 710 <present_create_copy+0x158>
     63c:	ldr	x1, [x0, #16]
     640:	ldr	x23, [x1, #16]
     644:	ldr	x1, [x0, #24]
     648:	add	x23, x23, x1
     64c:	tbz	w20, #0, 6c4 <present_create_copy+0x10c>
     650:	ldr	x1, [sp, #72]
     654:	add	x1, x19, x1
     658:	ldr	x2, [x0, #8]
     65c:	cmp	x1, x2
     660:	b.hi	6e8 <present_create_copy+0x130>  // b.pmore
     664:	ldr	x1, [x0, #32]
     668:	cmn	x1, #0x1
     66c:	b.eq	684 <present_create_copy+0xcc>  // b.none
     670:	add	x1, x1, #0x1
     674:	str	x1, [x0, #32]
     678:	ldr	x1, [x0, #40]
     67c:	add	x1, x1, #0x1
     680:	str	x1, [x0, #40]
     684:	ldxr	w0, [x21]
     688:	stlxr	w1, wzr, [x21]
     68c:	cbnz	w1, 684 <present_create_copy+0xcc>
     690:	tbnz	w0, #31, 704 <present_create_copy+0x14c>
     694:	mov	x0, x23
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x21, x22, [sp, #32]
     6a0:	ldr	x23, [sp, #48]
     6a4:	ldp	x29, x30, [sp], #96
     6a8:	ret
     6ac:	adrp	x0, 0 <lookup_dev>
     6b0:	add	x0, x0, #0x0
     6b4:	bl	0 <gomp_fatal>
     6b8:	mov	x0, x21
     6bc:	bl	0 <gomp_mutex_lock_slow>
     6c0:	b	628 <present_create_copy+0x70>
     6c4:	mov	x0, x21
     6c8:	bl	80 <gomp_mutex_unlock>
     6cc:	ldr	w4, [sp, #72]
     6d0:	mov	x3, x23
     6d4:	ldr	w2, [sp, #72]
     6d8:	mov	x1, x19
     6dc:	adrp	x0, 0 <lookup_dev>
     6e0:	add	x0, x0, #0x0
     6e4:	bl	0 <gomp_fatal>
     6e8:	mov	x0, x21
     6ec:	bl	80 <gomp_mutex_unlock>
     6f0:	ldr	w2, [sp, #72]
     6f4:	mov	x1, x19
     6f8:	adrp	x0, 0 <lookup_dev>
     6fc:	add	x0, x0, #0x0
     700:	bl	0 <gomp_fatal>
     704:	mov	x0, x21
     708:	bl	0 <gomp_mutex_unlock_slow>
     70c:	b	694 <present_create_copy+0xdc>
     710:	tbz	w20, #1, 7cc <present_create_copy+0x214>
     714:	str	x19, [sp, #88]
     718:	ubfx	x20, x20, #2, #1
     71c:	strh	w20, [sp, #86]
     720:	ldxr	w0, [x21]
     724:	stlxr	w1, wzr, [x21]
     728:	cbnz	w1, 720 <present_create_copy+0x168>
     72c:	tbnz	w0, #31, 7e8 <present_create_copy+0x230>
     730:	cmn	w23, #0x1
     734:	b.lt	808 <present_create_copy+0x250>  // b.tstop
     738:	ldr	x1, [x22, #248]
     73c:	mov	w0, w23
     740:	blr	x1
     744:	mov	w7, #0x0                   	// #0
     748:	mov	w6, #0x1                   	// #1
     74c:	add	x5, sp, #0x56
     750:	add	x4, sp, #0x48
     754:	mov	x3, #0x0                   	// #0
     758:	add	x2, sp, #0x58
     75c:	mov	x1, #0x1                   	// #1
     760:	mov	x0, x22
     764:	bl	0 <gomp_map_vars>
     768:	mov	x19, x0
     76c:	ldr	x0, [x0, #64]
     770:	mov	x1, #0x1                   	// #1
     774:	str	x1, [x0, #40]
     778:	ldr	x1, [x22, #248]
     77c:	mov	w0, #0xfffffffe            	// #-2
     780:	blr	x1
     784:	mov	w0, #0x1                   	// #1
     788:	ldaxr	w1, [x21]
     78c:	cbnz	w1, 798 <present_create_copy+0x1e0>
     790:	stxr	w2, w0, [x21]
     794:	cbnz	w2, 788 <present_create_copy+0x1d0>
     798:	cmp	w1, #0x0
     79c:	b.ne	7f4 <present_create_copy+0x23c>  // b.any
     7a0:	ldr	x23, [x19, #32]
     7a4:	ldr	x0, [x22, #176]
     7a8:	str	x0, [x19, #40]
     7ac:	str	x19, [x22, #176]
     7b0:	ldxr	w0, [x21]
     7b4:	stlxr	w1, wzr, [x21]
     7b8:	cbnz	w1, 7b0 <present_create_copy+0x1f8>
     7bc:	tbz	w0, #31, 694 <present_create_copy+0xdc>
     7c0:	mov	x0, x21
     7c4:	bl	0 <gomp_mutex_unlock_slow>
     7c8:	b	694 <present_create_copy+0xdc>
     7cc:	mov	x0, x21
     7d0:	bl	80 <gomp_mutex_unlock>
     7d4:	ldr	w2, [sp, #72]
     7d8:	mov	x1, x19
     7dc:	adrp	x0, 0 <lookup_dev>
     7e0:	add	x0, x0, #0x0
     7e4:	bl	0 <gomp_fatal>
     7e8:	mov	x0, x21
     7ec:	bl	0 <gomp_mutex_unlock_slow>
     7f0:	b	730 <present_create_copy+0x178>
     7f4:	mov	x0, x21
     7f8:	bl	0 <gomp_mutex_lock_slow>
     7fc:	b	7a0 <present_create_copy+0x1e8>
     800:	mov	x23, x19
     804:	b	694 <present_create_copy+0xdc>
     808:	mov	w7, #0x0                   	// #0
     80c:	mov	w6, #0x1                   	// #1
     810:	add	x5, sp, #0x56
     814:	add	x4, sp, #0x48
     818:	mov	x3, #0x0                   	// #0
     81c:	add	x2, sp, #0x58
     820:	mov	x1, #0x1                   	// #1
     824:	mov	x0, x22
     828:	bl	0 <gomp_map_vars>
     82c:	mov	x19, x0
     830:	ldr	x0, [x0, #64]
     834:	mov	x1, #0x1                   	// #1
     838:	str	x1, [x0, #40]
     83c:	b	784 <present_create_copy+0x1cc>

0000000000000840 <acc_malloc>:
     840:	cbz	x0, 8c4 <acc_malloc+0x84>
     844:	stp	x29, x30, [sp, #-32]!
     848:	mov	x29, sp
     84c:	str	x19, [sp, #16]
     850:	mov	x19, x0
     854:	bl	0 <goacc_lazy_initialize>
     858:	adrp	x0, 0 <goacc_tls_data>
     85c:	ldr	x0, [x0]
     860:	mrs	x1, tpidr_el0
     864:	ldr	x0, [x1, x0]
     868:	ldr	x0, [x0, #8]
     86c:	cbz	x0, 894 <acc_malloc+0x54>
     870:	ldr	w1, [x0, #8]
     874:	tbnz	w1, #0, 8b8 <acc_malloc+0x78>
     878:	ldr	x2, [x0, #96]
     87c:	mov	x1, x19
     880:	ldr	w0, [x0, #12]
     884:	blr	x2
     888:	ldr	x19, [sp, #16]
     88c:	ldp	x29, x30, [sp], #32
     890:	ret
     894:	adrp	x3, 0 <lookup_dev>
     898:	add	x3, x3, #0x0
     89c:	add	x3, x3, #0x18
     8a0:	mov	w2, #0x6a                  	// #106
     8a4:	adrp	x1, 0 <lookup_dev>
     8a8:	add	x1, x1, #0x0
     8ac:	adrp	x0, 0 <lookup_dev>
     8b0:	add	x0, x0, #0x0
     8b4:	bl	0 <__assert_fail>
     8b8:	mov	x0, x19
     8bc:	bl	0 <malloc>
     8c0:	b	888 <acc_malloc+0x48>
     8c4:	mov	x0, #0x0                   	// #0
     8c8:	ret

00000000000008cc <acc_memcpy_to_device>:
     8cc:	stp	x29, x30, [sp, #-16]!
     8d0:	mov	x29, sp
     8d4:	adrp	x5, 0 <lookup_dev>
     8d8:	add	x5, x5, #0x0
     8dc:	add	x5, x5, #0x28
     8e0:	mov	w4, #0xfffffffe            	// #-2
     8e4:	mov	x3, x2
     8e8:	mov	x2, x1
     8ec:	mov	x1, x0
     8f0:	mov	w0, #0x0                   	// #0
     8f4:	bl	a8 <memcpy_tofrom_device>
     8f8:	ldp	x29, x30, [sp], #16
     8fc:	ret

0000000000000900 <acc_memcpy_to_device_async>:
     900:	stp	x29, x30, [sp, #-16]!
     904:	mov	x29, sp
     908:	adrp	x5, 0 <lookup_dev>
     90c:	add	x5, x5, #0x0
     910:	add	x5, x5, #0x40
     914:	mov	w4, w3
     918:	mov	x3, x2
     91c:	mov	x2, x1
     920:	mov	x1, x0
     924:	mov	w0, #0x0                   	// #0
     928:	bl	a8 <memcpy_tofrom_device>
     92c:	ldp	x29, x30, [sp], #16
     930:	ret

0000000000000934 <acc_memcpy_from_device>:
     934:	stp	x29, x30, [sp, #-16]!
     938:	mov	x29, sp
     93c:	adrp	x5, 0 <lookup_dev>
     940:	add	x5, x5, #0x0
     944:	add	x5, x5, #0x60
     948:	mov	w4, #0xfffffffe            	// #-2
     94c:	mov	x3, x2
     950:	mov	x2, x0
     954:	mov	w0, #0x1                   	// #1
     958:	bl	a8 <memcpy_tofrom_device>
     95c:	ldp	x29, x30, [sp], #16
     960:	ret

0000000000000964 <acc_memcpy_from_device_async>:
     964:	stp	x29, x30, [sp, #-16]!
     968:	mov	x29, sp
     96c:	adrp	x5, 0 <lookup_dev>
     970:	add	x5, x5, #0x0
     974:	add	x5, x5, #0x78
     978:	mov	w4, w3
     97c:	mov	x3, x2
     980:	mov	x2, x0
     984:	mov	w0, #0x1                   	// #1
     988:	bl	a8 <memcpy_tofrom_device>
     98c:	ldp	x29, x30, [sp], #16
     990:	ret

0000000000000994 <acc_deviceptr>:
     994:	stp	x29, x30, [sp, #-48]!
     998:	mov	x29, sp
     99c:	stp	x19, x20, [sp, #16]
     9a0:	mov	x20, x0
     9a4:	bl	0 <goacc_lazy_initialize>
     9a8:	adrp	x0, 0 <goacc_tls_data>
     9ac:	ldr	x0, [x0]
     9b0:	mrs	x1, tpidr_el0
     9b4:	ldr	x0, [x1, x0]
     9b8:	ldr	x19, [x0, #8]
     9bc:	ldr	w0, [x19, #8]
     9c0:	tbnz	w0, #0, a84 <acc_deviceptr+0xf0>
     9c4:	str	x21, [sp, #32]
     9c8:	add	x21, x19, #0xa8
     9cc:	mov	w0, #0x1                   	// #1
     9d0:	ldaxr	w1, [x21]
     9d4:	cbnz	w1, 9e0 <acc_deviceptr+0x4c>
     9d8:	stxr	w2, w0, [x21]
     9dc:	cbnz	w2, 9d0 <acc_deviceptr+0x3c>
     9e0:	cmp	w1, #0x0
     9e4:	b.ne	a40 <acc_deviceptr+0xac>  // b.any
     9e8:	mov	x2, #0x1                   	// #1
     9ec:	mov	x1, x20
     9f0:	mov	x0, x19
     9f4:	bl	1e8 <lookup_host>
     9f8:	mov	x19, x0
     9fc:	cbz	x0, a4c <acc_deviceptr+0xb8>
     a00:	ldr	x0, [x0, #16]
     a04:	ldr	x0, [x0, #16]
     a08:	ldr	x1, [x19]
     a0c:	sub	x0, x0, x1
     a10:	ldr	x19, [x19, #24]
     a14:	add	x19, x0, x19
     a18:	add	x19, x20, x19
     a1c:	ldxr	w0, [x21]
     a20:	stlxr	w1, wzr, [x21]
     a24:	cbnz	w1, a1c <acc_deviceptr+0x88>
     a28:	tbnz	w0, #31, a74 <acc_deviceptr+0xe0>
     a2c:	ldr	x21, [sp, #32]
     a30:	mov	x0, x19
     a34:	ldp	x19, x20, [sp, #16]
     a38:	ldp	x29, x30, [sp], #48
     a3c:	ret
     a40:	mov	x0, x21
     a44:	bl	0 <gomp_mutex_lock_slow>
     a48:	b	9e8 <acc_deviceptr+0x54>
     a4c:	ldxr	w0, [x21]
     a50:	stlxr	w1, wzr, [x21]
     a54:	cbnz	w1, a4c <acc_deviceptr+0xb8>
     a58:	tbnz	w0, #31, a64 <acc_deviceptr+0xd0>
     a5c:	ldr	x21, [sp, #32]
     a60:	b	a30 <acc_deviceptr+0x9c>
     a64:	mov	x0, x21
     a68:	bl	0 <gomp_mutex_unlock_slow>
     a6c:	ldr	x21, [sp, #32]
     a70:	b	a30 <acc_deviceptr+0x9c>
     a74:	mov	x0, x21
     a78:	bl	0 <gomp_mutex_unlock_slow>
     a7c:	ldr	x21, [sp, #32]
     a80:	b	a30 <acc_deviceptr+0x9c>
     a84:	mov	x19, x20
     a88:	b	a30 <acc_deviceptr+0x9c>

0000000000000a8c <acc_hostptr>:
     a8c:	stp	x29, x30, [sp, #-48]!
     a90:	mov	x29, sp
     a94:	stp	x19, x20, [sp, #16]
     a98:	mov	x20, x0
     a9c:	bl	0 <goacc_lazy_initialize>
     aa0:	adrp	x0, 0 <goacc_tls_data>
     aa4:	ldr	x0, [x0]
     aa8:	mrs	x1, tpidr_el0
     aac:	ldr	x0, [x1, x0]
     ab0:	ldr	x19, [x0, #8]
     ab4:	ldr	w0, [x19, #8]
     ab8:	tbnz	w0, #0, b7c <acc_hostptr+0xf0>
     abc:	str	x21, [sp, #32]
     ac0:	add	x21, x19, #0xa8
     ac4:	mov	w0, #0x1                   	// #1
     ac8:	ldaxr	w1, [x21]
     acc:	cbnz	w1, ad8 <acc_hostptr+0x4c>
     ad0:	stxr	w2, w0, [x21]
     ad4:	cbnz	w2, ac8 <acc_hostptr+0x3c>
     ad8:	cmp	w1, #0x0
     adc:	b.ne	b38 <acc_hostptr+0xac>  // b.any
     ae0:	mov	x2, #0x1                   	// #1
     ae4:	mov	x1, x20
     ae8:	ldr	x0, [x19, #176]
     aec:	bl	0 <lookup_dev>
     af0:	mov	x19, x0
     af4:	cbz	x0, b44 <acc_hostptr+0xb8>
     af8:	ldr	x0, [x0, #24]
     afc:	ldr	x1, [x19]
     b00:	add	x0, x0, x1
     b04:	ldr	x1, [x19, #16]
     b08:	ldr	x19, [x1, #16]
     b0c:	sub	x19, x0, x19
     b10:	add	x19, x20, x19
     b14:	ldxr	w0, [x21]
     b18:	stlxr	w1, wzr, [x21]
     b1c:	cbnz	w1, b14 <acc_hostptr+0x88>
     b20:	tbnz	w0, #31, b6c <acc_hostptr+0xe0>
     b24:	ldr	x21, [sp, #32]
     b28:	mov	x0, x19
     b2c:	ldp	x19, x20, [sp, #16]
     b30:	ldp	x29, x30, [sp], #48
     b34:	ret
     b38:	mov	x0, x21
     b3c:	bl	0 <gomp_mutex_lock_slow>
     b40:	b	ae0 <acc_hostptr+0x54>
     b44:	ldxr	w0, [x21]
     b48:	stlxr	w1, wzr, [x21]
     b4c:	cbnz	w1, b44 <acc_hostptr+0xb8>
     b50:	tbnz	w0, #31, b5c <acc_hostptr+0xd0>
     b54:	ldr	x21, [sp, #32]
     b58:	b	b28 <acc_hostptr+0x9c>
     b5c:	mov	x0, x21
     b60:	bl	0 <gomp_mutex_unlock_slow>
     b64:	ldr	x21, [sp, #32]
     b68:	b	b28 <acc_hostptr+0x9c>
     b6c:	mov	x0, x21
     b70:	bl	0 <gomp_mutex_unlock_slow>
     b74:	ldr	x21, [sp, #32]
     b78:	b	b28 <acc_hostptr+0x9c>
     b7c:	mov	x19, x20
     b80:	b	b28 <acc_hostptr+0x9c>

0000000000000b84 <acc_is_present>:
     b84:	cmp	x1, #0x0
     b88:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     b8c:	b.ne	b98 <acc_is_present+0x14>  // b.any
     b90:	mov	w0, #0x0                   	// #0
     b94:	ret
     b98:	stp	x29, x30, [sp, #-48]!
     b9c:	mov	x29, sp
     ba0:	stp	x19, x20, [sp, #16]
     ba4:	stp	x21, x22, [sp, #32]
     ba8:	mov	x19, x0
     bac:	mov	x20, x1
     bb0:	bl	0 <goacc_lazy_initialize>
     bb4:	adrp	x0, 0 <goacc_tls_data>
     bb8:	ldr	x0, [x0]
     bbc:	mrs	x1, tpidr_el0
     bc0:	ldr	x0, [x1, x0]
     bc4:	ldr	x21, [x0, #8]
     bc8:	ldr	w1, [x21, #8]
     bcc:	mov	w0, #0x1                   	// #1
     bd0:	tbnz	w1, #0, c5c <acc_is_present+0xd8>
     bd4:	add	x22, x21, #0xa8
     bd8:	ldaxr	w1, [x22]
     bdc:	cbnz	w1, be8 <acc_is_present+0x64>
     be0:	stxr	w2, w0, [x22]
     be4:	cbnz	w2, bd8 <acc_is_present+0x54>
     be8:	cmp	w1, #0x0
     bec:	b.ne	c34 <acc_is_present+0xb0>  // b.any
     bf0:	mov	x2, x20
     bf4:	mov	x1, x19
     bf8:	mov	x0, x21
     bfc:	bl	1e8 <lookup_host>
     c00:	mov	x21, x0
     c04:	cbz	x0, c44 <acc_is_present+0xc0>
     c08:	ldr	x0, [x0]
     c0c:	cmp	x0, x19
     c10:	b.hi	c40 <acc_is_present+0xbc>  // b.pmore
     c14:	ldr	x1, [x21, #8]
     c18:	add	x19, x19, x20
     c1c:	cmp	x19, x1
     c20:	b.hi	c6c <acc_is_present+0xe8>  // b.pmore
     c24:	sub	x0, x1, x0
     c28:	cmp	x0, x20
     c2c:	csel	x21, x21, xzr, cs  // cs = hs, nlast
     c30:	b	c44 <acc_is_present+0xc0>
     c34:	mov	x0, x22
     c38:	bl	0 <gomp_mutex_lock_slow>
     c3c:	b	bf0 <acc_is_present+0x6c>
     c40:	mov	x21, #0x0                   	// #0
     c44:	ldxr	w0, [x22]
     c48:	stlxr	w1, wzr, [x22]
     c4c:	cbnz	w1, c44 <acc_is_present+0xc0>
     c50:	tbnz	w0, #31, c74 <acc_is_present+0xf0>
     c54:	cmp	x21, #0x0
     c58:	cset	w0, ne  // ne = any
     c5c:	ldp	x19, x20, [sp, #16]
     c60:	ldp	x21, x22, [sp, #32]
     c64:	ldp	x29, x30, [sp], #48
     c68:	ret
     c6c:	mov	x21, #0x0                   	// #0
     c70:	b	c44 <acc_is_present+0xc0>
     c74:	mov	x0, x22
     c78:	bl	0 <gomp_mutex_unlock_slow>
     c7c:	b	c54 <acc_is_present+0xd0>

0000000000000c80 <acc_map_data>:
     c80:	stp	x29, x30, [sp, #-96]!
     c84:	mov	x29, sp
     c88:	stp	x19, x20, [sp, #16]
     c8c:	stp	x21, x22, [sp, #32]
     c90:	stp	x23, x24, [sp, #48]
     c94:	mov	x22, x0
     c98:	mov	x21, x1
     c9c:	mov	x20, x2
     ca0:	str	x0, [sp, #88]
     ca4:	str	x1, [sp, #80]
     ca8:	str	x2, [sp, #72]
     cac:	strh	wzr, [sp, #70]
     cb0:	bl	0 <goacc_lazy_initialize>
     cb4:	adrp	x0, 0 <goacc_tls_data>
     cb8:	ldr	x0, [x0]
     cbc:	mrs	x1, tpidr_el0
     cc0:	ldr	x24, [x1, x0]
     cc4:	ldr	x19, [x24, #8]
     cc8:	ldr	w0, [x19, #8]
     ccc:	tbz	w0, #0, d38 <acc_map_data+0xb8>
     cd0:	mov	x23, #0x0                   	// #0
     cd4:	cmp	x22, x21
     cd8:	b.ne	d2c <acc_map_data+0xac>  // b.any
     cdc:	add	x20, x19, #0xa8
     ce0:	mov	w0, #0x1                   	// #1
     ce4:	ldaxr	w1, [x20]
     ce8:	cbnz	w1, cf4 <acc_map_data+0x74>
     cec:	stxr	w2, w0, [x20]
     cf0:	cbnz	w2, ce4 <acc_map_data+0x64>
     cf4:	cmp	w1, #0x0
     cf8:	b.ne	e48 <acc_map_data+0x1c8>  // b.any
     cfc:	ldr	x0, [x19, #176]
     d00:	str	x0, [x23, #40]
     d04:	str	x23, [x19, #176]
     d08:	ldxr	w0, [x20]
     d0c:	stlxr	w1, wzr, [x20]
     d10:	cbnz	w1, d08 <acc_map_data+0x88>
     d14:	tbnz	w0, #31, e54 <acc_map_data+0x1d4>
     d18:	ldp	x19, x20, [sp, #16]
     d1c:	ldp	x21, x22, [sp, #32]
     d20:	ldp	x23, x24, [sp, #48]
     d24:	ldp	x29, x30, [sp], #96
     d28:	ret
     d2c:	adrp	x0, 0 <lookup_dev>
     d30:	add	x0, x0, #0x0
     d34:	bl	0 <gomp_fatal>
     d38:	cmp	x21, #0x0
     d3c:	ccmp	x20, #0x0, #0x4, ne  // ne = any
     d40:	ccmp	x22, #0x0, #0x4, ne  // ne = any
     d44:	b.eq	ddc <acc_map_data+0x15c>  // b.none
     d48:	add	x23, x19, #0xa8
     d4c:	mov	w0, #0x1                   	// #1
     d50:	ldaxr	w1, [x23]
     d54:	cbnz	w1, d60 <acc_map_data+0xe0>
     d58:	stxr	w2, w0, [x23]
     d5c:	cbnz	w2, d50 <acc_map_data+0xd0>
     d60:	cmp	w1, #0x0
     d64:	b.ne	df8 <acc_map_data+0x178>  // b.any
     d68:	mov	x2, x20
     d6c:	mov	x1, x22
     d70:	mov	x0, x19
     d74:	bl	1e8 <lookup_host>
     d78:	cbnz	x0, e04 <acc_map_data+0x184>
     d7c:	ldr	x0, [x24, #8]
     d80:	mov	x2, x20
     d84:	mov	x1, x21
     d88:	ldr	x0, [x0, #176]
     d8c:	bl	0 <lookup_dev>
     d90:	cbnz	x0, e20 <acc_map_data+0x1a0>
     d94:	ldxr	w0, [x23]
     d98:	stlxr	w1, wzr, [x23]
     d9c:	cbnz	w1, d94 <acc_map_data+0x114>
     da0:	tbnz	w0, #31, e3c <acc_map_data+0x1bc>
     da4:	mov	w7, #0x0                   	// #0
     da8:	mov	w6, #0x1                   	// #1
     dac:	add	x5, sp, #0x46
     db0:	add	x4, sp, #0x48
     db4:	add	x3, sp, #0x50
     db8:	add	x2, sp, #0x58
     dbc:	mov	x1, #0x1                   	// #1
     dc0:	mov	x0, x19
     dc4:	bl	0 <gomp_map_vars>
     dc8:	mov	x23, x0
     dcc:	ldr	x0, [x0, #64]
     dd0:	mov	x1, #0xffffffffffffffff    	// #-1
     dd4:	str	x1, [x0, #32]
     dd8:	b	cdc <acc_map_data+0x5c>
     ddc:	mov	w4, w20
     de0:	mov	x3, x21
     de4:	mov	w2, w20
     de8:	mov	x1, x22
     dec:	adrp	x0, 0 <lookup_dev>
     df0:	add	x0, x0, #0x0
     df4:	bl	0 <gomp_fatal>
     df8:	mov	x0, x23
     dfc:	bl	0 <gomp_mutex_lock_slow>
     e00:	b	d68 <acc_map_data+0xe8>
     e04:	mov	x0, x23
     e08:	bl	80 <gomp_mutex_unlock>
     e0c:	mov	w2, w20
     e10:	mov	x1, x22
     e14:	adrp	x0, 0 <lookup_dev>
     e18:	add	x0, x0, #0x0
     e1c:	bl	0 <gomp_fatal>
     e20:	mov	x0, x23
     e24:	bl	80 <gomp_mutex_unlock>
     e28:	mov	w2, w20
     e2c:	mov	x1, x21
     e30:	adrp	x0, 0 <lookup_dev>
     e34:	add	x0, x0, #0x0
     e38:	bl	0 <gomp_fatal>
     e3c:	mov	x0, x23
     e40:	bl	0 <gomp_mutex_unlock_slow>
     e44:	b	da4 <acc_map_data+0x124>
     e48:	mov	x0, x20
     e4c:	bl	0 <gomp_mutex_lock_slow>
     e50:	b	cfc <acc_map_data+0x7c>
     e54:	mov	x0, x20
     e58:	bl	0 <gomp_mutex_unlock_slow>
     e5c:	b	d18 <acc_map_data+0x98>

0000000000000e60 <acc_unmap_data>:
     e60:	stp	x29, x30, [sp, #-64]!
     e64:	mov	x29, sp
     e68:	stp	x19, x20, [sp, #16]
     e6c:	stp	x21, x22, [sp, #32]
     e70:	mov	x19, x0
     e74:	adrp	x0, 0 <goacc_tls_data>
     e78:	ldr	x0, [x0]
     e7c:	mrs	x1, tpidr_el0
     e80:	ldr	x0, [x1, x0]
     e84:	ldr	x21, [x0, #8]
     e88:	ldr	w0, [x21, #8]
     e8c:	tbnz	w0, #0, f10 <acc_unmap_data+0xb0>
     e90:	str	x23, [sp, #48]
     e94:	add	x22, x21, #0xa8
     e98:	mov	w0, #0x1                   	// #1
     e9c:	ldaxr	w1, [x22]
     ea0:	cbnz	w1, eac <acc_unmap_data+0x4c>
     ea4:	stxr	w2, w0, [x22]
     ea8:	cbnz	w2, e9c <acc_unmap_data+0x3c>
     eac:	cmp	w1, #0x0
     eb0:	b.ne	f20 <acc_unmap_data+0xc0>  // b.any
     eb4:	mov	x2, #0x1                   	// #1
     eb8:	mov	x1, x19
     ebc:	mov	x0, x21
     ec0:	bl	1e8 <lookup_host>
     ec4:	mov	x20, x0
     ec8:	cbz	x0, f2c <acc_unmap_data+0xcc>
     ecc:	ldr	x23, [x0]
     ed0:	cmp	x19, x23
     ed4:	b.ne	f44 <acc_unmap_data+0xe4>  // b.any
     ed8:	mov	x0, #0x1                   	// #1
     edc:	str	x0, [x20, #32]
     ee0:	ldr	x19, [x20, #16]
     ee4:	ldr	x0, [x19]
     ee8:	cmp	x0, #0x2
     eec:	b.eq	f68 <acc_unmap_data+0x108>  // b.none
     ef0:	ldxr	w0, [x22]
     ef4:	stlxr	w1, wzr, [x22]
     ef8:	cbnz	w1, ef0 <acc_unmap_data+0x90>
     efc:	tbnz	w0, #31, fcc <acc_unmap_data+0x16c>
     f00:	mov	w1, #0x1                   	// #1
     f04:	mov	x0, x19
     f08:	bl	0 <gomp_unmap_vars>
     f0c:	ldr	x23, [sp, #48]
     f10:	ldp	x19, x20, [sp, #16]
     f14:	ldp	x21, x22, [sp, #32]
     f18:	ldp	x29, x30, [sp], #64
     f1c:	ret
     f20:	mov	x0, x22
     f24:	bl	0 <gomp_mutex_lock_slow>
     f28:	b	eb4 <acc_unmap_data+0x54>
     f2c:	mov	x0, x22
     f30:	bl	80 <gomp_mutex_unlock>
     f34:	mov	x1, x19
     f38:	adrp	x0, 0 <lookup_dev>
     f3c:	add	x0, x0, #0x0
     f40:	bl	0 <gomp_fatal>
     f44:	ldr	x21, [x0, #8]
     f48:	mov	x0, x22
     f4c:	bl	80 <gomp_mutex_unlock>
     f50:	mov	x3, x19
     f54:	sub	w2, w21, w23
     f58:	ldr	x1, [x20]
     f5c:	adrp	x0, 0 <lookup_dev>
     f60:	add	x0, x0, #0x0
     f64:	bl	0 <gomp_fatal>
     f68:	str	xzr, [x19, #24]
     f6c:	str	xzr, [x19, #32]
     f70:	ldr	x1, [x21, #176]
     f74:	cbz	x1, fc4 <acc_unmap_data+0x164>
     f78:	ldr	x2, [x20, #16]
     f7c:	mov	x0, #0x0                   	// #0
     f80:	b	f88 <acc_unmap_data+0x128>
     f84:	mov	x1, x19
     f88:	cmp	x2, x1
     f8c:	b.eq	fa0 <acc_unmap_data+0x140>  // b.none
     f90:	ldr	x19, [x1, #40]
     f94:	mov	x0, x1
     f98:	cbnz	x19, f84 <acc_unmap_data+0x124>
     f9c:	b	ef0 <acc_unmap_data+0x90>
     fa0:	cbz	x0, fb4 <acc_unmap_data+0x154>
     fa4:	ldr	x2, [x1, #40]
     fa8:	str	x2, [x0, #40]
     fac:	mov	x19, x1
     fb0:	b	ef0 <acc_unmap_data+0x90>
     fb4:	ldr	x0, [x1, #40]
     fb8:	str	x0, [x21, #176]
     fbc:	mov	x19, x1
     fc0:	b	ef0 <acc_unmap_data+0x90>
     fc4:	mov	x19, x1
     fc8:	b	ef0 <acc_unmap_data+0x90>
     fcc:	mov	x0, x22
     fd0:	bl	0 <gomp_mutex_unlock_slow>
     fd4:	b	f00 <acc_unmap_data+0xa0>

0000000000000fd8 <acc_free>:
     fd8:	cbz	x0, 1138 <acc_free+0x160>
     fdc:	stp	x29, x30, [sp, #-64]!
     fe0:	mov	x29, sp
     fe4:	stp	x19, x20, [sp, #16]
     fe8:	mov	x19, x0
     fec:	adrp	x0, 0 <goacc_tls_data>
     ff0:	ldr	x0, [x0]
     ff4:	mrs	x1, tpidr_el0
     ff8:	ldr	x0, [x1, x0]
     ffc:	cbz	x0, 1088 <acc_free+0xb0>
    1000:	ldr	x20, [x0, #8]
    1004:	cbz	x20, 1088 <acc_free+0xb0>
    1008:	ldr	w0, [x20, #8]
    100c:	tbnz	w0, #0, 10b4 <acc_free+0xdc>
    1010:	stp	x21, x22, [sp, #32]
    1014:	add	x22, x20, #0xa8
    1018:	mov	w0, #0x1                   	// #1
    101c:	ldaxr	w1, [x22]
    1020:	cbnz	w1, 102c <acc_free+0x54>
    1024:	stxr	w2, w0, [x22]
    1028:	cbnz	w2, 101c <acc_free+0x44>
    102c:	cmp	w1, #0x0
    1030:	b.ne	10c0 <acc_free+0xe8>  // b.any
    1034:	mov	x2, #0x1                   	// #1
    1038:	mov	x1, x19
    103c:	ldr	x0, [x20, #176]
    1040:	bl	0 <lookup_dev>
    1044:	mov	x21, x0
    1048:	cbz	x0, 10d8 <acc_free+0x100>
    104c:	stp	x23, x24, [sp, #48]
    1050:	ldr	x23, [x0, #24]
    1054:	ldr	x0, [x0, #16]
    1058:	ldr	x24, [x0, #16]
    105c:	ldxr	w0, [x22]
    1060:	stlxr	w1, wzr, [x22]
    1064:	cbnz	w1, 105c <acc_free+0x84>
    1068:	tbnz	w0, #31, 10cc <acc_free+0xf4>
    106c:	ldr	x0, [x21]
    1070:	add	x0, x23, x0
    1074:	sub	x0, x0, x24
    1078:	add	x0, x19, x0
    107c:	bl	e60 <acc_unmap_data>
    1080:	ldp	x23, x24, [sp, #48]
    1084:	b	10e8 <acc_free+0x110>
    1088:	stp	x21, x22, [sp, #32]
    108c:	stp	x23, x24, [sp, #48]
    1090:	adrp	x3, 0 <lookup_dev>
    1094:	add	x3, x3, #0x0
    1098:	add	x3, x3, #0x98
    109c:	mov	w2, #0x7f                  	// #127
    10a0:	adrp	x1, 0 <lookup_dev>
    10a4:	add	x1, x1, #0x0
    10a8:	adrp	x0, 0 <lookup_dev>
    10ac:	add	x0, x0, #0x0
    10b0:	bl	0 <__assert_fail>
    10b4:	mov	x0, x19
    10b8:	bl	0 <free>
    10bc:	b	1104 <acc_free+0x12c>
    10c0:	mov	x0, x22
    10c4:	bl	0 <gomp_mutex_lock_slow>
    10c8:	b	1034 <acc_free+0x5c>
    10cc:	mov	x0, x22
    10d0:	bl	0 <gomp_mutex_unlock_slow>
    10d4:	b	106c <acc_free+0x94>
    10d8:	ldxr	w0, [x22]
    10dc:	stlxr	w1, wzr, [x22]
    10e0:	cbnz	w1, 10d8 <acc_free+0x100>
    10e4:	tbnz	w0, #31, 1110 <acc_free+0x138>
    10e8:	ldr	x2, [x20, #104]
    10ec:	mov	x1, x19
    10f0:	ldr	w0, [x20, #12]
    10f4:	blr	x2
    10f8:	and	w0, w0, #0xff
    10fc:	cbz	w0, 111c <acc_free+0x144>
    1100:	ldp	x21, x22, [sp, #32]
    1104:	ldp	x19, x20, [sp, #16]
    1108:	ldp	x29, x30, [sp], #64
    110c:	ret
    1110:	mov	x0, x22
    1114:	bl	0 <gomp_mutex_unlock_slow>
    1118:	b	10e8 <acc_free+0x110>
    111c:	stp	x23, x24, [sp, #48]
    1120:	adrp	x1, 0 <lookup_dev>
    1124:	add	x1, x1, #0x0
    1128:	add	x1, x1, #0xa8
    112c:	adrp	x0, 0 <lookup_dev>
    1130:	add	x0, x0, #0x0
    1134:	bl	0 <gomp_fatal>
    1138:	ret

000000000000113c <acc_create>:
    113c:	stp	x29, x30, [sp, #-16]!
    1140:	mov	x29, sp
    1144:	mov	w3, #0xfffffffe            	// #-2
    1148:	mov	x2, x1
    114c:	mov	x1, x0
    1150:	mov	w0, #0x3                   	// #3
    1154:	bl	5b8 <present_create_copy>
    1158:	ldp	x29, x30, [sp], #16
    115c:	ret

0000000000001160 <acc_create_async>:
    1160:	stp	x29, x30, [sp, #-16]!
    1164:	mov	x29, sp
    1168:	mov	w3, w2
    116c:	mov	x2, x1
    1170:	mov	x1, x0
    1174:	mov	w0, #0x3                   	// #3
    1178:	bl	5b8 <present_create_copy>
    117c:	ldp	x29, x30, [sp], #16
    1180:	ret

0000000000001184 <acc_copyin>:
    1184:	stp	x29, x30, [sp, #-16]!
    1188:	mov	x29, sp
    118c:	mov	w3, #0xfffffffe            	// #-2
    1190:	mov	x2, x1
    1194:	mov	x1, x0
    1198:	mov	w0, #0x7                   	// #7
    119c:	bl	5b8 <present_create_copy>
    11a0:	ldp	x29, x30, [sp], #16
    11a4:	ret

00000000000011a8 <acc_copyin_async>:
    11a8:	stp	x29, x30, [sp, #-16]!
    11ac:	mov	x29, sp
    11b0:	mov	w3, w2
    11b4:	mov	x2, x1
    11b8:	mov	x1, x0
    11bc:	mov	w0, #0x7                   	// #7
    11c0:	bl	5b8 <present_create_copy>
    11c4:	ldp	x29, x30, [sp], #16
    11c8:	ret

00000000000011cc <acc_delete>:
    11cc:	stp	x29, x30, [sp, #-16]!
    11d0:	mov	x29, sp
    11d4:	adrp	x4, 0 <lookup_dev>
    11d8:	add	x4, x4, #0x0
    11dc:	add	x4, x4, #0xb8
    11e0:	mov	w3, #0xfffffffe            	// #-2
    11e4:	mov	x2, x1
    11e8:	mov	x1, x0
    11ec:	mov	w0, #0x0                   	// #0
    11f0:	bl	368 <delete_copyout>
    11f4:	ldp	x29, x30, [sp], #16
    11f8:	ret

00000000000011fc <acc_delete_async>:
    11fc:	stp	x29, x30, [sp, #-16]!
    1200:	mov	x29, sp
    1204:	adrp	x4, 0 <lookup_dev>
    1208:	add	x4, x4, #0x0
    120c:	add	x4, x4, #0xc8
    1210:	mov	w3, w2
    1214:	mov	x2, x1
    1218:	mov	x1, x0
    121c:	mov	w0, #0x0                   	// #0
    1220:	bl	368 <delete_copyout>
    1224:	ldp	x29, x30, [sp], #16
    1228:	ret

000000000000122c <acc_delete_finalize>:
    122c:	stp	x29, x30, [sp, #-16]!
    1230:	mov	x29, sp
    1234:	adrp	x4, 0 <lookup_dev>
    1238:	add	x4, x4, #0x0
    123c:	add	x4, x4, #0xe0
    1240:	mov	w3, #0xfffffffe            	// #-2
    1244:	mov	x2, x1
    1248:	mov	x1, x0
    124c:	mov	w0, #0x2                   	// #2
    1250:	bl	368 <delete_copyout>
    1254:	ldp	x29, x30, [sp], #16
    1258:	ret

000000000000125c <acc_delete_finalize_async>:
    125c:	stp	x29, x30, [sp, #-16]!
    1260:	mov	x29, sp
    1264:	adrp	x4, 0 <lookup_dev>
    1268:	add	x4, x4, #0x0
    126c:	add	x4, x4, #0xf8
    1270:	mov	w3, w2
    1274:	mov	x2, x1
    1278:	mov	x1, x0
    127c:	mov	w0, #0x2                   	// #2
    1280:	bl	368 <delete_copyout>
    1284:	ldp	x29, x30, [sp], #16
    1288:	ret

000000000000128c <acc_copyout>:
    128c:	stp	x29, x30, [sp, #-16]!
    1290:	mov	x29, sp
    1294:	adrp	x4, 0 <lookup_dev>
    1298:	add	x4, x4, #0x0
    129c:	add	x4, x4, #0x118
    12a0:	mov	w3, #0xfffffffe            	// #-2
    12a4:	mov	x2, x1
    12a8:	mov	x1, x0
    12ac:	mov	w0, #0x1                   	// #1
    12b0:	bl	368 <delete_copyout>
    12b4:	ldp	x29, x30, [sp], #16
    12b8:	ret

00000000000012bc <acc_copyout_async>:
    12bc:	stp	x29, x30, [sp, #-16]!
    12c0:	mov	x29, sp
    12c4:	adrp	x4, 0 <lookup_dev>
    12c8:	add	x4, x4, #0x0
    12cc:	add	x4, x4, #0x128
    12d0:	mov	w3, w2
    12d4:	mov	x2, x1
    12d8:	mov	x1, x0
    12dc:	mov	w0, #0x1                   	// #1
    12e0:	bl	368 <delete_copyout>
    12e4:	ldp	x29, x30, [sp], #16
    12e8:	ret

00000000000012ec <acc_copyout_finalize>:
    12ec:	stp	x29, x30, [sp, #-16]!
    12f0:	mov	x29, sp
    12f4:	adrp	x4, 0 <lookup_dev>
    12f8:	add	x4, x4, #0x0
    12fc:	add	x4, x4, #0x140
    1300:	mov	w3, #0xfffffffe            	// #-2
    1304:	mov	x2, x1
    1308:	mov	x1, x0
    130c:	mov	w0, #0x3                   	// #3
    1310:	bl	368 <delete_copyout>
    1314:	ldp	x29, x30, [sp], #16
    1318:	ret

000000000000131c <acc_copyout_finalize_async>:
    131c:	stp	x29, x30, [sp, #-16]!
    1320:	mov	x29, sp
    1324:	adrp	x4, 0 <lookup_dev>
    1328:	add	x4, x4, #0x0
    132c:	add	x4, x4, #0x158
    1330:	mov	w3, w2
    1334:	mov	x2, x1
    1338:	mov	x1, x0
    133c:	mov	w0, #0x3                   	// #3
    1340:	bl	368 <delete_copyout>
    1344:	ldp	x29, x30, [sp], #16
    1348:	ret

000000000000134c <acc_update_device>:
    134c:	stp	x29, x30, [sp, #-16]!
    1350:	mov	x29, sp
    1354:	mov	w3, #0xfffffffe            	// #-2
    1358:	mov	x2, x1
    135c:	mov	x1, x0
    1360:	mov	w0, #0x1                   	// #1
    1364:	bl	210 <update_dev_host>
    1368:	ldp	x29, x30, [sp], #16
    136c:	ret

0000000000001370 <acc_update_device_async>:
    1370:	stp	x29, x30, [sp, #-16]!
    1374:	mov	x29, sp
    1378:	mov	w3, w2
    137c:	mov	x2, x1
    1380:	mov	x1, x0
    1384:	mov	w0, #0x1                   	// #1
    1388:	bl	210 <update_dev_host>
    138c:	ldp	x29, x30, [sp], #16
    1390:	ret

0000000000001394 <acc_update_self>:
    1394:	stp	x29, x30, [sp, #-16]!
    1398:	mov	x29, sp
    139c:	mov	w3, #0xfffffffe            	// #-2
    13a0:	mov	x2, x1
    13a4:	mov	x1, x0
    13a8:	mov	w0, #0x0                   	// #0
    13ac:	bl	210 <update_dev_host>
    13b0:	ldp	x29, x30, [sp], #16
    13b4:	ret

00000000000013b8 <acc_update_self_async>:
    13b8:	stp	x29, x30, [sp, #-16]!
    13bc:	mov	x29, sp
    13c0:	mov	w3, w2
    13c4:	mov	x2, x1
    13c8:	mov	x1, x0
    13cc:	mov	w0, #0x0                   	// #0
    13d0:	bl	210 <update_dev_host>
    13d4:	ldp	x29, x30, [sp], #16
    13d8:	ret

00000000000013dc <gomp_acc_insert_pointer>:
    13dc:	stp	x29, x30, [sp, #-64]!
    13e0:	mov	x29, sp
    13e4:	stp	x19, x20, [sp, #16]
    13e8:	stp	x21, x22, [sp, #32]
    13ec:	str	x23, [sp, #48]
    13f0:	mov	x20, x0
    13f4:	mov	x19, x1
    13f8:	mov	x21, x2
    13fc:	mov	x23, x3
    1400:	adrp	x0, 0 <goacc_tls_data>
    1404:	ldr	x0, [x0]
    1408:	mrs	x1, tpidr_el0
    140c:	ldr	x0, [x1, x0]
    1410:	ldr	x22, [x0, #8]
    1414:	ldr	x1, [x2]
    1418:	ldr	x0, [x19]
    141c:	bl	b84 <acc_is_present>
    1420:	cbz	w0, 150c <gomp_acc_insert_pointer+0x130>
    1424:	add	x23, x22, #0xa8
    1428:	mov	w0, #0x1                   	// #1
    142c:	ldaxr	w1, [x23]
    1430:	cbnz	w1, 143c <gomp_acc_insert_pointer+0x60>
    1434:	stxr	w2, w0, [x23]
    1438:	cbnz	w2, 142c <gomp_acc_insert_pointer+0x50>
    143c:	cmp	w1, #0x0
    1440:	b.ne	14a4 <gomp_acc_insert_pointer+0xc8>  // b.any
    1444:	ldr	x2, [x21]
    1448:	ldr	x1, [x19]
    144c:	mov	x0, x22
    1450:	bl	1e8 <lookup_host>
    1454:	mov	x19, x0
    1458:	ldxr	w0, [x23]
    145c:	stlxr	w1, wzr, [x23]
    1460:	cbnz	w1, 1458 <gomp_acc_insert_pointer+0x7c>
    1464:	tbnz	w0, #31, 14b0 <gomp_acc_insert_pointer+0xd4>
    1468:	ldr	x5, [x19, #16]
    146c:	ldr	x4, [x5, #48]
    1470:	cbz	x4, 1498 <gomp_acc_insert_pointer+0xbc>
    1474:	mov	x1, #0x0                   	// #0
    1478:	add	x3, x5, #0x40
    147c:	lsl	x2, x1, #5
    1480:	ldr	x2, [x3, x2]
    1484:	cmp	x2, x19
    1488:	b.eq	14bc <gomp_acc_insert_pointer+0xe0>  // b.none
    148c:	add	x1, x1, #0x1
    1490:	cmp	x1, x4
    1494:	b.ne	147c <gomp_acc_insert_pointer+0xa0>  // b.any
    1498:	adrp	x0, 0 <lookup_dev>
    149c:	add	x0, x0, #0x0
    14a0:	bl	0 <gomp_fatal>
    14a4:	mov	x0, x23
    14a8:	bl	0 <gomp_mutex_lock_slow>
    14ac:	b	1444 <gomp_acc_insert_pointer+0x68>
    14b0:	mov	x0, x23
    14b4:	bl	0 <gomp_mutex_unlock_slow>
    14b8:	b	1468 <gomp_acc_insert_pointer+0x8c>
    14bc:	cbz	x20, 1590 <gomp_acc_insert_pointer+0x1b4>
    14c0:	add	x20, x20, x1
    14c4:	b	14d4 <gomp_acc_insert_pointer+0xf8>
    14c8:	add	x1, x1, #0x1
    14cc:	cmp	x1, x20
    14d0:	b.eq	1590 <gomp_acc_insert_pointer+0x1b4>  // b.none
    14d4:	ldr	x2, [x5, #48]
    14d8:	cmp	x2, x1
    14dc:	b.ls	14c8 <gomp_acc_insert_pointer+0xec>  // b.plast
    14e0:	lsl	x6, x1, #5
    14e4:	ldr	x2, [x3, x6]
    14e8:	cbz	x2, 14c8 <gomp_acc_insert_pointer+0xec>
    14ec:	ldr	x4, [x2, #32]
    14f0:	add	x4, x4, #0x1
    14f4:	str	x4, [x2, #32]
    14f8:	ldr	x0, [x3, x6]
    14fc:	ldr	x2, [x0, #40]
    1500:	add	x2, x2, #0x1
    1504:	str	x2, [x0, #40]
    1508:	b	14c8 <gomp_acc_insert_pointer+0xec>
    150c:	adrp	x0, 0 <gomp_debug_var>
    1510:	ldr	w0, [x0]
    1514:	cbnz	w0, 15a4 <gomp_acc_insert_pointer+0x1c8>
    1518:	mov	w7, #0x0                   	// #0
    151c:	mov	w6, #0x1                   	// #1
    1520:	mov	x5, x23
    1524:	mov	x4, x21
    1528:	mov	x3, #0x0                   	// #0
    152c:	mov	x2, x19
    1530:	mov	x1, x20
    1534:	mov	x0, x22
    1538:	bl	0 <gomp_map_vars>
    153c:	mov	x19, x0
    1540:	adrp	x0, 0 <gomp_debug_var>
    1544:	ldr	w0, [x0]
    1548:	cbnz	w0, 15c4 <gomp_acc_insert_pointer+0x1e8>
    154c:	ldr	x1, [x19, #64]
    1550:	mov	x0, #0x1                   	// #1
    1554:	str	x0, [x1, #40]
    1558:	add	x20, x22, #0xa8
    155c:	ldaxr	w1, [x20]
    1560:	cbnz	w1, 156c <gomp_acc_insert_pointer+0x190>
    1564:	stxr	w2, w0, [x20]
    1568:	cbnz	w2, 155c <gomp_acc_insert_pointer+0x180>
    156c:	cmp	w1, #0x0
    1570:	b.ne	15e4 <gomp_acc_insert_pointer+0x208>  // b.any
    1574:	ldr	x0, [x22, #176]
    1578:	str	x0, [x19, #40]
    157c:	str	x19, [x22, #176]
    1580:	ldxr	w0, [x20]
    1584:	stlxr	w1, wzr, [x20]
    1588:	cbnz	w1, 1580 <gomp_acc_insert_pointer+0x1a4>
    158c:	tbnz	w0, #31, 15f0 <gomp_acc_insert_pointer+0x214>
    1590:	ldp	x19, x20, [sp, #16]
    1594:	ldp	x21, x22, [sp, #32]
    1598:	ldr	x23, [sp, #48]
    159c:	ldp	x29, x30, [sp], #64
    15a0:	ret
    15a4:	adrp	x2, 0 <lookup_dev>
    15a8:	add	x2, x2, #0x0
    15ac:	add	x2, x2, #0x178
    15b0:	adrp	x1, 0 <lookup_dev>
    15b4:	add	x1, x1, #0x0
    15b8:	mov	w0, #0x0                   	// #0
    15bc:	bl	0 <gomp_debug>
    15c0:	b	1518 <gomp_acc_insert_pointer+0x13c>
    15c4:	adrp	x2, 0 <lookup_dev>
    15c8:	add	x2, x2, #0x0
    15cc:	add	x2, x2, #0x178
    15d0:	adrp	x1, 0 <lookup_dev>
    15d4:	add	x1, x1, #0x0
    15d8:	mov	w0, #0x0                   	// #0
    15dc:	bl	0 <gomp_debug>
    15e0:	b	154c <gomp_acc_insert_pointer+0x170>
    15e4:	mov	x0, x20
    15e8:	bl	0 <gomp_mutex_lock_slow>
    15ec:	b	1574 <gomp_acc_insert_pointer+0x198>
    15f0:	mov	x0, x20
    15f4:	bl	0 <gomp_mutex_unlock_slow>
    15f8:	b	1590 <gomp_acc_insert_pointer+0x1b4>

00000000000015fc <gomp_acc_remove_pointer>:
    15fc:	stp	x29, x30, [sp, #-80]!
    1600:	mov	x29, sp
    1604:	stp	x19, x20, [sp, #16]
    1608:	stp	x21, x22, [sp, #32]
    160c:	stp	x23, x24, [sp, #48]
    1610:	stp	x25, x26, [sp, #64]
    1614:	mov	x20, x0
    1618:	and	w23, w2, #0xff
    161c:	mov	w22, w3
    1620:	mov	w24, w4
    1624:	adrp	x0, 0 <goacc_tls_data>
    1628:	ldr	x0, [x0]
    162c:	mrs	x2, tpidr_el0
    1630:	ldr	x0, [x2, x0]
    1634:	ldr	x25, [x0, #8]
    1638:	cmp	w5, #0x1
    163c:	cset	w26, ne  // ne = any
    1640:	mov	x0, x20
    1644:	bl	b84 <acc_is_present>
    1648:	cbz	w0, 1830 <gomp_acc_remove_pointer+0x234>
    164c:	add	w26, w26, #0x2
    1650:	add	x21, x25, #0xa8
    1654:	mov	w0, #0x1                   	// #1
    1658:	ldaxr	w1, [x21]
    165c:	cbnz	w1, 1668 <gomp_acc_remove_pointer+0x6c>
    1660:	stxr	w2, w0, [x21]
    1664:	cbnz	w2, 1658 <gomp_acc_remove_pointer+0x5c>
    1668:	cmp	w1, #0x0
    166c:	b.ne	1718 <gomp_acc_remove_pointer+0x11c>  // b.any
    1670:	mov	x2, #0x1                   	// #1
    1674:	mov	x1, x20
    1678:	mov	x0, x25
    167c:	bl	1e8 <lookup_host>
    1680:	mov	x19, x0
    1684:	cbz	x0, 1724 <gomp_acc_remove_pointer+0x128>
    1688:	adrp	x0, 0 <gomp_debug_var>
    168c:	ldr	w0, [x0]
    1690:	cbnz	w0, 173c <gomp_acc_remove_pointer+0x140>
    1694:	ldr	x20, [x19, #16]
    1698:	ldr	x0, [x19, #32]
    169c:	ldr	x1, [x19, #40]
    16a0:	cmp	x0, x1
    16a4:	b.cc	175c <gomp_acc_remove_pointer+0x160>  // b.lo, b.ul, b.last
    16a8:	cbz	w24, 1770 <gomp_acc_remove_pointer+0x174>
    16ac:	sub	x0, x0, x1
    16b0:	str	x0, [x19, #32]
    16b4:	str	xzr, [x19, #40]
    16b8:	ldxr	w0, [x21]
    16bc:	stlxr	w1, wzr, [x21]
    16c0:	cbnz	w1, 16b8 <gomp_acc_remove_pointer+0xbc>
    16c4:	tbnz	w0, #31, 1788 <gomp_acc_remove_pointer+0x18c>
    16c8:	ldr	x1, [x19, #32]
    16cc:	cbnz	x1, 1814 <gomp_acc_remove_pointer+0x218>
    16d0:	sxtw	x4, w26
    16d4:	ldr	x0, [x20]
    16d8:	cmp	x0, w26, sxtw
    16dc:	b.eq	1794 <gomp_acc_remove_pointer+0x198>  // b.none
    16e0:	mov	x0, #0x1                   	// #1
    16e4:	str	x0, [x19, #32]
    16e8:	str	x4, [x20]
    16ec:	ldr	x2, [x20, #48]
    16f0:	cbz	x2, 17f8 <gomp_acc_remove_pointer+0x1fc>
    16f4:	add	x3, x20, #0x40
    16f8:	lsl	x0, x1, #5
    16fc:	ldr	x0, [x3, x0]
    1700:	cmp	x0, x19
    1704:	b.eq	17f0 <gomp_acc_remove_pointer+0x1f4>  // b.none
    1708:	add	x1, x1, #0x1
    170c:	cmp	x1, x2
    1710:	b.ne	16f8 <gomp_acc_remove_pointer+0xfc>  // b.any
    1714:	b	17f8 <gomp_acc_remove_pointer+0x1fc>
    1718:	mov	x0, x21
    171c:	bl	0 <gomp_mutex_lock_slow>
    1720:	b	1670 <gomp_acc_remove_pointer+0x74>
    1724:	mov	x0, x21
    1728:	bl	80 <gomp_mutex_unlock>
    172c:	mov	x1, x20
    1730:	adrp	x0, 0 <lookup_dev>
    1734:	add	x0, x0, #0x0
    1738:	bl	0 <gomp_fatal>
    173c:	adrp	x2, 0 <lookup_dev>
    1740:	add	x2, x2, #0x0
    1744:	add	x2, x2, #0x190
    1748:	adrp	x1, 0 <lookup_dev>
    174c:	add	x1, x1, #0x0
    1750:	mov	w0, #0x0                   	// #0
    1754:	bl	0 <gomp_debug>
    1758:	b	1694 <gomp_acc_remove_pointer+0x98>
    175c:	mov	x0, x21
    1760:	bl	80 <gomp_mutex_unlock>
    1764:	adrp	x0, 0 <lookup_dev>
    1768:	add	x0, x0, #0x0
    176c:	bl	0 <gomp_fatal>
    1770:	cbz	x1, 16b8 <gomp_acc_remove_pointer+0xbc>
    1774:	sub	x1, x1, #0x1
    1778:	str	x1, [x19, #40]
    177c:	sub	x0, x0, #0x1
    1780:	str	x0, [x19, #32]
    1784:	b	16b8 <gomp_acc_remove_pointer+0xbc>
    1788:	mov	x0, x21
    178c:	bl	0 <gomp_mutex_unlock_slow>
    1790:	b	16c8 <gomp_acc_remove_pointer+0xcc>
    1794:	ldr	x0, [x25, #176]
    1798:	cbz	x0, 17e8 <gomp_acc_remove_pointer+0x1ec>
    179c:	ldr	x3, [x19, #16]
    17a0:	mov	x2, #0x0                   	// #0
    17a4:	b	17ac <gomp_acc_remove_pointer+0x1b0>
    17a8:	mov	x0, x20
    17ac:	cmp	x3, x0
    17b0:	b.eq	17c4 <gomp_acc_remove_pointer+0x1c8>  // b.none
    17b4:	ldr	x20, [x0, #40]
    17b8:	mov	x2, x0
    17bc:	cbnz	x20, 17a8 <gomp_acc_remove_pointer+0x1ac>
    17c0:	b	16e0 <gomp_acc_remove_pointer+0xe4>
    17c4:	cbz	x2, 17d8 <gomp_acc_remove_pointer+0x1dc>
    17c8:	ldr	x3, [x0, #40]
    17cc:	str	x3, [x2, #40]
    17d0:	mov	x20, x0
    17d4:	b	16e0 <gomp_acc_remove_pointer+0xe4>
    17d8:	ldr	x2, [x0, #40]
    17dc:	str	x2, [x25, #176]
    17e0:	mov	x20, x0
    17e4:	b	16e0 <gomp_acc_remove_pointer+0xe4>
    17e8:	mov	x20, x0
    17ec:	b	16e0 <gomp_acc_remove_pointer+0xe4>
    17f0:	add	x1, x20, x1, lsl #5
    17f4:	strb	w23, [x1, #72]
    17f8:	cmn	w22, #0x1
    17fc:	b.lt	1848 <gomp_acc_remove_pointer+0x24c>  // b.tstop
    1800:	ldr	x0, [x20, #56]
    1804:	ldr	x2, [x0, #192]
    1808:	mov	w1, w22
    180c:	mov	x0, x20
    1810:	blr	x2
    1814:	ldxr	w0, [x21]
    1818:	stlxr	w1, wzr, [x21]
    181c:	cbnz	w1, 1814 <gomp_acc_remove_pointer+0x218>
    1820:	tbnz	w0, #31, 1858 <gomp_acc_remove_pointer+0x25c>
    1824:	adrp	x0, 0 <gomp_debug_var>
    1828:	ldr	w0, [x0]
    182c:	cbnz	w0, 1864 <gomp_acc_remove_pointer+0x268>
    1830:	ldp	x19, x20, [sp, #16]
    1834:	ldp	x21, x22, [sp, #32]
    1838:	ldp	x23, x24, [sp, #48]
    183c:	ldp	x25, x26, [sp, #64]
    1840:	ldp	x29, x30, [sp], #80
    1844:	ret
    1848:	mov	w1, #0x1                   	// #1
    184c:	mov	x0, x20
    1850:	bl	0 <gomp_unmap_vars>
    1854:	b	1814 <gomp_acc_remove_pointer+0x218>
    1858:	mov	x0, x21
    185c:	bl	0 <gomp_mutex_unlock_slow>
    1860:	b	1824 <gomp_acc_remove_pointer+0x228>
    1864:	adrp	x2, 0 <lookup_dev>
    1868:	add	x2, x2, #0x0
    186c:	add	x2, x2, #0x190
    1870:	adrp	x1, 0 <lookup_dev>
    1874:	add	x1, x1, #0x0
    1878:	mov	w0, #0x0                   	// #0
    187c:	bl	0 <gomp_debug>
    1880:	b	1830 <gomp_acc_remove_pointer+0x234>

oacc-async.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_async_test>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	add	w1, w0, #0x2
   c:	cmp	w0, #0x0
  10:	ccmp	w1, #0x1, #0x0, lt  // lt = tstop
  14:	b.hi	44 <acc_async_test+0x44>  // b.pmore
  18:	adrp	x1, 0 <goacc_tls_data>
  1c:	ldr	x1, [x1]
  20:	mrs	x2, tpidr_el0
  24:	ldr	x1, [x2, x1]
  28:	cbz	x1, 54 <acc_async_test+0x54>
  2c:	ldr	x1, [x1, #8]
  30:	cbz	x1, 54 <acc_async_test+0x54>
  34:	ldr	x1, [x1, #200]
  38:	blr	x1
  3c:	ldp	x29, x30, [sp], #16
  40:	ret
  44:	mov	w1, w0
  48:	adrp	x0, 0 <acc_async_test>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <gomp_fatal>
  54:	adrp	x0, 0 <acc_async_test>
  58:	add	x0, x0, #0x0
  5c:	bl	0 <gomp_fatal>

0000000000000060 <acc_async_test_all>:
  60:	stp	x29, x30, [sp, #-16]!
  64:	mov	x29, sp
  68:	adrp	x0, 0 <goacc_tls_data>
  6c:	ldr	x0, [x0]
  70:	mrs	x1, tpidr_el0
  74:	ldr	x0, [x1, x0]
  78:	cbz	x0, 94 <acc_async_test_all+0x34>
  7c:	ldr	x0, [x0, #8]
  80:	cbz	x0, 94 <acc_async_test_all+0x34>
  84:	ldr	x0, [x0, #208]
  88:	blr	x0
  8c:	ldp	x29, x30, [sp], #16
  90:	ret
  94:	adrp	x0, 0 <acc_async_test>
  98:	add	x0, x0, #0x0
  9c:	bl	0 <gomp_fatal>

00000000000000a0 <acc_async_wait>:
  a0:	stp	x29, x30, [sp, #-16]!
  a4:	mov	x29, sp
  a8:	add	w1, w0, #0x2
  ac:	cmp	w0, #0x0
  b0:	ccmp	w1, #0x1, #0x0, lt  // lt = tstop
  b4:	b.hi	e4 <acc_async_wait+0x44>  // b.pmore
  b8:	adrp	x1, 0 <goacc_tls_data>
  bc:	ldr	x1, [x1]
  c0:	mrs	x2, tpidr_el0
  c4:	ldr	x1, [x2, x1]
  c8:	cbz	x1, f4 <acc_async_wait+0x54>
  cc:	ldr	x1, [x1, #8]
  d0:	cbz	x1, f4 <acc_async_wait+0x54>
  d4:	ldr	x1, [x1, #216]
  d8:	blr	x1
  dc:	ldp	x29, x30, [sp], #16
  e0:	ret
  e4:	mov	w1, w0
  e8:	adrp	x0, 0 <acc_async_test>
  ec:	add	x0, x0, #0x0
  f0:	bl	0 <gomp_fatal>
  f4:	adrp	x0, 0 <acc_async_test>
  f8:	add	x0, x0, #0x0
  fc:	bl	0 <gomp_fatal>

0000000000000100 <acc_wait_async>:
 100:	stp	x29, x30, [sp, #-16]!
 104:	mov	x29, sp
 108:	adrp	x2, 0 <goacc_tls_data>
 10c:	ldr	x2, [x2]
 110:	mrs	x3, tpidr_el0
 114:	ldr	x2, [x3, x2]
 118:	cbz	x2, 134 <acc_wait_async+0x34>
 11c:	ldr	x2, [x2, #8]
 120:	cbz	x2, 134 <acc_wait_async+0x34>
 124:	ldr	x2, [x2, #224]
 128:	blr	x2
 12c:	ldp	x29, x30, [sp], #16
 130:	ret
 134:	adrp	x0, 0 <acc_async_test>
 138:	add	x0, x0, #0x0
 13c:	bl	0 <gomp_fatal>

0000000000000140 <acc_async_wait_all>:
 140:	stp	x29, x30, [sp, #-16]!
 144:	mov	x29, sp
 148:	adrp	x0, 0 <goacc_tls_data>
 14c:	ldr	x0, [x0]
 150:	mrs	x1, tpidr_el0
 154:	ldr	x0, [x1, x0]
 158:	cbz	x0, 174 <acc_async_wait_all+0x34>
 15c:	ldr	x0, [x0, #8]
 160:	cbz	x0, 174 <acc_async_wait_all+0x34>
 164:	ldr	x0, [x0, #232]
 168:	blr	x0
 16c:	ldp	x29, x30, [sp], #16
 170:	ret
 174:	adrp	x0, 0 <acc_async_test>
 178:	add	x0, x0, #0x0
 17c:	bl	0 <gomp_fatal>

0000000000000180 <acc_wait_all_async>:
 180:	stp	x29, x30, [sp, #-16]!
 184:	mov	x29, sp
 188:	add	w1, w0, #0x2
 18c:	cmp	w0, #0x0
 190:	ccmp	w1, #0x1, #0x0, lt  // lt = tstop
 194:	b.hi	1c4 <acc_wait_all_async+0x44>  // b.pmore
 198:	adrp	x1, 0 <goacc_tls_data>
 19c:	ldr	x1, [x1]
 1a0:	mrs	x2, tpidr_el0
 1a4:	ldr	x1, [x2, x1]
 1a8:	cbz	x1, 1d4 <acc_wait_all_async+0x54>
 1ac:	ldr	x1, [x1, #8]
 1b0:	cbz	x1, 1d4 <acc_wait_all_async+0x54>
 1b4:	ldr	x1, [x1, #240]
 1b8:	blr	x1
 1bc:	ldp	x29, x30, [sp], #16
 1c0:	ret
 1c4:	mov	w1, w0
 1c8:	adrp	x0, 0 <acc_async_test>
 1cc:	add	x0, x0, #0x0
 1d0:	bl	0 <gomp_fatal>
 1d4:	adrp	x0, 0 <acc_async_test>
 1d8:	add	x0, x0, #0x0
 1dc:	bl	0 <gomp_fatal>

oacc-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_async_unmap_vars>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	w0, w1
  14:	ldr	x20, [x19, #56]
  18:	ldr	x2, [x20, #248]
  1c:	blr	x2
  20:	mov	w1, #0x1                   	// #1
  24:	mov	x0, x19
  28:	bl	0 <gomp_unmap_vars>
  2c:	ldr	x1, [x20, #248]
  30:	mov	w0, #0xfffffffe            	// #-2
  34:	blr	x1
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret

0000000000000044 <GOMP_PLUGIN_acc_thread>:
  44:	adrp	x0, 0 <goacc_tls_data>
  48:	ldr	x0, [x0]
  4c:	mrs	x1, tpidr_el0
  50:	ldr	x0, [x1, x0]
  54:	cbz	x0, 5c <GOMP_PLUGIN_acc_thread+0x18>
  58:	ldr	x0, [x0, #40]
  5c:	ret

0000000000000060 <GOMP_PLUGIN_acc_default_dim>:
  60:	cmp	w0, #0x2
  64:	b.hi	78 <GOMP_PLUGIN_acc_default_dim+0x18>  // b.pmore
  68:	adrp	x1, 0 <goacc_default_dims>
  6c:	add	x1, x1, #0x0
  70:	ldr	w0, [x1, w0, uxtw #2]
  74:	ret
  78:	stp	x29, x30, [sp, #-16]!
  7c:	mov	x29, sp
  80:	mov	w1, w0
  84:	adrp	x0, 0 <GOMP_PLUGIN_async_unmap_vars>
  88:	add	x0, x0, #0x0
  8c:	bl	0 <gomp_fatal>

oacc-cuda.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_get_current_cuda_device>:
   0:	adrp	x0, 0 <goacc_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	ldr	x0, [x1, x0]
  10:	cbz	x0, 3c <acc_get_current_cuda_device+0x3c>
  14:	ldr	x0, [x0, #8]
  18:	cbz	x0, 3c <acc_get_current_cuda_device+0x3c>
  1c:	ldr	x1, [x0, #272]
  20:	mov	x0, #0x0                   	// #0
  24:	cbz	x1, 3c <acc_get_current_cuda_device+0x3c>
  28:	stp	x29, x30, [sp, #-16]!
  2c:	mov	x29, sp
  30:	blr	x1
  34:	ldp	x29, x30, [sp], #16
  38:	ret
  3c:	ret

0000000000000040 <acc_get_current_cuda_context>:
  40:	adrp	x0, 0 <goacc_tls_data>
  44:	ldr	x0, [x0]
  48:	mrs	x1, tpidr_el0
  4c:	ldr	x0, [x1, x0]
  50:	cbz	x0, 7c <acc_get_current_cuda_context+0x3c>
  54:	ldr	x0, [x0, #8]
  58:	cbz	x0, 7c <acc_get_current_cuda_context+0x3c>
  5c:	ldr	x1, [x0, #280]
  60:	mov	x0, #0x0                   	// #0
  64:	cbz	x1, 7c <acc_get_current_cuda_context+0x3c>
  68:	stp	x29, x30, [sp, #-16]!
  6c:	mov	x29, sp
  70:	blr	x1
  74:	ldp	x29, x30, [sp], #16
  78:	ret
  7c:	ret

0000000000000080 <acc_get_cuda_stream>:
  80:	mov	w1, w0
  84:	adrp	x0, 0 <goacc_tls_data>
  88:	ldr	x0, [x0]
  8c:	mrs	x2, tpidr_el0
  90:	ldr	x0, [x2, x0]
  94:	add	w2, w1, #0x2
  98:	cmp	w1, #0x0
  9c:	ccmp	w2, #0x1, #0x0, lt  // lt = tstop
  a0:	ccmp	x0, #0x0, #0x4, ls  // ls = plast
  a4:	b.eq	d4 <acc_get_cuda_stream+0x54>  // b.none
  a8:	ldr	x0, [x0, #8]
  ac:	cbz	x0, dc <acc_get_cuda_stream+0x5c>
  b0:	ldr	x2, [x0, #288]
  b4:	mov	x0, #0x0                   	// #0
  b8:	cbz	x2, dc <acc_get_cuda_stream+0x5c>
  bc:	stp	x29, x30, [sp, #-16]!
  c0:	mov	x29, sp
  c4:	mov	w0, w1
  c8:	blr	x2
  cc:	ldp	x29, x30, [sp], #16
  d0:	ret
  d4:	mov	x0, #0x0                   	// #0
  d8:	ret
  dc:	ret

00000000000000e0 <acc_set_cuda_stream>:
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	mov	x29, sp
  e8:	stp	x19, x20, [sp, #16]
  ec:	mov	w19, w0
  f0:	add	w0, w0, #0x2
  f4:	cmp	w19, #0x0
  f8:	ccmp	w0, #0x1, #0x0, lt  // lt = tstop
  fc:	cset	w0, hi  // hi = pmore
 100:	cmp	x1, #0x0
 104:	csinc	w0, w0, wzr, ne  // ne = any
 108:	cbz	w0, 11c <acc_set_cuda_stream+0x3c>
 10c:	mov	w0, #0x0                   	// #0
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x29, x30, [sp], #32
 118:	ret
 11c:	mov	x20, x1
 120:	bl	0 <goacc_lazy_initialize>
 124:	adrp	x0, 0 <goacc_tls_data>
 128:	ldr	x0, [x0]
 12c:	mrs	x1, tpidr_el0
 130:	ldr	x0, [x1, x0]
 134:	cbz	x0, 158 <acc_set_cuda_stream+0x78>
 138:	ldr	x0, [x0, #8]
 13c:	cbz	x0, 160 <acc_set_cuda_stream+0x80>
 140:	ldr	x2, [x0, #296]
 144:	cbz	x2, 168 <acc_set_cuda_stream+0x88>
 148:	mov	x1, x20
 14c:	mov	w0, w19
 150:	blr	x2
 154:	b	110 <acc_set_cuda_stream+0x30>
 158:	mov	w0, #0xffffffff            	// #-1
 15c:	b	110 <acc_set_cuda_stream+0x30>
 160:	mov	w0, #0xffffffff            	// #-1
 164:	b	110 <acc_set_cuda_stream+0x30>
 168:	mov	w0, #0xffffffff            	// #-1
 16c:	b	110 <acc_set_cuda_stream+0x30>

priority_queue.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_tree_next_task_1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	cbz	x1, 60 <priority_tree_next_task_1+0x60>
  14:	str	x21, [sp, #32]
  18:	mov	w21, w0
  1c:	sxtw	x20, w0
  20:	add	x20, x20, #0x6
  24:	neg	x20, x20, lsl #4
  28:	ldr	x1, [x19, #32]
  2c:	mov	w0, w21
  30:	bl	0 <priority_tree_next_task_1>
  34:	cbnz	x0, 68 <priority_tree_next_task_1+0x68>
  38:	ldr	x0, [x19, #8]
  3c:	add	x0, x0, x20
  40:	ldr	w1, [x0, #200]
  44:	cmp	w1, #0x2
  48:	b.eq	78 <priority_tree_next_task_1+0x78>  // b.none
  4c:	ldr	x19, [x19, #24]
  50:	cbnz	x19, 28 <priority_tree_next_task_1+0x28>
  54:	mov	x0, x19
  58:	ldr	x21, [sp, #32]
  5c:	b	6c <priority_tree_next_task_1+0x6c>
  60:	mov	x0, x1
  64:	b	6c <priority_tree_next_task_1+0x6c>
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret
  78:	ldr	x21, [sp, #32]
  7c:	b	6c <priority_tree_next_task_1+0x6c>

0000000000000080 <splay_tree_splay>:
  80:	ldr	x2, [x0]
  84:	cbz	x2, b8 <splay_tree_splay+0x38>
  88:	ldr	w4, [x1]
  8c:	ldr	w3, [x2]
  90:	cmp	w4, w3
  94:	b.eq	b8 <splay_tree_splay+0x38>  // b.none
  98:	mov	w7, #0x1                   	// #1
  9c:	mov	w8, #0xffffffff            	// #-1
  a0:	b	164 <splay_tree_splay+0xe4>
  a4:	tbnz	w6, #31, bc <splay_tree_splay+0x3c>
  a8:	ldr	x1, [x3, #24]
  ac:	str	x2, [x3, #24]
  b0:	str	x1, [x2, #32]
  b4:	str	x3, [x0]
  b8:	ret
  bc:	ldr	x1, [x3, #32]
  c0:	str	x2, [x3, #32]
  c4:	str	x1, [x2, #24]
  c8:	str	x3, [x0]
  cc:	b	b8 <splay_tree_splay+0x38>
  d0:	ldr	x5, [x4, #24]
  d4:	str	x3, [x4, #24]
  d8:	str	x5, [x3, #32]
  dc:	str	x4, [x2, #32]
  e0:	ldr	x3, [x4, #24]
  e4:	str	x2, [x4, #24]
  e8:	str	x3, [x2, #32]
  ec:	str	x4, [x0]
  f0:	b	150 <splay_tree_splay+0xd0>
  f4:	cmp	w6, #0x0
  f8:	b.le	150 <splay_tree_splay+0xd0>
  fc:	ldr	x4, [x3, #24]
 100:	ldr	x5, [x4, #32]
 104:	str	x3, [x4, #32]
 108:	str	x5, [x3, #24]
 10c:	str	x4, [x2, #32]
 110:	ldr	x3, [x4, #24]
 114:	str	x2, [x4, #24]
 118:	str	x3, [x2, #32]
 11c:	str	x4, [x0]
 120:	b	150 <splay_tree_splay+0xd0>
 124:	ldr	x4, [x3, #24]
 128:	cbz	x4, a4 <splay_tree_splay+0x24>
 12c:	tbz	w6, #31, f4 <splay_tree_splay+0x74>
 130:	ldr	x5, [x4, #32]
 134:	str	x3, [x4, #32]
 138:	str	x5, [x3, #24]
 13c:	str	x4, [x2, #24]
 140:	ldr	x3, [x4, #32]
 144:	str	x2, [x4, #32]
 148:	str	x3, [x2, #24]
 14c:	str	x4, [x0]
 150:	ldr	x2, [x0]
 154:	ldr	w4, [x1]
 158:	ldr	w3, [x2]
 15c:	cmp	w3, w4
 160:	b.eq	b8 <splay_tree_splay+0x38>  // b.none
 164:	cmp	w3, w4
 168:	b.gt	1c4 <splay_tree_splay+0x144>
 16c:	ldr	x3, [x2, #32]
 170:	mov	w6, w7
 174:	cbz	x3, b8 <splay_tree_splay+0x38>
 178:	ldr	w5, [x3]
 17c:	cmp	w5, w4
 180:	b.eq	a4 <splay_tree_splay+0x24>  // b.none
 184:	b.gt	124 <splay_tree_splay+0xa4>
 188:	ldr	x4, [x3, #32]
 18c:	cbz	x4, a4 <splay_tree_splay+0x24>
 190:	cmp	w6, #0x0
 194:	b.gt	d0 <splay_tree_splay+0x50>
 198:	tbz	w6, #31, 150 <splay_tree_splay+0xd0>
 19c:	ldr	x4, [x3, #32]
 1a0:	ldr	x5, [x4, #24]
 1a4:	str	x3, [x4, #24]
 1a8:	str	x5, [x3, #32]
 1ac:	str	x4, [x2, #24]
 1b0:	ldr	x3, [x4, #32]
 1b4:	str	x2, [x4, #32]
 1b8:	str	x3, [x2, #24]
 1bc:	str	x4, [x0]
 1c0:	b	150 <splay_tree_splay+0xd0>
 1c4:	ldr	x3, [x2, #24]
 1c8:	mov	w6, w8
 1cc:	b	174 <splay_tree_splay+0xf4>

00000000000001d0 <splay_tree_foreach_internal>:
 1d0:	cbz	x0, 228 <splay_tree_foreach_internal+0x58>
 1d4:	stp	x29, x30, [sp, #-48]!
 1d8:	mov	x29, sp
 1dc:	stp	x19, x20, [sp, #16]
 1e0:	str	x21, [sp, #32]
 1e4:	mov	x19, x0
 1e8:	mov	x20, x1
 1ec:	mov	x21, x2
 1f0:	mov	x1, x2
 1f4:	blr	x20
 1f8:	mov	x2, x21
 1fc:	mov	x1, x20
 200:	ldr	x0, [x19, #24]
 204:	bl	1d0 <splay_tree_foreach_internal>
 208:	mov	x2, x21
 20c:	mov	x1, x20
 210:	ldr	x0, [x19, #32]
 214:	bl	1d0 <splay_tree_foreach_internal>
 218:	ldp	x19, x20, [sp, #16]
 21c:	ldr	x21, [sp, #32]
 220:	ldp	x29, x30, [sp], #48
 224:	ret
 228:	ret

000000000000022c <priority_tree_next_task>:
 22c:	stp	x29, x30, [sp, #-48]!
 230:	mov	x29, sp
 234:	stp	x19, x20, [sp, #16]
 238:	stp	x21, x22, [sp, #32]
 23c:	mov	w21, w2
 240:	mov	x20, x3
 244:	mov	x22, x4
 248:	ldr	x1, [x1]
 24c:	bl	0 <priority_tree_next_task_1>
 250:	mov	x19, x0
 254:	cmp	x0, #0x0
 258:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 25c:	b.ne	27c <priority_tree_next_task+0x50>  // b.any
 260:	mov	w0, #0x1                   	// #1
 264:	strb	w0, [x22]
 268:	mov	x0, x19
 26c:	ldp	x19, x20, [sp, #16]
 270:	ldp	x21, x22, [sp, #32]
 274:	ldp	x29, x30, [sp], #48
 278:	ret
 27c:	ldr	x1, [x20]
 280:	mov	w0, w21
 284:	bl	0 <priority_tree_next_task_1>
 288:	cbz	x0, 2bc <priority_tree_next_task+0x90>
 28c:	ldr	w2, [x19, #88]
 290:	ldr	w1, [x0, #88]
 294:	cmp	w2, w1
 298:	b.gt	2bc <priority_tree_next_task+0x90>
 29c:	b.lt	2c8 <priority_tree_next_task+0x9c>  // b.tstop
 2a0:	ldrb	w1, [x0, #207]
 2a4:	cbz	w1, 2b0 <priority_tree_next_task+0x84>
 2a8:	ldrb	w1, [x19, #207]
 2ac:	cbz	w1, 2d4 <priority_tree_next_task+0xa8>
 2b0:	mov	w0, #0x1                   	// #1
 2b4:	strb	w0, [x22]
 2b8:	b	268 <priority_tree_next_task+0x3c>
 2bc:	mov	w0, #0x1                   	// #1
 2c0:	strb	w0, [x22]
 2c4:	b	268 <priority_tree_next_task+0x3c>
 2c8:	strb	wzr, [x22]
 2cc:	mov	x19, x0
 2d0:	b	268 <priority_tree_next_task+0x3c>
 2d4:	strb	wzr, [x22]
 2d8:	mov	x19, x0
 2dc:	b	268 <priority_tree_next_task+0x3c>

00000000000002e0 <prio_splay_tree_insert>:
 2e0:	stp	x29, x30, [sp, #-32]!
 2e4:	mov	x29, sp
 2e8:	stp	x19, x20, [sp, #16]
 2ec:	mov	x20, x0
 2f0:	mov	x19, x1
 2f4:	bl	80 <splay_tree_splay>
 2f8:	ldr	x0, [x20]
 2fc:	cbz	x0, 340 <prio_splay_tree_insert+0x60>
 300:	ldr	w2, [x0]
 304:	ldr	w1, [x19]
 308:	cmp	w2, w1
 30c:	b.eq	334 <prio_splay_tree_insert+0x54>  // b.none
 310:	b.lt	34c <prio_splay_tree_insert+0x6c>  // b.tstop
 314:	str	x0, [x19, #32]
 318:	ldr	x1, [x0, #24]
 31c:	str	x1, [x19, #24]
 320:	str	xzr, [x0, #24]
 324:	str	x19, [x20]
 328:	ldp	x19, x20, [sp, #16]
 32c:	ldp	x29, x30, [sp], #32
 330:	ret
 334:	adrp	x0, 0 <priority_tree_next_task_1>
 338:	add	x0, x0, #0x0
 33c:	bl	0 <gomp_fatal>
 340:	str	xzr, [x19, #32]
 344:	str	xzr, [x19, #24]
 348:	b	324 <prio_splay_tree_insert+0x44>
 34c:	str	x0, [x19, #24]
 350:	ldr	x1, [x0, #32]
 354:	str	x1, [x19, #32]
 358:	str	xzr, [x0, #32]
 35c:	b	324 <prio_splay_tree_insert+0x44>

0000000000000360 <prio_splay_tree_remove>:
 360:	stp	x29, x30, [sp, #-32]!
 364:	mov	x29, sp
 368:	stp	x19, x20, [sp, #16]
 36c:	mov	x19, x0
 370:	mov	x20, x1
 374:	bl	80 <splay_tree_splay>
 378:	ldr	x1, [x19]
 37c:	cbz	x1, 390 <prio_splay_tree_remove+0x30>
 380:	ldr	w2, [x1]
 384:	ldr	w0, [x20]
 388:	cmp	w2, w0
 38c:	b.eq	39c <prio_splay_tree_remove+0x3c>  // b.none
 390:	ldp	x19, x20, [sp, #16]
 394:	ldp	x29, x30, [sp], #32
 398:	ret
 39c:	ldr	x0, [x1, #24]
 3a0:	ldr	x2, [x1, #32]
 3a4:	cbz	x0, 3c4 <prio_splay_tree_remove+0x64>
 3a8:	str	x0, [x19]
 3ac:	cbz	x2, 390 <prio_splay_tree_remove+0x30>
 3b0:	mov	x1, x0
 3b4:	ldr	x0, [x0, #32]
 3b8:	cbnz	x0, 3b0 <prio_splay_tree_remove+0x50>
 3bc:	str	x2, [x1, #32]
 3c0:	b	390 <prio_splay_tree_remove+0x30>
 3c4:	str	x2, [x19]
 3c8:	b	390 <prio_splay_tree_remove+0x30>

00000000000003cc <prio_splay_tree_lookup>:
 3cc:	stp	x29, x30, [sp, #-32]!
 3d0:	mov	x29, sp
 3d4:	stp	x19, x20, [sp, #16]
 3d8:	mov	x19, x0
 3dc:	mov	x20, x1
 3e0:	bl	80 <splay_tree_splay>
 3e4:	ldr	x0, [x19]
 3e8:	cbz	x0, 3fc <prio_splay_tree_lookup+0x30>
 3ec:	ldr	w2, [x0]
 3f0:	ldr	w1, [x20]
 3f4:	cmp	w2, w1
 3f8:	csel	x0, x0, xzr, eq  // eq = none
 3fc:	ldp	x19, x20, [sp, #16]
 400:	ldp	x29, x30, [sp], #32
 404:	ret

0000000000000408 <priority_tree_remove>:
 408:	stp	x29, x30, [sp, #-80]!
 40c:	mov	x29, sp
 410:	stp	x19, x20, [sp, #16]
 414:	str	x21, [sp, #32]
 418:	mov	x21, x1
 41c:	mov	x19, x2
 420:	sub	x0, x2, w0, sxtw #4
 424:	ldur	w0, [x0, #-8]
 428:	ldr	x20, [x1]
 42c:	cbz	x20, 444 <priority_tree_remove+0x3c>
 430:	str	w0, [sp, #56]
 434:	add	x1, sp, #0x38
 438:	mov	x0, x21
 43c:	bl	3cc <prio_splay_tree_lookup>
 440:	mov	x20, x0
 444:	ldr	x1, [x19, #8]
 448:	ldr	x0, [x19]
 44c:	str	x0, [x1]
 450:	ldr	x1, [x19, #8]
 454:	str	x1, [x0, #8]
 458:	ldr	x0, [x20, #8]
 45c:	cmp	x19, x0
 460:	b.eq	474 <priority_tree_remove+0x6c>  // b.none
 464:	ldp	x19, x20, [sp, #16]
 468:	ldr	x21, [sp, #32]
 46c:	ldp	x29, x30, [sp], #80
 470:	ret
 474:	ldr	x0, [x19]
 478:	cmp	x19, x0
 47c:	b.eq	488 <priority_tree_remove+0x80>  // b.none
 480:	str	x0, [x20, #8]
 484:	b	464 <priority_tree_remove+0x5c>
 488:	str	xzr, [x20, #8]
 48c:	mov	x1, x20
 490:	mov	x0, x21
 494:	bl	360 <prio_splay_tree_remove>
 498:	mov	x0, x20
 49c:	bl	0 <free>
 4a0:	b	464 <priority_tree_remove+0x5c>

00000000000004a4 <prio_splay_tree_foreach>:
 4a4:	stp	x29, x30, [sp, #-16]!
 4a8:	mov	x29, sp
 4ac:	ldr	x0, [x0]
 4b0:	bl	1d0 <splay_tree_foreach_internal>
 4b4:	ldp	x29, x30, [sp], #16
 4b8:	ret

affinity-fmt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_display_repeat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x5, x1
  14:	mov	x20, x2
  18:	mov	x19, x4
  1c:	ldr	x21, [x2]
  20:	cmp	x1, #0x0
  24:	ccmp	x21, x1, #0x2, ne  // ne = any
  28:	b.cc	50 <gomp_display_repeat+0x50>  // b.lo, b.ul, b.last
  2c:	ldr	x4, [x20]
  30:	add	x4, x19, x4
  34:	str	x4, [x20]
  38:	cmp	x4, x21
  3c:	b.cc	6c <gomp_display_repeat+0x6c>  // b.lo, b.ul, b.last
  40:	ldp	x19, x20, [sp, #16]
  44:	ldr	x21, [sp, #32]
  48:	ldp	x29, x30, [sp], #48
  4c:	ret
  50:	and	w1, w3, #0xff
  54:	sub	x5, x5, x21
  58:	cmp	x5, x4
  5c:	csel	x2, x5, x4, ls  // ls = plast
  60:	add	x0, x0, x21
  64:	bl	0 <memset>
  68:	b	2c <gomp_display_repeat+0x2c>
  6c:	adrp	x0, 0 <gomp_display_repeat>
  70:	add	x0, x0, #0x0
  74:	bl	0 <gomp_fatal>

0000000000000078 <gomp_print_string>:
  78:	stp	x29, x30, [sp, #-16]!
  7c:	mov	x29, sp
  80:	adrp	x2, 0 <stderr>
  84:	ldr	x3, [x2]
  88:	mov	x2, x1
  8c:	mov	x1, #0x1                   	// #1
  90:	bl	0 <fwrite>
  94:	ldp	x29, x30, [sp], #16
  98:	ret

000000000000009c <gomp_set_affinity_format>:
  9c:	stp	x29, x30, [sp, #-48]!
  a0:	mov	x29, sp
  a4:	stp	x19, x20, [sp, #16]
  a8:	mov	x20, x0
  ac:	mov	x19, x1
  b0:	adrp	x0, 0 <gomp_affinity_format_len>
  b4:	ldr	x0, [x0]
  b8:	cmp	x0, x1
  bc:	b.hi	11c <gomp_set_affinity_format+0x80>  // b.pmore
  c0:	str	x21, [sp, #32]
  c4:	cbz	x0, 134 <gomp_set_affinity_format+0x98>
  c8:	add	x1, x1, #0x1
  cc:	adrp	x0, 0 <gomp_affinity_format_var>
  d0:	ldr	x0, [x0]
  d4:	bl	0 <gomp_realloc>
  d8:	mov	x21, x0
  dc:	mov	x2, x19
  e0:	mov	x1, x20
  e4:	mov	x0, x21
  e8:	bl	0 <memcpy>
  ec:	adrp	x0, 0 <gomp_affinity_format_var>
  f0:	str	x21, [x0]
  f4:	add	x0, x19, #0x1
  f8:	adrp	x1, 0 <gomp_affinity_format_len>
  fc:	str	x0, [x1]
 100:	ldr	x21, [sp, #32]
 104:	adrp	x0, 0 <gomp_affinity_format_var>
 108:	ldr	x0, [x0]
 10c:	strb	wzr, [x0, x19]
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x29, x30, [sp], #48
 118:	ret
 11c:	mov	x2, x1
 120:	mov	x1, x20
 124:	adrp	x0, 0 <gomp_affinity_format_var>
 128:	ldr	x0, [x0]
 12c:	bl	0 <memcpy>
 130:	b	104 <gomp_set_affinity_format+0x68>
 134:	add	x0, x1, #0x1
 138:	bl	0 <gomp_malloc>
 13c:	mov	x21, x0
 140:	b	dc <gomp_set_affinity_format+0x40>

0000000000000144 <omp_set_affinity_format>:
 144:	stp	x29, x30, [sp, #-32]!
 148:	mov	x29, sp
 14c:	str	x19, [sp, #16]
 150:	mov	x19, x0
 154:	bl	0 <strlen>
 158:	mov	x1, x0
 15c:	mov	x0, x19
 160:	bl	9c <gomp_set_affinity_format>
 164:	ldr	x19, [sp, #16]
 168:	ldp	x29, x30, [sp], #32
 16c:	ret

0000000000000170 <omp_get_affinity_format>:
 170:	stp	x29, x30, [sp, #-48]!
 174:	mov	x29, sp
 178:	stp	x19, x20, [sp, #16]
 17c:	stp	x21, x22, [sp, #32]
 180:	mov	x21, x0
 184:	mov	x19, x1
 188:	adrp	x0, 0 <gomp_affinity_format_var>
 18c:	ldr	x22, [x0]
 190:	mov	x0, x22
 194:	bl	0 <strlen>
 198:	mov	x20, x0
 19c:	cbz	x19, 1b8 <omp_get_affinity_format+0x48>
 1a0:	cmp	x0, x19
 1a4:	b.cs	1cc <omp_get_affinity_format+0x5c>  // b.hs, b.nlast
 1a8:	add	x2, x0, #0x1
 1ac:	mov	x1, x22
 1b0:	mov	x0, x21
 1b4:	bl	0 <memcpy>
 1b8:	mov	x0, x20
 1bc:	ldp	x19, x20, [sp, #16]
 1c0:	ldp	x21, x22, [sp, #32]
 1c4:	ldp	x29, x30, [sp], #48
 1c8:	ret
 1cc:	sub	x19, x19, #0x1
 1d0:	mov	x2, x19
 1d4:	mov	x1, x22
 1d8:	mov	x0, x21
 1dc:	bl	0 <memcpy>
 1e0:	strb	wzr, [x21, x19]
 1e4:	b	1b8 <omp_get_affinity_format+0x48>

00000000000001e8 <gomp_display_string>:
 1e8:	stp	x29, x30, [sp, #-48]!
 1ec:	mov	x29, sp
 1f0:	stp	x19, x20, [sp, #16]
 1f4:	str	x21, [sp, #32]
 1f8:	mov	x20, x2
 1fc:	mov	x19, x4
 200:	ldr	x21, [x2]
 204:	cmp	x1, #0x0
 208:	ccmp	x21, x1, #0x2, ne  // ne = any
 20c:	b.cc	234 <gomp_display_string+0x4c>  // b.lo, b.ul, b.last
 210:	ldr	x4, [x20]
 214:	add	x4, x19, x4
 218:	str	x4, [x20]
 21c:	cmp	x4, x21
 220:	b.cc	250 <gomp_display_string+0x68>  // b.lo, b.ul, b.last
 224:	ldp	x19, x20, [sp, #16]
 228:	ldr	x21, [sp, #32]
 22c:	ldp	x29, x30, [sp], #48
 230:	ret
 234:	sub	x5, x1, x21
 238:	cmp	x5, x4
 23c:	csel	x2, x5, x4, ls  // ls = plast
 240:	mov	x1, x3
 244:	add	x0, x0, x21
 248:	bl	0 <memcpy>
 24c:	b	210 <gomp_display_string+0x28>
 250:	adrp	x0, 0 <gomp_display_repeat>
 254:	add	x0, x0, #0x0
 258:	bl	0 <gomp_fatal>

000000000000025c <gomp_display_string_len>:
 25c:	stp	x29, x30, [sp, #-64]!
 260:	mov	x29, sp
 264:	stp	x19, x20, [sp, #16]
 268:	stp	x21, x22, [sp, #32]
 26c:	stp	x23, x24, [sp, #48]
 270:	mov	x21, x0
 274:	mov	x22, x1
 278:	mov	x23, x2
 27c:	mov	x24, x5
 280:	mov	x20, x6
 284:	cmp	x4, x6
 288:	ccmn	x4, #0x1, #0x4, hi  // hi = pmore
 28c:	b.eq	2d4 <gomp_display_string_len+0x78>  // b.none
 290:	and	w3, w3, #0xff
 294:	mov	x19, x4
 298:	cbz	w3, 2e4 <gomp_display_string_len+0x88>
 29c:	sub	x4, x4, x6
 2a0:	mov	w3, #0x20                  	// #32
 2a4:	bl	0 <gomp_display_repeat>
 2a8:	mov	x4, x20
 2ac:	mov	x3, x24
 2b0:	mov	x2, x23
 2b4:	mov	x1, x22
 2b8:	mov	x0, x21
 2bc:	bl	1e8 <gomp_display_string>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldp	x21, x22, [sp, #32]
 2c8:	ldp	x23, x24, [sp, #48]
 2cc:	ldp	x29, x30, [sp], #64
 2d0:	ret
 2d4:	mov	x4, x6
 2d8:	mov	x3, x5
 2dc:	bl	1e8 <gomp_display_string>
 2e0:	b	2c0 <gomp_display_string_len+0x64>
 2e4:	mov	x4, x6
 2e8:	mov	x3, x5
 2ec:	bl	1e8 <gomp_display_string>
 2f0:	sub	x4, x19, x20
 2f4:	mov	w3, #0x20                  	// #32
 2f8:	mov	x2, x23
 2fc:	mov	x1, x22
 300:	mov	x0, x21
 304:	bl	0 <gomp_display_repeat>
 308:	b	2c0 <gomp_display_string_len+0x64>

000000000000030c <gomp_display_num>:
 30c:	stp	x29, x30, [sp, #-80]!
 310:	mov	x29, sp
 314:	stp	x19, x20, [sp, #16]
 318:	stp	x21, x22, [sp, #32]
 31c:	stp	x23, x24, [sp, #48]
 320:	stp	x25, x26, [sp, #64]
 324:	mov	x22, x0
 328:	mov	x23, x1
 32c:	mov	x24, x2
 330:	and	w25, w3, #0xff
 334:	and	w26, w4, #0xff
 338:	mov	x21, x5
 33c:	mov	x19, x6
 340:	mov	x0, x6
 344:	bl	0 <strlen>
 348:	mov	x20, x0
 34c:	cmp	x0, x21
 350:	ccmn	x21, #0x1, #0x4, cc  // cc = lo, ul, last
 354:	b.eq	3d8 <gomp_display_num+0xcc>  // b.none
 358:	cbz	w25, 470 <gomp_display_num+0x164>
 35c:	ldrb	w0, [x19]
 360:	cmp	w0, #0x2d
 364:	b.eq	3f4 <gomp_display_num+0xe8>  // b.none
 368:	cmp	w0, #0x30
 36c:	b.eq	410 <gomp_display_num+0x104>  // b.none
 370:	sub	x4, x21, x20
 374:	mov	w3, #0x30                  	// #48
 378:	mov	x2, x24
 37c:	mov	x1, x23
 380:	mov	x0, x22
 384:	bl	0 <gomp_display_repeat>
 388:	ldrb	w0, [x19]
 38c:	cmp	w0, #0x2d
 390:	b.eq	438 <gomp_display_num+0x12c>  // b.none
 394:	cmp	w0, #0x30
 398:	b.ne	3a8 <gomp_display_num+0x9c>  // b.any
 39c:	ldrb	w0, [x19, #1]
 3a0:	cmp	w0, #0x78
 3a4:	b.eq	454 <gomp_display_num+0x148>  // b.none
 3a8:	mov	x4, x20
 3ac:	mov	x3, x19
 3b0:	mov	x2, x24
 3b4:	mov	x1, x23
 3b8:	mov	x0, x22
 3bc:	bl	1e8 <gomp_display_string>
 3c0:	ldp	x19, x20, [sp, #16]
 3c4:	ldp	x21, x22, [sp, #32]
 3c8:	ldp	x23, x24, [sp, #48]
 3cc:	ldp	x25, x26, [sp, #64]
 3d0:	ldp	x29, x30, [sp], #80
 3d4:	ret
 3d8:	mov	x4, x0
 3dc:	mov	x3, x19
 3e0:	mov	x2, x24
 3e4:	mov	x1, x23
 3e8:	mov	x0, x22
 3ec:	bl	1e8 <gomp_display_string>
 3f0:	b	3c0 <gomp_display_num+0xb4>
 3f4:	mov	x4, #0x1                   	// #1
 3f8:	mov	x3, x19
 3fc:	mov	x2, x24
 400:	mov	x1, x23
 404:	mov	x0, x22
 408:	bl	1e8 <gomp_display_string>
 40c:	b	370 <gomp_display_num+0x64>
 410:	ldrb	w0, [x19, #1]
 414:	cmp	w0, #0x78
 418:	b.ne	370 <gomp_display_num+0x64>  // b.any
 41c:	mov	x4, #0x2                   	// #2
 420:	mov	x3, x19
 424:	mov	x2, x24
 428:	mov	x1, x23
 42c:	mov	x0, x22
 430:	bl	1e8 <gomp_display_string>
 434:	b	370 <gomp_display_num+0x64>
 438:	sub	x4, x20, #0x1
 43c:	add	x3, x19, #0x1
 440:	mov	x2, x24
 444:	mov	x1, x23
 448:	mov	x0, x22
 44c:	bl	1e8 <gomp_display_string>
 450:	b	3c0 <gomp_display_num+0xb4>
 454:	sub	x4, x20, #0x2
 458:	add	x3, x19, #0x2
 45c:	mov	x2, x24
 460:	mov	x1, x23
 464:	mov	x0, x22
 468:	bl	1e8 <gomp_display_string>
 46c:	b	3c0 <gomp_display_num+0xb4>
 470:	cbz	w26, 4a8 <gomp_display_num+0x19c>
 474:	sub	x4, x21, x0
 478:	mov	w3, #0x20                  	// #32
 47c:	mov	x2, x24
 480:	mov	x1, x23
 484:	mov	x0, x22
 488:	bl	0 <gomp_display_repeat>
 48c:	mov	x4, x20
 490:	mov	x3, x19
 494:	mov	x2, x24
 498:	mov	x1, x23
 49c:	mov	x0, x22
 4a0:	bl	1e8 <gomp_display_string>
 4a4:	b	3c0 <gomp_display_num+0xb4>
 4a8:	mov	x4, x0
 4ac:	mov	x3, x19
 4b0:	mov	x2, x24
 4b4:	mov	x1, x23
 4b8:	mov	x0, x22
 4bc:	bl	1e8 <gomp_display_string>
 4c0:	sub	x4, x21, x20
 4c4:	mov	w3, #0x20                  	// #32
 4c8:	mov	x2, x24
 4cc:	mov	x1, x23
 4d0:	mov	x0, x22
 4d4:	bl	0 <gomp_display_repeat>
 4d8:	b	3c0 <gomp_display_num+0xb4>

00000000000004dc <gomp_display_affinity>:
 4dc:	stp	x29, x30, [sp, #-400]!
 4e0:	mov	x29, sp
 4e4:	stp	x19, x20, [sp, #16]
 4e8:	stp	x21, x22, [sp, #32]
 4ec:	stp	x23, x24, [sp, #48]
 4f0:	stp	x25, x26, [sp, #64]
 4f4:	stp	x27, x28, [sp, #80]
 4f8:	mov	x27, x0
 4fc:	mov	x26, x1
 500:	mov	x19, x2
 504:	str	x3, [sp, #120]
 508:	str	x4, [sp, #104]
 50c:	str	xzr, [sp, #392]
 510:	adrp	x0, 0 <gomp_display_repeat>
 514:	add	x0, x0, #0x0
 518:	str	x0, [sp, #96]
 51c:	add	x24, sp, #0x88
 520:	sub	w0, w5, #0x1
 524:	str	w0, [sp, #116]
 528:	b	740 <gomp_display_affinity+0x264>
 52c:	mov	x0, x19
 530:	bl	0 <strlen>
 534:	add	x20, x19, x0
 538:	b	754 <gomp_display_affinity+0x278>
 53c:	mov	x4, #0x1                   	// #1
 540:	adrp	x3, 0 <gomp_display_repeat>
 544:	add	x3, x3, #0x0
 548:	add	x2, sp, #0x188
 54c:	mov	x1, x26
 550:	mov	x0, x27
 554:	bl	1e8 <gomp_display_string>
 558:	add	x19, x20, #0x2
 55c:	b	740 <gomp_display_affinity+0x264>
 560:	add	x19, x20, #0x2
 564:	ldrb	w0, [x20, #2]
 568:	cmp	w0, #0x2e
 56c:	b.ne	578 <gomp_display_affinity+0x9c>  // b.any
 570:	mov	w23, #0x1                   	// #1
 574:	b	798 <gomp_display_affinity+0x2bc>
 578:	adrp	x0, 0 <gomp_display_repeat>
 57c:	add	x0, x0, #0x0
 580:	bl	0 <gomp_fatal>
 584:	add	x0, x19, #0x1
 588:	ldrb	w1, [x19, #1]
 58c:	sub	w1, w1, #0x31
 590:	and	w1, w1, #0xff
 594:	cmp	w1, #0x8
 598:	b.hi	5c8 <gomp_display_affinity+0xec>  // b.pmore
 59c:	mov	w1, #0x1                   	// #1
 5a0:	str	w1, [sp, #112]
 5a4:	mov	w2, #0xa                   	// #10
 5a8:	mov	x1, x24
 5ac:	bl	0 <strtoul>
 5b0:	mov	x25, x0
 5b4:	ldr	x19, [sp, #136]
 5b8:	b	7c0 <gomp_display_affinity+0x2e4>
 5bc:	mov	x0, x19
 5c0:	str	wzr, [sp, #112]
 5c4:	b	5a4 <gomp_display_affinity+0xc8>
 5c8:	adrp	x0, 0 <gomp_display_repeat>
 5cc:	add	x0, x0, #0x0
 5d0:	bl	0 <gomp_fatal>
 5d4:	adrp	x20, 0 <gomp_display_repeat>
 5d8:	add	x20, x20, #0x0
 5dc:	mov	w22, #0x0                   	// #0
 5e0:	add	x28, x19, #0x1
 5e4:	b	5f8 <gomp_display_affinity+0x11c>
 5e8:	add	w22, w22, #0x1
 5ec:	add	x20, x20, #0x14
 5f0:	cmp	w22, #0xa
 5f4:	b.eq	650 <gomp_display_affinity+0x174>  // b.none
 5f8:	ldrb	w21, [x20, #18]
 5fc:	mov	x2, x21
 600:	mov	x1, x20
 604:	mov	x0, x28
 608:	bl	0 <strncmp>
 60c:	cbnz	w0, 5e8 <gomp_display_affinity+0x10c>
 610:	add	x21, x21, #0x1
 614:	add	x2, x19, x21
 618:	ldrb	w0, [x19, x21]
 61c:	cmp	w0, #0x7d
 620:	b.ne	5e8 <gomp_display_affinity+0x10c>  // b.any
 624:	sbfiz	x0, x22, #2, #32
 628:	add	x22, x0, w22, sxtw
 62c:	adrp	x0, 0 <gomp_display_repeat>
 630:	add	x0, x0, #0x0
 634:	add	x22, x0, x22, lsl #2
 638:	ldrb	w1, [x22, #19]
 63c:	cmp	w1, #0x7b
 640:	b.eq	64c <gomp_display_affinity+0x170>  // b.none
 644:	mov	x19, x2
 648:	b	7cc <gomp_display_affinity+0x2f0>
 64c:	mov	x19, x2
 650:	add	x19, x19, #0x1
 654:	mov	w1, #0x7d                  	// #125
 658:	mov	x0, x19
 65c:	bl	0 <strchr>
 660:	cbz	x0, 678 <gomp_display_affinity+0x19c>
 664:	mov	x2, x19
 668:	sub	w1, w0, w19
 66c:	adrp	x0, 0 <gomp_display_repeat>
 670:	add	x0, x0, #0x0
 674:	bl	0 <gomp_fatal>
 678:	mov	x1, x19
 67c:	adrp	x0, 0 <gomp_display_repeat>
 680:	add	x0, x0, #0x0
 684:	bl	0 <gomp_fatal>
 688:	cmp	w1, #0x41
 68c:	b.eq	918 <gomp_display_affinity+0x43c>  // b.none
 690:	cmp	w1, #0x48
 694:	b.ne	9e0 <gomp_display_affinity+0x504>  // b.any
 698:	mov	x21, #0x100                 	// #256
 69c:	mov	x20, x24
 6a0:	mov	x23, #0x200                 	// #512
 6a4:	sub	x22, x21, #0x1
 6a8:	strb	wzr, [x20, x22]
 6ac:	mov	x1, x22
 6b0:	mov	x0, x20
 6b4:	bl	0 <gethostname>
 6b8:	cbnz	w0, 6cc <gomp_display_affinity+0x1f0>
 6bc:	mov	x0, x20
 6c0:	bl	0 <strlen>
 6c4:	cmp	x22, x0
 6c8:	b.hi	89c <gomp_display_affinity+0x3c0>  // b.pmore
 6cc:	cmp	x21, #0x100, lsl #12
 6d0:	b.eq	8e0 <gomp_display_affinity+0x404>  // b.none
 6d4:	lsl	x21, x21, #1
 6d8:	cmp	x21, #0x200
 6dc:	b.eq	8d0 <gomp_display_affinity+0x3f4>  // b.none
 6e0:	mov	x1, x21
 6e4:	mov	x0, x20
 6e8:	bl	0 <gomp_realloc>
 6ec:	mov	x20, x0
 6f0:	b	6a4 <gomp_display_affinity+0x1c8>
 6f4:	cmp	w1, #0x6e
 6f8:	b.eq	860 <gomp_display_affinity+0x384>  // b.none
 6fc:	b.ls	800 <gomp_display_affinity+0x324>  // b.plast
 700:	cmp	w1, #0x74
 704:	b.ne	9e0 <gomp_display_affinity+0x504>  // b.any
 708:	bl	0 <omp_get_team_num>
 70c:	mov	w2, w0
 710:	ldr	x1, [sp, #96]
 714:	mov	x0, x24
 718:	bl	0 <sprintf>
 71c:	mov	x6, x24
 720:	mov	x5, x25
 724:	ldrb	w4, [sp, #112]
 728:	mov	w3, w23
 72c:	add	x2, sp, #0x188
 730:	mov	x1, x26
 734:	mov	x0, x27
 738:	bl	30c <gomp_display_num>
 73c:	add	x19, x19, #0x1
 740:	mov	w1, #0x25                  	// #37
 744:	mov	x0, x19
 748:	bl	0 <strchr>
 74c:	mov	x20, x0
 750:	cbz	x0, 52c <gomp_display_affinity+0x50>
 754:	cmp	x19, x20
 758:	b.eq	774 <gomp_display_affinity+0x298>  // b.none
 75c:	sub	x4, x20, x19
 760:	mov	x3, x19
 764:	add	x2, sp, #0x188
 768:	mov	x1, x26
 76c:	mov	x0, x27
 770:	bl	1e8 <gomp_display_string>
 774:	ldrb	w0, [x20]
 778:	cbz	w0, 9ec <gomp_display_affinity+0x510>
 77c:	ldrb	w0, [x20, #1]
 780:	cmp	w0, #0x25
 784:	b.eq	53c <gomp_display_affinity+0x60>  // b.none
 788:	add	x19, x20, #0x1
 78c:	mov	w23, #0x0                   	// #0
 790:	cmp	w0, #0x30
 794:	b.eq	560 <gomp_display_affinity+0x84>  // b.none
 798:	ldrb	w0, [x19]
 79c:	cmp	w0, #0x2e
 7a0:	b.eq	584 <gomp_display_affinity+0xa8>  // b.none
 7a4:	sub	w0, w0, #0x31
 7a8:	and	w0, w0, #0xff
 7ac:	cmp	w0, #0x8
 7b0:	b.ls	5bc <gomp_display_affinity+0xe0>  // b.plast
 7b4:	cbnz	w23, 5c8 <gomp_display_affinity+0xec>
 7b8:	str	w23, [sp, #112]
 7bc:	mov	x25, #0xffffffffffffffff    	// #-1
 7c0:	ldrb	w1, [x19]
 7c4:	cmp	w1, #0x7b
 7c8:	b.eq	5d4 <gomp_display_affinity+0xf8>  // b.none
 7cc:	cmp	w1, #0x54
 7d0:	b.eq	848 <gomp_display_affinity+0x36c>  // b.none
 7d4:	b.hi	6f4 <gomp_display_affinity+0x218>  // b.pmore
 7d8:	cmp	w1, #0x4c
 7dc:	b.eq	854 <gomp_display_affinity+0x378>  // b.none
 7e0:	b.ls	688 <gomp_display_affinity+0x1ac>  // b.plast
 7e4:	cmp	w1, #0x4e
 7e8:	b.eq	86c <gomp_display_affinity+0x390>  // b.none
 7ec:	cmp	w1, #0x50
 7f0:	b.ne	9e0 <gomp_display_affinity+0x504>  // b.any
 7f4:	bl	0 <getpid>
 7f8:	mov	w2, w0
 7fc:	b	710 <gomp_display_affinity+0x234>
 800:	cmp	w1, #0x61
 804:	b.eq	884 <gomp_display_affinity+0x3a8>  // b.none
 808:	cmp	w1, #0x69
 80c:	b.ne	9e0 <gomp_display_affinity+0x504>  // b.any
 810:	ldr	x2, [sp, #120]
 814:	adrp	x1, 0 <gomp_display_repeat>
 818:	add	x1, x1, #0x0
 81c:	mov	x0, x24
 820:	bl	0 <sprintf>
 824:	mov	x6, x24
 828:	mov	x5, x25
 82c:	ldrb	w4, [sp, #112]
 830:	mov	w3, w23
 834:	add	x2, sp, #0x188
 838:	mov	x1, x26
 83c:	mov	x0, x27
 840:	bl	30c <gomp_display_num>
 844:	b	73c <gomp_display_affinity+0x260>
 848:	bl	0 <omp_get_num_teams>
 84c:	mov	w2, w0
 850:	b	710 <gomp_display_affinity+0x234>
 854:	ldr	x0, [sp, #104]
 858:	ldr	w2, [x0, #28]
 85c:	b	710 <gomp_display_affinity+0x234>
 860:	ldr	x0, [sp, #104]
 864:	ldr	w2, [x0, #24]
 868:	b	710 <gomp_display_affinity+0x234>
 86c:	ldr	x0, [sp, #104]
 870:	ldr	x0, [x0]
 874:	mov	w2, #0x1                   	// #1
 878:	cbz	x0, 710 <gomp_display_affinity+0x234>
 87c:	ldr	w2, [x0]
 880:	b	710 <gomp_display_affinity+0x234>
 884:	ldr	x0, [sp, #104]
 888:	ldr	x0, [x0]
 88c:	mov	w2, #0xffffffff            	// #-1
 890:	cbz	x0, 710 <gomp_display_affinity+0x234>
 894:	ldr	w2, [x0, #32]
 898:	b	710 <gomp_display_affinity+0x234>
 89c:	mov	x6, x0
 8a0:	mov	x5, x20
 8a4:	mov	x4, x25
 8a8:	ldrb	w3, [sp, #112]
 8ac:	add	x2, sp, #0x188
 8b0:	mov	x1, x26
 8b4:	mov	x0, x27
 8b8:	bl	25c <gomp_display_string_len>
 8bc:	cmp	x20, x24
 8c0:	b.eq	73c <gomp_display_affinity+0x260>  // b.none
 8c4:	mov	x0, x20
 8c8:	bl	0 <free>
 8cc:	b	73c <gomp_display_affinity+0x260>
 8d0:	mov	x0, x23
 8d4:	bl	0 <gomp_malloc>
 8d8:	mov	x20, x0
 8dc:	b	6a4 <gomp_display_affinity+0x1c8>
 8e0:	cmp	x20, x24
 8e4:	b.eq	8f0 <gomp_display_affinity+0x414>  // b.none
 8e8:	mov	x0, x20
 8ec:	bl	0 <free>
 8f0:	mov	x6, #0x4                   	// #4
 8f4:	adrp	x5, 0 <gomp_display_repeat>
 8f8:	add	x5, x5, #0x0
 8fc:	mov	x4, x25
 900:	ldrb	w3, [sp, #112]
 904:	add	x2, sp, #0x188
 908:	mov	x1, x26
 90c:	mov	x0, x27
 910:	bl	25c <gomp_display_string_len>
 914:	b	73c <gomp_display_affinity+0x260>
 918:	cmn	x25, #0x1
 91c:	b.eq	964 <gomp_display_affinity+0x488>  // b.none
 920:	ldr	w0, [sp, #112]
 924:	cbz	w0, 998 <gomp_display_affinity+0x4bc>
 928:	str	xzr, [sp, #136]
 92c:	ldr	w3, [sp, #116]
 930:	mov	x2, x24
 934:	mov	x1, #0x0                   	// #0
 938:	mov	x0, #0x0                   	// #0
 93c:	bl	0 <gomp_display_affinity_place>
 940:	ldr	x4, [sp, #136]
 944:	cmp	x4, x25
 948:	b.cc	97c <gomp_display_affinity+0x4a0>  // b.lo, b.ul, b.last
 94c:	ldr	w3, [sp, #116]
 950:	add	x2, sp, #0x188
 954:	mov	x1, x26
 958:	mov	x0, x27
 95c:	bl	0 <gomp_display_affinity_place>
 960:	b	73c <gomp_display_affinity+0x260>
 964:	ldr	w3, [sp, #116]
 968:	add	x2, sp, #0x188
 96c:	mov	x1, x26
 970:	mov	x0, x27
 974:	bl	0 <gomp_display_affinity_place>
 978:	b	73c <gomp_display_affinity+0x260>
 97c:	sub	x4, x25, x4
 980:	mov	w3, #0x20                  	// #32
 984:	add	x2, sp, #0x188
 988:	mov	x1, x26
 98c:	mov	x0, x27
 990:	bl	0 <gomp_display_repeat>
 994:	b	94c <gomp_display_affinity+0x470>
 998:	ldr	x20, [sp, #392]
 99c:	ldr	w3, [sp, #116]
 9a0:	add	x2, sp, #0x188
 9a4:	mov	x1, x26
 9a8:	mov	x0, x27
 9ac:	bl	0 <gomp_display_affinity_place>
 9b0:	ldr	x4, [sp, #392]
 9b4:	sub	x0, x4, x20
 9b8:	cmp	x0, x25
 9bc:	b.cs	73c <gomp_display_affinity+0x260>  // b.hs, b.nlast
 9c0:	sub	x4, x20, x4
 9c4:	add	x4, x4, x25
 9c8:	mov	w3, #0x20                  	// #32
 9cc:	add	x2, sp, #0x188
 9d0:	mov	x1, x26
 9d4:	mov	x0, x27
 9d8:	bl	0 <gomp_display_repeat>
 9dc:	b	73c <gomp_display_affinity+0x260>
 9e0:	adrp	x0, 0 <gomp_display_repeat>
 9e4:	add	x0, x0, #0x0
 9e8:	bl	0 <gomp_fatal>
 9ec:	ldr	x0, [sp, #392]
 9f0:	ldp	x19, x20, [sp, #16]
 9f4:	ldp	x21, x22, [sp, #32]
 9f8:	ldp	x23, x24, [sp, #48]
 9fc:	ldp	x25, x26, [sp, #64]
 a00:	ldp	x27, x28, [sp, #80]
 a04:	ldp	x29, x30, [sp], #400
 a08:	ret

0000000000000a0c <gomp_ialias_omp_capture_affinity>:
 a0c:	stp	x29, x30, [sp, #-48]!
 a10:	mov	x29, sp
 a14:	stp	x19, x20, [sp, #16]
 a18:	str	x21, [sp, #32]
 a1c:	mov	x21, x0
 a20:	mov	x20, x1
 a24:	cbz	x2, a34 <gomp_ialias_omp_capture_affinity+0x28>
 a28:	mov	x19, x2
 a2c:	ldrb	w0, [x2]
 a30:	cbnz	w0, a3c <gomp_ialias_omp_capture_affinity+0x30>
 a34:	adrp	x0, 0 <gomp_affinity_format_var>
 a38:	ldr	x19, [x0]
 a3c:	bl	0 <pthread_self>
 a40:	adrp	x4, 0 <gomp_tls_data>
 a44:	ldr	x4, [x4]
 a48:	mrs	x2, tpidr_el0
 a4c:	add	x4, x2, x4
 a50:	ldr	w5, [x4, #92]
 a54:	add	x4, x4, #0x10
 a58:	mov	x3, x0
 a5c:	mov	x2, x19
 a60:	mov	x1, x20
 a64:	mov	x0, x21
 a68:	bl	4dc <gomp_display_affinity>
 a6c:	cbz	x20, a80 <gomp_ialias_omp_capture_affinity+0x74>
 a70:	cmp	x20, x0
 a74:	b.hi	a90 <gomp_ialias_omp_capture_affinity+0x84>  // b.pmore
 a78:	add	x20, x21, x20
 a7c:	sturb	wzr, [x20, #-1]
 a80:	ldp	x19, x20, [sp, #16]
 a84:	ldr	x21, [sp, #32]
 a88:	ldp	x29, x30, [sp], #48
 a8c:	ret
 a90:	strb	wzr, [x21, x0]
 a94:	b	a80 <gomp_ialias_omp_capture_affinity+0x74>

0000000000000a98 <omp_display_affinity>:
 a98:	sub	sp, sp, #0x230
 a9c:	stp	x29, x30, [sp]
 aa0:	mov	x29, sp
 aa4:	stp	x19, x20, [sp, #16]
 aa8:	mov	x20, x0
 aac:	mov	x2, x0
 ab0:	mov	x1, #0x200                 	// #512
 ab4:	add	x0, sp, #0x30
 ab8:	bl	a0c <gomp_ialias_omp_capture_affinity>
 abc:	mov	x19, x0
 ac0:	cmp	x0, #0x1ff
 ac4:	b.ls	b18 <omp_display_affinity+0x80>  // b.plast
 ac8:	stp	x21, x22, [sp, #32]
 acc:	add	x22, x0, #0x1
 ad0:	mov	x0, x22
 ad4:	bl	0 <gomp_malloc>
 ad8:	mov	x21, x0
 adc:	mov	x2, x20
 ae0:	mov	x1, x22
 ae4:	bl	a0c <gomp_ialias_omp_capture_affinity>
 ae8:	mov	w0, #0xa                   	// #10
 aec:	strb	w0, [x21, x19]
 af0:	mov	x1, x22
 af4:	mov	x0, x21
 af8:	bl	78 <gomp_print_string>
 afc:	mov	x0, x21
 b00:	bl	0 <free>
 b04:	ldp	x21, x22, [sp, #32]
 b08:	ldp	x19, x20, [sp, #16]
 b0c:	ldp	x29, x30, [sp]
 b10:	add	sp, sp, #0x230
 b14:	ret
 b18:	add	x0, sp, #0x30
 b1c:	mov	w1, #0xa                   	// #10
 b20:	strb	w1, [x0, x19]
 b24:	add	x1, x19, #0x1
 b28:	bl	78 <gomp_print_string>
 b2c:	b	b08 <omp_display_affinity+0x70>

0000000000000b30 <gomp_display_affinity_thread>:
 b30:	sub	sp, sp, #0x240
 b34:	stp	x29, x30, [sp]
 b38:	mov	x29, sp
 b3c:	stp	x19, x20, [sp, #16]
 b40:	stp	x21, x22, [sp, #32]
 b44:	stp	x23, x24, [sp, #48]
 b48:	mov	x21, x0
 b4c:	mov	x22, x1
 b50:	mov	w23, w2
 b54:	mov	w5, w2
 b58:	mov	x4, x1
 b5c:	mov	x3, x0
 b60:	adrp	x0, 0 <gomp_affinity_format_var>
 b64:	ldr	x2, [x0]
 b68:	mov	x1, #0x200                 	// #512
 b6c:	add	x0, sp, #0x40
 b70:	bl	4dc <gomp_display_affinity>
 b74:	mov	x19, x0
 b78:	cmp	x0, #0x1ff
 b7c:	b.hi	bac <gomp_display_affinity_thread+0x7c>  // b.pmore
 b80:	add	x0, sp, #0x40
 b84:	mov	w1, #0xa                   	// #10
 b88:	strb	w1, [x0, x19]
 b8c:	add	x1, x19, #0x1
 b90:	bl	78 <gomp_print_string>
 b94:	ldp	x19, x20, [sp, #16]
 b98:	ldp	x21, x22, [sp, #32]
 b9c:	ldp	x23, x24, [sp, #48]
 ba0:	ldp	x29, x30, [sp]
 ba4:	add	sp, sp, #0x240
 ba8:	ret
 bac:	add	x24, x0, #0x1
 bb0:	mov	x0, x24
 bb4:	bl	0 <gomp_malloc>
 bb8:	mov	x20, x0
 bbc:	mov	w5, w23
 bc0:	mov	x4, x22
 bc4:	mov	x3, x21
 bc8:	adrp	x1, 0 <gomp_affinity_format_var>
 bcc:	ldr	x2, [x1]
 bd0:	mov	x1, x24
 bd4:	bl	4dc <gomp_display_affinity>
 bd8:	mov	w0, #0xa                   	// #10
 bdc:	strb	w0, [x20, x19]
 be0:	mov	x1, x24
 be4:	mov	x0, x20
 be8:	bl	78 <gomp_print_string>
 bec:	mov	x0, x20
 bf0:	bl	0 <free>
 bf4:	b	b94 <gomp_display_affinity_thread+0x64>

teams.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_teams_reg>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x21, x0
  18:	mov	x22, x1
  1c:	mov	w20, w2
  20:	mov	w23, w3
  24:	cbz	w3, 100 <GOMP_teams_reg+0x100>
  28:	adrp	x0, 0 <gomp_tls_data>
  2c:	ldr	x0, [x0]
  30:	mrs	x1, tpidr_el0
  34:	add	x0, x1, x0
  38:	ldr	x0, [x0, #80]
  3c:	cbz	x0, 70 <GOMP_teams_reg+0x70>
  40:	add	x0, x0, #0x90
  44:	ldr	w24, [x0, #20]
  48:	cmp	w23, #0x0
  4c:	csinv	w1, w23, wzr, ge  // ge = tcont
  50:	str	w1, [x0, #20]
  54:	cbnz	w20, 80 <GOMP_teams_reg+0x80>
  58:	mov	w20, #0x3                   	// #3
  5c:	adrp	x0, 0 <GOMP_teams_reg>
  60:	str	w20, [x0]
  64:	adrp	x0, 0 <GOMP_teams_reg>
  68:	str	wzr, [x0]
  6c:	b	90 <GOMP_teams_reg+0x90>
  70:	bl	0 <gomp_new_icv>
  74:	b	44 <GOMP_teams_reg+0x44>
  78:	bl	0 <gomp_new_icv>
  7c:	b	e8 <GOMP_teams_reg+0xe8>
  80:	adrp	x0, 0 <GOMP_teams_reg>
  84:	str	w20, [x0]
  88:	adrp	x0, 0 <GOMP_teams_reg>
  8c:	str	wzr, [x0]
  90:	adrp	x19, 0 <GOMP_teams_reg>
  94:	add	x19, x19, #0x0
  98:	mov	x0, x22
  9c:	blr	x21
  a0:	ldr	w4, [x19]
  a4:	add	w4, w4, #0x1
  a8:	str	w4, [x19]
  ac:	cmp	w4, w20
  b0:	b.cc	98 <GOMP_teams_reg+0x98>  // b.lo, b.ul, b.last
  b4:	adrp	x0, 0 <GOMP_teams_reg>
  b8:	mov	w1, #0x1                   	// #1
  bc:	str	w1, [x0]
  c0:	adrp	x0, 0 <GOMP_teams_reg>
  c4:	str	wzr, [x0]
  c8:	cbz	w23, ec <GOMP_teams_reg+0xec>
  cc:	adrp	x0, 0 <gomp_tls_data>
  d0:	ldr	x0, [x0]
  d4:	mrs	x1, tpidr_el0
  d8:	add	x0, x1, x0
  dc:	ldr	x0, [x0, #80]
  e0:	cbz	x0, 78 <GOMP_teams_reg+0x78>
  e4:	add	x0, x0, #0x90
  e8:	str	w24, [x0, #20]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x21, x22, [sp, #32]
  f4:	ldp	x23, x24, [sp, #48]
  f8:	ldp	x29, x30, [sp], #64
  fc:	ret
 100:	mov	w24, w3
 104:	cbnz	w2, 80 <GOMP_teams_reg+0x80>
 108:	mov	w0, #0x3                   	// #3
 10c:	adrp	x1, 0 <GOMP_teams_reg>
 110:	str	w0, [x1]
 114:	adrp	x1, 0 <GOMP_teams_reg>
 118:	str	wzr, [x1]
 11c:	mov	w24, w20
 120:	mov	w20, w0
 124:	b	90 <GOMP_teams_reg+0x90>

0000000000000128 <gomp_ialias_omp_get_num_teams>:
 128:	adrp	x0, 0 <GOMP_teams_reg>
 12c:	ldr	w0, [x0]
 130:	ret

0000000000000134 <gomp_ialias_omp_get_team_num>:
 134:	adrp	x0, 0 <GOMP_teams_reg>
 138:	ldr	w0, [x0]
 13c:	ret
