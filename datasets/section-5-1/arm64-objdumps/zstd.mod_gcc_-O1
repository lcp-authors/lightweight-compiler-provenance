
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zstd.mod_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <FSE_versionNumber>:
       0:	mov	w0, #0x384                 	// #900
       4:	ret

0000000000000008 <FSE_isError>:
       8:	cmn	x0, #0x78
       c:	cset	w0, hi  // hi = pmore
      10:	ret

0000000000000014 <FSE_getErrorName>:
      14:	stp	x29, x30, [sp, #-16]!
      18:	mov	x29, sp
      1c:	cmn	x0, #0x78
      20:	csneg	w0, wzr, w0, ls  // ls = plast
      24:	bl	5a0 <ERR_getErrorString>
      28:	ldp	x29, x30, [sp], #16
      2c:	ret

0000000000000030 <HUF_isError>:
      30:	cmn	x0, #0x78
      34:	cset	w0, hi  // hi = pmore
      38:	ret

000000000000003c <HUF_getErrorName>:
      3c:	stp	x29, x30, [sp, #-16]!
      40:	mov	x29, sp
      44:	cmn	x0, #0x78
      48:	csneg	w0, wzr, w0, ls  // ls = plast
      4c:	bl	5a0 <ERR_getErrorString>
      50:	ldp	x29, x30, [sp], #16
      54:	ret

0000000000000058 <FSE_readNCount>:
      58:	stp	x29, x30, [sp, #-80]!
      5c:	mov	x29, sp
      60:	stp	x19, x20, [sp, #16]
      64:	stp	x21, x22, [sp, #32]
      68:	str	x23, [sp, #48]
      6c:	mov	x19, x0
      70:	mov	x20, x1
      74:	mov	x23, x2
      78:	mov	x21, x3
      7c:	mov	x22, x4
      80:	cmp	x4, #0x3
      84:	b.hi	ec <FSE_readNCount+0x94>  // b.pmore
      88:	mov	x2, #0x4                   	// #4
      8c:	mov	w1, #0x0                   	// #0
      90:	add	x0, sp, #0x48
      94:	bl	0 <grub_memset>
      98:	mov	x2, x22
      9c:	mov	x1, x21
      a0:	add	x0, sp, #0x48
      a4:	bl	0 <grub_memmove>
      a8:	mov	x4, #0x4                   	// #4
      ac:	add	x3, sp, #0x48
      b0:	mov	x2, x23
      b4:	mov	x1, x20
      b8:	mov	x0, x19
      bc:	bl	58 <FSE_readNCount>
      c0:	cmp	x22, x0
      c4:	mov	x1, #0xffffffffffffff88    	// #-120
      c8:	ccmp	x0, x1, #0x2, cc  // cc = lo, ul, last
      cc:	mov	x6, #0xffffffffffffffec    	// #-20
      d0:	csel	x6, x0, x6, hi  // hi = pmore
      d4:	mov	x0, x6
      d8:	ldp	x19, x20, [sp, #16]
      dc:	ldp	x21, x22, [sp, #32]
      e0:	ldr	x23, [sp, #48]
      e4:	ldp	x29, x30, [sp], #80
      e8:	ret
      ec:	ldr	w2, [x1]
      f0:	add	w2, w2, #0x1
      f4:	lsl	x2, x2, #1
      f8:	mov	w1, #0x0                   	// #0
      fc:	bl	0 <grub_memset>
     100:	ldr	w4, [x21]
     104:	and	w5, w4, #0xf
     108:	add	w0, w5, #0x5
     10c:	mov	x6, #0xffffffffffffffd4    	// #-44
     110:	cmp	w0, #0xf
     114:	b.gt	d4 <FSE_readNCount+0x7c>
     118:	add	x10, x21, x22
     11c:	lsr	w4, w4, #4
     120:	str	w0, [x23]
     124:	mov	w2, #0x1                   	// #1
     128:	lsl	w2, w2, w0
     12c:	add	w1, w2, #0x1
     130:	add	w5, w5, #0x6
     134:	mov	x7, x21
     138:	mov	w8, #0x0                   	// #0
     13c:	mov	w3, #0x4                   	// #4
     140:	sub	x12, x10, #0x7
     144:	sub	x13, x10, #0x4
     148:	mov	w11, #0xffff                	// #65535
     14c:	mov	w15, #0xfffffffe            	// #-2
     150:	add	x14, x19, #0x2
     154:	sub	x10, x10, #0x5
     158:	b	284 <FSE_readNCount+0x22c>
     15c:	cmp	w11, w4, uxth
     160:	b.ne	198 <FSE_readNCount+0x140>  // b.any
     164:	mov	w0, w9
     168:	b	17c <FSE_readNCount+0x124>
     16c:	lsr	w4, w4, #16
     170:	add	w3, w3, #0x10
     174:	cmp	w11, w4, uxth
     178:	b.ne	19c <FSE_readNCount+0x144>  // b.any
     17c:	add	w0, w0, #0x18
     180:	cmp	x7, x10
     184:	b.cs	16c <FSE_readNCount+0x114>  // b.hs, b.nlast
     188:	ldur	w4, [x7, #2]
     18c:	lsr	w4, w4, w3
     190:	add	x7, x7, #0x2
     194:	b	174 <FSE_readNCount+0x11c>
     198:	mov	w0, w9
     19c:	and	w6, w4, #0x3
     1a0:	cmp	w6, #0x3
     1a4:	b.ne	1c0 <FSE_readNCount+0x168>  // b.any
     1a8:	add	w0, w0, #0x3
     1ac:	lsr	w4, w4, #2
     1b0:	add	w3, w3, #0x2
     1b4:	and	w6, w4, #0x3
     1b8:	cmp	w6, #0x3
     1bc:	b.eq	1a8 <FSE_readNCount+0x150>  // b.none
     1c0:	add	w0, w6, w0
     1c4:	add	w3, w3, #0x2
     1c8:	cmp	w16, w0
     1cc:	b.cc	328 <FSE_readNCount+0x2d0>  // b.lo, b.ul, b.last
     1d0:	cmp	w0, w9
     1d4:	b.ls	22c <FSE_readNCount+0x1d4>  // b.plast
     1d8:	add	x6, x19, w9, uxtw #1
     1dc:	sub	w8, w15, w8
     1e0:	add	w8, w8, w0
     1e4:	add	x8, x8, w9, uxtw
     1e8:	add	x8, x14, x8, lsl #1
     1ec:	strh	wzr, [x6], #2
     1f0:	cmp	x8, x6
     1f4:	b.ne	1ec <FSE_readNCount+0x194>  // b.any
     1f8:	cmp	x12, x7
     1fc:	b.cs	210 <FSE_readNCount+0x1b8>  // b.hs, b.nlast
     200:	asr	w6, w3, #3
     204:	add	x6, x7, w6, sxtw
     208:	cmp	x6, x13
     20c:	b.hi	234 <FSE_readNCount+0x1dc>  // b.pmore
     210:	asr	w4, w3, #3
     214:	add	x7, x7, w4, sxtw
     218:	and	w3, w3, #0x7
     21c:	ldr	w4, [x7]
     220:	lsr	w4, w4, w3
     224:	mov	w9, w0
     228:	b	280 <FSE_readNCount+0x228>
     22c:	mov	w0, w9
     230:	b	1f8 <FSE_readNCount+0x1a0>
     234:	lsr	w4, w4, #2
     238:	mov	w9, w0
     23c:	b	280 <FSE_readNCount+0x228>
     240:	and	w4, w0, w4
     244:	sub	w9, w4, w9
     248:	cmp	w2, w4
     24c:	csel	w4, w9, w4, le
     250:	add	w3, w3, w5
     254:	b	2ac <FSE_readNCount+0x254>
     258:	asr	w0, w3, #3
     25c:	add	x7, x7, w0, sxtw
     260:	and	w3, w3, #0x7
     264:	ldr	w4, [x7]
     268:	lsr	w4, w4, w3
     26c:	ldr	w16, [x20]
     270:	cmp	w1, #0x1
     274:	ccmp	w16, w9, #0x0, gt
     278:	b.cc	300 <FSE_readNCount+0x2a8>  // b.lo, b.ul, b.last
     27c:	cbz	w6, 15c <FSE_readNCount+0x104>
     280:	mov	w8, w9
     284:	lsl	w0, w2, #1
     288:	sub	w0, w0, #0x1
     28c:	sub	w9, w0, w1
     290:	sub	w6, w2, #0x1
     294:	and	w6, w6, w4
     298:	cmp	w6, w9
     29c:	b.cs	240 <FSE_readNCount+0x1e8>  // b.hs, b.nlast
     2a0:	mov	w4, w6
     2a4:	sub	w0, w5, #0x1
     2a8:	add	w3, w0, w3
     2ac:	subs	w6, w4, #0x1
     2b0:	cneg	w0, w6, mi  // mi = first
     2b4:	sub	w1, w1, w0
     2b8:	add	w9, w8, #0x1
     2bc:	strh	w6, [x19, w8, uxtw #1]
     2c0:	cmp	w2, w1
     2c4:	b.le	2d8 <FSE_readNCount+0x280>
     2c8:	sub	w5, w5, #0x1
     2cc:	asr	w2, w2, #1
     2d0:	cmp	w1, w2
     2d4:	b.lt	2c8 <FSE_readNCount+0x270>  // b.tstop
     2d8:	cmp	x12, x7
     2dc:	b.cs	258 <FSE_readNCount+0x200>  // b.hs, b.nlast
     2e0:	asr	w0, w3, #3
     2e4:	add	x0, x7, w0, sxtw
     2e8:	cmp	x13, x0
     2ec:	b.cs	258 <FSE_readNCount+0x200>  // b.hs, b.nlast
     2f0:	sub	x0, x13, x7
     2f4:	sub	w3, w3, w0, lsl #3
     2f8:	mov	x7, x13
     2fc:	b	264 <FSE_readNCount+0x20c>
     300:	cmp	w3, #0x20
     304:	mov	x6, #0xffffffffffffffec    	// #-20
     308:	ccmp	w1, #0x1, #0x0, le
     30c:	b.ne	d4 <FSE_readNCount+0x7c>  // b.any
     310:	str	w8, [x20]
     314:	add	w0, w3, #0x7
     318:	asr	w0, w0, #3
     31c:	add	x0, x7, w0, sxtw
     320:	sub	x6, x0, x21
     324:	b	d4 <FSE_readNCount+0x7c>
     328:	mov	x6, #0xffffffffffffffd0    	// #-48
     32c:	b	d4 <FSE_readNCount+0x7c>

0000000000000330 <HUF_readStats>:
     330:	stp	x29, x30, [sp, #-336]!
     334:	mov	x29, sp
     338:	stp	x21, x22, [sp, #32]
     33c:	mov	x21, #0xffffffffffffffb8    	// #-72
     340:	cbz	x6, 4b8 <HUF_readStats+0x188>
     344:	stp	x19, x20, [sp, #16]
     348:	stp	x23, x24, [sp, #48]
     34c:	mov	x19, x0
     350:	mov	x20, x2
     354:	mov	x24, x3
     358:	mov	x23, x4
     35c:	mov	x2, x5
     360:	ldrb	w22, [x5]
     364:	cmp	x22, #0x7f
     368:	b.ls	4a0 <HUF_readStats+0x170>  // b.plast
     36c:	sub	x21, x22, #0x7f
     370:	sub	x22, x22, #0x7e
     374:	lsr	x22, x22, #1
     378:	add	x0, x22, #0x1
     37c:	cmp	x0, x6
     380:	b.hi	514 <HUF_readStats+0x1e4>  // b.pmore
     384:	cmp	x1, x21
     388:	b.ls	524 <HUF_readStats+0x1f4>  // b.plast
     38c:	mov	w0, #0x0                   	// #0
     390:	mov	x4, #0x0                   	// #0
     394:	lsr	w1, w0, #1
     398:	add	x1, x1, #0x1
     39c:	ldrb	w3, [x2, x1]
     3a0:	lsr	w3, w3, #4
     3a4:	strb	w3, [x19, x4]
     3a8:	add	w3, w0, #0x1
     3ac:	ldrb	w1, [x2, x1]
     3b0:	and	w1, w1, #0xf
     3b4:	strb	w1, [x19, w3, uxtw]
     3b8:	add	w0, w0, #0x2
     3bc:	mov	w4, w0
     3c0:	cmp	x21, w0, uxtw
     3c4:	b.hi	394 <HUF_readStats+0x64>  // b.pmore
     3c8:	mov	x2, #0x34                  	// #52
     3cc:	mov	w1, #0x0                   	// #0
     3d0:	mov	x0, x20
     3d4:	bl	0 <grub_memset>
     3d8:	mov	w5, #0x0                   	// #0
     3dc:	mov	w3, #0x0                   	// #0
     3e0:	mov	x2, #0x0                   	// #0
     3e4:	mov	w4, #0x1                   	// #1
     3e8:	ldrb	w1, [x19, x2]
     3ec:	cmp	w1, #0xb
     3f0:	b.hi	534 <HUF_readStats+0x204>  // b.pmore
     3f4:	and	x1, x1, #0xff
     3f8:	ldr	w0, [x20, x1, lsl #2]
     3fc:	add	w0, w0, #0x1
     400:	str	w0, [x20, x1, lsl #2]
     404:	ldrb	w1, [x19, x2]
     408:	lsl	w1, w4, w1
     40c:	add	w3, w3, w1, asr #1
     410:	add	w5, w5, #0x1
     414:	mov	w2, w5
     418:	cmp	x21, w5, uxtw
     41c:	b.hi	3e8 <HUF_readStats+0xb8>  // b.pmore
     420:	cbz	w3, 544 <HUF_readStats+0x214>
     424:	clz	w0, w3
     428:	mov	w1, #0x20                  	// #32
     42c:	sub	w0, w1, w0
     430:	cmp	w0, #0xc
     434:	b.hi	554 <HUF_readStats+0x224>  // b.pmore
     438:	str	w0, [x23]
     43c:	mov	w1, #0x1                   	// #1
     440:	lsl	w0, w1, w0
     444:	sub	w3, w0, w3
     448:	clz	w2, w3
     44c:	mov	w0, #0x1f                  	// #31
     450:	sub	w0, w0, w2
     454:	lsl	w1, w1, w0
     458:	cmp	w3, w1
     45c:	b.ne	564 <HUF_readStats+0x234>  // b.any
     460:	add	w0, w0, #0x1
     464:	strb	w0, [x19, x21]
     468:	mov	w0, w0
     46c:	ldr	w1, [x20, x0, lsl #2]
     470:	add	w1, w1, #0x1
     474:	str	w1, [x20, x0, lsl #2]
     478:	ldr	w0, [x20, #4]
     47c:	cmp	w0, #0x1
     480:	b.ls	574 <HUF_readStats+0x244>  // b.plast
     484:	tbnz	w0, #0, 584 <HUF_readStats+0x254>
     488:	add	w21, w21, #0x1
     48c:	str	w21, [x24]
     490:	add	x21, x22, #0x1
     494:	ldp	x19, x20, [sp, #16]
     498:	ldp	x23, x24, [sp, #48]
     49c:	b	4b8 <HUF_readStats+0x188>
     4a0:	add	x0, x22, #0x1
     4a4:	mov	x21, #0xffffffffffffffb8    	// #-72
     4a8:	cmp	x0, x6
     4ac:	b.ls	4c8 <HUF_readStats+0x198>  // b.plast
     4b0:	ldp	x19, x20, [sp, #16]
     4b4:	ldp	x23, x24, [sp, #48]
     4b8:	mov	x0, x21
     4bc:	ldp	x21, x22, [sp, #32]
     4c0:	ldp	x29, x30, [sp], #336
     4c4:	ret
     4c8:	mov	w5, #0x6                   	// #6
     4cc:	add	x4, sp, #0x48
     4d0:	mov	x3, x22
     4d4:	add	x2, x2, #0x1
     4d8:	sub	x1, x1, #0x1
     4dc:	mov	x0, x19
     4e0:	bl	157c <FSE_decompress_wksp>
     4e4:	mov	x21, x0
     4e8:	cmn	x0, #0x78
     4ec:	b.hi	594 <HUF_readStats+0x264>  // b.pmore
     4f0:	mov	x2, #0x34                  	// #52
     4f4:	mov	w1, #0x0                   	// #0
     4f8:	mov	x0, x20
     4fc:	bl	0 <grub_memset>
     500:	cbnz	x21, 3d8 <HUF_readStats+0xa8>
     504:	mov	x21, #0xffffffffffffffec    	// #-20
     508:	ldp	x19, x20, [sp, #16]
     50c:	ldp	x23, x24, [sp, #48]
     510:	b	4b8 <HUF_readStats+0x188>
     514:	mov	x21, #0xffffffffffffffb8    	// #-72
     518:	ldp	x19, x20, [sp, #16]
     51c:	ldp	x23, x24, [sp, #48]
     520:	b	4b8 <HUF_readStats+0x188>
     524:	mov	x21, #0xffffffffffffffec    	// #-20
     528:	ldp	x19, x20, [sp, #16]
     52c:	ldp	x23, x24, [sp, #48]
     530:	b	4b8 <HUF_readStats+0x188>
     534:	mov	x21, #0xffffffffffffffec    	// #-20
     538:	ldp	x19, x20, [sp, #16]
     53c:	ldp	x23, x24, [sp, #48]
     540:	b	4b8 <HUF_readStats+0x188>
     544:	mov	x21, #0xffffffffffffffec    	// #-20
     548:	ldp	x19, x20, [sp, #16]
     54c:	ldp	x23, x24, [sp, #48]
     550:	b	4b8 <HUF_readStats+0x188>
     554:	mov	x21, #0xffffffffffffffec    	// #-20
     558:	ldp	x19, x20, [sp, #16]
     55c:	ldp	x23, x24, [sp, #48]
     560:	b	4b8 <HUF_readStats+0x188>
     564:	mov	x21, #0xffffffffffffffec    	// #-20
     568:	ldp	x19, x20, [sp, #16]
     56c:	ldp	x23, x24, [sp, #48]
     570:	b	4b8 <HUF_readStats+0x188>
     574:	mov	x21, #0xffffffffffffffec    	// #-20
     578:	ldp	x19, x20, [sp, #16]
     57c:	ldp	x23, x24, [sp, #48]
     580:	b	4b8 <HUF_readStats+0x188>
     584:	mov	x21, #0xffffffffffffffec    	// #-20
     588:	ldp	x19, x20, [sp, #16]
     58c:	ldp	x23, x24, [sp, #48]
     590:	b	4b8 <HUF_readStats+0x188>
     594:	ldp	x19, x20, [sp, #16]
     598:	ldp	x23, x24, [sp, #48]
     59c:	b	4b8 <HUF_readStats+0x188>

00000000000005a0 <ERR_getErrorString>:
     5a0:	cmp	w0, #0x66
     5a4:	b.hi	6d4 <ERR_getErrorString+0x134>  // b.pmore
     5a8:	adrp	x1, 0 <FSE_versionNumber>
     5ac:	ldr	x1, [x1]
     5b0:	ldrb	w0, [x1, w0, uxtw]
     5b4:	adr	x1, 5c0 <ERR_getErrorString+0x20>
     5b8:	add	x0, x1, w0, sxtb #2
     5bc:	br	x0
     5c0:	adrp	x0, 0 <FSE_versionNumber>
     5c4:	ldr	x0, [x0]
     5c8:	b	5d4 <ERR_getErrorString+0x34>
     5cc:	adrp	x0, 0 <FSE_versionNumber>
     5d0:	ldr	x0, [x0]
     5d4:	ret
     5d8:	adrp	x0, 0 <FSE_versionNumber>
     5dc:	ldr	x0, [x0]
     5e0:	b	5d4 <ERR_getErrorString+0x34>
     5e4:	adrp	x0, 0 <FSE_versionNumber>
     5e8:	ldr	x0, [x0]
     5ec:	b	5d4 <ERR_getErrorString+0x34>
     5f0:	adrp	x0, 0 <FSE_versionNumber>
     5f4:	ldr	x0, [x0]
     5f8:	b	5d4 <ERR_getErrorString+0x34>
     5fc:	adrp	x0, 0 <FSE_versionNumber>
     600:	ldr	x0, [x0]
     604:	b	5d4 <ERR_getErrorString+0x34>
     608:	adrp	x0, 0 <FSE_versionNumber>
     60c:	ldr	x0, [x0]
     610:	b	5d4 <ERR_getErrorString+0x34>
     614:	adrp	x0, 0 <FSE_versionNumber>
     618:	ldr	x0, [x0]
     61c:	b	5d4 <ERR_getErrorString+0x34>
     620:	adrp	x0, 0 <FSE_versionNumber>
     624:	ldr	x0, [x0]
     628:	b	5d4 <ERR_getErrorString+0x34>
     62c:	adrp	x0, 0 <FSE_versionNumber>
     630:	ldr	x0, [x0]
     634:	b	5d4 <ERR_getErrorString+0x34>
     638:	adrp	x0, 0 <FSE_versionNumber>
     63c:	ldr	x0, [x0]
     640:	b	5d4 <ERR_getErrorString+0x34>
     644:	adrp	x0, 0 <FSE_versionNumber>
     648:	ldr	x0, [x0]
     64c:	b	5d4 <ERR_getErrorString+0x34>
     650:	adrp	x0, 0 <FSE_versionNumber>
     654:	ldr	x0, [x0]
     658:	b	5d4 <ERR_getErrorString+0x34>
     65c:	adrp	x0, 0 <FSE_versionNumber>
     660:	ldr	x0, [x0]
     664:	b	5d4 <ERR_getErrorString+0x34>
     668:	adrp	x0, 0 <FSE_versionNumber>
     66c:	ldr	x0, [x0]
     670:	b	5d4 <ERR_getErrorString+0x34>
     674:	adrp	x0, 0 <FSE_versionNumber>
     678:	ldr	x0, [x0]
     67c:	b	5d4 <ERR_getErrorString+0x34>
     680:	adrp	x0, 0 <FSE_versionNumber>
     684:	ldr	x0, [x0]
     688:	b	5d4 <ERR_getErrorString+0x34>
     68c:	adrp	x0, 0 <FSE_versionNumber>
     690:	ldr	x0, [x0]
     694:	b	5d4 <ERR_getErrorString+0x34>
     698:	adrp	x0, 0 <FSE_versionNumber>
     69c:	ldr	x0, [x0]
     6a0:	b	5d4 <ERR_getErrorString+0x34>
     6a4:	adrp	x0, 0 <FSE_versionNumber>
     6a8:	ldr	x0, [x0]
     6ac:	b	5d4 <ERR_getErrorString+0x34>
     6b0:	adrp	x0, 0 <FSE_versionNumber>
     6b4:	ldr	x0, [x0]
     6b8:	b	5d4 <ERR_getErrorString+0x34>
     6bc:	adrp	x0, 0 <FSE_versionNumber>
     6c0:	ldr	x0, [x0]
     6c4:	b	5d4 <ERR_getErrorString+0x34>
     6c8:	adrp	x0, 0 <FSE_versionNumber>
     6cc:	ldr	x0, [x0]
     6d0:	b	5d4 <ERR_getErrorString+0x34>
     6d4:	adrp	x0, 0 <FSE_versionNumber>
     6d8:	ldr	x0, [x0]
     6dc:	b	5d4 <ERR_getErrorString+0x34>
     6e0:	adrp	x0, 0 <FSE_versionNumber>
     6e4:	ldr	x0, [x0]
     6e8:	b	5d4 <ERR_getErrorString+0x34>
     6ec:	nop
	...

00000000000007c0 <FSE_createDTable>:
     7c0:	stp	x29, x30, [sp, #-16]!
     7c4:	mov	x29, sp
     7c8:	cmp	w0, #0xf
     7cc:	mov	w1, #0xf                   	// #15
     7d0:	csel	w0, w0, w1, ls  // ls = plast
     7d4:	mov	w1, #0x1                   	// #1
     7d8:	lsl	w0, w1, w0
     7dc:	add	w0, w0, w1
     7e0:	sbfiz	x0, x0, #2, #32
     7e4:	bl	0 <grub_malloc>
     7e8:	ldp	x29, x30, [sp], #16
     7ec:	ret

00000000000007f0 <FSE_freeDTable>:
     7f0:	stp	x29, x30, [sp, #-16]!
     7f4:	mov	x29, sp
     7f8:	bl	0 <grub_free>
     7fc:	ldp	x29, x30, [sp], #16
     800:	ret

0000000000000804 <FSE_buildDTable>:
     804:	cmp	w2, #0xff
     808:	b.hi	9b0 <FSE_buildDTable+0x1ac>  // b.pmore
     80c:	sub	sp, sp, #0x260
     810:	stp	x29, x30, [sp]
     814:	mov	x29, sp
     818:	stp	x21, x22, [sp, #32]
     81c:	stp	x23, x24, [sp, #48]
     820:	stp	x25, x26, [sp, #64]
     824:	mov	x25, x0
     828:	mov	x26, x1
     82c:	mov	w22, w2
     830:	mov	w23, w3
     834:	mov	x0, #0xffffffffffffffd4    	// #-44
     838:	cmp	w3, #0xc
     83c:	b.hi	998 <FSE_buildDTable+0x194>  // b.pmore
     840:	stp	x19, x20, [sp, #16]
     844:	add	x21, x25, #0x4
     848:	mov	w3, #0x1                   	// #1
     84c:	lsl	w24, w3, w23
     850:	strh	w23, [sp, #88]
     854:	strh	w3, [sp, #90]
     858:	sub	w4, w23, #0x1
     85c:	lsl	w4, w3, w4
     860:	sxth	w4, w4
     864:	sub	w20, w24, #0x1
     868:	add	x2, sp, #0x60
     86c:	mov	w6, w22
     870:	mov	w19, w20
     874:	mov	x0, #0x0                   	// #0
     878:	mov	w5, #0x0                   	// #0
     87c:	mov	w8, w3
     880:	mov	w7, #0x0                   	// #0
     884:	mov	w9, #0x1                   	// #1
     888:	b	8b0 <FSE_buildDTable+0xac>
     88c:	add	x1, x21, w19, uxtw #2
     890:	strb	w0, [x1, #2]
     894:	strh	w9, [x2]
     898:	sub	w19, w19, #0x1
     89c:	add	x1, x0, #0x1
     8a0:	add	x2, x2, #0x2
     8a4:	cmp	x0, x6
     8a8:	b.eq	9b8 <FSE_buildDTable+0x1b4>  // b.none
     8ac:	mov	x0, x1
     8b0:	ldrsh	w1, [x26, x0, lsl #1]
     8b4:	cmn	w1, #0x1
     8b8:	b.eq	88c <FSE_buildDTable+0x88>  // b.none
     8bc:	cmp	w1, w4
     8c0:	csel	w5, w5, w8, lt  // lt = tstop
     8c4:	csel	w3, w3, w7, lt  // lt = tstop
     8c8:	strh	w1, [x2]
     8cc:	b	89c <FSE_buildDTable+0x98>
     8d0:	add	w2, w2, #0x1
     8d4:	ldrsh	w3, [x5]
     8d8:	cmp	w3, w2
     8dc:	b.le	90c <FSE_buildDTable+0x108>
     8e0:	add	x3, x21, w1, uxtw #2
     8e4:	strb	w4, [x3, #2]
     8e8:	add	w1, w0, w1
     8ec:	and	w1, w1, w20
     8f0:	cmp	w19, w1
     8f4:	b.cs	8d0 <FSE_buildDTable+0xcc>  // b.hs, b.nlast
     8f8:	add	w1, w0, w1
     8fc:	and	w1, w1, w20
     900:	cmp	w19, w1
     904:	b.cc	8f8 <FSE_buildDTable+0xf4>  // b.lo, b.ul, b.last
     908:	b	8d0 <FSE_buildDTable+0xcc>
     90c:	add	w2, w4, #0x1
     910:	add	x26, x26, #0x2
     914:	cmp	w22, w4
     918:	b.eq	938 <FSE_buildDTable+0x134>  // b.none
     91c:	mov	w4, w2
     920:	mov	x5, x26
     924:	ldrsh	w3, [x26]
     928:	mov	w2, #0x0                   	// #0
     92c:	cmp	w3, #0x0
     930:	b.gt	8e0 <FSE_buildDTable+0xdc>
     934:	b	90c <FSE_buildDTable+0x108>
     938:	mov	x0, #0xffffffffffffffff    	// #-1
     93c:	cbnz	w1, 9e8 <FSE_buildDTable+0x1e4>
     940:	sub	w4, w24, #0x1
     944:	add	x25, x25, #0x8
     948:	add	x4, x25, x4, lsl #2
     94c:	add	x2, sp, #0x60
     950:	mov	w5, #0x1f                  	// #31
     954:	ldrb	w0, [x21, #2]
     958:	lsl	x0, x0, #1
     95c:	ldrh	w1, [x2, x0]
     960:	add	w3, w1, #0x1
     964:	strh	w3, [x2, x0]
     968:	clz	w0, w1
     96c:	sub	w0, w5, w0
     970:	sub	w0, w23, w0
     974:	and	w0, w0, #0xff
     978:	strb	w0, [x21, #3]
     97c:	lsl	w0, w1, w0
     980:	sub	w0, w0, w24
     984:	strh	w0, [x21], #4
     988:	cmp	x4, x21
     98c:	b.ne	954 <FSE_buildDTable+0x150>  // b.any
     990:	mov	x0, #0x0                   	// #0
     994:	ldp	x19, x20, [sp, #16]
     998:	ldp	x21, x22, [sp, #32]
     99c:	ldp	x23, x24, [sp, #48]
     9a0:	ldp	x25, x26, [sp, #64]
     9a4:	ldp	x29, x30, [sp]
     9a8:	add	sp, sp, #0x260
     9ac:	ret
     9b0:	mov	x0, #0xffffffffffffffd2    	// #-46
     9b4:	ret
     9b8:	cbz	w5, 9c0 <FSE_buildDTable+0x1bc>
     9bc:	strh	w3, [sp, #90]
     9c0:	mov	x2, #0x4                   	// #4
     9c4:	add	x1, sp, #0x58
     9c8:	mov	x0, x25
     9cc:	bl	0 <grub_memmove>
     9d0:	lsr	w0, w24, #3
     9d4:	add	w0, w0, w24, lsr #1
     9d8:	add	w0, w0, #0x3
     9dc:	mov	w1, #0x0                   	// #0
     9e0:	mov	w4, #0x0                   	// #0
     9e4:	b	920 <FSE_buildDTable+0x11c>
     9e8:	ldp	x19, x20, [sp, #16]
     9ec:	b	998 <FSE_buildDTable+0x194>

00000000000009f0 <FSE_buildDTable_rle>:
     9f0:	strh	wzr, [x0]
     9f4:	strh	wzr, [x0, #2]
     9f8:	strh	wzr, [x0, #4]
     9fc:	strb	w1, [x0, #6]
     a00:	strb	wzr, [x0, #7]
     a04:	mov	x0, #0x0                   	// #0
     a08:	ret

0000000000000a0c <FSE_buildDTable_raw>:
     a0c:	mov	w3, #0x1                   	// #1
     a10:	lsl	w3, w3, w1
     a14:	cbz	w1, a54 <FSE_buildDTable_raw+0x48>
     a18:	strh	w1, [x0]
     a1c:	mov	w2, #0x1                   	// #1
     a20:	strh	w2, [x0, #2]
     a24:	cbz	w3, a5c <FSE_buildDTable_raw+0x50>
     a28:	add	x0, x0, #0x4
     a2c:	mov	w2, #0x0                   	// #0
     a30:	strh	wzr, [x0]
     a34:	strb	w2, [x0, #2]
     a38:	strb	w1, [x0, #3]
     a3c:	add	w2, w2, #0x1
     a40:	add	x0, x0, #0x4
     a44:	cmp	w3, w2
     a48:	b.ne	a30 <FSE_buildDTable_raw+0x24>  // b.any
     a4c:	mov	x0, #0x0                   	// #0
     a50:	ret
     a54:	mov	x0, #0xffffffffffffffff    	// #-1
     a58:	b	a50 <FSE_buildDTable_raw+0x44>
     a5c:	mov	x0, #0x0                   	// #0
     a60:	b	a50 <FSE_buildDTable_raw+0x44>

0000000000000a64 <FSE_decompress_usingDTable>:
     a64:	stp	x29, x30, [sp, #-64]!
     a68:	mov	x29, sp
     a6c:	mov	x9, x0
     a70:	ldrh	w0, [x4, #2]
     a74:	cbnz	w0, ad0 <FSE_decompress_usingDTable+0x6c>
     a78:	cbz	x3, 1014 <FSE_decompress_usingDTable+0x5b0>
     a7c:	str	x2, [sp, #48]
     a80:	add	x10, x2, #0x8
     a84:	str	x10, [sp, #56]
     a88:	cmp	x3, #0x7
     a8c:	b.ls	102c <FSE_decompress_usingDTable+0x5c8>  // b.plast
     a90:	sub	x0, x3, #0x8
     a94:	add	x5, x2, x0
     a98:	str	x5, [sp, #40]
     a9c:	ldr	x0, [x2, x0]
     aa0:	str	x0, [sp, #24]
     aa4:	add	x0, x2, x3
     aa8:	ldurb	w5, [x0, #-1]
     aac:	mov	x0, #0xffffffffffffffff    	// #-1
     ab0:	cbz	w5, 1574 <FSE_decompress_usingDTable+0xb10>
     ab4:	clz	w5, w5
     ab8:	sub	w5, w5, #0x17
     abc:	str	w5, [sp, #32]
     ac0:	mov	x0, x3
     ac4:	cmn	x3, #0x78
     ac8:	b.hi	1574 <FSE_decompress_usingDTable+0xb10>  // b.pmore
     acc:	b	10ac <FSE_decompress_usingDTable+0x648>
     ad0:	cbz	x3, b28 <FSE_decompress_usingDTable+0xc4>
     ad4:	str	x2, [sp, #48]
     ad8:	add	x12, x2, #0x8
     adc:	str	x12, [sp, #56]
     ae0:	cmp	x3, #0x7
     ae4:	b.ls	b40 <FSE_decompress_usingDTable+0xdc>  // b.plast
     ae8:	sub	x0, x3, #0x8
     aec:	add	x5, x2, x0
     af0:	str	x5, [sp, #40]
     af4:	ldr	x0, [x2, x0]
     af8:	str	x0, [sp, #24]
     afc:	add	x0, x2, x3
     b00:	ldurb	w5, [x0, #-1]
     b04:	mov	x0, #0xffffffffffffffff    	// #-1
     b08:	cbz	w5, 1574 <FSE_decompress_usingDTable+0xb10>
     b0c:	clz	w5, w5
     b10:	sub	w5, w5, #0x17
     b14:	str	w5, [sp, #32]
     b18:	mov	x0, x3
     b1c:	cmn	x3, #0x78
     b20:	b.hi	1574 <FSE_decompress_usingDTable+0xb10>  // b.pmore
     b24:	b	bc0 <FSE_decompress_usingDTable+0x15c>
     b28:	mov	x2, #0x28                  	// #40
     b2c:	mov	w1, #0x0                   	// #0
     b30:	add	x0, sp, #0x18
     b34:	bl	0 <grub_memset>
     b38:	mov	x0, #0xffffffffffffffb8    	// #-72
     b3c:	b	1574 <FSE_decompress_usingDTable+0xb10>
     b40:	str	x2, [sp, #40]
     b44:	ldrb	w0, [x2]
     b48:	str	x0, [sp, #24]
     b4c:	cmp	x3, #0x5
     b50:	b.eq	cf0 <FSE_decompress_usingDTable+0x28c>  // b.none
     b54:	b.hi	ccc <FSE_decompress_usingDTable+0x268>  // b.pmore
     b58:	cmp	x3, #0x3
     b5c:	b.eq	b78 <FSE_decompress_usingDTable+0x114>  // b.none
     b60:	cmp	x3, #0x4
     b64:	b.ne	cc0 <FSE_decompress_usingDTable+0x25c>  // b.any
     b68:	ldrb	w0, [x2, #3]
     b6c:	ldr	x5, [sp, #24]
     b70:	add	x0, x5, x0, lsl #24
     b74:	str	x0, [sp, #24]
     b78:	ldrb	w0, [x2, #2]
     b7c:	ldr	x5, [sp, #24]
     b80:	add	x0, x5, x0, lsl #16
     b84:	str	x0, [sp, #24]
     b88:	ldrb	w0, [x2, #1]
     b8c:	ldr	x5, [sp, #24]
     b90:	add	x0, x5, x0, lsl #8
     b94:	str	x0, [sp, #24]
     b98:	add	x0, x2, x3
     b9c:	ldurb	w5, [x0, #-1]
     ba0:	mov	x0, #0xffffffffffffffec    	// #-20
     ba4:	cbz	w5, 1574 <FSE_decompress_usingDTable+0xb10>
     ba8:	clz	w5, w5
     bac:	mov	w0, #0x9                   	// #9
     bb0:	sub	w0, w0, w3
     bb4:	add	w0, w5, w0, lsl #3
     bb8:	sub	w0, w0, #0x1f
     bbc:	str	w0, [sp, #32]
     bc0:	ldrh	w8, [x4]
     bc4:	ldr	w5, [sp, #32]
     bc8:	mvn	w6, w8
     bcc:	and	w10, w6, #0x3f
     bd0:	ldr	x3, [sp, #24]
     bd4:	lsl	x3, x3, x5
     bd8:	lsr	x3, x3, #1
     bdc:	lsr	x3, x3, x6
     be0:	add	w5, w8, w5
     be4:	str	w5, [sp, #32]
     be8:	cmp	w5, #0x40
     bec:	b.hi	c38 <FSE_decompress_usingDTable+0x1d4>  // b.pmore
     bf0:	ldr	x6, [sp, #40]
     bf4:	cmp	x12, x6
     bf8:	b.ls	d04 <FSE_decompress_usingDTable+0x2a0>  // b.plast
     bfc:	cmp	x2, x6
     c00:	b.eq	c38 <FSE_decompress_usingDTable+0x1d4>  // b.none
     c04:	lsr	w7, w5, #3
     c08:	sub	x7, x6, x7
     c0c:	sub	x11, x6, x2
     c10:	lsr	w0, w5, #3
     c14:	cmp	x2, x7
     c18:	csel	w7, w0, w11, ls  // ls = plast
     c1c:	csel	w0, w0, w11, ls  // ls = plast
     c20:	sub	x6, x6, x0
     c24:	str	x6, [sp, #40]
     c28:	sub	w5, w5, w7, lsl #3
     c2c:	str	w5, [sp, #32]
     c30:	ldr	x0, [x6]
     c34:	str	x0, [sp, #24]
     c38:	add	x7, x4, #0x4
     c3c:	ldr	w4, [sp, #32]
     c40:	ldr	x0, [sp, #24]
     c44:	lsl	x0, x0, x4
     c48:	lsr	x0, x0, #1
     c4c:	lsr	x0, x0, x10
     c50:	add	w4, w4, w8
     c54:	str	w4, [sp, #32]
     c58:	cmp	w4, #0x40
     c5c:	b.hi	ca8 <FSE_decompress_usingDTable+0x244>  // b.pmore
     c60:	ldr	x5, [sp, #40]
     c64:	cmp	x12, x5
     c68:	b.ls	d24 <FSE_decompress_usingDTable+0x2c0>  // b.plast
     c6c:	cmp	x2, x5
     c70:	b.eq	ca8 <FSE_decompress_usingDTable+0x244>  // b.none
     c74:	lsr	w8, w4, #3
     c78:	sub	x8, x5, x8
     c7c:	sub	x10, x5, x2
     c80:	lsr	w6, w4, #3
     c84:	cmp	x2, x8
     c88:	csel	w8, w6, w10, ls  // ls = plast
     c8c:	csel	w6, w6, w10, ls  // ls = plast
     c90:	sub	x5, x5, x6
     c94:	str	x5, [sp, #40]
     c98:	sub	w4, w4, w8, lsl #3
     c9c:	str	w4, [sp, #32]
     ca0:	ldr	x4, [x5]
     ca4:	str	x4, [sp, #24]
     ca8:	add	x11, x9, x1
     cac:	mov	x6, x9
     cb0:	mov	w14, #0x0                   	// #0
     cb4:	mov	w15, #0x1                   	// #1
     cb8:	sub	x13, x11, #0x3
     cbc:	b	e4c <FSE_decompress_usingDTable+0x3e8>
     cc0:	cmp	x3, #0x2
     cc4:	b.eq	b88 <FSE_decompress_usingDTable+0x124>  // b.none
     cc8:	b	b98 <FSE_decompress_usingDTable+0x134>
     ccc:	cmp	x3, #0x6
     cd0:	b.eq	ce0 <FSE_decompress_usingDTable+0x27c>  // b.none
     cd4:	ldrb	w5, [x2, #6]
     cd8:	add	x0, x0, x5, lsl #48
     cdc:	str	x0, [sp, #24]
     ce0:	ldrb	w0, [x2, #5]
     ce4:	ldr	x5, [sp, #24]
     ce8:	add	x0, x5, x0, lsl #40
     cec:	str	x0, [sp, #24]
     cf0:	ldrb	w0, [x2, #4]
     cf4:	ldr	x5, [sp, #24]
     cf8:	add	x0, x5, x0, lsl #32
     cfc:	str	x0, [sp, #24]
     d00:	b	b68 <FSE_decompress_usingDTable+0x104>
     d04:	lsr	w0, w5, #3
     d08:	sub	x6, x6, x0
     d0c:	str	x6, [sp, #40]
     d10:	and	w5, w5, #0x7
     d14:	str	w5, [sp, #32]
     d18:	ldr	x0, [x6]
     d1c:	str	x0, [sp, #24]
     d20:	b	c38 <FSE_decompress_usingDTable+0x1d4>
     d24:	lsr	w6, w4, #3
     d28:	sub	x5, x5, x6
     d2c:	str	x5, [sp, #40]
     d30:	and	w4, w4, #0x7
     d34:	str	w4, [sp, #32]
     d38:	ldr	x4, [x5]
     d3c:	str	x4, [sp, #24]
     d40:	b	ca8 <FSE_decompress_usingDTable+0x244>
     d44:	lsr	w5, w4, #3
     d48:	sub	x1, x1, x5
     d4c:	str	x1, [sp, #40]
     d50:	and	w4, w4, #0x7
     d54:	str	w4, [sp, #32]
     d58:	ldr	x1, [x1]
     d5c:	str	x1, [sp, #24]
     d60:	mov	w8, w14
     d64:	b	d80 <FSE_decompress_usingDTable+0x31c>
     d68:	sub	x1, x1, w5, uxtw
     d6c:	str	x1, [sp, #40]
     d70:	sub	w4, w4, w5, lsl #3
     d74:	str	w4, [sp, #32]
     d78:	ldr	x1, [x1]
     d7c:	str	x1, [sp, #24]
     d80:	cmp	w8, #0x0
     d84:	ccmp	x13, x6, #0x0, eq  // eq = none
     d88:	b.ls	e90 <FSE_decompress_usingDTable+0x42c>  // b.plast
     d8c:	lsl	x3, x3, #2
     d90:	add	x1, x7, x3
     d94:	ldrh	w8, [x7, x3]
     d98:	ldrb	w3, [x1, #2]
     d9c:	ldrb	w17, [x1, #3]
     da0:	ldr	x1, [sp, #24]
     da4:	ldr	w10, [sp, #32]
     da8:	add	w5, w17, w10
     dac:	strb	w3, [x6]
     db0:	lsl	x0, x0, #2
     db4:	add	x3, x7, x0
     db8:	ldrh	w4, [x7, x0]
     dbc:	ldrb	w0, [x3, #2]
     dc0:	ldrb	w16, [x3, #3]
     dc4:	add	w3, w5, w16
     dc8:	strb	w0, [x6, #1]
     dcc:	lsl	x10, x1, x10
     dd0:	neg	w17, w17
     dd4:	lsr	x10, x10, x17
     dd8:	add	x8, x10, w8, uxth
     ddc:	lsl	x8, x8, #2
     de0:	add	x0, x7, x8
     de4:	ldrb	w18, [x0, #2]
     de8:	ldrb	w10, [x0, #3]
     dec:	add	w17, w3, w10
     df0:	lsl	x3, x1, x3
     df4:	neg	w10, w10
     df8:	lsr	x3, x3, x10
     dfc:	ldrh	w0, [x7, x8]
     e00:	add	x3, x3, x0
     e04:	strb	w18, [x6, #2]
     e08:	lsl	x5, x1, x5
     e0c:	neg	w16, w16
     e10:	lsr	x5, x5, x16
     e14:	add	x4, x5, w4, uxth
     e18:	lsl	x4, x4, #2
     e1c:	add	x0, x7, x4
     e20:	ldrb	w5, [x0, #2]
     e24:	ldrb	w0, [x0, #3]
     e28:	add	w8, w17, w0
     e2c:	str	w8, [sp, #32]
     e30:	lsl	x1, x1, x17
     e34:	neg	w0, w0
     e38:	lsr	x1, x1, x0
     e3c:	ldrh	w0, [x7, x4]
     e40:	add	x0, x1, x0
     e44:	strb	w5, [x6, #3]
     e48:	add	x6, x6, #0x4
     e4c:	ldr	w4, [sp, #32]
     e50:	cmp	w4, #0x40
     e54:	b.hi	e90 <FSE_decompress_usingDTable+0x42c>  // b.pmore
     e58:	ldr	x1, [sp, #40]
     e5c:	cmp	x12, x1
     e60:	b.ls	d44 <FSE_decompress_usingDTable+0x2e0>  // b.plast
     e64:	cmp	x2, x1
     e68:	b.eq	e90 <FSE_decompress_usingDTable+0x42c>  // b.none
     e6c:	lsr	w5, w4, #3
     e70:	lsr	w10, w4, #3
     e74:	sub	x10, x1, x10
     e78:	mov	w8, w14
     e7c:	cmp	x2, x10
     e80:	b.ls	d68 <FSE_decompress_usingDTable+0x304>  // b.plast
     e84:	sub	w5, w1, w2
     e88:	mov	w8, w15
     e8c:	b	d68 <FSE_decompress_usingDTable+0x304>
     e90:	sub	x11, x11, #0x2
     e94:	b	ed8 <FSE_decompress_usingDTable+0x474>
     e98:	lsr	w5, w1, #3
     e9c:	sub	x4, x4, x5
     ea0:	str	x4, [sp, #40]
     ea4:	and	w1, w1, #0x7
     ea8:	str	w1, [sp, #32]
     eac:	ldr	x1, [x4]
     eb0:	str	x1, [sp, #24]
     eb4:	b	f68 <FSE_decompress_usingDTable+0x504>
     eb8:	lsr	w6, w1, #3
     ebc:	sub	x4, x4, x6
     ec0:	str	x4, [sp, #40]
     ec4:	and	w1, w1, #0x7
     ec8:	str	w1, [sp, #32]
     ecc:	ldr	x1, [x4]
     ed0:	str	x1, [sp, #24]
     ed4:	mov	x6, x5
     ed8:	cmp	x11, x6
     edc:	b.cc	1004 <FSE_decompress_usingDTable+0x5a0>  // b.lo, b.ul, b.last
     ee0:	lsl	x3, x3, #2
     ee4:	add	x1, x7, x3
     ee8:	ldrb	w8, [x1, #2]
     eec:	ldrb	w1, [x1, #3]
     ef0:	ldr	w5, [sp, #32]
     ef4:	ldr	x4, [sp, #24]
     ef8:	lsl	x4, x4, x5
     efc:	neg	w10, w1
     f00:	lsr	x4, x4, x10
     f04:	add	w1, w1, w5
     f08:	str	w1, [sp, #32]
     f0c:	ldrh	w3, [x7, x3]
     f10:	add	x3, x3, x4
     f14:	strb	w8, [x6]
     f18:	cmp	w1, #0x40
     f1c:	b.hi	1534 <FSE_decompress_usingDTable+0xad0>  // b.pmore
     f20:	ldr	x4, [sp, #40]
     f24:	cmp	x12, x4
     f28:	b.ls	e98 <FSE_decompress_usingDTable+0x434>  // b.plast
     f2c:	cmp	x2, x4
     f30:	b.eq	f68 <FSE_decompress_usingDTable+0x504>  // b.none
     f34:	lsr	w8, w1, #3
     f38:	sub	x8, x4, x8
     f3c:	sub	x10, x4, x2
     f40:	lsr	w5, w1, #3
     f44:	cmp	x2, x8
     f48:	csel	w8, w5, w10, ls  // ls = plast
     f4c:	csel	w5, w5, w10, ls  // ls = plast
     f50:	sub	x4, x4, x5
     f54:	str	x4, [sp, #40]
     f58:	sub	w1, w1, w8, lsl #3
     f5c:	str	w1, [sp, #32]
     f60:	ldr	x1, [x4]
     f64:	str	x1, [sp, #24]
     f68:	add	x1, x6, #0x1
     f6c:	cmp	x11, x1
     f70:	b.cc	100c <FSE_decompress_usingDTable+0x5a8>  // b.lo, b.ul, b.last
     f74:	lsl	x0, x0, #2
     f78:	add	x1, x7, x0
     f7c:	ldrb	w8, [x1, #2]
     f80:	ldrb	w1, [x1, #3]
     f84:	ldr	w5, [sp, #32]
     f88:	ldr	x4, [sp, #24]
     f8c:	lsl	x4, x4, x5
     f90:	neg	w10, w1
     f94:	lsr	x4, x4, x10
     f98:	add	w1, w1, w5
     f9c:	str	w1, [sp, #32]
     fa0:	ldrh	w0, [x7, x0]
     fa4:	add	x0, x0, x4
     fa8:	add	x5, x6, #0x2
     fac:	sturb	w8, [x5, #-1]
     fb0:	cmp	w1, #0x40
     fb4:	b.hi	1520 <FSE_decompress_usingDTable+0xabc>  // b.pmore
     fb8:	ldr	x4, [sp, #40]
     fbc:	cmp	x12, x4
     fc0:	b.ls	eb8 <FSE_decompress_usingDTable+0x454>  // b.plast
     fc4:	cmp	x2, x4
     fc8:	b.eq	ed4 <FSE_decompress_usingDTable+0x470>  // b.none
     fcc:	lsr	w8, w1, #3
     fd0:	sub	x8, x4, x8
     fd4:	sub	x10, x4, x2
     fd8:	lsr	w6, w1, #3
     fdc:	cmp	x2, x8
     fe0:	csel	w8, w6, w10, ls  // ls = plast
     fe4:	csel	w6, w6, w10, ls  // ls = plast
     fe8:	sub	x4, x4, x6
     fec:	str	x4, [sp, #40]
     ff0:	sub	w1, w1, w8, lsl #3
     ff4:	str	w1, [sp, #32]
     ff8:	ldr	x1, [x4]
     ffc:	str	x1, [sp, #24]
    1000:	b	ed4 <FSE_decompress_usingDTable+0x470>
    1004:	mov	x0, #0xffffffffffffffba    	// #-70
    1008:	b	1574 <FSE_decompress_usingDTable+0xb10>
    100c:	mov	x0, #0xffffffffffffffba    	// #-70
    1010:	b	1574 <FSE_decompress_usingDTable+0xb10>
    1014:	mov	x2, #0x28                  	// #40
    1018:	mov	w1, #0x0                   	// #0
    101c:	add	x0, sp, #0x18
    1020:	bl	0 <grub_memset>
    1024:	mov	x0, #0xffffffffffffffb8    	// #-72
    1028:	b	1574 <FSE_decompress_usingDTable+0xb10>
    102c:	str	x2, [sp, #40]
    1030:	ldrb	w0, [x2]
    1034:	str	x0, [sp, #24]
    1038:	cmp	x3, #0x5
    103c:	b.eq	11e0 <FSE_decompress_usingDTable+0x77c>  // b.none
    1040:	b.hi	11bc <FSE_decompress_usingDTable+0x758>  // b.pmore
    1044:	cmp	x3, #0x3
    1048:	b.eq	1064 <FSE_decompress_usingDTable+0x600>  // b.none
    104c:	cmp	x3, #0x4
    1050:	b.ne	11b0 <FSE_decompress_usingDTable+0x74c>  // b.any
    1054:	ldrb	w0, [x2, #3]
    1058:	ldr	x5, [sp, #24]
    105c:	add	x0, x5, x0, lsl #24
    1060:	str	x0, [sp, #24]
    1064:	ldrb	w0, [x2, #2]
    1068:	ldr	x5, [sp, #24]
    106c:	add	x0, x5, x0, lsl #16
    1070:	str	x0, [sp, #24]
    1074:	ldrb	w0, [x2, #1]
    1078:	ldr	x5, [sp, #24]
    107c:	add	x0, x5, x0, lsl #8
    1080:	str	x0, [sp, #24]
    1084:	add	x0, x2, x3
    1088:	ldurb	w5, [x0, #-1]
    108c:	mov	x0, #0xffffffffffffffec    	// #-20
    1090:	cbz	w5, 1574 <FSE_decompress_usingDTable+0xb10>
    1094:	clz	w5, w5
    1098:	mov	w0, #0x9                   	// #9
    109c:	sub	w0, w0, w3
    10a0:	add	w0, w5, w0, lsl #3
    10a4:	sub	w0, w0, #0x1f
    10a8:	str	w0, [sp, #32]
    10ac:	ldrh	w8, [x4]
    10b0:	ldr	w5, [sp, #32]
    10b4:	mvn	w0, w8
    10b8:	and	w11, w0, #0x3f
    10bc:	ldr	x3, [sp, #24]
    10c0:	lsl	x3, x3, x5
    10c4:	lsr	x3, x3, #1
    10c8:	lsr	x3, x3, x0
    10cc:	add	w5, w8, w5
    10d0:	str	w5, [sp, #32]
    10d4:	cmp	w5, #0x40
    10d8:	b.hi	1124 <FSE_decompress_usingDTable+0x6c0>  // b.pmore
    10dc:	ldr	x6, [sp, #40]
    10e0:	cmp	x10, x6
    10e4:	b.ls	11f4 <FSE_decompress_usingDTable+0x790>  // b.plast
    10e8:	cmp	x2, x6
    10ec:	b.eq	1124 <FSE_decompress_usingDTable+0x6c0>  // b.none
    10f0:	lsr	w7, w5, #3
    10f4:	sub	x7, x6, x7
    10f8:	sub	x12, x6, x2
    10fc:	lsr	w0, w5, #3
    1100:	cmp	x2, x7
    1104:	csel	w7, w0, w12, ls  // ls = plast
    1108:	csel	w0, w0, w12, ls  // ls = plast
    110c:	sub	x6, x6, x0
    1110:	str	x6, [sp, #40]
    1114:	sub	w5, w5, w7, lsl #3
    1118:	str	w5, [sp, #32]
    111c:	ldr	x0, [x6]
    1120:	str	x0, [sp, #24]
    1124:	add	x7, x4, #0x4
    1128:	ldr	w0, [sp, #32]
    112c:	ldr	x4, [sp, #24]
    1130:	lsl	x4, x4, x0
    1134:	lsr	x4, x4, #1
    1138:	lsr	x4, x4, x11
    113c:	add	w0, w0, w8
    1140:	str	w0, [sp, #32]
    1144:	cmp	w0, #0x40
    1148:	b.hi	1194 <FSE_decompress_usingDTable+0x730>  // b.pmore
    114c:	ldr	x5, [sp, #40]
    1150:	cmp	x10, x5
    1154:	b.ls	1214 <FSE_decompress_usingDTable+0x7b0>  // b.plast
    1158:	cmp	x2, x5
    115c:	b.eq	1194 <FSE_decompress_usingDTable+0x730>  // b.none
    1160:	lsr	w8, w0, #3
    1164:	sub	x8, x5, x8
    1168:	sub	x11, x5, x2
    116c:	lsr	w6, w0, #3
    1170:	cmp	x2, x8
    1174:	csel	w8, w6, w11, ls  // ls = plast
    1178:	csel	w6, w6, w11, ls  // ls = plast
    117c:	sub	x5, x5, x6
    1180:	str	x5, [sp, #40]
    1184:	sub	w0, w0, w8, lsl #3
    1188:	str	w0, [sp, #32]
    118c:	ldr	x0, [x5]
    1190:	str	x0, [sp, #24]
    1194:	add	x11, x9, x1
    1198:	mov	x8, x9
    119c:	mov	w14, #0x0                   	// #0
    11a0:	mov	w15, #0x1                   	// #1
    11a4:	sub	x13, x11, #0x3
    11a8:	mov	w12, #0x3f                  	// #63
    11ac:	b	134c <FSE_decompress_usingDTable+0x8e8>
    11b0:	cmp	x3, #0x2
    11b4:	b.eq	1074 <FSE_decompress_usingDTable+0x610>  // b.none
    11b8:	b	1084 <FSE_decompress_usingDTable+0x620>
    11bc:	cmp	x3, #0x6
    11c0:	b.eq	11d0 <FSE_decompress_usingDTable+0x76c>  // b.none
    11c4:	ldrb	w5, [x2, #6]
    11c8:	add	x0, x0, x5, lsl #48
    11cc:	str	x0, [sp, #24]
    11d0:	ldrb	w0, [x2, #5]
    11d4:	ldr	x5, [sp, #24]
    11d8:	add	x0, x5, x0, lsl #40
    11dc:	str	x0, [sp, #24]
    11e0:	ldrb	w0, [x2, #4]
    11e4:	ldr	x5, [sp, #24]
    11e8:	add	x0, x5, x0, lsl #32
    11ec:	str	x0, [sp, #24]
    11f0:	b	1054 <FSE_decompress_usingDTable+0x5f0>
    11f4:	lsr	w0, w5, #3
    11f8:	sub	x6, x6, x0
    11fc:	str	x6, [sp, #40]
    1200:	and	w5, w5, #0x7
    1204:	str	w5, [sp, #32]
    1208:	ldr	x0, [x6]
    120c:	str	x0, [sp, #24]
    1210:	b	1124 <FSE_decompress_usingDTable+0x6c0>
    1214:	lsr	w6, w0, #3
    1218:	sub	x5, x5, x6
    121c:	str	x5, [sp, #40]
    1220:	and	w0, w0, #0x7
    1224:	str	w0, [sp, #32]
    1228:	ldr	x0, [x5]
    122c:	str	x0, [sp, #24]
    1230:	b	1194 <FSE_decompress_usingDTable+0x730>
    1234:	lsr	w5, w1, #3
    1238:	sub	x0, x0, x5
    123c:	str	x0, [sp, #40]
    1240:	and	w1, w1, #0x7
    1244:	str	w1, [sp, #32]
    1248:	ldr	x0, [x0]
    124c:	str	x0, [sp, #24]
    1250:	mov	w6, w14
    1254:	b	1270 <FSE_decompress_usingDTable+0x80c>
    1258:	sub	x0, x0, w5, uxtw
    125c:	str	x0, [sp, #40]
    1260:	sub	w1, w1, w5, lsl #3
    1264:	str	w1, [sp, #32]
    1268:	ldr	x0, [x0]
    126c:	str	x0, [sp, #24]
    1270:	cmp	w6, #0x0
    1274:	ccmp	x13, x8, #0x0, eq  // eq = none
    1278:	b.ls	1390 <FSE_decompress_usingDTable+0x92c>  // b.plast
    127c:	lsl	x3, x3, #2
    1280:	add	x0, x7, x3
    1284:	ldrh	w3, [x7, x3]
    1288:	ldrb	w6, [x0, #2]
    128c:	ldrb	w18, [x0, #3]
    1290:	ldr	x1, [sp, #24]
    1294:	ldr	w0, [sp, #32]
    1298:	add	w5, w18, w0
    129c:	strb	w6, [x8]
    12a0:	lsl	x4, x4, #2
    12a4:	add	x6, x7, x4
    12a8:	ldrh	w16, [x7, x4]
    12ac:	ldrb	w4, [x6, #2]
    12b0:	ldrb	w17, [x6, #3]
    12b4:	add	w6, w5, w17
    12b8:	strb	w4, [x8, #1]
    12bc:	lsl	x0, x1, x0
    12c0:	lsr	x0, x0, #1
    12c4:	sub	w18, w12, w18
    12c8:	lsr	x0, x0, x18
    12cc:	add	x0, x0, w3, uxth
    12d0:	lsl	x0, x0, #2
    12d4:	add	x3, x7, x0
    12d8:	ldrb	w30, [x3, #2]
    12dc:	ldrb	w18, [x3, #3]
    12e0:	add	w4, w6, w18
    12e4:	lsl	x3, x1, x6
    12e8:	lsr	x3, x3, #1
    12ec:	sub	w18, w12, w18
    12f0:	lsr	x3, x3, x18
    12f4:	ldrh	w0, [x7, x0]
    12f8:	add	x3, x3, x0
    12fc:	strb	w30, [x8, #2]
    1300:	lsl	x5, x1, x5
    1304:	lsr	x5, x5, #1
    1308:	sub	w17, w12, w17
    130c:	lsr	x5, x5, x17
    1310:	add	x5, x5, w16, uxth
    1314:	lsl	x5, x5, #2
    1318:	add	x0, x7, x5
    131c:	ldrb	w6, [x0, #2]
    1320:	ldrb	w0, [x0, #3]
    1324:	add	w16, w4, w0
    1328:	str	w16, [sp, #32]
    132c:	lsl	x1, x1, x4
    1330:	lsr	x4, x1, #1
    1334:	sub	w1, w12, w0
    1338:	lsr	x1, x4, x1
    133c:	ldrh	w4, [x7, x5]
    1340:	add	x4, x1, x4
    1344:	strb	w6, [x8, #3]
    1348:	add	x8, x8, #0x4
    134c:	ldr	w1, [sp, #32]
    1350:	cmp	w1, #0x40
    1354:	b.hi	1390 <FSE_decompress_usingDTable+0x92c>  // b.pmore
    1358:	ldr	x0, [sp, #40]
    135c:	cmp	x10, x0
    1360:	b.ls	1234 <FSE_decompress_usingDTable+0x7d0>  // b.plast
    1364:	cmp	x2, x0
    1368:	b.eq	1390 <FSE_decompress_usingDTable+0x92c>  // b.none
    136c:	lsr	w5, w1, #3
    1370:	lsr	w16, w1, #3
    1374:	sub	x16, x0, x16
    1378:	mov	w6, w14
    137c:	cmp	x2, x16
    1380:	b.ls	1258 <FSE_decompress_usingDTable+0x7f4>  // b.plast
    1384:	sub	w5, w0, w2
    1388:	mov	w6, w15
    138c:	b	1258 <FSE_decompress_usingDTable+0x7f4>
    1390:	sub	x11, x11, #0x2
    1394:	mov	w6, #0x3f                  	// #63
    1398:	b	13dc <FSE_decompress_usingDTable+0x978>
    139c:	lsr	w5, w1, #3
    13a0:	sub	x0, x0, x5
    13a4:	str	x0, [sp, #40]
    13a8:	and	w1, w1, #0x7
    13ac:	str	w1, [sp, #32]
    13b0:	ldr	x0, [x0]
    13b4:	str	x0, [sp, #24]
    13b8:	b	1470 <FSE_decompress_usingDTable+0xa0c>
    13bc:	lsr	w8, w0, #3
    13c0:	sub	x1, x1, x8
    13c4:	str	x1, [sp, #40]
    13c8:	and	w0, w0, #0x7
    13cc:	str	w0, [sp, #32]
    13d0:	ldr	x0, [x1]
    13d4:	str	x0, [sp, #24]
    13d8:	mov	x8, x5
    13dc:	cmp	x11, x8
    13e0:	b.cc	1510 <FSE_decompress_usingDTable+0xaac>  // b.lo, b.ul, b.last
    13e4:	lsl	x3, x3, #2
    13e8:	add	x0, x7, x3
    13ec:	ldrb	w12, [x0, #2]
    13f0:	ldrb	w1, [x0, #3]
    13f4:	ldr	w0, [sp, #32]
    13f8:	ldr	x5, [sp, #24]
    13fc:	lsl	x5, x5, x0
    1400:	lsr	x5, x5, #1
    1404:	sub	w13, w6, w1
    1408:	lsr	x5, x5, x13
    140c:	add	w1, w1, w0
    1410:	str	w1, [sp, #32]
    1414:	ldrh	w3, [x7, x3]
    1418:	add	x3, x3, x5
    141c:	strb	w12, [x8]
    1420:	cmp	w1, #0x40
    1424:	b.hi	1560 <FSE_decompress_usingDTable+0xafc>  // b.pmore
    1428:	ldr	x0, [sp, #40]
    142c:	cmp	x10, x0
    1430:	b.ls	139c <FSE_decompress_usingDTable+0x938>  // b.plast
    1434:	cmp	x2, x0
    1438:	b.eq	1470 <FSE_decompress_usingDTable+0xa0c>  // b.none
    143c:	lsr	w12, w1, #3
    1440:	sub	x12, x0, x12
    1444:	sub	x13, x0, x2
    1448:	lsr	w5, w1, #3
    144c:	cmp	x2, x12
    1450:	csel	w12, w5, w13, ls  // ls = plast
    1454:	csel	w5, w5, w13, ls  // ls = plast
    1458:	sub	x0, x0, x5
    145c:	str	x0, [sp, #40]
    1460:	sub	w1, w1, w12, lsl #3
    1464:	str	w1, [sp, #32]
    1468:	ldr	x0, [x0]
    146c:	str	x0, [sp, #24]
    1470:	add	x0, x8, #0x1
    1474:	cmp	x11, x0
    1478:	b.cc	1518 <FSE_decompress_usingDTable+0xab4>  // b.lo, b.ul, b.last
    147c:	lsl	x4, x4, #2
    1480:	add	x0, x7, x4
    1484:	ldrb	w12, [x0, #2]
    1488:	ldrb	w0, [x0, #3]
    148c:	ldr	w5, [sp, #32]
    1490:	ldr	x1, [sp, #24]
    1494:	lsl	x1, x1, x5
    1498:	lsr	x1, x1, #1
    149c:	sub	w13, w6, w0
    14a0:	lsr	x1, x1, x13
    14a4:	add	w0, w0, w5
    14a8:	str	w0, [sp, #32]
    14ac:	ldrh	w4, [x7, x4]
    14b0:	add	x4, x4, x1
    14b4:	add	x5, x8, #0x2
    14b8:	sturb	w12, [x5, #-1]
    14bc:	cmp	w0, #0x40
    14c0:	b.hi	154c <FSE_decompress_usingDTable+0xae8>  // b.pmore
    14c4:	ldr	x1, [sp, #40]
    14c8:	cmp	x10, x1
    14cc:	b.ls	13bc <FSE_decompress_usingDTable+0x958>  // b.plast
    14d0:	cmp	x2, x1
    14d4:	b.eq	13d8 <FSE_decompress_usingDTable+0x974>  // b.none
    14d8:	lsr	w12, w0, #3
    14dc:	sub	x12, x1, x12
    14e0:	sub	x13, x1, x2
    14e4:	lsr	w8, w0, #3
    14e8:	cmp	x2, x12
    14ec:	csel	w12, w8, w13, ls  // ls = plast
    14f0:	csel	w8, w8, w13, ls  // ls = plast
    14f4:	sub	x1, x1, x8
    14f8:	str	x1, [sp, #40]
    14fc:	sub	w0, w0, w12, lsl #3
    1500:	str	w0, [sp, #32]
    1504:	ldr	x0, [x1]
    1508:	str	x0, [sp, #24]
    150c:	b	13d8 <FSE_decompress_usingDTable+0x974>
    1510:	mov	x0, #0xffffffffffffffba    	// #-70
    1514:	b	1574 <FSE_decompress_usingDTable+0xb10>
    1518:	mov	x0, #0xffffffffffffffba    	// #-70
    151c:	b	1574 <FSE_decompress_usingDTable+0xb10>
    1520:	add	x3, x7, x3, lsl #2
    1524:	ldrb	w1, [x3, #2]
    1528:	add	x0, x6, #0x3
    152c:	strb	w1, [x6, #2]
    1530:	b	1544 <FSE_decompress_usingDTable+0xae0>
    1534:	add	x0, x7, x0, lsl #2
    1538:	ldrb	w1, [x0, #2]
    153c:	add	x0, x6, #0x2
    1540:	strb	w1, [x6, #1]
    1544:	sub	x0, x0, x9
    1548:	b	1574 <FSE_decompress_usingDTable+0xb10>
    154c:	add	x3, x7, x3, lsl #2
    1550:	ldrb	w1, [x3, #2]
    1554:	add	x0, x8, #0x3
    1558:	strb	w1, [x8, #2]
    155c:	b	1570 <FSE_decompress_usingDTable+0xb0c>
    1560:	add	x4, x7, x4, lsl #2
    1564:	ldrb	w1, [x4, #2]
    1568:	add	x0, x8, #0x2
    156c:	strb	w1, [x8, #1]
    1570:	sub	x0, x0, x9
    1574:	ldp	x29, x30, [sp], #64
    1578:	ret

000000000000157c <FSE_decompress_wksp>:
    157c:	sub	sp, sp, #0x260
    1580:	stp	x29, x30, [sp]
    1584:	mov	x29, sp
    1588:	stp	x19, x20, [sp, #16]
    158c:	stp	x21, x22, [sp, #32]
    1590:	stp	x23, x24, [sp, #48]
    1594:	str	x25, [sp, #64]
    1598:	mov	x23, x0
    159c:	mov	x24, x1
    15a0:	mov	x20, x2
    15a4:	mov	x21, x3
    15a8:	mov	x25, x4
    15ac:	mov	w22, w5
    15b0:	mov	w2, #0xff                  	// #255
    15b4:	str	w2, [sp, #88]
    15b8:	mov	x4, x3
    15bc:	mov	x3, x20
    15c0:	add	x2, sp, #0x5c
    15c4:	add	x1, sp, #0x58
    15c8:	add	x0, sp, #0x60
    15cc:	bl	58 <FSE_readNCount>
    15d0:	mov	x19, x0
    15d4:	cmn	x0, #0x78
    15d8:	b.hi	162c <FSE_decompress_wksp+0xb0>  // b.pmore
    15dc:	ldr	w3, [sp, #92]
    15e0:	cmp	w3, w22
    15e4:	b.hi	1628 <FSE_decompress_wksp+0xac>  // b.pmore
    15e8:	ldr	w2, [sp, #88]
    15ec:	add	x1, sp, #0x60
    15f0:	mov	x0, x25
    15f4:	bl	804 <FSE_buildDTable>
    15f8:	cmn	x0, #0x78
    15fc:	b.ls	1608 <FSE_decompress_wksp+0x8c>  // b.plast
    1600:	mov	x19, x0
    1604:	b	162c <FSE_decompress_wksp+0xb0>
    1608:	mov	x4, x25
    160c:	sub	x3, x21, x19
    1610:	add	x2, x20, x19
    1614:	mov	x1, x24
    1618:	mov	x0, x23
    161c:	bl	a64 <FSE_decompress_usingDTable>
    1620:	mov	x19, x0
    1624:	b	162c <FSE_decompress_wksp+0xb0>
    1628:	mov	x19, #0xffffffffffffffd4    	// #-44
    162c:	mov	x0, x19
    1630:	ldp	x19, x20, [sp, #16]
    1634:	ldp	x21, x22, [sp, #32]
    1638:	ldp	x23, x24, [sp, #48]
    163c:	ldr	x25, [sp, #64]
    1640:	ldp	x29, x30, [sp]
    1644:	add	sp, sp, #0x260
    1648:	ret

000000000000164c <FSE_decompress>:
    164c:	mov	x12, #0x4020                	// #16416
    1650:	sub	sp, sp, x12
    1654:	stp	x29, x30, [sp]
    1658:	mov	x29, sp
    165c:	mov	w5, #0xc                   	// #12
    1660:	add	x4, sp, #0x18
    1664:	bl	157c <FSE_decompress_wksp>
    1668:	ldp	x29, x30, [sp]
    166c:	mov	x12, #0x4020                	// #16416
    1670:	add	sp, sp, x12
    1674:	ret
    1678:	stp	x29, x30, [sp, #-32]!
    167c:	mov	x29, sp
    1680:	mov	x2, #0x4                   	// #4
    1684:	mov	x1, x0
    1688:	add	x0, sp, #0x18
    168c:	bl	0 <grub_memmove>
    1690:	ldr	w0, [sp, #24]
    1694:	ldp	x29, x30, [sp], #32
    1698:	ret
    169c:	stp	x29, x30, [sp, #-112]!
    16a0:	mov	x29, sp
    16a4:	stp	x19, x20, [sp, #16]
    16a8:	stp	x21, x22, [sp, #32]
    16ac:	str	x23, [sp, #48]
    16b0:	mov	x19, x0
    16b4:	mov	x21, x1
    16b8:	mov	x20, x2
    16bc:	mov	x22, x3
    16c0:	mov	x23, x4
    16c4:	mov	x0, x4
    16c8:	bl	1678 <FSE_decompress+0x2c>
    16cc:	ubfx	x2, x0, #16, #8
    16d0:	cbz	x22, 1728 <FSE_decompress+0xdc>
    16d4:	str	x20, [sp, #96]
    16d8:	add	x7, x20, #0x8
    16dc:	str	x7, [sp, #104]
    16e0:	cmp	x22, #0x7
    16e4:	b.ls	1740 <FSE_decompress+0xf4>  // b.plast
    16e8:	sub	x0, x22, #0x8
    16ec:	add	x1, x20, x0
    16f0:	str	x1, [sp, #88]
    16f4:	ldr	x0, [x20, x0]
    16f8:	str	x0, [sp, #72]
    16fc:	add	x0, x20, x22
    1700:	ldurb	w1, [x0, #-1]
    1704:	mov	x0, #0xffffffffffffffff    	// #-1
    1708:	cbz	w1, 19b8 <FSE_decompress+0x36c>
    170c:	clz	w1, w1
    1710:	sub	w1, w1, #0x17
    1714:	str	w1, [sp, #80]
    1718:	cmn	x22, #0x78
    171c:	b.ls	17c0 <FSE_decompress+0x174>  // b.plast
    1720:	mov	x0, x22
    1724:	b	19b8 <FSE_decompress+0x36c>
    1728:	mov	x2, #0x28                  	// #40
    172c:	mov	w1, #0x0                   	// #0
    1730:	add	x0, sp, #0x48
    1734:	bl	0 <grub_memset>
    1738:	mov	x0, #0xffffffffffffffb8    	// #-72
    173c:	b	19b8 <FSE_decompress+0x36c>
    1740:	str	x20, [sp, #88]
    1744:	ldrb	w0, [x20]
    1748:	str	x0, [sp, #72]
    174c:	cmp	x22, #0x5
    1750:	b.eq	1814 <FSE_decompress+0x1c8>  // b.none
    1754:	b.hi	17f0 <FSE_decompress+0x1a4>  // b.pmore
    1758:	cmp	x22, #0x3
    175c:	b.eq	1778 <FSE_decompress+0x12c>  // b.none
    1760:	cmp	x22, #0x4
    1764:	b.ne	17e4 <FSE_decompress+0x198>  // b.any
    1768:	ldrb	w0, [x20, #3]
    176c:	ldr	x1, [sp, #72]
    1770:	add	x0, x1, x0, lsl #24
    1774:	str	x0, [sp, #72]
    1778:	ldrb	w0, [x20, #2]
    177c:	ldr	x1, [sp, #72]
    1780:	add	x0, x1, x0, lsl #16
    1784:	str	x0, [sp, #72]
    1788:	ldrb	w0, [x20, #1]
    178c:	ldr	x1, [sp, #72]
    1790:	add	x0, x1, x0, lsl #8
    1794:	str	x0, [sp, #72]
    1798:	add	x0, x20, x22
    179c:	ldurb	w1, [x0, #-1]
    17a0:	mov	x0, #0xffffffffffffffec    	// #-20
    17a4:	cbz	w1, 19b8 <FSE_decompress+0x36c>
    17a8:	clz	w0, w1
    17ac:	mov	w1, #0x9                   	// #9
    17b0:	sub	w1, w1, w22
    17b4:	add	w1, w0, w1, lsl #3
    17b8:	sub	w1, w1, #0x1f
    17bc:	str	w1, [sp, #80]
    17c0:	add	x6, x19, x21
    17c4:	add	x4, x23, #0x4
    17c8:	mov	w0, w2
    17cc:	mov	w9, #0x0                   	// #0
    17d0:	mov	w10, #0x1                   	// #1
    17d4:	sub	x8, x6, #0x3
    17d8:	neg	w5, w2
    17dc:	and	w5, w5, #0x3f
    17e0:	b	1900 <FSE_decompress+0x2b4>
    17e4:	cmp	x22, #0x2
    17e8:	b.eq	1788 <FSE_decompress+0x13c>  // b.none
    17ec:	b	1798 <FSE_decompress+0x14c>
    17f0:	cmp	x22, #0x6
    17f4:	b.eq	1804 <FSE_decompress+0x1b8>  // b.none
    17f8:	ldrb	w1, [x20, #6]
    17fc:	add	x0, x0, x1, lsl #48
    1800:	str	x0, [sp, #72]
    1804:	ldrb	w0, [x20, #5]
    1808:	ldr	x1, [sp, #72]
    180c:	add	x0, x1, x0, lsl #40
    1810:	str	x0, [sp, #72]
    1814:	ldrb	w0, [x20, #4]
    1818:	ldr	x1, [sp, #72]
    181c:	add	x0, x1, x0, lsl #32
    1820:	str	x0, [sp, #72]
    1824:	b	1768 <FSE_decompress+0x11c>
    1828:	lsr	w3, w2, #3
    182c:	sub	x1, x1, x3
    1830:	str	x1, [sp, #88]
    1834:	and	w2, w2, #0x7
    1838:	str	w2, [sp, #80]
    183c:	ldr	x1, [x1]
    1840:	str	x1, [sp, #72]
    1844:	mov	w11, w9
    1848:	b	1864 <FSE_decompress+0x218>
    184c:	sub	x1, x1, w3, uxtw
    1850:	str	x1, [sp, #88]
    1854:	sub	w2, w2, w3, lsl #3
    1858:	str	w2, [sp, #80]
    185c:	ldr	x1, [x1]
    1860:	str	x1, [sp, #72]
    1864:	cmp	w11, #0x0
    1868:	ccmp	x19, x8, #0x2, eq  // eq = none
    186c:	b.cs	1944 <FSE_decompress+0x2f8>  // b.hs, b.nlast
    1870:	ldr	x3, [sp, #72]
    1874:	ldr	w11, [sp, #80]
    1878:	lsl	x1, x3, x11
    187c:	lsr	x1, x1, x5
    1880:	lsl	x1, x1, #1
    1884:	add	x2, x4, x1
    1888:	ldrb	w1, [x4, x1]
    188c:	ldrb	w2, [x2, #1]
    1890:	add	w2, w2, w11
    1894:	strb	w1, [x19]
    1898:	lsl	x1, x3, x2
    189c:	lsr	x1, x1, x5
    18a0:	lsl	x1, x1, #1
    18a4:	add	x12, x4, x1
    18a8:	ldrb	w11, [x4, x1]
    18ac:	ldrb	w1, [x12, #1]
    18b0:	add	w2, w1, w2
    18b4:	strb	w11, [x19, #1]
    18b8:	lsl	x1, x3, x2
    18bc:	lsr	x1, x1, x5
    18c0:	lsl	x1, x1, #1
    18c4:	add	x12, x4, x1
    18c8:	ldrb	w11, [x4, x1]
    18cc:	ldrb	w1, [x12, #1]
    18d0:	add	w1, w1, w2
    18d4:	strb	w11, [x19, #2]
    18d8:	add	x19, x19, #0x4
    18dc:	lsl	x3, x3, x1
    18e0:	lsr	x3, x3, x5
    18e4:	lsl	x3, x3, #1
    18e8:	add	x2, x4, x3
    18ec:	ldrb	w3, [x4, x3]
    18f0:	ldrb	w2, [x2, #1]
    18f4:	add	w1, w2, w1
    18f8:	str	w1, [sp, #80]
    18fc:	sturb	w3, [x19, #-1]
    1900:	ldr	w2, [sp, #80]
    1904:	cmp	w2, #0x40
    1908:	b.hi	1944 <FSE_decompress+0x2f8>  // b.pmore
    190c:	ldr	x1, [sp, #88]
    1910:	cmp	x7, x1
    1914:	b.ls	1828 <FSE_decompress+0x1dc>  // b.plast
    1918:	cmp	x20, x1
    191c:	b.eq	1964 <FSE_decompress+0x318>  // b.none
    1920:	lsr	w3, w2, #3
    1924:	lsr	w12, w2, #3
    1928:	sub	x12, x1, x12
    192c:	mov	w11, w9
    1930:	cmp	x20, x12
    1934:	b.ls	184c <FSE_decompress+0x200>  // b.plast
    1938:	sub	w3, w1, w20
    193c:	mov	w11, w10
    1940:	b	184c <FSE_decompress+0x200>
    1944:	cmp	x6, x19
    1948:	b.hi	196c <FSE_decompress+0x320>  // b.pmore
    194c:	b	19a8 <FSE_decompress+0x35c>
    1950:	ldr	w0, [sp, #80]
    1954:	cmp	w0, #0x40
    1958:	mov	x0, #0xffffffffffffffec    	// #-20
    195c:	csel	x0, x21, x0, eq  // eq = none
    1960:	b	19b8 <FSE_decompress+0x36c>
    1964:	cmp	x6, x19
    1968:	b.ls	1950 <FSE_decompress+0x304>  // b.plast
    196c:	ldr	x7, [sp, #72]
    1970:	ldr	w1, [sp, #80]
    1974:	neg	w0, w0
    1978:	and	w5, w0, #0x3f
    197c:	lsl	x0, x7, x1
    1980:	lsr	x0, x0, x5
    1984:	lsl	x0, x0, #1
    1988:	add	x3, x4, x0
    198c:	ldrb	w2, [x4, x0]
    1990:	ldrb	w3, [x3, #1]
    1994:	add	w1, w1, w3
    1998:	strb	w2, [x19], #1
    199c:	cmp	x6, x19
    19a0:	b.ne	197c <FSE_decompress+0x330>  // b.any
    19a4:	str	w1, [sp, #80]
    19a8:	mov	x0, #0xffffffffffffffec    	// #-20
    19ac:	ldr	x1, [sp, #88]
    19b0:	cmp	x20, x1
    19b4:	b.eq	1950 <FSE_decompress+0x304>  // b.none
    19b8:	ldp	x19, x20, [sp, #16]
    19bc:	ldp	x21, x22, [sp, #32]
    19c0:	ldr	x23, [sp, #48]
    19c4:	ldp	x29, x30, [sp], #112
    19c8:	ret
    19cc:	stp	x29, x30, [sp, #-320]!
    19d0:	mov	x29, sp
    19d4:	stp	x21, x22, [sp, #32]
    19d8:	str	x1, [sp, #104]
    19dc:	str	x4, [sp, #112]
    19e0:	mov	x22, #0xffffffffffffffec    	// #-20
    19e4:	cmp	x3, #0x9
    19e8:	b.ls	1a58 <FSE_decompress+0x40c>  // b.plast
    19ec:	stp	x19, x20, [sp, #16]
    19f0:	stp	x23, x24, [sp, #48]
    19f4:	stp	x25, x26, [sp, #64]
    19f8:	stp	x27, x28, [sp, #80]
    19fc:	mov	x21, x0
    1a00:	mov	x19, x2
    1a04:	mov	x20, x3
    1a08:	ldrh	w23, [x2]
    1a0c:	and	x27, x23, #0xffff
    1a10:	ldrh	w28, [x2, #2]
    1a14:	and	x26, x28, #0xffff
    1a18:	ldrh	w25, [x2, #4]
    1a1c:	and	x0, x25, #0xffff
    1a20:	str	x0, [sp, #120]
    1a24:	sub	x24, x3, w25, uxth
    1a28:	add	x0, x26, w23, uxth
    1a2c:	sub	x24, x24, x0
    1a30:	sub	x22, x24, #0x6
    1a34:	mov	x0, x4
    1a38:	bl	1678 <FSE_decompress+0x2c>
    1a3c:	cmp	x20, x22
    1a40:	b.cs	1a68 <FSE_decompress+0x41c>  // b.hs, b.nlast
    1a44:	mov	x22, #0xffffffffffffffec    	// #-20
    1a48:	ldp	x19, x20, [sp, #16]
    1a4c:	ldp	x23, x24, [sp, #48]
    1a50:	ldp	x25, x26, [sp, #64]
    1a54:	ldp	x27, x28, [sp, #80]
    1a58:	mov	x0, x22
    1a5c:	ldp	x21, x22, [sp, #32]
    1a60:	ldp	x29, x30, [sp], #320
    1a64:	ret
    1a68:	cbz	x27, 1abc <FSE_decompress+0x470>
    1a6c:	add	x1, x19, #0x6
    1a70:	ubfx	x0, x0, #16, #8
    1a74:	str	x0, [sp, #128]
    1a78:	str	x1, [sp, #184]
    1a7c:	add	x3, x19, #0xe
    1a80:	str	x3, [sp, #192]
    1a84:	cmp	x27, #0x7
    1a88:	b.ls	1ae4 <FSE_decompress+0x498>  // b.plast
    1a8c:	sub	x0, x27, #0x8
    1a90:	add	x2, x1, x0
    1a94:	str	x2, [sp, #176]
    1a98:	ldr	x0, [x1, x0]
    1a9c:	str	x0, [sp, #160]
    1aa0:	add	x0, x1, x27
    1aa4:	ldurb	w0, [x0, #-1]
    1aa8:	cbz	w0, 37dc <FSE_decompress+0x2190>
    1aac:	clz	w0, w0
    1ab0:	sub	w0, w0, #0x17
    1ab4:	str	w0, [sp, #168]
    1ab8:	b	1b60 <FSE_decompress+0x514>
    1abc:	mov	x2, #0x28                  	// #40
    1ac0:	mov	w1, #0x0                   	// #0
    1ac4:	add	x0, sp, #0xa0
    1ac8:	bl	0 <grub_memset>
    1acc:	mov	x22, #0xffffffffffffffb8    	// #-72
    1ad0:	ldp	x19, x20, [sp, #16]
    1ad4:	ldp	x23, x24, [sp, #48]
    1ad8:	ldp	x25, x26, [sp, #64]
    1adc:	ldp	x27, x28, [sp, #80]
    1ae0:	b	1a58 <FSE_decompress+0x40c>
    1ae4:	str	x1, [sp, #176]
    1ae8:	ldrb	w0, [x19, #6]
    1aec:	str	x0, [sp, #160]
    1af0:	cmp	w23, #0x5
    1af4:	b.eq	1bdc <FSE_decompress+0x590>  // b.none
    1af8:	b.hi	1bb8 <FSE_decompress+0x56c>  // b.pmore
    1afc:	cmp	w23, #0x3
    1b00:	b.eq	1b1c <FSE_decompress+0x4d0>  // b.none
    1b04:	cmp	w23, #0x4
    1b08:	b.ne	1bac <FSE_decompress+0x560>  // b.any
    1b0c:	ldrb	w0, [x19, #9]
    1b10:	ldr	x2, [sp, #160]
    1b14:	add	x0, x2, x0, lsl #24
    1b18:	str	x0, [sp, #160]
    1b1c:	ldrb	w0, [x19, #8]
    1b20:	ldr	x2, [sp, #160]
    1b24:	add	x0, x2, x0, lsl #16
    1b28:	str	x0, [sp, #160]
    1b2c:	ldrb	w0, [x19, #7]
    1b30:	ldr	x2, [sp, #160]
    1b34:	add	x0, x2, x0, lsl #8
    1b38:	str	x0, [sp, #160]
    1b3c:	add	x0, x1, x27
    1b40:	ldurb	w0, [x0, #-1]
    1b44:	cbz	w0, 37f4 <FSE_decompress+0x21a8>
    1b48:	clz	w2, w0
    1b4c:	mov	w0, #0x9                   	// #9
    1b50:	sub	w0, w0, w23
    1b54:	add	w0, w2, w0, lsl #3
    1b58:	sub	w0, w0, #0x1f
    1b5c:	str	w0, [sp, #168]
    1b60:	cbz	x26, 1bf0 <FSE_decompress+0x5a4>
    1b64:	add	x0, x1, x27
    1b68:	str	x0, [sp, #224]
    1b6c:	add	x5, x0, #0x8
    1b70:	str	x5, [sp, #232]
    1b74:	cmp	x26, #0x7
    1b78:	b.ls	1c18 <FSE_decompress+0x5cc>  // b.plast
    1b7c:	sub	x2, x26, #0x8
    1b80:	add	x4, x0, x2
    1b84:	str	x4, [sp, #216]
    1b88:	ldr	x2, [x0, x2]
    1b8c:	str	x2, [sp, #200]
    1b90:	add	x2, x0, x26
    1b94:	ldurb	w2, [x2, #-1]
    1b98:	cbz	w2, 37ac <FSE_decompress+0x2160>
    1b9c:	clz	w2, w2
    1ba0:	sub	w2, w2, #0x17
    1ba4:	str	w2, [sp, #208]
    1ba8:	b	1c94 <FSE_decompress+0x648>
    1bac:	cmp	w23, #0x2
    1bb0:	b.eq	1b2c <FSE_decompress+0x4e0>  // b.none
    1bb4:	b	1b3c <FSE_decompress+0x4f0>
    1bb8:	cmp	w23, #0x6
    1bbc:	b.eq	1bcc <FSE_decompress+0x580>  // b.none
    1bc0:	ldrb	w2, [x19, #12]
    1bc4:	add	x0, x0, x2, lsl #48
    1bc8:	str	x0, [sp, #160]
    1bcc:	ldrb	w0, [x19, #11]
    1bd0:	ldr	x2, [sp, #160]
    1bd4:	add	x0, x2, x0, lsl #40
    1bd8:	str	x0, [sp, #160]
    1bdc:	ldrb	w0, [x19, #10]
    1be0:	ldr	x2, [sp, #160]
    1be4:	add	x0, x2, x0, lsl #32
    1be8:	str	x0, [sp, #160]
    1bec:	b	1b0c <FSE_decompress+0x4c0>
    1bf0:	mov	x2, #0x28                  	// #40
    1bf4:	mov	w1, #0x0                   	// #0
    1bf8:	add	x0, sp, #0xc8
    1bfc:	bl	0 <grub_memset>
    1c00:	mov	x22, #0xffffffffffffffb8    	// #-72
    1c04:	ldp	x19, x20, [sp, #16]
    1c08:	ldp	x23, x24, [sp, #48]
    1c0c:	ldp	x25, x26, [sp, #64]
    1c10:	ldp	x27, x28, [sp, #80]
    1c14:	b	1a58 <FSE_decompress+0x40c>
    1c18:	str	x0, [sp, #216]
    1c1c:	ldrb	w2, [x1, x27]
    1c20:	str	x2, [sp, #200]
    1c24:	cmp	w28, #0x5
    1c28:	b.eq	1d18 <FSE_decompress+0x6cc>  // b.none
    1c2c:	b.hi	1cf4 <FSE_decompress+0x6a8>  // b.pmore
    1c30:	cmp	w28, #0x3
    1c34:	b.eq	1c50 <FSE_decompress+0x604>  // b.none
    1c38:	cmp	w28, #0x4
    1c3c:	b.ne	1ce8 <FSE_decompress+0x69c>  // b.any
    1c40:	ldrb	w2, [x0, #3]
    1c44:	ldr	x4, [sp, #200]
    1c48:	add	x2, x4, x2, lsl #24
    1c4c:	str	x2, [sp, #200]
    1c50:	ldrb	w2, [x0, #2]
    1c54:	ldr	x4, [sp, #200]
    1c58:	add	x2, x4, x2, lsl #16
    1c5c:	str	x2, [sp, #200]
    1c60:	ldrb	w2, [x0, #1]
    1c64:	ldr	x4, [sp, #200]
    1c68:	add	x2, x4, x2, lsl #8
    1c6c:	str	x2, [sp, #200]
    1c70:	add	x2, x0, x26
    1c74:	ldurb	w2, [x2, #-1]
    1c78:	cbz	w2, 37c4 <FSE_decompress+0x2178>
    1c7c:	clz	w4, w2
    1c80:	mov	w2, #0x9                   	// #9
    1c84:	sub	w2, w2, w28
    1c88:	add	w2, w4, w2, lsl #3
    1c8c:	sub	w2, w2, #0x1f
    1c90:	str	w2, [sp, #208]
    1c94:	ldr	x2, [sp, #120]
    1c98:	cbz	x2, 1d2c <FSE_decompress+0x6e0>
    1c9c:	add	x2, x0, x26
    1ca0:	str	x2, [sp, #264]
    1ca4:	add	x6, x2, #0x8
    1ca8:	str	x6, [sp, #272]
    1cac:	ldr	x8, [sp, #120]
    1cb0:	cmp	x8, #0x7
    1cb4:	b.ls	1d54 <FSE_decompress+0x708>  // b.plast
    1cb8:	sub	x4, x8, #0x8
    1cbc:	add	x7, x2, x4
    1cc0:	str	x7, [sp, #256]
    1cc4:	ldr	x4, [x2, x4]
    1cc8:	str	x4, [sp, #240]
    1ccc:	add	x4, x2, x8
    1cd0:	ldurb	w4, [x4, #-1]
    1cd4:	cbz	w4, 377c <FSE_decompress+0x2130>
    1cd8:	clz	w4, w4
    1cdc:	sub	w4, w4, #0x17
    1ce0:	str	w4, [sp, #248]
    1ce4:	b	1dd4 <FSE_decompress+0x788>
    1ce8:	cmp	w28, #0x2
    1cec:	b.eq	1c60 <FSE_decompress+0x614>  // b.none
    1cf0:	b	1c70 <FSE_decompress+0x624>
    1cf4:	cmp	w28, #0x6
    1cf8:	b.eq	1d08 <FSE_decompress+0x6bc>  // b.none
    1cfc:	ldrb	w4, [x0, #6]
    1d00:	add	x2, x2, x4, lsl #48
    1d04:	str	x2, [sp, #200]
    1d08:	ldrb	w2, [x0, #5]
    1d0c:	ldr	x4, [sp, #200]
    1d10:	add	x2, x4, x2, lsl #40
    1d14:	str	x2, [sp, #200]
    1d18:	ldrb	w2, [x0, #4]
    1d1c:	ldr	x4, [sp, #200]
    1d20:	add	x2, x4, x2, lsl #32
    1d24:	str	x2, [sp, #200]
    1d28:	b	1c40 <FSE_decompress+0x5f4>
    1d2c:	mov	x2, #0x28                  	// #40
    1d30:	mov	w1, #0x0                   	// #0
    1d34:	add	x0, sp, #0xf0
    1d38:	bl	0 <grub_memset>
    1d3c:	mov	x22, #0xffffffffffffffb8    	// #-72
    1d40:	ldp	x19, x20, [sp, #16]
    1d44:	ldp	x23, x24, [sp, #48]
    1d48:	ldp	x25, x26, [sp, #64]
    1d4c:	ldp	x27, x28, [sp, #80]
    1d50:	b	1a58 <FSE_decompress+0x40c>
    1d54:	str	x2, [sp, #256]
    1d58:	ldrb	w4, [x0, x26]
    1d5c:	str	x4, [sp, #240]
    1d60:	cmp	w25, #0x5
    1d64:	b.eq	1e6c <FSE_decompress+0x820>  // b.none
    1d68:	b.hi	1e48 <FSE_decompress+0x7fc>  // b.pmore
    1d6c:	cmp	w25, #0x3
    1d70:	b.eq	1d8c <FSE_decompress+0x740>  // b.none
    1d74:	cmp	w25, #0x4
    1d78:	b.ne	1e3c <FSE_decompress+0x7f0>  // b.any
    1d7c:	ldrb	w4, [x2, #3]
    1d80:	ldr	x7, [sp, #240]
    1d84:	add	x4, x7, x4, lsl #24
    1d88:	str	x4, [sp, #240]
    1d8c:	ldrb	w4, [x2, #2]
    1d90:	ldr	x7, [sp, #240]
    1d94:	add	x4, x7, x4, lsl #16
    1d98:	str	x4, [sp, #240]
    1d9c:	ldrb	w4, [x2, #1]
    1da0:	ldr	x7, [sp, #240]
    1da4:	add	x4, x7, x4, lsl #8
    1da8:	str	x4, [sp, #240]
    1dac:	ldr	x4, [sp, #120]
    1db0:	add	x4, x2, x4
    1db4:	ldurb	w4, [x4, #-1]
    1db8:	cbz	w4, 3794 <FSE_decompress+0x2148>
    1dbc:	clz	w7, w4
    1dc0:	mov	w4, #0x9                   	// #9
    1dc4:	sub	w4, w4, w25
    1dc8:	add	w4, w7, w4, lsl #3
    1dcc:	sub	w4, w4, #0x1f
    1dd0:	str	w4, [sp, #248]
    1dd4:	cbz	x22, 1e80 <FSE_decompress+0x834>
    1dd8:	ldr	x4, [sp, #120]
    1ddc:	add	x4, x2, x4
    1de0:	str	x4, [sp, #304]
    1de4:	add	x8, x4, #0x8
    1de8:	str	x8, [sp, #312]
    1dec:	cmp	x22, #0x7
    1df0:	b.ls	1ea8 <FSE_decompress+0x85c>  // b.plast
    1df4:	sub	x7, x24, #0xe
    1df8:	add	x9, x4, x7
    1dfc:	str	x9, [sp, #296]
    1e00:	ldr	x7, [x4, x7]
    1e04:	str	x7, [sp, #280]
    1e08:	add	x24, x4, x24
    1e0c:	ldurb	w7, [x24, #-7]
    1e10:	cbz	w7, 374c <FSE_decompress+0x2100>
    1e14:	clz	w7, w7
    1e18:	sub	w7, w7, #0x17
    1e1c:	str	w7, [sp, #288]
    1e20:	cmn	x22, #0x78
    1e24:	b.ls	1f28 <FSE_decompress+0x8dc>  // b.plast
    1e28:	ldp	x19, x20, [sp, #16]
    1e2c:	ldp	x23, x24, [sp, #48]
    1e30:	ldp	x25, x26, [sp, #64]
    1e34:	ldp	x27, x28, [sp, #80]
    1e38:	b	1a58 <FSE_decompress+0x40c>
    1e3c:	cmp	w25, #0x2
    1e40:	b.eq	1d9c <FSE_decompress+0x750>  // b.none
    1e44:	b	1dac <FSE_decompress+0x760>
    1e48:	cmp	w25, #0x6
    1e4c:	b.eq	1e5c <FSE_decompress+0x810>  // b.none
    1e50:	ldrb	w7, [x2, #6]
    1e54:	add	x4, x4, x7, lsl #48
    1e58:	str	x4, [sp, #240]
    1e5c:	ldrb	w4, [x2, #5]
    1e60:	ldr	x7, [sp, #240]
    1e64:	add	x4, x7, x4, lsl #40
    1e68:	str	x4, [sp, #240]
    1e6c:	ldrb	w4, [x2, #4]
    1e70:	ldr	x7, [sp, #240]
    1e74:	add	x4, x7, x4, lsl #32
    1e78:	str	x4, [sp, #240]
    1e7c:	b	1d7c <FSE_decompress+0x730>
    1e80:	mov	x2, #0x28                  	// #40
    1e84:	mov	w1, #0x0                   	// #0
    1e88:	add	x0, sp, #0x118
    1e8c:	bl	0 <grub_memset>
    1e90:	mov	x22, #0xffffffffffffffb8    	// #-72
    1e94:	ldp	x19, x20, [sp, #16]
    1e98:	ldp	x23, x24, [sp, #48]
    1e9c:	ldp	x25, x26, [sp, #64]
    1ea0:	ldp	x27, x28, [sp, #80]
    1ea4:	b	1a58 <FSE_decompress+0x40c>
    1ea8:	str	x4, [sp, #296]
    1eac:	ldr	x7, [sp, #120]
    1eb0:	ldrb	w7, [x2, x7]
    1eb4:	str	x7, [sp, #280]
    1eb8:	cmp	x22, #0x5
    1ebc:	b.eq	2148 <FSE_decompress+0xafc>  // b.none
    1ec0:	b.hi	2124 <FSE_decompress+0xad8>  // b.pmore
    1ec4:	cmp	x22, #0x3
    1ec8:	b.eq	1ee4 <FSE_decompress+0x898>  // b.none
    1ecc:	cmp	x22, #0x4
    1ed0:	b.ne	2118 <FSE_decompress+0xacc>  // b.any
    1ed4:	ldrb	w7, [x4, #3]
    1ed8:	ldr	x9, [sp, #280]
    1edc:	add	x7, x9, x7, lsl #24
    1ee0:	str	x7, [sp, #280]
    1ee4:	ldrb	w7, [x4, #2]
    1ee8:	ldr	x9, [sp, #280]
    1eec:	add	x7, x9, x7, lsl #16
    1ef0:	str	x7, [sp, #280]
    1ef4:	ldrb	w7, [x4, #1]
    1ef8:	ldr	x9, [sp, #280]
    1efc:	add	x7, x9, x7, lsl #8
    1f00:	str	x7, [sp, #280]
    1f04:	add	x24, x4, x24
    1f08:	ldurb	w7, [x24, #-7]
    1f0c:	cbz	w7, 3764 <FSE_decompress+0x2118>
    1f10:	clz	w9, w7
    1f14:	mov	w7, #0x9                   	// #9
    1f18:	sub	w7, w7, w22
    1f1c:	add	w7, w9, w7, lsl #3
    1f20:	sub	w7, w7, #0x1f
    1f24:	str	w7, [sp, #288]
    1f28:	ldr	w9, [sp, #168]
    1f2c:	mov	w10, #0x3                   	// #3
    1f30:	cmp	w9, #0x40
    1f34:	b.hi	1f84 <FSE_decompress+0x938>  // b.pmore
    1f38:	ldr	x7, [sp, #176]
    1f3c:	cmp	x3, x7
    1f40:	b.ls	215c <FSE_decompress+0xb10>  // b.plast
    1f44:	cmp	x1, x7
    1f48:	b.eq	2180 <FSE_decompress+0xb34>  // b.none
    1f4c:	lsr	w3, w9, #3
    1f50:	lsr	w11, w9, #3
    1f54:	sub	x11, x7, x11
    1f58:	mov	w10, #0x0                   	// #0
    1f5c:	cmp	x1, x11
    1f60:	b.ls	1f6c <FSE_decompress+0x920>  // b.plast
    1f64:	sub	w3, w7, w1
    1f68:	mov	w10, #0x1                   	// #1
    1f6c:	sub	x7, x7, w3, uxtw
    1f70:	str	x7, [sp, #176]
    1f74:	sub	w3, w9, w3, lsl #3
    1f78:	str	w3, [sp, #168]
    1f7c:	ldr	x1, [x7]
    1f80:	str	x1, [sp, #160]
    1f84:	ldr	w3, [sp, #208]
    1f88:	mov	w7, #0x3                   	// #3
    1f8c:	cmp	w3, #0x40
    1f90:	b.hi	1fe0 <FSE_decompress+0x994>  // b.pmore
    1f94:	ldr	x1, [sp, #216]
    1f98:	cmp	x5, x1
    1f9c:	b.ls	2190 <FSE_decompress+0xb44>  // b.plast
    1fa0:	cmp	x0, x1
    1fa4:	b.eq	21b4 <FSE_decompress+0xb68>  // b.none
    1fa8:	lsr	w5, w3, #3
    1fac:	lsr	w9, w3, #3
    1fb0:	sub	x9, x1, x9
    1fb4:	mov	w7, #0x0                   	// #0
    1fb8:	cmp	x0, x9
    1fbc:	b.ls	1fc8 <FSE_decompress+0x97c>  // b.plast
    1fc0:	sub	w5, w1, w0
    1fc4:	mov	w7, #0x1                   	// #1
    1fc8:	sub	x1, x1, w5, uxtw
    1fcc:	str	x1, [sp, #216]
    1fd0:	sub	w3, w3, w5, lsl #3
    1fd4:	str	w3, [sp, #208]
    1fd8:	ldr	x0, [x1]
    1fdc:	str	x0, [sp, #200]
    1fe0:	orr	w7, w7, w10
    1fe4:	ldr	w1, [sp, #248]
    1fe8:	mov	w3, #0x3                   	// #3
    1fec:	cmp	w1, #0x40
    1ff0:	b.hi	2040 <FSE_decompress+0x9f4>  // b.pmore
    1ff4:	ldr	x0, [sp, #256]
    1ff8:	cmp	x6, x0
    1ffc:	b.ls	21c4 <FSE_decompress+0xb78>  // b.plast
    2000:	cmp	x2, x0
    2004:	b.eq	21e8 <FSE_decompress+0xb9c>  // b.none
    2008:	lsr	w5, w1, #3
    200c:	lsr	w6, w1, #3
    2010:	sub	x6, x0, x6
    2014:	mov	w3, #0x0                   	// #0
    2018:	cmp	x2, x6
    201c:	b.ls	2028 <FSE_decompress+0x9dc>  // b.plast
    2020:	sub	w5, w0, w2
    2024:	mov	w3, #0x1                   	// #1
    2028:	sub	x0, x0, w5, uxtw
    202c:	str	x0, [sp, #256]
    2030:	sub	w1, w1, w5, lsl #3
    2034:	str	w1, [sp, #248]
    2038:	ldr	x0, [x0]
    203c:	str	x0, [sp, #240]
    2040:	ldr	x0, [sp, #104]
    2044:	add	x1, x21, x0
    2048:	str	x1, [sp, #152]
    204c:	ldr	x1, [sp, #112]
    2050:	add	x19, x1, #0x4
    2054:	add	x0, x0, #0x3
    2058:	lsr	x0, x0, #2
    205c:	add	x1, x21, x0
    2060:	str	x1, [sp, #120]
    2064:	add	x1, x1, x0
    2068:	str	x1, [sp, #136]
    206c:	add	x0, x1, x0
    2070:	str	x0, [sp, #144]
    2074:	ldr	w0, [sp, #128]
    2078:	str	w0, [sp, #112]
    207c:	ldr	w2, [sp, #288]
    2080:	cmp	w2, #0x40
    2084:	b.hi	3704 <FSE_decompress+0x20b8>  // b.pmore
    2088:	ldr	x1, [sp, #296]
    208c:	cmp	x8, x1
    2090:	b.ls	21f8 <FSE_decompress+0xbac>  // b.plast
    2094:	cmp	x4, x1
    2098:	b.eq	3704 <FSE_decompress+0x20b8>  // b.none
    209c:	lsr	w5, w2, #3
    20a0:	lsr	w6, w2, #3
    20a4:	sub	x6, x1, x6
    20a8:	mov	w0, #0x0                   	// #0
    20ac:	cmp	x4, x6
    20b0:	b.ls	20bc <FSE_decompress+0xa70>  // b.plast
    20b4:	sub	w5, w1, w4
    20b8:	mov	w0, #0x1                   	// #1
    20bc:	sub	x1, x1, w5, uxtw
    20c0:	str	x1, [sp, #296]
    20c4:	sub	w2, w2, w5, lsl #3
    20c8:	str	w2, [sp, #288]
    20cc:	ldr	x1, [x1]
    20d0:	str	x1, [sp, #280]
    20d4:	ldr	x1, [sp, #152]
    20d8:	sub	x27, x1, #0x7
    20dc:	orr	w0, w0, w3
    20e0:	orr	w0, w0, w7
    20e4:	cmp	w0, #0x0
    20e8:	ldr	x0, [sp, #144]
    20ec:	ccmp	x0, x27, #0x2, eq  // eq = none
    20f0:	b.cs	2840 <FSE_decompress+0x11f4>  // b.hs, b.nlast
    20f4:	mov	x23, x0
    20f8:	ldr	x25, [sp, #136]
    20fc:	ldr	x24, [sp, #120]
    2100:	ldr	w0, [sp, #112]
    2104:	neg	w20, w0
    2108:	and	w20, w20, #0x3f
    210c:	mov	x22, #0x2                   	// #2
    2110:	mov	w28, #0x3                   	// #3
    2114:	b	2308 <FSE_decompress+0xcbc>
    2118:	cmp	x22, #0x2
    211c:	b.eq	1ef4 <FSE_decompress+0x8a8>  // b.none
    2120:	b	1f04 <FSE_decompress+0x8b8>
    2124:	cmp	x22, #0x6
    2128:	b.eq	2138 <FSE_decompress+0xaec>  // b.none
    212c:	ldrb	w9, [x4, #6]
    2130:	add	x7, x7, x9, lsl #48
    2134:	str	x7, [sp, #280]
    2138:	ldrb	w7, [x4, #5]
    213c:	ldr	x9, [sp, #280]
    2140:	add	x7, x9, x7, lsl #40
    2144:	str	x7, [sp, #280]
    2148:	ldrb	w7, [x4, #4]
    214c:	ldr	x9, [sp, #280]
    2150:	add	x7, x9, x7, lsl #32
    2154:	str	x7, [sp, #280]
    2158:	b	1ed4 <FSE_decompress+0x888>
    215c:	lsr	w1, w9, #3
    2160:	sub	x7, x7, x1
    2164:	str	x7, [sp, #176]
    2168:	and	w9, w9, #0x7
    216c:	str	w9, [sp, #168]
    2170:	ldr	x1, [x7]
    2174:	str	x1, [sp, #160]
    2178:	mov	w10, #0x0                   	// #0
    217c:	b	1f84 <FSE_decompress+0x938>
    2180:	cmp	w9, #0x3f
    2184:	cset	w10, hi  // hi = pmore
    2188:	add	w10, w10, #0x1
    218c:	b	1f84 <FSE_decompress+0x938>
    2190:	lsr	w0, w3, #3
    2194:	sub	x1, x1, x0
    2198:	str	x1, [sp, #216]
    219c:	and	w3, w3, #0x7
    21a0:	str	w3, [sp, #208]
    21a4:	ldr	x0, [x1]
    21a8:	str	x0, [sp, #200]
    21ac:	mov	w7, #0x0                   	// #0
    21b0:	b	1fe0 <FSE_decompress+0x994>
    21b4:	cmp	w3, #0x3f
    21b8:	cset	w7, hi  // hi = pmore
    21bc:	add	w7, w7, #0x1
    21c0:	b	1fe0 <FSE_decompress+0x994>
    21c4:	lsr	w2, w1, #3
    21c8:	sub	x0, x0, x2
    21cc:	str	x0, [sp, #256]
    21d0:	and	w1, w1, #0x7
    21d4:	str	w1, [sp, #248]
    21d8:	ldr	x0, [x0]
    21dc:	str	x0, [sp, #240]
    21e0:	mov	w3, #0x0                   	// #0
    21e4:	b	2040 <FSE_decompress+0x9f4>
    21e8:	cmp	w1, #0x3f
    21ec:	cset	w0, hi  // hi = pmore
    21f0:	add	w3, w0, #0x1
    21f4:	b	2040 <FSE_decompress+0x9f4>
    21f8:	lsr	w0, w2, #3
    21fc:	sub	x1, x1, x0
    2200:	str	x1, [sp, #296]
    2204:	and	w2, w2, #0x7
    2208:	str	w2, [sp, #288]
    220c:	ldr	x0, [x1]
    2210:	str	x0, [sp, #280]
    2214:	mov	w0, #0x0                   	// #0
    2218:	b	20d4 <FSE_decompress+0xa88>
    221c:	lsr	w3, w2, #3
    2220:	sub	x1, x1, x3
    2224:	str	x1, [sp, #176]
    2228:	and	w2, w2, #0x7
    222c:	str	w2, [sp, #168]
    2230:	ldr	x1, [x1]
    2234:	str	x1, [sp, #160]
    2238:	mov	w3, #0x0                   	// #0
    223c:	b	272c <FSE_decompress+0x10e0>
    2240:	cmp	w2, #0x3f
    2244:	cset	w3, hi  // hi = pmore
    2248:	add	w3, w3, #0x1
    224c:	b	272c <FSE_decompress+0x10e0>
    2250:	lsr	w4, w2, #3
    2254:	sub	x1, x1, x4
    2258:	str	x1, [sp, #216]
    225c:	and	w2, w2, #0x7
    2260:	str	w2, [sp, #208]
    2264:	ldr	x1, [x1]
    2268:	str	x1, [sp, #200]
    226c:	mov	w4, #0x0                   	// #0
    2270:	b	2790 <FSE_decompress+0x1144>
    2274:	cmp	w2, #0x3f
    2278:	cset	w4, hi  // hi = pmore
    227c:	add	w4, w4, #0x1
    2280:	b	2790 <FSE_decompress+0x1144>
    2284:	lsr	w4, w2, #3
    2288:	sub	x1, x1, x4
    228c:	str	x1, [sp, #256]
    2290:	and	w2, w2, #0x7
    2294:	str	w2, [sp, #248]
    2298:	ldr	x1, [x1]
    229c:	str	x1, [sp, #240]
    22a0:	mov	w4, #0x0                   	// #0
    22a4:	b	27f8 <FSE_decompress+0x11ac>
    22a8:	cmp	w2, #0x3f
    22ac:	cset	w4, hi  // hi = pmore
    22b0:	add	w4, w4, #0x1
    22b4:	b	27f8 <FSE_decompress+0x11ac>
    22b8:	lsr	w1, w0, #3
    22bc:	sub	x2, x2, x1
    22c0:	str	x2, [sp, #296]
    22c4:	and	w0, w0, #0x7
    22c8:	str	w0, [sp, #288]
    22cc:	ldr	x0, [x2]
    22d0:	str	x0, [sp, #280]
    22d4:	mov	w1, #0x0                   	// #0
    22d8:	b	22f4 <FSE_decompress+0xca8>
    22dc:	sub	x2, x2, w5, uxtw
    22e0:	str	x2, [sp, #296]
    22e4:	sub	w0, w0, w5, lsl #3
    22e8:	str	w0, [sp, #288]
    22ec:	ldr	x0, [x2]
    22f0:	str	x0, [sp, #280]
    22f4:	orr	w0, w1, w4
    22f8:	orr	w0, w0, w3
    22fc:	cmp	w0, #0x0
    2300:	ccmp	x23, x27, #0x2, eq  // eq = none
    2304:	b.cs	3718 <FSE_decompress+0x20cc>  // b.hs, b.nlast
    2308:	ldr	w0, [sp, #168]
    230c:	ldr	x26, [sp, #160]
    2310:	lsl	x26, x26, x0
    2314:	lsr	x26, x26, x20
    2318:	add	x26, x19, x26, lsl #2
    231c:	mov	x2, x22
    2320:	mov	x1, x26
    2324:	mov	x0, x21
    2328:	bl	0 <grub_memmove>
    232c:	ldrb	w1, [x26, #2]
    2330:	ldr	w0, [sp, #168]
    2334:	add	w0, w0, w1
    2338:	str	w0, [sp, #168]
    233c:	ldrb	w0, [x26, #3]
    2340:	add	x21, x21, x0
    2344:	ldr	w0, [sp, #208]
    2348:	ldr	x26, [sp, #200]
    234c:	lsl	x26, x26, x0
    2350:	lsr	x26, x26, x20
    2354:	add	x26, x19, x26, lsl #2
    2358:	mov	x2, x22
    235c:	mov	x1, x26
    2360:	mov	x0, x24
    2364:	bl	0 <grub_memmove>
    2368:	ldrb	w1, [x26, #2]
    236c:	ldr	w0, [sp, #208]
    2370:	add	w0, w0, w1
    2374:	str	w0, [sp, #208]
    2378:	ldrb	w0, [x26, #3]
    237c:	add	x24, x24, x0
    2380:	ldr	w0, [sp, #248]
    2384:	ldr	x26, [sp, #240]
    2388:	lsl	x26, x26, x0
    238c:	lsr	x26, x26, x20
    2390:	add	x26, x19, x26, lsl #2
    2394:	mov	x2, x22
    2398:	mov	x1, x26
    239c:	mov	x0, x25
    23a0:	bl	0 <grub_memmove>
    23a4:	ldrb	w1, [x26, #2]
    23a8:	ldr	w0, [sp, #248]
    23ac:	add	w0, w0, w1
    23b0:	str	w0, [sp, #248]
    23b4:	ldrb	w0, [x26, #3]
    23b8:	add	x25, x25, x0
    23bc:	ldr	w0, [sp, #288]
    23c0:	ldr	x26, [sp, #280]
    23c4:	lsl	x26, x26, x0
    23c8:	lsr	x26, x26, x20
    23cc:	add	x26, x19, x26, lsl #2
    23d0:	mov	x2, x22
    23d4:	mov	x1, x26
    23d8:	mov	x0, x23
    23dc:	bl	0 <grub_memmove>
    23e0:	ldrb	w1, [x26, #2]
    23e4:	ldr	w0, [sp, #288]
    23e8:	add	w0, w0, w1
    23ec:	str	w0, [sp, #288]
    23f0:	ldrb	w0, [x26, #3]
    23f4:	add	x23, x23, x0
    23f8:	ldr	w0, [sp, #168]
    23fc:	ldr	x26, [sp, #160]
    2400:	lsl	x26, x26, x0
    2404:	lsr	x26, x26, x20
    2408:	add	x26, x19, x26, lsl #2
    240c:	mov	x2, x22
    2410:	mov	x1, x26
    2414:	mov	x0, x21
    2418:	bl	0 <grub_memmove>
    241c:	ldrb	w1, [x26, #2]
    2420:	ldr	w0, [sp, #168]
    2424:	add	w0, w0, w1
    2428:	str	w0, [sp, #168]
    242c:	ldrb	w0, [x26, #3]
    2430:	add	x21, x21, x0
    2434:	ldr	w0, [sp, #208]
    2438:	ldr	x26, [sp, #200]
    243c:	lsl	x26, x26, x0
    2440:	lsr	x26, x26, x20
    2444:	add	x26, x19, x26, lsl #2
    2448:	mov	x2, x22
    244c:	mov	x1, x26
    2450:	mov	x0, x24
    2454:	bl	0 <grub_memmove>
    2458:	ldrb	w1, [x26, #2]
    245c:	ldr	w0, [sp, #208]
    2460:	add	w0, w0, w1
    2464:	str	w0, [sp, #208]
    2468:	ldrb	w0, [x26, #3]
    246c:	add	x24, x24, x0
    2470:	ldr	w0, [sp, #248]
    2474:	ldr	x26, [sp, #240]
    2478:	lsl	x26, x26, x0
    247c:	lsr	x26, x26, x20
    2480:	add	x26, x19, x26, lsl #2
    2484:	mov	x2, x22
    2488:	mov	x1, x26
    248c:	mov	x0, x25
    2490:	bl	0 <grub_memmove>
    2494:	ldrb	w1, [x26, #2]
    2498:	ldr	w0, [sp, #248]
    249c:	add	w0, w0, w1
    24a0:	str	w0, [sp, #248]
    24a4:	ldrb	w0, [x26, #3]
    24a8:	add	x25, x25, x0
    24ac:	ldr	w0, [sp, #288]
    24b0:	ldr	x26, [sp, #280]
    24b4:	lsl	x26, x26, x0
    24b8:	lsr	x26, x26, x20
    24bc:	add	x26, x19, x26, lsl #2
    24c0:	mov	x2, x22
    24c4:	mov	x1, x26
    24c8:	mov	x0, x23
    24cc:	bl	0 <grub_memmove>
    24d0:	ldrb	w1, [x26, #2]
    24d4:	ldr	w0, [sp, #288]
    24d8:	add	w0, w0, w1
    24dc:	str	w0, [sp, #288]
    24e0:	ldrb	w0, [x26, #3]
    24e4:	add	x23, x23, x0
    24e8:	ldr	w0, [sp, #168]
    24ec:	ldr	x26, [sp, #160]
    24f0:	lsl	x26, x26, x0
    24f4:	lsr	x26, x26, x20
    24f8:	add	x26, x19, x26, lsl #2
    24fc:	mov	x2, x22
    2500:	mov	x1, x26
    2504:	mov	x0, x21
    2508:	bl	0 <grub_memmove>
    250c:	ldrb	w1, [x26, #2]
    2510:	ldr	w0, [sp, #168]
    2514:	add	w0, w0, w1
    2518:	str	w0, [sp, #168]
    251c:	ldrb	w0, [x26, #3]
    2520:	add	x21, x21, x0
    2524:	ldr	w0, [sp, #208]
    2528:	ldr	x26, [sp, #200]
    252c:	lsl	x26, x26, x0
    2530:	lsr	x26, x26, x20
    2534:	add	x26, x19, x26, lsl #2
    2538:	mov	x2, x22
    253c:	mov	x1, x26
    2540:	mov	x0, x24
    2544:	bl	0 <grub_memmove>
    2548:	ldrb	w1, [x26, #2]
    254c:	ldr	w0, [sp, #208]
    2550:	add	w0, w0, w1
    2554:	str	w0, [sp, #208]
    2558:	ldrb	w0, [x26, #3]
    255c:	add	x24, x24, x0
    2560:	ldr	w0, [sp, #248]
    2564:	ldr	x26, [sp, #240]
    2568:	lsl	x26, x26, x0
    256c:	lsr	x26, x26, x20
    2570:	add	x26, x19, x26, lsl #2
    2574:	mov	x2, x22
    2578:	mov	x1, x26
    257c:	mov	x0, x25
    2580:	bl	0 <grub_memmove>
    2584:	ldrb	w1, [x26, #2]
    2588:	ldr	w0, [sp, #248]
    258c:	add	w0, w0, w1
    2590:	str	w0, [sp, #248]
    2594:	ldrb	w0, [x26, #3]
    2598:	add	x25, x25, x0
    259c:	ldr	w0, [sp, #288]
    25a0:	ldr	x26, [sp, #280]
    25a4:	lsl	x26, x26, x0
    25a8:	lsr	x26, x26, x20
    25ac:	add	x26, x19, x26, lsl #2
    25b0:	mov	x2, x22
    25b4:	mov	x1, x26
    25b8:	mov	x0, x23
    25bc:	bl	0 <grub_memmove>
    25c0:	ldrb	w1, [x26, #2]
    25c4:	ldr	w0, [sp, #288]
    25c8:	add	w0, w0, w1
    25cc:	str	w0, [sp, #288]
    25d0:	ldrb	w0, [x26, #3]
    25d4:	add	x23, x23, x0
    25d8:	ldr	w0, [sp, #168]
    25dc:	ldr	x26, [sp, #160]
    25e0:	lsl	x26, x26, x0
    25e4:	lsr	x26, x26, x20
    25e8:	add	x26, x19, x26, lsl #2
    25ec:	mov	x2, x22
    25f0:	mov	x1, x26
    25f4:	mov	x0, x21
    25f8:	bl	0 <grub_memmove>
    25fc:	ldrb	w1, [x26, #2]
    2600:	ldr	w0, [sp, #168]
    2604:	add	w0, w0, w1
    2608:	str	w0, [sp, #168]
    260c:	ldrb	w0, [x26, #3]
    2610:	add	x21, x21, x0
    2614:	ldr	w0, [sp, #208]
    2618:	ldr	x26, [sp, #200]
    261c:	lsl	x26, x26, x0
    2620:	lsr	x26, x26, x20
    2624:	add	x26, x19, x26, lsl #2
    2628:	mov	x2, x22
    262c:	mov	x1, x26
    2630:	mov	x0, x24
    2634:	bl	0 <grub_memmove>
    2638:	ldrb	w1, [x26, #2]
    263c:	ldr	w0, [sp, #208]
    2640:	add	w0, w0, w1
    2644:	str	w0, [sp, #208]
    2648:	ldrb	w0, [x26, #3]
    264c:	add	x24, x24, x0
    2650:	ldr	w0, [sp, #248]
    2654:	ldr	x26, [sp, #240]
    2658:	lsl	x26, x26, x0
    265c:	lsr	x26, x26, x20
    2660:	add	x26, x19, x26, lsl #2
    2664:	mov	x2, x22
    2668:	mov	x1, x26
    266c:	mov	x0, x25
    2670:	bl	0 <grub_memmove>
    2674:	ldrb	w1, [x26, #2]
    2678:	ldr	w0, [sp, #248]
    267c:	add	w0, w0, w1
    2680:	str	w0, [sp, #248]
    2684:	ldrb	w0, [x26, #3]
    2688:	add	x25, x25, x0
    268c:	ldr	w0, [sp, #288]
    2690:	ldr	x26, [sp, #280]
    2694:	lsl	x26, x26, x0
    2698:	lsr	x26, x26, x20
    269c:	add	x26, x19, x26, lsl #2
    26a0:	mov	x2, x22
    26a4:	mov	x1, x26
    26a8:	mov	x0, x23
    26ac:	bl	0 <grub_memmove>
    26b0:	ldrb	w1, [x26, #2]
    26b4:	ldr	w0, [sp, #288]
    26b8:	add	w0, w1, w0
    26bc:	str	w0, [sp, #288]
    26c0:	ldrb	w1, [x26, #3]
    26c4:	add	x23, x23, x1
    26c8:	ldr	w2, [sp, #168]
    26cc:	mov	w3, w28
    26d0:	cmp	w2, #0x40
    26d4:	b.hi	272c <FSE_decompress+0x10e0>  // b.pmore
    26d8:	ldr	x1, [sp, #176]
    26dc:	ldr	x3, [sp, #192]
    26e0:	cmp	x1, x3
    26e4:	b.cs	221c <FSE_decompress+0xbd0>  // b.hs, b.nlast
    26e8:	ldr	x5, [sp, #184]
    26ec:	cmp	x1, x5
    26f0:	b.eq	2240 <FSE_decompress+0xbf4>  // b.none
    26f4:	lsr	w4, w2, #3
    26f8:	lsr	w6, w2, #3
    26fc:	sub	x6, x1, x6
    2700:	mov	w3, #0x0                   	// #0
    2704:	cmp	x5, x6
    2708:	b.ls	2714 <FSE_decompress+0x10c8>  // b.plast
    270c:	sub	w4, w1, w5
    2710:	mov	w3, #0x1                   	// #1
    2714:	sub	x1, x1, w4, uxtw
    2718:	str	x1, [sp, #176]
    271c:	sub	w2, w2, w4, lsl #3
    2720:	str	w2, [sp, #168]
    2724:	ldr	x1, [x1]
    2728:	str	x1, [sp, #160]
    272c:	ldr	w2, [sp, #208]
    2730:	mov	w4, w28
    2734:	cmp	w2, #0x40
    2738:	b.hi	2790 <FSE_decompress+0x1144>  // b.pmore
    273c:	ldr	x1, [sp, #216]
    2740:	ldr	x4, [sp, #232]
    2744:	cmp	x1, x4
    2748:	b.cs	2250 <FSE_decompress+0xc04>  // b.hs, b.nlast
    274c:	ldr	x6, [sp, #224]
    2750:	cmp	x1, x6
    2754:	b.eq	2274 <FSE_decompress+0xc28>  // b.none
    2758:	lsr	w5, w2, #3
    275c:	lsr	w7, w2, #3
    2760:	sub	x7, x1, x7
    2764:	mov	w4, #0x0                   	// #0
    2768:	cmp	x6, x7
    276c:	b.ls	2778 <FSE_decompress+0x112c>  // b.plast
    2770:	sub	w5, w1, w6
    2774:	mov	w4, #0x1                   	// #1
    2778:	sub	x1, x1, w5, uxtw
    277c:	str	x1, [sp, #216]
    2780:	sub	w2, w2, w5, lsl #3
    2784:	str	w2, [sp, #208]
    2788:	ldr	x1, [x1]
    278c:	str	x1, [sp, #200]
    2790:	orr	w3, w4, w3
    2794:	ldr	w2, [sp, #248]
    2798:	mov	w4, w28
    279c:	cmp	w2, #0x40
    27a0:	b.hi	27f8 <FSE_decompress+0x11ac>  // b.pmore
    27a4:	ldr	x1, [sp, #256]
    27a8:	ldr	x4, [sp, #272]
    27ac:	cmp	x1, x4
    27b0:	b.cs	2284 <FSE_decompress+0xc38>  // b.hs, b.nlast
    27b4:	ldr	x6, [sp, #264]
    27b8:	cmp	x1, x6
    27bc:	b.eq	22a8 <FSE_decompress+0xc5c>  // b.none
    27c0:	lsr	w5, w2, #3
    27c4:	lsr	w7, w2, #3
    27c8:	sub	x7, x1, x7
    27cc:	mov	w4, #0x0                   	// #0
    27d0:	cmp	x6, x7
    27d4:	b.ls	27e0 <FSE_decompress+0x1194>  // b.plast
    27d8:	sub	w5, w1, w6
    27dc:	mov	w4, #0x1                   	// #1
    27e0:	sub	x1, x1, w5, uxtw
    27e4:	str	x1, [sp, #256]
    27e8:	sub	w2, w2, w5, lsl #3
    27ec:	str	w2, [sp, #248]
    27f0:	ldr	x1, [x1]
    27f4:	str	x1, [sp, #240]
    27f8:	cmp	w0, #0x40
    27fc:	b.hi	3718 <FSE_decompress+0x20cc>  // b.pmore
    2800:	ldr	x2, [sp, #296]
    2804:	ldr	x1, [sp, #312]
    2808:	cmp	x2, x1
    280c:	b.cs	22b8 <FSE_decompress+0xc6c>  // b.hs, b.nlast
    2810:	ldr	x6, [sp, #304]
    2814:	cmp	x2, x6
    2818:	b.eq	3718 <FSE_decompress+0x20cc>  // b.none
    281c:	lsr	w5, w0, #3
    2820:	lsr	w7, w0, #3
    2824:	sub	x7, x2, x7
    2828:	mov	w1, #0x0                   	// #0
    282c:	cmp	x6, x7
    2830:	b.ls	22dc <FSE_decompress+0xc90>  // b.plast
    2834:	sub	w5, w2, w6
    2838:	mov	w1, #0x1                   	// #1
    283c:	b	22dc <FSE_decompress+0xc90>
    2840:	ldr	x23, [sp, #144]
    2844:	ldr	x25, [sp, #136]
    2848:	ldr	x24, [sp, #120]
    284c:	b	3718 <FSE_decompress+0x20cc>
    2850:	mov	w28, #0x0                   	// #0
    2854:	ldr	x0, [sp, #120]
    2858:	sub	x26, x0, #0x7
    285c:	ldr	w0, [sp, #112]
    2860:	neg	w22, w0
    2864:	and	w22, w22, #0x3f
    2868:	b	2998 <FSE_decompress+0x134c>
    286c:	lsr	w2, w1, #3
    2870:	sub	x0, x0, x2
    2874:	str	x0, [sp, #176]
    2878:	and	w1, w1, #0x7
    287c:	str	w1, [sp, #168]
    2880:	ldr	x0, [x0]
    2884:	str	x0, [sp, #160]
    2888:	mov	w3, w28
    288c:	b	28a8 <FSE_decompress+0x125c>
    2890:	sub	x0, x0, w2, uxtw
    2894:	str	x0, [sp, #176]
    2898:	sub	w1, w1, w2, lsl #3
    289c:	str	w1, [sp, #168]
    28a0:	ldr	x0, [x0]
    28a4:	str	x0, [sp, #160]
    28a8:	cmp	w3, #0x0
    28ac:	ccmp	x21, x26, #0x2, eq  // eq = none
    28b0:	b.cs	29e4 <FSE_decompress+0x1398>  // b.hs, b.nlast
    28b4:	ldr	w0, [sp, #168]
    28b8:	ldr	x20, [sp, #160]
    28bc:	lsl	x20, x20, x0
    28c0:	lsr	x20, x20, x22
    28c4:	add	x20, x19, x20, lsl #2
    28c8:	mov	x2, #0x2                   	// #2
    28cc:	mov	x1, x20
    28d0:	mov	x0, x21
    28d4:	bl	0 <grub_memmove>
    28d8:	ldrb	w0, [x20, #2]
    28dc:	ldr	w1, [sp, #168]
    28e0:	add	w0, w0, w1
    28e4:	str	w0, [sp, #168]
    28e8:	ldrb	w1, [x20, #3]
    28ec:	add	x21, x21, x1
    28f0:	ldr	x20, [sp, #160]
    28f4:	lsl	x20, x20, x0
    28f8:	lsr	x20, x20, x22
    28fc:	add	x20, x19, x20, lsl #2
    2900:	mov	x2, #0x2                   	// #2
    2904:	mov	x1, x20
    2908:	mov	x0, x21
    290c:	bl	0 <grub_memmove>
    2910:	ldrb	w0, [x20, #2]
    2914:	ldr	w1, [sp, #168]
    2918:	add	w0, w0, w1
    291c:	str	w0, [sp, #168]
    2920:	ldrb	w1, [x20, #3]
    2924:	add	x21, x21, x1
    2928:	ldr	x20, [sp, #160]
    292c:	lsl	x20, x20, x0
    2930:	lsr	x20, x20, x22
    2934:	add	x20, x19, x20, lsl #2
    2938:	mov	x2, #0x2                   	// #2
    293c:	mov	x1, x20
    2940:	mov	x0, x21
    2944:	bl	0 <grub_memmove>
    2948:	ldrb	w0, [x20, #2]
    294c:	ldr	w1, [sp, #168]
    2950:	add	w0, w0, w1
    2954:	str	w0, [sp, #168]
    2958:	ldrb	w1, [x20, #3]
    295c:	add	x21, x21, x1
    2960:	ldr	x20, [sp, #160]
    2964:	lsl	x20, x20, x0
    2968:	lsr	x20, x20, x22
    296c:	add	x20, x19, x20, lsl #2
    2970:	mov	x2, #0x2                   	// #2
    2974:	mov	x1, x20
    2978:	mov	x0, x21
    297c:	bl	0 <grub_memmove>
    2980:	ldrb	w1, [x20, #2]
    2984:	ldr	w0, [sp, #168]
    2988:	add	w0, w0, w1
    298c:	str	w0, [sp, #168]
    2990:	ldrb	w0, [x20, #3]
    2994:	add	x21, x21, x0
    2998:	ldr	w1, [sp, #168]
    299c:	cmp	w1, #0x40
    29a0:	b.hi	29e4 <FSE_decompress+0x1398>  // b.pmore
    29a4:	ldr	x0, [sp, #176]
    29a8:	ldr	x2, [sp, #192]
    29ac:	cmp	x0, x2
    29b0:	b.cs	286c <FSE_decompress+0x1220>  // b.hs, b.nlast
    29b4:	ldr	x4, [sp, #184]
    29b8:	cmp	x0, x4
    29bc:	b.eq	29e4 <FSE_decompress+0x1398>  // b.none
    29c0:	lsr	w2, w1, #3
    29c4:	lsr	w5, w1, #3
    29c8:	sub	x5, x0, x5
    29cc:	mov	w3, w28
    29d0:	cmp	x4, x5
    29d4:	b.ls	2890 <FSE_decompress+0x1244>  // b.plast
    29d8:	sub	w2, w0, w4
    29dc:	mov	w3, #0x1                   	// #1
    29e0:	b	2890 <FSE_decompress+0x1244>
    29e4:	ldr	x0, [sp, #120]
    29e8:	sub	x26, x0, #0x2
    29ec:	ldr	w0, [sp, #112]
    29f0:	neg	w28, w0
    29f4:	and	w28, w28, #0x3f
    29f8:	b	2a8c <FSE_decompress+0x1440>
    29fc:	lsr	w2, w1, #3
    2a00:	sub	x0, x0, x2
    2a04:	str	x0, [sp, #176]
    2a08:	and	w1, w1, #0x7
    2a0c:	str	w1, [sp, #168]
    2a10:	ldr	x0, [x0]
    2a14:	str	x0, [sp, #160]
    2a18:	mov	w3, #0x0                   	// #0
    2a1c:	b	2a38 <FSE_decompress+0x13ec>
    2a20:	sub	x0, x0, w2, uxtw
    2a24:	str	x0, [sp, #176]
    2a28:	sub	w1, w1, w2, lsl #3
    2a2c:	str	w1, [sp, #168]
    2a30:	ldr	x0, [x0]
    2a34:	str	x0, [sp, #160]
    2a38:	mov	x22, x26
    2a3c:	cmp	x21, x26
    2a40:	cset	w0, ls  // ls = plast
    2a44:	cmp	w3, #0x0
    2a48:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    2a4c:	b.eq	3680 <FSE_decompress+0x2034>  // b.none
    2a50:	ldr	w0, [sp, #168]
    2a54:	ldr	x20, [sp, #160]
    2a58:	lsl	x20, x20, x0
    2a5c:	lsr	x20, x20, x28
    2a60:	add	x20, x19, x20, lsl #2
    2a64:	mov	x2, #0x2                   	// #2
    2a68:	mov	x1, x20
    2a6c:	mov	x0, x21
    2a70:	bl	0 <grub_memmove>
    2a74:	ldrb	w1, [x20, #2]
    2a78:	ldr	w0, [sp, #168]
    2a7c:	add	w0, w0, w1
    2a80:	str	w0, [sp, #168]
    2a84:	ldrb	w0, [x20, #3]
    2a88:	add	x21, x21, x0
    2a8c:	ldr	w1, [sp, #168]
    2a90:	cmp	w1, #0x40
    2a94:	b.hi	3670 <FSE_decompress+0x2024>  // b.pmore
    2a98:	ldr	x0, [sp, #176]
    2a9c:	ldr	x2, [sp, #192]
    2aa0:	cmp	x0, x2
    2aa4:	b.cs	29fc <FSE_decompress+0x13b0>  // b.hs, b.nlast
    2aa8:	ldr	x4, [sp, #184]
    2aac:	cmp	x0, x4
    2ab0:	b.eq	3670 <FSE_decompress+0x2024>  // b.none
    2ab4:	lsr	w2, w1, #3
    2ab8:	lsr	w5, w1, #3
    2abc:	sub	x5, x0, x5
    2ac0:	mov	w3, #0x0                   	// #0
    2ac4:	cmp	x4, x5
    2ac8:	b.ls	2a20 <FSE_decompress+0x13d4>  // b.plast
    2acc:	sub	w2, w0, w4
    2ad0:	mov	w3, #0x1                   	// #1
    2ad4:	b	2a20 <FSE_decompress+0x13d4>
    2ad8:	ldr	w0, [sp, #168]
    2adc:	ldr	x20, [sp, #160]
    2ae0:	lsl	x20, x20, x0
    2ae4:	ldr	w0, [sp, #128]
    2ae8:	neg	w0, w0
    2aec:	lsr	x20, x20, x0
    2af0:	add	x20, x19, x20, lsl #2
    2af4:	mov	x2, #0x1                   	// #1
    2af8:	mov	x1, x20
    2afc:	mov	x0, x21
    2b00:	bl	0 <grub_memmove>
    2b04:	ldrb	w0, [x20, #3]
    2b08:	cmp	w0, #0x1
    2b0c:	b.eq	2b38 <FSE_decompress+0x14ec>  // b.none
    2b10:	ldr	w1, [sp, #168]
    2b14:	cmp	w1, #0x3f
    2b18:	b.hi	36e4 <FSE_decompress+0x2098>  // b.pmore
    2b1c:	ldrb	w0, [x20, #2]
    2b20:	add	w0, w0, w1
    2b24:	cmp	w0, #0x41
    2b28:	mov	w1, #0x40                  	// #64
    2b2c:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    2b30:	str	w0, [sp, #168]
    2b34:	b	36e4 <FSE_decompress+0x2098>
    2b38:	ldrb	w1, [x20, #2]
    2b3c:	ldr	w0, [sp, #168]
    2b40:	add	w0, w0, w1
    2b44:	str	w0, [sp, #168]
    2b48:	b	36e4 <FSE_decompress+0x2098>
    2b4c:	lsr	w2, w1, #3
    2b50:	sub	x0, x0, x2
    2b54:	str	x0, [sp, #216]
    2b58:	and	w1, w1, #0x7
    2b5c:	str	w1, [sp, #208]
    2b60:	ldr	x0, [x0]
    2b64:	str	x0, [sp, #200]
    2b68:	mov	w3, w26
    2b6c:	b	2b88 <FSE_decompress+0x153c>
    2b70:	sub	x0, x0, w2, uxtw
    2b74:	str	x0, [sp, #216]
    2b78:	sub	w1, w1, w2, lsl #3
    2b7c:	str	w1, [sp, #208]
    2b80:	ldr	x0, [x0]
    2b84:	str	x0, [sp, #200]
    2b88:	cmp	w3, #0x0
    2b8c:	ccmp	x24, x22, #0x2, eq  // eq = none
    2b90:	b.cs	2cc4 <FSE_decompress+0x1678>  // b.hs, b.nlast
    2b94:	ldr	w0, [sp, #208]
    2b98:	ldr	x20, [sp, #200]
    2b9c:	lsl	x20, x20, x0
    2ba0:	lsr	x20, x20, x21
    2ba4:	add	x20, x19, x20, lsl #2
    2ba8:	mov	x2, #0x2                   	// #2
    2bac:	mov	x1, x20
    2bb0:	mov	x0, x24
    2bb4:	bl	0 <grub_memmove>
    2bb8:	ldrb	w0, [x20, #2]
    2bbc:	ldr	w1, [sp, #208]
    2bc0:	add	w0, w0, w1
    2bc4:	str	w0, [sp, #208]
    2bc8:	ldrb	w1, [x20, #3]
    2bcc:	add	x24, x24, x1
    2bd0:	ldr	x20, [sp, #200]
    2bd4:	lsl	x20, x20, x0
    2bd8:	lsr	x20, x20, x21
    2bdc:	add	x20, x19, x20, lsl #2
    2be0:	mov	x2, #0x2                   	// #2
    2be4:	mov	x1, x20
    2be8:	mov	x0, x24
    2bec:	bl	0 <grub_memmove>
    2bf0:	ldrb	w0, [x20, #2]
    2bf4:	ldr	w1, [sp, #208]
    2bf8:	add	w0, w0, w1
    2bfc:	str	w0, [sp, #208]
    2c00:	ldrb	w1, [x20, #3]
    2c04:	add	x24, x24, x1
    2c08:	ldr	x20, [sp, #200]
    2c0c:	lsl	x20, x20, x0
    2c10:	lsr	x20, x20, x21
    2c14:	add	x20, x19, x20, lsl #2
    2c18:	mov	x2, #0x2                   	// #2
    2c1c:	mov	x1, x20
    2c20:	mov	x0, x24
    2c24:	bl	0 <grub_memmove>
    2c28:	ldrb	w0, [x20, #2]
    2c2c:	ldr	w1, [sp, #208]
    2c30:	add	w0, w0, w1
    2c34:	str	w0, [sp, #208]
    2c38:	ldrb	w1, [x20, #3]
    2c3c:	add	x24, x24, x1
    2c40:	ldr	x20, [sp, #200]
    2c44:	lsl	x20, x20, x0
    2c48:	lsr	x20, x20, x21
    2c4c:	add	x20, x19, x20, lsl #2
    2c50:	mov	x2, #0x2                   	// #2
    2c54:	mov	x1, x20
    2c58:	mov	x0, x24
    2c5c:	bl	0 <grub_memmove>
    2c60:	ldrb	w1, [x20, #2]
    2c64:	ldr	w0, [sp, #208]
    2c68:	add	w0, w0, w1
    2c6c:	str	w0, [sp, #208]
    2c70:	ldrb	w0, [x20, #3]
    2c74:	add	x24, x24, x0
    2c78:	ldr	w1, [sp, #208]
    2c7c:	cmp	w1, #0x40
    2c80:	b.hi	2cc4 <FSE_decompress+0x1678>  // b.pmore
    2c84:	ldr	x0, [sp, #216]
    2c88:	ldr	x2, [sp, #232]
    2c8c:	cmp	x0, x2
    2c90:	b.cs	2b4c <FSE_decompress+0x1500>  // b.hs, b.nlast
    2c94:	ldr	x4, [sp, #224]
    2c98:	cmp	x0, x4
    2c9c:	b.eq	2cc4 <FSE_decompress+0x1678>  // b.none
    2ca0:	lsr	w2, w1, #3
    2ca4:	lsr	w5, w1, #3
    2ca8:	sub	x5, x0, x5
    2cac:	mov	w3, w26
    2cb0:	cmp	x4, x5
    2cb4:	b.ls	2b70 <FSE_decompress+0x1524>  // b.plast
    2cb8:	sub	w2, w0, w4
    2cbc:	mov	w3, w28
    2cc0:	b	2b70 <FSE_decompress+0x1524>
    2cc4:	mov	w28, #0x0                   	// #0
    2cc8:	ldr	x0, [sp, #136]
    2ccc:	sub	x22, x0, #0x2
    2cd0:	ldr	w0, [sp, #112]
    2cd4:	neg	w26, w0
    2cd8:	and	w26, w26, #0x3f
    2cdc:	b	2d70 <FSE_decompress+0x1724>
    2ce0:	lsr	w2, w1, #3
    2ce4:	sub	x0, x0, x2
    2ce8:	str	x0, [sp, #216]
    2cec:	and	w1, w1, #0x7
    2cf0:	str	w1, [sp, #208]
    2cf4:	ldr	x0, [x0]
    2cf8:	str	x0, [sp, #200]
    2cfc:	mov	w3, w28
    2d00:	b	2d1c <FSE_decompress+0x16d0>
    2d04:	sub	x0, x0, w2, uxtw
    2d08:	str	x0, [sp, #216]
    2d0c:	sub	w1, w1, w2, lsl #3
    2d10:	str	w1, [sp, #208]
    2d14:	ldr	x0, [x0]
    2d18:	str	x0, [sp, #200]
    2d1c:	mov	x21, x22
    2d20:	cmp	x24, x22
    2d24:	cset	w0, ls  // ls = plast
    2d28:	cmp	w3, #0x0
    2d2c:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    2d30:	b.eq	35ec <FSE_decompress+0x1fa0>  // b.none
    2d34:	ldr	w0, [sp, #208]
    2d38:	ldr	x20, [sp, #200]
    2d3c:	lsl	x20, x20, x0
    2d40:	lsr	x20, x20, x26
    2d44:	add	x20, x19, x20, lsl #2
    2d48:	mov	x2, #0x2                   	// #2
    2d4c:	mov	x1, x20
    2d50:	mov	x0, x24
    2d54:	bl	0 <grub_memmove>
    2d58:	ldrb	w1, [x20, #2]
    2d5c:	ldr	w0, [sp, #208]
    2d60:	add	w0, w0, w1
    2d64:	str	w0, [sp, #208]
    2d68:	ldrb	w0, [x20, #3]
    2d6c:	add	x24, x24, x0
    2d70:	ldr	w1, [sp, #208]
    2d74:	cmp	w1, #0x40
    2d78:	b.hi	35dc <FSE_decompress+0x1f90>  // b.pmore
    2d7c:	ldr	x0, [sp, #216]
    2d80:	ldr	x2, [sp, #232]
    2d84:	cmp	x0, x2
    2d88:	b.cs	2ce0 <FSE_decompress+0x1694>  // b.hs, b.nlast
    2d8c:	ldr	x4, [sp, #224]
    2d90:	cmp	x0, x4
    2d94:	b.eq	35dc <FSE_decompress+0x1f90>  // b.none
    2d98:	lsr	w2, w1, #3
    2d9c:	lsr	w5, w1, #3
    2da0:	sub	x5, x0, x5
    2da4:	mov	w3, w28
    2da8:	cmp	x4, x5
    2dac:	b.ls	2d04 <FSE_decompress+0x16b8>  // b.plast
    2db0:	sub	w2, w0, w4
    2db4:	mov	w3, #0x1                   	// #1
    2db8:	b	2d04 <FSE_decompress+0x16b8>
    2dbc:	ldr	w0, [sp, #208]
    2dc0:	ldr	x20, [sp, #200]
    2dc4:	lsl	x20, x20, x0
    2dc8:	ldr	w0, [sp, #128]
    2dcc:	neg	w0, w0
    2dd0:	lsr	x20, x20, x0
    2dd4:	add	x20, x19, x20, lsl #2
    2dd8:	mov	x2, #0x1                   	// #1
    2ddc:	mov	x1, x20
    2de0:	mov	x0, x24
    2de4:	bl	0 <grub_memmove>
    2de8:	ldrb	w0, [x20, #3]
    2dec:	cmp	w0, #0x1
    2df0:	b.eq	2e1c <FSE_decompress+0x17d0>  // b.none
    2df4:	ldr	w1, [sp, #208]
    2df8:	cmp	w1, #0x3f
    2dfc:	b.hi	3650 <FSE_decompress+0x2004>  // b.pmore
    2e00:	ldrb	w0, [x20, #2]
    2e04:	add	w0, w0, w1
    2e08:	cmp	w0, #0x41
    2e0c:	mov	w1, #0x40                  	// #64
    2e10:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    2e14:	str	w0, [sp, #208]
    2e18:	b	3650 <FSE_decompress+0x2004>
    2e1c:	ldrb	w1, [x20, #2]
    2e20:	ldr	w0, [sp, #208]
    2e24:	add	w0, w0, w1
    2e28:	str	w0, [sp, #208]
    2e2c:	b	3650 <FSE_decompress+0x2004>
    2e30:	lsr	w2, w1, #3
    2e34:	sub	x0, x0, x2
    2e38:	str	x0, [sp, #256]
    2e3c:	and	w1, w1, #0x7
    2e40:	str	w1, [sp, #248]
    2e44:	ldr	x0, [x0]
    2e48:	str	x0, [sp, #240]
    2e4c:	mov	w3, w24
    2e50:	b	2e6c <FSE_decompress+0x1820>
    2e54:	sub	x0, x0, w2, uxtw
    2e58:	str	x0, [sp, #256]
    2e5c:	sub	w1, w1, w2, lsl #3
    2e60:	str	w1, [sp, #248]
    2e64:	ldr	x0, [x0]
    2e68:	str	x0, [sp, #240]
    2e6c:	cmp	w3, #0x0
    2e70:	ccmp	x25, x22, #0x2, eq  // eq = none
    2e74:	b.cs	2fa8 <FSE_decompress+0x195c>  // b.hs, b.nlast
    2e78:	ldr	w0, [sp, #248]
    2e7c:	ldr	x20, [sp, #240]
    2e80:	lsl	x20, x20, x0
    2e84:	lsr	x20, x20, x21
    2e88:	add	x20, x19, x20, lsl #2
    2e8c:	mov	x2, #0x2                   	// #2
    2e90:	mov	x1, x20
    2e94:	mov	x0, x25
    2e98:	bl	0 <grub_memmove>
    2e9c:	ldrb	w0, [x20, #2]
    2ea0:	ldr	w1, [sp, #248]
    2ea4:	add	w0, w0, w1
    2ea8:	str	w0, [sp, #248]
    2eac:	ldrb	w1, [x20, #3]
    2eb0:	add	x25, x25, x1
    2eb4:	ldr	x20, [sp, #240]
    2eb8:	lsl	x20, x20, x0
    2ebc:	lsr	x20, x20, x21
    2ec0:	add	x20, x19, x20, lsl #2
    2ec4:	mov	x2, #0x2                   	// #2
    2ec8:	mov	x1, x20
    2ecc:	mov	x0, x25
    2ed0:	bl	0 <grub_memmove>
    2ed4:	ldrb	w0, [x20, #2]
    2ed8:	ldr	w1, [sp, #248]
    2edc:	add	w0, w0, w1
    2ee0:	str	w0, [sp, #248]
    2ee4:	ldrb	w1, [x20, #3]
    2ee8:	add	x25, x25, x1
    2eec:	ldr	x20, [sp, #240]
    2ef0:	lsl	x20, x20, x0
    2ef4:	lsr	x20, x20, x21
    2ef8:	add	x20, x19, x20, lsl #2
    2efc:	mov	x2, #0x2                   	// #2
    2f00:	mov	x1, x20
    2f04:	mov	x0, x25
    2f08:	bl	0 <grub_memmove>
    2f0c:	ldrb	w0, [x20, #2]
    2f10:	ldr	w1, [sp, #248]
    2f14:	add	w0, w0, w1
    2f18:	str	w0, [sp, #248]
    2f1c:	ldrb	w1, [x20, #3]
    2f20:	add	x25, x25, x1
    2f24:	ldr	x20, [sp, #240]
    2f28:	lsl	x20, x20, x0
    2f2c:	lsr	x20, x20, x21
    2f30:	add	x20, x19, x20, lsl #2
    2f34:	mov	x2, #0x2                   	// #2
    2f38:	mov	x1, x20
    2f3c:	mov	x0, x25
    2f40:	bl	0 <grub_memmove>
    2f44:	ldrb	w1, [x20, #2]
    2f48:	ldr	w0, [sp, #248]
    2f4c:	add	w0, w0, w1
    2f50:	str	w0, [sp, #248]
    2f54:	ldrb	w0, [x20, #3]
    2f58:	add	x25, x25, x0
    2f5c:	ldr	w1, [sp, #248]
    2f60:	cmp	w1, #0x40
    2f64:	b.hi	2fa8 <FSE_decompress+0x195c>  // b.pmore
    2f68:	ldr	x0, [sp, #256]
    2f6c:	ldr	x2, [sp, #272]
    2f70:	cmp	x0, x2
    2f74:	b.cs	2e30 <FSE_decompress+0x17e4>  // b.hs, b.nlast
    2f78:	ldr	x4, [sp, #264]
    2f7c:	cmp	x0, x4
    2f80:	b.eq	2fa8 <FSE_decompress+0x195c>  // b.none
    2f84:	lsr	w2, w1, #3
    2f88:	lsr	w5, w1, #3
    2f8c:	sub	x5, x0, x5
    2f90:	mov	w3, w24
    2f94:	cmp	x4, x5
    2f98:	b.ls	2e54 <FSE_decompress+0x1808>  // b.plast
    2f9c:	sub	w2, w0, w4
    2fa0:	mov	w3, w26
    2fa4:	b	2e54 <FSE_decompress+0x1808>
    2fa8:	mov	w24, #0x0                   	// #0
    2fac:	mov	w26, #0x1                   	// #1
    2fb0:	ldr	x0, [sp, #144]
    2fb4:	sub	x20, x0, #0x2
    2fb8:	ldr	w0, [sp, #112]
    2fbc:	neg	w22, w0
    2fc0:	and	w22, w22, #0x3f
    2fc4:	b	3058 <FSE_decompress+0x1a0c>
    2fc8:	lsr	w2, w1, #3
    2fcc:	sub	x0, x0, x2
    2fd0:	str	x0, [sp, #256]
    2fd4:	and	w1, w1, #0x7
    2fd8:	str	w1, [sp, #248]
    2fdc:	ldr	x0, [x0]
    2fe0:	str	x0, [sp, #240]
    2fe4:	mov	w3, w24
    2fe8:	b	3004 <FSE_decompress+0x19b8>
    2fec:	sub	x0, x0, w2, uxtw
    2ff0:	str	x0, [sp, #256]
    2ff4:	sub	w1, w1, w2, lsl #3
    2ff8:	str	w1, [sp, #248]
    2ffc:	ldr	x0, [x0]
    3000:	str	x0, [sp, #240]
    3004:	mov	x21, x20
    3008:	cmp	x25, x20
    300c:	cset	w0, ls  // ls = plast
    3010:	cmp	w3, #0x0
    3014:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    3018:	b.eq	355c <FSE_decompress+0x1f10>  // b.none
    301c:	ldr	w0, [sp, #248]
    3020:	ldr	x21, [sp, #240]
    3024:	lsl	x21, x21, x0
    3028:	lsr	x21, x21, x22
    302c:	add	x21, x19, x21, lsl #2
    3030:	mov	x2, #0x2                   	// #2
    3034:	mov	x1, x21
    3038:	mov	x0, x25
    303c:	bl	0 <grub_memmove>
    3040:	ldrb	w1, [x21, #2]
    3044:	ldr	w0, [sp, #248]
    3048:	add	w0, w0, w1
    304c:	str	w0, [sp, #248]
    3050:	ldrb	w0, [x21, #3]
    3054:	add	x25, x25, x0
    3058:	ldr	w1, [sp, #248]
    305c:	cmp	w1, #0x40
    3060:	b.hi	354c <FSE_decompress+0x1f00>  // b.pmore
    3064:	ldr	x0, [sp, #256]
    3068:	ldr	x2, [sp, #272]
    306c:	cmp	x0, x2
    3070:	b.cs	2fc8 <FSE_decompress+0x197c>  // b.hs, b.nlast
    3074:	ldr	x4, [sp, #264]
    3078:	cmp	x0, x4
    307c:	b.eq	354c <FSE_decompress+0x1f00>  // b.none
    3080:	lsr	w2, w1, #3
    3084:	lsr	w5, w1, #3
    3088:	sub	x5, x0, x5
    308c:	mov	w3, w24
    3090:	cmp	x4, x5
    3094:	b.ls	2fec <FSE_decompress+0x19a0>  // b.plast
    3098:	sub	w2, w0, w4
    309c:	mov	w3, w26
    30a0:	b	2fec <FSE_decompress+0x19a0>
    30a4:	ldr	w0, [sp, #248]
    30a8:	ldr	x20, [sp, #240]
    30ac:	lsl	x20, x20, x0
    30b0:	ldr	w0, [sp, #128]
    30b4:	neg	w0, w0
    30b8:	lsr	x20, x20, x0
    30bc:	add	x20, x19, x20, lsl #2
    30c0:	mov	x2, #0x1                   	// #1
    30c4:	mov	x1, x20
    30c8:	mov	x0, x25
    30cc:	bl	0 <grub_memmove>
    30d0:	ldrb	w0, [x20, #3]
    30d4:	cmp	w0, #0x1
    30d8:	b.eq	3104 <FSE_decompress+0x1ab8>  // b.none
    30dc:	ldr	w1, [sp, #248]
    30e0:	cmp	w1, #0x3f
    30e4:	b.hi	35c0 <FSE_decompress+0x1f74>  // b.pmore
    30e8:	ldrb	w0, [x20, #2]
    30ec:	add	w0, w0, w1
    30f0:	cmp	w0, #0x41
    30f4:	mov	w1, #0x40                  	// #64
    30f8:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    30fc:	str	w0, [sp, #248]
    3100:	b	35c0 <FSE_decompress+0x1f74>
    3104:	ldrb	w1, [x20, #2]
    3108:	ldr	w0, [sp, #248]
    310c:	add	w0, w0, w1
    3110:	str	w0, [sp, #248]
    3114:	b	35c0 <FSE_decompress+0x1f74>
    3118:	lsr	w2, w1, #3
    311c:	sub	x0, x0, x2
    3120:	str	x0, [sp, #296]
    3124:	and	w1, w1, #0x7
    3128:	str	w1, [sp, #288]
    312c:	ldr	x0, [x0]
    3130:	str	x0, [sp, #280]
    3134:	mov	w3, w24
    3138:	b	3154 <FSE_decompress+0x1b08>
    313c:	sub	x0, x0, w2, uxtw
    3140:	str	x0, [sp, #296]
    3144:	sub	w1, w1, w2, lsl #3
    3148:	str	w1, [sp, #288]
    314c:	ldr	x0, [x0]
    3150:	str	x0, [sp, #280]
    3154:	cmp	w3, #0x0
    3158:	ccmp	x23, x27, #0x2, eq  // eq = none
    315c:	b.cs	3290 <FSE_decompress+0x1c44>  // b.hs, b.nlast
    3160:	ldr	w0, [sp, #288]
    3164:	ldr	x20, [sp, #280]
    3168:	lsl	x20, x20, x0
    316c:	lsr	x20, x20, x21
    3170:	add	x20, x19, x20, lsl #2
    3174:	mov	x2, x22
    3178:	mov	x1, x20
    317c:	mov	x0, x23
    3180:	bl	0 <grub_memmove>
    3184:	ldrb	w0, [x20, #2]
    3188:	ldr	w1, [sp, #288]
    318c:	add	w0, w0, w1
    3190:	str	w0, [sp, #288]
    3194:	ldrb	w1, [x20, #3]
    3198:	add	x23, x23, x1
    319c:	ldr	x20, [sp, #280]
    31a0:	lsl	x20, x20, x0
    31a4:	lsr	x20, x20, x21
    31a8:	add	x20, x19, x20, lsl #2
    31ac:	mov	x2, x22
    31b0:	mov	x1, x20
    31b4:	mov	x0, x23
    31b8:	bl	0 <grub_memmove>
    31bc:	ldrb	w0, [x20, #2]
    31c0:	ldr	w1, [sp, #288]
    31c4:	add	w0, w0, w1
    31c8:	str	w0, [sp, #288]
    31cc:	ldrb	w1, [x20, #3]
    31d0:	add	x23, x23, x1
    31d4:	ldr	x20, [sp, #280]
    31d8:	lsl	x20, x20, x0
    31dc:	lsr	x20, x20, x21
    31e0:	add	x20, x19, x20, lsl #2
    31e4:	mov	x2, x22
    31e8:	mov	x1, x20
    31ec:	mov	x0, x23
    31f0:	bl	0 <grub_memmove>
    31f4:	ldrb	w0, [x20, #2]
    31f8:	ldr	w1, [sp, #288]
    31fc:	add	w0, w0, w1
    3200:	str	w0, [sp, #288]
    3204:	ldrb	w1, [x20, #3]
    3208:	add	x23, x23, x1
    320c:	ldr	x20, [sp, #280]
    3210:	lsl	x20, x20, x0
    3214:	lsr	x20, x20, x21
    3218:	add	x20, x19, x20, lsl #2
    321c:	mov	x2, x22
    3220:	mov	x1, x20
    3224:	mov	x0, x23
    3228:	bl	0 <grub_memmove>
    322c:	ldrb	w1, [x20, #2]
    3230:	ldr	w0, [sp, #288]
    3234:	add	w0, w0, w1
    3238:	str	w0, [sp, #288]
    323c:	ldrb	w0, [x20, #3]
    3240:	add	x23, x23, x0
    3244:	ldr	w1, [sp, #288]
    3248:	cmp	w1, #0x40
    324c:	b.hi	3290 <FSE_decompress+0x1c44>  // b.pmore
    3250:	ldr	x0, [sp, #296]
    3254:	ldr	x2, [sp, #312]
    3258:	cmp	x0, x2
    325c:	b.cs	3118 <FSE_decompress+0x1acc>  // b.hs, b.nlast
    3260:	ldr	x4, [sp, #304]
    3264:	cmp	x0, x4
    3268:	b.eq	3290 <FSE_decompress+0x1c44>  // b.none
    326c:	lsr	w2, w1, #3
    3270:	lsr	w5, w1, #3
    3274:	sub	x5, x0, x5
    3278:	mov	w3, w24
    327c:	cmp	x4, x5
    3280:	b.ls	313c <FSE_decompress+0x1af0>  // b.plast
    3284:	sub	w2, w0, w4
    3288:	mov	w3, w25
    328c:	b	313c <FSE_decompress+0x1af0>
    3290:	mov	w24, #0x0                   	// #0
    3294:	mov	w25, #0x1                   	// #1
    3298:	ldr	x0, [sp, #152]
    329c:	sub	x21, x0, #0x2
    32a0:	ldr	w0, [sp, #112]
    32a4:	neg	w22, w0
    32a8:	and	w22, w22, #0x3f
    32ac:	b	3340 <FSE_decompress+0x1cf4>
    32b0:	lsr	w2, w1, #3
    32b4:	sub	x0, x0, x2
    32b8:	str	x0, [sp, #296]
    32bc:	and	w1, w1, #0x7
    32c0:	str	w1, [sp, #288]
    32c4:	ldr	x0, [x0]
    32c8:	str	x0, [sp, #280]
    32cc:	mov	w3, w24
    32d0:	b	32ec <FSE_decompress+0x1ca0>
    32d4:	sub	x0, x0, w2, uxtw
    32d8:	str	x0, [sp, #296]
    32dc:	sub	w1, w1, w2, lsl #3
    32e0:	str	w1, [sp, #288]
    32e4:	ldr	x0, [x0]
    32e8:	str	x0, [sp, #280]
    32ec:	mov	x20, x21
    32f0:	cmp	x23, x21
    32f4:	cset	w0, ls  // ls = plast
    32f8:	cmp	w3, #0x0
    32fc:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    3300:	b.eq	3484 <FSE_decompress+0x1e38>  // b.none
    3304:	ldr	w0, [sp, #288]
    3308:	ldr	x20, [sp, #280]
    330c:	lsl	x20, x20, x0
    3310:	lsr	x20, x20, x22
    3314:	add	x20, x19, x20, lsl #2
    3318:	mov	x2, #0x2                   	// #2
    331c:	mov	x1, x20
    3320:	mov	x0, x23
    3324:	bl	0 <grub_memmove>
    3328:	ldrb	w1, [x20, #2]
    332c:	ldr	w0, [sp, #288]
    3330:	add	w0, w0, w1
    3334:	str	w0, [sp, #288]
    3338:	ldrb	w0, [x20, #3]
    333c:	add	x23, x23, x0
    3340:	ldr	w1, [sp, #288]
    3344:	cmp	w1, #0x40
    3348:	b.hi	3474 <FSE_decompress+0x1e28>  // b.pmore
    334c:	ldr	x0, [sp, #296]
    3350:	ldr	x2, [sp, #312]
    3354:	cmp	x0, x2
    3358:	b.cs	32b0 <FSE_decompress+0x1c64>  // b.hs, b.nlast
    335c:	ldr	x4, [sp, #304]
    3360:	cmp	x0, x4
    3364:	b.eq	3474 <FSE_decompress+0x1e28>  // b.none
    3368:	lsr	w2, w1, #3
    336c:	lsr	w5, w1, #3
    3370:	sub	x5, x0, x5
    3374:	mov	w3, w24
    3378:	cmp	x4, x5
    337c:	b.ls	32d4 <FSE_decompress+0x1c88>  // b.plast
    3380:	sub	w2, w0, w4
    3384:	mov	w3, w25
    3388:	b	32d4 <FSE_decompress+0x1c88>
    338c:	ldr	w1, [sp, #288]
    3390:	ldr	x0, [sp, #280]
    3394:	lsl	x0, x0, x1
    3398:	ldr	w1, [sp, #128]
    339c:	neg	w1, w1
    33a0:	lsr	x0, x0, x1
    33a4:	add	x19, x19, x0, lsl #2
    33a8:	mov	x2, #0x1                   	// #1
    33ac:	mov	x1, x19
    33b0:	mov	x0, x23
    33b4:	bl	0 <grub_memmove>
    33b8:	ldrb	w0, [x19, #3]
    33bc:	cmp	w0, #0x1
    33c0:	b.eq	33ec <FSE_decompress+0x1da0>  // b.none
    33c4:	ldr	w1, [sp, #288]
    33c8:	cmp	w1, #0x3f
    33cc:	b.hi	34e8 <FSE_decompress+0x1e9c>  // b.pmore
    33d0:	ldrb	w0, [x19, #2]
    33d4:	add	w0, w0, w1
    33d8:	cmp	w0, #0x41
    33dc:	mov	w1, #0x40                  	// #64
    33e0:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    33e4:	str	w0, [sp, #288]
    33e8:	b	34e8 <FSE_decompress+0x1e9c>
    33ec:	ldrb	w1, [x19, #2]
    33f0:	ldr	w0, [sp, #288]
    33f4:	add	w0, w0, w1
    33f8:	str	w0, [sp, #288]
    33fc:	b	34e8 <FSE_decompress+0x1e9c>
    3400:	ldr	w0, [sp, #168]
    3404:	cmp	w0, #0x40
    3408:	cset	w4, eq  // eq = none
    340c:	b	34fc <FSE_decompress+0x1eb0>
    3410:	ldr	w0, [sp, #208]
    3414:	cmp	w0, #0x40
    3418:	cset	w0, eq  // eq = none
    341c:	b	3510 <FSE_decompress+0x1ec4>
    3420:	ldr	w1, [sp, #248]
    3424:	cmp	w1, #0x40
    3428:	cset	w3, eq  // eq = none
    342c:	b	3524 <FSE_decompress+0x1ed8>
    3430:	ldr	w1, [sp, #288]
    3434:	cmp	w1, #0x40
    3438:	b.eq	3450 <FSE_decompress+0x1e04>  // b.none
    343c:	ldp	x19, x20, [sp, #16]
    3440:	ldp	x23, x24, [sp, #48]
    3444:	ldp	x25, x26, [sp, #64]
    3448:	ldp	x27, x28, [sp, #80]
    344c:	b	1a58 <FSE_decompress+0x40c>
    3450:	and	w0, w0, w4
    3454:	tst	w0, w3
    3458:	ldr	x0, [sp, #104]
    345c:	csel	x22, x0, x22, ne  // ne = any
    3460:	ldp	x19, x20, [sp, #16]
    3464:	ldp	x23, x24, [sp, #48]
    3468:	ldp	x25, x26, [sp, #64]
    346c:	ldp	x27, x28, [sp, #80]
    3470:	b	1a58 <FSE_decompress+0x40c>
    3474:	ldr	x0, [sp, #152]
    3478:	sub	x20, x0, #0x2
    347c:	cmp	x23, x20
    3480:	cset	w0, ls  // ls = plast
    3484:	cbz	w0, 34dc <FSE_decompress+0x1e90>
    3488:	ldr	w0, [sp, #112]
    348c:	neg	w22, w0
    3490:	and	w22, w22, #0x3f
    3494:	mov	x24, #0x2                   	// #2
    3498:	ldr	w0, [sp, #288]
    349c:	ldr	x21, [sp, #280]
    34a0:	lsl	x21, x21, x0
    34a4:	lsr	x21, x21, x22
    34a8:	add	x21, x19, x21, lsl #2
    34ac:	mov	x2, x24
    34b0:	mov	x1, x21
    34b4:	mov	x0, x23
    34b8:	bl	0 <grub_memmove>
    34bc:	ldrb	w1, [x21, #2]
    34c0:	ldr	w0, [sp, #288]
    34c4:	add	w0, w0, w1
    34c8:	str	w0, [sp, #288]
    34cc:	ldrb	w0, [x21, #3]
    34d0:	add	x23, x23, x0
    34d4:	cmp	x23, x20
    34d8:	b.ls	3498 <FSE_decompress+0x1e4c>  // b.plast
    34dc:	ldr	x0, [sp, #152]
    34e0:	cmp	x0, x23
    34e4:	b.hi	338c <FSE_decompress+0x1d40>  // b.pmore
    34e8:	mov	w4, #0x0                   	// #0
    34ec:	ldr	x1, [sp, #176]
    34f0:	ldr	x0, [sp, #184]
    34f4:	cmp	x1, x0
    34f8:	b.eq	3400 <FSE_decompress+0x1db4>  // b.none
    34fc:	mov	w0, #0x0                   	// #0
    3500:	ldr	x2, [sp, #216]
    3504:	ldr	x1, [sp, #224]
    3508:	cmp	x2, x1
    350c:	b.eq	3410 <FSE_decompress+0x1dc4>  // b.none
    3510:	mov	w3, #0x0                   	// #0
    3514:	ldr	x2, [sp, #256]
    3518:	ldr	x1, [sp, #264]
    351c:	cmp	x2, x1
    3520:	b.eq	3420 <FSE_decompress+0x1dd4>  // b.none
    3524:	mov	x22, #0xffffffffffffffec    	// #-20
    3528:	ldr	x2, [sp, #296]
    352c:	ldr	x1, [sp, #304]
    3530:	cmp	x2, x1
    3534:	b.eq	3430 <FSE_decompress+0x1de4>  // b.none
    3538:	ldp	x19, x20, [sp, #16]
    353c:	ldp	x23, x24, [sp, #48]
    3540:	ldp	x25, x26, [sp, #64]
    3544:	ldp	x27, x28, [sp, #80]
    3548:	b	1a58 <FSE_decompress+0x40c>
    354c:	ldr	x0, [sp, #144]
    3550:	sub	x21, x0, #0x2
    3554:	cmp	x21, x25
    3558:	cset	w0, cs  // cs = hs, nlast
    355c:	cbz	w0, 35b4 <FSE_decompress+0x1f68>
    3560:	ldr	w0, [sp, #112]
    3564:	neg	w22, w0
    3568:	and	w22, w22, #0x3f
    356c:	mov	x24, #0x2                   	// #2
    3570:	ldr	w0, [sp, #248]
    3574:	ldr	x20, [sp, #240]
    3578:	lsl	x20, x20, x0
    357c:	lsr	x20, x20, x22
    3580:	add	x20, x19, x20, lsl #2
    3584:	mov	x2, x24
    3588:	mov	x1, x20
    358c:	mov	x0, x25
    3590:	bl	0 <grub_memmove>
    3594:	ldrb	w1, [x20, #2]
    3598:	ldr	w0, [sp, #248]
    359c:	add	w0, w0, w1
    35a0:	str	w0, [sp, #248]
    35a4:	ldrb	w0, [x20, #3]
    35a8:	add	x25, x25, x0
    35ac:	cmp	x25, x21
    35b0:	b.ls	3570 <FSE_decompress+0x1f24>  // b.plast
    35b4:	ldr	x0, [sp, #144]
    35b8:	cmp	x0, x25
    35bc:	b.hi	30a4 <FSE_decompress+0x1a58>  // b.pmore
    35c0:	mov	w24, #0x0                   	// #0
    35c4:	mov	w25, #0x1                   	// #1
    35c8:	ldr	w0, [sp, #112]
    35cc:	neg	w21, w0
    35d0:	and	w21, w21, #0x3f
    35d4:	mov	x22, #0x2                   	// #2
    35d8:	b	3244 <FSE_decompress+0x1bf8>
    35dc:	ldr	x0, [sp, #136]
    35e0:	sub	x21, x0, #0x2
    35e4:	cmp	x24, x21
    35e8:	cset	w0, ls  // ls = plast
    35ec:	cbz	w0, 3644 <FSE_decompress+0x1ff8>
    35f0:	ldr	w0, [sp, #112]
    35f4:	neg	w22, w0
    35f8:	and	w22, w22, #0x3f
    35fc:	mov	x26, #0x2                   	// #2
    3600:	ldr	w0, [sp, #208]
    3604:	ldr	x20, [sp, #200]
    3608:	lsl	x20, x20, x0
    360c:	lsr	x20, x20, x22
    3610:	add	x20, x19, x20, lsl #2
    3614:	mov	x2, x26
    3618:	mov	x1, x20
    361c:	mov	x0, x24
    3620:	bl	0 <grub_memmove>
    3624:	ldrb	w1, [x20, #2]
    3628:	ldr	w0, [sp, #208]
    362c:	add	w0, w0, w1
    3630:	str	w0, [sp, #208]
    3634:	ldrb	w0, [x20, #3]
    3638:	add	x24, x24, x0
    363c:	cmp	x24, x21
    3640:	b.ls	3600 <FSE_decompress+0x1fb4>  // b.plast
    3644:	ldr	x0, [sp, #136]
    3648:	cmp	x0, x24
    364c:	b.hi	2dbc <FSE_decompress+0x1770>  // b.pmore
    3650:	mov	w24, #0x0                   	// #0
    3654:	mov	w26, #0x1                   	// #1
    3658:	ldr	x0, [sp, #144]
    365c:	sub	x22, x0, #0x7
    3660:	ldr	w0, [sp, #112]
    3664:	neg	w21, w0
    3668:	and	w21, w21, #0x3f
    366c:	b	2f5c <FSE_decompress+0x1910>
    3670:	ldr	x0, [sp, #120]
    3674:	sub	x22, x0, #0x2
    3678:	cmp	x22, x21
    367c:	cset	w0, cs  // cs = hs, nlast
    3680:	cbz	w0, 36d8 <FSE_decompress+0x208c>
    3684:	ldr	w0, [sp, #112]
    3688:	neg	w26, w0
    368c:	and	w26, w26, #0x3f
    3690:	mov	x28, #0x2                   	// #2
    3694:	ldr	w0, [sp, #168]
    3698:	ldr	x20, [sp, #160]
    369c:	lsl	x20, x20, x0
    36a0:	lsr	x20, x20, x26
    36a4:	add	x20, x19, x20, lsl #2
    36a8:	mov	x2, x28
    36ac:	mov	x1, x20
    36b0:	mov	x0, x21
    36b4:	bl	0 <grub_memmove>
    36b8:	ldrb	w1, [x20, #2]
    36bc:	ldr	w0, [sp, #168]
    36c0:	add	w0, w0, w1
    36c4:	str	w0, [sp, #168]
    36c8:	ldrb	w0, [x20, #3]
    36cc:	add	x21, x21, x0
    36d0:	cmp	x21, x22
    36d4:	b.ls	3694 <FSE_decompress+0x2048>  // b.plast
    36d8:	ldr	x0, [sp, #120]
    36dc:	cmp	x0, x21
    36e0:	b.hi	2ad8 <FSE_decompress+0x148c>  // b.pmore
    36e4:	mov	w26, #0x0                   	// #0
    36e8:	mov	w28, #0x1                   	// #1
    36ec:	ldr	x0, [sp, #136]
    36f0:	sub	x22, x0, #0x7
    36f4:	ldr	w0, [sp, #112]
    36f8:	neg	w21, w0
    36fc:	and	w21, w21, #0x3f
    3700:	b	2c78 <FSE_decompress+0x162c>
    3704:	ldr	x0, [sp, #152]
    3708:	sub	x27, x0, #0x7
    370c:	ldr	x23, [sp, #144]
    3710:	ldr	x25, [sp, #136]
    3714:	ldr	x24, [sp, #120]
    3718:	ldr	x0, [sp, #136]
    371c:	cmp	x0, x24
    3720:	ldr	x0, [sp, #120]
    3724:	ccmp	x0, x21, #0x0, cs  // cs = hs, nlast
    3728:	mov	x22, #0xffffffffffffffec    	// #-20
    372c:	ldr	x0, [sp, #144]
    3730:	ccmp	x0, x25, #0x0, cs  // cs = hs, nlast
    3734:	b.cs	2850 <FSE_decompress+0x1204>  // b.hs, b.nlast
    3738:	ldp	x19, x20, [sp, #16]
    373c:	ldp	x23, x24, [sp, #48]
    3740:	ldp	x25, x26, [sp, #64]
    3744:	ldp	x27, x28, [sp, #80]
    3748:	b	1a58 <FSE_decompress+0x40c>
    374c:	mov	x22, #0xffffffffffffffff    	// #-1
    3750:	ldp	x19, x20, [sp, #16]
    3754:	ldp	x23, x24, [sp, #48]
    3758:	ldp	x25, x26, [sp, #64]
    375c:	ldp	x27, x28, [sp, #80]
    3760:	b	1a58 <FSE_decompress+0x40c>
    3764:	mov	x22, #0xffffffffffffffec    	// #-20
    3768:	ldp	x19, x20, [sp, #16]
    376c:	ldp	x23, x24, [sp, #48]
    3770:	ldp	x25, x26, [sp, #64]
    3774:	ldp	x27, x28, [sp, #80]
    3778:	b	1a58 <FSE_decompress+0x40c>
    377c:	mov	x22, #0xffffffffffffffff    	// #-1
    3780:	ldp	x19, x20, [sp, #16]
    3784:	ldp	x23, x24, [sp, #48]
    3788:	ldp	x25, x26, [sp, #64]
    378c:	ldp	x27, x28, [sp, #80]
    3790:	b	1a58 <FSE_decompress+0x40c>
    3794:	mov	x22, #0xffffffffffffffec    	// #-20
    3798:	ldp	x19, x20, [sp, #16]
    379c:	ldp	x23, x24, [sp, #48]
    37a0:	ldp	x25, x26, [sp, #64]
    37a4:	ldp	x27, x28, [sp, #80]
    37a8:	b	1a58 <FSE_decompress+0x40c>
    37ac:	mov	x22, #0xffffffffffffffff    	// #-1
    37b0:	ldp	x19, x20, [sp, #16]
    37b4:	ldp	x23, x24, [sp, #48]
    37b8:	ldp	x25, x26, [sp, #64]
    37bc:	ldp	x27, x28, [sp, #80]
    37c0:	b	1a58 <FSE_decompress+0x40c>
    37c4:	mov	x22, #0xffffffffffffffec    	// #-20
    37c8:	ldp	x19, x20, [sp, #16]
    37cc:	ldp	x23, x24, [sp, #48]
    37d0:	ldp	x25, x26, [sp, #64]
    37d4:	ldp	x27, x28, [sp, #80]
    37d8:	b	1a58 <FSE_decompress+0x40c>
    37dc:	mov	x22, #0xffffffffffffffff    	// #-1
    37e0:	ldp	x19, x20, [sp, #16]
    37e4:	ldp	x23, x24, [sp, #48]
    37e8:	ldp	x25, x26, [sp, #64]
    37ec:	ldp	x27, x28, [sp, #80]
    37f0:	b	1a58 <FSE_decompress+0x40c>
    37f4:	mov	x22, #0xffffffffffffffec    	// #-20
    37f8:	ldp	x19, x20, [sp, #16]
    37fc:	ldp	x23, x24, [sp, #48]
    3800:	ldp	x25, x26, [sp, #64]
    3804:	ldp	x27, x28, [sp, #80]
    3808:	b	1a58 <FSE_decompress+0x40c>
    380c:	stp	x29, x30, [sp, #-144]!
    3810:	mov	x29, sp
    3814:	cbz	x3, 3884 <FSE_decompress+0x2238>
    3818:	stp	x19, x20, [sp, #16]
    381c:	stp	x23, x24, [sp, #48]
    3820:	mov	x19, x0
    3824:	mov	x24, x1
    3828:	str	x2, [sp, #128]
    382c:	add	x5, x2, #0x8
    3830:	str	x5, [sp, #136]
    3834:	cmp	x3, #0x7
    3838:	b.ls	38ac <FSE_decompress+0x2260>  // b.plast
    383c:	sub	x5, x3, #0x8
    3840:	add	x0, x2, x5
    3844:	str	x0, [sp, #120]
    3848:	ldr	x0, [x2, x5]
    384c:	str	x0, [sp, #104]
    3850:	add	x2, x2, x3
    3854:	ldurb	w2, [x2, #-1]
    3858:	mov	x0, #0xffffffffffffffff    	// #-1
    385c:	cbz	w2, 3d44 <FSE_decompress+0x26f8>
    3860:	clz	w2, w2
    3864:	sub	w2, w2, #0x17
    3868:	str	w2, [sp, #112]
    386c:	mov	x0, x3
    3870:	cmn	x3, #0x78
    3874:	b.ls	389c <FSE_decompress+0x2250>  // b.plast
    3878:	ldp	x19, x20, [sp, #16]
    387c:	ldp	x23, x24, [sp, #48]
    3880:	b	3d3c <FSE_decompress+0x26f0>
    3884:	mov	x2, #0x28                  	// #40
    3888:	mov	w1, #0x0                   	// #0
    388c:	add	x0, sp, #0x68
    3890:	bl	0 <grub_memset>
    3894:	mov	x0, #0xffffffffffffffb8    	// #-72
    3898:	b	3d3c <FSE_decompress+0x26f0>
    389c:	stp	x21, x22, [sp, #32]
    38a0:	stp	x25, x26, [sp, #64]
    38a4:	stp	x27, x28, [sp, #80]
    38a8:	b	3938 <FSE_decompress+0x22ec>
    38ac:	str	x2, [sp, #120]
    38b0:	ldrb	w5, [x2]
    38b4:	str	x5, [sp, #104]
    38b8:	cmp	x3, #0x5
    38bc:	b.eq	3994 <FSE_decompress+0x2348>  // b.none
    38c0:	b.hi	3970 <FSE_decompress+0x2324>  // b.pmore
    38c4:	cmp	x3, #0x3
    38c8:	b.eq	38e4 <FSE_decompress+0x2298>  // b.none
    38cc:	cmp	x3, #0x4
    38d0:	b.ne	3964 <FSE_decompress+0x2318>  // b.any
    38d4:	ldrb	w5, [x2, #3]
    38d8:	ldr	x0, [sp, #104]
    38dc:	add	x5, x0, x5, lsl #24
    38e0:	str	x5, [sp, #104]
    38e4:	ldrb	w5, [x2, #2]
    38e8:	ldr	x0, [sp, #104]
    38ec:	add	x5, x0, x5, lsl #16
    38f0:	str	x5, [sp, #104]
    38f4:	ldrb	w5, [x2, #1]
    38f8:	ldr	x0, [sp, #104]
    38fc:	add	x5, x0, x5, lsl #8
    3900:	str	x5, [sp, #104]
    3904:	add	x2, x2, x3
    3908:	ldurb	w2, [x2, #-1]
    390c:	mov	x0, #0xffffffffffffffec    	// #-20
    3910:	cbz	w2, 3d50 <FSE_decompress+0x2704>
    3914:	stp	x21, x22, [sp, #32]
    3918:	stp	x25, x26, [sp, #64]
    391c:	stp	x27, x28, [sp, #80]
    3920:	clz	w5, w2
    3924:	mov	w2, #0x9                   	// #9
    3928:	sub	w1, w2, w3
    392c:	add	w1, w5, w1, lsl #3
    3930:	sub	w1, w1, #0x1f
    3934:	str	w1, [sp, #112]
    3938:	add	x26, x19, x24
    393c:	add	x21, x4, #0x4
    3940:	mov	x0, x4
    3944:	bl	1678 <FSE_decompress+0x2c>
    3948:	ubfx	x25, x0, #16, #8
    394c:	mov	w23, #0x0                   	// #0
    3950:	mov	w27, #0x1                   	// #1
    3954:	sub	x22, x26, #0x7
    3958:	neg	w20, w25
    395c:	and	w20, w20, #0x3f
    3960:	b	3ad4 <FSE_decompress+0x2488>
    3964:	cmp	x3, #0x2
    3968:	b.eq	38f4 <FSE_decompress+0x22a8>  // b.none
    396c:	b	3904 <FSE_decompress+0x22b8>
    3970:	cmp	x3, #0x6
    3974:	b.eq	3984 <FSE_decompress+0x2338>  // b.none
    3978:	ldrb	w0, [x2, #6]
    397c:	add	x5, x5, x0, lsl #48
    3980:	str	x5, [sp, #104]
    3984:	ldrb	w0, [x2, #5]
    3988:	ldr	x1, [sp, #104]
    398c:	add	x0, x1, x0, lsl #40
    3990:	str	x0, [sp, #104]
    3994:	ldrb	w0, [x2, #4]
    3998:	ldr	x1, [sp, #104]
    399c:	add	x0, x1, x0, lsl #32
    39a0:	str	x0, [sp, #104]
    39a4:	b	38d4 <FSE_decompress+0x2288>
    39a8:	lsr	w2, w1, #3
    39ac:	sub	x0, x0, x2
    39b0:	str	x0, [sp, #120]
    39b4:	and	w1, w1, #0x7
    39b8:	str	w1, [sp, #112]
    39bc:	ldr	x0, [x0]
    39c0:	str	x0, [sp, #104]
    39c4:	mov	w3, w23
    39c8:	b	39e4 <FSE_decompress+0x2398>
    39cc:	sub	x0, x0, w2, uxtw
    39d0:	str	x0, [sp, #120]
    39d4:	sub	w1, w1, w2, lsl #3
    39d8:	str	w1, [sp, #112]
    39dc:	ldr	x0, [x0]
    39e0:	str	x0, [sp, #104]
    39e4:	cmp	w3, #0x0
    39e8:	ccmp	x19, x22, #0x2, eq  // eq = none
    39ec:	b.cs	3b20 <FSE_decompress+0x24d4>  // b.hs, b.nlast
    39f0:	ldr	w0, [sp, #112]
    39f4:	ldr	x28, [sp, #104]
    39f8:	lsl	x28, x28, x0
    39fc:	lsr	x28, x28, x20
    3a00:	add	x28, x21, x28, lsl #2
    3a04:	mov	x2, #0x2                   	// #2
    3a08:	mov	x1, x28
    3a0c:	mov	x0, x19
    3a10:	bl	0 <grub_memmove>
    3a14:	ldrb	w1, [x28, #2]
    3a18:	ldr	w0, [sp, #112]
    3a1c:	add	w1, w1, w0
    3a20:	str	w1, [sp, #112]
    3a24:	ldrb	w0, [x28, #3]
    3a28:	add	x19, x19, x0
    3a2c:	ldr	x28, [sp, #104]
    3a30:	lsl	x28, x28, x1
    3a34:	lsr	x28, x28, x20
    3a38:	add	x28, x21, x28, lsl #2
    3a3c:	mov	x2, #0x2                   	// #2
    3a40:	mov	x1, x28
    3a44:	mov	x0, x19
    3a48:	bl	0 <grub_memmove>
    3a4c:	ldrb	w0, [x28, #2]
    3a50:	ldr	w1, [sp, #112]
    3a54:	add	w0, w0, w1
    3a58:	str	w0, [sp, #112]
    3a5c:	ldrb	w1, [x28, #3]
    3a60:	add	x19, x19, x1
    3a64:	ldr	x28, [sp, #104]
    3a68:	lsl	x28, x28, x0
    3a6c:	lsr	x28, x28, x20
    3a70:	add	x28, x21, x28, lsl #2
    3a74:	mov	x2, #0x2                   	// #2
    3a78:	mov	x1, x28
    3a7c:	mov	x0, x19
    3a80:	bl	0 <grub_memmove>
    3a84:	ldrb	w1, [x28, #2]
    3a88:	ldr	w0, [sp, #112]
    3a8c:	add	w1, w1, w0
    3a90:	str	w1, [sp, #112]
    3a94:	ldrb	w0, [x28, #3]
    3a98:	add	x19, x19, x0
    3a9c:	ldr	x28, [sp, #104]
    3aa0:	lsl	x28, x28, x1
    3aa4:	lsr	x28, x28, x20
    3aa8:	add	x28, x21, x28, lsl #2
    3aac:	mov	x2, #0x2                   	// #2
    3ab0:	mov	x1, x28
    3ab4:	mov	x0, x19
    3ab8:	bl	0 <grub_memmove>
    3abc:	ldrb	w1, [x28, #2]
    3ac0:	ldr	w0, [sp, #112]
    3ac4:	add	w0, w0, w1
    3ac8:	str	w0, [sp, #112]
    3acc:	ldrb	w0, [x28, #3]
    3ad0:	add	x19, x19, x0
    3ad4:	ldr	w1, [sp, #112]
    3ad8:	cmp	w1, #0x40
    3adc:	b.hi	3b20 <FSE_decompress+0x24d4>  // b.pmore
    3ae0:	ldr	x0, [sp, #120]
    3ae4:	ldr	x2, [sp, #136]
    3ae8:	cmp	x0, x2
    3aec:	b.cs	39a8 <FSE_decompress+0x235c>  // b.hs, b.nlast
    3af0:	ldr	x4, [sp, #128]
    3af4:	cmp	x0, x4
    3af8:	b.eq	3b20 <FSE_decompress+0x24d4>  // b.none
    3afc:	lsr	w2, w1, #3
    3b00:	lsr	w5, w1, #3
    3b04:	sub	x5, x0, x5
    3b08:	mov	w3, w23
    3b0c:	cmp	x4, x5
    3b10:	b.ls	39cc <FSE_decompress+0x2380>  // b.plast
    3b14:	sub	w2, w0, w4
    3b18:	mov	w3, w27
    3b1c:	b	39cc <FSE_decompress+0x2380>
    3b20:	mov	w27, #0x0                   	// #0
    3b24:	mov	w28, #0x1                   	// #1
    3b28:	sub	x20, x26, #0x2
    3b2c:	neg	w23, w25
    3b30:	and	w23, w23, #0x3f
    3b34:	b	3bc8 <FSE_decompress+0x257c>
    3b38:	lsr	w2, w1, #3
    3b3c:	sub	x0, x0, x2
    3b40:	str	x0, [sp, #120]
    3b44:	and	w1, w1, #0x7
    3b48:	str	w1, [sp, #112]
    3b4c:	ldr	x0, [x0]
    3b50:	str	x0, [sp, #104]
    3b54:	mov	w3, w27
    3b58:	b	3b74 <FSE_decompress+0x2528>
    3b5c:	sub	x0, x0, w2, uxtw
    3b60:	str	x0, [sp, #120]
    3b64:	sub	w1, w1, w2, lsl #3
    3b68:	str	w1, [sp, #112]
    3b6c:	ldr	x0, [x0]
    3b70:	str	x0, [sp, #104]
    3b74:	mov	x22, x20
    3b78:	cmp	x19, x20
    3b7c:	cset	w0, ls  // ls = plast
    3b80:	cmp	w3, #0x0
    3b84:	ccmp	w0, #0x0, #0x4, eq  // eq = none
    3b88:	b.eq	3cb8 <FSE_decompress+0x266c>  // b.none
    3b8c:	ldr	w0, [sp, #112]
    3b90:	ldr	x22, [sp, #104]
    3b94:	lsl	x22, x22, x0
    3b98:	lsr	x22, x22, x23
    3b9c:	add	x22, x21, x22, lsl #2
    3ba0:	mov	x2, #0x2                   	// #2
    3ba4:	mov	x1, x22
    3ba8:	mov	x0, x19
    3bac:	bl	0 <grub_memmove>
    3bb0:	ldrb	w1, [x22, #2]
    3bb4:	ldr	w0, [sp, #112]
    3bb8:	add	w0, w0, w1
    3bbc:	str	w0, [sp, #112]
    3bc0:	ldrb	w0, [x22, #3]
    3bc4:	add	x19, x19, x0
    3bc8:	ldr	w1, [sp, #112]
    3bcc:	cmp	w1, #0x40
    3bd0:	b.hi	3cac <FSE_decompress+0x2660>  // b.pmore
    3bd4:	ldr	x0, [sp, #120]
    3bd8:	ldr	x2, [sp, #136]
    3bdc:	cmp	x0, x2
    3be0:	b.cs	3b38 <FSE_decompress+0x24ec>  // b.hs, b.nlast
    3be4:	ldr	x4, [sp, #128]
    3be8:	cmp	x0, x4
    3bec:	b.eq	3cac <FSE_decompress+0x2660>  // b.none
    3bf0:	lsr	w2, w1, #3
    3bf4:	lsr	w5, w1, #3
    3bf8:	sub	x5, x0, x5
    3bfc:	mov	w3, w27
    3c00:	cmp	x4, x5
    3c04:	b.ls	3b5c <FSE_decompress+0x2510>  // b.plast
    3c08:	sub	w2, w0, w4
    3c0c:	mov	w3, w28
    3c10:	b	3b5c <FSE_decompress+0x2510>
    3c14:	ldr	w0, [sp, #112]
    3c18:	ldr	x1, [sp, #104]
    3c1c:	lsl	x1, x1, x0
    3c20:	neg	w25, w25
    3c24:	lsr	x25, x1, x25
    3c28:	add	x21, x21, x25, lsl #2
    3c2c:	mov	x2, #0x1                   	// #1
    3c30:	mov	x1, x21
    3c34:	mov	x0, x19
    3c38:	bl	0 <grub_memmove>
    3c3c:	ldrb	w0, [x21, #3]
    3c40:	cmp	w0, #0x1
    3c44:	b.eq	3c70 <FSE_decompress+0x2624>  // b.none
    3c48:	ldr	w0, [sp, #112]
    3c4c:	cmp	w0, #0x3f
    3c50:	b.hi	3d14 <FSE_decompress+0x26c8>  // b.pmore
    3c54:	ldrb	w1, [x21, #2]
    3c58:	add	w0, w1, w0
    3c5c:	cmp	w0, #0x41
    3c60:	mov	w1, #0x40                  	// #64
    3c64:	csel	w0, w0, w1, cc  // cc = lo, ul, last
    3c68:	str	w0, [sp, #112]
    3c6c:	b	3d14 <FSE_decompress+0x26c8>
    3c70:	ldrb	w1, [x21, #2]
    3c74:	ldr	w0, [sp, #112]
    3c78:	add	w0, w0, w1
    3c7c:	str	w0, [sp, #112]
    3c80:	b	3d14 <FSE_decompress+0x26c8>
    3c84:	ldr	w0, [sp, #112]
    3c88:	cmp	w0, #0x40
    3c8c:	mov	x0, #0xffffffffffffffec    	// #-20
    3c90:	csel	x0, x24, x0, eq  // eq = none
    3c94:	ldp	x19, x20, [sp, #16]
    3c98:	ldp	x21, x22, [sp, #32]
    3c9c:	ldp	x23, x24, [sp, #48]
    3ca0:	ldp	x25, x26, [sp, #64]
    3ca4:	ldp	x27, x28, [sp, #80]
    3ca8:	b	3d3c <FSE_decompress+0x26f0>
    3cac:	sub	x22, x26, #0x2
    3cb0:	cmp	x19, x22
    3cb4:	cset	w0, ls  // ls = plast
    3cb8:	cbz	w0, 3d0c <FSE_decompress+0x26c0>
    3cbc:	neg	w23, w25
    3cc0:	and	w23, w23, #0x3f
    3cc4:	mov	x27, #0x2                   	// #2
    3cc8:	ldr	w0, [sp, #112]
    3ccc:	ldr	x20, [sp, #104]
    3cd0:	lsl	x20, x20, x0
    3cd4:	lsr	x20, x20, x23
    3cd8:	add	x20, x21, x20, lsl #2
    3cdc:	mov	x2, x27
    3ce0:	mov	x1, x20
    3ce4:	mov	x0, x19
    3ce8:	bl	0 <grub_memmove>
    3cec:	ldrb	w1, [x20, #2]
    3cf0:	ldr	w0, [sp, #112]
    3cf4:	add	w0, w0, w1
    3cf8:	str	w0, [sp, #112]
    3cfc:	ldrb	w0, [x20, #3]
    3d00:	add	x19, x19, x0
    3d04:	cmp	x19, x22
    3d08:	b.ls	3cc8 <FSE_decompress+0x267c>  // b.plast
    3d0c:	cmp	x26, x19
    3d10:	b.hi	3c14 <FSE_decompress+0x25c8>  // b.pmore
    3d14:	mov	x0, #0xffffffffffffffec    	// #-20
    3d18:	ldr	x2, [sp, #120]
    3d1c:	ldr	x1, [sp, #128]
    3d20:	cmp	x2, x1
    3d24:	b.eq	3c84 <FSE_decompress+0x2638>  // b.none
    3d28:	ldp	x19, x20, [sp, #16]
    3d2c:	ldp	x21, x22, [sp, #32]
    3d30:	ldp	x23, x24, [sp, #48]
    3d34:	ldp	x25, x26, [sp, #64]
    3d38:	ldp	x27, x28, [sp, #80]
    3d3c:	ldp	x29, x30, [sp], #144
    3d40:	ret
    3d44:	ldp	x19, x20, [sp, #16]
    3d48:	ldp	x23, x24, [sp, #48]
    3d4c:	b	3d3c <FSE_decompress+0x26f0>
    3d50:	ldp	x19, x20, [sp, #16]
    3d54:	ldp	x23, x24, [sp, #48]
    3d58:	b	3d3c <FSE_decompress+0x26f0>
    3d5c:	stp	x29, x30, [sp, #-288]!
    3d60:	mov	x29, sp
    3d64:	stp	x21, x22, [sp, #32]
    3d68:	str	x0, [sp, #104]
    3d6c:	str	x1, [sp, #112]
    3d70:	str	x4, [sp, #120]
    3d74:	mov	x21, #0xffffffffffffffec    	// #-20
    3d78:	cmp	x3, #0x9
    3d7c:	b.ls	3de4 <FSE_decompress+0x2798>  // b.plast
    3d80:	stp	x19, x20, [sp, #16]
    3d84:	stp	x23, x24, [sp, #48]
    3d88:	stp	x25, x26, [sp, #64]
    3d8c:	stp	x27, x28, [sp, #80]
    3d90:	mov	x19, x2
    3d94:	mov	x20, x3
    3d98:	ldrh	w22, [x2]
    3d9c:	and	x26, x22, #0xffff
    3da0:	ldrh	w27, [x2, #2]
    3da4:	and	x25, x27, #0xffff
    3da8:	ldrh	w24, [x2, #4]
    3dac:	and	x28, x24, #0xffff
    3db0:	sub	x23, x3, w24, uxth
    3db4:	add	x0, x25, w22, uxth
    3db8:	sub	x23, x23, x0
    3dbc:	sub	x21, x23, #0x6
    3dc0:	mov	x0, x4
    3dc4:	bl	1678 <FSE_decompress+0x2c>
    3dc8:	cmp	x20, x21
    3dcc:	b.cs	3df4 <FSE_decompress+0x27a8>  // b.hs, b.nlast
    3dd0:	mov	x21, #0xffffffffffffffec    	// #-20
    3dd4:	ldp	x19, x20, [sp, #16]
    3dd8:	ldp	x23, x24, [sp, #48]
    3ddc:	ldp	x25, x26, [sp, #64]
    3de0:	ldp	x27, x28, [sp, #80]
    3de4:	mov	x0, x21
    3de8:	ldp	x21, x22, [sp, #32]
    3dec:	ldp	x29, x30, [sp], #288
    3df0:	ret
    3df4:	cbz	x26, 3e44 <FSE_decompress+0x27f8>
    3df8:	add	x6, x19, #0x6
    3dfc:	ubfx	x30, x0, #16, #8
    3e00:	str	x6, [sp, #152]
    3e04:	add	x17, x19, #0xe
    3e08:	str	x17, [sp, #160]
    3e0c:	cmp	x26, #0x7
    3e10:	b.ls	3e6c <FSE_decompress+0x2820>  // b.plast
    3e14:	sub	x0, x26, #0x8
    3e18:	add	x1, x6, x0
    3e1c:	str	x1, [sp, #144]
    3e20:	ldr	x0, [x6, x0]
    3e24:	str	x0, [sp, #128]
    3e28:	add	x0, x6, x26
    3e2c:	ldurb	w0, [x0, #-1]
    3e30:	cbz	w0, 5148 <FSE_decompress+0x3afc>
    3e34:	clz	w0, w0
    3e38:	sub	w0, w0, #0x17
    3e3c:	str	w0, [sp, #136]
    3e40:	b	3ee8 <FSE_decompress+0x289c>
    3e44:	mov	x2, #0x28                  	// #40
    3e48:	mov	w1, #0x0                   	// #0
    3e4c:	add	x0, sp, #0x80
    3e50:	bl	0 <grub_memset>
    3e54:	mov	x21, #0xffffffffffffffb8    	// #-72
    3e58:	ldp	x19, x20, [sp, #16]
    3e5c:	ldp	x23, x24, [sp, #48]
    3e60:	ldp	x25, x26, [sp, #64]
    3e64:	ldp	x27, x28, [sp, #80]
    3e68:	b	3de4 <FSE_decompress+0x2798>
    3e6c:	str	x6, [sp, #144]
    3e70:	ldrb	w0, [x19, #6]
    3e74:	str	x0, [sp, #128]
    3e78:	cmp	w22, #0x5
    3e7c:	b.eq	3f64 <FSE_decompress+0x2918>  // b.none
    3e80:	b.hi	3f40 <FSE_decompress+0x28f4>  // b.pmore
    3e84:	cmp	w22, #0x3
    3e88:	b.eq	3ea4 <FSE_decompress+0x2858>  // b.none
    3e8c:	cmp	w22, #0x4
    3e90:	b.ne	3f34 <FSE_decompress+0x28e8>  // b.any
    3e94:	ldrb	w0, [x19, #9]
    3e98:	ldr	x1, [sp, #128]
    3e9c:	add	x0, x1, x0, lsl #24
    3ea0:	str	x0, [sp, #128]
    3ea4:	ldrb	w0, [x19, #8]
    3ea8:	ldr	x1, [sp, #128]
    3eac:	add	x0, x1, x0, lsl #16
    3eb0:	str	x0, [sp, #128]
    3eb4:	ldrb	w0, [x19, #7]
    3eb8:	ldr	x1, [sp, #128]
    3ebc:	add	x0, x1, x0, lsl #8
    3ec0:	str	x0, [sp, #128]
    3ec4:	add	x0, x6, x26
    3ec8:	ldurb	w0, [x0, #-1]
    3ecc:	cbz	w0, 5160 <FSE_decompress+0x3b14>
    3ed0:	clz	w1, w0
    3ed4:	mov	w0, #0x9                   	// #9
    3ed8:	sub	w0, w0, w22
    3edc:	add	w0, w1, w0, lsl #3
    3ee0:	sub	w0, w0, #0x1f
    3ee4:	str	w0, [sp, #136]
    3ee8:	cbz	x25, 3f78 <FSE_decompress+0x292c>
    3eec:	add	x7, x6, x26
    3ef0:	str	x7, [sp, #192]
    3ef4:	add	x18, x7, #0x8
    3ef8:	str	x18, [sp, #200]
    3efc:	cmp	x25, #0x7
    3f00:	b.ls	3fa0 <FSE_decompress+0x2954>  // b.plast
    3f04:	sub	x0, x25, #0x8
    3f08:	add	x1, x7, x0
    3f0c:	str	x1, [sp, #184]
    3f10:	ldr	x0, [x7, x0]
    3f14:	str	x0, [sp, #168]
    3f18:	add	x0, x7, x25
    3f1c:	ldurb	w0, [x0, #-1]
    3f20:	cbz	w0, 5118 <FSE_decompress+0x3acc>
    3f24:	clz	w0, w0
    3f28:	sub	w0, w0, #0x17
    3f2c:	str	w0, [sp, #176]
    3f30:	b	401c <FSE_decompress+0x29d0>
    3f34:	cmp	w22, #0x2
    3f38:	b.eq	3eb4 <FSE_decompress+0x2868>  // b.none
    3f3c:	b	3ec4 <FSE_decompress+0x2878>
    3f40:	cmp	w22, #0x6
    3f44:	b.eq	3f54 <FSE_decompress+0x2908>  // b.none
    3f48:	ldrb	w1, [x19, #12]
    3f4c:	add	x0, x0, x1, lsl #48
    3f50:	str	x0, [sp, #128]
    3f54:	ldrb	w0, [x19, #11]
    3f58:	ldr	x1, [sp, #128]
    3f5c:	add	x0, x1, x0, lsl #40
    3f60:	str	x0, [sp, #128]
    3f64:	ldrb	w0, [x19, #10]
    3f68:	ldr	x1, [sp, #128]
    3f6c:	add	x0, x1, x0, lsl #32
    3f70:	str	x0, [sp, #128]
    3f74:	b	3e94 <FSE_decompress+0x2848>
    3f78:	mov	x2, #0x28                  	// #40
    3f7c:	mov	w1, #0x0                   	// #0
    3f80:	add	x0, sp, #0xa8
    3f84:	bl	0 <grub_memset>
    3f88:	mov	x21, #0xffffffffffffffb8    	// #-72
    3f8c:	ldp	x19, x20, [sp, #16]
    3f90:	ldp	x23, x24, [sp, #48]
    3f94:	ldp	x25, x26, [sp, #64]
    3f98:	ldp	x27, x28, [sp, #80]
    3f9c:	b	3de4 <FSE_decompress+0x2798>
    3fa0:	str	x7, [sp, #184]
    3fa4:	ldrb	w0, [x6, x26]
    3fa8:	str	x0, [sp, #168]
    3fac:	cmp	w27, #0x5
    3fb0:	b.eq	4098 <FSE_decompress+0x2a4c>  // b.none
    3fb4:	b.hi	4074 <FSE_decompress+0x2a28>  // b.pmore
    3fb8:	cmp	w27, #0x3
    3fbc:	b.eq	3fd8 <FSE_decompress+0x298c>  // b.none
    3fc0:	cmp	w27, #0x4
    3fc4:	b.ne	4068 <FSE_decompress+0x2a1c>  // b.any
    3fc8:	ldrb	w0, [x7, #3]
    3fcc:	ldr	x1, [sp, #168]
    3fd0:	add	x0, x1, x0, lsl #24
    3fd4:	str	x0, [sp, #168]
    3fd8:	ldrb	w0, [x7, #2]
    3fdc:	ldr	x1, [sp, #168]
    3fe0:	add	x0, x1, x0, lsl #16
    3fe4:	str	x0, [sp, #168]
    3fe8:	ldrb	w0, [x7, #1]
    3fec:	ldr	x1, [sp, #168]
    3ff0:	add	x0, x1, x0, lsl #8
    3ff4:	str	x0, [sp, #168]
    3ff8:	add	x0, x7, x25
    3ffc:	ldurb	w0, [x0, #-1]
    4000:	cbz	w0, 5130 <FSE_decompress+0x3ae4>
    4004:	clz	w1, w0
    4008:	mov	w0, #0x9                   	// #9
    400c:	sub	w0, w0, w27
    4010:	add	w0, w1, w0, lsl #3
    4014:	sub	w0, w0, #0x1f
    4018:	str	w0, [sp, #176]
    401c:	cbz	x28, 40ac <FSE_decompress+0x2a60>
    4020:	add	x13, x7, x25
    4024:	str	x13, [sp, #232]
    4028:	add	x20, x13, #0x8
    402c:	str	x20, [sp, #240]
    4030:	cmp	x28, #0x7
    4034:	b.ls	40d4 <FSE_decompress+0x2a88>  // b.plast
    4038:	sub	x0, x28, #0x8
    403c:	add	x1, x13, x0
    4040:	str	x1, [sp, #224]
    4044:	ldr	x0, [x13, x0]
    4048:	str	x0, [sp, #208]
    404c:	add	x0, x13, x28
    4050:	ldurb	w0, [x0, #-1]
    4054:	cbz	w0, 50e8 <FSE_decompress+0x3a9c>
    4058:	clz	w0, w0
    405c:	sub	w0, w0, #0x17
    4060:	str	w0, [sp, #216]
    4064:	b	4150 <FSE_decompress+0x2b04>
    4068:	cmp	w27, #0x2
    406c:	b.eq	3fe8 <FSE_decompress+0x299c>  // b.none
    4070:	b	3ff8 <FSE_decompress+0x29ac>
    4074:	cmp	w27, #0x6
    4078:	b.eq	4088 <FSE_decompress+0x2a3c>  // b.none
    407c:	ldrb	w1, [x7, #6]
    4080:	add	x0, x0, x1, lsl #48
    4084:	str	x0, [sp, #168]
    4088:	ldrb	w0, [x7, #5]
    408c:	ldr	x1, [sp, #168]
    4090:	add	x0, x1, x0, lsl #40
    4094:	str	x0, [sp, #168]
    4098:	ldrb	w0, [x7, #4]
    409c:	ldr	x1, [sp, #168]
    40a0:	add	x0, x1, x0, lsl #32
    40a4:	str	x0, [sp, #168]
    40a8:	b	3fc8 <FSE_decompress+0x297c>
    40ac:	mov	x2, #0x28                  	// #40
    40b0:	mov	w1, #0x0                   	// #0
    40b4:	add	x0, sp, #0xd0
    40b8:	bl	0 <grub_memset>
    40bc:	mov	x21, #0xffffffffffffffb8    	// #-72
    40c0:	ldp	x19, x20, [sp, #16]
    40c4:	ldp	x23, x24, [sp, #48]
    40c8:	ldp	x25, x26, [sp, #64]
    40cc:	ldp	x27, x28, [sp, #80]
    40d0:	b	3de4 <FSE_decompress+0x2798>
    40d4:	str	x13, [sp, #224]
    40d8:	ldrb	w0, [x7, x25]
    40dc:	str	x0, [sp, #208]
    40e0:	cmp	w24, #0x5
    40e4:	b.eq	41e4 <FSE_decompress+0x2b98>  // b.none
    40e8:	b.hi	41c0 <FSE_decompress+0x2b74>  // b.pmore
    40ec:	cmp	w24, #0x3
    40f0:	b.eq	410c <FSE_decompress+0x2ac0>  // b.none
    40f4:	cmp	w24, #0x4
    40f8:	b.ne	41b4 <FSE_decompress+0x2b68>  // b.any
    40fc:	ldrb	w0, [x13, #3]
    4100:	ldr	x1, [sp, #208]
    4104:	add	x0, x1, x0, lsl #24
    4108:	str	x0, [sp, #208]
    410c:	ldrb	w0, [x13, #2]
    4110:	ldr	x1, [sp, #208]
    4114:	add	x0, x1, x0, lsl #16
    4118:	str	x0, [sp, #208]
    411c:	ldrb	w0, [x13, #1]
    4120:	ldr	x1, [sp, #208]
    4124:	add	x0, x1, x0, lsl #8
    4128:	str	x0, [sp, #208]
    412c:	add	x0, x13, x28
    4130:	ldurb	w0, [x0, #-1]
    4134:	cbz	w0, 5100 <FSE_decompress+0x3ab4>
    4138:	clz	w1, w0
    413c:	mov	w0, #0x9                   	// #9
    4140:	sub	w0, w0, w24
    4144:	add	w0, w1, w0, lsl #3
    4148:	sub	w0, w0, #0x1f
    414c:	str	w0, [sp, #216]
    4150:	cbz	x21, 41f8 <FSE_decompress+0x2bac>
    4154:	add	x22, x13, x28
    4158:	str	x22, [sp, #272]
    415c:	add	x24, x22, #0x8
    4160:	str	x24, [sp, #280]
    4164:	cmp	x21, #0x7
    4168:	b.ls	4220 <FSE_decompress+0x2bd4>  // b.plast
    416c:	sub	x0, x23, #0xe
    4170:	add	x1, x22, x0
    4174:	str	x1, [sp, #264]
    4178:	ldr	x0, [x22, x0]
    417c:	str	x0, [sp, #248]
    4180:	add	x23, x22, x23
    4184:	ldurb	w0, [x23, #-7]
    4188:	cbz	w0, 50b8 <FSE_decompress+0x3a6c>
    418c:	clz	w0, w0
    4190:	sub	w0, w0, #0x17
    4194:	str	w0, [sp, #256]
    4198:	cmn	x21, #0x78
    419c:	b.ls	429c <FSE_decompress+0x2c50>  // b.plast
    41a0:	ldp	x19, x20, [sp, #16]
    41a4:	ldp	x23, x24, [sp, #48]
    41a8:	ldp	x25, x26, [sp, #64]
    41ac:	ldp	x27, x28, [sp, #80]
    41b0:	b	3de4 <FSE_decompress+0x2798>
    41b4:	cmp	w24, #0x2
    41b8:	b.eq	411c <FSE_decompress+0x2ad0>  // b.none
    41bc:	b	412c <FSE_decompress+0x2ae0>
    41c0:	cmp	w24, #0x6
    41c4:	b.eq	41d4 <FSE_decompress+0x2b88>  // b.none
    41c8:	ldrb	w1, [x13, #6]
    41cc:	add	x0, x0, x1, lsl #48
    41d0:	str	x0, [sp, #208]
    41d4:	ldrb	w0, [x13, #5]
    41d8:	ldr	x1, [sp, #208]
    41dc:	add	x0, x1, x0, lsl #40
    41e0:	str	x0, [sp, #208]
    41e4:	ldrb	w0, [x13, #4]
    41e8:	ldr	x1, [sp, #208]
    41ec:	add	x0, x1, x0, lsl #32
    41f0:	str	x0, [sp, #208]
    41f4:	b	40fc <FSE_decompress+0x2ab0>
    41f8:	mov	x2, #0x28                  	// #40
    41fc:	mov	w1, #0x0                   	// #0
    4200:	add	x0, sp, #0xf8
    4204:	bl	0 <grub_memset>
    4208:	mov	x21, #0xffffffffffffffb8    	// #-72
    420c:	ldp	x19, x20, [sp, #16]
    4210:	ldp	x23, x24, [sp, #48]
    4214:	ldp	x25, x26, [sp, #64]
    4218:	ldp	x27, x28, [sp, #80]
    421c:	b	3de4 <FSE_decompress+0x2798>
    4220:	str	x22, [sp, #264]
    4224:	ldrb	w0, [x13, x28]
    4228:	str	x0, [sp, #248]
    422c:	cmp	x21, #0x5
    4230:	b.eq	4498 <FSE_decompress+0x2e4c>  // b.none
    4234:	b.hi	4474 <FSE_decompress+0x2e28>  // b.pmore
    4238:	cmp	x21, #0x3
    423c:	b.eq	4258 <FSE_decompress+0x2c0c>  // b.none
    4240:	cmp	x21, #0x4
    4244:	b.ne	4468 <FSE_decompress+0x2e1c>  // b.any
    4248:	ldrb	w0, [x22, #3]
    424c:	ldr	x1, [sp, #248]
    4250:	add	x0, x1, x0, lsl #24
    4254:	str	x0, [sp, #248]
    4258:	ldrb	w0, [x22, #2]
    425c:	ldr	x1, [sp, #248]
    4260:	add	x0, x1, x0, lsl #16
    4264:	str	x0, [sp, #248]
    4268:	ldrb	w0, [x22, #1]
    426c:	ldr	x1, [sp, #248]
    4270:	add	x0, x1, x0, lsl #8
    4274:	str	x0, [sp, #248]
    4278:	add	x23, x22, x23
    427c:	ldurb	w0, [x23, #-7]
    4280:	cbz	w0, 50d0 <FSE_decompress+0x3a84>
    4284:	clz	w1, w0
    4288:	mov	w0, #0x9                   	// #9
    428c:	sub	w0, w0, w21
    4290:	add	w0, w1, w0, lsl #3
    4294:	sub	w0, w0, #0x1f
    4298:	str	w0, [sp, #256]
    429c:	ldr	w1, [sp, #136]
    42a0:	mov	w2, #0x3                   	// #3
    42a4:	cmp	w1, #0x40
    42a8:	b.hi	42f8 <FSE_decompress+0x2cac>  // b.pmore
    42ac:	ldr	x0, [sp, #144]
    42b0:	cmp	x17, x0
    42b4:	b.ls	44ac <FSE_decompress+0x2e60>  // b.plast
    42b8:	cmp	x6, x0
    42bc:	b.eq	44d0 <FSE_decompress+0x2e84>  // b.none
    42c0:	lsr	w3, w1, #3
    42c4:	lsr	w4, w1, #3
    42c8:	sub	x4, x0, x4
    42cc:	mov	w2, #0x0                   	// #0
    42d0:	cmp	x6, x4
    42d4:	b.ls	42e0 <FSE_decompress+0x2c94>  // b.plast
    42d8:	sub	w3, w0, w6
    42dc:	mov	w2, #0x1                   	// #1
    42e0:	sub	x0, x0, w3, uxtw
    42e4:	str	x0, [sp, #144]
    42e8:	sub	w1, w1, w3, lsl #3
    42ec:	str	w1, [sp, #136]
    42f0:	ldr	x0, [x0]
    42f4:	str	x0, [sp, #128]
    42f8:	ldr	w3, [sp, #176]
    42fc:	mov	w1, #0x3                   	// #3
    4300:	cmp	w3, #0x40
    4304:	b.hi	4354 <FSE_decompress+0x2d08>  // b.pmore
    4308:	ldr	x0, [sp, #184]
    430c:	cmp	x18, x0
    4310:	b.ls	44e0 <FSE_decompress+0x2e94>  // b.plast
    4314:	cmp	x7, x0
    4318:	b.eq	4504 <FSE_decompress+0x2eb8>  // b.none
    431c:	lsr	w4, w3, #3
    4320:	lsr	w5, w3, #3
    4324:	sub	x5, x0, x5
    4328:	mov	w1, #0x0                   	// #0
    432c:	cmp	x7, x5
    4330:	b.ls	433c <FSE_decompress+0x2cf0>  // b.plast
    4334:	sub	w4, w0, w7
    4338:	mov	w1, #0x1                   	// #1
    433c:	sub	x0, x0, w4, uxtw
    4340:	str	x0, [sp, #184]
    4344:	sub	w3, w3, w4, lsl #3
    4348:	str	w3, [sp, #176]
    434c:	ldr	x0, [x0]
    4350:	str	x0, [sp, #168]
    4354:	orr	w2, w1, w2
    4358:	ldr	w1, [sp, #216]
    435c:	mov	w5, #0x3                   	// #3
    4360:	cmp	w1, #0x40
    4364:	b.hi	43b4 <FSE_decompress+0x2d68>  // b.pmore
    4368:	ldr	x0, [sp, #224]
    436c:	cmp	x20, x0
    4370:	b.ls	4514 <FSE_decompress+0x2ec8>  // b.plast
    4374:	cmp	x13, x0
    4378:	b.eq	4538 <FSE_decompress+0x2eec>  // b.none
    437c:	lsr	w3, w1, #3
    4380:	lsr	w4, w1, #3
    4384:	sub	x4, x0, x4
    4388:	mov	w5, #0x0                   	// #0
    438c:	cmp	x13, x4
    4390:	b.ls	439c <FSE_decompress+0x2d50>  // b.plast
    4394:	sub	w3, w0, w13
    4398:	mov	w5, #0x1                   	// #1
    439c:	sub	x0, x0, w3, uxtw
    43a0:	str	x0, [sp, #224]
    43a4:	sub	w1, w1, w3, lsl #3
    43a8:	str	w1, [sp, #216]
    43ac:	ldr	x0, [x0]
    43b0:	str	x0, [sp, #208]
    43b4:	ldr	x1, [sp, #104]
    43b8:	ldr	x3, [sp, #112]
    43bc:	add	x28, x1, x3
    43c0:	ldr	x0, [sp, #120]
    43c4:	add	x0, x0, #0x4
    43c8:	add	x23, x3, #0x3
    43cc:	lsr	x23, x23, #2
    43d0:	add	x26, x1, x23
    43d4:	add	x25, x26, x23
    43d8:	add	x23, x25, x23
    43dc:	ldr	w4, [sp, #256]
    43e0:	cmp	w4, #0x40
    43e4:	b.hi	49c8 <FSE_decompress+0x337c>  // b.pmore
    43e8:	ldr	x3, [sp, #264]
    43ec:	cmp	x24, x3
    43f0:	b.ls	4548 <FSE_decompress+0x2efc>  // b.plast
    43f4:	cmp	x22, x3
    43f8:	b.eq	49d8 <FSE_decompress+0x338c>  // b.none
    43fc:	lsr	w8, w4, #3
    4400:	lsr	w9, w4, #3
    4404:	sub	x9, x3, x9
    4408:	mov	w1, #0x0                   	// #0
    440c:	cmp	x22, x9
    4410:	b.ls	441c <FSE_decompress+0x2dd0>  // b.plast
    4414:	sub	w8, w3, w22
    4418:	mov	w1, #0x1                   	// #1
    441c:	sub	x3, x3, w8, uxtw
    4420:	str	x3, [sp, #264]
    4424:	sub	w4, w4, w8, lsl #3
    4428:	str	w4, [sp, #256]
    442c:	ldr	x3, [x3]
    4430:	str	x3, [sp, #248]
    4434:	orr	w1, w1, w5
    4438:	orr	w1, w1, w2
    443c:	cbnz	w1, 49e8 <FSE_decompress+0x339c>
    4440:	sub	x21, x28, #0x3
    4444:	cmp	x23, x21
    4448:	b.cs	49f8 <FSE_decompress+0x33ac>  // b.hs, b.nlast
    444c:	mov	x8, x23
    4450:	mov	x12, x25
    4454:	mov	x11, x26
    4458:	ldr	x10, [sp, #104]
    445c:	neg	w1, w30
    4460:	and	w1, w1, #0x3f
    4464:	b	45f0 <FSE_decompress+0x2fa4>
    4468:	cmp	x21, #0x2
    446c:	b.eq	4268 <FSE_decompress+0x2c1c>  // b.none
    4470:	b	4278 <FSE_decompress+0x2c2c>
    4474:	cmp	x21, #0x6
    4478:	b.eq	4488 <FSE_decompress+0x2e3c>  // b.none
    447c:	ldrb	w1, [x22, #6]
    4480:	add	x0, x0, x1, lsl #48
    4484:	str	x0, [sp, #248]
    4488:	ldrb	w0, [x22, #5]
    448c:	ldr	x1, [sp, #248]
    4490:	add	x0, x1, x0, lsl #40
    4494:	str	x0, [sp, #248]
    4498:	ldrb	w0, [x22, #4]
    449c:	ldr	x1, [sp, #248]
    44a0:	add	x0, x1, x0, lsl #32
    44a4:	str	x0, [sp, #248]
    44a8:	b	4248 <FSE_decompress+0x2bfc>
    44ac:	lsr	w2, w1, #3
    44b0:	sub	x0, x0, x2
    44b4:	str	x0, [sp, #144]
    44b8:	and	w1, w1, #0x7
    44bc:	str	w1, [sp, #136]
    44c0:	ldr	x0, [x0]
    44c4:	str	x0, [sp, #128]
    44c8:	mov	w2, #0x0                   	// #0
    44cc:	b	42f8 <FSE_decompress+0x2cac>
    44d0:	cmp	w1, #0x3f
    44d4:	cset	w2, hi  // hi = pmore
    44d8:	add	w2, w2, #0x1
    44dc:	b	42f8 <FSE_decompress+0x2cac>
    44e0:	lsr	w1, w3, #3
    44e4:	sub	x0, x0, x1
    44e8:	str	x0, [sp, #184]
    44ec:	and	w3, w3, #0x7
    44f0:	str	w3, [sp, #176]
    44f4:	ldr	x0, [x0]
    44f8:	str	x0, [sp, #168]
    44fc:	mov	w1, #0x0                   	// #0
    4500:	b	4354 <FSE_decompress+0x2d08>
    4504:	cmp	w3, #0x3f
    4508:	cset	w1, hi  // hi = pmore
    450c:	add	w1, w1, #0x1
    4510:	b	4354 <FSE_decompress+0x2d08>
    4514:	lsr	w3, w1, #3
    4518:	sub	x0, x0, x3
    451c:	str	x0, [sp, #224]
    4520:	and	w1, w1, #0x7
    4524:	str	w1, [sp, #216]
    4528:	ldr	x0, [x0]
    452c:	str	x0, [sp, #208]
    4530:	mov	w5, #0x0                   	// #0
    4534:	b	43b4 <FSE_decompress+0x2d68>
    4538:	cmp	w1, #0x3f
    453c:	cset	w1, hi  // hi = pmore
    4540:	add	w5, w1, #0x1
    4544:	b	43b4 <FSE_decompress+0x2d68>
    4548:	lsr	w1, w4, #3
    454c:	sub	x3, x3, x1
    4550:	str	x3, [sp, #264]
    4554:	and	w4, w4, #0x7
    4558:	str	w4, [sp, #256]
    455c:	ldr	x1, [x3]
    4560:	str	x1, [sp, #248]
    4564:	mov	w1, #0x0                   	// #0
    4568:	b	4434 <FSE_decompress+0x2de8>
    456c:	lsr	w3, w5, #3
    4570:	sub	x2, x2, x3
    4574:	str	x2, [sp, #144]
    4578:	and	w5, w5, #0x7
    457c:	str	w5, [sp, #136]
    4580:	ldr	x2, [x2]
    4584:	str	x2, [sp, #128]
    4588:	b	4880 <FSE_decompress+0x3234>
    458c:	lsr	w3, w4, #3
    4590:	sub	x2, x2, x3
    4594:	str	x2, [sp, #184]
    4598:	and	w4, w4, #0x7
    459c:	str	w4, [sp, #176]
    45a0:	ldr	x2, [x2]
    45a4:	str	x2, [sp, #168]
    45a8:	b	48d0 <FSE_decompress+0x3284>
    45ac:	lsr	w3, w15, #3
    45b0:	sub	x2, x2, x3
    45b4:	str	x2, [sp, #224]
    45b8:	and	w15, w15, #0x7
    45bc:	str	w15, [sp, #216]
    45c0:	ldr	x2, [x2]
    45c4:	str	x2, [sp, #208]
    45c8:	b	4920 <FSE_decompress+0x32d4>
    45cc:	lsr	w3, w9, #3
    45d0:	sub	x2, x2, x3
    45d4:	str	x2, [sp, #264]
    45d8:	and	w9, w9, #0x7
    45dc:	str	w9, [sp, #256]
    45e0:	ldr	x2, [x2]
    45e4:	str	x2, [sp, #248]
    45e8:	cmp	x8, x21
    45ec:	b.cs	4974 <FSE_decompress+0x3328>  // b.hs, b.nlast
    45f0:	ldr	x16, [sp, #128]
    45f4:	ldr	w3, [sp, #136]
    45f8:	lsl	x2, x16, x3
    45fc:	lsr	x2, x2, x1
    4600:	lsl	x2, x2, #1
    4604:	add	x4, x0, x2
    4608:	ldrb	w2, [x0, x2]
    460c:	ldrb	w5, [x4, #1]
    4610:	add	w5, w5, w3
    4614:	strb	w2, [x10]
    4618:	ldr	x14, [sp, #168]
    461c:	ldr	w3, [sp, #176]
    4620:	lsl	x2, x14, x3
    4624:	lsr	x2, x2, x1
    4628:	lsl	x2, x2, #1
    462c:	add	x4, x0, x2
    4630:	ldrb	w2, [x0, x2]
    4634:	ldrb	w4, [x4, #1]
    4638:	add	w4, w4, w3
    463c:	strb	w2, [x11]
    4640:	ldr	x3, [sp, #208]
    4644:	ldr	w9, [sp, #216]
    4648:	lsl	x2, x3, x9
    464c:	lsr	x2, x2, x1
    4650:	lsl	x2, x2, #1
    4654:	add	x15, x0, x2
    4658:	ldrb	w2, [x0, x2]
    465c:	ldrb	w15, [x15, #1]
    4660:	add	w15, w15, w9
    4664:	strb	w2, [x12]
    4668:	ldr	x2, [sp, #248]
    466c:	ldr	w9, [sp, #256]
    4670:	lsl	x19, x2, x9
    4674:	lsr	x19, x19, x1
    4678:	lsl	x19, x19, #1
    467c:	add	x27, x0, x19
    4680:	ldrb	w19, [x0, x19]
    4684:	ldrb	w27, [x27, #1]
    4688:	add	w9, w27, w9
    468c:	strb	w19, [x8]
    4690:	lsl	x19, x16, x5
    4694:	lsr	x19, x19, x1
    4698:	lsl	x19, x19, #1
    469c:	add	x27, x0, x19
    46a0:	ldrb	w19, [x0, x19]
    46a4:	ldrb	w27, [x27, #1]
    46a8:	add	w5, w27, w5
    46ac:	strb	w19, [x10, #1]
    46b0:	lsl	x19, x14, x4
    46b4:	lsr	x19, x19, x1
    46b8:	lsl	x19, x19, #1
    46bc:	add	x27, x0, x19
    46c0:	ldrb	w19, [x0, x19]
    46c4:	ldrb	w27, [x27, #1]
    46c8:	add	w4, w27, w4
    46cc:	strb	w19, [x11, #1]
    46d0:	lsl	x19, x3, x15
    46d4:	lsr	x19, x19, x1
    46d8:	lsl	x19, x19, #1
    46dc:	add	x27, x0, x19
    46e0:	ldrb	w19, [x0, x19]
    46e4:	ldrb	w27, [x27, #1]
    46e8:	add	w15, w27, w15
    46ec:	strb	w19, [x12, #1]
    46f0:	lsl	x19, x2, x9
    46f4:	lsr	x19, x19, x1
    46f8:	lsl	x19, x19, #1
    46fc:	add	x27, x0, x19
    4700:	ldrb	w19, [x0, x19]
    4704:	ldrb	w27, [x27, #1]
    4708:	add	w9, w27, w9
    470c:	strb	w19, [x8, #1]
    4710:	lsl	x19, x16, x5
    4714:	lsr	x19, x19, x1
    4718:	lsl	x19, x19, #1
    471c:	add	x27, x0, x19
    4720:	ldrb	w19, [x0, x19]
    4724:	ldrb	w27, [x27, #1]
    4728:	add	w5, w27, w5
    472c:	strb	w19, [x10, #2]
    4730:	lsl	x19, x14, x4
    4734:	lsr	x19, x19, x1
    4738:	lsl	x19, x19, #1
    473c:	add	x27, x0, x19
    4740:	ldrb	w19, [x0, x19]
    4744:	ldrb	w27, [x27, #1]
    4748:	add	w4, w27, w4
    474c:	strb	w19, [x11, #2]
    4750:	lsl	x19, x3, x15
    4754:	lsr	x19, x19, x1
    4758:	lsl	x19, x19, #1
    475c:	add	x27, x0, x19
    4760:	ldrb	w19, [x0, x19]
    4764:	ldrb	w27, [x27, #1]
    4768:	add	w15, w27, w15
    476c:	strb	w19, [x12, #2]
    4770:	lsl	x19, x2, x9
    4774:	lsr	x19, x19, x1
    4778:	lsl	x19, x19, #1
    477c:	add	x27, x0, x19
    4780:	ldrb	w19, [x0, x19]
    4784:	ldrb	w27, [x27, #1]
    4788:	add	w9, w27, w9
    478c:	strb	w19, [x8, #2]
    4790:	add	x10, x10, #0x4
    4794:	lsl	x16, x16, x5
    4798:	lsr	x16, x16, x1
    479c:	lsl	x16, x16, #1
    47a0:	add	x19, x0, x16
    47a4:	ldrb	w16, [x0, x16]
    47a8:	ldrb	w19, [x19, #1]
    47ac:	add	w5, w19, w5
    47b0:	str	w5, [sp, #136]
    47b4:	sturb	w16, [x10, #-1]
    47b8:	add	x11, x11, #0x4
    47bc:	lsl	x14, x14, x4
    47c0:	lsr	x14, x14, x1
    47c4:	lsl	x14, x14, #1
    47c8:	add	x16, x0, x14
    47cc:	ldrb	w14, [x0, x14]
    47d0:	ldrb	w16, [x16, #1]
    47d4:	add	w4, w16, w4
    47d8:	str	w4, [sp, #176]
    47dc:	sturb	w14, [x11, #-1]
    47e0:	add	x12, x12, #0x4
    47e4:	lsl	x3, x3, x15
    47e8:	lsr	x3, x3, x1
    47ec:	lsl	x3, x3, #1
    47f0:	add	x14, x0, x3
    47f4:	ldrb	w3, [x0, x3]
    47f8:	ldrb	w14, [x14, #1]
    47fc:	add	w15, w14, w15
    4800:	str	w15, [sp, #216]
    4804:	sturb	w3, [x12, #-1]
    4808:	add	x8, x8, #0x4
    480c:	lsl	x2, x2, x9
    4810:	lsr	x2, x2, x1
    4814:	lsl	x2, x2, #1
    4818:	add	x3, x0, x2
    481c:	ldrb	w2, [x0, x2]
    4820:	ldrb	w3, [x3, #1]
    4824:	add	w9, w3, w9
    4828:	str	w9, [sp, #256]
    482c:	sturb	w2, [x8, #-1]
    4830:	cmp	w5, #0x40
    4834:	b.hi	4880 <FSE_decompress+0x3234>  // b.pmore
    4838:	ldr	x2, [sp, #144]
    483c:	cmp	x17, x2
    4840:	b.ls	456c <FSE_decompress+0x2f20>  // b.plast
    4844:	cmp	x6, x2
    4848:	b.eq	4880 <FSE_decompress+0x3234>  // b.none
    484c:	lsr	w14, w5, #3
    4850:	sub	x14, x2, x14
    4854:	sub	x16, x2, x6
    4858:	lsr	w3, w5, #3
    485c:	cmp	x6, x14
    4860:	csel	w14, w3, w16, ls  // ls = plast
    4864:	csel	w3, w3, w16, ls  // ls = plast
    4868:	sub	x2, x2, x3
    486c:	str	x2, [sp, #144]
    4870:	sub	w5, w5, w14, lsl #3
    4874:	str	w5, [sp, #136]
    4878:	ldr	x2, [x2]
    487c:	str	x2, [sp, #128]
    4880:	cmp	w4, #0x40
    4884:	b.hi	48d0 <FSE_decompress+0x3284>  // b.pmore
    4888:	ldr	x2, [sp, #184]
    488c:	cmp	x18, x2
    4890:	b.ls	458c <FSE_decompress+0x2f40>  // b.plast
    4894:	cmp	x7, x2
    4898:	b.eq	48d0 <FSE_decompress+0x3284>  // b.none
    489c:	lsr	w5, w4, #3
    48a0:	sub	x5, x2, x5
    48a4:	sub	x14, x2, x7
    48a8:	lsr	w3, w4, #3
    48ac:	cmp	x7, x5
    48b0:	csel	w5, w3, w14, ls  // ls = plast
    48b4:	csel	w3, w3, w14, ls  // ls = plast
    48b8:	sub	x2, x2, x3
    48bc:	str	x2, [sp, #184]
    48c0:	sub	w4, w4, w5, lsl #3
    48c4:	str	w4, [sp, #176]
    48c8:	ldr	x2, [x2]
    48cc:	str	x2, [sp, #168]
    48d0:	cmp	w15, #0x40
    48d4:	b.hi	4920 <FSE_decompress+0x32d4>  // b.pmore
    48d8:	ldr	x2, [sp, #224]
    48dc:	cmp	x20, x2
    48e0:	b.ls	45ac <FSE_decompress+0x2f60>  // b.plast
    48e4:	cmp	x13, x2
    48e8:	b.eq	4920 <FSE_decompress+0x32d4>  // b.none
    48ec:	lsr	w4, w15, #3
    48f0:	sub	x4, x2, x4
    48f4:	sub	x5, x2, x13
    48f8:	lsr	w3, w15, #3
    48fc:	cmp	x13, x4
    4900:	csel	w4, w3, w5, ls  // ls = plast
    4904:	csel	w3, w3, w5, ls  // ls = plast
    4908:	sub	x2, x2, x3
    490c:	str	x2, [sp, #224]
    4910:	sub	w15, w15, w4, lsl #3
    4914:	str	w15, [sp, #216]
    4918:	ldr	x2, [x2]
    491c:	str	x2, [sp, #208]
    4920:	cmp	w9, #0x40
    4924:	b.hi	45e8 <FSE_decompress+0x2f9c>  // b.pmore
    4928:	ldr	x2, [sp, #264]
    492c:	cmp	x24, x2
    4930:	b.ls	45cc <FSE_decompress+0x2f80>  // b.plast
    4934:	cmp	x22, x2
    4938:	b.eq	45e8 <FSE_decompress+0x2f9c>  // b.none
    493c:	lsr	w4, w9, #3
    4940:	sub	x4, x2, x4
    4944:	sub	x5, x2, x22
    4948:	lsr	w3, w9, #3
    494c:	cmp	x22, x4
    4950:	csel	w4, w3, w5, ls  // ls = plast
    4954:	csel	w3, w3, w5, ls  // ls = plast
    4958:	sub	x2, x2, x3
    495c:	str	x2, [sp, #264]
    4960:	sub	w9, w9, w4, lsl #3
    4964:	str	w9, [sp, #256]
    4968:	ldr	x2, [x2]
    496c:	str	x2, [sp, #248]
    4970:	b	45e8 <FSE_decompress+0x2f9c>
    4974:	sub	x1, x28, #0x4
    4978:	sub	x1, x1, x23
    497c:	and	x1, x1, #0xfffffffffffffffc
    4980:	add	x1, x1, #0x4
    4984:	ldr	x2, [sp, #104]
    4988:	add	x2, x2, x1
    498c:	str	x2, [sp, #104]
    4990:	add	x4, x26, x1
    4994:	add	x3, x25, x1
    4998:	add	x1, x23, x1
    499c:	cmp	x25, x4
    49a0:	ldr	x2, [sp, #104]
    49a4:	ccmp	x26, x2, #0x0, cs  // cs = hs, nlast
    49a8:	mov	x21, #0xffffffffffffffec    	// #-20
    49ac:	ccmp	x23, x3, #0x0, cs  // cs = hs, nlast
    49b0:	b.cs	4a08 <FSE_decompress+0x33bc>  // b.hs, b.nlast
    49b4:	ldp	x19, x20, [sp, #16]
    49b8:	ldp	x23, x24, [sp, #48]
    49bc:	ldp	x25, x26, [sp, #64]
    49c0:	ldp	x27, x28, [sp, #80]
    49c4:	b	3de4 <FSE_decompress+0x2798>
    49c8:	mov	x1, x23
    49cc:	mov	x3, x25
    49d0:	mov	x4, x26
    49d4:	b	499c <FSE_decompress+0x3350>
    49d8:	mov	x1, x23
    49dc:	mov	x3, x25
    49e0:	mov	x4, x26
    49e4:	b	499c <FSE_decompress+0x3350>
    49e8:	mov	x1, x23
    49ec:	mov	x3, x25
    49f0:	mov	x4, x26
    49f4:	b	499c <FSE_decompress+0x3350>
    49f8:	mov	x1, x23
    49fc:	mov	x3, x25
    4a00:	mov	x4, x26
    4a04:	b	499c <FSE_decompress+0x3350>
    4a08:	mov	w10, #0x0                   	// #0
    4a0c:	mov	w11, #0x1                   	// #1
    4a10:	sub	x9, x26, #0x3
    4a14:	neg	w8, w30
    4a18:	and	w8, w8, #0x3f
    4a1c:	mov	x5, x2
    4a20:	b	4afc <FSE_decompress+0x34b0>
    4a24:	lsr	w14, w12, #3
    4a28:	sub	x2, x2, x14
    4a2c:	str	x2, [sp, #144]
    4a30:	and	w12, w12, #0x7
    4a34:	str	w12, [sp, #136]
    4a38:	ldr	x2, [x2]
    4a3c:	str	x2, [sp, #128]
    4a40:	mov	w15, w10
    4a44:	b	4a60 <FSE_decompress+0x3414>
    4a48:	sub	x2, x2, w14, uxtw
    4a4c:	str	x2, [sp, #144]
    4a50:	sub	w12, w12, w14, lsl #3
    4a54:	str	w12, [sp, #136]
    4a58:	ldr	x2, [x2]
    4a5c:	str	x2, [sp, #128]
    4a60:	cmp	w15, #0x0
    4a64:	ccmp	x5, x9, #0x2, eq  // eq = none
    4a68:	b.cs	4b40 <FSE_decompress+0x34f4>  // b.hs, b.nlast
    4a6c:	ldr	x2, [sp, #128]
    4a70:	ldr	w14, [sp, #136]
    4a74:	lsl	x12, x2, x14
    4a78:	lsr	x12, x12, x8
    4a7c:	lsl	x12, x12, #1
    4a80:	add	x16, x0, x12
    4a84:	ldrb	w15, [x0, x12]
    4a88:	ldrb	w12, [x16, #1]
    4a8c:	add	w14, w12, w14
    4a90:	strb	w15, [x5]
    4a94:	lsl	x12, x2, x14
    4a98:	lsr	x12, x12, x8
    4a9c:	lsl	x12, x12, #1
    4aa0:	add	x16, x0, x12
    4aa4:	ldrb	w15, [x0, x12]
    4aa8:	ldrb	w12, [x16, #1]
    4aac:	add	w14, w12, w14
    4ab0:	strb	w15, [x5, #1]
    4ab4:	lsl	x12, x2, x14
    4ab8:	lsr	x12, x12, x8
    4abc:	lsl	x12, x12, #1
    4ac0:	add	x16, x0, x12
    4ac4:	ldrb	w15, [x0, x12]
    4ac8:	ldrb	w12, [x16, #1]
    4acc:	add	w12, w12, w14
    4ad0:	strb	w15, [x5, #2]
    4ad4:	add	x5, x5, #0x4
    4ad8:	lsl	x2, x2, x12
    4adc:	lsr	x2, x2, x8
    4ae0:	lsl	x2, x2, #1
    4ae4:	add	x15, x0, x2
    4ae8:	ldrb	w14, [x0, x2]
    4aec:	ldrb	w2, [x15, #1]
    4af0:	add	w12, w2, w12
    4af4:	str	w12, [sp, #136]
    4af8:	sturb	w14, [x5, #-1]
    4afc:	ldr	w12, [sp, #136]
    4b00:	cmp	w12, #0x40
    4b04:	b.hi	4b40 <FSE_decompress+0x34f4>  // b.pmore
    4b08:	ldr	x2, [sp, #144]
    4b0c:	cmp	x17, x2
    4b10:	b.ls	4a24 <FSE_decompress+0x33d8>  // b.plast
    4b14:	cmp	x6, x2
    4b18:	b.eq	4b40 <FSE_decompress+0x34f4>  // b.none
    4b1c:	lsr	w14, w12, #3
    4b20:	lsr	w16, w12, #3
    4b24:	sub	x16, x2, x16
    4b28:	mov	w15, w10
    4b2c:	cmp	x6, x16
    4b30:	b.ls	4a48 <FSE_decompress+0x33fc>  // b.plast
    4b34:	sub	w14, w2, w6
    4b38:	mov	w15, w11
    4b3c:	b	4a48 <FSE_decompress+0x33fc>
    4b40:	mov	x8, x5
    4b44:	cmp	x26, x5
    4b48:	b.ls	4b88 <FSE_decompress+0x353c>  // b.plast
    4b4c:	ldr	x10, [sp, #128]
    4b50:	ldr	w5, [sp, #136]
    4b54:	neg	w9, w30
    4b58:	and	w9, w9, #0x3f
    4b5c:	lsl	x2, x10, x5
    4b60:	lsr	x2, x2, x9
    4b64:	lsl	x2, x2, #1
    4b68:	add	x11, x0, x2
    4b6c:	ldrb	w2, [x0, x2]
    4b70:	ldrb	w11, [x11, #1]
    4b74:	add	w5, w5, w11
    4b78:	strb	w2, [x8], #1
    4b7c:	cmp	x26, x8
    4b80:	b.ne	4b5c <FSE_decompress+0x3510>  // b.any
    4b84:	str	w5, [sp, #136]
    4b88:	mov	w10, #0x0                   	// #0
    4b8c:	mov	w11, #0x1                   	// #1
    4b90:	sub	x9, x25, #0x3
    4b94:	neg	w8, w30
    4b98:	and	w8, w8, #0x3f
    4b9c:	b	4c78 <FSE_decompress+0x362c>
    4ba0:	lsr	w12, w5, #3
    4ba4:	sub	x2, x2, x12
    4ba8:	str	x2, [sp, #184]
    4bac:	and	w5, w5, #0x7
    4bb0:	str	w5, [sp, #176]
    4bb4:	ldr	x2, [x2]
    4bb8:	str	x2, [sp, #168]
    4bbc:	mov	w14, w10
    4bc0:	b	4bdc <FSE_decompress+0x3590>
    4bc4:	sub	x2, x2, w12, uxtw
    4bc8:	str	x2, [sp, #184]
    4bcc:	sub	w5, w5, w12, lsl #3
    4bd0:	str	w5, [sp, #176]
    4bd4:	ldr	x2, [x2]
    4bd8:	str	x2, [sp, #168]
    4bdc:	cmp	w14, #0x0
    4be0:	ccmp	x4, x9, #0x2, eq  // eq = none
    4be4:	b.cs	4cbc <FSE_decompress+0x3670>  // b.hs, b.nlast
    4be8:	ldr	x2, [sp, #168]
    4bec:	ldr	w14, [sp, #176]
    4bf0:	lsl	x5, x2, x14
    4bf4:	lsr	x5, x5, x8
    4bf8:	lsl	x5, x5, #1
    4bfc:	add	x12, x0, x5
    4c00:	ldrb	w5, [x0, x5]
    4c04:	ldrb	w12, [x12, #1]
    4c08:	add	w12, w12, w14
    4c0c:	strb	w5, [x4]
    4c10:	lsl	x5, x2, x12
    4c14:	lsr	x5, x5, x8
    4c18:	lsl	x5, x5, #1
    4c1c:	add	x15, x0, x5
    4c20:	ldrb	w14, [x0, x5]
    4c24:	ldrb	w5, [x15, #1]
    4c28:	add	w12, w5, w12
    4c2c:	strb	w14, [x4, #1]
    4c30:	lsl	x5, x2, x12
    4c34:	lsr	x5, x5, x8
    4c38:	lsl	x5, x5, #1
    4c3c:	add	x15, x0, x5
    4c40:	ldrb	w14, [x0, x5]
    4c44:	ldrb	w5, [x15, #1]
    4c48:	add	w5, w5, w12
    4c4c:	strb	w14, [x4, #2]
    4c50:	add	x4, x4, #0x4
    4c54:	lsl	x2, x2, x5
    4c58:	lsr	x2, x2, x8
    4c5c:	lsl	x2, x2, #1
    4c60:	add	x14, x0, x2
    4c64:	ldrb	w12, [x0, x2]
    4c68:	ldrb	w2, [x14, #1]
    4c6c:	add	w5, w2, w5
    4c70:	str	w5, [sp, #176]
    4c74:	sturb	w12, [x4, #-1]
    4c78:	ldr	w5, [sp, #176]
    4c7c:	cmp	w5, #0x40
    4c80:	b.hi	4cbc <FSE_decompress+0x3670>  // b.pmore
    4c84:	ldr	x2, [sp, #184]
    4c88:	cmp	x18, x2
    4c8c:	b.ls	4ba0 <FSE_decompress+0x3554>  // b.plast
    4c90:	cmp	x7, x2
    4c94:	b.eq	4cbc <FSE_decompress+0x3670>  // b.none
    4c98:	lsr	w12, w5, #3
    4c9c:	lsr	w15, w5, #3
    4ca0:	sub	x15, x2, x15
    4ca4:	mov	w14, w10
    4ca8:	cmp	x7, x15
    4cac:	b.ls	4bc4 <FSE_decompress+0x3578>  // b.plast
    4cb0:	sub	w12, w2, w7
    4cb4:	mov	w14, w11
    4cb8:	b	4bc4 <FSE_decompress+0x3578>
    4cbc:	cmp	x25, x4
    4cc0:	b.ls	4d00 <FSE_decompress+0x36b4>  // b.plast
    4cc4:	ldr	x10, [sp, #168]
    4cc8:	ldr	w5, [sp, #176]
    4ccc:	neg	w9, w30
    4cd0:	and	w9, w9, #0x3f
    4cd4:	lsl	x2, x10, x5
    4cd8:	lsr	x2, x2, x9
    4cdc:	lsl	x2, x2, #1
    4ce0:	add	x8, x0, x2
    4ce4:	ldrb	w2, [x0, x2]
    4ce8:	ldrb	w8, [x8, #1]
    4cec:	add	w5, w5, w8
    4cf0:	strb	w2, [x4], #1
    4cf4:	cmp	x25, x4
    4cf8:	b.ne	4cd4 <FSE_decompress+0x3688>  // b.any
    4cfc:	str	w5, [sp, #176]
    4d00:	mov	w9, #0x0                   	// #0
    4d04:	mov	w10, #0x1                   	// #1
    4d08:	sub	x8, x23, #0x3
    4d0c:	neg	w5, w30
    4d10:	and	w5, w5, #0x3f
    4d14:	b	4df0 <FSE_decompress+0x37a4>
    4d18:	lsr	w11, w4, #3
    4d1c:	sub	x2, x2, x11
    4d20:	str	x2, [sp, #224]
    4d24:	and	w4, w4, #0x7
    4d28:	str	w4, [sp, #216]
    4d2c:	ldr	x2, [x2]
    4d30:	str	x2, [sp, #208]
    4d34:	mov	w12, w9
    4d38:	b	4d54 <FSE_decompress+0x3708>
    4d3c:	sub	x2, x2, w11, uxtw
    4d40:	str	x2, [sp, #224]
    4d44:	sub	w4, w4, w11, lsl #3
    4d48:	str	w4, [sp, #216]
    4d4c:	ldr	x2, [x2]
    4d50:	str	x2, [sp, #208]
    4d54:	cmp	w12, #0x0
    4d58:	ccmp	x3, x8, #0x2, eq  // eq = none
    4d5c:	b.cs	4e34 <FSE_decompress+0x37e8>  // b.hs, b.nlast
    4d60:	ldr	x2, [sp, #208]
    4d64:	ldr	w12, [sp, #216]
    4d68:	lsl	x4, x2, x12
    4d6c:	lsr	x4, x4, x5
    4d70:	lsl	x4, x4, #1
    4d74:	add	x11, x0, x4
    4d78:	ldrb	w4, [x0, x4]
    4d7c:	ldrb	w11, [x11, #1]
    4d80:	add	w11, w11, w12
    4d84:	strb	w4, [x3]
    4d88:	lsl	x4, x2, x11
    4d8c:	lsr	x4, x4, x5
    4d90:	lsl	x4, x4, #1
    4d94:	add	x14, x0, x4
    4d98:	ldrb	w12, [x0, x4]
    4d9c:	ldrb	w4, [x14, #1]
    4da0:	add	w11, w4, w11
    4da4:	strb	w12, [x3, #1]
    4da8:	lsl	x4, x2, x11
    4dac:	lsr	x4, x4, x5
    4db0:	lsl	x4, x4, #1
    4db4:	add	x14, x0, x4
    4db8:	ldrb	w12, [x0, x4]
    4dbc:	ldrb	w4, [x14, #1]
    4dc0:	add	w4, w4, w11
    4dc4:	strb	w12, [x3, #2]
    4dc8:	add	x3, x3, #0x4
    4dcc:	lsl	x2, x2, x4
    4dd0:	lsr	x2, x2, x5
    4dd4:	lsl	x2, x2, #1
    4dd8:	add	x12, x0, x2
    4ddc:	ldrb	w11, [x0, x2]
    4de0:	ldrb	w2, [x12, #1]
    4de4:	add	w4, w2, w4
    4de8:	str	w4, [sp, #216]
    4dec:	sturb	w11, [x3, #-1]
    4df0:	ldr	w4, [sp, #216]
    4df4:	cmp	w4, #0x40
    4df8:	b.hi	4e34 <FSE_decompress+0x37e8>  // b.pmore
    4dfc:	ldr	x2, [sp, #224]
    4e00:	cmp	x20, x2
    4e04:	b.ls	4d18 <FSE_decompress+0x36cc>  // b.plast
    4e08:	cmp	x13, x2
    4e0c:	b.eq	4e34 <FSE_decompress+0x37e8>  // b.none
    4e10:	lsr	w11, w4, #3
    4e14:	lsr	w14, w4, #3
    4e18:	sub	x14, x2, x14
    4e1c:	mov	w12, w9
    4e20:	cmp	x13, x14
    4e24:	b.ls	4d3c <FSE_decompress+0x36f0>  // b.plast
    4e28:	sub	w11, w2, w13
    4e2c:	mov	w12, w10
    4e30:	b	4d3c <FSE_decompress+0x36f0>
    4e34:	cmp	x23, x3
    4e38:	b.ls	4e78 <FSE_decompress+0x382c>  // b.plast
    4e3c:	ldr	x9, [sp, #208]
    4e40:	ldr	w4, [sp, #216]
    4e44:	neg	w8, w30
    4e48:	and	w8, w8, #0x3f
    4e4c:	lsl	x2, x9, x4
    4e50:	lsr	x2, x2, x8
    4e54:	lsl	x2, x2, #1
    4e58:	add	x5, x0, x2
    4e5c:	ldrb	w2, [x0, x2]
    4e60:	ldrb	w5, [x5, #1]
    4e64:	add	w4, w4, w5
    4e68:	strb	w2, [x3], #1
    4e6c:	cmp	x23, x3
    4e70:	b.ne	4e4c <FSE_decompress+0x3800>  // b.any
    4e74:	str	w4, [sp, #216]
    4e78:	mov	w8, #0x0                   	// #0
    4e7c:	mov	w9, #0x1                   	// #1
    4e80:	sub	x5, x28, #0x3
    4e84:	neg	w4, w30
    4e88:	and	w4, w4, #0x3f
    4e8c:	b	4f68 <FSE_decompress+0x391c>
    4e90:	lsr	w10, w3, #3
    4e94:	sub	x2, x2, x10
    4e98:	str	x2, [sp, #264]
    4e9c:	and	w3, w3, #0x7
    4ea0:	str	w3, [sp, #256]
    4ea4:	ldr	x2, [x2]
    4ea8:	str	x2, [sp, #248]
    4eac:	mov	w11, w8
    4eb0:	b	4ecc <FSE_decompress+0x3880>
    4eb4:	sub	x2, x2, w10, uxtw
    4eb8:	str	x2, [sp, #264]
    4ebc:	sub	w3, w3, w10, lsl #3
    4ec0:	str	w3, [sp, #256]
    4ec4:	ldr	x2, [x2]
    4ec8:	str	x2, [sp, #248]
    4ecc:	cmp	w11, #0x0
    4ed0:	ccmp	x1, x5, #0x2, eq  // eq = none
    4ed4:	b.cs	4fac <FSE_decompress+0x3960>  // b.hs, b.nlast
    4ed8:	ldr	x2, [sp, #248]
    4edc:	ldr	w11, [sp, #256]
    4ee0:	lsl	x3, x2, x11
    4ee4:	lsr	x3, x3, x4
    4ee8:	lsl	x3, x3, #1
    4eec:	add	x10, x0, x3
    4ef0:	ldrb	w3, [x0, x3]
    4ef4:	ldrb	w10, [x10, #1]
    4ef8:	add	w10, w10, w11
    4efc:	strb	w3, [x1]
    4f00:	lsl	x3, x2, x10
    4f04:	lsr	x3, x3, x4
    4f08:	lsl	x3, x3, #1
    4f0c:	add	x12, x0, x3
    4f10:	ldrb	w11, [x0, x3]
    4f14:	ldrb	w3, [x12, #1]
    4f18:	add	w10, w3, w10
    4f1c:	strb	w11, [x1, #1]
    4f20:	lsl	x3, x2, x10
    4f24:	lsr	x3, x3, x4
    4f28:	lsl	x3, x3, #1
    4f2c:	add	x12, x0, x3
    4f30:	ldrb	w11, [x0, x3]
    4f34:	ldrb	w3, [x12, #1]
    4f38:	add	w3, w3, w10
    4f3c:	strb	w11, [x1, #2]
    4f40:	add	x1, x1, #0x4
    4f44:	lsl	x2, x2, x3
    4f48:	lsr	x2, x2, x4
    4f4c:	lsl	x2, x2, #1
    4f50:	add	x11, x0, x2
    4f54:	ldrb	w10, [x0, x2]
    4f58:	ldrb	w2, [x11, #1]
    4f5c:	add	w3, w2, w3
    4f60:	str	w3, [sp, #256]
    4f64:	sturb	w10, [x1, #-1]
    4f68:	ldr	w3, [sp, #256]
    4f6c:	cmp	w3, #0x40
    4f70:	b.hi	4fac <FSE_decompress+0x3960>  // b.pmore
    4f74:	ldr	x2, [sp, #264]
    4f78:	cmp	x24, x2
    4f7c:	b.ls	4e90 <FSE_decompress+0x3844>  // b.plast
    4f80:	cmp	x22, x2
    4f84:	b.eq	4fac <FSE_decompress+0x3960>  // b.none
    4f88:	lsr	w10, w3, #3
    4f8c:	lsr	w12, w3, #3
    4f90:	sub	x12, x2, x12
    4f94:	mov	w11, w8
    4f98:	cmp	x22, x12
    4f9c:	b.ls	4eb4 <FSE_decompress+0x3868>  // b.plast
    4fa0:	sub	w10, w2, w22
    4fa4:	mov	w11, w9
    4fa8:	b	4eb4 <FSE_decompress+0x3868>
    4fac:	cmp	x28, x1
    4fb0:	b.ls	4ff0 <FSE_decompress+0x39a4>  // b.plast
    4fb4:	ldr	x8, [sp, #248]
    4fb8:	ldr	w3, [sp, #256]
    4fbc:	neg	w4, w30
    4fc0:	and	w4, w4, #0x3f
    4fc4:	lsl	x2, x8, x3
    4fc8:	lsr	x2, x2, x4
    4fcc:	lsl	x2, x2, #1
    4fd0:	add	x5, x0, x2
    4fd4:	ldrb	w2, [x0, x2]
    4fd8:	ldrb	w5, [x5, #1]
    4fdc:	add	w3, w3, w5
    4fe0:	strb	w2, [x1], #1
    4fe4:	cmp	x28, x1
    4fe8:	b.ne	4fc4 <FSE_decompress+0x3978>  // b.any
    4fec:	str	w3, [sp, #256]
    4ff0:	mov	w3, #0x0                   	// #0
    4ff4:	ldr	x0, [sp, #144]
    4ff8:	cmp	x6, x0
    4ffc:	b.eq	5044 <FSE_decompress+0x39f8>  // b.none
    5000:	mov	w0, #0x0                   	// #0
    5004:	ldr	x1, [sp, #184]
    5008:	cmp	x7, x1
    500c:	b.eq	5054 <FSE_decompress+0x3a08>  // b.none
    5010:	mov	w2, #0x0                   	// #0
    5014:	ldr	x1, [sp, #224]
    5018:	cmp	x13, x1
    501c:	b.eq	5064 <FSE_decompress+0x3a18>  // b.none
    5020:	mov	x21, #0xffffffffffffffec    	// #-20
    5024:	ldr	x1, [sp, #264]
    5028:	cmp	x22, x1
    502c:	b.eq	5074 <FSE_decompress+0x3a28>  // b.none
    5030:	ldp	x19, x20, [sp, #16]
    5034:	ldp	x23, x24, [sp, #48]
    5038:	ldp	x25, x26, [sp, #64]
    503c:	ldp	x27, x28, [sp, #80]
    5040:	b	3de4 <FSE_decompress+0x2798>
    5044:	ldr	w0, [sp, #136]
    5048:	cmp	w0, #0x40
    504c:	cset	w3, eq  // eq = none
    5050:	b	5000 <FSE_decompress+0x39b4>
    5054:	ldr	w0, [sp, #176]
    5058:	cmp	w0, #0x40
    505c:	cset	w0, eq  // eq = none
    5060:	b	5010 <FSE_decompress+0x39c4>
    5064:	ldr	w1, [sp, #216]
    5068:	cmp	w1, #0x40
    506c:	cset	w2, eq  // eq = none
    5070:	b	5020 <FSE_decompress+0x39d4>
    5074:	ldr	w1, [sp, #256]
    5078:	cmp	w1, #0x40
    507c:	b.eq	5094 <FSE_decompress+0x3a48>  // b.none
    5080:	ldp	x19, x20, [sp, #16]
    5084:	ldp	x23, x24, [sp, #48]
    5088:	ldp	x25, x26, [sp, #64]
    508c:	ldp	x27, x28, [sp, #80]
    5090:	b	3de4 <FSE_decompress+0x2798>
    5094:	and	w0, w0, w3
    5098:	tst	w0, w2
    509c:	ldr	x0, [sp, #112]
    50a0:	csel	x21, x0, x21, ne  // ne = any
    50a4:	ldp	x19, x20, [sp, #16]
    50a8:	ldp	x23, x24, [sp, #48]
    50ac:	ldp	x25, x26, [sp, #64]
    50b0:	ldp	x27, x28, [sp, #80]
    50b4:	b	3de4 <FSE_decompress+0x2798>
    50b8:	mov	x21, #0xffffffffffffffff    	// #-1
    50bc:	ldp	x19, x20, [sp, #16]
    50c0:	ldp	x23, x24, [sp, #48]
    50c4:	ldp	x25, x26, [sp, #64]
    50c8:	ldp	x27, x28, [sp, #80]
    50cc:	b	3de4 <FSE_decompress+0x2798>
    50d0:	mov	x21, #0xffffffffffffffec    	// #-20
    50d4:	ldp	x19, x20, [sp, #16]
    50d8:	ldp	x23, x24, [sp, #48]
    50dc:	ldp	x25, x26, [sp, #64]
    50e0:	ldp	x27, x28, [sp, #80]
    50e4:	b	3de4 <FSE_decompress+0x2798>
    50e8:	mov	x21, #0xffffffffffffffff    	// #-1
    50ec:	ldp	x19, x20, [sp, #16]
    50f0:	ldp	x23, x24, [sp, #48]
    50f4:	ldp	x25, x26, [sp, #64]
    50f8:	ldp	x27, x28, [sp, #80]
    50fc:	b	3de4 <FSE_decompress+0x2798>
    5100:	mov	x21, #0xffffffffffffffec    	// #-20
    5104:	ldp	x19, x20, [sp, #16]
    5108:	ldp	x23, x24, [sp, #48]
    510c:	ldp	x25, x26, [sp, #64]
    5110:	ldp	x27, x28, [sp, #80]
    5114:	b	3de4 <FSE_decompress+0x2798>
    5118:	mov	x21, #0xffffffffffffffff    	// #-1
    511c:	ldp	x19, x20, [sp, #16]
    5120:	ldp	x23, x24, [sp, #48]
    5124:	ldp	x25, x26, [sp, #64]
    5128:	ldp	x27, x28, [sp, #80]
    512c:	b	3de4 <FSE_decompress+0x2798>
    5130:	mov	x21, #0xffffffffffffffec    	// #-20
    5134:	ldp	x19, x20, [sp, #16]
    5138:	ldp	x23, x24, [sp, #48]
    513c:	ldp	x25, x26, [sp, #64]
    5140:	ldp	x27, x28, [sp, #80]
    5144:	b	3de4 <FSE_decompress+0x2798>
    5148:	mov	x21, #0xffffffffffffffff    	// #-1
    514c:	ldp	x19, x20, [sp, #16]
    5150:	ldp	x23, x24, [sp, #48]
    5154:	ldp	x25, x26, [sp, #64]
    5158:	ldp	x27, x28, [sp, #80]
    515c:	b	3de4 <FSE_decompress+0x2798>
    5160:	mov	x21, #0xffffffffffffffec    	// #-20
    5164:	ldp	x19, x20, [sp, #16]
    5168:	ldp	x23, x24, [sp, #48]
    516c:	ldp	x25, x26, [sp, #64]
    5170:	ldp	x27, x28, [sp, #80]
    5174:	b	3de4 <FSE_decompress+0x2798>

0000000000005178 <HUF_readDTableX1_wksp>:
    5178:	stp	x29, x30, [sp, #-64]!
    517c:	mov	x29, sp
    5180:	stp	x21, x22, [sp, #32]
    5184:	str	wzr, [sp, #60]
    5188:	str	wzr, [sp, #56]
    518c:	mov	x21, #0xffffffffffffffd4    	// #-44
    5190:	cmp	x4, #0x13f
    5194:	b.ls	51d8 <HUF_readDTableX1_wksp+0x60>  // b.plast
    5198:	stp	x19, x20, [sp, #16]
    519c:	mov	x19, x0
    51a0:	mov	x5, x1
    51a4:	mov	x6, x2
    51a8:	mov	x20, x3
    51ac:	add	x22, x3, #0x40
    51b0:	add	x4, sp, #0x3c
    51b4:	add	x3, sp, #0x38
    51b8:	mov	x2, x20
    51bc:	mov	x1, #0x100                 	// #256
    51c0:	mov	x0, x22
    51c4:	bl	330 <HUF_readStats>
    51c8:	mov	x21, x0
    51cc:	cmn	x0, #0x78
    51d0:	b.ls	51e8 <HUF_readDTableX1_wksp+0x70>  // b.plast
    51d4:	ldp	x19, x20, [sp, #16]
    51d8:	mov	x0, x21
    51dc:	ldp	x21, x22, [sp, #32]
    51e0:	ldp	x29, x30, [sp], #64
    51e4:	ret
    51e8:	mov	x0, x19
    51ec:	bl	1678 <FSE_decompress+0x2c>
    51f0:	str	w0, [sp, #48]
    51f4:	ldr	w1, [sp, #60]
    51f8:	and	w0, w0, #0xff
    51fc:	add	w0, w0, #0x1
    5200:	cmp	w0, w1
    5204:	b.cc	5278 <HUF_readDTableX1_wksp+0x100>  // b.lo, b.ul, b.last
    5208:	strb	wzr, [sp, #49]
    520c:	strb	w1, [sp, #50]
    5210:	mov	x2, #0x4                   	// #4
    5214:	add	x1, sp, #0x30
    5218:	mov	x0, x19
    521c:	bl	0 <grub_memmove>
    5220:	ldr	w9, [sp, #60]
    5224:	add	w0, w9, #0x1
    5228:	cmp	w0, #0x1
    522c:	b.ls	5260 <HUF_readDTableX1_wksp+0xe8>  // b.plast
    5230:	sub	w5, w9, #0x1
    5234:	mov	x0, #0x0                   	// #0
    5238:	mov	w2, #0x0                   	// #0
    523c:	add	x3, x20, #0x4
    5240:	mov	w4, w2
    5244:	ldr	w1, [x3, x0, lsl #2]
    5248:	lsl	w1, w1, w0
    524c:	add	w2, w2, w1
    5250:	str	w4, [x3, x0, lsl #2]
    5254:	cmp	x5, x0
    5258:	add	x0, x0, #0x1
    525c:	b.ne	5240 <HUF_readDTableX1_wksp+0xc8>  // b.any
    5260:	ldr	w10, [sp, #56]
    5264:	cbz	w10, 52f8 <HUF_readDTableX1_wksp+0x180>
    5268:	mov	x7, #0x0                   	// #0
    526c:	mov	w11, #0x1                   	// #1
    5270:	add	w9, w9, w11
    5274:	b	5294 <HUF_readDTableX1_wksp+0x11c>
    5278:	mov	x21, #0xffffffffffffffd4    	// #-44
    527c:	ldp	x19, x20, [sp, #16]
    5280:	b	51d8 <HUF_readDTableX1_wksp+0x60>
    5284:	str	w1, [x20, x8, lsl #2]
    5288:	add	x7, x7, #0x1
    528c:	cmp	w10, w7
    5290:	b.ls	52f0 <HUF_readDTableX1_wksp+0x178>  // b.plast
    5294:	ldrb	w0, [x22, x7]
    5298:	lsl	w3, w11, w0
    529c:	asr	w3, w3, #1
    52a0:	and	w6, w7, #0xff
    52a4:	sub	w5, w9, w0
    52a8:	and	w5, w5, #0xff
    52ac:	and	x8, x0, #0xff
    52b0:	add	x0, x20, w0, uxtb #2
    52b4:	ldr	w2, [x20, x8, lsl #2]
    52b8:	add	w1, w3, w2
    52bc:	cmp	w2, w1
    52c0:	b.cs	5284 <HUF_readDTableX1_wksp+0x10c>  // b.hs, b.nlast
    52c4:	ubfiz	x1, x2, #1, #32
    52c8:	add	x1, x1, #0x4
    52cc:	add	x4, x19, x1
    52d0:	strb	w6, [x19, x1]
    52d4:	strb	w5, [x4, #1]
    52d8:	add	w2, w2, #0x1
    52dc:	ldr	w1, [x0]
    52e0:	add	w1, w3, w1
    52e4:	cmp	w1, w2
    52e8:	b.hi	52c4 <HUF_readDTableX1_wksp+0x14c>  // b.pmore
    52ec:	b	5284 <HUF_readDTableX1_wksp+0x10c>
    52f0:	ldp	x19, x20, [sp, #16]
    52f4:	b	51d8 <HUF_readDTableX1_wksp+0x60>
    52f8:	ldp	x19, x20, [sp, #16]
    52fc:	b	51d8 <HUF_readDTableX1_wksp+0x60>

0000000000005300 <HUF_readDTableX1>:
    5300:	sub	sp, sp, #0x810
    5304:	stp	x29, x30, [sp]
    5308:	mov	x29, sp
    530c:	mov	x4, #0x800                 	// #2048
    5310:	add	x3, sp, #0x10
    5314:	bl	5178 <HUF_readDTableX1_wksp>
    5318:	ldp	x29, x30, [sp]
    531c:	add	sp, sp, #0x810
    5320:	ret

0000000000005324 <HUF_decompress1X1_usingDTable>:
    5324:	stp	x29, x30, [sp, #-64]!
    5328:	mov	x29, sp
    532c:	stp	x19, x20, [sp, #16]
    5330:	stp	x21, x22, [sp, #32]
    5334:	str	x23, [sp, #48]
    5338:	mov	x20, x0
    533c:	mov	x21, x1
    5340:	mov	x22, x2
    5344:	mov	x23, x3
    5348:	mov	x19, x4
    534c:	mov	x0, x4
    5350:	bl	1678 <FSE_decompress+0x2c>
    5354:	tst	x0, #0xff00
    5358:	b.ne	538c <HUF_decompress1X1_usingDTable+0x68>  // b.any
    535c:	mov	w5, #0x0                   	// #0
    5360:	mov	x4, x19
    5364:	mov	x3, x23
    5368:	mov	x2, x22
    536c:	mov	x1, x21
    5370:	mov	x0, x20
    5374:	bl	169c <FSE_decompress+0x50>
    5378:	ldp	x19, x20, [sp, #16]
    537c:	ldp	x21, x22, [sp, #32]
    5380:	ldr	x23, [sp, #48]
    5384:	ldp	x29, x30, [sp], #64
    5388:	ret
    538c:	mov	x0, #0xffffffffffffffff    	// #-1
    5390:	b	5378 <HUF_decompress1X1_usingDTable+0x54>

0000000000005394 <HUF_decompress1X1_DCtx_wksp>:
    5394:	stp	x29, x30, [sp, #-64]!
    5398:	mov	x29, sp
    539c:	stp	x19, x20, [sp, #16]
    53a0:	stp	x21, x22, [sp, #32]
    53a4:	str	x23, [sp, #48]
    53a8:	mov	x23, x0
    53ac:	mov	x21, x1
    53b0:	mov	x22, x2
    53b4:	mov	x20, x3
    53b8:	mov	x19, x4
    53bc:	mov	x3, x5
    53c0:	mov	x4, x6
    53c4:	mov	x2, x19
    53c8:	mov	x1, x20
    53cc:	bl	5178 <HUF_readDTableX1_wksp>
    53d0:	cmn	x0, #0x78
    53d4:	b.hi	53fc <HUF_decompress1X1_DCtx_wksp+0x68>  // b.pmore
    53d8:	cmp	x19, x0
    53dc:	b.ls	5410 <HUF_decompress1X1_DCtx_wksp+0x7c>  // b.plast
    53e0:	mov	w5, #0x0                   	// #0
    53e4:	mov	x4, x23
    53e8:	sub	x3, x19, x0
    53ec:	add	x2, x20, x0
    53f0:	mov	x1, x22
    53f4:	mov	x0, x21
    53f8:	bl	169c <FSE_decompress+0x50>
    53fc:	ldp	x19, x20, [sp, #16]
    5400:	ldp	x21, x22, [sp, #32]
    5404:	ldr	x23, [sp, #48]
    5408:	ldp	x29, x30, [sp], #64
    540c:	ret
    5410:	mov	x0, #0xffffffffffffffb8    	// #-72
    5414:	b	53fc <HUF_decompress1X1_DCtx_wksp+0x68>

0000000000005418 <HUF_decompress1X1_DCtx>:
    5418:	sub	sp, sp, #0x810
    541c:	stp	x29, x30, [sp]
    5420:	mov	x29, sp
    5424:	mov	x6, #0x800                 	// #2048
    5428:	add	x5, sp, #0x10
    542c:	bl	5394 <HUF_decompress1X1_DCtx_wksp>
    5430:	ldp	x29, x30, [sp]
    5434:	add	sp, sp, #0x810
    5438:	ret

000000000000543c <HUF_decompress1X1>:
    543c:	mov	x12, #0x2040                	// #8256
    5440:	sub	sp, sp, x12
    5444:	stp	x29, x30, [sp]
    5448:	mov	x29, sp
    544c:	stp	x19, x20, [sp, #16]
    5450:	stp	x21, x22, [sp, #32]
    5454:	mov	x19, x0
    5458:	mov	x20, x1
    545c:	mov	x21, x2
    5460:	mov	x22, x3
    5464:	mov	x2, #0x2004                	// #8196
    5468:	mov	w1, #0x0                   	// #0
    546c:	add	x0, sp, #0x38
    5470:	bl	0 <memset>
    5474:	mov	w0, #0xb                   	// #11
    5478:	movk	w0, #0xb00, lsl #16
    547c:	str	w0, [sp, #56]
    5480:	mov	x4, x22
    5484:	mov	x3, x21
    5488:	mov	x2, x20
    548c:	mov	x1, x19
    5490:	add	x0, sp, #0x38
    5494:	bl	5418 <HUF_decompress1X1_DCtx>
    5498:	ldp	x19, x20, [sp, #16]
    549c:	ldp	x21, x22, [sp, #32]
    54a0:	ldp	x29, x30, [sp]
    54a4:	mov	x12, #0x2040                	// #8256
    54a8:	add	sp, sp, x12
    54ac:	ret

00000000000054b0 <HUF_decompress4X1_usingDTable>:
    54b0:	stp	x29, x30, [sp, #-64]!
    54b4:	mov	x29, sp
    54b8:	stp	x19, x20, [sp, #16]
    54bc:	stp	x21, x22, [sp, #32]
    54c0:	str	x23, [sp, #48]
    54c4:	mov	x20, x0
    54c8:	mov	x21, x1
    54cc:	mov	x22, x2
    54d0:	mov	x23, x3
    54d4:	mov	x19, x4
    54d8:	mov	x0, x4
    54dc:	bl	1678 <FSE_decompress+0x2c>
    54e0:	tst	x0, #0xff00
    54e4:	b.ne	5518 <HUF_decompress4X1_usingDTable+0x68>  // b.any
    54e8:	mov	w5, #0x0                   	// #0
    54ec:	mov	x4, x19
    54f0:	mov	x3, x23
    54f4:	mov	x2, x22
    54f8:	mov	x1, x21
    54fc:	mov	x0, x20
    5500:	bl	3d5c <FSE_decompress+0x2710>
    5504:	ldp	x19, x20, [sp, #16]
    5508:	ldp	x21, x22, [sp, #32]
    550c:	ldr	x23, [sp, #48]
    5510:	ldp	x29, x30, [sp], #64
    5514:	ret
    5518:	mov	x0, #0xffffffffffffffff    	// #-1
    551c:	b	5504 <HUF_decompress4X1_usingDTable+0x54>

0000000000005520 <HUF_decompress4X1_DCtx_wksp>:
    5520:	stp	x29, x30, [sp, #-64]!
    5524:	mov	x29, sp
    5528:	stp	x19, x20, [sp, #16]
    552c:	stp	x21, x22, [sp, #32]
    5530:	str	x23, [sp, #48]
    5534:	mov	x23, x0
    5538:	mov	x21, x1
    553c:	mov	x22, x2
    5540:	mov	x20, x3
    5544:	mov	x19, x4
    5548:	mov	x3, x5
    554c:	mov	x4, x6
    5550:	mov	x2, x19
    5554:	mov	x1, x20
    5558:	bl	5178 <HUF_readDTableX1_wksp>
    555c:	cmn	x0, #0x78
    5560:	b.hi	5588 <HUF_decompress4X1_DCtx_wksp+0x68>  // b.pmore
    5564:	cmp	x19, x0
    5568:	b.ls	559c <HUF_decompress4X1_DCtx_wksp+0x7c>  // b.plast
    556c:	mov	w5, #0x0                   	// #0
    5570:	mov	x4, x23
    5574:	sub	x3, x19, x0
    5578:	add	x2, x20, x0
    557c:	mov	x1, x22
    5580:	mov	x0, x21
    5584:	bl	3d5c <FSE_decompress+0x2710>
    5588:	ldp	x19, x20, [sp, #16]
    558c:	ldp	x21, x22, [sp, #32]
    5590:	ldr	x23, [sp, #48]
    5594:	ldp	x29, x30, [sp], #64
    5598:	ret
    559c:	mov	x0, #0xffffffffffffffb8    	// #-72
    55a0:	b	5588 <HUF_decompress4X1_DCtx_wksp+0x68>

00000000000055a4 <HUF_decompress4X1_DCtx>:
    55a4:	sub	sp, sp, #0x810
    55a8:	stp	x29, x30, [sp]
    55ac:	mov	x29, sp
    55b0:	mov	x6, #0x800                 	// #2048
    55b4:	add	x5, sp, #0x10
    55b8:	bl	5520 <HUF_decompress4X1_DCtx_wksp>
    55bc:	ldp	x29, x30, [sp]
    55c0:	add	sp, sp, #0x810
    55c4:	ret

00000000000055c8 <HUF_decompress4X1>:
    55c8:	mov	x12, #0x2040                	// #8256
    55cc:	sub	sp, sp, x12
    55d0:	stp	x29, x30, [sp]
    55d4:	mov	x29, sp
    55d8:	stp	x19, x20, [sp, #16]
    55dc:	stp	x21, x22, [sp, #32]
    55e0:	mov	x19, x0
    55e4:	mov	x20, x1
    55e8:	mov	x21, x2
    55ec:	mov	x22, x3
    55f0:	mov	x2, #0x2004                	// #8196
    55f4:	mov	w1, #0x0                   	// #0
    55f8:	add	x0, sp, #0x38
    55fc:	bl	0 <memset>
    5600:	mov	w0, #0xb                   	// #11
    5604:	movk	w0, #0xb00, lsl #16
    5608:	str	w0, [sp, #56]
    560c:	mov	x4, x22
    5610:	mov	x3, x21
    5614:	mov	x2, x20
    5618:	mov	x1, x19
    561c:	add	x0, sp, #0x38
    5620:	bl	55a4 <HUF_decompress4X1_DCtx>
    5624:	ldp	x19, x20, [sp, #16]
    5628:	ldp	x21, x22, [sp, #32]
    562c:	ldp	x29, x30, [sp]
    5630:	mov	x12, #0x2040                	// #8256
    5634:	add	sp, sp, x12
    5638:	ret

000000000000563c <HUF_readDTableX2_wksp>:
    563c:	stp	x29, x30, [sp, #-320]!
    5640:	mov	x29, sp
    5644:	stp	x19, x20, [sp, #16]
    5648:	stp	x21, x22, [sp, #32]
    564c:	stp	x23, x24, [sp, #48]
    5650:	str	x0, [sp, #160]
    5654:	mov	x23, x1
    5658:	mov	x24, x2
    565c:	mov	x22, x3
    5660:	str	x3, [sp, #96]
    5664:	mov	x19, x4
    5668:	bl	1678 <FSE_decompress+0x2c>
    566c:	str	w0, [sp, #304]
    5670:	cmp	x19, #0x5db
    5674:	b.ls	5ae4 <HUF_readDTableX2_wksp+0x4a8>  // b.plast
    5678:	stp	x25, x26, [sp, #64]
    567c:	ldrb	w25, [sp, #304]
    5680:	str	w25, [sp, #168]
    5684:	mov	w19, w25
    5688:	add	w21, w25, #0x1
    568c:	add	x20, x22, #0x270
    5690:	mov	x2, #0x6c                  	// #108
    5694:	mov	w1, #0x0                   	// #0
    5698:	mov	x0, x20
    569c:	bl	0 <grub_memset>
    56a0:	mov	x0, #0xffffffffffffffd4    	// #-44
    56a4:	str	x0, [sp, #112]
    56a8:	cmp	w25, #0xc
    56ac:	b.hi	5b14 <HUF_readDTableX2_wksp+0x4d8>  // b.pmore
    56b0:	add	x22, x22, #0x4dc
    56b4:	mov	x6, x24
    56b8:	mov	x5, x23
    56bc:	add	x4, sp, #0x13c
    56c0:	add	x3, sp, #0x138
    56c4:	mov	x2, x20
    56c8:	mov	x1, #0x100                 	// #256
    56cc:	mov	x0, x22
    56d0:	bl	330 <HUF_readStats>
    56d4:	str	x0, [sp, #112]
    56d8:	cmn	x0, #0x78
    56dc:	b.hi	5b1c <HUF_readDTableX2_wksp+0x4e0>  // b.pmore
    56e0:	ldr	w8, [sp, #316]
    56e4:	cmp	w8, w25
    56e8:	b.hi	5b04 <HUF_readDTableX2_wksp+0x4c8>  // b.pmore
    56ec:	ldr	w0, [x20, w8, uxtw #2]
    56f0:	cbnz	w0, 58c0 <HUF_readDTableX2_wksp+0x284>
    56f4:	mov	w0, w8
    56f8:	sub	w0, w0, #0x1
    56fc:	ldr	w1, [x20, w0, uxtw #2]
    5700:	cbz	w1, 56f8 <HUF_readDTableX2_wksp+0xbc>
    5704:	ldr	x2, [sp, #96]
    5708:	add	x6, x2, #0x2a8
    570c:	add	w5, w0, #0x1
    5710:	cmp	w5, #0x1
    5714:	b.ls	58c8 <HUF_readDTableX2_wksp+0x28c>  // b.plast
    5718:	add	x1, x2, #0x274
    571c:	sub	w4, w0, #0x1
    5720:	add	x2, x2, #0x278
    5724:	add	x4, x2, x4, lsl #2
    5728:	mov	w2, #0x0                   	// #0
    572c:	mov	w3, w2
    5730:	ldr	w7, [x1]
    5734:	add	w2, w2, w7
    5738:	str	w3, [x1, #56]
    573c:	add	x1, x1, #0x4
    5740:	cmp	x1, x4
    5744:	b.ne	572c <HUF_readDTableX2_wksp+0xf0>  // b.any
    5748:	str	w2, [sp, #152]
    574c:	ldr	x1, [sp, #96]
    5750:	add	x25, x1, #0x2dc
    5754:	ldr	w2, [sp, #152]
    5758:	str	w2, [x1, #680]
    575c:	ldr	w9, [sp, #312]
    5760:	cbz	w9, 5798 <HUF_readDTableX2_wksp+0x15c>
    5764:	mov	x2, #0x0                   	// #0
    5768:	ldrb	w3, [x22, x2]
    576c:	and	x4, x3, #0xff
    5770:	ldr	w1, [x6, x4, lsl #2]
    5774:	add	w7, w1, #0x1
    5778:	str	w7, [x6, x4, lsl #2]
    577c:	ubfiz	x1, x1, #1, #32
    5780:	add	x4, x25, x1
    5784:	strb	w2, [x25, x1]
    5788:	strb	w3, [x4, #1]
    578c:	add	x2, x2, #0x1
    5790:	cmp	w9, w2
    5794:	b.hi	5768 <HUF_readDTableX2_wksp+0x12c>  // b.pmore
    5798:	ldr	x2, [sp, #96]
    579c:	str	wzr, [x2, #680]
    57a0:	ldr	w1, [sp, #168]
    57a4:	sub	w1, w1, w8
    57a8:	cmp	w5, #0x1
    57ac:	b.ls	57dc <HUF_readDTableX2_wksp+0x1a0>  // b.plast
    57b0:	add	x4, x2, #0x4
    57b4:	add	w7, w1, w0
    57b8:	mov	w3, #0x0                   	// #0
    57bc:	mov	w6, w3
    57c0:	ldr	w2, [x4, #624]
    57c4:	lsl	w2, w2, w1
    57c8:	add	w3, w3, w2
    57cc:	str	w6, [x4], #4
    57d0:	add	w1, w1, #0x1
    57d4:	cmp	w1, w7
    57d8:	b.ne	57bc <HUF_readDTableX2_wksp+0x180>  // b.any
    57dc:	add	w22, w8, #0x1
    57e0:	sub	w3, w22, w0
    57e4:	str	w3, [sp, #128]
    57e8:	sub	w1, w0, w22
    57ec:	add	w21, w1, w21
    57f0:	cmp	w3, w21
    57f4:	b.cs	5850 <HUF_readDTableX2_wksp+0x214>  // b.hs, b.nlast
    57f8:	mov	w1, w3
    57fc:	mov	x2, x3
    5800:	add	x4, x1, w2, uxtw #1
    5804:	add	x4, x1, x4, lsl #2
    5808:	lsl	x4, x4, #2
    580c:	sub	w0, w0, #0x1
    5810:	ldr	x6, [sp, #96]
    5814:	add	x2, x6, #0x8
    5818:	add	x2, x2, x0, lsl #2
    581c:	cmp	w5, #0x1
    5820:	b.ls	5840 <HUF_readDTableX2_wksp+0x204>  // b.plast
    5824:	add	x0, x6, #0x4
    5828:	ldr	w1, [x0]
    582c:	lsr	w1, w1, w3
    5830:	str	w1, [x0, x4]
    5834:	add	x0, x0, #0x4
    5838:	cmp	x0, x2
    583c:	b.ne	5828 <HUF_readDTableX2_wksp+0x1ec>  // b.any
    5840:	add	w3, w3, #0x1
    5844:	add	x4, x4, #0x34
    5848:	cmp	w3, w21
    584c:	b.ne	581c <HUF_readDTableX2_wksp+0x1e0>  // b.any
    5850:	ldr	w0, [sp, #168]
    5854:	sub	w0, w22, w0
    5858:	str	w0, [sp, #172]
    585c:	mov	x2, #0x34                  	// #52
    5860:	ldr	x20, [sp, #96]
    5864:	mov	x1, x20
    5868:	add	x0, sp, #0xc0
    586c:	bl	0 <grub_memmove>
    5870:	ldr	w0, [sp, #152]
    5874:	cbz	w0, 5abc <HUF_readDTableX2_wksp+0x480>
    5878:	stp	x27, x28, [sp, #80]
    587c:	ldr	x1, [sp, #160]
    5880:	add	x2, x1, #0x4
    5884:	str	x2, [sp, #144]
    5888:	add	x2, x20, #0x2de
    588c:	str	x2, [sp, #176]
    5890:	sub	w0, w0, #0x1
    5894:	add	x0, x2, x0, lsl #1
    5898:	str	x0, [sp, #120]
    589c:	sub	w0, w19, w22
    58a0:	str	w0, [sp, #132]
    58a4:	mov	w26, #0x1                   	// #1
    58a8:	add	x0, x1, #0x8
    58ac:	str	x0, [sp, #184]
    58b0:	add	x28, sp, #0xf8
    58b4:	mov	w27, w22
    58b8:	mov	x24, x25
    58bc:	b	5994 <HUF_readDTableX2_wksp+0x358>
    58c0:	mov	w0, w8
    58c4:	b	5704 <HUF_readDTableX2_wksp+0xc8>
    58c8:	str	wzr, [sp, #152]
    58cc:	b	574c <HUF_readDTableX2_wksp+0x110>
    58d0:	cbz	w22, 5968 <HUF_readDTableX2_wksp+0x32c>
    58d4:	ldr	x0, [sp, #136]
    58d8:	add	x7, x0, #0x16e
    58dc:	ldr	x1, [sp, #96]
    58e0:	add	x7, x1, x7, lsl #1
    58e4:	sub	w22, w22, #0x1
    58e8:	add	x25, x22, x0
    58ec:	ldr	x0, [sp, #176]
    58f0:	add	x25, x0, x25, lsl #1
    58f4:	sub	w23, w23, w27
    58f8:	mov	w8, #0x2                   	// #2
    58fc:	ldrb	w4, [x7, #1]
    5900:	mov	w0, w4
    5904:	ldr	w0, [x28, x0, lsl #2]
    5908:	add	w3, w23, w4
    590c:	lsl	w3, w26, w3
    5910:	add	w3, w3, w0
    5914:	ldrb	w2, [x7]
    5918:	ubfiz	w2, w2, #8, #8
    591c:	add	w2, w21, w2
    5920:	and	w2, w2, #0xffff
    5924:	sub	w5, w27, w4
    5928:	add	w5, w5, w20
    592c:	and	w5, w5, #0xff
    5930:	mov	w1, w0
    5934:	add	w0, w0, #0x1
    5938:	ubfiz	x1, x1, #2, #32
    593c:	add	x6, x19, x1
    5940:	strh	w2, [x19, x1]
    5944:	strb	w5, [x6, #2]
    5948:	strb	w8, [x6, #3]
    594c:	cmp	w3, w0
    5950:	b.hi	5930 <HUF_readDTableX2_wksp+0x2f4>  // b.pmore
    5954:	mov	w4, w4
    5958:	str	w3, [x28, x4, lsl #2]
    595c:	add	x7, x7, #0x2
    5960:	cmp	x7, x25
    5964:	b.ne	58fc <HUF_readDTableX2_wksp+0x2c0>  // b.any
    5968:	ldr	w0, [sp, #108]
    596c:	add	x1, sp, #0xc0
    5970:	ldr	w1, [x1, x0, lsl #2]
    5974:	ldr	w2, [sp, #104]
    5978:	add	w1, w1, w2
    597c:	add	x2, sp, #0xc0
    5980:	str	w1, [x2, x0, lsl #2]
    5984:	add	x24, x24, #0x2
    5988:	ldr	x0, [sp, #120]
    598c:	cmp	x24, x0
    5990:	b.eq	5ab8 <HUF_readDTableX2_wksp+0x47c>  // b.none
    5994:	ldrb	w21, [x24]
    5998:	ldrb	w1, [x24, #1]
    599c:	str	w1, [sp, #108]
    59a0:	sub	w20, w27, w1
    59a4:	mov	w0, w1
    59a8:	add	x2, sp, #0xc0
    59ac:	ldr	w19, [x2, x0, lsl #2]
    59b0:	ldr	w0, [sp, #132]
    59b4:	add	w23, w0, w1
    59b8:	lsl	w0, w26, w23
    59bc:	str	w0, [sp, #104]
    59c0:	ldr	w0, [sp, #128]
    59c4:	cmp	w0, w23
    59c8:	b.hi	5a68 <HUF_readDTableX2_wksp+0x42c>  // b.pmore
    59cc:	ldr	w0, [sp, #172]
    59d0:	add	w25, w0, w20
    59d4:	cmp	w25, #0x0
    59d8:	csel	w0, w25, w26, gt
    59dc:	str	w0, [sp, #156]
    59e0:	ldr	x3, [sp, #96]
    59e4:	add	x0, x3, w0, sxtw #2
    59e8:	ldr	w22, [x0, #676]
    59ec:	ldr	x1, [sp, #144]
    59f0:	add	x19, x1, w19, uxtw #2
    59f4:	mov	w1, w22
    59f8:	str	x1, [sp, #136]
    59fc:	ldr	w1, [sp, #152]
    5a00:	sub	w22, w1, w22
    5a04:	mov	w0, w20
    5a08:	add	x1, x0, w20, uxtw #1
    5a0c:	add	x1, x0, x1, lsl #2
    5a10:	mov	x2, #0x34                  	// #52
    5a14:	add	x1, x3, x1, lsl #2
    5a18:	mov	x0, x28
    5a1c:	bl	0 <grub_memmove>
    5a20:	cmp	w25, #0x1
    5a24:	b.le	58d0 <HUF_readDTableX2_wksp+0x294>
    5a28:	ldr	w0, [sp, #156]
    5a2c:	ldr	w1, [x28, w0, sxtw #2]
    5a30:	and	w2, w20, #0xff
    5a34:	cbz	w1, 58d0 <HUF_readDTableX2_wksp+0x294>
    5a38:	mov	x0, x19
    5a3c:	sub	w1, w1, #0x1
    5a40:	add	x3, x19, #0x4
    5a44:	add	x1, x3, x1, lsl #2
    5a48:	mov	w3, #0x1                   	// #1
    5a4c:	strh	w21, [x0]
    5a50:	strb	w2, [x0, #2]
    5a54:	strb	w3, [x0, #3]
    5a58:	add	x0, x0, #0x4
    5a5c:	cmp	x1, x0
    5a60:	b.ne	5a4c <HUF_readDTableX2_wksp+0x410>  // b.any
    5a64:	b	58d0 <HUF_readDTableX2_wksp+0x294>
    5a68:	and	w20, w20, #0xff
    5a6c:	ldr	w0, [sp, #104]
    5a70:	add	w2, w19, w0
    5a74:	cmp	w19, w2
    5a78:	b.cs	5968 <HUF_readDTableX2_wksp+0x32c>  // b.hs, b.nlast
    5a7c:	ldr	x0, [sp, #144]
    5a80:	add	x1, x0, w19, uxtw #2
    5a84:	mvn	w0, w19
    5a88:	add	w0, w0, w2
    5a8c:	add	x19, x0, w19, uxtw
    5a90:	ldr	x0, [sp, #184]
    5a94:	add	x0, x0, x19, lsl #2
    5a98:	mov	w2, #0x1                   	// #1
    5a9c:	strh	w21, [x1]
    5aa0:	strb	w20, [x1, #2]
    5aa4:	strb	w2, [x1, #3]
    5aa8:	add	x1, x1, #0x4
    5aac:	cmp	x1, x0
    5ab0:	b.ne	5a9c <HUF_readDTableX2_wksp+0x460>  // b.any
    5ab4:	b	5968 <HUF_readDTableX2_wksp+0x32c>
    5ab8:	ldp	x27, x28, [sp, #80]
    5abc:	ldrb	w0, [sp, #168]
    5ac0:	strb	w0, [sp, #306]
    5ac4:	mov	w0, #0x1                   	// #1
    5ac8:	strb	w0, [sp, #305]
    5acc:	mov	x2, #0x4                   	// #4
    5ad0:	add	x1, sp, #0x130
    5ad4:	ldr	x0, [sp, #160]
    5ad8:	bl	0 <grub_memmove>
    5adc:	ldp	x25, x26, [sp, #64]
    5ae0:	b	5aec <HUF_readDTableX2_wksp+0x4b0>
    5ae4:	mov	x0, #0xffffffffffffffd4    	// #-44
    5ae8:	str	x0, [sp, #112]
    5aec:	ldr	x0, [sp, #112]
    5af0:	ldp	x19, x20, [sp, #16]
    5af4:	ldp	x21, x22, [sp, #32]
    5af8:	ldp	x23, x24, [sp, #48]
    5afc:	ldp	x29, x30, [sp], #320
    5b00:	ret
    5b04:	mov	x0, #0xffffffffffffffd4    	// #-44
    5b08:	str	x0, [sp, #112]
    5b0c:	ldp	x25, x26, [sp, #64]
    5b10:	b	5aec <HUF_readDTableX2_wksp+0x4b0>
    5b14:	ldp	x25, x26, [sp, #64]
    5b18:	b	5aec <HUF_readDTableX2_wksp+0x4b0>
    5b1c:	ldp	x25, x26, [sp, #64]
    5b20:	b	5aec <HUF_readDTableX2_wksp+0x4b0>

0000000000005b24 <HUF_readDTableX2>:
    5b24:	sub	sp, sp, #0x810
    5b28:	stp	x29, x30, [sp]
    5b2c:	mov	x29, sp
    5b30:	mov	x4, #0x800                 	// #2048
    5b34:	add	x3, sp, #0x10
    5b38:	bl	563c <HUF_readDTableX2_wksp>
    5b3c:	ldp	x29, x30, [sp]
    5b40:	add	sp, sp, #0x810
    5b44:	ret

0000000000005b48 <HUF_decompress1X2_usingDTable>:
    5b48:	stp	x29, x30, [sp, #-64]!
    5b4c:	mov	x29, sp
    5b50:	stp	x19, x20, [sp, #16]
    5b54:	stp	x21, x22, [sp, #32]
    5b58:	str	x23, [sp, #48]
    5b5c:	mov	x20, x0
    5b60:	mov	x21, x1
    5b64:	mov	x22, x2
    5b68:	mov	x23, x3
    5b6c:	mov	x19, x4
    5b70:	mov	x0, x4
    5b74:	bl	1678 <FSE_decompress+0x2c>
    5b78:	ubfx	x4, x0, #8, #8
    5b7c:	mov	x0, #0xffffffffffffffff    	// #-1
    5b80:	cmp	w4, #0x1
    5b84:	b.eq	5b9c <HUF_decompress1X2_usingDTable+0x54>  // b.none
    5b88:	ldp	x19, x20, [sp, #16]
    5b8c:	ldp	x21, x22, [sp, #32]
    5b90:	ldr	x23, [sp, #48]
    5b94:	ldp	x29, x30, [sp], #64
    5b98:	ret
    5b9c:	mov	w5, #0x0                   	// #0
    5ba0:	mov	x4, x19
    5ba4:	mov	x3, x23
    5ba8:	mov	x2, x22
    5bac:	mov	x1, x21
    5bb0:	mov	x0, x20
    5bb4:	bl	380c <FSE_decompress+0x21c0>
    5bb8:	b	5b88 <HUF_decompress1X2_usingDTable+0x40>

0000000000005bbc <HUF_decompress1X2_DCtx_wksp>:
    5bbc:	stp	x29, x30, [sp, #-64]!
    5bc0:	mov	x29, sp
    5bc4:	stp	x19, x20, [sp, #16]
    5bc8:	stp	x21, x22, [sp, #32]
    5bcc:	str	x23, [sp, #48]
    5bd0:	mov	x23, x0
    5bd4:	mov	x21, x1
    5bd8:	mov	x22, x2
    5bdc:	mov	x20, x3
    5be0:	mov	x19, x4
    5be4:	mov	x3, x5
    5be8:	mov	x4, x6
    5bec:	mov	x2, x19
    5bf0:	mov	x1, x20
    5bf4:	bl	563c <HUF_readDTableX2_wksp>
    5bf8:	cmn	x0, #0x78
    5bfc:	b.hi	5c24 <HUF_decompress1X2_DCtx_wksp+0x68>  // b.pmore
    5c00:	cmp	x19, x0
    5c04:	b.ls	5c38 <HUF_decompress1X2_DCtx_wksp+0x7c>  // b.plast
    5c08:	mov	w5, #0x0                   	// #0
    5c0c:	mov	x4, x23
    5c10:	sub	x3, x19, x0
    5c14:	add	x2, x20, x0
    5c18:	mov	x1, x22
    5c1c:	mov	x0, x21
    5c20:	bl	380c <FSE_decompress+0x21c0>
    5c24:	ldp	x19, x20, [sp, #16]
    5c28:	ldp	x21, x22, [sp, #32]
    5c2c:	ldr	x23, [sp, #48]
    5c30:	ldp	x29, x30, [sp], #64
    5c34:	ret
    5c38:	mov	x0, #0xffffffffffffffb8    	// #-72
    5c3c:	b	5c24 <HUF_decompress1X2_DCtx_wksp+0x68>

0000000000005c40 <HUF_decompress1X2_DCtx>:
    5c40:	sub	sp, sp, #0x810
    5c44:	stp	x29, x30, [sp]
    5c48:	mov	x29, sp
    5c4c:	mov	x6, #0x800                 	// #2048
    5c50:	add	x5, sp, #0x10
    5c54:	bl	5bbc <HUF_decompress1X2_DCtx_wksp>
    5c58:	ldp	x29, x30, [sp]
    5c5c:	add	sp, sp, #0x810
    5c60:	ret

0000000000005c64 <HUF_decompress1X2>:
    5c64:	mov	x12, #0x4040                	// #16448
    5c68:	sub	sp, sp, x12
    5c6c:	stp	x29, x30, [sp]
    5c70:	mov	x29, sp
    5c74:	stp	x19, x20, [sp, #16]
    5c78:	stp	x21, x22, [sp, #32]
    5c7c:	mov	x19, x0
    5c80:	mov	x20, x1
    5c84:	mov	x21, x2
    5c88:	mov	x22, x3
    5c8c:	mov	x2, #0x4004                	// #16388
    5c90:	mov	w1, #0x0                   	// #0
    5c94:	add	x0, sp, #0x38
    5c98:	bl	0 <memset>
    5c9c:	mov	w0, #0xc                   	// #12
    5ca0:	movk	w0, #0xc00, lsl #16
    5ca4:	str	w0, [sp, #56]
    5ca8:	mov	x4, x22
    5cac:	mov	x3, x21
    5cb0:	mov	x2, x20
    5cb4:	mov	x1, x19
    5cb8:	add	x0, sp, #0x38
    5cbc:	bl	5c40 <HUF_decompress1X2_DCtx>
    5cc0:	ldp	x19, x20, [sp, #16]
    5cc4:	ldp	x21, x22, [sp, #32]
    5cc8:	ldp	x29, x30, [sp]
    5ccc:	mov	x12, #0x4040                	// #16448
    5cd0:	add	sp, sp, x12
    5cd4:	ret

0000000000005cd8 <HUF_decompress4X2_usingDTable>:
    5cd8:	stp	x29, x30, [sp, #-64]!
    5cdc:	mov	x29, sp
    5ce0:	stp	x19, x20, [sp, #16]
    5ce4:	stp	x21, x22, [sp, #32]
    5ce8:	str	x23, [sp, #48]
    5cec:	mov	x20, x0
    5cf0:	mov	x21, x1
    5cf4:	mov	x22, x2
    5cf8:	mov	x23, x3
    5cfc:	mov	x19, x4
    5d00:	mov	x0, x4
    5d04:	bl	1678 <FSE_decompress+0x2c>
    5d08:	ubfx	x4, x0, #8, #8
    5d0c:	mov	x0, #0xffffffffffffffff    	// #-1
    5d10:	cmp	w4, #0x1
    5d14:	b.eq	5d2c <HUF_decompress4X2_usingDTable+0x54>  // b.none
    5d18:	ldp	x19, x20, [sp, #16]
    5d1c:	ldp	x21, x22, [sp, #32]
    5d20:	ldr	x23, [sp, #48]
    5d24:	ldp	x29, x30, [sp], #64
    5d28:	ret
    5d2c:	mov	w5, #0x0                   	// #0
    5d30:	mov	x4, x19
    5d34:	mov	x3, x23
    5d38:	mov	x2, x22
    5d3c:	mov	x1, x21
    5d40:	mov	x0, x20
    5d44:	bl	19cc <FSE_decompress+0x380>
    5d48:	b	5d18 <HUF_decompress4X2_usingDTable+0x40>

0000000000005d4c <HUF_decompress4X2_DCtx_wksp>:
    5d4c:	stp	x29, x30, [sp, #-64]!
    5d50:	mov	x29, sp
    5d54:	stp	x19, x20, [sp, #16]
    5d58:	stp	x21, x22, [sp, #32]
    5d5c:	str	x23, [sp, #48]
    5d60:	mov	x23, x0
    5d64:	mov	x21, x1
    5d68:	mov	x22, x2
    5d6c:	mov	x20, x3
    5d70:	mov	x19, x4
    5d74:	mov	x3, x5
    5d78:	mov	x4, x6
    5d7c:	mov	x2, x19
    5d80:	mov	x1, x20
    5d84:	bl	563c <HUF_readDTableX2_wksp>
    5d88:	cmn	x0, #0x78
    5d8c:	b.hi	5db4 <HUF_decompress4X2_DCtx_wksp+0x68>  // b.pmore
    5d90:	cmp	x19, x0
    5d94:	b.ls	5dc8 <HUF_decompress4X2_DCtx_wksp+0x7c>  // b.plast
    5d98:	mov	w5, #0x0                   	// #0
    5d9c:	mov	x4, x23
    5da0:	sub	x3, x19, x0
    5da4:	add	x2, x20, x0
    5da8:	mov	x1, x22
    5dac:	mov	x0, x21
    5db0:	bl	19cc <FSE_decompress+0x380>
    5db4:	ldp	x19, x20, [sp, #16]
    5db8:	ldp	x21, x22, [sp, #32]
    5dbc:	ldr	x23, [sp, #48]
    5dc0:	ldp	x29, x30, [sp], #64
    5dc4:	ret
    5dc8:	mov	x0, #0xffffffffffffffb8    	// #-72
    5dcc:	b	5db4 <HUF_decompress4X2_DCtx_wksp+0x68>

0000000000005dd0 <HUF_decompress4X2_DCtx>:
    5dd0:	sub	sp, sp, #0x810
    5dd4:	stp	x29, x30, [sp]
    5dd8:	mov	x29, sp
    5ddc:	mov	x6, #0x800                 	// #2048
    5de0:	add	x5, sp, #0x10
    5de4:	bl	5d4c <HUF_decompress4X2_DCtx_wksp>
    5de8:	ldp	x29, x30, [sp]
    5dec:	add	sp, sp, #0x810
    5df0:	ret

0000000000005df4 <HUF_decompress4X2>:
    5df4:	mov	x12, #0x4040                	// #16448
    5df8:	sub	sp, sp, x12
    5dfc:	stp	x29, x30, [sp]
    5e00:	mov	x29, sp
    5e04:	stp	x19, x20, [sp, #16]
    5e08:	stp	x21, x22, [sp, #32]
    5e0c:	mov	x19, x0
    5e10:	mov	x20, x1
    5e14:	mov	x21, x2
    5e18:	mov	x22, x3
    5e1c:	mov	x2, #0x4004                	// #16388
    5e20:	mov	w1, #0x0                   	// #0
    5e24:	add	x0, sp, #0x38
    5e28:	bl	0 <memset>
    5e2c:	mov	w0, #0xc                   	// #12
    5e30:	movk	w0, #0xc00, lsl #16
    5e34:	str	w0, [sp, #56]
    5e38:	mov	x4, x22
    5e3c:	mov	x3, x21
    5e40:	mov	x2, x20
    5e44:	mov	x1, x19
    5e48:	add	x0, sp, #0x38
    5e4c:	bl	5dd0 <HUF_decompress4X2_DCtx>
    5e50:	ldp	x19, x20, [sp, #16]
    5e54:	ldp	x21, x22, [sp, #32]
    5e58:	ldp	x29, x30, [sp]
    5e5c:	mov	x12, #0x4040                	// #16448
    5e60:	add	sp, sp, x12
    5e64:	ret

0000000000005e68 <HUF_decompress1X_usingDTable>:
    5e68:	stp	x29, x30, [sp, #-64]!
    5e6c:	mov	x29, sp
    5e70:	stp	x19, x20, [sp, #16]
    5e74:	stp	x21, x22, [sp, #32]
    5e78:	str	x23, [sp, #48]
    5e7c:	mov	x20, x0
    5e80:	mov	x21, x1
    5e84:	mov	x22, x2
    5e88:	mov	x23, x3
    5e8c:	mov	x19, x4
    5e90:	mov	x0, x4
    5e94:	bl	1678 <FSE_decompress+0x2c>
    5e98:	tst	x0, #0xff00
    5e9c:	b.eq	5ed0 <HUF_decompress1X_usingDTable+0x68>  // b.none
    5ea0:	mov	w5, #0x0                   	// #0
    5ea4:	mov	x4, x19
    5ea8:	mov	x3, x23
    5eac:	mov	x2, x22
    5eb0:	mov	x1, x21
    5eb4:	mov	x0, x20
    5eb8:	bl	380c <FSE_decompress+0x21c0>
    5ebc:	ldp	x19, x20, [sp, #16]
    5ec0:	ldp	x21, x22, [sp, #32]
    5ec4:	ldr	x23, [sp, #48]
    5ec8:	ldp	x29, x30, [sp], #64
    5ecc:	ret
    5ed0:	mov	w5, #0x0                   	// #0
    5ed4:	mov	x4, x19
    5ed8:	mov	x3, x23
    5edc:	mov	x2, x22
    5ee0:	mov	x1, x21
    5ee4:	mov	x0, x20
    5ee8:	bl	169c <FSE_decompress+0x50>
    5eec:	b	5ebc <HUF_decompress1X_usingDTable+0x54>

0000000000005ef0 <HUF_decompress4X_usingDTable>:
    5ef0:	stp	x29, x30, [sp, #-64]!
    5ef4:	mov	x29, sp
    5ef8:	stp	x19, x20, [sp, #16]
    5efc:	stp	x21, x22, [sp, #32]
    5f00:	str	x23, [sp, #48]
    5f04:	mov	x20, x0
    5f08:	mov	x21, x1
    5f0c:	mov	x22, x2
    5f10:	mov	x23, x3
    5f14:	mov	x19, x4
    5f18:	mov	x0, x4
    5f1c:	bl	1678 <FSE_decompress+0x2c>
    5f20:	tst	x0, #0xff00
    5f24:	b.eq	5f58 <HUF_decompress4X_usingDTable+0x68>  // b.none
    5f28:	mov	w5, #0x0                   	// #0
    5f2c:	mov	x4, x19
    5f30:	mov	x3, x23
    5f34:	mov	x2, x22
    5f38:	mov	x1, x21
    5f3c:	mov	x0, x20
    5f40:	bl	19cc <FSE_decompress+0x380>
    5f44:	ldp	x19, x20, [sp, #16]
    5f48:	ldp	x21, x22, [sp, #32]
    5f4c:	ldr	x23, [sp, #48]
    5f50:	ldp	x29, x30, [sp], #64
    5f54:	ret
    5f58:	mov	w5, #0x0                   	// #0
    5f5c:	mov	x4, x19
    5f60:	mov	x3, x23
    5f64:	mov	x2, x22
    5f68:	mov	x1, x21
    5f6c:	mov	x0, x20
    5f70:	bl	3d5c <FSE_decompress+0x2710>
    5f74:	b	5f44 <HUF_decompress4X_usingDTable+0x54>

0000000000005f78 <HUF_selectDecoder>:
    5f78:	cmp	x1, x0
    5f7c:	b.cs	5fe4 <HUF_selectDecoder+0x6c>  // b.hs, b.nlast
    5f80:	lsl	x1, x1, #4
    5f84:	udiv	x1, x1, x0
    5f88:	lsr	x0, x0, #8
    5f8c:	adrp	x2, 0 <FSE_versionNumber>
    5f90:	ldr	x3, [x2]
    5f94:	mov	w4, w1
    5f98:	ubfiz	x1, x1, #1, #32
    5f9c:	add	x2, x1, x4
    5fa0:	add	x2, x3, x2, lsl #3
    5fa4:	ldr	w2, [x2, #12]
    5fa8:	add	x5, x1, x4
    5fac:	add	x5, x3, x5, lsl #3
    5fb0:	ldr	w5, [x5, #8]
    5fb4:	madd	w2, w2, w0, w5
    5fb8:	add	x5, x1, x4
    5fbc:	add	x5, x3, x5, lsl #3
    5fc0:	ldr	w5, [x5, #4]
    5fc4:	add	x1, x1, x4
    5fc8:	lsl	x1, x1, #3
    5fcc:	ldr	w1, [x3, x1]
    5fd0:	madd	w0, w5, w0, w1
    5fd4:	add	w2, w2, w2, lsr #3
    5fd8:	cmp	w0, w2
    5fdc:	cset	w0, hi  // hi = pmore
    5fe0:	ret
    5fe4:	mov	w1, #0xf                   	// #15
    5fe8:	b	5f88 <HUF_selectDecoder+0x10>
    5fec:	nop
	...

0000000000005ff8 <HUF_decompress>:
    5ff8:	cbz	x1, 60a4 <HUF_decompress+0xac>
    5ffc:	stp	x29, x30, [sp, #-48]!
    6000:	mov	x29, sp
    6004:	stp	x19, x20, [sp, #16]
    6008:	stp	x21, x22, [sp, #32]
    600c:	mov	x22, x0
    6010:	mov	x19, x1
    6014:	mov	x21, x2
    6018:	mov	x20, x3
    601c:	mov	x0, #0xffffffffffffffec    	// #-20
    6020:	cmp	x1, x3
    6024:	b.cc	6064 <HUF_decompress+0x6c>  // b.lo, b.ul, b.last
    6028:	b.eq	6074 <HUF_decompress+0x7c>  // b.none
    602c:	cmp	x3, #0x1
    6030:	b.eq	608c <HUF_decompress+0x94>  // b.none
    6034:	mov	x1, x3
    6038:	mov	x0, x19
    603c:	bl	5f78 <HUF_selectDecoder>
    6040:	adrp	x1, 0 <FSE_versionNumber>
    6044:	ldr	x1, [x1]
    6048:	add	x0, x1, w0, uxtw #3
    604c:	ldr	x4, [x0, #384]
    6050:	mov	x3, x20
    6054:	mov	x2, x21
    6058:	mov	x1, x19
    605c:	mov	x0, x22
    6060:	blr	x4
    6064:	ldp	x19, x20, [sp, #16]
    6068:	ldp	x21, x22, [sp, #32]
    606c:	ldp	x29, x30, [sp], #48
    6070:	ret
    6074:	mov	x2, x1
    6078:	mov	x1, x21
    607c:	mov	x0, x22
    6080:	bl	0 <grub_memmove>
    6084:	mov	x0, x19
    6088:	b	6064 <HUF_decompress+0x6c>
    608c:	mov	x2, x1
    6090:	ldrb	w1, [x21]
    6094:	mov	x0, x22
    6098:	bl	0 <grub_memset>
    609c:	mov	x0, x19
    60a0:	b	6064 <HUF_decompress+0x6c>
    60a4:	mov	x0, #0xffffffffffffffba    	// #-70
    60a8:	ret
    60ac:	nop
	...

00000000000060b8 <HUF_decompress4X_DCtx>:
    60b8:	cbz	x2, 617c <HUF_decompress4X_DCtx+0xc4>
    60bc:	stp	x29, x30, [sp, #-64]!
    60c0:	mov	x29, sp
    60c4:	stp	x19, x20, [sp, #16]
    60c8:	stp	x21, x22, [sp, #32]
    60cc:	str	x23, [sp, #48]
    60d0:	mov	x23, x0
    60d4:	mov	x21, x1
    60d8:	mov	x19, x2
    60dc:	mov	x22, x3
    60e0:	mov	x20, x4
    60e4:	mov	x0, #0xffffffffffffffec    	// #-20
    60e8:	cmp	x2, x4
    60ec:	b.cc	6124 <HUF_decompress4X_DCtx+0x6c>  // b.lo, b.ul, b.last
    60f0:	b.eq	6138 <HUF_decompress4X_DCtx+0x80>  // b.none
    60f4:	cmp	x4, #0x1
    60f8:	b.eq	614c <HUF_decompress4X_DCtx+0x94>  // b.none
    60fc:	mov	x1, x4
    6100:	mov	x0, x2
    6104:	bl	5f78 <HUF_selectDecoder>
    6108:	cbz	w0, 6160 <HUF_decompress4X_DCtx+0xa8>
    610c:	mov	x4, x20
    6110:	mov	x3, x22
    6114:	mov	x2, x19
    6118:	mov	x1, x21
    611c:	mov	x0, x23
    6120:	bl	5dd0 <HUF_decompress4X2_DCtx>
    6124:	ldp	x19, x20, [sp, #16]
    6128:	ldp	x21, x22, [sp, #32]
    612c:	ldr	x23, [sp, #48]
    6130:	ldp	x29, x30, [sp], #64
    6134:	ret
    6138:	mov	x1, x3
    613c:	mov	x0, x21
    6140:	bl	0 <grub_memmove>
    6144:	mov	x0, x19
    6148:	b	6124 <HUF_decompress4X_DCtx+0x6c>
    614c:	ldrb	w1, [x3]
    6150:	mov	x0, x21
    6154:	bl	0 <grub_memset>
    6158:	mov	x0, x19
    615c:	b	6124 <HUF_decompress4X_DCtx+0x6c>
    6160:	mov	x4, x20
    6164:	mov	x3, x22
    6168:	mov	x2, x19
    616c:	mov	x1, x21
    6170:	mov	x0, x23
    6174:	bl	55a4 <HUF_decompress4X1_DCtx>
    6178:	b	6124 <HUF_decompress4X_DCtx+0x6c>
    617c:	mov	x0, #0xffffffffffffffba    	// #-70
    6180:	ret

0000000000006184 <HUF_decompress4X_hufOnly_wksp>:
    6184:	cbz	x2, 6230 <HUF_decompress4X_hufOnly_wksp+0xac>
    6188:	stp	x29, x30, [sp, #-80]!
    618c:	mov	x29, sp
    6190:	stp	x19, x20, [sp, #16]
    6194:	stp	x21, x22, [sp, #32]
    6198:	stp	x23, x24, [sp, #48]
    619c:	str	x25, [sp, #64]
    61a0:	mov	x21, x0
    61a4:	mov	x22, x1
    61a8:	mov	x19, x2
    61ac:	mov	x23, x3
    61b0:	mov	x20, x4
    61b4:	mov	x24, x5
    61b8:	mov	x25, x6
    61bc:	mov	x0, #0xffffffffffffffec    	// #-20
    61c0:	cbz	x4, 61f4 <HUF_decompress4X_hufOnly_wksp+0x70>
    61c4:	mov	x1, x4
    61c8:	mov	x0, x2
    61cc:	bl	5f78 <HUF_selectDecoder>
    61d0:	cbz	w0, 620c <HUF_decompress4X_hufOnly_wksp+0x88>
    61d4:	mov	x6, x25
    61d8:	mov	x5, x24
    61dc:	mov	x4, x20
    61e0:	mov	x3, x23
    61e4:	mov	x2, x19
    61e8:	mov	x1, x22
    61ec:	mov	x0, x21
    61f0:	bl	5d4c <HUF_decompress4X2_DCtx_wksp>
    61f4:	ldp	x19, x20, [sp, #16]
    61f8:	ldp	x21, x22, [sp, #32]
    61fc:	ldp	x23, x24, [sp, #48]
    6200:	ldr	x25, [sp, #64]
    6204:	ldp	x29, x30, [sp], #80
    6208:	ret
    620c:	mov	x6, x25
    6210:	mov	x5, x24
    6214:	mov	x4, x20
    6218:	mov	x3, x23
    621c:	mov	x2, x19
    6220:	mov	x1, x22
    6224:	mov	x0, x21
    6228:	bl	5520 <HUF_decompress4X1_DCtx_wksp>
    622c:	b	61f4 <HUF_decompress4X_hufOnly_wksp+0x70>
    6230:	mov	x0, #0xffffffffffffffba    	// #-70
    6234:	ret

0000000000006238 <HUF_decompress4X_hufOnly>:
    6238:	sub	sp, sp, #0x810
    623c:	stp	x29, x30, [sp]
    6240:	mov	x29, sp
    6244:	mov	x6, #0x800                 	// #2048
    6248:	add	x5, sp, #0x10
    624c:	bl	6184 <HUF_decompress4X_hufOnly_wksp>
    6250:	ldp	x29, x30, [sp]
    6254:	add	sp, sp, #0x810
    6258:	ret

000000000000625c <HUF_decompress1X_DCtx_wksp>:
    625c:	cbz	x2, 6340 <HUF_decompress1X_DCtx_wksp+0xe4>
    6260:	stp	x29, x30, [sp, #-80]!
    6264:	mov	x29, sp
    6268:	stp	x19, x20, [sp, #16]
    626c:	stp	x21, x22, [sp, #32]
    6270:	stp	x23, x24, [sp, #48]
    6274:	str	x25, [sp, #64]
    6278:	mov	x23, x0
    627c:	mov	x21, x1
    6280:	mov	x19, x2
    6284:	mov	x22, x3
    6288:	mov	x20, x4
    628c:	mov	x24, x5
    6290:	mov	x25, x6
    6294:	mov	x0, #0xffffffffffffffec    	// #-20
    6298:	cmp	x2, x4
    629c:	b.cc	62dc <HUF_decompress1X_DCtx_wksp+0x80>  // b.lo, b.ul, b.last
    62a0:	b.eq	62f4 <HUF_decompress1X_DCtx_wksp+0x98>  // b.none
    62a4:	cmp	x4, #0x1
    62a8:	b.eq	6308 <HUF_decompress1X_DCtx_wksp+0xac>  // b.none
    62ac:	mov	x1, x4
    62b0:	mov	x0, x2
    62b4:	bl	5f78 <HUF_selectDecoder>
    62b8:	cbz	w0, 631c <HUF_decompress1X_DCtx_wksp+0xc0>
    62bc:	mov	x6, x25
    62c0:	mov	x5, x24
    62c4:	mov	x4, x20
    62c8:	mov	x3, x22
    62cc:	mov	x2, x19
    62d0:	mov	x1, x21
    62d4:	mov	x0, x23
    62d8:	bl	5bbc <HUF_decompress1X2_DCtx_wksp>
    62dc:	ldp	x19, x20, [sp, #16]
    62e0:	ldp	x21, x22, [sp, #32]
    62e4:	ldp	x23, x24, [sp, #48]
    62e8:	ldr	x25, [sp, #64]
    62ec:	ldp	x29, x30, [sp], #80
    62f0:	ret
    62f4:	mov	x1, x3
    62f8:	mov	x0, x21
    62fc:	bl	0 <grub_memmove>
    6300:	mov	x0, x19
    6304:	b	62dc <HUF_decompress1X_DCtx_wksp+0x80>
    6308:	ldrb	w1, [x3]
    630c:	mov	x0, x21
    6310:	bl	0 <grub_memset>
    6314:	mov	x0, x19
    6318:	b	62dc <HUF_decompress1X_DCtx_wksp+0x80>
    631c:	mov	x6, x25
    6320:	mov	x5, x24
    6324:	mov	x4, x20
    6328:	mov	x3, x22
    632c:	mov	x2, x19
    6330:	mov	x1, x21
    6334:	mov	x0, x23
    6338:	bl	5394 <HUF_decompress1X1_DCtx_wksp>
    633c:	b	62dc <HUF_decompress1X_DCtx_wksp+0x80>
    6340:	mov	x0, #0xffffffffffffffba    	// #-70
    6344:	ret

0000000000006348 <HUF_decompress1X_DCtx>:
    6348:	sub	sp, sp, #0x810
    634c:	stp	x29, x30, [sp]
    6350:	mov	x29, sp
    6354:	mov	x6, #0x800                 	// #2048
    6358:	add	x5, sp, #0x10
    635c:	bl	625c <HUF_decompress1X_DCtx_wksp>
    6360:	ldp	x29, x30, [sp]
    6364:	add	sp, sp, #0x810
    6368:	ret

000000000000636c <HUF_decompress1X_usingDTable_bmi2>:
    636c:	stp	x29, x30, [sp, #-64]!
    6370:	mov	x29, sp
    6374:	stp	x19, x20, [sp, #16]
    6378:	stp	x21, x22, [sp, #32]
    637c:	stp	x23, x24, [sp, #48]
    6380:	mov	x20, x0
    6384:	mov	x21, x1
    6388:	mov	x22, x2
    638c:	mov	x23, x3
    6390:	mov	x19, x4
    6394:	mov	w24, w5
    6398:	mov	x0, x4
    639c:	bl	1678 <FSE_decompress+0x2c>
    63a0:	tst	x0, #0xff00
    63a4:	b.eq	63d8 <HUF_decompress1X_usingDTable_bmi2+0x6c>  // b.none
    63a8:	mov	w5, w24
    63ac:	mov	x4, x19
    63b0:	mov	x3, x23
    63b4:	mov	x2, x22
    63b8:	mov	x1, x21
    63bc:	mov	x0, x20
    63c0:	bl	380c <FSE_decompress+0x21c0>
    63c4:	ldp	x19, x20, [sp, #16]
    63c8:	ldp	x21, x22, [sp, #32]
    63cc:	ldp	x23, x24, [sp, #48]
    63d0:	ldp	x29, x30, [sp], #64
    63d4:	ret
    63d8:	mov	w5, w24
    63dc:	mov	x4, x19
    63e0:	mov	x3, x23
    63e4:	mov	x2, x22
    63e8:	mov	x1, x21
    63ec:	mov	x0, x20
    63f0:	bl	169c <FSE_decompress+0x50>
    63f4:	b	63c4 <HUF_decompress1X_usingDTable_bmi2+0x58>

00000000000063f8 <HUF_decompress1X1_DCtx_wksp_bmi2>:
    63f8:	stp	x29, x30, [sp, #-64]!
    63fc:	mov	x29, sp
    6400:	stp	x19, x20, [sp, #16]
    6404:	stp	x21, x22, [sp, #32]
    6408:	stp	x23, x24, [sp, #48]
    640c:	mov	x23, x0
    6410:	mov	x21, x1
    6414:	mov	x22, x2
    6418:	mov	x20, x3
    641c:	mov	x19, x4
    6420:	mov	x3, x5
    6424:	mov	x4, x6
    6428:	mov	w24, w7
    642c:	mov	x2, x19
    6430:	mov	x1, x20
    6434:	bl	5178 <HUF_readDTableX1_wksp>
    6438:	cmn	x0, #0x78
    643c:	b.hi	6464 <HUF_decompress1X1_DCtx_wksp_bmi2+0x6c>  // b.pmore
    6440:	cmp	x19, x0
    6444:	b.ls	6478 <HUF_decompress1X1_DCtx_wksp_bmi2+0x80>  // b.plast
    6448:	mov	w5, w24
    644c:	mov	x4, x23
    6450:	sub	x3, x19, x0
    6454:	add	x2, x20, x0
    6458:	mov	x1, x22
    645c:	mov	x0, x21
    6460:	bl	169c <FSE_decompress+0x50>
    6464:	ldp	x19, x20, [sp, #16]
    6468:	ldp	x21, x22, [sp, #32]
    646c:	ldp	x23, x24, [sp, #48]
    6470:	ldp	x29, x30, [sp], #64
    6474:	ret
    6478:	mov	x0, #0xffffffffffffffb8    	// #-72
    647c:	b	6464 <HUF_decompress1X1_DCtx_wksp_bmi2+0x6c>

0000000000006480 <HUF_decompress4X_usingDTable_bmi2>:
    6480:	stp	x29, x30, [sp, #-64]!
    6484:	mov	x29, sp
    6488:	stp	x19, x20, [sp, #16]
    648c:	stp	x21, x22, [sp, #32]
    6490:	stp	x23, x24, [sp, #48]
    6494:	mov	x20, x0
    6498:	mov	x21, x1
    649c:	mov	x22, x2
    64a0:	mov	x23, x3
    64a4:	mov	x19, x4
    64a8:	mov	w24, w5
    64ac:	mov	x0, x4
    64b0:	bl	1678 <FSE_decompress+0x2c>
    64b4:	tst	x0, #0xff00
    64b8:	b.eq	64ec <HUF_decompress4X_usingDTable_bmi2+0x6c>  // b.none
    64bc:	mov	w5, w24
    64c0:	mov	x4, x19
    64c4:	mov	x3, x23
    64c8:	mov	x2, x22
    64cc:	mov	x1, x21
    64d0:	mov	x0, x20
    64d4:	bl	19cc <FSE_decompress+0x380>
    64d8:	ldp	x19, x20, [sp, #16]
    64dc:	ldp	x21, x22, [sp, #32]
    64e0:	ldp	x23, x24, [sp, #48]
    64e4:	ldp	x29, x30, [sp], #64
    64e8:	ret
    64ec:	mov	w5, w24
    64f0:	mov	x4, x19
    64f4:	mov	x3, x23
    64f8:	mov	x2, x22
    64fc:	mov	x1, x21
    6500:	mov	x0, x20
    6504:	bl	3d5c <FSE_decompress+0x2710>
    6508:	b	64d8 <HUF_decompress4X_usingDTable_bmi2+0x58>

000000000000650c <HUF_decompress4X_hufOnly_wksp_bmi2>:
    650c:	cbz	x2, 6604 <HUF_decompress4X_hufOnly_wksp_bmi2+0xf8>
    6510:	stp	x29, x30, [sp, #-80]!
    6514:	mov	x29, sp
    6518:	stp	x19, x20, [sp, #16]
    651c:	stp	x21, x22, [sp, #32]
    6520:	stp	x23, x24, [sp, #48]
    6524:	stp	x25, x26, [sp, #64]
    6528:	mov	x22, x0
    652c:	mov	x24, x1
    6530:	mov	x20, x2
    6534:	mov	x21, x3
    6538:	mov	x19, x4
    653c:	mov	x23, x5
    6540:	mov	x26, x6
    6544:	mov	w25, w7
    6548:	mov	x0, #0xffffffffffffffec    	// #-20
    654c:	cbz	x4, 65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>
    6550:	mov	x1, x4
    6554:	mov	x0, x2
    6558:	bl	5f78 <HUF_selectDecoder>
    655c:	cbz	w0, 65bc <HUF_decompress4X_hufOnly_wksp_bmi2+0xb0>
    6560:	mov	x4, x26
    6564:	mov	x3, x23
    6568:	mov	x2, x19
    656c:	mov	x1, x21
    6570:	mov	x0, x22
    6574:	bl	563c <HUF_readDTableX2_wksp>
    6578:	cmn	x0, #0x78
    657c:	b.hi	65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>  // b.pmore
    6580:	cmp	x19, x0
    6584:	b.ls	660c <HUF_decompress4X_hufOnly_wksp_bmi2+0x100>  // b.plast
    6588:	mov	w5, w25
    658c:	mov	x4, x22
    6590:	sub	x3, x19, x0
    6594:	add	x2, x21, x0
    6598:	mov	x1, x20
    659c:	mov	x0, x24
    65a0:	bl	19cc <FSE_decompress+0x380>
    65a4:	ldp	x19, x20, [sp, #16]
    65a8:	ldp	x21, x22, [sp, #32]
    65ac:	ldp	x23, x24, [sp, #48]
    65b0:	ldp	x25, x26, [sp, #64]
    65b4:	ldp	x29, x30, [sp], #80
    65b8:	ret
    65bc:	mov	x4, x26
    65c0:	mov	x3, x23
    65c4:	mov	x2, x19
    65c8:	mov	x1, x21
    65cc:	mov	x0, x22
    65d0:	bl	5178 <HUF_readDTableX1_wksp>
    65d4:	cmn	x0, #0x78
    65d8:	b.hi	65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>  // b.pmore
    65dc:	cmp	x19, x0
    65e0:	b.ls	6614 <HUF_decompress4X_hufOnly_wksp_bmi2+0x108>  // b.plast
    65e4:	mov	w5, w25
    65e8:	mov	x4, x22
    65ec:	sub	x3, x19, x0
    65f0:	add	x2, x21, x0
    65f4:	mov	x1, x20
    65f8:	mov	x0, x24
    65fc:	bl	3d5c <FSE_decompress+0x2710>
    6600:	b	65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>
    6604:	mov	x0, #0xffffffffffffffba    	// #-70
    6608:	ret
    660c:	mov	x0, #0xffffffffffffffb8    	// #-72
    6610:	b	65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>
    6614:	mov	x0, #0xffffffffffffffb8    	// #-72
    6618:	b	65a4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x98>
    661c:	mov	x2, #0xeb4f                	// #60239
    6620:	movk	x2, #0x27d4, lsl #16
    6624:	movk	x2, #0xae3d, lsl #32
    6628:	movk	x2, #0xc2b2, lsl #48
    662c:	mul	x1, x1, x2
    6630:	ror	x1, x1, #33
    6634:	mov	x2, #0xca87                	// #51847
    6638:	movk	x2, #0x85eb, lsl #16
    663c:	movk	x2, #0x79b1, lsl #32
    6640:	movk	x2, #0x9e37, lsl #48
    6644:	mul	x1, x1, x2
    6648:	eor	x1, x1, x0
    664c:	mov	x0, #0xae63                	// #44643
    6650:	movk	x0, #0xc2b2, lsl #16
    6654:	movk	x0, #0xca77, lsl #32
    6658:	movk	x0, #0x85eb, lsl #48
    665c:	madd	x0, x1, x2, x0
    6660:	ret
    6664:	stp	x29, x30, [sp, #-32]!
    6668:	mov	x29, sp
    666c:	mov	x2, #0x4                   	// #4
    6670:	mov	x1, x0
    6674:	add	x0, sp, #0x1c
    6678:	bl	0 <grub_memmove>
    667c:	ldr	w0, [sp, #28]
    6680:	ldp	x29, x30, [sp], #32
    6684:	ret
    6688:	stp	x29, x30, [sp, #-32]!
    668c:	mov	x29, sp
    6690:	mov	x2, #0x8                   	// #8
    6694:	mov	x1, x0
    6698:	add	x0, sp, #0x18
    669c:	bl	0 <grub_memmove>
    66a0:	ldr	x0, [sp, #24]
    66a4:	ldp	x29, x30, [sp], #32
    66a8:	ret

00000000000066ac <XXH_versionNumber>:
    66ac:	mov	w0, #0x25a                 	// #602
    66b0:	ret

00000000000066b4 <XXH32_copyState>:
    66b4:	stp	x29, x30, [sp, #-16]!
    66b8:	mov	x29, sp
    66bc:	mov	x2, #0x30                  	// #48
    66c0:	bl	0 <grub_memmove>
    66c4:	ldp	x29, x30, [sp], #16
    66c8:	ret

00000000000066cc <XXH64_copyState>:
    66cc:	stp	x29, x30, [sp, #-16]!
    66d0:	mov	x29, sp
    66d4:	mov	x2, #0x58                  	// #88
    66d8:	bl	0 <grub_memmove>
    66dc:	ldp	x29, x30, [sp], #16
    66e0:	ret

00000000000066e4 <XXH32>:
    66e4:	stp	x29, x30, [sp, #-112]!
    66e8:	mov	x29, sp
    66ec:	stp	x19, x20, [sp, #16]
    66f0:	stp	x25, x26, [sp, #64]
    66f4:	mov	x19, x0
    66f8:	mov	x25, x1
    66fc:	mov	w20, w2
    6700:	str	x0, [sp, #104]
    6704:	tst	x0, #0x3
    6708:	b.ne	68a4 <XXH32+0x1c0>  // b.any
    670c:	add	x6, x0, x1
    6710:	cmp	x1, #0xf
    6714:	b.ls	6894 <XXH32+0x1b0>  // b.plast
    6718:	sub	x10, x6, #0x10
    671c:	mov	w0, #0x4428                	// #17448
    6720:	movk	w0, #0x2423, lsl #16
    6724:	add	w0, w2, w0
    6728:	mov	w3, #0xca77                	// #51831
    672c:	movk	w3, #0x85eb, lsl #16
    6730:	add	w9, w2, w3
    6734:	mov	w2, #0x864f                	// #34383
    6738:	movk	w2, #0x61c8, lsl #16
    673c:	add	w8, w20, w2
    6740:	mov	x1, x19
    6744:	mov	w7, w3
    6748:	mov	w5, #0x79b1                	// #31153
    674c:	movk	w5, #0x9e37, lsl #16
    6750:	ldr	w4, [x1]
    6754:	madd	w0, w4, w7, w0
    6758:	ror	w0, w0, #19
    675c:	mul	w0, w0, w5
    6760:	ldr	w3, [x1, #4]
    6764:	madd	w3, w3, w7, w9
    6768:	ror	w3, w3, #19
    676c:	mul	w9, w3, w5
    6770:	ldr	w3, [x1, #8]
    6774:	madd	w20, w3, w7, w20
    6778:	ror	w20, w20, #19
    677c:	mul	w20, w20, w5
    6780:	ldr	w2, [x1, #12]
    6784:	madd	w2, w2, w7, w8
    6788:	ror	w2, w2, #19
    678c:	mul	w8, w2, w5
    6790:	add	x1, x1, #0x10
    6794:	cmp	x10, x1
    6798:	b.cs	6750 <XXH32+0x6c>  // b.hs, b.nlast
    679c:	sub	x1, x25, #0x10
    67a0:	and	x1, x1, #0xfffffffffffffff0
    67a4:	add	x1, x1, #0x10
    67a8:	ldr	x2, [sp, #104]
    67ac:	add	x3, x2, #0x1
    67b0:	sub	x2, x6, #0xf
    67b4:	cmp	x3, x2
    67b8:	mov	x2, #0x10                  	// #16
    67bc:	csel	x1, x1, x2, ls  // ls = plast
    67c0:	add	x19, x19, x1
    67c4:	ror	w0, w0, #31
    67c8:	ror	w3, w9, #25
    67cc:	add	w0, w0, w3
    67d0:	ror	w20, w20, #20
    67d4:	ror	w2, w8, #14
    67d8:	add	w20, w20, w2
    67dc:	add	w20, w0, w20
    67e0:	add	w25, w20, w25
    67e4:	add	x3, x19, #0x4
    67e8:	cmp	x6, x3
    67ec:	b.cc	6830 <XXH32+0x14c>  // b.lo, b.ul, b.last
    67f0:	mov	x0, x3
    67f4:	mov	w2, #0xae3d                	// #44605
    67f8:	movk	w2, #0xc2b2, lsl #16
    67fc:	mov	w1, #0xeb2f                	// #60207
    6800:	movk	w1, #0x27d4, lsl #16
    6804:	ldur	w20, [x0, #-4]
    6808:	madd	w25, w20, w2, w25
    680c:	ror	w25, w25, #15
    6810:	mul	w25, w25, w1
    6814:	add	x0, x0, #0x4
    6818:	cmp	x6, x0
    681c:	b.cs	6804 <XXH32+0x120>  // b.hs, b.nlast
    6820:	sub	x0, x6, #0x4
    6824:	sub	x19, x0, x19
    6828:	and	x19, x19, #0xfffffffffffffffc
    682c:	add	x19, x3, x19
    6830:	cmp	x6, x19
    6834:	b.ls	6860 <XXH32+0x17c>  // b.plast
    6838:	mov	w1, #0x67b1                	// #26545
    683c:	movk	w1, #0x1656, lsl #16
    6840:	mov	w0, #0x79b1                	// #31153
    6844:	movk	w0, #0x9e37, lsl #16
    6848:	ldrb	w20, [x19], #1
    684c:	madd	w25, w20, w1, w25
    6850:	ror	w25, w25, #21
    6854:	mul	w25, w25, w0
    6858:	cmp	x6, x19
    685c:	b.ne	6848 <XXH32+0x164>  // b.any
    6860:	eor	w25, w25, w25, lsr #15
    6864:	mov	w0, #0xca77                	// #51831
    6868:	movk	w0, #0x85eb, lsl #16
    686c:	mul	w0, w25, w0
    6870:	eor	w0, w0, w0, lsr #13
    6874:	mov	w1, #0xae3d                	// #44605
    6878:	movk	w1, #0xc2b2, lsl #16
    687c:	mul	w0, w0, w1
    6880:	eor	w0, w0, w0, lsr #16
    6884:	ldp	x19, x20, [sp, #16]
    6888:	ldp	x25, x26, [sp, #64]
    688c:	ldp	x29, x30, [sp], #112
    6890:	ret
    6894:	mov	w0, #0x67b1                	// #26545
    6898:	movk	w0, #0x1656, lsl #16
    689c:	add	w20, w2, w0
    68a0:	b	67e0 <XXH32+0xfc>
    68a4:	stp	x21, x22, [sp, #32]
    68a8:	stp	x23, x24, [sp, #48]
    68ac:	stp	x27, x28, [sp, #80]
    68b0:	add	x28, x0, x1
    68b4:	cmp	x1, #0xf
    68b8:	b.ls	6a60 <XXH32+0x37c>  // b.plast
    68bc:	sub	x0, x28, #0x10
    68c0:	str	x0, [sp, #96]
    68c4:	mov	w24, #0x4428                	// #17448
    68c8:	movk	w24, #0x2423, lsl #16
    68cc:	add	w24, w2, w24
    68d0:	mov	w27, #0xca77                	// #51831
    68d4:	movk	w27, #0x85eb, lsl #16
    68d8:	add	w27, w2, w27
    68dc:	mov	w26, #0x864f                	// #34383
    68e0:	movk	w26, #0x61c8, lsl #16
    68e4:	add	w26, w2, w26
    68e8:	mov	x21, x19
    68ec:	mov	w23, #0xca77                	// #51831
    68f0:	movk	w23, #0x85eb, lsl #16
    68f4:	mov	w22, #0x79b1                	// #31153
    68f8:	movk	w22, #0x9e37, lsl #16
    68fc:	mov	x0, x21
    6900:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    6904:	madd	w24, w0, w23, w24
    6908:	ror	w24, w24, #19
    690c:	mul	w24, w24, w22
    6910:	add	x0, x21, #0x4
    6914:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    6918:	madd	w27, w0, w23, w27
    691c:	ror	w27, w27, #19
    6920:	mul	w27, w27, w22
    6924:	add	x0, x21, #0x8
    6928:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    692c:	madd	w20, w0, w23, w20
    6930:	ror	w20, w20, #19
    6934:	mul	w20, w20, w22
    6938:	add	x0, x21, #0xc
    693c:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    6940:	madd	w26, w0, w23, w26
    6944:	ror	w26, w26, #19
    6948:	mul	w26, w26, w22
    694c:	add	x21, x21, #0x10
    6950:	ldr	x0, [sp, #96]
    6954:	cmp	x0, x21
    6958:	b.cs	68fc <XXH32+0x218>  // b.hs, b.nlast
    695c:	sub	x0, x25, #0x10
    6960:	and	x0, x0, #0xfffffffffffffff0
    6964:	add	x0, x0, #0x10
    6968:	ldr	x1, [sp, #104]
    696c:	add	x1, x1, #0x1
    6970:	sub	x2, x28, #0xf
    6974:	cmp	x1, x2
    6978:	mov	x1, #0x10                  	// #16
    697c:	csel	x0, x0, x1, ls  // ls = plast
    6980:	add	x19, x19, x0
    6984:	ror	w24, w24, #31
    6988:	ror	w27, w27, #25
    698c:	add	w24, w24, w27
    6990:	ror	w20, w20, #20
    6994:	ror	w26, w26, #14
    6998:	add	w20, w20, w26
    699c:	add	w20, w24, w20
    69a0:	add	w25, w20, w25
    69a4:	add	x24, x19, #0x4
    69a8:	cmp	x28, x24
    69ac:	b.cc	69fc <XXH32+0x318>  // b.lo, b.ul, b.last
    69b0:	mov	x21, x19
    69b4:	sub	x23, x28, #0x4
    69b8:	sub	x23, x23, x19
    69bc:	and	x0, x23, #0xfffffffffffffffc
    69c0:	add	x19, x0, x24
    69c4:	mov	w26, #0xae3d                	// #44605
    69c8:	movk	w26, #0xc2b2, lsl #16
    69cc:	mov	w22, #0xeb2f                	// #60207
    69d0:	movk	w22, #0x27d4, lsl #16
    69d4:	mov	x0, x21
    69d8:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    69dc:	madd	w25, w0, w26, w25
    69e0:	ror	w25, w25, #15
    69e4:	mul	w25, w25, w22
    69e8:	add	x21, x21, #0x4
    69ec:	cmp	x21, x19
    69f0:	b.ne	69d4 <XXH32+0x2f0>  // b.any
    69f4:	and	x19, x23, #0xfffffffffffffffc
    69f8:	add	x19, x24, x19
    69fc:	cmp	x28, x19
    6a00:	b.ls	6a2c <XXH32+0x348>  // b.plast
    6a04:	mov	w1, #0x67b1                	// #26545
    6a08:	movk	w1, #0x1656, lsl #16
    6a0c:	mov	w0, #0x79b1                	// #31153
    6a10:	movk	w0, #0x9e37, lsl #16
    6a14:	ldrb	w20, [x19], #1
    6a18:	madd	w25, w20, w1, w25
    6a1c:	ror	w25, w25, #21
    6a20:	mul	w25, w25, w0
    6a24:	cmp	x28, x19
    6a28:	b.ne	6a14 <XXH32+0x330>  // b.any
    6a2c:	eor	w25, w25, w25, lsr #15
    6a30:	mov	w0, #0xca77                	// #51831
    6a34:	movk	w0, #0x85eb, lsl #16
    6a38:	mul	w0, w25, w0
    6a3c:	eor	w0, w0, w0, lsr #13
    6a40:	mov	w1, #0xae3d                	// #44605
    6a44:	movk	w1, #0xc2b2, lsl #16
    6a48:	mul	w0, w0, w1
    6a4c:	eor	w0, w0, w0, lsr #16
    6a50:	ldp	x21, x22, [sp, #32]
    6a54:	ldp	x23, x24, [sp, #48]
    6a58:	ldp	x27, x28, [sp, #80]
    6a5c:	b	6884 <XXH32+0x1a0>
    6a60:	mov	w0, #0x67b1                	// #26545
    6a64:	movk	w0, #0x1656, lsl #16
    6a68:	add	w20, w2, w0
    6a6c:	b	69a0 <XXH32+0x2bc>

0000000000006a70 <XXH64>:
    6a70:	stp	x29, x30, [sp, #-112]!
    6a74:	mov	x29, sp
    6a78:	stp	x19, x20, [sp, #16]
    6a7c:	stp	x21, x22, [sp, #32]
    6a80:	stp	x25, x26, [sp, #64]
    6a84:	mov	x19, x0
    6a88:	mov	x25, x1
    6a8c:	mov	x20, x2
    6a90:	str	x0, [sp, #104]
    6a94:	tst	x0, #0x7
    6a98:	b.ne	6d30 <XXH64+0x2c0>  // b.any
    6a9c:	add	x21, x0, x1
    6aa0:	cmp	x1, #0x1f
    6aa4:	b.ls	6d18 <XXH64+0x2a8>  // b.plast
    6aa8:	stp	x23, x24, [sp, #48]
    6aac:	sub	x5, x21, #0x20
    6ab0:	mov	x1, #0xb5d6                	// #46550
    6ab4:	movk	x1, #0xadc0, lsl #16
    6ab8:	movk	x1, #0x27ee, lsl #32
    6abc:	movk	x1, #0x60ea, lsl #48
    6ac0:	add	x1, x2, x1
    6ac4:	mov	x22, #0xeb4f                	// #60239
    6ac8:	movk	x22, #0x27d4, lsl #16
    6acc:	movk	x22, #0xae3d, lsl #32
    6ad0:	movk	x22, #0xc2b2, lsl #48
    6ad4:	add	x22, x2, x22
    6ad8:	mov	x2, #0x3579                	// #13689
    6adc:	movk	x2, #0x7a14, lsl #16
    6ae0:	movk	x2, #0x864e, lsl #32
    6ae4:	movk	x2, #0x61c8, lsl #48
    6ae8:	add	x23, x20, x2
    6aec:	mov	x4, #0xeb4f                	// #60239
    6af0:	movk	x4, #0x27d4, lsl #16
    6af4:	movk	x4, #0xae3d, lsl #32
    6af8:	movk	x4, #0xc2b2, lsl #48
    6afc:	mov	x3, #0xca87                	// #51847
    6b00:	movk	x3, #0x85eb, lsl #16
    6b04:	movk	x3, #0x79b1, lsl #32
    6b08:	movk	x3, #0x9e37, lsl #48
    6b0c:	ldr	x2, [x0]
    6b10:	madd	x1, x2, x4, x1
    6b14:	ror	x1, x1, #33
    6b18:	mul	x1, x1, x3
    6b1c:	ldr	x2, [x0, #8]
    6b20:	madd	x22, x2, x4, x22
    6b24:	ror	x22, x22, #33
    6b28:	mul	x22, x22, x3
    6b2c:	ldr	x2, [x0, #16]
    6b30:	madd	x20, x2, x4, x20
    6b34:	ror	x20, x20, #33
    6b38:	mul	x20, x20, x3
    6b3c:	ldr	x2, [x0, #24]
    6b40:	madd	x2, x2, x4, x23
    6b44:	ror	x2, x2, #33
    6b48:	mul	x23, x2, x3
    6b4c:	add	x0, x0, #0x20
    6b50:	cmp	x5, x0
    6b54:	b.cs	6b0c <XXH64+0x9c>  // b.hs, b.nlast
    6b58:	sub	x0, x25, #0x20
    6b5c:	and	x0, x0, #0xffffffffffffffe0
    6b60:	add	x0, x0, #0x20
    6b64:	ldr	x2, [sp, #104]
    6b68:	add	x3, x2, #0x1
    6b6c:	sub	x2, x21, #0x1f
    6b70:	cmp	x3, x2
    6b74:	mov	x2, #0x20                  	// #32
    6b78:	csel	x0, x0, x2, ls  // ls = plast
    6b7c:	add	x19, x19, x0
    6b80:	ror	x2, x1, #63
    6b84:	ror	x0, x22, #57
    6b88:	add	x2, x2, x0
    6b8c:	ror	x0, x20, #52
    6b90:	ror	x3, x23, #46
    6b94:	add	x0, x0, x3
    6b98:	add	x0, x2, x0
    6b9c:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6ba0:	mov	x1, x22
    6ba4:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6ba8:	mov	x1, x20
    6bac:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6bb0:	mov	x1, x23
    6bb4:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6bb8:	ldp	x23, x24, [sp, #48]
    6bbc:	add	x1, x25, x0
    6bc0:	add	x5, x19, #0x8
    6bc4:	cmp	x21, x5
    6bc8:	b.cc	6c38 <XXH64+0x1c8>  // b.lo, b.ul, b.last
    6bcc:	mov	x0, x5
    6bd0:	mov	x4, #0xeb4f                	// #60239
    6bd4:	movk	x4, #0x27d4, lsl #16
    6bd8:	movk	x4, #0xae3d, lsl #32
    6bdc:	movk	x4, #0xc2b2, lsl #48
    6be0:	mov	x2, #0xca87                	// #51847
    6be4:	movk	x2, #0x85eb, lsl #16
    6be8:	movk	x2, #0x79b1, lsl #32
    6bec:	movk	x2, #0x9e37, lsl #48
    6bf0:	mov	x3, #0xae63                	// #44643
    6bf4:	movk	x3, #0xc2b2, lsl #16
    6bf8:	movk	x3, #0xca77, lsl #32
    6bfc:	movk	x3, #0x85eb, lsl #48
    6c00:	ldur	x25, [x0, #-8]
    6c04:	mul	x25, x25, x4
    6c08:	ror	x25, x25, #33
    6c0c:	mul	x25, x25, x2
    6c10:	eor	x25, x25, x1
    6c14:	ror	x25, x25, #37
    6c18:	madd	x1, x25, x2, x3
    6c1c:	add	x0, x0, #0x8
    6c20:	cmp	x21, x0
    6c24:	b.cs	6c00 <XXH64+0x190>  // b.hs, b.nlast
    6c28:	sub	x0, x21, #0x8
    6c2c:	sub	x19, x0, x19
    6c30:	and	x19, x19, #0xfffffffffffffff8
    6c34:	add	x19, x5, x19
    6c38:	add	x0, x19, #0x4
    6c3c:	cmp	x21, x0
    6c40:	b.cc	6c8c <XXH64+0x21c>  // b.lo, b.ul, b.last
    6c44:	ldr	w25, [x19]
    6c48:	mov	x2, #0xca87                	// #51847
    6c4c:	movk	x2, #0x85eb, lsl #16
    6c50:	movk	x2, #0x79b1, lsl #32
    6c54:	movk	x2, #0x9e37, lsl #48
    6c58:	mul	x25, x25, x2
    6c5c:	eor	x1, x25, x1
    6c60:	ror	x1, x1, #41
    6c64:	mov	x25, #0xeb4f                	// #60239
    6c68:	movk	x25, #0x27d4, lsl #16
    6c6c:	movk	x25, #0xae3d, lsl #32
    6c70:	movk	x25, #0xc2b2, lsl #48
    6c74:	mov	x20, #0x79f9                	// #31225
    6c78:	movk	x20, #0x9e37, lsl #16
    6c7c:	movk	x20, #0x67b1, lsl #32
    6c80:	movk	x20, #0x1656, lsl #48
    6c84:	madd	x1, x1, x25, x20
    6c88:	mov	x19, x0
    6c8c:	cmp	x21, x19
    6c90:	b.ls	6cd0 <XXH64+0x260>  // b.plast
    6c94:	mov	x2, #0x67c5                	// #26565
    6c98:	movk	x2, #0x1656, lsl #16
    6c9c:	movk	x2, #0xeb2f, lsl #32
    6ca0:	movk	x2, #0x27d4, lsl #48
    6ca4:	mov	x0, #0xca87                	// #51847
    6ca8:	movk	x0, #0x85eb, lsl #16
    6cac:	movk	x0, #0x79b1, lsl #32
    6cb0:	movk	x0, #0x9e37, lsl #48
    6cb4:	ldrb	w25, [x19], #1
    6cb8:	mul	x25, x25, x2
    6cbc:	eor	x25, x25, x1
    6cc0:	ror	x25, x25, #53
    6cc4:	mul	x1, x25, x0
    6cc8:	cmp	x21, x19
    6ccc:	b.ne	6cb4 <XXH64+0x244>  // b.any
    6cd0:	eor	x25, x1, x1, lsr #33
    6cd4:	mov	x0, #0xeb4f                	// #60239
    6cd8:	movk	x0, #0x27d4, lsl #16
    6cdc:	movk	x0, #0xae3d, lsl #32
    6ce0:	movk	x0, #0xc2b2, lsl #48
    6ce4:	mul	x0, x25, x0
    6ce8:	eor	x0, x0, x0, lsr #29
    6cec:	mov	x1, #0x79f9                	// #31225
    6cf0:	movk	x1, #0x9e37, lsl #16
    6cf4:	movk	x1, #0x67b1, lsl #32
    6cf8:	movk	x1, #0x1656, lsl #48
    6cfc:	mul	x0, x0, x1
    6d00:	eor	x0, x0, x0, lsr #32
    6d04:	ldp	x19, x20, [sp, #16]
    6d08:	ldp	x21, x22, [sp, #32]
    6d0c:	ldp	x25, x26, [sp, #64]
    6d10:	ldp	x29, x30, [sp], #112
    6d14:	ret
    6d18:	mov	x0, #0x67c5                	// #26565
    6d1c:	movk	x0, #0x1656, lsl #16
    6d20:	movk	x0, #0xeb2f, lsl #32
    6d24:	movk	x0, #0x27d4, lsl #48
    6d28:	add	x0, x2, x0
    6d2c:	b	6bbc <XXH64+0x14c>
    6d30:	stp	x23, x24, [sp, #48]
    6d34:	stp	x27, x28, [sp, #80]
    6d38:	add	x24, x0, x1
    6d3c:	cmp	x1, #0x1f
    6d40:	b.ls	6fd8 <XXH64+0x568>  // b.plast
    6d44:	sub	x0, x24, #0x20
    6d48:	str	x0, [sp, #96]
    6d4c:	mov	x28, #0xb5d6                	// #46550
    6d50:	movk	x28, #0xadc0, lsl #16
    6d54:	movk	x28, #0x27ee, lsl #32
    6d58:	movk	x28, #0x60ea, lsl #48
    6d5c:	add	x28, x2, x28
    6d60:	mov	x27, #0xeb4f                	// #60239
    6d64:	movk	x27, #0x27d4, lsl #16
    6d68:	movk	x27, #0xae3d, lsl #32
    6d6c:	movk	x27, #0xc2b2, lsl #48
    6d70:	add	x27, x2, x27
    6d74:	mov	x26, #0x3579                	// #13689
    6d78:	movk	x26, #0x7a14, lsl #16
    6d7c:	movk	x26, #0x864e, lsl #32
    6d80:	movk	x26, #0x61c8, lsl #48
    6d84:	add	x26, x2, x26
    6d88:	mov	x21, x19
    6d8c:	mov	x23, #0xeb4f                	// #60239
    6d90:	movk	x23, #0x27d4, lsl #16
    6d94:	movk	x23, #0xae3d, lsl #32
    6d98:	movk	x23, #0xc2b2, lsl #48
    6d9c:	mov	x22, #0xca87                	// #51847
    6da0:	movk	x22, #0x85eb, lsl #16
    6da4:	movk	x22, #0x79b1, lsl #32
    6da8:	movk	x22, #0x9e37, lsl #48
    6dac:	mov	x0, x21
    6db0:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    6db4:	madd	x28, x0, x23, x28
    6db8:	ror	x28, x28, #33
    6dbc:	mul	x28, x28, x22
    6dc0:	add	x0, x21, #0x8
    6dc4:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    6dc8:	madd	x27, x0, x23, x27
    6dcc:	ror	x27, x27, #33
    6dd0:	mul	x27, x27, x22
    6dd4:	add	x0, x21, #0x10
    6dd8:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    6ddc:	madd	x20, x0, x23, x20
    6de0:	ror	x20, x20, #33
    6de4:	mul	x20, x20, x22
    6de8:	add	x0, x21, #0x18
    6dec:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    6df0:	madd	x26, x0, x23, x26
    6df4:	ror	x26, x26, #33
    6df8:	mul	x26, x26, x22
    6dfc:	add	x21, x21, #0x20
    6e00:	ldr	x0, [sp, #96]
    6e04:	cmp	x0, x21
    6e08:	b.cs	6dac <XXH64+0x33c>  // b.hs, b.nlast
    6e0c:	sub	x0, x25, #0x20
    6e10:	and	x0, x0, #0xffffffffffffffe0
    6e14:	add	x0, x0, #0x20
    6e18:	ldr	x1, [sp, #104]
    6e1c:	add	x1, x1, #0x1
    6e20:	sub	x2, x24, #0x1f
    6e24:	cmp	x1, x2
    6e28:	mov	x1, #0x20                  	// #32
    6e2c:	csel	x0, x0, x1, ls  // ls = plast
    6e30:	add	x19, x19, x0
    6e34:	ror	x2, x28, #63
    6e38:	ror	x0, x27, #57
    6e3c:	add	x2, x2, x0
    6e40:	ror	x0, x20, #52
    6e44:	ror	x1, x26, #46
    6e48:	add	x0, x0, x1
    6e4c:	mov	x1, x28
    6e50:	add	x0, x2, x0
    6e54:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6e58:	mov	x1, x27
    6e5c:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6e60:	mov	x1, x20
    6e64:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6e68:	mov	x1, x26
    6e6c:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    6e70:	add	x20, x25, x0
    6e74:	add	x27, x19, #0x8
    6e78:	cmp	x24, x27
    6e7c:	b.cc	6ef8 <XXH64+0x488>  // b.lo, b.ul, b.last
    6e80:	mov	x21, x19
    6e84:	sub	x26, x24, #0x8
    6e88:	sub	x26, x26, x19
    6e8c:	and	x0, x26, #0xfffffffffffffff8
    6e90:	add	x19, x0, x27
    6e94:	mov	x28, #0xeb4f                	// #60239
    6e98:	movk	x28, #0x27d4, lsl #16
    6e9c:	movk	x28, #0xae3d, lsl #32
    6ea0:	movk	x28, #0xc2b2, lsl #48
    6ea4:	mov	x22, #0xca87                	// #51847
    6ea8:	movk	x22, #0x85eb, lsl #16
    6eac:	movk	x22, #0x79b1, lsl #32
    6eb0:	movk	x22, #0x9e37, lsl #48
    6eb4:	mov	x23, #0xae63                	// #44643
    6eb8:	movk	x23, #0xc2b2, lsl #16
    6ebc:	movk	x23, #0xca77, lsl #32
    6ec0:	movk	x23, #0x85eb, lsl #48
    6ec4:	mov	x0, x21
    6ec8:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    6ecc:	mul	x25, x0, x28
    6ed0:	ror	x25, x25, #33
    6ed4:	mul	x25, x25, x22
    6ed8:	eor	x20, x25, x20
    6edc:	ror	x20, x20, #37
    6ee0:	madd	x20, x20, x22, x23
    6ee4:	add	x21, x21, #0x8
    6ee8:	cmp	x21, x19
    6eec:	b.ne	6ec4 <XXH64+0x454>  // b.any
    6ef0:	and	x19, x26, #0xfffffffffffffff8
    6ef4:	add	x19, x27, x19
    6ef8:	add	x21, x19, #0x4
    6efc:	cmp	x24, x21
    6f00:	b.cc	6f54 <XXH64+0x4e4>  // b.lo, b.ul, b.last
    6f04:	mov	x0, x19
    6f08:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    6f0c:	mov	w0, w0
    6f10:	mov	x1, #0xca87                	// #51847
    6f14:	movk	x1, #0x85eb, lsl #16
    6f18:	movk	x1, #0x79b1, lsl #32
    6f1c:	movk	x1, #0x9e37, lsl #48
    6f20:	mul	x0, x0, x1
    6f24:	eor	x20, x0, x20
    6f28:	ror	x0, x20, #41
    6f2c:	mov	x20, #0xeb4f                	// #60239
    6f30:	movk	x20, #0x27d4, lsl #16
    6f34:	movk	x20, #0xae3d, lsl #32
    6f38:	movk	x20, #0xc2b2, lsl #48
    6f3c:	mov	x1, #0x79f9                	// #31225
    6f40:	movk	x1, #0x9e37, lsl #16
    6f44:	movk	x1, #0x67b1, lsl #32
    6f48:	movk	x1, #0x1656, lsl #48
    6f4c:	madd	x20, x0, x20, x1
    6f50:	mov	x19, x21
    6f54:	cmp	x24, x19
    6f58:	b.ls	6f98 <XXH64+0x528>  // b.plast
    6f5c:	mov	x1, #0x67c5                	// #26565
    6f60:	movk	x1, #0x1656, lsl #16
    6f64:	movk	x1, #0xeb2f, lsl #32
    6f68:	movk	x1, #0x27d4, lsl #48
    6f6c:	mov	x0, #0xca87                	// #51847
    6f70:	movk	x0, #0x85eb, lsl #16
    6f74:	movk	x0, #0x79b1, lsl #32
    6f78:	movk	x0, #0x9e37, lsl #48
    6f7c:	ldrb	w25, [x19], #1
    6f80:	mul	x25, x25, x1
    6f84:	eor	x20, x25, x20
    6f88:	ror	x20, x20, #53
    6f8c:	mul	x20, x20, x0
    6f90:	cmp	x24, x19
    6f94:	b.ne	6f7c <XXH64+0x50c>  // b.any
    6f98:	eor	x20, x20, x20, lsr #33
    6f9c:	mov	x0, #0xeb4f                	// #60239
    6fa0:	movk	x0, #0x27d4, lsl #16
    6fa4:	movk	x0, #0xae3d, lsl #32
    6fa8:	movk	x0, #0xc2b2, lsl #48
    6fac:	mul	x0, x20, x0
    6fb0:	eor	x0, x0, x0, lsr #29
    6fb4:	mov	x1, #0x79f9                	// #31225
    6fb8:	movk	x1, #0x9e37, lsl #16
    6fbc:	movk	x1, #0x67b1, lsl #32
    6fc0:	movk	x1, #0x1656, lsl #48
    6fc4:	mul	x0, x0, x1
    6fc8:	eor	x0, x0, x0, lsr #32
    6fcc:	ldp	x23, x24, [sp, #48]
    6fd0:	ldp	x27, x28, [sp, #80]
    6fd4:	b	6d04 <XXH64+0x294>
    6fd8:	mov	x0, #0x67c5                	// #26565
    6fdc:	movk	x0, #0x1656, lsl #16
    6fe0:	movk	x0, #0xeb2f, lsl #32
    6fe4:	movk	x0, #0x27d4, lsl #48
    6fe8:	add	x0, x2, x0
    6fec:	b	6e70 <XXH64+0x400>

0000000000006ff0 <XXH32_createState>:
    6ff0:	stp	x29, x30, [sp, #-16]!
    6ff4:	mov	x29, sp
    6ff8:	mov	x0, #0x30                  	// #48
    6ffc:	bl	0 <grub_malloc>
    7000:	ldp	x29, x30, [sp], #16
    7004:	ret

0000000000007008 <XXH32_freeState>:
    7008:	stp	x29, x30, [sp, #-16]!
    700c:	mov	x29, sp
    7010:	bl	0 <grub_free>
    7014:	mov	w0, #0x0                   	// #0
    7018:	ldp	x29, x30, [sp], #16
    701c:	ret

0000000000007020 <XXH64_createState>:
    7020:	stp	x29, x30, [sp, #-16]!
    7024:	mov	x29, sp
    7028:	mov	x0, #0x58                  	// #88
    702c:	bl	0 <grub_malloc>
    7030:	ldp	x29, x30, [sp], #16
    7034:	ret

0000000000007038 <XXH64_freeState>:
    7038:	stp	x29, x30, [sp, #-16]!
    703c:	mov	x29, sp
    7040:	bl	0 <grub_free>
    7044:	mov	w0, #0x0                   	// #0
    7048:	ldp	x29, x30, [sp], #16
    704c:	ret

0000000000007050 <XXH32_reset>:
    7050:	stp	x29, x30, [sp, #-80]!
    7054:	mov	x29, sp
    7058:	stp	x19, x20, [sp, #16]
    705c:	mov	x20, x0
    7060:	mov	w19, w1
    7064:	mov	x2, #0x2c                  	// #44
    7068:	mov	w1, #0x0                   	// #0
    706c:	add	x0, sp, #0x20
    7070:	bl	0 <grub_memset>
    7074:	mov	w0, #0x4428                	// #17448
    7078:	movk	w0, #0x2423, lsl #16
    707c:	add	w0, w19, w0
    7080:	str	w0, [sp, #40]
    7084:	mov	w0, #0xca77                	// #51831
    7088:	movk	w0, #0x85eb, lsl #16
    708c:	add	w0, w19, w0
    7090:	str	w0, [sp, #44]
    7094:	str	w19, [sp, #48]
    7098:	mov	w1, #0x864f                	// #34383
    709c:	movk	w1, #0x61c8, lsl #16
    70a0:	add	w19, w19, w1
    70a4:	str	w19, [sp, #52]
    70a8:	mov	x2, #0x30                  	// #48
    70ac:	add	x1, sp, #0x20
    70b0:	mov	x0, x20
    70b4:	bl	0 <grub_memmove>
    70b8:	mov	w0, #0x0                   	// #0
    70bc:	ldp	x19, x20, [sp, #16]
    70c0:	ldp	x29, x30, [sp], #80
    70c4:	ret

00000000000070c8 <XXH64_reset>:
    70c8:	stp	x29, x30, [sp, #-128]!
    70cc:	mov	x29, sp
    70d0:	stp	x19, x20, [sp, #16]
    70d4:	mov	x20, x0
    70d8:	mov	x19, x1
    70dc:	mov	x2, #0x50                  	// #80
    70e0:	mov	w1, #0x0                   	// #0
    70e4:	add	x0, sp, #0x28
    70e8:	bl	0 <grub_memset>
    70ec:	mov	x0, #0xb5d6                	// #46550
    70f0:	movk	x0, #0xadc0, lsl #16
    70f4:	movk	x0, #0x27ee, lsl #32
    70f8:	movk	x0, #0x60ea, lsl #48
    70fc:	add	x0, x19, x0
    7100:	str	x0, [sp, #48]
    7104:	mov	x0, #0xeb4f                	// #60239
    7108:	movk	x0, #0x27d4, lsl #16
    710c:	movk	x0, #0xae3d, lsl #32
    7110:	movk	x0, #0xc2b2, lsl #48
    7114:	add	x0, x19, x0
    7118:	str	x0, [sp, #56]
    711c:	str	x19, [sp, #64]
    7120:	mov	x1, #0x3579                	// #13689
    7124:	movk	x1, #0x7a14, lsl #16
    7128:	movk	x1, #0x864e, lsl #32
    712c:	movk	x1, #0x61c8, lsl #48
    7130:	add	x19, x19, x1
    7134:	str	x19, [sp, #72]
    7138:	mov	x2, #0x58                  	// #88
    713c:	add	x1, sp, #0x28
    7140:	mov	x0, x20
    7144:	bl	0 <grub_memmove>
    7148:	mov	w0, #0x0                   	// #0
    714c:	ldp	x19, x20, [sp, #16]
    7150:	ldp	x29, x30, [sp], #128
    7154:	ret

0000000000007158 <XXH32_update>:
    7158:	stp	x29, x30, [sp, #-112]!
    715c:	mov	x29, sp
    7160:	stp	x19, x20, [sp, #16]
    7164:	stp	x23, x24, [sp, #48]
    7168:	mov	x20, x0
    716c:	mov	x23, x1
    7170:	mov	x19, x2
    7174:	add	x0, x1, x2
    7178:	str	x0, [sp, #104]
    717c:	ldr	w0, [x20]
    7180:	add	w0, w0, w2
    7184:	str	w0, [x20]
    7188:	cmp	x2, #0xf
    718c:	ccmp	w0, #0xf, #0x2, ls  // ls = plast
    7190:	cset	w1, hi  // hi = pmore
    7194:	ldr	w0, [x20, #4]
    7198:	orr	w0, w0, w1
    719c:	str	w0, [x20, #4]
    71a0:	ldr	w2, [x20, #40]
    71a4:	mov	w3, w2
    71a8:	add	x0, x19, x3
    71ac:	cmp	x0, #0xf
    71b0:	b.ls	72a8 <XXH32_update+0x150>  // b.plast
    71b4:	stp	x27, x28, [sp, #80]
    71b8:	cbnz	w2, 72cc <XXH32_update+0x174>
    71bc:	ldr	x0, [sp, #104]
    71c0:	sub	x28, x0, #0x10
    71c4:	cmp	x28, x23
    71c8:	b.cc	7284 <XXH32_update+0x12c>  // b.lo, b.ul, b.last
    71cc:	stp	x21, x22, [sp, #32]
    71d0:	stp	x25, x26, [sp, #64]
    71d4:	ldr	w27, [x20, #8]
    71d8:	ldr	w26, [x20, #12]
    71dc:	ldr	w25, [x20, #16]
    71e0:	ldr	w24, [x20, #20]
    71e4:	mov	x19, x23
    71e8:	mov	w22, #0xca77                	// #51831
    71ec:	movk	w22, #0x85eb, lsl #16
    71f0:	mov	w21, #0x79b1                	// #31153
    71f4:	movk	w21, #0x9e37, lsl #16
    71f8:	mov	x0, x19
    71fc:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7200:	madd	w27, w0, w22, w27
    7204:	ror	w27, w27, #19
    7208:	mul	w27, w27, w21
    720c:	add	x0, x19, #0x4
    7210:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7214:	madd	w26, w0, w22, w26
    7218:	ror	w26, w26, #19
    721c:	mul	w26, w26, w21
    7220:	add	x0, x19, #0x8
    7224:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7228:	madd	w25, w0, w22, w25
    722c:	ror	w25, w25, #19
    7230:	mul	w25, w25, w21
    7234:	add	x0, x19, #0xc
    7238:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    723c:	madd	w24, w0, w22, w24
    7240:	ror	w24, w24, #19
    7244:	mul	w24, w24, w21
    7248:	add	x19, x19, #0x10
    724c:	cmp	x28, x19
    7250:	b.cs	71f8 <XXH32_update+0xa0>  // b.hs, b.nlast
    7254:	ldr	x0, [sp, #104]
    7258:	sub	x0, x0, #0x10
    725c:	sub	x0, x0, x23
    7260:	and	x0, x0, #0xfffffffffffffff0
    7264:	add	x0, x0, #0x10
    7268:	add	x23, x23, x0
    726c:	str	w27, [x20, #8]
    7270:	str	w26, [x20, #12]
    7274:	str	w25, [x20, #16]
    7278:	str	w24, [x20, #20]
    727c:	ldp	x21, x22, [sp, #32]
    7280:	ldp	x25, x26, [sp, #64]
    7284:	ldr	x0, [sp, #104]
    7288:	cmp	x0, x23
    728c:	b.hi	7380 <XXH32_update+0x228>  // b.pmore
    7290:	ldp	x27, x28, [sp, #80]
    7294:	mov	w0, #0x0                   	// #0
    7298:	ldp	x19, x20, [sp, #16]
    729c:	ldp	x23, x24, [sp, #48]
    72a0:	ldp	x29, x30, [sp], #112
    72a4:	ret
    72a8:	add	x0, x20, #0x18
    72ac:	mov	x2, x19
    72b0:	mov	x1, x23
    72b4:	add	x0, x0, x3
    72b8:	bl	0 <grub_memmove>
    72bc:	ldr	w0, [x20, #40]
    72c0:	add	w19, w0, w19
    72c4:	str	w19, [x20, #40]
    72c8:	b	7294 <XXH32_update+0x13c>
    72cc:	stp	x21, x22, [sp, #32]
    72d0:	add	x21, x20, #0x18
    72d4:	mov	w19, #0x10                  	// #16
    72d8:	sub	w2, w19, w2
    72dc:	mov	x1, x23
    72e0:	add	x0, x21, x3
    72e4:	bl	0 <grub_memmove>
    72e8:	ldr	w24, [x20, #8]
    72ec:	mov	x0, x21
    72f0:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    72f4:	mov	w22, #0xca77                	// #51831
    72f8:	movk	w22, #0x85eb, lsl #16
    72fc:	madd	w0, w0, w22, w24
    7300:	ror	w0, w0, #19
    7304:	mov	w21, #0x79b1                	// #31153
    7308:	movk	w21, #0x9e37, lsl #16
    730c:	mul	w0, w0, w21
    7310:	str	w0, [x20, #8]
    7314:	ldr	w24, [x20, #12]
    7318:	add	x0, x20, #0x1c
    731c:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7320:	madd	w0, w0, w22, w24
    7324:	ror	w0, w0, #19
    7328:	mul	w0, w0, w21
    732c:	str	w0, [x20, #12]
    7330:	ldr	w24, [x20, #16]
    7334:	add	x0, x20, #0x20
    7338:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    733c:	madd	w0, w0, w22, w24
    7340:	ror	w0, w0, #19
    7344:	mul	w0, w0, w21
    7348:	str	w0, [x20, #16]
    734c:	ldr	w24, [x20, #20]
    7350:	add	x0, x20, #0x24
    7354:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7358:	madd	w0, w0, w22, w24
    735c:	ror	w0, w0, #19
    7360:	mul	w0, w0, w21
    7364:	str	w0, [x20, #20]
    7368:	ldr	w0, [x20, #40]
    736c:	sub	w19, w19, w0
    7370:	add	x23, x23, x19
    7374:	str	wzr, [x20, #40]
    7378:	ldp	x21, x22, [sp, #32]
    737c:	b	71bc <XXH32_update+0x64>
    7380:	sub	x19, x0, x23
    7384:	mov	x2, x19
    7388:	mov	x1, x23
    738c:	add	x0, x20, #0x18
    7390:	bl	0 <grub_memmove>
    7394:	str	w19, [x20, #40]
    7398:	ldp	x27, x28, [sp, #80]
    739c:	b	7294 <XXH32_update+0x13c>

00000000000073a0 <XXH32_digest>:
    73a0:	stp	x29, x30, [sp, #-80]!
    73a4:	mov	x29, sp
    73a8:	stp	x19, x20, [sp, #16]
    73ac:	stp	x23, x24, [sp, #48]
    73b0:	stp	x25, x26, [sp, #64]
    73b4:	add	x20, x0, #0x18
    73b8:	ldr	w24, [x0, #40]
    73bc:	add	x24, x20, x24
    73c0:	ldr	w1, [x0, #4]
    73c4:	cbz	w1, 74c4 <XXH32_digest+0x124>
    73c8:	ldr	w26, [x0, #8]
    73cc:	ror	w26, w26, #31
    73d0:	ldr	w1, [x0, #12]
    73d4:	ror	w1, w1, #25
    73d8:	add	w26, w26, w1
    73dc:	ldr	w1, [x0, #16]
    73e0:	ror	w1, w1, #20
    73e4:	ldr	w2, [x0, #20]
    73e8:	ror	w2, w2, #14
    73ec:	add	w1, w1, w2
    73f0:	add	w26, w26, w1
    73f4:	mov	x25, x0
    73f8:	ldr	w1, [x25], #28
    73fc:	add	w26, w26, w1
    7400:	cmp	x24, x25
    7404:	b.cc	745c <XXH32_digest+0xbc>  // b.lo, b.ul, b.last
    7408:	stp	x21, x22, [sp, #32]
    740c:	add	x19, x0, #0x18
    7410:	sub	x20, x24, x0
    7414:	sub	x20, x20, #0x1c
    7418:	and	x21, x20, #0xfffffffffffffffc
    741c:	add	x21, x21, x25
    7420:	mov	w23, #0xae3d                	// #44605
    7424:	movk	w23, #0xc2b2, lsl #16
    7428:	mov	w22, #0xeb2f                	// #60207
    742c:	movk	w22, #0x27d4, lsl #16
    7430:	mov	x0, x19
    7434:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7438:	madd	w0, w0, w23, w26
    743c:	ror	w0, w0, #15
    7440:	mul	w26, w0, w22
    7444:	add	x19, x19, #0x4
    7448:	cmp	x19, x21
    744c:	b.ne	7430 <XXH32_digest+0x90>  // b.any
    7450:	and	x20, x20, #0xfffffffffffffffc
    7454:	add	x20, x25, x20
    7458:	ldp	x21, x22, [sp, #32]
    745c:	cmp	x24, x20
    7460:	b.ls	748c <XXH32_digest+0xec>  // b.plast
    7464:	mov	w2, #0x67b1                	// #26545
    7468:	movk	w2, #0x1656, lsl #16
    746c:	mov	w1, #0x79b1                	// #31153
    7470:	movk	w1, #0x9e37, lsl #16
    7474:	ldrb	w0, [x20], #1
    7478:	madd	w0, w0, w2, w26
    747c:	ror	w0, w0, #21
    7480:	mul	w26, w0, w1
    7484:	cmp	x24, x20
    7488:	b.ne	7474 <XXH32_digest+0xd4>  // b.any
    748c:	eor	w0, w26, w26, lsr #15
    7490:	mov	w26, #0xca77                	// #51831
    7494:	movk	w26, #0x85eb, lsl #16
    7498:	mul	w0, w0, w26
    749c:	eor	w0, w0, w0, lsr #13
    74a0:	mov	w1, #0xae3d                	// #44605
    74a4:	movk	w1, #0xc2b2, lsl #16
    74a8:	mul	w0, w0, w1
    74ac:	eor	w0, w0, w0, lsr #16
    74b0:	ldp	x19, x20, [sp, #16]
    74b4:	ldp	x23, x24, [sp, #48]
    74b8:	ldp	x25, x26, [sp, #64]
    74bc:	ldp	x29, x30, [sp], #80
    74c0:	ret
    74c4:	ldr	w26, [x0, #16]
    74c8:	mov	w1, #0x67b1                	// #26545
    74cc:	movk	w1, #0x1656, lsl #16
    74d0:	add	w26, w26, w1
    74d4:	b	73f4 <XXH32_digest+0x54>

00000000000074d8 <XXH64_update>:
    74d8:	stp	x29, x30, [sp, #-112]!
    74dc:	mov	x29, sp
    74e0:	stp	x19, x20, [sp, #16]
    74e4:	stp	x21, x22, [sp, #32]
    74e8:	stp	x23, x24, [sp, #48]
    74ec:	mov	x22, x0
    74f0:	mov	x23, x1
    74f4:	mov	x19, x2
    74f8:	add	x0, x1, x2
    74fc:	str	x0, [sp, #104]
    7500:	ldr	x0, [x22]
    7504:	add	x0, x0, x2
    7508:	str	x0, [x22]
    750c:	ldr	w2, [x22, #72]
    7510:	mov	w3, w2
    7514:	add	x0, x19, x3
    7518:	cmp	x0, #0x1f
    751c:	b.ls	7624 <XXH64_update+0x14c>  // b.plast
    7520:	cbnz	w2, 7644 <XXH64_update+0x16c>
    7524:	add	x0, x23, #0x20
    7528:	ldr	x1, [sp, #104]
    752c:	cmp	x1, x0
    7530:	b.cc	7600 <XXH64_update+0x128>  // b.lo, b.ul, b.last
    7534:	stp	x25, x26, [sp, #64]
    7538:	stp	x27, x28, [sp, #80]
    753c:	sub	x28, x1, #0x20
    7540:	ldr	x27, [x22, #8]
    7544:	ldr	x26, [x22, #16]
    7548:	ldr	x25, [x22, #24]
    754c:	ldr	x24, [x22, #32]
    7550:	mov	x19, x23
    7554:	mov	x21, #0xeb4f                	// #60239
    7558:	movk	x21, #0x27d4, lsl #16
    755c:	movk	x21, #0xae3d, lsl #32
    7560:	movk	x21, #0xc2b2, lsl #48
    7564:	mov	x20, #0xca87                	// #51847
    7568:	movk	x20, #0x85eb, lsl #16
    756c:	movk	x20, #0x79b1, lsl #32
    7570:	movk	x20, #0x9e37, lsl #48
    7574:	mov	x0, x19
    7578:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    757c:	madd	x27, x0, x21, x27
    7580:	ror	x27, x27, #33
    7584:	mul	x27, x27, x20
    7588:	add	x0, x19, #0x8
    758c:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    7590:	madd	x26, x0, x21, x26
    7594:	ror	x26, x26, #33
    7598:	mul	x26, x26, x20
    759c:	add	x0, x19, #0x10
    75a0:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    75a4:	madd	x25, x0, x21, x25
    75a8:	ror	x25, x25, #33
    75ac:	mul	x25, x25, x20
    75b0:	add	x0, x19, #0x18
    75b4:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    75b8:	madd	x24, x0, x21, x24
    75bc:	ror	x24, x24, #33
    75c0:	mul	x24, x24, x20
    75c4:	add	x19, x19, #0x20
    75c8:	cmp	x28, x19
    75cc:	b.cs	7574 <XXH64_update+0x9c>  // b.hs, b.nlast
    75d0:	ldr	x0, [sp, #104]
    75d4:	sub	x0, x0, #0x20
    75d8:	sub	x0, x0, x23
    75dc:	and	x0, x0, #0xffffffffffffffe0
    75e0:	add	x0, x0, #0x20
    75e4:	add	x23, x23, x0
    75e8:	str	x27, [x22, #8]
    75ec:	str	x26, [x22, #16]
    75f0:	str	x25, [x22, #24]
    75f4:	str	x24, [x22, #32]
    75f8:	ldp	x25, x26, [sp, #64]
    75fc:	ldp	x27, x28, [sp, #80]
    7600:	ldr	x0, [sp, #104]
    7604:	cmp	x0, x23
    7608:	b.hi	76fc <XXH64_update+0x224>  // b.pmore
    760c:	mov	w0, #0x0                   	// #0
    7610:	ldp	x19, x20, [sp, #16]
    7614:	ldp	x21, x22, [sp, #32]
    7618:	ldp	x23, x24, [sp, #48]
    761c:	ldp	x29, x30, [sp], #112
    7620:	ret
    7624:	add	x0, x22, #0x28
    7628:	mov	x2, x19
    762c:	add	x0, x0, x3
    7630:	bl	0 <grub_memmove>
    7634:	ldr	w0, [x22, #72]
    7638:	add	w19, w0, w19
    763c:	str	w19, [x22, #72]
    7640:	b	760c <XXH64_update+0x134>
    7644:	add	x20, x22, #0x28
    7648:	mov	w19, #0x20                  	// #32
    764c:	sub	w2, w19, w2
    7650:	add	x0, x20, x3
    7654:	bl	0 <grub_memmove>
    7658:	ldr	x24, [x22, #8]
    765c:	mov	x0, x20
    7660:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    7664:	mov	x21, #0xeb4f                	// #60239
    7668:	movk	x21, #0x27d4, lsl #16
    766c:	movk	x21, #0xae3d, lsl #32
    7670:	movk	x21, #0xc2b2, lsl #48
    7674:	madd	x0, x0, x21, x24
    7678:	ror	x0, x0, #33
    767c:	mov	x20, #0xca87                	// #51847
    7680:	movk	x20, #0x85eb, lsl #16
    7684:	movk	x20, #0x79b1, lsl #32
    7688:	movk	x20, #0x9e37, lsl #48
    768c:	mul	x0, x0, x20
    7690:	str	x0, [x22, #8]
    7694:	ldr	x24, [x22, #16]
    7698:	add	x0, x22, #0x30
    769c:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    76a0:	madd	x0, x0, x21, x24
    76a4:	ror	x0, x0, #33
    76a8:	mul	x0, x0, x20
    76ac:	str	x0, [x22, #16]
    76b0:	ldr	x24, [x22, #24]
    76b4:	add	x0, x22, #0x38
    76b8:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    76bc:	madd	x0, x0, x21, x24
    76c0:	ror	x0, x0, #33
    76c4:	mul	x0, x0, x20
    76c8:	str	x0, [x22, #24]
    76cc:	ldr	x24, [x22, #32]
    76d0:	add	x0, x22, #0x40
    76d4:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    76d8:	madd	x0, x0, x21, x24
    76dc:	ror	x0, x0, #33
    76e0:	mul	x0, x0, x20
    76e4:	str	x0, [x22, #32]
    76e8:	ldr	w0, [x22, #72]
    76ec:	sub	w19, w19, w0
    76f0:	add	x23, x23, x19
    76f4:	str	wzr, [x22, #72]
    76f8:	b	7524 <XXH64_update+0x4c>
    76fc:	sub	x19, x0, x23
    7700:	mov	x2, x19
    7704:	mov	x1, x23
    7708:	add	x0, x22, #0x28
    770c:	bl	0 <grub_memmove>
    7710:	str	w19, [x22, #72]
    7714:	b	760c <XXH64_update+0x134>

0000000000007718 <XXH64_digest>:
    7718:	stp	x29, x30, [sp, #-96]!
    771c:	mov	x29, sp
    7720:	stp	x19, x20, [sp, #16]
    7724:	stp	x21, x22, [sp, #32]
    7728:	stp	x23, x24, [sp, #48]
    772c:	stp	x25, x26, [sp, #64]
    7730:	str	x27, [sp, #80]
    7734:	mov	x21, x0
    7738:	add	x19, x0, #0x28
    773c:	ldr	w22, [x0, #72]
    7740:	add	x22, x19, x22
    7744:	ldr	x27, [x0]
    7748:	cmp	x27, #0x1f
    774c:	b.ls	7910 <XXH64_digest+0x1f8>  // b.plast
    7750:	ldr	x1, [x0, #8]
    7754:	ldr	x24, [x0, #16]
    7758:	ldr	x23, [x0, #24]
    775c:	ldr	x20, [x0, #32]
    7760:	ror	x2, x1, #63
    7764:	ror	x0, x24, #57
    7768:	add	x2, x2, x0
    776c:	ror	x0, x23, #52
    7770:	ror	x3, x20, #46
    7774:	add	x0, x0, x3
    7778:	add	x0, x2, x0
    777c:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    7780:	mov	x1, x24
    7784:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    7788:	mov	x1, x23
    778c:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    7790:	mov	x1, x20
    7794:	bl	661c <HUF_decompress4X_hufOnly_wksp_bmi2+0x110>
    7798:	add	x27, x27, x0
    779c:	add	x26, x21, #0x30
    77a0:	cmp	x22, x26
    77a4:	b.cc	7820 <XXH64_digest+0x108>  // b.lo, b.ul, b.last
    77a8:	add	x20, x21, #0x28
    77ac:	sub	x19, x22, x21
    77b0:	sub	x19, x19, #0x30
    77b4:	and	x23, x19, #0xfffffffffffffff8
    77b8:	add	x23, x23, x26
    77bc:	mov	x25, #0xeb4f                	// #60239
    77c0:	movk	x25, #0x27d4, lsl #16
    77c4:	movk	x25, #0xae3d, lsl #32
    77c8:	movk	x25, #0xc2b2, lsl #48
    77cc:	mov	x21, #0xca87                	// #51847
    77d0:	movk	x21, #0x85eb, lsl #16
    77d4:	movk	x21, #0x79b1, lsl #32
    77d8:	movk	x21, #0x9e37, lsl #48
    77dc:	mov	x24, #0xae63                	// #44643
    77e0:	movk	x24, #0xc2b2, lsl #16
    77e4:	movk	x24, #0xca77, lsl #32
    77e8:	movk	x24, #0x85eb, lsl #48
    77ec:	mov	x0, x20
    77f0:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    77f4:	mul	x0, x0, x25
    77f8:	ror	x0, x0, #33
    77fc:	mul	x0, x0, x21
    7800:	eor	x0, x0, x27
    7804:	ror	x0, x0, #37
    7808:	madd	x27, x0, x21, x24
    780c:	add	x20, x20, #0x8
    7810:	cmp	x20, x23
    7814:	b.ne	77ec <XXH64_digest+0xd4>  // b.any
    7818:	and	x19, x19, #0xfffffffffffffff8
    781c:	add	x19, x26, x19
    7820:	add	x20, x19, #0x4
    7824:	cmp	x22, x20
    7828:	b.cc	787c <XXH64_digest+0x164>  // b.lo, b.ul, b.last
    782c:	mov	x0, x19
    7830:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7834:	mov	w0, w0
    7838:	mov	x1, #0xca87                	// #51847
    783c:	movk	x1, #0x85eb, lsl #16
    7840:	movk	x1, #0x79b1, lsl #32
    7844:	movk	x1, #0x9e37, lsl #48
    7848:	mul	x0, x0, x1
    784c:	eor	x0, x0, x27
    7850:	ror	x1, x0, #41
    7854:	mov	x27, #0xeb4f                	// #60239
    7858:	movk	x27, #0x27d4, lsl #16
    785c:	movk	x27, #0xae3d, lsl #32
    7860:	movk	x27, #0xc2b2, lsl #48
    7864:	mov	x0, #0x79f9                	// #31225
    7868:	movk	x0, #0x9e37, lsl #16
    786c:	movk	x0, #0x67b1, lsl #32
    7870:	movk	x0, #0x1656, lsl #48
    7874:	madd	x27, x1, x27, x0
    7878:	mov	x19, x20
    787c:	cmp	x22, x19
    7880:	b.ls	78c0 <XXH64_digest+0x1a8>  // b.plast
    7884:	mov	x2, #0x67c5                	// #26565
    7888:	movk	x2, #0x1656, lsl #16
    788c:	movk	x2, #0xeb2f, lsl #32
    7890:	movk	x2, #0x27d4, lsl #48
    7894:	mov	x1, #0xca87                	// #51847
    7898:	movk	x1, #0x85eb, lsl #16
    789c:	movk	x1, #0x79b1, lsl #32
    78a0:	movk	x1, #0x9e37, lsl #48
    78a4:	ldrb	w0, [x19], #1
    78a8:	mul	x0, x0, x2
    78ac:	eor	x0, x0, x27
    78b0:	ror	x0, x0, #53
    78b4:	mul	x27, x0, x1
    78b8:	cmp	x22, x19
    78bc:	b.ne	78a4 <XXH64_digest+0x18c>  // b.any
    78c0:	eor	x0, x27, x27, lsr #33
    78c4:	mov	x27, #0xeb4f                	// #60239
    78c8:	movk	x27, #0x27d4, lsl #16
    78cc:	movk	x27, #0xae3d, lsl #32
    78d0:	movk	x27, #0xc2b2, lsl #48
    78d4:	mul	x0, x0, x27
    78d8:	eor	x0, x0, x0, lsr #29
    78dc:	mov	x1, #0x79f9                	// #31225
    78e0:	movk	x1, #0x9e37, lsl #16
    78e4:	movk	x1, #0x67b1, lsl #32
    78e8:	movk	x1, #0x1656, lsl #48
    78ec:	mul	x0, x0, x1
    78f0:	eor	x0, x0, x0, lsr #32
    78f4:	ldp	x19, x20, [sp, #16]
    78f8:	ldp	x21, x22, [sp, #32]
    78fc:	ldp	x23, x24, [sp, #48]
    7900:	ldp	x25, x26, [sp, #64]
    7904:	ldr	x27, [sp, #80]
    7908:	ldp	x29, x30, [sp], #96
    790c:	ret
    7910:	ldr	x0, [x0, #24]
    7914:	mov	x1, #0x67c5                	// #26565
    7918:	movk	x1, #0x1656, lsl #16
    791c:	movk	x1, #0xeb2f, lsl #32
    7920:	movk	x1, #0x27d4, lsl #48
    7924:	add	x0, x0, x1
    7928:	b	7798 <XXH64_digest+0x80>

000000000000792c <XXH32_canonicalFromHash>:
    792c:	stp	x29, x30, [sp, #-32]!
    7930:	mov	x29, sp
    7934:	rev	w1, w1
    7938:	str	w1, [sp, #28]
    793c:	mov	x2, #0x4                   	// #4
    7940:	add	x1, sp, #0x1c
    7944:	bl	0 <grub_memmove>
    7948:	ldp	x29, x30, [sp], #32
    794c:	ret

0000000000007950 <XXH64_canonicalFromHash>:
    7950:	stp	x29, x30, [sp, #-32]!
    7954:	mov	x29, sp
    7958:	rev	x1, x1
    795c:	str	x1, [sp, #24]
    7960:	mov	x2, #0x8                   	// #8
    7964:	add	x1, sp, #0x18
    7968:	bl	0 <grub_memmove>
    796c:	ldp	x29, x30, [sp], #32
    7970:	ret

0000000000007974 <XXH32_hashFromCanonical>:
    7974:	stp	x29, x30, [sp, #-16]!
    7978:	mov	x29, sp
    797c:	bl	6664 <HUF_decompress4X_hufOnly_wksp_bmi2+0x158>
    7980:	rev	w0, w0
    7984:	ldp	x29, x30, [sp], #16
    7988:	ret

000000000000798c <XXH64_hashFromCanonical>:
    798c:	stp	x29, x30, [sp, #-16]!
    7990:	mov	x29, sp
    7994:	bl	6688 <HUF_decompress4X_hufOnly_wksp_bmi2+0x17c>
    7998:	rev	x0, x0
    799c:	ldp	x29, x30, [sp], #16
    79a0:	ret
    79a4:	nop

00000000000079a8 <ZSTD_versionNumber>:
    79a8:	mov	w0, #0x2842                	// #10306
    79ac:	ret

00000000000079b0 <ZSTD_versionString>:
    79b0:	adrp	x0, 0 <FSE_versionNumber>
    79b4:	ldr	x0, [x0]
    79b8:	ret
    79bc:	nop
	...

00000000000079c8 <ZSTD_isError>:
    79c8:	cmn	x0, #0x78
    79cc:	cset	w0, hi  // hi = pmore
    79d0:	ret

00000000000079d4 <ZSTD_getErrorName>:
    79d4:	stp	x29, x30, [sp, #-16]!
    79d8:	mov	x29, sp
    79dc:	cmn	x0, #0x78
    79e0:	csneg	w0, wzr, w0, ls  // ls = plast
    79e4:	bl	5a0 <ERR_getErrorString>
    79e8:	ldp	x29, x30, [sp], #16
    79ec:	ret

00000000000079f0 <ZSTD_getErrorCode>:
    79f0:	cmn	x0, #0x78
    79f4:	csneg	w0, wzr, w0, ls  // ls = plast
    79f8:	ret

00000000000079fc <ZSTD_getErrorString>:
    79fc:	stp	x29, x30, [sp, #-16]!
    7a00:	mov	x29, sp
    7a04:	bl	5a0 <ERR_getErrorString>
    7a08:	ldp	x29, x30, [sp], #16
    7a0c:	ret

0000000000007a10 <ZSTD_malloc>:
    7a10:	stp	x29, x30, [sp, #-16]!
    7a14:	mov	x29, sp
    7a18:	ldr	x3, [x1]
    7a1c:	cbz	x3, 7a38 <ZSTD_malloc+0x28>
    7a20:	mov	x2, x1
    7a24:	mov	x1, x0
    7a28:	ldr	x0, [x2, #16]
    7a2c:	blr	x3
    7a30:	ldp	x29, x30, [sp], #16
    7a34:	ret
    7a38:	bl	0 <grub_malloc>
    7a3c:	b	7a30 <ZSTD_malloc+0x20>

0000000000007a40 <ZSTD_calloc>:
    7a40:	stp	x29, x30, [sp, #-32]!
    7a44:	mov	x29, sp
    7a48:	stp	x19, x20, [sp, #16]
    7a4c:	mov	x19, x0
    7a50:	ldr	x3, [x1]
    7a54:	cbz	x3, 7a88 <ZSTD_calloc+0x48>
    7a58:	mov	x2, x1
    7a5c:	mov	x1, x0
    7a60:	ldr	x0, [x2, #16]
    7a64:	blr	x3
    7a68:	mov	x20, x0
    7a6c:	mov	x2, x19
    7a70:	mov	w1, #0x0                   	// #0
    7a74:	bl	0 <grub_memset>
    7a78:	mov	x0, x20
    7a7c:	ldp	x19, x20, [sp, #16]
    7a80:	ldp	x29, x30, [sp], #32
    7a84:	ret
    7a88:	bl	0 <grub_zalloc>
    7a8c:	mov	x20, x0
    7a90:	b	7a78 <ZSTD_calloc+0x38>

0000000000007a94 <ZSTD_free>:
    7a94:	cbz	x0, 7ac8 <ZSTD_free+0x34>
    7a98:	stp	x29, x30, [sp, #-16]!
    7a9c:	mov	x29, sp
    7aa0:	mov	x2, x1
    7aa4:	ldr	x3, [x1, #8]
    7aa8:	cbz	x3, 7ac0 <ZSTD_free+0x2c>
    7aac:	mov	x1, x0
    7ab0:	ldr	x0, [x2, #16]
    7ab4:	blr	x3
    7ab8:	ldp	x29, x30, [sp], #16
    7abc:	ret
    7ac0:	bl	0 <grub_free>
    7ac4:	b	7ab8 <ZSTD_free+0x24>
    7ac8:	ret
    7acc:	nop
    7ad0:	cmp	w2, #0x1
    7ad4:	mov	x2, #0x5                   	// #5
    7ad8:	csinc	x2, x2, xzr, ne  // ne = any
    7adc:	cmp	x1, x2
    7ae0:	b.cc	7b34 <ZSTD_free+0xa0>  // b.lo, b.ul, b.last
    7ae4:	add	x0, x0, x2
    7ae8:	ldurb	w0, [x0, #-1]
    7aec:	ubfx	x3, x0, #5, #1
    7af0:	lsr	w5, w0, #6
    7af4:	adrp	x1, 0 <FSE_versionNumber>
    7af8:	ldr	x4, [x1]
    7afc:	and	x7, x0, #0x3
    7b00:	add	x6, x4, #0x20
    7b04:	ubfx	x1, x0, #6, #2
    7b08:	ldr	x0, [x4, x7, lsl #3]
    7b0c:	ldr	x1, [x6, x1, lsl #3]
    7b10:	add	x0, x0, x1
    7b14:	eor	w1, w3, #0x1
    7b18:	mov	w1, w1
    7b1c:	add	x2, x1, x2
    7b20:	add	x0, x0, x2
    7b24:	cmp	w3, #0x0
    7b28:	ccmp	w5, #0x0, #0x0, ne  // ne = any
    7b2c:	cinc	x0, x0, eq  // eq = none
    7b30:	ret
    7b34:	mov	x0, #0xffffffffffffffb8    	// #-72
    7b38:	b	7b30 <ZSTD_free+0x9c>
    7b3c:	nop
	...
    7b48:	ldr	x2, [x0, #28744]
    7b4c:	cmp	x2, x1
    7b50:	b.eq	7b70 <ZSTD_free+0xdc>  // b.none
    7b54:	str	x2, [x0, #28768]
    7b58:	ldr	x3, [x0, #28752]
    7b5c:	sub	x2, x2, x3
    7b60:	sub	x2, x1, x2
    7b64:	str	x2, [x0, #28760]
    7b68:	str	x1, [x0, #28752]
    7b6c:	str	x1, [x0, #28744]
    7b70:	ret
    7b74:	stp	x29, x30, [sp, #-16]!
    7b78:	mov	x29, sp
    7b7c:	mov	x2, #0x8                   	// #8
    7b80:	bl	0 <grub_memmove>
    7b84:	ldp	x29, x30, [sp], #16
    7b88:	ret
    7b8c:	stp	x29, x30, [sp, #-128]!
    7b90:	mov	x29, sp
    7b94:	stp	x19, x20, [sp, #16]
    7b98:	stp	x21, x22, [sp, #32]
    7b9c:	stp	x23, x24, [sp, #48]
    7ba0:	stp	x25, x26, [sp, #64]
    7ba4:	stp	x27, x28, [sp, #80]
    7ba8:	mov	x19, x0
    7bac:	str	x6, [sp, #104]
    7bb0:	str	x7, [sp, #112]
    7bb4:	ldr	x21, [x2]
    7bb8:	ldr	x27, [x2, #8]
    7bbc:	add	x26, x21, x27
    7bc0:	add	x24, x0, x26
    7bc4:	ldr	x23, [x3]
    7bc8:	add	x0, x23, x21
    7bcc:	cmp	x24, x1
    7bd0:	b.hi	7d18 <ZSTD_free+0x284>  // b.pmore
    7bd4:	mov	x20, x3
    7bd8:	mov	x25, x5
    7bdc:	cmp	x0, x4
    7be0:	b.hi	7d20 <ZSTD_free+0x28c>  // b.pmore
    7be4:	add	x21, x19, x21
    7be8:	sub	x22, x1, #0x8
    7bec:	cmp	x21, x22
    7bf0:	b.ls	7d28 <ZSTD_free+0x294>  // b.plast
    7bf4:	ldr	x28, [x2, #16]
    7bf8:	cmp	x19, x22
    7bfc:	b.cs	7cfc <ZSTD_free+0x268>  // b.hs, b.nlast
    7c00:	sub	x0, x22, x19
    7c04:	str	x0, [sp, #120]
    7c08:	mov	x1, x23
    7c0c:	mov	x0, x19
    7c10:	bl	7b74 <ZSTD_free+0xe0>
    7c14:	add	x19, x19, #0x8
    7c18:	add	x23, x23, #0x8
    7c1c:	cmp	x22, x19
    7c20:	b.hi	7c08 <ZSTD_free+0x174>  // b.pmore
    7c24:	ldr	x0, [x20]
    7c28:	ldr	x1, [sp, #120]
    7c2c:	add	x0, x0, x1
    7c30:	str	x0, [x20]
    7c34:	mov	x19, x22
    7c38:	mov	x0, x19
    7c3c:	ldr	x1, [x20]
    7c40:	add	x2, x1, #0x1
    7c44:	str	x2, [x20]
    7c48:	ldrb	w1, [x1]
    7c4c:	strb	w1, [x0], #1
    7c50:	cmp	x21, x0
    7c54:	b.hi	7c3c <ZSTD_free+0x1a8>  // b.pmore
    7c58:	sub	x0, x21, x19
    7c5c:	add	x1, x19, #0x1
    7c60:	cmp	x21, x1
    7c64:	csinc	x0, x0, xzr, cs  // cs = hs, nlast
    7c68:	add	x19, x19, x0
    7c6c:	sub	x2, x21, x28
    7c70:	sub	x0, x21, x25
    7c74:	cmp	x0, x28
    7c78:	b.cs	7cb8 <ZSTD_free+0x224>  // b.hs, b.nlast
    7c7c:	ldr	x0, [sp, #104]
    7c80:	sub	x6, x21, x0
    7c84:	cmp	x6, x28
    7c88:	b.cc	7d30 <ZSTD_free+0x29c>  // b.lo, b.ul, b.last
    7c8c:	sub	x19, x25, x2
    7c90:	ldr	x2, [sp, #112]
    7c94:	sub	x1, x2, x19
    7c98:	add	x0, x1, x27
    7c9c:	cmp	x2, x0
    7ca0:	b.cs	7d08 <ZSTD_free+0x274>  // b.hs, b.nlast
    7ca4:	mov	x2, x19
    7ca8:	mov	x0, x21
    7cac:	bl	0 <grub_memmove>
    7cb0:	add	x19, x21, x19
    7cb4:	mov	x2, x25
    7cb8:	cmp	x24, x19
    7cbc:	b.ls	7cdc <ZSTD_free+0x248>  // b.plast
    7cc0:	sub	x24, x24, x19
    7cc4:	mov	x0, #0x0                   	// #0
    7cc8:	ldrb	w1, [x2, x0]
    7ccc:	strb	w1, [x19, x0]
    7cd0:	add	x0, x0, #0x1
    7cd4:	cmp	x0, x24
    7cd8:	b.ne	7cc8 <ZSTD_free+0x234>  // b.any
    7cdc:	mov	x0, x26
    7ce0:	ldp	x19, x20, [sp, #16]
    7ce4:	ldp	x21, x22, [sp, #32]
    7ce8:	ldp	x23, x24, [sp, #48]
    7cec:	ldp	x25, x26, [sp, #64]
    7cf0:	ldp	x27, x28, [sp, #80]
    7cf4:	ldp	x29, x30, [sp], #128
    7cf8:	ret
    7cfc:	cmp	x19, x21
    7d00:	b.cc	7c38 <ZSTD_free+0x1a4>  // b.lo, b.ul, b.last
    7d04:	b	7c6c <ZSTD_free+0x1d8>
    7d08:	mov	x2, x27
    7d0c:	mov	x0, x21
    7d10:	bl	0 <grub_memmove>
    7d14:	b	7cdc <ZSTD_free+0x248>
    7d18:	mov	x26, #0xffffffffffffffba    	// #-70
    7d1c:	b	7cdc <ZSTD_free+0x248>
    7d20:	mov	x26, #0xffffffffffffffec    	// #-20
    7d24:	b	7cdc <ZSTD_free+0x248>
    7d28:	mov	x26, #0xffffffffffffffff    	// #-1
    7d2c:	b	7cdc <ZSTD_free+0x248>
    7d30:	mov	x26, #0xffffffffffffffec    	// #-20
    7d34:	b	7cdc <ZSTD_free+0x248>
    7d38:	stp	x29, x30, [sp, #-224]!
    7d3c:	mov	x29, sp
    7d40:	stp	x19, x20, [sp, #16]
    7d44:	stp	x21, x22, [sp, #32]
    7d48:	stp	x23, x24, [sp, #48]
    7d4c:	stp	x25, x26, [sp, #64]
    7d50:	stp	x27, x28, [sp, #80]
    7d54:	mov	x22, x0
    7d58:	mov	x26, x3
    7d5c:	mov	x27, x4
    7d60:	mov	w23, w5
    7d64:	add	x21, x0, #0x8
    7d68:	mov	w0, #0x1                   	// #1
    7d6c:	lsl	w24, w0, w5
    7d70:	sub	w20, w24, #0x1
    7d74:	str	w5, [sp, #108]
    7d78:	str	w0, [sp, #104]
    7d7c:	sub	w3, w5, #0x1
    7d80:	lsl	w0, w0, w3
    7d84:	cmn	w2, #0x1
    7d88:	b.eq	7e9c <ZSTD_free+0x408>  // b.none
    7d8c:	mov	x28, x1
    7d90:	mov	w25, w2
    7d94:	sxth	w3, w0
    7d98:	add	x2, sp, #0x70
    7d9c:	mov	w6, w25
    7da0:	mov	w19, w20
    7da4:	mov	x0, #0x0                   	// #0
    7da8:	mov	w5, #0x0                   	// #0
    7dac:	mov	w4, #0x1                   	// #1
    7db0:	mov	w8, w4
    7db4:	mov	w7, #0x0                   	// #0
    7db8:	mov	w9, #0x1                   	// #1
    7dbc:	b	7de4 <ZSTD_free+0x350>
    7dc0:	add	x1, x21, w19, uxtw #3
    7dc4:	str	w0, [x1, #4]
    7dc8:	strh	w9, [x2]
    7dcc:	sub	w19, w19, #0x1
    7dd0:	add	x1, x0, #0x1
    7dd4:	add	x2, x2, #0x2
    7dd8:	cmp	x0, x6
    7ddc:	b.eq	7e6c <ZSTD_free+0x3d8>  // b.none
    7de0:	mov	x0, x1
    7de4:	ldrsh	w1, [x28, x0, lsl #1]
    7de8:	cmn	w1, #0x1
    7dec:	b.eq	7dc0 <ZSTD_free+0x32c>  // b.none
    7df0:	cmp	w1, w3
    7df4:	csel	w5, w5, w8, lt  // lt = tstop
    7df8:	csel	w4, w4, w7, lt  // lt = tstop
    7dfc:	strh	w1, [x2]
    7e00:	b	7dd0 <ZSTD_free+0x33c>
    7e04:	add	w2, w2, #0x1
    7e08:	ldrsh	w3, [x5]
    7e0c:	cmp	w3, w2
    7e10:	b.le	7e40 <ZSTD_free+0x3ac>
    7e14:	add	x3, x21, w0, uxtw #3
    7e18:	str	w4, [x3, #4]
    7e1c:	add	w0, w1, w0
    7e20:	and	w0, w0, w20
    7e24:	cmp	w19, w0
    7e28:	b.cs	7e04 <ZSTD_free+0x370>  // b.hs, b.nlast
    7e2c:	add	w0, w1, w0
    7e30:	and	w0, w0, w20
    7e34:	cmp	w19, w0
    7e38:	b.cc	7e2c <ZSTD_free+0x398>  // b.lo, b.ul, b.last
    7e3c:	b	7e04 <ZSTD_free+0x370>
    7e40:	add	w2, w4, #0x1
    7e44:	add	x28, x28, #0x2
    7e48:	cmp	w25, w4
    7e4c:	b.eq	7eac <ZSTD_free+0x418>  // b.none
    7e50:	mov	w4, w2
    7e54:	mov	x5, x28
    7e58:	ldrsh	w3, [x28]
    7e5c:	mov	w2, #0x0                   	// #0
    7e60:	cmp	w3, #0x0
    7e64:	b.gt	7e14 <ZSTD_free+0x380>
    7e68:	b	7e40 <ZSTD_free+0x3ac>
    7e6c:	cbz	w5, 7e74 <ZSTD_free+0x3e0>
    7e70:	str	w4, [sp, #104]
    7e74:	mov	x2, #0x8                   	// #8
    7e78:	add	x1, sp, #0x68
    7e7c:	mov	x0, x22
    7e80:	bl	0 <grub_memmove>
    7e84:	lsr	w1, w24, #3
    7e88:	add	w1, w1, w24, lsr #1
    7e8c:	add	w1, w1, #0x3
    7e90:	mov	w0, #0x0                   	// #0
    7e94:	mov	w4, #0x0                   	// #0
    7e98:	b	7e54 <ZSTD_free+0x3c0>
    7e9c:	mov	x2, #0x8                   	// #8
    7ea0:	add	x1, sp, #0x68
    7ea4:	mov	x0, x22
    7ea8:	bl	0 <grub_memmove>
    7eac:	cbz	w24, 7f10 <ZSTD_free+0x47c>
    7eb0:	add	x22, x22, #0x10
    7eb4:	add	x20, x22, w20, uxtw #3
    7eb8:	add	x3, sp, #0x70
    7ebc:	mov	w5, #0x1f                  	// #31
    7ec0:	ldr	w2, [x21, #4]
    7ec4:	lsl	x0, x2, #1
    7ec8:	ldrh	w1, [x3, x0]
    7ecc:	add	w4, w1, #0x1
    7ed0:	strh	w4, [x3, x0]
    7ed4:	clz	w0, w1
    7ed8:	sub	w0, w5, w0
    7edc:	sub	w0, w23, w0
    7ee0:	and	w0, w0, #0xff
    7ee4:	strb	w0, [x21, #3]
    7ee8:	lsl	w0, w1, w0
    7eec:	sub	w0, w0, w24
    7ef0:	strh	w0, [x21]
    7ef4:	ldr	w0, [x27, x2, lsl #2]
    7ef8:	strb	w0, [x21, #2]
    7efc:	ldr	w0, [x26, x2, lsl #2]
    7f00:	str	w0, [x21, #4]
    7f04:	add	x21, x21, #0x8
    7f08:	cmp	x21, x20
    7f0c:	b.ne	7ec0 <ZSTD_free+0x42c>  // b.any
    7f10:	ldp	x19, x20, [sp, #16]
    7f14:	ldp	x21, x22, [sp, #32]
    7f18:	ldp	x23, x24, [sp, #48]
    7f1c:	ldp	x25, x26, [sp, #64]
    7f20:	ldp	x27, x28, [sp, #80]
    7f24:	ldp	x29, x30, [sp], #224
    7f28:	ret
    7f2c:	ldr	w4, [x2, #4]
    7f30:	ldr	w5, [x1, #8]
    7f34:	ldr	x3, [x1]
    7f38:	lsl	x3, x3, x5
    7f3c:	lsr	x3, x3, #1
    7f40:	mvn	w6, w4
    7f44:	lsr	x3, x3, x6
    7f48:	add	w4, w4, w5
    7f4c:	str	w4, [x1, #8]
    7f50:	str	x3, [x0]
    7f54:	ldr	w4, [x1, #8]
    7f58:	cmp	w4, #0x40
    7f5c:	b.hi	7fb0 <ZSTD_free+0x51c>  // b.pmore
    7f60:	ldr	x3, [x1, #16]
    7f64:	ldr	x5, [x1, #32]
    7f68:	cmp	x3, x5
    7f6c:	b.cs	7fbc <ZSTD_free+0x528>  // b.hs, b.nlast
    7f70:	ldr	x6, [x1, #24]
    7f74:	cmp	x3, x6
    7f78:	b.eq	7fb0 <ZSTD_free+0x51c>  // b.none
    7f7c:	lsr	w7, w4, #3
    7f80:	sub	x7, x3, x7
    7f84:	sub	x8, x3, x6
    7f88:	lsr	w5, w4, #3
    7f8c:	cmp	x6, x7
    7f90:	csel	w6, w5, w8, ls  // ls = plast
    7f94:	csel	w5, w5, w8, ls  // ls = plast
    7f98:	sub	x3, x3, x5
    7f9c:	str	x3, [x1, #16]
    7fa0:	sub	w4, w4, w6, lsl #3
    7fa4:	str	w4, [x1, #8]
    7fa8:	ldr	x3, [x3]
    7fac:	str	x3, [x1]
    7fb0:	add	x2, x2, #0x8
    7fb4:	str	x2, [x0, #8]
    7fb8:	ret
    7fbc:	lsr	w5, w4, #3
    7fc0:	sub	x3, x3, x5
    7fc4:	str	x3, [x1, #16]
    7fc8:	and	w4, w4, #0x7
    7fcc:	str	w4, [x1, #8]
    7fd0:	ldr	x3, [x3]
    7fd4:	str	x3, [x1]
    7fd8:	b	7fb0 <ZSTD_free+0x51c>
    7fdc:	cmp	x2, #0x8
    7fe0:	b.ls	81d4 <ZSTD_free+0x740>  // b.plast
    7fe4:	stp	x29, x30, [sp, #-192]!
    7fe8:	mov	x29, sp
    7fec:	stp	x19, x20, [sp, #16]
    7ff0:	stp	x21, x22, [sp, #32]
    7ff4:	str	x23, [sp, #48]
    7ff8:	mov	x20, x0
    7ffc:	mov	x21, x1
    8000:	mov	x19, x2
    8004:	add	x23, x1, #0x8
    8008:	mov	x4, #0x2818                	// #10264
    800c:	mov	x3, x0
    8010:	sub	x2, x2, #0x8
    8014:	mov	x1, x23
    8018:	add	x0, x0, x4
    801c:	bl	563c <HUF_readDTableX2_wksp>
    8020:	mov	x1, x0
    8024:	mov	x0, #0xffffffffffffffe2    	// #-30
    8028:	cmn	x1, #0x78
    802c:	b.hi	81b0 <ZSTD_free+0x71c>  // b.pmore
    8030:	add	x19, x21, x19
    8034:	add	x23, x23, x1
    8038:	mov	w0, #0x1f                  	// #31
    803c:	str	w0, [sp, #72]
    8040:	sub	x4, x19, x23
    8044:	mov	x3, x23
    8048:	add	x2, sp, #0x4c
    804c:	add	x1, sp, #0x48
    8050:	add	x0, sp, #0x50
    8054:	bl	58 <FSE_readNCount>
    8058:	mov	x22, x0
    805c:	cmn	x0, #0x78
    8060:	b.hi	81ac <ZSTD_free+0x718>  // b.pmore
    8064:	ldr	w2, [sp, #72]
    8068:	cmp	w2, #0x1f
    806c:	b.hi	81ac <ZSTD_free+0x718>  // b.pmore
    8070:	ldr	w5, [sp, #76]
    8074:	cmp	w5, #0x8
    8078:	b.hi	81ac <ZSTD_free+0x718>  // b.pmore
    807c:	adrp	x0, 0 <FSE_versionNumber>
    8080:	ldr	x3, [x0]
    8084:	add	x4, x3, #0x40
    8088:	add	x3, x3, #0xc0
    808c:	add	x1, sp, #0x50
    8090:	add	x0, x20, #0x1, lsl #12
    8094:	add	x0, x0, #0x8
    8098:	bl	7d38 <ZSTD_free+0x2a4>
    809c:	add	x22, x23, x22
    80a0:	mov	w0, #0x34                  	// #52
    80a4:	str	w0, [sp, #72]
    80a8:	sub	x4, x19, x22
    80ac:	mov	x3, x22
    80b0:	add	x2, sp, #0x4c
    80b4:	add	x1, sp, #0x48
    80b8:	add	x0, sp, #0x50
    80bc:	bl	58 <FSE_readNCount>
    80c0:	mov	x23, x0
    80c4:	cmn	x0, #0x78
    80c8:	b.hi	81c4 <ZSTD_free+0x730>  // b.pmore
    80cc:	ldr	w2, [sp, #72]
    80d0:	cmp	w2, #0x34
    80d4:	b.hi	81c4 <ZSTD_free+0x730>  // b.pmore
    80d8:	ldr	w5, [sp, #76]
    80dc:	cmp	w5, #0x9
    80e0:	b.hi	81c4 <ZSTD_free+0x730>  // b.pmore
    80e4:	adrp	x0, 0 <FSE_versionNumber>
    80e8:	ldr	x3, [x0]
    80ec:	add	x4, x3, #0x140
    80f0:	add	x3, x3, #0x218
    80f4:	add	x1, sp, #0x50
    80f8:	add	x0, x20, #0x1, lsl #12
    80fc:	add	x0, x0, #0x810
    8100:	bl	7d38 <ZSTD_free+0x2a4>
    8104:	add	x22, x22, x23
    8108:	mov	w0, #0x23                  	// #35
    810c:	str	w0, [sp, #72]
    8110:	sub	x4, x19, x22
    8114:	mov	x3, x22
    8118:	add	x2, sp, #0x4c
    811c:	add	x1, sp, #0x48
    8120:	add	x0, sp, #0x50
    8124:	bl	58 <FSE_readNCount>
    8128:	mov	x23, x0
    812c:	cmn	x0, #0x78
    8130:	b.hi	81cc <ZSTD_free+0x738>  // b.pmore
    8134:	ldr	w2, [sp, #72]
    8138:	cmp	w2, #0x23
    813c:	b.hi	81cc <ZSTD_free+0x738>  // b.pmore
    8140:	ldr	w5, [sp, #76]
    8144:	cmp	w5, #0x9
    8148:	b.hi	81cc <ZSTD_free+0x738>  // b.pmore
    814c:	adrp	x0, 0 <FSE_versionNumber>
    8150:	ldr	x3, [x0]
    8154:	add	x4, x3, #0x2f0
    8158:	add	x3, x3, #0x380
    815c:	add	x1, sp, #0x50
    8160:	mov	x0, x20
    8164:	bl	7d38 <ZSTD_free+0x2a4>
    8168:	add	x22, x22, x23
    816c:	add	x1, x22, #0xc
    8170:	mov	x0, #0xffffffffffffffe2    	// #-30
    8174:	cmp	x1, x19
    8178:	b.hi	81b0 <ZSTD_free+0x71c>  // b.pmore
    817c:	sub	x19, x19, x1
    8180:	add	x20, x20, #0x6, lsl #12
    8184:	add	x20, x20, #0x81c
    8188:	ldr	w0, [x22], #4
    818c:	cbz	w0, 81dc <ZSTD_free+0x748>
    8190:	cmp	x19, w0, uxtw
    8194:	b.ls	81e4 <ZSTD_free+0x750>  // b.plast
    8198:	str	w0, [x20], #4
    819c:	cmp	x1, x22
    81a0:	b.ne	8188 <ZSTD_free+0x6f4>  // b.any
    81a4:	sub	x0, x22, x21
    81a8:	b	81b0 <ZSTD_free+0x71c>
    81ac:	mov	x0, #0xffffffffffffffe2    	// #-30
    81b0:	ldp	x19, x20, [sp, #16]
    81b4:	ldp	x21, x22, [sp, #32]
    81b8:	ldr	x23, [sp, #48]
    81bc:	ldp	x29, x30, [sp], #192
    81c0:	ret
    81c4:	mov	x0, #0xffffffffffffffe2    	// #-30
    81c8:	b	81b0 <ZSTD_free+0x71c>
    81cc:	mov	x0, #0xffffffffffffffe2    	// #-30
    81d0:	b	81b0 <ZSTD_free+0x71c>
    81d4:	mov	x0, #0xffffffffffffffe2    	// #-30
    81d8:	ret
    81dc:	mov	x0, #0xffffffffffffffe2    	// #-30
    81e0:	b	81b0 <ZSTD_free+0x71c>
    81e4:	mov	x0, #0xffffffffffffffe2    	// #-30
    81e8:	b	81b0 <ZSTD_free+0x71c>
    81ec:	nop
	...
    81f8:	stp	x29, x30, [sp, #-80]!
    81fc:	mov	x29, sp
    8200:	stp	x19, x20, [sp, #16]
    8204:	stp	x21, x22, [sp, #32]
    8208:	mov	x19, x0
    820c:	mov	x20, x1
    8210:	mov	x21, x2
    8214:	mov	w22, w4
    8218:	cmp	x1, #0x0
    821c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    8220:	ccmp	w3, #0x1, #0x4, ne  // ne = any
    8224:	b.ne	8288 <ZSTD_free+0x7f4>  // b.any
    8228:	str	xzr, [x0]
    822c:	str	x1, [x19, #8]
    8230:	cbz	x1, 8300 <ZSTD_free+0x86c>
    8234:	str	x21, [x19, #16]
    8238:	mov	w0, #0xc                   	// #12
    823c:	movk	w0, #0xc00, lsl #16
    8240:	str	w0, [x19, #10288]
    8244:	add	x0, x19, #0x4, lsl #12
    8248:	str	wzr, [x0, #10304]
    824c:	str	wzr, [x0, #10308]
    8250:	cmp	w22, #0x1
    8254:	b.eq	832c <ZSTD_free+0x898>  // b.none
    8258:	cmp	x21, #0x7
    825c:	b.ls	8324 <ZSTD_free+0x890>  // b.plast
    8260:	ldr	x1, [x19, #8]
    8264:	ldr	w2, [x1]
    8268:	mov	w0, #0xa437                	// #42039
    826c:	movk	w0, #0xec30, lsl #16
    8270:	cmp	w2, w0
    8274:	b.eq	82c8 <ZSTD_free+0x834>  // b.none
    8278:	cmp	w22, #0x2
    827c:	b.ne	832c <ZSTD_free+0x898>  // b.any
    8280:	mov	x0, #0xffffffffffffffe2    	// #-30
    8284:	b	8330 <ZSTD_free+0x89c>
    8288:	add	x0, x0, #0x6, lsl #12
    828c:	add	x0, x0, #0x800
    8290:	ldp	x2, x3, [x0, #72]
    8294:	stp	x2, x3, [sp, #48]
    8298:	ldr	x0, [x19, #26712]
    829c:	str	x0, [sp, #64]
    82a0:	add	x1, sp, #0x30
    82a4:	mov	x0, x21
    82a8:	bl	7a10 <ZSTD_malloc>
    82ac:	str	x0, [x19]
    82b0:	str	x0, [x19, #8]
    82b4:	cbz	x0, 82f8 <ZSTD_free+0x864>
    82b8:	mov	x2, x21
    82bc:	mov	x1, x20
    82c0:	bl	0 <grub_memmove>
    82c4:	b	8234 <ZSTD_free+0x7a0>
    82c8:	ldr	w2, [x1, #4]
    82cc:	add	x0, x19, #0x4, lsl #12
    82d0:	str	w2, [x0, #10304]
    82d4:	mov	x2, x21
    82d8:	add	x0, x19, #0x18
    82dc:	bl	7fdc <ZSTD_free+0x548>
    82e0:	cmn	x0, #0x78
    82e4:	b.hi	8280 <ZSTD_free+0x7ec>  // b.pmore
    82e8:	add	x19, x19, #0x4, lsl #12
    82ec:	mov	w0, #0x1                   	// #1
    82f0:	str	w0, [x19, #10308]
    82f4:	b	832c <ZSTD_free+0x898>
    82f8:	mov	x0, #0xffffffffffffffc0    	// #-64
    82fc:	b	8330 <ZSTD_free+0x89c>
    8300:	str	xzr, [x0, #16]
    8304:	mov	w0, #0xc                   	// #12
    8308:	movk	w0, #0xc00, lsl #16
    830c:	str	w0, [x19, #10288]
    8310:	add	x19, x19, #0x4, lsl #12
    8314:	str	wzr, [x19, #10304]
    8318:	str	wzr, [x19, #10308]
    831c:	cmp	w4, #0x1
    8320:	b.eq	832c <ZSTD_free+0x898>  // b.none
    8324:	cmp	w22, #0x2
    8328:	b.eq	8280 <ZSTD_free+0x7ec>  // b.none
    832c:	mov	x0, #0x0                   	// #0
    8330:	ldp	x19, x20, [sp, #16]
    8334:	ldp	x21, x22, [sp, #32]
    8338:	ldp	x29, x30, [sp], #80
    833c:	ret
    8340:	stp	x29, x30, [sp, #-208]!
    8344:	mov	x29, sp
    8348:	stp	x19, x20, [sp, #16]
    834c:	stp	x21, x22, [sp, #32]
    8350:	str	x23, [sp, #48]
    8354:	mov	x20, x0
    8358:	mov	x21, x1
    835c:	str	w3, [sp, #76]
    8360:	mov	w22, w4
    8364:	mov	x23, x7
    8368:	cmp	w2, #0x2
    836c:	b.eq	8450 <ZSTD_free+0x9bc>  // b.none
    8370:	b.hi	83c8 <ZSTD_free+0x934>  // b.pmore
    8374:	cbz	w2, 842c <ZSTD_free+0x998>
    8378:	mov	x19, #0xffffffffffffffb8    	// #-72
    837c:	cbz	x6, 8438 <ZSTD_free+0x9a4>
    8380:	ldrb	w0, [x5]
    8384:	mov	x19, #0xffffffffffffffec    	// #-20
    8388:	ldr	w1, [sp, #76]
    838c:	cmp	w0, w1
    8390:	b.hi	8438 <ZSTD_free+0x9a4>  // b.pmore
    8394:	and	x0, x0, #0xff
    8398:	ldr	w1, [x7, x0, lsl #2]
    839c:	ldr	x2, [sp, #208]
    83a0:	ldr	w0, [x2, x0, lsl #2]
    83a4:	str	wzr, [x20, #4]
    83a8:	str	wzr, [x20]
    83ac:	strb	wzr, [x20, #11]
    83b0:	strh	wzr, [x20, #8]
    83b4:	strb	w0, [x20, #10]
    83b8:	str	w1, [x20, #12]
    83bc:	str	x20, [x21]
    83c0:	mov	x19, #0x1                   	// #1
    83c4:	b	8438 <ZSTD_free+0x9a4>
    83c8:	mov	x19, #0xffffffffffffffff    	// #-1
    83cc:	cmp	w2, #0x3
    83d0:	b.ne	8438 <ZSTD_free+0x9a4>  // b.any
    83d4:	mov	x19, #0xffffffffffffffec    	// #-20
    83d8:	ldr	w0, [sp, #224]
    83dc:	cbz	w0, 8438 <ZSTD_free+0x9a4>
    83e0:	ldr	w0, [sp, #232]
    83e4:	cmp	w0, #0x0
    83e8:	mov	x19, #0x0                   	// #0
    83ec:	ldr	w0, [sp, #240]
    83f0:	ccmp	w0, #0x18, #0x4, ne  // ne = any
    83f4:	b.le	8438 <ZSTD_free+0x9a4>
    83f8:	ldr	x1, [x1]
    83fc:	mov	w19, #0x1                   	// #1
    8400:	lsl	w19, w19, w4
    8404:	add	w19, w19, #0x1
    8408:	sbfiz	x19, x19, #3, #32
    840c:	cbz	x19, 8438 <ZSTD_free+0x9a4>
    8410:	mov	x0, #0x0                   	// #0
    8414:	prfm	pldl2keep, [x1, x0]
    8418:	add	x0, x0, #0x40
    841c:	cmp	x19, x0
    8420:	b.hi	8414 <ZSTD_free+0x980>  // b.pmore
    8424:	mov	x19, #0x0                   	// #0
    8428:	b	8438 <ZSTD_free+0x9a4>
    842c:	ldr	x0, [sp, #216]
    8430:	str	x0, [x1]
    8434:	mov	x19, #0x0                   	// #0
    8438:	mov	x0, x19
    843c:	ldp	x19, x20, [sp, #16]
    8440:	ldp	x21, x22, [sp, #32]
    8444:	ldr	x23, [sp, #48]
    8448:	ldp	x29, x30, [sp], #208
    844c:	ret
    8450:	mov	x4, x6
    8454:	mov	x3, x5
    8458:	add	x2, sp, #0x5c
    845c:	add	x1, sp, #0x4c
    8460:	add	x0, sp, #0x60
    8464:	bl	58 <FSE_readNCount>
    8468:	mov	x19, x0
    846c:	cmn	x0, #0x78
    8470:	b.hi	84a8 <ZSTD_free+0xa14>  // b.pmore
    8474:	ldr	w5, [sp, #92]
    8478:	cmp	w5, w22
    847c:	b.ls	8488 <ZSTD_free+0x9f4>  // b.plast
    8480:	mov	x19, #0xffffffffffffffec    	// #-20
    8484:	b	8438 <ZSTD_free+0x9a4>
    8488:	ldr	x4, [sp, #208]
    848c:	mov	x3, x23
    8490:	ldr	w2, [sp, #76]
    8494:	add	x1, sp, #0x60
    8498:	mov	x0, x20
    849c:	bl	7d38 <ZSTD_free+0x2a4>
    84a0:	str	x20, [x21]
    84a4:	b	8438 <ZSTD_free+0x9a4>
    84a8:	mov	x19, #0xffffffffffffffec    	// #-20
    84ac:	b	8438 <ZSTD_free+0x9a4>
    84b0:	sub	sp, sp, #0x260
    84b4:	stp	x29, x30, [sp]
    84b8:	mov	x29, sp
    84bc:	stp	x27, x28, [sp, #80]
    84c0:	str	x0, [sp, #216]
    84c4:	mov	x6, x1
    84c8:	str	x1, [sp, #168]
    84cc:	str	w5, [sp, #224]
    84d0:	add	x1, x1, x2
    84d4:	str	x1, [sp, #112]
    84d8:	mov	x2, x0
    84dc:	ldr	x0, [x0, #28952]
    84e0:	str	x0, [sp, #272]
    84e4:	ldr	x1, [x2, #28984]
    84e8:	add	x0, x0, x1
    84ec:	str	x0, [sp, #120]
    84f0:	cbz	w5, 935c <ZSTD_free+0x18c8>
    84f4:	ldr	x5, [x2, #28752]
    84f8:	str	x5, [sp, #152]
    84fc:	ldr	x0, [x2, #28760]
    8500:	str	x0, [sp, #208]
    8504:	ldr	x7, [x2, #28768]
    8508:	str	x7, [sp, #192]
    850c:	add	x0, x2, #0x4, lsl #12
    8510:	mov	w1, #0x1                   	// #1
    8514:	str	w1, [x0, #12460]
    8518:	ldr	w1, [x0, #10300]
    851c:	str	x1, [sp, #560]
    8520:	ldr	w1, [x0, #10304]
    8524:	str	x1, [sp, #568]
    8528:	ldr	w0, [x0, #10308]
    852c:	str	x0, [sp, #576]
    8530:	str	x5, [sp, #584]
    8534:	sub	x0, x6, x5
    8538:	str	x0, [sp, #600]
    853c:	str	x7, [sp, #592]
    8540:	cbz	x4, 85a4 <ZSTD_free+0xb10>
    8544:	str	x3, [sp, #496]
    8548:	add	x0, x3, #0x8
    854c:	str	x0, [sp, #504]
    8550:	cmp	x4, #0x7
    8554:	b.ls	85bc <ZSTD_free+0xb28>  // b.plast
    8558:	sub	x0, x4, #0x8
    855c:	add	x1, x3, x0
    8560:	str	x1, [sp, #488]
    8564:	ldr	x0, [x3, x0]
    8568:	str	x0, [sp, #472]
    856c:	add	x3, x3, x4
    8570:	ldurb	w0, [x3, #-1]
    8574:	cbz	w0, 85b4 <ZSTD_free+0xb20>
    8578:	clz	w0, w0
    857c:	sub	w0, w0, #0x17
    8580:	str	w0, [sp, #480]
    8584:	mov	x28, #0xffffffffffffffec    	// #-20
    8588:	cmn	x4, #0x78
    858c:	b.hi	93a0 <ZSTD_free+0x190c>  // b.pmore
    8590:	stp	x19, x20, [sp, #16]
    8594:	stp	x21, x22, [sp, #32]
    8598:	stp	x23, x24, [sp, #48]
    859c:	stp	x25, x26, [sp, #64]
    85a0:	b	8648 <ZSTD_free+0xbb4>
    85a4:	mov	x2, #0x28                  	// #40
    85a8:	mov	w1, #0x0                   	// #0
    85ac:	add	x0, sp, #0x1d8
    85b0:	bl	0 <grub_memset>
    85b4:	mov	x28, #0xffffffffffffffec    	// #-20
    85b8:	b	93a0 <ZSTD_free+0x190c>
    85bc:	str	x3, [sp, #488]
    85c0:	ldrb	w0, [x3]
    85c4:	str	x0, [sp, #472]
    85c8:	cmp	x4, #0x5
    85cc:	b.eq	86f8 <ZSTD_free+0xc64>  // b.none
    85d0:	b.hi	86d4 <ZSTD_free+0xc40>  // b.pmore
    85d4:	cmp	x4, #0x3
    85d8:	b.eq	85f4 <ZSTD_free+0xb60>  // b.none
    85dc:	cmp	x4, #0x4
    85e0:	b.ne	86c8 <ZSTD_free+0xc34>  // b.any
    85e4:	ldrb	w0, [x3, #3]
    85e8:	ldr	x1, [sp, #472]
    85ec:	add	x0, x1, x0, lsl #24
    85f0:	str	x0, [sp, #472]
    85f4:	ldrb	w0, [x3, #2]
    85f8:	ldr	x1, [sp, #472]
    85fc:	add	x0, x1, x0, lsl #16
    8600:	str	x0, [sp, #472]
    8604:	ldrb	w0, [x3, #1]
    8608:	ldr	x1, [sp, #472]
    860c:	add	x0, x1, x0, lsl #8
    8610:	str	x0, [sp, #472]
    8614:	add	x3, x3, x4
    8618:	ldurb	w0, [x3, #-1]
    861c:	cbz	w0, 85b4 <ZSTD_free+0xb20>
    8620:	stp	x19, x20, [sp, #16]
    8624:	stp	x21, x22, [sp, #32]
    8628:	stp	x23, x24, [sp, #48]
    862c:	stp	x25, x26, [sp, #64]
    8630:	clz	w1, w0
    8634:	mov	w0, #0x9                   	// #9
    8638:	sub	w4, w0, w4
    863c:	add	w0, w1, w4, lsl #3
    8640:	sub	w0, w0, #0x1f
    8644:	str	w0, [sp, #480]
    8648:	ldr	w0, [sp, #224]
    864c:	cmp	w0, #0x4
    8650:	mov	w22, #0x4                   	// #4
    8654:	csel	w22, w0, w22, le
    8658:	str	w22, [sp, #228]
    865c:	ldr	x19, [sp, #216]
    8660:	ldr	x2, [x19]
    8664:	add	x1, sp, #0x1d8
    8668:	add	x0, x1, #0x28
    866c:	bl	7f2c <ZSTD_free+0x498>
    8670:	ldr	x2, [x19, #16]
    8674:	add	x1, sp, #0x1d8
    8678:	add	x0, x1, #0x38
    867c:	bl	7f2c <ZSTD_free+0x498>
    8680:	ldr	x2, [x19, #8]
    8684:	add	x1, sp, #0x1d8
    8688:	add	x0, x1, #0x48
    868c:	bl	7f2c <ZSTD_free+0x498>
    8690:	ldr	x21, [sp, #504]
    8694:	ldr	x20, [sp, #496]
    8698:	ldr	x19, [sp, #520]
    869c:	ldr	x18, [sp, #552]
    86a0:	ldr	x17, [sp, #536]
    86a4:	ldr	x24, [sp, #584]
    86a8:	ldr	x23, [sp, #592]
    86ac:	add	x3, sp, #0x158
    86b0:	mov	w26, #0x0                   	// #0
    86b4:	add	x27, sp, #0x1e0
    86b8:	mov	x25, #0x0                   	// #0
    86bc:	mov	w14, #0x3f                  	// #63
    86c0:	mov	w8, w22
    86c4:	b	89a0 <ZSTD_free+0xf0c>
    86c8:	cmp	x4, #0x2
    86cc:	b.eq	8604 <ZSTD_free+0xb70>  // b.none
    86d0:	b	8614 <ZSTD_free+0xb80>
    86d4:	cmp	x4, #0x6
    86d8:	b.eq	86e8 <ZSTD_free+0xc54>  // b.none
    86dc:	ldrb	w1, [x3, #6]
    86e0:	add	x0, x0, x1, lsl #48
    86e4:	str	x0, [sp, #472]
    86e8:	ldrb	w0, [x3, #5]
    86ec:	ldr	x1, [sp, #472]
    86f0:	add	x0, x1, x0, lsl #40
    86f4:	str	x0, [sp, #472]
    86f8:	ldrb	w0, [x3, #4]
    86fc:	ldr	x1, [sp, #472]
    8700:	add	x0, x1, x0, lsl #32
    8704:	str	x0, [sp, #472]
    8708:	b	85e4 <ZSTD_free+0xb50>
    870c:	cmp	w5, #0x0
    8710:	cinc	x1, x9, eq  // eq = none
    8714:	cbz	x1, 94d8 <ZSTD_free+0x1a44>
    8718:	cmp	x1, #0x3
    871c:	b.ne	8744 <ZSTD_free+0xcb0>  // b.any
    8720:	ldr	x4, [sp, #560]
    8724:	subs	x4, x4, #0x1
    8728:	cinc	x9, x4, eq  // eq = none
    872c:	ldr	x1, [sp, #568]
    8730:	str	x1, [sp, #576]
    8734:	ldr	x1, [sp, #560]
    8738:	str	x1, [sp, #568]
    873c:	str	x9, [sp, #560]
    8740:	b	88c0 <ZSTD_free+0xe2c>
    8744:	add	x4, x1, #0xa
    8748:	ldr	x4, [x27, x4, lsl #3]
    874c:	cmp	x4, #0x0
    8750:	cinc	x9, x4, eq  // eq = none
    8754:	cmp	x1, #0x1
    8758:	b.eq	8734 <ZSTD_free+0xca0>  // b.none
    875c:	b	872c <ZSTD_free+0xc98>
    8760:	ldr	w4, [sp, #480]
    8764:	ldr	x1, [sp, #472]
    8768:	lsl	x1, x1, x4
    876c:	neg	w22, w16
    8770:	lsr	x1, x1, x22
    8774:	add	w16, w16, w4
    8778:	str	w16, [sp, #480]
    877c:	b	88cc <ZSTD_free+0xe38>
    8780:	ldr	w4, [sp, #480]
    8784:	cmp	w4, #0x40
    8788:	b.hi	88d8 <ZSTD_free+0xe44>  // b.pmore
    878c:	ldr	x1, [sp, #488]
    8790:	cmp	x1, x21
    8794:	b.cs	87d8 <ZSTD_free+0xd44>  // b.hs, b.nlast
    8798:	cmp	x1, x20
    879c:	b.eq	88d8 <ZSTD_free+0xe44>  // b.none
    87a0:	lsr	w16, w4, #3
    87a4:	sub	x16, x1, x16
    87a8:	sub	x22, x1, x20
    87ac:	lsr	w7, w4, #3
    87b0:	cmp	x20, x16
    87b4:	csel	w16, w7, w22, ls  // ls = plast
    87b8:	csel	w7, w7, w22, ls  // ls = plast
    87bc:	sub	x1, x1, x7
    87c0:	str	x1, [sp, #488]
    87c4:	sub	w4, w4, w16, lsl #3
    87c8:	str	w4, [sp, #480]
    87cc:	ldr	x1, [x1]
    87d0:	str	x1, [sp, #472]
    87d4:	b	88d8 <ZSTD_free+0xe44>
    87d8:	lsr	w7, w4, #3
    87dc:	sub	x1, x1, x7
    87e0:	str	x1, [sp, #488]
    87e4:	and	w4, w4, #0x7
    87e8:	str	w4, [sp, #480]
    87ec:	ldr	x1, [x1]
    87f0:	str	x1, [sp, #472]
    87f4:	b	88d8 <ZSTD_free+0xe44>
    87f8:	ldr	w4, [sp, #480]
    87fc:	ldr	x1, [sp, #472]
    8800:	lsl	x1, x1, x4
    8804:	neg	w7, w13
    8808:	lsr	x1, x1, x7
    880c:	add	w13, w13, w4
    8810:	str	w13, [sp, #480]
    8814:	b	88e4 <ZSTD_free+0xe50>
    8818:	lsr	w2, w1, #3
    881c:	sub	x0, x0, x2
    8820:	str	x0, [sp, #488]
    8824:	and	w1, w1, #0x7
    8828:	str	w1, [sp, #480]
    882c:	ldr	x0, [x0]
    8830:	str	x0, [sp, #472]
    8834:	cmp	w8, w26
    8838:	b.le	89f8 <ZSTD_free+0xf64>
    883c:	ldr	x0, [sp, #512]
    8840:	lsl	x0, x0, #3
    8844:	add	x2, x19, x0
    8848:	ldrb	w13, [x2, #2]
    884c:	ldr	x12, [sp, #544]
    8850:	lsl	x12, x12, #3
    8854:	add	x15, x18, x12
    8858:	ldrb	w16, [x15, #2]
    885c:	ldr	x10, [sp, #528]
    8860:	lsl	x10, x10, #3
    8864:	add	x11, x17, x10
    8868:	ldrb	w1, [x11, #2]
    886c:	add	w7, w13, w16
    8870:	add	w7, w7, w1
    8874:	ldr	w5, [x2, #4]
    8878:	ldr	w6, [x15, #4]
    887c:	cbz	w1, 94cc <ZSTD_free+0x1a38>
    8880:	ldr	w9, [x11, #4]
    8884:	ldr	w28, [sp, #480]
    8888:	ldr	x22, [sp, #472]
    888c:	lsl	x22, x22, x28
    8890:	neg	w4, w1
    8894:	lsr	x4, x22, x4
    8898:	add	w28, w1, w28
    889c:	str	w28, [sp, #480]
    88a0:	add	x9, x9, x4
    88a4:	cmp	w1, #0x1
    88a8:	b.ls	870c <ZSTD_free+0xc78>  // b.plast
    88ac:	ldr	x1, [sp, #568]
    88b0:	str	x1, [sp, #576]
    88b4:	ldr	x1, [sp, #560]
    88b8:	str	x1, [sp, #568]
    88bc:	str	x9, [sp, #560]
    88c0:	mov	w6, w6
    88c4:	mov	x1, x25
    88c8:	cbnz	w16, 8760 <ZSTD_free+0xccc>
    88cc:	add	x6, x6, x1
    88d0:	cmp	w7, #0x1e
    88d4:	b.hi	8780 <ZSTD_free+0xcec>  // b.pmore
    88d8:	mov	w5, w5
    88dc:	mov	x1, x25
    88e0:	cbnz	w13, 87f8 <ZSTD_free+0xd64>
    88e4:	add	x5, x5, x1
    88e8:	ldr	x4, [sp, #600]
    88ec:	add	x4, x5, x4
    88f0:	cmp	x4, x9
    88f4:	csel	x7, x24, x23, cs  // cs = hs, nlast
    88f8:	add	x1, x6, x4
    88fc:	str	x1, [sp, #600]
    8900:	ldrh	w16, [x19, x0]
    8904:	ldrb	w13, [x2, #3]
    8908:	ldr	x0, [sp, #472]
    890c:	ldr	w2, [sp, #480]
    8910:	add	w1, w13, w2
    8914:	str	w1, [sp, #480]
    8918:	lsl	x2, x0, x2
    891c:	lsr	x2, x2, #1
    8920:	sub	w13, w14, w13
    8924:	lsr	x2, x2, x13
    8928:	add	x2, x2, w16, uxth
    892c:	str	x2, [sp, #512]
    8930:	ldrh	w13, [x18, x12]
    8934:	ldrb	w2, [x15, #3]
    8938:	add	w12, w2, w1
    893c:	str	w12, [sp, #480]
    8940:	lsl	x1, x0, x1
    8944:	lsr	x1, x1, #1
    8948:	sub	w2, w14, w2
    894c:	lsr	x1, x1, x2
    8950:	add	x1, x1, w13, uxth
    8954:	str	x1, [sp, #544]
    8958:	ldrh	w2, [x17, x10]
    895c:	ldrb	w1, [x11, #3]
    8960:	add	w10, w1, w12
    8964:	str	w10, [sp, #480]
    8968:	lsl	x0, x0, x12
    896c:	lsr	x0, x0, #1
    8970:	sub	w1, w14, w1
    8974:	lsr	x0, x0, x1
    8978:	add	x0, x0, w2, uxth
    897c:	str	x0, [sp, #528]
    8980:	str	x5, [x3]
    8984:	str	x6, [x3, #8]
    8988:	str	x9, [x3, #16]
    898c:	sub	x4, x4, x9
    8990:	add	x4, x7, x4
    8994:	str	x4, [x3, #24]
    8998:	add	w26, w26, #0x1
    899c:	add	x3, x3, #0x20
    89a0:	ldr	w1, [sp, #480]
    89a4:	cmp	w1, #0x40
    89a8:	b.hi	94a0 <ZSTD_free+0x1a0c>  // b.pmore
    89ac:	ldr	x0, [sp, #488]
    89b0:	cmp	x0, x21
    89b4:	b.cs	8818 <ZSTD_free+0xd84>  // b.hs, b.nlast
    89b8:	cmp	x0, x20
    89bc:	b.eq	8834 <ZSTD_free+0xda0>  // b.none
    89c0:	lsr	w4, w1, #3
    89c4:	sub	x4, x0, x4
    89c8:	sub	x5, x0, x20
    89cc:	lsr	w2, w1, #3
    89d0:	cmp	x20, x4
    89d4:	csel	w4, w2, w5, ls  // ls = plast
    89d8:	csel	w2, w2, w5, ls  // ls = plast
    89dc:	sub	x0, x0, x2
    89e0:	str	x0, [sp, #488]
    89e4:	sub	w1, w1, w4, lsl #3
    89e8:	str	w1, [sp, #480]
    89ec:	ldr	x0, [x0]
    89f0:	str	x0, [sp, #472]
    89f4:	b	8834 <ZSTD_free+0xda0>
    89f8:	ldr	x27, [sp, #168]
    89fc:	ldr	x0, [sp, #112]
    8a00:	sub	x1, x0, #0x8
    8a04:	str	x1, [sp, #200]
    8a08:	sub	x0, x0, #0xd
    8a0c:	str	x0, [sp, #232]
    8a10:	mov	x0, x27
    8a14:	mov	w27, w26
    8a18:	mov	x26, x0
    8a1c:	b	8bc4 <ZSTD_free+0x1130>
    8a20:	cmp	w0, #0x0
    8a24:	cinc	x2, x25, eq  // eq = none
    8a28:	cbz	x2, 94c4 <ZSTD_free+0x1a30>
    8a2c:	cmp	x2, #0x3
    8a30:	b.ne	8a58 <ZSTD_free+0xfc4>  // b.any
    8a34:	ldr	x2, [sp, #560]
    8a38:	subs	x2, x2, #0x1
    8a3c:	cinc	x25, x2, eq  // eq = none
    8a40:	ldr	x2, [sp, #568]
    8a44:	str	x2, [sp, #576]
    8a48:	ldr	x2, [sp, #560]
    8a4c:	str	x2, [sp, #568]
    8a50:	str	x25, [sp, #560]
    8a54:	b	8cbc <ZSTD_free+0x1228>
    8a58:	add	x16, x2, #0xa
    8a5c:	add	x17, sp, #0x1e0
    8a60:	ldr	x16, [x17, x16, lsl #3]
    8a64:	cmp	x16, #0x0
    8a68:	cinc	x25, x16, eq  // eq = none
    8a6c:	cmp	x2, #0x1
    8a70:	b.eq	8a48 <ZSTD_free+0xfb4>  // b.none
    8a74:	b	8a40 <ZSTD_free+0xfac>
    8a78:	ldr	w16, [sp, #480]
    8a7c:	ldr	x2, [sp, #472]
    8a80:	lsl	x2, x2, x16
    8a84:	neg	w17, w13
    8a88:	lsr	x2, x2, x17
    8a8c:	add	w13, w13, w16
    8a90:	str	w13, [sp, #480]
    8a94:	b	8cc8 <ZSTD_free+0x1234>
    8a98:	ldr	w8, [sp, #480]
    8a9c:	cmp	w8, #0x40
    8aa0:	b.hi	8cd8 <ZSTD_free+0x1244>  // b.pmore
    8aa4:	ldr	x2, [sp, #488]
    8aa8:	cmp	x2, x14
    8aac:	b.cs	8af4 <ZSTD_free+0x1060>  // b.hs, b.nlast
    8ab0:	ldr	x13, [sp, #496]
    8ab4:	cmp	x2, x13
    8ab8:	b.eq	8cd8 <ZSTD_free+0x1244>  // b.none
    8abc:	lsr	w14, w8, #3
    8ac0:	sub	x14, x2, x14
    8ac4:	sub	x16, x2, x13
    8ac8:	lsr	w11, w8, #3
    8acc:	cmp	x13, x14
    8ad0:	csel	w13, w11, w16, ls  // ls = plast
    8ad4:	csel	w11, w11, w16, ls  // ls = plast
    8ad8:	sub	x2, x2, x11
    8adc:	str	x2, [sp, #488]
    8ae0:	sub	w8, w8, w13, lsl #3
    8ae4:	str	w8, [sp, #480]
    8ae8:	ldr	x2, [x2]
    8aec:	str	x2, [sp, #472]
    8af0:	b	8cd8 <ZSTD_free+0x1244>
    8af4:	lsr	w11, w8, #3
    8af8:	sub	x2, x2, x11
    8afc:	str	x2, [sp, #488]
    8b00:	and	w8, w8, #0x7
    8b04:	str	w8, [sp, #480]
    8b08:	ldr	x2, [x2]
    8b0c:	str	x2, [sp, #472]
    8b10:	b	8cd8 <ZSTD_free+0x1244>
    8b14:	ldr	w8, [sp, #480]
    8b18:	ldr	x2, [sp, #472]
    8b1c:	lsl	x2, x2, x8
    8b20:	neg	w11, w12
    8b24:	lsr	x2, x2, x11
    8b28:	add	w12, w12, w8
    8b2c:	str	w12, [sp, #480]
    8b30:	b	8ce4 <ZSTD_free+0x1250>
    8b34:	ldr	x23, [sp, #584]
    8b38:	b	8d04 <ZSTD_free+0x1270>
    8b3c:	ldr	x0, [sp, #144]
    8b40:	str	x0, [sp, #288]
    8b44:	ldr	x0, [sp, #160]
    8b48:	str	x0, [sp, #296]
    8b4c:	str	x20, [sp, #304]
    8b50:	add	x0, sp, #0x200
    8b54:	ldp	x0, x1, [x0, #-232]
    8b58:	stp	x0, x1, [sp, #240]
    8b5c:	add	x0, sp, #0x200
    8b60:	ldp	x0, x1, [x0, #-216]
    8b64:	stp	x0, x1, [sp, #256]
    8b68:	ldr	x7, [sp, #192]
    8b6c:	ldr	x6, [sp, #208]
    8b70:	ldr	x5, [sp, #152]
    8b74:	ldr	x4, [sp, #120]
    8b78:	add	x3, sp, #0x110
    8b7c:	add	x2, sp, #0xf0
    8b80:	ldr	x1, [sp, #112]
    8b84:	mov	x0, x26
    8b88:	bl	7b8c <ZSTD_free+0xf8>
    8b8c:	mov	x28, x0
    8b90:	cmn	x28, #0x78
    8b94:	b.hi	94e0 <ZSTD_free+0x1a4c>  // b.pmore
    8b98:	ldr	x0, [sp, #136]
    8b9c:	prfm	pldl2keep, [x0]
    8ba0:	add	x1, sp, #0x158
    8ba4:	ldr	x2, [sp, #128]
    8ba8:	str	x2, [x1, x23]
    8bac:	ldr	x1, [sp, #104]
    8bb0:	str	x1, [x19, #8]
    8bb4:	str	x25, [x19, #16]
    8bb8:	str	x0, [x19, #24]
    8bbc:	add	x26, x26, x28
    8bc0:	add	w27, w27, #0x1
    8bc4:	ldr	w1, [sp, #480]
    8bc8:	cmp	w1, #0x40
    8bcc:	b.hi	9444 <ZSTD_free+0x19b0>  // b.pmore
    8bd0:	ldr	x0, [sp, #488]
    8bd4:	ldr	x14, [sp, #504]
    8bd8:	cmp	x0, x14
    8bdc:	b.cs	9034 <ZSTD_free+0x15a0>  // b.hs, b.nlast
    8be0:	ldr	x3, [sp, #496]
    8be4:	cmp	x0, x3
    8be8:	b.eq	8c20 <ZSTD_free+0x118c>  // b.none
    8bec:	lsr	w4, w1, #3
    8bf0:	sub	x4, x0, x4
    8bf4:	sub	x5, x0, x3
    8bf8:	lsr	w2, w1, #3
    8bfc:	cmp	x3, x4
    8c00:	csel	w3, w2, w5, ls  // ls = plast
    8c04:	csel	w2, w2, w5, ls  // ls = plast
    8c08:	sub	x0, x0, x2
    8c0c:	str	x0, [sp, #488]
    8c10:	sub	w1, w1, w3, lsl #3
    8c14:	str	w1, [sp, #480]
    8c18:	ldr	x0, [x0]
    8c1c:	str	x0, [sp, #472]
    8c20:	ldr	w0, [sp, #224]
    8c24:	cmp	w0, w27
    8c28:	b.le	9054 <ZSTD_free+0x15c0>
    8c2c:	ldr	x1, [sp, #512]
    8c30:	lsl	x1, x1, #3
    8c34:	ldr	x15, [sp, #520]
    8c38:	add	x3, x15, x1
    8c3c:	ldrb	w12, [x3, #2]
    8c40:	ldr	x4, [sp, #544]
    8c44:	lsl	x4, x4, #3
    8c48:	ldr	x10, [sp, #552]
    8c4c:	add	x9, x10, x4
    8c50:	ldrb	w13, [x9, #2]
    8c54:	ldr	x5, [sp, #528]
    8c58:	lsl	x5, x5, #3
    8c5c:	ldr	x7, [sp, #536]
    8c60:	add	x6, x7, x5
    8c64:	ldrb	w2, [x6, #2]
    8c68:	add	w8, w12, w13
    8c6c:	add	w8, w8, w2
    8c70:	ldr	w0, [x3, #4]
    8c74:	ldr	w11, [x9, #4]
    8c78:	cbz	w2, 94b8 <ZSTD_free+0x1a24>
    8c7c:	ldr	w18, [x6, #4]
    8c80:	ldr	w17, [sp, #480]
    8c84:	ldr	x16, [sp, #472]
    8c88:	lsl	x16, x16, x17
    8c8c:	neg	w19, w2
    8c90:	lsr	x16, x16, x19
    8c94:	add	w17, w2, w17
    8c98:	str	w17, [sp, #480]
    8c9c:	add	x25, x18, x16
    8ca0:	cmp	w2, #0x1
    8ca4:	b.ls	8a20 <ZSTD_free+0xf8c>  // b.plast
    8ca8:	ldr	x2, [sp, #568]
    8cac:	str	x2, [sp, #576]
    8cb0:	ldr	x2, [sp, #560]
    8cb4:	str	x2, [sp, #568]
    8cb8:	str	x25, [sp, #560]
    8cbc:	mov	w11, w11
    8cc0:	mov	x2, #0x0                   	// #0
    8cc4:	cbnz	w13, 8a78 <ZSTD_free+0xfe4>
    8cc8:	add	x2, x11, x2
    8ccc:	str	x2, [sp, #104]
    8cd0:	cmp	w8, #0x1e
    8cd4:	b.hi	8a98 <ZSTD_free+0x1004>  // b.pmore
    8cd8:	mov	w0, w0
    8cdc:	mov	x2, #0x0                   	// #0
    8ce0:	cbnz	w12, 8b14 <ZSTD_free+0x1080>
    8ce4:	add	x0, x0, x2
    8ce8:	mov	x2, x0
    8cec:	str	x0, [sp, #128]
    8cf0:	ldr	x0, [sp, #600]
    8cf4:	add	x0, x2, x0
    8cf8:	cmp	x0, x25
    8cfc:	b.cs	8b34 <ZSTD_free+0x10a0>  // b.hs, b.nlast
    8d00:	ldr	x23, [sp, #592]
    8d04:	sub	x2, x0, x25
    8d08:	add	x2, x23, x2
    8d0c:	str	x2, [sp, #136]
    8d10:	ldr	x2, [sp, #104]
    8d14:	add	x0, x2, x0
    8d18:	str	x0, [sp, #600]
    8d1c:	ldrh	w11, [x15, x1]
    8d20:	ldrb	w8, [x3, #3]
    8d24:	ldr	x0, [sp, #472]
    8d28:	ldr	w2, [sp, #480]
    8d2c:	add	w1, w8, w2
    8d30:	str	w1, [sp, #480]
    8d34:	lsl	x2, x0, x2
    8d38:	lsr	x2, x2, #1
    8d3c:	mov	w3, #0x3f                  	// #63
    8d40:	sub	w8, w3, w8
    8d44:	lsr	x2, x2, x8
    8d48:	add	x2, x2, w11, uxth
    8d4c:	str	x2, [sp, #512]
    8d50:	ldrh	w8, [x10, x4]
    8d54:	ldrb	w2, [x9, #3]
    8d58:	add	w4, w2, w1
    8d5c:	str	w4, [sp, #480]
    8d60:	lsl	x1, x0, x1
    8d64:	lsr	x1, x1, #1
    8d68:	sub	w2, w3, w2
    8d6c:	lsr	x1, x1, x2
    8d70:	add	x1, x1, w8, uxth
    8d74:	str	x1, [sp, #544]
    8d78:	ldrh	w1, [x7, x5]
    8d7c:	ldrb	w2, [x6, #3]
    8d80:	add	w5, w2, w4
    8d84:	str	w5, [sp, #480]
    8d88:	lsl	x0, x0, x4
    8d8c:	lsr	x0, x0, #1
    8d90:	sub	w3, w3, w2
    8d94:	lsr	x0, x0, x3
    8d98:	add	x0, x0, w1, uxth
    8d9c:	str	x0, [sp, #528]
    8da0:	ubfiz	x23, x27, #5, #2
    8da4:	add	x0, sp, #0x158
    8da8:	add	x19, x0, x23
    8dac:	ldp	x0, x1, [x19]
    8db0:	add	x2, sp, #0x200
    8db4:	stp	x0, x1, [x2, #-232]
    8db8:	ldp	x0, x1, [x19, #16]
    8dbc:	stp	x0, x1, [x2, #-216]
    8dc0:	add	x0, sp, #0x158
    8dc4:	ldr	x22, [x0, x23]
    8dc8:	ldr	x0, [x19, #8]
    8dcc:	str	x0, [sp, #144]
    8dd0:	add	x28, x22, x0
    8dd4:	add	x0, x26, x28
    8dd8:	str	x0, [sp, #176]
    8ddc:	ldr	x1, [sp, #272]
    8de0:	add	x2, x1, x22
    8de4:	str	x2, [sp, #184]
    8de8:	ldr	x3, [sp, #112]
    8dec:	cmp	x3, x0
    8df0:	b.cc	93b4 <ZSTD_free+0x1920>  // b.lo, b.ul, b.last
    8df4:	ldr	x0, [sp, #120]
    8df8:	cmp	x0, x2
    8dfc:	b.cc	93cc <ZSTD_free+0x1938>  // b.lo, b.ul, b.last
    8e00:	ldr	x0, [x19, #16]
    8e04:	str	x0, [sp, #160]
    8e08:	ldr	x20, [x19, #24]
    8e0c:	add	x21, x26, x22
    8e10:	ldr	x0, [sp, #200]
    8e14:	cmp	x21, x0
    8e18:	b.hi	8b3c <ZSTD_free+0x10a8>  // b.pmore
    8e1c:	mov	x0, x26
    8e20:	bl	7b74 <ZSTD_free+0xe0>
    8e24:	cmp	x22, #0x8
    8e28:	b.hi	8ed0 <ZSTD_free+0x143c>  // b.pmore
    8e2c:	ldr	x0, [sp, #184]
    8e30:	str	x0, [sp, #272]
    8e34:	ldr	x0, [sp, #152]
    8e38:	sub	x0, x21, x0
    8e3c:	ldr	x1, [sp, #160]
    8e40:	cmp	x1, x0
    8e44:	b.ls	8f14 <ZSTD_free+0x1480>  // b.plast
    8e48:	ldr	x0, [sp, #208]
    8e4c:	sub	x0, x21, x0
    8e50:	cmp	x1, x0
    8e54:	b.hi	93e4 <ZSTD_free+0x1950>  // b.pmore
    8e58:	ldr	x0, [sp, #144]
    8e5c:	add	x0, x20, x0
    8e60:	ldr	x1, [sp, #192]
    8e64:	cmp	x1, x0
    8e68:	b.cs	8efc <ZSTD_free+0x1468>  // b.hs, b.nlast
    8e6c:	ldr	x0, [sp, #192]
    8e70:	sub	x22, x0, x20
    8e74:	mov	x2, x22
    8e78:	mov	x1, x20
    8e7c:	mov	x0, x21
    8e80:	bl	0 <grub_memmove>
    8e84:	add	x21, x21, x22
    8e88:	ldr	x0, [sp, #144]
    8e8c:	sub	x4, x0, x22
    8e90:	str	x4, [sp, #144]
    8e94:	ldr	x0, [sp, #200]
    8e98:	cmp	x0, x21
    8e9c:	ccmp	x4, #0x2, #0x0, cs  // cs = hs, nlast
    8ea0:	b.hi	8f10 <ZSTD_free+0x147c>  // b.pmore
    8ea4:	cbz	x4, 8b90 <ZSTD_free+0x10fc>
    8ea8:	mov	w0, #0x0                   	// #0
    8eac:	mov	x1, #0x0                   	// #0
    8eb0:	ldr	x3, [sp, #152]
    8eb4:	ldrb	w2, [x3, x1]
    8eb8:	strb	w2, [x21, x1]
    8ebc:	add	w0, w0, #0x1
    8ec0:	mov	w1, w0
    8ec4:	cmp	x4, w0, uxtw
    8ec8:	b.hi	8eb4 <ZSTD_free+0x1420>  // b.pmore
    8ecc:	b	8b90 <ZSTD_free+0x10fc>
    8ed0:	add	x22, x26, #0x8
    8ed4:	ldr	x24, [sp, #272]
    8ed8:	add	x24, x24, #0x8
    8edc:	mov	x1, x24
    8ee0:	mov	x0, x22
    8ee4:	bl	7b74 <ZSTD_free+0xe0>
    8ee8:	add	x22, x22, #0x8
    8eec:	add	x24, x24, #0x8
    8ef0:	cmp	x21, x22
    8ef4:	b.hi	8edc <ZSTD_free+0x1448>  // b.pmore
    8ef8:	b	8e2c <ZSTD_free+0x1398>
    8efc:	ldr	x2, [sp, #144]
    8f00:	mov	x1, x20
    8f04:	mov	x0, x21
    8f08:	bl	0 <grub_memmove>
    8f0c:	b	8b90 <ZSTD_free+0x10fc>
    8f10:	ldr	x20, [sp, #152]
    8f14:	ldr	x2, [sp, #160]
    8f18:	cmp	x2, #0x7
    8f1c:	b.hi	8fc0 <ZSTD_free+0x152c>  // b.pmore
    8f20:	adrp	x0, 0 <FSE_versionNumber>
    8f24:	ldr	x0, [x0]
    8f28:	add	x1, x0, #0x410
    8f2c:	ldr	w22, [x1, x2, lsl #2]
    8f30:	ldrb	w1, [x20]
    8f34:	strb	w1, [x21]
    8f38:	ldrb	w1, [x20, #1]
    8f3c:	strb	w1, [x21, #1]
    8f40:	ldrb	w1, [x20, #2]
    8f44:	strb	w1, [x21, #2]
    8f48:	ldrb	w1, [x20, #3]
    8f4c:	strb	w1, [x21, #3]
    8f50:	add	x0, x0, #0x430
    8f54:	ldr	w0, [x0, x2, lsl #2]
    8f58:	add	x20, x20, x0
    8f5c:	mov	x2, #0x4                   	// #4
    8f60:	mov	x1, x20
    8f64:	add	x0, x21, x2
    8f68:	bl	0 <grub_memmove>
    8f6c:	sub	x20, x20, w22, sxtw
    8f70:	add	x22, x21, #0x8
    8f74:	add	x20, x20, #0x8
    8f78:	ldr	x0, [sp, #176]
    8f7c:	ldr	x1, [sp, #232]
    8f80:	cmp	x0, x1
    8f84:	b.ls	900c <ZSTD_free+0x1578>  // b.plast
    8f88:	ldr	x0, [sp, #200]
    8f8c:	cmp	x0, x22
    8f90:	b.hi	8fd0 <ZSTD_free+0x153c>  // b.pmore
    8f94:	ldr	x0, [sp, #176]
    8f98:	cmp	x0, x22
    8f9c:	b.ls	8b90 <ZSTD_free+0x10fc>  // b.plast
    8fa0:	sub	x1, x0, x22
    8fa4:	mov	x0, #0x0                   	// #0
    8fa8:	ldrb	w2, [x20, x0]
    8fac:	strb	w2, [x22, x0]
    8fb0:	add	x0, x0, #0x1
    8fb4:	cmp	x1, x0
    8fb8:	b.ne	8fa8 <ZSTD_free+0x1514>  // b.any
    8fbc:	b	8b90 <ZSTD_free+0x10fc>
    8fc0:	mov	x1, x20
    8fc4:	mov	x0, x21
    8fc8:	bl	7b74 <ZSTD_free+0xe0>
    8fcc:	b	8f70 <ZSTD_free+0x14dc>
    8fd0:	mov	x24, x0
    8fd4:	sub	x0, x0, x22
    8fd8:	str	x0, [sp, #144]
    8fdc:	mov	x21, x20
    8fe0:	mov	x1, x21
    8fe4:	mov	x0, x22
    8fe8:	bl	7b74 <ZSTD_free+0xe0>
    8fec:	add	x22, x22, #0x8
    8ff0:	add	x21, x21, #0x8
    8ff4:	cmp	x24, x22
    8ff8:	b.hi	8fe0 <ZSTD_free+0x154c>  // b.pmore
    8ffc:	ldr	x0, [sp, #144]
    9000:	add	x20, x20, x0
    9004:	ldr	x22, [sp, #200]
    9008:	b	8f94 <ZSTD_free+0x1500>
    900c:	ldr	x0, [sp, #144]
    9010:	add	x21, x21, x0
    9014:	mov	x1, x20
    9018:	mov	x0, x22
    901c:	bl	7b74 <ZSTD_free+0xe0>
    9020:	add	x22, x22, #0x8
    9024:	add	x20, x20, #0x8
    9028:	cmp	x21, x22
    902c:	b.hi	9014 <ZSTD_free+0x1580>  // b.pmore
    9030:	b	8b90 <ZSTD_free+0x10fc>
    9034:	lsr	w2, w1, #3
    9038:	sub	x0, x0, x2
    903c:	str	x0, [sp, #488]
    9040:	and	w1, w1, #0x7
    9044:	str	w1, [sp, #480]
    9048:	ldr	x0, [x0]
    904c:	str	x0, [sp, #472]
    9050:	b	8c20 <ZSTD_free+0x118c>
    9054:	mov	x0, x26
    9058:	mov	w26, w27
    905c:	mov	x27, x0
    9060:	b	9460 <ZSTD_free+0x19cc>
    9064:	str	x21, [sp, #312]
    9068:	str	x25, [sp, #320]
    906c:	str	x2, [sp, #328]
    9070:	str	x19, [sp, #336]
    9074:	ldp	x0, x1, [x4, #-200]
    9078:	stp	x0, x1, [sp, #240]
    907c:	ldp	x0, x1, [x4, #-184]
    9080:	stp	x0, x1, [sp, #256]
    9084:	ldr	x7, [sp, #192]
    9088:	ldr	x6, [sp, #208]
    908c:	ldr	x5, [sp, #152]
    9090:	ldr	x4, [sp, #120]
    9094:	add	x3, sp, #0x110
    9098:	add	x2, sp, #0xf0
    909c:	ldr	x1, [sp, #112]
    90a0:	mov	x0, x27
    90a4:	bl	7b8c <ZSTD_free+0xf8>
    90a8:	mov	x28, x0
    90ac:	cmn	x28, #0x78
    90b0:	b.hi	94f4 <ZSTD_free+0x1a60>  // b.pmore
    90b4:	add	x27, x27, x28
    90b8:	add	w22, w22, #0x1
    90bc:	ldr	w0, [sp, #224]
    90c0:	cmp	w0, w22
    90c4:	b.eq	932c <ZSTD_free+0x1898>  // b.none
    90c8:	ubfiz	x1, x22, #5, #2
    90cc:	add	x0, sp, #0x158
    90d0:	add	x0, x0, x1
    90d4:	ldp	x2, x3, [x0]
    90d8:	add	x4, sp, #0x200
    90dc:	stp	x2, x3, [x4, #-200]
    90e0:	ldp	x2, x3, [x0, #16]
    90e4:	stp	x2, x3, [x4, #-184]
    90e8:	add	x2, sp, #0x158
    90ec:	ldr	x21, [x2, x1]
    90f0:	ldr	x25, [x0, #8]
    90f4:	add	x28, x21, x25
    90f8:	add	x23, x27, x28
    90fc:	ldr	x1, [sp, #272]
    9100:	add	x26, x1, x21
    9104:	ldr	x2, [sp, #112]
    9108:	cmp	x2, x23
    910c:	b.cc	93fc <ZSTD_free+0x1968>  // b.lo, b.ul, b.last
    9110:	ldr	x2, [sp, #120]
    9114:	cmp	x2, x26
    9118:	b.cc	9414 <ZSTD_free+0x1980>  // b.lo, b.ul, b.last
    911c:	ldr	x2, [x0, #16]
    9120:	str	x2, [sp, #104]
    9124:	ldr	x19, [x0, #24]
    9128:	add	x20, x27, x21
    912c:	ldr	x0, [sp, #128]
    9130:	cmp	x20, x0
    9134:	b.hi	9064 <ZSTD_free+0x15d0>  // b.pmore
    9138:	mov	x0, x27
    913c:	bl	7b74 <ZSTD_free+0xe0>
    9140:	cmp	x21, #0x8
    9144:	b.hi	91dc <ZSTD_free+0x1748>  // b.pmore
    9148:	str	x26, [sp, #272]
    914c:	ldr	x0, [sp, #152]
    9150:	sub	x0, x20, x0
    9154:	ldr	x1, [sp, #104]
    9158:	cmp	x1, x0
    915c:	b.ls	9220 <ZSTD_free+0x178c>  // b.plast
    9160:	ldr	x0, [sp, #208]
    9164:	sub	x0, x20, x0
    9168:	cmp	x1, x0
    916c:	b.hi	942c <ZSTD_free+0x1998>  // b.pmore
    9170:	add	x0, x19, x25
    9174:	ldr	x1, [sp, #192]
    9178:	cmp	x1, x0
    917c:	b.cs	9208 <ZSTD_free+0x1774>  // b.hs, b.nlast
    9180:	ldr	x0, [sp, #192]
    9184:	sub	x21, x0, x19
    9188:	mov	x2, x21
    918c:	mov	x1, x19
    9190:	mov	x0, x20
    9194:	bl	0 <grub_memmove>
    9198:	add	x20, x20, x21
    919c:	sub	x25, x25, x21
    91a0:	cmp	x25, #0x2
    91a4:	ldr	x0, [sp, #128]
    91a8:	ccmp	x0, x20, #0x0, hi  // hi = pmore
    91ac:	b.cs	921c <ZSTD_free+0x1788>  // b.hs, b.nlast
    91b0:	cbz	x25, 90ac <ZSTD_free+0x1618>
    91b4:	mov	w0, #0x0                   	// #0
    91b8:	mov	x1, #0x0                   	// #0
    91bc:	ldr	x2, [sp, #152]
    91c0:	ldrb	w2, [x2, x1]
    91c4:	strb	w2, [x20, x1]
    91c8:	add	w0, w0, #0x1
    91cc:	mov	w1, w0
    91d0:	cmp	x25, w0, uxtw
    91d4:	b.hi	91bc <ZSTD_free+0x1728>  // b.pmore
    91d8:	b	90ac <ZSTD_free+0x1618>
    91dc:	add	x21, x27, #0x8
    91e0:	ldr	x24, [sp, #272]
    91e4:	add	x24, x24, #0x8
    91e8:	mov	x1, x24
    91ec:	mov	x0, x21
    91f0:	bl	7b74 <ZSTD_free+0xe0>
    91f4:	add	x21, x21, #0x8
    91f8:	add	x24, x24, #0x8
    91fc:	cmp	x20, x21
    9200:	b.hi	91e8 <ZSTD_free+0x1754>  // b.pmore
    9204:	b	9148 <ZSTD_free+0x16b4>
    9208:	mov	x2, x25
    920c:	mov	x1, x19
    9210:	mov	x0, x20
    9214:	bl	0 <grub_memmove>
    9218:	b	90ac <ZSTD_free+0x1618>
    921c:	ldr	x19, [sp, #152]
    9220:	ldr	x2, [sp, #104]
    9224:	cmp	x2, #0x7
    9228:	b.hi	92c4 <ZSTD_free+0x1830>  // b.pmore
    922c:	adrp	x0, 0 <FSE_versionNumber>
    9230:	ldr	x0, [x0]
    9234:	add	x1, x0, #0x410
    9238:	ldr	w21, [x1, x2, lsl #2]
    923c:	ldrb	w1, [x19]
    9240:	strb	w1, [x20]
    9244:	ldrb	w1, [x19, #1]
    9248:	strb	w1, [x20, #1]
    924c:	ldrb	w1, [x19, #2]
    9250:	strb	w1, [x20, #2]
    9254:	ldrb	w1, [x19, #3]
    9258:	strb	w1, [x20, #3]
    925c:	add	x0, x0, #0x430
    9260:	ldr	w0, [x0, x2, lsl #2]
    9264:	add	x19, x19, x0
    9268:	mov	x2, #0x4                   	// #4
    926c:	mov	x1, x19
    9270:	add	x0, x20, x2
    9274:	bl	0 <grub_memmove>
    9278:	sub	x19, x19, w21, sxtw
    927c:	add	x21, x20, #0x8
    9280:	add	x19, x19, #0x8
    9284:	ldr	x0, [sp, #136]
    9288:	cmp	x23, x0
    928c:	b.ls	9308 <ZSTD_free+0x1874>  // b.plast
    9290:	ldr	x0, [sp, #128]
    9294:	cmp	x0, x21
    9298:	b.hi	92d4 <ZSTD_free+0x1840>  // b.pmore
    929c:	cmp	x23, x21
    92a0:	b.ls	90ac <ZSTD_free+0x1618>  // b.plast
    92a4:	sub	x23, x23, x21
    92a8:	mov	x0, #0x0                   	// #0
    92ac:	ldrb	w1, [x19, x0]
    92b0:	strb	w1, [x21, x0]
    92b4:	add	x0, x0, #0x1
    92b8:	cmp	x0, x23
    92bc:	b.ne	92ac <ZSTD_free+0x1818>  // b.any
    92c0:	b	90ac <ZSTD_free+0x1618>
    92c4:	mov	x1, x19
    92c8:	mov	x0, x20
    92cc:	bl	7b74 <ZSTD_free+0xe0>
    92d0:	b	927c <ZSTD_free+0x17e8>
    92d4:	mov	x24, x0
    92d8:	sub	x25, x0, x21
    92dc:	mov	x20, x19
    92e0:	mov	x1, x20
    92e4:	mov	x0, x21
    92e8:	bl	7b74 <ZSTD_free+0xe0>
    92ec:	add	x21, x21, #0x8
    92f0:	add	x20, x20, #0x8
    92f4:	cmp	x24, x21
    92f8:	b.hi	92e0 <ZSTD_free+0x184c>  // b.pmore
    92fc:	add	x19, x19, x25
    9300:	ldr	x21, [sp, #128]
    9304:	b	929c <ZSTD_free+0x1808>
    9308:	add	x20, x20, x25
    930c:	mov	x1, x19
    9310:	mov	x0, x21
    9314:	bl	7b74 <ZSTD_free+0xe0>
    9318:	add	x21, x21, #0x8
    931c:	add	x19, x19, #0x8
    9320:	cmp	x20, x21
    9324:	b.hi	930c <ZSTD_free+0x1878>  // b.pmore
    9328:	b	90ac <ZSTD_free+0x1618>
    932c:	ldr	x0, [sp, #216]
    9330:	add	x0, x0, #0x4, lsl #12
    9334:	ldr	x1, [sp, #560]
    9338:	str	w1, [x0, #10300]
    933c:	ldr	x1, [sp, #568]
    9340:	str	w1, [x0, #10304]
    9344:	ldr	x1, [sp, #576]
    9348:	str	w1, [x0, #10308]
    934c:	ldp	x21, x22, [sp, #32]
    9350:	ldp	x23, x24, [sp, #48]
    9354:	ldp	x25, x26, [sp, #64]
    9358:	b	9364 <ZSTD_free+0x18d0>
    935c:	stp	x19, x20, [sp, #16]
    9360:	ldr	x27, [sp, #168]
    9364:	ldr	x1, [sp, #272]
    9368:	ldr	x0, [sp, #120]
    936c:	sub	x19, x0, x1
    9370:	ldr	x0, [sp, #112]
    9374:	sub	x2, x0, x27
    9378:	mov	x28, #0xffffffffffffffba    	// #-70
    937c:	cmp	x19, x2
    9380:	b.hi	9508 <ZSTD_free+0x1a74>  // b.pmore
    9384:	mov	x2, x19
    9388:	mov	x0, x27
    938c:	bl	0 <grub_memmove>
    9390:	add	x19, x27, x19
    9394:	ldr	x0, [sp, #168]
    9398:	sub	x28, x19, x0
    939c:	ldp	x19, x20, [sp, #16]
    93a0:	mov	x0, x28
    93a4:	ldp	x27, x28, [sp, #80]
    93a8:	ldp	x29, x30, [sp]
    93ac:	add	sp, sp, #0x260
    93b0:	ret
    93b4:	mov	x28, #0xffffffffffffffba    	// #-70
    93b8:	ldp	x19, x20, [sp, #16]
    93bc:	ldp	x21, x22, [sp, #32]
    93c0:	ldp	x23, x24, [sp, #48]
    93c4:	ldp	x25, x26, [sp, #64]
    93c8:	b	93a0 <ZSTD_free+0x190c>
    93cc:	mov	x28, #0xffffffffffffffec    	// #-20
    93d0:	ldp	x19, x20, [sp, #16]
    93d4:	ldp	x21, x22, [sp, #32]
    93d8:	ldp	x23, x24, [sp, #48]
    93dc:	ldp	x25, x26, [sp, #64]
    93e0:	b	93a0 <ZSTD_free+0x190c>
    93e4:	mov	x28, #0xffffffffffffffec    	// #-20
    93e8:	ldp	x19, x20, [sp, #16]
    93ec:	ldp	x21, x22, [sp, #32]
    93f0:	ldp	x23, x24, [sp, #48]
    93f4:	ldp	x25, x26, [sp, #64]
    93f8:	b	93a0 <ZSTD_free+0x190c>
    93fc:	mov	x28, #0xffffffffffffffba    	// #-70
    9400:	ldp	x19, x20, [sp, #16]
    9404:	ldp	x21, x22, [sp, #32]
    9408:	ldp	x23, x24, [sp, #48]
    940c:	ldp	x25, x26, [sp, #64]
    9410:	b	93a0 <ZSTD_free+0x190c>
    9414:	mov	x28, #0xffffffffffffffec    	// #-20
    9418:	ldp	x19, x20, [sp, #16]
    941c:	ldp	x21, x22, [sp, #32]
    9420:	ldp	x23, x24, [sp, #48]
    9424:	ldp	x25, x26, [sp, #64]
    9428:	b	93a0 <ZSTD_free+0x190c>
    942c:	mov	x28, #0xffffffffffffffec    	// #-20
    9430:	ldp	x19, x20, [sp, #16]
    9434:	ldp	x21, x22, [sp, #32]
    9438:	ldp	x23, x24, [sp, #48]
    943c:	ldp	x25, x26, [sp, #64]
    9440:	b	93a0 <ZSTD_free+0x190c>
    9444:	mov	x0, x26
    9448:	mov	w26, w27
    944c:	mov	x27, x0
    9450:	mov	x28, #0xffffffffffffffec    	// #-20
    9454:	ldr	w0, [sp, #224]
    9458:	cmp	w0, w26
    945c:	b.gt	948c <ZSTD_free+0x19f8>
    9460:	ldr	w0, [sp, #228]
    9464:	sub	w22, w26, w0
    9468:	ldr	w0, [sp, #224]
    946c:	cmp	w0, w22
    9470:	b.le	932c <ZSTD_free+0x1898>
    9474:	ldr	x0, [sp, #112]
    9478:	sub	x1, x0, #0x8
    947c:	str	x1, [sp, #128]
    9480:	sub	x0, x0, #0xd
    9484:	str	x0, [sp, #136]
    9488:	b	90c8 <ZSTD_free+0x1634>
    948c:	ldp	x19, x20, [sp, #16]
    9490:	ldp	x21, x22, [sp, #32]
    9494:	ldp	x23, x24, [sp, #48]
    9498:	ldp	x25, x26, [sp, #64]
    949c:	b	93a0 <ZSTD_free+0x190c>
    94a0:	mov	x28, #0xffffffffffffffec    	// #-20
    94a4:	ldr	w0, [sp, #228]
    94a8:	cmp	w0, w26
    94ac:	b.gt	9510 <ZSTD_free+0x1a7c>
    94b0:	ldr	x27, [sp, #168]
    94b4:	b	9450 <ZSTD_free+0x19bc>
    94b8:	cmp	w0, #0x0
    94bc:	cset	x2, eq  // eq = none
    94c0:	cbz	w0, 8a58 <ZSTD_free+0xfc4>
    94c4:	ldr	x25, [sp, #560]
    94c8:	b	8cbc <ZSTD_free+0x1228>
    94cc:	cmp	w5, #0x0
    94d0:	cset	x1, eq  // eq = none
    94d4:	cbz	w5, 8744 <ZSTD_free+0xcb0>
    94d8:	ldr	x9, [sp, #560]
    94dc:	b	88c0 <ZSTD_free+0xe2c>
    94e0:	ldp	x19, x20, [sp, #16]
    94e4:	ldp	x21, x22, [sp, #32]
    94e8:	ldp	x23, x24, [sp, #48]
    94ec:	ldp	x25, x26, [sp, #64]
    94f0:	b	93a0 <ZSTD_free+0x190c>
    94f4:	ldp	x19, x20, [sp, #16]
    94f8:	ldp	x21, x22, [sp, #32]
    94fc:	ldp	x23, x24, [sp, #48]
    9500:	ldp	x25, x26, [sp, #64]
    9504:	b	93a0 <ZSTD_free+0x190c>
    9508:	ldp	x19, x20, [sp, #16]
    950c:	b	93a0 <ZSTD_free+0x190c>
    9510:	ldp	x19, x20, [sp, #16]
    9514:	ldp	x21, x22, [sp, #32]
    9518:	ldp	x23, x24, [sp, #48]
    951c:	ldp	x25, x26, [sp, #64]
    9520:	b	93a0 <ZSTD_free+0x190c>
    9524:	nop
	...

0000000000009530 <ZSTD_estimateDCtxSize>:
    9530:	mov	x0, #0x71f8                	// #29176
    9534:	movk	x0, #0x2, lsl #16
    9538:	ret

000000000000953c <ZSTD_initStaticDCtx>:
    953c:	tst	x0, #0x7
    9540:	mov	x2, #0x71f7                	// #29175
    9544:	movk	x2, #0x2, lsl #16
    9548:	ccmp	x1, x2, #0x0, eq  // eq = none
    954c:	b.ls	95a4 <ZSTD_initStaticDCtx+0x68>  // b.plast
    9550:	add	x2, x0, #0x4, lsl #12
    9554:	str	wzr, [x2, #12560]
    9558:	mov	x3, #0x1                   	// #1
    955c:	movk	x3, #0x800, lsl #16
    9560:	str	x3, [x0, #29072]
    9564:	str	xzr, [x0, #29024]
    9568:	str	xzr, [x0, #29016]
    956c:	str	xzr, [x0, #28768]
    9570:	str	wzr, [x2, #12652]
    9574:	str	xzr, [x0, #29056]
    9578:	str	xzr, [x0, #29088]
    957c:	str	wzr, [x2, #12656]
    9580:	str	xzr, [x0, #29120]
    9584:	str	wzr, [x2, #12744]
    9588:	str	wzr, [x2, #12756]
    958c:	str	wzr, [x2, #12624]
    9590:	str	x1, [x0, #29000]
    9594:	add	x1, x0, #0x27, lsl #12
    9598:	add	x1, x1, #0x1f8
    959c:	str	x1, [x0, #29048]
    95a0:	ret
    95a4:	mov	x0, #0x0                   	// #0
    95a8:	b	95a0 <ZSTD_initStaticDCtx+0x64>

00000000000095ac <ZSTD_createDCtx_advanced>:
    95ac:	stp	x29, x30, [sp, #-64]!
    95b0:	mov	x29, sp
    95b4:	str	x19, [sp, #16]
    95b8:	mov	x19, x0
    95bc:	ldr	x0, [x0]
    95c0:	cmp	x0, #0x0
    95c4:	cset	w1, eq  // eq = none
    95c8:	ldr	x0, [x19, #8]
    95cc:	cmp	x0, #0x0
    95d0:	cset	w0, eq  // eq = none
    95d4:	cmp	w0, w1, uxtb
    95d8:	b.ne	9668 <ZSTD_createDCtx_advanced+0xbc>  // b.any
    95dc:	ldp	x0, x1, [x19]
    95e0:	stp	x0, x1, [sp, #32]
    95e4:	ldr	x0, [x19, #16]
    95e8:	str	x0, [sp, #48]
    95ec:	add	x1, sp, #0x20
    95f0:	mov	x0, #0x71f8                	// #29176
    95f4:	movk	x0, #0x2, lsl #16
    95f8:	bl	7a10 <ZSTD_malloc>
    95fc:	cbz	x0, 965c <ZSTD_createDCtx_advanced+0xb0>
    9600:	add	x1, x0, #0x7, lsl #12
    9604:	ldp	x2, x3, [x19]
    9608:	stp	x2, x3, [x1, #288]
    960c:	ldr	x2, [x19, #16]
    9610:	str	x2, [x0, #28976]
    9614:	add	x1, x0, #0x4, lsl #12
    9618:	str	wzr, [x1, #12560]
    961c:	str	xzr, [x0, #29000]
    9620:	mov	x2, #0x1                   	// #1
    9624:	movk	x2, #0x800, lsl #16
    9628:	str	x2, [x0, #29072]
    962c:	str	xzr, [x0, #29024]
    9630:	str	xzr, [x0, #29016]
    9634:	str	xzr, [x0, #28768]
    9638:	str	wzr, [x1, #12652]
    963c:	str	xzr, [x0, #29048]
    9640:	str	xzr, [x0, #29056]
    9644:	str	xzr, [x0, #29088]
    9648:	str	wzr, [x1, #12656]
    964c:	str	xzr, [x0, #29120]
    9650:	str	wzr, [x1, #12744]
    9654:	str	wzr, [x1, #12756]
    9658:	str	wzr, [x1, #12624]
    965c:	ldr	x19, [sp, #16]
    9660:	ldp	x29, x30, [sp], #64
    9664:	ret
    9668:	mov	x0, #0x0                   	// #0
    966c:	b	965c <ZSTD_createDCtx_advanced+0xb0>

0000000000009670 <ZSTD_createDCtx>:
    9670:	stp	x29, x30, [sp, #-48]!
    9674:	mov	x29, sp
    9678:	adrp	x0, 0 <FSE_versionNumber>
    967c:	ldr	x0, [x0]
    9680:	add	x0, x0, #0x450
    9684:	ldp	x2, x3, [x0]
    9688:	stp	x2, x3, [sp, #16]
    968c:	ldr	x0, [x0, #16]
    9690:	str	x0, [sp, #32]
    9694:	add	x0, sp, #0x10
    9698:	bl	95ac <ZSTD_createDCtx_advanced>
    969c:	ldp	x29, x30, [sp], #48
    96a0:	ret
    96a4:	nop
	...

00000000000096b0 <ZSTD_copyDCtx>:
    96b0:	stp	x29, x30, [sp, #-16]!
    96b4:	mov	x29, sp
    96b8:	mov	x2, #0x7178                	// #29048
    96bc:	bl	0 <grub_memmove>
    96c0:	ldp	x29, x30, [sp], #16
    96c4:	ret

00000000000096c8 <ZSTD_isFrame>:
    96c8:	cmp	x1, #0x3
    96cc:	b.ls	9700 <ZSTD_isFrame+0x38>  // b.plast
    96d0:	ldr	w1, [x0]
    96d4:	mov	w0, #0x1                   	// #1
    96d8:	mov	w2, #0xb528                	// #46376
    96dc:	movk	w2, #0xfd2f, lsl #16
    96e0:	cmp	w1, w2
    96e4:	b.eq	96fc <ZSTD_isFrame+0x34>  // b.none
    96e8:	and	w1, w1, #0xfffffff0
    96ec:	mov	w0, #0x2a50                	// #10832
    96f0:	movk	w0, #0x184d, lsl #16
    96f4:	cmp	w1, w0
    96f8:	cset	w0, eq  // eq = none
    96fc:	ret
    9700:	mov	w0, #0x0                   	// #0
    9704:	b	96fc <ZSTD_isFrame+0x34>

0000000000009708 <ZSTD_frameHeaderSize>:
    9708:	stp	x29, x30, [sp, #-16]!
    970c:	mov	x29, sp
    9710:	mov	w2, #0x0                   	// #0
    9714:	bl	7ad0 <ZSTD_free+0x3c>
    9718:	ldp	x29, x30, [sp], #16
    971c:	ret

0000000000009720 <ZSTD_getFrameHeader_advanced>:
    9720:	stp	x29, x30, [sp, #-64]!
    9724:	mov	x29, sp
    9728:	stp	x19, x20, [sp, #16]
    972c:	stp	x21, x22, [sp, #32]
    9730:	str	x23, [sp, #48]
    9734:	mov	x21, x0
    9738:	mov	x22, x1
    973c:	mov	x23, x2
    9740:	mov	w20, w3
    9744:	cmp	w3, #0x1
    9748:	mov	x19, #0x5                   	// #5
    974c:	csinc	x19, x19, xzr, ne  // ne = any
    9750:	mov	x2, #0x28                  	// #40
    9754:	mov	w1, #0x0                   	// #0
    9758:	bl	0 <grub_memset>
    975c:	cmp	x23, x19
    9760:	b.cc	9910 <ZSTD_getFrameHeader_advanced+0x1f0>  // b.lo, b.ul, b.last
    9764:	cbz	x22, 9938 <ZSTD_getFrameHeader_advanced+0x218>
    9768:	cmp	w20, #0x1
    976c:	b.eq	97d0 <ZSTD_getFrameHeader_advanced+0xb0>  // b.none
    9770:	ldr	w0, [x22]
    9774:	mov	w1, #0xb528                	// #46376
    9778:	movk	w1, #0xfd2f, lsl #16
    977c:	cmp	w0, w1
    9780:	b.eq	97d0 <ZSTD_getFrameHeader_advanced+0xb0>  // b.none
    9784:	and	w0, w0, #0xfffffff0
    9788:	mov	x19, #0xfffffffffffffff6    	// #-10
    978c:	mov	w1, #0x2a50                	// #10832
    9790:	movk	w1, #0x184d, lsl #16
    9794:	cmp	w0, w1
    9798:	b.ne	9910 <ZSTD_getFrameHeader_advanced+0x1f0>  // b.any
    979c:	mov	x19, #0x8                   	// #8
    97a0:	cmp	x23, #0x7
    97a4:	b.ls	9910 <ZSTD_getFrameHeader_advanced+0x1f0>  // b.plast
    97a8:	mov	x2, #0x28                  	// #40
    97ac:	mov	w1, #0x0                   	// #0
    97b0:	mov	x0, x21
    97b4:	bl	0 <grub_memset>
    97b8:	ldr	w0, [x22, #4]
    97bc:	str	x0, [x21]
    97c0:	mov	w0, #0x1                   	// #1
    97c4:	str	w0, [x21, #20]
    97c8:	mov	x19, #0x0                   	// #0
    97cc:	b	9910 <ZSTD_getFrameHeader_advanced+0x1f0>
    97d0:	mov	w2, w20
    97d4:	mov	x1, x23
    97d8:	mov	x0, x22
    97dc:	bl	7ad0 <ZSTD_free+0x3c>
    97e0:	cmp	x23, x0
    97e4:	b.cc	9940 <ZSTD_getFrameHeader_advanced+0x220>  // b.lo, b.ul, b.last
    97e8:	str	w0, [x21, #24]
    97ec:	add	x0, x22, x19
    97f0:	ldurb	w0, [x0, #-1]
    97f4:	ubfx	x3, x0, #5, #1
    97f8:	tbnz	w0, #3, 9948 <ZSTD_getFrameHeader_advanced+0x228>
    97fc:	cbnz	w3, 9838 <ZSTD_getFrameHeader_advanced+0x118>
    9800:	add	x5, x19, #0x1
    9804:	ldrb	w4, [x22, x19]
    9808:	lsr	w2, w4, #3
    980c:	add	w2, w2, #0xa
    9810:	mov	x19, #0xfffffffffffffff0    	// #-16
    9814:	cmp	w2, #0x1f
    9818:	b.hi	9910 <ZSTD_getFrameHeader_advanced+0x1f0>  // b.pmore
    981c:	mov	x1, #0x1                   	// #1
    9820:	lsl	x2, x1, x2
    9824:	lsr	x1, x2, #3
    9828:	and	x4, x4, #0x7
    982c:	madd	x1, x1, x4, x2
    9830:	mov	x19, x5
    9834:	b	983c <ZSTD_getFrameHeader_advanced+0x11c>
    9838:	mov	x1, #0x0                   	// #0
    983c:	and	w2, w0, #0x3
    9840:	cmp	w2, #0x2
    9844:	b.eq	989c <ZSTD_getFrameHeader_advanced+0x17c>  // b.none
    9848:	cmp	w2, #0x3
    984c:	b.eq	98a8 <ZSTD_getFrameHeader_advanced+0x188>  // b.none
    9850:	mov	w4, #0x0                   	// #0
    9854:	cmp	w2, #0x1
    9858:	b.eq	9890 <ZSTD_getFrameHeader_advanced+0x170>  // b.none
    985c:	lsr	w2, w0, #6
    9860:	cmp	w2, #0x2
    9864:	b.eq	98d4 <ZSTD_getFrameHeader_advanced+0x1b4>  // b.none
    9868:	cmp	w2, #0x3
    986c:	b.eq	9928 <ZSTD_getFrameHeader_advanced+0x208>  // b.none
    9870:	cmp	w2, #0x1
    9874:	b.eq	98b4 <ZSTD_getFrameHeader_advanced+0x194>  // b.none
    9878:	cbz	w3, 9930 <ZSTD_getFrameHeader_advanced+0x210>
    987c:	ldrb	w1, [x22, x19]
    9880:	str	wzr, [x21, #20]
    9884:	str	x1, [x21]
    9888:	str	x1, [x21, #8]
    988c:	b	98fc <ZSTD_getFrameHeader_advanced+0x1dc>
    9890:	ldrb	w4, [x22, x19]
    9894:	add	x19, x19, #0x1
    9898:	b	985c <ZSTD_getFrameHeader_advanced+0x13c>
    989c:	ldrh	w4, [x22, x19]
    98a0:	add	x19, x19, #0x2
    98a4:	b	985c <ZSTD_getFrameHeader_advanced+0x13c>
    98a8:	ldr	w4, [x22, x19]
    98ac:	add	x19, x19, #0x4
    98b0:	b	985c <ZSTD_getFrameHeader_advanced+0x13c>
    98b4:	ldrh	w2, [x22, x19]
    98b8:	add	x2, x2, #0x100
    98bc:	cbz	w3, 98e0 <ZSTD_getFrameHeader_advanced+0x1c0>
    98c0:	str	wzr, [x21, #20]
    98c4:	str	x2, [x21]
    98c8:	str	x2, [x21, #8]
    98cc:	mov	x1, x2
    98d0:	b	98fc <ZSTD_getFrameHeader_advanced+0x1dc>
    98d4:	ldr	w2, [x22, x19]
    98d8:	cmp	w3, #0x0
    98dc:	csel	x1, x1, x2, eq  // eq = none
    98e0:	str	wzr, [x21, #20]
    98e4:	str	x2, [x21]
    98e8:	str	x1, [x21, #8]
    98ec:	mov	x2, #0x1ffff               	// #131071
    98f0:	cmp	x1, x2
    98f4:	mov	x2, #0x20000               	// #131072
    98f8:	csel	x1, x1, x2, ls  // ls = plast
    98fc:	str	w1, [x21, #16]
    9900:	str	w4, [x21, #28]
    9904:	ubfx	x0, x0, #2, #1
    9908:	str	w0, [x21, #32]
    990c:	mov	x19, #0x0                   	// #0
    9910:	mov	x0, x19
    9914:	ldp	x19, x20, [sp, #16]
    9918:	ldp	x21, x22, [sp, #32]
    991c:	ldr	x23, [sp, #48]
    9920:	ldp	x29, x30, [sp], #64
    9924:	ret
    9928:	ldr	x2, [x22, x19]
    992c:	b	98d8 <ZSTD_getFrameHeader_advanced+0x1b8>
    9930:	mov	x2, #0xffffffffffffffff    	// #-1
    9934:	b	98e0 <ZSTD_getFrameHeader_advanced+0x1c0>
    9938:	mov	x19, #0xffffffffffffffff    	// #-1
    993c:	b	9910 <ZSTD_getFrameHeader_advanced+0x1f0>
    9940:	mov	x19, x0
    9944:	b	9910 <ZSTD_getFrameHeader_advanced+0x1f0>
    9948:	mov	x19, #0xfffffffffffffff2    	// #-14
    994c:	b	9910 <ZSTD_getFrameHeader_advanced+0x1f0>
    9950:	stp	x29, x30, [sp, #-32]!
    9954:	mov	x29, sp
    9958:	stp	x19, x20, [sp, #16]
    995c:	mov	x19, x0
    9960:	add	x0, x0, #0x4, lsl #12
    9964:	ldr	w3, [x0, #12560]
    9968:	add	x0, x19, #0x7, lsl #12
    996c:	add	x0, x0, #0x70
    9970:	bl	9720 <ZSTD_getFrameHeader_advanced>
    9974:	mov	x20, x0
    9978:	cmn	x0, #0x78
    997c:	b.hi	99ac <ZSTD_getFrameHeader_advanced+0x28c>  // b.pmore
    9980:	cbnz	x0, 99d0 <ZSTD_getFrameHeader_advanced+0x2b0>
    9984:	add	x0, x19, #0x4, lsl #12
    9988:	ldr	w0, [x0, #12428]
    998c:	cbz	w0, 99a0 <ZSTD_getFrameHeader_advanced+0x280>
    9990:	add	x1, x19, #0x4, lsl #12
    9994:	ldr	w1, [x1, #12648]
    9998:	cmp	w0, w1
    999c:	b.ne	99d8 <ZSTD_getFrameHeader_advanced+0x2b8>  // b.any
    99a0:	add	x0, x19, #0x4, lsl #12
    99a4:	ldr	w0, [x0, #12432]
    99a8:	cbnz	w0, 99bc <ZSTD_getFrameHeader_advanced+0x29c>
    99ac:	mov	x0, x20
    99b0:	ldp	x19, x20, [sp, #16]
    99b4:	ldp	x29, x30, [sp], #32
    99b8:	ret
    99bc:	mov	x1, #0x0                   	// #0
    99c0:	add	x0, x19, #0x7, lsl #12
    99c4:	add	x0, x0, #0xb0
    99c8:	bl	70c8 <XXH64_reset>
    99cc:	b	99ac <ZSTD_getFrameHeader_advanced+0x28c>
    99d0:	mov	x20, #0xffffffffffffffb8    	// #-72
    99d4:	b	99ac <ZSTD_getFrameHeader_advanced+0x28c>
    99d8:	mov	x20, #0xffffffffffffffe0    	// #-32
    99dc:	b	99ac <ZSTD_getFrameHeader_advanced+0x28c>

00000000000099e0 <ZSTD_getFrameHeader>:
    99e0:	stp	x29, x30, [sp, #-16]!
    99e4:	mov	x29, sp
    99e8:	mov	w3, #0x0                   	// #0
    99ec:	bl	9720 <ZSTD_getFrameHeader_advanced>
    99f0:	ldp	x29, x30, [sp], #16
    99f4:	ret

00000000000099f8 <ZSTD_getFrameContentSize>:
    99f8:	stp	x29, x30, [sp, #-64]!
    99fc:	mov	x29, sp
    9a00:	mov	x2, x1
    9a04:	mov	x1, x0
    9a08:	add	x0, sp, #0x18
    9a0c:	bl	99e0 <ZSTD_getFrameHeader>
    9a10:	cbnz	x0, 9a2c <ZSTD_getFrameContentSize+0x34>
    9a14:	ldr	w1, [sp, #44]
    9a18:	cmp	w1, #0x1
    9a1c:	ldr	x1, [sp, #24]
    9a20:	csel	x0, x1, x0, ne  // ne = any
    9a24:	ldp	x29, x30, [sp], #64
    9a28:	ret
    9a2c:	mov	x0, #0xfffffffffffffffe    	// #-2
    9a30:	b	9a24 <ZSTD_getFrameContentSize+0x2c>

0000000000009a34 <ZSTD_getDecompressedSize>:
    9a34:	stp	x29, x30, [sp, #-16]!
    9a38:	mov	x29, sp
    9a3c:	bl	99f8 <ZSTD_getFrameContentSize>
    9a40:	cmn	x0, #0x2
    9a44:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
    9a48:	ldp	x29, x30, [sp], #16
    9a4c:	ret

0000000000009a50 <ZSTD_getcBlockSize>:
    9a50:	cmp	x1, #0x2
    9a54:	b.ls	9a9c <ZSTD_getcBlockSize+0x4c>  // b.plast
    9a58:	ldrb	w1, [x0, #2]
    9a5c:	ldrh	w0, [x0]
    9a60:	add	w1, w0, w1, lsl #16
    9a64:	lsr	w3, w1, #3
    9a68:	and	w0, w1, #0x1
    9a6c:	str	w0, [x2, #4]
    9a70:	ubfx	x1, x1, #1, #2
    9a74:	str	w1, [x2]
    9a78:	str	w3, [x2, #8]
    9a7c:	mov	x0, #0x1                   	// #1
    9a80:	cmp	w1, #0x1
    9a84:	b.eq	9a98 <ZSTD_getcBlockSize+0x48>  // b.none
    9a88:	mov	w3, w3
    9a8c:	cmp	w1, #0x3
    9a90:	mov	x0, #0xffffffffffffffec    	// #-20
    9a94:	csel	x0, x3, x0, ne  // ne = any
    9a98:	ret
    9a9c:	mov	x0, #0xffffffffffffffb8    	// #-72
    9aa0:	b	9a98 <ZSTD_getcBlockSize+0x48>

0000000000009aa4 <ZSTD_decodeLiteralsBlock>:
    9aa4:	stp	x29, x30, [sp, #-48]!
    9aa8:	mov	x29, sp
    9aac:	stp	x21, x22, [sp, #32]
    9ab0:	mov	x21, #0xffffffffffffffec    	// #-20
    9ab4:	cmp	x2, #0x2
    9ab8:	b.ls	9c2c <ZSTD_decodeLiteralsBlock+0x188>  // b.plast
    9abc:	stp	x19, x20, [sp, #16]
    9ac0:	mov	x19, x0
    9ac4:	ldrb	w0, [x1]
    9ac8:	and	w20, w0, #0x3
    9acc:	cmp	w20, #0x2
    9ad0:	b.eq	9b48 <ZSTD_decodeLiteralsBlock+0xa4>  // b.none
    9ad4:	b.hi	9b38 <ZSTD_decodeLiteralsBlock+0x94>  // b.pmore
    9ad8:	cbz	w20, 9d4c <ZSTD_decodeLiteralsBlock+0x2a8>
    9adc:	cmp	w20, #0x1
    9ae0:	b.ne	9b2c <ZSTD_decodeLiteralsBlock+0x88>  // b.any
    9ae4:	ubfx	x3, x0, #2, #2
    9ae8:	cmp	w3, #0x1
    9aec:	b.eq	9e00 <ZSTD_decodeLiteralsBlock+0x35c>  // b.none
    9af0:	cmp	w3, #0x3
    9af4:	b.eq	9e10 <ZSTD_decodeLiteralsBlock+0x36c>  // b.none
    9af8:	ubfx	x20, x0, #3, #5
    9afc:	mov	x21, #0x1                   	// #1
    9b00:	add	x22, x19, #0x7, lsl #12
    9b04:	add	x22, x22, #0x1d8
    9b08:	add	x2, x20, #0x8
    9b0c:	ldrb	w1, [x1, x21]
    9b10:	mov	x0, x22
    9b14:	bl	0 <grub_memset>
    9b18:	str	x22, [x19, #28952]
    9b1c:	str	x20, [x19, #28984]
    9b20:	add	x21, x21, #0x1
    9b24:	ldp	x19, x20, [sp, #16]
    9b28:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9b2c:	mov	x21, #0xffffffffffffffec    	// #-20
    9b30:	ldp	x19, x20, [sp, #16]
    9b34:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9b38:	add	x3, x19, #0x4, lsl #12
    9b3c:	ldr	w3, [x3, #12456]
    9b40:	mov	x21, #0xffffffffffffffe2    	// #-30
    9b44:	cbz	w3, 9e68 <ZSTD_decodeLiteralsBlock+0x3c4>
    9b48:	mov	x21, #0xffffffffffffffec    	// #-20
    9b4c:	cmp	x2, #0x4
    9b50:	b.ls	9e70 <ZSTD_decodeLiteralsBlock+0x3cc>  // b.plast
    9b54:	ubfx	x0, x0, #2, #2
    9b58:	ldr	w3, [x1]
    9b5c:	cmp	w0, #0x2
    9b60:	b.eq	9c3c <ZSTD_decodeLiteralsBlock+0x198>  // b.none
    9b64:	cmp	w0, #0x3
    9b68:	b.eq	9c50 <ZSTD_decodeLiteralsBlock+0x1ac>  // b.none
    9b6c:	cmp	w0, #0x0
    9b70:	cset	w5, eq  // eq = none
    9b74:	ubfx	x22, x3, #4, #10
    9b78:	ubfx	x3, x3, #14, #10
    9b7c:	mov	x8, #0x3                   	// #3
    9b80:	add	x21, x8, x3
    9b84:	cmp	x21, x2
    9b88:	b.hi	9e44 <ZSTD_decodeLiteralsBlock+0x3a0>  // b.pmore
    9b8c:	add	x0, x19, #0x4, lsl #12
    9b90:	ldr	w0, [x0, #12652]
    9b94:	cmp	x22, #0x300
    9b98:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
    9b9c:	b.ne	9c84 <ZSTD_decodeLiteralsBlock+0x1e0>  // b.any
    9ba0:	cmp	w20, #0x3
    9ba4:	b.eq	9ca4 <ZSTD_decodeLiteralsBlock+0x200>  // b.none
    9ba8:	cbz	w5, 9d14 <ZSTD_decodeLiteralsBlock+0x270>
    9bac:	add	x0, x19, #0x4, lsl #12
    9bb0:	ldr	w7, [x0, #12624]
    9bb4:	mov	x6, #0x800                 	// #2048
    9bb8:	add	x5, x19, #0x6, lsl #12
    9bbc:	add	x5, x5, #0x848
    9bc0:	mov	x4, x3
    9bc4:	add	x3, x1, x8
    9bc8:	mov	x2, x22
    9bcc:	add	x1, x19, #0x7, lsl #12
    9bd0:	add	x1, x1, #0x1d8
    9bd4:	add	x0, x19, #0x2, lsl #12
    9bd8:	add	x0, x0, #0x838
    9bdc:	bl	63f8 <HUF_decompress1X1_DCtx_wksp_bmi2>
    9be0:	cmn	x0, #0x78
    9be4:	b.hi	9e50 <ZSTD_decodeLiteralsBlock+0x3ac>  // b.pmore
    9be8:	add	x0, x19, #0x7, lsl #12
    9bec:	add	x0, x0, #0x1d8
    9bf0:	str	x0, [x19, #28952]
    9bf4:	str	x22, [x19, #28984]
    9bf8:	add	x1, x19, #0x4, lsl #12
    9bfc:	mov	w2, #0x1                   	// #1
    9c00:	str	w2, [x1, #12456]
    9c04:	cmp	w20, #0x2
    9c08:	b.ne	9c18 <ZSTD_decodeLiteralsBlock+0x174>  // b.any
    9c0c:	add	x1, x19, #0x2, lsl #12
    9c10:	add	x1, x1, #0x838
    9c14:	str	x1, [x19, #24]
    9c18:	mov	x2, #0x8                   	// #8
    9c1c:	mov	w1, #0x0                   	// #0
    9c20:	add	x0, x0, x22
    9c24:	bl	0 <grub_memset>
    9c28:	ldp	x19, x20, [sp, #16]
    9c2c:	mov	x0, x21
    9c30:	ldp	x21, x22, [sp, #32]
    9c34:	ldp	x29, x30, [sp], #48
    9c38:	ret
    9c3c:	ubfx	x22, x3, #4, #14
    9c40:	lsr	w3, w3, #18
    9c44:	mov	w5, #0x0                   	// #0
    9c48:	mov	x8, #0x4                   	// #4
    9c4c:	b	9b80 <ZSTD_decodeLiteralsBlock+0xdc>
    9c50:	ubfx	x22, x3, #4, #18
    9c54:	ldrb	w0, [x1, #4]
    9c58:	mov	x21, #0xffffffffffffffec    	// #-20
    9c5c:	cmp	x22, #0x20, lsl #12
    9c60:	b.ls	9c6c <ZSTD_decodeLiteralsBlock+0x1c8>  // b.plast
    9c64:	ldp	x19, x20, [sp, #16]
    9c68:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9c6c:	lsl	w0, w0, #10
    9c70:	add	w3, w0, w3, lsr #22
    9c74:	mov	w3, w3
    9c78:	mov	w5, #0x0                   	// #0
    9c7c:	mov	x8, #0x5                   	// #5
    9c80:	b	9b80 <ZSTD_decodeLiteralsBlock+0xdc>
    9c84:	ldr	x4, [x19, #24]
    9c88:	add	x0, x4, #0x4, lsl #12
    9c8c:	add	x0, x0, #0x40
    9c90:	prfm	pldl2keep, [x4]
    9c94:	add	x4, x4, #0x40
    9c98:	cmp	x4, x0
    9c9c:	b.ne	9c90 <ZSTD_decodeLiteralsBlock+0x1ec>  // b.any
    9ca0:	b	9ba0 <ZSTD_decodeLiteralsBlock+0xfc>
    9ca4:	cbz	w5, 9cf0 <ZSTD_decodeLiteralsBlock+0x24c>
    9ca8:	add	x0, x19, #0x4, lsl #12
    9cac:	ldr	w5, [x0, #12624]
    9cb0:	ldr	x4, [x19, #24]
    9cb4:	add	x2, x1, x8
    9cb8:	mov	x1, x22
    9cbc:	add	x0, x19, #0x7, lsl #12
    9cc0:	add	x0, x0, #0x1d8
    9cc4:	bl	636c <HUF_decompress1X_usingDTable_bmi2>
    9cc8:	cmn	x0, #0x78
    9ccc:	b.hi	9e5c <ZSTD_decodeLiteralsBlock+0x3b8>  // b.pmore
    9cd0:	add	x0, x19, #0x7, lsl #12
    9cd4:	add	x0, x0, #0x1d8
    9cd8:	str	x0, [x19, #28952]
    9cdc:	str	x22, [x19, #28984]
    9ce0:	add	x19, x19, #0x4, lsl #12
    9ce4:	mov	w1, #0x1                   	// #1
    9ce8:	str	w1, [x19, #12456]
    9cec:	b	9c18 <ZSTD_decodeLiteralsBlock+0x174>
    9cf0:	add	x0, x19, #0x4, lsl #12
    9cf4:	ldr	w5, [x0, #12624]
    9cf8:	ldr	x4, [x19, #24]
    9cfc:	add	x2, x1, x8
    9d00:	mov	x1, x22
    9d04:	add	x0, x19, #0x7, lsl #12
    9d08:	add	x0, x0, #0x1d8
    9d0c:	bl	6480 <HUF_decompress4X_usingDTable_bmi2>
    9d10:	b	9cc8 <ZSTD_decodeLiteralsBlock+0x224>
    9d14:	add	x0, x19, #0x4, lsl #12
    9d18:	ldr	w7, [x0, #12624]
    9d1c:	mov	x6, #0x800                 	// #2048
    9d20:	add	x5, x19, #0x6, lsl #12
    9d24:	add	x5, x5, #0x848
    9d28:	mov	x4, x3
    9d2c:	add	x3, x1, x8
    9d30:	mov	x2, x22
    9d34:	add	x1, x19, #0x7, lsl #12
    9d38:	add	x1, x1, #0x1d8
    9d3c:	add	x0, x19, #0x2, lsl #12
    9d40:	add	x0, x0, #0x838
    9d44:	bl	650c <HUF_decompress4X_hufOnly_wksp_bmi2>
    9d48:	b	9be0 <ZSTD_decodeLiteralsBlock+0x13c>
    9d4c:	ubfx	x3, x0, #2, #2
    9d50:	cmp	w3, #0x1
    9d54:	b.eq	9d8c <ZSTD_decodeLiteralsBlock+0x2e8>  // b.none
    9d58:	cmp	w3, #0x3
    9d5c:	b.eq	9d9c <ZSTD_decodeLiteralsBlock+0x2f8>  // b.none
    9d60:	ubfx	x20, x0, #3, #5
    9d64:	mov	x0, #0x1                   	// #1
    9d68:	add	x21, x20, x0
    9d6c:	add	x3, x21, #0x8
    9d70:	cmp	x3, x2
    9d74:	b.ls	9dec <ZSTD_decodeLiteralsBlock+0x348>  // b.plast
    9d78:	cmp	x21, x2
    9d7c:	b.ls	9db4 <ZSTD_decodeLiteralsBlock+0x310>  // b.plast
    9d80:	mov	x21, #0xffffffffffffffec    	// #-20
    9d84:	ldp	x19, x20, [sp, #16]
    9d88:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9d8c:	ldrh	w0, [x1]
    9d90:	ubfx	x20, x0, #4, #12
    9d94:	mov	x0, #0x2                   	// #2
    9d98:	b	9d68 <ZSTD_decodeLiteralsBlock+0x2c4>
    9d9c:	ldrb	w0, [x1, #2]
    9da0:	ldrh	w20, [x1]
    9da4:	add	w0, w20, w0, lsl #16
    9da8:	ubfx	x20, x0, #4, #21
    9dac:	mov	x0, #0x3                   	// #3
    9db0:	b	9d68 <ZSTD_decodeLiteralsBlock+0x2c4>
    9db4:	add	x22, x19, #0x7, lsl #12
    9db8:	add	x22, x22, #0x1d8
    9dbc:	mov	x2, x20
    9dc0:	add	x1, x1, x0
    9dc4:	mov	x0, x22
    9dc8:	bl	0 <grub_memmove>
    9dcc:	str	x22, [x19, #28952]
    9dd0:	str	x20, [x19, #28984]
    9dd4:	mov	x2, #0x8                   	// #8
    9dd8:	mov	w1, #0x0                   	// #0
    9ddc:	add	x0, x22, x20
    9de0:	bl	0 <grub_memset>
    9de4:	ldp	x19, x20, [sp, #16]
    9de8:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9dec:	add	x0, x1, x0
    9df0:	str	x0, [x19, #28952]
    9df4:	str	x20, [x19, #28984]
    9df8:	ldp	x19, x20, [sp, #16]
    9dfc:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e00:	ldrh	w0, [x1]
    9e04:	ubfx	x20, x0, #4, #12
    9e08:	mov	x21, #0x2                   	// #2
    9e0c:	b	9b00 <ZSTD_decodeLiteralsBlock+0x5c>
    9e10:	ldrb	w0, [x1, #2]
    9e14:	ldrh	w20, [x1]
    9e18:	add	w0, w20, w0, lsl #16
    9e1c:	ubfx	x20, x0, #4, #21
    9e20:	mov	x21, #0xffffffffffffffec    	// #-20
    9e24:	cmp	x2, #0x3
    9e28:	b.ls	9e78 <ZSTD_decodeLiteralsBlock+0x3d4>  // b.plast
    9e2c:	cmp	x20, #0x20, lsl #12
    9e30:	b.ls	9e3c <ZSTD_decodeLiteralsBlock+0x398>  // b.plast
    9e34:	ldp	x19, x20, [sp, #16]
    9e38:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e3c:	mov	x21, #0x3                   	// #3
    9e40:	b	9b00 <ZSTD_decodeLiteralsBlock+0x5c>
    9e44:	mov	x21, #0xffffffffffffffec    	// #-20
    9e48:	ldp	x19, x20, [sp, #16]
    9e4c:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e50:	mov	x21, #0xffffffffffffffec    	// #-20
    9e54:	ldp	x19, x20, [sp, #16]
    9e58:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e5c:	mov	x21, #0xffffffffffffffec    	// #-20
    9e60:	ldp	x19, x20, [sp, #16]
    9e64:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e68:	ldp	x19, x20, [sp, #16]
    9e6c:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e70:	ldp	x19, x20, [sp, #16]
    9e74:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>
    9e78:	ldp	x19, x20, [sp, #16]
    9e7c:	b	9c2c <ZSTD_decodeLiteralsBlock+0x188>

0000000000009e80 <ZSTD_decodeSeqHeaders>:
    9e80:	cbz	x3, a0e0 <ZSTD_decodeSeqHeaders+0x260>
    9e84:	sub	sp, sp, #0x70
    9e88:	stp	x29, x30, [sp, #48]
    9e8c:	add	x29, sp, #0x30
    9e90:	stp	x19, x20, [sp, #64]
    9e94:	stp	x21, x22, [sp, #80]
    9e98:	mov	x21, x0
    9e9c:	mov	x20, x2
    9ea0:	ldrb	w22, [x2]
    9ea4:	cbz	w22, a0a4 <ZSTD_decodeSeqHeaders+0x224>
    9ea8:	add	x19, x2, x3
    9eac:	add	x5, x2, #0x1
    9eb0:	cmp	w22, #0x7f
    9eb4:	b.le	9edc <ZSTD_decodeSeqHeaders+0x5c>
    9eb8:	cmp	w22, #0xff
    9ebc:	b.eq	a0c0 <ZSTD_decodeSeqHeaders+0x240>  // b.none
    9ec0:	mov	x0, #0xffffffffffffffb8    	// #-72
    9ec4:	cmp	x19, x5
    9ec8:	b.ls	a0ac <ZSTD_decodeSeqHeaders+0x22c>  // b.plast
    9ecc:	sub	w22, w22, #0x80
    9ed0:	add	x5, x2, #0x2
    9ed4:	ldrb	w0, [x2, #1]
    9ed8:	add	w22, w0, w22, lsl #8
    9edc:	str	w22, [x1]
    9ee0:	add	x1, x5, #0x4
    9ee4:	mov	x0, #0xffffffffffffffb8    	// #-72
    9ee8:	cmp	x19, x1
    9eec:	b.cc	a0ac <ZSTD_decodeSeqHeaders+0x22c>  // b.lo, b.ul, b.last
    9ef0:	stp	x23, x24, [sp, #96]
    9ef4:	mov	x23, x5
    9ef8:	ldrb	w24, [x23], #1
    9efc:	adrp	x0, 0 <FSE_versionNumber>
    9f00:	ldr	x7, [x0]
    9f04:	str	w22, [sp, #32]
    9f08:	add	x0, x21, #0x4, lsl #12
    9f0c:	ldr	w1, [x0, #12652]
    9f10:	str	w1, [sp, #24]
    9f14:	ldr	w0, [x0, #12460]
    9f18:	str	w0, [sp, #16]
    9f1c:	add	x0, x7, #0x468
    9f20:	str	x0, [sp, #8]
    9f24:	add	x0, x7, #0x2f0
    9f28:	str	x0, [sp]
    9f2c:	add	x7, x7, #0x380
    9f30:	sub	x6, x19, x23
    9f34:	mov	x5, x23
    9f38:	mov	w4, #0x9                   	// #9
    9f3c:	mov	w3, #0x23                  	// #35
    9f40:	lsr	w2, w24, #6
    9f44:	mov	x1, x21
    9f48:	add	x0, x21, #0x20
    9f4c:	bl	8340 <ZSTD_free+0x8ac>
    9f50:	mov	x5, x0
    9f54:	mov	x0, #0xffffffffffffffec    	// #-20
    9f58:	cmn	x5, #0x78
    9f5c:	b.hi	a0e8 <ZSTD_decodeSeqHeaders+0x268>  // b.pmore
    9f60:	add	x23, x23, x5
    9f64:	adrp	x0, 0 <FSE_versionNumber>
    9f68:	ldr	x7, [x0]
    9f6c:	str	w22, [sp, #32]
    9f70:	add	x0, x21, #0x4, lsl #12
    9f74:	ldr	w1, [x0, #12652]
    9f78:	str	w1, [sp, #24]
    9f7c:	ldr	w0, [x0, #12460]
    9f80:	str	w0, [sp, #16]
    9f84:	add	x0, x7, #0x670
    9f88:	str	x0, [sp, #8]
    9f8c:	add	x0, x7, #0x40
    9f90:	str	x0, [sp]
    9f94:	add	x7, x7, #0xc0
    9f98:	sub	x6, x19, x23
    9f9c:	mov	x5, x23
    9fa0:	mov	w4, #0x8                   	// #8
    9fa4:	mov	w3, #0x1f                  	// #31
    9fa8:	ubfx	x2, x24, #4, #2
    9fac:	add	x1, x21, #0x10
    9fb0:	add	x0, x21, #0x1, lsl #12
    9fb4:	add	x0, x0, #0x28
    9fb8:	bl	8340 <ZSTD_free+0x8ac>
    9fbc:	mov	x5, x0
    9fc0:	mov	x0, #0xffffffffffffffec    	// #-20
    9fc4:	cmn	x5, #0x78
    9fc8:	b.hi	a0f0 <ZSTD_decodeSeqHeaders+0x270>  // b.pmore
    9fcc:	add	x23, x23, x5
    9fd0:	adrp	x0, 0 <FSE_versionNumber>
    9fd4:	ldr	x7, [x0]
    9fd8:	str	w22, [sp, #32]
    9fdc:	add	x0, x21, #0x4, lsl #12
    9fe0:	ldr	w1, [x0, #12652]
    9fe4:	str	w1, [sp, #24]
    9fe8:	ldr	w0, [x0, #12460]
    9fec:	str	w0, [sp, #16]
    9ff0:	add	x0, x7, #0x778
    9ff4:	str	x0, [sp, #8]
    9ff8:	add	x0, x7, #0x140
    9ffc:	str	x0, [sp]
    a000:	add	x7, x7, #0x218
    a004:	sub	x6, x19, x23
    a008:	mov	x5, x23
    a00c:	mov	w4, #0x9                   	// #9
    a010:	mov	w3, #0x34                  	// #52
    a014:	ubfx	x2, x24, #2, #2
    a018:	add	x1, x21, #0x8
    a01c:	add	x0, x21, #0x1, lsl #12
    a020:	add	x0, x0, #0x830
    a024:	bl	8340 <ZSTD_free+0x8ac>
    a028:	mov	x1, x0
    a02c:	mov	x0, #0xffffffffffffffec    	// #-20
    a030:	cmn	x1, #0x78
    a034:	b.hi	a0f8 <ZSTD_decodeSeqHeaders+0x278>  // b.pmore
    a038:	add	x0, x23, x1
    a03c:	add	x1, x21, #0x4, lsl #12
    a040:	ldr	w1, [x1, #12652]
    a044:	cbz	w1, a098 <ZSTD_decodeSeqHeaders+0x218>
    a048:	ldr	x1, [x21, #28752]
    a04c:	ldr	x2, [x21, #28760]
    a050:	sub	x1, x1, x2
    a054:	cmp	x1, #0x20, lsl #12
    a058:	mov	x2, #0x20000               	// #131072
    a05c:	csel	x1, x1, x2, ls  // ls = plast
    a060:	lsl	w22, w22, #6
    a064:	sxtw	x22, w22
    a068:	cmp	x1, x22
    a06c:	csel	x22, x1, x22, ls  // ls = plast
    a070:	ldr	x2, [x21, #28768]
    a074:	cbz	x22, a090 <ZSTD_decodeSeqHeaders+0x210>
    a078:	mov	x1, #0x0                   	// #0
    a07c:	sub	x2, x2, x22
    a080:	prfm	pldl2keep, [x2, x1]
    a084:	add	x1, x1, #0x40
    a088:	cmp	x22, x1
    a08c:	b.hi	a080 <ZSTD_decodeSeqHeaders+0x200>  // b.pmore
    a090:	add	x21, x21, #0x4, lsl #12
    a094:	str	wzr, [x21, #12652]
    a098:	sub	x0, x0, x20
    a09c:	ldp	x23, x24, [sp, #96]
    a0a0:	b	a0ac <ZSTD_decodeSeqHeaders+0x22c>
    a0a4:	str	wzr, [x1]
    a0a8:	mov	x0, #0x1                   	// #1
    a0ac:	ldp	x19, x20, [sp, #64]
    a0b0:	ldp	x21, x22, [sp, #80]
    a0b4:	ldp	x29, x30, [sp, #48]
    a0b8:	add	sp, sp, #0x70
    a0bc:	ret
    a0c0:	add	x5, x2, #0x3
    a0c4:	mov	x0, #0xffffffffffffffb8    	// #-72
    a0c8:	cmp	x5, x19
    a0cc:	b.hi	a0ac <ZSTD_decodeSeqHeaders+0x22c>  // b.pmore
    a0d0:	ldurh	w22, [x2, #1]
    a0d4:	add	w22, w22, #0x7, lsl #12
    a0d8:	add	w22, w22, #0xf00
    a0dc:	b	9edc <ZSTD_decodeSeqHeaders+0x5c>
    a0e0:	mov	x0, #0xffffffffffffffb8    	// #-72
    a0e4:	ret
    a0e8:	ldp	x23, x24, [sp, #96]
    a0ec:	b	a0ac <ZSTD_decodeSeqHeaders+0x22c>
    a0f0:	ldp	x23, x24, [sp, #96]
    a0f4:	b	a0ac <ZSTD_decodeSeqHeaders+0x22c>
    a0f8:	ldp	x23, x24, [sp, #96]
    a0fc:	b	a0ac <ZSTD_decodeSeqHeaders+0x22c>
	...
    a108:	stp	x29, x30, [sp, #-400]!
    a10c:	mov	x29, sp
    a110:	stp	x19, x20, [sp, #16]
    a114:	mov	x20, x0
    a118:	str	x1, [sp, #104]
    a11c:	mov	x0, #0x1ffff               	// #131071
    a120:	mov	x19, #0xffffffffffffffb8    	// #-72
    a124:	cmp	x4, x0
    a128:	b.hi	a168 <ZSTD_decodeSeqHeaders+0x2e8>  // b.pmore
    a12c:	stp	x21, x22, [sp, #32]
    a130:	stp	x23, x24, [sp, #48]
    a134:	mov	x23, x2
    a138:	mov	x22, x3
    a13c:	mov	x21, x4
    a140:	mov	w24, w5
    a144:	mov	x2, x4
    a148:	mov	x1, x3
    a14c:	mov	x0, x20
    a150:	bl	9aa4 <ZSTD_decodeLiteralsBlock>
    a154:	mov	x19, x0
    a158:	cmn	x0, #0x78
    a15c:	b.ls	a178 <ZSTD_decodeSeqHeaders+0x2f8>  // b.plast
    a160:	ldp	x21, x22, [sp, #32]
    a164:	ldp	x23, x24, [sp, #48]
    a168:	mov	x0, x19
    a16c:	ldp	x19, x20, [sp, #16]
    a170:	ldp	x29, x30, [sp], #400
    a174:	ret
    a178:	add	x22, x22, x0
    a17c:	sub	x21, x21, x0
    a180:	mov	x3, x21
    a184:	mov	x2, x22
    a188:	add	x1, sp, #0xdc
    a18c:	mov	x0, x20
    a190:	bl	9e80 <ZSTD_decodeSeqHeaders>
    a194:	mov	x19, x0
    a198:	cmn	x0, #0x78
    a19c:	b.hi	aac4 <ZSTD_decodeSeqHeaders+0xc44>  // b.pmore
    a1a0:	stp	x27, x28, [sp, #80]
    a1a4:	add	x3, x22, x0
    a1a8:	sub	x4, x21, x0
    a1ac:	cbz	w24, a1c0 <ZSTD_decodeSeqHeaders+0x340>
    a1b0:	ldr	x1, [x20, #28792]
    a1b4:	mov	x0, #0x1000000             	// #16777216
    a1b8:	cmp	x1, x0
    a1bc:	b.ls	a304 <ZSTD_decodeSeqHeaders+0x484>  // b.plast
    a1c0:	ldr	w28, [sp, #220]
    a1c4:	cmp	w28, #0x0
    a1c8:	b.le	a304 <ZSTD_decodeSeqHeaders+0x484>
    a1cc:	ldr	x5, [x20, #16]
    a1d0:	ldr	w6, [x5, #4]
    a1d4:	mov	w1, #0x1                   	// #1
    a1d8:	lsl	w1, w1, w6
    a1dc:	cbz	w1, a21c <ZSTD_decodeSeqHeaders+0x39c>
    a1e0:	add	x0, x5, #0xa
    a1e4:	sub	w1, w1, #0x1
    a1e8:	add	x5, x5, #0x12
    a1ec:	add	x5, x5, x1, lsl #3
    a1f0:	mov	w1, #0x0                   	// #0
    a1f4:	ldrb	w2, [x0], #8
    a1f8:	cmp	w2, #0x16
    a1fc:	cinc	w1, w1, hi  // hi = pmore
    a200:	cmp	x0, x5
    a204:	b.ne	a1f4 <ZSTD_decodeSeqHeaders+0x374>  // b.any
    a208:	mov	w0, #0x8                   	// #8
    a20c:	sub	w0, w0, w6
    a210:	lsl	w1, w1, w0
    a214:	cmp	w1, #0x6
    a218:	b.hi	a2d8 <ZSTD_decodeSeqHeaders+0x458>  // b.pmore
    a21c:	ldr	x0, [sp, #104]
    a220:	add	x0, x0, x23
    a224:	str	x0, [sp, #112]
    a228:	ldr	x0, [x20, #28952]
    a22c:	str	x0, [sp, #224]
    a230:	ldr	x1, [x20, #28984]
    a234:	add	x0, x0, x1
    a238:	str	x0, [sp, #120]
    a23c:	ldr	x0, [x20, #28752]
    a240:	str	x0, [sp, #136]
    a244:	ldr	x0, [x20, #28760]
    a248:	str	x0, [sp, #144]
    a24c:	ldr	x0, [x20, #28768]
    a250:	str	x0, [sp, #152]
    a254:	add	x0, x20, #0x4, lsl #12
    a258:	mov	w1, #0x1                   	// #1
    a25c:	str	w1, [x0, #12460]
    a260:	ldr	w1, [x0, #10300]
    a264:	str	x1, [sp, #352]
    a268:	ldr	w1, [x0, #10304]
    a26c:	str	x1, [sp, #360]
    a270:	ldr	w0, [x0, #10308]
    a274:	str	x0, [sp, #368]
    a278:	cbz	x4, a390 <ZSTD_decodeSeqHeaders+0x510>
    a27c:	str	x3, [sp, #288]
    a280:	add	x0, x3, #0x8
    a284:	str	x0, [sp, #296]
    a288:	cmp	x4, #0x7
    a28c:	b.ls	a3bc <ZSTD_decodeSeqHeaders+0x53c>  // b.plast
    a290:	sub	x0, x4, #0x8
    a294:	add	x1, x3, x0
    a298:	str	x1, [sp, #280]
    a29c:	ldr	x0, [x3, x0]
    a2a0:	str	x0, [sp, #264]
    a2a4:	add	x3, x3, x4
    a2a8:	ldurb	w0, [x3, #-1]
    a2ac:	cbz	w0, a3a0 <ZSTD_decodeSeqHeaders+0x520>
    a2b0:	clz	w0, w0
    a2b4:	sub	w0, w0, #0x17
    a2b8:	str	w0, [sp, #272]
    a2bc:	mov	x19, #0xffffffffffffffec    	// #-20
    a2c0:	cmn	x4, #0x78
    a2c4:	b.ls	a3b4 <ZSTD_decodeSeqHeaders+0x534>  // b.plast
    a2c8:	ldp	x21, x22, [sp, #32]
    a2cc:	ldp	x23, x24, [sp, #48]
    a2d0:	ldp	x27, x28, [sp, #80]
    a2d4:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    a2d8:	mov	w6, #0x0                   	// #0
    a2dc:	mov	w5, w28
    a2e0:	mov	x2, x23
    a2e4:	ldr	x1, [sp, #104]
    a2e8:	mov	x0, x20
    a2ec:	bl	84b0 <ZSTD_free+0xa1c>
    a2f0:	mov	x19, x0
    a2f4:	ldp	x21, x22, [sp, #32]
    a2f8:	ldp	x23, x24, [sp, #48]
    a2fc:	ldp	x27, x28, [sp, #80]
    a300:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    a304:	ldr	w28, [sp, #220]
    a308:	ldr	x24, [sp, #104]
    a30c:	add	x0, x24, x23
    a310:	str	x0, [sp, #112]
    a314:	ldr	x0, [x20, #28952]
    a318:	str	x0, [sp, #224]
    a31c:	ldr	x1, [x20, #28984]
    a320:	add	x0, x0, x1
    a324:	str	x0, [sp, #120]
    a328:	cbnz	w28, a374 <ZSTD_decodeSeqHeaders+0x4f4>
    a32c:	ldr	x1, [sp, #224]
    a330:	ldr	x0, [sp, #120]
    a334:	sub	x20, x0, x1
    a338:	ldr	x0, [sp, #112]
    a33c:	sub	x0, x0, x24
    a340:	mov	x19, #0xffffffffffffffba    	// #-70
    a344:	cmp	x20, x0
    a348:	b.hi	aae4 <ZSTD_decodeSeqHeaders+0xc64>  // b.pmore
    a34c:	mov	x2, x20
    a350:	mov	x0, x24
    a354:	bl	0 <grub_memmove>
    a358:	add	x19, x24, x20
    a35c:	ldr	x0, [sp, #104]
    a360:	sub	x19, x19, x0
    a364:	ldp	x21, x22, [sp, #32]
    a368:	ldp	x23, x24, [sp, #48]
    a36c:	ldp	x27, x28, [sp, #80]
    a370:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    a374:	ldr	x0, [x20, #28752]
    a378:	str	x0, [sp, #136]
    a37c:	ldr	x0, [x20, #28760]
    a380:	str	x0, [sp, #144]
    a384:	ldr	x0, [x20, #28768]
    a388:	str	x0, [sp, #152]
    a38c:	b	a254 <ZSTD_decodeSeqHeaders+0x3d4>
    a390:	mov	x2, #0x28                  	// #40
    a394:	mov	w1, #0x0                   	// #0
    a398:	add	x0, sp, #0x108
    a39c:	bl	0 <grub_memset>
    a3a0:	mov	x19, #0xffffffffffffffec    	// #-20
    a3a4:	ldp	x21, x22, [sp, #32]
    a3a8:	ldp	x23, x24, [sp, #48]
    a3ac:	ldp	x27, x28, [sp, #80]
    a3b0:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    a3b4:	stp	x25, x26, [sp, #64]
    a3b8:	b	a43c <ZSTD_decodeSeqHeaders+0x5bc>
    a3bc:	str	x3, [sp, #280]
    a3c0:	ldrb	w0, [x3]
    a3c4:	str	x0, [sp, #264]
    a3c8:	cmp	x4, #0x5
    a3cc:	b.eq	a4bc <ZSTD_decodeSeqHeaders+0x63c>  // b.none
    a3d0:	b.hi	a498 <ZSTD_decodeSeqHeaders+0x618>  // b.pmore
    a3d4:	cmp	x4, #0x3
    a3d8:	b.eq	a3f4 <ZSTD_decodeSeqHeaders+0x574>  // b.none
    a3dc:	cmp	x4, #0x4
    a3e0:	b.ne	a48c <ZSTD_decodeSeqHeaders+0x60c>  // b.any
    a3e4:	ldrb	w0, [x3, #3]
    a3e8:	ldr	x1, [sp, #264]
    a3ec:	add	x0, x1, x0, lsl #24
    a3f0:	str	x0, [sp, #264]
    a3f4:	ldrb	w0, [x3, #2]
    a3f8:	ldr	x1, [sp, #264]
    a3fc:	add	x0, x1, x0, lsl #16
    a400:	str	x0, [sp, #264]
    a404:	ldrb	w0, [x3, #1]
    a408:	ldr	x1, [sp, #264]
    a40c:	add	x0, x1, x0, lsl #8
    a410:	str	x0, [sp, #264]
    a414:	add	x3, x3, x4
    a418:	ldurb	w0, [x3, #-1]
    a41c:	cbz	w0, a3a0 <ZSTD_decodeSeqHeaders+0x520>
    a420:	stp	x25, x26, [sp, #64]
    a424:	clz	w1, w0
    a428:	mov	w0, #0x9                   	// #9
    a42c:	sub	w0, w0, w4
    a430:	add	w0, w1, w0, lsl #3
    a434:	sub	w0, w0, #0x1f
    a438:	str	w0, [sp, #272]
    a43c:	ldr	x2, [x20]
    a440:	add	x1, sp, #0x108
    a444:	add	x0, x1, #0x28
    a448:	bl	7f2c <ZSTD_free+0x498>
    a44c:	ldr	x2, [x20, #16]
    a450:	add	x1, sp, #0x108
    a454:	add	x0, x1, #0x38
    a458:	bl	7f2c <ZSTD_free+0x498>
    a45c:	ldr	x2, [x20, #8]
    a460:	add	x1, sp, #0x108
    a464:	add	x0, x1, #0x48
    a468:	bl	7f2c <ZSTD_free+0x498>
    a46c:	ldr	x24, [sp, #104]
    a470:	ldr	x0, [sp, #112]
    a474:	sub	x1, x0, #0x8
    a478:	str	x1, [sp, #128]
    a47c:	sub	x0, x0, #0xd
    a480:	str	x0, [sp, #160]
    a484:	str	x20, [sp, #168]
    a488:	b	a628 <ZSTD_decodeSeqHeaders+0x7a8>
    a48c:	cmp	x4, #0x2
    a490:	b.eq	a404 <ZSTD_decodeSeqHeaders+0x584>  // b.none
    a494:	b	a414 <ZSTD_decodeSeqHeaders+0x594>
    a498:	cmp	x4, #0x6
    a49c:	b.eq	a4ac <ZSTD_decodeSeqHeaders+0x62c>  // b.none
    a4a0:	ldrb	w1, [x3, #6]
    a4a4:	add	x0, x0, x1, lsl #48
    a4a8:	str	x0, [sp, #264]
    a4ac:	ldrb	w0, [x3, #5]
    a4b0:	ldr	x1, [sp, #264]
    a4b4:	add	x0, x1, x0, lsl #40
    a4b8:	str	x0, [sp, #264]
    a4bc:	ldrb	w0, [x3, #4]
    a4c0:	ldr	x1, [sp, #264]
    a4c4:	add	x0, x1, x0, lsl #32
    a4c8:	str	x0, [sp, #264]
    a4cc:	b	a3e4 <ZSTD_decodeSeqHeaders+0x564>
    a4d0:	cmp	w23, #0x0
    a4d4:	cinc	x1, x22, eq  // eq = none
    a4d8:	cbz	x1, aabc <ZSTD_decodeSeqHeaders+0xc3c>
    a4dc:	cmp	x1, #0x3
    a4e0:	b.ne	a508 <ZSTD_decodeSeqHeaders+0x688>  // b.any
    a4e4:	ldr	x1, [sp, #352]
    a4e8:	subs	x1, x1, #0x1
    a4ec:	cinc	x22, x1, eq  // eq = none
    a4f0:	ldr	x1, [sp, #360]
    a4f4:	str	x1, [sp, #368]
    a4f8:	ldr	x1, [sp, #352]
    a4fc:	str	x1, [sp, #360]
    a500:	str	x22, [sp, #352]
    a504:	b	a71c <ZSTD_decodeSeqHeaders+0x89c>
    a508:	add	x14, x1, #0xa
    a50c:	add	x15, sp, #0x110
    a510:	ldr	x22, [x15, x14, lsl #3]
    a514:	cmp	x22, #0x0
    a518:	cinc	x22, x22, eq  // eq = none
    a51c:	cmp	x1, #0x1
    a520:	b.eq	a4f8 <ZSTD_decodeSeqHeaders+0x678>  // b.none
    a524:	b	a4f0 <ZSTD_decodeSeqHeaders+0x670>
    a528:	ldr	w14, [sp, #272]
    a52c:	ldr	x1, [sp, #264]
    a530:	lsl	x1, x1, x14
    a534:	neg	w15, w11
    a538:	lsr	x1, x1, x15
    a53c:	add	w11, w11, w14
    a540:	str	w11, [sp, #272]
    a544:	b	a728 <ZSTD_decodeSeqHeaders+0x8a8>
    a548:	ldr	w2, [sp, #272]
    a54c:	cmp	w2, #0x40
    a550:	b.hi	a734 <ZSTD_decodeSeqHeaders+0x8b4>  // b.pmore
    a554:	ldr	x1, [sp, #280]
    a558:	cmp	x1, x12
    a55c:	b.cs	a5a4 <ZSTD_decodeSeqHeaders+0x724>  // b.hs, b.nlast
    a560:	ldr	x12, [sp, #288]
    a564:	cmp	x1, x12
    a568:	b.eq	a734 <ZSTD_decodeSeqHeaders+0x8b4>  // b.none
    a56c:	lsr	w14, w2, #3
    a570:	sub	x14, x1, x14
    a574:	sub	x15, x1, x12
    a578:	lsr	w11, w2, #3
    a57c:	cmp	x12, x14
    a580:	csel	w12, w11, w15, ls  // ls = plast
    a584:	csel	w11, w11, w15, ls  // ls = plast
    a588:	sub	x1, x1, x11
    a58c:	str	x1, [sp, #280]
    a590:	sub	w2, w2, w12, lsl #3
    a594:	str	w2, [sp, #272]
    a598:	ldr	x1, [x1]
    a59c:	str	x1, [sp, #264]
    a5a0:	b	a734 <ZSTD_decodeSeqHeaders+0x8b4>
    a5a4:	lsr	w11, w2, #3
    a5a8:	sub	x1, x1, x11
    a5ac:	str	x1, [sp, #280]
    a5b0:	and	w2, w2, #0x7
    a5b4:	str	w2, [sp, #272]
    a5b8:	ldr	x1, [x1]
    a5bc:	str	x1, [sp, #264]
    a5c0:	b	a734 <ZSTD_decodeSeqHeaders+0x8b4>
    a5c4:	ldr	w2, [sp, #272]
    a5c8:	ldr	x1, [sp, #264]
    a5cc:	lsl	x1, x1, x2
    a5d0:	neg	w11, w6
    a5d4:	lsr	x1, x1, x11
    a5d8:	add	w6, w6, w2
    a5dc:	str	w6, [sp, #272]
    a5e0:	b	a740 <ZSTD_decodeSeqHeaders+0x8c0>
    a5e4:	ldp	x0, x1, [sp, #232]
    a5e8:	stp	x0, x1, [sp, #176]
    a5ec:	ldp	x0, x1, [sp, #248]
    a5f0:	stp	x0, x1, [sp, #192]
    a5f4:	ldr	x7, [sp, #152]
    a5f8:	ldr	x6, [sp, #144]
    a5fc:	ldr	x5, [sp, #136]
    a600:	ldr	x4, [sp, #120]
    a604:	add	x3, sp, #0xe0
    a608:	add	x2, sp, #0xb0
    a60c:	ldr	x1, [sp, #112]
    a610:	mov	x0, x24
    a614:	bl	7b8c <ZSTD_free+0xf8>
    a618:	mov	x19, x0
    a61c:	cmn	x19, #0x78
    a620:	b.hi	aad0 <ZSTD_decodeSeqHeaders+0xc50>  // b.pmore
    a624:	add	x24, x24, x19
    a628:	ldr	w1, [sp, #272]
    a62c:	cmp	w1, #0x40
    a630:	b.hi	aa6c <ZSTD_decodeSeqHeaders+0xbec>  // b.pmore
    a634:	ldr	x0, [sp, #280]
    a638:	ldr	x12, [sp, #296]
    a63c:	cmp	x0, x12
    a640:	b.cs	a9fc <ZSTD_decodeSeqHeaders+0xb7c>  // b.hs, b.nlast
    a644:	ldr	x3, [sp, #288]
    a648:	cmp	x0, x3
    a64c:	b.eq	a684 <ZSTD_decodeSeqHeaders+0x804>  // b.none
    a650:	lsr	w4, w1, #3
    a654:	sub	x4, x0, x4
    a658:	sub	x5, x0, x3
    a65c:	lsr	w2, w1, #3
    a660:	cmp	x3, x4
    a664:	csel	w3, w2, w5, ls  // ls = plast
    a668:	csel	w2, w2, w5, ls  // ls = plast
    a66c:	sub	x0, x0, x2
    a670:	str	x0, [sp, #280]
    a674:	sub	w1, w1, w3, lsl #3
    a678:	str	w1, [sp, #272]
    a67c:	ldr	x0, [x0]
    a680:	str	x0, [sp, #264]
    a684:	cbz	w28, aa1c <ZSTD_decodeSeqHeaders+0xb9c>
    a688:	sub	w28, w28, #0x1
    a68c:	ldr	x0, [sp, #304]
    a690:	lsl	x0, x0, #3
    a694:	ldr	x13, [sp, #312]
    a698:	add	x3, x13, x0
    a69c:	ldrb	w6, [x3, #2]
    a6a0:	ldr	x4, [sp, #336]
    a6a4:	lsl	x4, x4, #3
    a6a8:	ldr	x10, [sp, #344]
    a6ac:	add	x9, x10, x4
    a6b0:	ldrb	w11, [x9, #2]
    a6b4:	ldr	x5, [sp, #320]
    a6b8:	lsl	x5, x5, #3
    a6bc:	ldr	x8, [sp, #328]
    a6c0:	add	x7, x8, x5
    a6c4:	ldrb	w1, [x7, #2]
    a6c8:	add	w2, w6, w11
    a6cc:	add	w2, w2, w1
    a6d0:	ldr	w23, [x3, #4]
    a6d4:	ldr	w20, [x9, #4]
    a6d8:	cbz	w1, aab0 <ZSTD_decodeSeqHeaders+0xc30>
    a6dc:	ldr	w22, [x7, #4]
    a6e0:	ldr	w15, [sp, #272]
    a6e4:	ldr	x14, [sp, #264]
    a6e8:	lsl	x14, x14, x15
    a6ec:	neg	w16, w1
    a6f0:	lsr	x14, x14, x16
    a6f4:	add	w15, w1, w15
    a6f8:	str	w15, [sp, #272]
    a6fc:	add	x22, x22, x14
    a700:	cmp	w1, #0x1
    a704:	b.ls	a4d0 <ZSTD_decodeSeqHeaders+0x650>  // b.plast
    a708:	ldr	x1, [sp, #360]
    a70c:	str	x1, [sp, #368]
    a710:	ldr	x1, [sp, #352]
    a714:	str	x1, [sp, #360]
    a718:	str	x22, [sp, #352]
    a71c:	mov	w20, w20
    a720:	mov	x1, #0x0                   	// #0
    a724:	cbnz	w11, a528 <ZSTD_decodeSeqHeaders+0x6a8>
    a728:	add	x20, x20, x1
    a72c:	cmp	w2, #0x1e
    a730:	b.hi	a548 <ZSTD_decodeSeqHeaders+0x6c8>  // b.pmore
    a734:	mov	w23, w23
    a738:	mov	x1, #0x0                   	// #0
    a73c:	cbnz	w6, a5c4 <ZSTD_decodeSeqHeaders+0x744>
    a740:	add	x23, x23, x1
    a744:	ldrh	w11, [x13, x0]
    a748:	ldrb	w6, [x3, #3]
    a74c:	ldr	x0, [sp, #264]
    a750:	ldr	w2, [sp, #272]
    a754:	add	w1, w6, w2
    a758:	str	w1, [sp, #272]
    a75c:	lsl	x2, x0, x2
    a760:	lsr	x2, x2, #1
    a764:	mov	w3, #0x3f                  	// #63
    a768:	sub	w6, w3, w6
    a76c:	lsr	x2, x2, x6
    a770:	add	x2, x2, w11, uxth
    a774:	str	x2, [sp, #304]
    a778:	ldrh	w6, [x10, x4]
    a77c:	ldrb	w2, [x9, #3]
    a780:	add	w4, w1, w2
    a784:	str	w4, [sp, #272]
    a788:	lsl	x1, x0, x1
    a78c:	lsr	x1, x1, #1
    a790:	sub	w2, w3, w2
    a794:	lsr	x1, x1, x2
    a798:	add	x1, x1, w6, uxth
    a79c:	str	x1, [sp, #336]
    a7a0:	ldrh	w1, [x8, x5]
    a7a4:	ldrb	w2, [x7, #3]
    a7a8:	add	w5, w4, w2
    a7ac:	str	w5, [sp, #272]
    a7b0:	lsl	x0, x0, x4
    a7b4:	lsr	x0, x0, #1
    a7b8:	sub	w3, w3, w2
    a7bc:	lsr	x0, x0, x3
    a7c0:	add	x0, x0, w1, uxth
    a7c4:	str	x0, [sp, #320]
    a7c8:	str	x23, [sp, #232]
    a7cc:	str	x20, [sp, #240]
    a7d0:	str	x22, [sp, #248]
    a7d4:	add	x19, x20, x23
    a7d8:	add	x25, x24, x19
    a7dc:	ldr	x1, [sp, #224]
    a7e0:	add	x27, x1, x23
    a7e4:	ldr	x0, [sp, #112]
    a7e8:	cmp	x25, x0
    a7ec:	b.hi	aa24 <ZSTD_decodeSeqHeaders+0xba4>  // b.pmore
    a7f0:	ldr	x0, [sp, #120]
    a7f4:	cmp	x27, x0
    a7f8:	b.hi	aa3c <ZSTD_decodeSeqHeaders+0xbbc>  // b.pmore
    a7fc:	add	x21, x24, x23
    a800:	ldr	x0, [sp, #128]
    a804:	cmp	x21, x0
    a808:	b.hi	a5e4 <ZSTD_decodeSeqHeaders+0x764>  // b.pmore
    a80c:	mov	x0, x24
    a810:	bl	7b74 <ZSTD_free+0xe0>
    a814:	cmp	x23, #0x8
    a818:	b.hi	a8b4 <ZSTD_decodeSeqHeaders+0xa34>  // b.pmore
    a81c:	sub	x23, x21, x22
    a820:	str	x27, [sp, #224]
    a824:	ldr	x1, [sp, #136]
    a828:	sub	x0, x21, x1
    a82c:	cmp	x22, x0
    a830:	b.ls	a8f4 <ZSTD_decodeSeqHeaders+0xa74>  // b.plast
    a834:	ldr	x0, [sp, #144]
    a838:	sub	x0, x21, x0
    a83c:	cmp	x22, x0
    a840:	b.hi	aa54 <ZSTD_decodeSeqHeaders+0xbd4>  // b.pmore
    a844:	sub	x1, x23, x1
    a848:	ldr	x2, [sp, #152]
    a84c:	add	x1, x2, x1
    a850:	add	x0, x1, x20
    a854:	cmp	x2, x0
    a858:	b.cs	a8e0 <ZSTD_decodeSeqHeaders+0xa60>  // b.hs, b.nlast
    a85c:	ldr	x26, [sp, #136]
    a860:	sub	x23, x26, x23
    a864:	mov	x2, x23
    a868:	mov	x0, x21
    a86c:	bl	0 <grub_memmove>
    a870:	add	x21, x21, x23
    a874:	sub	x20, x20, x23
    a878:	cmp	x20, #0x2
    a87c:	ldr	x0, [sp, #128]
    a880:	ccmp	x0, x21, #0x0, hi  // hi = pmore
    a884:	b.cs	a8f0 <ZSTD_decodeSeqHeaders+0xa70>  // b.hs, b.nlast
    a888:	cbz	x20, a61c <ZSTD_decodeSeqHeaders+0x79c>
    a88c:	mov	w0, #0x0                   	// #0
    a890:	mov	x1, #0x0                   	// #0
    a894:	mov	x3, x26
    a898:	ldrb	w2, [x3, x1]
    a89c:	strb	w2, [x21, x1]
    a8a0:	add	w0, w0, #0x1
    a8a4:	mov	w1, w0
    a8a8:	cmp	x20, w0, uxtw
    a8ac:	b.hi	a898 <ZSTD_decodeSeqHeaders+0xa18>  // b.pmore
    a8b0:	b	a61c <ZSTD_decodeSeqHeaders+0x79c>
    a8b4:	add	x23, x24, #0x8
    a8b8:	ldr	x26, [sp, #224]
    a8bc:	add	x26, x26, #0x8
    a8c0:	mov	x1, x26
    a8c4:	mov	x0, x23
    a8c8:	bl	7b74 <ZSTD_free+0xe0>
    a8cc:	add	x23, x23, #0x8
    a8d0:	add	x26, x26, #0x8
    a8d4:	cmp	x21, x23
    a8d8:	b.hi	a8c0 <ZSTD_decodeSeqHeaders+0xa40>  // b.pmore
    a8dc:	b	a81c <ZSTD_decodeSeqHeaders+0x99c>
    a8e0:	mov	x2, x20
    a8e4:	mov	x0, x21
    a8e8:	bl	0 <grub_memmove>
    a8ec:	b	a61c <ZSTD_decodeSeqHeaders+0x79c>
    a8f0:	ldr	x23, [sp, #136]
    a8f4:	cmp	x22, #0x7
    a8f8:	b.hi	a994 <ZSTD_decodeSeqHeaders+0xb14>  // b.pmore
    a8fc:	adrp	x0, 0 <FSE_versionNumber>
    a900:	ldr	x0, [x0]
    a904:	add	x1, x0, #0x980
    a908:	ldr	w26, [x1, x22, lsl #2]
    a90c:	ldrb	w1, [x23]
    a910:	strb	w1, [x21]
    a914:	ldrb	w1, [x23, #1]
    a918:	strb	w1, [x21, #1]
    a91c:	ldrb	w1, [x23, #2]
    a920:	strb	w1, [x21, #2]
    a924:	ldrb	w1, [x23, #3]
    a928:	strb	w1, [x21, #3]
    a92c:	add	x0, x0, #0x9a0
    a930:	ldr	w0, [x0, x22, lsl #2]
    a934:	add	x23, x23, x0
    a938:	mov	x2, #0x4                   	// #4
    a93c:	mov	x1, x23
    a940:	add	x0, x21, x2
    a944:	bl	0 <grub_memmove>
    a948:	sub	x23, x23, w26, sxtw
    a94c:	add	x22, x21, #0x8
    a950:	add	x23, x23, #0x8
    a954:	ldr	x0, [sp, #160]
    a958:	cmp	x25, x0
    a95c:	b.ls	a9d8 <ZSTD_decodeSeqHeaders+0xb58>  // b.plast
    a960:	ldr	x0, [sp, #128]
    a964:	cmp	x0, x22
    a968:	b.hi	a9a4 <ZSTD_decodeSeqHeaders+0xb24>  // b.pmore
    a96c:	cmp	x25, x22
    a970:	b.ls	a61c <ZSTD_decodeSeqHeaders+0x79c>  // b.plast
    a974:	sub	x25, x25, x22
    a978:	mov	x0, #0x0                   	// #0
    a97c:	ldrb	w1, [x23, x0]
    a980:	strb	w1, [x22, x0]
    a984:	add	x0, x0, #0x1
    a988:	cmp	x0, x25
    a98c:	b.ne	a97c <ZSTD_decodeSeqHeaders+0xafc>  // b.any
    a990:	b	a61c <ZSTD_decodeSeqHeaders+0x79c>
    a994:	mov	x1, x23
    a998:	mov	x0, x21
    a99c:	bl	7b74 <ZSTD_free+0xe0>
    a9a0:	b	a94c <ZSTD_decodeSeqHeaders+0xacc>
    a9a4:	mov	x21, x0
    a9a8:	sub	x26, x0, x22
    a9ac:	mov	x20, x23
    a9b0:	mov	x1, x20
    a9b4:	mov	x0, x22
    a9b8:	bl	7b74 <ZSTD_free+0xe0>
    a9bc:	add	x22, x22, #0x8
    a9c0:	add	x20, x20, #0x8
    a9c4:	cmp	x21, x22
    a9c8:	b.hi	a9b0 <ZSTD_decodeSeqHeaders+0xb30>  // b.pmore
    a9cc:	add	x23, x23, x26
    a9d0:	ldr	x22, [sp, #128]
    a9d4:	b	a96c <ZSTD_decodeSeqHeaders+0xaec>
    a9d8:	add	x20, x21, x20
    a9dc:	mov	x1, x23
    a9e0:	mov	x0, x22
    a9e4:	bl	7b74 <ZSTD_free+0xe0>
    a9e8:	add	x22, x22, #0x8
    a9ec:	add	x23, x23, #0x8
    a9f0:	cmp	x20, x22
    a9f4:	b.hi	a9dc <ZSTD_decodeSeqHeaders+0xb5c>  // b.pmore
    a9f8:	b	a61c <ZSTD_decodeSeqHeaders+0x79c>
    a9fc:	lsr	w2, w1, #3
    aa00:	sub	x0, x0, x2
    aa04:	str	x0, [sp, #280]
    aa08:	and	w1, w1, #0x7
    aa0c:	str	w1, [sp, #272]
    aa10:	ldr	x0, [x0]
    aa14:	str	x0, [sp, #264]
    aa18:	b	a684 <ZSTD_decodeSeqHeaders+0x804>
    aa1c:	ldr	x20, [sp, #168]
    aa20:	b	aa78 <ZSTD_decodeSeqHeaders+0xbf8>
    aa24:	mov	x19, #0xffffffffffffffba    	// #-70
    aa28:	ldp	x21, x22, [sp, #32]
    aa2c:	ldp	x23, x24, [sp, #48]
    aa30:	ldp	x25, x26, [sp, #64]
    aa34:	ldp	x27, x28, [sp, #80]
    aa38:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aa3c:	mov	x19, #0xffffffffffffffec    	// #-20
    aa40:	ldp	x21, x22, [sp, #32]
    aa44:	ldp	x23, x24, [sp, #48]
    aa48:	ldp	x25, x26, [sp, #64]
    aa4c:	ldp	x27, x28, [sp, #80]
    aa50:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aa54:	mov	x19, #0xffffffffffffffec    	// #-20
    aa58:	ldp	x21, x22, [sp, #32]
    aa5c:	ldp	x23, x24, [sp, #48]
    aa60:	ldp	x25, x26, [sp, #64]
    aa64:	ldp	x27, x28, [sp, #80]
    aa68:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aa6c:	ldr	x20, [sp, #168]
    aa70:	mov	x19, #0xffffffffffffffec    	// #-20
    aa74:	cbnz	w28, aa9c <ZSTD_decodeSeqHeaders+0xc1c>
    aa78:	add	x20, x20, #0x4, lsl #12
    aa7c:	ldr	x0, [sp, #352]
    aa80:	str	w0, [x20, #10300]
    aa84:	ldr	x0, [sp, #360]
    aa88:	str	w0, [x20, #10304]
    aa8c:	ldr	x0, [sp, #368]
    aa90:	str	w0, [x20, #10308]
    aa94:	ldp	x25, x26, [sp, #64]
    aa98:	b	a32c <ZSTD_decodeSeqHeaders+0x4ac>
    aa9c:	ldp	x21, x22, [sp, #32]
    aaa0:	ldp	x23, x24, [sp, #48]
    aaa4:	ldp	x25, x26, [sp, #64]
    aaa8:	ldp	x27, x28, [sp, #80]
    aaac:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aab0:	cmp	w23, #0x0
    aab4:	cset	x1, eq  // eq = none
    aab8:	cbz	w23, a508 <ZSTD_decodeSeqHeaders+0x688>
    aabc:	ldr	x22, [sp, #352]
    aac0:	b	a71c <ZSTD_decodeSeqHeaders+0x89c>
    aac4:	ldp	x21, x22, [sp, #32]
    aac8:	ldp	x23, x24, [sp, #48]
    aacc:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aad0:	ldp	x21, x22, [sp, #32]
    aad4:	ldp	x23, x24, [sp, #48]
    aad8:	ldp	x25, x26, [sp, #64]
    aadc:	ldp	x27, x28, [sp, #80]
    aae0:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aae4:	ldp	x21, x22, [sp, #32]
    aae8:	ldp	x23, x24, [sp, #48]
    aaec:	ldp	x27, x28, [sp, #80]
    aaf0:	b	a168 <ZSTD_decodeSeqHeaders+0x2e8>
    aaf4:	nop
	...

000000000000ab00 <ZSTD_decompressBlock>:
    ab00:	stp	x29, x30, [sp, #-64]!
    ab04:	mov	x29, sp
    ab08:	stp	x19, x20, [sp, #16]
    ab0c:	stp	x21, x22, [sp, #32]
    ab10:	str	x23, [sp, #48]
    ab14:	mov	x20, x0
    ab18:	mov	x19, x1
    ab1c:	mov	x21, x2
    ab20:	mov	x22, x3
    ab24:	mov	x23, x4
    ab28:	bl	7b48 <ZSTD_free+0xb4>
    ab2c:	mov	w5, #0x0                   	// #0
    ab30:	mov	x4, x23
    ab34:	mov	x3, x22
    ab38:	mov	x2, x21
    ab3c:	mov	x1, x19
    ab40:	mov	x0, x20
    ab44:	bl	a108 <ZSTD_decodeSeqHeaders+0x288>
    ab48:	add	x19, x19, x0
    ab4c:	str	x19, [x20, #28744]
    ab50:	ldp	x19, x20, [sp, #16]
    ab54:	ldp	x21, x22, [sp, #32]
    ab58:	ldr	x23, [sp, #48]
    ab5c:	ldp	x29, x30, [sp], #64
    ab60:	ret

000000000000ab64 <ZSTD_insertBlock>:
    ab64:	stp	x29, x30, [sp, #-48]!
    ab68:	mov	x29, sp
    ab6c:	stp	x19, x20, [sp, #16]
    ab70:	str	x21, [sp, #32]
    ab74:	mov	x21, x0
    ab78:	mov	x19, x1
    ab7c:	mov	x20, x2
    ab80:	bl	7b48 <ZSTD_free+0xb4>
    ab84:	add	x19, x19, x20
    ab88:	str	x19, [x21, #28744]
    ab8c:	mov	x0, x20
    ab90:	ldp	x19, x20, [sp, #16]
    ab94:	ldr	x21, [sp, #32]
    ab98:	ldp	x29, x30, [sp], #48
    ab9c:	ret

000000000000aba0 <ZSTD_findFrameCompressedSize>:
    aba0:	stp	x29, x30, [sp, #-112]!
    aba4:	mov	x29, sp
    aba8:	stp	x19, x20, [sp, #16]
    abac:	stp	x21, x22, [sp, #32]
    abb0:	mov	x21, x0
    abb4:	mov	x19, x1
    abb8:	cmp	x1, #0x7
    abbc:	b.ls	abd8 <ZSTD_findFrameCompressedSize+0x38>  // b.plast
    abc0:	ldr	w0, [x0]
    abc4:	and	w0, w0, #0xfffffff0
    abc8:	mov	w1, #0x2a50                	// #10832
    abcc:	movk	w1, #0x184d, lsl #16
    abd0:	cmp	w0, w1
    abd4:	b.eq	ac5c <ZSTD_findFrameCompressedSize+0xbc>  // b.none
    abd8:	mov	x2, x19
    abdc:	mov	x1, x21
    abe0:	add	x0, sp, #0x48
    abe4:	bl	99e0 <ZSTD_getFrameHeader>
    abe8:	cmn	x0, #0x78
    abec:	b.hi	ac74 <ZSTD_findFrameCompressedSize+0xd4>  // b.pmore
    abf0:	cbnz	x0, ac70 <ZSTD_findFrameCompressedSize+0xd0>
    abf4:	ldr	w0, [sp, #96]
    abf8:	add	x20, x21, x0
    abfc:	sub	x19, x19, x0
    ac00:	mov	x22, #0xfffffffffffffffd    	// #-3
    ac04:	add	x2, sp, #0x38
    ac08:	mov	x1, x19
    ac0c:	mov	x0, x20
    ac10:	bl	9a50 <ZSTD_getcBlockSize>
    ac14:	cmn	x0, #0x78
    ac18:	b.hi	ac74 <ZSTD_findFrameCompressedSize+0xd4>  // b.pmore
    ac1c:	add	x1, x0, #0x3
    ac20:	cmp	x1, x19
    ac24:	b.hi	ac68 <ZSTD_findFrameCompressedSize+0xc8>  // b.pmore
    ac28:	add	x20, x20, x1
    ac2c:	sub	x0, x22, x0
    ac30:	add	x19, x19, x0
    ac34:	ldr	w0, [sp, #60]
    ac38:	cbz	w0, ac04 <ZSTD_findFrameCompressedSize+0x64>
    ac3c:	ldr	w0, [sp, #104]
    ac40:	cbz	w0, ac54 <ZSTD_findFrameCompressedSize+0xb4>
    ac44:	mov	x0, #0xffffffffffffffb8    	// #-72
    ac48:	cmp	x19, #0x3
    ac4c:	b.ls	ac74 <ZSTD_findFrameCompressedSize+0xd4>  // b.plast
    ac50:	add	x20, x20, #0x4
    ac54:	sub	x0, x20, x21
    ac58:	b	ac74 <ZSTD_findFrameCompressedSize+0xd4>
    ac5c:	ldr	w0, [x21, #4]
    ac60:	add	x0, x0, #0x8
    ac64:	b	ac74 <ZSTD_findFrameCompressedSize+0xd4>
    ac68:	mov	x0, #0xffffffffffffffb8    	// #-72
    ac6c:	b	ac74 <ZSTD_findFrameCompressedSize+0xd4>
    ac70:	mov	x0, #0xffffffffffffffb8    	// #-72
    ac74:	ldp	x19, x20, [sp, #16]
    ac78:	ldp	x21, x22, [sp, #32]
    ac7c:	ldp	x29, x30, [sp], #112
    ac80:	ret

000000000000ac84 <ZSTD_findDecompressedSize>:
    ac84:	stp	x29, x30, [sp, #-48]!
    ac88:	mov	x29, sp
    ac8c:	stp	x19, x20, [sp, #16]
    ac90:	stp	x21, x22, [sp, #32]
    ac94:	mov	x19, x1
    ac98:	cmp	x1, #0x4
    ac9c:	b.ls	ad28 <ZSTD_findDecompressedSize+0xa4>  // b.plast
    aca0:	mov	x20, x0
    aca4:	mov	x21, #0x0                   	// #0
    aca8:	mov	w22, #0x2a50                	// #10832
    acac:	movk	w22, #0x184d, lsl #16
    acb0:	b	acf4 <ZSTD_findDecompressedSize+0x70>
    acb4:	mov	x1, x19
    acb8:	mov	x0, x20
    acbc:	bl	99f8 <ZSTD_getFrameContentSize>
    acc0:	cmn	x0, #0x3
    acc4:	b.hi	ad5c <ZSTD_findDecompressedSize+0xd8>  // b.pmore
    acc8:	adds	x21, x0, x21
    accc:	b.cs	ad64 <ZSTD_findDecompressedSize+0xe0>  // b.hs, b.nlast
    acd0:	mov	x1, x19
    acd4:	mov	x0, x20
    acd8:	bl	aba0 <ZSTD_findFrameCompressedSize>
    acdc:	cmn	x0, #0x78
    ace0:	b.hi	ad6c <ZSTD_findDecompressedSize+0xe8>  // b.pmore
    ace4:	add	x20, x20, x0
    ace8:	sub	x19, x19, x0
    acec:	cmp	x19, #0x4
    acf0:	b.ls	ad2c <ZSTD_findDecompressedSize+0xa8>  // b.plast
    acf4:	ldr	w0, [x20]
    acf8:	and	w0, w0, #0xfffffff0
    acfc:	cmp	w0, w22
    ad00:	b.ne	acb4 <ZSTD_findDecompressedSize+0x30>  // b.any
    ad04:	cmp	x19, #0x7
    ad08:	b.ls	ad3c <ZSTD_findDecompressedSize+0xb8>  // b.plast
    ad0c:	ldr	w0, [x20, #4]
    ad10:	add	x0, x0, #0x8
    ad14:	cmp	x0, x19
    ad18:	b.hi	ad44 <ZSTD_findDecompressedSize+0xc0>  // b.pmore
    ad1c:	add	x20, x20, x0
    ad20:	sub	x19, x19, x0
    ad24:	b	acec <ZSTD_findDecompressedSize+0x68>
    ad28:	mov	x21, #0x0                   	// #0
    ad2c:	cmp	x19, #0x0
    ad30:	mov	x0, #0xfffffffffffffffe    	// #-2
    ad34:	csel	x21, x21, x0, eq  // eq = none
    ad38:	b	ad48 <ZSTD_findDecompressedSize+0xc4>
    ad3c:	mov	x21, #0xffffffffffffffb8    	// #-72
    ad40:	b	ad48 <ZSTD_findDecompressedSize+0xc4>
    ad44:	mov	x21, #0xfffffffffffffffe    	// #-2
    ad48:	mov	x0, x21
    ad4c:	ldp	x19, x20, [sp, #16]
    ad50:	ldp	x21, x22, [sp, #32]
    ad54:	ldp	x29, x30, [sp], #48
    ad58:	ret
    ad5c:	mov	x21, x0
    ad60:	b	ad48 <ZSTD_findDecompressedSize+0xc4>
    ad64:	mov	x21, #0xfffffffffffffffe    	// #-2
    ad68:	b	ad48 <ZSTD_findDecompressedSize+0xc4>
    ad6c:	mov	x21, #0xfffffffffffffffe    	// #-2
    ad70:	b	ad48 <ZSTD_findDecompressedSize+0xc4>

000000000000ad74 <ZSTD_nextSrcSizeToDecompress>:
    ad74:	ldr	x0, [x0, #28776]
    ad78:	ret

000000000000ad7c <ZSTD_nextInputType>:
    ad7c:	add	x0, x0, #0x4, lsl #12
    ad80:	ldr	w1, [x0, #12452]
    ad84:	cmp	w1, #0x4
    ad88:	b.eq	adcc <ZSTD_nextInputType+0x50>  // b.none
    ad8c:	b.ls	adb0 <ZSTD_nextInputType+0x34>  // b.plast
    ad90:	mov	w0, #0x4                   	// #4
    ad94:	cmp	w1, #0x5
    ad98:	b.eq	adc8 <ZSTD_nextInputType+0x4c>  // b.none
    ad9c:	sub	w1, w1, #0x6
    ada0:	cmp	w1, #0x2
    ada4:	mov	w0, #0x5                   	// #5
    ada8:	csel	w0, w0, wzr, cc  // cc = lo, ul, last
    adac:	b	adc8 <ZSTD_nextInputType+0x4c>
    adb0:	mov	w0, #0x1                   	// #1
    adb4:	cmp	w1, #0x2
    adb8:	b.eq	adc8 <ZSTD_nextInputType+0x4c>  // b.none
    adbc:	cmp	w1, #0x3
    adc0:	cset	w0, eq  // eq = none
    adc4:	lsl	w0, w0, #1
    adc8:	ret
    adcc:	mov	w0, #0x3                   	// #3
    add0:	b	adc8 <ZSTD_nextInputType+0x4c>

000000000000add4 <ZSTD_decompressContinue>:
    add4:	stp	x29, x30, [sp, #-80]!
    add8:	mov	x29, sp
    addc:	stp	x19, x20, [sp, #16]
    ade0:	stp	x21, x22, [sp, #32]
    ade4:	mov	x19, x0
    ade8:	ldr	x0, [x0, #28776]
    adec:	mov	x21, #0xffffffffffffffb8    	// #-72
    adf0:	cmp	x0, x4
    adf4:	b.ne	af00 <ZSTD_decompressContinue+0x12c>  // b.any
    adf8:	stp	x23, x24, [sp, #48]
    adfc:	mov	x23, x1
    ae00:	mov	x24, x2
    ae04:	mov	x22, x3
    ae08:	mov	x20, x4
    ae0c:	cbnz	x2, aea0 <ZSTD_decompressContinue+0xcc>
    ae10:	add	x0, x19, #0x4, lsl #12
    ae14:	ldr	w0, [x0, #12452]
    ae18:	cmp	w0, #0x4
    ae1c:	b.hi	af14 <ZSTD_decompressContinue+0x140>  // b.pmore
    ae20:	cmp	w0, #0x2
    ae24:	b.hi	b0a8 <ZSTD_decompressContinue+0x2d4>  // b.pmore
    ae28:	cmp	w0, #0x1
    ae2c:	b.eq	aff4 <ZSTD_decompressContinue+0x220>  // b.none
    ae30:	cmp	w0, #0x2
    ae34:	b.ne	aeac <ZSTD_decompressContinue+0xd8>  // b.any
    ae38:	add	x2, sp, #0x40
    ae3c:	mov	x1, #0x3                   	// #3
    ae40:	mov	x0, x22
    ae44:	bl	9a50 <ZSTD_getcBlockSize>
    ae48:	mov	x21, x0
    ae4c:	cmn	x0, #0x78
    ae50:	b.hi	b260 <ZSTD_decompressContinue+0x48c>  // b.pmore
    ae54:	str	x0, [x19, #28776]
    ae58:	add	x0, x19, #0x4, lsl #12
    ae5c:	ldr	w1, [sp, #64]
    ae60:	str	w1, [x0, #12448]
    ae64:	ldr	w0, [sp, #72]
    ae68:	str	x0, [x19, #28992]
    ae6c:	cbnz	x21, b054 <ZSTD_decompressContinue+0x280>
    ae70:	ldr	w0, [sp, #68]
    ae74:	cbz	w0, b08c <ZSTD_decompressContinue+0x2b8>
    ae78:	add	x0, x19, #0x4, lsl #12
    ae7c:	ldr	w0, [x0, #12432]
    ae80:	cbz	w0, b078 <ZSTD_decompressContinue+0x2a4>
    ae84:	mov	x0, #0x4                   	// #4
    ae88:	str	x0, [x19, #28776]
    ae8c:	add	x19, x19, #0x4, lsl #12
    ae90:	mov	w0, #0x5                   	// #5
    ae94:	str	w0, [x19, #12452]
    ae98:	ldp	x23, x24, [sp, #48]
    ae9c:	b	af00 <ZSTD_decompressContinue+0x12c>
    aea0:	mov	x0, x19
    aea4:	bl	7b48 <ZSTD_free+0xb4>
    aea8:	b	ae10 <ZSTD_decompressContinue+0x3c>
    aeac:	cbnz	w0, aef8 <ZSTD_decompressContinue+0x124>
    aeb0:	add	x0, x19, #0x4, lsl #12
    aeb4:	ldr	w2, [x0, #12560]
    aeb8:	cbnz	w2, aed4 <ZSTD_decompressContinue+0x100>
    aebc:	ldr	w0, [x22]
    aec0:	and	w0, w0, #0xfffffff0
    aec4:	mov	w1, #0x2a50                	// #10832
    aec8:	movk	w1, #0x184d, lsl #16
    aecc:	cmp	w0, w1
    aed0:	b.eq	af84 <ZSTD_decompressContinue+0x1b0>  // b.none
    aed4:	mov	x1, x20
    aed8:	mov	x0, x22
    aedc:	bl	7ad0 <ZSTD_free+0x3c>
    aee0:	mov	x21, x0
    aee4:	str	x0, [x19, #28936]
    aee8:	cmn	x0, #0x78
    aeec:	b.ls	afbc <ZSTD_decompressContinue+0x1e8>  // b.plast
    aef0:	ldp	x23, x24, [sp, #48]
    aef4:	b	af00 <ZSTD_decompressContinue+0x12c>
    aef8:	mov	x21, #0xffffffffffffffff    	// #-1
    aefc:	ldp	x23, x24, [sp, #48]
    af00:	mov	x0, x21
    af04:	ldp	x19, x20, [sp, #16]
    af08:	ldp	x21, x22, [sp, #32]
    af0c:	ldp	x29, x30, [sp], #80
    af10:	ret
    af14:	cmp	w0, #0x6
    af18:	b.eq	b204 <ZSTD_decompressContinue+0x430>  // b.none
    af1c:	cmp	w0, #0x7
    af20:	b.ne	af3c <ZSTD_decompressContinue+0x168>  // b.any
    af24:	str	xzr, [x19, #28776]
    af28:	add	x19, x19, #0x4, lsl #12
    af2c:	str	wzr, [x19, #12452]
    af30:	mov	x21, #0x0                   	// #0
    af34:	ldp	x23, x24, [sp, #48]
    af38:	b	af00 <ZSTD_decompressContinue+0x12c>
    af3c:	cmp	w0, #0x5
    af40:	b.ne	af78 <ZSTD_decompressContinue+0x1a4>  // b.any
    af44:	add	x0, x19, #0x7, lsl #12
    af48:	add	x0, x0, #0xb0
    af4c:	bl	7718 <XXH64_digest>
    af50:	ldr	w1, [x22]
    af54:	mov	x21, #0xffffffffffffffea    	// #-22
    af58:	cmp	w1, w0
    af5c:	b.ne	b280 <ZSTD_decompressContinue+0x4ac>  // b.any
    af60:	str	xzr, [x19, #28776]
    af64:	add	x19, x19, #0x4, lsl #12
    af68:	str	wzr, [x19, #12452]
    af6c:	mov	x21, #0x0                   	// #0
    af70:	ldp	x23, x24, [sp, #48]
    af74:	b	af00 <ZSTD_decompressContinue+0x12c>
    af78:	mov	x21, #0xffffffffffffffff    	// #-1
    af7c:	ldp	x23, x24, [sp, #48]
    af80:	b	af00 <ZSTD_decompressContinue+0x12c>
    af84:	mov	x2, x20
    af88:	mov	x1, x22
    af8c:	add	x0, x19, #0x27, lsl #12
    af90:	add	x0, x0, #0x1e0
    af94:	bl	0 <grub_memmove>
    af98:	mov	x0, #0x8                   	// #8
    af9c:	sub	x20, x0, x20
    afa0:	str	x20, [x19, #28776]
    afa4:	add	x19, x19, #0x4, lsl #12
    afa8:	mov	w0, #0x6                   	// #6
    afac:	str	w0, [x19, #12452]
    afb0:	mov	x21, #0x0                   	// #0
    afb4:	ldp	x23, x24, [sp, #48]
    afb8:	b	af00 <ZSTD_decompressContinue+0x12c>
    afbc:	mov	x2, x20
    afc0:	mov	x1, x22
    afc4:	add	x0, x19, #0x27, lsl #12
    afc8:	add	x0, x0, #0x1e0
    afcc:	bl	0 <grub_memmove>
    afd0:	ldr	x0, [x19, #28936]
    afd4:	sub	x20, x0, x20
    afd8:	str	x20, [x19, #28776]
    afdc:	add	x19, x19, #0x4, lsl #12
    afe0:	mov	w0, #0x1                   	// #1
    afe4:	str	w0, [x19, #12452]
    afe8:	mov	x21, #0x0                   	// #0
    afec:	ldp	x23, x24, [sp, #48]
    aff0:	b	af00 <ZSTD_decompressContinue+0x12c>
    aff4:	add	x3, x19, #0x27, lsl #12
    aff8:	add	x3, x3, #0x1e0
    affc:	ldr	x0, [x19, #28936]
    b000:	sub	x0, x0, x20
    b004:	mov	x2, x20
    b008:	mov	x1, x22
    b00c:	mov	x20, x3
    b010:	add	x0, x3, x0
    b014:	bl	0 <grub_memmove>
    b018:	ldr	x2, [x19, #28936]
    b01c:	mov	x1, x20
    b020:	mov	x0, x19
    b024:	bl	9950 <ZSTD_getFrameHeader_advanced+0x230>
    b028:	mov	x21, x0
    b02c:	cmn	x0, #0x78
    b030:	b.hi	b258 <ZSTD_decompressContinue+0x484>  // b.pmore
    b034:	mov	x0, #0x3                   	// #3
    b038:	str	x0, [x19, #28776]
    b03c:	add	x19, x19, #0x4, lsl #12
    b040:	mov	w0, #0x2                   	// #2
    b044:	str	w0, [x19, #12452]
    b048:	mov	x21, #0x0                   	// #0
    b04c:	ldp	x23, x24, [sp, #48]
    b050:	b	af00 <ZSTD_decompressContinue+0x12c>
    b054:	ldr	w0, [sp, #68]
    b058:	cmp	w0, #0x0
    b05c:	cset	w0, ne  // ne = any
    b060:	add	w0, w0, #0x3
    b064:	add	x19, x19, #0x4, lsl #12
    b068:	str	w0, [x19, #12452]
    b06c:	mov	x21, #0x0                   	// #0
    b070:	ldp	x23, x24, [sp, #48]
    b074:	b	af00 <ZSTD_decompressContinue+0x12c>
    b078:	str	xzr, [x19, #28776]
    b07c:	add	x19, x19, #0x4, lsl #12
    b080:	str	wzr, [x19, #12452]
    b084:	ldp	x23, x24, [sp, #48]
    b088:	b	af00 <ZSTD_decompressContinue+0x12c>
    b08c:	mov	x0, #0x3                   	// #3
    b090:	str	x0, [x19, #28776]
    b094:	add	x19, x19, #0x4, lsl #12
    b098:	mov	w0, #0x2                   	// #2
    b09c:	str	w0, [x19, #12452]
    b0a0:	ldp	x23, x24, [sp, #48]
    b0a4:	b	af00 <ZSTD_decompressContinue+0x12c>
    b0a8:	add	x0, x19, #0x4, lsl #12
    b0ac:	ldr	w0, [x0, #12448]
    b0b0:	cmp	w0, #0x1
    b0b4:	b.eq	b16c <ZSTD_decompressContinue+0x398>  // b.none
    b0b8:	cmp	w0, #0x2
    b0bc:	b.eq	b0d0 <ZSTD_decompressContinue+0x2fc>  // b.none
    b0c0:	cbz	w0, b144 <ZSTD_decompressContinue+0x370>
    b0c4:	mov	x21, #0xffffffffffffffec    	// #-20
    b0c8:	ldp	x23, x24, [sp, #48]
    b0cc:	b	af00 <ZSTD_decompressContinue+0x12c>
    b0d0:	mov	w5, #0x1                   	// #1
    b0d4:	mov	x4, x20
    b0d8:	mov	x3, x22
    b0dc:	mov	x2, x24
    b0e0:	mov	x1, x23
    b0e4:	mov	x0, x19
    b0e8:	bl	a108 <ZSTD_decodeSeqHeaders+0x288>
    b0ec:	mov	x21, x0
    b0f0:	cmn	x21, #0x78
    b0f4:	b.hi	b278 <ZSTD_decompressContinue+0x4a4>  // b.pmore
    b0f8:	ldr	x0, [x19, #28824]
    b0fc:	add	x0, x0, x21
    b100:	str	x0, [x19, #28824]
    b104:	add	x0, x19, #0x4, lsl #12
    b108:	ldr	w0, [x0, #12432]
    b10c:	cbnz	w0, b198 <ZSTD_decompressContinue+0x3c4>
    b110:	add	x0, x19, #0x4, lsl #12
    b114:	ldr	w0, [x0, #12452]
    b118:	cmp	w0, #0x4
    b11c:	b.eq	b1b0 <ZSTD_decompressContinue+0x3dc>  // b.none
    b120:	add	x0, x19, #0x4, lsl #12
    b124:	mov	w1, #0x2                   	// #2
    b128:	str	w1, [x0, #12452]
    b12c:	mov	x0, #0x3                   	// #3
    b130:	str	x0, [x19, #28776]
    b134:	add	x23, x23, x21
    b138:	str	x23, [x19, #28744]
    b13c:	ldp	x23, x24, [sp, #48]
    b140:	b	af00 <ZSTD_decompressContinue+0x12c>
    b144:	cmp	x23, #0x0
    b148:	mov	x21, #0xffffffffffffffba    	// #-70
    b14c:	ccmp	x20, x24, #0x2, ne  // ne = any
    b150:	b.hi	b268 <ZSTD_decompressContinue+0x494>  // b.pmore
    b154:	mov	x2, x20
    b158:	mov	x1, x22
    b15c:	mov	x0, x23
    b160:	bl	0 <grub_memmove>
    b164:	mov	x21, x20
    b168:	b	b0f0 <ZSTD_decompressContinue+0x31c>
    b16c:	mov	x21, #0xffffffffffffffb8    	// #-72
    b170:	cmp	x20, #0x1
    b174:	b.ne	b270 <ZSTD_decompressContinue+0x49c>  // b.any
    b178:	ldr	x21, [x19, #28992]
    b17c:	cmp	x21, x24
    b180:	b.hi	b24c <ZSTD_decompressContinue+0x478>  // b.pmore
    b184:	mov	x2, x21
    b188:	ldrb	w1, [x22]
    b18c:	mov	x0, x23
    b190:	bl	0 <grub_memset>
    b194:	b	b0f0 <ZSTD_decompressContinue+0x31c>
    b198:	mov	x2, x21
    b19c:	mov	x1, x23
    b1a0:	add	x0, x19, #0x7, lsl #12
    b1a4:	add	x0, x0, #0xb0
    b1a8:	bl	74d8 <XXH64_update>
    b1ac:	b	b110 <ZSTD_decompressContinue+0x33c>
    b1b0:	ldr	x0, [x19, #28784]
    b1b4:	cmn	x0, #0x1
    b1b8:	b.eq	b1c8 <ZSTD_decompressContinue+0x3f4>  // b.none
    b1bc:	ldr	x1, [x19, #28824]
    b1c0:	cmp	x0, x1
    b1c4:	b.ne	b240 <ZSTD_decompressContinue+0x46c>  // b.any
    b1c8:	add	x0, x19, #0x4, lsl #12
    b1cc:	ldr	w0, [x0, #12432]
    b1d0:	cbz	w0, b1f0 <ZSTD_decompressContinue+0x41c>
    b1d4:	mov	x0, #0x4                   	// #4
    b1d8:	str	x0, [x19, #28776]
    b1dc:	add	x19, x19, #0x4, lsl #12
    b1e0:	mov	w0, #0x5                   	// #5
    b1e4:	str	w0, [x19, #12452]
    b1e8:	ldp	x23, x24, [sp, #48]
    b1ec:	b	af00 <ZSTD_decompressContinue+0x12c>
    b1f0:	str	xzr, [x19, #28776]
    b1f4:	add	x19, x19, #0x4, lsl #12
    b1f8:	str	wzr, [x19, #12452]
    b1fc:	ldp	x23, x24, [sp, #48]
    b200:	b	af00 <ZSTD_decompressContinue+0x12c>
    b204:	sub	x0, x19, x20
    b208:	mov	x2, x20
    b20c:	mov	x1, x22
    b210:	add	x0, x0, #0x27, lsl #12
    b214:	add	x0, x0, #0x1e8
    b218:	bl	0 <grub_memmove>
    b21c:	add	x0, x19, #0x24, lsl #12
    b220:	ldr	w0, [x0, #12772]
    b224:	str	x0, [x19, #28776]
    b228:	add	x19, x19, #0x4, lsl #12
    b22c:	mov	w0, #0x7                   	// #7
    b230:	str	w0, [x19, #12452]
    b234:	mov	x21, #0x0                   	// #0
    b238:	ldp	x23, x24, [sp, #48]
    b23c:	b	af00 <ZSTD_decompressContinue+0x12c>
    b240:	mov	x21, #0xffffffffffffffec    	// #-20
    b244:	ldp	x23, x24, [sp, #48]
    b248:	b	af00 <ZSTD_decompressContinue+0x12c>
    b24c:	mov	x21, #0xffffffffffffffba    	// #-70
    b250:	ldp	x23, x24, [sp, #48]
    b254:	b	af00 <ZSTD_decompressContinue+0x12c>
    b258:	ldp	x23, x24, [sp, #48]
    b25c:	b	af00 <ZSTD_decompressContinue+0x12c>
    b260:	ldp	x23, x24, [sp, #48]
    b264:	b	af00 <ZSTD_decompressContinue+0x12c>
    b268:	ldp	x23, x24, [sp, #48]
    b26c:	b	af00 <ZSTD_decompressContinue+0x12c>
    b270:	ldp	x23, x24, [sp, #48]
    b274:	b	af00 <ZSTD_decompressContinue+0x12c>
    b278:	ldp	x23, x24, [sp, #48]
    b27c:	b	af00 <ZSTD_decompressContinue+0x12c>
    b280:	ldp	x23, x24, [sp, #48]
    b284:	b	af00 <ZSTD_decompressContinue+0x12c>

000000000000b288 <ZSTD_decompressBegin>:
    b288:	stp	x29, x30, [sp, #-32]!
    b28c:	mov	x29, sp
    b290:	str	x19, [sp, #16]
    b294:	mov	x19, x0
    b298:	add	x0, x0, #0x4, lsl #12
    b29c:	ldr	w0, [x0, #12560]
    b2a0:	cmp	w0, #0x1
    b2a4:	mov	x0, #0x5                   	// #5
    b2a8:	csinc	x0, x0, xzr, ne  // ne = any
    b2ac:	str	x0, [x19, #28776]
    b2b0:	add	x0, x19, #0x4, lsl #12
    b2b4:	str	wzr, [x0, #12452]
    b2b8:	str	xzr, [x19, #28824]
    b2bc:	str	xzr, [x19, #28744]
    b2c0:	str	xzr, [x19, #28752]
    b2c4:	str	xzr, [x19, #28760]
    b2c8:	str	xzr, [x19, #28768]
    b2cc:	mov	w1, #0xc                   	// #12
    b2d0:	movk	w1, #0xc00, lsl #16
    b2d4:	str	w1, [x19, #10296]
    b2d8:	str	wzr, [x0, #12460]
    b2dc:	str	wzr, [x0, #12456]
    b2e0:	str	wzr, [x0, #12648]
    b2e4:	adrp	x0, 0 <FSE_versionNumber>
    b2e8:	ldr	x1, [x0]
    b2ec:	mov	x2, #0xc                   	// #12
    b2f0:	add	x1, x1, #0x9c0
    b2f4:	add	x0, x19, #0x6, lsl #12
    b2f8:	add	x0, x0, #0x83c
    b2fc:	bl	0 <grub_memmove>
    b300:	add	x0, x19, #0x20
    b304:	str	x0, [x19]
    b308:	add	x0, x19, #0x1, lsl #12
    b30c:	add	x0, x0, #0x830
    b310:	str	x0, [x19, #8]
    b314:	add	x0, x19, #0x1, lsl #12
    b318:	add	x0, x0, #0x28
    b31c:	str	x0, [x19, #16]
    b320:	add	x0, x19, #0x2, lsl #12
    b324:	add	x0, x0, #0x838
    b328:	str	x0, [x19, #24]
    b32c:	mov	x0, #0x0                   	// #0
    b330:	ldr	x19, [sp, #16]
    b334:	ldp	x29, x30, [sp], #32
    b338:	ret
    b33c:	nop
	...

000000000000b348 <ZSTD_decompressBegin_usingDict>:
    b348:	stp	x29, x30, [sp, #-48]!
    b34c:	mov	x29, sp
    b350:	stp	x19, x20, [sp, #16]
    b354:	str	x21, [sp, #32]
    b358:	mov	x21, x0
    b35c:	mov	x19, x1
    b360:	mov	x20, x2
    b364:	bl	b288 <ZSTD_decompressBegin>
    b368:	cmn	x0, #0x78
    b36c:	b.hi	b380 <ZSTD_decompressBegin_usingDict+0x38>  // b.pmore
    b370:	cmp	x19, #0x0
    b374:	mov	x0, #0x0                   	// #0
    b378:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    b37c:	b.ne	b390 <ZSTD_decompressBegin_usingDict+0x48>  // b.any
    b380:	ldp	x19, x20, [sp, #16]
    b384:	ldr	x21, [sp, #32]
    b388:	ldp	x29, x30, [sp], #48
    b38c:	ret
    b390:	cmp	x20, #0x7
    b394:	b.ls	b3d8 <ZSTD_decompressBegin_usingDict+0x90>  // b.plast
    b398:	ldr	w1, [x19]
    b39c:	mov	w0, #0xa437                	// #42039
    b3a0:	movk	w0, #0xec30, lsl #16
    b3a4:	cmp	w1, w0
    b3a8:	b.eq	b400 <ZSTD_decompressBegin_usingDict+0xb8>  // b.none
    b3ac:	ldr	x0, [x21, #28744]
    b3b0:	str	x0, [x21, #28768]
    b3b4:	ldr	x1, [x21, #28752]
    b3b8:	sub	x0, x0, x1
    b3bc:	sub	x0, x19, x0
    b3c0:	str	x0, [x21, #28760]
    b3c4:	str	x19, [x21, #28752]
    b3c8:	add	x19, x19, x20
    b3cc:	str	x19, [x21, #28744]
    b3d0:	mov	x0, #0x0                   	// #0
    b3d4:	b	b380 <ZSTD_decompressBegin_usingDict+0x38>
    b3d8:	ldr	x0, [x21, #28744]
    b3dc:	str	x0, [x21, #28768]
    b3e0:	ldr	x1, [x21, #28752]
    b3e4:	sub	x0, x0, x1
    b3e8:	sub	x0, x19, x0
    b3ec:	str	x0, [x21, #28760]
    b3f0:	str	x19, [x21, #28752]
    b3f4:	add	x19, x19, x20
    b3f8:	str	x19, [x21, #28744]
    b3fc:	b	b3d0 <ZSTD_decompressBegin_usingDict+0x88>
    b400:	ldr	w1, [x19, #4]
    b404:	add	x0, x21, #0x4, lsl #12
    b408:	str	w1, [x0, #12648]
    b40c:	mov	x2, x20
    b410:	mov	x1, x19
    b414:	add	x0, x21, #0x20
    b418:	bl	7fdc <ZSTD_free+0x548>
    b41c:	mov	x1, x0
    b420:	mov	x0, #0xffffffffffffffe2    	// #-30
    b424:	cmn	x1, #0x78
    b428:	b.hi	b380 <ZSTD_decompressBegin_usingDict+0x38>  // b.pmore
    b42c:	add	x1, x19, x1
    b430:	add	x0, x21, #0x4, lsl #12
    b434:	mov	w2, #0x1                   	// #1
    b438:	str	w2, [x0, #12460]
    b43c:	str	w2, [x0, #12456]
    b440:	ldr	x0, [x21, #28744]
    b444:	str	x0, [x21, #28768]
    b448:	ldr	x2, [x21, #28752]
    b44c:	sub	x0, x0, x2
    b450:	sub	x0, x1, x0
    b454:	str	x0, [x21, #28760]
    b458:	str	x1, [x21, #28752]
    b45c:	add	x19, x19, x20
    b460:	str	x19, [x21, #28744]
    b464:	b	b3d0 <ZSTD_decompressBegin_usingDict+0x88>

000000000000b468 <ZSTD_decompressBegin_usingDDict>:
    b468:	stp	x29, x30, [sp, #-32]!
    b46c:	mov	x29, sp
    b470:	stp	x19, x20, [sp, #16]
    b474:	mov	x19, x0
    b478:	cbz	x1, b548 <ZSTD_decompressBegin_usingDDict+0xe0>
    b47c:	mov	x20, x1
    b480:	add	x1, x0, #0x4, lsl #12
    b484:	ldr	x0, [x20, #8]
    b488:	ldr	x2, [x20, #16]
    b48c:	add	x0, x0, x2
    b490:	ldr	x2, [x19, #28768]
    b494:	cmp	x2, x0
    b498:	cset	w0, ne  // ne = any
    b49c:	str	w0, [x1, #12652]
    b4a0:	mov	x0, x19
    b4a4:	bl	b288 <ZSTD_decompressBegin>
    b4a8:	cmn	x0, #0x78
    b4ac:	b.hi	b554 <ZSTD_decompressBegin_usingDDict+0xec>  // b.pmore
    b4b0:	add	x1, x20, #0x4, lsl #12
    b4b4:	ldr	w2, [x1, #10304]
    b4b8:	add	x0, x19, #0x4, lsl #12
    b4bc:	str	w2, [x0, #12648]
    b4c0:	ldr	x0, [x20, #8]
    b4c4:	str	x0, [x19, #28752]
    b4c8:	str	x0, [x19, #28760]
    b4cc:	ldr	x0, [x20, #8]
    b4d0:	ldr	x2, [x20, #16]
    b4d4:	add	x0, x0, x2
    b4d8:	str	x0, [x19, #28768]
    b4dc:	str	x0, [x19, #28744]
    b4e0:	ldr	w0, [x1, #10308]
    b4e4:	cbz	w0, b560 <ZSTD_decompressBegin_usingDDict+0xf8>
    b4e8:	add	x0, x19, #0x4, lsl #12
    b4ec:	mov	w1, #0x1                   	// #1
    b4f0:	str	w1, [x0, #12456]
    b4f4:	str	w1, [x0, #12460]
    b4f8:	add	x1, x20, #0x18
    b4fc:	str	x1, [x19]
    b500:	add	x1, x20, #0x1, lsl #12
    b504:	add	x1, x1, #0x828
    b508:	str	x1, [x19, #8]
    b50c:	add	x1, x20, #0x1, lsl #12
    b510:	add	x1, x1, #0x20
    b514:	str	x1, [x19, #16]
    b518:	add	x1, x20, #0x2, lsl #12
    b51c:	add	x1, x1, #0x830
    b520:	str	x1, [x19, #24]
    b524:	add	x20, x20, #0x4, lsl #12
    b528:	ldr	w1, [x20, #10292]
    b52c:	str	w1, [x0, #10300]
    b530:	ldr	w1, [x20, #10296]
    b534:	str	w1, [x0, #10304]
    b538:	ldr	w1, [x20, #10300]
    b53c:	str	w1, [x0, #10308]
    b540:	mov	x0, #0x0                   	// #0
    b544:	b	b554 <ZSTD_decompressBegin_usingDDict+0xec>
    b548:	bl	b288 <ZSTD_decompressBegin>
    b54c:	cmn	x0, #0x78
    b550:	csel	x0, x0, xzr, hi  // hi = pmore
    b554:	ldp	x19, x20, [sp, #16]
    b558:	ldp	x29, x30, [sp], #32
    b55c:	ret
    b560:	add	x19, x19, #0x4, lsl #12
    b564:	str	wzr, [x19, #12456]
    b568:	str	wzr, [x19, #12460]
    b56c:	mov	x0, #0x0                   	// #0
    b570:	b	b554 <ZSTD_decompressBegin_usingDDict+0xec>
    b574:	stp	x29, x30, [sp, #-192]!
    b578:	mov	x29, sp
    b57c:	stp	x19, x20, [sp, #16]
    b580:	stp	x21, x22, [sp, #32]
    b584:	stp	x23, x24, [sp, #48]
    b588:	stp	x25, x26, [sp, #64]
    b58c:	mov	x22, x0
    b590:	str	x1, [sp, #160]
    b594:	mov	x25, x2
    b598:	mov	x21, x3
    b59c:	mov	x20, x4
    b5a0:	str	x5, [sp, #136]
    b5a4:	str	x6, [sp, #144]
    b5a8:	mov	x24, x7
    b5ac:	cbz	x7, b5c0 <ZSTD_decompressBegin_usingDDict+0x158>
    b5b0:	ldr	x0, [x7, #8]
    b5b4:	str	x0, [sp, #136]
    b5b8:	ldr	x0, [x7, #16]
    b5bc:	str	x0, [sp, #144]
    b5c0:	cmp	x20, #0x4
    b5c4:	b.ls	b8ac <ZSTD_decompressBegin_usingDDict+0x444>  // b.plast
    b5c8:	stp	x27, x28, [sp, #80]
    b5cc:	ldr	x23, [sp, #160]
    b5d0:	mov	w27, #0x0                   	// #0
    b5d4:	add	x0, x22, #0x7, lsl #12
    b5d8:	add	x0, x0, #0xb0
    b5dc:	str	x0, [sp, #168]
    b5e0:	b	b714 <ZSTD_decompressBegin_usingDDict+0x2ac>
    b5e4:	cmp	x20, #0x7
    b5e8:	b.ls	b8d0 <ZSTD_decompressBegin_usingDDict+0x468>  // b.plast
    b5ec:	ldr	w0, [x21, #4]
    b5f0:	add	x0, x0, #0x8
    b5f4:	cmp	x20, x0
    b5f8:	b.cc	b8dc <ZSTD_decompressBegin_usingDDict+0x474>  // b.lo, b.ul, b.last
    b5fc:	add	x21, x21, x0
    b600:	sub	x20, x20, x0
    b604:	b	b70c <ZSTD_decompressBegin_usingDDict+0x2a4>
    b608:	ldp	x27, x28, [sp, #80]
    b60c:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b610:	ldr	x2, [sp, #144]
    b614:	ldr	x1, [sp, #136]
    b618:	mov	x0, x22
    b61c:	bl	b348 <ZSTD_decompressBegin_usingDict>
    b620:	mov	x19, x0
    b624:	cmn	x0, #0x78
    b628:	b.ls	b748 <ZSTD_decompressBegin_usingDDict+0x2e0>  // b.plast
    b62c:	ldp	x27, x28, [sp, #80]
    b630:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b634:	mov	w5, #0x1                   	// #1
    b638:	mov	x4, x19
    b63c:	ldr	x3, [sp, #112]
    b640:	ldr	x0, [sp, #128]
    b644:	sub	x2, x0, x26
    b648:	mov	x1, x26
    b64c:	mov	x0, x22
    b650:	bl	a108 <ZSTD_decodeSeqHeaders+0x288>
    b654:	str	x0, [sp, #104]
    b658:	cmn	x0, #0x78
    b65c:	b.hi	b830 <ZSTD_decompressBegin_usingDDict+0x3c8>  // b.pmore
    b660:	ldr	x0, [sp, #152]
    b664:	ldr	w0, [x0, #12432]
    b668:	cbnz	w0, b814 <ZSTD_decompressBegin_usingDDict+0x3ac>
    b66c:	ldr	x0, [sp, #104]
    b670:	add	x26, x26, x0
    b674:	ldr	x0, [sp, #112]
    b678:	add	x28, x0, x19
    b67c:	ldr	x0, [sp, #120]
    b680:	sub	x0, x0, x19
    b684:	str	x0, [sp, #104]
    b688:	ldr	w0, [sp, #180]
    b68c:	cbnz	w0, b848 <ZSTD_decompressBegin_usingDDict+0x3e0>
    b690:	add	x2, sp, #0xb0
    b694:	ldr	x1, [sp, #104]
    b698:	mov	x0, x28
    b69c:	bl	9a50 <ZSTD_getcBlockSize>
    b6a0:	mov	x19, x0
    b6a4:	cmn	x0, #0x78
    b6a8:	b.hi	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>  // b.pmore
    b6ac:	add	x2, x28, #0x3
    b6b0:	str	x2, [sp, #112]
    b6b4:	ldr	x0, [sp, #104]
    b6b8:	sub	x0, x0, #0x3
    b6bc:	str	x0, [sp, #120]
    b6c0:	cmp	x19, x0
    b6c4:	b.hi	b828 <ZSTD_decompressBegin_usingDDict+0x3c0>  // b.pmore
    b6c8:	ldr	w0, [sp, #176]
    b6cc:	cmp	w0, #0x1
    b6d0:	b.eq	b7e8 <ZSTD_decompressBegin_usingDDict+0x380>  // b.none
    b6d4:	cmp	w0, #0x2
    b6d8:	b.eq	b634 <ZSTD_decompressBegin_usingDDict+0x1cc>  // b.none
    b6dc:	cbz	w0, b7bc <ZSTD_decompressBegin_usingDDict+0x354>
    b6e0:	mov	x19, #0xffffffffffffffec    	// #-20
    b6e4:	mov	x0, x19
    b6e8:	bl	79f0 <ZSTD_getErrorCode>
    b6ec:	cmp	w27, #0x1
    b6f0:	ccmp	w0, #0xa, #0x0, eq  // eq = none
    b6f4:	b.eq	b8e8 <ZSTD_decompressBegin_usingDDict+0x480>  // b.none
    b6f8:	cmn	x19, #0x78
    b6fc:	b.hi	b958 <ZSTD_decompressBegin_usingDDict+0x4f0>  // b.pmore
    b700:	add	x23, x23, x19
    b704:	sub	x25, x25, x19
    b708:	mov	w27, #0x1                   	// #1
    b70c:	cmp	x20, #0x4
    b710:	b.ls	b8b4 <ZSTD_decompressBegin_usingDDict+0x44c>  // b.plast
    b714:	ldr	w0, [x21]
    b718:	and	w0, w0, #0xfffffff0
    b71c:	mov	w1, #0x2a50                	// #10832
    b720:	movk	w1, #0x184d, lsl #16
    b724:	cmp	w0, w1
    b728:	b.eq	b5e4 <ZSTD_decompressBegin_usingDDict+0x17c>  // b.none
    b72c:	cbz	x24, b610 <ZSTD_decompressBegin_usingDDict+0x1a8>
    b730:	mov	x1, x24
    b734:	mov	x0, x22
    b738:	bl	b468 <ZSTD_decompressBegin_usingDDict>
    b73c:	mov	x19, x0
    b740:	cmn	x0, #0x78
    b744:	b.hi	b608 <ZSTD_decompressBegin_usingDDict+0x1a0>  // b.pmore
    b748:	mov	x1, x23
    b74c:	mov	x0, x22
    b750:	bl	7b48 <ZSTD_free+0xb4>
    b754:	cmp	x20, #0x8
    b758:	b.ls	b8f4 <ZSTD_decompressBegin_usingDDict+0x48c>  // b.plast
    b75c:	mov	x1, #0x5                   	// #5
    b760:	mov	x0, x21
    b764:	bl	9708 <ZSTD_frameHeaderSize>
    b768:	mov	x19, x0
    b76c:	cmn	x0, #0x78
    b770:	b.hi	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>  // b.pmore
    b774:	add	x0, x0, #0x3
    b778:	cmp	x20, x0
    b77c:	b.cc	b930 <ZSTD_decompressBegin_usingDDict+0x4c8>  // b.lo, b.ul, b.last
    b780:	mov	x2, x19
    b784:	mov	x1, x21
    b788:	mov	x0, x22
    b78c:	bl	9950 <ZSTD_getFrameHeader_advanced+0x230>
    b790:	cmn	x0, #0x78
    b794:	b.hi	b938 <ZSTD_decompressBegin_usingDDict+0x4d0>  // b.pmore
    b798:	add	x0, x23, x25
    b79c:	str	x0, [sp, #128]
    b7a0:	add	x28, x21, x19
    b7a4:	sub	x0, x20, x19
    b7a8:	str	x0, [sp, #104]
    b7ac:	mov	x26, x23
    b7b0:	add	x0, x22, #0x4, lsl #12
    b7b4:	str	x0, [sp, #152]
    b7b8:	b	b690 <ZSTD_decompressBegin_usingDDict+0x228>
    b7bc:	ldr	x0, [sp, #128]
    b7c0:	sub	x0, x0, x26
    b7c4:	cmp	x26, #0x0
    b7c8:	ccmp	x19, x0, #0x2, ne  // ne = any
    b7cc:	b.hi	b838 <ZSTD_decompressBegin_usingDDict+0x3d0>  // b.pmore
    b7d0:	mov	x2, x19
    b7d4:	ldr	x1, [sp, #112]
    b7d8:	mov	x0, x26
    b7dc:	bl	0 <grub_memmove>
    b7e0:	str	x19, [sp, #104]
    b7e4:	b	b660 <ZSTD_decompressBegin_usingDDict+0x1f8>
    b7e8:	ldr	w1, [sp, #184]
    b7ec:	str	x1, [sp, #104]
    b7f0:	ldr	x0, [sp, #128]
    b7f4:	sub	x0, x0, x26
    b7f8:	cmp	x0, x1
    b7fc:	b.cc	b840 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.lo, b.ul, b.last
    b800:	mov	x2, x1
    b804:	ldrb	w1, [x28, #3]
    b808:	mov	x0, x26
    b80c:	bl	0 <grub_memset>
    b810:	b	b660 <ZSTD_decompressBegin_usingDDict+0x1f8>
    b814:	ldr	x2, [sp, #104]
    b818:	mov	x1, x26
    b81c:	ldr	x0, [sp, #168]
    b820:	bl	74d8 <XXH64_update>
    b824:	b	b66c <ZSTD_decompressBegin_usingDDict+0x204>
    b828:	mov	x19, #0xffffffffffffffb8    	// #-72
    b82c:	b	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>
    b830:	ldr	x19, [sp, #104]
    b834:	b	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>
    b838:	mov	x19, #0xffffffffffffffba    	// #-70
    b83c:	b	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>
    b840:	mov	x19, #0xffffffffffffffba    	// #-70
    b844:	b	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>
    b848:	ldr	x0, [x22, #28784]
    b84c:	cmn	x0, #0x1
    b850:	b.eq	b860 <ZSTD_decompressBegin_usingDDict+0x3f8>  // b.none
    b854:	sub	x1, x26, x23
    b858:	cmp	x0, x1
    b85c:	b.ne	b940 <ZSTD_decompressBegin_usingDDict+0x4d8>  // b.any
    b860:	add	x0, x22, #0x4, lsl #12
    b864:	ldr	w0, [x0, #12432]
    b868:	cbnz	w0, b87c <ZSTD_decompressBegin_usingDDict+0x414>
    b86c:	sub	x19, x26, x23
    b870:	ldr	x20, [sp, #104]
    b874:	mov	x21, x28
    b878:	b	b6e4 <ZSTD_decompressBegin_usingDDict+0x27c>
    b87c:	ldr	x0, [sp, #168]
    b880:	bl	7718 <XXH64_digest>
    b884:	ldr	x2, [sp, #104]
    b888:	cmp	x2, #0x3
    b88c:	b.ls	b948 <ZSTD_decompressBegin_usingDDict+0x4e0>  // b.plast
    b890:	ldr	w1, [x28]
    b894:	cmp	w0, w1
    b898:	b.ne	b950 <ZSTD_decompressBegin_usingDDict+0x4e8>  // b.any
    b89c:	add	x28, x28, #0x4
    b8a0:	sub	x0, x2, #0x4
    b8a4:	str	x0, [sp, #104]
    b8a8:	b	b86c <ZSTD_decompressBegin_usingDDict+0x404>
    b8ac:	ldr	x23, [sp, #160]
    b8b0:	b	b8b8 <ZSTD_decompressBegin_usingDDict+0x450>
    b8b4:	ldp	x27, x28, [sp, #80]
    b8b8:	ldr	x0, [sp, #160]
    b8bc:	sub	x23, x23, x0
    b8c0:	cmp	x20, #0x0
    b8c4:	mov	x19, #0xffffffffffffffb8    	// #-72
    b8c8:	csel	x19, x23, x19, eq  // eq = none
    b8cc:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b8d0:	mov	x19, #0xffffffffffffffb8    	// #-72
    b8d4:	ldp	x27, x28, [sp, #80]
    b8d8:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b8dc:	mov	x19, #0xffffffffffffffb8    	// #-72
    b8e0:	ldp	x27, x28, [sp, #80]
    b8e4:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b8e8:	mov	x19, #0xffffffffffffffb8    	// #-72
    b8ec:	ldp	x27, x28, [sp, #80]
    b8f0:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>
    b8f4:	mov	x19, #0xffffffffffffffb8    	// #-72
    b8f8:	mov	x0, x19
    b8fc:	bl	79f0 <ZSTD_getErrorCode>
    b900:	cmp	w27, #0x1
    b904:	ccmp	w0, #0xa, #0x0, eq  // eq = none
    b908:	mov	x0, #0xffffffffffffffb8    	// #-72
    b90c:	csel	x19, x19, x0, ne  // ne = any
    b910:	ldp	x27, x28, [sp, #80]
    b914:	mov	x0, x19
    b918:	ldp	x19, x20, [sp, #16]
    b91c:	ldp	x21, x22, [sp, #32]
    b920:	ldp	x23, x24, [sp, #48]
    b924:	ldp	x25, x26, [sp, #64]
    b928:	ldp	x29, x30, [sp], #192
    b92c:	ret
    b930:	mov	x19, #0xffffffffffffffb8    	// #-72
    b934:	b	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>
    b938:	mov	x19, x0
    b93c:	b	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>
    b940:	mov	x19, #0xffffffffffffffec    	// #-20
    b944:	b	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>
    b948:	mov	x19, #0xffffffffffffffea    	// #-22
    b94c:	b	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>
    b950:	mov	x19, #0xffffffffffffffea    	// #-22
    b954:	b	b8f8 <ZSTD_decompressBegin_usingDDict+0x490>
    b958:	ldp	x27, x28, [sp, #80]
    b95c:	b	b914 <ZSTD_decompressBegin_usingDDict+0x4ac>

000000000000b960 <ZSTD_decompress_usingDict>:
    b960:	stp	x29, x30, [sp, #-16]!
    b964:	mov	x29, sp
    b968:	mov	x7, #0x0                   	// #0
    b96c:	bl	b574 <ZSTD_decompressBegin_usingDDict+0x10c>
    b970:	ldp	x29, x30, [sp], #16
    b974:	ret

000000000000b978 <ZSTD_decompressDCtx>:
    b978:	stp	x29, x30, [sp, #-16]!
    b97c:	mov	x29, sp
    b980:	mov	x6, #0x0                   	// #0
    b984:	mov	x5, #0x0                   	// #0
    b988:	bl	b960 <ZSTD_decompress_usingDict>
    b98c:	ldp	x29, x30, [sp], #16
    b990:	ret

000000000000b994 <ZSTD_initStaticDDict>:
    b994:	stp	x29, x30, [sp, #-48]!
    b998:	mov	x29, sp
    b99c:	stp	x19, x20, [sp, #16]
    b9a0:	stp	x21, x22, [sp, #32]
    b9a4:	mov	x19, x0
    b9a8:	mov	x0, x1
    b9ac:	mov	x1, x2
    b9b0:	mov	x20, x3
    b9b4:	mov	w21, w5
    b9b8:	cmp	w4, #0x1
    b9bc:	b.eq	ba04 <ZSTD_initStaticDDict+0x70>  // b.none
    b9c0:	add	x2, x3, #0x6, lsl #12
    b9c4:	add	x2, x2, #0x860
    b9c8:	tst	x19, #0x7
    b9cc:	ccmp	x2, x0, #0x2, eq  // eq = none
    b9d0:	b.hi	b9f4 <ZSTD_initStaticDDict+0x60>  // b.pmore
    b9d4:	cbnz	w4, ba14 <ZSTD_initStaticDDict+0x80>
    b9d8:	add	x22, x19, #0x6, lsl #12
    b9dc:	add	x22, x22, #0x860
    b9e0:	mov	x2, x3
    b9e4:	mov	x0, x22
    b9e8:	bl	0 <grub_memmove>
    b9ec:	mov	x1, x22
    b9f0:	b	ba14 <ZSTD_initStaticDDict+0x80>
    b9f4:	mov	x19, #0x0                   	// #0
    b9f8:	b	ba30 <ZSTD_initStaticDDict+0x9c>
    b9fc:	mov	x19, #0x0                   	// #0
    ba00:	b	ba30 <ZSTD_initStaticDDict+0x9c>
    ba04:	tst	x19, #0x7
    ba08:	mov	x2, #0x685f                	// #26719
    ba0c:	ccmp	x0, x2, #0x0, eq  // eq = none
    ba10:	b.ls	b9fc <ZSTD_initStaticDDict+0x68>  // b.plast
    ba14:	mov	w4, w21
    ba18:	mov	w3, #0x1                   	// #1
    ba1c:	mov	x2, x20
    ba20:	mov	x0, x19
    ba24:	bl	81f8 <ZSTD_free+0x764>
    ba28:	cmn	x0, #0x77
    ba2c:	csel	x19, x19, xzr, cc  // cc = lo, ul, last
    ba30:	mov	x0, x19
    ba34:	ldp	x19, x20, [sp, #16]
    ba38:	ldp	x21, x22, [sp, #32]
    ba3c:	ldp	x29, x30, [sp], #48
    ba40:	ret

000000000000ba44 <ZSTD_freeDDict>:
    ba44:	cbz	x0, bab0 <ZSTD_freeDDict+0x6c>
    ba48:	stp	x29, x30, [sp, #-96]!
    ba4c:	mov	x29, sp
    ba50:	str	x19, [sp, #16]
    ba54:	mov	x19, x0
    ba58:	add	x0, x0, #0x6, lsl #12
    ba5c:	add	x0, x0, #0x800
    ba60:	ldp	x2, x3, [x0, #72]
    ba64:	stp	x2, x3, [sp, #72]
    ba68:	ldr	x0, [x19, #26712]
    ba6c:	str	x0, [sp, #88]
    ba70:	stp	x2, x3, [sp, #32]
    ba74:	str	x0, [sp, #48]
    ba78:	add	x1, sp, #0x20
    ba7c:	ldr	x0, [x19]
    ba80:	bl	7a94 <ZSTD_free>
    ba84:	ldp	x0, x1, [sp, #72]
    ba88:	stp	x0, x1, [sp, #32]
    ba8c:	ldr	x0, [sp, #88]
    ba90:	str	x0, [sp, #48]
    ba94:	add	x1, sp, #0x20
    ba98:	mov	x0, x19
    ba9c:	bl	7a94 <ZSTD_free>
    baa0:	mov	x0, #0x0                   	// #0
    baa4:	ldr	x19, [sp, #16]
    baa8:	ldp	x29, x30, [sp], #96
    baac:	ret
    bab0:	mov	x0, #0x0                   	// #0
    bab4:	ret

000000000000bab8 <ZSTD_freeDCtx>:
    bab8:	stp	x29, x30, [sp, #-96]!
    babc:	mov	x29, sp
    bac0:	stp	x19, x20, [sp, #16]
    bac4:	cbz	x0, bb40 <ZSTD_freeDCtx+0x88>
    bac8:	mov	x19, x0
    bacc:	ldr	x20, [x0, #29000]
    bad0:	cbnz	x20, bb48 <ZSTD_freeDCtx+0x90>
    bad4:	add	x0, x0, #0x7, lsl #12
    bad8:	ldp	x2, x3, [x0, #288]
    badc:	stp	x2, x3, [sp, #72]
    bae0:	ldr	x0, [x19, #28976]
    bae4:	str	x0, [sp, #88]
    bae8:	ldr	x0, [x19, #29016]
    baec:	bl	ba44 <ZSTD_freeDDict>
    baf0:	str	xzr, [x19, #29016]
    baf4:	ldp	x0, x1, [sp, #72]
    baf8:	stp	x0, x1, [sp, #32]
    bafc:	ldr	x0, [sp, #88]
    bb00:	str	x0, [sp, #48]
    bb04:	add	x1, sp, #0x20
    bb08:	ldr	x0, [x19, #29048]
    bb0c:	bl	7a94 <ZSTD_free>
    bb10:	str	xzr, [x19, #29048]
    bb14:	ldp	x0, x1, [sp, #72]
    bb18:	stp	x0, x1, [sp, #32]
    bb1c:	ldr	x0, [sp, #88]
    bb20:	str	x0, [sp, #48]
    bb24:	add	x1, sp, #0x20
    bb28:	mov	x0, x19
    bb2c:	bl	7a94 <ZSTD_free>
    bb30:	mov	x0, x20
    bb34:	ldp	x19, x20, [sp, #16]
    bb38:	ldp	x29, x30, [sp], #96
    bb3c:	ret
    bb40:	mov	x20, #0x0                   	// #0
    bb44:	b	bb30 <ZSTD_freeDCtx+0x78>
    bb48:	mov	x20, #0xffffffffffffffc0    	// #-64
    bb4c:	b	bb30 <ZSTD_freeDCtx+0x78>

000000000000bb50 <ZSTD_decompress>:
    bb50:	stp	x29, x30, [sp, #-64]!
    bb54:	mov	x29, sp
    bb58:	stp	x19, x20, [sp, #16]
    bb5c:	stp	x21, x22, [sp, #32]
    bb60:	str	x23, [sp, #48]
    bb64:	mov	x20, x0
    bb68:	mov	x21, x1
    bb6c:	mov	x22, x2
    bb70:	mov	x23, x3
    bb74:	bl	9670 <ZSTD_createDCtx>
    bb78:	cbz	x0, bbb8 <ZSTD_decompress+0x68>
    bb7c:	mov	x19, x0
    bb80:	mov	x4, x23
    bb84:	mov	x3, x22
    bb88:	mov	x2, x21
    bb8c:	mov	x1, x20
    bb90:	bl	b978 <ZSTD_decompressDCtx>
    bb94:	mov	x20, x0
    bb98:	mov	x0, x19
    bb9c:	bl	bab8 <ZSTD_freeDCtx>
    bba0:	mov	x0, x20
    bba4:	ldp	x19, x20, [sp, #16]
    bba8:	ldp	x21, x22, [sp, #32]
    bbac:	ldr	x23, [sp, #48]
    bbb0:	ldp	x29, x30, [sp], #64
    bbb4:	ret
    bbb8:	mov	x20, #0xffffffffffffffc0    	// #-64
    bbbc:	b	bba0 <ZSTD_decompress+0x50>

000000000000bbc0 <ZSTD_createDDict_advanced>:
    bbc0:	stp	x29, x30, [sp, #-96]!
    bbc4:	mov	x29, sp
    bbc8:	stp	x19, x20, [sp, #16]
    bbcc:	stp	x21, x22, [sp, #32]
    bbd0:	mov	x21, x0
    bbd4:	mov	x22, x1
    bbd8:	ldr	x0, [x4]
    bbdc:	cmp	x0, #0x0
    bbe0:	cset	w1, eq  // eq = none
    bbe4:	ldr	x0, [x4, #8]
    bbe8:	cmp	x0, #0x0
    bbec:	cset	w0, eq  // eq = none
    bbf0:	mov	x20, #0x0                   	// #0
    bbf4:	cmp	w0, w1, uxtb
    bbf8:	b.ne	bc6c <ZSTD_createDDict_advanced+0xac>  // b.any
    bbfc:	stp	x23, x24, [sp, #48]
    bc00:	mov	w23, w2
    bc04:	mov	w24, w3
    bc08:	mov	x19, x4
    bc0c:	ldp	x0, x1, [x4]
    bc10:	stp	x0, x1, [sp, #64]
    bc14:	ldr	x0, [x4, #16]
    bc18:	str	x0, [sp, #80]
    bc1c:	add	x1, sp, #0x40
    bc20:	mov	x0, #0x6860                	// #26720
    bc24:	bl	7a10 <ZSTD_malloc>
    bc28:	mov	x20, x0
    bc2c:	cbz	x0, bc94 <ZSTD_createDDict_advanced+0xd4>
    bc30:	add	x0, x0, #0x6, lsl #12
    bc34:	add	x0, x0, #0x800
    bc38:	ldp	x2, x3, [x19]
    bc3c:	stp	x2, x3, [x0, #72]
    bc40:	ldr	x1, [x19, #16]
    bc44:	str	x1, [x20, #26712]
    bc48:	mov	w4, w24
    bc4c:	mov	w3, w23
    bc50:	mov	x2, x22
    bc54:	mov	x1, x21
    bc58:	mov	x0, x20
    bc5c:	bl	81f8 <ZSTD_free+0x764>
    bc60:	cmn	x0, #0x78
    bc64:	b.hi	bc80 <ZSTD_createDDict_advanced+0xc0>  // b.pmore
    bc68:	ldp	x23, x24, [sp, #48]
    bc6c:	mov	x0, x20
    bc70:	ldp	x19, x20, [sp, #16]
    bc74:	ldp	x21, x22, [sp, #32]
    bc78:	ldp	x29, x30, [sp], #96
    bc7c:	ret
    bc80:	mov	x0, x20
    bc84:	bl	ba44 <ZSTD_freeDDict>
    bc88:	mov	x20, #0x0                   	// #0
    bc8c:	ldp	x23, x24, [sp, #48]
    bc90:	b	bc6c <ZSTD_createDDict_advanced+0xac>
    bc94:	ldp	x23, x24, [sp, #48]
    bc98:	b	bc6c <ZSTD_createDDict_advanced+0xac>

000000000000bc9c <ZSTD_createDDict>:
    bc9c:	stp	x29, x30, [sp, #-80]!
    bca0:	mov	x29, sp
    bca4:	str	xzr, [sp, #56]
    bca8:	str	xzr, [sp, #64]
    bcac:	ldp	x2, x3, [sp, #56]
    bcb0:	stp	x2, x3, [sp, #16]
    bcb4:	str	xzr, [sp, #32]
    bcb8:	add	x4, sp, #0x10
    bcbc:	mov	w3, #0x0                   	// #0
    bcc0:	mov	w2, #0x0                   	// #0
    bcc4:	bl	bbc0 <ZSTD_createDDict_advanced>
    bcc8:	ldp	x29, x30, [sp], #80
    bccc:	ret

000000000000bcd0 <ZSTD_createDDict_byReference>:
    bcd0:	stp	x29, x30, [sp, #-80]!
    bcd4:	mov	x29, sp
    bcd8:	str	xzr, [sp, #56]
    bcdc:	str	xzr, [sp, #64]
    bce0:	ldp	x2, x3, [sp, #56]
    bce4:	stp	x2, x3, [sp, #16]
    bce8:	str	xzr, [sp, #32]
    bcec:	add	x4, sp, #0x10
    bcf0:	mov	w3, #0x0                   	// #0
    bcf4:	mov	w2, #0x1                   	// #1
    bcf8:	bl	bbc0 <ZSTD_createDDict_advanced>
    bcfc:	ldp	x29, x30, [sp], #80
    bd00:	ret

000000000000bd04 <ZSTD_estimateDDictSize>:
    bd04:	add	x0, x0, #0x6, lsl #12
    bd08:	add	x0, x0, #0x860
    bd0c:	cmp	w1, #0x1
    bd10:	mov	x1, #0x6860                	// #26720
    bd14:	csel	x0, x0, x1, ne  // ne = any
    bd18:	ret

000000000000bd1c <ZSTD_sizeof_DDict>:
    bd1c:	cbz	x0, bd38 <ZSTD_sizeof_DDict+0x1c>
    bd20:	ldr	x1, [x0]
    bd24:	cbz	x1, bd40 <ZSTD_sizeof_DDict+0x24>
    bd28:	ldr	x0, [x0, #16]
    bd2c:	add	x0, x0, #0x6, lsl #12
    bd30:	add	x0, x0, #0x860
    bd34:	ret
    bd38:	mov	x0, #0x0                   	// #0
    bd3c:	b	bd34 <ZSTD_sizeof_DDict+0x18>
    bd40:	mov	x0, #0x6860                	// #26720
    bd44:	b	bd34 <ZSTD_sizeof_DDict+0x18>

000000000000bd48 <ZSTD_sizeof_DCtx>:
    bd48:	cbz	x0, bd88 <ZSTD_sizeof_DCtx+0x40>
    bd4c:	stp	x29, x30, [sp, #-32]!
    bd50:	mov	x29, sp
    bd54:	str	x19, [sp, #16]
    bd58:	mov	x19, x0
    bd5c:	ldr	x0, [x0, #29016]
    bd60:	bl	bd1c <ZSTD_sizeof_DDict>
    bd64:	ldr	x1, [x19, #29056]
    bd68:	ldr	x2, [x19, #29088]
    bd6c:	add	x1, x1, x2
    bd70:	add	x0, x0, #0x27, lsl #12
    bd74:	add	x0, x0, #0x1f8
    bd78:	add	x0, x1, x0
    bd7c:	ldr	x19, [sp, #16]
    bd80:	ldp	x29, x30, [sp], #32
    bd84:	ret
    bd88:	mov	x0, #0x0                   	// #0
    bd8c:	ret

000000000000bd90 <ZSTD_getDictID_fromDict>:
    bd90:	mov	x2, x0
    bd94:	mov	w0, #0x0                   	// #0
    bd98:	cmp	x1, #0x7
    bd9c:	b.ls	bdbc <ZSTD_getDictID_fromDict+0x2c>  // b.plast
    bda0:	ldr	w3, [x2]
    bda4:	mov	w0, #0x0                   	// #0
    bda8:	mov	w1, #0xa437                	// #42039
    bdac:	movk	w1, #0xec30, lsl #16
    bdb0:	cmp	w3, w1
    bdb4:	b.ne	bdbc <ZSTD_getDictID_fromDict+0x2c>  // b.any
    bdb8:	ldr	w0, [x2, #4]
    bdbc:	ret

000000000000bdc0 <ZSTD_getDictID_fromDDict>:
    bdc0:	cbz	x0, bde0 <ZSTD_getDictID_fromDDict+0x20>
    bdc4:	stp	x29, x30, [sp, #-16]!
    bdc8:	mov	x29, sp
    bdcc:	ldr	x1, [x0, #16]
    bdd0:	ldr	x0, [x0, #8]
    bdd4:	bl	bd90 <ZSTD_getDictID_fromDict>
    bdd8:	ldp	x29, x30, [sp], #16
    bddc:	ret
    bde0:	mov	w0, #0x0                   	// #0
    bde4:	ret

000000000000bde8 <ZSTD_getDictID_fromFrame>:
    bde8:	stp	x29, x30, [sp, #-64]!
    bdec:	mov	x29, sp
    bdf0:	str	xzr, [sp, #24]
    bdf4:	str	xzr, [sp, #32]
    bdf8:	str	wzr, [sp, #40]
    bdfc:	str	wzr, [sp, #44]
    be00:	str	wzr, [sp, #48]
    be04:	str	wzr, [sp, #52]
    be08:	str	wzr, [sp, #56]
    be0c:	mov	x2, x1
    be10:	mov	x1, x0
    be14:	add	x0, sp, #0x18
    be18:	bl	99e0 <ZSTD_getFrameHeader>
    be1c:	cmn	x0, #0x77
    be20:	ldr	w0, [sp, #52]
    be24:	csel	w0, w0, wzr, cc  // cc = lo, ul, last
    be28:	ldp	x29, x30, [sp], #64
    be2c:	ret

000000000000be30 <ZSTD_decompress_usingDDict>:
    be30:	stp	x29, x30, [sp, #-16]!
    be34:	mov	x29, sp
    be38:	mov	x7, x5
    be3c:	mov	x6, #0x0                   	// #0
    be40:	mov	x5, #0x0                   	// #0
    be44:	bl	b574 <ZSTD_decompressBegin_usingDDict+0x10c>
    be48:	ldp	x29, x30, [sp], #16
    be4c:	ret

000000000000be50 <ZSTD_createDStream>:
    be50:	stp	x29, x30, [sp, #-80]!
    be54:	mov	x29, sp
    be58:	adrp	x0, 0 <FSE_versionNumber>
    be5c:	ldr	x0, [x0]
    be60:	add	x0, x0, #0x450
    be64:	ldp	x2, x3, [x0]
    be68:	ldr	x0, [x0, #16]
    be6c:	stp	x2, x3, [sp, #16]
    be70:	str	x0, [sp, #32]
    be74:	add	x0, sp, #0x10
    be78:	bl	95ac <ZSTD_createDCtx_advanced>
    be7c:	ldp	x29, x30, [sp], #80
    be80:	ret
    be84:	nop
	...

000000000000be90 <ZSTD_initStaticDStream>:
    be90:	stp	x29, x30, [sp, #-16]!
    be94:	mov	x29, sp
    be98:	bl	953c <ZSTD_initStaticDCtx>
    be9c:	ldp	x29, x30, [sp], #16
    bea0:	ret

000000000000bea4 <ZSTD_createDStream_advanced>:
    bea4:	stp	x29, x30, [sp, #-48]!
    bea8:	mov	x29, sp
    beac:	ldp	x2, x3, [x0]
    beb0:	stp	x2, x3, [sp, #16]
    beb4:	ldr	x0, [x0, #16]
    beb8:	str	x0, [sp, #32]
    bebc:	add	x0, sp, #0x10
    bec0:	bl	95ac <ZSTD_createDCtx_advanced>
    bec4:	ldp	x29, x30, [sp], #48
    bec8:	ret

000000000000becc <ZSTD_freeDStream>:
    becc:	stp	x29, x30, [sp, #-16]!
    bed0:	mov	x29, sp
    bed4:	bl	bab8 <ZSTD_freeDCtx>
    bed8:	ldp	x29, x30, [sp], #16
    bedc:	ret

000000000000bee0 <ZSTD_DStreamInSize>:
    bee0:	mov	x0, #0x3                   	// #3
    bee4:	movk	x0, #0x2, lsl #16
    bee8:	ret

000000000000beec <ZSTD_DStreamOutSize>:
    beec:	mov	x0, #0x20000               	// #131072
    bef0:	ret

000000000000bef4 <ZSTD_DCtx_loadDictionary_advanced>:
    bef4:	stp	x29, x30, [sp, #-96]!
    bef8:	mov	x29, sp
    befc:	stp	x19, x20, [sp, #16]
    bf00:	mov	x19, x0
    bf04:	add	x0, x0, #0x4, lsl #12
    bf08:	ldr	w0, [x0, #12656]
    bf0c:	cbnz	w0, bfa4 <ZSTD_DCtx_loadDictionary_advanced+0xb0>
    bf10:	stp	x21, x22, [sp, #32]
    bf14:	str	x23, [sp, #48]
    bf18:	mov	x23, x1
    bf1c:	mov	x22, x2
    bf20:	mov	w21, w3
    bf24:	mov	w20, w4
    bf28:	ldr	x0, [x19, #29016]
    bf2c:	bl	ba44 <ZSTD_freeDDict>
    bf30:	cmp	x23, #0x0
    bf34:	ccmp	x22, #0x7, #0x0, ne  // ne = any
    bf38:	b.hi	bf60 <ZSTD_DCtx_loadDictionary_advanced+0x6c>  // b.pmore
    bf3c:	str	xzr, [x19, #29016]
    bf40:	ldr	x0, [x19, #29016]
    bf44:	str	x0, [x19, #29024]
    bf48:	mov	x0, #0x0                   	// #0
    bf4c:	ldp	x21, x22, [sp, #32]
    bf50:	ldr	x23, [sp, #48]
    bf54:	ldp	x19, x20, [sp, #16]
    bf58:	ldp	x29, x30, [sp], #96
    bf5c:	ret
    bf60:	add	x0, x19, #0x7, lsl #12
    bf64:	ldp	x2, x3, [x0, #288]
    bf68:	stp	x2, x3, [sp, #64]
    bf6c:	ldr	x0, [x19, #28976]
    bf70:	str	x0, [sp, #80]
    bf74:	add	x4, sp, #0x40
    bf78:	mov	w3, w20
    bf7c:	mov	w2, w21
    bf80:	mov	x1, x22
    bf84:	mov	x0, x23
    bf88:	bl	bbc0 <ZSTD_createDDict_advanced>
    bf8c:	str	x0, [x19, #29016]
    bf90:	cbnz	x0, bf40 <ZSTD_DCtx_loadDictionary_advanced+0x4c>
    bf94:	mov	x0, #0xffffffffffffffc0    	// #-64
    bf98:	ldp	x21, x22, [sp, #32]
    bf9c:	ldr	x23, [sp, #48]
    bfa0:	b	bf54 <ZSTD_DCtx_loadDictionary_advanced+0x60>
    bfa4:	mov	x0, #0xffffffffffffffc4    	// #-60
    bfa8:	b	bf54 <ZSTD_DCtx_loadDictionary_advanced+0x60>

000000000000bfac <ZSTD_DCtx_loadDictionary_byReference>:
    bfac:	stp	x29, x30, [sp, #-16]!
    bfb0:	mov	x29, sp
    bfb4:	mov	w4, #0x0                   	// #0
    bfb8:	mov	w3, #0x1                   	// #1
    bfbc:	bl	bef4 <ZSTD_DCtx_loadDictionary_advanced>
    bfc0:	ldp	x29, x30, [sp], #16
    bfc4:	ret

000000000000bfc8 <ZSTD_DCtx_loadDictionary>:
    bfc8:	stp	x29, x30, [sp, #-16]!
    bfcc:	mov	x29, sp
    bfd0:	mov	w4, #0x0                   	// #0
    bfd4:	mov	w3, #0x0                   	// #0
    bfd8:	bl	bef4 <ZSTD_DCtx_loadDictionary_advanced>
    bfdc:	ldp	x29, x30, [sp], #16
    bfe0:	ret

000000000000bfe4 <ZSTD_DCtx_refPrefix_advanced>:
    bfe4:	stp	x29, x30, [sp, #-16]!
    bfe8:	mov	x29, sp
    bfec:	mov	w4, w3
    bff0:	mov	w3, #0x1                   	// #1
    bff4:	bl	bef4 <ZSTD_DCtx_loadDictionary_advanced>
    bff8:	ldp	x29, x30, [sp], #16
    bffc:	ret

000000000000c000 <ZSTD_DCtx_refPrefix>:
    c000:	stp	x29, x30, [sp, #-16]!
    c004:	mov	x29, sp
    c008:	mov	w3, #0x1                   	// #1
    c00c:	bl	bfe4 <ZSTD_DCtx_refPrefix_advanced>
    c010:	ldp	x29, x30, [sp], #16
    c014:	ret

000000000000c018 <ZSTD_initDStream_usingDict>:
    c018:	stp	x29, x30, [sp, #-16]!
    c01c:	mov	x29, sp
    c020:	add	x3, x0, #0x4, lsl #12
    c024:	str	wzr, [x3, #12656]
    c028:	str	wzr, [x3, #12756]
    c02c:	bl	bfc8 <ZSTD_DCtx_loadDictionary>
    c030:	cmn	x0, #0x78
    c034:	mov	x1, #0x5                   	// #5
    c038:	csel	x0, x0, x1, hi  // hi = pmore
    c03c:	ldp	x29, x30, [sp], #16
    c040:	ret

000000000000c044 <ZSTD_initDStream>:
    c044:	stp	x29, x30, [sp, #-16]!
    c048:	mov	x29, sp
    c04c:	mov	x2, #0x0                   	// #0
    c050:	mov	x1, #0x0                   	// #0
    c054:	bl	c018 <ZSTD_initDStream_usingDict>
    c058:	ldp	x29, x30, [sp], #16
    c05c:	ret

000000000000c060 <ZSTD_initDStream_usingDDict>:
    c060:	stp	x29, x30, [sp, #-32]!
    c064:	mov	x29, sp
    c068:	stp	x19, x20, [sp, #16]
    c06c:	mov	x19, x0
    c070:	mov	x20, x1
    c074:	bl	c044 <ZSTD_initDStream>
    c078:	str	x20, [x19, #29024]
    c07c:	ldp	x19, x20, [sp, #16]
    c080:	ldp	x29, x30, [sp], #32
    c084:	ret

000000000000c088 <ZSTD_resetDStream>:
    c088:	add	x1, x0, #0x4, lsl #12
    c08c:	mov	w2, #0x1                   	// #1
    c090:	str	w2, [x1, #12656]
    c094:	str	xzr, [x0, #29104]
    c098:	str	xzr, [x0, #29096]
    c09c:	str	xzr, [x0, #29064]
    c0a0:	str	xzr, [x0, #29112]
    c0a4:	str	wzr, [x1, #12748]
    c0a8:	str	wzr, [x1, #12752]
    c0ac:	mov	x0, #0x5                   	// #5
    c0b0:	ret

000000000000c0b4 <ZSTD_setDStreamParameter>:
    c0b4:	mov	x3, x0
    c0b8:	add	x0, x0, #0x4, lsl #12
    c0bc:	ldr	w0, [x0, #12656]
    c0c0:	cbnz	w0, c0e0 <ZSTD_setDStreamParameter+0x2c>
    c0c4:	mov	x0, #0xffffffffffffffd8    	// #-40
    c0c8:	cbnz	w1, c0dc <ZSTD_setDStreamParameter+0x28>
    c0cc:	cmp	w2, #0x0
    c0d0:	csinv	w2, w2, wzr, ne  // ne = any
    c0d4:	str	x2, [x3, #29072]
    c0d8:	mov	x0, #0x0                   	// #0
    c0dc:	ret
    c0e0:	mov	x0, #0xffffffffffffffc4    	// #-60
    c0e4:	b	c0dc <ZSTD_setDStreamParameter+0x28>

000000000000c0e8 <ZSTD_DCtx_refDDict>:
    c0e8:	add	x2, x0, #0x4, lsl #12
    c0ec:	ldr	w2, [x2, #12656]
    c0f0:	cbnz	w2, c100 <ZSTD_DCtx_refDDict+0x18>
    c0f4:	str	x1, [x0, #29024]
    c0f8:	mov	x0, #0x0                   	// #0
    c0fc:	ret
    c100:	mov	x0, #0xffffffffffffffc4    	// #-60
    c104:	b	c0fc <ZSTD_DCtx_refDDict+0x14>

000000000000c108 <ZSTD_DCtx_setMaxWindowSize>:
    c108:	add	x2, x0, #0x4, lsl #12
    c10c:	ldr	w2, [x2, #12656]
    c110:	cbnz	w2, c120 <ZSTD_DCtx_setMaxWindowSize+0x18>
    c114:	str	x1, [x0, #29072]
    c118:	mov	x0, #0x0                   	// #0
    c11c:	ret
    c120:	mov	x0, #0xffffffffffffffc4    	// #-60
    c124:	b	c11c <ZSTD_DCtx_setMaxWindowSize+0x14>

000000000000c128 <ZSTD_DCtx_setFormat>:
    c128:	add	x2, x0, #0x4, lsl #12
    c12c:	ldr	w2, [x2, #12656]
    c130:	cbnz	w2, c144 <ZSTD_DCtx_setFormat+0x1c>
    c134:	add	x0, x0, #0x4, lsl #12
    c138:	str	w1, [x0, #12560]
    c13c:	mov	x0, #0x0                   	// #0
    c140:	ret
    c144:	mov	x0, #0xffffffffffffffc4    	// #-60
    c148:	b	c140 <ZSTD_DCtx_setFormat+0x18>

000000000000c14c <ZSTD_sizeof_DStream>:
    c14c:	stp	x29, x30, [sp, #-16]!
    c150:	mov	x29, sp
    c154:	bl	bd48 <ZSTD_sizeof_DCtx>
    c158:	ldp	x29, x30, [sp], #16
    c15c:	ret

000000000000c160 <ZSTD_decodingBufferSize_min>:
    c160:	mov	x2, #0x1ffff               	// #131071
    c164:	cmp	x0, x2
    c168:	mov	x2, #0x20000               	// #131072
    c16c:	csel	x2, x0, x2, ls  // ls = plast
    c170:	add	x0, x0, #0x10
    c174:	add	x0, x0, x2
    c178:	cmp	x0, x1
    c17c:	csel	x0, x0, x1, ls  // ls = plast
    c180:	ret

000000000000c184 <ZSTD_estimateDStreamSize>:
    c184:	stp	x29, x30, [sp, #-32]!
    c188:	mov	x29, sp
    c18c:	str	x19, [sp, #16]
    c190:	mov	x19, x0
    c194:	mov	x1, #0xffffffffffffffff    	// #-1
    c198:	bl	c160 <ZSTD_decodingBufferSize_min>
    c19c:	cmp	x19, #0x20, lsl #12
    c1a0:	mov	x1, #0x20000               	// #131072
    c1a4:	csel	x19, x19, x1, ls  // ls = plast
    c1a8:	add	x19, x19, #0x27, lsl #12
    c1ac:	add	x19, x19, #0x1f8
    c1b0:	add	x0, x19, x0
    c1b4:	ldr	x19, [sp, #16]
    c1b8:	ldp	x29, x30, [sp], #32
    c1bc:	ret

000000000000c1c0 <ZSTD_estimateDStreamSize_fromFrame>:
    c1c0:	stp	x29, x30, [sp, #-64]!
    c1c4:	mov	x29, sp
    c1c8:	mov	x2, x1
    c1cc:	mov	x1, x0
    c1d0:	add	x0, sp, #0x18
    c1d4:	bl	99e0 <ZSTD_getFrameHeader>
    c1d8:	cmn	x0, #0x78
    c1dc:	b.hi	c200 <ZSTD_estimateDStreamSize_fromFrame+0x40>  // b.pmore
    c1e0:	cbnz	x0, c208 <ZSTD_estimateDStreamSize_fromFrame+0x48>
    c1e4:	ldr	x1, [sp, #32]
    c1e8:	mov	x0, #0xfffffffffffffff0    	// #-16
    c1ec:	mov	x2, #0x80000000            	// #2147483648
    c1f0:	cmp	x1, x2
    c1f4:	b.hi	c200 <ZSTD_estimateDStreamSize_fromFrame+0x40>  // b.pmore
    c1f8:	mov	x0, x1
    c1fc:	bl	c184 <ZSTD_estimateDStreamSize>
    c200:	ldp	x29, x30, [sp], #64
    c204:	ret
    c208:	mov	x0, #0xffffffffffffffb8    	// #-72
    c20c:	b	c200 <ZSTD_estimateDStreamSize_fromFrame+0x40>

000000000000c210 <ZSTD_decompressStream>:
    c210:	stp	x29, x30, [sp, #-192]!
    c214:	mov	x29, sp
    c218:	stp	x19, x20, [sp, #16]
    c21c:	stp	x25, x26, [sp, #64]
    c220:	stp	x27, x28, [sp, #80]
    c224:	ldr	x27, [x2, #16]
    c228:	ldr	x26, [x2, #8]
    c22c:	mov	x20, #0xffffffffffffffb8    	// #-72
    c230:	cmp	x27, x26
    c234:	b.hi	c964 <ZSTD_decompressStream+0x754>  // b.pmore
    c238:	stp	x21, x22, [sp, #32]
    c23c:	stp	x23, x24, [sp, #48]
    c240:	mov	x19, x0
    c244:	mov	x23, x1
    c248:	mov	x22, x2
    c24c:	ldr	x1, [x1, #16]
    c250:	ldr	x0, [x23, #8]
    c254:	mov	x20, #0xffffffffffffffba    	// #-70
    c258:	cmp	x1, x0
    c25c:	b.hi	c95c <ZSTD_decompressStream+0x74c>  // b.pmore
    c260:	ldr	x24, [x2]
    c264:	add	x21, x24, x27
    c268:	str	x21, [sp, #136]
    c26c:	add	x24, x24, x26
    c270:	ldr	x2, [x23]
    c274:	add	x25, x2, x1
    c278:	str	x25, [sp, #144]
    c27c:	add	x0, x2, x0
    c280:	str	x0, [sp, #112]
    c284:	add	x0, x19, #0x27, lsl #12
    c288:	add	x0, x0, #0x1e0
    c28c:	str	x0, [sp, #96]
    c290:	add	x0, x19, #0x7, lsl #12
    c294:	add	x0, x0, #0x70
    c298:	str	x0, [sp, #104]
    c29c:	add	x0, x19, #0x4, lsl #12
    c2a0:	ldr	w0, [x0, #12656]
    c2a4:	cmp	w0, #0x2
    c2a8:	b.eq	c52c <ZSTD_decompressStream+0x31c>  // b.none
    c2ac:	b.ls	c34c <ZSTD_decompressStream+0x13c>  // b.plast
    c2b0:	cmp	w0, #0x3
    c2b4:	b.eq	c730 <ZSTD_decompressStream+0x520>  // b.none
    c2b8:	cmp	w0, #0x4
    c2bc:	b.ne	c3b0 <ZSTD_decompressStream+0x1a0>  // b.any
    c2c0:	ldr	x0, [x19, #29096]
    c2c4:	ldr	x20, [x19, #29104]
    c2c8:	sub	x20, x20, x0
    c2cc:	ldr	x1, [sp, #112]
    c2d0:	sub	x28, x1, x25
    c2d4:	cmp	x28, x20
    c2d8:	csel	x1, x28, x20, ls  // ls = plast
    c2dc:	mov	x2, x1
    c2e0:	ldr	x1, [x19, #29080]
    c2e4:	str	x2, [sp, #120]
    c2e8:	add	x1, x1, x0
    c2ec:	mov	x0, x25
    c2f0:	bl	0 <grub_memmove>
    c2f4:	ldr	x1, [sp, #120]
    c2f8:	add	x25, x25, x1
    c2fc:	ldr	x0, [x19, #29096]
    c300:	add	x0, x1, x0
    c304:	str	x0, [x19, #29096]
    c308:	cmp	x28, x20
    c30c:	b.cc	c53c <ZSTD_decompressStream+0x32c>  // b.lo, b.ul, b.last
    c310:	add	x1, x19, #0x4, lsl #12
    c314:	mov	w2, #0x2                   	// #2
    c318:	str	w2, [x1, #12656]
    c31c:	ldr	x1, [x19, #29088]
    c320:	ldr	x2, [x19, #28784]
    c324:	cmp	x1, x2
    c328:	b.cs	c29c <ZSTD_decompressStream+0x8c>  // b.hs, b.nlast
    c32c:	add	x2, x19, #0x4, lsl #12
    c330:	ldr	w2, [x2, #12416]
    c334:	add	x0, x2, x0
    c338:	cmp	x1, x0
    c33c:	b.cs	c29c <ZSTD_decompressStream+0x8c>  // b.hs, b.nlast
    c340:	str	xzr, [x19, #29104]
    c344:	str	xzr, [x19, #29096]
    c348:	b	c29c <ZSTD_decompressStream+0x8c>
    c34c:	cbz	w0, c3c0 <ZSTD_decompressStream+0x1b0>
    c350:	ldr	x1, [sp, #96]
    c354:	str	x1, [sp, #120]
    c358:	add	x0, x19, #0x4, lsl #12
    c35c:	ldr	w3, [x0, #12560]
    c360:	ldr	x2, [x19, #29112]
    c364:	ldr	x0, [sp, #104]
    c368:	bl	9720 <ZSTD_getFrameHeader_advanced>
    c36c:	mov	x20, x0
    c370:	cmn	x0, #0x78
    c374:	b.hi	c97c <ZSTD_decompressStream+0x76c>  // b.pmore
    c378:	cbz	x0, c428 <ZSTD_decompressStream+0x218>
    c37c:	ldr	x0, [x19, #29112]
    c380:	sub	x28, x20, x0
    c384:	sub	x1, x24, x21
    c388:	cmp	x28, x1
    c38c:	b.hi	c3cc <ZSTD_decompressStream+0x1bc>  // b.pmore
    c390:	mov	x2, x28
    c394:	mov	x1, x21
    c398:	ldr	x3, [sp, #96]
    c39c:	add	x0, x3, x0
    c3a0:	bl	0 <grub_memmove>
    c3a4:	str	x20, [x19, #29112]
    c3a8:	add	x21, x21, x28
    c3ac:	b	c29c <ZSTD_decompressStream+0x8c>
    c3b0:	mov	x20, #0xffffffffffffffff    	// #-1
    c3b4:	ldp	x21, x22, [sp, #32]
    c3b8:	ldp	x23, x24, [sp, #48]
    c3bc:	b	c964 <ZSTD_decompressStream+0x754>
    c3c0:	mov	x0, x19
    c3c4:	bl	c088 <ZSTD_resetDStream>
    c3c8:	b	c350 <ZSTD_decompressStream+0x140>
    c3cc:	cbnz	x1, c400 <ZSTD_decompressStream+0x1f0>
    c3d0:	ldr	x0, [x22, #8]
    c3d4:	str	x0, [x22, #16]
    c3d8:	ldr	x0, [x19, #29112]
    c3dc:	mov	x1, #0x3                   	// #3
    c3e0:	sub	x1, x1, x0
    c3e4:	cmp	x20, #0x6
    c3e8:	mov	x0, #0x6                   	// #6
    c3ec:	csel	x20, x20, x0, cs  // cs = hs, nlast
    c3f0:	add	x20, x1, x20
    c3f4:	ldp	x21, x22, [sp, #32]
    c3f8:	ldp	x23, x24, [sp, #48]
    c3fc:	b	c964 <ZSTD_decompressStream+0x754>
    c400:	mov	x23, x1
    c404:	mov	x2, x1
    c408:	mov	x1, x21
    c40c:	ldr	x3, [sp, #120]
    c410:	add	x0, x3, x0
    c414:	bl	0 <grub_memmove>
    c418:	ldr	x0, [x19, #29112]
    c41c:	add	x0, x0, x23
    c420:	str	x0, [x19, #29112]
    c424:	b	c3d0 <ZSTD_decompressStream+0x1c0>
    c428:	ldr	x0, [x19, #28784]
    c42c:	cbz	x0, c448 <ZSTD_decompressStream+0x238>
    c430:	ldr	x1, [x19, #28792]
    c434:	cbz	x1, c448 <ZSTD_decompressStream+0x238>
    c438:	ldr	x1, [sp, #112]
    c43c:	sub	x20, x1, x25
    c440:	cmp	x0, x20
    c444:	b.ls	c5c0 <ZSTD_decompressStream+0x3b0>  // b.plast
    c448:	ldr	x1, [x19, #29024]
    c44c:	mov	x0, x19
    c450:	bl	b468 <ZSTD_decompressBegin_usingDDict>
    c454:	mov	x20, x0
    c458:	cmn	x0, #0x78
    c45c:	b.hi	c994 <ZSTD_decompressStream+0x784>  // b.pmore
    c460:	add	x0, x19, #0x24, lsl #12
    c464:	ldr	w0, [x0, #12768]
    c468:	and	w0, w0, #0xfffffff0
    c46c:	mov	w1, #0x2a50                	// #10832
    c470:	movk	w1, #0x184d, lsl #16
    c474:	cmp	w0, w1
    c478:	b.ne	c620 <ZSTD_decompressStream+0x410>  // b.any
    c47c:	add	x0, x19, #0x24, lsl #12
    c480:	ldr	w0, [x0, #12772]
    c484:	str	x0, [x19, #28776]
    c488:	add	x0, x19, #0x4, lsl #12
    c48c:	mov	w1, #0x7                   	// #7
    c490:	str	w1, [x0, #12452]
    c494:	ldr	x0, [x19, #28792]
    c498:	cmp	x0, #0x400
    c49c:	mov	x1, #0x400                 	// #1024
    c4a0:	csel	x0, x0, x1, cs  // cs = hs, nlast
    c4a4:	str	x0, [x19, #28792]
    c4a8:	ldr	x1, [x19, #29072]
    c4ac:	cmp	x0, x1
    c4b0:	b.hi	c8d0 <ZSTD_decompressStream+0x6c0>  // b.pmore
    c4b4:	add	x1, x19, #0x4, lsl #12
    c4b8:	ldr	w20, [x1, #12416]
    c4bc:	cmp	w20, #0x4
    c4c0:	mov	w1, #0x4                   	// #4
    c4c4:	csel	w20, w20, w1, cs  // cs = hs, nlast
    c4c8:	ldr	x1, [x19, #28784]
    c4cc:	bl	c160 <ZSTD_decodingBufferSize_min>
    c4d0:	mov	x28, x0
    c4d4:	ldr	x0, [x19, #29056]
    c4d8:	cmp	x0, x20
    c4dc:	b.cc	c4ec <ZSTD_decompressStream+0x2dc>  // b.lo, b.ul, b.last
    c4e0:	ldr	x0, [x19, #29088]
    c4e4:	cmp	x0, x28
    c4e8:	b.cs	c520 <ZSTD_decompressStream+0x310>  // b.hs, b.nlast
    c4ec:	add	x1, x20, x28
    c4f0:	str	x1, [sp, #120]
    c4f4:	ldr	x0, [x19, #29000]
    c4f8:	cbz	x0, c654 <ZSTD_decompressStream+0x444>
    c4fc:	sub	x0, x0, #0x27, lsl #12
    c500:	sub	x0, x0, #0x1f8
    c504:	cmp	x0, x1
    c508:	b.cc	c8e0 <ZSTD_decompressStream+0x6d0>  // b.lo, b.ul, b.last
    c50c:	str	x20, [x19, #29056]
    c510:	ldr	x0, [x19, #29048]
    c514:	add	x20, x0, x20
    c518:	str	x20, [x19, #29080]
    c51c:	str	x28, [x19, #29088]
    c520:	add	x0, x19, #0x4, lsl #12
    c524:	mov	w1, #0x2                   	// #2
    c528:	str	w1, [x0, #12656]
    c52c:	ldr	x28, [x19, #28776]
    c530:	cbnz	x28, c6c4 <ZSTD_decompressStream+0x4b4>
    c534:	add	x0, x19, #0x4, lsl #12
    c538:	str	wzr, [x0, #12656]
    c53c:	ldr	x0, [x22]
    c540:	sub	x0, x21, x0
    c544:	str	x0, [x22, #16]
    c548:	ldr	x0, [x23]
    c54c:	sub	x0, x25, x0
    c550:	str	x0, [x23, #16]
    c554:	ldr	x0, [sp, #136]
    c558:	cmp	x21, x0
    c55c:	ldr	x0, [sp, #144]
    c560:	ccmp	x25, x0, #0x0, eq  // eq = none
    c564:	b.eq	c820 <ZSTD_decompressStream+0x610>  // b.none
    c568:	add	x0, x19, #0x4, lsl #12
    c56c:	str	wzr, [x0, #12756]
    c570:	ldr	x20, [x19, #28776]
    c574:	cbnz	x20, c8a4 <ZSTD_decompressStream+0x694>
    c578:	ldr	x1, [x19, #29104]
    c57c:	ldr	x0, [x19, #29096]
    c580:	cmp	x1, x0
    c584:	b.ne	c870 <ZSTD_decompressStream+0x660>  // b.any
    c588:	add	x0, x19, #0x4, lsl #12
    c58c:	ldr	w0, [x0, #12752]
    c590:	cbz	w0, c9c4 <ZSTD_decompressStream+0x7b4>
    c594:	ldr	x0, [x22, #16]
    c598:	ldr	x1, [x22, #8]
    c59c:	cmp	x0, x1
    c5a0:	b.cc	c85c <ZSTD_decompressStream+0x64c>  // b.lo, b.ul, b.last
    c5a4:	add	x19, x19, #0x4, lsl #12
    c5a8:	mov	w0, #0x2                   	// #2
    c5ac:	str	w0, [x19, #12656]
    c5b0:	mov	x20, #0x1                   	// #1
    c5b4:	ldp	x21, x22, [sp, #32]
    c5b8:	ldp	x23, x24, [sp, #48]
    c5bc:	b	c964 <ZSTD_decompressStream+0x754>
    c5c0:	sub	x28, x26, x27
    c5c4:	mov	x1, x28
    c5c8:	ldr	x0, [sp, #136]
    c5cc:	bl	aba0 <ZSTD_findFrameCompressedSize>
    c5d0:	cmp	x28, x0
    c5d4:	b.cc	c448 <ZSTD_decompressStream+0x238>  // b.lo, b.ul, b.last
    c5d8:	ldr	x5, [x19, #29024]
    c5dc:	mov	x26, x0
    c5e0:	mov	x4, x0
    c5e4:	ldr	x21, [sp, #136]
    c5e8:	mov	x3, x21
    c5ec:	mov	x2, x20
    c5f0:	mov	x1, x25
    c5f4:	mov	x0, x19
    c5f8:	bl	be30 <ZSTD_decompress_usingDDict>
    c5fc:	mov	x20, x0
    c600:	cmn	x0, #0x78
    c604:	b.hi	c988 <ZSTD_decompressStream+0x778>  // b.pmore
    c608:	add	x21, x21, x26
    c60c:	add	x25, x25, x0
    c610:	str	xzr, [x19, #28776]
    c614:	add	x0, x19, #0x4, lsl #12
    c618:	str	wzr, [x0, #12656]
    c61c:	b	c53c <ZSTD_decompressStream+0x32c>
    c620:	ldr	x2, [x19, #29112]
    c624:	ldr	x1, [sp, #96]
    c628:	mov	x0, x19
    c62c:	bl	9950 <ZSTD_getFrameHeader_advanced+0x230>
    c630:	mov	x20, x0
    c634:	cmn	x0, #0x78
    c638:	b.hi	c9a0 <ZSTD_decompressStream+0x790>  // b.pmore
    c63c:	mov	x0, #0x3                   	// #3
    c640:	str	x0, [x19, #28776]
    c644:	add	x0, x19, #0x4, lsl #12
    c648:	mov	w1, #0x2                   	// #2
    c64c:	str	w1, [x0, #12452]
    c650:	b	c494 <ZSTD_decompressStream+0x284>
    c654:	add	x0, x19, #0x7, lsl #12
    c658:	add	x2, x0, #0x120
    c65c:	str	x0, [sp, #128]
    c660:	ldp	x0, x1, [x0, #288]
    c664:	stp	x0, x1, [sp, #160]
    c668:	str	x2, [sp, #152]
    c66c:	ldr	x0, [x2, #16]
    c670:	str	x0, [sp, #176]
    c674:	add	x1, sp, #0xa0
    c678:	ldr	x0, [x19, #29048]
    c67c:	bl	7a94 <ZSTD_free>
    c680:	str	xzr, [x19, #29056]
    c684:	str	xzr, [x19, #29088]
    c688:	ldr	x0, [sp, #128]
    c68c:	ldp	x0, x1, [x0, #288]
    c690:	stp	x0, x1, [sp, #160]
    c694:	ldr	x2, [sp, #152]
    c698:	ldr	x0, [x2, #16]
    c69c:	str	x0, [sp, #176]
    c6a0:	add	x1, sp, #0xa0
    c6a4:	ldr	x0, [sp, #120]
    c6a8:	bl	7a10 <ZSTD_malloc>
    c6ac:	str	x0, [x19, #29048]
    c6b0:	cbnz	x0, c50c <ZSTD_decompressStream+0x2fc>
    c6b4:	mov	x20, #0xffffffffffffffc0    	// #-64
    c6b8:	ldp	x21, x22, [sp, #32]
    c6bc:	ldp	x23, x24, [sp, #48]
    c6c0:	b	c964 <ZSTD_decompressStream+0x754>
    c6c4:	sub	x0, x24, x21
    c6c8:	cmp	x0, x28
    c6cc:	b.cc	c71c <ZSTD_decompressStream+0x50c>  // b.lo, b.ul, b.last
    c6d0:	ldr	x0, [x19, #29096]
    c6d4:	ldr	x1, [x19, #29080]
    c6d8:	add	x1, x1, x0
    c6dc:	add	x2, x19, #0x4, lsl #12
    c6e0:	ldr	w2, [x2, #12452]
    c6e4:	cmp	w2, #0x7
    c6e8:	b.eq	c910 <ZSTD_decompressStream+0x700>  // b.none
    c6ec:	ldr	x2, [x19, #29088]
    c6f0:	mov	x4, x28
    c6f4:	mov	x3, x21
    c6f8:	sub	x2, x2, x0
    c6fc:	mov	x0, x19
    c700:	bl	add4 <ZSTD_decompressContinue>
    c704:	mov	x20, x0
    c708:	cmn	x0, #0x78
    c70c:	b.hi	c9ac <ZSTD_decompressStream+0x79c>  // b.pmore
    c710:	add	x21, x21, x28
    c714:	cbz	x0, c29c <ZSTD_decompressStream+0x8c>
    c718:	b	c934 <ZSTD_decompressStream+0x724>
    c71c:	cmp	x24, x21
    c720:	b.eq	c53c <ZSTD_decompressStream+0x32c>  // b.none
    c724:	add	x0, x19, #0x4, lsl #12
    c728:	mov	w1, #0x3                   	// #3
    c72c:	str	w1, [x0, #12656]
    c730:	ldr	x0, [x19, #28776]
    c734:	mov	x1, x0
    c738:	str	x0, [sp, #120]
    c73c:	ldr	x0, [x19, #29064]
    c740:	sub	x28, x1, x0
    c744:	add	x1, x19, #0x4, lsl #12
    c748:	ldr	w1, [x1, #12452]
    c74c:	str	w1, [sp, #128]
    c750:	cmp	w1, #0x7
    c754:	b.ne	c7d0 <ZSTD_decompressStream+0x5c0>  // b.any
    c758:	sub	x20, x24, x21
    c75c:	cmp	x20, x28
    c760:	csel	x20, x20, x28, ls  // ls = plast
    c764:	add	x21, x21, x20
    c768:	ldr	x0, [x19, #29064]
    c76c:	add	x0, x0, x20
    c770:	str	x0, [x19, #29064]
    c774:	cmp	x20, x28
    c778:	b.cc	c53c <ZSTD_decompressStream+0x32c>  // b.lo, b.ul, b.last
    c77c:	ldr	x0, [x19, #29096]
    c780:	ldr	x2, [x19, #29088]
    c784:	ldr	x1, [x19, #29080]
    c788:	ldr	x4, [sp, #120]
    c78c:	ldr	x3, [x19, #29048]
    c790:	sub	x2, x2, x0
    c794:	add	x1, x1, x0
    c798:	mov	x0, x19
    c79c:	bl	add4 <ZSTD_decompressContinue>
    c7a0:	mov	x20, x0
    c7a4:	cmn	x0, #0x78
    c7a8:	b.hi	c9b8 <ZSTD_decompressStream+0x7a8>  // b.pmore
    c7ac:	str	xzr, [x19, #29064]
    c7b0:	cmp	x0, #0x0
    c7b4:	ldr	w0, [sp, #128]
    c7b8:	ccmp	w0, #0x7, #0x4, eq  // eq = none
    c7bc:	b.eq	c804 <ZSTD_decompressStream+0x5f4>  // b.none
    c7c0:	add	x0, x19, #0x4, lsl #12
    c7c4:	mov	w1, #0x2                   	// #2
    c7c8:	str	w1, [x0, #12656]
    c7cc:	b	c29c <ZSTD_decompressStream+0x8c>
    c7d0:	ldr	x1, [x19, #29056]
    c7d4:	sub	x1, x1, x0
    c7d8:	cmp	x1, x28
    c7dc:	b.cc	c8f0 <ZSTD_decompressStream+0x6e0>  // b.lo, b.ul, b.last
    c7e0:	sub	x20, x24, x21
    c7e4:	cmp	x20, x28
    c7e8:	csel	x20, x20, x28, ls  // ls = plast
    c7ec:	ldr	x3, [x19, #29048]
    c7f0:	mov	x2, x20
    c7f4:	mov	x1, x21
    c7f8:	add	x0, x3, x0
    c7fc:	bl	0 <grub_memmove>
    c800:	b	c764 <ZSTD_decompressStream+0x554>
    c804:	ldr	x0, [x19, #29096]
    c808:	add	x0, x0, x20
    c80c:	str	x0, [x19, #29104]
    c810:	add	x0, x19, #0x4, lsl #12
    c814:	mov	w1, #0x4                   	// #4
    c818:	str	w1, [x0, #12656]
    c81c:	b	c2c0 <ZSTD_decompressStream+0xb0>
    c820:	add	x1, x19, #0x4, lsl #12
    c824:	ldr	w0, [x1, #12756]
    c828:	add	w0, w0, #0x1
    c82c:	str	w0, [x1, #12756]
    c830:	cmp	w0, #0xf
    c834:	b.le	c570 <ZSTD_decompressStream+0x360>
    c838:	ldr	x0, [sp, #112]
    c83c:	cmp	x25, x0
    c840:	b.eq	c900 <ZSTD_decompressStream+0x6f0>  // b.none
    c844:	cmp	x21, x24
    c848:	b.ne	c570 <ZSTD_decompressStream+0x360>  // b.any
    c84c:	mov	x20, #0xffffffffffffffb8    	// #-72
    c850:	ldp	x21, x22, [sp, #32]
    c854:	ldp	x23, x24, [sp, #48]
    c858:	b	c964 <ZSTD_decompressStream+0x754>
    c85c:	add	x0, x0, #0x1
    c860:	str	x0, [x22, #16]
    c864:	ldp	x21, x22, [sp, #32]
    c868:	ldp	x23, x24, [sp, #48]
    c86c:	b	c964 <ZSTD_decompressStream+0x754>
    c870:	add	x0, x19, #0x4, lsl #12
    c874:	ldr	w0, [x0, #12752]
    c878:	mov	x20, #0x1                   	// #1
    c87c:	cbnz	w0, c9d0 <ZSTD_decompressStream+0x7c0>
    c880:	ldr	x0, [x22, #16]
    c884:	sub	x0, x0, #0x1
    c888:	str	x0, [x22, #16]
    c88c:	add	x19, x19, #0x4, lsl #12
    c890:	mov	w0, #0x1                   	// #1
    c894:	str	w0, [x19, #12752]
    c898:	ldp	x21, x22, [sp, #32]
    c89c:	ldp	x23, x24, [sp, #48]
    c8a0:	b	c964 <ZSTD_decompressStream+0x754>
    c8a4:	mov	x0, x19
    c8a8:	bl	ad7c <ZSTD_nextInputType>
    c8ac:	cmp	w0, #0x2
    c8b0:	mov	x0, #0x3                   	// #3
    c8b4:	csel	x0, x0, xzr, eq  // eq = none
    c8b8:	ldr	x1, [x19, #29064]
    c8bc:	sub	x20, x20, x1
    c8c0:	add	x20, x20, x0
    c8c4:	ldp	x21, x22, [sp, #32]
    c8c8:	ldp	x23, x24, [sp, #48]
    c8cc:	b	c964 <ZSTD_decompressStream+0x754>
    c8d0:	mov	x20, #0xfffffffffffffff0    	// #-16
    c8d4:	ldp	x21, x22, [sp, #32]
    c8d8:	ldp	x23, x24, [sp, #48]
    c8dc:	b	c964 <ZSTD_decompressStream+0x754>
    c8e0:	mov	x20, #0xffffffffffffffc0    	// #-64
    c8e4:	ldp	x21, x22, [sp, #32]
    c8e8:	ldp	x23, x24, [sp, #48]
    c8ec:	b	c964 <ZSTD_decompressStream+0x754>
    c8f0:	mov	x20, #0xffffffffffffffec    	// #-20
    c8f4:	ldp	x21, x22, [sp, #32]
    c8f8:	ldp	x23, x24, [sp, #48]
    c8fc:	b	c964 <ZSTD_decompressStream+0x754>
    c900:	mov	x20, #0xffffffffffffffba    	// #-70
    c904:	ldp	x21, x22, [sp, #32]
    c908:	ldp	x23, x24, [sp, #48]
    c90c:	b	c964 <ZSTD_decompressStream+0x754>
    c910:	mov	x4, x28
    c914:	mov	x3, x21
    c918:	mov	x2, #0x0                   	// #0
    c91c:	mov	x0, x19
    c920:	bl	add4 <ZSTD_decompressContinue>
    c924:	mov	x20, x0
    c928:	cmn	x0, #0x78
    c92c:	b.hi	c950 <ZSTD_decompressStream+0x740>  // b.pmore
    c930:	add	x21, x21, x28
    c934:	ldr	x0, [x19, #29096]
    c938:	add	x0, x0, x20
    c93c:	str	x0, [x19, #29104]
    c940:	add	x0, x19, #0x4, lsl #12
    c944:	mov	w1, #0x4                   	// #4
    c948:	str	w1, [x0, #12656]
    c94c:	b	c29c <ZSTD_decompressStream+0x8c>
    c950:	ldp	x21, x22, [sp, #32]
    c954:	ldp	x23, x24, [sp, #48]
    c958:	b	c964 <ZSTD_decompressStream+0x754>
    c95c:	ldp	x21, x22, [sp, #32]
    c960:	ldp	x23, x24, [sp, #48]
    c964:	mov	x0, x20
    c968:	ldp	x19, x20, [sp, #16]
    c96c:	ldp	x25, x26, [sp, #64]
    c970:	ldp	x27, x28, [sp, #80]
    c974:	ldp	x29, x30, [sp], #192
    c978:	ret
    c97c:	ldp	x21, x22, [sp, #32]
    c980:	ldp	x23, x24, [sp, #48]
    c984:	b	c964 <ZSTD_decompressStream+0x754>
    c988:	ldp	x21, x22, [sp, #32]
    c98c:	ldp	x23, x24, [sp, #48]
    c990:	b	c964 <ZSTD_decompressStream+0x754>
    c994:	ldp	x21, x22, [sp, #32]
    c998:	ldp	x23, x24, [sp, #48]
    c99c:	b	c964 <ZSTD_decompressStream+0x754>
    c9a0:	ldp	x21, x22, [sp, #32]
    c9a4:	ldp	x23, x24, [sp, #48]
    c9a8:	b	c964 <ZSTD_decompressStream+0x754>
    c9ac:	ldp	x21, x22, [sp, #32]
    c9b0:	ldp	x23, x24, [sp, #48]
    c9b4:	b	c964 <ZSTD_decompressStream+0x754>
    c9b8:	ldp	x21, x22, [sp, #32]
    c9bc:	ldp	x23, x24, [sp, #48]
    c9c0:	b	c964 <ZSTD_decompressStream+0x754>
    c9c4:	ldp	x21, x22, [sp, #32]
    c9c8:	ldp	x23, x24, [sp, #48]
    c9cc:	b	c964 <ZSTD_decompressStream+0x754>
    c9d0:	ldp	x21, x22, [sp, #32]
    c9d4:	ldp	x23, x24, [sp, #48]
    c9d8:	b	c964 <ZSTD_decompressStream+0x754>

000000000000c9dc <ZSTD_decompress_generic>:
    c9dc:	stp	x29, x30, [sp, #-16]!
    c9e0:	mov	x29, sp
    c9e4:	bl	c210 <ZSTD_decompressStream>
    c9e8:	ldp	x29, x30, [sp], #16
    c9ec:	ret

000000000000c9f0 <ZSTD_decompress_generic_simpleArgs>:
    c9f0:	stp	x29, x30, [sp, #-80]!
    c9f4:	mov	x29, sp
    c9f8:	stp	x19, x20, [sp, #16]
    c9fc:	mov	x20, x3
    ca00:	mov	x19, x6
    ca04:	str	x1, [sp, #56]
    ca08:	str	x2, [sp, #64]
    ca0c:	ldr	x1, [x3]
    ca10:	str	x1, [sp, #72]
    ca14:	str	x4, [sp, #32]
    ca18:	str	x5, [sp, #40]
    ca1c:	ldr	x1, [x6]
    ca20:	str	x1, [sp, #48]
    ca24:	add	x2, sp, #0x20
    ca28:	add	x1, sp, #0x38
    ca2c:	bl	c210 <ZSTD_decompressStream>
    ca30:	ldr	x1, [sp, #72]
    ca34:	str	x1, [x20]
    ca38:	ldr	x1, [sp, #48]
    ca3c:	str	x1, [x19]
    ca40:	ldp	x19, x20, [sp, #16]
    ca44:	ldp	x29, x30, [sp], #80
    ca48:	ret

000000000000ca4c <ZSTD_DCtx_reset>:
    ca4c:	stp	x29, x30, [sp, #-32]!
    ca50:	mov	x29, sp
    ca54:	str	x19, [sp, #16]
    ca58:	mov	x19, x0
    ca5c:	bl	c044 <ZSTD_initDStream>
    ca60:	add	x0, x19, #0x4, lsl #12
    ca64:	str	wzr, [x0, #12560]
    ca68:	mov	x0, #0x1                   	// #1
    ca6c:	movk	x0, #0x800, lsl #16
    ca70:	str	x0, [x19, #29072]
    ca74:	ldr	x19, [sp, #16]
    ca78:	ldp	x29, x30, [sp], #32
    ca7c:	ret
