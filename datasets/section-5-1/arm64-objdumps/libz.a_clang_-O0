In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_clang_-O0:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	sub	sp, sp, #0x30
   4:	str	x0, [sp, #32]
   8:	str	x1, [sp, #24]
   c:	str	x2, [sp, #16]
  10:	ldr	x8, [sp, #32]
  14:	lsr	x8, x8, #16
  18:	and	x8, x8, #0xffff
  1c:	str	x8, [sp, #8]
  20:	ldr	x8, [sp, #32]
  24:	and	x8, x8, #0xffff
  28:	str	x8, [sp, #32]
  2c:	ldr	x8, [sp, #16]
  30:	cmp	x8, #0x1
  34:	b.ne	b4 <adler32_z+0xb4>  // b.any
  38:	ldr	x8, [sp, #24]
  3c:	ldrb	w9, [x8]
  40:	mov	w8, w9
  44:	ldr	x10, [sp, #32]
  48:	add	x8, x10, x8
  4c:	str	x8, [sp, #32]
  50:	ldr	x8, [sp, #32]
  54:	mov	x10, #0xfff1                	// #65521
  58:	cmp	x8, x10
  5c:	b.cc	70 <adler32_z+0x70>  // b.lo, b.ul, b.last
  60:	ldr	x8, [sp, #32]
  64:	mov	x9, #0xfff1                	// #65521
  68:	subs	x8, x8, x9
  6c:	str	x8, [sp, #32]
  70:	ldr	x8, [sp, #32]
  74:	ldr	x9, [sp, #8]
  78:	add	x8, x9, x8
  7c:	str	x8, [sp, #8]
  80:	ldr	x8, [sp, #8]
  84:	mov	x9, #0xfff1                	// #65521
  88:	cmp	x8, x9
  8c:	b.cc	a0 <adler32_z+0xa0>  // b.lo, b.ul, b.last
  90:	ldr	x8, [sp, #8]
  94:	mov	x9, #0xfff1                	// #65521
  98:	subs	x8, x8, x9
  9c:	str	x8, [sp, #8]
  a0:	ldr	x8, [sp, #32]
  a4:	ldr	x9, [sp, #8]
  a8:	orr	x8, x8, x9, lsl #16
  ac:	str	x8, [sp, #40]
  b0:	b	788 <adler32_z+0x788>
  b4:	ldr	x8, [sp, #24]
  b8:	cbnz	x8, c8 <adler32_z+0xc8>
  bc:	mov	x8, #0x1                   	// #1
  c0:	str	x8, [sp, #40]
  c4:	b	788 <adler32_z+0x788>
  c8:	ldr	x8, [sp, #16]
  cc:	cmp	x8, #0x10
  d0:	b.cs	164 <adler32_z+0x164>  // b.hs, b.nlast
  d4:	ldr	x8, [sp, #16]
  d8:	subs	x9, x8, #0x1
  dc:	str	x9, [sp, #16]
  e0:	cbz	x8, 118 <adler32_z+0x118>
  e4:	ldr	x8, [sp, #24]
  e8:	add	x9, x8, #0x1
  ec:	str	x9, [sp, #24]
  f0:	ldrb	w10, [x8]
  f4:	mov	w8, w10
  f8:	ldr	x9, [sp, #32]
  fc:	add	x8, x9, x8
 100:	str	x8, [sp, #32]
 104:	ldr	x8, [sp, #32]
 108:	ldr	x9, [sp, #8]
 10c:	add	x8, x9, x8
 110:	str	x8, [sp, #8]
 114:	b	d4 <adler32_z+0xd4>
 118:	ldr	x8, [sp, #32]
 11c:	mov	x9, #0xfff1                	// #65521
 120:	cmp	x8, x9
 124:	b.cc	138 <adler32_z+0x138>  // b.lo, b.ul, b.last
 128:	ldr	x8, [sp, #32]
 12c:	mov	x9, #0xfff1                	// #65521
 130:	subs	x8, x8, x9
 134:	str	x8, [sp, #32]
 138:	ldr	x8, [sp, #8]
 13c:	mov	x9, #0xfff1                	// #65521
 140:	udiv	x10, x8, x9
 144:	mul	x9, x10, x9
 148:	subs	x8, x8, x9
 14c:	str	x8, [sp, #8]
 150:	ldr	x8, [sp, #32]
 154:	ldr	x9, [sp, #8]
 158:	orr	x8, x8, x9, lsl #16
 15c:	str	x8, [sp, #40]
 160:	b	788 <adler32_z+0x788>
 164:	ldr	x8, [sp, #16]
 168:	mov	x9, #0x15b0                	// #5552
 16c:	cmp	x8, x9
 170:	b.cc	458 <adler32_z+0x458>  // b.lo, b.ul, b.last
 174:	ldr	x8, [sp, #16]
 178:	mov	x9, #0x15b0                	// #5552
 17c:	subs	x8, x8, x9
 180:	str	x8, [sp, #16]
 184:	mov	w10, #0x15b                 	// #347
 188:	str	w10, [sp, #4]
 18c:	ldr	x8, [sp, #24]
 190:	ldrb	w9, [x8]
 194:	mov	w8, w9
 198:	ldr	x10, [sp, #32]
 19c:	add	x8, x10, x8
 1a0:	str	x8, [sp, #32]
 1a4:	ldr	x8, [sp, #32]
 1a8:	ldr	x10, [sp, #8]
 1ac:	add	x8, x10, x8
 1b0:	str	x8, [sp, #8]
 1b4:	ldr	x8, [sp, #24]
 1b8:	ldrb	w9, [x8, #1]
 1bc:	mov	w8, w9
 1c0:	ldr	x10, [sp, #32]
 1c4:	add	x8, x10, x8
 1c8:	str	x8, [sp, #32]
 1cc:	ldr	x8, [sp, #32]
 1d0:	ldr	x10, [sp, #8]
 1d4:	add	x8, x10, x8
 1d8:	str	x8, [sp, #8]
 1dc:	ldr	x8, [sp, #24]
 1e0:	ldrb	w9, [x8, #2]
 1e4:	mov	w8, w9
 1e8:	ldr	x10, [sp, #32]
 1ec:	add	x8, x10, x8
 1f0:	str	x8, [sp, #32]
 1f4:	ldr	x8, [sp, #32]
 1f8:	ldr	x10, [sp, #8]
 1fc:	add	x8, x10, x8
 200:	str	x8, [sp, #8]
 204:	ldr	x8, [sp, #24]
 208:	ldrb	w9, [x8, #3]
 20c:	mov	w8, w9
 210:	ldr	x10, [sp, #32]
 214:	add	x8, x10, x8
 218:	str	x8, [sp, #32]
 21c:	ldr	x8, [sp, #32]
 220:	ldr	x10, [sp, #8]
 224:	add	x8, x10, x8
 228:	str	x8, [sp, #8]
 22c:	ldr	x8, [sp, #24]
 230:	ldrb	w9, [x8, #4]
 234:	mov	w8, w9
 238:	ldr	x10, [sp, #32]
 23c:	add	x8, x10, x8
 240:	str	x8, [sp, #32]
 244:	ldr	x8, [sp, #32]
 248:	ldr	x10, [sp, #8]
 24c:	add	x8, x10, x8
 250:	str	x8, [sp, #8]
 254:	ldr	x8, [sp, #24]
 258:	ldrb	w9, [x8, #5]
 25c:	mov	w8, w9
 260:	ldr	x10, [sp, #32]
 264:	add	x8, x10, x8
 268:	str	x8, [sp, #32]
 26c:	ldr	x8, [sp, #32]
 270:	ldr	x10, [sp, #8]
 274:	add	x8, x10, x8
 278:	str	x8, [sp, #8]
 27c:	ldr	x8, [sp, #24]
 280:	ldrb	w9, [x8, #6]
 284:	mov	w8, w9
 288:	ldr	x10, [sp, #32]
 28c:	add	x8, x10, x8
 290:	str	x8, [sp, #32]
 294:	ldr	x8, [sp, #32]
 298:	ldr	x10, [sp, #8]
 29c:	add	x8, x10, x8
 2a0:	str	x8, [sp, #8]
 2a4:	ldr	x8, [sp, #24]
 2a8:	ldrb	w9, [x8, #7]
 2ac:	mov	w8, w9
 2b0:	ldr	x10, [sp, #32]
 2b4:	add	x8, x10, x8
 2b8:	str	x8, [sp, #32]
 2bc:	ldr	x8, [sp, #32]
 2c0:	ldr	x10, [sp, #8]
 2c4:	add	x8, x10, x8
 2c8:	str	x8, [sp, #8]
 2cc:	ldr	x8, [sp, #24]
 2d0:	ldrb	w9, [x8, #8]
 2d4:	mov	w8, w9
 2d8:	ldr	x10, [sp, #32]
 2dc:	add	x8, x10, x8
 2e0:	str	x8, [sp, #32]
 2e4:	ldr	x8, [sp, #32]
 2e8:	ldr	x10, [sp, #8]
 2ec:	add	x8, x10, x8
 2f0:	str	x8, [sp, #8]
 2f4:	ldr	x8, [sp, #24]
 2f8:	ldrb	w9, [x8, #9]
 2fc:	mov	w8, w9
 300:	ldr	x10, [sp, #32]
 304:	add	x8, x10, x8
 308:	str	x8, [sp, #32]
 30c:	ldr	x8, [sp, #32]
 310:	ldr	x10, [sp, #8]
 314:	add	x8, x10, x8
 318:	str	x8, [sp, #8]
 31c:	ldr	x8, [sp, #24]
 320:	ldrb	w9, [x8, #10]
 324:	mov	w8, w9
 328:	ldr	x10, [sp, #32]
 32c:	add	x8, x10, x8
 330:	str	x8, [sp, #32]
 334:	ldr	x8, [sp, #32]
 338:	ldr	x10, [sp, #8]
 33c:	add	x8, x10, x8
 340:	str	x8, [sp, #8]
 344:	ldr	x8, [sp, #24]
 348:	ldrb	w9, [x8, #11]
 34c:	mov	w8, w9
 350:	ldr	x10, [sp, #32]
 354:	add	x8, x10, x8
 358:	str	x8, [sp, #32]
 35c:	ldr	x8, [sp, #32]
 360:	ldr	x10, [sp, #8]
 364:	add	x8, x10, x8
 368:	str	x8, [sp, #8]
 36c:	ldr	x8, [sp, #24]
 370:	ldrb	w9, [x8, #12]
 374:	mov	w8, w9
 378:	ldr	x10, [sp, #32]
 37c:	add	x8, x10, x8
 380:	str	x8, [sp, #32]
 384:	ldr	x8, [sp, #32]
 388:	ldr	x10, [sp, #8]
 38c:	add	x8, x10, x8
 390:	str	x8, [sp, #8]
 394:	ldr	x8, [sp, #24]
 398:	ldrb	w9, [x8, #13]
 39c:	mov	w8, w9
 3a0:	ldr	x10, [sp, #32]
 3a4:	add	x8, x10, x8
 3a8:	str	x8, [sp, #32]
 3ac:	ldr	x8, [sp, #32]
 3b0:	ldr	x10, [sp, #8]
 3b4:	add	x8, x10, x8
 3b8:	str	x8, [sp, #8]
 3bc:	ldr	x8, [sp, #24]
 3c0:	ldrb	w9, [x8, #14]
 3c4:	mov	w8, w9
 3c8:	ldr	x10, [sp, #32]
 3cc:	add	x8, x10, x8
 3d0:	str	x8, [sp, #32]
 3d4:	ldr	x8, [sp, #32]
 3d8:	ldr	x10, [sp, #8]
 3dc:	add	x8, x10, x8
 3e0:	str	x8, [sp, #8]
 3e4:	ldr	x8, [sp, #24]
 3e8:	ldrb	w9, [x8, #15]
 3ec:	mov	w8, w9
 3f0:	ldr	x10, [sp, #32]
 3f4:	add	x8, x10, x8
 3f8:	str	x8, [sp, #32]
 3fc:	ldr	x8, [sp, #32]
 400:	ldr	x10, [sp, #8]
 404:	add	x8, x10, x8
 408:	str	x8, [sp, #8]
 40c:	ldr	x8, [sp, #24]
 410:	add	x8, x8, #0x10
 414:	str	x8, [sp, #24]
 418:	ldr	w8, [sp, #4]
 41c:	subs	w8, w8, #0x1
 420:	str	w8, [sp, #4]
 424:	cbnz	w8, 18c <adler32_z+0x18c>
 428:	ldr	x8, [sp, #32]
 42c:	mov	x9, #0xfff1                	// #65521
 430:	udiv	x10, x8, x9
 434:	mul	x10, x10, x9
 438:	subs	x8, x8, x10
 43c:	str	x8, [sp, #32]
 440:	ldr	x8, [sp, #8]
 444:	udiv	x10, x8, x9
 448:	mul	x9, x10, x9
 44c:	subs	x8, x8, x9
 450:	str	x8, [sp, #8]
 454:	b	164 <adler32_z+0x164>
 458:	ldr	x8, [sp, #16]
 45c:	cbz	x8, 778 <adler32_z+0x778>
 460:	ldr	x8, [sp, #16]
 464:	cmp	x8, #0x10
 468:	b.cc	708 <adler32_z+0x708>  // b.lo, b.ul, b.last
 46c:	ldr	x8, [sp, #16]
 470:	subs	x8, x8, #0x10
 474:	str	x8, [sp, #16]
 478:	ldr	x8, [sp, #24]
 47c:	ldrb	w9, [x8]
 480:	mov	w8, w9
 484:	ldr	x10, [sp, #32]
 488:	add	x8, x10, x8
 48c:	str	x8, [sp, #32]
 490:	ldr	x8, [sp, #32]
 494:	ldr	x10, [sp, #8]
 498:	add	x8, x10, x8
 49c:	str	x8, [sp, #8]
 4a0:	ldr	x8, [sp, #24]
 4a4:	ldrb	w9, [x8, #1]
 4a8:	mov	w8, w9
 4ac:	ldr	x10, [sp, #32]
 4b0:	add	x8, x10, x8
 4b4:	str	x8, [sp, #32]
 4b8:	ldr	x8, [sp, #32]
 4bc:	ldr	x10, [sp, #8]
 4c0:	add	x8, x10, x8
 4c4:	str	x8, [sp, #8]
 4c8:	ldr	x8, [sp, #24]
 4cc:	ldrb	w9, [x8, #2]
 4d0:	mov	w8, w9
 4d4:	ldr	x10, [sp, #32]
 4d8:	add	x8, x10, x8
 4dc:	str	x8, [sp, #32]
 4e0:	ldr	x8, [sp, #32]
 4e4:	ldr	x10, [sp, #8]
 4e8:	add	x8, x10, x8
 4ec:	str	x8, [sp, #8]
 4f0:	ldr	x8, [sp, #24]
 4f4:	ldrb	w9, [x8, #3]
 4f8:	mov	w8, w9
 4fc:	ldr	x10, [sp, #32]
 500:	add	x8, x10, x8
 504:	str	x8, [sp, #32]
 508:	ldr	x8, [sp, #32]
 50c:	ldr	x10, [sp, #8]
 510:	add	x8, x10, x8
 514:	str	x8, [sp, #8]
 518:	ldr	x8, [sp, #24]
 51c:	ldrb	w9, [x8, #4]
 520:	mov	w8, w9
 524:	ldr	x10, [sp, #32]
 528:	add	x8, x10, x8
 52c:	str	x8, [sp, #32]
 530:	ldr	x8, [sp, #32]
 534:	ldr	x10, [sp, #8]
 538:	add	x8, x10, x8
 53c:	str	x8, [sp, #8]
 540:	ldr	x8, [sp, #24]
 544:	ldrb	w9, [x8, #5]
 548:	mov	w8, w9
 54c:	ldr	x10, [sp, #32]
 550:	add	x8, x10, x8
 554:	str	x8, [sp, #32]
 558:	ldr	x8, [sp, #32]
 55c:	ldr	x10, [sp, #8]
 560:	add	x8, x10, x8
 564:	str	x8, [sp, #8]
 568:	ldr	x8, [sp, #24]
 56c:	ldrb	w9, [x8, #6]
 570:	mov	w8, w9
 574:	ldr	x10, [sp, #32]
 578:	add	x8, x10, x8
 57c:	str	x8, [sp, #32]
 580:	ldr	x8, [sp, #32]
 584:	ldr	x10, [sp, #8]
 588:	add	x8, x10, x8
 58c:	str	x8, [sp, #8]
 590:	ldr	x8, [sp, #24]
 594:	ldrb	w9, [x8, #7]
 598:	mov	w8, w9
 59c:	ldr	x10, [sp, #32]
 5a0:	add	x8, x10, x8
 5a4:	str	x8, [sp, #32]
 5a8:	ldr	x8, [sp, #32]
 5ac:	ldr	x10, [sp, #8]
 5b0:	add	x8, x10, x8
 5b4:	str	x8, [sp, #8]
 5b8:	ldr	x8, [sp, #24]
 5bc:	ldrb	w9, [x8, #8]
 5c0:	mov	w8, w9
 5c4:	ldr	x10, [sp, #32]
 5c8:	add	x8, x10, x8
 5cc:	str	x8, [sp, #32]
 5d0:	ldr	x8, [sp, #32]
 5d4:	ldr	x10, [sp, #8]
 5d8:	add	x8, x10, x8
 5dc:	str	x8, [sp, #8]
 5e0:	ldr	x8, [sp, #24]
 5e4:	ldrb	w9, [x8, #9]
 5e8:	mov	w8, w9
 5ec:	ldr	x10, [sp, #32]
 5f0:	add	x8, x10, x8
 5f4:	str	x8, [sp, #32]
 5f8:	ldr	x8, [sp, #32]
 5fc:	ldr	x10, [sp, #8]
 600:	add	x8, x10, x8
 604:	str	x8, [sp, #8]
 608:	ldr	x8, [sp, #24]
 60c:	ldrb	w9, [x8, #10]
 610:	mov	w8, w9
 614:	ldr	x10, [sp, #32]
 618:	add	x8, x10, x8
 61c:	str	x8, [sp, #32]
 620:	ldr	x8, [sp, #32]
 624:	ldr	x10, [sp, #8]
 628:	add	x8, x10, x8
 62c:	str	x8, [sp, #8]
 630:	ldr	x8, [sp, #24]
 634:	ldrb	w9, [x8, #11]
 638:	mov	w8, w9
 63c:	ldr	x10, [sp, #32]
 640:	add	x8, x10, x8
 644:	str	x8, [sp, #32]
 648:	ldr	x8, [sp, #32]
 64c:	ldr	x10, [sp, #8]
 650:	add	x8, x10, x8
 654:	str	x8, [sp, #8]
 658:	ldr	x8, [sp, #24]
 65c:	ldrb	w9, [x8, #12]
 660:	mov	w8, w9
 664:	ldr	x10, [sp, #32]
 668:	add	x8, x10, x8
 66c:	str	x8, [sp, #32]
 670:	ldr	x8, [sp, #32]
 674:	ldr	x10, [sp, #8]
 678:	add	x8, x10, x8
 67c:	str	x8, [sp, #8]
 680:	ldr	x8, [sp, #24]
 684:	ldrb	w9, [x8, #13]
 688:	mov	w8, w9
 68c:	ldr	x10, [sp, #32]
 690:	add	x8, x10, x8
 694:	str	x8, [sp, #32]
 698:	ldr	x8, [sp, #32]
 69c:	ldr	x10, [sp, #8]
 6a0:	add	x8, x10, x8
 6a4:	str	x8, [sp, #8]
 6a8:	ldr	x8, [sp, #24]
 6ac:	ldrb	w9, [x8, #14]
 6b0:	mov	w8, w9
 6b4:	ldr	x10, [sp, #32]
 6b8:	add	x8, x10, x8
 6bc:	str	x8, [sp, #32]
 6c0:	ldr	x8, [sp, #32]
 6c4:	ldr	x10, [sp, #8]
 6c8:	add	x8, x10, x8
 6cc:	str	x8, [sp, #8]
 6d0:	ldr	x8, [sp, #24]
 6d4:	ldrb	w9, [x8, #15]
 6d8:	mov	w8, w9
 6dc:	ldr	x10, [sp, #32]
 6e0:	add	x8, x10, x8
 6e4:	str	x8, [sp, #32]
 6e8:	ldr	x8, [sp, #32]
 6ec:	ldr	x10, [sp, #8]
 6f0:	add	x8, x10, x8
 6f4:	str	x8, [sp, #8]
 6f8:	ldr	x8, [sp, #24]
 6fc:	add	x8, x8, #0x10
 700:	str	x8, [sp, #24]
 704:	b	460 <adler32_z+0x460>
 708:	ldr	x8, [sp, #16]
 70c:	subs	x9, x8, #0x1
 710:	str	x9, [sp, #16]
 714:	cbz	x8, 74c <adler32_z+0x74c>
 718:	ldr	x8, [sp, #24]
 71c:	add	x9, x8, #0x1
 720:	str	x9, [sp, #24]
 724:	ldrb	w10, [x8]
 728:	mov	w8, w10
 72c:	ldr	x9, [sp, #32]
 730:	add	x8, x9, x8
 734:	str	x8, [sp, #32]
 738:	ldr	x8, [sp, #32]
 73c:	ldr	x9, [sp, #8]
 740:	add	x8, x9, x8
 744:	str	x8, [sp, #8]
 748:	b	708 <adler32_z+0x708>
 74c:	ldr	x8, [sp, #32]
 750:	mov	x9, #0xfff1                	// #65521
 754:	udiv	x10, x8, x9
 758:	mul	x10, x10, x9
 75c:	subs	x8, x8, x10
 760:	str	x8, [sp, #32]
 764:	ldr	x8, [sp, #8]
 768:	udiv	x10, x8, x9
 76c:	mul	x9, x10, x9
 770:	subs	x8, x8, x9
 774:	str	x8, [sp, #8]
 778:	ldr	x8, [sp, #32]
 77c:	ldr	x9, [sp, #8]
 780:	orr	x8, x8, x9, lsl #16
 784:	str	x8, [sp, #40]
 788:	ldr	x0, [sp, #40]
 78c:	add	sp, sp, #0x30
 790:	ret

0000000000000794 <adler32>:
 794:	sub	sp, sp, #0x30
 798:	stp	x29, x30, [sp, #32]
 79c:	add	x29, sp, #0x20
 7a0:	stur	x0, [x29, #-8]
 7a4:	str	x1, [sp, #16]
 7a8:	str	w2, [sp, #12]
 7ac:	ldur	x0, [x29, #-8]
 7b0:	ldr	x1, [sp, #16]
 7b4:	ldr	w8, [sp, #12]
 7b8:	mov	w2, w8
 7bc:	bl	0 <adler32_z>
 7c0:	ldp	x29, x30, [sp, #32]
 7c4:	add	sp, sp, #0x30
 7c8:	ret

00000000000007cc <adler32_combine>:
 7cc:	sub	sp, sp, #0x30
 7d0:	stp	x29, x30, [sp, #32]
 7d4:	add	x29, sp, #0x20
 7d8:	stur	x0, [x29, #-8]
 7dc:	str	x1, [sp, #16]
 7e0:	str	x2, [sp, #8]
 7e4:	ldur	x0, [x29, #-8]
 7e8:	ldr	x1, [sp, #16]
 7ec:	ldr	x2, [sp, #8]
 7f0:	bl	800 <adler32_combine_>
 7f4:	ldp	x29, x30, [sp, #32]
 7f8:	add	sp, sp, #0x30
 7fc:	ret

0000000000000800 <adler32_combine_>:
 800:	sub	sp, sp, #0x40
 804:	str	x0, [sp, #48]
 808:	str	x1, [sp, #40]
 80c:	str	x2, [sp, #32]
 810:	ldr	x8, [sp, #32]
 814:	cmp	x8, #0x0
 818:	cset	w9, ge  // ge = tcont
 81c:	tbnz	w9, #0, 82c <adler32_combine_+0x2c>
 820:	mov	x8, #0xffffffff            	// #4294967295
 824:	str	x8, [sp, #56]
 828:	b	960 <adler32_combine_+0x160>
 82c:	ldr	x8, [sp, #32]
 830:	mov	x9, #0xfff1                	// #65521
 834:	sdiv	x10, x8, x9
 838:	mul	x10, x10, x9
 83c:	subs	x8, x8, x10
 840:	str	x8, [sp, #32]
 844:	ldr	x8, [sp, #32]
 848:	str	w8, [sp, #12]
 84c:	ldr	x10, [sp, #48]
 850:	and	x10, x10, #0xffff
 854:	str	x10, [sp, #24]
 858:	ldr	w8, [sp, #12]
 85c:	mov	w10, w8
 860:	ldr	x11, [sp, #24]
 864:	mul	x10, x10, x11
 868:	str	x10, [sp, #16]
 86c:	ldr	x10, [sp, #16]
 870:	udiv	x11, x10, x9
 874:	mul	x11, x11, x9
 878:	subs	x10, x10, x11
 87c:	str	x10, [sp, #16]
 880:	ldr	x10, [sp, #40]
 884:	add	x11, x9, w10, uxth
 888:	subs	x11, x11, #0x1
 88c:	ldr	x12, [sp, #24]
 890:	add	x11, x12, x11
 894:	str	x11, [sp, #24]
 898:	ldr	x11, [sp, #48]
 89c:	lsr	x11, x11, #16
 8a0:	ldr	x12, [sp, #40]
 8a4:	lsr	x12, x12, #16
 8a8:	and	x12, x12, #0xffff
 8ac:	add	x12, x12, w11, uxth
 8b0:	add	x12, x12, x9
 8b4:	ldr	w8, [sp, #12]
 8b8:	mov	w13, w8
 8bc:	subs	x12, x12, x13
 8c0:	ldr	x13, [sp, #16]
 8c4:	add	x12, x13, x12
 8c8:	str	x12, [sp, #16]
 8cc:	ldr	x12, [sp, #24]
 8d0:	cmp	x12, x9
 8d4:	b.cc	8e8 <adler32_combine_+0xe8>  // b.lo, b.ul, b.last
 8d8:	ldr	x8, [sp, #24]
 8dc:	mov	x9, #0xfff1                	// #65521
 8e0:	subs	x8, x8, x9
 8e4:	str	x8, [sp, #24]
 8e8:	ldr	x8, [sp, #24]
 8ec:	mov	x9, #0xfff1                	// #65521
 8f0:	cmp	x8, x9
 8f4:	b.cc	908 <adler32_combine_+0x108>  // b.lo, b.ul, b.last
 8f8:	ldr	x8, [sp, #24]
 8fc:	mov	x9, #0xfff1                	// #65521
 900:	subs	x8, x8, x9
 904:	str	x8, [sp, #24]
 908:	ldr	x8, [sp, #16]
 90c:	mov	x9, #0xffe2                	// #65506
 910:	movk	x9, #0x1, lsl #16
 914:	cmp	x8, x9
 918:	b.cc	930 <adler32_combine_+0x130>  // b.lo, b.ul, b.last
 91c:	ldr	x8, [sp, #16]
 920:	mov	x9, #0xffe2                	// #65506
 924:	movk	x9, #0x1, lsl #16
 928:	subs	x8, x8, x9
 92c:	str	x8, [sp, #16]
 930:	ldr	x8, [sp, #16]
 934:	mov	x9, #0xfff1                	// #65521
 938:	cmp	x8, x9
 93c:	b.cc	950 <adler32_combine_+0x150>  // b.lo, b.ul, b.last
 940:	ldr	x8, [sp, #16]
 944:	mov	x9, #0xfff1                	// #65521
 948:	subs	x8, x8, x9
 94c:	str	x8, [sp, #16]
 950:	ldr	x8, [sp, #24]
 954:	ldr	x9, [sp, #16]
 958:	orr	x8, x8, x9, lsl #16
 95c:	str	x8, [sp, #56]
 960:	ldr	x0, [sp, #56]
 964:	add	sp, sp, #0x40
 968:	ret

000000000000096c <adler32_combine64>:
 96c:	sub	sp, sp, #0x30
 970:	stp	x29, x30, [sp, #32]
 974:	add	x29, sp, #0x20
 978:	stur	x0, [x29, #-8]
 97c:	str	x1, [sp, #16]
 980:	str	x2, [sp, #8]
 984:	ldur	x0, [x29, #-8]
 988:	ldr	x1, [sp, #16]
 98c:	ldr	x2, [sp, #8]
 990:	bl	800 <adler32_combine_>
 994:	ldp	x29, x30, [sp, #32]
 998:	add	sp, sp, #0x30
 99c:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	sub	sp, sp, #0x40
  10:	stp	x29, x30, [sp, #48]
  14:	add	x29, sp, #0x30
  18:	stur	x0, [x29, #-16]
  1c:	str	x1, [sp, #24]
  20:	str	x2, [sp, #16]
  24:	ldr	x8, [sp, #24]
  28:	cbnz	x8, 34 <crc32_z+0x28>
  2c:	stur	xzr, [x29, #-8]
  30:	b	70 <crc32_z+0x64>
  34:	mov	w8, #0x1                   	// #1
  38:	str	w8, [sp, #12]
  3c:	ldrb	w8, [sp, #12]
  40:	cbz	w8, 5c <crc32_z+0x50>
  44:	ldur	x0, [x29, #-16]
  48:	ldr	x1, [sp, #24]
  4c:	ldr	x2, [sp, #16]
  50:	bl	80 <crc32_little>
  54:	stur	x0, [x29, #-8]
  58:	b	70 <crc32_z+0x64>
  5c:	ldur	x0, [x29, #-16]
  60:	ldr	x1, [sp, #24]
  64:	ldr	x2, [sp, #16]
  68:	bl	600 <crc32_big>
  6c:	stur	x0, [x29, #-8]
  70:	ldur	x0, [x29, #-8]
  74:	ldp	x29, x30, [sp, #48]
  78:	add	sp, sp, #0x40
  7c:	ret

0000000000000080 <crc32_little>:
  80:	sub	sp, sp, #0xa0
  84:	stp	x28, x27, [sp, #80]
  88:	stp	x26, x25, [sp, #96]
  8c:	stp	x24, x23, [sp, #112]
  90:	stp	x22, x21, [sp, #128]
  94:	stp	x20, x19, [sp, #144]
  98:	adrp	x8, 0 <get_crc_table>
  9c:	add	x8, x8, #0x0
  a0:	add	x9, x8, #0xc00
  a4:	add	x10, x8, #0x800
  a8:	add	x11, x8, #0x400
  ac:	str	x0, [sp, #72]
  b0:	str	x1, [sp, #64]
  b4:	str	x2, [sp, #56]
  b8:	ldr	x12, [sp, #72]
  bc:	str	w12, [sp, #52]
  c0:	ldr	w12, [sp, #52]
  c4:	mvn	w12, w12
  c8:	str	w12, [sp, #52]
  cc:	str	x8, [sp, #32]
  d0:	str	x9, [sp, #24]
  d4:	str	x10, [sp, #16]
  d8:	str	x11, [sp, #8]
  dc:	ldr	x8, [sp, #56]
  e0:	mov	w9, #0x0                   	// #0
  e4:	str	w9, [sp, #4]
  e8:	cbz	x8, fc <crc32_little+0x7c>
  ec:	ldr	x8, [sp, #64]
  f0:	tst	x8, #0x3
  f4:	cset	w9, ne  // ne = any
  f8:	str	w9, [sp, #4]
  fc:	ldr	w8, [sp, #4]
 100:	tbnz	w8, #0, 108 <crc32_little+0x88>
 104:	b	148 <crc32_little+0xc8>
 108:	ldr	w8, [sp, #52]
 10c:	ldr	x9, [sp, #64]
 110:	add	x10, x9, #0x1
 114:	str	x10, [sp, #64]
 118:	ldrb	w11, [x9]
 11c:	eor	w8, w8, w11
 120:	and	w8, w8, #0xff
 124:	ldr	x9, [sp, #32]
 128:	ldr	w8, [x9, w8, uxtw #2]
 12c:	ldr	w11, [sp, #52]
 130:	eor	w8, w8, w11, lsr #8
 134:	str	w8, [sp, #52]
 138:	ldr	x10, [sp, #56]
 13c:	subs	x10, x10, #0x1
 140:	str	x10, [sp, #56]
 144:	b	dc <crc32_little+0x5c>
 148:	ldr	x8, [sp, #64]
 14c:	str	x8, [sp, #40]
 150:	ldr	x8, [sp, #56]
 154:	cmp	x8, #0x20
 158:	b.cc	4f0 <crc32_little+0x470>  // b.lo, b.ul, b.last
 15c:	ldr	x8, [sp, #40]
 160:	add	x9, x8, #0x4
 164:	str	x9, [sp, #40]
 168:	ldr	w10, [x8]
 16c:	ldr	w11, [sp, #52]
 170:	eor	w10, w11, w10
 174:	str	w10, [sp, #52]
 178:	ldr	w10, [sp, #52]
 17c:	and	w10, w10, #0xff
 180:	ldr	x8, [sp, #24]
 184:	ldr	w10, [x8, w10, uxtw #2]
 188:	ldr	w11, [sp, #52]
 18c:	mov	x9, #0x8                   	// #8
 190:	lsr	w11, w11, #8
 194:	and	w11, w11, #0xff
 198:	ldr	x12, [sp, #16]
 19c:	ldr	w11, [x12, w11, uxtw #2]
 1a0:	eor	w10, w10, w11
 1a4:	ldr	w11, [sp, #52]
 1a8:	mov	x13, #0x10                  	// #16
 1ac:	lsr	w11, w11, #16
 1b0:	and	w11, w11, #0xff
 1b4:	ldr	x14, [sp, #8]
 1b8:	ldr	w11, [x14, w11, uxtw #2]
 1bc:	eor	w10, w10, w11
 1c0:	ldr	w11, [sp, #52]
 1c4:	mov	x15, #0x18                  	// #24
 1c8:	lsr	w11, w11, #24
 1cc:	ldr	x16, [sp, #32]
 1d0:	ldr	w11, [x16, w11, uxtw #2]
 1d4:	eor	w10, w10, w11
 1d8:	str	w10, [sp, #52]
 1dc:	ldr	x17, [sp, #40]
 1e0:	add	x18, x17, #0x4
 1e4:	str	x18, [sp, #40]
 1e8:	ldr	w10, [x17]
 1ec:	ldr	w11, [sp, #52]
 1f0:	eor	w10, w11, w10
 1f4:	str	w10, [sp, #52]
 1f8:	ldr	w10, [sp, #52]
 1fc:	and	w10, w10, #0xff
 200:	ldr	w10, [x8, w10, uxtw #2]
 204:	ldr	w11, [sp, #52]
 208:	mov	x0, x9
 20c:	lsr	w11, w11, w0
 210:	and	w11, w11, #0xff
 214:	ldr	w11, [x12, w11, uxtw #2]
 218:	eor	w10, w10, w11
 21c:	ldr	w11, [sp, #52]
 220:	mov	x1, x13
 224:	lsr	w11, w11, w1
 228:	and	w11, w11, #0xff
 22c:	ldr	w11, [x14, w11, uxtw #2]
 230:	eor	w10, w10, w11
 234:	ldr	w11, [sp, #52]
 238:	mov	x2, x15
 23c:	lsr	w11, w11, w2
 240:	ldr	w11, [x16, w11, uxtw #2]
 244:	eor	w10, w10, w11
 248:	str	w10, [sp, #52]
 24c:	ldr	x17, [sp, #40]
 250:	add	x18, x17, #0x4
 254:	str	x18, [sp, #40]
 258:	ldr	w10, [x17]
 25c:	ldr	w11, [sp, #52]
 260:	eor	w10, w11, w10
 264:	str	w10, [sp, #52]
 268:	ldr	w10, [sp, #52]
 26c:	and	w10, w10, #0xff
 270:	ldr	w10, [x8, w10, uxtw #2]
 274:	ldr	w11, [sp, #52]
 278:	mov	x3, x9
 27c:	lsr	w11, w11, w3
 280:	and	w11, w11, #0xff
 284:	ldr	w11, [x12, w11, uxtw #2]
 288:	eor	w10, w10, w11
 28c:	ldr	w11, [sp, #52]
 290:	mov	x4, x13
 294:	lsr	w11, w11, w4
 298:	and	w11, w11, #0xff
 29c:	ldr	w11, [x14, w11, uxtw #2]
 2a0:	eor	w10, w10, w11
 2a4:	ldr	w11, [sp, #52]
 2a8:	mov	x5, x15
 2ac:	lsr	w11, w11, w5
 2b0:	ldr	w11, [x16, w11, uxtw #2]
 2b4:	eor	w10, w10, w11
 2b8:	str	w10, [sp, #52]
 2bc:	ldr	x17, [sp, #40]
 2c0:	add	x18, x17, #0x4
 2c4:	str	x18, [sp, #40]
 2c8:	ldr	w10, [x17]
 2cc:	ldr	w11, [sp, #52]
 2d0:	eor	w10, w11, w10
 2d4:	str	w10, [sp, #52]
 2d8:	ldr	w10, [sp, #52]
 2dc:	and	w10, w10, #0xff
 2e0:	ldr	w10, [x8, w10, uxtw #2]
 2e4:	ldr	w11, [sp, #52]
 2e8:	mov	x6, x9
 2ec:	lsr	w11, w11, w6
 2f0:	and	w11, w11, #0xff
 2f4:	ldr	w11, [x12, w11, uxtw #2]
 2f8:	eor	w10, w10, w11
 2fc:	ldr	w11, [sp, #52]
 300:	mov	x7, x13
 304:	lsr	w11, w11, w7
 308:	and	w11, w11, #0xff
 30c:	ldr	w11, [x14, w11, uxtw #2]
 310:	eor	w10, w10, w11
 314:	ldr	w11, [sp, #52]
 318:	mov	x17, x15
 31c:	lsr	w11, w11, w17
 320:	ldr	w11, [x16, w11, uxtw #2]
 324:	eor	w10, w10, w11
 328:	str	w10, [sp, #52]
 32c:	ldr	x18, [sp, #40]
 330:	add	x19, x18, #0x4
 334:	str	x19, [sp, #40]
 338:	ldr	w10, [x18]
 33c:	ldr	w11, [sp, #52]
 340:	eor	w10, w11, w10
 344:	str	w10, [sp, #52]
 348:	ldr	w10, [sp, #52]
 34c:	and	w10, w10, #0xff
 350:	ldr	w10, [x8, w10, uxtw #2]
 354:	ldr	w11, [sp, #52]
 358:	mov	x18, x9
 35c:	lsr	w11, w11, w18
 360:	and	w11, w11, #0xff
 364:	ldr	w11, [x12, w11, uxtw #2]
 368:	eor	w10, w10, w11
 36c:	ldr	w11, [sp, #52]
 370:	mov	x19, x13
 374:	lsr	w11, w11, w19
 378:	and	w11, w11, #0xff
 37c:	ldr	w11, [x14, w11, uxtw #2]
 380:	eor	w10, w10, w11
 384:	ldr	w11, [sp, #52]
 388:	mov	x20, x15
 38c:	lsr	w11, w11, w20
 390:	ldr	w11, [x16, w11, uxtw #2]
 394:	eor	w10, w10, w11
 398:	str	w10, [sp, #52]
 39c:	ldr	x21, [sp, #40]
 3a0:	add	x22, x21, #0x4
 3a4:	str	x22, [sp, #40]
 3a8:	ldr	w10, [x21]
 3ac:	ldr	w11, [sp, #52]
 3b0:	eor	w10, w11, w10
 3b4:	str	w10, [sp, #52]
 3b8:	ldr	w10, [sp, #52]
 3bc:	and	w10, w10, #0xff
 3c0:	ldr	w10, [x8, w10, uxtw #2]
 3c4:	ldr	w11, [sp, #52]
 3c8:	mov	x21, x9
 3cc:	lsr	w11, w11, w21
 3d0:	and	w11, w11, #0xff
 3d4:	ldr	w11, [x12, w11, uxtw #2]
 3d8:	eor	w10, w10, w11
 3dc:	ldr	w11, [sp, #52]
 3e0:	mov	x22, x13
 3e4:	lsr	w11, w11, w22
 3e8:	and	w11, w11, #0xff
 3ec:	ldr	w11, [x14, w11, uxtw #2]
 3f0:	eor	w10, w10, w11
 3f4:	ldr	w11, [sp, #52]
 3f8:	mov	x23, x15
 3fc:	lsr	w11, w11, w23
 400:	ldr	w11, [x16, w11, uxtw #2]
 404:	eor	w10, w10, w11
 408:	str	w10, [sp, #52]
 40c:	ldr	x24, [sp, #40]
 410:	add	x25, x24, #0x4
 414:	str	x25, [sp, #40]
 418:	ldr	w10, [x24]
 41c:	ldr	w11, [sp, #52]
 420:	eor	w10, w11, w10
 424:	str	w10, [sp, #52]
 428:	ldr	w10, [sp, #52]
 42c:	and	w10, w10, #0xff
 430:	ldr	w10, [x8, w10, uxtw #2]
 434:	ldr	w11, [sp, #52]
 438:	mov	x24, x9
 43c:	lsr	w11, w11, w24
 440:	and	w11, w11, #0xff
 444:	ldr	w11, [x12, w11, uxtw #2]
 448:	eor	w10, w10, w11
 44c:	ldr	w11, [sp, #52]
 450:	mov	x25, x13
 454:	lsr	w11, w11, w25
 458:	and	w11, w11, #0xff
 45c:	ldr	w11, [x14, w11, uxtw #2]
 460:	eor	w10, w10, w11
 464:	ldr	w11, [sp, #52]
 468:	mov	x26, x15
 46c:	lsr	w11, w11, w26
 470:	ldr	w11, [x16, w11, uxtw #2]
 474:	eor	w10, w10, w11
 478:	str	w10, [sp, #52]
 47c:	ldr	x27, [sp, #40]
 480:	add	x28, x27, #0x4
 484:	str	x28, [sp, #40]
 488:	ldr	w10, [x27]
 48c:	ldr	w11, [sp, #52]
 490:	eor	w10, w11, w10
 494:	str	w10, [sp, #52]
 498:	ldr	w10, [sp, #52]
 49c:	and	w10, w10, #0xff
 4a0:	ldr	w10, [x8, w10, uxtw #2]
 4a4:	ldr	w11, [sp, #52]
 4a8:	lsr	w9, w11, w9
 4ac:	and	w9, w9, #0xff
 4b0:	ldr	w9, [x12, w9, uxtw #2]
 4b4:	eor	w9, w10, w9
 4b8:	ldr	w10, [sp, #52]
 4bc:	lsr	w10, w10, w13
 4c0:	and	w10, w10, #0xff
 4c4:	ldr	w10, [x14, w10, uxtw #2]
 4c8:	eor	w9, w9, w10
 4cc:	ldr	w10, [sp, #52]
 4d0:	lsr	w10, w10, w15
 4d4:	ldr	w10, [x16, w10, uxtw #2]
 4d8:	eor	w9, w9, w10
 4dc:	str	w9, [sp, #52]
 4e0:	ldr	x27, [sp, #56]
 4e4:	subs	x27, x27, #0x20
 4e8:	str	x27, [sp, #56]
 4ec:	b	150 <crc32_little+0xd0>
 4f0:	ldr	x8, [sp, #56]
 4f4:	cmp	x8, #0x4
 4f8:	b.cc	580 <crc32_little+0x500>  // b.lo, b.ul, b.last
 4fc:	ldr	x8, [sp, #40]
 500:	add	x9, x8, #0x4
 504:	str	x9, [sp, #40]
 508:	ldr	w10, [x8]
 50c:	ldr	w11, [sp, #52]
 510:	eor	w10, w11, w10
 514:	str	w10, [sp, #52]
 518:	ldr	w10, [sp, #52]
 51c:	and	w10, w10, #0xff
 520:	ldr	x8, [sp, #24]
 524:	ldr	w10, [x8, w10, uxtw #2]
 528:	ldr	w11, [sp, #52]
 52c:	lsr	w11, w11, #8
 530:	and	w11, w11, #0xff
 534:	ldr	x9, [sp, #16]
 538:	ldr	w11, [x9, w11, uxtw #2]
 53c:	eor	w10, w10, w11
 540:	ldr	w11, [sp, #52]
 544:	lsr	w11, w11, #16
 548:	and	w11, w11, #0xff
 54c:	ldr	x12, [sp, #8]
 550:	ldr	w11, [x12, w11, uxtw #2]
 554:	eor	w10, w10, w11
 558:	ldr	w11, [sp, #52]
 55c:	lsr	w11, w11, #24
 560:	ldr	x13, [sp, #32]
 564:	ldr	w11, [x13, w11, uxtw #2]
 568:	eor	w10, w10, w11
 56c:	str	w10, [sp, #52]
 570:	ldr	x14, [sp, #56]
 574:	subs	x14, x14, #0x4
 578:	str	x14, [sp, #56]
 57c:	b	4f0 <crc32_little+0x470>
 580:	ldr	x8, [sp, #40]
 584:	str	x8, [sp, #64]
 588:	ldr	x8, [sp, #56]
 58c:	cbz	x8, 5d0 <crc32_little+0x550>
 590:	ldr	w8, [sp, #52]
 594:	ldr	x9, [sp, #64]
 598:	add	x10, x9, #0x1
 59c:	str	x10, [sp, #64]
 5a0:	ldrb	w11, [x9]
 5a4:	eor	w8, w8, w11
 5a8:	and	w8, w8, #0xff
 5ac:	ldr	x9, [sp, #32]
 5b0:	ldr	w8, [x9, w8, uxtw #2]
 5b4:	ldr	w11, [sp, #52]
 5b8:	eor	w8, w8, w11, lsr #8
 5bc:	str	w8, [sp, #52]
 5c0:	ldr	x8, [sp, #56]
 5c4:	subs	x8, x8, #0x1
 5c8:	str	x8, [sp, #56]
 5cc:	cbnz	x8, 590 <crc32_little+0x510>
 5d0:	ldr	w8, [sp, #52]
 5d4:	mvn	w8, w8
 5d8:	str	w8, [sp, #52]
 5dc:	ldr	w8, [sp, #52]
 5e0:	mov	w0, w8
 5e4:	ldp	x20, x19, [sp, #144]
 5e8:	ldp	x22, x21, [sp, #128]
 5ec:	ldp	x24, x23, [sp, #112]
 5f0:	ldp	x26, x25, [sp, #96]
 5f4:	ldp	x28, x27, [sp, #80]
 5f8:	add	sp, sp, #0xa0
 5fc:	ret

0000000000000600 <crc32_big>:
 600:	sub	sp, sp, #0xa0
 604:	stp	x28, x27, [sp, #80]
 608:	stp	x26, x25, [sp, #96]
 60c:	stp	x24, x23, [sp, #112]
 610:	stp	x22, x21, [sp, #128]
 614:	stp	x20, x19, [sp, #144]
 618:	adrp	x8, 0 <get_crc_table>
 61c:	add	x8, x8, #0x0
 620:	add	x9, x8, #0x1, lsl #12
 624:	mov	x10, #0x1400                	// #5120
 628:	add	x10, x8, x10
 62c:	mov	x11, #0x1800                	// #6144
 630:	add	x11, x8, x11
 634:	mov	x12, #0x1c00                	// #7168
 638:	add	x8, x8, x12
 63c:	str	x0, [sp, #72]
 640:	str	x1, [sp, #64]
 644:	str	x2, [sp, #56]
 648:	ldr	x12, [sp, #72]
 64c:	lsr	w12, w12, #24
 650:	ldr	x13, [sp, #72]
 654:	lsr	w13, w13, #8
 658:	and	w13, w13, #0xff00
 65c:	add	w12, w13, w12, uxtb
 660:	ldr	x14, [sp, #72]
 664:	and	w13, w14, #0xff00
 668:	add	w12, w12, w13, lsl #8
 66c:	ldr	x15, [sp, #72]
 670:	and	w13, w15, #0xff
 674:	add	w12, w12, w13, lsl #24
 678:	str	w12, [sp, #52]
 67c:	ldr	w12, [sp, #52]
 680:	mvn	w12, w12
 684:	str	w12, [sp, #52]
 688:	str	x9, [sp, #32]
 68c:	str	x10, [sp, #24]
 690:	str	x11, [sp, #16]
 694:	str	x8, [sp, #8]
 698:	ldr	x8, [sp, #56]
 69c:	mov	w9, #0x0                   	// #0
 6a0:	str	w9, [sp, #4]
 6a4:	cbz	x8, 6b8 <crc32_big+0xb8>
 6a8:	ldr	x8, [sp, #64]
 6ac:	tst	x8, #0x3
 6b0:	cset	w9, ne  // ne = any
 6b4:	str	w9, [sp, #4]
 6b8:	ldr	w8, [sp, #4]
 6bc:	tbnz	w8, #0, 6c4 <crc32_big+0xc4>
 6c0:	b	700 <crc32_big+0x100>
 6c4:	ldr	w8, [sp, #52]
 6c8:	ldr	x9, [sp, #64]
 6cc:	add	x10, x9, #0x1
 6d0:	str	x10, [sp, #64]
 6d4:	ldrb	w11, [x9]
 6d8:	eor	w8, w11, w8, lsr #24
 6dc:	ldr	x9, [sp, #32]
 6e0:	ldr	w8, [x9, w8, uxtw #2]
 6e4:	ldr	w11, [sp, #52]
 6e8:	eor	w8, w8, w11, lsl #8
 6ec:	str	w8, [sp, #52]
 6f0:	ldr	x10, [sp, #56]
 6f4:	subs	x10, x10, #0x1
 6f8:	str	x10, [sp, #56]
 6fc:	b	698 <crc32_big+0x98>
 700:	ldr	x8, [sp, #64]
 704:	str	x8, [sp, #40]
 708:	ldr	x8, [sp, #56]
 70c:	cmp	x8, #0x20
 710:	b.cc	aa8 <crc32_big+0x4a8>  // b.lo, b.ul, b.last
 714:	ldr	x8, [sp, #40]
 718:	add	x9, x8, #0x4
 71c:	str	x9, [sp, #40]
 720:	ldr	w10, [x8]
 724:	ldr	w11, [sp, #52]
 728:	eor	w10, w11, w10
 72c:	str	w10, [sp, #52]
 730:	ldr	w10, [sp, #52]
 734:	and	w10, w10, #0xff
 738:	ldr	x8, [sp, #32]
 73c:	ldr	w10, [x8, w10, uxtw #2]
 740:	ldr	w11, [sp, #52]
 744:	mov	x9, #0x8                   	// #8
 748:	lsr	w11, w11, #8
 74c:	and	w11, w11, #0xff
 750:	ldr	x12, [sp, #24]
 754:	ldr	w11, [x12, w11, uxtw #2]
 758:	eor	w10, w10, w11
 75c:	ldr	w11, [sp, #52]
 760:	mov	x13, #0x10                  	// #16
 764:	lsr	w11, w11, #16
 768:	and	w11, w11, #0xff
 76c:	ldr	x14, [sp, #16]
 770:	ldr	w11, [x14, w11, uxtw #2]
 774:	eor	w10, w10, w11
 778:	ldr	w11, [sp, #52]
 77c:	mov	x15, #0x18                  	// #24
 780:	lsr	w11, w11, #24
 784:	ldr	x16, [sp, #8]
 788:	ldr	w11, [x16, w11, uxtw #2]
 78c:	eor	w10, w10, w11
 790:	str	w10, [sp, #52]
 794:	ldr	x17, [sp, #40]
 798:	add	x18, x17, #0x4
 79c:	str	x18, [sp, #40]
 7a0:	ldr	w10, [x17]
 7a4:	ldr	w11, [sp, #52]
 7a8:	eor	w10, w11, w10
 7ac:	str	w10, [sp, #52]
 7b0:	ldr	w10, [sp, #52]
 7b4:	and	w10, w10, #0xff
 7b8:	ldr	w10, [x8, w10, uxtw #2]
 7bc:	ldr	w11, [sp, #52]
 7c0:	mov	x0, x9
 7c4:	lsr	w11, w11, w0
 7c8:	and	w11, w11, #0xff
 7cc:	ldr	w11, [x12, w11, uxtw #2]
 7d0:	eor	w10, w10, w11
 7d4:	ldr	w11, [sp, #52]
 7d8:	mov	x1, x13
 7dc:	lsr	w11, w11, w1
 7e0:	and	w11, w11, #0xff
 7e4:	ldr	w11, [x14, w11, uxtw #2]
 7e8:	eor	w10, w10, w11
 7ec:	ldr	w11, [sp, #52]
 7f0:	mov	x2, x15
 7f4:	lsr	w11, w11, w2
 7f8:	ldr	w11, [x16, w11, uxtw #2]
 7fc:	eor	w10, w10, w11
 800:	str	w10, [sp, #52]
 804:	ldr	x17, [sp, #40]
 808:	add	x18, x17, #0x4
 80c:	str	x18, [sp, #40]
 810:	ldr	w10, [x17]
 814:	ldr	w11, [sp, #52]
 818:	eor	w10, w11, w10
 81c:	str	w10, [sp, #52]
 820:	ldr	w10, [sp, #52]
 824:	and	w10, w10, #0xff
 828:	ldr	w10, [x8, w10, uxtw #2]
 82c:	ldr	w11, [sp, #52]
 830:	mov	x3, x9
 834:	lsr	w11, w11, w3
 838:	and	w11, w11, #0xff
 83c:	ldr	w11, [x12, w11, uxtw #2]
 840:	eor	w10, w10, w11
 844:	ldr	w11, [sp, #52]
 848:	mov	x4, x13
 84c:	lsr	w11, w11, w4
 850:	and	w11, w11, #0xff
 854:	ldr	w11, [x14, w11, uxtw #2]
 858:	eor	w10, w10, w11
 85c:	ldr	w11, [sp, #52]
 860:	mov	x5, x15
 864:	lsr	w11, w11, w5
 868:	ldr	w11, [x16, w11, uxtw #2]
 86c:	eor	w10, w10, w11
 870:	str	w10, [sp, #52]
 874:	ldr	x17, [sp, #40]
 878:	add	x18, x17, #0x4
 87c:	str	x18, [sp, #40]
 880:	ldr	w10, [x17]
 884:	ldr	w11, [sp, #52]
 888:	eor	w10, w11, w10
 88c:	str	w10, [sp, #52]
 890:	ldr	w10, [sp, #52]
 894:	and	w10, w10, #0xff
 898:	ldr	w10, [x8, w10, uxtw #2]
 89c:	ldr	w11, [sp, #52]
 8a0:	mov	x6, x9
 8a4:	lsr	w11, w11, w6
 8a8:	and	w11, w11, #0xff
 8ac:	ldr	w11, [x12, w11, uxtw #2]
 8b0:	eor	w10, w10, w11
 8b4:	ldr	w11, [sp, #52]
 8b8:	mov	x7, x13
 8bc:	lsr	w11, w11, w7
 8c0:	and	w11, w11, #0xff
 8c4:	ldr	w11, [x14, w11, uxtw #2]
 8c8:	eor	w10, w10, w11
 8cc:	ldr	w11, [sp, #52]
 8d0:	mov	x17, x15
 8d4:	lsr	w11, w11, w17
 8d8:	ldr	w11, [x16, w11, uxtw #2]
 8dc:	eor	w10, w10, w11
 8e0:	str	w10, [sp, #52]
 8e4:	ldr	x18, [sp, #40]
 8e8:	add	x19, x18, #0x4
 8ec:	str	x19, [sp, #40]
 8f0:	ldr	w10, [x18]
 8f4:	ldr	w11, [sp, #52]
 8f8:	eor	w10, w11, w10
 8fc:	str	w10, [sp, #52]
 900:	ldr	w10, [sp, #52]
 904:	and	w10, w10, #0xff
 908:	ldr	w10, [x8, w10, uxtw #2]
 90c:	ldr	w11, [sp, #52]
 910:	mov	x18, x9
 914:	lsr	w11, w11, w18
 918:	and	w11, w11, #0xff
 91c:	ldr	w11, [x12, w11, uxtw #2]
 920:	eor	w10, w10, w11
 924:	ldr	w11, [sp, #52]
 928:	mov	x19, x13
 92c:	lsr	w11, w11, w19
 930:	and	w11, w11, #0xff
 934:	ldr	w11, [x14, w11, uxtw #2]
 938:	eor	w10, w10, w11
 93c:	ldr	w11, [sp, #52]
 940:	mov	x20, x15
 944:	lsr	w11, w11, w20
 948:	ldr	w11, [x16, w11, uxtw #2]
 94c:	eor	w10, w10, w11
 950:	str	w10, [sp, #52]
 954:	ldr	x21, [sp, #40]
 958:	add	x22, x21, #0x4
 95c:	str	x22, [sp, #40]
 960:	ldr	w10, [x21]
 964:	ldr	w11, [sp, #52]
 968:	eor	w10, w11, w10
 96c:	str	w10, [sp, #52]
 970:	ldr	w10, [sp, #52]
 974:	and	w10, w10, #0xff
 978:	ldr	w10, [x8, w10, uxtw #2]
 97c:	ldr	w11, [sp, #52]
 980:	mov	x21, x9
 984:	lsr	w11, w11, w21
 988:	and	w11, w11, #0xff
 98c:	ldr	w11, [x12, w11, uxtw #2]
 990:	eor	w10, w10, w11
 994:	ldr	w11, [sp, #52]
 998:	mov	x22, x13
 99c:	lsr	w11, w11, w22
 9a0:	and	w11, w11, #0xff
 9a4:	ldr	w11, [x14, w11, uxtw #2]
 9a8:	eor	w10, w10, w11
 9ac:	ldr	w11, [sp, #52]
 9b0:	mov	x23, x15
 9b4:	lsr	w11, w11, w23
 9b8:	ldr	w11, [x16, w11, uxtw #2]
 9bc:	eor	w10, w10, w11
 9c0:	str	w10, [sp, #52]
 9c4:	ldr	x24, [sp, #40]
 9c8:	add	x25, x24, #0x4
 9cc:	str	x25, [sp, #40]
 9d0:	ldr	w10, [x24]
 9d4:	ldr	w11, [sp, #52]
 9d8:	eor	w10, w11, w10
 9dc:	str	w10, [sp, #52]
 9e0:	ldr	w10, [sp, #52]
 9e4:	and	w10, w10, #0xff
 9e8:	ldr	w10, [x8, w10, uxtw #2]
 9ec:	ldr	w11, [sp, #52]
 9f0:	mov	x24, x9
 9f4:	lsr	w11, w11, w24
 9f8:	and	w11, w11, #0xff
 9fc:	ldr	w11, [x12, w11, uxtw #2]
 a00:	eor	w10, w10, w11
 a04:	ldr	w11, [sp, #52]
 a08:	mov	x25, x13
 a0c:	lsr	w11, w11, w25
 a10:	and	w11, w11, #0xff
 a14:	ldr	w11, [x14, w11, uxtw #2]
 a18:	eor	w10, w10, w11
 a1c:	ldr	w11, [sp, #52]
 a20:	mov	x26, x15
 a24:	lsr	w11, w11, w26
 a28:	ldr	w11, [x16, w11, uxtw #2]
 a2c:	eor	w10, w10, w11
 a30:	str	w10, [sp, #52]
 a34:	ldr	x27, [sp, #40]
 a38:	add	x28, x27, #0x4
 a3c:	str	x28, [sp, #40]
 a40:	ldr	w10, [x27]
 a44:	ldr	w11, [sp, #52]
 a48:	eor	w10, w11, w10
 a4c:	str	w10, [sp, #52]
 a50:	ldr	w10, [sp, #52]
 a54:	and	w10, w10, #0xff
 a58:	ldr	w10, [x8, w10, uxtw #2]
 a5c:	ldr	w11, [sp, #52]
 a60:	lsr	w9, w11, w9
 a64:	and	w9, w9, #0xff
 a68:	ldr	w9, [x12, w9, uxtw #2]
 a6c:	eor	w9, w10, w9
 a70:	ldr	w10, [sp, #52]
 a74:	lsr	w10, w10, w13
 a78:	and	w10, w10, #0xff
 a7c:	ldr	w10, [x14, w10, uxtw #2]
 a80:	eor	w9, w9, w10
 a84:	ldr	w10, [sp, #52]
 a88:	lsr	w10, w10, w15
 a8c:	ldr	w10, [x16, w10, uxtw #2]
 a90:	eor	w9, w9, w10
 a94:	str	w9, [sp, #52]
 a98:	ldr	x27, [sp, #56]
 a9c:	subs	x27, x27, #0x20
 aa0:	str	x27, [sp, #56]
 aa4:	b	708 <crc32_big+0x108>
 aa8:	ldr	x8, [sp, #56]
 aac:	cmp	x8, #0x4
 ab0:	b.cc	b38 <crc32_big+0x538>  // b.lo, b.ul, b.last
 ab4:	ldr	x8, [sp, #40]
 ab8:	add	x9, x8, #0x4
 abc:	str	x9, [sp, #40]
 ac0:	ldr	w10, [x8]
 ac4:	ldr	w11, [sp, #52]
 ac8:	eor	w10, w11, w10
 acc:	str	w10, [sp, #52]
 ad0:	ldr	w10, [sp, #52]
 ad4:	and	w10, w10, #0xff
 ad8:	ldr	x8, [sp, #32]
 adc:	ldr	w10, [x8, w10, uxtw #2]
 ae0:	ldr	w11, [sp, #52]
 ae4:	lsr	w11, w11, #8
 ae8:	and	w11, w11, #0xff
 aec:	ldr	x9, [sp, #24]
 af0:	ldr	w11, [x9, w11, uxtw #2]
 af4:	eor	w10, w10, w11
 af8:	ldr	w11, [sp, #52]
 afc:	lsr	w11, w11, #16
 b00:	and	w11, w11, #0xff
 b04:	ldr	x12, [sp, #16]
 b08:	ldr	w11, [x12, w11, uxtw #2]
 b0c:	eor	w10, w10, w11
 b10:	ldr	w11, [sp, #52]
 b14:	lsr	w11, w11, #24
 b18:	ldr	x13, [sp, #8]
 b1c:	ldr	w11, [x13, w11, uxtw #2]
 b20:	eor	w10, w10, w11
 b24:	str	w10, [sp, #52]
 b28:	ldr	x14, [sp, #56]
 b2c:	subs	x14, x14, #0x4
 b30:	str	x14, [sp, #56]
 b34:	b	aa8 <crc32_big+0x4a8>
 b38:	ldr	x8, [sp, #40]
 b3c:	str	x8, [sp, #64]
 b40:	ldr	x8, [sp, #56]
 b44:	cbz	x8, b84 <crc32_big+0x584>
 b48:	ldr	w8, [sp, #52]
 b4c:	ldr	x9, [sp, #64]
 b50:	add	x10, x9, #0x1
 b54:	str	x10, [sp, #64]
 b58:	ldrb	w11, [x9]
 b5c:	eor	w8, w11, w8, lsr #24
 b60:	ldr	x9, [sp, #32]
 b64:	ldr	w8, [x9, w8, uxtw #2]
 b68:	ldr	w11, [sp, #52]
 b6c:	eor	w8, w8, w11, lsl #8
 b70:	str	w8, [sp, #52]
 b74:	ldr	x8, [sp, #56]
 b78:	subs	x8, x8, #0x1
 b7c:	str	x8, [sp, #56]
 b80:	cbnz	x8, b48 <crc32_big+0x548>
 b84:	ldr	w8, [sp, #52]
 b88:	mvn	w8, w8
 b8c:	str	w8, [sp, #52]
 b90:	ldr	w8, [sp, #52]
 b94:	lsr	w8, w8, #24
 b98:	ldr	w9, [sp, #52]
 b9c:	lsr	w9, w9, #8
 ba0:	and	w9, w9, #0xff00
 ba4:	add	w8, w9, w8, uxtb
 ba8:	ldr	w9, [sp, #52]
 bac:	and	w9, w9, #0xff00
 bb0:	add	w8, w8, w9, lsl #8
 bb4:	ldr	w9, [sp, #52]
 bb8:	and	w9, w9, #0xff
 bbc:	add	w8, w8, w9, lsl #24
 bc0:	mov	w10, w8
 bc4:	ubfx	x0, x10, #0, #32
 bc8:	ldp	x20, x19, [sp, #144]
 bcc:	ldp	x22, x21, [sp, #128]
 bd0:	ldp	x24, x23, [sp, #112]
 bd4:	ldp	x26, x25, [sp, #96]
 bd8:	ldp	x28, x27, [sp, #80]
 bdc:	add	sp, sp, #0xa0
 be0:	ret

0000000000000be4 <crc32>:
 be4:	sub	sp, sp, #0x30
 be8:	stp	x29, x30, [sp, #32]
 bec:	add	x29, sp, #0x20
 bf0:	stur	x0, [x29, #-8]
 bf4:	str	x1, [sp, #16]
 bf8:	str	w2, [sp, #12]
 bfc:	ldur	x0, [x29, #-8]
 c00:	ldr	x1, [sp, #16]
 c04:	ldr	w8, [sp, #12]
 c08:	mov	w2, w8
 c0c:	bl	c <crc32_z>
 c10:	ldp	x29, x30, [sp, #32]
 c14:	add	sp, sp, #0x30
 c18:	ret

0000000000000c1c <crc32_combine>:
 c1c:	sub	sp, sp, #0x30
 c20:	stp	x29, x30, [sp, #32]
 c24:	add	x29, sp, #0x20
 c28:	stur	x0, [x29, #-8]
 c2c:	str	x1, [sp, #16]
 c30:	str	x2, [sp, #8]
 c34:	ldur	x0, [x29, #-8]
 c38:	ldr	x1, [sp, #16]
 c3c:	ldr	x2, [sp, #8]
 c40:	bl	c50 <crc32_combine_>
 c44:	ldp	x29, x30, [sp, #32]
 c48:	add	sp, sp, #0x30
 c4c:	ret

0000000000000c50 <crc32_combine_>:
 c50:	stp	x29, x30, [sp, #-32]!
 c54:	str	x28, [sp, #16]
 c58:	mov	x29, sp
 c5c:	sub	sp, sp, #0x240
 c60:	stur	x0, [x29, #-16]
 c64:	stur	x1, [x29, #-24]
 c68:	stur	x2, [x29, #-32]
 c6c:	ldur	x8, [x29, #-32]
 c70:	cmp	x8, #0x0
 c74:	cset	w9, gt
 c78:	tbnz	w9, #0, c88 <crc32_combine_+0x38>
 c7c:	ldur	x8, [x29, #-16]
 c80:	stur	x8, [x29, #-8]
 c84:	b	d98 <crc32_combine_+0x148>
 c88:	mov	x8, #0x8320                	// #33568
 c8c:	movk	x8, #0xedb8, lsl #16
 c90:	str	x8, [sp, #16]
 c94:	mov	x8, #0x1                   	// #1
 c98:	stur	x8, [x29, #-48]
 c9c:	mov	w9, #0x1                   	// #1
 ca0:	stur	w9, [x29, #-36]
 ca4:	ldur	w8, [x29, #-36]
 ca8:	cmp	w8, #0x20
 cac:	b.ge	cdc <crc32_combine_+0x8c>  // b.tcont
 cb0:	ldur	x8, [x29, #-48]
 cb4:	ldursw	x9, [x29, #-36]
 cb8:	add	x10, sp, #0x10
 cbc:	str	x8, [x10, x9, lsl #3]
 cc0:	ldur	x8, [x29, #-48]
 cc4:	lsl	x8, x8, #1
 cc8:	stur	x8, [x29, #-48]
 ccc:	ldur	w8, [x29, #-36]
 cd0:	add	w8, w8, #0x1
 cd4:	stur	w8, [x29, #-36]
 cd8:	b	ca4 <crc32_combine_+0x54>
 cdc:	add	x8, sp, #0x110
 ce0:	mov	x0, x8
 ce4:	add	x9, sp, #0x10
 ce8:	mov	x1, x9
 cec:	str	x8, [sp, #8]
 cf0:	str	x9, [sp]
 cf4:	bl	de0 <gf2_matrix_square>
 cf8:	ldr	x0, [sp]
 cfc:	ldr	x1, [sp, #8]
 d00:	bl	de0 <gf2_matrix_square>
 d04:	add	x0, sp, #0x110
 d08:	add	x1, sp, #0x10
 d0c:	bl	de0 <gf2_matrix_square>
 d10:	ldur	x8, [x29, #-32]
 d14:	and	x8, x8, #0x1
 d18:	cbz	x8, d2c <crc32_combine_+0xdc>
 d1c:	ldur	x1, [x29, #-16]
 d20:	add	x0, sp, #0x110
 d24:	bl	e40 <gf2_matrix_times>
 d28:	stur	x0, [x29, #-16]
 d2c:	ldur	x8, [x29, #-32]
 d30:	asr	x8, x8, #1
 d34:	stur	x8, [x29, #-32]
 d38:	ldur	x8, [x29, #-32]
 d3c:	cbnz	x8, d44 <crc32_combine_+0xf4>
 d40:	b	d80 <crc32_combine_+0x130>
 d44:	add	x0, sp, #0x10
 d48:	add	x1, sp, #0x110
 d4c:	bl	de0 <gf2_matrix_square>
 d50:	ldur	x8, [x29, #-32]
 d54:	and	x8, x8, #0x1
 d58:	cbz	x8, d6c <crc32_combine_+0x11c>
 d5c:	ldur	x1, [x29, #-16]
 d60:	add	x0, sp, #0x10
 d64:	bl	e40 <gf2_matrix_times>
 d68:	stur	x0, [x29, #-16]
 d6c:	ldur	x8, [x29, #-32]
 d70:	asr	x8, x8, #1
 d74:	stur	x8, [x29, #-32]
 d78:	ldur	x8, [x29, #-32]
 d7c:	cbnz	x8, d04 <crc32_combine_+0xb4>
 d80:	ldur	x8, [x29, #-24]
 d84:	ldur	x9, [x29, #-16]
 d88:	eor	x8, x9, x8
 d8c:	stur	x8, [x29, #-16]
 d90:	ldur	x8, [x29, #-16]
 d94:	stur	x8, [x29, #-8]
 d98:	ldur	x0, [x29, #-8]
 d9c:	add	sp, sp, #0x240
 da0:	ldr	x28, [sp, #16]
 da4:	ldp	x29, x30, [sp], #32
 da8:	ret

0000000000000dac <crc32_combine64>:
 dac:	sub	sp, sp, #0x30
 db0:	stp	x29, x30, [sp, #32]
 db4:	add	x29, sp, #0x20
 db8:	stur	x0, [x29, #-8]
 dbc:	str	x1, [sp, #16]
 dc0:	str	x2, [sp, #8]
 dc4:	ldur	x0, [x29, #-8]
 dc8:	ldr	x1, [sp, #16]
 dcc:	ldr	x2, [sp, #8]
 dd0:	bl	c50 <crc32_combine_>
 dd4:	ldp	x29, x30, [sp, #32]
 dd8:	add	sp, sp, #0x30
 ddc:	ret

0000000000000de0 <gf2_matrix_square>:
 de0:	sub	sp, sp, #0x30
 de4:	stp	x29, x30, [sp, #32]
 de8:	add	x29, sp, #0x20
 dec:	stur	x0, [x29, #-8]
 df0:	str	x1, [sp, #16]
 df4:	str	wzr, [sp, #12]
 df8:	ldr	w8, [sp, #12]
 dfc:	cmp	w8, #0x20
 e00:	b.ge	e34 <gf2_matrix_square+0x54>  // b.tcont
 e04:	ldr	x0, [sp, #16]
 e08:	ldr	x8, [sp, #16]
 e0c:	ldrsw	x9, [sp, #12]
 e10:	ldr	x1, [x8, x9, lsl #3]
 e14:	bl	e40 <gf2_matrix_times>
 e18:	ldur	x8, [x29, #-8]
 e1c:	ldrsw	x9, [sp, #12]
 e20:	str	x0, [x8, x9, lsl #3]
 e24:	ldr	w8, [sp, #12]
 e28:	add	w8, w8, #0x1
 e2c:	str	w8, [sp, #12]
 e30:	b	df8 <gf2_matrix_square+0x18>
 e34:	ldp	x29, x30, [sp, #32]
 e38:	add	sp, sp, #0x30
 e3c:	ret

0000000000000e40 <gf2_matrix_times>:
 e40:	sub	sp, sp, #0x20
 e44:	str	x0, [sp, #24]
 e48:	str	x1, [sp, #16]
 e4c:	str	xzr, [sp, #8]
 e50:	ldr	x8, [sp, #16]
 e54:	cbz	x8, e94 <gf2_matrix_times+0x54>
 e58:	ldr	x8, [sp, #16]
 e5c:	and	x8, x8, #0x1
 e60:	cbz	x8, e78 <gf2_matrix_times+0x38>
 e64:	ldr	x8, [sp, #24]
 e68:	ldr	x8, [x8]
 e6c:	ldr	x9, [sp, #8]
 e70:	eor	x8, x9, x8
 e74:	str	x8, [sp, #8]
 e78:	ldr	x8, [sp, #16]
 e7c:	lsr	x8, x8, #1
 e80:	str	x8, [sp, #16]
 e84:	ldr	x8, [sp, #24]
 e88:	add	x8, x8, #0x8
 e8c:	str	x8, [sp, #24]
 e90:	b	e50 <gf2_matrix_times+0x10>
 e94:	ldr	x0, [sp, #8]
 e98:	add	sp, sp, #0x20
 e9c:	ret

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <deflateInit_>:
       0:	sub	sp, sp, #0x30
       4:	stp	x29, x30, [sp, #32]
       8:	add	x29, sp, #0x20
       c:	mov	w8, #0x8                   	// #8
      10:	mov	w9, #0xf                   	// #15
      14:	mov	w10, wzr
      18:	stur	x0, [x29, #-8]
      1c:	stur	w1, [x29, #-12]
      20:	str	x2, [sp, #8]
      24:	str	w3, [sp, #4]
      28:	ldur	x0, [x29, #-8]
      2c:	ldur	w1, [x29, #-12]
      30:	ldr	x6, [sp, #8]
      34:	ldr	w7, [sp, #4]
      38:	mov	w2, w8
      3c:	mov	w3, w9
      40:	mov	w4, w8
      44:	mov	w5, w10
      48:	bl	58 <deflateInit2_>
      4c:	ldp	x29, x30, [sp, #32]
      50:	add	sp, sp, #0x30
      54:	ret

0000000000000058 <deflateInit2_>:
      58:	sub	sp, sp, #0x70
      5c:	stp	x29, x30, [sp, #96]
      60:	add	x29, sp, #0x60
      64:	mov	w8, #0x1                   	// #1
      68:	adrp	x9, 0 <z_errmsg>
      6c:	add	x9, x9, #0x0
      70:	stur	x0, [x29, #-16]
      74:	stur	w1, [x29, #-20]
      78:	stur	w2, [x29, #-24]
      7c:	stur	w3, [x29, #-28]
      80:	stur	w4, [x29, #-32]
      84:	stur	w5, [x29, #-36]
      88:	str	x6, [sp, #48]
      8c:	str	w7, [sp, #44]
      90:	str	w8, [sp, #28]
      94:	ldr	x10, [sp, #48]
      98:	str	x9, [sp, #8]
      9c:	cbz	x10, c8 <deflateInit2_+0x70>
      a0:	ldr	x8, [sp, #48]
      a4:	ldrb	w9, [x8]
      a8:	adrp	x8, 0 <deflateInit_>
      ac:	add	x8, x8, #0x0
      b0:	ldrb	w10, [x8]
      b4:	cmp	w9, w10
      b8:	b.ne	c8 <deflateInit2_+0x70>  // b.any
      bc:	ldrsw	x8, [sp, #44]
      c0:	cmp	x8, #0x70
      c4:	b.eq	d4 <deflateInit2_+0x7c>  // b.none
      c8:	mov	w8, #0xfffffffa            	// #-6
      cc:	stur	w8, [x29, #-4]
      d0:	b	518 <deflateInit2_+0x4c0>
      d4:	ldur	x8, [x29, #-16]
      d8:	cbnz	x8, e8 <deflateInit2_+0x90>
      dc:	mov	w8, #0xfffffffe            	// #-2
      e0:	stur	w8, [x29, #-4]
      e4:	b	518 <deflateInit2_+0x4c0>
      e8:	ldur	x8, [x29, #-16]
      ec:	mov	x9, xzr
      f0:	str	x9, [x8, #48]
      f4:	ldur	x8, [x29, #-16]
      f8:	ldr	x8, [x8, #64]
      fc:	cbnz	x8, 11c <deflateInit2_+0xc4>
     100:	ldur	x8, [x29, #-16]
     104:	adrp	x9, 0 <zcalloc>
     108:	add	x9, x9, #0x0
     10c:	str	x9, [x8, #64]
     110:	ldur	x8, [x29, #-16]
     114:	mov	x9, xzr
     118:	str	x9, [x8, #80]
     11c:	ldur	x8, [x29, #-16]
     120:	ldr	x8, [x8, #72]
     124:	cbnz	x8, 138 <deflateInit2_+0xe0>
     128:	ldur	x8, [x29, #-16]
     12c:	adrp	x9, 0 <zcfree>
     130:	add	x9, x9, #0x0
     134:	str	x9, [x8, #72]
     138:	ldur	w8, [x29, #-20]
     13c:	mov	w9, #0xffffffff            	// #-1
     140:	cmp	w8, w9
     144:	b.ne	150 <deflateInit2_+0xf8>  // b.any
     148:	mov	w8, #0x6                   	// #6
     14c:	stur	w8, [x29, #-20]
     150:	ldur	w8, [x29, #-28]
     154:	cmp	w8, #0x0
     158:	cset	w8, ge  // ge = tcont
     15c:	tbnz	w8, #0, 178 <deflateInit2_+0x120>
     160:	mov	w8, wzr
     164:	str	wzr, [sp, #28]
     168:	ldur	w9, [x29, #-28]
     16c:	subs	w8, w8, w9
     170:	stur	w8, [x29, #-28]
     174:	b	198 <deflateInit2_+0x140>
     178:	ldur	w8, [x29, #-28]
     17c:	cmp	w8, #0xf
     180:	b.le	198 <deflateInit2_+0x140>
     184:	mov	w8, #0x2                   	// #2
     188:	str	w8, [sp, #28]
     18c:	ldur	w8, [x29, #-28]
     190:	subs	w8, w8, #0x10
     194:	stur	w8, [x29, #-28]
     198:	ldur	w8, [x29, #-32]
     19c:	cmp	w8, #0x1
     1a0:	b.lt	224 <deflateInit2_+0x1cc>  // b.tstop
     1a4:	ldur	w8, [x29, #-32]
     1a8:	cmp	w8, #0x9
     1ac:	b.gt	224 <deflateInit2_+0x1cc>
     1b0:	ldur	w8, [x29, #-24]
     1b4:	cmp	w8, #0x8
     1b8:	b.ne	224 <deflateInit2_+0x1cc>  // b.any
     1bc:	ldur	w8, [x29, #-28]
     1c0:	cmp	w8, #0x8
     1c4:	b.lt	224 <deflateInit2_+0x1cc>  // b.tstop
     1c8:	ldur	w8, [x29, #-28]
     1cc:	cmp	w8, #0xf
     1d0:	b.gt	224 <deflateInit2_+0x1cc>
     1d4:	ldur	w8, [x29, #-20]
     1d8:	cmp	w8, #0x0
     1dc:	cset	w8, lt  // lt = tstop
     1e0:	tbnz	w8, #0, 224 <deflateInit2_+0x1cc>
     1e4:	ldur	w8, [x29, #-20]
     1e8:	cmp	w8, #0x9
     1ec:	b.gt	224 <deflateInit2_+0x1cc>
     1f0:	ldur	w8, [x29, #-36]
     1f4:	cmp	w8, #0x0
     1f8:	cset	w8, lt  // lt = tstop
     1fc:	tbnz	w8, #0, 224 <deflateInit2_+0x1cc>
     200:	ldur	w8, [x29, #-36]
     204:	cmp	w8, #0x4
     208:	b.gt	224 <deflateInit2_+0x1cc>
     20c:	ldur	w8, [x29, #-28]
     210:	cmp	w8, #0x8
     214:	b.ne	230 <deflateInit2_+0x1d8>  // b.any
     218:	ldr	w8, [sp, #28]
     21c:	cmp	w8, #0x1
     220:	b.eq	230 <deflateInit2_+0x1d8>  // b.none
     224:	mov	w8, #0xfffffffe            	// #-2
     228:	stur	w8, [x29, #-4]
     22c:	b	518 <deflateInit2_+0x4c0>
     230:	ldur	w8, [x29, #-28]
     234:	cmp	w8, #0x8
     238:	b.ne	244 <deflateInit2_+0x1ec>  // b.any
     23c:	mov	w8, #0x9                   	// #9
     240:	stur	w8, [x29, #-28]
     244:	ldur	x8, [x29, #-16]
     248:	ldr	x8, [x8, #64]
     24c:	ldur	x9, [x29, #-16]
     250:	ldr	x0, [x9, #80]
     254:	mov	w1, #0x1                   	// #1
     258:	mov	w2, #0x1740                	// #5952
     25c:	blr	x8
     260:	str	x0, [sp, #32]
     264:	ldr	x8, [sp, #32]
     268:	cbnz	x8, 278 <deflateInit2_+0x220>
     26c:	mov	w8, #0xfffffffc            	// #-4
     270:	stur	w8, [x29, #-4]
     274:	b	518 <deflateInit2_+0x4c0>
     278:	ldr	x8, [sp, #32]
     27c:	ldur	x9, [x29, #-16]
     280:	str	x8, [x9, #56]
     284:	ldur	x8, [x29, #-16]
     288:	ldr	x9, [sp, #32]
     28c:	str	x8, [x9]
     290:	ldr	x8, [sp, #32]
     294:	mov	w10, #0x2a                  	// #42
     298:	str	w10, [x8, #8]
     29c:	ldr	w10, [sp, #28]
     2a0:	ldr	x8, [sp, #32]
     2a4:	str	w10, [x8, #48]
     2a8:	ldr	x8, [sp, #32]
     2ac:	mov	x9, xzr
     2b0:	str	x9, [x8, #56]
     2b4:	ldur	w10, [x29, #-28]
     2b8:	ldr	x8, [sp, #32]
     2bc:	str	w10, [x8, #84]
     2c0:	ldr	x8, [sp, #32]
     2c4:	ldr	w10, [x8, #84]
     2c8:	mov	w11, #0x1                   	// #1
     2cc:	lsl	w10, w11, w10
     2d0:	ldr	x8, [sp, #32]
     2d4:	str	w10, [x8, #80]
     2d8:	ldr	x8, [sp, #32]
     2dc:	ldr	w10, [x8, #80]
     2e0:	subs	w10, w10, #0x1
     2e4:	ldr	x8, [sp, #32]
     2e8:	str	w10, [x8, #88]
     2ec:	ldur	w10, [x29, #-32]
     2f0:	add	w10, w10, #0x7
     2f4:	ldr	x8, [sp, #32]
     2f8:	str	w10, [x8, #136]
     2fc:	ldr	x8, [sp, #32]
     300:	ldr	w10, [x8, #136]
     304:	lsl	w10, w11, w10
     308:	ldr	x8, [sp, #32]
     30c:	str	w10, [x8, #132]
     310:	ldr	x8, [sp, #32]
     314:	ldr	w10, [x8, #132]
     318:	subs	w10, w10, #0x1
     31c:	ldr	x8, [sp, #32]
     320:	str	w10, [x8, #140]
     324:	ldr	x8, [sp, #32]
     328:	ldr	w10, [x8, #136]
     32c:	mov	w12, #0x3                   	// #3
     330:	add	w10, w10, #0x3
     334:	subs	w10, w10, #0x1
     338:	udiv	w10, w10, w12
     33c:	ldr	x8, [sp, #32]
     340:	str	w10, [x8, #144]
     344:	ldur	x8, [x29, #-16]
     348:	ldr	x8, [x8, #64]
     34c:	ldur	x9, [x29, #-16]
     350:	ldr	x0, [x9, #80]
     354:	ldr	x9, [sp, #32]
     358:	ldr	w1, [x9, #80]
     35c:	mov	w10, #0x2                   	// #2
     360:	mov	w2, w10
     364:	str	w11, [sp, #4]
     368:	str	w10, [sp]
     36c:	blr	x8
     370:	ldr	x8, [sp, #32]
     374:	str	x0, [x8, #96]
     378:	ldur	x8, [x29, #-16]
     37c:	ldr	x8, [x8, #64]
     380:	ldur	x9, [x29, #-16]
     384:	ldr	x0, [x9, #80]
     388:	ldr	x9, [sp, #32]
     38c:	ldr	w1, [x9, #80]
     390:	ldr	w2, [sp]
     394:	blr	x8
     398:	ldr	x8, [sp, #32]
     39c:	str	x0, [x8, #112]
     3a0:	ldur	x8, [x29, #-16]
     3a4:	ldr	x8, [x8, #64]
     3a8:	ldur	x9, [x29, #-16]
     3ac:	ldr	x0, [x9, #80]
     3b0:	ldr	x9, [sp, #32]
     3b4:	ldr	w1, [x9, #132]
     3b8:	ldr	w2, [sp]
     3bc:	blr	x8
     3c0:	ldr	x8, [sp, #32]
     3c4:	str	x0, [x8, #120]
     3c8:	ldr	x8, [sp, #32]
     3cc:	str	xzr, [x8, #5944]
     3d0:	ldur	w10, [x29, #-32]
     3d4:	add	w10, w10, #0x6
     3d8:	ldr	w11, [sp, #4]
     3dc:	lsl	w10, w11, w10
     3e0:	ldr	x8, [sp, #32]
     3e4:	str	w10, [x8, #5896]
     3e8:	ldur	x8, [x29, #-16]
     3ec:	ldr	x8, [x8, #64]
     3f0:	ldur	x9, [x29, #-16]
     3f4:	ldr	x0, [x9, #80]
     3f8:	ldr	x9, [sp, #32]
     3fc:	ldr	w1, [x9, #5896]
     400:	mov	w2, #0x4                   	// #4
     404:	blr	x8
     408:	str	x0, [sp, #16]
     40c:	ldr	x8, [sp, #16]
     410:	ldr	x9, [sp, #32]
     414:	str	x8, [x9, #16]
     418:	ldr	x8, [sp, #32]
     41c:	ldr	w10, [x8, #5896]
     420:	mov	w8, w10
     424:	mov	x9, #0x4                   	// #4
     428:	mul	x8, x8, x9
     42c:	ldr	x9, [sp, #32]
     430:	str	x8, [x9, #24]
     434:	ldr	x8, [sp, #32]
     438:	ldr	x8, [x8, #96]
     43c:	cbz	x8, 464 <deflateInit2_+0x40c>
     440:	ldr	x8, [sp, #32]
     444:	ldr	x8, [x8, #112]
     448:	cbz	x8, 464 <deflateInit2_+0x40c>
     44c:	ldr	x8, [sp, #32]
     450:	ldr	x8, [x8, #120]
     454:	cbz	x8, 464 <deflateInit2_+0x40c>
     458:	ldr	x8, [sp, #32]
     45c:	ldr	x8, [x8, #16]
     460:	cbnz	x8, 494 <deflateInit2_+0x43c>
     464:	ldr	x8, [sp, #32]
     468:	mov	w9, #0x29a                 	// #666
     46c:	str	w9, [x8, #8]
     470:	ldr	x8, [sp, #8]
     474:	ldr	x10, [x8, #48]
     478:	ldur	x11, [x29, #-16]
     47c:	str	x10, [x11, #48]
     480:	ldur	x0, [x29, #-16]
     484:	bl	528 <deflateEnd>
     488:	mov	w9, #0xfffffffc            	// #-4
     48c:	stur	w9, [x29, #-4]
     490:	b	518 <deflateInit2_+0x4c0>
     494:	ldr	x8, [sp, #16]
     498:	ldr	x9, [sp, #32]
     49c:	ldr	w10, [x9, #5896]
     4a0:	mov	w9, w10
     4a4:	mov	x11, #0x2                   	// #2
     4a8:	udiv	x9, x9, x11
     4ac:	mov	x11, #0x2                   	// #2
     4b0:	mul	x9, x11, x9
     4b4:	add	x8, x8, x9
     4b8:	ldr	x9, [sp, #32]
     4bc:	str	x8, [x9, #5904]
     4c0:	ldr	x8, [sp, #32]
     4c4:	ldr	x8, [x8, #16]
     4c8:	ldr	x9, [sp, #32]
     4cc:	ldr	w10, [x9, #5896]
     4d0:	mov	w9, w10
     4d4:	mov	x11, #0x3                   	// #3
     4d8:	mul	x9, x11, x9
     4dc:	add	x8, x8, x9
     4e0:	ldr	x9, [sp, #32]
     4e4:	str	x8, [x9, #5888]
     4e8:	ldur	w10, [x29, #-20]
     4ec:	ldr	x8, [sp, #32]
     4f0:	str	w10, [x8, #196]
     4f4:	ldur	w10, [x29, #-36]
     4f8:	ldr	x8, [sp, #32]
     4fc:	str	w10, [x8, #200]
     500:	ldur	w10, [x29, #-24]
     504:	ldr	x8, [sp, #32]
     508:	strb	w10, [x8, #72]
     50c:	ldur	x0, [x29, #-16]
     510:	bl	670 <deflateReset>
     514:	stur	w0, [x29, #-4]
     518:	ldur	w0, [x29, #-4]
     51c:	ldp	x29, x30, [sp, #96]
     520:	add	sp, sp, #0x70
     524:	ret

0000000000000528 <deflateEnd>:
     528:	sub	sp, sp, #0x30
     52c:	stp	x29, x30, [sp, #32]
     530:	add	x29, sp, #0x20
     534:	str	x0, [sp, #16]
     538:	ldr	x0, [sp, #16]
     53c:	bl	a20 <deflateStateCheck>
     540:	cbz	w0, 550 <deflateEnd+0x28>
     544:	mov	w8, #0xfffffffe            	// #-2
     548:	stur	w8, [x29, #-4]
     54c:	b	660 <deflateEnd+0x138>
     550:	ldr	x8, [sp, #16]
     554:	ldr	x8, [x8, #56]
     558:	ldr	w9, [x8, #8]
     55c:	str	w9, [sp, #12]
     560:	ldr	x8, [sp, #16]
     564:	ldr	x8, [x8, #56]
     568:	ldr	x8, [x8, #16]
     56c:	cbz	x8, 590 <deflateEnd+0x68>
     570:	ldr	x8, [sp, #16]
     574:	ldr	x8, [x8, #72]
     578:	ldr	x9, [sp, #16]
     57c:	ldr	x0, [x9, #80]
     580:	ldr	x9, [sp, #16]
     584:	ldr	x9, [x9, #56]
     588:	ldr	x1, [x9, #16]
     58c:	blr	x8
     590:	ldr	x8, [sp, #16]
     594:	ldr	x8, [x8, #56]
     598:	ldr	x8, [x8, #120]
     59c:	cbz	x8, 5c0 <deflateEnd+0x98>
     5a0:	ldr	x8, [sp, #16]
     5a4:	ldr	x8, [x8, #72]
     5a8:	ldr	x9, [sp, #16]
     5ac:	ldr	x0, [x9, #80]
     5b0:	ldr	x9, [sp, #16]
     5b4:	ldr	x9, [x9, #56]
     5b8:	ldr	x1, [x9, #120]
     5bc:	blr	x8
     5c0:	ldr	x8, [sp, #16]
     5c4:	ldr	x8, [x8, #56]
     5c8:	ldr	x8, [x8, #112]
     5cc:	cbz	x8, 5f0 <deflateEnd+0xc8>
     5d0:	ldr	x8, [sp, #16]
     5d4:	ldr	x8, [x8, #72]
     5d8:	ldr	x9, [sp, #16]
     5dc:	ldr	x0, [x9, #80]
     5e0:	ldr	x9, [sp, #16]
     5e4:	ldr	x9, [x9, #56]
     5e8:	ldr	x1, [x9, #112]
     5ec:	blr	x8
     5f0:	ldr	x8, [sp, #16]
     5f4:	ldr	x8, [x8, #56]
     5f8:	ldr	x8, [x8, #96]
     5fc:	cbz	x8, 620 <deflateEnd+0xf8>
     600:	ldr	x8, [sp, #16]
     604:	ldr	x8, [x8, #72]
     608:	ldr	x9, [sp, #16]
     60c:	ldr	x0, [x9, #80]
     610:	ldr	x9, [sp, #16]
     614:	ldr	x9, [x9, #56]
     618:	ldr	x1, [x9, #96]
     61c:	blr	x8
     620:	ldr	x8, [sp, #16]
     624:	ldr	x8, [x8, #72]
     628:	ldr	x9, [sp, #16]
     62c:	ldr	x0, [x9, #80]
     630:	ldr	x9, [sp, #16]
     634:	ldr	x1, [x9, #56]
     638:	blr	x8
     63c:	ldr	x8, [sp, #16]
     640:	mov	x9, xzr
     644:	str	x9, [x8, #56]
     648:	ldr	w10, [sp, #12]
     64c:	mov	w11, #0xfffffffd            	// #-3
     650:	mov	w12, wzr
     654:	cmp	w10, #0x71
     658:	csel	w10, w11, w12, eq  // eq = none
     65c:	stur	w10, [x29, #-4]
     660:	ldur	w0, [x29, #-4]
     664:	ldp	x29, x30, [sp, #32]
     668:	add	sp, sp, #0x30
     66c:	ret

0000000000000670 <deflateReset>:
     670:	sub	sp, sp, #0x20
     674:	stp	x29, x30, [sp, #16]
     678:	add	x29, sp, #0x10
     67c:	str	x0, [sp, #8]
     680:	ldr	x0, [sp, #8]
     684:	bl	1098 <deflateResetKeep>
     688:	str	w0, [sp, #4]
     68c:	ldr	w8, [sp, #4]
     690:	cbnz	w8, 6a0 <deflateReset+0x30>
     694:	ldr	x8, [sp, #8]
     698:	ldr	x0, [x8, #56]
     69c:	bl	11f8 <lm_init>
     6a0:	ldr	w0, [sp, #4]
     6a4:	ldp	x29, x30, [sp, #16]
     6a8:	add	sp, sp, #0x20
     6ac:	ret

00000000000006b0 <deflateSetDictionary>:
     6b0:	sub	sp, sp, #0x50
     6b4:	stp	x29, x30, [sp, #64]
     6b8:	add	x29, sp, #0x40
     6bc:	stur	x0, [x29, #-16]
     6c0:	stur	x1, [x29, #-24]
     6c4:	stur	w2, [x29, #-28]
     6c8:	ldur	x0, [x29, #-16]
     6cc:	bl	a20 <deflateStateCheck>
     6d0:	cbnz	w0, 6dc <deflateSetDictionary+0x2c>
     6d4:	ldur	x8, [x29, #-24]
     6d8:	cbnz	x8, 6e8 <deflateSetDictionary+0x38>
     6dc:	mov	w8, #0xfffffffe            	// #-2
     6e0:	stur	w8, [x29, #-4]
     6e4:	b	a10 <deflateSetDictionary+0x360>
     6e8:	ldur	x8, [x29, #-16]
     6ec:	ldr	x8, [x8, #56]
     6f0:	str	x8, [sp, #24]
     6f4:	ldr	x8, [sp, #24]
     6f8:	ldr	w9, [x8, #48]
     6fc:	str	w9, [sp, #12]
     700:	ldr	w9, [sp, #12]
     704:	cmp	w9, #0x2
     708:	b.eq	734 <deflateSetDictionary+0x84>  // b.none
     70c:	ldr	w8, [sp, #12]
     710:	cmp	w8, #0x1
     714:	b.ne	728 <deflateSetDictionary+0x78>  // b.any
     718:	ldr	x8, [sp, #24]
     71c:	ldr	w9, [x8, #8]
     720:	cmp	w9, #0x2a
     724:	b.ne	734 <deflateSetDictionary+0x84>  // b.any
     728:	ldr	x8, [sp, #24]
     72c:	ldr	w9, [x8, #180]
     730:	cbz	w9, 740 <deflateSetDictionary+0x90>
     734:	mov	w8, #0xfffffffe            	// #-2
     738:	stur	w8, [x29, #-4]
     73c:	b	a10 <deflateSetDictionary+0x360>
     740:	ldr	w8, [sp, #12]
     744:	cmp	w8, #0x1
     748:	b.ne	768 <deflateSetDictionary+0xb8>  // b.any
     74c:	ldur	x8, [x29, #-16]
     750:	ldr	x0, [x8, #96]
     754:	ldur	x1, [x29, #-24]
     758:	ldur	w2, [x29, #-28]
     75c:	bl	0 <adler32>
     760:	ldur	x8, [x29, #-16]
     764:	str	x0, [x8, #96]
     768:	ldr	x8, [sp, #24]
     76c:	str	wzr, [x8, #48]
     770:	ldur	w9, [x29, #-28]
     774:	ldr	x8, [sp, #24]
     778:	ldr	w10, [x8, #80]
     77c:	cmp	w9, w10
     780:	b.cc	82c <deflateSetDictionary+0x17c>  // b.lo, b.ul, b.last
     784:	ldr	w8, [sp, #12]
     788:	cbnz	w8, 7fc <deflateSetDictionary+0x14c>
     78c:	ldr	x8, [sp, #24]
     790:	ldr	x8, [x8, #120]
     794:	ldr	x9, [sp, #24]
     798:	ldr	w10, [x9, #132]
     79c:	subs	w10, w10, #0x1
     7a0:	mov	w9, w10
     7a4:	ubfx	x9, x9, #0, #32
     7a8:	mov	x11, #0x2                   	// #2
     7ac:	mul	x9, x11, x9
     7b0:	add	x8, x8, x9
     7b4:	mov	w10, #0x0                   	// #0
     7b8:	strh	w10, [x8]
     7bc:	ldr	x8, [sp, #24]
     7c0:	ldr	x0, [x8, #120]
     7c4:	ldr	x8, [sp, #24]
     7c8:	ldr	w10, [x8, #132]
     7cc:	subs	w10, w10, #0x1
     7d0:	mov	w12, #0x2                   	// #2
     7d4:	umull	x2, w10, w12
     7d8:	mov	w10, wzr
     7dc:	mov	w1, w10
     7e0:	bl	0 <memset>
     7e4:	ldr	x8, [sp, #24]
     7e8:	str	wzr, [x8, #172]
     7ec:	ldr	x8, [sp, #24]
     7f0:	str	xzr, [x8, #152]
     7f4:	ldr	x8, [sp, #24]
     7f8:	str	wzr, [x8, #5932]
     7fc:	ldur	w8, [x29, #-28]
     800:	ldr	x9, [sp, #24]
     804:	ldr	w10, [x9, #80]
     808:	subs	w8, w8, w10
     80c:	ldur	x9, [x29, #-24]
     810:	mov	w11, w8
     814:	ubfx	x11, x11, #0, #32
     818:	add	x9, x9, x11
     81c:	stur	x9, [x29, #-24]
     820:	ldr	x9, [sp, #24]
     824:	ldr	w8, [x9, #80]
     828:	stur	w8, [x29, #-28]
     82c:	ldur	x8, [x29, #-16]
     830:	ldr	w9, [x8, #8]
     834:	str	w9, [sp, #8]
     838:	ldur	x8, [x29, #-16]
     83c:	ldr	x8, [x8]
     840:	str	x8, [sp]
     844:	ldur	w9, [x29, #-28]
     848:	ldur	x8, [x29, #-16]
     84c:	str	w9, [x8, #8]
     850:	ldur	x8, [x29, #-24]
     854:	ldur	x10, [x29, #-16]
     858:	str	x8, [x10]
     85c:	ldr	x0, [sp, #24]
     860:	bl	b18 <fill_window>
     864:	ldr	x8, [sp, #24]
     868:	ldr	w9, [x8, #180]
     86c:	cmp	w9, #0x3
     870:	b.cc	988 <deflateSetDictionary+0x2d8>  // b.lo, b.ul, b.last
     874:	ldr	x8, [sp, #24]
     878:	ldr	w9, [x8, #172]
     87c:	str	w9, [sp, #20]
     880:	ldr	x8, [sp, #24]
     884:	ldr	w9, [x8, #180]
     888:	subs	w9, w9, #0x2
     88c:	str	w9, [sp, #16]
     890:	ldr	x8, [sp, #24]
     894:	ldr	w9, [x8, #128]
     898:	ldr	x8, [sp, #24]
     89c:	ldr	w10, [x8, #144]
     8a0:	lsl	w9, w9, w10
     8a4:	ldr	x8, [sp, #24]
     8a8:	ldr	x8, [x8, #96]
     8ac:	ldr	w10, [sp, #20]
     8b0:	add	w10, w10, #0x3
     8b4:	subs	w10, w10, #0x1
     8b8:	ldrb	w10, [x8, w10, uxtw]
     8bc:	eor	w9, w9, w10
     8c0:	ldr	x8, [sp, #24]
     8c4:	ldr	w10, [x8, #140]
     8c8:	and	w9, w9, w10
     8cc:	ldr	x8, [sp, #24]
     8d0:	str	w9, [x8, #128]
     8d4:	ldr	x8, [sp, #24]
     8d8:	ldr	x8, [x8, #120]
     8dc:	ldr	x11, [sp, #24]
     8e0:	ldr	w9, [x11, #128]
     8e4:	mov	w11, w9
     8e8:	mov	x12, #0x2                   	// #2
     8ec:	mul	x11, x12, x11
     8f0:	add	x8, x8, x11
     8f4:	ldrh	w9, [x8]
     8f8:	ldr	x8, [sp, #24]
     8fc:	ldr	x8, [x8, #112]
     900:	ldr	w10, [sp, #20]
     904:	ldr	x11, [sp, #24]
     908:	ldr	w13, [x11, #88]
     90c:	and	w10, w10, w13
     910:	mov	w11, w10
     914:	ubfx	x11, x11, #0, #32
     918:	mul	x11, x12, x11
     91c:	add	x8, x8, x11
     920:	strh	w9, [x8]
     924:	ldr	w9, [sp, #20]
     928:	ldr	x8, [sp, #24]
     92c:	ldr	x8, [x8, #120]
     930:	ldr	x11, [sp, #24]
     934:	ldr	w10, [x11, #128]
     938:	mov	w11, w10
     93c:	mul	x11, x12, x11
     940:	add	x8, x8, x11
     944:	strh	w9, [x8]
     948:	ldr	w9, [sp, #20]
     94c:	add	w9, w9, #0x1
     950:	str	w9, [sp, #20]
     954:	ldr	w8, [sp, #16]
     958:	subs	w8, w8, #0x1
     95c:	str	w8, [sp, #16]
     960:	cbnz	w8, 890 <deflateSetDictionary+0x1e0>
     964:	ldr	w8, [sp, #20]
     968:	ldr	x9, [sp, #24]
     96c:	str	w8, [x9, #172]
     970:	ldr	x9, [sp, #24]
     974:	mov	w8, #0x2                   	// #2
     978:	str	w8, [x9, #180]
     97c:	ldr	x0, [sp, #24]
     980:	bl	b18 <fill_window>
     984:	b	864 <deflateSetDictionary+0x1b4>
     988:	ldr	x8, [sp, #24]
     98c:	ldr	w9, [x8, #180]
     990:	ldr	x8, [sp, #24]
     994:	ldr	w10, [x8, #172]
     998:	add	w9, w10, w9
     99c:	str	w9, [x8, #172]
     9a0:	ldr	x8, [sp, #24]
     9a4:	ldr	w9, [x8, #172]
     9a8:	mov	w8, w9
     9ac:	ldr	x11, [sp, #24]
     9b0:	str	x8, [x11, #152]
     9b4:	ldr	x8, [sp, #24]
     9b8:	ldr	w9, [x8, #180]
     9bc:	ldr	x8, [sp, #24]
     9c0:	str	w9, [x8, #5932]
     9c4:	ldr	x8, [sp, #24]
     9c8:	str	wzr, [x8, #180]
     9cc:	ldr	x8, [sp, #24]
     9d0:	mov	w9, #0x2                   	// #2
     9d4:	str	w9, [x8, #184]
     9d8:	ldr	x8, [sp, #24]
     9dc:	str	w9, [x8, #160]
     9e0:	ldr	x8, [sp, #24]
     9e4:	str	wzr, [x8, #168]
     9e8:	ldr	x8, [sp]
     9ec:	ldur	x11, [x29, #-16]
     9f0:	str	x8, [x11]
     9f4:	ldr	w9, [sp, #8]
     9f8:	ldur	x8, [x29, #-16]
     9fc:	str	w9, [x8, #8]
     a00:	ldr	w9, [sp, #12]
     a04:	ldr	x8, [sp, #24]
     a08:	str	w9, [x8, #48]
     a0c:	stur	wzr, [x29, #-4]
     a10:	ldur	w0, [x29, #-4]
     a14:	ldp	x29, x30, [sp, #64]
     a18:	add	sp, sp, #0x50
     a1c:	ret

0000000000000a20 <deflateStateCheck>:
     a20:	sub	sp, sp, #0x20
     a24:	str	x0, [sp, #16]
     a28:	ldr	x8, [sp, #16]
     a2c:	cbz	x8, a48 <deflateStateCheck+0x28>
     a30:	ldr	x8, [sp, #16]
     a34:	ldr	x8, [x8, #64]
     a38:	cbz	x8, a48 <deflateStateCheck+0x28>
     a3c:	ldr	x8, [sp, #16]
     a40:	ldr	x8, [x8, #72]
     a44:	cbnz	x8, a54 <deflateStateCheck+0x34>
     a48:	mov	w8, #0x1                   	// #1
     a4c:	str	w8, [sp, #28]
     a50:	b	b0c <deflateStateCheck+0xec>
     a54:	ldr	x8, [sp, #16]
     a58:	ldr	x8, [x8, #56]
     a5c:	str	x8, [sp, #8]
     a60:	ldr	x8, [sp, #8]
     a64:	cbz	x8, afc <deflateStateCheck+0xdc>
     a68:	ldr	x8, [sp, #8]
     a6c:	ldr	x8, [x8]
     a70:	ldr	x9, [sp, #16]
     a74:	cmp	x8, x9
     a78:	b.ne	afc <deflateStateCheck+0xdc>  // b.any
     a7c:	ldr	x8, [sp, #8]
     a80:	ldr	w9, [x8, #8]
     a84:	cmp	w9, #0x2a
     a88:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     a8c:	ldr	x8, [sp, #8]
     a90:	ldr	w9, [x8, #8]
     a94:	cmp	w9, #0x39
     a98:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     a9c:	ldr	x8, [sp, #8]
     aa0:	ldr	w9, [x8, #8]
     aa4:	cmp	w9, #0x45
     aa8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     aac:	ldr	x8, [sp, #8]
     ab0:	ldr	w9, [x8, #8]
     ab4:	cmp	w9, #0x49
     ab8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     abc:	ldr	x8, [sp, #8]
     ac0:	ldr	w9, [x8, #8]
     ac4:	cmp	w9, #0x5b
     ac8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     acc:	ldr	x8, [sp, #8]
     ad0:	ldr	w9, [x8, #8]
     ad4:	cmp	w9, #0x67
     ad8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     adc:	ldr	x8, [sp, #8]
     ae0:	ldr	w9, [x8, #8]
     ae4:	cmp	w9, #0x71
     ae8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     aec:	ldr	x8, [sp, #8]
     af0:	ldr	w9, [x8, #8]
     af4:	cmp	w9, #0x29a
     af8:	b.eq	b08 <deflateStateCheck+0xe8>  // b.none
     afc:	mov	w8, #0x1                   	// #1
     b00:	str	w8, [sp, #28]
     b04:	b	b0c <deflateStateCheck+0xec>
     b08:	str	wzr, [sp, #28]
     b0c:	ldr	w0, [sp, #28]
     b10:	add	sp, sp, #0x20
     b14:	ret

0000000000000b18 <fill_window>:
     b18:	sub	sp, sp, #0x40
     b1c:	stp	x29, x30, [sp, #48]
     b20:	add	x29, sp, #0x30
     b24:	stur	x0, [x29, #-8]
     b28:	ldur	x8, [x29, #-8]
     b2c:	ldr	w9, [x8, #80]
     b30:	stur	w9, [x29, #-20]
     b34:	ldur	x8, [x29, #-8]
     b38:	ldr	x8, [x8, #104]
     b3c:	ldur	x9, [x29, #-8]
     b40:	ldr	w10, [x9, #180]
     b44:	mov	w9, w10
     b48:	subs	x8, x8, x9
     b4c:	ldur	x9, [x29, #-8]
     b50:	ldr	w10, [x9, #172]
     b54:	mov	w9, w10
     b58:	subs	x8, x8, x9
     b5c:	stur	w8, [x29, #-16]
     b60:	ldur	x9, [x29, #-8]
     b64:	ldr	w8, [x9, #172]
     b68:	ldur	w10, [x29, #-20]
     b6c:	ldur	x9, [x29, #-8]
     b70:	ldr	w11, [x9, #80]
     b74:	subs	w11, w11, #0x106
     b78:	add	w10, w10, w11
     b7c:	cmp	w8, w10
     b80:	b.cc	c10 <fill_window+0xf8>  // b.lo, b.ul, b.last
     b84:	ldur	x8, [x29, #-8]
     b88:	ldr	x0, [x8, #96]
     b8c:	ldur	x8, [x29, #-8]
     b90:	ldr	x8, [x8, #96]
     b94:	ldur	w9, [x29, #-20]
     b98:	mov	w10, w9
     b9c:	add	x1, x8, x10
     ba0:	ldur	w9, [x29, #-20]
     ba4:	ldur	w11, [x29, #-16]
     ba8:	subs	w9, w9, w11
     bac:	mov	w8, w9
     bb0:	ubfx	x2, x8, #0, #32
     bb4:	bl	0 <memcpy>
     bb8:	ldur	w9, [x29, #-20]
     bbc:	ldur	x8, [x29, #-8]
     bc0:	ldr	w11, [x8, #176]
     bc4:	subs	w9, w11, w9
     bc8:	str	w9, [x8, #176]
     bcc:	ldur	w9, [x29, #-20]
     bd0:	ldur	x8, [x29, #-8]
     bd4:	ldr	w11, [x8, #172]
     bd8:	subs	w9, w11, w9
     bdc:	str	w9, [x8, #172]
     be0:	ldur	w9, [x29, #-20]
     be4:	mov	w8, w9
     be8:	ldur	x10, [x29, #-8]
     bec:	ldr	x12, [x10, #152]
     bf0:	subs	x8, x12, x8
     bf4:	str	x8, [x10, #152]
     bf8:	ldur	x0, [x29, #-8]
     bfc:	bl	2b44 <slide_hash>
     c00:	ldur	w9, [x29, #-20]
     c04:	ldur	w11, [x29, #-16]
     c08:	add	w9, w11, w9
     c0c:	stur	w9, [x29, #-16]
     c10:	ldur	x8, [x29, #-8]
     c14:	ldr	x8, [x8]
     c18:	ldr	w9, [x8, #8]
     c1c:	cbnz	w9, c24 <fill_window+0x10c>
     c20:	b	e40 <fill_window+0x328>
     c24:	ldur	x8, [x29, #-8]
     c28:	ldr	x0, [x8]
     c2c:	ldur	x8, [x29, #-8]
     c30:	ldr	x8, [x8, #96]
     c34:	ldur	x9, [x29, #-8]
     c38:	ldr	w10, [x9, #172]
     c3c:	mov	w9, w10
     c40:	add	x8, x8, x9
     c44:	ldur	x9, [x29, #-8]
     c48:	ldr	w10, [x9, #180]
     c4c:	mov	w9, w10
     c50:	add	x1, x8, x9
     c54:	ldur	w2, [x29, #-16]
     c58:	bl	5f40 <read_buf>
     c5c:	stur	w0, [x29, #-12]
     c60:	ldur	w10, [x29, #-12]
     c64:	ldur	x8, [x29, #-8]
     c68:	ldr	w11, [x8, #180]
     c6c:	add	w10, w11, w10
     c70:	str	w10, [x8, #180]
     c74:	ldur	x8, [x29, #-8]
     c78:	ldr	w10, [x8, #180]
     c7c:	ldur	x8, [x29, #-8]
     c80:	ldr	w11, [x8, #5932]
     c84:	add	w10, w10, w11
     c88:	cmp	w10, #0x3
     c8c:	b.cc	e08 <fill_window+0x2f0>  // b.lo, b.ul, b.last
     c90:	ldur	x8, [x29, #-8]
     c94:	ldr	w9, [x8, #172]
     c98:	ldur	x8, [x29, #-8]
     c9c:	ldr	w10, [x8, #5932]
     ca0:	subs	w9, w9, w10
     ca4:	str	w9, [sp, #24]
     ca8:	ldur	x8, [x29, #-8]
     cac:	ldr	x8, [x8, #96]
     cb0:	ldr	w9, [sp, #24]
     cb4:	mov	w11, w9
     cb8:	ldrb	w9, [x8, x11]
     cbc:	ldur	x8, [x29, #-8]
     cc0:	str	w9, [x8, #128]
     cc4:	ldur	x8, [x29, #-8]
     cc8:	ldr	w9, [x8, #128]
     ccc:	ldur	x8, [x29, #-8]
     cd0:	ldr	w10, [x8, #144]
     cd4:	lsl	w9, w9, w10
     cd8:	ldur	x8, [x29, #-8]
     cdc:	ldr	x8, [x8, #96]
     ce0:	ldr	w10, [sp, #24]
     ce4:	add	w10, w10, #0x1
     ce8:	ldrb	w10, [x8, w10, uxtw]
     cec:	eor	w9, w9, w10
     cf0:	ldur	x8, [x29, #-8]
     cf4:	ldr	w10, [x8, #140]
     cf8:	and	w9, w9, w10
     cfc:	ldur	x8, [x29, #-8]
     d00:	str	w9, [x8, #128]
     d04:	ldur	x8, [x29, #-8]
     d08:	ldr	w9, [x8, #5932]
     d0c:	cbz	w9, e08 <fill_window+0x2f0>
     d10:	ldur	x8, [x29, #-8]
     d14:	ldr	w9, [x8, #128]
     d18:	ldur	x8, [x29, #-8]
     d1c:	ldr	w10, [x8, #144]
     d20:	lsl	w9, w9, w10
     d24:	ldur	x8, [x29, #-8]
     d28:	ldr	x8, [x8, #96]
     d2c:	ldr	w10, [sp, #24]
     d30:	add	w10, w10, #0x3
     d34:	subs	w10, w10, #0x1
     d38:	ldrb	w10, [x8, w10, uxtw]
     d3c:	eor	w9, w9, w10
     d40:	ldur	x8, [x29, #-8]
     d44:	ldr	w10, [x8, #140]
     d48:	and	w9, w9, w10
     d4c:	ldur	x8, [x29, #-8]
     d50:	str	w9, [x8, #128]
     d54:	ldur	x8, [x29, #-8]
     d58:	ldr	x8, [x8, #120]
     d5c:	ldur	x11, [x29, #-8]
     d60:	ldr	w9, [x11, #128]
     d64:	mov	w11, w9
     d68:	mov	x12, #0x2                   	// #2
     d6c:	mul	x11, x12, x11
     d70:	add	x8, x8, x11
     d74:	ldrh	w9, [x8]
     d78:	ldur	x8, [x29, #-8]
     d7c:	ldr	x8, [x8, #112]
     d80:	ldr	w10, [sp, #24]
     d84:	ldur	x11, [x29, #-8]
     d88:	ldr	w13, [x11, #88]
     d8c:	and	w10, w10, w13
     d90:	mov	w11, w10
     d94:	ubfx	x11, x11, #0, #32
     d98:	mul	x11, x12, x11
     d9c:	add	x8, x8, x11
     da0:	strh	w9, [x8]
     da4:	ldr	w9, [sp, #24]
     da8:	ldur	x8, [x29, #-8]
     dac:	ldr	x8, [x8, #120]
     db0:	ldur	x11, [x29, #-8]
     db4:	ldr	w10, [x11, #128]
     db8:	mov	w11, w10
     dbc:	mul	x11, x12, x11
     dc0:	add	x8, x8, x11
     dc4:	strh	w9, [x8]
     dc8:	ldr	w9, [sp, #24]
     dcc:	add	w9, w9, #0x1
     dd0:	str	w9, [sp, #24]
     dd4:	ldur	x8, [x29, #-8]
     dd8:	ldr	w9, [x8, #5932]
     ddc:	subs	w9, w9, #0x1
     de0:	str	w9, [x8, #5932]
     de4:	ldur	x8, [x29, #-8]
     de8:	ldr	w9, [x8, #180]
     dec:	ldur	x8, [x29, #-8]
     df0:	ldr	w10, [x8, #5932]
     df4:	add	w9, w9, w10
     df8:	cmp	w9, #0x3
     dfc:	b.cs	e04 <fill_window+0x2ec>  // b.hs, b.nlast
     e00:	b	e08 <fill_window+0x2f0>
     e04:	b	d04 <fill_window+0x1ec>
     e08:	ldur	x8, [x29, #-8]
     e0c:	ldr	w9, [x8, #180]
     e10:	mov	w10, #0x0                   	// #0
     e14:	cmp	w9, #0x106
     e18:	str	w10, [sp, #4]
     e1c:	b.cs	e38 <fill_window+0x320>  // b.hs, b.nlast
     e20:	ldur	x8, [x29, #-8]
     e24:	ldr	x8, [x8]
     e28:	ldr	w9, [x8, #8]
     e2c:	cmp	w9, #0x0
     e30:	cset	w9, ne  // ne = any
     e34:	str	w9, [sp, #4]
     e38:	ldr	w8, [sp, #4]
     e3c:	tbnz	w8, #0, b34 <fill_window+0x1c>
     e40:	ldur	x8, [x29, #-8]
     e44:	ldr	x8, [x8, #5944]
     e48:	ldur	x9, [x29, #-8]
     e4c:	ldr	x9, [x9, #104]
     e50:	cmp	x8, x9
     e54:	b.cs	f94 <fill_window+0x47c>  // b.hs, b.nlast
     e58:	ldur	x8, [x29, #-8]
     e5c:	ldr	w9, [x8, #172]
     e60:	mov	w8, w9
     e64:	ldur	x10, [x29, #-8]
     e68:	ldr	w9, [x10, #180]
     e6c:	mov	w10, w9
     e70:	add	x8, x8, x10
     e74:	str	x8, [sp, #16]
     e78:	ldur	x8, [x29, #-8]
     e7c:	ldr	x8, [x8, #5944]
     e80:	ldr	x10, [sp, #16]
     e84:	cmp	x8, x10
     e88:	b.cs	ef0 <fill_window+0x3d8>  // b.hs, b.nlast
     e8c:	ldur	x8, [x29, #-8]
     e90:	ldr	x8, [x8, #104]
     e94:	ldr	x9, [sp, #16]
     e98:	subs	x8, x8, x9
     e9c:	str	x8, [sp, #8]
     ea0:	ldr	x8, [sp, #8]
     ea4:	cmp	x8, #0x102
     ea8:	b.ls	eb4 <fill_window+0x39c>  // b.plast
     eac:	mov	x8, #0x102                 	// #258
     eb0:	str	x8, [sp, #8]
     eb4:	ldur	x8, [x29, #-8]
     eb8:	ldr	x8, [x8, #96]
     ebc:	ldr	x9, [sp, #16]
     ec0:	add	x0, x8, x9
     ec4:	ldr	x8, [sp, #8]
     ec8:	and	x2, x8, #0xffffffff
     ecc:	mov	w10, wzr
     ed0:	mov	w1, w10
     ed4:	bl	0 <memset>
     ed8:	ldr	x8, [sp, #16]
     edc:	ldr	x9, [sp, #8]
     ee0:	add	x8, x8, x9
     ee4:	ldur	x9, [x29, #-8]
     ee8:	str	x8, [x9, #5944]
     eec:	b	f94 <fill_window+0x47c>
     ef0:	ldur	x8, [x29, #-8]
     ef4:	ldr	x8, [x8, #5944]
     ef8:	ldr	x9, [sp, #16]
     efc:	add	x9, x9, #0x102
     f00:	cmp	x8, x9
     f04:	b.cs	f94 <fill_window+0x47c>  // b.hs, b.nlast
     f08:	ldr	x8, [sp, #16]
     f0c:	add	x8, x8, #0x102
     f10:	ldur	x9, [x29, #-8]
     f14:	ldr	x9, [x9, #5944]
     f18:	subs	x8, x8, x9
     f1c:	str	x8, [sp, #8]
     f20:	ldr	x8, [sp, #8]
     f24:	ldur	x9, [x29, #-8]
     f28:	ldr	x9, [x9, #104]
     f2c:	ldur	x10, [x29, #-8]
     f30:	ldr	x10, [x10, #5944]
     f34:	subs	x9, x9, x10
     f38:	cmp	x8, x9
     f3c:	b.ls	f58 <fill_window+0x440>  // b.plast
     f40:	ldur	x8, [x29, #-8]
     f44:	ldr	x8, [x8, #104]
     f48:	ldur	x9, [x29, #-8]
     f4c:	ldr	x9, [x9, #5944]
     f50:	subs	x8, x8, x9
     f54:	str	x8, [sp, #8]
     f58:	ldur	x8, [x29, #-8]
     f5c:	ldr	x8, [x8, #96]
     f60:	ldur	x9, [x29, #-8]
     f64:	ldr	x9, [x9, #5944]
     f68:	add	x0, x8, x9
     f6c:	ldr	x8, [sp, #8]
     f70:	and	x2, x8, #0xffffffff
     f74:	mov	w10, wzr
     f78:	mov	w1, w10
     f7c:	bl	0 <memset>
     f80:	ldr	x8, [sp, #8]
     f84:	ldur	x9, [x29, #-8]
     f88:	ldr	x11, [x9, #5944]
     f8c:	add	x8, x11, x8
     f90:	str	x8, [x9, #5944]
     f94:	ldp	x29, x30, [sp, #48]
     f98:	add	sp, sp, #0x40
     f9c:	ret

0000000000000fa0 <deflateGetDictionary>:
     fa0:	sub	sp, sp, #0x40
     fa4:	stp	x29, x30, [sp, #48]
     fa8:	add	x29, sp, #0x30
     fac:	stur	x0, [x29, #-16]
     fb0:	str	x1, [sp, #24]
     fb4:	str	x2, [sp, #16]
     fb8:	ldur	x0, [x29, #-16]
     fbc:	bl	a20 <deflateStateCheck>
     fc0:	cbz	w0, fd0 <deflateGetDictionary+0x30>
     fc4:	mov	w8, #0xfffffffe            	// #-2
     fc8:	stur	w8, [x29, #-4]
     fcc:	b	1088 <deflateGetDictionary+0xe8>
     fd0:	ldur	x8, [x29, #-16]
     fd4:	ldr	x8, [x8, #56]
     fd8:	str	x8, [sp, #8]
     fdc:	ldr	x8, [sp, #8]
     fe0:	ldr	w9, [x8, #172]
     fe4:	ldr	x8, [sp, #8]
     fe8:	ldr	w10, [x8, #180]
     fec:	add	w9, w9, w10
     ff0:	str	w9, [sp, #4]
     ff4:	ldr	w9, [sp, #4]
     ff8:	ldr	x8, [sp, #8]
     ffc:	ldr	w10, [x8, #80]
    1000:	cmp	w9, w10
    1004:	b.ls	1014 <deflateGetDictionary+0x74>  // b.plast
    1008:	ldr	x8, [sp, #8]
    100c:	ldr	w9, [x8, #80]
    1010:	str	w9, [sp, #4]
    1014:	ldr	x8, [sp, #24]
    1018:	cbz	x8, 1070 <deflateGetDictionary+0xd0>
    101c:	ldr	w8, [sp, #4]
    1020:	cbz	w8, 1070 <deflateGetDictionary+0xd0>
    1024:	ldr	x0, [sp, #24]
    1028:	ldr	x8, [sp, #8]
    102c:	ldr	x8, [x8, #96]
    1030:	ldr	x9, [sp, #8]
    1034:	ldr	w10, [x9, #172]
    1038:	mov	w9, w10
    103c:	add	x8, x8, x9
    1040:	ldr	x9, [sp, #8]
    1044:	ldr	w10, [x9, #180]
    1048:	mov	w9, w10
    104c:	add	x8, x8, x9
    1050:	ldr	w10, [sp, #4]
    1054:	mov	w9, w10
    1058:	mov	x11, xzr
    105c:	subs	x9, x11, x9
    1060:	add	x1, x8, x9
    1064:	ldr	w10, [sp, #4]
    1068:	mov	w2, w10
    106c:	bl	0 <memcpy>
    1070:	ldr	x8, [sp, #16]
    1074:	cbz	x8, 1084 <deflateGetDictionary+0xe4>
    1078:	ldr	w8, [sp, #4]
    107c:	ldr	x9, [sp, #16]
    1080:	str	w8, [x9]
    1084:	stur	wzr, [x29, #-4]
    1088:	ldur	w0, [x29, #-4]
    108c:	ldp	x29, x30, [sp, #48]
    1090:	add	sp, sp, #0x40
    1094:	ret

0000000000001098 <deflateResetKeep>:
    1098:	sub	sp, sp, #0x40
    109c:	stp	x29, x30, [sp, #48]
    10a0:	add	x29, sp, #0x30
    10a4:	stur	x0, [x29, #-16]
    10a8:	ldur	x0, [x29, #-16]
    10ac:	bl	a20 <deflateStateCheck>
    10b0:	cbz	w0, 10c0 <deflateResetKeep+0x28>
    10b4:	mov	w8, #0xfffffffe            	// #-2
    10b8:	stur	w8, [x29, #-4]
    10bc:	b	11e8 <deflateResetKeep+0x150>
    10c0:	ldur	x8, [x29, #-16]
    10c4:	mov	x9, xzr
    10c8:	str	xzr, [x8, #40]
    10cc:	ldur	x8, [x29, #-16]
    10d0:	str	xzr, [x8, #16]
    10d4:	ldur	x8, [x29, #-16]
    10d8:	str	x9, [x8, #48]
    10dc:	ldur	x8, [x29, #-16]
    10e0:	mov	w10, #0x2                   	// #2
    10e4:	str	w10, [x8, #88]
    10e8:	ldur	x8, [x29, #-16]
    10ec:	ldr	x8, [x8, #56]
    10f0:	str	x8, [sp, #24]
    10f4:	ldr	x8, [sp, #24]
    10f8:	str	xzr, [x8, #40]
    10fc:	ldr	x8, [sp, #24]
    1100:	ldr	x8, [x8, #16]
    1104:	ldr	x9, [sp, #24]
    1108:	str	x8, [x9, #32]
    110c:	ldr	x8, [sp, #24]
    1110:	ldr	w10, [x8, #48]
    1114:	cmp	w10, #0x0
    1118:	cset	w10, ge  // ge = tcont
    111c:	tbnz	w10, #0, 1138 <deflateResetKeep+0xa0>
    1120:	ldr	x8, [sp, #24]
    1124:	ldr	w9, [x8, #48]
    1128:	mov	w10, wzr
    112c:	subs	w9, w10, w9
    1130:	ldr	x8, [sp, #24]
    1134:	str	w9, [x8, #48]
    1138:	ldr	x8, [sp, #24]
    113c:	ldr	w9, [x8, #48]
    1140:	cmp	w9, #0x2
    1144:	b.ne	1154 <deflateResetKeep+0xbc>  // b.any
    1148:	mov	w8, #0x39                  	// #57
    114c:	str	w8, [sp, #20]
    1150:	b	1170 <deflateResetKeep+0xd8>
    1154:	ldr	x8, [sp, #24]
    1158:	ldr	w9, [x8, #48]
    115c:	mov	w10, #0x71                  	// #113
    1160:	mov	w11, #0x2a                  	// #42
    1164:	cmp	w9, #0x0
    1168:	csel	w9, w11, w10, ne  // ne = any
    116c:	str	w9, [sp, #20]
    1170:	ldr	w8, [sp, #20]
    1174:	ldr	x9, [sp, #24]
    1178:	str	w8, [x9, #8]
    117c:	ldr	x9, [sp, #24]
    1180:	ldr	w8, [x9, #48]
    1184:	cmp	w8, #0x2
    1188:	b.ne	11ac <deflateResetKeep+0x114>  // b.any
    118c:	mov	x8, xzr
    1190:	mov	x0, x8
    1194:	mov	x1, x8
    1198:	mov	w9, wzr
    119c:	mov	w2, w9
    11a0:	bl	0 <crc32>
    11a4:	str	x0, [sp, #8]
    11a8:	b	11c8 <deflateResetKeep+0x130>
    11ac:	mov	x8, xzr
    11b0:	mov	x0, x8
    11b4:	mov	x1, x8
    11b8:	mov	w9, wzr
    11bc:	mov	w2, w9
    11c0:	bl	0 <adler32>
    11c4:	str	x0, [sp, #8]
    11c8:	ldr	x8, [sp, #8]
    11cc:	ldur	x9, [x29, #-16]
    11d0:	str	x8, [x9, #96]
    11d4:	ldr	x8, [sp, #24]
    11d8:	str	wzr, [x8, #76]
    11dc:	ldr	x0, [sp, #24]
    11e0:	bl	0 <_tr_init>
    11e4:	stur	wzr, [x29, #-4]
    11e8:	ldur	w0, [x29, #-4]
    11ec:	ldp	x29, x30, [sp, #48]
    11f0:	add	sp, sp, #0x40
    11f4:	ret

00000000000011f8 <lm_init>:
    11f8:	sub	sp, sp, #0x30
    11fc:	stp	x29, x30, [sp, #32]
    1200:	add	x29, sp, #0x20
    1204:	mov	x8, #0x2                   	// #2
    1208:	mov	w9, #0x0                   	// #0
    120c:	adrp	x10, 0 <deflateInit_>
    1210:	add	x10, x10, #0x0
    1214:	mov	w11, wzr
    1218:	mov	w12, #0x2                   	// #2
    121c:	stur	x0, [x29, #-8]
    1220:	ldur	x13, [x29, #-8]
    1224:	ldr	w14, [x13, #80]
    1228:	mov	w13, w14
    122c:	mul	x8, x8, x13
    1230:	ldur	x13, [x29, #-8]
    1234:	str	x8, [x13, #104]
    1238:	ldur	x8, [x29, #-8]
    123c:	ldr	x8, [x8, #120]
    1240:	ldur	x13, [x29, #-8]
    1244:	ldr	w14, [x13, #132]
    1248:	subs	w14, w14, #0x1
    124c:	mov	w13, w14
    1250:	ubfx	x13, x13, #0, #32
    1254:	mov	x15, #0x2                   	// #2
    1258:	mul	x13, x15, x13
    125c:	add	x8, x8, x13
    1260:	strh	w9, [x8]
    1264:	ldur	x8, [x29, #-8]
    1268:	ldr	x0, [x8, #120]
    126c:	ldur	x8, [x29, #-8]
    1270:	ldr	w9, [x8, #132]
    1274:	subs	w9, w9, #0x1
    1278:	mov	w14, #0x2                   	// #2
    127c:	umull	x2, w9, w14
    1280:	mov	w1, w11
    1284:	str	x10, [sp, #16]
    1288:	str	w12, [sp, #12]
    128c:	bl	0 <memset>
    1290:	ldur	x8, [x29, #-8]
    1294:	ldrsw	x8, [x8, #196]
    1298:	mov	x10, #0x10                  	// #16
    129c:	mul	x8, x10, x8
    12a0:	ldr	x13, [sp, #16]
    12a4:	add	x8, x13, x8
    12a8:	ldrh	w9, [x8, #2]
    12ac:	ldur	x8, [x29, #-8]
    12b0:	str	w9, [x8, #192]
    12b4:	ldur	x8, [x29, #-8]
    12b8:	ldrsw	x8, [x8, #196]
    12bc:	mul	x8, x10, x8
    12c0:	ldrh	w9, [x13, x8]
    12c4:	ldur	x8, [x29, #-8]
    12c8:	str	w9, [x8, #204]
    12cc:	ldur	x8, [x29, #-8]
    12d0:	ldrsw	x8, [x8, #196]
    12d4:	mul	x8, x10, x8
    12d8:	add	x8, x13, x8
    12dc:	ldrh	w9, [x8, #4]
    12e0:	ldur	x8, [x29, #-8]
    12e4:	str	w9, [x8, #208]
    12e8:	ldur	x8, [x29, #-8]
    12ec:	ldrsw	x8, [x8, #196]
    12f0:	mul	x8, x10, x8
    12f4:	add	x8, x13, x8
    12f8:	ldrh	w9, [x8, #6]
    12fc:	ldur	x8, [x29, #-8]
    1300:	str	w9, [x8, #188]
    1304:	ldur	x8, [x29, #-8]
    1308:	str	wzr, [x8, #172]
    130c:	ldur	x8, [x29, #-8]
    1310:	str	xzr, [x8, #152]
    1314:	ldur	x8, [x29, #-8]
    1318:	str	wzr, [x8, #180]
    131c:	ldur	x8, [x29, #-8]
    1320:	str	wzr, [x8, #5932]
    1324:	ldur	x8, [x29, #-8]
    1328:	ldr	w9, [sp, #12]
    132c:	str	w9, [x8, #184]
    1330:	ldur	x8, [x29, #-8]
    1334:	str	w9, [x8, #160]
    1338:	ldur	x8, [x29, #-8]
    133c:	str	wzr, [x8, #168]
    1340:	ldur	x8, [x29, #-8]
    1344:	str	wzr, [x8, #128]
    1348:	ldp	x29, x30, [sp, #32]
    134c:	add	sp, sp, #0x30
    1350:	ret

0000000000001354 <deflateSetHeader>:
    1354:	sub	sp, sp, #0x30
    1358:	stp	x29, x30, [sp, #32]
    135c:	add	x29, sp, #0x20
    1360:	str	x0, [sp, #16]
    1364:	str	x1, [sp, #8]
    1368:	ldr	x0, [sp, #16]
    136c:	bl	a20 <deflateStateCheck>
    1370:	cbnz	w0, 1388 <deflateSetHeader+0x34>
    1374:	ldr	x8, [sp, #16]
    1378:	ldr	x8, [x8, #56]
    137c:	ldr	w9, [x8, #48]
    1380:	cmp	w9, #0x2
    1384:	b.eq	1394 <deflateSetHeader+0x40>  // b.none
    1388:	mov	w8, #0xfffffffe            	// #-2
    138c:	stur	w8, [x29, #-4]
    1390:	b	13a8 <deflateSetHeader+0x54>
    1394:	ldr	x8, [sp, #8]
    1398:	ldr	x9, [sp, #16]
    139c:	ldr	x9, [x9, #56]
    13a0:	str	x8, [x9, #56]
    13a4:	stur	wzr, [x29, #-4]
    13a8:	ldur	w0, [x29, #-4]
    13ac:	ldp	x29, x30, [sp, #32]
    13b0:	add	sp, sp, #0x30
    13b4:	ret

00000000000013b8 <deflatePending>:
    13b8:	sub	sp, sp, #0x30
    13bc:	stp	x29, x30, [sp, #32]
    13c0:	add	x29, sp, #0x20
    13c4:	str	x0, [sp, #16]
    13c8:	str	x1, [sp, #8]
    13cc:	str	x2, [sp]
    13d0:	ldr	x0, [sp, #16]
    13d4:	bl	a20 <deflateStateCheck>
    13d8:	cbz	w0, 13e8 <deflatePending+0x30>
    13dc:	mov	w8, #0xfffffffe            	// #-2
    13e0:	stur	w8, [x29, #-4]
    13e4:	b	1424 <deflatePending+0x6c>
    13e8:	ldr	x8, [sp, #8]
    13ec:	cbz	x8, 1404 <deflatePending+0x4c>
    13f0:	ldr	x8, [sp, #16]
    13f4:	ldr	x8, [x8, #56]
    13f8:	ldr	x8, [x8, #40]
    13fc:	ldr	x9, [sp, #8]
    1400:	str	w8, [x9]
    1404:	ldr	x8, [sp]
    1408:	cbz	x8, 1420 <deflatePending+0x68>
    140c:	ldr	x8, [sp, #16]
    1410:	ldr	x8, [x8, #56]
    1414:	ldr	w9, [x8, #5940]
    1418:	ldr	x8, [sp]
    141c:	str	w9, [x8]
    1420:	stur	wzr, [x29, #-4]
    1424:	ldur	w0, [x29, #-4]
    1428:	ldp	x29, x30, [sp, #32]
    142c:	add	sp, sp, #0x30
    1430:	ret

0000000000001434 <deflatePrime>:
    1434:	sub	sp, sp, #0x40
    1438:	stp	x29, x30, [sp, #48]
    143c:	add	x29, sp, #0x30
    1440:	stur	x0, [x29, #-16]
    1444:	stur	w1, [x29, #-20]
    1448:	str	w2, [sp, #24]
    144c:	ldur	x0, [x29, #-16]
    1450:	bl	a20 <deflateStateCheck>
    1454:	cbz	w0, 1464 <deflatePrime+0x30>
    1458:	mov	w8, #0xfffffffe            	// #-2
    145c:	stur	w8, [x29, #-4]
    1460:	b	1544 <deflatePrime+0x110>
    1464:	ldur	x8, [x29, #-16]
    1468:	ldr	x8, [x8, #56]
    146c:	str	x8, [sp, #16]
    1470:	ldr	x8, [sp, #16]
    1474:	ldr	x8, [x8, #5904]
    1478:	ldr	x9, [sp, #16]
    147c:	ldr	x9, [x9, #32]
    1480:	add	x9, x9, #0x2
    1484:	cmp	x8, x9
    1488:	b.cs	1498 <deflatePrime+0x64>  // b.hs, b.nlast
    148c:	mov	w8, #0xfffffffb            	// #-5
    1490:	stur	w8, [x29, #-4]
    1494:	b	1544 <deflatePrime+0x110>
    1498:	ldr	x8, [sp, #16]
    149c:	ldr	w9, [x8, #5940]
    14a0:	mov	w10, #0x10                  	// #16
    14a4:	subs	w9, w10, w9
    14a8:	str	w9, [sp, #12]
    14ac:	ldr	w9, [sp, #12]
    14b0:	ldur	w10, [x29, #-20]
    14b4:	cmp	w9, w10
    14b8:	b.le	14c4 <deflatePrime+0x90>
    14bc:	ldur	w8, [x29, #-20]
    14c0:	str	w8, [sp, #12]
    14c4:	ldr	w8, [sp, #24]
    14c8:	ldr	w9, [sp, #12]
    14cc:	mov	w10, #0x1                   	// #1
    14d0:	lsl	w9, w10, w9
    14d4:	subs	w9, w9, #0x1
    14d8:	and	w8, w8, w9
    14dc:	ldr	x11, [sp, #16]
    14e0:	ldr	w9, [x11, #5940]
    14e4:	lsl	w8, w8, w9
    14e8:	and	w8, w8, #0xffff
    14ec:	ldr	x11, [sp, #16]
    14f0:	ldrh	w9, [x11, #5936]
    14f4:	orr	w8, w9, w8
    14f8:	strh	w8, [x11, #5936]
    14fc:	ldr	w8, [sp, #12]
    1500:	ldr	x11, [sp, #16]
    1504:	ldr	w9, [x11, #5940]
    1508:	add	w8, w9, w8
    150c:	str	w8, [x11, #5940]
    1510:	ldr	x0, [sp, #16]
    1514:	bl	0 <_tr_flush_bits>
    1518:	ldr	w8, [sp, #12]
    151c:	ldr	w9, [sp, #24]
    1520:	asr	w8, w9, w8
    1524:	str	w8, [sp, #24]
    1528:	ldr	w8, [sp, #12]
    152c:	ldur	w9, [x29, #-20]
    1530:	subs	w8, w9, w8
    1534:	stur	w8, [x29, #-20]
    1538:	ldur	w8, [x29, #-20]
    153c:	cbnz	w8, 1498 <deflatePrime+0x64>
    1540:	stur	wzr, [x29, #-4]
    1544:	ldur	w0, [x29, #-4]
    1548:	ldp	x29, x30, [sp, #48]
    154c:	add	sp, sp, #0x40
    1550:	ret

0000000000001554 <deflateParams>:
    1554:	sub	sp, sp, #0x50
    1558:	stp	x29, x30, [sp, #64]
    155c:	add	x29, sp, #0x40
    1560:	adrp	x8, 0 <deflateInit_>
    1564:	add	x8, x8, #0x0
    1568:	stur	x0, [x29, #-16]
    156c:	stur	w1, [x29, #-20]
    1570:	stur	w2, [x29, #-24]
    1574:	ldur	x0, [x29, #-16]
    1578:	str	x8, [sp, #8]
    157c:	bl	a20 <deflateStateCheck>
    1580:	cbz	w0, 1590 <deflateParams+0x3c>
    1584:	mov	w8, #0xfffffffe            	// #-2
    1588:	stur	w8, [x29, #-4]
    158c:	b	17c8 <deflateParams+0x274>
    1590:	ldur	x8, [x29, #-16]
    1594:	ldr	x8, [x8, #56]
    1598:	str	x8, [sp, #32]
    159c:	ldur	w9, [x29, #-20]
    15a0:	mov	w10, #0xffffffff            	// #-1
    15a4:	cmp	w9, w10
    15a8:	b.ne	15b4 <deflateParams+0x60>  // b.any
    15ac:	mov	w8, #0x6                   	// #6
    15b0:	stur	w8, [x29, #-20]
    15b4:	ldur	w8, [x29, #-20]
    15b8:	cmp	w8, #0x0
    15bc:	cset	w8, lt  // lt = tstop
    15c0:	tbnz	w8, #0, 15ec <deflateParams+0x98>
    15c4:	ldur	w8, [x29, #-20]
    15c8:	cmp	w8, #0x9
    15cc:	b.gt	15ec <deflateParams+0x98>
    15d0:	ldur	w8, [x29, #-24]
    15d4:	cmp	w8, #0x0
    15d8:	cset	w8, lt  // lt = tstop
    15dc:	tbnz	w8, #0, 15ec <deflateParams+0x98>
    15e0:	ldur	w8, [x29, #-24]
    15e4:	cmp	w8, #0x4
    15e8:	b.le	15f8 <deflateParams+0xa4>
    15ec:	mov	w8, #0xfffffffe            	// #-2
    15f0:	stur	w8, [x29, #-4]
    15f4:	b	17c8 <deflateParams+0x274>
    15f8:	ldr	x8, [sp, #32]
    15fc:	ldrsw	x8, [x8, #196]
    1600:	mov	x9, #0x10                  	// #16
    1604:	mul	x8, x9, x8
    1608:	ldr	x9, [sp, #8]
    160c:	add	x8, x9, x8
    1610:	ldr	x8, [x8, #8]
    1614:	str	x8, [sp, #24]
    1618:	ldur	w10, [x29, #-24]
    161c:	ldr	x8, [sp, #32]
    1620:	ldr	w11, [x8, #200]
    1624:	cmp	w10, w11
    1628:	b.ne	1650 <deflateParams+0xfc>  // b.any
    162c:	ldr	x8, [sp, #24]
    1630:	ldursw	x9, [x29, #-20]
    1634:	mov	x10, #0x10                  	// #16
    1638:	mul	x9, x10, x9
    163c:	ldr	x10, [sp, #8]
    1640:	add	x9, x10, x9
    1644:	ldr	x9, [x9, #8]
    1648:	cmp	x8, x9
    164c:	b.eq	16a0 <deflateParams+0x14c>  // b.none
    1650:	ldr	x8, [sp, #32]
    1654:	ldr	x8, [x8, #5944]
    1658:	cbz	x8, 16a0 <deflateParams+0x14c>
    165c:	ldur	x0, [x29, #-16]
    1660:	mov	w1, #0x5                   	// #5
    1664:	bl	17d8 <deflate>
    1668:	str	w0, [sp, #20]
    166c:	ldr	w8, [sp, #20]
    1670:	mov	w9, #0xfffffffe            	// #-2
    1674:	cmp	w8, w9
    1678:	b.ne	1688 <deflateParams+0x134>  // b.any
    167c:	ldr	w8, [sp, #20]
    1680:	stur	w8, [x29, #-4]
    1684:	b	17c8 <deflateParams+0x274>
    1688:	ldur	x8, [x29, #-16]
    168c:	ldr	w9, [x8, #32]
    1690:	cbnz	w9, 16a0 <deflateParams+0x14c>
    1694:	mov	w8, #0xfffffffb            	// #-5
    1698:	stur	w8, [x29, #-4]
    169c:	b	17c8 <deflateParams+0x274>
    16a0:	ldr	x8, [sp, #32]
    16a4:	ldr	w9, [x8, #196]
    16a8:	ldur	w10, [x29, #-20]
    16ac:	cmp	w9, w10
    16b0:	b.eq	17b8 <deflateParams+0x264>  // b.none
    16b4:	ldr	x8, [sp, #32]
    16b8:	ldr	w9, [x8, #196]
    16bc:	cbnz	w9, 1748 <deflateParams+0x1f4>
    16c0:	ldr	x8, [sp, #32]
    16c4:	ldr	w9, [x8, #5928]
    16c8:	cbz	w9, 1748 <deflateParams+0x1f4>
    16cc:	ldr	x8, [sp, #32]
    16d0:	ldr	w9, [x8, #5928]
    16d4:	cmp	w9, #0x1
    16d8:	b.ne	16e8 <deflateParams+0x194>  // b.any
    16dc:	ldr	x0, [sp, #32]
    16e0:	bl	2b44 <slide_hash>
    16e4:	b	1718 <deflateParams+0x1c4>
    16e8:	ldr	x8, [sp, #32]
    16ec:	ldr	x8, [x8, #120]
    16f0:	ldr	x9, [sp, #32]
    16f4:	ldr	w10, [x9, #132]
    16f8:	subs	w10, w10, #0x1
    16fc:	mov	w9, w10
    1700:	ubfx	x9, x9, #0, #32
    1704:	mov	x11, #0x2                   	// #2
    1708:	mul	x9, x11, x9
    170c:	add	x8, x8, x9
    1710:	mov	w10, #0x0                   	// #0
    1714:	strh	w10, [x8]
    1718:	ldr	x8, [sp, #32]
    171c:	ldr	x0, [x8, #120]
    1720:	ldr	x8, [sp, #32]
    1724:	ldr	w9, [x8, #132]
    1728:	subs	w9, w9, #0x1
    172c:	mov	w10, #0x2                   	// #2
    1730:	umull	x2, w9, w10
    1734:	mov	w9, wzr
    1738:	mov	w1, w9
    173c:	bl	0 <memset>
    1740:	ldr	x8, [sp, #32]
    1744:	str	wzr, [x8, #5928]
    1748:	ldur	w8, [x29, #-20]
    174c:	ldr	x9, [sp, #32]
    1750:	str	w8, [x9, #196]
    1754:	ldursw	x9, [x29, #-20]
    1758:	mov	x10, #0x10                  	// #16
    175c:	mul	x9, x10, x9
    1760:	ldr	x11, [sp, #8]
    1764:	add	x9, x11, x9
    1768:	ldrh	w8, [x9, #2]
    176c:	ldr	x9, [sp, #32]
    1770:	str	w8, [x9, #192]
    1774:	ldursw	x9, [x29, #-20]
    1778:	mul	x9, x10, x9
    177c:	ldrh	w8, [x11, x9]
    1780:	ldr	x9, [sp, #32]
    1784:	str	w8, [x9, #204]
    1788:	ldursw	x9, [x29, #-20]
    178c:	mul	x9, x10, x9
    1790:	add	x9, x11, x9
    1794:	ldrh	w8, [x9, #4]
    1798:	ldr	x9, [sp, #32]
    179c:	str	w8, [x9, #208]
    17a0:	ldursw	x9, [x29, #-20]
    17a4:	mul	x9, x10, x9
    17a8:	add	x9, x11, x9
    17ac:	ldrh	w8, [x9, #6]
    17b0:	ldr	x9, [sp, #32]
    17b4:	str	w8, [x9, #188]
    17b8:	ldur	w8, [x29, #-24]
    17bc:	ldr	x9, [sp, #32]
    17c0:	str	w8, [x9, #200]
    17c4:	stur	wzr, [x29, #-4]
    17c8:	ldur	w0, [x29, #-4]
    17cc:	ldp	x29, x30, [sp, #64]
    17d0:	add	sp, sp, #0x50
    17d4:	ret

00000000000017d8 <deflate>:
    17d8:	sub	sp, sp, #0x90
    17dc:	stp	x29, x30, [sp, #128]
    17e0:	add	x29, sp, #0x80
    17e4:	adrp	x8, 0 <z_errmsg>
    17e8:	add	x8, x8, #0x0
    17ec:	stur	x0, [x29, #-16]
    17f0:	stur	w1, [x29, #-20]
    17f4:	ldur	x0, [x29, #-16]
    17f8:	str	x8, [sp, #32]
    17fc:	bl	a20 <deflateStateCheck>
    1800:	cbnz	w0, 1820 <deflate+0x48>
    1804:	ldur	w8, [x29, #-20]
    1808:	cmp	w8, #0x5
    180c:	b.gt	1820 <deflate+0x48>
    1810:	ldur	w8, [x29, #-20]
    1814:	cmp	w8, #0x0
    1818:	cset	w8, ge  // ge = tcont
    181c:	tbnz	w8, #0, 182c <deflate+0x54>
    1820:	mov	w8, #0xfffffffe            	// #-2
    1824:	stur	w8, [x29, #-4]
    1828:	b	2b34 <deflate+0x135c>
    182c:	ldur	x8, [x29, #-16]
    1830:	ldr	x8, [x8, #56]
    1834:	stur	x8, [x29, #-32]
    1838:	ldur	x8, [x29, #-16]
    183c:	ldr	x8, [x8, #24]
    1840:	cbz	x8, 1878 <deflate+0xa0>
    1844:	ldur	x8, [x29, #-16]
    1848:	ldr	w9, [x8, #8]
    184c:	cbz	w9, 185c <deflate+0x84>
    1850:	ldur	x8, [x29, #-16]
    1854:	ldr	x8, [x8]
    1858:	cbz	x8, 1878 <deflate+0xa0>
    185c:	ldur	x8, [x29, #-32]
    1860:	ldr	w9, [x8, #8]
    1864:	cmp	w9, #0x29a
    1868:	b.ne	1894 <deflate+0xbc>  // b.any
    186c:	ldur	w8, [x29, #-20]
    1870:	cmp	w8, #0x4
    1874:	b.eq	1894 <deflate+0xbc>  // b.none
    1878:	ldr	x8, [sp, #32]
    187c:	ldr	x9, [x8, #32]
    1880:	ldur	x10, [x29, #-16]
    1884:	str	x9, [x10, #48]
    1888:	mov	w11, #0xfffffffe            	// #-2
    188c:	stur	w11, [x29, #-4]
    1890:	b	2b34 <deflate+0x135c>
    1894:	ldur	x8, [x29, #-16]
    1898:	ldr	w9, [x8, #32]
    189c:	cbnz	w9, 18bc <deflate+0xe4>
    18a0:	ldr	x8, [sp, #32]
    18a4:	ldr	x9, [x8, #56]
    18a8:	ldur	x10, [x29, #-16]
    18ac:	str	x9, [x10, #48]
    18b0:	mov	w11, #0xfffffffb            	// #-5
    18b4:	stur	w11, [x29, #-4]
    18b8:	b	2b34 <deflate+0x135c>
    18bc:	ldur	x8, [x29, #-32]
    18c0:	ldr	w9, [x8, #76]
    18c4:	stur	w9, [x29, #-24]
    18c8:	ldur	w9, [x29, #-20]
    18cc:	ldur	x8, [x29, #-32]
    18d0:	str	w9, [x8, #76]
    18d4:	ldur	x8, [x29, #-32]
    18d8:	ldr	x8, [x8, #40]
    18dc:	cbz	x8, 190c <deflate+0x134>
    18e0:	ldur	x0, [x29, #-16]
    18e4:	bl	2f18 <flush_pending>
    18e8:	ldur	x8, [x29, #-16]
    18ec:	ldr	w9, [x8, #32]
    18f0:	cbnz	w9, 1908 <deflate+0x130>
    18f4:	ldur	x8, [x29, #-32]
    18f8:	mov	w9, #0xffffffff            	// #-1
    18fc:	str	w9, [x8, #76]
    1900:	stur	wzr, [x29, #-4]
    1904:	b	2b34 <deflate+0x135c>
    1908:	b	1984 <deflate+0x1ac>
    190c:	ldur	x8, [x29, #-16]
    1910:	ldr	w9, [x8, #8]
    1914:	cbnz	w9, 1984 <deflate+0x1ac>
    1918:	ldur	w8, [x29, #-20]
    191c:	mov	w9, #0x2                   	// #2
    1920:	mul	w8, w8, w9
    1924:	ldur	w10, [x29, #-20]
    1928:	mov	w11, #0x9                   	// #9
    192c:	mov	w12, wzr
    1930:	cmp	w10, #0x4
    1934:	csel	w10, w11, w12, gt
    1938:	subs	w8, w8, w10
    193c:	ldur	w10, [x29, #-24]
    1940:	mul	w9, w10, w9
    1944:	ldur	w10, [x29, #-24]
    1948:	cmp	w10, #0x4
    194c:	csel	w10, w11, w12, gt
    1950:	subs	w9, w9, w10
    1954:	cmp	w8, w9
    1958:	b.gt	1984 <deflate+0x1ac>
    195c:	ldur	w8, [x29, #-20]
    1960:	cmp	w8, #0x4
    1964:	b.eq	1984 <deflate+0x1ac>  // b.none
    1968:	ldr	x8, [sp, #32]
    196c:	ldr	x9, [x8, #56]
    1970:	ldur	x10, [x29, #-16]
    1974:	str	x9, [x10, #48]
    1978:	mov	w11, #0xfffffffb            	// #-5
    197c:	stur	w11, [x29, #-4]
    1980:	b	2b34 <deflate+0x135c>
    1984:	ldur	x8, [x29, #-32]
    1988:	ldr	w9, [x8, #8]
    198c:	cmp	w9, #0x29a
    1990:	b.ne	19bc <deflate+0x1e4>  // b.any
    1994:	ldur	x8, [x29, #-16]
    1998:	ldr	w9, [x8, #8]
    199c:	cbz	w9, 19bc <deflate+0x1e4>
    19a0:	ldr	x8, [sp, #32]
    19a4:	ldr	x9, [x8, #56]
    19a8:	ldur	x10, [x29, #-16]
    19ac:	str	x9, [x10, #48]
    19b0:	mov	w11, #0xfffffffb            	// #-5
    19b4:	stur	w11, [x29, #-4]
    19b8:	b	2b34 <deflate+0x135c>
    19bc:	ldur	x8, [x29, #-32]
    19c0:	ldr	w9, [x8, #8]
    19c4:	cmp	w9, #0x2a
    19c8:	b.ne	1b38 <deflate+0x360>  // b.any
    19cc:	ldur	x8, [x29, #-32]
    19d0:	ldr	w9, [x8, #84]
    19d4:	subs	w9, w9, #0x8
    19d8:	lsl	w9, w9, #4
    19dc:	add	w9, w9, #0x8
    19e0:	lsl	w9, w9, #8
    19e4:	stur	w9, [x29, #-36]
    19e8:	ldur	x8, [x29, #-32]
    19ec:	ldr	w9, [x8, #200]
    19f0:	cmp	w9, #0x2
    19f4:	b.ge	1a08 <deflate+0x230>  // b.tcont
    19f8:	ldur	x8, [x29, #-32]
    19fc:	ldr	w9, [x8, #196]
    1a00:	cmp	w9, #0x2
    1a04:	b.ge	1a10 <deflate+0x238>  // b.tcont
    1a08:	stur	wzr, [x29, #-40]
    1a0c:	b	1a50 <deflate+0x278>
    1a10:	ldur	x8, [x29, #-32]
    1a14:	ldr	w9, [x8, #196]
    1a18:	cmp	w9, #0x6
    1a1c:	b.ge	1a2c <deflate+0x254>  // b.tcont
    1a20:	mov	w8, #0x1                   	// #1
    1a24:	stur	w8, [x29, #-40]
    1a28:	b	1a50 <deflate+0x278>
    1a2c:	ldur	x8, [x29, #-32]
    1a30:	ldr	w9, [x8, #196]
    1a34:	cmp	w9, #0x6
    1a38:	b.ne	1a48 <deflate+0x270>  // b.any
    1a3c:	mov	w8, #0x2                   	// #2
    1a40:	stur	w8, [x29, #-40]
    1a44:	b	1a50 <deflate+0x278>
    1a48:	mov	w8, #0x3                   	// #3
    1a4c:	stur	w8, [x29, #-40]
    1a50:	ldur	w8, [x29, #-40]
    1a54:	ldur	w9, [x29, #-36]
    1a58:	orr	w8, w9, w8, lsl #6
    1a5c:	stur	w8, [x29, #-36]
    1a60:	ldur	x10, [x29, #-32]
    1a64:	ldr	w8, [x10, #172]
    1a68:	cbz	w8, 1a78 <deflate+0x2a0>
    1a6c:	ldur	w8, [x29, #-36]
    1a70:	orr	w8, w8, #0x20
    1a74:	stur	w8, [x29, #-36]
    1a78:	ldur	w8, [x29, #-36]
    1a7c:	mov	w9, #0x1f                  	// #31
    1a80:	udiv	w10, w8, w9
    1a84:	mul	w10, w10, w9
    1a88:	subs	w8, w8, w10
    1a8c:	subs	w8, w9, w8
    1a90:	ldur	w9, [x29, #-36]
    1a94:	add	w8, w9, w8
    1a98:	stur	w8, [x29, #-36]
    1a9c:	ldur	x0, [x29, #-32]
    1aa0:	ldur	w1, [x29, #-36]
    1aa4:	bl	302c <putShortMSB>
    1aa8:	ldur	x11, [x29, #-32]
    1aac:	ldr	w8, [x11, #172]
    1ab0:	cbz	w8, 1ae4 <deflate+0x30c>
    1ab4:	ldur	x0, [x29, #-32]
    1ab8:	ldur	x8, [x29, #-16]
    1abc:	ldr	x8, [x8, #96]
    1ac0:	lsr	x8, x8, #16
    1ac4:	mov	w1, w8
    1ac8:	bl	302c <putShortMSB>
    1acc:	ldur	x0, [x29, #-32]
    1ad0:	ldur	x9, [x29, #-16]
    1ad4:	ldr	x9, [x9, #96]
    1ad8:	and	x9, x9, #0xffff
    1adc:	mov	w1, w9
    1ae0:	bl	302c <putShortMSB>
    1ae4:	mov	x8, xzr
    1ae8:	mov	x0, x8
    1aec:	mov	x1, x8
    1af0:	mov	w9, wzr
    1af4:	mov	w2, w9
    1af8:	bl	0 <adler32>
    1afc:	ldur	x8, [x29, #-16]
    1b00:	str	x0, [x8, #96]
    1b04:	ldur	x8, [x29, #-32]
    1b08:	mov	w9, #0x71                  	// #113
    1b0c:	str	w9, [x8, #8]
    1b10:	ldur	x0, [x29, #-16]
    1b14:	bl	2f18 <flush_pending>
    1b18:	ldur	x8, [x29, #-32]
    1b1c:	ldr	x8, [x8, #40]
    1b20:	cbz	x8, 1b38 <deflate+0x360>
    1b24:	ldur	x8, [x29, #-32]
    1b28:	mov	w9, #0xffffffff            	// #-1
    1b2c:	str	w9, [x8, #76]
    1b30:	stur	wzr, [x29, #-4]
    1b34:	b	2b34 <deflate+0x135c>
    1b38:	ldur	x8, [x29, #-32]
    1b3c:	ldr	w9, [x8, #8]
    1b40:	cmp	w9, #0x39
    1b44:	b.ne	2050 <deflate+0x878>  // b.any
    1b48:	mov	x8, xzr
    1b4c:	mov	x0, x8
    1b50:	mov	x1, x8
    1b54:	mov	w9, wzr
    1b58:	mov	w2, w9
    1b5c:	bl	0 <crc32>
    1b60:	ldur	x8, [x29, #-16]
    1b64:	str	x0, [x8, #96]
    1b68:	ldur	x8, [x29, #-32]
    1b6c:	ldr	x8, [x8, #16]
    1b70:	ldur	x10, [x29, #-32]
    1b74:	ldr	x11, [x10, #40]
    1b78:	add	x12, x11, #0x1
    1b7c:	str	x12, [x10, #40]
    1b80:	add	x8, x8, x11
    1b84:	mov	w9, #0x1f                  	// #31
    1b88:	strb	w9, [x8]
    1b8c:	ldur	x8, [x29, #-32]
    1b90:	ldr	x8, [x8, #16]
    1b94:	ldur	x10, [x29, #-32]
    1b98:	ldr	x11, [x10, #40]
    1b9c:	add	x12, x11, #0x1
    1ba0:	str	x12, [x10, #40]
    1ba4:	add	x8, x8, x11
    1ba8:	mov	w9, #0x8b                  	// #139
    1bac:	strb	w9, [x8]
    1bb0:	ldur	x8, [x29, #-32]
    1bb4:	ldr	x8, [x8, #16]
    1bb8:	ldur	x10, [x29, #-32]
    1bbc:	ldr	x11, [x10, #40]
    1bc0:	add	x12, x11, #0x1
    1bc4:	str	x12, [x10, #40]
    1bc8:	add	x8, x8, x11
    1bcc:	mov	w9, #0x8                   	// #8
    1bd0:	strb	w9, [x8]
    1bd4:	ldur	x8, [x29, #-32]
    1bd8:	ldr	x8, [x8, #56]
    1bdc:	cbnz	x8, 1d64 <deflate+0x58c>
    1be0:	ldur	x8, [x29, #-32]
    1be4:	ldr	x8, [x8, #16]
    1be8:	ldur	x9, [x29, #-32]
    1bec:	ldr	x10, [x9, #40]
    1bf0:	add	x11, x10, #0x1
    1bf4:	str	x11, [x9, #40]
    1bf8:	add	x8, x8, x10
    1bfc:	mov	w12, #0x0                   	// #0
    1c00:	strb	w12, [x8]
    1c04:	ldur	x8, [x29, #-32]
    1c08:	ldr	x8, [x8, #16]
    1c0c:	ldur	x9, [x29, #-32]
    1c10:	ldr	x10, [x9, #40]
    1c14:	add	x11, x10, #0x1
    1c18:	str	x11, [x9, #40]
    1c1c:	add	x8, x8, x10
    1c20:	strb	w12, [x8]
    1c24:	ldur	x8, [x29, #-32]
    1c28:	ldr	x8, [x8, #16]
    1c2c:	ldur	x9, [x29, #-32]
    1c30:	ldr	x10, [x9, #40]
    1c34:	add	x11, x10, #0x1
    1c38:	str	x11, [x9, #40]
    1c3c:	add	x8, x8, x10
    1c40:	strb	w12, [x8]
    1c44:	ldur	x8, [x29, #-32]
    1c48:	ldr	x8, [x8, #16]
    1c4c:	ldur	x9, [x29, #-32]
    1c50:	ldr	x10, [x9, #40]
    1c54:	add	x11, x10, #0x1
    1c58:	str	x11, [x9, #40]
    1c5c:	add	x8, x8, x10
    1c60:	strb	w12, [x8]
    1c64:	ldur	x8, [x29, #-32]
    1c68:	ldr	x8, [x8, #16]
    1c6c:	ldur	x9, [x29, #-32]
    1c70:	ldr	x10, [x9, #40]
    1c74:	add	x11, x10, #0x1
    1c78:	str	x11, [x9, #40]
    1c7c:	add	x8, x8, x10
    1c80:	strb	w12, [x8]
    1c84:	ldur	x8, [x29, #-32]
    1c88:	ldr	w12, [x8, #196]
    1c8c:	cmp	w12, #0x9
    1c90:	b.ne	1ca0 <deflate+0x4c8>  // b.any
    1c94:	mov	w8, #0x2                   	// #2
    1c98:	str	w8, [sp, #28]
    1c9c:	b	1ce4 <deflate+0x50c>
    1ca0:	ldur	x8, [x29, #-32]
    1ca4:	ldr	w9, [x8, #200]
    1ca8:	mov	w10, #0x1                   	// #1
    1cac:	cmp	w9, #0x2
    1cb0:	str	w10, [sp, #24]
    1cb4:	b.ge	1ccc <deflate+0x4f4>  // b.tcont
    1cb8:	ldur	x8, [x29, #-32]
    1cbc:	ldr	w9, [x8, #196]
    1cc0:	cmp	w9, #0x2
    1cc4:	cset	w9, lt  // lt = tstop
    1cc8:	str	w9, [sp, #24]
    1ccc:	ldr	w8, [sp, #24]
    1cd0:	mov	w9, #0x4                   	// #4
    1cd4:	mov	w10, wzr
    1cd8:	tst	w8, #0x1
    1cdc:	csel	w8, w9, w10, ne  // ne = any
    1ce0:	str	w8, [sp, #28]
    1ce4:	ldr	w8, [sp, #28]
    1ce8:	ldur	x9, [x29, #-32]
    1cec:	ldr	x9, [x9, #16]
    1cf0:	ldur	x10, [x29, #-32]
    1cf4:	ldr	x11, [x10, #40]
    1cf8:	add	x12, x11, #0x1
    1cfc:	str	x12, [x10, #40]
    1d00:	add	x9, x9, x11
    1d04:	strb	w8, [x9]
    1d08:	ldur	x9, [x29, #-32]
    1d0c:	ldr	x9, [x9, #16]
    1d10:	ldur	x10, [x29, #-32]
    1d14:	ldr	x11, [x10, #40]
    1d18:	add	x12, x11, #0x1
    1d1c:	str	x12, [x10, #40]
    1d20:	add	x9, x9, x11
    1d24:	mov	w8, #0x3                   	// #3
    1d28:	strb	w8, [x9]
    1d2c:	ldur	x9, [x29, #-32]
    1d30:	mov	w8, #0x71                  	// #113
    1d34:	str	w8, [x9, #8]
    1d38:	ldur	x0, [x29, #-16]
    1d3c:	bl	2f18 <flush_pending>
    1d40:	ldur	x9, [x29, #-32]
    1d44:	ldr	x9, [x9, #40]
    1d48:	cbz	x9, 1d60 <deflate+0x588>
    1d4c:	ldur	x8, [x29, #-32]
    1d50:	mov	w9, #0xffffffff            	// #-1
    1d54:	str	w9, [x8, #76]
    1d58:	stur	wzr, [x29, #-4]
    1d5c:	b	2b34 <deflate+0x135c>
    1d60:	b	2050 <deflate+0x878>
    1d64:	ldur	x8, [x29, #-32]
    1d68:	ldr	x8, [x8, #56]
    1d6c:	ldr	w9, [x8]
    1d70:	mov	w10, wzr
    1d74:	mov	w11, #0x1                   	// #1
    1d78:	cmp	w9, #0x0
    1d7c:	csel	w9, w11, w10, ne  // ne = any
    1d80:	ldur	x8, [x29, #-32]
    1d84:	ldr	x8, [x8, #56]
    1d88:	ldr	w11, [x8, #68]
    1d8c:	mov	w12, #0x2                   	// #2
    1d90:	cmp	w11, #0x0
    1d94:	csel	w11, w12, w10, ne  // ne = any
    1d98:	add	w9, w9, w11
    1d9c:	ldur	x8, [x29, #-32]
    1da0:	ldr	x8, [x8, #56]
    1da4:	ldr	x8, [x8, #24]
    1da8:	mov	w11, #0x4                   	// #4
    1dac:	cmp	x8, #0x0
    1db0:	csel	w11, w10, w11, eq  // eq = none
    1db4:	add	w9, w9, w11
    1db8:	ldur	x8, [x29, #-32]
    1dbc:	ldr	x8, [x8, #56]
    1dc0:	ldr	x8, [x8, #40]
    1dc4:	mov	w11, #0x8                   	// #8
    1dc8:	cmp	x8, #0x0
    1dcc:	csel	w11, w10, w11, eq  // eq = none
    1dd0:	add	w9, w9, w11
    1dd4:	ldur	x8, [x29, #-32]
    1dd8:	ldr	x8, [x8, #56]
    1ddc:	ldr	x8, [x8, #56]
    1de0:	mov	w11, #0x10                  	// #16
    1de4:	cmp	x8, #0x0
    1de8:	csel	w10, w10, w11, eq  // eq = none
    1dec:	add	w9, w9, w10
    1df0:	ldur	x8, [x29, #-32]
    1df4:	ldr	x8, [x8, #16]
    1df8:	ldur	x13, [x29, #-32]
    1dfc:	ldr	x14, [x13, #40]
    1e00:	add	x15, x14, #0x1
    1e04:	str	x15, [x13, #40]
    1e08:	add	x8, x8, x14
    1e0c:	strb	w9, [x8]
    1e10:	ldur	x8, [x29, #-32]
    1e14:	ldr	x8, [x8, #56]
    1e18:	ldr	x8, [x8, #8]
    1e1c:	and	x8, x8, #0xff
    1e20:	ldur	x13, [x29, #-32]
    1e24:	ldr	x13, [x13, #16]
    1e28:	ldur	x14, [x29, #-32]
    1e2c:	ldr	x15, [x14, #40]
    1e30:	add	x16, x15, #0x1
    1e34:	str	x16, [x14, #40]
    1e38:	add	x13, x13, x15
    1e3c:	strb	w8, [x13]
    1e40:	ldur	x13, [x29, #-32]
    1e44:	ldr	x13, [x13, #56]
    1e48:	ldr	x13, [x13, #8]
    1e4c:	lsr	x13, x13, #8
    1e50:	and	x13, x13, #0xff
    1e54:	ldur	x14, [x29, #-32]
    1e58:	ldr	x14, [x14, #16]
    1e5c:	ldur	x15, [x29, #-32]
    1e60:	ldr	x16, [x15, #40]
    1e64:	add	x17, x16, #0x1
    1e68:	str	x17, [x15, #40]
    1e6c:	add	x14, x14, x16
    1e70:	strb	w13, [x14]
    1e74:	ldur	x14, [x29, #-32]
    1e78:	ldr	x14, [x14, #56]
    1e7c:	ldr	x14, [x14, #8]
    1e80:	lsr	x14, x14, #16
    1e84:	and	x14, x14, #0xff
    1e88:	ldur	x15, [x29, #-32]
    1e8c:	ldr	x15, [x15, #16]
    1e90:	ldur	x16, [x29, #-32]
    1e94:	ldr	x17, [x16, #40]
    1e98:	add	x18, x17, #0x1
    1e9c:	str	x18, [x16, #40]
    1ea0:	add	x15, x15, x17
    1ea4:	strb	w14, [x15]
    1ea8:	ldur	x15, [x29, #-32]
    1eac:	ldr	x15, [x15, #56]
    1eb0:	ldr	x15, [x15, #8]
    1eb4:	lsr	x15, x15, #24
    1eb8:	and	x15, x15, #0xff
    1ebc:	ldur	x16, [x29, #-32]
    1ec0:	ldr	x16, [x16, #16]
    1ec4:	ldur	x17, [x29, #-32]
    1ec8:	ldr	x18, [x17, #40]
    1ecc:	add	x0, x18, #0x1
    1ed0:	str	x0, [x17, #40]
    1ed4:	add	x16, x16, x18
    1ed8:	strb	w15, [x16]
    1edc:	ldur	x16, [x29, #-32]
    1ee0:	ldr	w8, [x16, #196]
    1ee4:	cmp	w8, #0x9
    1ee8:	b.ne	1ef8 <deflate+0x720>  // b.any
    1eec:	mov	w8, #0x2                   	// #2
    1ef0:	str	w8, [sp, #20]
    1ef4:	b	1f3c <deflate+0x764>
    1ef8:	ldur	x8, [x29, #-32]
    1efc:	ldr	w9, [x8, #200]
    1f00:	mov	w10, #0x1                   	// #1
    1f04:	cmp	w9, #0x2
    1f08:	str	w10, [sp, #16]
    1f0c:	b.ge	1f24 <deflate+0x74c>  // b.tcont
    1f10:	ldur	x8, [x29, #-32]
    1f14:	ldr	w9, [x8, #196]
    1f18:	cmp	w9, #0x2
    1f1c:	cset	w9, lt  // lt = tstop
    1f20:	str	w9, [sp, #16]
    1f24:	ldr	w8, [sp, #16]
    1f28:	mov	w9, #0x4                   	// #4
    1f2c:	mov	w10, wzr
    1f30:	tst	w8, #0x1
    1f34:	csel	w8, w9, w10, ne  // ne = any
    1f38:	str	w8, [sp, #20]
    1f3c:	ldr	w8, [sp, #20]
    1f40:	ldur	x9, [x29, #-32]
    1f44:	ldr	x9, [x9, #16]
    1f48:	ldur	x10, [x29, #-32]
    1f4c:	ldr	x11, [x10, #40]
    1f50:	add	x12, x11, #0x1
    1f54:	str	x12, [x10, #40]
    1f58:	add	x9, x9, x11
    1f5c:	strb	w8, [x9]
    1f60:	ldur	x9, [x29, #-32]
    1f64:	ldr	x9, [x9, #56]
    1f68:	ldr	w8, [x9, #20]
    1f6c:	and	w8, w8, #0xff
    1f70:	ldur	x9, [x29, #-32]
    1f74:	ldr	x9, [x9, #16]
    1f78:	ldur	x10, [x29, #-32]
    1f7c:	ldr	x11, [x10, #40]
    1f80:	add	x12, x11, #0x1
    1f84:	str	x12, [x10, #40]
    1f88:	add	x9, x9, x11
    1f8c:	strb	w8, [x9]
    1f90:	ldur	x9, [x29, #-32]
    1f94:	ldr	x9, [x9, #56]
    1f98:	ldr	x9, [x9, #24]
    1f9c:	cbz	x9, 2004 <deflate+0x82c>
    1fa0:	ldur	x8, [x29, #-32]
    1fa4:	ldr	x8, [x8, #56]
    1fa8:	ldr	w9, [x8, #32]
    1fac:	and	w9, w9, #0xff
    1fb0:	ldur	x8, [x29, #-32]
    1fb4:	ldr	x8, [x8, #16]
    1fb8:	ldur	x10, [x29, #-32]
    1fbc:	ldr	x11, [x10, #40]
    1fc0:	add	x12, x11, #0x1
    1fc4:	str	x12, [x10, #40]
    1fc8:	add	x8, x8, x11
    1fcc:	strb	w9, [x8]
    1fd0:	ldur	x8, [x29, #-32]
    1fd4:	ldr	x8, [x8, #56]
    1fd8:	ldr	w9, [x8, #32]
    1fdc:	lsr	w9, w9, #8
    1fe0:	and	w9, w9, #0xff
    1fe4:	ldur	x8, [x29, #-32]
    1fe8:	ldr	x8, [x8, #16]
    1fec:	ldur	x10, [x29, #-32]
    1ff0:	ldr	x11, [x10, #40]
    1ff4:	add	x12, x11, #0x1
    1ff8:	str	x12, [x10, #40]
    1ffc:	add	x8, x8, x11
    2000:	strb	w9, [x8]
    2004:	ldur	x8, [x29, #-32]
    2008:	ldr	x8, [x8, #56]
    200c:	ldr	w9, [x8, #68]
    2010:	cbz	w9, 203c <deflate+0x864>
    2014:	ldur	x8, [x29, #-16]
    2018:	ldr	x0, [x8, #96]
    201c:	ldur	x8, [x29, #-32]
    2020:	ldr	x1, [x8, #16]
    2024:	ldur	x8, [x29, #-32]
    2028:	ldr	x8, [x8, #40]
    202c:	mov	w2, w8
    2030:	bl	0 <crc32>
    2034:	ldur	x9, [x29, #-16]
    2038:	str	x0, [x9, #96]
    203c:	ldur	x8, [x29, #-32]
    2040:	str	xzr, [x8, #64]
    2044:	ldur	x8, [x29, #-32]
    2048:	mov	w9, #0x45                  	// #69
    204c:	str	w9, [x8, #8]
    2050:	ldur	x8, [x29, #-32]
    2054:	ldr	w9, [x8, #8]
    2058:	cmp	w9, #0x45
    205c:	b.ne	229c <deflate+0xac4>  // b.any
    2060:	ldur	x8, [x29, #-32]
    2064:	ldr	x8, [x8, #56]
    2068:	ldr	x8, [x8, #24]
    206c:	cbz	x8, 2290 <deflate+0xab8>
    2070:	ldur	x8, [x29, #-32]
    2074:	ldr	x8, [x8, #40]
    2078:	stur	x8, [x29, #-48]
    207c:	ldur	x8, [x29, #-32]
    2080:	ldr	x8, [x8, #56]
    2084:	ldr	w9, [x8, #32]
    2088:	and	w9, w9, #0xffff
    208c:	mov	w8, w9
    2090:	ubfx	x8, x8, #0, #32
    2094:	ldur	x10, [x29, #-32]
    2098:	ldr	x10, [x10, #64]
    209c:	subs	x8, x8, x10
    20a0:	stur	w8, [x29, #-52]
    20a4:	ldur	x8, [x29, #-32]
    20a8:	ldr	x8, [x8, #40]
    20ac:	ldur	w9, [x29, #-52]
    20b0:	mov	w10, w9
    20b4:	add	x8, x8, x10
    20b8:	ldur	x10, [x29, #-32]
    20bc:	ldr	x10, [x10, #24]
    20c0:	cmp	x8, x10
    20c4:	b.ls	21dc <deflate+0xa04>  // b.plast
    20c8:	ldur	x8, [x29, #-32]
    20cc:	ldr	x8, [x8, #24]
    20d0:	ldur	x9, [x29, #-32]
    20d4:	ldr	x9, [x9, #40]
    20d8:	subs	x8, x8, x9
    20dc:	stur	w8, [x29, #-56]
    20e0:	ldur	x9, [x29, #-32]
    20e4:	ldr	x9, [x9, #16]
    20e8:	ldur	x10, [x29, #-32]
    20ec:	ldr	x10, [x10, #40]
    20f0:	add	x0, x9, x10
    20f4:	ldur	x9, [x29, #-32]
    20f8:	ldr	x9, [x9, #56]
    20fc:	ldr	x9, [x9, #24]
    2100:	ldur	x10, [x29, #-32]
    2104:	ldr	x10, [x10, #64]
    2108:	add	x1, x9, x10
    210c:	ldur	w8, [x29, #-56]
    2110:	mov	w2, w8
    2114:	bl	0 <memcpy>
    2118:	ldur	x9, [x29, #-32]
    211c:	ldr	x9, [x9, #24]
    2120:	ldur	x10, [x29, #-32]
    2124:	str	x9, [x10, #40]
    2128:	ldur	x8, [x29, #-32]
    212c:	ldr	x8, [x8, #56]
    2130:	ldr	w9, [x8, #68]
    2134:	cbz	w9, 2184 <deflate+0x9ac>
    2138:	ldur	x8, [x29, #-32]
    213c:	ldr	x8, [x8, #40]
    2140:	ldur	x9, [x29, #-48]
    2144:	cmp	x8, x9
    2148:	b.ls	2184 <deflate+0x9ac>  // b.plast
    214c:	ldur	x8, [x29, #-16]
    2150:	ldr	x0, [x8, #96]
    2154:	ldur	x8, [x29, #-32]
    2158:	ldr	x8, [x8, #16]
    215c:	ldur	x9, [x29, #-48]
    2160:	add	x1, x8, x9
    2164:	ldur	x8, [x29, #-32]
    2168:	ldr	x8, [x8, #40]
    216c:	ldur	x9, [x29, #-48]
    2170:	subs	x8, x8, x9
    2174:	mov	w2, w8
    2178:	bl	0 <crc32>
    217c:	ldur	x9, [x29, #-16]
    2180:	str	x0, [x9, #96]
    2184:	ldur	w8, [x29, #-56]
    2188:	mov	w9, w8
    218c:	ldur	x10, [x29, #-32]
    2190:	ldr	x11, [x10, #64]
    2194:	add	x9, x11, x9
    2198:	str	x9, [x10, #64]
    219c:	ldur	x0, [x29, #-16]
    21a0:	bl	2f18 <flush_pending>
    21a4:	ldur	x9, [x29, #-32]
    21a8:	ldr	x9, [x9, #40]
    21ac:	cbz	x9, 21c4 <deflate+0x9ec>
    21b0:	ldur	x8, [x29, #-32]
    21b4:	mov	w9, #0xffffffff            	// #-1
    21b8:	str	w9, [x8, #76]
    21bc:	stur	wzr, [x29, #-4]
    21c0:	b	2b34 <deflate+0x135c>
    21c4:	stur	xzr, [x29, #-48]
    21c8:	ldur	w8, [x29, #-56]
    21cc:	ldur	w9, [x29, #-52]
    21d0:	subs	w8, w9, w8
    21d4:	stur	w8, [x29, #-52]
    21d8:	b	20a4 <deflate+0x8cc>
    21dc:	ldur	x8, [x29, #-32]
    21e0:	ldr	x8, [x8, #16]
    21e4:	ldur	x9, [x29, #-32]
    21e8:	ldr	x9, [x9, #40]
    21ec:	add	x0, x8, x9
    21f0:	ldur	x8, [x29, #-32]
    21f4:	ldr	x8, [x8, #56]
    21f8:	ldr	x8, [x8, #24]
    21fc:	ldur	x9, [x29, #-32]
    2200:	ldr	x9, [x9, #64]
    2204:	add	x1, x8, x9
    2208:	ldur	w10, [x29, #-52]
    220c:	mov	w2, w10
    2210:	bl	0 <memcpy>
    2214:	ldur	w10, [x29, #-52]
    2218:	mov	w8, w10
    221c:	ldur	x9, [x29, #-32]
    2220:	ldr	x11, [x9, #40]
    2224:	add	x8, x11, x8
    2228:	str	x8, [x9, #40]
    222c:	ldur	x8, [x29, #-32]
    2230:	ldr	x8, [x8, #56]
    2234:	ldr	w9, [x8, #68]
    2238:	cbz	w9, 2288 <deflate+0xab0>
    223c:	ldur	x8, [x29, #-32]
    2240:	ldr	x8, [x8, #40]
    2244:	ldur	x9, [x29, #-48]
    2248:	cmp	x8, x9
    224c:	b.ls	2288 <deflate+0xab0>  // b.plast
    2250:	ldur	x8, [x29, #-16]
    2254:	ldr	x0, [x8, #96]
    2258:	ldur	x8, [x29, #-32]
    225c:	ldr	x8, [x8, #16]
    2260:	ldur	x9, [x29, #-48]
    2264:	add	x1, x8, x9
    2268:	ldur	x8, [x29, #-32]
    226c:	ldr	x8, [x8, #40]
    2270:	ldur	x9, [x29, #-48]
    2274:	subs	x8, x8, x9
    2278:	mov	w2, w8
    227c:	bl	0 <crc32>
    2280:	ldur	x9, [x29, #-16]
    2284:	str	x0, [x9, #96]
    2288:	ldur	x8, [x29, #-32]
    228c:	str	xzr, [x8, #64]
    2290:	ldur	x8, [x29, #-32]
    2294:	mov	w9, #0x49                  	// #73
    2298:	str	w9, [x8, #8]
    229c:	ldur	x8, [x29, #-32]
    22a0:	ldr	w9, [x8, #8]
    22a4:	cmp	w9, #0x49
    22a8:	b.ne	2428 <deflate+0xc50>  // b.any
    22ac:	ldur	x8, [x29, #-32]
    22b0:	ldr	x8, [x8, #56]
    22b4:	ldr	x8, [x8, #40]
    22b8:	cbz	x8, 241c <deflate+0xc44>
    22bc:	ldur	x8, [x29, #-32]
    22c0:	ldr	x8, [x8, #40]
    22c4:	str	x8, [sp, #64]
    22c8:	ldur	x8, [x29, #-32]
    22cc:	ldr	x8, [x8, #40]
    22d0:	ldur	x9, [x29, #-32]
    22d4:	ldr	x9, [x9, #24]
    22d8:	cmp	x8, x9
    22dc:	b.ne	2368 <deflate+0xb90>  // b.any
    22e0:	ldur	x8, [x29, #-32]
    22e4:	ldr	x8, [x8, #56]
    22e8:	ldr	w9, [x8, #68]
    22ec:	cbz	w9, 233c <deflate+0xb64>
    22f0:	ldur	x8, [x29, #-32]
    22f4:	ldr	x8, [x8, #40]
    22f8:	ldr	x9, [sp, #64]
    22fc:	cmp	x8, x9
    2300:	b.ls	233c <deflate+0xb64>  // b.plast
    2304:	ldur	x8, [x29, #-16]
    2308:	ldr	x0, [x8, #96]
    230c:	ldur	x8, [x29, #-32]
    2310:	ldr	x8, [x8, #16]
    2314:	ldr	x9, [sp, #64]
    2318:	add	x1, x8, x9
    231c:	ldur	x8, [x29, #-32]
    2320:	ldr	x8, [x8, #40]
    2324:	ldr	x9, [sp, #64]
    2328:	subs	x8, x8, x9
    232c:	mov	w2, w8
    2330:	bl	0 <crc32>
    2334:	ldur	x9, [x29, #-16]
    2338:	str	x0, [x9, #96]
    233c:	ldur	x0, [x29, #-16]
    2340:	bl	2f18 <flush_pending>
    2344:	ldur	x8, [x29, #-32]
    2348:	ldr	x8, [x8, #40]
    234c:	cbz	x8, 2364 <deflate+0xb8c>
    2350:	ldur	x8, [x29, #-32]
    2354:	mov	w9, #0xffffffff            	// #-1
    2358:	str	w9, [x8, #76]
    235c:	stur	wzr, [x29, #-4]
    2360:	b	2b34 <deflate+0x135c>
    2364:	str	xzr, [sp, #64]
    2368:	ldur	x8, [x29, #-32]
    236c:	ldr	x8, [x8, #56]
    2370:	ldr	x8, [x8, #40]
    2374:	ldur	x9, [x29, #-32]
    2378:	ldr	x10, [x9, #64]
    237c:	add	x11, x10, #0x1
    2380:	str	x11, [x9, #64]
    2384:	ldrb	w12, [x8, x10]
    2388:	str	w12, [sp, #60]
    238c:	ldr	w12, [sp, #60]
    2390:	ldur	x8, [x29, #-32]
    2394:	ldr	x8, [x8, #16]
    2398:	ldur	x9, [x29, #-32]
    239c:	ldr	x10, [x9, #40]
    23a0:	add	x11, x10, #0x1
    23a4:	str	x11, [x9, #40]
    23a8:	add	x8, x8, x10
    23ac:	strb	w12, [x8]
    23b0:	ldr	w8, [sp, #60]
    23b4:	cbnz	w8, 22c8 <deflate+0xaf0>
    23b8:	ldur	x8, [x29, #-32]
    23bc:	ldr	x8, [x8, #56]
    23c0:	ldr	w9, [x8, #68]
    23c4:	cbz	w9, 2414 <deflate+0xc3c>
    23c8:	ldur	x8, [x29, #-32]
    23cc:	ldr	x8, [x8, #40]
    23d0:	ldr	x9, [sp, #64]
    23d4:	cmp	x8, x9
    23d8:	b.ls	2414 <deflate+0xc3c>  // b.plast
    23dc:	ldur	x8, [x29, #-16]
    23e0:	ldr	x0, [x8, #96]
    23e4:	ldur	x8, [x29, #-32]
    23e8:	ldr	x8, [x8, #16]
    23ec:	ldr	x9, [sp, #64]
    23f0:	add	x1, x8, x9
    23f4:	ldur	x8, [x29, #-32]
    23f8:	ldr	x8, [x8, #40]
    23fc:	ldr	x9, [sp, #64]
    2400:	subs	x8, x8, x9
    2404:	mov	w2, w8
    2408:	bl	0 <crc32>
    240c:	ldur	x9, [x29, #-16]
    2410:	str	x0, [x9, #96]
    2414:	ldur	x8, [x29, #-32]
    2418:	str	xzr, [x8, #64]
    241c:	ldur	x8, [x29, #-32]
    2420:	mov	w9, #0x5b                  	// #91
    2424:	str	w9, [x8, #8]
    2428:	ldur	x8, [x29, #-32]
    242c:	ldr	w9, [x8, #8]
    2430:	cmp	w9, #0x5b
    2434:	b.ne	25ac <deflate+0xdd4>  // b.any
    2438:	ldur	x8, [x29, #-32]
    243c:	ldr	x8, [x8, #56]
    2440:	ldr	x8, [x8, #56]
    2444:	cbz	x8, 25a0 <deflate+0xdc8>
    2448:	ldur	x8, [x29, #-32]
    244c:	ldr	x8, [x8, #40]
    2450:	str	x8, [sp, #48]
    2454:	ldur	x8, [x29, #-32]
    2458:	ldr	x8, [x8, #40]
    245c:	ldur	x9, [x29, #-32]
    2460:	ldr	x9, [x9, #24]
    2464:	cmp	x8, x9
    2468:	b.ne	24f4 <deflate+0xd1c>  // b.any
    246c:	ldur	x8, [x29, #-32]
    2470:	ldr	x8, [x8, #56]
    2474:	ldr	w9, [x8, #68]
    2478:	cbz	w9, 24c8 <deflate+0xcf0>
    247c:	ldur	x8, [x29, #-32]
    2480:	ldr	x8, [x8, #40]
    2484:	ldr	x9, [sp, #48]
    2488:	cmp	x8, x9
    248c:	b.ls	24c8 <deflate+0xcf0>  // b.plast
    2490:	ldur	x8, [x29, #-16]
    2494:	ldr	x0, [x8, #96]
    2498:	ldur	x8, [x29, #-32]
    249c:	ldr	x8, [x8, #16]
    24a0:	ldr	x9, [sp, #48]
    24a4:	add	x1, x8, x9
    24a8:	ldur	x8, [x29, #-32]
    24ac:	ldr	x8, [x8, #40]
    24b0:	ldr	x9, [sp, #48]
    24b4:	subs	x8, x8, x9
    24b8:	mov	w2, w8
    24bc:	bl	0 <crc32>
    24c0:	ldur	x9, [x29, #-16]
    24c4:	str	x0, [x9, #96]
    24c8:	ldur	x0, [x29, #-16]
    24cc:	bl	2f18 <flush_pending>
    24d0:	ldur	x8, [x29, #-32]
    24d4:	ldr	x8, [x8, #40]
    24d8:	cbz	x8, 24f0 <deflate+0xd18>
    24dc:	ldur	x8, [x29, #-32]
    24e0:	mov	w9, #0xffffffff            	// #-1
    24e4:	str	w9, [x8, #76]
    24e8:	stur	wzr, [x29, #-4]
    24ec:	b	2b34 <deflate+0x135c>
    24f0:	str	xzr, [sp, #48]
    24f4:	ldur	x8, [x29, #-32]
    24f8:	ldr	x8, [x8, #56]
    24fc:	ldr	x8, [x8, #56]
    2500:	ldur	x9, [x29, #-32]
    2504:	ldr	x10, [x9, #64]
    2508:	add	x11, x10, #0x1
    250c:	str	x11, [x9, #64]
    2510:	ldrb	w12, [x8, x10]
    2514:	str	w12, [sp, #44]
    2518:	ldr	w12, [sp, #44]
    251c:	ldur	x8, [x29, #-32]
    2520:	ldr	x8, [x8, #16]
    2524:	ldur	x9, [x29, #-32]
    2528:	ldr	x10, [x9, #40]
    252c:	add	x11, x10, #0x1
    2530:	str	x11, [x9, #40]
    2534:	add	x8, x8, x10
    2538:	strb	w12, [x8]
    253c:	ldr	w8, [sp, #44]
    2540:	cbnz	w8, 2454 <deflate+0xc7c>
    2544:	ldur	x8, [x29, #-32]
    2548:	ldr	x8, [x8, #56]
    254c:	ldr	w9, [x8, #68]
    2550:	cbz	w9, 25a0 <deflate+0xdc8>
    2554:	ldur	x8, [x29, #-32]
    2558:	ldr	x8, [x8, #40]
    255c:	ldr	x9, [sp, #48]
    2560:	cmp	x8, x9
    2564:	b.ls	25a0 <deflate+0xdc8>  // b.plast
    2568:	ldur	x8, [x29, #-16]
    256c:	ldr	x0, [x8, #96]
    2570:	ldur	x8, [x29, #-32]
    2574:	ldr	x8, [x8, #16]
    2578:	ldr	x9, [sp, #48]
    257c:	add	x1, x8, x9
    2580:	ldur	x8, [x29, #-32]
    2584:	ldr	x8, [x8, #40]
    2588:	ldr	x9, [sp, #48]
    258c:	subs	x8, x8, x9
    2590:	mov	w2, w8
    2594:	bl	0 <crc32>
    2598:	ldur	x9, [x29, #-16]
    259c:	str	x0, [x9, #96]
    25a0:	ldur	x8, [x29, #-32]
    25a4:	mov	w9, #0x67                  	// #103
    25a8:	str	w9, [x8, #8]
    25ac:	ldur	x8, [x29, #-32]
    25b0:	ldr	w9, [x8, #8]
    25b4:	cmp	w9, #0x67
    25b8:	b.ne	26c0 <deflate+0xee8>  // b.any
    25bc:	ldur	x8, [x29, #-32]
    25c0:	ldr	x8, [x8, #56]
    25c4:	ldr	w9, [x8, #68]
    25c8:	cbz	w9, 268c <deflate+0xeb4>
    25cc:	ldur	x8, [x29, #-32]
    25d0:	ldr	x8, [x8, #40]
    25d4:	add	x8, x8, #0x2
    25d8:	ldur	x9, [x29, #-32]
    25dc:	ldr	x9, [x9, #24]
    25e0:	cmp	x8, x9
    25e4:	b.ls	2610 <deflate+0xe38>  // b.plast
    25e8:	ldur	x0, [x29, #-16]
    25ec:	bl	2f18 <flush_pending>
    25f0:	ldur	x8, [x29, #-32]
    25f4:	ldr	x8, [x8, #40]
    25f8:	cbz	x8, 2610 <deflate+0xe38>
    25fc:	ldur	x8, [x29, #-32]
    2600:	mov	w9, #0xffffffff            	// #-1
    2604:	str	w9, [x8, #76]
    2608:	stur	wzr, [x29, #-4]
    260c:	b	2b34 <deflate+0x135c>
    2610:	ldur	x8, [x29, #-16]
    2614:	ldr	x8, [x8, #96]
    2618:	and	x8, x8, #0xff
    261c:	ldur	x9, [x29, #-32]
    2620:	ldr	x9, [x9, #16]
    2624:	ldur	x10, [x29, #-32]
    2628:	ldr	x11, [x10, #40]
    262c:	add	x12, x11, #0x1
    2630:	str	x12, [x10, #40]
    2634:	add	x9, x9, x11
    2638:	strb	w8, [x9]
    263c:	ldur	x9, [x29, #-16]
    2640:	ldr	x9, [x9, #96]
    2644:	lsr	x9, x9, #8
    2648:	and	x9, x9, #0xff
    264c:	ldur	x10, [x29, #-32]
    2650:	ldr	x10, [x10, #16]
    2654:	ldur	x11, [x29, #-32]
    2658:	ldr	x12, [x11, #40]
    265c:	add	x13, x12, #0x1
    2660:	str	x13, [x11, #40]
    2664:	add	x10, x10, x12
    2668:	strb	w9, [x10]
    266c:	mov	x10, xzr
    2670:	mov	x0, x10
    2674:	mov	x1, x10
    2678:	mov	w8, wzr
    267c:	mov	w2, w8
    2680:	bl	0 <crc32>
    2684:	ldur	x10, [x29, #-16]
    2688:	str	x0, [x10, #96]
    268c:	ldur	x8, [x29, #-32]
    2690:	mov	w9, #0x71                  	// #113
    2694:	str	w9, [x8, #8]
    2698:	ldur	x0, [x29, #-16]
    269c:	bl	2f18 <flush_pending>
    26a0:	ldur	x8, [x29, #-32]
    26a4:	ldr	x8, [x8, #40]
    26a8:	cbz	x8, 26c0 <deflate+0xee8>
    26ac:	ldur	x8, [x29, #-32]
    26b0:	mov	w9, #0xffffffff            	// #-1
    26b4:	str	w9, [x8, #76]
    26b8:	stur	wzr, [x29, #-4]
    26bc:	b	2b34 <deflate+0x135c>
    26c0:	ldur	x8, [x29, #-16]
    26c4:	ldr	w9, [x8, #8]
    26c8:	cbnz	w9, 26f0 <deflate+0xf18>
    26cc:	ldur	x8, [x29, #-32]
    26d0:	ldr	w9, [x8, #180]
    26d4:	cbnz	w9, 26f0 <deflate+0xf18>
    26d8:	ldur	w8, [x29, #-20]
    26dc:	cbz	w8, 28f4 <deflate+0x111c>
    26e0:	ldur	x8, [x29, #-32]
    26e4:	ldr	w9, [x8, #8]
    26e8:	cmp	w9, #0x29a
    26ec:	b.eq	28f4 <deflate+0x111c>  // b.none
    26f0:	ldur	x8, [x29, #-32]
    26f4:	ldr	w9, [x8, #196]
    26f8:	cbnz	w9, 2710 <deflate+0xf38>
    26fc:	ldur	x0, [x29, #-32]
    2700:	ldur	w1, [x29, #-20]
    2704:	bl	3090 <deflate_stored>
    2708:	str	w0, [sp, #12]
    270c:	b	2798 <deflate+0xfc0>
    2710:	ldur	x8, [x29, #-32]
    2714:	ldr	w9, [x8, #200]
    2718:	cmp	w9, #0x2
    271c:	b.ne	2734 <deflate+0xf5c>  // b.any
    2720:	ldur	x0, [x29, #-32]
    2724:	ldur	w1, [x29, #-20]
    2728:	bl	3a54 <deflate_huff>
    272c:	str	w0, [sp, #8]
    2730:	b	2790 <deflate+0xfb8>
    2734:	ldur	x8, [x29, #-32]
    2738:	ldr	w9, [x8, #200]
    273c:	cmp	w9, #0x3
    2740:	b.ne	2758 <deflate+0xf80>  // b.any
    2744:	ldur	x0, [x29, #-32]
    2748:	ldur	w1, [x29, #-20]
    274c:	bl	3dd8 <deflate_rle>
    2750:	str	w0, [sp, #4]
    2754:	b	2788 <deflate+0xfb0>
    2758:	ldur	x8, [x29, #-32]
    275c:	ldrsw	x8, [x8, #196]
    2760:	mov	x9, #0x10                  	// #16
    2764:	mul	x8, x9, x8
    2768:	adrp	x9, 0 <deflateInit_>
    276c:	add	x9, x9, #0x0
    2770:	add	x8, x9, x8
    2774:	ldr	x8, [x8, #8]
    2778:	ldur	x0, [x29, #-32]
    277c:	ldur	w1, [x29, #-20]
    2780:	blr	x8
    2784:	str	w0, [sp, #4]
    2788:	ldr	w8, [sp, #4]
    278c:	str	w8, [sp, #8]
    2790:	ldr	w8, [sp, #8]
    2794:	str	w8, [sp, #12]
    2798:	ldr	w8, [sp, #12]
    279c:	str	w8, [sp, #40]
    27a0:	ldr	w8, [sp, #40]
    27a4:	cmp	w8, #0x2
    27a8:	b.eq	27b8 <deflate+0xfe0>  // b.none
    27ac:	ldr	w8, [sp, #40]
    27b0:	cmp	w8, #0x3
    27b4:	b.ne	27c4 <deflate+0xfec>  // b.any
    27b8:	ldur	x8, [x29, #-32]
    27bc:	mov	w9, #0x29a                 	// #666
    27c0:	str	w9, [x8, #8]
    27c4:	ldr	w8, [sp, #40]
    27c8:	cbz	w8, 27d8 <deflate+0x1000>
    27cc:	ldr	w8, [sp, #40]
    27d0:	cmp	w8, #0x2
    27d4:	b.ne	27f8 <deflate+0x1020>  // b.any
    27d8:	ldur	x8, [x29, #-16]
    27dc:	ldr	w9, [x8, #32]
    27e0:	cbnz	w9, 27f0 <deflate+0x1018>
    27e4:	ldur	x8, [x29, #-32]
    27e8:	mov	w9, #0xffffffff            	// #-1
    27ec:	str	w9, [x8, #76]
    27f0:	stur	wzr, [x29, #-4]
    27f4:	b	2b34 <deflate+0x135c>
    27f8:	ldr	w8, [sp, #40]
    27fc:	cmp	w8, #0x1
    2800:	b.ne	28f4 <deflate+0x111c>  // b.any
    2804:	ldur	w8, [x29, #-20]
    2808:	cmp	w8, #0x1
    280c:	b.ne	281c <deflate+0x1044>  // b.any
    2810:	ldur	x0, [x29, #-32]
    2814:	bl	0 <_tr_align>
    2818:	b	28cc <deflate+0x10f4>
    281c:	ldur	w8, [x29, #-20]
    2820:	cmp	w8, #0x5
    2824:	b.eq	28cc <deflate+0x10f4>  // b.none
    2828:	ldur	x0, [x29, #-32]
    282c:	mov	x8, xzr
    2830:	mov	x1, x8
    2834:	mov	x2, x8
    2838:	mov	w9, wzr
    283c:	mov	w3, w9
    2840:	bl	0 <_tr_stored_block>
    2844:	ldur	w9, [x29, #-20]
    2848:	cmp	w9, #0x3
    284c:	b.ne	28cc <deflate+0x10f4>  // b.any
    2850:	ldur	x8, [x29, #-32]
    2854:	ldr	x8, [x8, #120]
    2858:	ldur	x9, [x29, #-32]
    285c:	ldr	w10, [x9, #132]
    2860:	subs	w10, w10, #0x1
    2864:	mov	w9, w10
    2868:	ubfx	x9, x9, #0, #32
    286c:	mov	x11, #0x2                   	// #2
    2870:	mul	x9, x11, x9
    2874:	add	x8, x8, x9
    2878:	mov	w10, #0x0                   	// #0
    287c:	strh	w10, [x8]
    2880:	ldur	x8, [x29, #-32]
    2884:	ldr	x0, [x8, #120]
    2888:	ldur	x8, [x29, #-32]
    288c:	ldr	w10, [x8, #132]
    2890:	subs	w10, w10, #0x1
    2894:	mov	w12, #0x2                   	// #2
    2898:	umull	x2, w10, w12
    289c:	mov	w10, wzr
    28a0:	mov	w1, w10
    28a4:	bl	0 <memset>
    28a8:	ldur	x8, [x29, #-32]
    28ac:	ldr	w10, [x8, #180]
    28b0:	cbnz	w10, 28cc <deflate+0x10f4>
    28b4:	ldur	x8, [x29, #-32]
    28b8:	str	wzr, [x8, #172]
    28bc:	ldur	x8, [x29, #-32]
    28c0:	str	xzr, [x8, #152]
    28c4:	ldur	x8, [x29, #-32]
    28c8:	str	wzr, [x8, #5932]
    28cc:	ldur	x0, [x29, #-16]
    28d0:	bl	2f18 <flush_pending>
    28d4:	ldur	x8, [x29, #-16]
    28d8:	ldr	w9, [x8, #32]
    28dc:	cbnz	w9, 28f4 <deflate+0x111c>
    28e0:	ldur	x8, [x29, #-32]
    28e4:	mov	w9, #0xffffffff            	// #-1
    28e8:	str	w9, [x8, #76]
    28ec:	stur	wzr, [x29, #-4]
    28f0:	b	2b34 <deflate+0x135c>
    28f4:	ldur	w8, [x29, #-20]
    28f8:	cmp	w8, #0x4
    28fc:	b.eq	2908 <deflate+0x1130>  // b.none
    2900:	stur	wzr, [x29, #-4]
    2904:	b	2b34 <deflate+0x135c>
    2908:	ldur	x8, [x29, #-32]
    290c:	ldr	w9, [x8, #48]
    2910:	cmp	w9, #0x0
    2914:	cset	w9, gt
    2918:	tbnz	w9, #0, 2928 <deflate+0x1150>
    291c:	mov	w8, #0x1                   	// #1
    2920:	stur	w8, [x29, #-4]
    2924:	b	2b34 <deflate+0x135c>
    2928:	ldur	x8, [x29, #-32]
    292c:	ldr	w9, [x8, #48]
    2930:	cmp	w9, #0x2
    2934:	b.ne	2ab4 <deflate+0x12dc>  // b.any
    2938:	ldur	x8, [x29, #-16]
    293c:	ldr	x8, [x8, #96]
    2940:	and	x8, x8, #0xff
    2944:	ldur	x9, [x29, #-32]
    2948:	ldr	x9, [x9, #16]
    294c:	ldur	x10, [x29, #-32]
    2950:	ldr	x11, [x10, #40]
    2954:	add	x12, x11, #0x1
    2958:	str	x12, [x10, #40]
    295c:	add	x9, x9, x11
    2960:	strb	w8, [x9]
    2964:	ldur	x9, [x29, #-16]
    2968:	ldr	x9, [x9, #96]
    296c:	lsr	x9, x9, #8
    2970:	and	x9, x9, #0xff
    2974:	ldur	x10, [x29, #-32]
    2978:	ldr	x10, [x10, #16]
    297c:	ldur	x11, [x29, #-32]
    2980:	ldr	x12, [x11, #40]
    2984:	add	x13, x12, #0x1
    2988:	str	x13, [x11, #40]
    298c:	add	x10, x10, x12
    2990:	strb	w9, [x10]
    2994:	ldur	x10, [x29, #-16]
    2998:	ldr	x10, [x10, #96]
    299c:	lsr	x10, x10, #16
    29a0:	and	x10, x10, #0xff
    29a4:	ldur	x11, [x29, #-32]
    29a8:	ldr	x11, [x11, #16]
    29ac:	ldur	x12, [x29, #-32]
    29b0:	ldr	x13, [x12, #40]
    29b4:	add	x14, x13, #0x1
    29b8:	str	x14, [x12, #40]
    29bc:	add	x11, x11, x13
    29c0:	strb	w10, [x11]
    29c4:	ldur	x11, [x29, #-16]
    29c8:	ldr	x11, [x11, #96]
    29cc:	lsr	x11, x11, #24
    29d0:	and	x11, x11, #0xff
    29d4:	ldur	x12, [x29, #-32]
    29d8:	ldr	x12, [x12, #16]
    29dc:	ldur	x13, [x29, #-32]
    29e0:	ldr	x14, [x13, #40]
    29e4:	add	x15, x14, #0x1
    29e8:	str	x15, [x13, #40]
    29ec:	add	x12, x12, x14
    29f0:	strb	w11, [x12]
    29f4:	ldur	x12, [x29, #-16]
    29f8:	ldr	x12, [x12, #16]
    29fc:	and	x12, x12, #0xff
    2a00:	ldur	x13, [x29, #-32]
    2a04:	ldr	x13, [x13, #16]
    2a08:	ldur	x14, [x29, #-32]
    2a0c:	ldr	x15, [x14, #40]
    2a10:	add	x16, x15, #0x1
    2a14:	str	x16, [x14, #40]
    2a18:	add	x13, x13, x15
    2a1c:	strb	w12, [x13]
    2a20:	ldur	x13, [x29, #-16]
    2a24:	ldr	x13, [x13, #16]
    2a28:	lsr	x13, x13, #8
    2a2c:	and	x13, x13, #0xff
    2a30:	ldur	x14, [x29, #-32]
    2a34:	ldr	x14, [x14, #16]
    2a38:	ldur	x15, [x29, #-32]
    2a3c:	ldr	x16, [x15, #40]
    2a40:	add	x17, x16, #0x1
    2a44:	str	x17, [x15, #40]
    2a48:	add	x14, x14, x16
    2a4c:	strb	w13, [x14]
    2a50:	ldur	x14, [x29, #-16]
    2a54:	ldr	x14, [x14, #16]
    2a58:	lsr	x14, x14, #16
    2a5c:	and	x14, x14, #0xff
    2a60:	ldur	x15, [x29, #-32]
    2a64:	ldr	x15, [x15, #16]
    2a68:	ldur	x16, [x29, #-32]
    2a6c:	ldr	x17, [x16, #40]
    2a70:	add	x18, x17, #0x1
    2a74:	str	x18, [x16, #40]
    2a78:	add	x15, x15, x17
    2a7c:	strb	w14, [x15]
    2a80:	ldur	x15, [x29, #-16]
    2a84:	ldr	x15, [x15, #16]
    2a88:	lsr	x15, x15, #24
    2a8c:	and	x15, x15, #0xff
    2a90:	ldur	x16, [x29, #-32]
    2a94:	ldr	x16, [x16, #16]
    2a98:	ldur	x17, [x29, #-32]
    2a9c:	ldr	x18, [x17, #40]
    2aa0:	add	x0, x18, #0x1
    2aa4:	str	x0, [x17, #40]
    2aa8:	add	x16, x16, x18
    2aac:	strb	w15, [x16]
    2ab0:	b	2ae4 <deflate+0x130c>
    2ab4:	ldur	x0, [x29, #-32]
    2ab8:	ldur	x8, [x29, #-16]
    2abc:	ldr	x8, [x8, #96]
    2ac0:	lsr	x8, x8, #16
    2ac4:	mov	w1, w8
    2ac8:	bl	302c <putShortMSB>
    2acc:	ldur	x0, [x29, #-32]
    2ad0:	ldur	x9, [x29, #-16]
    2ad4:	ldr	x9, [x9, #96]
    2ad8:	and	x9, x9, #0xffff
    2adc:	mov	w1, w9
    2ae0:	bl	302c <putShortMSB>
    2ae4:	ldur	x0, [x29, #-16]
    2ae8:	bl	2f18 <flush_pending>
    2aec:	ldur	x8, [x29, #-32]
    2af0:	ldr	w9, [x8, #48]
    2af4:	cmp	w9, #0x0
    2af8:	cset	w9, le
    2afc:	tbnz	w9, #0, 2b18 <deflate+0x1340>
    2b00:	ldur	x8, [x29, #-32]
    2b04:	ldr	w9, [x8, #48]
    2b08:	mov	w10, wzr
    2b0c:	subs	w9, w10, w9
    2b10:	ldur	x8, [x29, #-32]
    2b14:	str	w9, [x8, #48]
    2b18:	ldur	x8, [x29, #-32]
    2b1c:	ldr	x8, [x8, #40]
    2b20:	mov	w9, #0x1                   	// #1
    2b24:	mov	w10, wzr
    2b28:	cmp	x8, #0x0
    2b2c:	csel	w9, w10, w9, ne  // ne = any
    2b30:	stur	w9, [x29, #-4]
    2b34:	ldur	w0, [x29, #-4]
    2b38:	ldp	x29, x30, [sp, #128]
    2b3c:	add	sp, sp, #0x90
    2b40:	ret

0000000000002b44 <slide_hash>:
    2b44:	sub	sp, sp, #0x30
    2b48:	str	x0, [sp, #40]
    2b4c:	ldr	x8, [sp, #40]
    2b50:	ldr	w9, [x8, #80]
    2b54:	str	w9, [sp, #20]
    2b58:	ldr	x8, [sp, #40]
    2b5c:	ldr	w9, [x8, #132]
    2b60:	str	w9, [sp, #36]
    2b64:	ldr	x8, [sp, #40]
    2b68:	ldr	x8, [x8, #120]
    2b6c:	ldr	w9, [sp, #36]
    2b70:	mov	w10, w9
    2b74:	mov	x11, #0x2                   	// #2
    2b78:	mul	x10, x11, x10
    2b7c:	add	x8, x8, x10
    2b80:	str	x8, [sp, #24]
    2b84:	ldr	x8, [sp, #24]
    2b88:	mov	x9, #0xfffffffffffffffe    	// #-2
    2b8c:	add	x9, x8, x9
    2b90:	str	x9, [sp, #24]
    2b94:	ldurh	w10, [x8, #-2]
    2b98:	str	w10, [sp, #32]
    2b9c:	ldr	w10, [sp, #32]
    2ba0:	ldr	w11, [sp, #20]
    2ba4:	cmp	w10, w11
    2ba8:	b.cc	2bc0 <slide_hash+0x7c>  // b.lo, b.ul, b.last
    2bac:	ldr	w8, [sp, #32]
    2bb0:	ldr	w9, [sp, #20]
    2bb4:	subs	w8, w8, w9
    2bb8:	str	w8, [sp, #16]
    2bbc:	b	2bc8 <slide_hash+0x84>
    2bc0:	mov	w8, wzr
    2bc4:	str	w8, [sp, #16]
    2bc8:	ldr	w8, [sp, #16]
    2bcc:	ldr	x9, [sp, #24]
    2bd0:	strh	w8, [x9]
    2bd4:	ldr	w8, [sp, #36]
    2bd8:	subs	w8, w8, #0x1
    2bdc:	str	w8, [sp, #36]
    2be0:	cbnz	w8, 2b84 <slide_hash+0x40>
    2be4:	ldr	w8, [sp, #20]
    2be8:	str	w8, [sp, #36]
    2bec:	ldr	x9, [sp, #40]
    2bf0:	ldr	x9, [x9, #112]
    2bf4:	ldr	w8, [sp, #36]
    2bf8:	mov	w10, w8
    2bfc:	mov	x11, #0x2                   	// #2
    2c00:	mul	x10, x11, x10
    2c04:	add	x9, x9, x10
    2c08:	str	x9, [sp, #24]
    2c0c:	ldr	x8, [sp, #24]
    2c10:	mov	x9, #0xfffffffffffffffe    	// #-2
    2c14:	add	x9, x8, x9
    2c18:	str	x9, [sp, #24]
    2c1c:	ldurh	w10, [x8, #-2]
    2c20:	str	w10, [sp, #32]
    2c24:	ldr	w10, [sp, #32]
    2c28:	ldr	w11, [sp, #20]
    2c2c:	cmp	w10, w11
    2c30:	b.cc	2c48 <slide_hash+0x104>  // b.lo, b.ul, b.last
    2c34:	ldr	w8, [sp, #32]
    2c38:	ldr	w9, [sp, #20]
    2c3c:	subs	w8, w8, w9
    2c40:	str	w8, [sp, #12]
    2c44:	b	2c50 <slide_hash+0x10c>
    2c48:	mov	w8, wzr
    2c4c:	str	w8, [sp, #12]
    2c50:	ldr	w8, [sp, #12]
    2c54:	ldr	x9, [sp, #24]
    2c58:	strh	w8, [x9]
    2c5c:	ldr	w8, [sp, #36]
    2c60:	subs	w8, w8, #0x1
    2c64:	str	w8, [sp, #36]
    2c68:	cbnz	w8, 2c0c <slide_hash+0xc8>
    2c6c:	add	sp, sp, #0x30
    2c70:	ret

0000000000002c74 <deflateTune>:
    2c74:	sub	sp, sp, #0x40
    2c78:	stp	x29, x30, [sp, #48]
    2c7c:	add	x29, sp, #0x30
    2c80:	stur	x0, [x29, #-16]
    2c84:	stur	w1, [x29, #-20]
    2c88:	str	w2, [sp, #24]
    2c8c:	str	w3, [sp, #20]
    2c90:	str	w4, [sp, #16]
    2c94:	ldur	x0, [x29, #-16]
    2c98:	bl	a20 <deflateStateCheck>
    2c9c:	cbz	w0, 2cac <deflateTune+0x38>
    2ca0:	mov	w8, #0xfffffffe            	// #-2
    2ca4:	stur	w8, [x29, #-4]
    2ca8:	b	2cec <deflateTune+0x78>
    2cac:	ldur	x8, [x29, #-16]
    2cb0:	ldr	x8, [x8, #56]
    2cb4:	str	x8, [sp, #8]
    2cb8:	ldur	w9, [x29, #-20]
    2cbc:	ldr	x8, [sp, #8]
    2cc0:	str	w9, [x8, #204]
    2cc4:	ldr	w9, [sp, #24]
    2cc8:	ldr	x8, [sp, #8]
    2ccc:	str	w9, [x8, #192]
    2cd0:	ldr	w9, [sp, #20]
    2cd4:	ldr	x8, [sp, #8]
    2cd8:	str	w9, [x8, #208]
    2cdc:	ldr	w9, [sp, #16]
    2ce0:	ldr	x8, [sp, #8]
    2ce4:	str	w9, [x8, #188]
    2ce8:	stur	wzr, [x29, #-4]
    2cec:	ldur	w0, [x29, #-4]
    2cf0:	ldp	x29, x30, [sp, #48]
    2cf4:	add	sp, sp, #0x40
    2cf8:	ret

0000000000002cfc <deflateBound>:
    2cfc:	sub	sp, sp, #0x50
    2d00:	stp	x29, x30, [sp, #64]
    2d04:	add	x29, sp, #0x40
    2d08:	stur	x0, [x29, #-16]
    2d0c:	stur	x1, [x29, #-24]
    2d10:	ldur	x8, [x29, #-24]
    2d14:	ldur	x9, [x29, #-24]
    2d18:	add	x9, x9, #0x7
    2d1c:	add	x8, x8, x9, lsr #3
    2d20:	ldur	x9, [x29, #-24]
    2d24:	add	x9, x9, #0x3f
    2d28:	add	x8, x8, x9, lsr #6
    2d2c:	add	x8, x8, #0x5
    2d30:	str	x8, [sp, #24]
    2d34:	ldur	x0, [x29, #-16]
    2d38:	bl	a20 <deflateStateCheck>
    2d3c:	cbz	w0, 2d50 <deflateBound+0x54>
    2d40:	ldr	x8, [sp, #24]
    2d44:	add	x8, x8, #0x6
    2d48:	stur	x8, [x29, #-8]
    2d4c:	b	2f08 <deflateBound+0x20c>
    2d50:	ldur	x8, [x29, #-16]
    2d54:	ldr	x8, [x8, #56]
    2d58:	str	x8, [sp, #32]
    2d5c:	ldr	x8, [sp, #32]
    2d60:	ldr	w9, [x8, #48]
    2d64:	str	w9, [sp, #4]
    2d68:	cbz	w9, 2d90 <deflateBound+0x94>
    2d6c:	b	2d70 <deflateBound+0x74>
    2d70:	ldr	w8, [sp, #4]
    2d74:	cmp	w8, #0x1
    2d78:	b.eq	2d98 <deflateBound+0x9c>  // b.none
    2d7c:	b	2d80 <deflateBound+0x84>
    2d80:	ldr	w8, [sp, #4]
    2d84:	cmp	w8, #0x2
    2d88:	b.eq	2dc4 <deflateBound+0xc8>  // b.none
    2d8c:	b	2e9c <deflateBound+0x1a0>
    2d90:	str	xzr, [sp, #16]
    2d94:	b	2ea4 <deflateBound+0x1a8>
    2d98:	ldr	x8, [sp, #32]
    2d9c:	ldr	w9, [x8, #172]
    2da0:	mov	w10, wzr
    2da4:	mov	w11, #0x4                   	// #4
    2da8:	cmp	w9, #0x0
    2dac:	csel	w9, w11, w10, ne  // ne = any
    2db0:	add	w9, w9, #0x6
    2db4:	mov	w0, w9
    2db8:	sxtw	x8, w0
    2dbc:	str	x8, [sp, #16]
    2dc0:	b	2ea4 <deflateBound+0x1a8>
    2dc4:	mov	x8, #0x12                  	// #18
    2dc8:	str	x8, [sp, #16]
    2dcc:	ldr	x8, [sp, #32]
    2dd0:	ldr	x8, [x8, #56]
    2dd4:	cbz	x8, 2e98 <deflateBound+0x19c>
    2dd8:	ldr	x8, [sp, #32]
    2ddc:	ldr	x8, [x8, #56]
    2de0:	ldr	x8, [x8, #24]
    2de4:	cbz	x8, 2e0c <deflateBound+0x110>
    2de8:	ldr	x8, [sp, #32]
    2dec:	ldr	x8, [x8, #56]
    2df0:	ldr	w9, [x8, #32]
    2df4:	add	w9, w9, #0x2
    2df8:	mov	w8, w9
    2dfc:	ubfx	x8, x8, #0, #32
    2e00:	ldr	x10, [sp, #16]
    2e04:	add	x8, x10, x8
    2e08:	str	x8, [sp, #16]
    2e0c:	ldr	x8, [sp, #32]
    2e10:	ldr	x8, [x8, #56]
    2e14:	ldr	x8, [x8, #40]
    2e18:	str	x8, [sp, #8]
    2e1c:	ldr	x8, [sp, #8]
    2e20:	cbz	x8, 2e44 <deflateBound+0x148>
    2e24:	ldr	x8, [sp, #16]
    2e28:	add	x8, x8, #0x1
    2e2c:	str	x8, [sp, #16]
    2e30:	ldr	x8, [sp, #8]
    2e34:	add	x9, x8, #0x1
    2e38:	str	x9, [sp, #8]
    2e3c:	ldrb	w10, [x8]
    2e40:	cbnz	w10, 2e24 <deflateBound+0x128>
    2e44:	ldr	x8, [sp, #32]
    2e48:	ldr	x8, [x8, #56]
    2e4c:	ldr	x8, [x8, #56]
    2e50:	str	x8, [sp, #8]
    2e54:	ldr	x8, [sp, #8]
    2e58:	cbz	x8, 2e7c <deflateBound+0x180>
    2e5c:	ldr	x8, [sp, #16]
    2e60:	add	x8, x8, #0x1
    2e64:	str	x8, [sp, #16]
    2e68:	ldr	x8, [sp, #8]
    2e6c:	add	x9, x8, #0x1
    2e70:	str	x9, [sp, #8]
    2e74:	ldrb	w10, [x8]
    2e78:	cbnz	w10, 2e5c <deflateBound+0x160>
    2e7c:	ldr	x8, [sp, #32]
    2e80:	ldr	x8, [x8, #56]
    2e84:	ldr	w9, [x8, #68]
    2e88:	cbz	w9, 2e98 <deflateBound+0x19c>
    2e8c:	ldr	x8, [sp, #16]
    2e90:	add	x8, x8, #0x2
    2e94:	str	x8, [sp, #16]
    2e98:	b	2ea4 <deflateBound+0x1a8>
    2e9c:	mov	x8, #0x6                   	// #6
    2ea0:	str	x8, [sp, #16]
    2ea4:	ldr	x8, [sp, #32]
    2ea8:	ldr	w9, [x8, #84]
    2eac:	cmp	w9, #0xf
    2eb0:	b.ne	2ec4 <deflateBound+0x1c8>  // b.any
    2eb4:	ldr	x8, [sp, #32]
    2eb8:	ldr	w9, [x8, #136]
    2ebc:	cmp	w9, #0xf
    2ec0:	b.eq	2ed8 <deflateBound+0x1dc>  // b.none
    2ec4:	ldr	x8, [sp, #24]
    2ec8:	ldr	x9, [sp, #16]
    2ecc:	add	x8, x8, x9
    2ed0:	stur	x8, [x29, #-8]
    2ed4:	b	2f08 <deflateBound+0x20c>
    2ed8:	ldur	x8, [x29, #-24]
    2edc:	ldur	x9, [x29, #-24]
    2ee0:	add	x8, x8, x9, lsr #12
    2ee4:	ldur	x9, [x29, #-24]
    2ee8:	add	x8, x8, x9, lsr #14
    2eec:	ldur	x9, [x29, #-24]
    2ef0:	add	x8, x8, x9, lsr #25
    2ef4:	add	x8, x8, #0xd
    2ef8:	subs	x8, x8, #0x6
    2efc:	ldr	x9, [sp, #16]
    2f00:	add	x8, x8, x9
    2f04:	stur	x8, [x29, #-8]
    2f08:	ldur	x0, [x29, #-8]
    2f0c:	ldp	x29, x30, [sp, #64]
    2f10:	add	sp, sp, #0x50
    2f14:	ret

0000000000002f18 <flush_pending>:
    2f18:	sub	sp, sp, #0x30
    2f1c:	stp	x29, x30, [sp, #32]
    2f20:	add	x29, sp, #0x20
    2f24:	stur	x0, [x29, #-8]
    2f28:	ldur	x8, [x29, #-8]
    2f2c:	ldr	x8, [x8, #56]
    2f30:	str	x8, [sp, #8]
    2f34:	ldr	x0, [sp, #8]
    2f38:	bl	0 <_tr_flush_bits>
    2f3c:	ldr	x8, [sp, #8]
    2f40:	ldr	x8, [x8, #40]
    2f44:	stur	w8, [x29, #-12]
    2f48:	ldur	w8, [x29, #-12]
    2f4c:	ldur	x9, [x29, #-8]
    2f50:	ldr	w10, [x9, #32]
    2f54:	cmp	w8, w10
    2f58:	b.ls	2f68 <flush_pending+0x50>  // b.plast
    2f5c:	ldur	x8, [x29, #-8]
    2f60:	ldr	w9, [x8, #32]
    2f64:	stur	w9, [x29, #-12]
    2f68:	ldur	w8, [x29, #-12]
    2f6c:	cbnz	w8, 2f74 <flush_pending+0x5c>
    2f70:	b	3020 <flush_pending+0x108>
    2f74:	ldur	x8, [x29, #-8]
    2f78:	ldr	x0, [x8, #24]
    2f7c:	ldr	x8, [sp, #8]
    2f80:	ldr	x1, [x8, #32]
    2f84:	ldur	w9, [x29, #-12]
    2f88:	mov	w2, w9
    2f8c:	bl	0 <memcpy>
    2f90:	ldur	w9, [x29, #-12]
    2f94:	mov	w8, w9
    2f98:	ldur	x10, [x29, #-8]
    2f9c:	ldr	x11, [x10, #24]
    2fa0:	add	x8, x11, x8
    2fa4:	str	x8, [x10, #24]
    2fa8:	ldur	w9, [x29, #-12]
    2fac:	mov	w8, w9
    2fb0:	ldr	x10, [sp, #8]
    2fb4:	ldr	x11, [x10, #32]
    2fb8:	add	x8, x11, x8
    2fbc:	str	x8, [x10, #32]
    2fc0:	ldur	w9, [x29, #-12]
    2fc4:	mov	w8, w9
    2fc8:	ldur	x10, [x29, #-8]
    2fcc:	ldr	x11, [x10, #40]
    2fd0:	add	x8, x11, x8
    2fd4:	str	x8, [x10, #40]
    2fd8:	ldur	w9, [x29, #-12]
    2fdc:	ldur	x8, [x29, #-8]
    2fe0:	ldr	w12, [x8, #32]
    2fe4:	subs	w9, w12, w9
    2fe8:	str	w9, [x8, #32]
    2fec:	ldur	w9, [x29, #-12]
    2ff0:	mov	w8, w9
    2ff4:	ldr	x10, [sp, #8]
    2ff8:	ldr	x11, [x10, #40]
    2ffc:	subs	x8, x11, x8
    3000:	str	x8, [x10, #40]
    3004:	ldr	x8, [sp, #8]
    3008:	ldr	x8, [x8, #40]
    300c:	cbnz	x8, 3020 <flush_pending+0x108>
    3010:	ldr	x8, [sp, #8]
    3014:	ldr	x8, [x8, #16]
    3018:	ldr	x9, [sp, #8]
    301c:	str	x8, [x9, #32]
    3020:	ldp	x29, x30, [sp, #32]
    3024:	add	sp, sp, #0x30
    3028:	ret

000000000000302c <putShortMSB>:
    302c:	sub	sp, sp, #0x10
    3030:	str	x0, [sp, #8]
    3034:	str	w1, [sp, #4]
    3038:	ldr	w8, [sp, #4]
    303c:	lsr	w8, w8, #8
    3040:	ldr	x9, [sp, #8]
    3044:	ldr	x9, [x9, #16]
    3048:	ldr	x10, [sp, #8]
    304c:	ldr	x11, [x10, #40]
    3050:	add	x12, x11, #0x1
    3054:	str	x12, [x10, #40]
    3058:	add	x9, x9, x11
    305c:	strb	w8, [x9]
    3060:	ldr	w8, [sp, #4]
    3064:	and	w8, w8, #0xff
    3068:	ldr	x9, [sp, #8]
    306c:	ldr	x9, [x9, #16]
    3070:	ldr	x10, [sp, #8]
    3074:	ldr	x11, [x10, #40]
    3078:	add	x12, x11, #0x1
    307c:	str	x12, [x10, #40]
    3080:	add	x9, x9, x11
    3084:	strb	w8, [x9]
    3088:	add	sp, sp, #0x10
    308c:	ret

0000000000003090 <deflate_stored>:
    3090:	sub	sp, sp, #0x70
    3094:	stp	x29, x30, [sp, #96]
    3098:	add	x29, sp, #0x60
    309c:	stur	x0, [x29, #-16]
    30a0:	stur	w1, [x29, #-20]
    30a4:	ldur	x8, [x29, #-16]
    30a8:	ldr	x8, [x8, #24]
    30ac:	subs	x8, x8, #0x5
    30b0:	ldur	x9, [x29, #-16]
    30b4:	ldr	w10, [x9, #80]
    30b8:	mov	w9, w10
    30bc:	cmp	x8, x9
    30c0:	b.ls	30d8 <deflate_stored+0x48>  // b.plast
    30c4:	ldur	x8, [x29, #-16]
    30c8:	ldr	w9, [x8, #80]
    30cc:	mov	w0, w9
    30d0:	str	x0, [sp, #40]
    30d4:	b	30e8 <deflate_stored+0x58>
    30d8:	ldur	x8, [x29, #-16]
    30dc:	ldr	x8, [x8, #24]
    30e0:	subs	x8, x8, #0x5
    30e4:	str	x8, [sp, #40]
    30e8:	ldr	x8, [sp, #40]
    30ec:	stur	w8, [x29, #-24]
    30f0:	stur	wzr, [x29, #-40]
    30f4:	ldur	x9, [x29, #-16]
    30f8:	ldr	x9, [x9]
    30fc:	ldr	w8, [x9, #8]
    3100:	stur	w8, [x29, #-44]
    3104:	mov	w8, #0xffff                	// #65535
    3108:	stur	w8, [x29, #-28]
    310c:	ldur	x9, [x29, #-16]
    3110:	ldr	w8, [x9, #5940]
    3114:	add	w8, w8, #0x2a
    3118:	asr	w8, w8, #3
    311c:	stur	w8, [x29, #-36]
    3120:	ldur	x9, [x29, #-16]
    3124:	ldr	x9, [x9]
    3128:	ldr	w8, [x9, #32]
    312c:	ldur	w10, [x29, #-36]
    3130:	cmp	w8, w10
    3134:	b.cs	313c <deflate_stored+0xac>  // b.hs, b.nlast
    3138:	b	3464 <deflate_stored+0x3d4>
    313c:	ldur	x8, [x29, #-16]
    3140:	ldr	x8, [x8]
    3144:	ldr	w9, [x8, #32]
    3148:	ldur	w10, [x29, #-36]
    314c:	subs	w9, w9, w10
    3150:	stur	w9, [x29, #-36]
    3154:	ldur	x8, [x29, #-16]
    3158:	ldr	w9, [x8, #172]
    315c:	mov	w8, w9
    3160:	ldur	x11, [x29, #-16]
    3164:	ldr	x11, [x11, #152]
    3168:	subs	x8, x8, x11
    316c:	stur	w8, [x29, #-32]
    3170:	ldur	w8, [x29, #-28]
    3174:	mov	w11, w8
    3178:	ldur	w8, [x29, #-32]
    317c:	mov	w12, w8
    3180:	ldur	x13, [x29, #-16]
    3184:	ldr	x13, [x13]
    3188:	ldr	w8, [x13, #8]
    318c:	mov	w13, w8
    3190:	add	x12, x12, x13
    3194:	cmp	x11, x12
    3198:	b.ls	31b4 <deflate_stored+0x124>  // b.plast
    319c:	ldur	w8, [x29, #-32]
    31a0:	ldur	x9, [x29, #-16]
    31a4:	ldr	x9, [x9]
    31a8:	ldr	w10, [x9, #8]
    31ac:	add	w8, w8, w10
    31b0:	stur	w8, [x29, #-28]
    31b4:	ldur	w8, [x29, #-28]
    31b8:	ldur	w9, [x29, #-36]
    31bc:	cmp	w8, w9
    31c0:	b.ls	31cc <deflate_stored+0x13c>  // b.plast
    31c4:	ldur	w8, [x29, #-36]
    31c8:	stur	w8, [x29, #-28]
    31cc:	ldur	w8, [x29, #-28]
    31d0:	ldur	w9, [x29, #-24]
    31d4:	cmp	w8, w9
    31d8:	b.cs	321c <deflate_stored+0x18c>  // b.hs, b.nlast
    31dc:	ldur	w8, [x29, #-28]
    31e0:	cbnz	w8, 31f0 <deflate_stored+0x160>
    31e4:	ldur	w8, [x29, #-20]
    31e8:	cmp	w8, #0x4
    31ec:	b.ne	3218 <deflate_stored+0x188>  // b.any
    31f0:	ldur	w8, [x29, #-20]
    31f4:	cbz	w8, 3218 <deflate_stored+0x188>
    31f8:	ldur	w8, [x29, #-28]
    31fc:	ldur	w9, [x29, #-32]
    3200:	ldur	x10, [x29, #-16]
    3204:	ldr	x10, [x10]
    3208:	ldr	w11, [x10, #8]
    320c:	add	w9, w9, w11
    3210:	cmp	w8, w9
    3214:	b.eq	321c <deflate_stored+0x18c>  // b.none
    3218:	b	3464 <deflate_stored+0x3d4>
    321c:	ldur	w8, [x29, #-20]
    3220:	mov	w9, #0x0                   	// #0
    3224:	cmp	w8, #0x4
    3228:	str	w9, [sp, #36]
    322c:	b.ne	3254 <deflate_stored+0x1c4>  // b.any
    3230:	ldur	w8, [x29, #-28]
    3234:	ldur	w9, [x29, #-32]
    3238:	ldur	x10, [x29, #-16]
    323c:	ldr	x10, [x10]
    3240:	ldr	w11, [x10, #8]
    3244:	add	w9, w9, w11
    3248:	cmp	w8, w9
    324c:	cset	w8, eq  // eq = none
    3250:	str	w8, [sp, #36]
    3254:	ldr	w8, [sp, #36]
    3258:	mov	w9, #0x1                   	// #1
    325c:	mov	w10, wzr
    3260:	tst	w8, #0x1
    3264:	csel	w8, w9, w10, ne  // ne = any
    3268:	stur	w8, [x29, #-40]
    326c:	ldur	x0, [x29, #-16]
    3270:	ldur	w3, [x29, #-40]
    3274:	mov	x11, xzr
    3278:	mov	x1, x11
    327c:	mov	x2, x11
    3280:	bl	0 <_tr_stored_block>
    3284:	ldur	w8, [x29, #-28]
    3288:	ldur	x11, [x29, #-16]
    328c:	ldr	x11, [x11, #16]
    3290:	ldur	x12, [x29, #-16]
    3294:	ldr	x12, [x12, #40]
    3298:	subs	x12, x12, #0x4
    329c:	add	x11, x11, x12
    32a0:	strb	w8, [x11]
    32a4:	ldur	w8, [x29, #-28]
    32a8:	mov	x11, #0x8                   	// #8
    32ac:	lsr	w8, w8, #8
    32b0:	ldur	x12, [x29, #-16]
    32b4:	ldr	x12, [x12, #16]
    32b8:	ldur	x13, [x29, #-16]
    32bc:	ldr	x13, [x13, #40]
    32c0:	subs	x13, x13, #0x3
    32c4:	add	x12, x12, x13
    32c8:	strb	w8, [x12]
    32cc:	ldur	w8, [x29, #-28]
    32d0:	mvn	w8, w8
    32d4:	ldur	x12, [x29, #-16]
    32d8:	ldr	x12, [x12, #16]
    32dc:	ldur	x13, [x29, #-16]
    32e0:	ldr	x13, [x13, #40]
    32e4:	subs	x13, x13, #0x2
    32e8:	add	x12, x12, x13
    32ec:	strb	w8, [x12]
    32f0:	ldur	w8, [x29, #-28]
    32f4:	mvn	w8, w8
    32f8:	lsr	w8, w8, w11
    32fc:	ldur	x12, [x29, #-16]
    3300:	ldr	x12, [x12, #16]
    3304:	ldur	x13, [x29, #-16]
    3308:	ldr	x13, [x13, #40]
    330c:	subs	x13, x13, #0x1
    3310:	add	x12, x12, x13
    3314:	strb	w8, [x12]
    3318:	ldur	x12, [x29, #-16]
    331c:	ldr	x0, [x12]
    3320:	bl	2f18 <flush_pending>
    3324:	ldur	w8, [x29, #-32]
    3328:	cbz	w8, 33e8 <deflate_stored+0x358>
    332c:	ldur	w8, [x29, #-32]
    3330:	ldur	w9, [x29, #-28]
    3334:	cmp	w8, w9
    3338:	b.ls	3344 <deflate_stored+0x2b4>  // b.plast
    333c:	ldur	w8, [x29, #-28]
    3340:	stur	w8, [x29, #-32]
    3344:	ldur	x8, [x29, #-16]
    3348:	ldr	x8, [x8]
    334c:	ldr	x0, [x8, #24]
    3350:	ldur	x8, [x29, #-16]
    3354:	ldr	x8, [x8, #96]
    3358:	ldur	x9, [x29, #-16]
    335c:	ldr	x9, [x9, #152]
    3360:	add	x1, x8, x9
    3364:	ldur	w10, [x29, #-32]
    3368:	mov	w2, w10
    336c:	bl	0 <memcpy>
    3370:	ldur	w10, [x29, #-32]
    3374:	mov	w8, w10
    3378:	ldur	x9, [x29, #-16]
    337c:	ldr	x9, [x9]
    3380:	ldr	x11, [x9, #24]
    3384:	add	x8, x11, x8
    3388:	str	x8, [x9, #24]
    338c:	ldur	w10, [x29, #-32]
    3390:	ldur	x8, [x29, #-16]
    3394:	ldr	x8, [x8]
    3398:	ldr	w12, [x8, #32]
    339c:	subs	w10, w12, w10
    33a0:	str	w10, [x8, #32]
    33a4:	ldur	w10, [x29, #-32]
    33a8:	mov	w8, w10
    33ac:	ldur	x9, [x29, #-16]
    33b0:	ldr	x9, [x9]
    33b4:	ldr	x11, [x9, #40]
    33b8:	add	x8, x11, x8
    33bc:	str	x8, [x9, #40]
    33c0:	ldur	w10, [x29, #-32]
    33c4:	mov	w8, w10
    33c8:	ldur	x9, [x29, #-16]
    33cc:	ldr	x11, [x9, #152]
    33d0:	add	x8, x11, x8
    33d4:	str	x8, [x9, #152]
    33d8:	ldur	w10, [x29, #-32]
    33dc:	ldur	w12, [x29, #-28]
    33e0:	subs	w10, w12, w10
    33e4:	stur	w10, [x29, #-28]
    33e8:	ldur	w8, [x29, #-28]
    33ec:	cbz	w8, 345c <deflate_stored+0x3cc>
    33f0:	ldur	x8, [x29, #-16]
    33f4:	ldr	x0, [x8]
    33f8:	ldur	x8, [x29, #-16]
    33fc:	ldr	x8, [x8]
    3400:	ldr	x1, [x8, #24]
    3404:	ldur	w2, [x29, #-28]
    3408:	bl	5f40 <read_buf>
    340c:	ldur	w9, [x29, #-28]
    3410:	mov	w8, w9
    3414:	ldur	x10, [x29, #-16]
    3418:	ldr	x10, [x10]
    341c:	ldr	x11, [x10, #24]
    3420:	add	x8, x11, x8
    3424:	str	x8, [x10, #24]
    3428:	ldur	w9, [x29, #-28]
    342c:	ldur	x8, [x29, #-16]
    3430:	ldr	x8, [x8]
    3434:	ldr	w12, [x8, #32]
    3438:	subs	w9, w12, w9
    343c:	str	w9, [x8, #32]
    3440:	ldur	w9, [x29, #-28]
    3444:	mov	w8, w9
    3448:	ldur	x10, [x29, #-16]
    344c:	ldr	x10, [x10]
    3450:	ldr	x11, [x10, #40]
    3454:	add	x8, x11, x8
    3458:	str	x8, [x10, #40]
    345c:	ldur	w8, [x29, #-40]
    3460:	cbz	w8, 3104 <deflate_stored+0x74>
    3464:	ldur	x8, [x29, #-16]
    3468:	ldr	x8, [x8]
    346c:	ldr	w9, [x8, #8]
    3470:	ldur	w10, [x29, #-44]
    3474:	subs	w9, w10, w9
    3478:	stur	w9, [x29, #-44]
    347c:	ldur	w9, [x29, #-44]
    3480:	cbz	w9, 3648 <deflate_stored+0x5b8>
    3484:	ldur	w8, [x29, #-44]
    3488:	ldur	x9, [x29, #-16]
    348c:	ldr	w10, [x9, #80]
    3490:	cmp	w8, w10
    3494:	b.cc	34f4 <deflate_stored+0x464>  // b.lo, b.ul, b.last
    3498:	ldur	x8, [x29, #-16]
    349c:	mov	w9, #0x2                   	// #2
    34a0:	str	w9, [x8, #5928]
    34a4:	ldur	x8, [x29, #-16]
    34a8:	ldr	x0, [x8, #96]
    34ac:	ldur	x8, [x29, #-16]
    34b0:	ldr	x8, [x8]
    34b4:	ldr	x8, [x8]
    34b8:	ldur	x10, [x29, #-16]
    34bc:	ldr	w9, [x10, #80]
    34c0:	mov	w10, w9
    34c4:	mov	x11, xzr
    34c8:	subs	x10, x11, x10
    34cc:	add	x1, x8, x10
    34d0:	ldur	x8, [x29, #-16]
    34d4:	ldr	w9, [x8, #80]
    34d8:	mov	w2, w9
    34dc:	bl	0 <memcpy>
    34e0:	ldur	x8, [x29, #-16]
    34e4:	ldr	w9, [x8, #80]
    34e8:	ldur	x8, [x29, #-16]
    34ec:	str	w9, [x8, #172]
    34f0:	b	35dc <deflate_stored+0x54c>
    34f4:	ldur	x8, [x29, #-16]
    34f8:	ldr	x8, [x8, #104]
    34fc:	ldur	x9, [x29, #-16]
    3500:	ldr	w10, [x9, #172]
    3504:	mov	w9, w10
    3508:	subs	x8, x8, x9
    350c:	ldur	w10, [x29, #-44]
    3510:	mov	w9, w10
    3514:	cmp	x8, x9
    3518:	b.hi	3584 <deflate_stored+0x4f4>  // b.pmore
    351c:	ldur	x8, [x29, #-16]
    3520:	ldr	w9, [x8, #80]
    3524:	ldur	x8, [x29, #-16]
    3528:	ldr	w10, [x8, #172]
    352c:	subs	w9, w10, w9
    3530:	str	w9, [x8, #172]
    3534:	ldur	x8, [x29, #-16]
    3538:	ldr	x0, [x8, #96]
    353c:	ldur	x8, [x29, #-16]
    3540:	ldr	x8, [x8, #96]
    3544:	ldur	x11, [x29, #-16]
    3548:	ldr	w9, [x11, #80]
    354c:	mov	w11, w9
    3550:	add	x1, x8, x11
    3554:	ldur	x8, [x29, #-16]
    3558:	ldr	w9, [x8, #172]
    355c:	mov	w2, w9
    3560:	bl	0 <memcpy>
    3564:	ldur	x8, [x29, #-16]
    3568:	ldr	w9, [x8, #5928]
    356c:	cmp	w9, #0x2
    3570:	b.cs	3584 <deflate_stored+0x4f4>  // b.hs, b.nlast
    3574:	ldur	x8, [x29, #-16]
    3578:	ldr	w9, [x8, #5928]
    357c:	add	w9, w9, #0x1
    3580:	str	w9, [x8, #5928]
    3584:	ldur	x8, [x29, #-16]
    3588:	ldr	x8, [x8, #96]
    358c:	ldur	x9, [x29, #-16]
    3590:	ldr	w10, [x9, #172]
    3594:	mov	w9, w10
    3598:	add	x0, x8, x9
    359c:	ldur	x8, [x29, #-16]
    35a0:	ldr	x8, [x8]
    35a4:	ldr	x8, [x8]
    35a8:	ldur	w10, [x29, #-44]
    35ac:	mov	w9, w10
    35b0:	mov	x11, xzr
    35b4:	subs	x9, x11, x9
    35b8:	add	x1, x8, x9
    35bc:	ldur	w10, [x29, #-44]
    35c0:	mov	w2, w10
    35c4:	bl	0 <memcpy>
    35c8:	ldur	w10, [x29, #-44]
    35cc:	ldur	x8, [x29, #-16]
    35d0:	ldr	w12, [x8, #172]
    35d4:	add	w10, w12, w10
    35d8:	str	w10, [x8, #172]
    35dc:	ldur	x8, [x29, #-16]
    35e0:	ldr	w9, [x8, #172]
    35e4:	mov	w8, w9
    35e8:	ldur	x10, [x29, #-16]
    35ec:	str	x8, [x10, #152]
    35f0:	ldur	w9, [x29, #-44]
    35f4:	ldur	x8, [x29, #-16]
    35f8:	ldr	w11, [x8, #80]
    35fc:	ldur	x8, [x29, #-16]
    3600:	ldr	w12, [x8, #5932]
    3604:	subs	w11, w11, w12
    3608:	cmp	w9, w11
    360c:	b.ls	362c <deflate_stored+0x59c>  // b.plast
    3610:	ldur	x8, [x29, #-16]
    3614:	ldr	w9, [x8, #80]
    3618:	ldur	x8, [x29, #-16]
    361c:	ldr	w10, [x8, #5932]
    3620:	subs	w9, w9, w10
    3624:	str	w9, [sp, #32]
    3628:	b	3634 <deflate_stored+0x5a4>
    362c:	ldur	w8, [x29, #-44]
    3630:	str	w8, [sp, #32]
    3634:	ldr	w8, [sp, #32]
    3638:	ldur	x9, [x29, #-16]
    363c:	ldr	w10, [x9, #5932]
    3640:	add	w8, w10, w8
    3644:	str	w8, [x9, #5932]
    3648:	ldur	x8, [x29, #-16]
    364c:	ldr	x8, [x8, #5944]
    3650:	ldur	x9, [x29, #-16]
    3654:	ldr	w10, [x9, #172]
    3658:	mov	w9, w10
    365c:	cmp	x8, x9
    3660:	b.cs	3678 <deflate_stored+0x5e8>  // b.hs, b.nlast
    3664:	ldur	x8, [x29, #-16]
    3668:	ldr	w9, [x8, #172]
    366c:	mov	w8, w9
    3670:	ldur	x10, [x29, #-16]
    3674:	str	x8, [x10, #5944]
    3678:	ldur	w8, [x29, #-40]
    367c:	cbz	w8, 368c <deflate_stored+0x5fc>
    3680:	mov	w8, #0x3                   	// #3
    3684:	stur	w8, [x29, #-4]
    3688:	b	3a44 <deflate_stored+0x9b4>
    368c:	ldur	w8, [x29, #-20]
    3690:	cbz	w8, 36d8 <deflate_stored+0x648>
    3694:	ldur	w8, [x29, #-20]
    3698:	cmp	w8, #0x4
    369c:	b.eq	36d8 <deflate_stored+0x648>  // b.none
    36a0:	ldur	x8, [x29, #-16]
    36a4:	ldr	x8, [x8]
    36a8:	ldr	w9, [x8, #8]
    36ac:	cbnz	w9, 36d8 <deflate_stored+0x648>
    36b0:	ldur	x8, [x29, #-16]
    36b4:	ldr	w9, [x8, #172]
    36b8:	mov	w8, w9
    36bc:	ldur	x10, [x29, #-16]
    36c0:	ldr	x10, [x10, #152]
    36c4:	cmp	x8, x10
    36c8:	b.ne	36d8 <deflate_stored+0x648>  // b.any
    36cc:	mov	w8, #0x1                   	// #1
    36d0:	stur	w8, [x29, #-4]
    36d4:	b	3a44 <deflate_stored+0x9b4>
    36d8:	ldur	x8, [x29, #-16]
    36dc:	ldr	x8, [x8, #104]
    36e0:	ldur	x9, [x29, #-16]
    36e4:	ldr	w10, [x9, #172]
    36e8:	mov	w9, w10
    36ec:	subs	x8, x8, x9
    36f0:	subs	x8, x8, #0x1
    36f4:	stur	w8, [x29, #-36]
    36f8:	ldur	x9, [x29, #-16]
    36fc:	ldr	x9, [x9]
    3700:	ldr	w8, [x9, #8]
    3704:	ldur	w10, [x29, #-36]
    3708:	cmp	w8, w10
    370c:	b.ls	37c4 <deflate_stored+0x734>  // b.plast
    3710:	ldur	x8, [x29, #-16]
    3714:	ldr	x8, [x8, #152]
    3718:	ldur	x9, [x29, #-16]
    371c:	ldr	w10, [x9, #80]
    3720:	mov	w9, w10
    3724:	cmp	x8, x9
    3728:	b.lt	37c4 <deflate_stored+0x734>  // b.tstop
    372c:	ldur	x8, [x29, #-16]
    3730:	ldr	w9, [x8, #80]
    3734:	mov	w8, w9
    3738:	ldur	x10, [x29, #-16]
    373c:	ldr	x11, [x10, #152]
    3740:	subs	x8, x11, x8
    3744:	str	x8, [x10, #152]
    3748:	ldur	x8, [x29, #-16]
    374c:	ldr	w9, [x8, #80]
    3750:	ldur	x8, [x29, #-16]
    3754:	ldr	w12, [x8, #172]
    3758:	subs	w9, w12, w9
    375c:	str	w9, [x8, #172]
    3760:	ldur	x8, [x29, #-16]
    3764:	ldr	x0, [x8, #96]
    3768:	ldur	x8, [x29, #-16]
    376c:	ldr	x8, [x8, #96]
    3770:	ldur	x10, [x29, #-16]
    3774:	ldr	w9, [x10, #80]
    3778:	mov	w10, w9
    377c:	add	x1, x8, x10
    3780:	ldur	x8, [x29, #-16]
    3784:	ldr	w9, [x8, #172]
    3788:	mov	w2, w9
    378c:	bl	0 <memcpy>
    3790:	ldur	x8, [x29, #-16]
    3794:	ldr	w9, [x8, #5928]
    3798:	cmp	w9, #0x2
    379c:	b.cs	37b0 <deflate_stored+0x720>  // b.hs, b.nlast
    37a0:	ldur	x8, [x29, #-16]
    37a4:	ldr	w9, [x8, #5928]
    37a8:	add	w9, w9, #0x1
    37ac:	str	w9, [x8, #5928]
    37b0:	ldur	x8, [x29, #-16]
    37b4:	ldr	w9, [x8, #80]
    37b8:	ldur	w10, [x29, #-36]
    37bc:	add	w9, w10, w9
    37c0:	stur	w9, [x29, #-36]
    37c4:	ldur	w8, [x29, #-36]
    37c8:	ldur	x9, [x29, #-16]
    37cc:	ldr	x9, [x9]
    37d0:	ldr	w10, [x9, #8]
    37d4:	cmp	w8, w10
    37d8:	b.ls	37ec <deflate_stored+0x75c>  // b.plast
    37dc:	ldur	x8, [x29, #-16]
    37e0:	ldr	x8, [x8]
    37e4:	ldr	w9, [x8, #8]
    37e8:	stur	w9, [x29, #-36]
    37ec:	ldur	w8, [x29, #-36]
    37f0:	cbz	w8, 3830 <deflate_stored+0x7a0>
    37f4:	ldur	x8, [x29, #-16]
    37f8:	ldr	x0, [x8]
    37fc:	ldur	x8, [x29, #-16]
    3800:	ldr	x8, [x8, #96]
    3804:	ldur	x9, [x29, #-16]
    3808:	ldr	w10, [x9, #172]
    380c:	mov	w9, w10
    3810:	add	x1, x8, x9
    3814:	ldur	w2, [x29, #-36]
    3818:	bl	5f40 <read_buf>
    381c:	ldur	w10, [x29, #-36]
    3820:	ldur	x8, [x29, #-16]
    3824:	ldr	w11, [x8, #172]
    3828:	add	w10, w11, w10
    382c:	str	w10, [x8, #172]
    3830:	ldur	x8, [x29, #-16]
    3834:	ldr	x8, [x8, #5944]
    3838:	ldur	x9, [x29, #-16]
    383c:	ldr	w10, [x9, #172]
    3840:	mov	w9, w10
    3844:	cmp	x8, x9
    3848:	b.cs	3860 <deflate_stored+0x7d0>  // b.hs, b.nlast
    384c:	ldur	x8, [x29, #-16]
    3850:	ldr	w9, [x8, #172]
    3854:	mov	w8, w9
    3858:	ldur	x10, [x29, #-16]
    385c:	str	x8, [x10, #5944]
    3860:	ldur	x8, [x29, #-16]
    3864:	ldr	w9, [x8, #5940]
    3868:	add	w9, w9, #0x2a
    386c:	asr	w9, w9, #3
    3870:	stur	w9, [x29, #-36]
    3874:	ldur	x8, [x29, #-16]
    3878:	ldr	x8, [x8, #24]
    387c:	ldur	w9, [x29, #-36]
    3880:	mov	w10, w9
    3884:	subs	x8, x8, x10
    3888:	mov	x10, #0xffff                	// #65535
    388c:	cmp	x8, x10
    3890:	b.ls	38a0 <deflate_stored+0x810>  // b.plast
    3894:	mov	x8, #0xffff                	// #65535
    3898:	str	x8, [sp, #24]
    389c:	b	38b8 <deflate_stored+0x828>
    38a0:	ldur	x8, [x29, #-16]
    38a4:	ldr	x8, [x8, #24]
    38a8:	ldur	w9, [x29, #-36]
    38ac:	mov	w10, w9
    38b0:	subs	x8, x8, x10
    38b4:	str	x8, [sp, #24]
    38b8:	ldr	x8, [sp, #24]
    38bc:	stur	w8, [x29, #-36]
    38c0:	ldur	w8, [x29, #-36]
    38c4:	ldur	x9, [x29, #-16]
    38c8:	ldr	w10, [x9, #80]
    38cc:	cmp	w8, w10
    38d0:	b.ls	38e4 <deflate_stored+0x854>  // b.plast
    38d4:	ldur	x8, [x29, #-16]
    38d8:	ldr	w9, [x8, #80]
    38dc:	str	w9, [sp, #20]
    38e0:	b	38ec <deflate_stored+0x85c>
    38e4:	ldur	w8, [x29, #-36]
    38e8:	str	w8, [sp, #20]
    38ec:	ldr	w8, [sp, #20]
    38f0:	stur	w8, [x29, #-24]
    38f4:	ldur	x9, [x29, #-16]
    38f8:	ldr	w8, [x9, #172]
    38fc:	mov	w9, w8
    3900:	ldur	x10, [x29, #-16]
    3904:	ldr	x10, [x10, #152]
    3908:	subs	x9, x9, x10
    390c:	stur	w9, [x29, #-32]
    3910:	ldur	w8, [x29, #-32]
    3914:	ldur	w9, [x29, #-24]
    3918:	cmp	w8, w9
    391c:	b.cs	395c <deflate_stored+0x8cc>  // b.hs, b.nlast
    3920:	ldur	w8, [x29, #-32]
    3924:	cbnz	w8, 3934 <deflate_stored+0x8a4>
    3928:	ldur	w8, [x29, #-20]
    392c:	cmp	w8, #0x4
    3930:	b.ne	3a2c <deflate_stored+0x99c>  // b.any
    3934:	ldur	w8, [x29, #-20]
    3938:	cbz	w8, 3a2c <deflate_stored+0x99c>
    393c:	ldur	x8, [x29, #-16]
    3940:	ldr	x8, [x8]
    3944:	ldr	w9, [x8, #8]
    3948:	cbnz	w9, 3a2c <deflate_stored+0x99c>
    394c:	ldur	w8, [x29, #-32]
    3950:	ldur	w9, [x29, #-36]
    3954:	cmp	w8, w9
    3958:	b.hi	3a2c <deflate_stored+0x99c>  // b.pmore
    395c:	ldur	w8, [x29, #-32]
    3960:	ldur	w9, [x29, #-36]
    3964:	cmp	w8, w9
    3968:	b.ls	3978 <deflate_stored+0x8e8>  // b.plast
    396c:	ldur	w8, [x29, #-36]
    3970:	str	w8, [sp, #16]
    3974:	b	3980 <deflate_stored+0x8f0>
    3978:	ldur	w8, [x29, #-32]
    397c:	str	w8, [sp, #16]
    3980:	ldr	w8, [sp, #16]
    3984:	stur	w8, [x29, #-28]
    3988:	ldur	w8, [x29, #-20]
    398c:	mov	w9, #0x0                   	// #0
    3990:	cmp	w8, #0x4
    3994:	str	w9, [sp, #12]
    3998:	b.ne	39c8 <deflate_stored+0x938>  // b.any
    399c:	ldur	x8, [x29, #-16]
    39a0:	ldr	x8, [x8]
    39a4:	ldr	w9, [x8, #8]
    39a8:	mov	w10, #0x0                   	// #0
    39ac:	str	w10, [sp, #12]
    39b0:	cbnz	w9, 39c8 <deflate_stored+0x938>
    39b4:	ldur	w8, [x29, #-28]
    39b8:	ldur	w9, [x29, #-32]
    39bc:	cmp	w8, w9
    39c0:	cset	w8, eq  // eq = none
    39c4:	str	w8, [sp, #12]
    39c8:	ldr	w8, [sp, #12]
    39cc:	mov	w9, #0x1                   	// #1
    39d0:	mov	w10, wzr
    39d4:	tst	w8, #0x1
    39d8:	csel	w8, w9, w10, ne  // ne = any
    39dc:	stur	w8, [x29, #-40]
    39e0:	ldur	x0, [x29, #-16]
    39e4:	ldur	x11, [x29, #-16]
    39e8:	ldr	x11, [x11, #96]
    39ec:	ldur	x12, [x29, #-16]
    39f0:	ldr	x12, [x12, #152]
    39f4:	add	x1, x11, x12
    39f8:	ldur	w8, [x29, #-28]
    39fc:	mov	w2, w8
    3a00:	ldur	w3, [x29, #-40]
    3a04:	bl	0 <_tr_stored_block>
    3a08:	ldur	w8, [x29, #-28]
    3a0c:	mov	w11, w8
    3a10:	ldur	x12, [x29, #-16]
    3a14:	ldr	x13, [x12, #152]
    3a18:	add	x11, x13, x11
    3a1c:	str	x11, [x12, #152]
    3a20:	ldur	x11, [x29, #-16]
    3a24:	ldr	x0, [x11]
    3a28:	bl	2f18 <flush_pending>
    3a2c:	ldur	w8, [x29, #-40]
    3a30:	mov	w9, wzr
    3a34:	mov	w10, #0x2                   	// #2
    3a38:	cmp	w8, #0x0
    3a3c:	csel	w8, w10, w9, ne  // ne = any
    3a40:	stur	w8, [x29, #-4]
    3a44:	ldur	w0, [x29, #-4]
    3a48:	ldp	x29, x30, [sp, #96]
    3a4c:	add	sp, sp, #0x70
    3a50:	ret

0000000000003a54 <deflate_huff>:
    3a54:	sub	sp, sp, #0x60
    3a58:	stp	x29, x30, [sp, #80]
    3a5c:	add	x29, sp, #0x50
    3a60:	stur	x0, [x29, #-16]
    3a64:	stur	w1, [x29, #-20]
    3a68:	ldur	x8, [x29, #-16]
    3a6c:	ldr	w9, [x8, #180]
    3a70:	cbnz	w9, 3a9c <deflate_huff+0x48>
    3a74:	ldur	x0, [x29, #-16]
    3a78:	bl	b18 <fill_window>
    3a7c:	ldur	x8, [x29, #-16]
    3a80:	ldr	w9, [x8, #180]
    3a84:	cbnz	w9, 3a9c <deflate_huff+0x48>
    3a88:	ldur	w8, [x29, #-20]
    3a8c:	cbnz	w8, 3a98 <deflate_huff+0x44>
    3a90:	stur	wzr, [x29, #-4]
    3a94:	b	3dc8 <deflate_huff+0x374>
    3a98:	b	3c3c <deflate_huff+0x1e8>
    3a9c:	ldur	x8, [x29, #-16]
    3aa0:	str	wzr, [x8, #160]
    3aa4:	ldur	x8, [x29, #-16]
    3aa8:	ldr	x8, [x8, #96]
    3aac:	ldur	x9, [x29, #-16]
    3ab0:	ldr	w10, [x9, #172]
    3ab4:	mov	w9, w10
    3ab8:	add	x8, x8, x9
    3abc:	ldrb	w10, [x8]
    3ac0:	sturb	w10, [x29, #-25]
    3ac4:	ldur	x8, [x29, #-16]
    3ac8:	ldr	x8, [x8, #5904]
    3acc:	ldur	x9, [x29, #-16]
    3ad0:	ldr	w10, [x9, #5900]
    3ad4:	mov	w9, w10
    3ad8:	mov	x11, #0x2                   	// #2
    3adc:	mul	x9, x11, x9
    3ae0:	add	x8, x8, x9
    3ae4:	mov	w10, #0x0                   	// #0
    3ae8:	strh	w10, [x8]
    3aec:	ldurb	w10, [x29, #-25]
    3af0:	ldur	x8, [x29, #-16]
    3af4:	ldr	x8, [x8, #5888]
    3af8:	ldur	x9, [x29, #-16]
    3afc:	ldr	w12, [x9, #5900]
    3b00:	mov	w11, w12
    3b04:	mov	w12, w11
    3b08:	add	w12, w12, #0x1
    3b0c:	str	w12, [x9, #5900]
    3b10:	add	x8, x8, x11
    3b14:	strb	w10, [x8]
    3b18:	ldur	x8, [x29, #-16]
    3b1c:	add	x8, x8, #0xd4
    3b20:	ldurb	w10, [x29, #-25]
    3b24:	mov	w9, w10
    3b28:	mov	x11, #0x4                   	// #4
    3b2c:	mul	x9, x11, x9
    3b30:	add	x8, x8, x9
    3b34:	ldrh	w10, [x8]
    3b38:	add	w10, w10, #0x1
    3b3c:	strh	w10, [x8]
    3b40:	ldur	x8, [x29, #-16]
    3b44:	ldr	w10, [x8, #5900]
    3b48:	ldur	x8, [x29, #-16]
    3b4c:	ldr	w12, [x8, #5896]
    3b50:	subs	w12, w12, #0x1
    3b54:	cmp	w10, w12
    3b58:	cset	w10, eq  // eq = none
    3b5c:	and	w10, w10, #0x1
    3b60:	stur	w10, [x29, #-24]
    3b64:	ldur	x8, [x29, #-16]
    3b68:	ldr	w10, [x8, #180]
    3b6c:	subs	w10, w10, #0x1
    3b70:	str	w10, [x8, #180]
    3b74:	ldur	x8, [x29, #-16]
    3b78:	ldr	w10, [x8, #172]
    3b7c:	add	w10, w10, #0x1
    3b80:	str	w10, [x8, #172]
    3b84:	ldur	w10, [x29, #-24]
    3b88:	cbz	w10, 3c38 <deflate_huff+0x1e4>
    3b8c:	ldur	x0, [x29, #-16]
    3b90:	ldur	x8, [x29, #-16]
    3b94:	ldr	x8, [x8, #152]
    3b98:	cmp	x8, #0x0
    3b9c:	cset	w9, lt  // lt = tstop
    3ba0:	str	x0, [sp, #40]
    3ba4:	tbnz	w9, #0, 3bc8 <deflate_huff+0x174>
    3ba8:	ldur	x8, [x29, #-16]
    3bac:	ldr	x8, [x8, #96]
    3bb0:	ldur	x9, [x29, #-16]
    3bb4:	ldr	x9, [x9, #152]
    3bb8:	and	x9, x9, #0xffffffff
    3bbc:	add	x8, x8, x9
    3bc0:	str	x8, [sp, #32]
    3bc4:	b	3bd0 <deflate_huff+0x17c>
    3bc8:	mov	x8, xzr
    3bcc:	str	x8, [sp, #32]
    3bd0:	ldr	x8, [sp, #32]
    3bd4:	ldur	x9, [x29, #-16]
    3bd8:	ldr	w10, [x9, #172]
    3bdc:	mov	w9, w10
    3be0:	ldur	x11, [x29, #-16]
    3be4:	ldr	x11, [x11, #152]
    3be8:	subs	x2, x9, x11
    3bec:	ldr	x0, [sp, #40]
    3bf0:	mov	x1, x8
    3bf4:	mov	w10, wzr
    3bf8:	mov	w3, w10
    3bfc:	bl	0 <_tr_flush_block>
    3c00:	ldur	x8, [x29, #-16]
    3c04:	ldr	w10, [x8, #172]
    3c08:	mov	w8, w10
    3c0c:	ldur	x9, [x29, #-16]
    3c10:	str	x8, [x9, #152]
    3c14:	ldur	x8, [x29, #-16]
    3c18:	ldr	x0, [x8]
    3c1c:	bl	2f18 <flush_pending>
    3c20:	ldur	x8, [x29, #-16]
    3c24:	ldr	x8, [x8]
    3c28:	ldr	w10, [x8, #32]
    3c2c:	cbnz	w10, 3c38 <deflate_huff+0x1e4>
    3c30:	stur	wzr, [x29, #-4]
    3c34:	b	3dc8 <deflate_huff+0x374>
    3c38:	b	3a68 <deflate_huff+0x14>
    3c3c:	ldur	x8, [x29, #-16]
    3c40:	str	wzr, [x8, #5932]
    3c44:	ldur	w9, [x29, #-20]
    3c48:	cmp	w9, #0x4
    3c4c:	b.ne	3d08 <deflate_huff+0x2b4>  // b.any
    3c50:	ldur	x0, [x29, #-16]
    3c54:	ldur	x8, [x29, #-16]
    3c58:	ldr	x8, [x8, #152]
    3c5c:	cmp	x8, #0x0
    3c60:	cset	w9, lt  // lt = tstop
    3c64:	str	x0, [sp, #24]
    3c68:	tbnz	w9, #0, 3c8c <deflate_huff+0x238>
    3c6c:	ldur	x8, [x29, #-16]
    3c70:	ldr	x8, [x8, #96]
    3c74:	ldur	x9, [x29, #-16]
    3c78:	ldr	x9, [x9, #152]
    3c7c:	and	x9, x9, #0xffffffff
    3c80:	add	x8, x8, x9
    3c84:	str	x8, [sp, #16]
    3c88:	b	3c94 <deflate_huff+0x240>
    3c8c:	mov	x8, xzr
    3c90:	str	x8, [sp, #16]
    3c94:	ldr	x8, [sp, #16]
    3c98:	ldur	x9, [x29, #-16]
    3c9c:	ldr	w10, [x9, #172]
    3ca0:	mov	w9, w10
    3ca4:	ldur	x11, [x29, #-16]
    3ca8:	ldr	x11, [x11, #152]
    3cac:	subs	x2, x9, x11
    3cb0:	ldr	x0, [sp, #24]
    3cb4:	mov	x1, x8
    3cb8:	mov	w3, #0x1                   	// #1
    3cbc:	bl	0 <_tr_flush_block>
    3cc0:	ldur	x8, [x29, #-16]
    3cc4:	ldr	w10, [x8, #172]
    3cc8:	mov	w8, w10
    3ccc:	ldur	x9, [x29, #-16]
    3cd0:	str	x8, [x9, #152]
    3cd4:	ldur	x8, [x29, #-16]
    3cd8:	ldr	x0, [x8]
    3cdc:	bl	2f18 <flush_pending>
    3ce0:	ldur	x8, [x29, #-16]
    3ce4:	ldr	x8, [x8]
    3ce8:	ldr	w10, [x8, #32]
    3cec:	cbnz	w10, 3cfc <deflate_huff+0x2a8>
    3cf0:	mov	w8, #0x2                   	// #2
    3cf4:	stur	w8, [x29, #-4]
    3cf8:	b	3dc8 <deflate_huff+0x374>
    3cfc:	mov	w8, #0x3                   	// #3
    3d00:	stur	w8, [x29, #-4]
    3d04:	b	3dc8 <deflate_huff+0x374>
    3d08:	ldur	x8, [x29, #-16]
    3d0c:	ldr	w9, [x8, #5900]
    3d10:	cbz	w9, 3dc0 <deflate_huff+0x36c>
    3d14:	ldur	x0, [x29, #-16]
    3d18:	ldur	x8, [x29, #-16]
    3d1c:	ldr	x8, [x8, #152]
    3d20:	cmp	x8, #0x0
    3d24:	cset	w9, lt  // lt = tstop
    3d28:	str	x0, [sp, #8]
    3d2c:	tbnz	w9, #0, 3d50 <deflate_huff+0x2fc>
    3d30:	ldur	x8, [x29, #-16]
    3d34:	ldr	x8, [x8, #96]
    3d38:	ldur	x9, [x29, #-16]
    3d3c:	ldr	x9, [x9, #152]
    3d40:	and	x9, x9, #0xffffffff
    3d44:	add	x8, x8, x9
    3d48:	str	x8, [sp]
    3d4c:	b	3d58 <deflate_huff+0x304>
    3d50:	mov	x8, xzr
    3d54:	str	x8, [sp]
    3d58:	ldr	x8, [sp]
    3d5c:	ldur	x9, [x29, #-16]
    3d60:	ldr	w10, [x9, #172]
    3d64:	mov	w9, w10
    3d68:	ldur	x11, [x29, #-16]
    3d6c:	ldr	x11, [x11, #152]
    3d70:	subs	x2, x9, x11
    3d74:	ldr	x0, [sp, #8]
    3d78:	mov	x1, x8
    3d7c:	mov	w10, wzr
    3d80:	mov	w3, w10
    3d84:	bl	0 <_tr_flush_block>
    3d88:	ldur	x8, [x29, #-16]
    3d8c:	ldr	w10, [x8, #172]
    3d90:	mov	w8, w10
    3d94:	ldur	x9, [x29, #-16]
    3d98:	str	x8, [x9, #152]
    3d9c:	ldur	x8, [x29, #-16]
    3da0:	ldr	x0, [x8]
    3da4:	bl	2f18 <flush_pending>
    3da8:	ldur	x8, [x29, #-16]
    3dac:	ldr	x8, [x8]
    3db0:	ldr	w10, [x8, #32]
    3db4:	cbnz	w10, 3dc0 <deflate_huff+0x36c>
    3db8:	stur	wzr, [x29, #-4]
    3dbc:	b	3dc8 <deflate_huff+0x374>
    3dc0:	mov	w8, #0x1                   	// #1
    3dc4:	stur	w8, [x29, #-4]
    3dc8:	ldur	w0, [x29, #-4]
    3dcc:	ldp	x29, x30, [sp, #80]
    3dd0:	add	sp, sp, #0x60
    3dd4:	ret

0000000000003dd8 <deflate_rle>:
    3dd8:	sub	sp, sp, #0x90
    3ddc:	stp	x29, x30, [sp, #128]
    3de0:	add	x29, sp, #0x80
    3de4:	stur	x0, [x29, #-16]
    3de8:	stur	w1, [x29, #-20]
    3dec:	ldur	x8, [x29, #-16]
    3df0:	ldr	w9, [x8, #180]
    3df4:	cmp	w9, #0x102
    3df8:	b.hi	3e34 <deflate_rle+0x5c>  // b.pmore
    3dfc:	ldur	x0, [x29, #-16]
    3e00:	bl	b18 <fill_window>
    3e04:	ldur	x8, [x29, #-16]
    3e08:	ldr	w9, [x8, #180]
    3e0c:	cmp	w9, #0x102
    3e10:	b.hi	3e24 <deflate_rle+0x4c>  // b.pmore
    3e14:	ldur	w8, [x29, #-20]
    3e18:	cbnz	w8, 3e24 <deflate_rle+0x4c>
    3e1c:	stur	wzr, [x29, #-4]
    3e20:	b	4550 <deflate_rle+0x778>
    3e24:	ldur	x8, [x29, #-16]
    3e28:	ldr	w9, [x8, #180]
    3e2c:	cbnz	w9, 3e34 <deflate_rle+0x5c>
    3e30:	b	43c4 <deflate_rle+0x5ec>
    3e34:	ldur	x8, [x29, #-16]
    3e38:	str	wzr, [x8, #160]
    3e3c:	ldur	x8, [x29, #-16]
    3e40:	ldr	w9, [x8, #180]
    3e44:	cmp	w9, #0x3
    3e48:	b.cc	4084 <deflate_rle+0x2ac>  // b.lo, b.ul, b.last
    3e4c:	ldur	x8, [x29, #-16]
    3e50:	ldr	w9, [x8, #172]
    3e54:	cmp	w9, #0x0
    3e58:	cset	w9, ls  // ls = plast
    3e5c:	tbnz	w9, #0, 4084 <deflate_rle+0x2ac>
    3e60:	ldur	x8, [x29, #-16]
    3e64:	ldr	x8, [x8, #96]
    3e68:	ldur	x9, [x29, #-16]
    3e6c:	ldr	w10, [x9, #172]
    3e70:	mov	w9, w10
    3e74:	add	x8, x8, x9
    3e78:	mov	x9, #0xffffffffffffffff    	// #-1
    3e7c:	add	x8, x8, x9
    3e80:	stur	x8, [x29, #-40]
    3e84:	ldur	x8, [x29, #-40]
    3e88:	ldrb	w10, [x8]
    3e8c:	stur	w10, [x29, #-28]
    3e90:	ldur	w10, [x29, #-28]
    3e94:	ldur	x8, [x29, #-40]
    3e98:	add	x9, x8, #0x1
    3e9c:	stur	x9, [x29, #-40]
    3ea0:	ldrb	w11, [x8, #1]
    3ea4:	cmp	w10, w11
    3ea8:	b.ne	4084 <deflate_rle+0x2ac>  // b.any
    3eac:	ldur	w8, [x29, #-28]
    3eb0:	ldur	x9, [x29, #-40]
    3eb4:	add	x10, x9, #0x1
    3eb8:	stur	x10, [x29, #-40]
    3ebc:	ldrb	w11, [x9, #1]
    3ec0:	cmp	w8, w11
    3ec4:	b.ne	4084 <deflate_rle+0x2ac>  // b.any
    3ec8:	ldur	w8, [x29, #-28]
    3ecc:	ldur	x9, [x29, #-40]
    3ed0:	add	x10, x9, #0x1
    3ed4:	stur	x10, [x29, #-40]
    3ed8:	ldrb	w11, [x9, #1]
    3edc:	cmp	w8, w11
    3ee0:	b.ne	4084 <deflate_rle+0x2ac>  // b.any
    3ee4:	ldur	x8, [x29, #-16]
    3ee8:	ldr	x8, [x8, #96]
    3eec:	ldur	x9, [x29, #-16]
    3ef0:	ldr	w10, [x9, #172]
    3ef4:	mov	w9, w10
    3ef8:	add	x8, x8, x9
    3efc:	add	x8, x8, #0x102
    3f00:	stur	x8, [x29, #-48]
    3f04:	ldur	w8, [x29, #-28]
    3f08:	ldur	x9, [x29, #-40]
    3f0c:	add	x10, x9, #0x1
    3f10:	stur	x10, [x29, #-40]
    3f14:	ldrb	w11, [x9, #1]
    3f18:	mov	w12, #0x0                   	// #0
    3f1c:	cmp	w8, w11
    3f20:	stur	w12, [x29, #-60]
    3f24:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3f28:	ldur	w8, [x29, #-28]
    3f2c:	ldur	x9, [x29, #-40]
    3f30:	add	x10, x9, #0x1
    3f34:	stur	x10, [x29, #-40]
    3f38:	ldrb	w11, [x9, #1]
    3f3c:	mov	w12, #0x0                   	// #0
    3f40:	cmp	w8, w11
    3f44:	stur	w12, [x29, #-60]
    3f48:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3f4c:	ldur	w8, [x29, #-28]
    3f50:	ldur	x9, [x29, #-40]
    3f54:	add	x10, x9, #0x1
    3f58:	stur	x10, [x29, #-40]
    3f5c:	ldrb	w11, [x9, #1]
    3f60:	mov	w12, #0x0                   	// #0
    3f64:	cmp	w8, w11
    3f68:	stur	w12, [x29, #-60]
    3f6c:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3f70:	ldur	w8, [x29, #-28]
    3f74:	ldur	x9, [x29, #-40]
    3f78:	add	x10, x9, #0x1
    3f7c:	stur	x10, [x29, #-40]
    3f80:	ldrb	w11, [x9, #1]
    3f84:	mov	w12, #0x0                   	// #0
    3f88:	cmp	w8, w11
    3f8c:	stur	w12, [x29, #-60]
    3f90:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3f94:	ldur	w8, [x29, #-28]
    3f98:	ldur	x9, [x29, #-40]
    3f9c:	add	x10, x9, #0x1
    3fa0:	stur	x10, [x29, #-40]
    3fa4:	ldrb	w11, [x9, #1]
    3fa8:	mov	w12, #0x0                   	// #0
    3fac:	cmp	w8, w11
    3fb0:	stur	w12, [x29, #-60]
    3fb4:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3fb8:	ldur	w8, [x29, #-28]
    3fbc:	ldur	x9, [x29, #-40]
    3fc0:	add	x10, x9, #0x1
    3fc4:	stur	x10, [x29, #-40]
    3fc8:	ldrb	w11, [x9, #1]
    3fcc:	mov	w12, #0x0                   	// #0
    3fd0:	cmp	w8, w11
    3fd4:	stur	w12, [x29, #-60]
    3fd8:	b.ne	4038 <deflate_rle+0x260>  // b.any
    3fdc:	ldur	w8, [x29, #-28]
    3fe0:	ldur	x9, [x29, #-40]
    3fe4:	add	x10, x9, #0x1
    3fe8:	stur	x10, [x29, #-40]
    3fec:	ldrb	w11, [x9, #1]
    3ff0:	mov	w12, #0x0                   	// #0
    3ff4:	cmp	w8, w11
    3ff8:	stur	w12, [x29, #-60]
    3ffc:	b.ne	4038 <deflate_rle+0x260>  // b.any
    4000:	ldur	w8, [x29, #-28]
    4004:	ldur	x9, [x29, #-40]
    4008:	add	x10, x9, #0x1
    400c:	stur	x10, [x29, #-40]
    4010:	ldrb	w11, [x9, #1]
    4014:	mov	w12, #0x0                   	// #0
    4018:	cmp	w8, w11
    401c:	stur	w12, [x29, #-60]
    4020:	b.ne	4038 <deflate_rle+0x260>  // b.any
    4024:	ldur	x8, [x29, #-40]
    4028:	ldur	x9, [x29, #-48]
    402c:	cmp	x8, x9
    4030:	cset	w10, cc  // cc = lo, ul, last
    4034:	stur	w10, [x29, #-60]
    4038:	ldur	w8, [x29, #-60]
    403c:	tbnz	w8, #0, 3f04 <deflate_rle+0x12c>
    4040:	ldur	x8, [x29, #-48]
    4044:	ldur	x9, [x29, #-40]
    4048:	subs	x8, x8, x9
    404c:	mov	w10, #0x102                 	// #258
    4050:	subs	w8, w10, w8
    4054:	ldur	x9, [x29, #-16]
    4058:	str	w8, [x9, #160]
    405c:	ldur	x9, [x29, #-16]
    4060:	ldr	w8, [x9, #160]
    4064:	ldur	x9, [x29, #-16]
    4068:	ldr	w10, [x9, #180]
    406c:	cmp	w8, w10
    4070:	b.ls	4084 <deflate_rle+0x2ac>  // b.plast
    4074:	ldur	x8, [x29, #-16]
    4078:	ldr	w9, [x8, #180]
    407c:	ldur	x8, [x29, #-16]
    4080:	str	w9, [x8, #160]
    4084:	ldur	x8, [x29, #-16]
    4088:	ldr	w9, [x8, #160]
    408c:	cmp	w9, #0x3
    4090:	b.cc	422c <deflate_rle+0x454>  // b.lo, b.ul, b.last
    4094:	ldur	x8, [x29, #-16]
    4098:	ldr	w9, [x8, #160]
    409c:	subs	w9, w9, #0x3
    40a0:	sturb	w9, [x29, #-49]
    40a4:	mov	w9, #0x1                   	// #1
    40a8:	sturh	w9, [x29, #-52]
    40ac:	ldurh	w9, [x29, #-52]
    40b0:	ldur	x8, [x29, #-16]
    40b4:	ldr	x8, [x8, #5904]
    40b8:	ldur	x10, [x29, #-16]
    40bc:	ldr	w11, [x10, #5900]
    40c0:	mov	w10, w11
    40c4:	mov	x12, #0x2                   	// #2
    40c8:	mul	x10, x12, x10
    40cc:	add	x8, x8, x10
    40d0:	strh	w9, [x8]
    40d4:	ldurb	w9, [x29, #-49]
    40d8:	ldur	x8, [x29, #-16]
    40dc:	ldr	x8, [x8, #5888]
    40e0:	ldur	x10, [x29, #-16]
    40e4:	ldr	w11, [x10, #5900]
    40e8:	mov	w12, w11
    40ec:	mov	w11, w12
    40f0:	add	w11, w11, #0x1
    40f4:	str	w11, [x10, #5900]
    40f8:	add	x8, x8, x12
    40fc:	strb	w9, [x8]
    4100:	ldurh	w9, [x29, #-52]
    4104:	mov	w11, #0xffffffff            	// #-1
    4108:	add	w9, w11, w9, uxth
    410c:	sturh	w9, [x29, #-52]
    4110:	ldur	x8, [x29, #-16]
    4114:	add	x8, x8, #0xd4
    4118:	ldurb	w9, [x29, #-49]
    411c:	mov	w10, w9
    4120:	adrp	x12, 0 <_length_code>
    4124:	add	x12, x12, #0x0
    4128:	ldrb	w9, [x12, x10]
    412c:	add	w9, w9, #0x100
    4130:	add	w9, w9, #0x1
    4134:	mov	w0, w9
    4138:	sxtw	x10, w0
    413c:	mov	x12, #0x4                   	// #4
    4140:	mul	x10, x12, x10
    4144:	add	x8, x8, x10
    4148:	ldrh	w9, [x8]
    414c:	add	w9, w9, #0x1
    4150:	strh	w9, [x8]
    4154:	ldur	x8, [x29, #-16]
    4158:	add	x8, x8, #0x9c8
    415c:	ldurh	w9, [x29, #-52]
    4160:	cmp	w9, #0x100
    4164:	str	x8, [sp, #56]
    4168:	b.ge	4188 <deflate_rle+0x3b0>  // b.tcont
    416c:	ldurh	w8, [x29, #-52]
    4170:	mov	w9, w8
    4174:	adrp	x10, 0 <_dist_code>
    4178:	add	x10, x10, #0x0
    417c:	ldrb	w8, [x10, x9]
    4180:	str	w8, [sp, #52]
    4184:	b	41a4 <deflate_rle+0x3cc>
    4188:	ldurh	w8, [x29, #-52]
    418c:	asr	w8, w8, #7
    4190:	add	w8, w8, #0x100
    4194:	adrp	x9, 0 <_dist_code>
    4198:	add	x9, x9, #0x0
    419c:	ldrb	w8, [x9, w8, sxtw]
    41a0:	str	w8, [sp, #52]
    41a4:	ldr	w8, [sp, #52]
    41a8:	mov	w0, w8
    41ac:	sxtw	x9, w0
    41b0:	mov	x10, #0x4                   	// #4
    41b4:	mul	x9, x10, x9
    41b8:	ldr	x10, [sp, #56]
    41bc:	add	x9, x10, x9
    41c0:	ldrh	w8, [x9]
    41c4:	add	w8, w8, #0x1
    41c8:	strh	w8, [x9]
    41cc:	ldur	x9, [x29, #-16]
    41d0:	ldr	w8, [x9, #5900]
    41d4:	ldur	x9, [x29, #-16]
    41d8:	ldr	w11, [x9, #5896]
    41dc:	subs	w11, w11, #0x1
    41e0:	cmp	w8, w11
    41e4:	cset	w8, eq  // eq = none
    41e8:	and	w8, w8, #0x1
    41ec:	stur	w8, [x29, #-24]
    41f0:	ldur	x9, [x29, #-16]
    41f4:	ldr	w8, [x9, #160]
    41f8:	ldur	x9, [x29, #-16]
    41fc:	ldr	w11, [x9, #180]
    4200:	subs	w8, w11, w8
    4204:	str	w8, [x9, #180]
    4208:	ldur	x9, [x29, #-16]
    420c:	ldr	w8, [x9, #160]
    4210:	ldur	x9, [x29, #-16]
    4214:	ldr	w11, [x9, #172]
    4218:	add	w8, w11, w8
    421c:	str	w8, [x9, #172]
    4220:	ldur	x9, [x29, #-16]
    4224:	str	wzr, [x9, #160]
    4228:	b	430c <deflate_rle+0x534>
    422c:	ldur	x8, [x29, #-16]
    4230:	ldr	x8, [x8, #96]
    4234:	ldur	x9, [x29, #-16]
    4238:	ldr	w10, [x9, #172]
    423c:	mov	w9, w10
    4240:	add	x8, x8, x9
    4244:	ldrb	w10, [x8]
    4248:	sturb	w10, [x29, #-53]
    424c:	ldur	x8, [x29, #-16]
    4250:	ldr	x8, [x8, #5904]
    4254:	ldur	x9, [x29, #-16]
    4258:	ldr	w10, [x9, #5900]
    425c:	mov	w9, w10
    4260:	mov	x11, #0x2                   	// #2
    4264:	mul	x9, x11, x9
    4268:	add	x8, x8, x9
    426c:	mov	w10, #0x0                   	// #0
    4270:	strh	w10, [x8]
    4274:	ldurb	w10, [x29, #-53]
    4278:	ldur	x8, [x29, #-16]
    427c:	ldr	x8, [x8, #5888]
    4280:	ldur	x9, [x29, #-16]
    4284:	ldr	w12, [x9, #5900]
    4288:	mov	w11, w12
    428c:	mov	w12, w11
    4290:	add	w12, w12, #0x1
    4294:	str	w12, [x9, #5900]
    4298:	add	x8, x8, x11
    429c:	strb	w10, [x8]
    42a0:	ldur	x8, [x29, #-16]
    42a4:	add	x8, x8, #0xd4
    42a8:	ldurb	w10, [x29, #-53]
    42ac:	mov	w9, w10
    42b0:	mov	x11, #0x4                   	// #4
    42b4:	mul	x9, x11, x9
    42b8:	add	x8, x8, x9
    42bc:	ldrh	w10, [x8]
    42c0:	add	w10, w10, #0x1
    42c4:	strh	w10, [x8]
    42c8:	ldur	x8, [x29, #-16]
    42cc:	ldr	w10, [x8, #5900]
    42d0:	ldur	x8, [x29, #-16]
    42d4:	ldr	w12, [x8, #5896]
    42d8:	subs	w12, w12, #0x1
    42dc:	cmp	w10, w12
    42e0:	cset	w10, eq  // eq = none
    42e4:	and	w10, w10, #0x1
    42e8:	stur	w10, [x29, #-24]
    42ec:	ldur	x8, [x29, #-16]
    42f0:	ldr	w10, [x8, #180]
    42f4:	subs	w10, w10, #0x1
    42f8:	str	w10, [x8, #180]
    42fc:	ldur	x8, [x29, #-16]
    4300:	ldr	w10, [x8, #172]
    4304:	add	w10, w10, #0x1
    4308:	str	w10, [x8, #172]
    430c:	ldur	w8, [x29, #-24]
    4310:	cbz	w8, 43c0 <deflate_rle+0x5e8>
    4314:	ldur	x0, [x29, #-16]
    4318:	ldur	x8, [x29, #-16]
    431c:	ldr	x8, [x8, #152]
    4320:	cmp	x8, #0x0
    4324:	cset	w9, lt  // lt = tstop
    4328:	str	x0, [sp, #40]
    432c:	tbnz	w9, #0, 4350 <deflate_rle+0x578>
    4330:	ldur	x8, [x29, #-16]
    4334:	ldr	x8, [x8, #96]
    4338:	ldur	x9, [x29, #-16]
    433c:	ldr	x9, [x9, #152]
    4340:	and	x9, x9, #0xffffffff
    4344:	add	x8, x8, x9
    4348:	str	x8, [sp, #32]
    434c:	b	4358 <deflate_rle+0x580>
    4350:	mov	x8, xzr
    4354:	str	x8, [sp, #32]
    4358:	ldr	x8, [sp, #32]
    435c:	ldur	x9, [x29, #-16]
    4360:	ldr	w10, [x9, #172]
    4364:	mov	w9, w10
    4368:	ldur	x11, [x29, #-16]
    436c:	ldr	x11, [x11, #152]
    4370:	subs	x2, x9, x11
    4374:	ldr	x0, [sp, #40]
    4378:	mov	x1, x8
    437c:	mov	w10, wzr
    4380:	mov	w3, w10
    4384:	bl	0 <_tr_flush_block>
    4388:	ldur	x8, [x29, #-16]
    438c:	ldr	w10, [x8, #172]
    4390:	mov	w8, w10
    4394:	ldur	x9, [x29, #-16]
    4398:	str	x8, [x9, #152]
    439c:	ldur	x8, [x29, #-16]
    43a0:	ldr	x0, [x8]
    43a4:	bl	2f18 <flush_pending>
    43a8:	ldur	x8, [x29, #-16]
    43ac:	ldr	x8, [x8]
    43b0:	ldr	w10, [x8, #32]
    43b4:	cbnz	w10, 43c0 <deflate_rle+0x5e8>
    43b8:	stur	wzr, [x29, #-4]
    43bc:	b	4550 <deflate_rle+0x778>
    43c0:	b	3dec <deflate_rle+0x14>
    43c4:	ldur	x8, [x29, #-16]
    43c8:	str	wzr, [x8, #5932]
    43cc:	ldur	w9, [x29, #-20]
    43d0:	cmp	w9, #0x4
    43d4:	b.ne	4490 <deflate_rle+0x6b8>  // b.any
    43d8:	ldur	x0, [x29, #-16]
    43dc:	ldur	x8, [x29, #-16]
    43e0:	ldr	x8, [x8, #152]
    43e4:	cmp	x8, #0x0
    43e8:	cset	w9, lt  // lt = tstop
    43ec:	str	x0, [sp, #24]
    43f0:	tbnz	w9, #0, 4414 <deflate_rle+0x63c>
    43f4:	ldur	x8, [x29, #-16]
    43f8:	ldr	x8, [x8, #96]
    43fc:	ldur	x9, [x29, #-16]
    4400:	ldr	x9, [x9, #152]
    4404:	and	x9, x9, #0xffffffff
    4408:	add	x8, x8, x9
    440c:	str	x8, [sp, #16]
    4410:	b	441c <deflate_rle+0x644>
    4414:	mov	x8, xzr
    4418:	str	x8, [sp, #16]
    441c:	ldr	x8, [sp, #16]
    4420:	ldur	x9, [x29, #-16]
    4424:	ldr	w10, [x9, #172]
    4428:	mov	w9, w10
    442c:	ldur	x11, [x29, #-16]
    4430:	ldr	x11, [x11, #152]
    4434:	subs	x2, x9, x11
    4438:	ldr	x0, [sp, #24]
    443c:	mov	x1, x8
    4440:	mov	w3, #0x1                   	// #1
    4444:	bl	0 <_tr_flush_block>
    4448:	ldur	x8, [x29, #-16]
    444c:	ldr	w10, [x8, #172]
    4450:	mov	w8, w10
    4454:	ldur	x9, [x29, #-16]
    4458:	str	x8, [x9, #152]
    445c:	ldur	x8, [x29, #-16]
    4460:	ldr	x0, [x8]
    4464:	bl	2f18 <flush_pending>
    4468:	ldur	x8, [x29, #-16]
    446c:	ldr	x8, [x8]
    4470:	ldr	w10, [x8, #32]
    4474:	cbnz	w10, 4484 <deflate_rle+0x6ac>
    4478:	mov	w8, #0x2                   	// #2
    447c:	stur	w8, [x29, #-4]
    4480:	b	4550 <deflate_rle+0x778>
    4484:	mov	w8, #0x3                   	// #3
    4488:	stur	w8, [x29, #-4]
    448c:	b	4550 <deflate_rle+0x778>
    4490:	ldur	x8, [x29, #-16]
    4494:	ldr	w9, [x8, #5900]
    4498:	cbz	w9, 4548 <deflate_rle+0x770>
    449c:	ldur	x0, [x29, #-16]
    44a0:	ldur	x8, [x29, #-16]
    44a4:	ldr	x8, [x8, #152]
    44a8:	cmp	x8, #0x0
    44ac:	cset	w9, lt  // lt = tstop
    44b0:	str	x0, [sp, #8]
    44b4:	tbnz	w9, #0, 44d8 <deflate_rle+0x700>
    44b8:	ldur	x8, [x29, #-16]
    44bc:	ldr	x8, [x8, #96]
    44c0:	ldur	x9, [x29, #-16]
    44c4:	ldr	x9, [x9, #152]
    44c8:	and	x9, x9, #0xffffffff
    44cc:	add	x8, x8, x9
    44d0:	str	x8, [sp]
    44d4:	b	44e0 <deflate_rle+0x708>
    44d8:	mov	x8, xzr
    44dc:	str	x8, [sp]
    44e0:	ldr	x8, [sp]
    44e4:	ldur	x9, [x29, #-16]
    44e8:	ldr	w10, [x9, #172]
    44ec:	mov	w9, w10
    44f0:	ldur	x11, [x29, #-16]
    44f4:	ldr	x11, [x11, #152]
    44f8:	subs	x2, x9, x11
    44fc:	ldr	x0, [sp, #8]
    4500:	mov	x1, x8
    4504:	mov	w10, wzr
    4508:	mov	w3, w10
    450c:	bl	0 <_tr_flush_block>
    4510:	ldur	x8, [x29, #-16]
    4514:	ldr	w10, [x8, #172]
    4518:	mov	w8, w10
    451c:	ldur	x9, [x29, #-16]
    4520:	str	x8, [x9, #152]
    4524:	ldur	x8, [x29, #-16]
    4528:	ldr	x0, [x8]
    452c:	bl	2f18 <flush_pending>
    4530:	ldur	x8, [x29, #-16]
    4534:	ldr	x8, [x8]
    4538:	ldr	w10, [x8, #32]
    453c:	cbnz	w10, 4548 <deflate_rle+0x770>
    4540:	stur	wzr, [x29, #-4]
    4544:	b	4550 <deflate_rle+0x778>
    4548:	mov	w8, #0x1                   	// #1
    454c:	stur	w8, [x29, #-4]
    4550:	ldur	w0, [x29, #-4]
    4554:	ldp	x29, x30, [sp, #128]
    4558:	add	sp, sp, #0x90
    455c:	ret

0000000000004560 <deflateCopy>:
    4560:	sub	sp, sp, #0x50
    4564:	stp	x29, x30, [sp, #64]
    4568:	add	x29, sp, #0x40
    456c:	stur	x0, [x29, #-16]
    4570:	stur	x1, [x29, #-24]
    4574:	ldur	x0, [x29, #-24]
    4578:	bl	a20 <deflateStateCheck>
    457c:	cbnz	w0, 4588 <deflateCopy+0x28>
    4580:	ldur	x8, [x29, #-16]
    4584:	cbnz	x8, 4594 <deflateCopy+0x34>
    4588:	mov	w8, #0xfffffffe            	// #-2
    458c:	stur	w8, [x29, #-4]
    4590:	b	4850 <deflateCopy+0x2f0>
    4594:	ldur	x8, [x29, #-24]
    4598:	ldr	x8, [x8, #56]
    459c:	str	x8, [sp, #24]
    45a0:	ldur	x0, [x29, #-16]
    45a4:	ldur	x1, [x29, #-24]
    45a8:	mov	x2, #0x70                  	// #112
    45ac:	bl	0 <memcpy>
    45b0:	ldur	x8, [x29, #-16]
    45b4:	ldr	x8, [x8, #64]
    45b8:	ldur	x9, [x29, #-16]
    45bc:	ldr	x0, [x9, #80]
    45c0:	mov	w1, #0x1                   	// #1
    45c4:	mov	w2, #0x1740                	// #5952
    45c8:	blr	x8
    45cc:	str	x0, [sp, #32]
    45d0:	ldr	x8, [sp, #32]
    45d4:	cbnz	x8, 45e4 <deflateCopy+0x84>
    45d8:	mov	w8, #0xfffffffc            	// #-4
    45dc:	stur	w8, [x29, #-4]
    45e0:	b	4850 <deflateCopy+0x2f0>
    45e4:	ldr	x8, [sp, #32]
    45e8:	ldur	x9, [x29, #-16]
    45ec:	str	x8, [x9, #56]
    45f0:	ldr	x0, [sp, #32]
    45f4:	ldr	x1, [sp, #24]
    45f8:	mov	x2, #0x1740                	// #5952
    45fc:	bl	0 <memcpy>
    4600:	ldur	x8, [x29, #-16]
    4604:	ldr	x9, [sp, #32]
    4608:	str	x8, [x9]
    460c:	ldur	x8, [x29, #-16]
    4610:	ldr	x8, [x8, #64]
    4614:	ldur	x9, [x29, #-16]
    4618:	ldr	x0, [x9, #80]
    461c:	ldr	x9, [sp, #32]
    4620:	ldr	w1, [x9, #80]
    4624:	mov	w10, #0x2                   	// #2
    4628:	mov	w2, w10
    462c:	str	w10, [sp, #12]
    4630:	blr	x8
    4634:	ldr	x8, [sp, #32]
    4638:	str	x0, [x8, #96]
    463c:	ldur	x8, [x29, #-16]
    4640:	ldr	x8, [x8, #64]
    4644:	ldur	x9, [x29, #-16]
    4648:	ldr	x0, [x9, #80]
    464c:	ldr	x9, [sp, #32]
    4650:	ldr	w1, [x9, #80]
    4654:	ldr	w2, [sp, #12]
    4658:	blr	x8
    465c:	ldr	x8, [sp, #32]
    4660:	str	x0, [x8, #112]
    4664:	ldur	x8, [x29, #-16]
    4668:	ldr	x8, [x8, #64]
    466c:	ldur	x9, [x29, #-16]
    4670:	ldr	x0, [x9, #80]
    4674:	ldr	x9, [sp, #32]
    4678:	ldr	w1, [x9, #132]
    467c:	ldr	w2, [sp, #12]
    4680:	blr	x8
    4684:	ldr	x8, [sp, #32]
    4688:	str	x0, [x8, #120]
    468c:	ldur	x8, [x29, #-16]
    4690:	ldr	x8, [x8, #64]
    4694:	ldur	x9, [x29, #-16]
    4698:	ldr	x0, [x9, #80]
    469c:	ldr	x9, [sp, #32]
    46a0:	ldr	w1, [x9, #5896]
    46a4:	mov	w2, #0x4                   	// #4
    46a8:	blr	x8
    46ac:	str	x0, [sp, #16]
    46b0:	ldr	x8, [sp, #16]
    46b4:	ldr	x9, [sp, #32]
    46b8:	str	x8, [x9, #16]
    46bc:	ldr	x8, [sp, #32]
    46c0:	ldr	x8, [x8, #96]
    46c4:	cbz	x8, 46ec <deflateCopy+0x18c>
    46c8:	ldr	x8, [sp, #32]
    46cc:	ldr	x8, [x8, #112]
    46d0:	cbz	x8, 46ec <deflateCopy+0x18c>
    46d4:	ldr	x8, [sp, #32]
    46d8:	ldr	x8, [x8, #120]
    46dc:	cbz	x8, 46ec <deflateCopy+0x18c>
    46e0:	ldr	x8, [sp, #32]
    46e4:	ldr	x8, [x8, #16]
    46e8:	cbnz	x8, 4700 <deflateCopy+0x1a0>
    46ec:	ldur	x0, [x29, #-16]
    46f0:	bl	528 <deflateEnd>
    46f4:	mov	w8, #0xfffffffc            	// #-4
    46f8:	stur	w8, [x29, #-4]
    46fc:	b	4850 <deflateCopy+0x2f0>
    4700:	ldr	x8, [sp, #32]
    4704:	ldr	x0, [x8, #96]
    4708:	ldr	x8, [sp, #24]
    470c:	ldr	x1, [x8, #96]
    4710:	ldr	x8, [sp, #32]
    4714:	ldr	w9, [x8, #80]
    4718:	mov	w10, #0x2                   	// #2
    471c:	mul	w9, w9, w10
    4720:	mov	w10, #0x1                   	// #1
    4724:	umull	x2, w9, w10
    4728:	bl	0 <memcpy>
    472c:	ldr	x8, [sp, #32]
    4730:	ldr	x0, [x8, #112]
    4734:	ldr	x8, [sp, #24]
    4738:	ldr	x1, [x8, #112]
    473c:	ldr	x8, [sp, #32]
    4740:	ldr	w9, [x8, #80]
    4744:	mov	w8, w9
    4748:	mov	x11, #0x2                   	// #2
    474c:	mul	x2, x8, x11
    4750:	str	x11, [sp]
    4754:	bl	0 <memcpy>
    4758:	ldr	x8, [sp, #32]
    475c:	ldr	x0, [x8, #120]
    4760:	ldr	x8, [sp, #24]
    4764:	ldr	x1, [x8, #120]
    4768:	ldr	x8, [sp, #32]
    476c:	ldr	w9, [x8, #132]
    4770:	mov	w8, w9
    4774:	ldr	x11, [sp]
    4778:	mul	x2, x8, x11
    477c:	bl	0 <memcpy>
    4780:	ldr	x8, [sp, #32]
    4784:	ldr	x0, [x8, #16]
    4788:	ldr	x8, [sp, #24]
    478c:	ldr	x1, [x8, #16]
    4790:	ldr	x8, [sp, #32]
    4794:	ldr	x8, [x8, #24]
    4798:	and	x2, x8, #0xffffffff
    479c:	bl	0 <memcpy>
    47a0:	ldr	x8, [sp, #32]
    47a4:	ldr	x8, [x8, #16]
    47a8:	ldr	x11, [sp, #24]
    47ac:	ldr	x11, [x11, #32]
    47b0:	ldr	x12, [sp, #24]
    47b4:	ldr	x12, [x12, #16]
    47b8:	subs	x11, x11, x12
    47bc:	add	x8, x8, x11
    47c0:	ldr	x11, [sp, #32]
    47c4:	str	x8, [x11, #32]
    47c8:	ldr	x8, [sp, #16]
    47cc:	ldr	x11, [sp, #32]
    47d0:	ldr	w9, [x11, #5896]
    47d4:	mov	w11, w9
    47d8:	ldr	x12, [sp]
    47dc:	udiv	x11, x11, x12
    47e0:	mov	x13, #0x2                   	// #2
    47e4:	mul	x11, x13, x11
    47e8:	add	x8, x8, x11
    47ec:	ldr	x11, [sp, #32]
    47f0:	str	x8, [x11, #5904]
    47f4:	ldr	x8, [sp, #32]
    47f8:	ldr	x8, [x8, #16]
    47fc:	ldr	x11, [sp, #32]
    4800:	ldr	w9, [x11, #5896]
    4804:	mov	w11, w9
    4808:	mov	x13, #0x3                   	// #3
    480c:	mul	x11, x13, x11
    4810:	add	x8, x8, x11
    4814:	ldr	x11, [sp, #32]
    4818:	str	x8, [x11, #5888]
    481c:	ldr	x8, [sp, #32]
    4820:	add	x8, x8, #0xd4
    4824:	ldr	x11, [sp, #32]
    4828:	str	x8, [x11, #2904]
    482c:	ldr	x8, [sp, #32]
    4830:	add	x8, x8, #0x9c8
    4834:	ldr	x11, [sp, #32]
    4838:	str	x8, [x11, #2928]
    483c:	ldr	x8, [sp, #32]
    4840:	add	x8, x8, #0xabc
    4844:	ldr	x11, [sp, #32]
    4848:	str	x8, [x11, #2952]
    484c:	stur	wzr, [x29, #-4]
    4850:	ldur	w0, [x29, #-4]
    4854:	ldp	x29, x30, [sp, #64]
    4858:	add	sp, sp, #0x50
    485c:	ret

0000000000004860 <deflate_fast>:
    4860:	sub	sp, sp, #0x80
    4864:	stp	x29, x30, [sp, #112]
    4868:	add	x29, sp, #0x70
    486c:	stur	x0, [x29, #-16]
    4870:	stur	w1, [x29, #-20]
    4874:	ldur	x8, [x29, #-16]
    4878:	ldr	w9, [x8, #180]
    487c:	cmp	w9, #0x106
    4880:	b.cs	48bc <deflate_fast+0x5c>  // b.hs, b.nlast
    4884:	ldur	x0, [x29, #-16]
    4888:	bl	b18 <fill_window>
    488c:	ldur	x8, [x29, #-16]
    4890:	ldr	w9, [x8, #180]
    4894:	cmp	w9, #0x106
    4898:	b.cs	48ac <deflate_fast+0x4c>  // b.hs, b.nlast
    489c:	ldur	w8, [x29, #-20]
    48a0:	cbnz	w8, 48ac <deflate_fast+0x4c>
    48a4:	stur	wzr, [x29, #-4]
    48a8:	b	5064 <deflate_fast+0x804>
    48ac:	ldur	x8, [x29, #-16]
    48b0:	ldr	w9, [x8, #180]
    48b4:	cbnz	w9, 48bc <deflate_fast+0x5c>
    48b8:	b	4eac <deflate_fast+0x64c>
    48bc:	stur	wzr, [x29, #-24]
    48c0:	ldur	x8, [x29, #-16]
    48c4:	ldr	w9, [x8, #180]
    48c8:	cmp	w9, #0x3
    48cc:	b.cc	498c <deflate_fast+0x12c>  // b.lo, b.ul, b.last
    48d0:	ldur	x8, [x29, #-16]
    48d4:	ldr	w9, [x8, #128]
    48d8:	ldur	x8, [x29, #-16]
    48dc:	ldr	w10, [x8, #144]
    48e0:	lsl	w9, w9, w10
    48e4:	ldur	x8, [x29, #-16]
    48e8:	ldr	x8, [x8, #96]
    48ec:	ldur	x11, [x29, #-16]
    48f0:	ldr	w10, [x11, #172]
    48f4:	add	w10, w10, #0x2
    48f8:	ldrb	w10, [x8, w10, uxtw]
    48fc:	eor	w9, w9, w10
    4900:	ldur	x8, [x29, #-16]
    4904:	ldr	w10, [x8, #140]
    4908:	and	w9, w9, w10
    490c:	ldur	x8, [x29, #-16]
    4910:	str	w9, [x8, #128]
    4914:	ldur	x8, [x29, #-16]
    4918:	ldr	x8, [x8, #120]
    491c:	ldur	x11, [x29, #-16]
    4920:	ldr	w9, [x11, #128]
    4924:	mov	w11, w9
    4928:	mov	x12, #0x2                   	// #2
    492c:	ldrh	w9, [x8, x11, lsl #1]
    4930:	ldur	x8, [x29, #-16]
    4934:	ldr	x8, [x8, #112]
    4938:	ldur	x11, [x29, #-16]
    493c:	ldr	w10, [x11, #172]
    4940:	ldur	x11, [x29, #-16]
    4944:	ldr	w13, [x11, #88]
    4948:	and	w10, w10, w13
    494c:	mov	w11, w10
    4950:	ubfx	x11, x11, #0, #32
    4954:	mul	x11, x12, x11
    4958:	add	x8, x8, x11
    495c:	strh	w9, [x8]
    4960:	stur	w9, [x29, #-24]
    4964:	ldur	x8, [x29, #-16]
    4968:	ldr	w9, [x8, #172]
    496c:	ldur	x8, [x29, #-16]
    4970:	ldr	x8, [x8, #120]
    4974:	ldur	x11, [x29, #-16]
    4978:	ldr	w10, [x11, #128]
    497c:	mov	w11, w10
    4980:	mul	x11, x12, x11
    4984:	add	x8, x8, x11
    4988:	strh	w9, [x8]
    498c:	ldur	w8, [x29, #-24]
    4990:	cbz	w8, 49cc <deflate_fast+0x16c>
    4994:	ldur	x8, [x29, #-16]
    4998:	ldr	w9, [x8, #172]
    499c:	ldur	w10, [x29, #-24]
    49a0:	subs	w9, w9, w10
    49a4:	ldur	x8, [x29, #-16]
    49a8:	ldr	w10, [x8, #80]
    49ac:	subs	w10, w10, #0x106
    49b0:	cmp	w9, w10
    49b4:	b.hi	49cc <deflate_fast+0x16c>  // b.pmore
    49b8:	ldur	x0, [x29, #-16]
    49bc:	ldur	w1, [x29, #-24]
    49c0:	bl	5aa4 <longest_match>
    49c4:	ldur	x8, [x29, #-16]
    49c8:	str	w0, [x8, #160]
    49cc:	ldur	x8, [x29, #-16]
    49d0:	ldr	w9, [x8, #160]
    49d4:	cmp	w9, #0x3
    49d8:	b.cc	4d14 <deflate_fast+0x4b4>  // b.lo, b.ul, b.last
    49dc:	ldur	x8, [x29, #-16]
    49e0:	ldr	w9, [x8, #160]
    49e4:	subs	w9, w9, #0x3
    49e8:	sturb	w9, [x29, #-29]
    49ec:	ldur	x8, [x29, #-16]
    49f0:	ldr	w9, [x8, #172]
    49f4:	ldur	x8, [x29, #-16]
    49f8:	ldr	w10, [x8, #176]
    49fc:	subs	w9, w9, w10
    4a00:	sturh	w9, [x29, #-32]
    4a04:	ldurh	w9, [x29, #-32]
    4a08:	ldur	x8, [x29, #-16]
    4a0c:	ldr	x8, [x8, #5904]
    4a10:	ldur	x11, [x29, #-16]
    4a14:	ldr	w10, [x11, #5900]
    4a18:	mov	w11, w10
    4a1c:	mov	x12, #0x2                   	// #2
    4a20:	mul	x11, x12, x11
    4a24:	add	x8, x8, x11
    4a28:	strh	w9, [x8]
    4a2c:	ldurb	w9, [x29, #-29]
    4a30:	ldur	x8, [x29, #-16]
    4a34:	ldr	x8, [x8, #5888]
    4a38:	ldur	x11, [x29, #-16]
    4a3c:	ldr	w10, [x11, #5900]
    4a40:	mov	w12, w10
    4a44:	mov	w10, w12
    4a48:	add	w10, w10, #0x1
    4a4c:	str	w10, [x11, #5900]
    4a50:	add	x8, x8, x12
    4a54:	strb	w9, [x8]
    4a58:	ldurh	w9, [x29, #-32]
    4a5c:	mov	w10, #0xffffffff            	// #-1
    4a60:	add	w9, w10, w9, uxth
    4a64:	sturh	w9, [x29, #-32]
    4a68:	ldur	x8, [x29, #-16]
    4a6c:	add	x8, x8, #0xd4
    4a70:	ldurb	w9, [x29, #-29]
    4a74:	mov	w11, w9
    4a78:	adrp	x12, 0 <_length_code>
    4a7c:	add	x12, x12, #0x0
    4a80:	ldrb	w9, [x12, x11]
    4a84:	add	w9, w9, #0x100
    4a88:	add	w9, w9, #0x1
    4a8c:	mov	w0, w9
    4a90:	sxtw	x11, w0
    4a94:	mov	x12, #0x4                   	// #4
    4a98:	mul	x11, x12, x11
    4a9c:	add	x8, x8, x11
    4aa0:	ldrh	w9, [x8]
    4aa4:	add	w9, w9, #0x1
    4aa8:	strh	w9, [x8]
    4aac:	ldur	x8, [x29, #-16]
    4ab0:	add	x8, x8, #0x9c8
    4ab4:	ldurh	w9, [x29, #-32]
    4ab8:	cmp	w9, #0x100
    4abc:	stur	x8, [x29, #-48]
    4ac0:	b.ge	4ae0 <deflate_fast+0x280>  // b.tcont
    4ac4:	ldurh	w8, [x29, #-32]
    4ac8:	mov	w9, w8
    4acc:	adrp	x10, 0 <_dist_code>
    4ad0:	add	x10, x10, #0x0
    4ad4:	ldrb	w8, [x10, x9]
    4ad8:	stur	w8, [x29, #-52]
    4adc:	b	4afc <deflate_fast+0x29c>
    4ae0:	ldurh	w8, [x29, #-32]
    4ae4:	asr	w8, w8, #7
    4ae8:	add	w8, w8, #0x100
    4aec:	adrp	x9, 0 <_dist_code>
    4af0:	add	x9, x9, #0x0
    4af4:	ldrb	w8, [x9, w8, sxtw]
    4af8:	stur	w8, [x29, #-52]
    4afc:	ldur	w8, [x29, #-52]
    4b00:	mov	w0, w8
    4b04:	sxtw	x9, w0
    4b08:	mov	x10, #0x4                   	// #4
    4b0c:	mul	x9, x10, x9
    4b10:	ldur	x10, [x29, #-48]
    4b14:	add	x9, x10, x9
    4b18:	ldrh	w8, [x9]
    4b1c:	add	w8, w8, #0x1
    4b20:	strh	w8, [x9]
    4b24:	ldur	x9, [x29, #-16]
    4b28:	ldr	w8, [x9, #5900]
    4b2c:	ldur	x9, [x29, #-16]
    4b30:	ldr	w11, [x9, #5896]
    4b34:	subs	w11, w11, #0x1
    4b38:	cmp	w8, w11
    4b3c:	cset	w8, eq  // eq = none
    4b40:	and	w8, w8, #0x1
    4b44:	stur	w8, [x29, #-28]
    4b48:	ldur	x9, [x29, #-16]
    4b4c:	ldr	w8, [x9, #160]
    4b50:	ldur	x9, [x29, #-16]
    4b54:	ldr	w11, [x9, #180]
    4b58:	subs	w8, w11, w8
    4b5c:	str	w8, [x9, #180]
    4b60:	ldur	x9, [x29, #-16]
    4b64:	ldr	w8, [x9, #160]
    4b68:	ldur	x9, [x29, #-16]
    4b6c:	ldr	w11, [x9, #192]
    4b70:	cmp	w8, w11
    4b74:	b.hi	4c8c <deflate_fast+0x42c>  // b.pmore
    4b78:	ldur	x8, [x29, #-16]
    4b7c:	ldr	w9, [x8, #180]
    4b80:	cmp	w9, #0x3
    4b84:	b.cc	4c8c <deflate_fast+0x42c>  // b.lo, b.ul, b.last
    4b88:	ldur	x8, [x29, #-16]
    4b8c:	ldr	w9, [x8, #160]
    4b90:	subs	w9, w9, #0x1
    4b94:	str	w9, [x8, #160]
    4b98:	ldur	x8, [x29, #-16]
    4b9c:	ldr	w9, [x8, #172]
    4ba0:	add	w9, w9, #0x1
    4ba4:	str	w9, [x8, #172]
    4ba8:	ldur	x8, [x29, #-16]
    4bac:	ldr	w9, [x8, #128]
    4bb0:	ldur	x8, [x29, #-16]
    4bb4:	ldr	w10, [x8, #144]
    4bb8:	lsl	w9, w9, w10
    4bbc:	ldur	x8, [x29, #-16]
    4bc0:	ldr	x8, [x8, #96]
    4bc4:	ldur	x11, [x29, #-16]
    4bc8:	ldr	w10, [x11, #172]
    4bcc:	add	w10, w10, #0x2
    4bd0:	ldrb	w10, [x8, w10, uxtw]
    4bd4:	eor	w9, w9, w10
    4bd8:	ldur	x8, [x29, #-16]
    4bdc:	ldr	w10, [x8, #140]
    4be0:	and	w9, w9, w10
    4be4:	ldur	x8, [x29, #-16]
    4be8:	str	w9, [x8, #128]
    4bec:	ldur	x8, [x29, #-16]
    4bf0:	ldr	x8, [x8, #120]
    4bf4:	ldur	x11, [x29, #-16]
    4bf8:	ldr	w9, [x11, #128]
    4bfc:	mov	w11, w9
    4c00:	mov	x12, #0x2                   	// #2
    4c04:	ldrh	w9, [x8, x11, lsl #1]
    4c08:	ldur	x8, [x29, #-16]
    4c0c:	ldr	x8, [x8, #112]
    4c10:	ldur	x11, [x29, #-16]
    4c14:	ldr	w10, [x11, #172]
    4c18:	ldur	x11, [x29, #-16]
    4c1c:	ldr	w13, [x11, #88]
    4c20:	and	w10, w10, w13
    4c24:	mov	w11, w10
    4c28:	ubfx	x11, x11, #0, #32
    4c2c:	mul	x11, x12, x11
    4c30:	add	x8, x8, x11
    4c34:	strh	w9, [x8]
    4c38:	stur	w9, [x29, #-24]
    4c3c:	ldur	x8, [x29, #-16]
    4c40:	ldr	w9, [x8, #172]
    4c44:	ldur	x8, [x29, #-16]
    4c48:	ldr	x8, [x8, #120]
    4c4c:	ldur	x11, [x29, #-16]
    4c50:	ldr	w10, [x11, #128]
    4c54:	mov	w11, w10
    4c58:	mul	x11, x12, x11
    4c5c:	add	x8, x8, x11
    4c60:	strh	w9, [x8]
    4c64:	ldur	x8, [x29, #-16]
    4c68:	ldr	w9, [x8, #160]
    4c6c:	subs	w9, w9, #0x1
    4c70:	str	w9, [x8, #160]
    4c74:	cbnz	w9, 4b98 <deflate_fast+0x338>
    4c78:	ldur	x8, [x29, #-16]
    4c7c:	ldr	w9, [x8, #172]
    4c80:	add	w9, w9, #0x1
    4c84:	str	w9, [x8, #172]
    4c88:	b	4d10 <deflate_fast+0x4b0>
    4c8c:	ldur	x8, [x29, #-16]
    4c90:	ldr	w9, [x8, #160]
    4c94:	ldur	x8, [x29, #-16]
    4c98:	ldr	w10, [x8, #172]
    4c9c:	add	w9, w10, w9
    4ca0:	str	w9, [x8, #172]
    4ca4:	ldur	x8, [x29, #-16]
    4ca8:	str	wzr, [x8, #160]
    4cac:	ldur	x8, [x29, #-16]
    4cb0:	ldr	x8, [x8, #96]
    4cb4:	ldur	x11, [x29, #-16]
    4cb8:	ldr	w9, [x11, #172]
    4cbc:	mov	w11, w9
    4cc0:	ldrb	w9, [x8, x11]
    4cc4:	ldur	x8, [x29, #-16]
    4cc8:	str	w9, [x8, #128]
    4ccc:	ldur	x8, [x29, #-16]
    4cd0:	ldr	w9, [x8, #128]
    4cd4:	ldur	x8, [x29, #-16]
    4cd8:	ldr	w10, [x8, #144]
    4cdc:	lsl	w9, w9, w10
    4ce0:	ldur	x8, [x29, #-16]
    4ce4:	ldr	x8, [x8, #96]
    4ce8:	ldur	x11, [x29, #-16]
    4cec:	ldr	w10, [x11, #172]
    4cf0:	add	w10, w10, #0x1
    4cf4:	ldrb	w10, [x8, w10, uxtw]
    4cf8:	eor	w9, w9, w10
    4cfc:	ldur	x8, [x29, #-16]
    4d00:	ldr	w10, [x8, #140]
    4d04:	and	w9, w9, w10
    4d08:	ldur	x8, [x29, #-16]
    4d0c:	str	w9, [x8, #128]
    4d10:	b	4df4 <deflate_fast+0x594>
    4d14:	ldur	x8, [x29, #-16]
    4d18:	ldr	x8, [x8, #96]
    4d1c:	ldur	x9, [x29, #-16]
    4d20:	ldr	w10, [x9, #172]
    4d24:	mov	w9, w10
    4d28:	add	x8, x8, x9
    4d2c:	ldrb	w10, [x8]
    4d30:	sturb	w10, [x29, #-33]
    4d34:	ldur	x8, [x29, #-16]
    4d38:	ldr	x8, [x8, #5904]
    4d3c:	ldur	x9, [x29, #-16]
    4d40:	ldr	w10, [x9, #5900]
    4d44:	mov	w9, w10
    4d48:	mov	x11, #0x2                   	// #2
    4d4c:	mul	x9, x11, x9
    4d50:	add	x8, x8, x9
    4d54:	mov	w10, #0x0                   	// #0
    4d58:	strh	w10, [x8]
    4d5c:	ldurb	w10, [x29, #-33]
    4d60:	ldur	x8, [x29, #-16]
    4d64:	ldr	x8, [x8, #5888]
    4d68:	ldur	x9, [x29, #-16]
    4d6c:	ldr	w12, [x9, #5900]
    4d70:	mov	w11, w12
    4d74:	mov	w12, w11
    4d78:	add	w12, w12, #0x1
    4d7c:	str	w12, [x9, #5900]
    4d80:	add	x8, x8, x11
    4d84:	strb	w10, [x8]
    4d88:	ldur	x8, [x29, #-16]
    4d8c:	add	x8, x8, #0xd4
    4d90:	ldurb	w10, [x29, #-33]
    4d94:	mov	w9, w10
    4d98:	mov	x11, #0x4                   	// #4
    4d9c:	mul	x9, x11, x9
    4da0:	add	x8, x8, x9
    4da4:	ldrh	w10, [x8]
    4da8:	add	w10, w10, #0x1
    4dac:	strh	w10, [x8]
    4db0:	ldur	x8, [x29, #-16]
    4db4:	ldr	w10, [x8, #5900]
    4db8:	ldur	x8, [x29, #-16]
    4dbc:	ldr	w12, [x8, #5896]
    4dc0:	subs	w12, w12, #0x1
    4dc4:	cmp	w10, w12
    4dc8:	cset	w10, eq  // eq = none
    4dcc:	and	w10, w10, #0x1
    4dd0:	stur	w10, [x29, #-28]
    4dd4:	ldur	x8, [x29, #-16]
    4dd8:	ldr	w10, [x8, #180]
    4ddc:	subs	w10, w10, #0x1
    4de0:	str	w10, [x8, #180]
    4de4:	ldur	x8, [x29, #-16]
    4de8:	ldr	w10, [x8, #172]
    4dec:	add	w10, w10, #0x1
    4df0:	str	w10, [x8, #172]
    4df4:	ldur	w8, [x29, #-28]
    4df8:	cbz	w8, 4ea8 <deflate_fast+0x648>
    4dfc:	ldur	x0, [x29, #-16]
    4e00:	ldur	x8, [x29, #-16]
    4e04:	ldr	x8, [x8, #152]
    4e08:	cmp	x8, #0x0
    4e0c:	cset	w9, lt  // lt = tstop
    4e10:	str	x0, [sp, #48]
    4e14:	tbnz	w9, #0, 4e38 <deflate_fast+0x5d8>
    4e18:	ldur	x8, [x29, #-16]
    4e1c:	ldr	x8, [x8, #96]
    4e20:	ldur	x9, [x29, #-16]
    4e24:	ldr	x9, [x9, #152]
    4e28:	and	x9, x9, #0xffffffff
    4e2c:	add	x8, x8, x9
    4e30:	str	x8, [sp, #40]
    4e34:	b	4e40 <deflate_fast+0x5e0>
    4e38:	mov	x8, xzr
    4e3c:	str	x8, [sp, #40]
    4e40:	ldr	x8, [sp, #40]
    4e44:	ldur	x9, [x29, #-16]
    4e48:	ldr	w10, [x9, #172]
    4e4c:	mov	w9, w10
    4e50:	ldur	x11, [x29, #-16]
    4e54:	ldr	x11, [x11, #152]
    4e58:	subs	x2, x9, x11
    4e5c:	ldr	x0, [sp, #48]
    4e60:	mov	x1, x8
    4e64:	mov	w10, wzr
    4e68:	mov	w3, w10
    4e6c:	bl	0 <_tr_flush_block>
    4e70:	ldur	x8, [x29, #-16]
    4e74:	ldr	w10, [x8, #172]
    4e78:	mov	w8, w10
    4e7c:	ldur	x9, [x29, #-16]
    4e80:	str	x8, [x9, #152]
    4e84:	ldur	x8, [x29, #-16]
    4e88:	ldr	x0, [x8]
    4e8c:	bl	2f18 <flush_pending>
    4e90:	ldur	x8, [x29, #-16]
    4e94:	ldr	x8, [x8]
    4e98:	ldr	w10, [x8, #32]
    4e9c:	cbnz	w10, 4ea8 <deflate_fast+0x648>
    4ea0:	stur	wzr, [x29, #-4]
    4ea4:	b	5064 <deflate_fast+0x804>
    4ea8:	b	4874 <deflate_fast+0x14>
    4eac:	ldur	x8, [x29, #-16]
    4eb0:	ldr	w9, [x8, #172]
    4eb4:	cmp	w9, #0x2
    4eb8:	b.cs	4ecc <deflate_fast+0x66c>  // b.hs, b.nlast
    4ebc:	ldur	x8, [x29, #-16]
    4ec0:	ldr	w9, [x8, #172]
    4ec4:	str	w9, [sp, #36]
    4ec8:	b	4ed4 <deflate_fast+0x674>
    4ecc:	mov	w8, #0x2                   	// #2
    4ed0:	str	w8, [sp, #36]
    4ed4:	ldr	w8, [sp, #36]
    4ed8:	ldur	x9, [x29, #-16]
    4edc:	str	w8, [x9, #5932]
    4ee0:	ldur	w8, [x29, #-20]
    4ee4:	cmp	w8, #0x4
    4ee8:	b.ne	4fa4 <deflate_fast+0x744>  // b.any
    4eec:	ldur	x0, [x29, #-16]
    4ef0:	ldur	x8, [x29, #-16]
    4ef4:	ldr	x8, [x8, #152]
    4ef8:	cmp	x8, #0x0
    4efc:	cset	w9, lt  // lt = tstop
    4f00:	str	x0, [sp, #24]
    4f04:	tbnz	w9, #0, 4f28 <deflate_fast+0x6c8>
    4f08:	ldur	x8, [x29, #-16]
    4f0c:	ldr	x8, [x8, #96]
    4f10:	ldur	x9, [x29, #-16]
    4f14:	ldr	x9, [x9, #152]
    4f18:	and	x9, x9, #0xffffffff
    4f1c:	add	x8, x8, x9
    4f20:	str	x8, [sp, #16]
    4f24:	b	4f30 <deflate_fast+0x6d0>
    4f28:	mov	x8, xzr
    4f2c:	str	x8, [sp, #16]
    4f30:	ldr	x8, [sp, #16]
    4f34:	ldur	x9, [x29, #-16]
    4f38:	ldr	w10, [x9, #172]
    4f3c:	mov	w9, w10
    4f40:	ldur	x11, [x29, #-16]
    4f44:	ldr	x11, [x11, #152]
    4f48:	subs	x2, x9, x11
    4f4c:	ldr	x0, [sp, #24]
    4f50:	mov	x1, x8
    4f54:	mov	w3, #0x1                   	// #1
    4f58:	bl	0 <_tr_flush_block>
    4f5c:	ldur	x8, [x29, #-16]
    4f60:	ldr	w10, [x8, #172]
    4f64:	mov	w8, w10
    4f68:	ldur	x9, [x29, #-16]
    4f6c:	str	x8, [x9, #152]
    4f70:	ldur	x8, [x29, #-16]
    4f74:	ldr	x0, [x8]
    4f78:	bl	2f18 <flush_pending>
    4f7c:	ldur	x8, [x29, #-16]
    4f80:	ldr	x8, [x8]
    4f84:	ldr	w10, [x8, #32]
    4f88:	cbnz	w10, 4f98 <deflate_fast+0x738>
    4f8c:	mov	w8, #0x2                   	// #2
    4f90:	stur	w8, [x29, #-4]
    4f94:	b	5064 <deflate_fast+0x804>
    4f98:	mov	w8, #0x3                   	// #3
    4f9c:	stur	w8, [x29, #-4]
    4fa0:	b	5064 <deflate_fast+0x804>
    4fa4:	ldur	x8, [x29, #-16]
    4fa8:	ldr	w9, [x8, #5900]
    4fac:	cbz	w9, 505c <deflate_fast+0x7fc>
    4fb0:	ldur	x0, [x29, #-16]
    4fb4:	ldur	x8, [x29, #-16]
    4fb8:	ldr	x8, [x8, #152]
    4fbc:	cmp	x8, #0x0
    4fc0:	cset	w9, lt  // lt = tstop
    4fc4:	str	x0, [sp, #8]
    4fc8:	tbnz	w9, #0, 4fec <deflate_fast+0x78c>
    4fcc:	ldur	x8, [x29, #-16]
    4fd0:	ldr	x8, [x8, #96]
    4fd4:	ldur	x9, [x29, #-16]
    4fd8:	ldr	x9, [x9, #152]
    4fdc:	and	x9, x9, #0xffffffff
    4fe0:	add	x8, x8, x9
    4fe4:	str	x8, [sp]
    4fe8:	b	4ff4 <deflate_fast+0x794>
    4fec:	mov	x8, xzr
    4ff0:	str	x8, [sp]
    4ff4:	ldr	x8, [sp]
    4ff8:	ldur	x9, [x29, #-16]
    4ffc:	ldr	w10, [x9, #172]
    5000:	mov	w9, w10
    5004:	ldur	x11, [x29, #-16]
    5008:	ldr	x11, [x11, #152]
    500c:	subs	x2, x9, x11
    5010:	ldr	x0, [sp, #8]
    5014:	mov	x1, x8
    5018:	mov	w10, wzr
    501c:	mov	w3, w10
    5020:	bl	0 <_tr_flush_block>
    5024:	ldur	x8, [x29, #-16]
    5028:	ldr	w10, [x8, #172]
    502c:	mov	w8, w10
    5030:	ldur	x9, [x29, #-16]
    5034:	str	x8, [x9, #152]
    5038:	ldur	x8, [x29, #-16]
    503c:	ldr	x0, [x8]
    5040:	bl	2f18 <flush_pending>
    5044:	ldur	x8, [x29, #-16]
    5048:	ldr	x8, [x8]
    504c:	ldr	w10, [x8, #32]
    5050:	cbnz	w10, 505c <deflate_fast+0x7fc>
    5054:	stur	wzr, [x29, #-4]
    5058:	b	5064 <deflate_fast+0x804>
    505c:	mov	w8, #0x1                   	// #1
    5060:	stur	w8, [x29, #-4]
    5064:	ldur	w0, [x29, #-4]
    5068:	ldp	x29, x30, [sp, #112]
    506c:	add	sp, sp, #0x80
    5070:	ret

0000000000005074 <deflate_slow>:
    5074:	sub	sp, sp, #0x90
    5078:	stp	x29, x30, [sp, #128]
    507c:	add	x29, sp, #0x80
    5080:	stur	x0, [x29, #-16]
    5084:	stur	w1, [x29, #-20]
    5088:	ldur	x8, [x29, #-16]
    508c:	ldr	w9, [x8, #180]
    5090:	cmp	w9, #0x106
    5094:	b.cs	50d0 <deflate_slow+0x5c>  // b.hs, b.nlast
    5098:	ldur	x0, [x29, #-16]
    509c:	bl	b18 <fill_window>
    50a0:	ldur	x8, [x29, #-16]
    50a4:	ldr	w9, [x8, #180]
    50a8:	cmp	w9, #0x106
    50ac:	b.cs	50c0 <deflate_slow+0x4c>  // b.hs, b.nlast
    50b0:	ldur	w8, [x29, #-20]
    50b4:	cbnz	w8, 50c0 <deflate_slow+0x4c>
    50b8:	stur	wzr, [x29, #-4]
    50bc:	b	5a94 <deflate_slow+0xa20>
    50c0:	ldur	x8, [x29, #-16]
    50c4:	ldr	w9, [x8, #180]
    50c8:	cbnz	w9, 50d0 <deflate_slow+0x5c>
    50cc:	b	5800 <deflate_slow+0x78c>
    50d0:	stur	wzr, [x29, #-24]
    50d4:	ldur	x8, [x29, #-16]
    50d8:	ldr	w9, [x8, #180]
    50dc:	cmp	w9, #0x3
    50e0:	b.cc	51a0 <deflate_slow+0x12c>  // b.lo, b.ul, b.last
    50e4:	ldur	x8, [x29, #-16]
    50e8:	ldr	w9, [x8, #128]
    50ec:	ldur	x8, [x29, #-16]
    50f0:	ldr	w10, [x8, #144]
    50f4:	lsl	w9, w9, w10
    50f8:	ldur	x8, [x29, #-16]
    50fc:	ldr	x8, [x8, #96]
    5100:	ldur	x11, [x29, #-16]
    5104:	ldr	w10, [x11, #172]
    5108:	add	w10, w10, #0x2
    510c:	ldrb	w10, [x8, w10, uxtw]
    5110:	eor	w9, w9, w10
    5114:	ldur	x8, [x29, #-16]
    5118:	ldr	w10, [x8, #140]
    511c:	and	w9, w9, w10
    5120:	ldur	x8, [x29, #-16]
    5124:	str	w9, [x8, #128]
    5128:	ldur	x8, [x29, #-16]
    512c:	ldr	x8, [x8, #120]
    5130:	ldur	x11, [x29, #-16]
    5134:	ldr	w9, [x11, #128]
    5138:	mov	w11, w9
    513c:	mov	x12, #0x2                   	// #2
    5140:	ldrh	w9, [x8, x11, lsl #1]
    5144:	ldur	x8, [x29, #-16]
    5148:	ldr	x8, [x8, #112]
    514c:	ldur	x11, [x29, #-16]
    5150:	ldr	w10, [x11, #172]
    5154:	ldur	x11, [x29, #-16]
    5158:	ldr	w13, [x11, #88]
    515c:	and	w10, w10, w13
    5160:	mov	w11, w10
    5164:	ubfx	x11, x11, #0, #32
    5168:	mul	x11, x12, x11
    516c:	add	x8, x8, x11
    5170:	strh	w9, [x8]
    5174:	stur	w9, [x29, #-24]
    5178:	ldur	x8, [x29, #-16]
    517c:	ldr	w9, [x8, #172]
    5180:	ldur	x8, [x29, #-16]
    5184:	ldr	x8, [x8, #120]
    5188:	ldur	x11, [x29, #-16]
    518c:	ldr	w10, [x11, #128]
    5190:	mov	w11, w10
    5194:	mul	x11, x12, x11
    5198:	add	x8, x8, x11
    519c:	strh	w9, [x8]
    51a0:	ldur	x8, [x29, #-16]
    51a4:	ldr	w9, [x8, #160]
    51a8:	ldur	x8, [x29, #-16]
    51ac:	str	w9, [x8, #184]
    51b0:	ldur	x8, [x29, #-16]
    51b4:	ldr	w9, [x8, #176]
    51b8:	ldur	x8, [x29, #-16]
    51bc:	str	w9, [x8, #164]
    51c0:	ldur	x8, [x29, #-16]
    51c4:	mov	w9, #0x2                   	// #2
    51c8:	str	w9, [x8, #160]
    51cc:	ldur	w9, [x29, #-24]
    51d0:	cbz	w9, 527c <deflate_slow+0x208>
    51d4:	ldur	x8, [x29, #-16]
    51d8:	ldr	w9, [x8, #184]
    51dc:	ldur	x8, [x29, #-16]
    51e0:	ldr	w10, [x8, #192]
    51e4:	cmp	w9, w10
    51e8:	b.cs	527c <deflate_slow+0x208>  // b.hs, b.nlast
    51ec:	ldur	x8, [x29, #-16]
    51f0:	ldr	w9, [x8, #172]
    51f4:	ldur	w10, [x29, #-24]
    51f8:	subs	w9, w9, w10
    51fc:	ldur	x8, [x29, #-16]
    5200:	ldr	w10, [x8, #80]
    5204:	subs	w10, w10, #0x106
    5208:	cmp	w9, w10
    520c:	b.hi	527c <deflate_slow+0x208>  // b.pmore
    5210:	ldur	x0, [x29, #-16]
    5214:	ldur	w1, [x29, #-24]
    5218:	bl	5aa4 <longest_match>
    521c:	ldur	x8, [x29, #-16]
    5220:	str	w0, [x8, #160]
    5224:	ldur	x8, [x29, #-16]
    5228:	ldr	w9, [x8, #160]
    522c:	cmp	w9, #0x5
    5230:	b.hi	527c <deflate_slow+0x208>  // b.pmore
    5234:	ldur	x8, [x29, #-16]
    5238:	ldr	w9, [x8, #200]
    523c:	cmp	w9, #0x1
    5240:	b.eq	5270 <deflate_slow+0x1fc>  // b.none
    5244:	ldur	x8, [x29, #-16]
    5248:	ldr	w9, [x8, #160]
    524c:	cmp	w9, #0x3
    5250:	b.ne	527c <deflate_slow+0x208>  // b.any
    5254:	ldur	x8, [x29, #-16]
    5258:	ldr	w9, [x8, #172]
    525c:	ldur	x8, [x29, #-16]
    5260:	ldr	w10, [x8, #176]
    5264:	subs	w9, w9, w10
    5268:	cmp	w9, #0x1, lsl #12
    526c:	b.ls	527c <deflate_slow+0x208>  // b.plast
    5270:	ldur	x8, [x29, #-16]
    5274:	mov	w9, #0x2                   	// #2
    5278:	str	w9, [x8, #160]
    527c:	ldur	x8, [x29, #-16]
    5280:	ldr	w9, [x8, #184]
    5284:	cmp	w9, #0x3
    5288:	b.cc	5624 <deflate_slow+0x5b0>  // b.lo, b.ul, b.last
    528c:	ldur	x8, [x29, #-16]
    5290:	ldr	w9, [x8, #160]
    5294:	ldur	x8, [x29, #-16]
    5298:	ldr	w10, [x8, #184]
    529c:	cmp	w9, w10
    52a0:	b.hi	5624 <deflate_slow+0x5b0>  // b.pmore
    52a4:	ldur	x8, [x29, #-16]
    52a8:	ldr	w9, [x8, #172]
    52ac:	ldur	x8, [x29, #-16]
    52b0:	ldr	w10, [x8, #180]
    52b4:	add	w9, w9, w10
    52b8:	subs	w9, w9, #0x3
    52bc:	stur	w9, [x29, #-32]
    52c0:	ldur	x8, [x29, #-16]
    52c4:	ldr	w9, [x8, #184]
    52c8:	subs	w9, w9, #0x3
    52cc:	sturb	w9, [x29, #-33]
    52d0:	ldur	x8, [x29, #-16]
    52d4:	ldr	w9, [x8, #172]
    52d8:	subs	w9, w9, #0x1
    52dc:	ldur	x8, [x29, #-16]
    52e0:	ldr	w10, [x8, #164]
    52e4:	subs	w9, w9, w10
    52e8:	sturh	w9, [x29, #-36]
    52ec:	ldurh	w9, [x29, #-36]
    52f0:	ldur	x8, [x29, #-16]
    52f4:	ldr	x8, [x8, #5904]
    52f8:	ldur	x11, [x29, #-16]
    52fc:	ldr	w10, [x11, #5900]
    5300:	mov	w11, w10
    5304:	mov	x12, #0x2                   	// #2
    5308:	mul	x11, x12, x11
    530c:	add	x8, x8, x11
    5310:	strh	w9, [x8]
    5314:	ldurb	w9, [x29, #-33]
    5318:	ldur	x8, [x29, #-16]
    531c:	ldr	x8, [x8, #5888]
    5320:	ldur	x11, [x29, #-16]
    5324:	ldr	w10, [x11, #5900]
    5328:	mov	w12, w10
    532c:	mov	w10, w12
    5330:	add	w10, w10, #0x1
    5334:	str	w10, [x11, #5900]
    5338:	add	x8, x8, x12
    533c:	strb	w9, [x8]
    5340:	ldurh	w9, [x29, #-36]
    5344:	mov	w10, #0xffffffff            	// #-1
    5348:	add	w9, w10, w9, uxth
    534c:	sturh	w9, [x29, #-36]
    5350:	ldur	x8, [x29, #-16]
    5354:	add	x8, x8, #0xd4
    5358:	ldurb	w9, [x29, #-33]
    535c:	mov	w11, w9
    5360:	adrp	x12, 0 <_length_code>
    5364:	add	x12, x12, #0x0
    5368:	ldrb	w9, [x12, x11]
    536c:	add	w9, w9, #0x100
    5370:	add	w9, w9, #0x1
    5374:	mov	w0, w9
    5378:	sxtw	x11, w0
    537c:	mov	x12, #0x4                   	// #4
    5380:	mul	x11, x12, x11
    5384:	add	x8, x8, x11
    5388:	ldrh	w9, [x8]
    538c:	add	w9, w9, #0x1
    5390:	strh	w9, [x8]
    5394:	ldur	x8, [x29, #-16]
    5398:	add	x8, x8, #0x9c8
    539c:	ldurh	w9, [x29, #-36]
    53a0:	cmp	w9, #0x100
    53a4:	stur	x8, [x29, #-48]
    53a8:	b.ge	53c8 <deflate_slow+0x354>  // b.tcont
    53ac:	ldurh	w8, [x29, #-36]
    53b0:	mov	w9, w8
    53b4:	adrp	x10, 0 <_dist_code>
    53b8:	add	x10, x10, #0x0
    53bc:	ldrb	w8, [x10, x9]
    53c0:	stur	w8, [x29, #-52]
    53c4:	b	53e4 <deflate_slow+0x370>
    53c8:	ldurh	w8, [x29, #-36]
    53cc:	asr	w8, w8, #7
    53d0:	add	w8, w8, #0x100
    53d4:	adrp	x9, 0 <_dist_code>
    53d8:	add	x9, x9, #0x0
    53dc:	ldrb	w8, [x9, w8, sxtw]
    53e0:	stur	w8, [x29, #-52]
    53e4:	ldur	w8, [x29, #-52]
    53e8:	mov	w0, w8
    53ec:	sxtw	x9, w0
    53f0:	mov	x10, #0x4                   	// #4
    53f4:	mul	x9, x10, x9
    53f8:	ldur	x10, [x29, #-48]
    53fc:	add	x9, x10, x9
    5400:	ldrh	w8, [x9]
    5404:	add	w8, w8, #0x1
    5408:	strh	w8, [x9]
    540c:	ldur	x9, [x29, #-16]
    5410:	ldr	w8, [x9, #5900]
    5414:	ldur	x9, [x29, #-16]
    5418:	ldr	w11, [x9, #5896]
    541c:	subs	w11, w11, #0x1
    5420:	cmp	w8, w11
    5424:	cset	w8, eq  // eq = none
    5428:	and	w8, w8, #0x1
    542c:	stur	w8, [x29, #-28]
    5430:	ldur	x9, [x29, #-16]
    5434:	ldr	w8, [x9, #184]
    5438:	subs	w8, w8, #0x1
    543c:	ldur	x9, [x29, #-16]
    5440:	ldr	w11, [x9, #180]
    5444:	subs	w8, w11, w8
    5448:	str	w8, [x9, #180]
    544c:	ldur	x9, [x29, #-16]
    5450:	ldr	w8, [x9, #184]
    5454:	subs	w8, w8, #0x2
    5458:	str	w8, [x9, #184]
    545c:	ldur	x8, [x29, #-16]
    5460:	ldr	w9, [x8, #172]
    5464:	add	w9, w9, #0x1
    5468:	str	w9, [x8, #172]
    546c:	ldur	w10, [x29, #-32]
    5470:	cmp	w9, w10
    5474:	b.hi	5534 <deflate_slow+0x4c0>  // b.pmore
    5478:	ldur	x8, [x29, #-16]
    547c:	ldr	w9, [x8, #128]
    5480:	ldur	x8, [x29, #-16]
    5484:	ldr	w10, [x8, #144]
    5488:	lsl	w9, w9, w10
    548c:	ldur	x8, [x29, #-16]
    5490:	ldr	x8, [x8, #96]
    5494:	ldur	x11, [x29, #-16]
    5498:	ldr	w10, [x11, #172]
    549c:	add	w10, w10, #0x2
    54a0:	ldrb	w10, [x8, w10, uxtw]
    54a4:	eor	w9, w9, w10
    54a8:	ldur	x8, [x29, #-16]
    54ac:	ldr	w10, [x8, #140]
    54b0:	and	w9, w9, w10
    54b4:	ldur	x8, [x29, #-16]
    54b8:	str	w9, [x8, #128]
    54bc:	ldur	x8, [x29, #-16]
    54c0:	ldr	x8, [x8, #120]
    54c4:	ldur	x11, [x29, #-16]
    54c8:	ldr	w9, [x11, #128]
    54cc:	mov	w11, w9
    54d0:	mov	x12, #0x2                   	// #2
    54d4:	ldrh	w9, [x8, x11, lsl #1]
    54d8:	ldur	x8, [x29, #-16]
    54dc:	ldr	x8, [x8, #112]
    54e0:	ldur	x11, [x29, #-16]
    54e4:	ldr	w10, [x11, #172]
    54e8:	ldur	x11, [x29, #-16]
    54ec:	ldr	w13, [x11, #88]
    54f0:	and	w10, w10, w13
    54f4:	mov	w11, w10
    54f8:	ubfx	x11, x11, #0, #32
    54fc:	mul	x11, x12, x11
    5500:	add	x8, x8, x11
    5504:	strh	w9, [x8]
    5508:	stur	w9, [x29, #-24]
    550c:	ldur	x8, [x29, #-16]
    5510:	ldr	w9, [x8, #172]
    5514:	ldur	x8, [x29, #-16]
    5518:	ldr	x8, [x8, #120]
    551c:	ldur	x11, [x29, #-16]
    5520:	ldr	w10, [x11, #128]
    5524:	mov	w11, w10
    5528:	mul	x11, x12, x11
    552c:	add	x8, x8, x11
    5530:	strh	w9, [x8]
    5534:	ldur	x8, [x29, #-16]
    5538:	ldr	w9, [x8, #184]
    553c:	subs	w9, w9, #0x1
    5540:	str	w9, [x8, #184]
    5544:	cbnz	w9, 545c <deflate_slow+0x3e8>
    5548:	ldur	x8, [x29, #-16]
    554c:	str	wzr, [x8, #168]
    5550:	ldur	x8, [x29, #-16]
    5554:	mov	w9, #0x2                   	// #2
    5558:	str	w9, [x8, #160]
    555c:	ldur	x8, [x29, #-16]
    5560:	ldr	w9, [x8, #172]
    5564:	add	w9, w9, #0x1
    5568:	str	w9, [x8, #172]
    556c:	ldur	w9, [x29, #-28]
    5570:	cbz	w9, 5620 <deflate_slow+0x5ac>
    5574:	ldur	x0, [x29, #-16]
    5578:	ldur	x8, [x29, #-16]
    557c:	ldr	x8, [x8, #152]
    5580:	cmp	x8, #0x0
    5584:	cset	w9, lt  // lt = tstop
    5588:	str	x0, [sp, #64]
    558c:	tbnz	w9, #0, 55b0 <deflate_slow+0x53c>
    5590:	ldur	x8, [x29, #-16]
    5594:	ldr	x8, [x8, #96]
    5598:	ldur	x9, [x29, #-16]
    559c:	ldr	x9, [x9, #152]
    55a0:	and	x9, x9, #0xffffffff
    55a4:	add	x8, x8, x9
    55a8:	str	x8, [sp, #56]
    55ac:	b	55b8 <deflate_slow+0x544>
    55b0:	mov	x8, xzr
    55b4:	str	x8, [sp, #56]
    55b8:	ldr	x8, [sp, #56]
    55bc:	ldur	x9, [x29, #-16]
    55c0:	ldr	w10, [x9, #172]
    55c4:	mov	w9, w10
    55c8:	ldur	x11, [x29, #-16]
    55cc:	ldr	x11, [x11, #152]
    55d0:	subs	x2, x9, x11
    55d4:	ldr	x0, [sp, #64]
    55d8:	mov	x1, x8
    55dc:	mov	w10, wzr
    55e0:	mov	w3, w10
    55e4:	bl	0 <_tr_flush_block>
    55e8:	ldur	x8, [x29, #-16]
    55ec:	ldr	w10, [x8, #172]
    55f0:	mov	w8, w10
    55f4:	ldur	x9, [x29, #-16]
    55f8:	str	x8, [x9, #152]
    55fc:	ldur	x8, [x29, #-16]
    5600:	ldr	x0, [x8]
    5604:	bl	2f18 <flush_pending>
    5608:	ldur	x8, [x29, #-16]
    560c:	ldr	x8, [x8]
    5610:	ldr	w10, [x8, #32]
    5614:	cbnz	w10, 5620 <deflate_slow+0x5ac>
    5618:	stur	wzr, [x29, #-4]
    561c:	b	5a94 <deflate_slow+0xa20>
    5620:	b	57fc <deflate_slow+0x788>
    5624:	ldur	x8, [x29, #-16]
    5628:	ldr	w9, [x8, #168]
    562c:	cbz	w9, 57d0 <deflate_slow+0x75c>
    5630:	ldur	x8, [x29, #-16]
    5634:	ldr	x8, [x8, #96]
    5638:	ldur	x9, [x29, #-16]
    563c:	ldr	w10, [x9, #172]
    5640:	subs	w10, w10, #0x1
    5644:	mov	w9, w10
    5648:	ubfx	x9, x9, #0, #32
    564c:	add	x8, x8, x9
    5650:	ldrb	w10, [x8]
    5654:	sturb	w10, [x29, #-37]
    5658:	ldur	x8, [x29, #-16]
    565c:	ldr	x8, [x8, #5904]
    5660:	ldur	x9, [x29, #-16]
    5664:	ldr	w10, [x9, #5900]
    5668:	mov	w9, w10
    566c:	mov	x11, #0x2                   	// #2
    5670:	mul	x9, x11, x9
    5674:	add	x8, x8, x9
    5678:	mov	w10, #0x0                   	// #0
    567c:	strh	w10, [x8]
    5680:	ldurb	w10, [x29, #-37]
    5684:	ldur	x8, [x29, #-16]
    5688:	ldr	x8, [x8, #5888]
    568c:	ldur	x9, [x29, #-16]
    5690:	ldr	w12, [x9, #5900]
    5694:	mov	w11, w12
    5698:	mov	w12, w11
    569c:	add	w12, w12, #0x1
    56a0:	str	w12, [x9, #5900]
    56a4:	add	x8, x8, x11
    56a8:	strb	w10, [x8]
    56ac:	ldur	x8, [x29, #-16]
    56b0:	add	x8, x8, #0xd4
    56b4:	ldurb	w10, [x29, #-37]
    56b8:	mov	w9, w10
    56bc:	mov	x11, #0x4                   	// #4
    56c0:	mul	x9, x11, x9
    56c4:	add	x8, x8, x9
    56c8:	ldrh	w10, [x8]
    56cc:	add	w10, w10, #0x1
    56d0:	strh	w10, [x8]
    56d4:	ldur	x8, [x29, #-16]
    56d8:	ldr	w10, [x8, #5900]
    56dc:	ldur	x8, [x29, #-16]
    56e0:	ldr	w12, [x8, #5896]
    56e4:	subs	w12, w12, #0x1
    56e8:	cmp	w10, w12
    56ec:	cset	w10, eq  // eq = none
    56f0:	and	w10, w10, #0x1
    56f4:	stur	w10, [x29, #-28]
    56f8:	ldur	w10, [x29, #-28]
    56fc:	cbz	w10, 5794 <deflate_slow+0x720>
    5700:	ldur	x0, [x29, #-16]
    5704:	ldur	x8, [x29, #-16]
    5708:	ldr	x8, [x8, #152]
    570c:	cmp	x8, #0x0
    5710:	cset	w9, lt  // lt = tstop
    5714:	str	x0, [sp, #48]
    5718:	tbnz	w9, #0, 573c <deflate_slow+0x6c8>
    571c:	ldur	x8, [x29, #-16]
    5720:	ldr	x8, [x8, #96]
    5724:	ldur	x9, [x29, #-16]
    5728:	ldr	x9, [x9, #152]
    572c:	and	x9, x9, #0xffffffff
    5730:	add	x8, x8, x9
    5734:	str	x8, [sp, #40]
    5738:	b	5744 <deflate_slow+0x6d0>
    573c:	mov	x8, xzr
    5740:	str	x8, [sp, #40]
    5744:	ldr	x8, [sp, #40]
    5748:	ldur	x9, [x29, #-16]
    574c:	ldr	w10, [x9, #172]
    5750:	mov	w9, w10
    5754:	ldur	x11, [x29, #-16]
    5758:	ldr	x11, [x11, #152]
    575c:	subs	x2, x9, x11
    5760:	ldr	x0, [sp, #48]
    5764:	mov	x1, x8
    5768:	mov	w10, wzr
    576c:	mov	w3, w10
    5770:	bl	0 <_tr_flush_block>
    5774:	ldur	x8, [x29, #-16]
    5778:	ldr	w10, [x8, #172]
    577c:	mov	w8, w10
    5780:	ldur	x9, [x29, #-16]
    5784:	str	x8, [x9, #152]
    5788:	ldur	x8, [x29, #-16]
    578c:	ldr	x0, [x8]
    5790:	bl	2f18 <flush_pending>
    5794:	ldur	x8, [x29, #-16]
    5798:	ldr	w9, [x8, #172]
    579c:	add	w9, w9, #0x1
    57a0:	str	w9, [x8, #172]
    57a4:	ldur	x8, [x29, #-16]
    57a8:	ldr	w9, [x8, #180]
    57ac:	subs	w9, w9, #0x1
    57b0:	str	w9, [x8, #180]
    57b4:	ldur	x8, [x29, #-16]
    57b8:	ldr	x8, [x8]
    57bc:	ldr	w9, [x8, #32]
    57c0:	cbnz	w9, 57cc <deflate_slow+0x758>
    57c4:	stur	wzr, [x29, #-4]
    57c8:	b	5a94 <deflate_slow+0xa20>
    57cc:	b	57fc <deflate_slow+0x788>
    57d0:	ldur	x8, [x29, #-16]
    57d4:	mov	w9, #0x1                   	// #1
    57d8:	str	w9, [x8, #168]
    57dc:	ldur	x8, [x29, #-16]
    57e0:	ldr	w9, [x8, #172]
    57e4:	add	w9, w9, #0x1
    57e8:	str	w9, [x8, #172]
    57ec:	ldur	x8, [x29, #-16]
    57f0:	ldr	w9, [x8, #180]
    57f4:	subs	w9, w9, #0x1
    57f8:	str	w9, [x8, #180]
    57fc:	b	5088 <deflate_slow+0x14>
    5800:	ldur	x8, [x29, #-16]
    5804:	ldr	w9, [x8, #168]
    5808:	cbz	w9, 58dc <deflate_slow+0x868>
    580c:	ldur	x8, [x29, #-16]
    5810:	ldr	x8, [x8, #96]
    5814:	ldur	x9, [x29, #-16]
    5818:	ldr	w10, [x9, #172]
    581c:	subs	w10, w10, #0x1
    5820:	mov	w9, w10
    5824:	ubfx	x9, x9, #0, #32
    5828:	add	x8, x8, x9
    582c:	ldrb	w10, [x8]
    5830:	sturb	w10, [x29, #-38]
    5834:	ldur	x8, [x29, #-16]
    5838:	ldr	x8, [x8, #5904]
    583c:	ldur	x9, [x29, #-16]
    5840:	ldr	w10, [x9, #5900]
    5844:	mov	w9, w10
    5848:	mov	x11, #0x2                   	// #2
    584c:	mul	x9, x11, x9
    5850:	add	x8, x8, x9
    5854:	mov	w10, #0x0                   	// #0
    5858:	strh	w10, [x8]
    585c:	ldurb	w10, [x29, #-38]
    5860:	ldur	x8, [x29, #-16]
    5864:	ldr	x8, [x8, #5888]
    5868:	ldur	x9, [x29, #-16]
    586c:	ldr	w12, [x9, #5900]
    5870:	mov	w11, w12
    5874:	mov	w12, w11
    5878:	add	w12, w12, #0x1
    587c:	str	w12, [x9, #5900]
    5880:	add	x8, x8, x11
    5884:	strb	w10, [x8]
    5888:	ldur	x8, [x29, #-16]
    588c:	add	x8, x8, #0xd4
    5890:	ldurb	w10, [x29, #-38]
    5894:	mov	w9, w10
    5898:	mov	x11, #0x4                   	// #4
    589c:	mul	x9, x11, x9
    58a0:	add	x8, x8, x9
    58a4:	ldrh	w10, [x8]
    58a8:	add	w10, w10, #0x1
    58ac:	strh	w10, [x8]
    58b0:	ldur	x8, [x29, #-16]
    58b4:	ldr	w10, [x8, #5900]
    58b8:	ldur	x8, [x29, #-16]
    58bc:	ldr	w12, [x8, #5896]
    58c0:	subs	w12, w12, #0x1
    58c4:	cmp	w10, w12
    58c8:	cset	w10, eq  // eq = none
    58cc:	and	w10, w10, #0x1
    58d0:	stur	w10, [x29, #-28]
    58d4:	ldur	x8, [x29, #-16]
    58d8:	str	wzr, [x8, #168]
    58dc:	ldur	x8, [x29, #-16]
    58e0:	ldr	w9, [x8, #172]
    58e4:	cmp	w9, #0x2
    58e8:	b.cs	58fc <deflate_slow+0x888>  // b.hs, b.nlast
    58ec:	ldur	x8, [x29, #-16]
    58f0:	ldr	w9, [x8, #172]
    58f4:	str	w9, [sp, #36]
    58f8:	b	5904 <deflate_slow+0x890>
    58fc:	mov	w8, #0x2                   	// #2
    5900:	str	w8, [sp, #36]
    5904:	ldr	w8, [sp, #36]
    5908:	ldur	x9, [x29, #-16]
    590c:	str	w8, [x9, #5932]
    5910:	ldur	w8, [x29, #-20]
    5914:	cmp	w8, #0x4
    5918:	b.ne	59d4 <deflate_slow+0x960>  // b.any
    591c:	ldur	x0, [x29, #-16]
    5920:	ldur	x8, [x29, #-16]
    5924:	ldr	x8, [x8, #152]
    5928:	cmp	x8, #0x0
    592c:	cset	w9, lt  // lt = tstop
    5930:	str	x0, [sp, #24]
    5934:	tbnz	w9, #0, 5958 <deflate_slow+0x8e4>
    5938:	ldur	x8, [x29, #-16]
    593c:	ldr	x8, [x8, #96]
    5940:	ldur	x9, [x29, #-16]
    5944:	ldr	x9, [x9, #152]
    5948:	and	x9, x9, #0xffffffff
    594c:	add	x8, x8, x9
    5950:	str	x8, [sp, #16]
    5954:	b	5960 <deflate_slow+0x8ec>
    5958:	mov	x8, xzr
    595c:	str	x8, [sp, #16]
    5960:	ldr	x8, [sp, #16]
    5964:	ldur	x9, [x29, #-16]
    5968:	ldr	w10, [x9, #172]
    596c:	mov	w9, w10
    5970:	ldur	x11, [x29, #-16]
    5974:	ldr	x11, [x11, #152]
    5978:	subs	x2, x9, x11
    597c:	ldr	x0, [sp, #24]
    5980:	mov	x1, x8
    5984:	mov	w3, #0x1                   	// #1
    5988:	bl	0 <_tr_flush_block>
    598c:	ldur	x8, [x29, #-16]
    5990:	ldr	w10, [x8, #172]
    5994:	mov	w8, w10
    5998:	ldur	x9, [x29, #-16]
    599c:	str	x8, [x9, #152]
    59a0:	ldur	x8, [x29, #-16]
    59a4:	ldr	x0, [x8]
    59a8:	bl	2f18 <flush_pending>
    59ac:	ldur	x8, [x29, #-16]
    59b0:	ldr	x8, [x8]
    59b4:	ldr	w10, [x8, #32]
    59b8:	cbnz	w10, 59c8 <deflate_slow+0x954>
    59bc:	mov	w8, #0x2                   	// #2
    59c0:	stur	w8, [x29, #-4]
    59c4:	b	5a94 <deflate_slow+0xa20>
    59c8:	mov	w8, #0x3                   	// #3
    59cc:	stur	w8, [x29, #-4]
    59d0:	b	5a94 <deflate_slow+0xa20>
    59d4:	ldur	x8, [x29, #-16]
    59d8:	ldr	w9, [x8, #5900]
    59dc:	cbz	w9, 5a8c <deflate_slow+0xa18>
    59e0:	ldur	x0, [x29, #-16]
    59e4:	ldur	x8, [x29, #-16]
    59e8:	ldr	x8, [x8, #152]
    59ec:	cmp	x8, #0x0
    59f0:	cset	w9, lt  // lt = tstop
    59f4:	str	x0, [sp, #8]
    59f8:	tbnz	w9, #0, 5a1c <deflate_slow+0x9a8>
    59fc:	ldur	x8, [x29, #-16]
    5a00:	ldr	x8, [x8, #96]
    5a04:	ldur	x9, [x29, #-16]
    5a08:	ldr	x9, [x9, #152]
    5a0c:	and	x9, x9, #0xffffffff
    5a10:	add	x8, x8, x9
    5a14:	str	x8, [sp]
    5a18:	b	5a24 <deflate_slow+0x9b0>
    5a1c:	mov	x8, xzr
    5a20:	str	x8, [sp]
    5a24:	ldr	x8, [sp]
    5a28:	ldur	x9, [x29, #-16]
    5a2c:	ldr	w10, [x9, #172]
    5a30:	mov	w9, w10
    5a34:	ldur	x11, [x29, #-16]
    5a38:	ldr	x11, [x11, #152]
    5a3c:	subs	x2, x9, x11
    5a40:	ldr	x0, [sp, #8]
    5a44:	mov	x1, x8
    5a48:	mov	w10, wzr
    5a4c:	mov	w3, w10
    5a50:	bl	0 <_tr_flush_block>
    5a54:	ldur	x8, [x29, #-16]
    5a58:	ldr	w10, [x8, #172]
    5a5c:	mov	w8, w10
    5a60:	ldur	x9, [x29, #-16]
    5a64:	str	x8, [x9, #152]
    5a68:	ldur	x8, [x29, #-16]
    5a6c:	ldr	x0, [x8]
    5a70:	bl	2f18 <flush_pending>
    5a74:	ldur	x8, [x29, #-16]
    5a78:	ldr	x8, [x8]
    5a7c:	ldr	w10, [x8, #32]
    5a80:	cbnz	w10, 5a8c <deflate_slow+0xa18>
    5a84:	stur	wzr, [x29, #-4]
    5a88:	b	5a94 <deflate_slow+0xa20>
    5a8c:	mov	w8, #0x1                   	// #1
    5a90:	stur	w8, [x29, #-4]
    5a94:	ldur	w0, [x29, #-4]
    5a98:	ldp	x29, x30, [sp, #128]
    5a9c:	add	sp, sp, #0x90
    5aa0:	ret

0000000000005aa4 <longest_match>:
    5aa4:	sub	sp, sp, #0x60
    5aa8:	str	x0, [sp, #80]
    5aac:	str	w1, [sp, #76]
    5ab0:	ldr	x8, [sp, #80]
    5ab4:	ldr	w9, [x8, #188]
    5ab8:	str	w9, [sp, #72]
    5abc:	ldr	x8, [sp, #80]
    5ac0:	ldr	x8, [x8, #96]
    5ac4:	ldr	x10, [sp, #80]
    5ac8:	ldr	w9, [x10, #172]
    5acc:	mov	w10, w9
    5ad0:	add	x8, x8, x10
    5ad4:	str	x8, [sp, #64]
    5ad8:	ldr	x8, [sp, #80]
    5adc:	ldr	w9, [x8, #184]
    5ae0:	str	w9, [sp, #48]
    5ae4:	ldr	x8, [sp, #80]
    5ae8:	ldr	w9, [x8, #208]
    5aec:	str	w9, [sp, #44]
    5af0:	ldr	x8, [sp, #80]
    5af4:	ldr	w9, [x8, #172]
    5af8:	ldr	x8, [sp, #80]
    5afc:	ldr	w11, [x8, #80]
    5b00:	subs	w11, w11, #0x106
    5b04:	cmp	w9, w11
    5b08:	b.ls	5b2c <longest_match+0x88>  // b.plast
    5b0c:	ldr	x8, [sp, #80]
    5b10:	ldr	w9, [x8, #172]
    5b14:	ldr	x8, [sp, #80]
    5b18:	ldr	w10, [x8, #80]
    5b1c:	subs	w10, w10, #0x106
    5b20:	subs	w9, w9, w10
    5b24:	str	w9, [sp, #8]
    5b28:	b	5b34 <longest_match+0x90>
    5b2c:	mov	w8, wzr
    5b30:	str	w8, [sp, #8]
    5b34:	ldr	w8, [sp, #8]
    5b38:	str	w8, [sp, #40]
    5b3c:	ldr	x9, [sp, #80]
    5b40:	ldr	x9, [x9, #112]
    5b44:	str	x9, [sp, #32]
    5b48:	ldr	x9, [sp, #80]
    5b4c:	ldr	w8, [x9, #88]
    5b50:	str	w8, [sp, #28]
    5b54:	ldr	x9, [sp, #80]
    5b58:	ldr	x9, [x9, #96]
    5b5c:	ldr	x10, [sp, #80]
    5b60:	ldr	w8, [x10, #172]
    5b64:	mov	w10, w8
    5b68:	add	x9, x9, x10
    5b6c:	add	x9, x9, #0x102
    5b70:	str	x9, [sp, #16]
    5b74:	ldr	x9, [sp, #64]
    5b78:	ldr	w8, [sp, #48]
    5b7c:	subs	w8, w8, #0x1
    5b80:	mov	w0, w8
    5b84:	sxtw	x10, w0
    5b88:	add	x9, x9, x10
    5b8c:	ldrb	w8, [x9]
    5b90:	strb	w8, [sp, #15]
    5b94:	ldr	x9, [sp, #64]
    5b98:	ldrsw	x10, [sp, #48]
    5b9c:	add	x9, x9, x10
    5ba0:	ldrb	w8, [x9]
    5ba4:	strb	w8, [sp, #14]
    5ba8:	ldr	x9, [sp, #80]
    5bac:	ldr	w8, [x9, #184]
    5bb0:	ldr	x9, [sp, #80]
    5bb4:	ldr	w11, [x9, #204]
    5bb8:	cmp	w8, w11
    5bbc:	b.cc	5bcc <longest_match+0x128>  // b.lo, b.ul, b.last
    5bc0:	ldr	w8, [sp, #72]
    5bc4:	lsr	w8, w8, #2
    5bc8:	str	w8, [sp, #72]
    5bcc:	ldr	w8, [sp, #44]
    5bd0:	ldr	x9, [sp, #80]
    5bd4:	ldr	w10, [x9, #180]
    5bd8:	cmp	w8, w10
    5bdc:	b.ls	5bec <longest_match+0x148>  // b.plast
    5be0:	ldr	x8, [sp, #80]
    5be4:	ldr	w9, [x8, #180]
    5be8:	str	w9, [sp, #44]
    5bec:	ldr	x8, [sp, #80]
    5bf0:	ldr	x8, [x8, #96]
    5bf4:	ldr	w9, [sp, #76]
    5bf8:	mov	w10, w9
    5bfc:	add	x8, x8, x10
    5c00:	str	x8, [sp, #56]
    5c04:	ldr	x8, [sp, #56]
    5c08:	ldrsw	x10, [sp, #48]
    5c0c:	ldrb	w9, [x8, x10]
    5c10:	ldrb	w11, [sp, #14]
    5c14:	cmp	w9, w11
    5c18:	b.ne	5c70 <longest_match+0x1cc>  // b.any
    5c1c:	ldr	x8, [sp, #56]
    5c20:	ldr	w9, [sp, #48]
    5c24:	subs	w9, w9, #0x1
    5c28:	ldrb	w9, [x8, w9, sxtw]
    5c2c:	ldrb	w10, [sp, #15]
    5c30:	cmp	w9, w10
    5c34:	b.ne	5c70 <longest_match+0x1cc>  // b.any
    5c38:	ldr	x8, [sp, #56]
    5c3c:	ldrb	w9, [x8]
    5c40:	ldr	x8, [sp, #64]
    5c44:	ldrb	w10, [x8]
    5c48:	cmp	w9, w10
    5c4c:	b.ne	5c70 <longest_match+0x1cc>  // b.any
    5c50:	ldr	x8, [sp, #56]
    5c54:	add	x9, x8, #0x1
    5c58:	str	x9, [sp, #56]
    5c5c:	ldrb	w10, [x8, #1]
    5c60:	ldr	x8, [sp, #64]
    5c64:	ldrb	w11, [x8, #1]
    5c68:	cmp	w10, w11
    5c6c:	b.eq	5c74 <longest_match+0x1d0>  // b.none
    5c70:	b	5ebc <longest_match+0x418>
    5c74:	ldr	x8, [sp, #64]
    5c78:	add	x8, x8, #0x2
    5c7c:	str	x8, [sp, #64]
    5c80:	ldr	x8, [sp, #56]
    5c84:	add	x8, x8, #0x1
    5c88:	str	x8, [sp, #56]
    5c8c:	ldr	x8, [sp, #64]
    5c90:	add	x9, x8, #0x1
    5c94:	str	x9, [sp, #64]
    5c98:	ldrb	w10, [x8, #1]
    5c9c:	ldr	x8, [sp, #56]
    5ca0:	add	x9, x8, #0x1
    5ca4:	str	x9, [sp, #56]
    5ca8:	ldrb	w11, [x8, #1]
    5cac:	mov	w12, #0x0                   	// #0
    5cb0:	cmp	w10, w11
    5cb4:	str	w12, [sp, #4]
    5cb8:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5cbc:	ldr	x8, [sp, #64]
    5cc0:	add	x9, x8, #0x1
    5cc4:	str	x9, [sp, #64]
    5cc8:	ldrb	w10, [x8, #1]
    5ccc:	ldr	x8, [sp, #56]
    5cd0:	add	x9, x8, #0x1
    5cd4:	str	x9, [sp, #56]
    5cd8:	ldrb	w11, [x8, #1]
    5cdc:	mov	w12, #0x0                   	// #0
    5ce0:	cmp	w10, w11
    5ce4:	str	w12, [sp, #4]
    5ce8:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5cec:	ldr	x8, [sp, #64]
    5cf0:	add	x9, x8, #0x1
    5cf4:	str	x9, [sp, #64]
    5cf8:	ldrb	w10, [x8, #1]
    5cfc:	ldr	x8, [sp, #56]
    5d00:	add	x9, x8, #0x1
    5d04:	str	x9, [sp, #56]
    5d08:	ldrb	w11, [x8, #1]
    5d0c:	mov	w12, #0x0                   	// #0
    5d10:	cmp	w10, w11
    5d14:	str	w12, [sp, #4]
    5d18:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5d1c:	ldr	x8, [sp, #64]
    5d20:	add	x9, x8, #0x1
    5d24:	str	x9, [sp, #64]
    5d28:	ldrb	w10, [x8, #1]
    5d2c:	ldr	x8, [sp, #56]
    5d30:	add	x9, x8, #0x1
    5d34:	str	x9, [sp, #56]
    5d38:	ldrb	w11, [x8, #1]
    5d3c:	mov	w12, #0x0                   	// #0
    5d40:	cmp	w10, w11
    5d44:	str	w12, [sp, #4]
    5d48:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5d4c:	ldr	x8, [sp, #64]
    5d50:	add	x9, x8, #0x1
    5d54:	str	x9, [sp, #64]
    5d58:	ldrb	w10, [x8, #1]
    5d5c:	ldr	x8, [sp, #56]
    5d60:	add	x9, x8, #0x1
    5d64:	str	x9, [sp, #56]
    5d68:	ldrb	w11, [x8, #1]
    5d6c:	mov	w12, #0x0                   	// #0
    5d70:	cmp	w10, w11
    5d74:	str	w12, [sp, #4]
    5d78:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5d7c:	ldr	x8, [sp, #64]
    5d80:	add	x9, x8, #0x1
    5d84:	str	x9, [sp, #64]
    5d88:	ldrb	w10, [x8, #1]
    5d8c:	ldr	x8, [sp, #56]
    5d90:	add	x9, x8, #0x1
    5d94:	str	x9, [sp, #56]
    5d98:	ldrb	w11, [x8, #1]
    5d9c:	mov	w12, #0x0                   	// #0
    5da0:	cmp	w10, w11
    5da4:	str	w12, [sp, #4]
    5da8:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5dac:	ldr	x8, [sp, #64]
    5db0:	add	x9, x8, #0x1
    5db4:	str	x9, [sp, #64]
    5db8:	ldrb	w10, [x8, #1]
    5dbc:	ldr	x8, [sp, #56]
    5dc0:	add	x9, x8, #0x1
    5dc4:	str	x9, [sp, #56]
    5dc8:	ldrb	w11, [x8, #1]
    5dcc:	mov	w12, #0x0                   	// #0
    5dd0:	cmp	w10, w11
    5dd4:	str	w12, [sp, #4]
    5dd8:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5ddc:	ldr	x8, [sp, #64]
    5de0:	add	x9, x8, #0x1
    5de4:	str	x9, [sp, #64]
    5de8:	ldrb	w10, [x8, #1]
    5dec:	ldr	x8, [sp, #56]
    5df0:	add	x9, x8, #0x1
    5df4:	str	x9, [sp, #56]
    5df8:	ldrb	w11, [x8, #1]
    5dfc:	mov	w12, #0x0                   	// #0
    5e00:	cmp	w10, w11
    5e04:	str	w12, [sp, #4]
    5e08:	b.ne	5e20 <longest_match+0x37c>  // b.any
    5e0c:	ldr	x8, [sp, #64]
    5e10:	ldr	x9, [sp, #16]
    5e14:	cmp	x8, x9
    5e18:	cset	w10, cc  // cc = lo, ul, last
    5e1c:	str	w10, [sp, #4]
    5e20:	ldr	w8, [sp, #4]
    5e24:	tbnz	w8, #0, 5c8c <longest_match+0x1e8>
    5e28:	ldr	x8, [sp, #16]
    5e2c:	ldr	x9, [sp, #64]
    5e30:	subs	x8, x8, x9
    5e34:	mov	w10, #0x102                 	// #258
    5e38:	subs	w8, w10, w8
    5e3c:	str	w8, [sp, #52]
    5e40:	ldr	x9, [sp, #16]
    5e44:	mov	x11, #0xfffffffffffffefe    	// #-258
    5e48:	add	x9, x9, x11
    5e4c:	str	x9, [sp, #64]
    5e50:	ldr	w8, [sp, #52]
    5e54:	ldr	w10, [sp, #48]
    5e58:	cmp	w8, w10
    5e5c:	b.le	5ebc <longest_match+0x418>
    5e60:	ldr	w8, [sp, #76]
    5e64:	ldr	x9, [sp, #80]
    5e68:	str	w8, [x9, #176]
    5e6c:	ldr	w8, [sp, #52]
    5e70:	str	w8, [sp, #48]
    5e74:	ldr	w8, [sp, #52]
    5e78:	ldr	w10, [sp, #44]
    5e7c:	cmp	w8, w10
    5e80:	b.lt	5e88 <longest_match+0x3e4>  // b.tstop
    5e84:	b	5f08 <longest_match+0x464>
    5e88:	ldr	x8, [sp, #64]
    5e8c:	ldr	w9, [sp, #48]
    5e90:	subs	w9, w9, #0x1
    5e94:	mov	w0, w9
    5e98:	sxtw	x10, w0
    5e9c:	add	x8, x8, x10
    5ea0:	ldrb	w9, [x8]
    5ea4:	strb	w9, [sp, #15]
    5ea8:	ldr	x8, [sp, #64]
    5eac:	ldrsw	x10, [sp, #48]
    5eb0:	add	x8, x8, x10
    5eb4:	ldrb	w9, [x8]
    5eb8:	strb	w9, [sp, #14]
    5ebc:	ldr	x8, [sp, #32]
    5ec0:	ldr	w9, [sp, #76]
    5ec4:	ldr	w10, [sp, #28]
    5ec8:	and	w9, w9, w10
    5ecc:	ldrh	w9, [x8, w9, uxtw #1]
    5ed0:	str	w9, [sp, #76]
    5ed4:	ldr	w10, [sp, #40]
    5ed8:	mov	w11, #0x0                   	// #0
    5edc:	cmp	w9, w10
    5ee0:	str	w11, [sp]
    5ee4:	b.ls	5f00 <longest_match+0x45c>  // b.plast
    5ee8:	ldr	w8, [sp, #72]
    5eec:	subs	w8, w8, #0x1
    5ef0:	str	w8, [sp, #72]
    5ef4:	cmp	w8, #0x0
    5ef8:	cset	w8, ne  // ne = any
    5efc:	str	w8, [sp]
    5f00:	ldr	w8, [sp]
    5f04:	tbnz	w8, #0, 5bec <longest_match+0x148>
    5f08:	ldr	w8, [sp, #48]
    5f0c:	ldr	x9, [sp, #80]
    5f10:	ldr	w10, [x9, #180]
    5f14:	cmp	w8, w10
    5f18:	b.hi	5f28 <longest_match+0x484>  // b.pmore
    5f1c:	ldr	w8, [sp, #48]
    5f20:	str	w8, [sp, #92]
    5f24:	b	5f34 <longest_match+0x490>
    5f28:	ldr	x8, [sp, #80]
    5f2c:	ldr	w9, [x8, #180]
    5f30:	str	w9, [sp, #92]
    5f34:	ldr	w0, [sp, #92]
    5f38:	add	sp, sp, #0x60
    5f3c:	ret

0000000000005f40 <read_buf>:
    5f40:	sub	sp, sp, #0x30
    5f44:	stp	x29, x30, [sp, #32]
    5f48:	add	x29, sp, #0x20
    5f4c:	str	x0, [sp, #16]
    5f50:	str	x1, [sp, #8]
    5f54:	str	w2, [sp, #4]
    5f58:	ldr	x8, [sp, #16]
    5f5c:	ldr	w9, [x8, #8]
    5f60:	str	w9, [sp]
    5f64:	ldr	w9, [sp]
    5f68:	ldr	w10, [sp, #4]
    5f6c:	cmp	w9, w10
    5f70:	b.ls	5f7c <read_buf+0x3c>  // b.plast
    5f74:	ldr	w8, [sp, #4]
    5f78:	str	w8, [sp]
    5f7c:	ldr	w8, [sp]
    5f80:	cbnz	w8, 5f8c <read_buf+0x4c>
    5f84:	stur	wzr, [x29, #-4]
    5f88:	b	6054 <read_buf+0x114>
    5f8c:	ldr	w8, [sp]
    5f90:	ldr	x9, [sp, #16]
    5f94:	ldr	w10, [x9, #8]
    5f98:	subs	w8, w10, w8
    5f9c:	str	w8, [x9, #8]
    5fa0:	ldr	x0, [sp, #8]
    5fa4:	ldr	x9, [sp, #16]
    5fa8:	ldr	x1, [x9]
    5fac:	ldr	w8, [sp]
    5fb0:	mov	w2, w8
    5fb4:	bl	0 <memcpy>
    5fb8:	ldr	x9, [sp, #16]
    5fbc:	ldr	x9, [x9, #56]
    5fc0:	ldr	w8, [x9, #48]
    5fc4:	cmp	w8, #0x1
    5fc8:	b.ne	5fec <read_buf+0xac>  // b.any
    5fcc:	ldr	x8, [sp, #16]
    5fd0:	ldr	x0, [x8, #96]
    5fd4:	ldr	x1, [sp, #8]
    5fd8:	ldr	w2, [sp]
    5fdc:	bl	0 <adler32>
    5fe0:	ldr	x8, [sp, #16]
    5fe4:	str	x0, [x8, #96]
    5fe8:	b	601c <read_buf+0xdc>
    5fec:	ldr	x8, [sp, #16]
    5ff0:	ldr	x8, [x8, #56]
    5ff4:	ldr	w9, [x8, #48]
    5ff8:	cmp	w9, #0x2
    5ffc:	b.ne	601c <read_buf+0xdc>  // b.any
    6000:	ldr	x8, [sp, #16]
    6004:	ldr	x0, [x8, #96]
    6008:	ldr	x1, [sp, #8]
    600c:	ldr	w2, [sp]
    6010:	bl	0 <crc32>
    6014:	ldr	x8, [sp, #16]
    6018:	str	x0, [x8, #96]
    601c:	ldr	w8, [sp]
    6020:	mov	w9, w8
    6024:	ldr	x10, [sp, #16]
    6028:	ldr	x11, [x10]
    602c:	add	x9, x11, x9
    6030:	str	x9, [x10]
    6034:	ldr	w8, [sp]
    6038:	mov	w9, w8
    603c:	ldr	x10, [sp, #16]
    6040:	ldr	x11, [x10, #16]
    6044:	add	x9, x11, x9
    6048:	str	x9, [x10, #16]
    604c:	ldr	w8, [sp]
    6050:	stur	w8, [x29, #-4]
    6054:	ldur	w0, [x29, #-4]
    6058:	ldp	x29, x30, [sp, #32]
    605c:	add	sp, sp, #0x30
    6060:	ret

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	sub	sp, sp, #0x50
       4:	stp	x29, x30, [sp, #64]
       8:	add	x29, sp, #0x40
       c:	stur	x0, [x29, #-16]
      10:	stur	w1, [x29, #-20]
      14:	str	x2, [sp, #32]
      18:	str	x3, [sp, #24]
      1c:	str	w4, [sp, #20]
      20:	ldr	x8, [sp, #24]
      24:	cbz	x8, 50 <inflateBackInit_+0x50>
      28:	ldr	x8, [sp, #24]
      2c:	ldrb	w9, [x8]
      30:	adrp	x8, 0 <inflateBackInit_>
      34:	add	x8, x8, #0x0
      38:	ldrb	w10, [x8]
      3c:	cmp	w9, w10
      40:	b.ne	50 <inflateBackInit_+0x50>  // b.any
      44:	ldr	w8, [sp, #20]
      48:	cmp	w8, #0x70
      4c:	b.eq	5c <inflateBackInit_+0x5c>  // b.none
      50:	mov	w8, #0xfffffffa            	// #-6
      54:	stur	w8, [x29, #-4]
      58:	b	16c <inflateBackInit_+0x16c>
      5c:	ldur	x8, [x29, #-16]
      60:	cbz	x8, 84 <inflateBackInit_+0x84>
      64:	ldr	x8, [sp, #32]
      68:	cbz	x8, 84 <inflateBackInit_+0x84>
      6c:	ldur	w8, [x29, #-20]
      70:	cmp	w8, #0x8
      74:	b.lt	84 <inflateBackInit_+0x84>  // b.tstop
      78:	ldur	w8, [x29, #-20]
      7c:	cmp	w8, #0xf
      80:	b.le	90 <inflateBackInit_+0x90>
      84:	mov	w8, #0xfffffffe            	// #-2
      88:	stur	w8, [x29, #-4]
      8c:	b	16c <inflateBackInit_+0x16c>
      90:	ldur	x8, [x29, #-16]
      94:	mov	x9, xzr
      98:	str	x9, [x8, #48]
      9c:	ldur	x8, [x29, #-16]
      a0:	ldr	x8, [x8, #64]
      a4:	cbnz	x8, c4 <inflateBackInit_+0xc4>
      a8:	ldur	x8, [x29, #-16]
      ac:	adrp	x9, 0 <zcalloc>
      b0:	add	x9, x9, #0x0
      b4:	str	x9, [x8, #64]
      b8:	ldur	x8, [x29, #-16]
      bc:	mov	x9, xzr
      c0:	str	x9, [x8, #80]
      c4:	ldur	x8, [x29, #-16]
      c8:	ldr	x8, [x8, #72]
      cc:	cbnz	x8, e0 <inflateBackInit_+0xe0>
      d0:	ldur	x8, [x29, #-16]
      d4:	adrp	x9, 0 <zcfree>
      d8:	add	x9, x9, #0x0
      dc:	str	x9, [x8, #72]
      e0:	ldur	x8, [x29, #-16]
      e4:	ldr	x8, [x8, #64]
      e8:	ldur	x9, [x29, #-16]
      ec:	ldr	x0, [x9, #80]
      f0:	mov	w1, #0x1                   	// #1
      f4:	mov	w2, #0x1bf8                	// #7160
      f8:	blr	x8
      fc:	str	x0, [sp, #8]
     100:	ldr	x8, [sp, #8]
     104:	cbnz	x8, 114 <inflateBackInit_+0x114>
     108:	mov	w8, #0xfffffffc            	// #-4
     10c:	stur	w8, [x29, #-4]
     110:	b	16c <inflateBackInit_+0x16c>
     114:	ldr	x8, [sp, #8]
     118:	ldur	x9, [x29, #-16]
     11c:	str	x8, [x9, #56]
     120:	ldr	x8, [sp, #8]
     124:	mov	w10, #0x8000                	// #32768
     128:	str	w10, [x8, #28]
     12c:	ldur	w10, [x29, #-20]
     130:	ldr	x8, [sp, #8]
     134:	str	w10, [x8, #56]
     138:	ldur	w10, [x29, #-20]
     13c:	mov	w11, #0x1                   	// #1
     140:	lsl	w10, w11, w10
     144:	ldr	x8, [sp, #8]
     148:	str	w10, [x8, #60]
     14c:	ldr	x8, [sp, #32]
     150:	ldr	x9, [sp, #8]
     154:	str	x8, [x9, #72]
     158:	ldr	x8, [sp, #8]
     15c:	str	wzr, [x8, #68]
     160:	ldr	x8, [sp, #8]
     164:	str	wzr, [x8, #64]
     168:	stur	wzr, [x29, #-4]
     16c:	ldur	w0, [x29, #-4]
     170:	ldp	x29, x30, [sp, #64]
     174:	add	sp, sp, #0x50
     178:	ret

000000000000017c <inflateBack>:
     17c:	sub	sp, sp, #0xb0
     180:	stp	x29, x30, [sp, #160]
     184:	add	x29, sp, #0xa0
     188:	stur	x0, [x29, #-16]
     18c:	stur	x1, [x29, #-24]
     190:	stur	x2, [x29, #-32]
     194:	stur	x3, [x29, #-40]
     198:	stur	x4, [x29, #-48]
     19c:	ldur	x8, [x29, #-16]
     1a0:	cbz	x8, 1b0 <inflateBack+0x34>
     1a4:	ldur	x8, [x29, #-16]
     1a8:	ldr	x8, [x8, #56]
     1ac:	cbnz	x8, 1bc <inflateBack+0x40>
     1b0:	mov	w8, #0xfffffffe            	// #-2
     1b4:	stur	w8, [x29, #-4]
     1b8:	b	1a8c <inflateBack+0x1910>
     1bc:	ldur	x8, [x29, #-16]
     1c0:	ldr	x8, [x8, #56]
     1c4:	stur	x8, [x29, #-56]
     1c8:	ldur	x8, [x29, #-16]
     1cc:	mov	x9, xzr
     1d0:	str	x9, [x8, #48]
     1d4:	ldur	x8, [x29, #-56]
     1d8:	mov	w10, #0x3f3f                	// #16191
     1dc:	str	w10, [x8, #8]
     1e0:	ldur	x8, [x29, #-56]
     1e4:	str	wzr, [x8, #12]
     1e8:	ldur	x8, [x29, #-56]
     1ec:	str	wzr, [x8, #64]
     1f0:	ldur	x8, [x29, #-16]
     1f4:	ldr	x8, [x8]
     1f8:	stur	x8, [x29, #-64]
     1fc:	ldur	x8, [x29, #-64]
     200:	cbz	x8, 214 <inflateBack+0x98>
     204:	ldur	x8, [x29, #-16]
     208:	ldr	w9, [x8, #8]
     20c:	str	w9, [sp, #36]
     210:	b	21c <inflateBack+0xa0>
     214:	mov	w8, wzr
     218:	str	w8, [sp, #36]
     21c:	ldr	w8, [sp, #36]
     220:	stur	w8, [x29, #-76]
     224:	str	xzr, [sp, #72]
     228:	str	wzr, [sp, #68]
     22c:	ldur	x9, [x29, #-56]
     230:	ldr	x9, [x9, #72]
     234:	stur	x9, [x29, #-72]
     238:	ldur	x9, [x29, #-56]
     23c:	ldr	w8, [x9, #60]
     240:	str	w8, [sp, #80]
     244:	ldur	x8, [x29, #-56]
     248:	ldr	w9, [x8, #8]
     24c:	mov	w10, #0x3f3f                	// #16191
     250:	subs	w9, w9, w10
     254:	mov	w8, w9
     258:	ubfx	x8, x8, #0, #32
     25c:	cmp	x8, #0x12
     260:	str	x8, [sp, #24]
     264:	b.hi	1a5c <inflateBack+0x18e0>  // b.pmore
     268:	adrp	x8, 0 <inflateBackInit_>
     26c:	add	x8, x8, #0x0
     270:	ldr	x11, [sp, #24]
     274:	ldrsw	x10, [x8, x11, lsl #2]
     278:	add	x9, x8, x10
     27c:	br	x9
     280:	ldur	x8, [x29, #-56]
     284:	ldr	w9, [x8, #12]
     288:	cbz	w9, 2c8 <inflateBack+0x14c>
     28c:	ldr	w8, [sp, #68]
     290:	and	w8, w8, #0x7
     294:	ldr	x9, [sp, #72]
     298:	mov	w10, w8
     29c:	lsr	x9, x9, x10
     2a0:	str	x9, [sp, #72]
     2a4:	ldr	w8, [sp, #68]
     2a8:	and	w8, w8, #0x7
     2ac:	ldr	w11, [sp, #68]
     2b0:	subs	w8, w11, w8
     2b4:	str	w8, [sp, #68]
     2b8:	ldur	x8, [x29, #-56]
     2bc:	mov	w9, #0x3f50                	// #16208
     2c0:	str	w9, [x8, #8]
     2c4:	b	1a68 <inflateBack+0x18ec>
     2c8:	ldr	w8, [sp, #68]
     2cc:	cmp	w8, #0x3
     2d0:	b.cs	354 <inflateBack+0x1d8>  // b.hs, b.nlast
     2d4:	ldur	w8, [x29, #-76]
     2d8:	cbnz	w8, 30c <inflateBack+0x190>
     2dc:	ldur	x8, [x29, #-24]
     2e0:	ldur	x0, [x29, #-32]
     2e4:	sub	x1, x29, #0x40
     2e8:	blr	x8
     2ec:	stur	w0, [x29, #-76]
     2f0:	ldur	w9, [x29, #-76]
     2f4:	cbnz	w9, 30c <inflateBack+0x190>
     2f8:	mov	x8, xzr
     2fc:	stur	x8, [x29, #-64]
     300:	mov	w9, #0xfffffffb            	// #-5
     304:	str	w9, [sp, #40]
     308:	b	1a6c <inflateBack+0x18f0>
     30c:	ldur	w8, [x29, #-76]
     310:	subs	w8, w8, #0x1
     314:	stur	w8, [x29, #-76]
     318:	ldur	x9, [x29, #-64]
     31c:	add	x10, x9, #0x1
     320:	stur	x10, [x29, #-64]
     324:	ldrb	w8, [x9]
     328:	mov	w9, w8
     32c:	ldr	w8, [sp, #68]
     330:	mov	w10, w8
     334:	lsl	x9, x9, x10
     338:	ldr	x10, [sp, #72]
     33c:	add	x9, x10, x9
     340:	str	x9, [sp, #72]
     344:	ldr	w8, [sp, #68]
     348:	add	w8, w8, #0x8
     34c:	str	w8, [sp, #68]
     350:	b	2c8 <inflateBack+0x14c>
     354:	ldr	x8, [sp, #72]
     358:	and	w8, w8, #0x1
     35c:	ldur	x9, [x29, #-56]
     360:	str	w8, [x9, #12]
     364:	ldr	x8, [sp, #72]
     368:	lsr	x8, x8, #1
     36c:	str	x8, [sp, #72]
     370:	ldr	w9, [sp, #68]
     374:	subs	w9, w9, #0x1
     378:	str	w9, [sp, #68]
     37c:	ldr	x8, [sp, #72]
     380:	and	w8, w8, #0x3
     384:	subs	w8, w8, #0x0
     388:	mov	w9, w8
     38c:	ubfx	x9, x9, #0, #32
     390:	cmp	x9, #0x3
     394:	str	x9, [sp, #16]
     398:	b.hi	408 <inflateBack+0x28c>  // b.pmore
     39c:	adrp	x8, 0 <inflateBackInit_>
     3a0:	add	x8, x8, #0x0
     3a4:	ldr	x11, [sp, #16]
     3a8:	ldrsw	x10, [x8, x11, lsl #2]
     3ac:	add	x9, x8, x10
     3b0:	br	x9
     3b4:	ldur	x8, [x29, #-56]
     3b8:	mov	w9, #0x3f41                	// #16193
     3bc:	str	w9, [x8, #8]
     3c0:	b	408 <inflateBack+0x28c>
     3c4:	ldur	x0, [x29, #-56]
     3c8:	bl	1a9c <fixedtables>
     3cc:	ldur	x8, [x29, #-56]
     3d0:	mov	w9, #0x3f48                	// #16200
     3d4:	str	w9, [x8, #8]
     3d8:	b	408 <inflateBack+0x28c>
     3dc:	ldur	x8, [x29, #-56]
     3e0:	mov	w9, #0x3f44                	// #16196
     3e4:	str	w9, [x8, #8]
     3e8:	b	408 <inflateBack+0x28c>
     3ec:	ldur	x8, [x29, #-16]
     3f0:	adrp	x9, 0 <inflateBackInit_>
     3f4:	add	x9, x9, #0x0
     3f8:	str	x9, [x8, #48]
     3fc:	ldur	x8, [x29, #-56]
     400:	mov	w10, #0x3f51                	// #16209
     404:	str	w10, [x8, #8]
     408:	ldr	x8, [sp, #72]
     40c:	lsr	x8, x8, #2
     410:	str	x8, [sp, #72]
     414:	ldr	w9, [sp, #68]
     418:	subs	w9, w9, #0x2
     41c:	str	w9, [sp, #68]
     420:	b	1a68 <inflateBack+0x18ec>
     424:	ldr	w8, [sp, #68]
     428:	and	w8, w8, #0x7
     42c:	ldr	x9, [sp, #72]
     430:	mov	w10, w8
     434:	lsr	x9, x9, x10
     438:	str	x9, [sp, #72]
     43c:	ldr	w8, [sp, #68]
     440:	and	w8, w8, #0x7
     444:	ldr	w11, [sp, #68]
     448:	subs	w8, w11, w8
     44c:	str	w8, [sp, #68]
     450:	ldr	w8, [sp, #68]
     454:	cmp	w8, #0x20
     458:	b.cs	4dc <inflateBack+0x360>  // b.hs, b.nlast
     45c:	ldur	w8, [x29, #-76]
     460:	cbnz	w8, 494 <inflateBack+0x318>
     464:	ldur	x8, [x29, #-24]
     468:	ldur	x0, [x29, #-32]
     46c:	sub	x1, x29, #0x40
     470:	blr	x8
     474:	stur	w0, [x29, #-76]
     478:	ldur	w9, [x29, #-76]
     47c:	cbnz	w9, 494 <inflateBack+0x318>
     480:	mov	x8, xzr
     484:	stur	x8, [x29, #-64]
     488:	mov	w9, #0xfffffffb            	// #-5
     48c:	str	w9, [sp, #40]
     490:	b	1a6c <inflateBack+0x18f0>
     494:	ldur	w8, [x29, #-76]
     498:	subs	w8, w8, #0x1
     49c:	stur	w8, [x29, #-76]
     4a0:	ldur	x9, [x29, #-64]
     4a4:	add	x10, x9, #0x1
     4a8:	stur	x10, [x29, #-64]
     4ac:	ldrb	w8, [x9]
     4b0:	mov	w9, w8
     4b4:	ldr	w8, [sp, #68]
     4b8:	mov	w10, w8
     4bc:	lsl	x9, x9, x10
     4c0:	ldr	x10, [sp, #72]
     4c4:	add	x9, x10, x9
     4c8:	str	x9, [sp, #72]
     4cc:	ldr	w8, [sp, #68]
     4d0:	add	w8, w8, #0x8
     4d4:	str	w8, [sp, #68]
     4d8:	b	450 <inflateBack+0x2d4>
     4dc:	ldr	x8, [sp, #72]
     4e0:	and	x8, x8, #0xffff
     4e4:	ldr	x9, [sp, #72]
     4e8:	lsr	x9, x9, #16
     4ec:	eor	x9, x9, #0xffff
     4f0:	cmp	x8, x9
     4f4:	b.eq	518 <inflateBack+0x39c>  // b.none
     4f8:	ldur	x8, [x29, #-16]
     4fc:	adrp	x9, 0 <inflateBackInit_>
     500:	add	x9, x9, #0x0
     504:	str	x9, [x8, #48]
     508:	ldur	x8, [x29, #-56]
     50c:	mov	w10, #0x3f51                	// #16209
     510:	str	w10, [x8, #8]
     514:	b	1a68 <inflateBack+0x18ec>
     518:	ldr	x8, [sp, #72]
     51c:	and	w8, w8, #0xffff
     520:	ldur	x9, [x29, #-56]
     524:	str	w8, [x9, #92]
     528:	str	xzr, [sp, #72]
     52c:	str	wzr, [sp, #68]
     530:	ldur	x8, [x29, #-56]
     534:	ldr	w9, [x8, #92]
     538:	cbz	w9, 674 <inflateBack+0x4f8>
     53c:	ldur	x8, [x29, #-56]
     540:	ldr	w9, [x8, #92]
     544:	str	w9, [sp, #64]
     548:	ldur	w8, [x29, #-76]
     54c:	cbnz	w8, 580 <inflateBack+0x404>
     550:	ldur	x8, [x29, #-24]
     554:	ldur	x0, [x29, #-32]
     558:	sub	x1, x29, #0x40
     55c:	blr	x8
     560:	stur	w0, [x29, #-76]
     564:	ldur	w9, [x29, #-76]
     568:	cbnz	w9, 580 <inflateBack+0x404>
     56c:	mov	x8, xzr
     570:	stur	x8, [x29, #-64]
     574:	mov	w9, #0xfffffffb            	// #-5
     578:	str	w9, [sp, #40]
     57c:	b	1a6c <inflateBack+0x18f0>
     580:	ldr	w8, [sp, #80]
     584:	cbnz	w8, 5d0 <inflateBack+0x454>
     588:	ldur	x8, [x29, #-56]
     58c:	ldr	x8, [x8, #72]
     590:	stur	x8, [x29, #-72]
     594:	ldur	x8, [x29, #-56]
     598:	ldr	w9, [x8, #60]
     59c:	str	w9, [sp, #80]
     5a0:	ldr	w9, [sp, #80]
     5a4:	ldur	x8, [x29, #-56]
     5a8:	str	w9, [x8, #64]
     5ac:	ldur	x8, [x29, #-40]
     5b0:	ldur	x0, [x29, #-48]
     5b4:	ldur	x1, [x29, #-72]
     5b8:	ldr	w2, [sp, #80]
     5bc:	blr	x8
     5c0:	cbz	w0, 5d0 <inflateBack+0x454>
     5c4:	mov	w8, #0xfffffffb            	// #-5
     5c8:	str	w8, [sp, #40]
     5cc:	b	1a6c <inflateBack+0x18f0>
     5d0:	ldr	w8, [sp, #64]
     5d4:	ldur	w9, [x29, #-76]
     5d8:	cmp	w8, w9
     5dc:	b.ls	5e8 <inflateBack+0x46c>  // b.plast
     5e0:	ldur	w8, [x29, #-76]
     5e4:	str	w8, [sp, #64]
     5e8:	ldr	w8, [sp, #64]
     5ec:	ldr	w9, [sp, #80]
     5f0:	cmp	w8, w9
     5f4:	b.ls	600 <inflateBack+0x484>  // b.plast
     5f8:	ldr	w8, [sp, #80]
     5fc:	str	w8, [sp, #64]
     600:	ldur	x0, [x29, #-72]
     604:	ldur	x1, [x29, #-64]
     608:	ldr	w8, [sp, #64]
     60c:	mov	w2, w8
     610:	bl	0 <memcpy>
     614:	ldr	w8, [sp, #64]
     618:	ldur	w9, [x29, #-76]
     61c:	subs	w8, w9, w8
     620:	stur	w8, [x29, #-76]
     624:	ldr	w8, [sp, #64]
     628:	mov	w10, w8
     62c:	ldur	x11, [x29, #-64]
     630:	add	x10, x11, x10
     634:	stur	x10, [x29, #-64]
     638:	ldr	w8, [sp, #64]
     63c:	ldr	w9, [sp, #80]
     640:	subs	w8, w9, w8
     644:	str	w8, [sp, #80]
     648:	ldr	w8, [sp, #64]
     64c:	mov	w10, w8
     650:	ldur	x11, [x29, #-72]
     654:	add	x10, x11, x10
     658:	stur	x10, [x29, #-72]
     65c:	ldr	w8, [sp, #64]
     660:	ldur	x10, [x29, #-56]
     664:	ldr	w9, [x10, #92]
     668:	subs	w8, w9, w8
     66c:	str	w8, [x10, #92]
     670:	b	530 <inflateBack+0x3b4>
     674:	ldur	x8, [x29, #-56]
     678:	mov	w9, #0x3f3f                	// #16191
     67c:	str	w9, [x8, #8]
     680:	b	1a68 <inflateBack+0x18ec>
     684:	ldr	w8, [sp, #68]
     688:	cmp	w8, #0xe
     68c:	b.cs	710 <inflateBack+0x594>  // b.hs, b.nlast
     690:	ldur	w8, [x29, #-76]
     694:	cbnz	w8, 6c8 <inflateBack+0x54c>
     698:	ldur	x8, [x29, #-24]
     69c:	ldur	x0, [x29, #-32]
     6a0:	sub	x1, x29, #0x40
     6a4:	blr	x8
     6a8:	stur	w0, [x29, #-76]
     6ac:	ldur	w9, [x29, #-76]
     6b0:	cbnz	w9, 6c8 <inflateBack+0x54c>
     6b4:	mov	x8, xzr
     6b8:	stur	x8, [x29, #-64]
     6bc:	mov	w9, #0xfffffffb            	// #-5
     6c0:	str	w9, [sp, #40]
     6c4:	b	1a6c <inflateBack+0x18f0>
     6c8:	ldur	w8, [x29, #-76]
     6cc:	subs	w8, w8, #0x1
     6d0:	stur	w8, [x29, #-76]
     6d4:	ldur	x9, [x29, #-64]
     6d8:	add	x10, x9, #0x1
     6dc:	stur	x10, [x29, #-64]
     6e0:	ldrb	w8, [x9]
     6e4:	mov	w9, w8
     6e8:	ldr	w8, [sp, #68]
     6ec:	mov	w10, w8
     6f0:	lsl	x9, x9, x10
     6f4:	ldr	x10, [sp, #72]
     6f8:	add	x9, x10, x9
     6fc:	str	x9, [sp, #72]
     700:	ldr	w8, [sp, #68]
     704:	add	w8, w8, #0x8
     708:	str	w8, [sp, #68]
     70c:	b	684 <inflateBack+0x508>
     710:	ldr	x8, [sp, #72]
     714:	and	w8, w8, #0x1f
     718:	add	w8, w8, #0x101
     71c:	ldur	x9, [x29, #-56]
     720:	str	w8, [x9, #132]
     724:	ldr	x8, [sp, #72]
     728:	lsr	x8, x8, #5
     72c:	str	x8, [sp, #72]
     730:	ldr	w9, [sp, #68]
     734:	subs	w9, w9, #0x5
     738:	str	w9, [sp, #68]
     73c:	ldr	x8, [sp, #72]
     740:	and	w8, w8, #0x1f
     744:	add	w8, w8, #0x1
     748:	ldur	x9, [x29, #-56]
     74c:	str	w8, [x9, #136]
     750:	ldr	x8, [sp, #72]
     754:	lsr	x8, x8, #5
     758:	str	x8, [sp, #72]
     75c:	ldr	w9, [sp, #68]
     760:	subs	w9, w9, #0x5
     764:	str	w9, [sp, #68]
     768:	ldr	x8, [sp, #72]
     76c:	and	w8, w8, #0xf
     770:	add	w8, w8, #0x4
     774:	ldur	x9, [x29, #-56]
     778:	str	w8, [x9, #128]
     77c:	ldr	x8, [sp, #72]
     780:	lsr	x8, x8, #4
     784:	str	x8, [sp, #72]
     788:	ldr	w9, [sp, #68]
     78c:	subs	w9, w9, #0x4
     790:	str	w9, [sp, #68]
     794:	ldur	x8, [x29, #-56]
     798:	ldr	w9, [x8, #132]
     79c:	cmp	w9, #0x11e
     7a0:	b.hi	7b4 <inflateBack+0x638>  // b.pmore
     7a4:	ldur	x8, [x29, #-56]
     7a8:	ldr	w9, [x8, #136]
     7ac:	cmp	w9, #0x1e
     7b0:	b.ls	7d4 <inflateBack+0x658>  // b.plast
     7b4:	ldur	x8, [x29, #-16]
     7b8:	adrp	x9, 0 <inflateBackInit_>
     7bc:	add	x9, x9, #0x0
     7c0:	str	x9, [x8, #48]
     7c4:	ldur	x8, [x29, #-56]
     7c8:	mov	w10, #0x3f51                	// #16209
     7cc:	str	w10, [x8, #8]
     7d0:	b	1a68 <inflateBack+0x18ec>
     7d4:	ldur	x8, [x29, #-56]
     7d8:	str	wzr, [x8, #140]
     7dc:	ldur	x8, [x29, #-56]
     7e0:	ldr	w9, [x8, #140]
     7e4:	ldur	x8, [x29, #-56]
     7e8:	ldr	w10, [x8, #128]
     7ec:	cmp	w9, w10
     7f0:	b.cs	8e4 <inflateBack+0x768>  // b.hs, b.nlast
     7f4:	ldr	w8, [sp, #68]
     7f8:	cmp	w8, #0x3
     7fc:	b.cs	880 <inflateBack+0x704>  // b.hs, b.nlast
     800:	ldur	w8, [x29, #-76]
     804:	cbnz	w8, 838 <inflateBack+0x6bc>
     808:	ldur	x8, [x29, #-24]
     80c:	ldur	x0, [x29, #-32]
     810:	sub	x1, x29, #0x40
     814:	blr	x8
     818:	stur	w0, [x29, #-76]
     81c:	ldur	w9, [x29, #-76]
     820:	cbnz	w9, 838 <inflateBack+0x6bc>
     824:	mov	x8, xzr
     828:	stur	x8, [x29, #-64]
     82c:	mov	w9, #0xfffffffb            	// #-5
     830:	str	w9, [sp, #40]
     834:	b	1a6c <inflateBack+0x18f0>
     838:	ldur	w8, [x29, #-76]
     83c:	subs	w8, w8, #0x1
     840:	stur	w8, [x29, #-76]
     844:	ldur	x9, [x29, #-64]
     848:	add	x10, x9, #0x1
     84c:	stur	x10, [x29, #-64]
     850:	ldrb	w8, [x9]
     854:	mov	w9, w8
     858:	ldr	w8, [sp, #68]
     85c:	mov	w10, w8
     860:	lsl	x9, x9, x10
     864:	ldr	x10, [sp, #72]
     868:	add	x9, x10, x9
     86c:	str	x9, [sp, #72]
     870:	ldr	w8, [sp, #68]
     874:	add	w8, w8, #0x8
     878:	str	w8, [sp, #68]
     87c:	b	7f4 <inflateBack+0x678>
     880:	ldr	x8, [sp, #72]
     884:	and	w8, w8, #0x7
     888:	ldur	x9, [x29, #-56]
     88c:	add	x9, x9, #0x98
     890:	ldur	x10, [x29, #-56]
     894:	ldr	w11, [x10, #140]
     898:	mov	w12, w11
     89c:	mov	w11, w12
     8a0:	add	w11, w11, #0x1
     8a4:	str	w11, [x10, #140]
     8a8:	mov	x10, #0x2                   	// #2
     8ac:	adrp	x13, 0 <inflateBackInit_>
     8b0:	add	x13, x13, #0x0
     8b4:	ldrh	w11, [x13, x12, lsl #1]
     8b8:	mov	w12, w11
     8bc:	mul	x10, x10, x12
     8c0:	add	x9, x9, x10
     8c4:	strh	w8, [x9]
     8c8:	ldr	x8, [sp, #72]
     8cc:	lsr	x8, x8, #3
     8d0:	str	x8, [sp, #72]
     8d4:	ldr	w9, [sp, #68]
     8d8:	subs	w9, w9, #0x3
     8dc:	str	w9, [sp, #68]
     8e0:	b	7dc <inflateBack+0x660>
     8e4:	ldur	x8, [x29, #-56]
     8e8:	ldr	w9, [x8, #140]
     8ec:	cmp	w9, #0x13
     8f0:	b.cs	93c <inflateBack+0x7c0>  // b.hs, b.nlast
     8f4:	ldur	x8, [x29, #-56]
     8f8:	add	x8, x8, #0x98
     8fc:	ldur	x9, [x29, #-56]
     900:	ldr	w10, [x9, #140]
     904:	mov	w11, w10
     908:	mov	w10, w11
     90c:	add	w10, w10, #0x1
     910:	str	w10, [x9, #140]
     914:	mov	x9, #0x2                   	// #2
     918:	adrp	x12, 0 <inflateBackInit_>
     91c:	add	x12, x12, #0x0
     920:	ldrh	w10, [x12, x11, lsl #1]
     924:	mov	w11, w10
     928:	mul	x9, x9, x11
     92c:	add	x8, x8, x9
     930:	mov	w10, #0x0                   	// #0
     934:	strh	w10, [x8]
     938:	b	8e4 <inflateBack+0x768>
     93c:	ldur	x8, [x29, #-56]
     940:	add	x8, x8, #0x558
     944:	ldur	x9, [x29, #-56]
     948:	str	x8, [x9, #144]
     94c:	ldur	x8, [x29, #-56]
     950:	ldr	x8, [x8, #144]
     954:	ldur	x9, [x29, #-56]
     958:	str	x8, [x9, #104]
     95c:	ldur	x8, [x29, #-56]
     960:	mov	w10, #0x7                   	// #7
     964:	str	w10, [x8, #120]
     968:	ldur	x8, [x29, #-56]
     96c:	add	x1, x8, #0x98
     970:	ldur	x8, [x29, #-56]
     974:	add	x3, x8, #0x90
     978:	ldur	x8, [x29, #-56]
     97c:	add	x4, x8, #0x78
     980:	ldur	x8, [x29, #-56]
     984:	add	x5, x8, #0x318
     988:	mov	w10, wzr
     98c:	mov	w0, w10
     990:	mov	w2, #0x13                  	// #19
     994:	bl	0 <inflate_table>
     998:	str	w0, [sp, #40]
     99c:	ldr	w10, [sp, #40]
     9a0:	cbz	w10, 9c4 <inflateBack+0x848>
     9a4:	ldur	x8, [x29, #-16]
     9a8:	adrp	x9, 0 <inflateBackInit_>
     9ac:	add	x9, x9, #0x0
     9b0:	str	x9, [x8, #48]
     9b4:	ldur	x8, [x29, #-56]
     9b8:	mov	w10, #0x3f51                	// #16209
     9bc:	str	w10, [x8, #8]
     9c0:	b	1a68 <inflateBack+0x18ec>
     9c4:	ldur	x8, [x29, #-56]
     9c8:	str	wzr, [x8, #140]
     9cc:	ldur	x8, [x29, #-56]
     9d0:	ldr	w9, [x8, #140]
     9d4:	ldur	x8, [x29, #-56]
     9d8:	ldr	w10, [x8, #132]
     9dc:	ldur	x8, [x29, #-56]
     9e0:	ldr	w11, [x8, #136]
     9e4:	add	w10, w10, w11
     9e8:	cmp	w9, w10
     9ec:	b.cs	ec4 <inflateBack+0xd48>  // b.hs, b.nlast
     9f0:	ldur	x8, [x29, #-56]
     9f4:	ldr	x8, [x8, #104]
     9f8:	ldr	x9, [sp, #72]
     9fc:	ldur	x10, [x29, #-56]
     a00:	ldr	w11, [x10, #120]
     a04:	mov	w12, #0x1                   	// #1
     a08:	lsl	w11, w12, w11
     a0c:	subs	w11, w11, #0x1
     a10:	and	w9, w9, w11
     a14:	ldr	w9, [x8, w9, uxtw #2]
     a18:	str	w9, [sp, #52]
     a1c:	ldrb	w9, [sp, #53]
     a20:	ldr	w11, [sp, #68]
     a24:	cmp	w9, w11
     a28:	b.hi	a30 <inflateBack+0x8b4>  // b.pmore
     a2c:	b	ab0 <inflateBack+0x934>
     a30:	ldur	w8, [x29, #-76]
     a34:	cbnz	w8, a68 <inflateBack+0x8ec>
     a38:	ldur	x8, [x29, #-24]
     a3c:	ldur	x0, [x29, #-32]
     a40:	sub	x1, x29, #0x40
     a44:	blr	x8
     a48:	stur	w0, [x29, #-76]
     a4c:	ldur	w9, [x29, #-76]
     a50:	cbnz	w9, a68 <inflateBack+0x8ec>
     a54:	mov	x8, xzr
     a58:	stur	x8, [x29, #-64]
     a5c:	mov	w9, #0xfffffffb            	// #-5
     a60:	str	w9, [sp, #40]
     a64:	b	1a6c <inflateBack+0x18f0>
     a68:	ldur	w8, [x29, #-76]
     a6c:	subs	w8, w8, #0x1
     a70:	stur	w8, [x29, #-76]
     a74:	ldur	x9, [x29, #-64]
     a78:	add	x10, x9, #0x1
     a7c:	stur	x10, [x29, #-64]
     a80:	ldrb	w8, [x9]
     a84:	mov	w9, w8
     a88:	ldr	w8, [sp, #68]
     a8c:	mov	w10, w8
     a90:	lsl	x9, x9, x10
     a94:	ldr	x10, [sp, #72]
     a98:	add	x9, x10, x9
     a9c:	str	x9, [sp, #72]
     aa0:	ldr	w8, [sp, #68]
     aa4:	add	w8, w8, #0x8
     aa8:	str	w8, [sp, #68]
     aac:	b	9f0 <inflateBack+0x874>
     ab0:	ldrh	w8, [sp, #54]
     ab4:	cmp	w8, #0x10
     ab8:	b.ge	b1c <inflateBack+0x9a0>  // b.tcont
     abc:	ldrb	w8, [sp, #53]
     ac0:	mov	w9, w8
     ac4:	ldr	x10, [sp, #72]
     ac8:	lsr	x9, x10, x9
     acc:	str	x9, [sp, #72]
     ad0:	ldrb	w8, [sp, #53]
     ad4:	ldr	w11, [sp, #68]
     ad8:	subs	w8, w11, w8
     adc:	str	w8, [sp, #68]
     ae0:	mov	x8, #0x2                   	// #2
     ae4:	add	x9, sp, #0x34
     ae8:	ldrh	w10, [x9, #2]
     aec:	ldur	x9, [x29, #-56]
     af0:	add	x9, x9, #0x98
     af4:	ldur	x11, [x29, #-56]
     af8:	ldr	w12, [x11, #140]
     afc:	mov	w13, w12
     b00:	mov	w12, w13
     b04:	add	w12, w12, #0x1
     b08:	str	w12, [x11, #140]
     b0c:	mul	x8, x8, x13
     b10:	add	x8, x9, x8
     b14:	strh	w10, [x8]
     b18:	b	ec0 <inflateBack+0xd44>
     b1c:	ldrh	w8, [sp, #54]
     b20:	cmp	w8, #0x10
     b24:	b.ne	c54 <inflateBack+0xad8>  // b.any
     b28:	ldr	w8, [sp, #68]
     b2c:	ldrb	w9, [sp, #53]
     b30:	add	w9, w9, #0x2
     b34:	cmp	w8, w9
     b38:	b.cs	bbc <inflateBack+0xa40>  // b.hs, b.nlast
     b3c:	ldur	w8, [x29, #-76]
     b40:	cbnz	w8, b74 <inflateBack+0x9f8>
     b44:	ldur	x8, [x29, #-24]
     b48:	ldur	x0, [x29, #-32]
     b4c:	sub	x1, x29, #0x40
     b50:	blr	x8
     b54:	stur	w0, [x29, #-76]
     b58:	ldur	w9, [x29, #-76]
     b5c:	cbnz	w9, b74 <inflateBack+0x9f8>
     b60:	mov	x8, xzr
     b64:	stur	x8, [x29, #-64]
     b68:	mov	w9, #0xfffffffb            	// #-5
     b6c:	str	w9, [sp, #40]
     b70:	b	1a6c <inflateBack+0x18f0>
     b74:	ldur	w8, [x29, #-76]
     b78:	subs	w8, w8, #0x1
     b7c:	stur	w8, [x29, #-76]
     b80:	ldur	x9, [x29, #-64]
     b84:	add	x10, x9, #0x1
     b88:	stur	x10, [x29, #-64]
     b8c:	ldrb	w8, [x9]
     b90:	mov	w9, w8
     b94:	ldr	w8, [sp, #68]
     b98:	mov	w10, w8
     b9c:	lsl	x9, x9, x10
     ba0:	ldr	x10, [sp, #72]
     ba4:	add	x9, x10, x9
     ba8:	str	x9, [sp, #72]
     bac:	ldr	w8, [sp, #68]
     bb0:	add	w8, w8, #0x8
     bb4:	str	w8, [sp, #68]
     bb8:	b	b28 <inflateBack+0x9ac>
     bbc:	ldrb	w8, [sp, #53]
     bc0:	mov	w9, w8
     bc4:	ldr	x10, [sp, #72]
     bc8:	lsr	x9, x10, x9
     bcc:	str	x9, [sp, #72]
     bd0:	ldrb	w8, [sp, #53]
     bd4:	ldr	w11, [sp, #68]
     bd8:	subs	w8, w11, w8
     bdc:	str	w8, [sp, #68]
     be0:	ldur	x8, [x29, #-56]
     be4:	ldr	w9, [x8, #140]
     be8:	cbnz	w9, c0c <inflateBack+0xa90>
     bec:	ldur	x8, [x29, #-16]
     bf0:	adrp	x9, 0 <inflateBackInit_>
     bf4:	add	x9, x9, #0x0
     bf8:	str	x9, [x8, #48]
     bfc:	ldur	x8, [x29, #-56]
     c00:	mov	w10, #0x3f51                	// #16209
     c04:	str	w10, [x8, #8]
     c08:	b	ec4 <inflateBack+0xd48>
     c0c:	ldur	x8, [x29, #-56]
     c10:	add	x8, x8, #0x98
     c14:	ldur	x9, [x29, #-56]
     c18:	ldr	w10, [x9, #140]
     c1c:	subs	w10, w10, #0x1
     c20:	ldrh	w10, [x8, w10, uxtw #1]
     c24:	str	w10, [sp, #44]
     c28:	ldr	x8, [sp, #72]
     c2c:	and	w8, w8, #0x3
     c30:	add	w8, w8, #0x3
     c34:	str	w8, [sp, #64]
     c38:	ldr	x8, [sp, #72]
     c3c:	lsr	x8, x8, #2
     c40:	str	x8, [sp, #72]
     c44:	ldr	w9, [sp, #68]
     c48:	subs	w9, w9, #0x2
     c4c:	str	w9, [sp, #68]
     c50:	b	e2c <inflateBack+0xcb0>
     c54:	ldrh	w8, [sp, #54]
     c58:	cmp	w8, #0x11
     c5c:	b.ne	d48 <inflateBack+0xbcc>  // b.any
     c60:	ldr	w8, [sp, #68]
     c64:	ldrb	w9, [sp, #53]
     c68:	add	w9, w9, #0x3
     c6c:	cmp	w8, w9
     c70:	b.cs	cf4 <inflateBack+0xb78>  // b.hs, b.nlast
     c74:	ldur	w8, [x29, #-76]
     c78:	cbnz	w8, cac <inflateBack+0xb30>
     c7c:	ldur	x8, [x29, #-24]
     c80:	ldur	x0, [x29, #-32]
     c84:	sub	x1, x29, #0x40
     c88:	blr	x8
     c8c:	stur	w0, [x29, #-76]
     c90:	ldur	w9, [x29, #-76]
     c94:	cbnz	w9, cac <inflateBack+0xb30>
     c98:	mov	x8, xzr
     c9c:	stur	x8, [x29, #-64]
     ca0:	mov	w9, #0xfffffffb            	// #-5
     ca4:	str	w9, [sp, #40]
     ca8:	b	1a6c <inflateBack+0x18f0>
     cac:	ldur	w8, [x29, #-76]
     cb0:	subs	w8, w8, #0x1
     cb4:	stur	w8, [x29, #-76]
     cb8:	ldur	x9, [x29, #-64]
     cbc:	add	x10, x9, #0x1
     cc0:	stur	x10, [x29, #-64]
     cc4:	ldrb	w8, [x9]
     cc8:	mov	w9, w8
     ccc:	ldr	w8, [sp, #68]
     cd0:	mov	w10, w8
     cd4:	lsl	x9, x9, x10
     cd8:	ldr	x10, [sp, #72]
     cdc:	add	x9, x10, x9
     ce0:	str	x9, [sp, #72]
     ce4:	ldr	w8, [sp, #68]
     ce8:	add	w8, w8, #0x8
     cec:	str	w8, [sp, #68]
     cf0:	b	c60 <inflateBack+0xae4>
     cf4:	ldrb	w8, [sp, #53]
     cf8:	mov	w9, w8
     cfc:	ldr	x10, [sp, #72]
     d00:	lsr	x9, x10, x9
     d04:	str	x9, [sp, #72]
     d08:	ldrb	w8, [sp, #53]
     d0c:	ldr	w11, [sp, #68]
     d10:	subs	w8, w11, w8
     d14:	str	w8, [sp, #68]
     d18:	str	wzr, [sp, #44]
     d1c:	ldr	x8, [sp, #72]
     d20:	and	w8, w8, #0x7
     d24:	add	w8, w8, #0x3
     d28:	str	w8, [sp, #64]
     d2c:	ldr	x8, [sp, #72]
     d30:	lsr	x8, x8, #3
     d34:	str	x8, [sp, #72]
     d38:	ldr	w9, [sp, #68]
     d3c:	subs	w9, w9, #0x3
     d40:	str	w9, [sp, #68]
     d44:	b	e2c <inflateBack+0xcb0>
     d48:	ldr	w8, [sp, #68]
     d4c:	ldrb	w9, [sp, #53]
     d50:	add	w9, w9, #0x7
     d54:	cmp	w8, w9
     d58:	b.cs	ddc <inflateBack+0xc60>  // b.hs, b.nlast
     d5c:	ldur	w8, [x29, #-76]
     d60:	cbnz	w8, d94 <inflateBack+0xc18>
     d64:	ldur	x8, [x29, #-24]
     d68:	ldur	x0, [x29, #-32]
     d6c:	sub	x1, x29, #0x40
     d70:	blr	x8
     d74:	stur	w0, [x29, #-76]
     d78:	ldur	w9, [x29, #-76]
     d7c:	cbnz	w9, d94 <inflateBack+0xc18>
     d80:	mov	x8, xzr
     d84:	stur	x8, [x29, #-64]
     d88:	mov	w9, #0xfffffffb            	// #-5
     d8c:	str	w9, [sp, #40]
     d90:	b	1a6c <inflateBack+0x18f0>
     d94:	ldur	w8, [x29, #-76]
     d98:	subs	w8, w8, #0x1
     d9c:	stur	w8, [x29, #-76]
     da0:	ldur	x9, [x29, #-64]
     da4:	add	x10, x9, #0x1
     da8:	stur	x10, [x29, #-64]
     dac:	ldrb	w8, [x9]
     db0:	mov	w9, w8
     db4:	ldr	w8, [sp, #68]
     db8:	mov	w10, w8
     dbc:	lsl	x9, x9, x10
     dc0:	ldr	x10, [sp, #72]
     dc4:	add	x9, x10, x9
     dc8:	str	x9, [sp, #72]
     dcc:	ldr	w8, [sp, #68]
     dd0:	add	w8, w8, #0x8
     dd4:	str	w8, [sp, #68]
     dd8:	b	d48 <inflateBack+0xbcc>
     ddc:	ldrb	w8, [sp, #53]
     de0:	mov	w9, w8
     de4:	ldr	x10, [sp, #72]
     de8:	lsr	x9, x10, x9
     dec:	str	x9, [sp, #72]
     df0:	ldrb	w8, [sp, #53]
     df4:	ldr	w11, [sp, #68]
     df8:	subs	w8, w11, w8
     dfc:	str	w8, [sp, #68]
     e00:	str	wzr, [sp, #44]
     e04:	ldr	x8, [sp, #72]
     e08:	and	w8, w8, #0x7f
     e0c:	add	w8, w8, #0xb
     e10:	str	w8, [sp, #64]
     e14:	ldr	x8, [sp, #72]
     e18:	lsr	x8, x8, #7
     e1c:	str	x8, [sp, #72]
     e20:	ldr	w9, [sp, #68]
     e24:	subs	w9, w9, #0x7
     e28:	str	w9, [sp, #68]
     e2c:	ldur	x8, [x29, #-56]
     e30:	ldr	w9, [x8, #140]
     e34:	ldr	w10, [sp, #64]
     e38:	add	w9, w9, w10
     e3c:	ldur	x8, [x29, #-56]
     e40:	ldr	w10, [x8, #132]
     e44:	ldur	x8, [x29, #-56]
     e48:	ldr	w11, [x8, #136]
     e4c:	add	w10, w10, w11
     e50:	cmp	w9, w10
     e54:	b.ls	e78 <inflateBack+0xcfc>  // b.plast
     e58:	ldur	x8, [x29, #-16]
     e5c:	adrp	x9, 0 <inflateBackInit_>
     e60:	add	x9, x9, #0x0
     e64:	str	x9, [x8, #48]
     e68:	ldur	x8, [x29, #-56]
     e6c:	mov	w10, #0x3f51                	// #16209
     e70:	str	w10, [x8, #8]
     e74:	b	ec4 <inflateBack+0xd48>
     e78:	ldr	w8, [sp, #64]
     e7c:	subs	w9, w8, #0x1
     e80:	str	w9, [sp, #64]
     e84:	cbz	w8, ec0 <inflateBack+0xd44>
     e88:	ldr	w8, [sp, #44]
     e8c:	ldur	x9, [x29, #-56]
     e90:	add	x9, x9, #0x98
     e94:	ldur	x10, [x29, #-56]
     e98:	ldr	w11, [x10, #140]
     e9c:	mov	w12, w11
     ea0:	mov	w11, w12
     ea4:	add	w11, w11, #0x1
     ea8:	str	w11, [x10, #140]
     eac:	mov	x10, #0x2                   	// #2
     eb0:	mul	x10, x10, x12
     eb4:	add	x9, x9, x10
     eb8:	strh	w8, [x9]
     ebc:	b	e78 <inflateBack+0xcfc>
     ec0:	b	9cc <inflateBack+0x850>
     ec4:	ldur	x8, [x29, #-56]
     ec8:	ldr	w9, [x8, #8]
     ecc:	mov	w10, #0x3f51                	// #16209
     ed0:	cmp	w9, w10
     ed4:	b.ne	edc <inflateBack+0xd60>  // b.any
     ed8:	b	1a68 <inflateBack+0x18ec>
     edc:	ldur	x8, [x29, #-56]
     ee0:	ldrh	w9, [x8, #664]
     ee4:	cbnz	w9, f08 <inflateBack+0xd8c>
     ee8:	ldur	x8, [x29, #-16]
     eec:	adrp	x9, 0 <inflateBackInit_>
     ef0:	add	x9, x9, #0x0
     ef4:	str	x9, [x8, #48]
     ef8:	ldur	x8, [x29, #-56]
     efc:	mov	w10, #0x3f51                	// #16209
     f00:	str	w10, [x8, #8]
     f04:	b	1a68 <inflateBack+0x18ec>
     f08:	ldur	x8, [x29, #-56]
     f0c:	add	x8, x8, #0x558
     f10:	ldur	x9, [x29, #-56]
     f14:	str	x8, [x9, #144]
     f18:	ldur	x8, [x29, #-56]
     f1c:	ldr	x8, [x8, #144]
     f20:	ldur	x9, [x29, #-56]
     f24:	str	x8, [x9, #104]
     f28:	ldur	x8, [x29, #-56]
     f2c:	mov	w10, #0x9                   	// #9
     f30:	str	w10, [x8, #120]
     f34:	ldur	x8, [x29, #-56]
     f38:	add	x1, x8, #0x98
     f3c:	ldur	x8, [x29, #-56]
     f40:	ldr	w2, [x8, #132]
     f44:	ldur	x8, [x29, #-56]
     f48:	add	x3, x8, #0x90
     f4c:	ldur	x8, [x29, #-56]
     f50:	add	x4, x8, #0x78
     f54:	ldur	x8, [x29, #-56]
     f58:	add	x5, x8, #0x318
     f5c:	mov	w0, #0x1                   	// #1
     f60:	bl	0 <inflate_table>
     f64:	str	w0, [sp, #40]
     f68:	ldr	w10, [sp, #40]
     f6c:	cbz	w10, f90 <inflateBack+0xe14>
     f70:	ldur	x8, [x29, #-16]
     f74:	adrp	x9, 0 <inflateBackInit_>
     f78:	add	x9, x9, #0x0
     f7c:	str	x9, [x8, #48]
     f80:	ldur	x8, [x29, #-56]
     f84:	mov	w10, #0x3f51                	// #16209
     f88:	str	w10, [x8, #8]
     f8c:	b	1a68 <inflateBack+0x18ec>
     f90:	ldur	x8, [x29, #-56]
     f94:	ldr	x8, [x8, #144]
     f98:	ldur	x9, [x29, #-56]
     f9c:	str	x8, [x9, #112]
     fa0:	ldur	x8, [x29, #-56]
     fa4:	mov	w10, #0x6                   	// #6
     fa8:	str	w10, [x8, #124]
     fac:	ldur	x8, [x29, #-56]
     fb0:	add	x8, x8, #0x98
     fb4:	ldur	x9, [x29, #-56]
     fb8:	ldr	w10, [x9, #132]
     fbc:	mov	w9, w10
     fc0:	mov	x11, #0x2                   	// #2
     fc4:	mul	x9, x11, x9
     fc8:	add	x1, x8, x9
     fcc:	ldur	x8, [x29, #-56]
     fd0:	ldr	w2, [x8, #136]
     fd4:	ldur	x8, [x29, #-56]
     fd8:	add	x3, x8, #0x90
     fdc:	ldur	x8, [x29, #-56]
     fe0:	add	x4, x8, #0x7c
     fe4:	ldur	x8, [x29, #-56]
     fe8:	add	x5, x8, #0x318
     fec:	mov	w0, #0x2                   	// #2
     ff0:	bl	0 <inflate_table>
     ff4:	str	w0, [sp, #40]
     ff8:	ldr	w10, [sp, #40]
     ffc:	cbz	w10, 1020 <inflateBack+0xea4>
    1000:	ldur	x8, [x29, #-16]
    1004:	adrp	x9, 0 <inflateBackInit_>
    1008:	add	x9, x9, #0x0
    100c:	str	x9, [x8, #48]
    1010:	ldur	x8, [x29, #-56]
    1014:	mov	w10, #0x3f51                	// #16209
    1018:	str	w10, [x8, #8]
    101c:	b	1a68 <inflateBack+0x18ec>
    1020:	ldur	x8, [x29, #-56]
    1024:	mov	w9, #0x3f48                	// #16200
    1028:	str	w9, [x8, #8]
    102c:	ldur	w8, [x29, #-76]
    1030:	cmp	w8, #0x6
    1034:	b.cc	1118 <inflateBack+0xf9c>  // b.lo, b.ul, b.last
    1038:	ldr	w8, [sp, #80]
    103c:	cmp	w8, #0x102
    1040:	b.cc	1118 <inflateBack+0xf9c>  // b.lo, b.ul, b.last
    1044:	ldur	x8, [x29, #-72]
    1048:	ldur	x9, [x29, #-16]
    104c:	str	x8, [x9, #24]
    1050:	ldr	w10, [sp, #80]
    1054:	ldur	x8, [x29, #-16]
    1058:	str	w10, [x8, #32]
    105c:	ldur	x8, [x29, #-64]
    1060:	ldur	x9, [x29, #-16]
    1064:	str	x8, [x9]
    1068:	ldur	w10, [x29, #-76]
    106c:	ldur	x8, [x29, #-16]
    1070:	str	w10, [x8, #8]
    1074:	ldr	x8, [sp, #72]
    1078:	ldur	x9, [x29, #-56]
    107c:	str	x8, [x9, #80]
    1080:	ldr	w10, [sp, #68]
    1084:	ldur	x8, [x29, #-56]
    1088:	str	w10, [x8, #88]
    108c:	ldur	x8, [x29, #-56]
    1090:	ldr	w9, [x8, #64]
    1094:	ldur	x8, [x29, #-56]
    1098:	ldr	w10, [x8, #60]
    109c:	cmp	w9, w10
    10a0:	b.cs	10bc <inflateBack+0xf40>  // b.hs, b.nlast
    10a4:	ldur	x8, [x29, #-56]
    10a8:	ldr	w9, [x8, #60]
    10ac:	ldr	w10, [sp, #80]
    10b0:	subs	w9, w9, w10
    10b4:	ldur	x8, [x29, #-56]
    10b8:	str	w9, [x8, #64]
    10bc:	ldur	x0, [x29, #-16]
    10c0:	ldur	x8, [x29, #-56]
    10c4:	ldr	w1, [x8, #60]
    10c8:	bl	0 <inflate_fast>
    10cc:	ldur	x8, [x29, #-16]
    10d0:	ldr	x8, [x8, #24]
    10d4:	stur	x8, [x29, #-72]
    10d8:	ldur	x8, [x29, #-16]
    10dc:	ldr	w9, [x8, #32]
    10e0:	str	w9, [sp, #80]
    10e4:	ldur	x8, [x29, #-16]
    10e8:	ldr	x8, [x8]
    10ec:	stur	x8, [x29, #-64]
    10f0:	ldur	x8, [x29, #-16]
    10f4:	ldr	w9, [x8, #8]
    10f8:	stur	w9, [x29, #-76]
    10fc:	ldur	x8, [x29, #-56]
    1100:	ldr	x8, [x8, #80]
    1104:	str	x8, [sp, #72]
    1108:	ldur	x8, [x29, #-56]
    110c:	ldr	w9, [x8, #88]
    1110:	str	w9, [sp, #68]
    1114:	b	1a68 <inflateBack+0x18ec>
    1118:	ldur	x8, [x29, #-56]
    111c:	ldr	x8, [x8, #104]
    1120:	ldr	x9, [sp, #72]
    1124:	ldur	x10, [x29, #-56]
    1128:	ldr	w11, [x10, #120]
    112c:	mov	w12, #0x1                   	// #1
    1130:	lsl	w11, w12, w11
    1134:	subs	w11, w11, #0x1
    1138:	and	w9, w9, w11
    113c:	ldr	w9, [x8, w9, uxtw #2]
    1140:	str	w9, [sp, #52]
    1144:	ldrb	w9, [sp, #53]
    1148:	ldr	w11, [sp, #68]
    114c:	cmp	w9, w11
    1150:	b.hi	1158 <inflateBack+0xfdc>  // b.pmore
    1154:	b	11d8 <inflateBack+0x105c>
    1158:	ldur	w8, [x29, #-76]
    115c:	cbnz	w8, 1190 <inflateBack+0x1014>
    1160:	ldur	x8, [x29, #-24]
    1164:	ldur	x0, [x29, #-32]
    1168:	sub	x1, x29, #0x40
    116c:	blr	x8
    1170:	stur	w0, [x29, #-76]
    1174:	ldur	w9, [x29, #-76]
    1178:	cbnz	w9, 1190 <inflateBack+0x1014>
    117c:	mov	x8, xzr
    1180:	stur	x8, [x29, #-64]
    1184:	mov	w9, #0xfffffffb            	// #-5
    1188:	str	w9, [sp, #40]
    118c:	b	1a6c <inflateBack+0x18f0>
    1190:	ldur	w8, [x29, #-76]
    1194:	subs	w8, w8, #0x1
    1198:	stur	w8, [x29, #-76]
    119c:	ldur	x9, [x29, #-64]
    11a0:	add	x10, x9, #0x1
    11a4:	stur	x10, [x29, #-64]
    11a8:	ldrb	w8, [x9]
    11ac:	mov	w9, w8
    11b0:	ldr	w8, [sp, #68]
    11b4:	mov	w10, w8
    11b8:	lsl	x9, x9, x10
    11bc:	ldr	x10, [sp, #72]
    11c0:	add	x9, x10, x9
    11c4:	str	x9, [sp, #72]
    11c8:	ldr	w8, [sp, #68]
    11cc:	add	w8, w8, #0x8
    11d0:	str	w8, [sp, #68]
    11d4:	b	1118 <inflateBack+0xf9c>
    11d8:	ldrb	w8, [sp, #52]
    11dc:	cbz	w8, 12f4 <inflateBack+0x1178>
    11e0:	ldrb	w8, [sp, #52]
    11e4:	and	w8, w8, #0xf0
    11e8:	cbnz	w8, 12f4 <inflateBack+0x1178>
    11ec:	ldr	w8, [sp, #52]
    11f0:	str	w8, [sp, #48]
    11f4:	ldur	x8, [x29, #-56]
    11f8:	ldr	x8, [x8, #104]
    11fc:	ldrh	w9, [sp, #50]
    1200:	ldr	x10, [sp, #72]
    1204:	ldrb	w11, [sp, #49]
    1208:	ldrb	w12, [sp, #48]
    120c:	add	w11, w11, w12
    1210:	mov	w12, #0x1                   	// #1
    1214:	lsl	w11, w12, w11
    1218:	subs	w11, w11, #0x1
    121c:	and	w10, w10, w11
    1220:	ldrb	w11, [sp, #49]
    1224:	lsr	w10, w10, w11
    1228:	add	w9, w9, w10
    122c:	ldr	w9, [x8, w9, uxtw #2]
    1230:	str	w9, [sp, #52]
    1234:	ldrb	w9, [sp, #49]
    1238:	ldrb	w10, [sp, #53]
    123c:	add	w9, w9, w10
    1240:	ldr	w10, [sp, #68]
    1244:	cmp	w9, w10
    1248:	b.hi	1250 <inflateBack+0x10d4>  // b.pmore
    124c:	b	12d0 <inflateBack+0x1154>
    1250:	ldur	w8, [x29, #-76]
    1254:	cbnz	w8, 1288 <inflateBack+0x110c>
    1258:	ldur	x8, [x29, #-24]
    125c:	ldur	x0, [x29, #-32]
    1260:	sub	x1, x29, #0x40
    1264:	blr	x8
    1268:	stur	w0, [x29, #-76]
    126c:	ldur	w9, [x29, #-76]
    1270:	cbnz	w9, 1288 <inflateBack+0x110c>
    1274:	mov	x8, xzr
    1278:	stur	x8, [x29, #-64]
    127c:	mov	w9, #0xfffffffb            	// #-5
    1280:	str	w9, [sp, #40]
    1284:	b	1a6c <inflateBack+0x18f0>
    1288:	ldur	w8, [x29, #-76]
    128c:	subs	w8, w8, #0x1
    1290:	stur	w8, [x29, #-76]
    1294:	ldur	x9, [x29, #-64]
    1298:	add	x10, x9, #0x1
    129c:	stur	x10, [x29, #-64]
    12a0:	ldrb	w8, [x9]
    12a4:	mov	w9, w8
    12a8:	ldr	w8, [sp, #68]
    12ac:	mov	w10, w8
    12b0:	lsl	x9, x9, x10
    12b4:	ldr	x10, [sp, #72]
    12b8:	add	x9, x10, x9
    12bc:	str	x9, [sp, #72]
    12c0:	ldr	w8, [sp, #68]
    12c4:	add	w8, w8, #0x8
    12c8:	str	w8, [sp, #68]
    12cc:	b	11f4 <inflateBack+0x1078>
    12d0:	ldrb	w8, [sp, #49]
    12d4:	mov	w9, w8
    12d8:	ldr	x10, [sp, #72]
    12dc:	lsr	x9, x10, x9
    12e0:	str	x9, [sp, #72]
    12e4:	ldrb	w8, [sp, #49]
    12e8:	ldr	w11, [sp, #68]
    12ec:	subs	w8, w11, w8
    12f0:	str	w8, [sp, #68]
    12f4:	ldrb	w8, [sp, #53]
    12f8:	mov	w9, w8
    12fc:	ldr	x10, [sp, #72]
    1300:	lsr	x9, x10, x9
    1304:	str	x9, [sp, #72]
    1308:	ldrb	w8, [sp, #53]
    130c:	ldr	w11, [sp, #68]
    1310:	subs	w8, w11, w8
    1314:	str	w8, [sp, #68]
    1318:	ldrh	w8, [sp, #54]
    131c:	ldur	x9, [x29, #-56]
    1320:	str	w8, [x9, #92]
    1324:	ldrb	w8, [sp, #52]
    1328:	cbnz	w8, 13b0 <inflateBack+0x1234>
    132c:	ldr	w8, [sp, #80]
    1330:	cbnz	w8, 137c <inflateBack+0x1200>
    1334:	ldur	x8, [x29, #-56]
    1338:	ldr	x8, [x8, #72]
    133c:	stur	x8, [x29, #-72]
    1340:	ldur	x8, [x29, #-56]
    1344:	ldr	w9, [x8, #60]
    1348:	str	w9, [sp, #80]
    134c:	ldr	w9, [sp, #80]
    1350:	ldur	x8, [x29, #-56]
    1354:	str	w9, [x8, #64]
    1358:	ldur	x8, [x29, #-40]
    135c:	ldur	x0, [x29, #-48]
    1360:	ldur	x1, [x29, #-72]
    1364:	ldr	w2, [sp, #80]
    1368:	blr	x8
    136c:	cbz	w0, 137c <inflateBack+0x1200>
    1370:	mov	w8, #0xfffffffb            	// #-5
    1374:	str	w8, [sp, #40]
    1378:	b	1a6c <inflateBack+0x18f0>
    137c:	ldur	x8, [x29, #-56]
    1380:	ldr	w9, [x8, #92]
    1384:	ldur	x8, [x29, #-72]
    1388:	add	x10, x8, #0x1
    138c:	stur	x10, [x29, #-72]
    1390:	strb	w9, [x8]
    1394:	ldr	w9, [sp, #80]
    1398:	subs	w9, w9, #0x1
    139c:	str	w9, [sp, #80]
    13a0:	ldur	x8, [x29, #-56]
    13a4:	mov	w9, #0x3f48                	// #16200
    13a8:	str	w9, [x8, #8]
    13ac:	b	1a68 <inflateBack+0x18ec>
    13b0:	ldrb	w8, [sp, #52]
    13b4:	and	w8, w8, #0x20
    13b8:	cbz	w8, 13cc <inflateBack+0x1250>
    13bc:	ldur	x8, [x29, #-56]
    13c0:	mov	w9, #0x3f3f                	// #16191
    13c4:	str	w9, [x8, #8]
    13c8:	b	1a68 <inflateBack+0x18ec>
    13cc:	ldrb	w8, [sp, #52]
    13d0:	and	w8, w8, #0x40
    13d4:	cbz	w8, 13f8 <inflateBack+0x127c>
    13d8:	ldur	x8, [x29, #-16]
    13dc:	adrp	x9, 0 <inflateBackInit_>
    13e0:	add	x9, x9, #0x0
    13e4:	str	x9, [x8, #48]
    13e8:	ldur	x8, [x29, #-56]
    13ec:	mov	w10, #0x3f51                	// #16209
    13f0:	str	w10, [x8, #8]
    13f4:	b	1a68 <inflateBack+0x18ec>
    13f8:	ldrb	w8, [sp, #52]
    13fc:	and	w8, w8, #0xf
    1400:	ldur	x9, [x29, #-56]
    1404:	str	w8, [x9, #100]
    1408:	ldur	x9, [x29, #-56]
    140c:	ldr	w8, [x9, #100]
    1410:	cbz	w8, 1500 <inflateBack+0x1384>
    1414:	ldr	w8, [sp, #68]
    1418:	ldur	x9, [x29, #-56]
    141c:	ldr	w10, [x9, #100]
    1420:	cmp	w8, w10
    1424:	b.cs	14a8 <inflateBack+0x132c>  // b.hs, b.nlast
    1428:	ldur	w8, [x29, #-76]
    142c:	cbnz	w8, 1460 <inflateBack+0x12e4>
    1430:	ldur	x8, [x29, #-24]
    1434:	ldur	x0, [x29, #-32]
    1438:	sub	x1, x29, #0x40
    143c:	blr	x8
    1440:	stur	w0, [x29, #-76]
    1444:	ldur	w9, [x29, #-76]
    1448:	cbnz	w9, 1460 <inflateBack+0x12e4>
    144c:	mov	x8, xzr
    1450:	stur	x8, [x29, #-64]
    1454:	mov	w9, #0xfffffffb            	// #-5
    1458:	str	w9, [sp, #40]
    145c:	b	1a6c <inflateBack+0x18f0>
    1460:	ldur	w8, [x29, #-76]
    1464:	subs	w8, w8, #0x1
    1468:	stur	w8, [x29, #-76]
    146c:	ldur	x9, [x29, #-64]
    1470:	add	x10, x9, #0x1
    1474:	stur	x10, [x29, #-64]
    1478:	ldrb	w8, [x9]
    147c:	mov	w9, w8
    1480:	ldr	w8, [sp, #68]
    1484:	mov	w10, w8
    1488:	lsl	x9, x9, x10
    148c:	ldr	x10, [sp, #72]
    1490:	add	x9, x10, x9
    1494:	str	x9, [sp, #72]
    1498:	ldr	w8, [sp, #68]
    149c:	add	w8, w8, #0x8
    14a0:	str	w8, [sp, #68]
    14a4:	b	1414 <inflateBack+0x1298>
    14a8:	ldr	x8, [sp, #72]
    14ac:	ldur	x9, [x29, #-56]
    14b0:	ldr	w10, [x9, #100]
    14b4:	mov	w11, #0x1                   	// #1
    14b8:	lsl	w10, w11, w10
    14bc:	subs	w10, w10, #0x1
    14c0:	and	w8, w8, w10
    14c4:	ldur	x9, [x29, #-56]
    14c8:	ldr	w10, [x9, #92]
    14cc:	add	w8, w10, w8
    14d0:	str	w8, [x9, #92]
    14d4:	ldur	x8, [x29, #-56]
    14d8:	ldr	w9, [x8, #100]
    14dc:	mov	w8, w9
    14e0:	ldr	x10, [sp, #72]
    14e4:	lsr	x8, x10, x8
    14e8:	str	x8, [sp, #72]
    14ec:	ldur	x8, [x29, #-56]
    14f0:	ldr	w9, [x8, #100]
    14f4:	ldr	w11, [sp, #68]
    14f8:	subs	w9, w11, w9
    14fc:	str	w9, [sp, #68]
    1500:	ldur	x8, [x29, #-56]
    1504:	ldr	x8, [x8, #112]
    1508:	ldr	x9, [sp, #72]
    150c:	ldur	x10, [x29, #-56]
    1510:	ldr	w11, [x10, #124]
    1514:	mov	w12, #0x1                   	// #1
    1518:	lsl	w11, w12, w11
    151c:	subs	w11, w11, #0x1
    1520:	and	w9, w9, w11
    1524:	ldr	w9, [x8, w9, uxtw #2]
    1528:	str	w9, [sp, #52]
    152c:	ldrb	w9, [sp, #53]
    1530:	ldr	w11, [sp, #68]
    1534:	cmp	w9, w11
    1538:	b.hi	1540 <inflateBack+0x13c4>  // b.pmore
    153c:	b	15c0 <inflateBack+0x1444>
    1540:	ldur	w8, [x29, #-76]
    1544:	cbnz	w8, 1578 <inflateBack+0x13fc>
    1548:	ldur	x8, [x29, #-24]
    154c:	ldur	x0, [x29, #-32]
    1550:	sub	x1, x29, #0x40
    1554:	blr	x8
    1558:	stur	w0, [x29, #-76]
    155c:	ldur	w9, [x29, #-76]
    1560:	cbnz	w9, 1578 <inflateBack+0x13fc>
    1564:	mov	x8, xzr
    1568:	stur	x8, [x29, #-64]
    156c:	mov	w9, #0xfffffffb            	// #-5
    1570:	str	w9, [sp, #40]
    1574:	b	1a6c <inflateBack+0x18f0>
    1578:	ldur	w8, [x29, #-76]
    157c:	subs	w8, w8, #0x1
    1580:	stur	w8, [x29, #-76]
    1584:	ldur	x9, [x29, #-64]
    1588:	add	x10, x9, #0x1
    158c:	stur	x10, [x29, #-64]
    1590:	ldrb	w8, [x9]
    1594:	mov	w9, w8
    1598:	ldr	w8, [sp, #68]
    159c:	mov	w10, w8
    15a0:	lsl	x9, x9, x10
    15a4:	ldr	x10, [sp, #72]
    15a8:	add	x9, x10, x9
    15ac:	str	x9, [sp, #72]
    15b0:	ldr	w8, [sp, #68]
    15b4:	add	w8, w8, #0x8
    15b8:	str	w8, [sp, #68]
    15bc:	b	1500 <inflateBack+0x1384>
    15c0:	ldrb	w8, [sp, #52]
    15c4:	and	w8, w8, #0xf0
    15c8:	cbnz	w8, 16d4 <inflateBack+0x1558>
    15cc:	ldr	w8, [sp, #52]
    15d0:	str	w8, [sp, #48]
    15d4:	ldur	x8, [x29, #-56]
    15d8:	ldr	x8, [x8, #112]
    15dc:	ldrh	w9, [sp, #50]
    15e0:	ldr	x10, [sp, #72]
    15e4:	ldrb	w11, [sp, #49]
    15e8:	ldrb	w12, [sp, #48]
    15ec:	add	w11, w11, w12
    15f0:	mov	w12, #0x1                   	// #1
    15f4:	lsl	w11, w12, w11
    15f8:	subs	w11, w11, #0x1
    15fc:	and	w10, w10, w11
    1600:	ldrb	w11, [sp, #49]
    1604:	lsr	w10, w10, w11
    1608:	add	w9, w9, w10
    160c:	ldr	w9, [x8, w9, uxtw #2]
    1610:	str	w9, [sp, #52]
    1614:	ldrb	w9, [sp, #49]
    1618:	ldrb	w10, [sp, #53]
    161c:	add	w9, w9, w10
    1620:	ldr	w10, [sp, #68]
    1624:	cmp	w9, w10
    1628:	b.hi	1630 <inflateBack+0x14b4>  // b.pmore
    162c:	b	16b0 <inflateBack+0x1534>
    1630:	ldur	w8, [x29, #-76]
    1634:	cbnz	w8, 1668 <inflateBack+0x14ec>
    1638:	ldur	x8, [x29, #-24]
    163c:	ldur	x0, [x29, #-32]
    1640:	sub	x1, x29, #0x40
    1644:	blr	x8
    1648:	stur	w0, [x29, #-76]
    164c:	ldur	w9, [x29, #-76]
    1650:	cbnz	w9, 1668 <inflateBack+0x14ec>
    1654:	mov	x8, xzr
    1658:	stur	x8, [x29, #-64]
    165c:	mov	w9, #0xfffffffb            	// #-5
    1660:	str	w9, [sp, #40]
    1664:	b	1a6c <inflateBack+0x18f0>
    1668:	ldur	w8, [x29, #-76]
    166c:	subs	w8, w8, #0x1
    1670:	stur	w8, [x29, #-76]
    1674:	ldur	x9, [x29, #-64]
    1678:	add	x10, x9, #0x1
    167c:	stur	x10, [x29, #-64]
    1680:	ldrb	w8, [x9]
    1684:	mov	w9, w8
    1688:	ldr	w8, [sp, #68]
    168c:	mov	w10, w8
    1690:	lsl	x9, x9, x10
    1694:	ldr	x10, [sp, #72]
    1698:	add	x9, x10, x9
    169c:	str	x9, [sp, #72]
    16a0:	ldr	w8, [sp, #68]
    16a4:	add	w8, w8, #0x8
    16a8:	str	w8, [sp, #68]
    16ac:	b	15d4 <inflateBack+0x1458>
    16b0:	ldrb	w8, [sp, #49]
    16b4:	mov	w9, w8
    16b8:	ldr	x10, [sp, #72]
    16bc:	lsr	x9, x10, x9
    16c0:	str	x9, [sp, #72]
    16c4:	ldrb	w8, [sp, #49]
    16c8:	ldr	w11, [sp, #68]
    16cc:	subs	w8, w11, w8
    16d0:	str	w8, [sp, #68]
    16d4:	ldrb	w8, [sp, #53]
    16d8:	mov	w9, w8
    16dc:	ldr	x10, [sp, #72]
    16e0:	lsr	x9, x10, x9
    16e4:	str	x9, [sp, #72]
    16e8:	ldrb	w8, [sp, #53]
    16ec:	ldr	w11, [sp, #68]
    16f0:	subs	w8, w11, w8
    16f4:	str	w8, [sp, #68]
    16f8:	ldrb	w8, [sp, #52]
    16fc:	and	w8, w8, #0x40
    1700:	cbz	w8, 1724 <inflateBack+0x15a8>
    1704:	ldur	x8, [x29, #-16]
    1708:	adrp	x9, 0 <inflateBackInit_>
    170c:	add	x9, x9, #0x0
    1710:	str	x9, [x8, #48]
    1714:	ldur	x8, [x29, #-56]
    1718:	mov	w10, #0x3f51                	// #16209
    171c:	str	w10, [x8, #8]
    1720:	b	1a68 <inflateBack+0x18ec>
    1724:	ldrh	w8, [sp, #54]
    1728:	ldur	x9, [x29, #-56]
    172c:	str	w8, [x9, #96]
    1730:	ldrb	w8, [sp, #52]
    1734:	and	w8, w8, #0xf
    1738:	ldur	x9, [x29, #-56]
    173c:	str	w8, [x9, #100]
    1740:	ldur	x9, [x29, #-56]
    1744:	ldr	w8, [x9, #100]
    1748:	cbz	w8, 1838 <inflateBack+0x16bc>
    174c:	ldr	w8, [sp, #68]
    1750:	ldur	x9, [x29, #-56]
    1754:	ldr	w10, [x9, #100]
    1758:	cmp	w8, w10
    175c:	b.cs	17e0 <inflateBack+0x1664>  // b.hs, b.nlast
    1760:	ldur	w8, [x29, #-76]
    1764:	cbnz	w8, 1798 <inflateBack+0x161c>
    1768:	ldur	x8, [x29, #-24]
    176c:	ldur	x0, [x29, #-32]
    1770:	sub	x1, x29, #0x40
    1774:	blr	x8
    1778:	stur	w0, [x29, #-76]
    177c:	ldur	w9, [x29, #-76]
    1780:	cbnz	w9, 1798 <inflateBack+0x161c>
    1784:	mov	x8, xzr
    1788:	stur	x8, [x29, #-64]
    178c:	mov	w9, #0xfffffffb            	// #-5
    1790:	str	w9, [sp, #40]
    1794:	b	1a6c <inflateBack+0x18f0>
    1798:	ldur	w8, [x29, #-76]
    179c:	subs	w8, w8, #0x1
    17a0:	stur	w8, [x29, #-76]
    17a4:	ldur	x9, [x29, #-64]
    17a8:	add	x10, x9, #0x1
    17ac:	stur	x10, [x29, #-64]
    17b0:	ldrb	w8, [x9]
    17b4:	mov	w9, w8
    17b8:	ldr	w8, [sp, #68]
    17bc:	mov	w10, w8
    17c0:	lsl	x9, x9, x10
    17c4:	ldr	x10, [sp, #72]
    17c8:	add	x9, x10, x9
    17cc:	str	x9, [sp, #72]
    17d0:	ldr	w8, [sp, #68]
    17d4:	add	w8, w8, #0x8
    17d8:	str	w8, [sp, #68]
    17dc:	b	174c <inflateBack+0x15d0>
    17e0:	ldr	x8, [sp, #72]
    17e4:	ldur	x9, [x29, #-56]
    17e8:	ldr	w10, [x9, #100]
    17ec:	mov	w11, #0x1                   	// #1
    17f0:	lsl	w10, w11, w10
    17f4:	subs	w10, w10, #0x1
    17f8:	and	w8, w8, w10
    17fc:	ldur	x9, [x29, #-56]
    1800:	ldr	w10, [x9, #96]
    1804:	add	w8, w10, w8
    1808:	str	w8, [x9, #96]
    180c:	ldur	x8, [x29, #-56]
    1810:	ldr	w9, [x8, #100]
    1814:	mov	w8, w9
    1818:	ldr	x10, [sp, #72]
    181c:	lsr	x8, x10, x8
    1820:	str	x8, [sp, #72]
    1824:	ldur	x8, [x29, #-56]
    1828:	ldr	w9, [x8, #100]
    182c:	ldr	w11, [sp, #68]
    1830:	subs	w9, w11, w9
    1834:	str	w9, [sp, #68]
    1838:	ldur	x8, [x29, #-56]
    183c:	ldr	w9, [x8, #96]
    1840:	ldur	x8, [x29, #-56]
    1844:	ldr	w10, [x8, #60]
    1848:	ldur	x8, [x29, #-56]
    184c:	ldr	w11, [x8, #64]
    1850:	ldur	x8, [x29, #-56]
    1854:	ldr	w12, [x8, #60]
    1858:	cmp	w11, w12
    185c:	str	w9, [sp, #12]
    1860:	str	w10, [sp, #8]
    1864:	b.cs	1874 <inflateBack+0x16f8>  // b.hs, b.nlast
    1868:	ldr	w8, [sp, #80]
    186c:	str	w8, [sp, #4]
    1870:	b	187c <inflateBack+0x1700>
    1874:	mov	w8, wzr
    1878:	str	w8, [sp, #4]
    187c:	ldr	w8, [sp, #4]
    1880:	ldr	w9, [sp, #8]
    1884:	subs	w8, w9, w8
    1888:	ldr	w10, [sp, #12]
    188c:	cmp	w10, w8
    1890:	b.ls	18b4 <inflateBack+0x1738>  // b.plast
    1894:	ldur	x8, [x29, #-16]
    1898:	adrp	x9, 0 <inflateBackInit_>
    189c:	add	x9, x9, #0x0
    18a0:	str	x9, [x8, #48]
    18a4:	ldur	x8, [x29, #-56]
    18a8:	mov	w10, #0x3f51                	// #16209
    18ac:	str	w10, [x8, #8]
    18b0:	b	1a68 <inflateBack+0x18ec>
    18b4:	ldr	w8, [sp, #80]
    18b8:	cbnz	w8, 1904 <inflateBack+0x1788>
    18bc:	ldur	x8, [x29, #-56]
    18c0:	ldr	x8, [x8, #72]
    18c4:	stur	x8, [x29, #-72]
    18c8:	ldur	x8, [x29, #-56]
    18cc:	ldr	w9, [x8, #60]
    18d0:	str	w9, [sp, #80]
    18d4:	ldr	w9, [sp, #80]
    18d8:	ldur	x8, [x29, #-56]
    18dc:	str	w9, [x8, #64]
    18e0:	ldur	x8, [x29, #-40]
    18e4:	ldur	x0, [x29, #-48]
    18e8:	ldur	x1, [x29, #-72]
    18ec:	ldr	w2, [sp, #80]
    18f0:	blr	x8
    18f4:	cbz	w0, 1904 <inflateBack+0x1788>
    18f8:	mov	w8, #0xfffffffb            	// #-5
    18fc:	str	w8, [sp, #40]
    1900:	b	1a6c <inflateBack+0x18f0>
    1904:	ldur	x8, [x29, #-56]
    1908:	ldr	w9, [x8, #60]
    190c:	ldur	x8, [x29, #-56]
    1910:	ldr	w10, [x8, #96]
    1914:	subs	w9, w9, w10
    1918:	str	w9, [sp, #64]
    191c:	ldr	w9, [sp, #64]
    1920:	ldr	w10, [sp, #80]
    1924:	cmp	w9, w10
    1928:	b.cs	1954 <inflateBack+0x17d8>  // b.hs, b.nlast
    192c:	ldur	x8, [x29, #-72]
    1930:	ldr	w9, [sp, #64]
    1934:	mov	w10, w9
    1938:	add	x8, x8, x10
    193c:	str	x8, [sp, #56]
    1940:	ldr	w9, [sp, #80]
    1944:	ldr	w11, [sp, #64]
    1948:	subs	w9, w9, w11
    194c:	str	w9, [sp, #64]
    1950:	b	197c <inflateBack+0x1800>
    1954:	ldur	x8, [x29, #-72]
    1958:	ldur	x9, [x29, #-56]
    195c:	ldr	w10, [x9, #96]
    1960:	mov	w9, w10
    1964:	mov	x11, xzr
    1968:	subs	x9, x11, x9
    196c:	add	x8, x8, x9
    1970:	str	x8, [sp, #56]
    1974:	ldr	w10, [sp, #80]
    1978:	str	w10, [sp, #64]
    197c:	ldr	w8, [sp, #64]
    1980:	ldur	x9, [x29, #-56]
    1984:	ldr	w10, [x9, #92]
    1988:	cmp	w8, w10
    198c:	b.ls	199c <inflateBack+0x1820>  // b.plast
    1990:	ldur	x8, [x29, #-56]
    1994:	ldr	w9, [x8, #92]
    1998:	str	w9, [sp, #64]
    199c:	ldr	w8, [sp, #64]
    19a0:	ldur	x9, [x29, #-56]
    19a4:	ldr	w10, [x9, #92]
    19a8:	subs	w8, w10, w8
    19ac:	str	w8, [x9, #92]
    19b0:	ldr	w8, [sp, #64]
    19b4:	ldr	w10, [sp, #80]
    19b8:	subs	w8, w10, w8
    19bc:	str	w8, [sp, #80]
    19c0:	ldr	x8, [sp, #56]
    19c4:	add	x9, x8, #0x1
    19c8:	str	x9, [sp, #56]
    19cc:	ldrb	w10, [x8]
    19d0:	ldur	x8, [x29, #-72]
    19d4:	add	x9, x8, #0x1
    19d8:	stur	x9, [x29, #-72]
    19dc:	strb	w10, [x8]
    19e0:	ldr	w8, [sp, #64]
    19e4:	subs	w8, w8, #0x1
    19e8:	str	w8, [sp, #64]
    19ec:	cbnz	w8, 19c0 <inflateBack+0x1844>
    19f0:	ldur	x8, [x29, #-56]
    19f4:	ldr	w9, [x8, #92]
    19f8:	cbnz	w9, 18b4 <inflateBack+0x1738>
    19fc:	b	1a68 <inflateBack+0x18ec>
    1a00:	mov	w8, #0x1                   	// #1
    1a04:	str	w8, [sp, #40]
    1a08:	ldr	w8, [sp, #80]
    1a0c:	ldur	x9, [x29, #-56]
    1a10:	ldr	w10, [x9, #60]
    1a14:	cmp	w8, w10
    1a18:	b.cs	1a4c <inflateBack+0x18d0>  // b.hs, b.nlast
    1a1c:	ldur	x8, [x29, #-40]
    1a20:	ldur	x0, [x29, #-48]
    1a24:	ldur	x9, [x29, #-56]
    1a28:	ldr	x1, [x9, #72]
    1a2c:	ldur	x9, [x29, #-56]
    1a30:	ldr	w10, [x9, #60]
    1a34:	ldr	w11, [sp, #80]
    1a38:	subs	w2, w10, w11
    1a3c:	blr	x8
    1a40:	cbz	w0, 1a4c <inflateBack+0x18d0>
    1a44:	mov	w8, #0xfffffffb            	// #-5
    1a48:	str	w8, [sp, #40]
    1a4c:	b	1a6c <inflateBack+0x18f0>
    1a50:	mov	w8, #0xfffffffd            	// #-3
    1a54:	str	w8, [sp, #40]
    1a58:	b	1a6c <inflateBack+0x18f0>
    1a5c:	mov	w8, #0xfffffffe            	// #-2
    1a60:	str	w8, [sp, #40]
    1a64:	b	1a6c <inflateBack+0x18f0>
    1a68:	b	244 <inflateBack+0xc8>
    1a6c:	ldur	x8, [x29, #-64]
    1a70:	ldur	x9, [x29, #-16]
    1a74:	str	x8, [x9]
    1a78:	ldur	w10, [x29, #-76]
    1a7c:	ldur	x8, [x29, #-16]
    1a80:	str	w10, [x8, #8]
    1a84:	ldr	w10, [sp, #40]
    1a88:	stur	w10, [x29, #-4]
    1a8c:	ldur	w0, [x29, #-4]
    1a90:	ldp	x29, x30, [sp, #160]
    1a94:	add	sp, sp, #0xb0
    1a98:	ret

0000000000001a9c <fixedtables>:
    1a9c:	sub	sp, sp, #0x10
    1aa0:	adrp	x8, 0 <inflateBackInit_>
    1aa4:	add	x8, x8, #0x0
    1aa8:	mov	w9, #0x9                   	// #9
    1aac:	adrp	x10, 0 <inflateBackInit_>
    1ab0:	add	x10, x10, #0x0
    1ab4:	mov	w11, #0x5                   	// #5
    1ab8:	str	x0, [sp, #8]
    1abc:	ldr	x12, [sp, #8]
    1ac0:	str	x8, [x12, #104]
    1ac4:	ldr	x8, [sp, #8]
    1ac8:	str	w9, [x8, #120]
    1acc:	ldr	x8, [sp, #8]
    1ad0:	str	x10, [x8, #112]
    1ad4:	ldr	x8, [sp, #8]
    1ad8:	str	w11, [x8, #124]
    1adc:	add	sp, sp, #0x10
    1ae0:	ret

0000000000001ae4 <inflateBackEnd>:
    1ae4:	sub	sp, sp, #0x20
    1ae8:	stp	x29, x30, [sp, #16]
    1aec:	add	x29, sp, #0x10
    1af0:	str	x0, [sp]
    1af4:	ldr	x8, [sp]
    1af8:	cbz	x8, 1b14 <inflateBackEnd+0x30>
    1afc:	ldr	x8, [sp]
    1b00:	ldr	x8, [x8, #56]
    1b04:	cbz	x8, 1b14 <inflateBackEnd+0x30>
    1b08:	ldr	x8, [sp]
    1b0c:	ldr	x8, [x8, #72]
    1b10:	cbnz	x8, 1b20 <inflateBackEnd+0x3c>
    1b14:	mov	w8, #0xfffffffe            	// #-2
    1b18:	stur	w8, [x29, #-4]
    1b1c:	b	1b4c <inflateBackEnd+0x68>
    1b20:	ldr	x8, [sp]
    1b24:	ldr	x8, [x8, #72]
    1b28:	ldr	x9, [sp]
    1b2c:	ldr	x0, [x9, #80]
    1b30:	ldr	x9, [sp]
    1b34:	ldr	x1, [x9, #56]
    1b38:	blr	x8
    1b3c:	ldr	x8, [sp]
    1b40:	mov	x9, xzr
    1b44:	str	x9, [x8, #56]
    1b48:	stur	wzr, [x29, #-4]
    1b4c:	ldur	w0, [x29, #-4]
    1b50:	ldp	x29, x30, [sp, #16]
    1b54:	add	sp, sp, #0x20
    1b58:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	sub	sp, sp, #0xb0
   4:	mov	x8, xzr
   8:	mov	w9, #0x1                   	// #1
   c:	str	x0, [sp, #168]
  10:	str	w1, [sp, #164]
  14:	ldr	x10, [sp, #168]
  18:	ldr	x10, [x10, #56]
  1c:	str	x10, [sp, #152]
  20:	ldr	x10, [sp, #168]
  24:	ldr	x10, [x10]
  28:	str	x10, [sp, #144]
  2c:	ldr	x10, [sp, #144]
  30:	ldr	x11, [sp, #168]
  34:	ldr	w12, [x11, #8]
  38:	subs	w12, w12, #0x5
  3c:	mov	w11, w12
  40:	ubfx	x11, x11, #0, #32
  44:	add	x10, x10, x11
  48:	str	x10, [sp, #136]
  4c:	ldr	x10, [sp, #168]
  50:	ldr	x10, [x10, #24]
  54:	str	x10, [sp, #128]
  58:	ldr	x10, [sp, #128]
  5c:	ldr	w12, [sp, #164]
  60:	ldr	x11, [sp, #168]
  64:	ldr	w13, [x11, #32]
  68:	subs	w12, w12, w13
  6c:	mov	w11, w12
  70:	ubfx	x11, x11, #0, #32
  74:	subs	x8, x8, x11
  78:	add	x8, x10, x8
  7c:	str	x8, [sp, #120]
  80:	ldr	x8, [sp, #128]
  84:	ldr	x10, [sp, #168]
  88:	ldr	w12, [x10, #32]
  8c:	subs	w12, w12, #0x101
  90:	mov	w10, w12
  94:	ubfx	x10, x10, #0, #32
  98:	add	x8, x8, x10
  9c:	str	x8, [sp, #112]
  a0:	ldr	x8, [sp, #152]
  a4:	ldr	w12, [x8, #60]
  a8:	str	w12, [sp, #108]
  ac:	ldr	x8, [sp, #152]
  b0:	ldr	w12, [x8, #64]
  b4:	str	w12, [sp, #104]
  b8:	ldr	x8, [sp, #152]
  bc:	ldr	w12, [x8, #68]
  c0:	str	w12, [sp, #100]
  c4:	ldr	x8, [sp, #152]
  c8:	ldr	x8, [x8, #72]
  cc:	str	x8, [sp, #88]
  d0:	ldr	x8, [sp, #152]
  d4:	ldr	x8, [x8, #80]
  d8:	str	x8, [sp, #80]
  dc:	ldr	x8, [sp, #152]
  e0:	ldr	w12, [x8, #88]
  e4:	str	w12, [sp, #76]
  e8:	ldr	x8, [sp, #152]
  ec:	ldr	x8, [x8, #104]
  f0:	str	x8, [sp, #64]
  f4:	ldr	x8, [sp, #152]
  f8:	ldr	x8, [x8, #112]
  fc:	str	x8, [sp, #56]
 100:	ldr	x8, [sp, #152]
 104:	ldr	w12, [x8, #120]
 108:	lsl	w12, w9, w12
 10c:	subs	w12, w12, #0x1
 110:	str	w12, [sp, #52]
 114:	ldr	x8, [sp, #152]
 118:	ldr	w12, [x8, #124]
 11c:	lsl	w9, w9, w12
 120:	subs	w9, w9, #0x1
 124:	str	w9, [sp, #48]
 128:	ldr	w8, [sp, #76]
 12c:	cmp	w8, #0xf
 130:	b.cs	1a4 <inflate_fast+0x1a4>  // b.hs, b.nlast
 134:	ldr	x8, [sp, #144]
 138:	add	x9, x8, #0x1
 13c:	str	x9, [sp, #144]
 140:	ldrb	w10, [x8]
 144:	mov	w8, w10
 148:	ldr	w10, [sp, #76]
 14c:	mov	w9, w10
 150:	lsl	x8, x8, x9
 154:	ldr	x9, [sp, #80]
 158:	add	x8, x9, x8
 15c:	str	x8, [sp, #80]
 160:	ldr	w10, [sp, #76]
 164:	add	w10, w10, #0x8
 168:	str	w10, [sp, #76]
 16c:	ldr	x8, [sp, #144]
 170:	add	x9, x8, #0x1
 174:	str	x9, [sp, #144]
 178:	ldrb	w10, [x8]
 17c:	mov	w8, w10
 180:	ldr	w10, [sp, #76]
 184:	mov	w9, w10
 188:	lsl	x8, x8, x9
 18c:	ldr	x9, [sp, #80]
 190:	add	x8, x9, x8
 194:	str	x8, [sp, #80]
 198:	ldr	w10, [sp, #76]
 19c:	add	w10, w10, #0x8
 1a0:	str	w10, [sp, #76]
 1a4:	ldr	x8, [sp, #64]
 1a8:	ldr	x9, [sp, #80]
 1ac:	ldr	w10, [sp, #52]
 1b0:	mov	w11, w10
 1b4:	and	x9, x9, x11
 1b8:	ldr	w10, [x8, x9, lsl #2]
 1bc:	str	w10, [sp, #44]
 1c0:	ldrb	w8, [sp, #45]
 1c4:	str	w8, [sp, #40]
 1c8:	ldr	w8, [sp, #40]
 1cc:	mov	w9, w8
 1d0:	ldr	x10, [sp, #80]
 1d4:	lsr	x9, x10, x9
 1d8:	str	x9, [sp, #80]
 1dc:	ldr	w8, [sp, #40]
 1e0:	ldr	w11, [sp, #76]
 1e4:	subs	w8, w11, w8
 1e8:	str	w8, [sp, #76]
 1ec:	ldrb	w8, [sp, #44]
 1f0:	str	w8, [sp, #40]
 1f4:	ldr	w8, [sp, #40]
 1f8:	cbnz	w8, 218 <inflate_fast+0x218>
 1fc:	add	x8, sp, #0x2c
 200:	ldrh	w9, [x8, #2]
 204:	ldr	x8, [sp, #128]
 208:	add	x10, x8, #0x1
 20c:	str	x10, [sp, #128]
 210:	strb	w9, [x8]
 214:	b	9f4 <inflate_fast+0x9f4>
 218:	ldr	w8, [sp, #40]
 21c:	and	w8, w8, #0x10
 220:	cbz	w8, 970 <inflate_fast+0x970>
 224:	ldrh	w8, [sp, #46]
 228:	str	w8, [sp, #36]
 22c:	ldr	w8, [sp, #40]
 230:	and	w8, w8, #0xf
 234:	str	w8, [sp, #40]
 238:	ldr	w8, [sp, #40]
 23c:	cbz	w8, 2d0 <inflate_fast+0x2d0>
 240:	ldr	w8, [sp, #76]
 244:	ldr	w9, [sp, #40]
 248:	cmp	w8, w9
 24c:	b.cs	288 <inflate_fast+0x288>  // b.hs, b.nlast
 250:	ldr	x8, [sp, #144]
 254:	add	x9, x8, #0x1
 258:	str	x9, [sp, #144]
 25c:	ldrb	w10, [x8]
 260:	mov	w8, w10
 264:	ldr	w10, [sp, #76]
 268:	mov	w9, w10
 26c:	lsl	x8, x8, x9
 270:	ldr	x9, [sp, #80]
 274:	add	x8, x9, x8
 278:	str	x8, [sp, #80]
 27c:	ldr	w10, [sp, #76]
 280:	add	w10, w10, #0x8
 284:	str	w10, [sp, #76]
 288:	ldr	x8, [sp, #80]
 28c:	ldr	w9, [sp, #40]
 290:	mov	w10, #0x1                   	// #1
 294:	lsl	w9, w10, w9
 298:	subs	w9, w9, #0x1
 29c:	and	w8, w8, w9
 2a0:	ldr	w9, [sp, #36]
 2a4:	add	w8, w9, w8
 2a8:	str	w8, [sp, #36]
 2ac:	ldr	w8, [sp, #40]
 2b0:	mov	w11, w8
 2b4:	ldr	x12, [sp, #80]
 2b8:	lsr	x11, x12, x11
 2bc:	str	x11, [sp, #80]
 2c0:	ldr	w8, [sp, #40]
 2c4:	ldr	w9, [sp, #76]
 2c8:	subs	w8, w9, w8
 2cc:	str	w8, [sp, #76]
 2d0:	ldr	w8, [sp, #76]
 2d4:	cmp	w8, #0xf
 2d8:	b.cs	34c <inflate_fast+0x34c>  // b.hs, b.nlast
 2dc:	ldr	x8, [sp, #144]
 2e0:	add	x9, x8, #0x1
 2e4:	str	x9, [sp, #144]
 2e8:	ldrb	w10, [x8]
 2ec:	mov	w8, w10
 2f0:	ldr	w10, [sp, #76]
 2f4:	mov	w9, w10
 2f8:	lsl	x8, x8, x9
 2fc:	ldr	x9, [sp, #80]
 300:	add	x8, x9, x8
 304:	str	x8, [sp, #80]
 308:	ldr	w10, [sp, #76]
 30c:	add	w10, w10, #0x8
 310:	str	w10, [sp, #76]
 314:	ldr	x8, [sp, #144]
 318:	add	x9, x8, #0x1
 31c:	str	x9, [sp, #144]
 320:	ldrb	w10, [x8]
 324:	mov	w8, w10
 328:	ldr	w10, [sp, #76]
 32c:	mov	w9, w10
 330:	lsl	x8, x8, x9
 334:	ldr	x9, [sp, #80]
 338:	add	x8, x9, x8
 33c:	str	x8, [sp, #80]
 340:	ldr	w10, [sp, #76]
 344:	add	w10, w10, #0x8
 348:	str	w10, [sp, #76]
 34c:	ldr	x8, [sp, #56]
 350:	ldr	x9, [sp, #80]
 354:	ldr	w10, [sp, #48]
 358:	mov	w11, w10
 35c:	and	x9, x9, x11
 360:	ldr	w10, [x8, x9, lsl #2]
 364:	str	w10, [sp, #44]
 368:	ldrb	w8, [sp, #45]
 36c:	str	w8, [sp, #40]
 370:	ldr	w8, [sp, #40]
 374:	mov	w9, w8
 378:	ldr	x10, [sp, #80]
 37c:	lsr	x9, x10, x9
 380:	str	x9, [sp, #80]
 384:	ldr	w8, [sp, #40]
 388:	ldr	w11, [sp, #76]
 38c:	subs	w8, w11, w8
 390:	str	w8, [sp, #76]
 394:	ldrb	w8, [sp, #44]
 398:	str	w8, [sp, #40]
 39c:	ldr	w8, [sp, #40]
 3a0:	and	w8, w8, #0x10
 3a4:	cbz	w8, 904 <inflate_fast+0x904>
 3a8:	ldrh	w8, [sp, #46]
 3ac:	str	w8, [sp, #32]
 3b0:	ldr	w8, [sp, #40]
 3b4:	and	w8, w8, #0xf
 3b8:	str	w8, [sp, #40]
 3bc:	ldr	w8, [sp, #76]
 3c0:	ldr	w9, [sp, #40]
 3c4:	cmp	w8, w9
 3c8:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 3cc:	ldr	x8, [sp, #144]
 3d0:	add	x9, x8, #0x1
 3d4:	str	x9, [sp, #144]
 3d8:	ldrb	w10, [x8]
 3dc:	mov	w8, w10
 3e0:	ldr	w10, [sp, #76]
 3e4:	mov	w9, w10
 3e8:	lsl	x8, x8, x9
 3ec:	ldr	x9, [sp, #80]
 3f0:	add	x8, x9, x8
 3f4:	str	x8, [sp, #80]
 3f8:	ldr	w10, [sp, #76]
 3fc:	add	w10, w10, #0x8
 400:	str	w10, [sp, #76]
 404:	ldr	w10, [sp, #76]
 408:	ldr	w11, [sp, #40]
 40c:	cmp	w10, w11
 410:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 414:	ldr	x8, [sp, #144]
 418:	add	x9, x8, #0x1
 41c:	str	x9, [sp, #144]
 420:	ldrb	w10, [x8]
 424:	mov	w8, w10
 428:	ldr	w10, [sp, #76]
 42c:	mov	w9, w10
 430:	lsl	x8, x8, x9
 434:	ldr	x9, [sp, #80]
 438:	add	x8, x9, x8
 43c:	str	x8, [sp, #80]
 440:	ldr	w10, [sp, #76]
 444:	add	w10, w10, #0x8
 448:	str	w10, [sp, #76]
 44c:	ldr	x8, [sp, #80]
 450:	ldr	w9, [sp, #40]
 454:	mov	w10, #0x1                   	// #1
 458:	lsl	w9, w10, w9
 45c:	subs	w9, w9, #0x1
 460:	and	w8, w8, w9
 464:	ldr	w9, [sp, #32]
 468:	add	w8, w9, w8
 46c:	str	w8, [sp, #32]
 470:	ldr	w8, [sp, #40]
 474:	mov	w11, w8
 478:	ldr	x12, [sp, #80]
 47c:	lsr	x11, x12, x11
 480:	str	x11, [sp, #80]
 484:	ldr	w8, [sp, #40]
 488:	ldr	w9, [sp, #76]
 48c:	subs	w8, w9, w8
 490:	str	w8, [sp, #76]
 494:	ldr	x11, [sp, #128]
 498:	ldr	x12, [sp, #120]
 49c:	subs	x11, x11, x12
 4a0:	str	w11, [sp, #40]
 4a4:	ldr	w8, [sp, #32]
 4a8:	ldr	w9, [sp, #40]
 4ac:	cmp	w8, w9
 4b0:	b.ls	818 <inflate_fast+0x818>  // b.plast
 4b4:	ldr	w8, [sp, #32]
 4b8:	ldr	w9, [sp, #40]
 4bc:	subs	w8, w8, w9
 4c0:	str	w8, [sp, #40]
 4c4:	ldr	w8, [sp, #40]
 4c8:	ldr	w9, [sp, #104]
 4cc:	cmp	w8, w9
 4d0:	b.ls	500 <inflate_fast+0x500>  // b.plast
 4d4:	ldr	x8, [sp, #152]
 4d8:	ldr	w9, [x8, #7144]
 4dc:	cbz	w9, 500 <inflate_fast+0x500>
 4e0:	ldr	x8, [sp, #168]
 4e4:	adrp	x9, 0 <inflate_fast>
 4e8:	add	x9, x9, #0x0
 4ec:	str	x9, [x8, #48]
 4f0:	ldr	x8, [sp, #152]
 4f4:	mov	w10, #0x3f51                	// #16209
 4f8:	str	w10, [x8, #8]
 4fc:	b	a28 <inflate_fast+0xa28>
 500:	ldr	x8, [sp, #88]
 504:	str	x8, [sp, #24]
 508:	ldr	w9, [sp, #100]
 50c:	cbnz	w9, 5a0 <inflate_fast+0x5a0>
 510:	ldr	w8, [sp, #108]
 514:	ldr	w9, [sp, #40]
 518:	subs	w8, w8, w9
 51c:	ldr	x10, [sp, #24]
 520:	mov	w11, w8
 524:	ubfx	x11, x11, #0, #32
 528:	add	x10, x10, x11
 52c:	str	x10, [sp, #24]
 530:	ldr	w8, [sp, #40]
 534:	ldr	w9, [sp, #36]
 538:	cmp	w8, w9
 53c:	b.cs	59c <inflate_fast+0x59c>  // b.hs, b.nlast
 540:	ldr	w8, [sp, #40]
 544:	ldr	w9, [sp, #36]
 548:	subs	w8, w9, w8
 54c:	str	w8, [sp, #36]
 550:	ldr	x8, [sp, #24]
 554:	add	x9, x8, #0x1
 558:	str	x9, [sp, #24]
 55c:	ldrb	w10, [x8]
 560:	ldr	x8, [sp, #128]
 564:	add	x9, x8, #0x1
 568:	str	x9, [sp, #128]
 56c:	strb	w10, [x8]
 570:	ldr	w8, [sp, #40]
 574:	subs	w8, w8, #0x1
 578:	str	w8, [sp, #40]
 57c:	cbnz	w8, 550 <inflate_fast+0x550>
 580:	ldr	x8, [sp, #128]
 584:	ldr	w9, [sp, #32]
 588:	mov	w10, w9
 58c:	mov	x11, xzr
 590:	subs	x10, x11, x10
 594:	add	x8, x8, x10
 598:	str	x8, [sp, #24]
 59c:	b	744 <inflate_fast+0x744>
 5a0:	ldr	w8, [sp, #100]
 5a4:	ldr	w9, [sp, #40]
 5a8:	cmp	w8, w9
 5ac:	b.cs	6b8 <inflate_fast+0x6b8>  // b.hs, b.nlast
 5b0:	ldr	w8, [sp, #108]
 5b4:	ldr	w9, [sp, #100]
 5b8:	add	w8, w8, w9
 5bc:	ldr	w9, [sp, #40]
 5c0:	subs	w8, w8, w9
 5c4:	ldr	x10, [sp, #24]
 5c8:	mov	w11, w8
 5cc:	ubfx	x11, x11, #0, #32
 5d0:	add	x10, x10, x11
 5d4:	str	x10, [sp, #24]
 5d8:	ldr	w8, [sp, #100]
 5dc:	ldr	w9, [sp, #40]
 5e0:	subs	w8, w9, w8
 5e4:	str	w8, [sp, #40]
 5e8:	ldr	w8, [sp, #40]
 5ec:	ldr	w9, [sp, #36]
 5f0:	cmp	w8, w9
 5f4:	b.cs	6b4 <inflate_fast+0x6b4>  // b.hs, b.nlast
 5f8:	ldr	w8, [sp, #40]
 5fc:	ldr	w9, [sp, #36]
 600:	subs	w8, w9, w8
 604:	str	w8, [sp, #36]
 608:	ldr	x8, [sp, #24]
 60c:	add	x9, x8, #0x1
 610:	str	x9, [sp, #24]
 614:	ldrb	w10, [x8]
 618:	ldr	x8, [sp, #128]
 61c:	add	x9, x8, #0x1
 620:	str	x9, [sp, #128]
 624:	strb	w10, [x8]
 628:	ldr	w8, [sp, #40]
 62c:	subs	w8, w8, #0x1
 630:	str	w8, [sp, #40]
 634:	cbnz	w8, 608 <inflate_fast+0x608>
 638:	ldr	x8, [sp, #88]
 63c:	str	x8, [sp, #24]
 640:	ldr	w9, [sp, #100]
 644:	ldr	w10, [sp, #36]
 648:	cmp	w9, w10
 64c:	b.cs	6b4 <inflate_fast+0x6b4>  // b.hs, b.nlast
 650:	ldr	w8, [sp, #100]
 654:	str	w8, [sp, #40]
 658:	ldr	w8, [sp, #40]
 65c:	ldr	w9, [sp, #36]
 660:	subs	w8, w9, w8
 664:	str	w8, [sp, #36]
 668:	ldr	x8, [sp, #24]
 66c:	add	x9, x8, #0x1
 670:	str	x9, [sp, #24]
 674:	ldrb	w10, [x8]
 678:	ldr	x8, [sp, #128]
 67c:	add	x9, x8, #0x1
 680:	str	x9, [sp, #128]
 684:	strb	w10, [x8]
 688:	ldr	w8, [sp, #40]
 68c:	subs	w8, w8, #0x1
 690:	str	w8, [sp, #40]
 694:	cbnz	w8, 668 <inflate_fast+0x668>
 698:	ldr	x8, [sp, #128]
 69c:	ldr	w9, [sp, #32]
 6a0:	mov	w10, w9
 6a4:	mov	x11, xzr
 6a8:	subs	x10, x11, x10
 6ac:	add	x8, x8, x10
 6b0:	str	x8, [sp, #24]
 6b4:	b	744 <inflate_fast+0x744>
 6b8:	ldr	w8, [sp, #100]
 6bc:	ldr	w9, [sp, #40]
 6c0:	subs	w8, w8, w9
 6c4:	ldr	x10, [sp, #24]
 6c8:	mov	w11, w8
 6cc:	ubfx	x11, x11, #0, #32
 6d0:	add	x10, x10, x11
 6d4:	str	x10, [sp, #24]
 6d8:	ldr	w8, [sp, #40]
 6dc:	ldr	w9, [sp, #36]
 6e0:	cmp	w8, w9
 6e4:	b.cs	744 <inflate_fast+0x744>  // b.hs, b.nlast
 6e8:	ldr	w8, [sp, #40]
 6ec:	ldr	w9, [sp, #36]
 6f0:	subs	w8, w9, w8
 6f4:	str	w8, [sp, #36]
 6f8:	ldr	x8, [sp, #24]
 6fc:	add	x9, x8, #0x1
 700:	str	x9, [sp, #24]
 704:	ldrb	w10, [x8]
 708:	ldr	x8, [sp, #128]
 70c:	add	x9, x8, #0x1
 710:	str	x9, [sp, #128]
 714:	strb	w10, [x8]
 718:	ldr	w8, [sp, #40]
 71c:	subs	w8, w8, #0x1
 720:	str	w8, [sp, #40]
 724:	cbnz	w8, 6f8 <inflate_fast+0x6f8>
 728:	ldr	x8, [sp, #128]
 72c:	ldr	w9, [sp, #32]
 730:	mov	w10, w9
 734:	mov	x11, xzr
 738:	subs	x10, x11, x10
 73c:	add	x8, x8, x10
 740:	str	x8, [sp, #24]
 744:	ldr	w8, [sp, #36]
 748:	cmp	w8, #0x2
 74c:	b.ls	7c0 <inflate_fast+0x7c0>  // b.plast
 750:	ldr	x8, [sp, #24]
 754:	add	x9, x8, #0x1
 758:	str	x9, [sp, #24]
 75c:	ldrb	w10, [x8]
 760:	ldr	x8, [sp, #128]
 764:	add	x9, x8, #0x1
 768:	str	x9, [sp, #128]
 76c:	strb	w10, [x8]
 770:	ldr	x8, [sp, #24]
 774:	add	x9, x8, #0x1
 778:	str	x9, [sp, #24]
 77c:	ldrb	w10, [x8]
 780:	ldr	x8, [sp, #128]
 784:	add	x9, x8, #0x1
 788:	str	x9, [sp, #128]
 78c:	strb	w10, [x8]
 790:	ldr	x8, [sp, #24]
 794:	add	x9, x8, #0x1
 798:	str	x9, [sp, #24]
 79c:	ldrb	w10, [x8]
 7a0:	ldr	x8, [sp, #128]
 7a4:	add	x9, x8, #0x1
 7a8:	str	x9, [sp, #128]
 7ac:	strb	w10, [x8]
 7b0:	ldr	w10, [sp, #36]
 7b4:	subs	w10, w10, #0x3
 7b8:	str	w10, [sp, #36]
 7bc:	b	744 <inflate_fast+0x744>
 7c0:	ldr	w8, [sp, #36]
 7c4:	cbz	w8, 814 <inflate_fast+0x814>
 7c8:	ldr	x8, [sp, #24]
 7cc:	add	x9, x8, #0x1
 7d0:	str	x9, [sp, #24]
 7d4:	ldrb	w10, [x8]
 7d8:	ldr	x8, [sp, #128]
 7dc:	add	x9, x8, #0x1
 7e0:	str	x9, [sp, #128]
 7e4:	strb	w10, [x8]
 7e8:	ldr	w10, [sp, #36]
 7ec:	cmp	w10, #0x1
 7f0:	b.ls	814 <inflate_fast+0x814>  // b.plast
 7f4:	ldr	x8, [sp, #24]
 7f8:	add	x9, x8, #0x1
 7fc:	str	x9, [sp, #24]
 800:	ldrb	w10, [x8]
 804:	ldr	x8, [sp, #128]
 808:	add	x9, x8, #0x1
 80c:	str	x9, [sp, #128]
 810:	strb	w10, [x8]
 814:	b	900 <inflate_fast+0x900>
 818:	ldr	x8, [sp, #128]
 81c:	ldr	w9, [sp, #32]
 820:	mov	w10, w9
 824:	mov	x11, xzr
 828:	subs	x10, x11, x10
 82c:	add	x8, x8, x10
 830:	str	x8, [sp, #24]
 834:	ldr	x8, [sp, #24]
 838:	add	x9, x8, #0x1
 83c:	str	x9, [sp, #24]
 840:	ldrb	w10, [x8]
 844:	ldr	x8, [sp, #128]
 848:	add	x9, x8, #0x1
 84c:	str	x9, [sp, #128]
 850:	strb	w10, [x8]
 854:	ldr	x8, [sp, #24]
 858:	add	x9, x8, #0x1
 85c:	str	x9, [sp, #24]
 860:	ldrb	w10, [x8]
 864:	ldr	x8, [sp, #128]
 868:	add	x9, x8, #0x1
 86c:	str	x9, [sp, #128]
 870:	strb	w10, [x8]
 874:	ldr	x8, [sp, #24]
 878:	add	x9, x8, #0x1
 87c:	str	x9, [sp, #24]
 880:	ldrb	w10, [x8]
 884:	ldr	x8, [sp, #128]
 888:	add	x9, x8, #0x1
 88c:	str	x9, [sp, #128]
 890:	strb	w10, [x8]
 894:	ldr	w10, [sp, #36]
 898:	subs	w10, w10, #0x3
 89c:	str	w10, [sp, #36]
 8a0:	ldr	w8, [sp, #36]
 8a4:	cmp	w8, #0x2
 8a8:	b.hi	834 <inflate_fast+0x834>  // b.pmore
 8ac:	ldr	w8, [sp, #36]
 8b0:	cbz	w8, 900 <inflate_fast+0x900>
 8b4:	ldr	x8, [sp, #24]
 8b8:	add	x9, x8, #0x1
 8bc:	str	x9, [sp, #24]
 8c0:	ldrb	w10, [x8]
 8c4:	ldr	x8, [sp, #128]
 8c8:	add	x9, x8, #0x1
 8cc:	str	x9, [sp, #128]
 8d0:	strb	w10, [x8]
 8d4:	ldr	w10, [sp, #36]
 8d8:	cmp	w10, #0x1
 8dc:	b.ls	900 <inflate_fast+0x900>  // b.plast
 8e0:	ldr	x8, [sp, #24]
 8e4:	add	x9, x8, #0x1
 8e8:	str	x9, [sp, #24]
 8ec:	ldrb	w10, [x8]
 8f0:	ldr	x8, [sp, #128]
 8f4:	add	x9, x8, #0x1
 8f8:	str	x9, [sp, #128]
 8fc:	strb	w10, [x8]
 900:	b	96c <inflate_fast+0x96c>
 904:	ldr	w8, [sp, #40]
 908:	and	w8, w8, #0x40
 90c:	cbnz	w8, 94c <inflate_fast+0x94c>
 910:	ldr	x8, [sp, #56]
 914:	ldrh	w9, [sp, #46]
 918:	mov	w10, w9
 91c:	ldr	x11, [sp, #80]
 920:	ldr	w9, [sp, #40]
 924:	mov	w12, #0x1                   	// #1
 928:	lsl	w9, w12, w9
 92c:	subs	w9, w9, #0x1
 930:	mov	w13, w9
 934:	ubfx	x13, x13, #0, #32
 938:	and	x11, x11, x13
 93c:	add	x10, x10, x11
 940:	ldr	w9, [x8, x10, lsl #2]
 944:	str	w9, [sp, #44]
 948:	b	368 <inflate_fast+0x368>
 94c:	ldr	x8, [sp, #168]
 950:	adrp	x9, 0 <inflate_fast>
 954:	add	x9, x9, #0x0
 958:	str	x9, [x8, #48]
 95c:	ldr	x8, [sp, #152]
 960:	mov	w10, #0x3f51                	// #16209
 964:	str	w10, [x8, #8]
 968:	b	a28 <inflate_fast+0xa28>
 96c:	b	9f4 <inflate_fast+0x9f4>
 970:	ldr	w8, [sp, #40]
 974:	and	w8, w8, #0x40
 978:	cbnz	w8, 9b8 <inflate_fast+0x9b8>
 97c:	ldr	x8, [sp, #64]
 980:	ldrh	w9, [sp, #46]
 984:	mov	w10, w9
 988:	ldr	x11, [sp, #80]
 98c:	ldr	w9, [sp, #40]
 990:	mov	w12, #0x1                   	// #1
 994:	lsl	w9, w12, w9
 998:	subs	w9, w9, #0x1
 99c:	mov	w13, w9
 9a0:	ubfx	x13, x13, #0, #32
 9a4:	and	x11, x11, x13
 9a8:	add	x10, x10, x11
 9ac:	ldr	w9, [x8, x10, lsl #2]
 9b0:	str	w9, [sp, #44]
 9b4:	b	1c0 <inflate_fast+0x1c0>
 9b8:	ldr	w8, [sp, #40]
 9bc:	and	w8, w8, #0x20
 9c0:	cbz	w8, 9d4 <inflate_fast+0x9d4>
 9c4:	ldr	x8, [sp, #152]
 9c8:	mov	w9, #0x3f3f                	// #16191
 9cc:	str	w9, [x8, #8]
 9d0:	b	a28 <inflate_fast+0xa28>
 9d4:	ldr	x8, [sp, #168]
 9d8:	adrp	x9, 0 <inflate_fast>
 9dc:	add	x9, x9, #0x0
 9e0:	str	x9, [x8, #48]
 9e4:	ldr	x8, [sp, #152]
 9e8:	mov	w10, #0x3f51                	// #16209
 9ec:	str	w10, [x8, #8]
 9f0:	b	a28 <inflate_fast+0xa28>
 9f4:	ldr	x8, [sp, #144]
 9f8:	ldr	x9, [sp, #136]
 9fc:	mov	w10, #0x0                   	// #0
 a00:	cmp	x8, x9
 a04:	str	w10, [sp, #20]
 a08:	b.cs	a20 <inflate_fast+0xa20>  // b.hs, b.nlast
 a0c:	ldr	x8, [sp, #128]
 a10:	ldr	x9, [sp, #112]
 a14:	cmp	x8, x9
 a18:	cset	w10, cc  // cc = lo, ul, last
 a1c:	str	w10, [sp, #20]
 a20:	ldr	w8, [sp, #20]
 a24:	tbnz	w8, #0, 128 <inflate_fast+0x128>
 a28:	ldr	w8, [sp, #76]
 a2c:	lsr	w8, w8, #3
 a30:	str	w8, [sp, #36]
 a34:	ldr	w8, [sp, #36]
 a38:	mov	w9, w8
 a3c:	ldr	x10, [sp, #144]
 a40:	mov	x11, xzr
 a44:	subs	x9, x11, x9
 a48:	add	x9, x10, x9
 a4c:	str	x9, [sp, #144]
 a50:	ldr	w8, [sp, #36]
 a54:	ldr	w12, [sp, #76]
 a58:	subs	w8, w12, w8, lsl #3
 a5c:	str	w8, [sp, #76]
 a60:	ldr	w8, [sp, #76]
 a64:	mov	w12, #0x1                   	// #1
 a68:	lsl	w8, w12, w8
 a6c:	subs	w8, w8, #0x1
 a70:	mov	w9, w8
 a74:	ubfx	x9, x9, #0, #32
 a78:	ldr	x10, [sp, #80]
 a7c:	and	x9, x10, x9
 a80:	str	x9, [sp, #80]
 a84:	ldr	x9, [sp, #144]
 a88:	ldr	x10, [sp, #168]
 a8c:	str	x9, [x10]
 a90:	ldr	x9, [sp, #128]
 a94:	ldr	x10, [sp, #168]
 a98:	str	x9, [x10, #24]
 a9c:	ldr	x9, [sp, #144]
 aa0:	ldr	x10, [sp, #136]
 aa4:	cmp	x9, x10
 aa8:	b.cs	ac4 <inflate_fast+0xac4>  // b.hs, b.nlast
 aac:	ldr	x8, [sp, #136]
 ab0:	ldr	x9, [sp, #144]
 ab4:	subs	x8, x8, x9
 ab8:	add	x8, x8, #0x5
 abc:	str	x8, [sp, #8]
 ac0:	b	adc <inflate_fast+0xadc>
 ac4:	ldr	x8, [sp, #144]
 ac8:	ldr	x9, [sp, #136]
 acc:	subs	x8, x8, x9
 ad0:	mov	x9, #0x5                   	// #5
 ad4:	subs	x8, x9, x8
 ad8:	str	x8, [sp, #8]
 adc:	ldr	x8, [sp, #8]
 ae0:	ldr	x9, [sp, #168]
 ae4:	str	w8, [x9, #8]
 ae8:	ldr	x9, [sp, #128]
 aec:	ldr	x10, [sp, #112]
 af0:	cmp	x9, x10
 af4:	b.cs	b10 <inflate_fast+0xb10>  // b.hs, b.nlast
 af8:	ldr	x8, [sp, #112]
 afc:	ldr	x9, [sp, #128]
 b00:	subs	x8, x8, x9
 b04:	add	x8, x8, #0x101
 b08:	str	x8, [sp]
 b0c:	b	b28 <inflate_fast+0xb28>
 b10:	ldr	x8, [sp, #128]
 b14:	ldr	x9, [sp, #112]
 b18:	subs	x8, x8, x9
 b1c:	mov	x9, #0x101                 	// #257
 b20:	subs	x8, x9, x8
 b24:	str	x8, [sp]
 b28:	ldr	x8, [sp]
 b2c:	ldr	x9, [sp, #168]
 b30:	str	w8, [x9, #32]
 b34:	ldr	x9, [sp, #80]
 b38:	ldr	x10, [sp, #152]
 b3c:	str	x9, [x10, #80]
 b40:	ldr	w8, [sp, #76]
 b44:	ldr	x9, [sp, #152]
 b48:	str	w8, [x9, #88]
 b4c:	add	sp, sp, #0xb0
 b50:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	sub	sp, sp, #0x30
       4:	stp	x29, x30, [sp, #32]
       8:	add	x29, sp, #0x20
       c:	str	x0, [sp, #16]
      10:	ldr	x0, [sp, #16]
      14:	bl	110 <inflateStateCheck>
      18:	cbz	w0, 28 <inflateResetKeep+0x28>
      1c:	mov	w8, #0xfffffffe            	// #-2
      20:	stur	w8, [x29, #-4]
      24:	b	100 <inflateResetKeep+0x100>
      28:	ldr	x8, [sp, #16]
      2c:	ldr	x8, [x8, #56]
      30:	str	x8, [sp, #8]
      34:	ldr	x8, [sp, #8]
      38:	mov	x9, xzr
      3c:	str	xzr, [x8, #40]
      40:	ldr	x8, [sp, #16]
      44:	str	xzr, [x8, #40]
      48:	ldr	x8, [sp, #16]
      4c:	str	xzr, [x8, #16]
      50:	ldr	x8, [sp, #16]
      54:	str	x9, [x8, #48]
      58:	ldr	x8, [sp, #8]
      5c:	ldr	w10, [x8, #16]
      60:	cbz	w10, 80 <inflateResetKeep+0x80>
      64:	ldr	x8, [sp, #8]
      68:	ldr	w9, [x8, #16]
      6c:	and	w9, w9, #0x1
      70:	mov	w0, w9
      74:	sxtw	x8, w0
      78:	ldr	x10, [sp, #16]
      7c:	str	x8, [x10, #96]
      80:	ldr	x8, [sp, #8]
      84:	mov	w9, #0x3f34                	// #16180
      88:	str	w9, [x8, #8]
      8c:	ldr	x8, [sp, #8]
      90:	str	wzr, [x8, #12]
      94:	ldr	x8, [sp, #8]
      98:	str	wzr, [x8, #20]
      9c:	ldr	x8, [sp, #8]
      a0:	mov	w9, #0x8000                	// #32768
      a4:	str	w9, [x8, #28]
      a8:	ldr	x8, [sp, #8]
      ac:	mov	x10, xzr
      b0:	str	x10, [x8, #48]
      b4:	ldr	x8, [sp, #8]
      b8:	str	xzr, [x8, #80]
      bc:	ldr	x8, [sp, #8]
      c0:	str	wzr, [x8, #88]
      c4:	ldr	x8, [sp, #8]
      c8:	add	x8, x8, #0x558
      cc:	ldr	x10, [sp, #8]
      d0:	str	x8, [x10, #144]
      d4:	ldr	x10, [sp, #8]
      d8:	str	x8, [x10, #112]
      dc:	ldr	x10, [sp, #8]
      e0:	str	x8, [x10, #104]
      e4:	ldr	x8, [sp, #8]
      e8:	mov	w9, #0x1                   	// #1
      ec:	str	w9, [x8, #7144]
      f0:	ldr	x8, [sp, #8]
      f4:	mov	w9, #0xffffffff            	// #-1
      f8:	str	w9, [x8, #7148]
      fc:	stur	wzr, [x29, #-4]
     100:	ldur	w0, [x29, #-4]
     104:	ldp	x29, x30, [sp, #32]
     108:	add	sp, sp, #0x30
     10c:	ret

0000000000000110 <inflateStateCheck>:
     110:	sub	sp, sp, #0x20
     114:	str	x0, [sp, #16]
     118:	ldr	x8, [sp, #16]
     11c:	cbz	x8, 138 <inflateStateCheck+0x28>
     120:	ldr	x8, [sp, #16]
     124:	ldr	x8, [x8, #64]
     128:	cbz	x8, 138 <inflateStateCheck+0x28>
     12c:	ldr	x8, [sp, #16]
     130:	ldr	x8, [x8, #72]
     134:	cbnz	x8, 144 <inflateStateCheck+0x34>
     138:	mov	w8, #0x1                   	// #1
     13c:	str	w8, [sp, #28]
     140:	b	1a4 <inflateStateCheck+0x94>
     144:	ldr	x8, [sp, #16]
     148:	ldr	x8, [x8, #56]
     14c:	str	x8, [sp, #8]
     150:	ldr	x8, [sp, #8]
     154:	cbz	x8, 194 <inflateStateCheck+0x84>
     158:	ldr	x8, [sp, #8]
     15c:	ldr	x8, [x8]
     160:	ldr	x9, [sp, #16]
     164:	cmp	x8, x9
     168:	b.ne	194 <inflateStateCheck+0x84>  // b.any
     16c:	ldr	x8, [sp, #8]
     170:	ldr	w9, [x8, #8]
     174:	mov	w10, #0x3f34                	// #16180
     178:	cmp	w9, w10
     17c:	b.cc	194 <inflateStateCheck+0x84>  // b.lo, b.ul, b.last
     180:	ldr	x8, [sp, #8]
     184:	ldr	w9, [x8, #8]
     188:	mov	w10, #0x3f53                	// #16211
     18c:	cmp	w9, w10
     190:	b.ls	1a0 <inflateStateCheck+0x90>  // b.plast
     194:	mov	w8, #0x1                   	// #1
     198:	str	w8, [sp, #28]
     19c:	b	1a4 <inflateStateCheck+0x94>
     1a0:	str	wzr, [sp, #28]
     1a4:	ldr	w0, [sp, #28]
     1a8:	add	sp, sp, #0x20
     1ac:	ret

00000000000001b0 <inflateReset>:
     1b0:	sub	sp, sp, #0x30
     1b4:	stp	x29, x30, [sp, #32]
     1b8:	add	x29, sp, #0x20
     1bc:	str	x0, [sp, #16]
     1c0:	ldr	x0, [sp, #16]
     1c4:	bl	110 <inflateStateCheck>
     1c8:	cbz	w0, 1d8 <inflateReset+0x28>
     1cc:	mov	w8, #0xfffffffe            	// #-2
     1d0:	stur	w8, [x29, #-4]
     1d4:	b	208 <inflateReset+0x58>
     1d8:	ldr	x8, [sp, #16]
     1dc:	ldr	x8, [x8, #56]
     1e0:	str	x8, [sp, #8]
     1e4:	ldr	x8, [sp, #8]
     1e8:	str	wzr, [x8, #60]
     1ec:	ldr	x8, [sp, #8]
     1f0:	str	wzr, [x8, #64]
     1f4:	ldr	x8, [sp, #8]
     1f8:	str	wzr, [x8, #68]
     1fc:	ldr	x0, [sp, #16]
     200:	bl	0 <inflateResetKeep>
     204:	stur	w0, [x29, #-4]
     208:	ldur	w0, [x29, #-4]
     20c:	ldp	x29, x30, [sp, #32]
     210:	add	sp, sp, #0x30
     214:	ret

0000000000000218 <inflateReset2>:
     218:	sub	sp, sp, #0x30
     21c:	stp	x29, x30, [sp, #32]
     220:	add	x29, sp, #0x20
     224:	str	x0, [sp, #16]
     228:	str	w1, [sp, #12]
     22c:	ldr	x0, [sp, #16]
     230:	bl	110 <inflateStateCheck>
     234:	cbz	w0, 244 <inflateReset2+0x2c>
     238:	mov	w8, #0xfffffffe            	// #-2
     23c:	stur	w8, [x29, #-4]
     240:	b	338 <inflateReset2+0x120>
     244:	ldr	x8, [sp, #16]
     248:	ldr	x8, [x8, #56]
     24c:	str	x8, [sp]
     250:	ldr	w9, [sp, #12]
     254:	cmp	w9, #0x0
     258:	cset	w9, ge  // ge = tcont
     25c:	tbnz	w9, #0, 278 <inflateReset2+0x60>
     260:	mov	w8, wzr
     264:	str	wzr, [sp, #8]
     268:	ldr	w9, [sp, #12]
     26c:	subs	w8, w8, w9
     270:	str	w8, [sp, #12]
     274:	b	2a0 <inflateReset2+0x88>
     278:	ldr	w8, [sp, #12]
     27c:	asr	w8, w8, #4
     280:	add	w8, w8, #0x5
     284:	str	w8, [sp, #8]
     288:	ldr	w8, [sp, #12]
     28c:	cmp	w8, #0x30
     290:	b.ge	2a0 <inflateReset2+0x88>  // b.tcont
     294:	ldr	w8, [sp, #12]
     298:	and	w8, w8, #0xf
     29c:	str	w8, [sp, #12]
     2a0:	ldr	w8, [sp, #12]
     2a4:	cbz	w8, 2cc <inflateReset2+0xb4>
     2a8:	ldr	w8, [sp, #12]
     2ac:	cmp	w8, #0x8
     2b0:	b.lt	2c0 <inflateReset2+0xa8>  // b.tstop
     2b4:	ldr	w8, [sp, #12]
     2b8:	cmp	w8, #0xf
     2bc:	b.le	2cc <inflateReset2+0xb4>
     2c0:	mov	w8, #0xfffffffe            	// #-2
     2c4:	stur	w8, [x29, #-4]
     2c8:	b	338 <inflateReset2+0x120>
     2cc:	ldr	x8, [sp]
     2d0:	ldr	x8, [x8, #72]
     2d4:	cbz	x8, 314 <inflateReset2+0xfc>
     2d8:	ldr	x8, [sp]
     2dc:	ldr	w9, [x8, #56]
     2e0:	ldr	w10, [sp, #12]
     2e4:	cmp	w9, w10
     2e8:	b.eq	314 <inflateReset2+0xfc>  // b.none
     2ec:	ldr	x8, [sp, #16]
     2f0:	ldr	x8, [x8, #72]
     2f4:	ldr	x9, [sp, #16]
     2f8:	ldr	x0, [x9, #80]
     2fc:	ldr	x9, [sp]
     300:	ldr	x1, [x9, #72]
     304:	blr	x8
     308:	ldr	x8, [sp]
     30c:	mov	x9, xzr
     310:	str	x9, [x8, #72]
     314:	ldr	w8, [sp, #8]
     318:	ldr	x9, [sp]
     31c:	str	w8, [x9, #16]
     320:	ldr	w8, [sp, #12]
     324:	ldr	x9, [sp]
     328:	str	w8, [x9, #56]
     32c:	ldr	x0, [sp, #16]
     330:	bl	1b0 <inflateReset>
     334:	stur	w0, [x29, #-4]
     338:	ldur	w0, [x29, #-4]
     33c:	ldp	x29, x30, [sp, #32]
     340:	add	sp, sp, #0x30
     344:	ret

0000000000000348 <inflateInit2_>:
     348:	sub	sp, sp, #0x40
     34c:	stp	x29, x30, [sp, #48]
     350:	add	x29, sp, #0x30
     354:	stur	x0, [x29, #-16]
     358:	stur	w1, [x29, #-20]
     35c:	str	x2, [sp, #16]
     360:	str	w3, [sp, #12]
     364:	ldr	x8, [sp, #16]
     368:	cbz	x8, 394 <inflateInit2_+0x4c>
     36c:	ldr	x8, [sp, #16]
     370:	ldrb	w9, [x8]
     374:	adrp	x8, 0 <inflateResetKeep>
     378:	add	x8, x8, #0x0
     37c:	ldrb	w10, [x8]
     380:	cmp	w9, w10
     384:	b.ne	394 <inflateInit2_+0x4c>  // b.any
     388:	ldr	w8, [sp, #12]
     38c:	cmp	w8, #0x70
     390:	b.eq	3a0 <inflateInit2_+0x58>  // b.none
     394:	mov	w8, #0xfffffffa            	// #-6
     398:	stur	w8, [x29, #-4]
     39c:	b	4ac <inflateInit2_+0x164>
     3a0:	ldur	x8, [x29, #-16]
     3a4:	cbnz	x8, 3b4 <inflateInit2_+0x6c>
     3a8:	mov	w8, #0xfffffffe            	// #-2
     3ac:	stur	w8, [x29, #-4]
     3b0:	b	4ac <inflateInit2_+0x164>
     3b4:	ldur	x8, [x29, #-16]
     3b8:	mov	x9, xzr
     3bc:	str	x9, [x8, #48]
     3c0:	ldur	x8, [x29, #-16]
     3c4:	ldr	x8, [x8, #64]
     3c8:	cbnz	x8, 3e8 <inflateInit2_+0xa0>
     3cc:	ldur	x8, [x29, #-16]
     3d0:	adrp	x9, 0 <zcalloc>
     3d4:	add	x9, x9, #0x0
     3d8:	str	x9, [x8, #64]
     3dc:	ldur	x8, [x29, #-16]
     3e0:	mov	x9, xzr
     3e4:	str	x9, [x8, #80]
     3e8:	ldur	x8, [x29, #-16]
     3ec:	ldr	x8, [x8, #72]
     3f0:	cbnz	x8, 404 <inflateInit2_+0xbc>
     3f4:	ldur	x8, [x29, #-16]
     3f8:	adrp	x9, 0 <zcfree>
     3fc:	add	x9, x9, #0x0
     400:	str	x9, [x8, #72]
     404:	ldur	x8, [x29, #-16]
     408:	ldr	x8, [x8, #64]
     40c:	ldur	x9, [x29, #-16]
     410:	ldr	x0, [x9, #80]
     414:	mov	w1, #0x1                   	// #1
     418:	mov	w2, #0x1bf8                	// #7160
     41c:	blr	x8
     420:	str	x0, [sp]
     424:	ldr	x8, [sp]
     428:	cbnz	x8, 438 <inflateInit2_+0xf0>
     42c:	mov	w8, #0xfffffffc            	// #-4
     430:	stur	w8, [x29, #-4]
     434:	b	4ac <inflateInit2_+0x164>
     438:	ldr	x8, [sp]
     43c:	ldur	x9, [x29, #-16]
     440:	str	x8, [x9, #56]
     444:	ldur	x8, [x29, #-16]
     448:	ldr	x9, [sp]
     44c:	str	x8, [x9]
     450:	ldr	x8, [sp]
     454:	mov	x9, xzr
     458:	str	x9, [x8, #72]
     45c:	ldr	x8, [sp]
     460:	mov	w10, #0x3f34                	// #16180
     464:	str	w10, [x8, #8]
     468:	ldur	x0, [x29, #-16]
     46c:	ldur	w1, [x29, #-20]
     470:	bl	218 <inflateReset2>
     474:	str	w0, [sp, #8]
     478:	ldr	w10, [sp, #8]
     47c:	cbz	w10, 4a4 <inflateInit2_+0x15c>
     480:	ldur	x8, [x29, #-16]
     484:	ldr	x8, [x8, #72]
     488:	ldur	x9, [x29, #-16]
     48c:	ldr	x0, [x9, #80]
     490:	ldr	x1, [sp]
     494:	blr	x8
     498:	ldur	x8, [x29, #-16]
     49c:	mov	x9, xzr
     4a0:	str	x9, [x8, #56]
     4a4:	ldr	w8, [sp, #8]
     4a8:	stur	w8, [x29, #-4]
     4ac:	ldur	w0, [x29, #-4]
     4b0:	ldp	x29, x30, [sp, #48]
     4b4:	add	sp, sp, #0x40
     4b8:	ret

00000000000004bc <inflateInit_>:
     4bc:	sub	sp, sp, #0x30
     4c0:	stp	x29, x30, [sp, #32]
     4c4:	add	x29, sp, #0x20
     4c8:	mov	w8, #0xf                   	// #15
     4cc:	stur	x0, [x29, #-8]
     4d0:	str	x1, [sp, #16]
     4d4:	str	w2, [sp, #12]
     4d8:	ldur	x0, [x29, #-8]
     4dc:	ldr	x2, [sp, #16]
     4e0:	ldr	w3, [sp, #12]
     4e4:	mov	w1, w8
     4e8:	bl	348 <inflateInit2_>
     4ec:	ldp	x29, x30, [sp, #32]
     4f0:	add	sp, sp, #0x30
     4f4:	ret

00000000000004f8 <inflatePrime>:
     4f8:	sub	sp, sp, #0x30
     4fc:	stp	x29, x30, [sp, #32]
     500:	add	x29, sp, #0x20
     504:	str	x0, [sp, #16]
     508:	str	w1, [sp, #12]
     50c:	str	w2, [sp, #8]
     510:	ldr	x0, [sp, #16]
     514:	bl	110 <inflateStateCheck>
     518:	cbz	w0, 528 <inflatePrime+0x30>
     51c:	mov	w8, #0xfffffffe            	// #-2
     520:	stur	w8, [x29, #-4]
     524:	b	5ec <inflatePrime+0xf4>
     528:	ldr	x8, [sp, #16]
     52c:	ldr	x8, [x8, #56]
     530:	str	x8, [sp]
     534:	ldr	w9, [sp, #12]
     538:	cmp	w9, #0x0
     53c:	cset	w9, ge  // ge = tcont
     540:	tbnz	w9, #0, 55c <inflatePrime+0x64>
     544:	ldr	x8, [sp]
     548:	str	xzr, [x8, #80]
     54c:	ldr	x8, [sp]
     550:	str	wzr, [x8, #88]
     554:	stur	wzr, [x29, #-4]
     558:	b	5ec <inflatePrime+0xf4>
     55c:	ldr	w8, [sp, #12]
     560:	cmp	w8, #0x10
     564:	b.gt	580 <inflatePrime+0x88>
     568:	ldr	x8, [sp]
     56c:	ldr	w9, [x8, #88]
     570:	ldr	w10, [sp, #12]
     574:	add	w9, w9, w10
     578:	cmp	w9, #0x20
     57c:	b.ls	58c <inflatePrime+0x94>  // b.plast
     580:	mov	w8, #0xfffffffe            	// #-2
     584:	stur	w8, [x29, #-4]
     588:	b	5ec <inflatePrime+0xf4>
     58c:	ldr	w8, [sp, #12]
     590:	mov	w9, w8
     594:	mov	x10, #0x1                   	// #1
     598:	lsl	x9, x10, x9
     59c:	subs	x9, x9, #0x1
     5a0:	ldrsw	x10, [sp, #8]
     5a4:	and	x9, x10, x9
     5a8:	str	w9, [sp, #8]
     5ac:	ldr	w8, [sp, #8]
     5b0:	ldr	x10, [sp]
     5b4:	ldr	w9, [x10, #88]
     5b8:	lsl	w8, w8, w9
     5bc:	mov	w10, w8
     5c0:	ubfx	x10, x10, #0, #32
     5c4:	ldr	x11, [sp]
     5c8:	ldr	x12, [x11, #80]
     5cc:	add	x10, x12, x10
     5d0:	str	x10, [x11, #80]
     5d4:	ldr	w8, [sp, #12]
     5d8:	ldr	x10, [sp]
     5dc:	ldr	w9, [x10, #88]
     5e0:	add	w8, w9, w8
     5e4:	str	w8, [x10, #88]
     5e8:	stur	wzr, [x29, #-4]
     5ec:	ldur	w0, [x29, #-4]
     5f0:	ldp	x29, x30, [sp, #32]
     5f4:	add	sp, sp, #0x30
     5f8:	ret

00000000000005fc <inflate>:
     5fc:	sub	sp, sp, #0xd0
     600:	stp	x29, x30, [sp, #192]
     604:	add	x29, sp, #0xc0
     608:	stur	x0, [x29, #-16]
     60c:	stur	w1, [x29, #-20]
     610:	ldur	x0, [x29, #-16]
     614:	bl	110 <inflateStateCheck>
     618:	cbnz	w0, 640 <inflate+0x44>
     61c:	ldur	x8, [x29, #-16]
     620:	ldr	x8, [x8, #24]
     624:	cbz	x8, 640 <inflate+0x44>
     628:	ldur	x8, [x29, #-16]
     62c:	ldr	x8, [x8]
     630:	cbnz	x8, 64c <inflate+0x50>
     634:	ldur	x8, [x29, #-16]
     638:	ldr	w9, [x8, #8]
     63c:	cbz	w9, 64c <inflate+0x50>
     640:	mov	w8, #0xfffffffe            	// #-2
     644:	stur	w8, [x29, #-4]
     648:	b	308c <inflate+0x2a90>
     64c:	ldur	x8, [x29, #-16]
     650:	ldr	x8, [x8, #56]
     654:	stur	x8, [x29, #-32]
     658:	ldur	x8, [x29, #-32]
     65c:	ldr	w9, [x8, #8]
     660:	mov	w10, #0x3f3f                	// #16191
     664:	cmp	w9, w10
     668:	b.ne	678 <inflate+0x7c>  // b.any
     66c:	ldur	x8, [x29, #-32]
     670:	mov	w9, #0x3f40                	// #16192
     674:	str	w9, [x8, #8]
     678:	ldur	x8, [x29, #-16]
     67c:	ldr	x8, [x8, #24]
     680:	stur	x8, [x29, #-48]
     684:	ldur	x8, [x29, #-16]
     688:	ldr	w9, [x8, #32]
     68c:	stur	w9, [x29, #-56]
     690:	ldur	x8, [x29, #-16]
     694:	ldr	x8, [x8]
     698:	stur	x8, [x29, #-40]
     69c:	ldur	x8, [x29, #-16]
     6a0:	ldr	w9, [x8, #8]
     6a4:	stur	w9, [x29, #-52]
     6a8:	ldur	x8, [x29, #-32]
     6ac:	ldr	x8, [x8, #80]
     6b0:	stur	x8, [x29, #-64]
     6b4:	ldur	x8, [x29, #-32]
     6b8:	ldr	w9, [x8, #88]
     6bc:	stur	w9, [x29, #-68]
     6c0:	ldur	w8, [x29, #-52]
     6c4:	stur	w8, [x29, #-72]
     6c8:	ldur	w8, [x29, #-56]
     6cc:	stur	w8, [x29, #-76]
     6d0:	str	wzr, [sp, #88]
     6d4:	ldur	x8, [x29, #-32]
     6d8:	ldr	w9, [x8, #8]
     6dc:	mov	w10, #0x3f34                	// #16180
     6e0:	subs	w9, w9, w10
     6e4:	mov	w8, w9
     6e8:	ubfx	x8, x8, #0, #32
     6ec:	cmp	x8, #0x1f
     6f0:	str	x8, [sp, #72]
     6f4:	b.hi	2dc8 <inflate+0x27cc>  // b.pmore
     6f8:	adrp	x8, 0 <inflateResetKeep>
     6fc:	add	x8, x8, #0x0
     700:	ldr	x11, [sp, #72]
     704:	ldrsw	x10, [x8, x11, lsl #2]
     708:	add	x9, x8, x10
     70c:	br	x9
     710:	ldur	x8, [x29, #-32]
     714:	ldr	w9, [x8, #16]
     718:	cbnz	w9, 72c <inflate+0x130>
     71c:	ldur	x8, [x29, #-32]
     720:	mov	w9, #0x3f40                	// #16192
     724:	str	w9, [x8, #8]
     728:	b	2dd4 <inflate+0x27d8>
     72c:	ldur	w8, [x29, #-68]
     730:	cmp	w8, #0x10
     734:	b.cs	78c <inflate+0x190>  // b.hs, b.nlast
     738:	ldur	w8, [x29, #-52]
     73c:	cbnz	w8, 744 <inflate+0x148>
     740:	b	2dd8 <inflate+0x27dc>
     744:	ldur	w8, [x29, #-52]
     748:	subs	w8, w8, #0x1
     74c:	stur	w8, [x29, #-52]
     750:	ldur	x9, [x29, #-40]
     754:	add	x10, x9, #0x1
     758:	stur	x10, [x29, #-40]
     75c:	ldrb	w8, [x9]
     760:	mov	w9, w8
     764:	ldur	w8, [x29, #-68]
     768:	mov	w10, w8
     76c:	lsl	x9, x9, x10
     770:	ldur	x10, [x29, #-64]
     774:	add	x9, x10, x9
     778:	stur	x9, [x29, #-64]
     77c:	ldur	w8, [x29, #-68]
     780:	add	w8, w8, #0x8
     784:	stur	w8, [x29, #-68]
     788:	b	72c <inflate+0x130>
     78c:	ldur	x8, [x29, #-32]
     790:	ldr	w9, [x8, #16]
     794:	and	w9, w9, #0x2
     798:	cbz	w9, 830 <inflate+0x234>
     79c:	ldur	x8, [x29, #-64]
     7a0:	mov	x9, #0x8b1f                	// #35615
     7a4:	cmp	x8, x9
     7a8:	b.ne	830 <inflate+0x234>  // b.any
     7ac:	ldur	x8, [x29, #-32]
     7b0:	ldr	w9, [x8, #56]
     7b4:	cbnz	w9, 7c4 <inflate+0x1c8>
     7b8:	ldur	x8, [x29, #-32]
     7bc:	mov	w9, #0xf                   	// #15
     7c0:	str	w9, [x8, #56]
     7c4:	mov	x8, xzr
     7c8:	mov	x0, x8
     7cc:	mov	x1, x8
     7d0:	mov	w9, wzr
     7d4:	mov	w2, w9
     7d8:	bl	0 <crc32>
     7dc:	ldur	x8, [x29, #-32]
     7e0:	str	x0, [x8, #32]
     7e4:	ldur	x8, [x29, #-64]
     7e8:	add	x9, sp, #0x54
     7ec:	strb	w8, [sp, #84]
     7f0:	ldur	x10, [x29, #-64]
     7f4:	lsr	x10, x10, #8
     7f8:	strb	w10, [x9, #1]
     7fc:	ldur	x11, [x29, #-32]
     800:	ldr	x0, [x11, #32]
     804:	mov	x1, x9
     808:	mov	w2, #0x2                   	// #2
     80c:	bl	0 <crc32>
     810:	ldur	x9, [x29, #-32]
     814:	str	x0, [x9, #32]
     818:	stur	xzr, [x29, #-64]
     81c:	stur	wzr, [x29, #-68]
     820:	ldur	x8, [x29, #-32]
     824:	mov	w9, #0x3f35                	// #16181
     828:	str	w9, [x8, #8]
     82c:	b	2dd4 <inflate+0x27d8>
     830:	ldur	x8, [x29, #-32]
     834:	str	wzr, [x8, #24]
     838:	ldur	x8, [x29, #-32]
     83c:	ldr	x8, [x8, #48]
     840:	cbz	x8, 854 <inflate+0x258>
     844:	ldur	x8, [x29, #-32]
     848:	ldr	x8, [x8, #48]
     84c:	mov	w9, #0xffffffff            	// #-1
     850:	str	w9, [x8, #72]
     854:	ldur	x8, [x29, #-32]
     858:	ldr	w9, [x8, #16]
     85c:	and	w9, w9, #0x1
     860:	cbz	w9, 894 <inflate+0x298>
     864:	ldur	x8, [x29, #-64]
     868:	and	w8, w8, #0xff
     86c:	lsl	w8, w8, #8
     870:	mov	w9, w8
     874:	ubfx	x9, x9, #0, #32
     878:	ldur	x10, [x29, #-64]
     87c:	add	x9, x9, x10, lsr #8
     880:	mov	x10, #0x1f                  	// #31
     884:	udiv	x11, x9, x10
     888:	mul	x10, x11, x10
     88c:	subs	x9, x9, x10
     890:	cbz	x9, 8b4 <inflate+0x2b8>
     894:	ldur	x8, [x29, #-16]
     898:	adrp	x9, 0 <inflateResetKeep>
     89c:	add	x9, x9, #0x0
     8a0:	str	x9, [x8, #48]
     8a4:	ldur	x8, [x29, #-32]
     8a8:	mov	w10, #0x3f51                	// #16209
     8ac:	str	w10, [x8, #8]
     8b0:	b	2dd4 <inflate+0x27d8>
     8b4:	ldur	x8, [x29, #-64]
     8b8:	and	w8, w8, #0xf
     8bc:	cmp	w8, #0x8
     8c0:	b.eq	8e4 <inflate+0x2e8>  // b.none
     8c4:	ldur	x8, [x29, #-16]
     8c8:	adrp	x9, 0 <inflateResetKeep>
     8cc:	add	x9, x9, #0x0
     8d0:	str	x9, [x8, #48]
     8d4:	ldur	x8, [x29, #-32]
     8d8:	mov	w10, #0x3f51                	// #16209
     8dc:	str	w10, [x8, #8]
     8e0:	b	2dd4 <inflate+0x27d8>
     8e4:	ldur	x8, [x29, #-64]
     8e8:	lsr	x8, x8, #4
     8ec:	stur	x8, [x29, #-64]
     8f0:	ldur	w9, [x29, #-68]
     8f4:	subs	w9, w9, #0x4
     8f8:	stur	w9, [x29, #-68]
     8fc:	ldur	x8, [x29, #-64]
     900:	and	w8, w8, #0xf
     904:	add	w8, w8, #0x8
     908:	str	w8, [sp, #92]
     90c:	ldur	x9, [x29, #-32]
     910:	ldr	w8, [x9, #56]
     914:	cbnz	w8, 924 <inflate+0x328>
     918:	ldr	w8, [sp, #92]
     91c:	ldur	x9, [x29, #-32]
     920:	str	w8, [x9, #56]
     924:	ldr	w8, [sp, #92]
     928:	cmp	w8, #0xf
     92c:	b.hi	944 <inflate+0x348>  // b.pmore
     930:	ldr	w8, [sp, #92]
     934:	ldur	x9, [x29, #-32]
     938:	ldr	w10, [x9, #56]
     93c:	cmp	w8, w10
     940:	b.ls	964 <inflate+0x368>  // b.plast
     944:	ldur	x8, [x29, #-16]
     948:	adrp	x9, 0 <inflateResetKeep>
     94c:	add	x9, x9, #0x0
     950:	str	x9, [x8, #48]
     954:	ldur	x8, [x29, #-32]
     958:	mov	w10, #0x3f51                	// #16209
     95c:	str	w10, [x8, #8]
     960:	b	2dd4 <inflate+0x27d8>
     964:	ldr	w8, [sp, #92]
     968:	mov	w9, #0x1                   	// #1
     96c:	lsl	w8, w9, w8
     970:	ldur	x10, [x29, #-32]
     974:	str	w8, [x10, #28]
     978:	mov	x10, xzr
     97c:	mov	x0, x10
     980:	mov	x1, x10
     984:	mov	w8, wzr
     988:	mov	w2, w8
     98c:	bl	0 <adler32>
     990:	ldur	x10, [x29, #-32]
     994:	str	x0, [x10, #32]
     998:	ldur	x10, [x29, #-16]
     99c:	str	x0, [x10, #96]
     9a0:	ldur	x10, [x29, #-64]
     9a4:	mov	w8, #0x3f3d                	// #16189
     9a8:	mov	w9, #0x3f3f                	// #16191
     9ac:	tst	x10, #0x200
     9b0:	csel	w8, w8, w9, ne  // ne = any
     9b4:	ldur	x10, [x29, #-32]
     9b8:	str	w8, [x10, #8]
     9bc:	stur	xzr, [x29, #-64]
     9c0:	stur	wzr, [x29, #-68]
     9c4:	b	2dd4 <inflate+0x27d8>
     9c8:	ldur	w8, [x29, #-68]
     9cc:	cmp	w8, #0x10
     9d0:	b.cs	a28 <inflate+0x42c>  // b.hs, b.nlast
     9d4:	ldur	w8, [x29, #-52]
     9d8:	cbnz	w8, 9e0 <inflate+0x3e4>
     9dc:	b	2dd8 <inflate+0x27dc>
     9e0:	ldur	w8, [x29, #-52]
     9e4:	subs	w8, w8, #0x1
     9e8:	stur	w8, [x29, #-52]
     9ec:	ldur	x9, [x29, #-40]
     9f0:	add	x10, x9, #0x1
     9f4:	stur	x10, [x29, #-40]
     9f8:	ldrb	w8, [x9]
     9fc:	mov	w9, w8
     a00:	ldur	w8, [x29, #-68]
     a04:	mov	w10, w8
     a08:	lsl	x9, x9, x10
     a0c:	ldur	x10, [x29, #-64]
     a10:	add	x9, x10, x9
     a14:	stur	x9, [x29, #-64]
     a18:	ldur	w8, [x29, #-68]
     a1c:	add	w8, w8, #0x8
     a20:	stur	w8, [x29, #-68]
     a24:	b	9c8 <inflate+0x3cc>
     a28:	ldur	x8, [x29, #-64]
     a2c:	ldur	x9, [x29, #-32]
     a30:	str	w8, [x9, #24]
     a34:	ldur	x9, [x29, #-32]
     a38:	ldr	w8, [x9, #24]
     a3c:	and	w8, w8, #0xff
     a40:	cmp	w8, #0x8
     a44:	b.eq	a68 <inflate+0x46c>  // b.none
     a48:	ldur	x8, [x29, #-16]
     a4c:	adrp	x9, 0 <inflateResetKeep>
     a50:	add	x9, x9, #0x0
     a54:	str	x9, [x8, #48]
     a58:	ldur	x8, [x29, #-32]
     a5c:	mov	w10, #0x3f51                	// #16209
     a60:	str	w10, [x8, #8]
     a64:	b	2dd4 <inflate+0x27d8>
     a68:	ldur	x8, [x29, #-32]
     a6c:	ldr	w9, [x8, #24]
     a70:	and	w9, w9, #0xe000
     a74:	cbz	w9, a98 <inflate+0x49c>
     a78:	ldur	x8, [x29, #-16]
     a7c:	adrp	x9, 0 <inflateResetKeep>
     a80:	add	x9, x9, #0x0
     a84:	str	x9, [x8, #48]
     a88:	ldur	x8, [x29, #-32]
     a8c:	mov	w10, #0x3f51                	// #16209
     a90:	str	w10, [x8, #8]
     a94:	b	2dd4 <inflate+0x27d8>
     a98:	ldur	x8, [x29, #-32]
     a9c:	ldr	x8, [x8, #48]
     aa0:	cbz	x8, abc <inflate+0x4c0>
     aa4:	ldur	x8, [x29, #-64]
     aa8:	lsr	x8, x8, #8
     aac:	and	x8, x8, #0x1
     ab0:	ldur	x9, [x29, #-32]
     ab4:	ldr	x9, [x9, #48]
     ab8:	str	w8, [x9]
     abc:	ldur	x8, [x29, #-32]
     ac0:	ldr	w9, [x8, #24]
     ac4:	and	w9, w9, #0x200
     ac8:	cbz	w9, b10 <inflate+0x514>
     acc:	ldur	x8, [x29, #-32]
     ad0:	ldr	w9, [x8, #16]
     ad4:	and	w9, w9, #0x4
     ad8:	cbz	w9, b10 <inflate+0x514>
     adc:	ldur	x8, [x29, #-64]
     ae0:	add	x9, sp, #0x54
     ae4:	strb	w8, [sp, #84]
     ae8:	ldur	x10, [x29, #-64]
     aec:	lsr	x10, x10, #8
     af0:	strb	w10, [x9, #1]
     af4:	ldur	x11, [x29, #-32]
     af8:	ldr	x0, [x11, #32]
     afc:	mov	x1, x9
     b00:	mov	w2, #0x2                   	// #2
     b04:	bl	0 <crc32>
     b08:	ldur	x9, [x29, #-32]
     b0c:	str	x0, [x9, #32]
     b10:	stur	xzr, [x29, #-64]
     b14:	stur	wzr, [x29, #-68]
     b18:	ldur	x8, [x29, #-32]
     b1c:	mov	w9, #0x3f36                	// #16182
     b20:	str	w9, [x8, #8]
     b24:	ldur	w8, [x29, #-68]
     b28:	cmp	w8, #0x20
     b2c:	b.cs	b84 <inflate+0x588>  // b.hs, b.nlast
     b30:	ldur	w8, [x29, #-52]
     b34:	cbnz	w8, b3c <inflate+0x540>
     b38:	b	2dd8 <inflate+0x27dc>
     b3c:	ldur	w8, [x29, #-52]
     b40:	subs	w8, w8, #0x1
     b44:	stur	w8, [x29, #-52]
     b48:	ldur	x9, [x29, #-40]
     b4c:	add	x10, x9, #0x1
     b50:	stur	x10, [x29, #-40]
     b54:	ldrb	w8, [x9]
     b58:	mov	w9, w8
     b5c:	ldur	w8, [x29, #-68]
     b60:	mov	w10, w8
     b64:	lsl	x9, x9, x10
     b68:	ldur	x10, [x29, #-64]
     b6c:	add	x9, x10, x9
     b70:	stur	x9, [x29, #-64]
     b74:	ldur	w8, [x29, #-68]
     b78:	add	w8, w8, #0x8
     b7c:	stur	w8, [x29, #-68]
     b80:	b	b24 <inflate+0x528>
     b84:	ldur	x8, [x29, #-32]
     b88:	ldr	x8, [x8, #48]
     b8c:	cbz	x8, ba0 <inflate+0x5a4>
     b90:	ldur	x8, [x29, #-64]
     b94:	ldur	x9, [x29, #-32]
     b98:	ldr	x9, [x9, #48]
     b9c:	str	x8, [x9, #8]
     ba0:	ldur	x8, [x29, #-32]
     ba4:	ldr	w9, [x8, #24]
     ba8:	and	w9, w9, #0x200
     bac:	cbz	w9, c0c <inflate+0x610>
     bb0:	ldur	x8, [x29, #-32]
     bb4:	ldr	w9, [x8, #16]
     bb8:	and	w9, w9, #0x4
     bbc:	cbz	w9, c0c <inflate+0x610>
     bc0:	ldur	x8, [x29, #-64]
     bc4:	add	x9, sp, #0x54
     bc8:	strb	w8, [sp, #84]
     bcc:	ldur	x10, [x29, #-64]
     bd0:	lsr	x10, x10, #8
     bd4:	strb	w10, [x9, #1]
     bd8:	ldur	x11, [x29, #-64]
     bdc:	lsr	x11, x11, #16
     be0:	strb	w11, [x9, #2]
     be4:	ldur	x12, [x29, #-64]
     be8:	lsr	x12, x12, #24
     bec:	strb	w12, [x9, #3]
     bf0:	ldur	x13, [x29, #-32]
     bf4:	ldr	x0, [x13, #32]
     bf8:	mov	x1, x9
     bfc:	mov	w2, #0x4                   	// #4
     c00:	bl	0 <crc32>
     c04:	ldur	x9, [x29, #-32]
     c08:	str	x0, [x9, #32]
     c0c:	stur	xzr, [x29, #-64]
     c10:	stur	wzr, [x29, #-68]
     c14:	ldur	x8, [x29, #-32]
     c18:	mov	w9, #0x3f37                	// #16183
     c1c:	str	w9, [x8, #8]
     c20:	ldur	w8, [x29, #-68]
     c24:	cmp	w8, #0x10
     c28:	b.cs	c80 <inflate+0x684>  // b.hs, b.nlast
     c2c:	ldur	w8, [x29, #-52]
     c30:	cbnz	w8, c38 <inflate+0x63c>
     c34:	b	2dd8 <inflate+0x27dc>
     c38:	ldur	w8, [x29, #-52]
     c3c:	subs	w8, w8, #0x1
     c40:	stur	w8, [x29, #-52]
     c44:	ldur	x9, [x29, #-40]
     c48:	add	x10, x9, #0x1
     c4c:	stur	x10, [x29, #-40]
     c50:	ldrb	w8, [x9]
     c54:	mov	w9, w8
     c58:	ldur	w8, [x29, #-68]
     c5c:	mov	w10, w8
     c60:	lsl	x9, x9, x10
     c64:	ldur	x10, [x29, #-64]
     c68:	add	x9, x10, x9
     c6c:	stur	x9, [x29, #-64]
     c70:	ldur	w8, [x29, #-68]
     c74:	add	w8, w8, #0x8
     c78:	stur	w8, [x29, #-68]
     c7c:	b	c20 <inflate+0x624>
     c80:	ldur	x8, [x29, #-32]
     c84:	ldr	x8, [x8, #48]
     c88:	cbz	x8, cb4 <inflate+0x6b8>
     c8c:	ldur	x8, [x29, #-64]
     c90:	and	x8, x8, #0xff
     c94:	ldur	x9, [x29, #-32]
     c98:	ldr	x9, [x9, #48]
     c9c:	str	w8, [x9, #16]
     ca0:	ldur	x9, [x29, #-64]
     ca4:	lsr	x9, x9, #8
     ca8:	ldur	x10, [x29, #-32]
     cac:	ldr	x10, [x10, #48]
     cb0:	str	w9, [x10, #20]
     cb4:	ldur	x8, [x29, #-32]
     cb8:	ldr	w9, [x8, #24]
     cbc:	and	w9, w9, #0x200
     cc0:	cbz	w9, d08 <inflate+0x70c>
     cc4:	ldur	x8, [x29, #-32]
     cc8:	ldr	w9, [x8, #16]
     ccc:	and	w9, w9, #0x4
     cd0:	cbz	w9, d08 <inflate+0x70c>
     cd4:	ldur	x8, [x29, #-64]
     cd8:	add	x9, sp, #0x54
     cdc:	strb	w8, [sp, #84]
     ce0:	ldur	x10, [x29, #-64]
     ce4:	lsr	x10, x10, #8
     ce8:	strb	w10, [x9, #1]
     cec:	ldur	x11, [x29, #-32]
     cf0:	ldr	x0, [x11, #32]
     cf4:	mov	x1, x9
     cf8:	mov	w2, #0x2                   	// #2
     cfc:	bl	0 <crc32>
     d00:	ldur	x9, [x29, #-32]
     d04:	str	x0, [x9, #32]
     d08:	stur	xzr, [x29, #-64]
     d0c:	stur	wzr, [x29, #-68]
     d10:	ldur	x8, [x29, #-32]
     d14:	mov	w9, #0x3f38                	// #16184
     d18:	str	w9, [x8, #8]
     d1c:	ldur	x8, [x29, #-32]
     d20:	ldr	w9, [x8, #24]
     d24:	and	w9, w9, #0x400
     d28:	cbz	w9, e14 <inflate+0x818>
     d2c:	ldur	w8, [x29, #-68]
     d30:	cmp	w8, #0x10
     d34:	b.cs	d8c <inflate+0x790>  // b.hs, b.nlast
     d38:	ldur	w8, [x29, #-52]
     d3c:	cbnz	w8, d44 <inflate+0x748>
     d40:	b	2dd8 <inflate+0x27dc>
     d44:	ldur	w8, [x29, #-52]
     d48:	subs	w8, w8, #0x1
     d4c:	stur	w8, [x29, #-52]
     d50:	ldur	x9, [x29, #-40]
     d54:	add	x10, x9, #0x1
     d58:	stur	x10, [x29, #-40]
     d5c:	ldrb	w8, [x9]
     d60:	mov	w9, w8
     d64:	ldur	w8, [x29, #-68]
     d68:	mov	w10, w8
     d6c:	lsl	x9, x9, x10
     d70:	ldur	x10, [x29, #-64]
     d74:	add	x9, x10, x9
     d78:	stur	x9, [x29, #-64]
     d7c:	ldur	w8, [x29, #-68]
     d80:	add	w8, w8, #0x8
     d84:	stur	w8, [x29, #-68]
     d88:	b	d2c <inflate+0x730>
     d8c:	ldur	x8, [x29, #-64]
     d90:	ldur	x9, [x29, #-32]
     d94:	str	w8, [x9, #92]
     d98:	ldur	x9, [x29, #-32]
     d9c:	ldr	x9, [x9, #48]
     da0:	cbz	x9, db4 <inflate+0x7b8>
     da4:	ldur	x8, [x29, #-64]
     da8:	ldur	x9, [x29, #-32]
     dac:	ldr	x9, [x9, #48]
     db0:	str	w8, [x9, #32]
     db4:	ldur	x8, [x29, #-32]
     db8:	ldr	w9, [x8, #24]
     dbc:	and	w9, w9, #0x200
     dc0:	cbz	w9, e08 <inflate+0x80c>
     dc4:	ldur	x8, [x29, #-32]
     dc8:	ldr	w9, [x8, #16]
     dcc:	and	w9, w9, #0x4
     dd0:	cbz	w9, e08 <inflate+0x80c>
     dd4:	ldur	x8, [x29, #-64]
     dd8:	add	x9, sp, #0x54
     ddc:	strb	w8, [sp, #84]
     de0:	ldur	x10, [x29, #-64]
     de4:	lsr	x10, x10, #8
     de8:	strb	w10, [x9, #1]
     dec:	ldur	x11, [x29, #-32]
     df0:	ldr	x0, [x11, #32]
     df4:	mov	x1, x9
     df8:	mov	w2, #0x2                   	// #2
     dfc:	bl	0 <crc32>
     e00:	ldur	x9, [x29, #-32]
     e04:	str	x0, [x9, #32]
     e08:	stur	xzr, [x29, #-64]
     e0c:	stur	wzr, [x29, #-68]
     e10:	b	e30 <inflate+0x834>
     e14:	ldur	x8, [x29, #-32]
     e18:	ldr	x8, [x8, #48]
     e1c:	cbz	x8, e30 <inflate+0x834>
     e20:	ldur	x8, [x29, #-32]
     e24:	ldr	x8, [x8, #48]
     e28:	mov	x9, xzr
     e2c:	str	x9, [x8, #24]
     e30:	ldur	x8, [x29, #-32]
     e34:	mov	w9, #0x3f39                	// #16185
     e38:	str	w9, [x8, #8]
     e3c:	ldur	x8, [x29, #-32]
     e40:	ldr	w9, [x8, #24]
     e44:	and	w9, w9, #0x400
     e48:	cbz	w9, fb4 <inflate+0x9b8>
     e4c:	ldur	x8, [x29, #-32]
     e50:	ldr	w9, [x8, #92]
     e54:	stur	w9, [x29, #-80]
     e58:	ldur	w9, [x29, #-80]
     e5c:	ldur	w10, [x29, #-52]
     e60:	cmp	w9, w10
     e64:	b.ls	e70 <inflate+0x874>  // b.plast
     e68:	ldur	w8, [x29, #-52]
     e6c:	stur	w8, [x29, #-80]
     e70:	ldur	w8, [x29, #-80]
     e74:	cbz	w8, fa4 <inflate+0x9a8>
     e78:	ldur	x8, [x29, #-32]
     e7c:	ldr	x8, [x8, #48]
     e80:	cbz	x8, f30 <inflate+0x934>
     e84:	ldur	x8, [x29, #-32]
     e88:	ldr	x8, [x8, #48]
     e8c:	ldr	x8, [x8, #24]
     e90:	cbz	x8, f30 <inflate+0x934>
     e94:	ldur	x8, [x29, #-32]
     e98:	ldr	x8, [x8, #48]
     e9c:	ldr	w9, [x8, #32]
     ea0:	ldur	x8, [x29, #-32]
     ea4:	ldr	w10, [x8, #92]
     ea8:	subs	w9, w9, w10
     eac:	str	w9, [sp, #92]
     eb0:	ldur	x8, [x29, #-32]
     eb4:	ldr	x8, [x8, #48]
     eb8:	ldr	x8, [x8, #24]
     ebc:	ldr	w9, [sp, #92]
     ec0:	mov	w11, w9
     ec4:	add	x0, x8, x11
     ec8:	ldur	x1, [x29, #-40]
     ecc:	ldr	w9, [sp, #92]
     ed0:	ldur	w10, [x29, #-80]
     ed4:	add	w9, w9, w10
     ed8:	ldur	x8, [x29, #-32]
     edc:	ldr	x8, [x8, #48]
     ee0:	ldr	w10, [x8, #36]
     ee4:	cmp	w9, w10
     ee8:	str	x0, [sp, #64]
     eec:	str	x1, [sp, #56]
     ef0:	b.ls	f10 <inflate+0x914>  // b.plast
     ef4:	ldur	x8, [x29, #-32]
     ef8:	ldr	x8, [x8, #48]
     efc:	ldr	w9, [x8, #36]
     f00:	ldr	w10, [sp, #92]
     f04:	subs	w9, w9, w10
     f08:	str	w9, [sp, #52]
     f0c:	b	f18 <inflate+0x91c>
     f10:	ldur	w8, [x29, #-80]
     f14:	str	w8, [sp, #52]
     f18:	ldr	w8, [sp, #52]
     f1c:	mov	w9, w8
     f20:	ubfx	x2, x9, #0, #32
     f24:	ldr	x0, [sp, #64]
     f28:	ldr	x1, [sp, #56]
     f2c:	bl	0 <memcpy>
     f30:	ldur	x8, [x29, #-32]
     f34:	ldr	w9, [x8, #24]
     f38:	and	w9, w9, #0x200
     f3c:	cbz	w9, f6c <inflate+0x970>
     f40:	ldur	x8, [x29, #-32]
     f44:	ldr	w9, [x8, #16]
     f48:	and	w9, w9, #0x4
     f4c:	cbz	w9, f6c <inflate+0x970>
     f50:	ldur	x8, [x29, #-32]
     f54:	ldr	x0, [x8, #32]
     f58:	ldur	x1, [x29, #-40]
     f5c:	ldur	w2, [x29, #-80]
     f60:	bl	0 <crc32>
     f64:	ldur	x8, [x29, #-32]
     f68:	str	x0, [x8, #32]
     f6c:	ldur	w8, [x29, #-80]
     f70:	ldur	w9, [x29, #-52]
     f74:	subs	w8, w9, w8
     f78:	stur	w8, [x29, #-52]
     f7c:	ldur	w8, [x29, #-80]
     f80:	mov	w10, w8
     f84:	ldur	x11, [x29, #-40]
     f88:	add	x10, x11, x10
     f8c:	stur	x10, [x29, #-40]
     f90:	ldur	w8, [x29, #-80]
     f94:	ldur	x10, [x29, #-32]
     f98:	ldr	w9, [x10, #92]
     f9c:	subs	w8, w9, w8
     fa0:	str	w8, [x10, #92]
     fa4:	ldur	x8, [x29, #-32]
     fa8:	ldr	w9, [x8, #92]
     fac:	cbz	w9, fb4 <inflate+0x9b8>
     fb0:	b	2dd8 <inflate+0x27dc>
     fb4:	ldur	x8, [x29, #-32]
     fb8:	str	wzr, [x8, #92]
     fbc:	ldur	x8, [x29, #-32]
     fc0:	mov	w9, #0x3f3a                	// #16186
     fc4:	str	w9, [x8, #8]
     fc8:	ldur	x8, [x29, #-32]
     fcc:	ldr	w9, [x8, #24]
     fd0:	and	w9, w9, #0x800
     fd4:	cbz	w9, 110c <inflate+0xb10>
     fd8:	ldur	w8, [x29, #-52]
     fdc:	cbnz	w8, fe4 <inflate+0x9e8>
     fe0:	b	2dd8 <inflate+0x27dc>
     fe4:	stur	wzr, [x29, #-80]
     fe8:	ldur	x8, [x29, #-40]
     fec:	ldur	w9, [x29, #-80]
     ff0:	mov	w10, w9
     ff4:	mov	w9, w10
     ff8:	add	w9, w9, #0x1
     ffc:	stur	w9, [x29, #-80]
    1000:	ldrb	w9, [x8, x10]
    1004:	str	w9, [sp, #92]
    1008:	ldur	x8, [x29, #-32]
    100c:	ldr	x8, [x8, #48]
    1010:	cbz	x8, 1070 <inflate+0xa74>
    1014:	ldur	x8, [x29, #-32]
    1018:	ldr	x8, [x8, #48]
    101c:	ldr	x8, [x8, #40]
    1020:	cbz	x8, 1070 <inflate+0xa74>
    1024:	ldur	x8, [x29, #-32]
    1028:	ldr	w9, [x8, #92]
    102c:	ldur	x8, [x29, #-32]
    1030:	ldr	x8, [x8, #48]
    1034:	ldr	w10, [x8, #48]
    1038:	cmp	w9, w10
    103c:	b.cs	1070 <inflate+0xa74>  // b.hs, b.nlast
    1040:	ldr	w8, [sp, #92]
    1044:	ldur	x9, [x29, #-32]
    1048:	ldr	x9, [x9, #48]
    104c:	ldr	x9, [x9, #40]
    1050:	ldur	x10, [x29, #-32]
    1054:	ldr	w11, [x10, #92]
    1058:	mov	w12, w11
    105c:	mov	w11, w12
    1060:	add	w11, w11, #0x1
    1064:	str	w11, [x10, #92]
    1068:	add	x9, x9, x12
    106c:	strb	w8, [x9]
    1070:	ldr	w8, [sp, #92]
    1074:	mov	w9, #0x0                   	// #0
    1078:	str	w9, [sp, #48]
    107c:	cbz	w8, 1094 <inflate+0xa98>
    1080:	ldur	w8, [x29, #-80]
    1084:	ldur	w9, [x29, #-52]
    1088:	cmp	w8, w9
    108c:	cset	w8, cc  // cc = lo, ul, last
    1090:	str	w8, [sp, #48]
    1094:	ldr	w8, [sp, #48]
    1098:	tbnz	w8, #0, fe8 <inflate+0x9ec>
    109c:	ldur	x8, [x29, #-32]
    10a0:	ldr	w9, [x8, #24]
    10a4:	and	w9, w9, #0x200
    10a8:	cbz	w9, 10d8 <inflate+0xadc>
    10ac:	ldur	x8, [x29, #-32]
    10b0:	ldr	w9, [x8, #16]
    10b4:	and	w9, w9, #0x4
    10b8:	cbz	w9, 10d8 <inflate+0xadc>
    10bc:	ldur	x8, [x29, #-32]
    10c0:	ldr	x0, [x8, #32]
    10c4:	ldur	x1, [x29, #-40]
    10c8:	ldur	w2, [x29, #-80]
    10cc:	bl	0 <crc32>
    10d0:	ldur	x8, [x29, #-32]
    10d4:	str	x0, [x8, #32]
    10d8:	ldur	w8, [x29, #-80]
    10dc:	ldur	w9, [x29, #-52]
    10e0:	subs	w8, w9, w8
    10e4:	stur	w8, [x29, #-52]
    10e8:	ldur	w8, [x29, #-80]
    10ec:	mov	w10, w8
    10f0:	ldur	x11, [x29, #-40]
    10f4:	add	x10, x11, x10
    10f8:	stur	x10, [x29, #-40]
    10fc:	ldr	w8, [sp, #92]
    1100:	cbz	w8, 1108 <inflate+0xb0c>
    1104:	b	2dd8 <inflate+0x27dc>
    1108:	b	1128 <inflate+0xb2c>
    110c:	ldur	x8, [x29, #-32]
    1110:	ldr	x8, [x8, #48]
    1114:	cbz	x8, 1128 <inflate+0xb2c>
    1118:	ldur	x8, [x29, #-32]
    111c:	ldr	x8, [x8, #48]
    1120:	mov	x9, xzr
    1124:	str	x9, [x8, #40]
    1128:	ldur	x8, [x29, #-32]
    112c:	str	wzr, [x8, #92]
    1130:	ldur	x8, [x29, #-32]
    1134:	mov	w9, #0x3f3b                	// #16187
    1138:	str	w9, [x8, #8]
    113c:	ldur	x8, [x29, #-32]
    1140:	ldr	w9, [x8, #24]
    1144:	and	w9, w9, #0x1000
    1148:	cbz	w9, 1280 <inflate+0xc84>
    114c:	ldur	w8, [x29, #-52]
    1150:	cbnz	w8, 1158 <inflate+0xb5c>
    1154:	b	2dd8 <inflate+0x27dc>
    1158:	stur	wzr, [x29, #-80]
    115c:	ldur	x8, [x29, #-40]
    1160:	ldur	w9, [x29, #-80]
    1164:	mov	w10, w9
    1168:	mov	w9, w10
    116c:	add	w9, w9, #0x1
    1170:	stur	w9, [x29, #-80]
    1174:	ldrb	w9, [x8, x10]
    1178:	str	w9, [sp, #92]
    117c:	ldur	x8, [x29, #-32]
    1180:	ldr	x8, [x8, #48]
    1184:	cbz	x8, 11e4 <inflate+0xbe8>
    1188:	ldur	x8, [x29, #-32]
    118c:	ldr	x8, [x8, #48]
    1190:	ldr	x8, [x8, #56]
    1194:	cbz	x8, 11e4 <inflate+0xbe8>
    1198:	ldur	x8, [x29, #-32]
    119c:	ldr	w9, [x8, #92]
    11a0:	ldur	x8, [x29, #-32]
    11a4:	ldr	x8, [x8, #48]
    11a8:	ldr	w10, [x8, #64]
    11ac:	cmp	w9, w10
    11b0:	b.cs	11e4 <inflate+0xbe8>  // b.hs, b.nlast
    11b4:	ldr	w8, [sp, #92]
    11b8:	ldur	x9, [x29, #-32]
    11bc:	ldr	x9, [x9, #48]
    11c0:	ldr	x9, [x9, #56]
    11c4:	ldur	x10, [x29, #-32]
    11c8:	ldr	w11, [x10, #92]
    11cc:	mov	w12, w11
    11d0:	mov	w11, w12
    11d4:	add	w11, w11, #0x1
    11d8:	str	w11, [x10, #92]
    11dc:	add	x9, x9, x12
    11e0:	strb	w8, [x9]
    11e4:	ldr	w8, [sp, #92]
    11e8:	mov	w9, #0x0                   	// #0
    11ec:	str	w9, [sp, #44]
    11f0:	cbz	w8, 1208 <inflate+0xc0c>
    11f4:	ldur	w8, [x29, #-80]
    11f8:	ldur	w9, [x29, #-52]
    11fc:	cmp	w8, w9
    1200:	cset	w8, cc  // cc = lo, ul, last
    1204:	str	w8, [sp, #44]
    1208:	ldr	w8, [sp, #44]
    120c:	tbnz	w8, #0, 115c <inflate+0xb60>
    1210:	ldur	x8, [x29, #-32]
    1214:	ldr	w9, [x8, #24]
    1218:	and	w9, w9, #0x200
    121c:	cbz	w9, 124c <inflate+0xc50>
    1220:	ldur	x8, [x29, #-32]
    1224:	ldr	w9, [x8, #16]
    1228:	and	w9, w9, #0x4
    122c:	cbz	w9, 124c <inflate+0xc50>
    1230:	ldur	x8, [x29, #-32]
    1234:	ldr	x0, [x8, #32]
    1238:	ldur	x1, [x29, #-40]
    123c:	ldur	w2, [x29, #-80]
    1240:	bl	0 <crc32>
    1244:	ldur	x8, [x29, #-32]
    1248:	str	x0, [x8, #32]
    124c:	ldur	w8, [x29, #-80]
    1250:	ldur	w9, [x29, #-52]
    1254:	subs	w8, w9, w8
    1258:	stur	w8, [x29, #-52]
    125c:	ldur	w8, [x29, #-80]
    1260:	mov	w10, w8
    1264:	ldur	x11, [x29, #-40]
    1268:	add	x10, x11, x10
    126c:	stur	x10, [x29, #-40]
    1270:	ldr	w8, [sp, #92]
    1274:	cbz	w8, 127c <inflate+0xc80>
    1278:	b	2dd8 <inflate+0x27dc>
    127c:	b	129c <inflate+0xca0>
    1280:	ldur	x8, [x29, #-32]
    1284:	ldr	x8, [x8, #48]
    1288:	cbz	x8, 129c <inflate+0xca0>
    128c:	ldur	x8, [x29, #-32]
    1290:	ldr	x8, [x8, #48]
    1294:	mov	x9, xzr
    1298:	str	x9, [x8, #56]
    129c:	ldur	x8, [x29, #-32]
    12a0:	mov	w9, #0x3f3c                	// #16188
    12a4:	str	w9, [x8, #8]
    12a8:	ldur	x8, [x29, #-32]
    12ac:	ldr	w9, [x8, #24]
    12b0:	and	w9, w9, #0x200
    12b4:	cbz	w9, 1368 <inflate+0xd6c>
    12b8:	ldur	w8, [x29, #-68]
    12bc:	cmp	w8, #0x10
    12c0:	b.cs	1318 <inflate+0xd1c>  // b.hs, b.nlast
    12c4:	ldur	w8, [x29, #-52]
    12c8:	cbnz	w8, 12d0 <inflate+0xcd4>
    12cc:	b	2dd8 <inflate+0x27dc>
    12d0:	ldur	w8, [x29, #-52]
    12d4:	subs	w8, w8, #0x1
    12d8:	stur	w8, [x29, #-52]
    12dc:	ldur	x9, [x29, #-40]
    12e0:	add	x10, x9, #0x1
    12e4:	stur	x10, [x29, #-40]
    12e8:	ldrb	w8, [x9]
    12ec:	mov	w9, w8
    12f0:	ldur	w8, [x29, #-68]
    12f4:	mov	w10, w8
    12f8:	lsl	x9, x9, x10
    12fc:	ldur	x10, [x29, #-64]
    1300:	add	x9, x10, x9
    1304:	stur	x9, [x29, #-64]
    1308:	ldur	w8, [x29, #-68]
    130c:	add	w8, w8, #0x8
    1310:	stur	w8, [x29, #-68]
    1314:	b	12b8 <inflate+0xcbc>
    1318:	ldur	x8, [x29, #-32]
    131c:	ldr	w9, [x8, #16]
    1320:	and	w9, w9, #0x4
    1324:	cbz	w9, 1360 <inflate+0xd64>
    1328:	ldur	x8, [x29, #-64]
    132c:	ldur	x9, [x29, #-32]
    1330:	ldr	x9, [x9, #32]
    1334:	and	x9, x9, #0xffff
    1338:	cmp	x8, x9
    133c:	b.eq	1360 <inflate+0xd64>  // b.none
    1340:	ldur	x8, [x29, #-16]
    1344:	adrp	x9, 0 <inflateResetKeep>
    1348:	add	x9, x9, #0x0
    134c:	str	x9, [x8, #48]
    1350:	ldur	x8, [x29, #-32]
    1354:	mov	w10, #0x3f51                	// #16209
    1358:	str	w10, [x8, #8]
    135c:	b	2dd4 <inflate+0x27d8>
    1360:	stur	xzr, [x29, #-64]
    1364:	stur	wzr, [x29, #-68]
    1368:	ldur	x8, [x29, #-32]
    136c:	ldr	x8, [x8, #48]
    1370:	cbz	x8, 13a0 <inflate+0xda4>
    1374:	ldur	x8, [x29, #-32]
    1378:	ldr	w9, [x8, #24]
    137c:	asr	w9, w9, #9
    1380:	mov	w10, #0x1                   	// #1
    1384:	and	w9, w9, #0x1
    1388:	ldur	x8, [x29, #-32]
    138c:	ldr	x8, [x8, #48]
    1390:	str	w9, [x8, #68]
    1394:	ldur	x8, [x29, #-32]
    1398:	ldr	x8, [x8, #48]
    139c:	str	w10, [x8, #72]
    13a0:	mov	x8, xzr
    13a4:	mov	x0, x8
    13a8:	mov	x1, x8
    13ac:	mov	w9, wzr
    13b0:	mov	w2, w9
    13b4:	bl	0 <crc32>
    13b8:	ldur	x8, [x29, #-32]
    13bc:	str	x0, [x8, #32]
    13c0:	ldur	x8, [x29, #-16]
    13c4:	str	x0, [x8, #96]
    13c8:	ldur	x8, [x29, #-32]
    13cc:	mov	w9, #0x3f3f                	// #16191
    13d0:	str	w9, [x8, #8]
    13d4:	b	2dd4 <inflate+0x27d8>
    13d8:	ldur	w8, [x29, #-68]
    13dc:	cmp	w8, #0x20
    13e0:	b.cs	1438 <inflate+0xe3c>  // b.hs, b.nlast
    13e4:	ldur	w8, [x29, #-52]
    13e8:	cbnz	w8, 13f0 <inflate+0xdf4>
    13ec:	b	2dd8 <inflate+0x27dc>
    13f0:	ldur	w8, [x29, #-52]
    13f4:	subs	w8, w8, #0x1
    13f8:	stur	w8, [x29, #-52]
    13fc:	ldur	x9, [x29, #-40]
    1400:	add	x10, x9, #0x1
    1404:	stur	x10, [x29, #-40]
    1408:	ldrb	w8, [x9]
    140c:	mov	w9, w8
    1410:	ldur	w8, [x29, #-68]
    1414:	mov	w10, w8
    1418:	lsl	x9, x9, x10
    141c:	ldur	x10, [x29, #-64]
    1420:	add	x9, x10, x9
    1424:	stur	x9, [x29, #-64]
    1428:	ldur	w8, [x29, #-68]
    142c:	add	w8, w8, #0x8
    1430:	stur	w8, [x29, #-68]
    1434:	b	13d8 <inflate+0xddc>
    1438:	ldur	x8, [x29, #-64]
    143c:	lsr	x8, x8, #24
    1440:	ldur	x9, [x29, #-64]
    1444:	lsr	x9, x9, #8
    1448:	and	x9, x9, #0xff00
    144c:	add	x9, x9, w8, uxtb
    1450:	ldur	x10, [x29, #-64]
    1454:	and	x10, x10, #0xff00
    1458:	add	x9, x9, x10, lsl #8
    145c:	ldur	x10, [x29, #-64]
    1460:	and	x10, x10, #0xff
    1464:	add	x9, x9, x10, lsl #24
    1468:	ldur	x10, [x29, #-32]
    146c:	str	x9, [x10, #32]
    1470:	ldur	x10, [x29, #-16]
    1474:	str	x9, [x10, #96]
    1478:	stur	xzr, [x29, #-64]
    147c:	stur	wzr, [x29, #-68]
    1480:	ldur	x8, [x29, #-32]
    1484:	mov	w9, #0x3f3e                	// #16190
    1488:	str	w9, [x8, #8]
    148c:	ldur	x8, [x29, #-32]
    1490:	ldr	w9, [x8, #20]
    1494:	cbnz	w9, 14ec <inflate+0xef0>
    1498:	ldur	x8, [x29, #-48]
    149c:	ldur	x9, [x29, #-16]
    14a0:	str	x8, [x9, #24]
    14a4:	ldur	w10, [x29, #-56]
    14a8:	ldur	x8, [x29, #-16]
    14ac:	str	w10, [x8, #32]
    14b0:	ldur	x8, [x29, #-40]
    14b4:	ldur	x9, [x29, #-16]
    14b8:	str	x8, [x9]
    14bc:	ldur	w10, [x29, #-52]
    14c0:	ldur	x8, [x29, #-16]
    14c4:	str	w10, [x8, #8]
    14c8:	ldur	x8, [x29, #-64]
    14cc:	ldur	x9, [x29, #-32]
    14d0:	str	x8, [x9, #80]
    14d4:	ldur	w10, [x29, #-68]
    14d8:	ldur	x8, [x29, #-32]
    14dc:	str	w10, [x8, #88]
    14e0:	mov	w8, #0x2                   	// #2
    14e4:	stur	w8, [x29, #-4]
    14e8:	b	308c <inflate+0x2a90>
    14ec:	mov	x8, xzr
    14f0:	mov	x0, x8
    14f4:	mov	x1, x8
    14f8:	mov	w9, wzr
    14fc:	mov	w2, w9
    1500:	bl	0 <adler32>
    1504:	ldur	x8, [x29, #-32]
    1508:	str	x0, [x8, #32]
    150c:	ldur	x8, [x29, #-16]
    1510:	str	x0, [x8, #96]
    1514:	ldur	x8, [x29, #-32]
    1518:	mov	w9, #0x3f3f                	// #16191
    151c:	str	w9, [x8, #8]
    1520:	ldur	w8, [x29, #-20]
    1524:	cmp	w8, #0x5
    1528:	b.eq	1538 <inflate+0xf3c>  // b.none
    152c:	ldur	w8, [x29, #-20]
    1530:	cmp	w8, #0x6
    1534:	b.ne	153c <inflate+0xf40>  // b.any
    1538:	b	2dd8 <inflate+0x27dc>
    153c:	ldur	x8, [x29, #-32]
    1540:	ldr	w9, [x8, #12]
    1544:	cbz	w9, 1584 <inflate+0xf88>
    1548:	ldur	w8, [x29, #-68]
    154c:	and	w8, w8, #0x7
    1550:	ldur	x9, [x29, #-64]
    1554:	mov	w10, w8
    1558:	lsr	x9, x9, x10
    155c:	stur	x9, [x29, #-64]
    1560:	ldur	w8, [x29, #-68]
    1564:	and	w8, w8, #0x7
    1568:	ldur	w11, [x29, #-68]
    156c:	subs	w8, w11, w8
    1570:	stur	w8, [x29, #-68]
    1574:	ldur	x8, [x29, #-32]
    1578:	mov	w9, #0x3f4e                	// #16206
    157c:	str	w9, [x8, #8]
    1580:	b	2dd4 <inflate+0x27d8>
    1584:	ldur	w8, [x29, #-68]
    1588:	cmp	w8, #0x3
    158c:	b.cs	15e4 <inflate+0xfe8>  // b.hs, b.nlast
    1590:	ldur	w8, [x29, #-52]
    1594:	cbnz	w8, 159c <inflate+0xfa0>
    1598:	b	2dd8 <inflate+0x27dc>
    159c:	ldur	w8, [x29, #-52]
    15a0:	subs	w8, w8, #0x1
    15a4:	stur	w8, [x29, #-52]
    15a8:	ldur	x9, [x29, #-40]
    15ac:	add	x10, x9, #0x1
    15b0:	stur	x10, [x29, #-40]
    15b4:	ldrb	w8, [x9]
    15b8:	mov	w9, w8
    15bc:	ldur	w8, [x29, #-68]
    15c0:	mov	w10, w8
    15c4:	lsl	x9, x9, x10
    15c8:	ldur	x10, [x29, #-64]
    15cc:	add	x9, x10, x9
    15d0:	stur	x9, [x29, #-64]
    15d4:	ldur	w8, [x29, #-68]
    15d8:	add	w8, w8, #0x8
    15dc:	stur	w8, [x29, #-68]
    15e0:	b	1584 <inflate+0xf88>
    15e4:	ldur	x8, [x29, #-64]
    15e8:	and	w8, w8, #0x1
    15ec:	ldur	x9, [x29, #-32]
    15f0:	str	w8, [x9, #12]
    15f4:	ldur	x8, [x29, #-64]
    15f8:	lsr	x8, x8, #1
    15fc:	stur	x8, [x29, #-64]
    1600:	ldur	w9, [x29, #-68]
    1604:	subs	w9, w9, #0x1
    1608:	stur	w9, [x29, #-68]
    160c:	ldur	x8, [x29, #-64]
    1610:	and	w8, w8, #0x3
    1614:	subs	w8, w8, #0x0
    1618:	mov	w9, w8
    161c:	ubfx	x9, x9, #0, #32
    1620:	cmp	x9, #0x3
    1624:	str	x9, [sp, #32]
    1628:	b.hi	16c0 <inflate+0x10c4>  // b.pmore
    162c:	adrp	x8, 0 <inflateResetKeep>
    1630:	add	x8, x8, #0x0
    1634:	ldr	x11, [sp, #32]
    1638:	ldrsw	x10, [x8, x11, lsl #2]
    163c:	add	x9, x8, x10
    1640:	br	x9
    1644:	ldur	x8, [x29, #-32]
    1648:	mov	w9, #0x3f41                	// #16193
    164c:	str	w9, [x8, #8]
    1650:	b	16c0 <inflate+0x10c4>
    1654:	ldur	x0, [x29, #-32]
    1658:	bl	309c <fixedtables>
    165c:	ldur	x8, [x29, #-32]
    1660:	mov	w9, #0x3f47                	// #16199
    1664:	str	w9, [x8, #8]
    1668:	ldur	w9, [x29, #-20]
    166c:	cmp	w9, #0x6
    1670:	b.ne	1690 <inflate+0x1094>  // b.any
    1674:	ldur	x8, [x29, #-64]
    1678:	lsr	x8, x8, #2
    167c:	stur	x8, [x29, #-64]
    1680:	ldur	w9, [x29, #-68]
    1684:	subs	w9, w9, #0x2
    1688:	stur	w9, [x29, #-68]
    168c:	b	2dd8 <inflate+0x27dc>
    1690:	b	16c0 <inflate+0x10c4>
    1694:	ldur	x8, [x29, #-32]
    1698:	mov	w9, #0x3f44                	// #16196
    169c:	str	w9, [x8, #8]
    16a0:	b	16c0 <inflate+0x10c4>
    16a4:	ldur	x8, [x29, #-16]
    16a8:	adrp	x9, 0 <inflateResetKeep>
    16ac:	add	x9, x9, #0x0
    16b0:	str	x9, [x8, #48]
    16b4:	ldur	x8, [x29, #-32]
    16b8:	mov	w10, #0x3f51                	// #16209
    16bc:	str	w10, [x8, #8]
    16c0:	ldur	x8, [x29, #-64]
    16c4:	lsr	x8, x8, #2
    16c8:	stur	x8, [x29, #-64]
    16cc:	ldur	w9, [x29, #-68]
    16d0:	subs	w9, w9, #0x2
    16d4:	stur	w9, [x29, #-68]
    16d8:	b	2dd4 <inflate+0x27d8>
    16dc:	ldur	w8, [x29, #-68]
    16e0:	and	w8, w8, #0x7
    16e4:	ldur	x9, [x29, #-64]
    16e8:	mov	w10, w8
    16ec:	lsr	x9, x9, x10
    16f0:	stur	x9, [x29, #-64]
    16f4:	ldur	w8, [x29, #-68]
    16f8:	and	w8, w8, #0x7
    16fc:	ldur	w11, [x29, #-68]
    1700:	subs	w8, w11, w8
    1704:	stur	w8, [x29, #-68]
    1708:	ldur	w8, [x29, #-68]
    170c:	cmp	w8, #0x20
    1710:	b.cs	1768 <inflate+0x116c>  // b.hs, b.nlast
    1714:	ldur	w8, [x29, #-52]
    1718:	cbnz	w8, 1720 <inflate+0x1124>
    171c:	b	2dd8 <inflate+0x27dc>
    1720:	ldur	w8, [x29, #-52]
    1724:	subs	w8, w8, #0x1
    1728:	stur	w8, [x29, #-52]
    172c:	ldur	x9, [x29, #-40]
    1730:	add	x10, x9, #0x1
    1734:	stur	x10, [x29, #-40]
    1738:	ldrb	w8, [x9]
    173c:	mov	w9, w8
    1740:	ldur	w8, [x29, #-68]
    1744:	mov	w10, w8
    1748:	lsl	x9, x9, x10
    174c:	ldur	x10, [x29, #-64]
    1750:	add	x9, x10, x9
    1754:	stur	x9, [x29, #-64]
    1758:	ldur	w8, [x29, #-68]
    175c:	add	w8, w8, #0x8
    1760:	stur	w8, [x29, #-68]
    1764:	b	1708 <inflate+0x110c>
    1768:	ldur	x8, [x29, #-64]
    176c:	and	x8, x8, #0xffff
    1770:	ldur	x9, [x29, #-64]
    1774:	lsr	x9, x9, #16
    1778:	eor	x9, x9, #0xffff
    177c:	cmp	x8, x9
    1780:	b.eq	17a4 <inflate+0x11a8>  // b.none
    1784:	ldur	x8, [x29, #-16]
    1788:	adrp	x9, 0 <inflateResetKeep>
    178c:	add	x9, x9, #0x0
    1790:	str	x9, [x8, #48]
    1794:	ldur	x8, [x29, #-32]
    1798:	mov	w10, #0x3f51                	// #16209
    179c:	str	w10, [x8, #8]
    17a0:	b	2dd4 <inflate+0x27d8>
    17a4:	ldur	x8, [x29, #-64]
    17a8:	and	w8, w8, #0xffff
    17ac:	ldur	x9, [x29, #-32]
    17b0:	str	w8, [x9, #92]
    17b4:	stur	xzr, [x29, #-64]
    17b8:	stur	wzr, [x29, #-68]
    17bc:	ldur	x8, [x29, #-32]
    17c0:	mov	w9, #0x3f42                	// #16194
    17c4:	str	w9, [x8, #8]
    17c8:	ldur	w9, [x29, #-20]
    17cc:	cmp	w9, #0x6
    17d0:	b.ne	17d8 <inflate+0x11dc>  // b.any
    17d4:	b	2dd8 <inflate+0x27dc>
    17d8:	ldur	x8, [x29, #-32]
    17dc:	mov	w9, #0x3f43                	// #16195
    17e0:	str	w9, [x8, #8]
    17e4:	ldur	x8, [x29, #-32]
    17e8:	ldr	w9, [x8, #92]
    17ec:	stur	w9, [x29, #-80]
    17f0:	ldur	w9, [x29, #-80]
    17f4:	cbz	w9, 18a8 <inflate+0x12ac>
    17f8:	ldur	w8, [x29, #-80]
    17fc:	ldur	w9, [x29, #-52]
    1800:	cmp	w8, w9
    1804:	b.ls	1810 <inflate+0x1214>  // b.plast
    1808:	ldur	w8, [x29, #-52]
    180c:	stur	w8, [x29, #-80]
    1810:	ldur	w8, [x29, #-80]
    1814:	ldur	w9, [x29, #-56]
    1818:	cmp	w8, w9
    181c:	b.ls	1828 <inflate+0x122c>  // b.plast
    1820:	ldur	w8, [x29, #-56]
    1824:	stur	w8, [x29, #-80]
    1828:	ldur	w8, [x29, #-80]
    182c:	cbnz	w8, 1834 <inflate+0x1238>
    1830:	b	2dd8 <inflate+0x27dc>
    1834:	ldur	x0, [x29, #-48]
    1838:	ldur	x1, [x29, #-40]
    183c:	ldur	w8, [x29, #-80]
    1840:	mov	w2, w8
    1844:	bl	0 <memcpy>
    1848:	ldur	w8, [x29, #-80]
    184c:	ldur	w9, [x29, #-52]
    1850:	subs	w8, w9, w8
    1854:	stur	w8, [x29, #-52]
    1858:	ldur	w8, [x29, #-80]
    185c:	mov	w10, w8
    1860:	ldur	x11, [x29, #-40]
    1864:	add	x10, x11, x10
    1868:	stur	x10, [x29, #-40]
    186c:	ldur	w8, [x29, #-80]
    1870:	ldur	w9, [x29, #-56]
    1874:	subs	w8, w9, w8
    1878:	stur	w8, [x29, #-56]
    187c:	ldur	w8, [x29, #-80]
    1880:	mov	w10, w8
    1884:	ldur	x11, [x29, #-48]
    1888:	add	x10, x11, x10
    188c:	stur	x10, [x29, #-48]
    1890:	ldur	w8, [x29, #-80]
    1894:	ldur	x10, [x29, #-32]
    1898:	ldr	w9, [x10, #92]
    189c:	subs	w8, w9, w8
    18a0:	str	w8, [x10, #92]
    18a4:	b	2dd4 <inflate+0x27d8>
    18a8:	ldur	x8, [x29, #-32]
    18ac:	mov	w9, #0x3f3f                	// #16191
    18b0:	str	w9, [x8, #8]
    18b4:	b	2dd4 <inflate+0x27d8>
    18b8:	ldur	w8, [x29, #-68]
    18bc:	cmp	w8, #0xe
    18c0:	b.cs	1918 <inflate+0x131c>  // b.hs, b.nlast
    18c4:	ldur	w8, [x29, #-52]
    18c8:	cbnz	w8, 18d0 <inflate+0x12d4>
    18cc:	b	2dd8 <inflate+0x27dc>
    18d0:	ldur	w8, [x29, #-52]
    18d4:	subs	w8, w8, #0x1
    18d8:	stur	w8, [x29, #-52]
    18dc:	ldur	x9, [x29, #-40]
    18e0:	add	x10, x9, #0x1
    18e4:	stur	x10, [x29, #-40]
    18e8:	ldrb	w8, [x9]
    18ec:	mov	w9, w8
    18f0:	ldur	w8, [x29, #-68]
    18f4:	mov	w10, w8
    18f8:	lsl	x9, x9, x10
    18fc:	ldur	x10, [x29, #-64]
    1900:	add	x9, x10, x9
    1904:	stur	x9, [x29, #-64]
    1908:	ldur	w8, [x29, #-68]
    190c:	add	w8, w8, #0x8
    1910:	stur	w8, [x29, #-68]
    1914:	b	18b8 <inflate+0x12bc>
    1918:	ldur	x8, [x29, #-64]
    191c:	and	w8, w8, #0x1f
    1920:	add	w8, w8, #0x101
    1924:	ldur	x9, [x29, #-32]
    1928:	str	w8, [x9, #132]
    192c:	ldur	x8, [x29, #-64]
    1930:	lsr	x8, x8, #5
    1934:	stur	x8, [x29, #-64]
    1938:	ldur	w9, [x29, #-68]
    193c:	subs	w9, w9, #0x5
    1940:	stur	w9, [x29, #-68]
    1944:	ldur	x8, [x29, #-64]
    1948:	and	w8, w8, #0x1f
    194c:	add	w8, w8, #0x1
    1950:	ldur	x9, [x29, #-32]
    1954:	str	w8, [x9, #136]
    1958:	ldur	x8, [x29, #-64]
    195c:	lsr	x8, x8, #5
    1960:	stur	x8, [x29, #-64]
    1964:	ldur	w9, [x29, #-68]
    1968:	subs	w9, w9, #0x5
    196c:	stur	w9, [x29, #-68]
    1970:	ldur	x8, [x29, #-64]
    1974:	and	w8, w8, #0xf
    1978:	add	w8, w8, #0x4
    197c:	ldur	x9, [x29, #-32]
    1980:	str	w8, [x9, #128]
    1984:	ldur	x8, [x29, #-64]
    1988:	lsr	x8, x8, #4
    198c:	stur	x8, [x29, #-64]
    1990:	ldur	w9, [x29, #-68]
    1994:	subs	w9, w9, #0x4
    1998:	stur	w9, [x29, #-68]
    199c:	ldur	x8, [x29, #-32]
    19a0:	ldr	w9, [x8, #132]
    19a4:	cmp	w9, #0x11e
    19a8:	b.hi	19bc <inflate+0x13c0>  // b.pmore
    19ac:	ldur	x8, [x29, #-32]
    19b0:	ldr	w9, [x8, #136]
    19b4:	cmp	w9, #0x1e
    19b8:	b.ls	19dc <inflate+0x13e0>  // b.plast
    19bc:	ldur	x8, [x29, #-16]
    19c0:	adrp	x9, 0 <inflateResetKeep>
    19c4:	add	x9, x9, #0x0
    19c8:	str	x9, [x8, #48]
    19cc:	ldur	x8, [x29, #-32]
    19d0:	mov	w10, #0x3f51                	// #16209
    19d4:	str	w10, [x8, #8]
    19d8:	b	2dd4 <inflate+0x27d8>
    19dc:	ldur	x8, [x29, #-32]
    19e0:	str	wzr, [x8, #140]
    19e4:	ldur	x8, [x29, #-32]
    19e8:	mov	w9, #0x3f45                	// #16197
    19ec:	str	w9, [x8, #8]
    19f0:	ldur	x8, [x29, #-32]
    19f4:	ldr	w9, [x8, #140]
    19f8:	ldur	x8, [x29, #-32]
    19fc:	ldr	w10, [x8, #128]
    1a00:	cmp	w9, w10
    1a04:	b.cs	1acc <inflate+0x14d0>  // b.hs, b.nlast
    1a08:	ldur	w8, [x29, #-68]
    1a0c:	cmp	w8, #0x3
    1a10:	b.cs	1a68 <inflate+0x146c>  // b.hs, b.nlast
    1a14:	ldur	w8, [x29, #-52]
    1a18:	cbnz	w8, 1a20 <inflate+0x1424>
    1a1c:	b	2dd8 <inflate+0x27dc>
    1a20:	ldur	w8, [x29, #-52]
    1a24:	subs	w8, w8, #0x1
    1a28:	stur	w8, [x29, #-52]
    1a2c:	ldur	x9, [x29, #-40]
    1a30:	add	x10, x9, #0x1
    1a34:	stur	x10, [x29, #-40]
    1a38:	ldrb	w8, [x9]
    1a3c:	mov	w9, w8
    1a40:	ldur	w8, [x29, #-68]
    1a44:	mov	w10, w8
    1a48:	lsl	x9, x9, x10
    1a4c:	ldur	x10, [x29, #-64]
    1a50:	add	x9, x10, x9
    1a54:	stur	x9, [x29, #-64]
    1a58:	ldur	w8, [x29, #-68]
    1a5c:	add	w8, w8, #0x8
    1a60:	stur	w8, [x29, #-68]
    1a64:	b	1a08 <inflate+0x140c>
    1a68:	ldur	x8, [x29, #-64]
    1a6c:	and	w8, w8, #0x7
    1a70:	ldur	x9, [x29, #-32]
    1a74:	add	x9, x9, #0x98
    1a78:	ldur	x10, [x29, #-32]
    1a7c:	ldr	w11, [x10, #140]
    1a80:	mov	w12, w11
    1a84:	mov	w11, w12
    1a88:	add	w11, w11, #0x1
    1a8c:	str	w11, [x10, #140]
    1a90:	mov	x10, #0x2                   	// #2
    1a94:	adrp	x13, 0 <inflateResetKeep>
    1a98:	add	x13, x13, #0x0
    1a9c:	ldrh	w11, [x13, x12, lsl #1]
    1aa0:	mov	w12, w11
    1aa4:	mul	x10, x10, x12
    1aa8:	add	x9, x9, x10
    1aac:	strh	w8, [x9]
    1ab0:	ldur	x8, [x29, #-64]
    1ab4:	lsr	x8, x8, #3
    1ab8:	stur	x8, [x29, #-64]
    1abc:	ldur	w9, [x29, #-68]
    1ac0:	subs	w9, w9, #0x3
    1ac4:	stur	w9, [x29, #-68]
    1ac8:	b	19f0 <inflate+0x13f4>
    1acc:	ldur	x8, [x29, #-32]
    1ad0:	ldr	w9, [x8, #140]
    1ad4:	cmp	w9, #0x13
    1ad8:	b.cs	1b24 <inflate+0x1528>  // b.hs, b.nlast
    1adc:	ldur	x8, [x29, #-32]
    1ae0:	add	x8, x8, #0x98
    1ae4:	ldur	x9, [x29, #-32]
    1ae8:	ldr	w10, [x9, #140]
    1aec:	mov	w11, w10
    1af0:	mov	w10, w11
    1af4:	add	w10, w10, #0x1
    1af8:	str	w10, [x9, #140]
    1afc:	mov	x9, #0x2                   	// #2
    1b00:	adrp	x12, 0 <inflateResetKeep>
    1b04:	add	x12, x12, #0x0
    1b08:	ldrh	w10, [x12, x11, lsl #1]
    1b0c:	mov	w11, w10
    1b10:	mul	x9, x9, x11
    1b14:	add	x8, x8, x9
    1b18:	mov	w10, #0x0                   	// #0
    1b1c:	strh	w10, [x8]
    1b20:	b	1acc <inflate+0x14d0>
    1b24:	ldur	x8, [x29, #-32]
    1b28:	add	x8, x8, #0x558
    1b2c:	ldur	x9, [x29, #-32]
    1b30:	str	x8, [x9, #144]
    1b34:	ldur	x8, [x29, #-32]
    1b38:	ldr	x8, [x8, #144]
    1b3c:	ldur	x9, [x29, #-32]
    1b40:	str	x8, [x9, #104]
    1b44:	ldur	x8, [x29, #-32]
    1b48:	mov	w10, #0x7                   	// #7
    1b4c:	str	w10, [x8, #120]
    1b50:	ldur	x8, [x29, #-32]
    1b54:	add	x1, x8, #0x98
    1b58:	ldur	x8, [x29, #-32]
    1b5c:	add	x3, x8, #0x90
    1b60:	ldur	x8, [x29, #-32]
    1b64:	add	x4, x8, #0x78
    1b68:	ldur	x8, [x29, #-32]
    1b6c:	add	x5, x8, #0x318
    1b70:	mov	w10, wzr
    1b74:	mov	w0, w10
    1b78:	mov	w2, #0x13                  	// #19
    1b7c:	bl	0 <inflate_table>
    1b80:	str	w0, [sp, #88]
    1b84:	ldr	w10, [sp, #88]
    1b88:	cbz	w10, 1bac <inflate+0x15b0>
    1b8c:	ldur	x8, [x29, #-16]
    1b90:	adrp	x9, 0 <inflateResetKeep>
    1b94:	add	x9, x9, #0x0
    1b98:	str	x9, [x8, #48]
    1b9c:	ldur	x8, [x29, #-32]
    1ba0:	mov	w10, #0x3f51                	// #16209
    1ba4:	str	w10, [x8, #8]
    1ba8:	b	2dd4 <inflate+0x27d8>
    1bac:	ldur	x8, [x29, #-32]
    1bb0:	str	wzr, [x8, #140]
    1bb4:	ldur	x8, [x29, #-32]
    1bb8:	mov	w9, #0x3f46                	// #16198
    1bbc:	str	w9, [x8, #8]
    1bc0:	ldur	x8, [x29, #-32]
    1bc4:	ldr	w9, [x8, #140]
    1bc8:	ldur	x8, [x29, #-32]
    1bcc:	ldr	w10, [x8, #132]
    1bd0:	ldur	x8, [x29, #-32]
    1bd4:	ldr	w11, [x8, #136]
    1bd8:	add	w10, w10, w11
    1bdc:	cmp	w9, w10
    1be0:	b.cs	2008 <inflate+0x1a0c>  // b.hs, b.nlast
    1be4:	ldur	x8, [x29, #-32]
    1be8:	ldr	x8, [x8, #104]
    1bec:	ldur	x9, [x29, #-64]
    1bf0:	ldur	x10, [x29, #-32]
    1bf4:	ldr	w11, [x10, #120]
    1bf8:	mov	w12, #0x1                   	// #1
    1bfc:	lsl	w11, w12, w11
    1c00:	subs	w11, w11, #0x1
    1c04:	and	w9, w9, w11
    1c08:	ldr	w9, [x8, w9, uxtw #2]
    1c0c:	stur	w9, [x29, #-92]
    1c10:	ldurb	w9, [x29, #-91]
    1c14:	ldur	w11, [x29, #-68]
    1c18:	cmp	w9, w11
    1c1c:	b.hi	1c24 <inflate+0x1628>  // b.pmore
    1c20:	b	1c78 <inflate+0x167c>
    1c24:	ldur	w8, [x29, #-52]
    1c28:	cbnz	w8, 1c30 <inflate+0x1634>
    1c2c:	b	2dd8 <inflate+0x27dc>
    1c30:	ldur	w8, [x29, #-52]
    1c34:	subs	w8, w8, #0x1
    1c38:	stur	w8, [x29, #-52]
    1c3c:	ldur	x9, [x29, #-40]
    1c40:	add	x10, x9, #0x1
    1c44:	stur	x10, [x29, #-40]
    1c48:	ldrb	w8, [x9]
    1c4c:	mov	w9, w8
    1c50:	ldur	w8, [x29, #-68]
    1c54:	mov	w10, w8
    1c58:	lsl	x9, x9, x10
    1c5c:	ldur	x10, [x29, #-64]
    1c60:	add	x9, x10, x9
    1c64:	stur	x9, [x29, #-64]
    1c68:	ldur	w8, [x29, #-68]
    1c6c:	add	w8, w8, #0x8
    1c70:	stur	w8, [x29, #-68]
    1c74:	b	1be4 <inflate+0x15e8>
    1c78:	ldurh	w8, [x29, #-90]
    1c7c:	cmp	w8, #0x10
    1c80:	b.ge	1ce4 <inflate+0x16e8>  // b.tcont
    1c84:	ldurb	w8, [x29, #-91]
    1c88:	mov	w9, w8
    1c8c:	ldur	x10, [x29, #-64]
    1c90:	lsr	x9, x10, x9
    1c94:	stur	x9, [x29, #-64]
    1c98:	ldurb	w8, [x29, #-91]
    1c9c:	ldur	w11, [x29, #-68]
    1ca0:	subs	w8, w11, w8
    1ca4:	stur	w8, [x29, #-68]
    1ca8:	mov	x8, #0x2                   	// #2
    1cac:	sub	x9, x29, #0x5c
    1cb0:	ldrh	w10, [x9, #2]
    1cb4:	ldur	x9, [x29, #-32]
    1cb8:	add	x9, x9, #0x98
    1cbc:	ldur	x11, [x29, #-32]
    1cc0:	ldr	w12, [x11, #140]
    1cc4:	mov	w13, w12
    1cc8:	mov	w12, w13
    1ccc:	add	w12, w12, #0x1
    1cd0:	str	w12, [x11, #140]
    1cd4:	mul	x8, x8, x13
    1cd8:	add	x8, x9, x8
    1cdc:	strh	w10, [x8]
    1ce0:	b	2004 <inflate+0x1a08>
    1ce4:	ldurh	w8, [x29, #-90]
    1ce8:	cmp	w8, #0x10
    1cec:	b.ne	1df0 <inflate+0x17f4>  // b.any
    1cf0:	ldur	w8, [x29, #-68]
    1cf4:	ldurb	w9, [x29, #-91]
    1cf8:	add	w9, w9, #0x2
    1cfc:	cmp	w8, w9
    1d00:	b.cs	1d58 <inflate+0x175c>  // b.hs, b.nlast
    1d04:	ldur	w8, [x29, #-52]
    1d08:	cbnz	w8, 1d10 <inflate+0x1714>
    1d0c:	b	2dd8 <inflate+0x27dc>
    1d10:	ldur	w8, [x29, #-52]
    1d14:	subs	w8, w8, #0x1
    1d18:	stur	w8, [x29, #-52]
    1d1c:	ldur	x9, [x29, #-40]
    1d20:	add	x10, x9, #0x1
    1d24:	stur	x10, [x29, #-40]
    1d28:	ldrb	w8, [x9]
    1d2c:	mov	w9, w8
    1d30:	ldur	w8, [x29, #-68]
    1d34:	mov	w10, w8
    1d38:	lsl	x9, x9, x10
    1d3c:	ldur	x10, [x29, #-64]
    1d40:	add	x9, x10, x9
    1d44:	stur	x9, [x29, #-64]
    1d48:	ldur	w8, [x29, #-68]
    1d4c:	add	w8, w8, #0x8
    1d50:	stur	w8, [x29, #-68]
    1d54:	b	1cf0 <inflate+0x16f4>
    1d58:	ldurb	w8, [x29, #-91]
    1d5c:	mov	w9, w8
    1d60:	ldur	x10, [x29, #-64]
    1d64:	lsr	x9, x10, x9
    1d68:	stur	x9, [x29, #-64]
    1d6c:	ldurb	w8, [x29, #-91]
    1d70:	ldur	w11, [x29, #-68]
    1d74:	subs	w8, w11, w8
    1d78:	stur	w8, [x29, #-68]
    1d7c:	ldur	x8, [x29, #-32]
    1d80:	ldr	w9, [x8, #140]
    1d84:	cbnz	w9, 1da8 <inflate+0x17ac>
    1d88:	ldur	x8, [x29, #-16]
    1d8c:	adrp	x9, 0 <inflateResetKeep>
    1d90:	add	x9, x9, #0x0
    1d94:	str	x9, [x8, #48]
    1d98:	ldur	x8, [x29, #-32]
    1d9c:	mov	w10, #0x3f51                	// #16209
    1da0:	str	w10, [x8, #8]
    1da4:	b	2008 <inflate+0x1a0c>
    1da8:	ldur	x8, [x29, #-32]
    1dac:	add	x8, x8, #0x98
    1db0:	ldur	x9, [x29, #-32]
    1db4:	ldr	w10, [x9, #140]
    1db8:	subs	w10, w10, #0x1
    1dbc:	ldrh	w10, [x8, w10, uxtw #1]
    1dc0:	str	w10, [sp, #92]
    1dc4:	ldur	x8, [x29, #-64]
    1dc8:	and	w8, w8, #0x3
    1dcc:	add	w8, w8, #0x3
    1dd0:	stur	w8, [x29, #-80]
    1dd4:	ldur	x8, [x29, #-64]
    1dd8:	lsr	x8, x8, #2
    1ddc:	stur	x8, [x29, #-64]
    1de0:	ldur	w9, [x29, #-68]
    1de4:	subs	w9, w9, #0x2
    1de8:	stur	w9, [x29, #-68]
    1dec:	b	1f70 <inflate+0x1974>
    1df0:	ldurh	w8, [x29, #-90]
    1df4:	cmp	w8, #0x11
    1df8:	b.ne	1eb8 <inflate+0x18bc>  // b.any
    1dfc:	ldur	w8, [x29, #-68]
    1e00:	ldurb	w9, [x29, #-91]
    1e04:	add	w9, w9, #0x3
    1e08:	cmp	w8, w9
    1e0c:	b.cs	1e64 <inflate+0x1868>  // b.hs, b.nlast
    1e10:	ldur	w8, [x29, #-52]
    1e14:	cbnz	w8, 1e1c <inflate+0x1820>
    1e18:	b	2dd8 <inflate+0x27dc>
    1e1c:	ldur	w8, [x29, #-52]
    1e20:	subs	w8, w8, #0x1
    1e24:	stur	w8, [x29, #-52]
    1e28:	ldur	x9, [x29, #-40]
    1e2c:	add	x10, x9, #0x1
    1e30:	stur	x10, [x29, #-40]
    1e34:	ldrb	w8, [x9]
    1e38:	mov	w9, w8
    1e3c:	ldur	w8, [x29, #-68]
    1e40:	mov	w10, w8
    1e44:	lsl	x9, x9, x10
    1e48:	ldur	x10, [x29, #-64]
    1e4c:	add	x9, x10, x9
    1e50:	stur	x9, [x29, #-64]
    1e54:	ldur	w8, [x29, #-68]
    1e58:	add	w8, w8, #0x8
    1e5c:	stur	w8, [x29, #-68]
    1e60:	b	1dfc <inflate+0x1800>
    1e64:	ldurb	w8, [x29, #-91]
    1e68:	mov	w9, w8
    1e6c:	ldur	x10, [x29, #-64]
    1e70:	lsr	x9, x10, x9
    1e74:	stur	x9, [x29, #-64]
    1e78:	ldurb	w8, [x29, #-91]
    1e7c:	ldur	w11, [x29, #-68]
    1e80:	subs	w8, w11, w8
    1e84:	stur	w8, [x29, #-68]
    1e88:	str	wzr, [sp, #92]
    1e8c:	ldur	x8, [x29, #-64]
    1e90:	and	w8, w8, #0x7
    1e94:	add	w8, w8, #0x3
    1e98:	stur	w8, [x29, #-80]
    1e9c:	ldur	x8, [x29, #-64]
    1ea0:	lsr	x8, x8, #3
    1ea4:	stur	x8, [x29, #-64]
    1ea8:	ldur	w9, [x29, #-68]
    1eac:	subs	w9, w9, #0x3
    1eb0:	stur	w9, [x29, #-68]
    1eb4:	b	1f70 <inflate+0x1974>
    1eb8:	ldur	w8, [x29, #-68]
    1ebc:	ldurb	w9, [x29, #-91]
    1ec0:	add	w9, w9, #0x7
    1ec4:	cmp	w8, w9
    1ec8:	b.cs	1f20 <inflate+0x1924>  // b.hs, b.nlast
    1ecc:	ldur	w8, [x29, #-52]
    1ed0:	cbnz	w8, 1ed8 <inflate+0x18dc>
    1ed4:	b	2dd8 <inflate+0x27dc>
    1ed8:	ldur	w8, [x29, #-52]
    1edc:	subs	w8, w8, #0x1
    1ee0:	stur	w8, [x29, #-52]
    1ee4:	ldur	x9, [x29, #-40]
    1ee8:	add	x10, x9, #0x1
    1eec:	stur	x10, [x29, #-40]
    1ef0:	ldrb	w8, [x9]
    1ef4:	mov	w9, w8
    1ef8:	ldur	w8, [x29, #-68]
    1efc:	mov	w10, w8
    1f00:	lsl	x9, x9, x10
    1f04:	ldur	x10, [x29, #-64]
    1f08:	add	x9, x10, x9
    1f0c:	stur	x9, [x29, #-64]
    1f10:	ldur	w8, [x29, #-68]
    1f14:	add	w8, w8, #0x8
    1f18:	stur	w8, [x29, #-68]
    1f1c:	b	1eb8 <inflate+0x18bc>
    1f20:	ldurb	w8, [x29, #-91]
    1f24:	mov	w9, w8
    1f28:	ldur	x10, [x29, #-64]
    1f2c:	lsr	x9, x10, x9
    1f30:	stur	x9, [x29, #-64]
    1f34:	ldurb	w8, [x29, #-91]
    1f38:	ldur	w11, [x29, #-68]
    1f3c:	subs	w8, w11, w8
    1f40:	stur	w8, [x29, #-68]
    1f44:	str	wzr, [sp, #92]
    1f48:	ldur	x8, [x29, #-64]
    1f4c:	and	w8, w8, #0x7f
    1f50:	add	w8, w8, #0xb
    1f54:	stur	w8, [x29, #-80]
    1f58:	ldur	x8, [x29, #-64]
    1f5c:	lsr	x8, x8, #7
    1f60:	stur	x8, [x29, #-64]
    1f64:	ldur	w9, [x29, #-68]
    1f68:	subs	w9, w9, #0x7
    1f6c:	stur	w9, [x29, #-68]
    1f70:	ldur	x8, [x29, #-32]
    1f74:	ldr	w9, [x8, #140]
    1f78:	ldur	w10, [x29, #-80]
    1f7c:	add	w9, w9, w10
    1f80:	ldur	x8, [x29, #-32]
    1f84:	ldr	w10, [x8, #132]
    1f88:	ldur	x8, [x29, #-32]
    1f8c:	ldr	w11, [x8, #136]
    1f90:	add	w10, w10, w11
    1f94:	cmp	w9, w10
    1f98:	b.ls	1fbc <inflate+0x19c0>  // b.plast
    1f9c:	ldur	x8, [x29, #-16]
    1fa0:	adrp	x9, 0 <inflateResetKeep>
    1fa4:	add	x9, x9, #0x0
    1fa8:	str	x9, [x8, #48]
    1fac:	ldur	x8, [x29, #-32]
    1fb0:	mov	w10, #0x3f51                	// #16209
    1fb4:	str	w10, [x8, #8]
    1fb8:	b	2008 <inflate+0x1a0c>
    1fbc:	ldur	w8, [x29, #-80]
    1fc0:	subs	w9, w8, #0x1
    1fc4:	stur	w9, [x29, #-80]
    1fc8:	cbz	w8, 2004 <inflate+0x1a08>
    1fcc:	ldr	w8, [sp, #92]
    1fd0:	ldur	x9, [x29, #-32]
    1fd4:	add	x9, x9, #0x98
    1fd8:	ldur	x10, [x29, #-32]
    1fdc:	ldr	w11, [x10, #140]
    1fe0:	mov	w12, w11
    1fe4:	mov	w11, w12
    1fe8:	add	w11, w11, #0x1
    1fec:	str	w11, [x10, #140]
    1ff0:	mov	x10, #0x2                   	// #2
    1ff4:	mul	x10, x10, x12
    1ff8:	add	x9, x9, x10
    1ffc:	strh	w8, [x9]
    2000:	b	1fbc <inflate+0x19c0>
    2004:	b	1bc0 <inflate+0x15c4>
    2008:	ldur	x8, [x29, #-32]
    200c:	ldr	w9, [x8, #8]
    2010:	mov	w10, #0x3f51                	// #16209
    2014:	cmp	w9, w10
    2018:	b.ne	2020 <inflate+0x1a24>  // b.any
    201c:	b	2dd4 <inflate+0x27d8>
    2020:	ldur	x8, [x29, #-32]
    2024:	ldrh	w9, [x8, #664]
    2028:	cbnz	w9, 204c <inflate+0x1a50>
    202c:	ldur	x8, [x29, #-16]
    2030:	adrp	x9, 0 <inflateResetKeep>
    2034:	add	x9, x9, #0x0
    2038:	str	x9, [x8, #48]
    203c:	ldur	x8, [x29, #-32]
    2040:	mov	w10, #0x3f51                	// #16209
    2044:	str	w10, [x8, #8]
    2048:	b	2dd4 <inflate+0x27d8>
    204c:	ldur	x8, [x29, #-32]
    2050:	add	x8, x8, #0x558
    2054:	ldur	x9, [x29, #-32]
    2058:	str	x8, [x9, #144]
    205c:	ldur	x8, [x29, #-32]
    2060:	ldr	x8, [x8, #144]
    2064:	ldur	x9, [x29, #-32]
    2068:	str	x8, [x9, #104]
    206c:	ldur	x8, [x29, #-32]
    2070:	mov	w10, #0x9                   	// #9
    2074:	str	w10, [x8, #120]
    2078:	ldur	x8, [x29, #-32]
    207c:	add	x1, x8, #0x98
    2080:	ldur	x8, [x29, #-32]
    2084:	ldr	w2, [x8, #132]
    2088:	ldur	x8, [x29, #-32]
    208c:	add	x3, x8, #0x90
    2090:	ldur	x8, [x29, #-32]
    2094:	add	x4, x8, #0x78
    2098:	ldur	x8, [x29, #-32]
    209c:	add	x5, x8, #0x318
    20a0:	mov	w0, #0x1                   	// #1
    20a4:	bl	0 <inflate_table>
    20a8:	str	w0, [sp, #88]
    20ac:	ldr	w10, [sp, #88]
    20b0:	cbz	w10, 20d4 <inflate+0x1ad8>
    20b4:	ldur	x8, [x29, #-16]
    20b8:	adrp	x9, 0 <inflateResetKeep>
    20bc:	add	x9, x9, #0x0
    20c0:	str	x9, [x8, #48]
    20c4:	ldur	x8, [x29, #-32]
    20c8:	mov	w10, #0x3f51                	// #16209
    20cc:	str	w10, [x8, #8]
    20d0:	b	2dd4 <inflate+0x27d8>
    20d4:	ldur	x8, [x29, #-32]
    20d8:	ldr	x8, [x8, #144]
    20dc:	ldur	x9, [x29, #-32]
    20e0:	str	x8, [x9, #112]
    20e4:	ldur	x8, [x29, #-32]
    20e8:	mov	w10, #0x6                   	// #6
    20ec:	str	w10, [x8, #124]
    20f0:	ldur	x8, [x29, #-32]
    20f4:	add	x8, x8, #0x98
    20f8:	ldur	x9, [x29, #-32]
    20fc:	ldr	w10, [x9, #132]
    2100:	mov	w9, w10
    2104:	mov	x11, #0x2                   	// #2
    2108:	mul	x9, x11, x9
    210c:	add	x1, x8, x9
    2110:	ldur	x8, [x29, #-32]
    2114:	ldr	w2, [x8, #136]
    2118:	ldur	x8, [x29, #-32]
    211c:	add	x3, x8, #0x90
    2120:	ldur	x8, [x29, #-32]
    2124:	add	x4, x8, #0x7c
    2128:	ldur	x8, [x29, #-32]
    212c:	add	x5, x8, #0x318
    2130:	mov	w0, #0x2                   	// #2
    2134:	bl	0 <inflate_table>
    2138:	str	w0, [sp, #88]
    213c:	ldr	w10, [sp, #88]
    2140:	cbz	w10, 2164 <inflate+0x1b68>
    2144:	ldur	x8, [x29, #-16]
    2148:	adrp	x9, 0 <inflateResetKeep>
    214c:	add	x9, x9, #0x0
    2150:	str	x9, [x8, #48]
    2154:	ldur	x8, [x29, #-32]
    2158:	mov	w10, #0x3f51                	// #16209
    215c:	str	w10, [x8, #8]
    2160:	b	2dd4 <inflate+0x27d8>
    2164:	ldur	x8, [x29, #-32]
    2168:	mov	w9, #0x3f47                	// #16199
    216c:	str	w9, [x8, #8]
    2170:	ldur	w9, [x29, #-20]
    2174:	cmp	w9, #0x6
    2178:	b.ne	2180 <inflate+0x1b84>  // b.any
    217c:	b	2dd8 <inflate+0x27dc>
    2180:	ldur	x8, [x29, #-32]
    2184:	mov	w9, #0x3f48                	// #16200
    2188:	str	w9, [x8, #8]
    218c:	ldur	w8, [x29, #-52]
    2190:	cmp	w8, #0x6
    2194:	b.cc	2264 <inflate+0x1c68>  // b.lo, b.ul, b.last
    2198:	ldur	w8, [x29, #-56]
    219c:	cmp	w8, #0x102
    21a0:	b.cc	2264 <inflate+0x1c68>  // b.lo, b.ul, b.last
    21a4:	ldur	x8, [x29, #-48]
    21a8:	ldur	x9, [x29, #-16]
    21ac:	str	x8, [x9, #24]
    21b0:	ldur	w10, [x29, #-56]
    21b4:	ldur	x8, [x29, #-16]
    21b8:	str	w10, [x8, #32]
    21bc:	ldur	x8, [x29, #-40]
    21c0:	ldur	x9, [x29, #-16]
    21c4:	str	x8, [x9]
    21c8:	ldur	w10, [x29, #-52]
    21cc:	ldur	x8, [x29, #-16]
    21d0:	str	w10, [x8, #8]
    21d4:	ldur	x8, [x29, #-64]
    21d8:	ldur	x9, [x29, #-32]
    21dc:	str	x8, [x9, #80]
    21e0:	ldur	w10, [x29, #-68]
    21e4:	ldur	x8, [x29, #-32]
    21e8:	str	w10, [x8, #88]
    21ec:	ldur	x0, [x29, #-16]
    21f0:	ldur	w1, [x29, #-76]
    21f4:	bl	0 <inflate_fast>
    21f8:	ldur	x8, [x29, #-16]
    21fc:	ldr	x8, [x8, #24]
    2200:	stur	x8, [x29, #-48]
    2204:	ldur	x8, [x29, #-16]
    2208:	ldr	w9, [x8, #32]
    220c:	stur	w9, [x29, #-56]
    2210:	ldur	x8, [x29, #-16]
    2214:	ldr	x8, [x8]
    2218:	stur	x8, [x29, #-40]
    221c:	ldur	x8, [x29, #-16]
    2220:	ldr	w9, [x8, #8]
    2224:	stur	w9, [x29, #-52]
    2228:	ldur	x8, [x29, #-32]
    222c:	ldr	x8, [x8, #80]
    2230:	stur	x8, [x29, #-64]
    2234:	ldur	x8, [x29, #-32]
    2238:	ldr	w9, [x8, #88]
    223c:	stur	w9, [x29, #-68]
    2240:	ldur	x8, [x29, #-32]
    2244:	ldr	w9, [x8, #8]
    2248:	mov	w10, #0x3f3f                	// #16191
    224c:	cmp	w9, w10
    2250:	b.ne	2260 <inflate+0x1c64>  // b.any
    2254:	ldur	x8, [x29, #-32]
    2258:	mov	w9, #0xffffffff            	// #-1
    225c:	str	w9, [x8, #7148]
    2260:	b	2dd4 <inflate+0x27d8>
    2264:	ldur	x8, [x29, #-32]
    2268:	str	wzr, [x8, #7148]
    226c:	ldur	x8, [x29, #-32]
    2270:	ldr	x8, [x8, #104]
    2274:	ldur	x9, [x29, #-64]
    2278:	ldur	x10, [x29, #-32]
    227c:	ldr	w11, [x10, #120]
    2280:	mov	w12, #0x1                   	// #1
    2284:	lsl	w11, w12, w11
    2288:	subs	w11, w11, #0x1
    228c:	and	w9, w9, w11
    2290:	ldr	w9, [x8, w9, uxtw #2]
    2294:	stur	w9, [x29, #-92]
    2298:	ldurb	w9, [x29, #-91]
    229c:	ldur	w11, [x29, #-68]
    22a0:	cmp	w9, w11
    22a4:	b.hi	22ac <inflate+0x1cb0>  // b.pmore
    22a8:	b	2300 <inflate+0x1d04>
    22ac:	ldur	w8, [x29, #-52]
    22b0:	cbnz	w8, 22b8 <inflate+0x1cbc>
    22b4:	b	2dd8 <inflate+0x27dc>
    22b8:	ldur	w8, [x29, #-52]
    22bc:	subs	w8, w8, #0x1
    22c0:	stur	w8, [x29, #-52]
    22c4:	ldur	x9, [x29, #-40]
    22c8:	add	x10, x9, #0x1
    22cc:	stur	x10, [x29, #-40]
    22d0:	ldrb	w8, [x9]
    22d4:	mov	w9, w8
    22d8:	ldur	w8, [x29, #-68]
    22dc:	mov	w10, w8
    22e0:	lsl	x9, x9, x10
    22e4:	ldur	x10, [x29, #-64]
    22e8:	add	x9, x10, x9
    22ec:	stur	x9, [x29, #-64]
    22f0:	ldur	w8, [x29, #-68]
    22f4:	add	w8, w8, #0x8
    22f8:	stur	w8, [x29, #-68]
    22fc:	b	226c <inflate+0x1c70>
    2300:	ldurb	w8, [x29, #-92]
    2304:	cbz	w8, 2404 <inflate+0x1e08>
    2308:	ldurb	w8, [x29, #-92]
    230c:	and	w8, w8, #0xf0
    2310:	cbnz	w8, 2404 <inflate+0x1e08>
    2314:	ldur	w8, [x29, #-92]
    2318:	str	w8, [sp, #96]
    231c:	ldur	x8, [x29, #-32]
    2320:	ldr	x8, [x8, #104]
    2324:	ldrh	w9, [sp, #98]
    2328:	ldur	x10, [x29, #-64]
    232c:	ldrb	w11, [sp, #97]
    2330:	ldrb	w12, [sp, #96]
    2334:	add	w11, w11, w12
    2338:	mov	w12, #0x1                   	// #1
    233c:	lsl	w11, w12, w11
    2340:	subs	w11, w11, #0x1
    2344:	and	w10, w10, w11
    2348:	ldrb	w11, [sp, #97]
    234c:	lsr	w10, w10, w11
    2350:	add	w9, w9, w10
    2354:	ldr	w9, [x8, w9, uxtw #2]
    2358:	stur	w9, [x29, #-92]
    235c:	ldrb	w9, [sp, #97]
    2360:	ldurb	w10, [x29, #-91]
    2364:	add	w9, w9, w10
    2368:	ldur	w10, [x29, #-68]
    236c:	cmp	w9, w10
    2370:	b.hi	2378 <inflate+0x1d7c>  // b.pmore
    2374:	b	23cc <inflate+0x1dd0>
    2378:	ldur	w8, [x29, #-52]
    237c:	cbnz	w8, 2384 <inflate+0x1d88>
    2380:	b	2dd8 <inflate+0x27dc>
    2384:	ldur	w8, [x29, #-52]
    2388:	subs	w8, w8, #0x1
    238c:	stur	w8, [x29, #-52]
    2390:	ldur	x9, [x29, #-40]
    2394:	add	x10, x9, #0x1
    2398:	stur	x10, [x29, #-40]
    239c:	ldrb	w8, [x9]
    23a0:	mov	w9, w8
    23a4:	ldur	w8, [x29, #-68]
    23a8:	mov	w10, w8
    23ac:	lsl	x9, x9, x10
    23b0:	ldur	x10, [x29, #-64]
    23b4:	add	x9, x10, x9
    23b8:	stur	x9, [x29, #-64]
    23bc:	ldur	w8, [x29, #-68]
    23c0:	add	w8, w8, #0x8
    23c4:	stur	w8, [x29, #-68]
    23c8:	b	231c <inflate+0x1d20>
    23cc:	ldrb	w8, [sp, #97]
    23d0:	mov	w9, w8
    23d4:	ldur	x10, [x29, #-64]
    23d8:	lsr	x9, x10, x9
    23dc:	stur	x9, [x29, #-64]
    23e0:	ldrb	w8, [sp, #97]
    23e4:	ldur	w11, [x29, #-68]
    23e8:	subs	w8, w11, w8
    23ec:	stur	w8, [x29, #-68]
    23f0:	ldrb	w8, [sp, #97]
    23f4:	ldur	x9, [x29, #-32]
    23f8:	ldr	w10, [x9, #7148]
    23fc:	add	w8, w10, w8
    2400:	str	w8, [x9, #7148]
    2404:	ldurb	w8, [x29, #-91]
    2408:	mov	w9, w8
    240c:	ldur	x10, [x29, #-64]
    2410:	lsr	x9, x10, x9
    2414:	stur	x9, [x29, #-64]
    2418:	ldurb	w8, [x29, #-91]
    241c:	ldur	w11, [x29, #-68]
    2420:	subs	w8, w11, w8
    2424:	stur	w8, [x29, #-68]
    2428:	ldurb	w8, [x29, #-91]
    242c:	ldur	x9, [x29, #-32]
    2430:	ldr	w10, [x9, #7148]
    2434:	add	w8, w10, w8
    2438:	str	w8, [x9, #7148]
    243c:	ldurh	w8, [x29, #-90]
    2440:	ldur	x9, [x29, #-32]
    2444:	str	w8, [x9, #92]
    2448:	ldurb	w8, [x29, #-92]
    244c:	cbnz	w8, 2460 <inflate+0x1e64>
    2450:	ldur	x8, [x29, #-32]
    2454:	mov	w9, #0x3f4d                	// #16205
    2458:	str	w9, [x8, #8]
    245c:	b	2dd4 <inflate+0x27d8>
    2460:	ldurb	w8, [x29, #-92]
    2464:	and	w8, w8, #0x20
    2468:	cbz	w8, 2488 <inflate+0x1e8c>
    246c:	ldur	x8, [x29, #-32]
    2470:	mov	w9, #0xffffffff            	// #-1
    2474:	str	w9, [x8, #7148]
    2478:	ldur	x8, [x29, #-32]
    247c:	mov	w9, #0x3f3f                	// #16191
    2480:	str	w9, [x8, #8]
    2484:	b	2dd4 <inflate+0x27d8>
    2488:	ldurb	w8, [x29, #-92]
    248c:	and	w8, w8, #0x40
    2490:	cbz	w8, 24b4 <inflate+0x1eb8>
    2494:	ldur	x8, [x29, #-16]
    2498:	adrp	x9, 0 <inflateResetKeep>
    249c:	add	x9, x9, #0x0
    24a0:	str	x9, [x8, #48]
    24a4:	ldur	x8, [x29, #-32]
    24a8:	mov	w10, #0x3f51                	// #16209
    24ac:	str	w10, [x8, #8]
    24b0:	b	2dd4 <inflate+0x27d8>
    24b4:	ldurb	w8, [x29, #-92]
    24b8:	and	w8, w8, #0xf
    24bc:	ldur	x9, [x29, #-32]
    24c0:	str	w8, [x9, #100]
    24c4:	ldur	x9, [x29, #-32]
    24c8:	mov	w8, #0x3f49                	// #16201
    24cc:	str	w8, [x9, #8]
    24d0:	ldur	x8, [x29, #-32]
    24d4:	ldr	w9, [x8, #100]
    24d8:	cbz	w9, 25b4 <inflate+0x1fb8>
    24dc:	ldur	w8, [x29, #-68]
    24e0:	ldur	x9, [x29, #-32]
    24e4:	ldr	w10, [x9, #100]
    24e8:	cmp	w8, w10
    24ec:	b.cs	2544 <inflate+0x1f48>  // b.hs, b.nlast
    24f0:	ldur	w8, [x29, #-52]
    24f4:	cbnz	w8, 24fc <inflate+0x1f00>
    24f8:	b	2dd8 <inflate+0x27dc>
    24fc:	ldur	w8, [x29, #-52]
    2500:	subs	w8, w8, #0x1
    2504:	stur	w8, [x29, #-52]
    2508:	ldur	x9, [x29, #-40]
    250c:	add	x10, x9, #0x1
    2510:	stur	x10, [x29, #-40]
    2514:	ldrb	w8, [x9]
    2518:	mov	w9, w8
    251c:	ldur	w8, [x29, #-68]
    2520:	mov	w10, w8
    2524:	lsl	x9, x9, x10
    2528:	ldur	x10, [x29, #-64]
    252c:	add	x9, x10, x9
    2530:	stur	x9, [x29, #-64]
    2534:	ldur	w8, [x29, #-68]
    2538:	add	w8, w8, #0x8
    253c:	stur	w8, [x29, #-68]
    2540:	b	24dc <inflate+0x1ee0>
    2544:	ldur	x8, [x29, #-64]
    2548:	ldur	x9, [x29, #-32]
    254c:	ldr	w10, [x9, #100]
    2550:	mov	w11, #0x1                   	// #1
    2554:	lsl	w10, w11, w10
    2558:	subs	w10, w10, #0x1
    255c:	and	w8, w8, w10
    2560:	ldur	x9, [x29, #-32]
    2564:	ldr	w10, [x9, #92]
    2568:	add	w8, w10, w8
    256c:	str	w8, [x9, #92]
    2570:	ldur	x8, [x29, #-32]
    2574:	ldr	w9, [x8, #100]
    2578:	mov	w8, w9
    257c:	ldur	x10, [x29, #-64]
    2580:	lsr	x8, x10, x8
    2584:	stur	x8, [x29, #-64]
    2588:	ldur	x8, [x29, #-32]
    258c:	ldr	w9, [x8, #100]
    2590:	ldur	w11, [x29, #-68]
    2594:	subs	w9, w11, w9
    2598:	stur	w9, [x29, #-68]
    259c:	ldur	x8, [x29, #-32]
    25a0:	ldr	w9, [x8, #100]
    25a4:	ldur	x8, [x29, #-32]
    25a8:	ldr	w10, [x8, #7148]
    25ac:	add	w9, w10, w9
    25b0:	str	w9, [x8, #7148]
    25b4:	ldur	x8, [x29, #-32]
    25b8:	ldr	w9, [x8, #92]
    25bc:	ldur	x8, [x29, #-32]
    25c0:	str	w9, [x8, #7152]
    25c4:	ldur	x8, [x29, #-32]
    25c8:	mov	w9, #0x3f4a                	// #16202
    25cc:	str	w9, [x8, #8]
    25d0:	ldur	x8, [x29, #-32]
    25d4:	ldr	x8, [x8, #112]
    25d8:	ldur	x9, [x29, #-64]
    25dc:	ldur	x10, [x29, #-32]
    25e0:	ldr	w11, [x10, #124]
    25e4:	mov	w12, #0x1                   	// #1
    25e8:	lsl	w11, w12, w11
    25ec:	subs	w11, w11, #0x1
    25f0:	and	w9, w9, w11
    25f4:	ldr	w9, [x8, w9, uxtw #2]
    25f8:	stur	w9, [x29, #-92]
    25fc:	ldurb	w9, [x29, #-91]
    2600:	ldur	w11, [x29, #-68]
    2604:	cmp	w9, w11
    2608:	b.hi	2610 <inflate+0x2014>  // b.pmore
    260c:	b	2664 <inflate+0x2068>
    2610:	ldur	w8, [x29, #-52]
    2614:	cbnz	w8, 261c <inflate+0x2020>
    2618:	b	2dd8 <inflate+0x27dc>
    261c:	ldur	w8, [x29, #-52]
    2620:	subs	w8, w8, #0x1
    2624:	stur	w8, [x29, #-52]
    2628:	ldur	x9, [x29, #-40]
    262c:	add	x10, x9, #0x1
    2630:	stur	x10, [x29, #-40]
    2634:	ldrb	w8, [x9]
    2638:	mov	w9, w8
    263c:	ldur	w8, [x29, #-68]
    2640:	mov	w10, w8
    2644:	lsl	x9, x9, x10
    2648:	ldur	x10, [x29, #-64]
    264c:	add	x9, x10, x9
    2650:	stur	x9, [x29, #-64]
    2654:	ldur	w8, [x29, #-68]
    2658:	add	w8, w8, #0x8
    265c:	stur	w8, [x29, #-68]
    2660:	b	25d0 <inflate+0x1fd4>
    2664:	ldurb	w8, [x29, #-92]
    2668:	and	w8, w8, #0xf0
    266c:	cbnz	w8, 2760 <inflate+0x2164>
    2670:	ldur	w8, [x29, #-92]
    2674:	str	w8, [sp, #96]
    2678:	ldur	x8, [x29, #-32]
    267c:	ldr	x8, [x8, #112]
    2680:	ldrh	w9, [sp, #98]
    2684:	ldur	x10, [x29, #-64]
    2688:	ldrb	w11, [sp, #97]
    268c:	ldrb	w12, [sp, #96]
    2690:	add	w11, w11, w12
    2694:	mov	w12, #0x1                   	// #1
    2698:	lsl	w11, w12, w11
    269c:	subs	w11, w11, #0x1
    26a0:	and	w10, w10, w11
    26a4:	ldrb	w11, [sp, #97]
    26a8:	lsr	w10, w10, w11
    26ac:	add	w9, w9, w10
    26b0:	ldr	w9, [x8, w9, uxtw #2]
    26b4:	stur	w9, [x29, #-92]
    26b8:	ldrb	w9, [sp, #97]
    26bc:	ldurb	w10, [x29, #-91]
    26c0:	add	w9, w9, w10
    26c4:	ldur	w10, [x29, #-68]
    26c8:	cmp	w9, w10
    26cc:	b.hi	26d4 <inflate+0x20d8>  // b.pmore
    26d0:	b	2728 <inflate+0x212c>
    26d4:	ldur	w8, [x29, #-52]
    26d8:	cbnz	w8, 26e0 <inflate+0x20e4>
    26dc:	b	2dd8 <inflate+0x27dc>
    26e0:	ldur	w8, [x29, #-52]
    26e4:	subs	w8, w8, #0x1
    26e8:	stur	w8, [x29, #-52]
    26ec:	ldur	x9, [x29, #-40]
    26f0:	add	x10, x9, #0x1
    26f4:	stur	x10, [x29, #-40]
    26f8:	ldrb	w8, [x9]
    26fc:	mov	w9, w8
    2700:	ldur	w8, [x29, #-68]
    2704:	mov	w10, w8
    2708:	lsl	x9, x9, x10
    270c:	ldur	x10, [x29, #-64]
    2710:	add	x9, x10, x9
    2714:	stur	x9, [x29, #-64]
    2718:	ldur	w8, [x29, #-68]
    271c:	add	w8, w8, #0x8
    2720:	stur	w8, [x29, #-68]
    2724:	b	2678 <inflate+0x207c>
    2728:	ldrb	w8, [sp, #97]
    272c:	mov	w9, w8
    2730:	ldur	x10, [x29, #-64]
    2734:	lsr	x9, x10, x9
    2738:	stur	x9, [x29, #-64]
    273c:	ldrb	w8, [sp, #97]
    2740:	ldur	w11, [x29, #-68]
    2744:	subs	w8, w11, w8
    2748:	stur	w8, [x29, #-68]
    274c:	ldrb	w8, [sp, #97]
    2750:	ldur	x9, [x29, #-32]
    2754:	ldr	w10, [x9, #7148]
    2758:	add	w8, w10, w8
    275c:	str	w8, [x9, #7148]
    2760:	ldurb	w8, [x29, #-91]
    2764:	mov	w9, w8
    2768:	ldur	x10, [x29, #-64]
    276c:	lsr	x9, x10, x9
    2770:	stur	x9, [x29, #-64]
    2774:	ldurb	w8, [x29, #-91]
    2778:	ldur	w11, [x29, #-68]
    277c:	subs	w8, w11, w8
    2780:	stur	w8, [x29, #-68]
    2784:	ldurb	w8, [x29, #-91]
    2788:	ldur	x9, [x29, #-32]
    278c:	ldr	w10, [x9, #7148]
    2790:	add	w8, w10, w8
    2794:	str	w8, [x9, #7148]
    2798:	ldurb	w8, [x29, #-92]
    279c:	and	w8, w8, #0x40
    27a0:	cbz	w8, 27c4 <inflate+0x21c8>
    27a4:	ldur	x8, [x29, #-16]
    27a8:	adrp	x9, 0 <inflateResetKeep>
    27ac:	add	x9, x9, #0x0
    27b0:	str	x9, [x8, #48]
    27b4:	ldur	x8, [x29, #-32]
    27b8:	mov	w10, #0x3f51                	// #16209
    27bc:	str	w10, [x8, #8]
    27c0:	b	2dd4 <inflate+0x27d8>
    27c4:	ldurh	w8, [x29, #-90]
    27c8:	ldur	x9, [x29, #-32]
    27cc:	str	w8, [x9, #96]
    27d0:	ldurb	w8, [x29, #-92]
    27d4:	and	w8, w8, #0xf
    27d8:	ldur	x9, [x29, #-32]
    27dc:	str	w8, [x9, #100]
    27e0:	ldur	x9, [x29, #-32]
    27e4:	mov	w8, #0x3f4b                	// #16203
    27e8:	str	w8, [x9, #8]
    27ec:	ldur	x8, [x29, #-32]
    27f0:	ldr	w9, [x8, #100]
    27f4:	cbz	w9, 28d0 <inflate+0x22d4>
    27f8:	ldur	w8, [x29, #-68]
    27fc:	ldur	x9, [x29, #-32]
    2800:	ldr	w10, [x9, #100]
    2804:	cmp	w8, w10
    2808:	b.cs	2860 <inflate+0x2264>  // b.hs, b.nlast
    280c:	ldur	w8, [x29, #-52]
    2810:	cbnz	w8, 2818 <inflate+0x221c>
    2814:	b	2dd8 <inflate+0x27dc>
    2818:	ldur	w8, [x29, #-52]
    281c:	subs	w8, w8, #0x1
    2820:	stur	w8, [x29, #-52]
    2824:	ldur	x9, [x29, #-40]
    2828:	add	x10, x9, #0x1
    282c:	stur	x10, [x29, #-40]
    2830:	ldrb	w8, [x9]
    2834:	mov	w9, w8
    2838:	ldur	w8, [x29, #-68]
    283c:	mov	w10, w8
    2840:	lsl	x9, x9, x10
    2844:	ldur	x10, [x29, #-64]
    2848:	add	x9, x10, x9
    284c:	stur	x9, [x29, #-64]
    2850:	ldur	w8, [x29, #-68]
    2854:	add	w8, w8, #0x8
    2858:	stur	w8, [x29, #-68]
    285c:	b	27f8 <inflate+0x21fc>
    2860:	ldur	x8, [x29, #-64]
    2864:	ldur	x9, [x29, #-32]
    2868:	ldr	w10, [x9, #100]
    286c:	mov	w11, #0x1                   	// #1
    2870:	lsl	w10, w11, w10
    2874:	subs	w10, w10, #0x1
    2878:	and	w8, w8, w10
    287c:	ldur	x9, [x29, #-32]
    2880:	ldr	w10, [x9, #96]
    2884:	add	w8, w10, w8
    2888:	str	w8, [x9, #96]
    288c:	ldur	x8, [x29, #-32]
    2890:	ldr	w9, [x8, #100]
    2894:	mov	w8, w9
    2898:	ldur	x10, [x29, #-64]
    289c:	lsr	x8, x10, x8
    28a0:	stur	x8, [x29, #-64]
    28a4:	ldur	x8, [x29, #-32]
    28a8:	ldr	w9, [x8, #100]
    28ac:	ldur	w11, [x29, #-68]
    28b0:	subs	w9, w11, w9
    28b4:	stur	w9, [x29, #-68]
    28b8:	ldur	x8, [x29, #-32]
    28bc:	ldr	w9, [x8, #100]
    28c0:	ldur	x8, [x29, #-32]
    28c4:	ldr	w10, [x8, #7148]
    28c8:	add	w9, w10, w9
    28cc:	str	w9, [x8, #7148]
    28d0:	ldur	x8, [x29, #-32]
    28d4:	mov	w9, #0x3f4c                	// #16204
    28d8:	str	w9, [x8, #8]
    28dc:	ldur	w8, [x29, #-56]
    28e0:	cbnz	w8, 28e8 <inflate+0x22ec>
    28e4:	b	2dd8 <inflate+0x27dc>
    28e8:	ldur	w8, [x29, #-76]
    28ec:	ldur	w9, [x29, #-56]
    28f0:	subs	w8, w8, w9
    28f4:	stur	w8, [x29, #-80]
    28f8:	ldur	x10, [x29, #-32]
    28fc:	ldr	w8, [x10, #96]
    2900:	ldur	w9, [x29, #-80]
    2904:	cmp	w8, w9
    2908:	b.ls	2a00 <inflate+0x2404>  // b.plast
    290c:	ldur	x8, [x29, #-32]
    2910:	ldr	w9, [x8, #96]
    2914:	ldur	w10, [x29, #-80]
    2918:	subs	w9, w9, w10
    291c:	stur	w9, [x29, #-80]
    2920:	ldur	w9, [x29, #-80]
    2924:	ldur	x8, [x29, #-32]
    2928:	ldr	w10, [x8, #64]
    292c:	cmp	w9, w10
    2930:	b.ls	2960 <inflate+0x2364>  // b.plast
    2934:	ldur	x8, [x29, #-32]
    2938:	ldr	w9, [x8, #7144]
    293c:	cbz	w9, 2960 <inflate+0x2364>
    2940:	ldur	x8, [x29, #-16]
    2944:	adrp	x9, 0 <inflateResetKeep>
    2948:	add	x9, x9, #0x0
    294c:	str	x9, [x8, #48]
    2950:	ldur	x8, [x29, #-32]
    2954:	mov	w10, #0x3f51                	// #16209
    2958:	str	w10, [x8, #8]
    295c:	b	2dd4 <inflate+0x27d8>
    2960:	ldur	w8, [x29, #-80]
    2964:	ldur	x9, [x29, #-32]
    2968:	ldr	w10, [x9, #68]
    296c:	cmp	w8, w10
    2970:	b.ls	29b4 <inflate+0x23b8>  // b.plast
    2974:	ldur	x8, [x29, #-32]
    2978:	ldr	w9, [x8, #68]
    297c:	ldur	w10, [x29, #-80]
    2980:	subs	w9, w10, w9
    2984:	stur	w9, [x29, #-80]
    2988:	ldur	x8, [x29, #-32]
    298c:	ldr	x8, [x8, #72]
    2990:	ldur	x11, [x29, #-32]
    2994:	ldr	w9, [x11, #60]
    2998:	ldur	w10, [x29, #-80]
    299c:	subs	w9, w9, w10
    29a0:	mov	w11, w9
    29a4:	ubfx	x11, x11, #0, #32
    29a8:	add	x8, x8, x11
    29ac:	stur	x8, [x29, #-88]
    29b0:	b	29dc <inflate+0x23e0>
    29b4:	ldur	x8, [x29, #-32]
    29b8:	ldr	x8, [x8, #72]
    29bc:	ldur	x9, [x29, #-32]
    29c0:	ldr	w10, [x9, #68]
    29c4:	ldur	w11, [x29, #-80]
    29c8:	subs	w10, w10, w11
    29cc:	mov	w9, w10
    29d0:	ubfx	x9, x9, #0, #32
    29d4:	add	x8, x8, x9
    29d8:	stur	x8, [x29, #-88]
    29dc:	ldur	w8, [x29, #-80]
    29e0:	ldur	x9, [x29, #-32]
    29e4:	ldr	w10, [x9, #92]
    29e8:	cmp	w8, w10
    29ec:	b.ls	29fc <inflate+0x2400>  // b.plast
    29f0:	ldur	x8, [x29, #-32]
    29f4:	ldr	w9, [x8, #92]
    29f8:	stur	w9, [x29, #-80]
    29fc:	b	2a2c <inflate+0x2430>
    2a00:	ldur	x8, [x29, #-48]
    2a04:	ldur	x9, [x29, #-32]
    2a08:	ldr	w10, [x9, #96]
    2a0c:	mov	w9, w10
    2a10:	mov	x11, xzr
    2a14:	subs	x9, x11, x9
    2a18:	add	x8, x8, x9
    2a1c:	stur	x8, [x29, #-88]
    2a20:	ldur	x8, [x29, #-32]
    2a24:	ldr	w10, [x8, #92]
    2a28:	stur	w10, [x29, #-80]
    2a2c:	ldur	w8, [x29, #-80]
    2a30:	ldur	w9, [x29, #-56]
    2a34:	cmp	w8, w9
    2a38:	b.ls	2a44 <inflate+0x2448>  // b.plast
    2a3c:	ldur	w8, [x29, #-56]
    2a40:	stur	w8, [x29, #-80]
    2a44:	ldur	w8, [x29, #-80]
    2a48:	ldur	w9, [x29, #-56]
    2a4c:	subs	w8, w9, w8
    2a50:	stur	w8, [x29, #-56]
    2a54:	ldur	w8, [x29, #-80]
    2a58:	ldur	x10, [x29, #-32]
    2a5c:	ldr	w9, [x10, #92]
    2a60:	subs	w8, w9, w8
    2a64:	str	w8, [x10, #92]
    2a68:	ldur	x8, [x29, #-88]
    2a6c:	add	x9, x8, #0x1
    2a70:	stur	x9, [x29, #-88]
    2a74:	ldrb	w10, [x8]
    2a78:	ldur	x8, [x29, #-48]
    2a7c:	add	x9, x8, #0x1
    2a80:	stur	x9, [x29, #-48]
    2a84:	strb	w10, [x8]
    2a88:	ldur	w8, [x29, #-80]
    2a8c:	subs	w8, w8, #0x1
    2a90:	stur	w8, [x29, #-80]
    2a94:	cbnz	w8, 2a68 <inflate+0x246c>
    2a98:	ldur	x8, [x29, #-32]
    2a9c:	ldr	w9, [x8, #92]
    2aa0:	cbnz	w9, 2ab0 <inflate+0x24b4>
    2aa4:	ldur	x8, [x29, #-32]
    2aa8:	mov	w9, #0x3f48                	// #16200
    2aac:	str	w9, [x8, #8]
    2ab0:	b	2dd4 <inflate+0x27d8>
    2ab4:	ldur	w8, [x29, #-56]
    2ab8:	cbnz	w8, 2ac0 <inflate+0x24c4>
    2abc:	b	2dd8 <inflate+0x27dc>
    2ac0:	ldur	x8, [x29, #-32]
    2ac4:	ldr	w9, [x8, #92]
    2ac8:	ldur	x8, [x29, #-48]
    2acc:	add	x10, x8, #0x1
    2ad0:	stur	x10, [x29, #-48]
    2ad4:	strb	w9, [x8]
    2ad8:	ldur	w9, [x29, #-56]
    2adc:	subs	w9, w9, #0x1
    2ae0:	stur	w9, [x29, #-56]
    2ae4:	ldur	x8, [x29, #-32]
    2ae8:	mov	w9, #0x3f48                	// #16200
    2aec:	str	w9, [x8, #8]
    2af0:	b	2dd4 <inflate+0x27d8>
    2af4:	ldur	x8, [x29, #-32]
    2af8:	ldr	w9, [x8, #16]
    2afc:	cbz	w9, 2cd4 <inflate+0x26d8>
    2b00:	ldur	w8, [x29, #-68]
    2b04:	cmp	w8, #0x20
    2b08:	b.cs	2b60 <inflate+0x2564>  // b.hs, b.nlast
    2b0c:	ldur	w8, [x29, #-52]
    2b10:	cbnz	w8, 2b18 <inflate+0x251c>
    2b14:	b	2dd8 <inflate+0x27dc>
    2b18:	ldur	w8, [x29, #-52]
    2b1c:	subs	w8, w8, #0x1
    2b20:	stur	w8, [x29, #-52]
    2b24:	ldur	x9, [x29, #-40]
    2b28:	add	x10, x9, #0x1
    2b2c:	stur	x10, [x29, #-40]
    2b30:	ldrb	w8, [x9]
    2b34:	mov	w9, w8
    2b38:	ldur	w8, [x29, #-68]
    2b3c:	mov	w10, w8
    2b40:	lsl	x9, x9, x10
    2b44:	ldur	x10, [x29, #-64]
    2b48:	add	x9, x10, x9
    2b4c:	stur	x9, [x29, #-64]
    2b50:	ldur	w8, [x29, #-68]
    2b54:	add	w8, w8, #0x8
    2b58:	stur	w8, [x29, #-68]
    2b5c:	b	2b00 <inflate+0x2504>
    2b60:	ldur	w8, [x29, #-56]
    2b64:	ldur	w9, [x29, #-76]
    2b68:	subs	w8, w9, w8
    2b6c:	stur	w8, [x29, #-76]
    2b70:	ldur	w8, [x29, #-76]
    2b74:	mov	w10, w8
    2b78:	ldur	x11, [x29, #-16]
    2b7c:	ldr	x12, [x11, #40]
    2b80:	add	x10, x12, x10
    2b84:	str	x10, [x11, #40]
    2b88:	ldur	w8, [x29, #-76]
    2b8c:	mov	w10, w8
    2b90:	ldur	x11, [x29, #-32]
    2b94:	ldr	x12, [x11, #40]
    2b98:	add	x10, x12, x10
    2b9c:	str	x10, [x11, #40]
    2ba0:	ldur	x10, [x29, #-32]
    2ba4:	ldr	w8, [x10, #16]
    2ba8:	and	w8, w8, #0x4
    2bac:	cbz	w8, 2c34 <inflate+0x2638>
    2bb0:	ldur	w8, [x29, #-76]
    2bb4:	cbz	w8, 2c34 <inflate+0x2638>
    2bb8:	ldur	x8, [x29, #-32]
    2bbc:	ldr	w9, [x8, #24]
    2bc0:	cbz	w9, 2bf4 <inflate+0x25f8>
    2bc4:	ldur	x8, [x29, #-32]
    2bc8:	ldr	x0, [x8, #32]
    2bcc:	ldur	x8, [x29, #-48]
    2bd0:	ldur	w9, [x29, #-76]
    2bd4:	mov	w10, w9
    2bd8:	mov	x11, xzr
    2bdc:	subs	x10, x11, x10
    2be0:	add	x1, x8, x10
    2be4:	ldur	w2, [x29, #-76]
    2be8:	bl	0 <crc32>
    2bec:	str	x0, [sp, #24]
    2bf0:	b	2c20 <inflate+0x2624>
    2bf4:	ldur	x8, [x29, #-32]
    2bf8:	ldr	x0, [x8, #32]
    2bfc:	ldur	x8, [x29, #-48]
    2c00:	ldur	w9, [x29, #-76]
    2c04:	mov	w10, w9
    2c08:	mov	x11, xzr
    2c0c:	subs	x10, x11, x10
    2c10:	add	x1, x8, x10
    2c14:	ldur	w2, [x29, #-76]
    2c18:	bl	0 <adler32>
    2c1c:	str	x0, [sp, #24]
    2c20:	ldr	x8, [sp, #24]
    2c24:	ldur	x9, [x29, #-32]
    2c28:	str	x8, [x9, #32]
    2c2c:	ldur	x9, [x29, #-16]
    2c30:	str	x8, [x9, #96]
    2c34:	ldur	w8, [x29, #-56]
    2c38:	stur	w8, [x29, #-76]
    2c3c:	ldur	x9, [x29, #-32]
    2c40:	ldr	w8, [x9, #16]
    2c44:	and	w8, w8, #0x4
    2c48:	cbz	w8, 2ccc <inflate+0x26d0>
    2c4c:	ldur	x8, [x29, #-32]
    2c50:	ldr	w9, [x8, #24]
    2c54:	cbz	w9, 2c64 <inflate+0x2668>
    2c58:	ldur	x8, [x29, #-64]
    2c5c:	str	x8, [sp, #16]
    2c60:	b	2c98 <inflate+0x269c>
    2c64:	ldur	x8, [x29, #-64]
    2c68:	lsr	x8, x8, #24
    2c6c:	ldur	x9, [x29, #-64]
    2c70:	lsr	x9, x9, #8
    2c74:	and	x9, x9, #0xff00
    2c78:	add	x9, x9, w8, uxtb
    2c7c:	ldur	x10, [x29, #-64]
    2c80:	and	x10, x10, #0xff00
    2c84:	add	x9, x9, x10, lsl #8
    2c88:	ldur	x10, [x29, #-64]
    2c8c:	and	x10, x10, #0xff
    2c90:	add	x9, x9, x10, lsl #24
    2c94:	str	x9, [sp, #16]
    2c98:	ldr	x8, [sp, #16]
    2c9c:	ldur	x9, [x29, #-32]
    2ca0:	ldr	x9, [x9, #32]
    2ca4:	cmp	x8, x9
    2ca8:	b.eq	2ccc <inflate+0x26d0>  // b.none
    2cac:	ldur	x8, [x29, #-16]
    2cb0:	adrp	x9, 0 <inflateResetKeep>
    2cb4:	add	x9, x9, #0x0
    2cb8:	str	x9, [x8, #48]
    2cbc:	ldur	x8, [x29, #-32]
    2cc0:	mov	w10, #0x3f51                	// #16209
    2cc4:	str	w10, [x8, #8]
    2cc8:	b	2dd4 <inflate+0x27d8>
    2ccc:	stur	xzr, [x29, #-64]
    2cd0:	stur	wzr, [x29, #-68]
    2cd4:	ldur	x8, [x29, #-32]
    2cd8:	mov	w9, #0x3f4f                	// #16207
    2cdc:	str	w9, [x8, #8]
    2ce0:	ldur	x8, [x29, #-32]
    2ce4:	ldr	w9, [x8, #16]
    2ce8:	cbz	w9, 2d98 <inflate+0x279c>
    2cec:	ldur	x8, [x29, #-32]
    2cf0:	ldr	w9, [x8, #24]
    2cf4:	cbz	w9, 2d98 <inflate+0x279c>
    2cf8:	ldur	w8, [x29, #-68]
    2cfc:	cmp	w8, #0x20
    2d00:	b.cs	2d58 <inflate+0x275c>  // b.hs, b.nlast
    2d04:	ldur	w8, [x29, #-52]
    2d08:	cbnz	w8, 2d10 <inflate+0x2714>
    2d0c:	b	2dd8 <inflate+0x27dc>
    2d10:	ldur	w8, [x29, #-52]
    2d14:	subs	w8, w8, #0x1
    2d18:	stur	w8, [x29, #-52]
    2d1c:	ldur	x9, [x29, #-40]
    2d20:	add	x10, x9, #0x1
    2d24:	stur	x10, [x29, #-40]
    2d28:	ldrb	w8, [x9]
    2d2c:	mov	w9, w8
    2d30:	ldur	w8, [x29, #-68]
    2d34:	mov	w10, w8
    2d38:	lsl	x9, x9, x10
    2d3c:	ldur	x10, [x29, #-64]
    2d40:	add	x9, x10, x9
    2d44:	stur	x9, [x29, #-64]
    2d48:	ldur	w8, [x29, #-68]
    2d4c:	add	w8, w8, #0x8
    2d50:	stur	w8, [x29, #-68]
    2d54:	b	2cf8 <inflate+0x26fc>
    2d58:	ldur	x8, [x29, #-64]
    2d5c:	ldur	x9, [x29, #-32]
    2d60:	ldr	x9, [x9, #40]
    2d64:	and	x9, x9, #0xffffffff
    2d68:	cmp	x8, x9
    2d6c:	b.eq	2d90 <inflate+0x2794>  // b.none
    2d70:	ldur	x8, [x29, #-16]
    2d74:	adrp	x9, 0 <inflateResetKeep>
    2d78:	add	x9, x9, #0x0
    2d7c:	str	x9, [x8, #48]
    2d80:	ldur	x8, [x29, #-32]
    2d84:	mov	w10, #0x3f51                	// #16209
    2d88:	str	w10, [x8, #8]
    2d8c:	b	2dd4 <inflate+0x27d8>
    2d90:	stur	xzr, [x29, #-64]
    2d94:	stur	wzr, [x29, #-68]
    2d98:	ldur	x8, [x29, #-32]
    2d9c:	mov	w9, #0x3f50                	// #16208
    2da0:	str	w9, [x8, #8]
    2da4:	mov	w8, #0x1                   	// #1
    2da8:	str	w8, [sp, #88]
    2dac:	b	2dd8 <inflate+0x27dc>
    2db0:	mov	w8, #0xfffffffd            	// #-3
    2db4:	str	w8, [sp, #88]
    2db8:	b	2dd8 <inflate+0x27dc>
    2dbc:	mov	w8, #0xfffffffc            	// #-4
    2dc0:	stur	w8, [x29, #-4]
    2dc4:	b	308c <inflate+0x2a90>
    2dc8:	mov	w8, #0xfffffffe            	// #-2
    2dcc:	stur	w8, [x29, #-4]
    2dd0:	b	308c <inflate+0x2a90>
    2dd4:	b	6d4 <inflate+0xd8>
    2dd8:	ldur	x8, [x29, #-48]
    2ddc:	ldur	x9, [x29, #-16]
    2de0:	str	x8, [x9, #24]
    2de4:	ldur	w10, [x29, #-56]
    2de8:	ldur	x8, [x29, #-16]
    2dec:	str	w10, [x8, #32]
    2df0:	ldur	x8, [x29, #-40]
    2df4:	ldur	x9, [x29, #-16]
    2df8:	str	x8, [x9]
    2dfc:	ldur	w10, [x29, #-52]
    2e00:	ldur	x8, [x29, #-16]
    2e04:	str	w10, [x8, #8]
    2e08:	ldur	x8, [x29, #-64]
    2e0c:	ldur	x9, [x29, #-32]
    2e10:	str	x8, [x9, #80]
    2e14:	ldur	w10, [x29, #-68]
    2e18:	ldur	x8, [x29, #-32]
    2e1c:	str	w10, [x8, #88]
    2e20:	ldur	x8, [x29, #-32]
    2e24:	ldr	w9, [x8, #60]
    2e28:	cbnz	w9, 2e74 <inflate+0x2878>
    2e2c:	ldur	w8, [x29, #-76]
    2e30:	ldur	x9, [x29, #-16]
    2e34:	ldr	w10, [x9, #32]
    2e38:	cmp	w8, w10
    2e3c:	b.eq	2eb0 <inflate+0x28b4>  // b.none
    2e40:	ldur	x8, [x29, #-32]
    2e44:	ldr	w9, [x8, #8]
    2e48:	mov	w10, #0x3f51                	// #16209
    2e4c:	cmp	w9, w10
    2e50:	b.cs	2eb0 <inflate+0x28b4>  // b.hs, b.nlast
    2e54:	ldur	x8, [x29, #-32]
    2e58:	ldr	w9, [x8, #8]
    2e5c:	mov	w10, #0x3f4e                	// #16206
    2e60:	cmp	w9, w10
    2e64:	b.cc	2e74 <inflate+0x2878>  // b.lo, b.ul, b.last
    2e68:	ldur	w8, [x29, #-20]
    2e6c:	cmp	w8, #0x4
    2e70:	b.eq	2eb0 <inflate+0x28b4>  // b.none
    2e74:	ldur	x0, [x29, #-16]
    2e78:	ldur	x8, [x29, #-16]
    2e7c:	ldr	x1, [x8, #24]
    2e80:	ldur	w9, [x29, #-76]
    2e84:	ldur	x8, [x29, #-16]
    2e88:	ldr	w10, [x8, #32]
    2e8c:	subs	w2, w9, w10
    2e90:	bl	30e4 <updatewindow>
    2e94:	cbz	w0, 2eb0 <inflate+0x28b4>
    2e98:	ldur	x8, [x29, #-32]
    2e9c:	mov	w9, #0x3f52                	// #16210
    2ea0:	str	w9, [x8, #8]
    2ea4:	mov	w9, #0xfffffffc            	// #-4
    2ea8:	stur	w9, [x29, #-4]
    2eac:	b	308c <inflate+0x2a90>
    2eb0:	ldur	x8, [x29, #-16]
    2eb4:	ldr	w9, [x8, #8]
    2eb8:	ldur	w10, [x29, #-72]
    2ebc:	subs	w9, w10, w9
    2ec0:	stur	w9, [x29, #-72]
    2ec4:	ldur	x8, [x29, #-16]
    2ec8:	ldr	w9, [x8, #32]
    2ecc:	ldur	w10, [x29, #-76]
    2ed0:	subs	w9, w10, w9
    2ed4:	stur	w9, [x29, #-76]
    2ed8:	ldur	w9, [x29, #-72]
    2edc:	mov	w8, w9
    2ee0:	ldur	x11, [x29, #-16]
    2ee4:	ldr	x12, [x11, #16]
    2ee8:	add	x8, x12, x8
    2eec:	str	x8, [x11, #16]
    2ef0:	ldur	w9, [x29, #-76]
    2ef4:	mov	w8, w9
    2ef8:	ldur	x11, [x29, #-16]
    2efc:	ldr	x12, [x11, #40]
    2f00:	add	x8, x12, x8
    2f04:	str	x8, [x11, #40]
    2f08:	ldur	w9, [x29, #-76]
    2f0c:	mov	w8, w9
    2f10:	ldur	x11, [x29, #-32]
    2f14:	ldr	x12, [x11, #40]
    2f18:	add	x8, x12, x8
    2f1c:	str	x8, [x11, #40]
    2f20:	ldur	x8, [x29, #-32]
    2f24:	ldr	w9, [x8, #16]
    2f28:	and	w9, w9, #0x4
    2f2c:	cbz	w9, 2fbc <inflate+0x29c0>
    2f30:	ldur	w8, [x29, #-76]
    2f34:	cbz	w8, 2fbc <inflate+0x29c0>
    2f38:	ldur	x8, [x29, #-32]
    2f3c:	ldr	w9, [x8, #24]
    2f40:	cbz	w9, 2f78 <inflate+0x297c>
    2f44:	ldur	x8, [x29, #-32]
    2f48:	ldr	x0, [x8, #32]
    2f4c:	ldur	x8, [x29, #-16]
    2f50:	ldr	x8, [x8, #24]
    2f54:	ldur	w9, [x29, #-76]
    2f58:	mov	w10, w9
    2f5c:	mov	x11, xzr
    2f60:	subs	x10, x11, x10
    2f64:	add	x1, x8, x10
    2f68:	ldur	w2, [x29, #-76]
    2f6c:	bl	0 <crc32>
    2f70:	str	x0, [sp, #8]
    2f74:	b	2fa8 <inflate+0x29ac>
    2f78:	ldur	x8, [x29, #-32]
    2f7c:	ldr	x0, [x8, #32]
    2f80:	ldur	x8, [x29, #-16]
    2f84:	ldr	x8, [x8, #24]
    2f88:	ldur	w9, [x29, #-76]
    2f8c:	mov	w10, w9
    2f90:	mov	x11, xzr
    2f94:	subs	x10, x11, x10
    2f98:	add	x1, x8, x10
    2f9c:	ldur	w2, [x29, #-76]
    2fa0:	bl	0 <adler32>
    2fa4:	str	x0, [sp, #8]
    2fa8:	ldr	x8, [sp, #8]
    2fac:	ldur	x9, [x29, #-32]
    2fb0:	str	x8, [x9, #32]
    2fb4:	ldur	x9, [x29, #-16]
    2fb8:	str	x8, [x9, #96]
    2fbc:	ldur	x8, [x29, #-32]
    2fc0:	ldr	w9, [x8, #88]
    2fc4:	ldur	x8, [x29, #-32]
    2fc8:	ldr	w10, [x8, #12]
    2fcc:	mov	w11, wzr
    2fd0:	mov	w12, #0x40                  	// #64
    2fd4:	cmp	w10, #0x0
    2fd8:	csel	w10, w12, w11, ne  // ne = any
    2fdc:	add	w9, w9, w10
    2fe0:	ldur	x8, [x29, #-32]
    2fe4:	ldr	w10, [x8, #8]
    2fe8:	mov	w12, #0x3f3f                	// #16191
    2fec:	mov	w13, #0x80                  	// #128
    2ff0:	cmp	w10, w12
    2ff4:	csel	w10, w13, w11, eq  // eq = none
    2ff8:	add	w9, w9, w10
    2ffc:	ldur	x8, [x29, #-32]
    3000:	ldr	w10, [x8, #8]
    3004:	mov	w11, #0x3f47                	// #16199
    3008:	mov	w12, #0x1                   	// #1
    300c:	cmp	w10, w11
    3010:	str	w9, [sp, #4]
    3014:	str	w12, [sp]
    3018:	b.eq	3034 <inflate+0x2a38>  // b.none
    301c:	ldur	x8, [x29, #-32]
    3020:	ldr	w9, [x8, #8]
    3024:	mov	w10, #0x3f42                	// #16194
    3028:	cmp	w9, w10
    302c:	cset	w9, eq  // eq = none
    3030:	str	w9, [sp]
    3034:	ldr	w8, [sp]
    3038:	mov	w9, #0x100                 	// #256
    303c:	mov	w10, wzr
    3040:	tst	w8, #0x1
    3044:	csel	w8, w9, w10, ne  // ne = any
    3048:	ldr	w9, [sp, #4]
    304c:	add	w8, w9, w8
    3050:	ldur	x11, [x29, #-16]
    3054:	str	w8, [x11, #88]
    3058:	ldur	w8, [x29, #-72]
    305c:	cbnz	w8, 3068 <inflate+0x2a6c>
    3060:	ldur	w8, [x29, #-76]
    3064:	cbz	w8, 3074 <inflate+0x2a78>
    3068:	ldur	w8, [x29, #-20]
    306c:	cmp	w8, #0x4
    3070:	b.ne	3084 <inflate+0x2a88>  // b.any
    3074:	ldr	w8, [sp, #88]
    3078:	cbnz	w8, 3084 <inflate+0x2a88>
    307c:	mov	w8, #0xfffffffb            	// #-5
    3080:	str	w8, [sp, #88]
    3084:	ldr	w8, [sp, #88]
    3088:	stur	w8, [x29, #-4]
    308c:	ldur	w0, [x29, #-4]
    3090:	ldp	x29, x30, [sp, #192]
    3094:	add	sp, sp, #0xd0
    3098:	ret

000000000000309c <fixedtables>:
    309c:	sub	sp, sp, #0x10
    30a0:	adrp	x8, 0 <inflateResetKeep>
    30a4:	add	x8, x8, #0x0
    30a8:	mov	w9, #0x9                   	// #9
    30ac:	adrp	x10, 0 <inflateResetKeep>
    30b0:	add	x10, x10, #0x0
    30b4:	mov	w11, #0x5                   	// #5
    30b8:	str	x0, [sp, #8]
    30bc:	ldr	x12, [sp, #8]
    30c0:	str	x8, [x12, #104]
    30c4:	ldr	x8, [sp, #8]
    30c8:	str	w9, [x8, #120]
    30cc:	ldr	x8, [sp, #8]
    30d0:	str	x10, [x8, #112]
    30d4:	ldr	x8, [sp, #8]
    30d8:	str	w11, [x8, #124]
    30dc:	add	sp, sp, #0x10
    30e0:	ret

00000000000030e4 <updatewindow>:
    30e4:	sub	sp, sp, #0x40
    30e8:	stp	x29, x30, [sp, #48]
    30ec:	add	x29, sp, #0x30
    30f0:	stur	x0, [x29, #-16]
    30f4:	str	x1, [sp, #24]
    30f8:	str	w2, [sp, #20]
    30fc:	ldur	x8, [x29, #-16]
    3100:	ldr	x8, [x8, #56]
    3104:	str	x8, [sp, #8]
    3108:	ldr	x8, [sp, #8]
    310c:	ldr	x8, [x8, #72]
    3110:	cbnz	x8, 315c <updatewindow+0x78>
    3114:	ldur	x8, [x29, #-16]
    3118:	ldr	x8, [x8, #64]
    311c:	ldur	x9, [x29, #-16]
    3120:	ldr	x0, [x9, #80]
    3124:	ldr	x9, [sp, #8]
    3128:	ldr	w10, [x9, #56]
    312c:	mov	w11, #0x1                   	// #1
    3130:	lsl	w1, w11, w10
    3134:	mov	w2, w11
    3138:	blr	x8
    313c:	ldr	x8, [sp, #8]
    3140:	str	x0, [x8, #72]
    3144:	ldr	x8, [sp, #8]
    3148:	ldr	x8, [x8, #72]
    314c:	cbnz	x8, 315c <updatewindow+0x78>
    3150:	mov	w8, #0x1                   	// #1
    3154:	stur	w8, [x29, #-4]
    3158:	b	3328 <updatewindow+0x244>
    315c:	ldr	x8, [sp, #8]
    3160:	ldr	w9, [x8, #60]
    3164:	cbnz	w9, 3190 <updatewindow+0xac>
    3168:	ldr	x8, [sp, #8]
    316c:	ldr	w9, [x8, #56]
    3170:	mov	w10, #0x1                   	// #1
    3174:	lsl	w9, w10, w9
    3178:	ldr	x8, [sp, #8]
    317c:	str	w9, [x8, #60]
    3180:	ldr	x8, [sp, #8]
    3184:	str	wzr, [x8, #68]
    3188:	ldr	x8, [sp, #8]
    318c:	str	wzr, [x8, #64]
    3190:	ldr	w8, [sp, #20]
    3194:	ldr	x9, [sp, #8]
    3198:	ldr	w10, [x9, #60]
    319c:	cmp	w8, w10
    31a0:	b.cc	31f4 <updatewindow+0x110>  // b.lo, b.ul, b.last
    31a4:	ldr	x8, [sp, #8]
    31a8:	ldr	x0, [x8, #72]
    31ac:	ldr	x8, [sp, #24]
    31b0:	ldr	x9, [sp, #8]
    31b4:	ldr	w10, [x9, #60]
    31b8:	mov	w9, w10
    31bc:	mov	x11, xzr
    31c0:	subs	x9, x11, x9
    31c4:	add	x1, x8, x9
    31c8:	ldr	x8, [sp, #8]
    31cc:	ldr	w10, [x8, #60]
    31d0:	mov	w2, w10
    31d4:	bl	0 <memcpy>
    31d8:	ldr	x8, [sp, #8]
    31dc:	str	wzr, [x8, #68]
    31e0:	ldr	x8, [sp, #8]
    31e4:	ldr	w10, [x8, #60]
    31e8:	ldr	x8, [sp, #8]
    31ec:	str	w10, [x8, #64]
    31f0:	b	3324 <updatewindow+0x240>
    31f4:	ldr	x8, [sp, #8]
    31f8:	ldr	w9, [x8, #60]
    31fc:	ldr	x8, [sp, #8]
    3200:	ldr	w10, [x8, #68]
    3204:	subs	w9, w9, w10
    3208:	str	w9, [sp, #4]
    320c:	ldr	w9, [sp, #4]
    3210:	ldr	w10, [sp, #20]
    3214:	cmp	w9, w10
    3218:	b.ls	3224 <updatewindow+0x140>  // b.plast
    321c:	ldr	w8, [sp, #20]
    3220:	str	w8, [sp, #4]
    3224:	ldr	x8, [sp, #8]
    3228:	ldr	x8, [x8, #72]
    322c:	ldr	x9, [sp, #8]
    3230:	ldr	w10, [x9, #68]
    3234:	mov	w9, w10
    3238:	add	x0, x8, x9
    323c:	ldr	x8, [sp, #24]
    3240:	ldr	w10, [sp, #20]
    3244:	mov	w9, w10
    3248:	mov	x11, xzr
    324c:	subs	x9, x11, x9
    3250:	add	x1, x8, x9
    3254:	ldr	w10, [sp, #4]
    3258:	mov	w2, w10
    325c:	bl	0 <memcpy>
    3260:	ldr	w10, [sp, #4]
    3264:	ldr	w12, [sp, #20]
    3268:	subs	w10, w12, w10
    326c:	str	w10, [sp, #20]
    3270:	ldr	w10, [sp, #20]
    3274:	cbz	w10, 32c4 <updatewindow+0x1e0>
    3278:	ldr	x8, [sp, #8]
    327c:	ldr	x0, [x8, #72]
    3280:	ldr	x8, [sp, #24]
    3284:	ldr	w9, [sp, #20]
    3288:	mov	w10, w9
    328c:	mov	x11, xzr
    3290:	subs	x10, x11, x10
    3294:	add	x1, x8, x10
    3298:	ldr	w9, [sp, #20]
    329c:	mov	w2, w9
    32a0:	bl	0 <memcpy>
    32a4:	ldr	w9, [sp, #20]
    32a8:	ldr	x8, [sp, #8]
    32ac:	str	w9, [x8, #68]
    32b0:	ldr	x8, [sp, #8]
    32b4:	ldr	w9, [x8, #60]
    32b8:	ldr	x8, [sp, #8]
    32bc:	str	w9, [x8, #64]
    32c0:	b	3324 <updatewindow+0x240>
    32c4:	ldr	w8, [sp, #4]
    32c8:	ldr	x9, [sp, #8]
    32cc:	ldr	w10, [x9, #68]
    32d0:	add	w8, w10, w8
    32d4:	str	w8, [x9, #68]
    32d8:	ldr	x9, [sp, #8]
    32dc:	ldr	w8, [x9, #68]
    32e0:	ldr	x9, [sp, #8]
    32e4:	ldr	w10, [x9, #60]
    32e8:	cmp	w8, w10
    32ec:	b.ne	32f8 <updatewindow+0x214>  // b.any
    32f0:	ldr	x8, [sp, #8]
    32f4:	str	wzr, [x8, #68]
    32f8:	ldr	x8, [sp, #8]
    32fc:	ldr	w9, [x8, #64]
    3300:	ldr	x8, [sp, #8]
    3304:	ldr	w10, [x8, #60]
    3308:	cmp	w9, w10
    330c:	b.cs	3324 <updatewindow+0x240>  // b.hs, b.nlast
    3310:	ldr	w8, [sp, #4]
    3314:	ldr	x9, [sp, #8]
    3318:	ldr	w10, [x9, #64]
    331c:	add	w8, w10, w8
    3320:	str	w8, [x9, #64]
    3324:	stur	wzr, [x29, #-4]
    3328:	ldur	w0, [x29, #-4]
    332c:	ldp	x29, x30, [sp, #48]
    3330:	add	sp, sp, #0x40
    3334:	ret

0000000000003338 <inflateEnd>:
    3338:	sub	sp, sp, #0x30
    333c:	stp	x29, x30, [sp, #32]
    3340:	add	x29, sp, #0x20
    3344:	str	x0, [sp, #16]
    3348:	ldr	x0, [sp, #16]
    334c:	bl	110 <inflateStateCheck>
    3350:	cbz	w0, 3360 <inflateEnd+0x28>
    3354:	mov	w8, #0xfffffffe            	// #-2
    3358:	stur	w8, [x29, #-4]
    335c:	b	33c0 <inflateEnd+0x88>
    3360:	ldr	x8, [sp, #16]
    3364:	ldr	x8, [x8, #56]
    3368:	str	x8, [sp, #8]
    336c:	ldr	x8, [sp, #8]
    3370:	ldr	x8, [x8, #72]
    3374:	cbz	x8, 3394 <inflateEnd+0x5c>
    3378:	ldr	x8, [sp, #16]
    337c:	ldr	x8, [x8, #72]
    3380:	ldr	x9, [sp, #16]
    3384:	ldr	x0, [x9, #80]
    3388:	ldr	x9, [sp, #8]
    338c:	ldr	x1, [x9, #72]
    3390:	blr	x8
    3394:	ldr	x8, [sp, #16]
    3398:	ldr	x8, [x8, #72]
    339c:	ldr	x9, [sp, #16]
    33a0:	ldr	x0, [x9, #80]
    33a4:	ldr	x9, [sp, #16]
    33a8:	ldr	x1, [x9, #56]
    33ac:	blr	x8
    33b0:	ldr	x8, [sp, #16]
    33b4:	mov	x9, xzr
    33b8:	str	x9, [x8, #56]
    33bc:	stur	wzr, [x29, #-4]
    33c0:	ldur	w0, [x29, #-4]
    33c4:	ldp	x29, x30, [sp, #32]
    33c8:	add	sp, sp, #0x30
    33cc:	ret

00000000000033d0 <inflateGetDictionary>:
    33d0:	sub	sp, sp, #0x40
    33d4:	stp	x29, x30, [sp, #48]
    33d8:	add	x29, sp, #0x30
    33dc:	stur	x0, [x29, #-16]
    33e0:	str	x1, [sp, #24]
    33e4:	str	x2, [sp, #16]
    33e8:	ldur	x0, [x29, #-16]
    33ec:	bl	110 <inflateStateCheck>
    33f0:	cbz	w0, 3400 <inflateGetDictionary+0x30>
    33f4:	mov	w8, #0xfffffffe            	// #-2
    33f8:	stur	w8, [x29, #-4]
    33fc:	b	34bc <inflateGetDictionary+0xec>
    3400:	ldur	x8, [x29, #-16]
    3404:	ldr	x8, [x8, #56]
    3408:	str	x8, [sp, #8]
    340c:	ldr	x8, [sp, #8]
    3410:	ldr	w9, [x8, #64]
    3414:	cbz	w9, 34a0 <inflateGetDictionary+0xd0>
    3418:	ldr	x8, [sp, #24]
    341c:	cbz	x8, 34a0 <inflateGetDictionary+0xd0>
    3420:	ldr	x0, [sp, #24]
    3424:	ldr	x8, [sp, #8]
    3428:	ldr	x8, [x8, #72]
    342c:	ldr	x9, [sp, #8]
    3430:	ldr	w10, [x9, #68]
    3434:	mov	w9, w10
    3438:	add	x1, x8, x9
    343c:	ldr	x8, [sp, #8]
    3440:	ldr	w10, [x8, #64]
    3444:	ldr	x8, [sp, #8]
    3448:	ldr	w11, [x8, #68]
    344c:	subs	w10, w10, w11
    3450:	mov	w8, w10
    3454:	ubfx	x2, x8, #0, #32
    3458:	bl	0 <memcpy>
    345c:	ldr	x8, [sp, #24]
    3460:	ldr	x9, [sp, #8]
    3464:	ldr	w10, [x9, #64]
    3468:	mov	w9, w10
    346c:	add	x8, x8, x9
    3470:	ldr	x9, [sp, #8]
    3474:	ldr	w10, [x9, #68]
    3478:	mov	w9, w10
    347c:	mov	x12, xzr
    3480:	subs	x9, x12, x9
    3484:	add	x0, x8, x9
    3488:	ldr	x8, [sp, #8]
    348c:	ldr	x1, [x8, #72]
    3490:	ldr	x8, [sp, #8]
    3494:	ldr	w10, [x8, #68]
    3498:	mov	w2, w10
    349c:	bl	0 <memcpy>
    34a0:	ldr	x8, [sp, #16]
    34a4:	cbz	x8, 34b8 <inflateGetDictionary+0xe8>
    34a8:	ldr	x8, [sp, #8]
    34ac:	ldr	w9, [x8, #64]
    34b0:	ldr	x8, [sp, #16]
    34b4:	str	w9, [x8]
    34b8:	stur	wzr, [x29, #-4]
    34bc:	ldur	w0, [x29, #-4]
    34c0:	ldp	x29, x30, [sp, #48]
    34c4:	add	sp, sp, #0x40
    34c8:	ret

00000000000034cc <inflateSetDictionary>:
    34cc:	sub	sp, sp, #0x50
    34d0:	stp	x29, x30, [sp, #64]
    34d4:	add	x29, sp, #0x40
    34d8:	stur	x0, [x29, #-16]
    34dc:	stur	x1, [x29, #-24]
    34e0:	stur	w2, [x29, #-28]
    34e4:	ldur	x0, [x29, #-16]
    34e8:	bl	110 <inflateStateCheck>
    34ec:	cbz	w0, 34fc <inflateSetDictionary+0x30>
    34f0:	mov	w8, #0xfffffffe            	// #-2
    34f4:	stur	w8, [x29, #-4]
    34f8:	b	35e8 <inflateSetDictionary+0x11c>
    34fc:	ldur	x8, [x29, #-16]
    3500:	ldr	x8, [x8, #56]
    3504:	str	x8, [sp, #24]
    3508:	ldr	x8, [sp, #24]
    350c:	ldr	w9, [x8, #16]
    3510:	cbz	w9, 3534 <inflateSetDictionary+0x68>
    3514:	ldr	x8, [sp, #24]
    3518:	ldr	w9, [x8, #8]
    351c:	mov	w10, #0x3f3e                	// #16190
    3520:	cmp	w9, w10
    3524:	b.eq	3534 <inflateSetDictionary+0x68>  // b.none
    3528:	mov	w8, #0xfffffffe            	// #-2
    352c:	stur	w8, [x29, #-4]
    3530:	b	35e8 <inflateSetDictionary+0x11c>
    3534:	ldr	x8, [sp, #24]
    3538:	ldr	w9, [x8, #8]
    353c:	mov	w10, #0x3f3e                	// #16190
    3540:	cmp	w9, w10
    3544:	b.ne	3598 <inflateSetDictionary+0xcc>  // b.any
    3548:	mov	x8, xzr
    354c:	mov	x0, x8
    3550:	mov	x1, x8
    3554:	mov	w9, wzr
    3558:	mov	w2, w9
    355c:	bl	0 <adler32>
    3560:	str	x0, [sp, #16]
    3564:	ldr	x0, [sp, #16]
    3568:	ldur	x1, [x29, #-24]
    356c:	ldur	w2, [x29, #-28]
    3570:	bl	0 <adler32>
    3574:	str	x0, [sp, #16]
    3578:	ldr	x8, [sp, #16]
    357c:	ldr	x10, [sp, #24]
    3580:	ldr	x10, [x10, #32]
    3584:	cmp	x8, x10
    3588:	b.eq	3598 <inflateSetDictionary+0xcc>  // b.none
    358c:	mov	w8, #0xfffffffd            	// #-3
    3590:	stur	w8, [x29, #-4]
    3594:	b	35e8 <inflateSetDictionary+0x11c>
    3598:	ldur	x0, [x29, #-16]
    359c:	ldur	x8, [x29, #-24]
    35a0:	ldur	w9, [x29, #-28]
    35a4:	mov	w10, w9
    35a8:	add	x1, x8, x10
    35ac:	ldur	w2, [x29, #-28]
    35b0:	bl	30e4 <updatewindow>
    35b4:	str	w0, [sp, #12]
    35b8:	ldr	w9, [sp, #12]
    35bc:	cbz	w9, 35d8 <inflateSetDictionary+0x10c>
    35c0:	ldr	x8, [sp, #24]
    35c4:	mov	w9, #0x3f52                	// #16210
    35c8:	str	w9, [x8, #8]
    35cc:	mov	w9, #0xfffffffc            	// #-4
    35d0:	stur	w9, [x29, #-4]
    35d4:	b	35e8 <inflateSetDictionary+0x11c>
    35d8:	ldr	x8, [sp, #24]
    35dc:	mov	w9, #0x1                   	// #1
    35e0:	str	w9, [x8, #20]
    35e4:	stur	wzr, [x29, #-4]
    35e8:	ldur	w0, [x29, #-4]
    35ec:	ldp	x29, x30, [sp, #64]
    35f0:	add	sp, sp, #0x50
    35f4:	ret

00000000000035f8 <inflateGetHeader>:
    35f8:	sub	sp, sp, #0x30
    35fc:	stp	x29, x30, [sp, #32]
    3600:	add	x29, sp, #0x20
    3604:	str	x0, [sp, #16]
    3608:	str	x1, [sp, #8]
    360c:	ldr	x0, [sp, #16]
    3610:	bl	110 <inflateStateCheck>
    3614:	cbz	w0, 3624 <inflateGetHeader+0x2c>
    3618:	mov	w8, #0xfffffffe            	// #-2
    361c:	stur	w8, [x29, #-4]
    3620:	b	3664 <inflateGetHeader+0x6c>
    3624:	ldr	x8, [sp, #16]
    3628:	ldr	x8, [x8, #56]
    362c:	str	x8, [sp]
    3630:	ldr	x8, [sp]
    3634:	ldr	w9, [x8, #16]
    3638:	and	w9, w9, #0x2
    363c:	cbnz	w9, 364c <inflateGetHeader+0x54>
    3640:	mov	w8, #0xfffffffe            	// #-2
    3644:	stur	w8, [x29, #-4]
    3648:	b	3664 <inflateGetHeader+0x6c>
    364c:	ldr	x8, [sp, #8]
    3650:	ldr	x9, [sp]
    3654:	str	x8, [x9, #48]
    3658:	ldr	x8, [sp, #8]
    365c:	str	wzr, [x8, #72]
    3660:	stur	wzr, [x29, #-4]
    3664:	ldur	w0, [x29, #-4]
    3668:	ldp	x29, x30, [sp, #32]
    366c:	add	sp, sp, #0x30
    3670:	ret

0000000000003674 <inflateSync>:
    3674:	sub	sp, sp, #0x50
    3678:	stp	x29, x30, [sp, #64]
    367c:	add	x29, sp, #0x40
    3680:	stur	x0, [x29, #-16]
    3684:	ldur	x0, [x29, #-16]
    3688:	bl	110 <inflateStateCheck>
    368c:	cbz	w0, 369c <inflateSync+0x28>
    3690:	mov	w8, #0xfffffffe            	// #-2
    3694:	stur	w8, [x29, #-4]
    3698:	b	3870 <inflateSync+0x1fc>
    369c:	ldur	x8, [x29, #-16]
    36a0:	ldr	x8, [x8, #56]
    36a4:	str	x8, [sp, #8]
    36a8:	ldur	x8, [x29, #-16]
    36ac:	ldr	w9, [x8, #8]
    36b0:	cbnz	w9, 36d0 <inflateSync+0x5c>
    36b4:	ldr	x8, [sp, #8]
    36b8:	ldr	w9, [x8, #88]
    36bc:	cmp	w9, #0x8
    36c0:	b.cs	36d0 <inflateSync+0x5c>  // b.hs, b.nlast
    36c4:	mov	w8, #0xfffffffb            	// #-5
    36c8:	stur	w8, [x29, #-4]
    36cc:	b	3870 <inflateSync+0x1fc>
    36d0:	ldr	x8, [sp, #8]
    36d4:	ldr	w9, [x8, #8]
    36d8:	mov	w10, #0x3f53                	// #16211
    36dc:	cmp	w9, w10
    36e0:	b.eq	37a8 <inflateSync+0x134>  // b.none
    36e4:	ldr	x8, [sp, #8]
    36e8:	mov	w9, #0x3f53                	// #16211
    36ec:	str	w9, [x8, #8]
    36f0:	ldr	x8, [sp, #8]
    36f4:	ldr	w9, [x8, #88]
    36f8:	and	w9, w9, #0x7
    36fc:	ldr	x8, [sp, #8]
    3700:	ldr	x10, [x8, #80]
    3704:	mov	w11, w9
    3708:	lsl	x10, x10, x11
    370c:	str	x10, [x8, #80]
    3710:	ldr	x8, [sp, #8]
    3714:	ldr	w9, [x8, #88]
    3718:	and	w9, w9, #0x7
    371c:	ldr	x8, [sp, #8]
    3720:	ldr	w12, [x8, #88]
    3724:	subs	w9, w12, w9
    3728:	str	w9, [x8, #88]
    372c:	stur	wzr, [x29, #-20]
    3730:	ldr	x8, [sp, #8]
    3734:	ldr	w9, [x8, #88]
    3738:	cmp	w9, #0x8
    373c:	b.cc	378c <inflateSync+0x118>  // b.lo, b.ul, b.last
    3740:	ldr	x8, [sp, #8]
    3744:	ldr	x8, [x8, #80]
    3748:	ldur	w9, [x29, #-20]
    374c:	mov	w10, w9
    3750:	mov	w9, w10
    3754:	add	w9, w9, #0x1
    3758:	stur	w9, [x29, #-20]
    375c:	add	x11, sp, #0x14
    3760:	add	x10, x11, x10
    3764:	strb	w8, [x10]
    3768:	ldr	x10, [sp, #8]
    376c:	ldr	x11, [x10, #80]
    3770:	lsr	x11, x11, #8
    3774:	str	x11, [x10, #80]
    3778:	ldr	x10, [sp, #8]
    377c:	ldr	w8, [x10, #88]
    3780:	subs	w8, w8, #0x8
    3784:	str	w8, [x10, #88]
    3788:	b	3730 <inflateSync+0xbc>
    378c:	ldr	x8, [sp, #8]
    3790:	str	wzr, [x8, #140]
    3794:	ldr	x8, [sp, #8]
    3798:	add	x0, x8, #0x8c
    379c:	ldur	w2, [x29, #-20]
    37a0:	add	x1, sp, #0x14
    37a4:	bl	3880 <syncsearch>
    37a8:	ldr	x8, [sp, #8]
    37ac:	add	x0, x8, #0x8c
    37b0:	ldur	x8, [x29, #-16]
    37b4:	ldr	x1, [x8]
    37b8:	ldur	x8, [x29, #-16]
    37bc:	ldr	w2, [x8, #8]
    37c0:	bl	3880 <syncsearch>
    37c4:	stur	w0, [x29, #-20]
    37c8:	ldur	w9, [x29, #-20]
    37cc:	ldur	x8, [x29, #-16]
    37d0:	ldr	w10, [x8, #8]
    37d4:	subs	w9, w10, w9
    37d8:	str	w9, [x8, #8]
    37dc:	ldur	w9, [x29, #-20]
    37e0:	mov	w8, w9
    37e4:	ldur	x11, [x29, #-16]
    37e8:	ldr	x12, [x11]
    37ec:	add	x8, x12, x8
    37f0:	str	x8, [x11]
    37f4:	ldur	w9, [x29, #-20]
    37f8:	mov	w8, w9
    37fc:	ldur	x11, [x29, #-16]
    3800:	ldr	x12, [x11, #16]
    3804:	add	x8, x12, x8
    3808:	str	x8, [x11, #16]
    380c:	ldr	x8, [sp, #8]
    3810:	ldr	w9, [x8, #140]
    3814:	cmp	w9, #0x4
    3818:	b.eq	3828 <inflateSync+0x1b4>  // b.none
    381c:	mov	w8, #0xfffffffd            	// #-3
    3820:	stur	w8, [x29, #-4]
    3824:	b	3870 <inflateSync+0x1fc>
    3828:	ldur	x8, [x29, #-16]
    382c:	ldr	x8, [x8, #16]
    3830:	str	x8, [sp, #32]
    3834:	ldur	x8, [x29, #-16]
    3838:	ldr	x8, [x8, #40]
    383c:	str	x8, [sp, #24]
    3840:	ldur	x0, [x29, #-16]
    3844:	bl	1b0 <inflateReset>
    3848:	ldr	x8, [sp, #32]
    384c:	ldur	x9, [x29, #-16]
    3850:	str	x8, [x9, #16]
    3854:	ldr	x8, [sp, #24]
    3858:	ldur	x9, [x29, #-16]
    385c:	str	x8, [x9, #40]
    3860:	ldr	x8, [sp, #8]
    3864:	mov	w10, #0x3f3f                	// #16191
    3868:	str	w10, [x8, #8]
    386c:	stur	wzr, [x29, #-4]
    3870:	ldur	w0, [x29, #-4]
    3874:	ldp	x29, x30, [sp, #64]
    3878:	add	sp, sp, #0x50
    387c:	ret

0000000000003880 <syncsearch>:
    3880:	sub	sp, sp, #0x20
    3884:	str	x0, [sp, #24]
    3888:	str	x1, [sp, #16]
    388c:	str	w2, [sp, #12]
    3890:	ldr	x8, [sp, #24]
    3894:	ldr	w9, [x8]
    3898:	str	w9, [sp, #8]
    389c:	str	wzr, [sp, #4]
    38a0:	ldr	w8, [sp, #4]
    38a4:	ldr	w9, [sp, #12]
    38a8:	mov	w10, #0x0                   	// #0
    38ac:	cmp	w8, w9
    38b0:	str	w10, [sp]
    38b4:	b.cs	38c8 <syncsearch+0x48>  // b.hs, b.nlast
    38b8:	ldr	w8, [sp, #8]
    38bc:	cmp	w8, #0x4
    38c0:	cset	w8, cc  // cc = lo, ul, last
    38c4:	str	w8, [sp]
    38c8:	ldr	w8, [sp]
    38cc:	tbnz	w8, #0, 38d4 <syncsearch+0x54>
    38d0:	b	3950 <syncsearch+0xd0>
    38d4:	ldr	x8, [sp, #16]
    38d8:	ldr	w9, [sp, #4]
    38dc:	mov	w10, w9
    38e0:	ldrb	w9, [x8, x10]
    38e4:	ldr	w11, [sp, #8]
    38e8:	mov	w12, #0xff                  	// #255
    38ec:	mov	w13, wzr
    38f0:	cmp	w11, #0x2
    38f4:	csel	w11, w13, w12, cc  // cc = lo, ul, last
    38f8:	cmp	w9, w11
    38fc:	b.ne	3910 <syncsearch+0x90>  // b.any
    3900:	ldr	w8, [sp, #8]
    3904:	add	w8, w8, #0x1
    3908:	str	w8, [sp, #8]
    390c:	b	3940 <syncsearch+0xc0>
    3910:	ldr	x8, [sp, #16]
    3914:	ldr	w9, [sp, #4]
    3918:	mov	w10, w9
    391c:	add	x8, x8, x10
    3920:	ldrb	w9, [x8]
    3924:	cbz	w9, 3930 <syncsearch+0xb0>
    3928:	str	wzr, [sp, #8]
    392c:	b	3940 <syncsearch+0xc0>
    3930:	ldr	w8, [sp, #8]
    3934:	mov	w9, #0x4                   	// #4
    3938:	subs	w8, w9, w8
    393c:	str	w8, [sp, #8]
    3940:	ldr	w8, [sp, #4]
    3944:	add	w8, w8, #0x1
    3948:	str	w8, [sp, #4]
    394c:	b	38a0 <syncsearch+0x20>
    3950:	ldr	w8, [sp, #8]
    3954:	ldr	x9, [sp, #24]
    3958:	str	w8, [x9]
    395c:	ldr	w0, [sp, #4]
    3960:	add	sp, sp, #0x20
    3964:	ret

0000000000003968 <inflateSyncPoint>:
    3968:	sub	sp, sp, #0x30
    396c:	stp	x29, x30, [sp, #32]
    3970:	add	x29, sp, #0x20
    3974:	str	x0, [sp, #16]
    3978:	ldr	x0, [sp, #16]
    397c:	bl	110 <inflateStateCheck>
    3980:	cbz	w0, 3990 <inflateSyncPoint+0x28>
    3984:	mov	w8, #0xfffffffe            	// #-2
    3988:	stur	w8, [x29, #-4]
    398c:	b	39d8 <inflateSyncPoint+0x70>
    3990:	ldr	x8, [sp, #16]
    3994:	ldr	x8, [x8, #56]
    3998:	str	x8, [sp, #8]
    399c:	ldr	x8, [sp, #8]
    39a0:	ldr	w9, [x8, #8]
    39a4:	mov	w10, #0x3f41                	// #16193
    39a8:	mov	w11, #0x0                   	// #0
    39ac:	cmp	w9, w10
    39b0:	str	w11, [sp, #4]
    39b4:	b.ne	39cc <inflateSyncPoint+0x64>  // b.any
    39b8:	ldr	x8, [sp, #8]
    39bc:	ldr	w9, [x8, #88]
    39c0:	cmp	w9, #0x0
    39c4:	cset	w9, eq  // eq = none
    39c8:	str	w9, [sp, #4]
    39cc:	ldr	w8, [sp, #4]
    39d0:	and	w8, w8, #0x1
    39d4:	stur	w8, [x29, #-4]
    39d8:	ldur	w0, [x29, #-4]
    39dc:	ldp	x29, x30, [sp, #32]
    39e0:	add	sp, sp, #0x30
    39e4:	ret

00000000000039e8 <inflateCopy>:
    39e8:	sub	sp, sp, #0x50
    39ec:	stp	x29, x30, [sp, #64]
    39f0:	add	x29, sp, #0x40
    39f4:	stur	x0, [x29, #-16]
    39f8:	stur	x1, [x29, #-24]
    39fc:	ldur	x0, [x29, #-24]
    3a00:	bl	110 <inflateStateCheck>
    3a04:	cbnz	w0, 3a10 <inflateCopy+0x28>
    3a08:	ldur	x8, [x29, #-16]
    3a0c:	cbnz	x8, 3a1c <inflateCopy+0x34>
    3a10:	mov	w8, #0xfffffffe            	// #-2
    3a14:	stur	w8, [x29, #-4]
    3a18:	b	3c18 <inflateCopy+0x230>
    3a1c:	ldur	x8, [x29, #-24]
    3a20:	ldr	x8, [x8, #56]
    3a24:	str	x8, [sp, #32]
    3a28:	ldur	x8, [x29, #-24]
    3a2c:	ldr	x8, [x8, #64]
    3a30:	ldur	x9, [x29, #-24]
    3a34:	ldr	x0, [x9, #80]
    3a38:	mov	w1, #0x1                   	// #1
    3a3c:	mov	w2, #0x1bf8                	// #7160
    3a40:	blr	x8
    3a44:	str	x0, [sp, #24]
    3a48:	ldr	x8, [sp, #24]
    3a4c:	cbnz	x8, 3a5c <inflateCopy+0x74>
    3a50:	mov	w8, #0xfffffffc            	// #-4
    3a54:	stur	w8, [x29, #-4]
    3a58:	b	3c18 <inflateCopy+0x230>
    3a5c:	mov	x8, xzr
    3a60:	str	x8, [sp, #16]
    3a64:	ldr	x8, [sp, #32]
    3a68:	ldr	x8, [x8, #72]
    3a6c:	cbz	x8, 3ac8 <inflateCopy+0xe0>
    3a70:	ldur	x8, [x29, #-24]
    3a74:	ldr	x8, [x8, #64]
    3a78:	ldur	x9, [x29, #-24]
    3a7c:	ldr	x0, [x9, #80]
    3a80:	ldr	x9, [sp, #32]
    3a84:	ldr	w10, [x9, #56]
    3a88:	mov	w11, #0x1                   	// #1
    3a8c:	lsl	w1, w11, w10
    3a90:	mov	w2, w11
    3a94:	blr	x8
    3a98:	str	x0, [sp, #16]
    3a9c:	ldr	x8, [sp, #16]
    3aa0:	cbnz	x8, 3ac8 <inflateCopy+0xe0>
    3aa4:	ldur	x8, [x29, #-24]
    3aa8:	ldr	x8, [x8, #72]
    3aac:	ldur	x9, [x29, #-24]
    3ab0:	ldr	x0, [x9, #80]
    3ab4:	ldr	x1, [sp, #24]
    3ab8:	blr	x8
    3abc:	mov	w10, #0xfffffffc            	// #-4
    3ac0:	stur	w10, [x29, #-4]
    3ac4:	b	3c18 <inflateCopy+0x230>
    3ac8:	ldur	x0, [x29, #-16]
    3acc:	ldur	x1, [x29, #-24]
    3ad0:	mov	x2, #0x70                  	// #112
    3ad4:	bl	0 <memcpy>
    3ad8:	ldr	x0, [sp, #24]
    3adc:	ldr	x1, [sp, #32]
    3ae0:	mov	x2, #0x1bf8                	// #7160
    3ae4:	bl	0 <memcpy>
    3ae8:	ldur	x8, [x29, #-16]
    3aec:	ldr	x9, [sp, #24]
    3af0:	str	x8, [x9]
    3af4:	ldr	x8, [sp, #32]
    3af8:	ldr	x8, [x8, #104]
    3afc:	ldr	x9, [sp, #32]
    3b00:	add	x9, x9, #0x558
    3b04:	cmp	x8, x9
    3b08:	b.cc	3b90 <inflateCopy+0x1a8>  // b.lo, b.ul, b.last
    3b0c:	ldr	x8, [sp, #32]
    3b10:	ldr	x8, [x8, #104]
    3b14:	ldr	x9, [sp, #32]
    3b18:	mov	x10, #0x1be4                	// #7140
    3b1c:	add	x9, x9, x10
    3b20:	cmp	x8, x9
    3b24:	b.hi	3b90 <inflateCopy+0x1a8>  // b.pmore
    3b28:	ldr	x8, [sp, #24]
    3b2c:	add	x8, x8, #0x558
    3b30:	ldr	x9, [sp, #32]
    3b34:	ldr	x9, [x9, #104]
    3b38:	ldr	x10, [sp, #32]
    3b3c:	add	x10, x10, #0x558
    3b40:	subs	x9, x9, x10
    3b44:	mov	x10, #0x4                   	// #4
    3b48:	sdiv	x9, x9, x10
    3b4c:	mov	x11, #0x4                   	// #4
    3b50:	mul	x9, x11, x9
    3b54:	add	x8, x8, x9
    3b58:	ldr	x9, [sp, #24]
    3b5c:	str	x8, [x9, #104]
    3b60:	ldr	x8, [sp, #24]
    3b64:	add	x8, x8, #0x558
    3b68:	ldr	x9, [sp, #32]
    3b6c:	ldr	x9, [x9, #112]
    3b70:	ldr	x12, [sp, #32]
    3b74:	add	x12, x12, #0x558
    3b78:	subs	x9, x9, x12
    3b7c:	sdiv	x9, x9, x10
    3b80:	mul	x9, x11, x9
    3b84:	add	x8, x8, x9
    3b88:	ldr	x9, [sp, #24]
    3b8c:	str	x8, [x9, #112]
    3b90:	ldr	x8, [sp, #24]
    3b94:	add	x8, x8, #0x558
    3b98:	ldr	x9, [sp, #32]
    3b9c:	ldr	x9, [x9, #144]
    3ba0:	ldr	x10, [sp, #32]
    3ba4:	add	x10, x10, #0x558
    3ba8:	subs	x9, x9, x10
    3bac:	mov	x10, #0x4                   	// #4
    3bb0:	sdiv	x9, x9, x10
    3bb4:	mov	x10, #0x4                   	// #4
    3bb8:	mul	x9, x10, x9
    3bbc:	add	x8, x8, x9
    3bc0:	ldr	x9, [sp, #24]
    3bc4:	str	x8, [x9, #144]
    3bc8:	ldr	x8, [sp, #16]
    3bcc:	cbz	x8, 3bfc <inflateCopy+0x214>
    3bd0:	ldr	x8, [sp, #32]
    3bd4:	ldr	w9, [x8, #56]
    3bd8:	mov	w10, #0x1                   	// #1
    3bdc:	lsl	w9, w10, w9
    3be0:	str	w9, [sp, #12]
    3be4:	ldr	x0, [sp, #16]
    3be8:	ldr	x8, [sp, #32]
    3bec:	ldr	x1, [x8, #72]
    3bf0:	ldr	w9, [sp, #12]
    3bf4:	mov	w2, w9
    3bf8:	bl	0 <memcpy>
    3bfc:	ldr	x8, [sp, #16]
    3c00:	ldr	x9, [sp, #24]
    3c04:	str	x8, [x9, #72]
    3c08:	ldr	x8, [sp, #24]
    3c0c:	ldur	x9, [x29, #-16]
    3c10:	str	x8, [x9, #56]
    3c14:	stur	wzr, [x29, #-4]
    3c18:	ldur	w0, [x29, #-4]
    3c1c:	ldp	x29, x30, [sp, #64]
    3c20:	add	sp, sp, #0x50
    3c24:	ret

0000000000003c28 <inflateUndermine>:
    3c28:	sub	sp, sp, #0x30
    3c2c:	stp	x29, x30, [sp, #32]
    3c30:	add	x29, sp, #0x20
    3c34:	str	x0, [sp, #16]
    3c38:	str	w1, [sp, #12]
    3c3c:	ldr	x0, [sp, #16]
    3c40:	bl	110 <inflateStateCheck>
    3c44:	cbz	w0, 3c54 <inflateUndermine+0x2c>
    3c48:	mov	w8, #0xfffffffe            	// #-2
    3c4c:	stur	w8, [x29, #-4]
    3c50:	b	3c74 <inflateUndermine+0x4c>
    3c54:	ldr	x8, [sp, #16]
    3c58:	ldr	x8, [x8, #56]
    3c5c:	str	x8, [sp]
    3c60:	ldr	x8, [sp]
    3c64:	mov	w9, #0x1                   	// #1
    3c68:	str	w9, [x8, #7144]
    3c6c:	mov	w9, #0xfffffffd            	// #-3
    3c70:	stur	w9, [x29, #-4]
    3c74:	ldur	w0, [x29, #-4]
    3c78:	ldp	x29, x30, [sp, #32]
    3c7c:	add	sp, sp, #0x30
    3c80:	ret

0000000000003c84 <inflateValidate>:
    3c84:	sub	sp, sp, #0x30
    3c88:	stp	x29, x30, [sp, #32]
    3c8c:	add	x29, sp, #0x20
    3c90:	str	x0, [sp, #16]
    3c94:	str	w1, [sp, #12]
    3c98:	ldr	x0, [sp, #16]
    3c9c:	bl	110 <inflateStateCheck>
    3ca0:	cbz	w0, 3cb0 <inflateValidate+0x2c>
    3ca4:	mov	w8, #0xfffffffe            	// #-2
    3ca8:	stur	w8, [x29, #-4]
    3cac:	b	3cec <inflateValidate+0x68>
    3cb0:	ldr	x8, [sp, #16]
    3cb4:	ldr	x8, [x8, #56]
    3cb8:	str	x8, [sp]
    3cbc:	ldr	w9, [sp, #12]
    3cc0:	cbz	w9, 3cd8 <inflateValidate+0x54>
    3cc4:	ldr	x8, [sp]
    3cc8:	ldr	w9, [x8, #16]
    3ccc:	orr	w9, w9, #0x4
    3cd0:	str	w9, [x8, #16]
    3cd4:	b	3ce8 <inflateValidate+0x64>
    3cd8:	ldr	x8, [sp]
    3cdc:	ldr	w9, [x8, #16]
    3ce0:	and	w9, w9, #0xfffffffb
    3ce4:	str	w9, [x8, #16]
    3ce8:	stur	wzr, [x29, #-4]
    3cec:	ldur	w0, [x29, #-4]
    3cf0:	ldp	x29, x30, [sp, #32]
    3cf4:	add	sp, sp, #0x30
    3cf8:	ret

0000000000003cfc <inflateMark>:
    3cfc:	sub	sp, sp, #0x40
    3d00:	stp	x29, x30, [sp, #48]
    3d04:	add	x29, sp, #0x30
    3d08:	stur	x0, [x29, #-16]
    3d0c:	ldur	x0, [x29, #-16]
    3d10:	bl	110 <inflateStateCheck>
    3d14:	cbz	w0, 3d24 <inflateMark+0x28>
    3d18:	mov	x8, #0xffffffffffff0000    	// #-65536
    3d1c:	stur	x8, [x29, #-8]
    3d20:	b	3db4 <inflateMark+0xb8>
    3d24:	ldur	x8, [x29, #-16]
    3d28:	ldr	x8, [x8, #56]
    3d2c:	str	x8, [sp, #24]
    3d30:	ldr	x8, [sp, #24]
    3d34:	ldrsw	x8, [x8, #7148]
    3d38:	lsl	x8, x8, #16
    3d3c:	ldr	x9, [sp, #24]
    3d40:	ldr	w10, [x9, #8]
    3d44:	mov	w11, #0x3f43                	// #16195
    3d48:	cmp	w10, w11
    3d4c:	str	x8, [sp, #16]
    3d50:	b.ne	3d64 <inflateMark+0x68>  // b.any
    3d54:	ldr	x8, [sp, #24]
    3d58:	ldr	w9, [x8, #92]
    3d5c:	str	w9, [sp, #12]
    3d60:	b	3da4 <inflateMark+0xa8>
    3d64:	ldr	x8, [sp, #24]
    3d68:	ldr	w9, [x8, #8]
    3d6c:	mov	w10, #0x3f4c                	// #16204
    3d70:	cmp	w9, w10
    3d74:	b.ne	3d94 <inflateMark+0x98>  // b.any
    3d78:	ldr	x8, [sp, #24]
    3d7c:	ldr	w9, [x8, #7152]
    3d80:	ldr	x8, [sp, #24]
    3d84:	ldr	w10, [x8, #92]
    3d88:	subs	w9, w9, w10
    3d8c:	str	w9, [sp, #8]
    3d90:	b	3d9c <inflateMark+0xa0>
    3d94:	mov	w8, wzr
    3d98:	str	w8, [sp, #8]
    3d9c:	ldr	w8, [sp, #8]
    3da0:	str	w8, [sp, #12]
    3da4:	ldr	w8, [sp, #12]
    3da8:	ldr	x9, [sp, #16]
    3dac:	add	x10, x9, w8, uxtw
    3db0:	stur	x10, [x29, #-8]
    3db4:	ldur	x0, [x29, #-8]
    3db8:	ldp	x29, x30, [sp, #48]
    3dbc:	add	sp, sp, #0x40
    3dc0:	ret

0000000000003dc4 <inflateCodesUsed>:
    3dc4:	sub	sp, sp, #0x30
    3dc8:	stp	x29, x30, [sp, #32]
    3dcc:	add	x29, sp, #0x20
    3dd0:	str	x0, [sp, #16]
    3dd4:	ldr	x0, [sp, #16]
    3dd8:	bl	110 <inflateStateCheck>
    3ddc:	cbz	w0, 3dec <inflateCodesUsed+0x28>
    3de0:	mov	x8, #0xffffffffffffffff    	// #-1
    3de4:	stur	x8, [x29, #-8]
    3de8:	b	3e18 <inflateCodesUsed+0x54>
    3dec:	ldr	x8, [sp, #16]
    3df0:	ldr	x8, [x8, #56]
    3df4:	str	x8, [sp, #8]
    3df8:	ldr	x8, [sp, #8]
    3dfc:	ldr	x8, [x8, #144]
    3e00:	ldr	x9, [sp, #8]
    3e04:	add	x9, x9, #0x558
    3e08:	subs	x8, x8, x9
    3e0c:	mov	x9, #0x4                   	// #4
    3e10:	sdiv	x8, x8, x9
    3e14:	stur	x8, [x29, #-8]
    3e18:	ldur	x0, [x29, #-8]
    3e1c:	ldp	x29, x30, [sp, #32]
    3e20:	add	sp, sp, #0x30
    3e24:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0xe0
   4:	add	x8, sp, #0xb0
   8:	str	w0, [sp, #216]
   c:	str	x1, [x8, #32]
  10:	str	w2, [sp, #204]
  14:	str	x3, [x8, #16]
  18:	str	x4, [x8, #8]
  1c:	str	x5, [x8]
  20:	str	wzr, [sp, #172]
  24:	str	x8, [sp, #8]
  28:	ldr	w8, [sp, #172]
  2c:	cmp	w8, #0xf
  30:	b.hi	64 <inflate_table+0x64>  // b.pmore
  34:	ldr	w8, [sp, #172]
  38:	mov	w9, w8
  3c:	mov	x10, #0x2                   	// #2
  40:	mul	x9, x10, x9
  44:	add	x10, sp, #0x34
  48:	add	x9, x10, x9
  4c:	mov	w8, #0x0                   	// #0
  50:	strh	w8, [x9]
  54:	ldr	w8, [sp, #172]
  58:	add	w8, w8, #0x1
  5c:	str	w8, [sp, #172]
  60:	b	28 <inflate_table+0x28>
  64:	str	wzr, [sp, #168]
  68:	ldr	w8, [sp, #168]
  6c:	ldr	w9, [sp, #204]
  70:	cmp	w8, w9
  74:	b.cs	bc <inflate_table+0xbc>  // b.hs, b.nlast
  78:	ldr	x8, [sp, #8]
  7c:	ldr	x9, [x8, #32]
  80:	ldr	w10, [sp, #168]
  84:	mov	w11, w10
  88:	mov	x12, #0x2                   	// #2
  8c:	ldrh	w10, [x9, x11, lsl #1]
  90:	mov	w9, w10
  94:	mul	x9, x12, x9
  98:	add	x11, sp, #0x34
  9c:	add	x9, x11, x9
  a0:	ldrh	w10, [x9]
  a4:	add	w10, w10, #0x1
  a8:	strh	w10, [x9]
  ac:	ldr	w8, [sp, #168]
  b0:	add	w8, w8, #0x1
  b4:	str	w8, [sp, #168]
  b8:	b	68 <inflate_table+0x68>
  bc:	ldr	x8, [sp, #8]
  c0:	ldr	x9, [x8, #8]
  c4:	ldr	w10, [x9]
  c8:	str	w10, [sp, #156]
  cc:	mov	w10, #0xf                   	// #15
  d0:	str	w10, [sp, #160]
  d4:	ldr	w8, [sp, #160]
  d8:	cmp	w8, #0x1
  dc:	b.cc	108 <inflate_table+0x108>  // b.lo, b.ul, b.last
  e0:	ldr	w8, [sp, #160]
  e4:	mov	w9, w8
  e8:	add	x10, sp, #0x34
  ec:	ldrh	w8, [x10, x9, lsl #1]
  f0:	cbz	w8, f8 <inflate_table+0xf8>
  f4:	b	108 <inflate_table+0x108>
  f8:	ldr	w8, [sp, #160]
  fc:	subs	w8, w8, #0x1
 100:	str	w8, [sp, #160]
 104:	b	d4 <inflate_table+0xd4>
 108:	ldr	w8, [sp, #156]
 10c:	ldr	w9, [sp, #160]
 110:	cmp	w8, w9
 114:	b.ls	120 <inflate_table+0x120>  // b.plast
 118:	ldr	w8, [sp, #160]
 11c:	str	w8, [sp, #156]
 120:	ldr	w8, [sp, #160]
 124:	cbnz	w8, 18c <inflate_table+0x18c>
 128:	add	x8, sp, #0x74
 12c:	mov	w9, #0x40                  	// #64
 130:	strb	w9, [sp, #116]
 134:	mov	w9, #0x1                   	// #1
 138:	strb	w9, [x8, #1]
 13c:	mov	w9, #0x0                   	// #0
 140:	strh	w9, [x8, #2]
 144:	ldr	x8, [sp, #8]
 148:	ldr	x10, [x8, #16]
 14c:	ldr	x11, [x10]
 150:	add	x12, x11, #0x4
 154:	str	x12, [x10]
 158:	ldr	w9, [sp, #116]
 15c:	str	w9, [x11]
 160:	ldr	x10, [x8, #16]
 164:	ldr	x11, [x10]
 168:	add	x12, x11, #0x4
 16c:	str	x12, [x10]
 170:	ldr	w9, [sp, #116]
 174:	str	w9, [x11]
 178:	ldr	x10, [x8, #8]
 17c:	mov	w9, #0x1                   	// #1
 180:	str	w9, [x10]
 184:	str	wzr, [sp, #220]
 188:	b	918 <inflate_table+0x918>
 18c:	mov	w8, #0x1                   	// #1
 190:	str	w8, [sp, #164]
 194:	ldr	w8, [sp, #164]
 198:	ldr	w9, [sp, #160]
 19c:	cmp	w8, w9
 1a0:	b.cs	1cc <inflate_table+0x1cc>  // b.hs, b.nlast
 1a4:	ldr	w8, [sp, #164]
 1a8:	mov	w9, w8
 1ac:	add	x10, sp, #0x34
 1b0:	ldrh	w8, [x10, x9, lsl #1]
 1b4:	cbz	w8, 1bc <inflate_table+0x1bc>
 1b8:	b	1cc <inflate_table+0x1cc>
 1bc:	ldr	w8, [sp, #164]
 1c0:	add	w8, w8, #0x1
 1c4:	str	w8, [sp, #164]
 1c8:	b	194 <inflate_table+0x194>
 1cc:	ldr	w8, [sp, #156]
 1d0:	ldr	w9, [sp, #164]
 1d4:	cmp	w8, w9
 1d8:	b.cs	1e4 <inflate_table+0x1e4>  // b.hs, b.nlast
 1dc:	ldr	w8, [sp, #164]
 1e0:	str	w8, [sp, #156]
 1e4:	mov	w8, #0x1                   	// #1
 1e8:	str	w8, [sp, #144]
 1ec:	str	w8, [sp, #172]
 1f0:	ldr	w8, [sp, #172]
 1f4:	cmp	w8, #0xf
 1f8:	b.hi	250 <inflate_table+0x250>  // b.pmore
 1fc:	ldr	w8, [sp, #144]
 200:	lsl	w8, w8, #1
 204:	str	w8, [sp, #144]
 208:	ldr	w8, [sp, #172]
 20c:	mov	w9, w8
 210:	add	x10, sp, #0x34
 214:	ldrh	w8, [x10, x9, lsl #1]
 218:	ldr	w11, [sp, #144]
 21c:	subs	w8, w11, w8
 220:	str	w8, [sp, #144]
 224:	ldr	w8, [sp, #144]
 228:	cmp	w8, #0x0
 22c:	cset	w8, ge  // ge = tcont
 230:	tbnz	w8, #0, 240 <inflate_table+0x240>
 234:	mov	w8, #0xffffffff            	// #-1
 238:	str	w8, [sp, #220]
 23c:	b	918 <inflate_table+0x918>
 240:	ldr	w8, [sp, #172]
 244:	add	w8, w8, #0x1
 248:	str	w8, [sp, #172]
 24c:	b	1f0 <inflate_table+0x1f0>
 250:	ldr	w8, [sp, #144]
 254:	cmp	w8, #0x0
 258:	cset	w8, le
 25c:	tbnz	w8, #0, 280 <inflate_table+0x280>
 260:	ldr	w8, [sp, #216]
 264:	cbz	w8, 274 <inflate_table+0x274>
 268:	ldr	w8, [sp, #160]
 26c:	cmp	w8, #0x1
 270:	b.eq	280 <inflate_table+0x280>  // b.none
 274:	mov	w8, #0xffffffff            	// #-1
 278:	str	w8, [sp, #220]
 27c:	b	918 <inflate_table+0x918>
 280:	add	x8, sp, #0x14
 284:	mov	w9, #0x0                   	// #0
 288:	strh	w9, [x8, #2]
 28c:	mov	w9, #0x1                   	// #1
 290:	str	w9, [sp, #172]
 294:	ldr	w8, [sp, #172]
 298:	cmp	w8, #0xf
 29c:	b.cs	2f4 <inflate_table+0x2f4>  // b.hs, b.nlast
 2a0:	ldr	w8, [sp, #172]
 2a4:	mov	w9, w8
 2a8:	mov	x10, #0x2                   	// #2
 2ac:	add	x11, sp, #0x14
 2b0:	ldrh	w8, [x11, x9, lsl #1]
 2b4:	ldr	w12, [sp, #172]
 2b8:	mov	w9, w12
 2bc:	add	x13, sp, #0x34
 2c0:	ldrh	w12, [x13, x9, lsl #1]
 2c4:	add	w8, w8, w12
 2c8:	ldr	w12, [sp, #172]
 2cc:	add	w12, w12, #0x1
 2d0:	mov	w9, w12
 2d4:	ubfx	x9, x9, #0, #32
 2d8:	mul	x9, x10, x9
 2dc:	add	x9, x11, x9
 2e0:	strh	w8, [x9]
 2e4:	ldr	w8, [sp, #172]
 2e8:	add	w8, w8, #0x1
 2ec:	str	w8, [sp, #172]
 2f0:	b	294 <inflate_table+0x294>
 2f4:	str	wzr, [sp, #168]
 2f8:	ldr	w8, [sp, #168]
 2fc:	ldr	w9, [sp, #204]
 300:	cmp	w8, w9
 304:	b.cs	380 <inflate_table+0x380>  // b.hs, b.nlast
 308:	ldr	x8, [sp, #8]
 30c:	ldr	x9, [x8, #32]
 310:	ldr	w10, [sp, #168]
 314:	mov	w11, w10
 318:	ldrh	w10, [x9, x11, lsl #1]
 31c:	cbz	w10, 370 <inflate_table+0x370>
 320:	ldr	w8, [sp, #168]
 324:	ldr	x9, [sp, #8]
 328:	ldr	x10, [x9]
 32c:	ldr	x11, [x9, #32]
 330:	ldr	w12, [sp, #168]
 334:	mov	w13, w12
 338:	mov	x14, #0x2                   	// #2
 33c:	ldrh	w12, [x11, x13, lsl #1]
 340:	mov	w11, w12
 344:	mul	x11, x14, x11
 348:	add	x13, sp, #0x14
 34c:	add	x11, x13, x11
 350:	ldrh	w12, [x11]
 354:	mov	w13, w12
 358:	mov	w12, w13
 35c:	add	w12, w12, #0x1
 360:	strh	w12, [x11]
 364:	mul	x11, x14, x13
 368:	add	x10, x10, x11
 36c:	strh	w8, [x10]
 370:	ldr	w8, [sp, #168]
 374:	add	w8, w8, #0x1
 378:	str	w8, [sp, #168]
 37c:	b	2f8 <inflate_table+0x2f8>
 380:	ldr	w8, [sp, #216]
 384:	str	w8, [sp, #4]
 388:	cbz	w8, 3a0 <inflate_table+0x3a0>
 38c:	b	390 <inflate_table+0x390>
 390:	ldr	w8, [sp, #4]
 394:	cmp	w8, #0x1
 398:	b.eq	3bc <inflate_table+0x3bc>  // b.none
 39c:	b	3e0 <inflate_table+0x3e0>
 3a0:	ldr	x8, [sp, #8]
 3a4:	ldr	x9, [x8]
 3a8:	str	x9, [sp, #88]
 3ac:	str	x9, [sp, #96]
 3b0:	mov	w10, #0x14                  	// #20
 3b4:	str	w10, [sp, #84]
 3b8:	b	3fc <inflate_table+0x3fc>
 3bc:	adrp	x8, 0 <inflate_table>
 3c0:	add	x8, x8, #0x0
 3c4:	str	x8, [sp, #96]
 3c8:	adrp	x8, 0 <inflate_table>
 3cc:	add	x8, x8, #0x0
 3d0:	str	x8, [sp, #88]
 3d4:	mov	w9, #0x101                 	// #257
 3d8:	str	w9, [sp, #84]
 3dc:	b	3fc <inflate_table+0x3fc>
 3e0:	adrp	x8, 0 <inflate_table>
 3e4:	add	x8, x8, #0x0
 3e8:	str	x8, [sp, #96]
 3ec:	adrp	x8, 0 <inflate_table>
 3f0:	add	x8, x8, #0x0
 3f4:	str	x8, [sp, #88]
 3f8:	str	wzr, [sp, #84]
 3fc:	str	wzr, [sp, #136]
 400:	str	wzr, [sp, #168]
 404:	ldr	w8, [sp, #164]
 408:	str	w8, [sp, #172]
 40c:	ldr	x9, [sp, #8]
 410:	ldr	x10, [x9, #16]
 414:	ldr	x10, [x10]
 418:	str	x10, [sp, #104]
 41c:	ldr	w8, [sp, #156]
 420:	str	w8, [sp, #152]
 424:	str	wzr, [sp, #148]
 428:	mov	w8, #0xffffffff            	// #-1
 42c:	str	w8, [sp, #124]
 430:	ldr	w8, [sp, #156]
 434:	mov	w11, #0x1                   	// #1
 438:	lsl	w8, w11, w8
 43c:	str	w8, [sp, #140]
 440:	ldr	w8, [sp, #140]
 444:	subs	w8, w8, #0x1
 448:	str	w8, [sp, #120]
 44c:	ldr	w8, [sp, #216]
 450:	cmp	w8, #0x1
 454:	b.ne	464 <inflate_table+0x464>  // b.any
 458:	ldr	w8, [sp, #140]
 45c:	cmp	w8, #0x354
 460:	b.hi	47c <inflate_table+0x47c>  // b.pmore
 464:	ldr	w8, [sp, #216]
 468:	cmp	w8, #0x2
 46c:	b.ne	488 <inflate_table+0x488>  // b.any
 470:	ldr	w8, [sp, #140]
 474:	cmp	w8, #0x250
 478:	b.ls	488 <inflate_table+0x488>  // b.plast
 47c:	mov	w8, #0x1                   	// #1
 480:	str	w8, [sp, #220]
 484:	b	918 <inflate_table+0x918>
 488:	ldr	w8, [sp, #172]
 48c:	ldr	w9, [sp, #148]
 490:	subs	w8, w8, w9
 494:	add	x10, sp, #0x74
 498:	strb	w8, [x10, #1]
 49c:	ldr	x10, [sp, #8]
 4a0:	ldr	x11, [x10]
 4a4:	ldr	w8, [sp, #168]
 4a8:	mov	w12, w8
 4ac:	ldrh	w8, [x11, x12, lsl #1]
 4b0:	add	w8, w8, #0x1
 4b4:	ldr	w9, [sp, #84]
 4b8:	cmp	w8, w9
 4bc:	b.cs	4f4 <inflate_table+0x4f4>  // b.hs, b.nlast
 4c0:	add	x8, sp, #0x74
 4c4:	mov	w9, #0x0                   	// #0
 4c8:	strb	w9, [sp, #116]
 4cc:	ldr	x10, [sp, #8]
 4d0:	ldr	x11, [x10]
 4d4:	ldr	w9, [sp, #168]
 4d8:	mov	w12, w9
 4dc:	mov	x13, #0x2                   	// #2
 4e0:	mul	x12, x13, x12
 4e4:	add	x11, x11, x12
 4e8:	ldrh	w9, [x11]
 4ec:	strh	w9, [x8, #2]
 4f0:	b	5a0 <inflate_table+0x5a0>
 4f4:	ldr	x8, [sp, #8]
 4f8:	ldr	x9, [x8]
 4fc:	ldr	w10, [sp, #168]
 500:	mov	w11, w10
 504:	ldrh	w10, [x9, x11, lsl #1]
 508:	ldr	w12, [sp, #84]
 50c:	cmp	w10, w12
 510:	b.cc	58c <inflate_table+0x58c>  // b.lo, b.ul, b.last
 514:	ldr	x8, [sp, #88]
 518:	ldr	x9, [sp, #8]
 51c:	ldr	x10, [x9]
 520:	ldr	w11, [sp, #168]
 524:	mov	w12, w11
 528:	mov	x13, #0x2                   	// #2
 52c:	ldrh	w11, [x10, x12, lsl #1]
 530:	ldr	w14, [sp, #84]
 534:	subs	w11, w11, w14
 538:	mov	w10, w11
 53c:	ubfx	x10, x10, #0, #32
 540:	mul	x10, x13, x10
 544:	add	x8, x8, x10
 548:	ldrh	w11, [x8]
 54c:	add	x8, sp, #0x74
 550:	strb	w11, [sp, #116]
 554:	ldr	x10, [sp, #96]
 558:	ldr	x12, [x9]
 55c:	ldr	w11, [sp, #168]
 560:	mov	w15, w11
 564:	ldrh	w11, [x12, x15, lsl #1]
 568:	ldr	w14, [sp, #84]
 56c:	subs	w11, w11, w14
 570:	mov	w12, w11
 574:	ubfx	x12, x12, #0, #32
 578:	mul	x12, x13, x12
 57c:	add	x10, x10, x12
 580:	ldrh	w11, [x10]
 584:	strh	w11, [x8, #2]
 588:	b	5a0 <inflate_table+0x5a0>
 58c:	add	x8, sp, #0x74
 590:	mov	w9, #0x60                  	// #96
 594:	strb	w9, [sp, #116]
 598:	mov	w9, #0x0                   	// #0
 59c:	strh	w9, [x8, #2]
 5a0:	ldr	w8, [sp, #172]
 5a4:	ldr	w9, [sp, #148]
 5a8:	subs	w8, w8, w9
 5ac:	mov	w9, #0x1                   	// #1
 5b0:	lsl	w8, w9, w8
 5b4:	str	w8, [sp, #132]
 5b8:	ldr	w8, [sp, #152]
 5bc:	lsl	w8, w9, w8
 5c0:	str	w8, [sp, #128]
 5c4:	ldr	w8, [sp, #128]
 5c8:	str	w8, [sp, #164]
 5cc:	ldr	w8, [sp, #132]
 5d0:	ldr	w9, [sp, #128]
 5d4:	subs	w8, w9, w8
 5d8:	str	w8, [sp, #128]
 5dc:	ldr	x10, [sp, #104]
 5e0:	ldr	w8, [sp, #136]
 5e4:	ldr	w9, [sp, #148]
 5e8:	lsr	w8, w8, w9
 5ec:	ldr	w9, [sp, #128]
 5f0:	add	w8, w8, w9
 5f4:	ldr	w9, [sp, #116]
 5f8:	str	w9, [x10, w8, uxtw #2]
 5fc:	ldr	w8, [sp, #128]
 600:	cbnz	w8, 5cc <inflate_table+0x5cc>
 604:	ldr	w8, [sp, #172]
 608:	mov	w9, #0x1                   	// #1
 60c:	subs	w8, w8, #0x1
 610:	lsl	w8, w9, w8
 614:	str	w8, [sp, #132]
 618:	ldr	w8, [sp, #136]
 61c:	ldr	w9, [sp, #132]
 620:	and	w8, w8, w9
 624:	cbz	w8, 638 <inflate_table+0x638>
 628:	ldr	w8, [sp, #132]
 62c:	lsr	w8, w8, #1
 630:	str	w8, [sp, #132]
 634:	b	618 <inflate_table+0x618>
 638:	ldr	w8, [sp, #132]
 63c:	cbz	w8, 668 <inflate_table+0x668>
 640:	ldr	w8, [sp, #132]
 644:	subs	w8, w8, #0x1
 648:	ldr	w9, [sp, #136]
 64c:	and	w8, w9, w8
 650:	str	w8, [sp, #136]
 654:	ldr	w8, [sp, #132]
 658:	ldr	w9, [sp, #136]
 65c:	add	w8, w9, w8
 660:	str	w8, [sp, #136]
 664:	b	66c <inflate_table+0x66c>
 668:	str	wzr, [sp, #136]
 66c:	ldr	w8, [sp, #168]
 670:	add	w8, w8, #0x1
 674:	str	w8, [sp, #168]
 678:	ldr	w8, [sp, #172]
 67c:	mov	w9, w8
 680:	mov	x10, #0x2                   	// #2
 684:	mul	x9, x10, x9
 688:	add	x10, sp, #0x34
 68c:	add	x9, x10, x9
 690:	ldrh	w8, [x9]
 694:	mov	w11, #0xffffffff            	// #-1
 698:	add	w8, w11, w8, uxth
 69c:	mov	w11, w8
 6a0:	strh	w11, [x9]
 6a4:	and	w8, w8, #0xffff
 6a8:	cbnz	w8, 6e4 <inflate_table+0x6e4>
 6ac:	ldr	w8, [sp, #172]
 6b0:	ldr	w9, [sp, #160]
 6b4:	cmp	w8, w9
 6b8:	b.ne	6c0 <inflate_table+0x6c0>  // b.any
 6bc:	b	8a4 <inflate_table+0x8a4>
 6c0:	ldr	x8, [sp, #8]
 6c4:	ldr	x9, [x8, #32]
 6c8:	ldr	x10, [x8]
 6cc:	ldr	w11, [sp, #168]
 6d0:	mov	w12, w11
 6d4:	ldrh	w11, [x10, x12, lsl #1]
 6d8:	mov	w10, w11
 6dc:	ldrh	w11, [x9, x10, lsl #1]
 6e0:	str	w11, [sp, #172]
 6e4:	ldr	w8, [sp, #172]
 6e8:	ldr	w9, [sp, #156]
 6ec:	cmp	w8, w9
 6f0:	b.ls	8a0 <inflate_table+0x8a0>  // b.plast
 6f4:	ldr	w8, [sp, #136]
 6f8:	ldr	w9, [sp, #120]
 6fc:	and	w8, w8, w9
 700:	ldr	w9, [sp, #124]
 704:	cmp	w8, w9
 708:	b.eq	8a0 <inflate_table+0x8a0>  // b.none
 70c:	ldr	w8, [sp, #148]
 710:	cbnz	w8, 71c <inflate_table+0x71c>
 714:	ldr	w8, [sp, #156]
 718:	str	w8, [sp, #148]
 71c:	ldr	w8, [sp, #164]
 720:	mov	w9, w8
 724:	ldr	x10, [sp, #104]
 728:	mov	x11, #0x4                   	// #4
 72c:	mul	x9, x11, x9
 730:	add	x9, x10, x9
 734:	str	x9, [sp, #104]
 738:	ldr	w8, [sp, #172]
 73c:	ldr	w12, [sp, #148]
 740:	subs	w8, w8, w12
 744:	str	w8, [sp, #152]
 748:	ldr	w8, [sp, #152]
 74c:	mov	w12, #0x1                   	// #1
 750:	lsl	w8, w12, w8
 754:	str	w8, [sp, #144]
 758:	ldr	w8, [sp, #152]
 75c:	ldr	w9, [sp, #148]
 760:	add	w8, w8, w9
 764:	ldr	w9, [sp, #160]
 768:	cmp	w8, w9
 76c:	b.cs	7c0 <inflate_table+0x7c0>  // b.hs, b.nlast
 770:	ldr	w8, [sp, #152]
 774:	ldr	w9, [sp, #148]
 778:	add	w8, w8, w9
 77c:	add	x10, sp, #0x34
 780:	ldrh	w8, [x10, w8, uxtw #1]
 784:	ldr	w9, [sp, #144]
 788:	subs	w8, w9, w8
 78c:	str	w8, [sp, #144]
 790:	ldr	w8, [sp, #144]
 794:	cmp	w8, #0x0
 798:	cset	w8, gt
 79c:	tbnz	w8, #0, 7a4 <inflate_table+0x7a4>
 7a0:	b	7c0 <inflate_table+0x7c0>
 7a4:	ldr	w8, [sp, #152]
 7a8:	add	w8, w8, #0x1
 7ac:	str	w8, [sp, #152]
 7b0:	ldr	w8, [sp, #144]
 7b4:	lsl	w8, w8, #1
 7b8:	str	w8, [sp, #144]
 7bc:	b	758 <inflate_table+0x758>
 7c0:	ldr	w8, [sp, #152]
 7c4:	mov	w9, #0x1                   	// #1
 7c8:	lsl	w8, w9, w8
 7cc:	ldr	w9, [sp, #140]
 7d0:	add	w8, w9, w8
 7d4:	str	w8, [sp, #140]
 7d8:	ldr	w8, [sp, #216]
 7dc:	cmp	w8, #0x1
 7e0:	b.ne	7f0 <inflate_table+0x7f0>  // b.any
 7e4:	ldr	w8, [sp, #140]
 7e8:	cmp	w8, #0x354
 7ec:	b.hi	808 <inflate_table+0x808>  // b.pmore
 7f0:	ldr	w8, [sp, #216]
 7f4:	cmp	w8, #0x2
 7f8:	b.ne	814 <inflate_table+0x814>  // b.any
 7fc:	ldr	w8, [sp, #140]
 800:	cmp	w8, #0x250
 804:	b.ls	814 <inflate_table+0x814>  // b.plast
 808:	mov	w8, #0x1                   	// #1
 80c:	str	w8, [sp, #220]
 810:	b	918 <inflate_table+0x918>
 814:	ldr	w8, [sp, #136]
 818:	ldr	w9, [sp, #120]
 81c:	and	w8, w8, w9
 820:	str	w8, [sp, #124]
 824:	ldr	w8, [sp, #152]
 828:	ldr	x10, [sp, #8]
 82c:	ldr	x11, [x10, #16]
 830:	ldr	x11, [x11]
 834:	ldr	w9, [sp, #124]
 838:	mov	w12, w9
 83c:	mov	x13, #0x4                   	// #4
 840:	mul	x12, x13, x12
 844:	add	x11, x11, x12
 848:	strb	w8, [x11]
 84c:	ldr	w8, [sp, #156]
 850:	ldr	x11, [x10, #16]
 854:	ldr	x11, [x11]
 858:	ldr	w9, [sp, #124]
 85c:	mov	w12, w9
 860:	mul	x12, x13, x12
 864:	add	x11, x11, x12
 868:	strb	w8, [x11, #1]
 86c:	ldr	x11, [sp, #104]
 870:	ldr	x12, [x10, #16]
 874:	ldr	x12, [x12]
 878:	subs	x11, x11, x12
 87c:	mov	x12, #0x4                   	// #4
 880:	sdiv	x11, x11, x12
 884:	ldr	x12, [x10, #16]
 888:	ldr	x12, [x12]
 88c:	ldr	w8, [sp, #124]
 890:	mov	w14, w8
 894:	mul	x13, x13, x14
 898:	add	x12, x12, x13
 89c:	strh	w11, [x12, #2]
 8a0:	b	488 <inflate_table+0x488>
 8a4:	ldr	w8, [sp, #136]
 8a8:	cbz	w8, 8e4 <inflate_table+0x8e4>
 8ac:	add	x8, sp, #0x74
 8b0:	mov	w9, #0x40                  	// #64
 8b4:	strb	w9, [sp, #116]
 8b8:	ldr	w9, [sp, #172]
 8bc:	ldr	w10, [sp, #148]
 8c0:	subs	w9, w9, w10
 8c4:	strb	w9, [x8, #1]
 8c8:	mov	w9, #0x0                   	// #0
 8cc:	strh	w9, [x8, #2]
 8d0:	ldr	x8, [sp, #104]
 8d4:	ldr	w9, [sp, #136]
 8d8:	mov	w11, w9
 8dc:	ldr	w9, [sp, #116]
 8e0:	str	w9, [x8, x11, lsl #2]
 8e4:	ldr	w8, [sp, #140]
 8e8:	mov	w9, w8
 8ec:	ldr	x10, [sp, #8]
 8f0:	ldr	x11, [x10, #16]
 8f4:	ldr	x12, [x11]
 8f8:	mov	x13, #0x4                   	// #4
 8fc:	mul	x9, x13, x9
 900:	add	x9, x12, x9
 904:	str	x9, [x11]
 908:	ldr	w8, [sp, #156]
 90c:	ldr	x9, [x10, #8]
 910:	str	w8, [x9]
 914:	str	wzr, [sp, #220]
 918:	ldr	w0, [sp, #220]
 91c:	add	sp, sp, #0xe0
 920:	ret

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_tr_init>:
       0:	sub	sp, sp, #0x40
       4:	stp	x29, x30, [sp, #48]
       8:	add	x29, sp, #0x30
       c:	adrp	x8, 0 <_tr_init>
      10:	add	x8, x8, #0x0
      14:	adrp	x9, 0 <_tr_init>
      18:	add	x9, x9, #0x0
      1c:	adrp	x10, 0 <_tr_init>
      20:	add	x10, x10, #0x0
      24:	mov	w11, #0x0                   	// #0
      28:	stur	x0, [x29, #-8]
      2c:	stur	x8, [x29, #-16]
      30:	str	x9, [sp, #24]
      34:	str	x10, [sp, #16]
      38:	str	w11, [sp, #12]
      3c:	bl	bc <tr_static_init>
      40:	ldur	x8, [x29, #-8]
      44:	add	x8, x8, #0xd4
      48:	ldur	x9, [x29, #-8]
      4c:	str	x8, [x9, #2904]
      50:	ldur	x8, [x29, #-8]
      54:	ldur	x9, [x29, #-16]
      58:	str	x9, [x8, #2920]
      5c:	ldur	x8, [x29, #-8]
      60:	add	x8, x8, #0x9c8
      64:	ldur	x10, [x29, #-8]
      68:	str	x8, [x10, #2928]
      6c:	ldur	x8, [x29, #-8]
      70:	ldr	x10, [sp, #24]
      74:	str	x10, [x8, #2944]
      78:	ldur	x8, [x29, #-8]
      7c:	add	x8, x8, #0xabc
      80:	ldur	x12, [x29, #-8]
      84:	str	x8, [x12, #2952]
      88:	ldur	x8, [x29, #-8]
      8c:	ldr	x12, [sp, #16]
      90:	str	x12, [x8, #2968]
      94:	ldur	x8, [x29, #-8]
      98:	ldr	w11, [sp, #12]
      9c:	strh	w11, [x8, #5936]
      a0:	ldur	x8, [x29, #-8]
      a4:	str	wzr, [x8, #5940]
      a8:	ldur	x0, [x29, #-8]
      ac:	bl	c0 <init_block>
      b0:	ldp	x29, x30, [sp, #48]
      b4:	add	sp, sp, #0x40
      b8:	ret

00000000000000bc <tr_static_init>:
      bc:	ret

00000000000000c0 <init_block>:
      c0:	sub	sp, sp, #0x10
      c4:	str	x0, [sp, #8]
      c8:	str	wzr, [sp, #4]
      cc:	ldr	w8, [sp, #4]
      d0:	cmp	w8, #0x11e
      d4:	b.ge	108 <init_block+0x48>  // b.tcont
      d8:	ldr	x8, [sp, #8]
      dc:	add	x8, x8, #0xd4
      e0:	ldrsw	x9, [sp, #4]
      e4:	mov	x10, #0x4                   	// #4
      e8:	mul	x9, x10, x9
      ec:	add	x8, x8, x9
      f0:	mov	w11, #0x0                   	// #0
      f4:	strh	w11, [x8]
      f8:	ldr	w8, [sp, #4]
      fc:	add	w8, w8, #0x1
     100:	str	w8, [sp, #4]
     104:	b	cc <init_block+0xc>
     108:	str	wzr, [sp, #4]
     10c:	ldr	w8, [sp, #4]
     110:	cmp	w8, #0x1e
     114:	b.ge	148 <init_block+0x88>  // b.tcont
     118:	ldr	x8, [sp, #8]
     11c:	add	x8, x8, #0x9c8
     120:	ldrsw	x9, [sp, #4]
     124:	mov	x10, #0x4                   	// #4
     128:	mul	x9, x10, x9
     12c:	add	x8, x8, x9
     130:	mov	w11, #0x0                   	// #0
     134:	strh	w11, [x8]
     138:	ldr	w8, [sp, #4]
     13c:	add	w8, w8, #0x1
     140:	str	w8, [sp, #4]
     144:	b	10c <init_block+0x4c>
     148:	str	wzr, [sp, #4]
     14c:	ldr	w8, [sp, #4]
     150:	cmp	w8, #0x13
     154:	b.ge	188 <init_block+0xc8>  // b.tcont
     158:	ldr	x8, [sp, #8]
     15c:	add	x8, x8, #0xabc
     160:	ldrsw	x9, [sp, #4]
     164:	mov	x10, #0x4                   	// #4
     168:	mul	x9, x10, x9
     16c:	add	x8, x8, x9
     170:	mov	w11, #0x0                   	// #0
     174:	strh	w11, [x8]
     178:	ldr	w8, [sp, #4]
     17c:	add	w8, w8, #0x1
     180:	str	w8, [sp, #4]
     184:	b	14c <init_block+0x8c>
     188:	ldr	x8, [sp, #8]
     18c:	mov	w9, #0x1                   	// #1
     190:	strh	w9, [x8, #1236]
     194:	ldr	x8, [sp, #8]
     198:	str	xzr, [x8, #5920]
     19c:	ldr	x8, [sp, #8]
     1a0:	str	xzr, [x8, #5912]
     1a4:	ldr	x8, [sp, #8]
     1a8:	str	wzr, [x8, #5928]
     1ac:	ldr	x8, [sp, #8]
     1b0:	str	wzr, [x8, #5900]
     1b4:	add	sp, sp, #0x10
     1b8:	ret

00000000000001bc <_tr_stored_block>:
     1bc:	sub	sp, sp, #0x40
     1c0:	stp	x29, x30, [sp, #48]
     1c4:	add	x29, sp, #0x30
     1c8:	mov	w8, #0x3                   	// #3
     1cc:	mov	w9, #0x10                  	// #16
     1d0:	stur	x0, [x29, #-8]
     1d4:	stur	x1, [x29, #-16]
     1d8:	str	x2, [sp, #24]
     1dc:	str	w3, [sp, #20]
     1e0:	str	w8, [sp, #16]
     1e4:	ldur	x10, [x29, #-8]
     1e8:	ldr	w8, [x10, #5940]
     1ec:	ldr	w11, [sp, #16]
     1f0:	subs	w9, w9, w11
     1f4:	cmp	w8, w9
     1f8:	b.le	2c4 <_tr_stored_block+0x108>
     1fc:	ldr	w8, [sp, #20]
     200:	add	w8, w8, #0x0
     204:	str	w8, [sp, #12]
     208:	ldr	w8, [sp, #12]
     20c:	and	w8, w8, #0xffff
     210:	ldur	x9, [x29, #-8]
     214:	ldr	w10, [x9, #5940]
     218:	lsl	w8, w8, w10
     21c:	ldur	x9, [x29, #-8]
     220:	ldrh	w10, [x9, #5936]
     224:	orr	w8, w10, w8
     228:	strh	w8, [x9, #5936]
     22c:	ldur	x9, [x29, #-8]
     230:	ldrh	w8, [x9, #5936]
     234:	and	w8, w8, #0xff
     238:	ldur	x9, [x29, #-8]
     23c:	ldr	x9, [x9, #16]
     240:	ldur	x11, [x29, #-8]
     244:	ldr	x12, [x11, #40]
     248:	add	x13, x12, #0x1
     24c:	str	x13, [x11, #40]
     250:	add	x9, x9, x12
     254:	strb	w8, [x9]
     258:	ldur	x9, [x29, #-8]
     25c:	ldrh	w8, [x9, #5936]
     260:	asr	w8, w8, #8
     264:	ldur	x9, [x29, #-8]
     268:	ldr	x9, [x9, #16]
     26c:	ldur	x11, [x29, #-8]
     270:	ldr	x12, [x11, #40]
     274:	add	x13, x12, #0x1
     278:	str	x13, [x11, #40]
     27c:	add	x9, x9, x12
     280:	strb	w8, [x9]
     284:	ldr	w8, [sp, #12]
     288:	and	w8, w8, #0xffff
     28c:	ldur	x9, [x29, #-8]
     290:	ldr	w10, [x9, #5940]
     294:	mov	w14, #0x10                  	// #16
     298:	subs	w10, w14, w10
     29c:	asr	w8, w8, w10
     2a0:	ldur	x9, [x29, #-8]
     2a4:	strh	w8, [x9, #5936]
     2a8:	ldr	w8, [sp, #16]
     2ac:	subs	w8, w8, #0x10
     2b0:	ldur	x9, [x29, #-8]
     2b4:	ldr	w10, [x9, #5940]
     2b8:	add	w8, w10, w8
     2bc:	str	w8, [x9, #5940]
     2c0:	b	300 <_tr_stored_block+0x144>
     2c4:	ldr	w8, [sp, #20]
     2c8:	add	w8, w8, #0x0
     2cc:	and	w8, w8, #0xffff
     2d0:	ldur	x9, [x29, #-8]
     2d4:	ldr	w10, [x9, #5940]
     2d8:	lsl	w8, w8, w10
     2dc:	ldur	x9, [x29, #-8]
     2e0:	ldrh	w10, [x9, #5936]
     2e4:	orr	w8, w10, w8
     2e8:	strh	w8, [x9, #5936]
     2ec:	ldr	w8, [sp, #16]
     2f0:	ldur	x9, [x29, #-8]
     2f4:	ldr	w10, [x9, #5940]
     2f8:	add	w8, w10, w8
     2fc:	str	w8, [x9, #5940]
     300:	ldur	x0, [x29, #-8]
     304:	bl	404 <bi_windup>
     308:	ldr	x8, [sp, #24]
     30c:	and	w8, w8, #0xffff
     310:	and	w8, w8, #0xff
     314:	ldur	x9, [x29, #-8]
     318:	ldr	x9, [x9, #16]
     31c:	ldur	x10, [x29, #-8]
     320:	ldr	x11, [x10, #40]
     324:	add	x12, x11, #0x1
     328:	str	x12, [x10, #40]
     32c:	add	x9, x9, x11
     330:	strb	w8, [x9]
     334:	ldr	x9, [sp, #24]
     338:	and	w8, w9, #0xffff
     33c:	mov	x10, #0x8                   	// #8
     340:	asr	w8, w8, #8
     344:	ldur	x11, [x29, #-8]
     348:	ldr	x11, [x11, #16]
     34c:	ldur	x12, [x29, #-8]
     350:	ldr	x13, [x12, #40]
     354:	add	x14, x13, #0x1
     358:	str	x14, [x12, #40]
     35c:	add	x11, x11, x13
     360:	strb	w8, [x11]
     364:	ldr	x11, [sp, #24]
     368:	mvn	x11, x11
     36c:	and	w8, w11, #0xffff
     370:	and	w8, w8, #0xff
     374:	ldur	x12, [x29, #-8]
     378:	ldr	x12, [x12, #16]
     37c:	ldur	x13, [x29, #-8]
     380:	ldr	x14, [x13, #40]
     384:	add	x15, x14, #0x1
     388:	str	x15, [x13, #40]
     38c:	add	x12, x12, x14
     390:	strb	w8, [x12]
     394:	ldr	x12, [sp, #24]
     398:	mvn	x12, x12
     39c:	and	w8, w12, #0xffff
     3a0:	asr	w8, w8, w10
     3a4:	ldur	x13, [x29, #-8]
     3a8:	ldr	x13, [x13, #16]
     3ac:	ldur	x14, [x29, #-8]
     3b0:	ldr	x15, [x14, #40]
     3b4:	add	x16, x15, #0x1
     3b8:	str	x16, [x14, #40]
     3bc:	add	x13, x13, x15
     3c0:	strb	w8, [x13]
     3c4:	ldur	x13, [x29, #-8]
     3c8:	ldr	x13, [x13, #16]
     3cc:	ldur	x14, [x29, #-8]
     3d0:	ldr	x14, [x14, #40]
     3d4:	add	x0, x13, x14
     3d8:	ldur	x1, [x29, #-16]
     3dc:	ldr	x2, [sp, #24]
     3e0:	bl	0 <memcpy>
     3e4:	ldr	x13, [sp, #24]
     3e8:	ldur	x14, [x29, #-8]
     3ec:	ldr	x15, [x14, #40]
     3f0:	add	x13, x15, x13
     3f4:	str	x13, [x14, #40]
     3f8:	ldp	x29, x30, [sp, #48]
     3fc:	add	sp, sp, #0x40
     400:	ret

0000000000000404 <bi_windup>:
     404:	sub	sp, sp, #0x10
     408:	str	x0, [sp, #8]
     40c:	ldr	x8, [sp, #8]
     410:	ldr	w9, [x8, #5940]
     414:	cmp	w9, #0x8
     418:	b.le	478 <bi_windup+0x74>
     41c:	ldr	x8, [sp, #8]
     420:	ldrh	w9, [x8, #5936]
     424:	and	w9, w9, #0xff
     428:	ldr	x8, [sp, #8]
     42c:	ldr	x8, [x8, #16]
     430:	ldr	x10, [sp, #8]
     434:	ldr	x11, [x10, #40]
     438:	add	x12, x11, #0x1
     43c:	str	x12, [x10, #40]
     440:	add	x8, x8, x11
     444:	strb	w9, [x8]
     448:	ldr	x8, [sp, #8]
     44c:	ldrh	w9, [x8, #5936]
     450:	asr	w9, w9, #8
     454:	ldr	x8, [sp, #8]
     458:	ldr	x8, [x8, #16]
     45c:	ldr	x10, [sp, #8]
     460:	ldr	x11, [x10, #40]
     464:	add	x12, x11, #0x1
     468:	str	x12, [x10, #40]
     46c:	add	x8, x8, x11
     470:	strb	w9, [x8]
     474:	b	4b4 <bi_windup+0xb0>
     478:	ldr	x8, [sp, #8]
     47c:	ldr	w9, [x8, #5940]
     480:	cmp	w9, #0x0
     484:	cset	w9, le
     488:	tbnz	w9, #0, 4b4 <bi_windup+0xb0>
     48c:	ldr	x8, [sp, #8]
     490:	ldrh	w9, [x8, #5936]
     494:	ldr	x8, [sp, #8]
     498:	ldr	x8, [x8, #16]
     49c:	ldr	x10, [sp, #8]
     4a0:	ldr	x11, [x10, #40]
     4a4:	add	x12, x11, #0x1
     4a8:	str	x12, [x10, #40]
     4ac:	add	x8, x8, x11
     4b0:	strb	w9, [x8]
     4b4:	ldr	x8, [sp, #8]
     4b8:	mov	w9, #0x0                   	// #0
     4bc:	strh	w9, [x8, #5936]
     4c0:	ldr	x8, [sp, #8]
     4c4:	str	wzr, [x8, #5940]
     4c8:	add	sp, sp, #0x10
     4cc:	ret

00000000000004d0 <_tr_flush_bits>:
     4d0:	sub	sp, sp, #0x20
     4d4:	stp	x29, x30, [sp, #16]
     4d8:	add	x29, sp, #0x10
     4dc:	str	x0, [sp, #8]
     4e0:	ldr	x0, [sp, #8]
     4e4:	bl	4f4 <bi_flush>
     4e8:	ldp	x29, x30, [sp, #16]
     4ec:	add	sp, sp, #0x20
     4f0:	ret

00000000000004f4 <bi_flush>:
     4f4:	sub	sp, sp, #0x10
     4f8:	str	x0, [sp, #8]
     4fc:	ldr	x8, [sp, #8]
     500:	ldr	w9, [x8, #5940]
     504:	cmp	w9, #0x10
     508:	b.ne	57c <bi_flush+0x88>  // b.any
     50c:	ldr	x8, [sp, #8]
     510:	ldrh	w9, [x8, #5936]
     514:	and	w9, w9, #0xff
     518:	ldr	x8, [sp, #8]
     51c:	ldr	x8, [x8, #16]
     520:	ldr	x10, [sp, #8]
     524:	ldr	x11, [x10, #40]
     528:	add	x12, x11, #0x1
     52c:	str	x12, [x10, #40]
     530:	add	x8, x8, x11
     534:	strb	w9, [x8]
     538:	ldr	x8, [sp, #8]
     53c:	ldrh	w9, [x8, #5936]
     540:	asr	w9, w9, #8
     544:	ldr	x8, [sp, #8]
     548:	ldr	x8, [x8, #16]
     54c:	ldr	x10, [sp, #8]
     550:	ldr	x11, [x10, #40]
     554:	add	x12, x11, #0x1
     558:	str	x12, [x10, #40]
     55c:	add	x8, x8, x11
     560:	strb	w9, [x8]
     564:	ldr	x8, [sp, #8]
     568:	mov	w9, #0x0                   	// #0
     56c:	strh	w9, [x8, #5936]
     570:	ldr	x8, [sp, #8]
     574:	str	wzr, [x8, #5940]
     578:	b	5d4 <bi_flush+0xe0>
     57c:	ldr	x8, [sp, #8]
     580:	ldr	w9, [x8, #5940]
     584:	cmp	w9, #0x8
     588:	b.lt	5d4 <bi_flush+0xe0>  // b.tstop
     58c:	ldr	x8, [sp, #8]
     590:	ldrh	w9, [x8, #5936]
     594:	ldr	x8, [sp, #8]
     598:	ldr	x8, [x8, #16]
     59c:	ldr	x10, [sp, #8]
     5a0:	ldr	x11, [x10, #40]
     5a4:	add	x12, x11, #0x1
     5a8:	str	x12, [x10, #40]
     5ac:	add	x8, x8, x11
     5b0:	strb	w9, [x8]
     5b4:	ldr	x8, [sp, #8]
     5b8:	ldrh	w9, [x8, #5936]
     5bc:	asr	w9, w9, #8
     5c0:	strh	w9, [x8, #5936]
     5c4:	ldr	x8, [sp, #8]
     5c8:	ldr	w9, [x8, #5940]
     5cc:	subs	w9, w9, #0x8
     5d0:	str	w9, [x8, #5940]
     5d4:	add	sp, sp, #0x10
     5d8:	ret

00000000000005dc <_tr_align>:
     5dc:	sub	sp, sp, #0x30
     5e0:	stp	x29, x30, [sp, #32]
     5e4:	add	x29, sp, #0x20
     5e8:	mov	w8, #0x3                   	// #3
     5ec:	mov	w9, #0x10                  	// #16
     5f0:	adrp	x10, 0 <_tr_init>
     5f4:	add	x10, x10, #0x0
     5f8:	stur	x0, [x29, #-8]
     5fc:	stur	w8, [x29, #-12]
     600:	ldur	x11, [x29, #-8]
     604:	ldr	w8, [x11, #5940]
     608:	ldur	w12, [x29, #-12]
     60c:	subs	w9, w9, w12
     610:	cmp	w8, w9
     614:	str	x10, [sp]
     618:	b.le	6e0 <_tr_align+0x104>
     61c:	mov	w8, #0x2                   	// #2
     620:	str	w8, [sp, #16]
     624:	ldr	w8, [sp, #16]
     628:	and	w8, w8, #0xffff
     62c:	ldur	x9, [x29, #-8]
     630:	ldr	w10, [x9, #5940]
     634:	lsl	w8, w8, w10
     638:	ldur	x9, [x29, #-8]
     63c:	ldrh	w10, [x9, #5936]
     640:	orr	w8, w10, w8
     644:	strh	w8, [x9, #5936]
     648:	ldur	x9, [x29, #-8]
     64c:	ldrh	w8, [x9, #5936]
     650:	and	w8, w8, #0xff
     654:	ldur	x9, [x29, #-8]
     658:	ldr	x9, [x9, #16]
     65c:	ldur	x11, [x29, #-8]
     660:	ldr	x12, [x11, #40]
     664:	add	x13, x12, #0x1
     668:	str	x13, [x11, #40]
     66c:	add	x9, x9, x12
     670:	strb	w8, [x9]
     674:	ldur	x9, [x29, #-8]
     678:	ldrh	w8, [x9, #5936]
     67c:	asr	w8, w8, #8
     680:	ldur	x9, [x29, #-8]
     684:	ldr	x9, [x9, #16]
     688:	ldur	x11, [x29, #-8]
     68c:	ldr	x12, [x11, #40]
     690:	add	x13, x12, #0x1
     694:	str	x13, [x11, #40]
     698:	add	x9, x9, x12
     69c:	strb	w8, [x9]
     6a0:	ldr	w8, [sp, #16]
     6a4:	and	w8, w8, #0xffff
     6a8:	ldur	x9, [x29, #-8]
     6ac:	ldr	w10, [x9, #5940]
     6b0:	mov	w14, #0x10                  	// #16
     6b4:	subs	w10, w14, w10
     6b8:	asr	w8, w8, w10
     6bc:	ldur	x9, [x29, #-8]
     6c0:	strh	w8, [x9, #5936]
     6c4:	ldur	w8, [x29, #-12]
     6c8:	subs	w8, w8, #0x10
     6cc:	ldur	x9, [x29, #-8]
     6d0:	ldr	w10, [x9, #5940]
     6d4:	add	w8, w10, w8
     6d8:	str	w8, [x9, #5940]
     6dc:	b	714 <_tr_align+0x138>
     6e0:	ldur	x8, [x29, #-8]
     6e4:	ldr	w9, [x8, #5940]
     6e8:	mov	w10, #0x2                   	// #2
     6ec:	lsl	w9, w10, w9
     6f0:	ldur	x8, [x29, #-8]
     6f4:	ldrh	w10, [x8, #5936]
     6f8:	orr	w9, w10, w9
     6fc:	strh	w9, [x8, #5936]
     700:	ldur	w9, [x29, #-12]
     704:	ldur	x8, [x29, #-8]
     708:	ldr	w10, [x8, #5940]
     70c:	add	w9, w10, w9
     710:	str	w9, [x8, #5940]
     714:	ldr	x8, [sp]
     718:	ldrh	w9, [x8, #1026]
     71c:	str	w9, [sp, #12]
     720:	ldur	x10, [x29, #-8]
     724:	ldr	w9, [x10, #5940]
     728:	ldr	w11, [sp, #12]
     72c:	mov	w12, #0x10                  	// #16
     730:	subs	w11, w12, w11
     734:	cmp	w9, w11
     738:	b.le	804 <_tr_align+0x228>
     73c:	ldr	x8, [sp]
     740:	ldrh	w9, [x8, #1024]
     744:	str	w9, [sp, #8]
     748:	ldr	w9, [sp, #8]
     74c:	and	w9, w9, #0xffff
     750:	ldur	x10, [x29, #-8]
     754:	ldr	w11, [x10, #5940]
     758:	lsl	w9, w9, w11
     75c:	ldur	x10, [x29, #-8]
     760:	ldrh	w11, [x10, #5936]
     764:	orr	w9, w11, w9
     768:	strh	w9, [x10, #5936]
     76c:	ldur	x10, [x29, #-8]
     770:	ldrh	w9, [x10, #5936]
     774:	and	w9, w9, #0xff
     778:	ldur	x10, [x29, #-8]
     77c:	ldr	x10, [x10, #16]
     780:	ldur	x12, [x29, #-8]
     784:	ldr	x13, [x12, #40]
     788:	add	x14, x13, #0x1
     78c:	str	x14, [x12, #40]
     790:	add	x10, x10, x13
     794:	strb	w9, [x10]
     798:	ldur	x10, [x29, #-8]
     79c:	ldrh	w9, [x10, #5936]
     7a0:	asr	w9, w9, #8
     7a4:	ldur	x10, [x29, #-8]
     7a8:	ldr	x10, [x10, #16]
     7ac:	ldur	x12, [x29, #-8]
     7b0:	ldr	x13, [x12, #40]
     7b4:	add	x14, x13, #0x1
     7b8:	str	x14, [x12, #40]
     7bc:	add	x10, x10, x13
     7c0:	strb	w9, [x10]
     7c4:	ldr	w9, [sp, #8]
     7c8:	and	w9, w9, #0xffff
     7cc:	ldur	x10, [x29, #-8]
     7d0:	ldr	w11, [x10, #5940]
     7d4:	mov	w15, #0x10                  	// #16
     7d8:	subs	w11, w15, w11
     7dc:	asr	w9, w9, w11
     7e0:	ldur	x10, [x29, #-8]
     7e4:	strh	w9, [x10, #5936]
     7e8:	ldr	w9, [sp, #12]
     7ec:	subs	w9, w9, #0x10
     7f0:	ldur	x10, [x29, #-8]
     7f4:	ldr	w11, [x10, #5940]
     7f8:	add	w9, w11, w9
     7fc:	str	w9, [x10, #5940]
     800:	b	83c <_tr_align+0x260>
     804:	ldr	x8, [sp]
     808:	ldrh	w9, [x8, #1024]
     80c:	ldur	x10, [x29, #-8]
     810:	ldr	w11, [x10, #5940]
     814:	lsl	w9, w9, w11
     818:	ldur	x10, [x29, #-8]
     81c:	ldrh	w11, [x10, #5936]
     820:	orr	w9, w11, w9
     824:	strh	w9, [x10, #5936]
     828:	ldr	w9, [sp, #12]
     82c:	ldur	x10, [x29, #-8]
     830:	ldr	w11, [x10, #5940]
     834:	add	w9, w11, w9
     838:	str	w9, [x10, #5940]
     83c:	ldur	x0, [x29, #-8]
     840:	bl	4f4 <bi_flush>
     844:	ldp	x29, x30, [sp, #32]
     848:	add	sp, sp, #0x30
     84c:	ret

0000000000000850 <_tr_flush_block>:
     850:	sub	sp, sp, #0x60
     854:	stp	x29, x30, [sp, #80]
     858:	add	x29, sp, #0x50
     85c:	stur	x0, [x29, #-8]
     860:	stur	x1, [x29, #-16]
     864:	stur	x2, [x29, #-24]
     868:	stur	w3, [x29, #-28]
     86c:	str	wzr, [sp, #28]
     870:	ldur	x8, [x29, #-8]
     874:	ldr	w9, [x8, #196]
     878:	cmp	w9, #0x0
     87c:	cset	w9, le
     880:	tbnz	w9, #0, 924 <_tr_flush_block+0xd4>
     884:	ldur	x8, [x29, #-8]
     888:	ldr	x8, [x8]
     88c:	ldr	w9, [x8, #88]
     890:	cmp	w9, #0x2
     894:	b.ne	8ac <_tr_flush_block+0x5c>  // b.any
     898:	ldur	x0, [x29, #-8]
     89c:	bl	c58 <detect_data_type>
     8a0:	ldur	x8, [x29, #-8]
     8a4:	ldr	x8, [x8]
     8a8:	str	w0, [x8, #88]
     8ac:	ldur	x0, [x29, #-8]
     8b0:	ldur	x8, [x29, #-8]
     8b4:	add	x1, x8, #0xb58
     8b8:	bl	d54 <build_tree>
     8bc:	ldur	x0, [x29, #-8]
     8c0:	ldur	x8, [x29, #-8]
     8c4:	add	x1, x8, #0xb70
     8c8:	bl	d54 <build_tree>
     8cc:	ldur	x0, [x29, #-8]
     8d0:	bl	1184 <build_bl_tree>
     8d4:	str	w0, [sp, #28]
     8d8:	ldur	x8, [x29, #-8]
     8dc:	ldr	x8, [x8, #5912]
     8e0:	add	x8, x8, #0x3
     8e4:	add	x8, x8, #0x7
     8e8:	lsr	x8, x8, #3
     8ec:	str	x8, [sp, #40]
     8f0:	ldur	x8, [x29, #-8]
     8f4:	ldr	x8, [x8, #5920]
     8f8:	add	x8, x8, #0x3
     8fc:	add	x8, x8, #0x7
     900:	lsr	x8, x8, #3
     904:	str	x8, [sp, #32]
     908:	ldr	x8, [sp, #32]
     90c:	ldr	x9, [sp, #40]
     910:	cmp	x8, x9
     914:	b.hi	920 <_tr_flush_block+0xd0>  // b.pmore
     918:	ldr	x8, [sp, #32]
     91c:	str	x8, [sp, #40]
     920:	b	934 <_tr_flush_block+0xe4>
     924:	ldur	x8, [x29, #-24]
     928:	add	x8, x8, #0x5
     92c:	str	x8, [sp, #32]
     930:	str	x8, [sp, #40]
     934:	ldur	x8, [x29, #-24]
     938:	add	x8, x8, #0x4
     93c:	ldr	x9, [sp, #40]
     940:	cmp	x8, x9
     944:	b.hi	968 <_tr_flush_block+0x118>  // b.pmore
     948:	ldur	x8, [x29, #-16]
     94c:	cbz	x8, 968 <_tr_flush_block+0x118>
     950:	ldur	x0, [x29, #-8]
     954:	ldur	x1, [x29, #-16]
     958:	ldur	x2, [x29, #-24]
     95c:	ldur	w3, [x29, #-28]
     960:	bl	1bc <_tr_stored_block>
     964:	b	c34 <_tr_flush_block+0x3e4>
     968:	ldur	x8, [x29, #-8]
     96c:	ldr	w9, [x8, #200]
     970:	cmp	w9, #0x4
     974:	b.eq	988 <_tr_flush_block+0x138>  // b.none
     978:	ldr	x8, [sp, #32]
     97c:	ldr	x9, [sp, #40]
     980:	cmp	x8, x9
     984:	b.ne	acc <_tr_flush_block+0x27c>  // b.any
     988:	mov	w8, #0x3                   	// #3
     98c:	str	w8, [sp, #24]
     990:	ldur	x9, [x29, #-8]
     994:	ldr	w8, [x9, #5940]
     998:	ldr	w10, [sp, #24]
     99c:	mov	w11, #0x10                  	// #16
     9a0:	subs	w10, w11, w10
     9a4:	cmp	w8, w10
     9a8:	b.le	a74 <_tr_flush_block+0x224>
     9ac:	ldur	w8, [x29, #-28]
     9b0:	add	w8, w8, #0x2
     9b4:	str	w8, [sp, #20]
     9b8:	ldr	w8, [sp, #20]
     9bc:	and	w8, w8, #0xffff
     9c0:	ldur	x9, [x29, #-8]
     9c4:	ldr	w10, [x9, #5940]
     9c8:	lsl	w8, w8, w10
     9cc:	ldur	x9, [x29, #-8]
     9d0:	ldrh	w10, [x9, #5936]
     9d4:	orr	w8, w10, w8
     9d8:	strh	w8, [x9, #5936]
     9dc:	ldur	x9, [x29, #-8]
     9e0:	ldrh	w8, [x9, #5936]
     9e4:	and	w8, w8, #0xff
     9e8:	ldur	x9, [x29, #-8]
     9ec:	ldr	x9, [x9, #16]
     9f0:	ldur	x11, [x29, #-8]
     9f4:	ldr	x12, [x11, #40]
     9f8:	add	x13, x12, #0x1
     9fc:	str	x13, [x11, #40]
     a00:	add	x9, x9, x12
     a04:	strb	w8, [x9]
     a08:	ldur	x9, [x29, #-8]
     a0c:	ldrh	w8, [x9, #5936]
     a10:	asr	w8, w8, #8
     a14:	ldur	x9, [x29, #-8]
     a18:	ldr	x9, [x9, #16]
     a1c:	ldur	x11, [x29, #-8]
     a20:	ldr	x12, [x11, #40]
     a24:	add	x13, x12, #0x1
     a28:	str	x13, [x11, #40]
     a2c:	add	x9, x9, x12
     a30:	strb	w8, [x9]
     a34:	ldr	w8, [sp, #20]
     a38:	and	w8, w8, #0xffff
     a3c:	ldur	x9, [x29, #-8]
     a40:	ldr	w10, [x9, #5940]
     a44:	mov	w14, #0x10                  	// #16
     a48:	subs	w10, w14, w10
     a4c:	asr	w8, w8, w10
     a50:	ldur	x9, [x29, #-8]
     a54:	strh	w8, [x9, #5936]
     a58:	ldr	w8, [sp, #24]
     a5c:	subs	w8, w8, #0x10
     a60:	ldur	x9, [x29, #-8]
     a64:	ldr	w10, [x9, #5940]
     a68:	add	w8, w10, w8
     a6c:	str	w8, [x9, #5940]
     a70:	b	ab0 <_tr_flush_block+0x260>
     a74:	ldur	w8, [x29, #-28]
     a78:	add	w8, w8, #0x2
     a7c:	and	w8, w8, #0xffff
     a80:	ldur	x9, [x29, #-8]
     a84:	ldr	w10, [x9, #5940]
     a88:	lsl	w8, w8, w10
     a8c:	ldur	x9, [x29, #-8]
     a90:	ldrh	w10, [x9, #5936]
     a94:	orr	w8, w10, w8
     a98:	strh	w8, [x9, #5936]
     a9c:	ldr	w8, [sp, #24]
     aa0:	ldur	x9, [x29, #-8]
     aa4:	ldr	w10, [x9, #5940]
     aa8:	add	w8, w10, w8
     aac:	str	w8, [x9, #5940]
     ab0:	ldur	x0, [x29, #-8]
     ab4:	adrp	x1, 0 <_tr_init>
     ab8:	add	x1, x1, #0x0
     abc:	adrp	x2, 0 <_tr_init>
     ac0:	add	x2, x2, #0x0
     ac4:	bl	1270 <compress_block>
     ac8:	b	c34 <_tr_flush_block+0x3e4>
     acc:	mov	w8, #0x3                   	// #3
     ad0:	str	w8, [sp, #16]
     ad4:	ldur	x9, [x29, #-8]
     ad8:	ldr	w8, [x9, #5940]
     adc:	ldr	w10, [sp, #16]
     ae0:	mov	w11, #0x10                  	// #16
     ae4:	subs	w10, w11, w10
     ae8:	cmp	w8, w10
     aec:	b.le	bb8 <_tr_flush_block+0x368>
     af0:	ldur	w8, [x29, #-28]
     af4:	add	w8, w8, #0x4
     af8:	str	w8, [sp, #12]
     afc:	ldr	w8, [sp, #12]
     b00:	and	w8, w8, #0xffff
     b04:	ldur	x9, [x29, #-8]
     b08:	ldr	w10, [x9, #5940]
     b0c:	lsl	w8, w8, w10
     b10:	ldur	x9, [x29, #-8]
     b14:	ldrh	w10, [x9, #5936]
     b18:	orr	w8, w10, w8
     b1c:	strh	w8, [x9, #5936]
     b20:	ldur	x9, [x29, #-8]
     b24:	ldrh	w8, [x9, #5936]
     b28:	and	w8, w8, #0xff
     b2c:	ldur	x9, [x29, #-8]
     b30:	ldr	x9, [x9, #16]
     b34:	ldur	x11, [x29, #-8]
     b38:	ldr	x12, [x11, #40]
     b3c:	add	x13, x12, #0x1
     b40:	str	x13, [x11, #40]
     b44:	add	x9, x9, x12
     b48:	strb	w8, [x9]
     b4c:	ldur	x9, [x29, #-8]
     b50:	ldrh	w8, [x9, #5936]
     b54:	asr	w8, w8, #8
     b58:	ldur	x9, [x29, #-8]
     b5c:	ldr	x9, [x9, #16]
     b60:	ldur	x11, [x29, #-8]
     b64:	ldr	x12, [x11, #40]
     b68:	add	x13, x12, #0x1
     b6c:	str	x13, [x11, #40]
     b70:	add	x9, x9, x12
     b74:	strb	w8, [x9]
     b78:	ldr	w8, [sp, #12]
     b7c:	and	w8, w8, #0xffff
     b80:	ldur	x9, [x29, #-8]
     b84:	ldr	w10, [x9, #5940]
     b88:	mov	w14, #0x10                  	// #16
     b8c:	subs	w10, w14, w10
     b90:	asr	w8, w8, w10
     b94:	ldur	x9, [x29, #-8]
     b98:	strh	w8, [x9, #5936]
     b9c:	ldr	w8, [sp, #16]
     ba0:	subs	w8, w8, #0x10
     ba4:	ldur	x9, [x29, #-8]
     ba8:	ldr	w10, [x9, #5940]
     bac:	add	w8, w10, w8
     bb0:	str	w8, [x9, #5940]
     bb4:	b	bf4 <_tr_flush_block+0x3a4>
     bb8:	ldur	w8, [x29, #-28]
     bbc:	add	w8, w8, #0x4
     bc0:	and	w8, w8, #0xffff
     bc4:	ldur	x9, [x29, #-8]
     bc8:	ldr	w10, [x9, #5940]
     bcc:	lsl	w8, w8, w10
     bd0:	ldur	x9, [x29, #-8]
     bd4:	ldrh	w10, [x9, #5936]
     bd8:	orr	w8, w10, w8
     bdc:	strh	w8, [x9, #5936]
     be0:	ldr	w8, [sp, #16]
     be4:	ldur	x9, [x29, #-8]
     be8:	ldr	w10, [x9, #5940]
     bec:	add	w8, w10, w8
     bf0:	str	w8, [x9, #5940]
     bf4:	ldur	x0, [x29, #-8]
     bf8:	ldur	x8, [x29, #-8]
     bfc:	ldr	w9, [x8, #2912]
     c00:	add	w1, w9, #0x1
     c04:	ldur	x8, [x29, #-8]
     c08:	ldr	w9, [x8, #2936]
     c0c:	add	w2, w9, #0x1
     c10:	ldr	w9, [sp, #28]
     c14:	add	w3, w9, #0x1
     c18:	bl	1b74 <send_all_trees>
     c1c:	ldur	x0, [x29, #-8]
     c20:	ldur	x8, [x29, #-8]
     c24:	add	x1, x8, #0xd4
     c28:	ldur	x8, [x29, #-8]
     c2c:	add	x2, x8, #0x9c8
     c30:	bl	1270 <compress_block>
     c34:	ldur	x0, [x29, #-8]
     c38:	bl	c0 <init_block>
     c3c:	ldur	w8, [x29, #-28]
     c40:	cbz	w8, c4c <_tr_flush_block+0x3fc>
     c44:	ldur	x0, [x29, #-8]
     c48:	bl	404 <bi_windup>
     c4c:	ldp	x29, x30, [sp, #80]
     c50:	add	sp, sp, #0x60
     c54:	ret

0000000000000c58 <detect_data_type>:
     c58:	sub	sp, sp, #0x20
     c5c:	mov	x8, #0xc07f                	// #49279
     c60:	movk	x8, #0xf3ff, lsl #16
     c64:	str	x0, [sp, #16]
     c68:	str	x8, [sp, #8]
     c6c:	str	wzr, [sp, #4]
     c70:	ldr	w8, [sp, #4]
     c74:	cmp	w8, #0x1f
     c78:	b.gt	cc8 <detect_data_type+0x70>
     c7c:	ldr	x8, [sp, #8]
     c80:	and	x8, x8, #0x1
     c84:	cbz	x8, cac <detect_data_type+0x54>
     c88:	ldr	x8, [sp, #16]
     c8c:	add	x8, x8, #0xd4
     c90:	ldrsw	x9, [sp, #4]
     c94:	mov	x10, #0x4                   	// #4
     c98:	mul	x9, x10, x9
     c9c:	ldrh	w11, [x8, x9]
     ca0:	cbz	w11, cac <detect_data_type+0x54>
     ca4:	str	wzr, [sp, #28]
     ca8:	b	d48 <detect_data_type+0xf0>
     cac:	ldr	w8, [sp, #4]
     cb0:	add	w8, w8, #0x1
     cb4:	str	w8, [sp, #4]
     cb8:	ldr	x9, [sp, #8]
     cbc:	lsr	x9, x9, #1
     cc0:	str	x9, [sp, #8]
     cc4:	b	c70 <detect_data_type+0x18>
     cc8:	ldr	x8, [sp, #16]
     ccc:	ldrh	w9, [x8, #248]
     cd0:	cbnz	w9, cec <detect_data_type+0x94>
     cd4:	ldr	x8, [sp, #16]
     cd8:	ldrh	w9, [x8, #252]
     cdc:	cbnz	w9, cec <detect_data_type+0x94>
     ce0:	ldr	x8, [sp, #16]
     ce4:	ldrh	w9, [x8, #264]
     ce8:	cbz	w9, cf8 <detect_data_type+0xa0>
     cec:	mov	w8, #0x1                   	// #1
     cf0:	str	w8, [sp, #28]
     cf4:	b	d48 <detect_data_type+0xf0>
     cf8:	mov	w8, #0x20                  	// #32
     cfc:	str	w8, [sp, #4]
     d00:	ldr	w8, [sp, #4]
     d04:	cmp	w8, #0x100
     d08:	b.ge	d44 <detect_data_type+0xec>  // b.tcont
     d0c:	ldr	x8, [sp, #16]
     d10:	add	x8, x8, #0xd4
     d14:	ldrsw	x9, [sp, #4]
     d18:	mov	x10, #0x4                   	// #4
     d1c:	mul	x9, x10, x9
     d20:	ldrh	w11, [x8, x9]
     d24:	cbz	w11, d34 <detect_data_type+0xdc>
     d28:	mov	w8, #0x1                   	// #1
     d2c:	str	w8, [sp, #28]
     d30:	b	d48 <detect_data_type+0xf0>
     d34:	ldr	w8, [sp, #4]
     d38:	add	w8, w8, #0x1
     d3c:	str	w8, [sp, #4]
     d40:	b	d00 <detect_data_type+0xa8>
     d44:	str	wzr, [sp, #28]
     d48:	ldr	w0, [sp, #28]
     d4c:	add	sp, sp, #0x20
     d50:	ret

0000000000000d54 <build_tree>:
     d54:	sub	sp, sp, #0x60
     d58:	stp	x29, x30, [sp, #80]
     d5c:	add	x29, sp, #0x50
     d60:	mov	w8, #0xffffffff            	// #-1
     d64:	mov	w9, #0x23d                 	// #573
     d68:	stur	x0, [x29, #-8]
     d6c:	stur	x1, [x29, #-16]
     d70:	ldur	x10, [x29, #-16]
     d74:	ldr	x10, [x10]
     d78:	stur	x10, [x29, #-24]
     d7c:	ldur	x10, [x29, #-16]
     d80:	ldr	x10, [x10, #16]
     d84:	ldr	x10, [x10]
     d88:	stur	x10, [x29, #-32]
     d8c:	ldur	x10, [x29, #-16]
     d90:	ldr	x10, [x10, #16]
     d94:	ldr	w11, [x10, #20]
     d98:	stur	w11, [x29, #-36]
     d9c:	str	w8, [sp, #32]
     da0:	ldur	x10, [x29, #-8]
     da4:	str	wzr, [x10, #5300]
     da8:	ldur	x10, [x29, #-8]
     dac:	str	w9, [x10, #5304]
     db0:	str	wzr, [sp, #40]
     db4:	ldr	w8, [sp, #40]
     db8:	ldur	w9, [x29, #-36]
     dbc:	cmp	w8, w9
     dc0:	b.ge	e4c <build_tree+0xf8>  // b.tcont
     dc4:	ldur	x8, [x29, #-24]
     dc8:	ldrsw	x9, [sp, #40]
     dcc:	mov	x10, #0x4                   	// #4
     dd0:	mul	x9, x10, x9
     dd4:	ldrh	w11, [x8, x9]
     dd8:	cbz	w11, e20 <build_tree+0xcc>
     ddc:	ldr	w8, [sp, #40]
     de0:	str	w8, [sp, #32]
     de4:	ldur	x9, [x29, #-8]
     de8:	add	x9, x9, #0xbc0
     dec:	ldur	x10, [x29, #-8]
     df0:	ldr	w11, [x10, #5300]
     df4:	add	w11, w11, #0x1
     df8:	str	w11, [x10, #5300]
     dfc:	str	w8, [x9, w11, sxtw #2]
     e00:	ldur	x9, [x29, #-8]
     e04:	mov	x10, #0x14bc                	// #5308
     e08:	add	x9, x9, x10
     e0c:	ldrsw	x10, [sp, #40]
     e10:	add	x9, x9, x10
     e14:	mov	w8, #0x0                   	// #0
     e18:	strb	w8, [x9]
     e1c:	b	e3c <build_tree+0xe8>
     e20:	ldur	x8, [x29, #-24]
     e24:	ldrsw	x9, [sp, #40]
     e28:	mov	x10, #0x4                   	// #4
     e2c:	mul	x9, x10, x9
     e30:	add	x8, x8, x9
     e34:	mov	w11, #0x0                   	// #0
     e38:	strh	w11, [x8, #2]
     e3c:	ldr	w8, [sp, #40]
     e40:	add	w8, w8, #0x1
     e44:	str	w8, [sp, #40]
     e48:	b	db4 <build_tree+0x60>
     e4c:	ldur	x8, [x29, #-8]
     e50:	ldr	w9, [x8, #5300]
     e54:	cmp	w9, #0x2
     e58:	b.ge	f28 <build_tree+0x1d4>  // b.tcont
     e5c:	ldr	w8, [sp, #32]
     e60:	cmp	w8, #0x2
     e64:	b.ge	e7c <build_tree+0x128>  // b.tcont
     e68:	ldr	w8, [sp, #32]
     e6c:	add	w8, w8, #0x1
     e70:	str	w8, [sp, #32]
     e74:	str	w8, [sp, #24]
     e78:	b	e84 <build_tree+0x130>
     e7c:	mov	w8, wzr
     e80:	str	w8, [sp, #24]
     e84:	ldr	w8, [sp, #24]
     e88:	ldur	x9, [x29, #-8]
     e8c:	add	x9, x9, #0xbc0
     e90:	ldur	x10, [x29, #-8]
     e94:	ldr	w11, [x10, #5300]
     e98:	add	w11, w11, #0x1
     e9c:	str	w11, [x10, #5300]
     ea0:	mov	x10, #0x4                   	// #4
     ea4:	str	w8, [x9, w11, sxtw #2]
     ea8:	str	w8, [sp, #28]
     eac:	ldur	x9, [x29, #-24]
     eb0:	ldrsw	x12, [sp, #28]
     eb4:	mul	x10, x10, x12
     eb8:	add	x9, x9, x10
     ebc:	mov	w8, #0x1                   	// #1
     ec0:	strh	w8, [x9]
     ec4:	ldur	x9, [x29, #-8]
     ec8:	mov	x10, #0x14bc                	// #5308
     ecc:	add	x9, x9, x10
     ed0:	ldrsw	x10, [sp, #28]
     ed4:	add	x9, x9, x10
     ed8:	mov	w8, #0x0                   	// #0
     edc:	strb	w8, [x9]
     ee0:	ldur	x9, [x29, #-8]
     ee4:	ldr	x10, [x9, #5912]
     ee8:	subs	x10, x10, #0x1
     eec:	str	x10, [x9, #5912]
     ef0:	ldur	x9, [x29, #-32]
     ef4:	cbz	x9, f24 <build_tree+0x1d0>
     ef8:	ldur	x8, [x29, #-32]
     efc:	ldrsw	x9, [sp, #28]
     f00:	mov	x10, #0x4                   	// #4
     f04:	mul	x9, x10, x9
     f08:	add	x8, x8, x9
     f0c:	ldrh	w11, [x8, #2]
     f10:	mov	w8, w11
     f14:	ldur	x9, [x29, #-8]
     f18:	ldr	x10, [x9, #5920]
     f1c:	subs	x8, x10, x8
     f20:	str	x8, [x9, #5920]
     f24:	b	e4c <build_tree+0xf8>
     f28:	ldr	w8, [sp, #32]
     f2c:	ldur	x9, [x29, #-16]
     f30:	str	w8, [x9, #8]
     f34:	ldur	x9, [x29, #-8]
     f38:	ldr	w8, [x9, #5300]
     f3c:	mov	w10, #0x2                   	// #2
     f40:	sdiv	w8, w8, w10
     f44:	str	w8, [sp, #40]
     f48:	ldr	w8, [sp, #40]
     f4c:	cmp	w8, #0x1
     f50:	b.lt	f74 <build_tree+0x220>  // b.tstop
     f54:	ldur	x0, [x29, #-8]
     f58:	ldur	x1, [x29, #-24]
     f5c:	ldr	w2, [sp, #40]
     f60:	bl	226c <pqdownheap>
     f64:	ldr	w8, [sp, #40]
     f68:	subs	w8, w8, #0x1
     f6c:	str	w8, [sp, #40]
     f70:	b	f48 <build_tree+0x1f4>
     f74:	ldur	w8, [x29, #-36]
     f78:	str	w8, [sp, #28]
     f7c:	ldur	x8, [x29, #-8]
     f80:	mov	x9, #0x4                   	// #4
     f84:	ldr	w10, [x8, #3012]
     f88:	str	w10, [sp, #40]
     f8c:	ldur	x8, [x29, #-8]
     f90:	add	x8, x8, #0xbc0
     f94:	ldur	x11, [x29, #-8]
     f98:	ldrsw	x12, [x11, #5300]
     f9c:	mov	w10, w12
     fa0:	subs	w10, w10, #0x1
     fa4:	str	w10, [x11, #5300]
     fa8:	ldr	w10, [x8, x12, lsl #2]
     fac:	ldur	x8, [x29, #-8]
     fb0:	str	w10, [x8, #3012]
     fb4:	ldur	x0, [x29, #-8]
     fb8:	ldur	x1, [x29, #-24]
     fbc:	mov	w2, #0x1                   	// #1
     fc0:	str	x9, [sp, #16]
     fc4:	bl	226c <pqdownheap>
     fc8:	ldur	x8, [x29, #-8]
     fcc:	ldr	w10, [x8, #3012]
     fd0:	str	w10, [sp, #36]
     fd4:	ldr	w10, [sp, #40]
     fd8:	ldur	x8, [x29, #-8]
     fdc:	add	x8, x8, #0xbc0
     fe0:	ldur	x9, [x29, #-8]
     fe4:	ldr	w13, [x9, #5304]
     fe8:	subs	w13, w13, #0x1
     fec:	str	w13, [x9, #5304]
     ff0:	str	w10, [x8, w13, sxtw #2]
     ff4:	ldr	w10, [sp, #36]
     ff8:	ldur	x8, [x29, #-8]
     ffc:	add	x8, x8, #0xbc0
    1000:	ldur	x9, [x29, #-8]
    1004:	ldr	w13, [x9, #5304]
    1008:	subs	w13, w13, #0x1
    100c:	str	w13, [x9, #5304]
    1010:	str	w10, [x8, w13, sxtw #2]
    1014:	ldur	x8, [x29, #-24]
    1018:	ldrsw	x9, [sp, #40]
    101c:	ldr	x11, [sp, #16]
    1020:	mul	x9, x11, x9
    1024:	ldrh	w10, [x8, x9]
    1028:	ldur	x8, [x29, #-24]
    102c:	ldrsw	x9, [sp, #36]
    1030:	mul	x9, x11, x9
    1034:	ldrh	w13, [x8, x9]
    1038:	add	w10, w10, w13
    103c:	ldur	x8, [x29, #-24]
    1040:	ldrsw	x9, [sp, #28]
    1044:	mul	x9, x11, x9
    1048:	add	x8, x8, x9
    104c:	strh	w10, [x8]
    1050:	ldur	x8, [x29, #-8]
    1054:	mov	x9, #0x14bc                	// #5308
    1058:	add	x8, x8, x9
    105c:	ldrsw	x12, [sp, #40]
    1060:	ldrb	w10, [x8, x12]
    1064:	ldur	x8, [x29, #-8]
    1068:	add	x8, x8, x9
    106c:	ldrsw	x9, [sp, #36]
    1070:	ldrb	w13, [x8, x9]
    1074:	cmp	w10, w13
    1078:	b.lt	1098 <build_tree+0x344>  // b.tstop
    107c:	ldur	x8, [x29, #-8]
    1080:	mov	x9, #0x14bc                	// #5308
    1084:	add	x8, x8, x9
    1088:	ldrsw	x9, [sp, #40]
    108c:	ldrb	w10, [x8, x9]
    1090:	str	w10, [sp, #12]
    1094:	b	10b0 <build_tree+0x35c>
    1098:	ldur	x8, [x29, #-8]
    109c:	mov	x9, #0x14bc                	// #5308
    10a0:	add	x8, x8, x9
    10a4:	ldrsw	x9, [sp, #36]
    10a8:	ldrb	w10, [x8, x9]
    10ac:	str	w10, [sp, #12]
    10b0:	ldr	w8, [sp, #12]
    10b4:	mov	w2, #0x1                   	// #1
    10b8:	add	w8, w8, #0x1
    10bc:	ldur	x9, [x29, #-8]
    10c0:	mov	x10, #0x14bc                	// #5308
    10c4:	add	x9, x9, x10
    10c8:	ldrsw	x10, [sp, #28]
    10cc:	add	x9, x9, x10
    10d0:	strb	w8, [x9]
    10d4:	ldr	w8, [sp, #28]
    10d8:	ldur	x9, [x29, #-24]
    10dc:	ldrsw	x10, [sp, #36]
    10e0:	mov	x11, #0x4                   	// #4
    10e4:	mul	x10, x11, x10
    10e8:	add	x9, x9, x10
    10ec:	strh	w8, [x9, #2]
    10f0:	ldur	x9, [x29, #-24]
    10f4:	ldrsw	x10, [sp, #40]
    10f8:	mul	x10, x11, x10
    10fc:	add	x9, x9, x10
    1100:	strh	w8, [x9, #2]
    1104:	ldr	w8, [sp, #28]
    1108:	add	w12, w8, #0x1
    110c:	str	w12, [sp, #28]
    1110:	ldur	x9, [x29, #-8]
    1114:	str	w8, [x9, #3012]
    1118:	ldur	x0, [x29, #-8]
    111c:	ldur	x1, [x29, #-24]
    1120:	bl	226c <pqdownheap>
    1124:	ldur	x8, [x29, #-8]
    1128:	ldr	w9, [x8, #5300]
    112c:	cmp	w9, #0x2
    1130:	b.ge	f7c <build_tree+0x228>  // b.tcont
    1134:	ldur	x8, [x29, #-8]
    1138:	ldr	w9, [x8, #3012]
    113c:	ldur	x8, [x29, #-8]
    1140:	add	x8, x8, #0xbc0
    1144:	ldur	x10, [x29, #-8]
    1148:	ldr	w11, [x10, #5304]
    114c:	subs	w11, w11, #0x1
    1150:	str	w11, [x10, #5304]
    1154:	str	w9, [x8, w11, sxtw #2]
    1158:	ldur	x0, [x29, #-8]
    115c:	ldur	x1, [x29, #-16]
    1160:	bl	24a8 <gen_bitlen>
    1164:	ldur	x0, [x29, #-24]
    1168:	ldr	w1, [sp, #32]
    116c:	ldur	x8, [x29, #-8]
    1170:	add	x2, x8, #0xba0
    1174:	bl	2904 <gen_codes>
    1178:	ldp	x29, x30, [sp, #80]
    117c:	add	sp, sp, #0x60
    1180:	ret

0000000000001184 <build_bl_tree>:
    1184:	sub	sp, sp, #0x20
    1188:	stp	x29, x30, [sp, #16]
    118c:	add	x29, sp, #0x10
    1190:	mov	w8, #0x12                  	// #18
    1194:	str	x0, [sp, #8]
    1198:	ldr	x0, [sp, #8]
    119c:	ldr	x9, [sp, #8]
    11a0:	add	x1, x9, #0xd4
    11a4:	ldr	x9, [sp, #8]
    11a8:	ldr	w2, [x9, #2912]
    11ac:	str	w8, [sp]
    11b0:	bl	2a84 <scan_tree>
    11b4:	ldr	x0, [sp, #8]
    11b8:	ldr	x9, [sp, #8]
    11bc:	add	x1, x9, #0x9c8
    11c0:	ldr	x9, [sp, #8]
    11c4:	ldr	w2, [x9, #2936]
    11c8:	bl	2a84 <scan_tree>
    11cc:	ldr	x0, [sp, #8]
    11d0:	ldr	x9, [sp, #8]
    11d4:	add	x1, x9, #0xb88
    11d8:	bl	d54 <build_tree>
    11dc:	ldr	w8, [sp]
    11e0:	str	w8, [sp, #4]
    11e4:	ldr	w8, [sp, #4]
    11e8:	cmp	w8, #0x3
    11ec:	b.lt	1234 <build_bl_tree+0xb0>  // b.tstop
    11f0:	ldr	x8, [sp, #8]
    11f4:	add	x8, x8, #0xabc
    11f8:	ldrsw	x9, [sp, #4]
    11fc:	adrp	x10, 0 <_tr_init>
    1200:	add	x10, x10, #0x0
    1204:	ldrb	w11, [x10, x9]
    1208:	mov	w9, w11
    120c:	mov	x10, #0x4                   	// #4
    1210:	mul	x9, x10, x9
    1214:	add	x8, x8, x9
    1218:	ldrh	w11, [x8, #2]
    121c:	cbz	w11, 1224 <build_bl_tree+0xa0>
    1220:	b	1234 <build_bl_tree+0xb0>
    1224:	ldr	w8, [sp, #4]
    1228:	subs	w8, w8, #0x1
    122c:	str	w8, [sp, #4]
    1230:	b	11e4 <build_bl_tree+0x60>
    1234:	ldrsw	x8, [sp, #4]
    1238:	add	x8, x8, #0x1
    123c:	mov	x9, #0x3                   	// #3
    1240:	mul	x8, x9, x8
    1244:	add	x8, x8, #0x5
    1248:	add	x8, x8, #0x5
    124c:	add	x8, x8, #0x4
    1250:	ldr	x9, [sp, #8]
    1254:	ldr	x10, [x9, #5912]
    1258:	add	x8, x10, x8
    125c:	str	x8, [x9, #5912]
    1260:	ldr	w0, [sp, #4]
    1264:	ldp	x29, x30, [sp, #16]
    1268:	add	sp, sp, #0x20
    126c:	ret

0000000000001270 <compress_block>:
    1270:	sub	sp, sp, #0x60
    1274:	str	x0, [sp, #88]
    1278:	str	x1, [sp, #80]
    127c:	str	x2, [sp, #72]
    1280:	str	wzr, [sp, #60]
    1284:	ldr	x8, [sp, #88]
    1288:	ldr	w9, [x8, #5900]
    128c:	cbz	w9, 1a44 <compress_block+0x7d4>
    1290:	ldr	x8, [sp, #88]
    1294:	ldr	x8, [x8, #5904]
    1298:	ldr	w9, [sp, #60]
    129c:	mov	w10, w9
    12a0:	ldrh	w9, [x8, x10, lsl #1]
    12a4:	str	w9, [sp, #68]
    12a8:	ldr	x8, [sp, #88]
    12ac:	ldr	x8, [x8, #5888]
    12b0:	ldr	w9, [sp, #60]
    12b4:	mov	w10, w9
    12b8:	mov	w9, w10
    12bc:	add	w9, w9, #0x1
    12c0:	str	w9, [sp, #60]
    12c4:	ldrb	w9, [x8, x10]
    12c8:	str	w9, [sp, #64]
    12cc:	ldr	w9, [sp, #68]
    12d0:	cbnz	w9, 1428 <compress_block+0x1b8>
    12d4:	ldr	x8, [sp, #80]
    12d8:	ldrsw	x9, [sp, #64]
    12dc:	mov	x10, #0x4                   	// #4
    12e0:	mul	x9, x10, x9
    12e4:	add	x8, x8, x9
    12e8:	ldrh	w11, [x8, #2]
    12ec:	str	w11, [sp, #48]
    12f0:	ldr	x8, [sp, #88]
    12f4:	ldr	w11, [x8, #5940]
    12f8:	ldr	w12, [sp, #48]
    12fc:	mov	w13, #0x10                  	// #16
    1300:	subs	w12, w13, w12
    1304:	cmp	w11, w12
    1308:	b.le	13e0 <compress_block+0x170>
    130c:	ldr	x8, [sp, #80]
    1310:	ldrsw	x9, [sp, #64]
    1314:	mov	x10, #0x4                   	// #4
    1318:	mul	x9, x10, x9
    131c:	ldrh	w11, [x8, x9]
    1320:	str	w11, [sp, #44]
    1324:	ldr	w11, [sp, #44]
    1328:	and	w11, w11, #0xffff
    132c:	ldr	x8, [sp, #88]
    1330:	ldr	w12, [x8, #5940]
    1334:	lsl	w11, w11, w12
    1338:	ldr	x8, [sp, #88]
    133c:	ldrh	w12, [x8, #5936]
    1340:	orr	w11, w12, w11
    1344:	strh	w11, [x8, #5936]
    1348:	ldr	x8, [sp, #88]
    134c:	ldrh	w11, [x8, #5936]
    1350:	and	w11, w11, #0xff
    1354:	ldr	x8, [sp, #88]
    1358:	ldr	x8, [x8, #16]
    135c:	ldr	x9, [sp, #88]
    1360:	ldr	x10, [x9, #40]
    1364:	add	x13, x10, #0x1
    1368:	str	x13, [x9, #40]
    136c:	add	x8, x8, x10
    1370:	strb	w11, [x8]
    1374:	ldr	x8, [sp, #88]
    1378:	ldrh	w11, [x8, #5936]
    137c:	asr	w11, w11, #8
    1380:	ldr	x8, [sp, #88]
    1384:	ldr	x8, [x8, #16]
    1388:	ldr	x9, [sp, #88]
    138c:	ldr	x10, [x9, #40]
    1390:	add	x13, x10, #0x1
    1394:	str	x13, [x9, #40]
    1398:	add	x8, x8, x10
    139c:	strb	w11, [x8]
    13a0:	ldr	w11, [sp, #44]
    13a4:	and	w11, w11, #0xffff
    13a8:	ldr	x8, [sp, #88]
    13ac:	ldr	w12, [x8, #5940]
    13b0:	mov	w14, #0x10                  	// #16
    13b4:	subs	w12, w14, w12
    13b8:	asr	w11, w11, w12
    13bc:	ldr	x8, [sp, #88]
    13c0:	strh	w11, [x8, #5936]
    13c4:	ldr	w11, [sp, #48]
    13c8:	subs	w11, w11, #0x10
    13cc:	ldr	x8, [sp, #88]
    13d0:	ldr	w12, [x8, #5940]
    13d4:	add	w11, w12, w11
    13d8:	str	w11, [x8, #5940]
    13dc:	b	1424 <compress_block+0x1b4>
    13e0:	ldr	x8, [sp, #80]
    13e4:	ldrsw	x9, [sp, #64]
    13e8:	mov	x10, #0x4                   	// #4
    13ec:	mul	x9, x10, x9
    13f0:	ldrh	w11, [x8, x9]
    13f4:	ldr	x8, [sp, #88]
    13f8:	ldr	w12, [x8, #5940]
    13fc:	lsl	w11, w11, w12
    1400:	ldr	x8, [sp, #88]
    1404:	ldrh	w12, [x8, #5936]
    1408:	orr	w11, w12, w11
    140c:	strh	w11, [x8, #5936]
    1410:	ldr	w11, [sp, #48]
    1414:	ldr	x8, [sp, #88]
    1418:	ldr	w12, [x8, #5940]
    141c:	add	w11, w12, w11
    1420:	str	w11, [x8, #5940]
    1424:	b	1a30 <compress_block+0x7c0>
    1428:	ldrsw	x8, [sp, #64]
    142c:	adrp	x9, 200 <_tr_stored_block+0x44>
    1430:	add	x9, x9, #0x0
    1434:	ldrb	w10, [x9, x8]
    1438:	str	w10, [sp, #56]
    143c:	ldr	x8, [sp, #80]
    1440:	ldr	w10, [sp, #56]
    1444:	add	w10, w10, #0x100
    1448:	add	w10, w10, #0x1
    144c:	mov	w9, w10
    1450:	ubfx	x9, x9, #0, #32
    1454:	mov	x11, #0x4                   	// #4
    1458:	mul	x9, x11, x9
    145c:	add	x8, x8, x9
    1460:	ldrh	w10, [x8, #2]
    1464:	str	w10, [sp, #40]
    1468:	ldr	x8, [sp, #88]
    146c:	ldr	w10, [x8, #5940]
    1470:	ldr	w12, [sp, #40]
    1474:	mov	w13, #0x10                  	// #16
    1478:	subs	w12, w13, w12
    147c:	cmp	w10, w12
    1480:	b.le	1568 <compress_block+0x2f8>
    1484:	ldr	x8, [sp, #80]
    1488:	ldr	w9, [sp, #56]
    148c:	add	w9, w9, #0x100
    1490:	add	w9, w9, #0x1
    1494:	mov	w10, w9
    1498:	ubfx	x10, x10, #0, #32
    149c:	mov	x11, #0x4                   	// #4
    14a0:	mul	x10, x11, x10
    14a4:	ldrh	w9, [x8, x10]
    14a8:	str	w9, [sp, #36]
    14ac:	ldr	w9, [sp, #36]
    14b0:	and	w9, w9, #0xffff
    14b4:	ldr	x8, [sp, #88]
    14b8:	ldr	w12, [x8, #5940]
    14bc:	lsl	w9, w9, w12
    14c0:	ldr	x8, [sp, #88]
    14c4:	ldrh	w12, [x8, #5936]
    14c8:	orr	w9, w12, w9
    14cc:	strh	w9, [x8, #5936]
    14d0:	ldr	x8, [sp, #88]
    14d4:	ldrh	w9, [x8, #5936]
    14d8:	and	w9, w9, #0xff
    14dc:	ldr	x8, [sp, #88]
    14e0:	ldr	x8, [x8, #16]
    14e4:	ldr	x10, [sp, #88]
    14e8:	ldr	x11, [x10, #40]
    14ec:	add	x13, x11, #0x1
    14f0:	str	x13, [x10, #40]
    14f4:	add	x8, x8, x11
    14f8:	strb	w9, [x8]
    14fc:	ldr	x8, [sp, #88]
    1500:	ldrh	w9, [x8, #5936]
    1504:	asr	w9, w9, #8
    1508:	ldr	x8, [sp, #88]
    150c:	ldr	x8, [x8, #16]
    1510:	ldr	x10, [sp, #88]
    1514:	ldr	x11, [x10, #40]
    1518:	add	x13, x11, #0x1
    151c:	str	x13, [x10, #40]
    1520:	add	x8, x8, x11
    1524:	strb	w9, [x8]
    1528:	ldr	w9, [sp, #36]
    152c:	and	w9, w9, #0xffff
    1530:	ldr	x8, [sp, #88]
    1534:	ldr	w12, [x8, #5940]
    1538:	mov	w14, #0x10                  	// #16
    153c:	subs	w12, w14, w12
    1540:	asr	w9, w9, w12
    1544:	ldr	x8, [sp, #88]
    1548:	strh	w9, [x8, #5936]
    154c:	ldr	w9, [sp, #40]
    1550:	subs	w9, w9, #0x10
    1554:	ldr	x8, [sp, #88]
    1558:	ldr	w12, [x8, #5940]
    155c:	add	w9, w12, w9
    1560:	str	w9, [x8, #5940]
    1564:	b	15bc <compress_block+0x34c>
    1568:	ldr	x8, [sp, #80]
    156c:	ldr	w9, [sp, #56]
    1570:	add	w9, w9, #0x100
    1574:	add	w9, w9, #0x1
    1578:	mov	w10, w9
    157c:	ubfx	x10, x10, #0, #32
    1580:	mov	x11, #0x4                   	// #4
    1584:	mul	x10, x11, x10
    1588:	ldrh	w9, [x8, x10]
    158c:	ldr	x8, [sp, #88]
    1590:	ldr	w12, [x8, #5940]
    1594:	lsl	w9, w9, w12
    1598:	ldr	x8, [sp, #88]
    159c:	ldrh	w12, [x8, #5936]
    15a0:	orr	w9, w12, w9
    15a4:	strh	w9, [x8, #5936]
    15a8:	ldr	w9, [sp, #40]
    15ac:	ldr	x8, [sp, #88]
    15b0:	ldr	w12, [x8, #5940]
    15b4:	add	w9, w12, w9
    15b8:	str	w9, [x8, #5940]
    15bc:	ldr	w8, [sp, #56]
    15c0:	mov	w9, w8
    15c4:	adrp	x10, 0 <_tr_init>
    15c8:	add	x10, x10, #0x0
    15cc:	ldr	w8, [x10, x9, lsl #2]
    15d0:	str	w8, [sp, #52]
    15d4:	ldr	w8, [sp, #52]
    15d8:	cbz	w8, 171c <compress_block+0x4ac>
    15dc:	ldr	w8, [sp, #56]
    15e0:	mov	w9, w8
    15e4:	adrp	x10, 0 <_tr_init>
    15e8:	add	x10, x10, #0x0
    15ec:	ldr	w8, [x10, x9, lsl #2]
    15f0:	ldr	w11, [sp, #64]
    15f4:	subs	w8, w11, w8
    15f8:	str	w8, [sp, #64]
    15fc:	ldr	w8, [sp, #52]
    1600:	str	w8, [sp, #32]
    1604:	ldr	x9, [sp, #88]
    1608:	ldr	w8, [x9, #5940]
    160c:	ldr	w11, [sp, #32]
    1610:	mov	w12, #0x10                  	// #16
    1614:	subs	w11, w12, w11
    1618:	cmp	w8, w11
    161c:	b.le	16e4 <compress_block+0x474>
    1620:	ldr	w8, [sp, #64]
    1624:	str	w8, [sp, #28]
    1628:	ldr	w8, [sp, #28]
    162c:	and	w8, w8, #0xffff
    1630:	ldr	x9, [sp, #88]
    1634:	ldr	w10, [x9, #5940]
    1638:	lsl	w8, w8, w10
    163c:	ldr	x9, [sp, #88]
    1640:	ldrh	w10, [x9, #5936]
    1644:	orr	w8, w10, w8
    1648:	strh	w8, [x9, #5936]
    164c:	ldr	x9, [sp, #88]
    1650:	ldrh	w8, [x9, #5936]
    1654:	and	w8, w8, #0xff
    1658:	ldr	x9, [sp, #88]
    165c:	ldr	x9, [x9, #16]
    1660:	ldr	x11, [sp, #88]
    1664:	ldr	x12, [x11, #40]
    1668:	add	x13, x12, #0x1
    166c:	str	x13, [x11, #40]
    1670:	add	x9, x9, x12
    1674:	strb	w8, [x9]
    1678:	ldr	x9, [sp, #88]
    167c:	ldrh	w8, [x9, #5936]
    1680:	asr	w8, w8, #8
    1684:	ldr	x9, [sp, #88]
    1688:	ldr	x9, [x9, #16]
    168c:	ldr	x11, [sp, #88]
    1690:	ldr	x12, [x11, #40]
    1694:	add	x13, x12, #0x1
    1698:	str	x13, [x11, #40]
    169c:	add	x9, x9, x12
    16a0:	strb	w8, [x9]
    16a4:	ldr	w8, [sp, #28]
    16a8:	and	w8, w8, #0xffff
    16ac:	ldr	x9, [sp, #88]
    16b0:	ldr	w10, [x9, #5940]
    16b4:	mov	w14, #0x10                  	// #16
    16b8:	subs	w10, w14, w10
    16bc:	asr	w8, w8, w10
    16c0:	ldr	x9, [sp, #88]
    16c4:	strh	w8, [x9, #5936]
    16c8:	ldr	w8, [sp, #32]
    16cc:	subs	w8, w8, #0x10
    16d0:	ldr	x9, [sp, #88]
    16d4:	ldr	w10, [x9, #5940]
    16d8:	add	w8, w10, w8
    16dc:	str	w8, [x9, #5940]
    16e0:	b	171c <compress_block+0x4ac>
    16e4:	ldr	w8, [sp, #64]
    16e8:	and	w8, w8, #0xffff
    16ec:	ldr	x9, [sp, #88]
    16f0:	ldr	w10, [x9, #5940]
    16f4:	lsl	w8, w8, w10
    16f8:	ldr	x9, [sp, #88]
    16fc:	ldrh	w10, [x9, #5936]
    1700:	orr	w8, w10, w8
    1704:	strh	w8, [x9, #5936]
    1708:	ldr	w8, [sp, #32]
    170c:	ldr	x9, [sp, #88]
    1710:	ldr	w10, [x9, #5940]
    1714:	add	w8, w10, w8
    1718:	str	w8, [x9, #5940]
    171c:	ldr	w8, [sp, #68]
    1720:	subs	w8, w8, #0x1
    1724:	str	w8, [sp, #68]
    1728:	ldr	w8, [sp, #68]
    172c:	cmp	w8, #0x100
    1730:	b.cs	1750 <compress_block+0x4e0>  // b.hs, b.nlast
    1734:	ldr	w8, [sp, #68]
    1738:	mov	w9, w8
    173c:	adrp	x10, 0 <_tr_init>
    1740:	add	x10, x10, #0x0
    1744:	ldrb	w8, [x10, x9]
    1748:	str	w8, [sp]
    174c:	b	176c <compress_block+0x4fc>
    1750:	ldr	w8, [sp, #68]
    1754:	lsr	w8, w8, #7
    1758:	add	w8, w8, #0x100
    175c:	adrp	x9, 0 <_tr_init>
    1760:	add	x9, x9, #0x0
    1764:	ldrb	w8, [x9, w8, uxtw]
    1768:	str	w8, [sp]
    176c:	ldr	w8, [sp]
    1770:	str	w8, [sp, #56]
    1774:	ldr	x9, [sp, #72]
    1778:	ldr	w8, [sp, #56]
    177c:	mov	w10, w8
    1780:	mov	x11, #0x4                   	// #4
    1784:	mul	x10, x11, x10
    1788:	add	x9, x9, x10
    178c:	ldrh	w8, [x9, #2]
    1790:	str	w8, [sp, #24]
    1794:	ldr	x9, [sp, #88]
    1798:	ldr	w8, [x9, #5940]
    179c:	ldr	w12, [sp, #24]
    17a0:	mov	w13, #0x10                  	// #16
    17a4:	subs	w12, w13, w12
    17a8:	cmp	w8, w12
    17ac:	b.le	1888 <compress_block+0x618>
    17b0:	ldr	x8, [sp, #72]
    17b4:	ldr	w9, [sp, #56]
    17b8:	mov	w10, w9
    17bc:	mov	x11, #0x4                   	// #4
    17c0:	mul	x10, x11, x10
    17c4:	ldrh	w9, [x8, x10]
    17c8:	str	w9, [sp, #20]
    17cc:	ldr	w9, [sp, #20]
    17d0:	and	w9, w9, #0xffff
    17d4:	ldr	x8, [sp, #88]
    17d8:	ldr	w12, [x8, #5940]
    17dc:	lsl	w9, w9, w12
    17e0:	ldr	x8, [sp, #88]
    17e4:	ldrh	w12, [x8, #5936]
    17e8:	orr	w9, w12, w9
    17ec:	strh	w9, [x8, #5936]
    17f0:	ldr	x8, [sp, #88]
    17f4:	ldrh	w9, [x8, #5936]
    17f8:	and	w9, w9, #0xff
    17fc:	ldr	x8, [sp, #88]
    1800:	ldr	x8, [x8, #16]
    1804:	ldr	x10, [sp, #88]
    1808:	ldr	x11, [x10, #40]
    180c:	add	x13, x11, #0x1
    1810:	str	x13, [x10, #40]
    1814:	add	x8, x8, x11
    1818:	strb	w9, [x8]
    181c:	ldr	x8, [sp, #88]
    1820:	ldrh	w9, [x8, #5936]
    1824:	asr	w9, w9, #8
    1828:	ldr	x8, [sp, #88]
    182c:	ldr	x8, [x8, #16]
    1830:	ldr	x10, [sp, #88]
    1834:	ldr	x11, [x10, #40]
    1838:	add	x13, x11, #0x1
    183c:	str	x13, [x10, #40]
    1840:	add	x8, x8, x11
    1844:	strb	w9, [x8]
    1848:	ldr	w9, [sp, #20]
    184c:	and	w9, w9, #0xffff
    1850:	ldr	x8, [sp, #88]
    1854:	ldr	w12, [x8, #5940]
    1858:	mov	w14, #0x10                  	// #16
    185c:	subs	w12, w14, w12
    1860:	asr	w9, w9, w12
    1864:	ldr	x8, [sp, #88]
    1868:	strh	w9, [x8, #5936]
    186c:	ldr	w9, [sp, #24]
    1870:	subs	w9, w9, #0x10
    1874:	ldr	x8, [sp, #88]
    1878:	ldr	w12, [x8, #5940]
    187c:	add	w9, w12, w9
    1880:	str	w9, [x8, #5940]
    1884:	b	18d0 <compress_block+0x660>
    1888:	ldr	x8, [sp, #72]
    188c:	ldr	w9, [sp, #56]
    1890:	mov	w10, w9
    1894:	mov	x11, #0x4                   	// #4
    1898:	mul	x10, x11, x10
    189c:	ldrh	w9, [x8, x10]
    18a0:	ldr	x8, [sp, #88]
    18a4:	ldr	w12, [x8, #5940]
    18a8:	lsl	w9, w9, w12
    18ac:	ldr	x8, [sp, #88]
    18b0:	ldrh	w12, [x8, #5936]
    18b4:	orr	w9, w12, w9
    18b8:	strh	w9, [x8, #5936]
    18bc:	ldr	w9, [sp, #24]
    18c0:	ldr	x8, [sp, #88]
    18c4:	ldr	w12, [x8, #5940]
    18c8:	add	w9, w12, w9
    18cc:	str	w9, [x8, #5940]
    18d0:	ldr	w8, [sp, #56]
    18d4:	mov	w9, w8
    18d8:	adrp	x10, 0 <_tr_init>
    18dc:	add	x10, x10, #0x0
    18e0:	ldr	w8, [x10, x9, lsl #2]
    18e4:	str	w8, [sp, #52]
    18e8:	ldr	w8, [sp, #52]
    18ec:	cbz	w8, 1a30 <compress_block+0x7c0>
    18f0:	ldr	w8, [sp, #56]
    18f4:	mov	w9, w8
    18f8:	adrp	x10, 0 <_tr_init>
    18fc:	add	x10, x10, #0x0
    1900:	ldr	w8, [x10, x9, lsl #2]
    1904:	ldr	w11, [sp, #68]
    1908:	subs	w8, w11, w8
    190c:	str	w8, [sp, #68]
    1910:	ldr	w8, [sp, #52]
    1914:	str	w8, [sp, #16]
    1918:	ldr	x9, [sp, #88]
    191c:	ldr	w8, [x9, #5940]
    1920:	ldr	w11, [sp, #16]
    1924:	mov	w12, #0x10                  	// #16
    1928:	subs	w11, w12, w11
    192c:	cmp	w8, w11
    1930:	b.le	19f8 <compress_block+0x788>
    1934:	ldr	w8, [sp, #68]
    1938:	str	w8, [sp, #12]
    193c:	ldr	w8, [sp, #12]
    1940:	and	w8, w8, #0xffff
    1944:	ldr	x9, [sp, #88]
    1948:	ldr	w10, [x9, #5940]
    194c:	lsl	w8, w8, w10
    1950:	ldr	x9, [sp, #88]
    1954:	ldrh	w10, [x9, #5936]
    1958:	orr	w8, w10, w8
    195c:	strh	w8, [x9, #5936]
    1960:	ldr	x9, [sp, #88]
    1964:	ldrh	w8, [x9, #5936]
    1968:	and	w8, w8, #0xff
    196c:	ldr	x9, [sp, #88]
    1970:	ldr	x9, [x9, #16]
    1974:	ldr	x11, [sp, #88]
    1978:	ldr	x12, [x11, #40]
    197c:	add	x13, x12, #0x1
    1980:	str	x13, [x11, #40]
    1984:	add	x9, x9, x12
    1988:	strb	w8, [x9]
    198c:	ldr	x9, [sp, #88]
    1990:	ldrh	w8, [x9, #5936]
    1994:	asr	w8, w8, #8
    1998:	ldr	x9, [sp, #88]
    199c:	ldr	x9, [x9, #16]
    19a0:	ldr	x11, [sp, #88]
    19a4:	ldr	x12, [x11, #40]
    19a8:	add	x13, x12, #0x1
    19ac:	str	x13, [x11, #40]
    19b0:	add	x9, x9, x12
    19b4:	strb	w8, [x9]
    19b8:	ldr	w8, [sp, #12]
    19bc:	and	w8, w8, #0xffff
    19c0:	ldr	x9, [sp, #88]
    19c4:	ldr	w10, [x9, #5940]
    19c8:	mov	w14, #0x10                  	// #16
    19cc:	subs	w10, w14, w10
    19d0:	asr	w8, w8, w10
    19d4:	ldr	x9, [sp, #88]
    19d8:	strh	w8, [x9, #5936]
    19dc:	ldr	w8, [sp, #16]
    19e0:	subs	w8, w8, #0x10
    19e4:	ldr	x9, [sp, #88]
    19e8:	ldr	w10, [x9, #5940]
    19ec:	add	w8, w10, w8
    19f0:	str	w8, [x9, #5940]
    19f4:	b	1a30 <compress_block+0x7c0>
    19f8:	ldr	w8, [sp, #68]
    19fc:	and	w8, w8, #0xffff
    1a00:	ldr	x9, [sp, #88]
    1a04:	ldr	w10, [x9, #5940]
    1a08:	lsl	w8, w8, w10
    1a0c:	ldr	x9, [sp, #88]
    1a10:	ldrh	w10, [x9, #5936]
    1a14:	orr	w8, w10, w8
    1a18:	strh	w8, [x9, #5936]
    1a1c:	ldr	w8, [sp, #16]
    1a20:	ldr	x9, [sp, #88]
    1a24:	ldr	w10, [x9, #5940]
    1a28:	add	w8, w10, w8
    1a2c:	str	w8, [x9, #5940]
    1a30:	ldr	w8, [sp, #60]
    1a34:	ldr	x9, [sp, #88]
    1a38:	ldr	w10, [x9, #5900]
    1a3c:	cmp	w8, w10
    1a40:	b.cc	1290 <compress_block+0x20>  // b.lo, b.ul, b.last
    1a44:	ldr	x8, [sp, #80]
    1a48:	ldrh	w9, [x8, #1026]
    1a4c:	str	w9, [sp, #8]
    1a50:	ldr	x8, [sp, #88]
    1a54:	ldr	w9, [x8, #5940]
    1a58:	ldr	w10, [sp, #8]
    1a5c:	mov	w11, #0x10                  	// #16
    1a60:	subs	w10, w11, w10
    1a64:	cmp	w9, w10
    1a68:	b.le	1b34 <compress_block+0x8c4>
    1a6c:	ldr	x8, [sp, #80]
    1a70:	ldrh	w9, [x8, #1024]
    1a74:	str	w9, [sp, #4]
    1a78:	ldr	w9, [sp, #4]
    1a7c:	and	w9, w9, #0xffff
    1a80:	ldr	x8, [sp, #88]
    1a84:	ldr	w10, [x8, #5940]
    1a88:	lsl	w9, w9, w10
    1a8c:	ldr	x8, [sp, #88]
    1a90:	ldrh	w10, [x8, #5936]
    1a94:	orr	w9, w10, w9
    1a98:	strh	w9, [x8, #5936]
    1a9c:	ldr	x8, [sp, #88]
    1aa0:	ldrh	w9, [x8, #5936]
    1aa4:	and	w9, w9, #0xff
    1aa8:	ldr	x8, [sp, #88]
    1aac:	ldr	x8, [x8, #16]
    1ab0:	ldr	x11, [sp, #88]
    1ab4:	ldr	x12, [x11, #40]
    1ab8:	add	x13, x12, #0x1
    1abc:	str	x13, [x11, #40]
    1ac0:	add	x8, x8, x12
    1ac4:	strb	w9, [x8]
    1ac8:	ldr	x8, [sp, #88]
    1acc:	ldrh	w9, [x8, #5936]
    1ad0:	asr	w9, w9, #8
    1ad4:	ldr	x8, [sp, #88]
    1ad8:	ldr	x8, [x8, #16]
    1adc:	ldr	x11, [sp, #88]
    1ae0:	ldr	x12, [x11, #40]
    1ae4:	add	x13, x12, #0x1
    1ae8:	str	x13, [x11, #40]
    1aec:	add	x8, x8, x12
    1af0:	strb	w9, [x8]
    1af4:	ldr	w9, [sp, #4]
    1af8:	and	w9, w9, #0xffff
    1afc:	ldr	x8, [sp, #88]
    1b00:	ldr	w10, [x8, #5940]
    1b04:	mov	w14, #0x10                  	// #16
    1b08:	subs	w10, w14, w10
    1b0c:	asr	w9, w9, w10
    1b10:	ldr	x8, [sp, #88]
    1b14:	strh	w9, [x8, #5936]
    1b18:	ldr	w9, [sp, #8]
    1b1c:	subs	w9, w9, #0x10
    1b20:	ldr	x8, [sp, #88]
    1b24:	ldr	w10, [x8, #5940]
    1b28:	add	w9, w10, w9
    1b2c:	str	w9, [x8, #5940]
    1b30:	b	1b6c <compress_block+0x8fc>
    1b34:	ldr	x8, [sp, #80]
    1b38:	ldrh	w9, [x8, #1024]
    1b3c:	ldr	x8, [sp, #88]
    1b40:	ldr	w10, [x8, #5940]
    1b44:	lsl	w9, w9, w10
    1b48:	ldr	x8, [sp, #88]
    1b4c:	ldrh	w10, [x8, #5936]
    1b50:	orr	w9, w10, w9
    1b54:	strh	w9, [x8, #5936]
    1b58:	ldr	w9, [sp, #8]
    1b5c:	ldr	x8, [sp, #88]
    1b60:	ldr	w10, [x8, #5940]
    1b64:	add	w9, w10, w9
    1b68:	str	w9, [x8, #5940]
    1b6c:	add	sp, sp, #0x60
    1b70:	ret

0000000000001b74 <send_all_trees>:
    1b74:	sub	sp, sp, #0x50
    1b78:	stp	x29, x30, [sp, #64]
    1b7c:	add	x29, sp, #0x40
    1b80:	mov	w8, #0x5                   	// #5
    1b84:	mov	w9, #0x10                  	// #16
    1b88:	stur	x0, [x29, #-8]
    1b8c:	stur	w1, [x29, #-12]
    1b90:	stur	w2, [x29, #-16]
    1b94:	stur	w3, [x29, #-20]
    1b98:	stur	w8, [x29, #-28]
    1b9c:	ldur	x10, [x29, #-8]
    1ba0:	ldr	w8, [x10, #5940]
    1ba4:	ldur	w11, [x29, #-28]
    1ba8:	subs	w9, w9, w11
    1bac:	cmp	w8, w9
    1bb0:	b.le	1c7c <send_all_trees+0x108>
    1bb4:	ldur	w8, [x29, #-12]
    1bb8:	subs	w8, w8, #0x101
    1bbc:	str	w8, [sp, #32]
    1bc0:	ldr	w8, [sp, #32]
    1bc4:	and	w8, w8, #0xffff
    1bc8:	ldur	x9, [x29, #-8]
    1bcc:	ldr	w10, [x9, #5940]
    1bd0:	lsl	w8, w8, w10
    1bd4:	ldur	x9, [x29, #-8]
    1bd8:	ldrh	w10, [x9, #5936]
    1bdc:	orr	w8, w10, w8
    1be0:	strh	w8, [x9, #5936]
    1be4:	ldur	x9, [x29, #-8]
    1be8:	ldrh	w8, [x9, #5936]
    1bec:	and	w8, w8, #0xff
    1bf0:	ldur	x9, [x29, #-8]
    1bf4:	ldr	x9, [x9, #16]
    1bf8:	ldur	x11, [x29, #-8]
    1bfc:	ldr	x12, [x11, #40]
    1c00:	add	x13, x12, #0x1
    1c04:	str	x13, [x11, #40]
    1c08:	add	x9, x9, x12
    1c0c:	strb	w8, [x9]
    1c10:	ldur	x9, [x29, #-8]
    1c14:	ldrh	w8, [x9, #5936]
    1c18:	asr	w8, w8, #8
    1c1c:	ldur	x9, [x29, #-8]
    1c20:	ldr	x9, [x9, #16]
    1c24:	ldur	x11, [x29, #-8]
    1c28:	ldr	x12, [x11, #40]
    1c2c:	add	x13, x12, #0x1
    1c30:	str	x13, [x11, #40]
    1c34:	add	x9, x9, x12
    1c38:	strb	w8, [x9]
    1c3c:	ldr	w8, [sp, #32]
    1c40:	and	w8, w8, #0xffff
    1c44:	ldur	x9, [x29, #-8]
    1c48:	ldr	w10, [x9, #5940]
    1c4c:	mov	w14, #0x10                  	// #16
    1c50:	subs	w10, w14, w10
    1c54:	asr	w8, w8, w10
    1c58:	ldur	x9, [x29, #-8]
    1c5c:	strh	w8, [x9, #5936]
    1c60:	ldur	w8, [x29, #-28]
    1c64:	subs	w8, w8, #0x10
    1c68:	ldur	x9, [x29, #-8]
    1c6c:	ldr	w10, [x9, #5940]
    1c70:	add	w8, w10, w8
    1c74:	str	w8, [x9, #5940]
    1c78:	b	1cb8 <send_all_trees+0x144>
    1c7c:	ldur	w8, [x29, #-12]
    1c80:	subs	w8, w8, #0x101
    1c84:	and	w8, w8, #0xffff
    1c88:	ldur	x9, [x29, #-8]
    1c8c:	ldr	w10, [x9, #5940]
    1c90:	lsl	w8, w8, w10
    1c94:	ldur	x9, [x29, #-8]
    1c98:	ldrh	w10, [x9, #5936]
    1c9c:	orr	w8, w10, w8
    1ca0:	strh	w8, [x9, #5936]
    1ca4:	ldur	w8, [x29, #-28]
    1ca8:	ldur	x9, [x29, #-8]
    1cac:	ldr	w10, [x9, #5940]
    1cb0:	add	w8, w10, w8
    1cb4:	str	w8, [x9, #5940]
    1cb8:	mov	w8, #0x5                   	// #5
    1cbc:	str	w8, [sp, #28]
    1cc0:	ldur	x9, [x29, #-8]
    1cc4:	ldr	w8, [x9, #5940]
    1cc8:	ldr	w10, [sp, #28]
    1ccc:	mov	w11, #0x10                  	// #16
    1cd0:	subs	w10, w11, w10
    1cd4:	cmp	w8, w10
    1cd8:	b.le	1da4 <send_all_trees+0x230>
    1cdc:	ldur	w8, [x29, #-16]
    1ce0:	subs	w8, w8, #0x1
    1ce4:	str	w8, [sp, #24]
    1ce8:	ldr	w8, [sp, #24]
    1cec:	and	w8, w8, #0xffff
    1cf0:	ldur	x9, [x29, #-8]
    1cf4:	ldr	w10, [x9, #5940]
    1cf8:	lsl	w8, w8, w10
    1cfc:	ldur	x9, [x29, #-8]
    1d00:	ldrh	w10, [x9, #5936]
    1d04:	orr	w8, w10, w8
    1d08:	strh	w8, [x9, #5936]
    1d0c:	ldur	x9, [x29, #-8]
    1d10:	ldrh	w8, [x9, #5936]
    1d14:	and	w8, w8, #0xff
    1d18:	ldur	x9, [x29, #-8]
    1d1c:	ldr	x9, [x9, #16]
    1d20:	ldur	x11, [x29, #-8]
    1d24:	ldr	x12, [x11, #40]
    1d28:	add	x13, x12, #0x1
    1d2c:	str	x13, [x11, #40]
    1d30:	add	x9, x9, x12
    1d34:	strb	w8, [x9]
    1d38:	ldur	x9, [x29, #-8]
    1d3c:	ldrh	w8, [x9, #5936]
    1d40:	asr	w8, w8, #8
    1d44:	ldur	x9, [x29, #-8]
    1d48:	ldr	x9, [x9, #16]
    1d4c:	ldur	x11, [x29, #-8]
    1d50:	ldr	x12, [x11, #40]
    1d54:	add	x13, x12, #0x1
    1d58:	str	x13, [x11, #40]
    1d5c:	add	x9, x9, x12
    1d60:	strb	w8, [x9]
    1d64:	ldr	w8, [sp, #24]
    1d68:	and	w8, w8, #0xffff
    1d6c:	ldur	x9, [x29, #-8]
    1d70:	ldr	w10, [x9, #5940]
    1d74:	mov	w14, #0x10                  	// #16
    1d78:	subs	w10, w14, w10
    1d7c:	asr	w8, w8, w10
    1d80:	ldur	x9, [x29, #-8]
    1d84:	strh	w8, [x9, #5936]
    1d88:	ldr	w8, [sp, #28]
    1d8c:	subs	w8, w8, #0x10
    1d90:	ldur	x9, [x29, #-8]
    1d94:	ldr	w10, [x9, #5940]
    1d98:	add	w8, w10, w8
    1d9c:	str	w8, [x9, #5940]
    1da0:	b	1de0 <send_all_trees+0x26c>
    1da4:	ldur	w8, [x29, #-16]
    1da8:	subs	w8, w8, #0x1
    1dac:	and	w8, w8, #0xffff
    1db0:	ldur	x9, [x29, #-8]
    1db4:	ldr	w10, [x9, #5940]
    1db8:	lsl	w8, w8, w10
    1dbc:	ldur	x9, [x29, #-8]
    1dc0:	ldrh	w10, [x9, #5936]
    1dc4:	orr	w8, w10, w8
    1dc8:	strh	w8, [x9, #5936]
    1dcc:	ldr	w8, [sp, #28]
    1dd0:	ldur	x9, [x29, #-8]
    1dd4:	ldr	w10, [x9, #5940]
    1dd8:	add	w8, w10, w8
    1ddc:	str	w8, [x9, #5940]
    1de0:	mov	w8, #0x4                   	// #4
    1de4:	str	w8, [sp, #20]
    1de8:	ldur	x9, [x29, #-8]
    1dec:	ldr	w8, [x9, #5940]
    1df0:	ldr	w10, [sp, #20]
    1df4:	mov	w11, #0x10                  	// #16
    1df8:	subs	w10, w11, w10
    1dfc:	cmp	w8, w10
    1e00:	b.le	1ecc <send_all_trees+0x358>
    1e04:	ldur	w8, [x29, #-20]
    1e08:	subs	w8, w8, #0x4
    1e0c:	str	w8, [sp, #16]
    1e10:	ldr	w8, [sp, #16]
    1e14:	and	w8, w8, #0xffff
    1e18:	ldur	x9, [x29, #-8]
    1e1c:	ldr	w10, [x9, #5940]
    1e20:	lsl	w8, w8, w10
    1e24:	ldur	x9, [x29, #-8]
    1e28:	ldrh	w10, [x9, #5936]
    1e2c:	orr	w8, w10, w8
    1e30:	strh	w8, [x9, #5936]
    1e34:	ldur	x9, [x29, #-8]
    1e38:	ldrh	w8, [x9, #5936]
    1e3c:	and	w8, w8, #0xff
    1e40:	ldur	x9, [x29, #-8]
    1e44:	ldr	x9, [x9, #16]
    1e48:	ldur	x11, [x29, #-8]
    1e4c:	ldr	x12, [x11, #40]
    1e50:	add	x13, x12, #0x1
    1e54:	str	x13, [x11, #40]
    1e58:	add	x9, x9, x12
    1e5c:	strb	w8, [x9]
    1e60:	ldur	x9, [x29, #-8]
    1e64:	ldrh	w8, [x9, #5936]
    1e68:	asr	w8, w8, #8
    1e6c:	ldur	x9, [x29, #-8]
    1e70:	ldr	x9, [x9, #16]
    1e74:	ldur	x11, [x29, #-8]
    1e78:	ldr	x12, [x11, #40]
    1e7c:	add	x13, x12, #0x1
    1e80:	str	x13, [x11, #40]
    1e84:	add	x9, x9, x12
    1e88:	strb	w8, [x9]
    1e8c:	ldr	w8, [sp, #16]
    1e90:	and	w8, w8, #0xffff
    1e94:	ldur	x9, [x29, #-8]
    1e98:	ldr	w10, [x9, #5940]
    1e9c:	mov	w14, #0x10                  	// #16
    1ea0:	subs	w10, w14, w10
    1ea4:	asr	w8, w8, w10
    1ea8:	ldur	x9, [x29, #-8]
    1eac:	strh	w8, [x9, #5936]
    1eb0:	ldr	w8, [sp, #20]
    1eb4:	subs	w8, w8, #0x10
    1eb8:	ldur	x9, [x29, #-8]
    1ebc:	ldr	w10, [x9, #5940]
    1ec0:	add	w8, w10, w8
    1ec4:	str	w8, [x9, #5940]
    1ec8:	b	1f08 <send_all_trees+0x394>
    1ecc:	ldur	w8, [x29, #-20]
    1ed0:	subs	w8, w8, #0x4
    1ed4:	and	w8, w8, #0xffff
    1ed8:	ldur	x9, [x29, #-8]
    1edc:	ldr	w10, [x9, #5940]
    1ee0:	lsl	w8, w8, w10
    1ee4:	ldur	x9, [x29, #-8]
    1ee8:	ldrh	w10, [x9, #5936]
    1eec:	orr	w8, w10, w8
    1ef0:	strh	w8, [x9, #5936]
    1ef4:	ldr	w8, [sp, #20]
    1ef8:	ldur	x9, [x29, #-8]
    1efc:	ldr	w10, [x9, #5940]
    1f00:	add	w8, w10, w8
    1f04:	str	w8, [x9, #5940]
    1f08:	stur	wzr, [x29, #-24]
    1f0c:	ldur	w8, [x29, #-24]
    1f10:	ldur	w9, [x29, #-20]
    1f14:	cmp	w8, w9
    1f18:	b.ge	2098 <send_all_trees+0x524>  // b.tcont
    1f1c:	mov	w8, #0x3                   	// #3
    1f20:	str	w8, [sp, #12]
    1f24:	ldur	x9, [x29, #-8]
    1f28:	ldr	w8, [x9, #5940]
    1f2c:	ldr	w10, [sp, #12]
    1f30:	mov	w11, #0x10                  	// #16
    1f34:	subs	w10, w11, w10
    1f38:	cmp	w8, w10
    1f3c:	b.le	202c <send_all_trees+0x4b8>
    1f40:	ldur	x8, [x29, #-8]
    1f44:	add	x8, x8, #0xabc
    1f48:	ldursw	x9, [x29, #-24]
    1f4c:	adrp	x10, 0 <_tr_init>
    1f50:	add	x10, x10, #0x0
    1f54:	ldrb	w11, [x10, x9]
    1f58:	mov	w9, w11
    1f5c:	mov	x10, #0x4                   	// #4
    1f60:	mul	x9, x10, x9
    1f64:	add	x8, x8, x9
    1f68:	ldrh	w11, [x8, #2]
    1f6c:	str	w11, [sp, #8]
    1f70:	ldr	w11, [sp, #8]
    1f74:	and	w11, w11, #0xffff
    1f78:	ldur	x8, [x29, #-8]
    1f7c:	ldr	w12, [x8, #5940]
    1f80:	lsl	w11, w11, w12
    1f84:	ldur	x8, [x29, #-8]
    1f88:	ldrh	w12, [x8, #5936]
    1f8c:	orr	w11, w12, w11
    1f90:	strh	w11, [x8, #5936]
    1f94:	ldur	x8, [x29, #-8]
    1f98:	ldrh	w11, [x8, #5936]
    1f9c:	and	w11, w11, #0xff
    1fa0:	ldur	x8, [x29, #-8]
    1fa4:	ldr	x8, [x8, #16]
    1fa8:	ldur	x9, [x29, #-8]
    1fac:	ldr	x10, [x9, #40]
    1fb0:	add	x13, x10, #0x1
    1fb4:	str	x13, [x9, #40]
    1fb8:	add	x8, x8, x10
    1fbc:	strb	w11, [x8]
    1fc0:	ldur	x8, [x29, #-8]
    1fc4:	ldrh	w11, [x8, #5936]
    1fc8:	asr	w11, w11, #8
    1fcc:	ldur	x8, [x29, #-8]
    1fd0:	ldr	x8, [x8, #16]
    1fd4:	ldur	x9, [x29, #-8]
    1fd8:	ldr	x10, [x9, #40]
    1fdc:	add	x13, x10, #0x1
    1fe0:	str	x13, [x9, #40]
    1fe4:	add	x8, x8, x10
    1fe8:	strb	w11, [x8]
    1fec:	ldr	w11, [sp, #8]
    1ff0:	and	w11, w11, #0xffff
    1ff4:	ldur	x8, [x29, #-8]
    1ff8:	ldr	w12, [x8, #5940]
    1ffc:	mov	w14, #0x10                  	// #16
    2000:	subs	w12, w14, w12
    2004:	asr	w11, w11, w12
    2008:	ldur	x8, [x29, #-8]
    200c:	strh	w11, [x8, #5936]
    2010:	ldr	w11, [sp, #12]
    2014:	subs	w11, w11, #0x10
    2018:	ldur	x8, [x29, #-8]
    201c:	ldr	w12, [x8, #5940]
    2020:	add	w11, w12, w11
    2024:	str	w11, [x8, #5940]
    2028:	b	2088 <send_all_trees+0x514>
    202c:	ldur	x8, [x29, #-8]
    2030:	add	x8, x8, #0xabc
    2034:	ldursw	x9, [x29, #-24]
    2038:	adrp	x10, 0 <_tr_init>
    203c:	add	x10, x10, #0x0
    2040:	ldrb	w11, [x10, x9]
    2044:	mov	w9, w11
    2048:	mov	x10, #0x4                   	// #4
    204c:	mul	x9, x10, x9
    2050:	add	x8, x8, x9
    2054:	ldrh	w11, [x8, #2]
    2058:	ldur	x8, [x29, #-8]
    205c:	ldr	w12, [x8, #5940]
    2060:	lsl	w11, w11, w12
    2064:	ldur	x8, [x29, #-8]
    2068:	ldrh	w12, [x8, #5936]
    206c:	orr	w11, w12, w11
    2070:	strh	w11, [x8, #5936]
    2074:	ldr	w11, [sp, #12]
    2078:	ldur	x8, [x29, #-8]
    207c:	ldr	w12, [x8, #5940]
    2080:	add	w11, w12, w11
    2084:	str	w11, [x8, #5940]
    2088:	ldur	w8, [x29, #-24]
    208c:	add	w8, w8, #0x1
    2090:	stur	w8, [x29, #-24]
    2094:	b	1f0c <send_all_trees+0x398>
    2098:	ldur	x0, [x29, #-8]
    209c:	ldur	x8, [x29, #-8]
    20a0:	add	x1, x8, #0xd4
    20a4:	ldur	w9, [x29, #-12]
    20a8:	subs	w2, w9, #0x1
    20ac:	bl	2c9c <send_tree>
    20b0:	ldur	x0, [x29, #-8]
    20b4:	ldur	x8, [x29, #-8]
    20b8:	add	x1, x8, #0x9c8
    20bc:	ldur	w9, [x29, #-16]
    20c0:	subs	w2, w9, #0x1
    20c4:	bl	2c9c <send_tree>
    20c8:	ldp	x29, x30, [sp, #64]
    20cc:	add	sp, sp, #0x50
    20d0:	ret

00000000000020d4 <_tr_tally>:
    20d4:	sub	sp, sp, #0x20
    20d8:	str	x0, [sp, #24]
    20dc:	str	w1, [sp, #20]
    20e0:	str	w2, [sp, #16]
    20e4:	ldr	w8, [sp, #20]
    20e8:	ldr	x9, [sp, #24]
    20ec:	ldr	x9, [x9, #5904]
    20f0:	ldr	x10, [sp, #24]
    20f4:	ldr	w11, [x10, #5900]
    20f8:	mov	w10, w11
    20fc:	mov	x12, #0x2                   	// #2
    2100:	mul	x10, x12, x10
    2104:	add	x9, x9, x10
    2108:	strh	w8, [x9]
    210c:	ldr	w8, [sp, #16]
    2110:	ldr	x9, [sp, #24]
    2114:	ldr	x9, [x9, #5888]
    2118:	ldr	x10, [sp, #24]
    211c:	ldr	w11, [x10, #5900]
    2120:	mov	w12, w11
    2124:	mov	w11, w12
    2128:	add	w11, w11, #0x1
    212c:	str	w11, [x10, #5900]
    2130:	add	x9, x9, x12
    2134:	strb	w8, [x9]
    2138:	ldr	w8, [sp, #20]
    213c:	cbnz	w8, 216c <_tr_tally+0x98>
    2140:	ldr	x8, [sp, #24]
    2144:	add	x8, x8, #0xd4
    2148:	ldr	w9, [sp, #16]
    214c:	mov	w10, w9
    2150:	mov	x11, #0x4                   	// #4
    2154:	mul	x10, x11, x10
    2158:	add	x8, x8, x10
    215c:	ldrh	w9, [x8]
    2160:	add	w9, w9, #0x1
    2164:	strh	w9, [x8]
    2168:	b	2244 <_tr_tally+0x170>
    216c:	ldr	x8, [sp, #24]
    2170:	ldr	w9, [x8, #5928]
    2174:	add	w9, w9, #0x1
    2178:	str	w9, [x8, #5928]
    217c:	ldr	w9, [sp, #20]
    2180:	subs	w9, w9, #0x1
    2184:	str	w9, [sp, #20]
    2188:	ldr	x8, [sp, #24]
    218c:	add	x8, x8, #0xd4
    2190:	ldr	w9, [sp, #16]
    2194:	mov	w10, w9
    2198:	adrp	x11, 200 <_tr_stored_block+0x44>
    219c:	add	x11, x11, #0x0
    21a0:	ldrb	w9, [x11, x10]
    21a4:	add	w9, w9, #0x100
    21a8:	add	w9, w9, #0x1
    21ac:	mov	w0, w9
    21b0:	sxtw	x10, w0
    21b4:	mov	x11, #0x4                   	// #4
    21b8:	mul	x10, x11, x10
    21bc:	add	x8, x8, x10
    21c0:	ldrh	w9, [x8]
    21c4:	add	w9, w9, #0x1
    21c8:	strh	w9, [x8]
    21cc:	ldr	x8, [sp, #24]
    21d0:	add	x8, x8, #0x9c8
    21d4:	ldr	w9, [sp, #20]
    21d8:	cmp	w9, #0x100
    21dc:	str	x8, [sp, #8]
    21e0:	b.cs	2200 <_tr_tally+0x12c>  // b.hs, b.nlast
    21e4:	ldr	w8, [sp, #20]
    21e8:	mov	w9, w8
    21ec:	adrp	x10, 0 <_tr_init>
    21f0:	add	x10, x10, #0x0
    21f4:	ldrb	w8, [x10, x9]
    21f8:	str	w8, [sp, #4]
    21fc:	b	221c <_tr_tally+0x148>
    2200:	ldr	w8, [sp, #20]
    2204:	lsr	w8, w8, #7
    2208:	add	w8, w8, #0x100
    220c:	adrp	x9, 0 <_tr_init>
    2210:	add	x9, x9, #0x0
    2214:	ldrb	w8, [x9, w8, uxtw]
    2218:	str	w8, [sp, #4]
    221c:	ldr	w8, [sp, #4]
    2220:	mov	w0, w8
    2224:	sxtw	x9, w0
    2228:	mov	x10, #0x4                   	// #4
    222c:	mul	x9, x10, x9
    2230:	ldr	x10, [sp, #8]
    2234:	add	x9, x10, x9
    2238:	ldrh	w8, [x9]
    223c:	add	w8, w8, #0x1
    2240:	strh	w8, [x9]
    2244:	ldr	x8, [sp, #24]
    2248:	ldr	w9, [x8, #5900]
    224c:	ldr	x8, [sp, #24]
    2250:	ldr	w10, [x8, #5896]
    2254:	subs	w10, w10, #0x1
    2258:	cmp	w9, w10
    225c:	cset	w9, eq  // eq = none
    2260:	and	w0, w9, #0x1
    2264:	add	sp, sp, #0x20
    2268:	ret

000000000000226c <pqdownheap>:
    226c:	sub	sp, sp, #0x20
    2270:	str	x0, [sp, #24]
    2274:	str	x1, [sp, #16]
    2278:	str	w2, [sp, #12]
    227c:	ldr	x8, [sp, #24]
    2280:	add	x8, x8, #0xbc0
    2284:	ldrsw	x9, [sp, #12]
    2288:	ldr	w10, [x8, x9, lsl #2]
    228c:	str	w10, [sp, #8]
    2290:	ldr	w10, [sp, #12]
    2294:	lsl	w10, w10, #1
    2298:	str	w10, [sp, #4]
    229c:	ldr	w8, [sp, #4]
    22a0:	ldr	x9, [sp, #24]
    22a4:	ldr	w10, [x9, #5300]
    22a8:	cmp	w8, w10
    22ac:	b.gt	248c <pqdownheap+0x220>
    22b0:	ldr	w8, [sp, #4]
    22b4:	ldr	x9, [sp, #24]
    22b8:	ldr	w10, [x9, #5300]
    22bc:	cmp	w8, w10
    22c0:	b.ge	23a8 <pqdownheap+0x13c>  // b.tcont
    22c4:	ldr	x8, [sp, #16]
    22c8:	ldr	x9, [sp, #24]
    22cc:	add	x9, x9, #0xbc0
    22d0:	ldr	w10, [sp, #4]
    22d4:	add	w10, w10, #0x1
    22d8:	mov	x11, #0x4                   	// #4
    22dc:	ldrsw	x9, [x9, w10, sxtw #2]
    22e0:	mul	x9, x11, x9
    22e4:	ldrh	w10, [x8, x9]
    22e8:	ldr	x8, [sp, #16]
    22ec:	ldr	x9, [sp, #24]
    22f0:	add	x9, x9, #0xbc0
    22f4:	ldrsw	x12, [sp, #4]
    22f8:	ldrsw	x9, [x9, x12, lsl #2]
    22fc:	mul	x9, x11, x9
    2300:	ldrh	w13, [x8, x9]
    2304:	cmp	w10, w13
    2308:	b.lt	239c <pqdownheap+0x130>  // b.tstop
    230c:	ldr	x8, [sp, #16]
    2310:	ldr	x9, [sp, #24]
    2314:	add	x9, x9, #0xbc0
    2318:	ldr	w10, [sp, #4]
    231c:	add	w10, w10, #0x1
    2320:	mov	x11, #0x4                   	// #4
    2324:	ldrsw	x9, [x9, w10, sxtw #2]
    2328:	mul	x9, x11, x9
    232c:	ldrh	w10, [x8, x9]
    2330:	ldr	x8, [sp, #16]
    2334:	ldr	x9, [sp, #24]
    2338:	add	x9, x9, #0xbc0
    233c:	ldrsw	x12, [sp, #4]
    2340:	ldrsw	x9, [x9, x12, lsl #2]
    2344:	mul	x9, x11, x9
    2348:	ldrh	w13, [x8, x9]
    234c:	cmp	w10, w13
    2350:	b.ne	23a8 <pqdownheap+0x13c>  // b.any
    2354:	ldr	x8, [sp, #24]
    2358:	mov	x9, #0x14bc                	// #5308
    235c:	add	x8, x8, x9
    2360:	ldr	x10, [sp, #24]
    2364:	add	x10, x10, #0xbc0
    2368:	ldr	w11, [sp, #4]
    236c:	add	w11, w11, #0x1
    2370:	ldrsw	x10, [x10, w11, sxtw #2]
    2374:	ldrb	w11, [x8, x10]
    2378:	ldr	x8, [sp, #24]
    237c:	add	x8, x8, x9
    2380:	ldr	x9, [sp, #24]
    2384:	add	x9, x9, #0xbc0
    2388:	ldrsw	x10, [sp, #4]
    238c:	ldrsw	x9, [x9, x10, lsl #2]
    2390:	ldrb	w12, [x8, x9]
    2394:	cmp	w11, w12
    2398:	b.gt	23a8 <pqdownheap+0x13c>
    239c:	ldr	w8, [sp, #4]
    23a0:	add	w8, w8, #0x1
    23a4:	str	w8, [sp, #4]
    23a8:	ldr	x8, [sp, #16]
    23ac:	ldrsw	x9, [sp, #8]
    23b0:	mov	x10, #0x4                   	// #4
    23b4:	mul	x9, x10, x9
    23b8:	ldrh	w11, [x8, x9]
    23bc:	ldr	x8, [sp, #16]
    23c0:	ldr	x9, [sp, #24]
    23c4:	add	x9, x9, #0xbc0
    23c8:	ldrsw	x12, [sp, #4]
    23cc:	ldrsw	x9, [x9, x12, lsl #2]
    23d0:	mul	x9, x10, x9
    23d4:	ldrh	w13, [x8, x9]
    23d8:	cmp	w11, w13
    23dc:	b.lt	2450 <pqdownheap+0x1e4>  // b.tstop
    23e0:	ldr	x8, [sp, #16]
    23e4:	ldrsw	x9, [sp, #8]
    23e8:	mov	x10, #0x4                   	// #4
    23ec:	mul	x9, x10, x9
    23f0:	ldrh	w11, [x8, x9]
    23f4:	ldr	x8, [sp, #16]
    23f8:	ldr	x9, [sp, #24]
    23fc:	add	x9, x9, #0xbc0
    2400:	ldrsw	x12, [sp, #4]
    2404:	ldrsw	x9, [x9, x12, lsl #2]
    2408:	mul	x9, x10, x9
    240c:	ldrh	w13, [x8, x9]
    2410:	cmp	w11, w13
    2414:	b.ne	2454 <pqdownheap+0x1e8>  // b.any
    2418:	ldr	x8, [sp, #24]
    241c:	mov	x9, #0x14bc                	// #5308
    2420:	add	x8, x8, x9
    2424:	ldrsw	x10, [sp, #8]
    2428:	ldrb	w11, [x8, x10]
    242c:	ldr	x8, [sp, #24]
    2430:	add	x8, x8, x9
    2434:	ldr	x9, [sp, #24]
    2438:	add	x9, x9, #0xbc0
    243c:	ldrsw	x10, [sp, #4]
    2440:	ldrsw	x9, [x9, x10, lsl #2]
    2444:	ldrb	w12, [x8, x9]
    2448:	cmp	w11, w12
    244c:	b.gt	2454 <pqdownheap+0x1e8>
    2450:	b	248c <pqdownheap+0x220>
    2454:	ldr	x8, [sp, #24]
    2458:	add	x8, x8, #0xbc0
    245c:	ldrsw	x9, [sp, #4]
    2460:	ldr	w10, [x8, x9, lsl #2]
    2464:	ldr	x8, [sp, #24]
    2468:	add	x8, x8, #0xbc0
    246c:	ldrsw	x9, [sp, #12]
    2470:	str	w10, [x8, x9, lsl #2]
    2474:	ldr	w10, [sp, #4]
    2478:	str	w10, [sp, #12]
    247c:	ldr	w10, [sp, #4]
    2480:	lsl	w10, w10, #1
    2484:	str	w10, [sp, #4]
    2488:	b	229c <pqdownheap+0x30>
    248c:	ldr	w8, [sp, #8]
    2490:	ldr	x9, [sp, #24]
    2494:	add	x9, x9, #0xbc0
    2498:	ldrsw	x10, [sp, #12]
    249c:	str	w8, [x9, x10, lsl #2]
    24a0:	add	sp, sp, #0x20
    24a4:	ret

00000000000024a8 <gen_bitlen>:
    24a8:	sub	sp, sp, #0x60
    24ac:	str	x0, [sp, #88]
    24b0:	str	x1, [sp, #80]
    24b4:	ldr	x8, [sp, #80]
    24b8:	ldr	x8, [x8]
    24bc:	str	x8, [sp, #72]
    24c0:	ldr	x8, [sp, #80]
    24c4:	ldr	w9, [x8, #8]
    24c8:	str	w9, [sp, #68]
    24cc:	ldr	x8, [sp, #80]
    24d0:	ldr	x8, [x8, #16]
    24d4:	ldr	x8, [x8]
    24d8:	str	x8, [sp, #56]
    24dc:	ldr	x8, [sp, #80]
    24e0:	ldr	x8, [x8, #16]
    24e4:	ldr	x8, [x8, #8]
    24e8:	str	x8, [sp, #48]
    24ec:	ldr	x8, [sp, #80]
    24f0:	ldr	x8, [x8, #16]
    24f4:	ldr	w9, [x8, #16]
    24f8:	str	w9, [sp, #44]
    24fc:	ldr	x8, [sp, #80]
    2500:	ldr	x8, [x8, #16]
    2504:	ldr	w9, [x8, #24]
    2508:	str	w9, [sp, #40]
    250c:	str	wzr, [sp, #12]
    2510:	str	wzr, [sp, #24]
    2514:	ldr	w8, [sp, #24]
    2518:	cmp	w8, #0xf
    251c:	b.gt	2550 <gen_bitlen+0xa8>
    2520:	ldr	x8, [sp, #88]
    2524:	add	x8, x8, #0xba0
    2528:	ldrsw	x9, [sp, #24]
    252c:	mov	x10, #0x2                   	// #2
    2530:	mul	x9, x10, x9
    2534:	add	x8, x8, x9
    2538:	mov	w11, #0x0                   	// #0
    253c:	strh	w11, [x8]
    2540:	ldr	w8, [sp, #24]
    2544:	add	w8, w8, #0x1
    2548:	str	w8, [sp, #24]
    254c:	b	2514 <gen_bitlen+0x6c>
    2550:	ldr	x8, [sp, #72]
    2554:	ldr	x9, [sp, #88]
    2558:	add	x9, x9, #0xbc0
    255c:	ldr	x10, [sp, #88]
    2560:	ldrsw	x10, [x10, #5304]
    2564:	mov	x11, #0x4                   	// #4
    2568:	ldrsw	x9, [x9, x10, lsl #2]
    256c:	mul	x9, x11, x9
    2570:	add	x8, x8, x9
    2574:	mov	w12, #0x0                   	// #0
    2578:	strh	w12, [x8, #2]
    257c:	ldr	x8, [sp, #88]
    2580:	ldr	w12, [x8, #5304]
    2584:	add	w12, w12, #0x1
    2588:	str	w12, [sp, #36]
    258c:	ldr	w8, [sp, #36]
    2590:	cmp	w8, #0x23d
    2594:	b.ge	272c <gen_bitlen+0x284>  // b.tcont
    2598:	ldr	x8, [sp, #88]
    259c:	add	x8, x8, #0xbc0
    25a0:	ldrsw	x9, [sp, #36]
    25a4:	mov	x10, #0x4                   	// #4
    25a8:	ldr	w11, [x8, x9, lsl #2]
    25ac:	str	w11, [sp, #32]
    25b0:	ldr	x8, [sp, #72]
    25b4:	ldr	x9, [sp, #72]
    25b8:	ldrsw	x12, [sp, #32]
    25bc:	mul	x12, x10, x12
    25c0:	add	x9, x9, x12
    25c4:	ldrh	w11, [x9, #2]
    25c8:	mov	w9, w11
    25cc:	mul	x9, x10, x9
    25d0:	add	x8, x8, x9
    25d4:	ldrh	w11, [x8, #2]
    25d8:	add	w11, w11, #0x1
    25dc:	str	w11, [sp, #24]
    25e0:	ldr	w11, [sp, #24]
    25e4:	ldr	w13, [sp, #40]
    25e8:	cmp	w11, w13
    25ec:	b.le	2604 <gen_bitlen+0x15c>
    25f0:	ldr	w8, [sp, #40]
    25f4:	str	w8, [sp, #24]
    25f8:	ldr	w8, [sp, #12]
    25fc:	add	w8, w8, #0x1
    2600:	str	w8, [sp, #12]
    2604:	ldr	w8, [sp, #24]
    2608:	ldr	x9, [sp, #72]
    260c:	ldrsw	x10, [sp, #32]
    2610:	mov	x11, #0x4                   	// #4
    2614:	mul	x10, x11, x10
    2618:	add	x9, x9, x10
    261c:	strh	w8, [x9, #2]
    2620:	ldr	w8, [sp, #32]
    2624:	ldr	w12, [sp, #68]
    2628:	cmp	w8, w12
    262c:	b.le	2634 <gen_bitlen+0x18c>
    2630:	b	271c <gen_bitlen+0x274>
    2634:	ldr	x8, [sp, #88]
    2638:	add	x8, x8, #0xba0
    263c:	ldrsw	x9, [sp, #24]
    2640:	mov	x10, #0x2                   	// #2
    2644:	mul	x9, x10, x9
    2648:	add	x8, x8, x9
    264c:	ldrh	w11, [x8]
    2650:	add	w11, w11, #0x1
    2654:	strh	w11, [x8]
    2658:	str	wzr, [sp, #20]
    265c:	ldr	w11, [sp, #32]
    2660:	ldr	w12, [sp, #44]
    2664:	cmp	w11, w12
    2668:	b.lt	2684 <gen_bitlen+0x1dc>  // b.tstop
    266c:	ldr	x8, [sp, #48]
    2670:	ldr	w9, [sp, #32]
    2674:	ldr	w10, [sp, #44]
    2678:	subs	w9, w9, w10
    267c:	ldr	w9, [x8, w9, sxtw #2]
    2680:	str	w9, [sp, #20]
    2684:	ldr	x8, [sp, #72]
    2688:	ldrsw	x9, [sp, #32]
    268c:	mov	x10, #0x4                   	// #4
    2690:	mul	x9, x10, x9
    2694:	add	x8, x8, x9
    2698:	ldrh	w11, [x8]
    269c:	strh	w11, [sp, #18]
    26a0:	ldrh	w11, [sp, #18]
    26a4:	mov	w8, w11
    26a8:	ldr	w11, [sp, #24]
    26ac:	ldr	w12, [sp, #20]
    26b0:	add	w11, w11, w12
    26b4:	mov	w9, w11
    26b8:	ubfx	x9, x9, #0, #32
    26bc:	mul	x8, x8, x9
    26c0:	ldr	x9, [sp, #88]
    26c4:	ldr	x10, [x9, #5912]
    26c8:	add	x8, x10, x8
    26cc:	str	x8, [x9, #5912]
    26d0:	ldr	x8, [sp, #56]
    26d4:	cbz	x8, 271c <gen_bitlen+0x274>
    26d8:	ldrh	w8, [sp, #18]
    26dc:	mov	w9, w8
    26e0:	ldr	x10, [sp, #56]
    26e4:	ldrsw	x11, [sp, #32]
    26e8:	mov	x12, #0x4                   	// #4
    26ec:	mul	x11, x12, x11
    26f0:	add	x10, x10, x11
    26f4:	ldrh	w8, [x10, #2]
    26f8:	ldr	w13, [sp, #20]
    26fc:	add	w8, w8, w13
    2700:	mov	w10, w8
    2704:	ubfx	x10, x10, #0, #32
    2708:	mul	x9, x9, x10
    270c:	ldr	x10, [sp, #88]
    2710:	ldr	x11, [x10, #5920]
    2714:	add	x9, x11, x9
    2718:	str	x9, [x10, #5920]
    271c:	ldr	w8, [sp, #36]
    2720:	add	w8, w8, #0x1
    2724:	str	w8, [sp, #36]
    2728:	b	258c <gen_bitlen+0xe4>
    272c:	ldr	w8, [sp, #12]
    2730:	cbnz	w8, 2738 <gen_bitlen+0x290>
    2734:	b	28fc <gen_bitlen+0x454>
    2738:	ldr	w8, [sp, #40]
    273c:	subs	w8, w8, #0x1
    2740:	str	w8, [sp, #24]
    2744:	ldr	x8, [sp, #88]
    2748:	add	x8, x8, #0xba0
    274c:	ldrsw	x9, [sp, #24]
    2750:	ldrh	w10, [x8, x9, lsl #1]
    2754:	cbnz	w10, 2768 <gen_bitlen+0x2c0>
    2758:	ldr	w8, [sp, #24]
    275c:	subs	w8, w8, #0x1
    2760:	str	w8, [sp, #24]
    2764:	b	2744 <gen_bitlen+0x29c>
    2768:	ldr	x8, [sp, #88]
    276c:	add	x8, x8, #0xba0
    2770:	ldrsw	x9, [sp, #24]
    2774:	mov	x10, #0x2                   	// #2
    2778:	mul	x9, x10, x9
    277c:	add	x8, x8, x9
    2780:	ldrh	w11, [x8]
    2784:	mov	w12, #0xffffffff            	// #-1
    2788:	add	w11, w12, w11, uxth
    278c:	strh	w11, [x8]
    2790:	ldr	x8, [sp, #88]
    2794:	add	x8, x8, #0xba0
    2798:	ldr	w11, [sp, #24]
    279c:	add	w11, w11, #0x1
    27a0:	mov	w0, w11
    27a4:	sxtw	x9, w0
    27a8:	mul	x9, x10, x9
    27ac:	add	x8, x8, x9
    27b0:	ldrh	w11, [x8]
    27b4:	add	w11, w11, #0x2
    27b8:	strh	w11, [x8]
    27bc:	ldr	x8, [sp, #88]
    27c0:	add	x8, x8, #0xba0
    27c4:	ldrsw	x9, [sp, #40]
    27c8:	mul	x9, x10, x9
    27cc:	add	x8, x8, x9
    27d0:	ldrh	w11, [x8]
    27d4:	add	w11, w12, w11, uxth
    27d8:	strh	w11, [x8]
    27dc:	ldr	w11, [sp, #12]
    27e0:	subs	w11, w11, #0x2
    27e4:	str	w11, [sp, #12]
    27e8:	ldr	w8, [sp, #12]
    27ec:	cmp	w8, #0x0
    27f0:	cset	w8, gt
    27f4:	tbnz	w8, #0, 2738 <gen_bitlen+0x290>
    27f8:	ldr	w8, [sp, #40]
    27fc:	str	w8, [sp, #24]
    2800:	ldr	w8, [sp, #24]
    2804:	cbz	w8, 28fc <gen_bitlen+0x454>
    2808:	ldr	x8, [sp, #88]
    280c:	add	x8, x8, #0xba0
    2810:	ldrsw	x9, [sp, #24]
    2814:	ldrh	w10, [x8, x9, lsl #1]
    2818:	str	w10, [sp, #32]
    281c:	ldr	w8, [sp, #32]
    2820:	cbz	w8, 28ec <gen_bitlen+0x444>
    2824:	ldr	x8, [sp, #88]
    2828:	add	x8, x8, #0xbc0
    282c:	ldr	w9, [sp, #36]
    2830:	subs	w9, w9, #0x1
    2834:	str	w9, [sp, #36]
    2838:	ldr	w9, [x8, w9, sxtw #2]
    283c:	str	w9, [sp, #28]
    2840:	ldr	w9, [sp, #28]
    2844:	ldr	w10, [sp, #68]
    2848:	cmp	w9, w10
    284c:	b.le	2854 <gen_bitlen+0x3ac>
    2850:	b	281c <gen_bitlen+0x374>
    2854:	ldr	x8, [sp, #72]
    2858:	ldrsw	x9, [sp, #28]
    285c:	mov	x10, #0x4                   	// #4
    2860:	mul	x9, x10, x9
    2864:	add	x8, x8, x9
    2868:	ldrh	w11, [x8, #2]
    286c:	ldr	w12, [sp, #24]
    2870:	cmp	w11, w12
    2874:	b.eq	28dc <gen_bitlen+0x434>  // b.none
    2878:	ldrsw	x8, [sp, #24]
    287c:	ldr	x9, [sp, #72]
    2880:	ldrsw	x10, [sp, #28]
    2884:	mov	x11, #0x4                   	// #4
    2888:	mul	x10, x11, x10
    288c:	add	x9, x9, x10
    2890:	ldrh	w12, [x9, #2]
    2894:	mov	w9, w12
    2898:	subs	x8, x8, x9
    289c:	ldr	x9, [sp, #72]
    28a0:	ldrsw	x10, [sp, #28]
    28a4:	mul	x10, x11, x10
    28a8:	ldrh	w12, [x9, x10]
    28ac:	mov	w9, w12
    28b0:	mul	x8, x8, x9
    28b4:	ldr	x9, [sp, #88]
    28b8:	ldr	x10, [x9, #5912]
    28bc:	add	x8, x10, x8
    28c0:	str	x8, [x9, #5912]
    28c4:	ldr	w12, [sp, #24]
    28c8:	ldr	x8, [sp, #72]
    28cc:	ldrsw	x9, [sp, #28]
    28d0:	mul	x9, x11, x9
    28d4:	add	x8, x8, x9
    28d8:	strh	w12, [x8, #2]
    28dc:	ldr	w8, [sp, #32]
    28e0:	subs	w8, w8, #0x1
    28e4:	str	w8, [sp, #32]
    28e8:	b	281c <gen_bitlen+0x374>
    28ec:	ldr	w8, [sp, #24]
    28f0:	subs	w8, w8, #0x1
    28f4:	str	w8, [sp, #24]
    28f8:	b	2800 <gen_bitlen+0x358>
    28fc:	add	sp, sp, #0x60
    2900:	ret

0000000000002904 <gen_codes>:
    2904:	sub	sp, sp, #0x60
    2908:	stp	x29, x30, [sp, #80]
    290c:	add	x29, sp, #0x50
    2910:	mov	w8, #0x1                   	// #1
    2914:	stur	x0, [x29, #-8]
    2918:	stur	w1, [x29, #-12]
    291c:	stur	x2, [x29, #-24]
    2920:	str	wzr, [sp, #20]
    2924:	str	w8, [sp, #16]
    2928:	ldr	w8, [sp, #16]
    292c:	cmp	w8, #0xf
    2930:	b.gt	2980 <gen_codes+0x7c>
    2934:	ldr	w8, [sp, #20]
    2938:	ldur	x9, [x29, #-24]
    293c:	ldr	w10, [sp, #16]
    2940:	subs	w10, w10, #0x1
    2944:	mov	x11, #0x2                   	// #2
    2948:	ldrh	w10, [x9, w10, sxtw #1]
    294c:	add	w8, w8, w10
    2950:	lsl	w8, w8, #1
    2954:	str	w8, [sp, #20]
    2958:	ldr	w8, [sp, #20]
    295c:	ldrsw	x9, [sp, #16]
    2960:	mul	x9, x11, x9
    2964:	add	x11, sp, #0x18
    2968:	add	x9, x11, x9
    296c:	strh	w8, [x9]
    2970:	ldr	w8, [sp, #16]
    2974:	add	w8, w8, #0x1
    2978:	str	w8, [sp, #16]
    297c:	b	2928 <gen_codes+0x24>
    2980:	str	wzr, [sp, #12]
    2984:	ldr	w8, [sp, #12]
    2988:	ldur	w9, [x29, #-12]
    298c:	cmp	w8, w9
    2990:	b.gt	2a14 <gen_codes+0x110>
    2994:	ldur	x8, [x29, #-8]
    2998:	ldrsw	x9, [sp, #12]
    299c:	mov	x10, #0x4                   	// #4
    29a0:	mul	x9, x10, x9
    29a4:	add	x8, x8, x9
    29a8:	ldrh	w11, [x8, #2]
    29ac:	str	w11, [sp, #8]
    29b0:	ldr	w11, [sp, #8]
    29b4:	cbnz	w11, 29bc <gen_codes+0xb8>
    29b8:	b	2a04 <gen_codes+0x100>
    29bc:	ldrsw	x8, [sp, #8]
    29c0:	mov	x9, #0x2                   	// #2
    29c4:	mul	x8, x9, x8
    29c8:	add	x9, sp, #0x18
    29cc:	add	x8, x9, x8
    29d0:	ldrh	w10, [x8]
    29d4:	mov	w11, w10
    29d8:	add	w11, w11, #0x1
    29dc:	strh	w11, [x8]
    29e0:	ldr	w1, [sp, #8]
    29e4:	mov	w0, w10
    29e8:	bl	2a20 <bi_reverse>
    29ec:	ldur	x8, [x29, #-8]
    29f0:	ldrsw	x9, [sp, #12]
    29f4:	mov	x12, #0x4                   	// #4
    29f8:	mul	x9, x12, x9
    29fc:	add	x8, x8, x9
    2a00:	strh	w0, [x8]
    2a04:	ldr	w8, [sp, #12]
    2a08:	add	w8, w8, #0x1
    2a0c:	str	w8, [sp, #12]
    2a10:	b	2984 <gen_codes+0x80>
    2a14:	ldp	x29, x30, [sp, #80]
    2a18:	add	sp, sp, #0x60
    2a1c:	ret

0000000000002a20 <bi_reverse>:
    2a20:	sub	sp, sp, #0x10
    2a24:	str	w0, [sp, #12]
    2a28:	str	w1, [sp, #8]
    2a2c:	str	wzr, [sp, #4]
    2a30:	ldr	w8, [sp, #12]
    2a34:	and	w8, w8, #0x1
    2a38:	ldr	w9, [sp, #4]
    2a3c:	orr	w8, w9, w8
    2a40:	str	w8, [sp, #4]
    2a44:	ldr	w8, [sp, #12]
    2a48:	lsr	w8, w8, #1
    2a4c:	str	w8, [sp, #12]
    2a50:	ldr	w8, [sp, #4]
    2a54:	lsl	w8, w8, #1
    2a58:	str	w8, [sp, #4]
    2a5c:	ldr	w8, [sp, #8]
    2a60:	subs	w8, w8, #0x1
    2a64:	str	w8, [sp, #8]
    2a68:	cmp	w8, #0x0
    2a6c:	cset	w8, gt
    2a70:	tbnz	w8, #0, 2a30 <bi_reverse+0x10>
    2a74:	ldr	w8, [sp, #4]
    2a78:	lsr	w0, w8, #1
    2a7c:	add	sp, sp, #0x10
    2a80:	ret

0000000000002a84 <scan_tree>:
    2a84:	sub	sp, sp, #0x30
    2a88:	mov	w8, #0xffffffff            	// #-1
    2a8c:	mov	w9, #0x7                   	// #7
    2a90:	mov	w10, #0x4                   	// #4
    2a94:	str	x0, [sp, #40]
    2a98:	str	x1, [sp, #32]
    2a9c:	str	w2, [sp, #28]
    2aa0:	str	w8, [sp, #20]
    2aa4:	ldr	x11, [sp, #32]
    2aa8:	ldrh	w8, [x11, #2]
    2aac:	str	w8, [sp, #12]
    2ab0:	str	wzr, [sp, #8]
    2ab4:	str	w9, [sp, #4]
    2ab8:	str	w10, [sp]
    2abc:	ldr	w8, [sp, #12]
    2ac0:	cbnz	w8, 2ad4 <scan_tree+0x50>
    2ac4:	mov	w8, #0x8a                  	// #138
    2ac8:	str	w8, [sp, #4]
    2acc:	mov	w8, #0x3                   	// #3
    2ad0:	str	w8, [sp]
    2ad4:	ldr	x8, [sp, #32]
    2ad8:	ldr	w9, [sp, #28]
    2adc:	add	w9, w9, #0x1
    2ae0:	mov	w0, w9
    2ae4:	sxtw	x10, w0
    2ae8:	mov	x11, #0x4                   	// #4
    2aec:	mul	x10, x11, x10
    2af0:	add	x8, x8, x10
    2af4:	mov	w9, #0xffff                	// #65535
    2af8:	strh	w9, [x8, #2]
    2afc:	str	wzr, [sp, #24]
    2b00:	ldr	w8, [sp, #24]
    2b04:	ldr	w9, [sp, #28]
    2b08:	cmp	w8, w9
    2b0c:	b.gt	2c94 <scan_tree+0x210>
    2b10:	ldr	w8, [sp, #12]
    2b14:	str	w8, [sp, #16]
    2b18:	ldr	x9, [sp, #32]
    2b1c:	ldr	w8, [sp, #24]
    2b20:	add	w8, w8, #0x1
    2b24:	mov	w0, w8
    2b28:	sxtw	x10, w0
    2b2c:	mov	x11, #0x4                   	// #4
    2b30:	mul	x10, x11, x10
    2b34:	add	x9, x9, x10
    2b38:	ldrh	w8, [x9, #2]
    2b3c:	str	w8, [sp, #12]
    2b40:	ldr	w8, [sp, #8]
    2b44:	add	w8, w8, #0x1
    2b48:	str	w8, [sp, #8]
    2b4c:	ldr	w12, [sp, #4]
    2b50:	cmp	w8, w12
    2b54:	b.ge	2b6c <scan_tree+0xe8>  // b.tcont
    2b58:	ldr	w8, [sp, #16]
    2b5c:	ldr	w9, [sp, #12]
    2b60:	cmp	w8, w9
    2b64:	b.ne	2b6c <scan_tree+0xe8>  // b.any
    2b68:	b	2c84 <scan_tree+0x200>
    2b6c:	ldr	w8, [sp, #8]
    2b70:	ldr	w9, [sp]
    2b74:	cmp	w8, w9
    2b78:	b.ge	2ba8 <scan_tree+0x124>  // b.tcont
    2b7c:	ldr	w8, [sp, #8]
    2b80:	ldr	x9, [sp, #40]
    2b84:	add	x9, x9, #0xabc
    2b88:	ldrsw	x10, [sp, #16]
    2b8c:	mov	x11, #0x4                   	// #4
    2b90:	mul	x10, x11, x10
    2b94:	add	x9, x9, x10
    2b98:	ldrh	w12, [x9]
    2b9c:	add	w8, w12, w8
    2ba0:	strh	w8, [x9]
    2ba4:	b	2c28 <scan_tree+0x1a4>
    2ba8:	ldr	w8, [sp, #16]
    2bac:	cbz	w8, 2bf8 <scan_tree+0x174>
    2bb0:	ldr	w8, [sp, #16]
    2bb4:	ldr	w9, [sp, #20]
    2bb8:	cmp	w8, w9
    2bbc:	b.eq	2be4 <scan_tree+0x160>  // b.none
    2bc0:	ldr	x8, [sp, #40]
    2bc4:	add	x8, x8, #0xabc
    2bc8:	ldrsw	x9, [sp, #16]
    2bcc:	mov	x10, #0x4                   	// #4
    2bd0:	mul	x9, x10, x9
    2bd4:	add	x8, x8, x9
    2bd8:	ldrh	w11, [x8]
    2bdc:	add	w11, w11, #0x1
    2be0:	strh	w11, [x8]
    2be4:	ldr	x8, [sp, #40]
    2be8:	ldrh	w9, [x8, #2812]
    2bec:	add	w9, w9, #0x1
    2bf0:	strh	w9, [x8, #2812]
    2bf4:	b	2c28 <scan_tree+0x1a4>
    2bf8:	ldr	w8, [sp, #8]
    2bfc:	cmp	w8, #0xa
    2c00:	b.gt	2c18 <scan_tree+0x194>
    2c04:	ldr	x8, [sp, #40]
    2c08:	ldrh	w9, [x8, #2816]
    2c0c:	add	w9, w9, #0x1
    2c10:	strh	w9, [x8, #2816]
    2c14:	b	2c28 <scan_tree+0x1a4>
    2c18:	ldr	x8, [sp, #40]
    2c1c:	ldrh	w9, [x8, #2820]
    2c20:	add	w9, w9, #0x1
    2c24:	strh	w9, [x8, #2820]
    2c28:	str	wzr, [sp, #8]
    2c2c:	ldr	w8, [sp, #16]
    2c30:	str	w8, [sp, #20]
    2c34:	ldr	w8, [sp, #12]
    2c38:	cbnz	w8, 2c50 <scan_tree+0x1cc>
    2c3c:	mov	w8, #0x8a                  	// #138
    2c40:	str	w8, [sp, #4]
    2c44:	mov	w8, #0x3                   	// #3
    2c48:	str	w8, [sp]
    2c4c:	b	2c84 <scan_tree+0x200>
    2c50:	ldr	w8, [sp, #16]
    2c54:	ldr	w9, [sp, #12]
    2c58:	cmp	w8, w9
    2c5c:	b.ne	2c74 <scan_tree+0x1f0>  // b.any
    2c60:	mov	w8, #0x6                   	// #6
    2c64:	str	w8, [sp, #4]
    2c68:	mov	w8, #0x3                   	// #3
    2c6c:	str	w8, [sp]
    2c70:	b	2c84 <scan_tree+0x200>
    2c74:	mov	w8, #0x7                   	// #7
    2c78:	str	w8, [sp, #4]
    2c7c:	mov	w8, #0x4                   	// #4
    2c80:	str	w8, [sp]
    2c84:	ldr	w8, [sp, #24]
    2c88:	add	w8, w8, #0x1
    2c8c:	str	w8, [sp, #24]
    2c90:	b	2b00 <scan_tree+0x7c>
    2c94:	add	sp, sp, #0x30
    2c98:	ret

0000000000002c9c <send_tree>:
    2c9c:	sub	sp, sp, #0x70
    2ca0:	mov	w8, #0xffffffff            	// #-1
    2ca4:	mov	w9, #0x7                   	// #7
    2ca8:	mov	w10, #0x4                   	// #4
    2cac:	str	x0, [sp, #104]
    2cb0:	str	x1, [sp, #96]
    2cb4:	str	w2, [sp, #92]
    2cb8:	str	w8, [sp, #84]
    2cbc:	ldr	x11, [sp, #96]
    2cc0:	ldrh	w8, [x11, #2]
    2cc4:	str	w8, [sp, #76]
    2cc8:	str	wzr, [sp, #72]
    2ccc:	str	w9, [sp, #68]
    2cd0:	str	w10, [sp, #64]
    2cd4:	ldr	w8, [sp, #76]
    2cd8:	cbnz	w8, 2cec <send_tree+0x50>
    2cdc:	mov	w8, #0x8a                  	// #138
    2ce0:	str	w8, [sp, #68]
    2ce4:	mov	w8, #0x3                   	// #3
    2ce8:	str	w8, [sp, #64]
    2cec:	str	wzr, [sp, #88]
    2cf0:	ldr	w8, [sp, #88]
    2cf4:	ldr	w9, [sp, #92]
    2cf8:	cmp	w8, w9
    2cfc:	b.gt	37cc <send_tree+0xb30>
    2d00:	ldr	w8, [sp, #76]
    2d04:	str	w8, [sp, #80]
    2d08:	ldr	x9, [sp, #96]
    2d0c:	ldr	w8, [sp, #88]
    2d10:	add	w8, w8, #0x1
    2d14:	mov	w0, w8
    2d18:	sxtw	x10, w0
    2d1c:	mov	x11, #0x4                   	// #4
    2d20:	mul	x10, x11, x10
    2d24:	add	x9, x9, x10
    2d28:	ldrh	w8, [x9, #2]
    2d2c:	str	w8, [sp, #76]
    2d30:	ldr	w8, [sp, #72]
    2d34:	add	w8, w8, #0x1
    2d38:	str	w8, [sp, #72]
    2d3c:	ldr	w12, [sp, #68]
    2d40:	cmp	w8, w12
    2d44:	b.ge	2d5c <send_tree+0xc0>  // b.tcont
    2d48:	ldr	w8, [sp, #80]
    2d4c:	ldr	w9, [sp, #76]
    2d50:	cmp	w8, w9
    2d54:	b.ne	2d5c <send_tree+0xc0>  // b.any
    2d58:	b	37bc <send_tree+0xb20>
    2d5c:	ldr	w8, [sp, #72]
    2d60:	ldr	w9, [sp, #64]
    2d64:	cmp	w8, w9
    2d68:	b.ge	2edc <send_tree+0x240>  // b.tcont
    2d6c:	ldr	x8, [sp, #104]
    2d70:	add	x8, x8, #0xabc
    2d74:	ldrsw	x9, [sp, #80]
    2d78:	mov	x10, #0x4                   	// #4
    2d7c:	mul	x9, x10, x9
    2d80:	add	x8, x8, x9
    2d84:	ldrh	w11, [x8, #2]
    2d88:	str	w11, [sp, #60]
    2d8c:	ldr	x8, [sp, #104]
    2d90:	ldr	w11, [x8, #5940]
    2d94:	ldr	w12, [sp, #60]
    2d98:	mov	w13, #0x10                  	// #16
    2d9c:	subs	w12, w13, w12
    2da0:	cmp	w11, w12
    2da4:	b.le	2e80 <send_tree+0x1e4>
    2da8:	ldr	x8, [sp, #104]
    2dac:	add	x8, x8, #0xabc
    2db0:	ldrsw	x9, [sp, #80]
    2db4:	mov	x10, #0x4                   	// #4
    2db8:	mul	x9, x10, x9
    2dbc:	ldrh	w11, [x8, x9]
    2dc0:	str	w11, [sp, #56]
    2dc4:	ldr	w11, [sp, #56]
    2dc8:	and	w11, w11, #0xffff
    2dcc:	ldr	x8, [sp, #104]
    2dd0:	ldr	w12, [x8, #5940]
    2dd4:	lsl	w11, w11, w12
    2dd8:	ldr	x8, [sp, #104]
    2ddc:	ldrh	w12, [x8, #5936]
    2de0:	orr	w11, w12, w11
    2de4:	strh	w11, [x8, #5936]
    2de8:	ldr	x8, [sp, #104]
    2dec:	ldrh	w11, [x8, #5936]
    2df0:	and	w11, w11, #0xff
    2df4:	ldr	x8, [sp, #104]
    2df8:	ldr	x8, [x8, #16]
    2dfc:	ldr	x9, [sp, #104]
    2e00:	ldr	x10, [x9, #40]
    2e04:	add	x13, x10, #0x1
    2e08:	str	x13, [x9, #40]
    2e0c:	add	x8, x8, x10
    2e10:	strb	w11, [x8]
    2e14:	ldr	x8, [sp, #104]
    2e18:	ldrh	w11, [x8, #5936]
    2e1c:	asr	w11, w11, #8
    2e20:	ldr	x8, [sp, #104]
    2e24:	ldr	x8, [x8, #16]
    2e28:	ldr	x9, [sp, #104]
    2e2c:	ldr	x10, [x9, #40]
    2e30:	add	x13, x10, #0x1
    2e34:	str	x13, [x9, #40]
    2e38:	add	x8, x8, x10
    2e3c:	strb	w11, [x8]
    2e40:	ldr	w11, [sp, #56]
    2e44:	and	w11, w11, #0xffff
    2e48:	ldr	x8, [sp, #104]
    2e4c:	ldr	w12, [x8, #5940]
    2e50:	mov	w14, #0x10                  	// #16
    2e54:	subs	w12, w14, w12
    2e58:	asr	w11, w11, w12
    2e5c:	ldr	x8, [sp, #104]
    2e60:	strh	w11, [x8, #5936]
    2e64:	ldr	w11, [sp, #60]
    2e68:	subs	w11, w11, #0x10
    2e6c:	ldr	x8, [sp, #104]
    2e70:	ldr	w12, [x8, #5940]
    2e74:	add	w11, w12, w11
    2e78:	str	w11, [x8, #5940]
    2e7c:	b	2ec8 <send_tree+0x22c>
    2e80:	ldr	x8, [sp, #104]
    2e84:	add	x8, x8, #0xabc
    2e88:	ldrsw	x9, [sp, #80]
    2e8c:	mov	x10, #0x4                   	// #4
    2e90:	mul	x9, x10, x9
    2e94:	ldrh	w11, [x8, x9]
    2e98:	ldr	x8, [sp, #104]
    2e9c:	ldr	w12, [x8, #5940]
    2ea0:	lsl	w11, w11, w12
    2ea4:	ldr	x8, [sp, #104]
    2ea8:	ldrh	w12, [x8, #5936]
    2eac:	orr	w11, w12, w11
    2eb0:	strh	w11, [x8, #5936]
    2eb4:	ldr	w11, [sp, #60]
    2eb8:	ldr	x8, [sp, #104]
    2ebc:	ldr	w12, [x8, #5940]
    2ec0:	add	w11, w12, w11
    2ec4:	str	w11, [x8, #5940]
    2ec8:	ldr	w8, [sp, #72]
    2ecc:	subs	w8, w8, #0x1
    2ed0:	str	w8, [sp, #72]
    2ed4:	cbnz	w8, 2d6c <send_tree+0xd0>
    2ed8:	b	3760 <send_tree+0xac4>
    2edc:	ldr	w8, [sp, #80]
    2ee0:	cbz	w8, 32b0 <send_tree+0x614>
    2ee4:	ldr	w8, [sp, #80]
    2ee8:	ldr	w9, [sp, #84]
    2eec:	cmp	w8, w9
    2ef0:	b.eq	305c <send_tree+0x3c0>  // b.none
    2ef4:	ldr	x8, [sp, #104]
    2ef8:	add	x8, x8, #0xabc
    2efc:	ldrsw	x9, [sp, #80]
    2f00:	mov	x10, #0x4                   	// #4
    2f04:	mul	x9, x10, x9
    2f08:	add	x8, x8, x9
    2f0c:	ldrh	w11, [x8, #2]
    2f10:	str	w11, [sp, #52]
    2f14:	ldr	x8, [sp, #104]
    2f18:	ldr	w11, [x8, #5940]
    2f1c:	ldr	w12, [sp, #52]
    2f20:	mov	w13, #0x10                  	// #16
    2f24:	subs	w12, w13, w12
    2f28:	cmp	w11, w12
    2f2c:	b.le	3008 <send_tree+0x36c>
    2f30:	ldr	x8, [sp, #104]
    2f34:	add	x8, x8, #0xabc
    2f38:	ldrsw	x9, [sp, #80]
    2f3c:	mov	x10, #0x4                   	// #4
    2f40:	mul	x9, x10, x9
    2f44:	ldrh	w11, [x8, x9]
    2f48:	str	w11, [sp, #48]
    2f4c:	ldr	w11, [sp, #48]
    2f50:	and	w11, w11, #0xffff
    2f54:	ldr	x8, [sp, #104]
    2f58:	ldr	w12, [x8, #5940]
    2f5c:	lsl	w11, w11, w12
    2f60:	ldr	x8, [sp, #104]
    2f64:	ldrh	w12, [x8, #5936]
    2f68:	orr	w11, w12, w11
    2f6c:	strh	w11, [x8, #5936]
    2f70:	ldr	x8, [sp, #104]
    2f74:	ldrh	w11, [x8, #5936]
    2f78:	and	w11, w11, #0xff
    2f7c:	ldr	x8, [sp, #104]
    2f80:	ldr	x8, [x8, #16]
    2f84:	ldr	x9, [sp, #104]
    2f88:	ldr	x10, [x9, #40]
    2f8c:	add	x13, x10, #0x1
    2f90:	str	x13, [x9, #40]
    2f94:	add	x8, x8, x10
    2f98:	strb	w11, [x8]
    2f9c:	ldr	x8, [sp, #104]
    2fa0:	ldrh	w11, [x8, #5936]
    2fa4:	asr	w11, w11, #8
    2fa8:	ldr	x8, [sp, #104]
    2fac:	ldr	x8, [x8, #16]
    2fb0:	ldr	x9, [sp, #104]
    2fb4:	ldr	x10, [x9, #40]
    2fb8:	add	x13, x10, #0x1
    2fbc:	str	x13, [x9, #40]
    2fc0:	add	x8, x8, x10
    2fc4:	strb	w11, [x8]
    2fc8:	ldr	w11, [sp, #48]
    2fcc:	and	w11, w11, #0xffff
    2fd0:	ldr	x8, [sp, #104]
    2fd4:	ldr	w12, [x8, #5940]
    2fd8:	mov	w14, #0x10                  	// #16
    2fdc:	subs	w12, w14, w12
    2fe0:	asr	w11, w11, w12
    2fe4:	ldr	x8, [sp, #104]
    2fe8:	strh	w11, [x8, #5936]
    2fec:	ldr	w11, [sp, #52]
    2ff0:	subs	w11, w11, #0x10
    2ff4:	ldr	x8, [sp, #104]
    2ff8:	ldr	w12, [x8, #5940]
    2ffc:	add	w11, w12, w11
    3000:	str	w11, [x8, #5940]
    3004:	b	3050 <send_tree+0x3b4>
    3008:	ldr	x8, [sp, #104]
    300c:	add	x8, x8, #0xabc
    3010:	ldrsw	x9, [sp, #80]
    3014:	mov	x10, #0x4                   	// #4
    3018:	mul	x9, x10, x9
    301c:	ldrh	w11, [x8, x9]
    3020:	ldr	x8, [sp, #104]
    3024:	ldr	w12, [x8, #5940]
    3028:	lsl	w11, w11, w12
    302c:	ldr	x8, [sp, #104]
    3030:	ldrh	w12, [x8, #5936]
    3034:	orr	w11, w12, w11
    3038:	strh	w11, [x8, #5936]
    303c:	ldr	w11, [sp, #52]
    3040:	ldr	x8, [sp, #104]
    3044:	ldr	w12, [x8, #5940]
    3048:	add	w11, w12, w11
    304c:	str	w11, [x8, #5940]
    3050:	ldr	w8, [sp, #72]
    3054:	subs	w8, w8, #0x1
    3058:	str	w8, [sp, #72]
    305c:	ldr	x8, [sp, #104]
    3060:	ldrh	w9, [x8, #2814]
    3064:	str	w9, [sp, #44]
    3068:	ldr	x8, [sp, #104]
    306c:	ldr	w9, [x8, #5940]
    3070:	ldr	w10, [sp, #44]
    3074:	mov	w11, #0x10                  	// #16
    3078:	subs	w10, w11, w10
    307c:	cmp	w9, w10
    3080:	b.le	314c <send_tree+0x4b0>
    3084:	ldr	x8, [sp, #104]
    3088:	ldrh	w9, [x8, #2812]
    308c:	str	w9, [sp, #40]
    3090:	ldr	w9, [sp, #40]
    3094:	and	w9, w9, #0xffff
    3098:	ldr	x8, [sp, #104]
    309c:	ldr	w10, [x8, #5940]
    30a0:	lsl	w9, w9, w10
    30a4:	ldr	x8, [sp, #104]
    30a8:	ldrh	w10, [x8, #5936]
    30ac:	orr	w9, w10, w9
    30b0:	strh	w9, [x8, #5936]
    30b4:	ldr	x8, [sp, #104]
    30b8:	ldrh	w9, [x8, #5936]
    30bc:	and	w9, w9, #0xff
    30c0:	ldr	x8, [sp, #104]
    30c4:	ldr	x8, [x8, #16]
    30c8:	ldr	x11, [sp, #104]
    30cc:	ldr	x12, [x11, #40]
    30d0:	add	x13, x12, #0x1
    30d4:	str	x13, [x11, #40]
    30d8:	add	x8, x8, x12
    30dc:	strb	w9, [x8]
    30e0:	ldr	x8, [sp, #104]
    30e4:	ldrh	w9, [x8, #5936]
    30e8:	asr	w9, w9, #8
    30ec:	ldr	x8, [sp, #104]
    30f0:	ldr	x8, [x8, #16]
    30f4:	ldr	x11, [sp, #104]
    30f8:	ldr	x12, [x11, #40]
    30fc:	add	x13, x12, #0x1
    3100:	str	x13, [x11, #40]
    3104:	add	x8, x8, x12
    3108:	strb	w9, [x8]
    310c:	ldr	w9, [sp, #40]
    3110:	and	w9, w9, #0xffff
    3114:	ldr	x8, [sp, #104]
    3118:	ldr	w10, [x8, #5940]
    311c:	mov	w14, #0x10                  	// #16
    3120:	subs	w10, w14, w10
    3124:	asr	w9, w9, w10
    3128:	ldr	x8, [sp, #104]
    312c:	strh	w9, [x8, #5936]
    3130:	ldr	w9, [sp, #44]
    3134:	subs	w9, w9, #0x10
    3138:	ldr	x8, [sp, #104]
    313c:	ldr	w10, [x8, #5940]
    3140:	add	w9, w10, w9
    3144:	str	w9, [x8, #5940]
    3148:	b	3184 <send_tree+0x4e8>
    314c:	ldr	x8, [sp, #104]
    3150:	ldrh	w9, [x8, #2812]
    3154:	ldr	x8, [sp, #104]
    3158:	ldr	w10, [x8, #5940]
    315c:	lsl	w9, w9, w10
    3160:	ldr	x8, [sp, #104]
    3164:	ldrh	w10, [x8, #5936]
    3168:	orr	w9, w10, w9
    316c:	strh	w9, [x8, #5936]
    3170:	ldr	w9, [sp, #44]
    3174:	ldr	x8, [sp, #104]
    3178:	ldr	w10, [x8, #5940]
    317c:	add	w9, w10, w9
    3180:	str	w9, [x8, #5940]
    3184:	mov	w8, #0x2                   	// #2
    3188:	str	w8, [sp, #36]
    318c:	ldr	x9, [sp, #104]
    3190:	ldr	w8, [x9, #5940]
    3194:	ldr	w10, [sp, #36]
    3198:	mov	w11, #0x10                  	// #16
    319c:	subs	w10, w11, w10
    31a0:	cmp	w8, w10
    31a4:	b.le	3270 <send_tree+0x5d4>
    31a8:	ldr	w8, [sp, #72]
    31ac:	subs	w8, w8, #0x3
    31b0:	str	w8, [sp, #32]
    31b4:	ldr	w8, [sp, #32]
    31b8:	and	w8, w8, #0xffff
    31bc:	ldr	x9, [sp, #104]
    31c0:	ldr	w10, [x9, #5940]
    31c4:	lsl	w8, w8, w10
    31c8:	ldr	x9, [sp, #104]
    31cc:	ldrh	w10, [x9, #5936]
    31d0:	orr	w8, w10, w8
    31d4:	strh	w8, [x9, #5936]
    31d8:	ldr	x9, [sp, #104]
    31dc:	ldrh	w8, [x9, #5936]
    31e0:	and	w8, w8, #0xff
    31e4:	ldr	x9, [sp, #104]
    31e8:	ldr	x9, [x9, #16]
    31ec:	ldr	x11, [sp, #104]
    31f0:	ldr	x12, [x11, #40]
    31f4:	add	x13, x12, #0x1
    31f8:	str	x13, [x11, #40]
    31fc:	add	x9, x9, x12
    3200:	strb	w8, [x9]
    3204:	ldr	x9, [sp, #104]
    3208:	ldrh	w8, [x9, #5936]
    320c:	asr	w8, w8, #8
    3210:	ldr	x9, [sp, #104]
    3214:	ldr	x9, [x9, #16]
    3218:	ldr	x11, [sp, #104]
    321c:	ldr	x12, [x11, #40]
    3220:	add	x13, x12, #0x1
    3224:	str	x13, [x11, #40]
    3228:	add	x9, x9, x12
    322c:	strb	w8, [x9]
    3230:	ldr	w8, [sp, #32]
    3234:	and	w8, w8, #0xffff
    3238:	ldr	x9, [sp, #104]
    323c:	ldr	w10, [x9, #5940]
    3240:	mov	w14, #0x10                  	// #16
    3244:	subs	w10, w14, w10
    3248:	asr	w8, w8, w10
    324c:	ldr	x9, [sp, #104]
    3250:	strh	w8, [x9, #5936]
    3254:	ldr	w8, [sp, #36]
    3258:	subs	w8, w8, #0x10
    325c:	ldr	x9, [sp, #104]
    3260:	ldr	w10, [x9, #5940]
    3264:	add	w8, w10, w8
    3268:	str	w8, [x9, #5940]
    326c:	b	32ac <send_tree+0x610>
    3270:	ldr	w8, [sp, #72]
    3274:	subs	w8, w8, #0x3
    3278:	and	w8, w8, #0xffff
    327c:	ldr	x9, [sp, #104]
    3280:	ldr	w10, [x9, #5940]
    3284:	lsl	w8, w8, w10
    3288:	ldr	x9, [sp, #104]
    328c:	ldrh	w10, [x9, #5936]
    3290:	orr	w8, w10, w8
    3294:	strh	w8, [x9, #5936]
    3298:	ldr	w8, [sp, #36]
    329c:	ldr	x9, [sp, #104]
    32a0:	ldr	w10, [x9, #5940]
    32a4:	add	w8, w10, w8
    32a8:	str	w8, [x9, #5940]
    32ac:	b	3760 <send_tree+0xac4>
    32b0:	ldr	w8, [sp, #72]
    32b4:	cmp	w8, #0xa
    32b8:	b.gt	3510 <send_tree+0x874>
    32bc:	ldr	x8, [sp, #104]
    32c0:	ldrh	w9, [x8, #2818]
    32c4:	str	w9, [sp, #28]
    32c8:	ldr	x8, [sp, #104]
    32cc:	ldr	w9, [x8, #5940]
    32d0:	ldr	w10, [sp, #28]
    32d4:	mov	w11, #0x10                  	// #16
    32d8:	subs	w10, w11, w10
    32dc:	cmp	w9, w10
    32e0:	b.le	33ac <send_tree+0x710>
    32e4:	ldr	x8, [sp, #104]
    32e8:	ldrh	w9, [x8, #2816]
    32ec:	str	w9, [sp, #24]
    32f0:	ldr	w9, [sp, #24]
    32f4:	and	w9, w9, #0xffff
    32f8:	ldr	x8, [sp, #104]
    32fc:	ldr	w10, [x8, #5940]
    3300:	lsl	w9, w9, w10
    3304:	ldr	x8, [sp, #104]
    3308:	ldrh	w10, [x8, #5936]
    330c:	orr	w9, w10, w9
    3310:	strh	w9, [x8, #5936]
    3314:	ldr	x8, [sp, #104]
    3318:	ldrh	w9, [x8, #5936]
    331c:	and	w9, w9, #0xff
    3320:	ldr	x8, [sp, #104]
    3324:	ldr	x8, [x8, #16]
    3328:	ldr	x11, [sp, #104]
    332c:	ldr	x12, [x11, #40]
    3330:	add	x13, x12, #0x1
    3334:	str	x13, [x11, #40]
    3338:	add	x8, x8, x12
    333c:	strb	w9, [x8]
    3340:	ldr	x8, [sp, #104]
    3344:	ldrh	w9, [x8, #5936]
    3348:	asr	w9, w9, #8
    334c:	ldr	x8, [sp, #104]
    3350:	ldr	x8, [x8, #16]
    3354:	ldr	x11, [sp, #104]
    3358:	ldr	x12, [x11, #40]
    335c:	add	x13, x12, #0x1
    3360:	str	x13, [x11, #40]
    3364:	add	x8, x8, x12
    3368:	strb	w9, [x8]
    336c:	ldr	w9, [sp, #24]
    3370:	and	w9, w9, #0xffff
    3374:	ldr	x8, [sp, #104]
    3378:	ldr	w10, [x8, #5940]
    337c:	mov	w14, #0x10                  	// #16
    3380:	subs	w10, w14, w10
    3384:	asr	w9, w9, w10
    3388:	ldr	x8, [sp, #104]
    338c:	strh	w9, [x8, #5936]
    3390:	ldr	w9, [sp, #28]
    3394:	subs	w9, w9, #0x10
    3398:	ldr	x8, [sp, #104]
    339c:	ldr	w10, [x8, #5940]
    33a0:	add	w9, w10, w9
    33a4:	str	w9, [x8, #5940]
    33a8:	b	33e4 <send_tree+0x748>
    33ac:	ldr	x8, [sp, #104]
    33b0:	ldrh	w9, [x8, #2816]
    33b4:	ldr	x8, [sp, #104]
    33b8:	ldr	w10, [x8, #5940]
    33bc:	lsl	w9, w9, w10
    33c0:	ldr	x8, [sp, #104]
    33c4:	ldrh	w10, [x8, #5936]
    33c8:	orr	w9, w10, w9
    33cc:	strh	w9, [x8, #5936]
    33d0:	ldr	w9, [sp, #28]
    33d4:	ldr	x8, [sp, #104]
    33d8:	ldr	w10, [x8, #5940]
    33dc:	add	w9, w10, w9
    33e0:	str	w9, [x8, #5940]
    33e4:	mov	w8, #0x3                   	// #3
    33e8:	str	w8, [sp, #20]
    33ec:	ldr	x9, [sp, #104]
    33f0:	ldr	w8, [x9, #5940]
    33f4:	ldr	w10, [sp, #20]
    33f8:	mov	w11, #0x10                  	// #16
    33fc:	subs	w10, w11, w10
    3400:	cmp	w8, w10
    3404:	b.le	34d0 <send_tree+0x834>
    3408:	ldr	w8, [sp, #72]
    340c:	subs	w8, w8, #0x3
    3410:	str	w8, [sp, #16]
    3414:	ldr	w8, [sp, #16]
    3418:	and	w8, w8, #0xffff
    341c:	ldr	x9, [sp, #104]
    3420:	ldr	w10, [x9, #5940]
    3424:	lsl	w8, w8, w10
    3428:	ldr	x9, [sp, #104]
    342c:	ldrh	w10, [x9, #5936]
    3430:	orr	w8, w10, w8
    3434:	strh	w8, [x9, #5936]
    3438:	ldr	x9, [sp, #104]
    343c:	ldrh	w8, [x9, #5936]
    3440:	and	w8, w8, #0xff
    3444:	ldr	x9, [sp, #104]
    3448:	ldr	x9, [x9, #16]
    344c:	ldr	x11, [sp, #104]
    3450:	ldr	x12, [x11, #40]
    3454:	add	x13, x12, #0x1
    3458:	str	x13, [x11, #40]
    345c:	add	x9, x9, x12
    3460:	strb	w8, [x9]
    3464:	ldr	x9, [sp, #104]
    3468:	ldrh	w8, [x9, #5936]
    346c:	asr	w8, w8, #8
    3470:	ldr	x9, [sp, #104]
    3474:	ldr	x9, [x9, #16]
    3478:	ldr	x11, [sp, #104]
    347c:	ldr	x12, [x11, #40]
    3480:	add	x13, x12, #0x1
    3484:	str	x13, [x11, #40]
    3488:	add	x9, x9, x12
    348c:	strb	w8, [x9]
    3490:	ldr	w8, [sp, #16]
    3494:	and	w8, w8, #0xffff
    3498:	ldr	x9, [sp, #104]
    349c:	ldr	w10, [x9, #5940]
    34a0:	mov	w14, #0x10                  	// #16
    34a4:	subs	w10, w14, w10
    34a8:	asr	w8, w8, w10
    34ac:	ldr	x9, [sp, #104]
    34b0:	strh	w8, [x9, #5936]
    34b4:	ldr	w8, [sp, #20]
    34b8:	subs	w8, w8, #0x10
    34bc:	ldr	x9, [sp, #104]
    34c0:	ldr	w10, [x9, #5940]
    34c4:	add	w8, w10, w8
    34c8:	str	w8, [x9, #5940]
    34cc:	b	350c <send_tree+0x870>
    34d0:	ldr	w8, [sp, #72]
    34d4:	subs	w8, w8, #0x3
    34d8:	and	w8, w8, #0xffff
    34dc:	ldr	x9, [sp, #104]
    34e0:	ldr	w10, [x9, #5940]
    34e4:	lsl	w8, w8, w10
    34e8:	ldr	x9, [sp, #104]
    34ec:	ldrh	w10, [x9, #5936]
    34f0:	orr	w8, w10, w8
    34f4:	strh	w8, [x9, #5936]
    34f8:	ldr	w8, [sp, #20]
    34fc:	ldr	x9, [sp, #104]
    3500:	ldr	w10, [x9, #5940]
    3504:	add	w8, w10, w8
    3508:	str	w8, [x9, #5940]
    350c:	b	3760 <send_tree+0xac4>
    3510:	ldr	x8, [sp, #104]
    3514:	ldrh	w9, [x8, #2822]
    3518:	str	w9, [sp, #12]
    351c:	ldr	x8, [sp, #104]
    3520:	ldr	w9, [x8, #5940]
    3524:	ldr	w10, [sp, #12]
    3528:	mov	w11, #0x10                  	// #16
    352c:	subs	w10, w11, w10
    3530:	cmp	w9, w10
    3534:	b.le	3600 <send_tree+0x964>
    3538:	ldr	x8, [sp, #104]
    353c:	ldrh	w9, [x8, #2820]
    3540:	str	w9, [sp, #8]
    3544:	ldr	w9, [sp, #8]
    3548:	and	w9, w9, #0xffff
    354c:	ldr	x8, [sp, #104]
    3550:	ldr	w10, [x8, #5940]
    3554:	lsl	w9, w9, w10
    3558:	ldr	x8, [sp, #104]
    355c:	ldrh	w10, [x8, #5936]
    3560:	orr	w9, w10, w9
    3564:	strh	w9, [x8, #5936]
    3568:	ldr	x8, [sp, #104]
    356c:	ldrh	w9, [x8, #5936]
    3570:	and	w9, w9, #0xff
    3574:	ldr	x8, [sp, #104]
    3578:	ldr	x8, [x8, #16]
    357c:	ldr	x11, [sp, #104]
    3580:	ldr	x12, [x11, #40]
    3584:	add	x13, x12, #0x1
    3588:	str	x13, [x11, #40]
    358c:	add	x8, x8, x12
    3590:	strb	w9, [x8]
    3594:	ldr	x8, [sp, #104]
    3598:	ldrh	w9, [x8, #5936]
    359c:	asr	w9, w9, #8
    35a0:	ldr	x8, [sp, #104]
    35a4:	ldr	x8, [x8, #16]
    35a8:	ldr	x11, [sp, #104]
    35ac:	ldr	x12, [x11, #40]
    35b0:	add	x13, x12, #0x1
    35b4:	str	x13, [x11, #40]
    35b8:	add	x8, x8, x12
    35bc:	strb	w9, [x8]
    35c0:	ldr	w9, [sp, #8]
    35c4:	and	w9, w9, #0xffff
    35c8:	ldr	x8, [sp, #104]
    35cc:	ldr	w10, [x8, #5940]
    35d0:	mov	w14, #0x10                  	// #16
    35d4:	subs	w10, w14, w10
    35d8:	asr	w9, w9, w10
    35dc:	ldr	x8, [sp, #104]
    35e0:	strh	w9, [x8, #5936]
    35e4:	ldr	w9, [sp, #12]
    35e8:	subs	w9, w9, #0x10
    35ec:	ldr	x8, [sp, #104]
    35f0:	ldr	w10, [x8, #5940]
    35f4:	add	w9, w10, w9
    35f8:	str	w9, [x8, #5940]
    35fc:	b	3638 <send_tree+0x99c>
    3600:	ldr	x8, [sp, #104]
    3604:	ldrh	w9, [x8, #2820]
    3608:	ldr	x8, [sp, #104]
    360c:	ldr	w10, [x8, #5940]
    3610:	lsl	w9, w9, w10
    3614:	ldr	x8, [sp, #104]
    3618:	ldrh	w10, [x8, #5936]
    361c:	orr	w9, w10, w9
    3620:	strh	w9, [x8, #5936]
    3624:	ldr	w9, [sp, #12]
    3628:	ldr	x8, [sp, #104]
    362c:	ldr	w10, [x8, #5940]
    3630:	add	w9, w10, w9
    3634:	str	w9, [x8, #5940]
    3638:	mov	w8, #0x7                   	// #7
    363c:	str	w8, [sp, #4]
    3640:	ldr	x9, [sp, #104]
    3644:	ldr	w8, [x9, #5940]
    3648:	ldr	w10, [sp, #4]
    364c:	mov	w11, #0x10                  	// #16
    3650:	subs	w10, w11, w10
    3654:	cmp	w8, w10
    3658:	b.le	3724 <send_tree+0xa88>
    365c:	ldr	w8, [sp, #72]
    3660:	subs	w8, w8, #0xb
    3664:	str	w8, [sp]
    3668:	ldr	w8, [sp]
    366c:	and	w8, w8, #0xffff
    3670:	ldr	x9, [sp, #104]
    3674:	ldr	w10, [x9, #5940]
    3678:	lsl	w8, w8, w10
    367c:	ldr	x9, [sp, #104]
    3680:	ldrh	w10, [x9, #5936]
    3684:	orr	w8, w10, w8
    3688:	strh	w8, [x9, #5936]
    368c:	ldr	x9, [sp, #104]
    3690:	ldrh	w8, [x9, #5936]
    3694:	and	w8, w8, #0xff
    3698:	ldr	x9, [sp, #104]
    369c:	ldr	x9, [x9, #16]
    36a0:	ldr	x11, [sp, #104]
    36a4:	ldr	x12, [x11, #40]
    36a8:	add	x13, x12, #0x1
    36ac:	str	x13, [x11, #40]
    36b0:	add	x9, x9, x12
    36b4:	strb	w8, [x9]
    36b8:	ldr	x9, [sp, #104]
    36bc:	ldrh	w8, [x9, #5936]
    36c0:	asr	w8, w8, #8
    36c4:	ldr	x9, [sp, #104]
    36c8:	ldr	x9, [x9, #16]
    36cc:	ldr	x11, [sp, #104]
    36d0:	ldr	x12, [x11, #40]
    36d4:	add	x13, x12, #0x1
    36d8:	str	x13, [x11, #40]
    36dc:	add	x9, x9, x12
    36e0:	strb	w8, [x9]
    36e4:	ldr	w8, [sp]
    36e8:	and	w8, w8, #0xffff
    36ec:	ldr	x9, [sp, #104]
    36f0:	ldr	w10, [x9, #5940]
    36f4:	mov	w14, #0x10                  	// #16
    36f8:	subs	w10, w14, w10
    36fc:	asr	w8, w8, w10
    3700:	ldr	x9, [sp, #104]
    3704:	strh	w8, [x9, #5936]
    3708:	ldr	w8, [sp, #4]
    370c:	subs	w8, w8, #0x10
    3710:	ldr	x9, [sp, #104]
    3714:	ldr	w10, [x9, #5940]
    3718:	add	w8, w10, w8
    371c:	str	w8, [x9, #5940]
    3720:	b	3760 <send_tree+0xac4>
    3724:	ldr	w8, [sp, #72]
    3728:	subs	w8, w8, #0xb
    372c:	and	w8, w8, #0xffff
    3730:	ldr	x9, [sp, #104]
    3734:	ldr	w10, [x9, #5940]
    3738:	lsl	w8, w8, w10
    373c:	ldr	x9, [sp, #104]
    3740:	ldrh	w10, [x9, #5936]
    3744:	orr	w8, w10, w8
    3748:	strh	w8, [x9, #5936]
    374c:	ldr	w8, [sp, #4]
    3750:	ldr	x9, [sp, #104]
    3754:	ldr	w10, [x9, #5940]
    3758:	add	w8, w10, w8
    375c:	str	w8, [x9, #5940]
    3760:	str	wzr, [sp, #72]
    3764:	ldr	w8, [sp, #80]
    3768:	str	w8, [sp, #84]
    376c:	ldr	w8, [sp, #76]
    3770:	cbnz	w8, 3788 <send_tree+0xaec>
    3774:	mov	w8, #0x8a                  	// #138
    3778:	str	w8, [sp, #68]
    377c:	mov	w8, #0x3                   	// #3
    3780:	str	w8, [sp, #64]
    3784:	b	37bc <send_tree+0xb20>
    3788:	ldr	w8, [sp, #80]
    378c:	ldr	w9, [sp, #76]
    3790:	cmp	w8, w9
    3794:	b.ne	37ac <send_tree+0xb10>  // b.any
    3798:	mov	w8, #0x6                   	// #6
    379c:	str	w8, [sp, #68]
    37a0:	mov	w8, #0x3                   	// #3
    37a4:	str	w8, [sp, #64]
    37a8:	b	37bc <send_tree+0xb20>
    37ac:	mov	w8, #0x7                   	// #7
    37b0:	str	w8, [sp, #68]
    37b4:	mov	w8, #0x4                   	// #4
    37b8:	str	w8, [sp, #64]
    37bc:	ldr	w8, [sp, #88]
    37c0:	add	w8, w8, #0x1
    37c4:	str	w8, [sp, #88]
    37c8:	b	2cf0 <send_tree+0x54>
    37cc:	add	sp, sp, #0x70
    37d0:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	sub	sp, sp, #0x10
  10:	str	xzr, [sp, #8]
  14:	ldr	x8, [sp, #8]
  18:	add	x8, x8, #0x1
  1c:	str	x8, [sp, #8]
  20:	ldr	x8, [sp, #8]
  24:	add	x8, x8, #0x8
  28:	str	x8, [sp, #8]
  2c:	ldr	x8, [sp, #8]
  30:	add	x8, x8, #0x20
  34:	str	x8, [sp, #8]
  38:	ldr	x8, [sp, #8]
  3c:	add	x8, x8, #0x80
  40:	str	x8, [sp, #8]
  44:	ldr	x0, [sp, #8]
  48:	add	sp, sp, #0x10
  4c:	ret

0000000000000050 <zError>:
  50:	sub	sp, sp, #0x10
  54:	mov	w8, #0x2                   	// #2
  58:	adrp	x9, 0 <zlibVersion>
  5c:	add	x9, x9, #0x0
  60:	str	w0, [sp, #12]
  64:	ldr	w10, [sp, #12]
  68:	subs	w8, w8, w10
  6c:	mov	w1, w8
  70:	sxtw	x11, w1
  74:	mov	x12, #0x8                   	// #8
  78:	mul	x11, x12, x11
  7c:	add	x9, x9, x11
  80:	ldr	x0, [x9]
  84:	add	sp, sp, #0x10
  88:	ret

000000000000008c <zcalloc>:
  8c:	sub	sp, sp, #0x20
  90:	stp	x29, x30, [sp, #16]
  94:	add	x29, sp, #0x10
  98:	str	x0, [sp, #8]
  9c:	str	w1, [sp, #4]
  a0:	str	w2, [sp]
  a4:	ldr	w8, [sp, #4]
  a8:	ldr	w9, [sp]
  ac:	mul	w8, w8, w9
  b0:	mov	w10, w8
  b4:	ubfx	x0, x10, #0, #32
  b8:	bl	0 <malloc>
  bc:	ldp	x29, x30, [sp, #16]
  c0:	add	sp, sp, #0x20
  c4:	ret

00000000000000c8 <zcfree>:
  c8:	sub	sp, sp, #0x20
  cc:	stp	x29, x30, [sp, #16]
  d0:	add	x29, sp, #0x10
  d4:	str	x0, [sp, #8]
  d8:	str	x1, [sp]
  dc:	ldr	x0, [sp]
  e0:	bl	0 <free>
  e4:	ldp	x29, x30, [sp, #16]
  e8:	add	sp, sp, #0x20
  ec:	ret

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	sub	sp, sp, #0xd0
   4:	stp	x29, x30, [sp, #192]
   8:	add	x29, sp, #0xc0
   c:	mov	w8, #0xffffffff            	// #-1
  10:	mov	x9, xzr
  14:	adrp	x10, 0 <compress2>
  18:	add	x10, x10, #0x0
  1c:	mov	w11, #0x70                  	// #112
  20:	add	x12, sp, #0x20
  24:	stur	x0, [x29, #-16]
  28:	stur	x1, [x29, #-24]
  2c:	stur	x2, [x29, #-32]
  30:	stur	x3, [x29, #-40]
  34:	stur	w4, [x29, #-44]
  38:	str	w8, [sp, #24]
  3c:	ldur	x13, [x29, #-24]
  40:	ldr	x13, [x13]
  44:	str	x13, [sp, #16]
  48:	ldur	x13, [x29, #-24]
  4c:	str	xzr, [x13]
  50:	str	x9, [x12, #64]
  54:	str	x9, [x12, #72]
  58:	str	x9, [x12, #80]
  5c:	ldur	w1, [x29, #-44]
  60:	mov	x0, x12
  64:	mov	x2, x10
  68:	mov	w3, w11
  6c:	bl	0 <deflateInit_>
  70:	str	w0, [sp, #28]
  74:	ldr	w8, [sp, #28]
  78:	cbz	w8, 88 <compress2+0x88>
  7c:	ldr	w8, [sp, #28]
  80:	stur	w8, [x29, #-4]
  84:	b	198 <compress2+0x198>
  88:	ldur	x8, [x29, #-16]
  8c:	add	x9, sp, #0x20
  90:	str	x8, [x9, #24]
  94:	str	wzr, [sp, #64]
  98:	ldur	x8, [x29, #-32]
  9c:	str	x8, [sp, #32]
  a0:	str	wzr, [sp, #40]
  a4:	ldr	w8, [sp, #64]
  a8:	cbnz	w8, ec <compress2+0xec>
  ac:	ldr	x8, [sp, #16]
  b0:	mov	x9, #0xffffffff            	// #4294967295
  b4:	cmp	x8, x9
  b8:	b.ls	c8 <compress2+0xc8>  // b.plast
  bc:	mov	w8, #0xffffffff            	// #-1
  c0:	str	w8, [sp, #12]
  c4:	b	d0 <compress2+0xd0>
  c8:	ldr	x8, [sp, #16]
  cc:	str	w8, [sp, #12]
  d0:	ldr	w8, [sp, #12]
  d4:	str	w8, [sp, #64]
  d8:	ldr	w8, [sp, #64]
  dc:	mov	w9, w8
  e0:	ldr	x10, [sp, #16]
  e4:	subs	x9, x10, x9
  e8:	str	x9, [sp, #16]
  ec:	ldr	w8, [sp, #40]
  f0:	cbnz	w8, 134 <compress2+0x134>
  f4:	ldur	x8, [x29, #-40]
  f8:	mov	x9, #0xffffffff            	// #4294967295
  fc:	cmp	x8, x9
 100:	b.ls	110 <compress2+0x110>  // b.plast
 104:	mov	w8, #0xffffffff            	// #-1
 108:	str	w8, [sp, #8]
 10c:	b	118 <compress2+0x118>
 110:	ldur	x8, [x29, #-40]
 114:	str	w8, [sp, #8]
 118:	ldr	w8, [sp, #8]
 11c:	str	w8, [sp, #40]
 120:	ldr	w8, [sp, #40]
 124:	mov	w9, w8
 128:	ldur	x10, [x29, #-40]
 12c:	subs	x9, x10, x9
 130:	stur	x9, [x29, #-40]
 134:	ldur	x8, [x29, #-40]
 138:	mov	w9, #0x4                   	// #4
 13c:	mov	w10, wzr
 140:	cmp	x8, #0x0
 144:	csel	w1, w10, w9, ne  // ne = any
 148:	add	x0, sp, #0x20
 14c:	bl	0 <deflate>
 150:	str	w0, [sp, #28]
 154:	ldr	w8, [sp, #28]
 158:	cbz	w8, a4 <compress2+0xa4>
 15c:	add	x0, sp, #0x20
 160:	ldr	x8, [sp, #72]
 164:	ldur	x9, [x29, #-24]
 168:	str	x8, [x9]
 16c:	bl	0 <deflateEnd>
 170:	ldr	w10, [sp, #28]
 174:	cmp	w10, #0x1
 178:	b.ne	188 <compress2+0x188>  // b.any
 17c:	mov	w8, wzr
 180:	str	w8, [sp, #4]
 184:	b	190 <compress2+0x190>
 188:	ldr	w8, [sp, #28]
 18c:	str	w8, [sp, #4]
 190:	ldr	w8, [sp, #4]
 194:	stur	w8, [x29, #-4]
 198:	ldur	w0, [x29, #-4]
 19c:	ldp	x29, x30, [sp, #192]
 1a0:	add	sp, sp, #0xd0
 1a4:	ret

00000000000001a8 <compress>:
 1a8:	sub	sp, sp, #0x30
 1ac:	stp	x29, x30, [sp, #32]
 1b0:	add	x29, sp, #0x20
 1b4:	mov	w4, #0xffffffff            	// #-1
 1b8:	stur	x0, [x29, #-8]
 1bc:	str	x1, [sp, #16]
 1c0:	str	x2, [sp, #8]
 1c4:	str	x3, [sp]
 1c8:	ldur	x0, [x29, #-8]
 1cc:	ldr	x1, [sp, #16]
 1d0:	ldr	x2, [sp, #8]
 1d4:	ldr	x3, [sp]
 1d8:	bl	0 <compress2>
 1dc:	ldp	x29, x30, [sp, #32]
 1e0:	add	sp, sp, #0x30
 1e4:	ret

00000000000001e8 <compressBound>:
 1e8:	sub	sp, sp, #0x10
 1ec:	str	x0, [sp, #8]
 1f0:	ldr	x8, [sp, #8]
 1f4:	ldr	x9, [sp, #8]
 1f8:	add	x8, x8, x9, lsr #12
 1fc:	ldr	x9, [sp, #8]
 200:	add	x8, x8, x9, lsr #14
 204:	ldr	x9, [sp, #8]
 208:	add	x8, x8, x9, lsr #25
 20c:	add	x0, x8, #0xd
 210:	add	sp, sp, #0x10
 214:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	sub	sp, sp, #0xf0
   4:	stp	x29, x30, [sp, #224]
   8:	add	x29, sp, #0xe0
   c:	sub	x8, x29, #0x28
  10:	mov	w9, #0xffffffff            	// #-1
  14:	str	x0, [x8, #24]
  18:	str	x1, [x8, #16]
  1c:	str	x2, [x8, #8]
  20:	str	x3, [x8]
  24:	str	w9, [sp, #64]
  28:	ldr	x10, [x8]
  2c:	ldr	x10, [x10]
  30:	str	x10, [sp, #56]
  34:	ldr	x10, [x8, #16]
  38:	ldr	x10, [x10]
  3c:	str	x8, [sp, #32]
  40:	cbz	x10, 60 <uncompress2+0x60>
  44:	ldr	x8, [sp, #32]
  48:	ldr	x9, [x8, #16]
  4c:	ldr	x9, [x9]
  50:	str	x9, [sp, #48]
  54:	ldr	x9, [x8, #16]
  58:	str	xzr, [x9]
  5c:	b	74 <uncompress2+0x74>
  60:	mov	x8, #0x1                   	// #1
  64:	str	x8, [sp, #48]
  68:	add	x8, sp, #0x2f
  6c:	ldr	x9, [sp, #32]
  70:	str	x8, [x9, #24]
  74:	ldr	x8, [sp, #32]
  78:	ldr	x9, [x8, #8]
  7c:	add	x10, sp, #0x48
  80:	str	x9, [sp, #72]
  84:	str	wzr, [sp, #80]
  88:	mov	x9, xzr
  8c:	str	x9, [x10, #64]
  90:	str	x9, [x10, #72]
  94:	str	x9, [x10, #80]
  98:	mov	x0, x10
  9c:	adrp	x1, 0 <uncompress2>
  a0:	add	x1, x1, #0x0
  a4:	mov	w2, #0x70                  	// #112
  a8:	bl	0 <inflateInit_>
  ac:	str	w0, [sp, #68]
  b0:	ldr	w11, [sp, #68]
  b4:	cbz	w11, c8 <uncompress2+0xc8>
  b8:	ldr	w8, [sp, #68]
  bc:	ldr	x9, [sp, #32]
  c0:	str	w8, [x9, #36]
  c4:	b	27c <uncompress2+0x27c>
  c8:	ldr	x8, [sp, #32]
  cc:	ldr	x9, [x8, #24]
  d0:	add	x10, sp, #0x48
  d4:	str	x9, [x10, #24]
  d8:	str	wzr, [sp, #104]
  dc:	ldr	w8, [sp, #104]
  e0:	cbnz	w8, 124 <uncompress2+0x124>
  e4:	ldr	x8, [sp, #48]
  e8:	mov	x9, #0xffffffff            	// #4294967295
  ec:	cmp	x8, x9
  f0:	b.ls	100 <uncompress2+0x100>  // b.plast
  f4:	mov	w8, #0xffffffff            	// #-1
  f8:	str	w8, [sp, #28]
  fc:	b	108 <uncompress2+0x108>
 100:	ldr	x8, [sp, #48]
 104:	str	w8, [sp, #28]
 108:	ldr	w8, [sp, #28]
 10c:	str	w8, [sp, #104]
 110:	ldr	w8, [sp, #104]
 114:	mov	w9, w8
 118:	ldr	x10, [sp, #48]
 11c:	subs	x9, x10, x9
 120:	str	x9, [sp, #48]
 124:	ldr	w8, [sp, #80]
 128:	cbnz	w8, 16c <uncompress2+0x16c>
 12c:	ldr	x8, [sp, #56]
 130:	mov	x9, #0xffffffff            	// #4294967295
 134:	cmp	x8, x9
 138:	b.ls	148 <uncompress2+0x148>  // b.plast
 13c:	mov	w8, #0xffffffff            	// #-1
 140:	str	w8, [sp, #24]
 144:	b	150 <uncompress2+0x150>
 148:	ldr	x8, [sp, #56]
 14c:	str	w8, [sp, #24]
 150:	ldr	w8, [sp, #24]
 154:	str	w8, [sp, #80]
 158:	ldr	w8, [sp, #80]
 15c:	mov	w9, w8
 160:	ldr	x10, [sp, #56]
 164:	subs	x9, x10, x9
 168:	str	x9, [sp, #56]
 16c:	add	x0, sp, #0x48
 170:	mov	w8, wzr
 174:	mov	w1, w8
 178:	bl	0 <inflate>
 17c:	str	w0, [sp, #68]
 180:	ldr	w8, [sp, #68]
 184:	cbz	w8, dc <uncompress2+0xdc>
 188:	ldr	x8, [sp, #56]
 18c:	ldr	w9, [sp, #80]
 190:	mov	w10, w9
 194:	add	x8, x8, x10
 198:	ldr	x10, [sp, #32]
 19c:	ldr	x11, [x10]
 1a0:	ldr	x12, [x11]
 1a4:	subs	x8, x12, x8
 1a8:	str	x8, [x11]
 1ac:	ldr	x8, [x10, #24]
 1b0:	add	x11, sp, #0x2f
 1b4:	cmp	x8, x11
 1b8:	b.eq	1d0 <uncompress2+0x1d0>  // b.none
 1bc:	ldr	x8, [sp, #112]
 1c0:	ldr	x9, [sp, #32]
 1c4:	ldr	x10, [x9, #16]
 1c8:	str	x8, [x10]
 1cc:	b	1f0 <uncompress2+0x1f0>
 1d0:	ldr	x8, [sp, #112]
 1d4:	cbz	x8, 1f0 <uncompress2+0x1f0>
 1d8:	ldr	w8, [sp, #68]
 1dc:	mov	w9, #0xfffffffb            	// #-5
 1e0:	cmp	w8, w9
 1e4:	b.ne	1f0 <uncompress2+0x1f0>  // b.any
 1e8:	mov	x8, #0x1                   	// #1
 1ec:	str	x8, [sp, #48]
 1f0:	add	x0, sp, #0x48
 1f4:	bl	0 <inflateEnd>
 1f8:	ldr	w8, [sp, #68]
 1fc:	cmp	w8, #0x1
 200:	b.ne	210 <uncompress2+0x210>  // b.any
 204:	mov	w8, wzr
 208:	str	w8, [sp, #20]
 20c:	b	270 <uncompress2+0x270>
 210:	ldr	w8, [sp, #68]
 214:	cmp	w8, #0x2
 218:	b.ne	228 <uncompress2+0x228>  // b.any
 21c:	mov	w8, #0xfffffffd            	// #-3
 220:	str	w8, [sp, #16]
 224:	b	268 <uncompress2+0x268>
 228:	ldr	w8, [sp, #68]
 22c:	mov	w9, #0xfffffffb            	// #-5
 230:	cmp	w8, w9
 234:	b.ne	258 <uncompress2+0x258>  // b.any
 238:	ldr	x8, [sp, #48]
 23c:	ldr	w9, [sp, #104]
 240:	mov	w10, w9
 244:	add	x8, x8, x10
 248:	cbz	x8, 258 <uncompress2+0x258>
 24c:	mov	w8, #0xfffffffd            	// #-3
 250:	str	w8, [sp, #12]
 254:	b	260 <uncompress2+0x260>
 258:	ldr	w8, [sp, #68]
 25c:	str	w8, [sp, #12]
 260:	ldr	w8, [sp, #12]
 264:	str	w8, [sp, #16]
 268:	ldr	w8, [sp, #16]
 26c:	str	w8, [sp, #20]
 270:	ldr	w8, [sp, #20]
 274:	ldr	x9, [sp, #32]
 278:	str	w8, [x9, #36]
 27c:	ldr	x8, [sp, #32]
 280:	ldr	w0, [x8, #36]
 284:	ldp	x29, x30, [sp, #224]
 288:	add	sp, sp, #0xf0
 28c:	ret

0000000000000290 <uncompress>:
 290:	sub	sp, sp, #0x30
 294:	stp	x29, x30, [sp, #32]
 298:	add	x29, sp, #0x20
 29c:	mov	x8, sp
 2a0:	stur	x0, [x29, #-8]
 2a4:	str	x1, [sp, #16]
 2a8:	str	x2, [sp, #8]
 2ac:	str	x3, [sp]
 2b0:	ldur	x0, [x29, #-8]
 2b4:	ldr	x1, [sp, #16]
 2b8:	ldr	x2, [sp, #8]
 2bc:	mov	x3, x8
 2c0:	bl	0 <uncompress2>
 2c4:	ldp	x29, x30, [sp, #32]
 2c8:	add	sp, sp, #0x30
 2cc:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	str	x0, [sp, #16]
  10:	ldr	x8, [sp, #16]
  14:	cbnz	x8, 24 <gzclose+0x24>
  18:	mov	w8, #0xfffffffe            	// #-2
  1c:	stur	w8, [x29, #-4]
  20:	b	64 <gzclose+0x64>
  24:	ldr	x8, [sp, #16]
  28:	str	x8, [sp, #8]
  2c:	ldr	x8, [sp, #8]
  30:	ldr	w9, [x8, #24]
  34:	mov	w10, #0x1c4f                	// #7247
  38:	cmp	w9, w10
  3c:	b.ne	50 <gzclose+0x50>  // b.any
  40:	ldr	x0, [sp, #16]
  44:	bl	0 <gzclose_r>
  48:	str	w0, [sp, #4]
  4c:	b	5c <gzclose+0x5c>
  50:	ldr	x0, [sp, #16]
  54:	bl	0 <gzclose_w>
  58:	str	w0, [sp, #4]
  5c:	ldr	w8, [sp, #4]
  60:	stur	w8, [x29, #-4]
  64:	ldur	w0, [x29, #-4]
  68:	ldp	x29, x30, [sp, #32]
  6c:	add	sp, sp, #0x30
  70:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzopen>:
       0:	sub	sp, sp, #0x20
       4:	stp	x29, x30, [sp, #16]
       8:	add	x29, sp, #0x10
       c:	mov	w8, #0xffffffff            	// #-1
      10:	str	x0, [sp, #8]
      14:	str	x1, [sp]
      18:	ldr	x0, [sp, #8]
      1c:	ldr	x2, [sp]
      20:	mov	w1, w8
      24:	bl	34 <gz_open>
      28:	ldp	x29, x30, [sp, #16]
      2c:	add	sp, sp, #0x20
      30:	ret

0000000000000034 <gz_open>:
      34:	sub	sp, sp, #0x70
      38:	stp	x29, x30, [sp, #96]
      3c:	add	x29, sp, #0x60
      40:	stur	x0, [x29, #-16]
      44:	stur	w1, [x29, #-20]
      48:	stur	x2, [x29, #-32]
      4c:	str	wzr, [sp, #40]
      50:	str	wzr, [sp, #36]
      54:	ldur	x8, [x29, #-16]
      58:	cbnz	x8, 68 <gz_open+0x34>
      5c:	mov	x8, xzr
      60:	stur	x8, [x29, #-8]
      64:	b	458 <gz_open+0x424>
      68:	mov	x0, #0xe8                  	// #232
      6c:	bl	0 <malloc>
      70:	stur	x0, [x29, #-40]
      74:	ldur	x8, [x29, #-40]
      78:	cbnz	x8, 88 <gz_open+0x54>
      7c:	mov	x8, xzr
      80:	stur	x8, [x29, #-8]
      84:	b	458 <gz_open+0x424>
      88:	ldur	x8, [x29, #-40]
      8c:	str	wzr, [x8, #40]
      90:	ldur	x8, [x29, #-40]
      94:	mov	w9, #0x2000                	// #8192
      98:	str	w9, [x8, #44]
      9c:	ldur	x8, [x29, #-40]
      a0:	mov	x10, xzr
      a4:	str	x10, [x8, #112]
      a8:	ldur	x8, [x29, #-40]
      ac:	str	wzr, [x8, #24]
      b0:	ldur	x8, [x29, #-40]
      b4:	mov	w9, #0xffffffff            	// #-1
      b8:	str	w9, [x8, #88]
      bc:	ldur	x8, [x29, #-40]
      c0:	str	wzr, [x8, #92]
      c4:	ldur	x8, [x29, #-40]
      c8:	str	wzr, [x8, #64]
      cc:	ldur	x8, [x29, #-32]
      d0:	ldrb	w9, [x8]
      d4:	cbz	w9, 208 <gz_open+0x1d4>
      d8:	ldur	x8, [x29, #-32]
      dc:	ldrb	w9, [x8]
      e0:	cmp	w9, #0x30
      e4:	b.lt	110 <gz_open+0xdc>  // b.tstop
      e8:	ldur	x8, [x29, #-32]
      ec:	ldrb	w9, [x8]
      f0:	cmp	w9, #0x39
      f4:	b.gt	110 <gz_open+0xdc>
      f8:	ldur	x8, [x29, #-32]
      fc:	ldrb	w9, [x8]
     100:	subs	w9, w9, #0x30
     104:	ldur	x8, [x29, #-40]
     108:	str	w9, [x8, #88]
     10c:	b	1f8 <gz_open+0x1c4>
     110:	ldur	x8, [x29, #-32]
     114:	ldrb	w9, [x8]
     118:	subs	w9, w9, #0x2b
     11c:	mov	w8, w9
     120:	ubfx	x8, x8, #0, #32
     124:	cmp	x8, #0x4d
     128:	str	x8, [sp, #24]
     12c:	b.hi	1f8 <gz_open+0x1c4>  // b.pmore
     130:	adrp	x8, 0 <gzopen>
     134:	add	x8, x8, #0x0
     138:	ldr	x11, [sp, #24]
     13c:	ldrsw	x10, [x8, x11, lsl #2]
     140:	add	x9, x8, x10
     144:	br	x9
     148:	ldur	x8, [x29, #-40]
     14c:	mov	w9, #0x1c4f                	// #7247
     150:	str	w9, [x8, #24]
     154:	b	1f8 <gz_open+0x1c4>
     158:	ldur	x8, [x29, #-40]
     15c:	mov	w9, #0x79b1                	// #31153
     160:	str	w9, [x8, #24]
     164:	b	1f8 <gz_open+0x1c4>
     168:	ldur	x8, [x29, #-40]
     16c:	mov	w9, #0x1                   	// #1
     170:	str	w9, [x8, #24]
     174:	b	1f8 <gz_open+0x1c4>
     178:	ldur	x0, [x29, #-40]
     17c:	bl	0 <free>
     180:	mov	x8, xzr
     184:	stur	x8, [x29, #-8]
     188:	b	458 <gz_open+0x424>
     18c:	b	1f8 <gz_open+0x1c4>
     190:	mov	w8, #0x1                   	// #1
     194:	str	w8, [sp, #40]
     198:	b	1f8 <gz_open+0x1c4>
     19c:	mov	w8, #0x1                   	// #1
     1a0:	str	w8, [sp, #36]
     1a4:	b	1f8 <gz_open+0x1c4>
     1a8:	ldur	x8, [x29, #-40]
     1ac:	mov	w9, #0x1                   	// #1
     1b0:	str	w9, [x8, #92]
     1b4:	b	1f8 <gz_open+0x1c4>
     1b8:	ldur	x8, [x29, #-40]
     1bc:	mov	w9, #0x2                   	// #2
     1c0:	str	w9, [x8, #92]
     1c4:	b	1f8 <gz_open+0x1c4>
     1c8:	ldur	x8, [x29, #-40]
     1cc:	mov	w9, #0x3                   	// #3
     1d0:	str	w9, [x8, #92]
     1d4:	b	1f8 <gz_open+0x1c4>
     1d8:	ldur	x8, [x29, #-40]
     1dc:	mov	w9, #0x4                   	// #4
     1e0:	str	w9, [x8, #92]
     1e4:	b	1f8 <gz_open+0x1c4>
     1e8:	ldur	x8, [x29, #-40]
     1ec:	mov	w9, #0x1                   	// #1
     1f0:	str	w9, [x8, #64]
     1f4:	b	1f8 <gz_open+0x1c4>
     1f8:	ldur	x8, [x29, #-32]
     1fc:	add	x8, x8, #0x1
     200:	stur	x8, [x29, #-32]
     204:	b	cc <gz_open+0x98>
     208:	ldur	x8, [x29, #-40]
     20c:	ldr	w9, [x8, #24]
     210:	cbnz	w9, 228 <gz_open+0x1f4>
     214:	ldur	x0, [x29, #-40]
     218:	bl	0 <free>
     21c:	mov	x8, xzr
     220:	stur	x8, [x29, #-8]
     224:	b	458 <gz_open+0x424>
     228:	ldur	x8, [x29, #-40]
     22c:	ldr	w9, [x8, #24]
     230:	mov	w10, #0x1c4f                	// #7247
     234:	cmp	w9, w10
     238:	b.ne	268 <gz_open+0x234>  // b.any
     23c:	ldur	x8, [x29, #-40]
     240:	ldr	w9, [x8, #64]
     244:	cbz	w9, 25c <gz_open+0x228>
     248:	ldur	x0, [x29, #-40]
     24c:	bl	0 <free>
     250:	mov	x8, xzr
     254:	stur	x8, [x29, #-8]
     258:	b	458 <gz_open+0x424>
     25c:	ldur	x8, [x29, #-40]
     260:	mov	w9, #0x1                   	// #1
     264:	str	w9, [x8, #64]
     268:	ldur	x0, [x29, #-16]
     26c:	bl	0 <strlen>
     270:	str	x0, [sp, #48]
     274:	ldr	x8, [sp, #48]
     278:	add	x0, x8, #0x1
     27c:	bl	0 <malloc>
     280:	ldur	x8, [x29, #-40]
     284:	str	x0, [x8, #32]
     288:	ldur	x8, [x29, #-40]
     28c:	ldr	x8, [x8, #32]
     290:	cbnz	x8, 2a8 <gz_open+0x274>
     294:	ldur	x0, [x29, #-40]
     298:	bl	0 <free>
     29c:	mov	x8, xzr
     2a0:	stur	x8, [x29, #-8]
     2a4:	b	458 <gz_open+0x424>
     2a8:	ldur	x8, [x29, #-40]
     2ac:	ldr	x0, [x8, #32]
     2b0:	ldr	x8, [sp, #48]
     2b4:	add	x1, x8, #0x1
     2b8:	ldur	x3, [x29, #-16]
     2bc:	adrp	x2, 0 <gzopen>
     2c0:	add	x2, x2, #0x0
     2c4:	bl	0 <snprintf>
     2c8:	ldr	w9, [sp, #40]
     2cc:	mov	w10, wzr
     2d0:	mov	w11, #0x80000               	// #524288
     2d4:	cmp	w9, #0x0
     2d8:	csel	w9, w11, w10, ne  // ne = any
     2dc:	orr	w9, w10, w9
     2e0:	ldur	x8, [x29, #-40]
     2e4:	ldr	w10, [x8, #24]
     2e8:	mov	w11, #0x1c4f                	// #7247
     2ec:	cmp	w10, w11
     2f0:	str	w9, [sp, #20]
     2f4:	b.ne	304 <gz_open+0x2d0>  // b.any
     2f8:	mov	w8, wzr
     2fc:	str	w8, [sp, #16]
     300:	b	344 <gz_open+0x310>
     304:	ldr	w8, [sp, #36]
     308:	mov	w9, wzr
     30c:	mov	w10, #0x80                  	// #128
     310:	cmp	w8, #0x0
     314:	csel	w8, w10, w9, ne  // ne = any
     318:	mov	w9, #0x41                  	// #65
     31c:	orr	w8, w9, w8
     320:	ldur	x11, [x29, #-40]
     324:	ldr	w9, [x11, #24]
     328:	mov	w10, #0x79b1                	// #31153
     32c:	mov	w12, #0x400                 	// #1024
     330:	mov	w13, #0x200                 	// #512
     334:	cmp	w9, w10
     338:	csel	w9, w13, w12, eq  // eq = none
     33c:	orr	w8, w8, w9
     340:	str	w8, [sp, #16]
     344:	ldr	w8, [sp, #16]
     348:	ldr	w9, [sp, #20]
     34c:	orr	w8, w9, w8
     350:	str	w8, [sp, #44]
     354:	ldur	w8, [x29, #-20]
     358:	mov	w10, #0xffffffff            	// #-1
     35c:	cmp	w8, w10
     360:	b.le	370 <gz_open+0x33c>
     364:	ldur	w8, [x29, #-20]
     368:	str	w8, [sp, #12]
     36c:	b	384 <gz_open+0x350>
     370:	ldur	x0, [x29, #-16]
     374:	ldr	w1, [sp, #44]
     378:	mov	w2, #0x1b6                 	// #438
     37c:	bl	0 <open>
     380:	str	w0, [sp, #12]
     384:	ldr	w8, [sp, #12]
     388:	ldur	x9, [x29, #-40]
     38c:	str	w8, [x9, #28]
     390:	ldur	x9, [x29, #-40]
     394:	ldr	w8, [x9, #28]
     398:	mov	w10, #0xffffffff            	// #-1
     39c:	cmp	w8, w10
     3a0:	b.ne	3c4 <gz_open+0x390>  // b.any
     3a4:	ldur	x8, [x29, #-40]
     3a8:	ldr	x0, [x8, #32]
     3ac:	bl	0 <free>
     3b0:	ldur	x0, [x29, #-40]
     3b4:	bl	0 <free>
     3b8:	mov	x8, xzr
     3bc:	stur	x8, [x29, #-8]
     3c0:	b	458 <gz_open+0x424>
     3c4:	ldur	x8, [x29, #-40]
     3c8:	ldr	w9, [x8, #24]
     3cc:	cmp	w9, #0x1
     3d0:	b.ne	3f8 <gz_open+0x3c4>  // b.any
     3d4:	ldur	x8, [x29, #-40]
     3d8:	ldr	w0, [x8, #28]
     3dc:	mov	x8, xzr
     3e0:	mov	x1, x8
     3e4:	mov	w2, #0x2                   	// #2
     3e8:	bl	0 <lseek64>
     3ec:	ldur	x8, [x29, #-40]
     3f0:	mov	w9, #0x79b1                	// #31153
     3f4:	str	w9, [x8, #24]
     3f8:	ldur	x8, [x29, #-40]
     3fc:	ldr	w9, [x8, #24]
     400:	mov	w10, #0x1c4f                	// #7247
     404:	cmp	w9, w10
     408:	b.ne	448 <gz_open+0x414>  // b.any
     40c:	ldur	x8, [x29, #-40]
     410:	ldr	w0, [x8, #28]
     414:	mov	x8, xzr
     418:	mov	x1, x8
     41c:	mov	w2, #0x1                   	// #1
     420:	bl	0 <lseek64>
     424:	ldur	x8, [x29, #-40]
     428:	str	x0, [x8, #72]
     42c:	ldur	x8, [x29, #-40]
     430:	ldr	x8, [x8, #72]
     434:	mov	x9, #0xffffffffffffffff    	// #-1
     438:	cmp	x8, x9
     43c:	b.ne	448 <gz_open+0x414>  // b.any
     440:	ldur	x8, [x29, #-40]
     444:	str	xzr, [x8, #72]
     448:	ldur	x0, [x29, #-40]
     44c:	bl	6ac <gz_reset>
     450:	ldur	x8, [x29, #-40]
     454:	stur	x8, [x29, #-8]
     458:	ldur	x0, [x29, #-8]
     45c:	ldp	x29, x30, [sp, #96]
     460:	add	sp, sp, #0x70
     464:	ret

0000000000000468 <gzopen64>:
     468:	sub	sp, sp, #0x20
     46c:	stp	x29, x30, [sp, #16]
     470:	add	x29, sp, #0x10
     474:	mov	w8, #0xffffffff            	// #-1
     478:	str	x0, [sp, #8]
     47c:	str	x1, [sp]
     480:	ldr	x0, [sp, #8]
     484:	ldr	x2, [sp]
     488:	mov	w1, w8
     48c:	bl	34 <gz_open>
     490:	ldp	x29, x30, [sp, #16]
     494:	add	sp, sp, #0x20
     498:	ret

000000000000049c <gzdopen>:
     49c:	sub	sp, sp, #0x40
     4a0:	stp	x29, x30, [sp, #48]
     4a4:	add	x29, sp, #0x30
     4a8:	mov	w8, #0xffffffff            	// #-1
     4ac:	stur	w0, [x29, #-12]
     4b0:	str	x1, [sp, #24]
     4b4:	ldur	w9, [x29, #-12]
     4b8:	cmp	w9, w8
     4bc:	b.eq	4d0 <gzdopen+0x34>  // b.none
     4c0:	mov	x0, #0x13                  	// #19
     4c4:	bl	0 <malloc>
     4c8:	str	x0, [sp, #16]
     4cc:	cbnz	x0, 4dc <gzdopen+0x40>
     4d0:	mov	x8, xzr
     4d4:	stur	x8, [x29, #-8]
     4d8:	b	51c <gzdopen+0x80>
     4dc:	ldr	x0, [sp, #16]
     4e0:	ldur	w3, [x29, #-12]
     4e4:	mov	x1, #0x13                  	// #19
     4e8:	adrp	x2, 0 <gzopen>
     4ec:	add	x2, x2, #0x0
     4f0:	bl	0 <snprintf>
     4f4:	ldr	x8, [sp, #16]
     4f8:	ldur	w1, [x29, #-12]
     4fc:	ldr	x2, [sp, #24]
     500:	mov	x0, x8
     504:	bl	34 <gz_open>
     508:	str	x0, [sp, #8]
     50c:	ldr	x0, [sp, #16]
     510:	bl	0 <free>
     514:	ldr	x8, [sp, #8]
     518:	stur	x8, [x29, #-8]
     51c:	ldur	x0, [x29, #-8]
     520:	ldp	x29, x30, [sp, #48]
     524:	add	sp, sp, #0x40
     528:	ret

000000000000052c <gzbuffer>:
     52c:	sub	sp, sp, #0x20
     530:	str	x0, [sp, #16]
     534:	str	w1, [sp, #12]
     538:	ldr	x8, [sp, #16]
     53c:	cbnz	x8, 54c <gzbuffer+0x20>
     540:	mov	w8, #0xffffffff            	// #-1
     544:	str	w8, [sp, #28]
     548:	b	5e4 <gzbuffer+0xb8>
     54c:	ldr	x8, [sp, #16]
     550:	str	x8, [sp]
     554:	ldr	x8, [sp]
     558:	ldr	w9, [x8, #24]
     55c:	mov	w10, #0x1c4f                	// #7247
     560:	cmp	w9, w10
     564:	b.eq	588 <gzbuffer+0x5c>  // b.none
     568:	ldr	x8, [sp]
     56c:	ldr	w9, [x8, #24]
     570:	mov	w10, #0x79b1                	// #31153
     574:	cmp	w9, w10
     578:	b.eq	588 <gzbuffer+0x5c>  // b.none
     57c:	mov	w8, #0xffffffff            	// #-1
     580:	str	w8, [sp, #28]
     584:	b	5e4 <gzbuffer+0xb8>
     588:	ldr	x8, [sp]
     58c:	ldr	w9, [x8, #40]
     590:	cbz	w9, 5a0 <gzbuffer+0x74>
     594:	mov	w8, #0xffffffff            	// #-1
     598:	str	w8, [sp, #28]
     59c:	b	5e4 <gzbuffer+0xb8>
     5a0:	ldr	w8, [sp, #12]
     5a4:	lsl	w8, w8, #1
     5a8:	ldr	w9, [sp, #12]
     5ac:	cmp	w8, w9
     5b0:	b.cs	5c0 <gzbuffer+0x94>  // b.hs, b.nlast
     5b4:	mov	w8, #0xffffffff            	// #-1
     5b8:	str	w8, [sp, #28]
     5bc:	b	5e4 <gzbuffer+0xb8>
     5c0:	ldr	w8, [sp, #12]
     5c4:	cmp	w8, #0x2
     5c8:	b.cs	5d4 <gzbuffer+0xa8>  // b.hs, b.nlast
     5cc:	mov	w8, #0x2                   	// #2
     5d0:	str	w8, [sp, #12]
     5d4:	ldr	w8, [sp, #12]
     5d8:	ldr	x9, [sp]
     5dc:	str	w8, [x9, #44]
     5e0:	str	wzr, [sp, #28]
     5e4:	ldr	w0, [sp, #28]
     5e8:	add	sp, sp, #0x20
     5ec:	ret

00000000000005f0 <gzrewind>:
     5f0:	sub	sp, sp, #0x30
     5f4:	stp	x29, x30, [sp, #32]
     5f8:	add	x29, sp, #0x20
     5fc:	str	x0, [sp, #16]
     600:	ldr	x8, [sp, #16]
     604:	cbnz	x8, 614 <gzrewind+0x24>
     608:	mov	w8, #0xffffffff            	// #-1
     60c:	stur	w8, [x29, #-4]
     610:	b	69c <gzrewind+0xac>
     614:	ldr	x8, [sp, #16]
     618:	str	x8, [sp, #8]
     61c:	ldr	x8, [sp, #8]
     620:	ldr	w9, [x8, #24]
     624:	mov	w10, #0x1c4f                	// #7247
     628:	cmp	w9, w10
     62c:	b.ne	650 <gzrewind+0x60>  // b.any
     630:	ldr	x8, [sp, #8]
     634:	ldr	w9, [x8, #108]
     638:	cbz	w9, 65c <gzrewind+0x6c>
     63c:	ldr	x8, [sp, #8]
     640:	ldr	w9, [x8, #108]
     644:	mov	w10, #0xfffffffb            	// #-5
     648:	cmp	w9, w10
     64c:	b.eq	65c <gzrewind+0x6c>  // b.none
     650:	mov	w8, #0xffffffff            	// #-1
     654:	stur	w8, [x29, #-4]
     658:	b	69c <gzrewind+0xac>
     65c:	ldr	x8, [sp, #8]
     660:	ldr	w0, [x8, #28]
     664:	ldr	x8, [sp, #8]
     668:	ldr	x1, [x8, #72]
     66c:	mov	w9, wzr
     670:	mov	w2, w9
     674:	bl	0 <lseek64>
     678:	mov	x8, #0xffffffffffffffff    	// #-1
     67c:	cmp	x0, x8
     680:	b.ne	690 <gzrewind+0xa0>  // b.any
     684:	mov	w8, #0xffffffff            	// #-1
     688:	stur	w8, [x29, #-4]
     68c:	b	69c <gzrewind+0xac>
     690:	ldr	x0, [sp, #8]
     694:	bl	6ac <gz_reset>
     698:	stur	wzr, [x29, #-4]
     69c:	ldur	w0, [x29, #-4]
     6a0:	ldp	x29, x30, [sp, #32]
     6a4:	add	sp, sp, #0x30
     6a8:	ret

00000000000006ac <gz_reset>:
     6ac:	sub	sp, sp, #0x20
     6b0:	stp	x29, x30, [sp, #16]
     6b4:	add	x29, sp, #0x10
     6b8:	mov	w8, #0x1c4f                	// #7247
     6bc:	str	x0, [sp, #8]
     6c0:	ldr	x9, [sp, #8]
     6c4:	str	wzr, [x9]
     6c8:	ldr	x9, [sp, #8]
     6cc:	ldr	w10, [x9, #24]
     6d0:	cmp	w10, w8
     6d4:	b.ne	6f0 <gz_reset+0x44>  // b.any
     6d8:	ldr	x8, [sp, #8]
     6dc:	str	wzr, [x8, #80]
     6e0:	ldr	x8, [sp, #8]
     6e4:	str	wzr, [x8, #84]
     6e8:	ldr	x8, [sp, #8]
     6ec:	str	wzr, [x8, #68]
     6f0:	ldr	x8, [sp, #8]
     6f4:	mov	w9, wzr
     6f8:	str	wzr, [x8, #104]
     6fc:	ldr	x0, [sp, #8]
     700:	mov	w1, w9
     704:	mov	x8, xzr
     708:	mov	x2, x8
     70c:	bl	a78 <gz_error>
     710:	ldr	x8, [sp, #8]
     714:	str	xzr, [x8, #16]
     718:	ldr	x8, [sp, #8]
     71c:	str	wzr, [x8, #128]
     720:	ldp	x29, x30, [sp, #16]
     724:	add	sp, sp, #0x20
     728:	ret

000000000000072c <gzseek64>:
     72c:	sub	sp, sp, #0x50
     730:	stp	x29, x30, [sp, #64]
     734:	add	x29, sp, #0x40
     738:	stur	x0, [x29, #-16]
     73c:	stur	x1, [x29, #-24]
     740:	stur	w2, [x29, #-28]
     744:	ldur	x8, [x29, #-16]
     748:	cbnz	x8, 758 <gzseek64+0x2c>
     74c:	mov	x8, #0xffffffffffffffff    	// #-1
     750:	stur	x8, [x29, #-8]
     754:	b	a68 <gzseek64+0x33c>
     758:	ldur	x8, [x29, #-16]
     75c:	str	x8, [sp, #16]
     760:	ldr	x8, [sp, #16]
     764:	ldr	w9, [x8, #24]
     768:	mov	w10, #0x1c4f                	// #7247
     76c:	cmp	w9, w10
     770:	b.eq	794 <gzseek64+0x68>  // b.none
     774:	ldr	x8, [sp, #16]
     778:	ldr	w9, [x8, #24]
     77c:	mov	w10, #0x79b1                	// #31153
     780:	cmp	w9, w10
     784:	b.eq	794 <gzseek64+0x68>  // b.none
     788:	mov	x8, #0xffffffffffffffff    	// #-1
     78c:	stur	x8, [x29, #-8]
     790:	b	a68 <gzseek64+0x33c>
     794:	ldr	x8, [sp, #16]
     798:	ldr	w9, [x8, #108]
     79c:	cbz	w9, 7c0 <gzseek64+0x94>
     7a0:	ldr	x8, [sp, #16]
     7a4:	ldr	w9, [x8, #108]
     7a8:	mov	w10, #0xfffffffb            	// #-5
     7ac:	cmp	w9, w10
     7b0:	b.eq	7c0 <gzseek64+0x94>  // b.none
     7b4:	mov	x8, #0xffffffffffffffff    	// #-1
     7b8:	stur	x8, [x29, #-8]
     7bc:	b	a68 <gzseek64+0x33c>
     7c0:	ldur	w8, [x29, #-28]
     7c4:	cbz	w8, 7e0 <gzseek64+0xb4>
     7c8:	ldur	w8, [x29, #-28]
     7cc:	cmp	w8, #0x1
     7d0:	b.eq	7e0 <gzseek64+0xb4>  // b.none
     7d4:	mov	x8, #0xffffffffffffffff    	// #-1
     7d8:	stur	x8, [x29, #-8]
     7dc:	b	a68 <gzseek64+0x33c>
     7e0:	ldur	w8, [x29, #-28]
     7e4:	cbnz	w8, 800 <gzseek64+0xd4>
     7e8:	ldr	x8, [sp, #16]
     7ec:	ldr	x8, [x8, #16]
     7f0:	ldur	x9, [x29, #-24]
     7f4:	subs	x8, x9, x8
     7f8:	stur	x8, [x29, #-24]
     7fc:	b	820 <gzseek64+0xf4>
     800:	ldr	x8, [sp, #16]
     804:	ldr	w9, [x8, #104]
     808:	cbz	w9, 820 <gzseek64+0xf4>
     80c:	ldr	x8, [sp, #16]
     810:	ldr	x8, [x8, #96]
     814:	ldur	x9, [x29, #-24]
     818:	add	x8, x9, x8
     81c:	stur	x8, [x29, #-24]
     820:	ldr	x8, [sp, #16]
     824:	str	wzr, [x8, #104]
     828:	ldr	x8, [sp, #16]
     82c:	ldr	w9, [x8, #24]
     830:	mov	w10, #0x1c4f                	// #7247
     834:	cmp	w9, w10
     838:	b.ne	910 <gzseek64+0x1e4>  // b.any
     83c:	ldr	x8, [sp, #16]
     840:	ldr	w9, [x8, #68]
     844:	cmp	w9, #0x1
     848:	b.ne	910 <gzseek64+0x1e4>  // b.any
     84c:	ldr	x8, [sp, #16]
     850:	ldr	x8, [x8, #16]
     854:	ldur	x9, [x29, #-24]
     858:	add	x8, x8, x9
     85c:	cmp	x8, #0x0
     860:	cset	w10, lt  // lt = tstop
     864:	tbnz	w10, #0, 910 <gzseek64+0x1e4>
     868:	ldr	x8, [sp, #16]
     86c:	ldr	w0, [x8, #28]
     870:	ldur	x8, [x29, #-24]
     874:	ldr	x9, [sp, #16]
     878:	ldr	w10, [x9]
     87c:	mov	w9, w10
     880:	subs	x1, x8, x9
     884:	mov	w2, #0x1                   	// #1
     888:	bl	0 <lseek64>
     88c:	str	x0, [sp, #24]
     890:	ldr	x8, [sp, #24]
     894:	mov	x9, #0xffffffffffffffff    	// #-1
     898:	cmp	x8, x9
     89c:	b.ne	8ac <gzseek64+0x180>  // b.any
     8a0:	mov	x8, #0xffffffffffffffff    	// #-1
     8a4:	stur	x8, [x29, #-8]
     8a8:	b	a68 <gzseek64+0x33c>
     8ac:	ldr	x8, [sp, #16]
     8b0:	mov	w9, wzr
     8b4:	str	wzr, [x8]
     8b8:	ldr	x8, [sp, #16]
     8bc:	str	wzr, [x8, #80]
     8c0:	ldr	x8, [sp, #16]
     8c4:	str	wzr, [x8, #84]
     8c8:	ldr	x8, [sp, #16]
     8cc:	str	wzr, [x8, #104]
     8d0:	ldr	x0, [sp, #16]
     8d4:	mov	w1, w9
     8d8:	mov	x8, xzr
     8dc:	mov	x2, x8
     8e0:	bl	a78 <gz_error>
     8e4:	ldr	x8, [sp, #16]
     8e8:	str	wzr, [x8, #128]
     8ec:	ldur	x8, [x29, #-24]
     8f0:	ldr	x10, [sp, #16]
     8f4:	ldr	x11, [x10, #16]
     8f8:	add	x8, x11, x8
     8fc:	str	x8, [x10, #16]
     900:	ldr	x8, [sp, #16]
     904:	ldr	x8, [x8, #16]
     908:	stur	x8, [x29, #-8]
     90c:	b	a68 <gzseek64+0x33c>
     910:	ldur	x8, [x29, #-24]
     914:	cmp	x8, #0x0
     918:	cset	w9, ge  // ge = tcont
     91c:	tbnz	w9, #0, 990 <gzseek64+0x264>
     920:	ldr	x8, [sp, #16]
     924:	ldr	w9, [x8, #24]
     928:	mov	w10, #0x1c4f                	// #7247
     92c:	cmp	w9, w10
     930:	b.eq	940 <gzseek64+0x214>  // b.none
     934:	mov	x8, #0xffffffffffffffff    	// #-1
     938:	stur	x8, [x29, #-8]
     93c:	b	a68 <gzseek64+0x33c>
     940:	ldr	x8, [sp, #16]
     944:	ldr	x8, [x8, #16]
     948:	ldur	x9, [x29, #-24]
     94c:	add	x8, x9, x8
     950:	stur	x8, [x29, #-24]
     954:	ldur	x8, [x29, #-24]
     958:	cmp	x8, #0x0
     95c:	cset	w10, ge  // ge = tcont
     960:	tbnz	w10, #0, 970 <gzseek64+0x244>
     964:	mov	x8, #0xffffffffffffffff    	// #-1
     968:	stur	x8, [x29, #-8]
     96c:	b	a68 <gzseek64+0x33c>
     970:	ldur	x0, [x29, #-16]
     974:	bl	5f0 <gzrewind>
     978:	mov	w8, #0xffffffff            	// #-1
     97c:	cmp	w0, w8
     980:	b.ne	990 <gzseek64+0x264>  // b.any
     984:	mov	x8, #0xffffffffffffffff    	// #-1
     988:	stur	x8, [x29, #-8]
     98c:	b	a68 <gzseek64+0x33c>
     990:	ldr	x8, [sp, #16]
     994:	ldr	w9, [x8, #24]
     998:	mov	w10, #0x1c4f                	// #7247
     99c:	cmp	w9, w10
     9a0:	b.ne	a34 <gzseek64+0x308>  // b.any
     9a4:	ldr	x8, [sp, #16]
     9a8:	ldr	w9, [x8]
     9ac:	mov	w8, w9
     9b0:	ldur	x10, [x29, #-24]
     9b4:	cmp	x8, x10
     9b8:	b.le	9c8 <gzseek64+0x29c>
     9bc:	ldur	x8, [x29, #-24]
     9c0:	str	w8, [sp, #12]
     9c4:	b	9d4 <gzseek64+0x2a8>
     9c8:	ldr	x8, [sp, #16]
     9cc:	ldr	w9, [x8]
     9d0:	str	w9, [sp, #12]
     9d4:	ldr	w8, [sp, #12]
     9d8:	str	w8, [sp, #32]
     9dc:	ldr	w8, [sp, #32]
     9e0:	ldr	x9, [sp, #16]
     9e4:	ldr	w10, [x9]
     9e8:	subs	w8, w10, w8
     9ec:	str	w8, [x9]
     9f0:	ldr	w8, [sp, #32]
     9f4:	mov	w9, w8
     9f8:	ldr	x11, [sp, #16]
     9fc:	ldr	x12, [x11, #8]
     a00:	add	x9, x12, x9
     a04:	str	x9, [x11, #8]
     a08:	ldr	w8, [sp, #32]
     a0c:	mov	w9, w8
     a10:	ldr	x11, [sp, #16]
     a14:	ldr	x12, [x11, #16]
     a18:	add	x9, x12, x9
     a1c:	str	x9, [x11, #16]
     a20:	ldr	w8, [sp, #32]
     a24:	mov	w9, w8
     a28:	ldur	x11, [x29, #-24]
     a2c:	subs	x9, x11, x9
     a30:	stur	x9, [x29, #-24]
     a34:	ldur	x8, [x29, #-24]
     a38:	cbz	x8, a54 <gzseek64+0x328>
     a3c:	ldr	x8, [sp, #16]
     a40:	mov	w9, #0x1                   	// #1
     a44:	str	w9, [x8, #104]
     a48:	ldur	x8, [x29, #-24]
     a4c:	ldr	x10, [sp, #16]
     a50:	str	x8, [x10, #96]
     a54:	ldr	x8, [sp, #16]
     a58:	ldr	x8, [x8, #16]
     a5c:	ldur	x9, [x29, #-24]
     a60:	add	x8, x8, x9
     a64:	stur	x8, [x29, #-8]
     a68:	ldur	x0, [x29, #-8]
     a6c:	ldp	x29, x30, [sp, #64]
     a70:	add	sp, sp, #0x50
     a74:	ret

0000000000000a78 <gz_error>:
     a78:	sub	sp, sp, #0x40
     a7c:	stp	x29, x30, [sp, #48]
     a80:	add	x29, sp, #0x30
     a84:	stur	x0, [x29, #-8]
     a88:	stur	w1, [x29, #-12]
     a8c:	str	x2, [sp, #24]
     a90:	ldur	x8, [x29, #-8]
     a94:	ldr	x8, [x8, #112]
     a98:	cbz	x8, ac8 <gz_error+0x50>
     a9c:	ldur	x8, [x29, #-8]
     aa0:	ldr	w9, [x8, #108]
     aa4:	mov	w10, #0xfffffffc            	// #-4
     aa8:	cmp	w9, w10
     aac:	b.eq	abc <gz_error+0x44>  // b.none
     ab0:	ldur	x8, [x29, #-8]
     ab4:	ldr	x0, [x8, #112]
     ab8:	bl	0 <free>
     abc:	ldur	x8, [x29, #-8]
     ac0:	mov	x9, xzr
     ac4:	str	x9, [x8, #112]
     ac8:	ldur	w8, [x29, #-12]
     acc:	cbz	w8, ae8 <gz_error+0x70>
     ad0:	ldur	w8, [x29, #-12]
     ad4:	mov	w9, #0xfffffffb            	// #-5
     ad8:	cmp	w8, w9
     adc:	b.eq	ae8 <gz_error+0x70>  // b.none
     ae0:	ldur	x8, [x29, #-8]
     ae4:	str	wzr, [x8]
     ae8:	ldur	w8, [x29, #-12]
     aec:	ldur	x9, [x29, #-8]
     af0:	str	w8, [x9, #108]
     af4:	ldr	x9, [sp, #24]
     af8:	cbnz	x9, b00 <gz_error+0x88>
     afc:	b	bb8 <gz_error+0x140>
     b00:	ldur	w8, [x29, #-12]
     b04:	mov	w9, #0xfffffffc            	// #-4
     b08:	cmp	w8, w9
     b0c:	b.ne	b14 <gz_error+0x9c>  // b.any
     b10:	b	bb8 <gz_error+0x140>
     b14:	ldur	x8, [x29, #-8]
     b18:	ldr	x0, [x8, #32]
     b1c:	bl	0 <strlen>
     b20:	ldr	x8, [sp, #24]
     b24:	str	x0, [sp, #16]
     b28:	mov	x0, x8
     b2c:	bl	0 <strlen>
     b30:	ldr	x8, [sp, #16]
     b34:	add	x9, x8, x0
     b38:	add	x0, x9, #0x3
     b3c:	bl	0 <malloc>
     b40:	ldur	x8, [x29, #-8]
     b44:	str	x0, [x8, #112]
     b48:	cbnz	x0, b5c <gz_error+0xe4>
     b4c:	ldur	x8, [x29, #-8]
     b50:	mov	w9, #0xfffffffc            	// #-4
     b54:	str	w9, [x8, #108]
     b58:	b	bb8 <gz_error+0x140>
     b5c:	ldur	x8, [x29, #-8]
     b60:	ldr	x0, [x8, #112]
     b64:	ldur	x8, [x29, #-8]
     b68:	ldr	x8, [x8, #32]
     b6c:	str	x0, [sp, #8]
     b70:	mov	x0, x8
     b74:	bl	0 <strlen>
     b78:	ldr	x8, [sp, #24]
     b7c:	str	x0, [sp]
     b80:	mov	x0, x8
     b84:	bl	0 <strlen>
     b88:	ldr	x8, [sp]
     b8c:	add	x9, x8, x0
     b90:	add	x1, x9, #0x3
     b94:	ldur	x9, [x29, #-8]
     b98:	ldr	x3, [x9, #32]
     b9c:	ldr	x5, [sp, #24]
     ba0:	ldr	x0, [sp, #8]
     ba4:	adrp	x2, 0 <gzopen>
     ba8:	add	x2, x2, #0x0
     bac:	adrp	x4, 0 <gzopen>
     bb0:	add	x4, x4, #0x0
     bb4:	bl	0 <snprintf>
     bb8:	ldp	x29, x30, [sp, #48]
     bbc:	add	sp, sp, #0x40
     bc0:	ret

0000000000000bc4 <gzseek>:
     bc4:	sub	sp, sp, #0x40
     bc8:	stp	x29, x30, [sp, #48]
     bcc:	add	x29, sp, #0x30
     bd0:	stur	x0, [x29, #-8]
     bd4:	stur	x1, [x29, #-16]
     bd8:	stur	w2, [x29, #-20]
     bdc:	ldur	x0, [x29, #-8]
     be0:	ldur	x1, [x29, #-16]
     be4:	ldur	w2, [x29, #-20]
     be8:	bl	72c <gzseek64>
     bec:	str	x0, [sp, #16]
     bf0:	ldr	x8, [sp, #16]
     bf4:	ldr	x9, [sp, #16]
     bf8:	cmp	x8, x9
     bfc:	b.ne	c0c <gzseek+0x48>  // b.any
     c00:	ldr	x8, [sp, #16]
     c04:	str	x8, [sp, #8]
     c08:	b	c14 <gzseek+0x50>
     c0c:	mov	x8, #0xffffffffffffffff    	// #-1
     c10:	str	x8, [sp, #8]
     c14:	ldr	x8, [sp, #8]
     c18:	mov	x0, x8
     c1c:	ldp	x29, x30, [sp, #48]
     c20:	add	sp, sp, #0x40
     c24:	ret

0000000000000c28 <gztell64>:
     c28:	sub	sp, sp, #0x30
     c2c:	str	x0, [sp, #32]
     c30:	ldr	x8, [sp, #32]
     c34:	cbnz	x8, c44 <gztell64+0x1c>
     c38:	mov	x8, #0xffffffffffffffff    	// #-1
     c3c:	str	x8, [sp, #40]
     c40:	b	cc0 <gztell64+0x98>
     c44:	ldr	x8, [sp, #32]
     c48:	str	x8, [sp, #24]
     c4c:	ldr	x8, [sp, #24]
     c50:	ldr	w9, [x8, #24]
     c54:	mov	w10, #0x1c4f                	// #7247
     c58:	cmp	w9, w10
     c5c:	b.eq	c80 <gztell64+0x58>  // b.none
     c60:	ldr	x8, [sp, #24]
     c64:	ldr	w9, [x8, #24]
     c68:	mov	w10, #0x79b1                	// #31153
     c6c:	cmp	w9, w10
     c70:	b.eq	c80 <gztell64+0x58>  // b.none
     c74:	mov	x8, #0xffffffffffffffff    	// #-1
     c78:	str	x8, [sp, #40]
     c7c:	b	cc0 <gztell64+0x98>
     c80:	ldr	x8, [sp, #24]
     c84:	ldr	x8, [x8, #16]
     c88:	ldr	x9, [sp, #24]
     c8c:	ldr	w10, [x9, #104]
     c90:	str	x8, [sp, #16]
     c94:	cbz	w10, ca8 <gztell64+0x80>
     c98:	ldr	x8, [sp, #24]
     c9c:	ldr	x8, [x8, #96]
     ca0:	str	x8, [sp, #8]
     ca4:	b	cb0 <gztell64+0x88>
     ca8:	mov	x8, xzr
     cac:	str	x8, [sp, #8]
     cb0:	ldr	x8, [sp, #8]
     cb4:	ldr	x9, [sp, #16]
     cb8:	add	x8, x9, x8
     cbc:	str	x8, [sp, #40]
     cc0:	ldr	x0, [sp, #40]
     cc4:	add	sp, sp, #0x30
     cc8:	ret

0000000000000ccc <gztell>:
     ccc:	sub	sp, sp, #0x30
     cd0:	stp	x29, x30, [sp, #32]
     cd4:	add	x29, sp, #0x20
     cd8:	stur	x0, [x29, #-8]
     cdc:	ldur	x0, [x29, #-8]
     ce0:	bl	c28 <gztell64>
     ce4:	str	x0, [sp, #16]
     ce8:	ldr	x8, [sp, #16]
     cec:	ldr	x9, [sp, #16]
     cf0:	cmp	x8, x9
     cf4:	b.ne	d04 <gztell+0x38>  // b.any
     cf8:	ldr	x8, [sp, #16]
     cfc:	str	x8, [sp, #8]
     d00:	b	d0c <gztell+0x40>
     d04:	mov	x8, #0xffffffffffffffff    	// #-1
     d08:	str	x8, [sp, #8]
     d0c:	ldr	x8, [sp, #8]
     d10:	mov	x0, x8
     d14:	ldp	x29, x30, [sp, #32]
     d18:	add	sp, sp, #0x30
     d1c:	ret

0000000000000d20 <gzoffset64>:
     d20:	sub	sp, sp, #0x30
     d24:	stp	x29, x30, [sp, #32]
     d28:	add	x29, sp, #0x20
     d2c:	str	x0, [sp, #16]
     d30:	ldr	x8, [sp, #16]
     d34:	cbnz	x8, d44 <gzoffset64+0x24>
     d38:	mov	x8, #0xffffffffffffffff    	// #-1
     d3c:	stur	x8, [x29, #-8]
     d40:	b	dec <gzoffset64+0xcc>
     d44:	ldr	x8, [sp, #16]
     d48:	str	x8, [sp]
     d4c:	ldr	x8, [sp]
     d50:	ldr	w9, [x8, #24]
     d54:	mov	w10, #0x1c4f                	// #7247
     d58:	cmp	w9, w10
     d5c:	b.eq	d80 <gzoffset64+0x60>  // b.none
     d60:	ldr	x8, [sp]
     d64:	ldr	w9, [x8, #24]
     d68:	mov	w10, #0x79b1                	// #31153
     d6c:	cmp	w9, w10
     d70:	b.eq	d80 <gzoffset64+0x60>  // b.none
     d74:	mov	x8, #0xffffffffffffffff    	// #-1
     d78:	stur	x8, [x29, #-8]
     d7c:	b	dec <gzoffset64+0xcc>
     d80:	ldr	x8, [sp]
     d84:	ldr	w0, [x8, #28]
     d88:	mov	x8, xzr
     d8c:	mov	x1, x8
     d90:	mov	w2, #0x1                   	// #1
     d94:	bl	0 <lseek64>
     d98:	str	x0, [sp, #8]
     d9c:	ldr	x8, [sp, #8]
     da0:	mov	x9, #0xffffffffffffffff    	// #-1
     da4:	cmp	x8, x9
     da8:	b.ne	db8 <gzoffset64+0x98>  // b.any
     dac:	mov	x8, #0xffffffffffffffff    	// #-1
     db0:	stur	x8, [x29, #-8]
     db4:	b	dec <gzoffset64+0xcc>
     db8:	ldr	x8, [sp]
     dbc:	ldr	w9, [x8, #24]
     dc0:	mov	w10, #0x1c4f                	// #7247
     dc4:	cmp	w9, w10
     dc8:	b.ne	de4 <gzoffset64+0xc4>  // b.any
     dcc:	ldr	x8, [sp]
     dd0:	ldr	w9, [x8, #128]
     dd4:	mov	w8, w9
     dd8:	ldr	x10, [sp, #8]
     ddc:	subs	x8, x10, x8
     de0:	str	x8, [sp, #8]
     de4:	ldr	x8, [sp, #8]
     de8:	stur	x8, [x29, #-8]
     dec:	ldur	x0, [x29, #-8]
     df0:	ldp	x29, x30, [sp, #32]
     df4:	add	sp, sp, #0x30
     df8:	ret

0000000000000dfc <gzoffset>:
     dfc:	sub	sp, sp, #0x30
     e00:	stp	x29, x30, [sp, #32]
     e04:	add	x29, sp, #0x20
     e08:	stur	x0, [x29, #-8]
     e0c:	ldur	x0, [x29, #-8]
     e10:	bl	d20 <gzoffset64>
     e14:	str	x0, [sp, #16]
     e18:	ldr	x8, [sp, #16]
     e1c:	ldr	x9, [sp, #16]
     e20:	cmp	x8, x9
     e24:	b.ne	e34 <gzoffset+0x38>  // b.any
     e28:	ldr	x8, [sp, #16]
     e2c:	str	x8, [sp, #8]
     e30:	b	e3c <gzoffset+0x40>
     e34:	mov	x8, #0xffffffffffffffff    	// #-1
     e38:	str	x8, [sp, #8]
     e3c:	ldr	x8, [sp, #8]
     e40:	mov	x0, x8
     e44:	ldp	x29, x30, [sp, #32]
     e48:	add	sp, sp, #0x30
     e4c:	ret

0000000000000e50 <gzeof>:
     e50:	sub	sp, sp, #0x20
     e54:	str	x0, [sp, #16]
     e58:	ldr	x8, [sp, #16]
     e5c:	cbnz	x8, e68 <gzeof+0x18>
     e60:	str	wzr, [sp, #28]
     e64:	b	ed4 <gzeof+0x84>
     e68:	ldr	x8, [sp, #16]
     e6c:	str	x8, [sp, #8]
     e70:	ldr	x8, [sp, #8]
     e74:	ldr	w9, [x8, #24]
     e78:	mov	w10, #0x1c4f                	// #7247
     e7c:	cmp	w9, w10
     e80:	b.eq	ea0 <gzeof+0x50>  // b.none
     e84:	ldr	x8, [sp, #8]
     e88:	ldr	w9, [x8, #24]
     e8c:	mov	w10, #0x79b1                	// #31153
     e90:	cmp	w9, w10
     e94:	b.eq	ea0 <gzeof+0x50>  // b.none
     e98:	str	wzr, [sp, #28]
     e9c:	b	ed4 <gzeof+0x84>
     ea0:	ldr	x8, [sp, #8]
     ea4:	ldr	w9, [x8, #24]
     ea8:	mov	w10, #0x1c4f                	// #7247
     eac:	cmp	w9, w10
     eb0:	b.ne	ec4 <gzeof+0x74>  // b.any
     eb4:	ldr	x8, [sp, #8]
     eb8:	ldr	w9, [x8, #84]
     ebc:	str	w9, [sp, #4]
     ec0:	b	ecc <gzeof+0x7c>
     ec4:	mov	w8, wzr
     ec8:	str	w8, [sp, #4]
     ecc:	ldr	w8, [sp, #4]
     ed0:	str	w8, [sp, #28]
     ed4:	ldr	w0, [sp, #28]
     ed8:	add	sp, sp, #0x20
     edc:	ret

0000000000000ee0 <gzerror>:
     ee0:	sub	sp, sp, #0x30
     ee4:	str	x0, [sp, #32]
     ee8:	str	x1, [sp, #24]
     eec:	ldr	x8, [sp, #32]
     ef0:	cbnz	x8, f00 <gzerror+0x20>
     ef4:	mov	x8, xzr
     ef8:	str	x8, [sp, #40]
     efc:	b	fb0 <gzerror+0xd0>
     f00:	ldr	x8, [sp, #32]
     f04:	str	x8, [sp, #16]
     f08:	ldr	x8, [sp, #16]
     f0c:	ldr	w9, [x8, #24]
     f10:	mov	w10, #0x1c4f                	// #7247
     f14:	cmp	w9, w10
     f18:	b.eq	f3c <gzerror+0x5c>  // b.none
     f1c:	ldr	x8, [sp, #16]
     f20:	ldr	w9, [x8, #24]
     f24:	mov	w10, #0x79b1                	// #31153
     f28:	cmp	w9, w10
     f2c:	b.eq	f3c <gzerror+0x5c>  // b.none
     f30:	mov	x8, xzr
     f34:	str	x8, [sp, #40]
     f38:	b	fb0 <gzerror+0xd0>
     f3c:	ldr	x8, [sp, #24]
     f40:	cbz	x8, f54 <gzerror+0x74>
     f44:	ldr	x8, [sp, #16]
     f48:	ldr	w9, [x8, #108]
     f4c:	ldr	x8, [sp, #24]
     f50:	str	w9, [x8]
     f54:	ldr	x8, [sp, #16]
     f58:	ldr	w9, [x8, #108]
     f5c:	mov	w10, #0xfffffffc            	// #-4
     f60:	cmp	w9, w10
     f64:	b.ne	f78 <gzerror+0x98>  // b.any
     f68:	adrp	x8, 0 <gzopen>
     f6c:	add	x8, x8, #0x0
     f70:	str	x8, [sp, #8]
     f74:	b	fa8 <gzerror+0xc8>
     f78:	ldr	x8, [sp, #16]
     f7c:	ldr	x8, [x8, #112]
     f80:	cbnz	x8, f94 <gzerror+0xb4>
     f84:	adrp	x8, 0 <gzopen>
     f88:	add	x8, x8, #0x0
     f8c:	str	x8, [sp]
     f90:	b	fa0 <gzerror+0xc0>
     f94:	ldr	x8, [sp, #16]
     f98:	ldr	x8, [x8, #112]
     f9c:	str	x8, [sp]
     fa0:	ldr	x8, [sp]
     fa4:	str	x8, [sp, #8]
     fa8:	ldr	x8, [sp, #8]
     fac:	str	x8, [sp, #40]
     fb0:	ldr	x0, [sp, #40]
     fb4:	add	sp, sp, #0x30
     fb8:	ret

0000000000000fbc <gzclearerr>:
     fbc:	sub	sp, sp, #0x20
     fc0:	stp	x29, x30, [sp, #16]
     fc4:	add	x29, sp, #0x10
     fc8:	str	x0, [sp, #8]
     fcc:	ldr	x8, [sp, #8]
     fd0:	cbnz	x8, fd8 <gzclearerr+0x1c>
     fd4:	b	1048 <gzclearerr+0x8c>
     fd8:	ldr	x8, [sp, #8]
     fdc:	str	x8, [sp]
     fe0:	ldr	x8, [sp]
     fe4:	ldr	w9, [x8, #24]
     fe8:	mov	w10, #0x1c4f                	// #7247
     fec:	cmp	w9, w10
     ff0:	b.eq	100c <gzclearerr+0x50>  // b.none
     ff4:	ldr	x8, [sp]
     ff8:	ldr	w9, [x8, #24]
     ffc:	mov	w10, #0x79b1                	// #31153
    1000:	cmp	w9, w10
    1004:	b.eq	100c <gzclearerr+0x50>  // b.none
    1008:	b	1048 <gzclearerr+0x8c>
    100c:	ldr	x8, [sp]
    1010:	ldr	w9, [x8, #24]
    1014:	mov	w10, #0x1c4f                	// #7247
    1018:	cmp	w9, w10
    101c:	b.ne	1030 <gzclearerr+0x74>  // b.any
    1020:	ldr	x8, [sp]
    1024:	str	wzr, [x8, #80]
    1028:	ldr	x8, [sp]
    102c:	str	wzr, [x8, #84]
    1030:	ldr	x0, [sp]
    1034:	mov	w8, wzr
    1038:	mov	w1, w8
    103c:	mov	x9, xzr
    1040:	mov	x2, x9
    1044:	bl	a78 <gz_error>
    1048:	ldp	x29, x30, [sp, #16]
    104c:	add	sp, sp, #0x20
    1050:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzread>:
       0:	sub	sp, sp, #0x40
       4:	stp	x29, x30, [sp, #48]
       8:	add	x29, sp, #0x30
       c:	stur	x0, [x29, #-16]
      10:	str	x1, [sp, #24]
      14:	str	w2, [sp, #20]
      18:	ldur	x8, [x29, #-16]
      1c:	cbnz	x8, 2c <gzread+0x2c>
      20:	mov	w8, #0xffffffff            	// #-1
      24:	stur	w8, [x29, #-4]
      28:	b	f8 <gzread+0xf8>
      2c:	ldur	x8, [x29, #-16]
      30:	str	x8, [sp, #8]
      34:	ldr	x8, [sp, #8]
      38:	ldr	w9, [x8, #24]
      3c:	mov	w10, #0x1c4f                	// #7247
      40:	cmp	w9, w10
      44:	b.ne	68 <gzread+0x68>  // b.any
      48:	ldr	x8, [sp, #8]
      4c:	ldr	w9, [x8, #108]
      50:	cbz	w9, 74 <gzread+0x74>
      54:	ldr	x8, [sp, #8]
      58:	ldr	w9, [x8, #108]
      5c:	mov	w10, #0xfffffffb            	// #-5
      60:	cmp	w9, w10
      64:	b.eq	74 <gzread+0x74>  // b.none
      68:	mov	w8, #0xffffffff            	// #-1
      6c:	stur	w8, [x29, #-4]
      70:	b	f8 <gzread+0xf8>
      74:	ldr	w8, [sp, #20]
      78:	cmp	w8, #0x0
      7c:	cset	w8, ge  // ge = tcont
      80:	tbnz	w8, #0, a4 <gzread+0xa4>
      84:	ldr	x0, [sp, #8]
      88:	mov	w1, #0xfffffffe            	// #-2
      8c:	adrp	x2, 0 <gzread>
      90:	add	x2, x2, #0x0
      94:	bl	0 <gz_error>
      98:	mov	w8, #0xffffffff            	// #-1
      9c:	stur	w8, [x29, #-4]
      a0:	b	f8 <gzread+0xf8>
      a4:	ldr	x0, [sp, #8]
      a8:	ldr	x1, [sp, #24]
      ac:	ldr	w8, [sp, #20]
      b0:	mov	w2, w8
      b4:	bl	108 <gz_read>
      b8:	str	w0, [sp, #20]
      bc:	ldr	w8, [sp, #20]
      c0:	cbnz	w8, f0 <gzread+0xf0>
      c4:	ldr	x8, [sp, #8]
      c8:	ldr	w9, [x8, #108]
      cc:	cbz	w9, f0 <gzread+0xf0>
      d0:	ldr	x8, [sp, #8]
      d4:	ldr	w9, [x8, #108]
      d8:	mov	w10, #0xfffffffb            	// #-5
      dc:	cmp	w9, w10
      e0:	b.eq	f0 <gzread+0xf0>  // b.none
      e4:	mov	w8, #0xffffffff            	// #-1
      e8:	stur	w8, [x29, #-4]
      ec:	b	f8 <gzread+0xf8>
      f0:	ldr	w8, [sp, #20]
      f4:	stur	w8, [x29, #-4]
      f8:	ldur	w0, [x29, #-4]
      fc:	ldp	x29, x30, [sp, #48]
     100:	add	sp, sp, #0x40
     104:	ret

0000000000000108 <gz_read>:
     108:	sub	sp, sp, #0x40
     10c:	stp	x29, x30, [sp, #48]
     110:	add	x29, sp, #0x30
     114:	stur	x0, [x29, #-16]
     118:	str	x1, [sp, #24]
     11c:	str	x2, [sp, #16]
     120:	ldr	x8, [sp, #16]
     124:	cbnz	x8, 130 <gz_read+0x28>
     128:	stur	xzr, [x29, #-8]
     12c:	b	358 <gz_read+0x250>
     130:	ldur	x8, [x29, #-16]
     134:	ldr	w9, [x8, #104]
     138:	cbz	w9, 168 <gz_read+0x60>
     13c:	ldur	x8, [x29, #-16]
     140:	str	wzr, [x8, #104]
     144:	ldur	x0, [x29, #-16]
     148:	ldur	x8, [x29, #-16]
     14c:	ldr	x1, [x8, #96]
     150:	bl	814 <gz_skip>
     154:	mov	w9, #0xffffffff            	// #-1
     158:	cmp	w0, w9
     15c:	b.ne	168 <gz_read+0x60>  // b.any
     160:	stur	xzr, [x29, #-8]
     164:	b	358 <gz_read+0x250>
     168:	str	xzr, [sp, #8]
     16c:	mov	w8, #0xffffffff            	// #-1
     170:	str	w8, [sp, #4]
     174:	ldr	w8, [sp, #4]
     178:	mov	w9, w8
     17c:	ldr	x10, [sp, #16]
     180:	cmp	x9, x10
     184:	b.ls	190 <gz_read+0x88>  // b.plast
     188:	ldr	x8, [sp, #16]
     18c:	str	w8, [sp, #4]
     190:	ldur	x8, [x29, #-16]
     194:	ldr	w9, [x8]
     198:	cbz	w9, 204 <gz_read+0xfc>
     19c:	ldur	x8, [x29, #-16]
     1a0:	ldr	w9, [x8]
     1a4:	ldr	w10, [sp, #4]
     1a8:	cmp	w9, w10
     1ac:	b.cs	1bc <gz_read+0xb4>  // b.hs, b.nlast
     1b0:	ldur	x8, [x29, #-16]
     1b4:	ldr	w9, [x8]
     1b8:	str	w9, [sp, #4]
     1bc:	ldr	x0, [sp, #24]
     1c0:	ldur	x8, [x29, #-16]
     1c4:	ldr	x1, [x8, #8]
     1c8:	ldr	w9, [sp, #4]
     1cc:	mov	w2, w9
     1d0:	bl	0 <memcpy>
     1d4:	ldr	w9, [sp, #4]
     1d8:	mov	w8, w9
     1dc:	ldur	x10, [x29, #-16]
     1e0:	ldr	x11, [x10, #8]
     1e4:	add	x8, x11, x8
     1e8:	str	x8, [x10, #8]
     1ec:	ldr	w9, [sp, #4]
     1f0:	ldur	x8, [x29, #-16]
     1f4:	ldr	w12, [x8]
     1f8:	subs	w9, w12, w9
     1fc:	str	w9, [x8]
     200:	b	2f4 <gz_read+0x1ec>
     204:	ldur	x8, [x29, #-16]
     208:	ldr	w9, [x8, #80]
     20c:	cbz	w9, 22c <gz_read+0x124>
     210:	ldur	x8, [x29, #-16]
     214:	ldr	w9, [x8, #128]
     218:	cbnz	w9, 22c <gz_read+0x124>
     21c:	ldur	x8, [x29, #-16]
     220:	mov	w9, #0x1                   	// #1
     224:	str	w9, [x8, #84]
     228:	b	350 <gz_read+0x248>
     22c:	ldur	x8, [x29, #-16]
     230:	ldr	w9, [x8, #68]
     234:	cbz	w9, 250 <gz_read+0x148>
     238:	ldr	w8, [sp, #4]
     23c:	ldur	x9, [x29, #-16]
     240:	ldr	w10, [x9, #40]
     244:	lsl	w10, w10, #1
     248:	cmp	w8, w10
     24c:	b.cs	270 <gz_read+0x168>  // b.hs, b.nlast
     250:	ldur	x0, [x29, #-16]
     254:	bl	ba4 <gz_fetch>
     258:	mov	w8, #0xffffffff            	// #-1
     25c:	cmp	w0, w8
     260:	b.ne	26c <gz_read+0x164>  // b.any
     264:	stur	xzr, [x29, #-8]
     268:	b	358 <gz_read+0x250>
     26c:	b	348 <gz_read+0x240>
     270:	ldur	x8, [x29, #-16]
     274:	ldr	w9, [x8, #68]
     278:	cmp	w9, #0x1
     27c:	b.ne	2ac <gz_read+0x1a4>  // b.any
     280:	ldur	x0, [x29, #-16]
     284:	ldr	x1, [sp, #24]
     288:	add	x3, sp, #0x4
     28c:	ldr	w2, [sp, #4]
     290:	bl	1138 <gz_load>
     294:	mov	w8, #0xffffffff            	// #-1
     298:	cmp	w0, w8
     29c:	b.ne	2a8 <gz_read+0x1a0>  // b.any
     2a0:	stur	xzr, [x29, #-8]
     2a4:	b	358 <gz_read+0x250>
     2a8:	b	2f4 <gz_read+0x1ec>
     2ac:	ldr	w8, [sp, #4]
     2b0:	ldur	x9, [x29, #-16]
     2b4:	str	w8, [x9, #152]
     2b8:	ldr	x9, [sp, #24]
     2bc:	ldur	x10, [x29, #-16]
     2c0:	str	x9, [x10, #144]
     2c4:	ldur	x0, [x29, #-16]
     2c8:	bl	1270 <gz_decomp>
     2cc:	mov	w8, #0xffffffff            	// #-1
     2d0:	cmp	w0, w8
     2d4:	b.ne	2e0 <gz_read+0x1d8>  // b.any
     2d8:	stur	xzr, [x29, #-8]
     2dc:	b	358 <gz_read+0x250>
     2e0:	ldur	x8, [x29, #-16]
     2e4:	ldr	w9, [x8]
     2e8:	str	w9, [sp, #4]
     2ec:	ldur	x8, [x29, #-16]
     2f0:	str	wzr, [x8]
     2f4:	ldr	w8, [sp, #4]
     2f8:	mov	w9, w8
     2fc:	ldr	x10, [sp, #16]
     300:	subs	x9, x10, x9
     304:	str	x9, [sp, #16]
     308:	ldr	x9, [sp, #24]
     30c:	ldr	w8, [sp, #4]
     310:	mov	w10, w8
     314:	add	x9, x9, x10
     318:	str	x9, [sp, #24]
     31c:	ldr	w8, [sp, #4]
     320:	mov	w9, w8
     324:	ldr	x10, [sp, #8]
     328:	add	x9, x10, x9
     32c:	str	x9, [sp, #8]
     330:	ldr	w8, [sp, #4]
     334:	mov	w9, w8
     338:	ldur	x10, [x29, #-16]
     33c:	ldr	x11, [x10, #16]
     340:	add	x9, x11, x9
     344:	str	x9, [x10, #16]
     348:	ldr	x8, [sp, #16]
     34c:	cbnz	x8, 16c <gz_read+0x64>
     350:	ldr	x8, [sp, #8]
     354:	stur	x8, [x29, #-8]
     358:	ldur	x0, [x29, #-8]
     35c:	ldp	x29, x30, [sp, #48]
     360:	add	sp, sp, #0x40
     364:	ret

0000000000000368 <gzfread>:
     368:	sub	sp, sp, #0x50
     36c:	stp	x29, x30, [sp, #64]
     370:	add	x29, sp, #0x40
     374:	stur	x0, [x29, #-16]
     378:	stur	x1, [x29, #-24]
     37c:	str	x2, [sp, #32]
     380:	str	x3, [sp, #24]
     384:	ldr	x8, [sp, #24]
     388:	cbnz	x8, 394 <gzfread+0x2c>
     38c:	stur	xzr, [x29, #-8]
     390:	b	45c <gzfread+0xf4>
     394:	ldr	x8, [sp, #24]
     398:	str	x8, [sp, #8]
     39c:	ldr	x8, [sp, #8]
     3a0:	ldr	w9, [x8, #24]
     3a4:	mov	w10, #0x1c4f                	// #7247
     3a8:	cmp	w9, w10
     3ac:	b.ne	3d0 <gzfread+0x68>  // b.any
     3b0:	ldr	x8, [sp, #8]
     3b4:	ldr	w9, [x8, #108]
     3b8:	cbz	w9, 3d8 <gzfread+0x70>
     3bc:	ldr	x8, [sp, #8]
     3c0:	ldr	w9, [x8, #108]
     3c4:	mov	w10, #0xfffffffb            	// #-5
     3c8:	cmp	w9, w10
     3cc:	b.eq	3d8 <gzfread+0x70>  // b.none
     3d0:	stur	xzr, [x29, #-8]
     3d4:	b	45c <gzfread+0xf4>
     3d8:	ldr	x8, [sp, #32]
     3dc:	ldur	x9, [x29, #-24]
     3e0:	mul	x8, x8, x9
     3e4:	str	x8, [sp, #16]
     3e8:	ldur	x8, [x29, #-24]
     3ec:	cbz	x8, 424 <gzfread+0xbc>
     3f0:	ldr	x8, [sp, #16]
     3f4:	ldur	x9, [x29, #-24]
     3f8:	udiv	x8, x8, x9
     3fc:	ldr	x9, [sp, #32]
     400:	cmp	x8, x9
     404:	b.eq	424 <gzfread+0xbc>  // b.none
     408:	ldr	x0, [sp, #8]
     40c:	mov	w1, #0xfffffffe            	// #-2
     410:	adrp	x2, 0 <gzread>
     414:	add	x2, x2, #0x0
     418:	bl	0 <gz_error>
     41c:	stur	xzr, [x29, #-8]
     420:	b	45c <gzfread+0xf4>
     424:	ldr	x8, [sp, #16]
     428:	cbz	x8, 44c <gzfread+0xe4>
     42c:	ldr	x0, [sp, #8]
     430:	ldur	x1, [x29, #-16]
     434:	ldr	x2, [sp, #16]
     438:	bl	108 <gz_read>
     43c:	ldur	x8, [x29, #-24]
     440:	udiv	x8, x0, x8
     444:	str	x8, [sp]
     448:	b	454 <gzfread+0xec>
     44c:	mov	x8, xzr
     450:	str	x8, [sp]
     454:	ldr	x8, [sp]
     458:	stur	x8, [x29, #-8]
     45c:	ldur	x0, [x29, #-8]
     460:	ldp	x29, x30, [sp, #64]
     464:	add	sp, sp, #0x50
     468:	ret

000000000000046c <gzgetc>:
     46c:	sub	sp, sp, #0x40
     470:	stp	x29, x30, [sp, #48]
     474:	add	x29, sp, #0x30
     478:	stur	x0, [x29, #-16]
     47c:	ldur	x8, [x29, #-16]
     480:	cbnz	x8, 490 <gzgetc+0x24>
     484:	mov	w8, #0xffffffff            	// #-1
     488:	stur	w8, [x29, #-4]
     48c:	b	55c <gzgetc+0xf0>
     490:	ldur	x8, [x29, #-16]
     494:	str	x8, [sp, #16]
     498:	ldr	x8, [sp, #16]
     49c:	ldr	w9, [x8, #24]
     4a0:	mov	w10, #0x1c4f                	// #7247
     4a4:	cmp	w9, w10
     4a8:	b.ne	4cc <gzgetc+0x60>  // b.any
     4ac:	ldr	x8, [sp, #16]
     4b0:	ldr	w9, [x8, #108]
     4b4:	cbz	w9, 4d8 <gzgetc+0x6c>
     4b8:	ldr	x8, [sp, #16]
     4bc:	ldr	w9, [x8, #108]
     4c0:	mov	w10, #0xfffffffb            	// #-5
     4c4:	cmp	w9, w10
     4c8:	b.eq	4d8 <gzgetc+0x6c>  // b.none
     4cc:	mov	w8, #0xffffffff            	// #-1
     4d0:	stur	w8, [x29, #-4]
     4d4:	b	55c <gzgetc+0xf0>
     4d8:	ldr	x8, [sp, #16]
     4dc:	ldr	w9, [x8]
     4e0:	cbz	w9, 520 <gzgetc+0xb4>
     4e4:	ldr	x8, [sp, #16]
     4e8:	ldr	w9, [x8]
     4ec:	subs	w9, w9, #0x1
     4f0:	str	w9, [x8]
     4f4:	ldr	x8, [sp, #16]
     4f8:	ldr	x10, [x8, #16]
     4fc:	add	x10, x10, #0x1
     500:	str	x10, [x8, #16]
     504:	ldr	x8, [sp, #16]
     508:	ldr	x10, [x8, #8]
     50c:	add	x11, x10, #0x1
     510:	str	x11, [x8, #8]
     514:	ldrb	w9, [x10]
     518:	stur	w9, [x29, #-4]
     51c:	b	55c <gzgetc+0xf0>
     520:	ldr	x0, [sp, #16]
     524:	sub	x1, x29, #0x15
     528:	mov	x2, #0x1                   	// #1
     52c:	bl	108 <gz_read>
     530:	stur	w0, [x29, #-20]
     534:	ldur	w8, [x29, #-20]
     538:	cmp	w8, #0x1
     53c:	b.ge	54c <gzgetc+0xe0>  // b.tcont
     540:	mov	w8, #0xffffffff            	// #-1
     544:	str	w8, [sp, #12]
     548:	b	554 <gzgetc+0xe8>
     54c:	ldurb	w8, [x29, #-21]
     550:	str	w8, [sp, #12]
     554:	ldr	w8, [sp, #12]
     558:	stur	w8, [x29, #-4]
     55c:	ldur	w0, [x29, #-4]
     560:	ldp	x29, x30, [sp, #48]
     564:	add	sp, sp, #0x40
     568:	ret

000000000000056c <gzgetc_>:
     56c:	sub	sp, sp, #0x20
     570:	stp	x29, x30, [sp, #16]
     574:	add	x29, sp, #0x10
     578:	str	x0, [sp, #8]
     57c:	ldr	x0, [sp, #8]
     580:	bl	46c <gzgetc>
     584:	ldp	x29, x30, [sp, #16]
     588:	add	sp, sp, #0x20
     58c:	ret

0000000000000590 <gzungetc>:
     590:	sub	sp, sp, #0x40
     594:	stp	x29, x30, [sp, #48]
     598:	add	x29, sp, #0x30
     59c:	stur	w0, [x29, #-8]
     5a0:	stur	x1, [x29, #-16]
     5a4:	ldur	x8, [x29, #-16]
     5a8:	cbnz	x8, 5b8 <gzungetc+0x28>
     5ac:	mov	w8, #0xffffffff            	// #-1
     5b0:	stur	w8, [x29, #-4]
     5b4:	b	804 <gzungetc+0x274>
     5b8:	ldur	x8, [x29, #-16]
     5bc:	str	x8, [sp, #24]
     5c0:	ldr	x8, [sp, #24]
     5c4:	ldr	w9, [x8, #24]
     5c8:	mov	w10, #0x1c4f                	// #7247
     5cc:	cmp	w9, w10
     5d0:	b.ne	5f4 <gzungetc+0x64>  // b.any
     5d4:	ldr	x8, [sp, #24]
     5d8:	ldr	w9, [x8, #108]
     5dc:	cbz	w9, 600 <gzungetc+0x70>
     5e0:	ldr	x8, [sp, #24]
     5e4:	ldr	w9, [x8, #108]
     5e8:	mov	w10, #0xfffffffb            	// #-5
     5ec:	cmp	w9, w10
     5f0:	b.eq	600 <gzungetc+0x70>  // b.none
     5f4:	mov	w8, #0xffffffff            	// #-1
     5f8:	stur	w8, [x29, #-4]
     5fc:	b	804 <gzungetc+0x274>
     600:	ldr	x8, [sp, #24]
     604:	ldr	w9, [x8, #104]
     608:	cbz	w9, 63c <gzungetc+0xac>
     60c:	ldr	x8, [sp, #24]
     610:	str	wzr, [x8, #104]
     614:	ldr	x0, [sp, #24]
     618:	ldr	x8, [sp, #24]
     61c:	ldr	x1, [x8, #96]
     620:	bl	814 <gz_skip>
     624:	mov	w9, #0xffffffff            	// #-1
     628:	cmp	w0, w9
     62c:	b.ne	63c <gzungetc+0xac>  // b.any
     630:	mov	w8, #0xffffffff            	// #-1
     634:	stur	w8, [x29, #-4]
     638:	b	804 <gzungetc+0x274>
     63c:	ldur	w8, [x29, #-8]
     640:	cmp	w8, #0x0
     644:	cset	w8, ge  // ge = tcont
     648:	tbnz	w8, #0, 658 <gzungetc+0xc8>
     64c:	mov	w8, #0xffffffff            	// #-1
     650:	stur	w8, [x29, #-4]
     654:	b	804 <gzungetc+0x274>
     658:	ldr	x8, [sp, #24]
     65c:	ldr	w9, [x8]
     660:	cbnz	w9, 6d4 <gzungetc+0x144>
     664:	ldr	x8, [sp, #24]
     668:	mov	w9, #0x1                   	// #1
     66c:	str	w9, [x8]
     670:	ldr	x8, [sp, #24]
     674:	ldr	x8, [x8, #56]
     678:	ldr	x10, [sp, #24]
     67c:	ldr	w9, [x10, #40]
     680:	lsl	w9, w9, #1
     684:	mov	w10, w9
     688:	ubfx	x10, x10, #0, #32
     68c:	add	x8, x8, x10
     690:	mov	x10, #0xffffffffffffffff    	// #-1
     694:	add	x8, x8, x10
     698:	ldr	x10, [sp, #24]
     69c:	str	x8, [x10, #8]
     6a0:	ldur	w9, [x29, #-8]
     6a4:	ldr	x8, [sp, #24]
     6a8:	ldr	x8, [x8, #8]
     6ac:	strb	w9, [x8]
     6b0:	ldr	x8, [sp, #24]
     6b4:	ldr	x10, [x8, #16]
     6b8:	subs	x10, x10, #0x1
     6bc:	str	x10, [x8, #16]
     6c0:	ldr	x8, [sp, #24]
     6c4:	str	wzr, [x8, #84]
     6c8:	ldur	w9, [x29, #-8]
     6cc:	stur	w9, [x29, #-4]
     6d0:	b	804 <gzungetc+0x274>
     6d4:	ldr	x8, [sp, #24]
     6d8:	ldr	w9, [x8]
     6dc:	ldr	x8, [sp, #24]
     6e0:	ldr	w10, [x8, #40]
     6e4:	lsl	w10, w10, #1
     6e8:	cmp	w9, w10
     6ec:	b.ne	710 <gzungetc+0x180>  // b.any
     6f0:	ldr	x0, [sp, #24]
     6f4:	mov	w1, #0xfffffffd            	// #-3
     6f8:	adrp	x2, 0 <gzread>
     6fc:	add	x2, x2, #0x0
     700:	bl	0 <gz_error>
     704:	mov	w8, #0xffffffff            	// #-1
     708:	stur	w8, [x29, #-4]
     70c:	b	804 <gzungetc+0x274>
     710:	ldr	x8, [sp, #24]
     714:	ldr	x8, [x8, #8]
     718:	ldr	x9, [sp, #24]
     71c:	ldr	x9, [x9, #56]
     720:	cmp	x8, x9
     724:	b.ne	7b0 <gzungetc+0x220>  // b.any
     728:	ldr	x8, [sp, #24]
     72c:	ldr	x8, [x8, #56]
     730:	ldr	x9, [sp, #24]
     734:	ldr	w10, [x9]
     738:	mov	w9, w10
     73c:	add	x8, x8, x9
     740:	str	x8, [sp, #16]
     744:	ldr	x8, [sp, #24]
     748:	ldr	x8, [x8, #56]
     74c:	ldr	x9, [sp, #24]
     750:	ldr	w10, [x9, #40]
     754:	lsl	w10, w10, #1
     758:	mov	w9, w10
     75c:	ubfx	x9, x9, #0, #32
     760:	add	x8, x8, x9
     764:	str	x8, [sp, #8]
     768:	ldr	x8, [sp, #16]
     76c:	ldr	x9, [sp, #24]
     770:	ldr	x9, [x9, #56]
     774:	cmp	x8, x9
     778:	b.ls	7a4 <gzungetc+0x214>  // b.plast
     77c:	ldr	x8, [sp, #16]
     780:	mov	x9, #0xffffffffffffffff    	// #-1
     784:	add	x8, x8, x9
     788:	str	x8, [sp, #16]
     78c:	ldrb	w10, [x8]
     790:	ldr	x8, [sp, #8]
     794:	add	x8, x8, x9
     798:	str	x8, [sp, #8]
     79c:	strb	w10, [x8]
     7a0:	b	768 <gzungetc+0x1d8>
     7a4:	ldr	x8, [sp, #8]
     7a8:	ldr	x9, [sp, #24]
     7ac:	str	x8, [x9, #8]
     7b0:	ldr	x8, [sp, #24]
     7b4:	ldr	w9, [x8]
     7b8:	add	w9, w9, #0x1
     7bc:	str	w9, [x8]
     7c0:	ldr	x8, [sp, #24]
     7c4:	ldr	x10, [x8, #8]
     7c8:	mov	x11, #0xffffffffffffffff    	// #-1
     7cc:	add	x10, x10, x11
     7d0:	str	x10, [x8, #8]
     7d4:	ldur	w9, [x29, #-8]
     7d8:	ldr	x8, [sp, #24]
     7dc:	ldr	x8, [x8, #8]
     7e0:	strb	w9, [x8]
     7e4:	ldr	x8, [sp, #24]
     7e8:	ldr	x10, [x8, #16]
     7ec:	subs	x10, x10, #0x1
     7f0:	str	x10, [x8, #16]
     7f4:	ldr	x8, [sp, #24]
     7f8:	str	wzr, [x8, #84]
     7fc:	ldur	w9, [x29, #-8]
     800:	stur	w9, [x29, #-4]
     804:	ldur	w0, [x29, #-4]
     808:	ldp	x29, x30, [sp, #48]
     80c:	add	sp, sp, #0x40
     810:	ret

0000000000000814 <gz_skip>:
     814:	sub	sp, sp, #0x30
     818:	stp	x29, x30, [sp, #32]
     81c:	add	x29, sp, #0x20
     820:	str	x0, [sp, #16]
     824:	str	x1, [sp, #8]
     828:	ldr	x8, [sp, #8]
     82c:	cbz	x8, 910 <gz_skip+0xfc>
     830:	ldr	x8, [sp, #16]
     834:	ldr	w9, [x8]
     838:	cbz	w9, 8d0 <gz_skip+0xbc>
     83c:	ldr	x8, [sp, #16]
     840:	ldr	w9, [x8]
     844:	mov	w8, w9
     848:	ldr	x10, [sp, #8]
     84c:	cmp	x8, x10
     850:	b.le	860 <gz_skip+0x4c>
     854:	ldr	x8, [sp, #8]
     858:	str	w8, [sp]
     85c:	b	86c <gz_skip+0x58>
     860:	ldr	x8, [sp, #16]
     864:	ldr	w9, [x8]
     868:	str	w9, [sp]
     86c:	ldr	w8, [sp]
     870:	str	w8, [sp, #4]
     874:	ldr	w8, [sp, #4]
     878:	ldr	x9, [sp, #16]
     87c:	ldr	w10, [x9]
     880:	subs	w8, w10, w8
     884:	str	w8, [x9]
     888:	ldr	w8, [sp, #4]
     88c:	mov	w9, w8
     890:	ldr	x11, [sp, #16]
     894:	ldr	x12, [x11, #8]
     898:	add	x9, x12, x9
     89c:	str	x9, [x11, #8]
     8a0:	ldr	w8, [sp, #4]
     8a4:	mov	w9, w8
     8a8:	ldr	x11, [sp, #16]
     8ac:	ldr	x12, [x11, #16]
     8b0:	add	x9, x12, x9
     8b4:	str	x9, [x11, #16]
     8b8:	ldr	w8, [sp, #4]
     8bc:	mov	w9, w8
     8c0:	ldr	x11, [sp, #8]
     8c4:	subs	x9, x11, x9
     8c8:	str	x9, [sp, #8]
     8cc:	b	90c <gz_skip+0xf8>
     8d0:	ldr	x8, [sp, #16]
     8d4:	ldr	w9, [x8, #80]
     8d8:	cbz	w9, 8ec <gz_skip+0xd8>
     8dc:	ldr	x8, [sp, #16]
     8e0:	ldr	w9, [x8, #128]
     8e4:	cbnz	w9, 8ec <gz_skip+0xd8>
     8e8:	b	910 <gz_skip+0xfc>
     8ec:	ldr	x0, [sp, #16]
     8f0:	bl	ba4 <gz_fetch>
     8f4:	mov	w8, #0xffffffff            	// #-1
     8f8:	cmp	w0, w8
     8fc:	b.ne	90c <gz_skip+0xf8>  // b.any
     900:	mov	w8, #0xffffffff            	// #-1
     904:	stur	w8, [x29, #-4]
     908:	b	914 <gz_skip+0x100>
     90c:	b	828 <gz_skip+0x14>
     910:	stur	wzr, [x29, #-4]
     914:	ldur	w0, [x29, #-4]
     918:	ldp	x29, x30, [sp, #32]
     91c:	add	sp, sp, #0x30
     920:	ret

0000000000000924 <gzgets>:
     924:	sub	sp, sp, #0x60
     928:	stp	x29, x30, [sp, #80]
     92c:	add	x29, sp, #0x50
     930:	stur	x0, [x29, #-16]
     934:	stur	x1, [x29, #-24]
     938:	stur	w2, [x29, #-28]
     93c:	ldur	x8, [x29, #-16]
     940:	cbz	x8, 958 <gzgets+0x34>
     944:	ldur	x8, [x29, #-24]
     948:	cbz	x8, 958 <gzgets+0x34>
     94c:	ldur	w8, [x29, #-28]
     950:	cmp	w8, #0x1
     954:	b.ge	964 <gzgets+0x40>  // b.tcont
     958:	mov	x8, xzr
     95c:	stur	x8, [x29, #-8]
     960:	b	b94 <gzgets+0x270>
     964:	ldur	x8, [x29, #-16]
     968:	str	x8, [sp, #16]
     96c:	ldr	x8, [sp, #16]
     970:	ldr	w9, [x8, #24]
     974:	mov	w10, #0x1c4f                	// #7247
     978:	cmp	w9, w10
     97c:	b.ne	9a0 <gzgets+0x7c>  // b.any
     980:	ldr	x8, [sp, #16]
     984:	ldr	w9, [x8, #108]
     988:	cbz	w9, 9ac <gzgets+0x88>
     98c:	ldr	x8, [sp, #16]
     990:	ldr	w9, [x8, #108]
     994:	mov	w10, #0xfffffffb            	// #-5
     998:	cmp	w9, w10
     99c:	b.eq	9ac <gzgets+0x88>  // b.none
     9a0:	mov	x8, xzr
     9a4:	stur	x8, [x29, #-8]
     9a8:	b	b94 <gzgets+0x270>
     9ac:	ldr	x8, [sp, #16]
     9b0:	ldr	w9, [x8, #104]
     9b4:	cbz	w9, 9e8 <gzgets+0xc4>
     9b8:	ldr	x8, [sp, #16]
     9bc:	str	wzr, [x8, #104]
     9c0:	ldr	x0, [sp, #16]
     9c4:	ldr	x8, [sp, #16]
     9c8:	ldr	x1, [x8, #96]
     9cc:	bl	814 <gz_skip>
     9d0:	mov	w9, #0xffffffff            	// #-1
     9d4:	cmp	w0, w9
     9d8:	b.ne	9e8 <gzgets+0xc4>  // b.any
     9dc:	mov	x8, xzr
     9e0:	stur	x8, [x29, #-8]
     9e4:	b	b94 <gzgets+0x270>
     9e8:	ldur	x8, [x29, #-24]
     9ec:	str	x8, [sp, #32]
     9f0:	ldur	w9, [x29, #-28]
     9f4:	subs	w9, w9, #0x1
     9f8:	stur	w9, [x29, #-32]
     9fc:	ldur	w9, [x29, #-32]
     a00:	cbz	w9, b64 <gzgets+0x240>
     a04:	ldr	x8, [sp, #16]
     a08:	ldr	w9, [x8]
     a0c:	cbnz	w9, a30 <gzgets+0x10c>
     a10:	ldr	x0, [sp, #16]
     a14:	bl	ba4 <gz_fetch>
     a18:	mov	w8, #0xffffffff            	// #-1
     a1c:	cmp	w0, w8
     a20:	b.ne	a30 <gzgets+0x10c>  // b.any
     a24:	mov	x8, xzr
     a28:	stur	x8, [x29, #-8]
     a2c:	b	b94 <gzgets+0x270>
     a30:	ldr	x8, [sp, #16]
     a34:	ldr	w9, [x8]
     a38:	cbnz	w9, a4c <gzgets+0x128>
     a3c:	ldr	x8, [sp, #16]
     a40:	mov	w9, #0x1                   	// #1
     a44:	str	w9, [x8, #84]
     a48:	b	b64 <gzgets+0x240>
     a4c:	ldr	x8, [sp, #16]
     a50:	ldr	w9, [x8]
     a54:	ldur	w10, [x29, #-32]
     a58:	cmp	w9, w10
     a5c:	b.ls	a6c <gzgets+0x148>  // b.plast
     a60:	ldur	w8, [x29, #-32]
     a64:	str	w8, [sp, #12]
     a68:	b	a78 <gzgets+0x154>
     a6c:	ldr	x8, [sp, #16]
     a70:	ldr	w9, [x8]
     a74:	str	w9, [sp, #12]
     a78:	ldr	w8, [sp, #12]
     a7c:	stur	w8, [x29, #-36]
     a80:	ldr	x9, [sp, #16]
     a84:	ldr	x0, [x9, #8]
     a88:	ldur	w8, [x29, #-36]
     a8c:	mov	w2, w8
     a90:	mov	w1, #0xa                   	// #10
     a94:	bl	0 <memchr>
     a98:	str	x0, [sp, #24]
     a9c:	ldr	x9, [sp, #24]
     aa0:	cbz	x9, abc <gzgets+0x198>
     aa4:	ldr	x8, [sp, #24]
     aa8:	ldr	x9, [sp, #16]
     aac:	ldr	x9, [x9, #8]
     ab0:	subs	x8, x8, x9
     ab4:	add	w8, w8, #0x1
     ab8:	stur	w8, [x29, #-36]
     abc:	ldur	x0, [x29, #-24]
     ac0:	ldr	x8, [sp, #16]
     ac4:	ldr	x1, [x8, #8]
     ac8:	ldur	w9, [x29, #-36]
     acc:	mov	w2, w9
     ad0:	bl	0 <memcpy>
     ad4:	ldur	w9, [x29, #-36]
     ad8:	ldr	x8, [sp, #16]
     adc:	ldr	w10, [x8]
     ae0:	subs	w9, w10, w9
     ae4:	str	w9, [x8]
     ae8:	ldur	w9, [x29, #-36]
     aec:	mov	w8, w9
     af0:	ldr	x11, [sp, #16]
     af4:	ldr	x12, [x11, #8]
     af8:	add	x8, x12, x8
     afc:	str	x8, [x11, #8]
     b00:	ldur	w9, [x29, #-36]
     b04:	mov	w8, w9
     b08:	ldr	x11, [sp, #16]
     b0c:	ldr	x12, [x11, #16]
     b10:	add	x8, x12, x8
     b14:	str	x8, [x11, #16]
     b18:	ldur	w9, [x29, #-36]
     b1c:	ldur	w10, [x29, #-32]
     b20:	subs	w9, w10, w9
     b24:	stur	w9, [x29, #-32]
     b28:	ldur	w9, [x29, #-36]
     b2c:	mov	w8, w9
     b30:	ldur	x11, [x29, #-24]
     b34:	add	x8, x11, x8
     b38:	stur	x8, [x29, #-24]
     b3c:	ldur	w8, [x29, #-32]
     b40:	mov	w9, #0x0                   	// #0
     b44:	str	w9, [sp, #8]
     b48:	cbz	w8, b5c <gzgets+0x238>
     b4c:	ldr	x8, [sp, #24]
     b50:	cmp	x8, #0x0
     b54:	cset	w9, eq  // eq = none
     b58:	str	w9, [sp, #8]
     b5c:	ldr	w8, [sp, #8]
     b60:	tbnz	w8, #0, a04 <gzgets+0xe0>
     b64:	ldur	x8, [x29, #-24]
     b68:	ldr	x9, [sp, #32]
     b6c:	cmp	x8, x9
     b70:	b.ne	b80 <gzgets+0x25c>  // b.any
     b74:	mov	x8, xzr
     b78:	stur	x8, [x29, #-8]
     b7c:	b	b94 <gzgets+0x270>
     b80:	ldur	x8, [x29, #-24]
     b84:	mov	w9, #0x0                   	// #0
     b88:	strb	w9, [x8]
     b8c:	ldr	x8, [sp, #32]
     b90:	stur	x8, [x29, #-8]
     b94:	ldur	x0, [x29, #-8]
     b98:	ldp	x29, x30, [sp, #80]
     b9c:	add	sp, sp, #0x60
     ba0:	ret

0000000000000ba4 <gz_fetch>:
     ba4:	sub	sp, sp, #0x40
     ba8:	stp	x29, x30, [sp, #48]
     bac:	add	x29, sp, #0x30
     bb0:	stur	x0, [x29, #-16]
     bb4:	ldur	x8, [x29, #-16]
     bb8:	add	x8, x8, #0x78
     bbc:	str	x8, [sp, #24]
     bc0:	ldur	x8, [x29, #-16]
     bc4:	ldr	w9, [x8, #68]
     bc8:	str	w9, [sp, #20]
     bcc:	cbz	w9, bf4 <gz_fetch+0x50>
     bd0:	b	bd4 <gz_fetch+0x30>
     bd4:	ldr	w8, [sp, #20]
     bd8:	cmp	w8, #0x1
     bdc:	b.eq	c2c <gz_fetch+0x88>  // b.none
     be0:	b	be4 <gz_fetch+0x40>
     be4:	ldr	w8, [sp, #20]
     be8:	cmp	w8, #0x2
     bec:	b.eq	c7c <gz_fetch+0xd8>  // b.none
     bf0:	b	cc0 <gz_fetch+0x11c>
     bf4:	ldur	x0, [x29, #-16]
     bf8:	bl	d98 <gz_look>
     bfc:	mov	w8, #0xffffffff            	// #-1
     c00:	cmp	w0, w8
     c04:	b.ne	c14 <gz_fetch+0x70>  // b.any
     c08:	mov	w8, #0xffffffff            	// #-1
     c0c:	stur	w8, [x29, #-4]
     c10:	b	d10 <gz_fetch+0x16c>
     c14:	ldur	x8, [x29, #-16]
     c18:	ldr	w9, [x8, #68]
     c1c:	cbnz	w9, c28 <gz_fetch+0x84>
     c20:	stur	wzr, [x29, #-4]
     c24:	b	d10 <gz_fetch+0x16c>
     c28:	b	cc0 <gz_fetch+0x11c>
     c2c:	ldur	x0, [x29, #-16]
     c30:	ldur	x8, [x29, #-16]
     c34:	ldr	x1, [x8, #56]
     c38:	ldur	x8, [x29, #-16]
     c3c:	ldr	w9, [x8, #40]
     c40:	lsl	w2, w9, #1
     c44:	ldur	x3, [x29, #-16]
     c48:	bl	1138 <gz_load>
     c4c:	mov	w9, #0xffffffff            	// #-1
     c50:	cmp	w0, w9
     c54:	b.ne	c64 <gz_fetch+0xc0>  // b.any
     c58:	mov	w8, #0xffffffff            	// #-1
     c5c:	stur	w8, [x29, #-4]
     c60:	b	d10 <gz_fetch+0x16c>
     c64:	ldur	x8, [x29, #-16]
     c68:	ldr	x8, [x8, #56]
     c6c:	ldur	x9, [x29, #-16]
     c70:	str	x8, [x9, #8]
     c74:	stur	wzr, [x29, #-4]
     c78:	b	d10 <gz_fetch+0x16c>
     c7c:	ldur	x8, [x29, #-16]
     c80:	ldr	w9, [x8, #40]
     c84:	lsl	w9, w9, #1
     c88:	ldr	x8, [sp, #24]
     c8c:	str	w9, [x8, #32]
     c90:	ldur	x8, [x29, #-16]
     c94:	ldr	x8, [x8, #56]
     c98:	ldr	x10, [sp, #24]
     c9c:	str	x8, [x10, #24]
     ca0:	ldur	x0, [x29, #-16]
     ca4:	bl	1270 <gz_decomp>
     ca8:	mov	w9, #0xffffffff            	// #-1
     cac:	cmp	w0, w9
     cb0:	b.ne	cc0 <gz_fetch+0x11c>  // b.any
     cb4:	mov	w8, #0xffffffff            	// #-1
     cb8:	stur	w8, [x29, #-4]
     cbc:	b	d10 <gz_fetch+0x16c>
     cc0:	ldur	x8, [x29, #-16]
     cc4:	ldr	w9, [x8]
     cc8:	mov	w10, #0x0                   	// #0
     ccc:	str	w10, [sp, #16]
     cd0:	cbnz	w9, d04 <gz_fetch+0x160>
     cd4:	ldur	x8, [x29, #-16]
     cd8:	ldr	w9, [x8, #80]
     cdc:	mov	w10, #0x1                   	// #1
     ce0:	str	w10, [sp, #12]
     ce4:	cbz	w9, cfc <gz_fetch+0x158>
     ce8:	ldr	x8, [sp, #24]
     cec:	ldr	w9, [x8, #8]
     cf0:	cmp	w9, #0x0
     cf4:	cset	w9, ne  // ne = any
     cf8:	str	w9, [sp, #12]
     cfc:	ldr	w8, [sp, #12]
     d00:	str	w8, [sp, #16]
     d04:	ldr	w8, [sp, #16]
     d08:	tbnz	w8, #0, bc0 <gz_fetch+0x1c>
     d0c:	stur	wzr, [x29, #-4]
     d10:	ldur	w0, [x29, #-4]
     d14:	ldp	x29, x30, [sp, #48]
     d18:	add	sp, sp, #0x40
     d1c:	ret

0000000000000d20 <gzdirect>:
     d20:	sub	sp, sp, #0x30
     d24:	stp	x29, x30, [sp, #32]
     d28:	add	x29, sp, #0x20
     d2c:	str	x0, [sp, #16]
     d30:	ldr	x8, [sp, #16]
     d34:	cbnz	x8, d40 <gzdirect+0x20>
     d38:	stur	wzr, [x29, #-4]
     d3c:	b	d88 <gzdirect+0x68>
     d40:	ldr	x8, [sp, #16]
     d44:	str	x8, [sp, #8]
     d48:	ldr	x8, [sp, #8]
     d4c:	ldr	w9, [x8, #24]
     d50:	mov	w10, #0x1c4f                	// #7247
     d54:	cmp	w9, w10
     d58:	b.ne	d7c <gzdirect+0x5c>  // b.any
     d5c:	ldr	x8, [sp, #8]
     d60:	ldr	w9, [x8, #68]
     d64:	cbnz	w9, d7c <gzdirect+0x5c>
     d68:	ldr	x8, [sp, #8]
     d6c:	ldr	w9, [x8]
     d70:	cbnz	w9, d7c <gzdirect+0x5c>
     d74:	ldr	x0, [sp, #8]
     d78:	bl	d98 <gz_look>
     d7c:	ldr	x8, [sp, #8]
     d80:	ldr	w9, [x8, #64]
     d84:	stur	w9, [x29, #-4]
     d88:	ldur	w0, [x29, #-4]
     d8c:	ldp	x29, x30, [sp, #32]
     d90:	add	sp, sp, #0x30
     d94:	ret

0000000000000d98 <gz_look>:
     d98:	sub	sp, sp, #0x30
     d9c:	stp	x29, x30, [sp, #32]
     da0:	add	x29, sp, #0x20
     da4:	str	x0, [sp, #16]
     da8:	ldr	x8, [sp, #16]
     dac:	add	x8, x8, #0x78
     db0:	str	x8, [sp, #8]
     db4:	ldr	x8, [sp, #16]
     db8:	ldr	w9, [x8, #40]
     dbc:	cbnz	w9, ee4 <gz_look+0x14c>
     dc0:	ldr	x8, [sp, #16]
     dc4:	ldr	w9, [x8, #44]
     dc8:	mov	w0, w9
     dcc:	bl	0 <malloc>
     dd0:	ldr	x8, [sp, #16]
     dd4:	str	x0, [x8, #48]
     dd8:	ldr	x8, [sp, #16]
     ddc:	ldr	w9, [x8, #44]
     de0:	lsl	w9, w9, #1
     de4:	mov	w8, w9
     de8:	ubfx	x0, x8, #0, #32
     dec:	bl	0 <malloc>
     df0:	ldr	x8, [sp, #16]
     df4:	str	x0, [x8, #56]
     df8:	ldr	x8, [sp, #16]
     dfc:	ldr	x8, [x8, #48]
     e00:	cbz	x8, e10 <gz_look+0x78>
     e04:	ldr	x8, [sp, #16]
     e08:	ldr	x8, [x8, #56]
     e0c:	cbnz	x8, e48 <gz_look+0xb0>
     e10:	ldr	x8, [sp, #16]
     e14:	ldr	x0, [x8, #56]
     e18:	bl	0 <free>
     e1c:	ldr	x8, [sp, #16]
     e20:	ldr	x0, [x8, #48]
     e24:	bl	0 <free>
     e28:	ldr	x0, [sp, #16]
     e2c:	mov	w1, #0xfffffffc            	// #-4
     e30:	adrp	x2, 0 <gzread>
     e34:	add	x2, x2, #0x0
     e38:	bl	0 <gz_error>
     e3c:	mov	w9, #0xffffffff            	// #-1
     e40:	stur	w9, [x29, #-4]
     e44:	b	1020 <gz_look+0x288>
     e48:	ldr	x8, [sp, #16]
     e4c:	ldr	w9, [x8, #44]
     e50:	ldr	x8, [sp, #16]
     e54:	str	w9, [x8, #40]
     e58:	ldr	x8, [sp, #16]
     e5c:	mov	x10, xzr
     e60:	str	x10, [x8, #184]
     e64:	ldr	x8, [sp, #16]
     e68:	str	x10, [x8, #192]
     e6c:	ldr	x8, [sp, #16]
     e70:	str	x10, [x8, #200]
     e74:	ldr	x8, [sp, #16]
     e78:	str	wzr, [x8, #128]
     e7c:	ldr	x8, [sp, #16]
     e80:	str	x10, [x8, #120]
     e84:	ldr	x8, [sp, #16]
     e88:	add	x0, x8, #0x78
     e8c:	mov	w1, #0x1f                  	// #31
     e90:	adrp	x2, 0 <gzread>
     e94:	add	x2, x2, #0x0
     e98:	mov	w3, #0x70                  	// #112
     e9c:	bl	0 <inflateInit2_>
     ea0:	cbz	w0, ee4 <gz_look+0x14c>
     ea4:	ldr	x8, [sp, #16]
     ea8:	ldr	x0, [x8, #56]
     eac:	bl	0 <free>
     eb0:	ldr	x8, [sp, #16]
     eb4:	ldr	x0, [x8, #48]
     eb8:	bl	0 <free>
     ebc:	ldr	x8, [sp, #16]
     ec0:	str	wzr, [x8, #40]
     ec4:	ldr	x0, [sp, #16]
     ec8:	mov	w1, #0xfffffffc            	// #-4
     ecc:	adrp	x2, 0 <gzread>
     ed0:	add	x2, x2, #0x0
     ed4:	bl	0 <gz_error>
     ed8:	mov	w9, #0xffffffff            	// #-1
     edc:	stur	w9, [x29, #-4]
     ee0:	b	1020 <gz_look+0x288>
     ee4:	ldr	x8, [sp, #8]
     ee8:	ldr	w9, [x8, #8]
     eec:	cmp	w9, #0x2
     ef0:	b.cs	f28 <gz_look+0x190>  // b.hs, b.nlast
     ef4:	ldr	x0, [sp, #16]
     ef8:	bl	1460 <gz_avail>
     efc:	mov	w8, #0xffffffff            	// #-1
     f00:	cmp	w0, w8
     f04:	b.ne	f14 <gz_look+0x17c>  // b.any
     f08:	mov	w8, #0xffffffff            	// #-1
     f0c:	stur	w8, [x29, #-4]
     f10:	b	1020 <gz_look+0x288>
     f14:	ldr	x8, [sp, #8]
     f18:	ldr	w9, [x8, #8]
     f1c:	cbnz	w9, f28 <gz_look+0x190>
     f20:	stur	wzr, [x29, #-4]
     f24:	b	1020 <gz_look+0x288>
     f28:	ldr	x8, [sp, #8]
     f2c:	ldr	w9, [x8, #8]
     f30:	cmp	w9, #0x1
     f34:	b.ls	f84 <gz_look+0x1ec>  // b.plast
     f38:	ldr	x8, [sp, #8]
     f3c:	ldr	x8, [x8]
     f40:	ldrb	w9, [x8]
     f44:	cmp	w9, #0x1f
     f48:	b.ne	f84 <gz_look+0x1ec>  // b.any
     f4c:	ldr	x8, [sp, #8]
     f50:	ldr	x8, [x8]
     f54:	ldrb	w9, [x8, #1]
     f58:	cmp	w9, #0x8b
     f5c:	b.ne	f84 <gz_look+0x1ec>  // b.any
     f60:	ldr	x0, [sp, #8]
     f64:	bl	0 <inflateReset>
     f68:	ldr	x8, [sp, #16]
     f6c:	mov	w9, #0x2                   	// #2
     f70:	str	w9, [x8, #68]
     f74:	ldr	x8, [sp, #16]
     f78:	str	wzr, [x8, #64]
     f7c:	stur	wzr, [x29, #-4]
     f80:	b	1020 <gz_look+0x288>
     f84:	ldr	x8, [sp, #16]
     f88:	ldr	w9, [x8, #64]
     f8c:	cbnz	w9, fb4 <gz_look+0x21c>
     f90:	ldr	x8, [sp, #8]
     f94:	str	wzr, [x8, #8]
     f98:	ldr	x8, [sp, #16]
     f9c:	mov	w9, #0x1                   	// #1
     fa0:	str	w9, [x8, #80]
     fa4:	ldr	x8, [sp, #16]
     fa8:	str	wzr, [x8]
     fac:	stur	wzr, [x29, #-4]
     fb0:	b	1020 <gz_look+0x288>
     fb4:	ldr	x8, [sp, #16]
     fb8:	ldr	x8, [x8, #56]
     fbc:	ldr	x9, [sp, #16]
     fc0:	str	x8, [x9, #8]
     fc4:	ldr	x8, [sp, #8]
     fc8:	ldr	w10, [x8, #8]
     fcc:	cbz	w10, 1008 <gz_look+0x270>
     fd0:	ldr	x8, [sp, #16]
     fd4:	ldr	x0, [x8, #8]
     fd8:	ldr	x8, [sp, #8]
     fdc:	ldr	x1, [x8]
     fe0:	ldr	x8, [sp, #8]
     fe4:	ldr	w9, [x8, #8]
     fe8:	mov	w2, w9
     fec:	bl	0 <memcpy>
     ff0:	ldr	x8, [sp, #8]
     ff4:	ldr	w9, [x8, #8]
     ff8:	ldr	x8, [sp, #16]
     ffc:	str	w9, [x8]
    1000:	ldr	x8, [sp, #8]
    1004:	str	wzr, [x8, #8]
    1008:	ldr	x8, [sp, #16]
    100c:	mov	w9, #0x1                   	// #1
    1010:	str	w9, [x8, #68]
    1014:	ldr	x8, [sp, #16]
    1018:	str	w9, [x8, #64]
    101c:	stur	wzr, [x29, #-4]
    1020:	ldur	w0, [x29, #-4]
    1024:	ldp	x29, x30, [sp, #32]
    1028:	add	sp, sp, #0x30
    102c:	ret

0000000000001030 <gzclose_r>:
    1030:	sub	sp, sp, #0x40
    1034:	stp	x29, x30, [sp, #48]
    1038:	add	x29, sp, #0x30
    103c:	stur	x0, [x29, #-16]
    1040:	ldur	x8, [x29, #-16]
    1044:	cbnz	x8, 1054 <gzclose_r+0x24>
    1048:	mov	w8, #0xfffffffe            	// #-2
    104c:	stur	w8, [x29, #-4]
    1050:	b	1128 <gzclose_r+0xf8>
    1054:	ldur	x8, [x29, #-16]
    1058:	str	x8, [sp, #16]
    105c:	ldr	x8, [sp, #16]
    1060:	ldr	w9, [x8, #24]
    1064:	mov	w10, #0x1c4f                	// #7247
    1068:	cmp	w9, w10
    106c:	b.eq	107c <gzclose_r+0x4c>  // b.none
    1070:	mov	w8, #0xfffffffe            	// #-2
    1074:	stur	w8, [x29, #-4]
    1078:	b	1128 <gzclose_r+0xf8>
    107c:	ldr	x8, [sp, #16]
    1080:	ldr	w9, [x8, #40]
    1084:	cbz	w9, 10b0 <gzclose_r+0x80>
    1088:	ldr	x8, [sp, #16]
    108c:	add	x0, x8, #0x78
    1090:	bl	0 <inflateEnd>
    1094:	ldr	x8, [sp, #16]
    1098:	ldr	x8, [x8, #56]
    109c:	mov	x0, x8
    10a0:	bl	0 <free>
    10a4:	ldr	x8, [sp, #16]
    10a8:	ldr	x0, [x8, #48]
    10ac:	bl	0 <free>
    10b0:	ldr	x8, [sp, #16]
    10b4:	ldr	w9, [x8, #108]
    10b8:	mov	w10, #0xfffffffb            	// #-5
    10bc:	mov	w11, wzr
    10c0:	cmp	w9, w10
    10c4:	csel	w9, w10, w11, eq  // eq = none
    10c8:	str	w9, [sp, #24]
    10cc:	ldr	x0, [sp, #16]
    10d0:	mov	w1, w11
    10d4:	mov	x8, xzr
    10d8:	mov	x2, x8
    10dc:	bl	0 <gz_error>
    10e0:	ldr	x8, [sp, #16]
    10e4:	ldr	x0, [x8, #32]
    10e8:	bl	0 <free>
    10ec:	ldr	x8, [sp, #16]
    10f0:	ldr	w0, [x8, #28]
    10f4:	bl	0 <close>
    10f8:	stur	w0, [x29, #-20]
    10fc:	ldr	x0, [sp, #16]
    1100:	bl	0 <free>
    1104:	ldur	w9, [x29, #-20]
    1108:	cbz	w9, 1118 <gzclose_r+0xe8>
    110c:	mov	w8, #0xffffffff            	// #-1
    1110:	str	w8, [sp, #12]
    1114:	b	1120 <gzclose_r+0xf0>
    1118:	ldr	w8, [sp, #24]
    111c:	str	w8, [sp, #12]
    1120:	ldr	w8, [sp, #12]
    1124:	stur	w8, [x29, #-4]
    1128:	ldur	w0, [x29, #-4]
    112c:	ldp	x29, x30, [sp, #48]
    1130:	add	sp, sp, #0x40
    1134:	ret

0000000000001138 <gz_load>:
    1138:	sub	sp, sp, #0x60
    113c:	stp	x29, x30, [sp, #80]
    1140:	add	x29, sp, #0x50
    1144:	mov	w8, #0x40000000            	// #1073741824
    1148:	stur	x0, [x29, #-16]
    114c:	stur	x1, [x29, #-24]
    1150:	stur	w2, [x29, #-28]
    1154:	str	x3, [sp, #40]
    1158:	str	w8, [sp, #28]
    115c:	ldr	x9, [sp, #40]
    1160:	str	wzr, [x9]
    1164:	ldur	w8, [x29, #-28]
    1168:	ldr	x9, [sp, #40]
    116c:	ldr	w10, [x9]
    1170:	subs	w8, w8, w10
    1174:	str	w8, [sp, #32]
    1178:	ldr	w8, [sp, #32]
    117c:	ldr	w10, [sp, #28]
    1180:	cmp	w8, w10
    1184:	b.ls	1190 <gz_load+0x58>  // b.plast
    1188:	ldr	w8, [sp, #28]
    118c:	str	w8, [sp, #32]
    1190:	ldur	x8, [x29, #-16]
    1194:	ldr	w0, [x8, #28]
    1198:	ldur	x8, [x29, #-24]
    119c:	ldr	x9, [sp, #40]
    11a0:	ldr	w10, [x9]
    11a4:	mov	w9, w10
    11a8:	add	x1, x8, x9
    11ac:	ldr	w10, [sp, #32]
    11b0:	mov	w2, w10
    11b4:	bl	0 <read>
    11b8:	str	w0, [sp, #36]
    11bc:	ldr	w10, [sp, #36]
    11c0:	cmp	w10, #0x0
    11c4:	cset	w10, gt
    11c8:	tbnz	w10, #0, 11d0 <gz_load+0x98>
    11cc:	b	11f8 <gz_load+0xc0>
    11d0:	ldr	w8, [sp, #36]
    11d4:	ldr	x9, [sp, #40]
    11d8:	ldr	w10, [x9]
    11dc:	add	w8, w10, w8
    11e0:	str	w8, [x9]
    11e4:	ldr	x8, [sp, #40]
    11e8:	ldr	w9, [x8]
    11ec:	ldur	w10, [x29, #-28]
    11f0:	cmp	w9, w10
    11f4:	b.cc	1164 <gz_load+0x2c>  // b.lo, b.ul, b.last
    11f8:	ldr	w8, [sp, #36]
    11fc:	cmp	w8, #0x0
    1200:	cset	w8, ge  // ge = tcont
    1204:	tbnz	w8, #0, 1248 <gz_load+0x110>
    1208:	ldur	x0, [x29, #-16]
    120c:	str	x0, [sp, #16]
    1210:	bl	0 <__errno_location>
    1214:	ldr	w0, [x0]
    1218:	bl	0 <strerror>
    121c:	ldr	x8, [sp, #16]
    1220:	str	x0, [sp, #8]
    1224:	mov	x0, x8
    1228:	mov	w9, #0xffffffff            	// #-1
    122c:	mov	w1, w9
    1230:	ldr	x2, [sp, #8]
    1234:	str	w9, [sp, #4]
    1238:	bl	0 <gz_error>
    123c:	ldr	w9, [sp, #4]
    1240:	stur	w9, [x29, #-4]
    1244:	b	1260 <gz_load+0x128>
    1248:	ldr	w8, [sp, #36]
    124c:	cbnz	w8, 125c <gz_load+0x124>
    1250:	ldur	x8, [x29, #-16]
    1254:	mov	w9, #0x1                   	// #1
    1258:	str	w9, [x8, #80]
    125c:	stur	wzr, [x29, #-4]
    1260:	ldur	w0, [x29, #-4]
    1264:	ldp	x29, x30, [sp, #80]
    1268:	add	sp, sp, #0x60
    126c:	ret

0000000000001270 <gz_decomp>:
    1270:	sub	sp, sp, #0x50
    1274:	stp	x29, x30, [sp, #64]
    1278:	add	x29, sp, #0x40
    127c:	stur	x0, [x29, #-16]
    1280:	stur	wzr, [x29, #-20]
    1284:	ldur	x8, [x29, #-16]
    1288:	add	x8, x8, #0x78
    128c:	str	x8, [sp, #32]
    1290:	ldr	x8, [sp, #32]
    1294:	ldr	w9, [x8, #32]
    1298:	stur	w9, [x29, #-24]
    129c:	ldr	x8, [sp, #32]
    12a0:	ldr	w9, [x8, #8]
    12a4:	cbnz	w9, 12c8 <gz_decomp+0x58>
    12a8:	ldur	x0, [x29, #-16]
    12ac:	bl	1460 <gz_avail>
    12b0:	mov	w8, #0xffffffff            	// #-1
    12b4:	cmp	w0, w8
    12b8:	b.ne	12c8 <gz_decomp+0x58>  // b.any
    12bc:	mov	w8, #0xffffffff            	// #-1
    12c0:	stur	w8, [x29, #-4]
    12c4:	b	1450 <gz_decomp+0x1e0>
    12c8:	ldr	x8, [sp, #32]
    12cc:	ldr	w9, [x8, #8]
    12d0:	cbnz	w9, 12ec <gz_decomp+0x7c>
    12d4:	ldur	x0, [x29, #-16]
    12d8:	mov	w1, #0xfffffffb            	// #-5
    12dc:	adrp	x2, 0 <gzread>
    12e0:	add	x2, x2, #0x0
    12e4:	bl	0 <gz_error>
    12e8:	b	13f8 <gz_decomp+0x188>
    12ec:	ldr	x0, [sp, #32]
    12f0:	mov	w8, wzr
    12f4:	mov	w1, w8
    12f8:	bl	0 <inflate>
    12fc:	stur	w0, [x29, #-20]
    1300:	ldur	w8, [x29, #-20]
    1304:	mov	w9, #0xfffffffe            	// #-2
    1308:	cmp	w8, w9
    130c:	b.eq	131c <gz_decomp+0xac>  // b.none
    1310:	ldur	w8, [x29, #-20]
    1314:	cmp	w8, #0x2
    1318:	b.ne	133c <gz_decomp+0xcc>  // b.any
    131c:	ldur	x0, [x29, #-16]
    1320:	mov	w1, #0xfffffffe            	// #-2
    1324:	adrp	x2, 0 <gzread>
    1328:	add	x2, x2, #0x0
    132c:	bl	0 <gz_error>
    1330:	mov	w8, #0xffffffff            	// #-1
    1334:	stur	w8, [x29, #-4]
    1338:	b	1450 <gz_decomp+0x1e0>
    133c:	ldur	w8, [x29, #-20]
    1340:	mov	w9, #0xfffffffc            	// #-4
    1344:	cmp	w8, w9
    1348:	b.ne	136c <gz_decomp+0xfc>  // b.any
    134c:	ldur	x0, [x29, #-16]
    1350:	mov	w1, #0xfffffffc            	// #-4
    1354:	adrp	x2, 0 <gzread>
    1358:	add	x2, x2, #0x0
    135c:	bl	0 <gz_error>
    1360:	mov	w8, #0xffffffff            	// #-1
    1364:	stur	w8, [x29, #-4]
    1368:	b	1450 <gz_decomp+0x1e0>
    136c:	ldur	w8, [x29, #-20]
    1370:	mov	w9, #0xfffffffd            	// #-3
    1374:	cmp	w8, w9
    1378:	b.ne	13cc <gz_decomp+0x15c>  // b.any
    137c:	ldur	x0, [x29, #-16]
    1380:	ldr	x8, [sp, #32]
    1384:	ldr	x8, [x8, #48]
    1388:	str	x0, [sp, #24]
    138c:	cbnz	x8, 13a0 <gz_decomp+0x130>
    1390:	adrp	x8, 0 <gzread>
    1394:	add	x8, x8, #0x0
    1398:	str	x8, [sp, #16]
    139c:	b	13ac <gz_decomp+0x13c>
    13a0:	ldr	x8, [sp, #32]
    13a4:	ldr	x8, [x8, #48]
    13a8:	str	x8, [sp, #16]
    13ac:	ldr	x8, [sp, #16]
    13b0:	ldr	x0, [sp, #24]
    13b4:	mov	w1, #0xfffffffd            	// #-3
    13b8:	mov	x2, x8
    13bc:	bl	0 <gz_error>
    13c0:	mov	w9, #0xffffffff            	// #-1
    13c4:	stur	w9, [x29, #-4]
    13c8:	b	1450 <gz_decomp+0x1e0>
    13cc:	ldr	x8, [sp, #32]
    13d0:	ldr	w9, [x8, #32]
    13d4:	mov	w10, #0x0                   	// #0
    13d8:	str	w10, [sp, #12]
    13dc:	cbz	w9, 13f0 <gz_decomp+0x180>
    13e0:	ldur	w8, [x29, #-20]
    13e4:	cmp	w8, #0x1
    13e8:	cset	w8, ne  // ne = any
    13ec:	str	w8, [sp, #12]
    13f0:	ldr	w8, [sp, #12]
    13f4:	tbnz	w8, #0, 129c <gz_decomp+0x2c>
    13f8:	ldur	w8, [x29, #-24]
    13fc:	ldr	x9, [sp, #32]
    1400:	ldr	w10, [x9, #32]
    1404:	subs	w8, w8, w10
    1408:	ldur	x9, [x29, #-16]
    140c:	str	w8, [x9]
    1410:	ldr	x9, [sp, #32]
    1414:	ldr	x9, [x9, #24]
    1418:	ldur	x11, [x29, #-16]
    141c:	ldr	w8, [x11]
    1420:	mov	w11, w8
    1424:	mov	x12, xzr
    1428:	subs	x11, x12, x11
    142c:	add	x9, x9, x11
    1430:	ldur	x11, [x29, #-16]
    1434:	str	x9, [x11, #8]
    1438:	ldur	w8, [x29, #-20]
    143c:	cmp	w8, #0x1
    1440:	b.ne	144c <gz_decomp+0x1dc>  // b.any
    1444:	ldur	x8, [x29, #-16]
    1448:	str	wzr, [x8, #68]
    144c:	stur	wzr, [x29, #-4]
    1450:	ldur	w0, [x29, #-4]
    1454:	ldp	x29, x30, [sp, #64]
    1458:	add	sp, sp, #0x50
    145c:	ret

0000000000001460 <gz_avail>:
    1460:	sub	sp, sp, #0x50
    1464:	stp	x29, x30, [sp, #64]
    1468:	add	x29, sp, #0x40
    146c:	stur	x0, [x29, #-16]
    1470:	ldur	x8, [x29, #-16]
    1474:	add	x8, x8, #0x78
    1478:	str	x8, [sp, #32]
    147c:	ldur	x8, [x29, #-16]
    1480:	ldr	w9, [x8, #108]
    1484:	cbz	w9, 14a8 <gz_avail+0x48>
    1488:	ldur	x8, [x29, #-16]
    148c:	ldr	w9, [x8, #108]
    1490:	mov	w10, #0xfffffffb            	// #-5
    1494:	cmp	w9, w10
    1498:	b.eq	14a8 <gz_avail+0x48>  // b.none
    149c:	mov	w8, #0xffffffff            	// #-1
    14a0:	stur	w8, [x29, #-4]
    14a4:	b	158c <gz_avail+0x12c>
    14a8:	ldur	x8, [x29, #-16]
    14ac:	ldr	w9, [x8, #80]
    14b0:	cbnz	w9, 1588 <gz_avail+0x128>
    14b4:	ldr	x8, [sp, #32]
    14b8:	ldr	w9, [x8, #8]
    14bc:	cbz	w9, 1514 <gz_avail+0xb4>
    14c0:	ldur	x8, [x29, #-16]
    14c4:	ldr	x8, [x8, #48]
    14c8:	str	x8, [sp, #24]
    14cc:	ldr	x8, [sp, #32]
    14d0:	ldr	x8, [x8]
    14d4:	str	x8, [sp, #16]
    14d8:	ldr	x8, [sp, #32]
    14dc:	ldr	w9, [x8, #8]
    14e0:	str	w9, [sp, #12]
    14e4:	ldr	x8, [sp, #16]
    14e8:	add	x9, x8, #0x1
    14ec:	str	x9, [sp, #16]
    14f0:	ldrb	w10, [x8]
    14f4:	ldr	x8, [sp, #24]
    14f8:	add	x9, x8, #0x1
    14fc:	str	x9, [sp, #24]
    1500:	strb	w10, [x8]
    1504:	ldr	w8, [sp, #12]
    1508:	subs	w8, w8, #0x1
    150c:	str	w8, [sp, #12]
    1510:	cbnz	w8, 14e4 <gz_avail+0x84>
    1514:	ldur	x0, [x29, #-16]
    1518:	ldur	x8, [x29, #-16]
    151c:	ldr	x8, [x8, #48]
    1520:	ldr	x9, [sp, #32]
    1524:	ldr	w10, [x9, #8]
    1528:	mov	w9, w10
    152c:	add	x1, x8, x9
    1530:	ldur	x8, [x29, #-16]
    1534:	ldr	w10, [x8, #40]
    1538:	ldr	x8, [sp, #32]
    153c:	ldr	w11, [x8, #8]
    1540:	subs	w2, w10, w11
    1544:	sub	x3, x29, #0x14
    1548:	bl	1138 <gz_load>
    154c:	mov	w10, #0xffffffff            	// #-1
    1550:	cmp	w0, w10
    1554:	b.ne	1564 <gz_avail+0x104>  // b.any
    1558:	mov	w8, #0xffffffff            	// #-1
    155c:	stur	w8, [x29, #-4]
    1560:	b	158c <gz_avail+0x12c>
    1564:	ldur	w8, [x29, #-20]
    1568:	ldr	x9, [sp, #32]
    156c:	ldr	w10, [x9, #8]
    1570:	add	w8, w10, w8
    1574:	str	w8, [x9, #8]
    1578:	ldur	x9, [x29, #-16]
    157c:	ldr	x9, [x9, #48]
    1580:	ldr	x11, [sp, #32]
    1584:	str	x9, [x11]
    1588:	stur	wzr, [x29, #-4]
    158c:	ldur	w0, [x29, #-4]
    1590:	ldp	x29, x30, [sp, #64]
    1594:	add	sp, sp, #0x50
    1598:	ret

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzwrite>:
       0:	sub	sp, sp, #0x40
       4:	stp	x29, x30, [sp, #48]
       8:	add	x29, sp, #0x30
       c:	stur	x0, [x29, #-16]
      10:	str	x1, [sp, #24]
      14:	str	w2, [sp, #20]
      18:	ldur	x8, [x29, #-16]
      1c:	cbnz	x8, 28 <gzwrite+0x28>
      20:	stur	wzr, [x29, #-4]
      24:	b	9c <gzwrite+0x9c>
      28:	ldur	x8, [x29, #-16]
      2c:	str	x8, [sp, #8]
      30:	ldr	x8, [sp, #8]
      34:	ldr	w9, [x8, #24]
      38:	mov	w10, #0x79b1                	// #31153
      3c:	cmp	w9, w10
      40:	b.ne	50 <gzwrite+0x50>  // b.any
      44:	ldr	x8, [sp, #8]
      48:	ldr	w9, [x8, #108]
      4c:	cbz	w9, 58 <gzwrite+0x58>
      50:	stur	wzr, [x29, #-4]
      54:	b	9c <gzwrite+0x9c>
      58:	ldr	w8, [sp, #20]
      5c:	cmp	w8, #0x0
      60:	cset	w8, ge  // ge = tcont
      64:	tbnz	w8, #0, 84 <gzwrite+0x84>
      68:	ldr	x0, [sp, #8]
      6c:	mov	w1, #0xfffffffd            	// #-3
      70:	adrp	x2, 0 <gzwrite>
      74:	add	x2, x2, #0x0
      78:	bl	0 <gz_error>
      7c:	stur	wzr, [x29, #-4]
      80:	b	9c <gzwrite+0x9c>
      84:	ldr	x0, [sp, #8]
      88:	ldr	x1, [sp, #24]
      8c:	ldr	w8, [sp, #20]
      90:	mov	w2, w8
      94:	bl	ac <gz_write>
      98:	stur	w0, [x29, #-4]
      9c:	ldur	w0, [x29, #-4]
      a0:	ldp	x29, x30, [sp, #48]
      a4:	add	sp, sp, #0x40
      a8:	ret

00000000000000ac <gz_write>:
      ac:	sub	sp, sp, #0x50
      b0:	stp	x29, x30, [sp, #64]
      b4:	add	x29, sp, #0x40
      b8:	stur	x0, [x29, #-16]
      bc:	stur	x1, [x29, #-24]
      c0:	str	x2, [sp, #32]
      c4:	ldr	x8, [sp, #32]
      c8:	str	x8, [sp, #24]
      cc:	ldr	x8, [sp, #32]
      d0:	cbnz	x8, dc <gz_write+0x30>
      d4:	stur	xzr, [x29, #-8]
      d8:	b	344 <gz_write+0x298>
      dc:	ldur	x8, [x29, #-16]
      e0:	ldr	w9, [x8, #40]
      e4:	cbnz	w9, 104 <gz_write+0x58>
      e8:	ldur	x0, [x29, #-16]
      ec:	bl	a98 <gz_init>
      f0:	mov	w8, #0xffffffff            	// #-1
      f4:	cmp	w0, w8
      f8:	b.ne	104 <gz_write+0x58>  // b.any
      fc:	stur	xzr, [x29, #-8]
     100:	b	344 <gz_write+0x298>
     104:	ldur	x8, [x29, #-16]
     108:	ldr	w9, [x8, #104]
     10c:	cbz	w9, 13c <gz_write+0x90>
     110:	ldur	x8, [x29, #-16]
     114:	str	wzr, [x8, #104]
     118:	ldur	x0, [x29, #-16]
     11c:	ldur	x8, [x29, #-16]
     120:	ldr	x1, [x8, #96]
     124:	bl	5e0 <gz_zero>
     128:	mov	w9, #0xffffffff            	// #-1
     12c:	cmp	w0, w9
     130:	b.ne	13c <gz_write+0x90>  // b.any
     134:	stur	xzr, [x29, #-8]
     138:	b	344 <gz_write+0x298>
     13c:	ldr	x8, [sp, #32]
     140:	ldur	x9, [x29, #-16]
     144:	ldr	w10, [x9, #40]
     148:	mov	w9, w10
     14c:	cmp	x8, x9
     150:	b.cs	278 <gz_write+0x1cc>  // b.hs, b.nlast
     154:	ldur	x8, [x29, #-16]
     158:	ldr	w9, [x8, #128]
     15c:	cbnz	w9, 170 <gz_write+0xc4>
     160:	ldur	x8, [x29, #-16]
     164:	ldr	x8, [x8, #48]
     168:	ldur	x9, [x29, #-16]
     16c:	str	x8, [x9, #120]
     170:	ldur	x8, [x29, #-16]
     174:	ldr	x8, [x8, #120]
     178:	ldur	x9, [x29, #-16]
     17c:	ldr	w10, [x9, #128]
     180:	mov	w9, w10
     184:	add	x8, x8, x9
     188:	ldur	x9, [x29, #-16]
     18c:	ldr	x9, [x9, #48]
     190:	subs	x8, x8, x9
     194:	str	w8, [sp, #20]
     198:	ldur	x9, [x29, #-16]
     19c:	ldr	w8, [x9, #40]
     1a0:	ldr	w10, [sp, #20]
     1a4:	subs	w8, w8, w10
     1a8:	str	w8, [sp, #16]
     1ac:	ldr	w8, [sp, #16]
     1b0:	mov	w9, w8
     1b4:	ldr	x11, [sp, #32]
     1b8:	cmp	x9, x11
     1bc:	b.ls	1c8 <gz_write+0x11c>  // b.plast
     1c0:	ldr	x8, [sp, #32]
     1c4:	str	w8, [sp, #16]
     1c8:	ldur	x8, [x29, #-16]
     1cc:	ldr	x8, [x8, #48]
     1d0:	ldr	w9, [sp, #20]
     1d4:	mov	w10, w9
     1d8:	add	x0, x8, x10
     1dc:	ldur	x1, [x29, #-24]
     1e0:	ldr	w9, [sp, #16]
     1e4:	mov	w2, w9
     1e8:	bl	0 <memcpy>
     1ec:	ldr	w9, [sp, #16]
     1f0:	ldur	x8, [x29, #-16]
     1f4:	ldr	w11, [x8, #128]
     1f8:	add	w9, w11, w9
     1fc:	str	w9, [x8, #128]
     200:	ldr	w9, [sp, #16]
     204:	mov	w8, w9
     208:	ldur	x10, [x29, #-16]
     20c:	ldr	x12, [x10, #16]
     210:	add	x8, x12, x8
     214:	str	x8, [x10, #16]
     218:	ldur	x8, [x29, #-24]
     21c:	ldr	w9, [sp, #16]
     220:	mov	w10, w9
     224:	add	x8, x8, x10
     228:	stur	x8, [x29, #-24]
     22c:	ldr	w9, [sp, #16]
     230:	mov	w8, w9
     234:	ldr	x10, [sp, #32]
     238:	subs	x8, x10, x8
     23c:	str	x8, [sp, #32]
     240:	ldr	x8, [sp, #32]
     244:	cbz	x8, 26c <gz_write+0x1c0>
     248:	ldur	x0, [x29, #-16]
     24c:	mov	w8, wzr
     250:	mov	w1, w8
     254:	bl	c5c <gz_comp>
     258:	mov	w8, #0xffffffff            	// #-1
     25c:	cmp	w0, w8
     260:	b.ne	26c <gz_write+0x1c0>  // b.any
     264:	stur	xzr, [x29, #-8]
     268:	b	344 <gz_write+0x298>
     26c:	ldr	x8, [sp, #32]
     270:	cbnz	x8, 154 <gz_write+0xa8>
     274:	b	33c <gz_write+0x290>
     278:	ldur	x8, [x29, #-16]
     27c:	ldr	w9, [x8, #128]
     280:	cbz	w9, 2a8 <gz_write+0x1fc>
     284:	ldur	x0, [x29, #-16]
     288:	mov	w8, wzr
     28c:	mov	w1, w8
     290:	bl	c5c <gz_comp>
     294:	mov	w8, #0xffffffff            	// #-1
     298:	cmp	w0, w8
     29c:	b.ne	2a8 <gz_write+0x1fc>  // b.any
     2a0:	stur	xzr, [x29, #-8]
     2a4:	b	344 <gz_write+0x298>
     2a8:	ldur	x8, [x29, #-24]
     2ac:	ldur	x9, [x29, #-16]
     2b0:	str	x8, [x9, #120]
     2b4:	mov	w8, #0xffffffff            	// #-1
     2b8:	str	w8, [sp, #12]
     2bc:	ldr	w8, [sp, #12]
     2c0:	mov	w9, w8
     2c4:	ldr	x10, [sp, #32]
     2c8:	cmp	x9, x10
     2cc:	b.ls	2d8 <gz_write+0x22c>  // b.plast
     2d0:	ldr	x8, [sp, #32]
     2d4:	str	w8, [sp, #12]
     2d8:	ldr	w8, [sp, #12]
     2dc:	ldur	x9, [x29, #-16]
     2e0:	str	w8, [x9, #128]
     2e4:	ldr	w8, [sp, #12]
     2e8:	mov	w9, w8
     2ec:	ldur	x10, [x29, #-16]
     2f0:	ldr	x11, [x10, #16]
     2f4:	add	x9, x11, x9
     2f8:	str	x9, [x10, #16]
     2fc:	ldur	x0, [x29, #-16]
     300:	mov	w8, wzr
     304:	mov	w1, w8
     308:	bl	c5c <gz_comp>
     30c:	mov	w8, #0xffffffff            	// #-1
     310:	cmp	w0, w8
     314:	b.ne	320 <gz_write+0x274>  // b.any
     318:	stur	xzr, [x29, #-8]
     31c:	b	344 <gz_write+0x298>
     320:	ldr	w8, [sp, #12]
     324:	mov	w9, w8
     328:	ldr	x10, [sp, #32]
     32c:	subs	x9, x10, x9
     330:	str	x9, [sp, #32]
     334:	ldr	x8, [sp, #32]
     338:	cbnz	x8, 2b4 <gz_write+0x208>
     33c:	ldr	x8, [sp, #24]
     340:	stur	x8, [x29, #-8]
     344:	ldur	x0, [x29, #-8]
     348:	ldp	x29, x30, [sp, #64]
     34c:	add	sp, sp, #0x50
     350:	ret

0000000000000354 <gzfwrite>:
     354:	sub	sp, sp, #0x50
     358:	stp	x29, x30, [sp, #64]
     35c:	add	x29, sp, #0x40
     360:	stur	x0, [x29, #-16]
     364:	stur	x1, [x29, #-24]
     368:	str	x2, [sp, #32]
     36c:	str	x3, [sp, #24]
     370:	ldr	x8, [sp, #24]
     374:	cbnz	x8, 380 <gzfwrite+0x2c>
     378:	stur	xzr, [x29, #-8]
     37c:	b	434 <gzfwrite+0xe0>
     380:	ldr	x8, [sp, #24]
     384:	str	x8, [sp, #8]
     388:	ldr	x8, [sp, #8]
     38c:	ldr	w9, [x8, #24]
     390:	mov	w10, #0x79b1                	// #31153
     394:	cmp	w9, w10
     398:	b.ne	3a8 <gzfwrite+0x54>  // b.any
     39c:	ldr	x8, [sp, #8]
     3a0:	ldr	w9, [x8, #108]
     3a4:	cbz	w9, 3b0 <gzfwrite+0x5c>
     3a8:	stur	xzr, [x29, #-8]
     3ac:	b	434 <gzfwrite+0xe0>
     3b0:	ldr	x8, [sp, #32]
     3b4:	ldur	x9, [x29, #-24]
     3b8:	mul	x8, x8, x9
     3bc:	str	x8, [sp, #16]
     3c0:	ldur	x8, [x29, #-24]
     3c4:	cbz	x8, 3fc <gzfwrite+0xa8>
     3c8:	ldr	x8, [sp, #16]
     3cc:	ldur	x9, [x29, #-24]
     3d0:	udiv	x8, x8, x9
     3d4:	ldr	x9, [sp, #32]
     3d8:	cmp	x8, x9
     3dc:	b.eq	3fc <gzfwrite+0xa8>  // b.none
     3e0:	ldr	x0, [sp, #8]
     3e4:	mov	w1, #0xfffffffe            	// #-2
     3e8:	adrp	x2, 0 <gzwrite>
     3ec:	add	x2, x2, #0x0
     3f0:	bl	0 <gz_error>
     3f4:	stur	xzr, [x29, #-8]
     3f8:	b	434 <gzfwrite+0xe0>
     3fc:	ldr	x8, [sp, #16]
     400:	cbz	x8, 424 <gzfwrite+0xd0>
     404:	ldr	x0, [sp, #8]
     408:	ldur	x1, [x29, #-16]
     40c:	ldr	x2, [sp, #16]
     410:	bl	ac <gz_write>
     414:	ldur	x8, [x29, #-24]
     418:	udiv	x8, x0, x8
     41c:	str	x8, [sp]
     420:	b	42c <gzfwrite+0xd8>
     424:	mov	x8, xzr
     428:	str	x8, [sp]
     42c:	ldr	x8, [sp]
     430:	stur	x8, [x29, #-8]
     434:	ldur	x0, [x29, #-8]
     438:	ldp	x29, x30, [sp, #64]
     43c:	add	sp, sp, #0x50
     440:	ret

0000000000000444 <gzputc>:
     444:	sub	sp, sp, #0x40
     448:	stp	x29, x30, [sp, #48]
     44c:	add	x29, sp, #0x30
     450:	stur	x0, [x29, #-16]
     454:	stur	w1, [x29, #-20]
     458:	ldur	x8, [x29, #-16]
     45c:	cbnz	x8, 46c <gzputc+0x28>
     460:	mov	w8, #0xffffffff            	// #-1
     464:	stur	w8, [x29, #-4]
     468:	b	5d0 <gzputc+0x18c>
     46c:	ldur	x8, [x29, #-16]
     470:	str	x8, [sp, #8]
     474:	ldr	x8, [sp, #8]
     478:	add	x8, x8, #0x78
     47c:	str	x8, [sp]
     480:	ldr	x8, [sp, #8]
     484:	ldr	w9, [x8, #24]
     488:	mov	w10, #0x79b1                	// #31153
     48c:	cmp	w9, w10
     490:	b.ne	4a0 <gzputc+0x5c>  // b.any
     494:	ldr	x8, [sp, #8]
     498:	ldr	w9, [x8, #108]
     49c:	cbz	w9, 4ac <gzputc+0x68>
     4a0:	mov	w8, #0xffffffff            	// #-1
     4a4:	stur	w8, [x29, #-4]
     4a8:	b	5d0 <gzputc+0x18c>
     4ac:	ldr	x8, [sp, #8]
     4b0:	ldr	w9, [x8, #104]
     4b4:	cbz	w9, 4e8 <gzputc+0xa4>
     4b8:	ldr	x8, [sp, #8]
     4bc:	str	wzr, [x8, #104]
     4c0:	ldr	x0, [sp, #8]
     4c4:	ldr	x8, [sp, #8]
     4c8:	ldr	x1, [x8, #96]
     4cc:	bl	5e0 <gz_zero>
     4d0:	mov	w9, #0xffffffff            	// #-1
     4d4:	cmp	w0, w9
     4d8:	b.ne	4e8 <gzputc+0xa4>  // b.any
     4dc:	mov	w8, #0xffffffff            	// #-1
     4e0:	stur	w8, [x29, #-4]
     4e4:	b	5d0 <gzputc+0x18c>
     4e8:	ldr	x8, [sp, #8]
     4ec:	ldr	w9, [x8, #40]
     4f0:	cbz	w9, 598 <gzputc+0x154>
     4f4:	ldr	x8, [sp]
     4f8:	ldr	w9, [x8, #8]
     4fc:	cbnz	w9, 510 <gzputc+0xcc>
     500:	ldr	x8, [sp, #8]
     504:	ldr	x8, [x8, #48]
     508:	ldr	x9, [sp]
     50c:	str	x8, [x9]
     510:	ldr	x8, [sp]
     514:	ldr	x8, [x8]
     518:	ldr	x9, [sp]
     51c:	ldr	w10, [x9, #8]
     520:	mov	w9, w10
     524:	add	x8, x8, x9
     528:	ldr	x9, [sp, #8]
     52c:	ldr	x9, [x9, #48]
     530:	subs	x8, x8, x9
     534:	str	w8, [sp, #24]
     538:	ldr	w8, [sp, #24]
     53c:	ldr	x9, [sp, #8]
     540:	ldr	w10, [x9, #40]
     544:	cmp	w8, w10
     548:	b.cs	598 <gzputc+0x154>  // b.hs, b.nlast
     54c:	ldur	w8, [x29, #-20]
     550:	ldr	x9, [sp, #8]
     554:	ldr	x9, [x9, #48]
     558:	ldr	w10, [sp, #24]
     55c:	mov	w11, w10
     560:	add	x9, x9, x11
     564:	strb	w8, [x9]
     568:	ldr	x9, [sp]
     56c:	ldr	w8, [x9, #8]
     570:	add	w8, w8, #0x1
     574:	str	w8, [x9, #8]
     578:	ldr	x9, [sp, #8]
     57c:	ldr	x11, [x9, #16]
     580:	add	x11, x11, #0x1
     584:	str	x11, [x9, #16]
     588:	ldur	w8, [x29, #-20]
     58c:	and	w8, w8, #0xff
     590:	stur	w8, [x29, #-4]
     594:	b	5d0 <gzputc+0x18c>
     598:	ldur	w8, [x29, #-20]
     59c:	add	x1, sp, #0x17
     5a0:	strb	w8, [sp, #23]
     5a4:	ldr	x0, [sp, #8]
     5a8:	mov	x2, #0x1                   	// #1
     5ac:	bl	ac <gz_write>
     5b0:	cmp	x0, #0x1
     5b4:	b.eq	5c4 <gzputc+0x180>  // b.none
     5b8:	mov	w8, #0xffffffff            	// #-1
     5bc:	stur	w8, [x29, #-4]
     5c0:	b	5d0 <gzputc+0x18c>
     5c4:	ldur	w8, [x29, #-20]
     5c8:	and	w8, w8, #0xff
     5cc:	stur	w8, [x29, #-4]
     5d0:	ldur	w0, [x29, #-4]
     5d4:	ldp	x29, x30, [sp, #48]
     5d8:	add	sp, sp, #0x40
     5dc:	ret

00000000000005e0 <gz_zero>:
     5e0:	sub	sp, sp, #0x40
     5e4:	stp	x29, x30, [sp, #48]
     5e8:	add	x29, sp, #0x30
     5ec:	stur	x0, [x29, #-16]
     5f0:	str	x1, [sp, #24]
     5f4:	ldur	x8, [x29, #-16]
     5f8:	add	x8, x8, #0x78
     5fc:	str	x8, [sp, #8]
     600:	ldr	x8, [sp, #8]
     604:	ldr	w9, [x8, #8]
     608:	cbz	w9, 634 <gz_zero+0x54>
     60c:	ldur	x0, [x29, #-16]
     610:	mov	w8, wzr
     614:	mov	w1, w8
     618:	bl	c5c <gz_comp>
     61c:	mov	w8, #0xffffffff            	// #-1
     620:	cmp	w0, w8
     624:	b.ne	634 <gz_zero+0x54>  // b.any
     628:	mov	w8, #0xffffffff            	// #-1
     62c:	stur	w8, [x29, #-4]
     630:	b	71c <gz_zero+0x13c>
     634:	mov	w8, #0x1                   	// #1
     638:	str	w8, [sp, #20]
     63c:	ldr	x8, [sp, #24]
     640:	cbz	x8, 718 <gz_zero+0x138>
     644:	ldur	x8, [x29, #-16]
     648:	ldr	w9, [x8, #40]
     64c:	mov	w8, w9
     650:	ldr	x10, [sp, #24]
     654:	cmp	x8, x10
     658:	b.le	668 <gz_zero+0x88>
     65c:	ldr	x8, [sp, #24]
     660:	str	w8, [sp, #4]
     664:	b	674 <gz_zero+0x94>
     668:	ldur	x8, [x29, #-16]
     66c:	ldr	w9, [x8, #40]
     670:	str	w9, [sp, #4]
     674:	ldr	w8, [sp, #4]
     678:	str	w8, [sp, #16]
     67c:	ldr	w8, [sp, #20]
     680:	cbz	w8, 6a4 <gz_zero+0xc4>
     684:	ldur	x8, [x29, #-16]
     688:	ldr	x0, [x8, #48]
     68c:	ldr	w9, [sp, #16]
     690:	mov	w2, w9
     694:	mov	w9, wzr
     698:	mov	w1, w9
     69c:	bl	0 <memset>
     6a0:	str	wzr, [sp, #20]
     6a4:	ldr	w8, [sp, #16]
     6a8:	ldr	x9, [sp, #8]
     6ac:	str	w8, [x9, #8]
     6b0:	ldur	x9, [x29, #-16]
     6b4:	ldr	x9, [x9, #48]
     6b8:	ldr	x10, [sp, #8]
     6bc:	str	x9, [x10]
     6c0:	ldr	w8, [sp, #16]
     6c4:	mov	w9, w8
     6c8:	ldur	x10, [x29, #-16]
     6cc:	ldr	x11, [x10, #16]
     6d0:	add	x9, x11, x9
     6d4:	str	x9, [x10, #16]
     6d8:	ldur	x0, [x29, #-16]
     6dc:	mov	w8, wzr
     6e0:	mov	w1, w8
     6e4:	bl	c5c <gz_comp>
     6e8:	mov	w8, #0xffffffff            	// #-1
     6ec:	cmp	w0, w8
     6f0:	b.ne	700 <gz_zero+0x120>  // b.any
     6f4:	mov	w8, #0xffffffff            	// #-1
     6f8:	stur	w8, [x29, #-4]
     6fc:	b	71c <gz_zero+0x13c>
     700:	ldr	w8, [sp, #16]
     704:	mov	w9, w8
     708:	ldr	x10, [sp, #24]
     70c:	subs	x9, x10, x9
     710:	str	x9, [sp, #24]
     714:	b	63c <gz_zero+0x5c>
     718:	stur	wzr, [x29, #-4]
     71c:	ldur	w0, [x29, #-4]
     720:	ldp	x29, x30, [sp, #48]
     724:	add	sp, sp, #0x40
     728:	ret

000000000000072c <gzputs>:
     72c:	sub	sp, sp, #0x50
     730:	stp	x29, x30, [sp, #64]
     734:	add	x29, sp, #0x40
     738:	stur	x0, [x29, #-16]
     73c:	stur	x1, [x29, #-24]
     740:	ldur	x8, [x29, #-16]
     744:	cbnz	x8, 754 <gzputs+0x28>
     748:	mov	w8, #0xffffffff            	// #-1
     74c:	stur	w8, [x29, #-4]
     750:	b	7d4 <gzputs+0xa8>
     754:	ldur	x8, [x29, #-16]
     758:	str	x8, [sp, #16]
     75c:	ldr	x8, [sp, #16]
     760:	ldr	w9, [x8, #24]
     764:	mov	w10, #0x79b1                	// #31153
     768:	cmp	w9, w10
     76c:	b.ne	77c <gzputs+0x50>  // b.any
     770:	ldr	x8, [sp, #16]
     774:	ldr	w9, [x8, #108]
     778:	cbz	w9, 788 <gzputs+0x5c>
     77c:	mov	w8, #0xffffffff            	// #-1
     780:	stur	w8, [x29, #-4]
     784:	b	7d4 <gzputs+0xa8>
     788:	ldur	x0, [x29, #-24]
     78c:	bl	0 <strlen>
     790:	str	x0, [sp, #24]
     794:	ldr	x0, [sp, #16]
     798:	ldur	x1, [x29, #-24]
     79c:	ldr	x2, [sp, #24]
     7a0:	bl	ac <gz_write>
     7a4:	stur	w0, [x29, #-28]
     7a8:	ldur	w8, [x29, #-28]
     7ac:	cbnz	w8, 7c4 <gzputs+0x98>
     7b0:	ldr	x8, [sp, #24]
     7b4:	cbz	x8, 7c4 <gzputs+0x98>
     7b8:	mov	w8, #0xffffffff            	// #-1
     7bc:	str	w8, [sp, #12]
     7c0:	b	7cc <gzputs+0xa0>
     7c4:	ldur	w8, [x29, #-28]
     7c8:	str	w8, [sp, #12]
     7cc:	ldr	w8, [sp, #12]
     7d0:	stur	w8, [x29, #-4]
     7d4:	ldur	w0, [x29, #-4]
     7d8:	ldp	x29, x30, [sp, #64]
     7dc:	add	sp, sp, #0x50
     7e0:	ret

00000000000007e4 <gzvprintf>:
     7e4:	sub	sp, sp, #0x80
     7e8:	stp	x29, x30, [sp, #112]
     7ec:	add	x29, sp, #0x70
     7f0:	stur	x0, [x29, #-16]
     7f4:	stur	x1, [x29, #-24]
     7f8:	ldur	x8, [x29, #-16]
     7fc:	str	x2, [sp, #8]
     800:	cbnz	x8, 810 <gzvprintf+0x2c>
     804:	mov	w8, #0xfffffffe            	// #-2
     808:	stur	w8, [x29, #-4]
     80c:	b	a88 <gzvprintf+0x2a4>
     810:	ldur	x8, [x29, #-16]
     814:	stur	x8, [x29, #-48]
     818:	ldur	x8, [x29, #-48]
     81c:	add	x8, x8, #0x78
     820:	str	x8, [sp, #56]
     824:	ldur	x8, [x29, #-48]
     828:	ldr	w9, [x8, #24]
     82c:	mov	w10, #0x79b1                	// #31153
     830:	cmp	w9, w10
     834:	b.ne	844 <gzvprintf+0x60>  // b.any
     838:	ldur	x8, [x29, #-48]
     83c:	ldr	w9, [x8, #108]
     840:	cbz	w9, 850 <gzvprintf+0x6c>
     844:	mov	w8, #0xfffffffe            	// #-2
     848:	stur	w8, [x29, #-4]
     84c:	b	a88 <gzvprintf+0x2a4>
     850:	ldur	x8, [x29, #-48]
     854:	ldr	w9, [x8, #40]
     858:	cbnz	w9, 880 <gzvprintf+0x9c>
     85c:	ldur	x0, [x29, #-48]
     860:	bl	a98 <gz_init>
     864:	mov	w8, #0xffffffff            	// #-1
     868:	cmp	w0, w8
     86c:	b.ne	880 <gzvprintf+0x9c>  // b.any
     870:	ldur	x8, [x29, #-48]
     874:	ldr	w9, [x8, #108]
     878:	stur	w9, [x29, #-4]
     87c:	b	a88 <gzvprintf+0x2a4>
     880:	ldur	x8, [x29, #-48]
     884:	ldr	w9, [x8, #104]
     888:	cbz	w9, 8c0 <gzvprintf+0xdc>
     88c:	ldur	x8, [x29, #-48]
     890:	str	wzr, [x8, #104]
     894:	ldur	x0, [x29, #-48]
     898:	ldur	x8, [x29, #-48]
     89c:	ldr	x1, [x8, #96]
     8a0:	bl	5e0 <gz_zero>
     8a4:	mov	w9, #0xffffffff            	// #-1
     8a8:	cmp	w0, w9
     8ac:	b.ne	8c0 <gzvprintf+0xdc>  // b.any
     8b0:	ldur	x8, [x29, #-48]
     8b4:	ldr	w9, [x8, #108]
     8b8:	stur	w9, [x29, #-4]
     8bc:	b	a88 <gzvprintf+0x2a4>
     8c0:	ldr	x8, [sp, #56]
     8c4:	ldr	w9, [x8, #8]
     8c8:	cbnz	w9, 8dc <gzvprintf+0xf8>
     8cc:	ldur	x8, [x29, #-48]
     8d0:	ldr	x8, [x8, #48]
     8d4:	ldr	x9, [sp, #56]
     8d8:	str	x8, [x9]
     8dc:	ldur	x8, [x29, #-48]
     8e0:	ldr	x8, [x8, #48]
     8e4:	ldr	x9, [sp, #56]
     8e8:	ldr	x9, [x9]
     8ec:	ldur	x10, [x29, #-48]
     8f0:	ldr	x10, [x10, #48]
     8f4:	subs	x9, x9, x10
     8f8:	add	x8, x8, x9
     8fc:	ldr	x9, [sp, #56]
     900:	ldr	w11, [x9, #8]
     904:	mov	w9, w11
     908:	add	x8, x8, x9
     90c:	stur	x8, [x29, #-40]
     910:	ldur	x8, [x29, #-40]
     914:	ldur	x9, [x29, #-48]
     918:	ldr	w11, [x9, #40]
     91c:	subs	w11, w11, #0x1
     920:	mov	w9, w11
     924:	ubfx	x9, x9, #0, #32
     928:	add	x8, x8, x9
     92c:	mov	w11, #0x0                   	// #0
     930:	strb	w11, [x8]
     934:	ldur	x0, [x29, #-40]
     938:	ldur	x8, [x29, #-48]
     93c:	ldr	w11, [x8, #40]
     940:	mov	w1, w11
     944:	ldur	x2, [x29, #-24]
     948:	ldr	x8, [sp, #8]
     94c:	ldr	q0, [x8]
     950:	add	x3, sp, #0x10
     954:	str	q0, [sp, #16]
     958:	ldr	q0, [x8, #16]
     95c:	str	q0, [sp, #32]
     960:	bl	0 <vsnprintf>
     964:	stur	w0, [x29, #-28]
     968:	ldur	w11, [x29, #-28]
     96c:	cbz	w11, 99c <gzvprintf+0x1b8>
     970:	ldur	w8, [x29, #-28]
     974:	ldur	x9, [x29, #-48]
     978:	ldr	w10, [x9, #40]
     97c:	cmp	w8, w10
     980:	b.cs	99c <gzvprintf+0x1b8>  // b.hs, b.nlast
     984:	ldur	x8, [x29, #-40]
     988:	ldur	x9, [x29, #-48]
     98c:	ldr	w10, [x9, #40]
     990:	subs	w10, w10, #0x1
     994:	ldrb	w10, [x8, w10, uxtw]
     998:	cbz	w10, 9a4 <gzvprintf+0x1c0>
     99c:	stur	wzr, [x29, #-4]
     9a0:	b	a88 <gzvprintf+0x2a4>
     9a4:	ldur	w8, [x29, #-28]
     9a8:	ldr	x9, [sp, #56]
     9ac:	ldr	w10, [x9, #8]
     9b0:	add	w8, w10, w8
     9b4:	str	w8, [x9, #8]
     9b8:	ldursw	x9, [x29, #-28]
     9bc:	ldur	x11, [x29, #-48]
     9c0:	ldr	x12, [x11, #16]
     9c4:	add	x9, x12, x9
     9c8:	str	x9, [x11, #16]
     9cc:	ldr	x9, [sp, #56]
     9d0:	ldr	w8, [x9, #8]
     9d4:	ldur	x9, [x29, #-48]
     9d8:	ldr	w10, [x9, #40]
     9dc:	cmp	w8, w10
     9e0:	b.cc	a80 <gzvprintf+0x29c>  // b.lo, b.ul, b.last
     9e4:	ldr	x8, [sp, #56]
     9e8:	ldr	w9, [x8, #8]
     9ec:	ldur	x8, [x29, #-48]
     9f0:	ldr	w10, [x8, #40]
     9f4:	subs	w9, w9, w10
     9f8:	stur	w9, [x29, #-32]
     9fc:	ldur	x8, [x29, #-48]
     a00:	ldr	w9, [x8, #40]
     a04:	ldr	x8, [sp, #56]
     a08:	str	w9, [x8, #8]
     a0c:	ldur	x0, [x29, #-48]
     a10:	mov	w9, wzr
     a14:	mov	w1, w9
     a18:	bl	c5c <gz_comp>
     a1c:	mov	w9, #0xffffffff            	// #-1
     a20:	cmp	w0, w9
     a24:	b.ne	a38 <gzvprintf+0x254>  // b.any
     a28:	ldur	x8, [x29, #-48]
     a2c:	ldr	w9, [x8, #108]
     a30:	stur	w9, [x29, #-4]
     a34:	b	a88 <gzvprintf+0x2a4>
     a38:	ldur	x8, [x29, #-48]
     a3c:	ldr	x0, [x8, #48]
     a40:	ldur	x8, [x29, #-48]
     a44:	ldr	x8, [x8, #48]
     a48:	ldur	x9, [x29, #-48]
     a4c:	ldr	w10, [x9, #40]
     a50:	mov	w9, w10
     a54:	add	x1, x8, x9
     a58:	ldur	w10, [x29, #-32]
     a5c:	mov	w2, w10
     a60:	bl	0 <memcpy>
     a64:	ldur	x8, [x29, #-48]
     a68:	ldr	x8, [x8, #48]
     a6c:	ldr	x9, [sp, #56]
     a70:	str	x8, [x9]
     a74:	ldur	w10, [x29, #-32]
     a78:	ldr	x8, [sp, #56]
     a7c:	str	w10, [x8, #8]
     a80:	ldur	w8, [x29, #-28]
     a84:	stur	w8, [x29, #-4]
     a88:	ldur	w0, [x29, #-4]
     a8c:	ldp	x29, x30, [sp, #112]
     a90:	add	sp, sp, #0x80
     a94:	ret

0000000000000a98 <gz_init>:
     a98:	sub	sp, sp, #0x40
     a9c:	stp	x29, x30, [sp, #48]
     aa0:	add	x29, sp, #0x30
     aa4:	adrp	x8, 0 <gzwrite>
     aa8:	add	x8, x8, #0x0
     aac:	stur	x0, [x29, #-16]
     ab0:	ldur	x9, [x29, #-16]
     ab4:	add	x9, x9, #0x78
     ab8:	str	x9, [sp, #16]
     abc:	ldur	x9, [x29, #-16]
     ac0:	ldr	w10, [x9, #44]
     ac4:	lsl	w10, w10, #1
     ac8:	mov	w9, w10
     acc:	ubfx	x0, x9, #0, #32
     ad0:	str	x8, [sp, #8]
     ad4:	bl	0 <malloc>
     ad8:	ldur	x8, [x29, #-16]
     adc:	str	x0, [x8, #48]
     ae0:	ldur	x8, [x29, #-16]
     ae4:	ldr	x8, [x8, #48]
     ae8:	cbnz	x8, b08 <gz_init+0x70>
     aec:	ldur	x0, [x29, #-16]
     af0:	mov	w1, #0xfffffffc            	// #-4
     af4:	ldr	x2, [sp, #8]
     af8:	bl	0 <gz_error>
     afc:	mov	w8, #0xffffffff            	// #-1
     b00:	stur	w8, [x29, #-4]
     b04:	b	c4c <gz_init+0x1b4>
     b08:	ldur	x8, [x29, #-16]
     b0c:	ldr	w9, [x8, #64]
     b10:	cbnz	w9, bfc <gz_init+0x164>
     b14:	ldur	x8, [x29, #-16]
     b18:	ldr	w9, [x8, #44]
     b1c:	mov	w0, w9
     b20:	bl	0 <malloc>
     b24:	ldur	x8, [x29, #-16]
     b28:	str	x0, [x8, #56]
     b2c:	ldur	x8, [x29, #-16]
     b30:	ldr	x8, [x8, #56]
     b34:	cbnz	x8, b60 <gz_init+0xc8>
     b38:	ldur	x8, [x29, #-16]
     b3c:	ldr	x0, [x8, #48]
     b40:	bl	0 <free>
     b44:	ldur	x0, [x29, #-16]
     b48:	mov	w1, #0xfffffffc            	// #-4
     b4c:	ldr	x2, [sp, #8]
     b50:	bl	0 <gz_error>
     b54:	mov	w9, #0xffffffff            	// #-1
     b58:	stur	w9, [x29, #-4]
     b5c:	b	c4c <gz_init+0x1b4>
     b60:	ldr	x8, [sp, #16]
     b64:	mov	x9, xzr
     b68:	str	x9, [x8, #64]
     b6c:	ldr	x8, [sp, #16]
     b70:	str	x9, [x8, #72]
     b74:	ldr	x8, [sp, #16]
     b78:	str	x9, [x8, #80]
     b7c:	ldr	x0, [sp, #16]
     b80:	ldur	x8, [x29, #-16]
     b84:	ldr	w1, [x8, #88]
     b88:	ldur	x8, [x29, #-16]
     b8c:	ldr	w5, [x8, #92]
     b90:	mov	w10, #0x8                   	// #8
     b94:	mov	w2, w10
     b98:	mov	w3, #0x1f                  	// #31
     b9c:	mov	w4, w10
     ba0:	adrp	x6, 0 <gzwrite>
     ba4:	add	x6, x6, #0x0
     ba8:	mov	w7, #0x70                  	// #112
     bac:	bl	0 <deflateInit2_>
     bb0:	stur	w0, [x29, #-20]
     bb4:	ldur	w10, [x29, #-20]
     bb8:	cbz	w10, bf0 <gz_init+0x158>
     bbc:	ldur	x8, [x29, #-16]
     bc0:	ldr	x0, [x8, #56]
     bc4:	bl	0 <free>
     bc8:	ldur	x8, [x29, #-16]
     bcc:	ldr	x0, [x8, #48]
     bd0:	bl	0 <free>
     bd4:	ldur	x0, [x29, #-16]
     bd8:	mov	w1, #0xfffffffc            	// #-4
     bdc:	ldr	x2, [sp, #8]
     be0:	bl	0 <gz_error>
     be4:	mov	w9, #0xffffffff            	// #-1
     be8:	stur	w9, [x29, #-4]
     bec:	b	c4c <gz_init+0x1b4>
     bf0:	ldr	x8, [sp, #16]
     bf4:	mov	x9, xzr
     bf8:	str	x9, [x8]
     bfc:	ldur	x8, [x29, #-16]
     c00:	ldr	w9, [x8, #44]
     c04:	ldur	x8, [x29, #-16]
     c08:	str	w9, [x8, #40]
     c0c:	ldur	x8, [x29, #-16]
     c10:	ldr	w9, [x8, #64]
     c14:	cbnz	w9, c48 <gz_init+0x1b0>
     c18:	ldur	x8, [x29, #-16]
     c1c:	ldr	w9, [x8, #40]
     c20:	ldr	x8, [sp, #16]
     c24:	str	w9, [x8, #32]
     c28:	ldur	x8, [x29, #-16]
     c2c:	ldr	x8, [x8, #56]
     c30:	ldr	x10, [sp, #16]
     c34:	str	x8, [x10, #24]
     c38:	ldr	x8, [sp, #16]
     c3c:	ldr	x8, [x8, #24]
     c40:	ldur	x10, [x29, #-16]
     c44:	str	x8, [x10, #8]
     c48:	stur	wzr, [x29, #-4]
     c4c:	ldur	w0, [x29, #-4]
     c50:	ldp	x29, x30, [sp, #48]
     c54:	add	sp, sp, #0x40
     c58:	ret

0000000000000c5c <gz_comp>:
     c5c:	sub	sp, sp, #0x80
     c60:	stp	x29, x30, [sp, #112]
     c64:	add	x29, sp, #0x70
     c68:	mov	w8, #0x40000000            	// #1073741824
     c6c:	stur	x0, [x29, #-16]
     c70:	stur	w1, [x29, #-20]
     c74:	stur	w8, [x29, #-40]
     c78:	ldur	x9, [x29, #-16]
     c7c:	add	x9, x9, #0x78
     c80:	stur	x9, [x29, #-48]
     c84:	ldur	x9, [x29, #-16]
     c88:	ldr	w8, [x9, #40]
     c8c:	cbnz	w8, cb0 <gz_comp+0x54>
     c90:	ldur	x0, [x29, #-16]
     c94:	bl	a98 <gz_init>
     c98:	mov	w8, #0xffffffff            	// #-1
     c9c:	cmp	w0, w8
     ca0:	b.ne	cb0 <gz_comp+0x54>  // b.any
     ca4:	mov	w8, #0xffffffff            	// #-1
     ca8:	stur	w8, [x29, #-4]
     cac:	b	f78 <gz_comp+0x31c>
     cb0:	ldur	x8, [x29, #-16]
     cb4:	ldr	w9, [x8, #64]
     cb8:	cbz	w9, da0 <gz_comp+0x144>
     cbc:	ldur	x8, [x29, #-48]
     cc0:	ldr	w9, [x8, #8]
     cc4:	cbz	w9, d98 <gz_comp+0x13c>
     cc8:	ldur	x8, [x29, #-48]
     ccc:	ldr	w9, [x8, #8]
     cd0:	ldur	w10, [x29, #-40]
     cd4:	cmp	w9, w10
     cd8:	b.ls	ce8 <gz_comp+0x8c>  // b.plast
     cdc:	ldur	w8, [x29, #-40]
     ce0:	stur	w8, [x29, #-52]
     ce4:	b	cf4 <gz_comp+0x98>
     ce8:	ldur	x8, [x29, #-48]
     cec:	ldr	w9, [x8, #8]
     cf0:	stur	w9, [x29, #-52]
     cf4:	ldur	w8, [x29, #-52]
     cf8:	stur	w8, [x29, #-36]
     cfc:	ldur	x9, [x29, #-16]
     d00:	ldr	w0, [x9, #28]
     d04:	ldur	x9, [x29, #-48]
     d08:	ldr	x1, [x9]
     d0c:	ldur	w8, [x29, #-36]
     d10:	mov	w2, w8
     d14:	bl	0 <write>
     d18:	stur	w0, [x29, #-28]
     d1c:	ldur	w8, [x29, #-28]
     d20:	cmp	w8, #0x0
     d24:	cset	w8, ge  // ge = tcont
     d28:	tbnz	w8, #0, d6c <gz_comp+0x110>
     d2c:	ldur	x0, [x29, #-16]
     d30:	str	x0, [sp, #48]
     d34:	bl	0 <__errno_location>
     d38:	ldr	w0, [x0]
     d3c:	bl	0 <strerror>
     d40:	ldr	x8, [sp, #48]
     d44:	str	x0, [sp, #40]
     d48:	mov	x0, x8
     d4c:	mov	w9, #0xffffffff            	// #-1
     d50:	mov	w1, w9
     d54:	ldr	x2, [sp, #40]
     d58:	str	w9, [sp, #36]
     d5c:	bl	0 <gz_error>
     d60:	ldr	w9, [sp, #36]
     d64:	stur	w9, [x29, #-4]
     d68:	b	f78 <gz_comp+0x31c>
     d6c:	ldur	w8, [x29, #-28]
     d70:	ldur	x9, [x29, #-48]
     d74:	ldr	w10, [x9, #8]
     d78:	subs	w8, w10, w8
     d7c:	str	w8, [x9, #8]
     d80:	ldursw	x9, [x29, #-28]
     d84:	ldur	x11, [x29, #-48]
     d88:	ldr	x12, [x11]
     d8c:	add	x9, x12, x9
     d90:	str	x9, [x11]
     d94:	b	cbc <gz_comp+0x60>
     d98:	stur	wzr, [x29, #-4]
     d9c:	b	f78 <gz_comp+0x31c>
     da0:	stur	wzr, [x29, #-24]
     da4:	ldur	x8, [x29, #-48]
     da8:	ldr	w9, [x8, #32]
     dac:	cbz	w9, dd0 <gz_comp+0x174>
     db0:	ldur	w8, [x29, #-20]
     db4:	cbz	w8, ef8 <gz_comp+0x29c>
     db8:	ldur	w8, [x29, #-20]
     dbc:	cmp	w8, #0x4
     dc0:	b.ne	dd0 <gz_comp+0x174>  // b.any
     dc4:	ldur	w8, [x29, #-24]
     dc8:	cmp	w8, #0x1
     dcc:	b.ne	ef8 <gz_comp+0x29c>  // b.any
     dd0:	ldur	x8, [x29, #-48]
     dd4:	ldr	x8, [x8, #24]
     dd8:	ldur	x9, [x29, #-16]
     ddc:	ldr	x9, [x9, #8]
     de0:	cmp	x8, x9
     de4:	b.ls	ebc <gz_comp+0x260>  // b.plast
     de8:	ldur	x8, [x29, #-48]
     dec:	ldr	x8, [x8, #24]
     df0:	ldur	x9, [x29, #-16]
     df4:	ldr	x9, [x9, #8]
     df8:	subs	x8, x8, x9
     dfc:	ldursw	x9, [x29, #-40]
     e00:	cmp	x8, x9
     e04:	b.le	e14 <gz_comp+0x1b8>
     e08:	ldur	w8, [x29, #-40]
     e0c:	str	w8, [sp, #32]
     e10:	b	e2c <gz_comp+0x1d0>
     e14:	ldur	x8, [x29, #-48]
     e18:	ldr	x8, [x8, #24]
     e1c:	ldur	x9, [x29, #-16]
     e20:	ldr	x9, [x9, #8]
     e24:	subs	x8, x8, x9
     e28:	str	w8, [sp, #32]
     e2c:	ldr	w8, [sp, #32]
     e30:	stur	w8, [x29, #-36]
     e34:	ldur	x9, [x29, #-16]
     e38:	ldr	w0, [x9, #28]
     e3c:	ldur	x9, [x29, #-16]
     e40:	ldr	x1, [x9, #8]
     e44:	ldur	w8, [x29, #-36]
     e48:	mov	w2, w8
     e4c:	bl	0 <write>
     e50:	stur	w0, [x29, #-28]
     e54:	ldur	w8, [x29, #-28]
     e58:	cmp	w8, #0x0
     e5c:	cset	w8, ge  // ge = tcont
     e60:	tbnz	w8, #0, ea4 <gz_comp+0x248>
     e64:	ldur	x0, [x29, #-16]
     e68:	str	x0, [sp, #24]
     e6c:	bl	0 <__errno_location>
     e70:	ldr	w0, [x0]
     e74:	bl	0 <strerror>
     e78:	ldr	x8, [sp, #24]
     e7c:	str	x0, [sp, #16]
     e80:	mov	x0, x8
     e84:	mov	w9, #0xffffffff            	// #-1
     e88:	mov	w1, w9
     e8c:	ldr	x2, [sp, #16]
     e90:	str	w9, [sp, #12]
     e94:	bl	0 <gz_error>
     e98:	ldr	w9, [sp, #12]
     e9c:	stur	w9, [x29, #-4]
     ea0:	b	f78 <gz_comp+0x31c>
     ea4:	ldursw	x8, [x29, #-28]
     ea8:	ldur	x9, [x29, #-16]
     eac:	ldr	x10, [x9, #8]
     eb0:	add	x8, x10, x8
     eb4:	str	x8, [x9, #8]
     eb8:	b	dd0 <gz_comp+0x174>
     ebc:	ldur	x8, [x29, #-48]
     ec0:	ldr	w9, [x8, #32]
     ec4:	cbnz	w9, ef8 <gz_comp+0x29c>
     ec8:	ldur	x8, [x29, #-16]
     ecc:	ldr	w9, [x8, #40]
     ed0:	ldur	x8, [x29, #-48]
     ed4:	str	w9, [x8, #32]
     ed8:	ldur	x8, [x29, #-16]
     edc:	ldr	x8, [x8, #56]
     ee0:	ldur	x10, [x29, #-48]
     ee4:	str	x8, [x10, #24]
     ee8:	ldur	x8, [x29, #-16]
     eec:	ldr	x8, [x8, #56]
     ef0:	ldur	x10, [x29, #-16]
     ef4:	str	x8, [x10, #8]
     ef8:	ldur	x8, [x29, #-48]
     efc:	ldr	w9, [x8, #32]
     f00:	stur	w9, [x29, #-32]
     f04:	ldur	x0, [x29, #-48]
     f08:	ldur	w1, [x29, #-20]
     f0c:	bl	0 <deflate>
     f10:	stur	w0, [x29, #-24]
     f14:	ldur	w9, [x29, #-24]
     f18:	mov	w10, #0xfffffffe            	// #-2
     f1c:	cmp	w9, w10
     f20:	b.ne	f44 <gz_comp+0x2e8>  // b.any
     f24:	ldur	x0, [x29, #-16]
     f28:	mov	w1, #0xfffffffe            	// #-2
     f2c:	adrp	x2, 0 <gzwrite>
     f30:	add	x2, x2, #0x0
     f34:	bl	0 <gz_error>
     f38:	mov	w8, #0xffffffff            	// #-1
     f3c:	stur	w8, [x29, #-4]
     f40:	b	f78 <gz_comp+0x31c>
     f44:	ldur	x8, [x29, #-48]
     f48:	ldr	w9, [x8, #32]
     f4c:	ldur	w10, [x29, #-32]
     f50:	subs	w9, w10, w9
     f54:	stur	w9, [x29, #-32]
     f58:	ldur	w8, [x29, #-32]
     f5c:	cbnz	w8, da4 <gz_comp+0x148>
     f60:	ldur	w8, [x29, #-20]
     f64:	cmp	w8, #0x4
     f68:	b.ne	f74 <gz_comp+0x318>  // b.any
     f6c:	ldur	x0, [x29, #-48]
     f70:	bl	0 <deflateReset>
     f74:	stur	wzr, [x29, #-4]
     f78:	ldur	w0, [x29, #-4]
     f7c:	ldp	x29, x30, [sp, #112]
     f80:	add	sp, sp, #0x80
     f84:	ret

0000000000000f88 <gzprintf>:
     f88:	sub	sp, sp, #0x130
     f8c:	stp	x29, x30, [sp, #272]
     f90:	str	x28, [sp, #288]
     f94:	add	x29, sp, #0x110
     f98:	str	q7, [sp, #112]
     f9c:	str	q6, [sp, #96]
     fa0:	str	q5, [sp, #80]
     fa4:	str	q4, [sp, #64]
     fa8:	str	q3, [sp, #48]
     fac:	str	q2, [sp, #32]
     fb0:	str	q1, [sp, #16]
     fb4:	str	q0, [sp]
     fb8:	str	x7, [sp, #168]
     fbc:	str	x6, [sp, #160]
     fc0:	str	x5, [sp, #152]
     fc4:	str	x4, [sp, #144]
     fc8:	str	x3, [sp, #136]
     fcc:	str	x2, [sp, #128]
     fd0:	stur	x0, [x29, #-8]
     fd4:	stur	x1, [x29, #-16]
     fd8:	mov	w8, #0xffffff80            	// #-128
     fdc:	stur	w8, [x29, #-20]
     fe0:	mov	w8, #0xffffffd0            	// #-48
     fe4:	stur	w8, [x29, #-24]
     fe8:	mov	x9, sp
     fec:	add	x9, x9, #0x80
     ff0:	stur	x9, [x29, #-32]
     ff4:	add	x9, sp, #0x80
     ff8:	add	x9, x9, #0x30
     ffc:	stur	x9, [x29, #-40]
    1000:	add	x9, x29, #0x20
    1004:	stur	x9, [x29, #-48]
    1008:	ldur	x0, [x29, #-8]
    100c:	ldur	x1, [x29, #-16]
    1010:	ldur	q0, [x29, #-48]
    1014:	ldur	q1, [x29, #-32]
    1018:	stur	q1, [x29, #-80]
    101c:	stur	q0, [x29, #-96]
    1020:	sub	x2, x29, #0x60
    1024:	bl	7e4 <gzvprintf>
    1028:	stur	w0, [x29, #-52]
    102c:	ldur	w0, [x29, #-52]
    1030:	ldr	x28, [sp, #288]
    1034:	ldp	x29, x30, [sp, #272]
    1038:	add	sp, sp, #0x130
    103c:	ret

0000000000001040 <gzflush>:
    1040:	sub	sp, sp, #0x30
    1044:	stp	x29, x30, [sp, #32]
    1048:	add	x29, sp, #0x20
    104c:	str	x0, [sp, #16]
    1050:	str	w1, [sp, #12]
    1054:	ldr	x8, [sp, #16]
    1058:	cbnz	x8, 1068 <gzflush+0x28>
    105c:	mov	w8, #0xfffffffe            	// #-2
    1060:	stur	w8, [x29, #-4]
    1064:	b	111c <gzflush+0xdc>
    1068:	ldr	x8, [sp, #16]
    106c:	str	x8, [sp]
    1070:	ldr	x8, [sp]
    1074:	ldr	w9, [x8, #24]
    1078:	mov	w10, #0x79b1                	// #31153
    107c:	cmp	w9, w10
    1080:	b.ne	1090 <gzflush+0x50>  // b.any
    1084:	ldr	x8, [sp]
    1088:	ldr	w9, [x8, #108]
    108c:	cbz	w9, 109c <gzflush+0x5c>
    1090:	mov	w8, #0xfffffffe            	// #-2
    1094:	stur	w8, [x29, #-4]
    1098:	b	111c <gzflush+0xdc>
    109c:	ldr	w8, [sp, #12]
    10a0:	cmp	w8, #0x0
    10a4:	cset	w8, lt  // lt = tstop
    10a8:	tbnz	w8, #0, 10b8 <gzflush+0x78>
    10ac:	ldr	w8, [sp, #12]
    10b0:	cmp	w8, #0x4
    10b4:	b.le	10c4 <gzflush+0x84>
    10b8:	mov	w8, #0xfffffffe            	// #-2
    10bc:	stur	w8, [x29, #-4]
    10c0:	b	111c <gzflush+0xdc>
    10c4:	ldr	x8, [sp]
    10c8:	ldr	w9, [x8, #104]
    10cc:	cbz	w9, 1104 <gzflush+0xc4>
    10d0:	ldr	x8, [sp]
    10d4:	str	wzr, [x8, #104]
    10d8:	ldr	x0, [sp]
    10dc:	ldr	x8, [sp]
    10e0:	ldr	x1, [x8, #96]
    10e4:	bl	5e0 <gz_zero>
    10e8:	mov	w9, #0xffffffff            	// #-1
    10ec:	cmp	w0, w9
    10f0:	b.ne	1104 <gzflush+0xc4>  // b.any
    10f4:	ldr	x8, [sp]
    10f8:	ldr	w9, [x8, #108]
    10fc:	stur	w9, [x29, #-4]
    1100:	b	111c <gzflush+0xdc>
    1104:	ldr	x0, [sp]
    1108:	ldr	w1, [sp, #12]
    110c:	bl	c5c <gz_comp>
    1110:	ldr	x8, [sp]
    1114:	ldr	w9, [x8, #108]
    1118:	stur	w9, [x29, #-4]
    111c:	ldur	w0, [x29, #-4]
    1120:	ldp	x29, x30, [sp, #32]
    1124:	add	sp, sp, #0x30
    1128:	ret

000000000000112c <gzsetparams>:
    112c:	sub	sp, sp, #0x40
    1130:	stp	x29, x30, [sp, #48]
    1134:	add	x29, sp, #0x30
    1138:	stur	x0, [x29, #-16]
    113c:	stur	w1, [x29, #-20]
    1140:	str	w2, [sp, #24]
    1144:	ldur	x8, [x29, #-16]
    1148:	cbnz	x8, 1158 <gzsetparams+0x2c>
    114c:	mov	w8, #0xfffffffe            	// #-2
    1150:	stur	w8, [x29, #-4]
    1154:	b	1274 <gzsetparams+0x148>
    1158:	ldur	x8, [x29, #-16]
    115c:	str	x8, [sp, #16]
    1160:	ldr	x8, [sp, #16]
    1164:	add	x8, x8, #0x78
    1168:	str	x8, [sp, #8]
    116c:	ldr	x8, [sp, #16]
    1170:	ldr	w9, [x8, #24]
    1174:	mov	w10, #0x79b1                	// #31153
    1178:	cmp	w9, w10
    117c:	b.ne	118c <gzsetparams+0x60>  // b.any
    1180:	ldr	x8, [sp, #16]
    1184:	ldr	w9, [x8, #108]
    1188:	cbz	w9, 1198 <gzsetparams+0x6c>
    118c:	mov	w8, #0xfffffffe            	// #-2
    1190:	stur	w8, [x29, #-4]
    1194:	b	1274 <gzsetparams+0x148>
    1198:	ldur	w8, [x29, #-20]
    119c:	ldr	x9, [sp, #16]
    11a0:	ldr	w10, [x9, #88]
    11a4:	cmp	w8, w10
    11a8:	b.ne	11c8 <gzsetparams+0x9c>  // b.any
    11ac:	ldr	w8, [sp, #24]
    11b0:	ldr	x9, [sp, #16]
    11b4:	ldr	w10, [x9, #92]
    11b8:	cmp	w8, w10
    11bc:	b.ne	11c8 <gzsetparams+0x9c>  // b.any
    11c0:	stur	wzr, [x29, #-4]
    11c4:	b	1274 <gzsetparams+0x148>
    11c8:	ldr	x8, [sp, #16]
    11cc:	ldr	w9, [x8, #104]
    11d0:	cbz	w9, 1208 <gzsetparams+0xdc>
    11d4:	ldr	x8, [sp, #16]
    11d8:	str	wzr, [x8, #104]
    11dc:	ldr	x0, [sp, #16]
    11e0:	ldr	x8, [sp, #16]
    11e4:	ldr	x1, [x8, #96]
    11e8:	bl	5e0 <gz_zero>
    11ec:	mov	w9, #0xffffffff            	// #-1
    11f0:	cmp	w0, w9
    11f4:	b.ne	1208 <gzsetparams+0xdc>  // b.any
    11f8:	ldr	x8, [sp, #16]
    11fc:	ldr	w9, [x8, #108]
    1200:	stur	w9, [x29, #-4]
    1204:	b	1274 <gzsetparams+0x148>
    1208:	ldr	x8, [sp, #16]
    120c:	ldr	w9, [x8, #40]
    1210:	cbz	w9, 1258 <gzsetparams+0x12c>
    1214:	ldr	x8, [sp, #8]
    1218:	ldr	w9, [x8, #8]
    121c:	cbz	w9, 1248 <gzsetparams+0x11c>
    1220:	ldr	x0, [sp, #16]
    1224:	mov	w1, #0x5                   	// #5
    1228:	bl	c5c <gz_comp>
    122c:	mov	w8, #0xffffffff            	// #-1
    1230:	cmp	w0, w8
    1234:	b.ne	1248 <gzsetparams+0x11c>  // b.any
    1238:	ldr	x8, [sp, #16]
    123c:	ldr	w9, [x8, #108]
    1240:	stur	w9, [x29, #-4]
    1244:	b	1274 <gzsetparams+0x148>
    1248:	ldr	x0, [sp, #8]
    124c:	ldur	w1, [x29, #-20]
    1250:	ldr	w2, [sp, #24]
    1254:	bl	0 <deflateParams>
    1258:	ldur	w8, [x29, #-20]
    125c:	ldr	x9, [sp, #16]
    1260:	str	w8, [x9, #88]
    1264:	ldr	w8, [sp, #24]
    1268:	ldr	x9, [sp, #16]
    126c:	str	w8, [x9, #92]
    1270:	stur	wzr, [x29, #-4]
    1274:	ldur	w0, [x29, #-4]
    1278:	ldp	x29, x30, [sp, #48]
    127c:	add	sp, sp, #0x40
    1280:	ret

0000000000001284 <gzclose_w>:
    1284:	sub	sp, sp, #0x30
    1288:	stp	x29, x30, [sp, #32]
    128c:	add	x29, sp, #0x20
    1290:	str	x0, [sp, #16]
    1294:	str	wzr, [sp, #12]
    1298:	ldr	x8, [sp, #16]
    129c:	cbnz	x8, 12ac <gzclose_w+0x28>
    12a0:	mov	w8, #0xfffffffe            	// #-2
    12a4:	stur	w8, [x29, #-4]
    12a8:	b	13c8 <gzclose_w+0x144>
    12ac:	ldr	x8, [sp, #16]
    12b0:	str	x8, [sp]
    12b4:	ldr	x8, [sp]
    12b8:	ldr	w9, [x8, #24]
    12bc:	mov	w10, #0x79b1                	// #31153
    12c0:	cmp	w9, w10
    12c4:	b.eq	12d4 <gzclose_w+0x50>  // b.none
    12c8:	mov	w8, #0xfffffffe            	// #-2
    12cc:	stur	w8, [x29, #-4]
    12d0:	b	13c8 <gzclose_w+0x144>
    12d4:	ldr	x8, [sp]
    12d8:	ldr	w9, [x8, #104]
    12dc:	cbz	w9, 1310 <gzclose_w+0x8c>
    12e0:	ldr	x8, [sp]
    12e4:	str	wzr, [x8, #104]
    12e8:	ldr	x0, [sp]
    12ec:	ldr	x8, [sp]
    12f0:	ldr	x1, [x8, #96]
    12f4:	bl	5e0 <gz_zero>
    12f8:	mov	w9, #0xffffffff            	// #-1
    12fc:	cmp	w0, w9
    1300:	b.ne	1310 <gzclose_w+0x8c>  // b.any
    1304:	ldr	x8, [sp]
    1308:	ldr	w9, [x8, #108]
    130c:	str	w9, [sp, #12]
    1310:	ldr	x0, [sp]
    1314:	mov	w1, #0x4                   	// #4
    1318:	bl	c5c <gz_comp>
    131c:	mov	w8, #0xffffffff            	// #-1
    1320:	cmp	w0, w8
    1324:	b.ne	1334 <gzclose_w+0xb0>  // b.any
    1328:	ldr	x8, [sp]
    132c:	ldr	w9, [x8, #108]
    1330:	str	w9, [sp, #12]
    1334:	ldr	x8, [sp]
    1338:	ldr	w9, [x8, #40]
    133c:	cbz	w9, 1374 <gzclose_w+0xf0>
    1340:	ldr	x8, [sp]
    1344:	ldr	w9, [x8, #64]
    1348:	cbnz	w9, 1368 <gzclose_w+0xe4>
    134c:	ldr	x8, [sp]
    1350:	add	x0, x8, #0x78
    1354:	bl	0 <deflateEnd>
    1358:	ldr	x8, [sp]
    135c:	ldr	x8, [x8, #56]
    1360:	mov	x0, x8
    1364:	bl	0 <free>
    1368:	ldr	x8, [sp]
    136c:	ldr	x0, [x8, #48]
    1370:	bl	0 <free>
    1374:	ldr	x0, [sp]
    1378:	mov	w8, wzr
    137c:	mov	w1, w8
    1380:	mov	x9, xzr
    1384:	mov	x2, x9
    1388:	bl	0 <gz_error>
    138c:	ldr	x9, [sp]
    1390:	ldr	x0, [x9, #32]
    1394:	bl	0 <free>
    1398:	ldr	x9, [sp]
    139c:	ldr	w0, [x9, #28]
    13a0:	bl	0 <close>
    13a4:	mov	w8, #0xffffffff            	// #-1
    13a8:	cmp	w0, w8
    13ac:	b.ne	13b8 <gzclose_w+0x134>  // b.any
    13b0:	mov	w8, #0xffffffff            	// #-1
    13b4:	str	w8, [sp, #12]
    13b8:	ldr	x0, [sp]
    13bc:	bl	0 <free>
    13c0:	ldr	w8, [sp, #12]
    13c4:	stur	w8, [x29, #-4]
    13c8:	ldur	w0, [x29, #-4]
    13cc:	ldp	x29, x30, [sp, #32]
    13d0:	add	sp, sp, #0x30
    13d4:	ret
