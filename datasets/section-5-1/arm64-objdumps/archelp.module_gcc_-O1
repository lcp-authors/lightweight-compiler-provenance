
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//archelp.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <handle_symlink>:
   0:	str	wzr, [x5]
   4:	and	w4, w4, #0xe000
   8:	cmp	w4, #0xa, lsl #12
   c:	b.ne	428 <handle_symlink+0x428>  // b.any
  10:	stp	x29, x30, [sp, #-80]!
  14:	mov	x29, sp
  18:	stp	x19, x20, [sp, #16]
  1c:	stp	x21, x22, [sp, #32]
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x0
  28:	mov	x22, x1
  2c:	mov	x19, x2
  30:	mov	x21, x3
  34:	mov	x20, x5
  38:	ldr	x1, [x1, #8]
  3c:	mov	w0, #0x0                   	// #0
  40:	cbz	x1, e4 <handle_symlink+0xe4>
  44:	mov	x0, x2
  48:	bl	0 <grub_strlen>
  4c:	mov	x24, x0
  50:	mov	x2, x0
  54:	mov	x1, x19
  58:	ldr	x0, [x21]
  5c:	bl	0 <grub_memcmp>
  60:	mov	w1, w0
  64:	mov	w0, #0x0                   	// #0
  68:	cbnz	w1, e4 <handle_symlink+0xe4>
  6c:	ldr	x19, [x21]
  70:	add	x2, x19, x24
  74:	ldrb	w1, [x19, x24]
  78:	cmp	w1, #0x2f
  7c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
  80:	b.ne	e4 <handle_symlink+0xe4>  // b.any
  84:	cmp	w1, #0x0
  88:	cinc	x24, x2, ne  // ne = any
  8c:	cmp	x19, x2
  90:	b.hi	f8 <handle_symlink+0xf8>  // b.pmore
  94:	ldrb	w0, [x2]
  98:	cmp	w0, #0x2f
  9c:	b.eq	b4 <handle_symlink+0xb4>  // b.none
  a0:	sub	x2, x2, #0x1
  a4:	cmp	x19, x2
  a8:	b.ls	94 <handle_symlink+0x94>  // b.plast
  ac:	mov	x19, #0x0                   	// #0
  b0:	b	c4 <handle_symlink+0xc4>
  b4:	cmp	x19, x2
  b8:	b.hi	100 <handle_symlink+0x100>  // b.pmore
  bc:	subs	x19, x2, x19
  c0:	cinc	x19, x19, ne  // ne = any
  c4:	ldr	x1, [x22, #8]
  c8:	mov	x0, x23
  cc:	blr	x1
  d0:	mov	x23, x0
  d4:	cbz	x0, 108 <handle_symlink+0x108>
  d8:	ldrb	w1, [x0]
  dc:	mov	w0, #0x0                   	// #0
  e0:	cbnz	w1, 118 <handle_symlink+0x118>
  e4:	ldp	x19, x20, [sp, #16]
  e8:	ldp	x21, x22, [sp, #32]
  ec:	ldp	x23, x24, [sp, #48]
  f0:	ldp	x29, x30, [sp], #80
  f4:	ret
  f8:	mov	x19, #0x0                   	// #0
  fc:	b	c4 <handle_symlink+0xc4>
 100:	mov	x19, #0x0                   	// #0
 104:	b	c4 <handle_symlink+0xc4>
 108:	adrp	x0, 0 <handle_symlink>
 10c:	ldr	x0, [x0]
 110:	ldr	w0, [x0]
 114:	b	e4 <handle_symlink+0xe4>
 118:	stp	x25, x26, [sp, #64]
 11c:	mov	x0, x23
 120:	bl	0 <grub_strlen>
 124:	mov	x25, x0
 128:	ldr	x0, [x21]
 12c:	bl	0 <grub_strlen>
 130:	add	x0, x0, x25
 134:	add	x0, x0, #0x2
 138:	bl	0 <grub_malloc>
 13c:	mov	x22, x0
 140:	cbz	x0, 1dc <handle_symlink+0x1dc>
 144:	add	x26, x0, x19
 148:	mov	x1, x23
 14c:	mov	x0, x26
 150:	bl	0 <grub_strcpy>
 154:	mov	x0, x23
 158:	bl	0 <grub_free>
 15c:	ldrb	w0, [x22, x19]
 160:	cmp	w0, #0x2f
 164:	b.eq	1f0 <handle_symlink+0x1f0>  // b.none
 168:	cbnz	x19, 340 <handle_symlink+0x340>
 16c:	add	x0, x19, x25
 170:	mov	x1, x24
 174:	add	x0, x22, x0
 178:	bl	0 <grub_strcpy>
 17c:	mov	x5, x22
 180:	ldr	x4, [x21]
 184:	adrp	x0, 0 <handle_symlink>
 188:	ldr	x3, [x0]
 18c:	adrp	x0, 0 <handle_symlink>
 190:	ldr	x2, [x0]
 194:	mov	w1, #0x7f                  	// #127
 198:	adrp	x0, 0 <handle_symlink>
 19c:	ldr	x0, [x0]
 1a0:	bl	0 <grub_real_dprintf>
 1a4:	ldr	x0, [x21]
 1a8:	bl	0 <grub_free>
 1ac:	ldrb	w0, [x22]
 1b0:	mov	x1, x22
 1b4:	mov	x4, x22
 1b8:	sub	x3, x22, #0x1
 1bc:	cbnz	w0, 39c <handle_symlink+0x39c>
 1c0:	strb	wzr, [x4]
 1c4:	str	x22, [x21]
 1c8:	mov	w0, #0x1                   	// #1
 1cc:	str	w0, [x20]
 1d0:	mov	w0, #0x0                   	// #0
 1d4:	ldp	x25, x26, [sp, #64]
 1d8:	b	e4 <handle_symlink+0xe4>
 1dc:	adrp	x0, 0 <handle_symlink>
 1e0:	ldr	x0, [x0]
 1e4:	ldr	w0, [x0]
 1e8:	ldp	x25, x26, [sp, #64]
 1ec:	b	e4 <handle_symlink+0xe4>
 1f0:	mov	x0, x22
 1f4:	mov	x2, x0
 1f8:	ldrb	w1, [x26], #1
 1fc:	strb	w1, [x0], #1
 200:	cbnz	w1, 1f4 <handle_symlink+0x1f4>
 204:	mov	x0, #0x0                   	// #0
 208:	ldrb	w1, [x24, x0]
 20c:	strb	w1, [x2, x0]
 210:	add	x0, x0, #0x1
 214:	cbnz	w1, 208 <handle_symlink+0x208>
 218:	mov	x5, x22
 21c:	ldr	x4, [x21]
 220:	adrp	x0, 0 <handle_symlink>
 224:	ldr	x3, [x0]
 228:	adrp	x0, 0 <handle_symlink>
 22c:	ldr	x2, [x0]
 230:	mov	w1, #0x70                  	// #112
 234:	adrp	x0, 0 <handle_symlink>
 238:	ldr	x0, [x0]
 23c:	bl	0 <grub_real_dprintf>
 240:	ldr	x0, [x21]
 244:	bl	0 <grub_free>
 248:	ldrb	w1, [x22]
 24c:	mov	x0, x22
 250:	mov	x2, x22
 254:	sub	x3, x22, #0x1
 258:	cbnz	w1, 2b4 <handle_symlink+0x2b4>
 25c:	strb	wzr, [x2]
 260:	str	x22, [x21]
 264:	mov	w0, #0x1                   	// #1
 268:	str	w0, [x20]
 26c:	mov	w0, #0x0                   	// #0
 270:	ldp	x25, x26, [sp, #64]
 274:	b	e4 <handle_symlink+0xe4>
 278:	ldrb	w1, [x0, #1]
 27c:	cmp	w1, #0x2f
 280:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 284:	b.eq	308 <handle_symlink+0x308>  // b.none
 288:	cmp	w1, #0x2e
 28c:	b.ne	2d4 <handle_symlink+0x2d4>  // b.any
 290:	ldrb	w1, [x0, #2]
 294:	cmp	w1, #0x2f
 298:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 29c:	b.ne	2d4 <handle_symlink+0x2d4>  // b.any
 2a0:	add	x0, x0, #0x2
 2a4:	cmp	x22, x2
 2a8:	b.ne	310 <handle_symlink+0x310>  // b.any
 2ac:	ldrb	w1, [x0]
 2b0:	cbz	w1, 25c <handle_symlink+0x25c>
 2b4:	ldrb	w1, [x0]
 2b8:	cmp	w1, #0x2f
 2bc:	b.ne	2cc <handle_symlink+0x2cc>  // b.any
 2c0:	ldrb	w1, [x0, #1]!
 2c4:	cmp	w1, #0x2f
 2c8:	b.eq	2c0 <handle_symlink+0x2c0>  // b.none
 2cc:	cmp	w1, #0x2e
 2d0:	b.eq	278 <handle_symlink+0x278>  // b.none
 2d4:	ldrb	w1, [x0]
 2d8:	cmp	w1, #0x2f
 2dc:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 2e0:	b.eq	2f8 <handle_symlink+0x2f8>  // b.none
 2e4:	strb	w1, [x2], #1
 2e8:	ldrb	w1, [x0, #1]!
 2ec:	cmp	w1, #0x2f
 2f0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 2f4:	b.ne	2e4 <handle_symlink+0x2e4>  // b.any
 2f8:	cbz	w1, 2ac <handle_symlink+0x2ac>
 2fc:	add	x0, x0, #0x1
 300:	strb	w1, [x2], #1
 304:	b	2ac <handle_symlink+0x2ac>
 308:	add	x0, x0, #0x1
 30c:	b	2ac <handle_symlink+0x2ac>
 310:	sub	x2, x2, #0x2
 314:	cmp	x22, x2
 318:	b.hi	338 <handle_symlink+0x338>  // b.pmore
 31c:	ldrb	w1, [x2]
 320:	cmp	w1, #0x2f
 324:	b.eq	338 <handle_symlink+0x338>  // b.none
 328:	sub	x2, x2, #0x1
 32c:	cmp	x2, x3
 330:	b.ne	31c <handle_symlink+0x31c>  // b.any
 334:	mov	x2, x3
 338:	add	x2, x2, #0x1
 33c:	b	2ac <handle_symlink+0x2ac>
 340:	mov	x2, x19
 344:	ldr	x1, [x21]
 348:	mov	x0, x22
 34c:	bl	0 <grub_memmove>
 350:	add	x0, x22, x19
 354:	mov	w1, #0x2f                  	// #47
 358:	sturb	w1, [x0, #-1]
 35c:	b	16c <handle_symlink+0x16c>
 360:	ldrb	w0, [x1, #1]
 364:	cmp	w0, #0x2f
 368:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 36c:	b.eq	3f0 <handle_symlink+0x3f0>  // b.none
 370:	cmp	w0, #0x2e
 374:	b.ne	3bc <handle_symlink+0x3bc>  // b.any
 378:	ldrb	w0, [x1, #2]
 37c:	cmp	w0, #0x2f
 380:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 384:	b.ne	3bc <handle_symlink+0x3bc>  // b.any
 388:	add	x1, x1, #0x2
 38c:	cmp	x22, x4
 390:	b.ne	3f8 <handle_symlink+0x3f8>  // b.any
 394:	ldrb	w0, [x1]
 398:	cbz	w0, 1c0 <handle_symlink+0x1c0>
 39c:	ldrb	w2, [x1]
 3a0:	cmp	w2, #0x2f
 3a4:	b.ne	3b4 <handle_symlink+0x3b4>  // b.any
 3a8:	ldrb	w2, [x1, #1]!
 3ac:	cmp	w2, #0x2f
 3b0:	b.eq	3a8 <handle_symlink+0x3a8>  // b.none
 3b4:	cmp	w2, #0x2e
 3b8:	b.eq	360 <handle_symlink+0x360>  // b.none
 3bc:	ldrb	w2, [x1]
 3c0:	cmp	w2, #0x2f
 3c4:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 3c8:	b.eq	3e0 <handle_symlink+0x3e0>  // b.none
 3cc:	strb	w2, [x4], #1
 3d0:	ldrb	w2, [x1, #1]!
 3d4:	cmp	w2, #0x2f
 3d8:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 3dc:	b.ne	3cc <handle_symlink+0x3cc>  // b.any
 3e0:	cbz	w2, 394 <handle_symlink+0x394>
 3e4:	add	x1, x1, #0x1
 3e8:	strb	w2, [x4], #1
 3ec:	b	394 <handle_symlink+0x394>
 3f0:	add	x1, x1, #0x1
 3f4:	b	394 <handle_symlink+0x394>
 3f8:	sub	x4, x4, #0x2
 3fc:	cmp	x22, x4
 400:	b.hi	420 <handle_symlink+0x420>  // b.pmore
 404:	ldrb	w0, [x4]
 408:	cmp	w0, #0x2f
 40c:	b.eq	420 <handle_symlink+0x420>  // b.none
 410:	sub	x4, x4, #0x1
 414:	cmp	x3, x4
 418:	b.ne	404 <handle_symlink+0x404>  // b.any
 41c:	mov	x4, x3
 420:	add	x4, x4, #0x1
 424:	b	394 <handle_symlink+0x394>
 428:	mov	w0, #0x0                   	// #0
 42c:	ret
	...

0000000000000450 <grub_archelp_dir>:
 450:	stp	x29, x30, [sp, #-144]!
 454:	mov	x29, sp
 458:	stp	x19, x20, [sp, #16]
 45c:	stp	x21, x22, [sp, #32]
 460:	stp	x23, x24, [sp, #48]
 464:	mov	x20, x0
 468:	mov	x21, x1
 46c:	mov	x23, x3
 470:	mov	x24, x4
 474:	add	x0, x2, #0x1
 478:	bl	0 <grub_strdup>
 47c:	str	x0, [sp, #128]
 480:	cbz	x0, 4f4 <grub_archelp_dir+0xa4>
 484:	stp	x25, x26, [sp, #64]
 488:	str	x27, [sp, #80]
 48c:	ldrb	w2, [x0]
 490:	mov	x1, x0
 494:	mov	x3, x0
 498:	sub	x4, x0, #0x1
 49c:	cbnz	w2, 540 <grub_archelp_dir+0xf0>
 4a0:	strb	wzr, [x3]
 4a4:	ldr	x19, [sp, #128]
 4a8:	mov	x0, x19
 4ac:	bl	0 <grub_strlen>
 4b0:	sub	x1, x0, #0x1
 4b4:	add	x1, x19, x1
 4b8:	ldr	x0, [sp, #128]
 4bc:	cmp	x1, x0
 4c0:	b.cc	4e0 <grub_archelp_dir+0x90>  // b.lo, b.ul, b.last
 4c4:	ldrb	w2, [x1]
 4c8:	cmp	w2, #0x2f
 4cc:	b.ne	4e0 <grub_archelp_dir+0x90>  // b.any
 4d0:	strb	wzr, [x1], #-1
 4d4:	ldr	x0, [sp, #128]
 4d8:	cmp	x0, x1
 4dc:	b.ls	4c4 <grub_archelp_dir+0x74>  // b.plast
 4e0:	bl	0 <grub_strlen>
 4e4:	mov	x19, x0
 4e8:	mov	w25, #0x0                   	// #0
 4ec:	mov	x22, #0x0                   	// #0
 4f0:	b	6d0 <grub_archelp_dir+0x280>
 4f4:	adrp	x0, 0 <handle_symlink>
 4f8:	ldr	x0, [x0]
 4fc:	ldr	w0, [x0]
 500:	b	874 <grub_archelp_dir+0x424>
 504:	ldrb	w2, [x1, #1]
 508:	cmp	w2, #0x2f
 50c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 510:	b.eq	594 <grub_archelp_dir+0x144>  // b.none
 514:	cmp	w2, #0x2e
 518:	b.ne	560 <grub_archelp_dir+0x110>  // b.any
 51c:	ldrb	w2, [x1, #2]
 520:	cmp	w2, #0x2f
 524:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 528:	b.ne	560 <grub_archelp_dir+0x110>  // b.any
 52c:	add	x1, x1, #0x2
 530:	cmp	x0, x3
 534:	b.ne	59c <grub_archelp_dir+0x14c>  // b.any
 538:	ldrb	w2, [x1]
 53c:	cbz	w2, 4a0 <grub_archelp_dir+0x50>
 540:	ldrb	w2, [x1]
 544:	cmp	w2, #0x2f
 548:	b.ne	558 <grub_archelp_dir+0x108>  // b.any
 54c:	ldrb	w2, [x1, #1]!
 550:	cmp	w2, #0x2f
 554:	b.eq	54c <grub_archelp_dir+0xfc>  // b.none
 558:	cmp	w2, #0x2e
 55c:	b.eq	504 <grub_archelp_dir+0xb4>  // b.none
 560:	ldrb	w2, [x1]
 564:	cmp	w2, #0x2f
 568:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 56c:	b.eq	584 <grub_archelp_dir+0x134>  // b.none
 570:	strb	w2, [x3], #1
 574:	ldrb	w2, [x1, #1]!
 578:	cmp	w2, #0x2f
 57c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 580:	b.ne	570 <grub_archelp_dir+0x120>  // b.any
 584:	cbz	w2, 538 <grub_archelp_dir+0xe8>
 588:	add	x1, x1, #0x1
 58c:	strb	w2, [x3], #1
 590:	b	538 <grub_archelp_dir+0xe8>
 594:	add	x1, x1, #0x1
 598:	b	538 <grub_archelp_dir+0xe8>
 59c:	sub	x3, x3, #0x2
 5a0:	cmp	x0, x3
 5a4:	b.hi	5c4 <grub_archelp_dir+0x174>  // b.pmore
 5a8:	ldrb	w2, [x3]
 5ac:	cmp	w2, #0x2f
 5b0:	b.eq	5c4 <grub_archelp_dir+0x174>  // b.none
 5b4:	sub	x3, x3, #0x1
 5b8:	cmp	x4, x3
 5bc:	b.ne	5a8 <grub_archelp_dir+0x158>  // b.any
 5c0:	mov	x3, x4
 5c4:	add	x3, x3, #0x1
 5c8:	b	538 <grub_archelp_dir+0xe8>
 5cc:	ldrb	w1, [x0, #1]
 5d0:	cmp	w1, #0x2f
 5d4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 5d8:	b.eq	65c <grub_archelp_dir+0x20c>  // b.none
 5dc:	cmp	w1, #0x2e
 5e0:	b.ne	628 <grub_archelp_dir+0x1d8>  // b.any
 5e4:	ldrb	w1, [x0, #2]
 5e8:	cmp	w1, #0x2f
 5ec:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 5f0:	b.ne	628 <grub_archelp_dir+0x1d8>  // b.any
 5f4:	add	x0, x0, #0x2
 5f8:	cmp	x3, x2
 5fc:	b.ne	664 <grub_archelp_dir+0x214>  // b.any
 600:	ldrb	w1, [x0]
 604:	cbz	w1, 694 <grub_archelp_dir+0x244>
 608:	ldrb	w1, [x0]
 60c:	cmp	w1, #0x2f
 610:	b.ne	620 <grub_archelp_dir+0x1d0>  // b.any
 614:	ldrb	w1, [x0, #1]!
 618:	cmp	w1, #0x2f
 61c:	b.eq	614 <grub_archelp_dir+0x1c4>  // b.none
 620:	cmp	w1, #0x2e
 624:	b.eq	5cc <grub_archelp_dir+0x17c>  // b.none
 628:	ldrb	w1, [x0]
 62c:	cmp	w1, #0x2f
 630:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 634:	b.eq	64c <grub_archelp_dir+0x1fc>  // b.none
 638:	strb	w1, [x2], #1
 63c:	ldrb	w1, [x0, #1]!
 640:	cmp	w1, #0x2f
 644:	ccmp	w1, #0x0, #0x4, ne  // ne = any
 648:	b.ne	638 <grub_archelp_dir+0x1e8>  // b.any
 64c:	cbz	w1, 600 <grub_archelp_dir+0x1b0>
 650:	add	x0, x0, #0x1
 654:	strb	w1, [x2], #1
 658:	b	600 <grub_archelp_dir+0x1b0>
 65c:	add	x0, x0, #0x1
 660:	b	600 <grub_archelp_dir+0x1b0>
 664:	sub	x2, x2, #0x2
 668:	cmp	x3, x2
 66c:	b.hi	68c <grub_archelp_dir+0x23c>  // b.pmore
 670:	ldrb	w1, [x2]
 674:	cmp	w1, #0x2f
 678:	b.eq	68c <grub_archelp_dir+0x23c>  // b.none
 67c:	sub	x2, x2, #0x1
 680:	cmp	x4, x2
 684:	b.ne	670 <grub_archelp_dir+0x220>  // b.any
 688:	mov	x2, x4
 68c:	add	x2, x2, #0x1
 690:	b	600 <grub_archelp_dir+0x1b0>
 694:	strb	wzr, [x2]
 698:	mov	x2, x19
 69c:	ldr	x1, [sp, #136]
 6a0:	ldr	x0, [sp, #128]
 6a4:	bl	0 <grub_memcmp>
 6a8:	cbnz	w0, 6c8 <grub_archelp_dir+0x278>
 6ac:	ldr	x0, [sp, #136]
 6b0:	add	x26, x0, x19
 6b4:	ldrb	w0, [x0, x19]
 6b8:	cmp	w0, #0x2f
 6bc:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 6c0:	ccmp	x19, #0x0, #0x4, ne  // ne = any
 6c4:	b.eq	714 <grub_archelp_dir+0x2c4>  // b.none
 6c8:	ldr	x0, [sp, #136]
 6cc:	bl	0 <grub_free>
 6d0:	ldr	x4, [x21]
 6d4:	add	x3, sp, #0x6c
 6d8:	add	x2, sp, #0x68
 6dc:	add	x1, sp, #0x88
 6e0:	mov	x0, x20
 6e4:	blr	x4
 6e8:	cbnz	w0, 850 <grub_archelp_dir+0x400>
 6ec:	ldr	w0, [sp, #108]
 6f0:	cmn	w0, #0x1
 6f4:	b.eq	850 <grub_archelp_dir+0x400>  // b.none
 6f8:	ldr	x3, [sp, #136]
 6fc:	ldrb	w1, [x3]
 700:	mov	x0, x3
 704:	mov	x2, x3
 708:	sub	x4, x3, #0x1
 70c:	cbnz	w1, 608 <grub_archelp_dir+0x1b8>
 710:	b	694 <grub_archelp_dir+0x244>
 714:	cmp	w0, #0x2f
 718:	b.ne	728 <grub_archelp_dir+0x2d8>  // b.any
 71c:	ldrb	w0, [x26, #1]!
 720:	cmp	w0, #0x2f
 724:	b.eq	71c <grub_archelp_dir+0x2cc>  // b.none
 728:	mov	w1, #0x2f                  	// #47
 72c:	mov	x0, x26
 730:	bl	0 <grub_strchr>
 734:	mov	x27, x0
 738:	cbz	x0, 740 <grub_archelp_dir+0x2f0>
 73c:	strb	wzr, [x0]
 740:	cbz	x22, 754 <grub_archelp_dir+0x304>
 744:	ldr	x1, [sp, #136]
 748:	mov	x0, x22
 74c:	bl	0 <grub_strcmp>
 750:	cbz	w0, 75c <grub_archelp_dir+0x30c>
 754:	ldrb	w0, [x26]
 758:	cbnz	w0, 7bc <grub_archelp_dir+0x36c>
 75c:	str	wzr, [sp, #112]
 760:	add	x5, sp, #0x70
 764:	ldr	w4, [sp, #108]
 768:	add	x3, sp, #0x80
 76c:	ldr	x2, [sp, #136]
 770:	mov	x1, x21
 774:	mov	x0, x20
 778:	bl	0 <handle_symlink>
 77c:	mov	w26, w0
 780:	ldr	x0, [sp, #136]
 784:	bl	0 <grub_free>
 788:	cbnz	w26, 850 <grub_archelp_dir+0x400>
 78c:	ldr	w0, [sp, #112]
 790:	cbz	w0, 6d0 <grub_archelp_dir+0x280>
 794:	ldr	x0, [sp, #128]
 798:	bl	0 <grub_strlen>
 79c:	mov	x19, x0
 7a0:	add	w25, w25, #0x1
 7a4:	cmp	w25, #0x8
 7a8:	b.eq	840 <grub_archelp_dir+0x3f0>  // b.none
 7ac:	ldr	x1, [x21, #16]
 7b0:	mov	x0, x20
 7b4:	blr	x1
 7b8:	b	6d0 <grub_archelp_dir+0x280>
 7bc:	mov	x2, #0x10                  	// #16
 7c0:	mov	w1, #0x0                   	// #0
 7c4:	add	x0, sp, #0x70
 7c8:	bl	0 <grub_memset>
 7cc:	mov	w1, #0x1                   	// #1
 7d0:	cbz	x27, 820 <grub_archelp_dir+0x3d0>
 7d4:	ldrb	w0, [sp, #112]
 7d8:	bfxil	w0, w1, #0, #1
 7dc:	strb	w0, [sp, #112]
 7e0:	ldr	w0, [sp, #108]
 7e4:	tbnz	w0, #31, 7fc <grub_archelp_dir+0x3ac>
 7e8:	ldr	w0, [sp, #104]
 7ec:	str	w0, [sp, #116]
 7f0:	ldrb	w0, [sp, #112]
 7f4:	orr	w0, w0, #0x2
 7f8:	strb	w0, [sp, #112]
 7fc:	mov	x2, x24
 800:	add	x1, sp, #0x70
 804:	mov	x0, x26
 808:	blr	x23
 80c:	cbnz	w0, 834 <grub_archelp_dir+0x3e4>
 810:	mov	x0, x22
 814:	bl	0 <grub_free>
 818:	ldr	x22, [sp, #136]
 81c:	b	6d0 <grub_archelp_dir+0x280>
 820:	ldr	w0, [sp, #108]
 824:	and	w0, w0, #0xe000
 828:	cmp	w0, #0x4, lsl #12
 82c:	cset	w1, eq  // eq = none
 830:	b	7d4 <grub_archelp_dir+0x384>
 834:	ldr	x0, [sp, #136]
 838:	bl	0 <grub_free>
 83c:	b	850 <grub_archelp_dir+0x400>
 840:	adrp	x0, 0 <handle_symlink>
 844:	ldr	x1, [x0]
 848:	mov	w0, #0x19                  	// #25
 84c:	bl	0 <grub_error>
 850:	ldr	x0, [sp, #128]
 854:	bl	0 <grub_free>
 858:	mov	x0, x22
 85c:	bl	0 <grub_free>
 860:	adrp	x0, 0 <handle_symlink>
 864:	ldr	x0, [x0]
 868:	ldr	w0, [x0]
 86c:	ldp	x25, x26, [sp, #64]
 870:	ldr	x27, [sp, #80]
 874:	ldp	x19, x20, [sp, #16]
 878:	ldp	x21, x22, [sp, #32]
 87c:	ldp	x23, x24, [sp, #48]
 880:	ldp	x29, x30, [sp], #144
 884:	ret
	...

0000000000000898 <grub_archelp_open>:
 898:	stp	x29, x30, [sp, #-96]!
 89c:	mov	x29, sp
 8a0:	stp	x19, x20, [sp, #16]
 8a4:	stp	x21, x22, [sp, #32]
 8a8:	str	x23, [sp, #48]
 8ac:	mov	x19, x0
 8b0:	mov	x20, x1
 8b4:	mov	x21, x2
 8b8:	add	x0, x2, #0x1
 8bc:	bl	0 <grub_strdup>
 8c0:	str	x0, [sp, #80]
 8c4:	cbz	x0, 8e8 <grub_archelp_open+0x50>
 8c8:	ldrb	w2, [x0]
 8cc:	mov	x3, x0
 8d0:	mov	x1, x0
 8d4:	sub	x4, x0, #0x1
 8d8:	cbnz	w2, 934 <grub_archelp_open+0x9c>
 8dc:	strb	wzr, [x1]
 8e0:	mov	w22, #0x0                   	// #0
 8e4:	b	b18 <grub_archelp_open+0x280>
 8e8:	adrp	x0, 0 <handle_symlink>
 8ec:	ldr	x0, [x0]
 8f0:	ldr	w23, [x0]
 8f4:	b	9e8 <grub_archelp_open+0x150>
 8f8:	ldrb	w2, [x3, #1]
 8fc:	cmp	w2, #0x2f
 900:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 904:	b.eq	988 <grub_archelp_open+0xf0>  // b.none
 908:	cmp	w2, #0x2e
 90c:	b.ne	954 <grub_archelp_open+0xbc>  // b.any
 910:	ldrb	w2, [x3, #2]
 914:	cmp	w2, #0x2f
 918:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 91c:	b.ne	954 <grub_archelp_open+0xbc>  // b.any
 920:	add	x3, x3, #0x2
 924:	cmp	x0, x1
 928:	b.ne	990 <grub_archelp_open+0xf8>  // b.any
 92c:	ldrb	w2, [x3]
 930:	cbz	w2, 8dc <grub_archelp_open+0x44>
 934:	ldrb	w2, [x3]
 938:	cmp	w2, #0x2f
 93c:	b.ne	94c <grub_archelp_open+0xb4>  // b.any
 940:	ldrb	w2, [x3, #1]!
 944:	cmp	w2, #0x2f
 948:	b.eq	940 <grub_archelp_open+0xa8>  // b.none
 94c:	cmp	w2, #0x2e
 950:	b.eq	8f8 <grub_archelp_open+0x60>  // b.none
 954:	ldrb	w2, [x3]
 958:	cmp	w2, #0x2f
 95c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 960:	b.eq	978 <grub_archelp_open+0xe0>  // b.none
 964:	strb	w2, [x1], #1
 968:	ldrb	w2, [x3, #1]!
 96c:	cmp	w2, #0x2f
 970:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 974:	b.ne	964 <grub_archelp_open+0xcc>  // b.any
 978:	cbz	w2, 92c <grub_archelp_open+0x94>
 97c:	add	x3, x3, #0x1
 980:	strb	w2, [x1], #1
 984:	b	92c <grub_archelp_open+0x94>
 988:	add	x3, x3, #0x1
 98c:	b	92c <grub_archelp_open+0x94>
 990:	sub	x1, x1, #0x2
 994:	cmp	x0, x1
 998:	b.hi	9b8 <grub_archelp_open+0x120>  // b.pmore
 99c:	ldrb	w2, [x1]
 9a0:	cmp	w2, #0x2f
 9a4:	b.eq	9b8 <grub_archelp_open+0x120>  // b.none
 9a8:	sub	x1, x1, #0x1
 9ac:	cmp	x1, x4
 9b0:	b.ne	99c <grub_archelp_open+0x104>  // b.any
 9b4:	mov	x1, x4
 9b8:	add	x1, x1, #0x1
 9bc:	b	92c <grub_archelp_open+0x94>
 9c0:	mov	x2, x21
 9c4:	adrp	x0, 0 <handle_symlink>
 9c8:	ldr	x1, [x0]
 9cc:	mov	w0, #0x5                   	// #5
 9d0:	bl	0 <grub_error>
 9d4:	ldr	x0, [sp, #80]
 9d8:	bl	0 <grub_free>
 9dc:	adrp	x0, 0 <handle_symlink>
 9e0:	ldr	x0, [x0]
 9e4:	ldr	w23, [x0]
 9e8:	mov	w0, w23
 9ec:	ldp	x19, x20, [sp, #16]
 9f0:	ldp	x21, x22, [sp, #32]
 9f4:	ldr	x23, [sp, #48]
 9f8:	ldp	x29, x30, [sp], #96
 9fc:	ret
 a00:	ldrb	w0, [x4, #1]
 a04:	cmp	w0, #0x2f
 a08:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 a0c:	b.eq	a90 <grub_archelp_open+0x1f8>  // b.none
 a10:	cmp	w0, #0x2e
 a14:	b.ne	a5c <grub_archelp_open+0x1c4>  // b.any
 a18:	ldrb	w0, [x4, #2]
 a1c:	cmp	w0, #0x2f
 a20:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 a24:	b.ne	a5c <grub_archelp_open+0x1c4>  // b.any
 a28:	add	x4, x4, #0x2
 a2c:	cmp	x6, x3
 a30:	b.ne	a98 <grub_archelp_open+0x200>  // b.any
 a34:	ldrb	w0, [x4]
 a38:	cbz	w0, ac8 <grub_archelp_open+0x230>
 a3c:	ldrb	w0, [x4]
 a40:	cmp	w0, #0x2f
 a44:	b.ne	a54 <grub_archelp_open+0x1bc>  // b.any
 a48:	ldrb	w0, [x4, #1]!
 a4c:	cmp	w0, #0x2f
 a50:	b.eq	a48 <grub_archelp_open+0x1b0>  // b.none
 a54:	cmp	w0, #0x2e
 a58:	b.eq	a00 <grub_archelp_open+0x168>  // b.none
 a5c:	ldrb	w5, [x4]
 a60:	cmp	w5, #0x2f
 a64:	ccmp	w5, #0x0, #0x4, ne  // ne = any
 a68:	b.eq	a80 <grub_archelp_open+0x1e8>  // b.none
 a6c:	strb	w5, [x3], #1
 a70:	ldrb	w5, [x4, #1]!
 a74:	cmp	w5, #0x2f
 a78:	ccmp	w5, #0x0, #0x4, ne  // ne = any
 a7c:	b.ne	a6c <grub_archelp_open+0x1d4>  // b.any
 a80:	cbz	w5, a34 <grub_archelp_open+0x19c>
 a84:	add	x4, x4, #0x1
 a88:	strb	w5, [x3], #1
 a8c:	b	a34 <grub_archelp_open+0x19c>
 a90:	add	x4, x4, #0x1
 a94:	b	a34 <grub_archelp_open+0x19c>
 a98:	sub	x3, x3, #0x2
 a9c:	cmp	x6, x3
 aa0:	b.hi	ac0 <grub_archelp_open+0x228>  // b.pmore
 aa4:	ldrb	w0, [x3]
 aa8:	cmp	w0, #0x2f
 aac:	b.eq	ac0 <grub_archelp_open+0x228>  // b.none
 ab0:	sub	x3, x3, #0x1
 ab4:	cmp	x3, x1
 ab8:	b.ne	aa4 <grub_archelp_open+0x20c>  // b.any
 abc:	mov	x3, x1
 ac0:	add	x3, x3, #0x1
 ac4:	b	a34 <grub_archelp_open+0x19c>
 ac8:	strb	wzr, [x3]
 acc:	add	x5, sp, #0x4c
 ad0:	ldr	w4, [sp, #68]
 ad4:	add	x3, sp, #0x50
 ad8:	ldr	x2, [sp, #88]
 adc:	mov	x1, x20
 ae0:	mov	x0, x19
 ae4:	bl	0 <handle_symlink>
 ae8:	mov	w23, w0
 aec:	cbnz	w0, b5c <grub_archelp_open+0x2c4>
 af0:	ldr	w0, [sp, #76]
 af4:	cbz	w0, b7c <grub_archelp_open+0x2e4>
 af8:	ldr	x1, [x20, #16]
 afc:	mov	x0, x19
 b00:	blr	x1
 b04:	add	w22, w22, #0x1
 b08:	cmp	w22, #0x8
 b0c:	b.eq	b68 <grub_archelp_open+0x2d0>  // b.none
 b10:	ldr	x0, [sp, #88]
 b14:	bl	0 <grub_free>
 b18:	ldr	x4, [x20]
 b1c:	add	x3, sp, #0x44
 b20:	add	x2, sp, #0x48
 b24:	add	x1, sp, #0x58
 b28:	mov	x0, x19
 b2c:	blr	x4
 b30:	cbnz	w0, 9d4 <grub_archelp_open+0x13c>
 b34:	ldr	w0, [sp, #68]
 b38:	cmn	w0, #0x1
 b3c:	b.eq	9c0 <grub_archelp_open+0x128>  // b.none
 b40:	ldr	x6, [sp, #88]
 b44:	ldrb	w0, [x6]
 b48:	mov	x4, x6
 b4c:	mov	x3, x6
 b50:	sub	x1, x6, #0x1
 b54:	cbnz	w0, a3c <grub_archelp_open+0x1a4>
 b58:	b	ac8 <grub_archelp_open+0x230>
 b5c:	ldr	x0, [sp, #88]
 b60:	bl	0 <grub_free>
 b64:	b	9d4 <grub_archelp_open+0x13c>
 b68:	adrp	x0, 0 <handle_symlink>
 b6c:	ldr	x1, [x0]
 b70:	mov	w0, #0x19                  	// #25
 b74:	bl	0 <grub_error>
 b78:	b	9d4 <grub_archelp_open+0x13c>
 b7c:	ldr	x1, [sp, #88]
 b80:	ldr	x0, [sp, #80]
 b84:	bl	0 <grub_strcmp>
 b88:	cbnz	w0, b10 <grub_archelp_open+0x278>
 b8c:	ldr	x0, [sp, #88]
 b90:	bl	0 <grub_free>
 b94:	ldr	x0, [sp, #80]
 b98:	bl	0 <grub_free>
 b9c:	b	9e8 <grub_archelp_open+0x150>
	...
